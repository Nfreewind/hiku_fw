
OV7740_Example_Default.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003298  00400000  00400000  00008000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000854  20000000  00403298  00010000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  2 .bss          000004bc  20000854  00403aec  00010854  2**2
                  ALLOC
  3 .stack        00003000  20000d10  00403fa8  00010854  2**0
                  ALLOC
  4 .ARM.attributes 0000002a  00000000  00000000  00010854  2**0
                  CONTENTS, READONLY
  5 .comment      0000005b  00000000  00000000  0001087e  2**0
                  CONTENTS, READONLY
  6 .debug_info   0000cec8  00000000  00000000  000108d9  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002121  00000000  00000000  0001d7a1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00005c79  00000000  00000000  0001f8c2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000890  00000000  00000000  0002553b  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000878  00000000  00000000  00025dcb  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  00014863  00000000  00000000  00026643  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000baaf  00000000  00000000  0003aea6  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00057ab7  00000000  00000000  00046955  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  000016bc  00000000  00000000  0009e40c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <_sfixed>:
  400000:	20003d10 	.word	0x20003d10
  400004:	004010e1 	.word	0x004010e1
  400008:	004010dd 	.word	0x004010dd
  40000c:	004010dd 	.word	0x004010dd
  400010:	004010dd 	.word	0x004010dd
  400014:	004010dd 	.word	0x004010dd
  400018:	004010dd 	.word	0x004010dd
	...
  40002c:	004010dd 	.word	0x004010dd
  400030:	004010dd 	.word	0x004010dd
  400034:	00000000 	.word	0x00000000
  400038:	004010dd 	.word	0x004010dd
  40003c:	00401411 	.word	0x00401411
  400040:	004010dd 	.word	0x004010dd
  400044:	004010dd 	.word	0x004010dd
  400048:	004010dd 	.word	0x004010dd
  40004c:	004010dd 	.word	0x004010dd
  400050:	004010dd 	.word	0x004010dd
  400054:	004010dd 	.word	0x004010dd
  400058:	004010dd 	.word	0x004010dd
  40005c:	00000000 	.word	0x00000000
  400060:	004010dd 	.word	0x004010dd
  400064:	004010dd 	.word	0x004010dd
  400068:	00000000 	.word	0x00000000
  40006c:	00400d29 	.word	0x00400d29
  400070:	00400d3d 	.word	0x00400d3d
  400074:	00400d51 	.word	0x00400d51
  400078:	004010dd 	.word	0x004010dd
  40007c:	004010dd 	.word	0x004010dd
	...
  400088:	004010dd 	.word	0x004010dd
  40008c:	004010dd 	.word	0x004010dd
  400090:	004010dd 	.word	0x004010dd
  400094:	004010dd 	.word	0x004010dd
  400098:	004010dd 	.word	0x004010dd
  40009c:	004010dd 	.word	0x004010dd
  4000a0:	004010dd 	.word	0x004010dd
  4000a4:	004010dd 	.word	0x004010dd
  4000a8:	004010dd 	.word	0x004010dd
  4000ac:	004010dd 	.word	0x004010dd
  4000b0:	004010dd 	.word	0x004010dd
  4000b4:	004010dd 	.word	0x004010dd
  4000b8:	004010dd 	.word	0x004010dd
  4000bc:	004010dd 	.word	0x004010dd
  4000c0:	004010dd 	.word	0x004010dd
  4000c4:	004010dd 	.word	0x004010dd
  4000c8:	004010dd 	.word	0x004010dd

004000cc <__do_global_dtors_aux>:
  4000cc:	b510      	push	{r4, lr}
  4000ce:	4c05      	ldr	r4, [pc, #20]	; (4000e4 <__do_global_dtors_aux+0x18>)
  4000d0:	7823      	ldrb	r3, [r4, #0]
  4000d2:	b933      	cbnz	r3, 4000e2 <__do_global_dtors_aux+0x16>
  4000d4:	4b04      	ldr	r3, [pc, #16]	; (4000e8 <__do_global_dtors_aux+0x1c>)
  4000d6:	b113      	cbz	r3, 4000de <__do_global_dtors_aux+0x12>
  4000d8:	4804      	ldr	r0, [pc, #16]	; (4000ec <__do_global_dtors_aux+0x20>)
  4000da:	f3af 8000 	nop.w
  4000de:	2301      	movs	r3, #1
  4000e0:	7023      	strb	r3, [r4, #0]
  4000e2:	bd10      	pop	{r4, pc}
  4000e4:	20000854 	.word	0x20000854
  4000e8:	00000000 	.word	0x00000000
  4000ec:	00403298 	.word	0x00403298

004000f0 <frame_dummy>:
  4000f0:	4b08      	ldr	r3, [pc, #32]	; (400114 <frame_dummy+0x24>)
  4000f2:	b510      	push	{r4, lr}
  4000f4:	b11b      	cbz	r3, 4000fe <frame_dummy+0xe>
  4000f6:	4808      	ldr	r0, [pc, #32]	; (400118 <frame_dummy+0x28>)
  4000f8:	4908      	ldr	r1, [pc, #32]	; (40011c <frame_dummy+0x2c>)
  4000fa:	f3af 8000 	nop.w
  4000fe:	4808      	ldr	r0, [pc, #32]	; (400120 <frame_dummy+0x30>)
  400100:	6803      	ldr	r3, [r0, #0]
  400102:	b903      	cbnz	r3, 400106 <frame_dummy+0x16>
  400104:	bd10      	pop	{r4, pc}
  400106:	4b07      	ldr	r3, [pc, #28]	; (400124 <frame_dummy+0x34>)
  400108:	2b00      	cmp	r3, #0
  40010a:	d0fb      	beq.n	400104 <frame_dummy+0x14>
  40010c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  400110:	4718      	bx	r3
  400112:	bf00      	nop
  400114:	00000000 	.word	0x00000000
  400118:	00403298 	.word	0x00403298
  40011c:	20000858 	.word	0x20000858
  400120:	00403298 	.word	0x00403298
  400124:	00000000 	.word	0x00000000

00400128 <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
  400128:	b510      	push	{r4, lr}
	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
  40012a:	480e      	ldr	r0, [pc, #56]	; (400164 <sysclk_init+0x3c>)
  40012c:	4b0e      	ldr	r3, [pc, #56]	; (400168 <sysclk_init+0x40>)
  40012e:	4798      	blx	r3
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
  400130:	2000      	movs	r0, #0
  400132:	213e      	movs	r1, #62	; 0x3e
  400134:	4b0d      	ldr	r3, [pc, #52]	; (40016c <sysclk_init+0x44>)
  400136:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
  400138:	4c0d      	ldr	r4, [pc, #52]	; (400170 <sysclk_init+0x48>)
  40013a:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
  40013c:	2800      	cmp	r0, #0
  40013e:	d0fc      	beq.n	40013a <sysclk_init+0x12>

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
	} else {
		pmc_disable_pllbck();
  400140:	4b0c      	ldr	r3, [pc, #48]	; (400174 <sysclk_init+0x4c>)
  400142:	4798      	blx	r3
		PMC->CKGR_PLLBR = p_cfg->ctrl;
  400144:	4a0c      	ldr	r2, [pc, #48]	; (400178 <sysclk_init+0x50>)
  400146:	4b0d      	ldr	r3, [pc, #52]	; (40017c <sysclk_init+0x54>)
  400148:	62da      	str	r2, [r3, #44]	; 0x2c
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		return pmc_is_locked_pllack();
	} else {
		return pmc_is_locked_pllbck();
  40014a:	4c0d      	ldr	r4, [pc, #52]	; (400180 <sysclk_init+0x58>)
  40014c:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
  40014e:	2800      	cmp	r0, #0
  400150:	d0fc      	beq.n	40014c <sysclk_init+0x24>

		pll_enable_source(CONFIG_PLL1_SOURCE);
		pll_config_defaults(&pllcfg, 1);
		pll_enable(&pllcfg, 1);
		pll_wait_for_lock(1);
		pmc_switch_mck_to_pllbck(CONFIG_SYSCLK_PRES);
  400152:	2010      	movs	r0, #16
  400154:	4b0b      	ldr	r3, [pc, #44]	; (400184 <sysclk_init+0x5c>)
  400156:	4798      	blx	r3
	}
#endif

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
  400158:	4b0b      	ldr	r3, [pc, #44]	; (400188 <sysclk_init+0x60>)
  40015a:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
  40015c:	4801      	ldr	r0, [pc, #4]	; (400164 <sysclk_init+0x3c>)
  40015e:	4b02      	ldr	r3, [pc, #8]	; (400168 <sysclk_init+0x40>)
  400160:	4798      	blx	r3
  400162:	bd10      	pop	{r4, pc}
  400164:	07270e00 	.word	0x07270e00
  400168:	004012a5 	.word	0x004012a5
  40016c:	00400dc9 	.word	0x00400dc9
  400170:	00400e1d 	.word	0x00400e1d
  400174:	00400e69 	.word	0x00400e69
  400178:	00133f01 	.word	0x00133f01
  40017c:	400e0400 	.word	0x400e0400
  400180:	00400e75 	.word	0x00400e75
  400184:	00400d65 	.word	0x00400d65
  400188:	00401191 	.word	0x00401191

0040018c <board_init>:
#include "board.h"
#include "conf_board.h"
#include "gpio.h"

void board_init(void)
{
  40018c:	b570      	push	{r4, r5, r6, lr}
	/* Disable the watchdog */
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	WDT->WDT_MR = WDT_MR_WDDIS;
  40018e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  400192:	4b67      	ldr	r3, [pc, #412]	; (400330 <board_init+0x1a4>)
  400194:	605a      	str	r2, [r3, #4]
#endif

	/* Configure LED pins */
	gpio_configure_pin(LED0_GPIO, LED0_FLAGS);
  400196:	204c      	movs	r0, #76	; 0x4c
  400198:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
  40019c:	4c65      	ldr	r4, [pc, #404]	; (400334 <board_init+0x1a8>)
  40019e:	47a0      	blx	r4

	/* Configure Push Button pins */
	gpio_configure_pin(GPIO_PUSH_BUTTON_1, GPIO_PUSH_BUTTON_1_FLAGS);
  4001a0:	2002      	movs	r0, #2
  4001a2:	4965      	ldr	r1, [pc, #404]	; (400338 <board_init+0x1ac>)
  4001a4:	47a0      	blx	r4
	gpio_configure_group(PINS_UART_PIO, PINS_UART, PINS_UART_FLAGS);
#endif

	/* Configure TWI pins */
#ifdef CONF_BOARD_TWI0
	gpio_configure_pin(TWI0_DATA_GPIO, TWI0_DATA_FLAGS);
  4001a6:	2003      	movs	r0, #3
  4001a8:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  4001ac:	47a0      	blx	r4
	gpio_configure_pin(TWI0_CLK_GPIO, TWI0_CLK_FLAGS);
  4001ae:	2004      	movs	r0, #4
  4001b0:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  4001b4:	47a0      	blx	r4
	gpio_configure_pin(SPI_NPCS0_GPIO, SPI_NPCS0_FLAGS);
#endif

	/* Configure PCK0 pins */
#ifdef CONF_BOARD_PCK0
	gpio_configure_pin(PIN_PCK0, PIN_PCK0_FLAGS);
  4001b6:	202d      	movs	r0, #45	; 0x2d
  4001b8:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  4001bc:	47a0      	blx	r4
	gpio_configure_pin(USB_VBUS_GPIO, USB_VBUS_FLAGS);
#endif

	/* Configure LCD EBI pins */
#ifdef CONF_BOARD_ILI9325
	gpio_configure_pin(PIN_EBI_DATA_BUS_D0, PIN_EBI_DATA_BUS_FLAGS);
  4001be:	4d5f      	ldr	r5, [pc, #380]	; (40033c <board_init+0x1b0>)
  4001c0:	2040      	movs	r0, #64	; 0x40
  4001c2:	4629      	mov	r1, r5
  4001c4:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_DATA_BUS_D1, PIN_EBI_DATA_BUS_FLAGS);
  4001c6:	2041      	movs	r0, #65	; 0x41
  4001c8:	4629      	mov	r1, r5
  4001ca:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_DATA_BUS_D2, PIN_EBI_DATA_BUS_FLAGS);
  4001cc:	2042      	movs	r0, #66	; 0x42
  4001ce:	4629      	mov	r1, r5
  4001d0:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_DATA_BUS_D3, PIN_EBI_DATA_BUS_FLAGS);
  4001d2:	2043      	movs	r0, #67	; 0x43
  4001d4:	4629      	mov	r1, r5
  4001d6:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_DATA_BUS_D4, PIN_EBI_DATA_BUS_FLAGS);
  4001d8:	2044      	movs	r0, #68	; 0x44
  4001da:	4629      	mov	r1, r5
  4001dc:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_DATA_BUS_D5, PIN_EBI_DATA_BUS_FLAGS);
  4001de:	2045      	movs	r0, #69	; 0x45
  4001e0:	4629      	mov	r1, r5
  4001e2:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_DATA_BUS_D6, PIN_EBI_DATA_BUS_FLAGS);
  4001e4:	2046      	movs	r0, #70	; 0x46
  4001e6:	4629      	mov	r1, r5
  4001e8:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_DATA_BUS_D7, PIN_EBI_DATA_BUS_FLAGS);
  4001ea:	2047      	movs	r0, #71	; 0x47
  4001ec:	4629      	mov	r1, r5
  4001ee:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_NRD, PIN_EBI_NRD_FLAGS);
  4001f0:	204b      	movs	r0, #75	; 0x4b
  4001f2:	4629      	mov	r1, r5
  4001f4:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_NWE, PIN_EBI_NWE_FLAGS);
  4001f6:	2048      	movs	r0, #72	; 0x48
  4001f8:	4629      	mov	r1, r5
  4001fa:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_NCS2, PIN_EBI_NCS2_FLAGS);
  4001fc:	4e50      	ldr	r6, [pc, #320]	; (400340 <board_init+0x1b4>)
  4001fe:	2016      	movs	r0, #22
  400200:	4631      	mov	r1, r6
  400202:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_LCD_RS, PIN_EBI_LCD_RS_FLAGS);
  400204:	2053      	movs	r0, #83	; 0x53
  400206:	4629      	mov	r1, r5
  400208:	47a0      	blx	r4
#endif

	/* Configure Backlight control pin */
#ifdef CONF_BOARD_AAT3155
	gpio_configure_pin(BOARD_AAT31XX_SET_GPIO, BOARD_AAT31XX_SET_FLAGS);
  40020a:	204d      	movs	r0, #77	; 0x4d
  40020c:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
  400210:	47a0      	blx	r4
#endif

	/* Configure SRAM pins */
#ifdef CONF_BOARD_SRAM
	gpio_configure_pin(PIN_EBI_DATA_BUS_D0, PIN_EBI_DATA_BUS_FLAGS);
  400212:	2040      	movs	r0, #64	; 0x40
  400214:	4629      	mov	r1, r5
  400216:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_DATA_BUS_D1, PIN_EBI_DATA_BUS_FLAGS);
  400218:	2041      	movs	r0, #65	; 0x41
  40021a:	4629      	mov	r1, r5
  40021c:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_DATA_BUS_D2, PIN_EBI_DATA_BUS_FLAGS);
  40021e:	2042      	movs	r0, #66	; 0x42
  400220:	4629      	mov	r1, r5
  400222:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_DATA_BUS_D3, PIN_EBI_DATA_BUS_FLAGS);
  400224:	2043      	movs	r0, #67	; 0x43
  400226:	4629      	mov	r1, r5
  400228:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_DATA_BUS_D4, PIN_EBI_DATA_BUS_FLAGS);
  40022a:	2044      	movs	r0, #68	; 0x44
  40022c:	4629      	mov	r1, r5
  40022e:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_DATA_BUS_D5, PIN_EBI_DATA_BUS_FLAGS);
  400230:	2045      	movs	r0, #69	; 0x45
  400232:	4629      	mov	r1, r5
  400234:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_DATA_BUS_D6, PIN_EBI_DATA_BUS_FLAGS);
  400236:	2046      	movs	r0, #70	; 0x46
  400238:	4629      	mov	r1, r5
  40023a:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_DATA_BUS_D7, PIN_EBI_DATA_BUS_FLAGS);
  40023c:	2047      	movs	r0, #71	; 0x47
  40023e:	4629      	mov	r1, r5
  400240:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_NRD, PIN_EBI_NRD_FLAGS);
  400242:	204b      	movs	r0, #75	; 0x4b
  400244:	4629      	mov	r1, r5
  400246:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_NWE, PIN_EBI_NWE_FLAGS);
  400248:	2048      	movs	r0, #72	; 0x48
  40024a:	4629      	mov	r1, r5
  40024c:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_NCS0, PIN_EBI_NCS0_FLAGS);
  40024e:	204e      	movs	r0, #78	; 0x4e
  400250:	4629      	mov	r1, r5
  400252:	47a0      	blx	r4
	gpio_configure_pin(SRAM_VCC_GPIO, SRAM_VCC_FLAGS);
  400254:	2049      	movs	r0, #73	; 0x49
  400256:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
  40025a:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_ADDR_BUS_A0, PIN_EBI_ADDR_BUS_FLAG1);
  40025c:	2052      	movs	r0, #82	; 0x52
  40025e:	4629      	mov	r1, r5
  400260:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_ADDR_BUS_A1, PIN_EBI_ADDR_BUS_FLAG1);
  400262:	2053      	movs	r0, #83	; 0x53
  400264:	4629      	mov	r1, r5
  400266:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_ADDR_BUS_A2, PIN_EBI_ADDR_BUS_FLAG1);
  400268:	2054      	movs	r0, #84	; 0x54
  40026a:	4629      	mov	r1, r5
  40026c:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_ADDR_BUS_A3, PIN_EBI_ADDR_BUS_FLAG1);
  40026e:	2055      	movs	r0, #85	; 0x55
  400270:	4629      	mov	r1, r5
  400272:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_ADDR_BUS_A4, PIN_EBI_ADDR_BUS_FLAG1);
  400274:	2056      	movs	r0, #86	; 0x56
  400276:	4629      	mov	r1, r5
  400278:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_ADDR_BUS_A5, PIN_EBI_ADDR_BUS_FLAG1);
  40027a:	2057      	movs	r0, #87	; 0x57
  40027c:	4629      	mov	r1, r5
  40027e:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_ADDR_BUS_A6, PIN_EBI_ADDR_BUS_FLAG1);
  400280:	2058      	movs	r0, #88	; 0x58
  400282:	4629      	mov	r1, r5
  400284:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_ADDR_BUS_A7, PIN_EBI_ADDR_BUS_FLAG1);
  400286:	2059      	movs	r0, #89	; 0x59
  400288:	4629      	mov	r1, r5
  40028a:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_ADDR_BUS_A8, PIN_EBI_ADDR_BUS_FLAG1);
  40028c:	205a      	movs	r0, #90	; 0x5a
  40028e:	4629      	mov	r1, r5
  400290:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_ADDR_BUS_A9, PIN_EBI_ADDR_BUS_FLAG1);
  400292:	205b      	movs	r0, #91	; 0x5b
  400294:	4629      	mov	r1, r5
  400296:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_ADDR_BUS_A10, PIN_EBI_ADDR_BUS_FLAG1);
  400298:	205c      	movs	r0, #92	; 0x5c
  40029a:	4629      	mov	r1, r5
  40029c:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_ADDR_BUS_A11, PIN_EBI_ADDR_BUS_FLAG1);
  40029e:	205d      	movs	r0, #93	; 0x5d
  4002a0:	4629      	mov	r1, r5
  4002a2:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_ADDR_BUS_A12, PIN_EBI_ADDR_BUS_FLAG1);
  4002a4:	205e      	movs	r0, #94	; 0x5e
  4002a6:	4629      	mov	r1, r5
  4002a8:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_ADDR_BUS_A13, PIN_EBI_ADDR_BUS_FLAG1);
  4002aa:	205f      	movs	r0, #95	; 0x5f
  4002ac:	4629      	mov	r1, r5
  4002ae:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_ADDR_BUS_A14, PIN_EBI_ADDR_BUS_FLAG2);
  4002b0:	2012      	movs	r0, #18
  4002b2:	4631      	mov	r1, r6
  4002b4:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_ADDR_BUS_A15, PIN_EBI_ADDR_BUS_FLAG2);
  4002b6:	2013      	movs	r0, #19
  4002b8:	4631      	mov	r1, r6
  4002ba:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_ADDR_BUS_A16, PIN_EBI_ADDR_BUS_FLAG2);
  4002bc:	2014      	movs	r0, #20
  4002be:	4631      	mov	r1, r6
  4002c0:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_ADDR_BUS_A17, PIN_EBI_ADDR_BUS_FLAG2);
  4002c2:	2000      	movs	r0, #0
  4002c4:	4631      	mov	r1, r6
  4002c6:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_ADDR_BUS_A18, PIN_EBI_ADDR_BUS_FLAG2);
  4002c8:	2001      	movs	r0, #1
  4002ca:	4631      	mov	r1, r6
  4002cc:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_ADDR_BUS_A19, PIN_EBI_ADDR_BUS_FLAG1);
  4002ce:	2050      	movs	r0, #80	; 0x50
  4002d0:	4629      	mov	r1, r5
  4002d2:	47a0      	blx	r4
#endif

	/* Configure Image sensor pins */
#ifdef CONF_BOARD_OV7740_IMAGE_SENSOR
	gpio_configure_pin(OV_SW_OVT_GPIO, OV_SW_OVT_FLAGS);
  4002d4:	204a      	movs	r0, #74	; 0x4a
  4002d6:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
  4002da:	47a0      	blx	r4
	gpio_configure_pin(OV_RST_GPIO, OV_RST_FLAGS);
  4002dc:	204f      	movs	r0, #79	; 0x4f
  4002de:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
  4002e2:	47a0      	blx	r4
	gpio_configure_pin(OV_FSIN_GPIO, OV_FSIN_FLAGS);
  4002e4:	2015      	movs	r0, #21
  4002e6:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
  4002ea:	47a0      	blx	r4
	gpio_configure_pin(OV_HSYNC_GPIO, OV_HSYNC_FLAGS);
  4002ec:	2010      	movs	r0, #16
  4002ee:	2171      	movs	r1, #113	; 0x71
  4002f0:	47a0      	blx	r4
	gpio_configure_pin(OV_VSYNC_GPIO, OV_VSYNC_FLAGS);
  4002f2:	200f      	movs	r0, #15
  4002f4:	2171      	movs	r1, #113	; 0x71
  4002f6:	47a0      	blx	r4
	gpio_configure_pin(OV_DATA_BUS_D2, OV_DATA_BUS_FLAGS);
  4002f8:	f105 5500 	add.w	r5, r5, #536870912	; 0x20000000
  4002fc:	2018      	movs	r0, #24
  4002fe:	4629      	mov	r1, r5
  400300:	47a0      	blx	r4
	gpio_configure_pin(OV_DATA_BUS_D3, OV_DATA_BUS_FLAGS);
  400302:	2019      	movs	r0, #25
  400304:	4629      	mov	r1, r5
  400306:	47a0      	blx	r4
	gpio_configure_pin(OV_DATA_BUS_D4, OV_DATA_BUS_FLAGS);
  400308:	201a      	movs	r0, #26
  40030a:	4629      	mov	r1, r5
  40030c:	47a0      	blx	r4
	gpio_configure_pin(OV_DATA_BUS_D5, OV_DATA_BUS_FLAGS);
  40030e:	201b      	movs	r0, #27
  400310:	4629      	mov	r1, r5
  400312:	47a0      	blx	r4
	gpio_configure_pin(OV_DATA_BUS_D6, OV_DATA_BUS_FLAGS);
  400314:	201c      	movs	r0, #28
  400316:	4629      	mov	r1, r5
  400318:	47a0      	blx	r4
	gpio_configure_pin(OV_DATA_BUS_D7, OV_DATA_BUS_FLAGS);
  40031a:	201d      	movs	r0, #29
  40031c:	4629      	mov	r1, r5
  40031e:	47a0      	blx	r4
	gpio_configure_pin(OV_DATA_BUS_D8, OV_DATA_BUS_FLAGS);
  400320:	201e      	movs	r0, #30
  400322:	4629      	mov	r1, r5
  400324:	47a0      	blx	r4
	gpio_configure_pin(OV_DATA_BUS_D9, OV_DATA_BUS_FLAGS);
  400326:	201f      	movs	r0, #31
  400328:	4629      	mov	r1, r5
  40032a:	47a0      	blx	r4
  40032c:	bd70      	pop	{r4, r5, r6, pc}
  40032e:	bf00      	nop
  400330:	400e1450 	.word	0x400e1450
  400334:	00400b2d 	.word	0x00400b2d
  400338:	28000079 	.word	0x28000079
  40033c:	08000001 	.word	0x08000001
  400340:	18000001 	.word	0x18000001

00400344 <ov_power>:
 * \param on_off 1 to turn on OV7740 sensor and 0 to turn off.
 * \param p_pio Pointer to the PIO instance which control OV7740 sensor power.
 * \param ul_mask Bitmask of OV7740 sensor power pin.
 */
void ov_power(uint32_t ul_on_off, Pio* const p_pio, const uint32_t ul_mask)
{
  400344:	b508      	push	{r3, lr}
	if (ul_on_off) {
  400346:	b120      	cbz	r0, 400352 <ov_power+0xe>
		pio_clear(p_pio, ul_mask);
  400348:	4608      	mov	r0, r1
  40034a:	4611      	mov	r1, r2
  40034c:	4b03      	ldr	r3, [pc, #12]	; (40035c <ov_power+0x18>)
  40034e:	4798      	blx	r3
  400350:	bd08      	pop	{r3, pc}
	} else {
		pio_set(p_pio, ul_mask);
  400352:	4608      	mov	r0, r1
  400354:	4611      	mov	r1, r2
  400356:	4b02      	ldr	r3, [pc, #8]	; (400360 <ov_power+0x1c>)
  400358:	4798      	blx	r3
  40035a:	bd08      	pop	{r3, pc}
  40035c:	004009f5 	.word	0x004009f5
  400360:	004009f1 	.word	0x004009f1

00400364 <ov_read_reg>:
 * \param p_twi TWI interface.
 * \param p_packet TWI packet.
 * \return 0 on success, TWID_ERROR_BUSY otherwise.
 */
uint32_t ov_read_reg(Twi* const p_twi, twi_packet_t* const p_packet)
{
  400364:	b508      	push	{r3, lr}
	uint32_t ul_status;

	ul_status = twi_master_read(p_twi, p_packet);
  400366:	4b01      	ldr	r3, [pc, #4]	; (40036c <ov_read_reg+0x8>)
  400368:	4798      	blx	r3

	return ul_status;
}
  40036a:	bd08      	pop	{r3, pc}
  40036c:	00400f5d 	.word	0x00400f5d

00400370 <ov_write_reg>:
 * \param p_twi TWI interface.
 * \param p_packet TWI packet.
 * \return 0 on success, TWID_ERROR_BUSY otherwise.
 */
uint32_t ov_write_reg(Twi* const p_twi, twi_packet_t* const p_packet)
{
  400370:	b508      	push	{r3, lr}
	uint32_t ul_status;

	ul_status = twi_master_write(p_twi, p_packet);
  400372:	4b01      	ldr	r3, [pc, #4]	; (400378 <ov_write_reg+0x8>)
  400374:	4798      	blx	r3

	return ul_status;
}
  400376:	bd08      	pop	{r3, pc}
  400378:	0040103d 	.word	0x0040103d

0040037c <ov_write_regs>:
 * \param p_twi TWI interface.
 * \param p_reg_list Register list to be written.
 * \return 0 on success, TWID_ERROR_BUSY otherwise.
 */
uint32_t ov_write_regs(Twi* const p_twi, const ov_reg *p_reg_list)
{
  40037c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  400380:	b086      	sub	sp, #24
  400382:	4607      	mov	r7, r0
  400384:	1c4c      	adds	r4, r1, #1
			(p_next->val == OV_VAL_TERM))) {
		if (p_next->reg == 0xFE) {
			delay_ms(5);
		} else {
			twi_packet_regs.addr[0] = p_next->reg;
			twi_packet_regs.addr_length = 1;
  400386:	2501      	movs	r5, #1
			twi_packet_regs.chip = OV_I2C_SENSOR_ADDRESS;
			twi_packet_regs.length = 1;
			twi_packet_regs.buffer = &(p_next->val);

			ul_err = ov_write_reg(p_twi, &twi_packet_regs);
  400388:	4e12      	ldr	r6, [pc, #72]	; (4003d4 <ov_write_regs+0x58>)
	ov_reg *p_next = (ov_reg *)p_reg_list;

	while (!((p_next->reg == OV_REG_TERM) &&
			(p_next->val == OV_VAL_TERM))) {
		if (p_next->reg == 0xFE) {
			delay_ms(5);
  40038a:	f8df 804c 	ldr.w	r8, [pc, #76]	; 4003d8 <ov_write_regs+0x5c>
	uint32_t ul_err;
	uint32_t ul_size = 0;
	twi_packet_t twi_packet_regs;
	ov_reg *p_next = (ov_reg *)p_reg_list;

	while (!((p_next->reg == OV_REG_TERM) &&
  40038e:	e013      	b.n	4003b8 <ov_write_regs+0x3c>
			(p_next->val == OV_VAL_TERM))) {
		if (p_next->reg == 0xFE) {
  400390:	2bfe      	cmp	r3, #254	; 0xfe
  400392:	d103      	bne.n	40039c <ov_write_regs+0x20>
			delay_ms(5);
  400394:	f24a 706a 	movw	r0, #42858	; 0xa76a
  400398:	47c0      	blx	r8
  40039a:	e00c      	b.n	4003b6 <ov_write_regs+0x3a>
		} else {
			twi_packet_regs.addr[0] = p_next->reg;
  40039c:	f88d 3004 	strb.w	r3, [sp, #4]
			twi_packet_regs.addr_length = 1;
  4003a0:	9502      	str	r5, [sp, #8]
			twi_packet_regs.chip = OV_I2C_SENSOR_ADDRESS;
  4003a2:	2321      	movs	r3, #33	; 0x21
  4003a4:	f88d 3014 	strb.w	r3, [sp, #20]
			twi_packet_regs.length = 1;
  4003a8:	9504      	str	r5, [sp, #16]
			twi_packet_regs.buffer = &(p_next->val);
  4003aa:	9203      	str	r2, [sp, #12]

			ul_err = ov_write_reg(p_twi, &twi_packet_regs);
  4003ac:	4638      	mov	r0, r7
  4003ae:	a901      	add	r1, sp, #4
  4003b0:	47b0      	blx	r6
			ul_size++;

			if (ul_err == TWI_BUSY) {
  4003b2:	2808      	cmp	r0, #8
  4003b4:	d00a      	beq.n	4003cc <ov_write_regs+0x50>
  4003b6:	3402      	adds	r4, #2
  4003b8:	4622      	mov	r2, r4
	uint32_t ul_err;
	uint32_t ul_size = 0;
	twi_packet_t twi_packet_regs;
	ov_reg *p_next = (ov_reg *)p_reg_list;

	while (!((p_next->reg == OV_REG_TERM) &&
  4003ba:	f814 3c01 	ldrb.w	r3, [r4, #-1]
  4003be:	2bff      	cmp	r3, #255	; 0xff
  4003c0:	d1e6      	bne.n	400390 <ov_write_regs+0x14>
  4003c2:	7821      	ldrb	r1, [r4, #0]
  4003c4:	29ff      	cmp	r1, #255	; 0xff
  4003c6:	d1e9      	bne.n	40039c <ov_write_regs+0x20>
			}
		}

		p_next++;
	}
	return 0;
  4003c8:	2000      	movs	r0, #0
  4003ca:	e000      	b.n	4003ce <ov_write_regs+0x52>

			ul_err = ov_write_reg(p_twi, &twi_packet_regs);
			ul_size++;

			if (ul_err == TWI_BUSY) {
				return ul_err;
  4003cc:	2008      	movs	r0, #8
		}

		p_next++;
	}
	return 0;
}
  4003ce:	b006      	add	sp, #24
  4003d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4003d4:	00400371 	.word	0x00400371
  4003d8:	20000001 	.word	0x20000001

004003dc <ov_init>:
 *
 * \param p_twi TWI interface.
 * \return 0 on success, 1 otherwise.
 */
uint32_t ov_init(Twi* const p_twi)
{
  4003dc:	b5f0      	push	{r4, r5, r6, r7, lr}
  4003de:	b08d      	sub	sp, #52	; 0x34
  4003e0:	4607      	mov	r7, r0
 */
static uint32_t ov_id(Twi* const p_twi)
{
	twi_packet_t packet_pid;
	twi_packet_t packet_ver;
	uint32_t ul_id = 0;
  4003e2:	2300      	movs	r3, #0
  4003e4:	9300      	str	r3, [sp, #0]
	uint32_t ul_ver = 0;
  4003e6:	9301      	str	r3, [sp, #4]

	/* OV_PID */
	packet_pid.chip = OV_I2C_SENSOR_ADDRESS;
  4003e8:	2621      	movs	r6, #33	; 0x21
  4003ea:	f88d 6018 	strb.w	r6, [sp, #24]
	packet_pid.addr[0] = OV7740_PIDH;
  4003ee:	230a      	movs	r3, #10
  4003f0:	f88d 3008 	strb.w	r3, [sp, #8]
	packet_pid.addr_length = 1;
  4003f4:	2401      	movs	r4, #1
  4003f6:	9403      	str	r4, [sp, #12]
	packet_pid.buffer = &ul_id;
  4003f8:	f8cd d010 	str.w	sp, [sp, #16]
	packet_pid.length = 1;
  4003fc:	9405      	str	r4, [sp, #20]

	ov_read_reg(p_twi, &packet_pid);
  4003fe:	a902      	add	r1, sp, #8
  400400:	4d3a      	ldr	r5, [pc, #232]	; (4004ec <ov_init+0x110>)
  400402:	47a8      	blx	r5

	/* OV_VER */
	packet_ver.chip = OV_I2C_SENSOR_ADDRESS;
  400404:	f88d 602c 	strb.w	r6, [sp, #44]	; 0x2c
	packet_ver.addr[0] = OV7740_PIDL;
  400408:	230b      	movs	r3, #11
  40040a:	f88d 301c 	strb.w	r3, [sp, #28]
	packet_ver.addr_length = 1;
  40040e:	9408      	str	r4, [sp, #32]
	packet_ver.buffer = &ul_ver;
  400410:	ab01      	add	r3, sp, #4
  400412:	9309      	str	r3, [sp, #36]	; 0x24
	packet_ver.length = 1;
  400414:	940a      	str	r4, [sp, #40]	; 0x28

	ov_read_reg(p_twi, &packet_ver);
  400416:	4638      	mov	r0, r7
  400418:	a907      	add	r1, sp, #28
  40041a:	47a8      	blx	r5
	return ((uint32_t)(ul_id << 8) | ul_ver);
  40041c:	9b01      	ldr	r3, [sp, #4]
  40041e:	9a00      	ldr	r2, [sp, #0]
  400420:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
{
	uint32_t ul_id = 0;

	ul_id = ov_id( p_twi );

	if (((ul_id >> 8)&0xff)  == OV7740_PIDH_DEFAULT) {
  400424:	f3c3 2307 	ubfx	r3, r3, #8, #8
  400428:	2b77      	cmp	r3, #119	; 0x77
  40042a:	d135      	bne.n	400498 <ov_init+0xbc>
 * \return 0 if the sensor is present, 1 otherwise.
 */
static uint32_t ov_manufacturer(Twi* const p_twi)
{
	twi_packet_t twi_packet;
	uint32_t ul_midh = 0;
  40042c:	2300      	movs	r3, #0
  40042e:	9301      	str	r3, [sp, #4]
	uint32_t ul_midl = 0;
  400430:	9302      	str	r3, [sp, #8]

	/* OV_MIDH */
	twi_packet.addr[0] = OV7740_MIDH;
  400432:	231c      	movs	r3, #28
  400434:	f88d 301c 	strb.w	r3, [sp, #28]
	twi_packet.addr_length = 1;
  400438:	9408      	str	r4, [sp, #32]
	twi_packet.chip = OV_I2C_SENSOR_ADDRESS;
  40043a:	f88d 602c 	strb.w	r6, [sp, #44]	; 0x2c
	twi_packet.buffer = &ul_midh;
  40043e:	ab01      	add	r3, sp, #4
  400440:	9309      	str	r3, [sp, #36]	; 0x24
	twi_packet.length = 1;
  400442:	940a      	str	r4, [sp, #40]	; 0x28

	ov_read_reg(p_twi, &twi_packet);
  400444:	4638      	mov	r0, r7
  400446:	a907      	add	r1, sp, #28
  400448:	47a8      	blx	r5

	/* OV_MIDL */
	twi_packet.addr[0] = OV7740_MIDL;
  40044a:	231d      	movs	r3, #29
  40044c:	f88d 301c 	strb.w	r3, [sp, #28]
	twi_packet.addr_length = 1;
  400450:	9408      	str	r4, [sp, #32]
	twi_packet.chip = OV_I2C_SENSOR_ADDRESS;
  400452:	f88d 602c 	strb.w	r6, [sp, #44]	; 0x2c
	twi_packet.buffer = &ul_midl;
  400456:	ab02      	add	r3, sp, #8
  400458:	9309      	str	r3, [sp, #36]	; 0x24
	twi_packet.length = 1;
  40045a:	940a      	str	r4, [sp, #40]	; 0x28

	ov_read_reg(p_twi, &twi_packet);
  40045c:	4638      	mov	r0, r7
  40045e:	a907      	add	r1, sp, #28
  400460:	47a8      	blx	r5

	if ((ul_midh == OV7740_MIDH_DEFAULT) && (ul_midl == OV7740_MIDL_DEFAULT)) {
  400462:	9b01      	ldr	r3, [sp, #4]
  400464:	2b7f      	cmp	r3, #127	; 0x7f
  400466:	d13e      	bne.n	4004e6 <ov_init+0x10a>
  400468:	9b02      	ldr	r3, [sp, #8]
  40046a:	2ba2      	cmp	r3, #162	; 0xa2
  40046c:	d13b      	bne.n	4004e6 <ov_init+0x10a>
  40046e:	e015      	b.n	40049c <ov_init+0xc0>
	if (ul_value != ul_entervalue) {
		return 1;
	}

	/* return old value */
	twi_packet.buffer = &ul_oldvalue;
  400470:	ab01      	add	r3, sp, #4
  400472:	9309      	str	r3, [sp, #36]	; 0x24
	ov_write_reg(p_twi, &twi_packet);
  400474:	4638      	mov	r0, r7
  400476:	a907      	add	r1, sp, #28
  400478:	4b1d      	ldr	r3, [pc, #116]	; (4004f0 <ov_init+0x114>)
  40047a:	4798      	blx	r3

	twi_packet.buffer = &ul_value;
  40047c:	f8cd d024 	str.w	sp, [sp, #36]	; 0x24
	ov_read_reg(p_twi, &twi_packet);
  400480:	4638      	mov	r0, r7
  400482:	a907      	add	r1, sp, #28
  400484:	4b19      	ldr	r3, [pc, #100]	; (4004ec <ov_init+0x110>)
  400486:	4798      	blx	r3

	if (ul_value != ul_oldvalue) {
  400488:	9801      	ldr	r0, [sp, #4]
  40048a:	9b00      	ldr	r3, [sp, #0]
  40048c:	1a18      	subs	r0, r3, r0
  40048e:	bf18      	it	ne
  400490:	2001      	movne	r0, #1
  400492:	e029      	b.n	4004e8 <ov_init+0x10c>

	twi_packet.buffer = &ul_value;
	ov_read_reg(p_twi, &twi_packet);

	if (ul_value != ul_entervalue) {
		return 1;
  400494:	2001      	movs	r0, #1
  400496:	e027      	b.n	4004e8 <ov_init+0x10c>
				return 0;
			}
		}
	}

	return 1;
  400498:	2001      	movs	r0, #1
  40049a:	e025      	b.n	4004e8 <ov_init+0x10c>
 * \return 0 on success, 1 otherwise.
 */
static uint32_t ov_test_write(Twi* const p_twi)
{
	twi_packet_t twi_packet;
	uint32_t ul_value = 0;
  40049c:	2300      	movs	r3, #0
  40049e:	9300      	str	r3, [sp, #0]
	uint32_t ul_oldvalue = 0;
  4004a0:	9301      	str	r3, [sp, #4]
	uint32_t ul_entervalue = 0;
  4004a2:	9302      	str	r3, [sp, #8]

	/* OV_BLUE_GAIN */
	twi_packet.addr[0] = 0x01;
  4004a4:	2301      	movs	r3, #1
  4004a6:	f88d 301c 	strb.w	r3, [sp, #28]
	twi_packet.addr_length = 1;
  4004aa:	9308      	str	r3, [sp, #32]
	twi_packet.chip = OV_I2C_SENSOR_ADDRESS;
  4004ac:	2221      	movs	r2, #33	; 0x21
  4004ae:	f88d 202c 	strb.w	r2, [sp, #44]	; 0x2c
	twi_packet.length = 1;
  4004b2:	930a      	str	r3, [sp, #40]	; 0x28

	twi_packet.buffer = &ul_oldvalue;
  4004b4:	ab01      	add	r3, sp, #4
  4004b6:	9309      	str	r3, [sp, #36]	; 0x24
	ov_read_reg(p_twi, &twi_packet);
  4004b8:	4638      	mov	r0, r7
  4004ba:	a907      	add	r1, sp, #28
  4004bc:	4c0b      	ldr	r4, [pc, #44]	; (4004ec <ov_init+0x110>)
  4004be:	47a0      	blx	r4

	ul_entervalue = 0xAD;
  4004c0:	ab0c      	add	r3, sp, #48	; 0x30
  4004c2:	22ad      	movs	r2, #173	; 0xad
  4004c4:	f843 2d28 	str.w	r2, [r3, #-40]!
	twi_packet.buffer = &ul_entervalue;
  4004c8:	9309      	str	r3, [sp, #36]	; 0x24
	ov_write_reg(p_twi, &twi_packet);
  4004ca:	4638      	mov	r0, r7
  4004cc:	a907      	add	r1, sp, #28
  4004ce:	4b08      	ldr	r3, [pc, #32]	; (4004f0 <ov_init+0x114>)
  4004d0:	4798      	blx	r3

	twi_packet.buffer = &ul_value;
  4004d2:	f8cd d024 	str.w	sp, [sp, #36]	; 0x24
	ov_read_reg(p_twi, &twi_packet);
  4004d6:	4638      	mov	r0, r7
  4004d8:	a907      	add	r1, sp, #28
  4004da:	47a0      	blx	r4

	if (ul_value != ul_entervalue) {
  4004dc:	9b02      	ldr	r3, [sp, #8]
  4004de:	9a00      	ldr	r2, [sp, #0]
  4004e0:	429a      	cmp	r2, r3
  4004e2:	d1d7      	bne.n	400494 <ov_init+0xb8>
  4004e4:	e7c4      	b.n	400470 <ov_init+0x94>
				return 0;
			}
		}
	}

	return 1;
  4004e6:	2001      	movs	r0, #1
}
  4004e8:	b00d      	add	sp, #52	; 0x34
  4004ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4004ec:	00400365 	.word	0x00400365
  4004f0:	00400371 	.word	0x00400371

004004f4 <ov_configure>:
 * \param p_twi TWI interface.
 * \param format Specific format to configure.
 * \return 0 on success, 1 otherwise.
 */
uint32_t ov_configure(Twi* const p_twi, const e_ov7740_format format)
{
  4004f4:	b508      	push	{r3, lr}
	const ov_reg *p_regs_conf = NULL;

	/* Common register initialization */
	switch (format) {
  4004f6:	2908      	cmp	r1, #8
  4004f8:	d814      	bhi.n	400524 <ov_configure+0x30>
  4004fa:	e8df f001 	tbb	[pc, r1]
  4004fe:	0515      	.short	0x0515
  400500:	0b090717 	.word	0x0b090717
  400504:	0f0d      	.short	0x0f0d
  400506:	11          	.byte	0x11
  400507:	00          	.byte	0x00
	case QVGA_YUV422_10FPS:
		p_regs_conf = OV7740_QVGA_YUV422_10FPS;
		break;

	case QVGA_YUV422_15FPS:
		p_regs_conf = OV7740_QVGA_YUV422_15FPS;
  400508:	490b      	ldr	r1, [pc, #44]	; (400538 <ov_configure+0x44>)
  40050a:	e010      	b.n	40052e <ov_configure+0x3a>
	case QVGA_YUV422_20FPS:
		p_regs_conf = OV7740_QVGA_YUV422_20FPS;
		break;

	case QVGA_YUV422_30FPS:
		p_regs_conf = OV7740_QVGA_YUV422_30FPS;
  40050c:	490b      	ldr	r1, [pc, #44]	; (40053c <ov_configure+0x48>)
		break;
  40050e:	e00e      	b.n	40052e <ov_configure+0x3a>

	case QVGA_RGB888:
		p_regs_conf = OV7740_QVGA_RGB888;
  400510:	490b      	ldr	r1, [pc, #44]	; (400540 <ov_configure+0x4c>)
		break;
  400512:	e00c      	b.n	40052e <ov_configure+0x3a>

	case QQVGA_YUV422:
		p_regs_conf = OV7740_QQVGA_YUV422;
  400514:	490b      	ldr	r1, [pc, #44]	; (400544 <ov_configure+0x50>)
		break;
  400516:	e00a      	b.n	40052e <ov_configure+0x3a>

	case QQVGA_RGB888:
		p_regs_conf = OV7740_QQVGA_RGB888;
  400518:	490b      	ldr	r1, [pc, #44]	; (400548 <ov_configure+0x54>)
		break;
  40051a:	e008      	b.n	40052e <ov_configure+0x3a>

	case TEST_PATTERN:
		p_regs_conf = OV7740_TEST_PATTERN;
  40051c:	490b      	ldr	r1, [pc, #44]	; (40054c <ov_configure+0x58>)
		break;
  40051e:	e006      	b.n	40052e <ov_configure+0x3a>

	case VGA_YUV422_20FPS:
		p_regs_conf = OV7740_VGA_YUV422_20FPS;
  400520:	490b      	ldr	r1, [pc, #44]	; (400550 <ov_configure+0x5c>)
		break;
  400522:	e004      	b.n	40052e <ov_configure+0x3a>
	if (p_regs_conf != NULL) {
		ov_write_regs( p_twi, p_regs_conf );
		return 0;
	}

	return 1;
  400524:	2001      	movs	r0, #1
  400526:	bd08      	pop	{r3, pc}
	const ov_reg *p_regs_conf = NULL;

	/* Common register initialization */
	switch (format) {
	case QVGA_YUV422_10FPS:
		p_regs_conf = OV7740_QVGA_YUV422_10FPS;
  400528:	490a      	ldr	r1, [pc, #40]	; (400554 <ov_configure+0x60>)
  40052a:	e000      	b.n	40052e <ov_configure+0x3a>
	case QVGA_YUV422_15FPS:
		p_regs_conf = OV7740_QVGA_YUV422_15FPS;
		break;

	case QVGA_YUV422_20FPS:
		p_regs_conf = OV7740_QVGA_YUV422_20FPS;
  40052c:	490a      	ldr	r1, [pc, #40]	; (400558 <ov_configure+0x64>)
	default:
		break;
	}

	if (p_regs_conf != NULL) {
		ov_write_regs( p_twi, p_regs_conf );
  40052e:	4b0b      	ldr	r3, [pc, #44]	; (40055c <ov_configure+0x68>)
  400530:	4798      	blx	r3
		return 0;
  400532:	2000      	movs	r0, #0
	}

	return 1;
}
  400534:	bd08      	pop	{r3, pc}
  400536:	bf00      	nop
  400538:	004023ac 	.word	0x004023ac
  40053c:	00402958 	.word	0x00402958
  400540:	0040249c 	.word	0x0040249c
  400544:	00402864 	.word	0x00402864
  400548:	004022b8 	.word	0x004022b8
  40054c:	00402590 	.word	0x00402590
  400550:	004021c8 	.word	0x004021c8
  400554:	00402774 	.word	0x00402774
  400558:	00402684 	.word	0x00402684
  40055c:	0040037d 	.word	0x0040037d

00400560 <aat31xx_set_backlight>:
 * \param ul_level backlight level.
 *
 * \note pin BOARD_AAT31XX_SET_GPIO must be configured before calling aat31xx_set_backlight.
 */
void aat31xx_set_backlight(uint32_t ul_level)
{
  400560:	b470      	push	{r4, r5, r6}
  400562:	b083      	sub	sp, #12
	volatile uint32_t ul_delay;
	uint32_t i;

#ifdef CONF_BOARD_AAT3155
	ul_level = AAT31XX_MAX_BACKLIGHT_LEVEL - ul_level + 1;
  400564:	f1c0 0011 	rsb	r0, r0, #17
#ifdef CONF_BOARD_AAT3193
	ul_level = AAT31XX_MAX_BACKLIGHT_LEVEL - ul_level + 1;
#endif

	/* Ensure valid level */
	ul_level = (ul_level > AAT31XX_MAX_BACKLIGHT_LEVEL) ? AAT31XX_MAX_BACKLIGHT_LEVEL : ul_level;
  400568:	2810      	cmp	r0, #16
  40056a:	bf28      	it	cs
  40056c:	2010      	movcs	r0, #16
	ul_level = (ul_level < AAT31XX_MIN_BACKLIGHT_LEVEL) ? AAT31XX_MIN_BACKLIGHT_LEVEL : ul_level;
  40056e:	2800      	cmp	r0, #0
  400570:	bf08      	it	eq
  400572:	2001      	moveq	r0, #1
 * \param ul_level backlight level.
 *
 * \note pin BOARD_AAT31XX_SET_GPIO must be configured before calling aat31xx_set_backlight.
 */
void aat31xx_set_backlight(uint32_t ul_level)
{
  400574:	2100      	movs	r1, #0
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  400576:	4e10      	ldr	r6, [pc, #64]	; (4005b8 <aat31xx_set_backlight+0x58>)
  400578:	f44f 5500 	mov.w	r5, #8192	; 0x2000
	ul_level = (ul_level < AAT31XX_MIN_BACKLIGHT_LEVEL) ? AAT31XX_MIN_BACKLIGHT_LEVEL : ul_level;

	/* Set new backlight level */
	for (i = 0; i < ul_level; i++) {
		ioport_set_pin_level(BOARD_AAT31XX_SET_GPIO, IOPORT_PIN_LEVEL_LOW);
		ul_delay = DELAY_PULSE;
  40057c:	2418      	movs	r4, #24
  40057e:	6375      	str	r5, [r6, #52]	; 0x34
  400580:	9401      	str	r4, [sp, #4]
		while (ul_delay--) {
  400582:	9b01      	ldr	r3, [sp, #4]
  400584:	1e5a      	subs	r2, r3, #1
  400586:	9201      	str	r2, [sp, #4]
  400588:	2b00      	cmp	r3, #0
  40058a:	d1fa      	bne.n	400582 <aat31xx_set_backlight+0x22>
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  40058c:	6335      	str	r5, [r6, #48]	; 0x30
		}

		ioport_set_pin_level(BOARD_AAT31XX_SET_GPIO, IOPORT_PIN_LEVEL_HIGH);

		ul_delay = DELAY_PULSE;
  40058e:	9401      	str	r4, [sp, #4]
		while (ul_delay--) {
  400590:	9b01      	ldr	r3, [sp, #4]
  400592:	1e5a      	subs	r2, r3, #1
  400594:	9201      	str	r2, [sp, #4]
  400596:	2b00      	cmp	r3, #0
  400598:	d1fa      	bne.n	400590 <aat31xx_set_backlight+0x30>
	/* Ensure valid level */
	ul_level = (ul_level > AAT31XX_MAX_BACKLIGHT_LEVEL) ? AAT31XX_MAX_BACKLIGHT_LEVEL : ul_level;
	ul_level = (ul_level < AAT31XX_MIN_BACKLIGHT_LEVEL) ? AAT31XX_MIN_BACKLIGHT_LEVEL : ul_level;

	/* Set new backlight level */
	for (i = 0; i < ul_level; i++) {
  40059a:	3101      	adds	r1, #1
  40059c:	4281      	cmp	r1, r0
  40059e:	d3ee      	bcc.n	40057e <aat31xx_set_backlight+0x1e>
		ul_delay = DELAY_PULSE;
		while (ul_delay--) {
		}
	}

	ul_delay = DELAY_ENABLE;
  4005a0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
  4005a4:	9301      	str	r3, [sp, #4]
	while (ul_delay--) {
  4005a6:	9b01      	ldr	r3, [sp, #4]
  4005a8:	1e5a      	subs	r2, r3, #1
  4005aa:	9201      	str	r2, [sp, #4]
  4005ac:	2b00      	cmp	r3, #0
  4005ae:	d1fa      	bne.n	4005a6 <aat31xx_set_backlight+0x46>
	}
}
  4005b0:	b003      	add	sp, #12
  4005b2:	bc70      	pop	{r4, r5, r6}
  4005b4:	4770      	bx	lr
  4005b6:	bf00      	nop
  4005b8:	400e1200 	.word	0x400e1200

004005bc <aat31xx_disable_backlight>:

/**
 * \brief Switch off backlight.
 */
void aat31xx_disable_backlight(void)
{
  4005bc:	b082      	sub	sp, #8
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  4005be:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  4005c2:	4b06      	ldr	r3, [pc, #24]	; (4005dc <aat31xx_disable_backlight+0x20>)
  4005c4:	635a      	str	r2, [r3, #52]	; 0x34
	volatile uint32_t ul_delay;

	ioport_set_pin_level(BOARD_AAT31XX_SET_GPIO, IOPORT_PIN_LEVEL_LOW);

	ul_delay = DELAY_DISABLE;
  4005c6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
  4005ca:	9301      	str	r3, [sp, #4]
	while (ul_delay--) {
  4005cc:	9b01      	ldr	r3, [sp, #4]
  4005ce:	1e5a      	subs	r2, r3, #1
  4005d0:	9201      	str	r2, [sp, #4]
  4005d2:	2b00      	cmp	r3, #0
  4005d4:	d1fa      	bne.n	4005cc <aat31xx_disable_backlight+0x10>
	}
}
  4005d6:	b002      	add	sp, #8
  4005d8:	4770      	bx	lr
  4005da:	bf00      	nop
  4005dc:	400e1200 	.word	0x400e1200

004005e0 <ili9325_write_ram>:
 *
 * \param ul_color 24-bits RGB color.
 */
static void ili9325_write_ram(ili9325_color_t ul_color)
{
	LCD_WD((ul_color >> 16) & 0xFF);
  4005e0:	f3c0 4207 	ubfx	r2, r0, #16, #8
	{
		*((volatile uint8_t *)(BOARD_ILI9325_ADDR)) = lcd_index; /* ILI9325 index register address */
	}
	static inline void LCD_WD(uint8_t lcd_data)
	{
		*((volatile uint8_t *)((BOARD_ILI9325_ADDR) | (BOARD_ILI9325_RS))) = lcd_data;
  4005e4:	4b03      	ldr	r3, [pc, #12]	; (4005f4 <ili9325_write_ram+0x14>)
  4005e6:	701a      	strb	r2, [r3, #0]
	LCD_WD((ul_color >> 8) & 0xFF);
  4005e8:	f3c0 2207 	ubfx	r2, r0, #8, #8
  4005ec:	701a      	strb	r2, [r3, #0]
	LCD_WD(ul_color & 0xFF);
  4005ee:	b2c0      	uxtb	r0, r0
  4005f0:	7018      	strb	r0, [r3, #0]
  4005f2:	4770      	bx	lr
  4005f4:	62000002 	.word	0x62000002

004005f8 <ili9325_write_register>:

/* Define EBI access for ILI9325 8-bit System Interface.*/
#if defined(BOARD_ILI9325_ADDR) && defined (BOARD_ILI9325_RS)
	static inline void LCD_IR(uint8_t lcd_index)
	{
		*((volatile uint8_t *)(BOARD_ILI9325_ADDR)) = lcd_index; /* ILI9325 index register address */
  4005f8:	f04f 43c4 	mov.w	r3, #1644167168	; 0x62000000
  4005fc:	2200      	movs	r2, #0
  4005fe:	701a      	strb	r2, [r3, #0]
  400600:	7018      	strb	r0, [r3, #0]
 */
static void ili9325_write_register(uint8_t uc_reg, uint16_t us_data)
{
	LCD_IR(0);
	LCD_IR(uc_reg);
	LCD_WD((us_data >> 8) & 0xFF);
  400602:	0a0a      	lsrs	r2, r1, #8
	}
	static inline void LCD_WD(uint8_t lcd_data)
	{
		*((volatile uint8_t *)((BOARD_ILI9325_ADDR) | (BOARD_ILI9325_RS))) = lcd_data;
  400604:	3302      	adds	r3, #2
  400606:	701a      	strb	r2, [r3, #0]
	LCD_WD(us_data & 0xFF);
  400608:	b2c9      	uxtb	r1, r1
  40060a:	7019      	strb	r1, [r3, #0]
  40060c:	4770      	bx	lr
  40060e:	bf00      	nop

00400610 <ili9325_delay>:

/**
 * \brief Delay function.
 */
static void ili9325_delay(uint32_t ul_ms)
{
  400610:	b082      	sub	sp, #8
	volatile uint32_t i;

	for(i = 0; i < ul_ms; i++) {
  400612:	2300      	movs	r3, #0
  400614:	9301      	str	r3, [sp, #4]
  400616:	9b01      	ldr	r3, [sp, #4]
  400618:	4298      	cmp	r0, r3
  40061a:	d911      	bls.n	400640 <ili9325_delay+0x30>
		for(i = 0; i < 100000; i++) {
  40061c:	2100      	movs	r1, #0
  40061e:	4a09      	ldr	r2, [pc, #36]	; (400644 <ili9325_delay+0x34>)
  400620:	9101      	str	r1, [sp, #4]
  400622:	9b01      	ldr	r3, [sp, #4]
  400624:	4293      	cmp	r3, r2
  400626:	d805      	bhi.n	400634 <ili9325_delay+0x24>
  400628:	9b01      	ldr	r3, [sp, #4]
  40062a:	3301      	adds	r3, #1
  40062c:	9301      	str	r3, [sp, #4]
  40062e:	9b01      	ldr	r3, [sp, #4]
  400630:	4293      	cmp	r3, r2
  400632:	d9f9      	bls.n	400628 <ili9325_delay+0x18>
 */
static void ili9325_delay(uint32_t ul_ms)
{
	volatile uint32_t i;

	for(i = 0; i < ul_ms; i++) {
  400634:	9b01      	ldr	r3, [sp, #4]
  400636:	3301      	adds	r3, #1
  400638:	9301      	str	r3, [sp, #4]
  40063a:	9b01      	ldr	r3, [sp, #4]
  40063c:	4283      	cmp	r3, r0
  40063e:	d3ef      	bcc.n	400620 <ili9325_delay+0x10>
		for(i = 0; i < 100000; i++) {
		}
	}
}
  400640:	b002      	add	sp, #8
  400642:	4770      	bx	lr
  400644:	0001869f 	.word	0x0001869f

00400648 <ili9325_display_on>:

/**
 * \brief Turn on the LCD.
 */
void ili9325_display_on(void)
{
  400648:	b508      	push	{r3, lr}
	ili9325_write_register(ILI9325_DISP_CTRL1,
  40064a:	2007      	movs	r0, #7
  40064c:	f240 1133 	movw	r1, #307	; 0x133
  400650:	4b01      	ldr	r3, [pc, #4]	; (400658 <ili9325_display_on+0x10>)
  400652:	4798      	blx	r3
  400654:	bd08      	pop	{r3, pc}
  400656:	bf00      	nop
  400658:	004005f9 	.word	0x004005f9

0040065c <ili9325_set_foreground_color>:
 * \brief Set foreground color.
 *
 * \param ul_color foreground color.
 */
void ili9325_set_foreground_color(ili9325_color_t ul_color)
{
  40065c:	4a04      	ldr	r2, [pc, #16]	; (400670 <ili9325_set_foreground_color+0x14>)
  40065e:	1f13      	subs	r3, r2, #4
  400660:	f502 726f 	add.w	r2, r2, #956	; 0x3bc
	uint32_t i;

	/* Fill the cache with selected color */
	for (i = 0; i < LCD_DATA_CACHE_SIZE; ++i) {
		g_ul_pixel_cache[i] = ul_color;
  400664:	f843 0f04 	str.w	r0, [r3, #4]!
void ili9325_set_foreground_color(ili9325_color_t ul_color)
{
	uint32_t i;

	/* Fill the cache with selected color */
	for (i = 0; i < LCD_DATA_CACHE_SIZE; ++i) {
  400668:	4293      	cmp	r3, r2
  40066a:	d1fb      	bne.n	400664 <ili9325_set_foreground_color+0x8>
		g_ul_pixel_cache[i] = ul_color;
	}
}
  40066c:	4770      	bx	lr
  40066e:	bf00      	nop
  400670:	20000870 	.word	0x20000870

00400674 <ili9325_set_window>:
 * \param ul_width The width of the window.
 * \param ul_height The height of the window.
 */
void ili9325_set_window(uint32_t ul_x, uint32_t ul_y, uint32_t ul_width,
		uint32_t ul_height)
{
  400674:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  400678:	460f      	mov	r7, r1
  40067a:	4615      	mov	r5, r2
  40067c:	461c      	mov	r4, r3
	Assert(ul_y <= 0x13f);
	Assert(ul_width <= (0xF0 - ul_x));
	Assert(ul_height <= (0x140 - ul_y));

	/* Set Horizontal Address Start Position */
	ili9325_write_register(ILI9325_HORIZONTAL_ADDR_START, (uint16_t)ul_x);
  40067e:	fa1f f880 	uxth.w	r8, r0
  400682:	2050      	movs	r0, #80	; 0x50
  400684:	4641      	mov	r1, r8
  400686:	4e09      	ldr	r6, [pc, #36]	; (4006ac <ili9325_set_window+0x38>)
  400688:	47b0      	blx	r6
  40068a:	1e69      	subs	r1, r5, #1

	/* Set Horizontal Address End Position */
	ili9325_write_register(ILI9325_HORIZONTAL_ADDR_END, (uint16_t)(ul_x + ul_width - 1));
  40068c:	4441      	add	r1, r8
  40068e:	2051      	movs	r0, #81	; 0x51
  400690:	b289      	uxth	r1, r1
  400692:	47b0      	blx	r6

	/* Set Vertical Address Start Position */
	ili9325_write_register(ILI9325_VERTICAL_ADDR_START, (uint16_t)ul_y);
  400694:	b2bd      	uxth	r5, r7
  400696:	2052      	movs	r0, #82	; 0x52
  400698:	4629      	mov	r1, r5
  40069a:	47b0      	blx	r6
  40069c:	1e61      	subs	r1, r4, #1

	/* Set Vertical Address End Position */
	ili9325_write_register(ILI9325_VERTICAL_ADDR_END, (uint16_t)(ul_y + ul_height - 1));
  40069e:	4429      	add	r1, r5
  4006a0:	2053      	movs	r0, #83	; 0x53
  4006a2:	b289      	uxth	r1, r1
  4006a4:	47b0      	blx	r6
  4006a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4006aa:	bf00      	nop
  4006ac:	004005f9 	.word	0x004005f9

004006b0 <ili9325_set_cursor_position>:
 *
 * \param us_x X coordinate of upper-left corner on LCD.
 * \param us_y Y coordinate of upper-left corner on LCD.
 */
void ili9325_set_cursor_position(uint16_t us_x, uint16_t us_y)
{
  4006b0:	b538      	push	{r3, r4, r5, lr}
  4006b2:	4603      	mov	r3, r0
  4006b4:	460d      	mov	r5, r1
	/* GRAM Horizontal/Vertical Address Set (R20h, R21h) */
	ili9325_write_register(ILI9325_HORIZONTAL_GRAM_ADDR_SET, us_x); /* column */
  4006b6:	2020      	movs	r0, #32
  4006b8:	4619      	mov	r1, r3
  4006ba:	4c03      	ldr	r4, [pc, #12]	; (4006c8 <ili9325_set_cursor_position+0x18>)
  4006bc:	47a0      	blx	r4
	ili9325_write_register(ILI9325_VERTICAL_GRAM_ADDR_SET, us_y); /* row */
  4006be:	2021      	movs	r0, #33	; 0x21
  4006c0:	4629      	mov	r1, r5
  4006c2:	47a0      	blx	r4
  4006c4:	bd38      	pop	{r3, r4, r5, pc}
  4006c6:	bf00      	nop
  4006c8:	004005f9 	.word	0x004005f9

004006cc <ili9325_init>:

/* Define EBI access for ILI9325 8-bit System Interface.*/
#if defined(BOARD_ILI9325_ADDR) && defined (BOARD_ILI9325_RS)
	static inline void LCD_IR(uint8_t lcd_index)
	{
		*((volatile uint8_t *)(BOARD_ILI9325_ADDR)) = lcd_index; /* ILI9325 index register address */
  4006cc:	f04f 43c4 	mov.w	r3, #1644167168	; 0x62000000
  4006d0:	2200      	movs	r2, #0
  4006d2:	701a      	strb	r2, [r3, #0]
  4006d4:	701a      	strb	r2, [r3, #0]
	{
		*((volatile uint8_t *)((BOARD_ILI9325_ADDR) | (BOARD_ILI9325_RS))) = lcd_data;
	}
	static inline uint8_t LCD_RD(void)
	{
		return *((volatile uint8_t *)((BOARD_ILI9325_ADDR) | (BOARD_ILI9325_RS)));
  4006d6:	4a5f      	ldr	r2, [pc, #380]	; (400854 <ili9325_init+0x188>)
  4006d8:	7811      	ldrb	r1, [r2, #0]
  4006da:	7813      	ldrb	r3, [r2, #0]
static uint16_t ili9325_lcd_get_16(void)
{
	uint16_t us_value;

	us_value = LCD_RD();
	us_value = (us_value << 8) | LCD_RD();
  4006dc:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
uint32_t ili9325_init(struct ili9325_opt_t *p_opt)
{
	/* Check ILI9325 chipid */
	uint16_t chipid = ili9325_read_register(ILI9325_DEVICE_CODE_REG); /* Driver Code Read (R00h) */

	if (chipid != ILI9325_DEVICE_CODE) {
  4006e0:	b21b      	sxth	r3, r3
  4006e2:	4a5d      	ldr	r2, [pc, #372]	; (400858 <ili9325_init+0x18c>)
  4006e4:	4293      	cmp	r3, r2
  4006e6:	f040 80b3 	bne.w	400850 <ili9325_init+0x184>
 * \param p_opt pointer to ILI9325 option structure.
 *
 * \return 0 if initialization succeeds, otherwise fails.
 */
uint32_t ili9325_init(struct ili9325_opt_t *p_opt)
{
  4006ea:	b570      	push	{r4, r5, r6, lr}
  4006ec:	4605      	mov	r5, r0
	if (chipid != ILI9325_DEVICE_CODE) {
		return 1;
	}

	/* Turn off LCD */
	ili9325_write_register(ILI9325_DISP_CTRL1, ILI9325_DISP_CTRL1_GON |
  4006ee:	2007      	movs	r0, #7
  4006f0:	2133      	movs	r1, #51	; 0x33
  4006f2:	4c5a      	ldr	r4, [pc, #360]	; (40085c <ili9325_init+0x190>)
  4006f4:	47a0      	blx	r4
			ILI9325_DISP_CTRL1_DTE | ILI9325_DISP_CTRL1_D(0x03));

	/* Start initial sequence */
	/* Disable sleep and standby mode*/
	ili9325_write_register(ILI9325_POWER_CTRL1, 0x0000);
  4006f6:	2010      	movs	r0, #16
  4006f8:	2100      	movs	r1, #0
  4006fa:	47a0      	blx	r4
	/* Start internal OSC */
	ili9325_write_register(ILI9325_START_OSC_CTRL, ILI9325_START_OSC_CTRL_EN);
  4006fc:	2000      	movs	r0, #0
  4006fe:	2101      	movs	r1, #1
  400700:	47a0      	blx	r4
	/* Set SS bit and direction output from S720 to S1 */
	ili9325_write_register(ILI9325_DRIVER_OUTPUT_CTRL1, ILI9325_DRIVER_OUTPUT_CTRL1_SS);
  400702:	2001      	movs	r0, #1
  400704:	f44f 7180 	mov.w	r1, #256	; 0x100
  400708:	47a0      	blx	r4
	/* Set 1 line inversion */
	ili9325_write_register(ILI9325_LCD_DRIVING_CTRL, ILI9325_LCD_DRIVING_CTRL_BIT10 |
  40070a:	2002      	movs	r0, #2
  40070c:	f44f 61e0 	mov.w	r1, #1792	; 0x700
  400710:	47a0      	blx	r4
			ILI9325_LCD_DRIVING_CTRL_EOR | ILI9325_LCD_DRIVING_CTRL_BC0);
	/* Disable resizing feature */
	ili9325_write_register(ILI9325_RESIZE_CTRL, 0x0000);
  400712:	2004      	movs	r0, #4
  400714:	2100      	movs	r1, #0
  400716:	47a0      	blx	r4
	/* Set the back porch and front porch */
	ili9325_write_register(ILI9325_DISP_CTRL2, ILI9325_DISP_CTRL2_BP(0x07) |
  400718:	2008      	movs	r0, #8
  40071a:	f240 2107 	movw	r1, #519	; 0x207
  40071e:	47a0      	blx	r4
			ILI9325_DISP_CTRL2_FP(0x02));
	/* Set non-display area refresh cycle ISC[3:0] */
	ili9325_write_register(ILI9325_DISP_CTRL3, 0x0000);
  400720:	2009      	movs	r0, #9
  400722:	2100      	movs	r1, #0
  400724:	47a0      	blx	r4
	/* Disable FMARK function */
	ili9325_write_register(ILI9325_DISP_CTRL4, 0x0000);
  400726:	200a      	movs	r0, #10
  400728:	2100      	movs	r1, #0
  40072a:	47a0      	blx	r4
	/* 18-bit RGB interface and writing display data by the system interface */
	ili9325_write_register(ILI9325_RGB_DISP_INTERFACE_CTRL1, 0x0000);
  40072c:	200c      	movs	r0, #12
  40072e:	2100      	movs	r1, #0
  400730:	47a0      	blx	r4
	/* Set the output position of frame cycle */
	ili9325_write_register(ILI9325_FRAME_MAKER_POS, 0x0000);
  400732:	200d      	movs	r0, #13
  400734:	2100      	movs	r1, #0
  400736:	47a0      	blx	r4
	/* RGB interface polarity */
	ili9325_write_register(ILI9325_RGB_DISP_INTERFACE_CTRL2, 0x0000);
  400738:	200f      	movs	r0, #15
  40073a:	2100      	movs	r1, #0
  40073c:	47a0      	blx	r4

	/* Power on sequence */
	/* Disable sleep and standby mode */
	ili9325_write_register(ILI9325_POWER_CTRL1, 0x0000);
  40073e:	2010      	movs	r0, #16
  400740:	2100      	movs	r1, #0
  400742:	47a0      	blx	r4
	/* Selects the operating frequency of the step-up circuit 1,2 and Sets the ratio factor of Vci */
	ili9325_write_register(ILI9325_POWER_CTRL2, 0x0000);
  400744:	2011      	movs	r0, #17
  400746:	2100      	movs	r1, #0
  400748:	47a0      	blx	r4
	/* Set VREG1OUT voltage */
	ili9325_write_register(ILI9325_POWER_CTRL3, 0x0000);
  40074a:	2012      	movs	r0, #18
  40074c:	2100      	movs	r1, #0
  40074e:	47a0      	blx	r4
	/* Set VCOM amplitude */
	ili9325_write_register(ILI9325_POWER_CTRL4, 0x0000);
  400750:	2013      	movs	r0, #19
  400752:	2100      	movs	r1, #0
  400754:	47a0      	blx	r4
	ili9325_delay(200);
  400756:	20c8      	movs	r0, #200	; 0xc8
  400758:	4e41      	ldr	r6, [pc, #260]	; (400860 <ili9325_init+0x194>)
  40075a:	47b0      	blx	r6

	/* Enable power supply and source driver */
	/* Adjusts the constant current and Sets the factor used in the step-up circuits.*/
	ili9325_write_register(ILI9325_POWER_CTRL1, ILI9325_POWER_CTRL1_SAP |
  40075c:	2010      	movs	r0, #16
  40075e:	f241 2190 	movw	r1, #4752	; 0x1290
  400762:	47a0      	blx	r4
			ILI9325_POWER_CTRL1_BT(0x02) | ILI9325_POWER_CTRL1_APE | ILI9325_POWER_CTRL1_AP(0x01));
	/* Select the operating frequency of the step-up circuit 1,2 and Sets the ratio factor of Vci */
	ili9325_write_register(ILI9325_POWER_CTRL2, ILI9325_POWER_CTRL2_DC1(0x02) |
  400764:	2011      	movs	r0, #17
  400766:	f240 2127 	movw	r1, #551	; 0x227
  40076a:	47a0      	blx	r4
			ILI9325_POWER_CTRL2_DC0(0x02) | ILI9325_POWER_CTRL2_VC(0x07));
	ili9325_delay(50);
  40076c:	2032      	movs	r0, #50	; 0x32
  40076e:	47b0      	blx	r6
	/* Internal reference voltage= Vci */
	ili9325_write_register(ILI9325_POWER_CTRL3, ILI9325_POWER_CTRL3_PON |
  400770:	2012      	movs	r0, #18
  400772:	211b      	movs	r1, #27
  400774:	47a0      	blx	r4
			ILI9325_POWER_CTRL3_VRH(0x0B));
	ili9325_delay(50);
  400776:	2032      	movs	r0, #50	; 0x32
  400778:	47b0      	blx	r6
	/* Set VDV[4:0] for VCOM amplitude */
	ili9325_write_register(ILI9325_POWER_CTRL4, ILI9325_POWER_CTRL4_VDV(0x11));
  40077a:	2013      	movs	r0, #19
  40077c:	f44f 5188 	mov.w	r1, #4352	; 0x1100
  400780:	47a0      	blx	r4
	/* Set VCM[5:0] for VCOMH */
	ili9325_write_register(ILI9325_POWER_CTRL7, ILI9325_POWER_CTRL7_VCM(0x19));
  400782:	2029      	movs	r0, #41	; 0x29
  400784:	2119      	movs	r1, #25
  400786:	47a0      	blx	r4
	/* Set Frame Rate */
	ili9325_write_register(ILI9325_FRAME_RATE_AND_COLOR_CTRL,
  400788:	202b      	movs	r0, #43	; 0x2b
  40078a:	210d      	movs	r1, #13
  40078c:	47a0      	blx	r4
			ILI9325_FRAME_RATE_AND_COLOR_CTRL_FRS(0x0D));
	ili9325_delay(50);
  40078e:	2032      	movs	r0, #50	; 0x32
  400790:	47b0      	blx	r6

	/* Adjust the Gamma Curve */
	ili9325_write_register(ILI9325_GAMMA_CTRL1, 0x0000);
  400792:	2030      	movs	r0, #48	; 0x30
  400794:	2100      	movs	r1, #0
  400796:	47a0      	blx	r4
	ili9325_write_register(ILI9325_GAMMA_CTRL2, ILI9325_GAMMA_CTRL2_KP3(0x02) |
  400798:	2031      	movs	r0, #49	; 0x31
  40079a:	f44f 7101 	mov.w	r1, #516	; 0x204
  40079e:	47a0      	blx	r4
			ILI9325_GAMMA_CTRL2_KP2(0x04));
	ili9325_write_register(ILI9325_GAMMA_CTRL3, ILI9325_GAMMA_CTRL3_KP5(0x02) |
  4007a0:	2032      	movs	r0, #50	; 0x32
  4007a2:	f44f 7100 	mov.w	r1, #512	; 0x200
  4007a6:	47a0      	blx	r4
			ILI9325_GAMMA_CTRL3_KP4(0x00));
	ili9325_write_register(ILI9325_GAMMA_CTRL4, ILI9325_GAMMA_CTRL4_RP1(0x00) |
  4007a8:	2035      	movs	r0, #53	; 0x35
  4007aa:	2107      	movs	r1, #7
  4007ac:	47a0      	blx	r4
			ILI9325_GAMMA_CTRL4_RP0(0x07));
	ili9325_write_register(ILI9325_GAMMA_CTRL5, ILI9325_GAMMA_CTRL5_VRP1(0x14) |
  4007ae:	2036      	movs	r0, #54	; 0x36
  4007b0:	f241 4104 	movw	r1, #5124	; 0x1404
  4007b4:	47a0      	blx	r4
			ILI9325_GAMMA_CTRL5_VRP0(0x04));
	ili9325_write_register(ILI9325_GAMMA_CTRL6, ILI9325_GAMMA_CTRL6_KN1(0x07) |
  4007b6:	2037      	movs	r0, #55	; 0x37
  4007b8:	f240 7105 	movw	r1, #1797	; 0x705
  4007bc:	47a0      	blx	r4
			ILI9325_GAMMA_CTRL6_KN0(0x05));
	ili9325_write_register(ILI9325_GAMMA_CTRL7, ILI9325_GAMMA_CTRL7_KN3(0x03) |
  4007be:	2038      	movs	r0, #56	; 0x38
  4007c0:	f240 3105 	movw	r1, #773	; 0x305
  4007c4:	47a0      	blx	r4
			ILI9325_GAMMA_CTRL7_KN2(0x05));
	ili9325_write_register(ILI9325_GAMMA_CTRL8, ILI9325_GAMMA_CTRL8_KN5(0x07) |
  4007c6:	2039      	movs	r0, #57	; 0x39
  4007c8:	f240 7107 	movw	r1, #1799	; 0x707
  4007cc:	47a0      	blx	r4
			ILI9325_GAMMA_CTRL8_KN4(0x07));
	ili9325_write_register(ILI9325_GAMMA_CTRL9, ILI9325_GAMMA_CTRL9_RN1(0x07) |
  4007ce:	203c      	movs	r0, #60	; 0x3c
  4007d0:	f240 7101 	movw	r1, #1793	; 0x701
  4007d4:	47a0      	blx	r4
			ILI9325_GAMMA_CTRL9_RN0(0x01));
	ili9325_write_register(ILI9325_GAMMA_CTRL10, ILI9325_GAMMA_CTRL10_VRN1(0x00) |
  4007d6:	203d      	movs	r0, #61	; 0x3d
  4007d8:	210e      	movs	r1, #14
  4007da:	47a0      	blx	r4
			ILI9325_GAMMA_CTRL10_VRN0(0x0E));
	/* Use the high speed write mode (HWM=1) */
	/* When TRI = 1, data are transferred to the internal RAM in 8-bit x 3 transfers mode via the 8-bit interface. */
	/* DFM Set the mode of transferring data to the internal RAM when TRI = 1. */
	/* I/D[1:0] = 11 Horizontal : increment Vertical : increment, AM=0:Horizontal */
	ili9325_write_register(ILI9325_ENTRY_MODE, ILI9325_ENTRY_MODE_TRI |
  4007dc:	2003      	movs	r0, #3
  4007de:	f24d 0110 	movw	r1, #53264	; 0xd010
  4007e2:	47a0      	blx	r4
			ILI9325_ENTRY_MODE_DFM | ILI9325_ENTRY_MODE_ID(0x01) |ILI9325_ENTRY_MODE_BGR);
	/* Sets the number of lines to drive the LCD at an interval of 8 lines. */
	/* The scan direction is from G320 to G1 */
	ili9325_write_register(ILI9325_DRIVER_OUTPUT_CTRL2, ILI9325_DRIVER_OUTPUT_CTRL2_GS |
  4007e4:	2060      	movs	r0, #96	; 0x60
  4007e6:	f44f 4127 	mov.w	r1, #42752	; 0xa700
  4007ea:	47a0      	blx	r4
			ILI9325_DRIVER_OUTPUT_CTRL2_NL(0x27));

	/* Vertical Scrolling */
	/* Disable scrolling and enable the grayscale inversion */
	ili9325_write_register(ILI9325_BASE_IMG_DISP_CTRL, ILI9325_BASE_IMG_DISP_CTRL_REV);
  4007ec:	2061      	movs	r0, #97	; 0x61
  4007ee:	2101      	movs	r1, #1
  4007f0:	47a0      	blx	r4
	ili9325_write_register(ILI9325_VERTICAL_SCROLL_CTRL, 0x0000);
  4007f2:	206a      	movs	r0, #106	; 0x6a
  4007f4:	2100      	movs	r1, #0
  4007f6:	47a0      	blx	r4

	/* Disable Partial Display */
	ili9325_write_register(ILI9325_PARTIAL_IMG1_DISP_POS, 0x0000);
  4007f8:	2080      	movs	r0, #128	; 0x80
  4007fa:	2100      	movs	r1, #0
  4007fc:	47a0      	blx	r4
	ili9325_write_register(ILI9325_PARTIAL_IMG1_AREA_START_LINE, 0x0000);
  4007fe:	2081      	movs	r0, #129	; 0x81
  400800:	2100      	movs	r1, #0
  400802:	47a0      	blx	r4
	ili9325_write_register(ILI9325_PARTIAL_IMG1_AREA_END_LINE, 0x0000);
  400804:	2082      	movs	r0, #130	; 0x82
  400806:	2100      	movs	r1, #0
  400808:	47a0      	blx	r4
	ili9325_write_register(ILI9325_PARTIAL_IMG2_DISP_POS, 0x0000);
  40080a:	2083      	movs	r0, #131	; 0x83
  40080c:	2100      	movs	r1, #0
  40080e:	47a0      	blx	r4
	ili9325_write_register(ILI9325_PARTIAL_IMG2_AREA_START_LINE, 0x0000);
  400810:	2084      	movs	r0, #132	; 0x84
  400812:	2100      	movs	r1, #0
  400814:	47a0      	blx	r4
	ili9325_write_register(ILI9325_PARTIAL_IMG2_AREA_END_LINE, 0x0000);
  400816:	2085      	movs	r0, #133	; 0x85
  400818:	2100      	movs	r1, #0
  40081a:	47a0      	blx	r4

	/* Panel Control */
	ili9325_write_register(ILI9325_PANEL_INTERFACE_CTRL1,
  40081c:	2090      	movs	r0, #144	; 0x90
  40081e:	2110      	movs	r1, #16
  400820:	47a0      	blx	r4
			ILI9325_PANEL_INTERFACE_CTRL1_RTNI(0x10));
	ili9325_write_register(ILI9325_PANEL_INTERFACE_CTRL2,
  400822:	2092      	movs	r0, #146	; 0x92
  400824:	f44f 61c0 	mov.w	r1, #1536	; 0x600
  400828:	47a0      	blx	r4
			ILI9325_PANEL_INTERFACE_CTRL2_NOWI(0x06));
	ili9325_write_register(ILI9325_PANEL_INTERFACE_CTRL4,
  40082a:	2095      	movs	r0, #149	; 0x95
  40082c:	f44f 7188 	mov.w	r1, #272	; 0x110
  400830:	47a0      	blx	r4
			ILI9325_PANEL_INTERFACE_CTRL4_DIVE(0x01) |
			ILI9325_PANEL_INTERFACE_CTRL4_RTNE(0x10));

	ili9325_set_window(0, 0,p_opt->ul_width,p_opt->ul_height);
  400832:	2000      	movs	r0, #0
  400834:	4601      	mov	r1, r0
  400836:	682a      	ldr	r2, [r5, #0]
  400838:	686b      	ldr	r3, [r5, #4]
  40083a:	4c0a      	ldr	r4, [pc, #40]	; (400864 <ili9325_init+0x198>)
  40083c:	47a0      	blx	r4
	ili9325_set_foreground_color(p_opt->foreground_color);
  40083e:	68a8      	ldr	r0, [r5, #8]
  400840:	4b09      	ldr	r3, [pc, #36]	; (400868 <ili9325_init+0x19c>)
  400842:	4798      	blx	r3
	ili9325_set_cursor_position(0, 0);
  400844:	2000      	movs	r0, #0
  400846:	4601      	mov	r1, r0
  400848:	4b08      	ldr	r3, [pc, #32]	; (40086c <ili9325_init+0x1a0>)
  40084a:	4798      	blx	r3
	return 0;
  40084c:	2000      	movs	r0, #0
  40084e:	bd70      	pop	{r4, r5, r6, pc}
{
	/* Check ILI9325 chipid */
	uint16_t chipid = ili9325_read_register(ILI9325_DEVICE_CODE_REG); /* Driver Code Read (R00h) */

	if (chipid != ILI9325_DEVICE_CODE) {
		return 1;
  400850:	2001      	movs	r0, #1
  400852:	4770      	bx	lr
  400854:	62000002 	.word	0x62000002
  400858:	ffff9325 	.word	0xffff9325
  40085c:	004005f9 	.word	0x004005f9
  400860:	00400611 	.word	0x00400611
  400864:	00400675 	.word	0x00400675
  400868:	0040065d 	.word	0x0040065d
  40086c:	004006b1 	.word	0x004006b1

00400870 <ili9325_fill>:
 * \brief Fill the LCD buffer with the specified color.
 *
 * \param ul_color fill color.
 */
void ili9325_fill(ili9325_color_t ul_color)
{
  400870:	b570      	push	{r4, r5, r6, lr}
  400872:	4606      	mov	r6, r0
	uint32_t dw;

	ili9325_set_cursor_position(0, 0);
  400874:	2000      	movs	r0, #0
  400876:	4601      	mov	r1, r0
  400878:	4b07      	ldr	r3, [pc, #28]	; (400898 <ili9325_fill+0x28>)
  40087a:	4798      	blx	r3

/* Define EBI access for ILI9325 8-bit System Interface.*/
#if defined(BOARD_ILI9325_ADDR) && defined (BOARD_ILI9325_RS)
	static inline void LCD_IR(uint8_t lcd_index)
	{
		*((volatile uint8_t *)(BOARD_ILI9325_ADDR)) = lcd_index; /* ILI9325 index register address */
  40087c:	f04f 43c4 	mov.w	r3, #1644167168	; 0x62000000
  400880:	2200      	movs	r2, #0
  400882:	701a      	strb	r2, [r3, #0]
  400884:	2222      	movs	r2, #34	; 0x22
  400886:	701a      	strb	r2, [r3, #0]
  400888:	f44f 3496 	mov.w	r4, #76800	; 0x12c00
	ili9325_write_ram_prepare();

	for (dw = ILI9325_LCD_WIDTH * ILI9325_LCD_HEIGHT; dw > 0; dw--) {
		ili9325_write_ram(ul_color);
  40088c:	4d03      	ldr	r5, [pc, #12]	; (40089c <ili9325_fill+0x2c>)
  40088e:	4630      	mov	r0, r6
  400890:	47a8      	blx	r5
	uint32_t dw;

	ili9325_set_cursor_position(0, 0);
	ili9325_write_ram_prepare();

	for (dw = ILI9325_LCD_WIDTH * ILI9325_LCD_HEIGHT; dw > 0; dw--) {
  400892:	3c01      	subs	r4, #1
  400894:	d1fb      	bne.n	40088e <ili9325_fill+0x1e>
		ili9325_write_ram(ul_color);
	}
}
  400896:	bd70      	pop	{r4, r5, r6, pc}
  400898:	004006b1 	.word	0x004006b1
  40089c:	004005e1 	.word	0x004005e1

004008a0 <ili9325_draw_pixel>:
 *
 * \return 0 if succeeds, otherwise fails.
 */
uint32_t ili9325_draw_pixel(uint32_t ul_x, uint32_t ul_y)
{
	if ((ul_x >= ILI9325_LCD_WIDTH) || (ul_y >= ILI9325_LCD_HEIGHT)) {
  4008a0:	28ef      	cmp	r0, #239	; 0xef
  4008a2:	d813      	bhi.n	4008cc <ili9325_draw_pixel+0x2c>
  4008a4:	f5b1 7fa0 	cmp.w	r1, #320	; 0x140
  4008a8:	d212      	bcs.n	4008d0 <ili9325_draw_pixel+0x30>
 * \param ul_y Y coordinate of pixel.
 *
 * \return 0 if succeeds, otherwise fails.
 */
uint32_t ili9325_draw_pixel(uint32_t ul_x, uint32_t ul_y)
{
  4008aa:	b510      	push	{r4, lr}
	if ((ul_x >= ILI9325_LCD_WIDTH) || (ul_y >= ILI9325_LCD_HEIGHT)) {
		return 1;
	}

	/* Set cursor */
	ili9325_set_cursor_position(ul_x, ul_y);
  4008ac:	b280      	uxth	r0, r0
  4008ae:	b289      	uxth	r1, r1
  4008b0:	4b08      	ldr	r3, [pc, #32]	; (4008d4 <ili9325_draw_pixel+0x34>)
  4008b2:	4798      	blx	r3
  4008b4:	f04f 43c4 	mov.w	r3, #1644167168	; 0x62000000
  4008b8:	2400      	movs	r4, #0
  4008ba:	701c      	strb	r4, [r3, #0]
  4008bc:	2222      	movs	r2, #34	; 0x22
  4008be:	701a      	strb	r2, [r3, #0]

	/* Prepare to write in GRAM */
	ili9325_write_ram_prepare();
	ili9325_write_ram(*g_ul_pixel_cache);
  4008c0:	4b05      	ldr	r3, [pc, #20]	; (4008d8 <ili9325_draw_pixel+0x38>)
  4008c2:	6818      	ldr	r0, [r3, #0]
  4008c4:	4b05      	ldr	r3, [pc, #20]	; (4008dc <ili9325_draw_pixel+0x3c>)
  4008c6:	4798      	blx	r3
	return 0;
  4008c8:	4620      	mov	r0, r4
  4008ca:	bd10      	pop	{r4, pc}
 * \return 0 if succeeds, otherwise fails.
 */
uint32_t ili9325_draw_pixel(uint32_t ul_x, uint32_t ul_y)
{
	if ((ul_x >= ILI9325_LCD_WIDTH) || (ul_y >= ILI9325_LCD_HEIGHT)) {
		return 1;
  4008cc:	2001      	movs	r0, #1
  4008ce:	4770      	bx	lr
  4008d0:	2001      	movs	r0, #1
  4008d2:	4770      	bx	lr
  4008d4:	004006b1 	.word	0x004006b1
  4008d8:	20000870 	.word	0x20000870
  4008dc:	004005e1 	.word	0x004005e1

004008e0 <ili9325_draw_prepare>:
 * \param ul_width The width of the window.
 * \param ul_height The height of the window.
 */
void ili9325_draw_prepare(uint32_t ul_x, uint32_t ul_y, uint32_t ul_width,
		uint32_t ul_height)
{
  4008e0:	b570      	push	{r4, r5, r6, lr}
  4008e2:	4605      	mov	r5, r0
  4008e4:	460c      	mov	r4, r1
	/* Determine the refresh window area */
	ili9325_set_window(ul_x, ul_y, ul_width, ul_height);
  4008e6:	4e06      	ldr	r6, [pc, #24]	; (400900 <ili9325_draw_prepare+0x20>)
  4008e8:	47b0      	blx	r6

	/* Set cursor */
	ili9325_set_cursor_position(ul_x, ul_y);
  4008ea:	b2a8      	uxth	r0, r5
  4008ec:	b2a1      	uxth	r1, r4
  4008ee:	4b05      	ldr	r3, [pc, #20]	; (400904 <ili9325_draw_prepare+0x24>)
  4008f0:	4798      	blx	r3
  4008f2:	f04f 43c4 	mov.w	r3, #1644167168	; 0x62000000
  4008f6:	2200      	movs	r2, #0
  4008f8:	701a      	strb	r2, [r3, #0]
  4008fa:	2222      	movs	r2, #34	; 0x22
  4008fc:	701a      	strb	r2, [r3, #0]
  4008fe:	bd70      	pop	{r4, r5, r6, pc}
  400900:	00400675 	.word	0x00400675
  400904:	004006b1 	.word	0x004006b1

00400908 <ili9325_draw_string>:
 * \param ul_x X coordinate of string top-left corner.
 * \param ul_y Y coordinate of string top-left corner.
 * \param p_str String to display.
 */
void ili9325_draw_string(uint32_t ul_x, uint32_t ul_y, const uint8_t *p_str)
{
  400908:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40090c:	b085      	sub	sp, #20
  40090e:	9003      	str	r0, [sp, #12]
  400910:	9202      	str	r2, [sp, #8]
	uint32_t xorg = ul_x;

	while (*p_str != 0) {
  400912:	7813      	ldrb	r3, [r2, #0]
  400914:	2b00      	cmp	r3, #0
  400916:	d046      	beq.n	4009a6 <ili9325_draw_string+0x9e>
  400918:	468b      	mov	fp, r1
  40091a:	9001      	str	r0, [sp, #4]
		offset1 = offset0 + 1;

		/* Draw pixel on screen depending on the corresponding bit value from the charset */
		for (row = 0; row < 8; row++) {
			if ((p_uc_charset10x14[offset0] >> (7 - row)) & 0x1) {
				ili9325_draw_pixel(ul_x + col, ul_y + row);
  40091c:	f8df 9090 	ldr.w	r9, [pc, #144]	; 4009b0 <ili9325_draw_string+0xa8>
{
	uint32_t xorg = ul_x;

	while (*p_str != 0) {
		/* If newline, jump to the next line (font height + 2) */
		if (*p_str == '\n') {
  400920:	2b0a      	cmp	r3, #10
  400922:	d104      	bne.n	40092e <ili9325_draw_string+0x26>
			ul_y += gfont.height + 2;
  400924:	f10b 0b10 	add.w	fp, fp, #16
			ul_x = xorg;
  400928:	9b03      	ldr	r3, [sp, #12]
  40092a:	9301      	str	r3, [sp, #4]
  40092c:	e035      	b.n	40099a <ili9325_draw_string+0x92>
	uint32_t row, col;
	uint32_t offset, offset0, offset1;

	/* Compute offset according of the specified ASCII character */
	/* Note: the first 32 characters of the ASCII table are not handled */
	offset = ((uint32_t)uc_c - 0x20) * 20;
  40092e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  400932:	4e1e      	ldr	r6, [pc, #120]	; (4009ac <ili9325_draw_string+0xa4>)
  400934:	eb06 0383 	add.w	r3, r6, r3, lsl #2
  400938:	f2a3 267f 	subw	r6, r3, #639	; 0x27f
  40093c:	9a01      	ldr	r2, [sp, #4]
  40093e:	4613      	mov	r3, r2
  400940:	330a      	adds	r3, #10
  400942:	9300      	str	r3, [sp, #0]
  400944:	4690      	mov	r8, r2
  400946:	2407      	movs	r4, #7
  400948:	4637      	mov	r7, r6
  40094a:	eb0b 0a04 	add.w	sl, fp, r4
  40094e:	463d      	mov	r5, r7
		offset0 = offset + col * 2;
		offset1 = offset0 + 1;

		/* Draw pixel on screen depending on the corresponding bit value from the charset */
		for (row = 0; row < 8; row++) {
			if ((p_uc_charset10x14[offset0] >> (7 - row)) & 0x1) {
  400950:	f816 3c01 	ldrb.w	r3, [r6, #-1]
  400954:	4123      	asrs	r3, r4
  400956:	f013 0f01 	tst.w	r3, #1
  40095a:	d003      	beq.n	400964 <ili9325_draw_string+0x5c>
				ili9325_draw_pixel(ul_x + col, ul_y + row);
  40095c:	4640      	mov	r0, r8
  40095e:	ebc4 010a 	rsb	r1, r4, sl
  400962:	47c8      	blx	r9
  400964:	3c01      	subs	r4, #1
		/* Compute the first and second byte offset of a column */
		offset0 = offset + col * 2;
		offset1 = offset0 + 1;

		/* Draw pixel on screen depending on the corresponding bit value from the charset */
		for (row = 0; row < 8; row++) {
  400966:	f1b4 3fff 	cmp.w	r4, #4294967295
  40096a:	d1f0      	bne.n	40094e <ili9325_draw_string+0x46>
  40096c:	2407      	movs	r4, #7
  40096e:	f10b 070f 	add.w	r7, fp, #15
				ili9325_draw_pixel(ul_x + col, ul_y + row);
			}
		}

		for (row = 0; row < 6; row++) {
			if ((p_uc_charset10x14[offset1] >> (7 - row)) & 0x1) {
  400972:	782b      	ldrb	r3, [r5, #0]
  400974:	4123      	asrs	r3, r4
  400976:	f013 0f01 	tst.w	r3, #1
  40097a:	d002      	beq.n	400982 <ili9325_draw_string+0x7a>
				ili9325_draw_pixel(ul_x + col, ul_y + row + 8);
  40097c:	4640      	mov	r0, r8
  40097e:	1b39      	subs	r1, r7, r4
  400980:	47c8      	blx	r9
  400982:	3c01      	subs	r4, #1
			if ((p_uc_charset10x14[offset0] >> (7 - row)) & 0x1) {
				ili9325_draw_pixel(ul_x + col, ul_y + row);
			}
		}

		for (row = 0; row < 6; row++) {
  400984:	2c01      	cmp	r4, #1
  400986:	d1f4      	bne.n	400972 <ili9325_draw_string+0x6a>
  400988:	3602      	adds	r6, #2
  40098a:	f108 0801 	add.w	r8, r8, #1

	/* Compute offset according of the specified ASCII character */
	/* Note: the first 32 characters of the ASCII table are not handled */
	offset = ((uint32_t)uc_c - 0x20) * 20;

	for (col = 0; col < 10; col++) {
  40098e:	9b00      	ldr	r3, [sp, #0]
  400990:	4598      	cmp	r8, r3
  400992:	d1d8      	bne.n	400946 <ili9325_draw_string+0x3e>
			ul_y += gfont.height + 2;
			ul_x = xorg;
		} else {
			/* Draw the character and place cursor right after (font width + 2) */
			ili9325_draw_char(ul_x, ul_y, *p_str);
			ul_x += gfont.width + 2;
  400994:	9b01      	ldr	r3, [sp, #4]
  400996:	330c      	adds	r3, #12
  400998:	9301      	str	r3, [sp, #4]
 */
void ili9325_draw_string(uint32_t ul_x, uint32_t ul_y, const uint8_t *p_str)
{
	uint32_t xorg = ul_x;

	while (*p_str != 0) {
  40099a:	9a02      	ldr	r2, [sp, #8]
  40099c:	f812 3f01 	ldrb.w	r3, [r2, #1]!
  4009a0:	9202      	str	r2, [sp, #8]
  4009a2:	2b00      	cmp	r3, #0
  4009a4:	d1bc      	bne.n	400920 <ili9325_draw_string+0x18>
			ili9325_draw_char(ul_x, ul_y, *p_str);
			ul_x += gfont.width + 2;
		}
		p_str++;
	}
}
  4009a6:	b005      	add	sp, #20
  4009a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4009ac:	00402a48 	.word	0x00402a48
  4009b0:	004008a1 	.word	0x004008a1

004009b4 <smc_set_setup_timing>:
 * \param ul_setup_timing Setup timing for NWE, NCS, NRD.
 */
void smc_set_setup_timing(Smc *p_smc, uint32_t ul_cs,
		uint32_t ul_setup_timing)
{
	p_smc->SMC_CS_NUMBER[ul_cs].SMC_SETUP = ul_setup_timing;
  4009b4:	0109      	lsls	r1, r1, #4
  4009b6:	5042      	str	r2, [r0, r1]
  4009b8:	4770      	bx	lr
  4009ba:	bf00      	nop

004009bc <smc_set_pulse_timing>:
 * \param ul_pulse_timing Pulse timing for NWE,NCS,NRD.
 */
void smc_set_pulse_timing(Smc *p_smc, uint32_t ul_cs,
		uint32_t ul_pulse_timing)
{
	p_smc->SMC_CS_NUMBER[ul_cs].SMC_PULSE = ul_pulse_timing;
  4009bc:	eb00 1101 	add.w	r1, r0, r1, lsl #4
  4009c0:	604a      	str	r2, [r1, #4]
  4009c2:	4770      	bx	lr

004009c4 <smc_set_cycle_timing>:
 * \param ul_cycle_timing Cycle timing for NWE and NRD.
 */
void smc_set_cycle_timing(Smc *p_smc, uint32_t ul_cs,
		uint32_t ul_cycle_timing)
{
	p_smc->SMC_CS_NUMBER[ul_cs].SMC_CYCLE = ul_cycle_timing;
  4009c4:	eb00 1101 	add.w	r1, r0, r1, lsl #4
  4009c8:	608a      	str	r2, [r1, #8]
  4009ca:	4770      	bx	lr

004009cc <smc_set_mode>:
 * \param ul_cs Chip select number to be set.
 * \param ul_mode SMC mode.
 */
void smc_set_mode(Smc *p_smc, uint32_t ul_cs, uint32_t ul_mode)
{
	p_smc->SMC_CS_NUMBER[ul_cs].SMC_MODE = ul_mode;
  4009cc:	eb00 1101 	add.w	r1, r0, r1, lsl #4
  4009d0:	60ca      	str	r2, [r1, #12]
  4009d2:	4770      	bx	lr

004009d4 <pio_set_debounce_filter>:
void pio_set_debounce_filter(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_cut_off)
{
#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	/* Set Debouncing, 0 bit field no effect */
	p_pio->PIO_IFSCER = ul_mask;
  4009d4:	f8c0 1084 	str.w	r1, [r0, #132]	; 0x84
	/*
	 * The debouncing filter can filter a pulse of less than 1/2 Period of a
	 * programmable Divided Slow Clock:
	 * Tdiv_slclk = ((DIV+1)*2).Tslow_clock
	 */
	p_pio->PIO_SCDR = PIO_SCDR_DIV((FREQ_SLOW_CLOCK_EXT /
  4009d8:	0052      	lsls	r2, r2, #1
  4009da:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  4009de:	fbb3 f2f2 	udiv	r2, r3, r2
  4009e2:	3a01      	subs	r2, #1
  4009e4:	f3c2 020d 	ubfx	r2, r2, #0, #14
  4009e8:	f8c0 208c 	str.w	r2, [r0, #140]	; 0x8c
  4009ec:	4770      	bx	lr
  4009ee:	bf00      	nop

004009f0 <pio_set>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_set(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_SODR = ul_mask;
  4009f0:	6301      	str	r1, [r0, #48]	; 0x30
  4009f2:	4770      	bx	lr

004009f4 <pio_clear>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_clear(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_CODR = ul_mask;
  4009f4:	6341      	str	r1, [r0, #52]	; 0x34
  4009f6:	4770      	bx	lr

004009f8 <pio_set_peripheral>:
		const uint32_t ul_mask)
{
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
  4009f8:	6442      	str	r2, [r0, #68]	; 0x44

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	switch (ul_type) {
  4009fa:	f1b1 5fc0 	cmp.w	r1, #402653184	; 0x18000000
  4009fe:	d02f      	beq.n	400a60 <pio_set_peripheral+0x68>
  400a00:	d807      	bhi.n	400a12 <pio_set_peripheral+0x1a>
  400a02:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
  400a06:	d014      	beq.n	400a32 <pio_set_peripheral+0x3a>
  400a08:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
  400a0c:	d01e      	beq.n	400a4c <pio_set_peripheral+0x54>
  400a0e:	b939      	cbnz	r1, 400a20 <pio_set_peripheral+0x28>
  400a10:	4770      	bx	lr
  400a12:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
  400a16:	d037      	beq.n	400a88 <pio_set_peripheral+0x90>
  400a18:	d804      	bhi.n	400a24 <pio_set_peripheral+0x2c>
  400a1a:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
  400a1e:	d029      	beq.n	400a74 <pio_set_peripheral+0x7c>
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
  400a20:	6042      	str	r2, [r0, #4]
  400a22:	4770      	bx	lr

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	switch (ul_type) {
  400a24:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
  400a28:	d02e      	beq.n	400a88 <pio_set_peripheral+0x90>
  400a2a:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
  400a2e:	d02b      	beq.n	400a88 <pio_set_peripheral+0x90>
  400a30:	e7f6      	b.n	400a20 <pio_set_peripheral+0x28>
 * \param ul_type PIO type.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_set_peripheral(Pio *p_pio, const pio_type_t ul_type,
		const uint32_t ul_mask)
{
  400a32:	b410      	push	{r4}
	p_pio->PIO_IDR = ul_mask;

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	switch (ul_type) {
	case PIO_PERIPH_A:
		ul_sr = p_pio->PIO_ABCDSR[0];
  400a34:	6f01      	ldr	r1, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  400a36:	6f04      	ldr	r4, [r0, #112]	; 0x70
  400a38:	43d3      	mvns	r3, r2
  400a3a:	4021      	ands	r1, r4
  400a3c:	4019      	ands	r1, r3
  400a3e:	6701      	str	r1, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  400a40:	6f41      	ldr	r1, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  400a42:	6f44      	ldr	r4, [r0, #116]	; 0x74
  400a44:	4021      	ands	r1, r4
  400a46:	400b      	ands	r3, r1
  400a48:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  400a4a:	e01a      	b.n	400a82 <pio_set_peripheral+0x8a>
	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABCDSR[0];
  400a4c:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  400a4e:	4313      	orrs	r3, r2
  400a50:	6703      	str	r3, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  400a52:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  400a54:	6f41      	ldr	r1, [r0, #116]	; 0x74
  400a56:	400b      	ands	r3, r1
  400a58:	ea23 0302 	bic.w	r3, r3, r2
  400a5c:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  400a5e:	e7df      	b.n	400a20 <pio_set_peripheral+0x28>
#if (!SAMG)
	case PIO_PERIPH_C:
		ul_sr = p_pio->PIO_ABCDSR[0];
  400a60:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  400a62:	6f01      	ldr	r1, [r0, #112]	; 0x70
  400a64:	400b      	ands	r3, r1
  400a66:	ea23 0302 	bic.w	r3, r3, r2
  400a6a:	6703      	str	r3, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  400a6c:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  400a6e:	4313      	orrs	r3, r2
  400a70:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  400a72:	e7d5      	b.n	400a20 <pio_set_peripheral+0x28>
	case PIO_PERIPH_D:
		ul_sr = p_pio->PIO_ABCDSR[0];
  400a74:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  400a76:	4313      	orrs	r3, r2
  400a78:	6703      	str	r3, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  400a7a:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  400a7c:	4313      	orrs	r3, r2
  400a7e:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  400a80:	e7ce      	b.n	400a20 <pio_set_peripheral+0x28>
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
  400a82:	6042      	str	r2, [r0, #4]
}
  400a84:	f85d 4b04 	ldr.w	r4, [sp], #4
  400a88:	4770      	bx	lr
  400a8a:	bf00      	nop

00400a8c <pio_set_input>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
  400a8c:	6441      	str	r1, [r0, #68]	; 0x44
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  400a8e:	f012 0f01 	tst.w	r2, #1
		p_pio->PIO_PUER = ul_mask;
  400a92:	bf14      	ite	ne
  400a94:	6641      	strne	r1, [r0, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
  400a96:	6601      	streq	r1, [r0, #96]	; 0x60
{
	pio_disable_interrupt(p_pio, ul_mask);
	pio_pull_up(p_pio, ul_mask, ul_attribute & PIO_PULLUP);

	/* Enable Input Filter if necessary */
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
  400a98:	f012 0f0a 	tst.w	r2, #10
		p_pio->PIO_IFER = ul_mask;
  400a9c:	bf14      	ite	ne
  400a9e:	6201      	strne	r1, [r0, #32]
	} else {
		p_pio->PIO_IFDR = ul_mask;
  400aa0:	6241      	streq	r1, [r0, #36]	; 0x24
	}

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	/* Enable de-glitch or de-bounce if necessary */
	if (ul_attribute & PIO_DEGLITCH) {
  400aa2:	f012 0f02 	tst.w	r2, #2
  400aa6:	d002      	beq.n	400aae <pio_set_input+0x22>
		p_pio->PIO_IFSCDR = ul_mask;
  400aa8:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
  400aac:	e004      	b.n	400ab8 <pio_set_input+0x2c>
	} else {
		if (ul_attribute & PIO_DEBOUNCE) {
  400aae:	f012 0f08 	tst.w	r2, #8
			p_pio->PIO_IFSCER = ul_mask;
  400ab2:	bf18      	it	ne
  400ab4:	f8c0 1084 	strne.w	r1, [r0, #132]	; 0x84
#else
#error "Unsupported device"
#endif

	/* Configure pin as input */
	p_pio->PIO_ODR = ul_mask;
  400ab8:	6141      	str	r1, [r0, #20]
	p_pio->PIO_PER = ul_mask;
  400aba:	6001      	str	r1, [r0, #0]
  400abc:	4770      	bx	lr
  400abe:	bf00      	nop

00400ac0 <pio_set_output>:
 */
void pio_set_output(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_default_level,
		const uint32_t ul_multidrive_enable,
		const uint32_t ul_pull_up_enable)
{
  400ac0:	b410      	push	{r4}
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
  400ac2:	6441      	str	r1, [r0, #68]	; 0x44
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  400ac4:	9c01      	ldr	r4, [sp, #4]
  400ac6:	b10c      	cbz	r4, 400acc <pio_set_output+0xc>
		p_pio->PIO_PUER = ul_mask;
  400ac8:	6641      	str	r1, [r0, #100]	; 0x64
  400aca:	e000      	b.n	400ace <pio_set_output+0xe>
	} else {
		p_pio->PIO_PUDR = ul_mask;
  400acc:	6601      	str	r1, [r0, #96]	; 0x60
{
	pio_disable_interrupt(p_pio, ul_mask);
	pio_pull_up(p_pio, ul_mask, ul_pull_up_enable);

	/* Enable multi-drive if necessary */
	if (ul_multidrive_enable) {
  400ace:	b10b      	cbz	r3, 400ad4 <pio_set_output+0x14>
		p_pio->PIO_MDER = ul_mask;
  400ad0:	6501      	str	r1, [r0, #80]	; 0x50
  400ad2:	e000      	b.n	400ad6 <pio_set_output+0x16>
	} else {
		p_pio->PIO_MDDR = ul_mask;
  400ad4:	6541      	str	r1, [r0, #84]	; 0x54
	}

	/* Set default value */
	if (ul_default_level) {
  400ad6:	b10a      	cbz	r2, 400adc <pio_set_output+0x1c>
		p_pio->PIO_SODR = ul_mask;
  400ad8:	6301      	str	r1, [r0, #48]	; 0x30
  400ada:	e000      	b.n	400ade <pio_set_output+0x1e>
	} else {
		p_pio->PIO_CODR = ul_mask;
  400adc:	6341      	str	r1, [r0, #52]	; 0x34
	}

	/* Configure pin(s) as output(s) */
	p_pio->PIO_OER = ul_mask;
  400ade:	6101      	str	r1, [r0, #16]
	p_pio->PIO_PER = ul_mask;
  400ae0:	6001      	str	r1, [r0, #0]
}
  400ae2:	f85d 4b04 	ldr.w	r4, [sp], #4
  400ae6:	4770      	bx	lr

00400ae8 <pio_configure_interrupt>:
 */
void pio_configure_interrupt(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_attr)
{
	/* Configure additional interrupt mode registers. */
	if (ul_attr & PIO_IT_AIME) {
  400ae8:	f012 0f10 	tst.w	r2, #16
  400aec:	d010      	beq.n	400b10 <pio_configure_interrupt+0x28>
		/* Enable additional interrupt mode. */
		p_pio->PIO_AIMER = ul_mask;
  400aee:	f8c0 10b0 	str.w	r1, [r0, #176]	; 0xb0

		/* If bit field of the selected pin is 1, set as
		   Rising Edge/High level detection event. */
		if (ul_attr & PIO_IT_RE_OR_HL) {
  400af2:	f012 0f20 	tst.w	r2, #32
			/* Rising Edge or High Level */
			p_pio->PIO_REHLSR = ul_mask;
  400af6:	bf14      	ite	ne
  400af8:	f8c0 10d4 	strne.w	r1, [r0, #212]	; 0xd4
		} else {
			/* Falling Edge or Low Level */
			p_pio->PIO_FELLSR = ul_mask;
  400afc:	f8c0 10d0 	streq.w	r1, [r0, #208]	; 0xd0
		}

		/* If bit field of the selected pin is 1, set as
		   edge detection source. */
		if (ul_attr & PIO_IT_EDGE) {
  400b00:	f012 0f40 	tst.w	r2, #64	; 0x40
			/* Edge select */
			p_pio->PIO_ESR = ul_mask;
  400b04:	bf14      	ite	ne
  400b06:	f8c0 10c0 	strne.w	r1, [r0, #192]	; 0xc0
		} else {
			/* Level select */
			p_pio->PIO_LSR = ul_mask;
  400b0a:	f8c0 10c4 	streq.w	r1, [r0, #196]	; 0xc4
  400b0e:	4770      	bx	lr
		}
	} else {
		/* Disable additional interrupt mode. */
		p_pio->PIO_AIMDR = ul_mask;
  400b10:	f8c0 10b4 	str.w	r1, [r0, #180]	; 0xb4
  400b14:	4770      	bx	lr
  400b16:	bf00      	nop

00400b18 <pio_enable_interrupt>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_enable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_ISR;
  400b18:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
	p_pio->PIO_IER = ul_mask;
  400b1a:	6401      	str	r1, [r0, #64]	; 0x40
  400b1c:	4770      	bx	lr
  400b1e:	bf00      	nop

00400b20 <pio_disable_interrupt>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
  400b20:	6441      	str	r1, [r0, #68]	; 0x44
  400b22:	4770      	bx	lr

00400b24 <pio_get_interrupt_status>:
 *
 * \return The interrupt status mask value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
  400b24:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
  400b26:	4770      	bx	lr

00400b28 <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
  400b28:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
  400b2a:	4770      	bx	lr

00400b2c <pio_configure_pin>:
 * \param ul_flags Pins attributes.
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
  400b2c:	b570      	push	{r4, r5, r6, lr}
  400b2e:	b082      	sub	sp, #8
  400b30:	460d      	mov	r5, r1
		p_pio = PIOC;
	} else {
		p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
	}
#else
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
  400b32:	0943      	lsrs	r3, r0, #5
  400b34:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  400b38:	f203 7307 	addw	r3, r3, #1799	; 0x707
  400b3c:	025c      	lsls	r4, r3, #9
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
	Pio *p_pio = pio_get_pin_group(ul_pin);

	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
  400b3e:	f001 43f0 	and.w	r3, r1, #2013265920	; 0x78000000
  400b42:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
  400b46:	d047      	beq.n	400bd8 <pio_configure_pin+0xac>
  400b48:	d809      	bhi.n	400b5e <pio_configure_pin+0x32>
  400b4a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
  400b4e:	d021      	beq.n	400b94 <pio_configure_pin+0x68>
  400b50:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
  400b54:	d02f      	beq.n	400bb6 <pio_configure_pin+0x8a>
  400b56:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
  400b5a:	d16f      	bne.n	400c3c <pio_configure_pin+0x110>
  400b5c:	e009      	b.n	400b72 <pio_configure_pin+0x46>
  400b5e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
  400b62:	d055      	beq.n	400c10 <pio_configure_pin+0xe4>
  400b64:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
  400b68:	d052      	beq.n	400c10 <pio_configure_pin+0xe4>
  400b6a:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
  400b6e:	d044      	beq.n	400bfa <pio_configure_pin+0xce>
  400b70:	e064      	b.n	400c3c <pio_configure_pin+0x110>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
  400b72:	f000 001f 	and.w	r0, r0, #31
  400b76:	2601      	movs	r6, #1
  400b78:	4086      	lsls	r6, r0
  400b7a:	4620      	mov	r0, r4
  400b7c:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  400b80:	4632      	mov	r2, r6
  400b82:	4b30      	ldr	r3, [pc, #192]	; (400c44 <pio_configure_pin+0x118>)
  400b84:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  400b86:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
  400b8a:	bf14      	ite	ne
  400b8c:	6666      	strne	r6, [r4, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
  400b8e:	6626      	streq	r6, [r4, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
  400b90:	2001      	movs	r0, #1
  400b92:	e054      	b.n	400c3e <pio_configure_pin+0x112>
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
				(ul_flags & PIO_PULLUP));
		break;
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, (1 << (ul_pin & 0x1F)));
  400b94:	f000 001f 	and.w	r0, r0, #31
  400b98:	2601      	movs	r6, #1
  400b9a:	4086      	lsls	r6, r0
  400b9c:	4620      	mov	r0, r4
  400b9e:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  400ba2:	4632      	mov	r2, r6
  400ba4:	4b27      	ldr	r3, [pc, #156]	; (400c44 <pio_configure_pin+0x118>)
  400ba6:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  400ba8:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
  400bac:	bf14      	ite	ne
  400bae:	6666      	strne	r6, [r4, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
  400bb0:	6626      	streq	r6, [r4, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
  400bb2:	2001      	movs	r0, #1
  400bb4:	e043      	b.n	400c3e <pio_configure_pin+0x112>
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
				(ul_flags & PIO_PULLUP));
		break;
#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	case PIO_TYPE_PIO_PERIPH_C:
		pio_set_peripheral(p_pio, PIO_PERIPH_C, (1 << (ul_pin & 0x1F)));
  400bb6:	f000 001f 	and.w	r0, r0, #31
  400bba:	2601      	movs	r6, #1
  400bbc:	4086      	lsls	r6, r0
  400bbe:	4620      	mov	r0, r4
  400bc0:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  400bc4:	4632      	mov	r2, r6
  400bc6:	4b1f      	ldr	r3, [pc, #124]	; (400c44 <pio_configure_pin+0x118>)
  400bc8:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  400bca:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
  400bce:	bf14      	ite	ne
  400bd0:	6666      	strne	r6, [r4, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
  400bd2:	6626      	streq	r6, [r4, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
  400bd4:	2001      	movs	r0, #1
  400bd6:	e032      	b.n	400c3e <pio_configure_pin+0x112>
		pio_set_peripheral(p_pio, PIO_PERIPH_C, (1 << (ul_pin & 0x1F)));
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
				(ul_flags & PIO_PULLUP));
		break;
	case PIO_TYPE_PIO_PERIPH_D:
		pio_set_peripheral(p_pio, PIO_PERIPH_D, (1 << (ul_pin & 0x1F)));
  400bd8:	f000 001f 	and.w	r0, r0, #31
  400bdc:	2601      	movs	r6, #1
  400bde:	4086      	lsls	r6, r0
  400be0:	4620      	mov	r0, r4
  400be2:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
  400be6:	4632      	mov	r2, r6
  400be8:	4b16      	ldr	r3, [pc, #88]	; (400c44 <pio_configure_pin+0x118>)
  400bea:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  400bec:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
  400bf0:	bf14      	ite	ne
  400bf2:	6666      	strne	r6, [r4, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
  400bf4:	6626      	streq	r6, [r4, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
  400bf6:	2001      	movs	r0, #1
  400bf8:	e021      	b.n	400c3e <pio_configure_pin+0x112>
				(ul_flags & PIO_PULLUP));
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
  400bfa:	f000 031f 	and.w	r3, r0, #31
  400bfe:	2601      	movs	r6, #1
  400c00:	4620      	mov	r0, r4
  400c02:	fa06 f103 	lsl.w	r1, r6, r3
  400c06:	462a      	mov	r2, r5
  400c08:	4b0f      	ldr	r3, [pc, #60]	; (400c48 <pio_configure_pin+0x11c>)
  400c0a:	4798      	blx	r3

	default:
		return 0;
	}

	return 1;
  400c0c:	4630      	mov	r0, r6
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;
  400c0e:	e016      	b.n	400c3e <pio_configure_pin+0x112>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
  400c10:	f000 031f 	and.w	r3, r0, #31
  400c14:	2601      	movs	r6, #1
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
  400c16:	f005 5260 	and.w	r2, r5, #939524096	; 0x38000000
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
  400c1a:	ea05 0106 	and.w	r1, r5, r6
  400c1e:	9100      	str	r1, [sp, #0]
  400c20:	4620      	mov	r0, r4
  400c22:	fa06 f103 	lsl.w	r1, r6, r3
  400c26:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
  400c2a:	bf14      	ite	ne
  400c2c:	2200      	movne	r2, #0
  400c2e:	2201      	moveq	r2, #1
  400c30:	f3c5 0380 	ubfx	r3, r5, #2, #1
  400c34:	4c05      	ldr	r4, [pc, #20]	; (400c4c <pio_configure_pin+0x120>)
  400c36:	47a0      	blx	r4

	default:
		return 0;
	}

	return 1;
  400c38:	4630      	mov	r0, r6
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
		break;
  400c3a:	e000      	b.n	400c3e <pio_configure_pin+0x112>

	default:
		return 0;
  400c3c:	2000      	movs	r0, #0
	}

	return 1;
}
  400c3e:	b002      	add	sp, #8
  400c40:	bd70      	pop	{r4, r5, r6, pc}
  400c42:	bf00      	nop
  400c44:	004009f9 	.word	0x004009f9
  400c48:	00400a8d 	.word	0x00400a8d
  400c4c:	00400ac1 	.word	0x00400ac1

00400c50 <pio_capture_enable>:
 *
 * \param p_pio Pointer to a PIO instance.
 */
void pio_capture_enable(Pio *p_pio)
{
	p_pio->PIO_PCMR |= PIO_PCMR_PCEN;
  400c50:	f8d0 3150 	ldr.w	r3, [r0, #336]	; 0x150
  400c54:	f043 0301 	orr.w	r3, r3, #1
  400c58:	f8c0 3150 	str.w	r3, [r0, #336]	; 0x150
	pio_capture_enable_flag = true;
  400c5c:	2201      	movs	r2, #1
  400c5e:	4b01      	ldr	r3, [pc, #4]	; (400c64 <pio_capture_enable+0x14>)
  400c60:	601a      	str	r2, [r3, #0]
  400c62:	4770      	bx	lr
  400c64:	20000d04 	.word	0x20000d04

00400c68 <pio_capture_disable>:
 *
 * \param p_pio Pointer to a PIO instance.
 */
void pio_capture_disable(Pio *p_pio)
{
	p_pio->PIO_PCMR &= (~PIO_PCMR_PCEN);
  400c68:	f8d0 3150 	ldr.w	r3, [r0, #336]	; 0x150
  400c6c:	f023 0301 	bic.w	r3, r3, #1
  400c70:	f8c0 3150 	str.w	r3, [r0, #336]	; 0x150
	pio_capture_enable_flag = false;
  400c74:	2200      	movs	r2, #0
  400c76:	4b01      	ldr	r3, [pc, #4]	; (400c7c <pio_capture_disable+0x14>)
  400c78:	601a      	str	r2, [r3, #0]
  400c7a:	4770      	bx	lr
  400c7c:	20000d04 	.word	0x20000d04

00400c80 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
  400c80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  400c84:	4681      	mov	r9, r0
  400c86:	4688      	mov	r8, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
  400c88:	4b12      	ldr	r3, [pc, #72]	; (400cd4 <pio_handler_process+0x54>)
  400c8a:	4798      	blx	r3
  400c8c:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
  400c8e:	4648      	mov	r0, r9
  400c90:	4b11      	ldr	r3, [pc, #68]	; (400cd8 <pio_handler_process+0x58>)
  400c92:	4798      	blx	r3

	/* Check pending events */
	if (status != 0) {
  400c94:	4005      	ands	r5, r0
  400c96:	d013      	beq.n	400cc0 <pio_handler_process+0x40>
  400c98:	4c10      	ldr	r4, [pc, #64]	; (400cdc <pio_handler_process+0x5c>)
  400c9a:	f104 0660 	add.w	r6, r4, #96	; 0x60
		/* Find triggering source */
		i = 0;
		while (status != 0) {
			/* Source is configured on the same controller */
			if (gs_interrupt_sources[i].id == ul_id) {
  400c9e:	6823      	ldr	r3, [r4, #0]
  400ca0:	4543      	cmp	r3, r8
  400ca2:	d108      	bne.n	400cb6 <pio_handler_process+0x36>
				/* Source has PIOs whose statuses have changed */
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  400ca4:	6861      	ldr	r1, [r4, #4]
  400ca6:	4229      	tst	r1, r5
  400ca8:	d005      	beq.n	400cb6 <pio_handler_process+0x36>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  400caa:	68e3      	ldr	r3, [r4, #12]
  400cac:	4640      	mov	r0, r8
  400cae:	4798      	blx	r3
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
  400cb0:	6863      	ldr	r3, [r4, #4]
  400cb2:	ea25 0503 	bic.w	r5, r5, r3
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
  400cb6:	42b4      	cmp	r4, r6
  400cb8:	d002      	beq.n	400cc0 <pio_handler_process+0x40>
  400cba:	3410      	adds	r4, #16

	/* Check pending events */
	if (status != 0) {
		/* Find triggering source */
		i = 0;
		while (status != 0) {
  400cbc:	2d00      	cmp	r5, #0
  400cbe:	d1ee      	bne.n	400c9e <pio_handler_process+0x1e>
		}
	}

	/* Check capture events */
#if (SAM3S || SAM4S || SAM4E)
	if (pio_capture_enable_flag) {
  400cc0:	4b07      	ldr	r3, [pc, #28]	; (400ce0 <pio_handler_process+0x60>)
  400cc2:	681b      	ldr	r3, [r3, #0]
  400cc4:	b123      	cbz	r3, 400cd0 <pio_handler_process+0x50>
		if (pio_capture_handler) {
  400cc6:	4b07      	ldr	r3, [pc, #28]	; (400ce4 <pio_handler_process+0x64>)
  400cc8:	681b      	ldr	r3, [r3, #0]
  400cca:	b10b      	cbz	r3, 400cd0 <pio_handler_process+0x50>
			pio_capture_handler(p_pio);
  400ccc:	4648      	mov	r0, r9
  400cce:	4798      	blx	r3
  400cd0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  400cd4:	00400b25 	.word	0x00400b25
  400cd8:	00400b29 	.word	0x00400b29
  400cdc:	20000c38 	.word	0x20000c38
  400ce0:	20000d04 	.word	0x20000d04
  400ce4:	20000c34 	.word	0x20000c34

00400ce8 <pio_handler_set>:
 *
 * \return 0 if successful, 1 if the maximum number of sources has been defined.
 */
uint32_t pio_handler_set(Pio *p_pio, uint32_t ul_id, uint32_t ul_mask,
		uint32_t ul_attr, void (*p_handler) (uint32_t, uint32_t))
{
  400ce8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct s_interrupt_source *pSource;

	if (gs_ul_nb_sources >= MAX_INTERRUPT_SOURCES)
  400cea:	4c0c      	ldr	r4, [pc, #48]	; (400d1c <pio_handler_set+0x34>)
  400cec:	6824      	ldr	r4, [r4, #0]
  400cee:	2c06      	cmp	r4, #6
  400cf0:	d811      	bhi.n	400d16 <pio_handler_set+0x2e>
  400cf2:	4615      	mov	r5, r2
		return 1;

	/* Define new source */
	pSource = &(gs_interrupt_sources[gs_ul_nb_sources]);
	pSource->id = ul_id;
  400cf4:	4f0a      	ldr	r7, [pc, #40]	; (400d20 <pio_handler_set+0x38>)
  400cf6:	0122      	lsls	r2, r4, #4
  400cf8:	18be      	adds	r6, r7, r2
  400cfa:	50b9      	str	r1, [r7, r2]
	pSource->mask = ul_mask;
  400cfc:	6075      	str	r5, [r6, #4]
	pSource->attr = ul_attr;
  400cfe:	60b3      	str	r3, [r6, #8]
	pSource->handler = p_handler;
  400d00:	9a06      	ldr	r2, [sp, #24]
  400d02:	60f2      	str	r2, [r6, #12]
	gs_ul_nb_sources++;
  400d04:	3401      	adds	r4, #1
  400d06:	4a05      	ldr	r2, [pc, #20]	; (400d1c <pio_handler_set+0x34>)
  400d08:	6014      	str	r4, [r2, #0]

	/* Configure interrupt mode */
	pio_configure_interrupt(p_pio, ul_mask, ul_attr);
  400d0a:	4629      	mov	r1, r5
  400d0c:	461a      	mov	r2, r3
  400d0e:	4b05      	ldr	r3, [pc, #20]	; (400d24 <pio_handler_set+0x3c>)
  400d10:	4798      	blx	r3

	return 0;
  400d12:	2000      	movs	r0, #0
  400d14:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		uint32_t ul_attr, void (*p_handler) (uint32_t, uint32_t))
{
	struct s_interrupt_source *pSource;

	if (gs_ul_nb_sources >= MAX_INTERRUPT_SOURCES)
		return 1;
  400d16:	2001      	movs	r0, #1

	/* Configure interrupt mode */
	pio_configure_interrupt(p_pio, ul_mask, ul_attr);

	return 0;
}
  400d18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  400d1a:	bf00      	nop
  400d1c:	20000c30 	.word	0x20000c30
  400d20:	20000c38 	.word	0x20000c38
  400d24:	00400ae9 	.word	0x00400ae9

00400d28 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
  400d28:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
  400d2a:	4802      	ldr	r0, [pc, #8]	; (400d34 <PIOA_Handler+0xc>)
  400d2c:	210b      	movs	r1, #11
  400d2e:	4b02      	ldr	r3, [pc, #8]	; (400d38 <PIOA_Handler+0x10>)
  400d30:	4798      	blx	r3
  400d32:	bd08      	pop	{r3, pc}
  400d34:	400e0e00 	.word	0x400e0e00
  400d38:	00400c81 	.word	0x00400c81

00400d3c <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
  400d3c:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
  400d3e:	4802      	ldr	r0, [pc, #8]	; (400d48 <PIOB_Handler+0xc>)
  400d40:	210c      	movs	r1, #12
  400d42:	4b02      	ldr	r3, [pc, #8]	; (400d4c <PIOB_Handler+0x10>)
  400d44:	4798      	blx	r3
  400d46:	bd08      	pop	{r3, pc}
  400d48:	400e1000 	.word	0x400e1000
  400d4c:	00400c81 	.word	0x00400c81

00400d50 <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
  400d50:	b508      	push	{r3, lr}
	pio_handler_process(PIOC, ID_PIOC);
  400d52:	4802      	ldr	r0, [pc, #8]	; (400d5c <PIOC_Handler+0xc>)
  400d54:	210d      	movs	r1, #13
  400d56:	4b02      	ldr	r3, [pc, #8]	; (400d60 <PIOC_Handler+0x10>)
  400d58:	4798      	blx	r3
  400d5a:	bd08      	pop	{r3, pc}
  400d5c:	400e1200 	.word	0x400e1200
  400d60:	00400c81 	.word	0x00400c81

00400d64 <pmc_switch_mck_to_pllbck>:
 */
uint32_t pmc_switch_mck_to_pllbck(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
  400d64:	4a17      	ldr	r2, [pc, #92]	; (400dc4 <pmc_switch_mck_to_pllbck+0x60>)
  400d66:	6b13      	ldr	r3, [r2, #48]	; 0x30
  400d68:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  400d6c:	4318      	orrs	r0, r3
  400d6e:	6310      	str	r0, [r2, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  400d70:	6e93      	ldr	r3, [r2, #104]	; 0x68
  400d72:	f013 0f08 	tst.w	r3, #8
  400d76:	d003      	beq.n	400d80 <pmc_switch_mck_to_pllbck+0x1c>
  400d78:	e009      	b.n	400d8e <pmc_switch_mck_to_pllbck+0x2a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  400d7a:	3b01      	subs	r3, #1
  400d7c:	d103      	bne.n	400d86 <pmc_switch_mck_to_pllbck+0x22>
  400d7e:	e01c      	b.n	400dba <pmc_switch_mck_to_pllbck+0x56>
uint32_t pmc_switch_mck_to_pllbck(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  400d80:	f44f 6300 	mov.w	r3, #2048	; 0x800
  400d84:	490f      	ldr	r1, [pc, #60]	; (400dc4 <pmc_switch_mck_to_pllbck+0x60>)
  400d86:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  400d88:	f012 0f08 	tst.w	r2, #8
  400d8c:	d0f5      	beq.n	400d7a <pmc_switch_mck_to_pllbck+0x16>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
  400d8e:	4b0d      	ldr	r3, [pc, #52]	; (400dc4 <pmc_switch_mck_to_pllbck+0x60>)
  400d90:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  400d92:	f042 0203 	orr.w	r2, r2, #3
  400d96:	631a      	str	r2, [r3, #48]	; 0x30
			PMC_MCKR_CSS_PLLB_CLK;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  400d98:	6e98      	ldr	r0, [r3, #104]	; 0x68
  400d9a:	f010 0008 	ands.w	r0, r0, #8
  400d9e:	d004      	beq.n	400daa <pmc_switch_mck_to_pllbck+0x46>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	return 0;
  400da0:	2000      	movs	r0, #0
  400da2:	4770      	bx	lr

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLB_CLK;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
  400da4:	3b01      	subs	r3, #1
  400da6:	d103      	bne.n	400db0 <pmc_switch_mck_to_pllbck+0x4c>
  400da8:	e009      	b.n	400dbe <pmc_switch_mck_to_pllbck+0x5a>
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLB_CLK;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  400daa:	f44f 6300 	mov.w	r3, #2048	; 0x800
  400dae:	4905      	ldr	r1, [pc, #20]	; (400dc4 <pmc_switch_mck_to_pllbck+0x60>)
  400db0:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  400db2:	f012 0f08 	tst.w	r2, #8
  400db6:	d0f5      	beq.n	400da4 <pmc_switch_mck_to_pllbck+0x40>
  400db8:	4770      	bx	lr

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
			return 1;
  400dba:	2001      	movs	r0, #1
  400dbc:	4770      	bx	lr
	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLB_CLK;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
			return 1;
  400dbe:	2001      	movs	r0, #1
		}
	}

	return 0;
}
  400dc0:	4770      	bx	lr
  400dc2:	bf00      	nop
  400dc4:	400e0400 	.word	0x400e0400

00400dc8 <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
  400dc8:	b138      	cbz	r0, 400dda <pmc_switch_mainck_to_xtal+0x12>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  400dca:	4911      	ldr	r1, [pc, #68]	; (400e10 <pmc_switch_mainck_to_xtal+0x48>)
  400dcc:	6a0b      	ldr	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  400dce:	4a11      	ldr	r2, [pc, #68]	; (400e14 <pmc_switch_mainck_to_xtal+0x4c>)
  400dd0:	401a      	ands	r2, r3
  400dd2:	4b11      	ldr	r3, [pc, #68]	; (400e18 <pmc_switch_mainck_to_xtal+0x50>)
  400dd4:	4313      	orrs	r3, r2
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  400dd6:	620b      	str	r3, [r1, #32]
  400dd8:	4770      	bx	lr
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  400dda:	4a0d      	ldr	r2, [pc, #52]	; (400e10 <pmc_switch_mainck_to_xtal+0x48>)
  400ddc:	6a13      	ldr	r3, [r2, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  400dde:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
  400de2:	f023 0303 	bic.w	r3, r3, #3
  400de6:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  400dea:	f043 0301 	orr.w	r3, r3, #1
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
  400dee:	0209      	lsls	r1, r1, #8
  400df0:	b289      	uxth	r1, r1
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  400df2:	430b      	orrs	r3, r1
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  400df4:	6213      	str	r3, [r2, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  400df6:	6e93      	ldr	r3, [r2, #104]	; 0x68
  400df8:	f013 0f01 	tst.w	r3, #1
  400dfc:	d0fb      	beq.n	400df6 <pmc_switch_mainck_to_xtal+0x2e>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
  400dfe:	4a04      	ldr	r2, [pc, #16]	; (400e10 <pmc_switch_mainck_to_xtal+0x48>)
  400e00:	6a13      	ldr	r3, [r2, #32]
  400e02:	f043 739b 	orr.w	r3, r3, #20316160	; 0x1360000
  400e06:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
  400e0a:	6213      	str	r3, [r2, #32]
  400e0c:	4770      	bx	lr
  400e0e:	bf00      	nop
  400e10:	400e0400 	.word	0x400e0400
  400e14:	fec8fffc 	.word	0xfec8fffc
  400e18:	01370002 	.word	0x01370002

00400e1c <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
  400e1c:	4b02      	ldr	r3, [pc, #8]	; (400e28 <pmc_osc_is_ready_mainck+0xc>)
  400e1e:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  400e20:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
  400e24:	4770      	bx	lr
  400e26:	bf00      	nop
  400e28:	400e0400 	.word	0x400e0400

00400e2c <pmc_enable_pllack>:
 * \param mula PLLA multiplier.
 * \param pllacount PLLA counter.
 * \param diva Divider.
 */
void pmc_enable_pllack(uint32_t mula, uint32_t pllacount, uint32_t diva)
{
  400e2c:	b410      	push	{r4}
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
  400e2e:	4c0c      	ldr	r4, [pc, #48]	; (400e60 <pmc_enable_pllack+0x34>)
  400e30:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
  400e34:	62a3      	str	r3, [r4, #40]	; 0x28
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_PLLAEN(diva) |
			CKGR_PLLAR_PLLACOUNT(pllacount) | CKGR_PLLAR_MULA(mula);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_DIVA(diva) |
			CKGR_PLLAR_PLLACOUNT(pllacount) | CKGR_PLLAR_MULA(mula);
  400e36:	4b0b      	ldr	r3, [pc, #44]	; (400e64 <pmc_enable_pllack+0x38>)
  400e38:	ea03 4000 	and.w	r0, r3, r0, lsl #16
  400e3c:	f040 5000 	orr.w	r0, r0, #536870912	; 0x20000000

#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_PLLAEN(diva) |
			CKGR_PLLAR_PLLACOUNT(pllacount) | CKGR_PLLAR_MULA(mula);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_DIVA(diva) |
  400e40:	b2d2      	uxtb	r2, r2
  400e42:	4302      	orrs	r2, r0
			CKGR_PLLAR_PLLACOUNT(pllacount) | CKGR_PLLAR_MULA(mula);
  400e44:	0209      	lsls	r1, r1, #8
  400e46:	f401 517c 	and.w	r1, r1, #16128	; 0x3f00
  400e4a:	430a      	orrs	r2, r1

#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_PLLAEN(diva) |
			CKGR_PLLAR_PLLACOUNT(pllacount) | CKGR_PLLAR_MULA(mula);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_DIVA(diva) |
  400e4c:	62a2      	str	r2, [r4, #40]	; 0x28
			CKGR_PLLAR_PLLACOUNT(pllacount) | CKGR_PLLAR_MULA(mula);
#endif
	while ((PMC->PMC_SR & PMC_SR_LOCKA) == 0);
  400e4e:	4622      	mov	r2, r4
  400e50:	6e93      	ldr	r3, [r2, #104]	; 0x68
  400e52:	f013 0f02 	tst.w	r3, #2
  400e56:	d0fb      	beq.n	400e50 <pmc_enable_pllack+0x24>
}
  400e58:	f85d 4b04 	ldr.w	r4, [sp], #4
  400e5c:	4770      	bx	lr
  400e5e:	bf00      	nop
  400e60:	400e0400 	.word	0x400e0400
  400e64:	07ff0000 	.word	0x07ff0000

00400e68 <pmc_disable_pllbck>:
/**
 * \brief Disable PLLB clock.
 */
void pmc_disable_pllbck(void)
{
	PMC->CKGR_PLLBR = CKGR_PLLBR_MULB(0);
  400e68:	2200      	movs	r2, #0
  400e6a:	4b01      	ldr	r3, [pc, #4]	; (400e70 <pmc_disable_pllbck+0x8>)
  400e6c:	62da      	str	r2, [r3, #44]	; 0x2c
  400e6e:	4770      	bx	lr
  400e70:	400e0400 	.word	0x400e0400

00400e74 <pmc_is_locked_pllbck>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllbck(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKB);
  400e74:	4b02      	ldr	r3, [pc, #8]	; (400e80 <pmc_is_locked_pllbck+0xc>)
  400e76:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  400e78:	f000 0004 	and.w	r0, r0, #4
  400e7c:	4770      	bx	lr
  400e7e:	bf00      	nop
  400e80:	400e0400 	.word	0x400e0400

00400e84 <pmc_enable_periph_clk>:
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
  400e84:	2822      	cmp	r0, #34	; 0x22
  400e86:	d81e      	bhi.n	400ec6 <pmc_enable_periph_clk+0x42>
		return 1;
	}

	if (ul_id < 32) {
  400e88:	281f      	cmp	r0, #31
  400e8a:	d80c      	bhi.n	400ea6 <pmc_enable_periph_clk+0x22>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
  400e8c:	4b11      	ldr	r3, [pc, #68]	; (400ed4 <pmc_enable_periph_clk+0x50>)
  400e8e:	699a      	ldr	r2, [r3, #24]
  400e90:	2301      	movs	r3, #1
  400e92:	4083      	lsls	r3, r0
  400e94:	401a      	ands	r2, r3
  400e96:	4293      	cmp	r3, r2
  400e98:	d017      	beq.n	400eca <pmc_enable_periph_clk+0x46>
			PMC->PMC_PCER0 = 1 << ul_id;
  400e9a:	2301      	movs	r3, #1
  400e9c:	4083      	lsls	r3, r0
  400e9e:	4a0d      	ldr	r2, [pc, #52]	; (400ed4 <pmc_enable_periph_clk+0x50>)
  400ea0:	6113      	str	r3, [r2, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
  400ea2:	2000      	movs	r0, #0
  400ea4:	4770      	bx	lr
			PMC->PMC_PCER0 = 1 << ul_id;
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP || SAMG55 || SAMV71 || SAMV70 || SAME70 || SAMS70)
	} else {
		ul_id -= 32;
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
  400ea6:	4b0b      	ldr	r3, [pc, #44]	; (400ed4 <pmc_enable_periph_clk+0x50>)
  400ea8:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
			PMC->PMC_PCER0 = 1 << ul_id;
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP || SAMG55 || SAMV71 || SAMV70 || SAME70 || SAMS70)
	} else {
		ul_id -= 32;
  400eac:	3820      	subs	r0, #32
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
  400eae:	2301      	movs	r3, #1
  400eb0:	4083      	lsls	r3, r0
  400eb2:	401a      	ands	r2, r3
  400eb4:	4293      	cmp	r3, r2
  400eb6:	d00a      	beq.n	400ece <pmc_enable_periph_clk+0x4a>
			PMC->PMC_PCER1 = 1 << ul_id;
  400eb8:	2301      	movs	r3, #1
  400eba:	4083      	lsls	r3, r0
  400ebc:	4a05      	ldr	r2, [pc, #20]	; (400ed4 <pmc_enable_periph_clk+0x50>)
  400ebe:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
		}
#endif
	}

	return 0;
  400ec2:	2000      	movs	r0, #0
  400ec4:	4770      	bx	lr
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
		return 1;
  400ec6:	2001      	movs	r0, #1
  400ec8:	4770      	bx	lr
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
  400eca:	2000      	movs	r0, #0
  400ecc:	4770      	bx	lr
  400ece:	2000      	movs	r0, #0
}
  400ed0:	4770      	bx	lr
  400ed2:	bf00      	nop
  400ed4:	400e0400 	.word	0x400e0400

00400ed8 <twi_set_speed>:
uint32_t twi_set_speed(Twi *p_twi, uint32_t ul_speed, uint32_t ul_mck)
{
	uint32_t ckdiv = 0;
	uint32_t c_lh_div;

	if (ul_speed > I2C_FAST_MODE_SPEED) {
  400ed8:	4b0f      	ldr	r3, [pc, #60]	; (400f18 <twi_set_speed+0x40>)
  400eda:	4299      	cmp	r1, r3
  400edc:	d819      	bhi.n	400f12 <twi_set_speed+0x3a>
		return FAIL;
	}

	c_lh_div = ul_mck / (ul_speed * TWI_CLK_DIVIDER) - TWI_CLK_CALC_ARGU;
  400ede:	0049      	lsls	r1, r1, #1
  400ee0:	fbb2 f2f1 	udiv	r2, r2, r1
  400ee4:	3a04      	subs	r2, #4

	/* cldiv must fit in 8 bits, ckdiv must fit in 3 bits */
	while ((c_lh_div > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
  400ee6:	2aff      	cmp	r2, #255	; 0xff
  400ee8:	d907      	bls.n	400efa <twi_set_speed+0x22>
  400eea:	2300      	movs	r3, #0
		/* Increase clock divider */
		ckdiv++;
  400eec:	3301      	adds	r3, #1
		/* Divide cldiv value */
		c_lh_div /= TWI_CLK_DIVIDER;
  400eee:	0852      	lsrs	r2, r2, #1
	}

	c_lh_div = ul_mck / (ul_speed * TWI_CLK_DIVIDER) - TWI_CLK_CALC_ARGU;

	/* cldiv must fit in 8 bits, ckdiv must fit in 3 bits */
	while ((c_lh_div > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
  400ef0:	2aff      	cmp	r2, #255	; 0xff
  400ef2:	d903      	bls.n	400efc <twi_set_speed+0x24>
  400ef4:	2b07      	cmp	r3, #7
  400ef6:	d1f9      	bne.n	400eec <twi_set_speed+0x14>
  400ef8:	e000      	b.n	400efc <twi_set_speed+0x24>
 * \retval PASS New speed setting is accepted.
 * \retval FAIL New speed setting is rejected.
 */
uint32_t twi_set_speed(Twi *p_twi, uint32_t ul_speed, uint32_t ul_mck)
{
	uint32_t ckdiv = 0;
  400efa:	2300      	movs	r3, #0
		c_lh_div /= TWI_CLK_DIVIDER;
	}

	/* set clock waveform generator register */
	p_twi->TWI_CWGR =
			TWI_CWGR_CLDIV(c_lh_div) | TWI_CWGR_CHDIV(c_lh_div) |
  400efc:	0211      	lsls	r1, r2, #8
  400efe:	b289      	uxth	r1, r1
			TWI_CWGR_CKDIV(ckdiv);
  400f00:	041b      	lsls	r3, r3, #16
  400f02:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
  400f06:	430b      	orrs	r3, r1
		c_lh_div /= TWI_CLK_DIVIDER;
	}

	/* set clock waveform generator register */
	p_twi->TWI_CWGR =
			TWI_CWGR_CLDIV(c_lh_div) | TWI_CWGR_CHDIV(c_lh_div) |
  400f08:	b2d2      	uxtb	r2, r2
  400f0a:	431a      	orrs	r2, r3
		/* Divide cldiv value */
		c_lh_div /= TWI_CLK_DIVIDER;
	}

	/* set clock waveform generator register */
	p_twi->TWI_CWGR =
  400f0c:	6102      	str	r2, [r0, #16]
			TWI_CWGR_CLDIV(c_lh_div) | TWI_CWGR_CHDIV(c_lh_div) |
			TWI_CWGR_CKDIV(ckdiv);

	return PASS;
  400f0e:	2000      	movs	r0, #0
  400f10:	4770      	bx	lr
{
	uint32_t ckdiv = 0;
	uint32_t c_lh_div;

	if (ul_speed > I2C_FAST_MODE_SPEED) {
		return FAIL;
  400f12:	2001      	movs	r0, #1
	p_twi->TWI_CWGR =
			TWI_CWGR_CLDIV(c_lh_div) | TWI_CWGR_CHDIV(c_lh_div) |
			TWI_CWGR_CKDIV(ckdiv);

	return PASS;
}
  400f14:	4770      	bx	lr
  400f16:	bf00      	nop
  400f18:	00061a80 	.word	0x00061a80

00400f1c <twi_master_init>:
 * \param p_opt Options for initializing the TWI module (see \ref twi_options_t).
 *
 * \return TWI_SUCCESS if initialization is complete, error code otherwise.
 */
uint32_t twi_master_init(Twi *p_twi, const twi_options_t *p_opt)
{
  400f1c:	b538      	push	{r3, r4, r5, lr}
  400f1e:	4604      	mov	r4, r0
  400f20:	460d      	mov	r5, r1
	uint32_t status = TWI_SUCCESS;

	/* Disable TWI interrupts */
	p_twi->TWI_IDR = ~0UL;
  400f22:	f04f 33ff 	mov.w	r3, #4294967295
  400f26:	6283      	str	r3, [r0, #40]	; 0x28

	/* Dummy read in status register */
	p_twi->TWI_SR;
  400f28:	6a03      	ldr	r3, [r0, #32]
 * \param p_twi Pointer to a TWI instance.
 */
void twi_reset(Twi *p_twi)
{
	/* Set SWRST bit to reset TWI peripheral */
	p_twi->TWI_CR = TWI_CR_SWRST;
  400f2a:	2380      	movs	r3, #128	; 0x80
  400f2c:	6003      	str	r3, [r0, #0]
	p_twi->TWI_RHR;
  400f2e:	6b03      	ldr	r3, [r0, #48]	; 0x30
 * \param p_twi Pointer to a TWI instance.
 */
void twi_enable_master_mode(Twi *p_twi)
{
	/* Set Master Disable bit and Slave Disable bit */
	p_twi->TWI_CR = TWI_CR_MSDIS;
  400f30:	2308      	movs	r3, #8
  400f32:	6003      	str	r3, [r0, #0]
	p_twi->TWI_CR = TWI_CR_SVDIS;
  400f34:	2320      	movs	r3, #32
  400f36:	6003      	str	r3, [r0, #0]

	/* Set Master Enable bit */
	p_twi->TWI_CR = TWI_CR_MSEN;
  400f38:	2304      	movs	r3, #4
  400f3a:	6003      	str	r3, [r0, #0]
	twi_reset(p_twi);

	twi_enable_master_mode(p_twi);

	/* Select the speed */
	if (twi_set_speed(p_twi, p_opt->speed, p_opt->master_clk) == FAIL) {
  400f3c:	6849      	ldr	r1, [r1, #4]
  400f3e:	682a      	ldr	r2, [r5, #0]
  400f40:	4b05      	ldr	r3, [pc, #20]	; (400f58 <twi_master_init+0x3c>)
  400f42:	4798      	blx	r3
  400f44:	2801      	cmp	r0, #1
  400f46:	bf14      	ite	ne
  400f48:	2000      	movne	r0, #0
  400f4a:	2001      	moveq	r0, #1
		/* The desired speed setting is rejected */
		status = TWI_INVALID_ARGUMENT;
	}

	if (p_opt->smbus == 1) {
  400f4c:	7a6b      	ldrb	r3, [r5, #9]
  400f4e:	2b01      	cmp	r3, #1
		p_twi->TWI_CR = TWI_CR_QUICK;
  400f50:	bf04      	itt	eq
  400f52:	2340      	moveq	r3, #64	; 0x40
  400f54:	6023      	streq	r3, [r4, #0]
	}

	return status;
}
  400f56:	bd38      	pop	{r3, r4, r5, pc}
  400f58:	00400ed9 	.word	0x00400ed9

00400f5c <twi_master_read>:
 * \param p_packet Packet information and data (see \ref twi_packet_t).
 *
 * \return TWI_SUCCESS if all bytes were read, error code otherwise.
 */
uint32_t twi_master_read(Twi *p_twi, twi_packet_t *p_packet)
{
  400f5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint32_t status;
	uint32_t cnt = p_packet->length;
  400f60:	68ca      	ldr	r2, [r1, #12]
	uint8_t *buffer = p_packet->buffer;
  400f62:	688d      	ldr	r5, [r1, #8]
	uint8_t stop_sent = 0;
	uint32_t timeout = TWI_TIMEOUT;;
	
	/* Check argument */
	if (cnt == 0) {
  400f64:	2a00      	cmp	r2, #0
  400f66:	d048      	beq.n	400ffa <twi_master_read+0x9e>
		return TWI_INVALID_ARGUMENT;
	}

	/* Set read mode, slave address and 3 internal address byte lengths */
	p_twi->TWI_MMR = 0;
  400f68:	2600      	movs	r6, #0
  400f6a:	6046      	str	r6, [r0, #4]
	p_twi->TWI_MMR = TWI_MMR_MREAD | TWI_MMR_DADR(p_packet->chip) |
			((p_packet->addr_length << TWI_MMR_IADRSZ_Pos) &
  400f6c:	684b      	ldr	r3, [r1, #4]
  400f6e:	021b      	lsls	r3, r3, #8
  400f70:	f403 7340 	and.w	r3, r3, #768	; 0x300
  400f74:	f443 5480 	orr.w	r4, r3, #4096	; 0x1000
		return TWI_INVALID_ARGUMENT;
	}

	/* Set read mode, slave address and 3 internal address byte lengths */
	p_twi->TWI_MMR = 0;
	p_twi->TWI_MMR = TWI_MMR_MREAD | TWI_MMR_DADR(p_packet->chip) |
  400f78:	7c0b      	ldrb	r3, [r1, #16]
  400f7a:	041b      	lsls	r3, r3, #16
  400f7c:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
  400f80:	4323      	orrs	r3, r4
  400f82:	6043      	str	r3, [r0, #4]
			((p_packet->addr_length << TWI_MMR_IADRSZ_Pos) &
			TWI_MMR_IADRSZ_Msk);

	/* Set internal address for remote chip */
	p_twi->TWI_IADR = 0;
  400f84:	60c6      	str	r6, [r0, #12]
	p_twi->TWI_IADR = twi_mk_addr(p_packet->addr, p_packet->addr_length);
  400f86:	684c      	ldr	r4, [r1, #4]
 */
static uint32_t twi_mk_addr(const uint8_t *addr, int len)
{
	uint32_t val;

	if (len == 0)
  400f88:	b15c      	cbz	r4, 400fa2 <twi_master_read+0x46>
		return 0;

	val = addr[0];
  400f8a:	780b      	ldrb	r3, [r1, #0]
	if (len > 1) {
  400f8c:	2c01      	cmp	r4, #1
		val <<= 8;
		val |= addr[1];
  400f8e:	bfc4      	itt	gt
  400f90:	784e      	ldrbgt	r6, [r1, #1]
  400f92:	ea46 2303 	orrgt.w	r3, r6, r3, lsl #8
	}
	if (len > 2) {
  400f96:	2c02      	cmp	r4, #2
  400f98:	dd04      	ble.n	400fa4 <twi_master_read+0x48>
		val <<= 8;
		val |= addr[2];
  400f9a:	7889      	ldrb	r1, [r1, #2]
  400f9c:	ea41 2303 	orr.w	r3, r1, r3, lsl #8
  400fa0:	e000      	b.n	400fa4 <twi_master_read+0x48>
static uint32_t twi_mk_addr(const uint8_t *addr, int len)
{
	uint32_t val;

	if (len == 0)
		return 0;
  400fa2:	2300      	movs	r3, #0
			((p_packet->addr_length << TWI_MMR_IADRSZ_Pos) &
			TWI_MMR_IADRSZ_Msk);

	/* Set internal address for remote chip */
	p_twi->TWI_IADR = 0;
	p_twi->TWI_IADR = twi_mk_addr(p_packet->addr, p_packet->addr_length);
  400fa4:	60c3      	str	r3, [r0, #12]

	/* Send a START condition */
	if (cnt == 1) {
  400fa6:	2a01      	cmp	r2, #1
  400fa8:	d103      	bne.n	400fb2 <twi_master_read+0x56>
		p_twi->TWI_CR = TWI_CR_START | TWI_CR_STOP;
  400faa:	2303      	movs	r3, #3
  400fac:	6003      	str	r3, [r0, #0]
		stop_sent = 1;
  400fae:	2701      	movs	r7, #1
  400fb0:	e02f      	b.n	401012 <twi_master_read+0xb6>
	} else {
		p_twi->TWI_CR = TWI_CR_START;
  400fb2:	2301      	movs	r3, #1
  400fb4:	6003      	str	r3, [r0, #0]
		stop_sent = 0;
  400fb6:	2700      	movs	r7, #0
  400fb8:	e02b      	b.n	401012 <twi_master_read+0xb6>
		if (cnt == 1  && !stop_sent) {
			p_twi->TWI_CR = TWI_CR_STOP;
			stop_sent = 1;
		}

		if (!(status & TWI_SR_RXRDY)) {
  400fba:	4621      	mov	r1, r4
		p_twi->TWI_CR = TWI_CR_START;
		stop_sent = 0;
	}

	while (cnt > 0) {
		status = p_twi->TWI_SR;
  400fbc:	6a03      	ldr	r3, [r0, #32]
		if (status & TWI_SR_NACK) {
  400fbe:	f413 7f80 	tst.w	r3, #256	; 0x100
  400fc2:	d11d      	bne.n	401000 <twi_master_read+0xa4>
			return TWI_RECEIVE_NACK;
		}

		if (!timeout--) {
  400fc4:	1e4c      	subs	r4, r1, #1
  400fc6:	b1f1      	cbz	r1, 401006 <twi_master_read+0xaa>
			return TWI_ERROR_TIMEOUT;
		}
				
		/* Last byte ? */
		if (cnt == 1  && !stop_sent) {
  400fc8:	2a01      	cmp	r2, #1
  400fca:	d104      	bne.n	400fd6 <twi_master_read+0x7a>
  400fcc:	bb77      	cbnz	r7, 40102c <twi_master_read+0xd0>
			p_twi->TWI_CR = TWI_CR_STOP;
  400fce:	f8c0 8000 	str.w	r8, [r0]
			stop_sent = 1;
  400fd2:	4667      	mov	r7, ip
  400fd4:	e02a      	b.n	40102c <twi_master_read+0xd0>
		}

		if (!(status & TWI_SR_RXRDY)) {
  400fd6:	f013 0f02 	tst.w	r3, #2
  400fda:	d005      	beq.n	400fe8 <twi_master_read+0x8c>
			continue;
		}
		*buffer++ = p_twi->TWI_RHR;
  400fdc:	6b03      	ldr	r3, [r0, #48]	; 0x30
  400fde:	702b      	strb	r3, [r5, #0]

		cnt--;
  400fe0:	3a01      	subs	r2, #1
		}

		if (!(status & TWI_SR_RXRDY)) {
			continue;
		}
		*buffer++ = p_twi->TWI_RHR;
  400fe2:	3501      	adds	r5, #1

		cnt--;
		timeout = TWI_TIMEOUT;
  400fe4:	4631      	mov	r1, r6
  400fe6:	e000      	b.n	400fea <twi_master_read+0x8e>
  400fe8:	4621      	mov	r1, r4
	} else {
		p_twi->TWI_CR = TWI_CR_START;
		stop_sent = 0;
	}

	while (cnt > 0) {
  400fea:	2a00      	cmp	r2, #0
  400fec:	d1e6      	bne.n	400fbc <twi_master_read+0x60>

		cnt--;
		timeout = TWI_TIMEOUT;
	}

	while (!(p_twi->TWI_SR & TWI_SR_TXCOMP)) {
  400fee:	6a03      	ldr	r3, [r0, #32]
  400ff0:	f013 0f01 	tst.w	r3, #1
  400ff4:	d0fb      	beq.n	400fee <twi_master_read+0x92>
	}

	p_twi->TWI_SR;
  400ff6:	6a03      	ldr	r3, [r0, #32]

	return TWI_SUCCESS;
  400ff8:	e01c      	b.n	401034 <twi_master_read+0xd8>
	uint8_t stop_sent = 0;
	uint32_t timeout = TWI_TIMEOUT;;
	
	/* Check argument */
	if (cnt == 0) {
		return TWI_INVALID_ARGUMENT;
  400ffa:	f04f 0e01 	mov.w	lr, #1
  400ffe:	e019      	b.n	401034 <twi_master_read+0xd8>
	}

	while (cnt > 0) {
		status = p_twi->TWI_SR;
		if (status & TWI_SR_NACK) {
			return TWI_RECEIVE_NACK;
  401000:	f04f 0e05 	mov.w	lr, #5
  401004:	e016      	b.n	401034 <twi_master_read+0xd8>
		}

		if (!timeout--) {
			return TWI_ERROR_TIMEOUT;
  401006:	f04f 0e09 	mov.w	lr, #9
  40100a:	e013      	b.n	401034 <twi_master_read+0xd8>
	}

	while (cnt > 0) {
		status = p_twi->TWI_SR;
		if (status & TWI_SR_NACK) {
			return TWI_RECEIVE_NACK;
  40100c:	f04f 0e05 	mov.w	lr, #5
  401010:	e010      	b.n	401034 <twi_master_read+0xd8>
		p_twi->TWI_CR = TWI_CR_START;
		stop_sent = 0;
	}

	while (cnt > 0) {
		status = p_twi->TWI_SR;
  401012:	6a03      	ldr	r3, [r0, #32]
		if (status & TWI_SR_NACK) {
  401014:	f413 7e80 	ands.w	lr, r3, #256	; 0x100
  401018:	d1f8      	bne.n	40100c <twi_master_read+0xb0>
  40101a:	f643 2497 	movw	r4, #14999	; 0x3a97
			continue;
		}
		*buffer++ = p_twi->TWI_RHR;

		cnt--;
		timeout = TWI_TIMEOUT;
  40101e:	f643 2698 	movw	r6, #15000	; 0x3a98
			return TWI_ERROR_TIMEOUT;
		}
				
		/* Last byte ? */
		if (cnt == 1  && !stop_sent) {
			p_twi->TWI_CR = TWI_CR_STOP;
  401022:	f04f 0802 	mov.w	r8, #2
			stop_sent = 1;
  401026:	f04f 0c01 	mov.w	ip, #1
  40102a:	e7cd      	b.n	400fc8 <twi_master_read+0x6c>
		}

		if (!(status & TWI_SR_RXRDY)) {
  40102c:	f013 0f02 	tst.w	r3, #2
  401030:	d0c3      	beq.n	400fba <twi_master_read+0x5e>
  401032:	e7d3      	b.n	400fdc <twi_master_read+0x80>
	}

	p_twi->TWI_SR;

	return TWI_SUCCESS;
}
  401034:	4670      	mov	r0, lr
  401036:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40103a:	bf00      	nop

0040103c <twi_master_write>:
 * \param p_packet Packet information and data (see \ref twi_packet_t).
 *
 * \return TWI_SUCCESS if all bytes were written, error code otherwise.
 */
uint32_t twi_master_write(Twi *p_twi, twi_packet_t *p_packet)
{
  40103c:	4603      	mov	r3, r0
	uint32_t status;
	uint32_t cnt = p_packet->length;
  40103e:	68ca      	ldr	r2, [r1, #12]
	uint8_t *buffer = p_packet->buffer;
  401040:	6888      	ldr	r0, [r1, #8]

	/* Check argument */
	if (cnt == 0) {
  401042:	2a00      	cmp	r2, #0
  401044:	d040      	beq.n	4010c8 <twi_master_write+0x8c>
 * \param p_packet Packet information and data (see \ref twi_packet_t).
 *
 * \return TWI_SUCCESS if all bytes were written, error code otherwise.
 */
uint32_t twi_master_write(Twi *p_twi, twi_packet_t *p_packet)
{
  401046:	b470      	push	{r4, r5, r6}
	if (cnt == 0) {
		return TWI_INVALID_ARGUMENT;
	}

	/* Set write mode, slave address and 3 internal address byte lengths */
	p_twi->TWI_MMR = 0;
  401048:	2600      	movs	r6, #0
  40104a:	605e      	str	r6, [r3, #4]
	p_twi->TWI_MMR = TWI_MMR_DADR(p_packet->chip) |
  40104c:	7c0c      	ldrb	r4, [r1, #16]
  40104e:	0424      	lsls	r4, r4, #16
  401050:	f404 05fe 	and.w	r5, r4, #8323072	; 0x7f0000
			((p_packet->addr_length << TWI_MMR_IADRSZ_Pos) &
  401054:	684c      	ldr	r4, [r1, #4]
  401056:	0224      	lsls	r4, r4, #8
  401058:	f404 7440 	and.w	r4, r4, #768	; 0x300
		return TWI_INVALID_ARGUMENT;
	}

	/* Set write mode, slave address and 3 internal address byte lengths */
	p_twi->TWI_MMR = 0;
	p_twi->TWI_MMR = TWI_MMR_DADR(p_packet->chip) |
  40105c:	432c      	orrs	r4, r5
  40105e:	605c      	str	r4, [r3, #4]
			((p_packet->addr_length << TWI_MMR_IADRSZ_Pos) &
			TWI_MMR_IADRSZ_Msk);

	/* Set internal address for remote chip */
	p_twi->TWI_IADR = 0;
  401060:	60de      	str	r6, [r3, #12]
	p_twi->TWI_IADR = twi_mk_addr(p_packet->addr, p_packet->addr_length);
  401062:	684d      	ldr	r5, [r1, #4]
 */
static uint32_t twi_mk_addr(const uint8_t *addr, int len)
{
	uint32_t val;

	if (len == 0)
  401064:	b15d      	cbz	r5, 40107e <twi_master_write+0x42>
		return 0;

	val = addr[0];
  401066:	780c      	ldrb	r4, [r1, #0]
	if (len > 1) {
  401068:	2d01      	cmp	r5, #1
		val <<= 8;
		val |= addr[1];
  40106a:	bfc4      	itt	gt
  40106c:	784e      	ldrbgt	r6, [r1, #1]
  40106e:	ea46 2404 	orrgt.w	r4, r6, r4, lsl #8
	}
	if (len > 2) {
  401072:	2d02      	cmp	r5, #2
  401074:	dd04      	ble.n	401080 <twi_master_write+0x44>
		val <<= 8;
		val |= addr[2];
  401076:	7889      	ldrb	r1, [r1, #2]
  401078:	ea41 2404 	orr.w	r4, r1, r4, lsl #8
  40107c:	e000      	b.n	401080 <twi_master_write+0x44>
static uint32_t twi_mk_addr(const uint8_t *addr, int len)
{
	uint32_t val;

	if (len == 0)
		return 0;
  40107e:	2400      	movs	r4, #0
			((p_packet->addr_length << TWI_MMR_IADRSZ_Pos) &
			TWI_MMR_IADRSZ_Msk);

	/* Set internal address for remote chip */
	p_twi->TWI_IADR = 0;
	p_twi->TWI_IADR = twi_mk_addr(p_packet->addr, p_packet->addr_length);
  401080:	60dc      	str	r4, [r3, #12]
  401082:	e00b      	b.n	40109c <twi_master_write+0x60>

	/* Send all bytes */
	while (cnt > 0) {
		status = p_twi->TWI_SR;
  401084:	6a19      	ldr	r1, [r3, #32]
		if (status & TWI_SR_NACK) {
  401086:	f411 7f80 	tst.w	r1, #256	; 0x100
  40108a:	d11f      	bne.n	4010cc <twi_master_write+0x90>
			return TWI_RECEIVE_NACK;
		}

		if (!(status & TWI_SR_TXRDY)) {
  40108c:	f011 0f04 	tst.w	r1, #4
  401090:	d0f8      	beq.n	401084 <twi_master_write+0x48>
			continue;
		}
		p_twi->TWI_THR = *buffer++;
  401092:	f810 1b01 	ldrb.w	r1, [r0], #1
  401096:	6359      	str	r1, [r3, #52]	; 0x34
	/* Set internal address for remote chip */
	p_twi->TWI_IADR = 0;
	p_twi->TWI_IADR = twi_mk_addr(p_packet->addr, p_packet->addr_length);

	/* Send all bytes */
	while (cnt > 0) {
  401098:	3a01      	subs	r2, #1
  40109a:	d007      	beq.n	4010ac <twi_master_write+0x70>
		status = p_twi->TWI_SR;
  40109c:	6a19      	ldr	r1, [r3, #32]
		if (status & TWI_SR_NACK) {
  40109e:	f411 7f80 	tst.w	r1, #256	; 0x100
  4010a2:	d115      	bne.n	4010d0 <twi_master_write+0x94>
			return TWI_RECEIVE_NACK;
		}

		if (!(status & TWI_SR_TXRDY)) {
  4010a4:	f011 0f04 	tst.w	r1, #4
  4010a8:	d0ec      	beq.n	401084 <twi_master_write+0x48>
  4010aa:	e7f2      	b.n	401092 <twi_master_write+0x56>

		cnt--;
	}

	while (1) {
		status = p_twi->TWI_SR;
  4010ac:	6a1a      	ldr	r2, [r3, #32]
		if (status & TWI_SR_NACK) {
  4010ae:	f412 7080 	ands.w	r0, r2, #256	; 0x100
  4010b2:	d10f      	bne.n	4010d4 <twi_master_write+0x98>
			return TWI_RECEIVE_NACK;
		}

		if (status & TWI_SR_TXRDY) {
  4010b4:	f012 0f04 	tst.w	r2, #4
  4010b8:	d0f8      	beq.n	4010ac <twi_master_write+0x70>
			break;
		}
	}

	p_twi->TWI_CR = TWI_CR_STOP;
  4010ba:	2202      	movs	r2, #2
  4010bc:	601a      	str	r2, [r3, #0]

	while (!(p_twi->TWI_SR & TWI_SR_TXCOMP)) {
  4010be:	6a1a      	ldr	r2, [r3, #32]
  4010c0:	f012 0f01 	tst.w	r2, #1
  4010c4:	d0fb      	beq.n	4010be <twi_master_write+0x82>
  4010c6:	e006      	b.n	4010d6 <twi_master_write+0x9a>
	uint32_t cnt = p_packet->length;
	uint8_t *buffer = p_packet->buffer;

	/* Check argument */
	if (cnt == 0) {
		return TWI_INVALID_ARGUMENT;
  4010c8:	2001      	movs	r0, #1

	while (!(p_twi->TWI_SR & TWI_SR_TXCOMP)) {
	}

	return TWI_SUCCESS;
}
  4010ca:	4770      	bx	lr

	/* Send all bytes */
	while (cnt > 0) {
		status = p_twi->TWI_SR;
		if (status & TWI_SR_NACK) {
			return TWI_RECEIVE_NACK;
  4010cc:	2005      	movs	r0, #5
  4010ce:	e002      	b.n	4010d6 <twi_master_write+0x9a>
  4010d0:	2005      	movs	r0, #5
  4010d2:	e000      	b.n	4010d6 <twi_master_write+0x9a>
	}

	while (1) {
		status = p_twi->TWI_SR;
		if (status & TWI_SR_NACK) {
			return TWI_RECEIVE_NACK;
  4010d4:	2005      	movs	r0, #5

	while (!(p_twi->TWI_SR & TWI_SR_TXCOMP)) {
	}

	return TWI_SUCCESS;
}
  4010d6:	bc70      	pop	{r4, r5, r6}
  4010d8:	4770      	bx	lr
  4010da:	bf00      	nop

004010dc <Dummy_Handler>:
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
	while (1) {
	}
  4010dc:	e7fe      	b.n	4010dc <Dummy_Handler>
  4010de:	bf00      	nop

004010e0 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
  4010e0:	b508      	push	{r3, lr}

	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc > pDest) {
  4010e2:	4b20      	ldr	r3, [pc, #128]	; (401164 <Reset_Handler+0x84>)
  4010e4:	4a20      	ldr	r2, [pc, #128]	; (401168 <Reset_Handler+0x88>)
  4010e6:	429a      	cmp	r2, r3
  4010e8:	d913      	bls.n	401112 <Reset_Handler+0x32>
		for (; pDest < &_erelocate;) {
  4010ea:	4b20      	ldr	r3, [pc, #128]	; (40116c <Reset_Handler+0x8c>)
  4010ec:	4a1d      	ldr	r2, [pc, #116]	; (401164 <Reset_Handler+0x84>)
  4010ee:	429a      	cmp	r2, r3
  4010f0:	d21f      	bcs.n	401132 <Reset_Handler+0x52>
  4010f2:	4611      	mov	r1, r2
  4010f4:	3204      	adds	r2, #4
  4010f6:	3303      	adds	r3, #3
  4010f8:	1a9b      	subs	r3, r3, r2
  4010fa:	f023 0303 	bic.w	r3, r3, #3
  4010fe:	3304      	adds	r3, #4
  401100:	4a19      	ldr	r2, [pc, #100]	; (401168 <Reset_Handler+0x88>)
  401102:	4413      	add	r3, r2
			*pDest++ = *pSrc++;
  401104:	f852 0b04 	ldr.w	r0, [r2], #4
  401108:	f841 0b04 	str.w	r0, [r1], #4
	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc > pDest) {
		for (; pDest < &_erelocate;) {
  40110c:	429a      	cmp	r2, r3
  40110e:	d1f9      	bne.n	401104 <Reset_Handler+0x24>
  401110:	e00f      	b.n	401132 <Reset_Handler+0x52>
			*pDest++ = *pSrc++;
		}
	} else if (pSrc < pDest) {
  401112:	4b14      	ldr	r3, [pc, #80]	; (401164 <Reset_Handler+0x84>)
  401114:	4a14      	ldr	r2, [pc, #80]	; (401168 <Reset_Handler+0x88>)
  401116:	429a      	cmp	r2, r3
  401118:	d20b      	bcs.n	401132 <Reset_Handler+0x52>
		uint32_t nb_bytes = (uint32_t)&_erelocate - (uint32_t)&_srelocate;
  40111a:	4b14      	ldr	r3, [pc, #80]	; (40116c <Reset_Handler+0x8c>)
  40111c:	4a11      	ldr	r2, [pc, #68]	; (401164 <Reset_Handler+0x84>)
  40111e:	1a9a      	subs	r2, r3, r2
  401120:	4813      	ldr	r0, [pc, #76]	; (401170 <Reset_Handler+0x90>)
		pSrc = (uint32_t*)((uint32_t)pSrc + nb_bytes) - 1;
  401122:	1881      	adds	r1, r0, r2
		pDest = (uint32_t*)((uint32_t)pDest + nb_bytes) - 1;
		for (;nb_bytes;nb_bytes -= 4) {
  401124:	b12a      	cbz	r2, 401132 <Reset_Handler+0x52>
			*pDest-- = *pSrc--;
  401126:	f851 2904 	ldr.w	r2, [r1], #-4
  40112a:	f843 2d04 	str.w	r2, [r3, #-4]!
		}
	} else if (pSrc < pDest) {
		uint32_t nb_bytes = (uint32_t)&_erelocate - (uint32_t)&_srelocate;
		pSrc = (uint32_t*)((uint32_t)pSrc + nb_bytes) - 1;
		pDest = (uint32_t*)((uint32_t)pDest + nb_bytes) - 1;
		for (;nb_bytes;nb_bytes -= 4) {
  40112e:	4281      	cmp	r1, r0
  401130:	d1f9      	bne.n	401126 <Reset_Handler+0x46>

    No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
  401132:	bf00      	nop
		}
	}
	__NOP();

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
  401134:	4b0f      	ldr	r3, [pc, #60]	; (401174 <Reset_Handler+0x94>)
  401136:	4a10      	ldr	r2, [pc, #64]	; (401178 <Reset_Handler+0x98>)
  401138:	429a      	cmp	r2, r3
  40113a:	d20b      	bcs.n	401154 <Reset_Handler+0x74>
  40113c:	1d13      	adds	r3, r2, #4
  40113e:	4a0f      	ldr	r2, [pc, #60]	; (40117c <Reset_Handler+0x9c>)
  401140:	1ad2      	subs	r2, r2, r3
  401142:	f022 0203 	bic.w	r2, r2, #3
  401146:	441a      	add	r2, r3
  401148:	3b04      	subs	r3, #4
		*pDest++ = 0;
  40114a:	2100      	movs	r1, #0
  40114c:	f843 1b04 	str.w	r1, [r3], #4
		}
	}
	__NOP();

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
  401150:	4293      	cmp	r3, r2
  401152:	d1fb      	bne.n	40114c <Reset_Handler+0x6c>
		*pDest++ = 0;
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) & _sfixed;
	SCB->VTOR = ((uint32_t) pSrc);
  401154:	4b0a      	ldr	r3, [pc, #40]	; (401180 <Reset_Handler+0xa0>)
  401156:	4a0b      	ldr	r2, [pc, #44]	; (401184 <Reset_Handler+0xa4>)
  401158:	609a      	str	r2, [r3, #8]

	/* Initialize the C library */
	__libc_init_array();
  40115a:	4b0b      	ldr	r3, [pc, #44]	; (401188 <Reset_Handler+0xa8>)
  40115c:	4798      	blx	r3

	/* Branch to main function */
	main();
  40115e:	4b0b      	ldr	r3, [pc, #44]	; (40118c <Reset_Handler+0xac>)
  401160:	4798      	blx	r3

	/* Infinite loop */
	while (1);
  401162:	e7fe      	b.n	401162 <Reset_Handler+0x82>
  401164:	20000000 	.word	0x20000000
  401168:	00403298 	.word	0x00403298
  40116c:	20000854 	.word	0x20000854
  401170:	00403294 	.word	0x00403294
  401174:	20000d10 	.word	0x20000d10
  401178:	20000854 	.word	0x20000854
  40117c:	20000d13 	.word	0x20000d13
  401180:	e000ed00 	.word	0xe000ed00
  401184:	00400000 	.word	0x00400000
  401188:	00401b29 	.word	0x00401b29
  40118c:	00401515 	.word	0x00401515

00401190 <SystemCoreClockUpdate>:
 * \brief Get Core Clock Frequency.
 */
void SystemCoreClockUpdate( void )
{
	/* Determine clock frequency according to clock register values */
	switch ( PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk ) {
  401190:	4b3d      	ldr	r3, [pc, #244]	; (401288 <SystemCoreClockUpdate+0xf8>)
  401192:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  401194:	f003 0303 	and.w	r3, r3, #3
  401198:	2b03      	cmp	r3, #3
  40119a:	d85d      	bhi.n	401258 <SystemCoreClockUpdate+0xc8>
  40119c:	e8df f003 	tbb	[pc, r3]
  4011a0:	2b2b0e02 	.word	0x2b2b0e02
	case PMC_MCKR_CSS_SLOW_CLK: /* Slow clock */
			if ( SUPC->SUPC_SR & SUPC_SR_OSCSEL ) {
  4011a4:	4b39      	ldr	r3, [pc, #228]	; (40128c <SystemCoreClockUpdate+0xfc>)
  4011a6:	695b      	ldr	r3, [r3, #20]
  4011a8:	f013 0f80 	tst.w	r3, #128	; 0x80
				SystemCoreClock = CHIP_FREQ_XTAL_32K;
  4011ac:	bf14      	ite	ne
  4011ae:	f44f 4200 	movne.w	r2, #32768	; 0x8000
			} else {
				SystemCoreClock = CHIP_FREQ_SLCK_RC;
  4011b2:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
  4011b6:	4b36      	ldr	r3, [pc, #216]	; (401290 <SystemCoreClockUpdate+0x100>)
  4011b8:	601a      	str	r2, [r3, #0]
  4011ba:	e04d      	b.n	401258 <SystemCoreClockUpdate+0xc8>
			}
		break;
		
	case PMC_MCKR_CSS_MAIN_CLK: /* Main clock */
		if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL ) {
  4011bc:	4b32      	ldr	r3, [pc, #200]	; (401288 <SystemCoreClockUpdate+0xf8>)
  4011be:	6a1b      	ldr	r3, [r3, #32]
  4011c0:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  4011c4:	d003      	beq.n	4011ce <SystemCoreClockUpdate+0x3e>
			SystemCoreClock = CHIP_FREQ_XTAL;
  4011c6:	4a33      	ldr	r2, [pc, #204]	; (401294 <SystemCoreClockUpdate+0x104>)
  4011c8:	4b31      	ldr	r3, [pc, #196]	; (401290 <SystemCoreClockUpdate+0x100>)
  4011ca:	601a      	str	r2, [r3, #0]
  4011cc:	e044      	b.n	401258 <SystemCoreClockUpdate+0xc8>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  4011ce:	4a32      	ldr	r2, [pc, #200]	; (401298 <SystemCoreClockUpdate+0x108>)
  4011d0:	4b2f      	ldr	r3, [pc, #188]	; (401290 <SystemCoreClockUpdate+0x100>)
  4011d2:	601a      	str	r2, [r3, #0]
			
			switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk ) {
  4011d4:	4b2c      	ldr	r3, [pc, #176]	; (401288 <SystemCoreClockUpdate+0xf8>)
  4011d6:	6a1b      	ldr	r3, [r3, #32]
  4011d8:	f003 0370 	and.w	r3, r3, #112	; 0x70
  4011dc:	2b10      	cmp	r3, #16
  4011de:	d002      	beq.n	4011e6 <SystemCoreClockUpdate+0x56>
  4011e0:	2b20      	cmp	r3, #32
  4011e2:	d004      	beq.n	4011ee <SystemCoreClockUpdate+0x5e>
  4011e4:	e038      	b.n	401258 <SystemCoreClockUpdate+0xc8>
			case CKGR_MOR_MOSCRCF_4_MHz:
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
			break;
			
			case CKGR_MOR_MOSCRCF_8_MHz:
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_8MHZ;
  4011e6:	4a2d      	ldr	r2, [pc, #180]	; (40129c <SystemCoreClockUpdate+0x10c>)
  4011e8:	4b29      	ldr	r3, [pc, #164]	; (401290 <SystemCoreClockUpdate+0x100>)
  4011ea:	601a      	str	r2, [r3, #0]
			break;
  4011ec:	e034      	b.n	401258 <SystemCoreClockUpdate+0xc8>
			
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_12MHZ;
  4011ee:	4a29      	ldr	r2, [pc, #164]	; (401294 <SystemCoreClockUpdate+0x104>)
  4011f0:	4b27      	ldr	r3, [pc, #156]	; (401290 <SystemCoreClockUpdate+0x100>)
  4011f2:	601a      	str	r2, [r3, #0]
			break;
  4011f4:	e030      	b.n	401258 <SystemCoreClockUpdate+0xc8>
		}
		break;
		
	case PMC_MCKR_CSS_PLLA_CLK:	/* PLLA clock */
	case PMC_MCKR_CSS_PLLB_CLK:	/* PLLB clock */
			if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL ) {
  4011f6:	4b24      	ldr	r3, [pc, #144]	; (401288 <SystemCoreClockUpdate+0xf8>)
  4011f8:	6a1b      	ldr	r3, [r3, #32]
  4011fa:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  4011fe:	d003      	beq.n	401208 <SystemCoreClockUpdate+0x78>
				SystemCoreClock = CHIP_FREQ_XTAL;
  401200:	4a24      	ldr	r2, [pc, #144]	; (401294 <SystemCoreClockUpdate+0x104>)
  401202:	4b23      	ldr	r3, [pc, #140]	; (401290 <SystemCoreClockUpdate+0x100>)
  401204:	601a      	str	r2, [r3, #0]
  401206:	e012      	b.n	40122e <SystemCoreClockUpdate+0x9e>
			} else {
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  401208:	4a23      	ldr	r2, [pc, #140]	; (401298 <SystemCoreClockUpdate+0x108>)
  40120a:	4b21      	ldr	r3, [pc, #132]	; (401290 <SystemCoreClockUpdate+0x100>)
  40120c:	601a      	str	r2, [r3, #0]
				
				switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk ) {
  40120e:	4b1e      	ldr	r3, [pc, #120]	; (401288 <SystemCoreClockUpdate+0xf8>)
  401210:	6a1b      	ldr	r3, [r3, #32]
  401212:	f003 0370 	and.w	r3, r3, #112	; 0x70
  401216:	2b10      	cmp	r3, #16
  401218:	d002      	beq.n	401220 <SystemCoreClockUpdate+0x90>
  40121a:	2b20      	cmp	r3, #32
  40121c:	d004      	beq.n	401228 <SystemCoreClockUpdate+0x98>
  40121e:	e006      	b.n	40122e <SystemCoreClockUpdate+0x9e>
				case CKGR_MOR_MOSCRCF_4_MHz:
					SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
					break;
				
				case CKGR_MOR_MOSCRCF_8_MHz:
					SystemCoreClock = CHIP_FREQ_MAINCK_RC_8MHZ;
  401220:	4a1e      	ldr	r2, [pc, #120]	; (40129c <SystemCoreClockUpdate+0x10c>)
  401222:	4b1b      	ldr	r3, [pc, #108]	; (401290 <SystemCoreClockUpdate+0x100>)
  401224:	601a      	str	r2, [r3, #0]
					break;
  401226:	e002      	b.n	40122e <SystemCoreClockUpdate+0x9e>
				
				case CKGR_MOR_MOSCRCF_12_MHz:
					SystemCoreClock = CHIP_FREQ_MAINCK_RC_12MHZ;
  401228:	4a1a      	ldr	r2, [pc, #104]	; (401294 <SystemCoreClockUpdate+0x104>)
  40122a:	4b19      	ldr	r3, [pc, #100]	; (401290 <SystemCoreClockUpdate+0x100>)
  40122c:	601a      	str	r2, [r3, #0]
				default:
					break;
				}
			}
			
			if ( (uint32_t)(PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) ==
  40122e:	4b16      	ldr	r3, [pc, #88]	; (401288 <SystemCoreClockUpdate+0xf8>)
  401230:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  401232:	f003 0303 	and.w	r3, r3, #3
  401236:	2b02      	cmp	r3, #2
					PMC_MCKR_CSS_PLLA_CLK ) {
				SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk)
  401238:	4a13      	ldr	r2, [pc, #76]	; (401288 <SystemCoreClockUpdate+0xf8>)
  40123a:	bf07      	ittee	eq
  40123c:	6a93      	ldreq	r3, [r2, #40]	; 0x28
						>> CKGR_PLLAR_MULA_Pos) + 1U);
				SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk)
  40123e:	6a92      	ldreq	r2, [r2, #40]	; 0x28
						>> CKGR_PLLAR_DIVA_Pos));
			} else {
				SystemCoreClock *= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_MULB_Msk)
  401240:	6ad3      	ldrne	r3, [r2, #44]	; 0x2c
						>> CKGR_PLLBR_MULB_Pos) + 1U);
				SystemCoreClock /= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_DIVB_Msk)
  401242:	6ad2      	ldrne	r2, [r2, #44]	; 0x2c
  401244:	4812      	ldr	r0, [pc, #72]	; (401290 <SystemCoreClockUpdate+0x100>)
						>> CKGR_PLLAR_MULA_Pos) + 1U);
				SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk)
						>> CKGR_PLLAR_DIVA_Pos));
			} else {
				SystemCoreClock *= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_MULB_Msk)
						>> CKGR_PLLBR_MULB_Pos) + 1U);
  401246:	f3c3 410a 	ubfx	r1, r3, #16, #11
				SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk)
						>> CKGR_PLLAR_MULA_Pos) + 1U);
				SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk)
						>> CKGR_PLLAR_DIVA_Pos));
			} else {
				SystemCoreClock *= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_MULB_Msk)
  40124a:	6803      	ldr	r3, [r0, #0]
  40124c:	fb01 3303 	mla	r3, r1, r3, r3
						>> CKGR_PLLBR_MULB_Pos) + 1U);
				SystemCoreClock /= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_DIVB_Msk)
						>> CKGR_PLLBR_DIVB_Pos));
  401250:	b2d2      	uxtb	r2, r2
				SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk)
						>> CKGR_PLLAR_DIVA_Pos));
			} else {
				SystemCoreClock *= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_MULB_Msk)
						>> CKGR_PLLBR_MULB_Pos) + 1U);
				SystemCoreClock /= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_DIVB_Msk)
  401252:	fbb3 f3f2 	udiv	r3, r3, r2
  401256:	6003      	str	r3, [r0, #0]
		
	default:
		break;
	}

	if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 ) {
  401258:	4b0b      	ldr	r3, [pc, #44]	; (401288 <SystemCoreClockUpdate+0xf8>)
  40125a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  40125c:	f003 0370 	and.w	r3, r3, #112	; 0x70
  401260:	2b70      	cmp	r3, #112	; 0x70
  401262:	d107      	bne.n	401274 <SystemCoreClockUpdate+0xe4>
		SystemCoreClock /= 3U;
  401264:	4a0a      	ldr	r2, [pc, #40]	; (401290 <SystemCoreClockUpdate+0x100>)
  401266:	6813      	ldr	r3, [r2, #0]
  401268:	490d      	ldr	r1, [pc, #52]	; (4012a0 <SystemCoreClockUpdate+0x110>)
  40126a:	fba1 1303 	umull	r1, r3, r1, r3
  40126e:	085b      	lsrs	r3, r3, #1
  401270:	6013      	str	r3, [r2, #0]
  401272:	4770      	bx	lr
	} else {
		SystemCoreClock >>=
			((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  401274:	4b04      	ldr	r3, [pc, #16]	; (401288 <SystemCoreClockUpdate+0xf8>)
  401276:	6b1a      	ldr	r2, [r3, #48]	; 0x30
	}

	if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 ) {
		SystemCoreClock /= 3U;
	} else {
		SystemCoreClock >>=
  401278:	4905      	ldr	r1, [pc, #20]	; (401290 <SystemCoreClockUpdate+0x100>)
			((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  40127a:	f3c2 1202 	ubfx	r2, r2, #4, #3
	}

	if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 ) {
		SystemCoreClock /= 3U;
	} else {
		SystemCoreClock >>=
  40127e:	680b      	ldr	r3, [r1, #0]
  401280:	40d3      	lsrs	r3, r2
  401282:	600b      	str	r3, [r1, #0]
  401284:	4770      	bx	lr
  401286:	bf00      	nop
  401288:	400e0400 	.word	0x400e0400
  40128c:	400e1410 	.word	0x400e1410
  401290:	2000000c 	.word	0x2000000c
  401294:	00b71b00 	.word	0x00b71b00
  401298:	003d0900 	.word	0x003d0900
  40129c:	007a1200 	.word	0x007a1200
  4012a0:	aaaaaaab 	.word	0xaaaaaaab

004012a4 <system_init_flash>:
 */
void system_init_flash( uint32_t ul_clk )
{
  /* Set FWS for embedded Flash access according to operating frequency */
#if !defined(ID_EFC1)
	if ( ul_clk < CHIP_FREQ_FWS_0 ) {
  4012a4:	4b12      	ldr	r3, [pc, #72]	; (4012f0 <system_init_flash+0x4c>)
  4012a6:	4298      	cmp	r0, r3
  4012a8:	d804      	bhi.n	4012b4 <system_init_flash+0x10>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  4012aa:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  4012ae:	4b11      	ldr	r3, [pc, #68]	; (4012f4 <system_init_flash+0x50>)
  4012b0:	601a      	str	r2, [r3, #0]
  4012b2:	4770      	bx	lr
	} else {
		if ( ul_clk < CHIP_FREQ_FWS_1 ) {
  4012b4:	4b10      	ldr	r3, [pc, #64]	; (4012f8 <system_init_flash+0x54>)
  4012b6:	4298      	cmp	r0, r3
  4012b8:	d803      	bhi.n	4012c2 <system_init_flash+0x1e>
			EFC0->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  4012ba:	4a10      	ldr	r2, [pc, #64]	; (4012fc <system_init_flash+0x58>)
  4012bc:	4b0d      	ldr	r3, [pc, #52]	; (4012f4 <system_init_flash+0x50>)
  4012be:	601a      	str	r2, [r3, #0]
  4012c0:	4770      	bx	lr
		} else {
			if ( ul_clk < CHIP_FREQ_FWS_2 ) {
  4012c2:	4b0f      	ldr	r3, [pc, #60]	; (401300 <system_init_flash+0x5c>)
  4012c4:	4298      	cmp	r0, r3
  4012c6:	d803      	bhi.n	4012d0 <system_init_flash+0x2c>
				EFC0->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  4012c8:	4a0e      	ldr	r2, [pc, #56]	; (401304 <system_init_flash+0x60>)
  4012ca:	4b0a      	ldr	r3, [pc, #40]	; (4012f4 <system_init_flash+0x50>)
  4012cc:	601a      	str	r2, [r3, #0]
  4012ce:	4770      	bx	lr
			} else {
				if ( ul_clk < CHIP_FREQ_FWS_3 ) {
  4012d0:	4b0d      	ldr	r3, [pc, #52]	; (401308 <system_init_flash+0x64>)
  4012d2:	4298      	cmp	r0, r3
  4012d4:	d803      	bhi.n	4012de <system_init_flash+0x3a>
					EFC0->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  4012d6:	4a0d      	ldr	r2, [pc, #52]	; (40130c <system_init_flash+0x68>)
  4012d8:	4b06      	ldr	r3, [pc, #24]	; (4012f4 <system_init_flash+0x50>)
  4012da:	601a      	str	r2, [r3, #0]
  4012dc:	4770      	bx	lr
				} else {
					if ( ul_clk < CHIP_FREQ_FWS_4 ) {
  4012de:	4b0c      	ldr	r3, [pc, #48]	; (401310 <system_init_flash+0x6c>)
  4012e0:	4298      	cmp	r0, r3
					EFC0->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
  4012e2:	bf94      	ite	ls
  4012e4:	f04f 2204 	movls.w	r2, #67109888	; 0x4000400
					} else {
					EFC0->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  4012e8:	4a0a      	ldrhi	r2, [pc, #40]	; (401314 <system_init_flash+0x70>)
  4012ea:	4b02      	ldr	r3, [pc, #8]	; (4012f4 <system_init_flash+0x50>)
  4012ec:	601a      	str	r2, [r3, #0]
  4012ee:	4770      	bx	lr
  4012f0:	01312cff 	.word	0x01312cff
  4012f4:	400e0a00 	.word	0x400e0a00
  4012f8:	026259ff 	.word	0x026259ff
  4012fc:	04000100 	.word	0x04000100
  401300:	039386ff 	.word	0x039386ff
  401304:	04000200 	.word	0x04000200
  401308:	04c4b3ff 	.word	0x04c4b3ff
  40130c:	04000300 	.word	0x04000300
  401310:	05f5e0ff 	.word	0x05f5e0ff
  401314:	04000500 	.word	0x04000500

00401318 <_sbrk>:
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;

	if (heap == NULL) {
  401318:	4b09      	ldr	r3, [pc, #36]	; (401340 <_sbrk+0x28>)
  40131a:	681b      	ldr	r3, [r3, #0]
  40131c:	b913      	cbnz	r3, 401324 <_sbrk+0xc>
		heap = (unsigned char *)&_end;
  40131e:	4a09      	ldr	r2, [pc, #36]	; (401344 <_sbrk+0x2c>)
  401320:	4b07      	ldr	r3, [pc, #28]	; (401340 <_sbrk+0x28>)
  401322:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
  401324:	4b06      	ldr	r3, [pc, #24]	; (401340 <_sbrk+0x28>)
  401326:	681b      	ldr	r3, [r3, #0]

	if (((int)prev_heap + incr) > ramend) {
  401328:	181a      	adds	r2, r3, r0
  40132a:	4907      	ldr	r1, [pc, #28]	; (401348 <_sbrk+0x30>)
  40132c:	4291      	cmp	r1, r2
  40132e:	db04      	blt.n	40133a <_sbrk+0x22>
		return (caddr_t) -1;	
	}

	heap += incr;
  401330:	4610      	mov	r0, r2
  401332:	4a03      	ldr	r2, [pc, #12]	; (401340 <_sbrk+0x28>)
  401334:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap;
  401336:	4618      	mov	r0, r3
  401338:	4770      	bx	lr
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;

	if (((int)prev_heap + incr) > ramend) {
		return (caddr_t) -1;	
  40133a:	f04f 30ff 	mov.w	r0, #4294967295
	}

	heap += incr;

	return (caddr_t) prev_heap;
}
  40133e:	4770      	bx	lr
  401340:	20000ca8 	.word	0x20000ca8
  401344:	20003d10 	.word	0x20003d10
  401348:	2001fffc 	.word	0x2001fffc

0040134c <vsync_handler>:
static void vsync_handler(uint32_t ul_id, uint32_t ul_mask)
{
	unused(ul_id);
	unused(ul_mask);

	g_ul_vsync_flag = true;
  40134c:	2201      	movs	r2, #1
  40134e:	4b01      	ldr	r3, [pc, #4]	; (401354 <vsync_handler+0x8>)
  401350:	601a      	str	r2, [r3, #0]
  401352:	4770      	bx	lr
  401354:	20000cbc 	.word	0x20000cbc

00401358 <button_handler>:
static void button_handler(uint32_t ul_id, uint32_t ul_mask)
{
	unused(ul_id);
	unused(ul_mask);

	if (g_ul_push_button_trigger){
  401358:	4b06      	ldr	r3, [pc, #24]	; (401374 <button_handler+0x1c>)
  40135a:	681b      	ldr	r3, [r3, #0]
  40135c:	b133      	cbz	r3, 40136c <button_handler+0x14>
		g_ul_push_button_trigger = false;
  40135e:	2200      	movs	r2, #0
  401360:	4b04      	ldr	r3, [pc, #16]	; (401374 <button_handler+0x1c>)
  401362:	601a      	str	r2, [r3, #0]
		g_display_splash = true;
  401364:	2201      	movs	r2, #1
  401366:	4b04      	ldr	r3, [pc, #16]	; (401378 <button_handler+0x20>)
  401368:	601a      	str	r2, [r3, #0]
  40136a:	4770      	bx	lr

	} else {
		g_ul_push_button_trigger = true;
  40136c:	2201      	movs	r2, #1
  40136e:	4b01      	ldr	r3, [pc, #4]	; (401374 <button_handler+0x1c>)
  401370:	601a      	str	r2, [r3, #0]
  401372:	4770      	bx	lr
  401374:	20000cb0 	.word	0x20000cb0
  401378:	20000cc8 	.word	0x20000cc8

0040137c <display_init>:

/**
 * \brief Intialize LCD display.
 */
static void display_init(void)
{
  40137c:	b510      	push	{r4, lr}
  40137e:	b084      	sub	sp, #16
	struct ili9325_opt_t ili9325_display_opt;

	/* Enable peripheral clock */
	pmc_enable_periph_clk( ID_SMC );
  401380:	200a      	movs	r0, #10
  401382:	4b17      	ldr	r3, [pc, #92]	; (4013e0 <display_init+0x64>)
  401384:	4798      	blx	r3

	/* Configure SMC interface for LCD */
	smc_set_setup_timing(SMC, ILI9325_LCD_CS, SMC_SETUP_NWE_SETUP(2)
  401386:	4c17      	ldr	r4, [pc, #92]	; (4013e4 <display_init+0x68>)
  401388:	4620      	mov	r0, r4
  40138a:	2102      	movs	r1, #2
  40138c:	f04f 3202 	mov.w	r2, #33686018	; 0x2020202
  401390:	4b15      	ldr	r3, [pc, #84]	; (4013e8 <display_init+0x6c>)
  401392:	4798      	blx	r3
			| SMC_SETUP_NCS_WR_SETUP(2)
			| SMC_SETUP_NRD_SETUP(2)
			| SMC_SETUP_NCS_RD_SETUP(2));

	smc_set_pulse_timing(SMC, ILI9325_LCD_CS, SMC_PULSE_NWE_PULSE(4)
  401394:	4620      	mov	r0, r4
  401396:	2102      	movs	r1, #2
  401398:	4a14      	ldr	r2, [pc, #80]	; (4013ec <display_init+0x70>)
  40139a:	4b15      	ldr	r3, [pc, #84]	; (4013f0 <display_init+0x74>)
  40139c:	4798      	blx	r3
			| SMC_PULSE_NCS_WR_PULSE(4)
			| SMC_PULSE_NRD_PULSE(10)
			| SMC_PULSE_NCS_RD_PULSE(10));

	smc_set_cycle_timing(SMC, ILI9325_LCD_CS, SMC_CYCLE_NWE_CYCLE(10)
  40139e:	4620      	mov	r0, r4
  4013a0:	2102      	movs	r1, #2
  4013a2:	4a14      	ldr	r2, [pc, #80]	; (4013f4 <display_init+0x78>)
  4013a4:	4b14      	ldr	r3, [pc, #80]	; (4013f8 <display_init+0x7c>)
  4013a6:	4798      	blx	r3
			| SMC_CYCLE_NRD_CYCLE(22));

	smc_set_mode(SMC, ILI9325_LCD_CS, SMC_MODE_READ_MODE
  4013a8:	4620      	mov	r0, r4
  4013aa:	2102      	movs	r1, #2
  4013ac:	2203      	movs	r2, #3
  4013ae:	4b13      	ldr	r3, [pc, #76]	; (4013fc <display_init+0x80>)
  4013b0:	4798      	blx	r3
			| SMC_MODE_WRITE_MODE);

	/* Initialize display parameter */
	ili9325_display_opt.ul_width = ILI9325_LCD_WIDTH;
  4013b2:	23f0      	movs	r3, #240	; 0xf0
  4013b4:	9300      	str	r3, [sp, #0]
	ili9325_display_opt.ul_height = ILI9325_LCD_HEIGHT;
  4013b6:	f44f 73a0 	mov.w	r3, #320	; 0x140
  4013ba:	9301      	str	r3, [sp, #4]
	ili9325_display_opt.foreground_color = COLOR_BLACK;
  4013bc:	2300      	movs	r3, #0
  4013be:	9302      	str	r3, [sp, #8]
	ili9325_display_opt.background_color = COLOR_WHITE;
  4013c0:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
  4013c4:	9303      	str	r3, [sp, #12]

	/* Switch off backlight */
	aat31xx_disable_backlight();
  4013c6:	4b0e      	ldr	r3, [pc, #56]	; (401400 <display_init+0x84>)
  4013c8:	4798      	blx	r3

	/* Initialize LCD */
	ili9325_init(&ili9325_display_opt);
  4013ca:	4668      	mov	r0, sp
  4013cc:	4b0d      	ldr	r3, [pc, #52]	; (401404 <display_init+0x88>)
  4013ce:	4798      	blx	r3

	/* Set backlight level */
	aat31xx_set_backlight(AAT31XX_MAX_BACKLIGHT_LEVEL);
  4013d0:	2010      	movs	r0, #16
  4013d2:	4b0d      	ldr	r3, [pc, #52]	; (401408 <display_init+0x8c>)
  4013d4:	4798      	blx	r3

	/* Turn on LCD */
	ili9325_display_on();
  4013d6:	4b0d      	ldr	r3, [pc, #52]	; (40140c <display_init+0x90>)
  4013d8:	4798      	blx	r3
}
  4013da:	b004      	add	sp, #16
  4013dc:	bd10      	pop	{r4, pc}
  4013de:	bf00      	nop
  4013e0:	00400e85 	.word	0x00400e85
  4013e4:	400e0000 	.word	0x400e0000
  4013e8:	004009b5 	.word	0x004009b5
  4013ec:	0a0a0404 	.word	0x0a0a0404
  4013f0:	004009bd 	.word	0x004009bd
  4013f4:	0016000a 	.word	0x0016000a
  4013f8:	004009c5 	.word	0x004009c5
  4013fc:	004009cd 	.word	0x004009cd
  401400:	004005bd 	.word	0x004005bd
  401404:	004006cd 	.word	0x004006cd
  401408:	00400561 	.word	0x00400561
  40140c:	00400649 	.word	0x00400649

00401410 <SysTick_Handler>:

volatile uint32_t g_ms_ticks = 0;

void SysTick_Handler(void)
{
    g_ms_ticks++;
  401410:	4a02      	ldr	r2, [pc, #8]	; (40141c <SysTick_Handler+0xc>)
  401412:	6813      	ldr	r3, [r2, #0]
  401414:	3301      	adds	r3, #1
  401416:	6013      	str	r3, [r2, #0]
  401418:	4770      	bx	lr
  40141a:	bf00      	nop
  40141c:	20000ccc 	.word	0x20000ccc

00401420 <time_tick_init>:
}

void time_tick_init(void)
{
    g_ms_ticks = 0;
  401420:	2200      	movs	r2, #0
  401422:	4b06      	ldr	r3, [pc, #24]	; (40143c <time_tick_init+0x1c>)
  401424:	601a      	str	r2, [r3, #0]
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1) > SysTick_LOAD_RELOAD_Msk)  return (1);      /* Reload value impossible */

  SysTick->LOAD  = ticks - 1;                                  /* set reload register */
  401426:	4b06      	ldr	r3, [pc, #24]	; (401440 <time_tick_init+0x20>)
  401428:	4906      	ldr	r1, [pc, #24]	; (401444 <time_tick_init+0x24>)
  40142a:	6059      	str	r1, [r3, #4]
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  40142c:	20f0      	movs	r0, #240	; 0xf0
  40142e:	4906      	ldr	r1, [pc, #24]	; (401448 <time_tick_init+0x28>)
  401430:	f881 0023 	strb.w	r0, [r1, #35]	; 0x23
{
  if ((ticks - 1) > SysTick_LOAD_RELOAD_Msk)  return (1);      /* Reload value impossible */

  SysTick->LOAD  = ticks - 1;                                  /* set reload register */
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
  401434:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
  401436:	2207      	movs	r2, #7
  401438:	601a      	str	r2, [r3, #0]
  40143a:	4770      	bx	lr
  40143c:	20000ccc 	.word	0x20000ccc
  401440:	e000e010 	.word	0xe000e010
  401444:	0001d4bf 	.word	0x0001d4bf
  401448:	e000ed00 	.word	0xe000ed00

0040144c <edge_detect_sobel>:


}


void edge_detect_sobel(void){
  40144c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  401450:	b083      	sub	sp, #12
  401452:	af00      	add	r7, sp, #0

	int32_t sobel_sum = 0;

	int32_t t = 0;

	uint8_t sobel_values[sobel_width * sobel_height];
  401454:	f5ad 5dea 	sub.w	sp, sp, #7488	; 0x1d40
  401458:	b084      	sub	sp, #16
  40145a:	f10d 3bff 	add.w	fp, sp, #4294967295

	p_uc_data = (uint8_t *)CAP_DEST + 0x7080 + (IMAGE_WIDTH - sobel_width)/2;	//start at 19200 + 19200/2 pixels
  40145e:	492b      	ldr	r1, [pc, #172]	; (40150c <edge_detect_sobel+0xc0>)
 * \return i if 0<i<255, 0 if i<0 and 255 if i>255
 */
static inline uint8_t clip32_to_8( int32_t i )
{
	if (i > 255) {
		return 255;
  401460:	f04f 09ff 	mov.w	r9, #255	; 0xff
  401464:	f8c7 b004 	str.w	fp, [r7, #4]
  401468:	e028      	b.n	4014bc <edge_detect_sobel+0x70>
			kernel_buffer[5] = *(p_uc_data + 1);
			kernel_buffer[6] = *(p_uc_data + IMAGE_WIDTH - 1);
			kernel_buffer[7] = *(p_uc_data + IMAGE_WIDTH);
			kernel_buffer[8] = *(p_uc_data + IMAGE_WIDTH + 1);

			sobel_Gx = kernel_buffer[2] + 2 * kernel_buffer[5] + kernel_buffer[8] - kernel_buffer[0] - 2* kernel_buffer[3] - kernel_buffer[6];
  40146a:	f81e 3f01 	ldrb.w	r3, [lr, #1]!
  40146e:	784a      	ldrb	r2, [r1, #1]
  401470:	eb03 0342 	add.w	r3, r3, r2, lsl #1
  401474:	f814 2f01 	ldrb.w	r2, [r4, #1]!
  401478:	4413      	add	r3, r2
  40147a:	f81c 2f01 	ldrb.w	r2, [ip, #1]!
  40147e:	1a9b      	subs	r3, r3, r2
  401480:	f816 2f01 	ldrb.w	r2, [r6, #1]!
  401484:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
  401488:	f815 2f01 	ldrb.w	r2, [r5, #1]!
  40148c:	1a9b      	subs	r3, r3, r2
			sobel_Gy = 0;//kernel_buffer[0] + 2 * kernel_buffer[1] + kernel_buffer[2] - kernel_buffer[6] - 2* kernel_buffer[7] - kernel_buffer[8];

			//sobel_mag = sqrt(sobel_Gx * sobel_Gx + sobel_Gy * sobel_Gy);
			sobel_values[t] = clip32_to_8( abs(sobel_Gx) + abs(sobel_Gy) );
  40148e:	2b00      	cmp	r3, #0
  401490:	bfb8      	it	lt
  401492:	425b      	neglt	r3, r3
 * \param i Enter value .
 * \return i if 0<i<255, 0 if i<0 and 255 if i>255
 */
static inline uint8_t clip32_to_8( int32_t i )
{
	if (i > 255) {
  401494:	2bff      	cmp	r3, #255	; 0xff
  401496:	dc03      	bgt.n	4014a0 <edge_detect_sobel+0x54>
		return 255;
	}

	if (i < 0) {
  401498:	2b00      	cmp	r3, #0
  40149a:	db03      	blt.n	4014a4 <edge_detect_sobel+0x58>
		return 0;
	}

	return (uint8_t)i;
  40149c:	b2db      	uxtb	r3, r3
  40149e:	e002      	b.n	4014a6 <edge_detect_sobel+0x5a>
 * \return i if 0<i<255, 0 if i<0 and 255 if i>255
 */
static inline uint8_t clip32_to_8( int32_t i )
{
	if (i > 255) {
		return 255;
  4014a0:	464b      	mov	r3, r9
  4014a2:	e000      	b.n	4014a6 <edge_detect_sobel+0x5a>
	}

	if (i < 0) {
		return 0;
  4014a4:	2300      	movs	r3, #0

			sobel_Gx = kernel_buffer[2] + 2 * kernel_buffer[5] + kernel_buffer[8] - kernel_buffer[0] - 2* kernel_buffer[3] - kernel_buffer[6];
			sobel_Gy = 0;//kernel_buffer[0] + 2 * kernel_buffer[1] + kernel_buffer[2] - kernel_buffer[6] - 2* kernel_buffer[7] - kernel_buffer[8];

			//sobel_mag = sqrt(sobel_Gx * sobel_Gx + sobel_Gy * sobel_Gy);
			sobel_values[t] = clip32_to_8( abs(sobel_Gx) + abs(sobel_Gy) );
  4014a6:	f800 3f01 	strb.w	r3, [r0, #1]!
	uint8_t sobel_values[sobel_width * sobel_height];

	p_uc_data = (uint8_t *)CAP_DEST + 0x7080 + (IMAGE_WIDTH - sobel_width)/2;	//start at 19200 + 19200/2 pixels
	for ( ul_row = 0; ul_row < sobel_height; ul_row++, p_uc_data+=(IMAGE_WIDTH - sobel_width) ){

		for (ul_col = 0; ul_col < sobel_width; ul_col++, p_uc_data++){
  4014aa:	3101      	adds	r1, #1
  4014ac:	4541      	cmp	r1, r8
  4014ae:	d1dc      	bne.n	40146a <edge_detect_sobel+0x1e>
  4014b0:	f10b 0b96 	add.w	fp, fp, #150	; 0x96
	int32_t t = 0;

	uint8_t sobel_values[sobel_width * sobel_height];

	p_uc_data = (uint8_t *)CAP_DEST + 0x7080 + (IMAGE_WIDTH - sobel_width)/2;	//start at 19200 + 19200/2 pixels
	for ( ul_row = 0; ul_row < sobel_height; ul_row++, p_uc_data+=(IMAGE_WIDTH - sobel_width) ){
  4014b4:	4651      	mov	r1, sl
  4014b6:	4b16      	ldr	r3, [pc, #88]	; (401510 <edge_detect_sobel+0xc4>)
  4014b8:	459a      	cmp	sl, r3
  4014ba:	d01a      	beq.n	4014f2 <edge_detect_sobel+0xa6>
  4014bc:	f5a1 7ca1 	sub.w	ip, r1, #322	; 0x142
  4014c0:	f5a1 7ea0 	sub.w	lr, r1, #320	; 0x140
  4014c4:	1e8e      	subs	r6, r1, #2
  4014c6:	f501 759f 	add.w	r5, r1, #318	; 0x13e
  4014ca:	f501 7aa0 	add.w	sl, r1, #320	; 0x140
  4014ce:	4654      	mov	r4, sl
  4014d0:	f101 0896 	add.w	r8, r1, #150	; 0x96


}


void edge_detect_sobel(void){
  4014d4:	4658      	mov	r0, fp
  4014d6:	e7c8      	b.n	40146a <edge_detect_sobel+0x1e>

	t = 0;
	p_uc_data = (uint8_t *)CAP_DEST + 0x7080 + (IMAGE_WIDTH - sobel_width)/2;	//start at 19200 + 19200/2 pixels
	for ( ul_row = 0; ul_row < sobel_height; ul_row++, p_uc_data+=(IMAGE_WIDTH - sobel_width) ){
		for (ul_col = 0; ul_col < sobel_width; ul_col++, p_uc_data++){
			*p_uc_data = (sobel_values[t]);
  4014d8:	f812 1f01 	ldrb.w	r1, [r2, #1]!
  4014dc:	f803 1b01 	strb.w	r1, [r3], #1
	}

	t = 0;
	p_uc_data = (uint8_t *)CAP_DEST + 0x7080 + (IMAGE_WIDTH - sobel_width)/2;	//start at 19200 + 19200/2 pixels
	for ( ul_row = 0; ul_row < sobel_height; ul_row++, p_uc_data+=(IMAGE_WIDTH - sobel_width) ){
		for (ul_col = 0; ul_col < sobel_width; ul_col++, p_uc_data++){
  4014e0:	4283      	cmp	r3, r0
  4014e2:	d1f9      	bne.n	4014d8 <edge_detect_sobel+0x8c>
		}
	}

	t = 0;
	p_uc_data = (uint8_t *)CAP_DEST + 0x7080 + (IMAGE_WIDTH - sobel_width)/2;	//start at 19200 + 19200/2 pixels
	for ( ul_row = 0; ul_row < sobel_height; ul_row++, p_uc_data+=(IMAGE_WIDTH - sobel_width) ){
  4014e4:	f504 74a0 	add.w	r4, r4, #320	; 0x140
  4014e8:	f10b 0b96 	add.w	fp, fp, #150	; 0x96
  4014ec:	42ac      	cmp	r4, r5
  4014ee:	d104      	bne.n	4014fa <edge_detect_sobel+0xae>
  4014f0:	e008      	b.n	401504 <edge_detect_sobel+0xb8>
  4014f2:	f8d7 b004 	ldr.w	fp, [r7, #4]
  4014f6:	4c05      	ldr	r4, [pc, #20]	; (40150c <edge_detect_sobel+0xc0>)
  4014f8:	4d05      	ldr	r5, [pc, #20]	; (401510 <edge_detect_sobel+0xc4>)
  4014fa:	f104 0096 	add.w	r0, r4, #150	; 0x96

	int32_t t = 0;

	uint8_t sobel_values[sobel_width * sobel_height];

	p_uc_data = (uint8_t *)CAP_DEST + 0x7080 + (IMAGE_WIDTH - sobel_width)/2;	//start at 19200 + 19200/2 pixels
  4014fe:	465a      	mov	r2, fp
  401500:	4623      	mov	r3, r4
  401502:	e7e9      	b.n	4014d8 <edge_detect_sobel+0x8c>
	/*char sobel_agg[32];
	sprintf(sobel_agg, "sobel = %d ms", sobel_sum);				
	display_init();
	ili9325_draw_string(0, 20, sobel_agg);
	delay_ms(500);*/
}
  401504:	370c      	adds	r7, #12
  401506:	46bd      	mov	sp, r7
  401508:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40150c:	600070d5 	.word	0x600070d5
  401510:	6000af55 	.word	0x6000af55

00401514 <main>:
 * \brief Application entry point for image sensor capture example.
 *
 * \return Unused (ANSI-C compatibility).
 */
int main(void)
{
  401514:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
  401518:	b087      	sub	sp, #28
	sysclk_init();
  40151a:	4b83      	ldr	r3, [pc, #524]	; (401728 <main+0x214>)
  40151c:	4798      	blx	r3
	board_init();
  40151e:	4b83      	ldr	r3, [pc, #524]	; (40172c <main+0x218>)
  401520:	4798      	blx	r3

	/* OV7740 send image sensor data at 24 Mhz. For best performances, PCK0
	 * which will capture OV7740 data, has to work at 24Mhz. It's easier and
	 * optimum to use one PLL for core (PLLB) and one other for PCK0 (PLLA).
	 */
	pmc_enable_pllack(7, 0x1, 1); /* PLLA work at 96 Mhz */
  401522:	2007      	movs	r0, #7
  401524:	2101      	movs	r1, #1
  401526:	460a      	mov	r2, r1
  401528:	4b81      	ldr	r3, [pc, #516]	; (401730 <main+0x21c>)
  40152a:	4798      	blx	r3

	/* LCD display initialization */
	display_init();
  40152c:	4b81      	ldr	r3, [pc, #516]	; (401734 <main+0x220>)
  40152e:	4798      	blx	r3

	/* LCD display information */
	ili9325_fill(COLOR_TURQUOISE);
  401530:	4881      	ldr	r0, [pc, #516]	; (401738 <main+0x224>)
  401532:	4b82      	ldr	r3, [pc, #520]	; (40173c <main+0x228>)
  401534:	4798      	blx	r3
	ili9325_draw_string(0, 20,
  401536:	2000      	movs	r0, #0
  401538:	2114      	movs	r1, #20
  40153a:	4a81      	ldr	r2, [pc, #516]	; (401740 <main+0x22c>)
  40153c:	4c81      	ldr	r4, [pc, #516]	; (401744 <main+0x230>)
  40153e:	47a0      	blx	r4
			(uint8_t *)"OV7740 image sensor\ncapture example");
	ili9325_draw_string(0, 80,
  401540:	2000      	movs	r0, #0
  401542:	2150      	movs	r1, #80	; 0x50
  401544:	4a80      	ldr	r2, [pc, #512]	; (401748 <main+0x234>)
  401546:	47a0      	blx	r4
 * \brief Configure SMC interface for SRAM.
 */
static void board_configure_sram( void )
{
	/* Enable peripheral clock */
	pmc_enable_periph_clk( ID_SMC );
  401548:	200a      	movs	r0, #10
  40154a:	4d80      	ldr	r5, [pc, #512]	; (40174c <main+0x238>)
  40154c:	47a8      	blx	r5

	/* Configure SMC interface for SRAM */
	smc_set_setup_timing(SMC, SRAM_CS, SMC_SETUP_NWE_SETUP(2)
  40154e:	4c80      	ldr	r4, [pc, #512]	; (401750 <main+0x23c>)
  401550:	4620      	mov	r0, r4
  401552:	2100      	movs	r1, #0
  401554:	4a7f      	ldr	r2, [pc, #508]	; (401754 <main+0x240>)
  401556:	4b80      	ldr	r3, [pc, #512]	; (401758 <main+0x244>)
  401558:	4798      	blx	r3
			| SMC_SETUP_NCS_WR_SETUP(0)
			| SMC_SETUP_NRD_SETUP(3)
			| SMC_SETUP_NCS_RD_SETUP(0));

	smc_set_pulse_timing(SMC, SRAM_CS, SMC_PULSE_NWE_PULSE(4)
  40155a:	4620      	mov	r0, r4
  40155c:	2100      	movs	r1, #0
  40155e:	4a7f      	ldr	r2, [pc, #508]	; (40175c <main+0x248>)
  401560:	4b7f      	ldr	r3, [pc, #508]	; (401760 <main+0x24c>)
  401562:	4798      	blx	r3
			| SMC_PULSE_NCS_WR_PULSE(5)
			| SMC_PULSE_NRD_PULSE(4)
			| SMC_PULSE_NCS_RD_PULSE(6));

	smc_set_cycle_timing(SMC, SRAM_CS, SMC_CYCLE_NWE_CYCLE(6)
  401564:	4620      	mov	r0, r4
  401566:	2100      	movs	r1, #0
  401568:	4a7e      	ldr	r2, [pc, #504]	; (401764 <main+0x250>)
  40156a:	4b7f      	ldr	r3, [pc, #508]	; (401768 <main+0x254>)
  40156c:	4798      	blx	r3
			| SMC_CYCLE_NRD_CYCLE(7));

	smc_set_mode(SMC, SRAM_CS, SMC_MODE_READ_MODE
  40156e:	4620      	mov	r0, r4
  401570:	2100      	movs	r1, #0
  401572:	2203      	movs	r2, #3
  401574:	4b7d      	ldr	r3, [pc, #500]	; (40176c <main+0x258>)
  401576:	4798      	blx	r3
 * \brief Configure push button and initialize button_handler interrupt.
 */
static void configure_button(void)
{
	/* Configure PIO clock. */
	pmc_enable_periph_clk(PUSH_BUTTON_ID);
  401578:	200b      	movs	r0, #11
  40157a:	47a8      	blx	r5

	/* Adjust PIO debounce filter using a 10 Hz filter. */
	pio_set_debounce_filter(PUSH_BUTTON_PIO, PUSH_BUTTON_PIN_MSK, 10);
  40157c:	f504 6460 	add.w	r4, r4, #3584	; 0xe00
  401580:	4620      	mov	r0, r4
  401582:	2104      	movs	r1, #4
  401584:	220a      	movs	r2, #10
  401586:	4b7a      	ldr	r3, [pc, #488]	; (401770 <main+0x25c>)
  401588:	4798      	blx	r3

	/* Initialize PIO interrupt handler, see PIO definition in conf_board.h
	**/
	pio_handler_set(PUSH_BUTTON_PIO, PUSH_BUTTON_ID, PUSH_BUTTON_PIN_MSK,
  40158a:	4b7a      	ldr	r3, [pc, #488]	; (401774 <main+0x260>)
  40158c:	9300      	str	r3, [sp, #0]
  40158e:	4620      	mov	r0, r4
  401590:	210b      	movs	r1, #11
  401592:	2204      	movs	r2, #4
  401594:	2379      	movs	r3, #121	; 0x79
  401596:	f8df 8248 	ldr.w	r8, [pc, #584]	; 4017e0 <main+0x2cc>
  40159a:	47c0      	blx	r8
    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
/*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  40159c:	4e76      	ldr	r6, [pc, #472]	; (401778 <main+0x264>)
  40159e:	f44f 6700 	mov.w	r7, #2048	; 0x800
  4015a2:	6037      	str	r7, [r6, #0]

	/* Enable PIO controller IRQs. */
	NVIC_EnableIRQ((IRQn_Type)PUSH_BUTTON_ID);

	/* Enable PIO interrupt lines. */
	pio_enable_interrupt(PUSH_BUTTON_PIO, PUSH_BUTTON_PIN_MSK);
  4015a4:	4620      	mov	r0, r4
  4015a6:	2104      	movs	r1, #4
  4015a8:	4b74      	ldr	r3, [pc, #464]	; (40177c <main+0x268>)
  4015aa:	4798      	blx	r3
 */
static void init_vsync_interrupts(void)
{
	/* Initialize PIO interrupt handler, see PIO definition in conf_board.h
	**/
	pio_handler_set(OV7740_VSYNC_PIO, OV7740_VSYNC_ID, OV7740_VSYNC_MASK,
  4015ac:	4b74      	ldr	r3, [pc, #464]	; (401780 <main+0x26c>)
  4015ae:	9300      	str	r3, [sp, #0]
  4015b0:	4620      	mov	r0, r4
  4015b2:	210b      	movs	r1, #11
  4015b4:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  4015b8:	2301      	movs	r3, #1
  4015ba:	47c0      	blx	r8
  4015bc:	6037      	str	r7, [r6, #0]
 * \param ul_id Corresponding PIO ID.
 */
static void pio_capture_init(Pio *p_pio, uint32_t ul_id)
{
	/* Enable periphral clock */
	pmc_enable_periph_clk(ul_id);
  4015be:	200b      	movs	r0, #11
  4015c0:	47a8      	blx	r5

	/* Disable pio capture */
	p_pio->PIO_PCMR &= ~((uint32_t)PIO_PCMR_PCEN);
  4015c2:	f8d4 3150 	ldr.w	r3, [r4, #336]	; 0x150
  4015c6:	f023 0301 	bic.w	r3, r3, #1
  4015ca:	f8c4 3150 	str.w	r3, [r4, #336]	; 0x150

	/* Disable rxbuff interrupt */
	p_pio->PIO_PCIDR |= PIO_PCIDR_RXBUFF;
  4015ce:	f8d4 3158 	ldr.w	r3, [r4, #344]	; 0x158
  4015d2:	f043 0308 	orr.w	r3, r3, #8
  4015d6:	f8c4 3158 	str.w	r3, [r4, #344]	; 0x158

	/* 32bit width*/
	p_pio->PIO_PCMR &= ~((uint32_t)PIO_PCMR_DSIZE_Msk);
  4015da:	f8d4 3150 	ldr.w	r3, [r4, #336]	; 0x150
  4015de:	f023 0330 	bic.w	r3, r3, #48	; 0x30
  4015e2:	f8c4 3150 	str.w	r3, [r4, #336]	; 0x150
	p_pio->PIO_PCMR |= PIO_PCMR_DSIZE_WORD;
  4015e6:	f8d4 3150 	ldr.w	r3, [r4, #336]	; 0x150
  4015ea:	f043 0320 	orr.w	r3, r3, #32
  4015ee:	f8c4 3150 	str.w	r3, [r4, #336]	; 0x150

	/* Only HSYNC and VSYNC enabled */
	p_pio->PIO_PCMR &= ~((uint32_t)PIO_PCMR_ALWYS);
  4015f2:	f8d4 3150 	ldr.w	r3, [r4, #336]	; 0x150
  4015f6:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  4015fa:	f8c4 3150 	str.w	r3, [r4, #336]	; 0x150
	p_pio->PIO_PCMR &= ~((uint32_t)PIO_PCMR_HALFS);
  4015fe:	f8d4 3150 	ldr.w	r3, [r4, #336]	; 0x150
  401602:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
  401606:	f8c4 3150 	str.w	r3, [r4, #336]	; 0x150

#if !defined(DEFAULT_MODE_COLORED)
	/* Samples only data with even index */
	p_pio->PIO_PCMR |= PIO_PCMR_HALFS;
  40160a:	f8d4 3150 	ldr.w	r3, [r4, #336]	; 0x150
  40160e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
  401612:	f8c4 3150 	str.w	r3, [r4, #336]	; 0x150
	p_pio->PIO_PCMR &= ~((uint32_t)PIO_PCMR_FRSTS);
  401616:	f8d4 3150 	ldr.w	r3, [r4, #336]	; 0x150
  40161a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  40161e:	f8c4 3150 	str.w	r3, [r4, #336]	; 0x150

	/* Init PIO capture*/
	pio_capture_init(OV_DATA_BUS_PIO, OV_DATA_BUS_ID);

	/* Turn on ov7740 image sensor using power pin */
	ov_power(true, OV_POWER_PIO, OV_POWER_MASK);
  401622:	2001      	movs	r0, #1
  401624:	4957      	ldr	r1, [pc, #348]	; (401784 <main+0x270>)
  401626:	f44f 6280 	mov.w	r2, #1024	; 0x400
  40162a:	4b57      	ldr	r3, [pc, #348]	; (401788 <main+0x274>)
  40162c:	4798      	blx	r3

	/* Init PCK0 to work at 24 Mhz */
	/* 96/4=24 Mhz */
	PMC->PMC_PCK[0] = (PMC_PCK_PRES_CLK_4 | PMC_PCK_CSS_PLLA_CLK);
  40162e:	4b57      	ldr	r3, [pc, #348]	; (40178c <main+0x278>)
  401630:	2222      	movs	r2, #34	; 0x22
  401632:	641a      	str	r2, [r3, #64]	; 0x40
	PMC->PMC_SCER = PMC_SCER_PCK0;
  401634:	f44f 7280 	mov.w	r2, #256	; 0x100
  401638:	601a      	str	r2, [r3, #0]
	while (!(PMC->PMC_SCSR & PMC_SCSR_PCK0)) {
  40163a:	689a      	ldr	r2, [r3, #8]
  40163c:	f412 7f80 	tst.w	r2, #256	; 0x100
  401640:	d0fb      	beq.n	40163a <main+0x126>
	}

	/* Enable TWI peripheral */
	pmc_enable_periph_clk(ID_BOARD_TWI);
  401642:	2013      	movs	r0, #19
  401644:	4b41      	ldr	r3, [pc, #260]	; (40174c <main+0x238>)
  401646:	4798      	blx	r3

	/* Init TWI peripheral */
	opt.master_clk = sysclk_get_cpu_hz();
  401648:	4b51      	ldr	r3, [pc, #324]	; (401790 <main+0x27c>)
  40164a:	9303      	str	r3, [sp, #12]
	opt.speed      = TWI_CLK;
  40164c:	4b51      	ldr	r3, [pc, #324]	; (401794 <main+0x280>)
  40164e:	9304      	str	r3, [sp, #16]
	twi_master_init(BOARD_TWI, &opt);
  401650:	4851      	ldr	r0, [pc, #324]	; (401798 <main+0x284>)
  401652:	a903      	add	r1, sp, #12
  401654:	4b51      	ldr	r3, [pc, #324]	; (40179c <main+0x288>)
  401656:	4798      	blx	r3

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
  401658:	4b47      	ldr	r3, [pc, #284]	; (401778 <main+0x264>)
  40165a:	f44f 2200 	mov.w	r2, #524288	; 0x80000
  40165e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
  401662:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
  401666:	2100      	movs	r1, #0
  401668:	f883 1313 	strb.w	r1, [r3, #787]	; 0x313
    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
/*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  40166c:	601a      	str	r2, [r3, #0]
	NVIC_ClearPendingIRQ(BOARD_TWI_IRQn);
	NVIC_SetPriority(BOARD_TWI_IRQn, 0);
	NVIC_EnableIRQ(BOARD_TWI_IRQn);

	/* ov7740 Initialization */
	while (ov_init(BOARD_TWI) == 1) {
  40166e:	4d4a      	ldr	r5, [pc, #296]	; (401798 <main+0x284>)
  401670:	4c4b      	ldr	r4, [pc, #300]	; (4017a0 <main+0x28c>)
  401672:	4628      	mov	r0, r5
  401674:	47a0      	blx	r4
  401676:	2801      	cmp	r0, #1
  401678:	d0fb      	beq.n	401672 <main+0x15e>
	}

	/* ov7740 configuration */
	ov_configure(BOARD_TWI, QVGA_YUV422_20FPS);
  40167a:	4847      	ldr	r0, [pc, #284]	; (401798 <main+0x284>)
  40167c:	2102      	movs	r1, #2
  40167e:	4b49      	ldr	r3, [pc, #292]	; (4017a4 <main+0x290>)
  401680:	4798      	blx	r3

	/* Wait 3 seconds to let the image sensor to adapt to environment */
	delay_ms(3000);
  401682:	4849      	ldr	r0, [pc, #292]	; (4017a8 <main+0x294>)
  401684:	4b49      	ldr	r3, [pc, #292]	; (4017ac <main+0x298>)
  401686:	4798      	blx	r3

	/* OV7740 image sensor initialization*/
	capture_init();

	/* LCD display information*/
	ili9325_fill(COLOR_TURQUOISE);
  401688:	482b      	ldr	r0, [pc, #172]	; (401738 <main+0x224>)
  40168a:	4b2c      	ldr	r3, [pc, #176]	; (40173c <main+0x228>)
  40168c:	4798      	blx	r3
	ili9325_draw_string(0, 20,
  40168e:	2000      	movs	r0, #0
  401690:	2114      	movs	r1, #20
  401692:	4a2b      	ldr	r2, [pc, #172]	; (401740 <main+0x22c>)
  401694:	4c2b      	ldr	r4, [pc, #172]	; (401744 <main+0x230>)
  401696:	47a0      	blx	r4
			(uint8_t *)"OV7740 image sensor\ncapture example");
	ili9325_draw_string(0, 80,
  401698:	2000      	movs	r0, #0
  40169a:	2150      	movs	r1, #80	; 0x50
  40169c:	4a44      	ldr	r2, [pc, #272]	; (4017b0 <main+0x29c>)
  40169e:	47a0      	blx	r4
			(uint8_t *)"Please Press button\nto start processing\n barcodes");
	
	time_tick_init();
  4016a0:	4b44      	ldr	r3, [pc, #272]	; (4017b4 <main+0x2a0>)
  4016a2:	4798      	blx	r3

	while (1) {
			
		if (g_ul_push_button_trigger) {
  4016a4:	f8df 913c 	ldr.w	r9, [pc, #316]	; 4017e4 <main+0x2d0>

	/* Set cap_rows value*/
	g_us_cap_rows = IMAGE_HEIGHT;

	/* Enable vsync interrupt*/
	pio_enable_interrupt(OV7740_VSYNC_PIO, OV7740_VSYNC_MASK);
  4016a8:	4e43      	ldr	r6, [pc, #268]	; (4017b8 <main+0x2a4>)

	/* Capture acquisition will start on rising edge of Vsync signal.
	 * So wait g_vsync_flag = 1 before start process
	 */
	while (!g_ul_vsync_flag) {
  4016aa:	4f44      	ldr	r7, [pc, #272]	; (4017bc <main+0x2a8>)

	/* Set cap_rows value*/
	g_us_cap_rows = IMAGE_HEIGHT;

	/* Enable vsync interrupt*/
	pio_enable_interrupt(OV7740_VSYNC_PIO, OV7740_VSYNC_MASK);
  4016ac:	46b0      	mov	r8, r6

		} 
		
		if (g_display_splash) {
			display_init();
			ili9325_fill(COLOR_TOMATO);
  4016ae:	f8df a138 	ldr.w	sl, [pc, #312]	; 4017e8 <main+0x2d4>
	}
	static inline void LCD_WD(uint8_t lcd_data)
	{
		*((volatile uint8_t *)((BOARD_ILI9325_ADDR) | (BOARD_ILI9325_RS))) = lcd_data;
  4016b2:	4d43      	ldr	r5, [pc, #268]	; (4017c0 <main+0x2ac>)
	
	time_tick_init();

	while (1) {
			
		if (g_ul_push_button_trigger) {
  4016b4:	f8d9 3000 	ldr.w	r3, [r9]
  4016b8:	2b00      	cmp	r3, #0
  4016ba:	f000 80e0 	beq.w	40187e <main+0x36a>
    SysTick_Config(sysclk_get_cpu_hz() / 1000); 
}

uint32_t time_tick_get(void)
{
    return g_ms_ticks;
  4016be:	4b41      	ldr	r3, [pc, #260]	; (4017c4 <main+0x2b0>)
  4016c0:	681a      	ldr	r2, [r3, #0]
			
		if (g_ul_push_button_trigger) {

			/* Capture a picture and send corresponding data to external
			 * memory */			
			g_ul_begin_capture_time = time_tick_get();
  4016c2:	4b41      	ldr	r3, [pc, #260]	; (4017c8 <main+0x2b4>)
  4016c4:	601a      	str	r2, [r3, #0]
 * \brief Start picture capture.
 */
static void start_capture(void)
{
	/* Set capturing destination address*/
	g_p_uc_cap_dest_buf = (uint8_t *)CAP_DEST;
  4016c6:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
  4016ca:	4b40      	ldr	r3, [pc, #256]	; (4017cc <main+0x2b8>)
  4016cc:	601a      	str	r2, [r3, #0]

	/* Set cap_rows value*/
	g_us_cap_rows = IMAGE_HEIGHT;
  4016ce:	22f0      	movs	r2, #240	; 0xf0
  4016d0:	4b3f      	ldr	r3, [pc, #252]	; (4017d0 <main+0x2bc>)
  4016d2:	801a      	strh	r2, [r3, #0]

	/* Enable vsync interrupt*/
	pio_enable_interrupt(OV7740_VSYNC_PIO, OV7740_VSYNC_MASK);
  4016d4:	4640      	mov	r0, r8
  4016d6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
  4016da:	4b28      	ldr	r3, [pc, #160]	; (40177c <main+0x268>)
  4016dc:	4798      	blx	r3

	/* Capture acquisition will start on rising edge of Vsync signal.
	 * So wait g_vsync_flag = 1 before start process
	 */
	while (!g_ul_vsync_flag) {
  4016de:	683b      	ldr	r3, [r7, #0]
  4016e0:	2b00      	cmp	r3, #0
  4016e2:	d0fc      	beq.n	4016de <main+0x1ca>
	}

	/* Disable vsync interrupt*/
	pio_disable_interrupt(OV7740_VSYNC_PIO, OV7740_VSYNC_MASK);
  4016e4:	4640      	mov	r0, r8
  4016e6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
  4016ea:	4b3a      	ldr	r3, [pc, #232]	; (4017d4 <main+0x2c0>)
  4016ec:	4798      	blx	r3

	/* Enable pio capture*/
	pio_capture_enable(OV7740_DATA_BUS_PIO);
  4016ee:	4640      	mov	r0, r8
  4016f0:	4b39      	ldr	r3, [pc, #228]	; (4017d8 <main+0x2c4>)
  4016f2:	4798      	blx	r3

	/* Capture data and send it to external SRAM memory thanks to PDC
	 * feature */
	pio_capture_to_buffer(OV7740_DATA_BUS_PIO, g_p_uc_cap_dest_buf,
  4016f4:	4b35      	ldr	r3, [pc, #212]	; (4017cc <main+0x2b8>)
  4016f6:	6819      	ldr	r1, [r3, #0]
			(g_us_cap_line * g_us_cap_rows) >> 2);
  4016f8:	4b38      	ldr	r3, [pc, #224]	; (4017dc <main+0x2c8>)
  4016fa:	881a      	ldrh	r2, [r3, #0]
  4016fc:	4b34      	ldr	r3, [pc, #208]	; (4017d0 <main+0x2bc>)
  4016fe:	881b      	ldrh	r3, [r3, #0]
  401700:	fb03 f302 	mul.w	r3, r3, r2
  401704:	109b      	asrs	r3, r3, #2
 */
static uint8_t pio_capture_to_buffer(Pio *p_pio, uint8_t *uc_buf,
		uint32_t ul_size)
{
	/* Check if the first PDC bank is free */
	if ((p_pio->PIO_RCR == 0) && (p_pio->PIO_RNCR == 0)) {
  401706:	f8d6 216c 	ldr.w	r2, [r6, #364]	; 0x16c
  40170a:	2a00      	cmp	r2, #0
  40170c:	d16e      	bne.n	4017ec <main+0x2d8>
  40170e:	f8d6 217c 	ldr.w	r2, [r6, #380]	; 0x17c
  401712:	2a00      	cmp	r2, #0
  401714:	d16a      	bne.n	4017ec <main+0x2d8>
		p_pio->PIO_RPR = (uint32_t)uc_buf;
  401716:	f8c6 1168 	str.w	r1, [r6, #360]	; 0x168
		p_pio->PIO_RCR = ul_size;
  40171a:	f8c6 316c 	str.w	r3, [r6, #364]	; 0x16c
		p_pio->PIO_PTCR = PIO_PTCR_RXTEN;
  40171e:	2301      	movs	r3, #1
  401720:	f8c6 3188 	str.w	r3, [r6, #392]	; 0x188
  401724:	e069      	b.n	4017fa <main+0x2e6>
  401726:	bf00      	nop
  401728:	00400129 	.word	0x00400129
  40172c:	0040018d 	.word	0x0040018d
  401730:	00400e2d 	.word	0x00400e2d
  401734:	0040137d 	.word	0x0040137d
  401738:	0040e0d0 	.word	0x0040e0d0
  40173c:	00400871 	.word	0x00400871
  401740:	004031c8 	.word	0x004031c8
  401744:	00400909 	.word	0x00400909
  401748:	004031ec 	.word	0x004031ec
  40174c:	00400e85 	.word	0x00400e85
  401750:	400e0000 	.word	0x400e0000
  401754:	00030002 	.word	0x00030002
  401758:	004009b5 	.word	0x004009b5
  40175c:	06040504 	.word	0x06040504
  401760:	004009bd 	.word	0x004009bd
  401764:	00070006 	.word	0x00070006
  401768:	004009c5 	.word	0x004009c5
  40176c:	004009cd 	.word	0x004009cd
  401770:	004009d5 	.word	0x004009d5
  401774:	00401359 	.word	0x00401359
  401778:	e000e100 	.word	0xe000e100
  40177c:	00400b19 	.word	0x00400b19
  401780:	0040134d 	.word	0x0040134d
  401784:	400e1200 	.word	0x400e1200
  401788:	00400345 	.word	0x00400345
  40178c:	400e0400 	.word	0x400e0400
  401790:	07270e00 	.word	0x07270e00
  401794:	00061a80 	.word	0x00061a80
  401798:	40018000 	.word	0x40018000
  40179c:	00400f1d 	.word	0x00400f1d
  4017a0:	004003dd 	.word	0x004003dd
  4017a4:	004004f5 	.word	0x004004f5
  4017a8:	01885e6e 	.word	0x01885e6e
  4017ac:	20000001 	.word	0x20000001
  4017b0:	00403210 	.word	0x00403210
  4017b4:	00401421 	.word	0x00401421
  4017b8:	400e0e00 	.word	0x400e0e00
  4017bc:	20000cbc 	.word	0x20000cbc
  4017c0:	62000002 	.word	0x62000002
  4017c4:	20000ccc 	.word	0x20000ccc
  4017c8:	20000cb8 	.word	0x20000cb8
  4017cc:	20000d08 	.word	0x20000d08
  4017d0:	20000010 	.word	0x20000010
  4017d4:	00400b21 	.word	0x00400b21
  4017d8:	00400c51 	.word	0x00400c51
  4017dc:	20000012 	.word	0x20000012
  4017e0:	00400ce9 	.word	0x00400ce9
  4017e4:	20000cb0 	.word	0x20000cb0
  4017e8:	00ff6347 	.word	0x00ff6347
		return 1;
	} else if (p_pio->PIO_RNCR == 0) {
  4017ec:	f8d6 217c 	ldr.w	r2, [r6, #380]	; 0x17c
  4017f0:	b91a      	cbnz	r2, 4017fa <main+0x2e6>
		p_pio->PIO_RNPR = (uint32_t)uc_buf;
  4017f2:	f8c6 1178 	str.w	r1, [r6, #376]	; 0x178
		p_pio->PIO_RNCR = ul_size;
  4017f6:	f8c6 317c 	str.w	r3, [r6, #380]	; 0x17c
	 * feature */
	pio_capture_to_buffer(OV7740_DATA_BUS_PIO, g_p_uc_cap_dest_buf,
			(g_us_cap_line * g_us_cap_rows) >> 2);

	/* Wait end of capture*/
	while (!((OV7740_DATA_BUS_PIO->PIO_PCISR & PIO_PCIMR_RXBUFF) ==
  4017fa:	f8d6 3160 	ldr.w	r3, [r6, #352]	; 0x160
  4017fe:	f013 0f08 	tst.w	r3, #8
  401802:	d0fa      	beq.n	4017fa <main+0x2e6>
			PIO_PCIMR_RXBUFF)) {
	}

	/* Disable pio capture*/
	pio_capture_disable(OV7740_DATA_BUS_PIO);
  401804:	4640      	mov	r0, r8
  401806:	4b27      	ldr	r3, [pc, #156]	; (4018a4 <main+0x390>)
  401808:	4798      	blx	r3

	/* Reset vsync flag*/
	g_ul_vsync_flag = false;
  40180a:	f04f 0b00 	mov.w	fp, #0
  40180e:	f8c7 b000 	str.w	fp, [r7]
    SysTick_Config(sysclk_get_cpu_hz() / 1000); 
}

uint32_t time_tick_get(void)
{
    return g_ms_ticks;
  401812:	4b25      	ldr	r3, [pc, #148]	; (4018a8 <main+0x394>)
  401814:	6819      	ldr	r1, [r3, #0]

			/* Capture a picture and send corresponding data to external
			 * memory */			
			g_ul_begin_capture_time = time_tick_get();
			start_capture();
			g_ul_end_capture_time = time_tick_get();
  401816:	4a25      	ldr	r2, [pc, #148]	; (4018ac <main+0x398>)
  401818:	6011      	str	r1, [r2, #0]
    SysTick_Config(sysclk_get_cpu_hz() / 1000); 
}

uint32_t time_tick_get(void)
{
    return g_ms_ticks;
  40181a:	6819      	ldr	r1, [r3, #0]
			 * memory */			
			g_ul_begin_capture_time = time_tick_get();
			start_capture();
			g_ul_end_capture_time = time_tick_get();
			
			g_ul_begin_cv_time = time_tick_get();
  40181c:	4a24      	ldr	r2, [pc, #144]	; (4018b0 <main+0x39c>)
  40181e:	6011      	str	r1, [r2, #0]
    SysTick_Config(sysclk_get_cpu_hz() / 1000); 
}

uint32_t time_tick_get(void)
{
    return g_ms_ticks;
  401820:	681a      	ldr	r2, [r3, #0]
			start_capture();
			g_ul_end_capture_time = time_tick_get();
			
			g_ul_begin_cv_time = time_tick_get();
			//threshold_otsu();
			g_ul_end_cv_time = time_tick_get();
  401822:	4b24      	ldr	r3, [pc, #144]	; (4018b4 <main+0x3a0>)
  401824:	601a      	str	r2, [r3, #0]


			edge_detect_sobel();
  401826:	4b24      	ldr	r3, [pc, #144]	; (4018b8 <main+0x3a4>)
  401828:	4798      	blx	r3
static void draw_frame_yuv_bw8( void )
{
	volatile uint32_t ul_cursor;
	uint8_t *p_uc_data;

	p_uc_data = (uint8_t *)g_p_uc_cap_dest_buf;
  40182a:	4b24      	ldr	r3, [pc, #144]	; (4018bc <main+0x3a8>)
  40182c:	681c      	ldr	r4, [r3, #0]

/* Define EBI access for ILI9325 8-bit System Interface.*/
#if defined(BOARD_ILI9325_ADDR) && defined (BOARD_ILI9325_RS)
	static inline void LCD_IR(uint8_t lcd_index)
	{
		*((volatile uint8_t *)(BOARD_ILI9325_ADDR)) = lcd_index; /* ILI9325 index register address */
  40182e:	f04f 43c4 	mov.w	r3, #1644167168	; 0x62000000
  401832:	f883 b000 	strb.w	fp, [r3]
  401836:	2203      	movs	r2, #3
  401838:	701a      	strb	r2, [r3, #0]
	}
	static inline void LCD_WD(uint8_t lcd_data)
	{
		*((volatile uint8_t *)((BOARD_ILI9325_ADDR) | (BOARD_ILI9325_RS))) = lcd_data;
  40183a:	23d0      	movs	r3, #208	; 0xd0
  40183c:	702b      	strb	r3, [r5, #0]
  40183e:	2388      	movs	r3, #136	; 0x88
  401840:	702b      	strb	r3, [r5, #0]
			ILI9325_ENTRY_MODE_DFM | ILI9325_ENTRY_MODE_TRI |
			ILI9325_ENTRY_MODE_ORG) >> 8) & 0xFF);
	LCD_WD((ILI9325_ENTRY_MODE_BGR | ILI9325_ENTRY_MODE_AM |
			ILI9325_ENTRY_MODE_DFM | ILI9325_ENTRY_MODE_TRI |
			ILI9325_ENTRY_MODE_ORG) & 0xFF);
	ili9325_draw_prepare(0, 0, IMAGE_HEIGHT, IMAGE_WIDTH);
  401842:	4658      	mov	r0, fp
  401844:	4659      	mov	r1, fp
  401846:	22f0      	movs	r2, #240	; 0xf0
  401848:	f44f 73a0 	mov.w	r3, #320	; 0x140
  40184c:	f8df c088 	ldr.w	ip, [pc, #136]	; 4018d8 <main+0x3c4>
  401850:	47e0      	blx	ip

	/* LCD pixel has 24bit data. In black and White mode data has 8bit only
	 * so
	 * this data must be written three time in LCD memory.
	 */
	for (ul_cursor = IMAGE_WIDTH * IMAGE_HEIGHT; ul_cursor != 0;
  401852:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
  401856:	9303      	str	r3, [sp, #12]
  401858:	9b03      	ldr	r3, [sp, #12]
  40185a:	b163      	cbz	r3, 401876 <main+0x362>
			ul_cursor--, p_uc_data++) {
		/* Black and White using Y */
		LCD_WD( *p_uc_data );
  40185c:	7823      	ldrb	r3, [r4, #0]
  40185e:	702b      	strb	r3, [r5, #0]
		LCD_WD( *p_uc_data );
  401860:	7823      	ldrb	r3, [r4, #0]
  401862:	702b      	strb	r3, [r5, #0]
		LCD_WD( *p_uc_data );
  401864:	f814 3b01 	ldrb.w	r3, [r4], #1
  401868:	702b      	strb	r3, [r5, #0]
	/* LCD pixel has 24bit data. In black and White mode data has 8bit only
	 * so
	 * this data must be written three time in LCD memory.
	 */
	for (ul_cursor = IMAGE_WIDTH * IMAGE_HEIGHT; ul_cursor != 0;
			ul_cursor--, p_uc_data++) {
  40186a:	9b03      	ldr	r3, [sp, #12]
  40186c:	3b01      	subs	r3, #1
  40186e:	9303      	str	r3, [sp, #12]

	/* LCD pixel has 24bit data. In black and White mode data has 8bit only
	 * so
	 * this data must be written three time in LCD memory.
	 */
	for (ul_cursor = IMAGE_WIDTH * IMAGE_HEIGHT; ul_cursor != 0;
  401870:	9b03      	ldr	r3, [sp, #12]
  401872:	2b00      	cmp	r3, #0
  401874:	d1f2      	bne.n	40185c <main+0x348>
    SysTick_Config(sysclk_get_cpu_hz() / 1000); 
}

uint32_t time_tick_get(void)
{
    return g_ms_ticks;
  401876:	4b0c      	ldr	r3, [pc, #48]	; (4018a8 <main+0x394>)
  401878:	681a      	ldr	r2, [r3, #0]
			/* Load picture data from external memory and display it on the
			 * LCD */
			_display();


			g_ul_begin_process_time = time_tick_get();
  40187a:	4b11      	ldr	r3, [pc, #68]	; (4018c0 <main+0x3ac>)
  40187c:	601a      	str	r2, [r3, #0]

			}*/

		} 
		
		if (g_display_splash) {
  40187e:	4b11      	ldr	r3, [pc, #68]	; (4018c4 <main+0x3b0>)
  401880:	681b      	ldr	r3, [r3, #0]
  401882:	2b00      	cmp	r3, #0
  401884:	f43f af16 	beq.w	4016b4 <main+0x1a0>
			display_init();
  401888:	4b0f      	ldr	r3, [pc, #60]	; (4018c8 <main+0x3b4>)
  40188a:	4798      	blx	r3
			ili9325_fill(COLOR_TOMATO);
  40188c:	4650      	mov	r0, sl
  40188e:	4b0f      	ldr	r3, [pc, #60]	; (4018cc <main+0x3b8>)
  401890:	4798      	blx	r3
			ili9325_draw_string(0, 80, (uint8_t *)"Press button\nto start decoding \nbrah!");
  401892:	2000      	movs	r0, #0
  401894:	2150      	movs	r1, #80	; 0x50
  401896:	4a0e      	ldr	r2, [pc, #56]	; (4018d0 <main+0x3bc>)
  401898:	4b0e      	ldr	r3, [pc, #56]	; (4018d4 <main+0x3c0>)
  40189a:	4798      	blx	r3
			g_display_splash = false;
  40189c:	2200      	movs	r2, #0
  40189e:	4b09      	ldr	r3, [pc, #36]	; (4018c4 <main+0x3b0>)
  4018a0:	601a      	str	r2, [r3, #0]
  4018a2:	e706      	b.n	4016b2 <main+0x19e>
  4018a4:	00400c69 	.word	0x00400c69
  4018a8:	20000ccc 	.word	0x20000ccc
  4018ac:	20000cc4 	.word	0x20000cc4
  4018b0:	20000cc0 	.word	0x20000cc0
  4018b4:	20000cb4 	.word	0x20000cb4
  4018b8:	0040144d 	.word	0x0040144d
  4018bc:	20000d08 	.word	0x20000d08
  4018c0:	20000cac 	.word	0x20000cac
  4018c4:	20000cc8 	.word	0x20000cc8
  4018c8:	0040137d 	.word	0x0040137d
  4018cc:	00400871 	.word	0x00400871
  4018d0:	00403244 	.word	0x00403244
  4018d4:	00400909 	.word	0x00400909
  4018d8:	004008e1 	.word	0x004008e1

004018dc <_malloc_trim_r>:
  4018dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4018de:	4f23      	ldr	r7, [pc, #140]	; (40196c <_malloc_trim_r+0x90>)
  4018e0:	460c      	mov	r4, r1
  4018e2:	4606      	mov	r6, r0
  4018e4:	f000 fbe2 	bl	4020ac <__malloc_lock>
  4018e8:	68bb      	ldr	r3, [r7, #8]
  4018ea:	685d      	ldr	r5, [r3, #4]
  4018ec:	f025 0503 	bic.w	r5, r5, #3
  4018f0:	1b29      	subs	r1, r5, r4
  4018f2:	f601 71ef 	addw	r1, r1, #4079	; 0xfef
  4018f6:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
  4018fa:	f021 010f 	bic.w	r1, r1, #15
  4018fe:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
  401902:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
  401906:	db07      	blt.n	401918 <_malloc_trim_r+0x3c>
  401908:	4630      	mov	r0, r6
  40190a:	2100      	movs	r1, #0
  40190c:	f000 fbd2 	bl	4020b4 <_sbrk_r>
  401910:	68bb      	ldr	r3, [r7, #8]
  401912:	442b      	add	r3, r5
  401914:	4298      	cmp	r0, r3
  401916:	d004      	beq.n	401922 <_malloc_trim_r+0x46>
  401918:	4630      	mov	r0, r6
  40191a:	f000 fbc9 	bl	4020b0 <__malloc_unlock>
  40191e:	2000      	movs	r0, #0
  401920:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  401922:	4630      	mov	r0, r6
  401924:	4261      	negs	r1, r4
  401926:	f000 fbc5 	bl	4020b4 <_sbrk_r>
  40192a:	3001      	adds	r0, #1
  40192c:	d00d      	beq.n	40194a <_malloc_trim_r+0x6e>
  40192e:	4b10      	ldr	r3, [pc, #64]	; (401970 <_malloc_trim_r+0x94>)
  401930:	68ba      	ldr	r2, [r7, #8]
  401932:	6819      	ldr	r1, [r3, #0]
  401934:	1b2d      	subs	r5, r5, r4
  401936:	f045 0501 	orr.w	r5, r5, #1
  40193a:	4630      	mov	r0, r6
  40193c:	1b09      	subs	r1, r1, r4
  40193e:	6055      	str	r5, [r2, #4]
  401940:	6019      	str	r1, [r3, #0]
  401942:	f000 fbb5 	bl	4020b0 <__malloc_unlock>
  401946:	2001      	movs	r0, #1
  401948:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40194a:	4630      	mov	r0, r6
  40194c:	2100      	movs	r1, #0
  40194e:	f000 fbb1 	bl	4020b4 <_sbrk_r>
  401952:	68ba      	ldr	r2, [r7, #8]
  401954:	1a83      	subs	r3, r0, r2
  401956:	2b0f      	cmp	r3, #15
  401958:	ddde      	ble.n	401918 <_malloc_trim_r+0x3c>
  40195a:	4c06      	ldr	r4, [pc, #24]	; (401974 <_malloc_trim_r+0x98>)
  40195c:	4904      	ldr	r1, [pc, #16]	; (401970 <_malloc_trim_r+0x94>)
  40195e:	6824      	ldr	r4, [r4, #0]
  401960:	f043 0301 	orr.w	r3, r3, #1
  401964:	1b00      	subs	r0, r0, r4
  401966:	6053      	str	r3, [r2, #4]
  401968:	6008      	str	r0, [r1, #0]
  40196a:	e7d5      	b.n	401918 <_malloc_trim_r+0x3c>
  40196c:	20000444 	.word	0x20000444
  401970:	20000cdc 	.word	0x20000cdc
  401974:	20000850 	.word	0x20000850

00401978 <_free_r>:
  401978:	2900      	cmp	r1, #0
  40197a:	d04e      	beq.n	401a1a <_free_r+0xa2>
  40197c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  401980:	460c      	mov	r4, r1
  401982:	4680      	mov	r8, r0
  401984:	f000 fb92 	bl	4020ac <__malloc_lock>
  401988:	f854 7c04 	ldr.w	r7, [r4, #-4]
  40198c:	4962      	ldr	r1, [pc, #392]	; (401b18 <_free_r+0x1a0>)
  40198e:	f027 0201 	bic.w	r2, r7, #1
  401992:	f1a4 0508 	sub.w	r5, r4, #8
  401996:	18ab      	adds	r3, r5, r2
  401998:	688e      	ldr	r6, [r1, #8]
  40199a:	6858      	ldr	r0, [r3, #4]
  40199c:	429e      	cmp	r6, r3
  40199e:	f020 0003 	bic.w	r0, r0, #3
  4019a2:	d05a      	beq.n	401a5a <_free_r+0xe2>
  4019a4:	07fe      	lsls	r6, r7, #31
  4019a6:	6058      	str	r0, [r3, #4]
  4019a8:	d40b      	bmi.n	4019c2 <_free_r+0x4a>
  4019aa:	f854 7c08 	ldr.w	r7, [r4, #-8]
  4019ae:	1bed      	subs	r5, r5, r7
  4019b0:	f101 0e08 	add.w	lr, r1, #8
  4019b4:	68ac      	ldr	r4, [r5, #8]
  4019b6:	4574      	cmp	r4, lr
  4019b8:	443a      	add	r2, r7
  4019ba:	d067      	beq.n	401a8c <_free_r+0x114>
  4019bc:	68ef      	ldr	r7, [r5, #12]
  4019be:	60e7      	str	r7, [r4, #12]
  4019c0:	60bc      	str	r4, [r7, #8]
  4019c2:	181c      	adds	r4, r3, r0
  4019c4:	6864      	ldr	r4, [r4, #4]
  4019c6:	07e4      	lsls	r4, r4, #31
  4019c8:	d40c      	bmi.n	4019e4 <_free_r+0x6c>
  4019ca:	4f54      	ldr	r7, [pc, #336]	; (401b1c <_free_r+0x1a4>)
  4019cc:	689c      	ldr	r4, [r3, #8]
  4019ce:	42bc      	cmp	r4, r7
  4019d0:	4402      	add	r2, r0
  4019d2:	d07c      	beq.n	401ace <_free_r+0x156>
  4019d4:	68d8      	ldr	r0, [r3, #12]
  4019d6:	60e0      	str	r0, [r4, #12]
  4019d8:	f042 0301 	orr.w	r3, r2, #1
  4019dc:	6084      	str	r4, [r0, #8]
  4019de:	606b      	str	r3, [r5, #4]
  4019e0:	50aa      	str	r2, [r5, r2]
  4019e2:	e003      	b.n	4019ec <_free_r+0x74>
  4019e4:	f042 0301 	orr.w	r3, r2, #1
  4019e8:	606b      	str	r3, [r5, #4]
  4019ea:	50aa      	str	r2, [r5, r2]
  4019ec:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
  4019f0:	d214      	bcs.n	401a1c <_free_r+0xa4>
  4019f2:	08d2      	lsrs	r2, r2, #3
  4019f4:	eb01 03c2 	add.w	r3, r1, r2, lsl #3
  4019f8:	6848      	ldr	r0, [r1, #4]
  4019fa:	689f      	ldr	r7, [r3, #8]
  4019fc:	60af      	str	r7, [r5, #8]
  4019fe:	1092      	asrs	r2, r2, #2
  401a00:	2401      	movs	r4, #1
  401a02:	fa04 f202 	lsl.w	r2, r4, r2
  401a06:	4310      	orrs	r0, r2
  401a08:	60eb      	str	r3, [r5, #12]
  401a0a:	6048      	str	r0, [r1, #4]
  401a0c:	609d      	str	r5, [r3, #8]
  401a0e:	60fd      	str	r5, [r7, #12]
  401a10:	4640      	mov	r0, r8
  401a12:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  401a16:	f000 bb4b 	b.w	4020b0 <__malloc_unlock>
  401a1a:	4770      	bx	lr
  401a1c:	0a53      	lsrs	r3, r2, #9
  401a1e:	2b04      	cmp	r3, #4
  401a20:	d847      	bhi.n	401ab2 <_free_r+0x13a>
  401a22:	0993      	lsrs	r3, r2, #6
  401a24:	f103 0438 	add.w	r4, r3, #56	; 0x38
  401a28:	0060      	lsls	r0, r4, #1
  401a2a:	eb01 0080 	add.w	r0, r1, r0, lsl #2
  401a2e:	493a      	ldr	r1, [pc, #232]	; (401b18 <_free_r+0x1a0>)
  401a30:	6883      	ldr	r3, [r0, #8]
  401a32:	4283      	cmp	r3, r0
  401a34:	d043      	beq.n	401abe <_free_r+0x146>
  401a36:	6859      	ldr	r1, [r3, #4]
  401a38:	f021 0103 	bic.w	r1, r1, #3
  401a3c:	4291      	cmp	r1, r2
  401a3e:	d902      	bls.n	401a46 <_free_r+0xce>
  401a40:	689b      	ldr	r3, [r3, #8]
  401a42:	4298      	cmp	r0, r3
  401a44:	d1f7      	bne.n	401a36 <_free_r+0xbe>
  401a46:	68da      	ldr	r2, [r3, #12]
  401a48:	60ea      	str	r2, [r5, #12]
  401a4a:	60ab      	str	r3, [r5, #8]
  401a4c:	4640      	mov	r0, r8
  401a4e:	6095      	str	r5, [r2, #8]
  401a50:	60dd      	str	r5, [r3, #12]
  401a52:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  401a56:	f000 bb2b 	b.w	4020b0 <__malloc_unlock>
  401a5a:	07ff      	lsls	r7, r7, #31
  401a5c:	4402      	add	r2, r0
  401a5e:	d407      	bmi.n	401a70 <_free_r+0xf8>
  401a60:	f854 3c08 	ldr.w	r3, [r4, #-8]
  401a64:	1aed      	subs	r5, r5, r3
  401a66:	441a      	add	r2, r3
  401a68:	68a8      	ldr	r0, [r5, #8]
  401a6a:	68eb      	ldr	r3, [r5, #12]
  401a6c:	60c3      	str	r3, [r0, #12]
  401a6e:	6098      	str	r0, [r3, #8]
  401a70:	4b2b      	ldr	r3, [pc, #172]	; (401b20 <_free_r+0x1a8>)
  401a72:	681b      	ldr	r3, [r3, #0]
  401a74:	f042 0001 	orr.w	r0, r2, #1
  401a78:	429a      	cmp	r2, r3
  401a7a:	6068      	str	r0, [r5, #4]
  401a7c:	608d      	str	r5, [r1, #8]
  401a7e:	d3c7      	bcc.n	401a10 <_free_r+0x98>
  401a80:	4b28      	ldr	r3, [pc, #160]	; (401b24 <_free_r+0x1ac>)
  401a82:	4640      	mov	r0, r8
  401a84:	6819      	ldr	r1, [r3, #0]
  401a86:	f7ff ff29 	bl	4018dc <_malloc_trim_r>
  401a8a:	e7c1      	b.n	401a10 <_free_r+0x98>
  401a8c:	1819      	adds	r1, r3, r0
  401a8e:	6849      	ldr	r1, [r1, #4]
  401a90:	07c9      	lsls	r1, r1, #31
  401a92:	d409      	bmi.n	401aa8 <_free_r+0x130>
  401a94:	68d9      	ldr	r1, [r3, #12]
  401a96:	689b      	ldr	r3, [r3, #8]
  401a98:	4402      	add	r2, r0
  401a9a:	f042 0001 	orr.w	r0, r2, #1
  401a9e:	60d9      	str	r1, [r3, #12]
  401aa0:	608b      	str	r3, [r1, #8]
  401aa2:	6068      	str	r0, [r5, #4]
  401aa4:	50aa      	str	r2, [r5, r2]
  401aa6:	e7b3      	b.n	401a10 <_free_r+0x98>
  401aa8:	f042 0301 	orr.w	r3, r2, #1
  401aac:	606b      	str	r3, [r5, #4]
  401aae:	50aa      	str	r2, [r5, r2]
  401ab0:	e7ae      	b.n	401a10 <_free_r+0x98>
  401ab2:	2b14      	cmp	r3, #20
  401ab4:	d814      	bhi.n	401ae0 <_free_r+0x168>
  401ab6:	f103 045b 	add.w	r4, r3, #91	; 0x5b
  401aba:	0060      	lsls	r0, r4, #1
  401abc:	e7b5      	b.n	401a2a <_free_r+0xb2>
  401abe:	684a      	ldr	r2, [r1, #4]
  401ac0:	10a4      	asrs	r4, r4, #2
  401ac2:	2001      	movs	r0, #1
  401ac4:	40a0      	lsls	r0, r4
  401ac6:	4302      	orrs	r2, r0
  401ac8:	604a      	str	r2, [r1, #4]
  401aca:	461a      	mov	r2, r3
  401acc:	e7bc      	b.n	401a48 <_free_r+0xd0>
  401ace:	f042 0301 	orr.w	r3, r2, #1
  401ad2:	614d      	str	r5, [r1, #20]
  401ad4:	610d      	str	r5, [r1, #16]
  401ad6:	60ec      	str	r4, [r5, #12]
  401ad8:	60ac      	str	r4, [r5, #8]
  401ada:	606b      	str	r3, [r5, #4]
  401adc:	50aa      	str	r2, [r5, r2]
  401ade:	e797      	b.n	401a10 <_free_r+0x98>
  401ae0:	2b54      	cmp	r3, #84	; 0x54
  401ae2:	d804      	bhi.n	401aee <_free_r+0x176>
  401ae4:	0b13      	lsrs	r3, r2, #12
  401ae6:	f103 046e 	add.w	r4, r3, #110	; 0x6e
  401aea:	0060      	lsls	r0, r4, #1
  401aec:	e79d      	b.n	401a2a <_free_r+0xb2>
  401aee:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
  401af2:	d804      	bhi.n	401afe <_free_r+0x186>
  401af4:	0bd3      	lsrs	r3, r2, #15
  401af6:	f103 0477 	add.w	r4, r3, #119	; 0x77
  401afa:	0060      	lsls	r0, r4, #1
  401afc:	e795      	b.n	401a2a <_free_r+0xb2>
  401afe:	f240 5054 	movw	r0, #1364	; 0x554
  401b02:	4283      	cmp	r3, r0
  401b04:	d804      	bhi.n	401b10 <_free_r+0x198>
  401b06:	0c93      	lsrs	r3, r2, #18
  401b08:	f103 047c 	add.w	r4, r3, #124	; 0x7c
  401b0c:	0060      	lsls	r0, r4, #1
  401b0e:	e78c      	b.n	401a2a <_free_r+0xb2>
  401b10:	20fc      	movs	r0, #252	; 0xfc
  401b12:	247e      	movs	r4, #126	; 0x7e
  401b14:	e789      	b.n	401a2a <_free_r+0xb2>
  401b16:	bf00      	nop
  401b18:	20000444 	.word	0x20000444
  401b1c:	2000044c 	.word	0x2000044c
  401b20:	2000084c 	.word	0x2000084c
  401b24:	20000cd8 	.word	0x20000cd8

00401b28 <__libc_init_array>:
  401b28:	b570      	push	{r4, r5, r6, lr}
  401b2a:	4e0f      	ldr	r6, [pc, #60]	; (401b68 <__libc_init_array+0x40>)
  401b2c:	4d0f      	ldr	r5, [pc, #60]	; (401b6c <__libc_init_array+0x44>)
  401b2e:	1b76      	subs	r6, r6, r5
  401b30:	10b6      	asrs	r6, r6, #2
  401b32:	bf18      	it	ne
  401b34:	2400      	movne	r4, #0
  401b36:	d005      	beq.n	401b44 <__libc_init_array+0x1c>
  401b38:	3401      	adds	r4, #1
  401b3a:	f855 3b04 	ldr.w	r3, [r5], #4
  401b3e:	4798      	blx	r3
  401b40:	42a6      	cmp	r6, r4
  401b42:	d1f9      	bne.n	401b38 <__libc_init_array+0x10>
  401b44:	4e0a      	ldr	r6, [pc, #40]	; (401b70 <__libc_init_array+0x48>)
  401b46:	4d0b      	ldr	r5, [pc, #44]	; (401b74 <__libc_init_array+0x4c>)
  401b48:	1b76      	subs	r6, r6, r5
  401b4a:	f001 fb93 	bl	403274 <_init>
  401b4e:	10b6      	asrs	r6, r6, #2
  401b50:	bf18      	it	ne
  401b52:	2400      	movne	r4, #0
  401b54:	d006      	beq.n	401b64 <__libc_init_array+0x3c>
  401b56:	3401      	adds	r4, #1
  401b58:	f855 3b04 	ldr.w	r3, [r5], #4
  401b5c:	4798      	blx	r3
  401b5e:	42a6      	cmp	r6, r4
  401b60:	d1f9      	bne.n	401b56 <__libc_init_array+0x2e>
  401b62:	bd70      	pop	{r4, r5, r6, pc}
  401b64:	bd70      	pop	{r4, r5, r6, pc}
  401b66:	bf00      	nop
  401b68:	00403280 	.word	0x00403280
  401b6c:	00403280 	.word	0x00403280
  401b70:	00403288 	.word	0x00403288
  401b74:	00403280 	.word	0x00403280

00401b78 <malloc>:
  401b78:	4b02      	ldr	r3, [pc, #8]	; (401b84 <malloc+0xc>)
  401b7a:	4601      	mov	r1, r0
  401b7c:	6818      	ldr	r0, [r3, #0]
  401b7e:	f000 b803 	b.w	401b88 <_malloc_r>
  401b82:	bf00      	nop
  401b84:	20000440 	.word	0x20000440

00401b88 <_malloc_r>:
  401b88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  401b8c:	f101 050b 	add.w	r5, r1, #11
  401b90:	2d16      	cmp	r5, #22
  401b92:	b083      	sub	sp, #12
  401b94:	4606      	mov	r6, r0
  401b96:	d927      	bls.n	401be8 <_malloc_r+0x60>
  401b98:	f035 0507 	bics.w	r5, r5, #7
  401b9c:	f100 80b6 	bmi.w	401d0c <_malloc_r+0x184>
  401ba0:	42a9      	cmp	r1, r5
  401ba2:	f200 80b3 	bhi.w	401d0c <_malloc_r+0x184>
  401ba6:	f000 fa81 	bl	4020ac <__malloc_lock>
  401baa:	f5b5 7ffc 	cmp.w	r5, #504	; 0x1f8
  401bae:	d222      	bcs.n	401bf6 <_malloc_r+0x6e>
  401bb0:	4fc2      	ldr	r7, [pc, #776]	; (401ebc <_malloc_r+0x334>)
  401bb2:	08e8      	lsrs	r0, r5, #3
  401bb4:	eb07 03c0 	add.w	r3, r7, r0, lsl #3
  401bb8:	68dc      	ldr	r4, [r3, #12]
  401bba:	429c      	cmp	r4, r3
  401bbc:	f000 81c8 	beq.w	401f50 <_malloc_r+0x3c8>
  401bc0:	6863      	ldr	r3, [r4, #4]
  401bc2:	68e1      	ldr	r1, [r4, #12]
  401bc4:	68a5      	ldr	r5, [r4, #8]
  401bc6:	f023 0303 	bic.w	r3, r3, #3
  401bca:	4423      	add	r3, r4
  401bcc:	4630      	mov	r0, r6
  401bce:	685a      	ldr	r2, [r3, #4]
  401bd0:	60e9      	str	r1, [r5, #12]
  401bd2:	f042 0201 	orr.w	r2, r2, #1
  401bd6:	608d      	str	r5, [r1, #8]
  401bd8:	605a      	str	r2, [r3, #4]
  401bda:	f000 fa69 	bl	4020b0 <__malloc_unlock>
  401bde:	3408      	adds	r4, #8
  401be0:	4620      	mov	r0, r4
  401be2:	b003      	add	sp, #12
  401be4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  401be8:	2910      	cmp	r1, #16
  401bea:	f200 808f 	bhi.w	401d0c <_malloc_r+0x184>
  401bee:	f000 fa5d 	bl	4020ac <__malloc_lock>
  401bf2:	2510      	movs	r5, #16
  401bf4:	e7dc      	b.n	401bb0 <_malloc_r+0x28>
  401bf6:	0a68      	lsrs	r0, r5, #9
  401bf8:	f000 808f 	beq.w	401d1a <_malloc_r+0x192>
  401bfc:	2804      	cmp	r0, #4
  401bfe:	f200 8154 	bhi.w	401eaa <_malloc_r+0x322>
  401c02:	09a8      	lsrs	r0, r5, #6
  401c04:	3038      	adds	r0, #56	; 0x38
  401c06:	0041      	lsls	r1, r0, #1
  401c08:	4fac      	ldr	r7, [pc, #688]	; (401ebc <_malloc_r+0x334>)
  401c0a:	eb07 0181 	add.w	r1, r7, r1, lsl #2
  401c0e:	68cc      	ldr	r4, [r1, #12]
  401c10:	42a1      	cmp	r1, r4
  401c12:	d106      	bne.n	401c22 <_malloc_r+0x9a>
  401c14:	e00c      	b.n	401c30 <_malloc_r+0xa8>
  401c16:	2a00      	cmp	r2, #0
  401c18:	f280 8082 	bge.w	401d20 <_malloc_r+0x198>
  401c1c:	68e4      	ldr	r4, [r4, #12]
  401c1e:	42a1      	cmp	r1, r4
  401c20:	d006      	beq.n	401c30 <_malloc_r+0xa8>
  401c22:	6863      	ldr	r3, [r4, #4]
  401c24:	f023 0303 	bic.w	r3, r3, #3
  401c28:	1b5a      	subs	r2, r3, r5
  401c2a:	2a0f      	cmp	r2, #15
  401c2c:	ddf3      	ble.n	401c16 <_malloc_r+0x8e>
  401c2e:	3801      	subs	r0, #1
  401c30:	3001      	adds	r0, #1
  401c32:	49a2      	ldr	r1, [pc, #648]	; (401ebc <_malloc_r+0x334>)
  401c34:	693c      	ldr	r4, [r7, #16]
  401c36:	f101 0e08 	add.w	lr, r1, #8
  401c3a:	4574      	cmp	r4, lr
  401c3c:	f000 817d 	beq.w	401f3a <_malloc_r+0x3b2>
  401c40:	6863      	ldr	r3, [r4, #4]
  401c42:	f023 0303 	bic.w	r3, r3, #3
  401c46:	1b5a      	subs	r2, r3, r5
  401c48:	2a0f      	cmp	r2, #15
  401c4a:	f300 8163 	bgt.w	401f14 <_malloc_r+0x38c>
  401c4e:	2a00      	cmp	r2, #0
  401c50:	f8c1 e014 	str.w	lr, [r1, #20]
  401c54:	f8c1 e010 	str.w	lr, [r1, #16]
  401c58:	da73      	bge.n	401d42 <_malloc_r+0x1ba>
  401c5a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  401c5e:	f080 8139 	bcs.w	401ed4 <_malloc_r+0x34c>
  401c62:	08db      	lsrs	r3, r3, #3
  401c64:	eb01 08c3 	add.w	r8, r1, r3, lsl #3
  401c68:	ea4f 0ca3 	mov.w	ip, r3, asr #2
  401c6c:	684a      	ldr	r2, [r1, #4]
  401c6e:	f8d8 9008 	ldr.w	r9, [r8, #8]
  401c72:	f8c4 9008 	str.w	r9, [r4, #8]
  401c76:	2301      	movs	r3, #1
  401c78:	fa03 f30c 	lsl.w	r3, r3, ip
  401c7c:	4313      	orrs	r3, r2
  401c7e:	f8c4 800c 	str.w	r8, [r4, #12]
  401c82:	604b      	str	r3, [r1, #4]
  401c84:	f8c8 4008 	str.w	r4, [r8, #8]
  401c88:	f8c9 400c 	str.w	r4, [r9, #12]
  401c8c:	1082      	asrs	r2, r0, #2
  401c8e:	2401      	movs	r4, #1
  401c90:	4094      	lsls	r4, r2
  401c92:	429c      	cmp	r4, r3
  401c94:	d862      	bhi.n	401d5c <_malloc_r+0x1d4>
  401c96:	4223      	tst	r3, r4
  401c98:	d106      	bne.n	401ca8 <_malloc_r+0x120>
  401c9a:	f020 0003 	bic.w	r0, r0, #3
  401c9e:	0064      	lsls	r4, r4, #1
  401ca0:	4223      	tst	r3, r4
  401ca2:	f100 0004 	add.w	r0, r0, #4
  401ca6:	d0fa      	beq.n	401c9e <_malloc_r+0x116>
  401ca8:	eb07 08c0 	add.w	r8, r7, r0, lsl #3
  401cac:	46c4      	mov	ip, r8
  401cae:	4681      	mov	r9, r0
  401cb0:	f8dc 300c 	ldr.w	r3, [ip, #12]
  401cb4:	459c      	cmp	ip, r3
  401cb6:	d107      	bne.n	401cc8 <_malloc_r+0x140>
  401cb8:	e141      	b.n	401f3e <_malloc_r+0x3b6>
  401cba:	2900      	cmp	r1, #0
  401cbc:	f280 8151 	bge.w	401f62 <_malloc_r+0x3da>
  401cc0:	68db      	ldr	r3, [r3, #12]
  401cc2:	459c      	cmp	ip, r3
  401cc4:	f000 813b 	beq.w	401f3e <_malloc_r+0x3b6>
  401cc8:	685a      	ldr	r2, [r3, #4]
  401cca:	f022 0203 	bic.w	r2, r2, #3
  401cce:	1b51      	subs	r1, r2, r5
  401cd0:	290f      	cmp	r1, #15
  401cd2:	ddf2      	ble.n	401cba <_malloc_r+0x132>
  401cd4:	461c      	mov	r4, r3
  401cd6:	f8d3 c00c 	ldr.w	ip, [r3, #12]
  401cda:	f854 8f08 	ldr.w	r8, [r4, #8]!
  401cde:	195a      	adds	r2, r3, r5
  401ce0:	f045 0901 	orr.w	r9, r5, #1
  401ce4:	f041 0501 	orr.w	r5, r1, #1
  401ce8:	f8c3 9004 	str.w	r9, [r3, #4]
  401cec:	4630      	mov	r0, r6
  401cee:	f8c8 c00c 	str.w	ip, [r8, #12]
  401cf2:	f8cc 8008 	str.w	r8, [ip, #8]
  401cf6:	617a      	str	r2, [r7, #20]
  401cf8:	613a      	str	r2, [r7, #16]
  401cfa:	f8c2 e00c 	str.w	lr, [r2, #12]
  401cfe:	f8c2 e008 	str.w	lr, [r2, #8]
  401d02:	6055      	str	r5, [r2, #4]
  401d04:	5051      	str	r1, [r2, r1]
  401d06:	f000 f9d3 	bl	4020b0 <__malloc_unlock>
  401d0a:	e769      	b.n	401be0 <_malloc_r+0x58>
  401d0c:	2400      	movs	r4, #0
  401d0e:	230c      	movs	r3, #12
  401d10:	4620      	mov	r0, r4
  401d12:	6033      	str	r3, [r6, #0]
  401d14:	b003      	add	sp, #12
  401d16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  401d1a:	217e      	movs	r1, #126	; 0x7e
  401d1c:	203f      	movs	r0, #63	; 0x3f
  401d1e:	e773      	b.n	401c08 <_malloc_r+0x80>
  401d20:	4423      	add	r3, r4
  401d22:	68e1      	ldr	r1, [r4, #12]
  401d24:	685a      	ldr	r2, [r3, #4]
  401d26:	68a5      	ldr	r5, [r4, #8]
  401d28:	f042 0201 	orr.w	r2, r2, #1
  401d2c:	60e9      	str	r1, [r5, #12]
  401d2e:	4630      	mov	r0, r6
  401d30:	608d      	str	r5, [r1, #8]
  401d32:	605a      	str	r2, [r3, #4]
  401d34:	f000 f9bc 	bl	4020b0 <__malloc_unlock>
  401d38:	3408      	adds	r4, #8
  401d3a:	4620      	mov	r0, r4
  401d3c:	b003      	add	sp, #12
  401d3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  401d42:	4423      	add	r3, r4
  401d44:	4630      	mov	r0, r6
  401d46:	685a      	ldr	r2, [r3, #4]
  401d48:	f042 0201 	orr.w	r2, r2, #1
  401d4c:	605a      	str	r2, [r3, #4]
  401d4e:	f000 f9af 	bl	4020b0 <__malloc_unlock>
  401d52:	3408      	adds	r4, #8
  401d54:	4620      	mov	r0, r4
  401d56:	b003      	add	sp, #12
  401d58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  401d5c:	68bc      	ldr	r4, [r7, #8]
  401d5e:	6863      	ldr	r3, [r4, #4]
  401d60:	f023 0803 	bic.w	r8, r3, #3
  401d64:	4545      	cmp	r5, r8
  401d66:	d804      	bhi.n	401d72 <_malloc_r+0x1ea>
  401d68:	ebc5 0308 	rsb	r3, r5, r8
  401d6c:	2b0f      	cmp	r3, #15
  401d6e:	f300 808c 	bgt.w	401e8a <_malloc_r+0x302>
  401d72:	4b53      	ldr	r3, [pc, #332]	; (401ec0 <_malloc_r+0x338>)
  401d74:	f8df a158 	ldr.w	sl, [pc, #344]	; 401ed0 <_malloc_r+0x348>
  401d78:	681a      	ldr	r2, [r3, #0]
  401d7a:	f8da 3000 	ldr.w	r3, [sl]
  401d7e:	3301      	adds	r3, #1
  401d80:	442a      	add	r2, r5
  401d82:	eb04 0b08 	add.w	fp, r4, r8
  401d86:	f000 8150 	beq.w	40202a <_malloc_r+0x4a2>
  401d8a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
  401d8e:	320f      	adds	r2, #15
  401d90:	f422 627f 	bic.w	r2, r2, #4080	; 0xff0
  401d94:	f022 020f 	bic.w	r2, r2, #15
  401d98:	4611      	mov	r1, r2
  401d9a:	4630      	mov	r0, r6
  401d9c:	9201      	str	r2, [sp, #4]
  401d9e:	f000 f989 	bl	4020b4 <_sbrk_r>
  401da2:	f1b0 3fff 	cmp.w	r0, #4294967295
  401da6:	4681      	mov	r9, r0
  401da8:	9a01      	ldr	r2, [sp, #4]
  401daa:	f000 8147 	beq.w	40203c <_malloc_r+0x4b4>
  401dae:	4583      	cmp	fp, r0
  401db0:	f200 80ee 	bhi.w	401f90 <_malloc_r+0x408>
  401db4:	4b43      	ldr	r3, [pc, #268]	; (401ec4 <_malloc_r+0x33c>)
  401db6:	6819      	ldr	r1, [r3, #0]
  401db8:	45cb      	cmp	fp, r9
  401dba:	4411      	add	r1, r2
  401dbc:	6019      	str	r1, [r3, #0]
  401dbe:	f000 8142 	beq.w	402046 <_malloc_r+0x4be>
  401dc2:	f8da 0000 	ldr.w	r0, [sl]
  401dc6:	f8df e108 	ldr.w	lr, [pc, #264]	; 401ed0 <_malloc_r+0x348>
  401dca:	3001      	adds	r0, #1
  401dcc:	bf1b      	ittet	ne
  401dce:	ebcb 0b09 	rsbne	fp, fp, r9
  401dd2:	4459      	addne	r1, fp
  401dd4:	f8ce 9000 	streq.w	r9, [lr]
  401dd8:	6019      	strne	r1, [r3, #0]
  401dda:	f019 0107 	ands.w	r1, r9, #7
  401dde:	f000 8107 	beq.w	401ff0 <_malloc_r+0x468>
  401de2:	f1c1 0008 	rsb	r0, r1, #8
  401de6:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
  401dea:	4481      	add	r9, r0
  401dec:	3108      	adds	r1, #8
  401dee:	444a      	add	r2, r9
  401df0:	f3c2 020b 	ubfx	r2, r2, #0, #12
  401df4:	ebc2 0a01 	rsb	sl, r2, r1
  401df8:	4651      	mov	r1, sl
  401dfa:	4630      	mov	r0, r6
  401dfc:	9301      	str	r3, [sp, #4]
  401dfe:	f000 f959 	bl	4020b4 <_sbrk_r>
  401e02:	1c43      	adds	r3, r0, #1
  401e04:	9b01      	ldr	r3, [sp, #4]
  401e06:	f000 812c 	beq.w	402062 <_malloc_r+0x4da>
  401e0a:	ebc9 0200 	rsb	r2, r9, r0
  401e0e:	4452      	add	r2, sl
  401e10:	f042 0201 	orr.w	r2, r2, #1
  401e14:	6819      	ldr	r1, [r3, #0]
  401e16:	f8c7 9008 	str.w	r9, [r7, #8]
  401e1a:	4451      	add	r1, sl
  401e1c:	42bc      	cmp	r4, r7
  401e1e:	f8c9 2004 	str.w	r2, [r9, #4]
  401e22:	6019      	str	r1, [r3, #0]
  401e24:	f8df a09c 	ldr.w	sl, [pc, #156]	; 401ec4 <_malloc_r+0x33c>
  401e28:	d016      	beq.n	401e58 <_malloc_r+0x2d0>
  401e2a:	f1b8 0f0f 	cmp.w	r8, #15
  401e2e:	f240 80ee 	bls.w	40200e <_malloc_r+0x486>
  401e32:	6862      	ldr	r2, [r4, #4]
  401e34:	f1a8 030c 	sub.w	r3, r8, #12
  401e38:	f023 0307 	bic.w	r3, r3, #7
  401e3c:	18e0      	adds	r0, r4, r3
  401e3e:	f002 0201 	and.w	r2, r2, #1
  401e42:	f04f 0e05 	mov.w	lr, #5
  401e46:	431a      	orrs	r2, r3
  401e48:	2b0f      	cmp	r3, #15
  401e4a:	6062      	str	r2, [r4, #4]
  401e4c:	f8c0 e004 	str.w	lr, [r0, #4]
  401e50:	f8c0 e008 	str.w	lr, [r0, #8]
  401e54:	f200 8109 	bhi.w	40206a <_malloc_r+0x4e2>
  401e58:	4b1b      	ldr	r3, [pc, #108]	; (401ec8 <_malloc_r+0x340>)
  401e5a:	68bc      	ldr	r4, [r7, #8]
  401e5c:	681a      	ldr	r2, [r3, #0]
  401e5e:	4291      	cmp	r1, r2
  401e60:	bf88      	it	hi
  401e62:	6019      	strhi	r1, [r3, #0]
  401e64:	4b19      	ldr	r3, [pc, #100]	; (401ecc <_malloc_r+0x344>)
  401e66:	681a      	ldr	r2, [r3, #0]
  401e68:	4291      	cmp	r1, r2
  401e6a:	6862      	ldr	r2, [r4, #4]
  401e6c:	bf88      	it	hi
  401e6e:	6019      	strhi	r1, [r3, #0]
  401e70:	f022 0203 	bic.w	r2, r2, #3
  401e74:	4295      	cmp	r5, r2
  401e76:	eba2 0305 	sub.w	r3, r2, r5
  401e7a:	d801      	bhi.n	401e80 <_malloc_r+0x2f8>
  401e7c:	2b0f      	cmp	r3, #15
  401e7e:	dc04      	bgt.n	401e8a <_malloc_r+0x302>
  401e80:	4630      	mov	r0, r6
  401e82:	f000 f915 	bl	4020b0 <__malloc_unlock>
  401e86:	2400      	movs	r4, #0
  401e88:	e6aa      	b.n	401be0 <_malloc_r+0x58>
  401e8a:	1962      	adds	r2, r4, r5
  401e8c:	f043 0301 	orr.w	r3, r3, #1
  401e90:	f045 0501 	orr.w	r5, r5, #1
  401e94:	6065      	str	r5, [r4, #4]
  401e96:	4630      	mov	r0, r6
  401e98:	60ba      	str	r2, [r7, #8]
  401e9a:	6053      	str	r3, [r2, #4]
  401e9c:	f000 f908 	bl	4020b0 <__malloc_unlock>
  401ea0:	3408      	adds	r4, #8
  401ea2:	4620      	mov	r0, r4
  401ea4:	b003      	add	sp, #12
  401ea6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  401eaa:	2814      	cmp	r0, #20
  401eac:	d968      	bls.n	401f80 <_malloc_r+0x3f8>
  401eae:	2854      	cmp	r0, #84	; 0x54
  401eb0:	f200 8097 	bhi.w	401fe2 <_malloc_r+0x45a>
  401eb4:	0b28      	lsrs	r0, r5, #12
  401eb6:	306e      	adds	r0, #110	; 0x6e
  401eb8:	0041      	lsls	r1, r0, #1
  401eba:	e6a5      	b.n	401c08 <_malloc_r+0x80>
  401ebc:	20000444 	.word	0x20000444
  401ec0:	20000cd8 	.word	0x20000cd8
  401ec4:	20000cdc 	.word	0x20000cdc
  401ec8:	20000cd4 	.word	0x20000cd4
  401ecc:	20000cd0 	.word	0x20000cd0
  401ed0:	20000850 	.word	0x20000850
  401ed4:	0a5a      	lsrs	r2, r3, #9
  401ed6:	2a04      	cmp	r2, #4
  401ed8:	d955      	bls.n	401f86 <_malloc_r+0x3fe>
  401eda:	2a14      	cmp	r2, #20
  401edc:	f200 80a7 	bhi.w	40202e <_malloc_r+0x4a6>
  401ee0:	325b      	adds	r2, #91	; 0x5b
  401ee2:	ea4f 0c42 	mov.w	ip, r2, lsl #1
  401ee6:	eb07 0c8c 	add.w	ip, r7, ip, lsl #2
  401eea:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 4020a8 <_malloc_r+0x520>
  401eee:	f8dc 1008 	ldr.w	r1, [ip, #8]
  401ef2:	4561      	cmp	r1, ip
  401ef4:	d07f      	beq.n	401ff6 <_malloc_r+0x46e>
  401ef6:	684a      	ldr	r2, [r1, #4]
  401ef8:	f022 0203 	bic.w	r2, r2, #3
  401efc:	4293      	cmp	r3, r2
  401efe:	d202      	bcs.n	401f06 <_malloc_r+0x37e>
  401f00:	6889      	ldr	r1, [r1, #8]
  401f02:	458c      	cmp	ip, r1
  401f04:	d1f7      	bne.n	401ef6 <_malloc_r+0x36e>
  401f06:	68ca      	ldr	r2, [r1, #12]
  401f08:	687b      	ldr	r3, [r7, #4]
  401f0a:	60e2      	str	r2, [r4, #12]
  401f0c:	60a1      	str	r1, [r4, #8]
  401f0e:	6094      	str	r4, [r2, #8]
  401f10:	60cc      	str	r4, [r1, #12]
  401f12:	e6bb      	b.n	401c8c <_malloc_r+0x104>
  401f14:	1963      	adds	r3, r4, r5
  401f16:	f042 0701 	orr.w	r7, r2, #1
  401f1a:	f045 0501 	orr.w	r5, r5, #1
  401f1e:	6065      	str	r5, [r4, #4]
  401f20:	4630      	mov	r0, r6
  401f22:	614b      	str	r3, [r1, #20]
  401f24:	610b      	str	r3, [r1, #16]
  401f26:	f8c3 e00c 	str.w	lr, [r3, #12]
  401f2a:	f8c3 e008 	str.w	lr, [r3, #8]
  401f2e:	605f      	str	r7, [r3, #4]
  401f30:	509a      	str	r2, [r3, r2]
  401f32:	3408      	adds	r4, #8
  401f34:	f000 f8bc 	bl	4020b0 <__malloc_unlock>
  401f38:	e652      	b.n	401be0 <_malloc_r+0x58>
  401f3a:	684b      	ldr	r3, [r1, #4]
  401f3c:	e6a6      	b.n	401c8c <_malloc_r+0x104>
  401f3e:	f109 0901 	add.w	r9, r9, #1
  401f42:	f019 0f03 	tst.w	r9, #3
  401f46:	f10c 0c08 	add.w	ip, ip, #8
  401f4a:	f47f aeb1 	bne.w	401cb0 <_malloc_r+0x128>
  401f4e:	e02c      	b.n	401faa <_malloc_r+0x422>
  401f50:	f104 0308 	add.w	r3, r4, #8
  401f54:	6964      	ldr	r4, [r4, #20]
  401f56:	42a3      	cmp	r3, r4
  401f58:	bf08      	it	eq
  401f5a:	3002      	addeq	r0, #2
  401f5c:	f43f ae69 	beq.w	401c32 <_malloc_r+0xaa>
  401f60:	e62e      	b.n	401bc0 <_malloc_r+0x38>
  401f62:	441a      	add	r2, r3
  401f64:	461c      	mov	r4, r3
  401f66:	6851      	ldr	r1, [r2, #4]
  401f68:	68db      	ldr	r3, [r3, #12]
  401f6a:	f854 5f08 	ldr.w	r5, [r4, #8]!
  401f6e:	f041 0101 	orr.w	r1, r1, #1
  401f72:	6051      	str	r1, [r2, #4]
  401f74:	4630      	mov	r0, r6
  401f76:	60eb      	str	r3, [r5, #12]
  401f78:	609d      	str	r5, [r3, #8]
  401f7a:	f000 f899 	bl	4020b0 <__malloc_unlock>
  401f7e:	e62f      	b.n	401be0 <_malloc_r+0x58>
  401f80:	305b      	adds	r0, #91	; 0x5b
  401f82:	0041      	lsls	r1, r0, #1
  401f84:	e640      	b.n	401c08 <_malloc_r+0x80>
  401f86:	099a      	lsrs	r2, r3, #6
  401f88:	3238      	adds	r2, #56	; 0x38
  401f8a:	ea4f 0c42 	mov.w	ip, r2, lsl #1
  401f8e:	e7aa      	b.n	401ee6 <_malloc_r+0x35e>
  401f90:	42bc      	cmp	r4, r7
  401f92:	4b45      	ldr	r3, [pc, #276]	; (4020a8 <_malloc_r+0x520>)
  401f94:	f43f af0e 	beq.w	401db4 <_malloc_r+0x22c>
  401f98:	689c      	ldr	r4, [r3, #8]
  401f9a:	6862      	ldr	r2, [r4, #4]
  401f9c:	f022 0203 	bic.w	r2, r2, #3
  401fa0:	e768      	b.n	401e74 <_malloc_r+0x2ec>
  401fa2:	f8d8 8000 	ldr.w	r8, [r8]
  401fa6:	4598      	cmp	r8, r3
  401fa8:	d17c      	bne.n	4020a4 <_malloc_r+0x51c>
  401faa:	f010 0f03 	tst.w	r0, #3
  401fae:	f1a8 0308 	sub.w	r3, r8, #8
  401fb2:	f100 30ff 	add.w	r0, r0, #4294967295
  401fb6:	d1f4      	bne.n	401fa2 <_malloc_r+0x41a>
  401fb8:	687b      	ldr	r3, [r7, #4]
  401fba:	ea23 0304 	bic.w	r3, r3, r4
  401fbe:	607b      	str	r3, [r7, #4]
  401fc0:	0064      	lsls	r4, r4, #1
  401fc2:	429c      	cmp	r4, r3
  401fc4:	f63f aeca 	bhi.w	401d5c <_malloc_r+0x1d4>
  401fc8:	2c00      	cmp	r4, #0
  401fca:	f43f aec7 	beq.w	401d5c <_malloc_r+0x1d4>
  401fce:	4223      	tst	r3, r4
  401fd0:	4648      	mov	r0, r9
  401fd2:	f47f ae69 	bne.w	401ca8 <_malloc_r+0x120>
  401fd6:	0064      	lsls	r4, r4, #1
  401fd8:	4223      	tst	r3, r4
  401fda:	f100 0004 	add.w	r0, r0, #4
  401fde:	d0fa      	beq.n	401fd6 <_malloc_r+0x44e>
  401fe0:	e662      	b.n	401ca8 <_malloc_r+0x120>
  401fe2:	f5b0 7faa 	cmp.w	r0, #340	; 0x154
  401fe6:	d818      	bhi.n	40201a <_malloc_r+0x492>
  401fe8:	0be8      	lsrs	r0, r5, #15
  401fea:	3077      	adds	r0, #119	; 0x77
  401fec:	0041      	lsls	r1, r0, #1
  401fee:	e60b      	b.n	401c08 <_malloc_r+0x80>
  401ff0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  401ff4:	e6fb      	b.n	401dee <_malloc_r+0x266>
  401ff6:	f8d8 3004 	ldr.w	r3, [r8, #4]
  401ffa:	1092      	asrs	r2, r2, #2
  401ffc:	f04f 0c01 	mov.w	ip, #1
  402000:	fa0c f202 	lsl.w	r2, ip, r2
  402004:	4313      	orrs	r3, r2
  402006:	f8c8 3004 	str.w	r3, [r8, #4]
  40200a:	460a      	mov	r2, r1
  40200c:	e77d      	b.n	401f0a <_malloc_r+0x382>
  40200e:	2301      	movs	r3, #1
  402010:	f8c9 3004 	str.w	r3, [r9, #4]
  402014:	464c      	mov	r4, r9
  402016:	2200      	movs	r2, #0
  402018:	e72c      	b.n	401e74 <_malloc_r+0x2ec>
  40201a:	f240 5354 	movw	r3, #1364	; 0x554
  40201e:	4298      	cmp	r0, r3
  402020:	d81c      	bhi.n	40205c <_malloc_r+0x4d4>
  402022:	0ca8      	lsrs	r0, r5, #18
  402024:	307c      	adds	r0, #124	; 0x7c
  402026:	0041      	lsls	r1, r0, #1
  402028:	e5ee      	b.n	401c08 <_malloc_r+0x80>
  40202a:	3210      	adds	r2, #16
  40202c:	e6b4      	b.n	401d98 <_malloc_r+0x210>
  40202e:	2a54      	cmp	r2, #84	; 0x54
  402030:	d823      	bhi.n	40207a <_malloc_r+0x4f2>
  402032:	0b1a      	lsrs	r2, r3, #12
  402034:	326e      	adds	r2, #110	; 0x6e
  402036:	ea4f 0c42 	mov.w	ip, r2, lsl #1
  40203a:	e754      	b.n	401ee6 <_malloc_r+0x35e>
  40203c:	68bc      	ldr	r4, [r7, #8]
  40203e:	6862      	ldr	r2, [r4, #4]
  402040:	f022 0203 	bic.w	r2, r2, #3
  402044:	e716      	b.n	401e74 <_malloc_r+0x2ec>
  402046:	f3cb 000b 	ubfx	r0, fp, #0, #12
  40204a:	2800      	cmp	r0, #0
  40204c:	f47f aeb9 	bne.w	401dc2 <_malloc_r+0x23a>
  402050:	4442      	add	r2, r8
  402052:	68bb      	ldr	r3, [r7, #8]
  402054:	f042 0201 	orr.w	r2, r2, #1
  402058:	605a      	str	r2, [r3, #4]
  40205a:	e6fd      	b.n	401e58 <_malloc_r+0x2d0>
  40205c:	21fc      	movs	r1, #252	; 0xfc
  40205e:	207e      	movs	r0, #126	; 0x7e
  402060:	e5d2      	b.n	401c08 <_malloc_r+0x80>
  402062:	2201      	movs	r2, #1
  402064:	f04f 0a00 	mov.w	sl, #0
  402068:	e6d4      	b.n	401e14 <_malloc_r+0x28c>
  40206a:	f104 0108 	add.w	r1, r4, #8
  40206e:	4630      	mov	r0, r6
  402070:	f7ff fc82 	bl	401978 <_free_r>
  402074:	f8da 1000 	ldr.w	r1, [sl]
  402078:	e6ee      	b.n	401e58 <_malloc_r+0x2d0>
  40207a:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  40207e:	d804      	bhi.n	40208a <_malloc_r+0x502>
  402080:	0bda      	lsrs	r2, r3, #15
  402082:	3277      	adds	r2, #119	; 0x77
  402084:	ea4f 0c42 	mov.w	ip, r2, lsl #1
  402088:	e72d      	b.n	401ee6 <_malloc_r+0x35e>
  40208a:	f240 5154 	movw	r1, #1364	; 0x554
  40208e:	428a      	cmp	r2, r1
  402090:	d804      	bhi.n	40209c <_malloc_r+0x514>
  402092:	0c9a      	lsrs	r2, r3, #18
  402094:	327c      	adds	r2, #124	; 0x7c
  402096:	ea4f 0c42 	mov.w	ip, r2, lsl #1
  40209a:	e724      	b.n	401ee6 <_malloc_r+0x35e>
  40209c:	f04f 0cfc 	mov.w	ip, #252	; 0xfc
  4020a0:	227e      	movs	r2, #126	; 0x7e
  4020a2:	e720      	b.n	401ee6 <_malloc_r+0x35e>
  4020a4:	687b      	ldr	r3, [r7, #4]
  4020a6:	e78b      	b.n	401fc0 <_malloc_r+0x438>
  4020a8:	20000444 	.word	0x20000444

004020ac <__malloc_lock>:
  4020ac:	4770      	bx	lr
  4020ae:	bf00      	nop

004020b0 <__malloc_unlock>:
  4020b0:	4770      	bx	lr
  4020b2:	bf00      	nop

004020b4 <_sbrk_r>:
  4020b4:	b538      	push	{r3, r4, r5, lr}
  4020b6:	4c07      	ldr	r4, [pc, #28]	; (4020d4 <_sbrk_r+0x20>)
  4020b8:	2300      	movs	r3, #0
  4020ba:	4605      	mov	r5, r0
  4020bc:	4608      	mov	r0, r1
  4020be:	6023      	str	r3, [r4, #0]
  4020c0:	f7ff f92a 	bl	401318 <_sbrk>
  4020c4:	1c43      	adds	r3, r0, #1
  4020c6:	d000      	beq.n	4020ca <_sbrk_r+0x16>
  4020c8:	bd38      	pop	{r3, r4, r5, pc}
  4020ca:	6823      	ldr	r3, [r4, #0]
  4020cc:	2b00      	cmp	r3, #0
  4020ce:	d0fb      	beq.n	4020c8 <_sbrk_r+0x14>
  4020d0:	602b      	str	r3, [r5, #0]
  4020d2:	bd38      	pop	{r3, r4, r5, pc}
  4020d4:	20000d0c 	.word	0x20000d0c

004020d8 <register_fini>:
  4020d8:	4b02      	ldr	r3, [pc, #8]	; (4020e4 <register_fini+0xc>)
  4020da:	b113      	cbz	r3, 4020e2 <register_fini+0xa>
  4020dc:	4802      	ldr	r0, [pc, #8]	; (4020e8 <register_fini+0x10>)
  4020de:	f000 b805 	b.w	4020ec <atexit>
  4020e2:	4770      	bx	lr
  4020e4:	00000000 	.word	0x00000000
  4020e8:	004020f9 	.word	0x004020f9

004020ec <atexit>:
  4020ec:	4601      	mov	r1, r0
  4020ee:	2000      	movs	r0, #0
  4020f0:	4602      	mov	r2, r0
  4020f2:	4603      	mov	r3, r0
  4020f4:	f000 b816 	b.w	402124 <__register_exitproc>

004020f8 <__libc_fini_array>:
  4020f8:	b538      	push	{r3, r4, r5, lr}
  4020fa:	4b08      	ldr	r3, [pc, #32]	; (40211c <__libc_fini_array+0x24>)
  4020fc:	4d08      	ldr	r5, [pc, #32]	; (402120 <__libc_fini_array+0x28>)
  4020fe:	1aed      	subs	r5, r5, r3
  402100:	10ac      	asrs	r4, r5, #2
  402102:	bf18      	it	ne
  402104:	18ed      	addne	r5, r5, r3
  402106:	d005      	beq.n	402114 <__libc_fini_array+0x1c>
  402108:	3c01      	subs	r4, #1
  40210a:	f855 3d04 	ldr.w	r3, [r5, #-4]!
  40210e:	4798      	blx	r3
  402110:	2c00      	cmp	r4, #0
  402112:	d1f9      	bne.n	402108 <__libc_fini_array+0x10>
  402114:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  402118:	f001 b8b6 	b.w	403288 <_fini>
  40211c:	00403294 	.word	0x00403294
  402120:	00403298 	.word	0x00403298

00402124 <__register_exitproc>:
  402124:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  402128:	4c25      	ldr	r4, [pc, #148]	; (4021c0 <__register_exitproc+0x9c>)
  40212a:	6825      	ldr	r5, [r4, #0]
  40212c:	f8d5 4148 	ldr.w	r4, [r5, #328]	; 0x148
  402130:	4606      	mov	r6, r0
  402132:	4688      	mov	r8, r1
  402134:	4692      	mov	sl, r2
  402136:	4699      	mov	r9, r3
  402138:	b3cc      	cbz	r4, 4021ae <__register_exitproc+0x8a>
  40213a:	6860      	ldr	r0, [r4, #4]
  40213c:	281f      	cmp	r0, #31
  40213e:	dc18      	bgt.n	402172 <__register_exitproc+0x4e>
  402140:	1c43      	adds	r3, r0, #1
  402142:	b17e      	cbz	r6, 402164 <__register_exitproc+0x40>
  402144:	eb04 0580 	add.w	r5, r4, r0, lsl #2
  402148:	2101      	movs	r1, #1
  40214a:	f8c5 a088 	str.w	sl, [r5, #136]	; 0x88
  40214e:	f8d4 7188 	ldr.w	r7, [r4, #392]	; 0x188
  402152:	fa01 f200 	lsl.w	r2, r1, r0
  402156:	4317      	orrs	r7, r2
  402158:	2e02      	cmp	r6, #2
  40215a:	f8c4 7188 	str.w	r7, [r4, #392]	; 0x188
  40215e:	f8c5 9108 	str.w	r9, [r5, #264]	; 0x108
  402162:	d01e      	beq.n	4021a2 <__register_exitproc+0x7e>
  402164:	3002      	adds	r0, #2
  402166:	6063      	str	r3, [r4, #4]
  402168:	f844 8020 	str.w	r8, [r4, r0, lsl #2]
  40216c:	2000      	movs	r0, #0
  40216e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  402172:	4b14      	ldr	r3, [pc, #80]	; (4021c4 <__register_exitproc+0xa0>)
  402174:	b303      	cbz	r3, 4021b8 <__register_exitproc+0x94>
  402176:	f44f 70c8 	mov.w	r0, #400	; 0x190
  40217a:	f7ff fcfd 	bl	401b78 <malloc>
  40217e:	4604      	mov	r4, r0
  402180:	b1d0      	cbz	r0, 4021b8 <__register_exitproc+0x94>
  402182:	f8d5 3148 	ldr.w	r3, [r5, #328]	; 0x148
  402186:	2700      	movs	r7, #0
  402188:	e880 0088 	stmia.w	r0, {r3, r7}
  40218c:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
  402190:	4638      	mov	r0, r7
  402192:	2301      	movs	r3, #1
  402194:	f8c4 7188 	str.w	r7, [r4, #392]	; 0x188
  402198:	f8c4 718c 	str.w	r7, [r4, #396]	; 0x18c
  40219c:	2e00      	cmp	r6, #0
  40219e:	d0e1      	beq.n	402164 <__register_exitproc+0x40>
  4021a0:	e7d0      	b.n	402144 <__register_exitproc+0x20>
  4021a2:	f8d4 118c 	ldr.w	r1, [r4, #396]	; 0x18c
  4021a6:	430a      	orrs	r2, r1
  4021a8:	f8c4 218c 	str.w	r2, [r4, #396]	; 0x18c
  4021ac:	e7da      	b.n	402164 <__register_exitproc+0x40>
  4021ae:	f505 74a6 	add.w	r4, r5, #332	; 0x14c
  4021b2:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
  4021b6:	e7c0      	b.n	40213a <__register_exitproc+0x16>
  4021b8:	f04f 30ff 	mov.w	r0, #4294967295
  4021bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4021c0:	00403270 	.word	0x00403270
  4021c4:	00401b79 	.word	0x00401b79

004021c8 <OV7740_VGA_YUV422_20FPS>:
  4021c8:	8012000e 001305fe 00120211 d40c10d5     ................
  4021d8:	0116340d a0182517 f01a0319 0322891b     .4...%........".
  4021e8:	f82b1829 a031012c c433f032 3f36b43a     ).+.,.1.2.3.:.6?
  4021f8:	80276004 803e0f3d 7f40403f 29426a41     .`'.=.>.?@@.AjB)
  402208:	4145e544 64490247 704ba14a 504d1a4c     D.EAG.IdJ.KpL.MP
  402218:	0064134e 1a688867 3c243814 72263025     N.d.g.h..8$<%0&r
  402228:	7e519750 00530052 23210020 00e91438     P.Q~R.S. .!#8...
  402238:	ff575556 ff59ff58 00ec045f 7f80ff13     VUW.X.Y._.......
  402248:	32823f81 11380183 03860085 05880187     .?.2..8.........
  402258:	308d3089 3093858f 30998595 089c859b     .0.0...0...0....
  402268:	239e129d 55a0459f 72a264a1 8ba47fa3     ...#.E.U.d.r....
  402278:	a7a695a5 cba8b5a7 ecaadda9 78ce1aab     ...............x
  402288:	0ad06ecf 84d20cd1 1ed490d3 1f5b245a     .n..........Z$[.
  402298:	605d885c ffbe6eac a03100bf 3f82f032     \.]`.n....1.2..?
  4022a8:	3f360012 c4330053 0322891b ffff0228     ..6?S.3...".(...

004022b8 <OV7740_QQVGA_RGB888>:
  4022b8:	8012000e 01110013 10d50012 340d120c     ...............4
  4022c8:	a0182517 f01a0319 0322891b f82b1829     .%........".).+.
  4022d8:	a031012c c433f032 3f36b43a 80276004     ,.1.2.3.:.6?.`'.
  4022e8:	803e0f3d 7f40403f 29426a41 4145e544     =.>.?@@.AjB)D.EA
  4022f8:	64490247 704ba14a 504d1a4c 0064134e     G.IdJ.KpL.MPN.d.
  402308:	1a688867 3c243814 72263025 7e519750     g.h..8$<%0&rP.Q~
  402318:	00530052 23210020 00e91438 ff575556     R.S. .!#8...VUW.
  402328:	ff59ff58 00ec045f 7f80ff13 32823f81     X.Y._........?.2
  402338:	11380183 00857084 01870386 30890588     ..8..p.........0
  402348:	858f308d 85953093 859b3099 129d089c     .0...0...0......
  402358:	459f239e 64a155a0 7fa372a2 95a58ba4     .#.E.U.d.r......
  402368:	b5a7a7a6 dda9cba8 1aabecaa 6ecf78ce     .............x.n
  402378:	0cd10ad0 90d384d2 245a1ed4 885c1f5b     ..........Z$[.\.
  402388:	6eac605d 00bfffbe 3c322831 01123f82     ]`.n....1(2<.?..
  402398:	04832f36 f4330053 03228a1b 00840084     6/..S.3...".....
  4023a8:	ffff0228                                (...

004023ac <OV7740_QVGA_YUV422_15FPS>:
  4023ac:	8012000e 001305fe 00120311 d40c10d5     ................
  4023bc:	0116340d a0182517 f01a0319 0322891b     .4...%........".
  4023cc:	f82b1829 a031012c c433f032 3f36b43a     ).+.,.1.2.3.:.6?
  4023dc:	80276004 803e0f3d 7f40403f 29426a41     .`'.=.>.?@@.AjB)
  4023ec:	4145e544 64490247 704ba14a 504d1a4c     D.EAG.IdJ.KpL.MP
  4023fc:	0064134e 1a688867 3c243814 72263025     N.d.g.h..8$<%0&r
  40240c:	7e519750 00530052 23210020 00e91438     P.Q~R.S. .!#8...
  40241c:	ff575556 ff59ff58 00ec045f 7f80ff13     VUW.X.Y._.......
  40242c:	32823f81 11380183 03860085 05880187     .?.2..8.........
  40243c:	308d3089 3093858f 30998595 089c859b     .0.0...0...0....
  40244c:	239e129d 55a0459f 72a264a1 8ba47fa3     ...#.E.U.d.r....
  40245c:	a7a695a5 cba8b5a7 ecaadda9 78ce1aab     ...............x
  40246c:	0ad06ecf 84d20cd1 1ed490d3 1f5b245a     .n..........Z$[.
  40247c:	605d885c ffbe6eac 503100bf 3f827832     \.]`.n....1P2x.?
  40248c:	3f360012 c4330053 0322891b ffff0228     ..6?S.3...".(...

0040249c <OV7740_QVGA_RGB888>:
  40249c:	8012000e 01110013 10d50012 340d120c     ...............4
  4024ac:	a0182517 f01a0319 0322891b f82b1829     .%........".).+.
  4024bc:	a031012c c433f032 3f36b43a 80276004     ,.1.2.3.:.6?.`'.
  4024cc:	803e0f3d 7f40403f 29426a41 4145e544     =.>.?@@.AjB)D.EA
  4024dc:	64490247 704ba14a 504d1a4c 0064134e     G.IdJ.KpL.MPN.d.
  4024ec:	1a688867 3c243814 72263025 7e519750     g.h..8$<%0&rP.Q~
  4024fc:	00530052 23210020 00e91438 ff575556     R.S. .!#8...VUW.
  40250c:	ff59ff58 00ec045f 7f80ff13 32823f81     X.Y._........?.2
  40251c:	11380183 00857084 01870386 30890588     ..8..p.........0
  40252c:	858f308d 85953093 859b3099 129d089c     .0...0...0......
  40253c:	459f239e 64a155a0 7fa372a2 95a58ba4     .#.E.U.d.r......
  40254c:	b5a7a7a6 dda9cba8 1aabecaa 6ecf78ce     .............x.n
  40255c:	0cd10ad0 90d384d2 245a1ed4 885c1f5b     ..........Z$[.\.
  40256c:	6eac605d 00bfffbe 78325031 01123f82     ]`.n....1P2x.?..
  40257c:	04832f36 f4330053 03228a1b 00840084     6/..S.3...".....
  40258c:	ffff0228                                (...

00402590 <OV7740_TEST_PATTERN>:
  402590:	8012000e 001305fe 00120211 d40c10d5     ................
  4025a0:	0116340d a0182517 f01a0319 0322891b     .4...%........".
  4025b0:	f82b1829 a031012c c433f032 3f36b43a     ).+.,.1.2.3.:.6?
  4025c0:	80276004 803e0f3d 7f40403f 29426a41     .`'.=.>.?@@.AjB)
  4025d0:	4145e544 64490247 704ba14a 504d1a4c     D.EAG.IdJ.KpL.MP
  4025e0:	0064134e 1a688867 3c243814 72263025     N.d.g.h..8$<%0&r
  4025f0:	7e519750 00530052 23210020 02840738     P.Q~R.S. .!#8...
  402600:	00e91438 ff575556 ff59ff58 00ec045f     8...VUW.X.Y._...
  402610:	7f80ff13 32823f81 11380183 03860085     .....?.2..8.....
  402620:	05880187 308d3089 3093858f 30998595     .....0.0...0...0
  402630:	089c859b 239e129d 55a0459f 72a264a1     .......#.E.U.d.r
  402640:	8ba47fa3 a7a695a5 cba8b5a7 ecaadda9     ................
  402650:	78ce1aab 0ad06ecf 84d20cd1 1ed490d3     ...x.n..........
  402660:	1f5b245a 605d885c ffbe6eac 503100bf     Z$[.\.]`.n....1P
  402670:	3f827832 3f360012 c4330053 0322891b     2x.?..6?S.3...".
  402680:	ffff0228                                (...

00402684 <OV7740_QVGA_YUV422_20FPS>:
  402684:	8012000e 001305fe 00120211 d40c10d5     ................
  402694:	0116340d a0182517 f01a0319 0322891b     .4...%........".
  4026a4:	f82b1829 a031012c c433f032 3f36b43a     ).+.,.1.2.3.:.6?
  4026b4:	80276004 803e0f3d 7f40403f 29426a41     .`'.=.>.?@@.AjB)
  4026c4:	4145e544 64490247 704ba14a 504d1a4c     D.EAG.IdJ.KpL.MP
  4026d4:	0064134e 1a688867 3c243814 72263025     N.d.g.h..8$<%0&r
  4026e4:	7e519750 00530052 23210020 00e91438     P.Q~R.S. .!#8...
  4026f4:	ff575556 ff59ff58 00ec045f 7f80ff13     VUW.X.Y._.......
  402704:	32823f81 11380183 03860085 05880187     .?.2..8.........
  402714:	308d3089 3093858f 30998595 089c859b     .0.0...0...0....
  402724:	239e129d 55a0459f 72a264a1 8ba47fa3     ...#.E.U.d.r....
  402734:	a7a695a5 cba8b5a7 ecaadda9 78ce1aab     ...............x
  402744:	0ad06ecf 84d20cd1 1ed490d3 1f5b245a     .n..........Z$[.
  402754:	605d885c ffbe6eac 503100bf 3f827832     \.]`.n....1P2x.?
  402764:	3f360012 c4330053 0322891b ffff0228     ..6?S.3...".(...

00402774 <OV7740_QVGA_YUV422_10FPS>:
  402774:	8012000e 001305fe 00120511 d40c10d5     ................
  402784:	0116340d a0182517 f01a0319 0322891b     .4...%........".
  402794:	f82b1829 a031012c c433f032 3f36b43a     ).+.,.1.2.3.:.6?
  4027a4:	80276004 803e0f3d 7f40403f 29426a41     .`'.=.>.?@@.AjB)
  4027b4:	4145e544 64490247 704ba14a 504d1a4c     D.EAG.IdJ.KpL.MP
  4027c4:	0064134e 1a688867 3c243814 72263025     N.d.g.h..8$<%0&r
  4027d4:	7e519750 00530052 23210020 00e91438     P.Q~R.S. .!#8...
  4027e4:	ff575556 ff59ff58 00ec045f 7f80ff13     VUW.X.Y._.......
  4027f4:	32823f81 11380183 03860085 05880187     .?.2..8.........
  402804:	308d3089 3093858f 30998595 089c859b     .0.0...0...0....
  402814:	239e129d 55a0459f 72a264a1 8ba47fa3     ...#.E.U.d.r....
  402824:	a7a695a5 cba8b5a7 ecaadda9 78ce1aab     ...............x
  402834:	0ad06ecf 84d20cd1 1ed490d3 1f5b245a     .n..........Z$[.
  402844:	605d885c ffbe6eac 503100bf 3f827832     \.]`.n....1P2x.?
  402854:	3f360012 c4330053 0322891b ffff0228     ..6?S.3...".(...

00402864 <OV7740_QQVGA_YUV422>:
  402864:	8012000e 01110013 10d50012 340d540c     .............T.4
  402874:	25170116 0319a018 891bf01a 18290322     ...%........".).
  402884:	012cf82b f032a031 b43ac433 60043f36     +.,.1.2.3.:.6?.`
  402894:	0f3d8027 403f803e 6a417f40 e5442942     '.=.>.?@@.AjB)D.
  4028a4:	02474145 a14a6449 1a4c704b 134e504d     EAG.IdJ.KpL.MPN.
  4028b4:	88670064 38141a68 30253c24 97507226     d.g.h..8$<%0&rP.
  4028c4:	00527e51 00200053 14382321 555600e9     Q~R.S. .!#8...VU
  4028d4:	ff58ff57 045fff59 ff1300ec 3f817f80     W.X.Y._........?
  4028e4:	01833282 70841138 03860085 05880187     .2..8..p........
  4028f4:	308d3089 3093858f 30998595 089c859b     .0.0...0...0....
  402904:	239e129d 55a0459f 72a264a1 8ba47fa3     ...#.E.U.d.r....
  402914:	a7a695a5 cba8b5a7 ecaadda9 78ce1aab     ...............x
  402924:	0ad06ecf 84d20cd1 1ed490d3 1f5b245a     .n..........Z$[.
  402934:	605d885c ffbe6eac 283100bf 00343c32     \.]`.n....1(2<4.
  402944:	00123f82 00533f36 891b0033 02280322     .?..6?S.3...".(.
  402954:	ffff00d9                                ....

00402958 <OV7740_QVGA_YUV422_30FPS>:
  402958:	8012000e 001305fe 00120111 d40c10d5     ................
  402968:	0116340d a0182517 f01a0319 0322891b     .4...%........".
  402978:	f82b1829 a031012c c433f032 3f36b43a     ).+.,.1.2.3.:.6?
  402988:	80276004 803e0f3d 7f40403f 29426a41     .`'.=.>.?@@.AjB)
  402998:	4145e544 64490247 704ba14a 504d1a4c     D.EAG.IdJ.KpL.MP
  4029a8:	0064134e 1a688867 3c243814 72263025     N.d.g.h..8$<%0&r
  4029b8:	7e519750 00530052 23210020 00e91438     P.Q~R.S. .!#8...
  4029c8:	ff575556 ff59ff58 00ec045f 7f80ff13     VUW.X.Y._.......
  4029d8:	32823f81 11380183 03860085 05880187     .?.2..8.........
  4029e8:	308d3089 3093858f 30998595 089c859b     .0.0...0...0....
  4029f8:	239e129d 55a0459f 72a264a1 8ba47fa3     ...#.E.U.d.r....
  402a08:	a7a695a5 cba8b5a7 ecaadda9 78ce1aab     ...............x
  402a18:	0ad06ecf 84d20cd1 1ed490d3 1f5b245a     .n..........Z$[.
  402a28:	605d885c ffbe6eac 503100bf 3f827832     \.]`.n....1P2x.?
  402a38:	3f360012 c4330053 0322891b ffff0228     ..6?S.3...".(...

00402a48 <p_uc_charset10x14>:
	...
  402a64:	ccffccff 00000000 00000000 00000000     ................
  402a74:	00f000f0 00000000 00f000f0 00000000     ................
  402a84:	c00cc00c fcfffcff c00cc00c fcfffcff     ................
  402a94:	c00cc00c 701e600c 3033303f fcfffcff     .....`.p?030....
  402aa4:	f0333033 c018e039 0cf00060 f0603cf0     303.9...`....<`.
  402ab4:	000fc003 3cf0183c 18003cc0 f87ff03c     ....<..<.<..<...
  402ac4:	8cc71cc3 ecdccccf 30307878 cc00fc00     ........xx00....
  402ad4:	00000000 00440000 00f800ec 00000070     ......D.....p...
	...
  402aec:	f03fc00f 18607878 0cc00cc0 00000000     ..?.xx`.........
  402afc:	00000000 0cc00cc0 78781860 c00ff03f     ........`.xx?...
  402b0c:	00000000 e00e600c 8003c007 f83ff83f     .....`......?.?.
  402b1c:	c0078003 600ce00e 00030003 00030003     .......`........
  402b2c:	f03ff03f 00030003 00030003 ec004400     ?.?..........D..
  402b3c:	7000f800 00000000 00000000 00000000     ...p............
  402b4c:	00030003 00030003 00030003 00030003     ................
  402b5c:	00030003 3c001800 18003c00 00000000     .......<.<......
	...
  402b74:	0c000000 f0003c00 000fc003 00f0003c     .....<......<...
  402b84:	000000c0 f87ff03f ccc1fce0 0cc78cc3     ....?...........
  402b94:	1cfc0cce f03ff87f 00000000 0c700c30     ......?.....0.p.
  402ba4:	fcfffcff 0c000c00 00000000 1c700c30     ............0.p.
  402bb4:	7cc03ce0 ccc1ecc0 0ce78cc3 0c3c0c7e     .<.|........~.<.
  402bc4:	38703030 0cc01ce0 0cc30cc0 1ce30cc3     00p8............
  402bd4:	f03cf87f c007c003 c01cc00e c070c038     ..<.........8.p.
  402be4:	fcfffcff c000c000 38fc30fc 0ccc1ccc     .........0.8....
  402bf4:	0ccc0ccc 1cce0ccc f0c3f8c7 f87ff03f     ............?...
  402c04:	0cc31ce3 0cc30cc3 9ce30cc3 f030f871     ............q.0.
  402c14:	00c000c0 00c000c0 fcc7fcc3 00dc00ce     ................
  402c24:	00f000f8 f87ff03c 0cc39ce7 0cc30cc3     ....<...........
  402c34:	9ce70cc3 f03cf87f 007e003c 0cc30ce7     ......<.<.~.....
  402c44:	38c31cc3 e0e770c3 803fc07f 00000000     ...8.p....?.....
  402c54:	60180000 f03cf03c 00006018 00000000     ...`<.<..`......
  402c64:	00000000 44180000 f83cec3c 00007018     .......D<.<..p..
  402c74:	00000000 00030000 c00f8007 7038e01c     ..............8p
  402c84:	1ce03870 00000cc0 c00cc00c c00cc00c     p8..............
  402c94:	c00cc00c c00cc00c c00cc00c 0cc00000     ................
  402ca4:	38701ce0 e01c7038 8007c00f 00000003     ..p88p..........
  402cb4:	00700030 00c000e0 ecc3ecc1 00e600c3     0.p.............
  402cc4:	003c007e f871f030 0cc39ce3 fcc3fcc3     ~.<.0.q.........
  402cd4:	1ce00cc0 f03ff87f fc7ffc3f c0c0c0e0     ......?.?.......
  402ce4:	c0c0c0c0 c0e0c0c0 fc3ffc7f fcfffcff     ..........?.....
  402cf4:	0cc30cc3 0cc30cc3 9ce70cc3 f03cf87f     ..............<.
  402d04:	f87ff03f 0cc01ce0 0cc00cc0 1ce00cc0     ?...............
  402d14:	30303870 fcfffcff 0cc00cc0 0cc00cc0     p800............
  402d24:	1ce00cc0 f03ff87f fcfffcff 0cc30cc3     ......?.........
  402d34:	0cc30cc3 0cc30cc3 0cc00cc0 fcfffcff     ................
  402d44:	00c300c3 00c300c3 00c300c3 00c000c0     ................
  402d54:	f87ff03f 0cc01ce0 0cc30cc0 1ce30cc3     ?...............
  402d64:	f033f873 fcfffcff 00030003 00030003     s.3.............
  402d74:	00030003 fcfffcff 00000000 0cc00cc0     ................
  402d84:	fcfffcff 0cc00cc0 00000000 38003000     .............0.8
  402d94:	0cc01cc0 1cc00cc0 f0fff8ff 00c000c0     ................
  402da4:	fcfffcff 80078007 e01cc00f 38707038     ............8pp8
  402db4:	0cc01ce0 fcfffcff 0c000c00 0c000c00     ................
  402dc4:	0c000c00 0c000c00 fcfffcff 00380070     ............p.8.
  402dd4:	001f001f 00700038 fcfffcff fcfffcff     ....8.p.........
  402de4:	000e001c 80030007 e000c001 fcfffcff     ................
  402df4:	f87ff03f 0cc01ce0 0cc00cc0 1ce00cc0     ?...............
  402e04:	f03ff87f fcfffcff 00c300c3 00c300c3     ..?.............
  402e14:	00e700c3 003c007e f87ff03f 0cc01ce0     ....~.<.?.......
  402e24:	ecc0ccc0 38e07cc0 ec3ffc7f fcfffcff     .....|.8..?.....
  402e34:	80c300c3 c0c380c3 70e7c0c3 1c3c3c7e     ...........p~<<.
  402e44:	1c7e183c 0cc30ce7 0cc30cc3 9cc30cc3     <.~.............
  402e54:	f060f8e1 00c000c0 00c000c0 fcfffcff     ..`.............
  402e64:	00c000c0 00c000c0 f8fff0ff 0c001c00     ................
  402e74:	0c000c00 1c000c00 f0fff8ff e0ffc0ff     ................
  402e84:	38007000 1c001c00 70003800 c0ffe0ff     .p.8.....8.p....
  402e94:	f8fff0ff 3c001c00 f800f800 1c003c00     .......<.....<..
  402ea4:	f0fff8ff 7cf83cf0 c00fe01c 80078007     .....<.|........
  402eb4:	e01cc00f 3cf07cf8 00fe00fc 80030007     .....|.<........
  402ec4:	fc01fc01 00078003 00fc00fe 7cc03cc0     .............<.|
  402ed4:	ccc1ecc0 0cc78cc3 0cdc0cce 0cf00cf8     ................
  402ee4:	00000000 fcfffcff 0cc00cc0 00000cc0     ................
  402ef4:	00000000 00300030 000c000c 00030003     ....0.0.........
  402f04:	c000c000 30003000 00000000 0cc00cc0     .....0.0........
  402f14:	fcff0cc0 0000fcff 00000000 001c000c     ................
  402f24:	00700038 00e000e0 00380070 000c001c     8.p.....p.8.....
  402f34:	0c000c00 0c000c00 0c000c00 0c000c00     ................
  402f44:	0c000c00 00000000 00e000c0 00380070     ............p.8.
  402f54:	00000018 00000000 78063000 cc0cfc0e     .........0.x....
  402f64:	cc0ccc0c cc0ecc0c f803fc07 fcfffcff     ................
  402f74:	0c030c03 0c030c03 9c030c03 f000f801     ................
  402f84:	f807f003 0c0c1c0e 0c0c0c0c 1c0e0c0c     ................
  402f94:	30033807 f801f000 0c039c03 0c030c03     .8.0............
  402fa4:	0c030c03 fcfffcff f807f003 cc0cdc0e     ................
  402fb4:	cc0ccc0c dc0ecc0c 9003d807 00030000     ................
  402fc4:	fc7ffc3f 00e300e3 00300070 00000000     ?.......p.0.....
  402fd4:	9c071803 cc0ccc0f cc0ccc0c dc0ccc0c     ................
  402fe4:	f007f80f fcfffcff 00030003 00030003     ................
  402ff4:	fc018003 0000fc00 00000000 00000000     ................
  403004:	fc1bfc1b 00000000 00000000 30000000     ...............0
  403014:	1c003800 0c000c00 f8cf1c00 0000f0cf     .8..............
  403024:	fcff0000 e000fcff f003e001 1c0e3807     .............8..
  403034:	00000c0c 00000000 0cc00cc0 fcfffcff     ................
  403044:	0c000c00 00000000 fc0ffc0f 0007000e     ................
  403054:	c003c003 000e0007 fc0ffc0f fc0ffc0f     ................
  403064:	00070003 000c000e 000e000c fc03fc07     ................
  403074:	f807f003 0c0c1c0e 0c0c0c0c 1c0e0c0c     ................
  403084:	f003f807 fc0ffc0f c00cc00c c00cc00c     ................
  403094:	c00fc00c 00038007 80070003 c00cc00f     ................
  4030a4:	c00cc00c c00cc00c fc0ffc0f fc0ffc0f     ................
  4030b4:	00078003 000c000e 000e000c 00030007     ................
  4030c4:	9c071803 cc0ccc0f cc0ccc0c fc0ccc0c     ................
  4030d4:	3006780e 000c0000 f0ff000c 1c0cf8ff     .x.0............
  4030e4:	380c1c0c 0000300c f80ff00f 0c001c00     ...8.0..........
  4030f4:	0c000c00 1c000c00 f00ff80f e00fc00f     ................
  403104:	38007000 1c001c00 70003800 c00fe00f     .p.8.....8.p....
  403114:	f80ff00f 1c001c00 f800f800 1c001c00     ................
  403124:	f00ff80f 1c0e0c0c f0033807 e001e001     .........8......
  403134:	3807f003 0c0c1c0e 000e000c 9c030c07     ...8............
  403144:	f001f801 00078003 000c000e 1c0c0c0c     ................
  403154:	7c0c3c0c cc0dec0c 0c0f8c0f 0c0c0c0e     .<.|............
  403164:	00030000 f03f8007 1ce0f87c 0cc00cc0     ......?.|.......
  403174:	00000cc0 0c030c03 fc7ffc3f 0cc30ce3     ........?.......
  403184:	0ce00cc0 0c300c70 0cc00000 0cc00cc0     ....p.0.........
  403194:	f87c1ce0 8007f03f 00000003 00c000c0     ..|.?...........
  4031a4:	00c000c0 00c000c0 00c000c0 00c000c0     ................
  4031b4:	fcfffcff fcfffcff fcfffcff fcfffcff     ................
  4031c4:	fcfffcff 3737564f 69203034 6567616d     ....OV7740 image
  4031d4:	6e657320 0a726f73 74706163 20657275      sensor.capture 
  4031e4:	6d617865 00656c70 61656c50 57206573     example.Please W
  4031f4:	20746961 69727564 0a20676e 74696e69     ait during .init
  403204:	696c6169 6974617a 00006e6f 61656c50     ialization..Plea
  403214:	50206573 73736572 74756220 0a6e6f74     se Press button.
  403224:	73206f74 74726174 6f727020 73736563     to start process
  403234:	0a676e69 72616220 65646f63 00000073     ing. barcodes...
  403244:	73657250 75622073 6e6f7474 206f740a     Press button.to 
  403254:	72617473 65642074 69646f63 0a20676e     start decoding .
  403264:	68617262 00000021 00000043              brah!...C...

00403270 <_global_impure_ptr>:
  403270:	20000018                                ... 

00403274 <_init>:
  403274:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  403276:	bf00      	nop
  403278:	bcf8      	pop	{r3, r4, r5, r6, r7}
  40327a:	bc08      	pop	{r3}
  40327c:	469e      	mov	lr, r3
  40327e:	4770      	bx	lr

00403280 <__init_array_start>:
  403280:	004020d9 	.word	0x004020d9

00403284 <__frame_dummy_init_array_entry>:
  403284:	004000f1                                ..@.

00403288 <_fini>:
  403288:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40328a:	bf00      	nop
  40328c:	bcf8      	pop	{r3, r4, r5, r6, r7}
  40328e:	bc08      	pop	{r3}
  403290:	469e      	mov	lr, r3
  403292:	4770      	bx	lr

00403294 <__fini_array_start>:
  403294:	004000cd 	.word	0x004000cd

Disassembly of section .relocate:

20000000 <portable_delay_cycles>:
RAMFUNC
void portable_delay_cycles(unsigned long n)
{
	UNUSED(n);

	__asm (
20000000:	f3bf 8f5f 	dmb	sy
20000004:	3801      	subs	r0, #1
20000006:	d1fb      	bne.n	20000000 <portable_delay_cycles>
20000008:	4770      	bx	lr
2000000a:	bf00      	nop

2000000c <SystemCoreClock>:
2000000c:	0900 003d                                   ..=.

20000010 <g_us_cap_rows>:
20000010:	00f0                                        ..

20000012 <g_us_cap_line>:
20000012:	0140 0000 0000                              @.....

20000018 <impure_data>:
20000018:	0000 0000 0304 2000 036c 2000 03d4 2000     ....... l.. ... 
	...
2000004c:	326c 0040 0000 0000 0000 0000 0000 0000     l2@.............
	...
200000c0:	0001 0000 0000 0000 330e abcd 1234 e66d     .........3..4.m.
200000d0:	deec 0005 000b 0000 0000 0000 0000 0000     ................
	...

20000440 <_impure_ptr>:
20000440:	0018 2000                                   ... 

20000444 <__malloc_av_>:
	...
2000044c:	0444 2000 0444 2000 044c 2000 044c 2000     D.. D.. L.. L.. 
2000045c:	0454 2000 0454 2000 045c 2000 045c 2000     T.. T.. \.. \.. 
2000046c:	0464 2000 0464 2000 046c 2000 046c 2000     d.. d.. l.. l.. 
2000047c:	0474 2000 0474 2000 047c 2000 047c 2000     t.. t.. |.. |.. 
2000048c:	0484 2000 0484 2000 048c 2000 048c 2000     ... ... ... ... 
2000049c:	0494 2000 0494 2000 049c 2000 049c 2000     ... ... ... ... 
200004ac:	04a4 2000 04a4 2000 04ac 2000 04ac 2000     ... ... ... ... 
200004bc:	04b4 2000 04b4 2000 04bc 2000 04bc 2000     ... ... ... ... 
200004cc:	04c4 2000 04c4 2000 04cc 2000 04cc 2000     ... ... ... ... 
200004dc:	04d4 2000 04d4 2000 04dc 2000 04dc 2000     ... ... ... ... 
200004ec:	04e4 2000 04e4 2000 04ec 2000 04ec 2000     ... ... ... ... 
200004fc:	04f4 2000 04f4 2000 04fc 2000 04fc 2000     ... ... ... ... 
2000050c:	0504 2000 0504 2000 050c 2000 050c 2000     ... ... ... ... 
2000051c:	0514 2000 0514 2000 051c 2000 051c 2000     ... ... ... ... 
2000052c:	0524 2000 0524 2000 052c 2000 052c 2000     $.. $.. ,.. ,.. 
2000053c:	0534 2000 0534 2000 053c 2000 053c 2000     4.. 4.. <.. <.. 
2000054c:	0544 2000 0544 2000 054c 2000 054c 2000     D.. D.. L.. L.. 
2000055c:	0554 2000 0554 2000 055c 2000 055c 2000     T.. T.. \.. \.. 
2000056c:	0564 2000 0564 2000 056c 2000 056c 2000     d.. d.. l.. l.. 
2000057c:	0574 2000 0574 2000 057c 2000 057c 2000     t.. t.. |.. |.. 
2000058c:	0584 2000 0584 2000 058c 2000 058c 2000     ... ... ... ... 
2000059c:	0594 2000 0594 2000 059c 2000 059c 2000     ... ... ... ... 
200005ac:	05a4 2000 05a4 2000 05ac 2000 05ac 2000     ... ... ... ... 
200005bc:	05b4 2000 05b4 2000 05bc 2000 05bc 2000     ... ... ... ... 
200005cc:	05c4 2000 05c4 2000 05cc 2000 05cc 2000     ... ... ... ... 
200005dc:	05d4 2000 05d4 2000 05dc 2000 05dc 2000     ... ... ... ... 
200005ec:	05e4 2000 05e4 2000 05ec 2000 05ec 2000     ... ... ... ... 
200005fc:	05f4 2000 05f4 2000 05fc 2000 05fc 2000     ... ... ... ... 
2000060c:	0604 2000 0604 2000 060c 2000 060c 2000     ... ... ... ... 
2000061c:	0614 2000 0614 2000 061c 2000 061c 2000     ... ... ... ... 
2000062c:	0624 2000 0624 2000 062c 2000 062c 2000     $.. $.. ,.. ,.. 
2000063c:	0634 2000 0634 2000 063c 2000 063c 2000     4.. 4.. <.. <.. 
2000064c:	0644 2000 0644 2000 064c 2000 064c 2000     D.. D.. L.. L.. 
2000065c:	0654 2000 0654 2000 065c 2000 065c 2000     T.. T.. \.. \.. 
2000066c:	0664 2000 0664 2000 066c 2000 066c 2000     d.. d.. l.. l.. 
2000067c:	0674 2000 0674 2000 067c 2000 067c 2000     t.. t.. |.. |.. 
2000068c:	0684 2000 0684 2000 068c 2000 068c 2000     ... ... ... ... 
2000069c:	0694 2000 0694 2000 069c 2000 069c 2000     ... ... ... ... 
200006ac:	06a4 2000 06a4 2000 06ac 2000 06ac 2000     ... ... ... ... 
200006bc:	06b4 2000 06b4 2000 06bc 2000 06bc 2000     ... ... ... ... 
200006cc:	06c4 2000 06c4 2000 06cc 2000 06cc 2000     ... ... ... ... 
200006dc:	06d4 2000 06d4 2000 06dc 2000 06dc 2000     ... ... ... ... 
200006ec:	06e4 2000 06e4 2000 06ec 2000 06ec 2000     ... ... ... ... 
200006fc:	06f4 2000 06f4 2000 06fc 2000 06fc 2000     ... ... ... ... 
2000070c:	0704 2000 0704 2000 070c 2000 070c 2000     ... ... ... ... 
2000071c:	0714 2000 0714 2000 071c 2000 071c 2000     ... ... ... ... 
2000072c:	0724 2000 0724 2000 072c 2000 072c 2000     $.. $.. ,.. ,.. 
2000073c:	0734 2000 0734 2000 073c 2000 073c 2000     4.. 4.. <.. <.. 
2000074c:	0744 2000 0744 2000 074c 2000 074c 2000     D.. D.. L.. L.. 
2000075c:	0754 2000 0754 2000 075c 2000 075c 2000     T.. T.. \.. \.. 
2000076c:	0764 2000 0764 2000 076c 2000 076c 2000     d.. d.. l.. l.. 
2000077c:	0774 2000 0774 2000 077c 2000 077c 2000     t.. t.. |.. |.. 
2000078c:	0784 2000 0784 2000 078c 2000 078c 2000     ... ... ... ... 
2000079c:	0794 2000 0794 2000 079c 2000 079c 2000     ... ... ... ... 
200007ac:	07a4 2000 07a4 2000 07ac 2000 07ac 2000     ... ... ... ... 
200007bc:	07b4 2000 07b4 2000 07bc 2000 07bc 2000     ... ... ... ... 
200007cc:	07c4 2000 07c4 2000 07cc 2000 07cc 2000     ... ... ... ... 
200007dc:	07d4 2000 07d4 2000 07dc 2000 07dc 2000     ... ... ... ... 
200007ec:	07e4 2000 07e4 2000 07ec 2000 07ec 2000     ... ... ... ... 
200007fc:	07f4 2000 07f4 2000 07fc 2000 07fc 2000     ... ... ... ... 
2000080c:	0804 2000 0804 2000 080c 2000 080c 2000     ... ... ... ... 
2000081c:	0814 2000 0814 2000 081c 2000 081c 2000     ... ... ... ... 
2000082c:	0824 2000 0824 2000 082c 2000 082c 2000     $.. $.. ,.. ,.. 
2000083c:	0834 2000 0834 2000 083c 2000 083c 2000     4.. 4.. <.. <.. 

2000084c <__malloc_trim_threshold>:
2000084c:	0000 0002                                   ....

20000850 <__malloc_sbrk_base>:
20000850:	ffff ffff                                   ....
