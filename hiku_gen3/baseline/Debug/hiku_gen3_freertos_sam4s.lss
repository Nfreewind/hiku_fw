
hiku_gen3_freertos_sam4s.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000c32c  00400000  00400000  00008000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  0040c32c  0040c32c  0001432c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     00000930  20000000  0040c334  00018000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          0000a7a0  20000930  0040cc64  00018930  2**2
                  ALLOC
  4 .stack        00003000  2000b0d0  00417404  00018930  2**0
                  ALLOC
  5 .ARM.attributes 0000002a  00000000  00000000  00018930  2**0
                  CONTENTS, READONLY
  6 .comment      0000005b  00000000  00000000  0001895a  2**0
                  CONTENTS, READONLY
  7 .debug_info   0001bcb3  00000000  00000000  000189b5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00004dfa  00000000  00000000  00034668  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00011486  00000000  00000000  00039462  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00001428  00000000  00000000  0004a8e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00001420  00000000  00000000  0004bd10  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  0001ad8c  00000000  00000000  0004d130  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0001a2db  00000000  00000000  00067ebc  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00064bd0  00000000  00000000  00082197  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00003d04  00000000  00000000  000e6d68  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <_sfixed>:
  400000:	2000e0d0 	.word	0x2000e0d0
  400004:	00403bf1 	.word	0x00403bf1
  400008:	00403bed 	.word	0x00403bed
  40000c:	00403bed 	.word	0x00403bed
  400010:	00403bed 	.word	0x00403bed
  400014:	00403bed 	.word	0x00403bed
  400018:	00403bed 	.word	0x00403bed
	...
  40002c:	0040413d 	.word	0x0040413d
  400030:	00403bed 	.word	0x00403bed
  400034:	00000000 	.word	0x00000000
  400038:	00404215 	.word	0x00404215
  40003c:	00404259 	.word	0x00404259
  400040:	00403bed 	.word	0x00403bed
  400044:	00403bed 	.word	0x00403bed
  400048:	00403bed 	.word	0x00403bed
  40004c:	00403bed 	.word	0x00403bed
  400050:	00403bed 	.word	0x00403bed
  400054:	00403bed 	.word	0x00403bed
  400058:	00403bed 	.word	0x00403bed
  40005c:	00403bed 	.word	0x00403bed
  400060:	00400c35 	.word	0x00400c35
  400064:	00400c45 	.word	0x00400c45
  400068:	00000000 	.word	0x00000000
  40006c:	00401fe1 	.word	0x00401fe1
  400070:	00401ff5 	.word	0x00401ff5
  400074:	00402009 	.word	0x00402009
  400078:	00400e61 	.word	0x00400e61
  40007c:	00400e71 	.word	0x00400e71
	...
  400088:	00403bed 	.word	0x00403bed
  40008c:	00400675 	.word	0x00400675
  400090:	00400685 	.word	0x00400685
  400094:	00403bed 	.word	0x00403bed
  400098:	00403bed 	.word	0x00403bed
  40009c:	00403bed 	.word	0x00403bed
  4000a0:	00403bed 	.word	0x00403bed
  4000a4:	00403bed 	.word	0x00403bed
  4000a8:	00403bed 	.word	0x00403bed
  4000ac:	00403bed 	.word	0x00403bed
  4000b0:	00403bed 	.word	0x00403bed
  4000b4:	00403bed 	.word	0x00403bed
  4000b8:	00403bed 	.word	0x00403bed
  4000bc:	00403bed 	.word	0x00403bed
  4000c0:	00403bed 	.word	0x00403bed
  4000c4:	00403bed 	.word	0x00403bed
  4000c8:	00402891 	.word	0x00402891

004000cc <__do_global_dtors_aux>:
  4000cc:	b510      	push	{r4, lr}
  4000ce:	4c05      	ldr	r4, [pc, #20]	; (4000e4 <__do_global_dtors_aux+0x18>)
  4000d0:	7823      	ldrb	r3, [r4, #0]
  4000d2:	b933      	cbnz	r3, 4000e2 <__do_global_dtors_aux+0x16>
  4000d4:	4b04      	ldr	r3, [pc, #16]	; (4000e8 <__do_global_dtors_aux+0x1c>)
  4000d6:	b113      	cbz	r3, 4000de <__do_global_dtors_aux+0x12>
  4000d8:	4804      	ldr	r0, [pc, #16]	; (4000ec <__do_global_dtors_aux+0x20>)
  4000da:	f3af 8000 	nop.w
  4000de:	2301      	movs	r3, #1
  4000e0:	7023      	strb	r3, [r4, #0]
  4000e2:	bd10      	pop	{r4, pc}
  4000e4:	20000930 	.word	0x20000930
  4000e8:	00000000 	.word	0x00000000
  4000ec:	0040c334 	.word	0x0040c334

004000f0 <frame_dummy>:
  4000f0:	4b08      	ldr	r3, [pc, #32]	; (400114 <frame_dummy+0x24>)
  4000f2:	b510      	push	{r4, lr}
  4000f4:	b11b      	cbz	r3, 4000fe <frame_dummy+0xe>
  4000f6:	4808      	ldr	r0, [pc, #32]	; (400118 <frame_dummy+0x28>)
  4000f8:	4908      	ldr	r1, [pc, #32]	; (40011c <frame_dummy+0x2c>)
  4000fa:	f3af 8000 	nop.w
  4000fe:	4808      	ldr	r0, [pc, #32]	; (400120 <frame_dummy+0x30>)
  400100:	6803      	ldr	r3, [r0, #0]
  400102:	b903      	cbnz	r3, 400106 <frame_dummy+0x16>
  400104:	bd10      	pop	{r4, pc}
  400106:	4b07      	ldr	r3, [pc, #28]	; (400124 <frame_dummy+0x34>)
  400108:	2b00      	cmp	r3, #0
  40010a:	d0fb      	beq.n	400104 <frame_dummy+0x14>
  40010c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  400110:	4718      	bx	r3
  400112:	bf00      	nop
  400114:	00000000 	.word	0x00000000
  400118:	0040c334 	.word	0x0040c334
  40011c:	20000934 	.word	0x20000934
  400120:	0040c334 	.word	0x0040c334
  400124:	00000000 	.word	0x00000000

00400128 <sysclk_enable_usb>:
 *
 * \param pll_id Source of the USB clock.
 * \param div Actual clock divisor. Must be superior to 0.
 */
void sysclk_enable_usb(void)
{
  400128:	4770      	bx	lr
  40012a:	bf00      	nop

0040012c <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
  40012c:	b510      	push	{r4, lr}
	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
  40012e:	480e      	ldr	r0, [pc, #56]	; (400168 <sysclk_init+0x3c>)
  400130:	4b0e      	ldr	r3, [pc, #56]	; (40016c <sysclk_init+0x40>)
  400132:	4798      	blx	r3
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
  400134:	2000      	movs	r0, #0
  400136:	213e      	movs	r1, #62	; 0x3e
  400138:	4b0d      	ldr	r3, [pc, #52]	; (400170 <sysclk_init+0x44>)
  40013a:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
  40013c:	4c0d      	ldr	r4, [pc, #52]	; (400174 <sysclk_init+0x48>)
  40013e:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
  400140:	2800      	cmp	r0, #0
  400142:	d0fc      	beq.n	40013e <sysclk_init+0x12>

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
	} else {
		pmc_disable_pllbck();
  400144:	4b0c      	ldr	r3, [pc, #48]	; (400178 <sysclk_init+0x4c>)
  400146:	4798      	blx	r3
		PMC->CKGR_PLLBR = p_cfg->ctrl;
  400148:	4a0c      	ldr	r2, [pc, #48]	; (40017c <sysclk_init+0x50>)
  40014a:	4b0d      	ldr	r3, [pc, #52]	; (400180 <sysclk_init+0x54>)
  40014c:	62da      	str	r2, [r3, #44]	; 0x2c
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		return pmc_is_locked_pllack();
	} else {
		return pmc_is_locked_pllbck();
  40014e:	4c0d      	ldr	r4, [pc, #52]	; (400184 <sysclk_init+0x58>)
  400150:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
  400152:	2800      	cmp	r0, #0
  400154:	d0fc      	beq.n	400150 <sysclk_init+0x24>

		pll_enable_source(CONFIG_PLL1_SOURCE);
		pll_config_defaults(&pllcfg, 1);
		pll_enable(&pllcfg, 1);
		pll_wait_for_lock(1);
		pmc_switch_mck_to_pllbck(CONFIG_SYSCLK_PRES);
  400156:	2010      	movs	r0, #16
  400158:	4b0b      	ldr	r3, [pc, #44]	; (400188 <sysclk_init+0x5c>)
  40015a:	4798      	blx	r3
	}
#endif

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
  40015c:	4b0b      	ldr	r3, [pc, #44]	; (40018c <sysclk_init+0x60>)
  40015e:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
  400160:	4801      	ldr	r0, [pc, #4]	; (400168 <sysclk_init+0x3c>)
  400162:	4b02      	ldr	r3, [pc, #8]	; (40016c <sysclk_init+0x40>)
  400164:	4798      	blx	r3
  400166:	bd10      	pop	{r4, pc}
  400168:	07270e00 	.word	0x07270e00
  40016c:	00403db5 	.word	0x00403db5
  400170:	00402081 	.word	0x00402081
  400174:	004020d5 	.word	0x004020d5
  400178:	004020e5 	.word	0x004020e5
  40017c:	00133f01 	.word	0x00133f01
  400180:	400e0400 	.word	0x400e0400
  400184:	004020f1 	.word	0x004020f1
  400188:	0040201d 	.word	0x0040201d
  40018c:	00403ca1 	.word	0x00403ca1

00400190 <get_pdc_peripheral_details>:
  400190:	b430      	push	{r4, r5}
  400192:	460d      	mov	r5, r1
  400194:	b181      	cbz	r1, 4001b8 <get_pdc_peripheral_details+0x28>
  400196:	6803      	ldr	r3, [r0, #0]
  400198:	4293      	cmp	r3, r2
  40019a:	d00a      	beq.n	4001b2 <get_pdc_peripheral_details+0x22>
  40019c:	4601      	mov	r1, r0
  40019e:	2300      	movs	r3, #0
  4001a0:	e003      	b.n	4001aa <get_pdc_peripheral_details+0x1a>
  4001a2:	f851 4f10 	ldr.w	r4, [r1, #16]!
  4001a6:	4294      	cmp	r4, r2
  4001a8:	d005      	beq.n	4001b6 <get_pdc_peripheral_details+0x26>
  4001aa:	3301      	adds	r3, #1
  4001ac:	42ab      	cmp	r3, r5
  4001ae:	d1f8      	bne.n	4001a2 <get_pdc_peripheral_details+0x12>
  4001b0:	e002      	b.n	4001b8 <get_pdc_peripheral_details+0x28>
  4001b2:	2500      	movs	r5, #0
  4001b4:	e000      	b.n	4001b8 <get_pdc_peripheral_details+0x28>
  4001b6:	461d      	mov	r5, r3
  4001b8:	4628      	mov	r0, r5
  4001ba:	bc30      	pop	{r4, r5}
  4001bc:	4770      	bx	lr
  4001be:	bf00      	nop

004001c0 <check_requested_operating_mode>:
  4001c0:	2a00      	cmp	r2, #0
  4001c2:	dd0e      	ble.n	4001e2 <check_requested_operating_mode+0x22>
  4001c4:	780b      	ldrb	r3, [r1, #0]
  4001c6:	4283      	cmp	r3, r0
  4001c8:	d00d      	beq.n	4001e6 <check_requested_operating_mode+0x26>
  4001ca:	b410      	push	{r4}
  4001cc:	1c4b      	adds	r3, r1, #1
  4001ce:	4411      	add	r1, r2
  4001d0:	e003      	b.n	4001da <check_requested_operating_mode+0x1a>
  4001d2:	f813 4b01 	ldrb.w	r4, [r3], #1
  4001d6:	4284      	cmp	r4, r0
  4001d8:	d007      	beq.n	4001ea <check_requested_operating_mode+0x2a>
  4001da:	428b      	cmp	r3, r1
  4001dc:	d1f9      	bne.n	4001d2 <check_requested_operating_mode+0x12>
  4001de:	2000      	movs	r0, #0
  4001e0:	e004      	b.n	4001ec <check_requested_operating_mode+0x2c>
  4001e2:	2000      	movs	r0, #0
  4001e4:	4770      	bx	lr
  4001e6:	2001      	movs	r0, #1
  4001e8:	4770      	bx	lr
  4001ea:	2001      	movs	r0, #1
  4001ec:	f85d 4b04 	ldr.w	r4, [sp], #4
  4001f0:	4770      	bx	lr
  4001f2:	bf00      	nop

004001f4 <create_peripheral_control_semaphores>:
  4001f4:	b570      	push	{r4, r5, r6, lr}
  4001f6:	4605      	mov	r5, r0
  4001f8:	460e      	mov	r6, r1
  4001fa:	4614      	mov	r4, r2
  4001fc:	f010 0f01 	tst.w	r0, #1
  400200:	d007      	beq.n	400212 <create_peripheral_control_semaphores+0x1e>
  400202:	2001      	movs	r0, #1
  400204:	4b19      	ldr	r3, [pc, #100]	; (40026c <create_peripheral_control_semaphores+0x78>)
  400206:	4798      	blx	r3
  400208:	6070      	str	r0, [r6, #4]
  40020a:	b910      	cbnz	r0, 400212 <create_peripheral_control_semaphores+0x1e>
  40020c:	4b18      	ldr	r3, [pc, #96]	; (400270 <create_peripheral_control_semaphores+0x7c>)
  40020e:	4798      	blx	r3
  400210:	e7fe      	b.n	400210 <create_peripheral_control_semaphores+0x1c>
  400212:	f015 0f04 	tst.w	r5, #4
  400216:	d00f      	beq.n	400238 <create_peripheral_control_semaphores+0x44>
  400218:	2001      	movs	r0, #1
  40021a:	2100      	movs	r1, #0
  40021c:	2203      	movs	r2, #3
  40021e:	4b15      	ldr	r3, [pc, #84]	; (400274 <create_peripheral_control_semaphores+0x80>)
  400220:	4798      	blx	r3
  400222:	6030      	str	r0, [r6, #0]
  400224:	b910      	cbnz	r0, 40022c <create_peripheral_control_semaphores+0x38>
  400226:	4b12      	ldr	r3, [pc, #72]	; (400270 <create_peripheral_control_semaphores+0x7c>)
  400228:	4798      	blx	r3
  40022a:	e7fe      	b.n	40022a <create_peripheral_control_semaphores+0x36>
  40022c:	2100      	movs	r1, #0
  40022e:	460a      	mov	r2, r1
  400230:	460b      	mov	r3, r1
  400232:	4e11      	ldr	r6, [pc, #68]	; (400278 <create_peripheral_control_semaphores+0x84>)
  400234:	47b0      	blx	r6
  400236:	e001      	b.n	40023c <create_peripheral_control_semaphores+0x48>
  400238:	2300      	movs	r3, #0
  40023a:	6033      	str	r3, [r6, #0]
  40023c:	f015 0f08 	tst.w	r5, #8
  400240:	d010      	beq.n	400264 <create_peripheral_control_semaphores+0x70>
  400242:	b17c      	cbz	r4, 400264 <create_peripheral_control_semaphores+0x70>
  400244:	2001      	movs	r0, #1
  400246:	2100      	movs	r1, #0
  400248:	2203      	movs	r2, #3
  40024a:	4b0a      	ldr	r3, [pc, #40]	; (400274 <create_peripheral_control_semaphores+0x80>)
  40024c:	4798      	blx	r3
  40024e:	6020      	str	r0, [r4, #0]
  400250:	b910      	cbnz	r0, 400258 <create_peripheral_control_semaphores+0x64>
  400252:	4b07      	ldr	r3, [pc, #28]	; (400270 <create_peripheral_control_semaphores+0x7c>)
  400254:	4798      	blx	r3
  400256:	e7fe      	b.n	400256 <create_peripheral_control_semaphores+0x62>
  400258:	2100      	movs	r1, #0
  40025a:	460a      	mov	r2, r1
  40025c:	460b      	mov	r3, r1
  40025e:	4c06      	ldr	r4, [pc, #24]	; (400278 <create_peripheral_control_semaphores+0x84>)
  400260:	47a0      	blx	r4
  400262:	bd70      	pop	{r4, r5, r6, pc}
  400264:	2300      	movs	r3, #0
  400266:	6023      	str	r3, [r4, #0]
  400268:	bd70      	pop	{r4, r5, r6, pc}
  40026a:	bf00      	nop
  40026c:	004049e1 	.word	0x004049e1
  400270:	00404179 	.word	0x00404179
  400274:	004047cd 	.word	0x004047cd
  400278:	00404bb1 	.word	0x00404bb1

0040027c <configure_interrupt_controller>:
  40027c:	b510      	push	{r4, lr}
  40027e:	290f      	cmp	r1, #15
  400280:	d902      	bls.n	400288 <configure_interrupt_controller+0xc>
  400282:	4b14      	ldr	r3, [pc, #80]	; (4002d4 <configure_interrupt_controller+0x58>)
  400284:	4798      	blx	r3
  400286:	e7fe      	b.n	400286 <configure_interrupt_controller+0xa>
  400288:	2909      	cmp	r1, #9
  40028a:	d802      	bhi.n	400292 <configure_interrupt_controller+0x16>
  40028c:	4b11      	ldr	r3, [pc, #68]	; (4002d4 <configure_interrupt_controller+0x58>)
  40028e:	4798      	blx	r3
  400290:	e7fe      	b.n	400290 <configure_interrupt_controller+0x14>

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
  400292:	b2c3      	uxtb	r3, r0
  400294:	f003 021f 	and.w	r2, r3, #31
  400298:	2401      	movs	r4, #1
  40029a:	4094      	lsls	r4, r2
  40029c:	0942      	lsrs	r2, r0, #5
  40029e:	0092      	lsls	r2, r2, #2
  4002a0:	f102 4260 	add.w	r2, r2, #3758096384	; 0xe0000000
  4002a4:	f502 4261 	add.w	r2, r2, #57600	; 0xe100
  4002a8:	f8c2 4180 	str.w	r4, [r2, #384]	; 0x180
    \param [in]      IRQn  Interrupt number.
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
  4002ac:	2800      	cmp	r0, #0
  4002ae:	da06      	bge.n	4002be <configure_interrupt_controller+0x42>
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  4002b0:	f003 000f 	and.w	r0, r3, #15
  4002b4:	010b      	lsls	r3, r1, #4
  4002b6:	b2db      	uxtb	r3, r3
  4002b8:	4907      	ldr	r1, [pc, #28]	; (4002d8 <configure_interrupt_controller+0x5c>)
  4002ba:	540b      	strb	r3, [r1, r0]
  4002bc:	e007      	b.n	4002ce <configure_interrupt_controller+0x52>
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
  4002be:	010b      	lsls	r3, r1, #4
  4002c0:	b2db      	uxtb	r3, r3
  4002c2:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
  4002c6:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
  4002ca:	f880 3300 	strb.w	r3, [r0, #768]	; 0x300
    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
/*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  4002ce:	6014      	str	r4, [r2, #0]
  4002d0:	bd10      	pop	{r4, pc}
  4002d2:	bf00      	nop
  4002d4:	00404179 	.word	0x00404179
  4002d8:	e000ed14 	.word	0xe000ed14

004002dc <freertos_copy_bytes_from_pdc_circular_buffer>:
  4002dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4002e0:	4606      	mov	r6, r0
  4002e2:	4690      	mov	r8, r2
  4002e4:	461f      	mov	r7, r3
  4002e6:	6985      	ldr	r5, [r0, #24]
  4002e8:	42a9      	cmp	r1, r5
  4002ea:	d104      	bne.n	4002f6 <freertos_copy_bytes_from_pdc_circular_buffer+0x1a>
  4002ec:	68c3      	ldr	r3, [r0, #12]
  4002ee:	b943      	cbnz	r3, 400302 <freertos_copy_bytes_from_pdc_circular_buffer+0x26>
  4002f0:	6844      	ldr	r4, [r0, #4]
  4002f2:	1a64      	subs	r4, r4, r1
  4002f4:	e006      	b.n	400304 <freertos_copy_bytes_from_pdc_circular_buffer+0x28>
  4002f6:	428d      	cmp	r5, r1
  4002f8:	bf32      	itee	cc
  4002fa:	1b4c      	subcc	r4, r1, r5
  4002fc:	6844      	ldrcs	r4, [r0, #4]
  4002fe:	1b64      	subcs	r4, r4, r5
  400300:	e000      	b.n	400304 <freertos_copy_bytes_from_pdc_circular_buffer+0x28>
  400302:	2400      	movs	r4, #0
  400304:	42bc      	cmp	r4, r7
  400306:	d30a      	bcc.n	40031e <freertos_copy_bytes_from_pdc_circular_buffer+0x42>
  400308:	42a7      	cmp	r7, r4
  40030a:	d007      	beq.n	40031c <freertos_copy_bytes_from_pdc_circular_buffer+0x40>
  40030c:	6930      	ldr	r0, [r6, #16]
  40030e:	2100      	movs	r1, #0
  400310:	460a      	mov	r2, r1
  400312:	460b      	mov	r3, r1
  400314:	4c0e      	ldr	r4, [pc, #56]	; (400350 <freertos_copy_bytes_from_pdc_circular_buffer+0x74>)
  400316:	47a0      	blx	r4
  400318:	463c      	mov	r4, r7
  40031a:	e000      	b.n	40031e <freertos_copy_bytes_from_pdc_circular_buffer+0x42>
  40031c:	463c      	mov	r4, r7
  40031e:	4640      	mov	r0, r8
  400320:	69b1      	ldr	r1, [r6, #24]
  400322:	4622      	mov	r2, r4
  400324:	4b0b      	ldr	r3, [pc, #44]	; (400354 <freertos_copy_bytes_from_pdc_circular_buffer+0x78>)
  400326:	4798      	blx	r3
  400328:	4425      	add	r5, r4
  40032a:	6873      	ldr	r3, [r6, #4]
  40032c:	429d      	cmp	r5, r3
  40032e:	d306      	bcc.n	40033e <freertos_copy_bytes_from_pdc_circular_buffer+0x62>
  400330:	4b09      	ldr	r3, [pc, #36]	; (400358 <freertos_copy_bytes_from_pdc_circular_buffer+0x7c>)
  400332:	4798      	blx	r3
  400334:	6833      	ldr	r3, [r6, #0]
  400336:	61b3      	str	r3, [r6, #24]
  400338:	4b08      	ldr	r3, [pc, #32]	; (40035c <freertos_copy_bytes_from_pdc_circular_buffer+0x80>)
  40033a:	4798      	blx	r3
  40033c:	e004      	b.n	400348 <freertos_copy_bytes_from_pdc_circular_buffer+0x6c>
  40033e:	4b06      	ldr	r3, [pc, #24]	; (400358 <freertos_copy_bytes_from_pdc_circular_buffer+0x7c>)
  400340:	4798      	blx	r3
  400342:	61b5      	str	r5, [r6, #24]
  400344:	4b05      	ldr	r3, [pc, #20]	; (40035c <freertos_copy_bytes_from_pdc_circular_buffer+0x80>)
  400346:	4798      	blx	r3
  400348:	4620      	mov	r0, r4
  40034a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40034e:	bf00      	nop
  400350:	0040486d 	.word	0x0040486d
  400354:	00406b39 	.word	0x00406b39
  400358:	004041a9 	.word	0x004041a9
  40035c:	004041e9 	.word	0x004041e9

00400360 <freertos_obtain_peripheral_access_mutex>:
  400360:	6843      	ldr	r3, [r0, #4]
  400362:	b1b3      	cbz	r3, 400392 <freertos_obtain_peripheral_access_mutex+0x32>
  400364:	b530      	push	{r4, r5, lr}
  400366:	b083      	sub	sp, #12
  400368:	460d      	mov	r5, r1
  40036a:	4604      	mov	r4, r0
  40036c:	4668      	mov	r0, sp
  40036e:	4b0d      	ldr	r3, [pc, #52]	; (4003a4 <freertos_obtain_peripheral_access_mutex+0x44>)
  400370:	4798      	blx	r3
  400372:	6860      	ldr	r0, [r4, #4]
  400374:	2100      	movs	r1, #0
  400376:	682a      	ldr	r2, [r5, #0]
  400378:	460b      	mov	r3, r1
  40037a:	4c0b      	ldr	r4, [pc, #44]	; (4003a8 <freertos_obtain_peripheral_access_mutex+0x48>)
  40037c:	47a0      	blx	r4
  40037e:	b158      	cbz	r0, 400398 <freertos_obtain_peripheral_access_mutex+0x38>
  400380:	4668      	mov	r0, sp
  400382:	4629      	mov	r1, r5
  400384:	4b09      	ldr	r3, [pc, #36]	; (4003ac <freertos_obtain_peripheral_access_mutex+0x4c>)
  400386:	4798      	blx	r3
  400388:	2801      	cmp	r0, #1
  40038a:	d107      	bne.n	40039c <freertos_obtain_peripheral_access_mutex+0x3c>
  40038c:	2000      	movs	r0, #0
  40038e:	6028      	str	r0, [r5, #0]
  400390:	e005      	b.n	40039e <freertos_obtain_peripheral_access_mutex+0x3e>
  400392:	2000      	movs	r0, #0
  400394:	b240      	sxtb	r0, r0
  400396:	4770      	bx	lr
  400398:	20fd      	movs	r0, #253	; 0xfd
  40039a:	e000      	b.n	40039e <freertos_obtain_peripheral_access_mutex+0x3e>
  40039c:	2000      	movs	r0, #0
  40039e:	b240      	sxtb	r0, r0
  4003a0:	b003      	add	sp, #12
  4003a2:	bd30      	pop	{r4, r5, pc}
  4003a4:	00405899 	.word	0x00405899
  4003a8:	00404bb1 	.word	0x00404bb1
  4003ac:	004058bd 	.word	0x004058bd

004003b0 <freertos_start_pdc_transfer>:
  4003b0:	b5f0      	push	{r4, r5, r6, r7, lr}
  4003b2:	b083      	sub	sp, #12
  4003b4:	460e      	mov	r6, r1
  4003b6:	4615      	mov	r5, r2
  4003b8:	461c      	mov	r4, r3
  4003ba:	9b08      	ldr	r3, [sp, #32]
  4003bc:	b113      	cbz	r3, 4003c4 <freertos_start_pdc_transfer+0x14>
  4003be:	6003      	str	r3, [r0, #0]
  4003c0:	4618      	mov	r0, r3
  4003c2:	e001      	b.n	4003c8 <freertos_start_pdc_transfer+0x18>
  4003c4:	6800      	ldr	r0, [r0, #0]
  4003c6:	b120      	cbz	r0, 4003d2 <freertos_start_pdc_transfer+0x22>
  4003c8:	2100      	movs	r1, #0
  4003ca:	460a      	mov	r2, r1
  4003cc:	460b      	mov	r3, r1
  4003ce:	4f13      	ldr	r7, [pc, #76]	; (40041c <freertos_start_pdc_transfer+0x6c>)
  4003d0:	47b8      	blx	r7
  4003d2:	9600      	str	r6, [sp, #0]
  4003d4:	9501      	str	r5, [sp, #4]
  4003d6:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
  4003da:	b17b      	cbz	r3, 4003fc <freertos_start_pdc_transfer+0x4c>
  4003dc:	4620      	mov	r0, r4
  4003de:	f44f 7100 	mov.w	r1, #512	; 0x200
  4003e2:	4b0f      	ldr	r3, [pc, #60]	; (400420 <freertos_start_pdc_transfer+0x70>)
  4003e4:	4798      	blx	r3
  4003e6:	4620      	mov	r0, r4
  4003e8:	4669      	mov	r1, sp
  4003ea:	2200      	movs	r2, #0
  4003ec:	4b0d      	ldr	r3, [pc, #52]	; (400424 <freertos_start_pdc_transfer+0x74>)
  4003ee:	4798      	blx	r3
  4003f0:	4620      	mov	r0, r4
  4003f2:	f44f 7180 	mov.w	r1, #256	; 0x100
  4003f6:	4b0c      	ldr	r3, [pc, #48]	; (400428 <freertos_start_pdc_transfer+0x78>)
  4003f8:	4798      	blx	r3
  4003fa:	e00c      	b.n	400416 <freertos_start_pdc_transfer+0x66>
  4003fc:	4620      	mov	r0, r4
  4003fe:	2102      	movs	r1, #2
  400400:	4b07      	ldr	r3, [pc, #28]	; (400420 <freertos_start_pdc_transfer+0x70>)
  400402:	4798      	blx	r3
  400404:	4620      	mov	r0, r4
  400406:	4669      	mov	r1, sp
  400408:	2200      	movs	r2, #0
  40040a:	4b08      	ldr	r3, [pc, #32]	; (40042c <freertos_start_pdc_transfer+0x7c>)
  40040c:	4798      	blx	r3
  40040e:	4620      	mov	r0, r4
  400410:	2101      	movs	r1, #1
  400412:	4b05      	ldr	r3, [pc, #20]	; (400428 <freertos_start_pdc_transfer+0x78>)
  400414:	4798      	blx	r3
  400416:	b003      	add	sp, #12
  400418:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40041a:	bf00      	nop
  40041c:	00404bb1 	.word	0x00404bb1
  400420:	00401c71 	.word	0x00401c71
  400424:	00401c35 	.word	0x00401c35
  400428:	00401c65 	.word	0x00401c65
  40042c:	00401c4d 	.word	0x00401c4d

00400430 <freertos_optionally_wait_transfer_completion>:
  400430:	b951      	cbnz	r1, 400448 <freertos_optionally_wait_transfer_completion+0x18>
  400432:	6800      	ldr	r0, [r0, #0]
  400434:	b150      	cbz	r0, 40044c <freertos_optionally_wait_transfer_completion+0x1c>
  400436:	b510      	push	{r4, lr}
  400438:	460b      	mov	r3, r1
  40043a:	4c07      	ldr	r4, [pc, #28]	; (400458 <freertos_optionally_wait_transfer_completion+0x28>)
  40043c:	47a0      	blx	r4
  40043e:	2801      	cmp	r0, #1
  400440:	bf0c      	ite	eq
  400442:	2000      	moveq	r0, #0
  400444:	20fd      	movne	r0, #253	; 0xfd
  400446:	e004      	b.n	400452 <freertos_optionally_wait_transfer_completion+0x22>
  400448:	2000      	movs	r0, #0
  40044a:	e000      	b.n	40044e <freertos_optionally_wait_transfer_completion+0x1e>
  40044c:	2000      	movs	r0, #0
  40044e:	b240      	sxtb	r0, r0
  400450:	4770      	bx	lr
  400452:	b240      	sxtb	r0, r0
  400454:	bd10      	pop	{r4, pc}
  400456:	bf00      	nop
  400458:	00404bb1 	.word	0x00404bb1

0040045c <local_twi_handler>:
  40045c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  400460:	b082      	sub	sp, #8
  400462:	4607      	mov	r7, r0
  400464:	2300      	movs	r3, #0
  400466:	9301      	str	r3, [sp, #4]
  400468:	0103      	lsls	r3, r0, #4
  40046a:	4a78      	ldr	r2, [pc, #480]	; (40064c <local_twi_handler+0x1f0>)
  40046c:	58d5      	ldr	r5, [r2, r3]
  40046e:	4628      	mov	r0, r5
  400470:	4b77      	ldr	r3, [pc, #476]	; (400650 <local_twi_handler+0x1f4>)
  400472:	4798      	blx	r3
  400474:	4606      	mov	r6, r0
  400476:	4628      	mov	r0, r5
  400478:	4b76      	ldr	r3, [pc, #472]	; (400654 <local_twi_handler+0x1f8>)
  40047a:	4798      	blx	r3
  40047c:	4006      	ands	r6, r0
  40047e:	f416 5f00 	tst.w	r6, #8192	; 0x2000
  400482:	d045      	beq.n	400510 <local_twi_handler+0xb4>
  400484:	4b71      	ldr	r3, [pc, #452]	; (40064c <local_twi_handler+0x1f0>)
  400486:	eb03 1307 	add.w	r3, r3, r7, lsl #4
  40048a:	6858      	ldr	r0, [r3, #4]
  40048c:	f44f 7100 	mov.w	r1, #512	; 0x200
  400490:	4b71      	ldr	r3, [pc, #452]	; (400658 <local_twi_handler+0x1fc>)
  400492:	4798      	blx	r3
  400494:	4628      	mov	r0, r5
  400496:	f44f 5100 	mov.w	r1, #8192	; 0x2000
  40049a:	4b70      	ldr	r3, [pc, #448]	; (40065c <local_twi_handler+0x200>)
  40049c:	4798      	blx	r3
  40049e:	2400      	movs	r4, #0
  4004a0:	6a2b      	ldr	r3, [r5, #32]
  4004a2:	f013 0f04 	tst.w	r3, #4
  4004a6:	d106      	bne.n	4004b6 <local_twi_handler+0x5a>
  4004a8:	3401      	adds	r4, #1
  4004aa:	f1b4 3fff 	cmp.w	r4, #4294967295
  4004ae:	d1f7      	bne.n	4004a0 <local_twi_handler+0x44>
  4004b0:	f04f 0801 	mov.w	r8, #1
  4004b4:	e001      	b.n	4004ba <local_twi_handler+0x5e>
  4004b6:	f04f 0800 	mov.w	r8, #0
  4004ba:	2302      	movs	r3, #2
  4004bc:	602b      	str	r3, [r5, #0]
  4004be:	4b68      	ldr	r3, [pc, #416]	; (400660 <local_twi_handler+0x204>)
  4004c0:	f853 2037 	ldr.w	r2, [r3, r7, lsl #3]
  4004c4:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
  4004c8:	685b      	ldr	r3, [r3, #4]
  4004ca:	4413      	add	r3, r2
  4004cc:	f813 3c01 	ldrb.w	r3, [r3, #-1]
  4004d0:	636b      	str	r3, [r5, #52]	; 0x34
  4004d2:	6a2b      	ldr	r3, [r5, #32]
  4004d4:	f013 0f01 	tst.w	r3, #1
  4004d8:	d104      	bne.n	4004e4 <local_twi_handler+0x88>
  4004da:	3401      	adds	r4, #1
  4004dc:	f1b4 3fff 	cmp.w	r4, #4294967295
  4004e0:	d1f7      	bne.n	4004d2 <local_twi_handler+0x76>
  4004e2:	e095      	b.n	400610 <local_twi_handler+0x1b4>
  4004e4:	4b5f      	ldr	r3, [pc, #380]	; (400664 <local_twi_handler+0x208>)
  4004e6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
  4004ea:	6858      	ldr	r0, [r3, #4]
  4004ec:	b910      	cbnz	r0, 4004f4 <local_twi_handler+0x98>
  4004ee:	e004      	b.n	4004fa <local_twi_handler+0x9e>
  4004f0:	f04f 0801 	mov.w	r8, #1
  4004f4:	a901      	add	r1, sp, #4
  4004f6:	4b5c      	ldr	r3, [pc, #368]	; (400668 <local_twi_handler+0x20c>)
  4004f8:	4798      	blx	r3
  4004fa:	f1b4 3fff 	cmp.w	r4, #4294967295
  4004fe:	d009      	beq.n	400514 <local_twi_handler+0xb8>
  400500:	4b58      	ldr	r3, [pc, #352]	; (400664 <local_twi_handler+0x208>)
  400502:	f853 0037 	ldr.w	r0, [r3, r7, lsl #3]
  400506:	b128      	cbz	r0, 400514 <local_twi_handler+0xb8>
  400508:	a901      	add	r1, sp, #4
  40050a:	4b57      	ldr	r3, [pc, #348]	; (400668 <local_twi_handler+0x20c>)
  40050c:	4798      	blx	r3
  40050e:	e001      	b.n	400514 <local_twi_handler+0xb8>
  400510:	f04f 0800 	mov.w	r8, #0
  400514:	f416 5f80 	tst.w	r6, #4096	; 0x1000
  400518:	d04f      	beq.n	4005ba <local_twi_handler+0x15e>
  40051a:	4b4c      	ldr	r3, [pc, #304]	; (40064c <local_twi_handler+0x1f0>)
  40051c:	eb03 1307 	add.w	r3, r3, r7, lsl #4
  400520:	6858      	ldr	r0, [r3, #4]
  400522:	2102      	movs	r1, #2
  400524:	4b4c      	ldr	r3, [pc, #304]	; (400658 <local_twi_handler+0x1fc>)
  400526:	4798      	blx	r3
  400528:	4628      	mov	r0, r5
  40052a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  40052e:	4b4b      	ldr	r3, [pc, #300]	; (40065c <local_twi_handler+0x200>)
  400530:	4798      	blx	r3
  400532:	2400      	movs	r4, #0
  400534:	6a2b      	ldr	r3, [r5, #32]
  400536:	f013 0f02 	tst.w	r3, #2
  40053a:	d103      	bne.n	400544 <local_twi_handler+0xe8>
  40053c:	3401      	adds	r4, #1
  40053e:	f1b4 3fff 	cmp.w	r4, #4294967295
  400542:	d1f7      	bne.n	400534 <local_twi_handler+0xd8>
  400544:	2302      	movs	r3, #2
  400546:	602b      	str	r3, [r5, #0]
  400548:	4b45      	ldr	r3, [pc, #276]	; (400660 <local_twi_handler+0x204>)
  40054a:	f853 1037 	ldr.w	r1, [r3, r7, lsl #3]
  40054e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
  400552:	685a      	ldr	r2, [r3, #4]
  400554:	6b28      	ldr	r0, [r5, #48]	; 0x30
  400556:	188b      	adds	r3, r1, r2
  400558:	f803 0c02 	strb.w	r0, [r3, #-2]
  40055c:	6a2b      	ldr	r3, [r5, #32]
  40055e:	f013 0f02 	tst.w	r3, #2
  400562:	d104      	bne.n	40056e <local_twi_handler+0x112>
  400564:	3401      	adds	r4, #1
  400566:	f1b4 3fff 	cmp.w	r4, #4294967295
  40056a:	d1f7      	bne.n	40055c <local_twi_handler+0x100>
  40056c:	e063      	b.n	400636 <local_twi_handler+0x1da>
  40056e:	f1b4 3fff 	cmp.w	r4, #4294967295
  400572:	d059      	beq.n	400628 <local_twi_handler+0x1cc>
  400574:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  400576:	440a      	add	r2, r1
  400578:	f802 3c01 	strb.w	r3, [r2, #-1]
  40057c:	2400      	movs	r4, #0
  40057e:	6a2b      	ldr	r3, [r5, #32]
  400580:	f013 0f01 	tst.w	r3, #1
  400584:	d104      	bne.n	400590 <local_twi_handler+0x134>
  400586:	3401      	adds	r4, #1
  400588:	f1b4 3fff 	cmp.w	r4, #4294967295
  40058c:	d1f7      	bne.n	40057e <local_twi_handler+0x122>
  40058e:	e049      	b.n	400624 <local_twi_handler+0x1c8>
  400590:	4b34      	ldr	r3, [pc, #208]	; (400664 <local_twi_handler+0x208>)
  400592:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
  400596:	6858      	ldr	r0, [r3, #4]
  400598:	b910      	cbnz	r0, 4005a0 <local_twi_handler+0x144>
  40059a:	e004      	b.n	4005a6 <local_twi_handler+0x14a>
  40059c:	f04f 34ff 	mov.w	r4, #4294967295
  4005a0:	a901      	add	r1, sp, #4
  4005a2:	4b31      	ldr	r3, [pc, #196]	; (400668 <local_twi_handler+0x20c>)
  4005a4:	4798      	blx	r3
  4005a6:	f1b4 3fff 	cmp.w	r4, #4294967295
  4005aa:	d006      	beq.n	4005ba <local_twi_handler+0x15e>
  4005ac:	4b2f      	ldr	r3, [pc, #188]	; (40066c <local_twi_handler+0x210>)
  4005ae:	f853 0037 	ldr.w	r0, [r3, r7, lsl #3]
  4005b2:	b110      	cbz	r0, 4005ba <local_twi_handler+0x15e>
  4005b4:	a901      	add	r1, sp, #4
  4005b6:	4b2c      	ldr	r3, [pc, #176]	; (400668 <local_twi_handler+0x20c>)
  4005b8:	4798      	blx	r3
  4005ba:	f416 7f50 	tst.w	r6, #832	; 0x340
  4005be:	d102      	bne.n	4005c6 <local_twi_handler+0x16a>
  4005c0:	f1b8 0f00 	cmp.w	r8, #0
  4005c4:	d01d      	beq.n	400602 <local_twi_handler+0x1a6>
  4005c6:	4b21      	ldr	r3, [pc, #132]	; (40064c <local_twi_handler+0x1f0>)
  4005c8:	eb03 1307 	add.w	r3, r3, r7, lsl #4
  4005cc:	6858      	ldr	r0, [r3, #4]
  4005ce:	f240 2102 	movw	r1, #514	; 0x202
  4005d2:	4b21      	ldr	r3, [pc, #132]	; (400658 <local_twi_handler+0x1fc>)
  4005d4:	4798      	blx	r3
  4005d6:	f416 7f80 	tst.w	r6, #256	; 0x100
  4005da:	bf04      	itt	eq
  4005dc:	2302      	moveq	r3, #2
  4005de:	602b      	streq	r3, [r5, #0]
  4005e0:	4628      	mov	r0, r5
  4005e2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
  4005e6:	4c1d      	ldr	r4, [pc, #116]	; (40065c <local_twi_handler+0x200>)
  4005e8:	47a0      	blx	r4
  4005ea:	4628      	mov	r0, r5
  4005ec:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  4005f0:	47a0      	blx	r4
  4005f2:	4b1c      	ldr	r3, [pc, #112]	; (400664 <local_twi_handler+0x208>)
  4005f4:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
  4005f8:	6878      	ldr	r0, [r7, #4]
  4005fa:	b110      	cbz	r0, 400602 <local_twi_handler+0x1a6>
  4005fc:	a901      	add	r1, sp, #4
  4005fe:	4b1a      	ldr	r3, [pc, #104]	; (400668 <local_twi_handler+0x20c>)
  400600:	4798      	blx	r3
  400602:	9b01      	ldr	r3, [sp, #4]
  400604:	b1f3      	cbz	r3, 400644 <local_twi_handler+0x1e8>
  400606:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  40060a:	4b19      	ldr	r3, [pc, #100]	; (400670 <local_twi_handler+0x214>)
  40060c:	601a      	str	r2, [r3, #0]
  40060e:	e019      	b.n	400644 <local_twi_handler+0x1e8>
  400610:	4b14      	ldr	r3, [pc, #80]	; (400664 <local_twi_handler+0x208>)
  400612:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
  400616:	6858      	ldr	r0, [r3, #4]
  400618:	2800      	cmp	r0, #0
  40061a:	f47f af69 	bne.w	4004f0 <local_twi_handler+0x94>
  40061e:	f04f 0801 	mov.w	r8, #1
  400622:	e777      	b.n	400514 <local_twi_handler+0xb8>
  400624:	f04f 0801 	mov.w	r8, #1
  400628:	4b0e      	ldr	r3, [pc, #56]	; (400664 <local_twi_handler+0x208>)
  40062a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
  40062e:	6858      	ldr	r0, [r3, #4]
  400630:	2800      	cmp	r0, #0
  400632:	d1b3      	bne.n	40059c <local_twi_handler+0x140>
  400634:	e7c1      	b.n	4005ba <local_twi_handler+0x15e>
  400636:	4b0b      	ldr	r3, [pc, #44]	; (400664 <local_twi_handler+0x208>)
  400638:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
  40063c:	6858      	ldr	r0, [r3, #4]
  40063e:	2800      	cmp	r0, #0
  400640:	d1ae      	bne.n	4005a0 <local_twi_handler+0x144>
  400642:	e7ba      	b.n	4005ba <local_twi_handler+0x15e>
  400644:	b002      	add	sp, #8
  400646:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40064a:	bf00      	nop
  40064c:	0040b964 	.word	0x0040b964
  400650:	004021d5 	.word	0x004021d5
  400654:	004021d9 	.word	0x004021d9
  400658:	00401c71 	.word	0x00401c71
  40065c:	004021cd 	.word	0x004021cd
  400660:	2000095c 	.word	0x2000095c
  400664:	2000096c 	.word	0x2000096c
  400668:	00404b0d 	.word	0x00404b0d
  40066c:	2000094c 	.word	0x2000094c
  400670:	e000ed04 	.word	0xe000ed04

00400674 <TWI0_Handler>:
  400674:	b508      	push	{r3, lr}
  400676:	2000      	movs	r0, #0
  400678:	4b01      	ldr	r3, [pc, #4]	; (400680 <TWI0_Handler+0xc>)
  40067a:	4798      	blx	r3
  40067c:	bd08      	pop	{r3, pc}
  40067e:	bf00      	nop
  400680:	0040045d 	.word	0x0040045d

00400684 <TWI1_Handler>:
  400684:	b508      	push	{r3, lr}
  400686:	2001      	movs	r0, #1
  400688:	4b01      	ldr	r3, [pc, #4]	; (400690 <TWI1_Handler+0xc>)
  40068a:	4798      	blx	r3
  40068c:	bd08      	pop	{r3, pc}
  40068e:	bf00      	nop
  400690:	0040045d 	.word	0x0040045d

00400694 <configure_rx_dma>:
  400694:	b570      	push	{r4, r5, r6, lr}
  400696:	ebc0 02c0 	rsb	r2, r0, r0, lsl #3
  40069a:	4b2d      	ldr	r3, [pc, #180]	; (400750 <configure_rx_dma+0xbc>)
  40069c:	eb03 0382 	add.w	r3, r3, r2, lsl #2
  4006a0:	699a      	ldr	r2, [r3, #24]
  4006a2:	689b      	ldr	r3, [r3, #8]
  4006a4:	429a      	cmp	r2, r3
  4006a6:	d114      	bne.n	4006d2 <configure_rx_dma+0x3e>
  4006a8:	b951      	cbnz	r1, 4006c0 <configure_rx_dma+0x2c>
  4006aa:	ebc0 01c0 	rsb	r1, r0, r0, lsl #3
  4006ae:	4b28      	ldr	r3, [pc, #160]	; (400750 <configure_rx_dma+0xbc>)
  4006b0:	eb03 0381 	add.w	r3, r3, r1, lsl #2
  4006b4:	2400      	movs	r4, #0
  4006b6:	60dc      	str	r4, [r3, #12]
  4006b8:	685b      	ldr	r3, [r3, #4]
  4006ba:	429a      	cmp	r2, r3
  4006bc:	d940      	bls.n	400740 <configure_rx_dma+0xac>
  4006be:	e024      	b.n	40070a <configure_rx_dma+0x76>
  4006c0:	ebc0 04c0 	rsb	r4, r0, r0, lsl #3
  4006c4:	4922      	ldr	r1, [pc, #136]	; (400750 <configure_rx_dma+0xbc>)
  4006c6:	eb01 0184 	add.w	r1, r1, r4, lsl #2
  4006ca:	684c      	ldr	r4, [r1, #4]
  4006cc:	1aa2      	subs	r2, r4, r2
  4006ce:	60ca      	str	r2, [r1, #12]
  4006d0:	e011      	b.n	4006f6 <configure_rx_dma+0x62>
  4006d2:	429a      	cmp	r2, r3
  4006d4:	d907      	bls.n	4006e6 <configure_rx_dma+0x52>
  4006d6:	ebc0 04c0 	rsb	r4, r0, r0, lsl #3
  4006da:	491d      	ldr	r1, [pc, #116]	; (400750 <configure_rx_dma+0xbc>)
  4006dc:	eb01 0184 	add.w	r1, r1, r4, lsl #2
  4006e0:	1ad2      	subs	r2, r2, r3
  4006e2:	60ca      	str	r2, [r1, #12]
  4006e4:	e007      	b.n	4006f6 <configure_rx_dma+0x62>
  4006e6:	ebc0 01c0 	rsb	r1, r0, r0, lsl #3
  4006ea:	4a19      	ldr	r2, [pc, #100]	; (400750 <configure_rx_dma+0xbc>)
  4006ec:	eb02 0281 	add.w	r2, r2, r1, lsl #2
  4006f0:	6851      	ldr	r1, [r2, #4]
  4006f2:	1ac9      	subs	r1, r1, r3
  4006f4:	60d1      	str	r1, [r2, #12]
  4006f6:	ebc0 01c0 	rsb	r1, r0, r0, lsl #3
  4006fa:	4a15      	ldr	r2, [pc, #84]	; (400750 <configure_rx_dma+0xbc>)
  4006fc:	eb02 0281 	add.w	r2, r2, r1, lsl #2
  400700:	68d1      	ldr	r1, [r2, #12]
  400702:	440b      	add	r3, r1
  400704:	6852      	ldr	r2, [r2, #4]
  400706:	4293      	cmp	r3, r2
  400708:	d902      	bls.n	400710 <configure_rx_dma+0x7c>
  40070a:	4b12      	ldr	r3, [pc, #72]	; (400754 <configure_rx_dma+0xc0>)
  40070c:	4798      	blx	r3
  40070e:	e7fe      	b.n	40070e <configure_rx_dma+0x7a>
  400710:	b1b1      	cbz	r1, 400740 <configure_rx_dma+0xac>
  400712:	4d11      	ldr	r5, [pc, #68]	; (400758 <configure_rx_dma+0xc4>)
  400714:	0104      	lsls	r4, r0, #4
  400716:	192b      	adds	r3, r5, r4
  400718:	685e      	ldr	r6, [r3, #4]
  40071a:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
  40071e:	4b0c      	ldr	r3, [pc, #48]	; (400750 <configure_rx_dma+0xbc>)
  400720:	eb03 0180 	add.w	r1, r3, r0, lsl #2
  400724:	4630      	mov	r0, r6
  400726:	3108      	adds	r1, #8
  400728:	2200      	movs	r2, #0
  40072a:	4b0c      	ldr	r3, [pc, #48]	; (40075c <configure_rx_dma+0xc8>)
  40072c:	4798      	blx	r3
  40072e:	4630      	mov	r0, r6
  400730:	2101      	movs	r1, #1
  400732:	4b0b      	ldr	r3, [pc, #44]	; (400760 <configure_rx_dma+0xcc>)
  400734:	4798      	blx	r3
  400736:	5928      	ldr	r0, [r5, r4]
  400738:	2109      	movs	r1, #9
  40073a:	4b0a      	ldr	r3, [pc, #40]	; (400764 <configure_rx_dma+0xd0>)
  40073c:	4798      	blx	r3
  40073e:	bd70      	pop	{r4, r5, r6, pc}
  400740:	0100      	lsls	r0, r0, #4
  400742:	4b05      	ldr	r3, [pc, #20]	; (400758 <configure_rx_dma+0xc4>)
  400744:	5818      	ldr	r0, [r3, r0]
  400746:	2109      	movs	r1, #9
  400748:	4b07      	ldr	r3, [pc, #28]	; (400768 <configure_rx_dma+0xd4>)
  40074a:	4798      	blx	r3
  40074c:	bd70      	pop	{r4, r5, r6, pc}
  40074e:	bf00      	nop
  400750:	2000097c 	.word	0x2000097c
  400754:	00404179 	.word	0x00404179
  400758:	0040b984 	.word	0x0040b984
  40075c:	00401c4d 	.word	0x00401c4d
  400760:	00401c65 	.word	0x00401c65
  400764:	00402235 	.word	0x00402235
  400768:	00402239 	.word	0x00402239

0040076c <local_uart_handler>:
  40076c:	b570      	push	{r4, r5, r6, lr}
  40076e:	b082      	sub	sp, #8
  400770:	4604      	mov	r4, r0
  400772:	2300      	movs	r3, #0
  400774:	9301      	str	r3, [sp, #4]
  400776:	0103      	lsls	r3, r0, #4
  400778:	4a3c      	ldr	r2, [pc, #240]	; (40086c <local_uart_handler+0x100>)
  40077a:	58d6      	ldr	r6, [r2, r3]
  40077c:	4630      	mov	r0, r6
  40077e:	4b3c      	ldr	r3, [pc, #240]	; (400870 <local_uart_handler+0x104>)
  400780:	4798      	blx	r3
  400782:	4605      	mov	r5, r0
  400784:	4630      	mov	r0, r6
  400786:	4b3b      	ldr	r3, [pc, #236]	; (400874 <local_uart_handler+0x108>)
  400788:	4798      	blx	r3
  40078a:	4005      	ands	r5, r0
  40078c:	f015 0f10 	tst.w	r5, #16
  400790:	d012      	beq.n	4007b8 <local_uart_handler+0x4c>
  400792:	4630      	mov	r0, r6
  400794:	2110      	movs	r1, #16
  400796:	4b38      	ldr	r3, [pc, #224]	; (400878 <local_uart_handler+0x10c>)
  400798:	4798      	blx	r3
  40079a:	4b38      	ldr	r3, [pc, #224]	; (40087c <local_uart_handler+0x110>)
  40079c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
  4007a0:	6858      	ldr	r0, [r3, #4]
  4007a2:	b110      	cbz	r0, 4007aa <local_uart_handler+0x3e>
  4007a4:	a901      	add	r1, sp, #4
  4007a6:	4b36      	ldr	r3, [pc, #216]	; (400880 <local_uart_handler+0x114>)
  4007a8:	4798      	blx	r3
  4007aa:	4b34      	ldr	r3, [pc, #208]	; (40087c <local_uart_handler+0x110>)
  4007ac:	f853 0034 	ldr.w	r0, [r3, r4, lsl #3]
  4007b0:	b110      	cbz	r0, 4007b8 <local_uart_handler+0x4c>
  4007b2:	a901      	add	r1, sp, #4
  4007b4:	4b32      	ldr	r3, [pc, #200]	; (400880 <local_uart_handler+0x114>)
  4007b6:	4798      	blx	r3
  4007b8:	f015 0f08 	tst.w	r5, #8
  4007bc:	d02f      	beq.n	40081e <local_uart_handler+0xb2>
  4007be:	ebc4 02c4 	rsb	r2, r4, r4, lsl #3
  4007c2:	4b30      	ldr	r3, [pc, #192]	; (400884 <local_uart_handler+0x118>)
  4007c4:	eb03 0382 	add.w	r3, r3, r2, lsl #2
  4007c8:	699b      	ldr	r3, [r3, #24]
  4007ca:	b913      	cbnz	r3, 4007d2 <local_uart_handler+0x66>
  4007cc:	4b2e      	ldr	r3, [pc, #184]	; (400888 <local_uart_handler+0x11c>)
  4007ce:	4798      	blx	r3
  4007d0:	e7fe      	b.n	4007d0 <local_uart_handler+0x64>
  4007d2:	2b01      	cmp	r3, #1
  4007d4:	d102      	bne.n	4007dc <local_uart_handler+0x70>
  4007d6:	4b2c      	ldr	r3, [pc, #176]	; (400888 <local_uart_handler+0x11c>)
  4007d8:	4798      	blx	r3
  4007da:	e7fe      	b.n	4007da <local_uart_handler+0x6e>
  4007dc:	ebc4 02c4 	rsb	r2, r4, r4, lsl #3
  4007e0:	4b28      	ldr	r3, [pc, #160]	; (400884 <local_uart_handler+0x118>)
  4007e2:	eb03 0382 	add.w	r3, r3, r2, lsl #2
  4007e6:	68d9      	ldr	r1, [r3, #12]
  4007e8:	689a      	ldr	r2, [r3, #8]
  4007ea:	440a      	add	r2, r1
  4007ec:	609a      	str	r2, [r3, #8]
  4007ee:	685b      	ldr	r3, [r3, #4]
  4007f0:	429a      	cmp	r2, r3
  4007f2:	d306      	bcc.n	400802 <local_uart_handler+0x96>
  4007f4:	4a23      	ldr	r2, [pc, #140]	; (400884 <local_uart_handler+0x118>)
  4007f6:	ebc4 03c4 	rsb	r3, r4, r4, lsl #3
  4007fa:	009b      	lsls	r3, r3, #2
  4007fc:	18d1      	adds	r1, r2, r3
  4007fe:	58d3      	ldr	r3, [r2, r3]
  400800:	608b      	str	r3, [r1, #8]
  400802:	4620      	mov	r0, r4
  400804:	2100      	movs	r1, #0
  400806:	4b21      	ldr	r3, [pc, #132]	; (40088c <local_uart_handler+0x120>)
  400808:	4798      	blx	r3
  40080a:	ebc4 02c4 	rsb	r2, r4, r4, lsl #3
  40080e:	4b1d      	ldr	r3, [pc, #116]	; (400884 <local_uart_handler+0x118>)
  400810:	eb03 0382 	add.w	r3, r3, r2, lsl #2
  400814:	6918      	ldr	r0, [r3, #16]
  400816:	b318      	cbz	r0, 400860 <local_uart_handler+0xf4>
  400818:	a901      	add	r1, sp, #4
  40081a:	4b19      	ldr	r3, [pc, #100]	; (400880 <local_uart_handler+0x114>)
  40081c:	4798      	blx	r3
  40081e:	b955      	cbnz	r5, 400836 <local_uart_handler+0xca>
  400820:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
  400824:	4b17      	ldr	r3, [pc, #92]	; (400884 <local_uart_handler+0x118>)
  400826:	eb03 0384 	add.w	r3, r3, r4, lsl #2
  40082a:	6918      	ldr	r0, [r3, #16]
  40082c:	b188      	cbz	r0, 400852 <local_uart_handler+0xe6>
  40082e:	a901      	add	r1, sp, #4
  400830:	4b13      	ldr	r3, [pc, #76]	; (400880 <local_uart_handler+0x114>)
  400832:	4798      	blx	r3
  400834:	e00d      	b.n	400852 <local_uart_handler+0xe6>
  400836:	f015 0fe0 	tst.w	r5, #224	; 0xe0
  40083a:	d00a      	beq.n	400852 <local_uart_handler+0xe6>
  40083c:	4630      	mov	r0, r6
  40083e:	4b14      	ldr	r3, [pc, #80]	; (400890 <local_uart_handler+0x124>)
  400840:	4798      	blx	r3
  400842:	4b0e      	ldr	r3, [pc, #56]	; (40087c <local_uart_handler+0x110>)
  400844:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
  400848:	6860      	ldr	r0, [r4, #4]
  40084a:	b110      	cbz	r0, 400852 <local_uart_handler+0xe6>
  40084c:	a901      	add	r1, sp, #4
  40084e:	4b0c      	ldr	r3, [pc, #48]	; (400880 <local_uart_handler+0x114>)
  400850:	4798      	blx	r3
  400852:	9b01      	ldr	r3, [sp, #4]
  400854:	b13b      	cbz	r3, 400866 <local_uart_handler+0xfa>
  400856:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  40085a:	4b0e      	ldr	r3, [pc, #56]	; (400894 <local_uart_handler+0x128>)
  40085c:	601a      	str	r2, [r3, #0]
  40085e:	e002      	b.n	400866 <local_uart_handler+0xfa>
  400860:	2d00      	cmp	r5, #0
  400862:	d0f6      	beq.n	400852 <local_uart_handler+0xe6>
  400864:	e7e7      	b.n	400836 <local_uart_handler+0xca>
  400866:	b002      	add	sp, #8
  400868:	bd70      	pop	{r4, r5, r6, pc}
  40086a:	bf00      	nop
  40086c:	0040b984 	.word	0x0040b984
  400870:	00402241 	.word	0x00402241
  400874:	0040223d 	.word	0x0040223d
  400878:	00402239 	.word	0x00402239
  40087c:	200009b4 	.word	0x200009b4
  400880:	00404b0d 	.word	0x00404b0d
  400884:	2000097c 	.word	0x2000097c
  400888:	00404179 	.word	0x00404179
  40088c:	00400695 	.word	0x00400695
  400890:	00402245 	.word	0x00402245
  400894:	e000ed04 	.word	0xe000ed04

00400898 <freertos_uart_serial_init>:
  400898:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  40089c:	b082      	sub	sp, #8
  40089e:	4605      	mov	r5, r0
  4008a0:	4688      	mov	r8, r1
  4008a2:	4616      	mov	r6, r2
  4008a4:	f04f 0901 	mov.w	r9, #1
  4008a8:	af02      	add	r7, sp, #8
  4008aa:	f807 9d04 	strb.w	r9, [r7, #-4]!
  4008ae:	4855      	ldr	r0, [pc, #340]	; (400a04 <freertos_uart_serial_init+0x16c>)
  4008b0:	2102      	movs	r1, #2
  4008b2:	462a      	mov	r2, r5
  4008b4:	4b54      	ldr	r3, [pc, #336]	; (400a08 <freertos_uart_serial_init+0x170>)
  4008b6:	4798      	blx	r3
  4008b8:	4604      	mov	r4, r0
  4008ba:	7b30      	ldrb	r0, [r6, #12]
  4008bc:	4639      	mov	r1, r7
  4008be:	464a      	mov	r2, r9
  4008c0:	4b52      	ldr	r3, [pc, #328]	; (400a0c <freertos_uart_serial_init+0x174>)
  4008c2:	4798      	blx	r3
  4008c4:	454c      	cmp	r4, r9
  4008c6:	f300 8095 	bgt.w	4009f4 <freertos_uart_serial_init+0x15c>
  4008ca:	2800      	cmp	r0, #0
  4008cc:	f000 8094 	beq.w	4009f8 <freertos_uart_serial_init+0x160>
  4008d0:	ebc4 02c4 	rsb	r2, r4, r4, lsl #3
  4008d4:	4b4e      	ldr	r3, [pc, #312]	; (400a10 <freertos_uart_serial_init+0x178>)
  4008d6:	eb03 0382 	add.w	r3, r3, r2, lsl #2
  4008da:	699b      	ldr	r3, [r3, #24]
  4008dc:	b113      	cbz	r3, 4008e4 <freertos_uart_serial_init+0x4c>
  4008de:	4b4d      	ldr	r3, [pc, #308]	; (400a14 <freertos_uart_serial_init+0x17c>)
  4008e0:	4798      	blx	r3
  4008e2:	e7fe      	b.n	4008e2 <freertos_uart_serial_init+0x4a>
  4008e4:	4628      	mov	r0, r5
  4008e6:	4b4c      	ldr	r3, [pc, #304]	; (400a18 <freertos_uart_serial_init+0x180>)
  4008e8:	4798      	blx	r3
  4008ea:	4628      	mov	r0, r5
  4008ec:	4b4b      	ldr	r3, [pc, #300]	; (400a1c <freertos_uart_serial_init+0x184>)
  4008ee:	4798      	blx	r3
  4008f0:	4f44      	ldr	r7, [pc, #272]	; (400a04 <freertos_uart_serial_init+0x16c>)
  4008f2:	eb07 1704 	add.w	r7, r7, r4, lsl #4
  4008f6:	f8d7 9004 	ldr.w	r9, [r7, #4]
  4008fa:	4648      	mov	r0, r9
  4008fc:	f240 2102 	movw	r1, #514	; 0x202
  400900:	4b47      	ldr	r3, [pc, #284]	; (400a20 <freertos_uart_serial_init+0x188>)
  400902:	4798      	blx	r3
  400904:	68b8      	ldr	r0, [r7, #8]
  400906:	4b47      	ldr	r3, [pc, #284]	; (400a24 <freertos_uart_serial_init+0x18c>)
  400908:	4798      	blx	r3
  40090a:	7b33      	ldrb	r3, [r6, #12]
  40090c:	2b01      	cmp	r3, #1
  40090e:	d103      	bne.n	400918 <freertos_uart_serial_init+0x80>
  400910:	4628      	mov	r0, r5
  400912:	4641      	mov	r1, r8
  400914:	4b44      	ldr	r3, [pc, #272]	; (400a28 <freertos_uart_serial_init+0x190>)
  400916:	4798      	blx	r3
  400918:	4628      	mov	r0, r5
  40091a:	f04f 31ff 	mov.w	r1, #4294967295
  40091e:	4b43      	ldr	r3, [pc, #268]	; (400a2c <freertos_uart_serial_init+0x194>)
  400920:	4798      	blx	r3
  400922:	7b70      	ldrb	r0, [r6, #13]
  400924:	4942      	ldr	r1, [pc, #264]	; (400a30 <freertos_uart_serial_init+0x198>)
  400926:	eb01 01c4 	add.w	r1, r1, r4, lsl #3
  40092a:	2200      	movs	r2, #0
  40092c:	4b41      	ldr	r3, [pc, #260]	; (400a34 <freertos_uart_serial_init+0x19c>)
  40092e:	4798      	blx	r3
  400930:	6833      	ldr	r3, [r6, #0]
  400932:	2b00      	cmp	r3, #0
  400934:	d044      	beq.n	4009c0 <freertos_uart_serial_init+0x128>
  400936:	f04f 30ff 	mov.w	r0, #4294967295
  40093a:	2100      	movs	r1, #0
  40093c:	4b3e      	ldr	r3, [pc, #248]	; (400a38 <freertos_uart_serial_init+0x1a0>)
  40093e:	4798      	blx	r3
  400940:	ebc4 02c4 	rsb	r2, r4, r4, lsl #3
  400944:	4b32      	ldr	r3, [pc, #200]	; (400a10 <freertos_uart_serial_init+0x178>)
  400946:	eb03 0382 	add.w	r3, r3, r2, lsl #2
  40094a:	6118      	str	r0, [r3, #16]
  40094c:	b910      	cbnz	r0, 400954 <freertos_uart_serial_init+0xbc>
  40094e:	4b31      	ldr	r3, [pc, #196]	; (400a14 <freertos_uart_serial_init+0x17c>)
  400950:	4798      	blx	r3
  400952:	e7fe      	b.n	400952 <freertos_uart_serial_init+0xba>
  400954:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 400a10 <freertos_uart_serial_init+0x178>
  400958:	00e3      	lsls	r3, r4, #3
  40095a:	ebc4 0803 	rsb	r8, r4, r3
  40095e:	ea4f 0888 	mov.w	r8, r8, lsl #2
  400962:	eb0a 0708 	add.w	r7, sl, r8
  400966:	6832      	ldr	r2, [r6, #0]
  400968:	60ba      	str	r2, [r7, #8]
  40096a:	6872      	ldr	r2, [r6, #4]
  40096c:	60fa      	str	r2, [r7, #12]
  40096e:	1b1b      	subs	r3, r3, r4
  400970:	eb0a 0183 	add.w	r1, sl, r3, lsl #2
  400974:	4648      	mov	r0, r9
  400976:	3108      	adds	r1, #8
  400978:	2200      	movs	r2, #0
  40097a:	4b30      	ldr	r3, [pc, #192]	; (400a3c <freertos_uart_serial_init+0x1a4>)
  40097c:	4798      	blx	r3
  40097e:	6833      	ldr	r3, [r6, #0]
  400980:	61bb      	str	r3, [r7, #24]
  400982:	68bb      	ldr	r3, [r7, #8]
  400984:	f84a 3008 	str.w	r3, [sl, r8]
  400988:	6872      	ldr	r2, [r6, #4]
  40098a:	4413      	add	r3, r2
  40098c:	607b      	str	r3, [r7, #4]
  40098e:	7b73      	ldrb	r3, [r6, #13]
  400990:	f013 0f02 	tst.w	r3, #2
  400994:	d00b      	beq.n	4009ae <freertos_uart_serial_init+0x116>
  400996:	2001      	movs	r0, #1
  400998:	4b29      	ldr	r3, [pc, #164]	; (400a40 <freertos_uart_serial_init+0x1a8>)
  40099a:	4798      	blx	r3
  40099c:	ebc4 02c4 	rsb	r2, r4, r4, lsl #3
  4009a0:	eb0a 0382 	add.w	r3, sl, r2, lsl #2
  4009a4:	6158      	str	r0, [r3, #20]
  4009a6:	b910      	cbnz	r0, 4009ae <freertos_uart_serial_init+0x116>
  4009a8:	4b1a      	ldr	r3, [pc, #104]	; (400a14 <freertos_uart_serial_init+0x17c>)
  4009aa:	4798      	blx	r3
  4009ac:	e7fe      	b.n	4009ac <freertos_uart_serial_init+0x114>
  4009ae:	4628      	mov	r0, r5
  4009b0:	2109      	movs	r1, #9
  4009b2:	4b24      	ldr	r3, [pc, #144]	; (400a44 <freertos_uart_serial_init+0x1ac>)
  4009b4:	4798      	blx	r3
  4009b6:	4648      	mov	r0, r9
  4009b8:	2101      	movs	r1, #1
  4009ba:	4b23      	ldr	r3, [pc, #140]	; (400a48 <freertos_uart_serial_init+0x1b0>)
  4009bc:	4798      	blx	r3
  4009be:	e006      	b.n	4009ce <freertos_uart_serial_init+0x136>
  4009c0:	ebc4 02c4 	rsb	r2, r4, r4, lsl #3
  4009c4:	4b12      	ldr	r3, [pc, #72]	; (400a10 <freertos_uart_serial_init+0x178>)
  4009c6:	eb03 0382 	add.w	r3, r3, r2, lsl #2
  4009ca:	2201      	movs	r2, #1
  4009cc:	619a      	str	r2, [r3, #24]
  4009ce:	4f0d      	ldr	r7, [pc, #52]	; (400a04 <freertos_uart_serial_init+0x16c>)
  4009d0:	0124      	lsls	r4, r4, #4
  4009d2:	193b      	adds	r3, r7, r4
  4009d4:	f993 000c 	ldrsb.w	r0, [r3, #12]
  4009d8:	68b1      	ldr	r1, [r6, #8]
  4009da:	4b1c      	ldr	r3, [pc, #112]	; (400a4c <freertos_uart_serial_init+0x1b4>)
  4009dc:	4798      	blx	r3
  4009de:	5938      	ldr	r0, [r7, r4]
  4009e0:	21e0      	movs	r1, #224	; 0xe0
  4009e2:	4b18      	ldr	r3, [pc, #96]	; (400a44 <freertos_uart_serial_init+0x1ac>)
  4009e4:	4798      	blx	r3
  4009e6:	4628      	mov	r0, r5
  4009e8:	4b19      	ldr	r3, [pc, #100]	; (400a50 <freertos_uart_serial_init+0x1b8>)
  4009ea:	4798      	blx	r3
  4009ec:	4628      	mov	r0, r5
  4009ee:	4b19      	ldr	r3, [pc, #100]	; (400a54 <freertos_uart_serial_init+0x1bc>)
  4009f0:	4798      	blx	r3
  4009f2:	e002      	b.n	4009fa <freertos_uart_serial_init+0x162>
  4009f4:	2500      	movs	r5, #0
  4009f6:	e000      	b.n	4009fa <freertos_uart_serial_init+0x162>
  4009f8:	2500      	movs	r5, #0
  4009fa:	4628      	mov	r0, r5
  4009fc:	b002      	add	sp, #8
  4009fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  400a02:	bf00      	nop
  400a04:	0040b984 	.word	0x0040b984
  400a08:	00400191 	.word	0x00400191
  400a0c:	004001c1 	.word	0x004001c1
  400a10:	2000097c 	.word	0x2000097c
  400a14:	00404179 	.word	0x00404179
  400a18:	0040221d 	.word	0x0040221d
  400a1c:	0040222d 	.word	0x0040222d
  400a20:	00401c71 	.word	0x00401c71
  400a24:	00402101 	.word	0x00402101
  400a28:	004021dd 	.word	0x004021dd
  400a2c:	00402239 	.word	0x00402239
  400a30:	200009b4 	.word	0x200009b4
  400a34:	004001f5 	.word	0x004001f5
  400a38:	00404835 	.word	0x00404835
  400a3c:	00401c4d 	.word	0x00401c4d
  400a40:	004049e1 	.word	0x004049e1
  400a44:	00402235 	.word	0x00402235
  400a48:	00401c65 	.word	0x00401c65
  400a4c:	0040027d 	.word	0x0040027d
  400a50:	00402215 	.word	0x00402215
  400a54:	00402225 	.word	0x00402225

00400a58 <freertos_uart_write_packet_async>:
  400a58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  400a5c:	b084      	sub	sp, #16
  400a5e:	4605      	mov	r5, r0
  400a60:	460f      	mov	r7, r1
  400a62:	4616      	mov	r6, r2
  400a64:	9303      	str	r3, [sp, #12]
  400a66:	4817      	ldr	r0, [pc, #92]	; (400ac4 <freertos_uart_write_packet_async+0x6c>)
  400a68:	2102      	movs	r1, #2
  400a6a:	462a      	mov	r2, r5
  400a6c:	4b16      	ldr	r3, [pc, #88]	; (400ac8 <freertos_uart_write_packet_async+0x70>)
  400a6e:	4798      	blx	r3
  400a70:	4680      	mov	r8, r0
  400a72:	2801      	cmp	r0, #1
  400a74:	dc21      	bgt.n	400aba <freertos_uart_write_packet_async+0x62>
  400a76:	4c15      	ldr	r4, [pc, #84]	; (400acc <freertos_uart_write_packet_async+0x74>)
  400a78:	eb04 04c0 	add.w	r4, r4, r0, lsl #3
  400a7c:	4620      	mov	r0, r4
  400a7e:	a903      	add	r1, sp, #12
  400a80:	4b13      	ldr	r3, [pc, #76]	; (400ad0 <freertos_uart_write_packet_async+0x78>)
  400a82:	4798      	blx	r3
  400a84:	4603      	mov	r3, r0
  400a86:	b9c8      	cbnz	r0, 400abc <freertos_uart_write_packet_async+0x64>
  400a88:	4b0e      	ldr	r3, [pc, #56]	; (400ac4 <freertos_uart_write_packet_async+0x6c>)
  400a8a:	eb03 1808 	add.w	r8, r3, r8, lsl #4
  400a8e:	f8d8 3004 	ldr.w	r3, [r8, #4]
  400a92:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  400a94:	9200      	str	r2, [sp, #0]
  400a96:	2201      	movs	r2, #1
  400a98:	9201      	str	r2, [sp, #4]
  400a9a:	4620      	mov	r0, r4
  400a9c:	4639      	mov	r1, r7
  400a9e:	4632      	mov	r2, r6
  400aa0:	4e0c      	ldr	r6, [pc, #48]	; (400ad4 <freertos_uart_write_packet_async+0x7c>)
  400aa2:	47b0      	blx	r6
  400aa4:	4628      	mov	r0, r5
  400aa6:	2110      	movs	r1, #16
  400aa8:	4b0b      	ldr	r3, [pc, #44]	; (400ad8 <freertos_uart_write_packet_async+0x80>)
  400aaa:	4798      	blx	r3
  400aac:	4620      	mov	r0, r4
  400aae:	990a      	ldr	r1, [sp, #40]	; 0x28
  400ab0:	9a03      	ldr	r2, [sp, #12]
  400ab2:	4b0a      	ldr	r3, [pc, #40]	; (400adc <freertos_uart_write_packet_async+0x84>)
  400ab4:	4798      	blx	r3
  400ab6:	4603      	mov	r3, r0
  400ab8:	e000      	b.n	400abc <freertos_uart_write_packet_async+0x64>
  400aba:	23f8      	movs	r3, #248	; 0xf8
  400abc:	b258      	sxtb	r0, r3
  400abe:	b004      	add	sp, #16
  400ac0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  400ac4:	0040b984 	.word	0x0040b984
  400ac8:	00400191 	.word	0x00400191
  400acc:	200009b4 	.word	0x200009b4
  400ad0:	00400361 	.word	0x00400361
  400ad4:	004003b1 	.word	0x004003b1
  400ad8:	00402235 	.word	0x00402235
  400adc:	00400431 	.word	0x00400431

00400ae0 <freertos_uart_serial_read_packet>:
  400ae0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  400ae4:	b085      	sub	sp, #20
  400ae6:	4604      	mov	r4, r0
  400ae8:	4689      	mov	r9, r1
  400aea:	4690      	mov	r8, r2
  400aec:	9301      	str	r3, [sp, #4]
  400aee:	4845      	ldr	r0, [pc, #276]	; (400c04 <freertos_uart_serial_read_packet+0x124>)
  400af0:	2102      	movs	r1, #2
  400af2:	4622      	mov	r2, r4
  400af4:	4b44      	ldr	r3, [pc, #272]	; (400c08 <freertos_uart_serial_read_packet+0x128>)
  400af6:	4798      	blx	r3
  400af8:	4604      	mov	r4, r0
  400afa:	ebc0 02c0 	rsb	r2, r0, r0, lsl #3
  400afe:	4b43      	ldr	r3, [pc, #268]	; (400c0c <freertos_uart_serial_read_packet+0x12c>)
  400b00:	eb03 0382 	add.w	r3, r3, r2, lsl #2
  400b04:	699b      	ldr	r3, [r3, #24]
  400b06:	b913      	cbnz	r3, 400b0e <freertos_uart_serial_read_packet+0x2e>
  400b08:	4b41      	ldr	r3, [pc, #260]	; (400c10 <freertos_uart_serial_read_packet+0x130>)
  400b0a:	4798      	blx	r3
  400b0c:	e7fe      	b.n	400b0c <freertos_uart_serial_read_packet+0x2c>
  400b0e:	2b01      	cmp	r3, #1
  400b10:	d102      	bne.n	400b18 <freertos_uart_serial_read_packet+0x38>
  400b12:	4b3f      	ldr	r3, [pc, #252]	; (400c10 <freertos_uart_serial_read_packet+0x130>)
  400b14:	4798      	blx	r3
  400b16:	e7fe      	b.n	400b16 <freertos_uart_serial_read_packet+0x36>
  400b18:	2801      	cmp	r0, #1
  400b1a:	dc5b      	bgt.n	400bd4 <freertos_uart_serial_read_packet+0xf4>
  400b1c:	493b      	ldr	r1, [pc, #236]	; (400c0c <freertos_uart_serial_read_packet+0x12c>)
  400b1e:	ebc0 03c0 	rsb	r3, r0, r0, lsl #3
  400b22:	009b      	lsls	r3, r3, #2
  400b24:	18ca      	adds	r2, r1, r3
  400b26:	6852      	ldr	r2, [r2, #4]
  400b28:	58cb      	ldr	r3, [r1, r3]
  400b2a:	1ad3      	subs	r3, r2, r3
  400b2c:	4543      	cmp	r3, r8
  400b2e:	d353      	bcc.n	400bd8 <freertos_uart_serial_read_packet+0xf8>
  400b30:	a802      	add	r0, sp, #8
  400b32:	4b38      	ldr	r3, [pc, #224]	; (400c14 <freertos_uart_serial_read_packet+0x134>)
  400b34:	4798      	blx	r3
  400b36:	ebc4 02c4 	rsb	r2, r4, r4, lsl #3
  400b3a:	4b34      	ldr	r3, [pc, #208]	; (400c0c <freertos_uart_serial_read_packet+0x12c>)
  400b3c:	eb03 0382 	add.w	r3, r3, r2, lsl #2
  400b40:	6958      	ldr	r0, [r3, #20]
  400b42:	2800      	cmp	r0, #0
  400b44:	d04a      	beq.n	400bdc <freertos_uart_serial_read_packet+0xfc>
  400b46:	2100      	movs	r1, #0
  400b48:	9a01      	ldr	r2, [sp, #4]
  400b4a:	460b      	mov	r3, r1
  400b4c:	4d32      	ldr	r5, [pc, #200]	; (400c18 <freertos_uart_serial_read_packet+0x138>)
  400b4e:	47a8      	blx	r5
  400b50:	2801      	cmp	r0, #1
  400b52:	d151      	bne.n	400bf8 <freertos_uart_serial_read_packet+0x118>
  400b54:	a802      	add	r0, sp, #8
  400b56:	a901      	add	r1, sp, #4
  400b58:	4b30      	ldr	r3, [pc, #192]	; (400c1c <freertos_uart_serial_read_packet+0x13c>)
  400b5a:	4798      	blx	r3
  400b5c:	2801      	cmp	r0, #1
  400b5e:	d13d      	bne.n	400bdc <freertos_uart_serial_read_packet+0xfc>
  400b60:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
  400b64:	4b29      	ldr	r3, [pc, #164]	; (400c0c <freertos_uart_serial_read_packet+0x12c>)
  400b66:	eb03 0384 	add.w	r3, r3, r4, lsl #2
  400b6a:	6958      	ldr	r0, [r3, #20]
  400b6c:	2100      	movs	r1, #0
  400b6e:	460a      	mov	r2, r1
  400b70:	460b      	mov	r3, r1
  400b72:	4c2b      	ldr	r4, [pc, #172]	; (400c20 <freertos_uart_serial_read_packet+0x140>)
  400b74:	47a0      	blx	r4
  400b76:	e03f      	b.n	400bf8 <freertos_uart_serial_read_packet+0x118>
  400b78:	6930      	ldr	r0, [r6, #16]
  400b7a:	2100      	movs	r1, #0
  400b7c:	9a01      	ldr	r2, [sp, #4]
  400b7e:	460b      	mov	r3, r1
  400b80:	47d8      	blx	fp
  400b82:	687b      	ldr	r3, [r7, #4]
  400b84:	6819      	ldr	r1, [r3, #0]
  400b86:	4630      	mov	r0, r6
  400b88:	eb09 0205 	add.w	r2, r9, r5
  400b8c:	ebc5 0308 	rsb	r3, r5, r8
  400b90:	47d0      	blx	sl
  400b92:	182d      	adds	r5, r5, r0
  400b94:	d009      	beq.n	400baa <freertos_uart_serial_read_packet+0xca>
  400b96:	4b23      	ldr	r3, [pc, #140]	; (400c24 <freertos_uart_serial_read_packet+0x144>)
  400b98:	4798      	blx	r3
  400b9a:	68f3      	ldr	r3, [r6, #12]
  400b9c:	b91b      	cbnz	r3, 400ba6 <freertos_uart_serial_read_packet+0xc6>
  400b9e:	4620      	mov	r0, r4
  400ba0:	2101      	movs	r1, #1
  400ba2:	4b21      	ldr	r3, [pc, #132]	; (400c28 <freertos_uart_serial_read_packet+0x148>)
  400ba4:	4798      	blx	r3
  400ba6:	4b21      	ldr	r3, [pc, #132]	; (400c2c <freertos_uart_serial_read_packet+0x14c>)
  400ba8:	4798      	blx	r3
  400baa:	45a8      	cmp	r8, r5
  400bac:	d905      	bls.n	400bba <freertos_uart_serial_read_packet+0xda>
  400bae:	a802      	add	r0, sp, #8
  400bb0:	a901      	add	r1, sp, #4
  400bb2:	4b1a      	ldr	r3, [pc, #104]	; (400c1c <freertos_uart_serial_read_packet+0x13c>)
  400bb4:	4798      	blx	r3
  400bb6:	2800      	cmp	r0, #0
  400bb8:	d0de      	beq.n	400b78 <freertos_uart_serial_read_packet+0x98>
  400bba:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
  400bbe:	4b13      	ldr	r3, [pc, #76]	; (400c0c <freertos_uart_serial_read_packet+0x12c>)
  400bc0:	eb03 0384 	add.w	r3, r3, r4, lsl #2
  400bc4:	6958      	ldr	r0, [r3, #20]
  400bc6:	b1c0      	cbz	r0, 400bfa <freertos_uart_serial_read_packet+0x11a>
  400bc8:	2100      	movs	r1, #0
  400bca:	460a      	mov	r2, r1
  400bcc:	460b      	mov	r3, r1
  400bce:	4c14      	ldr	r4, [pc, #80]	; (400c20 <freertos_uart_serial_read_packet+0x140>)
  400bd0:	47a0      	blx	r4
  400bd2:	e012      	b.n	400bfa <freertos_uart_serial_read_packet+0x11a>
  400bd4:	2500      	movs	r5, #0
  400bd6:	e010      	b.n	400bfa <freertos_uart_serial_read_packet+0x11a>
  400bd8:	2500      	movs	r5, #0
  400bda:	e00e      	b.n	400bfa <freertos_uart_serial_read_packet+0x11a>
  400bdc:	2500      	movs	r5, #0
  400bde:	ebc4 03c4 	rsb	r3, r4, r4, lsl #3
  400be2:	4e0a      	ldr	r6, [pc, #40]	; (400c0c <freertos_uart_serial_read_packet+0x12c>)
  400be4:	eb06 0683 	add.w	r6, r6, r3, lsl #2
  400be8:	f8df b02c 	ldr.w	fp, [pc, #44]	; 400c18 <freertos_uart_serial_read_packet+0x138>
  400bec:	4f05      	ldr	r7, [pc, #20]	; (400c04 <freertos_uart_serial_read_packet+0x124>)
  400bee:	eb07 1704 	add.w	r7, r7, r4, lsl #4
  400bf2:	f8df a03c 	ldr.w	sl, [pc, #60]	; 400c30 <freertos_uart_serial_read_packet+0x150>
  400bf6:	e7bf      	b.n	400b78 <freertos_uart_serial_read_packet+0x98>
  400bf8:	2500      	movs	r5, #0
  400bfa:	4628      	mov	r0, r5
  400bfc:	b005      	add	sp, #20
  400bfe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  400c02:	bf00      	nop
  400c04:	0040b984 	.word	0x0040b984
  400c08:	00400191 	.word	0x00400191
  400c0c:	2000097c 	.word	0x2000097c
  400c10:	00404179 	.word	0x00404179
  400c14:	00405899 	.word	0x00405899
  400c18:	00404bb1 	.word	0x00404bb1
  400c1c:	004058bd 	.word	0x004058bd
  400c20:	0040486d 	.word	0x0040486d
  400c24:	004041a9 	.word	0x004041a9
  400c28:	00400695 	.word	0x00400695
  400c2c:	004041e9 	.word	0x004041e9
  400c30:	004002dd 	.word	0x004002dd

00400c34 <UART0_Handler>:
  400c34:	b508      	push	{r3, lr}
  400c36:	2000      	movs	r0, #0
  400c38:	4b01      	ldr	r3, [pc, #4]	; (400c40 <UART0_Handler+0xc>)
  400c3a:	4798      	blx	r3
  400c3c:	bd08      	pop	{r3, pc}
  400c3e:	bf00      	nop
  400c40:	0040076d 	.word	0x0040076d

00400c44 <UART1_Handler>:
  400c44:	b508      	push	{r3, lr}
  400c46:	2001      	movs	r0, #1
  400c48:	4b01      	ldr	r3, [pc, #4]	; (400c50 <UART1_Handler+0xc>)
  400c4a:	4798      	blx	r3
  400c4c:	bd08      	pop	{r3, pc}
  400c4e:	bf00      	nop
  400c50:	0040076d 	.word	0x0040076d

00400c54 <configure_rx_dma>:
  400c54:	b570      	push	{r4, r5, r6, lr}
  400c56:	ebc0 02c0 	rsb	r2, r0, r0, lsl #3
  400c5a:	4b2e      	ldr	r3, [pc, #184]	; (400d14 <configure_rx_dma+0xc0>)
  400c5c:	eb03 0382 	add.w	r3, r3, r2, lsl #2
  400c60:	699a      	ldr	r2, [r3, #24]
  400c62:	689b      	ldr	r3, [r3, #8]
  400c64:	429a      	cmp	r2, r3
  400c66:	d114      	bne.n	400c92 <configure_rx_dma+0x3e>
  400c68:	b951      	cbnz	r1, 400c80 <configure_rx_dma+0x2c>
  400c6a:	ebc0 01c0 	rsb	r1, r0, r0, lsl #3
  400c6e:	4b29      	ldr	r3, [pc, #164]	; (400d14 <configure_rx_dma+0xc0>)
  400c70:	eb03 0381 	add.w	r3, r3, r1, lsl #2
  400c74:	2400      	movs	r4, #0
  400c76:	60dc      	str	r4, [r3, #12]
  400c78:	685b      	ldr	r3, [r3, #4]
  400c7a:	429a      	cmp	r2, r3
  400c7c:	d941      	bls.n	400d02 <configure_rx_dma+0xae>
  400c7e:	e024      	b.n	400cca <configure_rx_dma+0x76>
  400c80:	ebc0 04c0 	rsb	r4, r0, r0, lsl #3
  400c84:	4923      	ldr	r1, [pc, #140]	; (400d14 <configure_rx_dma+0xc0>)
  400c86:	eb01 0184 	add.w	r1, r1, r4, lsl #2
  400c8a:	684c      	ldr	r4, [r1, #4]
  400c8c:	1aa2      	subs	r2, r4, r2
  400c8e:	60ca      	str	r2, [r1, #12]
  400c90:	e011      	b.n	400cb6 <configure_rx_dma+0x62>
  400c92:	429a      	cmp	r2, r3
  400c94:	d907      	bls.n	400ca6 <configure_rx_dma+0x52>
  400c96:	ebc0 04c0 	rsb	r4, r0, r0, lsl #3
  400c9a:	491e      	ldr	r1, [pc, #120]	; (400d14 <configure_rx_dma+0xc0>)
  400c9c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
  400ca0:	1ad2      	subs	r2, r2, r3
  400ca2:	60ca      	str	r2, [r1, #12]
  400ca4:	e007      	b.n	400cb6 <configure_rx_dma+0x62>
  400ca6:	ebc0 01c0 	rsb	r1, r0, r0, lsl #3
  400caa:	4a1a      	ldr	r2, [pc, #104]	; (400d14 <configure_rx_dma+0xc0>)
  400cac:	eb02 0281 	add.w	r2, r2, r1, lsl #2
  400cb0:	6851      	ldr	r1, [r2, #4]
  400cb2:	1ac9      	subs	r1, r1, r3
  400cb4:	60d1      	str	r1, [r2, #12]
  400cb6:	ebc0 01c0 	rsb	r1, r0, r0, lsl #3
  400cba:	4a16      	ldr	r2, [pc, #88]	; (400d14 <configure_rx_dma+0xc0>)
  400cbc:	eb02 0281 	add.w	r2, r2, r1, lsl #2
  400cc0:	68d1      	ldr	r1, [r2, #12]
  400cc2:	440b      	add	r3, r1
  400cc4:	6852      	ldr	r2, [r2, #4]
  400cc6:	4293      	cmp	r3, r2
  400cc8:	d902      	bls.n	400cd0 <configure_rx_dma+0x7c>
  400cca:	4b13      	ldr	r3, [pc, #76]	; (400d18 <configure_rx_dma+0xc4>)
  400ccc:	4798      	blx	r3
  400cce:	e7fe      	b.n	400cce <configure_rx_dma+0x7a>
  400cd0:	b1b9      	cbz	r1, 400d02 <configure_rx_dma+0xae>
  400cd2:	4d12      	ldr	r5, [pc, #72]	; (400d1c <configure_rx_dma+0xc8>)
  400cd4:	0104      	lsls	r4, r0, #4
  400cd6:	192b      	adds	r3, r5, r4
  400cd8:	685e      	ldr	r6, [r3, #4]
  400cda:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
  400cde:	4b0d      	ldr	r3, [pc, #52]	; (400d14 <configure_rx_dma+0xc0>)
  400ce0:	eb03 0180 	add.w	r1, r3, r0, lsl #2
  400ce4:	4630      	mov	r0, r6
  400ce6:	3108      	adds	r1, #8
  400ce8:	2200      	movs	r2, #0
  400cea:	4b0d      	ldr	r3, [pc, #52]	; (400d20 <configure_rx_dma+0xcc>)
  400cec:	4798      	blx	r3
  400cee:	4630      	mov	r0, r6
  400cf0:	2101      	movs	r1, #1
  400cf2:	4b0c      	ldr	r3, [pc, #48]	; (400d24 <configure_rx_dma+0xd0>)
  400cf4:	4798      	blx	r3
  400cf6:	5928      	ldr	r0, [r5, r4]
  400cf8:	f44f 7184 	mov.w	r1, #264	; 0x108
  400cfc:	4b0a      	ldr	r3, [pc, #40]	; (400d28 <configure_rx_dma+0xd4>)
  400cfe:	4798      	blx	r3
  400d00:	bd70      	pop	{r4, r5, r6, pc}
  400d02:	0100      	lsls	r0, r0, #4
  400d04:	4b05      	ldr	r3, [pc, #20]	; (400d1c <configure_rx_dma+0xc8>)
  400d06:	5818      	ldr	r0, [r3, r0]
  400d08:	f44f 7184 	mov.w	r1, #264	; 0x108
  400d0c:	4b07      	ldr	r3, [pc, #28]	; (400d2c <configure_rx_dma+0xd8>)
  400d0e:	4798      	blx	r3
  400d10:	bd70      	pop	{r4, r5, r6, pc}
  400d12:	bf00      	nop
  400d14:	200009c4 	.word	0x200009c4
  400d18:	00404179 	.word	0x00404179
  400d1c:	0040b9a4 	.word	0x0040b9a4
  400d20:	00401c4d 	.word	0x00401c4d
  400d24:	00401c65 	.word	0x00401c65
  400d28:	00403bcd 	.word	0x00403bcd
  400d2c:	00403bd1 	.word	0x00403bd1

00400d30 <local_usart_handler>:
  400d30:	b570      	push	{r4, r5, r6, lr}
  400d32:	b082      	sub	sp, #8
  400d34:	4604      	mov	r4, r0
  400d36:	2300      	movs	r3, #0
  400d38:	9301      	str	r3, [sp, #4]
  400d3a:	0103      	lsls	r3, r0, #4
  400d3c:	4a3c      	ldr	r2, [pc, #240]	; (400e30 <local_usart_handler+0x100>)
  400d3e:	58d6      	ldr	r6, [r2, r3]
  400d40:	4630      	mov	r0, r6
  400d42:	4b3c      	ldr	r3, [pc, #240]	; (400e34 <local_usart_handler+0x104>)
  400d44:	4798      	blx	r3
  400d46:	4605      	mov	r5, r0
  400d48:	4630      	mov	r0, r6
  400d4a:	4b3b      	ldr	r3, [pc, #236]	; (400e38 <local_usart_handler+0x108>)
  400d4c:	4798      	blx	r3
  400d4e:	4005      	ands	r5, r0
  400d50:	f015 0f10 	tst.w	r5, #16
  400d54:	d012      	beq.n	400d7c <local_usart_handler+0x4c>
  400d56:	4630      	mov	r0, r6
  400d58:	2110      	movs	r1, #16
  400d5a:	4b38      	ldr	r3, [pc, #224]	; (400e3c <local_usart_handler+0x10c>)
  400d5c:	4798      	blx	r3
  400d5e:	4b38      	ldr	r3, [pc, #224]	; (400e40 <local_usart_handler+0x110>)
  400d60:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
  400d64:	6858      	ldr	r0, [r3, #4]
  400d66:	b110      	cbz	r0, 400d6e <local_usart_handler+0x3e>
  400d68:	a901      	add	r1, sp, #4
  400d6a:	4b36      	ldr	r3, [pc, #216]	; (400e44 <local_usart_handler+0x114>)
  400d6c:	4798      	blx	r3
  400d6e:	4b34      	ldr	r3, [pc, #208]	; (400e40 <local_usart_handler+0x110>)
  400d70:	f853 0034 	ldr.w	r0, [r3, r4, lsl #3]
  400d74:	b110      	cbz	r0, 400d7c <local_usart_handler+0x4c>
  400d76:	a901      	add	r1, sp, #4
  400d78:	4b32      	ldr	r3, [pc, #200]	; (400e44 <local_usart_handler+0x114>)
  400d7a:	4798      	blx	r3
  400d7c:	f015 0f08 	tst.w	r5, #8
  400d80:	d02f      	beq.n	400de2 <local_usart_handler+0xb2>
  400d82:	ebc4 02c4 	rsb	r2, r4, r4, lsl #3
  400d86:	4b30      	ldr	r3, [pc, #192]	; (400e48 <local_usart_handler+0x118>)
  400d88:	eb03 0382 	add.w	r3, r3, r2, lsl #2
  400d8c:	699b      	ldr	r3, [r3, #24]
  400d8e:	b913      	cbnz	r3, 400d96 <local_usart_handler+0x66>
  400d90:	4b2e      	ldr	r3, [pc, #184]	; (400e4c <local_usart_handler+0x11c>)
  400d92:	4798      	blx	r3
  400d94:	e7fe      	b.n	400d94 <local_usart_handler+0x64>
  400d96:	2b01      	cmp	r3, #1
  400d98:	d102      	bne.n	400da0 <local_usart_handler+0x70>
  400d9a:	4b2c      	ldr	r3, [pc, #176]	; (400e4c <local_usart_handler+0x11c>)
  400d9c:	4798      	blx	r3
  400d9e:	e7fe      	b.n	400d9e <local_usart_handler+0x6e>
  400da0:	ebc4 02c4 	rsb	r2, r4, r4, lsl #3
  400da4:	4b28      	ldr	r3, [pc, #160]	; (400e48 <local_usart_handler+0x118>)
  400da6:	eb03 0382 	add.w	r3, r3, r2, lsl #2
  400daa:	68d9      	ldr	r1, [r3, #12]
  400dac:	689a      	ldr	r2, [r3, #8]
  400dae:	440a      	add	r2, r1
  400db0:	609a      	str	r2, [r3, #8]
  400db2:	685b      	ldr	r3, [r3, #4]
  400db4:	429a      	cmp	r2, r3
  400db6:	d306      	bcc.n	400dc6 <local_usart_handler+0x96>
  400db8:	4a23      	ldr	r2, [pc, #140]	; (400e48 <local_usart_handler+0x118>)
  400dba:	ebc4 03c4 	rsb	r3, r4, r4, lsl #3
  400dbe:	009b      	lsls	r3, r3, #2
  400dc0:	18d1      	adds	r1, r2, r3
  400dc2:	58d3      	ldr	r3, [r2, r3]
  400dc4:	608b      	str	r3, [r1, #8]
  400dc6:	4620      	mov	r0, r4
  400dc8:	2100      	movs	r1, #0
  400dca:	4b21      	ldr	r3, [pc, #132]	; (400e50 <local_usart_handler+0x120>)
  400dcc:	4798      	blx	r3
  400dce:	ebc4 02c4 	rsb	r2, r4, r4, lsl #3
  400dd2:	4b1d      	ldr	r3, [pc, #116]	; (400e48 <local_usart_handler+0x118>)
  400dd4:	eb03 0382 	add.w	r3, r3, r2, lsl #2
  400dd8:	6918      	ldr	r0, [r3, #16]
  400dda:	b110      	cbz	r0, 400de2 <local_usart_handler+0xb2>
  400ddc:	a901      	add	r1, sp, #4
  400dde:	4b19      	ldr	r3, [pc, #100]	; (400e44 <local_usart_handler+0x114>)
  400de0:	4798      	blx	r3
  400de2:	f415 7f80 	tst.w	r5, #256	; 0x100
  400de6:	d00c      	beq.n	400e02 <local_usart_handler+0xd2>
  400de8:	4630      	mov	r0, r6
  400dea:	4b1a      	ldr	r3, [pc, #104]	; (400e54 <local_usart_handler+0x124>)
  400dec:	4798      	blx	r3
  400dee:	ebc4 02c4 	rsb	r2, r4, r4, lsl #3
  400df2:	4b15      	ldr	r3, [pc, #84]	; (400e48 <local_usart_handler+0x118>)
  400df4:	eb03 0382 	add.w	r3, r3, r2, lsl #2
  400df8:	6918      	ldr	r0, [r3, #16]
  400dfa:	b110      	cbz	r0, 400e02 <local_usart_handler+0xd2>
  400dfc:	a901      	add	r1, sp, #4
  400dfe:	4b11      	ldr	r3, [pc, #68]	; (400e44 <local_usart_handler+0x114>)
  400e00:	4798      	blx	r3
  400e02:	f015 0fe0 	tst.w	r5, #224	; 0xe0
  400e06:	d00a      	beq.n	400e1e <local_usart_handler+0xee>
  400e08:	4630      	mov	r0, r6
  400e0a:	4b13      	ldr	r3, [pc, #76]	; (400e58 <local_usart_handler+0x128>)
  400e0c:	4798      	blx	r3
  400e0e:	4b0c      	ldr	r3, [pc, #48]	; (400e40 <local_usart_handler+0x110>)
  400e10:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
  400e14:	6860      	ldr	r0, [r4, #4]
  400e16:	b110      	cbz	r0, 400e1e <local_usart_handler+0xee>
  400e18:	a901      	add	r1, sp, #4
  400e1a:	4b0a      	ldr	r3, [pc, #40]	; (400e44 <local_usart_handler+0x114>)
  400e1c:	4798      	blx	r3
  400e1e:	9b01      	ldr	r3, [sp, #4]
  400e20:	b11b      	cbz	r3, 400e2a <local_usart_handler+0xfa>
  400e22:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  400e26:	4b0d      	ldr	r3, [pc, #52]	; (400e5c <local_usart_handler+0x12c>)
  400e28:	601a      	str	r2, [r3, #0]
  400e2a:	b002      	add	sp, #8
  400e2c:	bd70      	pop	{r4, r5, r6, pc}
  400e2e:	bf00      	nop
  400e30:	0040b9a4 	.word	0x0040b9a4
  400e34:	00403bd9 	.word	0x00403bd9
  400e38:	00403bd5 	.word	0x00403bd5
  400e3c:	00403bd1 	.word	0x00403bd1
  400e40:	200009fc 	.word	0x200009fc
  400e44:	00404b0d 	.word	0x00404b0d
  400e48:	200009c4 	.word	0x200009c4
  400e4c:	00404179 	.word	0x00404179
  400e50:	00400c55 	.word	0x00400c55
  400e54:	00403be5 	.word	0x00403be5
  400e58:	00403bdd 	.word	0x00403bdd
  400e5c:	e000ed04 	.word	0xe000ed04

00400e60 <USART0_Handler>:
  400e60:	b508      	push	{r3, lr}
  400e62:	2000      	movs	r0, #0
  400e64:	4b01      	ldr	r3, [pc, #4]	; (400e6c <USART0_Handler+0xc>)
  400e66:	4798      	blx	r3
  400e68:	bd08      	pop	{r3, pc}
  400e6a:	bf00      	nop
  400e6c:	00400d31 	.word	0x00400d31

00400e70 <USART1_Handler>:
  400e70:	b508      	push	{r3, lr}
  400e72:	2001      	movs	r0, #1
  400e74:	4b01      	ldr	r3, [pc, #4]	; (400e7c <USART1_Handler+0xc>)
  400e76:	4798      	blx	r3
  400e78:	bd08      	pop	{r3, pc}
  400e7a:	bf00      	nop
  400e7c:	00400d31 	.word	0x00400d31

00400e80 <udi_cdc_comm_enable>:
  400e80:	490e      	ldr	r1, [pc, #56]	; (400ebc <udi_cdc_comm_enable+0x3c>)
  400e82:	2300      	movs	r3, #0
  400e84:	700b      	strb	r3, [r1, #0]
  400e86:	4a0e      	ldr	r2, [pc, #56]	; (400ec0 <udi_cdc_comm_enable+0x40>)
  400e88:	8013      	strh	r3, [r2, #0]
  400e8a:	4a0e      	ldr	r2, [pc, #56]	; (400ec4 <udi_cdc_comm_enable+0x44>)
  400e8c:	20a1      	movs	r0, #161	; 0xa1
  400e8e:	7010      	strb	r0, [r2, #0]
  400e90:	2020      	movs	r0, #32
  400e92:	7050      	strb	r0, [r2, #1]
  400e94:	8053      	strh	r3, [r2, #2]
  400e96:	8093      	strh	r3, [r2, #4]
  400e98:	2002      	movs	r0, #2
  400e9a:	80d0      	strh	r0, [r2, #6]
  400e9c:	8113      	strh	r3, [r2, #8]
  400e9e:	4a0a      	ldr	r2, [pc, #40]	; (400ec8 <udi_cdc_comm_enable+0x48>)
  400ea0:	f44f 30e1 	mov.w	r0, #115200	; 0x1c200
  400ea4:	6010      	str	r0, [r2, #0]
  400ea6:	7113      	strb	r3, [r2, #4]
  400ea8:	7153      	strb	r3, [r2, #5]
  400eaa:	2308      	movs	r3, #8
  400eac:	7193      	strb	r3, [r2, #6]
  400eae:	780b      	ldrb	r3, [r1, #0]
  400eb0:	3301      	adds	r3, #1
  400eb2:	b2db      	uxtb	r3, r3
  400eb4:	700b      	strb	r3, [r1, #0]
  400eb6:	2001      	movs	r0, #1
  400eb8:	4770      	bx	lr
  400eba:	bf00      	nop
  400ebc:	20000aa4 	.word	0x20000aa4
  400ec0:	20000b48 	.word	0x20000b48
  400ec4:	20000ab4 	.word	0x20000ab4
  400ec8:	20000a10 	.word	0x20000a10

00400ecc <udi_cdc_comm_disable>:
  400ecc:	4a02      	ldr	r2, [pc, #8]	; (400ed8 <udi_cdc_comm_disable+0xc>)
  400ece:	7813      	ldrb	r3, [r2, #0]
  400ed0:	3b01      	subs	r3, #1
  400ed2:	b2db      	uxtb	r3, r3
  400ed4:	7013      	strb	r3, [r2, #0]
  400ed6:	4770      	bx	lr
  400ed8:	20000aa4 	.word	0x20000aa4

00400edc <udi_cdc_data_disable>:
  400edc:	4a04      	ldr	r2, [pc, #16]	; (400ef0 <udi_cdc_data_disable+0x14>)
  400ede:	7813      	ldrb	r3, [r2, #0]
  400ee0:	3b01      	subs	r3, #1
  400ee2:	b2db      	uxtb	r3, r3
  400ee4:	7013      	strb	r3, [r2, #0]
  400ee6:	7813      	ldrb	r3, [r2, #0]
  400ee8:	2200      	movs	r2, #0
  400eea:	4b02      	ldr	r3, [pc, #8]	; (400ef4 <udi_cdc_data_disable+0x18>)
  400eec:	701a      	strb	r2, [r3, #0]
  400eee:	4770      	bx	lr
  400ef0:	20000a17 	.word	0x20000a17
  400ef4:	20000aaa 	.word	0x20000aaa

00400ef8 <udi_cdc_data_setup>:
  400ef8:	2000      	movs	r0, #0
  400efa:	4770      	bx	lr

00400efc <udi_cdc_getsetting>:
  400efc:	2000      	movs	r0, #0
  400efe:	4770      	bx	lr

00400f00 <udi_cdc_comm_setup>:
  400f00:	4b1d      	ldr	r3, [pc, #116]	; (400f78 <udi_cdc_comm_setup+0x78>)
  400f02:	781b      	ldrb	r3, [r3, #0]
  400f04:	f013 0f80 	tst.w	r3, #128	; 0x80
  400f08:	d012      	beq.n	400f30 <udi_cdc_comm_setup+0x30>
  400f0a:	f003 0360 	and.w	r3, r3, #96	; 0x60
  400f0e:	2b20      	cmp	r3, #32
  400f10:	d128      	bne.n	400f64 <udi_cdc_comm_setup+0x64>
  400f12:	4b19      	ldr	r3, [pc, #100]	; (400f78 <udi_cdc_comm_setup+0x78>)
  400f14:	785b      	ldrb	r3, [r3, #1]
  400f16:	2b21      	cmp	r3, #33	; 0x21
  400f18:	d126      	bne.n	400f68 <udi_cdc_comm_setup+0x68>
  400f1a:	4b17      	ldr	r3, [pc, #92]	; (400f78 <udi_cdc_comm_setup+0x78>)
  400f1c:	88db      	ldrh	r3, [r3, #6]
  400f1e:	2b07      	cmp	r3, #7
  400f20:	d124      	bne.n	400f6c <udi_cdc_comm_setup+0x6c>
  400f22:	4b15      	ldr	r3, [pc, #84]	; (400f78 <udi_cdc_comm_setup+0x78>)
  400f24:	4a15      	ldr	r2, [pc, #84]	; (400f7c <udi_cdc_comm_setup+0x7c>)
  400f26:	609a      	str	r2, [r3, #8]
  400f28:	2207      	movs	r2, #7
  400f2a:	819a      	strh	r2, [r3, #12]
  400f2c:	2001      	movs	r0, #1
  400f2e:	4770      	bx	lr
  400f30:	f003 0360 	and.w	r3, r3, #96	; 0x60
  400f34:	2b20      	cmp	r3, #32
  400f36:	d11b      	bne.n	400f70 <udi_cdc_comm_setup+0x70>
  400f38:	4b0f      	ldr	r3, [pc, #60]	; (400f78 <udi_cdc_comm_setup+0x78>)
  400f3a:	7858      	ldrb	r0, [r3, #1]
  400f3c:	2820      	cmp	r0, #32
  400f3e:	d004      	beq.n	400f4a <udi_cdc_comm_setup+0x4a>
  400f40:	2822      	cmp	r0, #34	; 0x22
  400f42:	bf14      	ite	ne
  400f44:	2000      	movne	r0, #0
  400f46:	2001      	moveq	r0, #1
  400f48:	4770      	bx	lr
  400f4a:	4b0b      	ldr	r3, [pc, #44]	; (400f78 <udi_cdc_comm_setup+0x78>)
  400f4c:	88db      	ldrh	r3, [r3, #6]
  400f4e:	2b07      	cmp	r3, #7
  400f50:	d110      	bne.n	400f74 <udi_cdc_comm_setup+0x74>
  400f52:	4b09      	ldr	r3, [pc, #36]	; (400f78 <udi_cdc_comm_setup+0x78>)
  400f54:	4a0a      	ldr	r2, [pc, #40]	; (400f80 <udi_cdc_comm_setup+0x80>)
  400f56:	611a      	str	r2, [r3, #16]
  400f58:	4a08      	ldr	r2, [pc, #32]	; (400f7c <udi_cdc_comm_setup+0x7c>)
  400f5a:	609a      	str	r2, [r3, #8]
  400f5c:	2207      	movs	r2, #7
  400f5e:	819a      	strh	r2, [r3, #12]
  400f60:	2001      	movs	r0, #1
  400f62:	4770      	bx	lr
  400f64:	2000      	movs	r0, #0
  400f66:	4770      	bx	lr
  400f68:	2000      	movs	r0, #0
  400f6a:	4770      	bx	lr
  400f6c:	2000      	movs	r0, #0
  400f6e:	4770      	bx	lr
  400f70:	2000      	movs	r0, #0
  400f72:	4770      	bx	lr
  400f74:	2000      	movs	r0, #0
  400f76:	4770      	bx	lr
  400f78:	2000b0b4 	.word	0x2000b0b4
  400f7c:	20000a10 	.word	0x20000a10
  400f80:	00400f85 	.word	0x00400f85

00400f84 <udi_cdc_line_coding_received>:
  400f84:	4770      	bx	lr
  400f86:	bf00      	nop

00400f88 <udi_cdc_tx_send>:
  400f88:	4b42      	ldr	r3, [pc, #264]	; (401094 <udi_cdc_tx_send+0x10c>)
  400f8a:	781b      	ldrb	r3, [r3, #0]
  400f8c:	f013 0fff 	tst.w	r3, #255	; 0xff
  400f90:	d17f      	bne.n	401092 <udi_cdc_tx_send+0x10a>
  400f92:	b530      	push	{r4, r5, lr}
  400f94:	b083      	sub	sp, #12
  400f96:	4b40      	ldr	r3, [pc, #256]	; (401098 <udi_cdc_tx_send+0x110>)
  400f98:	4798      	blx	r3
  400f9a:	b130      	cbz	r0, 400faa <udi_cdc_tx_send+0x22>
  400f9c:	4b3f      	ldr	r3, [pc, #252]	; (40109c <udi_cdc_tx_send+0x114>)
  400f9e:	881c      	ldrh	r4, [r3, #0]
  400fa0:	4b3f      	ldr	r3, [pc, #252]	; (4010a0 <udi_cdc_tx_send+0x118>)
  400fa2:	4798      	blx	r3
  400fa4:	4284      	cmp	r4, r0
  400fa6:	d106      	bne.n	400fb6 <udi_cdc_tx_send+0x2e>
  400fa8:	e071      	b.n	40108e <udi_cdc_tx_send+0x106>
  400faa:	4b3c      	ldr	r3, [pc, #240]	; (40109c <udi_cdc_tx_send+0x114>)
  400fac:	881c      	ldrh	r4, [r3, #0]
  400fae:	4b3d      	ldr	r3, [pc, #244]	; (4010a4 <udi_cdc_tx_send+0x11c>)
  400fb0:	4798      	blx	r3
  400fb2:	4284      	cmp	r4, r0
  400fb4:	d06b      	beq.n	40108e <udi_cdc_tx_send+0x106>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  400fb6:	f3ef 8510 	mrs	r5, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
  400fba:	fab5 f585 	clz	r5, r5
  400fbe:	096d      	lsrs	r5, r5, #5
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
  400fc0:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
  400fc2:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  400fc6:	2200      	movs	r2, #0
  400fc8:	4b37      	ldr	r3, [pc, #220]	; (4010a8 <udi_cdc_tx_send+0x120>)
  400fca:	701a      	strb	r2, [r3, #0]
  400fcc:	4b37      	ldr	r3, [pc, #220]	; (4010ac <udi_cdc_tx_send+0x124>)
  400fce:	781c      	ldrb	r4, [r3, #0]
  400fd0:	b2e4      	uxtb	r4, r4
  400fd2:	4b37      	ldr	r3, [pc, #220]	; (4010b0 <udi_cdc_tx_send+0x128>)
  400fd4:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
  400fd8:	b9db      	cbnz	r3, 401012 <udi_cdc_tx_send+0x8a>
  400fda:	4a36      	ldr	r2, [pc, #216]	; (4010b4 <udi_cdc_tx_send+0x12c>)
  400fdc:	8813      	ldrh	r3, [r2, #0]
  400fde:	3301      	adds	r3, #1
  400fe0:	8013      	strh	r3, [r2, #0]
  400fe2:	4b2d      	ldr	r3, [pc, #180]	; (401098 <udi_cdc_tx_send+0x110>)
  400fe4:	4798      	blx	r3
  400fe6:	b918      	cbnz	r0, 400ff0 <udi_cdc_tx_send+0x68>
  400fe8:	4b32      	ldr	r3, [pc, #200]	; (4010b4 <udi_cdc_tx_send+0x12c>)
  400fea:	881b      	ldrh	r3, [r3, #0]
  400fec:	2b63      	cmp	r3, #99	; 0x63
  400fee:	d907      	bls.n	401000 <udi_cdc_tx_send+0x78>
  400ff0:	4b29      	ldr	r3, [pc, #164]	; (401098 <udi_cdc_tx_send+0x110>)
  400ff2:	4798      	blx	r3
  400ff4:	b168      	cbz	r0, 401012 <udi_cdc_tx_send+0x8a>
  400ff6:	4b2f      	ldr	r3, [pc, #188]	; (4010b4 <udi_cdc_tx_send+0x12c>)
  400ff8:	881b      	ldrh	r3, [r3, #0]
  400ffa:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
  400ffe:	d208      	bcs.n	401012 <udi_cdc_tx_send+0x8a>
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  401000:	2d00      	cmp	r5, #0
  401002:	d044      	beq.n	40108e <udi_cdc_tx_send+0x106>
		cpu_irq_enable();
  401004:	2201      	movs	r2, #1
  401006:	4b28      	ldr	r3, [pc, #160]	; (4010a8 <udi_cdc_tx_send+0x120>)
  401008:	701a      	strb	r2, [r3, #0]
  40100a:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
  40100e:	b662      	cpsie	i
  401010:	e03d      	b.n	40108e <udi_cdc_tx_send+0x106>
  401012:	2200      	movs	r2, #0
  401014:	4b27      	ldr	r3, [pc, #156]	; (4010b4 <udi_cdc_tx_send+0x12c>)
  401016:	801a      	strh	r2, [r3, #0]
  401018:	4b27      	ldr	r3, [pc, #156]	; (4010b8 <udi_cdc_tx_send+0x130>)
  40101a:	781b      	ldrb	r3, [r3, #0]
  40101c:	f013 0fff 	tst.w	r3, #255	; 0xff
  401020:	d105      	bne.n	40102e <udi_cdc_tx_send+0xa6>
  401022:	fab4 f384 	clz	r3, r4
  401026:	095b      	lsrs	r3, r3, #5
  401028:	4a20      	ldr	r2, [pc, #128]	; (4010ac <udi_cdc_tx_send+0x124>)
  40102a:	7013      	strb	r3, [r2, #0]
  40102c:	e002      	b.n	401034 <udi_cdc_tx_send+0xac>
  40102e:	fab4 f484 	clz	r4, r4
  401032:	0964      	lsrs	r4, r4, #5
  401034:	2201      	movs	r2, #1
  401036:	4b17      	ldr	r3, [pc, #92]	; (401094 <udi_cdc_tx_send+0x10c>)
  401038:	701a      	strb	r2, [r3, #0]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  40103a:	b125      	cbz	r5, 401046 <udi_cdc_tx_send+0xbe>
		cpu_irq_enable();
  40103c:	4b1a      	ldr	r3, [pc, #104]	; (4010a8 <udi_cdc_tx_send+0x120>)
  40103e:	701a      	strb	r2, [r3, #0]
  401040:	f3bf 8f5f 	dmb	sy
  401044:	b662      	cpsie	i
  401046:	4625      	mov	r5, r4
  401048:	4b19      	ldr	r3, [pc, #100]	; (4010b0 <udi_cdc_tx_send+0x128>)
  40104a:	f833 4014 	ldrh.w	r4, [r3, r4, lsl #1]
  40104e:	3c40      	subs	r4, #64	; 0x40
  401050:	bf18      	it	ne
  401052:	2401      	movne	r4, #1
  401054:	b164      	cbz	r4, 401070 <udi_cdc_tx_send+0xe8>
  401056:	4b10      	ldr	r3, [pc, #64]	; (401098 <udi_cdc_tx_send+0x110>)
  401058:	4798      	blx	r3
  40105a:	b120      	cbz	r0, 401066 <udi_cdc_tx_send+0xde>
  40105c:	4b10      	ldr	r3, [pc, #64]	; (4010a0 <udi_cdc_tx_send+0x118>)
  40105e:	4798      	blx	r3
  401060:	4b0e      	ldr	r3, [pc, #56]	; (40109c <udi_cdc_tx_send+0x114>)
  401062:	8018      	strh	r0, [r3, #0]
  401064:	e007      	b.n	401076 <udi_cdc_tx_send+0xee>
  401066:	4b0f      	ldr	r3, [pc, #60]	; (4010a4 <udi_cdc_tx_send+0x11c>)
  401068:	4798      	blx	r3
  40106a:	4b0c      	ldr	r3, [pc, #48]	; (40109c <udi_cdc_tx_send+0x114>)
  40106c:	8018      	strh	r0, [r3, #0]
  40106e:	e002      	b.n	401076 <udi_cdc_tx_send+0xee>
  401070:	2200      	movs	r2, #0
  401072:	4b0a      	ldr	r3, [pc, #40]	; (40109c <udi_cdc_tx_send+0x114>)
  401074:	801a      	strh	r2, [r3, #0]
  401076:	4b0e      	ldr	r3, [pc, #56]	; (4010b0 <udi_cdc_tx_send+0x128>)
  401078:	f833 3015 	ldrh.w	r3, [r3, r5, lsl #1]
  40107c:	4a0f      	ldr	r2, [pc, #60]	; (4010bc <udi_cdc_tx_send+0x134>)
  40107e:	9200      	str	r2, [sp, #0]
  401080:	2081      	movs	r0, #129	; 0x81
  401082:	4621      	mov	r1, r4
  401084:	4a0e      	ldr	r2, [pc, #56]	; (4010c0 <udi_cdc_tx_send+0x138>)
  401086:	eb02 1285 	add.w	r2, r2, r5, lsl #6
  40108a:	4c0e      	ldr	r4, [pc, #56]	; (4010c4 <udi_cdc_tx_send+0x13c>)
  40108c:	47a0      	blx	r4
  40108e:	b003      	add	sp, #12
  401090:	bd30      	pop	{r4, r5, pc}
  401092:	4770      	bx	lr
  401094:	20000ab0 	.word	0x20000ab0
  401098:	004034b9 	.word	0x004034b9
  40109c:	20000aa8 	.word	0x20000aa8
  4010a0:	00403521 	.word	0x00403521
  4010a4:	00403511 	.word	0x00403511
  4010a8:	200000a0 	.word	0x200000a0
  4010ac:	20000a18 	.word	0x20000a18
  4010b0:	20000a1c 	.word	0x20000a1c
  4010b4:	20000aa6 	.word	0x20000aa6
  4010b8:	20000b44 	.word	0x20000b44
  4010bc:	004010c9 	.word	0x004010c9
  4010c0:	20000a20 	.word	0x20000a20
  4010c4:	004038bd 	.word	0x004038bd

004010c8 <udi_cdc_data_sent>:
  4010c8:	b988      	cbnz	r0, 4010ee <udi_cdc_data_sent+0x26>
  4010ca:	b508      	push	{r3, lr}
  4010cc:	4b08      	ldr	r3, [pc, #32]	; (4010f0 <udi_cdc_data_sent+0x28>)
  4010ce:	781b      	ldrb	r3, [r3, #0]
  4010d0:	f013 0fff 	tst.w	r3, #255	; 0xff
  4010d4:	bf0c      	ite	eq
  4010d6:	2201      	moveq	r2, #1
  4010d8:	2200      	movne	r2, #0
  4010da:	4b06      	ldr	r3, [pc, #24]	; (4010f4 <udi_cdc_data_sent+0x2c>)
  4010dc:	f823 0012 	strh.w	r0, [r3, r2, lsl #1]
  4010e0:	4b05      	ldr	r3, [pc, #20]	; (4010f8 <udi_cdc_data_sent+0x30>)
  4010e2:	7018      	strb	r0, [r3, #0]
  4010e4:	4b05      	ldr	r3, [pc, #20]	; (4010fc <udi_cdc_data_sent+0x34>)
  4010e6:	7018      	strb	r0, [r3, #0]
  4010e8:	4b05      	ldr	r3, [pc, #20]	; (401100 <udi_cdc_data_sent+0x38>)
  4010ea:	4798      	blx	r3
  4010ec:	bd08      	pop	{r3, pc}
  4010ee:	4770      	bx	lr
  4010f0:	20000a18 	.word	0x20000a18
  4010f4:	20000a1c 	.word	0x20000a1c
  4010f8:	20000b44 	.word	0x20000b44
  4010fc:	20000ab0 	.word	0x20000ab0
  401100:	00400f89 	.word	0x00400f89

00401104 <udi_cdc_data_sof_notify>:
  401104:	b508      	push	{r3, lr}
  401106:	2000      	movs	r0, #0
  401108:	4b01      	ldr	r3, [pc, #4]	; (401110 <udi_cdc_data_sof_notify+0xc>)
  40110a:	4798      	blx	r3
  40110c:	bd08      	pop	{r3, pc}
  40110e:	bf00      	nop
  401110:	00400f89 	.word	0x00400f89

00401114 <udi_cdc_multi_get_nb_received_data>:
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  401114:	f3ef 8210 	mrs	r2, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
  401118:	b672      	cpsid	i
  40111a:	f3bf 8f5f 	dmb	sy
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
  40111e:	2100      	movs	r1, #0
  401120:	4b0a      	ldr	r3, [pc, #40]	; (40114c <udi_cdc_multi_get_nb_received_data+0x38>)
  401122:	7019      	strb	r1, [r3, #0]
  401124:	4b0a      	ldr	r3, [pc, #40]	; (401150 <udi_cdc_multi_get_nb_received_data+0x3c>)
  401126:	8818      	ldrh	r0, [r3, #0]
  401128:	b280      	uxth	r0, r0
  40112a:	4b0a      	ldr	r3, [pc, #40]	; (401154 <udi_cdc_multi_get_nb_received_data+0x40>)
  40112c:	781b      	ldrb	r3, [r3, #0]
  40112e:	b2db      	uxtb	r3, r3
  401130:	4909      	ldr	r1, [pc, #36]	; (401158 <udi_cdc_multi_get_nb_received_data+0x44>)
  401132:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
  401136:	b29b      	uxth	r3, r3
  401138:	1a18      	subs	r0, r3, r0
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  40113a:	b92a      	cbnz	r2, 401148 <udi_cdc_multi_get_nb_received_data+0x34>
		cpu_irq_enable();
  40113c:	2201      	movs	r2, #1
  40113e:	4b03      	ldr	r3, [pc, #12]	; (40114c <udi_cdc_multi_get_nb_received_data+0x38>)
  401140:	701a      	strb	r2, [r3, #0]
  401142:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
  401146:	b662      	cpsie	i
  401148:	4770      	bx	lr
  40114a:	bf00      	nop
  40114c:	200000a0 	.word	0x200000a0
  401150:	20000a0c 	.word	0x20000a0c
  401154:	20000aac 	.word	0x20000aac
  401158:	20000aa0 	.word	0x20000aa0

0040115c <udi_cdc_multi_is_rx_ready>:
  40115c:	b508      	push	{r3, lr}
  40115e:	4b03      	ldr	r3, [pc, #12]	; (40116c <udi_cdc_multi_is_rx_ready+0x10>)
  401160:	4798      	blx	r3
  401162:	3000      	adds	r0, #0
  401164:	bf18      	it	ne
  401166:	2001      	movne	r0, #1
  401168:	bd08      	pop	{r3, pc}
  40116a:	bf00      	nop
  40116c:	00401115 	.word	0x00401115

00401170 <udi_cdc_rx_start>:
  401170:	b510      	push	{r4, lr}
  401172:	b082      	sub	sp, #8
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  401174:	f3ef 8310 	mrs	r3, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
  401178:	fab3 f383 	clz	r3, r3
  40117c:	095b      	lsrs	r3, r3, #5
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
  40117e:	b672      	cpsid	i
  401180:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  401184:	2100      	movs	r1, #0
  401186:	4a1f      	ldr	r2, [pc, #124]	; (401204 <udi_cdc_rx_start+0x94>)
  401188:	7011      	strb	r1, [r2, #0]
  40118a:	4a1f      	ldr	r2, [pc, #124]	; (401208 <udi_cdc_rx_start+0x98>)
  40118c:	7812      	ldrb	r2, [r2, #0]
  40118e:	b2d4      	uxtb	r4, r2
  401190:	4a1e      	ldr	r2, [pc, #120]	; (40120c <udi_cdc_rx_start+0x9c>)
  401192:	7812      	ldrb	r2, [r2, #0]
  401194:	f012 0fff 	tst.w	r2, #255	; 0xff
  401198:	d108      	bne.n	4011ac <udi_cdc_rx_start+0x3c>
  40119a:	4a1d      	ldr	r2, [pc, #116]	; (401210 <udi_cdc_rx_start+0xa0>)
  40119c:	8811      	ldrh	r1, [r2, #0]
  40119e:	b289      	uxth	r1, r1
  4011a0:	4a1c      	ldr	r2, [pc, #112]	; (401214 <udi_cdc_rx_start+0xa4>)
  4011a2:	f832 2014 	ldrh.w	r2, [r2, r4, lsl #1]
  4011a6:	b292      	uxth	r2, r2
  4011a8:	4291      	cmp	r1, r2
  4011aa:	d208      	bcs.n	4011be <udi_cdc_rx_start+0x4e>
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  4011ac:	b333      	cbz	r3, 4011fc <udi_cdc_rx_start+0x8c>
		cpu_irq_enable();
  4011ae:	2201      	movs	r2, #1
  4011b0:	4b14      	ldr	r3, [pc, #80]	; (401204 <udi_cdc_rx_start+0x94>)
  4011b2:	701a      	strb	r2, [r3, #0]
  4011b4:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
  4011b8:	b662      	cpsie	i
  4011ba:	2000      	movs	r0, #0
  4011bc:	e01f      	b.n	4011fe <udi_cdc_rx_start+0x8e>
  4011be:	2100      	movs	r1, #0
  4011c0:	4a13      	ldr	r2, [pc, #76]	; (401210 <udi_cdc_rx_start+0xa0>)
  4011c2:	8011      	strh	r1, [r2, #0]
  4011c4:	fab4 f284 	clz	r2, r4
  4011c8:	0952      	lsrs	r2, r2, #5
  4011ca:	490f      	ldr	r1, [pc, #60]	; (401208 <udi_cdc_rx_start+0x98>)
  4011cc:	700a      	strb	r2, [r1, #0]
  4011ce:	2101      	movs	r1, #1
  4011d0:	4a0e      	ldr	r2, [pc, #56]	; (40120c <udi_cdc_rx_start+0x9c>)
  4011d2:	7011      	strb	r1, [r2, #0]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  4011d4:	b123      	cbz	r3, 4011e0 <udi_cdc_rx_start+0x70>
		cpu_irq_enable();
  4011d6:	4b0b      	ldr	r3, [pc, #44]	; (401204 <udi_cdc_rx_start+0x94>)
  4011d8:	7019      	strb	r1, [r3, #0]
  4011da:	f3bf 8f5f 	dmb	sy
  4011de:	b662      	cpsie	i
  4011e0:	2000      	movs	r0, #0
  4011e2:	4b0d      	ldr	r3, [pc, #52]	; (401218 <udi_cdc_rx_start+0xa8>)
  4011e4:	4798      	blx	r3
  4011e6:	4b0d      	ldr	r3, [pc, #52]	; (40121c <udi_cdc_rx_start+0xac>)
  4011e8:	9300      	str	r3, [sp, #0]
  4011ea:	2002      	movs	r0, #2
  4011ec:	2101      	movs	r1, #1
  4011ee:	4a0c      	ldr	r2, [pc, #48]	; (401220 <udi_cdc_rx_start+0xb0>)
  4011f0:	eb02 1284 	add.w	r2, r2, r4, lsl #6
  4011f4:	2340      	movs	r3, #64	; 0x40
  4011f6:	4c0b      	ldr	r4, [pc, #44]	; (401224 <udi_cdc_rx_start+0xb4>)
  4011f8:	47a0      	blx	r4
  4011fa:	e000      	b.n	4011fe <udi_cdc_rx_start+0x8e>
  4011fc:	2000      	movs	r0, #0
  4011fe:	b002      	add	sp, #8
  401200:	bd10      	pop	{r4, pc}
  401202:	bf00      	nop
  401204:	200000a0 	.word	0x200000a0
  401208:	20000aac 	.word	0x20000aac
  40120c:	20000b40 	.word	0x20000b40
  401210:	20000a0c 	.word	0x20000a0c
  401214:	20000aa0 	.word	0x20000aa0
  401218:	0040115d 	.word	0x0040115d
  40121c:	004012b9 	.word	0x004012b9
  401220:	20000ac0 	.word	0x20000ac0
  401224:	004038bd 	.word	0x004038bd

00401228 <udi_cdc_data_enable>:
  401228:	b510      	push	{r4, lr}
  40122a:	2400      	movs	r4, #0
  40122c:	4b15      	ldr	r3, [pc, #84]	; (401284 <udi_cdc_data_enable+0x5c>)
  40122e:	701c      	strb	r4, [r3, #0]
  401230:	4b15      	ldr	r3, [pc, #84]	; (401288 <udi_cdc_data_enable+0x60>)
  401232:	701c      	strb	r4, [r3, #0]
  401234:	4b15      	ldr	r3, [pc, #84]	; (40128c <udi_cdc_data_enable+0x64>)
  401236:	701c      	strb	r4, [r3, #0]
  401238:	4b15      	ldr	r3, [pc, #84]	; (401290 <udi_cdc_data_enable+0x68>)
  40123a:	701c      	strb	r4, [r3, #0]
  40123c:	4b15      	ldr	r3, [pc, #84]	; (401294 <udi_cdc_data_enable+0x6c>)
  40123e:	801c      	strh	r4, [r3, #0]
  401240:	805c      	strh	r4, [r3, #2]
  401242:	4b15      	ldr	r3, [pc, #84]	; (401298 <udi_cdc_data_enable+0x70>)
  401244:	801c      	strh	r4, [r3, #0]
  401246:	4620      	mov	r0, r4
  401248:	4b14      	ldr	r3, [pc, #80]	; (40129c <udi_cdc_data_enable+0x74>)
  40124a:	4798      	blx	r3
  40124c:	4b14      	ldr	r3, [pc, #80]	; (4012a0 <udi_cdc_data_enable+0x78>)
  40124e:	701c      	strb	r4, [r3, #0]
  401250:	4b14      	ldr	r3, [pc, #80]	; (4012a4 <udi_cdc_data_enable+0x7c>)
  401252:	701c      	strb	r4, [r3, #0]
  401254:	4b14      	ldr	r3, [pc, #80]	; (4012a8 <udi_cdc_data_enable+0x80>)
  401256:	801c      	strh	r4, [r3, #0]
  401258:	805c      	strh	r4, [r3, #2]
  40125a:	4b14      	ldr	r3, [pc, #80]	; (4012ac <udi_cdc_data_enable+0x84>)
  40125c:	801c      	strh	r4, [r3, #0]
  40125e:	4620      	mov	r0, r4
  401260:	4b13      	ldr	r3, [pc, #76]	; (4012b0 <udi_cdc_data_enable+0x88>)
  401262:	4798      	blx	r3
  401264:	4601      	mov	r1, r0
  401266:	b158      	cbz	r0, 401280 <udi_cdc_data_enable+0x58>
  401268:	4a06      	ldr	r2, [pc, #24]	; (401284 <udi_cdc_data_enable+0x5c>)
  40126a:	7813      	ldrb	r3, [r2, #0]
  40126c:	3301      	adds	r3, #1
  40126e:	b2db      	uxtb	r3, r3
  401270:	7013      	strb	r3, [r2, #0]
  401272:	7813      	ldrb	r3, [r2, #0]
  401274:	b2db      	uxtb	r3, r3
  401276:	2b01      	cmp	r3, #1
  401278:	d102      	bne.n	401280 <udi_cdc_data_enable+0x58>
  40127a:	2201      	movs	r2, #1
  40127c:	4b0d      	ldr	r3, [pc, #52]	; (4012b4 <udi_cdc_data_enable+0x8c>)
  40127e:	701a      	strb	r2, [r3, #0]
  401280:	4608      	mov	r0, r1
  401282:	bd10      	pop	{r4, pc}
  401284:	20000a17 	.word	0x20000a17
  401288:	20000ab0 	.word	0x20000ab0
  40128c:	20000b44 	.word	0x20000b44
  401290:	20000a18 	.word	0x20000a18
  401294:	20000a1c 	.word	0x20000a1c
  401298:	20000aa8 	.word	0x20000aa8
  40129c:	00400f89 	.word	0x00400f89
  4012a0:	20000b40 	.word	0x20000b40
  4012a4:	20000aac 	.word	0x20000aac
  4012a8:	20000aa0 	.word	0x20000aa0
  4012ac:	20000a0c 	.word	0x20000a0c
  4012b0:	00401171 	.word	0x00401171
  4012b4:	20000aaa 	.word	0x20000aaa

004012b8 <udi_cdc_data_received>:
  4012b8:	b9f8      	cbnz	r0, 4012fa <udi_cdc_data_received+0x42>
  4012ba:	b510      	push	{r4, lr}
  4012bc:	b082      	sub	sp, #8
  4012be:	4b0f      	ldr	r3, [pc, #60]	; (4012fc <udi_cdc_data_received+0x44>)
  4012c0:	781b      	ldrb	r3, [r3, #0]
  4012c2:	f013 0fff 	tst.w	r3, #255	; 0xff
  4012c6:	bf0c      	ite	eq
  4012c8:	2301      	moveq	r3, #1
  4012ca:	2300      	movne	r3, #0
  4012cc:	b951      	cbnz	r1, 4012e4 <udi_cdc_data_received+0x2c>
  4012ce:	490c      	ldr	r1, [pc, #48]	; (401300 <udi_cdc_data_received+0x48>)
  4012d0:	9100      	str	r1, [sp, #0]
  4012d2:	4610      	mov	r0, r2
  4012d4:	2101      	movs	r1, #1
  4012d6:	4a0b      	ldr	r2, [pc, #44]	; (401304 <udi_cdc_data_received+0x4c>)
  4012d8:	eb02 1283 	add.w	r2, r2, r3, lsl #6
  4012dc:	2340      	movs	r3, #64	; 0x40
  4012de:	4c0a      	ldr	r4, [pc, #40]	; (401308 <udi_cdc_data_received+0x50>)
  4012e0:	47a0      	blx	r4
  4012e2:	e008      	b.n	4012f6 <udi_cdc_data_received+0x3e>
  4012e4:	b289      	uxth	r1, r1
  4012e6:	4a09      	ldr	r2, [pc, #36]	; (40130c <udi_cdc_data_received+0x54>)
  4012e8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
  4012ec:	2000      	movs	r0, #0
  4012ee:	4b08      	ldr	r3, [pc, #32]	; (401310 <udi_cdc_data_received+0x58>)
  4012f0:	7018      	strb	r0, [r3, #0]
  4012f2:	4b08      	ldr	r3, [pc, #32]	; (401314 <udi_cdc_data_received+0x5c>)
  4012f4:	4798      	blx	r3
  4012f6:	b002      	add	sp, #8
  4012f8:	bd10      	pop	{r4, pc}
  4012fa:	4770      	bx	lr
  4012fc:	20000aac 	.word	0x20000aac
  401300:	004012b9 	.word	0x004012b9
  401304:	20000ac0 	.word	0x20000ac0
  401308:	004038bd 	.word	0x004038bd
  40130c:	20000aa0 	.word	0x20000aa0
  401310:	20000b40 	.word	0x20000b40
  401314:	00401171 	.word	0x00401171

00401318 <udi_cdc_is_rx_ready>:
  401318:	b508      	push	{r3, lr}
  40131a:	2000      	movs	r0, #0
  40131c:	4b01      	ldr	r3, [pc, #4]	; (401324 <udi_cdc_is_rx_ready+0xc>)
  40131e:	4798      	blx	r3
  401320:	bd08      	pop	{r3, pc}
  401322:	bf00      	nop
  401324:	0040115d 	.word	0x0040115d

00401328 <udi_cdc_multi_getc>:
  401328:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  40132c:	4b22      	ldr	r3, [pc, #136]	; (4013b8 <udi_cdc_multi_getc+0x90>)
  40132e:	f893 8006 	ldrb.w	r8, [r3, #6]
  401332:	f1b8 0f09 	cmp.w	r8, #9
  401336:	bf14      	ite	ne
  401338:	f04f 0800 	movne.w	r8, #0
  40133c:	f04f 0801 	moveq.w	r8, #1
  401340:	f04f 0a00 	mov.w	sl, #0
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
  401344:	4c1d      	ldr	r4, [pc, #116]	; (4013bc <udi_cdc_multi_getc+0x94>)
  401346:	46d1      	mov	r9, sl
  401348:	4657      	mov	r7, sl
  40134a:	4d1d      	ldr	r5, [pc, #116]	; (4013c0 <udi_cdc_multi_getc+0x98>)
  40134c:	4e1d      	ldr	r6, [pc, #116]	; (4013c4 <udi_cdc_multi_getc+0x9c>)
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  40134e:	f3ef 8010 	mrs	r0, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
  401352:	b672      	cpsid	i
  401354:	f3bf 8f5f 	dmb	sy
  401358:	7027      	strb	r7, [r4, #0]
  40135a:	882b      	ldrh	r3, [r5, #0]
  40135c:	b29b      	uxth	r3, r3
  40135e:	7832      	ldrb	r2, [r6, #0]
  401360:	b2d2      	uxtb	r2, r2
  401362:	4919      	ldr	r1, [pc, #100]	; (4013c8 <udi_cdc_multi_getc+0xa0>)
  401364:	f831 1012 	ldrh.w	r1, [r1, r2, lsl #1]
  401368:	b289      	uxth	r1, r1
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  40136a:	b920      	cbnz	r0, 401376 <udi_cdc_multi_getc+0x4e>
		cpu_irq_enable();
  40136c:	2001      	movs	r0, #1
  40136e:	7020      	strb	r0, [r4, #0]
  401370:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
  401374:	b662      	cpsie	i
  401376:	428b      	cmp	r3, r1
  401378:	d307      	bcc.n	40138a <udi_cdc_multi_getc+0x62>
  40137a:	4b14      	ldr	r3, [pc, #80]	; (4013cc <udi_cdc_multi_getc+0xa4>)
  40137c:	781b      	ldrb	r3, [r3, #0]
  40137e:	f013 0fff 	tst.w	r3, #255	; 0xff
  401382:	d1e4      	bne.n	40134e <udi_cdc_multi_getc+0x26>
  401384:	2000      	movs	r0, #0
  401386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40138a:	eb03 1282 	add.w	r2, r3, r2, lsl #6
  40138e:	4910      	ldr	r1, [pc, #64]	; (4013d0 <udi_cdc_multi_getc+0xa8>)
  401390:	5c88      	ldrb	r0, [r1, r2]
  401392:	ea4a 0a00 	orr.w	sl, sl, r0
  401396:	3301      	adds	r3, #1
  401398:	b29b      	uxth	r3, r3
  40139a:	802b      	strh	r3, [r5, #0]
  40139c:	4648      	mov	r0, r9
  40139e:	4b0d      	ldr	r3, [pc, #52]	; (4013d4 <udi_cdc_multi_getc+0xac>)
  4013a0:	4798      	blx	r3
  4013a2:	f1b8 0f00 	cmp.w	r8, #0
  4013a6:	d003      	beq.n	4013b0 <udi_cdc_multi_getc+0x88>
  4013a8:	ea4f 2a0a 	mov.w	sl, sl, lsl #8
  4013ac:	46c8      	mov	r8, r9
  4013ae:	e7ce      	b.n	40134e <udi_cdc_multi_getc+0x26>
  4013b0:	4650      	mov	r0, sl
  4013b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4013b6:	bf00      	nop
  4013b8:	20000a10 	.word	0x20000a10
  4013bc:	200000a0 	.word	0x200000a0
  4013c0:	20000a0c 	.word	0x20000a0c
  4013c4:	20000aac 	.word	0x20000aac
  4013c8:	20000aa0 	.word	0x20000aa0
  4013cc:	20000aaa 	.word	0x20000aaa
  4013d0:	20000ac0 	.word	0x20000ac0
  4013d4:	00401171 	.word	0x00401171

004013d8 <udi_cdc_getc>:
  4013d8:	b508      	push	{r3, lr}
  4013da:	2000      	movs	r0, #0
  4013dc:	4b01      	ldr	r3, [pc, #4]	; (4013e4 <udi_cdc_getc+0xc>)
  4013de:	4798      	blx	r3
  4013e0:	bd08      	pop	{r3, pc}
  4013e2:	bf00      	nop
  4013e4:	00401329 	.word	0x00401329

004013e8 <udi_cdc_multi_get_free_tx_buffer>:
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  4013e8:	f3ef 8210 	mrs	r2, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
  4013ec:	b672      	cpsid	i
  4013ee:	f3bf 8f5f 	dmb	sy
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
  4013f2:	2100      	movs	r1, #0
  4013f4:	4b13      	ldr	r3, [pc, #76]	; (401444 <udi_cdc_multi_get_free_tx_buffer+0x5c>)
  4013f6:	7019      	strb	r1, [r3, #0]
  4013f8:	4b13      	ldr	r3, [pc, #76]	; (401448 <udi_cdc_multi_get_free_tx_buffer+0x60>)
  4013fa:	781b      	ldrb	r3, [r3, #0]
  4013fc:	b2db      	uxtb	r3, r3
  4013fe:	4913      	ldr	r1, [pc, #76]	; (40144c <udi_cdc_multi_get_free_tx_buffer+0x64>)
  401400:	f831 0013 	ldrh.w	r0, [r1, r3, lsl #1]
  401404:	2840      	cmp	r0, #64	; 0x40
  401406:	d112      	bne.n	40142e <udi_cdc_multi_get_free_tx_buffer+0x46>
  401408:	4911      	ldr	r1, [pc, #68]	; (401450 <udi_cdc_multi_get_free_tx_buffer+0x68>)
  40140a:	7809      	ldrb	r1, [r1, #0]
  40140c:	f011 0fff 	tst.w	r1, #255	; 0xff
  401410:	d10d      	bne.n	40142e <udi_cdc_multi_get_free_tx_buffer+0x46>
  401412:	4910      	ldr	r1, [pc, #64]	; (401454 <udi_cdc_multi_get_free_tx_buffer+0x6c>)
  401414:	7809      	ldrb	r1, [r1, #0]
  401416:	f011 0fff 	tst.w	r1, #255	; 0xff
  40141a:	d108      	bne.n	40142e <udi_cdc_multi_get_free_tx_buffer+0x46>
  40141c:	2001      	movs	r0, #1
  40141e:	490d      	ldr	r1, [pc, #52]	; (401454 <udi_cdc_multi_get_free_tx_buffer+0x6c>)
  401420:	7008      	strb	r0, [r1, #0]
  401422:	fab3 f383 	clz	r3, r3
  401426:	095b      	lsrs	r3, r3, #5
  401428:	4907      	ldr	r1, [pc, #28]	; (401448 <udi_cdc_multi_get_free_tx_buffer+0x60>)
  40142a:	700b      	strb	r3, [r1, #0]
  40142c:	2000      	movs	r0, #0
  40142e:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  401432:	b92a      	cbnz	r2, 401440 <udi_cdc_multi_get_free_tx_buffer+0x58>
		cpu_irq_enable();
  401434:	2201      	movs	r2, #1
  401436:	4b03      	ldr	r3, [pc, #12]	; (401444 <udi_cdc_multi_get_free_tx_buffer+0x5c>)
  401438:	701a      	strb	r2, [r3, #0]
  40143a:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
  40143e:	b662      	cpsie	i
  401440:	4770      	bx	lr
  401442:	bf00      	nop
  401444:	200000a0 	.word	0x200000a0
  401448:	20000a18 	.word	0x20000a18
  40144c:	20000a1c 	.word	0x20000a1c
  401450:	20000ab0 	.word	0x20000ab0
  401454:	20000b44 	.word	0x20000b44

00401458 <udi_cdc_multi_is_tx_ready>:
  401458:	b508      	push	{r3, lr}
  40145a:	4b03      	ldr	r3, [pc, #12]	; (401468 <udi_cdc_multi_is_tx_ready+0x10>)
  40145c:	4798      	blx	r3
  40145e:	3000      	adds	r0, #0
  401460:	bf18      	it	ne
  401462:	2001      	movne	r0, #1
  401464:	bd08      	pop	{r3, pc}
  401466:	bf00      	nop
  401468:	004013e9 	.word	0x004013e9

0040146c <udi_cdc_multi_putc>:
  40146c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  401470:	460c      	mov	r4, r1
  401472:	4b1b      	ldr	r3, [pc, #108]	; (4014e0 <udi_cdc_multi_putc+0x74>)
  401474:	799d      	ldrb	r5, [r3, #6]
  401476:	2d09      	cmp	r5, #9
  401478:	bf14      	ite	ne
  40147a:	2500      	movne	r5, #0
  40147c:	2501      	moveq	r5, #1
  40147e:	4e19      	ldr	r6, [pc, #100]	; (4014e4 <udi_cdc_multi_putc+0x78>)
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
  401480:	4f19      	ldr	r7, [pc, #100]	; (4014e8 <udi_cdc_multi_putc+0x7c>)
  401482:	f8df 8074 	ldr.w	r8, [pc, #116]	; 4014f8 <udi_cdc_multi_putc+0x8c>
  401486:	2000      	movs	r0, #0
  401488:	47b0      	blx	r6
  40148a:	b930      	cbnz	r0, 40149a <udi_cdc_multi_putc+0x2e>
  40148c:	4b17      	ldr	r3, [pc, #92]	; (4014ec <udi_cdc_multi_putc+0x80>)
  40148e:	781b      	ldrb	r3, [r3, #0]
  401490:	f013 0fff 	tst.w	r3, #255	; 0xff
  401494:	d1f7      	bne.n	401486 <udi_cdc_multi_putc+0x1a>
  401496:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  40149a:	f3ef 8110 	mrs	r1, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
  40149e:	b672      	cpsid	i
  4014a0:	f3bf 8f5f 	dmb	sy
  4014a4:	2300      	movs	r3, #0
  4014a6:	703b      	strb	r3, [r7, #0]
  4014a8:	f898 3000 	ldrb.w	r3, [r8]
  4014ac:	b2db      	uxtb	r3, r3
  4014ae:	4810      	ldr	r0, [pc, #64]	; (4014f0 <udi_cdc_multi_putc+0x84>)
  4014b0:	f830 2013 	ldrh.w	r2, [r0, r3, lsl #1]
  4014b4:	f102 0e01 	add.w	lr, r2, #1
  4014b8:	f820 e013 	strh.w	lr, [r0, r3, lsl #1]
  4014bc:	eb02 1383 	add.w	r3, r2, r3, lsl #6
  4014c0:	4a0c      	ldr	r2, [pc, #48]	; (4014f4 <udi_cdc_multi_putc+0x88>)
  4014c2:	54d4      	strb	r4, [r2, r3]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  4014c4:	b921      	cbnz	r1, 4014d0 <udi_cdc_multi_putc+0x64>
		cpu_irq_enable();
  4014c6:	2301      	movs	r3, #1
  4014c8:	703b      	strb	r3, [r7, #0]
  4014ca:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
  4014ce:	b662      	cpsie	i
  4014d0:	b115      	cbz	r5, 4014d8 <udi_cdc_multi_putc+0x6c>
  4014d2:	1224      	asrs	r4, r4, #8
  4014d4:	2500      	movs	r5, #0
  4014d6:	e7d6      	b.n	401486 <udi_cdc_multi_putc+0x1a>
  4014d8:	2001      	movs	r0, #1
  4014da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4014de:	bf00      	nop
  4014e0:	20000a10 	.word	0x20000a10
  4014e4:	00401459 	.word	0x00401459
  4014e8:	200000a0 	.word	0x200000a0
  4014ec:	20000aaa 	.word	0x20000aaa
  4014f0:	20000a1c 	.word	0x20000a1c
  4014f4:	20000a20 	.word	0x20000a20
  4014f8:	20000a18 	.word	0x20000a18

004014fc <udi_cdc_putc>:
  4014fc:	b508      	push	{r3, lr}
  4014fe:	4601      	mov	r1, r0
  401500:	2000      	movs	r0, #0
  401502:	4b01      	ldr	r3, [pc, #4]	; (401508 <udi_cdc_putc+0xc>)
  401504:	4798      	blx	r3
  401506:	bd08      	pop	{r3, pc}
  401508:	0040146d 	.word	0x0040146d

0040150c <udi_cdc_multi_write_buf>:
  40150c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  401510:	4689      	mov	r9, r1
  401512:	4617      	mov	r7, r2
  401514:	4b1f      	ldr	r3, [pc, #124]	; (401594 <udi_cdc_multi_write_buf+0x88>)
  401516:	799b      	ldrb	r3, [r3, #6]
  401518:	2b09      	cmp	r3, #9
  40151a:	bf08      	it	eq
  40151c:	0057      	lsleq	r7, r2, #1
  40151e:	f8df b088 	ldr.w	fp, [pc, #136]	; 4015a8 <udi_cdc_multi_write_buf+0x9c>
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
  401522:	f8df 8088 	ldr.w	r8, [pc, #136]	; 4015ac <udi_cdc_multi_write_buf+0xa0>
  401526:	2000      	movs	r0, #0
  401528:	47d8      	blx	fp
  40152a:	b938      	cbnz	r0, 40153c <udi_cdc_multi_write_buf+0x30>
  40152c:	4b1a      	ldr	r3, [pc, #104]	; (401598 <udi_cdc_multi_write_buf+0x8c>)
  40152e:	781b      	ldrb	r3, [r3, #0]
  401530:	f013 0fff 	tst.w	r3, #255	; 0xff
  401534:	d1f7      	bne.n	401526 <udi_cdc_multi_write_buf+0x1a>
  401536:	4638      	mov	r0, r7
  401538:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
  40153c:	b672      	cpsid	i
  40153e:	f3bf 8f5f 	dmb	sy
  401542:	2300      	movs	r3, #0
  401544:	f888 3000 	strb.w	r3, [r8]
  401548:	4b14      	ldr	r3, [pc, #80]	; (40159c <udi_cdc_multi_write_buf+0x90>)
  40154a:	781d      	ldrb	r5, [r3, #0]
  40154c:	b2ed      	uxtb	r5, r5
  40154e:	f8df a060 	ldr.w	sl, [pc, #96]	; 4015b0 <udi_cdc_multi_write_buf+0xa4>
  401552:	f83a 6015 	ldrh.w	r6, [sl, r5, lsl #1]
  401556:	f1c6 0440 	rsb	r4, r6, #64	; 0x40
  40155a:	42bc      	cmp	r4, r7
  40155c:	bf28      	it	cs
  40155e:	463c      	movcs	r4, r7
  401560:	eb06 1385 	add.w	r3, r6, r5, lsl #6
  401564:	480e      	ldr	r0, [pc, #56]	; (4015a0 <udi_cdc_multi_write_buf+0x94>)
  401566:	4418      	add	r0, r3
  401568:	4649      	mov	r1, r9
  40156a:	4622      	mov	r2, r4
  40156c:	4b0d      	ldr	r3, [pc, #52]	; (4015a4 <udi_cdc_multi_write_buf+0x98>)
  40156e:	4798      	blx	r3
  401570:	4426      	add	r6, r4
  401572:	f82a 6015 	strh.w	r6, [sl, r5, lsl #1]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  401576:	f3ef 8310 	mrs	r3, PRIMASK
  40157a:	b92b      	cbnz	r3, 401588 <udi_cdc_multi_write_buf+0x7c>
		cpu_irq_enable();
  40157c:	2301      	movs	r3, #1
  40157e:	f888 3000 	strb.w	r3, [r8]
  401582:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
  401586:	b662      	cpsie	i
  401588:	44a1      	add	r9, r4
  40158a:	1b3f      	subs	r7, r7, r4
  40158c:	d1cb      	bne.n	401526 <udi_cdc_multi_write_buf+0x1a>
  40158e:	2000      	movs	r0, #0
  401590:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  401594:	20000a10 	.word	0x20000a10
  401598:	20000aaa 	.word	0x20000aaa
  40159c:	20000a18 	.word	0x20000a18
  4015a0:	20000a20 	.word	0x20000a20
  4015a4:	00406b39 	.word	0x00406b39
  4015a8:	00401459 	.word	0x00401459
  4015ac:	200000a0 	.word	0x200000a0
  4015b0:	20000a1c 	.word	0x20000a1c

004015b4 <udi_cdc_write_buf>:
  4015b4:	b508      	push	{r3, lr}
  4015b6:	4603      	mov	r3, r0
  4015b8:	460a      	mov	r2, r1
  4015ba:	2000      	movs	r0, #0
  4015bc:	4619      	mov	r1, r3
  4015be:	4b01      	ldr	r3, [pc, #4]	; (4015c4 <udi_cdc_write_buf+0x10>)
  4015c0:	4798      	blx	r3
  4015c2:	bd08      	pop	{r3, pc}
  4015c4:	0040150d 	.word	0x0040150d

004015c8 <udc_next_desc_in_iface>:
  4015c8:	4b0f      	ldr	r3, [pc, #60]	; (401608 <udc_next_desc_in_iface+0x40>)
  4015ca:	681b      	ldr	r3, [r3, #0]
  4015cc:	681a      	ldr	r2, [r3, #0]
  4015ce:	8853      	ldrh	r3, [r2, #2]
  4015d0:	441a      	add	r2, r3
  4015d2:	7803      	ldrb	r3, [r0, #0]
  4015d4:	4418      	add	r0, r3
  4015d6:	4290      	cmp	r0, r2
  4015d8:	d210      	bcs.n	4015fc <udc_next_desc_in_iface+0x34>
  4015da:	7843      	ldrb	r3, [r0, #1]
  4015dc:	2b04      	cmp	r3, #4
  4015de:	d00f      	beq.n	401600 <udc_next_desc_in_iface+0x38>
  4015e0:	428b      	cmp	r3, r1
  4015e2:	d105      	bne.n	4015f0 <udc_next_desc_in_iface+0x28>
  4015e4:	4770      	bx	lr
  4015e6:	7843      	ldrb	r3, [r0, #1]
  4015e8:	2b04      	cmp	r3, #4
  4015ea:	d00b      	beq.n	401604 <udc_next_desc_in_iface+0x3c>
  4015ec:	428b      	cmp	r3, r1
  4015ee:	d00a      	beq.n	401606 <udc_next_desc_in_iface+0x3e>
  4015f0:	7803      	ldrb	r3, [r0, #0]
  4015f2:	4418      	add	r0, r3
  4015f4:	4290      	cmp	r0, r2
  4015f6:	d3f6      	bcc.n	4015e6 <udc_next_desc_in_iface+0x1e>
  4015f8:	2000      	movs	r0, #0
  4015fa:	4770      	bx	lr
  4015fc:	2000      	movs	r0, #0
  4015fe:	4770      	bx	lr
  401600:	2000      	movs	r0, #0
  401602:	4770      	bx	lr
  401604:	2000      	movs	r0, #0
  401606:	4770      	bx	lr
  401608:	20000b4c 	.word	0x20000b4c

0040160c <udc_valid_address>:
  40160c:	b508      	push	{r3, lr}
  40160e:	4b03      	ldr	r3, [pc, #12]	; (40161c <udc_valid_address+0x10>)
  401610:	7898      	ldrb	r0, [r3, #2]
  401612:	f000 007f 	and.w	r0, r0, #127	; 0x7f
  401616:	4b02      	ldr	r3, [pc, #8]	; (401620 <udc_valid_address+0x14>)
  401618:	4798      	blx	r3
  40161a:	bd08      	pop	{r3, pc}
  40161c:	2000b0b4 	.word	0x2000b0b4
  401620:	004034bd 	.word	0x004034bd

00401624 <udc_update_iface_desc>:
  401624:	4b16      	ldr	r3, [pc, #88]	; (401680 <udc_update_iface_desc+0x5c>)
  401626:	781b      	ldrb	r3, [r3, #0]
  401628:	b30b      	cbz	r3, 40166e <udc_update_iface_desc+0x4a>
  40162a:	4b16      	ldr	r3, [pc, #88]	; (401684 <udc_update_iface_desc+0x60>)
  40162c:	681b      	ldr	r3, [r3, #0]
  40162e:	681b      	ldr	r3, [r3, #0]
  401630:	791a      	ldrb	r2, [r3, #4]
  401632:	4282      	cmp	r2, r0
  401634:	d91d      	bls.n	401672 <udc_update_iface_desc+0x4e>
  401636:	b410      	push	{r4}
  401638:	4a13      	ldr	r2, [pc, #76]	; (401688 <udc_update_iface_desc+0x64>)
  40163a:	6013      	str	r3, [r2, #0]
  40163c:	885c      	ldrh	r4, [r3, #2]
  40163e:	441c      	add	r4, r3
  401640:	42a3      	cmp	r3, r4
  401642:	d218      	bcs.n	401676 <udc_update_iface_desc+0x52>
  401644:	785a      	ldrb	r2, [r3, #1]
  401646:	2a04      	cmp	r2, #4
  401648:	d109      	bne.n	40165e <udc_update_iface_desc+0x3a>
  40164a:	789a      	ldrb	r2, [r3, #2]
  40164c:	4282      	cmp	r2, r0
  40164e:	d106      	bne.n	40165e <udc_update_iface_desc+0x3a>
  401650:	78da      	ldrb	r2, [r3, #3]
  401652:	428a      	cmp	r2, r1
  401654:	d103      	bne.n	40165e <udc_update_iface_desc+0x3a>
  401656:	4a0c      	ldr	r2, [pc, #48]	; (401688 <udc_update_iface_desc+0x64>)
  401658:	6013      	str	r3, [r2, #0]
  40165a:	2001      	movs	r0, #1
  40165c:	e00c      	b.n	401678 <udc_update_iface_desc+0x54>
  40165e:	781a      	ldrb	r2, [r3, #0]
  401660:	4413      	add	r3, r2
  401662:	42a3      	cmp	r3, r4
  401664:	d3ee      	bcc.n	401644 <udc_update_iface_desc+0x20>
  401666:	4a08      	ldr	r2, [pc, #32]	; (401688 <udc_update_iface_desc+0x64>)
  401668:	6013      	str	r3, [r2, #0]
  40166a:	2000      	movs	r0, #0
  40166c:	e004      	b.n	401678 <udc_update_iface_desc+0x54>
  40166e:	2000      	movs	r0, #0
  401670:	4770      	bx	lr
  401672:	2000      	movs	r0, #0
  401674:	4770      	bx	lr
  401676:	2000      	movs	r0, #0
  401678:	f85d 4b04 	ldr.w	r4, [sp], #4
  40167c:	4770      	bx	lr
  40167e:	bf00      	nop
  401680:	20000b58 	.word	0x20000b58
  401684:	20000b4c 	.word	0x20000b4c
  401688:	20000b5c 	.word	0x20000b5c

0040168c <udc_iface_disable>:
  40168c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  401690:	4604      	mov	r4, r0
  401692:	2100      	movs	r1, #0
  401694:	4b12      	ldr	r3, [pc, #72]	; (4016e0 <udc_iface_disable+0x54>)
  401696:	4798      	blx	r3
  401698:	4680      	mov	r8, r0
  40169a:	b1e8      	cbz	r0, 4016d8 <udc_iface_disable+0x4c>
  40169c:	4b11      	ldr	r3, [pc, #68]	; (4016e4 <udc_iface_disable+0x58>)
  40169e:	681b      	ldr	r3, [r3, #0]
  4016a0:	685b      	ldr	r3, [r3, #4]
  4016a2:	f853 9024 	ldr.w	r9, [r3, r4, lsl #2]
  4016a6:	f8d9 300c 	ldr.w	r3, [r9, #12]
  4016aa:	4798      	blx	r3
  4016ac:	4601      	mov	r1, r0
  4016ae:	4620      	mov	r0, r4
  4016b0:	4b0b      	ldr	r3, [pc, #44]	; (4016e0 <udc_iface_disable+0x54>)
  4016b2:	4798      	blx	r3
  4016b4:	4680      	mov	r8, r0
  4016b6:	b178      	cbz	r0, 4016d8 <udc_iface_disable+0x4c>
  4016b8:	4b0b      	ldr	r3, [pc, #44]	; (4016e8 <udc_iface_disable+0x5c>)
  4016ba:	681c      	ldr	r4, [r3, #0]
  4016bc:	2605      	movs	r6, #5
  4016be:	4d0b      	ldr	r5, [pc, #44]	; (4016ec <udc_iface_disable+0x60>)
  4016c0:	4f0b      	ldr	r7, [pc, #44]	; (4016f0 <udc_iface_disable+0x64>)
  4016c2:	4620      	mov	r0, r4
  4016c4:	4631      	mov	r1, r6
  4016c6:	47a8      	blx	r5
  4016c8:	4604      	mov	r4, r0
  4016ca:	b110      	cbz	r0, 4016d2 <udc_iface_disable+0x46>
  4016cc:	7880      	ldrb	r0, [r0, #2]
  4016ce:	47b8      	blx	r7
  4016d0:	e7f7      	b.n	4016c2 <udc_iface_disable+0x36>
  4016d2:	f8d9 3004 	ldr.w	r3, [r9, #4]
  4016d6:	4798      	blx	r3
  4016d8:	4640      	mov	r0, r8
  4016da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  4016de:	bf00      	nop
  4016e0:	00401625 	.word	0x00401625
  4016e4:	20000b4c 	.word	0x20000b4c
  4016e8:	20000b5c 	.word	0x20000b5c
  4016ec:	004015c9 	.word	0x004015c9
  4016f0:	00403639 	.word	0x00403639

004016f4 <udc_iface_enable>:
  4016f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4016f8:	4680      	mov	r8, r0
  4016fa:	4b10      	ldr	r3, [pc, #64]	; (40173c <udc_iface_enable+0x48>)
  4016fc:	4798      	blx	r3
  4016fe:	4603      	mov	r3, r0
  401700:	b1c8      	cbz	r0, 401736 <udc_iface_enable+0x42>
  401702:	4b0f      	ldr	r3, [pc, #60]	; (401740 <udc_iface_enable+0x4c>)
  401704:	681c      	ldr	r4, [r3, #0]
  401706:	2605      	movs	r6, #5
  401708:	4d0e      	ldr	r5, [pc, #56]	; (401744 <udc_iface_enable+0x50>)
  40170a:	4f0f      	ldr	r7, [pc, #60]	; (401748 <udc_iface_enable+0x54>)
  40170c:	4620      	mov	r0, r4
  40170e:	4631      	mov	r1, r6
  401710:	47a8      	blx	r5
  401712:	4604      	mov	r4, r0
  401714:	b138      	cbz	r0, 401726 <udc_iface_enable+0x32>
  401716:	7880      	ldrb	r0, [r0, #2]
  401718:	78e1      	ldrb	r1, [r4, #3]
  40171a:	88a2      	ldrh	r2, [r4, #4]
  40171c:	47b8      	blx	r7
  40171e:	4603      	mov	r3, r0
  401720:	2800      	cmp	r0, #0
  401722:	d1f3      	bne.n	40170c <udc_iface_enable+0x18>
  401724:	e007      	b.n	401736 <udc_iface_enable+0x42>
  401726:	4b09      	ldr	r3, [pc, #36]	; (40174c <udc_iface_enable+0x58>)
  401728:	681b      	ldr	r3, [r3, #0]
  40172a:	685b      	ldr	r3, [r3, #4]
  40172c:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
  401730:	681b      	ldr	r3, [r3, #0]
  401732:	4798      	blx	r3
  401734:	4603      	mov	r3, r0
  401736:	4618      	mov	r0, r3
  401738:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40173c:	00401625 	.word	0x00401625
  401740:	20000b5c 	.word	0x20000b5c
  401744:	004015c9 	.word	0x004015c9
  401748:	00403531 	.word	0x00403531
  40174c:	20000b4c 	.word	0x20000b4c

00401750 <udc_start>:
  401750:	b508      	push	{r3, lr}
  401752:	4b01      	ldr	r3, [pc, #4]	; (401758 <udc_start+0x8>)
  401754:	4798      	blx	r3
  401756:	bd08      	pop	{r3, pc}
  401758:	004033f5 	.word	0x004033f5

0040175c <udc_reset>:
  40175c:	b570      	push	{r4, r5, r6, lr}
  40175e:	4b0d      	ldr	r3, [pc, #52]	; (401794 <udc_reset+0x38>)
  401760:	781b      	ldrb	r3, [r3, #0]
  401762:	b183      	cbz	r3, 401786 <udc_reset+0x2a>
  401764:	4b0c      	ldr	r3, [pc, #48]	; (401798 <udc_reset+0x3c>)
  401766:	681b      	ldr	r3, [r3, #0]
  401768:	681b      	ldr	r3, [r3, #0]
  40176a:	791b      	ldrb	r3, [r3, #4]
  40176c:	b15b      	cbz	r3, 401786 <udc_reset+0x2a>
  40176e:	2400      	movs	r4, #0
  401770:	4e0a      	ldr	r6, [pc, #40]	; (40179c <udc_reset+0x40>)
  401772:	4d09      	ldr	r5, [pc, #36]	; (401798 <udc_reset+0x3c>)
  401774:	4620      	mov	r0, r4
  401776:	47b0      	blx	r6
  401778:	3401      	adds	r4, #1
  40177a:	b2e4      	uxtb	r4, r4
  40177c:	682b      	ldr	r3, [r5, #0]
  40177e:	681b      	ldr	r3, [r3, #0]
  401780:	791b      	ldrb	r3, [r3, #4]
  401782:	42a3      	cmp	r3, r4
  401784:	d8f6      	bhi.n	401774 <udc_reset+0x18>
  401786:	2200      	movs	r2, #0
  401788:	4b02      	ldr	r3, [pc, #8]	; (401794 <udc_reset+0x38>)
  40178a:	701a      	strb	r2, [r3, #0]
  40178c:	2201      	movs	r2, #1
  40178e:	4b04      	ldr	r3, [pc, #16]	; (4017a0 <udc_reset+0x44>)
  401790:	801a      	strh	r2, [r3, #0]
  401792:	bd70      	pop	{r4, r5, r6, pc}
  401794:	20000b58 	.word	0x20000b58
  401798:	20000b4c 	.word	0x20000b4c
  40179c:	0040168d 	.word	0x0040168d
  4017a0:	20000b56 	.word	0x20000b56

004017a4 <udc_sof_notify>:
  4017a4:	b538      	push	{r3, r4, r5, lr}
  4017a6:	4b0c      	ldr	r3, [pc, #48]	; (4017d8 <udc_sof_notify+0x34>)
  4017a8:	781b      	ldrb	r3, [r3, #0]
  4017aa:	b19b      	cbz	r3, 4017d4 <udc_sof_notify+0x30>
  4017ac:	4b0b      	ldr	r3, [pc, #44]	; (4017dc <udc_sof_notify+0x38>)
  4017ae:	681b      	ldr	r3, [r3, #0]
  4017b0:	681a      	ldr	r2, [r3, #0]
  4017b2:	7912      	ldrb	r2, [r2, #4]
  4017b4:	b172      	cbz	r2, 4017d4 <udc_sof_notify+0x30>
  4017b6:	2400      	movs	r4, #0
  4017b8:	4d08      	ldr	r5, [pc, #32]	; (4017dc <udc_sof_notify+0x38>)
  4017ba:	685b      	ldr	r3, [r3, #4]
  4017bc:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
  4017c0:	691b      	ldr	r3, [r3, #16]
  4017c2:	b103      	cbz	r3, 4017c6 <udc_sof_notify+0x22>
  4017c4:	4798      	blx	r3
  4017c6:	3401      	adds	r4, #1
  4017c8:	b2e4      	uxtb	r4, r4
  4017ca:	682b      	ldr	r3, [r5, #0]
  4017cc:	681a      	ldr	r2, [r3, #0]
  4017ce:	7912      	ldrb	r2, [r2, #4]
  4017d0:	42a2      	cmp	r2, r4
  4017d2:	d8f2      	bhi.n	4017ba <udc_sof_notify+0x16>
  4017d4:	bd38      	pop	{r3, r4, r5, pc}
  4017d6:	bf00      	nop
  4017d8:	20000b58 	.word	0x20000b58
  4017dc:	20000b4c 	.word	0x20000b4c

004017e0 <udc_process_setup>:
  4017e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4017e2:	4b90      	ldr	r3, [pc, #576]	; (401a24 <udc_process_setup+0x244>)
  4017e4:	2200      	movs	r2, #0
  4017e6:	819a      	strh	r2, [r3, #12]
  4017e8:	611a      	str	r2, [r3, #16]
  4017ea:	615a      	str	r2, [r3, #20]
  4017ec:	781b      	ldrb	r3, [r3, #0]
  4017ee:	f013 0f80 	tst.w	r3, #128	; 0x80
  4017f2:	f000 81d2 	beq.w	401b9a <udc_process_setup+0x3ba>
  4017f6:	4a8b      	ldr	r2, [pc, #556]	; (401a24 <udc_process_setup+0x244>)
  4017f8:	88d2      	ldrh	r2, [r2, #6]
  4017fa:	2a00      	cmp	r2, #0
  4017fc:	f040 81d1 	bne.w	401ba2 <udc_process_setup+0x3c2>
  401800:	e1c7      	b.n	401b92 <udc_process_setup+0x3b2>
  401802:	f013 031f 	ands.w	r3, r3, #31
  401806:	d165      	bne.n	4018d4 <udc_process_setup+0xf4>
  401808:	4986      	ldr	r1, [pc, #536]	; (401a24 <udc_process_setup+0x244>)
  40180a:	7849      	ldrb	r1, [r1, #1]
  40180c:	2906      	cmp	r1, #6
  40180e:	d00b      	beq.n	401828 <udc_process_setup+0x48>
  401810:	2908      	cmp	r1, #8
  401812:	d057      	beq.n	4018c4 <udc_process_setup+0xe4>
  401814:	2900      	cmp	r1, #0
  401816:	d15d      	bne.n	4018d4 <udc_process_setup+0xf4>
  401818:	2a02      	cmp	r2, #2
  40181a:	f040 816a 	bne.w	401af2 <udc_process_setup+0x312>
  40181e:	4882      	ldr	r0, [pc, #520]	; (401a28 <udc_process_setup+0x248>)
  401820:	2102      	movs	r1, #2
  401822:	4b82      	ldr	r3, [pc, #520]	; (401a2c <udc_process_setup+0x24c>)
  401824:	4798      	blx	r3
  401826:	e1c0      	b.n	401baa <udc_process_setup+0x3ca>
  401828:	4b7e      	ldr	r3, [pc, #504]	; (401a24 <udc_process_setup+0x244>)
  40182a:	885a      	ldrh	r2, [r3, #2]
  40182c:	0a13      	lsrs	r3, r2, #8
  40182e:	3b01      	subs	r3, #1
  401830:	2b0e      	cmp	r3, #14
  401832:	f200 8155 	bhi.w	401ae0 <udc_process_setup+0x300>
  401836:	e8df f013 	tbh	[pc, r3, lsl #1]
  40183a:	000f      	.short	0x000f
  40183c:	00340016 	.word	0x00340016
  401840:	01530153 	.word	0x01530153
  401844:	01530153 	.word	0x01530153
  401848:	01530153 	.word	0x01530153
  40184c:	01530153 	.word	0x01530153
  401850:	01530153 	.word	0x01530153
  401854:	002a0153 	.word	0x002a0153
  401858:	4b75      	ldr	r3, [pc, #468]	; (401a30 <udc_process_setup+0x250>)
  40185a:	681b      	ldr	r3, [r3, #0]
  40185c:	4618      	mov	r0, r3
  40185e:	7819      	ldrb	r1, [r3, #0]
  401860:	4b72      	ldr	r3, [pc, #456]	; (401a2c <udc_process_setup+0x24c>)
  401862:	4798      	blx	r3
  401864:	e025      	b.n	4018b2 <udc_process_setup+0xd2>
  401866:	b2d2      	uxtb	r2, r2
  401868:	4b71      	ldr	r3, [pc, #452]	; (401a30 <udc_process_setup+0x250>)
  40186a:	681b      	ldr	r3, [r3, #0]
  40186c:	7c5b      	ldrb	r3, [r3, #17]
  40186e:	4293      	cmp	r3, r2
  401870:	f240 813f 	bls.w	401af2 <udc_process_setup+0x312>
  401874:	4b6e      	ldr	r3, [pc, #440]	; (401a30 <udc_process_setup+0x250>)
  401876:	685b      	ldr	r3, [r3, #4]
  401878:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
  40187c:	4618      	mov	r0, r3
  40187e:	8859      	ldrh	r1, [r3, #2]
  401880:	4b6a      	ldr	r3, [pc, #424]	; (401a2c <udc_process_setup+0x24c>)
  401882:	4798      	blx	r3
  401884:	4b67      	ldr	r3, [pc, #412]	; (401a24 <udc_process_setup+0x244>)
  401886:	689b      	ldr	r3, [r3, #8]
  401888:	2202      	movs	r2, #2
  40188a:	705a      	strb	r2, [r3, #1]
  40188c:	e011      	b.n	4018b2 <udc_process_setup+0xd2>
  40188e:	4b68      	ldr	r3, [pc, #416]	; (401a30 <udc_process_setup+0x250>)
  401890:	689b      	ldr	r3, [r3, #8]
  401892:	2b00      	cmp	r3, #0
  401894:	f000 812d 	beq.w	401af2 <udc_process_setup+0x312>
  401898:	4618      	mov	r0, r3
  40189a:	8859      	ldrh	r1, [r3, #2]
  40189c:	4b63      	ldr	r3, [pc, #396]	; (401a2c <udc_process_setup+0x24c>)
  40189e:	4798      	blx	r3
  4018a0:	e007      	b.n	4018b2 <udc_process_setup+0xd2>
  4018a2:	f012 0fff 	tst.w	r2, #255	; 0xff
  4018a6:	f040 8124 	bne.w	401af2 <udc_process_setup+0x312>
  4018aa:	4862      	ldr	r0, [pc, #392]	; (401a34 <udc_process_setup+0x254>)
  4018ac:	2104      	movs	r1, #4
  4018ae:	4b5f      	ldr	r3, [pc, #380]	; (401a2c <udc_process_setup+0x24c>)
  4018b0:	4798      	blx	r3
  4018b2:	4b5c      	ldr	r3, [pc, #368]	; (401a24 <udc_process_setup+0x244>)
  4018b4:	88da      	ldrh	r2, [r3, #6]
  4018b6:	899b      	ldrh	r3, [r3, #12]
  4018b8:	4293      	cmp	r3, r2
  4018ba:	f240 8176 	bls.w	401baa <udc_process_setup+0x3ca>
  4018be:	4b59      	ldr	r3, [pc, #356]	; (401a24 <udc_process_setup+0x244>)
  4018c0:	819a      	strh	r2, [r3, #12]
  4018c2:	e172      	b.n	401baa <udc_process_setup+0x3ca>
  4018c4:	2a01      	cmp	r2, #1
  4018c6:	f040 8114 	bne.w	401af2 <udc_process_setup+0x312>
  4018ca:	485b      	ldr	r0, [pc, #364]	; (401a38 <udc_process_setup+0x258>)
  4018cc:	2101      	movs	r1, #1
  4018ce:	4b57      	ldr	r3, [pc, #348]	; (401a2c <udc_process_setup+0x24c>)
  4018d0:	4798      	blx	r3
  4018d2:	e16a      	b.n	401baa <udc_process_setup+0x3ca>
  4018d4:	2b01      	cmp	r3, #1
  4018d6:	d127      	bne.n	401928 <udc_process_setup+0x148>
  4018d8:	4952      	ldr	r1, [pc, #328]	; (401a24 <udc_process_setup+0x244>)
  4018da:	7849      	ldrb	r1, [r1, #1]
  4018dc:	290a      	cmp	r1, #10
  4018de:	d123      	bne.n	401928 <udc_process_setup+0x148>
  4018e0:	2a01      	cmp	r2, #1
  4018e2:	f040 8106 	bne.w	401af2 <udc_process_setup+0x312>
  4018e6:	4b54      	ldr	r3, [pc, #336]	; (401a38 <udc_process_setup+0x258>)
  4018e8:	781b      	ldrb	r3, [r3, #0]
  4018ea:	2b00      	cmp	r3, #0
  4018ec:	f000 8101 	beq.w	401af2 <udc_process_setup+0x312>
  4018f0:	4b4c      	ldr	r3, [pc, #304]	; (401a24 <udc_process_setup+0x244>)
  4018f2:	791c      	ldrb	r4, [r3, #4]
  4018f4:	4b51      	ldr	r3, [pc, #324]	; (401a3c <udc_process_setup+0x25c>)
  4018f6:	681d      	ldr	r5, [r3, #0]
  4018f8:	682b      	ldr	r3, [r5, #0]
  4018fa:	791b      	ldrb	r3, [r3, #4]
  4018fc:	42a3      	cmp	r3, r4
  4018fe:	f240 80f8 	bls.w	401af2 <udc_process_setup+0x312>
  401902:	4620      	mov	r0, r4
  401904:	2100      	movs	r1, #0
  401906:	4b4e      	ldr	r3, [pc, #312]	; (401a40 <udc_process_setup+0x260>)
  401908:	4798      	blx	r3
  40190a:	2800      	cmp	r0, #0
  40190c:	f000 80f1 	beq.w	401af2 <udc_process_setup+0x312>
  401910:	686b      	ldr	r3, [r5, #4]
  401912:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
  401916:	68db      	ldr	r3, [r3, #12]
  401918:	4798      	blx	r3
  40191a:	4b4a      	ldr	r3, [pc, #296]	; (401a44 <udc_process_setup+0x264>)
  40191c:	7018      	strb	r0, [r3, #0]
  40191e:	4618      	mov	r0, r3
  401920:	2101      	movs	r1, #1
  401922:	4b42      	ldr	r3, [pc, #264]	; (401a2c <udc_process_setup+0x24c>)
  401924:	4798      	blx	r3
  401926:	e140      	b.n	401baa <udc_process_setup+0x3ca>
  401928:	2b02      	cmp	r3, #2
  40192a:	f040 80e2 	bne.w	401af2 <udc_process_setup+0x312>
  40192e:	4b3d      	ldr	r3, [pc, #244]	; (401a24 <udc_process_setup+0x244>)
  401930:	785b      	ldrb	r3, [r3, #1]
  401932:	2b00      	cmp	r3, #0
  401934:	f040 80d6 	bne.w	401ae4 <udc_process_setup+0x304>
  401938:	2a02      	cmp	r2, #2
  40193a:	f040 80da 	bne.w	401af2 <udc_process_setup+0x312>
  40193e:	4b39      	ldr	r3, [pc, #228]	; (401a24 <udc_process_setup+0x244>)
  401940:	7918      	ldrb	r0, [r3, #4]
  401942:	4b41      	ldr	r3, [pc, #260]	; (401a48 <udc_process_setup+0x268>)
  401944:	4798      	blx	r3
  401946:	4b41      	ldr	r3, [pc, #260]	; (401a4c <udc_process_setup+0x26c>)
  401948:	8018      	strh	r0, [r3, #0]
  40194a:	4618      	mov	r0, r3
  40194c:	2102      	movs	r1, #2
  40194e:	4b37      	ldr	r3, [pc, #220]	; (401a2c <udc_process_setup+0x24c>)
  401950:	4798      	blx	r3
  401952:	e12a      	b.n	401baa <udc_process_setup+0x3ca>
  401954:	f013 031f 	ands.w	r3, r3, #31
  401958:	f040 8082 	bne.w	401a60 <udc_process_setup+0x280>
  40195c:	4a31      	ldr	r2, [pc, #196]	; (401a24 <udc_process_setup+0x244>)
  40195e:	7852      	ldrb	r2, [r2, #1]
  401960:	3a01      	subs	r2, #1
  401962:	2a08      	cmp	r2, #8
  401964:	d87c      	bhi.n	401a60 <udc_process_setup+0x280>
  401966:	e8df f012 	tbh	[pc, r2, lsl #1]
  40196a:	0012      	.short	0x0012
  40196c:	00bf007b 	.word	0x00bf007b
  401970:	0009007b 	.word	0x0009007b
  401974:	007b007b 	.word	0x007b007b
  401978:	0022007b 	.word	0x0022007b
  40197c:	4b29      	ldr	r3, [pc, #164]	; (401a24 <udc_process_setup+0x244>)
  40197e:	88db      	ldrh	r3, [r3, #6]
  401980:	2b00      	cmp	r3, #0
  401982:	f040 80b6 	bne.w	401af2 <udc_process_setup+0x312>
  401986:	4a32      	ldr	r2, [pc, #200]	; (401a50 <udc_process_setup+0x270>)
  401988:	4b26      	ldr	r3, [pc, #152]	; (401a24 <udc_process_setup+0x244>)
  40198a:	611a      	str	r2, [r3, #16]
  40198c:	e10d      	b.n	401baa <udc_process_setup+0x3ca>
  40198e:	4b25      	ldr	r3, [pc, #148]	; (401a24 <udc_process_setup+0x244>)
  401990:	88db      	ldrh	r3, [r3, #6]
  401992:	2b00      	cmp	r3, #0
  401994:	f040 80ad 	bne.w	401af2 <udc_process_setup+0x312>
  401998:	4b22      	ldr	r3, [pc, #136]	; (401a24 <udc_process_setup+0x244>)
  40199a:	885b      	ldrh	r3, [r3, #2]
  40199c:	2b01      	cmp	r3, #1
  40199e:	f040 80a8 	bne.w	401af2 <udc_process_setup+0x312>
  4019a2:	4a21      	ldr	r2, [pc, #132]	; (401a28 <udc_process_setup+0x248>)
  4019a4:	8813      	ldrh	r3, [r2, #0]
  4019a6:	f023 0302 	bic.w	r3, r3, #2
  4019aa:	8013      	strh	r3, [r2, #0]
  4019ac:	e0fd      	b.n	401baa <udc_process_setup+0x3ca>
  4019ae:	4b1d      	ldr	r3, [pc, #116]	; (401a24 <udc_process_setup+0x244>)
  4019b0:	88db      	ldrh	r3, [r3, #6]
  4019b2:	2b00      	cmp	r3, #0
  4019b4:	f040 809d 	bne.w	401af2 <udc_process_setup+0x312>
  4019b8:	4b26      	ldr	r3, [pc, #152]	; (401a54 <udc_process_setup+0x274>)
  4019ba:	4798      	blx	r3
  4019bc:	2800      	cmp	r0, #0
  4019be:	f000 8098 	beq.w	401af2 <udc_process_setup+0x312>
  4019c2:	4b18      	ldr	r3, [pc, #96]	; (401a24 <udc_process_setup+0x244>)
  4019c4:	789a      	ldrb	r2, [r3, #2]
  4019c6:	4b1a      	ldr	r3, [pc, #104]	; (401a30 <udc_process_setup+0x250>)
  4019c8:	681b      	ldr	r3, [r3, #0]
  4019ca:	7c5b      	ldrb	r3, [r3, #17]
  4019cc:	429a      	cmp	r2, r3
  4019ce:	f300 8090 	bgt.w	401af2 <udc_process_setup+0x312>
  4019d2:	4b21      	ldr	r3, [pc, #132]	; (401a58 <udc_process_setup+0x278>)
  4019d4:	4798      	blx	r3
  4019d6:	4b13      	ldr	r3, [pc, #76]	; (401a24 <udc_process_setup+0x244>)
  4019d8:	789b      	ldrb	r3, [r3, #2]
  4019da:	4a17      	ldr	r2, [pc, #92]	; (401a38 <udc_process_setup+0x258>)
  4019dc:	7013      	strb	r3, [r2, #0]
  4019de:	2b00      	cmp	r3, #0
  4019e0:	f000 80e3 	beq.w	401baa <udc_process_setup+0x3ca>
  4019e4:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
  4019e8:	3b01      	subs	r3, #1
  4019ea:	4a11      	ldr	r2, [pc, #68]	; (401a30 <udc_process_setup+0x250>)
  4019ec:	6852      	ldr	r2, [r2, #4]
  4019ee:	eb02 00c3 	add.w	r0, r2, r3, lsl #3
  4019f2:	4912      	ldr	r1, [pc, #72]	; (401a3c <udc_process_setup+0x25c>)
  4019f4:	6008      	str	r0, [r1, #0]
  4019f6:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
  4019fa:	791b      	ldrb	r3, [r3, #4]
  4019fc:	2b00      	cmp	r3, #0
  4019fe:	f000 80d4 	beq.w	401baa <udc_process_setup+0x3ca>
  401a02:	2400      	movs	r4, #0
  401a04:	4626      	mov	r6, r4
  401a06:	4d15      	ldr	r5, [pc, #84]	; (401a5c <udc_process_setup+0x27c>)
  401a08:	460f      	mov	r7, r1
  401a0a:	4620      	mov	r0, r4
  401a0c:	4631      	mov	r1, r6
  401a0e:	47a8      	blx	r5
  401a10:	2800      	cmp	r0, #0
  401a12:	d06e      	beq.n	401af2 <udc_process_setup+0x312>
  401a14:	3401      	adds	r4, #1
  401a16:	b2e4      	uxtb	r4, r4
  401a18:	683b      	ldr	r3, [r7, #0]
  401a1a:	681b      	ldr	r3, [r3, #0]
  401a1c:	791b      	ldrb	r3, [r3, #4]
  401a1e:	42a3      	cmp	r3, r4
  401a20:	d8f3      	bhi.n	401a0a <udc_process_setup+0x22a>
  401a22:	e0c2      	b.n	401baa <udc_process_setup+0x3ca>
  401a24:	2000b0b4 	.word	0x2000b0b4
  401a28:	20000b56 	.word	0x20000b56
  401a2c:	00403525 	.word	0x00403525
  401a30:	20000028 	.word	0x20000028
  401a34:	2000009c 	.word	0x2000009c
  401a38:	20000b58 	.word	0x20000b58
  401a3c:	20000b4c 	.word	0x20000b4c
  401a40:	00401625 	.word	0x00401625
  401a44:	20000b54 	.word	0x20000b54
  401a48:	004036a1 	.word	0x004036a1
  401a4c:	20000b50 	.word	0x20000b50
  401a50:	0040160d 	.word	0x0040160d
  401a54:	004034f5 	.word	0x004034f5
  401a58:	0040175d 	.word	0x0040175d
  401a5c:	004016f5 	.word	0x004016f5
  401a60:	2b01      	cmp	r3, #1
  401a62:	d119      	bne.n	401a98 <udc_process_setup+0x2b8>
  401a64:	4a52      	ldr	r2, [pc, #328]	; (401bb0 <udc_process_setup+0x3d0>)
  401a66:	7852      	ldrb	r2, [r2, #1]
  401a68:	2a0b      	cmp	r2, #11
  401a6a:	d115      	bne.n	401a98 <udc_process_setup+0x2b8>
  401a6c:	4b50      	ldr	r3, [pc, #320]	; (401bb0 <udc_process_setup+0x3d0>)
  401a6e:	88db      	ldrh	r3, [r3, #6]
  401a70:	2b00      	cmp	r3, #0
  401a72:	d13e      	bne.n	401af2 <udc_process_setup+0x312>
  401a74:	4b4f      	ldr	r3, [pc, #316]	; (401bb4 <udc_process_setup+0x3d4>)
  401a76:	781b      	ldrb	r3, [r3, #0]
  401a78:	2b00      	cmp	r3, #0
  401a7a:	d03a      	beq.n	401af2 <udc_process_setup+0x312>
  401a7c:	4b4c      	ldr	r3, [pc, #304]	; (401bb0 <udc_process_setup+0x3d0>)
  401a7e:	791c      	ldrb	r4, [r3, #4]
  401a80:	885d      	ldrh	r5, [r3, #2]
  401a82:	4620      	mov	r0, r4
  401a84:	4b4c      	ldr	r3, [pc, #304]	; (401bb8 <udc_process_setup+0x3d8>)
  401a86:	4798      	blx	r3
  401a88:	2800      	cmp	r0, #0
  401a8a:	d032      	beq.n	401af2 <udc_process_setup+0x312>
  401a8c:	4620      	mov	r0, r4
  401a8e:	b2e9      	uxtb	r1, r5
  401a90:	4b4a      	ldr	r3, [pc, #296]	; (401bbc <udc_process_setup+0x3dc>)
  401a92:	4798      	blx	r3
  401a94:	4603      	mov	r3, r0
  401a96:	e02a      	b.n	401aee <udc_process_setup+0x30e>
  401a98:	2b02      	cmp	r3, #2
  401a9a:	d12a      	bne.n	401af2 <udc_process_setup+0x312>
  401a9c:	4b44      	ldr	r3, [pc, #272]	; (401bb0 <udc_process_setup+0x3d0>)
  401a9e:	785b      	ldrb	r3, [r3, #1]
  401aa0:	2b01      	cmp	r3, #1
  401aa2:	d002      	beq.n	401aaa <udc_process_setup+0x2ca>
  401aa4:	2b03      	cmp	r3, #3
  401aa6:	d00c      	beq.n	401ac2 <udc_process_setup+0x2e2>
  401aa8:	e020      	b.n	401aec <udc_process_setup+0x30c>
  401aaa:	4b41      	ldr	r3, [pc, #260]	; (401bb0 <udc_process_setup+0x3d0>)
  401aac:	88db      	ldrh	r3, [r3, #6]
  401aae:	bb03      	cbnz	r3, 401af2 <udc_process_setup+0x312>
  401ab0:	4b3f      	ldr	r3, [pc, #252]	; (401bb0 <udc_process_setup+0x3d0>)
  401ab2:	885b      	ldrh	r3, [r3, #2]
  401ab4:	b9eb      	cbnz	r3, 401af2 <udc_process_setup+0x312>
  401ab6:	4b3e      	ldr	r3, [pc, #248]	; (401bb0 <udc_process_setup+0x3d0>)
  401ab8:	7918      	ldrb	r0, [r3, #4]
  401aba:	4b41      	ldr	r3, [pc, #260]	; (401bc0 <udc_process_setup+0x3e0>)
  401abc:	4798      	blx	r3
  401abe:	4603      	mov	r3, r0
  401ac0:	e015      	b.n	401aee <udc_process_setup+0x30e>
  401ac2:	4b3b      	ldr	r3, [pc, #236]	; (401bb0 <udc_process_setup+0x3d0>)
  401ac4:	88db      	ldrh	r3, [r3, #6]
  401ac6:	b9a3      	cbnz	r3, 401af2 <udc_process_setup+0x312>
  401ac8:	4b39      	ldr	r3, [pc, #228]	; (401bb0 <udc_process_setup+0x3d0>)
  401aca:	885b      	ldrh	r3, [r3, #2]
  401acc:	b98b      	cbnz	r3, 401af2 <udc_process_setup+0x312>
  401ace:	4c38      	ldr	r4, [pc, #224]	; (401bb0 <udc_process_setup+0x3d0>)
  401ad0:	7920      	ldrb	r0, [r4, #4]
  401ad2:	4b3c      	ldr	r3, [pc, #240]	; (401bc4 <udc_process_setup+0x3e4>)
  401ad4:	4798      	blx	r3
  401ad6:	7920      	ldrb	r0, [r4, #4]
  401ad8:	4b3b      	ldr	r3, [pc, #236]	; (401bc8 <udc_process_setup+0x3e8>)
  401ada:	4798      	blx	r3
  401adc:	4603      	mov	r3, r0
  401ade:	e006      	b.n	401aee <udc_process_setup+0x30e>
  401ae0:	2300      	movs	r3, #0
  401ae2:	e004      	b.n	401aee <udc_process_setup+0x30e>
  401ae4:	2300      	movs	r3, #0
  401ae6:	e002      	b.n	401aee <udc_process_setup+0x30e>
  401ae8:	2300      	movs	r3, #0
  401aea:	e000      	b.n	401aee <udc_process_setup+0x30e>
  401aec:	2300      	movs	r3, #0
  401aee:	2b00      	cmp	r3, #0
  401af0:	d15c      	bne.n	401bac <udc_process_setup+0x3cc>
  401af2:	4b2f      	ldr	r3, [pc, #188]	; (401bb0 <udc_process_setup+0x3d0>)
  401af4:	781b      	ldrb	r3, [r3, #0]
  401af6:	f003 031f 	and.w	r3, r3, #31
  401afa:	2b01      	cmp	r3, #1
  401afc:	d11e      	bne.n	401b3c <udc_process_setup+0x35c>
  401afe:	4b2d      	ldr	r3, [pc, #180]	; (401bb4 <udc_process_setup+0x3d4>)
  401b00:	781b      	ldrb	r3, [r3, #0]
  401b02:	b1db      	cbz	r3, 401b3c <udc_process_setup+0x35c>
  401b04:	4b2a      	ldr	r3, [pc, #168]	; (401bb0 <udc_process_setup+0x3d0>)
  401b06:	791c      	ldrb	r4, [r3, #4]
  401b08:	4b30      	ldr	r3, [pc, #192]	; (401bcc <udc_process_setup+0x3ec>)
  401b0a:	681d      	ldr	r5, [r3, #0]
  401b0c:	682b      	ldr	r3, [r5, #0]
  401b0e:	791b      	ldrb	r3, [r3, #4]
  401b10:	42a3      	cmp	r3, r4
  401b12:	d913      	bls.n	401b3c <udc_process_setup+0x35c>
  401b14:	4620      	mov	r0, r4
  401b16:	2100      	movs	r1, #0
  401b18:	4b2d      	ldr	r3, [pc, #180]	; (401bd0 <udc_process_setup+0x3f0>)
  401b1a:	4798      	blx	r3
  401b1c:	b170      	cbz	r0, 401b3c <udc_process_setup+0x35c>
  401b1e:	686b      	ldr	r3, [r5, #4]
  401b20:	f853 5024 	ldr.w	r5, [r3, r4, lsl #2]
  401b24:	68eb      	ldr	r3, [r5, #12]
  401b26:	4798      	blx	r3
  401b28:	4601      	mov	r1, r0
  401b2a:	4620      	mov	r0, r4
  401b2c:	4b28      	ldr	r3, [pc, #160]	; (401bd0 <udc_process_setup+0x3f0>)
  401b2e:	4798      	blx	r3
  401b30:	b120      	cbz	r0, 401b3c <udc_process_setup+0x35c>
  401b32:	68ab      	ldr	r3, [r5, #8]
  401b34:	4798      	blx	r3
  401b36:	4603      	mov	r3, r0
  401b38:	2800      	cmp	r0, #0
  401b3a:	d137      	bne.n	401bac <udc_process_setup+0x3cc>
  401b3c:	4b1c      	ldr	r3, [pc, #112]	; (401bb0 <udc_process_setup+0x3d0>)
  401b3e:	781b      	ldrb	r3, [r3, #0]
  401b40:	f003 031f 	and.w	r3, r3, #31
  401b44:	2b02      	cmp	r3, #2
  401b46:	d126      	bne.n	401b96 <udc_process_setup+0x3b6>
  401b48:	4b1a      	ldr	r3, [pc, #104]	; (401bb4 <udc_process_setup+0x3d4>)
  401b4a:	781b      	ldrb	r3, [r3, #0]
  401b4c:	b1eb      	cbz	r3, 401b8a <udc_process_setup+0x3aa>
  401b4e:	4b1f      	ldr	r3, [pc, #124]	; (401bcc <udc_process_setup+0x3ec>)
  401b50:	681a      	ldr	r2, [r3, #0]
  401b52:	6813      	ldr	r3, [r2, #0]
  401b54:	791b      	ldrb	r3, [r3, #4]
  401b56:	b1d3      	cbz	r3, 401b8e <udc_process_setup+0x3ae>
  401b58:	2400      	movs	r4, #0
  401b5a:	4e1d      	ldr	r6, [pc, #116]	; (401bd0 <udc_process_setup+0x3f0>)
  401b5c:	4f1b      	ldr	r7, [pc, #108]	; (401bcc <udc_process_setup+0x3ec>)
  401b5e:	6853      	ldr	r3, [r2, #4]
  401b60:	f853 5024 	ldr.w	r5, [r3, r4, lsl #2]
  401b64:	68eb      	ldr	r3, [r5, #12]
  401b66:	4798      	blx	r3
  401b68:	4601      	mov	r1, r0
  401b6a:	4620      	mov	r0, r4
  401b6c:	47b0      	blx	r6
  401b6e:	4603      	mov	r3, r0
  401b70:	b1e0      	cbz	r0, 401bac <udc_process_setup+0x3cc>
  401b72:	68ab      	ldr	r3, [r5, #8]
  401b74:	4798      	blx	r3
  401b76:	4603      	mov	r3, r0
  401b78:	b9c0      	cbnz	r0, 401bac <udc_process_setup+0x3cc>
  401b7a:	3401      	adds	r4, #1
  401b7c:	b2e4      	uxtb	r4, r4
  401b7e:	683a      	ldr	r2, [r7, #0]
  401b80:	6811      	ldr	r1, [r2, #0]
  401b82:	7909      	ldrb	r1, [r1, #4]
  401b84:	42a1      	cmp	r1, r4
  401b86:	d8ea      	bhi.n	401b5e <udc_process_setup+0x37e>
  401b88:	e010      	b.n	401bac <udc_process_setup+0x3cc>
  401b8a:	2300      	movs	r3, #0
  401b8c:	e00e      	b.n	401bac <udc_process_setup+0x3cc>
  401b8e:	2300      	movs	r3, #0
  401b90:	e00c      	b.n	401bac <udc_process_setup+0x3cc>
  401b92:	2300      	movs	r3, #0
  401b94:	e00a      	b.n	401bac <udc_process_setup+0x3cc>
  401b96:	2300      	movs	r3, #0
  401b98:	e008      	b.n	401bac <udc_process_setup+0x3cc>
  401b9a:	f013 0f60 	tst.w	r3, #96	; 0x60
  401b9e:	d1a8      	bne.n	401af2 <udc_process_setup+0x312>
  401ba0:	e6d8      	b.n	401954 <udc_process_setup+0x174>
  401ba2:	f013 0f60 	tst.w	r3, #96	; 0x60
  401ba6:	d1a4      	bne.n	401af2 <udc_process_setup+0x312>
  401ba8:	e62b      	b.n	401802 <udc_process_setup+0x22>
  401baa:	2301      	movs	r3, #1
  401bac:	4618      	mov	r0, r3
  401bae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  401bb0:	2000b0b4 	.word	0x2000b0b4
  401bb4:	20000b58 	.word	0x20000b58
  401bb8:	0040168d 	.word	0x0040168d
  401bbc:	004016f5 	.word	0x004016f5
  401bc0:	004037cd 	.word	0x004037cd
  401bc4:	00403a31 	.word	0x00403a31
  401bc8:	004036e1 	.word	0x004036e1
  401bcc:	20000b4c 	.word	0x20000b4c
  401bd0:	00401625 	.word	0x00401625

00401bd4 <board_init>:
  401bd4:	b510      	push	{r4, lr}
  401bd6:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  401bda:	4b0f      	ldr	r3, [pc, #60]	; (401c18 <board_init+0x44>)
  401bdc:	605a      	str	r2, [r3, #4]
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
  401bde:	200b      	movs	r0, #11
  401be0:	4c0e      	ldr	r4, [pc, #56]	; (401c1c <board_init+0x48>)
  401be2:	47a0      	blx	r4
  401be4:	200c      	movs	r0, #12
  401be6:	47a0      	blx	r4
  401be8:	200d      	movs	r0, #13
  401bea:	47a0      	blx	r4
  401bec:	2013      	movs	r0, #19
  401bee:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
  401bf2:	4c0b      	ldr	r4, [pc, #44]	; (401c20 <board_init+0x4c>)
  401bf4:	47a0      	blx	r4
  401bf6:	2014      	movs	r0, #20
  401bf8:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
  401bfc:	47a0      	blx	r4
  401bfe:	2023      	movs	r0, #35	; 0x23
  401c00:	4908      	ldr	r1, [pc, #32]	; (401c24 <board_init+0x50>)
  401c02:	47a0      	blx	r4
  401c04:	204c      	movs	r0, #76	; 0x4c
  401c06:	4908      	ldr	r1, [pc, #32]	; (401c28 <board_init+0x54>)
  401c08:	47a0      	blx	r4
  401c0a:	4808      	ldr	r0, [pc, #32]	; (401c2c <board_init+0x58>)
  401c0c:	210c      	movs	r1, #12
  401c0e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
  401c12:	4b07      	ldr	r3, [pc, #28]	; (401c30 <board_init+0x5c>)
  401c14:	4798      	blx	r3
  401c16:	bd10      	pop	{r4, pc}
  401c18:	400e1450 	.word	0x400e1450
  401c1c:	00402101 	.word	0x00402101
  401c20:	00401d79 	.word	0x00401d79
  401c24:	28000079 	.word	0x28000079
  401c28:	28000059 	.word	0x28000059
  401c2c:	400e1000 	.word	0x400e1000
  401c30:	00401e9d 	.word	0x00401e9d

00401c34 <pdc_tx_init>:
  401c34:	460b      	mov	r3, r1
  401c36:	b119      	cbz	r1, 401c40 <pdc_tx_init+0xc>
  401c38:	6809      	ldr	r1, [r1, #0]
  401c3a:	6081      	str	r1, [r0, #8]
  401c3c:	685b      	ldr	r3, [r3, #4]
  401c3e:	60c3      	str	r3, [r0, #12]
  401c40:	b11a      	cbz	r2, 401c4a <pdc_tx_init+0x16>
  401c42:	6813      	ldr	r3, [r2, #0]
  401c44:	6183      	str	r3, [r0, #24]
  401c46:	6853      	ldr	r3, [r2, #4]
  401c48:	61c3      	str	r3, [r0, #28]
  401c4a:	4770      	bx	lr

00401c4c <pdc_rx_init>:
  401c4c:	460b      	mov	r3, r1
  401c4e:	b119      	cbz	r1, 401c58 <pdc_rx_init+0xc>
  401c50:	6809      	ldr	r1, [r1, #0]
  401c52:	6001      	str	r1, [r0, #0]
  401c54:	685b      	ldr	r3, [r3, #4]
  401c56:	6043      	str	r3, [r0, #4]
  401c58:	b11a      	cbz	r2, 401c62 <pdc_rx_init+0x16>
  401c5a:	6813      	ldr	r3, [r2, #0]
  401c5c:	6103      	str	r3, [r0, #16]
  401c5e:	6853      	ldr	r3, [r2, #4]
  401c60:	6143      	str	r3, [r0, #20]
  401c62:	4770      	bx	lr

00401c64 <pdc_enable_transfer>:
  401c64:	f021 01fe 	bic.w	r1, r1, #254	; 0xfe
  401c68:	05c9      	lsls	r1, r1, #23
  401c6a:	0dc9      	lsrs	r1, r1, #23
  401c6c:	6201      	str	r1, [r0, #32]
  401c6e:	4770      	bx	lr

00401c70 <pdc_disable_transfer>:
  401c70:	f421 71fe 	bic.w	r1, r1, #508	; 0x1fc
  401c74:	f021 0101 	bic.w	r1, r1, #1
  401c78:	0589      	lsls	r1, r1, #22
  401c7a:	0d89      	lsrs	r1, r1, #22
  401c7c:	6201      	str	r1, [r0, #32]
  401c7e:	4770      	bx	lr

00401c80 <pio_set_peripheral>:
		const uint32_t ul_mask)
{
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
  401c80:	6442      	str	r2, [r0, #68]	; 0x44

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	switch (ul_type) {
  401c82:	f1b1 5fc0 	cmp.w	r1, #402653184	; 0x18000000
  401c86:	d02f      	beq.n	401ce8 <pio_set_peripheral+0x68>
  401c88:	d807      	bhi.n	401c9a <pio_set_peripheral+0x1a>
  401c8a:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
  401c8e:	d014      	beq.n	401cba <pio_set_peripheral+0x3a>
  401c90:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
  401c94:	d01e      	beq.n	401cd4 <pio_set_peripheral+0x54>
  401c96:	b939      	cbnz	r1, 401ca8 <pio_set_peripheral+0x28>
  401c98:	4770      	bx	lr
  401c9a:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
  401c9e:	d037      	beq.n	401d10 <pio_set_peripheral+0x90>
  401ca0:	d804      	bhi.n	401cac <pio_set_peripheral+0x2c>
  401ca2:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
  401ca6:	d029      	beq.n	401cfc <pio_set_peripheral+0x7c>
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
  401ca8:	6042      	str	r2, [r0, #4]
  401caa:	4770      	bx	lr

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	switch (ul_type) {
  401cac:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
  401cb0:	d02e      	beq.n	401d10 <pio_set_peripheral+0x90>
  401cb2:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
  401cb6:	d02b      	beq.n	401d10 <pio_set_peripheral+0x90>
  401cb8:	e7f6      	b.n	401ca8 <pio_set_peripheral+0x28>
 * \param ul_type PIO type.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_set_peripheral(Pio *p_pio, const pio_type_t ul_type,
		const uint32_t ul_mask)
{
  401cba:	b410      	push	{r4}
	p_pio->PIO_IDR = ul_mask;

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	switch (ul_type) {
	case PIO_PERIPH_A:
		ul_sr = p_pio->PIO_ABCDSR[0];
  401cbc:	6f01      	ldr	r1, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  401cbe:	6f04      	ldr	r4, [r0, #112]	; 0x70
  401cc0:	43d3      	mvns	r3, r2
  401cc2:	4021      	ands	r1, r4
  401cc4:	4019      	ands	r1, r3
  401cc6:	6701      	str	r1, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  401cc8:	6f41      	ldr	r1, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  401cca:	6f44      	ldr	r4, [r0, #116]	; 0x74
  401ccc:	4021      	ands	r1, r4
  401cce:	400b      	ands	r3, r1
  401cd0:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  401cd2:	e01a      	b.n	401d0a <pio_set_peripheral+0x8a>
	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABCDSR[0];
  401cd4:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  401cd6:	4313      	orrs	r3, r2
  401cd8:	6703      	str	r3, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  401cda:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  401cdc:	6f41      	ldr	r1, [r0, #116]	; 0x74
  401cde:	400b      	ands	r3, r1
  401ce0:	ea23 0302 	bic.w	r3, r3, r2
  401ce4:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  401ce6:	e7df      	b.n	401ca8 <pio_set_peripheral+0x28>
#if (!SAMG)
	case PIO_PERIPH_C:
		ul_sr = p_pio->PIO_ABCDSR[0];
  401ce8:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  401cea:	6f01      	ldr	r1, [r0, #112]	; 0x70
  401cec:	400b      	ands	r3, r1
  401cee:	ea23 0302 	bic.w	r3, r3, r2
  401cf2:	6703      	str	r3, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  401cf4:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  401cf6:	4313      	orrs	r3, r2
  401cf8:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  401cfa:	e7d5      	b.n	401ca8 <pio_set_peripheral+0x28>
	case PIO_PERIPH_D:
		ul_sr = p_pio->PIO_ABCDSR[0];
  401cfc:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  401cfe:	4313      	orrs	r3, r2
  401d00:	6703      	str	r3, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  401d02:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  401d04:	4313      	orrs	r3, r2
  401d06:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  401d08:	e7ce      	b.n	401ca8 <pio_set_peripheral+0x28>
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
  401d0a:	6042      	str	r2, [r0, #4]
}
  401d0c:	f85d 4b04 	ldr.w	r4, [sp], #4
  401d10:	4770      	bx	lr
  401d12:	bf00      	nop

00401d14 <pio_set_input>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
  401d14:	6441      	str	r1, [r0, #68]	; 0x44
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  401d16:	f012 0f01 	tst.w	r2, #1
		p_pio->PIO_PUER = ul_mask;
  401d1a:	bf14      	ite	ne
  401d1c:	6641      	strne	r1, [r0, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
  401d1e:	6601      	streq	r1, [r0, #96]	; 0x60
{
	pio_disable_interrupt(p_pio, ul_mask);
	pio_pull_up(p_pio, ul_mask, ul_attribute & PIO_PULLUP);

	/* Enable Input Filter if necessary */
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
  401d20:	f012 0f0a 	tst.w	r2, #10
		p_pio->PIO_IFER = ul_mask;
  401d24:	bf14      	ite	ne
  401d26:	6201      	strne	r1, [r0, #32]
	} else {
		p_pio->PIO_IFDR = ul_mask;
  401d28:	6241      	streq	r1, [r0, #36]	; 0x24
	}

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	/* Enable de-glitch or de-bounce if necessary */
	if (ul_attribute & PIO_DEGLITCH) {
  401d2a:	f012 0f02 	tst.w	r2, #2
  401d2e:	d002      	beq.n	401d36 <pio_set_input+0x22>
		p_pio->PIO_IFSCDR = ul_mask;
  401d30:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
  401d34:	e004      	b.n	401d40 <pio_set_input+0x2c>
	} else {
		if (ul_attribute & PIO_DEBOUNCE) {
  401d36:	f012 0f08 	tst.w	r2, #8
			p_pio->PIO_IFSCER = ul_mask;
  401d3a:	bf18      	it	ne
  401d3c:	f8c0 1084 	strne.w	r1, [r0, #132]	; 0x84
#else
#error "Unsupported device"
#endif

	/* Configure pin as input */
	p_pio->PIO_ODR = ul_mask;
  401d40:	6141      	str	r1, [r0, #20]
	p_pio->PIO_PER = ul_mask;
  401d42:	6001      	str	r1, [r0, #0]
  401d44:	4770      	bx	lr
  401d46:	bf00      	nop

00401d48 <pio_set_output>:
 */
void pio_set_output(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_default_level,
		const uint32_t ul_multidrive_enable,
		const uint32_t ul_pull_up_enable)
{
  401d48:	b410      	push	{r4}
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
  401d4a:	6441      	str	r1, [r0, #68]	; 0x44
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  401d4c:	9c01      	ldr	r4, [sp, #4]
  401d4e:	b10c      	cbz	r4, 401d54 <pio_set_output+0xc>
		p_pio->PIO_PUER = ul_mask;
  401d50:	6641      	str	r1, [r0, #100]	; 0x64
  401d52:	e000      	b.n	401d56 <pio_set_output+0xe>
	} else {
		p_pio->PIO_PUDR = ul_mask;
  401d54:	6601      	str	r1, [r0, #96]	; 0x60
{
	pio_disable_interrupt(p_pio, ul_mask);
	pio_pull_up(p_pio, ul_mask, ul_pull_up_enable);

	/* Enable multi-drive if necessary */
	if (ul_multidrive_enable) {
  401d56:	b10b      	cbz	r3, 401d5c <pio_set_output+0x14>
		p_pio->PIO_MDER = ul_mask;
  401d58:	6501      	str	r1, [r0, #80]	; 0x50
  401d5a:	e000      	b.n	401d5e <pio_set_output+0x16>
	} else {
		p_pio->PIO_MDDR = ul_mask;
  401d5c:	6541      	str	r1, [r0, #84]	; 0x54
	}

	/* Set default value */
	if (ul_default_level) {
  401d5e:	b10a      	cbz	r2, 401d64 <pio_set_output+0x1c>
		p_pio->PIO_SODR = ul_mask;
  401d60:	6301      	str	r1, [r0, #48]	; 0x30
  401d62:	e000      	b.n	401d66 <pio_set_output+0x1e>
	} else {
		p_pio->PIO_CODR = ul_mask;
  401d64:	6341      	str	r1, [r0, #52]	; 0x34
	}

	/* Configure pin(s) as output(s) */
	p_pio->PIO_OER = ul_mask;
  401d66:	6101      	str	r1, [r0, #16]
	p_pio->PIO_PER = ul_mask;
  401d68:	6001      	str	r1, [r0, #0]
}
  401d6a:	f85d 4b04 	ldr.w	r4, [sp], #4
  401d6e:	4770      	bx	lr

00401d70 <pio_get_interrupt_status>:
 *
 * \return The interrupt status mask value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
  401d70:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
  401d72:	4770      	bx	lr

00401d74 <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
  401d74:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
  401d76:	4770      	bx	lr

00401d78 <pio_configure_pin>:
 * \param ul_flags Pins attributes.
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
  401d78:	b570      	push	{r4, r5, r6, lr}
  401d7a:	b082      	sub	sp, #8
  401d7c:	460d      	mov	r5, r1
		p_pio = PIOC;
	} else {
		p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
	}
#else
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
  401d7e:	0943      	lsrs	r3, r0, #5
  401d80:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  401d84:	f203 7307 	addw	r3, r3, #1799	; 0x707
  401d88:	025c      	lsls	r4, r3, #9
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
	Pio *p_pio = pio_get_pin_group(ul_pin);

	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
  401d8a:	f001 43f0 	and.w	r3, r1, #2013265920	; 0x78000000
  401d8e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
  401d92:	d047      	beq.n	401e24 <pio_configure_pin+0xac>
  401d94:	d809      	bhi.n	401daa <pio_configure_pin+0x32>
  401d96:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
  401d9a:	d021      	beq.n	401de0 <pio_configure_pin+0x68>
  401d9c:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
  401da0:	d02f      	beq.n	401e02 <pio_configure_pin+0x8a>
  401da2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
  401da6:	d16f      	bne.n	401e88 <pio_configure_pin+0x110>
  401da8:	e009      	b.n	401dbe <pio_configure_pin+0x46>
  401daa:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
  401dae:	d055      	beq.n	401e5c <pio_configure_pin+0xe4>
  401db0:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
  401db4:	d052      	beq.n	401e5c <pio_configure_pin+0xe4>
  401db6:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
  401dba:	d044      	beq.n	401e46 <pio_configure_pin+0xce>
  401dbc:	e064      	b.n	401e88 <pio_configure_pin+0x110>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
  401dbe:	f000 001f 	and.w	r0, r0, #31
  401dc2:	2601      	movs	r6, #1
  401dc4:	4086      	lsls	r6, r0
  401dc6:	4620      	mov	r0, r4
  401dc8:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  401dcc:	4632      	mov	r2, r6
  401dce:	4b30      	ldr	r3, [pc, #192]	; (401e90 <pio_configure_pin+0x118>)
  401dd0:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  401dd2:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
  401dd6:	bf14      	ite	ne
  401dd8:	6666      	strne	r6, [r4, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
  401dda:	6626      	streq	r6, [r4, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
  401ddc:	2001      	movs	r0, #1
  401dde:	e054      	b.n	401e8a <pio_configure_pin+0x112>
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
				(ul_flags & PIO_PULLUP));
		break;
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, (1 << (ul_pin & 0x1F)));
  401de0:	f000 001f 	and.w	r0, r0, #31
  401de4:	2601      	movs	r6, #1
  401de6:	4086      	lsls	r6, r0
  401de8:	4620      	mov	r0, r4
  401dea:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  401dee:	4632      	mov	r2, r6
  401df0:	4b27      	ldr	r3, [pc, #156]	; (401e90 <pio_configure_pin+0x118>)
  401df2:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  401df4:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
  401df8:	bf14      	ite	ne
  401dfa:	6666      	strne	r6, [r4, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
  401dfc:	6626      	streq	r6, [r4, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
  401dfe:	2001      	movs	r0, #1
  401e00:	e043      	b.n	401e8a <pio_configure_pin+0x112>
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
				(ul_flags & PIO_PULLUP));
		break;
#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	case PIO_TYPE_PIO_PERIPH_C:
		pio_set_peripheral(p_pio, PIO_PERIPH_C, (1 << (ul_pin & 0x1F)));
  401e02:	f000 001f 	and.w	r0, r0, #31
  401e06:	2601      	movs	r6, #1
  401e08:	4086      	lsls	r6, r0
  401e0a:	4620      	mov	r0, r4
  401e0c:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  401e10:	4632      	mov	r2, r6
  401e12:	4b1f      	ldr	r3, [pc, #124]	; (401e90 <pio_configure_pin+0x118>)
  401e14:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  401e16:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
  401e1a:	bf14      	ite	ne
  401e1c:	6666      	strne	r6, [r4, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
  401e1e:	6626      	streq	r6, [r4, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
  401e20:	2001      	movs	r0, #1
  401e22:	e032      	b.n	401e8a <pio_configure_pin+0x112>
		pio_set_peripheral(p_pio, PIO_PERIPH_C, (1 << (ul_pin & 0x1F)));
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
				(ul_flags & PIO_PULLUP));
		break;
	case PIO_TYPE_PIO_PERIPH_D:
		pio_set_peripheral(p_pio, PIO_PERIPH_D, (1 << (ul_pin & 0x1F)));
  401e24:	f000 001f 	and.w	r0, r0, #31
  401e28:	2601      	movs	r6, #1
  401e2a:	4086      	lsls	r6, r0
  401e2c:	4620      	mov	r0, r4
  401e2e:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
  401e32:	4632      	mov	r2, r6
  401e34:	4b16      	ldr	r3, [pc, #88]	; (401e90 <pio_configure_pin+0x118>)
  401e36:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  401e38:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
  401e3c:	bf14      	ite	ne
  401e3e:	6666      	strne	r6, [r4, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
  401e40:	6626      	streq	r6, [r4, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
  401e42:	2001      	movs	r0, #1
  401e44:	e021      	b.n	401e8a <pio_configure_pin+0x112>
				(ul_flags & PIO_PULLUP));
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
  401e46:	f000 031f 	and.w	r3, r0, #31
  401e4a:	2601      	movs	r6, #1
  401e4c:	4620      	mov	r0, r4
  401e4e:	fa06 f103 	lsl.w	r1, r6, r3
  401e52:	462a      	mov	r2, r5
  401e54:	4b0f      	ldr	r3, [pc, #60]	; (401e94 <pio_configure_pin+0x11c>)
  401e56:	4798      	blx	r3

	default:
		return 0;
	}

	return 1;
  401e58:	4630      	mov	r0, r6
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;
  401e5a:	e016      	b.n	401e8a <pio_configure_pin+0x112>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
  401e5c:	f000 031f 	and.w	r3, r0, #31
  401e60:	2601      	movs	r6, #1
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
  401e62:	f005 5260 	and.w	r2, r5, #939524096	; 0x38000000
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
  401e66:	ea05 0106 	and.w	r1, r5, r6
  401e6a:	9100      	str	r1, [sp, #0]
  401e6c:	4620      	mov	r0, r4
  401e6e:	fa06 f103 	lsl.w	r1, r6, r3
  401e72:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
  401e76:	bf14      	ite	ne
  401e78:	2200      	movne	r2, #0
  401e7a:	2201      	moveq	r2, #1
  401e7c:	f3c5 0380 	ubfx	r3, r5, #2, #1
  401e80:	4c05      	ldr	r4, [pc, #20]	; (401e98 <pio_configure_pin+0x120>)
  401e82:	47a0      	blx	r4

	default:
		return 0;
	}

	return 1;
  401e84:	4630      	mov	r0, r6
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
		break;
  401e86:	e000      	b.n	401e8a <pio_configure_pin+0x112>

	default:
		return 0;
  401e88:	2000      	movs	r0, #0
	}

	return 1;
}
  401e8a:	b002      	add	sp, #8
  401e8c:	bd70      	pop	{r4, r5, r6, pc}
  401e8e:	bf00      	nop
  401e90:	00401c81 	.word	0x00401c81
  401e94:	00401d15 	.word	0x00401d15
  401e98:	00401d49 	.word	0x00401d49

00401e9c <pio_configure_pin_group>:
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin_group(Pio *p_pio,
		uint32_t ul_mask, const uint32_t ul_flags)
{
  401e9c:	b570      	push	{r4, r5, r6, lr}
  401e9e:	b082      	sub	sp, #8
  401ea0:	4606      	mov	r6, r0
  401ea2:	460d      	mov	r5, r1
  401ea4:	4614      	mov	r4, r2
	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
  401ea6:	f002 43f0 	and.w	r3, r2, #2013265920	; 0x78000000
  401eaa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
  401eae:	d038      	beq.n	401f22 <pio_configure_pin_group+0x86>
  401eb0:	d809      	bhi.n	401ec6 <pio_configure_pin_group+0x2a>
  401eb2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
  401eb6:	d01c      	beq.n	401ef2 <pio_configure_pin_group+0x56>
  401eb8:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
  401ebc:	d025      	beq.n	401f0a <pio_configure_pin_group+0x6e>
  401ebe:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
  401ec2:	d150      	bne.n	401f66 <pio_configure_pin_group+0xca>
  401ec4:	e009      	b.n	401eda <pio_configure_pin_group+0x3e>
  401ec6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
  401eca:	d03a      	beq.n	401f42 <pio_configure_pin_group+0xa6>
  401ecc:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
  401ed0:	d037      	beq.n	401f42 <pio_configure_pin_group+0xa6>
  401ed2:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
  401ed6:	d030      	beq.n	401f3a <pio_configure_pin_group+0x9e>
  401ed8:	e045      	b.n	401f66 <pio_configure_pin_group+0xca>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, ul_mask);
  401eda:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  401ede:	462a      	mov	r2, r5
  401ee0:	4b22      	ldr	r3, [pc, #136]	; (401f6c <pio_configure_pin_group+0xd0>)
  401ee2:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  401ee4:	f014 0f01 	tst.w	r4, #1
		p_pio->PIO_PUER = ul_mask;
  401ee8:	bf14      	ite	ne
  401eea:	6675      	strne	r5, [r6, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
  401eec:	6635      	streq	r5, [r6, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
  401eee:	2001      	movs	r0, #1
  401ef0:	e03a      	b.n	401f68 <pio_configure_pin_group+0xcc>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, ul_mask);
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, ul_mask);
  401ef2:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  401ef6:	462a      	mov	r2, r5
  401ef8:	4b1c      	ldr	r3, [pc, #112]	; (401f6c <pio_configure_pin_group+0xd0>)
  401efa:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  401efc:	f014 0f01 	tst.w	r4, #1
		p_pio->PIO_PUER = ul_mask;
  401f00:	bf14      	ite	ne
  401f02:	6675      	strne	r5, [r6, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
  401f04:	6635      	streq	r5, [r6, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
  401f06:	2001      	movs	r0, #1
  401f08:	e02e      	b.n	401f68 <pio_configure_pin_group+0xcc>
		pio_set_peripheral(p_pio, PIO_PERIPH_B, ul_mask);
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	case PIO_TYPE_PIO_PERIPH_C:
		pio_set_peripheral(p_pio, PIO_PERIPH_C, ul_mask);
  401f0a:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  401f0e:	462a      	mov	r2, r5
  401f10:	4b16      	ldr	r3, [pc, #88]	; (401f6c <pio_configure_pin_group+0xd0>)
  401f12:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  401f14:	f014 0f01 	tst.w	r4, #1
		p_pio->PIO_PUER = ul_mask;
  401f18:	bf14      	ite	ne
  401f1a:	6675      	strne	r5, [r6, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
  401f1c:	6635      	streq	r5, [r6, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
  401f1e:	2001      	movs	r0, #1
  401f20:	e022      	b.n	401f68 <pio_configure_pin_group+0xcc>
	case PIO_TYPE_PIO_PERIPH_C:
		pio_set_peripheral(p_pio, PIO_PERIPH_C, ul_mask);
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
	case PIO_TYPE_PIO_PERIPH_D:
		pio_set_peripheral(p_pio, PIO_PERIPH_D, ul_mask);
  401f22:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
  401f26:	462a      	mov	r2, r5
  401f28:	4b10      	ldr	r3, [pc, #64]	; (401f6c <pio_configure_pin_group+0xd0>)
  401f2a:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  401f2c:	f014 0f01 	tst.w	r4, #1
		p_pio->PIO_PUER = ul_mask;
  401f30:	bf14      	ite	ne
  401f32:	6675      	strne	r5, [r6, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
  401f34:	6635      	streq	r5, [r6, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
  401f36:	2001      	movs	r0, #1
  401f38:	e016      	b.n	401f68 <pio_configure_pin_group+0xcc>
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, ul_mask, ul_flags);
  401f3a:	4b0d      	ldr	r3, [pc, #52]	; (401f70 <pio_configure_pin_group+0xd4>)
  401f3c:	4798      	blx	r3

	default:
		return 0;
	}

	return 1;
  401f3e:	2001      	movs	r0, #1
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, ul_mask, ul_flags);
		break;
  401f40:	e012      	b.n	401f68 <pio_configure_pin_group+0xcc>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask,
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
  401f42:	f004 5260 	and.w	r2, r4, #939524096	; 0x38000000
		pio_set_input(p_pio, ul_mask, ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask,
  401f46:	f004 0301 	and.w	r3, r4, #1
  401f4a:	9300      	str	r3, [sp, #0]
  401f4c:	4630      	mov	r0, r6
  401f4e:	4629      	mov	r1, r5
  401f50:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
  401f54:	bf14      	ite	ne
  401f56:	2200      	movne	r2, #0
  401f58:	2201      	moveq	r2, #1
  401f5a:	f3c4 0380 	ubfx	r3, r4, #2, #1
  401f5e:	4c05      	ldr	r4, [pc, #20]	; (401f74 <pio_configure_pin_group+0xd8>)
  401f60:	47a0      	blx	r4

	default:
		return 0;
	}

	return 1;
  401f62:	2001      	movs	r0, #1
		pio_set_output(p_pio, ul_mask,
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
		break;
  401f64:	e000      	b.n	401f68 <pio_configure_pin_group+0xcc>

	default:
		return 0;
  401f66:	2000      	movs	r0, #0
	}

	return 1;
}
  401f68:	b002      	add	sp, #8
  401f6a:	bd70      	pop	{r4, r5, r6, pc}
  401f6c:	00401c81 	.word	0x00401c81
  401f70:	00401d15 	.word	0x00401d15
  401f74:	00401d49 	.word	0x00401d49

00401f78 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
  401f78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  401f7c:	4681      	mov	r9, r0
  401f7e:	4688      	mov	r8, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
  401f80:	4b12      	ldr	r3, [pc, #72]	; (401fcc <pio_handler_process+0x54>)
  401f82:	4798      	blx	r3
  401f84:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
  401f86:	4648      	mov	r0, r9
  401f88:	4b11      	ldr	r3, [pc, #68]	; (401fd0 <pio_handler_process+0x58>)
  401f8a:	4798      	blx	r3

	/* Check pending events */
	if (status != 0) {
  401f8c:	4005      	ands	r5, r0
  401f8e:	d013      	beq.n	401fb8 <pio_handler_process+0x40>
  401f90:	4c10      	ldr	r4, [pc, #64]	; (401fd4 <pio_handler_process+0x5c>)
  401f92:	f104 0660 	add.w	r6, r4, #96	; 0x60
		/* Find triggering source */
		i = 0;
		while (status != 0) {
			/* Source is configured on the same controller */
			if (gs_interrupt_sources[i].id == ul_id) {
  401f96:	6823      	ldr	r3, [r4, #0]
  401f98:	4543      	cmp	r3, r8
  401f9a:	d108      	bne.n	401fae <pio_handler_process+0x36>
				/* Source has PIOs whose statuses have changed */
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  401f9c:	6861      	ldr	r1, [r4, #4]
  401f9e:	4229      	tst	r1, r5
  401fa0:	d005      	beq.n	401fae <pio_handler_process+0x36>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  401fa2:	68e3      	ldr	r3, [r4, #12]
  401fa4:	4640      	mov	r0, r8
  401fa6:	4798      	blx	r3
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
  401fa8:	6863      	ldr	r3, [r4, #4]
  401faa:	ea25 0503 	bic.w	r5, r5, r3
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
  401fae:	42b4      	cmp	r4, r6
  401fb0:	d002      	beq.n	401fb8 <pio_handler_process+0x40>
  401fb2:	3410      	adds	r4, #16

	/* Check pending events */
	if (status != 0) {
		/* Find triggering source */
		i = 0;
		while (status != 0) {
  401fb4:	2d00      	cmp	r5, #0
  401fb6:	d1ee      	bne.n	401f96 <pio_handler_process+0x1e>
		}
	}

	/* Check capture events */
#if (SAM3S || SAM4S || SAM4E)
	if (pio_capture_enable_flag) {
  401fb8:	4b07      	ldr	r3, [pc, #28]	; (401fd8 <pio_handler_process+0x60>)
  401fba:	681b      	ldr	r3, [r3, #0]
  401fbc:	b123      	cbz	r3, 401fc8 <pio_handler_process+0x50>
		if (pio_capture_handler) {
  401fbe:	4b07      	ldr	r3, [pc, #28]	; (401fdc <pio_handler_process+0x64>)
  401fc0:	681b      	ldr	r3, [r3, #0]
  401fc2:	b10b      	cbz	r3, 401fc8 <pio_handler_process+0x50>
			pio_capture_handler(p_pio);
  401fc4:	4648      	mov	r0, r9
  401fc6:	4798      	blx	r3
  401fc8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  401fcc:	00401d71 	.word	0x00401d71
  401fd0:	00401d75 	.word	0x00401d75
  401fd4:	20000b64 	.word	0x20000b64
  401fd8:	2000b0b0 	.word	0x2000b0b0
  401fdc:	20000b60 	.word	0x20000b60

00401fe0 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
  401fe0:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
  401fe2:	4802      	ldr	r0, [pc, #8]	; (401fec <PIOA_Handler+0xc>)
  401fe4:	210b      	movs	r1, #11
  401fe6:	4b02      	ldr	r3, [pc, #8]	; (401ff0 <PIOA_Handler+0x10>)
  401fe8:	4798      	blx	r3
  401fea:	bd08      	pop	{r3, pc}
  401fec:	400e0e00 	.word	0x400e0e00
  401ff0:	00401f79 	.word	0x00401f79

00401ff4 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
  401ff4:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
  401ff6:	4802      	ldr	r0, [pc, #8]	; (402000 <PIOB_Handler+0xc>)
  401ff8:	210c      	movs	r1, #12
  401ffa:	4b02      	ldr	r3, [pc, #8]	; (402004 <PIOB_Handler+0x10>)
  401ffc:	4798      	blx	r3
  401ffe:	bd08      	pop	{r3, pc}
  402000:	400e1000 	.word	0x400e1000
  402004:	00401f79 	.word	0x00401f79

00402008 <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
  402008:	b508      	push	{r3, lr}
	pio_handler_process(PIOC, ID_PIOC);
  40200a:	4802      	ldr	r0, [pc, #8]	; (402014 <PIOC_Handler+0xc>)
  40200c:	210d      	movs	r1, #13
  40200e:	4b02      	ldr	r3, [pc, #8]	; (402018 <PIOC_Handler+0x10>)
  402010:	4798      	blx	r3
  402012:	bd08      	pop	{r3, pc}
  402014:	400e1200 	.word	0x400e1200
  402018:	00401f79 	.word	0x00401f79

0040201c <pmc_switch_mck_to_pllbck>:
 */
uint32_t pmc_switch_mck_to_pllbck(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
  40201c:	4a17      	ldr	r2, [pc, #92]	; (40207c <pmc_switch_mck_to_pllbck+0x60>)
  40201e:	6b13      	ldr	r3, [r2, #48]	; 0x30
  402020:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  402024:	4318      	orrs	r0, r3
  402026:	6310      	str	r0, [r2, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  402028:	6e93      	ldr	r3, [r2, #104]	; 0x68
  40202a:	f013 0f08 	tst.w	r3, #8
  40202e:	d003      	beq.n	402038 <pmc_switch_mck_to_pllbck+0x1c>
  402030:	e009      	b.n	402046 <pmc_switch_mck_to_pllbck+0x2a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  402032:	3b01      	subs	r3, #1
  402034:	d103      	bne.n	40203e <pmc_switch_mck_to_pllbck+0x22>
  402036:	e01c      	b.n	402072 <pmc_switch_mck_to_pllbck+0x56>
uint32_t pmc_switch_mck_to_pllbck(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  402038:	f44f 6300 	mov.w	r3, #2048	; 0x800
  40203c:	490f      	ldr	r1, [pc, #60]	; (40207c <pmc_switch_mck_to_pllbck+0x60>)
  40203e:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  402040:	f012 0f08 	tst.w	r2, #8
  402044:	d0f5      	beq.n	402032 <pmc_switch_mck_to_pllbck+0x16>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
  402046:	4b0d      	ldr	r3, [pc, #52]	; (40207c <pmc_switch_mck_to_pllbck+0x60>)
  402048:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  40204a:	f042 0203 	orr.w	r2, r2, #3
  40204e:	631a      	str	r2, [r3, #48]	; 0x30
			PMC_MCKR_CSS_PLLB_CLK;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  402050:	6e98      	ldr	r0, [r3, #104]	; 0x68
  402052:	f010 0008 	ands.w	r0, r0, #8
  402056:	d004      	beq.n	402062 <pmc_switch_mck_to_pllbck+0x46>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	return 0;
  402058:	2000      	movs	r0, #0
  40205a:	4770      	bx	lr

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLB_CLK;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
  40205c:	3b01      	subs	r3, #1
  40205e:	d103      	bne.n	402068 <pmc_switch_mck_to_pllbck+0x4c>
  402060:	e009      	b.n	402076 <pmc_switch_mck_to_pllbck+0x5a>
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLB_CLK;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  402062:	f44f 6300 	mov.w	r3, #2048	; 0x800
  402066:	4905      	ldr	r1, [pc, #20]	; (40207c <pmc_switch_mck_to_pllbck+0x60>)
  402068:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  40206a:	f012 0f08 	tst.w	r2, #8
  40206e:	d0f5      	beq.n	40205c <pmc_switch_mck_to_pllbck+0x40>
  402070:	4770      	bx	lr

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
			return 1;
  402072:	2001      	movs	r0, #1
  402074:	4770      	bx	lr
	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLB_CLK;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
			return 1;
  402076:	2001      	movs	r0, #1
		}
	}

	return 0;
}
  402078:	4770      	bx	lr
  40207a:	bf00      	nop
  40207c:	400e0400 	.word	0x400e0400

00402080 <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
  402080:	b138      	cbz	r0, 402092 <pmc_switch_mainck_to_xtal+0x12>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  402082:	4911      	ldr	r1, [pc, #68]	; (4020c8 <pmc_switch_mainck_to_xtal+0x48>)
  402084:	6a0b      	ldr	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  402086:	4a11      	ldr	r2, [pc, #68]	; (4020cc <pmc_switch_mainck_to_xtal+0x4c>)
  402088:	401a      	ands	r2, r3
  40208a:	4b11      	ldr	r3, [pc, #68]	; (4020d0 <pmc_switch_mainck_to_xtal+0x50>)
  40208c:	4313      	orrs	r3, r2
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  40208e:	620b      	str	r3, [r1, #32]
  402090:	4770      	bx	lr
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  402092:	4a0d      	ldr	r2, [pc, #52]	; (4020c8 <pmc_switch_mainck_to_xtal+0x48>)
  402094:	6a13      	ldr	r3, [r2, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  402096:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
  40209a:	f023 0303 	bic.w	r3, r3, #3
  40209e:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  4020a2:	f043 0301 	orr.w	r3, r3, #1
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
  4020a6:	0209      	lsls	r1, r1, #8
  4020a8:	b289      	uxth	r1, r1
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  4020aa:	430b      	orrs	r3, r1
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  4020ac:	6213      	str	r3, [r2, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  4020ae:	6e93      	ldr	r3, [r2, #104]	; 0x68
  4020b0:	f013 0f01 	tst.w	r3, #1
  4020b4:	d0fb      	beq.n	4020ae <pmc_switch_mainck_to_xtal+0x2e>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
  4020b6:	4a04      	ldr	r2, [pc, #16]	; (4020c8 <pmc_switch_mainck_to_xtal+0x48>)
  4020b8:	6a13      	ldr	r3, [r2, #32]
  4020ba:	f043 739b 	orr.w	r3, r3, #20316160	; 0x1360000
  4020be:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
  4020c2:	6213      	str	r3, [r2, #32]
  4020c4:	4770      	bx	lr
  4020c6:	bf00      	nop
  4020c8:	400e0400 	.word	0x400e0400
  4020cc:	fec8fffc 	.word	0xfec8fffc
  4020d0:	01370002 	.word	0x01370002

004020d4 <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
  4020d4:	4b02      	ldr	r3, [pc, #8]	; (4020e0 <pmc_osc_is_ready_mainck+0xc>)
  4020d6:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  4020d8:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
  4020dc:	4770      	bx	lr
  4020de:	bf00      	nop
  4020e0:	400e0400 	.word	0x400e0400

004020e4 <pmc_disable_pllbck>:
/**
 * \brief Disable PLLB clock.
 */
void pmc_disable_pllbck(void)
{
	PMC->CKGR_PLLBR = CKGR_PLLBR_MULB(0);
  4020e4:	2200      	movs	r2, #0
  4020e6:	4b01      	ldr	r3, [pc, #4]	; (4020ec <pmc_disable_pllbck+0x8>)
  4020e8:	62da      	str	r2, [r3, #44]	; 0x2c
  4020ea:	4770      	bx	lr
  4020ec:	400e0400 	.word	0x400e0400

004020f0 <pmc_is_locked_pllbck>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllbck(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKB);
  4020f0:	4b02      	ldr	r3, [pc, #8]	; (4020fc <pmc_is_locked_pllbck+0xc>)
  4020f2:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  4020f4:	f000 0004 	and.w	r0, r0, #4
  4020f8:	4770      	bx	lr
  4020fa:	bf00      	nop
  4020fc:	400e0400 	.word	0x400e0400

00402100 <pmc_enable_periph_clk>:
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
  402100:	2822      	cmp	r0, #34	; 0x22
  402102:	d81e      	bhi.n	402142 <pmc_enable_periph_clk+0x42>
		return 1;
	}

	if (ul_id < 32) {
  402104:	281f      	cmp	r0, #31
  402106:	d80c      	bhi.n	402122 <pmc_enable_periph_clk+0x22>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
  402108:	4b11      	ldr	r3, [pc, #68]	; (402150 <pmc_enable_periph_clk+0x50>)
  40210a:	699a      	ldr	r2, [r3, #24]
  40210c:	2301      	movs	r3, #1
  40210e:	4083      	lsls	r3, r0
  402110:	401a      	ands	r2, r3
  402112:	4293      	cmp	r3, r2
  402114:	d017      	beq.n	402146 <pmc_enable_periph_clk+0x46>
			PMC->PMC_PCER0 = 1 << ul_id;
  402116:	2301      	movs	r3, #1
  402118:	4083      	lsls	r3, r0
  40211a:	4a0d      	ldr	r2, [pc, #52]	; (402150 <pmc_enable_periph_clk+0x50>)
  40211c:	6113      	str	r3, [r2, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
  40211e:	2000      	movs	r0, #0
  402120:	4770      	bx	lr
			PMC->PMC_PCER0 = 1 << ul_id;
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP || SAMG55 || SAMV71 || SAMV70 || SAME70 || SAMS70)
	} else {
		ul_id -= 32;
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
  402122:	4b0b      	ldr	r3, [pc, #44]	; (402150 <pmc_enable_periph_clk+0x50>)
  402124:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
			PMC->PMC_PCER0 = 1 << ul_id;
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP || SAMG55 || SAMV71 || SAMV70 || SAME70 || SAMS70)
	} else {
		ul_id -= 32;
  402128:	3820      	subs	r0, #32
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
  40212a:	2301      	movs	r3, #1
  40212c:	4083      	lsls	r3, r0
  40212e:	401a      	ands	r2, r3
  402130:	4293      	cmp	r3, r2
  402132:	d00a      	beq.n	40214a <pmc_enable_periph_clk+0x4a>
			PMC->PMC_PCER1 = 1 << ul_id;
  402134:	2301      	movs	r3, #1
  402136:	4083      	lsls	r3, r0
  402138:	4a05      	ldr	r2, [pc, #20]	; (402150 <pmc_enable_periph_clk+0x50>)
  40213a:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
		}
#endif
	}

	return 0;
  40213e:	2000      	movs	r0, #0
  402140:	4770      	bx	lr
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
		return 1;
  402142:	2001      	movs	r0, #1
  402144:	4770      	bx	lr
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
  402146:	2000      	movs	r0, #0
  402148:	4770      	bx	lr
  40214a:	2000      	movs	r0, #0
}
  40214c:	4770      	bx	lr
  40214e:	bf00      	nop
  402150:	400e0400 	.word	0x400e0400

00402154 <pmc_disable_periph_clk>:
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_disable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
  402154:	2822      	cmp	r0, #34	; 0x22
  402156:	d81e      	bhi.n	402196 <pmc_disable_periph_clk+0x42>
		return 1;
	}

	if (ul_id < 32) {
  402158:	281f      	cmp	r0, #31
  40215a:	d80c      	bhi.n	402176 <pmc_disable_periph_clk+0x22>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) == (1u << ul_id)) {
  40215c:	4b11      	ldr	r3, [pc, #68]	; (4021a4 <pmc_disable_periph_clk+0x50>)
  40215e:	699a      	ldr	r2, [r3, #24]
  402160:	2301      	movs	r3, #1
  402162:	4083      	lsls	r3, r0
  402164:	401a      	ands	r2, r3
  402166:	4293      	cmp	r3, r2
  402168:	d117      	bne.n	40219a <pmc_disable_periph_clk+0x46>
			PMC->PMC_PCDR0 = 1 << ul_id;
  40216a:	2301      	movs	r3, #1
  40216c:	4083      	lsls	r3, r0
  40216e:	4a0d      	ldr	r2, [pc, #52]	; (4021a4 <pmc_disable_periph_clk+0x50>)
  402170:	6153      	str	r3, [r2, #20]
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) == (1u << ul_id)) {
			PMC->PMC_PCDR1 = 1 << ul_id;
		}
#endif
	}
	return 0;
  402172:	2000      	movs	r0, #0
  402174:	4770      	bx	lr
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP || SAMG55 || SAMV71 \
		|| SAMV70 || SAME70 || SAMS70)
	} else {
		ul_id -= 32;
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) == (1u << ul_id)) {
  402176:	4b0b      	ldr	r3, [pc, #44]	; (4021a4 <pmc_disable_periph_clk+0x50>)
  402178:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
			PMC->PMC_PCDR0 = 1 << ul_id;
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP || SAMG55 || SAMV71 \
		|| SAMV70 || SAME70 || SAMS70)
	} else {
		ul_id -= 32;
  40217c:	3820      	subs	r0, #32
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) == (1u << ul_id)) {
  40217e:	2301      	movs	r3, #1
  402180:	4083      	lsls	r3, r0
  402182:	401a      	ands	r2, r3
  402184:	4293      	cmp	r3, r2
  402186:	d10a      	bne.n	40219e <pmc_disable_periph_clk+0x4a>
			PMC->PMC_PCDR1 = 1 << ul_id;
  402188:	2301      	movs	r3, #1
  40218a:	4083      	lsls	r3, r0
  40218c:	4a05      	ldr	r2, [pc, #20]	; (4021a4 <pmc_disable_periph_clk+0x50>)
  40218e:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
		}
#endif
	}
	return 0;
  402192:	2000      	movs	r0, #0
  402194:	4770      	bx	lr
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_disable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
		return 1;
  402196:	2001      	movs	r0, #1
  402198:	4770      	bx	lr
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) == (1u << ul_id)) {
			PMC->PMC_PCDR1 = 1 << ul_id;
		}
#endif
	}
	return 0;
  40219a:	2000      	movs	r0, #0
  40219c:	4770      	bx	lr
  40219e:	2000      	movs	r0, #0
}
  4021a0:	4770      	bx	lr
  4021a2:	bf00      	nop
  4021a4:	400e0400 	.word	0x400e0400

004021a8 <pmc_set_fast_startup_input>:
 * \param ul_inputs Wake up inputs to enable.
 */
void pmc_set_fast_startup_input(uint32_t ul_inputs)
{
	ul_inputs &= PMC_FAST_STARTUP_Msk;
	PMC->PMC_FSMR |= ul_inputs;
  4021a8:	4a03      	ldr	r2, [pc, #12]	; (4021b8 <pmc_set_fast_startup_input+0x10>)
  4021aa:	6f13      	ldr	r3, [r2, #112]	; 0x70
 *
 * \param ul_inputs Wake up inputs to enable.
 */
void pmc_set_fast_startup_input(uint32_t ul_inputs)
{
	ul_inputs &= PMC_FAST_STARTUP_Msk;
  4021ac:	f3c0 0012 	ubfx	r0, r0, #0, #19
	PMC->PMC_FSMR |= ul_inputs;
  4021b0:	4303      	orrs	r3, r0
  4021b2:	6713      	str	r3, [r2, #112]	; 0x70
  4021b4:	4770      	bx	lr
  4021b6:	bf00      	nop
  4021b8:	400e0400 	.word	0x400e0400

004021bc <pmc_is_wakeup_clocks_restored>:
	}
}

bool pmc_is_wakeup_clocks_restored(void)
{
	return !b_is_sleep_clock_used;
  4021bc:	4b02      	ldr	r3, [pc, #8]	; (4021c8 <pmc_is_wakeup_clocks_restored+0xc>)
  4021be:	7818      	ldrb	r0, [r3, #0]
}
  4021c0:	f080 0001 	eor.w	r0, r0, #1
  4021c4:	4770      	bx	lr
  4021c6:	bf00      	nop
  4021c8:	20000bd4 	.word	0x20000bd4

004021cc <twi_disable_interrupt>:
 * \param ul_sources Interrupts to be disabled.
 */
void twi_disable_interrupt(Twi *p_twi, uint32_t ul_sources)
{
	/* Disable the specified interrupts */
	p_twi->TWI_IDR = ul_sources;
  4021cc:	6281      	str	r1, [r0, #40]	; 0x28
	/* Dummy read */
	p_twi->TWI_SR;
  4021ce:	6a03      	ldr	r3, [r0, #32]
  4021d0:	4770      	bx	lr
  4021d2:	bf00      	nop

004021d4 <twi_get_interrupt_status>:
 *
 * \retval TWI interrupt status.
 */
uint32_t twi_get_interrupt_status(Twi *p_twi)
{
	return p_twi->TWI_SR;
  4021d4:	6a00      	ldr	r0, [r0, #32]
}
  4021d6:	4770      	bx	lr

004021d8 <twi_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t twi_get_interrupt_mask(Twi *p_twi)
{
	return p_twi->TWI_IMR;
  4021d8:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
}
  4021da:	4770      	bx	lr

004021dc <uart_init>:
 *
 * \retval 0 Success.
 * \retval 1 Bad baud rate generator value.
 */
uint32_t uart_init(Uart *p_uart, const sam_uart_opt_t *p_uart_opt)
{
  4021dc:	b410      	push	{r4}
	uint32_t cd = 0;

	/* Reset and disable receiver & transmitter */
	p_uart->UART_CR = UART_CR_RSTRX | UART_CR_RSTTX
  4021de:	23ac      	movs	r3, #172	; 0xac
  4021e0:	6003      	str	r3, [r0, #0]
			| UART_CR_RXDIS | UART_CR_TXDIS;

	/* Check and configure baudrate */
	/* Asynchronous, no oversampling */
	cd = (p_uart_opt->ul_mck / p_uart_opt->ul_baudrate) / UART_MCK_DIV;
  4021e2:	680b      	ldr	r3, [r1, #0]
  4021e4:	684a      	ldr	r2, [r1, #4]
  4021e6:	fbb3 f3f2 	udiv	r3, r3, r2
  4021ea:	091b      	lsrs	r3, r3, #4
	if (cd < UART_MCK_DIV_MIN_FACTOR || cd > UART_MCK_DIV_MAX_FACTOR)
  4021ec:	1e5c      	subs	r4, r3, #1
  4021ee:	f64f 72fe 	movw	r2, #65534	; 0xfffe
  4021f2:	4294      	cmp	r4, r2
  4021f4:	d80a      	bhi.n	40220c <uart_init+0x30>
		return 1;

	p_uart->UART_BRGR = cd;
  4021f6:	6203      	str	r3, [r0, #32]
	/* Configure mode */
	p_uart->UART_MR = p_uart_opt->ul_mode;
  4021f8:	688b      	ldr	r3, [r1, #8]
  4021fa:	6043      	str	r3, [r0, #4]

#if (!SAMV71 && !SAMV70 && !SAME70 && !SAMS70)
	/* Disable PDC channel */
	p_uart->UART_PTCR = UART_PTCR_RXTDIS | UART_PTCR_TXTDIS;
  4021fc:	f240 2302 	movw	r3, #514	; 0x202
  402200:	f8c0 3120 	str.w	r3, [r0, #288]	; 0x120
#endif

	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;
  402204:	2350      	movs	r3, #80	; 0x50
  402206:	6003      	str	r3, [r0, #0]

	return 0;
  402208:	2000      	movs	r0, #0
  40220a:	e000      	b.n	40220e <uart_init+0x32>

	/* Check and configure baudrate */
	/* Asynchronous, no oversampling */
	cd = (p_uart_opt->ul_mck / p_uart_opt->ul_baudrate) / UART_MCK_DIV;
	if (cd < UART_MCK_DIV_MIN_FACTOR || cd > UART_MCK_DIV_MAX_FACTOR)
		return 1;
  40220c:	2001      	movs	r0, #1

	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;

	return 0;
}
  40220e:	f85d 4b04 	ldr.w	r4, [sp], #4
  402212:	4770      	bx	lr

00402214 <uart_enable_tx>:
 * \param p_uart Pointer to a UART instance.
 */
void uart_enable_tx(Uart *p_uart)
{
	/* Enable transmitter */
	p_uart->UART_CR = UART_CR_TXEN;
  402214:	2340      	movs	r3, #64	; 0x40
  402216:	6003      	str	r3, [r0, #0]
  402218:	4770      	bx	lr
  40221a:	bf00      	nop

0040221c <uart_disable_tx>:
 * \param p_uart Pointer to a UART instance.
 */
void uart_disable_tx(Uart *p_uart)
{
	/* Disable transmitter */
	p_uart->UART_CR = UART_CR_TXDIS;
  40221c:	2380      	movs	r3, #128	; 0x80
  40221e:	6003      	str	r3, [r0, #0]
  402220:	4770      	bx	lr
  402222:	bf00      	nop

00402224 <uart_enable_rx>:
 * \param p_uart Pointer to a UART instance.
 */
void uart_enable_rx(Uart *p_uart)
{
	/* Enable receiver */
	p_uart->UART_CR = UART_CR_RXEN;
  402224:	2310      	movs	r3, #16
  402226:	6003      	str	r3, [r0, #0]
  402228:	4770      	bx	lr
  40222a:	bf00      	nop

0040222c <uart_disable_rx>:
 * \param p_uart Pointer to a UART instance.
 */
void uart_disable_rx(Uart *p_uart)
{
	/* Disable receiver */
	p_uart->UART_CR = UART_CR_RXDIS;
  40222c:	2320      	movs	r3, #32
  40222e:	6003      	str	r3, [r0, #0]
  402230:	4770      	bx	lr
  402232:	bf00      	nop

00402234 <uart_enable_interrupt>:
 * \param p_uart Pointer to a UART instance.
 *  \param ul_sources Interrupts to be enabled.
 */
void uart_enable_interrupt(Uart *p_uart, uint32_t ul_sources)
{
	p_uart->UART_IER = ul_sources;
  402234:	6081      	str	r1, [r0, #8]
  402236:	4770      	bx	lr

00402238 <uart_disable_interrupt>:
 * \param p_uart Pointer to a UART instance.
 *  \param ul_sources Interrupts to be disabled.
 */
void uart_disable_interrupt(Uart *p_uart, uint32_t ul_sources)
{
	p_uart->UART_IDR = ul_sources;
  402238:	60c1      	str	r1, [r0, #12]
  40223a:	4770      	bx	lr

0040223c <uart_get_interrupt_mask>:
 *
 *  \return The interrupt mask value.
 */
uint32_t uart_get_interrupt_mask(Uart *p_uart)
{
	return p_uart->UART_IMR;
  40223c:	6900      	ldr	r0, [r0, #16]
}
  40223e:	4770      	bx	lr

00402240 <uart_get_status>:
 *
 * \return The current UART status.
 */
uint32_t uart_get_status(Uart *p_uart)
{
	return p_uart->UART_SR;
  402240:	6940      	ldr	r0, [r0, #20]
}
  402242:	4770      	bx	lr

00402244 <uart_reset_status>:
 *
 * \param p_uart Pointer to a UART instance.
 */
void uart_reset_status(Uart *p_uart)
{
	p_uart->UART_CR = UART_CR_RSTSTA;
  402244:	f44f 7380 	mov.w	r3, #256	; 0x100
  402248:	6003      	str	r3, [r0, #0]
  40224a:	4770      	bx	lr

0040224c <udd_ctrl_init>:
  40224c:	4a03      	ldr	r2, [pc, #12]	; (40225c <udd_ctrl_init+0x10>)
  40224e:	2300      	movs	r3, #0
  402250:	6113      	str	r3, [r2, #16]
  402252:	6153      	str	r3, [r2, #20]
  402254:	8193      	strh	r3, [r2, #12]
  402256:	4a02      	ldr	r2, [pc, #8]	; (402260 <udd_ctrl_init+0x14>)
  402258:	7013      	strb	r3, [r2, #0]
  40225a:	4770      	bx	lr
  40225c:	2000b0b4 	.word	0x2000b0b4
  402260:	20000c19 	.word	0x20000c19

00402264 <udd_ctrl_stall_data>:
  402264:	b082      	sub	sp, #8
  402266:	2205      	movs	r2, #5
  402268:	4b0e      	ldr	r3, [pc, #56]	; (4022a4 <udd_ctrl_stall_data+0x40>)
  40226a:	701a      	strb	r2, [r3, #0]
  40226c:	4a0e      	ldr	r2, [pc, #56]	; (4022a8 <udd_ctrl_stall_data+0x44>)
  40226e:	6b13      	ldr	r3, [r2, #48]	; 0x30
  402270:	9300      	str	r3, [sp, #0]
  402272:	9b00      	ldr	r3, [sp, #0]
  402274:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  402278:	9300      	str	r3, [sp, #0]
  40227a:	9b00      	ldr	r3, [sp, #0]
  40227c:	f043 0320 	orr.w	r3, r3, #32
  402280:	9300      	str	r3, [sp, #0]
  402282:	9b00      	ldr	r3, [sp, #0]
  402284:	6313      	str	r3, [r2, #48]	; 0x30
  402286:	2300      	movs	r3, #0
  402288:	9301      	str	r3, [sp, #4]
  40228a:	9b01      	ldr	r3, [sp, #4]
  40228c:	2b13      	cmp	r3, #19
  40228e:	d806      	bhi.n	40229e <udd_ctrl_stall_data+0x3a>

    No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
  402290:	bf00      	nop
  402292:	9b01      	ldr	r3, [sp, #4]
  402294:	3301      	adds	r3, #1
  402296:	9301      	str	r3, [sp, #4]
  402298:	9b01      	ldr	r3, [sp, #4]
  40229a:	2b13      	cmp	r3, #19
  40229c:	d9f8      	bls.n	402290 <udd_ctrl_stall_data+0x2c>
  40229e:	b002      	add	sp, #8
  4022a0:	4770      	bx	lr
  4022a2:	bf00      	nop
  4022a4:	20000c19 	.word	0x20000c19
  4022a8:	40034000 	.word	0x40034000

004022ac <udd_ctrl_send_zlp_in>:
  4022ac:	b082      	sub	sp, #8
  4022ae:	2203      	movs	r2, #3
  4022b0:	4b0e      	ldr	r3, [pc, #56]	; (4022ec <udd_ctrl_send_zlp_in+0x40>)
  4022b2:	701a      	strb	r2, [r3, #0]
  4022b4:	4a0e      	ldr	r2, [pc, #56]	; (4022f0 <udd_ctrl_send_zlp_in+0x44>)
  4022b6:	6b13      	ldr	r3, [r2, #48]	; 0x30
  4022b8:	9300      	str	r3, [sp, #0]
  4022ba:	9b00      	ldr	r3, [sp, #0]
  4022bc:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  4022c0:	9300      	str	r3, [sp, #0]
  4022c2:	9b00      	ldr	r3, [sp, #0]
  4022c4:	f043 0310 	orr.w	r3, r3, #16
  4022c8:	9300      	str	r3, [sp, #0]
  4022ca:	9b00      	ldr	r3, [sp, #0]
  4022cc:	6313      	str	r3, [r2, #48]	; 0x30
  4022ce:	2300      	movs	r3, #0
  4022d0:	9301      	str	r3, [sp, #4]
  4022d2:	9b01      	ldr	r3, [sp, #4]
  4022d4:	2b13      	cmp	r3, #19
  4022d6:	d806      	bhi.n	4022e6 <udd_ctrl_send_zlp_in+0x3a>
  4022d8:	bf00      	nop
  4022da:	9b01      	ldr	r3, [sp, #4]
  4022dc:	3301      	adds	r3, #1
  4022de:	9301      	str	r3, [sp, #4]
  4022e0:	9b01      	ldr	r3, [sp, #4]
  4022e2:	2b13      	cmp	r3, #19
  4022e4:	d9f8      	bls.n	4022d8 <udd_ctrl_send_zlp_in+0x2c>
  4022e6:	b002      	add	sp, #8
  4022e8:	4770      	bx	lr
  4022ea:	bf00      	nop
  4022ec:	20000c19 	.word	0x20000c19
  4022f0:	40034000 	.word	0x40034000

004022f4 <udd_ctrl_endofrequest>:
  4022f4:	b508      	push	{r3, lr}
  4022f6:	4b02      	ldr	r3, [pc, #8]	; (402300 <udd_ctrl_endofrequest+0xc>)
  4022f8:	691b      	ldr	r3, [r3, #16]
  4022fa:	b103      	cbz	r3, 4022fe <udd_ctrl_endofrequest+0xa>
  4022fc:	4798      	blx	r3
  4022fe:	bd08      	pop	{r3, pc}
  402300:	2000b0b4 	.word	0x2000b0b4

00402304 <udd_ctrl_in_sent>:
  402304:	b530      	push	{r4, r5, lr}
  402306:	b08b      	sub	sp, #44	; 0x2c
  402308:	4b75      	ldr	r3, [pc, #468]	; (4024e0 <udd_ctrl_in_sent+0x1dc>)
  40230a:	781b      	ldrb	r3, [r3, #0]
  40230c:	2b03      	cmp	r3, #3
  40230e:	d11d      	bne.n	40234c <udd_ctrl_in_sent+0x48>
  402310:	4a74      	ldr	r2, [pc, #464]	; (4024e4 <udd_ctrl_in_sent+0x1e0>)
  402312:	6b13      	ldr	r3, [r2, #48]	; 0x30
  402314:	9300      	str	r3, [sp, #0]
  402316:	9b00      	ldr	r3, [sp, #0]
  402318:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  40231c:	9300      	str	r3, [sp, #0]
  40231e:	9b00      	ldr	r3, [sp, #0]
  402320:	f023 0301 	bic.w	r3, r3, #1
  402324:	9300      	str	r3, [sp, #0]
  402326:	9b00      	ldr	r3, [sp, #0]
  402328:	6313      	str	r3, [r2, #48]	; 0x30
  40232a:	2300      	movs	r3, #0
  40232c:	9301      	str	r3, [sp, #4]
  40232e:	9b01      	ldr	r3, [sp, #4]
  402330:	2b13      	cmp	r3, #19
  402332:	d806      	bhi.n	402342 <udd_ctrl_in_sent+0x3e>
  402334:	bf00      	nop
  402336:	9b01      	ldr	r3, [sp, #4]
  402338:	3301      	adds	r3, #1
  40233a:	9301      	str	r3, [sp, #4]
  40233c:	9b01      	ldr	r3, [sp, #4]
  40233e:	2b13      	cmp	r3, #19
  402340:	d9f8      	bls.n	402334 <udd_ctrl_in_sent+0x30>
  402342:	4b69      	ldr	r3, [pc, #420]	; (4024e8 <udd_ctrl_in_sent+0x1e4>)
  402344:	4798      	blx	r3
  402346:	4b69      	ldr	r3, [pc, #420]	; (4024ec <udd_ctrl_in_sent+0x1e8>)
  402348:	4798      	blx	r3
  40234a:	e0c6      	b.n	4024da <udd_ctrl_in_sent+0x1d6>
  40234c:	4b68      	ldr	r3, [pc, #416]	; (4024f0 <udd_ctrl_in_sent+0x1ec>)
  40234e:	881a      	ldrh	r2, [r3, #0]
  402350:	4b68      	ldr	r3, [pc, #416]	; (4024f4 <udd_ctrl_in_sent+0x1f0>)
  402352:	899c      	ldrh	r4, [r3, #12]
  402354:	1aa4      	subs	r4, r4, r2
  402356:	b2a4      	uxth	r4, r4
  402358:	2c00      	cmp	r4, #0
  40235a:	d133      	bne.n	4023c4 <udd_ctrl_in_sent+0xc0>
  40235c:	4966      	ldr	r1, [pc, #408]	; (4024f8 <udd_ctrl_in_sent+0x1f4>)
  40235e:	880b      	ldrh	r3, [r1, #0]
  402360:	4413      	add	r3, r2
  402362:	b29b      	uxth	r3, r3
  402364:	800b      	strh	r3, [r1, #0]
  402366:	4a63      	ldr	r2, [pc, #396]	; (4024f4 <udd_ctrl_in_sent+0x1f0>)
  402368:	88d2      	ldrh	r2, [r2, #6]
  40236a:	429a      	cmp	r2, r3
  40236c:	d002      	beq.n	402374 <udd_ctrl_in_sent+0x70>
  40236e:	4b63      	ldr	r3, [pc, #396]	; (4024fc <udd_ctrl_in_sent+0x1f8>)
  402370:	781b      	ldrb	r3, [r3, #0]
  402372:	b1eb      	cbz	r3, 4023b0 <udd_ctrl_in_sent+0xac>
  402374:	2204      	movs	r2, #4
  402376:	4b5a      	ldr	r3, [pc, #360]	; (4024e0 <udd_ctrl_in_sent+0x1dc>)
  402378:	701a      	strb	r2, [r3, #0]
  40237a:	4a5a      	ldr	r2, [pc, #360]	; (4024e4 <udd_ctrl_in_sent+0x1e0>)
  40237c:	6b13      	ldr	r3, [r2, #48]	; 0x30
  40237e:	9302      	str	r3, [sp, #8]
  402380:	9b02      	ldr	r3, [sp, #8]
  402382:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  402386:	9302      	str	r3, [sp, #8]
  402388:	9b02      	ldr	r3, [sp, #8]
  40238a:	f023 0301 	bic.w	r3, r3, #1
  40238e:	9302      	str	r3, [sp, #8]
  402390:	9b02      	ldr	r3, [sp, #8]
  402392:	6313      	str	r3, [r2, #48]	; 0x30
  402394:	2300      	movs	r3, #0
  402396:	9303      	str	r3, [sp, #12]
  402398:	9b03      	ldr	r3, [sp, #12]
  40239a:	2b13      	cmp	r3, #19
  40239c:	f200 809d 	bhi.w	4024da <udd_ctrl_in_sent+0x1d6>
  4023a0:	bf00      	nop
  4023a2:	9b03      	ldr	r3, [sp, #12]
  4023a4:	3301      	adds	r3, #1
  4023a6:	9303      	str	r3, [sp, #12]
  4023a8:	9b03      	ldr	r3, [sp, #12]
  4023aa:	2b13      	cmp	r3, #19
  4023ac:	d9f8      	bls.n	4023a0 <udd_ctrl_in_sent+0x9c>
  4023ae:	e094      	b.n	4024da <udd_ctrl_in_sent+0x1d6>
  4023b0:	4b50      	ldr	r3, [pc, #320]	; (4024f4 <udd_ctrl_in_sent+0x1f0>)
  4023b2:	695b      	ldr	r3, [r3, #20]
  4023b4:	b16b      	cbz	r3, 4023d2 <udd_ctrl_in_sent+0xce>
  4023b6:	4798      	blx	r3
  4023b8:	b158      	cbz	r0, 4023d2 <udd_ctrl_in_sent+0xce>
  4023ba:	2200      	movs	r2, #0
  4023bc:	4b4c      	ldr	r3, [pc, #304]	; (4024f0 <udd_ctrl_in_sent+0x1ec>)
  4023be:	801a      	strh	r2, [r3, #0]
  4023c0:	4b4c      	ldr	r3, [pc, #304]	; (4024f4 <udd_ctrl_in_sent+0x1f0>)
  4023c2:	899c      	ldrh	r4, [r3, #12]
  4023c4:	2c3f      	cmp	r4, #63	; 0x3f
  4023c6:	d904      	bls.n	4023d2 <udd_ctrl_in_sent+0xce>
  4023c8:	2200      	movs	r2, #0
  4023ca:	4b4c      	ldr	r3, [pc, #304]	; (4024fc <udd_ctrl_in_sent+0x1f8>)
  4023cc:	701a      	strb	r2, [r3, #0]
  4023ce:	2440      	movs	r4, #64	; 0x40
  4023d0:	e002      	b.n	4023d8 <udd_ctrl_in_sent+0xd4>
  4023d2:	2201      	movs	r2, #1
  4023d4:	4b49      	ldr	r3, [pc, #292]	; (4024fc <udd_ctrl_in_sent+0x1f8>)
  4023d6:	701a      	strb	r2, [r3, #0]
  4023d8:	4b46      	ldr	r3, [pc, #280]	; (4024f4 <udd_ctrl_in_sent+0x1f0>)
  4023da:	6899      	ldr	r1, [r3, #8]
  4023dc:	4b44      	ldr	r3, [pc, #272]	; (4024f0 <udd_ctrl_in_sent+0x1ec>)
  4023de:	881b      	ldrh	r3, [r3, #0]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  4023e0:	f3ef 8010 	mrs	r0, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
  4023e4:	fab0 f080 	clz	r0, r0
  4023e8:	0940      	lsrs	r0, r0, #5
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
  4023ea:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
  4023ec:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  4023f0:	2500      	movs	r5, #0
  4023f2:	4a43      	ldr	r2, [pc, #268]	; (402500 <udd_ctrl_in_sent+0x1fc>)
  4023f4:	7015      	strb	r5, [r2, #0]
  4023f6:	4a3b      	ldr	r2, [pc, #236]	; (4024e4 <udd_ctrl_in_sent+0x1e0>)
  4023f8:	6b12      	ldr	r2, [r2, #48]	; 0x30
  4023fa:	f012 0f02 	tst.w	r2, #2
  4023fe:	d101      	bne.n	402404 <udd_ctrl_in_sent+0x100>
  402400:	bb24      	cbnz	r4, 40244c <udd_ctrl_in_sent+0x148>
  402402:	e02d      	b.n	402460 <udd_ctrl_in_sent+0x15c>
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  402404:	b128      	cbz	r0, 402412 <udd_ctrl_in_sent+0x10e>
		cpu_irq_enable();
  402406:	2201      	movs	r2, #1
  402408:	4b3d      	ldr	r3, [pc, #244]	; (402500 <udd_ctrl_in_sent+0x1fc>)
  40240a:	701a      	strb	r2, [r3, #0]
  40240c:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
  402410:	b662      	cpsie	i
  402412:	2204      	movs	r2, #4
  402414:	4b32      	ldr	r3, [pc, #200]	; (4024e0 <udd_ctrl_in_sent+0x1dc>)
  402416:	701a      	strb	r2, [r3, #0]
  402418:	4a32      	ldr	r2, [pc, #200]	; (4024e4 <udd_ctrl_in_sent+0x1e0>)
  40241a:	6b13      	ldr	r3, [r2, #48]	; 0x30
  40241c:	9304      	str	r3, [sp, #16]
  40241e:	9b04      	ldr	r3, [sp, #16]
  402420:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  402424:	9304      	str	r3, [sp, #16]
  402426:	9b04      	ldr	r3, [sp, #16]
  402428:	f023 0301 	bic.w	r3, r3, #1
  40242c:	9304      	str	r3, [sp, #16]
  40242e:	9b04      	ldr	r3, [sp, #16]
  402430:	6313      	str	r3, [r2, #48]	; 0x30
  402432:	2300      	movs	r3, #0
  402434:	9305      	str	r3, [sp, #20]
  402436:	9b05      	ldr	r3, [sp, #20]
  402438:	2b13      	cmp	r3, #19
  40243a:	d84e      	bhi.n	4024da <udd_ctrl_in_sent+0x1d6>

    No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
  40243c:	bf00      	nop
  40243e:	9b05      	ldr	r3, [sp, #20]
  402440:	3301      	adds	r3, #1
  402442:	9305      	str	r3, [sp, #20]
  402444:	9b05      	ldr	r3, [sp, #20]
  402446:	2b13      	cmp	r3, #19
  402448:	d9f8      	bls.n	40243c <udd_ctrl_in_sent+0x138>
  40244a:	e046      	b.n	4024da <udd_ctrl_in_sent+0x1d6>
  40244c:	4419      	add	r1, r3
  40244e:	460a      	mov	r2, r1
  402450:	4d24      	ldr	r5, [pc, #144]	; (4024e4 <udd_ctrl_in_sent+0x1e0>)
  402452:	f812 3b01 	ldrb.w	r3, [r2], #1
  402456:	652b      	str	r3, [r5, #80]	; 0x50
  402458:	1a53      	subs	r3, r2, r1
  40245a:	b2db      	uxtb	r3, r3
  40245c:	42a3      	cmp	r3, r4
  40245e:	d3f8      	bcc.n	402452 <udd_ctrl_in_sent+0x14e>
  402460:	4a23      	ldr	r2, [pc, #140]	; (4024f0 <udd_ctrl_in_sent+0x1ec>)
  402462:	8813      	ldrh	r3, [r2, #0]
  402464:	441c      	add	r4, r3
  402466:	8014      	strh	r4, [r2, #0]
  402468:	4a1e      	ldr	r2, [pc, #120]	; (4024e4 <udd_ctrl_in_sent+0x1e0>)
  40246a:	6b13      	ldr	r3, [r2, #48]	; 0x30
  40246c:	9306      	str	r3, [sp, #24]
  40246e:	9b06      	ldr	r3, [sp, #24]
  402470:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  402474:	9306      	str	r3, [sp, #24]
  402476:	9b06      	ldr	r3, [sp, #24]
  402478:	f043 0310 	orr.w	r3, r3, #16
  40247c:	9306      	str	r3, [sp, #24]
  40247e:	9b06      	ldr	r3, [sp, #24]
  402480:	6313      	str	r3, [r2, #48]	; 0x30
  402482:	2300      	movs	r3, #0
  402484:	9307      	str	r3, [sp, #28]
  402486:	9b07      	ldr	r3, [sp, #28]
  402488:	2b13      	cmp	r3, #19
  40248a:	d806      	bhi.n	40249a <udd_ctrl_in_sent+0x196>
  40248c:	bf00      	nop
  40248e:	9b07      	ldr	r3, [sp, #28]
  402490:	3301      	adds	r3, #1
  402492:	9307      	str	r3, [sp, #28]
  402494:	9b07      	ldr	r3, [sp, #28]
  402496:	2b13      	cmp	r3, #19
  402498:	d9f8      	bls.n	40248c <udd_ctrl_in_sent+0x188>
  40249a:	4a12      	ldr	r2, [pc, #72]	; (4024e4 <udd_ctrl_in_sent+0x1e0>)
  40249c:	6b13      	ldr	r3, [r2, #48]	; 0x30
  40249e:	9308      	str	r3, [sp, #32]
  4024a0:	9b08      	ldr	r3, [sp, #32]
  4024a2:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  4024a6:	9308      	str	r3, [sp, #32]
  4024a8:	9b08      	ldr	r3, [sp, #32]
  4024aa:	f023 0301 	bic.w	r3, r3, #1
  4024ae:	9308      	str	r3, [sp, #32]
  4024b0:	9b08      	ldr	r3, [sp, #32]
  4024b2:	6313      	str	r3, [r2, #48]	; 0x30
  4024b4:	2300      	movs	r3, #0
  4024b6:	9309      	str	r3, [sp, #36]	; 0x24
  4024b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
  4024ba:	2b13      	cmp	r3, #19
  4024bc:	d806      	bhi.n	4024cc <udd_ctrl_in_sent+0x1c8>
  4024be:	bf00      	nop
  4024c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
  4024c2:	3301      	adds	r3, #1
  4024c4:	9309      	str	r3, [sp, #36]	; 0x24
  4024c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
  4024c8:	2b13      	cmp	r3, #19
  4024ca:	d9f8      	bls.n	4024be <udd_ctrl_in_sent+0x1ba>
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  4024cc:	b128      	cbz	r0, 4024da <udd_ctrl_in_sent+0x1d6>
		cpu_irq_enable();
  4024ce:	2201      	movs	r2, #1
  4024d0:	4b0b      	ldr	r3, [pc, #44]	; (402500 <udd_ctrl_in_sent+0x1fc>)
  4024d2:	701a      	strb	r2, [r3, #0]
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
  4024d4:	f3bf 8f5f 	dmb	sy
  4024d8:	b662      	cpsie	i
  4024da:	b00b      	add	sp, #44	; 0x2c
  4024dc:	bd30      	pop	{r4, r5, pc}
  4024de:	bf00      	nop
  4024e0:	20000c19 	.word	0x20000c19
  4024e4:	40034000 	.word	0x40034000
  4024e8:	004022f5 	.word	0x004022f5
  4024ec:	0040224d 	.word	0x0040224d
  4024f0:	20000c16 	.word	0x20000c16
  4024f4:	2000b0b4 	.word	0x2000b0b4
  4024f8:	20000bd6 	.word	0x20000bd6
  4024fc:	20000c18 	.word	0x20000c18
  402500:	200000a0 	.word	0x200000a0

00402504 <udd_ep_finish_job>:
  402504:	b538      	push	{r3, r4, r5, lr}
  402506:	4603      	mov	r3, r0
  402508:	7c44      	ldrb	r4, [r0, #17]
  40250a:	f014 0f10 	tst.w	r4, #16
  40250e:	d015      	beq.n	40253c <udd_ep_finish_job+0x38>
  402510:	7c44      	ldrb	r4, [r0, #17]
  402512:	f36f 1404 	bfc	r4, #4, #1
  402516:	7444      	strb	r4, [r0, #17]
  402518:	6805      	ldr	r5, [r0, #0]
  40251a:	b17d      	cbz	r5, 40253c <udd_ep_finish_job+0x38>
  40251c:	f102 040c 	add.w	r4, r2, #12
  402520:	4807      	ldr	r0, [pc, #28]	; (402540 <udd_ep_finish_job+0x3c>)
  402522:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
  402526:	f410 6f80 	tst.w	r0, #1024	; 0x400
  40252a:	bf18      	it	ne
  40252c:	f042 0280 	orrne.w	r2, r2, #128	; 0x80
  402530:	2901      	cmp	r1, #1
  402532:	bf14      	ite	ne
  402534:	2000      	movne	r0, #0
  402536:	2001      	moveq	r0, #1
  402538:	6899      	ldr	r1, [r3, #8]
  40253a:	47a8      	blx	r5
  40253c:	bd38      	pop	{r3, r4, r5, pc}
  40253e:	bf00      	nop
  402540:	40034000 	.word	0x40034000

00402544 <udd_ep_ack_out_received>:
  402544:	b430      	push	{r4, r5}
  402546:	b084      	sub	sp, #16
  402548:	1e42      	subs	r2, r0, #1
  40254a:	0083      	lsls	r3, r0, #2
  40254c:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
  402550:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
  402554:	6b19      	ldr	r1, [r3, #48]	; 0x30
  402556:	6b1c      	ldr	r4, [r3, #48]	; 0x30
  402558:	f011 0f02 	tst.w	r1, #2
  40255c:	d00c      	beq.n	402578 <udd_ep_ack_out_received+0x34>
  40255e:	f014 0f40 	tst.w	r4, #64	; 0x40
  402562:	d113      	bne.n	40258c <udd_ep_ack_out_received+0x48>
  402564:	eb02 0182 	add.w	r1, r2, r2, lsl #2
  402568:	4c32      	ldr	r4, [pc, #200]	; (402634 <udd_ep_ack_out_received+0xf0>)
  40256a:	eb04 0181 	add.w	r1, r4, r1, lsl #2
  40256e:	7c4c      	ldrb	r4, [r1, #17]
  402570:	f36f 0483 	bfc	r4, #2, #2
  402574:	744c      	strb	r4, [r1, #17]
  402576:	e009      	b.n	40258c <udd_ep_ack_out_received+0x48>
  402578:	eb02 0182 	add.w	r1, r2, r2, lsl #2
  40257c:	4c2d      	ldr	r4, [pc, #180]	; (402634 <udd_ep_ack_out_received+0xf0>)
  40257e:	eb04 0181 	add.w	r1, r4, r1, lsl #2
  402582:	7c4c      	ldrb	r4, [r1, #17]
  402584:	2501      	movs	r5, #1
  402586:	f365 0483 	bfi	r4, r5, #2, #2
  40258a:	744c      	strb	r4, [r1, #17]
  40258c:	eb02 0182 	add.w	r1, r2, r2, lsl #2
  402590:	4c28      	ldr	r4, [pc, #160]	; (402634 <udd_ep_ack_out_received+0xf0>)
  402592:	eb04 0181 	add.w	r1, r4, r1, lsl #2
  402596:	7c49      	ldrb	r1, [r1, #17]
  402598:	f011 0f0c 	tst.w	r1, #12
  40259c:	d125      	bne.n	4025ea <udd_ep_ack_out_received+0xa6>
  40259e:	6b19      	ldr	r1, [r3, #48]	; 0x30
  4025a0:	9100      	str	r1, [sp, #0]
  4025a2:	9900      	ldr	r1, [sp, #0]
  4025a4:	f041 014f 	orr.w	r1, r1, #79	; 0x4f
  4025a8:	9100      	str	r1, [sp, #0]
  4025aa:	9900      	ldr	r1, [sp, #0]
  4025ac:	f021 0102 	bic.w	r1, r1, #2
  4025b0:	9100      	str	r1, [sp, #0]
  4025b2:	9900      	ldr	r1, [sp, #0]
  4025b4:	6319      	str	r1, [r3, #48]	; 0x30
  4025b6:	2300      	movs	r3, #0
  4025b8:	9301      	str	r3, [sp, #4]
  4025ba:	9b01      	ldr	r3, [sp, #4]
  4025bc:	2b13      	cmp	r3, #19
  4025be:	d806      	bhi.n	4025ce <udd_ep_ack_out_received+0x8a>

    No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
  4025c0:	bf00      	nop
  4025c2:	9b01      	ldr	r3, [sp, #4]
  4025c4:	3301      	adds	r3, #1
  4025c6:	9301      	str	r3, [sp, #4]
  4025c8:	9b01      	ldr	r3, [sp, #4]
  4025ca:	2b13      	cmp	r3, #19
  4025cc:	d9f8      	bls.n	4025c0 <udd_ep_ack_out_received+0x7c>
  4025ce:	b368      	cbz	r0, 40262c <udd_ep_ack_out_received+0xe8>
  4025d0:	2803      	cmp	r0, #3
  4025d2:	d02b      	beq.n	40262c <udd_ep_ack_out_received+0xe8>
  4025d4:	eb02 0282 	add.w	r2, r2, r2, lsl #2
  4025d8:	4b16      	ldr	r3, [pc, #88]	; (402634 <udd_ep_ack_out_received+0xf0>)
  4025da:	eb03 0382 	add.w	r3, r3, r2, lsl #2
  4025de:	7c5a      	ldrb	r2, [r3, #17]
  4025e0:	2101      	movs	r1, #1
  4025e2:	f361 0283 	bfi	r2, r1, #2, #2
  4025e6:	745a      	strb	r2, [r3, #17]
  4025e8:	e020      	b.n	40262c <udd_ep_ack_out_received+0xe8>
  4025ea:	6b19      	ldr	r1, [r3, #48]	; 0x30
  4025ec:	9102      	str	r1, [sp, #8]
  4025ee:	9902      	ldr	r1, [sp, #8]
  4025f0:	f041 014f 	orr.w	r1, r1, #79	; 0x4f
  4025f4:	9102      	str	r1, [sp, #8]
  4025f6:	9902      	ldr	r1, [sp, #8]
  4025f8:	f021 0140 	bic.w	r1, r1, #64	; 0x40
  4025fc:	9102      	str	r1, [sp, #8]
  4025fe:	9902      	ldr	r1, [sp, #8]
  402600:	6319      	str	r1, [r3, #48]	; 0x30
  402602:	2300      	movs	r3, #0
  402604:	9303      	str	r3, [sp, #12]
  402606:	9b03      	ldr	r3, [sp, #12]
  402608:	2b13      	cmp	r3, #19
  40260a:	d806      	bhi.n	40261a <udd_ep_ack_out_received+0xd6>
  40260c:	bf00      	nop
  40260e:	9b03      	ldr	r3, [sp, #12]
  402610:	3301      	adds	r3, #1
  402612:	9303      	str	r3, [sp, #12]
  402614:	9b03      	ldr	r3, [sp, #12]
  402616:	2b13      	cmp	r3, #19
  402618:	d9f8      	bls.n	40260c <udd_ep_ack_out_received+0xc8>
  40261a:	eb02 0282 	add.w	r2, r2, r2, lsl #2
  40261e:	4b05      	ldr	r3, [pc, #20]	; (402634 <udd_ep_ack_out_received+0xf0>)
  402620:	eb03 0282 	add.w	r2, r3, r2, lsl #2
  402624:	7c53      	ldrb	r3, [r2, #17]
  402626:	f36f 0383 	bfc	r3, #2, #2
  40262a:	7453      	strb	r3, [r2, #17]
  40262c:	b004      	add	sp, #16
  40262e:	bc30      	pop	{r4, r5}
  402630:	4770      	bx	lr
  402632:	bf00      	nop
  402634:	20000bd8 	.word	0x20000bd8

00402638 <udd_ep_in_sent>:
  402638:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  40263c:	b083      	sub	sp, #12
  40263e:	4686      	mov	lr, r0
  402640:	1e46      	subs	r6, r0, #1
  402642:	eb06 0286 	add.w	r2, r6, r6, lsl #2
  402646:	4b6c      	ldr	r3, [pc, #432]	; (4027f8 <udd_ep_in_sent+0x1c0>)
  402648:	eb03 0382 	add.w	r3, r3, r2, lsl #2
  40264c:	f893 8011 	ldrb.w	r8, [r3, #17]
  402650:	f3c8 0881 	ubfx	r8, r8, #2, #2
  402654:	b120      	cbz	r0, 402660 <udd_ep_in_sent+0x28>
  402656:	2803      	cmp	r0, #3
  402658:	bf0c      	ite	eq
  40265a:	2301      	moveq	r3, #1
  40265c:	2302      	movne	r3, #2
  40265e:	e000      	b.n	402662 <udd_ep_in_sent+0x2a>
  402660:	2301      	movs	r3, #1
  402662:	4543      	cmp	r3, r8
  402664:	f340 80be 	ble.w	4027e4 <udd_ep_in_sent+0x1ac>
  402668:	eb06 0386 	add.w	r3, r6, r6, lsl #2
  40266c:	4a62      	ldr	r2, [pc, #392]	; (4027f8 <udd_ep_in_sent+0x1c0>)
  40266e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
  402672:	68da      	ldr	r2, [r3, #12]
  402674:	689b      	ldr	r3, [r3, #8]
  402676:	429a      	cmp	r2, r3
  402678:	d309      	bcc.n	40268e <udd_ep_in_sent+0x56>
  40267a:	eb06 0486 	add.w	r4, r6, r6, lsl #2
  40267e:	4d5e      	ldr	r5, [pc, #376]	; (4027f8 <udd_ep_in_sent+0x1c0>)
  402680:	eb05 0484 	add.w	r4, r5, r4, lsl #2
  402684:	7c64      	ldrb	r4, [r4, #17]
  402686:	f014 0f40 	tst.w	r4, #64	; 0x40
  40268a:	f000 80ad 	beq.w	4027e8 <udd_ep_in_sent+0x1b0>
  40268e:	eb06 0786 	add.w	r7, r6, r6, lsl #2
  402692:	4c59      	ldr	r4, [pc, #356]	; (4027f8 <udd_ep_in_sent+0x1c0>)
  402694:	eb04 0787 	add.w	r7, r4, r7, lsl #2
  402698:	687c      	ldr	r4, [r7, #4]
  40269a:	4414      	add	r4, r2
  40269c:	1a9d      	subs	r5, r3, r2
  40269e:	8a3b      	ldrh	r3, [r7, #16]
  4026a0:	f3c3 0709 	ubfx	r7, r3, #0, #10
  4026a4:	42bd      	cmp	r5, r7
  4026a6:	bf3a      	itte	cc
  4026a8:	462f      	movcc	r7, r5
  4026aa:	f04f 0c01 	movcc.w	ip, #1
  4026ae:	f04f 0c00 	movcs.w	ip, #0
  4026b2:	eb06 0386 	add.w	r3, r6, r6, lsl #2
  4026b6:	4d50      	ldr	r5, [pc, #320]	; (4027f8 <udd_ep_in_sent+0x1c0>)
  4026b8:	eb05 0383 	add.w	r3, r5, r3, lsl #2
  4026bc:	443a      	add	r2, r7
  4026be:	60da      	str	r2, [r3, #12]
  4026c0:	2f07      	cmp	r7, #7
  4026c2:	d933      	bls.n	40272c <udd_ep_in_sent+0xf4>
  4026c4:	f104 0308 	add.w	r3, r4, #8
  4026c8:	463d      	mov	r5, r7
  4026ca:	0082      	lsls	r2, r0, #2
  4026cc:	f102 2240 	add.w	r2, r2, #1073758208	; 0x40004000
  4026d0:	f502 3240 	add.w	r2, r2, #196608	; 0x30000
  4026d4:	f813 9c08 	ldrb.w	r9, [r3, #-8]
  4026d8:	f8c2 9050 	str.w	r9, [r2, #80]	; 0x50
  4026dc:	f813 9c07 	ldrb.w	r9, [r3, #-7]
  4026e0:	f8c2 9050 	str.w	r9, [r2, #80]	; 0x50
  4026e4:	f813 9c06 	ldrb.w	r9, [r3, #-6]
  4026e8:	f8c2 9050 	str.w	r9, [r2, #80]	; 0x50
  4026ec:	f813 9c05 	ldrb.w	r9, [r3, #-5]
  4026f0:	f8c2 9050 	str.w	r9, [r2, #80]	; 0x50
  4026f4:	f813 9c04 	ldrb.w	r9, [r3, #-4]
  4026f8:	f8c2 9050 	str.w	r9, [r2, #80]	; 0x50
  4026fc:	f813 9c03 	ldrb.w	r9, [r3, #-3]
  402700:	f8c2 9050 	str.w	r9, [r2, #80]	; 0x50
  402704:	f813 9c02 	ldrb.w	r9, [r3, #-2]
  402708:	f8c2 9050 	str.w	r9, [r2, #80]	; 0x50
  40270c:	f813 9c01 	ldrb.w	r9, [r3, #-1]
  402710:	f8c2 9050 	str.w	r9, [r2, #80]	; 0x50
  402714:	3d08      	subs	r5, #8
  402716:	3308      	adds	r3, #8
  402718:	2d07      	cmp	r5, #7
  40271a:	d8db      	bhi.n	4026d4 <udd_ep_in_sent+0x9c>
  40271c:	f1a7 0308 	sub.w	r3, r7, #8
  402720:	f023 0307 	bic.w	r3, r3, #7
  402724:	3308      	adds	r3, #8
  402726:	441c      	add	r4, r3
  402728:	f007 0707 	and.w	r7, r7, #7
  40272c:	b14f      	cbz	r7, 402742 <udd_ep_in_sent+0x10a>
  40272e:	19e3      	adds	r3, r4, r7
  402730:	4f32      	ldr	r7, [pc, #200]	; (4027fc <udd_ep_in_sent+0x1c4>)
  402732:	f814 5b01 	ldrb.w	r5, [r4], #1
  402736:	f10e 0214 	add.w	r2, lr, #20
  40273a:	f847 5022 	str.w	r5, [r7, r2, lsl #2]
  40273e:	429c      	cmp	r4, r3
  402740:	d1f7      	bne.n	402732 <udd_ep_in_sent+0xfa>
  402742:	eb06 0386 	add.w	r3, r6, r6, lsl #2
  402746:	4a2c      	ldr	r2, [pc, #176]	; (4027f8 <udd_ep_in_sent+0x1c0>)
  402748:	eb02 0383 	add.w	r3, r2, r3, lsl #2
  40274c:	f108 0801 	add.w	r8, r8, #1
  402750:	7c5a      	ldrb	r2, [r3, #17]
  402752:	f368 0283 	bfi	r2, r8, #2, #2
  402756:	745a      	strb	r2, [r3, #17]
  402758:	b1e1      	cbz	r1, 402794 <udd_ep_in_sent+0x15c>
  40275a:	0080      	lsls	r0, r0, #2
  40275c:	f100 2040 	add.w	r0, r0, #1073758208	; 0x40004000
  402760:	f500 3040 	add.w	r0, r0, #196608	; 0x30000
  402764:	6b03      	ldr	r3, [r0, #48]	; 0x30
  402766:	9300      	str	r3, [sp, #0]
  402768:	9b00      	ldr	r3, [sp, #0]
  40276a:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  40276e:	9300      	str	r3, [sp, #0]
  402770:	9b00      	ldr	r3, [sp, #0]
  402772:	f043 0310 	orr.w	r3, r3, #16
  402776:	9300      	str	r3, [sp, #0]
  402778:	9b00      	ldr	r3, [sp, #0]
  40277a:	6303      	str	r3, [r0, #48]	; 0x30
  40277c:	2300      	movs	r3, #0
  40277e:	9301      	str	r3, [sp, #4]
  402780:	9b01      	ldr	r3, [sp, #4]
  402782:	2b13      	cmp	r3, #19
  402784:	d806      	bhi.n	402794 <udd_ep_in_sent+0x15c>
  402786:	bf00      	nop
  402788:	9b01      	ldr	r3, [sp, #4]
  40278a:	3301      	adds	r3, #1
  40278c:	9301      	str	r3, [sp, #4]
  40278e:	9b01      	ldr	r3, [sp, #4]
  402790:	2b13      	cmp	r3, #19
  402792:	d9f8      	bls.n	402786 <udd_ep_in_sent+0x14e>
  402794:	f1bc 0f00 	cmp.w	ip, #0
  402798:	d008      	beq.n	4027ac <udd_ep_in_sent+0x174>
  40279a:	eb06 0386 	add.w	r3, r6, r6, lsl #2
  40279e:	4a16      	ldr	r2, [pc, #88]	; (4027f8 <udd_ep_in_sent+0x1c0>)
  4027a0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
  4027a4:	7c5a      	ldrb	r2, [r3, #17]
  4027a6:	f36f 1286 	bfc	r2, #6, #1
  4027aa:	745a      	strb	r2, [r3, #17]
  4027ac:	eb06 0386 	add.w	r3, r6, r6, lsl #2
  4027b0:	4a11      	ldr	r2, [pc, #68]	; (4027f8 <udd_ep_in_sent+0x1c0>)
  4027b2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
  4027b6:	68da      	ldr	r2, [r3, #12]
  4027b8:	689b      	ldr	r3, [r3, #8]
  4027ba:	429a      	cmp	r2, r3
  4027bc:	d316      	bcc.n	4027ec <udd_ep_in_sent+0x1b4>
  4027be:	eb06 0386 	add.w	r3, r6, r6, lsl #2
  4027c2:	4a0d      	ldr	r2, [pc, #52]	; (4027f8 <udd_ep_in_sent+0x1c0>)
  4027c4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
  4027c8:	7c5b      	ldrb	r3, [r3, #17]
  4027ca:	f013 0f40 	tst.w	r3, #64	; 0x40
  4027ce:	d10f      	bne.n	4027f0 <udd_ep_in_sent+0x1b8>
  4027d0:	eb06 0686 	add.w	r6, r6, r6, lsl #2
  4027d4:	eb02 0686 	add.w	r6, r2, r6, lsl #2
  4027d8:	7c73      	ldrb	r3, [r6, #17]
  4027da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  4027de:	7473      	strb	r3, [r6, #17]
  4027e0:	2000      	movs	r0, #0
  4027e2:	e006      	b.n	4027f2 <udd_ep_in_sent+0x1ba>
  4027e4:	2001      	movs	r0, #1
  4027e6:	e004      	b.n	4027f2 <udd_ep_in_sent+0x1ba>
  4027e8:	2000      	movs	r0, #0
  4027ea:	e002      	b.n	4027f2 <udd_ep_in_sent+0x1ba>
  4027ec:	2001      	movs	r0, #1
  4027ee:	e000      	b.n	4027f2 <udd_ep_in_sent+0x1ba>
  4027f0:	2001      	movs	r0, #1
  4027f2:	b003      	add	sp, #12
  4027f4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  4027f8:	20000bd8 	.word	0x20000bd8
  4027fc:	40034000 	.word	0x40034000

00402800 <udd_sleep_mode>:
  402800:	b410      	push	{r4}
  402802:	4604      	mov	r4, r0
  402804:	2800      	cmp	r0, #0
  402806:	d135      	bne.n	402874 <udd_sleep_mode+0x74>
  402808:	4b1e      	ldr	r3, [pc, #120]	; (402884 <udd_sleep_mode+0x84>)
  40280a:	781b      	ldrb	r3, [r3, #0]
  40280c:	b37b      	cbz	r3, 40286e <udd_sleep_mode+0x6e>
  40280e:	4b1e      	ldr	r3, [pc, #120]	; (402888 <udd_sleep_mode+0x88>)
  402810:	789b      	ldrb	r3, [r3, #2]
  402812:	b903      	cbnz	r3, 402816 <udd_sleep_mode+0x16>
  402814:	e7fe      	b.n	402814 <udd_sleep_mode+0x14>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  402816:	f3ef 8310 	mrs	r3, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
  40281a:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
  40281c:	f3bf 8f5f 	dmb	sy
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
  402820:	2100      	movs	r1, #0
  402822:	4a1a      	ldr	r2, [pc, #104]	; (40288c <udd_sleep_mode+0x8c>)
  402824:	7011      	strb	r1, [r2, #0]
  402826:	4918      	ldr	r1, [pc, #96]	; (402888 <udd_sleep_mode+0x88>)
  402828:	788a      	ldrb	r2, [r1, #2]
  40282a:	3a01      	subs	r2, #1
  40282c:	708a      	strb	r2, [r1, #2]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  40282e:	b9f3      	cbnz	r3, 40286e <udd_sleep_mode+0x6e>
		cpu_irq_enable();
  402830:	2201      	movs	r2, #1
  402832:	4b16      	ldr	r3, [pc, #88]	; (40288c <udd_sleep_mode+0x8c>)
  402834:	701a      	strb	r2, [r3, #0]
  402836:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
  40283a:	b662      	cpsie	i
  40283c:	e017      	b.n	40286e <udd_sleep_mode+0x6e>
  40283e:	4b12      	ldr	r3, [pc, #72]	; (402888 <udd_sleep_mode+0x88>)
  402840:	789b      	ldrb	r3, [r3, #2]
  402842:	2bff      	cmp	r3, #255	; 0xff
  402844:	d100      	bne.n	402848 <udd_sleep_mode+0x48>
  402846:	e7fe      	b.n	402846 <udd_sleep_mode+0x46>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  402848:	f3ef 8310 	mrs	r3, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
  40284c:	b672      	cpsid	i
  40284e:	f3bf 8f5f 	dmb	sy
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
  402852:	2100      	movs	r1, #0
  402854:	4a0d      	ldr	r2, [pc, #52]	; (40288c <udd_sleep_mode+0x8c>)
  402856:	7011      	strb	r1, [r2, #0]
  402858:	490b      	ldr	r1, [pc, #44]	; (402888 <udd_sleep_mode+0x88>)
  40285a:	788a      	ldrb	r2, [r1, #2]
  40285c:	3201      	adds	r2, #1
  40285e:	708a      	strb	r2, [r1, #2]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  402860:	b92b      	cbnz	r3, 40286e <udd_sleep_mode+0x6e>
		cpu_irq_enable();
  402862:	2201      	movs	r2, #1
  402864:	4b09      	ldr	r3, [pc, #36]	; (40288c <udd_sleep_mode+0x8c>)
  402866:	701a      	strb	r2, [r3, #0]
  402868:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
  40286c:	b662      	cpsie	i
  40286e:	4b05      	ldr	r3, [pc, #20]	; (402884 <udd_sleep_mode+0x84>)
  402870:	701c      	strb	r4, [r3, #0]
  402872:	e004      	b.n	40287e <udd_sleep_mode+0x7e>
  402874:	4b03      	ldr	r3, [pc, #12]	; (402884 <udd_sleep_mode+0x84>)
  402876:	781b      	ldrb	r3, [r3, #0]
  402878:	2b00      	cmp	r3, #0
  40287a:	d1f8      	bne.n	40286e <udd_sleep_mode+0x6e>
  40287c:	e7df      	b.n	40283e <udd_sleep_mode+0x3e>
  40287e:	f85d 4b04 	ldr.w	r4, [sp], #4
  402882:	4770      	bx	lr
  402884:	20000c14 	.word	0x20000c14
  402888:	2000b0a8 	.word	0x2000b0a8
  40288c:	200000a0 	.word	0x200000a0

00402890 <UDP_Handler>:
  402890:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  402894:	b0b1      	sub	sp, #196	; 0xc4
  402896:	4b95      	ldr	r3, [pc, #596]	; (402aec <UDP_Handler+0x25c>)
  402898:	4798      	blx	r3
  40289a:	b960      	cbnz	r0, 4028b6 <UDP_Handler+0x26>
  40289c:	4b94      	ldr	r3, [pc, #592]	; (402af0 <UDP_Handler+0x260>)
  40289e:	69db      	ldr	r3, [r3, #28]
  4028a0:	f413 7f80 	tst.w	r3, #256	; 0x100
  4028a4:	d107      	bne.n	4028b6 <UDP_Handler+0x26>
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
  4028a6:	b672      	cpsid	i
  4028a8:	f3bf 8f5f 	dmb	sy
  4028ac:	2200      	movs	r2, #0
  4028ae:	4b91      	ldr	r3, [pc, #580]	; (402af4 <UDP_Handler+0x264>)
  4028b0:	701a      	strb	r2, [r3, #0]
  4028b2:	f000 bd54 	b.w	40335e <UDP_Handler+0xace>
  4028b6:	2022      	movs	r0, #34	; 0x22
  4028b8:	4b8f      	ldr	r3, [pc, #572]	; (402af8 <UDP_Handler+0x268>)
  4028ba:	4798      	blx	r3
  4028bc:	4b8c      	ldr	r3, [pc, #560]	; (402af0 <UDP_Handler+0x260>)
  4028be:	699b      	ldr	r3, [r3, #24]
  4028c0:	f413 6f00 	tst.w	r3, #2048	; 0x800
  4028c4:	d00c      	beq.n	4028e0 <UDP_Handler+0x50>
  4028c6:	4b8a      	ldr	r3, [pc, #552]	; (402af0 <UDP_Handler+0x260>)
  4028c8:	69db      	ldr	r3, [r3, #28]
  4028ca:	f413 6f00 	tst.w	r3, #2048	; 0x800
  4028ce:	d007      	beq.n	4028e0 <UDP_Handler+0x50>
  4028d0:	f44f 6200 	mov.w	r2, #2048	; 0x800
  4028d4:	4b86      	ldr	r3, [pc, #536]	; (402af0 <UDP_Handler+0x260>)
  4028d6:	621a      	str	r2, [r3, #32]
  4028d8:	4b88      	ldr	r3, [pc, #544]	; (402afc <UDP_Handler+0x26c>)
  4028da:	4798      	blx	r3
  4028dc:	f000 bd3f 	b.w	40335e <UDP_Handler+0xace>
  4028e0:	4b83      	ldr	r3, [pc, #524]	; (402af0 <UDP_Handler+0x260>)
  4028e2:	69db      	ldr	r3, [r3, #28]
  4028e4:	f013 0f01 	tst.w	r3, #1
  4028e8:	f000 81f2 	beq.w	402cd0 <UDP_Handler+0x440>
  4028ec:	4b80      	ldr	r3, [pc, #512]	; (402af0 <UDP_Handler+0x260>)
  4028ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4028f0:	f013 0f04 	tst.w	r3, #4
  4028f4:	f000 80c0 	beq.w	402a78 <UDP_Handler+0x1e8>
  4028f8:	4b81      	ldr	r3, [pc, #516]	; (402b00 <UDP_Handler+0x270>)
  4028fa:	781b      	ldrb	r3, [r3, #0]
  4028fc:	b11b      	cbz	r3, 402906 <UDP_Handler+0x76>
  4028fe:	4b81      	ldr	r3, [pc, #516]	; (402b04 <UDP_Handler+0x274>)
  402900:	4798      	blx	r3
  402902:	4b81      	ldr	r3, [pc, #516]	; (402b08 <UDP_Handler+0x278>)
  402904:	4798      	blx	r3
  402906:	4b7a      	ldr	r3, [pc, #488]	; (402af0 <UDP_Handler+0x260>)
  402908:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  40290a:	f3c3 430a 	ubfx	r3, r3, #16, #11
  40290e:	2b08      	cmp	r3, #8
  402910:	d01c      	beq.n	40294c <UDP_Handler+0xbc>
  402912:	4a77      	ldr	r2, [pc, #476]	; (402af0 <UDP_Handler+0x260>)
  402914:	6b13      	ldr	r3, [r2, #48]	; 0x30
  402916:	9302      	str	r3, [sp, #8]
  402918:	9b02      	ldr	r3, [sp, #8]
  40291a:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  40291e:	9302      	str	r3, [sp, #8]
  402920:	9b02      	ldr	r3, [sp, #8]
  402922:	f023 0304 	bic.w	r3, r3, #4
  402926:	9302      	str	r3, [sp, #8]
  402928:	9b02      	ldr	r3, [sp, #8]
  40292a:	6313      	str	r3, [r2, #48]	; 0x30
  40292c:	2300      	movs	r3, #0
  40292e:	9303      	str	r3, [sp, #12]
  402930:	9b03      	ldr	r3, [sp, #12]
  402932:	2b13      	cmp	r3, #19
  402934:	d806      	bhi.n	402944 <UDP_Handler+0xb4>

    No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
  402936:	bf00      	nop
  402938:	9b03      	ldr	r3, [sp, #12]
  40293a:	3301      	adds	r3, #1
  40293c:	9303      	str	r3, [sp, #12]
  40293e:	9b03      	ldr	r3, [sp, #12]
  402940:	2b13      	cmp	r3, #19
  402942:	d9f8      	bls.n	402936 <UDP_Handler+0xa6>
  402944:	4b71      	ldr	r3, [pc, #452]	; (402b0c <UDP_Handler+0x27c>)
  402946:	4798      	blx	r3
  402948:	f000 bd09 	b.w	40335e <UDP_Handler+0xace>
  40294c:	4b70      	ldr	r3, [pc, #448]	; (402b10 <UDP_Handler+0x280>)
  40294e:	f103 0008 	add.w	r0, r3, #8
  402952:	4967      	ldr	r1, [pc, #412]	; (402af0 <UDP_Handler+0x260>)
  402954:	6d0a      	ldr	r2, [r1, #80]	; 0x50
  402956:	f803 2f01 	strb.w	r2, [r3, #1]!
  40295a:	4283      	cmp	r3, r0
  40295c:	d1fa      	bne.n	402954 <UDP_Handler+0xc4>
  40295e:	4b6d      	ldr	r3, [pc, #436]	; (402b14 <UDP_Handler+0x284>)
  402960:	4798      	blx	r3
  402962:	b9e0      	cbnz	r0, 40299e <UDP_Handler+0x10e>
  402964:	4a62      	ldr	r2, [pc, #392]	; (402af0 <UDP_Handler+0x260>)
  402966:	6b13      	ldr	r3, [r2, #48]	; 0x30
  402968:	9304      	str	r3, [sp, #16]
  40296a:	9b04      	ldr	r3, [sp, #16]
  40296c:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  402970:	9304      	str	r3, [sp, #16]
  402972:	9b04      	ldr	r3, [sp, #16]
  402974:	f023 0304 	bic.w	r3, r3, #4
  402978:	9304      	str	r3, [sp, #16]
  40297a:	9b04      	ldr	r3, [sp, #16]
  40297c:	6313      	str	r3, [r2, #48]	; 0x30
  40297e:	2300      	movs	r3, #0
  402980:	9305      	str	r3, [sp, #20]
  402982:	9b05      	ldr	r3, [sp, #20]
  402984:	2b13      	cmp	r3, #19
  402986:	d806      	bhi.n	402996 <UDP_Handler+0x106>
  402988:	bf00      	nop
  40298a:	9b05      	ldr	r3, [sp, #20]
  40298c:	3301      	adds	r3, #1
  40298e:	9305      	str	r3, [sp, #20]
  402990:	9b05      	ldr	r3, [sp, #20]
  402992:	2b13      	cmp	r3, #19
  402994:	d9f8      	bls.n	402988 <UDP_Handler+0xf8>
  402996:	4b5d      	ldr	r3, [pc, #372]	; (402b0c <UDP_Handler+0x27c>)
  402998:	4798      	blx	r3
  40299a:	f000 bce0 	b.w	40335e <UDP_Handler+0xace>
  40299e:	4b5e      	ldr	r3, [pc, #376]	; (402b18 <UDP_Handler+0x288>)
  4029a0:	f993 3000 	ldrsb.w	r3, [r3]
  4029a4:	2b00      	cmp	r3, #0
  4029a6:	da3d      	bge.n	402a24 <UDP_Handler+0x194>
  4029a8:	4a51      	ldr	r2, [pc, #324]	; (402af0 <UDP_Handler+0x260>)
  4029aa:	6b13      	ldr	r3, [r2, #48]	; 0x30
  4029ac:	9306      	str	r3, [sp, #24]
  4029ae:	9b06      	ldr	r3, [sp, #24]
  4029b0:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  4029b4:	9306      	str	r3, [sp, #24]
  4029b6:	9b06      	ldr	r3, [sp, #24]
  4029b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  4029bc:	9306      	str	r3, [sp, #24]
  4029be:	9b06      	ldr	r3, [sp, #24]
  4029c0:	6313      	str	r3, [r2, #48]	; 0x30
  4029c2:	2300      	movs	r3, #0
  4029c4:	9307      	str	r3, [sp, #28]
  4029c6:	9b07      	ldr	r3, [sp, #28]
  4029c8:	2b13      	cmp	r3, #19
  4029ca:	d806      	bhi.n	4029da <UDP_Handler+0x14a>
  4029cc:	bf00      	nop
  4029ce:	9b07      	ldr	r3, [sp, #28]
  4029d0:	3301      	adds	r3, #1
  4029d2:	9307      	str	r3, [sp, #28]
  4029d4:	9b07      	ldr	r3, [sp, #28]
  4029d6:	2b13      	cmp	r3, #19
  4029d8:	d9f8      	bls.n	4029cc <UDP_Handler+0x13c>
  4029da:	4a45      	ldr	r2, [pc, #276]	; (402af0 <UDP_Handler+0x260>)
  4029dc:	6b13      	ldr	r3, [r2, #48]	; 0x30
  4029de:	9308      	str	r3, [sp, #32]
  4029e0:	9b08      	ldr	r3, [sp, #32]
  4029e2:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  4029e6:	9308      	str	r3, [sp, #32]
  4029e8:	9b08      	ldr	r3, [sp, #32]
  4029ea:	f023 0304 	bic.w	r3, r3, #4
  4029ee:	9308      	str	r3, [sp, #32]
  4029f0:	9b08      	ldr	r3, [sp, #32]
  4029f2:	6313      	str	r3, [r2, #48]	; 0x30
  4029f4:	2300      	movs	r3, #0
  4029f6:	9309      	str	r3, [sp, #36]	; 0x24
  4029f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
  4029fa:	2b13      	cmp	r3, #19
  4029fc:	d806      	bhi.n	402a0c <UDP_Handler+0x17c>
  4029fe:	bf00      	nop
  402a00:	9b09      	ldr	r3, [sp, #36]	; 0x24
  402a02:	3301      	adds	r3, #1
  402a04:	9309      	str	r3, [sp, #36]	; 0x24
  402a06:	9b09      	ldr	r3, [sp, #36]	; 0x24
  402a08:	2b13      	cmp	r3, #19
  402a0a:	d9f8      	bls.n	4029fe <UDP_Handler+0x16e>
  402a0c:	2300      	movs	r3, #0
  402a0e:	4a43      	ldr	r2, [pc, #268]	; (402b1c <UDP_Handler+0x28c>)
  402a10:	8013      	strh	r3, [r2, #0]
  402a12:	4a43      	ldr	r2, [pc, #268]	; (402b20 <UDP_Handler+0x290>)
  402a14:	8013      	strh	r3, [r2, #0]
  402a16:	2202      	movs	r2, #2
  402a18:	4b39      	ldr	r3, [pc, #228]	; (402b00 <UDP_Handler+0x270>)
  402a1a:	701a      	strb	r2, [r3, #0]
  402a1c:	4b41      	ldr	r3, [pc, #260]	; (402b24 <UDP_Handler+0x294>)
  402a1e:	4798      	blx	r3
  402a20:	f000 bc9d 	b.w	40335e <UDP_Handler+0xace>
  402a24:	4a32      	ldr	r2, [pc, #200]	; (402af0 <UDP_Handler+0x260>)
  402a26:	6b13      	ldr	r3, [r2, #48]	; 0x30
  402a28:	930a      	str	r3, [sp, #40]	; 0x28
  402a2a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  402a2c:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  402a30:	930a      	str	r3, [sp, #40]	; 0x28
  402a32:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  402a34:	f023 0304 	bic.w	r3, r3, #4
  402a38:	930a      	str	r3, [sp, #40]	; 0x28
  402a3a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  402a3c:	6313      	str	r3, [r2, #48]	; 0x30
  402a3e:	2300      	movs	r3, #0
  402a40:	930b      	str	r3, [sp, #44]	; 0x2c
  402a42:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  402a44:	2b13      	cmp	r3, #19
  402a46:	d806      	bhi.n	402a56 <UDP_Handler+0x1c6>
  402a48:	bf00      	nop
  402a4a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  402a4c:	3301      	adds	r3, #1
  402a4e:	930b      	str	r3, [sp, #44]	; 0x2c
  402a50:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  402a52:	2b13      	cmp	r3, #19
  402a54:	d9f8      	bls.n	402a48 <UDP_Handler+0x1b8>
  402a56:	4b30      	ldr	r3, [pc, #192]	; (402b18 <UDP_Handler+0x288>)
  402a58:	88db      	ldrh	r3, [r3, #6]
  402a5a:	b91b      	cbnz	r3, 402a64 <UDP_Handler+0x1d4>
  402a5c:	4b32      	ldr	r3, [pc, #200]	; (402b28 <UDP_Handler+0x298>)
  402a5e:	4798      	blx	r3
  402a60:	f000 bc7d 	b.w	40335e <UDP_Handler+0xace>
  402a64:	2300      	movs	r3, #0
  402a66:	4a2d      	ldr	r2, [pc, #180]	; (402b1c <UDP_Handler+0x28c>)
  402a68:	8013      	strh	r3, [r2, #0]
  402a6a:	4a2d      	ldr	r2, [pc, #180]	; (402b20 <UDP_Handler+0x290>)
  402a6c:	8013      	strh	r3, [r2, #0]
  402a6e:	2201      	movs	r2, #1
  402a70:	4b23      	ldr	r3, [pc, #140]	; (402b00 <UDP_Handler+0x270>)
  402a72:	701a      	strb	r2, [r3, #0]
  402a74:	f000 bc73 	b.w	40335e <UDP_Handler+0xace>
  402a78:	4b1d      	ldr	r3, [pc, #116]	; (402af0 <UDP_Handler+0x260>)
  402a7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  402a7c:	f013 0f01 	tst.w	r3, #1
  402a80:	d003      	beq.n	402a8a <UDP_Handler+0x1fa>
  402a82:	4b28      	ldr	r3, [pc, #160]	; (402b24 <UDP_Handler+0x294>)
  402a84:	4798      	blx	r3
  402a86:	f000 bc6a 	b.w	40335e <UDP_Handler+0xace>
  402a8a:	4b19      	ldr	r3, [pc, #100]	; (402af0 <UDP_Handler+0x260>)
  402a8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  402a8e:	f013 0f02 	tst.w	r3, #2
  402a92:	f000 8118 	beq.w	402cc6 <UDP_Handler+0x436>
  402a96:	4b1a      	ldr	r3, [pc, #104]	; (402b00 <UDP_Handler+0x270>)
  402a98:	781b      	ldrb	r3, [r3, #0]
  402a9a:	2b01      	cmp	r3, #1
  402a9c:	d046      	beq.n	402b2c <UDP_Handler+0x29c>
  402a9e:	2b02      	cmp	r3, #2
  402aa0:	d001      	beq.n	402aa6 <UDP_Handler+0x216>
  402aa2:	2b04      	cmp	r3, #4
  402aa4:	d102      	bne.n	402aac <UDP_Handler+0x21c>
  402aa6:	4b17      	ldr	r3, [pc, #92]	; (402b04 <UDP_Handler+0x274>)
  402aa8:	4798      	blx	r3
  402aaa:	e001      	b.n	402ab0 <UDP_Handler+0x220>
  402aac:	4b17      	ldr	r3, [pc, #92]	; (402b0c <UDP_Handler+0x27c>)
  402aae:	4798      	blx	r3
  402ab0:	4a0f      	ldr	r2, [pc, #60]	; (402af0 <UDP_Handler+0x260>)
  402ab2:	6b13      	ldr	r3, [r2, #48]	; 0x30
  402ab4:	930c      	str	r3, [sp, #48]	; 0x30
  402ab6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  402ab8:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  402abc:	930c      	str	r3, [sp, #48]	; 0x30
  402abe:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  402ac0:	f023 0302 	bic.w	r3, r3, #2
  402ac4:	930c      	str	r3, [sp, #48]	; 0x30
  402ac6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  402ac8:	6313      	str	r3, [r2, #48]	; 0x30
  402aca:	2300      	movs	r3, #0
  402acc:	930d      	str	r3, [sp, #52]	; 0x34
  402ace:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  402ad0:	2b13      	cmp	r3, #19
  402ad2:	d806      	bhi.n	402ae2 <UDP_Handler+0x252>
  402ad4:	bf00      	nop
  402ad6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  402ad8:	3301      	adds	r3, #1
  402ada:	930d      	str	r3, [sp, #52]	; 0x34
  402adc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  402ade:	2b13      	cmp	r3, #19
  402ae0:	d9f8      	bls.n	402ad4 <UDP_Handler+0x244>
  402ae2:	4b09      	ldr	r3, [pc, #36]	; (402b08 <UDP_Handler+0x278>)
  402ae4:	4798      	blx	r3
  402ae6:	f000 bc3a 	b.w	40335e <UDP_Handler+0xace>
  402aea:	bf00      	nop
  402aec:	004021bd 	.word	0x004021bd
  402af0:	40034000 	.word	0x40034000
  402af4:	200000a0 	.word	0x200000a0
  402af8:	00402101 	.word	0x00402101
  402afc:	004017a5 	.word	0x004017a5
  402b00:	20000c19 	.word	0x20000c19
  402b04:	004022f5 	.word	0x004022f5
  402b08:	0040224d 	.word	0x0040224d
  402b0c:	00402265 	.word	0x00402265
  402b10:	2000b0b3 	.word	0x2000b0b3
  402b14:	004017e1 	.word	0x004017e1
  402b18:	2000b0b4 	.word	0x2000b0b4
  402b1c:	20000bd6 	.word	0x20000bd6
  402b20:	20000c16 	.word	0x20000c16
  402b24:	00402305 	.word	0x00402305
  402b28:	004022ad 	.word	0x004022ad
  402b2c:	4b92      	ldr	r3, [pc, #584]	; (402d78 <UDP_Handler+0x4e8>)
  402b2e:	6b19      	ldr	r1, [r3, #48]	; 0x30
  402b30:	f3c1 410a 	ubfx	r1, r1, #16, #11
  402b34:	4b91      	ldr	r3, [pc, #580]	; (402d7c <UDP_Handler+0x4ec>)
  402b36:	899b      	ldrh	r3, [r3, #12]
  402b38:	4a91      	ldr	r2, [pc, #580]	; (402d80 <UDP_Handler+0x4f0>)
  402b3a:	8815      	ldrh	r5, [r2, #0]
  402b3c:	186a      	adds	r2, r5, r1
  402b3e:	4293      	cmp	r3, r2
  402b40:	bfae      	itee	ge
  402b42:	b289      	uxthge	r1, r1
  402b44:	1b5b      	sublt	r3, r3, r5
  402b46:	b299      	uxthlt	r1, r3
  402b48:	4b8c      	ldr	r3, [pc, #560]	; (402d7c <UDP_Handler+0x4ec>)
  402b4a:	6898      	ldr	r0, [r3, #8]
  402b4c:	4428      	add	r0, r5
  402b4e:	b1a9      	cbz	r1, 402b7c <UDP_Handler+0x2ec>
  402b50:	4602      	mov	r2, r0
  402b52:	4c89      	ldr	r4, [pc, #548]	; (402d78 <UDP_Handler+0x4e8>)
  402b54:	6d23      	ldr	r3, [r4, #80]	; 0x50
  402b56:	f802 3b01 	strb.w	r3, [r2], #1
  402b5a:	1a13      	subs	r3, r2, r0
  402b5c:	b2db      	uxtb	r3, r3
  402b5e:	428b      	cmp	r3, r1
  402b60:	d3f8      	bcc.n	402b54 <UDP_Handler+0x2c4>
  402b62:	440d      	add	r5, r1
  402b64:	b2ad      	uxth	r5, r5
  402b66:	4b86      	ldr	r3, [pc, #536]	; (402d80 <UDP_Handler+0x4f0>)
  402b68:	801d      	strh	r5, [r3, #0]
  402b6a:	2940      	cmp	r1, #64	; 0x40
  402b6c:	d106      	bne.n	402b7c <UDP_Handler+0x2ec>
  402b6e:	4b83      	ldr	r3, [pc, #524]	; (402d7c <UDP_Handler+0x4ec>)
  402b70:	88da      	ldrh	r2, [r3, #6]
  402b72:	4b84      	ldr	r3, [pc, #528]	; (402d84 <UDP_Handler+0x4f4>)
  402b74:	881b      	ldrh	r3, [r3, #0]
  402b76:	442b      	add	r3, r5
  402b78:	429a      	cmp	r2, r3
  402b7a:	dc3e      	bgt.n	402bfa <UDP_Handler+0x36a>
  402b7c:	4b7f      	ldr	r3, [pc, #508]	; (402d7c <UDP_Handler+0x4ec>)
  402b7e:	819d      	strh	r5, [r3, #12]
  402b80:	695b      	ldr	r3, [r3, #20]
  402b82:	b1f3      	cbz	r3, 402bc2 <UDP_Handler+0x332>
  402b84:	4798      	blx	r3
  402b86:	b9e0      	cbnz	r0, 402bc2 <UDP_Handler+0x332>
  402b88:	4b7f      	ldr	r3, [pc, #508]	; (402d88 <UDP_Handler+0x4f8>)
  402b8a:	4798      	blx	r3
  402b8c:	4a7a      	ldr	r2, [pc, #488]	; (402d78 <UDP_Handler+0x4e8>)
  402b8e:	6b13      	ldr	r3, [r2, #48]	; 0x30
  402b90:	930e      	str	r3, [sp, #56]	; 0x38
  402b92:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  402b94:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  402b98:	930e      	str	r3, [sp, #56]	; 0x38
  402b9a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  402b9c:	f023 0302 	bic.w	r3, r3, #2
  402ba0:	930e      	str	r3, [sp, #56]	; 0x38
  402ba2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  402ba4:	6313      	str	r3, [r2, #48]	; 0x30
  402ba6:	2300      	movs	r3, #0
  402ba8:	930f      	str	r3, [sp, #60]	; 0x3c
  402baa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  402bac:	2b13      	cmp	r3, #19
  402bae:	f200 83d6 	bhi.w	40335e <UDP_Handler+0xace>
  402bb2:	bf00      	nop
  402bb4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  402bb6:	3301      	adds	r3, #1
  402bb8:	930f      	str	r3, [sp, #60]	; 0x3c
  402bba:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  402bbc:	2b13      	cmp	r3, #19
  402bbe:	d9f8      	bls.n	402bb2 <UDP_Handler+0x322>
  402bc0:	e3cd      	b.n	40335e <UDP_Handler+0xace>
  402bc2:	4a6d      	ldr	r2, [pc, #436]	; (402d78 <UDP_Handler+0x4e8>)
  402bc4:	6b13      	ldr	r3, [r2, #48]	; 0x30
  402bc6:	9310      	str	r3, [sp, #64]	; 0x40
  402bc8:	9b10      	ldr	r3, [sp, #64]	; 0x40
  402bca:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  402bce:	9310      	str	r3, [sp, #64]	; 0x40
  402bd0:	9b10      	ldr	r3, [sp, #64]	; 0x40
  402bd2:	f023 0302 	bic.w	r3, r3, #2
  402bd6:	9310      	str	r3, [sp, #64]	; 0x40
  402bd8:	9b10      	ldr	r3, [sp, #64]	; 0x40
  402bda:	6313      	str	r3, [r2, #48]	; 0x30
  402bdc:	2300      	movs	r3, #0
  402bde:	9311      	str	r3, [sp, #68]	; 0x44
  402be0:	9b11      	ldr	r3, [sp, #68]	; 0x44
  402be2:	2b13      	cmp	r3, #19
  402be4:	d806      	bhi.n	402bf4 <UDP_Handler+0x364>
  402be6:	bf00      	nop
  402be8:	9b11      	ldr	r3, [sp, #68]	; 0x44
  402bea:	3301      	adds	r3, #1
  402bec:	9311      	str	r3, [sp, #68]	; 0x44
  402bee:	9b11      	ldr	r3, [sp, #68]	; 0x44
  402bf0:	2b13      	cmp	r3, #19
  402bf2:	d9f8      	bls.n	402be6 <UDP_Handler+0x356>
  402bf4:	4b65      	ldr	r3, [pc, #404]	; (402d8c <UDP_Handler+0x4fc>)
  402bf6:	4798      	blx	r3
  402bf8:	e3b1      	b.n	40335e <UDP_Handler+0xace>
  402bfa:	4b60      	ldr	r3, [pc, #384]	; (402d7c <UDP_Handler+0x4ec>)
  402bfc:	899b      	ldrh	r3, [r3, #12]
  402bfe:	42ab      	cmp	r3, r5
  402c00:	d146      	bne.n	402c90 <UDP_Handler+0x400>
  402c02:	4b5e      	ldr	r3, [pc, #376]	; (402d7c <UDP_Handler+0x4ec>)
  402c04:	695b      	ldr	r3, [r3, #20]
  402c06:	b9e3      	cbnz	r3, 402c42 <UDP_Handler+0x3b2>
  402c08:	4b5f      	ldr	r3, [pc, #380]	; (402d88 <UDP_Handler+0x4f8>)
  402c0a:	4798      	blx	r3
  402c0c:	4a5a      	ldr	r2, [pc, #360]	; (402d78 <UDP_Handler+0x4e8>)
  402c0e:	6b13      	ldr	r3, [r2, #48]	; 0x30
  402c10:	9312      	str	r3, [sp, #72]	; 0x48
  402c12:	9b12      	ldr	r3, [sp, #72]	; 0x48
  402c14:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  402c18:	9312      	str	r3, [sp, #72]	; 0x48
  402c1a:	9b12      	ldr	r3, [sp, #72]	; 0x48
  402c1c:	f023 0302 	bic.w	r3, r3, #2
  402c20:	9312      	str	r3, [sp, #72]	; 0x48
  402c22:	9b12      	ldr	r3, [sp, #72]	; 0x48
  402c24:	6313      	str	r3, [r2, #48]	; 0x30
  402c26:	2300      	movs	r3, #0
  402c28:	9313      	str	r3, [sp, #76]	; 0x4c
  402c2a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  402c2c:	2b13      	cmp	r3, #19
  402c2e:	f200 8396 	bhi.w	40335e <UDP_Handler+0xace>
  402c32:	bf00      	nop
  402c34:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  402c36:	3301      	adds	r3, #1
  402c38:	9313      	str	r3, [sp, #76]	; 0x4c
  402c3a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  402c3c:	2b13      	cmp	r3, #19
  402c3e:	d9f8      	bls.n	402c32 <UDP_Handler+0x3a2>
  402c40:	e38d      	b.n	40335e <UDP_Handler+0xace>
  402c42:	4798      	blx	r3
  402c44:	b9e0      	cbnz	r0, 402c80 <UDP_Handler+0x3f0>
  402c46:	4b50      	ldr	r3, [pc, #320]	; (402d88 <UDP_Handler+0x4f8>)
  402c48:	4798      	blx	r3
  402c4a:	4a4b      	ldr	r2, [pc, #300]	; (402d78 <UDP_Handler+0x4e8>)
  402c4c:	6b13      	ldr	r3, [r2, #48]	; 0x30
  402c4e:	9314      	str	r3, [sp, #80]	; 0x50
  402c50:	9b14      	ldr	r3, [sp, #80]	; 0x50
  402c52:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  402c56:	9314      	str	r3, [sp, #80]	; 0x50
  402c58:	9b14      	ldr	r3, [sp, #80]	; 0x50
  402c5a:	f023 0302 	bic.w	r3, r3, #2
  402c5e:	9314      	str	r3, [sp, #80]	; 0x50
  402c60:	9b14      	ldr	r3, [sp, #80]	; 0x50
  402c62:	6313      	str	r3, [r2, #48]	; 0x30
  402c64:	2300      	movs	r3, #0
  402c66:	9315      	str	r3, [sp, #84]	; 0x54
  402c68:	9b15      	ldr	r3, [sp, #84]	; 0x54
  402c6a:	2b13      	cmp	r3, #19
  402c6c:	f200 8377 	bhi.w	40335e <UDP_Handler+0xace>
  402c70:	bf00      	nop
  402c72:	9b15      	ldr	r3, [sp, #84]	; 0x54
  402c74:	3301      	adds	r3, #1
  402c76:	9315      	str	r3, [sp, #84]	; 0x54
  402c78:	9b15      	ldr	r3, [sp, #84]	; 0x54
  402c7a:	2b13      	cmp	r3, #19
  402c7c:	d9f8      	bls.n	402c70 <UDP_Handler+0x3e0>
  402c7e:	e36e      	b.n	40335e <UDP_Handler+0xace>
  402c80:	4940      	ldr	r1, [pc, #256]	; (402d84 <UDP_Handler+0x4f4>)
  402c82:	4a3f      	ldr	r2, [pc, #252]	; (402d80 <UDP_Handler+0x4f0>)
  402c84:	8810      	ldrh	r0, [r2, #0]
  402c86:	880b      	ldrh	r3, [r1, #0]
  402c88:	4403      	add	r3, r0
  402c8a:	800b      	strh	r3, [r1, #0]
  402c8c:	2300      	movs	r3, #0
  402c8e:	8013      	strh	r3, [r2, #0]
  402c90:	4a39      	ldr	r2, [pc, #228]	; (402d78 <UDP_Handler+0x4e8>)
  402c92:	6b13      	ldr	r3, [r2, #48]	; 0x30
  402c94:	9316      	str	r3, [sp, #88]	; 0x58
  402c96:	9b16      	ldr	r3, [sp, #88]	; 0x58
  402c98:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  402c9c:	9316      	str	r3, [sp, #88]	; 0x58
  402c9e:	9b16      	ldr	r3, [sp, #88]	; 0x58
  402ca0:	f023 0302 	bic.w	r3, r3, #2
  402ca4:	9316      	str	r3, [sp, #88]	; 0x58
  402ca6:	9b16      	ldr	r3, [sp, #88]	; 0x58
  402ca8:	6313      	str	r3, [r2, #48]	; 0x30
  402caa:	2300      	movs	r3, #0
  402cac:	9317      	str	r3, [sp, #92]	; 0x5c
  402cae:	9b17      	ldr	r3, [sp, #92]	; 0x5c
  402cb0:	2b13      	cmp	r3, #19
  402cb2:	f200 8354 	bhi.w	40335e <UDP_Handler+0xace>
  402cb6:	bf00      	nop
  402cb8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
  402cba:	3301      	adds	r3, #1
  402cbc:	9317      	str	r3, [sp, #92]	; 0x5c
  402cbe:	9b17      	ldr	r3, [sp, #92]	; 0x5c
  402cc0:	2b13      	cmp	r3, #19
  402cc2:	d9f8      	bls.n	402cb6 <UDP_Handler+0x426>
  402cc4:	e34b      	b.n	40335e <UDP_Handler+0xace>
  402cc6:	4b2c      	ldr	r3, [pc, #176]	; (402d78 <UDP_Handler+0x4e8>)
  402cc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  402cca:	f013 0f08 	tst.w	r3, #8
  402cce:	d106      	bne.n	402cde <UDP_Handler+0x44e>
  402cd0:	4f2f      	ldr	r7, [pc, #188]	; (402d90 <UDP_Handler+0x500>)
  402cd2:	4639      	mov	r1, r7
  402cd4:	2301      	movs	r3, #1
  402cd6:	f8df e0a0 	ldr.w	lr, [pc, #160]	; 402d78 <UDP_Handler+0x4e8>
  402cda:	4618      	mov	r0, r3
  402cdc:	e01a      	b.n	402d14 <UDP_Handler+0x484>
  402cde:	4a26      	ldr	r2, [pc, #152]	; (402d78 <UDP_Handler+0x4e8>)
  402ce0:	6b13      	ldr	r3, [r2, #48]	; 0x30
  402ce2:	9300      	str	r3, [sp, #0]
  402ce4:	9b00      	ldr	r3, [sp, #0]
  402ce6:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  402cea:	9300      	str	r3, [sp, #0]
  402cec:	9b00      	ldr	r3, [sp, #0]
  402cee:	f023 0308 	bic.w	r3, r3, #8
  402cf2:	9300      	str	r3, [sp, #0]
  402cf4:	9b00      	ldr	r3, [sp, #0]
  402cf6:	6313      	str	r3, [r2, #48]	; 0x30
  402cf8:	2300      	movs	r3, #0
  402cfa:	9301      	str	r3, [sp, #4]
  402cfc:	9b01      	ldr	r3, [sp, #4]
  402cfe:	2b13      	cmp	r3, #19
  402d00:	f200 832d 	bhi.w	40335e <UDP_Handler+0xace>
  402d04:	bf00      	nop
  402d06:	9b01      	ldr	r3, [sp, #4]
  402d08:	3301      	adds	r3, #1
  402d0a:	9301      	str	r3, [sp, #4]
  402d0c:	9b01      	ldr	r3, [sp, #4]
  402d0e:	2b13      	cmp	r3, #19
  402d10:	d9f8      	bls.n	402d04 <UDP_Handler+0x474>
  402d12:	e324      	b.n	40335e <UDP_Handler+0xace>
  402d14:	b2de      	uxtb	r6, r3
  402d16:	f8de 2018 	ldr.w	r2, [lr, #24]
  402d1a:	461d      	mov	r5, r3
  402d1c:	fa00 f403 	lsl.w	r4, r0, r3
  402d20:	4214      	tst	r4, r2
  402d22:	f000 8220 	beq.w	403166 <UDP_Handler+0x8d6>
  402d26:	f103 38ff 	add.w	r8, r3, #4294967295
  402d2a:	4689      	mov	r9, r1
  402d2c:	009a      	lsls	r2, r3, #2
  402d2e:	f102 2240 	add.w	r2, r2, #1073758208	; 0x40004000
  402d32:	f502 3240 	add.w	r2, r2, #196608	; 0x30000
  402d36:	f8d2 c030 	ldr.w	ip, [r2, #48]	; 0x30
  402d3a:	f01c 0f42 	tst.w	ip, #66	; 0x42
  402d3e:	d052      	beq.n	402de6 <UDP_Handler+0x556>
  402d40:	eb08 0388 	add.w	r3, r8, r8, lsl #2
  402d44:	4a12      	ldr	r2, [pc, #72]	; (402d90 <UDP_Handler+0x500>)
  402d46:	eb02 0383 	add.w	r3, r2, r3, lsl #2
  402d4a:	689a      	ldr	r2, [r3, #8]
  402d4c:	68d9      	ldr	r1, [r3, #12]
  402d4e:	f8b3 a010 	ldrh.w	sl, [r3, #16]
  402d52:	f3ca 0a09 	ubfx	sl, sl, #0, #10
  402d56:	685b      	ldr	r3, [r3, #4]
  402d58:	00ad      	lsls	r5, r5, #2
  402d5a:	f105 2540 	add.w	r5, r5, #1073758208	; 0x40004000
  402d5e:	f505 3540 	add.w	r5, r5, #196608	; 0x30000
  402d62:	6b2f      	ldr	r7, [r5, #48]	; 0x30
  402d64:	f3c7 470a 	ubfx	r7, r7, #16, #11
  402d68:	2f00      	cmp	r7, #0
  402d6a:	f000 82ed 	beq.w	403348 <UDP_Handler+0xab8>
  402d6e:	1a50      	subs	r0, r2, r1
  402d70:	42b8      	cmp	r0, r7
  402d72:	f240 82dd 	bls.w	403330 <UDP_Handler+0xaa0>
  402d76:	e2cc      	b.n	403312 <UDP_Handler+0xa82>
  402d78:	40034000 	.word	0x40034000
  402d7c:	2000b0b4 	.word	0x2000b0b4
  402d80:	20000c16 	.word	0x20000c16
  402d84:	20000bd6 	.word	0x20000bd6
  402d88:	00402265 	.word	0x00402265
  402d8c:	004022ad 	.word	0x004022ad
  402d90:	20000bd8 	.word	0x20000bd8
  402d94:	f04f 0b01 	mov.w	fp, #1
  402d98:	4419      	add	r1, r3
  402d9a:	460b      	mov	r3, r1
  402d9c:	6d2a      	ldr	r2, [r5, #80]	; 0x50
  402d9e:	f803 2b01 	strb.w	r2, [r3], #1
  402da2:	1a5a      	subs	r2, r3, r1
  402da4:	4290      	cmp	r0, r2
  402da6:	d8f9      	bhi.n	402d9c <UDP_Handler+0x50c>
  402da8:	4630      	mov	r0, r6
  402daa:	4ba5      	ldr	r3, [pc, #660]	; (403040 <UDP_Handler+0x7b0>)
  402dac:	4798      	blx	r3
  402dae:	f1bb 0f00 	cmp.w	fp, #0
  402db2:	d102      	bne.n	402dba <UDP_Handler+0x52a>
  402db4:	45ba      	cmp	sl, r7
  402db6:	f240 82d2 	bls.w	40335e <UDP_Handler+0xace>
  402dba:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  402dbc:	f013 0f20 	tst.w	r3, #32
  402dc0:	f040 82cd 	bne.w	40335e <UDP_Handler+0xace>
  402dc4:	4b9f      	ldr	r3, [pc, #636]	; (403044 <UDP_Handler+0x7b4>)
  402dc6:	615c      	str	r4, [r3, #20]
  402dc8:	4b9f      	ldr	r3, [pc, #636]	; (403048 <UDP_Handler+0x7b8>)
  402dca:	ea4f 0288 	mov.w	r2, r8, lsl #2
  402dce:	eb02 0108 	add.w	r1, r2, r8
  402dd2:	eb03 0181 	add.w	r1, r3, r1, lsl #2
  402dd6:	68cb      	ldr	r3, [r1, #12]
  402dd8:	608b      	str	r3, [r1, #8]
  402dda:	4648      	mov	r0, r9
  402ddc:	2100      	movs	r1, #0
  402dde:	4632      	mov	r2, r6
  402de0:	4b9a      	ldr	r3, [pc, #616]	; (40304c <UDP_Handler+0x7bc>)
  402de2:	4798      	blx	r3
  402de4:	e2bb      	b.n	40335e <UDP_Handler+0xace>
  402de6:	f8d2 c030 	ldr.w	ip, [r2, #48]	; 0x30
  402dea:	f01c 0f01 	tst.w	ip, #1
  402dee:	f000 8190 	beq.w	403112 <UDP_Handler+0x882>
  402df2:	eb08 0288 	add.w	r2, r8, r8, lsl #2
  402df6:	4b94      	ldr	r3, [pc, #592]	; (403048 <UDP_Handler+0x7b8>)
  402df8:	eb03 0282 	add.w	r2, r3, r2, lsl #2
  402dfc:	7c53      	ldrb	r3, [r2, #17]
  402dfe:	f3c3 0181 	ubfx	r1, r3, #2, #2
  402e02:	3103      	adds	r1, #3
  402e04:	f361 0383 	bfi	r3, r1, #2, #2
  402e08:	7453      	strb	r3, [r2, #17]
  402e0a:	7c53      	ldrb	r3, [r2, #17]
  402e0c:	f013 0f20 	tst.w	r3, #32
  402e10:	d078      	beq.n	402f04 <UDP_Handler+0x674>
  402e12:	f013 0f0c 	tst.w	r3, #12
  402e16:	d036      	beq.n	402e86 <UDP_Handler+0x5f6>
  402e18:	00aa      	lsls	r2, r5, #2
  402e1a:	f102 2240 	add.w	r2, r2, #1073758208	; 0x40004000
  402e1e:	f502 3240 	add.w	r2, r2, #196608	; 0x30000
  402e22:	6b13      	ldr	r3, [r2, #48]	; 0x30
  402e24:	9318      	str	r3, [sp, #96]	; 0x60
  402e26:	9b18      	ldr	r3, [sp, #96]	; 0x60
  402e28:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  402e2c:	9318      	str	r3, [sp, #96]	; 0x60
  402e2e:	9b18      	ldr	r3, [sp, #96]	; 0x60
  402e30:	f043 0310 	orr.w	r3, r3, #16
  402e34:	9318      	str	r3, [sp, #96]	; 0x60
  402e36:	9b18      	ldr	r3, [sp, #96]	; 0x60
  402e38:	6313      	str	r3, [r2, #48]	; 0x30
  402e3a:	2300      	movs	r3, #0
  402e3c:	9319      	str	r3, [sp, #100]	; 0x64
  402e3e:	9b19      	ldr	r3, [sp, #100]	; 0x64
  402e40:	2b13      	cmp	r3, #19
  402e42:	d806      	bhi.n	402e52 <UDP_Handler+0x5c2>
  402e44:	bf00      	nop
  402e46:	9b19      	ldr	r3, [sp, #100]	; 0x64
  402e48:	3301      	adds	r3, #1
  402e4a:	9319      	str	r3, [sp, #100]	; 0x64
  402e4c:	9b19      	ldr	r3, [sp, #100]	; 0x64
  402e4e:	2b13      	cmp	r3, #19
  402e50:	d9f8      	bls.n	402e44 <UDP_Handler+0x5b4>
  402e52:	6b13      	ldr	r3, [r2, #48]	; 0x30
  402e54:	931a      	str	r3, [sp, #104]	; 0x68
  402e56:	9b1a      	ldr	r3, [sp, #104]	; 0x68
  402e58:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  402e5c:	931a      	str	r3, [sp, #104]	; 0x68
  402e5e:	9b1a      	ldr	r3, [sp, #104]	; 0x68
  402e60:	f023 0301 	bic.w	r3, r3, #1
  402e64:	931a      	str	r3, [sp, #104]	; 0x68
  402e66:	9b1a      	ldr	r3, [sp, #104]	; 0x68
  402e68:	6313      	str	r3, [r2, #48]	; 0x30
  402e6a:	2300      	movs	r3, #0
  402e6c:	931b      	str	r3, [sp, #108]	; 0x6c
  402e6e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
  402e70:	2b13      	cmp	r3, #19
  402e72:	f200 8274 	bhi.w	40335e <UDP_Handler+0xace>
  402e76:	bf00      	nop
  402e78:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
  402e7a:	3301      	adds	r3, #1
  402e7c:	931b      	str	r3, [sp, #108]	; 0x6c
  402e7e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
  402e80:	2b13      	cmp	r3, #19
  402e82:	d9f8      	bls.n	402e76 <UDP_Handler+0x5e6>
  402e84:	e26b      	b.n	40335e <UDP_Handler+0xace>
  402e86:	00aa      	lsls	r2, r5, #2
  402e88:	f102 2240 	add.w	r2, r2, #1073758208	; 0x40004000
  402e8c:	f502 3240 	add.w	r2, r2, #196608	; 0x30000
  402e90:	6b13      	ldr	r3, [r2, #48]	; 0x30
  402e92:	931c      	str	r3, [sp, #112]	; 0x70
  402e94:	9b1c      	ldr	r3, [sp, #112]	; 0x70
  402e96:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  402e9a:	931c      	str	r3, [sp, #112]	; 0x70
  402e9c:	9b1c      	ldr	r3, [sp, #112]	; 0x70
  402e9e:	f023 0301 	bic.w	r3, r3, #1
  402ea2:	931c      	str	r3, [sp, #112]	; 0x70
  402ea4:	9b1c      	ldr	r3, [sp, #112]	; 0x70
  402ea6:	6313      	str	r3, [r2, #48]	; 0x30
  402ea8:	2300      	movs	r3, #0
  402eaa:	931d      	str	r3, [sp, #116]	; 0x74
  402eac:	9b1d      	ldr	r3, [sp, #116]	; 0x74
  402eae:	2b13      	cmp	r3, #19
  402eb0:	d806      	bhi.n	402ec0 <UDP_Handler+0x630>
  402eb2:	bf00      	nop
  402eb4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
  402eb6:	3301      	adds	r3, #1
  402eb8:	931d      	str	r3, [sp, #116]	; 0x74
  402eba:	9b1d      	ldr	r3, [sp, #116]	; 0x74
  402ebc:	2b13      	cmp	r3, #19
  402ebe:	d9f8      	bls.n	402eb2 <UDP_Handler+0x622>
  402ec0:	6b13      	ldr	r3, [r2, #48]	; 0x30
  402ec2:	931e      	str	r3, [sp, #120]	; 0x78
  402ec4:	9b1e      	ldr	r3, [sp, #120]	; 0x78
  402ec6:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  402eca:	931e      	str	r3, [sp, #120]	; 0x78
  402ecc:	9b1e      	ldr	r3, [sp, #120]	; 0x78
  402ece:	f043 0320 	orr.w	r3, r3, #32
  402ed2:	931e      	str	r3, [sp, #120]	; 0x78
  402ed4:	9b1e      	ldr	r3, [sp, #120]	; 0x78
  402ed6:	6313      	str	r3, [r2, #48]	; 0x30
  402ed8:	2300      	movs	r3, #0
  402eda:	931f      	str	r3, [sp, #124]	; 0x7c
  402edc:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  402ede:	2b13      	cmp	r3, #19
  402ee0:	d806      	bhi.n	402ef0 <UDP_Handler+0x660>
  402ee2:	bf00      	nop
  402ee4:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  402ee6:	3301      	adds	r3, #1
  402ee8:	931f      	str	r3, [sp, #124]	; 0x7c
  402eea:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  402eec:	2b13      	cmp	r3, #19
  402eee:	d9f8      	bls.n	402ee2 <UDP_Handler+0x652>
  402ef0:	eb08 0888 	add.w	r8, r8, r8, lsl #2
  402ef4:	4b54      	ldr	r3, [pc, #336]	; (403048 <UDP_Handler+0x7b8>)
  402ef6:	eb03 0388 	add.w	r3, r3, r8, lsl #2
  402efa:	7c5a      	ldrb	r2, [r3, #17]
  402efc:	f36f 1245 	bfc	r2, #5, #1
  402f00:	745a      	strb	r2, [r3, #17]
  402f02:	e22c      	b.n	40335e <UDP_Handler+0xace>
  402f04:	f013 0f80 	tst.w	r3, #128	; 0x80
  402f08:	d00f      	beq.n	402f2a <UDP_Handler+0x69a>
  402f0a:	eb08 0288 	add.w	r2, r8, r8, lsl #2
  402f0e:	4b4e      	ldr	r3, [pc, #312]	; (403048 <UDP_Handler+0x7b8>)
  402f10:	eb03 0382 	add.w	r3, r3, r2, lsl #2
  402f14:	7c59      	ldrb	r1, [r3, #17]
  402f16:	f36f 11c7 	bfc	r1, #7, #1
  402f1a:	7459      	strb	r1, [r3, #17]
  402f1c:	68da      	ldr	r2, [r3, #12]
  402f1e:	609a      	str	r2, [r3, #8]
  402f20:	4648      	mov	r0, r9
  402f22:	2100      	movs	r1, #0
  402f24:	4632      	mov	r2, r6
  402f26:	4b49      	ldr	r3, [pc, #292]	; (40304c <UDP_Handler+0x7bc>)
  402f28:	4798      	blx	r3
  402f2a:	eb08 0388 	add.w	r3, r8, r8, lsl #2
  402f2e:	4a46      	ldr	r2, [pc, #280]	; (403048 <UDP_Handler+0x7b8>)
  402f30:	eb02 0383 	add.w	r3, r2, r3, lsl #2
  402f34:	68da      	ldr	r2, [r3, #12]
  402f36:	689b      	ldr	r3, [r3, #8]
  402f38:	429a      	cmp	r2, r3
  402f3a:	d338      	bcc.n	402fae <UDP_Handler+0x71e>
  402f3c:	eb08 0288 	add.w	r2, r8, r8, lsl #2
  402f40:	4b41      	ldr	r3, [pc, #260]	; (403048 <UDP_Handler+0x7b8>)
  402f42:	eb03 0382 	add.w	r3, r3, r2, lsl #2
  402f46:	7c5b      	ldrb	r3, [r3, #17]
  402f48:	f013 0f4c 	tst.w	r3, #76	; 0x4c
  402f4c:	d12f      	bne.n	402fae <UDP_Handler+0x71e>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  402f4e:	f3ef 8310 	mrs	r3, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
  402f52:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
  402f54:	f3bf 8f5f 	dmb	sy
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
  402f58:	2100      	movs	r1, #0
  402f5a:	4a3d      	ldr	r2, [pc, #244]	; (403050 <UDP_Handler+0x7c0>)
  402f5c:	7011      	strb	r1, [r2, #0]
  402f5e:	4a39      	ldr	r2, [pc, #228]	; (403044 <UDP_Handler+0x7b4>)
  402f60:	6154      	str	r4, [r2, #20]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  402f62:	b92b      	cbnz	r3, 402f70 <UDP_Handler+0x6e0>
		cpu_irq_enable();
  402f64:	2201      	movs	r2, #1
  402f66:	4b3a      	ldr	r3, [pc, #232]	; (403050 <UDP_Handler+0x7c0>)
  402f68:	701a      	strb	r2, [r3, #0]
  402f6a:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
  402f6e:	b662      	cpsie	i
  402f70:	00ab      	lsls	r3, r5, #2
  402f72:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
  402f76:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
  402f7a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  402f7c:	9220      	str	r2, [sp, #128]	; 0x80
  402f7e:	9a20      	ldr	r2, [sp, #128]	; 0x80
  402f80:	f042 024f 	orr.w	r2, r2, #79	; 0x4f
  402f84:	9220      	str	r2, [sp, #128]	; 0x80
  402f86:	9a20      	ldr	r2, [sp, #128]	; 0x80
  402f88:	f022 0201 	bic.w	r2, r2, #1
  402f8c:	9220      	str	r2, [sp, #128]	; 0x80
  402f8e:	9a20      	ldr	r2, [sp, #128]	; 0x80
  402f90:	631a      	str	r2, [r3, #48]	; 0x30
  402f92:	2300      	movs	r3, #0
  402f94:	9321      	str	r3, [sp, #132]	; 0x84
  402f96:	9b21      	ldr	r3, [sp, #132]	; 0x84
  402f98:	2b13      	cmp	r3, #19
  402f9a:	f200 81e0 	bhi.w	40335e <UDP_Handler+0xace>

    No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
  402f9e:	bf00      	nop
  402fa0:	9b21      	ldr	r3, [sp, #132]	; 0x84
  402fa2:	3301      	adds	r3, #1
  402fa4:	9321      	str	r3, [sp, #132]	; 0x84
  402fa6:	9b21      	ldr	r3, [sp, #132]	; 0x84
  402fa8:	2b13      	cmp	r3, #19
  402faa:	d9f8      	bls.n	402f9e <UDP_Handler+0x70e>
  402fac:	e1d7      	b.n	40335e <UDP_Handler+0xace>
  402fae:	2e00      	cmp	r6, #0
  402fb0:	f000 808c 	beq.w	4030cc <UDP_Handler+0x83c>
  402fb4:	2e03      	cmp	r6, #3
  402fb6:	f000 8089 	beq.w	4030cc <UDP_Handler+0x83c>
  402fba:	eb08 0288 	add.w	r2, r8, r8, lsl #2
  402fbe:	4b22      	ldr	r3, [pc, #136]	; (403048 <UDP_Handler+0x7b8>)
  402fc0:	eb03 0382 	add.w	r3, r3, r2, lsl #2
  402fc4:	7c5b      	ldrb	r3, [r3, #17]
  402fc6:	f013 0f0c 	tst.w	r3, #12
  402fca:	d045      	beq.n	403058 <UDP_Handler+0x7c8>
  402fcc:	00aa      	lsls	r2, r5, #2
  402fce:	f102 2240 	add.w	r2, r2, #1073758208	; 0x40004000
  402fd2:	f502 3240 	add.w	r2, r2, #196608	; 0x30000
  402fd6:	6b13      	ldr	r3, [r2, #48]	; 0x30
  402fd8:	9322      	str	r3, [sp, #136]	; 0x88
  402fda:	9b22      	ldr	r3, [sp, #136]	; 0x88
  402fdc:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  402fe0:	9322      	str	r3, [sp, #136]	; 0x88
  402fe2:	9b22      	ldr	r3, [sp, #136]	; 0x88
  402fe4:	f043 0310 	orr.w	r3, r3, #16
  402fe8:	9322      	str	r3, [sp, #136]	; 0x88
  402fea:	9b22      	ldr	r3, [sp, #136]	; 0x88
  402fec:	6313      	str	r3, [r2, #48]	; 0x30
  402fee:	2300      	movs	r3, #0
  402ff0:	9323      	str	r3, [sp, #140]	; 0x8c
  402ff2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
  402ff4:	2b13      	cmp	r3, #19
  402ff6:	d806      	bhi.n	403006 <UDP_Handler+0x776>
  402ff8:	bf00      	nop
  402ffa:	9b23      	ldr	r3, [sp, #140]	; 0x8c
  402ffc:	3301      	adds	r3, #1
  402ffe:	9323      	str	r3, [sp, #140]	; 0x8c
  403000:	9b23      	ldr	r3, [sp, #140]	; 0x8c
  403002:	2b13      	cmp	r3, #19
  403004:	d9f8      	bls.n	402ff8 <UDP_Handler+0x768>
  403006:	6b13      	ldr	r3, [r2, #48]	; 0x30
  403008:	9324      	str	r3, [sp, #144]	; 0x90
  40300a:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40300c:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  403010:	9324      	str	r3, [sp, #144]	; 0x90
  403012:	9b24      	ldr	r3, [sp, #144]	; 0x90
  403014:	f023 0301 	bic.w	r3, r3, #1
  403018:	9324      	str	r3, [sp, #144]	; 0x90
  40301a:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40301c:	6313      	str	r3, [r2, #48]	; 0x30
  40301e:	2300      	movs	r3, #0
  403020:	9325      	str	r3, [sp, #148]	; 0x94
  403022:	9b25      	ldr	r3, [sp, #148]	; 0x94
  403024:	2b13      	cmp	r3, #19
  403026:	d806      	bhi.n	403036 <UDP_Handler+0x7a6>
  403028:	bf00      	nop
  40302a:	9b25      	ldr	r3, [sp, #148]	; 0x94
  40302c:	3301      	adds	r3, #1
  40302e:	9325      	str	r3, [sp, #148]	; 0x94
  403030:	9b25      	ldr	r3, [sp, #148]	; 0x94
  403032:	2b13      	cmp	r3, #19
  403034:	d9f8      	bls.n	403028 <UDP_Handler+0x798>
  403036:	4630      	mov	r0, r6
  403038:	2100      	movs	r1, #0
  40303a:	4b06      	ldr	r3, [pc, #24]	; (403054 <UDP_Handler+0x7c4>)
  40303c:	4798      	blx	r3
  40303e:	e18e      	b.n	40335e <UDP_Handler+0xace>
  403040:	00402545 	.word	0x00402545
  403044:	40034000 	.word	0x40034000
  403048:	20000bd8 	.word	0x20000bd8
  40304c:	00402505 	.word	0x00402505
  403050:	200000a0 	.word	0x200000a0
  403054:	00402639 	.word	0x00402639
  403058:	4630      	mov	r0, r6
  40305a:	2101      	movs	r1, #1
  40305c:	4b69      	ldr	r3, [pc, #420]	; (403204 <UDP_Handler+0x974>)
  40305e:	4798      	blx	r3
  403060:	b990      	cbnz	r0, 403088 <UDP_Handler+0x7f8>
  403062:	2314      	movs	r3, #20
  403064:	4a68      	ldr	r2, [pc, #416]	; (403208 <UDP_Handler+0x978>)
  403066:	fb03 2808 	mla	r8, r3, r8, r2
  40306a:	f898 2011 	ldrb.w	r2, [r8, #17]
  40306e:	f36f 12c7 	bfc	r2, #7, #1
  403072:	f888 2011 	strb.w	r2, [r8, #17]
  403076:	f8d8 300c 	ldr.w	r3, [r8, #12]
  40307a:	f8c8 3008 	str.w	r3, [r8, #8]
  40307e:	4648      	mov	r0, r9
  403080:	2100      	movs	r1, #0
  403082:	4632      	mov	r2, r6
  403084:	4b61      	ldr	r3, [pc, #388]	; (40320c <UDP_Handler+0x97c>)
  403086:	4798      	blx	r3
  403088:	00ab      	lsls	r3, r5, #2
  40308a:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
  40308e:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
  403092:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  403094:	9226      	str	r2, [sp, #152]	; 0x98
  403096:	9a26      	ldr	r2, [sp, #152]	; 0x98
  403098:	f042 024f 	orr.w	r2, r2, #79	; 0x4f
  40309c:	9226      	str	r2, [sp, #152]	; 0x98
  40309e:	9a26      	ldr	r2, [sp, #152]	; 0x98
  4030a0:	f022 0201 	bic.w	r2, r2, #1
  4030a4:	9226      	str	r2, [sp, #152]	; 0x98
  4030a6:	9a26      	ldr	r2, [sp, #152]	; 0x98
  4030a8:	631a      	str	r2, [r3, #48]	; 0x30
  4030aa:	2300      	movs	r3, #0
  4030ac:	9327      	str	r3, [sp, #156]	; 0x9c
  4030ae:	9b27      	ldr	r3, [sp, #156]	; 0x9c
  4030b0:	2b13      	cmp	r3, #19
  4030b2:	d806      	bhi.n	4030c2 <UDP_Handler+0x832>
  4030b4:	bf00      	nop
  4030b6:	9b27      	ldr	r3, [sp, #156]	; 0x9c
  4030b8:	3301      	adds	r3, #1
  4030ba:	9327      	str	r3, [sp, #156]	; 0x9c
  4030bc:	9b27      	ldr	r3, [sp, #156]	; 0x9c
  4030be:	2b13      	cmp	r3, #19
  4030c0:	d9f8      	bls.n	4030b4 <UDP_Handler+0x824>
  4030c2:	4630      	mov	r0, r6
  4030c4:	2100      	movs	r1, #0
  4030c6:	4b4f      	ldr	r3, [pc, #316]	; (403204 <UDP_Handler+0x974>)
  4030c8:	4798      	blx	r3
  4030ca:	e148      	b.n	40335e <UDP_Handler+0xace>
  4030cc:	4630      	mov	r0, r6
  4030ce:	2101      	movs	r1, #1
  4030d0:	4b4c      	ldr	r3, [pc, #304]	; (403204 <UDP_Handler+0x974>)
  4030d2:	4798      	blx	r3
  4030d4:	00ab      	lsls	r3, r5, #2
  4030d6:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
  4030da:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
  4030de:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  4030e0:	9228      	str	r2, [sp, #160]	; 0xa0
  4030e2:	9a28      	ldr	r2, [sp, #160]	; 0xa0
  4030e4:	f042 024f 	orr.w	r2, r2, #79	; 0x4f
  4030e8:	9228      	str	r2, [sp, #160]	; 0xa0
  4030ea:	9a28      	ldr	r2, [sp, #160]	; 0xa0
  4030ec:	f022 0201 	bic.w	r2, r2, #1
  4030f0:	9228      	str	r2, [sp, #160]	; 0xa0
  4030f2:	9a28      	ldr	r2, [sp, #160]	; 0xa0
  4030f4:	631a      	str	r2, [r3, #48]	; 0x30
  4030f6:	2300      	movs	r3, #0
  4030f8:	9329      	str	r3, [sp, #164]	; 0xa4
  4030fa:	9b29      	ldr	r3, [sp, #164]	; 0xa4
  4030fc:	2b13      	cmp	r3, #19
  4030fe:	f200 812e 	bhi.w	40335e <UDP_Handler+0xace>
  403102:	bf00      	nop
  403104:	9b29      	ldr	r3, [sp, #164]	; 0xa4
  403106:	3301      	adds	r3, #1
  403108:	9329      	str	r3, [sp, #164]	; 0xa4
  40310a:	9b29      	ldr	r3, [sp, #164]	; 0xa4
  40310c:	2b13      	cmp	r3, #19
  40310e:	d9f8      	bls.n	403102 <UDP_Handler+0x872>
  403110:	e125      	b.n	40335e <UDP_Handler+0xace>
  403112:	6b12      	ldr	r2, [r2, #48]	; 0x30
  403114:	f012 0f08 	tst.w	r2, #8
  403118:	d025      	beq.n	403166 <UDP_Handler+0x8d6>
  40311a:	009b      	lsls	r3, r3, #2
  40311c:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
  403120:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
  403124:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  403126:	922a      	str	r2, [sp, #168]	; 0xa8
  403128:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
  40312a:	f042 024f 	orr.w	r2, r2, #79	; 0x4f
  40312e:	922a      	str	r2, [sp, #168]	; 0xa8
  403130:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
  403132:	f022 0208 	bic.w	r2, r2, #8
  403136:	922a      	str	r2, [sp, #168]	; 0xa8
  403138:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
  40313a:	631a      	str	r2, [r3, #48]	; 0x30
  40313c:	2200      	movs	r2, #0
  40313e:	922b      	str	r2, [sp, #172]	; 0xac
  403140:	9a2b      	ldr	r2, [sp, #172]	; 0xac
  403142:	2a13      	cmp	r2, #19
  403144:	d806      	bhi.n	403154 <UDP_Handler+0x8c4>
  403146:	bf00      	nop
  403148:	9a2b      	ldr	r2, [sp, #172]	; 0xac
  40314a:	3201      	adds	r2, #1
  40314c:	922b      	str	r2, [sp, #172]	; 0xac
  40314e:	9a2b      	ldr	r2, [sp, #172]	; 0xac
  403150:	2a13      	cmp	r2, #19
  403152:	d9f8      	bls.n	403146 <UDP_Handler+0x8b6>
  403154:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  403156:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
  40315a:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
  40315e:	f000 80fe 	beq.w	40335e <UDP_Handler+0xace>
  403162:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  403164:	e0fb      	b.n	40335e <UDP_Handler+0xace>
  403166:	3301      	adds	r3, #1
  403168:	3114      	adds	r1, #20
  40316a:	2b04      	cmp	r3, #4
  40316c:	f47f add2 	bne.w	402d14 <UDP_Handler+0x484>
  403170:	e0ee      	b.n	403350 <UDP_Handler+0xac0>
  403172:	4b27      	ldr	r3, [pc, #156]	; (403210 <UDP_Handler+0x980>)
  403174:	69db      	ldr	r3, [r3, #28]
  403176:	f413 5f00 	tst.w	r3, #8192	; 0x2000
  40317a:	d113      	bne.n	4031a4 <UDP_Handler+0x914>
  40317c:	4b24      	ldr	r3, [pc, #144]	; (403210 <UDP_Handler+0x980>)
  40317e:	699b      	ldr	r3, [r3, #24]
  403180:	f413 7f00 	tst.w	r3, #512	; 0x200
  403184:	d004      	beq.n	403190 <UDP_Handler+0x900>
  403186:	4b22      	ldr	r3, [pc, #136]	; (403210 <UDP_Handler+0x980>)
  403188:	69db      	ldr	r3, [r3, #28]
  40318a:	f413 7f00 	tst.w	r3, #512	; 0x200
  40318e:	d109      	bne.n	4031a4 <UDP_Handler+0x914>
  403190:	4b1f      	ldr	r3, [pc, #124]	; (403210 <UDP_Handler+0x980>)
  403192:	699b      	ldr	r3, [r3, #24]
  403194:	f413 6f80 	tst.w	r3, #1024	; 0x400
  403198:	d014      	beq.n	4031c4 <UDP_Handler+0x934>
  40319a:	4b1d      	ldr	r3, [pc, #116]	; (403210 <UDP_Handler+0x980>)
  40319c:	69db      	ldr	r3, [r3, #28]
  40319e:	f413 6f80 	tst.w	r3, #1024	; 0x400
  4031a2:	d00f      	beq.n	4031c4 <UDP_Handler+0x934>
  4031a4:	4c1a      	ldr	r4, [pc, #104]	; (403210 <UDP_Handler+0x980>)
  4031a6:	f44f 5318 	mov.w	r3, #9728	; 0x2600
  4031aa:	6223      	str	r3, [r4, #32]
  4031ac:	6163      	str	r3, [r4, #20]
  4031ae:	2001      	movs	r0, #1
  4031b0:	4b18      	ldr	r3, [pc, #96]	; (403214 <UDP_Handler+0x984>)
  4031b2:	4798      	blx	r3
  4031b4:	f44f 7380 	mov.w	r3, #256	; 0x100
  4031b8:	6223      	str	r3, [r4, #32]
  4031ba:	6123      	str	r3, [r4, #16]
  4031bc:	f44f 6300 	mov.w	r3, #2048	; 0x800
  4031c0:	6123      	str	r3, [r4, #16]
  4031c2:	e0cc      	b.n	40335e <UDP_Handler+0xace>
  4031c4:	4b12      	ldr	r3, [pc, #72]	; (403210 <UDP_Handler+0x980>)
  4031c6:	699b      	ldr	r3, [r3, #24]
  4031c8:	f413 7f80 	tst.w	r3, #256	; 0x100
  4031cc:	d026      	beq.n	40321c <UDP_Handler+0x98c>
  4031ce:	4b10      	ldr	r3, [pc, #64]	; (403210 <UDP_Handler+0x980>)
  4031d0:	69db      	ldr	r3, [r3, #28]
  4031d2:	f413 7f80 	tst.w	r3, #256	; 0x100
  4031d6:	d021      	beq.n	40321c <UDP_Handler+0x98c>
  4031d8:	4b0d      	ldr	r3, [pc, #52]	; (403210 <UDP_Handler+0x980>)
  4031da:	f44f 7280 	mov.w	r2, #256	; 0x100
  4031de:	621a      	str	r2, [r3, #32]
  4031e0:	615a      	str	r2, [r3, #20]
  4031e2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  4031e6:	611a      	str	r2, [r3, #16]
  4031e8:	f44f 7200 	mov.w	r2, #512	; 0x200
  4031ec:	611a      	str	r2, [r3, #16]
  4031ee:	f44f 6280 	mov.w	r2, #1024	; 0x400
  4031f2:	611a      	str	r2, [r3, #16]
  4031f4:	2022      	movs	r0, #34	; 0x22
  4031f6:	4b08      	ldr	r3, [pc, #32]	; (403218 <UDP_Handler+0x988>)
  4031f8:	4798      	blx	r3
  4031fa:	2000      	movs	r0, #0
  4031fc:	4b05      	ldr	r3, [pc, #20]	; (403214 <UDP_Handler+0x984>)
  4031fe:	4798      	blx	r3
  403200:	e0ad      	b.n	40335e <UDP_Handler+0xace>
  403202:	bf00      	nop
  403204:	00402639 	.word	0x00402639
  403208:	20000bd8 	.word	0x20000bd8
  40320c:	00402505 	.word	0x00402505
  403210:	40034000 	.word	0x40034000
  403214:	00402801 	.word	0x00402801
  403218:	00402155 	.word	0x00402155
  40321c:	4b51      	ldr	r3, [pc, #324]	; (403364 <UDP_Handler+0xad4>)
  40321e:	69db      	ldr	r3, [r3, #28]
  403220:	f413 5f80 	tst.w	r3, #4096	; 0x1000
  403224:	f000 809b 	beq.w	40335e <UDP_Handler+0xace>
  403228:	f44f 5280 	mov.w	r2, #4096	; 0x1000
  40322c:	4b4d      	ldr	r3, [pc, #308]	; (403364 <UDP_Handler+0xad4>)
  40322e:	621a      	str	r2, [r3, #32]
  403230:	2400      	movs	r4, #0
  403232:	2601      	movs	r6, #1
  403234:	4d4c      	ldr	r5, [pc, #304]	; (403368 <UDP_Handler+0xad8>)
  403236:	3401      	adds	r4, #1
  403238:	b2e4      	uxtb	r4, r4
  40323a:	4638      	mov	r0, r7
  40323c:	4631      	mov	r1, r6
  40323e:	4622      	mov	r2, r4
  403240:	47a8      	blx	r5
  403242:	3714      	adds	r7, #20
  403244:	2c03      	cmp	r4, #3
  403246:	d1f6      	bne.n	403236 <UDP_Handler+0x9a6>
  403248:	4b48      	ldr	r3, [pc, #288]	; (40336c <UDP_Handler+0xadc>)
  40324a:	4798      	blx	r3
  40324c:	4b45      	ldr	r3, [pc, #276]	; (403364 <UDP_Handler+0xad4>)
  40324e:	685a      	ldr	r2, [r3, #4]
  403250:	f022 0201 	bic.w	r2, r2, #1
  403254:	605a      	str	r2, [r3, #4]
  403256:	685a      	ldr	r2, [r3, #4]
  403258:	f022 0202 	bic.w	r2, r2, #2
  40325c:	605a      	str	r2, [r3, #4]
  40325e:	689a      	ldr	r2, [r3, #8]
  403260:	f442 7280 	orr.w	r2, r2, #256	; 0x100
  403264:	609a      	str	r2, [r3, #8]
  403266:	689a      	ldr	r2, [r3, #8]
  403268:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
  40326c:	609a      	str	r2, [r3, #8]
  40326e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  403270:	922c      	str	r2, [sp, #176]	; 0xb0
  403272:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
  403274:	f042 024f 	orr.w	r2, r2, #79	; 0x4f
  403278:	922c      	str	r2, [sp, #176]	; 0xb0
  40327a:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
  40327c:	f422 4207 	bic.w	r2, r2, #34560	; 0x8700
  403280:	f022 0280 	bic.w	r2, r2, #128	; 0x80
  403284:	922c      	str	r2, [sp, #176]	; 0xb0
  403286:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
  403288:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
  40328c:	922c      	str	r2, [sp, #176]	; 0xb0
  40328e:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
  403290:	631a      	str	r2, [r3, #48]	; 0x30
  403292:	2300      	movs	r3, #0
  403294:	932d      	str	r3, [sp, #180]	; 0xb4
  403296:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
  403298:	2b13      	cmp	r3, #19
  40329a:	d806      	bhi.n	4032aa <UDP_Handler+0xa1a>
  40329c:	bf00      	nop
  40329e:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
  4032a0:	3301      	adds	r3, #1
  4032a2:	932d      	str	r3, [sp, #180]	; 0xb4
  4032a4:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
  4032a6:	2b13      	cmp	r3, #19
  4032a8:	d9f8      	bls.n	40329c <UDP_Handler+0xa0c>
  4032aa:	4a2e      	ldr	r2, [pc, #184]	; (403364 <UDP_Handler+0xad4>)
  4032ac:	6b13      	ldr	r3, [r2, #48]	; 0x30
  4032ae:	932e      	str	r3, [sp, #184]	; 0xb8
  4032b0:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
  4032b2:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  4032b6:	932e      	str	r3, [sp, #184]	; 0xb8
  4032b8:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
  4032ba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
  4032be:	932e      	str	r3, [sp, #184]	; 0xb8
  4032c0:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
  4032c2:	6313      	str	r3, [r2, #48]	; 0x30
  4032c4:	2300      	movs	r3, #0
  4032c6:	932f      	str	r3, [sp, #188]	; 0xbc
  4032c8:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
  4032ca:	2b13      	cmp	r3, #19
  4032cc:	d806      	bhi.n	4032dc <UDP_Handler+0xa4c>
  4032ce:	bf00      	nop
  4032d0:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
  4032d2:	3301      	adds	r3, #1
  4032d4:	932f      	str	r3, [sp, #188]	; 0xbc
  4032d6:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
  4032d8:	2b13      	cmp	r3, #19
  4032da:	d9f8      	bls.n	4032ce <UDP_Handler+0xa3e>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  4032dc:	f3ef 8310 	mrs	r3, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
  4032e0:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
  4032e2:	f3bf 8f5f 	dmb	sy
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
  4032e6:	2100      	movs	r1, #0
  4032e8:	4a21      	ldr	r2, [pc, #132]	; (403370 <UDP_Handler+0xae0>)
  4032ea:	7011      	strb	r1, [r2, #0]
  4032ec:	2101      	movs	r1, #1
  4032ee:	4a1d      	ldr	r2, [pc, #116]	; (403364 <UDP_Handler+0xad4>)
  4032f0:	6111      	str	r1, [r2, #16]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  4032f2:	b923      	cbnz	r3, 4032fe <UDP_Handler+0xa6e>
		cpu_irq_enable();
  4032f4:	4b1e      	ldr	r3, [pc, #120]	; (403370 <UDP_Handler+0xae0>)
  4032f6:	7019      	strb	r1, [r3, #0]
  4032f8:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
  4032fc:	b662      	cpsie	i
  4032fe:	4b1d      	ldr	r3, [pc, #116]	; (403374 <UDP_Handler+0xae4>)
  403300:	4798      	blx	r3
  403302:	4b18      	ldr	r3, [pc, #96]	; (403364 <UDP_Handler+0xad4>)
  403304:	f44f 7280 	mov.w	r2, #256	; 0x100
  403308:	611a      	str	r2, [r3, #16]
  40330a:	f44f 6200 	mov.w	r2, #2048	; 0x800
  40330e:	611a      	str	r2, [r3, #16]
  403310:	e025      	b.n	40335e <UDP_Handler+0xace>
  403312:	eb08 0088 	add.w	r0, r8, r8, lsl #2
  403316:	4a18      	ldr	r2, [pc, #96]	; (403378 <UDP_Handler+0xae8>)
  403318:	eb02 0280 	add.w	r2, r2, r0, lsl #2
  40331c:	1878      	adds	r0, r7, r1
  40331e:	60d0      	str	r0, [r2, #12]
  403320:	4638      	mov	r0, r7
  403322:	f04f 0b00 	mov.w	fp, #0
  403326:	e537      	b.n	402d98 <UDP_Handler+0x508>
  403328:	4630      	mov	r0, r6
  40332a:	4b14      	ldr	r3, [pc, #80]	; (40337c <UDP_Handler+0xaec>)
  40332c:	4798      	blx	r3
  40332e:	e544      	b.n	402dba <UDP_Handler+0x52a>
  403330:	eb08 0c88 	add.w	ip, r8, r8, lsl #2
  403334:	f8df e040 	ldr.w	lr, [pc, #64]	; 403378 <UDP_Handler+0xae8>
  403338:	eb0e 0e8c 	add.w	lr, lr, ip, lsl #2
  40333c:	f8ce 200c 	str.w	r2, [lr, #12]
  403340:	2800      	cmp	r0, #0
  403342:	f47f ad27 	bne.w	402d94 <UDP_Handler+0x504>
  403346:	e7ef      	b.n	403328 <UDP_Handler+0xa98>
  403348:	4630      	mov	r0, r6
  40334a:	4b0c      	ldr	r3, [pc, #48]	; (40337c <UDP_Handler+0xaec>)
  40334c:	4798      	blx	r3
  40334e:	e531      	b.n	402db4 <UDP_Handler+0x524>
  403350:	4b04      	ldr	r3, [pc, #16]	; (403364 <UDP_Handler+0xad4>)
  403352:	699b      	ldr	r3, [r3, #24]
  403354:	f413 5f00 	tst.w	r3, #8192	; 0x2000
  403358:	f47f af0b 	bne.w	403172 <UDP_Handler+0x8e2>
  40335c:	e70e      	b.n	40317c <UDP_Handler+0x8ec>
  40335e:	b031      	add	sp, #196	; 0xc4
  403360:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403364:	40034000 	.word	0x40034000
  403368:	00402505 	.word	0x00402505
  40336c:	0040175d 	.word	0x0040175d
  403370:	200000a0 	.word	0x200000a0
  403374:	0040224d 	.word	0x0040224d
  403378:	20000bd8 	.word	0x20000bd8
  40337c:	00402545 	.word	0x00402545

00403380 <udd_include_vbus_monitoring>:
  403380:	2000      	movs	r0, #0
  403382:	4770      	bx	lr

00403384 <udd_attach>:
  403384:	b510      	push	{r4, lr}
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  403386:	f3ef 8410 	mrs	r4, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
  40338a:	b672      	cpsid	i
  40338c:	f3bf 8f5f 	dmb	sy
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
  403390:	2200      	movs	r2, #0
  403392:	4b14      	ldr	r3, [pc, #80]	; (4033e4 <udd_attach+0x60>)
  403394:	701a      	strb	r2, [r3, #0]
  403396:	2001      	movs	r0, #1
  403398:	4b13      	ldr	r3, [pc, #76]	; (4033e8 <udd_attach+0x64>)
  40339a:	4798      	blx	r3
  40339c:	2022      	movs	r0, #34	; 0x22
  40339e:	4b13      	ldr	r3, [pc, #76]	; (4033ec <udd_attach+0x68>)
  4033a0:	4798      	blx	r3
  4033a2:	4b13      	ldr	r3, [pc, #76]	; (4033f0 <udd_attach+0x6c>)
  4033a4:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  4033a6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
  4033aa:	675a      	str	r2, [r3, #116]	; 0x74
  4033ac:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  4033ae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
  4033b2:	675a      	str	r2, [r3, #116]	; 0x74
  4033b4:	f44f 7280 	mov.w	r2, #256	; 0x100
  4033b8:	611a      	str	r2, [r3, #16]
  4033ba:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  4033be:	611a      	str	r2, [r3, #16]
  4033c0:	f44f 7200 	mov.w	r2, #512	; 0x200
  4033c4:	611a      	str	r2, [r3, #16]
  4033c6:	f44f 6280 	mov.w	r2, #1024	; 0x400
  4033ca:	611a      	str	r2, [r3, #16]
  4033cc:	f44f 6200 	mov.w	r2, #2048	; 0x800
  4033d0:	611a      	str	r2, [r3, #16]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  4033d2:	b92c      	cbnz	r4, 4033e0 <udd_attach+0x5c>
		cpu_irq_enable();
  4033d4:	2201      	movs	r2, #1
  4033d6:	4b03      	ldr	r3, [pc, #12]	; (4033e4 <udd_attach+0x60>)
  4033d8:	701a      	strb	r2, [r3, #0]
  4033da:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
  4033de:	b662      	cpsie	i
  4033e0:	bd10      	pop	{r4, pc}
  4033e2:	bf00      	nop
  4033e4:	200000a0 	.word	0x200000a0
  4033e8:	00402801 	.word	0x00402801
  4033ec:	00402101 	.word	0x00402101
  4033f0:	40034000 	.word	0x40034000

004033f4 <udd_enable>:
  4033f4:	b538      	push	{r3, r4, r5, lr}
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  4033f6:	f3ef 8510 	mrs	r5, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
  4033fa:	b672      	cpsid	i
  4033fc:	f3bf 8f5f 	dmb	sy
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
  403400:	2400      	movs	r4, #0
  403402:	4b24      	ldr	r3, [pc, #144]	; (403494 <udd_enable+0xa0>)
  403404:	701c      	strb	r4, [r3, #0]
  403406:	2022      	movs	r0, #34	; 0x22
  403408:	4b23      	ldr	r3, [pc, #140]	; (403498 <udd_enable+0xa4>)
  40340a:	4798      	blx	r3
  40340c:	4b23      	ldr	r3, [pc, #140]	; (40349c <udd_enable+0xa8>)
  40340e:	4798      	blx	r3
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
  403410:	4b23      	ldr	r3, [pc, #140]	; (4034a0 <udd_enable+0xac>)
  403412:	2250      	movs	r2, #80	; 0x50
  403414:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
/*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  403418:	2204      	movs	r2, #4
  40341a:	605a      	str	r2, [r3, #4]
  40341c:	4623      	mov	r3, r4
  40341e:	4821      	ldr	r0, [pc, #132]	; (4034a4 <udd_enable+0xb0>)
  403420:	009a      	lsls	r2, r3, #2
  403422:	18d1      	adds	r1, r2, r3
  403424:	eb00 0181 	add.w	r1, r0, r1, lsl #2
  403428:	7c49      	ldrb	r1, [r1, #17]
  40342a:	441a      	add	r2, r3
  40342c:	eb00 0282 	add.w	r2, r0, r2, lsl #2
  403430:	f001 0183 	and.w	r1, r1, #131	; 0x83
  403434:	f36f 11c7 	bfc	r1, #7, #1
  403438:	7451      	strb	r1, [r2, #17]
  40343a:	3301      	adds	r3, #1
  40343c:	2b03      	cmp	r3, #3
  40343e:	d1ef      	bne.n	403420 <udd_enable+0x2c>
  403440:	f44f 2080 	mov.w	r0, #262144	; 0x40000
  403444:	4b18      	ldr	r3, [pc, #96]	; (4034a8 <udd_enable+0xb4>)
  403446:	4798      	blx	r3
  403448:	2200      	movs	r2, #0
  40344a:	4b18      	ldr	r3, [pc, #96]	; (4034ac <udd_enable+0xb8>)
  40344c:	701a      	strb	r2, [r3, #0]
  40344e:	4b18      	ldr	r3, [pc, #96]	; (4034b0 <udd_enable+0xbc>)
  403450:	781b      	ldrb	r3, [r3, #0]
  403452:	2bff      	cmp	r3, #255	; 0xff
  403454:	d100      	bne.n	403458 <udd_enable+0x64>
  403456:	e7fe      	b.n	403456 <udd_enable+0x62>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  403458:	f3ef 8310 	mrs	r3, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
  40345c:	b672      	cpsid	i
  40345e:	f3bf 8f5f 	dmb	sy
  403462:	2100      	movs	r1, #0
  403464:	4a0b      	ldr	r2, [pc, #44]	; (403494 <udd_enable+0xa0>)
  403466:	7011      	strb	r1, [r2, #0]
  403468:	4911      	ldr	r1, [pc, #68]	; (4034b0 <udd_enable+0xbc>)
  40346a:	780a      	ldrb	r2, [r1, #0]
  40346c:	3201      	adds	r2, #1
  40346e:	700a      	strb	r2, [r1, #0]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  403470:	b92b      	cbnz	r3, 40347e <udd_enable+0x8a>
		cpu_irq_enable();
  403472:	2201      	movs	r2, #1
  403474:	4b07      	ldr	r3, [pc, #28]	; (403494 <udd_enable+0xa0>)
  403476:	701a      	strb	r2, [r3, #0]
  403478:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
  40347c:	b662      	cpsie	i
  40347e:	4b0d      	ldr	r3, [pc, #52]	; (4034b4 <udd_enable+0xc0>)
  403480:	4798      	blx	r3
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  403482:	b92d      	cbnz	r5, 403490 <udd_enable+0x9c>
		cpu_irq_enable();
  403484:	2201      	movs	r2, #1
  403486:	4b03      	ldr	r3, [pc, #12]	; (403494 <udd_enable+0xa0>)
  403488:	701a      	strb	r2, [r3, #0]
  40348a:	f3bf 8f5f 	dmb	sy
  40348e:	b662      	cpsie	i
  403490:	bd38      	pop	{r3, r4, r5, pc}
  403492:	bf00      	nop
  403494:	200000a0 	.word	0x200000a0
  403498:	00402101 	.word	0x00402101
  40349c:	00400129 	.word	0x00400129
  4034a0:	e000e100 	.word	0xe000e100
  4034a4:	20000bd8 	.word	0x20000bd8
  4034a8:	004021a9 	.word	0x004021a9
  4034ac:	20000c14 	.word	0x20000c14
  4034b0:	2000b0a8 	.word	0x2000b0a8
  4034b4:	00403385 	.word	0x00403385

004034b8 <udd_is_high_speed>:
  4034b8:	2000      	movs	r0, #0
  4034ba:	4770      	bx	lr

004034bc <udd_set_address>:
  4034bc:	4b0c      	ldr	r3, [pc, #48]	; (4034f0 <udd_set_address+0x34>)
  4034be:	685a      	ldr	r2, [r3, #4]
  4034c0:	f022 0201 	bic.w	r2, r2, #1
  4034c4:	605a      	str	r2, [r3, #4]
  4034c6:	689a      	ldr	r2, [r3, #8]
  4034c8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
  4034cc:	609a      	str	r2, [r3, #8]
  4034ce:	b170      	cbz	r0, 4034ee <udd_set_address+0x32>
  4034d0:	689a      	ldr	r2, [r3, #8]
  4034d2:	f000 007f 	and.w	r0, r0, #127	; 0x7f
  4034d6:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
  4034da:	4310      	orrs	r0, r2
  4034dc:	6098      	str	r0, [r3, #8]
  4034de:	689a      	ldr	r2, [r3, #8]
  4034e0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
  4034e4:	609a      	str	r2, [r3, #8]
  4034e6:	685a      	ldr	r2, [r3, #4]
  4034e8:	f042 0201 	orr.w	r2, r2, #1
  4034ec:	605a      	str	r2, [r3, #4]
  4034ee:	4770      	bx	lr
  4034f0:	40034000 	.word	0x40034000

004034f4 <udd_getaddress>:
  4034f4:	4b05      	ldr	r3, [pc, #20]	; (40350c <udd_getaddress+0x18>)
  4034f6:	685b      	ldr	r3, [r3, #4]
  4034f8:	f013 0f01 	tst.w	r3, #1
  4034fc:	bf1d      	ittte	ne
  4034fe:	4b03      	ldrne	r3, [pc, #12]	; (40350c <udd_getaddress+0x18>)
  403500:	6898      	ldrne	r0, [r3, #8]
  403502:	f000 007f 	andne.w	r0, r0, #127	; 0x7f
  403506:	2000      	moveq	r0, #0
  403508:	4770      	bx	lr
  40350a:	bf00      	nop
  40350c:	40034000 	.word	0x40034000

00403510 <udd_get_frame_number>:
  403510:	4b02      	ldr	r3, [pc, #8]	; (40351c <udd_get_frame_number+0xc>)
  403512:	6818      	ldr	r0, [r3, #0]
  403514:	f3c0 000a 	ubfx	r0, r0, #0, #11
  403518:	4770      	bx	lr
  40351a:	bf00      	nop
  40351c:	40034000 	.word	0x40034000

00403520 <udd_get_micro_frame_number>:
  403520:	2000      	movs	r0, #0
  403522:	4770      	bx	lr

00403524 <udd_set_setup_payload>:
  403524:	4b01      	ldr	r3, [pc, #4]	; (40352c <udd_set_setup_payload+0x8>)
  403526:	6098      	str	r0, [r3, #8]
  403528:	8199      	strh	r1, [r3, #12]
  40352a:	4770      	bx	lr
  40352c:	2000b0b4 	.word	0x2000b0b4

00403530 <udd_ep_alloc>:
  403530:	b5f0      	push	{r4, r5, r6, r7, lr}
  403532:	b083      	sub	sp, #12
  403534:	f000 040f 	and.w	r4, r0, #15
  403538:	2c03      	cmp	r4, #3
  40353a:	d86c      	bhi.n	403616 <udd_ep_alloc+0xe6>
  40353c:	00a3      	lsls	r3, r4, #2
  40353e:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
  403542:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
  403546:	6b1d      	ldr	r5, [r3, #48]	; 0x30
  403548:	f415 4f00 	tst.w	r5, #32768	; 0x8000
  40354c:	d165      	bne.n	40361a <udd_ep_alloc+0xea>
  40354e:	f001 0503 	and.w	r5, r1, #3
  403552:	2d01      	cmp	r5, #1
  403554:	d103      	bne.n	40355e <udd_ep_alloc+0x2e>
  403556:	2c00      	cmp	r4, #0
  403558:	d061      	beq.n	40361e <udd_ep_alloc+0xee>
  40355a:	2c03      	cmp	r4, #3
  40355c:	d061      	beq.n	403622 <udd_ep_alloc+0xf2>
  40355e:	1f25      	subs	r5, r4, #4
  403560:	b2ed      	uxtb	r5, r5
  403562:	2d02      	cmp	r5, #2
  403564:	bf34      	ite	cc
  403566:	f44f 7500 	movcc.w	r5, #512	; 0x200
  40356a:	2540      	movcs	r5, #64	; 0x40
  40356c:	4295      	cmp	r5, r2
  40356e:	db5a      	blt.n	403626 <udd_ep_alloc+0xf6>
  403570:	1e66      	subs	r6, r4, #1
  403572:	eb06 0786 	add.w	r7, r6, r6, lsl #2
  403576:	4d2e      	ldr	r5, [pc, #184]	; (403630 <udd_ep_alloc+0x100>)
  403578:	eb05 0587 	add.w	r5, r5, r7, lsl #2
  40357c:	f105 0710 	add.w	r7, r5, #16
  403580:	f8b5 e010 	ldrh.w	lr, [r5, #16]
  403584:	f362 0e09 	bfi	lr, r2, #0, #10
  403588:	f8a5 e010 	strh.w	lr, [r5, #16]
  40358c:	7c6a      	ldrb	r2, [r5, #17]
  40358e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
  403592:	f36f 1245 	bfc	r2, #5, #1
  403596:	746a      	strb	r2, [r5, #17]
  403598:	09c0      	lsrs	r0, r0, #7
  40359a:	d003      	beq.n	4035a4 <udd_ep_alloc+0x74>
  40359c:	787a      	ldrb	r2, [r7, #1]
  40359e:	f36f 0283 	bfc	r2, #2, #2
  4035a2:	707a      	strb	r2, [r7, #1]
  4035a4:	4a23      	ldr	r2, [pc, #140]	; (403634 <udd_ep_alloc+0x104>)
  4035a6:	6a96      	ldr	r6, [r2, #40]	; 0x28
  4035a8:	2501      	movs	r5, #1
  4035aa:	fa05 f404 	lsl.w	r4, r5, r4
  4035ae:	ea44 0506 	orr.w	r5, r4, r6
  4035b2:	6295      	str	r5, [r2, #40]	; 0x28
  4035b4:	6a95      	ldr	r5, [r2, #40]	; 0x28
  4035b6:	ea25 0404 	bic.w	r4, r5, r4
  4035ba:	6294      	str	r4, [r2, #40]	; 0x28
  4035bc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  4035be:	9200      	str	r2, [sp, #0]
  4035c0:	9a00      	ldr	r2, [sp, #0]
  4035c2:	f042 024f 	orr.w	r2, r2, #79	; 0x4f
  4035c6:	9200      	str	r2, [sp, #0]
  4035c8:	9a00      	ldr	r2, [sp, #0]
  4035ca:	f422 4207 	bic.w	r2, r2, #34560	; 0x8700
  4035ce:	f022 0280 	bic.w	r2, r2, #128	; 0x80
  4035d2:	9200      	str	r2, [sp, #0]
  4035d4:	b138      	cbz	r0, 4035e6 <udd_ep_alloc+0xb6>
  4035d6:	f041 0204 	orr.w	r2, r1, #4
  4035da:	0212      	lsls	r2, r2, #8
  4035dc:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
  4035e0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
  4035e4:	e004      	b.n	4035f0 <udd_ep_alloc+0xc0>
  4035e6:	020a      	lsls	r2, r1, #8
  4035e8:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
  4035ec:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
  4035f0:	9900      	ldr	r1, [sp, #0]
  4035f2:	430a      	orrs	r2, r1
  4035f4:	9200      	str	r2, [sp, #0]
  4035f6:	9a00      	ldr	r2, [sp, #0]
  4035f8:	631a      	str	r2, [r3, #48]	; 0x30
  4035fa:	2300      	movs	r3, #0
  4035fc:	9301      	str	r3, [sp, #4]
  4035fe:	9b01      	ldr	r3, [sp, #4]
  403600:	2b13      	cmp	r3, #19
  403602:	d812      	bhi.n	40362a <udd_ep_alloc+0xfa>

    No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
  403604:	bf00      	nop
  403606:	9b01      	ldr	r3, [sp, #4]
  403608:	3301      	adds	r3, #1
  40360a:	9301      	str	r3, [sp, #4]
  40360c:	9b01      	ldr	r3, [sp, #4]
  40360e:	2b13      	cmp	r3, #19
  403610:	d9f8      	bls.n	403604 <udd_ep_alloc+0xd4>
  403612:	2001      	movs	r0, #1
  403614:	e00a      	b.n	40362c <udd_ep_alloc+0xfc>
  403616:	2000      	movs	r0, #0
  403618:	e008      	b.n	40362c <udd_ep_alloc+0xfc>
  40361a:	2000      	movs	r0, #0
  40361c:	e006      	b.n	40362c <udd_ep_alloc+0xfc>
  40361e:	2000      	movs	r0, #0
  403620:	e004      	b.n	40362c <udd_ep_alloc+0xfc>
  403622:	2000      	movs	r0, #0
  403624:	e002      	b.n	40362c <udd_ep_alloc+0xfc>
  403626:	2000      	movs	r0, #0
  403628:	e000      	b.n	40362c <udd_ep_alloc+0xfc>
  40362a:	2001      	movs	r0, #1
  40362c:	b003      	add	sp, #12
  40362e:	bdf0      	pop	{r4, r5, r6, r7, pc}
  403630:	20000bd8 	.word	0x20000bd8
  403634:	40034000 	.word	0x40034000

00403638 <udd_ep_free>:
  403638:	f000 020f 	and.w	r2, r0, #15
  40363c:	2a03      	cmp	r2, #3
  40363e:	d82a      	bhi.n	403696 <udd_ep_free+0x5e>
  403640:	b500      	push	{lr}
  403642:	b083      	sub	sp, #12
  403644:	0093      	lsls	r3, r2, #2
  403646:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
  40364a:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
  40364e:	6b19      	ldr	r1, [r3, #48]	; 0x30
  403650:	9100      	str	r1, [sp, #0]
  403652:	9900      	ldr	r1, [sp, #0]
  403654:	f041 014f 	orr.w	r1, r1, #79	; 0x4f
  403658:	9100      	str	r1, [sp, #0]
  40365a:	9900      	ldr	r1, [sp, #0]
  40365c:	f421 4100 	bic.w	r1, r1, #32768	; 0x8000
  403660:	9100      	str	r1, [sp, #0]
  403662:	9900      	ldr	r1, [sp, #0]
  403664:	6319      	str	r1, [r3, #48]	; 0x30
  403666:	2300      	movs	r3, #0
  403668:	9301      	str	r3, [sp, #4]
  40366a:	9b01      	ldr	r3, [sp, #4]
  40366c:	2b13      	cmp	r3, #19
  40366e:	d806      	bhi.n	40367e <udd_ep_free+0x46>
  403670:	bf00      	nop
  403672:	9b01      	ldr	r3, [sp, #4]
  403674:	3301      	adds	r3, #1
  403676:	9301      	str	r3, [sp, #4]
  403678:	9b01      	ldr	r3, [sp, #4]
  40367a:	2b13      	cmp	r3, #19
  40367c:	d9f8      	bls.n	403670 <udd_ep_free+0x38>
  40367e:	1e50      	subs	r0, r2, #1
  403680:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  403684:	4b04      	ldr	r3, [pc, #16]	; (403698 <udd_ep_free+0x60>)
  403686:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  40368a:	2101      	movs	r1, #1
  40368c:	4b03      	ldr	r3, [pc, #12]	; (40369c <udd_ep_free+0x64>)
  40368e:	4798      	blx	r3
  403690:	b003      	add	sp, #12
  403692:	f85d fb04 	ldr.w	pc, [sp], #4
  403696:	4770      	bx	lr
  403698:	20000bd8 	.word	0x20000bd8
  40369c:	00402505 	.word	0x00402505

004036a0 <udd_ep_is_halted>:
  4036a0:	f000 000f 	and.w	r0, r0, #15
  4036a4:	2803      	cmp	r0, #3
  4036a6:	d815      	bhi.n	4036d4 <udd_ep_is_halted+0x34>
  4036a8:	1e43      	subs	r3, r0, #1
  4036aa:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  4036ae:	4a0a      	ldr	r2, [pc, #40]	; (4036d8 <udd_ep_is_halted+0x38>)
  4036b0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
  4036b4:	7c5b      	ldrb	r3, [r3, #17]
  4036b6:	f013 0f20 	tst.w	r3, #32
  4036ba:	d109      	bne.n	4036d0 <udd_ep_is_halted+0x30>
  4036bc:	300c      	adds	r0, #12
  4036be:	4b07      	ldr	r3, [pc, #28]	; (4036dc <udd_ep_is_halted+0x3c>)
  4036c0:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
  4036c4:	f013 0f28 	tst.w	r3, #40	; 0x28
  4036c8:	bf14      	ite	ne
  4036ca:	2001      	movne	r0, #1
  4036cc:	2000      	moveq	r0, #0
  4036ce:	4770      	bx	lr
  4036d0:	2001      	movs	r0, #1
  4036d2:	4770      	bx	lr
  4036d4:	2000      	movs	r0, #0
  4036d6:	4770      	bx	lr
  4036d8:	20000bd8 	.word	0x20000bd8
  4036dc:	40034000 	.word	0x40034000

004036e0 <udd_ep_set_halt>:
  4036e0:	f000 010f 	and.w	r1, r0, #15
  4036e4:	2903      	cmp	r1, #3
  4036e6:	d861      	bhi.n	4037ac <udd_ep_set_halt+0xcc>
  4036e8:	b410      	push	{r4}
  4036ea:	b083      	sub	sp, #12
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  4036ec:	f3ef 8210 	mrs	r2, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
  4036f0:	fab2 f282 	clz	r2, r2
  4036f4:	0952      	lsrs	r2, r2, #5
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
  4036f6:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
  4036f8:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  4036fc:	2400      	movs	r4, #0
  4036fe:	4b30      	ldr	r3, [pc, #192]	; (4037c0 <udd_ep_set_halt+0xe0>)
  403700:	701c      	strb	r4, [r3, #0]
  403702:	f010 0f80 	tst.w	r0, #128	; 0x80
  403706:	d028      	beq.n	40375a <udd_ep_set_halt+0x7a>
  403708:	1e4b      	subs	r3, r1, #1
  40370a:	f101 000c 	add.w	r0, r1, #12
  40370e:	4c2d      	ldr	r4, [pc, #180]	; (4037c4 <udd_ep_set_halt+0xe4>)
  403710:	f854 0020 	ldr.w	r0, [r4, r0, lsl #2]
  403714:	f010 0f10 	tst.w	r0, #16
  403718:	d109      	bne.n	40372e <udd_ep_set_halt+0x4e>
  40371a:	eb03 0083 	add.w	r0, r3, r3, lsl #2
  40371e:	4c2a      	ldr	r4, [pc, #168]	; (4037c8 <udd_ep_set_halt+0xe8>)
  403720:	eb04 0080 	add.w	r0, r4, r0, lsl #2
  403724:	7c40      	ldrb	r0, [r0, #17]
  403726:	f3c0 0081 	ubfx	r0, r0, #2, #2
  40372a:	2801      	cmp	r0, #1
  40372c:	dd15      	ble.n	40375a <udd_ep_set_halt+0x7a>
  40372e:	eb03 0083 	add.w	r0, r3, r3, lsl #2
  403732:	4b25      	ldr	r3, [pc, #148]	; (4037c8 <udd_ep_set_halt+0xe8>)
  403734:	eb03 0380 	add.w	r3, r3, r0, lsl #2
  403738:	7c58      	ldrb	r0, [r3, #17]
  40373a:	f040 0020 	orr.w	r0, r0, #32
  40373e:	7458      	strb	r0, [r3, #17]
  403740:	2301      	movs	r3, #1
  403742:	408b      	lsls	r3, r1
  403744:	491f      	ldr	r1, [pc, #124]	; (4037c4 <udd_ep_set_halt+0xe4>)
  403746:	610b      	str	r3, [r1, #16]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  403748:	2a00      	cmp	r2, #0
  40374a:	d031      	beq.n	4037b0 <udd_ep_set_halt+0xd0>
		cpu_irq_enable();
  40374c:	2001      	movs	r0, #1
  40374e:	4b1c      	ldr	r3, [pc, #112]	; (4037c0 <udd_ep_set_halt+0xe0>)
  403750:	7018      	strb	r0, [r3, #0]
  403752:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
  403756:	b662      	cpsie	i
  403758:	e02d      	b.n	4037b6 <udd_ep_set_halt+0xd6>
  40375a:	008b      	lsls	r3, r1, #2
  40375c:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
  403760:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
  403764:	6b18      	ldr	r0, [r3, #48]	; 0x30
  403766:	9000      	str	r0, [sp, #0]
  403768:	9800      	ldr	r0, [sp, #0]
  40376a:	f040 004f 	orr.w	r0, r0, #79	; 0x4f
  40376e:	9000      	str	r0, [sp, #0]
  403770:	9800      	ldr	r0, [sp, #0]
  403772:	f040 0020 	orr.w	r0, r0, #32
  403776:	9000      	str	r0, [sp, #0]
  403778:	9800      	ldr	r0, [sp, #0]
  40377a:	6318      	str	r0, [r3, #48]	; 0x30
  40377c:	2300      	movs	r3, #0
  40377e:	9301      	str	r3, [sp, #4]
  403780:	9b01      	ldr	r3, [sp, #4]
  403782:	2b13      	cmp	r3, #19
  403784:	d806      	bhi.n	403794 <udd_ep_set_halt+0xb4>

    No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
  403786:	bf00      	nop
  403788:	9b01      	ldr	r3, [sp, #4]
  40378a:	3301      	adds	r3, #1
  40378c:	9301      	str	r3, [sp, #4]
  40378e:	9b01      	ldr	r3, [sp, #4]
  403790:	2b13      	cmp	r3, #19
  403792:	d9f8      	bls.n	403786 <udd_ep_set_halt+0xa6>
  403794:	2301      	movs	r3, #1
  403796:	408b      	lsls	r3, r1
  403798:	490a      	ldr	r1, [pc, #40]	; (4037c4 <udd_ep_set_halt+0xe4>)
  40379a:	610b      	str	r3, [r1, #16]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  40379c:	b152      	cbz	r2, 4037b4 <udd_ep_set_halt+0xd4>
		cpu_irq_enable();
  40379e:	2001      	movs	r0, #1
  4037a0:	4b07      	ldr	r3, [pc, #28]	; (4037c0 <udd_ep_set_halt+0xe0>)
  4037a2:	7018      	strb	r0, [r3, #0]
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
  4037a4:	f3bf 8f5f 	dmb	sy
  4037a8:	b662      	cpsie	i
  4037aa:	e004      	b.n	4037b6 <udd_ep_set_halt+0xd6>
  4037ac:	2000      	movs	r0, #0
  4037ae:	4770      	bx	lr
  4037b0:	2001      	movs	r0, #1
  4037b2:	e000      	b.n	4037b6 <udd_ep_set_halt+0xd6>
  4037b4:	2001      	movs	r0, #1
  4037b6:	b003      	add	sp, #12
  4037b8:	f85d 4b04 	ldr.w	r4, [sp], #4
  4037bc:	4770      	bx	lr
  4037be:	bf00      	nop
  4037c0:	200000a0 	.word	0x200000a0
  4037c4:	40034000 	.word	0x40034000
  4037c8:	20000bd8 	.word	0x20000bd8

004037cc <udd_ep_clear_halt>:
  4037cc:	f000 000f 	and.w	r0, r0, #15
  4037d0:	2803      	cmp	r0, #3
  4037d2:	d867      	bhi.n	4038a4 <udd_ep_clear_halt+0xd8>
  4037d4:	1e41      	subs	r1, r0, #1
  4037d6:	eb01 0281 	add.w	r2, r1, r1, lsl #2
  4037da:	4b36      	ldr	r3, [pc, #216]	; (4038b4 <udd_ep_clear_halt+0xe8>)
  4037dc:	eb03 0382 	add.w	r3, r3, r2, lsl #2
  4037e0:	7c5a      	ldrb	r2, [r3, #17]
  4037e2:	f36f 1245 	bfc	r2, #5, #1
  4037e6:	745a      	strb	r2, [r3, #17]
  4037e8:	0082      	lsls	r2, r0, #2
  4037ea:	f102 2240 	add.w	r2, r2, #1073758208	; 0x40004000
  4037ee:	f502 3240 	add.w	r2, r2, #196608	; 0x30000
  4037f2:	6b13      	ldr	r3, [r2, #48]	; 0x30
  4037f4:	f013 0f20 	tst.w	r3, #32
  4037f8:	d056      	beq.n	4038a8 <udd_ep_clear_halt+0xdc>
  4037fa:	b530      	push	{r4, r5, lr}
  4037fc:	b085      	sub	sp, #20
  4037fe:	6b13      	ldr	r3, [r2, #48]	; 0x30
  403800:	9300      	str	r3, [sp, #0]
  403802:	9b00      	ldr	r3, [sp, #0]
  403804:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  403808:	9300      	str	r3, [sp, #0]
  40380a:	9b00      	ldr	r3, [sp, #0]
  40380c:	f023 0320 	bic.w	r3, r3, #32
  403810:	9300      	str	r3, [sp, #0]
  403812:	9b00      	ldr	r3, [sp, #0]
  403814:	6313      	str	r3, [r2, #48]	; 0x30
  403816:	2300      	movs	r3, #0
  403818:	9301      	str	r3, [sp, #4]
  40381a:	9b01      	ldr	r3, [sp, #4]
  40381c:	2b13      	cmp	r3, #19
  40381e:	d806      	bhi.n	40382e <udd_ep_clear_halt+0x62>

    No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
  403820:	bf00      	nop
  403822:	9b01      	ldr	r3, [sp, #4]
  403824:	3301      	adds	r3, #1
  403826:	9301      	str	r3, [sp, #4]
  403828:	9b01      	ldr	r3, [sp, #4]
  40382a:	2b13      	cmp	r3, #19
  40382c:	d9f8      	bls.n	403820 <udd_ep_clear_halt+0x54>
  40382e:	4b22      	ldr	r3, [pc, #136]	; (4038b8 <udd_ep_clear_halt+0xec>)
  403830:	6a9d      	ldr	r5, [r3, #40]	; 0x28
  403832:	2401      	movs	r4, #1
  403834:	fa04 f000 	lsl.w	r0, r4, r0
  403838:	ea40 0405 	orr.w	r4, r0, r5
  40383c:	629c      	str	r4, [r3, #40]	; 0x28
  40383e:	6a9c      	ldr	r4, [r3, #40]	; 0x28
  403840:	ea24 0000 	bic.w	r0, r4, r0
  403844:	6298      	str	r0, [r3, #40]	; 0x28
  403846:	6b13      	ldr	r3, [r2, #48]	; 0x30
  403848:	9302      	str	r3, [sp, #8]
  40384a:	9b02      	ldr	r3, [sp, #8]
  40384c:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  403850:	9302      	str	r3, [sp, #8]
  403852:	9b02      	ldr	r3, [sp, #8]
  403854:	f023 0308 	bic.w	r3, r3, #8
  403858:	9302      	str	r3, [sp, #8]
  40385a:	9b02      	ldr	r3, [sp, #8]
  40385c:	6313      	str	r3, [r2, #48]	; 0x30
  40385e:	2300      	movs	r3, #0
  403860:	9303      	str	r3, [sp, #12]
  403862:	9b03      	ldr	r3, [sp, #12]
  403864:	2b13      	cmp	r3, #19
  403866:	d806      	bhi.n	403876 <udd_ep_clear_halt+0xaa>
  403868:	bf00      	nop
  40386a:	9b03      	ldr	r3, [sp, #12]
  40386c:	3301      	adds	r3, #1
  40386e:	9303      	str	r3, [sp, #12]
  403870:	9b03      	ldr	r3, [sp, #12]
  403872:	2b13      	cmp	r3, #19
  403874:	d9f8      	bls.n	403868 <udd_ep_clear_halt+0x9c>
  403876:	eb01 0381 	add.w	r3, r1, r1, lsl #2
  40387a:	4a0e      	ldr	r2, [pc, #56]	; (4038b4 <udd_ep_clear_halt+0xe8>)
  40387c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
  403880:	7c5b      	ldrb	r3, [r3, #17]
  403882:	f013 0f10 	tst.w	r3, #16
  403886:	d011      	beq.n	4038ac <udd_ep_clear_halt+0xe0>
  403888:	0088      	lsls	r0, r1, #2
  40388a:	1843      	adds	r3, r0, r1
  40388c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
  403890:	7c5c      	ldrb	r4, [r3, #17]
  403892:	f36f 1404 	bfc	r4, #4, #1
  403896:	745c      	strb	r4, [r3, #17]
  403898:	4401      	add	r1, r0
  40389a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
  40389e:	4798      	blx	r3
  4038a0:	2001      	movs	r0, #1
  4038a2:	e004      	b.n	4038ae <udd_ep_clear_halt+0xe2>
  4038a4:	2000      	movs	r0, #0
  4038a6:	4770      	bx	lr
  4038a8:	2001      	movs	r0, #1
  4038aa:	4770      	bx	lr
  4038ac:	2001      	movs	r0, #1
  4038ae:	b005      	add	sp, #20
  4038b0:	bd30      	pop	{r4, r5, pc}
  4038b2:	bf00      	nop
  4038b4:	20000bd8 	.word	0x20000bd8
  4038b8:	40034000 	.word	0x40034000

004038bc <udd_ep_run>:
  4038bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4038be:	f000 050f 	and.w	r5, r0, #15
  4038c2:	2d03      	cmp	r5, #3
  4038c4:	f200 809f 	bhi.w	403a06 <udd_ep_run+0x14a>
  4038c8:	00ac      	lsls	r4, r5, #2
  4038ca:	f104 2440 	add.w	r4, r4, #1073758208	; 0x40004000
  4038ce:	f504 3440 	add.w	r4, r4, #196608	; 0x30000
  4038d2:	6b26      	ldr	r6, [r4, #48]	; 0x30
  4038d4:	f416 4f00 	tst.w	r6, #32768	; 0x8000
  4038d8:	f000 8097 	beq.w	403a0a <udd_ep_run+0x14e>
  4038dc:	1e6e      	subs	r6, r5, #1
  4038de:	eb06 0e86 	add.w	lr, r6, r6, lsl #2
  4038e2:	4f4f      	ldr	r7, [pc, #316]	; (403a20 <udd_ep_run+0x164>)
  4038e4:	eb07 078e 	add.w	r7, r7, lr, lsl #2
  4038e8:	7c7f      	ldrb	r7, [r7, #17]
  4038ea:	f017 0f20 	tst.w	r7, #32
  4038ee:	f040 808e 	bne.w	403a0e <udd_ep_run+0x152>
  4038f2:	6b27      	ldr	r7, [r4, #48]	; 0x30
  4038f4:	f017 0f20 	tst.w	r7, #32
  4038f8:	f040 808b 	bne.w	403a12 <udd_ep_run+0x156>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  4038fc:	f3ef 8710 	mrs	r7, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
  403900:	fab7 f787 	clz	r7, r7
  403904:	097f      	lsrs	r7, r7, #5
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
  403906:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
  403908:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  40390c:	f04f 0c00 	mov.w	ip, #0
  403910:	f8df e110 	ldr.w	lr, [pc, #272]	; 403a24 <udd_ep_run+0x168>
  403914:	f88e c000 	strb.w	ip, [lr]
  403918:	eb06 0e86 	add.w	lr, r6, r6, lsl #2
  40391c:	f8df c100 	ldr.w	ip, [pc, #256]	; 403a20 <udd_ep_run+0x164>
  403920:	eb0c 0e8e 	add.w	lr, ip, lr, lsl #2
  403924:	f89e e011 	ldrb.w	lr, [lr, #17]
  403928:	f01e 0f10 	tst.w	lr, #16
  40392c:	d009      	beq.n	403942 <udd_ep_run+0x86>
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  40392e:	2f00      	cmp	r7, #0
  403930:	d071      	beq.n	403a16 <udd_ep_run+0x15a>
		cpu_irq_enable();
  403932:	2201      	movs	r2, #1
  403934:	4b3b      	ldr	r3, [pc, #236]	; (403a24 <udd_ep_run+0x168>)
  403936:	701a      	strb	r2, [r3, #0]
  403938:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
  40393c:	b662      	cpsie	i
  40393e:	2000      	movs	r0, #0
  403940:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  403942:	eb06 0e86 	add.w	lr, r6, r6, lsl #2
  403946:	f8df c0d8 	ldr.w	ip, [pc, #216]	; 403a20 <udd_ep_run+0x164>
  40394a:	eb0c 0e8e 	add.w	lr, ip, lr, lsl #2
  40394e:	f89e c011 	ldrb.w	ip, [lr, #17]
  403952:	f04c 0c10 	orr.w	ip, ip, #16
  403956:	f88e c011 	strb.w	ip, [lr, #17]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  40395a:	b13f      	cbz	r7, 40396c <udd_ep_run+0xb0>
		cpu_irq_enable();
  40395c:	f04f 0e01 	mov.w	lr, #1
  403960:	4f30      	ldr	r7, [pc, #192]	; (403a24 <udd_ep_run+0x168>)
  403962:	f887 e000 	strb.w	lr, [r7]
  403966:	f3bf 8f5f 	dmb	sy
  40396a:	b662      	cpsie	i
  40396c:	f8df c0b0 	ldr.w	ip, [pc, #176]	; 403a20 <udd_ep_run+0x164>
  403970:	eb06 0786 	add.w	r7, r6, r6, lsl #2
  403974:	00bf      	lsls	r7, r7, #2
  403976:	eb0c 0e07 	add.w	lr, ip, r7
  40397a:	f8ce 2004 	str.w	r2, [lr, #4]
  40397e:	f10e 0208 	add.w	r2, lr, #8
  403982:	f8ce 3008 	str.w	r3, [lr, #8]
  403986:	f04f 0e00 	mov.w	lr, #0
  40398a:	f8c2 e004 	str.w	lr, [r2, #4]
  40398e:	9a06      	ldr	r2, [sp, #24]
  403990:	f84c 2007 	str.w	r2, [ip, r7]
  403994:	b919      	cbnz	r1, 40399e <udd_ep_run+0xe2>
  403996:	fab3 f383 	clz	r3, r3
  40399a:	095b      	lsrs	r3, r3, #5
  40399c:	e000      	b.n	4039a0 <udd_ep_run+0xe4>
  40399e:	2301      	movs	r3, #1
  4039a0:	491f      	ldr	r1, [pc, #124]	; (403a20 <udd_ep_run+0x164>)
  4039a2:	00b7      	lsls	r7, r6, #2
  4039a4:	19ba      	adds	r2, r7, r6
  4039a6:	eb01 0282 	add.w	r2, r1, r2, lsl #2
  4039aa:	7c52      	ldrb	r2, [r2, #17]
  4039ac:	f363 1286 	bfi	r2, r3, #6, #1
  4039b0:	443e      	add	r6, r7
  4039b2:	eb01 0686 	add.w	r6, r1, r6, lsl #2
  4039b6:	4613      	mov	r3, r2
  4039b8:	f36f 13c7 	bfc	r3, #7, #1
  4039bc:	7473      	strb	r3, [r6, #17]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  4039be:	f3ef 8610 	mrs	r6, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
  4039c2:	b672      	cpsid	i
  4039c4:	f3bf 8f5f 	dmb	sy
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
  4039c8:	2200      	movs	r2, #0
  4039ca:	4b16      	ldr	r3, [pc, #88]	; (403a24 <udd_ep_run+0x168>)
  4039cc:	701a      	strb	r2, [r3, #0]
  4039ce:	2301      	movs	r3, #1
  4039d0:	40ab      	lsls	r3, r5
  4039d2:	4a15      	ldr	r2, [pc, #84]	; (403a28 <udd_ep_run+0x16c>)
  4039d4:	6113      	str	r3, [r2, #16]
  4039d6:	f010 0f80 	tst.w	r0, #128	; 0x80
  4039da:	d00c      	beq.n	4039f6 <udd_ep_run+0x13a>
  4039dc:	6b23      	ldr	r3, [r4, #48]	; 0x30
  4039de:	f013 0f11 	tst.w	r3, #17
  4039e2:	d108      	bne.n	4039f6 <udd_ep_run+0x13a>
  4039e4:	4628      	mov	r0, r5
  4039e6:	2101      	movs	r1, #1
  4039e8:	4b10      	ldr	r3, [pc, #64]	; (403a2c <udd_ep_run+0x170>)
  4039ea:	4798      	blx	r3
  4039ec:	b118      	cbz	r0, 4039f6 <udd_ep_run+0x13a>
  4039ee:	4628      	mov	r0, r5
  4039f0:	2100      	movs	r1, #0
  4039f2:	4b0e      	ldr	r3, [pc, #56]	; (403a2c <udd_ep_run+0x170>)
  4039f4:	4798      	blx	r3
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  4039f6:	b986      	cbnz	r6, 403a1a <udd_ep_run+0x15e>
		cpu_irq_enable();
  4039f8:	2001      	movs	r0, #1
  4039fa:	4b0a      	ldr	r3, [pc, #40]	; (403a24 <udd_ep_run+0x168>)
  4039fc:	7018      	strb	r0, [r3, #0]
  4039fe:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
  403a02:	b662      	cpsie	i
  403a04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  403a06:	2000      	movs	r0, #0
  403a08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  403a0a:	2000      	movs	r0, #0
  403a0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  403a0e:	2000      	movs	r0, #0
  403a10:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  403a12:	2000      	movs	r0, #0
  403a14:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  403a16:	2000      	movs	r0, #0
  403a18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  403a1a:	2001      	movs	r0, #1
  403a1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  403a1e:	bf00      	nop
  403a20:	20000bd8 	.word	0x20000bd8
  403a24:	200000a0 	.word	0x200000a0
  403a28:	40034000 	.word	0x40034000
  403a2c:	00402639 	.word	0x00402639

00403a30 <udd_ep_abort>:
  403a30:	b5f0      	push	{r4, r5, r6, r7, lr}
  403a32:	b089      	sub	sp, #36	; 0x24
  403a34:	f000 040f 	and.w	r4, r0, #15
  403a38:	2c03      	cmp	r4, #3
  403a3a:	f200 80ba 	bhi.w	403bb2 <udd_ep_abort+0x182>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  403a3e:	f3ef 8310 	mrs	r3, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
  403a42:	b672      	cpsid	i
  403a44:	f3bf 8f5f 	dmb	sy
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
  403a48:	2100      	movs	r1, #0
  403a4a:	4a5b      	ldr	r2, [pc, #364]	; (403bb8 <udd_ep_abort+0x188>)
  403a4c:	7011      	strb	r1, [r2, #0]
  403a4e:	2501      	movs	r5, #1
  403a50:	40a5      	lsls	r5, r4
  403a52:	4a5a      	ldr	r2, [pc, #360]	; (403bbc <udd_ep_abort+0x18c>)
  403a54:	6155      	str	r5, [r2, #20]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  403a56:	b92b      	cbnz	r3, 403a64 <udd_ep_abort+0x34>
		cpu_irq_enable();
  403a58:	2201      	movs	r2, #1
  403a5a:	4b57      	ldr	r3, [pc, #348]	; (403bb8 <udd_ep_abort+0x188>)
  403a5c:	701a      	strb	r2, [r3, #0]
  403a5e:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
  403a62:	b662      	cpsie	i
  403a64:	f010 0f80 	tst.w	r0, #128	; 0x80
  403a68:	d10a      	bne.n	403a80 <udd_ep_abort+0x50>
  403a6a:	00a6      	lsls	r6, r4, #2
  403a6c:	f106 2640 	add.w	r6, r6, #1073758208	; 0x40004000
  403a70:	f506 3640 	add.w	r6, r6, #196608	; 0x30000
  403a74:	6b33      	ldr	r3, [r6, #48]	; 0x30
  403a76:	f013 0f42 	tst.w	r3, #66	; 0x42
  403a7a:	f040 8081 	bne.w	403b80 <udd_ep_abort+0x150>
  403a7e:	e086      	b.n	403b8e <udd_ep_abort+0x15e>
  403a80:	00a2      	lsls	r2, r4, #2
  403a82:	f102 2240 	add.w	r2, r2, #1073758208	; 0x40004000
  403a86:	f502 3240 	add.w	r2, r2, #196608	; 0x30000
  403a8a:	6b13      	ldr	r3, [r2, #48]	; 0x30
  403a8c:	f013 0f10 	tst.w	r3, #16
  403a90:	d053      	beq.n	403b3a <udd_ep_abort+0x10a>
  403a92:	2c00      	cmp	r4, #0
  403a94:	d039      	beq.n	403b0a <udd_ep_abort+0xda>
  403a96:	2c03      	cmp	r4, #3
  403a98:	d037      	beq.n	403b0a <udd_ep_abort+0xda>
  403a9a:	6b13      	ldr	r3, [r2, #48]	; 0x30
  403a9c:	9300      	str	r3, [sp, #0]
  403a9e:	9b00      	ldr	r3, [sp, #0]
  403aa0:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  403aa4:	9300      	str	r3, [sp, #0]
  403aa6:	9b00      	ldr	r3, [sp, #0]
  403aa8:	f023 0310 	bic.w	r3, r3, #16
  403aac:	9300      	str	r3, [sp, #0]
  403aae:	9b00      	ldr	r3, [sp, #0]
  403ab0:	6313      	str	r3, [r2, #48]	; 0x30
  403ab2:	2300      	movs	r3, #0
  403ab4:	9301      	str	r3, [sp, #4]
  403ab6:	9b01      	ldr	r3, [sp, #4]
  403ab8:	2b13      	cmp	r3, #19
  403aba:	d806      	bhi.n	403aca <udd_ep_abort+0x9a>

    No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
  403abc:	bf00      	nop
  403abe:	9b01      	ldr	r3, [sp, #4]
  403ac0:	3301      	adds	r3, #1
  403ac2:	9301      	str	r3, [sp, #4]
  403ac4:	9b01      	ldr	r3, [sp, #4]
  403ac6:	2b13      	cmp	r3, #19
  403ac8:	d9f8      	bls.n	403abc <udd_ep_abort+0x8c>
  403aca:	6b13      	ldr	r3, [r2, #48]	; 0x30
  403acc:	f013 0f10 	tst.w	r3, #16
  403ad0:	d1fb      	bne.n	403aca <udd_ep_abort+0x9a>
  403ad2:	6b13      	ldr	r3, [r2, #48]	; 0x30
  403ad4:	9302      	str	r3, [sp, #8]
  403ad6:	9b02      	ldr	r3, [sp, #8]
  403ad8:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  403adc:	9302      	str	r3, [sp, #8]
  403ade:	9b02      	ldr	r3, [sp, #8]
  403ae0:	f043 0310 	orr.w	r3, r3, #16
  403ae4:	9302      	str	r3, [sp, #8]
  403ae6:	9b02      	ldr	r3, [sp, #8]
  403ae8:	6313      	str	r3, [r2, #48]	; 0x30
  403aea:	2300      	movs	r3, #0
  403aec:	9303      	str	r3, [sp, #12]
  403aee:	9b03      	ldr	r3, [sp, #12]
  403af0:	2b13      	cmp	r3, #19
  403af2:	d806      	bhi.n	403b02 <udd_ep_abort+0xd2>
  403af4:	bf00      	nop
  403af6:	9b03      	ldr	r3, [sp, #12]
  403af8:	3301      	adds	r3, #1
  403afa:	9303      	str	r3, [sp, #12]
  403afc:	9b03      	ldr	r3, [sp, #12]
  403afe:	2b13      	cmp	r3, #19
  403b00:	d9f8      	bls.n	403af4 <udd_ep_abort+0xc4>
  403b02:	6b13      	ldr	r3, [r2, #48]	; 0x30
  403b04:	f013 0f10 	tst.w	r3, #16
  403b08:	d0fb      	beq.n	403b02 <udd_ep_abort+0xd2>
  403b0a:	6b13      	ldr	r3, [r2, #48]	; 0x30
  403b0c:	9304      	str	r3, [sp, #16]
  403b0e:	9b04      	ldr	r3, [sp, #16]
  403b10:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  403b14:	9304      	str	r3, [sp, #16]
  403b16:	9b04      	ldr	r3, [sp, #16]
  403b18:	f023 0310 	bic.w	r3, r3, #16
  403b1c:	9304      	str	r3, [sp, #16]
  403b1e:	9b04      	ldr	r3, [sp, #16]
  403b20:	6313      	str	r3, [r2, #48]	; 0x30
  403b22:	2300      	movs	r3, #0
  403b24:	9305      	str	r3, [sp, #20]
  403b26:	9b05      	ldr	r3, [sp, #20]
  403b28:	2b13      	cmp	r3, #19
  403b2a:	d806      	bhi.n	403b3a <udd_ep_abort+0x10a>
  403b2c:	bf00      	nop
  403b2e:	9b05      	ldr	r3, [sp, #20]
  403b30:	3301      	adds	r3, #1
  403b32:	9305      	str	r3, [sp, #20]
  403b34:	9b05      	ldr	r3, [sp, #20]
  403b36:	2b13      	cmp	r3, #19
  403b38:	d9f8      	bls.n	403b2c <udd_ep_abort+0xfc>
  403b3a:	6b13      	ldr	r3, [r2, #48]	; 0x30
  403b3c:	9306      	str	r3, [sp, #24]
  403b3e:	9b06      	ldr	r3, [sp, #24]
  403b40:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  403b44:	9306      	str	r3, [sp, #24]
  403b46:	9b06      	ldr	r3, [sp, #24]
  403b48:	f023 0301 	bic.w	r3, r3, #1
  403b4c:	9306      	str	r3, [sp, #24]
  403b4e:	9b06      	ldr	r3, [sp, #24]
  403b50:	6313      	str	r3, [r2, #48]	; 0x30
  403b52:	2300      	movs	r3, #0
  403b54:	9307      	str	r3, [sp, #28]
  403b56:	9b07      	ldr	r3, [sp, #28]
  403b58:	2b13      	cmp	r3, #19
  403b5a:	d806      	bhi.n	403b6a <udd_ep_abort+0x13a>
  403b5c:	bf00      	nop
  403b5e:	9b07      	ldr	r3, [sp, #28]
  403b60:	3301      	adds	r3, #1
  403b62:	9307      	str	r3, [sp, #28]
  403b64:	9b07      	ldr	r3, [sp, #28]
  403b66:	2b13      	cmp	r3, #19
  403b68:	d9f8      	bls.n	403b5c <udd_ep_abort+0x12c>
  403b6a:	1e63      	subs	r3, r4, #1
  403b6c:	eb03 0283 	add.w	r2, r3, r3, lsl #2
  403b70:	4b13      	ldr	r3, [pc, #76]	; (403bc0 <udd_ep_abort+0x190>)
  403b72:	eb03 0382 	add.w	r3, r3, r2, lsl #2
  403b76:	7c5a      	ldrb	r2, [r3, #17]
  403b78:	f36f 0283 	bfc	r2, #2, #2
  403b7c:	745a      	strb	r2, [r3, #17]
  403b7e:	e006      	b.n	403b8e <udd_ep_abort+0x15e>
  403b80:	4f10      	ldr	r7, [pc, #64]	; (403bc4 <udd_ep_abort+0x194>)
  403b82:	4620      	mov	r0, r4
  403b84:	47b8      	blx	r7
  403b86:	6b33      	ldr	r3, [r6, #48]	; 0x30
  403b88:	f013 0f42 	tst.w	r3, #66	; 0x42
  403b8c:	d1f9      	bne.n	403b82 <udd_ep_abort+0x152>
  403b8e:	4b0b      	ldr	r3, [pc, #44]	; (403bbc <udd_ep_abort+0x18c>)
  403b90:	6a9a      	ldr	r2, [r3, #40]	; 0x28
  403b92:	432a      	orrs	r2, r5
  403b94:	629a      	str	r2, [r3, #40]	; 0x28
  403b96:	6a9a      	ldr	r2, [r3, #40]	; 0x28
  403b98:	ea22 0505 	bic.w	r5, r2, r5
  403b9c:	629d      	str	r5, [r3, #40]	; 0x28
  403b9e:	1e60      	subs	r0, r4, #1
  403ba0:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  403ba4:	4b06      	ldr	r3, [pc, #24]	; (403bc0 <udd_ep_abort+0x190>)
  403ba6:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  403baa:	2101      	movs	r1, #1
  403bac:	4622      	mov	r2, r4
  403bae:	4b06      	ldr	r3, [pc, #24]	; (403bc8 <udd_ep_abort+0x198>)
  403bb0:	4798      	blx	r3
  403bb2:	b009      	add	sp, #36	; 0x24
  403bb4:	bdf0      	pop	{r4, r5, r6, r7, pc}
  403bb6:	bf00      	nop
  403bb8:	200000a0 	.word	0x200000a0
  403bbc:	40034000 	.word	0x40034000
  403bc0:	20000bd8 	.word	0x20000bd8
  403bc4:	00402545 	.word	0x00402545
  403bc8:	00402505 	.word	0x00402505

00403bcc <usart_enable_interrupt>:
 * \param p_usart Pointer to a USART peripheral.
 * \param ul_sources Interrupt sources bit map.
 */
void usart_enable_interrupt(Usart *p_usart, uint32_t ul_sources)
{
	p_usart->US_IER = ul_sources;
  403bcc:	6081      	str	r1, [r0, #8]
  403bce:	4770      	bx	lr

00403bd0 <usart_disable_interrupt>:
 * \param p_usart Pointer to a USART peripheral.
 * \param ul_sources Interrupt sources bit map.
 */
void usart_disable_interrupt(Usart *p_usart, uint32_t ul_sources)
{
	p_usart->US_IDR = ul_sources;
  403bd0:	60c1      	str	r1, [r0, #12]
  403bd2:	4770      	bx	lr

00403bd4 <usart_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t usart_get_interrupt_mask(Usart *p_usart)
{
	return p_usart->US_IMR;
  403bd4:	6900      	ldr	r0, [r0, #16]
}
  403bd6:	4770      	bx	lr

00403bd8 <usart_get_status>:
 *
 * \return The current USART status.
 */
uint32_t usart_get_status(Usart *p_usart)
{
	return p_usart->US_CSR;
  403bd8:	6940      	ldr	r0, [r0, #20]
}
  403bda:	4770      	bx	lr

00403bdc <usart_reset_status>:
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_status(Usart *p_usart)
{
	p_usart->US_CR = US_CR_RSTSTA;
  403bdc:	f44f 7380 	mov.w	r3, #256	; 0x100
  403be0:	6003      	str	r3, [r0, #0]
  403be2:	4770      	bx	lr

00403be4 <usart_start_rx_timeout>:
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_start_rx_timeout(Usart *p_usart)
{
	p_usart->US_CR = US_CR_STTTO;
  403be4:	f44f 6300 	mov.w	r3, #2048	; 0x800
  403be8:	6003      	str	r3, [r0, #0]
  403bea:	4770      	bx	lr

00403bec <Dummy_Handler>:
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
	while (1) {
	}
  403bec:	e7fe      	b.n	403bec <Dummy_Handler>
  403bee:	bf00      	nop

00403bf0 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
  403bf0:	b508      	push	{r3, lr}

	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc > pDest) {
  403bf2:	4b20      	ldr	r3, [pc, #128]	; (403c74 <Reset_Handler+0x84>)
  403bf4:	4a20      	ldr	r2, [pc, #128]	; (403c78 <Reset_Handler+0x88>)
  403bf6:	429a      	cmp	r2, r3
  403bf8:	d913      	bls.n	403c22 <Reset_Handler+0x32>
		for (; pDest < &_erelocate;) {
  403bfa:	4b20      	ldr	r3, [pc, #128]	; (403c7c <Reset_Handler+0x8c>)
  403bfc:	4a1d      	ldr	r2, [pc, #116]	; (403c74 <Reset_Handler+0x84>)
  403bfe:	429a      	cmp	r2, r3
  403c00:	d21f      	bcs.n	403c42 <Reset_Handler+0x52>
  403c02:	4611      	mov	r1, r2
  403c04:	3204      	adds	r2, #4
  403c06:	3303      	adds	r3, #3
  403c08:	1a9b      	subs	r3, r3, r2
  403c0a:	f023 0303 	bic.w	r3, r3, #3
  403c0e:	3304      	adds	r3, #4
  403c10:	4a19      	ldr	r2, [pc, #100]	; (403c78 <Reset_Handler+0x88>)
  403c12:	4413      	add	r3, r2
			*pDest++ = *pSrc++;
  403c14:	f852 0b04 	ldr.w	r0, [r2], #4
  403c18:	f841 0b04 	str.w	r0, [r1], #4
	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc > pDest) {
		for (; pDest < &_erelocate;) {
  403c1c:	429a      	cmp	r2, r3
  403c1e:	d1f9      	bne.n	403c14 <Reset_Handler+0x24>
  403c20:	e00f      	b.n	403c42 <Reset_Handler+0x52>
			*pDest++ = *pSrc++;
		}
	} else if (pSrc < pDest) {
  403c22:	4b14      	ldr	r3, [pc, #80]	; (403c74 <Reset_Handler+0x84>)
  403c24:	4a14      	ldr	r2, [pc, #80]	; (403c78 <Reset_Handler+0x88>)
  403c26:	429a      	cmp	r2, r3
  403c28:	d20b      	bcs.n	403c42 <Reset_Handler+0x52>
		uint32_t nb_bytes = (uint32_t)&_erelocate - (uint32_t)&_srelocate;
  403c2a:	4b14      	ldr	r3, [pc, #80]	; (403c7c <Reset_Handler+0x8c>)
  403c2c:	4a11      	ldr	r2, [pc, #68]	; (403c74 <Reset_Handler+0x84>)
  403c2e:	1a9a      	subs	r2, r3, r2
  403c30:	4813      	ldr	r0, [pc, #76]	; (403c80 <Reset_Handler+0x90>)
		pSrc = (uint32_t*)((uint32_t)pSrc + nb_bytes) - 1;
  403c32:	1881      	adds	r1, r0, r2
		pDest = (uint32_t*)((uint32_t)pDest + nb_bytes) - 1;
		for (;nb_bytes;nb_bytes -= 4) {
  403c34:	b12a      	cbz	r2, 403c42 <Reset_Handler+0x52>
			*pDest-- = *pSrc--;
  403c36:	f851 2904 	ldr.w	r2, [r1], #-4
  403c3a:	f843 2d04 	str.w	r2, [r3, #-4]!
		}
	} else if (pSrc < pDest) {
		uint32_t nb_bytes = (uint32_t)&_erelocate - (uint32_t)&_srelocate;
		pSrc = (uint32_t*)((uint32_t)pSrc + nb_bytes) - 1;
		pDest = (uint32_t*)((uint32_t)pDest + nb_bytes) - 1;
		for (;nb_bytes;nb_bytes -= 4) {
  403c3e:	4281      	cmp	r1, r0
  403c40:	d1f9      	bne.n	403c36 <Reset_Handler+0x46>
  403c42:	bf00      	nop
		}
	}
	__NOP();

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
  403c44:	4b0f      	ldr	r3, [pc, #60]	; (403c84 <Reset_Handler+0x94>)
  403c46:	4a10      	ldr	r2, [pc, #64]	; (403c88 <Reset_Handler+0x98>)
  403c48:	429a      	cmp	r2, r3
  403c4a:	d20b      	bcs.n	403c64 <Reset_Handler+0x74>
  403c4c:	1d13      	adds	r3, r2, #4
  403c4e:	4a0f      	ldr	r2, [pc, #60]	; (403c8c <Reset_Handler+0x9c>)
  403c50:	1ad2      	subs	r2, r2, r3
  403c52:	f022 0203 	bic.w	r2, r2, #3
  403c56:	441a      	add	r2, r3
  403c58:	3b04      	subs	r3, #4
		*pDest++ = 0;
  403c5a:	2100      	movs	r1, #0
  403c5c:	f843 1b04 	str.w	r1, [r3], #4
		}
	}
	__NOP();

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
  403c60:	4293      	cmp	r3, r2
  403c62:	d1fb      	bne.n	403c5c <Reset_Handler+0x6c>
		*pDest++ = 0;
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) & _sfixed;
	SCB->VTOR = ((uint32_t) pSrc);
  403c64:	4b0a      	ldr	r3, [pc, #40]	; (403c90 <Reset_Handler+0xa0>)
  403c66:	4a0b      	ldr	r2, [pc, #44]	; (403c94 <Reset_Handler+0xa4>)
  403c68:	609a      	str	r2, [r3, #8]

	/* Initialize the C library */
	__libc_init_array();
  403c6a:	4b0b      	ldr	r3, [pc, #44]	; (403c98 <Reset_Handler+0xa8>)
  403c6c:	4798      	blx	r3

	/* Branch to main function */
	main();
  403c6e:	4b0b      	ldr	r3, [pc, #44]	; (403c9c <Reset_Handler+0xac>)
  403c70:	4798      	blx	r3

	/* Infinite loop */
	while (1);
  403c72:	e7fe      	b.n	403c72 <Reset_Handler+0x82>
  403c74:	20000000 	.word	0x20000000
  403c78:	0040c334 	.word	0x0040c334
  403c7c:	20000930 	.word	0x20000930
  403c80:	0040c330 	.word	0x0040c330
  403c84:	2000b0d0 	.word	0x2000b0d0
  403c88:	20000930 	.word	0x20000930
  403c8c:	2000b0d3 	.word	0x2000b0d3
  403c90:	e000ed00 	.word	0xe000ed00
  403c94:	00400000 	.word	0x00400000
  403c98:	00406ae9 	.word	0x00406ae9
  403c9c:	00406a19 	.word	0x00406a19

00403ca0 <SystemCoreClockUpdate>:
 * \brief Get Core Clock Frequency.
 */
void SystemCoreClockUpdate( void )
{
	/* Determine clock frequency according to clock register values */
	switch ( PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk ) {
  403ca0:	4b3d      	ldr	r3, [pc, #244]	; (403d98 <SystemCoreClockUpdate+0xf8>)
  403ca2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  403ca4:	f003 0303 	and.w	r3, r3, #3
  403ca8:	2b03      	cmp	r3, #3
  403caa:	d85d      	bhi.n	403d68 <SystemCoreClockUpdate+0xc8>
  403cac:	e8df f003 	tbb	[pc, r3]
  403cb0:	2b2b0e02 	.word	0x2b2b0e02
	case PMC_MCKR_CSS_SLOW_CLK: /* Slow clock */
			if ( SUPC->SUPC_SR & SUPC_SR_OSCSEL ) {
  403cb4:	4b39      	ldr	r3, [pc, #228]	; (403d9c <SystemCoreClockUpdate+0xfc>)
  403cb6:	695b      	ldr	r3, [r3, #20]
  403cb8:	f013 0f80 	tst.w	r3, #128	; 0x80
				SystemCoreClock = CHIP_FREQ_XTAL_32K;
  403cbc:	bf14      	ite	ne
  403cbe:	f44f 4200 	movne.w	r2, #32768	; 0x8000
			} else {
				SystemCoreClock = CHIP_FREQ_SLCK_RC;
  403cc2:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
  403cc6:	4b36      	ldr	r3, [pc, #216]	; (403da0 <SystemCoreClockUpdate+0x100>)
  403cc8:	601a      	str	r2, [r3, #0]
  403cca:	e04d      	b.n	403d68 <SystemCoreClockUpdate+0xc8>
			}
		break;
		
	case PMC_MCKR_CSS_MAIN_CLK: /* Main clock */
		if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL ) {
  403ccc:	4b32      	ldr	r3, [pc, #200]	; (403d98 <SystemCoreClockUpdate+0xf8>)
  403cce:	6a1b      	ldr	r3, [r3, #32]
  403cd0:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  403cd4:	d003      	beq.n	403cde <SystemCoreClockUpdate+0x3e>
			SystemCoreClock = CHIP_FREQ_XTAL;
  403cd6:	4a33      	ldr	r2, [pc, #204]	; (403da4 <SystemCoreClockUpdate+0x104>)
  403cd8:	4b31      	ldr	r3, [pc, #196]	; (403da0 <SystemCoreClockUpdate+0x100>)
  403cda:	601a      	str	r2, [r3, #0]
  403cdc:	e044      	b.n	403d68 <SystemCoreClockUpdate+0xc8>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  403cde:	4a32      	ldr	r2, [pc, #200]	; (403da8 <SystemCoreClockUpdate+0x108>)
  403ce0:	4b2f      	ldr	r3, [pc, #188]	; (403da0 <SystemCoreClockUpdate+0x100>)
  403ce2:	601a      	str	r2, [r3, #0]
			
			switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk ) {
  403ce4:	4b2c      	ldr	r3, [pc, #176]	; (403d98 <SystemCoreClockUpdate+0xf8>)
  403ce6:	6a1b      	ldr	r3, [r3, #32]
  403ce8:	f003 0370 	and.w	r3, r3, #112	; 0x70
  403cec:	2b10      	cmp	r3, #16
  403cee:	d002      	beq.n	403cf6 <SystemCoreClockUpdate+0x56>
  403cf0:	2b20      	cmp	r3, #32
  403cf2:	d004      	beq.n	403cfe <SystemCoreClockUpdate+0x5e>
  403cf4:	e038      	b.n	403d68 <SystemCoreClockUpdate+0xc8>
			case CKGR_MOR_MOSCRCF_4_MHz:
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
			break;
			
			case CKGR_MOR_MOSCRCF_8_MHz:
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_8MHZ;
  403cf6:	4a2d      	ldr	r2, [pc, #180]	; (403dac <SystemCoreClockUpdate+0x10c>)
  403cf8:	4b29      	ldr	r3, [pc, #164]	; (403da0 <SystemCoreClockUpdate+0x100>)
  403cfa:	601a      	str	r2, [r3, #0]
			break;
  403cfc:	e034      	b.n	403d68 <SystemCoreClockUpdate+0xc8>
			
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_12MHZ;
  403cfe:	4a29      	ldr	r2, [pc, #164]	; (403da4 <SystemCoreClockUpdate+0x104>)
  403d00:	4b27      	ldr	r3, [pc, #156]	; (403da0 <SystemCoreClockUpdate+0x100>)
  403d02:	601a      	str	r2, [r3, #0]
			break;
  403d04:	e030      	b.n	403d68 <SystemCoreClockUpdate+0xc8>
		}
		break;
		
	case PMC_MCKR_CSS_PLLA_CLK:	/* PLLA clock */
	case PMC_MCKR_CSS_PLLB_CLK:	/* PLLB clock */
			if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL ) {
  403d06:	4b24      	ldr	r3, [pc, #144]	; (403d98 <SystemCoreClockUpdate+0xf8>)
  403d08:	6a1b      	ldr	r3, [r3, #32]
  403d0a:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  403d0e:	d003      	beq.n	403d18 <SystemCoreClockUpdate+0x78>
				SystemCoreClock = CHIP_FREQ_XTAL;
  403d10:	4a24      	ldr	r2, [pc, #144]	; (403da4 <SystemCoreClockUpdate+0x104>)
  403d12:	4b23      	ldr	r3, [pc, #140]	; (403da0 <SystemCoreClockUpdate+0x100>)
  403d14:	601a      	str	r2, [r3, #0]
  403d16:	e012      	b.n	403d3e <SystemCoreClockUpdate+0x9e>
			} else {
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  403d18:	4a23      	ldr	r2, [pc, #140]	; (403da8 <SystemCoreClockUpdate+0x108>)
  403d1a:	4b21      	ldr	r3, [pc, #132]	; (403da0 <SystemCoreClockUpdate+0x100>)
  403d1c:	601a      	str	r2, [r3, #0]
				
				switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk ) {
  403d1e:	4b1e      	ldr	r3, [pc, #120]	; (403d98 <SystemCoreClockUpdate+0xf8>)
  403d20:	6a1b      	ldr	r3, [r3, #32]
  403d22:	f003 0370 	and.w	r3, r3, #112	; 0x70
  403d26:	2b10      	cmp	r3, #16
  403d28:	d002      	beq.n	403d30 <SystemCoreClockUpdate+0x90>
  403d2a:	2b20      	cmp	r3, #32
  403d2c:	d004      	beq.n	403d38 <SystemCoreClockUpdate+0x98>
  403d2e:	e006      	b.n	403d3e <SystemCoreClockUpdate+0x9e>
				case CKGR_MOR_MOSCRCF_4_MHz:
					SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
					break;
				
				case CKGR_MOR_MOSCRCF_8_MHz:
					SystemCoreClock = CHIP_FREQ_MAINCK_RC_8MHZ;
  403d30:	4a1e      	ldr	r2, [pc, #120]	; (403dac <SystemCoreClockUpdate+0x10c>)
  403d32:	4b1b      	ldr	r3, [pc, #108]	; (403da0 <SystemCoreClockUpdate+0x100>)
  403d34:	601a      	str	r2, [r3, #0]
					break;
  403d36:	e002      	b.n	403d3e <SystemCoreClockUpdate+0x9e>
				
				case CKGR_MOR_MOSCRCF_12_MHz:
					SystemCoreClock = CHIP_FREQ_MAINCK_RC_12MHZ;
  403d38:	4a1a      	ldr	r2, [pc, #104]	; (403da4 <SystemCoreClockUpdate+0x104>)
  403d3a:	4b19      	ldr	r3, [pc, #100]	; (403da0 <SystemCoreClockUpdate+0x100>)
  403d3c:	601a      	str	r2, [r3, #0]
				default:
					break;
				}
			}
			
			if ( (uint32_t)(PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) ==
  403d3e:	4b16      	ldr	r3, [pc, #88]	; (403d98 <SystemCoreClockUpdate+0xf8>)
  403d40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  403d42:	f003 0303 	and.w	r3, r3, #3
  403d46:	2b02      	cmp	r3, #2
					PMC_MCKR_CSS_PLLA_CLK ) {
				SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk)
  403d48:	4a13      	ldr	r2, [pc, #76]	; (403d98 <SystemCoreClockUpdate+0xf8>)
  403d4a:	bf07      	ittee	eq
  403d4c:	6a93      	ldreq	r3, [r2, #40]	; 0x28
						>> CKGR_PLLAR_MULA_Pos) + 1U);
				SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk)
  403d4e:	6a92      	ldreq	r2, [r2, #40]	; 0x28
						>> CKGR_PLLAR_DIVA_Pos));
			} else {
				SystemCoreClock *= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_MULB_Msk)
  403d50:	6ad3      	ldrne	r3, [r2, #44]	; 0x2c
						>> CKGR_PLLBR_MULB_Pos) + 1U);
				SystemCoreClock /= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_DIVB_Msk)
  403d52:	6ad2      	ldrne	r2, [r2, #44]	; 0x2c
  403d54:	4812      	ldr	r0, [pc, #72]	; (403da0 <SystemCoreClockUpdate+0x100>)
						>> CKGR_PLLAR_MULA_Pos) + 1U);
				SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk)
						>> CKGR_PLLAR_DIVA_Pos));
			} else {
				SystemCoreClock *= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_MULB_Msk)
						>> CKGR_PLLBR_MULB_Pos) + 1U);
  403d56:	f3c3 410a 	ubfx	r1, r3, #16, #11
				SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk)
						>> CKGR_PLLAR_MULA_Pos) + 1U);
				SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk)
						>> CKGR_PLLAR_DIVA_Pos));
			} else {
				SystemCoreClock *= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_MULB_Msk)
  403d5a:	6803      	ldr	r3, [r0, #0]
  403d5c:	fb01 3303 	mla	r3, r1, r3, r3
						>> CKGR_PLLBR_MULB_Pos) + 1U);
				SystemCoreClock /= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_DIVB_Msk)
						>> CKGR_PLLBR_DIVB_Pos));
  403d60:	b2d2      	uxtb	r2, r2
				SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk)
						>> CKGR_PLLAR_DIVA_Pos));
			} else {
				SystemCoreClock *= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_MULB_Msk)
						>> CKGR_PLLBR_MULB_Pos) + 1U);
				SystemCoreClock /= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_DIVB_Msk)
  403d62:	fbb3 f3f2 	udiv	r3, r3, r2
  403d66:	6003      	str	r3, [r0, #0]
		
	default:
		break;
	}

	if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 ) {
  403d68:	4b0b      	ldr	r3, [pc, #44]	; (403d98 <SystemCoreClockUpdate+0xf8>)
  403d6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  403d6c:	f003 0370 	and.w	r3, r3, #112	; 0x70
  403d70:	2b70      	cmp	r3, #112	; 0x70
  403d72:	d107      	bne.n	403d84 <SystemCoreClockUpdate+0xe4>
		SystemCoreClock /= 3U;
  403d74:	4a0a      	ldr	r2, [pc, #40]	; (403da0 <SystemCoreClockUpdate+0x100>)
  403d76:	6813      	ldr	r3, [r2, #0]
  403d78:	490d      	ldr	r1, [pc, #52]	; (403db0 <SystemCoreClockUpdate+0x110>)
  403d7a:	fba1 1303 	umull	r1, r3, r1, r3
  403d7e:	085b      	lsrs	r3, r3, #1
  403d80:	6013      	str	r3, [r2, #0]
  403d82:	4770      	bx	lr
	} else {
		SystemCoreClock >>=
			((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  403d84:	4b04      	ldr	r3, [pc, #16]	; (403d98 <SystemCoreClockUpdate+0xf8>)
  403d86:	6b1a      	ldr	r2, [r3, #48]	; 0x30
	}

	if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 ) {
		SystemCoreClock /= 3U;
	} else {
		SystemCoreClock >>=
  403d88:	4905      	ldr	r1, [pc, #20]	; (403da0 <SystemCoreClockUpdate+0x100>)
			((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  403d8a:	f3c2 1202 	ubfx	r2, r2, #4, #3
	}

	if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 ) {
		SystemCoreClock /= 3U;
	} else {
		SystemCoreClock >>=
  403d8e:	680b      	ldr	r3, [r1, #0]
  403d90:	40d3      	lsrs	r3, r2
  403d92:	600b      	str	r3, [r1, #0]
  403d94:	4770      	bx	lr
  403d96:	bf00      	nop
  403d98:	400e0400 	.word	0x400e0400
  403d9c:	400e1410 	.word	0x400e1410
  403da0:	200000a4 	.word	0x200000a4
  403da4:	00b71b00 	.word	0x00b71b00
  403da8:	003d0900 	.word	0x003d0900
  403dac:	007a1200 	.word	0x007a1200
  403db0:	aaaaaaab 	.word	0xaaaaaaab

00403db4 <system_init_flash>:
				}
			}
		}
	}
#else
	if ( ul_clk < CHIP_FREQ_FWS_0 ) {
  403db4:	4b1a      	ldr	r3, [pc, #104]	; (403e20 <system_init_flash+0x6c>)
  403db6:	4298      	cmp	r0, r3
  403db8:	d807      	bhi.n	403dca <system_init_flash+0x16>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  403dba:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  403dbe:	4a19      	ldr	r2, [pc, #100]	; (403e24 <system_init_flash+0x70>)
  403dc0:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  403dc2:	f502 7200 	add.w	r2, r2, #512	; 0x200
  403dc6:	6013      	str	r3, [r2, #0]
  403dc8:	4770      	bx	lr
	} else {
		if ( ul_clk < CHIP_FREQ_FWS_1 ) {
  403dca:	4b17      	ldr	r3, [pc, #92]	; (403e28 <system_init_flash+0x74>)
  403dcc:	4298      	cmp	r0, r3
  403dce:	d806      	bhi.n	403dde <system_init_flash+0x2a>
			EFC0->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  403dd0:	4b16      	ldr	r3, [pc, #88]	; (403e2c <system_init_flash+0x78>)
  403dd2:	4a14      	ldr	r2, [pc, #80]	; (403e24 <system_init_flash+0x70>)
  403dd4:	6013      	str	r3, [r2, #0]
			EFC1->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  403dd6:	f502 7200 	add.w	r2, r2, #512	; 0x200
  403dda:	6013      	str	r3, [r2, #0]
  403ddc:	4770      	bx	lr
		} else {
			if ( ul_clk < CHIP_FREQ_FWS_2 ) {
  403dde:	4b14      	ldr	r3, [pc, #80]	; (403e30 <system_init_flash+0x7c>)
  403de0:	4298      	cmp	r0, r3
  403de2:	d806      	bhi.n	403df2 <system_init_flash+0x3e>
				EFC0->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  403de4:	4b13      	ldr	r3, [pc, #76]	; (403e34 <system_init_flash+0x80>)
  403de6:	4a0f      	ldr	r2, [pc, #60]	; (403e24 <system_init_flash+0x70>)
  403de8:	6013      	str	r3, [r2, #0]
				EFC1->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  403dea:	f502 7200 	add.w	r2, r2, #512	; 0x200
  403dee:	6013      	str	r3, [r2, #0]
  403df0:	4770      	bx	lr
			} else {
				if ( ul_clk < CHIP_FREQ_FWS_3 ) {
  403df2:	4b11      	ldr	r3, [pc, #68]	; (403e38 <system_init_flash+0x84>)
  403df4:	4298      	cmp	r0, r3
  403df6:	d806      	bhi.n	403e06 <system_init_flash+0x52>
					EFC0->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  403df8:	4b10      	ldr	r3, [pc, #64]	; (403e3c <system_init_flash+0x88>)
  403dfa:	4a0a      	ldr	r2, [pc, #40]	; (403e24 <system_init_flash+0x70>)
  403dfc:	6013      	str	r3, [r2, #0]
					EFC1->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  403dfe:	f502 7200 	add.w	r2, r2, #512	; 0x200
  403e02:	6013      	str	r3, [r2, #0]
  403e04:	4770      	bx	lr
				} else {
					if ( ul_clk < CHIP_FREQ_FWS_4 ) {
  403e06:	4b0e      	ldr	r3, [pc, #56]	; (403e40 <system_init_flash+0x8c>)
  403e08:	4298      	cmp	r0, r3
						EFC0->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
  403e0a:	bf94      	ite	ls
  403e0c:	f04f 2304 	movls.w	r3, #67109888	; 0x4000400
						EFC1->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
					} else {
						EFC0->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  403e10:	4b0c      	ldrhi	r3, [pc, #48]	; (403e44 <system_init_flash+0x90>)
  403e12:	4a04      	ldr	r2, [pc, #16]	; (403e24 <system_init_flash+0x70>)
  403e14:	6013      	str	r3, [r2, #0]
						EFC1->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  403e16:	f502 7200 	add.w	r2, r2, #512	; 0x200
  403e1a:	6013      	str	r3, [r2, #0]
  403e1c:	4770      	bx	lr
  403e1e:	bf00      	nop
  403e20:	01312cff 	.word	0x01312cff
  403e24:	400e0a00 	.word	0x400e0a00
  403e28:	026259ff 	.word	0x026259ff
  403e2c:	04000100 	.word	0x04000100
  403e30:	039386ff 	.word	0x039386ff
  403e34:	04000200 	.word	0x04000200
  403e38:	04c4b3ff 	.word	0x04c4b3ff
  403e3c:	04000300 	.word	0x04000300
  403e40:	05f5e0ff 	.word	0x05f5e0ff
  403e44:	04000500 	.word	0x04000500

00403e48 <_sbrk>:
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;

	if (heap == NULL) {
  403e48:	4b09      	ldr	r3, [pc, #36]	; (403e70 <_sbrk+0x28>)
  403e4a:	681b      	ldr	r3, [r3, #0]
  403e4c:	b913      	cbnz	r3, 403e54 <_sbrk+0xc>
		heap = (unsigned char *)&_end;
  403e4e:	4a09      	ldr	r2, [pc, #36]	; (403e74 <_sbrk+0x2c>)
  403e50:	4b07      	ldr	r3, [pc, #28]	; (403e70 <_sbrk+0x28>)
  403e52:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
  403e54:	4b06      	ldr	r3, [pc, #24]	; (403e70 <_sbrk+0x28>)
  403e56:	681b      	ldr	r3, [r3, #0]

	if (((int)prev_heap + incr) > ramend) {
  403e58:	181a      	adds	r2, r3, r0
  403e5a:	4907      	ldr	r1, [pc, #28]	; (403e78 <_sbrk+0x30>)
  403e5c:	4291      	cmp	r1, r2
  403e5e:	db04      	blt.n	403e6a <_sbrk+0x22>
		return (caddr_t) -1;	
	}

	heap += incr;
  403e60:	4610      	mov	r0, r2
  403e62:	4a03      	ldr	r2, [pc, #12]	; (403e70 <_sbrk+0x28>)
  403e64:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap;
  403e66:	4618      	mov	r0, r3
  403e68:	4770      	bx	lr
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;

	if (((int)prev_heap + incr) > ramend) {
		return (caddr_t) -1;	
  403e6a:	f04f 30ff 	mov.w	r0, #4294967295
	}

	heap += incr;

	return (caddr_t) prev_heap;
}
  403e6e:	4770      	bx	lr
  403e70:	20000c1c 	.word	0x20000c1c
  403e74:	2000e0d0 	.word	0x2000e0d0
  403e78:	2001fffc 	.word	0x2001fffc

00403e7c <prvHelpCommand>:
  403e7c:	b538      	push	{r3, r4, r5, lr}
  403e7e:	460a      	mov	r2, r1
  403e80:	4b08      	ldr	r3, [pc, #32]	; (403ea4 <prvHelpCommand+0x28>)
  403e82:	681b      	ldr	r3, [r3, #0]
  403e84:	b913      	cbnz	r3, 403e8c <prvHelpCommand+0x10>
  403e86:	4908      	ldr	r1, [pc, #32]	; (403ea8 <prvHelpCommand+0x2c>)
  403e88:	4b06      	ldr	r3, [pc, #24]	; (403ea4 <prvHelpCommand+0x28>)
  403e8a:	6019      	str	r1, [r3, #0]
  403e8c:	4c05      	ldr	r4, [pc, #20]	; (403ea4 <prvHelpCommand+0x28>)
  403e8e:	6825      	ldr	r5, [r4, #0]
  403e90:	682b      	ldr	r3, [r5, #0]
  403e92:	6859      	ldr	r1, [r3, #4]
  403e94:	4b05      	ldr	r3, [pc, #20]	; (403eac <prvHelpCommand+0x30>)
  403e96:	4798      	blx	r3
  403e98:	6868      	ldr	r0, [r5, #4]
  403e9a:	6020      	str	r0, [r4, #0]
  403e9c:	3000      	adds	r0, #0
  403e9e:	bf18      	it	ne
  403ea0:	2001      	movne	r0, #1
  403ea2:	bd38      	pop	{r3, r4, r5, pc}
  403ea4:	20000db0 	.word	0x20000db0
  403ea8:	200000ac 	.word	0x200000ac
  403eac:	00406f61 	.word	0x00406f61

00403eb0 <FreeRTOS_CLIRegisterCommand>:
  403eb0:	b538      	push	{r3, r4, r5, lr}
  403eb2:	b910      	cbnz	r0, 403eba <FreeRTOS_CLIRegisterCommand+0xa>
  403eb4:	4b0c      	ldr	r3, [pc, #48]	; (403ee8 <FreeRTOS_CLIRegisterCommand+0x38>)
  403eb6:	4798      	blx	r3
  403eb8:	e7fe      	b.n	403eb8 <FreeRTOS_CLIRegisterCommand+0x8>
  403eba:	4605      	mov	r5, r0
  403ebc:	2008      	movs	r0, #8
  403ebe:	4b0b      	ldr	r3, [pc, #44]	; (403eec <FreeRTOS_CLIRegisterCommand+0x3c>)
  403ec0:	4798      	blx	r3
  403ec2:	4604      	mov	r4, r0
  403ec4:	b910      	cbnz	r0, 403ecc <FreeRTOS_CLIRegisterCommand+0x1c>
  403ec6:	4b08      	ldr	r3, [pc, #32]	; (403ee8 <FreeRTOS_CLIRegisterCommand+0x38>)
  403ec8:	4798      	blx	r3
  403eca:	e7fe      	b.n	403eca <FreeRTOS_CLIRegisterCommand+0x1a>
  403ecc:	4b08      	ldr	r3, [pc, #32]	; (403ef0 <FreeRTOS_CLIRegisterCommand+0x40>)
  403ece:	4798      	blx	r3
  403ed0:	6025      	str	r5, [r4, #0]
  403ed2:	2300      	movs	r3, #0
  403ed4:	6063      	str	r3, [r4, #4]
  403ed6:	4b07      	ldr	r3, [pc, #28]	; (403ef4 <FreeRTOS_CLIRegisterCommand+0x44>)
  403ed8:	681a      	ldr	r2, [r3, #0]
  403eda:	6054      	str	r4, [r2, #4]
  403edc:	601c      	str	r4, [r3, #0]
  403ede:	4b06      	ldr	r3, [pc, #24]	; (403ef8 <FreeRTOS_CLIRegisterCommand+0x48>)
  403ee0:	4798      	blx	r3
  403ee2:	2001      	movs	r0, #1
  403ee4:	bd38      	pop	{r3, r4, r5, pc}
  403ee6:	bf00      	nop
  403ee8:	00404179 	.word	0x00404179
  403eec:	00404405 	.word	0x00404405
  403ef0:	004041a9 	.word	0x004041a9
  403ef4:	200000a8 	.word	0x200000a8
  403ef8:	004041e9 	.word	0x004041e9

00403efc <FreeRTOS_CLIProcessCommand>:
  403efc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  403f00:	b083      	sub	sp, #12
  403f02:	4606      	mov	r6, r0
  403f04:	9101      	str	r1, [sp, #4]
  403f06:	4692      	mov	sl, r2
  403f08:	4b33      	ldr	r3, [pc, #204]	; (403fd8 <FreeRTOS_CLIProcessCommand+0xdc>)
  403f0a:	681a      	ldr	r2, [r3, #0]
  403f0c:	2a00      	cmp	r2, #0
  403f0e:	d147      	bne.n	403fa0 <FreeRTOS_CLIProcessCommand+0xa4>
  403f10:	4c32      	ldr	r4, [pc, #200]	; (403fdc <FreeRTOS_CLIProcessCommand+0xe0>)
  403f12:	601c      	str	r4, [r3, #0]
  403f14:	f8df 80d4 	ldr.w	r8, [pc, #212]	; 403fec <FreeRTOS_CLIProcessCommand+0xf0>
  403f18:	f8df b0d4 	ldr.w	fp, [pc, #212]	; 403ff0 <FreeRTOS_CLIProcessCommand+0xf4>
  403f1c:	4699      	mov	r9, r3
  403f1e:	6827      	ldr	r7, [r4, #0]
  403f20:	683d      	ldr	r5, [r7, #0]
  403f22:	4628      	mov	r0, r5
  403f24:	47c0      	blx	r8
  403f26:	4602      	mov	r2, r0
  403f28:	5633      	ldrsb	r3, [r6, r0]
  403f2a:	f033 0320 	bics.w	r3, r3, #32
  403f2e:	d124      	bne.n	403f7a <FreeRTOS_CLIProcessCommand+0x7e>
  403f30:	4630      	mov	r0, r6
  403f32:	4629      	mov	r1, r5
  403f34:	47d8      	blx	fp
  403f36:	bb00      	cbnz	r0, 403f7a <FreeRTOS_CLIProcessCommand+0x7e>
  403f38:	7b39      	ldrb	r1, [r7, #12]
  403f3a:	f011 0f80 	tst.w	r1, #128	; 0x80
  403f3e:	d142      	bne.n	403fc6 <FreeRTOS_CLIProcessCommand+0xca>
  403f40:	7832      	ldrb	r2, [r6, #0]
  403f42:	b1aa      	cbz	r2, 403f70 <FreeRTOS_CLIProcessCommand+0x74>
  403f44:	4630      	mov	r0, r6
  403f46:	2300      	movs	r3, #0
  403f48:	461c      	mov	r4, r3
  403f4a:	461d      	mov	r5, r3
  403f4c:	2701      	movs	r7, #1
  403f4e:	b252      	sxtb	r2, r2
  403f50:	2a20      	cmp	r2, #32
  403f52:	d104      	bne.n	403f5e <FreeRTOS_CLIProcessCommand+0x62>
  403f54:	b924      	cbnz	r4, 403f60 <FreeRTOS_CLIProcessCommand+0x64>
  403f56:	3301      	adds	r3, #1
  403f58:	b2db      	uxtb	r3, r3
  403f5a:	463c      	mov	r4, r7
  403f5c:	e000      	b.n	403f60 <FreeRTOS_CLIProcessCommand+0x64>
  403f5e:	462c      	mov	r4, r5
  403f60:	f810 2f01 	ldrb.w	r2, [r0, #1]!
  403f64:	2a00      	cmp	r2, #0
  403f66:	d1f2      	bne.n	403f4e <FreeRTOS_CLIProcessCommand+0x52>
  403f68:	b11c      	cbz	r4, 403f72 <FreeRTOS_CLIProcessCommand+0x76>
  403f6a:	3b01      	subs	r3, #1
  403f6c:	b2db      	uxtb	r3, r3
  403f6e:	e000      	b.n	403f72 <FreeRTOS_CLIProcessCommand+0x76>
  403f70:	2300      	movs	r3, #0
  403f72:	4a19      	ldr	r2, [pc, #100]	; (403fd8 <FreeRTOS_CLIProcessCommand+0xdc>)
  403f74:	6812      	ldr	r2, [r2, #0]
  403f76:	b932      	cbnz	r2, 403f86 <FreeRTOS_CLIProcessCommand+0x8a>
  403f78:	e01e      	b.n	403fb8 <FreeRTOS_CLIProcessCommand+0xbc>
  403f7a:	6864      	ldr	r4, [r4, #4]
  403f7c:	f8c9 4000 	str.w	r4, [r9]
  403f80:	2c00      	cmp	r4, #0
  403f82:	d1cc      	bne.n	403f1e <FreeRTOS_CLIProcessCommand+0x22>
  403f84:	e018      	b.n	403fb8 <FreeRTOS_CLIProcessCommand+0xbc>
  403f86:	b249      	sxtb	r1, r1
  403f88:	b25b      	sxtb	r3, r3
  403f8a:	4299      	cmp	r1, r3
  403f8c:	d008      	beq.n	403fa0 <FreeRTOS_CLIProcessCommand+0xa4>
  403f8e:	9801      	ldr	r0, [sp, #4]
  403f90:	4913      	ldr	r1, [pc, #76]	; (403fe0 <FreeRTOS_CLIProcessCommand+0xe4>)
  403f92:	4652      	mov	r2, sl
  403f94:	4b13      	ldr	r3, [pc, #76]	; (403fe4 <FreeRTOS_CLIProcessCommand+0xe8>)
  403f96:	4798      	blx	r3
  403f98:	2300      	movs	r3, #0
  403f9a:	4a0f      	ldr	r2, [pc, #60]	; (403fd8 <FreeRTOS_CLIProcessCommand+0xdc>)
  403f9c:	6013      	str	r3, [r2, #0]
  403f9e:	e017      	b.n	403fd0 <FreeRTOS_CLIProcessCommand+0xd4>
  403fa0:	6813      	ldr	r3, [r2, #0]
  403fa2:	689b      	ldr	r3, [r3, #8]
  403fa4:	9801      	ldr	r0, [sp, #4]
  403fa6:	4651      	mov	r1, sl
  403fa8:	4632      	mov	r2, r6
  403faa:	4798      	blx	r3
  403fac:	4603      	mov	r3, r0
  403fae:	b978      	cbnz	r0, 403fd0 <FreeRTOS_CLIProcessCommand+0xd4>
  403fb0:	2100      	movs	r1, #0
  403fb2:	4a09      	ldr	r2, [pc, #36]	; (403fd8 <FreeRTOS_CLIProcessCommand+0xdc>)
  403fb4:	6011      	str	r1, [r2, #0]
  403fb6:	e00b      	b.n	403fd0 <FreeRTOS_CLIProcessCommand+0xd4>
  403fb8:	9801      	ldr	r0, [sp, #4]
  403fba:	490b      	ldr	r1, [pc, #44]	; (403fe8 <FreeRTOS_CLIProcessCommand+0xec>)
  403fbc:	4652      	mov	r2, sl
  403fbe:	4b09      	ldr	r3, [pc, #36]	; (403fe4 <FreeRTOS_CLIProcessCommand+0xe8>)
  403fc0:	4798      	blx	r3
  403fc2:	2300      	movs	r3, #0
  403fc4:	e004      	b.n	403fd0 <FreeRTOS_CLIProcessCommand+0xd4>
  403fc6:	4b04      	ldr	r3, [pc, #16]	; (403fd8 <FreeRTOS_CLIProcessCommand+0xdc>)
  403fc8:	681a      	ldr	r2, [r3, #0]
  403fca:	2a00      	cmp	r2, #0
  403fcc:	d1e8      	bne.n	403fa0 <FreeRTOS_CLIProcessCommand+0xa4>
  403fce:	e7f3      	b.n	403fb8 <FreeRTOS_CLIProcessCommand+0xbc>
  403fd0:	4618      	mov	r0, r3
  403fd2:	b003      	add	sp, #12
  403fd4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403fd8:	20000db4 	.word	0x20000db4
  403fdc:	200000ac 	.word	0x200000ac
  403fe0:	0040b9d4 	.word	0x0040b9d4
  403fe4:	00406f61 	.word	0x00406f61
  403fe8:	0040ba2c 	.word	0x0040ba2c
  403fec:	00406e11 	.word	0x00406e11
  403ff0:	00406ec9 	.word	0x00406ec9

00403ff4 <FreeRTOS_CLIGetOutputBuffer>:
  403ff4:	4800      	ldr	r0, [pc, #0]	; (403ff8 <FreeRTOS_CLIGetOutputBuffer+0x4>)
  403ff6:	4770      	bx	lr
  403ff8:	20000c20 	.word	0x20000c20

00403ffc <FreeRTOS_CLIGetParameter>:
  403ffc:	2300      	movs	r3, #0
  403ffe:	6013      	str	r3, [r2, #0]
  404000:	bb11      	cbnz	r1, 404048 <FreeRTOS_CLIGetParameter+0x4c>
  404002:	4618      	mov	r0, r3
  404004:	4770      	bx	lr
  404006:	f810 3f01 	ldrb.w	r3, [r0, #1]!
  40400a:	b353      	cbz	r3, 404062 <FreeRTOS_CLIGetParameter+0x66>
  40400c:	b25b      	sxtb	r3, r3
  40400e:	2b20      	cmp	r3, #32
  404010:	d1f9      	bne.n	404006 <FreeRTOS_CLIGetParameter+0xa>
  404012:	f810 3f01 	ldrb.w	r3, [r0, #1]!
  404016:	b259      	sxtb	r1, r3
  404018:	2920      	cmp	r1, #32
  40401a:	d0fa      	beq.n	404012 <FreeRTOS_CLIGetParameter+0x16>
  40401c:	b1eb      	cbz	r3, 40405a <FreeRTOS_CLIGetParameter+0x5e>
  40401e:	3401      	adds	r4, #1
  404020:	42ac      	cmp	r4, r5
  404022:	d114      	bne.n	40404e <FreeRTOS_CLIGetParameter+0x52>
  404024:	f990 3000 	ldrsb.w	r3, [r0]
  404028:	f033 0320 	bics.w	r3, r3, #32
  40402c:	d017      	beq.n	40405e <FreeRTOS_CLIGetParameter+0x62>
  40402e:	4601      	mov	r1, r0
  404030:	6813      	ldr	r3, [r2, #0]
  404032:	3301      	adds	r3, #1
  404034:	6013      	str	r3, [r2, #0]
  404036:	f911 4f01 	ldrsb.w	r4, [r1, #1]!
  40403a:	f034 0420 	bics.w	r4, r4, #32
  40403e:	d1f7      	bne.n	404030 <FreeRTOS_CLIGetParameter+0x34>
  404040:	2b00      	cmp	r3, #0
  404042:	bf08      	it	eq
  404044:	2000      	moveq	r0, #0
  404046:	e00e      	b.n	404066 <FreeRTOS_CLIGetParameter+0x6a>
  404048:	b430      	push	{r4, r5}
  40404a:	460d      	mov	r5, r1
  40404c:	2400      	movs	r4, #0
  40404e:	7803      	ldrb	r3, [r0, #0]
  404050:	b13b      	cbz	r3, 404062 <FreeRTOS_CLIGetParameter+0x66>
  404052:	b25b      	sxtb	r3, r3
  404054:	2b20      	cmp	r3, #32
  404056:	d1d6      	bne.n	404006 <FreeRTOS_CLIGetParameter+0xa>
  404058:	e7db      	b.n	404012 <FreeRTOS_CLIGetParameter+0x16>
  40405a:	2000      	movs	r0, #0
  40405c:	e003      	b.n	404066 <FreeRTOS_CLIGetParameter+0x6a>
  40405e:	2000      	movs	r0, #0
  404060:	e001      	b.n	404066 <FreeRTOS_CLIGetParameter+0x6a>
  404062:	7803      	ldrb	r3, [r0, #0]
  404064:	e7da      	b.n	40401c <FreeRTOS_CLIGetParameter+0x20>
  404066:	bc30      	pop	{r4, r5}
  404068:	4770      	bx	lr
  40406a:	bf00      	nop

0040406c <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
  40406c:	f100 0308 	add.w	r3, r0, #8
  404070:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
  404072:	f04f 32ff 	mov.w	r2, #4294967295
  404076:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
  404078:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
  40407a:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
  40407c:	2300      	movs	r3, #0
  40407e:	6003      	str	r3, [r0, #0]
  404080:	4770      	bx	lr
  404082:	bf00      	nop

00404084 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
  404084:	2300      	movs	r3, #0
  404086:	6103      	str	r3, [r0, #16]
  404088:	4770      	bx	lr
  40408a:	bf00      	nop

0040408c <vListInsertEnd>:
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
  40408c:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
  40408e:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
  404090:	689a      	ldr	r2, [r3, #8]
  404092:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
  404094:	689a      	ldr	r2, [r3, #8]
  404096:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
  404098:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
  40409a:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
  40409c:	6803      	ldr	r3, [r0, #0]
  40409e:	3301      	adds	r3, #1
  4040a0:	6003      	str	r3, [r0, #0]
  4040a2:	4770      	bx	lr

004040a4 <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
  4040a4:	b430      	push	{r4, r5}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
  4040a6:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
  4040a8:	f1b5 3fff 	cmp.w	r5, #4294967295
  4040ac:	d101      	bne.n	4040b2 <vListInsert+0xe>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
  4040ae:	6902      	ldr	r2, [r0, #16]
  4040b0:	e007      	b.n	4040c2 <vListInsert+0x1e>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
  4040b2:	f100 0208 	add.w	r2, r0, #8
  4040b6:	e000      	b.n	4040ba <vListInsert+0x16>
  4040b8:	461a      	mov	r2, r3
  4040ba:	6853      	ldr	r3, [r2, #4]
  4040bc:	681c      	ldr	r4, [r3, #0]
  4040be:	42a5      	cmp	r5, r4
  4040c0:	d2fa      	bcs.n	4040b8 <vListInsert+0x14>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
  4040c2:	6853      	ldr	r3, [r2, #4]
  4040c4:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
  4040c6:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
  4040c8:	608a      	str	r2, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
  4040ca:	6051      	str	r1, [r2, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
  4040cc:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
  4040ce:	6803      	ldr	r3, [r0, #0]
  4040d0:	3301      	adds	r3, #1
  4040d2:	6003      	str	r3, [r0, #0]
}
  4040d4:	bc30      	pop	{r4, r5}
  4040d6:	4770      	bx	lr

004040d8 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
  4040d8:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
  4040da:	6842      	ldr	r2, [r0, #4]
  4040dc:	6881      	ldr	r1, [r0, #8]
  4040de:	6091      	str	r1, [r2, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
  4040e0:	6882      	ldr	r2, [r0, #8]
  4040e2:	6841      	ldr	r1, [r0, #4]
  4040e4:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
  4040e6:	685a      	ldr	r2, [r3, #4]
  4040e8:	4282      	cmp	r2, r0
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
  4040ea:	bf04      	itt	eq
  4040ec:	6892      	ldreq	r2, [r2, #8]
  4040ee:	605a      	streq	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
  4040f0:	2200      	movs	r2, #0
  4040f2:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
  4040f4:	6818      	ldr	r0, [r3, #0]
  4040f6:	3801      	subs	r0, #1
  4040f8:	6018      	str	r0, [r3, #0]

	return pxList->uxNumberOfItems;
}
  4040fa:	4770      	bx	lr

004040fc <prvPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
  4040fc:	4806      	ldr	r0, [pc, #24]	; (404118 <prvPortStartFirstTask+0x1c>)
  4040fe:	6800      	ldr	r0, [r0, #0]
  404100:	6800      	ldr	r0, [r0, #0]
  404102:	f380 8808 	msr	MSP, r0
  404106:	b662      	cpsie	i
  404108:	b661      	cpsie	f
  40410a:	f3bf 8f4f 	dsb	sy
  40410e:	f3bf 8f6f 	isb	sy
  404112:	df00      	svc	0
  404114:	bf00      	nop
  404116:	0000      	.short	0x0000
  404118:	e000ed08 	.word	0xe000ed08

0040411c <pxPortInitialiseStack>:
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
  40411c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
  404120:	f840 3c04 	str.w	r3, [r0, #-4]
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
  404124:	f840 1c08 	str.w	r1, [r0, #-8]
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
  404128:	4b03      	ldr	r3, [pc, #12]	; (404138 <pxPortInitialiseStack+0x1c>)
  40412a:	f840 3c0c 	str.w	r3, [r0, #-12]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
  40412e:	f840 2c20 	str.w	r2, [r0, #-32]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */

	return pxTopOfStack;
}
  404132:	3840      	subs	r0, #64	; 0x40
  404134:	4770      	bx	lr
  404136:	bf00      	nop
  404138:	00404189 	.word	0x00404189

0040413c <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
  40413c:	4b07      	ldr	r3, [pc, #28]	; (40415c <pxCurrentTCBConst2>)
  40413e:	6819      	ldr	r1, [r3, #0]
  404140:	6808      	ldr	r0, [r1, #0]
  404142:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
  404146:	f380 8809 	msr	PSP, r0
  40414a:	f3bf 8f6f 	isb	sy
  40414e:	f04f 0000 	mov.w	r0, #0
  404152:	f380 8811 	msr	BASEPRI, r0
  404156:	f04e 0e0d 	orr.w	lr, lr, #13
  40415a:	4770      	bx	lr

0040415c <pxCurrentTCBConst2>:
  40415c:	2000ae80 	.word	0x2000ae80

00404160 <vPortYield>:
/*-----------------------------------------------------------*/

void vPortYield( void )
{
	/* Set a PendSV to request a context switch. */
	portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
  404160:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  404164:	4b03      	ldr	r3, [pc, #12]	; (404174 <vPortYield+0x14>)
  404166:	601a      	str	r2, [r3, #0]

	/* Barriers are normally not required but do ensure the code is completely
	within the specified behaviour for the architecture. */
	__asm volatile( "dsb" );
  404168:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
  40416c:	f3bf 8f6f 	isb	sy
  404170:	4770      	bx	lr
  404172:	bf00      	nop
  404174:	e000ed04 	.word	0xe000ed04

00404178 <ulPortSetInterruptMask>:
}
/*-----------------------------------------------------------*/

__attribute__(( naked )) uint32_t ulPortSetInterruptMask( void )
{
	__asm volatile														\
  404178:	f3ef 8011 	mrs	r0, BASEPRI
  40417c:	f04f 01a0 	mov.w	r1, #160	; 0xa0
  404180:	f381 8811 	msr	BASEPRI, r1
  404184:	4770      	bx	lr
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return 0;
}
  404186:	2000      	movs	r0, #0

00404188 <prvTaskExitError>:
	return pxTopOfStack;
}
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
  404188:	b508      	push	{r3, lr}
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
  40418a:	4b05      	ldr	r3, [pc, #20]	; (4041a0 <prvTaskExitError+0x18>)
  40418c:	681b      	ldr	r3, [r3, #0]
  40418e:	f1b3 3fff 	cmp.w	r3, #4294967295
  404192:	d002      	beq.n	40419a <prvTaskExitError+0x12>
  404194:	4b03      	ldr	r3, [pc, #12]	; (4041a4 <prvTaskExitError+0x1c>)
  404196:	4798      	blx	r3
  404198:	e7fe      	b.n	404198 <prvTaskExitError+0x10>
	portDISABLE_INTERRUPTS();
  40419a:	4b02      	ldr	r3, [pc, #8]	; (4041a4 <prvTaskExitError+0x1c>)
  40419c:	4798      	blx	r3
	for( ;; );
  40419e:	e7fe      	b.n	40419e <prvTaskExitError+0x16>
  4041a0:	200000b4 	.word	0x200000b4
  4041a4:	00404179 	.word	0x00404179

004041a8 <vPortEnterCritical>:
	__asm volatile( "isb" );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
  4041a8:	b508      	push	{r3, lr}
	portDISABLE_INTERRUPTS();
  4041aa:	4b0a      	ldr	r3, [pc, #40]	; (4041d4 <vPortEnterCritical+0x2c>)
  4041ac:	4798      	blx	r3
	uxCriticalNesting++;
  4041ae:	4a0a      	ldr	r2, [pc, #40]	; (4041d8 <vPortEnterCritical+0x30>)
  4041b0:	6813      	ldr	r3, [r2, #0]
  4041b2:	3301      	adds	r3, #1
  4041b4:	6013      	str	r3, [r2, #0]
	__asm volatile( "dsb" );
  4041b6:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
  4041ba:	f3bf 8f6f 	isb	sy
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API 
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
  4041be:	2b01      	cmp	r3, #1
  4041c0:	d107      	bne.n	4041d2 <vPortEnterCritical+0x2a>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
  4041c2:	4b06      	ldr	r3, [pc, #24]	; (4041dc <vPortEnterCritical+0x34>)
  4041c4:	681b      	ldr	r3, [r3, #0]
  4041c6:	f013 0fff 	tst.w	r3, #255	; 0xff
  4041ca:	d002      	beq.n	4041d2 <vPortEnterCritical+0x2a>
  4041cc:	4b01      	ldr	r3, [pc, #4]	; (4041d4 <vPortEnterCritical+0x2c>)
  4041ce:	4798      	blx	r3
  4041d0:	e7fe      	b.n	4041d0 <vPortEnterCritical+0x28>
  4041d2:	bd08      	pop	{r3, pc}
  4041d4:	00404179 	.word	0x00404179
  4041d8:	200000b4 	.word	0x200000b4
  4041dc:	e000ed04 	.word	0xe000ed04

004041e0 <vPortClearInterruptMask>:
}
/*-----------------------------------------------------------*/

__attribute__(( naked )) void vPortClearInterruptMask( uint32_t ulNewMaskValue )
{
	__asm volatile													\
  4041e0:	f380 8811 	msr	BASEPRI, r0
  4041e4:	4770      	bx	lr
  4041e6:	bf00      	nop

004041e8 <vPortExitCritical>:
	}
}
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
  4041e8:	b508      	push	{r3, lr}
	configASSERT( uxCriticalNesting );
  4041ea:	4b07      	ldr	r3, [pc, #28]	; (404208 <vPortExitCritical+0x20>)
  4041ec:	681b      	ldr	r3, [r3, #0]
  4041ee:	b913      	cbnz	r3, 4041f6 <vPortExitCritical+0xe>
  4041f0:	4b06      	ldr	r3, [pc, #24]	; (40420c <vPortExitCritical+0x24>)
  4041f2:	4798      	blx	r3
  4041f4:	e7fe      	b.n	4041f4 <vPortExitCritical+0xc>
	uxCriticalNesting--;
  4041f6:	3b01      	subs	r3, #1
  4041f8:	4a03      	ldr	r2, [pc, #12]	; (404208 <vPortExitCritical+0x20>)
  4041fa:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
  4041fc:	b913      	cbnz	r3, 404204 <vPortExitCritical+0x1c>
	{
		portENABLE_INTERRUPTS();
  4041fe:	2000      	movs	r0, #0
  404200:	4b03      	ldr	r3, [pc, #12]	; (404210 <vPortExitCritical+0x28>)
  404202:	4798      	blx	r3
  404204:	bd08      	pop	{r3, pc}
  404206:	bf00      	nop
  404208:	200000b4 	.word	0x200000b4
  40420c:	00404179 	.word	0x00404179
  404210:	004041e1 	.word	0x004041e1

00404214 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
  404214:	f3ef 8009 	mrs	r0, PSP
  404218:	f3bf 8f6f 	isb	sy
  40421c:	4b0d      	ldr	r3, [pc, #52]	; (404254 <pxCurrentTCBConst>)
  40421e:	681a      	ldr	r2, [r3, #0]
  404220:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
  404224:	6010      	str	r0, [r2, #0]
  404226:	e92d 4008 	stmdb	sp!, {r3, lr}
  40422a:	f04f 00a0 	mov.w	r0, #160	; 0xa0
  40422e:	f380 8811 	msr	BASEPRI, r0
  404232:	f001 fa01 	bl	405638 <vTaskSwitchContext>
  404236:	f04f 0000 	mov.w	r0, #0
  40423a:	f380 8811 	msr	BASEPRI, r0
  40423e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  404242:	6819      	ldr	r1, [r3, #0]
  404244:	6808      	ldr	r0, [r1, #0]
  404246:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
  40424a:	f380 8809 	msr	PSP, r0
  40424e:	f3bf 8f6f 	isb	sy
  404252:	4770      	bx	lr

00404254 <pxCurrentTCBConst>:
  404254:	2000ae80 	.word	0x2000ae80

00404258 <SysTick_Handler>:
	);
}
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
  404258:	b508      	push	{r3, lr}
	/* The SysTick runs at the lowest interrupt priority, so when this interrupt
	executes all interrupts must be unmasked.  There is therefore no need to
	save and then restore the interrupt mask value as its value is already
	known. */
	( void ) portSET_INTERRUPT_MASK_FROM_ISR();
  40425a:	4b06      	ldr	r3, [pc, #24]	; (404274 <SysTick_Handler+0x1c>)
  40425c:	4798      	blx	r3
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
  40425e:	4b06      	ldr	r3, [pc, #24]	; (404278 <SysTick_Handler+0x20>)
  404260:	4798      	blx	r3
  404262:	b118      	cbz	r0, 40426c <SysTick_Handler+0x14>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
  404264:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  404268:	4b04      	ldr	r3, [pc, #16]	; (40427c <SysTick_Handler+0x24>)
  40426a:	601a      	str	r2, [r3, #0]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( 0 );
  40426c:	2000      	movs	r0, #0
  40426e:	4b04      	ldr	r3, [pc, #16]	; (404280 <SysTick_Handler+0x28>)
  404270:	4798      	blx	r3
  404272:	bd08      	pop	{r3, pc}
  404274:	00404179 	.word	0x00404179
  404278:	00405249 	.word	0x00405249
  40427c:	e000ed04 	.word	0xe000ed04
  404280:	004041e1 	.word	0x004041e1

00404284 <vPortSetupTimerInterrupt>:
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
  404284:	4b06      	ldr	r3, [pc, #24]	; (4042a0 <vPortSetupTimerInterrupt+0x1c>)
  404286:	681b      	ldr	r3, [r3, #0]
  404288:	4a06      	ldr	r2, [pc, #24]	; (4042a4 <vPortSetupTimerInterrupt+0x20>)
  40428a:	fba2 2303 	umull	r2, r3, r2, r3
  40428e:	099b      	lsrs	r3, r3, #6
  404290:	3b01      	subs	r3, #1
  404292:	4a05      	ldr	r2, [pc, #20]	; (4042a8 <vPortSetupTimerInterrupt+0x24>)
  404294:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
  404296:	2207      	movs	r2, #7
  404298:	4b04      	ldr	r3, [pc, #16]	; (4042ac <vPortSetupTimerInterrupt+0x28>)
  40429a:	601a      	str	r2, [r3, #0]
  40429c:	4770      	bx	lr
  40429e:	bf00      	nop
  4042a0:	200000a4 	.word	0x200000a4
  4042a4:	10624dd3 	.word	0x10624dd3
  4042a8:	e000e014 	.word	0xe000e014
  4042ac:	e000e010 	.word	0xe000e010

004042b0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
  4042b0:	b500      	push	{lr}
  4042b2:	b083      	sub	sp, #12
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
  4042b4:	4b22      	ldr	r3, [pc, #136]	; (404340 <xPortStartScheduler+0x90>)
  4042b6:	781a      	ldrb	r2, [r3, #0]
  4042b8:	b2d2      	uxtb	r2, r2
  4042ba:	9201      	str	r2, [sp, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
  4042bc:	22ff      	movs	r2, #255	; 0xff
  4042be:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
  4042c0:	781b      	ldrb	r3, [r3, #0]
  4042c2:	b2db      	uxtb	r3, r3
  4042c4:	f88d 3003 	strb.w	r3, [sp, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
  4042c8:	f89d 3003 	ldrb.w	r3, [sp, #3]
  4042cc:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
  4042d0:	4a1c      	ldr	r2, [pc, #112]	; (404344 <xPortStartScheduler+0x94>)
  4042d2:	7013      	strb	r3, [r2, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
  4042d4:	2207      	movs	r2, #7
  4042d6:	4b1c      	ldr	r3, [pc, #112]	; (404348 <xPortStartScheduler+0x98>)
  4042d8:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
  4042da:	f89d 3003 	ldrb.w	r3, [sp, #3]
  4042de:	f013 0f80 	tst.w	r3, #128	; 0x80
  4042e2:	d010      	beq.n	404306 <xPortStartScheduler+0x56>
  4042e4:	2206      	movs	r2, #6
  4042e6:	e000      	b.n	4042ea <xPortStartScheduler+0x3a>
  4042e8:	460a      	mov	r2, r1
		{
			ulMaxPRIGROUPValue--;
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
  4042ea:	f89d 3003 	ldrb.w	r3, [sp, #3]
  4042ee:	005b      	lsls	r3, r3, #1
  4042f0:	b2db      	uxtb	r3, r3
  4042f2:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
  4042f6:	f89d 3003 	ldrb.w	r3, [sp, #3]
  4042fa:	1e51      	subs	r1, r2, #1
  4042fc:	f013 0f80 	tst.w	r3, #128	; 0x80
  404300:	d1f2      	bne.n	4042e8 <xPortStartScheduler+0x38>
  404302:	4b11      	ldr	r3, [pc, #68]	; (404348 <xPortStartScheduler+0x98>)
  404304:	601a      	str	r2, [r3, #0]
		}

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
  404306:	4a10      	ldr	r2, [pc, #64]	; (404348 <xPortStartScheduler+0x98>)
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
		}

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
  404308:	6813      	ldr	r3, [r2, #0]
  40430a:	021b      	lsls	r3, r3, #8
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
  40430c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  404310:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
  404312:	9b01      	ldr	r3, [sp, #4]
  404314:	b2db      	uxtb	r3, r3
  404316:	4a0a      	ldr	r2, [pc, #40]	; (404340 <xPortStartScheduler+0x90>)
  404318:	7013      	strb	r3, [r2, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
  40431a:	4b0c      	ldr	r3, [pc, #48]	; (40434c <xPortStartScheduler+0x9c>)
  40431c:	681a      	ldr	r2, [r3, #0]
  40431e:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
  404322:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
  404324:	681a      	ldr	r2, [r3, #0]
  404326:	f042 4270 	orr.w	r2, r2, #4026531840	; 0xf0000000
  40432a:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
  40432c:	4b08      	ldr	r3, [pc, #32]	; (404350 <xPortStartScheduler+0xa0>)
  40432e:	4798      	blx	r3

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
  404330:	2200      	movs	r2, #0
  404332:	4b08      	ldr	r3, [pc, #32]	; (404354 <xPortStartScheduler+0xa4>)
  404334:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
  404336:	4b08      	ldr	r3, [pc, #32]	; (404358 <xPortStartScheduler+0xa8>)
  404338:	4798      	blx	r3

	/* Should never get here as the tasks will now be executing!  Call the task
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS. */
	prvTaskExitError();
  40433a:	4b08      	ldr	r3, [pc, #32]	; (40435c <xPortStartScheduler+0xac>)
  40433c:	4798      	blx	r3
  40433e:	bf00      	nop
  404340:	e000e400 	.word	0xe000e400
  404344:	20000db8 	.word	0x20000db8
  404348:	20000dbc 	.word	0x20000dbc
  40434c:	e000ed20 	.word	0xe000ed20
  404350:	00404285 	.word	0x00404285
  404354:	200000b4 	.word	0x200000b4
  404358:	004040fd 	.word	0x004040fd
  40435c:	00404189 	.word	0x00404189

00404360 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
  404360:	b508      	push	{r3, lr}
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) );
  404362:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
  404366:	2b0f      	cmp	r3, #15
  404368:	d909      	bls.n	40437e <vPortValidateInterruptPriority+0x1e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
  40436a:	4a0b      	ldr	r2, [pc, #44]	; (404398 <vPortValidateInterruptPriority+0x38>)
  40436c:	5c9b      	ldrb	r3, [r3, r2]
  40436e:	b2db      	uxtb	r3, r3
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
  404370:	4a0a      	ldr	r2, [pc, #40]	; (40439c <vPortValidateInterruptPriority+0x3c>)
  404372:	7812      	ldrb	r2, [r2, #0]
  404374:	429a      	cmp	r2, r3
  404376:	d902      	bls.n	40437e <vPortValidateInterruptPriority+0x1e>
  404378:	4b09      	ldr	r3, [pc, #36]	; (4043a0 <vPortValidateInterruptPriority+0x40>)
  40437a:	4798      	blx	r3
  40437c:	e7fe      	b.n	40437c <vPortValidateInterruptPriority+0x1c>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredicable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
  40437e:	4b09      	ldr	r3, [pc, #36]	; (4043a4 <vPortValidateInterruptPriority+0x44>)
  404380:	681b      	ldr	r3, [r3, #0]
  404382:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  404386:	4a08      	ldr	r2, [pc, #32]	; (4043a8 <vPortValidateInterruptPriority+0x48>)
  404388:	6812      	ldr	r2, [r2, #0]
  40438a:	4293      	cmp	r3, r2
  40438c:	d902      	bls.n	404394 <vPortValidateInterruptPriority+0x34>
  40438e:	4b04      	ldr	r3, [pc, #16]	; (4043a0 <vPortValidateInterruptPriority+0x40>)
  404390:	4798      	blx	r3
  404392:	e7fe      	b.n	404392 <vPortValidateInterruptPriority+0x32>
  404394:	bd08      	pop	{r3, pc}
  404396:	bf00      	nop
  404398:	e000e3f0 	.word	0xe000e3f0
  40439c:	20000db8 	.word	0x20000db8
  4043a0:	00404179 	.word	0x00404179
  4043a4:	e000ed0c 	.word	0xe000ed0c
  4043a8:	20000dbc 	.word	0x20000dbc

004043ac <prvInsertBlockIntoFreeList>:
	pxEnd->pxNextFreeBlock = NULL;

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
  4043ac:	4a13      	ldr	r2, [pc, #76]	; (4043fc <prvInsertBlockIntoFreeList+0x50>)
  4043ae:	e000      	b.n	4043b2 <prvInsertBlockIntoFreeList+0x6>
  4043b0:	461a      	mov	r2, r3
  4043b2:	6813      	ldr	r3, [r2, #0]
  4043b4:	4283      	cmp	r3, r0
  4043b6:	d3fb      	bcc.n	4043b0 <prvInsertBlockIntoFreeList+0x4>
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
	uxAddress -= xHeapStructSize;
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
	pxEnd = ( void * ) uxAddress;
	pxEnd->xBlockSize = 0;
  4043b8:	b430      	push	{r4, r5}
  4043ba:	4611      	mov	r1, r2
	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
  4043bc:	6854      	ldr	r4, [r2, #4]
  4043be:	1915      	adds	r5, r2, r4
  4043c0:	4285      	cmp	r5, r0
  4043c2:	d103      	bne.n	4043cc <prvInsertBlockIntoFreeList+0x20>
}
/*-----------------------------------------------------------*/
  4043c4:	6868      	ldr	r0, [r5, #4]
  4043c6:	4404      	add	r4, r0
  4043c8:	6054      	str	r4, [r2, #4]
  4043ca:	4610      	mov	r0, r2

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
	{
		/* Nothing to do here, just iterate to the right position. */
  4043cc:	6842      	ldr	r2, [r0, #4]
  4043ce:	1884      	adds	r4, r0, r2
  4043d0:	429c      	cmp	r4, r3
  4043d2:	d10c      	bne.n	4043ee <prvInsertBlockIntoFreeList+0x42>
	}

  4043d4:	4b0a      	ldr	r3, [pc, #40]	; (404400 <prvInsertBlockIntoFreeList+0x54>)
  4043d6:	681b      	ldr	r3, [r3, #0]
  4043d8:	429c      	cmp	r4, r3
  4043da:	d006      	beq.n	4043ea <prvInsertBlockIntoFreeList+0x3e>
	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
  4043dc:	6863      	ldr	r3, [r4, #4]
  4043de:	441a      	add	r2, r3
  4043e0:	6042      	str	r2, [r0, #4]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
  4043e2:	680b      	ldr	r3, [r1, #0]
  4043e4:	681b      	ldr	r3, [r3, #0]
  4043e6:	6003      	str	r3, [r0, #0]
  4043e8:	e002      	b.n	4043f0 <prvInsertBlockIntoFreeList+0x44>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
		pxBlockToInsert = pxIterator;
	}
  4043ea:	6004      	str	r4, [r0, #0]
  4043ec:	e000      	b.n	4043f0 <prvInsertBlockIntoFreeList+0x44>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

  4043ee:	6003      	str	r3, [r0, #0]
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
		{
  4043f0:	4281      	cmp	r1, r0
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
  4043f2:	bf18      	it	ne
  4043f4:	6008      	strne	r0, [r1, #0]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
		}
  4043f6:	bc30      	pop	{r4, r5}
  4043f8:	4770      	bx	lr
  4043fa:	bf00      	nop
  4043fc:	20000dc8 	.word	0x20000dc8
  404400:	20000dc4 	.word	0x20000dc4

00404404 <pvPortMalloc>:
space. */
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
  404404:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  404406:	4604      	mov	r4, r0
{
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;

  404408:	4b41      	ldr	r3, [pc, #260]	; (404510 <pvPortMalloc+0x10c>)
  40440a:	4798      	blx	r3
	vTaskSuspendAll();
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
  40440c:	4b41      	ldr	r3, [pc, #260]	; (404514 <pvPortMalloc+0x110>)
  40440e:	681b      	ldr	r3, [r3, #0]
  404410:	bb23      	cbnz	r3, 40445c <pvPortMalloc+0x58>
	return xFreeBytesRemaining;
}
/*-----------------------------------------------------------*/

size_t xPortGetMinimumEverFreeHeapSize( void )
{
  404412:	4a41      	ldr	r2, [pc, #260]	; (404518 <pvPortMalloc+0x114>)
	return xMinimumEverFreeBytesRemaining;
}
  404414:	f012 0f07 	tst.w	r2, #7
  404418:	d007      	beq.n	40442a <pvPortMalloc+0x26>
/*-----------------------------------------------------------*/

  40441a:	1dd1      	adds	r1, r2, #7
void vPortInitialiseBlocks( void )
  40441c:	f021 0107 	bic.w	r1, r1, #7
  404420:	f502 4320 	add.w	r3, r2, #40960	; 0xa000
{
  404424:	1a5b      	subs	r3, r3, r1
{
	return xMinimumEverFreeBytesRemaining;
}
/*-----------------------------------------------------------*/

void vPortInitialiseBlocks( void )
  404426:	460a      	mov	r2, r1
  404428:	e001      	b.n	40442e <pvPortMalloc+0x2a>

size_t xPortGetFreeHeapSize( void )
{
	return xFreeBytesRemaining;
}
/*-----------------------------------------------------------*/
  40442a:	f44f 4320 	mov.w	r3, #40960	; 0xa000
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
BlockLink_t *pxFirstFreeBlock;
  40442e:	483b      	ldr	r0, [pc, #236]	; (40451c <pvPortMalloc+0x118>)
  404430:	6002      	str	r2, [r0, #0]
uint8_t *pucAlignedHeap;
  404432:	2100      	movs	r1, #0
  404434:	6041      	str	r1, [r0, #4]
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;

	/* Ensure the heap starts on a correctly aligned boundary. */
  404436:	4413      	add	r3, r2
	uxAddress = ( size_t ) ucHeap;
  404438:	3b08      	subs	r3, #8

  40443a:	f023 0307 	bic.w	r3, r3, #7
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
  40443e:	4835      	ldr	r0, [pc, #212]	; (404514 <pvPortMalloc+0x110>)
  404440:	6003      	str	r3, [r0, #0]
	{
  404442:	6059      	str	r1, [r3, #4]
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
  404444:	6019      	str	r1, [r3, #0]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
  404446:	1a99      	subs	r1, r3, r2
  404448:	6051      	str	r1, [r2, #4]

  40444a:	6013      	str	r3, [r2, #0]
	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
  40444c:	4b34      	ldr	r3, [pc, #208]	; (404520 <pvPortMalloc+0x11c>)
  40444e:	6019      	str	r1, [r3, #0]
	xStart.xBlockSize = ( size_t ) 0;
  404450:	4b34      	ldr	r3, [pc, #208]	; (404524 <pvPortMalloc+0x120>)
  404452:	6019      	str	r1, [r3, #0]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
  404454:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
  404458:	4b33      	ldr	r3, [pc, #204]	; (404528 <pvPortMalloc+0x124>)
  40445a:	601a      	str	r2, [r3, #0]
		}

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
  40445c:	4b32      	ldr	r3, [pc, #200]	; (404528 <pvPortMalloc+0x124>)
  40445e:	681e      	ldr	r6, [r3, #0]
  404460:	4234      	tst	r4, r6
  404462:	d14c      	bne.n	4044fe <pvPortMalloc+0xfa>
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
  404464:	2c00      	cmp	r4, #0
  404466:	d04d      	beq.n	404504 <pvPortMalloc+0x100>
			if( xWantedSize > 0 )
			{
  404468:	f104 0308 	add.w	r3, r4, #8
				xWantedSize += xHeapStructSize;

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
  40446c:	f013 0f07 	tst.w	r3, #7
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
				{
					/* Byte alignment required. */
  404470:	bf1c      	itt	ne
  404472:	f023 0307 	bicne.w	r3, r3, #7
  404476:	3308      	addne	r3, #8
			}
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

  404478:	2b00      	cmp	r3, #0
  40447a:	d040      	beq.n	4044fe <pvPortMalloc+0xfa>
  40447c:	4a29      	ldr	r2, [pc, #164]	; (404524 <pvPortMalloc+0x120>)
  40447e:	6817      	ldr	r7, [r2, #0]
  404480:	42bb      	cmp	r3, r7
  404482:	d83c      	bhi.n	4044fe <pvPortMalloc+0xfa>
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
  404484:	4a25      	ldr	r2, [pc, #148]	; (40451c <pvPortMalloc+0x118>)
  404486:	6814      	ldr	r4, [r2, #0]
				pxBlock = xStart.pxNextFreeBlock;
  404488:	e001      	b.n	40448e <pvPortMalloc+0x8a>
  40448a:	4622      	mov	r2, r4
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
				{
					pxPreviousBlock = pxBlock;
  40448c:	460c      	mov	r4, r1
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
				pxBlock = xStart.pxNextFreeBlock;
  40448e:	6861      	ldr	r1, [r4, #4]
  404490:	428b      	cmp	r3, r1
  404492:	d902      	bls.n	40449a <pvPortMalloc+0x96>
  404494:	6821      	ldr	r1, [r4, #0]
  404496:	2900      	cmp	r1, #0
  404498:	d1f7      	bne.n	40448a <pvPortMalloc+0x86>
					pxPreviousBlock = pxBlock;
					pxBlock = pxBlock->pxNextFreeBlock;
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
  40449a:	491e      	ldr	r1, [pc, #120]	; (404514 <pvPortMalloc+0x110>)
  40449c:	6809      	ldr	r1, [r1, #0]
  40449e:	428c      	cmp	r4, r1
  4044a0:	d02d      	beq.n	4044fe <pvPortMalloc+0xfa>
				if( pxBlock != pxEnd )
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
  4044a2:	6815      	ldr	r5, [r2, #0]
  4044a4:	3508      	adds	r5, #8
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
  4044a6:	6821      	ldr	r1, [r4, #0]
  4044a8:	6011      	str	r1, [r2, #0]
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;

					/* If the block is larger than required it can be split into
					two. */
  4044aa:	6862      	ldr	r2, [r4, #4]
  4044ac:	1ad2      	subs	r2, r2, r3
  4044ae:	2a10      	cmp	r2, #16
  4044b0:	d90a      	bls.n	4044c8 <pvPortMalloc+0xc4>
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
  4044b2:	18e0      	adds	r0, r4, r3
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
  4044b4:	f010 0f07 	tst.w	r0, #7
  4044b8:	d002      	beq.n	4044c0 <pvPortMalloc+0xbc>
  4044ba:	4b1c      	ldr	r3, [pc, #112]	; (40452c <pvPortMalloc+0x128>)
  4044bc:	4798      	blx	r3
  4044be:	e7fe      	b.n	4044be <pvPortMalloc+0xba>
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );

						/* Calculate the sizes of two blocks split from the
						single block. */
  4044c0:	6042      	str	r2, [r0, #4]
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
  4044c2:	6063      	str	r3, [r4, #4]
						pxBlock->xBlockSize = xWantedSize;

						/* Insert the new block into the list of free blocks. */
  4044c4:	4b1a      	ldr	r3, [pc, #104]	; (404530 <pvPortMalloc+0x12c>)
  4044c6:	4798      	blx	r3
					}
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

  4044c8:	6862      	ldr	r2, [r4, #4]
  4044ca:	1abb      	subs	r3, r7, r2
  4044cc:	4915      	ldr	r1, [pc, #84]	; (404524 <pvPortMalloc+0x120>)
  4044ce:	600b      	str	r3, [r1, #0]
					xFreeBytesRemaining -= pxBlock->xBlockSize;

  4044d0:	4913      	ldr	r1, [pc, #76]	; (404520 <pvPortMalloc+0x11c>)
  4044d2:	6809      	ldr	r1, [r1, #0]
  4044d4:	428b      	cmp	r3, r1
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
					{
  4044d6:	bf3c      	itt	cc
  4044d8:	4911      	ldrcc	r1, [pc, #68]	; (404520 <pvPortMalloc+0x11c>)
  4044da:	600b      	strcc	r3, [r1, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
  4044dc:	4316      	orrs	r6, r2
  4044de:	6066      	str	r6, [r4, #4]
					pxBlock->xBlockSize |= xBlockAllocatedBit;
  4044e0:	2300      	movs	r3, #0
  4044e2:	6023      	str	r3, [r4, #0]
		{
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
  4044e4:	4b13      	ldr	r3, [pc, #76]	; (404534 <pvPortMalloc+0x130>)
  4044e6:	4798      	blx	r3
	( void ) xTaskResumeAll();

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
  4044e8:	b91d      	cbnz	r5, 4044f2 <pvPortMalloc+0xee>
		if( pvReturn == NULL )
		{
			extern void vApplicationMallocFailedHook( void );
  4044ea:	4b13      	ldr	r3, [pc, #76]	; (404538 <pvPortMalloc+0x134>)
  4044ec:	4798      	blx	r3
  4044ee:	2500      	movs	r5, #0
  4044f0:	e00b      	b.n	40450a <pvPortMalloc+0x106>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

  4044f2:	f015 0f07 	tst.w	r5, #7
  4044f6:	d008      	beq.n	40450a <pvPortMalloc+0x106>
  4044f8:	4b0c      	ldr	r3, [pc, #48]	; (40452c <pvPortMalloc+0x128>)
  4044fa:	4798      	blx	r3
  4044fc:	e7fe      	b.n	4044fc <pvPortMalloc+0xf8>
		{
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
  4044fe:	4b0d      	ldr	r3, [pc, #52]	; (404534 <pvPortMalloc+0x130>)
  404500:	4798      	blx	r3
  404502:	e7f2      	b.n	4044ea <pvPortMalloc+0xe6>
  404504:	4b0b      	ldr	r3, [pc, #44]	; (404534 <pvPortMalloc+0x130>)
  404506:	4798      	blx	r3
  404508:	e7ef      	b.n	4044ea <pvPortMalloc+0xe6>
		}
	}
	#endif

	configASSERT( ( ( ( uint32_t ) pvReturn ) & portBYTE_ALIGNMENT_MASK ) == 0 );
	return pvReturn;
  40450a:	4628      	mov	r0, r5
  40450c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40450e:	bf00      	nop
  404510:	00405219 	.word	0x00405219
  404514:	20000dc4 	.word	0x20000dc4
  404518:	20000dd0 	.word	0x20000dd0
  40451c:	20000dc8 	.word	0x20000dc8
  404520:	2000add4 	.word	0x2000add4
  404524:	20000dc0 	.word	0x20000dc0
  404528:	2000add0 	.word	0x2000add0
  40452c:	00404179 	.word	0x00404179
  404530:	004043ad 	.word	0x004043ad
  404534:	00405385 	.word	0x00405385
  404538:	00406ac1 	.word	0x00406ac1

0040453c <vPortFree>:

/*custom fcn for calloc - not included with FreeRTOS by default*/
void *pvPortCalloc(size_t count, size_t size)
{
	void *p;

  40453c:	b318      	cbz	r0, 404586 <vPortFree+0x4a>
	configASSERT( ( ( ( uint32_t ) pvReturn ) & portBYTE_ALIGNMENT_MASK ) == 0 );
	return pvReturn;
}
/*-----------------------------------------------------------*/

/*custom fcn for calloc - not included with FreeRTOS by default*/
  40453e:	b510      	push	{r4, lr}
  404540:	4604      	mov	r4, r0
		memset(p, 0, count * size);
	}
	return p;
}


  404542:	f850 3c04 	ldr.w	r3, [r0, #-4]
  404546:	4a10      	ldr	r2, [pc, #64]	; (404588 <vPortFree+0x4c>)
  404548:	6812      	ldr	r2, [r2, #0]
  40454a:	421a      	tst	r2, r3
  40454c:	d102      	bne.n	404554 <vPortFree+0x18>
  40454e:	4b0f      	ldr	r3, [pc, #60]	; (40458c <vPortFree+0x50>)
  404550:	4798      	blx	r3
  404552:	e7fe      	b.n	404552 <vPortFree+0x16>
/*-----------------------------------------------------------*/
  404554:	f850 1c08 	ldr.w	r1, [r0, #-8]
  404558:	b111      	cbz	r1, 404560 <vPortFree+0x24>
  40455a:	4b0c      	ldr	r3, [pc, #48]	; (40458c <vPortFree+0x50>)
  40455c:	4798      	blx	r3
  40455e:	e7fe      	b.n	40455e <vPortFree+0x22>
void vPortFree( void *pv )
{
uint8_t *puc = ( uint8_t * ) pv;
BlockLink_t *pxLink;

	if( pv != NULL )
  404560:	ea23 0302 	bic.w	r3, r3, r2
  404564:	f840 3c04 	str.w	r3, [r0, #-4]
	{
		/* The memory being freed will have an BlockLink_t structure immediately
  404568:	4b09      	ldr	r3, [pc, #36]	; (404590 <vPortFree+0x54>)
  40456a:	4798      	blx	r3
		before it. */
		puc -= xHeapStructSize;

  40456c:	4a09      	ldr	r2, [pc, #36]	; (404594 <vPortFree+0x58>)
  40456e:	6811      	ldr	r1, [r2, #0]
  404570:	f854 3c04 	ldr.w	r3, [r4, #-4]
  404574:	440b      	add	r3, r1
  404576:	6013      	str	r3, [r2, #0]
		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
  404578:	f1a4 0008 	sub.w	r0, r4, #8
  40457c:	4b06      	ldr	r3, [pc, #24]	; (404598 <vPortFree+0x5c>)
  40457e:	4798      	blx	r3

		/* Check the block is actually allocated. */
  404580:	4b06      	ldr	r3, [pc, #24]	; (40459c <vPortFree+0x60>)
  404582:	4798      	blx	r3
  404584:	bd10      	pop	{r4, pc}
  404586:	4770      	bx	lr
  404588:	2000add0 	.word	0x2000add0
  40458c:	00404179 	.word	0x00404179
  404590:	00405219 	.word	0x00405219
  404594:	20000dc0 	.word	0x20000dc0
  404598:	004043ad 	.word	0x004043ad
  40459c:	00405385 	.word	0x00405385

004045a0 <prvCopyDataToQueue>:
#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
BaseType_t xReturn = pdFALSE;
  4045a0:	b538      	push	{r3, r4, r5, lr}
  4045a2:	4604      	mov	r4, r0
  4045a4:	4615      	mov	r5, r2

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
	{
  4045a6:	6c02      	ldr	r2, [r0, #64]	; 0x40
  4045a8:	b94a      	cbnz	r2, 4045be <prvCopyDataToQueue+0x1e>
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
			{
  4045aa:	6803      	ldr	r3, [r0, #0]
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
BaseType_t xReturn = pdFALSE;

  4045ac:	2000      	movs	r0, #0
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
			{
  4045ae:	2b00      	cmp	r3, #0
  4045b0:	d130      	bne.n	404614 <prvCopyDataToQueue+0x74>
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
				pxQueue->pxMutexHolder = NULL;
  4045b2:	6860      	ldr	r0, [r4, #4]
  4045b4:	4b19      	ldr	r3, [pc, #100]	; (40461c <prvCopyDataToQueue+0x7c>)
  4045b6:	4798      	blx	r3
			}
  4045b8:	2300      	movs	r3, #0
  4045ba:	6063      	str	r3, [r4, #4]
  4045bc:	e02a      	b.n	404614 <prvCopyDataToQueue+0x74>
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
	{
  4045be:	b96d      	cbnz	r5, 4045dc <prvCopyDataToQueue+0x3c>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
  4045c0:	6880      	ldr	r0, [r0, #8]
  4045c2:	4b17      	ldr	r3, [pc, #92]	; (404620 <prvCopyDataToQueue+0x80>)
  4045c4:	4798      	blx	r3
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
  4045c6:	68a2      	ldr	r2, [r4, #8]
  4045c8:	6c23      	ldr	r3, [r4, #64]	; 0x40
  4045ca:	4413      	add	r3, r2
  4045cc:	60a3      	str	r3, [r4, #8]
		{
  4045ce:	6862      	ldr	r2, [r4, #4]
  4045d0:	4293      	cmp	r3, r2
  4045d2:	d31a      	bcc.n	40460a <prvCopyDataToQueue+0x6a>
			pxQueue->pcWriteTo = pxQueue->pcHead;
		}
  4045d4:	6823      	ldr	r3, [r4, #0]
  4045d6:	60a3      	str	r3, [r4, #8]
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
BaseType_t xReturn = pdFALSE;

  4045d8:	2000      	movs	r0, #0
  4045da:	e01b      	b.n	404614 <prvCopyDataToQueue+0x74>
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
  4045dc:	68c0      	ldr	r0, [r0, #12]
  4045de:	4b10      	ldr	r3, [pc, #64]	; (404620 <prvCopyDataToQueue+0x80>)
  4045e0:	4798      	blx	r3
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
  4045e2:	6c23      	ldr	r3, [r4, #64]	; 0x40
  4045e4:	425b      	negs	r3, r3
  4045e6:	68e2      	ldr	r2, [r4, #12]
  4045e8:	441a      	add	r2, r3
  4045ea:	60e2      	str	r2, [r4, #12]
		{
  4045ec:	6821      	ldr	r1, [r4, #0]
  4045ee:	428a      	cmp	r2, r1
  4045f0:	d202      	bcs.n	4045f8 <prvCopyDataToQueue+0x58>
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
		}
  4045f2:	6862      	ldr	r2, [r4, #4]
  4045f4:	4413      	add	r3, r2
  4045f6:	60e3      	str	r3, [r4, #12]
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
		{
  4045f8:	2d02      	cmp	r5, #2
  4045fa:	d108      	bne.n	40460e <prvCopyDataToQueue+0x6e>
			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
			{
  4045fc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  4045fe:	b143      	cbz	r3, 404612 <prvCopyDataToQueue+0x72>
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--( pxQueue->uxMessagesWaiting );
			}
  404600:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  404602:	3b01      	subs	r3, #1
  404604:	63a3      	str	r3, [r4, #56]	; 0x38
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
BaseType_t xReturn = pdFALSE;

  404606:	2000      	movs	r0, #0
  404608:	e004      	b.n	404614 <prvCopyDataToQueue+0x74>
  40460a:	2000      	movs	r0, #0
  40460c:	e002      	b.n	404614 <prvCopyDataToQueue+0x74>
  40460e:	2000      	movs	r0, #0
  404610:	e000      	b.n	404614 <prvCopyDataToQueue+0x74>
  404612:	2000      	movs	r0, #0
			mtCOVERAGE_TEST_MARKER();
		}
	}

	++( pxQueue->uxMessagesWaiting );

  404614:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  404616:	3301      	adds	r3, #1
  404618:	63a3      	str	r3, [r4, #56]	; 0x38
	return xReturn;
}
/*-----------------------------------------------------------*/
  40461a:	bd38      	pop	{r3, r4, r5, pc}
  40461c:	00405a09 	.word	0x00405a09
  404620:	00406b39 	.word	0x00406b39

00404624 <prvNotifyQueueSetContainer>:

#if ( configUSE_QUEUE_SETS == 1 )

	static BaseType_t prvNotifyQueueSetContainer( const Queue_t * const pxQueue, const BaseType_t xCopyPosition )
	{
	Queue_t *pxQueueSetContainer = pxQueue->pxQueueSetContainer;
  404624:	b530      	push	{r4, r5, lr}
  404626:	b083      	sub	sp, #12
  404628:	9001      	str	r0, [sp, #4]
	BaseType_t xReturn = pdFALSE;
  40462a:	6d44      	ldr	r4, [r0, #84]	; 0x54

		/* This function must be called form a critical section. */

		configASSERT( pxQueueSetContainer );
		configASSERT( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength );
  40462c:	b914      	cbnz	r4, 404634 <prvNotifyQueueSetContainer+0x10>
  40462e:	4b14      	ldr	r3, [pc, #80]	; (404680 <prvNotifyQueueSetContainer+0x5c>)
  404630:	4798      	blx	r3
  404632:	e7fe      	b.n	404632 <prvNotifyQueueSetContainer+0xe>
  404634:	460a      	mov	r2, r1

  404636:	6ba1      	ldr	r1, [r4, #56]	; 0x38
  404638:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  40463a:	4299      	cmp	r1, r3
  40463c:	d302      	bcc.n	404644 <prvNotifyQueueSetContainer+0x20>
  40463e:	4b10      	ldr	r3, [pc, #64]	; (404680 <prvNotifyQueueSetContainer+0x5c>)
  404640:	4798      	blx	r3
  404642:	e7fe      	b.n	404642 <prvNotifyQueueSetContainer+0x1e>
		if( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength )
		{
  404644:	6ba1      	ldr	r1, [r4, #56]	; 0x38
  404646:	428b      	cmp	r3, r1
  404648:	d916      	bls.n	404678 <prvNotifyQueueSetContainer+0x54>
			traceQUEUE_SEND( pxQueueSetContainer );

			/* The data copied is the handle of the queue that contains data. */
			xReturn = prvCopyDataToQueue( pxQueueSetContainer, &pxQueue, xCopyPosition );

  40464a:	4620      	mov	r0, r4
  40464c:	a901      	add	r1, sp, #4
  40464e:	4b0d      	ldr	r3, [pc, #52]	; (404684 <prvNotifyQueueSetContainer+0x60>)
  404650:	4798      	blx	r3
  404652:	4605      	mov	r5, r0
			if( pxQueueSetContainer->xTxLock == queueUNLOCKED )
			{
  404654:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  404656:	f1b3 3fff 	cmp.w	r3, #4294967295
  40465a:	d109      	bne.n	404670 <prvNotifyQueueSetContainer+0x4c>
				if( listLIST_IS_EMPTY( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) == pdFALSE )
				{
  40465c:	6a63      	ldr	r3, [r4, #36]	; 0x24
  40465e:	b163      	cbz	r3, 40467a <prvNotifyQueueSetContainer+0x56>
					if( xTaskRemoveFromEventList( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) != pdFALSE )
					{
  404660:	f104 0024 	add.w	r0, r4, #36	; 0x24
  404664:	4b08      	ldr	r3, [pc, #32]	; (404688 <prvNotifyQueueSetContainer+0x64>)
  404666:	4798      	blx	r3
  404668:	2800      	cmp	r0, #0
						/* The task waiting has a higher priority. */
						xReturn = pdTRUE;
					}
  40466a:	bf18      	it	ne
  40466c:	2501      	movne	r5, #1
  40466e:	e004      	b.n	40467a <prvNotifyQueueSetContainer+0x56>
				}
			}
			else
			{
				( pxQueueSetContainer->xTxLock )++;
			}
  404670:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  404672:	3301      	adds	r3, #1
  404674:	64a3      	str	r3, [r4, #72]	; 0x48
  404676:	e000      	b.n	40467a <prvNotifyQueueSetContainer+0x56>

	static BaseType_t prvNotifyQueueSetContainer( const Queue_t * const pxQueue, const BaseType_t xCopyPosition )
	{
	Queue_t *pxQueueSetContainer = pxQueue->pxQueueSetContainer;
	BaseType_t xReturn = pdFALSE;

  404678:	2500      	movs	r5, #0
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
	}

  40467a:	4628      	mov	r0, r5
  40467c:	b003      	add	sp, #12
  40467e:	bd30      	pop	{r4, r5, pc}
  404680:	00404179 	.word	0x00404179
  404684:	004045a1 	.word	0x004045a1
  404688:	00405811 	.word	0x00405811

0040468c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
	{
  40468c:	6c02      	ldr	r2, [r0, #64]	; 0x40
  40468e:	b172      	cbz	r2, 4046ae <prvCopyDataFromQueue+0x22>
}
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
  404690:	b510      	push	{r4, lr}
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
  404692:	68c3      	ldr	r3, [r0, #12]
  404694:	4413      	add	r3, r2
  404696:	60c3      	str	r3, [r0, #12]
		{
  404698:	6844      	ldr	r4, [r0, #4]
  40469a:	42a3      	cmp	r3, r4
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
		}
  40469c:	bf24      	itt	cs
  40469e:	6803      	ldrcs	r3, [r0, #0]
  4046a0:	60c3      	strcs	r3, [r0, #12]
  4046a2:	4603      	mov	r3, r0
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
	}
  4046a4:	4608      	mov	r0, r1
  4046a6:	68d9      	ldr	r1, [r3, #12]
  4046a8:	4b01      	ldr	r3, [pc, #4]	; (4046b0 <prvCopyDataFromQueue+0x24>)
  4046aa:	4798      	blx	r3
  4046ac:	bd10      	pop	{r4, pc}
  4046ae:	4770      	bx	lr
  4046b0:	00406b39 	.word	0x00406b39

004046b4 <prvUnlockQueue>:
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED. */
  4046b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4046b6:	4604      	mov	r4, r0
	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
	{
  4046b8:	4b20      	ldr	r3, [pc, #128]	; (40473c <prvUnlockQueue+0x88>)
  4046ba:	4798      	blx	r3
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
		{
  4046bc:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  4046be:	2b00      	cmp	r3, #0
  4046c0:	dd18      	ble.n	4046f4 <prvUnlockQueue+0x40>
			#if ( configUSE_QUEUE_SETS == 1 )
			{
				if( pxQueue->pxQueueSetContainer != NULL )
				{
					if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) == pdTRUE )
					{
  4046c2:	4d1f      	ldr	r5, [pc, #124]	; (404740 <prvUnlockQueue+0x8c>)
						/* The queue is a member of a queue set, and posting to
						the queue set caused a higher priority task to unblock.
						A context switch is required. */
						vTaskMissedYield();
					}
  4046c4:	4f1f      	ldr	r7, [pc, #124]	; (404744 <prvUnlockQueue+0x90>)
					/* Tasks that are removed from the event list will get added to
					the pending ready list as the scheduler is still suspended. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
						{
  4046c6:	4e20      	ldr	r6, [pc, #128]	; (404748 <prvUnlockQueue+0x94>)
			/* Data was posted while the queue was locked.  Are any tasks
			blocked waiting for data to become available? */
			#if ( configUSE_QUEUE_SETS == 1 )
			{
				if( pxQueue->pxQueueSetContainer != NULL )
				{
  4046c8:	6d63      	ldr	r3, [r4, #84]	; 0x54
  4046ca:	b133      	cbz	r3, 4046da <prvUnlockQueue+0x26>
					if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) == pdTRUE )
					{
  4046cc:	4620      	mov	r0, r4
  4046ce:	2100      	movs	r1, #0
  4046d0:	47a8      	blx	r5
  4046d2:	2801      	cmp	r0, #1
  4046d4:	d108      	bne.n	4046e8 <prvUnlockQueue+0x34>
						/* The queue is a member of a queue set, and posting to
						the queue set caused a higher priority task to unblock.
						A context switch is required. */
						vTaskMissedYield();
					}
  4046d6:	47b8      	blx	r7
  4046d8:	e006      	b.n	4046e8 <prvUnlockQueue+0x34>
				else
				{
					/* Tasks that are removed from the event list will get added to
					the pending ready list as the scheduler is still suspended. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
					{
  4046da:	6a63      	ldr	r3, [r4, #36]	; 0x24
  4046dc:	b153      	cbz	r3, 4046f4 <prvUnlockQueue+0x40>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
						{
  4046de:	f104 0024 	add.w	r0, r4, #36	; 0x24
  4046e2:	47b0      	blx	r6
  4046e4:	b100      	cbz	r0, 4046e8 <prvUnlockQueue+0x34>
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							vTaskMissedYield();
						}
  4046e6:	47b8      	blx	r7
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--( pxQueue->xTxLock );
		}
  4046e8:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  4046ea:	3b01      	subs	r3, #1
  4046ec:	64a3      	str	r3, [r4, #72]	; 0x48
	updated. */
	taskENTER_CRITICAL();
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
		{
  4046ee:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  4046f0:	2b00      	cmp	r3, #0
  4046f2:	dce9      	bgt.n	4046c8 <prvUnlockQueue+0x14>

			--( pxQueue->xTxLock );
		}

		pxQueue->xTxLock = queueUNLOCKED;
	}
  4046f4:	f04f 33ff 	mov.w	r3, #4294967295
  4046f8:	64a3      	str	r3, [r4, #72]	; 0x48
	taskEXIT_CRITICAL();

  4046fa:	4b14      	ldr	r3, [pc, #80]	; (40474c <prvUnlockQueue+0x98>)
  4046fc:	4798      	blx	r3
	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
	{
  4046fe:	4b0f      	ldr	r3, [pc, #60]	; (40473c <prvUnlockQueue+0x88>)
  404700:	4798      	blx	r3
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
		{
  404702:	6c63      	ldr	r3, [r4, #68]	; 0x44
  404704:	2b00      	cmp	r3, #0
  404706:	dd13      	ble.n	404730 <prvUnlockQueue+0x7c>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
			{
  404708:	6923      	ldr	r3, [r4, #16]
  40470a:	b91b      	cbnz	r3, 404714 <prvUnlockQueue+0x60>
  40470c:	e010      	b.n	404730 <prvUnlockQueue+0x7c>
  40470e:	6923      	ldr	r3, [r4, #16]
  404710:	b923      	cbnz	r3, 40471c <prvUnlockQueue+0x68>
  404712:	e00d      	b.n	404730 <prvUnlockQueue+0x7c>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
				{
  404714:	f104 0610 	add.w	r6, r4, #16
  404718:	4d0b      	ldr	r5, [pc, #44]	; (404748 <prvUnlockQueue+0x94>)
					vTaskMissedYield();
				}
  40471a:	4f0a      	ldr	r7, [pc, #40]	; (404744 <prvUnlockQueue+0x90>)
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
				{
  40471c:	4630      	mov	r0, r6
  40471e:	47a8      	blx	r5
  404720:	b100      	cbz	r0, 404724 <prvUnlockQueue+0x70>
					vTaskMissedYield();
				}
  404722:	47b8      	blx	r7
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--( pxQueue->xRxLock );
			}
  404724:	6c63      	ldr	r3, [r4, #68]	; 0x44
  404726:	3b01      	subs	r3, #1
  404728:	6463      	str	r3, [r4, #68]	; 0x44

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
		{
  40472a:	6c63      	ldr	r3, [r4, #68]	; 0x44
  40472c:	2b00      	cmp	r3, #0
  40472e:	dcee      	bgt.n	40470e <prvUnlockQueue+0x5a>
				break;
			}
		}

		pxQueue->xRxLock = queueUNLOCKED;
	}
  404730:	f04f 33ff 	mov.w	r3, #4294967295
  404734:	6463      	str	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();
}
  404736:	4b05      	ldr	r3, [pc, #20]	; (40474c <prvUnlockQueue+0x98>)
  404738:	4798      	blx	r3
  40473a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40473c:	004041a9 	.word	0x004041a9
  404740:	00404625 	.word	0x00404625
  404744:	00405935 	.word	0x00405935
  404748:	00405811 	.word	0x00405811
  40474c:	004041e9 	.word	0x004041e9

00404750 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
  404750:	b538      	push	{r3, r4, r5, lr}
Queue_t * const pxQueue = ( Queue_t * ) xQueue;

	configASSERT( pxQueue );
  404752:	b910      	cbnz	r0, 40475a <xQueueGenericReset+0xa>
  404754:	4b17      	ldr	r3, [pc, #92]	; (4047b4 <xQueueGenericReset+0x64>)
  404756:	4798      	blx	r3
  404758:	e7fe      	b.n	404758 <xQueueGenericReset+0x8>
  40475a:	460d      	mov	r5, r1
  40475c:	4604      	mov	r4, r0

	taskENTER_CRITICAL();
  40475e:	4b16      	ldr	r3, [pc, #88]	; (4047b8 <xQueueGenericReset+0x68>)
  404760:	4798      	blx	r3
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
  404762:	6822      	ldr	r2, [r4, #0]
  404764:	6c21      	ldr	r1, [r4, #64]	; 0x40
  404766:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  404768:	fb03 f301 	mul.w	r3, r3, r1
  40476c:	18d0      	adds	r0, r2, r3
  40476e:	6060      	str	r0, [r4, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
  404770:	2000      	movs	r0, #0
  404772:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
  404774:	60a2      	str	r2, [r4, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
  404776:	1a5b      	subs	r3, r3, r1
  404778:	4413      	add	r3, r2
  40477a:	60e3      	str	r3, [r4, #12]
		pxQueue->xRxLock = queueUNLOCKED;
  40477c:	f04f 33ff 	mov.w	r3, #4294967295
  404780:	6463      	str	r3, [r4, #68]	; 0x44
		pxQueue->xTxLock = queueUNLOCKED;
  404782:	64a3      	str	r3, [r4, #72]	; 0x48

		if( xNewQueue == pdFALSE )
  404784:	b955      	cbnz	r5, 40479c <xQueueGenericReset+0x4c>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
  404786:	6923      	ldr	r3, [r4, #16]
  404788:	b17b      	cbz	r3, 4047aa <xQueueGenericReset+0x5a>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
  40478a:	f104 0010 	add.w	r0, r4, #16
  40478e:	4b0b      	ldr	r3, [pc, #44]	; (4047bc <xQueueGenericReset+0x6c>)
  404790:	4798      	blx	r3
  404792:	2801      	cmp	r0, #1
  404794:	d109      	bne.n	4047aa <xQueueGenericReset+0x5a>
				{
					queueYIELD_IF_USING_PREEMPTION();
  404796:	4b0a      	ldr	r3, [pc, #40]	; (4047c0 <xQueueGenericReset+0x70>)
  404798:	4798      	blx	r3
  40479a:	e006      	b.n	4047aa <xQueueGenericReset+0x5a>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
  40479c:	f104 0010 	add.w	r0, r4, #16
  4047a0:	4d08      	ldr	r5, [pc, #32]	; (4047c4 <xQueueGenericReset+0x74>)
  4047a2:	47a8      	blx	r5
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
  4047a4:	f104 0024 	add.w	r0, r4, #36	; 0x24
  4047a8:	47a8      	blx	r5
		}
	}
	taskEXIT_CRITICAL();
  4047aa:	4b07      	ldr	r3, [pc, #28]	; (4047c8 <xQueueGenericReset+0x78>)
  4047ac:	4798      	blx	r3

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
}
  4047ae:	2001      	movs	r0, #1
  4047b0:	bd38      	pop	{r3, r4, r5, pc}
  4047b2:	bf00      	nop
  4047b4:	00404179 	.word	0x00404179
  4047b8:	004041a9 	.word	0x004041a9
  4047bc:	00405811 	.word	0x00405811
  4047c0:	00404161 	.word	0x00404161
  4047c4:	0040406d 	.word	0x0040406d
  4047c8:	004041e9 	.word	0x004041e9

004047cc <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
{
  4047cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
  4047ce:	b910      	cbnz	r0, 4047d6 <xQueueGenericCreate+0xa>
  4047d0:	4b15      	ldr	r3, [pc, #84]	; (404828 <xQueueGenericCreate+0x5c>)
  4047d2:	4798      	blx	r3
  4047d4:	e7fe      	b.n	4047d4 <xQueueGenericCreate+0x8>
  4047d6:	460d      	mov	r5, r1
  4047d8:	4617      	mov	r7, r2
  4047da:	4606      	mov	r6, r0

	if( uxItemSize == ( UBaseType_t ) 0 )
  4047dc:	b181      	cbz	r1, 404800 <xQueueGenericCreate+0x34>
	}
	else
	{
		/* The queue is one byte longer than asked for to make wrap checking
		easier/faster. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ) + ( size_t ) 1; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  4047de:	fb01 f000 	mul.w	r0, r1, r0
	}

	/* Allocate the new queue structure and storage area. */
	pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
  4047e2:	3059      	adds	r0, #89	; 0x59
  4047e4:	4b11      	ldr	r3, [pc, #68]	; (40482c <xQueueGenericCreate+0x60>)
  4047e6:	4798      	blx	r3

	if( pxNewQueue != NULL )
  4047e8:	4604      	mov	r4, r0
  4047ea:	b910      	cbnz	r0, 4047f2 <xQueueGenericCreate+0x26>
  4047ec:	e005      	b.n	4047fa <xQueueGenericCreate+0x2e>
		{
			/* No RAM was allocated for the queue storage area, but PC head
			cannot be set to NULL because NULL is used as a key to say the queue
			is used as a mutex.  Therefore just set pcHead to point to the queue
			as a benign value that is known to be within the memory map. */
			pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
  4047ee:	6024      	str	r4, [r4, #0]
  4047f0:	e00d      	b.n	40480e <xQueueGenericCreate+0x42>
		}
		else
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pxNewQueue->pcHead = ( ( int8_t * ) pxNewQueue ) + sizeof( Queue_t );
  4047f2:	f100 0358 	add.w	r3, r0, #88	; 0x58
  4047f6:	6003      	str	r3, [r0, #0]
  4047f8:	e009      	b.n	40480e <xQueueGenericCreate+0x42>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
  4047fa:	4b0b      	ldr	r3, [pc, #44]	; (404828 <xQueueGenericCreate+0x5c>)
  4047fc:	4798      	blx	r3
  4047fe:	e7fe      	b.n	4047fe <xQueueGenericCreate+0x32>
		easier/faster. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ) + ( size_t ) 1; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
	}

	/* Allocate the new queue structure and storage area. */
	pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
  404800:	2058      	movs	r0, #88	; 0x58
  404802:	4b0a      	ldr	r3, [pc, #40]	; (40482c <xQueueGenericCreate+0x60>)
  404804:	4798      	blx	r3

	if( pxNewQueue != NULL )
  404806:	4604      	mov	r4, r0
  404808:	2800      	cmp	r0, #0
  40480a:	d1f0      	bne.n	4047ee <xQueueGenericCreate+0x22>
  40480c:	e7f5      	b.n	4047fa <xQueueGenericCreate+0x2e>
			pxNewQueue->pcHead = ( ( int8_t * ) pxNewQueue ) + sizeof( Queue_t );
		}

		/* Initialise the queue members as described above where the queue type
		is defined. */
		pxNewQueue->uxLength = uxQueueLength;
  40480e:	63e6      	str	r6, [r4, #60]	; 0x3c
		pxNewQueue->uxItemSize = uxItemSize;
  404810:	6425      	str	r5, [r4, #64]	; 0x40
		( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
  404812:	4620      	mov	r0, r4
  404814:	2101      	movs	r1, #1
  404816:	4b06      	ldr	r3, [pc, #24]	; (404830 <xQueueGenericCreate+0x64>)
  404818:	4798      	blx	r3

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			pxNewQueue->ucQueueType = ucQueueType;
  40481a:	f884 7050 	strb.w	r7, [r4, #80]	; 0x50
		}
		#endif /* configUSE_TRACE_FACILITY */

		#if( configUSE_QUEUE_SETS == 1 )
		{
			pxNewQueue->pxQueueSetContainer = NULL;
  40481e:	2300      	movs	r3, #0
  404820:	6563      	str	r3, [r4, #84]	; 0x54
	}

	configASSERT( xReturn );

	return xReturn;
}
  404822:	4620      	mov	r0, r4
  404824:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  404826:	bf00      	nop
  404828:	00404179 	.word	0x00404179
  40482c:	00404405 	.word	0x00404405
  404830:	00404751 	.word	0x00404751

00404834 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if ( configUSE_COUNTING_SEMAPHORES == 1 )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
  404834:	b510      	push	{r4, lr}
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
  404836:	b910      	cbnz	r0, 40483e <xQueueCreateCountingSemaphore+0xa>
  404838:	4b0a      	ldr	r3, [pc, #40]	; (404864 <xQueueCreateCountingSemaphore+0x30>)
  40483a:	4798      	blx	r3
  40483c:	e7fe      	b.n	40483c <xQueueCreateCountingSemaphore+0x8>
  40483e:	460c      	mov	r4, r1
		configASSERT( uxInitialCount <= uxMaxCount );
  404840:	4288      	cmp	r0, r1
  404842:	d202      	bcs.n	40484a <xQueueCreateCountingSemaphore+0x16>
  404844:	4b07      	ldr	r3, [pc, #28]	; (404864 <xQueueCreateCountingSemaphore+0x30>)
  404846:	4798      	blx	r3
  404848:	e7fe      	b.n	404848 <xQueueCreateCountingSemaphore+0x14>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
  40484a:	2100      	movs	r1, #0
  40484c:	2202      	movs	r2, #2
  40484e:	4b06      	ldr	r3, [pc, #24]	; (404868 <xQueueCreateCountingSemaphore+0x34>)
  404850:	4798      	blx	r3

		if( xHandle != NULL )
  404852:	b108      	cbz	r0, 404858 <xQueueCreateCountingSemaphore+0x24>
  404854:	e003      	b.n	40485e <xQueueCreateCountingSemaphore+0x2a>
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		configASSERT( xHandle );
  404856:	e7fe      	b.n	404856 <xQueueCreateCountingSemaphore+0x22>
  404858:	4b02      	ldr	r3, [pc, #8]	; (404864 <xQueueCreateCountingSemaphore+0x30>)
  40485a:	4798      	blx	r3
  40485c:	e7fb      	b.n	404856 <xQueueCreateCountingSemaphore+0x22>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );

		if( xHandle != NULL )
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
  40485e:	6384      	str	r4, [r0, #56]	; 0x38
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		configASSERT( xHandle );
		return xHandle;
	}
  404860:	bd10      	pop	{r4, pc}
  404862:	bf00      	nop
  404864:	00404179 	.word	0x00404179
  404868:	004047cd 	.word	0x004047cd

0040486c <xQueueGenericSend>:

#endif /* configUSE_COUNTING_SEMAPHORES */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
  40486c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  404870:	b085      	sub	sp, #20
  404872:	9100      	str	r1, [sp, #0]
  404874:	9201      	str	r2, [sp, #4]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;

	configASSERT( pxQueue );
  404876:	b910      	cbnz	r0, 40487e <xQueueGenericSend+0x12>
  404878:	4b4b      	ldr	r3, [pc, #300]	; (4049a8 <xQueueGenericSend+0x13c>)
  40487a:	4798      	blx	r3
  40487c:	e7fe      	b.n	40487c <xQueueGenericSend+0x10>
  40487e:	461d      	mov	r5, r3
  404880:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
  404882:	9b00      	ldr	r3, [sp, #0]
  404884:	b923      	cbnz	r3, 404890 <xQueueGenericSend+0x24>
  404886:	6c03      	ldr	r3, [r0, #64]	; 0x40
  404888:	b113      	cbz	r3, 404890 <xQueueGenericSend+0x24>
  40488a:	4b47      	ldr	r3, [pc, #284]	; (4049a8 <xQueueGenericSend+0x13c>)
  40488c:	4798      	blx	r3
  40488e:	e7fe      	b.n	40488e <xQueueGenericSend+0x22>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
  404890:	2d02      	cmp	r5, #2
  404892:	d105      	bne.n	4048a0 <xQueueGenericSend+0x34>
  404894:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  404896:	2b01      	cmp	r3, #1
  404898:	d002      	beq.n	4048a0 <xQueueGenericSend+0x34>
  40489a:	4b43      	ldr	r3, [pc, #268]	; (4049a8 <xQueueGenericSend+0x13c>)
  40489c:	4798      	blx	r3
  40489e:	e7fe      	b.n	40489e <xQueueGenericSend+0x32>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
  4048a0:	4b42      	ldr	r3, [pc, #264]	; (4049ac <xQueueGenericSend+0x140>)
  4048a2:	4798      	blx	r3
  4048a4:	b920      	cbnz	r0, 4048b0 <xQueueGenericSend+0x44>
  4048a6:	9b01      	ldr	r3, [sp, #4]
  4048a8:	b12b      	cbz	r3, 4048b6 <xQueueGenericSend+0x4a>
  4048aa:	4b3f      	ldr	r3, [pc, #252]	; (4049a8 <xQueueGenericSend+0x13c>)
  4048ac:	4798      	blx	r3
  4048ae:	e7fe      	b.n	4048ae <xQueueGenericSend+0x42>
  4048b0:	f04f 0800 	mov.w	r8, #0
  4048b4:	e001      	b.n	4048ba <xQueueGenericSend+0x4e>
  4048b6:	f04f 0800 	mov.w	r8, #0
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
  4048ba:	4f3d      	ldr	r7, [pc, #244]	; (4049b0 <xQueueGenericSend+0x144>)
				}
				else if( xEntryTimeSet == pdFALSE )
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
  4048bc:	f8df 911c 	ldr.w	r9, [pc, #284]	; 4049dc <xQueueGenericSend+0x170>
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
  4048c0:	4e3c      	ldr	r6, [pc, #240]	; (4049b4 <xQueueGenericSend+0x148>)
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
  4048c2:	47b8      	blx	r7
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
  4048c4:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  4048c6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  4048c8:	429a      	cmp	r2, r3
  4048ca:	d301      	bcc.n	4048d0 <xQueueGenericSend+0x64>
  4048cc:	2d02      	cmp	r5, #2
  4048ce:	d121      	bne.n	404914 <xQueueGenericSend+0xa8>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
  4048d0:	4620      	mov	r0, r4
  4048d2:	9900      	ldr	r1, [sp, #0]
  4048d4:	462a      	mov	r2, r5
  4048d6:	4b38      	ldr	r3, [pc, #224]	; (4049b8 <xQueueGenericSend+0x14c>)
  4048d8:	4798      	blx	r3

				#if ( configUSE_QUEUE_SETS == 1 )
				{
					if( pxQueue->pxQueueSetContainer != NULL )
  4048da:	6d63      	ldr	r3, [r4, #84]	; 0x54
  4048dc:	b143      	cbz	r3, 4048f0 <xQueueGenericSend+0x84>
					{
						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) == pdTRUE )
  4048de:	4620      	mov	r0, r4
  4048e0:	4629      	mov	r1, r5
  4048e2:	4b36      	ldr	r3, [pc, #216]	; (4049bc <xQueueGenericSend+0x150>)
  4048e4:	4798      	blx	r3
  4048e6:	2801      	cmp	r0, #1
  4048e8:	d110      	bne.n	40490c <xQueueGenericSend+0xa0>
						{
							/* The queue is a member of a queue set, and posting
							to the queue set caused a higher priority task to
							unblock. A context switch is required. */
							queueYIELD_IF_USING_PREEMPTION();
  4048ea:	4b35      	ldr	r3, [pc, #212]	; (4049c0 <xQueueGenericSend+0x154>)
  4048ec:	4798      	blx	r3
  4048ee:	e00d      	b.n	40490c <xQueueGenericSend+0xa0>
					}
					else
					{
						/* If there was a task waiting for data to arrive on the
						queue then unblock it now. */
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  4048f0:	6a63      	ldr	r3, [r4, #36]	; 0x24
  4048f2:	b143      	cbz	r3, 404906 <xQueueGenericSend+0x9a>
						{
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) == pdTRUE )
  4048f4:	f104 0024 	add.w	r0, r4, #36	; 0x24
  4048f8:	4b32      	ldr	r3, [pc, #200]	; (4049c4 <xQueueGenericSend+0x158>)
  4048fa:	4798      	blx	r3
  4048fc:	2801      	cmp	r0, #1
  4048fe:	d105      	bne.n	40490c <xQueueGenericSend+0xa0>
							{
								/* The unblocked task has a priority higher than
								our own so yield immediately.  Yes it is ok to
								do this from within the critical section - the
								kernel takes care of that. */
								queueYIELD_IF_USING_PREEMPTION();
  404900:	4b2f      	ldr	r3, [pc, #188]	; (4049c0 <xQueueGenericSend+0x154>)
  404902:	4798      	blx	r3
  404904:	e002      	b.n	40490c <xQueueGenericSend+0xa0>
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
						}
						else if( xYieldRequired != pdFALSE )
  404906:	b108      	cbz	r0, 40490c <xQueueGenericSend+0xa0>
						{
							/* This path is a special case that will only get
							executed if the task was holding multiple mutexes
							and the mutexes were given back in an order that is
							different to that in which they were taken. */
							queueYIELD_IF_USING_PREEMPTION();
  404908:	4b2d      	ldr	r3, [pc, #180]	; (4049c0 <xQueueGenericSend+0x154>)
  40490a:	4798      	blx	r3
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
  40490c:	4b29      	ldr	r3, [pc, #164]	; (4049b4 <xQueueGenericSend+0x148>)
  40490e:	4798      	blx	r3
				return pdPASS;
  404910:	2001      	movs	r0, #1
  404912:	e045      	b.n	4049a0 <xQueueGenericSend+0x134>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
  404914:	9b01      	ldr	r3, [sp, #4]
  404916:	b91b      	cbnz	r3, 404920 <xQueueGenericSend+0xb4>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
  404918:	4b26      	ldr	r3, [pc, #152]	; (4049b4 <xQueueGenericSend+0x148>)
  40491a:	4798      	blx	r3

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
  40491c:	2000      	movs	r0, #0
  40491e:	e03f      	b.n	4049a0 <xQueueGenericSend+0x134>
				}
				else if( xEntryTimeSet == pdFALSE )
  404920:	f1b8 0f00 	cmp.w	r8, #0
  404924:	d103      	bne.n	40492e <xQueueGenericSend+0xc2>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
  404926:	a802      	add	r0, sp, #8
  404928:	47c8      	blx	r9
					xEntryTimeSet = pdTRUE;
  40492a:	f04f 0801 	mov.w	r8, #1
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
  40492e:	47b0      	blx	r6

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
  404930:	4b25      	ldr	r3, [pc, #148]	; (4049c8 <xQueueGenericSend+0x15c>)
  404932:	4798      	blx	r3
		prvLockQueue( pxQueue );
  404934:	47b8      	blx	r7
  404936:	6c63      	ldr	r3, [r4, #68]	; 0x44
  404938:	f1b3 3fff 	cmp.w	r3, #4294967295
  40493c:	bf04      	itt	eq
  40493e:	2300      	moveq	r3, #0
  404940:	6463      	streq	r3, [r4, #68]	; 0x44
  404942:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  404944:	f1b3 3fff 	cmp.w	r3, #4294967295
  404948:	bf04      	itt	eq
  40494a:	2300      	moveq	r3, #0
  40494c:	64a3      	streq	r3, [r4, #72]	; 0x48
  40494e:	47b0      	blx	r6

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
  404950:	a802      	add	r0, sp, #8
  404952:	a901      	add	r1, sp, #4
  404954:	4b1d      	ldr	r3, [pc, #116]	; (4049cc <xQueueGenericSend+0x160>)
  404956:	4798      	blx	r3
  404958:	b9e0      	cbnz	r0, 404994 <xQueueGenericSend+0x128>
static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
	{
  40495a:	47b8      	blx	r7
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
		{
  40495c:	f8d4 b038 	ldr.w	fp, [r4, #56]	; 0x38
  404960:	f8d4 a03c 	ldr.w	sl, [r4, #60]	; 0x3c
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();

  404964:	47b0      	blx	r6
		prvLockQueue( pxQueue );

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
  404966:	45d3      	cmp	fp, sl
  404968:	d10e      	bne.n	404988 <xQueueGenericSend+0x11c>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
  40496a:	f104 0010 	add.w	r0, r4, #16
  40496e:	9901      	ldr	r1, [sp, #4]
  404970:	4b17      	ldr	r3, [pc, #92]	; (4049d0 <xQueueGenericSend+0x164>)
  404972:	4798      	blx	r3
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible	that interrupts occurring now
				remove this task from the event	list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
  404974:	4620      	mov	r0, r4
  404976:	4b17      	ldr	r3, [pc, #92]	; (4049d4 <xQueueGenericSend+0x168>)
  404978:	4798      	blx	r3
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
  40497a:	4b17      	ldr	r3, [pc, #92]	; (4049d8 <xQueueGenericSend+0x16c>)
  40497c:	4798      	blx	r3
  40497e:	2800      	cmp	r0, #0
  404980:	d19f      	bne.n	4048c2 <xQueueGenericSend+0x56>
				{
					portYIELD_WITHIN_API();
  404982:	4b0f      	ldr	r3, [pc, #60]	; (4049c0 <xQueueGenericSend+0x154>)
  404984:	4798      	blx	r3
  404986:	e79c      	b.n	4048c2 <xQueueGenericSend+0x56>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
  404988:	4620      	mov	r0, r4
  40498a:	4b12      	ldr	r3, [pc, #72]	; (4049d4 <xQueueGenericSend+0x168>)
  40498c:	4798      	blx	r3
				( void ) xTaskResumeAll();
  40498e:	4b12      	ldr	r3, [pc, #72]	; (4049d8 <xQueueGenericSend+0x16c>)
  404990:	4798      	blx	r3
  404992:	e796      	b.n	4048c2 <xQueueGenericSend+0x56>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
  404994:	4620      	mov	r0, r4
  404996:	4b0f      	ldr	r3, [pc, #60]	; (4049d4 <xQueueGenericSend+0x168>)
  404998:	4798      	blx	r3
			( void ) xTaskResumeAll();
  40499a:	4b0f      	ldr	r3, [pc, #60]	; (4049d8 <xQueueGenericSend+0x16c>)
  40499c:	4798      	blx	r3

			/* Return to the original privilege level before exiting the
			function. */
			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
  40499e:	2000      	movs	r0, #0
		}
	}
}
  4049a0:	b005      	add	sp, #20
  4049a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4049a6:	bf00      	nop
  4049a8:	00404179 	.word	0x00404179
  4049ac:	00405941 	.word	0x00405941
  4049b0:	004041a9 	.word	0x004041a9
  4049b4:	004041e9 	.word	0x004041e9
  4049b8:	004045a1 	.word	0x004045a1
  4049bc:	00404625 	.word	0x00404625
  4049c0:	00404161 	.word	0x00404161
  4049c4:	00405811 	.word	0x00405811
  4049c8:	00405219 	.word	0x00405219
  4049cc:	004058bd 	.word	0x004058bd
  4049d0:	00405725 	.word	0x00405725
  4049d4:	004046b5 	.word	0x004046b5
  4049d8:	00405385 	.word	0x00405385
  4049dc:	00405899 	.word	0x00405899

004049e0 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
  4049e0:	b570      	push	{r4, r5, r6, lr}
  4049e2:	4606      	mov	r6, r0
		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		/* Allocate the new queue structure. */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) );
  4049e4:	2058      	movs	r0, #88	; 0x58
  4049e6:	4b11      	ldr	r3, [pc, #68]	; (404a2c <xQueueCreateMutex+0x4c>)
  4049e8:	4798      	blx	r3
		if( pxNewQueue != NULL )
  4049ea:	4604      	mov	r4, r0
  4049ec:	b1d8      	cbz	r0, 404a26 <xQueueCreateMutex+0x46>
		{
			/* Information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
  4049ee:	2500      	movs	r5, #0
  4049f0:	6045      	str	r5, [r0, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
  4049f2:	6005      	str	r5, [r0, #0]

			/* Queues used as a mutex no data is actually copied into or out
			of the queue. */
			pxNewQueue->pcWriteTo = NULL;
  4049f4:	6085      	str	r5, [r0, #8]
			pxNewQueue->u.pcReadFrom = NULL;
  4049f6:	60c5      	str	r5, [r0, #12]

			/* Each mutex has a length of 1 (like a binary semaphore) and
			an item size of 0 as nothing is actually copied into or out
			of the mutex. */
			pxNewQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
  4049f8:	6385      	str	r5, [r0, #56]	; 0x38
			pxNewQueue->uxLength = ( UBaseType_t ) 1U;
  4049fa:	2301      	movs	r3, #1
  4049fc:	63c3      	str	r3, [r0, #60]	; 0x3c
			pxNewQueue->uxItemSize = ( UBaseType_t ) 0U;
  4049fe:	6405      	str	r5, [r0, #64]	; 0x40
			pxNewQueue->xRxLock = queueUNLOCKED;
  404a00:	f04f 33ff 	mov.w	r3, #4294967295
  404a04:	6443      	str	r3, [r0, #68]	; 0x44
			pxNewQueue->xTxLock = queueUNLOCKED;
  404a06:	6483      	str	r3, [r0, #72]	; 0x48

			#if ( configUSE_TRACE_FACILITY == 1 )
			{
				pxNewQueue->ucQueueType = ucQueueType;
  404a08:	f880 6050 	strb.w	r6, [r0, #80]	; 0x50
			}
			#endif

			#if ( configUSE_QUEUE_SETS == 1 )
			{
				pxNewQueue->pxQueueSetContainer = NULL;
  404a0c:	6545      	str	r5, [r0, #84]	; 0x54
			}
			#endif

			/* Ensure the event queues start with the correct state. */
			vListInitialise( &( pxNewQueue->xTasksWaitingToSend ) );
  404a0e:	3010      	adds	r0, #16
  404a10:	4e07      	ldr	r6, [pc, #28]	; (404a30 <xQueueCreateMutex+0x50>)
  404a12:	47b0      	blx	r6
			vListInitialise( &( pxNewQueue->xTasksWaitingToReceive ) );
  404a14:	f104 0024 	add.w	r0, r4, #36	; 0x24
  404a18:	47b0      	blx	r6

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
  404a1a:	4620      	mov	r0, r4
  404a1c:	4629      	mov	r1, r5
  404a1e:	462a      	mov	r2, r5
  404a20:	462b      	mov	r3, r5
  404a22:	4d04      	ldr	r5, [pc, #16]	; (404a34 <xQueueCreateMutex+0x54>)
  404a24:	47a8      	blx	r5
		{
			traceCREATE_MUTEX_FAILED();
		}

		return pxNewQueue;
	}
  404a26:	4620      	mov	r0, r4
  404a28:	bd70      	pop	{r4, r5, r6, pc}
  404a2a:	bf00      	nop
  404a2c:	00404405 	.word	0x00404405
  404a30:	0040406d 	.word	0x0040406d
  404a34:	0040486d 	.word	0x0040486d

00404a38 <xQueueGenericSendFromISR>:

#endif /* configUSE_ALTERNATIVE_API */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
  404a38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;

	configASSERT( pxQueue );
  404a3c:	b910      	cbnz	r0, 404a44 <xQueueGenericSendFromISR+0xc>
  404a3e:	4b2d      	ldr	r3, [pc, #180]	; (404af4 <xQueueGenericSendFromISR+0xbc>)
  404a40:	4798      	blx	r3
  404a42:	e7fe      	b.n	404a42 <xQueueGenericSendFromISR+0xa>
  404a44:	4688      	mov	r8, r1
  404a46:	4615      	mov	r5, r2
  404a48:	461e      	mov	r6, r3
  404a4a:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
  404a4c:	b921      	cbnz	r1, 404a58 <xQueueGenericSendFromISR+0x20>
  404a4e:	6c03      	ldr	r3, [r0, #64]	; 0x40
  404a50:	b113      	cbz	r3, 404a58 <xQueueGenericSendFromISR+0x20>
  404a52:	4b28      	ldr	r3, [pc, #160]	; (404af4 <xQueueGenericSendFromISR+0xbc>)
  404a54:	4798      	blx	r3
  404a56:	e7fe      	b.n	404a56 <xQueueGenericSendFromISR+0x1e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
  404a58:	2e02      	cmp	r6, #2
  404a5a:	d13b      	bne.n	404ad4 <xQueueGenericSendFromISR+0x9c>
  404a5c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  404a5e:	2b01      	cmp	r3, #1
  404a60:	d031      	beq.n	404ac6 <xQueueGenericSendFromISR+0x8e>
  404a62:	4b24      	ldr	r3, [pc, #144]	; (404af4 <xQueueGenericSendFromISR+0xbc>)
  404a64:	4798      	blx	r3
  404a66:	e7fe      	b.n	404a66 <xQueueGenericSendFromISR+0x2e>
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
  404a68:	4620      	mov	r0, r4
  404a6a:	4641      	mov	r1, r8
  404a6c:	4632      	mov	r2, r6
  404a6e:	4b22      	ldr	r3, [pc, #136]	; (404af8 <xQueueGenericSendFromISR+0xc0>)
  404a70:	4798      	blx	r3

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( pxQueue->xTxLock == queueUNLOCKED )
  404a72:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  404a74:	f1b3 3fff 	cmp.w	r3, #4294967295
  404a78:	d116      	bne.n	404aa8 <xQueueGenericSendFromISR+0x70>
			{
				#if ( configUSE_QUEUE_SETS == 1 )
				{
					if( pxQueue->pxQueueSetContainer != NULL )
  404a7a:	6d63      	ldr	r3, [r4, #84]	; 0x54
  404a7c:	b14b      	cbz	r3, 404a92 <xQueueGenericSendFromISR+0x5a>
					{
						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) == pdTRUE )
  404a7e:	4620      	mov	r0, r4
  404a80:	4631      	mov	r1, r6
  404a82:	4b1e      	ldr	r3, [pc, #120]	; (404afc <xQueueGenericSendFromISR+0xc4>)
  404a84:	4798      	blx	r3
  404a86:	2801      	cmp	r0, #1
  404a88:	d113      	bne.n	404ab2 <xQueueGenericSendFromISR+0x7a>
						{
							/* The queue is a member of a queue set, and posting
							to the queue set caused a higher priority task to
							unblock.  A context switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
  404a8a:	b1a5      	cbz	r5, 404ab6 <xQueueGenericSendFromISR+0x7e>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
  404a8c:	2401      	movs	r4, #1
  404a8e:	602c      	str	r4, [r5, #0]
  404a90:	e02a      	b.n	404ae8 <xQueueGenericSendFromISR+0xb0>
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else
					{
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  404a92:	6a63      	ldr	r3, [r4, #36]	; 0x24
  404a94:	b18b      	cbz	r3, 404aba <xQueueGenericSendFromISR+0x82>
						{
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  404a96:	f104 0024 	add.w	r0, r4, #36	; 0x24
  404a9a:	4b19      	ldr	r3, [pc, #100]	; (404b00 <xQueueGenericSendFromISR+0xc8>)
  404a9c:	4798      	blx	r3
  404a9e:	b170      	cbz	r0, 404abe <xQueueGenericSendFromISR+0x86>
							{
								/* The task waiting has a higher priority so
								record that a context switch is required. */
								if( pxHigherPriorityTaskWoken != NULL )
  404aa0:	b17d      	cbz	r5, 404ac2 <xQueueGenericSendFromISR+0x8a>
								{
									*pxHigherPriorityTaskWoken = pdTRUE;
  404aa2:	2401      	movs	r4, #1
  404aa4:	602c      	str	r4, [r5, #0]
  404aa6:	e01f      	b.n	404ae8 <xQueueGenericSendFromISR+0xb0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				++( pxQueue->xTxLock );
  404aa8:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  404aaa:	3301      	adds	r3, #1
  404aac:	64a3      	str	r3, [r4, #72]	; 0x48
			}

			xReturn = pdPASS;
  404aae:	2401      	movs	r4, #1
  404ab0:	e01a      	b.n	404ae8 <xQueueGenericSendFromISR+0xb0>
  404ab2:	2401      	movs	r4, #1
  404ab4:	e018      	b.n	404ae8 <xQueueGenericSendFromISR+0xb0>
  404ab6:	2401      	movs	r4, #1
  404ab8:	e016      	b.n	404ae8 <xQueueGenericSendFromISR+0xb0>
  404aba:	2401      	movs	r4, #1
  404abc:	e014      	b.n	404ae8 <xQueueGenericSendFromISR+0xb0>
  404abe:	2401      	movs	r4, #1
  404ac0:	e012      	b.n	404ae8 <xQueueGenericSendFromISR+0xb0>
  404ac2:	2401      	movs	r4, #1
  404ac4:	e010      	b.n	404ae8 <xQueueGenericSendFromISR+0xb0>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
  404ac6:	4b0f      	ldr	r3, [pc, #60]	; (404b04 <xQueueGenericSendFromISR+0xcc>)
  404ac8:	4798      	blx	r3
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
  404aca:	4b0a      	ldr	r3, [pc, #40]	; (404af4 <xQueueGenericSendFromISR+0xbc>)
  404acc:	4798      	blx	r3
  404ace:	4607      	mov	r7, r0
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
  404ad0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  404ad2:	e7c9      	b.n	404a68 <xQueueGenericSendFromISR+0x30>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
  404ad4:	4b0b      	ldr	r3, [pc, #44]	; (404b04 <xQueueGenericSendFromISR+0xcc>)
  404ad6:	4798      	blx	r3
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
  404ad8:	4b06      	ldr	r3, [pc, #24]	; (404af4 <xQueueGenericSendFromISR+0xbc>)
  404ada:	4798      	blx	r3
  404adc:	4607      	mov	r7, r0
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
  404ade:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  404ae0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  404ae2:	429a      	cmp	r2, r3
  404ae4:	d3c0      	bcc.n	404a68 <xQueueGenericSendFromISR+0x30>
			xReturn = pdPASS;
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
  404ae6:	2400      	movs	r4, #0
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
  404ae8:	4638      	mov	r0, r7
  404aea:	4b07      	ldr	r3, [pc, #28]	; (404b08 <xQueueGenericSendFromISR+0xd0>)
  404aec:	4798      	blx	r3

	return xReturn;
}
  404aee:	4620      	mov	r0, r4
  404af0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  404af4:	00404179 	.word	0x00404179
  404af8:	004045a1 	.word	0x004045a1
  404afc:	00404625 	.word	0x00404625
  404b00:	00405811 	.word	0x00405811
  404b04:	00404361 	.word	0x00404361
  404b08:	004041e1 	.word	0x004041e1

00404b0c <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
  404b0c:	b570      	push	{r4, r5, r6, lr}
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
  404b0e:	b910      	cbnz	r0, 404b16 <xQueueGiveFromISR+0xa>
  404b10:	4b22      	ldr	r3, [pc, #136]	; (404b9c <xQueueGiveFromISR+0x90>)
  404b12:	4798      	blx	r3
  404b14:	e7fe      	b.n	404b14 <xQueueGiveFromISR+0x8>
  404b16:	460d      	mov	r5, r1
  404b18:	4604      	mov	r4, r0

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
  404b1a:	6c03      	ldr	r3, [r0, #64]	; 0x40
  404b1c:	b113      	cbz	r3, 404b24 <xQueueGiveFromISR+0x18>
  404b1e:	4b1f      	ldr	r3, [pc, #124]	; (404b9c <xQueueGiveFromISR+0x90>)
  404b20:	4798      	blx	r3
  404b22:	e7fe      	b.n	404b22 <xQueueGiveFromISR+0x16>
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

  404b24:	4b1e      	ldr	r3, [pc, #120]	; (404ba0 <xQueueGiveFromISR+0x94>)
  404b26:	4798      	blx	r3
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
	{
  404b28:	4b1c      	ldr	r3, [pc, #112]	; (404b9c <xQueueGiveFromISR+0x90>)
  404b2a:	4798      	blx	r3
  404b2c:	4606      	mov	r6, r0
		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
		{
  404b2e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  404b30:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  404b32:	429a      	cmp	r2, r3
  404b34:	d222      	bcs.n	404b7c <xQueueGiveFromISR+0x70>
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			++( pxQueue->uxMessagesWaiting );

  404b36:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  404b38:	3301      	adds	r3, #1
  404b3a:	63a3      	str	r3, [r4, #56]	; 0x38
			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( pxQueue->xTxLock == queueUNLOCKED )
			{
  404b3c:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  404b3e:	f1b3 3fff 	cmp.w	r3, #4294967295
  404b42:	d116      	bne.n	404b72 <xQueueGiveFromISR+0x66>
				#if ( configUSE_QUEUE_SETS == 1 )
				{
					if( pxQueue->pxQueueSetContainer != NULL )
					{
  404b44:	6d63      	ldr	r3, [r4, #84]	; 0x54
  404b46:	b14b      	cbz	r3, 404b5c <xQueueGiveFromISR+0x50>
						if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) == pdTRUE )
						{
  404b48:	4620      	mov	r0, r4
  404b4a:	2100      	movs	r1, #0
  404b4c:	4b15      	ldr	r3, [pc, #84]	; (404ba4 <xQueueGiveFromISR+0x98>)
  404b4e:	4798      	blx	r3
  404b50:	2801      	cmp	r0, #1
  404b52:	d115      	bne.n	404b80 <xQueueGiveFromISR+0x74>
							/* The semaphore is a member of a queue set, and
							posting	to the queue set caused a higher priority
							task to	unblock.  A context switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
							{
  404b54:	b1b5      	cbz	r5, 404b84 <xQueueGiveFromISR+0x78>
								*pxHigherPriorityTaskWoken = pdTRUE;
							}
  404b56:	2401      	movs	r4, #1
  404b58:	602c      	str	r4, [r5, #0]
  404b5a:	e01a      	b.n	404b92 <xQueueGiveFromISR+0x86>
						}
					}
					else
					{
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
						{
  404b5c:	6a63      	ldr	r3, [r4, #36]	; 0x24
  404b5e:	b19b      	cbz	r3, 404b88 <xQueueGiveFromISR+0x7c>
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
							{
  404b60:	f104 0024 	add.w	r0, r4, #36	; 0x24
  404b64:	4b10      	ldr	r3, [pc, #64]	; (404ba8 <xQueueGiveFromISR+0x9c>)
  404b66:	4798      	blx	r3
  404b68:	b180      	cbz	r0, 404b8c <xQueueGiveFromISR+0x80>
								/* The task waiting has a higher priority so
								record that a context switch is required. */
								if( pxHigherPriorityTaskWoken != NULL )
								{
  404b6a:	b18d      	cbz	r5, 404b90 <xQueueGiveFromISR+0x84>
									*pxHigherPriorityTaskWoken = pdTRUE;
								}
  404b6c:	2401      	movs	r4, #1
  404b6e:	602c      	str	r4, [r5, #0]
  404b70:	e00f      	b.n	404b92 <xQueueGiveFromISR+0x86>
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				++( pxQueue->xTxLock );
			}
  404b72:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  404b74:	3301      	adds	r3, #1
  404b76:	64a3      	str	r3, [r4, #72]	; 0x48

			xReturn = pdPASS;
		}
  404b78:	2401      	movs	r4, #1
  404b7a:	e00a      	b.n	404b92 <xQueueGiveFromISR+0x86>
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
		}
  404b7c:	2400      	movs	r4, #0
  404b7e:	e008      	b.n	404b92 <xQueueGiveFromISR+0x86>
				knows that data was posted while it was locked. */
				++( pxQueue->xTxLock );
			}

			xReturn = pdPASS;
		}
  404b80:	2401      	movs	r4, #1
  404b82:	e006      	b.n	404b92 <xQueueGiveFromISR+0x86>
  404b84:	2401      	movs	r4, #1
  404b86:	e004      	b.n	404b92 <xQueueGiveFromISR+0x86>
  404b88:	2401      	movs	r4, #1
  404b8a:	e002      	b.n	404b92 <xQueueGiveFromISR+0x86>
  404b8c:	2401      	movs	r4, #1
  404b8e:	e000      	b.n	404b92 <xQueueGiveFromISR+0x86>
  404b90:	2401      	movs	r4, #1
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

  404b92:	4630      	mov	r0, r6
  404b94:	4b05      	ldr	r3, [pc, #20]	; (404bac <xQueueGiveFromISR+0xa0>)
  404b96:	4798      	blx	r3
	return xReturn;
}
/*-----------------------------------------------------------*/
  404b98:	4620      	mov	r0, r4
  404b9a:	bd70      	pop	{r4, r5, r6, pc}
  404b9c:	00404179 	.word	0x00404179
  404ba0:	00404361 	.word	0x00404361
  404ba4:	00404625 	.word	0x00404625
  404ba8:	00405811 	.word	0x00405811
  404bac:	004041e1 	.word	0x004041e1

00404bb0 <xQueueGenericReceive>:

BaseType_t xQueueGenericReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait, const BaseType_t xJustPeeking )
{
BaseType_t xEntryTimeSet = pdFALSE;
  404bb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  404bb4:	b085      	sub	sp, #20
  404bb6:	9201      	str	r2, [sp, #4]
TimeOut_t xTimeOut;
int8_t *pcOriginalReadPosition;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;

	configASSERT( pxQueue );
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
  404bb8:	b910      	cbnz	r0, 404bc0 <xQueueGenericReceive+0x10>
  404bba:	4b49      	ldr	r3, [pc, #292]	; (404ce0 <xQueueGenericReceive+0x130>)
  404bbc:	4798      	blx	r3
  404bbe:	e7fe      	b.n	404bbe <xQueueGenericReceive+0xe>
  404bc0:	4688      	mov	r8, r1
  404bc2:	4699      	mov	r9, r3
  404bc4:	4604      	mov	r4, r0
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
  404bc6:	b921      	cbnz	r1, 404bd2 <xQueueGenericReceive+0x22>
  404bc8:	6c03      	ldr	r3, [r0, #64]	; 0x40
  404bca:	b113      	cbz	r3, 404bd2 <xQueueGenericReceive+0x22>
  404bcc:	4b44      	ldr	r3, [pc, #272]	; (404ce0 <xQueueGenericReceive+0x130>)
  404bce:	4798      	blx	r3
  404bd0:	e7fe      	b.n	404bd0 <xQueueGenericReceive+0x20>
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
	}
  404bd2:	4b44      	ldr	r3, [pc, #272]	; (404ce4 <xQueueGenericReceive+0x134>)
  404bd4:	4798      	blx	r3
  404bd6:	b920      	cbnz	r0, 404be2 <xQueueGenericReceive+0x32>
  404bd8:	9b01      	ldr	r3, [sp, #4]
  404bda:	b123      	cbz	r3, 404be6 <xQueueGenericReceive+0x36>
  404bdc:	4b40      	ldr	r3, [pc, #256]	; (404ce0 <xQueueGenericReceive+0x130>)
  404bde:	4798      	blx	r3
  404be0:	e7fe      	b.n	404be0 <xQueueGenericReceive+0x30>
  404be2:	2700      	movs	r7, #0
  404be4:	e000      	b.n	404be8 <xQueueGenericReceive+0x38>
  404be6:	2700      	movs	r7, #0
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
		{
  404be8:	4e3f      	ldr	r6, [pc, #252]	; (404ce8 <xQueueGenericReceive+0x138>)
				else if( xEntryTimeSet == pdFALSE )
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
					xEntryTimeSet = pdTRUE;
  404bea:	f8df a12c 	ldr.w	sl, [pc, #300]	; 404d18 <xQueueGenericReceive+0x168>
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();

  404bee:	4d3f      	ldr	r5, [pc, #252]	; (404cec <xQueueGenericReceive+0x13c>)
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
		{
  404bf0:	47b0      	blx	r6
			/* Is there data in the queue now?  To be running the calling task
			must be	the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
			{
  404bf2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  404bf4:	b343      	cbz	r3, 404c48 <xQueueGenericReceive+0x98>
				/* Remember the read position in case the queue is only being
				peeked. */
				pcOriginalReadPosition = pxQueue->u.pcReadFrom;

  404bf6:	68e5      	ldr	r5, [r4, #12]
				prvCopyDataFromQueue( pxQueue, pvBuffer );

  404bf8:	4620      	mov	r0, r4
  404bfa:	4641      	mov	r1, r8
  404bfc:	4b3c      	ldr	r3, [pc, #240]	; (404cf0 <xQueueGenericReceive+0x140>)
  404bfe:	4798      	blx	r3
				if( xJustPeeking == pdFALSE )
				{
  404c00:	f1b9 0f00 	cmp.w	r9, #0
  404c04:	d112      	bne.n	404c2c <xQueueGenericReceive+0x7c>
					traceQUEUE_RECEIVE( pxQueue );

					/* Actually removing data, not just peeking. */
					--( pxQueue->uxMessagesWaiting );

  404c06:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  404c08:	3b01      	subs	r3, #1
  404c0a:	63a3      	str	r3, [r4, #56]	; 0x38
					#if ( configUSE_MUTEXES == 1 )
					{
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
						{
  404c0c:	6823      	ldr	r3, [r4, #0]
  404c0e:	b913      	cbnz	r3, 404c16 <xQueueGenericReceive+0x66>
							/* Record the information required to implement
							priority inheritance should it become necessary. */
							pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
						}
  404c10:	4b38      	ldr	r3, [pc, #224]	; (404cf4 <xQueueGenericReceive+0x144>)
  404c12:	4798      	blx	r3
  404c14:	6060      	str	r0, [r4, #4]
						}
					}
					#endif /* configUSE_MUTEXES */

					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
					{
  404c16:	6923      	ldr	r3, [r4, #16]
  404c18:	b193      	cbz	r3, 404c40 <xQueueGenericReceive+0x90>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
						{
  404c1a:	f104 0010 	add.w	r0, r4, #16
  404c1e:	4b36      	ldr	r3, [pc, #216]	; (404cf8 <xQueueGenericReceive+0x148>)
  404c20:	4798      	blx	r3
  404c22:	2801      	cmp	r0, #1
  404c24:	d10c      	bne.n	404c40 <xQueueGenericReceive+0x90>
							queueYIELD_IF_USING_PREEMPTION();
						}
  404c26:	4b35      	ldr	r3, [pc, #212]	; (404cfc <xQueueGenericReceive+0x14c>)
  404c28:	4798      	blx	r3
  404c2a:	e009      	b.n	404c40 <xQueueGenericReceive+0x90>
					traceQUEUE_PEEK( pxQueue );

					/* The data is not being removed, so reset the read
					pointer. */
					pxQueue->u.pcReadFrom = pcOriginalReadPosition;

  404c2c:	60e5      	str	r5, [r4, #12]
					/* The data is being left in the queue, so see if there are
					any other tasks waiting for the data. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
					{
  404c2e:	6a63      	ldr	r3, [r4, #36]	; 0x24
  404c30:	b133      	cbz	r3, 404c40 <xQueueGenericReceive+0x90>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
						{
  404c32:	f104 0024 	add.w	r0, r4, #36	; 0x24
  404c36:	4b30      	ldr	r3, [pc, #192]	; (404cf8 <xQueueGenericReceive+0x148>)
  404c38:	4798      	blx	r3
  404c3a:	b108      	cbz	r0, 404c40 <xQueueGenericReceive+0x90>
							/* The task waiting has a higher priority than this task. */
							queueYIELD_IF_USING_PREEMPTION();
						}
  404c3c:	4b2f      	ldr	r3, [pc, #188]	; (404cfc <xQueueGenericReceive+0x14c>)
  404c3e:	4798      	blx	r3
						mtCOVERAGE_TEST_MARKER();
					}
				}

				taskEXIT_CRITICAL();
				return pdPASS;
  404c40:	4b2a      	ldr	r3, [pc, #168]	; (404cec <xQueueGenericReceive+0x13c>)
  404c42:	4798      	blx	r3
			}
  404c44:	2001      	movs	r0, #1
  404c46:	e048      	b.n	404cda <xQueueGenericReceive+0x12a>
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
				{
  404c48:	9b01      	ldr	r3, [sp, #4]
  404c4a:	b91b      	cbnz	r3, 404c54 <xQueueGenericReceive+0xa4>
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
					traceQUEUE_RECEIVE_FAILED( pxQueue );
  404c4c:	4b27      	ldr	r3, [pc, #156]	; (404cec <xQueueGenericReceive+0x13c>)
  404c4e:	4798      	blx	r3
					return errQUEUE_EMPTY;
				}
  404c50:	2000      	movs	r0, #0
  404c52:	e042      	b.n	404cda <xQueueGenericReceive+0x12a>
				else if( xEntryTimeSet == pdFALSE )
				{
  404c54:	b917      	cbnz	r7, 404c5c <xQueueGenericReceive+0xac>
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
					xEntryTimeSet = pdTRUE;
  404c56:	a802      	add	r0, sp, #8
  404c58:	47d0      	blx	sl
				}
  404c5a:	2701      	movs	r7, #1
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();

  404c5c:	47a8      	blx	r5
		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
		prvLockQueue( pxQueue );
  404c5e:	4b28      	ldr	r3, [pc, #160]	; (404d00 <xQueueGenericReceive+0x150>)
  404c60:	4798      	blx	r3

  404c62:	47b0      	blx	r6
  404c64:	6c63      	ldr	r3, [r4, #68]	; 0x44
  404c66:	f1b3 3fff 	cmp.w	r3, #4294967295
  404c6a:	bf04      	itt	eq
  404c6c:	2300      	moveq	r3, #0
  404c6e:	6463      	streq	r3, [r4, #68]	; 0x44
  404c70:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  404c72:	f1b3 3fff 	cmp.w	r3, #4294967295
  404c76:	bf04      	itt	eq
  404c78:	2300      	moveq	r3, #0
  404c7a:	64a3      	streq	r3, [r4, #72]	; 0x48
  404c7c:	47a8      	blx	r5
		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
		{
  404c7e:	a802      	add	r0, sp, #8
  404c80:	a901      	add	r1, sp, #4
  404c82:	4b20      	ldr	r3, [pc, #128]	; (404d04 <xQueueGenericReceive+0x154>)
  404c84:	4798      	blx	r3
  404c86:	bb10      	cbnz	r0, 404cce <xQueueGenericReceive+0x11e>
static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
	{
  404c88:	47b0      	blx	r6
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
		{
  404c8a:	f8d4 b038 	ldr.w	fp, [r4, #56]	; 0x38
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();

  404c8e:	47a8      	blx	r5

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
		{
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
			{
  404c90:	f1bb 0f00 	cmp.w	fp, #0
  404c94:	d115      	bne.n	404cc2 <xQueueGenericReceive+0x112>
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
					{
  404c96:	6823      	ldr	r3, [r4, #0]
  404c98:	b923      	cbnz	r3, 404ca4 <xQueueGenericReceive+0xf4>
						taskENTER_CRITICAL();
						{
  404c9a:	47b0      	blx	r6
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
						}
  404c9c:	6860      	ldr	r0, [r4, #4]
  404c9e:	4b1a      	ldr	r3, [pc, #104]	; (404d08 <xQueueGenericReceive+0x158>)
  404ca0:	4798      	blx	r3
						taskEXIT_CRITICAL();
					}
  404ca2:	47a8      	blx	r5
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
				prvUnlockQueue( pxQueue );
  404ca4:	f104 0024 	add.w	r0, r4, #36	; 0x24
  404ca8:	9901      	ldr	r1, [sp, #4]
  404caa:	4b18      	ldr	r3, [pc, #96]	; (404d0c <xQueueGenericReceive+0x15c>)
  404cac:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
  404cae:	4620      	mov	r0, r4
  404cb0:	4b17      	ldr	r3, [pc, #92]	; (404d10 <xQueueGenericReceive+0x160>)
  404cb2:	4798      	blx	r3
				{
  404cb4:	4b17      	ldr	r3, [pc, #92]	; (404d14 <xQueueGenericReceive+0x164>)
  404cb6:	4798      	blx	r3
  404cb8:	2800      	cmp	r0, #0
  404cba:	d199      	bne.n	404bf0 <xQueueGenericReceive+0x40>
					portYIELD_WITHIN_API();
				}
  404cbc:	4b0f      	ldr	r3, [pc, #60]	; (404cfc <xQueueGenericReceive+0x14c>)
  404cbe:	4798      	blx	r3
  404cc0:	e796      	b.n	404bf0 <xQueueGenericReceive+0x40>
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
				( void ) xTaskResumeAll();
  404cc2:	4620      	mov	r0, r4
  404cc4:	4b12      	ldr	r3, [pc, #72]	; (404d10 <xQueueGenericReceive+0x160>)
  404cc6:	4798      	blx	r3
			}
  404cc8:	4b12      	ldr	r3, [pc, #72]	; (404d14 <xQueueGenericReceive+0x164>)
  404cca:	4798      	blx	r3
  404ccc:	e790      	b.n	404bf0 <xQueueGenericReceive+0x40>
		}
		else
		{
			prvUnlockQueue( pxQueue );
			( void ) xTaskResumeAll();
  404cce:	4620      	mov	r0, r4
  404cd0:	4b0f      	ldr	r3, [pc, #60]	; (404d10 <xQueueGenericReceive+0x160>)
  404cd2:	4798      	blx	r3
			traceQUEUE_RECEIVE_FAILED( pxQueue );
  404cd4:	4b0f      	ldr	r3, [pc, #60]	; (404d14 <xQueueGenericReceive+0x164>)
  404cd6:	4798      	blx	r3
			return errQUEUE_EMPTY;
		}
  404cd8:	2000      	movs	r0, #0
	}
}
/*-----------------------------------------------------------*/
  404cda:	b005      	add	sp, #20
  404cdc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404ce0:	00404179 	.word	0x00404179
  404ce4:	00405941 	.word	0x00405941
  404ce8:	004041a9 	.word	0x004041a9
  404cec:	004041e9 	.word	0x004041e9
  404cf0:	0040468d 	.word	0x0040468d
  404cf4:	00405c65 	.word	0x00405c65
  404cf8:	00405811 	.word	0x00405811
  404cfc:	00404161 	.word	0x00404161
  404d00:	00405219 	.word	0x00405219
  404d04:	004058bd 	.word	0x004058bd
  404d08:	00405961 	.word	0x00405961
  404d0c:	00405725 	.word	0x00405725
  404d10:	004046b5 	.word	0x004046b5
  404d14:	00405385 	.word	0x00405385
  404d18:	00405899 	.word	0x00405899

00404d1c <vQueueWaitForMessageRestricted>:

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
  404d1c:	b570      	push	{r4, r5, r6, lr}
  404d1e:	4604      	mov	r4, r0
  404d20:	460e      	mov	r6, r1
  404d22:	4615      	mov	r5, r2
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
  404d24:	4b0d      	ldr	r3, [pc, #52]	; (404d5c <vQueueWaitForMessageRestricted+0x40>)
  404d26:	4798      	blx	r3
  404d28:	6c63      	ldr	r3, [r4, #68]	; 0x44
  404d2a:	f1b3 3fff 	cmp.w	r3, #4294967295
  404d2e:	bf04      	itt	eq
  404d30:	2300      	moveq	r3, #0
  404d32:	6463      	streq	r3, [r4, #68]	; 0x44
  404d34:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  404d36:	f1b3 3fff 	cmp.w	r3, #4294967295
  404d3a:	bf04      	itt	eq
  404d3c:	2300      	moveq	r3, #0
  404d3e:	64a3      	streq	r3, [r4, #72]	; 0x48
  404d40:	4b07      	ldr	r3, [pc, #28]	; (404d60 <vQueueWaitForMessageRestricted+0x44>)
  404d42:	4798      	blx	r3
		{
  404d44:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  404d46:	b92b      	cbnz	r3, 404d54 <vQueueWaitForMessageRestricted+0x38>
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
		}
  404d48:	f104 0024 	add.w	r0, r4, #36	; 0x24
  404d4c:	4631      	mov	r1, r6
  404d4e:	462a      	mov	r2, r5
  404d50:	4b04      	ldr	r3, [pc, #16]	; (404d64 <vQueueWaitForMessageRestricted+0x48>)
  404d52:	4798      	blx	r3
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
	}
  404d54:	4620      	mov	r0, r4
  404d56:	4b04      	ldr	r3, [pc, #16]	; (404d68 <vQueueWaitForMessageRestricted+0x4c>)
  404d58:	4798      	blx	r3
  404d5a:	bd70      	pop	{r4, r5, r6, pc}
  404d5c:	004041a9 	.word	0x004041a9
  404d60:	004041e9 	.word	0x004041e9
  404d64:	0040579d 	.word	0x0040579d
  404d68:	004046b5 	.word	0x004046b5

00404d6c <prvListTaskWithinSingleList>:
	static UBaseType_t prvListTaskWithinSingleList( TaskStatus_t *pxTaskStatusArray, List_t *pxList, eTaskState eState )
	{
	volatile TCB_t *pxNextTCB, *pxFirstTCB;
	UBaseType_t uxTask = 0;

		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
  404d6c:	680b      	ldr	r3, [r1, #0]
  404d6e:	2b00      	cmp	r3, #0
  404d70:	d056      	beq.n	404e20 <prvListTaskWithinSingleList+0xb4>
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	static UBaseType_t prvListTaskWithinSingleList( TaskStatus_t *pxTaskStatusArray, List_t *pxList, eTaskState eState )
	{
  404d72:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	volatile TCB_t *pxNextTCB, *pxFirstTCB;
	UBaseType_t uxTask = 0;

		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
		{
			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList );
  404d76:	684b      	ldr	r3, [r1, #4]
  404d78:	685b      	ldr	r3, [r3, #4]
  404d7a:	604b      	str	r3, [r1, #4]
  404d7c:	f101 0708 	add.w	r7, r1, #8
  404d80:	42bb      	cmp	r3, r7
  404d82:	bf04      	itt	eq
  404d84:	685b      	ldreq	r3, [r3, #4]
  404d86:	604b      	streq	r3, [r1, #4]
  404d88:	684b      	ldr	r3, [r1, #4]
  404d8a:	f8d3 e00c 	ldr.w	lr, [r3, #12]
  404d8e:	f100 061c 	add.w	r6, r0, #28
#if ( configUSE_TRACE_FACILITY == 1 )

	static UBaseType_t prvListTaskWithinSingleList( TaskStatus_t *pxTaskStatusArray, List_t *pxList, eTaskState eState )
	{
	volatile TCB_t *pxNextTCB, *pxFirstTCB;
	UBaseType_t uxTask = 0;
  404d92:	2000      	movs	r0, #0
					be reported as being in the Blocked state. */
					if( eState == eSuspended )
					{
						if( listLIST_ITEM_CONTAINER( &( pxNextTCB->xEventListItem ) ) != NULL )
						{
							pxTaskStatusArray[ uxTask ].eCurrentState = eBlocked;
  404d94:	f04f 0c02 	mov.w	ip, #2

#if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )

	static uint16_t prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
	{
	uint32_t ulCount = 0U;
  404d98:	4680      	mov	r8, r0
			pxTaskStatusArray array for each task that is referenced from
			pxList.  See the definition of TaskStatus_t in task.h for the
			meaning of each TaskStatus_t structure member. */
			do
			{
				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList );
  404d9a:	684b      	ldr	r3, [r1, #4]
  404d9c:	685b      	ldr	r3, [r3, #4]
  404d9e:	604b      	str	r3, [r1, #4]
  404da0:	429f      	cmp	r7, r3
  404da2:	bf04      	itt	eq
  404da4:	68cb      	ldreq	r3, [r1, #12]
  404da6:	604b      	streq	r3, [r1, #4]
  404da8:	684b      	ldr	r3, [r1, #4]
  404daa:	f8d3 900c 	ldr.w	r9, [r3, #12]
  404dae:	46b2      	mov	sl, r6

				pxTaskStatusArray[ uxTask ].xHandle = ( TaskHandle_t ) pxNextTCB;
  404db0:	f846 9c1c 	str.w	r9, [r6, #-28]
				pxTaskStatusArray[ uxTask ].pcTaskName = ( const char * ) &( pxNextTCB->pcTaskName [ 0 ] );
  404db4:	f109 0334 	add.w	r3, r9, #52	; 0x34
  404db8:	f846 3c18 	str.w	r3, [r6, #-24]
				pxTaskStatusArray[ uxTask ].xTaskNumber = pxNextTCB->uxTCBNumber;
  404dbc:	f8d9 3040 	ldr.w	r3, [r9, #64]	; 0x40
  404dc0:	f846 3c14 	str.w	r3, [r6, #-20]
				pxTaskStatusArray[ uxTask ].eCurrentState = eState;
  404dc4:	f806 2c10 	strb.w	r2, [r6, #-16]
				pxTaskStatusArray[ uxTask ].uxCurrentPriority = pxNextTCB->uxPriority;
  404dc8:	f8d9 302c 	ldr.w	r3, [r9, #44]	; 0x2c
  404dcc:	f846 3c0c 	str.w	r3, [r6, #-12]
				#if ( INCLUDE_vTaskSuspend == 1 )
				{
					/* If the task is in the suspended list then there is a chance
					it is actually just blocked indefinitely - so really it should
					be reported as being in the Blocked state. */
					if( eState == eSuspended )
  404dd0:	2a03      	cmp	r2, #3
  404dd2:	d104      	bne.n	404dde <prvListTaskWithinSingleList+0x72>
					{
						if( listLIST_ITEM_CONTAINER( &( pxNextTCB->xEventListItem ) ) != NULL )
  404dd4:	f8d9 3028 	ldr.w	r3, [r9, #40]	; 0x28
  404dd8:	b10b      	cbz	r3, 404dde <prvListTaskWithinSingleList+0x72>
						{
							pxTaskStatusArray[ uxTask ].eCurrentState = eBlocked;
  404dda:	f806 cc10 	strb.w	ip, [r6, #-16]
				}
				#endif /* INCLUDE_vTaskSuspend */

				#if ( configUSE_MUTEXES == 1 )
				{
					pxTaskStatusArray[ uxTask ].uxBasePriority = pxNextTCB->uxBasePriority;
  404dde:	f8d9 3048 	ldr.w	r3, [r9, #72]	; 0x48
  404de2:	f84a 3c08 	str.w	r3, [sl, #-8]
				}
				#endif

				#if ( configGENERATE_RUN_TIME_STATS == 1 )
				{
					pxTaskStatusArray[ uxTask ].ulRunTimeCounter = pxNextTCB->ulRunTimeCounter;
  404de6:	f8d9 3050 	ldr.w	r3, [r9, #80]	; 0x50
  404dea:	f84a 3c04 	str.w	r3, [sl, #-4]
				{
					pxTaskStatusArray[ uxTask ].usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxNextTCB->pxEndOfStack );
				}
				#else
				{
					pxTaskStatusArray[ uxTask ].usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxNextTCB->pxStack );
  404dee:	f8d9 b030 	ldr.w	fp, [r9, #48]	; 0x30

	static uint16_t prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
	{
	uint32_t ulCount = 0U;

		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
  404df2:	f89b 3000 	ldrb.w	r3, [fp]
  404df6:	2ba5      	cmp	r3, #165	; 0xa5
  404df8:	d108      	bne.n	404e0c <prvListTaskWithinSingleList+0xa0>
  404dfa:	f10b 0301 	add.w	r3, fp, #1
  404dfe:	ebcb 0503 	rsb	r5, fp, r3
  404e02:	f813 4b01 	ldrb.w	r4, [r3], #1
  404e06:	2ca5      	cmp	r4, #165	; 0xa5
  404e08:	d0f9      	beq.n	404dfe <prvListTaskWithinSingleList+0x92>
  404e0a:	e000      	b.n	404e0e <prvListTaskWithinSingleList+0xa2>

#if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )

	static uint16_t prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
	{
	uint32_t ulCount = 0U;
  404e0c:	4645      	mov	r5, r8
		{
			pucStackByte -= portSTACK_GROWTH;
			ulCount++;
		}

		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller architectures. */
  404e0e:	08ad      	lsrs	r5, r5, #2

		return ( uint16_t ) ulCount;
  404e10:	f8aa 5000 	strh.w	r5, [sl]
				{
					pxTaskStatusArray[ uxTask ].usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxNextTCB->pxStack );
				}
				#endif

				uxTask++;
  404e14:	3001      	adds	r0, #1
  404e16:	3620      	adds	r6, #32

			} while( pxNextTCB != pxFirstTCB );
  404e18:	45f1      	cmp	r9, lr
  404e1a:	d1be      	bne.n	404d9a <prvListTaskWithinSingleList+0x2e>
  404e1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
#if ( configUSE_TRACE_FACILITY == 1 )

	static UBaseType_t prvListTaskWithinSingleList( TaskStatus_t *pxTaskStatusArray, List_t *pxList, eTaskState eState )
	{
	volatile TCB_t *pxNextTCB, *pxFirstTCB;
	UBaseType_t uxTask = 0;
  404e20:	2000      	movs	r0, #0
  404e22:	4770      	bx	lr

00404e24 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
  404e24:	4b08      	ldr	r3, [pc, #32]	; (404e48 <prvResetNextTaskUnblockTime+0x24>)
  404e26:	681b      	ldr	r3, [r3, #0]
  404e28:	681b      	ldr	r3, [r3, #0]
  404e2a:	b923      	cbnz	r3, 404e36 <prvResetNextTaskUnblockTime+0x12>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
  404e2c:	f04f 32ff 	mov.w	r2, #4294967295
  404e30:	4b06      	ldr	r3, [pc, #24]	; (404e4c <prvResetNextTaskUnblockTime+0x28>)
  404e32:	601a      	str	r2, [r3, #0]
  404e34:	4770      	bx	lr
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
  404e36:	4b04      	ldr	r3, [pc, #16]	; (404e48 <prvResetNextTaskUnblockTime+0x24>)
  404e38:	681b      	ldr	r3, [r3, #0]
  404e3a:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xGenericListItem ) );
  404e3c:	68db      	ldr	r3, [r3, #12]
  404e3e:	685a      	ldr	r2, [r3, #4]
  404e40:	4b02      	ldr	r3, [pc, #8]	; (404e4c <prvResetNextTaskUnblockTime+0x28>)
  404e42:	601a      	str	r2, [r3, #0]
  404e44:	4770      	bx	lr
  404e46:	bf00      	nop
  404e48:	2000ade0 	.word	0x2000ade0
  404e4c:	2000ae84 	.word	0x2000ae84

00404e50 <prvAddCurrentTaskToDelayedList>:
	#endif /* vTaskDelete */
}
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( const TickType_t xTimeToWake )
{
  404e50:	b510      	push	{r4, lr}
  404e52:	4604      	mov	r4, r0
	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
  404e54:	4b0e      	ldr	r3, [pc, #56]	; (404e90 <prvAddCurrentTaskToDelayedList+0x40>)
  404e56:	681b      	ldr	r3, [r3, #0]
  404e58:	6058      	str	r0, [r3, #4]

	if( xTimeToWake < xTickCount )
  404e5a:	4b0e      	ldr	r3, [pc, #56]	; (404e94 <prvAddCurrentTaskToDelayedList+0x44>)
  404e5c:	681b      	ldr	r3, [r3, #0]
  404e5e:	4298      	cmp	r0, r3
  404e60:	d207      	bcs.n	404e72 <prvAddCurrentTaskToDelayedList+0x22>
	{
		/* Wake time has overflowed.  Place this item in the overflow list. */
		vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
  404e62:	4b0d      	ldr	r3, [pc, #52]	; (404e98 <prvAddCurrentTaskToDelayedList+0x48>)
  404e64:	6818      	ldr	r0, [r3, #0]
  404e66:	4b0a      	ldr	r3, [pc, #40]	; (404e90 <prvAddCurrentTaskToDelayedList+0x40>)
  404e68:	6819      	ldr	r1, [r3, #0]
  404e6a:	3104      	adds	r1, #4
  404e6c:	4b0b      	ldr	r3, [pc, #44]	; (404e9c <prvAddCurrentTaskToDelayedList+0x4c>)
  404e6e:	4798      	blx	r3
  404e70:	bd10      	pop	{r4, pc}
	}
	else
	{
		/* The wake time has not overflowed, so the current block list is used. */
		vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
  404e72:	4b0b      	ldr	r3, [pc, #44]	; (404ea0 <prvAddCurrentTaskToDelayedList+0x50>)
  404e74:	6818      	ldr	r0, [r3, #0]
  404e76:	4b06      	ldr	r3, [pc, #24]	; (404e90 <prvAddCurrentTaskToDelayedList+0x40>)
  404e78:	6819      	ldr	r1, [r3, #0]
  404e7a:	3104      	adds	r1, #4
  404e7c:	4b07      	ldr	r3, [pc, #28]	; (404e9c <prvAddCurrentTaskToDelayedList+0x4c>)
  404e7e:	4798      	blx	r3

		/* If the task entering the blocked state was placed at the head of the
		list of blocked tasks then xNextTaskUnblockTime needs to be updated
		too. */
		if( xTimeToWake < xNextTaskUnblockTime )
  404e80:	4b08      	ldr	r3, [pc, #32]	; (404ea4 <prvAddCurrentTaskToDelayedList+0x54>)
  404e82:	681b      	ldr	r3, [r3, #0]
  404e84:	429c      	cmp	r4, r3
		{
			xNextTaskUnblockTime = xTimeToWake;
  404e86:	bf3c      	itt	cc
  404e88:	4b06      	ldrcc	r3, [pc, #24]	; (404ea4 <prvAddCurrentTaskToDelayedList+0x54>)
  404e8a:	601c      	strcc	r4, [r3, #0]
  404e8c:	bd10      	pop	{r4, pc}
  404e8e:	bf00      	nop
  404e90:	2000ae80 	.word	0x2000ae80
  404e94:	2000ae8c 	.word	0x2000ae8c
  404e98:	2000ae90 	.word	0x2000ae90
  404e9c:	004040a5 	.word	0x004040a5
  404ea0:	2000ade0 	.word	0x2000ade0
  404ea4:	2000ae84 	.word	0x2000ae84

00404ea8 <prvWriteNameToBuffer>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )

	static char *prvWriteNameToBuffer( char *pcBuffer, const char *pcTaskName )
	{
  404ea8:	b510      	push	{r4, lr}
  404eaa:	4604      	mov	r4, r0
	size_t x;

		/* Start by copying the entire string. */
		strcpy( pcBuffer, pcTaskName );
  404eac:	4b09      	ldr	r3, [pc, #36]	; (404ed4 <prvWriteNameToBuffer+0x2c>)
  404eae:	4798      	blx	r3

		/* Pad the end of the string with spaces to ensure columns line up when
		printed out. */
		for( x = strlen( pcBuffer ); x < ( size_t ) ( configMAX_TASK_NAME_LEN - 1 ); x++ )
  404eb0:	4620      	mov	r0, r4
  404eb2:	4b09      	ldr	r3, [pc, #36]	; (404ed8 <prvWriteNameToBuffer+0x30>)
  404eb4:	4798      	blx	r3
  404eb6:	2808      	cmp	r0, #8
  404eb8:	d808      	bhi.n	404ecc <prvWriteNameToBuffer+0x24>
  404eba:	4420      	add	r0, r4
  404ebc:	f104 0209 	add.w	r2, r4, #9
		{
			pcBuffer[ x ] = ' ';
  404ec0:	2320      	movs	r3, #32
  404ec2:	f800 3b01 	strb.w	r3, [r0], #1
		/* Start by copying the entire string. */
		strcpy( pcBuffer, pcTaskName );

		/* Pad the end of the string with spaces to ensure columns line up when
		printed out. */
		for( x = strlen( pcBuffer ); x < ( size_t ) ( configMAX_TASK_NAME_LEN - 1 ); x++ )
  404ec6:	4290      	cmp	r0, r2
  404ec8:	d1fb      	bne.n	404ec2 <prvWriteNameToBuffer+0x1a>
  404eca:	2009      	movs	r0, #9
		{
			pcBuffer[ x ] = ' ';
		}

		/* Terminate. */
		pcBuffer[ x ] = 0x00;
  404ecc:	2300      	movs	r3, #0
  404ece:	5423      	strb	r3, [r4, r0]

		/* Return the new end of string. */
		return &( pcBuffer[ x ] );
	}
  404ed0:	4420      	add	r0, r4
  404ed2:	bd10      	pop	{r4, pc}
  404ed4:	00406d55 	.word	0x00406d55
  404ed8:	00406e11 	.word	0x00406e11

00404edc <xTaskGenericCreate>:

#endif
/*-----------------------------------------------------------*/

BaseType_t xTaskGenericCreate( TaskFunction_t pxTaskCode, const char * const pcName, const uint16_t usStackDepth, void * const pvParameters, UBaseType_t uxPriority, TaskHandle_t * const pxCreatedTask, StackType_t * const puxStackBuffer, const MemoryRegion_t * const xRegions ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
  404edc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  404ee0:	b083      	sub	sp, #12
  404ee2:	9301      	str	r3, [sp, #4]
  404ee4:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
  404ee8:	f8dd a034 	ldr.w	sl, [sp, #52]	; 0x34
  404eec:	9d0e      	ldr	r5, [sp, #56]	; 0x38
BaseType_t xReturn;
TCB_t * pxNewTCB;
StackType_t *pxTopOfStack;

	configASSERT( pxTaskCode );
  404eee:	9000      	str	r0, [sp, #0]
  404ef0:	b910      	cbnz	r0, 404ef8 <xTaskGenericCreate+0x1c>
  404ef2:	4b60      	ldr	r3, [pc, #384]	; (405074 <xTaskGenericCreate+0x198>)
  404ef4:	4798      	blx	r3
  404ef6:	e7fe      	b.n	404ef6 <xTaskGenericCreate+0x1a>
  404ef8:	460e      	mov	r6, r1
  404efa:	4617      	mov	r7, r2
	configASSERT( ( ( uxPriority & ( UBaseType_t ) ( ~portPRIVILEGE_BIT ) ) < ( UBaseType_t ) configMAX_PRIORITIES ) );
  404efc:	f1b8 0f04 	cmp.w	r8, #4
  404f00:	d902      	bls.n	404f08 <xTaskGenericCreate+0x2c>
  404f02:	4b5c      	ldr	r3, [pc, #368]	; (405074 <xTaskGenericCreate+0x198>)
  404f04:	4798      	blx	r3
  404f06:	e7fe      	b.n	404f06 <xTaskGenericCreate+0x2a>
	#else /* portSTACK_GROWTH */
	{
	StackType_t *pxStack;

		/* Allocate space for the stack used by the task being created. */
		pxStack = ( StackType_t * ) pvPortMallocAligned( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ), puxStackBuffer ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  404f08:	b935      	cbnz	r5, 404f18 <xTaskGenericCreate+0x3c>
  404f0a:	0090      	lsls	r0, r2, #2
  404f0c:	4b5a      	ldr	r3, [pc, #360]	; (405078 <xTaskGenericCreate+0x19c>)
  404f0e:	4798      	blx	r3

		if( pxStack != NULL )
  404f10:	4605      	mov	r5, r0
  404f12:	2800      	cmp	r0, #0
  404f14:	f000 80a9 	beq.w	40506a <xTaskGenericCreate+0x18e>
		{
			/* Allocate space for the TCB.  Where the memory comes from depends
			on the implementation of the port malloc function. */
			pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
  404f18:	205c      	movs	r0, #92	; 0x5c
  404f1a:	4b57      	ldr	r3, [pc, #348]	; (405078 <xTaskGenericCreate+0x19c>)
  404f1c:	4798      	blx	r3

			if( pxNewTCB != NULL )
  404f1e:	4604      	mov	r4, r0
  404f20:	b198      	cbz	r0, 404f4a <xTaskGenericCreate+0x6e>
			{
				/* Store the stack location in the TCB. */
				pxNewTCB->pxStack = pxStack;
  404f22:	6305      	str	r5, [r0, #48]	; 0x30
	{
		/* Avoid dependency on memset() if it is not required. */
		#if( ( configCHECK_FOR_STACK_OVERFLOW > 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )
		{
			/* Just to help debugging. */
			( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) usStackDepth * sizeof( StackType_t ) );
  404f24:	4628      	mov	r0, r5
  404f26:	21a5      	movs	r1, #165	; 0xa5
  404f28:	00ba      	lsls	r2, r7, #2
  404f2a:	4b54      	ldr	r3, [pc, #336]	; (40507c <xTaskGenericCreate+0x1a0>)
  404f2c:	4798      	blx	r3
		stack grows from high memory to low (as per the 80x86) or vice versa.
		portSTACK_GROWTH is used to make the result positive or negative as
		required by the port. */
		#if( portSTACK_GROWTH < 0 )
		{
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( uint16_t ) 1 );
  404f2e:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
  404f32:	3f01      	subs	r7, #1
  404f34:	6b23      	ldr	r3, [r4, #48]	; 0x30
  404f36:	eb03 0787 	add.w	r7, r3, r7, lsl #2
			pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
  404f3a:	f027 0507 	bic.w	r5, r7, #7
UBaseType_t x;

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
	{
		pxTCB->pcTaskName[ x ] = pcName[ x ];
  404f3e:	7833      	ldrb	r3, [r6, #0]
  404f40:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
  404f44:	7833      	ldrb	r3, [r6, #0]
  404f46:	b923      	cbnz	r3, 404f52 <xTaskGenericCreate+0x76>
  404f48:	e00f      	b.n	404f6a <xTaskGenericCreate+0x8e>
			}
			else
			{
				/* The stack cannot be used as the TCB was not created.  Free it
				again. */
				vPortFree( pxStack );
  404f4a:	4628      	mov	r0, r5
  404f4c:	4b4c      	ldr	r3, [pc, #304]	; (405080 <xTaskGenericCreate+0x1a4>)
  404f4e:	4798      	blx	r3
  404f50:	e08b      	b.n	40506a <xTaskGenericCreate+0x18e>
  404f52:	4633      	mov	r3, r6
  404f54:	f104 0234 	add.w	r2, r4, #52	; 0x34
  404f58:	3609      	adds	r6, #9
UBaseType_t x;

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
	{
		pxTCB->pcTaskName[ x ] = pcName[ x ];
  404f5a:	f813 1f01 	ldrb.w	r1, [r3, #1]!
  404f5e:	f802 1f01 	strb.w	r1, [r2, #1]!

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
  404f62:	7819      	ldrb	r1, [r3, #0]
  404f64:	b109      	cbz	r1, 404f6a <xTaskGenericCreate+0x8e>
static void prvInitialiseTCBVariables( TCB_t * const pxTCB, const char * const pcName, UBaseType_t uxPriority, const MemoryRegion_t * const xRegions, const uint16_t usStackDepth ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
UBaseType_t x;

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
  404f66:	42b3      	cmp	r3, r6
  404f68:	d1f7      	bne.n	404f5a <xTaskGenericCreate+0x7e>
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
  404f6a:	2600      	movs	r6, #0
  404f6c:	f884 603d 	strb.w	r6, [r4, #61]	; 0x3d
  404f70:	4647      	mov	r7, r8
  404f72:	2f04      	cmp	r7, #4
  404f74:	bf28      	it	cs
  404f76:	2704      	movcs	r7, #4
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxTCB->uxPriority = uxPriority;
  404f78:	62e7      	str	r7, [r4, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxTCB->uxBasePriority = uxPriority;
  404f7a:	64a7      	str	r7, [r4, #72]	; 0x48
		pxTCB->uxMutexesHeld = 0;
  404f7c:	64e6      	str	r6, [r4, #76]	; 0x4c
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
  404f7e:	f104 0904 	add.w	r9, r4, #4
  404f82:	4648      	mov	r0, r9
  404f84:	f8df b148 	ldr.w	fp, [pc, #328]	; 4050d0 <xTaskGenericCreate+0x1f4>
  404f88:	47d8      	blx	fp
	vListInitialiseItem( &( pxTCB->xEventListItem ) );
  404f8a:	f104 0018 	add.w	r0, r4, #24
  404f8e:	47d8      	blx	fp

	/* Set the pxTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );
  404f90:	6124      	str	r4, [r4, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  404f92:	f1c7 0705 	rsb	r7, r7, #5
  404f96:	61a7      	str	r7, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
  404f98:	6264      	str	r4, [r4, #36]	; 0x24
	}
	#endif /* configUSE_APPLICATION_TASK_TAG */

	#if ( configGENERATE_RUN_TIME_STATS == 1 )
	{
		pxTCB->ulRunTimeCounter = 0UL;
  404f9a:	6526      	str	r6, [r4, #80]	; 0x50
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxTCB->ulNotifiedValue = 0;
  404f9c:	6566      	str	r6, [r4, #84]	; 0x54
		pxTCB->eNotifyState = eNotWaitingNotification;
  404f9e:	f884 6058 	strb.w	r6, [r4, #88]	; 0x58
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
		}
		#else /* portUSING_MPU_WRAPPERS */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
  404fa2:	4628      	mov	r0, r5
  404fa4:	9900      	ldr	r1, [sp, #0]
  404fa6:	9a01      	ldr	r2, [sp, #4]
  404fa8:	4b36      	ldr	r3, [pc, #216]	; (405084 <xTaskGenericCreate+0x1a8>)
  404faa:	4798      	blx	r3
  404fac:	6020      	str	r0, [r4, #0]
		}
		#endif /* portUSING_MPU_WRAPPERS */

		if( ( void * ) pxCreatedTask != NULL )
  404fae:	f1ba 0f00 	cmp.w	sl, #0
  404fb2:	d001      	beq.n	404fb8 <xTaskGenericCreate+0xdc>
		{
			/* Pass the TCB out - in an anonymous way.  The calling function/
			task can use this as a handle to delete the task later if
			required.*/
			*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
  404fb4:	f8ca 4000 	str.w	r4, [sl]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Ensure interrupts don't access the task lists while they are being
		updated. */
		taskENTER_CRITICAL();
  404fb8:	4b33      	ldr	r3, [pc, #204]	; (405088 <xTaskGenericCreate+0x1ac>)
  404fba:	4798      	blx	r3
		{
			uxCurrentNumberOfTasks++;
  404fbc:	4a33      	ldr	r2, [pc, #204]	; (40508c <xTaskGenericCreate+0x1b0>)
  404fbe:	6813      	ldr	r3, [r2, #0]
  404fc0:	3301      	adds	r3, #1
  404fc2:	6013      	str	r3, [r2, #0]
			if( pxCurrentTCB == NULL )
  404fc4:	4b32      	ldr	r3, [pc, #200]	; (405090 <xTaskGenericCreate+0x1b4>)
  404fc6:	681b      	ldr	r3, [r3, #0]
  404fc8:	b9fb      	cbnz	r3, 40500a <xTaskGenericCreate+0x12e>
			{
				/* There are no other tasks, or all the other tasks are in
				the suspended state - make this the current task. */
				pxCurrentTCB =  pxNewTCB;
  404fca:	4b31      	ldr	r3, [pc, #196]	; (405090 <xTaskGenericCreate+0x1b4>)
  404fcc:	601c      	str	r4, [r3, #0]

				if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
  404fce:	6813      	ldr	r3, [r2, #0]
  404fd0:	2b01      	cmp	r3, #1
  404fd2:	d124      	bne.n	40501e <xTaskGenericCreate+0x142>
  404fd4:	4d2f      	ldr	r5, [pc, #188]	; (405094 <xTaskGenericCreate+0x1b8>)
  404fd6:	f105 0764 	add.w	r7, r5, #100	; 0x64
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
  404fda:	4e2f      	ldr	r6, [pc, #188]	; (405098 <xTaskGenericCreate+0x1bc>)
  404fdc:	4628      	mov	r0, r5
  404fde:	47b0      	blx	r6
  404fe0:	3514      	adds	r5, #20

static void prvInitialiseTaskLists( void )
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
  404fe2:	42bd      	cmp	r5, r7
  404fe4:	d1fa      	bne.n	404fdc <xTaskGenericCreate+0x100>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
	}

	vListInitialise( &xDelayedTaskList1 );
  404fe6:	4f2d      	ldr	r7, [pc, #180]	; (40509c <xTaskGenericCreate+0x1c0>)
  404fe8:	4638      	mov	r0, r7
  404fea:	4d2b      	ldr	r5, [pc, #172]	; (405098 <xTaskGenericCreate+0x1bc>)
  404fec:	47a8      	blx	r5
	vListInitialise( &xDelayedTaskList2 );
  404fee:	4e2c      	ldr	r6, [pc, #176]	; (4050a0 <xTaskGenericCreate+0x1c4>)
  404ff0:	4630      	mov	r0, r6
  404ff2:	47a8      	blx	r5
	vListInitialise( &xPendingReadyList );
  404ff4:	482b      	ldr	r0, [pc, #172]	; (4050a4 <xTaskGenericCreate+0x1c8>)
  404ff6:	47a8      	blx	r5

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
  404ff8:	482b      	ldr	r0, [pc, #172]	; (4050a8 <xTaskGenericCreate+0x1cc>)
  404ffa:	47a8      	blx	r5
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
  404ffc:	482b      	ldr	r0, [pc, #172]	; (4050ac <xTaskGenericCreate+0x1d0>)
  404ffe:	47a8      	blx	r5
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
  405000:	4b2b      	ldr	r3, [pc, #172]	; (4050b0 <xTaskGenericCreate+0x1d4>)
  405002:	601f      	str	r7, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
  405004:	4b2b      	ldr	r3, [pc, #172]	; (4050b4 <xTaskGenericCreate+0x1d8>)
  405006:	601e      	str	r6, [r3, #0]
  405008:	e009      	b.n	40501e <xTaskGenericCreate+0x142>
			else
			{
				/* If the scheduler is not already running, make this task the
				current task if it is the highest priority task to be created
				so far. */
				if( xSchedulerRunning == pdFALSE )
  40500a:	4b2b      	ldr	r3, [pc, #172]	; (4050b8 <xTaskGenericCreate+0x1dc>)
  40500c:	681b      	ldr	r3, [r3, #0]
  40500e:	b933      	cbnz	r3, 40501e <xTaskGenericCreate+0x142>
				{
					if( pxCurrentTCB->uxPriority <= uxPriority )
  405010:	4b1f      	ldr	r3, [pc, #124]	; (405090 <xTaskGenericCreate+0x1b4>)
  405012:	681b      	ldr	r3, [r3, #0]
  405014:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  405016:	4598      	cmp	r8, r3
					{
						pxCurrentTCB = pxNewTCB;
  405018:	bf24      	itt	cs
  40501a:	4b1d      	ldrcs	r3, [pc, #116]	; (405090 <xTaskGenericCreate+0x1b4>)
  40501c:	601c      	strcs	r4, [r3, #0]
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}

			uxTaskNumber++;
  40501e:	4a27      	ldr	r2, [pc, #156]	; (4050bc <xTaskGenericCreate+0x1e0>)
  405020:	6813      	ldr	r3, [r2, #0]
  405022:	3301      	adds	r3, #1
  405024:	6013      	str	r3, [r2, #0]

			#if ( configUSE_TRACE_FACILITY == 1 )
			{
				/* Add a counter into the TCB for tracing only. */
				pxNewTCB->uxTCBNumber = uxTaskNumber;
  405026:	6423      	str	r3, [r4, #64]	; 0x40
			}
			#endif /* configUSE_TRACE_FACILITY */
			traceTASK_CREATE( pxNewTCB );

			prvAddTaskToReadyList( pxNewTCB );
  405028:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  40502a:	4925      	ldr	r1, [pc, #148]	; (4050c0 <xTaskGenericCreate+0x1e4>)
  40502c:	680b      	ldr	r3, [r1, #0]
  40502e:	2201      	movs	r2, #1
  405030:	4082      	lsls	r2, r0
  405032:	4313      	orrs	r3, r2
  405034:	600b      	str	r3, [r1, #0]
  405036:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  40503a:	4b16      	ldr	r3, [pc, #88]	; (405094 <xTaskGenericCreate+0x1b8>)
  40503c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  405040:	4649      	mov	r1, r9
  405042:	4b20      	ldr	r3, [pc, #128]	; (4050c4 <xTaskGenericCreate+0x1e8>)
  405044:	4798      	blx	r3

			xReturn = pdPASS;
			portSETUP_TCB( pxNewTCB );
		}
		taskEXIT_CRITICAL();
  405046:	4b20      	ldr	r3, [pc, #128]	; (4050c8 <xTaskGenericCreate+0x1ec>)
  405048:	4798      	blx	r3
		traceTASK_CREATE_FAILED();
	}

	if( xReturn == pdPASS )
	{
		if( xSchedulerRunning != pdFALSE )
  40504a:	4b1b      	ldr	r3, [pc, #108]	; (4050b8 <xTaskGenericCreate+0x1dc>)
  40504c:	681b      	ldr	r3, [r3, #0]
  40504e:	b143      	cbz	r3, 405062 <xTaskGenericCreate+0x186>
		{
			/* If the created task is of a higher priority than the current task
			then it should run now. */
			if( pxCurrentTCB->uxPriority < uxPriority )
  405050:	4b0f      	ldr	r3, [pc, #60]	; (405090 <xTaskGenericCreate+0x1b4>)
  405052:	681b      	ldr	r3, [r3, #0]
  405054:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  405056:	4598      	cmp	r8, r3
  405058:	d905      	bls.n	405066 <xTaskGenericCreate+0x18a>
			{
				taskYIELD_IF_USING_PREEMPTION();
  40505a:	4b1c      	ldr	r3, [pc, #112]	; (4050cc <xTaskGenericCreate+0x1f0>)
  40505c:	4798      	blx	r3
			#endif /* configUSE_TRACE_FACILITY */
			traceTASK_CREATE( pxNewTCB );

			prvAddTaskToReadyList( pxNewTCB );

			xReturn = pdPASS;
  40505e:	2001      	movs	r0, #1
  405060:	e005      	b.n	40506e <xTaskGenericCreate+0x192>
  405062:	2001      	movs	r0, #1
  405064:	e003      	b.n	40506e <xTaskGenericCreate+0x192>
  405066:	2001      	movs	r0, #1
  405068:	e001      	b.n	40506e <xTaskGenericCreate+0x192>
		}
		taskEXIT_CRITICAL();
	}
	else
	{
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
  40506a:	f04f 30ff 	mov.w	r0, #4294967295
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xReturn;
}
  40506e:	b003      	add	sp, #12
  405070:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  405074:	00404179 	.word	0x00404179
  405078:	00404405 	.word	0x00404405
  40507c:	00406c6d 	.word	0x00406c6d
  405080:	0040453d 	.word	0x0040453d
  405084:	0040411d 	.word	0x0040411d
  405088:	004041a9 	.word	0x004041a9
  40508c:	2000aeac 	.word	0x2000aeac
  405090:	2000ae80 	.word	0x2000ae80
  405094:	2000ae04 	.word	0x2000ae04
  405098:	0040406d 	.word	0x0040406d
  40509c:	2000adec 	.word	0x2000adec
  4050a0:	2000aeb0 	.word	0x2000aeb0
  4050a4:	2000ae94 	.word	0x2000ae94
  4050a8:	2000ae68 	.word	0x2000ae68
  4050ac:	2000aec4 	.word	0x2000aec4
  4050b0:	2000ade0 	.word	0x2000ade0
  4050b4:	2000ae90 	.word	0x2000ae90
  4050b8:	2000ade4 	.word	0x2000ade4
  4050bc:	2000aea8 	.word	0x2000aea8
  4050c0:	2000aed8 	.word	0x2000aed8
  4050c4:	0040408d 	.word	0x0040408d
  4050c8:	004041e9 	.word	0x004041e9
  4050cc:	00404161 	.word	0x00404161
  4050d0:	00404085 	.word	0x00404085

004050d4 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
  4050d4:	b538      	push	{r3, r4, r5, lr}
  4050d6:	4604      	mov	r4, r0
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
  4050d8:	4b21      	ldr	r3, [pc, #132]	; (405160 <vTaskDelete+0x8c>)
  4050da:	4798      	blx	r3
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
  4050dc:	b90c      	cbnz	r4, 4050e2 <vTaskDelete+0xe>
  4050de:	4b21      	ldr	r3, [pc, #132]	; (405164 <vTaskDelete+0x90>)
  4050e0:	681c      	ldr	r4, [r3, #0]

			/* Remove task from the ready list and place in the	termination list.
			This will stop the task from be scheduled.  The idle task will check
			the termination list and free up any memory allocated by the
			scheduler for the TCB and stack. */
			if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
  4050e2:	1d25      	adds	r5, r4, #4
  4050e4:	4628      	mov	r0, r5
  4050e6:	4b20      	ldr	r3, [pc, #128]	; (405168 <vTaskDelete+0x94>)
  4050e8:	4798      	blx	r3
  4050ea:	b968      	cbnz	r0, 405108 <vTaskDelete+0x34>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
  4050ec:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
  4050ee:	eb01 0281 	add.w	r2, r1, r1, lsl #2
  4050f2:	4b1e      	ldr	r3, [pc, #120]	; (40516c <vTaskDelete+0x98>)
  4050f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  4050f8:	b933      	cbnz	r3, 405108 <vTaskDelete+0x34>
  4050fa:	481d      	ldr	r0, [pc, #116]	; (405170 <vTaskDelete+0x9c>)
  4050fc:	6803      	ldr	r3, [r0, #0]
  4050fe:	2201      	movs	r2, #1
  405100:	408a      	lsls	r2, r1
  405102:	ea23 0302 	bic.w	r3, r3, r2
  405106:	6003      	str	r3, [r0, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
  405108:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  40510a:	b11b      	cbz	r3, 405114 <vTaskDelete+0x40>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
  40510c:	f104 0018 	add.w	r0, r4, #24
  405110:	4b15      	ldr	r3, [pc, #84]	; (405168 <vTaskDelete+0x94>)
  405112:	4798      	blx	r3
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xGenericListItem ) );
  405114:	4817      	ldr	r0, [pc, #92]	; (405174 <vTaskDelete+0xa0>)
  405116:	4629      	mov	r1, r5
  405118:	4b17      	ldr	r3, [pc, #92]	; (405178 <vTaskDelete+0xa4>)
  40511a:	4798      	blx	r3

			/* Increment the ucTasksDeleted variable so the idle task knows
			there is a task that has been deleted and that it should therefore
			check the xTasksWaitingTermination list. */
			++uxTasksDeleted;
  40511c:	4a17      	ldr	r2, [pc, #92]	; (40517c <vTaskDelete+0xa8>)
  40511e:	6813      	ldr	r3, [r2, #0]
  405120:	3301      	adds	r3, #1
  405122:	6013      	str	r3, [r2, #0]

			/* Increment the uxTaskNumberVariable also so kernel aware debuggers
			can detect that the task lists need re-generating. */
			uxTaskNumber++;
  405124:	4a16      	ldr	r2, [pc, #88]	; (405180 <vTaskDelete+0xac>)
  405126:	6813      	ldr	r3, [r2, #0]
  405128:	3301      	adds	r3, #1
  40512a:	6013      	str	r3, [r2, #0]

			traceTASK_DELETE( pxTCB );
		}
		taskEXIT_CRITICAL();
  40512c:	4b15      	ldr	r3, [pc, #84]	; (405184 <vTaskDelete+0xb0>)
  40512e:	4798      	blx	r3

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
  405130:	4b15      	ldr	r3, [pc, #84]	; (405188 <vTaskDelete+0xb4>)
  405132:	681b      	ldr	r3, [r3, #0]
  405134:	b193      	cbz	r3, 40515c <vTaskDelete+0x88>
		{
			if( pxTCB == pxCurrentTCB )
  405136:	4b0b      	ldr	r3, [pc, #44]	; (405164 <vTaskDelete+0x90>)
  405138:	681b      	ldr	r3, [r3, #0]
  40513a:	429c      	cmp	r4, r3
  40513c:	d108      	bne.n	405150 <vTaskDelete+0x7c>
			{
				configASSERT( uxSchedulerSuspended == 0 );
  40513e:	4b13      	ldr	r3, [pc, #76]	; (40518c <vTaskDelete+0xb8>)
  405140:	681b      	ldr	r3, [r3, #0]
  405142:	b113      	cbz	r3, 40514a <vTaskDelete+0x76>
  405144:	4b12      	ldr	r3, [pc, #72]	; (405190 <vTaskDelete+0xbc>)
  405146:	4798      	blx	r3
  405148:	e7fe      	b.n	405148 <vTaskDelete+0x74>
				in which Windows specific clean up operations are performed,
				after which it is not possible to yield away from this task -
				hence xYieldPending is used to latch that a context switch is
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
				portYIELD_WITHIN_API();
  40514a:	4b12      	ldr	r3, [pc, #72]	; (405194 <vTaskDelete+0xc0>)
  40514c:	4798      	blx	r3
  40514e:	bd38      	pop	{r3, r4, r5, pc}
			}
			else
			{
				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				taskENTER_CRITICAL();
  405150:	4b03      	ldr	r3, [pc, #12]	; (405160 <vTaskDelete+0x8c>)
  405152:	4798      	blx	r3
				{
					prvResetNextTaskUnblockTime();
  405154:	4b10      	ldr	r3, [pc, #64]	; (405198 <vTaskDelete+0xc4>)
  405156:	4798      	blx	r3
				}
				taskEXIT_CRITICAL();
  405158:	4b0a      	ldr	r3, [pc, #40]	; (405184 <vTaskDelete+0xb0>)
  40515a:	4798      	blx	r3
  40515c:	bd38      	pop	{r3, r4, r5, pc}
  40515e:	bf00      	nop
  405160:	004041a9 	.word	0x004041a9
  405164:	2000ae80 	.word	0x2000ae80
  405168:	004040d9 	.word	0x004040d9
  40516c:	2000ae04 	.word	0x2000ae04
  405170:	2000aed8 	.word	0x2000aed8
  405174:	2000ae68 	.word	0x2000ae68
  405178:	0040408d 	.word	0x0040408d
  40517c:	2000ade8 	.word	0x2000ade8
  405180:	2000aea8 	.word	0x2000aea8
  405184:	004041e9 	.word	0x004041e9
  405188:	2000ade4 	.word	0x2000ade4
  40518c:	2000ae88 	.word	0x2000ae88
  405190:	00404179 	.word	0x00404179
  405194:	00404161 	.word	0x00404161
  405198:	00404e25 	.word	0x00404e25

0040519c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
  40519c:	b510      	push	{r4, lr}
  40519e:	b084      	sub	sp, #16
		xReturn = xTaskCreate( prvIdleTask, "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), &xIdleTaskHandle ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */
	}
	#else
	{
		/* Create the idle task without storing its handle. */
		xReturn = xTaskCreate( prvIdleTask, "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), NULL );  /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */
  4051a0:	2300      	movs	r3, #0
  4051a2:	9300      	str	r3, [sp, #0]
  4051a4:	9301      	str	r3, [sp, #4]
  4051a6:	9302      	str	r3, [sp, #8]
  4051a8:	9303      	str	r3, [sp, #12]
  4051aa:	4811      	ldr	r0, [pc, #68]	; (4051f0 <vTaskStartScheduler+0x54>)
  4051ac:	4911      	ldr	r1, [pc, #68]	; (4051f4 <vTaskStartScheduler+0x58>)
  4051ae:	2282      	movs	r2, #130	; 0x82
  4051b0:	4c11      	ldr	r4, [pc, #68]	; (4051f8 <vTaskStartScheduler+0x5c>)
  4051b2:	47a0      	blx	r4
	}
	#endif /* INCLUDE_xTaskGetIdleTaskHandle */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
  4051b4:	2801      	cmp	r0, #1
  4051b6:	d114      	bne.n	4051e2 <vTaskStartScheduler+0x46>
		{
			xReturn = xTimerCreateTimerTask();
  4051b8:	4b10      	ldr	r3, [pc, #64]	; (4051fc <vTaskStartScheduler+0x60>)
  4051ba:	4798      	blx	r3
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
  4051bc:	2801      	cmp	r0, #1
  4051be:	d110      	bne.n	4051e2 <vTaskStartScheduler+0x46>
		/* Interrupts are turned off here, to ensure a tick does not occur
		before or during the call to xPortStartScheduler().  The stacks of
		the created tasks contain a status word with interrupts switched on
		so interrupts will automatically get re-enabled when the first task
		starts to run. */
		portDISABLE_INTERRUPTS();
  4051c0:	4b0f      	ldr	r3, [pc, #60]	; (405200 <vTaskStartScheduler+0x64>)
  4051c2:	4798      	blx	r3
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
  4051c4:	f04f 32ff 	mov.w	r2, #4294967295
  4051c8:	4b0e      	ldr	r3, [pc, #56]	; (405204 <vTaskStartScheduler+0x68>)
  4051ca:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
  4051cc:	2201      	movs	r2, #1
  4051ce:	4b0e      	ldr	r3, [pc, #56]	; (405208 <vTaskStartScheduler+0x6c>)
  4051d0:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
  4051d2:	2200      	movs	r2, #0
  4051d4:	4b0d      	ldr	r3, [pc, #52]	; (40520c <vTaskStartScheduler+0x70>)
  4051d6:	601a      	str	r2, [r3, #0]

		/* If configGENERATE_RUN_TIME_STATS is defined then the following
		macro must be defined to configure the timer/counter used to generate
		the run time counter time base. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
  4051d8:	4b0d      	ldr	r3, [pc, #52]	; (405210 <vTaskStartScheduler+0x74>)
  4051da:	4798      	blx	r3

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
  4051dc:	4b0d      	ldr	r3, [pc, #52]	; (405214 <vTaskStartScheduler+0x78>)
  4051de:	4798      	blx	r3
  4051e0:	e003      	b.n	4051ea <vTaskStartScheduler+0x4e>
	else
	{
		/* This line will only be reached if the kernel could not be started,
		because there was not enough FreeRTOS heap to create the idle task
		or the timer task. */
		configASSERT( xReturn );
  4051e2:	b910      	cbnz	r0, 4051ea <vTaskStartScheduler+0x4e>
  4051e4:	4b06      	ldr	r3, [pc, #24]	; (405200 <vTaskStartScheduler+0x64>)
  4051e6:	4798      	blx	r3
  4051e8:	e7fe      	b.n	4051e8 <vTaskStartScheduler+0x4c>
	}
}
  4051ea:	b004      	add	sp, #16
  4051ec:	bd10      	pop	{r4, pc}
  4051ee:	bf00      	nop
  4051f0:	004054fd 	.word	0x004054fd
  4051f4:	0040bab4 	.word	0x0040bab4
  4051f8:	00404edd 	.word	0x00404edd
  4051fc:	00405d35 	.word	0x00405d35
  405200:	00404179 	.word	0x00404179
  405204:	2000ae84 	.word	0x2000ae84
  405208:	2000ade4 	.word	0x2000ade4
  40520c:	2000ae8c 	.word	0x2000ae8c
  405210:	00406985 	.word	0x00406985
  405214:	004042b1 	.word	0x004042b1

00405218 <vTaskSuspendAll>:
{
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
  405218:	4a02      	ldr	r2, [pc, #8]	; (405224 <vTaskSuspendAll+0xc>)
  40521a:	6813      	ldr	r3, [r2, #0]
  40521c:	3301      	adds	r3, #1
  40521e:	6013      	str	r3, [r2, #0]
  405220:	4770      	bx	lr
  405222:	bf00      	nop
  405224:	2000ae88 	.word	0x2000ae88

00405228 <xTaskGetTickCount>:
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
  405228:	4b01      	ldr	r3, [pc, #4]	; (405230 <xTaskGetTickCount+0x8>)
  40522a:	6818      	ldr	r0, [r3, #0]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
}
  40522c:	4770      	bx	lr
  40522e:	bf00      	nop
  405230:	2000ae8c 	.word	0x2000ae8c

00405234 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
  405234:	b508      	push	{r3, lr}
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
  405236:	4b02      	ldr	r3, [pc, #8]	; (405240 <xTaskGetTickCountFromISR+0xc>)
  405238:	4798      	blx	r3

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
	{
		xReturn = xTickCount;
  40523a:	4b02      	ldr	r3, [pc, #8]	; (405244 <xTaskGetTickCountFromISR+0x10>)
  40523c:	6818      	ldr	r0, [r3, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
}
  40523e:	bd08      	pop	{r3, pc}
  405240:	00404361 	.word	0x00404361
  405244:	2000ae8c 	.word	0x2000ae8c

00405248 <xTaskIncrementTick>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
  405248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
  40524c:	4b3d      	ldr	r3, [pc, #244]	; (405344 <xTaskIncrementTick+0xfc>)
  40524e:	681b      	ldr	r3, [r3, #0]
  405250:	2b00      	cmp	r3, #0
  405252:	d167      	bne.n	405324 <xTaskIncrementTick+0xdc>
	{
		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		++xTickCount;
  405254:	4b3c      	ldr	r3, [pc, #240]	; (405348 <xTaskIncrementTick+0x100>)
  405256:	681a      	ldr	r2, [r3, #0]
  405258:	3201      	adds	r2, #1
  40525a:	601a      	str	r2, [r3, #0]

		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
  40525c:	681e      	ldr	r6, [r3, #0]

			if( xConstTickCount == ( TickType_t ) 0U )
  40525e:	b996      	cbnz	r6, 405286 <xTaskIncrementTick+0x3e>
			{
				taskSWITCH_DELAYED_LISTS();
  405260:	4b3a      	ldr	r3, [pc, #232]	; (40534c <xTaskIncrementTick+0x104>)
  405262:	681b      	ldr	r3, [r3, #0]
  405264:	681b      	ldr	r3, [r3, #0]
  405266:	b113      	cbz	r3, 40526e <xTaskIncrementTick+0x26>
  405268:	4b39      	ldr	r3, [pc, #228]	; (405350 <xTaskIncrementTick+0x108>)
  40526a:	4798      	blx	r3
  40526c:	e7fe      	b.n	40526c <xTaskIncrementTick+0x24>
  40526e:	4a37      	ldr	r2, [pc, #220]	; (40534c <xTaskIncrementTick+0x104>)
  405270:	6811      	ldr	r1, [r2, #0]
  405272:	4b38      	ldr	r3, [pc, #224]	; (405354 <xTaskIncrementTick+0x10c>)
  405274:	6818      	ldr	r0, [r3, #0]
  405276:	6010      	str	r0, [r2, #0]
  405278:	6019      	str	r1, [r3, #0]
  40527a:	4a37      	ldr	r2, [pc, #220]	; (405358 <xTaskIncrementTick+0x110>)
  40527c:	6813      	ldr	r3, [r2, #0]
  40527e:	3301      	adds	r3, #1
  405280:	6013      	str	r3, [r2, #0]
  405282:	4b36      	ldr	r3, [pc, #216]	; (40535c <xTaskIncrementTick+0x114>)
  405284:	4798      	blx	r3

			/* See if this tick has made a timeout expire.  Tasks are stored in
			the	queue in the order of their wake time - meaning once one task
			has been found whose block time has not expired there is no need to
			look any further down the list. */
			if( xConstTickCount >= xNextTaskUnblockTime )
  405286:	4b36      	ldr	r3, [pc, #216]	; (405360 <xTaskIncrementTick+0x118>)
  405288:	681b      	ldr	r3, [r3, #0]
  40528a:	429e      	cmp	r6, r3
  40528c:	d201      	bcs.n	405292 <xTaskIncrementTick+0x4a>

BaseType_t xTaskIncrementTick( void )
{
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
  40528e:	2400      	movs	r4, #0
  405290:	e037      	b.n	405302 <xTaskIncrementTick+0xba>
  405292:	2400      	movs	r4, #0
			look any further down the list. */
			if( xConstTickCount >= xNextTaskUnblockTime )
			{
				for( ;; )
				{
					if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
  405294:	f8df 90b4 	ldr.w	r9, [pc, #180]	; 40534c <xTaskIncrementTick+0x104>
						{
							mtCOVERAGE_TEST_MARKER();
						}

						/* It is time to remove the item from the Blocked state. */
						( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
  405298:	f8df 80e4 	ldr.w	r8, [pc, #228]	; 405380 <xTaskIncrementTick+0x138>
							mtCOVERAGE_TEST_MARKER();
						}

						/* Place the unblocked task into the appropriate ready
						list. */
						prvAddTaskToReadyList( pxTCB );
  40529c:	4f31      	ldr	r7, [pc, #196]	; (405364 <xTaskIncrementTick+0x11c>)
			look any further down the list. */
			if( xConstTickCount >= xNextTaskUnblockTime )
			{
				for( ;; )
				{
					if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
  40529e:	f8d9 3000 	ldr.w	r3, [r9]
  4052a2:	681b      	ldr	r3, [r3, #0]
  4052a4:	b923      	cbnz	r3, 4052b0 <xTaskIncrementTick+0x68>
						/* The delayed list is empty.  Set xNextTaskUnblockTime
						to the maximum possible value so it is extremely
						unlikely that the
						if( xTickCount >= xNextTaskUnblockTime ) test will pass
						next time through. */
						xNextTaskUnblockTime = portMAX_DELAY;
  4052a6:	f04f 32ff 	mov.w	r2, #4294967295
  4052aa:	4b2d      	ldr	r3, [pc, #180]	; (405360 <xTaskIncrementTick+0x118>)
  4052ac:	601a      	str	r2, [r3, #0]
						break;
  4052ae:	e028      	b.n	405302 <xTaskIncrementTick+0xba>
					{
						/* The delayed list is not empty, get the value of the
						item at the head of the delayed list.  This is the time
						at which the task at the head of the delayed list must
						be removed from the Blocked state. */
						pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
  4052b0:	f8d9 3000 	ldr.w	r3, [r9]
  4052b4:	68db      	ldr	r3, [r3, #12]
  4052b6:	68dd      	ldr	r5, [r3, #12]
						xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
  4052b8:	686b      	ldr	r3, [r5, #4]

						if( xConstTickCount < xItemValue )
  4052ba:	429e      	cmp	r6, r3
  4052bc:	d202      	bcs.n	4052c4 <xTaskIncrementTick+0x7c>
							/* It is not time to unblock this item yet, but the
							item value is the time at which the task at the head
							of the blocked list must be removed from the Blocked
							state -	so record the item value in
							xNextTaskUnblockTime. */
							xNextTaskUnblockTime = xItemValue;
  4052be:	4a28      	ldr	r2, [pc, #160]	; (405360 <xTaskIncrementTick+0x118>)
  4052c0:	6013      	str	r3, [r2, #0]
							break;
  4052c2:	e01e      	b.n	405302 <xTaskIncrementTick+0xba>
						{
							mtCOVERAGE_TEST_MARKER();
						}

						/* It is time to remove the item from the Blocked state. */
						( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
  4052c4:	f105 0a04 	add.w	sl, r5, #4
  4052c8:	4650      	mov	r0, sl
  4052ca:	47c0      	blx	r8

						/* Is the task waiting on an event also?  If so remove
						it from the event list. */
						if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
  4052cc:	6aab      	ldr	r3, [r5, #40]	; 0x28
  4052ce:	b113      	cbz	r3, 4052d6 <xTaskIncrementTick+0x8e>
						{
							( void ) uxListRemove( &( pxTCB->xEventListItem ) );
  4052d0:	f105 0018 	add.w	r0, r5, #24
  4052d4:	47c0      	blx	r8
							mtCOVERAGE_TEST_MARKER();
						}

						/* Place the unblocked task into the appropriate ready
						list. */
						prvAddTaskToReadyList( pxTCB );
  4052d6:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
  4052d8:	683b      	ldr	r3, [r7, #0]
  4052da:	2201      	movs	r2, #1
  4052dc:	4082      	lsls	r2, r0
  4052de:	4313      	orrs	r3, r2
  4052e0:	603b      	str	r3, [r7, #0]
  4052e2:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  4052e6:	4b20      	ldr	r3, [pc, #128]	; (405368 <xTaskIncrementTick+0x120>)
  4052e8:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  4052ec:	4651      	mov	r1, sl
  4052ee:	4b1f      	ldr	r3, [pc, #124]	; (40536c <xTaskIncrementTick+0x124>)
  4052f0:	4798      	blx	r3
						{
							/* Preemption is on, but a context switch should
							only be performed if the unblocked task has a
							priority that is equal to or higher than the
							currently executing task. */
							if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
  4052f2:	4b1f      	ldr	r3, [pc, #124]	; (405370 <xTaskIncrementTick+0x128>)
  4052f4:	681b      	ldr	r3, [r3, #0]
  4052f6:	6aea      	ldr	r2, [r5, #44]	; 0x2c
  4052f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
							{
								xSwitchRequired = pdTRUE;
  4052fa:	429a      	cmp	r2, r3
  4052fc:	bf28      	it	cs
  4052fe:	2401      	movcs	r4, #1
  405300:	e7cd      	b.n	40529e <xTaskIncrementTick+0x56>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
  405302:	4b1b      	ldr	r3, [pc, #108]	; (405370 <xTaskIncrementTick+0x128>)
  405304:	681b      	ldr	r3, [r3, #0]
  405306:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  405308:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  40530c:	4a16      	ldr	r2, [pc, #88]	; (405368 <xTaskIncrementTick+0x120>)
  40530e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
			{
				xSwitchRequired = pdTRUE;
  405312:	2b02      	cmp	r3, #2
  405314:	bf28      	it	cs
  405316:	2401      	movcs	r4, #1

		#if ( configUSE_TICK_HOOK == 1 )
		{
			/* Guard against the tick hook being called when the pended tick
			count is being unwound (when the scheduler is being unlocked). */
			if( uxPendedTicks == ( UBaseType_t ) 0U )
  405318:	4b16      	ldr	r3, [pc, #88]	; (405374 <xTaskIncrementTick+0x12c>)
  40531a:	681b      	ldr	r3, [r3, #0]
  40531c:	b94b      	cbnz	r3, 405332 <xTaskIncrementTick+0xea>
			{
				vApplicationTickHook();
  40531e:	4b16      	ldr	r3, [pc, #88]	; (405378 <xTaskIncrementTick+0x130>)
  405320:	4798      	blx	r3
  405322:	e006      	b.n	405332 <xTaskIncrementTick+0xea>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
  405324:	4a13      	ldr	r2, [pc, #76]	; (405374 <xTaskIncrementTick+0x12c>)
  405326:	6813      	ldr	r3, [r2, #0]
  405328:	3301      	adds	r3, #1
  40532a:	6013      	str	r3, [r2, #0]

		/* The tick hook gets called at regular intervals, even if the
		scheduler is locked. */
		#if ( configUSE_TICK_HOOK == 1 )
		{
			vApplicationTickHook();
  40532c:	4b12      	ldr	r3, [pc, #72]	; (405378 <xTaskIncrementTick+0x130>)
  40532e:	4798      	blx	r3

BaseType_t xTaskIncrementTick( void )
{
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
  405330:	2400      	movs	r4, #0
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
  405332:	4b12      	ldr	r3, [pc, #72]	; (40537c <xTaskIncrementTick+0x134>)
  405334:	681b      	ldr	r3, [r3, #0]
		{
			xSwitchRequired = pdTRUE;
  405336:	2b00      	cmp	r3, #0
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
}
  405338:	bf0c      	ite	eq
  40533a:	4620      	moveq	r0, r4
  40533c:	2001      	movne	r0, #1
  40533e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  405342:	bf00      	nop
  405344:	2000ae88 	.word	0x2000ae88
  405348:	2000ae8c 	.word	0x2000ae8c
  40534c:	2000ade0 	.word	0x2000ade0
  405350:	00404179 	.word	0x00404179
  405354:	2000ae90 	.word	0x2000ae90
  405358:	2000addc 	.word	0x2000addc
  40535c:	00404e25 	.word	0x00404e25
  405360:	2000ae84 	.word	0x2000ae84
  405364:	2000aed8 	.word	0x2000aed8
  405368:	2000ae04 	.word	0x2000ae04
  40536c:	0040408d 	.word	0x0040408d
  405370:	2000ae80 	.word	0x2000ae80
  405374:	2000ae00 	.word	0x2000ae00
  405378:	00406add 	.word	0x00406add
  40537c:	2000aedc 	.word	0x2000aedc
  405380:	004040d9 	.word	0x004040d9

00405384 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
  405384:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
TCB_t *pxTCB;
BaseType_t xAlreadyYielded = pdFALSE;

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
  405388:	4b2f      	ldr	r3, [pc, #188]	; (405448 <xTaskResumeAll+0xc4>)
  40538a:	681b      	ldr	r3, [r3, #0]
  40538c:	b913      	cbnz	r3, 405394 <xTaskResumeAll+0x10>
  40538e:	4b2f      	ldr	r3, [pc, #188]	; (40544c <xTaskResumeAll+0xc8>)
  405390:	4798      	blx	r3
  405392:	e7fe      	b.n	405392 <xTaskResumeAll+0xe>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
  405394:	4b2e      	ldr	r3, [pc, #184]	; (405450 <xTaskResumeAll+0xcc>)
  405396:	4798      	blx	r3
	{
		--uxSchedulerSuspended;
  405398:	4b2b      	ldr	r3, [pc, #172]	; (405448 <xTaskResumeAll+0xc4>)
  40539a:	681a      	ldr	r2, [r3, #0]
  40539c:	3a01      	subs	r2, #1
  40539e:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
  4053a0:	681b      	ldr	r3, [r3, #0]
  4053a2:	2b00      	cmp	r3, #0
  4053a4:	d147      	bne.n	405436 <xTaskResumeAll+0xb2>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
  4053a6:	4b2b      	ldr	r3, [pc, #172]	; (405454 <xTaskResumeAll+0xd0>)
  4053a8:	681b      	ldr	r3, [r3, #0]
  4053aa:	bb0b      	cbnz	r3, 4053f0 <xTaskResumeAll+0x6c>
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
TCB_t *pxTCB;
BaseType_t xAlreadyYielded = pdFALSE;
  4053ac:	2400      	movs	r4, #0
  4053ae:	e045      	b.n	40543c <xTaskResumeAll+0xb8>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
  4053b0:	68fb      	ldr	r3, [r7, #12]
  4053b2:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
  4053b4:	f104 0018 	add.w	r0, r4, #24
  4053b8:	47b0      	blx	r6
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
  4053ba:	f104 0804 	add.w	r8, r4, #4
  4053be:	4640      	mov	r0, r8
  4053c0:	47b0      	blx	r6
					prvAddTaskToReadyList( pxTCB );
  4053c2:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  4053c4:	682b      	ldr	r3, [r5, #0]
  4053c6:	2201      	movs	r2, #1
  4053c8:	4082      	lsls	r2, r0
  4053ca:	4313      	orrs	r3, r2
  4053cc:	602b      	str	r3, [r5, #0]
  4053ce:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  4053d2:	eb09 0080 	add.w	r0, r9, r0, lsl #2
  4053d6:	4641      	mov	r1, r8
  4053d8:	4b1f      	ldr	r3, [pc, #124]	; (405458 <xTaskResumeAll+0xd4>)
  4053da:	4798      	blx	r3

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
  4053dc:	4b1f      	ldr	r3, [pc, #124]	; (40545c <xTaskResumeAll+0xd8>)
  4053de:	681b      	ldr	r3, [r3, #0]
  4053e0:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  4053e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  4053e4:	429a      	cmp	r2, r3
  4053e6:	d308      	bcc.n	4053fa <xTaskResumeAll+0x76>
					{
						xYieldPending = pdTRUE;
  4053e8:	2201      	movs	r2, #1
  4053ea:	4b1d      	ldr	r3, [pc, #116]	; (405460 <xTaskResumeAll+0xdc>)
  4053ec:	601a      	str	r2, [r3, #0]
  4053ee:	e004      	b.n	4053fa <xTaskResumeAll+0x76>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
  4053f0:	4f1c      	ldr	r7, [pc, #112]	; (405464 <xTaskResumeAll+0xe0>)
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
  4053f2:	4e1d      	ldr	r6, [pc, #116]	; (405468 <xTaskResumeAll+0xe4>)
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
					prvAddTaskToReadyList( pxTCB );
  4053f4:	4d1d      	ldr	r5, [pc, #116]	; (40546c <xTaskResumeAll+0xe8>)
  4053f6:	f8df 9088 	ldr.w	r9, [pc, #136]	; 405480 <xTaskResumeAll+0xfc>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
  4053fa:	683b      	ldr	r3, [r7, #0]
  4053fc:	2b00      	cmp	r3, #0
  4053fe:	d1d7      	bne.n	4053b0 <xTaskResumeAll+0x2c>

				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				if( uxPendedTicks > ( UBaseType_t ) 0U )
  405400:	4b1b      	ldr	r3, [pc, #108]	; (405470 <xTaskResumeAll+0xec>)
  405402:	681b      	ldr	r3, [r3, #0]
  405404:	b17b      	cbz	r3, 405426 <xTaskResumeAll+0xa2>
				{
					while( uxPendedTicks > ( UBaseType_t ) 0U )
  405406:	4b1a      	ldr	r3, [pc, #104]	; (405470 <xTaskResumeAll+0xec>)
  405408:	681b      	ldr	r3, [r3, #0]
  40540a:	b163      	cbz	r3, 405426 <xTaskResumeAll+0xa2>
					{
						if( xTaskIncrementTick() != pdFALSE )
  40540c:	4e19      	ldr	r6, [pc, #100]	; (405474 <xTaskResumeAll+0xf0>)
						{
							xYieldPending = pdTRUE;
  40540e:	4d14      	ldr	r5, [pc, #80]	; (405460 <xTaskResumeAll+0xdc>)
						}
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
						--uxPendedTicks;
  405410:	4c17      	ldr	r4, [pc, #92]	; (405470 <xTaskResumeAll+0xec>)
				time. */
				if( uxPendedTicks > ( UBaseType_t ) 0U )
				{
					while( uxPendedTicks > ( UBaseType_t ) 0U )
					{
						if( xTaskIncrementTick() != pdFALSE )
  405412:	47b0      	blx	r6
  405414:	b108      	cbz	r0, 40541a <xTaskResumeAll+0x96>
						{
							xYieldPending = pdTRUE;
  405416:	2301      	movs	r3, #1
  405418:	602b      	str	r3, [r5, #0]
						}
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
						--uxPendedTicks;
  40541a:	6823      	ldr	r3, [r4, #0]
  40541c:	3b01      	subs	r3, #1
  40541e:	6023      	str	r3, [r4, #0]
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				if( uxPendedTicks > ( UBaseType_t ) 0U )
				{
					while( uxPendedTicks > ( UBaseType_t ) 0U )
  405420:	6823      	ldr	r3, [r4, #0]
  405422:	2b00      	cmp	r3, #0
  405424:	d1f5      	bne.n	405412 <xTaskResumeAll+0x8e>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				if( xYieldPending == pdTRUE )
  405426:	4b0e      	ldr	r3, [pc, #56]	; (405460 <xTaskResumeAll+0xdc>)
  405428:	681b      	ldr	r3, [r3, #0]
  40542a:	2b01      	cmp	r3, #1
  40542c:	d105      	bne.n	40543a <xTaskResumeAll+0xb6>
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
  40542e:	4b12      	ldr	r3, [pc, #72]	; (405478 <xTaskResumeAll+0xf4>)
  405430:	4798      	blx	r3

				if( xYieldPending == pdTRUE )
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
  405432:	2401      	movs	r4, #1
  405434:	e002      	b.n	40543c <xTaskResumeAll+0xb8>
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
TCB_t *pxTCB;
BaseType_t xAlreadyYielded = pdFALSE;
  405436:	2400      	movs	r4, #0
  405438:	e000      	b.n	40543c <xTaskResumeAll+0xb8>
  40543a:	2400      	movs	r4, #0
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
  40543c:	4b0f      	ldr	r3, [pc, #60]	; (40547c <xTaskResumeAll+0xf8>)
  40543e:	4798      	blx	r3

	return xAlreadyYielded;
}
  405440:	4620      	mov	r0, r4
  405442:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  405446:	bf00      	nop
  405448:	2000ae88 	.word	0x2000ae88
  40544c:	00404179 	.word	0x00404179
  405450:	004041a9 	.word	0x004041a9
  405454:	2000aeac 	.word	0x2000aeac
  405458:	0040408d 	.word	0x0040408d
  40545c:	2000ae80 	.word	0x2000ae80
  405460:	2000aedc 	.word	0x2000aedc
  405464:	2000ae94 	.word	0x2000ae94
  405468:	004040d9 	.word	0x004040d9
  40546c:	2000aed8 	.word	0x2000aed8
  405470:	2000ae00 	.word	0x2000ae00
  405474:	00405249 	.word	0x00405249
  405478:	00404161 	.word	0x00404161
  40547c:	004041e9 	.word	0x004041e9
  405480:	2000ae04 	.word	0x2000ae04

00405484 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
  405484:	b510      	push	{r4, lr}
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded = pdFALSE;


		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
  405486:	b308      	cbz	r0, 4054cc <vTaskDelay+0x48>
  405488:	4604      	mov	r4, r0
		{
			configASSERT( uxSchedulerSuspended == 0 );
  40548a:	4b12      	ldr	r3, [pc, #72]	; (4054d4 <vTaskDelay+0x50>)
  40548c:	681b      	ldr	r3, [r3, #0]
  40548e:	b113      	cbz	r3, 405496 <vTaskDelay+0x12>
  405490:	4b11      	ldr	r3, [pc, #68]	; (4054d8 <vTaskDelay+0x54>)
  405492:	4798      	blx	r3
  405494:	e7fe      	b.n	405494 <vTaskDelay+0x10>
			vTaskSuspendAll();
  405496:	4b11      	ldr	r3, [pc, #68]	; (4054dc <vTaskDelay+0x58>)
  405498:	4798      	blx	r3
				This task cannot be in an event list as it is the currently
				executing task. */

				/* Calculate the time to wake - this may overflow but this is
				not a problem. */
				xTimeToWake = xTickCount + xTicksToDelay;
  40549a:	4b11      	ldr	r3, [pc, #68]	; (4054e0 <vTaskDelay+0x5c>)
  40549c:	681b      	ldr	r3, [r3, #0]
  40549e:	441c      	add	r4, r3

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
  4054a0:	4b10      	ldr	r3, [pc, #64]	; (4054e4 <vTaskDelay+0x60>)
  4054a2:	6818      	ldr	r0, [r3, #0]
  4054a4:	3004      	adds	r0, #4
  4054a6:	4b10      	ldr	r3, [pc, #64]	; (4054e8 <vTaskDelay+0x64>)
  4054a8:	4798      	blx	r3
  4054aa:	b948      	cbnz	r0, 4054c0 <vTaskDelay+0x3c>
				{
					/* The current task must be in a ready list, so there is
					no need to check, and the port reset macro can be called
					directly. */
					portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
  4054ac:	4b0d      	ldr	r3, [pc, #52]	; (4054e4 <vTaskDelay+0x60>)
  4054ae:	681a      	ldr	r2, [r3, #0]
  4054b0:	490e      	ldr	r1, [pc, #56]	; (4054ec <vTaskDelay+0x68>)
  4054b2:	680b      	ldr	r3, [r1, #0]
  4054b4:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
  4054b6:	2201      	movs	r2, #1
  4054b8:	4082      	lsls	r2, r0
  4054ba:	ea23 0302 	bic.w	r3, r3, r2
  4054be:	600b      	str	r3, [r1, #0]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				prvAddCurrentTaskToDelayedList( xTimeToWake );
  4054c0:	4620      	mov	r0, r4
  4054c2:	4b0b      	ldr	r3, [pc, #44]	; (4054f0 <vTaskDelay+0x6c>)
  4054c4:	4798      	blx	r3
			}
			xAlreadyYielded = xTaskResumeAll();
  4054c6:	4b0b      	ldr	r3, [pc, #44]	; (4054f4 <vTaskDelay+0x70>)
  4054c8:	4798      	blx	r3
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
  4054ca:	b908      	cbnz	r0, 4054d0 <vTaskDelay+0x4c>
		{
			portYIELD_WITHIN_API();
  4054cc:	4b0a      	ldr	r3, [pc, #40]	; (4054f8 <vTaskDelay+0x74>)
  4054ce:	4798      	blx	r3
  4054d0:	bd10      	pop	{r4, pc}
  4054d2:	bf00      	nop
  4054d4:	2000ae88 	.word	0x2000ae88
  4054d8:	00404179 	.word	0x00404179
  4054dc:	00405219 	.word	0x00405219
  4054e0:	2000ae8c 	.word	0x2000ae8c
  4054e4:	2000ae80 	.word	0x2000ae80
  4054e8:	004040d9 	.word	0x004040d9
  4054ec:	2000aed8 	.word	0x2000aed8
  4054f0:	00404e51 	.word	0x00404e51
  4054f4:	00405385 	.word	0x00405385
  4054f8:	00404161 	.word	0x00404161

004054fc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
  4054fc:	b580      	push	{r7, lr}
	{
		BaseType_t xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxTasksDeleted > ( UBaseType_t ) 0U )
  4054fe:	4d16      	ldr	r5, [pc, #88]	; (405558 <prvIdleTask+0x5c>)
		{
			vTaskSuspendAll();
  405500:	f8df 807c 	ldr.w	r8, [pc, #124]	; 405580 <prvIdleTask+0x84>
			{
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
  405504:	4e15      	ldr	r6, [pc, #84]	; (40555c <prvIdleTask+0x60>)
			}
			( void ) xTaskResumeAll();
  405506:	4f16      	ldr	r7, [pc, #88]	; (405560 <prvIdleTask+0x64>)
  405508:	e019      	b.n	40553e <prvIdleTask+0x42>

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxTasksDeleted > ( UBaseType_t ) 0U )
		{
			vTaskSuspendAll();
  40550a:	47c0      	blx	r8
			{
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
  40550c:	6834      	ldr	r4, [r6, #0]
			}
			( void ) xTaskResumeAll();
  40550e:	47b8      	blx	r7

			if( xListIsEmpty == pdFALSE )
  405510:	b1ac      	cbz	r4, 40553e <prvIdleTask+0x42>
			{
				TCB_t *pxTCB;

				taskENTER_CRITICAL();
  405512:	4b14      	ldr	r3, [pc, #80]	; (405564 <prvIdleTask+0x68>)
  405514:	4798      	blx	r3
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
  405516:	68f3      	ldr	r3, [r6, #12]
  405518:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
  40551a:	1d20      	adds	r0, r4, #4
  40551c:	4b12      	ldr	r3, [pc, #72]	; (405568 <prvIdleTask+0x6c>)
  40551e:	4798      	blx	r3
					--uxCurrentNumberOfTasks;
  405520:	4a12      	ldr	r2, [pc, #72]	; (40556c <prvIdleTask+0x70>)
  405522:	6813      	ldr	r3, [r2, #0]
  405524:	3b01      	subs	r3, #1
  405526:	6013      	str	r3, [r2, #0]
					--uxTasksDeleted;
  405528:	682b      	ldr	r3, [r5, #0]
  40552a:	3b01      	subs	r3, #1
  40552c:	602b      	str	r3, [r5, #0]
				}
				taskEXIT_CRITICAL();
  40552e:	4b10      	ldr	r3, [pc, #64]	; (405570 <prvIdleTask+0x74>)
  405530:	4798      	blx	r3
				vPortFreeAligned( pxTCB->pxStack );
			}
		}
		#else
		{
			vPortFreeAligned( pxTCB->pxStack );
  405532:	6b20      	ldr	r0, [r4, #48]	; 0x30
  405534:	f8df 904c 	ldr.w	r9, [pc, #76]	; 405584 <prvIdleTask+0x88>
  405538:	47c8      	blx	r9
		}
		#endif

		vPortFree( pxTCB );
  40553a:	4620      	mov	r0, r4
  40553c:	47c8      	blx	r9
	{
		BaseType_t xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxTasksDeleted > ( UBaseType_t ) 0U )
  40553e:	682b      	ldr	r3, [r5, #0]
  405540:	2b00      	cmp	r3, #0
  405542:	d1e2      	bne.n	40550a <prvIdleTask+0xe>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
  405544:	4b0b      	ldr	r3, [pc, #44]	; (405574 <prvIdleTask+0x78>)
  405546:	681b      	ldr	r3, [r3, #0]
  405548:	2b01      	cmp	r3, #1
  40554a:	d901      	bls.n	405550 <prvIdleTask+0x54>
			{
				taskYIELD();
  40554c:	4b0a      	ldr	r3, [pc, #40]	; (405578 <prvIdleTask+0x7c>)
  40554e:	4798      	blx	r3
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
  405550:	4b0a      	ldr	r3, [pc, #40]	; (40557c <prvIdleTask+0x80>)
  405552:	4798      	blx	r3
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_TICKLESS_IDLE */
	}
  405554:	e7f3      	b.n	40553e <prvIdleTask+0x42>
  405556:	bf00      	nop
  405558:	2000ade8 	.word	0x2000ade8
  40555c:	2000ae68 	.word	0x2000ae68
  405560:	00405385 	.word	0x00405385
  405564:	004041a9 	.word	0x004041a9
  405568:	004040d9 	.word	0x004040d9
  40556c:	2000aeac 	.word	0x2000aeac
  405570:	004041e9 	.word	0x004041e9
  405574:	2000ae04 	.word	0x2000ae04
  405578:	00404161 	.word	0x00404161
  40557c:	00406acd 	.word	0x00406acd
  405580:	00405219 	.word	0x00405219
  405584:	0040453d 	.word	0x0040453d

00405588 <uxTaskGetSystemState>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	UBaseType_t uxTaskGetSystemState( TaskStatus_t * const pxTaskStatusArray, const UBaseType_t uxArraySize, uint32_t * const pulTotalRunTime )
	{
  405588:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  40558c:	4606      	mov	r6, r0
  40558e:	460c      	mov	r4, r1
  405590:	4617      	mov	r7, r2
	UBaseType_t uxTask = 0, uxQueue = configMAX_PRIORITIES;

		vTaskSuspendAll();
  405592:	4b1f      	ldr	r3, [pc, #124]	; (405610 <uxTaskGetSystemState+0x88>)
  405594:	4798      	blx	r3
		{
			/* Is there a space in the array for each task in the system? */
			if( uxArraySize >= uxCurrentNumberOfTasks )
  405596:	4b1f      	ldr	r3, [pc, #124]	; (405614 <uxTaskGetSystemState+0x8c>)
  405598:	681b      	ldr	r3, [r3, #0]
  40559a:	42a3      	cmp	r3, r4
  40559c:	d832      	bhi.n	405604 <uxTaskGetSystemState+0x7c>
  40559e:	4b1e      	ldr	r3, [pc, #120]	; (405618 <uxTaskGetSystemState+0x90>)
  4055a0:	f103 0550 	add.w	r5, r3, #80	; 0x50
  4055a4:	f1a3 0814 	sub.w	r8, r3, #20
  4055a8:	2400      	movs	r4, #0
				/* Fill in an TaskStatus_t structure with information on each
				task in the Ready state. */
				do
				{
					uxQueue--;
					uxTask += prvListTaskWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &( pxReadyTasksLists[ uxQueue ] ), eReady );
  4055aa:	f04f 0a01 	mov.w	sl, #1
  4055ae:	f8df 9070 	ldr.w	r9, [pc, #112]	; 405620 <uxTaskGetSystemState+0x98>
  4055b2:	eb06 1044 	add.w	r0, r6, r4, lsl #5
  4055b6:	4629      	mov	r1, r5
  4055b8:	4652      	mov	r2, sl
  4055ba:	47c8      	blx	r9
  4055bc:	4404      	add	r4, r0
  4055be:	3d14      	subs	r5, #20

				} while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  4055c0:	4545      	cmp	r5, r8
  4055c2:	d1f6      	bne.n	4055b2 <uxTaskGetSystemState+0x2a>

				/* Fill in an TaskStatus_t structure with information on each
				task in the Blocked state. */
				uxTask += prvListTaskWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxDelayedTaskList, eBlocked );
  4055c4:	4b15      	ldr	r3, [pc, #84]	; (40561c <uxTaskGetSystemState+0x94>)
  4055c6:	6819      	ldr	r1, [r3, #0]
  4055c8:	eb06 1044 	add.w	r0, r6, r4, lsl #5
  4055cc:	2202      	movs	r2, #2
  4055ce:	4d14      	ldr	r5, [pc, #80]	; (405620 <uxTaskGetSystemState+0x98>)
  4055d0:	47a8      	blx	r5
  4055d2:	4404      	add	r4, r0
				uxTask += prvListTaskWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxOverflowDelayedTaskList, eBlocked );
  4055d4:	4b13      	ldr	r3, [pc, #76]	; (405624 <uxTaskGetSystemState+0x9c>)
  4055d6:	6819      	ldr	r1, [r3, #0]
  4055d8:	eb06 1044 	add.w	r0, r6, r4, lsl #5
  4055dc:	2202      	movs	r2, #2
  4055de:	47a8      	blx	r5
  4055e0:	4404      	add	r4, r0

				#if( INCLUDE_vTaskDelete == 1 )
				{
					/* Fill in an TaskStatus_t structure with information on
					each task that has been deleted but not yet cleaned up. */
					uxTask += prvListTaskWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xTasksWaitingTermination, eDeleted );
  4055e2:	eb06 1044 	add.w	r0, r6, r4, lsl #5
  4055e6:	4910      	ldr	r1, [pc, #64]	; (405628 <uxTaskGetSystemState+0xa0>)
  4055e8:	2204      	movs	r2, #4
  4055ea:	47a8      	blx	r5
  4055ec:	4404      	add	r4, r0

				#if ( INCLUDE_vTaskSuspend == 1 )
				{
					/* Fill in an TaskStatus_t structure with information on
					each task in the Suspended state. */
					uxTask += prvListTaskWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xSuspendedTaskList, eSuspended );
  4055ee:	eb06 1044 	add.w	r0, r6, r4, lsl #5
  4055f2:	490e      	ldr	r1, [pc, #56]	; (40562c <uxTaskGetSystemState+0xa4>)
  4055f4:	2203      	movs	r2, #3
  4055f6:	47a8      	blx	r5
  4055f8:	4404      	add	r4, r0
				}
				#endif

				#if ( configGENERATE_RUN_TIME_STATS == 1)
				{
					if( pulTotalRunTime != NULL )
  4055fa:	b127      	cbz	r7, 405606 <uxTaskGetSystemState+0x7e>
					{
						#ifdef portALT_GET_RUN_TIME_COUNTER_VALUE
							portALT_GET_RUN_TIME_COUNTER_VALUE( ( *pulTotalRunTime ) );
						#else
							*pulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
  4055fc:	4b0c      	ldr	r3, [pc, #48]	; (405630 <uxTaskGetSystemState+0xa8>)
  4055fe:	4798      	blx	r3
  405600:	6038      	str	r0, [r7, #0]
  405602:	e000      	b.n	405606 <uxTaskGetSystemState+0x7e>

#if ( configUSE_TRACE_FACILITY == 1 )

	UBaseType_t uxTaskGetSystemState( TaskStatus_t * const pxTaskStatusArray, const UBaseType_t uxArraySize, uint32_t * const pulTotalRunTime )
	{
	UBaseType_t uxTask = 0, uxQueue = configMAX_PRIORITIES;
  405604:	2400      	movs	r4, #0
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		( void ) xTaskResumeAll();
  405606:	4b0b      	ldr	r3, [pc, #44]	; (405634 <uxTaskGetSystemState+0xac>)
  405608:	4798      	blx	r3

		return uxTask;
	}
  40560a:	4620      	mov	r0, r4
  40560c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  405610:	00405219 	.word	0x00405219
  405614:	2000aeac 	.word	0x2000aeac
  405618:	2000ae04 	.word	0x2000ae04
  40561c:	2000ade0 	.word	0x2000ade0
  405620:	00404d6d 	.word	0x00404d6d
  405624:	2000ae90 	.word	0x2000ae90
  405628:	2000ae68 	.word	0x2000ae68
  40562c:	2000aec4 	.word	0x2000aec4
  405630:	004069a5 	.word	0x004069a5
  405634:	00405385 	.word	0x00405385

00405638 <vTaskSwitchContext>:
#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
  405638:	4b30      	ldr	r3, [pc, #192]	; (4056fc <vTaskSwitchContext+0xc4>)
  40563a:	681b      	ldr	r3, [r3, #0]
  40563c:	b11b      	cbz	r3, 405646 <vTaskSwitchContext+0xe>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
  40563e:	2201      	movs	r2, #1
  405640:	4b2f      	ldr	r3, [pc, #188]	; (405700 <vTaskSwitchContext+0xc8>)
  405642:	601a      	str	r2, [r3, #0]
  405644:	4770      	bx	lr

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
  405646:	b510      	push	{r4, lr}
		switch. */
		xYieldPending = pdTRUE;
	}
	else
	{
		xYieldPending = pdFALSE;
  405648:	2200      	movs	r2, #0
  40564a:	4b2d      	ldr	r3, [pc, #180]	; (405700 <vTaskSwitchContext+0xc8>)
  40564c:	601a      	str	r2, [r3, #0]
		#if ( configGENERATE_RUN_TIME_STATS == 1 )
		{
				#ifdef portALT_GET_RUN_TIME_COUNTER_VALUE
					portALT_GET_RUN_TIME_COUNTER_VALUE( ulTotalRunTime );
				#else
					ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
  40564e:	4b2d      	ldr	r3, [pc, #180]	; (405704 <vTaskSwitchContext+0xcc>)
  405650:	4798      	blx	r3
  405652:	4b2d      	ldr	r3, [pc, #180]	; (405708 <vTaskSwitchContext+0xd0>)
  405654:	6018      	str	r0, [r3, #0]
				stored in ulTaskSwitchedInTime.  Note that there is no overflow
				protection here	so count values are only valid until the timer
				overflows.  The guard against negative values is to protect
				against suspect run time stat counter implementations - which
				are provided by the application, not the kernel. */
				if( ulTotalRunTime > ulTaskSwitchedInTime )
  405656:	4b2d      	ldr	r3, [pc, #180]	; (40570c <vTaskSwitchContext+0xd4>)
  405658:	6819      	ldr	r1, [r3, #0]
  40565a:	4288      	cmp	r0, r1
  40565c:	d905      	bls.n	40566a <vTaskSwitchContext+0x32>
				{
					pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
  40565e:	4b2c      	ldr	r3, [pc, #176]	; (405710 <vTaskSwitchContext+0xd8>)
  405660:	681a      	ldr	r2, [r3, #0]
  405662:	6d13      	ldr	r3, [r2, #80]	; 0x50
  405664:	1a5b      	subs	r3, r3, r1
  405666:	4403      	add	r3, r0
  405668:	6513      	str	r3, [r2, #80]	; 0x50
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				ulTaskSwitchedInTime = ulTotalRunTime;
  40566a:	4b28      	ldr	r3, [pc, #160]	; (40570c <vTaskSwitchContext+0xd4>)
  40566c:	6018      	str	r0, [r3, #0]
		}
		#endif /* configGENERATE_RUN_TIME_STATS */

		/* Check for stack overflow, if configured. */
		taskCHECK_FOR_STACK_OVERFLOW();
  40566e:	4b28      	ldr	r3, [pc, #160]	; (405710 <vTaskSwitchContext+0xd8>)
  405670:	681b      	ldr	r3, [r3, #0]
  405672:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  405674:	681a      	ldr	r2, [r3, #0]
  405676:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
  40567a:	d10b      	bne.n	405694 <vTaskSwitchContext+0x5c>
  40567c:	685a      	ldr	r2, [r3, #4]
  40567e:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
  405682:	d107      	bne.n	405694 <vTaskSwitchContext+0x5c>
  405684:	689a      	ldr	r2, [r3, #8]
  405686:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
  40568a:	d103      	bne.n	405694 <vTaskSwitchContext+0x5c>
  40568c:	68db      	ldr	r3, [r3, #12]
  40568e:	f1b3 3fa5 	cmp.w	r3, #2779096485	; 0xa5a5a5a5
  405692:	d005      	beq.n	4056a0 <vTaskSwitchContext+0x68>
  405694:	4b1e      	ldr	r3, [pc, #120]	; (405710 <vTaskSwitchContext+0xd8>)
  405696:	6818      	ldr	r0, [r3, #0]
  405698:	6819      	ldr	r1, [r3, #0]
  40569a:	3134      	adds	r1, #52	; 0x34
  40569c:	4b1d      	ldr	r3, [pc, #116]	; (405714 <vTaskSwitchContext+0xdc>)
  40569e:	4798      	blx	r3

		/* Select a new task to run using either the generic C or port
		optimised asm code. */
		taskSELECT_HIGHEST_PRIORITY_TASK();
  4056a0:	4b1d      	ldr	r3, [pc, #116]	; (405718 <vTaskSwitchContext+0xe0>)
  4056a2:	681b      	ldr	r3, [r3, #0]
	/* Generic helper function. */
	__attribute__( ( always_inline ) ) static inline uint8_t ucPortCountLeadingZeros( uint32_t ulBitmap )
	{
	uint8_t ucReturn;

		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) );
  4056a4:	fab3 f383 	clz	r3, r3
  4056a8:	b2db      	uxtb	r3, r3
  4056aa:	f1c3 031f 	rsb	r3, r3, #31
  4056ae:	eb03 0183 	add.w	r1, r3, r3, lsl #2
  4056b2:	4a1a      	ldr	r2, [pc, #104]	; (40571c <vTaskSwitchContext+0xe4>)
  4056b4:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
  4056b8:	b912      	cbnz	r2, 4056c0 <vTaskSwitchContext+0x88>
  4056ba:	4b19      	ldr	r3, [pc, #100]	; (405720 <vTaskSwitchContext+0xe8>)
  4056bc:	4798      	blx	r3
  4056be:	e7fe      	b.n	4056be <vTaskSwitchContext+0x86>
  4056c0:	4a16      	ldr	r2, [pc, #88]	; (40571c <vTaskSwitchContext+0xe4>)
  4056c2:	0099      	lsls	r1, r3, #2
  4056c4:	18c8      	adds	r0, r1, r3
  4056c6:	eb02 0080 	add.w	r0, r2, r0, lsl #2
  4056ca:	6844      	ldr	r4, [r0, #4]
  4056cc:	6864      	ldr	r4, [r4, #4]
  4056ce:	6044      	str	r4, [r0, #4]
  4056d0:	4602      	mov	r2, r0
  4056d2:	3208      	adds	r2, #8
  4056d4:	4294      	cmp	r4, r2
  4056d6:	d106      	bne.n	4056e6 <vTaskSwitchContext+0xae>
  4056d8:	6860      	ldr	r0, [r4, #4]
  4056da:	eb03 0183 	add.w	r1, r3, r3, lsl #2
  4056de:	4a0f      	ldr	r2, [pc, #60]	; (40571c <vTaskSwitchContext+0xe4>)
  4056e0:	eb02 0281 	add.w	r2, r2, r1, lsl #2
  4056e4:	6050      	str	r0, [r2, #4]
  4056e6:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  4056ea:	4a0c      	ldr	r2, [pc, #48]	; (40571c <vTaskSwitchContext+0xe4>)
  4056ec:	eb02 0383 	add.w	r3, r2, r3, lsl #2
  4056f0:	685b      	ldr	r3, [r3, #4]
  4056f2:	68da      	ldr	r2, [r3, #12]
  4056f4:	4b06      	ldr	r3, [pc, #24]	; (405710 <vTaskSwitchContext+0xd8>)
  4056f6:	601a      	str	r2, [r3, #0]
  4056f8:	bd10      	pop	{r4, pc}
  4056fa:	bf00      	nop
  4056fc:	2000ae88 	.word	0x2000ae88
  405700:	2000aedc 	.word	0x2000aedc
  405704:	004069a5 	.word	0x004069a5
  405708:	2000ae7c 	.word	0x2000ae7c
  40570c:	2000add8 	.word	0x2000add8
  405710:	2000ae80 	.word	0x2000ae80
  405714:	00406ad1 	.word	0x00406ad1
  405718:	2000aed8 	.word	0x2000aed8
  40571c:	2000ae04 	.word	0x2000ae04
  405720:	00404179 	.word	0x00404179

00405724 <vTaskPlaceOnEventList>:
	}
}
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
  405724:	b538      	push	{r3, r4, r5, lr}
TickType_t xTimeToWake;

	configASSERT( pxEventList );
  405726:	b910      	cbnz	r0, 40572e <vTaskPlaceOnEventList+0xa>
  405728:	4b13      	ldr	r3, [pc, #76]	; (405778 <vTaskPlaceOnEventList+0x54>)
  40572a:	4798      	blx	r3
  40572c:	e7fe      	b.n	40572c <vTaskPlaceOnEventList+0x8>
  40572e:	460c      	mov	r4, r1

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
  405730:	4d12      	ldr	r5, [pc, #72]	; (40577c <vTaskPlaceOnEventList+0x58>)
  405732:	6829      	ldr	r1, [r5, #0]
  405734:	3118      	adds	r1, #24
  405736:	4b12      	ldr	r3, [pc, #72]	; (405780 <vTaskPlaceOnEventList+0x5c>)
  405738:	4798      	blx	r3

	/* The task must be removed from from the ready list before it is added to
	the blocked list as the same list item is used for both lists.  Exclusive
	access to the ready lists guaranteed because the scheduler is locked. */
	if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
  40573a:	6828      	ldr	r0, [r5, #0]
  40573c:	3004      	adds	r0, #4
  40573e:	4b11      	ldr	r3, [pc, #68]	; (405784 <vTaskPlaceOnEventList+0x60>)
  405740:	4798      	blx	r3
  405742:	b940      	cbnz	r0, 405756 <vTaskPlaceOnEventList+0x32>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
  405744:	682a      	ldr	r2, [r5, #0]
  405746:	4910      	ldr	r1, [pc, #64]	; (405788 <vTaskPlaceOnEventList+0x64>)
  405748:	680b      	ldr	r3, [r1, #0]
  40574a:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
  40574c:	2201      	movs	r2, #1
  40574e:	4082      	lsls	r2, r0
  405750:	ea23 0302 	bic.w	r3, r3, r2
  405754:	600b      	str	r3, [r1, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( xTicksToWait == portMAX_DELAY )
  405756:	f1b4 3fff 	cmp.w	r4, #4294967295
  40575a:	d106      	bne.n	40576a <vTaskPlaceOnEventList+0x46>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure the task is not woken by a timing event.  It will
			block indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xGenericListItem ) );
  40575c:	4b07      	ldr	r3, [pc, #28]	; (40577c <vTaskPlaceOnEventList+0x58>)
  40575e:	6819      	ldr	r1, [r3, #0]
  405760:	480a      	ldr	r0, [pc, #40]	; (40578c <vTaskPlaceOnEventList+0x68>)
  405762:	3104      	adds	r1, #4
  405764:	4b0a      	ldr	r3, [pc, #40]	; (405790 <vTaskPlaceOnEventList+0x6c>)
  405766:	4798      	blx	r3
  405768:	bd38      	pop	{r3, r4, r5, pc}
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			scheduler will handle it. */
			xTimeToWake = xTickCount + xTicksToWait;
  40576a:	4b0a      	ldr	r3, [pc, #40]	; (405794 <vTaskPlaceOnEventList+0x70>)
  40576c:	6818      	ldr	r0, [r3, #0]
			prvAddCurrentTaskToDelayedList( xTimeToWake );
  40576e:	4420      	add	r0, r4
  405770:	4b09      	ldr	r3, [pc, #36]	; (405798 <vTaskPlaceOnEventList+0x74>)
  405772:	4798      	blx	r3
  405774:	bd38      	pop	{r3, r4, r5, pc}
  405776:	bf00      	nop
  405778:	00404179 	.word	0x00404179
  40577c:	2000ae80 	.word	0x2000ae80
  405780:	004040a5 	.word	0x004040a5
  405784:	004040d9 	.word	0x004040d9
  405788:	2000aed8 	.word	0x2000aed8
  40578c:	2000aec4 	.word	0x2000aec4
  405790:	0040408d 	.word	0x0040408d
  405794:	2000ae8c 	.word	0x2000ae8c
  405798:	00404e51 	.word	0x00404e51

0040579c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if configUSE_TIMERS == 1

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, const TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
  40579c:	b570      	push	{r4, r5, r6, lr}
	TickType_t xTimeToWake;

		configASSERT( pxEventList );
  40579e:	b910      	cbnz	r0, 4057a6 <vTaskPlaceOnEventListRestricted+0xa>
  4057a0:	4b13      	ldr	r3, [pc, #76]	; (4057f0 <vTaskPlaceOnEventListRestricted+0x54>)
  4057a2:	4798      	blx	r3
  4057a4:	e7fe      	b.n	4057a4 <vTaskPlaceOnEventListRestricted+0x8>
  4057a6:	460d      	mov	r5, r1
  4057a8:	4616      	mov	r6, r2

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
  4057aa:	4c12      	ldr	r4, [pc, #72]	; (4057f4 <vTaskPlaceOnEventListRestricted+0x58>)
  4057ac:	6821      	ldr	r1, [r4, #0]
  4057ae:	3118      	adds	r1, #24
  4057b0:	4b11      	ldr	r3, [pc, #68]	; (4057f8 <vTaskPlaceOnEventListRestricted+0x5c>)
  4057b2:	4798      	blx	r3

		/* We must remove this task from the ready list before adding it to the
		blocked list as the same list item is used for both lists.  This
		function is called with the scheduler locked so interrupts will not
		access the lists at the same time. */
		if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
  4057b4:	6820      	ldr	r0, [r4, #0]
  4057b6:	3004      	adds	r0, #4
  4057b8:	4b10      	ldr	r3, [pc, #64]	; (4057fc <vTaskPlaceOnEventListRestricted+0x60>)
  4057ba:	4798      	blx	r3
  4057bc:	b940      	cbnz	r0, 4057d0 <vTaskPlaceOnEventListRestricted+0x34>
		{
			/* The current task must be in a ready list, so there is no need to
			check, and the port reset macro can be called directly. */
			portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
  4057be:	6822      	ldr	r2, [r4, #0]
  4057c0:	490f      	ldr	r1, [pc, #60]	; (405800 <vTaskPlaceOnEventListRestricted+0x64>)
  4057c2:	680b      	ldr	r3, [r1, #0]
  4057c4:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
  4057c6:	2201      	movs	r2, #1
  4057c8:	4082      	lsls	r2, r0
  4057ca:	ea23 0302 	bic.w	r3, r3, r2
  4057ce:	600b      	str	r3, [r1, #0]
		Ready state when the event it is waiting indefinitely for occurs).
		Blocking indefinitely is useful when using tickless idle mode as when
		all tasks are blocked indefinitely all timers can be turned off. */
		#if( INCLUDE_vTaskSuspend == 1 )
		{
			if( xWaitIndefinitely == pdTRUE )
  4057d0:	2e01      	cmp	r6, #1
  4057d2:	d106      	bne.n	4057e2 <vTaskPlaceOnEventListRestricted+0x46>
			{
				/* Add the task to the suspended task list instead of a delayed
				task list to ensure the task is not woken by a timing event.  It
				will block indefinitely. */
				vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xGenericListItem ) );
  4057d4:	4b07      	ldr	r3, [pc, #28]	; (4057f4 <vTaskPlaceOnEventListRestricted+0x58>)
  4057d6:	6819      	ldr	r1, [r3, #0]
  4057d8:	480a      	ldr	r0, [pc, #40]	; (405804 <vTaskPlaceOnEventListRestricted+0x68>)
  4057da:	3104      	adds	r1, #4
  4057dc:	4b06      	ldr	r3, [pc, #24]	; (4057f8 <vTaskPlaceOnEventListRestricted+0x5c>)
  4057de:	4798      	blx	r3
  4057e0:	bd70      	pop	{r4, r5, r6, pc}
			else
			{
				/* Calculate the time at which the task should be woken if the
				event does not occur.  This may overflow but this doesn't
				matter. */
				xTimeToWake = xTickCount + xTicksToWait;
  4057e2:	4b09      	ldr	r3, [pc, #36]	; (405808 <vTaskPlaceOnEventListRestricted+0x6c>)
  4057e4:	6818      	ldr	r0, [r3, #0]
				traceTASK_DELAY_UNTIL();
				prvAddCurrentTaskToDelayedList( xTimeToWake );
  4057e6:	4428      	add	r0, r5
  4057e8:	4b08      	ldr	r3, [pc, #32]	; (40580c <vTaskPlaceOnEventListRestricted+0x70>)
  4057ea:	4798      	blx	r3
  4057ec:	bd70      	pop	{r4, r5, r6, pc}
  4057ee:	bf00      	nop
  4057f0:	00404179 	.word	0x00404179
  4057f4:	2000ae80 	.word	0x2000ae80
  4057f8:	0040408d 	.word	0x0040408d
  4057fc:	004040d9 	.word	0x004040d9
  405800:	2000aed8 	.word	0x2000aed8
  405804:	2000aec4 	.word	0x2000aec4
  405808:	2000ae8c 	.word	0x2000ae8c
  40580c:	00404e51 	.word	0x00404e51

00405810 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
  405810:	b538      	push	{r3, r4, r5, lr}
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
  405812:	68c3      	ldr	r3, [r0, #12]
  405814:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
  405816:	b914      	cbnz	r4, 40581e <xTaskRemoveFromEventList+0xe>
  405818:	4b16      	ldr	r3, [pc, #88]	; (405874 <xTaskRemoveFromEventList+0x64>)
  40581a:	4798      	blx	r3
  40581c:	e7fe      	b.n	40581c <xTaskRemoveFromEventList+0xc>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
  40581e:	f104 0518 	add.w	r5, r4, #24
  405822:	4628      	mov	r0, r5
  405824:	4b14      	ldr	r3, [pc, #80]	; (405878 <xTaskRemoveFromEventList+0x68>)
  405826:	4798      	blx	r3

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
  405828:	4b14      	ldr	r3, [pc, #80]	; (40587c <xTaskRemoveFromEventList+0x6c>)
  40582a:	681b      	ldr	r3, [r3, #0]
  40582c:	b99b      	cbnz	r3, 405856 <xTaskRemoveFromEventList+0x46>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xGenericListItem ) );
  40582e:	1d25      	adds	r5, r4, #4
  405830:	4628      	mov	r0, r5
  405832:	4b11      	ldr	r3, [pc, #68]	; (405878 <xTaskRemoveFromEventList+0x68>)
  405834:	4798      	blx	r3
		prvAddTaskToReadyList( pxUnblockedTCB );
  405836:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  405838:	4911      	ldr	r1, [pc, #68]	; (405880 <xTaskRemoveFromEventList+0x70>)
  40583a:	680b      	ldr	r3, [r1, #0]
  40583c:	2201      	movs	r2, #1
  40583e:	4082      	lsls	r2, r0
  405840:	4313      	orrs	r3, r2
  405842:	600b      	str	r3, [r1, #0]
  405844:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  405848:	4b0e      	ldr	r3, [pc, #56]	; (405884 <xTaskRemoveFromEventList+0x74>)
  40584a:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  40584e:	4629      	mov	r1, r5
  405850:	4b0d      	ldr	r3, [pc, #52]	; (405888 <xTaskRemoveFromEventList+0x78>)
  405852:	4798      	blx	r3
  405854:	e003      	b.n	40585e <xTaskRemoveFromEventList+0x4e>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
  405856:	480d      	ldr	r0, [pc, #52]	; (40588c <xTaskRemoveFromEventList+0x7c>)
  405858:	4629      	mov	r1, r5
  40585a:	4b0b      	ldr	r3, [pc, #44]	; (405888 <xTaskRemoveFromEventList+0x78>)
  40585c:	4798      	blx	r3
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
  40585e:	4b0c      	ldr	r3, [pc, #48]	; (405890 <xTaskRemoveFromEventList+0x80>)
  405860:	681b      	ldr	r3, [r3, #0]
  405862:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  405864:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  405866:	429a      	cmp	r2, r3
		it should force a context switch now. */
		xReturn = pdTRUE;

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
  405868:	bf83      	ittte	hi
  40586a:	2001      	movhi	r0, #1
  40586c:	4b09      	ldrhi	r3, [pc, #36]	; (405894 <xTaskRemoveFromEventList+0x84>)
  40586e:	6018      	strhi	r0, [r3, #0]
	}
	else
	{
		xReturn = pdFALSE;
  405870:	2000      	movls	r0, #0
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
}
  405872:	bd38      	pop	{r3, r4, r5, pc}
  405874:	00404179 	.word	0x00404179
  405878:	004040d9 	.word	0x004040d9
  40587c:	2000ae88 	.word	0x2000ae88
  405880:	2000aed8 	.word	0x2000aed8
  405884:	2000ae04 	.word	0x2000ae04
  405888:	0040408d 	.word	0x0040408d
  40588c:	2000ae94 	.word	0x2000ae94
  405890:	2000ae80 	.word	0x2000ae80
  405894:	2000aedc 	.word	0x2000aedc

00405898 <vTaskSetTimeOutState>:
	return xReturn;
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
  405898:	b508      	push	{r3, lr}
	configASSERT( pxTimeOut );
  40589a:	b910      	cbnz	r0, 4058a2 <vTaskSetTimeOutState+0xa>
  40589c:	4b04      	ldr	r3, [pc, #16]	; (4058b0 <vTaskSetTimeOutState+0x18>)
  40589e:	4798      	blx	r3
  4058a0:	e7fe      	b.n	4058a0 <vTaskSetTimeOutState+0x8>
	pxTimeOut->xOverflowCount = xNumOfOverflows;
  4058a2:	4a04      	ldr	r2, [pc, #16]	; (4058b4 <vTaskSetTimeOutState+0x1c>)
  4058a4:	6812      	ldr	r2, [r2, #0]
  4058a6:	6002      	str	r2, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
  4058a8:	4a03      	ldr	r2, [pc, #12]	; (4058b8 <vTaskSetTimeOutState+0x20>)
  4058aa:	6812      	ldr	r2, [r2, #0]
  4058ac:	6042      	str	r2, [r0, #4]
  4058ae:	bd08      	pop	{r3, pc}
  4058b0:	00404179 	.word	0x00404179
  4058b4:	2000addc 	.word	0x2000addc
  4058b8:	2000ae8c 	.word	0x2000ae8c

004058bc <xTaskCheckForTimeOut>:
}
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
  4058bc:	b538      	push	{r3, r4, r5, lr}
BaseType_t xReturn;

	configASSERT( pxTimeOut );
  4058be:	b910      	cbnz	r0, 4058c6 <xTaskCheckForTimeOut+0xa>
  4058c0:	4b16      	ldr	r3, [pc, #88]	; (40591c <xTaskCheckForTimeOut+0x60>)
  4058c2:	4798      	blx	r3
  4058c4:	e7fe      	b.n	4058c4 <xTaskCheckForTimeOut+0x8>
  4058c6:	460d      	mov	r5, r1
  4058c8:	4604      	mov	r4, r0
	configASSERT( pxTicksToWait );
  4058ca:	b911      	cbnz	r1, 4058d2 <xTaskCheckForTimeOut+0x16>
  4058cc:	4b13      	ldr	r3, [pc, #76]	; (40591c <xTaskCheckForTimeOut+0x60>)
  4058ce:	4798      	blx	r3
  4058d0:	e7fe      	b.n	4058d0 <xTaskCheckForTimeOut+0x14>

	taskENTER_CRITICAL();
  4058d2:	4b13      	ldr	r3, [pc, #76]	; (405920 <xTaskCheckForTimeOut+0x64>)
  4058d4:	4798      	blx	r3
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
  4058d6:	4b13      	ldr	r3, [pc, #76]	; (405924 <xTaskCheckForTimeOut+0x68>)
  4058d8:	6819      	ldr	r1, [r3, #0]

		#if ( INCLUDE_vTaskSuspend == 1 )
			/* If INCLUDE_vTaskSuspend is set to 1 and the block time specified is
			the maximum block time then the task should block indefinitely, and
			therefore never time out. */
			if( *pxTicksToWait == portMAX_DELAY )
  4058da:	682b      	ldr	r3, [r5, #0]
  4058dc:	f1b3 3fff 	cmp.w	r3, #4294967295
  4058e0:	d013      	beq.n	40590a <xTaskCheckForTimeOut+0x4e>
				xReturn = pdFALSE;
			}
			else /* We are not blocking indefinitely, perform the checks below. */
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
  4058e2:	4a11      	ldr	r2, [pc, #68]	; (405928 <xTaskCheckForTimeOut+0x6c>)
  4058e4:	6812      	ldr	r2, [r2, #0]
  4058e6:	6820      	ldr	r0, [r4, #0]
  4058e8:	4290      	cmp	r0, r2
  4058ea:	d002      	beq.n	4058f2 <xTaskCheckForTimeOut+0x36>
  4058ec:	6862      	ldr	r2, [r4, #4]
  4058ee:	4291      	cmp	r1, r2
  4058f0:	d20d      	bcs.n	40590e <xTaskCheckForTimeOut+0x52>
			was called, but has also overflowed since vTaskSetTimeOut() was called.
			It must have wrapped all the way around and gone past us again. This
			passed since vTaskSetTimeout() was called. */
			xReturn = pdTRUE;
		}
		else if( ( xConstTickCount - pxTimeOut->xTimeOnEntering ) < *pxTicksToWait )
  4058f2:	6862      	ldr	r2, [r4, #4]
  4058f4:	1a88      	subs	r0, r1, r2
  4058f6:	4283      	cmp	r3, r0
  4058f8:	d90b      	bls.n	405912 <xTaskCheckForTimeOut+0x56>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= ( xConstTickCount -  pxTimeOut->xTimeOnEntering );
  4058fa:	1a52      	subs	r2, r2, r1
  4058fc:	4413      	add	r3, r2
  4058fe:	602b      	str	r3, [r5, #0]
			vTaskSetTimeOutState( pxTimeOut );
  405900:	4620      	mov	r0, r4
  405902:	4b0a      	ldr	r3, [pc, #40]	; (40592c <xTaskCheckForTimeOut+0x70>)
  405904:	4798      	blx	r3
			xReturn = pdFALSE;
  405906:	2400      	movs	r4, #0
  405908:	e004      	b.n	405914 <xTaskCheckForTimeOut+0x58>
			/* If INCLUDE_vTaskSuspend is set to 1 and the block time specified is
			the maximum block time then the task should block indefinitely, and
			therefore never time out. */
			if( *pxTicksToWait == portMAX_DELAY )
			{
				xReturn = pdFALSE;
  40590a:	2400      	movs	r4, #0
  40590c:	e002      	b.n	405914 <xTaskCheckForTimeOut+0x58>
		{
			/* The tick count is greater than the time at which vTaskSetTimeout()
			was called, but has also overflowed since vTaskSetTimeOut() was called.
			It must have wrapped all the way around and gone past us again. This
			passed since vTaskSetTimeout() was called. */
			xReturn = pdTRUE;
  40590e:	2401      	movs	r4, #1
  405910:	e000      	b.n	405914 <xTaskCheckForTimeOut+0x58>
			vTaskSetTimeOutState( pxTimeOut );
			xReturn = pdFALSE;
		}
		else
		{
			xReturn = pdTRUE;
  405912:	2401      	movs	r4, #1
		}
	}
	taskEXIT_CRITICAL();
  405914:	4b06      	ldr	r3, [pc, #24]	; (405930 <xTaskCheckForTimeOut+0x74>)
  405916:	4798      	blx	r3

	return xReturn;
}
  405918:	4620      	mov	r0, r4
  40591a:	bd38      	pop	{r3, r4, r5, pc}
  40591c:	00404179 	.word	0x00404179
  405920:	004041a9 	.word	0x004041a9
  405924:	2000ae8c 	.word	0x2000ae8c
  405928:	2000addc 	.word	0x2000addc
  40592c:	00405899 	.word	0x00405899
  405930:	004041e9 	.word	0x004041e9

00405934 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
	xYieldPending = pdTRUE;
  405934:	2201      	movs	r2, #1
  405936:	4b01      	ldr	r3, [pc, #4]	; (40593c <vTaskMissedYield+0x8>)
  405938:	601a      	str	r2, [r3, #0]
  40593a:	4770      	bx	lr
  40593c:	2000aedc 	.word	0x2000aedc

00405940 <xTaskGetSchedulerState>:

	BaseType_t xTaskGetSchedulerState( void )
	{
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
  405940:	4b05      	ldr	r3, [pc, #20]	; (405958 <xTaskGetSchedulerState+0x18>)
  405942:	681b      	ldr	r3, [r3, #0]
  405944:	b133      	cbz	r3, 405954 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
  405946:	4b05      	ldr	r3, [pc, #20]	; (40595c <xTaskGetSchedulerState+0x1c>)
  405948:	681b      	ldr	r3, [r3, #0]
			{
				xReturn = taskSCHEDULER_RUNNING;
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
  40594a:	2b00      	cmp	r3, #0
  40594c:	bf0c      	ite	eq
  40594e:	2002      	moveq	r0, #2
  405950:	2000      	movne	r0, #0
  405952:	4770      	bx	lr
	{
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
  405954:	2001      	movs	r0, #1
				xReturn = taskSCHEDULER_SUSPENDED;
			}
		}

		return xReturn;
	}
  405956:	4770      	bx	lr
  405958:	2000ade4 	.word	0x2000ade4
  40595c:	2000ae88 	.word	0x2000ae88

00405960 <vTaskPriorityInherit>:
	{
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL. */
		if( pxMutexHolder != NULL )
  405960:	2800      	cmp	r0, #0
  405962:	d045      	beq.n	4059f0 <vTaskPriorityInherit+0x90>
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
  405964:	b538      	push	{r3, r4, r5, lr}
  405966:	4603      	mov	r3, r0
		if( pxMutexHolder != NULL )
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
  405968:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
  40596a:	4922      	ldr	r1, [pc, #136]	; (4059f4 <vTaskPriorityInherit+0x94>)
  40596c:	6809      	ldr	r1, [r1, #0]
  40596e:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
  405970:	428a      	cmp	r2, r1
  405972:	d23c      	bcs.n	4059ee <vTaskPriorityInherit+0x8e>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not	being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
  405974:	6981      	ldr	r1, [r0, #24]
  405976:	2900      	cmp	r1, #0
  405978:	db05      	blt.n	405986 <vTaskPriorityInherit+0x26>
				{
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  40597a:	491e      	ldr	r1, [pc, #120]	; (4059f4 <vTaskPriorityInherit+0x94>)
  40597c:	6809      	ldr	r1, [r1, #0]
  40597e:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
  405980:	f1c1 0105 	rsb	r1, r1, #5
  405984:	6181      	str	r1, [r0, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xGenericListItem ) ) != pdFALSE )
  405986:	eb02 0282 	add.w	r2, r2, r2, lsl #2
  40598a:	491b      	ldr	r1, [pc, #108]	; (4059f8 <vTaskPriorityInherit+0x98>)
  40598c:	eb01 0282 	add.w	r2, r1, r2, lsl #2
  405990:	6959      	ldr	r1, [r3, #20]
  405992:	4291      	cmp	r1, r2
  405994:	d127      	bne.n	4059e6 <vTaskPriorityInherit+0x86>
  405996:	461c      	mov	r4, r3
				{
					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
  405998:	1d1d      	adds	r5, r3, #4
  40599a:	4628      	mov	r0, r5
  40599c:	4b17      	ldr	r3, [pc, #92]	; (4059fc <vTaskPriorityInherit+0x9c>)
  40599e:	4798      	blx	r3
  4059a0:	b970      	cbnz	r0, 4059c0 <vTaskPriorityInherit+0x60>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
  4059a2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  4059a4:	eb03 0183 	add.w	r1, r3, r3, lsl #2
  4059a8:	4a13      	ldr	r2, [pc, #76]	; (4059f8 <vTaskPriorityInherit+0x98>)
  4059aa:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
  4059ae:	b93a      	cbnz	r2, 4059c0 <vTaskPriorityInherit+0x60>
  4059b0:	4813      	ldr	r0, [pc, #76]	; (405a00 <vTaskPriorityInherit+0xa0>)
  4059b2:	6802      	ldr	r2, [r0, #0]
  4059b4:	2101      	movs	r1, #1
  4059b6:	fa01 f303 	lsl.w	r3, r1, r3
  4059ba:	ea22 0303 	bic.w	r3, r2, r3
  4059be:	6003      	str	r3, [r0, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
  4059c0:	4b0c      	ldr	r3, [pc, #48]	; (4059f4 <vTaskPriorityInherit+0x94>)
  4059c2:	681b      	ldr	r3, [r3, #0]
  4059c4:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
  4059c6:	62e0      	str	r0, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
  4059c8:	490d      	ldr	r1, [pc, #52]	; (405a00 <vTaskPriorityInherit+0xa0>)
  4059ca:	680a      	ldr	r2, [r1, #0]
  4059cc:	2301      	movs	r3, #1
  4059ce:	4083      	lsls	r3, r0
  4059d0:	4313      	orrs	r3, r2
  4059d2:	600b      	str	r3, [r1, #0]
  4059d4:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  4059d8:	4b07      	ldr	r3, [pc, #28]	; (4059f8 <vTaskPriorityInherit+0x98>)
  4059da:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  4059de:	4629      	mov	r1, r5
  4059e0:	4b08      	ldr	r3, [pc, #32]	; (405a04 <vTaskPriorityInherit+0xa4>)
  4059e2:	4798      	blx	r3
  4059e4:	bd38      	pop	{r3, r4, r5, pc}
				}
				else
				{
					/* Just inherit the priority. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
  4059e6:	4a03      	ldr	r2, [pc, #12]	; (4059f4 <vTaskPriorityInherit+0x94>)
  4059e8:	6812      	ldr	r2, [r2, #0]
  4059ea:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
  4059ec:	62da      	str	r2, [r3, #44]	; 0x2c
  4059ee:	bd38      	pop	{r3, r4, r5, pc}
  4059f0:	4770      	bx	lr
  4059f2:	bf00      	nop
  4059f4:	2000ae80 	.word	0x2000ae80
  4059f8:	2000ae04 	.word	0x2000ae04
  4059fc:	004040d9 	.word	0x004040d9
  405a00:	2000aed8 	.word	0x2000aed8
  405a04:	0040408d 	.word	0x0040408d

00405a08 <xTaskPriorityDisinherit>:
	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
	BaseType_t xReturn = pdFALSE;

		if( pxMutexHolder != NULL )
  405a08:	2800      	cmp	r0, #0
  405a0a:	d03d      	beq.n	405a88 <xTaskPriorityDisinherit+0x80>
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
  405a0c:	b538      	push	{r3, r4, r5, lr}
  405a0e:	4604      	mov	r4, r0
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
  405a10:	4b20      	ldr	r3, [pc, #128]	; (405a94 <xTaskPriorityDisinherit+0x8c>)
  405a12:	681b      	ldr	r3, [r3, #0]
  405a14:	4298      	cmp	r0, r3
  405a16:	d002      	beq.n	405a1e <xTaskPriorityDisinherit+0x16>
  405a18:	4b1f      	ldr	r3, [pc, #124]	; (405a98 <xTaskPriorityDisinherit+0x90>)
  405a1a:	4798      	blx	r3
  405a1c:	e7fe      	b.n	405a1c <xTaskPriorityDisinherit+0x14>

			configASSERT( pxTCB->uxMutexesHeld );
  405a1e:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
  405a20:	b913      	cbnz	r3, 405a28 <xTaskPriorityDisinherit+0x20>
  405a22:	4b1d      	ldr	r3, [pc, #116]	; (405a98 <xTaskPriorityDisinherit+0x90>)
  405a24:	4798      	blx	r3
  405a26:	e7fe      	b.n	405a26 <xTaskPriorityDisinherit+0x1e>
			( pxTCB->uxMutexesHeld )--;
  405a28:	3b01      	subs	r3, #1
  405a2a:	64c3      	str	r3, [r0, #76]	; 0x4c

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
  405a2c:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
  405a2e:	6c82      	ldr	r2, [r0, #72]	; 0x48
  405a30:	4291      	cmp	r1, r2
  405a32:	d02b      	beq.n	405a8c <xTaskPriorityDisinherit+0x84>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
  405a34:	bb63      	cbnz	r3, 405a90 <xTaskPriorityDisinherit+0x88>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding	task then it must be the running state task.  Remove
					the	holding task from the ready	list. */
					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
  405a36:	1d05      	adds	r5, r0, #4
  405a38:	4628      	mov	r0, r5
  405a3a:	4b18      	ldr	r3, [pc, #96]	; (405a9c <xTaskPriorityDisinherit+0x94>)
  405a3c:	4798      	blx	r3
  405a3e:	b968      	cbnz	r0, 405a5c <xTaskPriorityDisinherit+0x54>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
  405a40:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
  405a42:	eb01 0281 	add.w	r2, r1, r1, lsl #2
  405a46:	4b16      	ldr	r3, [pc, #88]	; (405aa0 <xTaskPriorityDisinherit+0x98>)
  405a48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  405a4c:	b933      	cbnz	r3, 405a5c <xTaskPriorityDisinherit+0x54>
  405a4e:	4815      	ldr	r0, [pc, #84]	; (405aa4 <xTaskPriorityDisinherit+0x9c>)
  405a50:	6803      	ldr	r3, [r0, #0]
  405a52:	2201      	movs	r2, #1
  405a54:	408a      	lsls	r2, r1
  405a56:	ea23 0302 	bic.w	r3, r3, r2
  405a5a:	6003      	str	r3, [r0, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
  405a5c:	6ca0      	ldr	r0, [r4, #72]	; 0x48
  405a5e:	62e0      	str	r0, [r4, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  405a60:	f1c0 0305 	rsb	r3, r0, #5
  405a64:	61a3      	str	r3, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
  405a66:	4a0f      	ldr	r2, [pc, #60]	; (405aa4 <xTaskPriorityDisinherit+0x9c>)
  405a68:	6813      	ldr	r3, [r2, #0]
  405a6a:	2401      	movs	r4, #1
  405a6c:	fa04 f100 	lsl.w	r1, r4, r0
  405a70:	430b      	orrs	r3, r1
  405a72:	6013      	str	r3, [r2, #0]
  405a74:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  405a78:	4b09      	ldr	r3, [pc, #36]	; (405aa0 <xTaskPriorityDisinherit+0x98>)
  405a7a:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  405a7e:	4629      	mov	r1, r5
  405a80:	4b09      	ldr	r3, [pc, #36]	; (405aa8 <xTaskPriorityDisinherit+0xa0>)
  405a82:	4798      	blx	r3
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
  405a84:	4620      	mov	r0, r4
  405a86:	bd38      	pop	{r3, r4, r5, pc}
#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
	BaseType_t xReturn = pdFALSE;
  405a88:	2000      	movs	r0, #0
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
	}
  405a8a:	4770      	bx	lr
#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
	BaseType_t xReturn = pdFALSE;
  405a8c:	2000      	movs	r0, #0
  405a8e:	bd38      	pop	{r3, r4, r5, pc}
  405a90:	2000      	movs	r0, #0
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
	}
  405a92:	bd38      	pop	{r3, r4, r5, pc}
  405a94:	2000ae80 	.word	0x2000ae80
  405a98:	00404179 	.word	0x00404179
  405a9c:	004040d9 	.word	0x004040d9
  405aa0:	2000ae04 	.word	0x2000ae04
  405aa4:	2000aed8 	.word	0x2000aed8
  405aa8:	0040408d 	.word	0x0040408d

00405aac <vTaskList>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )

	void vTaskList( char * pcWriteBuffer )
	{
  405aac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  405ab0:	b085      	sub	sp, #20
  405ab2:	4605      	mov	r5, r0
		 * through a call to vTaskList().
		 */


		/* Make sure the write buffer does not contain a string. */
		*pcWriteBuffer = 0x00;
  405ab4:	2300      	movs	r3, #0
  405ab6:	7003      	strb	r3, [r0, #0]

		/* Take a snapshot of the number of tasks in case it changes while this
		function is executing. */
		uxArraySize = uxCurrentNumberOfTasks;
  405ab8:	4b2d      	ldr	r3, [pc, #180]	; (405b70 <vTaskList+0xc4>)
  405aba:	681a      	ldr	r2, [r3, #0]
  405abc:	9203      	str	r2, [sp, #12]

		/* Allocate an array index for each task. */
		pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) );
  405abe:	6818      	ldr	r0, [r3, #0]
  405ac0:	0140      	lsls	r0, r0, #5
  405ac2:	4b2c      	ldr	r3, [pc, #176]	; (405b74 <vTaskList+0xc8>)
  405ac4:	4798      	blx	r3

		if( pxTaskStatusArray != NULL )
  405ac6:	2800      	cmp	r0, #0
  405ac8:	d04e      	beq.n	405b68 <vTaskList+0xbc>
  405aca:	4604      	mov	r4, r0
		{
			/* Generate the (binary) data. */
			uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, NULL );
  405acc:	9903      	ldr	r1, [sp, #12]
  405ace:	2200      	movs	r2, #0
  405ad0:	4b29      	ldr	r3, [pc, #164]	; (405b78 <vTaskList+0xcc>)
  405ad2:	4798      	blx	r3
  405ad4:	9003      	str	r0, [sp, #12]

			/* Create a human readable table from the binary data. */
			for( x = 0; x < uxArraySize; x++ )
  405ad6:	2300      	movs	r3, #0
  405ad8:	9302      	str	r3, [sp, #8]
  405ada:	9a02      	ldr	r2, [sp, #8]
  405adc:	9b03      	ldr	r3, [sp, #12]
  405ade:	429a      	cmp	r2, r3
  405ae0:	d23f      	bcs.n	405b62 <vTaskList+0xb6>
										break;
				}

				/* Write the task name to the string, padding with spaces so it
				can be printed in tabular form more easily. */
				pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );
  405ae2:	4f26      	ldr	r7, [pc, #152]	; (405b7c <vTaskList+0xd0>)

				/* Write the rest of the string. */
				sprintf( pcWriteBuffer, "\t%c\t%u\t%u\t%u\r\n", cStatus, ( unsigned int ) pxTaskStatusArray[ x ].uxCurrentPriority, ( unsigned int ) pxTaskStatusArray[ x ].usStackHighWaterMark, ( unsigned int ) pxTaskStatusArray[ x ].xTaskNumber );
  405ae4:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 405b8c <vTaskList+0xe0>
  405ae8:	4e25      	ldr	r6, [pc, #148]	; (405b80 <vTaskList+0xd4>)
			uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, NULL );

			/* Create a human readable table from the binary data. */
			for( x = 0; x < uxArraySize; x++ )
			{
				switch( pxTaskStatusArray[ x ].eCurrentState )
  405aea:	9b02      	ldr	r3, [sp, #8]
  405aec:	eb04 1343 	add.w	r3, r4, r3, lsl #5
  405af0:	7b1b      	ldrb	r3, [r3, #12]
  405af2:	3b01      	subs	r3, #1
  405af4:	2b03      	cmp	r3, #3
  405af6:	d80c      	bhi.n	405b12 <vTaskList+0x66>
  405af8:	e8df f003 	tbb	[pc, r3]
  405afc:	0805020e 	.word	0x0805020e
				{
					case eReady:		cStatus = tskREADY_CHAR;
										break;

					case eBlocked:		cStatus = tskBLOCKED_CHAR;
  405b00:	f04f 0942 	mov.w	r9, #66	; 0x42
  405b04:	e00a      	b.n	405b1c <vTaskList+0x70>
										break;

					case eSuspended:	cStatus = tskSUSPENDED_CHAR;
  405b06:	f04f 0953 	mov.w	r9, #83	; 0x53
										break;
  405b0a:	e007      	b.n	405b1c <vTaskList+0x70>

					case eDeleted:		cStatus = tskDELETED_CHAR;
  405b0c:	f04f 0944 	mov.w	r9, #68	; 0x44
										break;
  405b10:	e004      	b.n	405b1c <vTaskList+0x70>

					default:			/* Should not get here, but it is included
										to prevent static checking errors. */
										cStatus = 0x00;
  405b12:	f04f 0900 	mov.w	r9, #0
										break;
  405b16:	e001      	b.n	405b1c <vTaskList+0x70>
			/* Create a human readable table from the binary data. */
			for( x = 0; x < uxArraySize; x++ )
			{
				switch( pxTaskStatusArray[ x ].eCurrentState )
				{
					case eReady:		cStatus = tskREADY_CHAR;
  405b18:	f04f 0952 	mov.w	r9, #82	; 0x52
										break;
				}

				/* Write the task name to the string, padding with spaces so it
				can be printed in tabular form more easily. */
				pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );
  405b1c:	9b02      	ldr	r3, [sp, #8]
  405b1e:	eb04 1343 	add.w	r3, r4, r3, lsl #5
  405b22:	4628      	mov	r0, r5
  405b24:	6859      	ldr	r1, [r3, #4]
  405b26:	47b8      	blx	r7
  405b28:	4605      	mov	r5, r0

				/* Write the rest of the string. */
				sprintf( pcWriteBuffer, "\t%c\t%u\t%u\t%u\r\n", cStatus, ( unsigned int ) pxTaskStatusArray[ x ].uxCurrentPriority, ( unsigned int ) pxTaskStatusArray[ x ].usStackHighWaterMark, ( unsigned int ) pxTaskStatusArray[ x ].xTaskNumber );
  405b2a:	9b02      	ldr	r3, [sp, #8]
  405b2c:	9902      	ldr	r1, [sp, #8]
  405b2e:	9a02      	ldr	r2, [sp, #8]
  405b30:	eb04 1343 	add.w	r3, r4, r3, lsl #5
  405b34:	691b      	ldr	r3, [r3, #16]
  405b36:	eb04 1141 	add.w	r1, r4, r1, lsl #5
  405b3a:	8b89      	ldrh	r1, [r1, #28]
  405b3c:	9100      	str	r1, [sp, #0]
  405b3e:	eb04 1242 	add.w	r2, r4, r2, lsl #5
  405b42:	6892      	ldr	r2, [r2, #8]
  405b44:	9201      	str	r2, [sp, #4]
  405b46:	4641      	mov	r1, r8
  405b48:	464a      	mov	r2, r9
  405b4a:	47b0      	blx	r6
				pcWriteBuffer += strlen( pcWriteBuffer );
  405b4c:	4628      	mov	r0, r5
  405b4e:	4b0d      	ldr	r3, [pc, #52]	; (405b84 <vTaskList+0xd8>)
  405b50:	4798      	blx	r3
  405b52:	4405      	add	r5, r0
		{
			/* Generate the (binary) data. */
			uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, NULL );

			/* Create a human readable table from the binary data. */
			for( x = 0; x < uxArraySize; x++ )
  405b54:	9b02      	ldr	r3, [sp, #8]
  405b56:	3301      	adds	r3, #1
  405b58:	9302      	str	r3, [sp, #8]
  405b5a:	9a02      	ldr	r2, [sp, #8]
  405b5c:	9b03      	ldr	r3, [sp, #12]
  405b5e:	429a      	cmp	r2, r3
  405b60:	d3c3      	bcc.n	405aea <vTaskList+0x3e>
				sprintf( pcWriteBuffer, "\t%c\t%u\t%u\t%u\r\n", cStatus, ( unsigned int ) pxTaskStatusArray[ x ].uxCurrentPriority, ( unsigned int ) pxTaskStatusArray[ x ].usStackHighWaterMark, ( unsigned int ) pxTaskStatusArray[ x ].xTaskNumber );
				pcWriteBuffer += strlen( pcWriteBuffer );
			}

			/* Free the array again. */
			vPortFree( pxTaskStatusArray );
  405b62:	4620      	mov	r0, r4
  405b64:	4b08      	ldr	r3, [pc, #32]	; (405b88 <vTaskList+0xdc>)
  405b66:	4798      	blx	r3
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
  405b68:	b005      	add	sp, #20
  405b6a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  405b6e:	bf00      	nop
  405b70:	2000aeac 	.word	0x2000aeac
  405b74:	00404405 	.word	0x00404405
  405b78:	00405589 	.word	0x00405589
  405b7c:	00404ea9 	.word	0x00404ea9
  405b80:	00406d09 	.word	0x00406d09
  405b84:	00406e11 	.word	0x00406e11
  405b88:	0040453d 	.word	0x0040453d
  405b8c:	0040babc 	.word	0x0040babc

00405b90 <vTaskGetRunTimeStats>:
/*----------------------------------------------------------*/

#if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )

	void vTaskGetRunTimeStats( char *pcWriteBuffer )
	{
  405b90:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  405b94:	b085      	sub	sp, #20
  405b96:	4605      	mov	r5, r0
		 * directly to get access to raw stats data, rather than indirectly
		 * through a call to vTaskGetRunTimeStats().
		 */

		/* Make sure the write buffer does not contain a string. */
		*pcWriteBuffer = 0x00;
  405b98:	2300      	movs	r3, #0
  405b9a:	7003      	strb	r3, [r0, #0]

		/* Take a snapshot of the number of tasks in case it changes while this
		function is executing. */
		uxArraySize = uxCurrentNumberOfTasks;
  405b9c:	4b27      	ldr	r3, [pc, #156]	; (405c3c <vTaskGetRunTimeStats+0xac>)
  405b9e:	681a      	ldr	r2, [r3, #0]
  405ba0:	9203      	str	r2, [sp, #12]

		/* Allocate an array index for each task. */
		pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) );
  405ba2:	6818      	ldr	r0, [r3, #0]
  405ba4:	0140      	lsls	r0, r0, #5
  405ba6:	4b26      	ldr	r3, [pc, #152]	; (405c40 <vTaskGetRunTimeStats+0xb0>)
  405ba8:	4798      	blx	r3

		if( pxTaskStatusArray != NULL )
  405baa:	2800      	cmp	r0, #0
  405bac:	d043      	beq.n	405c36 <vTaskGetRunTimeStats+0xa6>
  405bae:	4606      	mov	r6, r0
		{
			/* Generate the (binary) data. */
			uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, &ulTotalTime );
  405bb0:	9903      	ldr	r1, [sp, #12]
  405bb2:	aa01      	add	r2, sp, #4
  405bb4:	4b23      	ldr	r3, [pc, #140]	; (405c44 <vTaskGetRunTimeStats+0xb4>)
  405bb6:	4798      	blx	r3
  405bb8:	9003      	str	r0, [sp, #12]

			/* For percentage calculations. */
			ulTotalTime /= 100UL;
  405bba:	4a23      	ldr	r2, [pc, #140]	; (405c48 <vTaskGetRunTimeStats+0xb8>)
  405bbc:	9b01      	ldr	r3, [sp, #4]
  405bbe:	fba2 2303 	umull	r2, r3, r2, r3
  405bc2:	095b      	lsrs	r3, r3, #5
  405bc4:	9301      	str	r3, [sp, #4]

			/* Avoid divide by zero errors. */
			if( ulTotalTime > 0 )
  405bc6:	2b00      	cmp	r3, #0
  405bc8:	d032      	beq.n	405c30 <vTaskGetRunTimeStats+0xa0>
			{
				/* Create a human readable table from the binary data. */
				for( x = 0; x < uxArraySize; x++ )
  405bca:	2300      	movs	r3, #0
  405bcc:	9302      	str	r3, [sp, #8]
  405bce:	9a02      	ldr	r2, [sp, #8]
  405bd0:	9b03      	ldr	r3, [sp, #12]
  405bd2:	429a      	cmp	r2, r3
  405bd4:	d22c      	bcs.n	405c30 <vTaskGetRunTimeStats+0xa0>
					ulStatsAsPercentage = pxTaskStatusArray[ x ].ulRunTimeCounter / ulTotalTime;

					/* Write the task name to the string, padding with
					spaces so it can be printed in tabular form more
					easily. */
					pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );
  405bd6:	f8df 8084 	ldr.w	r8, [pc, #132]	; 405c5c <vTaskGetRunTimeStats+0xcc>
						}
						#else
						{
							/* sizeof( int ) == sizeof( long ) so a smaller
							printf() library can be used. */
							sprintf( pcWriteBuffer, "\t%u\t\t%u%%\r\n", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTimeCounter, ( unsigned int ) ulStatsAsPercentage );
  405bda:	f8df 9084 	ldr.w	r9, [pc, #132]	; 405c60 <vTaskGetRunTimeStats+0xd0>
  405bde:	4f1b      	ldr	r7, [pc, #108]	; (405c4c <vTaskGetRunTimeStats+0xbc>)
				for( x = 0; x < uxArraySize; x++ )
				{
					/* What percentage of the total run time has the task used?
					This will always be rounded down to the nearest integer.
					ulTotalRunTimeDiv100 has already been divided by 100. */
					ulStatsAsPercentage = pxTaskStatusArray[ x ].ulRunTimeCounter / ulTotalTime;
  405be0:	9b02      	ldr	r3, [sp, #8]
  405be2:	eb06 1343 	add.w	r3, r6, r3, lsl #5
  405be6:	699c      	ldr	r4, [r3, #24]
  405be8:	9b01      	ldr	r3, [sp, #4]
  405bea:	fbb4 f4f3 	udiv	r4, r4, r3

					/* Write the task name to the string, padding with
					spaces so it can be printed in tabular form more
					easily. */
					pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );
  405bee:	9b02      	ldr	r3, [sp, #8]
  405bf0:	eb06 1343 	add.w	r3, r6, r3, lsl #5
  405bf4:	4628      	mov	r0, r5
  405bf6:	6859      	ldr	r1, [r3, #4]
  405bf8:	47c0      	blx	r8
  405bfa:	4605      	mov	r5, r0

					if( ulStatsAsPercentage > 0UL )
  405bfc:	b13c      	cbz	r4, 405c0e <vTaskGetRunTimeStats+0x7e>
						}
						#else
						{
							/* sizeof( int ) == sizeof( long ) so a smaller
							printf() library can be used. */
							sprintf( pcWriteBuffer, "\t%u\t\t%u%%\r\n", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTimeCounter, ( unsigned int ) ulStatsAsPercentage );
  405bfe:	9b02      	ldr	r3, [sp, #8]
  405c00:	eb06 1343 	add.w	r3, r6, r3, lsl #5
  405c04:	4649      	mov	r1, r9
  405c06:	699a      	ldr	r2, [r3, #24]
  405c08:	4623      	mov	r3, r4
  405c0a:	47b8      	blx	r7
  405c0c:	e005      	b.n	405c1a <vTaskGetRunTimeStats+0x8a>
						}
						#else
						{
							/* sizeof( int ) == sizeof( long ) so a smaller
							printf() library can be used. */
							sprintf( pcWriteBuffer, "\t%u\t\t<1%%\r\n", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTimeCounter );
  405c0e:	9b02      	ldr	r3, [sp, #8]
  405c10:	eb06 1343 	add.w	r3, r6, r3, lsl #5
  405c14:	490e      	ldr	r1, [pc, #56]	; (405c50 <vTaskGetRunTimeStats+0xc0>)
  405c16:	699a      	ldr	r2, [r3, #24]
  405c18:	47b8      	blx	r7
						}
						#endif
					}

					pcWriteBuffer += strlen( pcWriteBuffer );
  405c1a:	4628      	mov	r0, r5
  405c1c:	4b0d      	ldr	r3, [pc, #52]	; (405c54 <vTaskGetRunTimeStats+0xc4>)
  405c1e:	4798      	blx	r3
  405c20:	4405      	add	r5, r0

			/* Avoid divide by zero errors. */
			if( ulTotalTime > 0 )
			{
				/* Create a human readable table from the binary data. */
				for( x = 0; x < uxArraySize; x++ )
  405c22:	9b02      	ldr	r3, [sp, #8]
  405c24:	3301      	adds	r3, #1
  405c26:	9302      	str	r3, [sp, #8]
  405c28:	9a02      	ldr	r2, [sp, #8]
  405c2a:	9b03      	ldr	r3, [sp, #12]
  405c2c:	429a      	cmp	r2, r3
  405c2e:	d3d7      	bcc.n	405be0 <vTaskGetRunTimeStats+0x50>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Free the array again. */
			vPortFree( pxTaskStatusArray );
  405c30:	4630      	mov	r0, r6
  405c32:	4b09      	ldr	r3, [pc, #36]	; (405c58 <vTaskGetRunTimeStats+0xc8>)
  405c34:	4798      	blx	r3
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
  405c36:	b005      	add	sp, #20
  405c38:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  405c3c:	2000aeac 	.word	0x2000aeac
  405c40:	00404405 	.word	0x00404405
  405c44:	00405589 	.word	0x00405589
  405c48:	51eb851f 	.word	0x51eb851f
  405c4c:	00406d09 	.word	0x00406d09
  405c50:	0040bad8 	.word	0x0040bad8
  405c54:	00406e11 	.word	0x00406e11
  405c58:	0040453d 	.word	0x0040453d
  405c5c:	00404ea9 	.word	0x00404ea9
  405c60:	0040bacc 	.word	0x0040bacc

00405c64 <pvTaskIncrementMutexHeldCount>:

	void *pvTaskIncrementMutexHeldCount( void )
	{
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
  405c64:	4b05      	ldr	r3, [pc, #20]	; (405c7c <pvTaskIncrementMutexHeldCount+0x18>)
  405c66:	681b      	ldr	r3, [r3, #0]
  405c68:	b123      	cbz	r3, 405c74 <pvTaskIncrementMutexHeldCount+0x10>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
  405c6a:	4b04      	ldr	r3, [pc, #16]	; (405c7c <pvTaskIncrementMutexHeldCount+0x18>)
  405c6c:	681a      	ldr	r2, [r3, #0]
  405c6e:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
  405c70:	3301      	adds	r3, #1
  405c72:	64d3      	str	r3, [r2, #76]	; 0x4c
		}

		return pxCurrentTCB;
  405c74:	4b01      	ldr	r3, [pc, #4]	; (405c7c <pvTaskIncrementMutexHeldCount+0x18>)
  405c76:	6818      	ldr	r0, [r3, #0]
	}
  405c78:	4770      	bx	lr
  405c7a:	bf00      	nop
  405c7c:	2000ae80 	.word	0x2000ae80

00405c80 <prvInsertTimerInActiveList>:
	return xTimeNow;
}
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
  405c80:	b510      	push	{r4, lr}
  405c82:	4604      	mov	r4, r0
BaseType_t xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
  405c84:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
  405c86:	6120      	str	r0, [r4, #16]

	if( xNextExpiryTime <= xTimeNow )
  405c88:	4291      	cmp	r1, r2
  405c8a:	d80a      	bhi.n	405ca2 <prvInsertTimerInActiveList+0x22>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( xTimeNow - xCommandTime ) >= pxTimer->xTimerPeriodInTicks )
  405c8c:	1ad2      	subs	r2, r2, r3
  405c8e:	6983      	ldr	r3, [r0, #24]
  405c90:	429a      	cmp	r2, r3
  405c92:	d211      	bcs.n	405cb8 <prvInsertTimerInActiveList+0x38>
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
  405c94:	4b0a      	ldr	r3, [pc, #40]	; (405cc0 <prvInsertTimerInActiveList+0x40>)
  405c96:	6818      	ldr	r0, [r3, #0]
  405c98:	1d21      	adds	r1, r4, #4
  405c9a:	4b0a      	ldr	r3, [pc, #40]	; (405cc4 <prvInsertTimerInActiveList+0x44>)
  405c9c:	4798      	blx	r3
}
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
BaseType_t xProcessTimerNow = pdFALSE;
  405c9e:	2000      	movs	r0, #0
  405ca0:	bd10      	pop	{r4, pc}
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
  405ca2:	429a      	cmp	r2, r3
  405ca4:	d201      	bcs.n	405caa <prvInsertTimerInActiveList+0x2a>
  405ca6:	4299      	cmp	r1, r3
  405ca8:	d208      	bcs.n	405cbc <prvInsertTimerInActiveList+0x3c>
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
  405caa:	4b07      	ldr	r3, [pc, #28]	; (405cc8 <prvInsertTimerInActiveList+0x48>)
  405cac:	6818      	ldr	r0, [r3, #0]
  405cae:	1d21      	adds	r1, r4, #4
  405cb0:	4b04      	ldr	r3, [pc, #16]	; (405cc4 <prvInsertTimerInActiveList+0x44>)
  405cb2:	4798      	blx	r3
}
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
BaseType_t xProcessTimerNow = pdFALSE;
  405cb4:	2000      	movs	r0, #0
  405cb6:	bd10      	pop	{r4, pc}
		timer was issued, and the time the command was processed? */
		if( ( xTimeNow - xCommandTime ) >= pxTimer->xTimerPeriodInTicks )
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
  405cb8:	2001      	movs	r0, #1
  405cba:	bd10      	pop	{r4, pc}
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
  405cbc:	2001      	movs	r0, #1
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
		}
	}

	return xProcessTimerNow;
}
  405cbe:	bd10      	pop	{r4, pc}
  405cc0:	2000af14 	.word	0x2000af14
  405cc4:	004040a5 	.word	0x004040a5
  405cc8:	2000aee0 	.word	0x2000aee0

00405ccc <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
  405ccc:	b570      	push	{r4, r5, r6, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
  405cce:	4b0f      	ldr	r3, [pc, #60]	; (405d0c <prvCheckForValidListAndQueue+0x40>)
  405cd0:	4798      	blx	r3
	{
		if( xTimerQueue == NULL )
  405cd2:	4b0f      	ldr	r3, [pc, #60]	; (405d10 <prvCheckForValidListAndQueue+0x44>)
  405cd4:	681b      	ldr	r3, [r3, #0]
  405cd6:	b9ab      	cbnz	r3, 405d04 <prvCheckForValidListAndQueue+0x38>
		{
			vListInitialise( &xActiveTimerList1 );
  405cd8:	4d0e      	ldr	r5, [pc, #56]	; (405d14 <prvCheckForValidListAndQueue+0x48>)
  405cda:	4628      	mov	r0, r5
  405cdc:	4e0e      	ldr	r6, [pc, #56]	; (405d18 <prvCheckForValidListAndQueue+0x4c>)
  405cde:	47b0      	blx	r6
			vListInitialise( &xActiveTimerList2 );
  405ce0:	4c0e      	ldr	r4, [pc, #56]	; (405d1c <prvCheckForValidListAndQueue+0x50>)
  405ce2:	4620      	mov	r0, r4
  405ce4:	47b0      	blx	r6
			pxCurrentTimerList = &xActiveTimerList1;
  405ce6:	4b0e      	ldr	r3, [pc, #56]	; (405d20 <prvCheckForValidListAndQueue+0x54>)
  405ce8:	601d      	str	r5, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
  405cea:	4b0e      	ldr	r3, [pc, #56]	; (405d24 <prvCheckForValidListAndQueue+0x58>)
  405cec:	601c      	str	r4, [r3, #0]
			xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
  405cee:	2005      	movs	r0, #5
  405cf0:	2110      	movs	r1, #16
  405cf2:	2200      	movs	r2, #0
  405cf4:	4b0c      	ldr	r3, [pc, #48]	; (405d28 <prvCheckForValidListAndQueue+0x5c>)
  405cf6:	4798      	blx	r3
  405cf8:	4b05      	ldr	r3, [pc, #20]	; (405d10 <prvCheckForValidListAndQueue+0x44>)
  405cfa:	6018      	str	r0, [r3, #0]
			configASSERT( xTimerQueue );
  405cfc:	b910      	cbnz	r0, 405d04 <prvCheckForValidListAndQueue+0x38>
  405cfe:	4b0b      	ldr	r3, [pc, #44]	; (405d2c <prvCheckForValidListAndQueue+0x60>)
  405d00:	4798      	blx	r3
  405d02:	e7fe      	b.n	405d02 <prvCheckForValidListAndQueue+0x36>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
  405d04:	4b0a      	ldr	r3, [pc, #40]	; (405d30 <prvCheckForValidListAndQueue+0x64>)
  405d06:	4798      	blx	r3
  405d08:	bd70      	pop	{r4, r5, r6, pc}
  405d0a:	bf00      	nop
  405d0c:	004041a9 	.word	0x004041a9
  405d10:	2000af10 	.word	0x2000af10
  405d14:	2000aee4 	.word	0x2000aee4
  405d18:	0040406d 	.word	0x0040406d
  405d1c:	2000aef8 	.word	0x2000aef8
  405d20:	2000aee0 	.word	0x2000aee0
  405d24:	2000af14 	.word	0x2000af14
  405d28:	004047cd 	.word	0x004047cd
  405d2c:	00404179 	.word	0x00404179
  405d30:	004041e9 	.word	0x004041e9

00405d34 <xTimerCreateTimerTask>:
static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty ) PRIVILEGED_FUNCTION;

/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
  405d34:	b510      	push	{r4, lr}
  405d36:	b084      	sub	sp, #16

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
  405d38:	4b0b      	ldr	r3, [pc, #44]	; (405d68 <xTimerCreateTimerTask+0x34>)
  405d3a:	4798      	blx	r3

	if( xTimerQueue != NULL )
  405d3c:	4b0b      	ldr	r3, [pc, #44]	; (405d6c <xTimerCreateTimerTask+0x38>)
  405d3e:	681b      	ldr	r3, [r3, #0]
  405d40:	b163      	cbz	r3, 405d5c <xTimerCreateTimerTask+0x28>
			xReturn = xTaskCreate( prvTimerTask, "Tmr Svc", ( uint16_t ) configTIMER_TASK_STACK_DEPTH, NULL, ( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT, &xTimerTaskHandle );
		}
		#else
		{
			/* Create the timer task without storing its handle. */
			xReturn = xTaskCreate( prvTimerTask, "Tmr Svc", ( uint16_t ) configTIMER_TASK_STACK_DEPTH, NULL, ( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT, NULL);
  405d42:	2302      	movs	r3, #2
  405d44:	9300      	str	r3, [sp, #0]
  405d46:	2300      	movs	r3, #0
  405d48:	9301      	str	r3, [sp, #4]
  405d4a:	9302      	str	r3, [sp, #8]
  405d4c:	9303      	str	r3, [sp, #12]
  405d4e:	4808      	ldr	r0, [pc, #32]	; (405d70 <xTimerCreateTimerTask+0x3c>)
  405d50:	4908      	ldr	r1, [pc, #32]	; (405d74 <xTimerCreateTimerTask+0x40>)
  405d52:	f44f 7282 	mov.w	r2, #260	; 0x104
  405d56:	4c08      	ldr	r4, [pc, #32]	; (405d78 <xTimerCreateTimerTask+0x44>)
  405d58:	47a0      	blx	r4
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
  405d5a:	b910      	cbnz	r0, 405d62 <xTimerCreateTimerTask+0x2e>
  405d5c:	4b07      	ldr	r3, [pc, #28]	; (405d7c <xTimerCreateTimerTask+0x48>)
  405d5e:	4798      	blx	r3
  405d60:	e7fe      	b.n	405d60 <xTimerCreateTimerTask+0x2c>
	return xReturn;
}
  405d62:	b004      	add	sp, #16
  405d64:	bd10      	pop	{r4, pc}
  405d66:	bf00      	nop
  405d68:	00405ccd 	.word	0x00405ccd
  405d6c:	2000af10 	.word	0x2000af10
  405d70:	00405ee1 	.word	0x00405ee1
  405d74:	0040bae4 	.word	0x0040bae4
  405d78:	00404edd 	.word	0x00404edd
  405d7c:	00404179 	.word	0x00404179

00405d80 <xTimerCreate>:
/*-----------------------------------------------------------*/

TimerHandle_t xTimerCreate( const char * const pcTimerName, const TickType_t xTimerPeriodInTicks, const UBaseType_t uxAutoReload, void * const pvTimerID, TimerCallbackFunction_t pxCallbackFunction ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
  405d80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
Timer_t *pxNewTimer;

	/* Allocate the timer structure. */
	if( xTimerPeriodInTicks == ( TickType_t ) 0U )
  405d84:	b1b1      	cbz	r1, 405db4 <xTimerCreate+0x34>
  405d86:	4680      	mov	r8, r0
  405d88:	4616      	mov	r6, r2
  405d8a:	461d      	mov	r5, r3
  405d8c:	460f      	mov	r7, r1
	{
		pxNewTimer = NULL;
	}
	else
	{
		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) );
  405d8e:	202c      	movs	r0, #44	; 0x2c
  405d90:	4b0b      	ldr	r3, [pc, #44]	; (405dc0 <xTimerCreate+0x40>)
  405d92:	4798      	blx	r3
		if( pxNewTimer != NULL )
  405d94:	4604      	mov	r4, r0
  405d96:	b180      	cbz	r0, 405dba <xTimerCreate+0x3a>
		{
			/* Ensure the infrastructure used by the timer service task has been
			created/initialised. */
			prvCheckForValidListAndQueue();
  405d98:	4b0a      	ldr	r3, [pc, #40]	; (405dc4 <xTimerCreate+0x44>)
  405d9a:	4798      	blx	r3

			/* Initialise the timer structure members using the function parameters. */
			pxNewTimer->pcTimerName = pcTimerName;
  405d9c:	f8c4 8000 	str.w	r8, [r4]
			pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
  405da0:	61a7      	str	r7, [r4, #24]
			pxNewTimer->uxAutoReload = uxAutoReload;
  405da2:	61e6      	str	r6, [r4, #28]
			pxNewTimer->pvTimerID = pvTimerID;
  405da4:	6225      	str	r5, [r4, #32]
			pxNewTimer->pxCallbackFunction = pxCallbackFunction;
  405da6:	9b06      	ldr	r3, [sp, #24]
  405da8:	6263      	str	r3, [r4, #36]	; 0x24
			vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
  405daa:	1d20      	adds	r0, r4, #4
  405dac:	4b06      	ldr	r3, [pc, #24]	; (405dc8 <xTimerCreate+0x48>)
  405dae:	4798      	blx	r3
  405db0:	e003      	b.n	405dba <xTimerCreate+0x3a>
			traceTIMER_CREATE_FAILED();
		}
	}

	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
  405db2:	e7fe      	b.n	405db2 <xTimerCreate+0x32>
  405db4:	4b05      	ldr	r3, [pc, #20]	; (405dcc <xTimerCreate+0x4c>)
  405db6:	4798      	blx	r3
  405db8:	e7fb      	b.n	405db2 <xTimerCreate+0x32>

	return ( TimerHandle_t ) pxNewTimer;
}
  405dba:	4620      	mov	r0, r4
  405dbc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  405dc0:	00404405 	.word	0x00404405
  405dc4:	00405ccd 	.word	0x00405ccd
  405dc8:	00404085 	.word	0x00404085
  405dcc:	00404179 	.word	0x00404179

00405dd0 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
  405dd0:	b510      	push	{r4, lr}
  405dd2:	b084      	sub	sp, #16
BaseType_t xReturn = pdFAIL;
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
  405dd4:	b910      	cbnz	r0, 405ddc <xTimerGenericCommand+0xc>
  405dd6:	4b11      	ldr	r3, [pc, #68]	; (405e1c <xTimerGenericCommand+0x4c>)
  405dd8:	4798      	blx	r3
  405dda:	e7fe      	b.n	405dda <xTimerGenericCommand+0xa>
  405ddc:	4604      	mov	r4, r0

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
  405dde:	4810      	ldr	r0, [pc, #64]	; (405e20 <xTimerGenericCommand+0x50>)
  405de0:	6800      	ldr	r0, [r0, #0]
  405de2:	b1c0      	cbz	r0, 405e16 <xTimerGenericCommand+0x46>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
  405de4:	9100      	str	r1, [sp, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
  405de6:	9201      	str	r2, [sp, #4]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
  405de8:	9402      	str	r4, [sp, #8]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
  405dea:	2905      	cmp	r1, #5
  405dec:	dc0d      	bgt.n	405e0a <xTimerGenericCommand+0x3a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
  405dee:	4b0d      	ldr	r3, [pc, #52]	; (405e24 <xTimerGenericCommand+0x54>)
  405df0:	4798      	blx	r3
  405df2:	2802      	cmp	r0, #2
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
  405df4:	4b0a      	ldr	r3, [pc, #40]	; (405e20 <xTimerGenericCommand+0x50>)
  405df6:	6818      	ldr	r0, [r3, #0]
  405df8:	4669      	mov	r1, sp
  405dfa:	bf07      	ittee	eq
  405dfc:	9a06      	ldreq	r2, [sp, #24]
  405dfe:	2300      	moveq	r3, #0
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
  405e00:	2200      	movne	r2, #0
  405e02:	4613      	movne	r3, r2
  405e04:	4c08      	ldr	r4, [pc, #32]	; (405e28 <xTimerGenericCommand+0x58>)
  405e06:	47a0      	blx	r4
  405e08:	e006      	b.n	405e18 <xTimerGenericCommand+0x48>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
  405e0a:	4669      	mov	r1, sp
  405e0c:	461a      	mov	r2, r3
  405e0e:	2300      	movs	r3, #0
  405e10:	4c06      	ldr	r4, [pc, #24]	; (405e2c <xTimerGenericCommand+0x5c>)
  405e12:	47a0      	blx	r4
  405e14:	e000      	b.n	405e18 <xTimerGenericCommand+0x48>
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
BaseType_t xReturn = pdFAIL;
  405e16:	2000      	movs	r0, #0
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
}
  405e18:	b004      	add	sp, #16
  405e1a:	bd10      	pop	{r4, pc}
  405e1c:	00404179 	.word	0x00404179
  405e20:	2000af10 	.word	0x2000af10
  405e24:	00405941 	.word	0x00405941
  405e28:	0040486d 	.word	0x0040486d
  405e2c:	00404a39 	.word	0x00404a39

00405e30 <prvSampleTimeNow>:
	return xNextExpireTime;
}
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
  405e30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  405e34:	b082      	sub	sp, #8
  405e36:	4680      	mov	r8, r0
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
  405e38:	4b21      	ldr	r3, [pc, #132]	; (405ec0 <prvSampleTimeNow+0x90>)
  405e3a:	4798      	blx	r3
  405e3c:	4607      	mov	r7, r0

	if( xTimeNow < xLastTime )
  405e3e:	4b21      	ldr	r3, [pc, #132]	; (405ec4 <prvSampleTimeNow+0x94>)
  405e40:	681b      	ldr	r3, [r3, #0]
  405e42:	4298      	cmp	r0, r3
  405e44:	d233      	bcs.n	405eae <prvSampleTimeNow+0x7e>
  405e46:	e023      	b.n	405e90 <prvSampleTimeNow+0x60>
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
  405e48:	68db      	ldr	r3, [r3, #12]
  405e4a:	f8d3 a000 	ldr.w	sl, [r3]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
  405e4e:	68dc      	ldr	r4, [r3, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
  405e50:	f104 0904 	add.w	r9, r4, #4
  405e54:	4648      	mov	r0, r9
  405e56:	47b0      	blx	r6
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
  405e58:	6a63      	ldr	r3, [r4, #36]	; 0x24
  405e5a:	4620      	mov	r0, r4
  405e5c:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
  405e5e:	69e3      	ldr	r3, [r4, #28]
  405e60:	2b01      	cmp	r3, #1
  405e62:	d117      	bne.n	405e94 <prvSampleTimeNow+0x64>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
  405e64:	69a3      	ldr	r3, [r4, #24]
  405e66:	4453      	add	r3, sl
			if( xReloadTime > xNextExpireTime )
  405e68:	4553      	cmp	r3, sl
  405e6a:	d906      	bls.n	405e7a <prvSampleTimeNow+0x4a>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
  405e6c:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
  405e6e:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
  405e70:	6828      	ldr	r0, [r5, #0]
  405e72:	4649      	mov	r1, r9
  405e74:	4b14      	ldr	r3, [pc, #80]	; (405ec8 <prvSampleTimeNow+0x98>)
  405e76:	4798      	blx	r3
  405e78:	e00c      	b.n	405e94 <prvSampleTimeNow+0x64>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
  405e7a:	2300      	movs	r3, #0
  405e7c:	9300      	str	r3, [sp, #0]
  405e7e:	4620      	mov	r0, r4
  405e80:	4619      	mov	r1, r3
  405e82:	4652      	mov	r2, sl
  405e84:	4c11      	ldr	r4, [pc, #68]	; (405ecc <prvSampleTimeNow+0x9c>)
  405e86:	47a0      	blx	r4
				configASSERT( xResult );
  405e88:	b920      	cbnz	r0, 405e94 <prvSampleTimeNow+0x64>
  405e8a:	4b11      	ldr	r3, [pc, #68]	; (405ed0 <prvSampleTimeNow+0xa0>)
  405e8c:	4798      	blx	r3
  405e8e:	e7fe      	b.n	405e8e <prvSampleTimeNow+0x5e>

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
  405e90:	4d10      	ldr	r5, [pc, #64]	; (405ed4 <prvSampleTimeNow+0xa4>)
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
  405e92:	4e11      	ldr	r6, [pc, #68]	; (405ed8 <prvSampleTimeNow+0xa8>)

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
  405e94:	682b      	ldr	r3, [r5, #0]
  405e96:	681a      	ldr	r2, [r3, #0]
  405e98:	2a00      	cmp	r2, #0
  405e9a:	d1d5      	bne.n	405e48 <prvSampleTimeNow+0x18>
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
	pxCurrentTimerList = pxOverflowTimerList;
  405e9c:	4a0f      	ldr	r2, [pc, #60]	; (405edc <prvSampleTimeNow+0xac>)
  405e9e:	6810      	ldr	r0, [r2, #0]
  405ea0:	490c      	ldr	r1, [pc, #48]	; (405ed4 <prvSampleTimeNow+0xa4>)
  405ea2:	6008      	str	r0, [r1, #0]
	pxOverflowTimerList = pxTemp;
  405ea4:	6013      	str	r3, [r2, #0]
	xTimeNow = xTaskGetTickCount();

	if( xTimeNow < xLastTime )
	{
		prvSwitchTimerLists();
		*pxTimerListsWereSwitched = pdTRUE;
  405ea6:	2301      	movs	r3, #1
  405ea8:	f8c8 3000 	str.w	r3, [r8]
  405eac:	e002      	b.n	405eb4 <prvSampleTimeNow+0x84>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
  405eae:	2300      	movs	r3, #0
  405eb0:	f8c8 3000 	str.w	r3, [r8]
	}

	xLastTime = xTimeNow;
  405eb4:	4b03      	ldr	r3, [pc, #12]	; (405ec4 <prvSampleTimeNow+0x94>)
  405eb6:	601f      	str	r7, [r3, #0]

	return xTimeNow;
}
  405eb8:	4638      	mov	r0, r7
  405eba:	b002      	add	sp, #8
  405ebc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  405ec0:	00405229 	.word	0x00405229
  405ec4:	2000af0c 	.word	0x2000af0c
  405ec8:	004040a5 	.word	0x004040a5
  405ecc:	00405dd1 	.word	0x00405dd1
  405ed0:	00404179 	.word	0x00404179
  405ed4:	2000aee0 	.word	0x2000aee0
  405ed8:	004040d9 	.word	0x004040d9
  405edc:	2000af14 	.word	0x2000af14

00405ee0 <prvTimerTask>:
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
}
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
  405ee0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  405ee4:	b089      	sub	sp, #36	; 0x24
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
  405ee6:	4f59      	ldr	r7, [pc, #356]	; (40604c <prvTimerTask+0x16c>)
					/* The current timer list is empty - is the overflow list
					also empty? */
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
				}

				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
  405ee8:	4c59      	ldr	r4, [pc, #356]	; (406050 <prvTimerTask+0x170>)
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
  405eea:	4d5a      	ldr	r5, [pc, #360]	; (406054 <prvTimerTask+0x174>)
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
  405eec:	683b      	ldr	r3, [r7, #0]
	if( *pxListWasEmpty == pdFALSE )
  405eee:	681a      	ldr	r2, [r3, #0]
  405ef0:	b15a      	cbz	r2, 405f0a <prvTimerTask+0x2a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
  405ef2:	68db      	ldr	r3, [r3, #12]
  405ef4:	f8d3 8000 	ldr.w	r8, [r3]
static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
  405ef8:	4b57      	ldr	r3, [pc, #348]	; (406058 <prvTimerTask+0x178>)
  405efa:	4798      	blx	r3
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
  405efc:	a804      	add	r0, sp, #16
  405efe:	4b57      	ldr	r3, [pc, #348]	; (40605c <prvTimerTask+0x17c>)
  405f00:	4798      	blx	r3
  405f02:	4606      	mov	r6, r0
		if( xTimerListsWereSwitched == pdFALSE )
  405f04:	9b04      	ldr	r3, [sp, #16]
  405f06:	b14b      	cbz	r3, 405f1c <prvTimerTask+0x3c>
  405f08:	e049      	b.n	405f9e <prvTimerTask+0xbe>
static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
  405f0a:	4b53      	ldr	r3, [pc, #332]	; (406058 <prvTimerTask+0x178>)
  405f0c:	4798      	blx	r3
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
  405f0e:	a804      	add	r0, sp, #16
  405f10:	4b52      	ldr	r3, [pc, #328]	; (40605c <prvTimerTask+0x17c>)
  405f12:	4798      	blx	r3
  405f14:	4606      	mov	r6, r0
		if( xTimerListsWereSwitched == pdFALSE )
  405f16:	9b04      	ldr	r3, [sp, #16]
  405f18:	b363      	cbz	r3, 405f74 <prvTimerTask+0x94>
  405f1a:	e040      	b.n	405f9e <prvTimerTask+0xbe>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
  405f1c:	4580      	cmp	r8, r0
  405f1e:	bf88      	it	hi
  405f20:	2200      	movhi	r2, #0
  405f22:	d830      	bhi.n	405f86 <prvTimerTask+0xa6>
			{
				( void ) xTaskResumeAll();
  405f24:	4b4e      	ldr	r3, [pc, #312]	; (406060 <prvTimerTask+0x180>)
  405f26:	4798      	blx	r3
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
  405f28:	683b      	ldr	r3, [r7, #0]
  405f2a:	68db      	ldr	r3, [r3, #12]
  405f2c:	f8d3 900c 	ldr.w	r9, [r3, #12]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
  405f30:	f109 0004 	add.w	r0, r9, #4
  405f34:	4b4b      	ldr	r3, [pc, #300]	; (406064 <prvTimerTask+0x184>)
  405f36:	4798      	blx	r3
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
  405f38:	f8d9 301c 	ldr.w	r3, [r9, #28]
  405f3c:	2b01      	cmp	r3, #1
  405f3e:	d114      	bne.n	405f6a <prvTimerTask+0x8a>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) == pdTRUE )
  405f40:	f8d9 1018 	ldr.w	r1, [r9, #24]
  405f44:	4648      	mov	r0, r9
  405f46:	4441      	add	r1, r8
  405f48:	4632      	mov	r2, r6
  405f4a:	4643      	mov	r3, r8
  405f4c:	4e46      	ldr	r6, [pc, #280]	; (406068 <prvTimerTask+0x188>)
  405f4e:	47b0      	blx	r6
  405f50:	2801      	cmp	r0, #1
  405f52:	d10a      	bne.n	405f6a <prvTimerTask+0x8a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
  405f54:	2300      	movs	r3, #0
  405f56:	9300      	str	r3, [sp, #0]
  405f58:	4648      	mov	r0, r9
  405f5a:	4619      	mov	r1, r3
  405f5c:	4642      	mov	r2, r8
  405f5e:	4e43      	ldr	r6, [pc, #268]	; (40606c <prvTimerTask+0x18c>)
  405f60:	47b0      	blx	r6
			configASSERT( xResult );
  405f62:	b910      	cbnz	r0, 405f6a <prvTimerTask+0x8a>
  405f64:	4b42      	ldr	r3, [pc, #264]	; (406070 <prvTimerTask+0x190>)
  405f66:	4798      	blx	r3
  405f68:	e7fe      	b.n	405f68 <prvTimerTask+0x88>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
  405f6a:	f8d9 3024 	ldr.w	r3, [r9, #36]	; 0x24
  405f6e:	4648      	mov	r0, r9
  405f70:	4798      	blx	r3
  405f72:	e062      	b.n	40603a <prvTimerTask+0x15a>
				case when the current timer list is empty. */
				if( xListWasEmpty != pdFALSE )
				{
					/* The current timer list is empty - is the overflow list
					also empty? */
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
  405f74:	4b3f      	ldr	r3, [pc, #252]	; (406074 <prvTimerTask+0x194>)
  405f76:	681b      	ldr	r3, [r3, #0]
  405f78:	681a      	ldr	r2, [r3, #0]
  405f7a:	fab2 f282 	clz	r2, r2
  405f7e:	0952      	lsrs	r2, r2, #5
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
  405f80:	f04f 0800 	mov.w	r8, #0
  405f84:	e7ff      	b.n	405f86 <prvTimerTask+0xa6>
					/* The current timer list is empty - is the overflow list
					also empty? */
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
				}

				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
  405f86:	6820      	ldr	r0, [r4, #0]
  405f88:	ebc6 0108 	rsb	r1, r6, r8
  405f8c:	4b3a      	ldr	r3, [pc, #232]	; (406078 <prvTimerTask+0x198>)
  405f8e:	4798      	blx	r3

				if( xTaskResumeAll() == pdFALSE )
  405f90:	4b33      	ldr	r3, [pc, #204]	; (406060 <prvTimerTask+0x180>)
  405f92:	4798      	blx	r3
  405f94:	2800      	cmp	r0, #0
  405f96:	d150      	bne.n	40603a <prvTimerTask+0x15a>
				{
					/* Yield to wait for either a command to arrive, or the
					block time to expire.  If a command arrived between the
					critical section being exited and this yield then the yield
					will not cause the task to block. */
					portYIELD_WITHIN_API();
  405f98:	4b38      	ldr	r3, [pc, #224]	; (40607c <prvTimerTask+0x19c>)
  405f9a:	4798      	blx	r3
  405f9c:	e04d      	b.n	40603a <prvTimerTask+0x15a>
				}
			}
		}
		else
		{
			( void ) xTaskResumeAll();
  405f9e:	4b30      	ldr	r3, [pc, #192]	; (406060 <prvTimerTask+0x180>)
  405fa0:	4798      	blx	r3
  405fa2:	e04a      	b.n	40603a <prvTimerTask+0x15a>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
  405fa4:	9b04      	ldr	r3, [sp, #16]
  405fa6:	2b00      	cmp	r3, #0
  405fa8:	da06      	bge.n	405fb8 <prvTimerTask+0xd8>
				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
  405faa:	9806      	ldr	r0, [sp, #24]
  405fac:	9907      	ldr	r1, [sp, #28]
  405fae:	9b05      	ldr	r3, [sp, #20]
  405fb0:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
  405fb2:	9b04      	ldr	r3, [sp, #16]
  405fb4:	2b00      	cmp	r3, #0
  405fb6:	db40      	blt.n	40603a <prvTimerTask+0x15a>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
  405fb8:	9e06      	ldr	r6, [sp, #24]

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
  405fba:	6973      	ldr	r3, [r6, #20]
  405fbc:	b113      	cbz	r3, 405fc4 <prvTimerTask+0xe4>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
  405fbe:	1d30      	adds	r0, r6, #4
  405fc0:	4b28      	ldr	r3, [pc, #160]	; (406064 <prvTimerTask+0x184>)
  405fc2:	4798      	blx	r3
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
  405fc4:	a803      	add	r0, sp, #12
  405fc6:	4b25      	ldr	r3, [pc, #148]	; (40605c <prvTimerTask+0x17c>)
  405fc8:	4798      	blx	r3
  405fca:	4686      	mov	lr, r0

			switch( xMessage.xMessageID )
  405fcc:	9a04      	ldr	r2, [sp, #16]
  405fce:	2a09      	cmp	r2, #9
  405fd0:	d833      	bhi.n	40603a <prvTimerTask+0x15a>
  405fd2:	e8df f002 	tbb	[pc, r2]
  405fd6:	0505      	.short	0x0505
  405fd8:	2f223205 	.word	0x2f223205
  405fdc:	22320505 	.word	0x22320505
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) == pdTRUE )
  405fe0:	9b05      	ldr	r3, [sp, #20]
  405fe2:	69b1      	ldr	r1, [r6, #24]
  405fe4:	4630      	mov	r0, r6
  405fe6:	4419      	add	r1, r3
  405fe8:	4672      	mov	r2, lr
  405fea:	f8df c07c 	ldr.w	ip, [pc, #124]	; 406068 <prvTimerTask+0x188>
  405fee:	47e0      	blx	ip
  405ff0:	2801      	cmp	r0, #1
  405ff2:	d122      	bne.n	40603a <prvTimerTask+0x15a>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
  405ff4:	6a73      	ldr	r3, [r6, #36]	; 0x24
  405ff6:	4630      	mov	r0, r6
  405ff8:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
  405ffa:	69f3      	ldr	r3, [r6, #28]
  405ffc:	2b01      	cmp	r3, #1
  405ffe:	d11c      	bne.n	40603a <prvTimerTask+0x15a>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
  406000:	69b2      	ldr	r2, [r6, #24]
  406002:	2300      	movs	r3, #0
  406004:	9300      	str	r3, [sp, #0]
  406006:	4630      	mov	r0, r6
  406008:	4619      	mov	r1, r3
  40600a:	9e05      	ldr	r6, [sp, #20]
  40600c:	4432      	add	r2, r6
  40600e:	4e17      	ldr	r6, [pc, #92]	; (40606c <prvTimerTask+0x18c>)
  406010:	47b0      	blx	r6
							configASSERT( xResult );
  406012:	b990      	cbnz	r0, 40603a <prvTimerTask+0x15a>
  406014:	4b16      	ldr	r3, [pc, #88]	; (406070 <prvTimerTask+0x190>)
  406016:	4798      	blx	r3
  406018:	e7fe      	b.n	406018 <prvTimerTask+0x138>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
  40601a:	9905      	ldr	r1, [sp, #20]
  40601c:	61b1      	str	r1, [r6, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
  40601e:	b911      	cbnz	r1, 406026 <prvTimerTask+0x146>
  406020:	4b13      	ldr	r3, [pc, #76]	; (406070 <prvTimerTask+0x190>)
  406022:	4798      	blx	r3
  406024:	e7fe      	b.n	406024 <prvTimerTask+0x144>
					longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot be
					zero the next expiry time can only be in the future, meaning
					(unlike for the xTimerStart() case above) there is no fail case
					that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
  406026:	4630      	mov	r0, r6
  406028:	4471      	add	r1, lr
  40602a:	4672      	mov	r2, lr
  40602c:	4673      	mov	r3, lr
  40602e:	4e0e      	ldr	r6, [pc, #56]	; (406068 <prvTimerTask+0x188>)
  406030:	47b0      	blx	r6
  406032:	e002      	b.n	40603a <prvTimerTask+0x15a>
					break;

				case tmrCOMMAND_DELETE :
					/* The timer has already been removed from the active list,
					just free up the memory. */
					vPortFree( pxTimer );
  406034:	4630      	mov	r0, r6
  406036:	4b12      	ldr	r3, [pc, #72]	; (406080 <prvTimerTask+0x1a0>)
  406038:	4798      	blx	r3
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
  40603a:	6820      	ldr	r0, [r4, #0]
  40603c:	a904      	add	r1, sp, #16
  40603e:	2200      	movs	r2, #0
  406040:	4613      	mov	r3, r2
  406042:	47a8      	blx	r5
  406044:	2800      	cmp	r0, #0
  406046:	d1ad      	bne.n	405fa4 <prvTimerTask+0xc4>
  406048:	e750      	b.n	405eec <prvTimerTask+0xc>
  40604a:	bf00      	nop
  40604c:	2000aee0 	.word	0x2000aee0
  406050:	2000af10 	.word	0x2000af10
  406054:	00404bb1 	.word	0x00404bb1
  406058:	00405219 	.word	0x00405219
  40605c:	00405e31 	.word	0x00405e31
  406060:	00405385 	.word	0x00405385
  406064:	004040d9 	.word	0x004040d9
  406068:	00405c81 	.word	0x00405c81
  40606c:	00405dd1 	.word	0x00405dd1
  406070:	00404179 	.word	0x00404179
  406074:	2000af14 	.word	0x2000af14
  406078:	00404d1d 	.word	0x00404d1d
  40607c:	00404161 	.word	0x00404161
  406080:	0040453d 	.word	0x0040453d

00406084 <delete_task_command>:
  406084:	b510      	push	{r4, lr}
  406086:	b910      	cbnz	r0, 40608e <delete_task_command+0xa>
  406088:	4b0e      	ldr	r3, [pc, #56]	; (4060c4 <delete_task_command+0x40>)
  40608a:	4798      	blx	r3
  40608c:	e7fe      	b.n	40608c <delete_task_command+0x8>
  40608e:	4604      	mov	r4, r0
  406090:	4b0d      	ldr	r3, [pc, #52]	; (4060c8 <delete_task_command+0x44>)
  406092:	6818      	ldr	r0, [r3, #0]
  406094:	b170      	cbz	r0, 4060b4 <delete_task_command+0x30>
  406096:	4b0d      	ldr	r3, [pc, #52]	; (4060cc <delete_task_command+0x48>)
  406098:	4798      	blx	r3
  40609a:	2200      	movs	r2, #0
  40609c:	4b0a      	ldr	r3, [pc, #40]	; (4060c8 <delete_task_command+0x44>)
  40609e:	601a      	str	r2, [r3, #0]
  4060a0:	4b0b      	ldr	r3, [pc, #44]	; (4060d0 <delete_task_command+0x4c>)
  4060a2:	cb07      	ldmia	r3!, {r0, r1, r2}
  4060a4:	6020      	str	r0, [r4, #0]
  4060a6:	6061      	str	r1, [r4, #4]
  4060a8:	60a2      	str	r2, [r4, #8]
  4060aa:	881a      	ldrh	r2, [r3, #0]
  4060ac:	789b      	ldrb	r3, [r3, #2]
  4060ae:	81a2      	strh	r2, [r4, #12]
  4060b0:	73a3      	strb	r3, [r4, #14]
  4060b2:	e004      	b.n	4060be <delete_task_command+0x3a>
  4060b4:	4620      	mov	r0, r4
  4060b6:	4907      	ldr	r1, [pc, #28]	; (4060d4 <delete_task_command+0x50>)
  4060b8:	2244      	movs	r2, #68	; 0x44
  4060ba:	4b07      	ldr	r3, [pc, #28]	; (4060d8 <delete_task_command+0x54>)
  4060bc:	4798      	blx	r3
  4060be:	2000      	movs	r0, #0
  4060c0:	bd10      	pop	{r4, pc}
  4060c2:	bf00      	nop
  4060c4:	00404179 	.word	0x00404179
  4060c8:	2000af18 	.word	0x2000af18
  4060cc:	004050d5 	.word	0x004050d5
  4060d0:	0040bb2c 	.word	0x0040bb2c
  4060d4:	0040bb3c 	.word	0x0040bb3c
  4060d8:	00406b39 	.word	0x00406b39

004060dc <create_task_command>:
  4060dc:	b530      	push	{r4, r5, lr}
  4060de:	b087      	sub	sp, #28
  4060e0:	b910      	cbnz	r0, 4060e8 <create_task_command+0xc>
  4060e2:	4b1c      	ldr	r3, [pc, #112]	; (406154 <create_task_command+0x78>)
  4060e4:	4798      	blx	r3
  4060e6:	e7fe      	b.n	4060e6 <create_task_command+0xa>
  4060e8:	4604      	mov	r4, r0
  4060ea:	4610      	mov	r0, r2
  4060ec:	2101      	movs	r1, #1
  4060ee:	aa05      	add	r2, sp, #20
  4060f0:	4b19      	ldr	r3, [pc, #100]	; (406158 <create_task_command+0x7c>)
  4060f2:	4798      	blx	r3
  4060f4:	4b19      	ldr	r3, [pc, #100]	; (40615c <create_task_command+0x80>)
  4060f6:	4798      	blx	r3
  4060f8:	4603      	mov	r3, r0
  4060fa:	4a19      	ldr	r2, [pc, #100]	; (406160 <create_task_command+0x84>)
  4060fc:	6812      	ldr	r2, [r2, #0]
  4060fe:	b12a      	cbz	r2, 40610c <create_task_command+0x30>
  406100:	4620      	mov	r0, r4
  406102:	4918      	ldr	r1, [pc, #96]	; (406164 <create_task_command+0x88>)
  406104:	224c      	movs	r2, #76	; 0x4c
  406106:	4b18      	ldr	r3, [pc, #96]	; (406168 <create_task_command+0x8c>)
  406108:	4798      	blx	r3
  40610a:	e020      	b.n	40614e <create_task_command+0x72>
  40610c:	2200      	movs	r2, #0
  40610e:	9200      	str	r2, [sp, #0]
  406110:	4913      	ldr	r1, [pc, #76]	; (406160 <create_task_command+0x84>)
  406112:	9101      	str	r1, [sp, #4]
  406114:	9202      	str	r2, [sp, #8]
  406116:	9203      	str	r2, [sp, #12]
  406118:	4814      	ldr	r0, [pc, #80]	; (40616c <create_task_command+0x90>)
  40611a:	4915      	ldr	r1, [pc, #84]	; (406170 <create_task_command+0x94>)
  40611c:	2282      	movs	r2, #130	; 0x82
  40611e:	4d15      	ldr	r5, [pc, #84]	; (406174 <create_task_command+0x98>)
  406120:	47a8      	blx	r5
  406122:	2801      	cmp	r0, #1
  406124:	d109      	bne.n	40613a <create_task_command+0x5e>
  406126:	4b14      	ldr	r3, [pc, #80]	; (406178 <create_task_command+0x9c>)
  406128:	cb07      	ldmia	r3!, {r0, r1, r2}
  40612a:	6020      	str	r0, [r4, #0]
  40612c:	6061      	str	r1, [r4, #4]
  40612e:	60a2      	str	r2, [r4, #8]
  406130:	881a      	ldrh	r2, [r3, #0]
  406132:	789b      	ldrb	r3, [r3, #2]
  406134:	81a2      	strh	r2, [r4, #12]
  406136:	73a3      	strb	r3, [r4, #14]
  406138:	e009      	b.n	40614e <create_task_command+0x72>
  40613a:	4d10      	ldr	r5, [pc, #64]	; (40617c <create_task_command+0xa0>)
  40613c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
  40613e:	6020      	str	r0, [r4, #0]
  406140:	6061      	str	r1, [r4, #4]
  406142:	60a2      	str	r2, [r4, #8]
  406144:	60e3      	str	r3, [r4, #12]
  406146:	882a      	ldrh	r2, [r5, #0]
  406148:	78ab      	ldrb	r3, [r5, #2]
  40614a:	8222      	strh	r2, [r4, #16]
  40614c:	74a3      	strb	r3, [r4, #18]
  40614e:	2000      	movs	r0, #0
  406150:	b007      	add	sp, #28
  406152:	bd30      	pop	{r4, r5, pc}
  406154:	00404179 	.word	0x00404179
  406158:	00403ffd 	.word	0x00403ffd
  40615c:	00406ae1 	.word	0x00406ae1
  406160:	2000af18 	.word	0x2000af18
  406164:	0040bb80 	.word	0x0040bb80
  406168:	00406b39 	.word	0x00406b39
  40616c:	00406351 	.word	0x00406351
  406170:	0040bbcc 	.word	0x0040bbcc
  406174:	00404edd 	.word	0x00404edd
  406178:	0040bbd4 	.word	0x0040bbd4
  40617c:	0040bbe4 	.word	0x0040bbe4

00406180 <multi_parameter_echo_command>:
  406180:	b570      	push	{r4, r5, r6, lr}
  406182:	b082      	sub	sp, #8
  406184:	b910      	cbnz	r0, 40618c <multi_parameter_echo_command+0xc>
  406186:	4b21      	ldr	r3, [pc, #132]	; (40620c <multi_parameter_echo_command+0x8c>)
  406188:	4798      	blx	r3
  40618a:	e7fe      	b.n	40618a <multi_parameter_echo_command+0xa>
  40618c:	460d      	mov	r5, r1
  40618e:	4604      	mov	r4, r0
  406190:	4b1f      	ldr	r3, [pc, #124]	; (406210 <multi_parameter_echo_command+0x90>)
  406192:	6819      	ldr	r1, [r3, #0]
  406194:	b979      	cbnz	r1, 4061b6 <multi_parameter_echo_command+0x36>
  406196:	4d1f      	ldr	r5, [pc, #124]	; (406214 <multi_parameter_echo_command+0x94>)
  406198:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
  40619a:	6020      	str	r0, [r4, #0]
  40619c:	6061      	str	r1, [r4, #4]
  40619e:	60a2      	str	r2, [r4, #8]
  4061a0:	60e3      	str	r3, [r4, #12]
  4061a2:	6828      	ldr	r0, [r5, #0]
  4061a4:	6120      	str	r0, [r4, #16]
  4061a6:	88aa      	ldrh	r2, [r5, #4]
  4061a8:	79ab      	ldrb	r3, [r5, #6]
  4061aa:	82a2      	strh	r2, [r4, #20]
  4061ac:	75a3      	strb	r3, [r4, #22]
  4061ae:	2001      	movs	r0, #1
  4061b0:	4b17      	ldr	r3, [pc, #92]	; (406210 <multi_parameter_echo_command+0x90>)
  4061b2:	6018      	str	r0, [r3, #0]
  4061b4:	e027      	b.n	406206 <multi_parameter_echo_command+0x86>
  4061b6:	4610      	mov	r0, r2
  4061b8:	aa01      	add	r2, sp, #4
  4061ba:	4b17      	ldr	r3, [pc, #92]	; (406218 <multi_parameter_echo_command+0x98>)
  4061bc:	4798      	blx	r3
  4061be:	4606      	mov	r6, r0
  4061c0:	b1e8      	cbz	r0, 4061fe <multi_parameter_echo_command+0x7e>
  4061c2:	4620      	mov	r0, r4
  4061c4:	2100      	movs	r1, #0
  4061c6:	462a      	mov	r2, r5
  4061c8:	4b14      	ldr	r3, [pc, #80]	; (40621c <multi_parameter_echo_command+0x9c>)
  4061ca:	4798      	blx	r3
  4061cc:	4d10      	ldr	r5, [pc, #64]	; (406210 <multi_parameter_echo_command+0x90>)
  4061ce:	4620      	mov	r0, r4
  4061d0:	4913      	ldr	r1, [pc, #76]	; (406220 <multi_parameter_echo_command+0xa0>)
  4061d2:	682a      	ldr	r2, [r5, #0]
  4061d4:	4b13      	ldr	r3, [pc, #76]	; (406224 <multi_parameter_echo_command+0xa4>)
  4061d6:	4798      	blx	r3
  4061d8:	4620      	mov	r0, r4
  4061da:	4631      	mov	r1, r6
  4061dc:	9a01      	ldr	r2, [sp, #4]
  4061de:	4b12      	ldr	r3, [pc, #72]	; (406228 <multi_parameter_echo_command+0xa8>)
  4061e0:	4798      	blx	r3
  4061e2:	4620      	mov	r0, r4
  4061e4:	4b11      	ldr	r3, [pc, #68]	; (40622c <multi_parameter_echo_command+0xac>)
  4061e6:	4798      	blx	r3
  4061e8:	1822      	adds	r2, r4, r0
  4061ea:	4b11      	ldr	r3, [pc, #68]	; (406230 <multi_parameter_echo_command+0xb0>)
  4061ec:	8819      	ldrh	r1, [r3, #0]
  4061ee:	789b      	ldrb	r3, [r3, #2]
  4061f0:	5221      	strh	r1, [r4, r0]
  4061f2:	7093      	strb	r3, [r2, #2]
  4061f4:	682b      	ldr	r3, [r5, #0]
  4061f6:	3301      	adds	r3, #1
  4061f8:	602b      	str	r3, [r5, #0]
  4061fa:	2001      	movs	r0, #1
  4061fc:	e003      	b.n	406206 <multi_parameter_echo_command+0x86>
  4061fe:	2000      	movs	r0, #0
  406200:	7020      	strb	r0, [r4, #0]
  406202:	4b03      	ldr	r3, [pc, #12]	; (406210 <multi_parameter_echo_command+0x90>)
  406204:	6018      	str	r0, [r3, #0]
  406206:	b002      	add	sp, #8
  406208:	bd70      	pop	{r4, r5, r6, pc}
  40620a:	bf00      	nop
  40620c:	00404179 	.word	0x00404179
  406210:	2000af5c 	.word	0x2000af5c
  406214:	0040bbf8 	.word	0x0040bbf8
  406218:	00403ffd 	.word	0x00403ffd
  40621c:	00406c6d 	.word	0x00406c6d
  406220:	0040bc10 	.word	0x0040bc10
  406224:	00406d09 	.word	0x00406d09
  406228:	00406e6d 	.word	0x00406e6d
  40622c:	00406e11 	.word	0x00406e11
  406230:	0040bd6c 	.word	0x0040bd6c

00406234 <three_parameter_echo_command>:
  406234:	b570      	push	{r4, r5, r6, lr}
  406236:	b082      	sub	sp, #8
  406238:	b910      	cbnz	r0, 406240 <three_parameter_echo_command+0xc>
  40623a:	4b23      	ldr	r3, [pc, #140]	; (4062c8 <three_parameter_echo_command+0x94>)
  40623c:	4798      	blx	r3
  40623e:	e7fe      	b.n	40623e <three_parameter_echo_command+0xa>
  406240:	460d      	mov	r5, r1
  406242:	4604      	mov	r4, r0
  406244:	4b21      	ldr	r3, [pc, #132]	; (4062cc <three_parameter_echo_command+0x98>)
  406246:	6819      	ldr	r1, [r3, #0]
  406248:	b979      	cbnz	r1, 40626a <three_parameter_echo_command+0x36>
  40624a:	4d21      	ldr	r5, [pc, #132]	; (4062d0 <three_parameter_echo_command+0x9c>)
  40624c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
  40624e:	6020      	str	r0, [r4, #0]
  406250:	6061      	str	r1, [r4, #4]
  406252:	60a2      	str	r2, [r4, #8]
  406254:	60e3      	str	r3, [r4, #12]
  406256:	cd07      	ldmia	r5!, {r0, r1, r2}
  406258:	6120      	str	r0, [r4, #16]
  40625a:	6161      	str	r1, [r4, #20]
  40625c:	61a2      	str	r2, [r4, #24]
  40625e:	782b      	ldrb	r3, [r5, #0]
  406260:	7723      	strb	r3, [r4, #28]
  406262:	2001      	movs	r0, #1
  406264:	4b19      	ldr	r3, [pc, #100]	; (4062cc <three_parameter_echo_command+0x98>)
  406266:	6018      	str	r0, [r3, #0]
  406268:	e02b      	b.n	4062c2 <three_parameter_echo_command+0x8e>
  40626a:	4610      	mov	r0, r2
  40626c:	aa01      	add	r2, sp, #4
  40626e:	4b19      	ldr	r3, [pc, #100]	; (4062d4 <three_parameter_echo_command+0xa0>)
  406270:	4798      	blx	r3
  406272:	4606      	mov	r6, r0
  406274:	b910      	cbnz	r0, 40627c <three_parameter_echo_command+0x48>
  406276:	4b14      	ldr	r3, [pc, #80]	; (4062c8 <three_parameter_echo_command+0x94>)
  406278:	4798      	blx	r3
  40627a:	e7fe      	b.n	40627a <three_parameter_echo_command+0x46>
  40627c:	4620      	mov	r0, r4
  40627e:	2100      	movs	r1, #0
  406280:	462a      	mov	r2, r5
  406282:	4b15      	ldr	r3, [pc, #84]	; (4062d8 <three_parameter_echo_command+0xa4>)
  406284:	4798      	blx	r3
  406286:	4d11      	ldr	r5, [pc, #68]	; (4062cc <three_parameter_echo_command+0x98>)
  406288:	4620      	mov	r0, r4
  40628a:	4914      	ldr	r1, [pc, #80]	; (4062dc <three_parameter_echo_command+0xa8>)
  40628c:	682a      	ldr	r2, [r5, #0]
  40628e:	4b14      	ldr	r3, [pc, #80]	; (4062e0 <three_parameter_echo_command+0xac>)
  406290:	4798      	blx	r3
  406292:	4620      	mov	r0, r4
  406294:	4631      	mov	r1, r6
  406296:	9a01      	ldr	r2, [sp, #4]
  406298:	4b12      	ldr	r3, [pc, #72]	; (4062e4 <three_parameter_echo_command+0xb0>)
  40629a:	4798      	blx	r3
  40629c:	4620      	mov	r0, r4
  40629e:	4b12      	ldr	r3, [pc, #72]	; (4062e8 <three_parameter_echo_command+0xb4>)
  4062a0:	4798      	blx	r3
  4062a2:	1822      	adds	r2, r4, r0
  4062a4:	4b11      	ldr	r3, [pc, #68]	; (4062ec <three_parameter_echo_command+0xb8>)
  4062a6:	8819      	ldrh	r1, [r3, #0]
  4062a8:	789b      	ldrb	r3, [r3, #2]
  4062aa:	5221      	strh	r1, [r4, r0]
  4062ac:	7093      	strb	r3, [r2, #2]
  4062ae:	682b      	ldr	r3, [r5, #0]
  4062b0:	2b03      	cmp	r3, #3
  4062b2:	d102      	bne.n	4062ba <three_parameter_echo_command+0x86>
  4062b4:	2000      	movs	r0, #0
  4062b6:	6028      	str	r0, [r5, #0]
  4062b8:	e003      	b.n	4062c2 <three_parameter_echo_command+0x8e>
  4062ba:	3301      	adds	r3, #1
  4062bc:	4a03      	ldr	r2, [pc, #12]	; (4062cc <three_parameter_echo_command+0x98>)
  4062be:	6013      	str	r3, [r2, #0]
  4062c0:	2001      	movs	r0, #1
  4062c2:	b002      	add	sp, #8
  4062c4:	bd70      	pop	{r4, r5, r6, pc}
  4062c6:	bf00      	nop
  4062c8:	00404179 	.word	0x00404179
  4062cc:	2000af1c 	.word	0x2000af1c
  4062d0:	0040bc18 	.word	0x0040bc18
  4062d4:	00403ffd 	.word	0x00403ffd
  4062d8:	00406c6d 	.word	0x00406c6d
  4062dc:	0040bc10 	.word	0x0040bc10
  4062e0:	00406d09 	.word	0x00406d09
  4062e4:	00406e6d 	.word	0x00406e6d
  4062e8:	00406e11 	.word	0x00406e11
  4062ec:	0040bd6c 	.word	0x0040bd6c

004062f0 <run_time_stats_command>:
  4062f0:	b510      	push	{r4, lr}
  4062f2:	b910      	cbnz	r0, 4062fa <run_time_stats_command+0xa>
  4062f4:	4b06      	ldr	r3, [pc, #24]	; (406310 <run_time_stats_command+0x20>)
  4062f6:	4798      	blx	r3
  4062f8:	e7fe      	b.n	4062f8 <run_time_stats_command+0x8>
  4062fa:	4604      	mov	r4, r0
  4062fc:	4905      	ldr	r1, [pc, #20]	; (406314 <run_time_stats_command+0x24>)
  4062fe:	2251      	movs	r2, #81	; 0x51
  406300:	4b05      	ldr	r3, [pc, #20]	; (406318 <run_time_stats_command+0x28>)
  406302:	4798      	blx	r3
  406304:	f104 0050 	add.w	r0, r4, #80	; 0x50
  406308:	4b04      	ldr	r3, [pc, #16]	; (40631c <run_time_stats_command+0x2c>)
  40630a:	4798      	blx	r3
  40630c:	2000      	movs	r0, #0
  40630e:	bd10      	pop	{r4, pc}
  406310:	00404179 	.word	0x00404179
  406314:	0040bc38 	.word	0x0040bc38
  406318:	00406b39 	.word	0x00406b39
  40631c:	00405b91 	.word	0x00405b91

00406320 <task_stats_command>:
  406320:	b510      	push	{r4, lr}
  406322:	b910      	cbnz	r0, 40632a <task_stats_command+0xa>
  406324:	4b06      	ldr	r3, [pc, #24]	; (406340 <task_stats_command+0x20>)
  406326:	4798      	blx	r3
  406328:	e7fe      	b.n	406328 <task_stats_command+0x8>
  40632a:	4604      	mov	r4, r0
  40632c:	4905      	ldr	r1, [pc, #20]	; (406344 <task_stats_command+0x24>)
  40632e:	225b      	movs	r2, #91	; 0x5b
  406330:	4b05      	ldr	r3, [pc, #20]	; (406348 <task_stats_command+0x28>)
  406332:	4798      	blx	r3
  406334:	f104 005a 	add.w	r0, r4, #90	; 0x5a
  406338:	4b04      	ldr	r3, [pc, #16]	; (40634c <task_stats_command+0x2c>)
  40633a:	4798      	blx	r3
  40633c:	2000      	movs	r0, #0
  40633e:	bd10      	pop	{r4, pc}
  406340:	00404179 	.word	0x00404179
  406344:	0040bc8c 	.word	0x0040bc8c
  406348:	00406b39 	.word	0x00406b39
  40634c:	00405aad 	.word	0x00405aad

00406350 <created_task>:
  406350:	b538      	push	{r3, r4, r5, lr}
  406352:	4605      	mov	r5, r0
  406354:	4c09      	ldr	r4, [pc, #36]	; (40637c <created_task+0x2c>)
  406356:	4620      	mov	r0, r4
  406358:	2100      	movs	r1, #0
  40635a:	223c      	movs	r2, #60	; 0x3c
  40635c:	4b08      	ldr	r3, [pc, #32]	; (406380 <created_task+0x30>)
  40635e:	4798      	blx	r3
  406360:	4620      	mov	r0, r4
  406362:	4908      	ldr	r1, [pc, #32]	; (406384 <created_task+0x34>)
  406364:	462a      	mov	r2, r5
  406366:	4b08      	ldr	r3, [pc, #32]	; (406388 <created_task+0x38>)
  406368:	4798      	blx	r3
  40636a:	4620      	mov	r0, r4
  40636c:	4b07      	ldr	r3, [pc, #28]	; (40638c <created_task+0x3c>)
  40636e:	4798      	blx	r3
  406370:	f04f 35ff 	mov.w	r5, #4294967295
  406374:	4c06      	ldr	r4, [pc, #24]	; (406390 <created_task+0x40>)
  406376:	4628      	mov	r0, r5
  406378:	47a0      	blx	r4
  40637a:	e7fc      	b.n	406376 <created_task+0x26>
  40637c:	2000af20 	.word	0x2000af20
  406380:	00406c6d 	.word	0x00406c6d
  406384:	0040bce8 	.word	0x0040bce8
  406388:	00406d09 	.word	0x00406d09
  40638c:	004067f9 	.word	0x004067f9
  406390:	00405485 	.word	0x00405485

00406394 <vRegisterCLICommands>:
  406394:	b510      	push	{r4, lr}
  406396:	4807      	ldr	r0, [pc, #28]	; (4063b4 <vRegisterCLICommands+0x20>)
  406398:	4c07      	ldr	r4, [pc, #28]	; (4063b8 <vRegisterCLICommands+0x24>)
  40639a:	47a0      	blx	r4
  40639c:	4807      	ldr	r0, [pc, #28]	; (4063bc <vRegisterCLICommands+0x28>)
  40639e:	47a0      	blx	r4
  4063a0:	4807      	ldr	r0, [pc, #28]	; (4063c0 <vRegisterCLICommands+0x2c>)
  4063a2:	47a0      	blx	r4
  4063a4:	4807      	ldr	r0, [pc, #28]	; (4063c4 <vRegisterCLICommands+0x30>)
  4063a6:	47a0      	blx	r4
  4063a8:	4807      	ldr	r0, [pc, #28]	; (4063c8 <vRegisterCLICommands+0x34>)
  4063aa:	47a0      	blx	r4
  4063ac:	4807      	ldr	r0, [pc, #28]	; (4063cc <vRegisterCLICommands+0x38>)
  4063ae:	47a0      	blx	r4
  4063b0:	bd10      	pop	{r4, pc}
  4063b2:	bf00      	nop
  4063b4:	0040bf8c 	.word	0x0040bf8c
  4063b8:	00403eb1 	.word	0x00403eb1
  4063bc:	0040bb1c 	.word	0x0040bb1c
  4063c0:	0040bf9c 	.word	0x0040bf9c
  4063c4:	0040bafc 	.word	0x0040bafc
  4063c8:	0040baec 	.word	0x0040baec
  4063cc:	0040bb0c 	.word	0x0040bb0c

004063d0 <uart_command_console_task>:
  4063d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4063d4:	b087      	sub	sp, #28
  4063d6:	4b61      	ldr	r3, [pc, #388]	; (40655c <uart_command_console_task+0x18c>)
  4063d8:	6018      	str	r0, [r3, #0]
  4063da:	b910      	cbnz	r0, 4063e2 <uart_command_console_task+0x12>
  4063dc:	4b60      	ldr	r3, [pc, #384]	; (406560 <uart_command_console_task+0x190>)
  4063de:	4798      	blx	r3
  4063e0:	e7fe      	b.n	4063e0 <uart_command_console_task+0x10>
  4063e2:	4b60      	ldr	r3, [pc, #384]	; (406564 <uart_command_console_task+0x194>)
  4063e4:	4798      	blx	r3
  4063e6:	4604      	mov	r4, r0
  4063e8:	9002      	str	r0, [sp, #8]
  4063ea:	495f      	ldr	r1, [pc, #380]	; (406568 <uart_command_console_task+0x198>)
  4063ec:	2250      	movs	r2, #80	; 0x50
  4063ee:	4b5f      	ldr	r3, [pc, #380]	; (40656c <uart_command_console_task+0x19c>)
  4063f0:	4798      	blx	r3
  4063f2:	4b5a      	ldr	r3, [pc, #360]	; (40655c <uart_command_console_task+0x18c>)
  4063f4:	6818      	ldr	r0, [r3, #0]
  4063f6:	2600      	movs	r6, #0
  4063f8:	9600      	str	r6, [sp, #0]
  4063fa:	4621      	mov	r1, r4
  4063fc:	224f      	movs	r2, #79	; 0x4f
  4063fe:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
  406402:	4d5b      	ldr	r5, [pc, #364]	; (406570 <uart_command_console_task+0x1a0>)
  406404:	47a8      	blx	r5
  406406:	4d55      	ldr	r5, [pc, #340]	; (40655c <uart_command_console_task+0x18c>)
  406408:	4f5a      	ldr	r7, [pc, #360]	; (406574 <uart_command_console_task+0x1a4>)
  40640a:	f8df 817c 	ldr.w	r8, [pc, #380]	; 406588 <uart_command_console_task+0x1b8>
  40640e:	f108 0304 	add.w	r3, r8, #4
  406412:	9303      	str	r3, [sp, #12]
  406414:	f108 0b08 	add.w	fp, r8, #8
  406418:	6828      	ldr	r0, [r5, #0]
  40641a:	f10d 0117 	add.w	r1, sp, #23
  40641e:	2201      	movs	r2, #1
  406420:	f04f 33ff 	mov.w	r3, #4294967295
  406424:	47b8      	blx	r7
  406426:	2801      	cmp	r0, #1
  406428:	d1f6      	bne.n	406418 <uart_command_console_task+0x48>
  40642a:	2300      	movs	r3, #0
  40642c:	9300      	str	r3, [sp, #0]
  40642e:	6828      	ldr	r0, [r5, #0]
  406430:	f10d 0117 	add.w	r1, sp, #23
  406434:	2201      	movs	r2, #1
  406436:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
  40643a:	f8df c134 	ldr.w	ip, [pc, #308]	; 406570 <uart_command_console_task+0x1a0>
  40643e:	47e0      	blx	ip
  406440:	f89d 3017 	ldrb.w	r3, [sp, #23]
  406444:	2b0d      	cmp	r3, #13
  406446:	d173      	bne.n	406530 <uart_command_console_task+0x160>
  406448:	4b4b      	ldr	r3, [pc, #300]	; (406578 <uart_command_console_task+0x1a8>)
  40644a:	881a      	ldrh	r2, [r3, #0]
  40644c:	789b      	ldrb	r3, [r3, #2]
  40644e:	9802      	ldr	r0, [sp, #8]
  406450:	4601      	mov	r1, r0
  406452:	8002      	strh	r2, [r0, #0]
  406454:	7083      	strb	r3, [r0, #2]
  406456:	2300      	movs	r3, #0
  406458:	9300      	str	r3, [sp, #0]
  40645a:	6828      	ldr	r0, [r5, #0]
  40645c:	2202      	movs	r2, #2
  40645e:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
  406462:	f8df c10c 	ldr.w	ip, [pc, #268]	; 406570 <uart_command_console_task+0x1a0>
  406466:	47e0      	blx	ip
  406468:	b91e      	cbnz	r6, 406472 <uart_command_console_task+0xa2>
  40646a:	4640      	mov	r0, r8
  40646c:	4943      	ldr	r1, [pc, #268]	; (40657c <uart_command_console_task+0x1ac>)
  40646e:	4b44      	ldr	r3, [pc, #272]	; (406580 <uart_command_console_task+0x1b0>)
  406470:	4798      	blx	r3
  406472:	f8df a118 	ldr.w	sl, [pc, #280]	; 40658c <uart_command_console_task+0x1bc>
  406476:	f8df 9118 	ldr.w	r9, [pc, #280]	; 406590 <uart_command_console_task+0x1c0>
  40647a:	4640      	mov	r0, r8
  40647c:	9c02      	ldr	r4, [sp, #8]
  40647e:	4621      	mov	r1, r4
  406480:	f44f 72c8 	mov.w	r2, #400	; 0x190
  406484:	47d0      	blx	sl
  406486:	4606      	mov	r6, r0
  406488:	4620      	mov	r0, r4
  40648a:	47c8      	blx	r9
  40648c:	4602      	mov	r2, r0
  40648e:	2300      	movs	r3, #0
  406490:	9300      	str	r3, [sp, #0]
  406492:	6828      	ldr	r0, [r5, #0]
  406494:	4621      	mov	r1, r4
  406496:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
  40649a:	4c35      	ldr	r4, [pc, #212]	; (406570 <uart_command_console_task+0x1a0>)
  40649c:	47a0      	blx	r4
  40649e:	2e00      	cmp	r6, #0
  4064a0:	d1eb      	bne.n	40647a <uart_command_console_task+0xaa>
  4064a2:	4836      	ldr	r0, [pc, #216]	; (40657c <uart_command_console_task+0x1ac>)
  4064a4:	4641      	mov	r1, r8
  4064a6:	4b36      	ldr	r3, [pc, #216]	; (406580 <uart_command_console_task+0x1b0>)
  4064a8:	4798      	blx	r3
  4064aa:	2200      	movs	r2, #0
  4064ac:	f8c8 2000 	str.w	r2, [r8]
  4064b0:	9b03      	ldr	r3, [sp, #12]
  4064b2:	601a      	str	r2, [r3, #0]
  4064b4:	465b      	mov	r3, fp
  4064b6:	f843 2b04 	str.w	r2, [r3], #4
  4064ba:	f8cb 2004 	str.w	r2, [fp, #4]
  4064be:	3304      	adds	r3, #4
  4064c0:	f843 2b04 	str.w	r2, [r3], #4
  4064c4:	f843 2b04 	str.w	r2, [r3], #4
  4064c8:	f843 2b04 	str.w	r2, [r3], #4
  4064cc:	f843 2b04 	str.w	r2, [r3], #4
  4064d0:	f843 2b04 	str.w	r2, [r3], #4
  4064d4:	f843 2b04 	str.w	r2, [r3], #4
  4064d8:	f843 2b04 	str.w	r2, [r3], #4
  4064dc:	f843 2b04 	str.w	r2, [r3], #4
  4064e0:	801a      	strh	r2, [r3, #0]
  4064e2:	4e28      	ldr	r6, [pc, #160]	; (406584 <uart_command_console_task+0x1b4>)
  4064e4:	f8dd e008 	ldr.w	lr, [sp, #8]
  4064e8:	f106 0930 	add.w	r9, r6, #48	; 0x30
  4064ec:	4634      	mov	r4, r6
  4064ee:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
  4064f0:	f8ce 0000 	str.w	r0, [lr]
  4064f4:	f8ce 1004 	str.w	r1, [lr, #4]
  4064f8:	f8ce 2008 	str.w	r2, [lr, #8]
  4064fc:	f8ce 300c 	str.w	r3, [lr, #12]
  406500:	4626      	mov	r6, r4
  406502:	f10e 0e10 	add.w	lr, lr, #16
  406506:	454c      	cmp	r4, r9
  406508:	d1f0      	bne.n	4064ec <uart_command_console_task+0x11c>
  40650a:	ce03      	ldmia	r6!, {r0, r1}
  40650c:	f8ce 0000 	str.w	r0, [lr]
  406510:	f8ce 1004 	str.w	r1, [lr, #4]
  406514:	7833      	ldrb	r3, [r6, #0]
  406516:	f88e 3008 	strb.w	r3, [lr, #8]
  40651a:	2600      	movs	r6, #0
  40651c:	9600      	str	r6, [sp, #0]
  40651e:	6828      	ldr	r0, [r5, #0]
  406520:	9902      	ldr	r1, [sp, #8]
  406522:	2238      	movs	r2, #56	; 0x38
  406524:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
  406528:	f8df c044 	ldr.w	ip, [pc, #68]	; 406570 <uart_command_console_task+0x1a0>
  40652c:	47e0      	blx	ip
  40652e:	e773      	b.n	406418 <uart_command_console_task+0x48>
  406530:	2b0a      	cmp	r3, #10
  406532:	f43f af71 	beq.w	406418 <uart_command_console_task+0x48>
  406536:	2b08      	cmp	r3, #8
  406538:	d108      	bne.n	40654c <uart_command_console_task+0x17c>
  40653a:	2e00      	cmp	r6, #0
  40653c:	f43f af6c 	beq.w	406418 <uart_command_console_task+0x48>
  406540:	3e01      	subs	r6, #1
  406542:	b2f6      	uxtb	r6, r6
  406544:	2300      	movs	r3, #0
  406546:	f808 3006 	strb.w	r3, [r8, r6]
  40654a:	e765      	b.n	406418 <uart_command_console_task+0x48>
  40654c:	2e31      	cmp	r6, #49	; 0x31
  40654e:	f63f af63 	bhi.w	406418 <uart_command_console_task+0x48>
  406552:	f808 3006 	strb.w	r3, [r8, r6]
  406556:	3601      	adds	r6, #1
  406558:	b2f6      	uxtb	r6, r6
  40655a:	e75d      	b.n	406418 <uart_command_console_task+0x48>
  40655c:	2000af60 	.word	0x2000af60
  406560:	00404179 	.word	0x00404179
  406564:	00403ff5 	.word	0x00403ff5
  406568:	0040bfbc 	.word	0x0040bfbc
  40656c:	00406b39 	.word	0x00406b39
  406570:	00400a59 	.word	0x00400a59
  406574:	00400ae1 	.word	0x00400ae1
  406578:	0040bd6c 	.word	0x0040bd6c
  40657c:	2000af64 	.word	0x2000af64
  406580:	00406d55 	.word	0x00406d55
  406584:	0040c00c 	.word	0x0040c00c
  406588:	2000afcc 	.word	0x2000afcc
  40658c:	00403efd 	.word	0x00403efd
  406590:	00406e11 	.word	0x00406e11

00406594 <create_uart_cli_task>:
  406594:	b5f0      	push	{r4, r5, r6, r7, lr}
  406596:	b08d      	sub	sp, #52	; 0x34
  406598:	4607      	mov	r7, r0
  40659a:	460d      	mov	r5, r1
  40659c:	4616      	mov	r6, r2
  40659e:	4b13      	ldr	r3, [pc, #76]	; (4065ec <create_uart_cli_task+0x58>)
  4065a0:	ac08      	add	r4, sp, #32
  4065a2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
  4065a4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  4065a8:	4b11      	ldr	r3, [pc, #68]	; (4065f0 <create_uart_cli_task+0x5c>)
  4065aa:	9305      	str	r3, [sp, #20]
  4065ac:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
  4065b0:	9306      	str	r3, [sp, #24]
  4065b2:	f44f 6300 	mov.w	r3, #2048	; 0x800
  4065b6:	9307      	str	r3, [sp, #28]
  4065b8:	4638      	mov	r0, r7
  4065ba:	a905      	add	r1, sp, #20
  4065bc:	4622      	mov	r2, r4
  4065be:	4b0d      	ldr	r3, [pc, #52]	; (4065f4 <create_uart_cli_task+0x60>)
  4065c0:	4798      	blx	r3
  4065c2:	b910      	cbnz	r0, 4065ca <create_uart_cli_task+0x36>
  4065c4:	4b0c      	ldr	r3, [pc, #48]	; (4065f8 <create_uart_cli_task+0x64>)
  4065c6:	4798      	blx	r3
  4065c8:	e7fe      	b.n	4065c8 <create_uart_cli_task+0x34>
  4065ca:	4604      	mov	r4, r0
  4065cc:	4b0b      	ldr	r3, [pc, #44]	; (4065fc <create_uart_cli_task+0x68>)
  4065ce:	4798      	blx	r3
  4065d0:	9600      	str	r6, [sp, #0]
  4065d2:	2300      	movs	r3, #0
  4065d4:	9301      	str	r3, [sp, #4]
  4065d6:	9302      	str	r3, [sp, #8]
  4065d8:	9303      	str	r3, [sp, #12]
  4065da:	4809      	ldr	r0, [pc, #36]	; (406600 <create_uart_cli_task+0x6c>)
  4065dc:	4909      	ldr	r1, [pc, #36]	; (406604 <create_uart_cli_task+0x70>)
  4065de:	462a      	mov	r2, r5
  4065e0:	4623      	mov	r3, r4
  4065e2:	4c09      	ldr	r4, [pc, #36]	; (406608 <create_uart_cli_task+0x74>)
  4065e4:	47a0      	blx	r4
  4065e6:	b00d      	add	sp, #52	; 0x34
  4065e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4065ea:	bf00      	nop
  4065ec:	0040bfac 	.word	0x0040bfac
  4065f0:	07270e00 	.word	0x07270e00
  4065f4:	00400899 	.word	0x00400899
  4065f8:	00404179 	.word	0x00404179
  4065fc:	00406395 	.word	0x00406395
  406600:	004063d1 	.word	0x004063d1
  406604:	0040c048 	.word	0x0040c048
  406608:	00404edd 	.word	0x00404edd

0040660c <usb_cdc_command_console_task>:
  40660c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  406610:	b083      	sub	sp, #12
  406612:	4b45      	ldr	r3, [pc, #276]	; (406728 <usb_cdc_command_console_task+0x11c>)
  406614:	4798      	blx	r3
  406616:	4b45      	ldr	r3, [pc, #276]	; (40672c <usb_cdc_command_console_task+0x120>)
  406618:	4798      	blx	r3
  40661a:	b908      	cbnz	r0, 406620 <usb_cdc_command_console_task+0x14>
  40661c:	4b44      	ldr	r3, [pc, #272]	; (406730 <usb_cdc_command_console_task+0x124>)
  40661e:	4798      	blx	r3
  406620:	4b44      	ldr	r3, [pc, #272]	; (406734 <usb_cdc_command_console_task+0x128>)
  406622:	4798      	blx	r3
  406624:	4604      	mov	r4, r0
  406626:	2600      	movs	r6, #0
  406628:	4f43      	ldr	r7, [pc, #268]	; (406738 <usb_cdc_command_console_task+0x12c>)
  40662a:	4b44      	ldr	r3, [pc, #272]	; (40673c <usb_cdc_command_console_task+0x130>)
  40662c:	3304      	adds	r3, #4
  40662e:	9301      	str	r3, [sp, #4]
  406630:	f103 0b04 	add.w	fp, r3, #4
  406634:	4b42      	ldr	r3, [pc, #264]	; (406740 <usb_cdc_command_console_task+0x134>)
  406636:	6818      	ldr	r0, [r3, #0]
  406638:	2100      	movs	r1, #0
  40663a:	f04f 32ff 	mov.w	r2, #4294967295
  40663e:	460b      	mov	r3, r1
  406640:	f8df 8124 	ldr.w	r8, [pc, #292]	; 406768 <usb_cdc_command_console_task+0x15c>
  406644:	47c0      	blx	r8
  406646:	4b3f      	ldr	r3, [pc, #252]	; (406744 <usb_cdc_command_console_task+0x138>)
  406648:	6818      	ldr	r0, [r3, #0]
  40664a:	2100      	movs	r1, #0
  40664c:	f04f 32ff 	mov.w	r2, #4294967295
  406650:	460b      	mov	r3, r1
  406652:	47c0      	blx	r8
  406654:	f8df a114 	ldr.w	sl, [pc, #276]	; 40676c <usb_cdc_command_console_task+0x160>
  406658:	e05a      	b.n	406710 <usb_cdc_command_console_task+0x104>
  40665a:	4b3b      	ldr	r3, [pc, #236]	; (406748 <usb_cdc_command_console_task+0x13c>)
  40665c:	4798      	blx	r3
  40665e:	4681      	mov	r9, r0
  406660:	fa5f f880 	uxtb.w	r8, r0
  406664:	4640      	mov	r0, r8
  406666:	4b39      	ldr	r3, [pc, #228]	; (40674c <usb_cdc_command_console_task+0x140>)
  406668:	4798      	blx	r3
  40666a:	f1b8 0f0d 	cmp.w	r8, #13
  40666e:	d13b      	bne.n	4066e8 <usb_cdc_command_console_task+0xdc>
  406670:	4837      	ldr	r0, [pc, #220]	; (406750 <usb_cdc_command_console_task+0x144>)
  406672:	2102      	movs	r1, #2
  406674:	4b37      	ldr	r3, [pc, #220]	; (406754 <usb_cdc_command_console_task+0x148>)
  406676:	4798      	blx	r3
  406678:	b91e      	cbnz	r6, 406682 <usb_cdc_command_console_task+0x76>
  40667a:	4830      	ldr	r0, [pc, #192]	; (40673c <usb_cdc_command_console_task+0x130>)
  40667c:	4936      	ldr	r1, [pc, #216]	; (406758 <usb_cdc_command_console_task+0x14c>)
  40667e:	4b37      	ldr	r3, [pc, #220]	; (40675c <usb_cdc_command_console_task+0x150>)
  406680:	4798      	blx	r3
  406682:	4d37      	ldr	r5, [pc, #220]	; (406760 <usb_cdc_command_console_task+0x154>)
  406684:	482d      	ldr	r0, [pc, #180]	; (40673c <usb_cdc_command_console_task+0x130>)
  406686:	4621      	mov	r1, r4
  406688:	f44f 72c8 	mov.w	r2, #400	; 0x190
  40668c:	47b8      	blx	r7
  40668e:	4606      	mov	r6, r0
  406690:	4620      	mov	r0, r4
  406692:	47a8      	blx	r5
  406694:	4601      	mov	r1, r0
  406696:	4620      	mov	r0, r4
  406698:	4b2e      	ldr	r3, [pc, #184]	; (406754 <usb_cdc_command_console_task+0x148>)
  40669a:	4798      	blx	r3
  40669c:	2e00      	cmp	r6, #0
  40669e:	d1f1      	bne.n	406684 <usb_cdc_command_console_task+0x78>
  4066a0:	482d      	ldr	r0, [pc, #180]	; (406758 <usb_cdc_command_console_task+0x14c>)
  4066a2:	4926      	ldr	r1, [pc, #152]	; (40673c <usb_cdc_command_console_task+0x130>)
  4066a4:	4b2d      	ldr	r3, [pc, #180]	; (40675c <usb_cdc_command_console_task+0x150>)
  4066a6:	4798      	blx	r3
  4066a8:	4b24      	ldr	r3, [pc, #144]	; (40673c <usb_cdc_command_console_task+0x130>)
  4066aa:	601e      	str	r6, [r3, #0]
  4066ac:	9b01      	ldr	r3, [sp, #4]
  4066ae:	601e      	str	r6, [r3, #0]
  4066b0:	465b      	mov	r3, fp
  4066b2:	f843 6b04 	str.w	r6, [r3], #4
  4066b6:	f8cb 6004 	str.w	r6, [fp, #4]
  4066ba:	3304      	adds	r3, #4
  4066bc:	f843 6b04 	str.w	r6, [r3], #4
  4066c0:	f843 6b04 	str.w	r6, [r3], #4
  4066c4:	f843 6b04 	str.w	r6, [r3], #4
  4066c8:	f843 6b04 	str.w	r6, [r3], #4
  4066cc:	f843 6b04 	str.w	r6, [r3], #4
  4066d0:	f843 6b04 	str.w	r6, [r3], #4
  4066d4:	f843 6b04 	str.w	r6, [r3], #4
  4066d8:	f843 6b04 	str.w	r6, [r3], #4
  4066dc:	801e      	strh	r6, [r3, #0]
  4066de:	4821      	ldr	r0, [pc, #132]	; (406764 <usb_cdc_command_console_task+0x158>)
  4066e0:	2138      	movs	r1, #56	; 0x38
  4066e2:	4b1c      	ldr	r3, [pc, #112]	; (406754 <usb_cdc_command_console_task+0x148>)
  4066e4:	4798      	blx	r3
  4066e6:	e013      	b.n	406710 <usb_cdc_command_console_task+0x104>
  4066e8:	f1b8 0f0a 	cmp.w	r8, #10
  4066ec:	d010      	beq.n	406710 <usb_cdc_command_console_task+0x104>
  4066ee:	f1b8 0f08 	cmp.w	r8, #8
  4066f2:	d106      	bne.n	406702 <usb_cdc_command_console_task+0xf6>
  4066f4:	b166      	cbz	r6, 406710 <usb_cdc_command_console_task+0x104>
  4066f6:	3e01      	subs	r6, #1
  4066f8:	b2f6      	uxtb	r6, r6
  4066fa:	2300      	movs	r3, #0
  4066fc:	4a0f      	ldr	r2, [pc, #60]	; (40673c <usb_cdc_command_console_task+0x130>)
  4066fe:	5593      	strb	r3, [r2, r6]
  406700:	e006      	b.n	406710 <usb_cdc_command_console_task+0x104>
  406702:	2e31      	cmp	r6, #49	; 0x31
  406704:	d804      	bhi.n	406710 <usb_cdc_command_console_task+0x104>
  406706:	4b0d      	ldr	r3, [pc, #52]	; (40673c <usb_cdc_command_console_task+0x130>)
  406708:	f803 9006 	strb.w	r9, [r3, r6]
  40670c:	3601      	adds	r6, #1
  40670e:	b2f6      	uxtb	r6, r6
  406710:	47d0      	blx	sl
  406712:	2800      	cmp	r0, #0
  406714:	d1a1      	bne.n	40665a <usb_cdc_command_console_task+0x4e>
  406716:	4b0b      	ldr	r3, [pc, #44]	; (406744 <usb_cdc_command_console_task+0x138>)
  406718:	6818      	ldr	r0, [r3, #0]
  40671a:	2100      	movs	r1, #0
  40671c:	460a      	mov	r2, r1
  40671e:	460b      	mov	r3, r1
  406720:	f8df c04c 	ldr.w	ip, [pc, #76]	; 406770 <usb_cdc_command_console_task+0x164>
  406724:	47e0      	blx	ip
  406726:	e785      	b.n	406634 <usb_cdc_command_console_task+0x28>
  406728:	00401751 	.word	0x00401751
  40672c:	00403381 	.word	0x00403381
  406730:	00403385 	.word	0x00403385
  406734:	00403ff5 	.word	0x00403ff5
  406738:	00403efd 	.word	0x00403efd
  40673c:	2000b03c 	.word	0x2000b03c
  406740:	2000b000 	.word	0x2000b000
  406744:	2000b004 	.word	0x2000b004
  406748:	004013d9 	.word	0x004013d9
  40674c:	004014fd 	.word	0x004014fd
  406750:	0040bd6c 	.word	0x0040bd6c
  406754:	004015b5 	.word	0x004015b5
  406758:	2000b008 	.word	0x2000b008
  40675c:	00406d55 	.word	0x00406d55
  406760:	00406e11 	.word	0x00406e11
  406764:	0040c00c 	.word	0x0040c00c
  406768:	00404bb1 	.word	0x00404bb1
  40676c:	00401319 	.word	0x00401319
  406770:	0040486d 	.word	0x0040486d

00406774 <create_usb_cdc_cli_task>:
  406774:	b570      	push	{r4, r5, r6, lr}
  406776:	b084      	sub	sp, #16
  406778:	4604      	mov	r4, r0
  40677a:	460d      	mov	r5, r1
  40677c:	4b14      	ldr	r3, [pc, #80]	; (4067d0 <create_usb_cdc_cli_task+0x5c>)
  40677e:	4798      	blx	r3
  406780:	2001      	movs	r0, #1
  406782:	2100      	movs	r1, #0
  406784:	2203      	movs	r2, #3
  406786:	4b13      	ldr	r3, [pc, #76]	; (4067d4 <create_usb_cdc_cli_task+0x60>)
  406788:	4798      	blx	r3
  40678a:	4b13      	ldr	r3, [pc, #76]	; (4067d8 <create_usb_cdc_cli_task+0x64>)
  40678c:	6018      	str	r0, [r3, #0]
  40678e:	b138      	cbz	r0, 4067a0 <create_usb_cdc_cli_task+0x2c>
  406790:	2100      	movs	r1, #0
  406792:	460a      	mov	r2, r1
  406794:	460b      	mov	r3, r1
  406796:	4e11      	ldr	r6, [pc, #68]	; (4067dc <create_usb_cdc_cli_task+0x68>)
  406798:	47b0      	blx	r6
  40679a:	4b0f      	ldr	r3, [pc, #60]	; (4067d8 <create_usb_cdc_cli_task+0x64>)
  40679c:	681b      	ldr	r3, [r3, #0]
  40679e:	b913      	cbnz	r3, 4067a6 <create_usb_cdc_cli_task+0x32>
  4067a0:	4b0f      	ldr	r3, [pc, #60]	; (4067e0 <create_usb_cdc_cli_task+0x6c>)
  4067a2:	4798      	blx	r3
  4067a4:	e7fe      	b.n	4067a4 <create_usb_cdc_cli_task+0x30>
  4067a6:	2001      	movs	r0, #1
  4067a8:	4b0e      	ldr	r3, [pc, #56]	; (4067e4 <create_usb_cdc_cli_task+0x70>)
  4067aa:	4798      	blx	r3
  4067ac:	4b0e      	ldr	r3, [pc, #56]	; (4067e8 <create_usb_cdc_cli_task+0x74>)
  4067ae:	6018      	str	r0, [r3, #0]
  4067b0:	b910      	cbnz	r0, 4067b8 <create_usb_cdc_cli_task+0x44>
  4067b2:	4b0b      	ldr	r3, [pc, #44]	; (4067e0 <create_usb_cdc_cli_task+0x6c>)
  4067b4:	4798      	blx	r3
  4067b6:	e7fe      	b.n	4067b6 <create_usb_cdc_cli_task+0x42>
  4067b8:	9500      	str	r5, [sp, #0]
  4067ba:	2300      	movs	r3, #0
  4067bc:	9301      	str	r3, [sp, #4]
  4067be:	9302      	str	r3, [sp, #8]
  4067c0:	9303      	str	r3, [sp, #12]
  4067c2:	480a      	ldr	r0, [pc, #40]	; (4067ec <create_usb_cdc_cli_task+0x78>)
  4067c4:	490a      	ldr	r1, [pc, #40]	; (4067f0 <create_usb_cdc_cli_task+0x7c>)
  4067c6:	4622      	mov	r2, r4
  4067c8:	4c0a      	ldr	r4, [pc, #40]	; (4067f4 <create_usb_cdc_cli_task+0x80>)
  4067ca:	47a0      	blx	r4
  4067cc:	b004      	add	sp, #16
  4067ce:	bd70      	pop	{r4, r5, r6, pc}
  4067d0:	00406395 	.word	0x00406395
  4067d4:	004047cd 	.word	0x004047cd
  4067d8:	2000b000 	.word	0x2000b000
  4067dc:	0040486d 	.word	0x0040486d
  4067e0:	00404179 	.word	0x00404179
  4067e4:	004049e1 	.word	0x004049e1
  4067e8:	2000b004 	.word	0x2000b004
  4067ec:	0040660d 	.word	0x0040660d
  4067f0:	0040c050 	.word	0x0040c050
  4067f4:	00404edd 	.word	0x00404edd

004067f8 <cdc_cli_output>:
  4067f8:	4b0e      	ldr	r3, [pc, #56]	; (406834 <cdc_cli_output+0x3c>)
  4067fa:	781b      	ldrb	r3, [r3, #0]
  4067fc:	f013 0fff 	tst.w	r3, #255	; 0xff
  406800:	d017      	beq.n	406832 <cdc_cli_output+0x3a>
  406802:	b570      	push	{r4, r5, r6, lr}
  406804:	4604      	mov	r4, r0
  406806:	4d0c      	ldr	r5, [pc, #48]	; (406838 <cdc_cli_output+0x40>)
  406808:	6828      	ldr	r0, [r5, #0]
  40680a:	2100      	movs	r1, #0
  40680c:	f04f 32ff 	mov.w	r2, #4294967295
  406810:	460b      	mov	r3, r1
  406812:	4e0a      	ldr	r6, [pc, #40]	; (40683c <cdc_cli_output+0x44>)
  406814:	47b0      	blx	r6
  406816:	4620      	mov	r0, r4
  406818:	4b09      	ldr	r3, [pc, #36]	; (406840 <cdc_cli_output+0x48>)
  40681a:	4798      	blx	r3
  40681c:	4601      	mov	r1, r0
  40681e:	4620      	mov	r0, r4
  406820:	4b08      	ldr	r3, [pc, #32]	; (406844 <cdc_cli_output+0x4c>)
  406822:	4798      	blx	r3
  406824:	6828      	ldr	r0, [r5, #0]
  406826:	2100      	movs	r1, #0
  406828:	460a      	mov	r2, r1
  40682a:	460b      	mov	r3, r1
  40682c:	4c06      	ldr	r4, [pc, #24]	; (406848 <cdc_cli_output+0x50>)
  40682e:	47a0      	blx	r4
  406830:	bd70      	pop	{r4, r5, r6, pc}
  406832:	4770      	bx	lr
  406834:	2000b06e 	.word	0x2000b06e
  406838:	2000b004 	.word	0x2000b004
  40683c:	00404bb1 	.word	0x00404bb1
  406840:	00406e11 	.word	0x00406e11
  406844:	004015b5 	.word	0x004015b5
  406848:	0040486d 	.word	0x0040486d

0040684c <vParTestSetLED>:
  40684c:	2801      	cmp	r0, #1
  40684e:	d852      	bhi.n	4068f6 <vParTestSetLED+0xaa>
  406850:	b510      	push	{r4, lr}
  406852:	4604      	mov	r4, r0
  406854:	b339      	cbz	r1, 4068a6 <vParTestSetLED+0x5a>
  406856:	4b28      	ldr	r3, [pc, #160]	; (4068f8 <vParTestSetLED+0xac>)
  406858:	4798      	blx	r3
  40685a:	4b28      	ldr	r3, [pc, #160]	; (4068fc <vParTestSetLED+0xb0>)
  40685c:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
  406860:	b97b      	cbnz	r3, 406882 <vParTestSetLED+0x36>
  406862:	4b27      	ldr	r3, [pc, #156]	; (406900 <vParTestSetLED+0xb4>)
  406864:	f853 2024 	ldr.w	r2, [r3, r4, lsl #2]
typedef uint32_t ioport_port_t;
typedef uint32_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 5;
  406868:	0953      	lsrs	r3, r2, #5
	} else {
		return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
		       (IOPORT_PIO_OFFSET * port));
	}
#else
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  40686a:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  40686e:	f203 7307 	addw	r3, r3, #1799	; 0x707
  406872:	025b      	lsls	r3, r3, #9
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
  406874:	f002 021f 	and.w	r2, r2, #31
  406878:	2101      	movs	r1, #1
  40687a:	fa01 f202 	lsl.w	r2, r1, r2
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  40687e:	635a      	str	r2, [r3, #52]	; 0x34
  406880:	e00e      	b.n	4068a0 <vParTestSetLED+0x54>
  406882:	4b1f      	ldr	r3, [pc, #124]	; (406900 <vParTestSetLED+0xb4>)
  406884:	f853 2024 	ldr.w	r2, [r3, r4, lsl #2]
typedef uint32_t ioport_port_t;
typedef uint32_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 5;
  406888:	0953      	lsrs	r3, r2, #5
	} else {
		return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
		       (IOPORT_PIO_OFFSET * port));
	}
#else
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  40688a:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  40688e:	f203 7307 	addw	r3, r3, #1799	; 0x707
  406892:	025b      	lsls	r3, r3, #9
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
  406894:	f002 021f 	and.w	r2, r2, #31
  406898:	2101      	movs	r1, #1
  40689a:	fa01 f202 	lsl.w	r2, r1, r2
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  40689e:	631a      	str	r2, [r3, #48]	; 0x30
  4068a0:	4b18      	ldr	r3, [pc, #96]	; (406904 <vParTestSetLED+0xb8>)
  4068a2:	4798      	blx	r3
  4068a4:	bd10      	pop	{r4, pc}
  4068a6:	4b14      	ldr	r3, [pc, #80]	; (4068f8 <vParTestSetLED+0xac>)
  4068a8:	4798      	blx	r3
  4068aa:	4b14      	ldr	r3, [pc, #80]	; (4068fc <vParTestSetLED+0xb0>)
  4068ac:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
  4068b0:	b97b      	cbnz	r3, 4068d2 <vParTestSetLED+0x86>
  4068b2:	4b13      	ldr	r3, [pc, #76]	; (406900 <vParTestSetLED+0xb4>)
  4068b4:	f853 2024 	ldr.w	r2, [r3, r4, lsl #2]
typedef uint32_t ioport_port_t;
typedef uint32_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 5;
  4068b8:	0953      	lsrs	r3, r2, #5
	} else {
		return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
		       (IOPORT_PIO_OFFSET * port));
	}
#else
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  4068ba:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  4068be:	f203 7307 	addw	r3, r3, #1799	; 0x707
  4068c2:	025b      	lsls	r3, r3, #9
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
  4068c4:	f002 021f 	and.w	r2, r2, #31
  4068c8:	2101      	movs	r1, #1
  4068ca:	fa01 f202 	lsl.w	r2, r1, r2
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  4068ce:	631a      	str	r2, [r3, #48]	; 0x30
  4068d0:	e00e      	b.n	4068f0 <vParTestSetLED+0xa4>
  4068d2:	4b0b      	ldr	r3, [pc, #44]	; (406900 <vParTestSetLED+0xb4>)
  4068d4:	f853 2024 	ldr.w	r2, [r3, r4, lsl #2]
typedef uint32_t ioport_port_t;
typedef uint32_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 5;
  4068d8:	0953      	lsrs	r3, r2, #5
	} else {
		return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
		       (IOPORT_PIO_OFFSET * port));
	}
#else
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  4068da:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  4068de:	f203 7307 	addw	r3, r3, #1799	; 0x707
  4068e2:	025b      	lsls	r3, r3, #9
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
  4068e4:	f002 021f 	and.w	r2, r2, #31
  4068e8:	2101      	movs	r1, #1
  4068ea:	fa01 f202 	lsl.w	r2, r1, r2
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  4068ee:	635a      	str	r2, [r3, #52]	; 0x34
  4068f0:	4b04      	ldr	r3, [pc, #16]	; (406904 <vParTestSetLED+0xb8>)
  4068f2:	4798      	blx	r3
  4068f4:	bd10      	pop	{r4, pc}
  4068f6:	4770      	bx	lr
  4068f8:	004041a9 	.word	0x004041a9
  4068fc:	0040c058 	.word	0x0040c058
  406900:	0040c064 	.word	0x0040c064
  406904:	004041e9 	.word	0x004041e9

00406908 <vParTestInitialise>:
  406908:	b538      	push	{r3, r4, r5, lr}
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  40690a:	4c0a      	ldr	r4, [pc, #40]	; (406934 <vParTestInitialise+0x2c>)
  40690c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
  406910:	6123      	str	r3, [r4, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  406912:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  406916:	6323      	str	r3, [r4, #48]	; 0x30
  406918:	2000      	movs	r0, #0
  40691a:	4601      	mov	r1, r0
  40691c:	4d06      	ldr	r5, [pc, #24]	; (406938 <vParTestInitialise+0x30>)
  40691e:	47a8      	blx	r5
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  406920:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
  406924:	6123      	str	r3, [r4, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  406926:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  40692a:	6323      	str	r3, [r4, #48]	; 0x30
  40692c:	2001      	movs	r0, #1
  40692e:	2100      	movs	r1, #0
  406930:	47a8      	blx	r5
  406932:	bd38      	pop	{r3, r4, r5, pc}
  406934:	400e0e00 	.word	0x400e0e00
  406938:	0040684d 	.word	0x0040684d

0040693c <vParTestToggleLED>:
  40693c:	2801      	cmp	r0, #1
  40693e:	d819      	bhi.n	406974 <vParTestToggleLED+0x38>
  406940:	b510      	push	{r4, lr}
  406942:	4604      	mov	r4, r0
  406944:	4b0c      	ldr	r3, [pc, #48]	; (406978 <vParTestToggleLED+0x3c>)
  406946:	4798      	blx	r3
  406948:	4b0c      	ldr	r3, [pc, #48]	; (40697c <vParTestToggleLED+0x40>)
  40694a:	f853 2024 	ldr.w	r2, [r3, r4, lsl #2]
typedef uint32_t ioport_port_t;
typedef uint32_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 5;
  40694e:	0953      	lsrs	r3, r2, #5
	} else {
		return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
		       (IOPORT_PIO_OFFSET * port));
	}
#else
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  406950:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  406954:	f203 7307 	addw	r3, r3, #1799	; 0x707
  406958:	025b      	lsls	r3, r3, #9
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
  40695a:	f002 021f 	and.w	r2, r2, #31
  40695e:	2101      	movs	r1, #1
  406960:	fa01 f202 	lsl.w	r2, r1, r2
__always_inline static void arch_ioport_toggle_pin_level(ioport_pin_t pin)
{
	Pio *port = arch_ioport_pin_to_base(pin);
	ioport_port_mask_t mask = arch_ioport_pin_to_mask(pin);

	if (port->PIO_PDSR & arch_ioport_pin_to_mask(pin)) {
  406964:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
  406966:	420a      	tst	r2, r1
		port->PIO_CODR = mask;
  406968:	bf14      	ite	ne
  40696a:	635a      	strne	r2, [r3, #52]	; 0x34
	} else {
		port->PIO_SODR = mask;
  40696c:	631a      	streq	r2, [r3, #48]	; 0x30
  40696e:	4b04      	ldr	r3, [pc, #16]	; (406980 <vParTestToggleLED+0x44>)
  406970:	4798      	blx	r3
  406972:	bd10      	pop	{r4, pc}
  406974:	4770      	bx	lr
  406976:	bf00      	nop
  406978:	004041a9 	.word	0x004041a9
  40697c:	0040c064 	.word	0x0040c064
  406980:	004041e9 	.word	0x004041e9

00406984 <configure_timer_for_run_time_stats>:
  406984:	4b04      	ldr	r3, [pc, #16]	; (406998 <configure_timer_for_run_time_stats+0x14>)
  406986:	681b      	ldr	r3, [r3, #0]
  406988:	4a04      	ldr	r2, [pc, #16]	; (40699c <configure_timer_for_run_time_stats+0x18>)
  40698a:	fba2 2303 	umull	r2, r3, r2, r3
  40698e:	0b5b      	lsrs	r3, r3, #13
  406990:	4a03      	ldr	r2, [pc, #12]	; (4069a0 <configure_timer_for_run_time_stats+0x1c>)
  406992:	6013      	str	r3, [r2, #0]
  406994:	4770      	bx	lr
  406996:	bf00      	nop
  406998:	200000a4 	.word	0x200000a4
  40699c:	d1b71759 	.word	0xd1b71759
  4069a0:	2000b070 	.word	0x2000b070

004069a4 <get_run_time_counter_value>:
  4069a4:	b570      	push	{r4, r5, r6, lr}
  4069a6:	4b11      	ldr	r3, [pc, #68]	; (4069ec <get_run_time_counter_value+0x48>)
  4069a8:	681b      	ldr	r3, [r3, #0]
  4069aa:	4c11      	ldr	r4, [pc, #68]	; (4069f0 <get_run_time_counter_value+0x4c>)
  4069ac:	fba4 3403 	umull	r3, r4, r4, r3
  4069b0:	09a4      	lsrs	r4, r4, #6
  4069b2:	3c01      	subs	r4, #1
  4069b4:	4b0f      	ldr	r3, [pc, #60]	; (4069f4 <get_run_time_counter_value+0x50>)
  4069b6:	681e      	ldr	r6, [r3, #0]
  4069b8:	4b0f      	ldr	r3, [pc, #60]	; (4069f8 <get_run_time_counter_value+0x54>)
  4069ba:	4798      	blx	r3
  4069bc:	4605      	mov	r5, r0
  4069be:	4b0f      	ldr	r3, [pc, #60]	; (4069fc <get_run_time_counter_value+0x58>)
  4069c0:	4798      	blx	r3
  4069c2:	4b0f      	ldr	r3, [pc, #60]	; (406a00 <get_run_time_counter_value+0x5c>)
  4069c4:	681b      	ldr	r3, [r3, #0]
  4069c6:	f013 6f80 	tst.w	r3, #67108864	; 0x4000000
  4069ca:	d101      	bne.n	4069d0 <get_run_time_counter_value+0x2c>
  4069cc:	1ba4      	subs	r4, r4, r6
  4069ce:	e003      	b.n	4069d8 <get_run_time_counter_value+0x34>
  4069d0:	3501      	adds	r5, #1
  4069d2:	4b08      	ldr	r3, [pc, #32]	; (4069f4 <get_run_time_counter_value+0x50>)
  4069d4:	6818      	ldr	r0, [r3, #0]
  4069d6:	1a24      	subs	r4, r4, r0
  4069d8:	eb05 0585 	add.w	r5, r5, r5, lsl #2
  4069dc:	4b09      	ldr	r3, [pc, #36]	; (406a04 <get_run_time_counter_value+0x60>)
  4069de:	6818      	ldr	r0, [r3, #0]
  4069e0:	fbb4 f0f0 	udiv	r0, r4, r0
  4069e4:	eb00 0045 	add.w	r0, r0, r5, lsl #1
  4069e8:	bd70      	pop	{r4, r5, r6, pc}
  4069ea:	bf00      	nop
  4069ec:	200000a4 	.word	0x200000a4
  4069f0:	10624dd3 	.word	0x10624dd3
  4069f4:	e000e018 	.word	0xe000e018
  4069f8:	00405235 	.word	0x00405235
  4069fc:	00404179 	.word	0x00404179
  406a00:	e000ed04 	.word	0xe000ed04
  406a04:	2000b070 	.word	0x2000b070

00406a08 <prvLEDTimerCallback>:
  406a08:	b508      	push	{r3, lr}
  406a0a:	2000      	movs	r0, #0
  406a0c:	4b01      	ldr	r3, [pc, #4]	; (406a14 <prvLEDTimerCallback+0xc>)
  406a0e:	4798      	blx	r3
  406a10:	bd08      	pop	{r3, pc}
  406a12:	bf00      	nop
  406a14:	0040693d 	.word	0x0040693d

00406a18 <main>:
  406a18:	b510      	push	{r4, lr}
  406a1a:	b082      	sub	sp, #8
  406a1c:	4b1a      	ldr	r3, [pc, #104]	; (406a88 <main+0x70>)
  406a1e:	4798      	blx	r3
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07);               /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  406a20:	4a1a      	ldr	r2, [pc, #104]	; (406a8c <main+0x74>)
  406a22:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk);             /* clear bits to change               */
  406a24:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
  406a28:	041b      	lsls	r3, r3, #16
  406a2a:	0c1b      	lsrs	r3, r3, #16
  reg_value  =  (reg_value                                 |
  406a2c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  406a30:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
                ((uint32_t)0x5FA << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8));                                     /* Insert write key and priorty group */
  SCB->AIRCR =  reg_value;
  406a34:	60d3      	str	r3, [r2, #12]
  406a36:	4b16      	ldr	r3, [pc, #88]	; (406a90 <main+0x78>)
  406a38:	4798      	blx	r3
  406a3a:	4b16      	ldr	r3, [pc, #88]	; (406a94 <main+0x7c>)
  406a3c:	4798      	blx	r3
  406a3e:	4b16      	ldr	r3, [pc, #88]	; (406a98 <main+0x80>)
  406a40:	9300      	str	r3, [sp, #0]
  406a42:	4816      	ldr	r0, [pc, #88]	; (406a9c <main+0x84>)
  406a44:	21c8      	movs	r1, #200	; 0xc8
  406a46:	2201      	movs	r2, #1
  406a48:	2300      	movs	r3, #0
  406a4a:	4c15      	ldr	r4, [pc, #84]	; (406aa0 <main+0x88>)
  406a4c:	47a0      	blx	r4
  406a4e:	b910      	cbnz	r0, 406a56 <main+0x3e>
  406a50:	4b14      	ldr	r3, [pc, #80]	; (406aa4 <main+0x8c>)
  406a52:	4798      	blx	r3
  406a54:	e7fe      	b.n	406a54 <main+0x3c>
  406a56:	4604      	mov	r4, r0
  406a58:	4b13      	ldr	r3, [pc, #76]	; (406aa8 <main+0x90>)
  406a5a:	4798      	blx	r3
  406a5c:	4602      	mov	r2, r0
  406a5e:	2300      	movs	r3, #0
  406a60:	9300      	str	r3, [sp, #0]
  406a62:	4620      	mov	r0, r4
  406a64:	2101      	movs	r1, #1
  406a66:	4c11      	ldr	r4, [pc, #68]	; (406aac <main+0x94>)
  406a68:	47a0      	blx	r4
  406a6a:	4811      	ldr	r0, [pc, #68]	; (406ab0 <main+0x98>)
  406a6c:	f44f 7182 	mov.w	r1, #260	; 0x104
  406a70:	2201      	movs	r2, #1
  406a72:	4b10      	ldr	r3, [pc, #64]	; (406ab4 <main+0x9c>)
  406a74:	4798      	blx	r3
  406a76:	f44f 7082 	mov.w	r0, #260	; 0x104
  406a7a:	2101      	movs	r1, #1
  406a7c:	4b0e      	ldr	r3, [pc, #56]	; (406ab8 <main+0xa0>)
  406a7e:	4798      	blx	r3
  406a80:	4b0e      	ldr	r3, [pc, #56]	; (406abc <main+0xa4>)
  406a82:	4798      	blx	r3
  406a84:	e7fe      	b.n	406a84 <main+0x6c>
  406a86:	bf00      	nop
  406a88:	0040012d 	.word	0x0040012d
  406a8c:	e000ed00 	.word	0xe000ed00
  406a90:	00401bd5 	.word	0x00401bd5
  406a94:	00406909 	.word	0x00406909
  406a98:	00406a09 	.word	0x00406a09
  406a9c:	0040c070 	.word	0x0040c070
  406aa0:	00405d81 	.word	0x00405d81
  406aa4:	00404179 	.word	0x00404179
  406aa8:	00405229 	.word	0x00405229
  406aac:	00405dd1 	.word	0x00405dd1
  406ab0:	400e0800 	.word	0x400e0800
  406ab4:	00406595 	.word	0x00406595
  406ab8:	00406775 	.word	0x00406775
  406abc:	0040519d 	.word	0x0040519d

00406ac0 <vApplicationMallocFailedHook>:
  406ac0:	b508      	push	{r3, lr}
  406ac2:	4b01      	ldr	r3, [pc, #4]	; (406ac8 <vApplicationMallocFailedHook+0x8>)
  406ac4:	4798      	blx	r3
  406ac6:	e7fe      	b.n	406ac6 <vApplicationMallocFailedHook+0x6>
  406ac8:	00404179 	.word	0x00404179

00406acc <vApplicationIdleHook>:
  406acc:	4770      	bx	lr
  406ace:	bf00      	nop

00406ad0 <vApplicationStackOverflowHook>:
  406ad0:	b508      	push	{r3, lr}
  406ad2:	4b01      	ldr	r3, [pc, #4]	; (406ad8 <vApplicationStackOverflowHook+0x8>)
  406ad4:	4798      	blx	r3
  406ad6:	e7fe      	b.n	406ad6 <vApplicationStackOverflowHook+0x6>
  406ad8:	00404179 	.word	0x00404179

00406adc <vApplicationTickHook>:
  406adc:	4770      	bx	lr
  406ade:	bf00      	nop

00406ae0 <atol>:
  406ae0:	2100      	movs	r1, #0
  406ae2:	220a      	movs	r2, #10
  406ae4:	f000 bafe 	b.w	4070e4 <strtol>

00406ae8 <__libc_init_array>:
  406ae8:	b570      	push	{r4, r5, r6, lr}
  406aea:	4e0f      	ldr	r6, [pc, #60]	; (406b28 <__libc_init_array+0x40>)
  406aec:	4d0f      	ldr	r5, [pc, #60]	; (406b2c <__libc_init_array+0x44>)
  406aee:	1b76      	subs	r6, r6, r5
  406af0:	10b6      	asrs	r6, r6, #2
  406af2:	bf18      	it	ne
  406af4:	2400      	movne	r4, #0
  406af6:	d005      	beq.n	406b04 <__libc_init_array+0x1c>
  406af8:	3401      	adds	r4, #1
  406afa:	f855 3b04 	ldr.w	r3, [r5], #4
  406afe:	4798      	blx	r3
  406b00:	42a6      	cmp	r6, r4
  406b02:	d1f9      	bne.n	406af8 <__libc_init_array+0x10>
  406b04:	4e0a      	ldr	r6, [pc, #40]	; (406b30 <__libc_init_array+0x48>)
  406b06:	4d0b      	ldr	r5, [pc, #44]	; (406b34 <__libc_init_array+0x4c>)
  406b08:	1b76      	subs	r6, r6, r5
  406b0a:	f005 fbfd 	bl	40c308 <_init>
  406b0e:	10b6      	asrs	r6, r6, #2
  406b10:	bf18      	it	ne
  406b12:	2400      	movne	r4, #0
  406b14:	d006      	beq.n	406b24 <__libc_init_array+0x3c>
  406b16:	3401      	adds	r4, #1
  406b18:	f855 3b04 	ldr.w	r3, [r5], #4
  406b1c:	4798      	blx	r3
  406b1e:	42a6      	cmp	r6, r4
  406b20:	d1f9      	bne.n	406b16 <__libc_init_array+0x2e>
  406b22:	bd70      	pop	{r4, r5, r6, pc}
  406b24:	bd70      	pop	{r4, r5, r6, pc}
  406b26:	bf00      	nop
  406b28:	0040c314 	.word	0x0040c314
  406b2c:	0040c314 	.word	0x0040c314
  406b30:	0040c31c 	.word	0x0040c31c
  406b34:	0040c314 	.word	0x0040c314

00406b38 <memcpy>:
  406b38:	4684      	mov	ip, r0
  406b3a:	ea41 0300 	orr.w	r3, r1, r0
  406b3e:	f013 0303 	ands.w	r3, r3, #3
  406b42:	d16d      	bne.n	406c20 <memcpy+0xe8>
  406b44:	3a40      	subs	r2, #64	; 0x40
  406b46:	d341      	bcc.n	406bcc <memcpy+0x94>
  406b48:	f851 3b04 	ldr.w	r3, [r1], #4
  406b4c:	f840 3b04 	str.w	r3, [r0], #4
  406b50:	f851 3b04 	ldr.w	r3, [r1], #4
  406b54:	f840 3b04 	str.w	r3, [r0], #4
  406b58:	f851 3b04 	ldr.w	r3, [r1], #4
  406b5c:	f840 3b04 	str.w	r3, [r0], #4
  406b60:	f851 3b04 	ldr.w	r3, [r1], #4
  406b64:	f840 3b04 	str.w	r3, [r0], #4
  406b68:	f851 3b04 	ldr.w	r3, [r1], #4
  406b6c:	f840 3b04 	str.w	r3, [r0], #4
  406b70:	f851 3b04 	ldr.w	r3, [r1], #4
  406b74:	f840 3b04 	str.w	r3, [r0], #4
  406b78:	f851 3b04 	ldr.w	r3, [r1], #4
  406b7c:	f840 3b04 	str.w	r3, [r0], #4
  406b80:	f851 3b04 	ldr.w	r3, [r1], #4
  406b84:	f840 3b04 	str.w	r3, [r0], #4
  406b88:	f851 3b04 	ldr.w	r3, [r1], #4
  406b8c:	f840 3b04 	str.w	r3, [r0], #4
  406b90:	f851 3b04 	ldr.w	r3, [r1], #4
  406b94:	f840 3b04 	str.w	r3, [r0], #4
  406b98:	f851 3b04 	ldr.w	r3, [r1], #4
  406b9c:	f840 3b04 	str.w	r3, [r0], #4
  406ba0:	f851 3b04 	ldr.w	r3, [r1], #4
  406ba4:	f840 3b04 	str.w	r3, [r0], #4
  406ba8:	f851 3b04 	ldr.w	r3, [r1], #4
  406bac:	f840 3b04 	str.w	r3, [r0], #4
  406bb0:	f851 3b04 	ldr.w	r3, [r1], #4
  406bb4:	f840 3b04 	str.w	r3, [r0], #4
  406bb8:	f851 3b04 	ldr.w	r3, [r1], #4
  406bbc:	f840 3b04 	str.w	r3, [r0], #4
  406bc0:	f851 3b04 	ldr.w	r3, [r1], #4
  406bc4:	f840 3b04 	str.w	r3, [r0], #4
  406bc8:	3a40      	subs	r2, #64	; 0x40
  406bca:	d2bd      	bcs.n	406b48 <memcpy+0x10>
  406bcc:	3230      	adds	r2, #48	; 0x30
  406bce:	d311      	bcc.n	406bf4 <memcpy+0xbc>
  406bd0:	f851 3b04 	ldr.w	r3, [r1], #4
  406bd4:	f840 3b04 	str.w	r3, [r0], #4
  406bd8:	f851 3b04 	ldr.w	r3, [r1], #4
  406bdc:	f840 3b04 	str.w	r3, [r0], #4
  406be0:	f851 3b04 	ldr.w	r3, [r1], #4
  406be4:	f840 3b04 	str.w	r3, [r0], #4
  406be8:	f851 3b04 	ldr.w	r3, [r1], #4
  406bec:	f840 3b04 	str.w	r3, [r0], #4
  406bf0:	3a10      	subs	r2, #16
  406bf2:	d2ed      	bcs.n	406bd0 <memcpy+0x98>
  406bf4:	320c      	adds	r2, #12
  406bf6:	d305      	bcc.n	406c04 <memcpy+0xcc>
  406bf8:	f851 3b04 	ldr.w	r3, [r1], #4
  406bfc:	f840 3b04 	str.w	r3, [r0], #4
  406c00:	3a04      	subs	r2, #4
  406c02:	d2f9      	bcs.n	406bf8 <memcpy+0xc0>
  406c04:	3204      	adds	r2, #4
  406c06:	d008      	beq.n	406c1a <memcpy+0xe2>
  406c08:	07d2      	lsls	r2, r2, #31
  406c0a:	bf1c      	itt	ne
  406c0c:	f811 3b01 	ldrbne.w	r3, [r1], #1
  406c10:	f800 3b01 	strbne.w	r3, [r0], #1
  406c14:	d301      	bcc.n	406c1a <memcpy+0xe2>
  406c16:	880b      	ldrh	r3, [r1, #0]
  406c18:	8003      	strh	r3, [r0, #0]
  406c1a:	4660      	mov	r0, ip
  406c1c:	4770      	bx	lr
  406c1e:	bf00      	nop
  406c20:	2a08      	cmp	r2, #8
  406c22:	d313      	bcc.n	406c4c <memcpy+0x114>
  406c24:	078b      	lsls	r3, r1, #30
  406c26:	d08d      	beq.n	406b44 <memcpy+0xc>
  406c28:	f010 0303 	ands.w	r3, r0, #3
  406c2c:	d08a      	beq.n	406b44 <memcpy+0xc>
  406c2e:	f1c3 0304 	rsb	r3, r3, #4
  406c32:	1ad2      	subs	r2, r2, r3
  406c34:	07db      	lsls	r3, r3, #31
  406c36:	bf1c      	itt	ne
  406c38:	f811 3b01 	ldrbne.w	r3, [r1], #1
  406c3c:	f800 3b01 	strbne.w	r3, [r0], #1
  406c40:	d380      	bcc.n	406b44 <memcpy+0xc>
  406c42:	f831 3b02 	ldrh.w	r3, [r1], #2
  406c46:	f820 3b02 	strh.w	r3, [r0], #2
  406c4a:	e77b      	b.n	406b44 <memcpy+0xc>
  406c4c:	3a04      	subs	r2, #4
  406c4e:	d3d9      	bcc.n	406c04 <memcpy+0xcc>
  406c50:	3a01      	subs	r2, #1
  406c52:	f811 3b01 	ldrb.w	r3, [r1], #1
  406c56:	f800 3b01 	strb.w	r3, [r0], #1
  406c5a:	d2f9      	bcs.n	406c50 <memcpy+0x118>
  406c5c:	780b      	ldrb	r3, [r1, #0]
  406c5e:	7003      	strb	r3, [r0, #0]
  406c60:	784b      	ldrb	r3, [r1, #1]
  406c62:	7043      	strb	r3, [r0, #1]
  406c64:	788b      	ldrb	r3, [r1, #2]
  406c66:	7083      	strb	r3, [r0, #2]
  406c68:	4660      	mov	r0, ip
  406c6a:	4770      	bx	lr

00406c6c <memset>:
  406c6c:	b470      	push	{r4, r5, r6}
  406c6e:	0784      	lsls	r4, r0, #30
  406c70:	d046      	beq.n	406d00 <memset+0x94>
  406c72:	1e54      	subs	r4, r2, #1
  406c74:	2a00      	cmp	r2, #0
  406c76:	d041      	beq.n	406cfc <memset+0x90>
  406c78:	b2cd      	uxtb	r5, r1
  406c7a:	4603      	mov	r3, r0
  406c7c:	e002      	b.n	406c84 <memset+0x18>
  406c7e:	1e62      	subs	r2, r4, #1
  406c80:	b3e4      	cbz	r4, 406cfc <memset+0x90>
  406c82:	4614      	mov	r4, r2
  406c84:	f803 5b01 	strb.w	r5, [r3], #1
  406c88:	079a      	lsls	r2, r3, #30
  406c8a:	d1f8      	bne.n	406c7e <memset+0x12>
  406c8c:	2c03      	cmp	r4, #3
  406c8e:	d92e      	bls.n	406cee <memset+0x82>
  406c90:	b2cd      	uxtb	r5, r1
  406c92:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
  406c96:	2c0f      	cmp	r4, #15
  406c98:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
  406c9c:	d919      	bls.n	406cd2 <memset+0x66>
  406c9e:	f103 0210 	add.w	r2, r3, #16
  406ca2:	4626      	mov	r6, r4
  406ca4:	3e10      	subs	r6, #16
  406ca6:	2e0f      	cmp	r6, #15
  406ca8:	f842 5c10 	str.w	r5, [r2, #-16]
  406cac:	f842 5c0c 	str.w	r5, [r2, #-12]
  406cb0:	f842 5c08 	str.w	r5, [r2, #-8]
  406cb4:	f842 5c04 	str.w	r5, [r2, #-4]
  406cb8:	f102 0210 	add.w	r2, r2, #16
  406cbc:	d8f2      	bhi.n	406ca4 <memset+0x38>
  406cbe:	f1a4 0210 	sub.w	r2, r4, #16
  406cc2:	f022 020f 	bic.w	r2, r2, #15
  406cc6:	f004 040f 	and.w	r4, r4, #15
  406cca:	3210      	adds	r2, #16
  406ccc:	2c03      	cmp	r4, #3
  406cce:	4413      	add	r3, r2
  406cd0:	d90d      	bls.n	406cee <memset+0x82>
  406cd2:	461e      	mov	r6, r3
  406cd4:	4622      	mov	r2, r4
  406cd6:	3a04      	subs	r2, #4
  406cd8:	2a03      	cmp	r2, #3
  406cda:	f846 5b04 	str.w	r5, [r6], #4
  406cde:	d8fa      	bhi.n	406cd6 <memset+0x6a>
  406ce0:	1f22      	subs	r2, r4, #4
  406ce2:	f022 0203 	bic.w	r2, r2, #3
  406ce6:	3204      	adds	r2, #4
  406ce8:	4413      	add	r3, r2
  406cea:	f004 0403 	and.w	r4, r4, #3
  406cee:	b12c      	cbz	r4, 406cfc <memset+0x90>
  406cf0:	b2c9      	uxtb	r1, r1
  406cf2:	441c      	add	r4, r3
  406cf4:	f803 1b01 	strb.w	r1, [r3], #1
  406cf8:	42a3      	cmp	r3, r4
  406cfa:	d1fb      	bne.n	406cf4 <memset+0x88>
  406cfc:	bc70      	pop	{r4, r5, r6}
  406cfe:	4770      	bx	lr
  406d00:	4614      	mov	r4, r2
  406d02:	4603      	mov	r3, r0
  406d04:	e7c2      	b.n	406c8c <memset+0x20>
  406d06:	bf00      	nop

00406d08 <sprintf>:
  406d08:	b40e      	push	{r1, r2, r3}
  406d0a:	b5f0      	push	{r4, r5, r6, r7, lr}
  406d0c:	b09c      	sub	sp, #112	; 0x70
  406d0e:	ab21      	add	r3, sp, #132	; 0x84
  406d10:	490f      	ldr	r1, [pc, #60]	; (406d50 <sprintf+0x48>)
  406d12:	f853 2b04 	ldr.w	r2, [r3], #4
  406d16:	9301      	str	r3, [sp, #4]
  406d18:	4605      	mov	r5, r0
  406d1a:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
  406d1e:	6808      	ldr	r0, [r1, #0]
  406d20:	9502      	str	r5, [sp, #8]
  406d22:	f44f 7702 	mov.w	r7, #520	; 0x208
  406d26:	f64f 76ff 	movw	r6, #65535	; 0xffff
  406d2a:	a902      	add	r1, sp, #8
  406d2c:	9506      	str	r5, [sp, #24]
  406d2e:	f8ad 7014 	strh.w	r7, [sp, #20]
  406d32:	9404      	str	r4, [sp, #16]
  406d34:	9407      	str	r4, [sp, #28]
  406d36:	f8ad 6016 	strh.w	r6, [sp, #22]
  406d3a:	f000 f9df 	bl	4070fc <_svfprintf_r>
  406d3e:	9b02      	ldr	r3, [sp, #8]
  406d40:	2200      	movs	r2, #0
  406d42:	701a      	strb	r2, [r3, #0]
  406d44:	b01c      	add	sp, #112	; 0x70
  406d46:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
  406d4a:	b003      	add	sp, #12
  406d4c:	4770      	bx	lr
  406d4e:	bf00      	nop
  406d50:	200004e0 	.word	0x200004e0

00406d54 <strcpy>:
  406d54:	ea80 0201 	eor.w	r2, r0, r1
  406d58:	4684      	mov	ip, r0
  406d5a:	f012 0f03 	tst.w	r2, #3
  406d5e:	d14f      	bne.n	406e00 <strcpy+0xac>
  406d60:	f011 0f03 	tst.w	r1, #3
  406d64:	d132      	bne.n	406dcc <strcpy+0x78>
  406d66:	f84d 4d04 	str.w	r4, [sp, #-4]!
  406d6a:	f011 0f04 	tst.w	r1, #4
  406d6e:	f851 3b04 	ldr.w	r3, [r1], #4
  406d72:	d00b      	beq.n	406d8c <strcpy+0x38>
  406d74:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
  406d78:	439a      	bics	r2, r3
  406d7a:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
  406d7e:	bf04      	itt	eq
  406d80:	f84c 3b04 	streq.w	r3, [ip], #4
  406d84:	f851 3b04 	ldreq.w	r3, [r1], #4
  406d88:	d116      	bne.n	406db8 <strcpy+0x64>
  406d8a:	bf00      	nop
  406d8c:	f851 4b04 	ldr.w	r4, [r1], #4
  406d90:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
  406d94:	439a      	bics	r2, r3
  406d96:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
  406d9a:	f1a4 3201 	sub.w	r2, r4, #16843009	; 0x1010101
  406d9e:	d10b      	bne.n	406db8 <strcpy+0x64>
  406da0:	f84c 3b04 	str.w	r3, [ip], #4
  406da4:	43a2      	bics	r2, r4
  406da6:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
  406daa:	bf04      	itt	eq
  406dac:	f851 3b04 	ldreq.w	r3, [r1], #4
  406db0:	f84c 4b04 	streq.w	r4, [ip], #4
  406db4:	d0ea      	beq.n	406d8c <strcpy+0x38>
  406db6:	4623      	mov	r3, r4
  406db8:	f80c 3b01 	strb.w	r3, [ip], #1
  406dbc:	f013 0fff 	tst.w	r3, #255	; 0xff
  406dc0:	ea4f 2333 	mov.w	r3, r3, ror #8
  406dc4:	d1f8      	bne.n	406db8 <strcpy+0x64>
  406dc6:	f85d 4b04 	ldr.w	r4, [sp], #4
  406dca:	4770      	bx	lr
  406dcc:	f011 0f01 	tst.w	r1, #1
  406dd0:	d006      	beq.n	406de0 <strcpy+0x8c>
  406dd2:	f811 2b01 	ldrb.w	r2, [r1], #1
  406dd6:	f80c 2b01 	strb.w	r2, [ip], #1
  406dda:	2a00      	cmp	r2, #0
  406ddc:	bf08      	it	eq
  406dde:	4770      	bxeq	lr
  406de0:	f011 0f02 	tst.w	r1, #2
  406de4:	d0bf      	beq.n	406d66 <strcpy+0x12>
  406de6:	f831 2b02 	ldrh.w	r2, [r1], #2
  406dea:	f012 0fff 	tst.w	r2, #255	; 0xff
  406dee:	bf16      	itet	ne
  406df0:	f82c 2b02 	strhne.w	r2, [ip], #2
  406df4:	f88c 2000 	strbeq.w	r2, [ip]
  406df8:	f412 4f7f 	tstne.w	r2, #65280	; 0xff00
  406dfc:	d1b3      	bne.n	406d66 <strcpy+0x12>
  406dfe:	4770      	bx	lr
  406e00:	f811 2b01 	ldrb.w	r2, [r1], #1
  406e04:	f80c 2b01 	strb.w	r2, [ip], #1
  406e08:	2a00      	cmp	r2, #0
  406e0a:	d1f9      	bne.n	406e00 <strcpy+0xac>
  406e0c:	4770      	bx	lr
  406e0e:	bf00      	nop

00406e10 <strlen>:
  406e10:	f020 0103 	bic.w	r1, r0, #3
  406e14:	f010 0003 	ands.w	r0, r0, #3
  406e18:	f1c0 0000 	rsb	r0, r0, #0
  406e1c:	f851 3b04 	ldr.w	r3, [r1], #4
  406e20:	f100 0c04 	add.w	ip, r0, #4
  406e24:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
  406e28:	f06f 0200 	mvn.w	r2, #0
  406e2c:	bf1c      	itt	ne
  406e2e:	fa22 f20c 	lsrne.w	r2, r2, ip
  406e32:	4313      	orrne	r3, r2
  406e34:	f04f 0c01 	mov.w	ip, #1
  406e38:	ea4c 2c0c 	orr.w	ip, ip, ip, lsl #8
  406e3c:	ea4c 4c0c 	orr.w	ip, ip, ip, lsl #16
  406e40:	eba3 020c 	sub.w	r2, r3, ip
  406e44:	ea22 0203 	bic.w	r2, r2, r3
  406e48:	ea12 12cc 	ands.w	r2, r2, ip, lsl #7
  406e4c:	bf04      	itt	eq
  406e4e:	f851 3b04 	ldreq.w	r3, [r1], #4
  406e52:	3004      	addeq	r0, #4
  406e54:	d0f4      	beq.n	406e40 <strlen+0x30>
  406e56:	f1c2 0100 	rsb	r1, r2, #0
  406e5a:	ea02 0201 	and.w	r2, r2, r1
  406e5e:	fab2 f282 	clz	r2, r2
  406e62:	f1c2 021f 	rsb	r2, r2, #31
  406e66:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
  406e6a:	4770      	bx	lr

00406e6c <strncat>:
  406e6c:	0783      	lsls	r3, r0, #30
  406e6e:	b430      	push	{r4, r5}
  406e70:	d125      	bne.n	406ebe <strncat+0x52>
  406e72:	6804      	ldr	r4, [r0, #0]
  406e74:	f1a4 3301 	sub.w	r3, r4, #16843009	; 0x1010101
  406e78:	ea23 0304 	bic.w	r3, r3, r4
  406e7c:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
  406e80:	4603      	mov	r3, r0
  406e82:	d108      	bne.n	406e96 <strncat+0x2a>
  406e84:	f853 5f04 	ldr.w	r5, [r3, #4]!
  406e88:	f1a5 3401 	sub.w	r4, r5, #16843009	; 0x1010101
  406e8c:	ea24 0405 	bic.w	r4, r4, r5
  406e90:	f014 3f80 	tst.w	r4, #2155905152	; 0x80808080
  406e94:	d0f6      	beq.n	406e84 <strncat+0x18>
  406e96:	781c      	ldrb	r4, [r3, #0]
  406e98:	b11c      	cbz	r4, 406ea2 <strncat+0x36>
  406e9a:	f813 4f01 	ldrb.w	r4, [r3, #1]!
  406e9e:	2c00      	cmp	r4, #0
  406ea0:	d1fb      	bne.n	406e9a <strncat+0x2e>
  406ea2:	189d      	adds	r5, r3, r2
  406ea4:	e005      	b.n	406eb2 <strncat+0x46>
  406ea6:	f811 4b01 	ldrb.w	r4, [r1], #1
  406eaa:	f803 4b01 	strb.w	r4, [r3], #1
  406eae:	b124      	cbz	r4, 406eba <strncat+0x4e>
  406eb0:	b13a      	cbz	r2, 406ec2 <strncat+0x56>
  406eb2:	42ab      	cmp	r3, r5
  406eb4:	f102 32ff 	add.w	r2, r2, #4294967295
  406eb8:	d1f5      	bne.n	406ea6 <strncat+0x3a>
  406eba:	bc30      	pop	{r4, r5}
  406ebc:	4770      	bx	lr
  406ebe:	4603      	mov	r3, r0
  406ec0:	e7e9      	b.n	406e96 <strncat+0x2a>
  406ec2:	701a      	strb	r2, [r3, #0]
  406ec4:	e7f5      	b.n	406eb2 <strncat+0x46>
  406ec6:	bf00      	nop

00406ec8 <strncmp>:
  406ec8:	2a00      	cmp	r2, #0
  406eca:	d03e      	beq.n	406f4a <strncmp+0x82>
  406ecc:	ea40 0301 	orr.w	r3, r0, r1
  406ed0:	f013 0303 	ands.w	r3, r3, #3
  406ed4:	b4f0      	push	{r4, r5, r6, r7}
  406ed6:	d125      	bne.n	406f24 <strncmp+0x5c>
  406ed8:	2a03      	cmp	r2, #3
  406eda:	d923      	bls.n	406f24 <strncmp+0x5c>
  406edc:	6804      	ldr	r4, [r0, #0]
  406ede:	680d      	ldr	r5, [r1, #0]
  406ee0:	42ac      	cmp	r4, r5
  406ee2:	d11f      	bne.n	406f24 <strncmp+0x5c>
  406ee4:	3a04      	subs	r2, #4
  406ee6:	d032      	beq.n	406f4e <strncmp+0x86>
  406ee8:	f1a4 3501 	sub.w	r5, r4, #16843009	; 0x1010101
  406eec:	ea25 0404 	bic.w	r4, r5, r4
  406ef0:	f014 3f80 	tst.w	r4, #2155905152	; 0x80808080
  406ef4:	d12e      	bne.n	406f54 <strncmp+0x8c>
  406ef6:	1d07      	adds	r7, r0, #4
  406ef8:	1d0d      	adds	r5, r1, #4
  406efa:	e00d      	b.n	406f18 <strncmp+0x50>
  406efc:	f857 3b04 	ldr.w	r3, [r7], #4
  406f00:	680e      	ldr	r6, [r1, #0]
  406f02:	f1a3 3401 	sub.w	r4, r3, #16843009	; 0x1010101
  406f06:	42b3      	cmp	r3, r6
  406f08:	ea24 0403 	bic.w	r4, r4, r3
  406f0c:	d10a      	bne.n	406f24 <strncmp+0x5c>
  406f0e:	3a04      	subs	r2, #4
  406f10:	d01d      	beq.n	406f4e <strncmp+0x86>
  406f12:	f014 3f80 	tst.w	r4, #2155905152	; 0x80808080
  406f16:	d120      	bne.n	406f5a <strncmp+0x92>
  406f18:	2a03      	cmp	r2, #3
  406f1a:	4629      	mov	r1, r5
  406f1c:	4638      	mov	r0, r7
  406f1e:	f105 0504 	add.w	r5, r5, #4
  406f22:	d8eb      	bhi.n	406efc <strncmp+0x34>
  406f24:	7803      	ldrb	r3, [r0, #0]
  406f26:	780c      	ldrb	r4, [r1, #0]
  406f28:	42a3      	cmp	r3, r4
  406f2a:	f102 32ff 	add.w	r2, r2, #4294967295
  406f2e:	d109      	bne.n	406f44 <strncmp+0x7c>
  406f30:	b16a      	cbz	r2, 406f4e <strncmp+0x86>
  406f32:	b17b      	cbz	r3, 406f54 <strncmp+0x8c>
  406f34:	f810 3f01 	ldrb.w	r3, [r0, #1]!
  406f38:	f811 4f01 	ldrb.w	r4, [r1, #1]!
  406f3c:	42a3      	cmp	r3, r4
  406f3e:	f102 32ff 	add.w	r2, r2, #4294967295
  406f42:	d0f5      	beq.n	406f30 <strncmp+0x68>
  406f44:	1b18      	subs	r0, r3, r4
  406f46:	bcf0      	pop	{r4, r5, r6, r7}
  406f48:	4770      	bx	lr
  406f4a:	4610      	mov	r0, r2
  406f4c:	4770      	bx	lr
  406f4e:	4610      	mov	r0, r2
  406f50:	bcf0      	pop	{r4, r5, r6, r7}
  406f52:	4770      	bx	lr
  406f54:	4618      	mov	r0, r3
  406f56:	bcf0      	pop	{r4, r5, r6, r7}
  406f58:	4770      	bx	lr
  406f5a:	2000      	movs	r0, #0
  406f5c:	e7f3      	b.n	406f46 <strncmp+0x7e>
  406f5e:	bf00      	nop

00406f60 <strncpy>:
  406f60:	ea40 0301 	orr.w	r3, r0, r1
  406f64:	079b      	lsls	r3, r3, #30
  406f66:	b470      	push	{r4, r5, r6}
  406f68:	d12b      	bne.n	406fc2 <strncpy+0x62>
  406f6a:	2a03      	cmp	r2, #3
  406f6c:	d929      	bls.n	406fc2 <strncpy+0x62>
  406f6e:	460c      	mov	r4, r1
  406f70:	4603      	mov	r3, r0
  406f72:	4621      	mov	r1, r4
  406f74:	f854 6b04 	ldr.w	r6, [r4], #4
  406f78:	f1a6 3501 	sub.w	r5, r6, #16843009	; 0x1010101
  406f7c:	ea25 0506 	bic.w	r5, r5, r6
  406f80:	f015 3f80 	tst.w	r5, #2155905152	; 0x80808080
  406f84:	d105      	bne.n	406f92 <strncpy+0x32>
  406f86:	3a04      	subs	r2, #4
  406f88:	2a03      	cmp	r2, #3
  406f8a:	f843 6b04 	str.w	r6, [r3], #4
  406f8e:	4621      	mov	r1, r4
  406f90:	d8ef      	bhi.n	406f72 <strncpy+0x12>
  406f92:	b1a2      	cbz	r2, 406fbe <strncpy+0x5e>
  406f94:	780c      	ldrb	r4, [r1, #0]
  406f96:	701c      	strb	r4, [r3, #0]
  406f98:	3a01      	subs	r2, #1
  406f9a:	3301      	adds	r3, #1
  406f9c:	3101      	adds	r1, #1
  406f9e:	b13c      	cbz	r4, 406fb0 <strncpy+0x50>
  406fa0:	b16a      	cbz	r2, 406fbe <strncpy+0x5e>
  406fa2:	f811 4b01 	ldrb.w	r4, [r1], #1
  406fa6:	f803 4b01 	strb.w	r4, [r3], #1
  406faa:	3a01      	subs	r2, #1
  406fac:	2c00      	cmp	r4, #0
  406fae:	d1f7      	bne.n	406fa0 <strncpy+0x40>
  406fb0:	b12a      	cbz	r2, 406fbe <strncpy+0x5e>
  406fb2:	441a      	add	r2, r3
  406fb4:	2100      	movs	r1, #0
  406fb6:	f803 1b01 	strb.w	r1, [r3], #1
  406fba:	4293      	cmp	r3, r2
  406fbc:	d1fb      	bne.n	406fb6 <strncpy+0x56>
  406fbe:	bc70      	pop	{r4, r5, r6}
  406fc0:	4770      	bx	lr
  406fc2:	4603      	mov	r3, r0
  406fc4:	e7e5      	b.n	406f92 <strncpy+0x32>
  406fc6:	bf00      	nop

00406fc8 <_strtol_r>:
  406fc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  406fcc:	4c44      	ldr	r4, [pc, #272]	; (4070e0 <_strtol_r+0x118>)
  406fce:	4683      	mov	fp, r0
  406fd0:	460e      	mov	r6, r1
  406fd2:	f8d4 e000 	ldr.w	lr, [r4]
  406fd6:	e000      	b.n	406fda <_strtol_r+0x12>
  406fd8:	4626      	mov	r6, r4
  406fda:	4634      	mov	r4, r6
  406fdc:	f814 5b01 	ldrb.w	r5, [r4], #1
  406fe0:	eb0e 0005 	add.w	r0, lr, r5
  406fe4:	7840      	ldrb	r0, [r0, #1]
  406fe6:	f000 0008 	and.w	r0, r0, #8
  406fea:	f000 08ff 	and.w	r8, r0, #255	; 0xff
  406fee:	2800      	cmp	r0, #0
  406ff0:	d1f2      	bne.n	406fd8 <_strtol_r+0x10>
  406ff2:	2d2d      	cmp	r5, #45	; 0x2d
  406ff4:	d04b      	beq.n	40708e <_strtol_r+0xc6>
  406ff6:	2d2b      	cmp	r5, #43	; 0x2b
  406ff8:	bf04      	itt	eq
  406ffa:	7875      	ldrbeq	r5, [r6, #1]
  406ffc:	1cb4      	addeq	r4, r6, #2
  406ffe:	b11b      	cbz	r3, 407008 <_strtol_r+0x40>
  407000:	2b10      	cmp	r3, #16
  407002:	d060      	beq.n	4070c6 <_strtol_r+0xfe>
  407004:	469a      	mov	sl, r3
  407006:	e003      	b.n	407010 <_strtol_r+0x48>
  407008:	2d30      	cmp	r5, #48	; 0x30
  40700a:	d054      	beq.n	4070b6 <_strtol_r+0xee>
  40700c:	230a      	movs	r3, #10
  40700e:	469a      	mov	sl, r3
  407010:	f1b8 0f00 	cmp.w	r8, #0
  407014:	bf14      	ite	ne
  407016:	f04f 4000 	movne.w	r0, #2147483648	; 0x80000000
  40701a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
  40701e:	2700      	movs	r7, #0
  407020:	fbb0 f9fa 	udiv	r9, r0, sl
  407024:	46bc      	mov	ip, r7
  407026:	fb0a 0019 	mls	r0, sl, r9, r0
  40702a:	e00c      	b.n	407046 <_strtol_r+0x7e>
  40702c:	3d30      	subs	r5, #48	; 0x30
  40702e:	42ab      	cmp	r3, r5
  407030:	dd19      	ble.n	407066 <_strtol_r+0x9e>
  407032:	1c7e      	adds	r6, r7, #1
  407034:	d005      	beq.n	407042 <_strtol_r+0x7a>
  407036:	45cc      	cmp	ip, r9
  407038:	d824      	bhi.n	407084 <_strtol_r+0xbc>
  40703a:	d021      	beq.n	407080 <_strtol_r+0xb8>
  40703c:	fb0a 5c0c 	mla	ip, sl, ip, r5
  407040:	2701      	movs	r7, #1
  407042:	f814 5b01 	ldrb.w	r5, [r4], #1
  407046:	eb0e 0605 	add.w	r6, lr, r5
  40704a:	7876      	ldrb	r6, [r6, #1]
  40704c:	f016 0f04 	tst.w	r6, #4
  407050:	d1ec      	bne.n	40702c <_strtol_r+0x64>
  407052:	f016 0603 	ands.w	r6, r6, #3
  407056:	d006      	beq.n	407066 <_strtol_r+0x9e>
  407058:	2e01      	cmp	r6, #1
  40705a:	bf0c      	ite	eq
  40705c:	2637      	moveq	r6, #55	; 0x37
  40705e:	2657      	movne	r6, #87	; 0x57
  407060:	1bad      	subs	r5, r5, r6
  407062:	42ab      	cmp	r3, r5
  407064:	dce5      	bgt.n	407032 <_strtol_r+0x6a>
  407066:	1c7b      	adds	r3, r7, #1
  407068:	d016      	beq.n	407098 <_strtol_r+0xd0>
  40706a:	f1c8 0000 	rsb	r0, r8, #0
  40706e:	ea8c 0000 	eor.w	r0, ip, r0
  407072:	4440      	add	r0, r8
  407074:	b14a      	cbz	r2, 40708a <_strtol_r+0xc2>
  407076:	b107      	cbz	r7, 40707a <_strtol_r+0xb2>
  407078:	1e61      	subs	r1, r4, #1
  40707a:	6011      	str	r1, [r2, #0]
  40707c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  407080:	4285      	cmp	r5, r0
  407082:	dddb      	ble.n	40703c <_strtol_r+0x74>
  407084:	f04f 37ff 	mov.w	r7, #4294967295
  407088:	e7db      	b.n	407042 <_strtol_r+0x7a>
  40708a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40708e:	1cb4      	adds	r4, r6, #2
  407090:	7875      	ldrb	r5, [r6, #1]
  407092:	f04f 0801 	mov.w	r8, #1
  407096:	e7b2      	b.n	406ffe <_strtol_r+0x36>
  407098:	f1b8 0f00 	cmp.w	r8, #0
  40709c:	f04f 0322 	mov.w	r3, #34	; 0x22
  4070a0:	bf14      	ite	ne
  4070a2:	f04f 4000 	movne.w	r0, #2147483648	; 0x80000000
  4070a6:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
  4070aa:	f8cb 3000 	str.w	r3, [fp]
  4070ae:	2a00      	cmp	r2, #0
  4070b0:	d1e2      	bne.n	407078 <_strtol_r+0xb0>
  4070b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4070b6:	7823      	ldrb	r3, [r4, #0]
  4070b8:	f003 03df 	and.w	r3, r3, #223	; 0xdf
  4070bc:	2b58      	cmp	r3, #88	; 0x58
  4070be:	d009      	beq.n	4070d4 <_strtol_r+0x10c>
  4070c0:	2308      	movs	r3, #8
  4070c2:	469a      	mov	sl, r3
  4070c4:	e7a4      	b.n	407010 <_strtol_r+0x48>
  4070c6:	2d30      	cmp	r5, #48	; 0x30
  4070c8:	d19c      	bne.n	407004 <_strtol_r+0x3c>
  4070ca:	7820      	ldrb	r0, [r4, #0]
  4070cc:	f000 00df 	and.w	r0, r0, #223	; 0xdf
  4070d0:	2858      	cmp	r0, #88	; 0x58
  4070d2:	d197      	bne.n	407004 <_strtol_r+0x3c>
  4070d4:	f04f 0a10 	mov.w	sl, #16
  4070d8:	7865      	ldrb	r5, [r4, #1]
  4070da:	4653      	mov	r3, sl
  4070dc:	3402      	adds	r4, #2
  4070de:	e797      	b.n	407010 <_strtol_r+0x48>
  4070e0:	200004e4 	.word	0x200004e4

004070e4 <strtol>:
  4070e4:	b430      	push	{r4, r5}
  4070e6:	4c04      	ldr	r4, [pc, #16]	; (4070f8 <strtol+0x14>)
  4070e8:	460d      	mov	r5, r1
  4070ea:	4613      	mov	r3, r2
  4070ec:	4601      	mov	r1, r0
  4070ee:	462a      	mov	r2, r5
  4070f0:	6820      	ldr	r0, [r4, #0]
  4070f2:	bc30      	pop	{r4, r5}
  4070f4:	f7ff bf68 	b.w	406fc8 <_strtol_r>
  4070f8:	200004e0 	.word	0x200004e0

004070fc <_svfprintf_r>:
  4070fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  407100:	b0c1      	sub	sp, #260	; 0x104
  407102:	4689      	mov	r9, r1
  407104:	920a      	str	r2, [sp, #40]	; 0x28
  407106:	930e      	str	r3, [sp, #56]	; 0x38
  407108:	9008      	str	r0, [sp, #32]
  40710a:	f002 fb6f 	bl	4097ec <_localeconv_r>
  40710e:	6803      	ldr	r3, [r0, #0]
  407110:	9317      	str	r3, [sp, #92]	; 0x5c
  407112:	4618      	mov	r0, r3
  407114:	f7ff fe7c 	bl	406e10 <strlen>
  407118:	f8b9 300c 	ldrh.w	r3, [r9, #12]
  40711c:	9018      	str	r0, [sp, #96]	; 0x60
  40711e:	061a      	lsls	r2, r3, #24
  407120:	d504      	bpl.n	40712c <_svfprintf_r+0x30>
  407122:	f8d9 3010 	ldr.w	r3, [r9, #16]
  407126:	2b00      	cmp	r3, #0
  407128:	f001 808c 	beq.w	408244 <_svfprintf_r+0x1148>
  40712c:	2300      	movs	r3, #0
  40712e:	af30      	add	r7, sp, #192	; 0xc0
  407130:	9313      	str	r3, [sp, #76]	; 0x4c
  407132:	9325      	str	r3, [sp, #148]	; 0x94
  407134:	9324      	str	r3, [sp, #144]	; 0x90
  407136:	9316      	str	r3, [sp, #88]	; 0x58
  407138:	9319      	str	r3, [sp, #100]	; 0x64
  40713a:	930b      	str	r3, [sp, #44]	; 0x2c
  40713c:	9723      	str	r7, [sp, #140]	; 0x8c
  40713e:	9314      	str	r3, [sp, #80]	; 0x50
  407140:	9315      	str	r3, [sp, #84]	; 0x54
  407142:	463c      	mov	r4, r7
  407144:	464e      	mov	r6, r9
  407146:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  407148:	782b      	ldrb	r3, [r5, #0]
  40714a:	2b00      	cmp	r3, #0
  40714c:	f000 80a9 	beq.w	4072a2 <_svfprintf_r+0x1a6>
  407150:	2b25      	cmp	r3, #37	; 0x25
  407152:	d102      	bne.n	40715a <_svfprintf_r+0x5e>
  407154:	e0a5      	b.n	4072a2 <_svfprintf_r+0x1a6>
  407156:	2b25      	cmp	r3, #37	; 0x25
  407158:	d003      	beq.n	407162 <_svfprintf_r+0x66>
  40715a:	f815 3f01 	ldrb.w	r3, [r5, #1]!
  40715e:	2b00      	cmp	r3, #0
  407160:	d1f9      	bne.n	407156 <_svfprintf_r+0x5a>
  407162:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  407164:	1aeb      	subs	r3, r5, r3
  407166:	b173      	cbz	r3, 407186 <_svfprintf_r+0x8a>
  407168:	9a24      	ldr	r2, [sp, #144]	; 0x90
  40716a:	9925      	ldr	r1, [sp, #148]	; 0x94
  40716c:	980a      	ldr	r0, [sp, #40]	; 0x28
  40716e:	6020      	str	r0, [r4, #0]
  407170:	3201      	adds	r2, #1
  407172:	4419      	add	r1, r3
  407174:	2a07      	cmp	r2, #7
  407176:	6063      	str	r3, [r4, #4]
  407178:	9125      	str	r1, [sp, #148]	; 0x94
  40717a:	9224      	str	r2, [sp, #144]	; 0x90
  40717c:	dc72      	bgt.n	407264 <_svfprintf_r+0x168>
  40717e:	3408      	adds	r4, #8
  407180:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  407182:	441a      	add	r2, r3
  407184:	920b      	str	r2, [sp, #44]	; 0x2c
  407186:	782b      	ldrb	r3, [r5, #0]
  407188:	2b00      	cmp	r3, #0
  40718a:	f000 87b5 	beq.w	4080f8 <_svfprintf_r+0xffc>
  40718e:	2300      	movs	r3, #0
  407190:	1c69      	adds	r1, r5, #1
  407192:	786d      	ldrb	r5, [r5, #1]
  407194:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
  407198:	461a      	mov	r2, r3
  40719a:	930c      	str	r3, [sp, #48]	; 0x30
  40719c:	9307      	str	r3, [sp, #28]
  40719e:	f04f 3aff 	mov.w	sl, #4294967295
  4071a2:	1c4b      	adds	r3, r1, #1
  4071a4:	f1a5 0120 	sub.w	r1, r5, #32
  4071a8:	2958      	cmp	r1, #88	; 0x58
  4071aa:	f200 83d9 	bhi.w	407960 <_svfprintf_r+0x864>
  4071ae:	e8df f011 	tbh	[pc, r1, lsl #1]
  4071b2:	0270      	.short	0x0270
  4071b4:	03d703d7 	.word	0x03d703d7
  4071b8:	03d70374 	.word	0x03d70374
  4071bc:	03d703d7 	.word	0x03d703d7
  4071c0:	03d703d7 	.word	0x03d703d7
  4071c4:	02f003d7 	.word	0x02f003d7
  4071c8:	03d7020d 	.word	0x03d7020d
  4071cc:	021101f4 	.word	0x021101f4
  4071d0:	037b03d7 	.word	0x037b03d7
  4071d4:	02ba02ba 	.word	0x02ba02ba
  4071d8:	02ba02ba 	.word	0x02ba02ba
  4071dc:	02ba02ba 	.word	0x02ba02ba
  4071e0:	02ba02ba 	.word	0x02ba02ba
  4071e4:	03d702ba 	.word	0x03d702ba
  4071e8:	03d703d7 	.word	0x03d703d7
  4071ec:	03d703d7 	.word	0x03d703d7
  4071f0:	03d703d7 	.word	0x03d703d7
  4071f4:	03d703d7 	.word	0x03d703d7
  4071f8:	02c903d7 	.word	0x02c903d7
  4071fc:	03d7038b 	.word	0x03d7038b
  407200:	03d7038b 	.word	0x03d7038b
  407204:	03d703d7 	.word	0x03d703d7
  407208:	036d03d7 	.word	0x036d03d7
  40720c:	03d703d7 	.word	0x03d703d7
  407210:	03d70305 	.word	0x03d70305
  407214:	03d703d7 	.word	0x03d703d7
  407218:	03d703d7 	.word	0x03d703d7
  40721c:	03d70323 	.word	0x03d70323
  407220:	033d03d7 	.word	0x033d03d7
  407224:	03d703d7 	.word	0x03d703d7
  407228:	03d703d7 	.word	0x03d703d7
  40722c:	03d703d7 	.word	0x03d703d7
  407230:	03d703d7 	.word	0x03d703d7
  407234:	03d703d7 	.word	0x03d703d7
  407238:	022c0358 	.word	0x022c0358
  40723c:	038b038b 	.word	0x038b038b
  407240:	02fe038b 	.word	0x02fe038b
  407244:	03d7022c 	.word	0x03d7022c
  407248:	02e603d7 	.word	0x02e603d7
  40724c:	027e03d7 	.word	0x027e03d7
  407250:	03c001fb 	.word	0x03c001fb
  407254:	03d70277 	.word	0x03d70277
  407258:	03d70292 	.word	0x03d70292
  40725c:	03d7007a 	.word	0x03d7007a
  407260:	024a03d7 	.word	0x024a03d7
  407264:	9808      	ldr	r0, [sp, #32]
  407266:	9307      	str	r3, [sp, #28]
  407268:	4631      	mov	r1, r6
  40726a:	aa23      	add	r2, sp, #140	; 0x8c
  40726c:	f003 fb2e 	bl	40a8cc <__ssprint_r>
  407270:	b950      	cbnz	r0, 407288 <_svfprintf_r+0x18c>
  407272:	463c      	mov	r4, r7
  407274:	9b07      	ldr	r3, [sp, #28]
  407276:	e783      	b.n	407180 <_svfprintf_r+0x84>
  407278:	9808      	ldr	r0, [sp, #32]
  40727a:	4631      	mov	r1, r6
  40727c:	aa23      	add	r2, sp, #140	; 0x8c
  40727e:	f003 fb25 	bl	40a8cc <__ssprint_r>
  407282:	2800      	cmp	r0, #0
  407284:	f000 8185 	beq.w	407592 <_svfprintf_r+0x496>
  407288:	46b1      	mov	r9, r6
  40728a:	f8b9 300c 	ldrh.w	r3, [r9, #12]
  40728e:	f013 0f40 	tst.w	r3, #64	; 0x40
  407292:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  407294:	bf18      	it	ne
  407296:	f04f 33ff 	movne.w	r3, #4294967295
  40729a:	4618      	mov	r0, r3
  40729c:	b041      	add	sp, #260	; 0x104
  40729e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4072a2:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  4072a4:	e76f      	b.n	407186 <_svfprintf_r+0x8a>
  4072a6:	930a      	str	r3, [sp, #40]	; 0x28
  4072a8:	9b07      	ldr	r3, [sp, #28]
  4072aa:	0698      	lsls	r0, r3, #26
  4072ac:	f140 82ad 	bpl.w	40780a <_svfprintf_r+0x70e>
  4072b0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  4072b2:	f103 0907 	add.w	r9, r3, #7
  4072b6:	f029 0307 	bic.w	r3, r9, #7
  4072ba:	f103 0208 	add.w	r2, r3, #8
  4072be:	e9d3 8900 	ldrd	r8, r9, [r3]
  4072c2:	920e      	str	r2, [sp, #56]	; 0x38
  4072c4:	2301      	movs	r3, #1
  4072c6:	f04f 0c00 	mov.w	ip, #0
  4072ca:	f88d c06f 	strb.w	ip, [sp, #111]	; 0x6f
  4072ce:	f8cd a044 	str.w	sl, [sp, #68]	; 0x44
  4072d2:	f1ba 0f00 	cmp.w	sl, #0
  4072d6:	db03      	blt.n	4072e0 <_svfprintf_r+0x1e4>
  4072d8:	9a07      	ldr	r2, [sp, #28]
  4072da:	f022 0280 	bic.w	r2, r2, #128	; 0x80
  4072de:	9207      	str	r2, [sp, #28]
  4072e0:	ea58 0209 	orrs.w	r2, r8, r9
  4072e4:	f040 834c 	bne.w	407980 <_svfprintf_r+0x884>
  4072e8:	f1ba 0f00 	cmp.w	sl, #0
  4072ec:	f000 8451 	beq.w	407b92 <_svfprintf_r+0xa96>
  4072f0:	2b01      	cmp	r3, #1
  4072f2:	f000 834f 	beq.w	407994 <_svfprintf_r+0x898>
  4072f6:	2b02      	cmp	r3, #2
  4072f8:	f000 8490 	beq.w	407c1c <_svfprintf_r+0xb20>
  4072fc:	4639      	mov	r1, r7
  4072fe:	ea4f 02d8 	mov.w	r2, r8, lsr #3
  407302:	ea42 7249 	orr.w	r2, r2, r9, lsl #29
  407306:	ea4f 00d9 	mov.w	r0, r9, lsr #3
  40730a:	f008 0307 	and.w	r3, r8, #7
  40730e:	4681      	mov	r9, r0
  407310:	4690      	mov	r8, r2
  407312:	3330      	adds	r3, #48	; 0x30
  407314:	ea58 0209 	orrs.w	r2, r8, r9
  407318:	f801 3d01 	strb.w	r3, [r1, #-1]!
  40731c:	d1ef      	bne.n	4072fe <_svfprintf_r+0x202>
  40731e:	9a07      	ldr	r2, [sp, #28]
  407320:	9110      	str	r1, [sp, #64]	; 0x40
  407322:	07d2      	lsls	r2, r2, #31
  407324:	f100 8544 	bmi.w	407db0 <_svfprintf_r+0xcb4>
  407328:	1a7b      	subs	r3, r7, r1
  40732a:	930d      	str	r3, [sp, #52]	; 0x34
  40732c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  40732e:	4592      	cmp	sl, r2
  407330:	4653      	mov	r3, sl
  407332:	bfb8      	it	lt
  407334:	4613      	movlt	r3, r2
  407336:	9309      	str	r3, [sp, #36]	; 0x24
  407338:	2300      	movs	r3, #0
  40733a:	9312      	str	r3, [sp, #72]	; 0x48
  40733c:	f1bc 0f00 	cmp.w	ip, #0
  407340:	d002      	beq.n	407348 <_svfprintf_r+0x24c>
  407342:	9b09      	ldr	r3, [sp, #36]	; 0x24
  407344:	3301      	adds	r3, #1
  407346:	9309      	str	r3, [sp, #36]	; 0x24
  407348:	9b07      	ldr	r3, [sp, #28]
  40734a:	f013 0302 	ands.w	r3, r3, #2
  40734e:	930f      	str	r3, [sp, #60]	; 0x3c
  407350:	d002      	beq.n	407358 <_svfprintf_r+0x25c>
  407352:	9b09      	ldr	r3, [sp, #36]	; 0x24
  407354:	3302      	adds	r3, #2
  407356:	9309      	str	r3, [sp, #36]	; 0x24
  407358:	9b07      	ldr	r3, [sp, #28]
  40735a:	f013 0984 	ands.w	r9, r3, #132	; 0x84
  40735e:	f040 830c 	bne.w	40797a <_svfprintf_r+0x87e>
  407362:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  407364:	9a09      	ldr	r2, [sp, #36]	; 0x24
  407366:	ebc2 0803 	rsb	r8, r2, r3
  40736a:	f1b8 0f00 	cmp.w	r8, #0
  40736e:	f340 8304 	ble.w	40797a <_svfprintf_r+0x87e>
  407372:	f1b8 0f10 	cmp.w	r8, #16
  407376:	9925      	ldr	r1, [sp, #148]	; 0x94
  407378:	9a24      	ldr	r2, [sp, #144]	; 0x90
  40737a:	f8df a544 	ldr.w	sl, [pc, #1348]	; 4078c0 <_svfprintf_r+0x7c4>
  40737e:	dd29      	ble.n	4073d4 <_svfprintf_r+0x2d8>
  407380:	4653      	mov	r3, sl
  407382:	f04f 0b10 	mov.w	fp, #16
  407386:	46c2      	mov	sl, r8
  407388:	46a8      	mov	r8, r5
  40738a:	461d      	mov	r5, r3
  40738c:	e006      	b.n	40739c <_svfprintf_r+0x2a0>
  40738e:	f1aa 0a10 	sub.w	sl, sl, #16
  407392:	f1ba 0f10 	cmp.w	sl, #16
  407396:	f104 0408 	add.w	r4, r4, #8
  40739a:	dd17      	ble.n	4073cc <_svfprintf_r+0x2d0>
  40739c:	3201      	adds	r2, #1
  40739e:	3110      	adds	r1, #16
  4073a0:	2a07      	cmp	r2, #7
  4073a2:	9125      	str	r1, [sp, #148]	; 0x94
  4073a4:	9224      	str	r2, [sp, #144]	; 0x90
  4073a6:	e884 0820 	stmia.w	r4, {r5, fp}
  4073aa:	ddf0      	ble.n	40738e <_svfprintf_r+0x292>
  4073ac:	9808      	ldr	r0, [sp, #32]
  4073ae:	4631      	mov	r1, r6
  4073b0:	aa23      	add	r2, sp, #140	; 0x8c
  4073b2:	f003 fa8b 	bl	40a8cc <__ssprint_r>
  4073b6:	2800      	cmp	r0, #0
  4073b8:	f47f af66 	bne.w	407288 <_svfprintf_r+0x18c>
  4073bc:	f1aa 0a10 	sub.w	sl, sl, #16
  4073c0:	f1ba 0f10 	cmp.w	sl, #16
  4073c4:	9925      	ldr	r1, [sp, #148]	; 0x94
  4073c6:	9a24      	ldr	r2, [sp, #144]	; 0x90
  4073c8:	463c      	mov	r4, r7
  4073ca:	dce7      	bgt.n	40739c <_svfprintf_r+0x2a0>
  4073cc:	462b      	mov	r3, r5
  4073ce:	4645      	mov	r5, r8
  4073d0:	46d0      	mov	r8, sl
  4073d2:	469a      	mov	sl, r3
  4073d4:	3201      	adds	r2, #1
  4073d6:	eb08 0b01 	add.w	fp, r8, r1
  4073da:	2a07      	cmp	r2, #7
  4073dc:	f8cd b094 	str.w	fp, [sp, #148]	; 0x94
  4073e0:	9224      	str	r2, [sp, #144]	; 0x90
  4073e2:	f8c4 a000 	str.w	sl, [r4]
  4073e6:	f8c4 8004 	str.w	r8, [r4, #4]
  4073ea:	f300 847b 	bgt.w	407ce4 <_svfprintf_r+0xbe8>
  4073ee:	f89d c06f 	ldrb.w	ip, [sp, #111]	; 0x6f
  4073f2:	3408      	adds	r4, #8
  4073f4:	f1bc 0f00 	cmp.w	ip, #0
  4073f8:	d00f      	beq.n	40741a <_svfprintf_r+0x31e>
  4073fa:	9b24      	ldr	r3, [sp, #144]	; 0x90
  4073fc:	3301      	adds	r3, #1
  4073fe:	f10b 0b01 	add.w	fp, fp, #1
  407402:	f10d 016f 	add.w	r1, sp, #111	; 0x6f
  407406:	2201      	movs	r2, #1
  407408:	2b07      	cmp	r3, #7
  40740a:	f8cd b094 	str.w	fp, [sp, #148]	; 0x94
  40740e:	9324      	str	r3, [sp, #144]	; 0x90
  407410:	e884 0006 	stmia.w	r4, {r1, r2}
  407414:	f300 83da 	bgt.w	407bcc <_svfprintf_r+0xad0>
  407418:	3408      	adds	r4, #8
  40741a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  40741c:	b173      	cbz	r3, 40743c <_svfprintf_r+0x340>
  40741e:	9b24      	ldr	r3, [sp, #144]	; 0x90
  407420:	3301      	adds	r3, #1
  407422:	f10b 0b02 	add.w	fp, fp, #2
  407426:	a91c      	add	r1, sp, #112	; 0x70
  407428:	2202      	movs	r2, #2
  40742a:	2b07      	cmp	r3, #7
  40742c:	f8cd b094 	str.w	fp, [sp, #148]	; 0x94
  407430:	9324      	str	r3, [sp, #144]	; 0x90
  407432:	e884 0006 	stmia.w	r4, {r1, r2}
  407436:	f300 83d5 	bgt.w	407be4 <_svfprintf_r+0xae8>
  40743a:	3408      	adds	r4, #8
  40743c:	f1b9 0f80 	cmp.w	r9, #128	; 0x80
  407440:	f000 8311 	beq.w	407a66 <_svfprintf_r+0x96a>
  407444:	9b11      	ldr	r3, [sp, #68]	; 0x44
  407446:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  407448:	ebc2 0a03 	rsb	sl, r2, r3
  40744c:	f1ba 0f00 	cmp.w	sl, #0
  407450:	dd3c      	ble.n	4074cc <_svfprintf_r+0x3d0>
  407452:	f1ba 0f10 	cmp.w	sl, #16
  407456:	9a24      	ldr	r2, [sp, #144]	; 0x90
  407458:	f8df 9468 	ldr.w	r9, [pc, #1128]	; 4078c4 <_svfprintf_r+0x7c8>
  40745c:	dd2b      	ble.n	4074b6 <_svfprintf_r+0x3ba>
  40745e:	4649      	mov	r1, r9
  407460:	465b      	mov	r3, fp
  407462:	46a9      	mov	r9, r5
  407464:	f04f 0810 	mov.w	r8, #16
  407468:	f8dd b020 	ldr.w	fp, [sp, #32]
  40746c:	460d      	mov	r5, r1
  40746e:	e006      	b.n	40747e <_svfprintf_r+0x382>
  407470:	f1aa 0a10 	sub.w	sl, sl, #16
  407474:	f1ba 0f10 	cmp.w	sl, #16
  407478:	f104 0408 	add.w	r4, r4, #8
  40747c:	dd17      	ble.n	4074ae <_svfprintf_r+0x3b2>
  40747e:	3201      	adds	r2, #1
  407480:	3310      	adds	r3, #16
  407482:	2a07      	cmp	r2, #7
  407484:	9325      	str	r3, [sp, #148]	; 0x94
  407486:	9224      	str	r2, [sp, #144]	; 0x90
  407488:	e884 0120 	stmia.w	r4, {r5, r8}
  40748c:	ddf0      	ble.n	407470 <_svfprintf_r+0x374>
  40748e:	4658      	mov	r0, fp
  407490:	4631      	mov	r1, r6
  407492:	aa23      	add	r2, sp, #140	; 0x8c
  407494:	f003 fa1a 	bl	40a8cc <__ssprint_r>
  407498:	2800      	cmp	r0, #0
  40749a:	f47f aef5 	bne.w	407288 <_svfprintf_r+0x18c>
  40749e:	f1aa 0a10 	sub.w	sl, sl, #16
  4074a2:	f1ba 0f10 	cmp.w	sl, #16
  4074a6:	9b25      	ldr	r3, [sp, #148]	; 0x94
  4074a8:	9a24      	ldr	r2, [sp, #144]	; 0x90
  4074aa:	463c      	mov	r4, r7
  4074ac:	dce7      	bgt.n	40747e <_svfprintf_r+0x382>
  4074ae:	469b      	mov	fp, r3
  4074b0:	462b      	mov	r3, r5
  4074b2:	464d      	mov	r5, r9
  4074b4:	4699      	mov	r9, r3
  4074b6:	3201      	adds	r2, #1
  4074b8:	44d3      	add	fp, sl
  4074ba:	2a07      	cmp	r2, #7
  4074bc:	f8cd b094 	str.w	fp, [sp, #148]	; 0x94
  4074c0:	9224      	str	r2, [sp, #144]	; 0x90
  4074c2:	e884 0600 	stmia.w	r4, {r9, sl}
  4074c6:	f300 8375 	bgt.w	407bb4 <_svfprintf_r+0xab8>
  4074ca:	3408      	adds	r4, #8
  4074cc:	9b07      	ldr	r3, [sp, #28]
  4074ce:	05d9      	lsls	r1, r3, #23
  4074d0:	f100 826c 	bmi.w	4079ac <_svfprintf_r+0x8b0>
  4074d4:	9b24      	ldr	r3, [sp, #144]	; 0x90
  4074d6:	990d      	ldr	r1, [sp, #52]	; 0x34
  4074d8:	9a10      	ldr	r2, [sp, #64]	; 0x40
  4074da:	6022      	str	r2, [r4, #0]
  4074dc:	3301      	adds	r3, #1
  4074de:	448b      	add	fp, r1
  4074e0:	2b07      	cmp	r3, #7
  4074e2:	f8cd b094 	str.w	fp, [sp, #148]	; 0x94
  4074e6:	6061      	str	r1, [r4, #4]
  4074e8:	9324      	str	r3, [sp, #144]	; 0x90
  4074ea:	f300 8346 	bgt.w	407b7a <_svfprintf_r+0xa7e>
  4074ee:	3408      	adds	r4, #8
  4074f0:	9b07      	ldr	r3, [sp, #28]
  4074f2:	075a      	lsls	r2, r3, #29
  4074f4:	d541      	bpl.n	40757a <_svfprintf_r+0x47e>
  4074f6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  4074f8:	9a09      	ldr	r2, [sp, #36]	; 0x24
  4074fa:	1a9d      	subs	r5, r3, r2
  4074fc:	2d00      	cmp	r5, #0
  4074fe:	dd3c      	ble.n	40757a <_svfprintf_r+0x47e>
  407500:	2d10      	cmp	r5, #16
  407502:	9b24      	ldr	r3, [sp, #144]	; 0x90
  407504:	f8df a3b8 	ldr.w	sl, [pc, #952]	; 4078c0 <_svfprintf_r+0x7c4>
  407508:	dd23      	ble.n	407552 <_svfprintf_r+0x456>
  40750a:	f04f 0810 	mov.w	r8, #16
  40750e:	465a      	mov	r2, fp
  407510:	f8dd 9020 	ldr.w	r9, [sp, #32]
  407514:	e004      	b.n	407520 <_svfprintf_r+0x424>
  407516:	3d10      	subs	r5, #16
  407518:	2d10      	cmp	r5, #16
  40751a:	f104 0408 	add.w	r4, r4, #8
  40751e:	dd17      	ble.n	407550 <_svfprintf_r+0x454>
  407520:	3301      	adds	r3, #1
  407522:	3210      	adds	r2, #16
  407524:	2b07      	cmp	r3, #7
  407526:	9225      	str	r2, [sp, #148]	; 0x94
  407528:	9324      	str	r3, [sp, #144]	; 0x90
  40752a:	f8c4 a000 	str.w	sl, [r4]
  40752e:	f8c4 8004 	str.w	r8, [r4, #4]
  407532:	ddf0      	ble.n	407516 <_svfprintf_r+0x41a>
  407534:	4648      	mov	r0, r9
  407536:	4631      	mov	r1, r6
  407538:	aa23      	add	r2, sp, #140	; 0x8c
  40753a:	f003 f9c7 	bl	40a8cc <__ssprint_r>
  40753e:	2800      	cmp	r0, #0
  407540:	f47f aea2 	bne.w	407288 <_svfprintf_r+0x18c>
  407544:	3d10      	subs	r5, #16
  407546:	2d10      	cmp	r5, #16
  407548:	9a25      	ldr	r2, [sp, #148]	; 0x94
  40754a:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40754c:	463c      	mov	r4, r7
  40754e:	dce7      	bgt.n	407520 <_svfprintf_r+0x424>
  407550:	4693      	mov	fp, r2
  407552:	3301      	adds	r3, #1
  407554:	44ab      	add	fp, r5
  407556:	2b07      	cmp	r3, #7
  407558:	f8cd b094 	str.w	fp, [sp, #148]	; 0x94
  40755c:	9324      	str	r3, [sp, #144]	; 0x90
  40755e:	f8c4 a000 	str.w	sl, [r4]
  407562:	6065      	str	r5, [r4, #4]
  407564:	dd09      	ble.n	40757a <_svfprintf_r+0x47e>
  407566:	9808      	ldr	r0, [sp, #32]
  407568:	4631      	mov	r1, r6
  40756a:	aa23      	add	r2, sp, #140	; 0x8c
  40756c:	f003 f9ae 	bl	40a8cc <__ssprint_r>
  407570:	2800      	cmp	r0, #0
  407572:	f47f ae89 	bne.w	407288 <_svfprintf_r+0x18c>
  407576:	f8dd b094 	ldr.w	fp, [sp, #148]	; 0x94
  40757a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  40757c:	9a09      	ldr	r2, [sp, #36]	; 0x24
  40757e:	990c      	ldr	r1, [sp, #48]	; 0x30
  407580:	428a      	cmp	r2, r1
  407582:	bfac      	ite	ge
  407584:	189b      	addge	r3, r3, r2
  407586:	185b      	addlt	r3, r3, r1
  407588:	930b      	str	r3, [sp, #44]	; 0x2c
  40758a:	f1bb 0f00 	cmp.w	fp, #0
  40758e:	f47f ae73 	bne.w	407278 <_svfprintf_r+0x17c>
  407592:	2300      	movs	r3, #0
  407594:	9324      	str	r3, [sp, #144]	; 0x90
  407596:	463c      	mov	r4, r7
  407598:	e5d5      	b.n	407146 <_svfprintf_r+0x4a>
  40759a:	4619      	mov	r1, r3
  40759c:	9807      	ldr	r0, [sp, #28]
  40759e:	781d      	ldrb	r5, [r3, #0]
  4075a0:	f040 0004 	orr.w	r0, r0, #4
  4075a4:	9007      	str	r0, [sp, #28]
  4075a6:	e5fc      	b.n	4071a2 <_svfprintf_r+0xa6>
  4075a8:	930a      	str	r3, [sp, #40]	; 0x28
  4075aa:	9b07      	ldr	r3, [sp, #28]
  4075ac:	f013 0320 	ands.w	r3, r3, #32
  4075b0:	f000 810e 	beq.w	4077d0 <_svfprintf_r+0x6d4>
  4075b4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  4075b6:	f103 0907 	add.w	r9, r3, #7
  4075ba:	f029 0307 	bic.w	r3, r9, #7
  4075be:	f103 0208 	add.w	r2, r3, #8
  4075c2:	e9d3 8900 	ldrd	r8, r9, [r3]
  4075c6:	920e      	str	r2, [sp, #56]	; 0x38
  4075c8:	2300      	movs	r3, #0
  4075ca:	e67c      	b.n	4072c6 <_svfprintf_r+0x1ca>
  4075cc:	781d      	ldrb	r5, [r3, #0]
  4075ce:	4619      	mov	r1, r3
  4075d0:	222b      	movs	r2, #43	; 0x2b
  4075d2:	e5e6      	b.n	4071a2 <_svfprintf_r+0xa6>
  4075d4:	781d      	ldrb	r5, [r3, #0]
  4075d6:	2d2a      	cmp	r5, #42	; 0x2a
  4075d8:	f103 0101 	add.w	r1, r3, #1
  4075dc:	f000 87ad 	beq.w	40853a <_svfprintf_r+0x143e>
  4075e0:	f1a5 0030 	sub.w	r0, r5, #48	; 0x30
  4075e4:	2809      	cmp	r0, #9
  4075e6:	460b      	mov	r3, r1
  4075e8:	f04f 0a00 	mov.w	sl, #0
  4075ec:	f63f adda 	bhi.w	4071a4 <_svfprintf_r+0xa8>
  4075f0:	f813 5b01 	ldrb.w	r5, [r3], #1
  4075f4:	eb0a 0a8a 	add.w	sl, sl, sl, lsl #2
  4075f8:	eb00 0a4a 	add.w	sl, r0, sl, lsl #1
  4075fc:	f1a5 0030 	sub.w	r0, r5, #48	; 0x30
  407600:	2809      	cmp	r0, #9
  407602:	d9f5      	bls.n	4075f0 <_svfprintf_r+0x4f4>
  407604:	ea4a 7aea 	orr.w	sl, sl, sl, asr #31
  407608:	e5cc      	b.n	4071a4 <_svfprintf_r+0xa8>
  40760a:	930a      	str	r3, [sp, #40]	; 0x28
  40760c:	9b07      	ldr	r3, [sp, #28]
  40760e:	f88d 206f 	strb.w	r2, [sp, #111]	; 0x6f
  407612:	069b      	lsls	r3, r3, #26
  407614:	f140 80a1 	bpl.w	40775a <_svfprintf_r+0x65e>
  407618:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  40761a:	f103 0907 	add.w	r9, r3, #7
  40761e:	f029 0907 	bic.w	r9, r9, #7
  407622:	e9d9 2300 	ldrd	r2, r3, [r9]
  407626:	f109 0108 	add.w	r1, r9, #8
  40762a:	910e      	str	r1, [sp, #56]	; 0x38
  40762c:	4690      	mov	r8, r2
  40762e:	4699      	mov	r9, r3
  407630:	2a00      	cmp	r2, #0
  407632:	f173 0300 	sbcs.w	r3, r3, #0
  407636:	f2c0 840b 	blt.w	407e50 <_svfprintf_r+0xd54>
  40763a:	f89d c06f 	ldrb.w	ip, [sp, #111]	; 0x6f
  40763e:	f8cd a044 	str.w	sl, [sp, #68]	; 0x44
  407642:	2301      	movs	r3, #1
  407644:	e645      	b.n	4072d2 <_svfprintf_r+0x1d6>
  407646:	930a      	str	r3, [sp, #40]	; 0x28
  407648:	4b9b      	ldr	r3, [pc, #620]	; (4078b8 <_svfprintf_r+0x7bc>)
  40764a:	9316      	str	r3, [sp, #88]	; 0x58
  40764c:	9b07      	ldr	r3, [sp, #28]
  40764e:	f88d 206f 	strb.w	r2, [sp, #111]	; 0x6f
  407652:	069b      	lsls	r3, r3, #26
  407654:	f140 80f3 	bpl.w	40783e <_svfprintf_r+0x742>
  407658:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  40765a:	f103 0907 	add.w	r9, r3, #7
  40765e:	f029 0307 	bic.w	r3, r9, #7
  407662:	e9d3 8900 	ldrd	r8, r9, [r3]
  407666:	f103 0208 	add.w	r2, r3, #8
  40766a:	920e      	str	r2, [sp, #56]	; 0x38
  40766c:	9b07      	ldr	r3, [sp, #28]
  40766e:	07d9      	lsls	r1, r3, #31
  407670:	f140 80f5 	bpl.w	40785e <_svfprintf_r+0x762>
  407674:	ea58 0309 	orrs.w	r3, r8, r9
  407678:	f000 80f1 	beq.w	40785e <_svfprintf_r+0x762>
  40767c:	9a07      	ldr	r2, [sp, #28]
  40767e:	f88d 5071 	strb.w	r5, [sp, #113]	; 0x71
  407682:	2330      	movs	r3, #48	; 0x30
  407684:	f042 0202 	orr.w	r2, r2, #2
  407688:	f88d 3070 	strb.w	r3, [sp, #112]	; 0x70
  40768c:	9207      	str	r2, [sp, #28]
  40768e:	2302      	movs	r3, #2
  407690:	e619      	b.n	4072c6 <_svfprintf_r+0x1ca>
  407692:	781d      	ldrb	r5, [r3, #0]
  407694:	4619      	mov	r1, r3
  407696:	2a00      	cmp	r2, #0
  407698:	f47f ad83 	bne.w	4071a2 <_svfprintf_r+0xa6>
  40769c:	2220      	movs	r2, #32
  40769e:	e580      	b.n	4071a2 <_svfprintf_r+0xa6>
  4076a0:	9907      	ldr	r1, [sp, #28]
  4076a2:	f041 0120 	orr.w	r1, r1, #32
  4076a6:	9107      	str	r1, [sp, #28]
  4076a8:	781d      	ldrb	r5, [r3, #0]
  4076aa:	4619      	mov	r1, r3
  4076ac:	e579      	b.n	4071a2 <_svfprintf_r+0xa6>
  4076ae:	930a      	str	r3, [sp, #40]	; 0x28
  4076b0:	9b07      	ldr	r3, [sp, #28]
  4076b2:	f88d 206f 	strb.w	r2, [sp, #111]	; 0x6f
  4076b6:	069a      	lsls	r2, r3, #26
  4076b8:	f140 84a1 	bpl.w	407ffe <_svfprintf_r+0xf02>
  4076bc:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4076be:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  4076c0:	ea4f 79e1 	mov.w	r9, r1, asr #31
  4076c4:	6813      	ldr	r3, [r2, #0]
  4076c6:	4608      	mov	r0, r1
  4076c8:	4688      	mov	r8, r1
  4076ca:	3204      	adds	r2, #4
  4076cc:	4649      	mov	r1, r9
  4076ce:	920e      	str	r2, [sp, #56]	; 0x38
  4076d0:	e9c3 0100 	strd	r0, r1, [r3]
  4076d4:	e537      	b.n	407146 <_svfprintf_r+0x4a>
  4076d6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  4076d8:	930a      	str	r3, [sp, #40]	; 0x28
  4076da:	6813      	ldr	r3, [r2, #0]
  4076dc:	9310      	str	r3, [sp, #64]	; 0x40
  4076de:	f04f 0b00 	mov.w	fp, #0
  4076e2:	f88d b06f 	strb.w	fp, [sp, #111]	; 0x6f
  4076e6:	f102 0904 	add.w	r9, r2, #4
  4076ea:	2b00      	cmp	r3, #0
  4076ec:	f000 863b 	beq.w	408366 <_svfprintf_r+0x126a>
  4076f0:	f1ba 0f00 	cmp.w	sl, #0
  4076f4:	9810      	ldr	r0, [sp, #64]	; 0x40
  4076f6:	f2c0 85e9 	blt.w	4082cc <_svfprintf_r+0x11d0>
  4076fa:	4659      	mov	r1, fp
  4076fc:	4652      	mov	r2, sl
  4076fe:	f002 fb0b 	bl	409d18 <memchr>
  407702:	2800      	cmp	r0, #0
  407704:	f000 866c 	beq.w	4083e0 <_svfprintf_r+0x12e4>
  407708:	9b10      	ldr	r3, [sp, #64]	; 0x40
  40770a:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
  40770e:	1ac3      	subs	r3, r0, r3
  407710:	930d      	str	r3, [sp, #52]	; 0x34
  407712:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
  407716:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  40771a:	9309      	str	r3, [sp, #36]	; 0x24
  40771c:	f8cd b048 	str.w	fp, [sp, #72]	; 0x48
  407720:	f89d c06f 	ldrb.w	ip, [sp, #111]	; 0x6f
  407724:	e60a      	b.n	40733c <_svfprintf_r+0x240>
  407726:	f1a5 0030 	sub.w	r0, r5, #48	; 0x30
  40772a:	2100      	movs	r1, #0
  40772c:	f813 5b01 	ldrb.w	r5, [r3], #1
  407730:	eb01 0181 	add.w	r1, r1, r1, lsl #2
  407734:	eb00 0141 	add.w	r1, r0, r1, lsl #1
  407738:	f1a5 0030 	sub.w	r0, r5, #48	; 0x30
  40773c:	2809      	cmp	r0, #9
  40773e:	d9f5      	bls.n	40772c <_svfprintf_r+0x630>
  407740:	910c      	str	r1, [sp, #48]	; 0x30
  407742:	e52f      	b.n	4071a4 <_svfprintf_r+0xa8>
  407744:	930a      	str	r3, [sp, #40]	; 0x28
  407746:	9b07      	ldr	r3, [sp, #28]
  407748:	f88d 206f 	strb.w	r2, [sp, #111]	; 0x6f
  40774c:	f043 0310 	orr.w	r3, r3, #16
  407750:	9307      	str	r3, [sp, #28]
  407752:	9b07      	ldr	r3, [sp, #28]
  407754:	069b      	lsls	r3, r3, #26
  407756:	f53f af5f 	bmi.w	407618 <_svfprintf_r+0x51c>
  40775a:	9b07      	ldr	r3, [sp, #28]
  40775c:	06d8      	lsls	r0, r3, #27
  40775e:	f100 8368 	bmi.w	407e32 <_svfprintf_r+0xd36>
  407762:	9b07      	ldr	r3, [sp, #28]
  407764:	0659      	lsls	r1, r3, #25
  407766:	f140 8364 	bpl.w	407e32 <_svfprintf_r+0xd36>
  40776a:	990e      	ldr	r1, [sp, #56]	; 0x38
  40776c:	f9b1 8000 	ldrsh.w	r8, [r1]
  407770:	3104      	adds	r1, #4
  407772:	ea4f 79e8 	mov.w	r9, r8, asr #31
  407776:	4642      	mov	r2, r8
  407778:	464b      	mov	r3, r9
  40777a:	910e      	str	r1, [sp, #56]	; 0x38
  40777c:	e758      	b.n	407630 <_svfprintf_r+0x534>
  40777e:	781d      	ldrb	r5, [r3, #0]
  407780:	9907      	ldr	r1, [sp, #28]
  407782:	2d6c      	cmp	r5, #108	; 0x6c
  407784:	f000 84cb 	beq.w	40811e <_svfprintf_r+0x1022>
  407788:	f041 0110 	orr.w	r1, r1, #16
  40778c:	9107      	str	r1, [sp, #28]
  40778e:	4619      	mov	r1, r3
  407790:	e507      	b.n	4071a2 <_svfprintf_r+0xa6>
  407792:	9d0e      	ldr	r5, [sp, #56]	; 0x38
  407794:	6829      	ldr	r1, [r5, #0]
  407796:	910c      	str	r1, [sp, #48]	; 0x30
  407798:	4608      	mov	r0, r1
  40779a:	2800      	cmp	r0, #0
  40779c:	4629      	mov	r1, r5
  40779e:	f101 0104 	add.w	r1, r1, #4
  4077a2:	f2c0 84b5 	blt.w	408110 <_svfprintf_r+0x1014>
  4077a6:	910e      	str	r1, [sp, #56]	; 0x38
  4077a8:	781d      	ldrb	r5, [r3, #0]
  4077aa:	4619      	mov	r1, r3
  4077ac:	e4f9      	b.n	4071a2 <_svfprintf_r+0xa6>
  4077ae:	9907      	ldr	r1, [sp, #28]
  4077b0:	f041 0140 	orr.w	r1, r1, #64	; 0x40
  4077b4:	9107      	str	r1, [sp, #28]
  4077b6:	781d      	ldrb	r5, [r3, #0]
  4077b8:	4619      	mov	r1, r3
  4077ba:	e4f2      	b.n	4071a2 <_svfprintf_r+0xa6>
  4077bc:	930a      	str	r3, [sp, #40]	; 0x28
  4077be:	9b07      	ldr	r3, [sp, #28]
  4077c0:	f043 0310 	orr.w	r3, r3, #16
  4077c4:	9307      	str	r3, [sp, #28]
  4077c6:	9b07      	ldr	r3, [sp, #28]
  4077c8:	f013 0320 	ands.w	r3, r3, #32
  4077cc:	f47f aef2 	bne.w	4075b4 <_svfprintf_r+0x4b8>
  4077d0:	9a07      	ldr	r2, [sp, #28]
  4077d2:	f012 0210 	ands.w	r2, r2, #16
  4077d6:	f040 8319 	bne.w	407e0c <_svfprintf_r+0xd10>
  4077da:	9b07      	ldr	r3, [sp, #28]
  4077dc:	f013 0340 	ands.w	r3, r3, #64	; 0x40
  4077e0:	f000 8314 	beq.w	407e0c <_svfprintf_r+0xd10>
  4077e4:	990e      	ldr	r1, [sp, #56]	; 0x38
  4077e6:	4613      	mov	r3, r2
  4077e8:	460a      	mov	r2, r1
  4077ea:	3204      	adds	r2, #4
  4077ec:	f8b1 8000 	ldrh.w	r8, [r1]
  4077f0:	920e      	str	r2, [sp, #56]	; 0x38
  4077f2:	f04f 0900 	mov.w	r9, #0
  4077f6:	e566      	b.n	4072c6 <_svfprintf_r+0x1ca>
  4077f8:	930a      	str	r3, [sp, #40]	; 0x28
  4077fa:	9b07      	ldr	r3, [sp, #28]
  4077fc:	f043 0310 	orr.w	r3, r3, #16
  407800:	9307      	str	r3, [sp, #28]
  407802:	9b07      	ldr	r3, [sp, #28]
  407804:	0698      	lsls	r0, r3, #26
  407806:	f53f ad53 	bmi.w	4072b0 <_svfprintf_r+0x1b4>
  40780a:	9b07      	ldr	r3, [sp, #28]
  40780c:	06d9      	lsls	r1, r3, #27
  40780e:	f100 8306 	bmi.w	407e1e <_svfprintf_r+0xd22>
  407812:	9b07      	ldr	r3, [sp, #28]
  407814:	065a      	lsls	r2, r3, #25
  407816:	f140 8302 	bpl.w	407e1e <_svfprintf_r+0xd22>
  40781a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  40781c:	f8b2 8000 	ldrh.w	r8, [r2]
  407820:	3204      	adds	r2, #4
  407822:	f04f 0900 	mov.w	r9, #0
  407826:	2301      	movs	r3, #1
  407828:	920e      	str	r2, [sp, #56]	; 0x38
  40782a:	e54c      	b.n	4072c6 <_svfprintf_r+0x1ca>
  40782c:	930a      	str	r3, [sp, #40]	; 0x28
  40782e:	4b23      	ldr	r3, [pc, #140]	; (4078bc <_svfprintf_r+0x7c0>)
  407830:	9316      	str	r3, [sp, #88]	; 0x58
  407832:	9b07      	ldr	r3, [sp, #28]
  407834:	f88d 206f 	strb.w	r2, [sp, #111]	; 0x6f
  407838:	069b      	lsls	r3, r3, #26
  40783a:	f53f af0d 	bmi.w	407658 <_svfprintf_r+0x55c>
  40783e:	9b07      	ldr	r3, [sp, #28]
  407840:	06d8      	lsls	r0, r3, #27
  407842:	f140 83cd 	bpl.w	407fe0 <_svfprintf_r+0xee4>
  407846:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  407848:	4613      	mov	r3, r2
  40784a:	681b      	ldr	r3, [r3, #0]
  40784c:	4698      	mov	r8, r3
  40784e:	9b07      	ldr	r3, [sp, #28]
  407850:	3204      	adds	r2, #4
  407852:	07d9      	lsls	r1, r3, #31
  407854:	920e      	str	r2, [sp, #56]	; 0x38
  407856:	f04f 0900 	mov.w	r9, #0
  40785a:	f53f af0b 	bmi.w	407674 <_svfprintf_r+0x578>
  40785e:	2302      	movs	r3, #2
  407860:	e531      	b.n	4072c6 <_svfprintf_r+0x1ca>
  407862:	990e      	ldr	r1, [sp, #56]	; 0x38
  407864:	930a      	str	r3, [sp, #40]	; 0x28
  407866:	680a      	ldr	r2, [r1, #0]
  407868:	f88d 2098 	strb.w	r2, [sp, #152]	; 0x98
  40786c:	2300      	movs	r3, #0
  40786e:	2201      	movs	r2, #1
  407870:	3104      	adds	r1, #4
  407872:	469c      	mov	ip, r3
  407874:	9209      	str	r2, [sp, #36]	; 0x24
  407876:	910e      	str	r1, [sp, #56]	; 0x38
  407878:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
  40787c:	ab26      	add	r3, sp, #152	; 0x98
  40787e:	f8cd c044 	str.w	ip, [sp, #68]	; 0x44
  407882:	f8cd c048 	str.w	ip, [sp, #72]	; 0x48
  407886:	920d      	str	r2, [sp, #52]	; 0x34
  407888:	9310      	str	r3, [sp, #64]	; 0x40
  40788a:	e55d      	b.n	407348 <_svfprintf_r+0x24c>
  40788c:	9907      	ldr	r1, [sp, #28]
  40788e:	f041 0108 	orr.w	r1, r1, #8
  407892:	9107      	str	r1, [sp, #28]
  407894:	781d      	ldrb	r5, [r3, #0]
  407896:	4619      	mov	r1, r3
  407898:	e483      	b.n	4071a2 <_svfprintf_r+0xa6>
  40789a:	9907      	ldr	r1, [sp, #28]
  40789c:	f041 0101 	orr.w	r1, r1, #1
  4078a0:	9107      	str	r1, [sp, #28]
  4078a2:	781d      	ldrb	r5, [r3, #0]
  4078a4:	4619      	mov	r1, r3
  4078a6:	e47c      	b.n	4071a2 <_svfprintf_r+0xa6>
  4078a8:	9907      	ldr	r1, [sp, #28]
  4078aa:	f041 0180 	orr.w	r1, r1, #128	; 0x80
  4078ae:	9107      	str	r1, [sp, #28]
  4078b0:	781d      	ldrb	r5, [r3, #0]
  4078b2:	4619      	mov	r1, r3
  4078b4:	e475      	b.n	4071a2 <_svfprintf_r+0xa6>
  4078b6:	bf00      	nop
  4078b8:	0040c0c8 	.word	0x0040c0c8
  4078bc:	0040c0b4 	.word	0x0040c0b4
  4078c0:	0040c094 	.word	0x0040c094
  4078c4:	0040c084 	.word	0x0040c084
  4078c8:	930a      	str	r3, [sp, #40]	; 0x28
  4078ca:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  4078cc:	f88d 206f 	strb.w	r2, [sp, #111]	; 0x6f
  4078d0:	f103 0907 	add.w	r9, r3, #7
  4078d4:	f029 0307 	bic.w	r3, r9, #7
  4078d8:	f103 0208 	add.w	r2, r3, #8
  4078dc:	920e      	str	r2, [sp, #56]	; 0x38
  4078de:	681a      	ldr	r2, [r3, #0]
  4078e0:	9214      	str	r2, [sp, #80]	; 0x50
  4078e2:	685b      	ldr	r3, [r3, #4]
  4078e4:	9315      	str	r3, [sp, #84]	; 0x54
  4078e6:	9915      	ldr	r1, [sp, #84]	; 0x54
  4078e8:	9814      	ldr	r0, [sp, #80]	; 0x50
  4078ea:	f002 ffb1 	bl	40a850 <__fpclassifyd>
  4078ee:	2801      	cmp	r0, #1
  4078f0:	46d3      	mov	fp, sl
  4078f2:	9814      	ldr	r0, [sp, #80]	; 0x50
  4078f4:	9915      	ldr	r1, [sp, #84]	; 0x54
  4078f6:	f040 8359 	bne.w	407fac <_svfprintf_r+0xeb0>
  4078fa:	2200      	movs	r2, #0
  4078fc:	2300      	movs	r3, #0
  4078fe:	f003 fd13 	bl	40b328 <__aeabi_dcmplt>
  407902:	2800      	cmp	r0, #0
  407904:	f040 8564 	bne.w	4083d0 <_svfprintf_r+0x12d4>
  407908:	f89d c06f 	ldrb.w	ip, [sp, #111]	; 0x6f
  40790c:	9b07      	ldr	r3, [sp, #28]
  40790e:	4abe      	ldr	r2, [pc, #760]	; (407c08 <_svfprintf_r+0xb0c>)
  407910:	f8df e300 	ldr.w	lr, [pc, #768]	; 407c14 <_svfprintf_r+0xb18>
  407914:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  407918:	9307      	str	r3, [sp, #28]
  40791a:	4613      	mov	r3, r2
  40791c:	2103      	movs	r1, #3
  40791e:	2000      	movs	r0, #0
  407920:	2d47      	cmp	r5, #71	; 0x47
  407922:	bfd8      	it	le
  407924:	4673      	movle	r3, lr
  407926:	9109      	str	r1, [sp, #36]	; 0x24
  407928:	9011      	str	r0, [sp, #68]	; 0x44
  40792a:	9310      	str	r3, [sp, #64]	; 0x40
  40792c:	910d      	str	r1, [sp, #52]	; 0x34
  40792e:	9012      	str	r0, [sp, #72]	; 0x48
  407930:	e504      	b.n	40733c <_svfprintf_r+0x240>
  407932:	980e      	ldr	r0, [sp, #56]	; 0x38
  407934:	9907      	ldr	r1, [sp, #28]
  407936:	930a      	str	r3, [sp, #40]	; 0x28
  407938:	2230      	movs	r2, #48	; 0x30
  40793a:	6803      	ldr	r3, [r0, #0]
  40793c:	f88d 2070 	strb.w	r2, [sp, #112]	; 0x70
  407940:	4602      	mov	r2, r0
  407942:	2578      	movs	r5, #120	; 0x78
  407944:	f041 0102 	orr.w	r1, r1, #2
  407948:	3204      	adds	r2, #4
  40794a:	4698      	mov	r8, r3
  40794c:	4baf      	ldr	r3, [pc, #700]	; (407c0c <_svfprintf_r+0xb10>)
  40794e:	9316      	str	r3, [sp, #88]	; 0x58
  407950:	9107      	str	r1, [sp, #28]
  407952:	920e      	str	r2, [sp, #56]	; 0x38
  407954:	f04f 0900 	mov.w	r9, #0
  407958:	f88d 5071 	strb.w	r5, [sp, #113]	; 0x71
  40795c:	2302      	movs	r3, #2
  40795e:	e4b2      	b.n	4072c6 <_svfprintf_r+0x1ca>
  407960:	930a      	str	r3, [sp, #40]	; 0x28
  407962:	f88d 206f 	strb.w	r2, [sp, #111]	; 0x6f
  407966:	2d00      	cmp	r5, #0
  407968:	f000 83c6 	beq.w	4080f8 <_svfprintf_r+0xffc>
  40796c:	2300      	movs	r3, #0
  40796e:	2201      	movs	r2, #1
  407970:	469c      	mov	ip, r3
  407972:	9209      	str	r2, [sp, #36]	; 0x24
  407974:	f88d 5098 	strb.w	r5, [sp, #152]	; 0x98
  407978:	e77e      	b.n	407878 <_svfprintf_r+0x77c>
  40797a:	f8dd b094 	ldr.w	fp, [sp, #148]	; 0x94
  40797e:	e539      	b.n	4073f4 <_svfprintf_r+0x2f8>
  407980:	2b01      	cmp	r3, #1
  407982:	f47f acb8 	bne.w	4072f6 <_svfprintf_r+0x1fa>
  407986:	f1b9 0f00 	cmp.w	r9, #0
  40798a:	bf08      	it	eq
  40798c:	f1b8 0f0a 	cmpeq.w	r8, #10
  407990:	f080 821c 	bcs.w	407dcc <_svfprintf_r+0xcd0>
  407994:	f50d 7b80 	add.w	fp, sp, #256	; 0x100
  407998:	f108 0830 	add.w	r8, r8, #48	; 0x30
  40799c:	f80b 8d41 	strb.w	r8, [fp, #-65]!
  4079a0:	ebcb 0307 	rsb	r3, fp, r7
  4079a4:	930d      	str	r3, [sp, #52]	; 0x34
  4079a6:	f8cd b040 	str.w	fp, [sp, #64]	; 0x40
  4079aa:	e4bf      	b.n	40732c <_svfprintf_r+0x230>
  4079ac:	2d65      	cmp	r5, #101	; 0x65
  4079ae:	f340 80a0 	ble.w	407af2 <_svfprintf_r+0x9f6>
  4079b2:	9814      	ldr	r0, [sp, #80]	; 0x50
  4079b4:	9915      	ldr	r1, [sp, #84]	; 0x54
  4079b6:	2200      	movs	r2, #0
  4079b8:	2300      	movs	r3, #0
  4079ba:	f003 fcab 	bl	40b314 <__aeabi_dcmpeq>
  4079be:	2800      	cmp	r0, #0
  4079c0:	f000 8145 	beq.w	407c4e <_svfprintf_r+0xb52>
  4079c4:	9b24      	ldr	r3, [sp, #144]	; 0x90
  4079c6:	4a92      	ldr	r2, [pc, #584]	; (407c10 <_svfprintf_r+0xb14>)
  4079c8:	6022      	str	r2, [r4, #0]
  4079ca:	3301      	adds	r3, #1
  4079cc:	f10b 0b01 	add.w	fp, fp, #1
  4079d0:	2201      	movs	r2, #1
  4079d2:	2b07      	cmp	r3, #7
  4079d4:	f8cd b094 	str.w	fp, [sp, #148]	; 0x94
  4079d8:	9324      	str	r3, [sp, #144]	; 0x90
  4079da:	6062      	str	r2, [r4, #4]
  4079dc:	f300 8334 	bgt.w	408048 <_svfprintf_r+0xf4c>
  4079e0:	3408      	adds	r4, #8
  4079e2:	9b1d      	ldr	r3, [sp, #116]	; 0x74
  4079e4:	9a13      	ldr	r2, [sp, #76]	; 0x4c
  4079e6:	4293      	cmp	r3, r2
  4079e8:	db03      	blt.n	4079f2 <_svfprintf_r+0x8f6>
  4079ea:	9b07      	ldr	r3, [sp, #28]
  4079ec:	07da      	lsls	r2, r3, #31
  4079ee:	f57f ad7f 	bpl.w	4074f0 <_svfprintf_r+0x3f4>
  4079f2:	9b24      	ldr	r3, [sp, #144]	; 0x90
  4079f4:	9918      	ldr	r1, [sp, #96]	; 0x60
  4079f6:	9a17      	ldr	r2, [sp, #92]	; 0x5c
  4079f8:	6022      	str	r2, [r4, #0]
  4079fa:	3301      	adds	r3, #1
  4079fc:	448b      	add	fp, r1
  4079fe:	2b07      	cmp	r3, #7
  407a00:	f8cd b094 	str.w	fp, [sp, #148]	; 0x94
  407a04:	6061      	str	r1, [r4, #4]
  407a06:	9324      	str	r3, [sp, #144]	; 0x90
  407a08:	f300 8390 	bgt.w	40812c <_svfprintf_r+0x1030>
  407a0c:	3408      	adds	r4, #8
  407a0e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  407a10:	1e5d      	subs	r5, r3, #1
  407a12:	2d00      	cmp	r5, #0
  407a14:	f77f ad6c 	ble.w	4074f0 <_svfprintf_r+0x3f4>
  407a18:	2d10      	cmp	r5, #16
  407a1a:	9b24      	ldr	r3, [sp, #144]	; 0x90
  407a1c:	f8df 91f8 	ldr.w	r9, [pc, #504]	; 407c18 <_svfprintf_r+0xb1c>
  407a20:	f340 81ba 	ble.w	407d98 <_svfprintf_r+0xc9c>
  407a24:	f04f 0810 	mov.w	r8, #16
  407a28:	465a      	mov	r2, fp
  407a2a:	f8dd a020 	ldr.w	sl, [sp, #32]
  407a2e:	e004      	b.n	407a3a <_svfprintf_r+0x93e>
  407a30:	3408      	adds	r4, #8
  407a32:	3d10      	subs	r5, #16
  407a34:	2d10      	cmp	r5, #16
  407a36:	f340 81ae 	ble.w	407d96 <_svfprintf_r+0xc9a>
  407a3a:	3301      	adds	r3, #1
  407a3c:	3210      	adds	r2, #16
  407a3e:	2b07      	cmp	r3, #7
  407a40:	9225      	str	r2, [sp, #148]	; 0x94
  407a42:	9324      	str	r3, [sp, #144]	; 0x90
  407a44:	f8c4 9000 	str.w	r9, [r4]
  407a48:	f8c4 8004 	str.w	r8, [r4, #4]
  407a4c:	ddf0      	ble.n	407a30 <_svfprintf_r+0x934>
  407a4e:	4650      	mov	r0, sl
  407a50:	4631      	mov	r1, r6
  407a52:	aa23      	add	r2, sp, #140	; 0x8c
  407a54:	f002 ff3a 	bl	40a8cc <__ssprint_r>
  407a58:	2800      	cmp	r0, #0
  407a5a:	f47f ac15 	bne.w	407288 <_svfprintf_r+0x18c>
  407a5e:	9a25      	ldr	r2, [sp, #148]	; 0x94
  407a60:	9b24      	ldr	r3, [sp, #144]	; 0x90
  407a62:	463c      	mov	r4, r7
  407a64:	e7e5      	b.n	407a32 <_svfprintf_r+0x936>
  407a66:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  407a68:	9a09      	ldr	r2, [sp, #36]	; 0x24
  407a6a:	ebc2 0a03 	rsb	sl, r2, r3
  407a6e:	f1ba 0f00 	cmp.w	sl, #0
  407a72:	f77f ace7 	ble.w	407444 <_svfprintf_r+0x348>
  407a76:	f1ba 0f10 	cmp.w	sl, #16
  407a7a:	9a24      	ldr	r2, [sp, #144]	; 0x90
  407a7c:	f8df 9198 	ldr.w	r9, [pc, #408]	; 407c18 <_svfprintf_r+0xb1c>
  407a80:	dd2b      	ble.n	407ada <_svfprintf_r+0x9de>
  407a82:	4649      	mov	r1, r9
  407a84:	465b      	mov	r3, fp
  407a86:	46a9      	mov	r9, r5
  407a88:	f04f 0810 	mov.w	r8, #16
  407a8c:	f8dd b020 	ldr.w	fp, [sp, #32]
  407a90:	460d      	mov	r5, r1
  407a92:	e006      	b.n	407aa2 <_svfprintf_r+0x9a6>
  407a94:	f1aa 0a10 	sub.w	sl, sl, #16
  407a98:	f1ba 0f10 	cmp.w	sl, #16
  407a9c:	f104 0408 	add.w	r4, r4, #8
  407aa0:	dd17      	ble.n	407ad2 <_svfprintf_r+0x9d6>
  407aa2:	3201      	adds	r2, #1
  407aa4:	3310      	adds	r3, #16
  407aa6:	2a07      	cmp	r2, #7
  407aa8:	9325      	str	r3, [sp, #148]	; 0x94
  407aaa:	9224      	str	r2, [sp, #144]	; 0x90
  407aac:	e884 0120 	stmia.w	r4, {r5, r8}
  407ab0:	ddf0      	ble.n	407a94 <_svfprintf_r+0x998>
  407ab2:	4658      	mov	r0, fp
  407ab4:	4631      	mov	r1, r6
  407ab6:	aa23      	add	r2, sp, #140	; 0x8c
  407ab8:	f002 ff08 	bl	40a8cc <__ssprint_r>
  407abc:	2800      	cmp	r0, #0
  407abe:	f47f abe3 	bne.w	407288 <_svfprintf_r+0x18c>
  407ac2:	f1aa 0a10 	sub.w	sl, sl, #16
  407ac6:	f1ba 0f10 	cmp.w	sl, #16
  407aca:	9b25      	ldr	r3, [sp, #148]	; 0x94
  407acc:	9a24      	ldr	r2, [sp, #144]	; 0x90
  407ace:	463c      	mov	r4, r7
  407ad0:	dce7      	bgt.n	407aa2 <_svfprintf_r+0x9a6>
  407ad2:	469b      	mov	fp, r3
  407ad4:	462b      	mov	r3, r5
  407ad6:	464d      	mov	r5, r9
  407ad8:	4699      	mov	r9, r3
  407ada:	3201      	adds	r2, #1
  407adc:	44d3      	add	fp, sl
  407ade:	2a07      	cmp	r2, #7
  407ae0:	f8cd b094 	str.w	fp, [sp, #148]	; 0x94
  407ae4:	9224      	str	r2, [sp, #144]	; 0x90
  407ae6:	e884 0600 	stmia.w	r4, {r9, sl}
  407aea:	f300 8252 	bgt.w	407f92 <_svfprintf_r+0xe96>
  407aee:	3408      	adds	r4, #8
  407af0:	e4a8      	b.n	407444 <_svfprintf_r+0x348>
  407af2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  407af4:	9d24      	ldr	r5, [sp, #144]	; 0x90
  407af6:	2b01      	cmp	r3, #1
  407af8:	f340 8220 	ble.w	407f3c <_svfprintf_r+0xe40>
  407afc:	9b10      	ldr	r3, [sp, #64]	; 0x40
  407afe:	6023      	str	r3, [r4, #0]
  407b00:	3501      	adds	r5, #1
  407b02:	f10b 0301 	add.w	r3, fp, #1
  407b06:	2201      	movs	r2, #1
  407b08:	2d07      	cmp	r5, #7
  407b0a:	9325      	str	r3, [sp, #148]	; 0x94
  407b0c:	9524      	str	r5, [sp, #144]	; 0x90
  407b0e:	6062      	str	r2, [r4, #4]
  407b10:	f300 8226 	bgt.w	407f60 <_svfprintf_r+0xe64>
  407b14:	3408      	adds	r4, #8
  407b16:	9918      	ldr	r1, [sp, #96]	; 0x60
  407b18:	6061      	str	r1, [r4, #4]
  407b1a:	3501      	adds	r5, #1
  407b1c:	eb03 0b01 	add.w	fp, r3, r1
  407b20:	2d07      	cmp	r5, #7
  407b22:	9b17      	ldr	r3, [sp, #92]	; 0x5c
  407b24:	f8cd b094 	str.w	fp, [sp, #148]	; 0x94
  407b28:	9524      	str	r5, [sp, #144]	; 0x90
  407b2a:	6023      	str	r3, [r4, #0]
  407b2c:	f300 8224 	bgt.w	407f78 <_svfprintf_r+0xe7c>
  407b30:	3408      	adds	r4, #8
  407b32:	2300      	movs	r3, #0
  407b34:	9814      	ldr	r0, [sp, #80]	; 0x50
  407b36:	9915      	ldr	r1, [sp, #84]	; 0x54
  407b38:	2200      	movs	r2, #0
  407b3a:	f003 fbeb 	bl	40b314 <__aeabi_dcmpeq>
  407b3e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  407b40:	2800      	cmp	r0, #0
  407b42:	f040 80de 	bne.w	407d02 <_svfprintf_r+0xc06>
  407b46:	9a10      	ldr	r2, [sp, #64]	; 0x40
  407b48:	3b01      	subs	r3, #1
  407b4a:	3501      	adds	r5, #1
  407b4c:	3201      	adds	r2, #1
  407b4e:	449b      	add	fp, r3
  407b50:	2d07      	cmp	r5, #7
  407b52:	9524      	str	r5, [sp, #144]	; 0x90
  407b54:	f8cd b094 	str.w	fp, [sp, #148]	; 0x94
  407b58:	6022      	str	r2, [r4, #0]
  407b5a:	6063      	str	r3, [r4, #4]
  407b5c:	f300 810e 	bgt.w	407d7c <_svfprintf_r+0xc80>
  407b60:	3408      	adds	r4, #8
  407b62:	9a19      	ldr	r2, [sp, #100]	; 0x64
  407b64:	6062      	str	r2, [r4, #4]
  407b66:	3501      	adds	r5, #1
  407b68:	4493      	add	fp, r2
  407b6a:	ab1f      	add	r3, sp, #124	; 0x7c
  407b6c:	2d07      	cmp	r5, #7
  407b6e:	f8cd b094 	str.w	fp, [sp, #148]	; 0x94
  407b72:	9524      	str	r5, [sp, #144]	; 0x90
  407b74:	6023      	str	r3, [r4, #0]
  407b76:	f77f acba 	ble.w	4074ee <_svfprintf_r+0x3f2>
  407b7a:	9808      	ldr	r0, [sp, #32]
  407b7c:	4631      	mov	r1, r6
  407b7e:	aa23      	add	r2, sp, #140	; 0x8c
  407b80:	f002 fea4 	bl	40a8cc <__ssprint_r>
  407b84:	2800      	cmp	r0, #0
  407b86:	f47f ab7f 	bne.w	407288 <_svfprintf_r+0x18c>
  407b8a:	f8dd b094 	ldr.w	fp, [sp, #148]	; 0x94
  407b8e:	463c      	mov	r4, r7
  407b90:	e4ae      	b.n	4074f0 <_svfprintf_r+0x3f4>
  407b92:	2b00      	cmp	r3, #0
  407b94:	d132      	bne.n	407bfc <_svfprintf_r+0xb00>
  407b96:	9b07      	ldr	r3, [sp, #28]
  407b98:	07d8      	lsls	r0, r3, #31
  407b9a:	d52f      	bpl.n	407bfc <_svfprintf_r+0xb00>
  407b9c:	f50d 7b80 	add.w	fp, sp, #256	; 0x100
  407ba0:	2330      	movs	r3, #48	; 0x30
  407ba2:	f80b 3d41 	strb.w	r3, [fp, #-65]!
  407ba6:	ebcb 0307 	rsb	r3, fp, r7
  407baa:	930d      	str	r3, [sp, #52]	; 0x34
  407bac:	f8cd b040 	str.w	fp, [sp, #64]	; 0x40
  407bb0:	f7ff bbbc 	b.w	40732c <_svfprintf_r+0x230>
  407bb4:	9808      	ldr	r0, [sp, #32]
  407bb6:	4631      	mov	r1, r6
  407bb8:	aa23      	add	r2, sp, #140	; 0x8c
  407bba:	f002 fe87 	bl	40a8cc <__ssprint_r>
  407bbe:	2800      	cmp	r0, #0
  407bc0:	f47f ab62 	bne.w	407288 <_svfprintf_r+0x18c>
  407bc4:	f8dd b094 	ldr.w	fp, [sp, #148]	; 0x94
  407bc8:	463c      	mov	r4, r7
  407bca:	e47f      	b.n	4074cc <_svfprintf_r+0x3d0>
  407bcc:	9808      	ldr	r0, [sp, #32]
  407bce:	4631      	mov	r1, r6
  407bd0:	aa23      	add	r2, sp, #140	; 0x8c
  407bd2:	f002 fe7b 	bl	40a8cc <__ssprint_r>
  407bd6:	2800      	cmp	r0, #0
  407bd8:	f47f ab56 	bne.w	407288 <_svfprintf_r+0x18c>
  407bdc:	f8dd b094 	ldr.w	fp, [sp, #148]	; 0x94
  407be0:	463c      	mov	r4, r7
  407be2:	e41a      	b.n	40741a <_svfprintf_r+0x31e>
  407be4:	9808      	ldr	r0, [sp, #32]
  407be6:	4631      	mov	r1, r6
  407be8:	aa23      	add	r2, sp, #140	; 0x8c
  407bea:	f002 fe6f 	bl	40a8cc <__ssprint_r>
  407bee:	2800      	cmp	r0, #0
  407bf0:	f47f ab4a 	bne.w	407288 <_svfprintf_r+0x18c>
  407bf4:	f8dd b094 	ldr.w	fp, [sp, #148]	; 0x94
  407bf8:	463c      	mov	r4, r7
  407bfa:	e41f      	b.n	40743c <_svfprintf_r+0x340>
  407bfc:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
  407c00:	9710      	str	r7, [sp, #64]	; 0x40
  407c02:	f7ff bb93 	b.w	40732c <_svfprintf_r+0x230>
  407c06:	bf00      	nop
  407c08:	0040c0a8 	.word	0x0040c0a8
  407c0c:	0040c0c8 	.word	0x0040c0c8
  407c10:	0040c0e4 	.word	0x0040c0e4
  407c14:	0040c0a4 	.word	0x0040c0a4
  407c18:	0040c084 	.word	0x0040c084
  407c1c:	9816      	ldr	r0, [sp, #88]	; 0x58
  407c1e:	46bb      	mov	fp, r7
  407c20:	ea4f 1318 	mov.w	r3, r8, lsr #4
  407c24:	f008 010f 	and.w	r1, r8, #15
  407c28:	ea43 7309 	orr.w	r3, r3, r9, lsl #28
  407c2c:	ea4f 1219 	mov.w	r2, r9, lsr #4
  407c30:	4698      	mov	r8, r3
  407c32:	4691      	mov	r9, r2
  407c34:	5c43      	ldrb	r3, [r0, r1]
  407c36:	f80b 3d01 	strb.w	r3, [fp, #-1]!
  407c3a:	ea58 0309 	orrs.w	r3, r8, r9
  407c3e:	d1ef      	bne.n	407c20 <_svfprintf_r+0xb24>
  407c40:	465b      	mov	r3, fp
  407c42:	f8cd b040 	str.w	fp, [sp, #64]	; 0x40
  407c46:	1afb      	subs	r3, r7, r3
  407c48:	930d      	str	r3, [sp, #52]	; 0x34
  407c4a:	f7ff bb6f 	b.w	40732c <_svfprintf_r+0x230>
  407c4e:	9d1d      	ldr	r5, [sp, #116]	; 0x74
  407c50:	2d00      	cmp	r5, #0
  407c52:	f340 8205 	ble.w	408060 <_svfprintf_r+0xf64>
  407c56:	9a13      	ldr	r2, [sp, #76]	; 0x4c
  407c58:	9912      	ldr	r1, [sp, #72]	; 0x48
  407c5a:	428a      	cmp	r2, r1
  407c5c:	4613      	mov	r3, r2
  407c5e:	bfa8      	it	ge
  407c60:	460b      	movge	r3, r1
  407c62:	461d      	mov	r5, r3
  407c64:	9910      	ldr	r1, [sp, #64]	; 0x40
  407c66:	2d00      	cmp	r5, #0
  407c68:	eb01 0a02 	add.w	sl, r1, r2
  407c6c:	dd0b      	ble.n	407c86 <_svfprintf_r+0xb8a>
  407c6e:	9b24      	ldr	r3, [sp, #144]	; 0x90
  407c70:	6021      	str	r1, [r4, #0]
  407c72:	3301      	adds	r3, #1
  407c74:	44ab      	add	fp, r5
  407c76:	2b07      	cmp	r3, #7
  407c78:	f8cd b094 	str.w	fp, [sp, #148]	; 0x94
  407c7c:	6065      	str	r5, [r4, #4]
  407c7e:	9324      	str	r3, [sp, #144]	; 0x90
  407c80:	f300 834d 	bgt.w	40831e <_svfprintf_r+0x1222>
  407c84:	3408      	adds	r4, #8
  407c86:	9b12      	ldr	r3, [sp, #72]	; 0x48
  407c88:	2d00      	cmp	r5, #0
  407c8a:	bfa8      	it	ge
  407c8c:	1b5b      	subge	r3, r3, r5
  407c8e:	2b00      	cmp	r3, #0
  407c90:	461d      	mov	r5, r3
  407c92:	f340 80f5 	ble.w	407e80 <_svfprintf_r+0xd84>
  407c96:	2d10      	cmp	r5, #16
  407c98:	9b24      	ldr	r3, [sp, #144]	; 0x90
  407c9a:	f8df 95f4 	ldr.w	r9, [pc, #1524]	; 408290 <_svfprintf_r+0x1194>
  407c9e:	f340 81c6 	ble.w	40802e <_svfprintf_r+0xf32>
  407ca2:	465a      	mov	r2, fp
  407ca4:	f04f 0810 	mov.w	r8, #16
  407ca8:	f8dd b020 	ldr.w	fp, [sp, #32]
  407cac:	e004      	b.n	407cb8 <_svfprintf_r+0xbbc>
  407cae:	3408      	adds	r4, #8
  407cb0:	3d10      	subs	r5, #16
  407cb2:	2d10      	cmp	r5, #16
  407cb4:	f340 81ba 	ble.w	40802c <_svfprintf_r+0xf30>
  407cb8:	3301      	adds	r3, #1
  407cba:	3210      	adds	r2, #16
  407cbc:	2b07      	cmp	r3, #7
  407cbe:	9225      	str	r2, [sp, #148]	; 0x94
  407cc0:	9324      	str	r3, [sp, #144]	; 0x90
  407cc2:	f8c4 9000 	str.w	r9, [r4]
  407cc6:	f8c4 8004 	str.w	r8, [r4, #4]
  407cca:	ddf0      	ble.n	407cae <_svfprintf_r+0xbb2>
  407ccc:	4658      	mov	r0, fp
  407cce:	4631      	mov	r1, r6
  407cd0:	aa23      	add	r2, sp, #140	; 0x8c
  407cd2:	f002 fdfb 	bl	40a8cc <__ssprint_r>
  407cd6:	2800      	cmp	r0, #0
  407cd8:	f47f aad6 	bne.w	407288 <_svfprintf_r+0x18c>
  407cdc:	9a25      	ldr	r2, [sp, #148]	; 0x94
  407cde:	9b24      	ldr	r3, [sp, #144]	; 0x90
  407ce0:	463c      	mov	r4, r7
  407ce2:	e7e5      	b.n	407cb0 <_svfprintf_r+0xbb4>
  407ce4:	9808      	ldr	r0, [sp, #32]
  407ce6:	4631      	mov	r1, r6
  407ce8:	aa23      	add	r2, sp, #140	; 0x8c
  407cea:	f002 fdef 	bl	40a8cc <__ssprint_r>
  407cee:	2800      	cmp	r0, #0
  407cf0:	f47f aaca 	bne.w	407288 <_svfprintf_r+0x18c>
  407cf4:	f89d c06f 	ldrb.w	ip, [sp, #111]	; 0x6f
  407cf8:	f8dd b094 	ldr.w	fp, [sp, #148]	; 0x94
  407cfc:	463c      	mov	r4, r7
  407cfe:	f7ff bb79 	b.w	4073f4 <_svfprintf_r+0x2f8>
  407d02:	f103 38ff 	add.w	r8, r3, #4294967295
  407d06:	f1b8 0f00 	cmp.w	r8, #0
  407d0a:	f77f af2a 	ble.w	407b62 <_svfprintf_r+0xa66>
  407d0e:	f1b8 0f10 	cmp.w	r8, #16
  407d12:	f8df 957c 	ldr.w	r9, [pc, #1404]	; 408290 <_svfprintf_r+0x1194>
  407d16:	dd25      	ble.n	407d64 <_svfprintf_r+0xc68>
  407d18:	465b      	mov	r3, fp
  407d1a:	f04f 0a10 	mov.w	sl, #16
  407d1e:	f8dd b020 	ldr.w	fp, [sp, #32]
  407d22:	e006      	b.n	407d32 <_svfprintf_r+0xc36>
  407d24:	f1a8 0810 	sub.w	r8, r8, #16
  407d28:	f1b8 0f10 	cmp.w	r8, #16
  407d2c:	f104 0408 	add.w	r4, r4, #8
  407d30:	dd17      	ble.n	407d62 <_svfprintf_r+0xc66>
  407d32:	3501      	adds	r5, #1
  407d34:	3310      	adds	r3, #16
  407d36:	2d07      	cmp	r5, #7
  407d38:	9325      	str	r3, [sp, #148]	; 0x94
  407d3a:	9524      	str	r5, [sp, #144]	; 0x90
  407d3c:	e884 0600 	stmia.w	r4, {r9, sl}
  407d40:	ddf0      	ble.n	407d24 <_svfprintf_r+0xc28>
  407d42:	4658      	mov	r0, fp
  407d44:	4631      	mov	r1, r6
  407d46:	aa23      	add	r2, sp, #140	; 0x8c
  407d48:	f002 fdc0 	bl	40a8cc <__ssprint_r>
  407d4c:	2800      	cmp	r0, #0
  407d4e:	f47f aa9b 	bne.w	407288 <_svfprintf_r+0x18c>
  407d52:	f1a8 0810 	sub.w	r8, r8, #16
  407d56:	f1b8 0f10 	cmp.w	r8, #16
  407d5a:	9b25      	ldr	r3, [sp, #148]	; 0x94
  407d5c:	9d24      	ldr	r5, [sp, #144]	; 0x90
  407d5e:	463c      	mov	r4, r7
  407d60:	dce7      	bgt.n	407d32 <_svfprintf_r+0xc36>
  407d62:	469b      	mov	fp, r3
  407d64:	3501      	adds	r5, #1
  407d66:	44c3      	add	fp, r8
  407d68:	2d07      	cmp	r5, #7
  407d6a:	f8cd b094 	str.w	fp, [sp, #148]	; 0x94
  407d6e:	9524      	str	r5, [sp, #144]	; 0x90
  407d70:	f8c4 9000 	str.w	r9, [r4]
  407d74:	f8c4 8004 	str.w	r8, [r4, #4]
  407d78:	f77f aef2 	ble.w	407b60 <_svfprintf_r+0xa64>
  407d7c:	9808      	ldr	r0, [sp, #32]
  407d7e:	4631      	mov	r1, r6
  407d80:	aa23      	add	r2, sp, #140	; 0x8c
  407d82:	f002 fda3 	bl	40a8cc <__ssprint_r>
  407d86:	2800      	cmp	r0, #0
  407d88:	f47f aa7e 	bne.w	407288 <_svfprintf_r+0x18c>
  407d8c:	f8dd b094 	ldr.w	fp, [sp, #148]	; 0x94
  407d90:	9d24      	ldr	r5, [sp, #144]	; 0x90
  407d92:	463c      	mov	r4, r7
  407d94:	e6e5      	b.n	407b62 <_svfprintf_r+0xa66>
  407d96:	4693      	mov	fp, r2
  407d98:	3301      	adds	r3, #1
  407d9a:	44ab      	add	fp, r5
  407d9c:	2b07      	cmp	r3, #7
  407d9e:	f8cd b094 	str.w	fp, [sp, #148]	; 0x94
  407da2:	9324      	str	r3, [sp, #144]	; 0x90
  407da4:	f8c4 9000 	str.w	r9, [r4]
  407da8:	6065      	str	r5, [r4, #4]
  407daa:	f77f aba0 	ble.w	4074ee <_svfprintf_r+0x3f2>
  407dae:	e6e4      	b.n	407b7a <_svfprintf_r+0xa7e>
  407db0:	2b30      	cmp	r3, #48	; 0x30
  407db2:	9b10      	ldr	r3, [sp, #64]	; 0x40
  407db4:	f43f af47 	beq.w	407c46 <_svfprintf_r+0xb4a>
  407db8:	3b01      	subs	r3, #1
  407dba:	461a      	mov	r2, r3
  407dbc:	9310      	str	r3, [sp, #64]	; 0x40
  407dbe:	1aba      	subs	r2, r7, r2
  407dc0:	2330      	movs	r3, #48	; 0x30
  407dc2:	920d      	str	r2, [sp, #52]	; 0x34
  407dc4:	f801 3c01 	strb.w	r3, [r1, #-1]
  407dc8:	f7ff bab0 	b.w	40732c <_svfprintf_r+0x230>
  407dcc:	46bb      	mov	fp, r7
  407dce:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
  407dd2:	4640      	mov	r0, r8
  407dd4:	4649      	mov	r1, r9
  407dd6:	220a      	movs	r2, #10
  407dd8:	2300      	movs	r3, #0
  407dda:	f003 faf5 	bl	40b3c8 <__aeabi_uldivmod>
  407dde:	3230      	adds	r2, #48	; 0x30
  407de0:	4640      	mov	r0, r8
  407de2:	4649      	mov	r1, r9
  407de4:	f80b 2d01 	strb.w	r2, [fp, #-1]!
  407de8:	2300      	movs	r3, #0
  407dea:	220a      	movs	r2, #10
  407dec:	f003 faec 	bl	40b3c8 <__aeabi_uldivmod>
  407df0:	4680      	mov	r8, r0
  407df2:	4689      	mov	r9, r1
  407df4:	ea58 0309 	orrs.w	r3, r8, r9
  407df8:	d1eb      	bne.n	407dd2 <_svfprintf_r+0xcd6>
  407dfa:	465b      	mov	r3, fp
  407dfc:	1afb      	subs	r3, r7, r3
  407dfe:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
  407e02:	f8cd b040 	str.w	fp, [sp, #64]	; 0x40
  407e06:	930d      	str	r3, [sp, #52]	; 0x34
  407e08:	f7ff ba90 	b.w	40732c <_svfprintf_r+0x230>
  407e0c:	990e      	ldr	r1, [sp, #56]	; 0x38
  407e0e:	680a      	ldr	r2, [r1, #0]
  407e10:	3104      	adds	r1, #4
  407e12:	910e      	str	r1, [sp, #56]	; 0x38
  407e14:	4690      	mov	r8, r2
  407e16:	f04f 0900 	mov.w	r9, #0
  407e1a:	f7ff ba54 	b.w	4072c6 <_svfprintf_r+0x1ca>
  407e1e:	990e      	ldr	r1, [sp, #56]	; 0x38
  407e20:	680a      	ldr	r2, [r1, #0]
  407e22:	3104      	adds	r1, #4
  407e24:	2301      	movs	r3, #1
  407e26:	910e      	str	r1, [sp, #56]	; 0x38
  407e28:	4690      	mov	r8, r2
  407e2a:	f04f 0900 	mov.w	r9, #0
  407e2e:	f7ff ba4a 	b.w	4072c6 <_svfprintf_r+0x1ca>
  407e32:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  407e34:	6813      	ldr	r3, [r2, #0]
  407e36:	4698      	mov	r8, r3
  407e38:	ea4f 79e3 	mov.w	r9, r3, asr #31
  407e3c:	4613      	mov	r3, r2
  407e3e:	3304      	adds	r3, #4
  407e40:	4642      	mov	r2, r8
  407e42:	930e      	str	r3, [sp, #56]	; 0x38
  407e44:	2a00      	cmp	r2, #0
  407e46:	464b      	mov	r3, r9
  407e48:	f173 0300 	sbcs.w	r3, r3, #0
  407e4c:	f6bf abf5 	bge.w	40763a <_svfprintf_r+0x53e>
  407e50:	f04f 0c2d 	mov.w	ip, #45	; 0x2d
  407e54:	f1d8 0800 	rsbs	r8, r8, #0
  407e58:	eb69 0949 	sbc.w	r9, r9, r9, lsl #1
  407e5c:	f88d c06f 	strb.w	ip, [sp, #111]	; 0x6f
  407e60:	f8cd a044 	str.w	sl, [sp, #68]	; 0x44
  407e64:	2301      	movs	r3, #1
  407e66:	f7ff ba34 	b.w	4072d2 <_svfprintf_r+0x1d6>
  407e6a:	9808      	ldr	r0, [sp, #32]
  407e6c:	4631      	mov	r1, r6
  407e6e:	aa23      	add	r2, sp, #140	; 0x8c
  407e70:	f002 fd2c 	bl	40a8cc <__ssprint_r>
  407e74:	2800      	cmp	r0, #0
  407e76:	f47f aa07 	bne.w	407288 <_svfprintf_r+0x18c>
  407e7a:	f8dd b094 	ldr.w	fp, [sp, #148]	; 0x94
  407e7e:	463c      	mov	r4, r7
  407e80:	9a10      	ldr	r2, [sp, #64]	; 0x40
  407e82:	9912      	ldr	r1, [sp, #72]	; 0x48
  407e84:	9b1d      	ldr	r3, [sp, #116]	; 0x74
  407e86:	440a      	add	r2, r1
  407e88:	4690      	mov	r8, r2
  407e8a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
  407e8c:	4293      	cmp	r3, r2
  407e8e:	db46      	blt.n	407f1e <_svfprintf_r+0xe22>
  407e90:	9a07      	ldr	r2, [sp, #28]
  407e92:	07d0      	lsls	r0, r2, #31
  407e94:	d443      	bmi.n	407f1e <_svfprintf_r+0xe22>
  407e96:	9a13      	ldr	r2, [sp, #76]	; 0x4c
  407e98:	ebc8 050a 	rsb	r5, r8, sl
  407e9c:	1ad3      	subs	r3, r2, r3
  407e9e:	429d      	cmp	r5, r3
  407ea0:	bfa8      	it	ge
  407ea2:	461d      	movge	r5, r3
  407ea4:	2d00      	cmp	r5, #0
  407ea6:	dd0c      	ble.n	407ec2 <_svfprintf_r+0xdc6>
  407ea8:	9a24      	ldr	r2, [sp, #144]	; 0x90
  407eaa:	f8c4 8000 	str.w	r8, [r4]
  407eae:	3201      	adds	r2, #1
  407eb0:	44ab      	add	fp, r5
  407eb2:	2a07      	cmp	r2, #7
  407eb4:	f8cd b094 	str.w	fp, [sp, #148]	; 0x94
  407eb8:	6065      	str	r5, [r4, #4]
  407eba:	9224      	str	r2, [sp, #144]	; 0x90
  407ebc:	f300 8267 	bgt.w	40838e <_svfprintf_r+0x1292>
  407ec0:	3408      	adds	r4, #8
  407ec2:	2d00      	cmp	r5, #0
  407ec4:	bfac      	ite	ge
  407ec6:	1b5d      	subge	r5, r3, r5
  407ec8:	461d      	movlt	r5, r3
  407eca:	2d00      	cmp	r5, #0
  407ecc:	f77f ab10 	ble.w	4074f0 <_svfprintf_r+0x3f4>
  407ed0:	2d10      	cmp	r5, #16
  407ed2:	9b24      	ldr	r3, [sp, #144]	; 0x90
  407ed4:	f8df 93b8 	ldr.w	r9, [pc, #952]	; 408290 <_svfprintf_r+0x1194>
  407ed8:	f77f af5e 	ble.w	407d98 <_svfprintf_r+0xc9c>
  407edc:	f04f 0810 	mov.w	r8, #16
  407ee0:	465a      	mov	r2, fp
  407ee2:	f8dd a020 	ldr.w	sl, [sp, #32]
  407ee6:	e004      	b.n	407ef2 <_svfprintf_r+0xdf6>
  407ee8:	3408      	adds	r4, #8
  407eea:	3d10      	subs	r5, #16
  407eec:	2d10      	cmp	r5, #16
  407eee:	f77f af52 	ble.w	407d96 <_svfprintf_r+0xc9a>
  407ef2:	3301      	adds	r3, #1
  407ef4:	3210      	adds	r2, #16
  407ef6:	2b07      	cmp	r3, #7
  407ef8:	9225      	str	r2, [sp, #148]	; 0x94
  407efa:	9324      	str	r3, [sp, #144]	; 0x90
  407efc:	f8c4 9000 	str.w	r9, [r4]
  407f00:	f8c4 8004 	str.w	r8, [r4, #4]
  407f04:	ddf0      	ble.n	407ee8 <_svfprintf_r+0xdec>
  407f06:	4650      	mov	r0, sl
  407f08:	4631      	mov	r1, r6
  407f0a:	aa23      	add	r2, sp, #140	; 0x8c
  407f0c:	f002 fcde 	bl	40a8cc <__ssprint_r>
  407f10:	2800      	cmp	r0, #0
  407f12:	f47f a9b9 	bne.w	407288 <_svfprintf_r+0x18c>
  407f16:	9a25      	ldr	r2, [sp, #148]	; 0x94
  407f18:	9b24      	ldr	r3, [sp, #144]	; 0x90
  407f1a:	463c      	mov	r4, r7
  407f1c:	e7e5      	b.n	407eea <_svfprintf_r+0xdee>
  407f1e:	9a24      	ldr	r2, [sp, #144]	; 0x90
  407f20:	9818      	ldr	r0, [sp, #96]	; 0x60
  407f22:	9917      	ldr	r1, [sp, #92]	; 0x5c
  407f24:	6021      	str	r1, [r4, #0]
  407f26:	3201      	adds	r2, #1
  407f28:	4483      	add	fp, r0
  407f2a:	2a07      	cmp	r2, #7
  407f2c:	f8cd b094 	str.w	fp, [sp, #148]	; 0x94
  407f30:	6060      	str	r0, [r4, #4]
  407f32:	9224      	str	r2, [sp, #144]	; 0x90
  407f34:	f300 820a 	bgt.w	40834c <_svfprintf_r+0x1250>
  407f38:	3408      	adds	r4, #8
  407f3a:	e7ac      	b.n	407e96 <_svfprintf_r+0xd9a>
  407f3c:	9b07      	ldr	r3, [sp, #28]
  407f3e:	07d9      	lsls	r1, r3, #31
  407f40:	f53f addc 	bmi.w	407afc <_svfprintf_r+0xa00>
  407f44:	9b10      	ldr	r3, [sp, #64]	; 0x40
  407f46:	6023      	str	r3, [r4, #0]
  407f48:	3501      	adds	r5, #1
  407f4a:	f10b 0b01 	add.w	fp, fp, #1
  407f4e:	2301      	movs	r3, #1
  407f50:	2d07      	cmp	r5, #7
  407f52:	f8cd b094 	str.w	fp, [sp, #148]	; 0x94
  407f56:	9524      	str	r5, [sp, #144]	; 0x90
  407f58:	6063      	str	r3, [r4, #4]
  407f5a:	f77f ae01 	ble.w	407b60 <_svfprintf_r+0xa64>
  407f5e:	e70d      	b.n	407d7c <_svfprintf_r+0xc80>
  407f60:	9808      	ldr	r0, [sp, #32]
  407f62:	4631      	mov	r1, r6
  407f64:	aa23      	add	r2, sp, #140	; 0x8c
  407f66:	f002 fcb1 	bl	40a8cc <__ssprint_r>
  407f6a:	2800      	cmp	r0, #0
  407f6c:	f47f a98c 	bne.w	407288 <_svfprintf_r+0x18c>
  407f70:	9b25      	ldr	r3, [sp, #148]	; 0x94
  407f72:	9d24      	ldr	r5, [sp, #144]	; 0x90
  407f74:	463c      	mov	r4, r7
  407f76:	e5ce      	b.n	407b16 <_svfprintf_r+0xa1a>
  407f78:	9808      	ldr	r0, [sp, #32]
  407f7a:	4631      	mov	r1, r6
  407f7c:	aa23      	add	r2, sp, #140	; 0x8c
  407f7e:	f002 fca5 	bl	40a8cc <__ssprint_r>
  407f82:	2800      	cmp	r0, #0
  407f84:	f47f a980 	bne.w	407288 <_svfprintf_r+0x18c>
  407f88:	f8dd b094 	ldr.w	fp, [sp, #148]	; 0x94
  407f8c:	9d24      	ldr	r5, [sp, #144]	; 0x90
  407f8e:	463c      	mov	r4, r7
  407f90:	e5cf      	b.n	407b32 <_svfprintf_r+0xa36>
  407f92:	9808      	ldr	r0, [sp, #32]
  407f94:	4631      	mov	r1, r6
  407f96:	aa23      	add	r2, sp, #140	; 0x8c
  407f98:	f002 fc98 	bl	40a8cc <__ssprint_r>
  407f9c:	2800      	cmp	r0, #0
  407f9e:	f47f a973 	bne.w	407288 <_svfprintf_r+0x18c>
  407fa2:	f8dd b094 	ldr.w	fp, [sp, #148]	; 0x94
  407fa6:	463c      	mov	r4, r7
  407fa8:	f7ff ba4c 	b.w	407444 <_svfprintf_r+0x348>
  407fac:	f002 fc50 	bl	40a850 <__fpclassifyd>
  407fb0:	2800      	cmp	r0, #0
  407fb2:	f040 80c7 	bne.w	408144 <_svfprintf_r+0x1048>
  407fb6:	4686      	mov	lr, r0
  407fb8:	4ab2      	ldr	r2, [pc, #712]	; (408284 <_svfprintf_r+0x1188>)
  407fba:	4bb3      	ldr	r3, [pc, #716]	; (408288 <_svfprintf_r+0x118c>)
  407fbc:	9011      	str	r0, [sp, #68]	; 0x44
  407fbe:	9807      	ldr	r0, [sp, #28]
  407fc0:	f89d c06f 	ldrb.w	ip, [sp, #111]	; 0x6f
  407fc4:	f8cd e048 	str.w	lr, [sp, #72]	; 0x48
  407fc8:	2103      	movs	r1, #3
  407fca:	f020 0080 	bic.w	r0, r0, #128	; 0x80
  407fce:	2d47      	cmp	r5, #71	; 0x47
  407fd0:	bfd8      	it	le
  407fd2:	461a      	movle	r2, r3
  407fd4:	9109      	str	r1, [sp, #36]	; 0x24
  407fd6:	9007      	str	r0, [sp, #28]
  407fd8:	9210      	str	r2, [sp, #64]	; 0x40
  407fda:	910d      	str	r1, [sp, #52]	; 0x34
  407fdc:	f7ff b9ae 	b.w	40733c <_svfprintf_r+0x240>
  407fe0:	9b07      	ldr	r3, [sp, #28]
  407fe2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  407fe4:	f013 0f40 	tst.w	r3, #64	; 0x40
  407fe8:	4613      	mov	r3, r2
  407fea:	f43f ac2e 	beq.w	40784a <_svfprintf_r+0x74e>
  407fee:	3304      	adds	r3, #4
  407ff0:	f8b2 8000 	ldrh.w	r8, [r2]
  407ff4:	930e      	str	r3, [sp, #56]	; 0x38
  407ff6:	f04f 0900 	mov.w	r9, #0
  407ffa:	f7ff bb37 	b.w	40766c <_svfprintf_r+0x570>
  407ffe:	9b07      	ldr	r3, [sp, #28]
  408000:	06db      	lsls	r3, r3, #27
  408002:	d40b      	bmi.n	40801c <_svfprintf_r+0xf20>
  408004:	9b07      	ldr	r3, [sp, #28]
  408006:	065d      	lsls	r5, r3, #25
  408008:	d508      	bpl.n	40801c <_svfprintf_r+0xf20>
  40800a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  40800c:	6813      	ldr	r3, [r2, #0]
  40800e:	3204      	adds	r2, #4
  408010:	920e      	str	r2, [sp, #56]	; 0x38
  408012:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
  408016:	801a      	strh	r2, [r3, #0]
  408018:	f7ff b895 	b.w	407146 <_svfprintf_r+0x4a>
  40801c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  40801e:	6813      	ldr	r3, [r2, #0]
  408020:	3204      	adds	r2, #4
  408022:	920e      	str	r2, [sp, #56]	; 0x38
  408024:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  408026:	601a      	str	r2, [r3, #0]
  408028:	f7ff b88d 	b.w	407146 <_svfprintf_r+0x4a>
  40802c:	4693      	mov	fp, r2
  40802e:	3301      	adds	r3, #1
  408030:	44ab      	add	fp, r5
  408032:	2b07      	cmp	r3, #7
  408034:	f8cd b094 	str.w	fp, [sp, #148]	; 0x94
  408038:	9324      	str	r3, [sp, #144]	; 0x90
  40803a:	f8c4 9000 	str.w	r9, [r4]
  40803e:	6065      	str	r5, [r4, #4]
  408040:	f73f af13 	bgt.w	407e6a <_svfprintf_r+0xd6e>
  408044:	3408      	adds	r4, #8
  408046:	e71b      	b.n	407e80 <_svfprintf_r+0xd84>
  408048:	9808      	ldr	r0, [sp, #32]
  40804a:	4631      	mov	r1, r6
  40804c:	aa23      	add	r2, sp, #140	; 0x8c
  40804e:	f002 fc3d 	bl	40a8cc <__ssprint_r>
  408052:	2800      	cmp	r0, #0
  408054:	f47f a918 	bne.w	407288 <_svfprintf_r+0x18c>
  408058:	f8dd b094 	ldr.w	fp, [sp, #148]	; 0x94
  40805c:	463c      	mov	r4, r7
  40805e:	e4c0      	b.n	4079e2 <_svfprintf_r+0x8e6>
  408060:	9b24      	ldr	r3, [sp, #144]	; 0x90
  408062:	4a8a      	ldr	r2, [pc, #552]	; (40828c <_svfprintf_r+0x1190>)
  408064:	6022      	str	r2, [r4, #0]
  408066:	3301      	adds	r3, #1
  408068:	f10b 0b01 	add.w	fp, fp, #1
  40806c:	2201      	movs	r2, #1
  40806e:	2b07      	cmp	r3, #7
  408070:	f8cd b094 	str.w	fp, [sp, #148]	; 0x94
  408074:	9324      	str	r3, [sp, #144]	; 0x90
  408076:	6062      	str	r2, [r4, #4]
  408078:	f300 80f4 	bgt.w	408264 <_svfprintf_r+0x1168>
  40807c:	3408      	adds	r4, #8
  40807e:	b92d      	cbnz	r5, 40808c <_svfprintf_r+0xf90>
  408080:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  408082:	b91b      	cbnz	r3, 40808c <_svfprintf_r+0xf90>
  408084:	9b07      	ldr	r3, [sp, #28]
  408086:	07db      	lsls	r3, r3, #31
  408088:	f57f aa32 	bpl.w	4074f0 <_svfprintf_r+0x3f4>
  40808c:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40808e:	9818      	ldr	r0, [sp, #96]	; 0x60
  408090:	9a17      	ldr	r2, [sp, #92]	; 0x5c
  408092:	6022      	str	r2, [r4, #0]
  408094:	3301      	adds	r3, #1
  408096:	eb0b 0100 	add.w	r1, fp, r0
  40809a:	2b07      	cmp	r3, #7
  40809c:	9125      	str	r1, [sp, #148]	; 0x94
  40809e:	6060      	str	r0, [r4, #4]
  4080a0:	9324      	str	r3, [sp, #144]	; 0x90
  4080a2:	f300 81f3 	bgt.w	40848c <_svfprintf_r+0x1390>
  4080a6:	f104 0208 	add.w	r2, r4, #8
  4080aa:	426d      	negs	r5, r5
  4080ac:	2d00      	cmp	r5, #0
  4080ae:	f340 80fc 	ble.w	4082aa <_svfprintf_r+0x11ae>
  4080b2:	2d10      	cmp	r5, #16
  4080b4:	f8df 91d8 	ldr.w	r9, [pc, #472]	; 408290 <_svfprintf_r+0x1194>
  4080b8:	f340 813d 	ble.w	408336 <_svfprintf_r+0x123a>
  4080bc:	2410      	movs	r4, #16
  4080be:	f8dd 8020 	ldr.w	r8, [sp, #32]
  4080c2:	e004      	b.n	4080ce <_svfprintf_r+0xfd2>
  4080c4:	3208      	adds	r2, #8
  4080c6:	3d10      	subs	r5, #16
  4080c8:	2d10      	cmp	r5, #16
  4080ca:	f340 8134 	ble.w	408336 <_svfprintf_r+0x123a>
  4080ce:	3301      	adds	r3, #1
  4080d0:	3110      	adds	r1, #16
  4080d2:	2b07      	cmp	r3, #7
  4080d4:	9125      	str	r1, [sp, #148]	; 0x94
  4080d6:	9324      	str	r3, [sp, #144]	; 0x90
  4080d8:	f8c2 9000 	str.w	r9, [r2]
  4080dc:	6054      	str	r4, [r2, #4]
  4080de:	ddf1      	ble.n	4080c4 <_svfprintf_r+0xfc8>
  4080e0:	4640      	mov	r0, r8
  4080e2:	4631      	mov	r1, r6
  4080e4:	aa23      	add	r2, sp, #140	; 0x8c
  4080e6:	f002 fbf1 	bl	40a8cc <__ssprint_r>
  4080ea:	2800      	cmp	r0, #0
  4080ec:	f47f a8cc 	bne.w	407288 <_svfprintf_r+0x18c>
  4080f0:	9925      	ldr	r1, [sp, #148]	; 0x94
  4080f2:	9b24      	ldr	r3, [sp, #144]	; 0x90
  4080f4:	463a      	mov	r2, r7
  4080f6:	e7e6      	b.n	4080c6 <_svfprintf_r+0xfca>
  4080f8:	9b25      	ldr	r3, [sp, #148]	; 0x94
  4080fa:	46b1      	mov	r9, r6
  4080fc:	2b00      	cmp	r3, #0
  4080fe:	f43f a8c4 	beq.w	40728a <_svfprintf_r+0x18e>
  408102:	9808      	ldr	r0, [sp, #32]
  408104:	4631      	mov	r1, r6
  408106:	aa23      	add	r2, sp, #140	; 0x8c
  408108:	f002 fbe0 	bl	40a8cc <__ssprint_r>
  40810c:	f7ff b8bd 	b.w	40728a <_svfprintf_r+0x18e>
  408110:	980c      	ldr	r0, [sp, #48]	; 0x30
  408112:	910e      	str	r1, [sp, #56]	; 0x38
  408114:	4240      	negs	r0, r0
  408116:	900c      	str	r0, [sp, #48]	; 0x30
  408118:	4619      	mov	r1, r3
  40811a:	f7ff ba3f 	b.w	40759c <_svfprintf_r+0x4a0>
  40811e:	f041 0120 	orr.w	r1, r1, #32
  408122:	9107      	str	r1, [sp, #28]
  408124:	785d      	ldrb	r5, [r3, #1]
  408126:	1c59      	adds	r1, r3, #1
  408128:	f7ff b83b 	b.w	4071a2 <_svfprintf_r+0xa6>
  40812c:	9808      	ldr	r0, [sp, #32]
  40812e:	4631      	mov	r1, r6
  408130:	aa23      	add	r2, sp, #140	; 0x8c
  408132:	f002 fbcb 	bl	40a8cc <__ssprint_r>
  408136:	2800      	cmp	r0, #0
  408138:	f47f a8a6 	bne.w	407288 <_svfprintf_r+0x18c>
  40813c:	f8dd b094 	ldr.w	fp, [sp, #148]	; 0x94
  408140:	463c      	mov	r4, r7
  408142:	e464      	b.n	407a0e <_svfprintf_r+0x912>
  408144:	f025 0320 	bic.w	r3, r5, #32
  408148:	f1ba 3fff 	cmp.w	sl, #4294967295
  40814c:	930d      	str	r3, [sp, #52]	; 0x34
  40814e:	f000 8096 	beq.w	40827e <_svfprintf_r+0x1182>
  408152:	2b47      	cmp	r3, #71	; 0x47
  408154:	d105      	bne.n	408162 <_svfprintf_r+0x1066>
  408156:	f1ba 0f00 	cmp.w	sl, #0
  40815a:	bf14      	ite	ne
  40815c:	46d3      	movne	fp, sl
  40815e:	f04f 0b01 	moveq.w	fp, #1
  408162:	9b07      	ldr	r3, [sp, #28]
  408164:	f443 7380 	orr.w	r3, r3, #256	; 0x100
  408168:	9311      	str	r3, [sp, #68]	; 0x44
  40816a:	9b15      	ldr	r3, [sp, #84]	; 0x54
  40816c:	f1b3 0a00 	subs.w	sl, r3, #0
  408170:	9b14      	ldr	r3, [sp, #80]	; 0x50
  408172:	9309      	str	r3, [sp, #36]	; 0x24
  408174:	bfbb      	ittet	lt
  408176:	4653      	movlt	r3, sl
  408178:	f103 4a00 	addlt.w	sl, r3, #2147483648	; 0x80000000
  40817c:	2300      	movge	r3, #0
  40817e:	232d      	movlt	r3, #45	; 0x2d
  408180:	2d66      	cmp	r5, #102	; 0x66
  408182:	930f      	str	r3, [sp, #60]	; 0x3c
  408184:	f000 80ac 	beq.w	4082e0 <_svfprintf_r+0x11e4>
  408188:	2d46      	cmp	r5, #70	; 0x46
  40818a:	f000 80a9 	beq.w	4082e0 <_svfprintf_r+0x11e4>
  40818e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  408190:	9a09      	ldr	r2, [sp, #36]	; 0x24
  408192:	2b45      	cmp	r3, #69	; 0x45
  408194:	bf0c      	ite	eq
  408196:	f10b 0901 	addeq.w	r9, fp, #1
  40819a:	46d9      	movne	r9, fp
  40819c:	2002      	movs	r0, #2
  40819e:	a91d      	add	r1, sp, #116	; 0x74
  4081a0:	e88d 0201 	stmia.w	sp, {r0, r9}
  4081a4:	9102      	str	r1, [sp, #8]
  4081a6:	a81e      	add	r0, sp, #120	; 0x78
  4081a8:	a921      	add	r1, sp, #132	; 0x84
  4081aa:	9003      	str	r0, [sp, #12]
  4081ac:	4653      	mov	r3, sl
  4081ae:	9104      	str	r1, [sp, #16]
  4081b0:	9808      	ldr	r0, [sp, #32]
  4081b2:	f000 fa95 	bl	4086e0 <_dtoa_r>
  4081b6:	2d67      	cmp	r5, #103	; 0x67
  4081b8:	9010      	str	r0, [sp, #64]	; 0x40
  4081ba:	d002      	beq.n	4081c2 <_svfprintf_r+0x10c6>
  4081bc:	2d47      	cmp	r5, #71	; 0x47
  4081be:	f040 809f 	bne.w	408300 <_svfprintf_r+0x1204>
  4081c2:	9b07      	ldr	r3, [sp, #28]
  4081c4:	07db      	lsls	r3, r3, #31
  4081c6:	f140 8189 	bpl.w	4084dc <_svfprintf_r+0x13e0>
  4081ca:	9b10      	ldr	r3, [sp, #64]	; 0x40
  4081cc:	eb03 0809 	add.w	r8, r3, r9
  4081d0:	9809      	ldr	r0, [sp, #36]	; 0x24
  4081d2:	4651      	mov	r1, sl
  4081d4:	2200      	movs	r2, #0
  4081d6:	2300      	movs	r3, #0
  4081d8:	f003 f89c 	bl	40b314 <__aeabi_dcmpeq>
  4081dc:	2800      	cmp	r0, #0
  4081de:	f040 80fd 	bne.w	4083dc <_svfprintf_r+0x12e0>
  4081e2:	9b21      	ldr	r3, [sp, #132]	; 0x84
  4081e4:	4598      	cmp	r8, r3
  4081e6:	d906      	bls.n	4081f6 <_svfprintf_r+0x10fa>
  4081e8:	2130      	movs	r1, #48	; 0x30
  4081ea:	1c5a      	adds	r2, r3, #1
  4081ec:	9221      	str	r2, [sp, #132]	; 0x84
  4081ee:	7019      	strb	r1, [r3, #0]
  4081f0:	9b21      	ldr	r3, [sp, #132]	; 0x84
  4081f2:	4598      	cmp	r8, r3
  4081f4:	d8f9      	bhi.n	4081ea <_svfprintf_r+0x10ee>
  4081f6:	9a10      	ldr	r2, [sp, #64]	; 0x40
  4081f8:	1a9b      	subs	r3, r3, r2
  4081fa:	9313      	str	r3, [sp, #76]	; 0x4c
  4081fc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  4081fe:	2b47      	cmp	r3, #71	; 0x47
  408200:	9b1d      	ldr	r3, [sp, #116]	; 0x74
  408202:	f000 80de 	beq.w	4083c2 <_svfprintf_r+0x12c6>
  408206:	2d65      	cmp	r5, #101	; 0x65
  408208:	f340 80f8 	ble.w	4083fc <_svfprintf_r+0x1300>
  40820c:	2d66      	cmp	r5, #102	; 0x66
  40820e:	9312      	str	r3, [sp, #72]	; 0x48
  408210:	f000 8157 	beq.w	4084c2 <_svfprintf_r+0x13c6>
  408214:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  408216:	9a12      	ldr	r2, [sp, #72]	; 0x48
  408218:	4293      	cmp	r3, r2
  40821a:	f300 8144 	bgt.w	4084a6 <_svfprintf_r+0x13aa>
  40821e:	9b07      	ldr	r3, [sp, #28]
  408220:	07d9      	lsls	r1, r3, #31
  408222:	f100 8173 	bmi.w	40850c <_svfprintf_r+0x1410>
  408226:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
  40822a:	920d      	str	r2, [sp, #52]	; 0x34
  40822c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  40822e:	2a00      	cmp	r2, #0
  408230:	f040 80bc 	bne.w	4083ac <_svfprintf_r+0x12b0>
  408234:	9309      	str	r3, [sp, #36]	; 0x24
  408236:	9b11      	ldr	r3, [sp, #68]	; 0x44
  408238:	9307      	str	r3, [sp, #28]
  40823a:	9211      	str	r2, [sp, #68]	; 0x44
  40823c:	f89d c06f 	ldrb.w	ip, [sp, #111]	; 0x6f
  408240:	f7ff b87c 	b.w	40733c <_svfprintf_r+0x240>
  408244:	9808      	ldr	r0, [sp, #32]
  408246:	2140      	movs	r1, #64	; 0x40
  408248:	f001 fad4 	bl	4097f4 <_malloc_r>
  40824c:	f8c9 0000 	str.w	r0, [r9]
  408250:	f8c9 0010 	str.w	r0, [r9, #16]
  408254:	2800      	cmp	r0, #0
  408256:	f000 818c 	beq.w	408572 <_svfprintf_r+0x1476>
  40825a:	2340      	movs	r3, #64	; 0x40
  40825c:	f8c9 3014 	str.w	r3, [r9, #20]
  408260:	f7fe bf64 	b.w	40712c <_svfprintf_r+0x30>
  408264:	9808      	ldr	r0, [sp, #32]
  408266:	4631      	mov	r1, r6
  408268:	aa23      	add	r2, sp, #140	; 0x8c
  40826a:	f002 fb2f 	bl	40a8cc <__ssprint_r>
  40826e:	2800      	cmp	r0, #0
  408270:	f47f a80a 	bne.w	407288 <_svfprintf_r+0x18c>
  408274:	9d1d      	ldr	r5, [sp, #116]	; 0x74
  408276:	f8dd b094 	ldr.w	fp, [sp, #148]	; 0x94
  40827a:	463c      	mov	r4, r7
  40827c:	e6ff      	b.n	40807e <_svfprintf_r+0xf82>
  40827e:	f04f 0b06 	mov.w	fp, #6
  408282:	e76e      	b.n	408162 <_svfprintf_r+0x1066>
  408284:	0040c0b0 	.word	0x0040c0b0
  408288:	0040c0ac 	.word	0x0040c0ac
  40828c:	0040c0e4 	.word	0x0040c0e4
  408290:	0040c084 	.word	0x0040c084
  408294:	9808      	ldr	r0, [sp, #32]
  408296:	4631      	mov	r1, r6
  408298:	aa23      	add	r2, sp, #140	; 0x8c
  40829a:	f002 fb17 	bl	40a8cc <__ssprint_r>
  40829e:	2800      	cmp	r0, #0
  4082a0:	f47e aff2 	bne.w	407288 <_svfprintf_r+0x18c>
  4082a4:	9925      	ldr	r1, [sp, #148]	; 0x94
  4082a6:	9b24      	ldr	r3, [sp, #144]	; 0x90
  4082a8:	463a      	mov	r2, r7
  4082aa:	9c13      	ldr	r4, [sp, #76]	; 0x4c
  4082ac:	6054      	str	r4, [r2, #4]
  4082ae:	3301      	adds	r3, #1
  4082b0:	eb01 0b04 	add.w	fp, r1, r4
  4082b4:	2b07      	cmp	r3, #7
  4082b6:	9910      	ldr	r1, [sp, #64]	; 0x40
  4082b8:	f8cd b094 	str.w	fp, [sp, #148]	; 0x94
  4082bc:	9324      	str	r3, [sp, #144]	; 0x90
  4082be:	6011      	str	r1, [r2, #0]
  4082c0:	f73f ac5b 	bgt.w	407b7a <_svfprintf_r+0xa7e>
  4082c4:	f102 0408 	add.w	r4, r2, #8
  4082c8:	f7ff b912 	b.w	4074f0 <_svfprintf_r+0x3f4>
  4082cc:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
  4082d0:	f7fe fd9e 	bl	406e10 <strlen>
  4082d4:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
  4082d8:	900d      	str	r0, [sp, #52]	; 0x34
  4082da:	4603      	mov	r3, r0
  4082dc:	f7ff ba1b 	b.w	407716 <_svfprintf_r+0x61a>
  4082e0:	2003      	movs	r0, #3
  4082e2:	a91d      	add	r1, sp, #116	; 0x74
  4082e4:	e88d 0801 	stmia.w	sp, {r0, fp}
  4082e8:	9102      	str	r1, [sp, #8]
  4082ea:	a81e      	add	r0, sp, #120	; 0x78
  4082ec:	a921      	add	r1, sp, #132	; 0x84
  4082ee:	9003      	str	r0, [sp, #12]
  4082f0:	9a09      	ldr	r2, [sp, #36]	; 0x24
  4082f2:	9104      	str	r1, [sp, #16]
  4082f4:	4653      	mov	r3, sl
  4082f6:	9808      	ldr	r0, [sp, #32]
  4082f8:	f000 f9f2 	bl	4086e0 <_dtoa_r>
  4082fc:	46d9      	mov	r9, fp
  4082fe:	9010      	str	r0, [sp, #64]	; 0x40
  408300:	9b10      	ldr	r3, [sp, #64]	; 0x40
  408302:	eb03 0809 	add.w	r8, r3, r9
  408306:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  408308:	2b46      	cmp	r3, #70	; 0x46
  40830a:	f47f af61 	bne.w	4081d0 <_svfprintf_r+0x10d4>
  40830e:	9b10      	ldr	r3, [sp, #64]	; 0x40
  408310:	781b      	ldrb	r3, [r3, #0]
  408312:	2b30      	cmp	r3, #48	; 0x30
  408314:	f000 80e4 	beq.w	4084e0 <_svfprintf_r+0x13e4>
  408318:	9b1d      	ldr	r3, [sp, #116]	; 0x74
  40831a:	4498      	add	r8, r3
  40831c:	e758      	b.n	4081d0 <_svfprintf_r+0x10d4>
  40831e:	9808      	ldr	r0, [sp, #32]
  408320:	4631      	mov	r1, r6
  408322:	aa23      	add	r2, sp, #140	; 0x8c
  408324:	f002 fad2 	bl	40a8cc <__ssprint_r>
  408328:	2800      	cmp	r0, #0
  40832a:	f47e afad 	bne.w	407288 <_svfprintf_r+0x18c>
  40832e:	f8dd b094 	ldr.w	fp, [sp, #148]	; 0x94
  408332:	463c      	mov	r4, r7
  408334:	e4a7      	b.n	407c86 <_svfprintf_r+0xb8a>
  408336:	3301      	adds	r3, #1
  408338:	4429      	add	r1, r5
  40833a:	2b07      	cmp	r3, #7
  40833c:	9125      	str	r1, [sp, #148]	; 0x94
  40833e:	9324      	str	r3, [sp, #144]	; 0x90
  408340:	f8c2 9000 	str.w	r9, [r2]
  408344:	6055      	str	r5, [r2, #4]
  408346:	dca5      	bgt.n	408294 <_svfprintf_r+0x1198>
  408348:	3208      	adds	r2, #8
  40834a:	e7ae      	b.n	4082aa <_svfprintf_r+0x11ae>
  40834c:	9808      	ldr	r0, [sp, #32]
  40834e:	4631      	mov	r1, r6
  408350:	aa23      	add	r2, sp, #140	; 0x8c
  408352:	f002 fabb 	bl	40a8cc <__ssprint_r>
  408356:	2800      	cmp	r0, #0
  408358:	f47e af96 	bne.w	407288 <_svfprintf_r+0x18c>
  40835c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
  40835e:	f8dd b094 	ldr.w	fp, [sp, #148]	; 0x94
  408362:	463c      	mov	r4, r7
  408364:	e597      	b.n	407e96 <_svfprintf_r+0xd9a>
  408366:	4653      	mov	r3, sl
  408368:	2b06      	cmp	r3, #6
  40836a:	bf28      	it	cs
  40836c:	2306      	movcs	r3, #6
  40836e:	930d      	str	r3, [sp, #52]	; 0x34
  408370:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  408374:	f8dd c040 	ldr.w	ip, [sp, #64]	; 0x40
  408378:	9309      	str	r3, [sp, #36]	; 0x24
  40837a:	4b83      	ldr	r3, [pc, #524]	; (408588 <_svfprintf_r+0x148c>)
  40837c:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
  408380:	f8cd c044 	str.w	ip, [sp, #68]	; 0x44
  408384:	f8cd c048 	str.w	ip, [sp, #72]	; 0x48
  408388:	9310      	str	r3, [sp, #64]	; 0x40
  40838a:	f7fe bfd7 	b.w	40733c <_svfprintf_r+0x240>
  40838e:	9808      	ldr	r0, [sp, #32]
  408390:	4631      	mov	r1, r6
  408392:	aa23      	add	r2, sp, #140	; 0x8c
  408394:	f002 fa9a 	bl	40a8cc <__ssprint_r>
  408398:	2800      	cmp	r0, #0
  40839a:	f47e af75 	bne.w	407288 <_svfprintf_r+0x18c>
  40839e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
  4083a0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
  4083a2:	f8dd b094 	ldr.w	fp, [sp, #148]	; 0x94
  4083a6:	1ad3      	subs	r3, r2, r3
  4083a8:	463c      	mov	r4, r7
  4083aa:	e58a      	b.n	407ec2 <_svfprintf_r+0xdc6>
  4083ac:	9309      	str	r3, [sp, #36]	; 0x24
  4083ae:	9b11      	ldr	r3, [sp, #68]	; 0x44
  4083b0:	9307      	str	r3, [sp, #28]
  4083b2:	f04f 0c2d 	mov.w	ip, #45	; 0x2d
  4083b6:	2300      	movs	r3, #0
  4083b8:	f88d c06f 	strb.w	ip, [sp, #111]	; 0x6f
  4083bc:	9311      	str	r3, [sp, #68]	; 0x44
  4083be:	f7fe bfc0 	b.w	407342 <_svfprintf_r+0x246>
  4083c2:	1cda      	adds	r2, r3, #3
  4083c4:	db19      	blt.n	4083fa <_svfprintf_r+0x12fe>
  4083c6:	459b      	cmp	fp, r3
  4083c8:	db17      	blt.n	4083fa <_svfprintf_r+0x12fe>
  4083ca:	9312      	str	r3, [sp, #72]	; 0x48
  4083cc:	2567      	movs	r5, #103	; 0x67
  4083ce:	e721      	b.n	408214 <_svfprintf_r+0x1118>
  4083d0:	f04f 0c2d 	mov.w	ip, #45	; 0x2d
  4083d4:	f88d c06f 	strb.w	ip, [sp, #111]	; 0x6f
  4083d8:	f7ff ba98 	b.w	40790c <_svfprintf_r+0x810>
  4083dc:	4643      	mov	r3, r8
  4083de:	e70a      	b.n	4081f6 <_svfprintf_r+0x10fa>
  4083e0:	ea2a 73ea 	bic.w	r3, sl, sl, asr #31
  4083e4:	9011      	str	r0, [sp, #68]	; 0x44
  4083e6:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
  4083ea:	9012      	str	r0, [sp, #72]	; 0x48
  4083ec:	f89d c06f 	ldrb.w	ip, [sp, #111]	; 0x6f
  4083f0:	9309      	str	r3, [sp, #36]	; 0x24
  4083f2:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
  4083f6:	f7fe bfa1 	b.w	40733c <_svfprintf_r+0x240>
  4083fa:	3d02      	subs	r5, #2
  4083fc:	3b01      	subs	r3, #1
  4083fe:	2b00      	cmp	r3, #0
  408400:	931d      	str	r3, [sp, #116]	; 0x74
  408402:	bfba      	itte	lt
  408404:	425b      	neglt	r3, r3
  408406:	222d      	movlt	r2, #45	; 0x2d
  408408:	222b      	movge	r2, #43	; 0x2b
  40840a:	2b09      	cmp	r3, #9
  40840c:	f88d 507c 	strb.w	r5, [sp, #124]	; 0x7c
  408410:	f88d 207d 	strb.w	r2, [sp, #125]	; 0x7d
  408414:	dd72      	ble.n	4084fc <_svfprintf_r+0x1400>
  408416:	f10d 0e8b 	add.w	lr, sp, #139	; 0x8b
  40841a:	4670      	mov	r0, lr
  40841c:	4a5b      	ldr	r2, [pc, #364]	; (40858c <_svfprintf_r+0x1490>)
  40841e:	fb82 2103 	smull	r2, r1, r2, r3
  408422:	17da      	asrs	r2, r3, #31
  408424:	ebc2 02a1 	rsb	r2, r2, r1, asr #2
  408428:	eb02 0182 	add.w	r1, r2, r2, lsl #2
  40842c:	eba3 0341 	sub.w	r3, r3, r1, lsl #1
  408430:	f103 0130 	add.w	r1, r3, #48	; 0x30
  408434:	2a09      	cmp	r2, #9
  408436:	4613      	mov	r3, r2
  408438:	f800 1d01 	strb.w	r1, [r0, #-1]!
  40843c:	dcee      	bgt.n	40841c <_svfprintf_r+0x1320>
  40843e:	4602      	mov	r2, r0
  408440:	3330      	adds	r3, #48	; 0x30
  408442:	b2d9      	uxtb	r1, r3
  408444:	f802 1d01 	strb.w	r1, [r2, #-1]!
  408448:	4596      	cmp	lr, r2
  40844a:	f240 8099 	bls.w	408580 <_svfprintf_r+0x1484>
  40844e:	f10d 027e 	add.w	r2, sp, #126	; 0x7e
  408452:	4603      	mov	r3, r0
  408454:	e001      	b.n	40845a <_svfprintf_r+0x135e>
  408456:	f813 1b01 	ldrb.w	r1, [r3], #1
  40845a:	f802 1b01 	strb.w	r1, [r2], #1
  40845e:	4573      	cmp	r3, lr
  408460:	d1f9      	bne.n	408456 <_svfprintf_r+0x135a>
  408462:	ab23      	add	r3, sp, #140	; 0x8c
  408464:	1a1b      	subs	r3, r3, r0
  408466:	f10d 027e 	add.w	r2, sp, #126	; 0x7e
  40846a:	4413      	add	r3, r2
  40846c:	aa1f      	add	r2, sp, #124	; 0x7c
  40846e:	1a9b      	subs	r3, r3, r2
  408470:	9a13      	ldr	r2, [sp, #76]	; 0x4c
  408472:	9319      	str	r3, [sp, #100]	; 0x64
  408474:	2a01      	cmp	r2, #1
  408476:	4413      	add	r3, r2
  408478:	930d      	str	r3, [sp, #52]	; 0x34
  40847a:	dd6b      	ble.n	408554 <_svfprintf_r+0x1458>
  40847c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  40847e:	2200      	movs	r2, #0
  408480:	3301      	adds	r3, #1
  408482:	930d      	str	r3, [sp, #52]	; 0x34
  408484:	9212      	str	r2, [sp, #72]	; 0x48
  408486:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  40848a:	e6cf      	b.n	40822c <_svfprintf_r+0x1130>
  40848c:	9808      	ldr	r0, [sp, #32]
  40848e:	4631      	mov	r1, r6
  408490:	aa23      	add	r2, sp, #140	; 0x8c
  408492:	f002 fa1b 	bl	40a8cc <__ssprint_r>
  408496:	2800      	cmp	r0, #0
  408498:	f47e aef6 	bne.w	407288 <_svfprintf_r+0x18c>
  40849c:	9d1d      	ldr	r5, [sp, #116]	; 0x74
  40849e:	9925      	ldr	r1, [sp, #148]	; 0x94
  4084a0:	9b24      	ldr	r3, [sp, #144]	; 0x90
  4084a2:	463a      	mov	r2, r7
  4084a4:	e601      	b.n	4080aa <_svfprintf_r+0xfae>
  4084a6:	9b12      	ldr	r3, [sp, #72]	; 0x48
  4084a8:	2b00      	cmp	r3, #0
  4084aa:	bfd8      	it	le
  4084ac:	f1c3 0802 	rsble	r8, r3, #2
  4084b0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  4084b2:	bfc8      	it	gt
  4084b4:	f04f 0801 	movgt.w	r8, #1
  4084b8:	4443      	add	r3, r8
  4084ba:	930d      	str	r3, [sp, #52]	; 0x34
  4084bc:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  4084c0:	e6b4      	b.n	40822c <_svfprintf_r+0x1130>
  4084c2:	2b00      	cmp	r3, #0
  4084c4:	dd30      	ble.n	408528 <_svfprintf_r+0x142c>
  4084c6:	f1bb 0f00 	cmp.w	fp, #0
  4084ca:	d125      	bne.n	408518 <_svfprintf_r+0x141c>
  4084cc:	9b07      	ldr	r3, [sp, #28]
  4084ce:	07db      	lsls	r3, r3, #31
  4084d0:	d422      	bmi.n	408518 <_svfprintf_r+0x141c>
  4084d2:	9a12      	ldr	r2, [sp, #72]	; 0x48
  4084d4:	920d      	str	r2, [sp, #52]	; 0x34
  4084d6:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
  4084da:	e6a7      	b.n	40822c <_svfprintf_r+0x1130>
  4084dc:	9b21      	ldr	r3, [sp, #132]	; 0x84
  4084de:	e68a      	b.n	4081f6 <_svfprintf_r+0x10fa>
  4084e0:	9809      	ldr	r0, [sp, #36]	; 0x24
  4084e2:	4651      	mov	r1, sl
  4084e4:	2200      	movs	r2, #0
  4084e6:	2300      	movs	r3, #0
  4084e8:	f002 ff14 	bl	40b314 <__aeabi_dcmpeq>
  4084ec:	2800      	cmp	r0, #0
  4084ee:	f47f af13 	bne.w	408318 <_svfprintf_r+0x121c>
  4084f2:	f1c9 0301 	rsb	r3, r9, #1
  4084f6:	931d      	str	r3, [sp, #116]	; 0x74
  4084f8:	4498      	add	r8, r3
  4084fa:	e669      	b.n	4081d0 <_svfprintf_r+0x10d4>
  4084fc:	3330      	adds	r3, #48	; 0x30
  4084fe:	2230      	movs	r2, #48	; 0x30
  408500:	f88d 307f 	strb.w	r3, [sp, #127]	; 0x7f
  408504:	f88d 207e 	strb.w	r2, [sp, #126]	; 0x7e
  408508:	ab20      	add	r3, sp, #128	; 0x80
  40850a:	e7af      	b.n	40846c <_svfprintf_r+0x1370>
  40850c:	9b12      	ldr	r3, [sp, #72]	; 0x48
  40850e:	3301      	adds	r3, #1
  408510:	930d      	str	r3, [sp, #52]	; 0x34
  408512:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  408516:	e689      	b.n	40822c <_svfprintf_r+0x1130>
  408518:	9b12      	ldr	r3, [sp, #72]	; 0x48
  40851a:	f10b 0801 	add.w	r8, fp, #1
  40851e:	4443      	add	r3, r8
  408520:	930d      	str	r3, [sp, #52]	; 0x34
  408522:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  408526:	e681      	b.n	40822c <_svfprintf_r+0x1130>
  408528:	f1bb 0f00 	cmp.w	fp, #0
  40852c:	d11b      	bne.n	408566 <_svfprintf_r+0x146a>
  40852e:	9b07      	ldr	r3, [sp, #28]
  408530:	07d8      	lsls	r0, r3, #31
  408532:	d418      	bmi.n	408566 <_svfprintf_r+0x146a>
  408534:	2301      	movs	r3, #1
  408536:	930d      	str	r3, [sp, #52]	; 0x34
  408538:	e678      	b.n	40822c <_svfprintf_r+0x1130>
  40853a:	9d0e      	ldr	r5, [sp, #56]	; 0x38
  40853c:	f8d5 a000 	ldr.w	sl, [r5]
  408540:	4628      	mov	r0, r5
  408542:	3004      	adds	r0, #4
  408544:	f1ba 0f00 	cmp.w	sl, #0
  408548:	785d      	ldrb	r5, [r3, #1]
  40854a:	900e      	str	r0, [sp, #56]	; 0x38
  40854c:	f6be ae29 	bge.w	4071a2 <_svfprintf_r+0xa6>
  408550:	f7fe be25 	b.w	40719e <_svfprintf_r+0xa2>
  408554:	9b07      	ldr	r3, [sp, #28]
  408556:	f013 0301 	ands.w	r3, r3, #1
  40855a:	d18f      	bne.n	40847c <_svfprintf_r+0x1380>
  40855c:	9312      	str	r3, [sp, #72]	; 0x48
  40855e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  408560:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  408564:	e662      	b.n	40822c <_svfprintf_r+0x1130>
  408566:	f10b 0302 	add.w	r3, fp, #2
  40856a:	930d      	str	r3, [sp, #52]	; 0x34
  40856c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  408570:	e65c      	b.n	40822c <_svfprintf_r+0x1130>
  408572:	9a08      	ldr	r2, [sp, #32]
  408574:	230c      	movs	r3, #12
  408576:	6013      	str	r3, [r2, #0]
  408578:	f04f 30ff 	mov.w	r0, #4294967295
  40857c:	f7fe be8e 	b.w	40729c <_svfprintf_r+0x1a0>
  408580:	f10d 037e 	add.w	r3, sp, #126	; 0x7e
  408584:	e772      	b.n	40846c <_svfprintf_r+0x1370>
  408586:	bf00      	nop
  408588:	0040c0dc 	.word	0x0040c0dc
  40858c:	66666667 	.word	0x66666667

00408590 <register_fini>:
  408590:	4b02      	ldr	r3, [pc, #8]	; (40859c <register_fini+0xc>)
  408592:	b113      	cbz	r3, 40859a <register_fini+0xa>
  408594:	4802      	ldr	r0, [pc, #8]	; (4085a0 <register_fini+0x10>)
  408596:	f000 b805 	b.w	4085a4 <atexit>
  40859a:	4770      	bx	lr
  40859c:	00000000 	.word	0x00000000
  4085a0:	00409575 	.word	0x00409575

004085a4 <atexit>:
  4085a4:	4601      	mov	r1, r0
  4085a6:	2000      	movs	r0, #0
  4085a8:	4602      	mov	r2, r0
  4085aa:	4603      	mov	r3, r0
  4085ac:	f002 ba10 	b.w	40a9d0 <__register_exitproc>

004085b0 <quorem>:
  4085b0:	6902      	ldr	r2, [r0, #16]
  4085b2:	690b      	ldr	r3, [r1, #16]
  4085b4:	4293      	cmp	r3, r2
  4085b6:	f300 808f 	bgt.w	4086d8 <quorem+0x128>
  4085ba:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4085be:	f103 38ff 	add.w	r8, r3, #4294967295
  4085c2:	f101 0714 	add.w	r7, r1, #20
  4085c6:	f100 0b14 	add.w	fp, r0, #20
  4085ca:	f857 2028 	ldr.w	r2, [r7, r8, lsl #2]
  4085ce:	f85b 3028 	ldr.w	r3, [fp, r8, lsl #2]
  4085d2:	ea4f 0488 	mov.w	r4, r8, lsl #2
  4085d6:	b083      	sub	sp, #12
  4085d8:	3201      	adds	r2, #1
  4085da:	fbb3 f9f2 	udiv	r9, r3, r2
  4085de:	eb0b 0304 	add.w	r3, fp, r4
  4085e2:	9400      	str	r4, [sp, #0]
  4085e4:	eb07 0a04 	add.w	sl, r7, r4
  4085e8:	9301      	str	r3, [sp, #4]
  4085ea:	f1b9 0f00 	cmp.w	r9, #0
  4085ee:	d03b      	beq.n	408668 <quorem+0xb8>
  4085f0:	2600      	movs	r6, #0
  4085f2:	4632      	mov	r2, r6
  4085f4:	46bc      	mov	ip, r7
  4085f6:	46de      	mov	lr, fp
  4085f8:	4634      	mov	r4, r6
  4085fa:	f85c 6b04 	ldr.w	r6, [ip], #4
  4085fe:	f8de 5000 	ldr.w	r5, [lr]
  408602:	b2b3      	uxth	r3, r6
  408604:	0c36      	lsrs	r6, r6, #16
  408606:	fb03 4409 	mla	r4, r3, r9, r4
  40860a:	fb06 f609 	mul.w	r6, r6, r9
  40860e:	eb06 4614 	add.w	r6, r6, r4, lsr #16
  408612:	b2a3      	uxth	r3, r4
  408614:	1ad3      	subs	r3, r2, r3
  408616:	b2b4      	uxth	r4, r6
  408618:	fa13 f385 	uxtah	r3, r3, r5
  40861c:	ebc4 4415 	rsb	r4, r4, r5, lsr #16
  408620:	eb04 4423 	add.w	r4, r4, r3, asr #16
  408624:	b29b      	uxth	r3, r3
  408626:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
  40862a:	45e2      	cmp	sl, ip
  40862c:	ea4f 4224 	mov.w	r2, r4, asr #16
  408630:	f84e 3b04 	str.w	r3, [lr], #4
  408634:	ea4f 4416 	mov.w	r4, r6, lsr #16
  408638:	d2df      	bcs.n	4085fa <quorem+0x4a>
  40863a:	9b00      	ldr	r3, [sp, #0]
  40863c:	f85b 3003 	ldr.w	r3, [fp, r3]
  408640:	b993      	cbnz	r3, 408668 <quorem+0xb8>
  408642:	9c01      	ldr	r4, [sp, #4]
  408644:	1f23      	subs	r3, r4, #4
  408646:	459b      	cmp	fp, r3
  408648:	d20c      	bcs.n	408664 <quorem+0xb4>
  40864a:	f854 3c04 	ldr.w	r3, [r4, #-4]
  40864e:	b94b      	cbnz	r3, 408664 <quorem+0xb4>
  408650:	f1a4 0308 	sub.w	r3, r4, #8
  408654:	e002      	b.n	40865c <quorem+0xac>
  408656:	681a      	ldr	r2, [r3, #0]
  408658:	3b04      	subs	r3, #4
  40865a:	b91a      	cbnz	r2, 408664 <quorem+0xb4>
  40865c:	459b      	cmp	fp, r3
  40865e:	f108 38ff 	add.w	r8, r8, #4294967295
  408662:	d3f8      	bcc.n	408656 <quorem+0xa6>
  408664:	f8c0 8010 	str.w	r8, [r0, #16]
  408668:	4604      	mov	r4, r0
  40866a:	f001 fe11 	bl	40a290 <__mcmp>
  40866e:	2800      	cmp	r0, #0
  408670:	db2e      	blt.n	4086d0 <quorem+0x120>
  408672:	f109 0901 	add.w	r9, r9, #1
  408676:	465d      	mov	r5, fp
  408678:	2300      	movs	r3, #0
  40867a:	f857 1b04 	ldr.w	r1, [r7], #4
  40867e:	6828      	ldr	r0, [r5, #0]
  408680:	b28a      	uxth	r2, r1
  408682:	1a9a      	subs	r2, r3, r2
  408684:	0c09      	lsrs	r1, r1, #16
  408686:	fa12 f280 	uxtah	r2, r2, r0
  40868a:	ebc1 4310 	rsb	r3, r1, r0, lsr #16
  40868e:	eb03 4322 	add.w	r3, r3, r2, asr #16
  408692:	b291      	uxth	r1, r2
  408694:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
  408698:	45ba      	cmp	sl, r7
  40869a:	f845 1b04 	str.w	r1, [r5], #4
  40869e:	ea4f 4323 	mov.w	r3, r3, asr #16
  4086a2:	d2ea      	bcs.n	40867a <quorem+0xca>
  4086a4:	f85b 2028 	ldr.w	r2, [fp, r8, lsl #2]
  4086a8:	eb0b 0388 	add.w	r3, fp, r8, lsl #2
  4086ac:	b982      	cbnz	r2, 4086d0 <quorem+0x120>
  4086ae:	1f1a      	subs	r2, r3, #4
  4086b0:	4593      	cmp	fp, r2
  4086b2:	d20b      	bcs.n	4086cc <quorem+0x11c>
  4086b4:	f853 2c04 	ldr.w	r2, [r3, #-4]
  4086b8:	b942      	cbnz	r2, 4086cc <quorem+0x11c>
  4086ba:	3b08      	subs	r3, #8
  4086bc:	e002      	b.n	4086c4 <quorem+0x114>
  4086be:	681a      	ldr	r2, [r3, #0]
  4086c0:	3b04      	subs	r3, #4
  4086c2:	b91a      	cbnz	r2, 4086cc <quorem+0x11c>
  4086c4:	459b      	cmp	fp, r3
  4086c6:	f108 38ff 	add.w	r8, r8, #4294967295
  4086ca:	d3f8      	bcc.n	4086be <quorem+0x10e>
  4086cc:	f8c4 8010 	str.w	r8, [r4, #16]
  4086d0:	4648      	mov	r0, r9
  4086d2:	b003      	add	sp, #12
  4086d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4086d8:	2000      	movs	r0, #0
  4086da:	4770      	bx	lr
  4086dc:	0000      	movs	r0, r0
	...

004086e0 <_dtoa_r>:
  4086e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4086e4:	6c01      	ldr	r1, [r0, #64]	; 0x40
  4086e6:	b097      	sub	sp, #92	; 0x5c
  4086e8:	4604      	mov	r4, r0
  4086ea:	9d23      	ldr	r5, [sp, #140]	; 0x8c
  4086ec:	e9cd 2302 	strd	r2, r3, [sp, #8]
  4086f0:	b141      	cbz	r1, 408704 <_dtoa_r+0x24>
  4086f2:	6c42      	ldr	r2, [r0, #68]	; 0x44
  4086f4:	604a      	str	r2, [r1, #4]
  4086f6:	2301      	movs	r3, #1
  4086f8:	4093      	lsls	r3, r2
  4086fa:	608b      	str	r3, [r1, #8]
  4086fc:	f001 fbe4 	bl	409ec8 <_Bfree>
  408700:	2300      	movs	r3, #0
  408702:	6423      	str	r3, [r4, #64]	; 0x40
  408704:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  408708:	2b00      	cmp	r3, #0
  40870a:	4699      	mov	r9, r3
  40870c:	db36      	blt.n	40877c <_dtoa_r+0x9c>
  40870e:	2300      	movs	r3, #0
  408710:	602b      	str	r3, [r5, #0]
  408712:	4ba5      	ldr	r3, [pc, #660]	; (4089a8 <_dtoa_r+0x2c8>)
  408714:	461a      	mov	r2, r3
  408716:	ea09 0303 	and.w	r3, r9, r3
  40871a:	4293      	cmp	r3, r2
  40871c:	d017      	beq.n	40874e <_dtoa_r+0x6e>
  40871e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
  408722:	2200      	movs	r2, #0
  408724:	4630      	mov	r0, r6
  408726:	4639      	mov	r1, r7
  408728:	2300      	movs	r3, #0
  40872a:	f002 fdf3 	bl	40b314 <__aeabi_dcmpeq>
  40872e:	4680      	mov	r8, r0
  408730:	2800      	cmp	r0, #0
  408732:	d02b      	beq.n	40878c <_dtoa_r+0xac>
  408734:	9a22      	ldr	r2, [sp, #136]	; 0x88
  408736:	2301      	movs	r3, #1
  408738:	6013      	str	r3, [r2, #0]
  40873a:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40873c:	2b00      	cmp	r3, #0
  40873e:	f000 80cb 	beq.w	4088d8 <_dtoa_r+0x1f8>
  408742:	489a      	ldr	r0, [pc, #616]	; (4089ac <_dtoa_r+0x2cc>)
  408744:	6018      	str	r0, [r3, #0]
  408746:	3801      	subs	r0, #1
  408748:	b017      	add	sp, #92	; 0x5c
  40874a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40874e:	9a22      	ldr	r2, [sp, #136]	; 0x88
  408750:	f242 730f 	movw	r3, #9999	; 0x270f
  408754:	6013      	str	r3, [r2, #0]
  408756:	9b02      	ldr	r3, [sp, #8]
  408758:	2b00      	cmp	r3, #0
  40875a:	f000 80a6 	beq.w	4088aa <_dtoa_r+0x1ca>
  40875e:	4894      	ldr	r0, [pc, #592]	; (4089b0 <_dtoa_r+0x2d0>)
  408760:	9b24      	ldr	r3, [sp, #144]	; 0x90
  408762:	2b00      	cmp	r3, #0
  408764:	d0f0      	beq.n	408748 <_dtoa_r+0x68>
  408766:	78c3      	ldrb	r3, [r0, #3]
  408768:	2b00      	cmp	r3, #0
  40876a:	f000 80b7 	beq.w	4088dc <_dtoa_r+0x1fc>
  40876e:	f100 0308 	add.w	r3, r0, #8
  408772:	9a24      	ldr	r2, [sp, #144]	; 0x90
  408774:	6013      	str	r3, [r2, #0]
  408776:	b017      	add	sp, #92	; 0x5c
  408778:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40877c:	9a03      	ldr	r2, [sp, #12]
  40877e:	2301      	movs	r3, #1
  408780:	f022 4900 	bic.w	r9, r2, #2147483648	; 0x80000000
  408784:	602b      	str	r3, [r5, #0]
  408786:	f8cd 900c 	str.w	r9, [sp, #12]
  40878a:	e7c2      	b.n	408712 <_dtoa_r+0x32>
  40878c:	aa15      	add	r2, sp, #84	; 0x54
  40878e:	ab14      	add	r3, sp, #80	; 0x50
  408790:	e88d 000c 	stmia.w	sp, {r2, r3}
  408794:	4620      	mov	r0, r4
  408796:	4632      	mov	r2, r6
  408798:	463b      	mov	r3, r7
  40879a:	f001 fe07 	bl	40a3ac <__d2b>
  40879e:	ea5f 5519 	movs.w	r5, r9, lsr #20
  4087a2:	4683      	mov	fp, r0
  4087a4:	f040 808a 	bne.w	4088bc <_dtoa_r+0x1dc>
  4087a8:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
  4087ac:	9d15      	ldr	r5, [sp, #84]	; 0x54
  4087ae:	f46f 6382 	mvn.w	r3, #1040	; 0x410
  4087b2:	4445      	add	r5, r8
  4087b4:	429d      	cmp	r5, r3
  4087b6:	f2c0 8297 	blt.w	408ce8 <_dtoa_r+0x608>
  4087ba:	4a7e      	ldr	r2, [pc, #504]	; (4089b4 <_dtoa_r+0x2d4>)
  4087bc:	1b52      	subs	r2, r2, r5
  4087be:	fa09 f902 	lsl.w	r9, r9, r2
  4087c2:	9a02      	ldr	r2, [sp, #8]
  4087c4:	f205 4312 	addw	r3, r5, #1042	; 0x412
  4087c8:	fa22 f003 	lsr.w	r0, r2, r3
  4087cc:	ea49 0000 	orr.w	r0, r9, r0
  4087d0:	f002 fac2 	bl	40ad58 <__aeabi_ui2d>
  4087d4:	2301      	movs	r3, #1
  4087d6:	3d01      	subs	r5, #1
  4087d8:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
  4087dc:	930d      	str	r3, [sp, #52]	; 0x34
  4087de:	2200      	movs	r2, #0
  4087e0:	4b75      	ldr	r3, [pc, #468]	; (4089b8 <_dtoa_r+0x2d8>)
  4087e2:	f002 f97b 	bl	40aadc <__aeabi_dsub>
  4087e6:	a36a      	add	r3, pc, #424	; (adr r3, 408990 <_dtoa_r+0x2b0>)
  4087e8:	e9d3 2300 	ldrd	r2, r3, [r3]
  4087ec:	f002 fb2a 	bl	40ae44 <__aeabi_dmul>
  4087f0:	a369      	add	r3, pc, #420	; (adr r3, 408998 <_dtoa_r+0x2b8>)
  4087f2:	e9d3 2300 	ldrd	r2, r3, [r3]
  4087f6:	f002 f973 	bl	40aae0 <__adddf3>
  4087fa:	4606      	mov	r6, r0
  4087fc:	4628      	mov	r0, r5
  4087fe:	460f      	mov	r7, r1
  408800:	f002 faba 	bl	40ad78 <__aeabi_i2d>
  408804:	a366      	add	r3, pc, #408	; (adr r3, 4089a0 <_dtoa_r+0x2c0>)
  408806:	e9d3 2300 	ldrd	r2, r3, [r3]
  40880a:	f002 fb1b 	bl	40ae44 <__aeabi_dmul>
  40880e:	4602      	mov	r2, r0
  408810:	460b      	mov	r3, r1
  408812:	4630      	mov	r0, r6
  408814:	4639      	mov	r1, r7
  408816:	f002 f963 	bl	40aae0 <__adddf3>
  40881a:	4606      	mov	r6, r0
  40881c:	460f      	mov	r7, r1
  40881e:	f002 fdab 	bl	40b378 <__aeabi_d2iz>
  408822:	4639      	mov	r1, r7
  408824:	9004      	str	r0, [sp, #16]
  408826:	2200      	movs	r2, #0
  408828:	4630      	mov	r0, r6
  40882a:	2300      	movs	r3, #0
  40882c:	f002 fd7c 	bl	40b328 <__aeabi_dcmplt>
  408830:	2800      	cmp	r0, #0
  408832:	f040 81a6 	bne.w	408b82 <_dtoa_r+0x4a2>
  408836:	9b04      	ldr	r3, [sp, #16]
  408838:	2b16      	cmp	r3, #22
  40883a:	f200 819f 	bhi.w	408b7c <_dtoa_r+0x49c>
  40883e:	9a04      	ldr	r2, [sp, #16]
  408840:	4b5e      	ldr	r3, [pc, #376]	; (4089bc <_dtoa_r+0x2dc>)
  408842:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  408846:	e9d3 0100 	ldrd	r0, r1, [r3]
  40884a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  40884e:	f002 fd89 	bl	40b364 <__aeabi_dcmpgt>
  408852:	2800      	cmp	r0, #0
  408854:	f000 824e 	beq.w	408cf4 <_dtoa_r+0x614>
  408858:	9b04      	ldr	r3, [sp, #16]
  40885a:	3b01      	subs	r3, #1
  40885c:	9304      	str	r3, [sp, #16]
  40885e:	2300      	movs	r3, #0
  408860:	930b      	str	r3, [sp, #44]	; 0x2c
  408862:	ebc5 0508 	rsb	r5, r5, r8
  408866:	f1b5 0a01 	subs.w	sl, r5, #1
  40886a:	f100 81a1 	bmi.w	408bb0 <_dtoa_r+0x4d0>
  40886e:	2300      	movs	r3, #0
  408870:	9305      	str	r3, [sp, #20]
  408872:	9b04      	ldr	r3, [sp, #16]
  408874:	2b00      	cmp	r3, #0
  408876:	f2c0 8192 	blt.w	408b9e <_dtoa_r+0x4be>
  40887a:	449a      	add	sl, r3
  40887c:	930a      	str	r3, [sp, #40]	; 0x28
  40887e:	2300      	movs	r3, #0
  408880:	9308      	str	r3, [sp, #32]
  408882:	9b20      	ldr	r3, [sp, #128]	; 0x80
  408884:	2b09      	cmp	r3, #9
  408886:	d82b      	bhi.n	4088e0 <_dtoa_r+0x200>
  408888:	2b05      	cmp	r3, #5
  40888a:	f340 8670 	ble.w	40956e <_dtoa_r+0xe8e>
  40888e:	3b04      	subs	r3, #4
  408890:	9320      	str	r3, [sp, #128]	; 0x80
  408892:	2500      	movs	r5, #0
  408894:	9b20      	ldr	r3, [sp, #128]	; 0x80
  408896:	3b02      	subs	r3, #2
  408898:	2b03      	cmp	r3, #3
  40889a:	f200 864e 	bhi.w	40953a <_dtoa_r+0xe5a>
  40889e:	e8df f013 	tbh	[pc, r3, lsl #1]
  4088a2:	03cc      	.short	0x03cc
  4088a4:	02b203be 	.word	0x02b203be
  4088a8:	0663      	.short	0x0663
  4088aa:	4b41      	ldr	r3, [pc, #260]	; (4089b0 <_dtoa_r+0x2d0>)
  4088ac:	4a44      	ldr	r2, [pc, #272]	; (4089c0 <_dtoa_r+0x2e0>)
  4088ae:	f3c9 0013 	ubfx	r0, r9, #0, #20
  4088b2:	2800      	cmp	r0, #0
  4088b4:	bf14      	ite	ne
  4088b6:	4618      	movne	r0, r3
  4088b8:	4610      	moveq	r0, r2
  4088ba:	e751      	b.n	408760 <_dtoa_r+0x80>
  4088bc:	f3c7 0313 	ubfx	r3, r7, #0, #20
  4088c0:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
  4088c4:	f8cd 8034 	str.w	r8, [sp, #52]	; 0x34
  4088c8:	4630      	mov	r0, r6
  4088ca:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
  4088ce:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
  4088d2:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
  4088d6:	e782      	b.n	4087de <_dtoa_r+0xfe>
  4088d8:	483a      	ldr	r0, [pc, #232]	; (4089c4 <_dtoa_r+0x2e4>)
  4088da:	e735      	b.n	408748 <_dtoa_r+0x68>
  4088dc:	1cc3      	adds	r3, r0, #3
  4088de:	e748      	b.n	408772 <_dtoa_r+0x92>
  4088e0:	2100      	movs	r1, #0
  4088e2:	6461      	str	r1, [r4, #68]	; 0x44
  4088e4:	4620      	mov	r0, r4
  4088e6:	9120      	str	r1, [sp, #128]	; 0x80
  4088e8:	f001 fac8 	bl	409e7c <_Balloc>
  4088ec:	f04f 33ff 	mov.w	r3, #4294967295
  4088f0:	9306      	str	r3, [sp, #24]
  4088f2:	9a20      	ldr	r2, [sp, #128]	; 0x80
  4088f4:	930c      	str	r3, [sp, #48]	; 0x30
  4088f6:	2301      	movs	r3, #1
  4088f8:	9007      	str	r0, [sp, #28]
  4088fa:	9221      	str	r2, [sp, #132]	; 0x84
  4088fc:	6420      	str	r0, [r4, #64]	; 0x40
  4088fe:	9309      	str	r3, [sp, #36]	; 0x24
  408900:	9b15      	ldr	r3, [sp, #84]	; 0x54
  408902:	2b00      	cmp	r3, #0
  408904:	f2c0 80d2 	blt.w	408aac <_dtoa_r+0x3cc>
  408908:	9a04      	ldr	r2, [sp, #16]
  40890a:	2a0e      	cmp	r2, #14
  40890c:	f300 80ce 	bgt.w	408aac <_dtoa_r+0x3cc>
  408910:	4b2a      	ldr	r3, [pc, #168]	; (4089bc <_dtoa_r+0x2dc>)
  408912:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  408916:	e9d3 8900 	ldrd	r8, r9, [r3]
  40891a:	9b21      	ldr	r3, [sp, #132]	; 0x84
  40891c:	2b00      	cmp	r3, #0
  40891e:	f2c0 838f 	blt.w	409040 <_dtoa_r+0x960>
  408922:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
  408926:	4642      	mov	r2, r8
  408928:	464b      	mov	r3, r9
  40892a:	4630      	mov	r0, r6
  40892c:	4639      	mov	r1, r7
  40892e:	f002 fbb3 	bl	40b098 <__aeabi_ddiv>
  408932:	f002 fd21 	bl	40b378 <__aeabi_d2iz>
  408936:	4682      	mov	sl, r0
  408938:	f002 fa1e 	bl	40ad78 <__aeabi_i2d>
  40893c:	4642      	mov	r2, r8
  40893e:	464b      	mov	r3, r9
  408940:	f002 fa80 	bl	40ae44 <__aeabi_dmul>
  408944:	460b      	mov	r3, r1
  408946:	4602      	mov	r2, r0
  408948:	4639      	mov	r1, r7
  40894a:	4630      	mov	r0, r6
  40894c:	f002 f8c6 	bl	40aadc <__aeabi_dsub>
  408950:	9d07      	ldr	r5, [sp, #28]
  408952:	f10a 0330 	add.w	r3, sl, #48	; 0x30
  408956:	702b      	strb	r3, [r5, #0]
  408958:	9b06      	ldr	r3, [sp, #24]
  40895a:	2b01      	cmp	r3, #1
  40895c:	4606      	mov	r6, r0
  40895e:	460f      	mov	r7, r1
  408960:	f105 0501 	add.w	r5, r5, #1
  408964:	d062      	beq.n	408a2c <_dtoa_r+0x34c>
  408966:	2200      	movs	r2, #0
  408968:	4b17      	ldr	r3, [pc, #92]	; (4089c8 <_dtoa_r+0x2e8>)
  40896a:	f002 fa6b 	bl	40ae44 <__aeabi_dmul>
  40896e:	2200      	movs	r2, #0
  408970:	2300      	movs	r3, #0
  408972:	4606      	mov	r6, r0
  408974:	460f      	mov	r7, r1
  408976:	f002 fccd 	bl	40b314 <__aeabi_dcmpeq>
  40897a:	2800      	cmp	r0, #0
  40897c:	f040 8083 	bne.w	408a86 <_dtoa_r+0x3a6>
  408980:	f8cd b008 	str.w	fp, [sp, #8]
  408984:	9405      	str	r4, [sp, #20]
  408986:	f8dd b01c 	ldr.w	fp, [sp, #28]
  40898a:	9c06      	ldr	r4, [sp, #24]
  40898c:	e029      	b.n	4089e2 <_dtoa_r+0x302>
  40898e:	bf00      	nop
  408990:	636f4361 	.word	0x636f4361
  408994:	3fd287a7 	.word	0x3fd287a7
  408998:	8b60c8b3 	.word	0x8b60c8b3
  40899c:	3fc68a28 	.word	0x3fc68a28
  4089a0:	509f79fb 	.word	0x509f79fb
  4089a4:	3fd34413 	.word	0x3fd34413
  4089a8:	7ff00000 	.word	0x7ff00000
  4089ac:	0040c0e5 	.word	0x0040c0e5
  4089b0:	0040c1f8 	.word	0x0040c1f8
  4089b4:	fffffc0e 	.word	0xfffffc0e
  4089b8:	3ff80000 	.word	0x3ff80000
  4089bc:	0040c208 	.word	0x0040c208
  4089c0:	0040c1ec 	.word	0x0040c1ec
  4089c4:	0040c0e4 	.word	0x0040c0e4
  4089c8:	40240000 	.word	0x40240000
  4089cc:	f002 fa3a 	bl	40ae44 <__aeabi_dmul>
  4089d0:	2200      	movs	r2, #0
  4089d2:	2300      	movs	r3, #0
  4089d4:	4606      	mov	r6, r0
  4089d6:	460f      	mov	r7, r1
  4089d8:	f002 fc9c 	bl	40b314 <__aeabi_dcmpeq>
  4089dc:	2800      	cmp	r0, #0
  4089de:	f040 83de 	bne.w	40919e <_dtoa_r+0xabe>
  4089e2:	4642      	mov	r2, r8
  4089e4:	464b      	mov	r3, r9
  4089e6:	4630      	mov	r0, r6
  4089e8:	4639      	mov	r1, r7
  4089ea:	f002 fb55 	bl	40b098 <__aeabi_ddiv>
  4089ee:	f002 fcc3 	bl	40b378 <__aeabi_d2iz>
  4089f2:	4682      	mov	sl, r0
  4089f4:	f002 f9c0 	bl	40ad78 <__aeabi_i2d>
  4089f8:	4642      	mov	r2, r8
  4089fa:	464b      	mov	r3, r9
  4089fc:	f002 fa22 	bl	40ae44 <__aeabi_dmul>
  408a00:	4602      	mov	r2, r0
  408a02:	460b      	mov	r3, r1
  408a04:	4630      	mov	r0, r6
  408a06:	4639      	mov	r1, r7
  408a08:	f002 f868 	bl	40aadc <__aeabi_dsub>
  408a0c:	f10a 0e30 	add.w	lr, sl, #48	; 0x30
  408a10:	f805 eb01 	strb.w	lr, [r5], #1
  408a14:	ebcb 0e05 	rsb	lr, fp, r5
  408a18:	4574      	cmp	r4, lr
  408a1a:	4606      	mov	r6, r0
  408a1c:	460f      	mov	r7, r1
  408a1e:	f04f 0200 	mov.w	r2, #0
  408a22:	4bb5      	ldr	r3, [pc, #724]	; (408cf8 <_dtoa_r+0x618>)
  408a24:	d1d2      	bne.n	4089cc <_dtoa_r+0x2ec>
  408a26:	f8dd b008 	ldr.w	fp, [sp, #8]
  408a2a:	9c05      	ldr	r4, [sp, #20]
  408a2c:	4632      	mov	r2, r6
  408a2e:	463b      	mov	r3, r7
  408a30:	4630      	mov	r0, r6
  408a32:	4639      	mov	r1, r7
  408a34:	f002 f854 	bl	40aae0 <__adddf3>
  408a38:	4606      	mov	r6, r0
  408a3a:	460f      	mov	r7, r1
  408a3c:	4640      	mov	r0, r8
  408a3e:	4649      	mov	r1, r9
  408a40:	4632      	mov	r2, r6
  408a42:	463b      	mov	r3, r7
  408a44:	f002 fc70 	bl	40b328 <__aeabi_dcmplt>
  408a48:	b948      	cbnz	r0, 408a5e <_dtoa_r+0x37e>
  408a4a:	4640      	mov	r0, r8
  408a4c:	4649      	mov	r1, r9
  408a4e:	4632      	mov	r2, r6
  408a50:	463b      	mov	r3, r7
  408a52:	f002 fc5f 	bl	40b314 <__aeabi_dcmpeq>
  408a56:	b1b0      	cbz	r0, 408a86 <_dtoa_r+0x3a6>
  408a58:	f01a 0f01 	tst.w	sl, #1
  408a5c:	d013      	beq.n	408a86 <_dtoa_r+0x3a6>
  408a5e:	f815 8c01 	ldrb.w	r8, [r5, #-1]
  408a62:	9907      	ldr	r1, [sp, #28]
  408a64:	1e6b      	subs	r3, r5, #1
  408a66:	e004      	b.n	408a72 <_dtoa_r+0x392>
  408a68:	428b      	cmp	r3, r1
  408a6a:	f000 8440 	beq.w	4092ee <_dtoa_r+0xc0e>
  408a6e:	f813 8d01 	ldrb.w	r8, [r3, #-1]!
  408a72:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
  408a76:	f103 0501 	add.w	r5, r3, #1
  408a7a:	461a      	mov	r2, r3
  408a7c:	d0f4      	beq.n	408a68 <_dtoa_r+0x388>
  408a7e:	f108 0301 	add.w	r3, r8, #1
  408a82:	b2db      	uxtb	r3, r3
  408a84:	7013      	strb	r3, [r2, #0]
  408a86:	4620      	mov	r0, r4
  408a88:	4659      	mov	r1, fp
  408a8a:	f001 fa1d 	bl	409ec8 <_Bfree>
  408a8e:	2200      	movs	r2, #0
  408a90:	9b04      	ldr	r3, [sp, #16]
  408a92:	702a      	strb	r2, [r5, #0]
  408a94:	9a22      	ldr	r2, [sp, #136]	; 0x88
  408a96:	3301      	adds	r3, #1
  408a98:	6013      	str	r3, [r2, #0]
  408a9a:	9b24      	ldr	r3, [sp, #144]	; 0x90
  408a9c:	2b00      	cmp	r3, #0
  408a9e:	f000 8345 	beq.w	40912c <_dtoa_r+0xa4c>
  408aa2:	9807      	ldr	r0, [sp, #28]
  408aa4:	601d      	str	r5, [r3, #0]
  408aa6:	b017      	add	sp, #92	; 0x5c
  408aa8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  408aac:	9a09      	ldr	r2, [sp, #36]	; 0x24
  408aae:	2a00      	cmp	r2, #0
  408ab0:	f000 8084 	beq.w	408bbc <_dtoa_r+0x4dc>
  408ab4:	9a20      	ldr	r2, [sp, #128]	; 0x80
  408ab6:	2a01      	cmp	r2, #1
  408ab8:	f340 8304 	ble.w	4090c4 <_dtoa_r+0x9e4>
  408abc:	9b06      	ldr	r3, [sp, #24]
  408abe:	1e5f      	subs	r7, r3, #1
  408ac0:	9b08      	ldr	r3, [sp, #32]
  408ac2:	42bb      	cmp	r3, r7
  408ac4:	f2c0 83a9 	blt.w	40921a <_dtoa_r+0xb3a>
  408ac8:	1bdf      	subs	r7, r3, r7
  408aca:	9b06      	ldr	r3, [sp, #24]
  408acc:	2b00      	cmp	r3, #0
  408ace:	f2c0 849c 	blt.w	40940a <_dtoa_r+0xd2a>
  408ad2:	9d05      	ldr	r5, [sp, #20]
  408ad4:	9b06      	ldr	r3, [sp, #24]
  408ad6:	9a05      	ldr	r2, [sp, #20]
  408ad8:	4620      	mov	r0, r4
  408ada:	441a      	add	r2, r3
  408adc:	2101      	movs	r1, #1
  408ade:	9205      	str	r2, [sp, #20]
  408ae0:	449a      	add	sl, r3
  408ae2:	f001 fa8b 	bl	409ffc <__i2b>
  408ae6:	4606      	mov	r6, r0
  408ae8:	b165      	cbz	r5, 408b04 <_dtoa_r+0x424>
  408aea:	f1ba 0f00 	cmp.w	sl, #0
  408aee:	dd09      	ble.n	408b04 <_dtoa_r+0x424>
  408af0:	45aa      	cmp	sl, r5
  408af2:	9a05      	ldr	r2, [sp, #20]
  408af4:	4653      	mov	r3, sl
  408af6:	bfa8      	it	ge
  408af8:	462b      	movge	r3, r5
  408afa:	1ad2      	subs	r2, r2, r3
  408afc:	9205      	str	r2, [sp, #20]
  408afe:	1aed      	subs	r5, r5, r3
  408b00:	ebc3 0a0a 	rsb	sl, r3, sl
  408b04:	9b08      	ldr	r3, [sp, #32]
  408b06:	2b00      	cmp	r3, #0
  408b08:	dd1a      	ble.n	408b40 <_dtoa_r+0x460>
  408b0a:	9b09      	ldr	r3, [sp, #36]	; 0x24
  408b0c:	2b00      	cmp	r3, #0
  408b0e:	f000 837d 	beq.w	40920c <_dtoa_r+0xb2c>
  408b12:	2f00      	cmp	r7, #0
  408b14:	dd10      	ble.n	408b38 <_dtoa_r+0x458>
  408b16:	4631      	mov	r1, r6
  408b18:	463a      	mov	r2, r7
  408b1a:	4620      	mov	r0, r4
  408b1c:	f001 fb12 	bl	40a144 <__pow5mult>
  408b20:	4606      	mov	r6, r0
  408b22:	465a      	mov	r2, fp
  408b24:	4631      	mov	r1, r6
  408b26:	4620      	mov	r0, r4
  408b28:	f001 fa72 	bl	40a010 <__multiply>
  408b2c:	4659      	mov	r1, fp
  408b2e:	4680      	mov	r8, r0
  408b30:	4620      	mov	r0, r4
  408b32:	f001 f9c9 	bl	409ec8 <_Bfree>
  408b36:	46c3      	mov	fp, r8
  408b38:	9b08      	ldr	r3, [sp, #32]
  408b3a:	1bda      	subs	r2, r3, r7
  408b3c:	f040 82a2 	bne.w	409084 <_dtoa_r+0x9a4>
  408b40:	4620      	mov	r0, r4
  408b42:	2101      	movs	r1, #1
  408b44:	f001 fa5a 	bl	409ffc <__i2b>
  408b48:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  408b4a:	2b00      	cmp	r3, #0
  408b4c:	4680      	mov	r8, r0
  408b4e:	dd39      	ble.n	408bc4 <_dtoa_r+0x4e4>
  408b50:	4601      	mov	r1, r0
  408b52:	461a      	mov	r2, r3
  408b54:	4620      	mov	r0, r4
  408b56:	f001 faf5 	bl	40a144 <__pow5mult>
  408b5a:	9b20      	ldr	r3, [sp, #128]	; 0x80
  408b5c:	2b01      	cmp	r3, #1
  408b5e:	4680      	mov	r8, r0
  408b60:	f340 8296 	ble.w	409090 <_dtoa_r+0x9b0>
  408b64:	f04f 0900 	mov.w	r9, #0
  408b68:	f8d8 3010 	ldr.w	r3, [r8, #16]
  408b6c:	eb08 0383 	add.w	r3, r8, r3, lsl #2
  408b70:	6918      	ldr	r0, [r3, #16]
  408b72:	f001 f9f5 	bl	409f60 <__hi0bits>
  408b76:	f1c0 0020 	rsb	r0, r0, #32
  408b7a:	e02d      	b.n	408bd8 <_dtoa_r+0x4f8>
  408b7c:	2301      	movs	r3, #1
  408b7e:	930b      	str	r3, [sp, #44]	; 0x2c
  408b80:	e66f      	b.n	408862 <_dtoa_r+0x182>
  408b82:	9804      	ldr	r0, [sp, #16]
  408b84:	f002 f8f8 	bl	40ad78 <__aeabi_i2d>
  408b88:	4632      	mov	r2, r6
  408b8a:	463b      	mov	r3, r7
  408b8c:	f002 fbc2 	bl	40b314 <__aeabi_dcmpeq>
  408b90:	2800      	cmp	r0, #0
  408b92:	f47f ae50 	bne.w	408836 <_dtoa_r+0x156>
  408b96:	9b04      	ldr	r3, [sp, #16]
  408b98:	3b01      	subs	r3, #1
  408b9a:	9304      	str	r3, [sp, #16]
  408b9c:	e64b      	b.n	408836 <_dtoa_r+0x156>
  408b9e:	9a05      	ldr	r2, [sp, #20]
  408ba0:	9b04      	ldr	r3, [sp, #16]
  408ba2:	1ad2      	subs	r2, r2, r3
  408ba4:	425b      	negs	r3, r3
  408ba6:	9308      	str	r3, [sp, #32]
  408ba8:	2300      	movs	r3, #0
  408baa:	9205      	str	r2, [sp, #20]
  408bac:	930a      	str	r3, [sp, #40]	; 0x28
  408bae:	e668      	b.n	408882 <_dtoa_r+0x1a2>
  408bb0:	f1ca 0300 	rsb	r3, sl, #0
  408bb4:	9305      	str	r3, [sp, #20]
  408bb6:	f04f 0a00 	mov.w	sl, #0
  408bba:	e65a      	b.n	408872 <_dtoa_r+0x192>
  408bbc:	9f08      	ldr	r7, [sp, #32]
  408bbe:	9d05      	ldr	r5, [sp, #20]
  408bc0:	9e09      	ldr	r6, [sp, #36]	; 0x24
  408bc2:	e791      	b.n	408ae8 <_dtoa_r+0x408>
  408bc4:	9b20      	ldr	r3, [sp, #128]	; 0x80
  408bc6:	2b01      	cmp	r3, #1
  408bc8:	f340 82b3 	ble.w	409132 <_dtoa_r+0xa52>
  408bcc:	f04f 0900 	mov.w	r9, #0
  408bd0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  408bd2:	2b00      	cmp	r3, #0
  408bd4:	d1c8      	bne.n	408b68 <_dtoa_r+0x488>
  408bd6:	2001      	movs	r0, #1
  408bd8:	4450      	add	r0, sl
  408bda:	f010 001f 	ands.w	r0, r0, #31
  408bde:	f000 8081 	beq.w	408ce4 <_dtoa_r+0x604>
  408be2:	f1c0 0320 	rsb	r3, r0, #32
  408be6:	2b04      	cmp	r3, #4
  408be8:	f340 84b8 	ble.w	40955c <_dtoa_r+0xe7c>
  408bec:	f1c0 001c 	rsb	r0, r0, #28
  408bf0:	9b05      	ldr	r3, [sp, #20]
  408bf2:	4403      	add	r3, r0
  408bf4:	9305      	str	r3, [sp, #20]
  408bf6:	4405      	add	r5, r0
  408bf8:	4482      	add	sl, r0
  408bfa:	9b05      	ldr	r3, [sp, #20]
  408bfc:	2b00      	cmp	r3, #0
  408bfe:	dd05      	ble.n	408c0c <_dtoa_r+0x52c>
  408c00:	4659      	mov	r1, fp
  408c02:	461a      	mov	r2, r3
  408c04:	4620      	mov	r0, r4
  408c06:	f001 faed 	bl	40a1e4 <__lshift>
  408c0a:	4683      	mov	fp, r0
  408c0c:	f1ba 0f00 	cmp.w	sl, #0
  408c10:	dd05      	ble.n	408c1e <_dtoa_r+0x53e>
  408c12:	4641      	mov	r1, r8
  408c14:	4652      	mov	r2, sl
  408c16:	4620      	mov	r0, r4
  408c18:	f001 fae4 	bl	40a1e4 <__lshift>
  408c1c:	4680      	mov	r8, r0
  408c1e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  408c20:	2b00      	cmp	r3, #0
  408c22:	f040 8268 	bne.w	4090f6 <_dtoa_r+0xa16>
  408c26:	9b06      	ldr	r3, [sp, #24]
  408c28:	2b00      	cmp	r3, #0
  408c2a:	f340 8295 	ble.w	409158 <_dtoa_r+0xa78>
  408c2e:	9b09      	ldr	r3, [sp, #36]	; 0x24
  408c30:	2b00      	cmp	r3, #0
  408c32:	d171      	bne.n	408d18 <_dtoa_r+0x638>
  408c34:	f8dd 901c 	ldr.w	r9, [sp, #28]
  408c38:	9f06      	ldr	r7, [sp, #24]
  408c3a:	464d      	mov	r5, r9
  408c3c:	e002      	b.n	408c44 <_dtoa_r+0x564>
  408c3e:	f001 f94d 	bl	409edc <__multadd>
  408c42:	4683      	mov	fp, r0
  408c44:	4641      	mov	r1, r8
  408c46:	4658      	mov	r0, fp
  408c48:	f7ff fcb2 	bl	4085b0 <quorem>
  408c4c:	f100 0c30 	add.w	ip, r0, #48	; 0x30
  408c50:	f805 cb01 	strb.w	ip, [r5], #1
  408c54:	ebc9 0305 	rsb	r3, r9, r5
  408c58:	42bb      	cmp	r3, r7
  408c5a:	4620      	mov	r0, r4
  408c5c:	4659      	mov	r1, fp
  408c5e:	f04f 020a 	mov.w	r2, #10
  408c62:	f04f 0300 	mov.w	r3, #0
  408c66:	dbea      	blt.n	408c3e <_dtoa_r+0x55e>
  408c68:	9b07      	ldr	r3, [sp, #28]
  408c6a:	9a06      	ldr	r2, [sp, #24]
  408c6c:	2a01      	cmp	r2, #1
  408c6e:	bfac      	ite	ge
  408c70:	189b      	addge	r3, r3, r2
  408c72:	3301      	addlt	r3, #1
  408c74:	461d      	mov	r5, r3
  408c76:	f04f 0a00 	mov.w	sl, #0
  408c7a:	4659      	mov	r1, fp
  408c7c:	2201      	movs	r2, #1
  408c7e:	4620      	mov	r0, r4
  408c80:	f8cd c008 	str.w	ip, [sp, #8]
  408c84:	f001 faae 	bl	40a1e4 <__lshift>
  408c88:	4641      	mov	r1, r8
  408c8a:	4683      	mov	fp, r0
  408c8c:	f001 fb00 	bl	40a290 <__mcmp>
  408c90:	2800      	cmp	r0, #0
  408c92:	f8dd c008 	ldr.w	ip, [sp, #8]
  408c96:	f340 82f6 	ble.w	409286 <_dtoa_r+0xba6>
  408c9a:	f815 2c01 	ldrb.w	r2, [r5, #-1]
  408c9e:	9907      	ldr	r1, [sp, #28]
  408ca0:	1e6b      	subs	r3, r5, #1
  408ca2:	e004      	b.n	408cae <_dtoa_r+0x5ce>
  408ca4:	428b      	cmp	r3, r1
  408ca6:	f000 8273 	beq.w	409190 <_dtoa_r+0xab0>
  408caa:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
  408cae:	2a39      	cmp	r2, #57	; 0x39
  408cb0:	f103 0501 	add.w	r5, r3, #1
  408cb4:	d0f6      	beq.n	408ca4 <_dtoa_r+0x5c4>
  408cb6:	3201      	adds	r2, #1
  408cb8:	701a      	strb	r2, [r3, #0]
  408cba:	4641      	mov	r1, r8
  408cbc:	4620      	mov	r0, r4
  408cbe:	f001 f903 	bl	409ec8 <_Bfree>
  408cc2:	2e00      	cmp	r6, #0
  408cc4:	f43f aedf 	beq.w	408a86 <_dtoa_r+0x3a6>
  408cc8:	f1ba 0f00 	cmp.w	sl, #0
  408ccc:	d005      	beq.n	408cda <_dtoa_r+0x5fa>
  408cce:	45b2      	cmp	sl, r6
  408cd0:	d003      	beq.n	408cda <_dtoa_r+0x5fa>
  408cd2:	4651      	mov	r1, sl
  408cd4:	4620      	mov	r0, r4
  408cd6:	f001 f8f7 	bl	409ec8 <_Bfree>
  408cda:	4631      	mov	r1, r6
  408cdc:	4620      	mov	r0, r4
  408cde:	f001 f8f3 	bl	409ec8 <_Bfree>
  408ce2:	e6d0      	b.n	408a86 <_dtoa_r+0x3a6>
  408ce4:	201c      	movs	r0, #28
  408ce6:	e783      	b.n	408bf0 <_dtoa_r+0x510>
  408ce8:	4b04      	ldr	r3, [pc, #16]	; (408cfc <_dtoa_r+0x61c>)
  408cea:	9a02      	ldr	r2, [sp, #8]
  408cec:	1b5b      	subs	r3, r3, r5
  408cee:	fa02 f003 	lsl.w	r0, r2, r3
  408cf2:	e56d      	b.n	4087d0 <_dtoa_r+0xf0>
  408cf4:	900b      	str	r0, [sp, #44]	; 0x2c
  408cf6:	e5b4      	b.n	408862 <_dtoa_r+0x182>
  408cf8:	40240000 	.word	0x40240000
  408cfc:	fffffbee 	.word	0xfffffbee
  408d00:	4631      	mov	r1, r6
  408d02:	2300      	movs	r3, #0
  408d04:	4620      	mov	r0, r4
  408d06:	220a      	movs	r2, #10
  408d08:	f001 f8e8 	bl	409edc <__multadd>
  408d0c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  408d0e:	2b00      	cmp	r3, #0
  408d10:	4606      	mov	r6, r0
  408d12:	f340 840c 	ble.w	40952e <_dtoa_r+0xe4e>
  408d16:	9306      	str	r3, [sp, #24]
  408d18:	2d00      	cmp	r5, #0
  408d1a:	dd05      	ble.n	408d28 <_dtoa_r+0x648>
  408d1c:	4631      	mov	r1, r6
  408d1e:	462a      	mov	r2, r5
  408d20:	4620      	mov	r0, r4
  408d22:	f001 fa5f 	bl	40a1e4 <__lshift>
  408d26:	4606      	mov	r6, r0
  408d28:	f1b9 0f00 	cmp.w	r9, #0
  408d2c:	f040 82e9 	bne.w	409302 <_dtoa_r+0xc22>
  408d30:	46b1      	mov	r9, r6
  408d32:	9b06      	ldr	r3, [sp, #24]
  408d34:	9a07      	ldr	r2, [sp, #28]
  408d36:	3b01      	subs	r3, #1
  408d38:	18d3      	adds	r3, r2, r3
  408d3a:	9308      	str	r3, [sp, #32]
  408d3c:	9b02      	ldr	r3, [sp, #8]
  408d3e:	f003 0301 	and.w	r3, r3, #1
  408d42:	9309      	str	r3, [sp, #36]	; 0x24
  408d44:	4617      	mov	r7, r2
  408d46:	4641      	mov	r1, r8
  408d48:	4658      	mov	r0, fp
  408d4a:	f7ff fc31 	bl	4085b0 <quorem>
  408d4e:	4631      	mov	r1, r6
  408d50:	4605      	mov	r5, r0
  408d52:	4658      	mov	r0, fp
  408d54:	f001 fa9c 	bl	40a290 <__mcmp>
  408d58:	464a      	mov	r2, r9
  408d5a:	4682      	mov	sl, r0
  408d5c:	4641      	mov	r1, r8
  408d5e:	4620      	mov	r0, r4
  408d60:	f001 faba 	bl	40a2d8 <__mdiff>
  408d64:	68c2      	ldr	r2, [r0, #12]
  408d66:	4603      	mov	r3, r0
  408d68:	f105 0c30 	add.w	ip, r5, #48	; 0x30
  408d6c:	2a00      	cmp	r2, #0
  408d6e:	f040 81b8 	bne.w	4090e2 <_dtoa_r+0xa02>
  408d72:	4619      	mov	r1, r3
  408d74:	4658      	mov	r0, fp
  408d76:	f8cd c018 	str.w	ip, [sp, #24]
  408d7a:	9305      	str	r3, [sp, #20]
  408d7c:	f001 fa88 	bl	40a290 <__mcmp>
  408d80:	9b05      	ldr	r3, [sp, #20]
  408d82:	9002      	str	r0, [sp, #8]
  408d84:	4619      	mov	r1, r3
  408d86:	4620      	mov	r0, r4
  408d88:	f001 f89e 	bl	409ec8 <_Bfree>
  408d8c:	9a02      	ldr	r2, [sp, #8]
  408d8e:	f8dd c018 	ldr.w	ip, [sp, #24]
  408d92:	b92a      	cbnz	r2, 408da0 <_dtoa_r+0x6c0>
  408d94:	9b20      	ldr	r3, [sp, #128]	; 0x80
  408d96:	b91b      	cbnz	r3, 408da0 <_dtoa_r+0x6c0>
  408d98:	9b09      	ldr	r3, [sp, #36]	; 0x24
  408d9a:	2b00      	cmp	r3, #0
  408d9c:	f000 83a7 	beq.w	4094ee <_dtoa_r+0xe0e>
  408da0:	f1ba 0f00 	cmp.w	sl, #0
  408da4:	f2c0 8251 	blt.w	40924a <_dtoa_r+0xb6a>
  408da8:	d105      	bne.n	408db6 <_dtoa_r+0x6d6>
  408daa:	9b20      	ldr	r3, [sp, #128]	; 0x80
  408dac:	b91b      	cbnz	r3, 408db6 <_dtoa_r+0x6d6>
  408dae:	9b09      	ldr	r3, [sp, #36]	; 0x24
  408db0:	2b00      	cmp	r3, #0
  408db2:	f000 824a 	beq.w	40924a <_dtoa_r+0xb6a>
  408db6:	2a00      	cmp	r2, #0
  408db8:	f300 82b7 	bgt.w	40932a <_dtoa_r+0xc4a>
  408dbc:	9b08      	ldr	r3, [sp, #32]
  408dbe:	f887 c000 	strb.w	ip, [r7]
  408dc2:	f107 0a01 	add.w	sl, r7, #1
  408dc6:	429f      	cmp	r7, r3
  408dc8:	4655      	mov	r5, sl
  408dca:	f000 82ba 	beq.w	409342 <_dtoa_r+0xc62>
  408dce:	4659      	mov	r1, fp
  408dd0:	220a      	movs	r2, #10
  408dd2:	2300      	movs	r3, #0
  408dd4:	4620      	mov	r0, r4
  408dd6:	f001 f881 	bl	409edc <__multadd>
  408dda:	454e      	cmp	r6, r9
  408ddc:	4683      	mov	fp, r0
  408dde:	4631      	mov	r1, r6
  408de0:	4620      	mov	r0, r4
  408de2:	f04f 020a 	mov.w	r2, #10
  408de6:	f04f 0300 	mov.w	r3, #0
  408dea:	f000 8174 	beq.w	4090d6 <_dtoa_r+0x9f6>
  408dee:	f001 f875 	bl	409edc <__multadd>
  408df2:	4649      	mov	r1, r9
  408df4:	4606      	mov	r6, r0
  408df6:	220a      	movs	r2, #10
  408df8:	4620      	mov	r0, r4
  408dfa:	2300      	movs	r3, #0
  408dfc:	f001 f86e 	bl	409edc <__multadd>
  408e00:	4657      	mov	r7, sl
  408e02:	4681      	mov	r9, r0
  408e04:	e79f      	b.n	408d46 <_dtoa_r+0x666>
  408e06:	2301      	movs	r3, #1
  408e08:	9309      	str	r3, [sp, #36]	; 0x24
  408e0a:	9b21      	ldr	r3, [sp, #132]	; 0x84
  408e0c:	2b00      	cmp	r3, #0
  408e0e:	f340 8213 	ble.w	409238 <_dtoa_r+0xb58>
  408e12:	461f      	mov	r7, r3
  408e14:	461e      	mov	r6, r3
  408e16:	930c      	str	r3, [sp, #48]	; 0x30
  408e18:	9306      	str	r3, [sp, #24]
  408e1a:	2100      	movs	r1, #0
  408e1c:	2f17      	cmp	r7, #23
  408e1e:	6461      	str	r1, [r4, #68]	; 0x44
  408e20:	d90a      	bls.n	408e38 <_dtoa_r+0x758>
  408e22:	2201      	movs	r2, #1
  408e24:	2304      	movs	r3, #4
  408e26:	005b      	lsls	r3, r3, #1
  408e28:	f103 0014 	add.w	r0, r3, #20
  408e2c:	4287      	cmp	r7, r0
  408e2e:	4611      	mov	r1, r2
  408e30:	f102 0201 	add.w	r2, r2, #1
  408e34:	d2f7      	bcs.n	408e26 <_dtoa_r+0x746>
  408e36:	6461      	str	r1, [r4, #68]	; 0x44
  408e38:	4620      	mov	r0, r4
  408e3a:	f001 f81f 	bl	409e7c <_Balloc>
  408e3e:	2e0e      	cmp	r6, #14
  408e40:	9007      	str	r0, [sp, #28]
  408e42:	6420      	str	r0, [r4, #64]	; 0x40
  408e44:	f63f ad5c 	bhi.w	408900 <_dtoa_r+0x220>
  408e48:	2d00      	cmp	r5, #0
  408e4a:	f43f ad59 	beq.w	408900 <_dtoa_r+0x220>
  408e4e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  408e52:	9904      	ldr	r1, [sp, #16]
  408e54:	2900      	cmp	r1, #0
  408e56:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
  408e5a:	f340 8221 	ble.w	4092a0 <_dtoa_r+0xbc0>
  408e5e:	4bb7      	ldr	r3, [pc, #732]	; (40913c <_dtoa_r+0xa5c>)
  408e60:	f001 020f 	and.w	r2, r1, #15
  408e64:	110d      	asrs	r5, r1, #4
  408e66:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  408e6a:	06e9      	lsls	r1, r5, #27
  408e6c:	e9d3 6700 	ldrd	r6, r7, [r3]
  408e70:	f140 81db 	bpl.w	40922a <_dtoa_r+0xb4a>
  408e74:	4bb2      	ldr	r3, [pc, #712]	; (409140 <_dtoa_r+0xa60>)
  408e76:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
  408e7a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
  408e7e:	f002 f90b 	bl	40b098 <__aeabi_ddiv>
  408e82:	e9cd 0102 	strd	r0, r1, [sp, #8]
  408e86:	f005 050f 	and.w	r5, r5, #15
  408e8a:	f04f 0803 	mov.w	r8, #3
  408e8e:	b18d      	cbz	r5, 408eb4 <_dtoa_r+0x7d4>
  408e90:	f8df 92ac 	ldr.w	r9, [pc, #684]	; 409140 <_dtoa_r+0xa60>
  408e94:	4630      	mov	r0, r6
  408e96:	4639      	mov	r1, r7
  408e98:	07ea      	lsls	r2, r5, #31
  408e9a:	d505      	bpl.n	408ea8 <_dtoa_r+0x7c8>
  408e9c:	e9d9 2300 	ldrd	r2, r3, [r9]
  408ea0:	f108 0801 	add.w	r8, r8, #1
  408ea4:	f001 ffce 	bl	40ae44 <__aeabi_dmul>
  408ea8:	106d      	asrs	r5, r5, #1
  408eaa:	f109 0908 	add.w	r9, r9, #8
  408eae:	d1f3      	bne.n	408e98 <_dtoa_r+0x7b8>
  408eb0:	4606      	mov	r6, r0
  408eb2:	460f      	mov	r7, r1
  408eb4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  408eb8:	4632      	mov	r2, r6
  408eba:	463b      	mov	r3, r7
  408ebc:	f002 f8ec 	bl	40b098 <__aeabi_ddiv>
  408ec0:	e9cd 0102 	strd	r0, r1, [sp, #8]
  408ec4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  408ec6:	b143      	cbz	r3, 408eda <_dtoa_r+0x7fa>
  408ec8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  408ecc:	2200      	movs	r2, #0
  408ece:	4b9d      	ldr	r3, [pc, #628]	; (409144 <_dtoa_r+0xa64>)
  408ed0:	f002 fa2a 	bl	40b328 <__aeabi_dcmplt>
  408ed4:	2800      	cmp	r0, #0
  408ed6:	f040 82ac 	bne.w	409432 <_dtoa_r+0xd52>
  408eda:	4640      	mov	r0, r8
  408edc:	f001 ff4c 	bl	40ad78 <__aeabi_i2d>
  408ee0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  408ee4:	f001 ffae 	bl	40ae44 <__aeabi_dmul>
  408ee8:	4b97      	ldr	r3, [pc, #604]	; (409148 <_dtoa_r+0xa68>)
  408eea:	2200      	movs	r2, #0
  408eec:	f001 fdf8 	bl	40aae0 <__adddf3>
  408ef0:	9b06      	ldr	r3, [sp, #24]
  408ef2:	4606      	mov	r6, r0
  408ef4:	f1a1 7750 	sub.w	r7, r1, #54525952	; 0x3400000
  408ef8:	2b00      	cmp	r3, #0
  408efa:	f000 8162 	beq.w	4091c2 <_dtoa_r+0xae2>
  408efe:	9b04      	ldr	r3, [sp, #16]
  408f00:	f8dd 9018 	ldr.w	r9, [sp, #24]
  408f04:	9312      	str	r3, [sp, #72]	; 0x48
  408f06:	9b09      	ldr	r3, [sp, #36]	; 0x24
  408f08:	2b00      	cmp	r3, #0
  408f0a:	f000 8221 	beq.w	409350 <_dtoa_r+0xc70>
  408f0e:	4b8b      	ldr	r3, [pc, #556]	; (40913c <_dtoa_r+0xa5c>)
  408f10:	498e      	ldr	r1, [pc, #568]	; (40914c <_dtoa_r+0xa6c>)
  408f12:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
  408f16:	e953 2302 	ldrd	r2, r3, [r3, #-8]
  408f1a:	2000      	movs	r0, #0
  408f1c:	f002 f8bc 	bl	40b098 <__aeabi_ddiv>
  408f20:	4632      	mov	r2, r6
  408f22:	463b      	mov	r3, r7
  408f24:	f001 fdda 	bl	40aadc <__aeabi_dsub>
  408f28:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
  408f2c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
  408f30:	4639      	mov	r1, r7
  408f32:	4630      	mov	r0, r6
  408f34:	f002 fa20 	bl	40b378 <__aeabi_d2iz>
  408f38:	4605      	mov	r5, r0
  408f3a:	f001 ff1d 	bl	40ad78 <__aeabi_i2d>
  408f3e:	3530      	adds	r5, #48	; 0x30
  408f40:	4602      	mov	r2, r0
  408f42:	460b      	mov	r3, r1
  408f44:	4630      	mov	r0, r6
  408f46:	4639      	mov	r1, r7
  408f48:	f001 fdc8 	bl	40aadc <__aeabi_dsub>
  408f4c:	fa5f f885 	uxtb.w	r8, r5
  408f50:	9d07      	ldr	r5, [sp, #28]
  408f52:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
  408f56:	f885 8000 	strb.w	r8, [r5]
  408f5a:	4606      	mov	r6, r0
  408f5c:	460f      	mov	r7, r1
  408f5e:	3501      	adds	r5, #1
  408f60:	f002 f9e2 	bl	40b328 <__aeabi_dcmplt>
  408f64:	2800      	cmp	r0, #0
  408f66:	f040 82b2 	bne.w	4094ce <_dtoa_r+0xdee>
  408f6a:	4632      	mov	r2, r6
  408f6c:	463b      	mov	r3, r7
  408f6e:	2000      	movs	r0, #0
  408f70:	4974      	ldr	r1, [pc, #464]	; (409144 <_dtoa_r+0xa64>)
  408f72:	f001 fdb3 	bl	40aadc <__aeabi_dsub>
  408f76:	4602      	mov	r2, r0
  408f78:	460b      	mov	r3, r1
  408f7a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
  408f7e:	f002 f9f1 	bl	40b364 <__aeabi_dcmpgt>
  408f82:	2800      	cmp	r0, #0
  408f84:	f040 82ac 	bne.w	4094e0 <_dtoa_r+0xe00>
  408f88:	f1b9 0f01 	cmp.w	r9, #1
  408f8c:	f340 8138 	ble.w	409200 <_dtoa_r+0xb20>
  408f90:	9b07      	ldr	r3, [sp, #28]
  408f92:	f8cd a04c 	str.w	sl, [sp, #76]	; 0x4c
  408f96:	f8cd b008 	str.w	fp, [sp, #8]
  408f9a:	4499      	add	r9, r3
  408f9c:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	; 0x40
  408fa0:	46a0      	mov	r8, r4
  408fa2:	e00d      	b.n	408fc0 <_dtoa_r+0x8e0>
  408fa4:	2000      	movs	r0, #0
  408fa6:	4967      	ldr	r1, [pc, #412]	; (409144 <_dtoa_r+0xa64>)
  408fa8:	f001 fd98 	bl	40aadc <__aeabi_dsub>
  408fac:	4652      	mov	r2, sl
  408fae:	465b      	mov	r3, fp
  408fb0:	f002 f9ba 	bl	40b328 <__aeabi_dcmplt>
  408fb4:	2800      	cmp	r0, #0
  408fb6:	f040 828e 	bne.w	4094d6 <_dtoa_r+0xdf6>
  408fba:	454d      	cmp	r5, r9
  408fbc:	f000 811b 	beq.w	4091f6 <_dtoa_r+0xb16>
  408fc0:	4650      	mov	r0, sl
  408fc2:	4659      	mov	r1, fp
  408fc4:	2200      	movs	r2, #0
  408fc6:	4b62      	ldr	r3, [pc, #392]	; (409150 <_dtoa_r+0xa70>)
  408fc8:	f001 ff3c 	bl	40ae44 <__aeabi_dmul>
  408fcc:	2200      	movs	r2, #0
  408fce:	4b60      	ldr	r3, [pc, #384]	; (409150 <_dtoa_r+0xa70>)
  408fd0:	4682      	mov	sl, r0
  408fd2:	468b      	mov	fp, r1
  408fd4:	4630      	mov	r0, r6
  408fd6:	4639      	mov	r1, r7
  408fd8:	f001 ff34 	bl	40ae44 <__aeabi_dmul>
  408fdc:	460f      	mov	r7, r1
  408fde:	4606      	mov	r6, r0
  408fe0:	f002 f9ca 	bl	40b378 <__aeabi_d2iz>
  408fe4:	4604      	mov	r4, r0
  408fe6:	f001 fec7 	bl	40ad78 <__aeabi_i2d>
  408fea:	4602      	mov	r2, r0
  408fec:	460b      	mov	r3, r1
  408fee:	4630      	mov	r0, r6
  408ff0:	4639      	mov	r1, r7
  408ff2:	f001 fd73 	bl	40aadc <__aeabi_dsub>
  408ff6:	3430      	adds	r4, #48	; 0x30
  408ff8:	b2e4      	uxtb	r4, r4
  408ffa:	4652      	mov	r2, sl
  408ffc:	465b      	mov	r3, fp
  408ffe:	f805 4b01 	strb.w	r4, [r5], #1
  409002:	4606      	mov	r6, r0
  409004:	460f      	mov	r7, r1
  409006:	f002 f98f 	bl	40b328 <__aeabi_dcmplt>
  40900a:	4632      	mov	r2, r6
  40900c:	463b      	mov	r3, r7
  40900e:	2800      	cmp	r0, #0
  409010:	d0c8      	beq.n	408fa4 <_dtoa_r+0x8c4>
  409012:	9b12      	ldr	r3, [sp, #72]	; 0x48
  409014:	f8dd b008 	ldr.w	fp, [sp, #8]
  409018:	9304      	str	r3, [sp, #16]
  40901a:	4644      	mov	r4, r8
  40901c:	e533      	b.n	408a86 <_dtoa_r+0x3a6>
  40901e:	2300      	movs	r3, #0
  409020:	9309      	str	r3, [sp, #36]	; 0x24
  409022:	9b21      	ldr	r3, [sp, #132]	; 0x84
  409024:	9a04      	ldr	r2, [sp, #16]
  409026:	4413      	add	r3, r2
  409028:	930c      	str	r3, [sp, #48]	; 0x30
  40902a:	3301      	adds	r3, #1
  40902c:	2b00      	cmp	r3, #0
  40902e:	9306      	str	r3, [sp, #24]
  409030:	f340 8109 	ble.w	409246 <_dtoa_r+0xb66>
  409034:	9e06      	ldr	r6, [sp, #24]
  409036:	4637      	mov	r7, r6
  409038:	e6ef      	b.n	408e1a <_dtoa_r+0x73a>
  40903a:	2300      	movs	r3, #0
  40903c:	9309      	str	r3, [sp, #36]	; 0x24
  40903e:	e6e4      	b.n	408e0a <_dtoa_r+0x72a>
  409040:	9b06      	ldr	r3, [sp, #24]
  409042:	2b00      	cmp	r3, #0
  409044:	f73f ac6d 	bgt.w	408922 <_dtoa_r+0x242>
  409048:	f040 8262 	bne.w	409510 <_dtoa_r+0xe30>
  40904c:	4640      	mov	r0, r8
  40904e:	2200      	movs	r2, #0
  409050:	4b40      	ldr	r3, [pc, #256]	; (409154 <_dtoa_r+0xa74>)
  409052:	4649      	mov	r1, r9
  409054:	f001 fef6 	bl	40ae44 <__aeabi_dmul>
  409058:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  40905c:	f002 f978 	bl	40b350 <__aeabi_dcmpge>
  409060:	f8dd 8018 	ldr.w	r8, [sp, #24]
  409064:	4646      	mov	r6, r8
  409066:	2800      	cmp	r0, #0
  409068:	f000 808a 	beq.w	409180 <_dtoa_r+0xaa0>
  40906c:	9b21      	ldr	r3, [sp, #132]	; 0x84
  40906e:	9d07      	ldr	r5, [sp, #28]
  409070:	43db      	mvns	r3, r3
  409072:	9304      	str	r3, [sp, #16]
  409074:	4641      	mov	r1, r8
  409076:	4620      	mov	r0, r4
  409078:	f000 ff26 	bl	409ec8 <_Bfree>
  40907c:	2e00      	cmp	r6, #0
  40907e:	f47f ae2c 	bne.w	408cda <_dtoa_r+0x5fa>
  409082:	e500      	b.n	408a86 <_dtoa_r+0x3a6>
  409084:	4659      	mov	r1, fp
  409086:	4620      	mov	r0, r4
  409088:	f001 f85c 	bl	40a144 <__pow5mult>
  40908c:	4683      	mov	fp, r0
  40908e:	e557      	b.n	408b40 <_dtoa_r+0x460>
  409090:	9b02      	ldr	r3, [sp, #8]
  409092:	2b00      	cmp	r3, #0
  409094:	f47f ad66 	bne.w	408b64 <_dtoa_r+0x484>
  409098:	9b03      	ldr	r3, [sp, #12]
  40909a:	f3c3 0313 	ubfx	r3, r3, #0, #20
  40909e:	2b00      	cmp	r3, #0
  4090a0:	f47f ad94 	bne.w	408bcc <_dtoa_r+0x4ec>
  4090a4:	9b03      	ldr	r3, [sp, #12]
  4090a6:	f023 4700 	bic.w	r7, r3, #2147483648	; 0x80000000
  4090aa:	0d3f      	lsrs	r7, r7, #20
  4090ac:	053f      	lsls	r7, r7, #20
  4090ae:	2f00      	cmp	r7, #0
  4090b0:	f000 821a 	beq.w	4094e8 <_dtoa_r+0xe08>
  4090b4:	9b05      	ldr	r3, [sp, #20]
  4090b6:	3301      	adds	r3, #1
  4090b8:	9305      	str	r3, [sp, #20]
  4090ba:	f10a 0a01 	add.w	sl, sl, #1
  4090be:	f04f 0901 	mov.w	r9, #1
  4090c2:	e585      	b.n	408bd0 <_dtoa_r+0x4f0>
  4090c4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  4090c6:	2a00      	cmp	r2, #0
  4090c8:	f000 81a5 	beq.w	409416 <_dtoa_r+0xd36>
  4090cc:	f203 4333 	addw	r3, r3, #1075	; 0x433
  4090d0:	9f08      	ldr	r7, [sp, #32]
  4090d2:	9d05      	ldr	r5, [sp, #20]
  4090d4:	e4ff      	b.n	408ad6 <_dtoa_r+0x3f6>
  4090d6:	f000 ff01 	bl	409edc <__multadd>
  4090da:	4657      	mov	r7, sl
  4090dc:	4606      	mov	r6, r0
  4090de:	4681      	mov	r9, r0
  4090e0:	e631      	b.n	408d46 <_dtoa_r+0x666>
  4090e2:	4601      	mov	r1, r0
  4090e4:	4620      	mov	r0, r4
  4090e6:	f8cd c008 	str.w	ip, [sp, #8]
  4090ea:	f000 feed 	bl	409ec8 <_Bfree>
  4090ee:	2201      	movs	r2, #1
  4090f0:	f8dd c008 	ldr.w	ip, [sp, #8]
  4090f4:	e654      	b.n	408da0 <_dtoa_r+0x6c0>
  4090f6:	4658      	mov	r0, fp
  4090f8:	4641      	mov	r1, r8
  4090fa:	f001 f8c9 	bl	40a290 <__mcmp>
  4090fe:	2800      	cmp	r0, #0
  409100:	f6bf ad91 	bge.w	408c26 <_dtoa_r+0x546>
  409104:	9f04      	ldr	r7, [sp, #16]
  409106:	4659      	mov	r1, fp
  409108:	2300      	movs	r3, #0
  40910a:	4620      	mov	r0, r4
  40910c:	220a      	movs	r2, #10
  40910e:	3f01      	subs	r7, #1
  409110:	9704      	str	r7, [sp, #16]
  409112:	f000 fee3 	bl	409edc <__multadd>
  409116:	9b09      	ldr	r3, [sp, #36]	; 0x24
  409118:	4683      	mov	fp, r0
  40911a:	2b00      	cmp	r3, #0
  40911c:	f47f adf0 	bne.w	408d00 <_dtoa_r+0x620>
  409120:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  409122:	2b00      	cmp	r3, #0
  409124:	f340 81f8 	ble.w	409518 <_dtoa_r+0xe38>
  409128:	9306      	str	r3, [sp, #24]
  40912a:	e583      	b.n	408c34 <_dtoa_r+0x554>
  40912c:	9807      	ldr	r0, [sp, #28]
  40912e:	f7ff bb0b 	b.w	408748 <_dtoa_r+0x68>
  409132:	9b02      	ldr	r3, [sp, #8]
  409134:	2b00      	cmp	r3, #0
  409136:	f47f ad49 	bne.w	408bcc <_dtoa_r+0x4ec>
  40913a:	e7ad      	b.n	409098 <_dtoa_r+0x9b8>
  40913c:	0040c208 	.word	0x0040c208
  409140:	0040c2e0 	.word	0x0040c2e0
  409144:	3ff00000 	.word	0x3ff00000
  409148:	401c0000 	.word	0x401c0000
  40914c:	3fe00000 	.word	0x3fe00000
  409150:	40240000 	.word	0x40240000
  409154:	40140000 	.word	0x40140000
  409158:	9b20      	ldr	r3, [sp, #128]	; 0x80
  40915a:	2b02      	cmp	r3, #2
  40915c:	f77f ad67 	ble.w	408c2e <_dtoa_r+0x54e>
  409160:	9b06      	ldr	r3, [sp, #24]
  409162:	2b00      	cmp	r3, #0
  409164:	d182      	bne.n	40906c <_dtoa_r+0x98c>
  409166:	4641      	mov	r1, r8
  409168:	2205      	movs	r2, #5
  40916a:	4620      	mov	r0, r4
  40916c:	f000 feb6 	bl	409edc <__multadd>
  409170:	4680      	mov	r8, r0
  409172:	4641      	mov	r1, r8
  409174:	4658      	mov	r0, fp
  409176:	f001 f88b 	bl	40a290 <__mcmp>
  40917a:	2800      	cmp	r0, #0
  40917c:	f77f af76 	ble.w	40906c <_dtoa_r+0x98c>
  409180:	9a04      	ldr	r2, [sp, #16]
  409182:	9907      	ldr	r1, [sp, #28]
  409184:	2331      	movs	r3, #49	; 0x31
  409186:	3201      	adds	r2, #1
  409188:	9204      	str	r2, [sp, #16]
  40918a:	700b      	strb	r3, [r1, #0]
  40918c:	1c4d      	adds	r5, r1, #1
  40918e:	e771      	b.n	409074 <_dtoa_r+0x994>
  409190:	9a04      	ldr	r2, [sp, #16]
  409192:	3201      	adds	r2, #1
  409194:	9204      	str	r2, [sp, #16]
  409196:	9a07      	ldr	r2, [sp, #28]
  409198:	2331      	movs	r3, #49	; 0x31
  40919a:	7013      	strb	r3, [r2, #0]
  40919c:	e58d      	b.n	408cba <_dtoa_r+0x5da>
  40919e:	f8dd b008 	ldr.w	fp, [sp, #8]
  4091a2:	9c05      	ldr	r4, [sp, #20]
  4091a4:	e46f      	b.n	408a86 <_dtoa_r+0x3a6>
  4091a6:	4640      	mov	r0, r8
  4091a8:	f001 fde6 	bl	40ad78 <__aeabi_i2d>
  4091ac:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  4091b0:	f001 fe48 	bl	40ae44 <__aeabi_dmul>
  4091b4:	2200      	movs	r2, #0
  4091b6:	4bbc      	ldr	r3, [pc, #752]	; (4094a8 <_dtoa_r+0xdc8>)
  4091b8:	f001 fc92 	bl	40aae0 <__adddf3>
  4091bc:	4606      	mov	r6, r0
  4091be:	f1a1 7750 	sub.w	r7, r1, #54525952	; 0x3400000
  4091c2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  4091c6:	2200      	movs	r2, #0
  4091c8:	4bb8      	ldr	r3, [pc, #736]	; (4094ac <_dtoa_r+0xdcc>)
  4091ca:	f001 fc87 	bl	40aadc <__aeabi_dsub>
  4091ce:	4632      	mov	r2, r6
  4091d0:	463b      	mov	r3, r7
  4091d2:	e9cd 0102 	strd	r0, r1, [sp, #8]
  4091d6:	f002 f8c5 	bl	40b364 <__aeabi_dcmpgt>
  4091da:	4680      	mov	r8, r0
  4091dc:	2800      	cmp	r0, #0
  4091de:	f040 80b3 	bne.w	409348 <_dtoa_r+0xc68>
  4091e2:	4632      	mov	r2, r6
  4091e4:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
  4091e8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  4091ec:	f002 f89c 	bl	40b328 <__aeabi_dcmplt>
  4091f0:	b130      	cbz	r0, 409200 <_dtoa_r+0xb20>
  4091f2:	4646      	mov	r6, r8
  4091f4:	e73a      	b.n	40906c <_dtoa_r+0x98c>
  4091f6:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
  4091fa:	f8dd b008 	ldr.w	fp, [sp, #8]
  4091fe:	4644      	mov	r4, r8
  409200:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
  409204:	e9cd 2302 	strd	r2, r3, [sp, #8]
  409208:	f7ff bb7a 	b.w	408900 <_dtoa_r+0x220>
  40920c:	4659      	mov	r1, fp
  40920e:	9a08      	ldr	r2, [sp, #32]
  409210:	4620      	mov	r0, r4
  409212:	f000 ff97 	bl	40a144 <__pow5mult>
  409216:	4683      	mov	fp, r0
  409218:	e492      	b.n	408b40 <_dtoa_r+0x460>
  40921a:	9b08      	ldr	r3, [sp, #32]
  40921c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  40921e:	9708      	str	r7, [sp, #32]
  409220:	1afb      	subs	r3, r7, r3
  409222:	441a      	add	r2, r3
  409224:	920a      	str	r2, [sp, #40]	; 0x28
  409226:	2700      	movs	r7, #0
  409228:	e44f      	b.n	408aca <_dtoa_r+0x3ea>
  40922a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
  40922e:	f04f 0802 	mov.w	r8, #2
  409232:	e9cd 2302 	strd	r2, r3, [sp, #8]
  409236:	e62a      	b.n	408e8e <_dtoa_r+0x7ae>
  409238:	2601      	movs	r6, #1
  40923a:	9621      	str	r6, [sp, #132]	; 0x84
  40923c:	960c      	str	r6, [sp, #48]	; 0x30
  40923e:	9606      	str	r6, [sp, #24]
  409240:	2100      	movs	r1, #0
  409242:	6461      	str	r1, [r4, #68]	; 0x44
  409244:	e5f8      	b.n	408e38 <_dtoa_r+0x758>
  409246:	461e      	mov	r6, r3
  409248:	e7fa      	b.n	409240 <_dtoa_r+0xb60>
  40924a:	2a00      	cmp	r2, #0
  40924c:	dd15      	ble.n	40927a <_dtoa_r+0xb9a>
  40924e:	4659      	mov	r1, fp
  409250:	2201      	movs	r2, #1
  409252:	4620      	mov	r0, r4
  409254:	f8cd c008 	str.w	ip, [sp, #8]
  409258:	f000 ffc4 	bl	40a1e4 <__lshift>
  40925c:	4641      	mov	r1, r8
  40925e:	4683      	mov	fp, r0
  409260:	f001 f816 	bl	40a290 <__mcmp>
  409264:	2800      	cmp	r0, #0
  409266:	f8dd c008 	ldr.w	ip, [sp, #8]
  40926a:	f340 814a 	ble.w	409502 <_dtoa_r+0xe22>
  40926e:	f1bc 0f39 	cmp.w	ip, #57	; 0x39
  409272:	f000 8106 	beq.w	409482 <_dtoa_r+0xda2>
  409276:	f10c 0c01 	add.w	ip, ip, #1
  40927a:	46b2      	mov	sl, r6
  40927c:	f887 c000 	strb.w	ip, [r7]
  409280:	1c7d      	adds	r5, r7, #1
  409282:	464e      	mov	r6, r9
  409284:	e519      	b.n	408cba <_dtoa_r+0x5da>
  409286:	d104      	bne.n	409292 <_dtoa_r+0xbb2>
  409288:	f01c 0f01 	tst.w	ip, #1
  40928c:	d001      	beq.n	409292 <_dtoa_r+0xbb2>
  40928e:	e504      	b.n	408c9a <_dtoa_r+0x5ba>
  409290:	4615      	mov	r5, r2
  409292:	f815 3c01 	ldrb.w	r3, [r5, #-1]
  409296:	2b30      	cmp	r3, #48	; 0x30
  409298:	f105 32ff 	add.w	r2, r5, #4294967295
  40929c:	d0f8      	beq.n	409290 <_dtoa_r+0xbb0>
  40929e:	e50c      	b.n	408cba <_dtoa_r+0x5da>
  4092a0:	9b04      	ldr	r3, [sp, #16]
  4092a2:	425d      	negs	r5, r3
  4092a4:	2d00      	cmp	r5, #0
  4092a6:	f000 80bd 	beq.w	409424 <_dtoa_r+0xd44>
  4092aa:	4b81      	ldr	r3, [pc, #516]	; (4094b0 <_dtoa_r+0xdd0>)
  4092ac:	f005 020f 	and.w	r2, r5, #15
  4092b0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  4092b4:	e9d3 2300 	ldrd	r2, r3, [r3]
  4092b8:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
  4092bc:	f001 fdc2 	bl	40ae44 <__aeabi_dmul>
  4092c0:	112d      	asrs	r5, r5, #4
  4092c2:	e9cd 0102 	strd	r0, r1, [sp, #8]
  4092c6:	f000 812c 	beq.w	409522 <_dtoa_r+0xe42>
  4092ca:	4e7a      	ldr	r6, [pc, #488]	; (4094b4 <_dtoa_r+0xdd4>)
  4092cc:	f04f 0802 	mov.w	r8, #2
  4092d0:	07eb      	lsls	r3, r5, #31
  4092d2:	d505      	bpl.n	4092e0 <_dtoa_r+0xc00>
  4092d4:	e9d6 2300 	ldrd	r2, r3, [r6]
  4092d8:	f108 0801 	add.w	r8, r8, #1
  4092dc:	f001 fdb2 	bl	40ae44 <__aeabi_dmul>
  4092e0:	106d      	asrs	r5, r5, #1
  4092e2:	f106 0608 	add.w	r6, r6, #8
  4092e6:	d1f3      	bne.n	4092d0 <_dtoa_r+0xbf0>
  4092e8:	e9cd 0102 	strd	r0, r1, [sp, #8]
  4092ec:	e5ea      	b.n	408ec4 <_dtoa_r+0x7e4>
  4092ee:	9a04      	ldr	r2, [sp, #16]
  4092f0:	3201      	adds	r2, #1
  4092f2:	9204      	str	r2, [sp, #16]
  4092f4:	9a07      	ldr	r2, [sp, #28]
  4092f6:	2330      	movs	r3, #48	; 0x30
  4092f8:	7013      	strb	r3, [r2, #0]
  4092fa:	2331      	movs	r3, #49	; 0x31
  4092fc:	7013      	strb	r3, [r2, #0]
  4092fe:	f7ff bbc2 	b.w	408a86 <_dtoa_r+0x3a6>
  409302:	6871      	ldr	r1, [r6, #4]
  409304:	4620      	mov	r0, r4
  409306:	f000 fdb9 	bl	409e7c <_Balloc>
  40930a:	6933      	ldr	r3, [r6, #16]
  40930c:	1c9a      	adds	r2, r3, #2
  40930e:	4605      	mov	r5, r0
  409310:	0092      	lsls	r2, r2, #2
  409312:	f106 010c 	add.w	r1, r6, #12
  409316:	300c      	adds	r0, #12
  409318:	f7fd fc0e 	bl	406b38 <memcpy>
  40931c:	4620      	mov	r0, r4
  40931e:	4629      	mov	r1, r5
  409320:	2201      	movs	r2, #1
  409322:	f000 ff5f 	bl	40a1e4 <__lshift>
  409326:	4681      	mov	r9, r0
  409328:	e503      	b.n	408d32 <_dtoa_r+0x652>
  40932a:	f1bc 0f39 	cmp.w	ip, #57	; 0x39
  40932e:	f000 80a8 	beq.w	409482 <_dtoa_r+0xda2>
  409332:	f10c 0c01 	add.w	ip, ip, #1
  409336:	46b2      	mov	sl, r6
  409338:	f887 c000 	strb.w	ip, [r7]
  40933c:	1c7d      	adds	r5, r7, #1
  40933e:	464e      	mov	r6, r9
  409340:	e4bb      	b.n	408cba <_dtoa_r+0x5da>
  409342:	46b2      	mov	sl, r6
  409344:	464e      	mov	r6, r9
  409346:	e498      	b.n	408c7a <_dtoa_r+0x59a>
  409348:	f04f 0800 	mov.w	r8, #0
  40934c:	4646      	mov	r6, r8
  40934e:	e717      	b.n	409180 <_dtoa_r+0xaa0>
  409350:	4957      	ldr	r1, [pc, #348]	; (4094b0 <_dtoa_r+0xdd0>)
  409352:	f109 33ff 	add.w	r3, r9, #4294967295
  409356:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
  40935a:	4632      	mov	r2, r6
  40935c:	9313      	str	r3, [sp, #76]	; 0x4c
  40935e:	e9d1 0100 	ldrd	r0, r1, [r1]
  409362:	463b      	mov	r3, r7
  409364:	f001 fd6e 	bl	40ae44 <__aeabi_dmul>
  409368:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
  40936c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
  409370:	4639      	mov	r1, r7
  409372:	4630      	mov	r0, r6
  409374:	f002 f800 	bl	40b378 <__aeabi_d2iz>
  409378:	4605      	mov	r5, r0
  40937a:	f001 fcfd 	bl	40ad78 <__aeabi_i2d>
  40937e:	4602      	mov	r2, r0
  409380:	460b      	mov	r3, r1
  409382:	4630      	mov	r0, r6
  409384:	4639      	mov	r1, r7
  409386:	f001 fba9 	bl	40aadc <__aeabi_dsub>
  40938a:	9a07      	ldr	r2, [sp, #28]
  40938c:	3530      	adds	r5, #48	; 0x30
  40938e:	f1b9 0f01 	cmp.w	r9, #1
  409392:	7015      	strb	r5, [r2, #0]
  409394:	4606      	mov	r6, r0
  409396:	460f      	mov	r7, r1
  409398:	f102 0501 	add.w	r5, r2, #1
  40939c:	d023      	beq.n	4093e6 <_dtoa_r+0xd06>
  40939e:	9b07      	ldr	r3, [sp, #28]
  4093a0:	f8cd a008 	str.w	sl, [sp, #8]
  4093a4:	444b      	add	r3, r9
  4093a6:	465e      	mov	r6, fp
  4093a8:	469a      	mov	sl, r3
  4093aa:	46ab      	mov	fp, r5
  4093ac:	2200      	movs	r2, #0
  4093ae:	4b42      	ldr	r3, [pc, #264]	; (4094b8 <_dtoa_r+0xdd8>)
  4093b0:	f001 fd48 	bl	40ae44 <__aeabi_dmul>
  4093b4:	4689      	mov	r9, r1
  4093b6:	4680      	mov	r8, r0
  4093b8:	f001 ffde 	bl	40b378 <__aeabi_d2iz>
  4093bc:	4607      	mov	r7, r0
  4093be:	f001 fcdb 	bl	40ad78 <__aeabi_i2d>
  4093c2:	3730      	adds	r7, #48	; 0x30
  4093c4:	4602      	mov	r2, r0
  4093c6:	460b      	mov	r3, r1
  4093c8:	4640      	mov	r0, r8
  4093ca:	4649      	mov	r1, r9
  4093cc:	f001 fb86 	bl	40aadc <__aeabi_dsub>
  4093d0:	f80b 7b01 	strb.w	r7, [fp], #1
  4093d4:	45d3      	cmp	fp, sl
  4093d6:	d1e9      	bne.n	4093ac <_dtoa_r+0xccc>
  4093d8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  4093da:	f8dd a008 	ldr.w	sl, [sp, #8]
  4093de:	46b3      	mov	fp, r6
  4093e0:	460f      	mov	r7, r1
  4093e2:	4606      	mov	r6, r0
  4093e4:	441d      	add	r5, r3
  4093e6:	2200      	movs	r2, #0
  4093e8:	4b34      	ldr	r3, [pc, #208]	; (4094bc <_dtoa_r+0xddc>)
  4093ea:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
  4093ee:	f001 fb77 	bl	40aae0 <__adddf3>
  4093f2:	4632      	mov	r2, r6
  4093f4:	463b      	mov	r3, r7
  4093f6:	f001 ff97 	bl	40b328 <__aeabi_dcmplt>
  4093fa:	2800      	cmp	r0, #0
  4093fc:	d047      	beq.n	40948e <_dtoa_r+0xdae>
  4093fe:	9b12      	ldr	r3, [sp, #72]	; 0x48
  409400:	9304      	str	r3, [sp, #16]
  409402:	f815 8c01 	ldrb.w	r8, [r5, #-1]
  409406:	f7ff bb2c 	b.w	408a62 <_dtoa_r+0x382>
  40940a:	9b05      	ldr	r3, [sp, #20]
  40940c:	9a06      	ldr	r2, [sp, #24]
  40940e:	1a9d      	subs	r5, r3, r2
  409410:	2300      	movs	r3, #0
  409412:	f7ff bb60 	b.w	408ad6 <_dtoa_r+0x3f6>
  409416:	9b14      	ldr	r3, [sp, #80]	; 0x50
  409418:	9f08      	ldr	r7, [sp, #32]
  40941a:	9d05      	ldr	r5, [sp, #20]
  40941c:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
  409420:	f7ff bb59 	b.w	408ad6 <_dtoa_r+0x3f6>
  409424:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
  409428:	f04f 0802 	mov.w	r8, #2
  40942c:	e9cd 2302 	strd	r2, r3, [sp, #8]
  409430:	e548      	b.n	408ec4 <_dtoa_r+0x7e4>
  409432:	9b06      	ldr	r3, [sp, #24]
  409434:	2b00      	cmp	r3, #0
  409436:	f43f aeb6 	beq.w	4091a6 <_dtoa_r+0xac6>
  40943a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
  40943c:	2d00      	cmp	r5, #0
  40943e:	f77f aedf 	ble.w	409200 <_dtoa_r+0xb20>
  409442:	2200      	movs	r2, #0
  409444:	4b1c      	ldr	r3, [pc, #112]	; (4094b8 <_dtoa_r+0xdd8>)
  409446:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  40944a:	f001 fcfb 	bl	40ae44 <__aeabi_dmul>
  40944e:	4606      	mov	r6, r0
  409450:	460f      	mov	r7, r1
  409452:	f108 0001 	add.w	r0, r8, #1
  409456:	e9cd 6702 	strd	r6, r7, [sp, #8]
  40945a:	f001 fc8d 	bl	40ad78 <__aeabi_i2d>
  40945e:	4602      	mov	r2, r0
  409460:	460b      	mov	r3, r1
  409462:	4630      	mov	r0, r6
  409464:	4639      	mov	r1, r7
  409466:	f001 fced 	bl	40ae44 <__aeabi_dmul>
  40946a:	4b0f      	ldr	r3, [pc, #60]	; (4094a8 <_dtoa_r+0xdc8>)
  40946c:	2200      	movs	r2, #0
  40946e:	f001 fb37 	bl	40aae0 <__adddf3>
  409472:	9b04      	ldr	r3, [sp, #16]
  409474:	3b01      	subs	r3, #1
  409476:	4606      	mov	r6, r0
  409478:	f1a1 7750 	sub.w	r7, r1, #54525952	; 0x3400000
  40947c:	9312      	str	r3, [sp, #72]	; 0x48
  40947e:	46a9      	mov	r9, r5
  409480:	e541      	b.n	408f06 <_dtoa_r+0x826>
  409482:	2239      	movs	r2, #57	; 0x39
  409484:	46b2      	mov	sl, r6
  409486:	703a      	strb	r2, [r7, #0]
  409488:	464e      	mov	r6, r9
  40948a:	1c7d      	adds	r5, r7, #1
  40948c:	e407      	b.n	408c9e <_dtoa_r+0x5be>
  40948e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
  409492:	2000      	movs	r0, #0
  409494:	4909      	ldr	r1, [pc, #36]	; (4094bc <_dtoa_r+0xddc>)
  409496:	f001 fb21 	bl	40aadc <__aeabi_dsub>
  40949a:	4632      	mov	r2, r6
  40949c:	463b      	mov	r3, r7
  40949e:	f001 ff61 	bl	40b364 <__aeabi_dcmpgt>
  4094a2:	b970      	cbnz	r0, 4094c2 <_dtoa_r+0xde2>
  4094a4:	e6ac      	b.n	409200 <_dtoa_r+0xb20>
  4094a6:	bf00      	nop
  4094a8:	401c0000 	.word	0x401c0000
  4094ac:	40140000 	.word	0x40140000
  4094b0:	0040c208 	.word	0x0040c208
  4094b4:	0040c2e0 	.word	0x0040c2e0
  4094b8:	40240000 	.word	0x40240000
  4094bc:	3fe00000 	.word	0x3fe00000
  4094c0:	4615      	mov	r5, r2
  4094c2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
  4094c6:	2b30      	cmp	r3, #48	; 0x30
  4094c8:	f105 32ff 	add.w	r2, r5, #4294967295
  4094cc:	d0f8      	beq.n	4094c0 <_dtoa_r+0xde0>
  4094ce:	9b12      	ldr	r3, [sp, #72]	; 0x48
  4094d0:	9304      	str	r3, [sp, #16]
  4094d2:	f7ff bad8 	b.w	408a86 <_dtoa_r+0x3a6>
  4094d6:	4643      	mov	r3, r8
  4094d8:	f8dd b008 	ldr.w	fp, [sp, #8]
  4094dc:	46a0      	mov	r8, r4
  4094de:	461c      	mov	r4, r3
  4094e0:	9b12      	ldr	r3, [sp, #72]	; 0x48
  4094e2:	9304      	str	r3, [sp, #16]
  4094e4:	f7ff babd 	b.w	408a62 <_dtoa_r+0x382>
  4094e8:	46b9      	mov	r9, r7
  4094ea:	f7ff bb71 	b.w	408bd0 <_dtoa_r+0x4f0>
  4094ee:	f1bc 0f39 	cmp.w	ip, #57	; 0x39
  4094f2:	d0c6      	beq.n	409482 <_dtoa_r+0xda2>
  4094f4:	f1ba 0f00 	cmp.w	sl, #0
  4094f8:	f77f aebf 	ble.w	40927a <_dtoa_r+0xb9a>
  4094fc:	f105 0c31 	add.w	ip, r5, #49	; 0x31
  409500:	e6bb      	b.n	40927a <_dtoa_r+0xb9a>
  409502:	f47f aeba 	bne.w	40927a <_dtoa_r+0xb9a>
  409506:	f01c 0f01 	tst.w	ip, #1
  40950a:	f43f aeb6 	beq.w	40927a <_dtoa_r+0xb9a>
  40950e:	e6ae      	b.n	40926e <_dtoa_r+0xb8e>
  409510:	f04f 0800 	mov.w	r8, #0
  409514:	4646      	mov	r6, r8
  409516:	e5a9      	b.n	40906c <_dtoa_r+0x98c>
  409518:	9b20      	ldr	r3, [sp, #128]	; 0x80
  40951a:	2b02      	cmp	r3, #2
  40951c:	dc04      	bgt.n	409528 <_dtoa_r+0xe48>
  40951e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  409520:	e602      	b.n	409128 <_dtoa_r+0xa48>
  409522:	f04f 0802 	mov.w	r8, #2
  409526:	e4cd      	b.n	408ec4 <_dtoa_r+0x7e4>
  409528:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  40952a:	9306      	str	r3, [sp, #24]
  40952c:	e618      	b.n	409160 <_dtoa_r+0xa80>
  40952e:	9b20      	ldr	r3, [sp, #128]	; 0x80
  409530:	2b02      	cmp	r3, #2
  409532:	dcf9      	bgt.n	409528 <_dtoa_r+0xe48>
  409534:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  409536:	f7ff bbee 	b.w	408d16 <_dtoa_r+0x636>
  40953a:	2500      	movs	r5, #0
  40953c:	6465      	str	r5, [r4, #68]	; 0x44
  40953e:	4629      	mov	r1, r5
  409540:	4620      	mov	r0, r4
  409542:	f000 fc9b 	bl	409e7c <_Balloc>
  409546:	f04f 33ff 	mov.w	r3, #4294967295
  40954a:	9306      	str	r3, [sp, #24]
  40954c:	930c      	str	r3, [sp, #48]	; 0x30
  40954e:	2301      	movs	r3, #1
  409550:	9007      	str	r0, [sp, #28]
  409552:	9521      	str	r5, [sp, #132]	; 0x84
  409554:	6420      	str	r0, [r4, #64]	; 0x40
  409556:	9309      	str	r3, [sp, #36]	; 0x24
  409558:	f7ff b9d2 	b.w	408900 <_dtoa_r+0x220>
  40955c:	f43f ab4d 	beq.w	408bfa <_dtoa_r+0x51a>
  409560:	f1c0 003c 	rsb	r0, r0, #60	; 0x3c
  409564:	f7ff bb44 	b.w	408bf0 <_dtoa_r+0x510>
  409568:	2301      	movs	r3, #1
  40956a:	9309      	str	r3, [sp, #36]	; 0x24
  40956c:	e559      	b.n	409022 <_dtoa_r+0x942>
  40956e:	2501      	movs	r5, #1
  409570:	f7ff b990 	b.w	408894 <_dtoa_r+0x1b4>

00409574 <__libc_fini_array>:
  409574:	b538      	push	{r3, r4, r5, lr}
  409576:	4b08      	ldr	r3, [pc, #32]	; (409598 <__libc_fini_array+0x24>)
  409578:	4d08      	ldr	r5, [pc, #32]	; (40959c <__libc_fini_array+0x28>)
  40957a:	1aed      	subs	r5, r5, r3
  40957c:	10ac      	asrs	r4, r5, #2
  40957e:	bf18      	it	ne
  409580:	18ed      	addne	r5, r5, r3
  409582:	d005      	beq.n	409590 <__libc_fini_array+0x1c>
  409584:	3c01      	subs	r4, #1
  409586:	f855 3d04 	ldr.w	r3, [r5, #-4]!
  40958a:	4798      	blx	r3
  40958c:	2c00      	cmp	r4, #0
  40958e:	d1f9      	bne.n	409584 <__libc_fini_array+0x10>
  409590:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  409594:	f002 bec2 	b.w	40c31c <_fini>
  409598:	0040c328 	.word	0x0040c328
  40959c:	0040c32c 	.word	0x0040c32c

004095a0 <_malloc_trim_r>:
  4095a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4095a2:	4f23      	ldr	r7, [pc, #140]	; (409630 <_malloc_trim_r+0x90>)
  4095a4:	460c      	mov	r4, r1
  4095a6:	4606      	mov	r6, r0
  4095a8:	f000 fc64 	bl	409e74 <__malloc_lock>
  4095ac:	68bb      	ldr	r3, [r7, #8]
  4095ae:	685d      	ldr	r5, [r3, #4]
  4095b0:	f025 0503 	bic.w	r5, r5, #3
  4095b4:	1b29      	subs	r1, r5, r4
  4095b6:	f601 71ef 	addw	r1, r1, #4079	; 0xfef
  4095ba:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
  4095be:	f021 010f 	bic.w	r1, r1, #15
  4095c2:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
  4095c6:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
  4095ca:	db07      	blt.n	4095dc <_malloc_trim_r+0x3c>
  4095cc:	4630      	mov	r0, r6
  4095ce:	2100      	movs	r1, #0
  4095d0:	f001 f96a 	bl	40a8a8 <_sbrk_r>
  4095d4:	68bb      	ldr	r3, [r7, #8]
  4095d6:	442b      	add	r3, r5
  4095d8:	4298      	cmp	r0, r3
  4095da:	d004      	beq.n	4095e6 <_malloc_trim_r+0x46>
  4095dc:	4630      	mov	r0, r6
  4095de:	f000 fc4b 	bl	409e78 <__malloc_unlock>
  4095e2:	2000      	movs	r0, #0
  4095e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4095e6:	4630      	mov	r0, r6
  4095e8:	4261      	negs	r1, r4
  4095ea:	f001 f95d 	bl	40a8a8 <_sbrk_r>
  4095ee:	3001      	adds	r0, #1
  4095f0:	d00d      	beq.n	40960e <_malloc_trim_r+0x6e>
  4095f2:	4b10      	ldr	r3, [pc, #64]	; (409634 <_malloc_trim_r+0x94>)
  4095f4:	68ba      	ldr	r2, [r7, #8]
  4095f6:	6819      	ldr	r1, [r3, #0]
  4095f8:	1b2d      	subs	r5, r5, r4
  4095fa:	f045 0501 	orr.w	r5, r5, #1
  4095fe:	4630      	mov	r0, r6
  409600:	1b09      	subs	r1, r1, r4
  409602:	6055      	str	r5, [r2, #4]
  409604:	6019      	str	r1, [r3, #0]
  409606:	f000 fc37 	bl	409e78 <__malloc_unlock>
  40960a:	2001      	movs	r0, #1
  40960c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40960e:	4630      	mov	r0, r6
  409610:	2100      	movs	r1, #0
  409612:	f001 f949 	bl	40a8a8 <_sbrk_r>
  409616:	68ba      	ldr	r2, [r7, #8]
  409618:	1a83      	subs	r3, r0, r2
  40961a:	2b0f      	cmp	r3, #15
  40961c:	ddde      	ble.n	4095dc <_malloc_trim_r+0x3c>
  40961e:	4c06      	ldr	r4, [pc, #24]	; (409638 <_malloc_trim_r+0x98>)
  409620:	4904      	ldr	r1, [pc, #16]	; (409634 <_malloc_trim_r+0x94>)
  409622:	6824      	ldr	r4, [r4, #0]
  409624:	f043 0301 	orr.w	r3, r3, #1
  409628:	1b00      	subs	r0, r0, r4
  40962a:	6053      	str	r3, [r2, #4]
  40962c:	6008      	str	r0, [r1, #0]
  40962e:	e7d5      	b.n	4095dc <_malloc_trim_r+0x3c>
  409630:	20000520 	.word	0x20000520
  409634:	2000b080 	.word	0x2000b080
  409638:	2000092c 	.word	0x2000092c

0040963c <_free_r>:
  40963c:	2900      	cmp	r1, #0
  40963e:	d04e      	beq.n	4096de <_free_r+0xa2>
  409640:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  409644:	460c      	mov	r4, r1
  409646:	4680      	mov	r8, r0
  409648:	f000 fc14 	bl	409e74 <__malloc_lock>
  40964c:	f854 7c04 	ldr.w	r7, [r4, #-4]
  409650:	4962      	ldr	r1, [pc, #392]	; (4097dc <_free_r+0x1a0>)
  409652:	f027 0201 	bic.w	r2, r7, #1
  409656:	f1a4 0508 	sub.w	r5, r4, #8
  40965a:	18ab      	adds	r3, r5, r2
  40965c:	688e      	ldr	r6, [r1, #8]
  40965e:	6858      	ldr	r0, [r3, #4]
  409660:	429e      	cmp	r6, r3
  409662:	f020 0003 	bic.w	r0, r0, #3
  409666:	d05a      	beq.n	40971e <_free_r+0xe2>
  409668:	07fe      	lsls	r6, r7, #31
  40966a:	6058      	str	r0, [r3, #4]
  40966c:	d40b      	bmi.n	409686 <_free_r+0x4a>
  40966e:	f854 7c08 	ldr.w	r7, [r4, #-8]
  409672:	1bed      	subs	r5, r5, r7
  409674:	f101 0e08 	add.w	lr, r1, #8
  409678:	68ac      	ldr	r4, [r5, #8]
  40967a:	4574      	cmp	r4, lr
  40967c:	443a      	add	r2, r7
  40967e:	d067      	beq.n	409750 <_free_r+0x114>
  409680:	68ef      	ldr	r7, [r5, #12]
  409682:	60e7      	str	r7, [r4, #12]
  409684:	60bc      	str	r4, [r7, #8]
  409686:	181c      	adds	r4, r3, r0
  409688:	6864      	ldr	r4, [r4, #4]
  40968a:	07e4      	lsls	r4, r4, #31
  40968c:	d40c      	bmi.n	4096a8 <_free_r+0x6c>
  40968e:	4f54      	ldr	r7, [pc, #336]	; (4097e0 <_free_r+0x1a4>)
  409690:	689c      	ldr	r4, [r3, #8]
  409692:	42bc      	cmp	r4, r7
  409694:	4402      	add	r2, r0
  409696:	d07c      	beq.n	409792 <_free_r+0x156>
  409698:	68d8      	ldr	r0, [r3, #12]
  40969a:	60e0      	str	r0, [r4, #12]
  40969c:	f042 0301 	orr.w	r3, r2, #1
  4096a0:	6084      	str	r4, [r0, #8]
  4096a2:	606b      	str	r3, [r5, #4]
  4096a4:	50aa      	str	r2, [r5, r2]
  4096a6:	e003      	b.n	4096b0 <_free_r+0x74>
  4096a8:	f042 0301 	orr.w	r3, r2, #1
  4096ac:	606b      	str	r3, [r5, #4]
  4096ae:	50aa      	str	r2, [r5, r2]
  4096b0:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
  4096b4:	d214      	bcs.n	4096e0 <_free_r+0xa4>
  4096b6:	08d2      	lsrs	r2, r2, #3
  4096b8:	eb01 03c2 	add.w	r3, r1, r2, lsl #3
  4096bc:	6848      	ldr	r0, [r1, #4]
  4096be:	689f      	ldr	r7, [r3, #8]
  4096c0:	60af      	str	r7, [r5, #8]
  4096c2:	1092      	asrs	r2, r2, #2
  4096c4:	2401      	movs	r4, #1
  4096c6:	fa04 f202 	lsl.w	r2, r4, r2
  4096ca:	4310      	orrs	r0, r2
  4096cc:	60eb      	str	r3, [r5, #12]
  4096ce:	6048      	str	r0, [r1, #4]
  4096d0:	609d      	str	r5, [r3, #8]
  4096d2:	60fd      	str	r5, [r7, #12]
  4096d4:	4640      	mov	r0, r8
  4096d6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  4096da:	f000 bbcd 	b.w	409e78 <__malloc_unlock>
  4096de:	4770      	bx	lr
  4096e0:	0a53      	lsrs	r3, r2, #9
  4096e2:	2b04      	cmp	r3, #4
  4096e4:	d847      	bhi.n	409776 <_free_r+0x13a>
  4096e6:	0993      	lsrs	r3, r2, #6
  4096e8:	f103 0438 	add.w	r4, r3, #56	; 0x38
  4096ec:	0060      	lsls	r0, r4, #1
  4096ee:	eb01 0080 	add.w	r0, r1, r0, lsl #2
  4096f2:	493a      	ldr	r1, [pc, #232]	; (4097dc <_free_r+0x1a0>)
  4096f4:	6883      	ldr	r3, [r0, #8]
  4096f6:	4283      	cmp	r3, r0
  4096f8:	d043      	beq.n	409782 <_free_r+0x146>
  4096fa:	6859      	ldr	r1, [r3, #4]
  4096fc:	f021 0103 	bic.w	r1, r1, #3
  409700:	4291      	cmp	r1, r2
  409702:	d902      	bls.n	40970a <_free_r+0xce>
  409704:	689b      	ldr	r3, [r3, #8]
  409706:	4298      	cmp	r0, r3
  409708:	d1f7      	bne.n	4096fa <_free_r+0xbe>
  40970a:	68da      	ldr	r2, [r3, #12]
  40970c:	60ea      	str	r2, [r5, #12]
  40970e:	60ab      	str	r3, [r5, #8]
  409710:	4640      	mov	r0, r8
  409712:	6095      	str	r5, [r2, #8]
  409714:	60dd      	str	r5, [r3, #12]
  409716:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  40971a:	f000 bbad 	b.w	409e78 <__malloc_unlock>
  40971e:	07ff      	lsls	r7, r7, #31
  409720:	4402      	add	r2, r0
  409722:	d407      	bmi.n	409734 <_free_r+0xf8>
  409724:	f854 3c08 	ldr.w	r3, [r4, #-8]
  409728:	1aed      	subs	r5, r5, r3
  40972a:	441a      	add	r2, r3
  40972c:	68a8      	ldr	r0, [r5, #8]
  40972e:	68eb      	ldr	r3, [r5, #12]
  409730:	60c3      	str	r3, [r0, #12]
  409732:	6098      	str	r0, [r3, #8]
  409734:	4b2b      	ldr	r3, [pc, #172]	; (4097e4 <_free_r+0x1a8>)
  409736:	681b      	ldr	r3, [r3, #0]
  409738:	f042 0001 	orr.w	r0, r2, #1
  40973c:	429a      	cmp	r2, r3
  40973e:	6068      	str	r0, [r5, #4]
  409740:	608d      	str	r5, [r1, #8]
  409742:	d3c7      	bcc.n	4096d4 <_free_r+0x98>
  409744:	4b28      	ldr	r3, [pc, #160]	; (4097e8 <_free_r+0x1ac>)
  409746:	4640      	mov	r0, r8
  409748:	6819      	ldr	r1, [r3, #0]
  40974a:	f7ff ff29 	bl	4095a0 <_malloc_trim_r>
  40974e:	e7c1      	b.n	4096d4 <_free_r+0x98>
  409750:	1819      	adds	r1, r3, r0
  409752:	6849      	ldr	r1, [r1, #4]
  409754:	07c9      	lsls	r1, r1, #31
  409756:	d409      	bmi.n	40976c <_free_r+0x130>
  409758:	68d9      	ldr	r1, [r3, #12]
  40975a:	689b      	ldr	r3, [r3, #8]
  40975c:	4402      	add	r2, r0
  40975e:	f042 0001 	orr.w	r0, r2, #1
  409762:	60d9      	str	r1, [r3, #12]
  409764:	608b      	str	r3, [r1, #8]
  409766:	6068      	str	r0, [r5, #4]
  409768:	50aa      	str	r2, [r5, r2]
  40976a:	e7b3      	b.n	4096d4 <_free_r+0x98>
  40976c:	f042 0301 	orr.w	r3, r2, #1
  409770:	606b      	str	r3, [r5, #4]
  409772:	50aa      	str	r2, [r5, r2]
  409774:	e7ae      	b.n	4096d4 <_free_r+0x98>
  409776:	2b14      	cmp	r3, #20
  409778:	d814      	bhi.n	4097a4 <_free_r+0x168>
  40977a:	f103 045b 	add.w	r4, r3, #91	; 0x5b
  40977e:	0060      	lsls	r0, r4, #1
  409780:	e7b5      	b.n	4096ee <_free_r+0xb2>
  409782:	684a      	ldr	r2, [r1, #4]
  409784:	10a4      	asrs	r4, r4, #2
  409786:	2001      	movs	r0, #1
  409788:	40a0      	lsls	r0, r4
  40978a:	4302      	orrs	r2, r0
  40978c:	604a      	str	r2, [r1, #4]
  40978e:	461a      	mov	r2, r3
  409790:	e7bc      	b.n	40970c <_free_r+0xd0>
  409792:	f042 0301 	orr.w	r3, r2, #1
  409796:	614d      	str	r5, [r1, #20]
  409798:	610d      	str	r5, [r1, #16]
  40979a:	60ec      	str	r4, [r5, #12]
  40979c:	60ac      	str	r4, [r5, #8]
  40979e:	606b      	str	r3, [r5, #4]
  4097a0:	50aa      	str	r2, [r5, r2]
  4097a2:	e797      	b.n	4096d4 <_free_r+0x98>
  4097a4:	2b54      	cmp	r3, #84	; 0x54
  4097a6:	d804      	bhi.n	4097b2 <_free_r+0x176>
  4097a8:	0b13      	lsrs	r3, r2, #12
  4097aa:	f103 046e 	add.w	r4, r3, #110	; 0x6e
  4097ae:	0060      	lsls	r0, r4, #1
  4097b0:	e79d      	b.n	4096ee <_free_r+0xb2>
  4097b2:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
  4097b6:	d804      	bhi.n	4097c2 <_free_r+0x186>
  4097b8:	0bd3      	lsrs	r3, r2, #15
  4097ba:	f103 0477 	add.w	r4, r3, #119	; 0x77
  4097be:	0060      	lsls	r0, r4, #1
  4097c0:	e795      	b.n	4096ee <_free_r+0xb2>
  4097c2:	f240 5054 	movw	r0, #1364	; 0x554
  4097c6:	4283      	cmp	r3, r0
  4097c8:	d804      	bhi.n	4097d4 <_free_r+0x198>
  4097ca:	0c93      	lsrs	r3, r2, #18
  4097cc:	f103 047c 	add.w	r4, r3, #124	; 0x7c
  4097d0:	0060      	lsls	r0, r4, #1
  4097d2:	e78c      	b.n	4096ee <_free_r+0xb2>
  4097d4:	20fc      	movs	r0, #252	; 0xfc
  4097d6:	247e      	movs	r4, #126	; 0x7e
  4097d8:	e789      	b.n	4096ee <_free_r+0xb2>
  4097da:	bf00      	nop
  4097dc:	20000520 	.word	0x20000520
  4097e0:	20000528 	.word	0x20000528
  4097e4:	20000928 	.word	0x20000928
  4097e8:	2000b07c 	.word	0x2000b07c

004097ec <_localeconv_r>:
  4097ec:	4800      	ldr	r0, [pc, #0]	; (4097f0 <_localeconv_r+0x4>)
  4097ee:	4770      	bx	lr
  4097f0:	200004e8 	.word	0x200004e8

004097f4 <_malloc_r>:
  4097f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4097f8:	f101 050b 	add.w	r5, r1, #11
  4097fc:	2d16      	cmp	r5, #22
  4097fe:	b083      	sub	sp, #12
  409800:	4606      	mov	r6, r0
  409802:	d927      	bls.n	409854 <_malloc_r+0x60>
  409804:	f035 0507 	bics.w	r5, r5, #7
  409808:	f100 80b6 	bmi.w	409978 <_malloc_r+0x184>
  40980c:	42a9      	cmp	r1, r5
  40980e:	f200 80b3 	bhi.w	409978 <_malloc_r+0x184>
  409812:	f000 fb2f 	bl	409e74 <__malloc_lock>
  409816:	f5b5 7ffc 	cmp.w	r5, #504	; 0x1f8
  40981a:	d222      	bcs.n	409862 <_malloc_r+0x6e>
  40981c:	4fc2      	ldr	r7, [pc, #776]	; (409b28 <_malloc_r+0x334>)
  40981e:	08e8      	lsrs	r0, r5, #3
  409820:	eb07 03c0 	add.w	r3, r7, r0, lsl #3
  409824:	68dc      	ldr	r4, [r3, #12]
  409826:	429c      	cmp	r4, r3
  409828:	f000 81c8 	beq.w	409bbc <_malloc_r+0x3c8>
  40982c:	6863      	ldr	r3, [r4, #4]
  40982e:	68e1      	ldr	r1, [r4, #12]
  409830:	68a5      	ldr	r5, [r4, #8]
  409832:	f023 0303 	bic.w	r3, r3, #3
  409836:	4423      	add	r3, r4
  409838:	4630      	mov	r0, r6
  40983a:	685a      	ldr	r2, [r3, #4]
  40983c:	60e9      	str	r1, [r5, #12]
  40983e:	f042 0201 	orr.w	r2, r2, #1
  409842:	608d      	str	r5, [r1, #8]
  409844:	605a      	str	r2, [r3, #4]
  409846:	f000 fb17 	bl	409e78 <__malloc_unlock>
  40984a:	3408      	adds	r4, #8
  40984c:	4620      	mov	r0, r4
  40984e:	b003      	add	sp, #12
  409850:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  409854:	2910      	cmp	r1, #16
  409856:	f200 808f 	bhi.w	409978 <_malloc_r+0x184>
  40985a:	f000 fb0b 	bl	409e74 <__malloc_lock>
  40985e:	2510      	movs	r5, #16
  409860:	e7dc      	b.n	40981c <_malloc_r+0x28>
  409862:	0a68      	lsrs	r0, r5, #9
  409864:	f000 808f 	beq.w	409986 <_malloc_r+0x192>
  409868:	2804      	cmp	r0, #4
  40986a:	f200 8154 	bhi.w	409b16 <_malloc_r+0x322>
  40986e:	09a8      	lsrs	r0, r5, #6
  409870:	3038      	adds	r0, #56	; 0x38
  409872:	0041      	lsls	r1, r0, #1
  409874:	4fac      	ldr	r7, [pc, #688]	; (409b28 <_malloc_r+0x334>)
  409876:	eb07 0181 	add.w	r1, r7, r1, lsl #2
  40987a:	68cc      	ldr	r4, [r1, #12]
  40987c:	42a1      	cmp	r1, r4
  40987e:	d106      	bne.n	40988e <_malloc_r+0x9a>
  409880:	e00c      	b.n	40989c <_malloc_r+0xa8>
  409882:	2a00      	cmp	r2, #0
  409884:	f280 8082 	bge.w	40998c <_malloc_r+0x198>
  409888:	68e4      	ldr	r4, [r4, #12]
  40988a:	42a1      	cmp	r1, r4
  40988c:	d006      	beq.n	40989c <_malloc_r+0xa8>
  40988e:	6863      	ldr	r3, [r4, #4]
  409890:	f023 0303 	bic.w	r3, r3, #3
  409894:	1b5a      	subs	r2, r3, r5
  409896:	2a0f      	cmp	r2, #15
  409898:	ddf3      	ble.n	409882 <_malloc_r+0x8e>
  40989a:	3801      	subs	r0, #1
  40989c:	3001      	adds	r0, #1
  40989e:	49a2      	ldr	r1, [pc, #648]	; (409b28 <_malloc_r+0x334>)
  4098a0:	693c      	ldr	r4, [r7, #16]
  4098a2:	f101 0e08 	add.w	lr, r1, #8
  4098a6:	4574      	cmp	r4, lr
  4098a8:	f000 817d 	beq.w	409ba6 <_malloc_r+0x3b2>
  4098ac:	6863      	ldr	r3, [r4, #4]
  4098ae:	f023 0303 	bic.w	r3, r3, #3
  4098b2:	1b5a      	subs	r2, r3, r5
  4098b4:	2a0f      	cmp	r2, #15
  4098b6:	f300 8163 	bgt.w	409b80 <_malloc_r+0x38c>
  4098ba:	2a00      	cmp	r2, #0
  4098bc:	f8c1 e014 	str.w	lr, [r1, #20]
  4098c0:	f8c1 e010 	str.w	lr, [r1, #16]
  4098c4:	da73      	bge.n	4099ae <_malloc_r+0x1ba>
  4098c6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  4098ca:	f080 8139 	bcs.w	409b40 <_malloc_r+0x34c>
  4098ce:	08db      	lsrs	r3, r3, #3
  4098d0:	eb01 08c3 	add.w	r8, r1, r3, lsl #3
  4098d4:	ea4f 0ca3 	mov.w	ip, r3, asr #2
  4098d8:	684a      	ldr	r2, [r1, #4]
  4098da:	f8d8 9008 	ldr.w	r9, [r8, #8]
  4098de:	f8c4 9008 	str.w	r9, [r4, #8]
  4098e2:	2301      	movs	r3, #1
  4098e4:	fa03 f30c 	lsl.w	r3, r3, ip
  4098e8:	4313      	orrs	r3, r2
  4098ea:	f8c4 800c 	str.w	r8, [r4, #12]
  4098ee:	604b      	str	r3, [r1, #4]
  4098f0:	f8c8 4008 	str.w	r4, [r8, #8]
  4098f4:	f8c9 400c 	str.w	r4, [r9, #12]
  4098f8:	1082      	asrs	r2, r0, #2
  4098fa:	2401      	movs	r4, #1
  4098fc:	4094      	lsls	r4, r2
  4098fe:	429c      	cmp	r4, r3
  409900:	d862      	bhi.n	4099c8 <_malloc_r+0x1d4>
  409902:	4223      	tst	r3, r4
  409904:	d106      	bne.n	409914 <_malloc_r+0x120>
  409906:	f020 0003 	bic.w	r0, r0, #3
  40990a:	0064      	lsls	r4, r4, #1
  40990c:	4223      	tst	r3, r4
  40990e:	f100 0004 	add.w	r0, r0, #4
  409912:	d0fa      	beq.n	40990a <_malloc_r+0x116>
  409914:	eb07 08c0 	add.w	r8, r7, r0, lsl #3
  409918:	46c4      	mov	ip, r8
  40991a:	4681      	mov	r9, r0
  40991c:	f8dc 300c 	ldr.w	r3, [ip, #12]
  409920:	459c      	cmp	ip, r3
  409922:	d107      	bne.n	409934 <_malloc_r+0x140>
  409924:	e141      	b.n	409baa <_malloc_r+0x3b6>
  409926:	2900      	cmp	r1, #0
  409928:	f280 8151 	bge.w	409bce <_malloc_r+0x3da>
  40992c:	68db      	ldr	r3, [r3, #12]
  40992e:	459c      	cmp	ip, r3
  409930:	f000 813b 	beq.w	409baa <_malloc_r+0x3b6>
  409934:	685a      	ldr	r2, [r3, #4]
  409936:	f022 0203 	bic.w	r2, r2, #3
  40993a:	1b51      	subs	r1, r2, r5
  40993c:	290f      	cmp	r1, #15
  40993e:	ddf2      	ble.n	409926 <_malloc_r+0x132>
  409940:	461c      	mov	r4, r3
  409942:	f8d3 c00c 	ldr.w	ip, [r3, #12]
  409946:	f854 8f08 	ldr.w	r8, [r4, #8]!
  40994a:	195a      	adds	r2, r3, r5
  40994c:	f045 0901 	orr.w	r9, r5, #1
  409950:	f041 0501 	orr.w	r5, r1, #1
  409954:	f8c3 9004 	str.w	r9, [r3, #4]
  409958:	4630      	mov	r0, r6
  40995a:	f8c8 c00c 	str.w	ip, [r8, #12]
  40995e:	f8cc 8008 	str.w	r8, [ip, #8]
  409962:	617a      	str	r2, [r7, #20]
  409964:	613a      	str	r2, [r7, #16]
  409966:	f8c2 e00c 	str.w	lr, [r2, #12]
  40996a:	f8c2 e008 	str.w	lr, [r2, #8]
  40996e:	6055      	str	r5, [r2, #4]
  409970:	5051      	str	r1, [r2, r1]
  409972:	f000 fa81 	bl	409e78 <__malloc_unlock>
  409976:	e769      	b.n	40984c <_malloc_r+0x58>
  409978:	2400      	movs	r4, #0
  40997a:	230c      	movs	r3, #12
  40997c:	4620      	mov	r0, r4
  40997e:	6033      	str	r3, [r6, #0]
  409980:	b003      	add	sp, #12
  409982:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  409986:	217e      	movs	r1, #126	; 0x7e
  409988:	203f      	movs	r0, #63	; 0x3f
  40998a:	e773      	b.n	409874 <_malloc_r+0x80>
  40998c:	4423      	add	r3, r4
  40998e:	68e1      	ldr	r1, [r4, #12]
  409990:	685a      	ldr	r2, [r3, #4]
  409992:	68a5      	ldr	r5, [r4, #8]
  409994:	f042 0201 	orr.w	r2, r2, #1
  409998:	60e9      	str	r1, [r5, #12]
  40999a:	4630      	mov	r0, r6
  40999c:	608d      	str	r5, [r1, #8]
  40999e:	605a      	str	r2, [r3, #4]
  4099a0:	f000 fa6a 	bl	409e78 <__malloc_unlock>
  4099a4:	3408      	adds	r4, #8
  4099a6:	4620      	mov	r0, r4
  4099a8:	b003      	add	sp, #12
  4099aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4099ae:	4423      	add	r3, r4
  4099b0:	4630      	mov	r0, r6
  4099b2:	685a      	ldr	r2, [r3, #4]
  4099b4:	f042 0201 	orr.w	r2, r2, #1
  4099b8:	605a      	str	r2, [r3, #4]
  4099ba:	f000 fa5d 	bl	409e78 <__malloc_unlock>
  4099be:	3408      	adds	r4, #8
  4099c0:	4620      	mov	r0, r4
  4099c2:	b003      	add	sp, #12
  4099c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4099c8:	68bc      	ldr	r4, [r7, #8]
  4099ca:	6863      	ldr	r3, [r4, #4]
  4099cc:	f023 0803 	bic.w	r8, r3, #3
  4099d0:	4545      	cmp	r5, r8
  4099d2:	d804      	bhi.n	4099de <_malloc_r+0x1ea>
  4099d4:	ebc5 0308 	rsb	r3, r5, r8
  4099d8:	2b0f      	cmp	r3, #15
  4099da:	f300 808c 	bgt.w	409af6 <_malloc_r+0x302>
  4099de:	4b53      	ldr	r3, [pc, #332]	; (409b2c <_malloc_r+0x338>)
  4099e0:	f8df a158 	ldr.w	sl, [pc, #344]	; 409b3c <_malloc_r+0x348>
  4099e4:	681a      	ldr	r2, [r3, #0]
  4099e6:	f8da 3000 	ldr.w	r3, [sl]
  4099ea:	3301      	adds	r3, #1
  4099ec:	442a      	add	r2, r5
  4099ee:	eb04 0b08 	add.w	fp, r4, r8
  4099f2:	f000 8150 	beq.w	409c96 <_malloc_r+0x4a2>
  4099f6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
  4099fa:	320f      	adds	r2, #15
  4099fc:	f422 627f 	bic.w	r2, r2, #4080	; 0xff0
  409a00:	f022 020f 	bic.w	r2, r2, #15
  409a04:	4611      	mov	r1, r2
  409a06:	4630      	mov	r0, r6
  409a08:	9201      	str	r2, [sp, #4]
  409a0a:	f000 ff4d 	bl	40a8a8 <_sbrk_r>
  409a0e:	f1b0 3fff 	cmp.w	r0, #4294967295
  409a12:	4681      	mov	r9, r0
  409a14:	9a01      	ldr	r2, [sp, #4]
  409a16:	f000 8147 	beq.w	409ca8 <_malloc_r+0x4b4>
  409a1a:	4583      	cmp	fp, r0
  409a1c:	f200 80ee 	bhi.w	409bfc <_malloc_r+0x408>
  409a20:	4b43      	ldr	r3, [pc, #268]	; (409b30 <_malloc_r+0x33c>)
  409a22:	6819      	ldr	r1, [r3, #0]
  409a24:	45cb      	cmp	fp, r9
  409a26:	4411      	add	r1, r2
  409a28:	6019      	str	r1, [r3, #0]
  409a2a:	f000 8142 	beq.w	409cb2 <_malloc_r+0x4be>
  409a2e:	f8da 0000 	ldr.w	r0, [sl]
  409a32:	f8df e108 	ldr.w	lr, [pc, #264]	; 409b3c <_malloc_r+0x348>
  409a36:	3001      	adds	r0, #1
  409a38:	bf1b      	ittet	ne
  409a3a:	ebcb 0b09 	rsbne	fp, fp, r9
  409a3e:	4459      	addne	r1, fp
  409a40:	f8ce 9000 	streq.w	r9, [lr]
  409a44:	6019      	strne	r1, [r3, #0]
  409a46:	f019 0107 	ands.w	r1, r9, #7
  409a4a:	f000 8107 	beq.w	409c5c <_malloc_r+0x468>
  409a4e:	f1c1 0008 	rsb	r0, r1, #8
  409a52:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
  409a56:	4481      	add	r9, r0
  409a58:	3108      	adds	r1, #8
  409a5a:	444a      	add	r2, r9
  409a5c:	f3c2 020b 	ubfx	r2, r2, #0, #12
  409a60:	ebc2 0a01 	rsb	sl, r2, r1
  409a64:	4651      	mov	r1, sl
  409a66:	4630      	mov	r0, r6
  409a68:	9301      	str	r3, [sp, #4]
  409a6a:	f000 ff1d 	bl	40a8a8 <_sbrk_r>
  409a6e:	1c43      	adds	r3, r0, #1
  409a70:	9b01      	ldr	r3, [sp, #4]
  409a72:	f000 812c 	beq.w	409cce <_malloc_r+0x4da>
  409a76:	ebc9 0200 	rsb	r2, r9, r0
  409a7a:	4452      	add	r2, sl
  409a7c:	f042 0201 	orr.w	r2, r2, #1
  409a80:	6819      	ldr	r1, [r3, #0]
  409a82:	f8c7 9008 	str.w	r9, [r7, #8]
  409a86:	4451      	add	r1, sl
  409a88:	42bc      	cmp	r4, r7
  409a8a:	f8c9 2004 	str.w	r2, [r9, #4]
  409a8e:	6019      	str	r1, [r3, #0]
  409a90:	f8df a09c 	ldr.w	sl, [pc, #156]	; 409b30 <_malloc_r+0x33c>
  409a94:	d016      	beq.n	409ac4 <_malloc_r+0x2d0>
  409a96:	f1b8 0f0f 	cmp.w	r8, #15
  409a9a:	f240 80ee 	bls.w	409c7a <_malloc_r+0x486>
  409a9e:	6862      	ldr	r2, [r4, #4]
  409aa0:	f1a8 030c 	sub.w	r3, r8, #12
  409aa4:	f023 0307 	bic.w	r3, r3, #7
  409aa8:	18e0      	adds	r0, r4, r3
  409aaa:	f002 0201 	and.w	r2, r2, #1
  409aae:	f04f 0e05 	mov.w	lr, #5
  409ab2:	431a      	orrs	r2, r3
  409ab4:	2b0f      	cmp	r3, #15
  409ab6:	6062      	str	r2, [r4, #4]
  409ab8:	f8c0 e004 	str.w	lr, [r0, #4]
  409abc:	f8c0 e008 	str.w	lr, [r0, #8]
  409ac0:	f200 8109 	bhi.w	409cd6 <_malloc_r+0x4e2>
  409ac4:	4b1b      	ldr	r3, [pc, #108]	; (409b34 <_malloc_r+0x340>)
  409ac6:	68bc      	ldr	r4, [r7, #8]
  409ac8:	681a      	ldr	r2, [r3, #0]
  409aca:	4291      	cmp	r1, r2
  409acc:	bf88      	it	hi
  409ace:	6019      	strhi	r1, [r3, #0]
  409ad0:	4b19      	ldr	r3, [pc, #100]	; (409b38 <_malloc_r+0x344>)
  409ad2:	681a      	ldr	r2, [r3, #0]
  409ad4:	4291      	cmp	r1, r2
  409ad6:	6862      	ldr	r2, [r4, #4]
  409ad8:	bf88      	it	hi
  409ada:	6019      	strhi	r1, [r3, #0]
  409adc:	f022 0203 	bic.w	r2, r2, #3
  409ae0:	4295      	cmp	r5, r2
  409ae2:	eba2 0305 	sub.w	r3, r2, r5
  409ae6:	d801      	bhi.n	409aec <_malloc_r+0x2f8>
  409ae8:	2b0f      	cmp	r3, #15
  409aea:	dc04      	bgt.n	409af6 <_malloc_r+0x302>
  409aec:	4630      	mov	r0, r6
  409aee:	f000 f9c3 	bl	409e78 <__malloc_unlock>
  409af2:	2400      	movs	r4, #0
  409af4:	e6aa      	b.n	40984c <_malloc_r+0x58>
  409af6:	1962      	adds	r2, r4, r5
  409af8:	f043 0301 	orr.w	r3, r3, #1
  409afc:	f045 0501 	orr.w	r5, r5, #1
  409b00:	6065      	str	r5, [r4, #4]
  409b02:	4630      	mov	r0, r6
  409b04:	60ba      	str	r2, [r7, #8]
  409b06:	6053      	str	r3, [r2, #4]
  409b08:	f000 f9b6 	bl	409e78 <__malloc_unlock>
  409b0c:	3408      	adds	r4, #8
  409b0e:	4620      	mov	r0, r4
  409b10:	b003      	add	sp, #12
  409b12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  409b16:	2814      	cmp	r0, #20
  409b18:	d968      	bls.n	409bec <_malloc_r+0x3f8>
  409b1a:	2854      	cmp	r0, #84	; 0x54
  409b1c:	f200 8097 	bhi.w	409c4e <_malloc_r+0x45a>
  409b20:	0b28      	lsrs	r0, r5, #12
  409b22:	306e      	adds	r0, #110	; 0x6e
  409b24:	0041      	lsls	r1, r0, #1
  409b26:	e6a5      	b.n	409874 <_malloc_r+0x80>
  409b28:	20000520 	.word	0x20000520
  409b2c:	2000b07c 	.word	0x2000b07c
  409b30:	2000b080 	.word	0x2000b080
  409b34:	2000b078 	.word	0x2000b078
  409b38:	2000b074 	.word	0x2000b074
  409b3c:	2000092c 	.word	0x2000092c
  409b40:	0a5a      	lsrs	r2, r3, #9
  409b42:	2a04      	cmp	r2, #4
  409b44:	d955      	bls.n	409bf2 <_malloc_r+0x3fe>
  409b46:	2a14      	cmp	r2, #20
  409b48:	f200 80a7 	bhi.w	409c9a <_malloc_r+0x4a6>
  409b4c:	325b      	adds	r2, #91	; 0x5b
  409b4e:	ea4f 0c42 	mov.w	ip, r2, lsl #1
  409b52:	eb07 0c8c 	add.w	ip, r7, ip, lsl #2
  409b56:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 409d14 <_malloc_r+0x520>
  409b5a:	f8dc 1008 	ldr.w	r1, [ip, #8]
  409b5e:	4561      	cmp	r1, ip
  409b60:	d07f      	beq.n	409c62 <_malloc_r+0x46e>
  409b62:	684a      	ldr	r2, [r1, #4]
  409b64:	f022 0203 	bic.w	r2, r2, #3
  409b68:	4293      	cmp	r3, r2
  409b6a:	d202      	bcs.n	409b72 <_malloc_r+0x37e>
  409b6c:	6889      	ldr	r1, [r1, #8]
  409b6e:	458c      	cmp	ip, r1
  409b70:	d1f7      	bne.n	409b62 <_malloc_r+0x36e>
  409b72:	68ca      	ldr	r2, [r1, #12]
  409b74:	687b      	ldr	r3, [r7, #4]
  409b76:	60e2      	str	r2, [r4, #12]
  409b78:	60a1      	str	r1, [r4, #8]
  409b7a:	6094      	str	r4, [r2, #8]
  409b7c:	60cc      	str	r4, [r1, #12]
  409b7e:	e6bb      	b.n	4098f8 <_malloc_r+0x104>
  409b80:	1963      	adds	r3, r4, r5
  409b82:	f042 0701 	orr.w	r7, r2, #1
  409b86:	f045 0501 	orr.w	r5, r5, #1
  409b8a:	6065      	str	r5, [r4, #4]
  409b8c:	4630      	mov	r0, r6
  409b8e:	614b      	str	r3, [r1, #20]
  409b90:	610b      	str	r3, [r1, #16]
  409b92:	f8c3 e00c 	str.w	lr, [r3, #12]
  409b96:	f8c3 e008 	str.w	lr, [r3, #8]
  409b9a:	605f      	str	r7, [r3, #4]
  409b9c:	509a      	str	r2, [r3, r2]
  409b9e:	3408      	adds	r4, #8
  409ba0:	f000 f96a 	bl	409e78 <__malloc_unlock>
  409ba4:	e652      	b.n	40984c <_malloc_r+0x58>
  409ba6:	684b      	ldr	r3, [r1, #4]
  409ba8:	e6a6      	b.n	4098f8 <_malloc_r+0x104>
  409baa:	f109 0901 	add.w	r9, r9, #1
  409bae:	f019 0f03 	tst.w	r9, #3
  409bb2:	f10c 0c08 	add.w	ip, ip, #8
  409bb6:	f47f aeb1 	bne.w	40991c <_malloc_r+0x128>
  409bba:	e02c      	b.n	409c16 <_malloc_r+0x422>
  409bbc:	f104 0308 	add.w	r3, r4, #8
  409bc0:	6964      	ldr	r4, [r4, #20]
  409bc2:	42a3      	cmp	r3, r4
  409bc4:	bf08      	it	eq
  409bc6:	3002      	addeq	r0, #2
  409bc8:	f43f ae69 	beq.w	40989e <_malloc_r+0xaa>
  409bcc:	e62e      	b.n	40982c <_malloc_r+0x38>
  409bce:	441a      	add	r2, r3
  409bd0:	461c      	mov	r4, r3
  409bd2:	6851      	ldr	r1, [r2, #4]
  409bd4:	68db      	ldr	r3, [r3, #12]
  409bd6:	f854 5f08 	ldr.w	r5, [r4, #8]!
  409bda:	f041 0101 	orr.w	r1, r1, #1
  409bde:	6051      	str	r1, [r2, #4]
  409be0:	4630      	mov	r0, r6
  409be2:	60eb      	str	r3, [r5, #12]
  409be4:	609d      	str	r5, [r3, #8]
  409be6:	f000 f947 	bl	409e78 <__malloc_unlock>
  409bea:	e62f      	b.n	40984c <_malloc_r+0x58>
  409bec:	305b      	adds	r0, #91	; 0x5b
  409bee:	0041      	lsls	r1, r0, #1
  409bf0:	e640      	b.n	409874 <_malloc_r+0x80>
  409bf2:	099a      	lsrs	r2, r3, #6
  409bf4:	3238      	adds	r2, #56	; 0x38
  409bf6:	ea4f 0c42 	mov.w	ip, r2, lsl #1
  409bfa:	e7aa      	b.n	409b52 <_malloc_r+0x35e>
  409bfc:	42bc      	cmp	r4, r7
  409bfe:	4b45      	ldr	r3, [pc, #276]	; (409d14 <_malloc_r+0x520>)
  409c00:	f43f af0e 	beq.w	409a20 <_malloc_r+0x22c>
  409c04:	689c      	ldr	r4, [r3, #8]
  409c06:	6862      	ldr	r2, [r4, #4]
  409c08:	f022 0203 	bic.w	r2, r2, #3
  409c0c:	e768      	b.n	409ae0 <_malloc_r+0x2ec>
  409c0e:	f8d8 8000 	ldr.w	r8, [r8]
  409c12:	4598      	cmp	r8, r3
  409c14:	d17c      	bne.n	409d10 <_malloc_r+0x51c>
  409c16:	f010 0f03 	tst.w	r0, #3
  409c1a:	f1a8 0308 	sub.w	r3, r8, #8
  409c1e:	f100 30ff 	add.w	r0, r0, #4294967295
  409c22:	d1f4      	bne.n	409c0e <_malloc_r+0x41a>
  409c24:	687b      	ldr	r3, [r7, #4]
  409c26:	ea23 0304 	bic.w	r3, r3, r4
  409c2a:	607b      	str	r3, [r7, #4]
  409c2c:	0064      	lsls	r4, r4, #1
  409c2e:	429c      	cmp	r4, r3
  409c30:	f63f aeca 	bhi.w	4099c8 <_malloc_r+0x1d4>
  409c34:	2c00      	cmp	r4, #0
  409c36:	f43f aec7 	beq.w	4099c8 <_malloc_r+0x1d4>
  409c3a:	4223      	tst	r3, r4
  409c3c:	4648      	mov	r0, r9
  409c3e:	f47f ae69 	bne.w	409914 <_malloc_r+0x120>
  409c42:	0064      	lsls	r4, r4, #1
  409c44:	4223      	tst	r3, r4
  409c46:	f100 0004 	add.w	r0, r0, #4
  409c4a:	d0fa      	beq.n	409c42 <_malloc_r+0x44e>
  409c4c:	e662      	b.n	409914 <_malloc_r+0x120>
  409c4e:	f5b0 7faa 	cmp.w	r0, #340	; 0x154
  409c52:	d818      	bhi.n	409c86 <_malloc_r+0x492>
  409c54:	0be8      	lsrs	r0, r5, #15
  409c56:	3077      	adds	r0, #119	; 0x77
  409c58:	0041      	lsls	r1, r0, #1
  409c5a:	e60b      	b.n	409874 <_malloc_r+0x80>
  409c5c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  409c60:	e6fb      	b.n	409a5a <_malloc_r+0x266>
  409c62:	f8d8 3004 	ldr.w	r3, [r8, #4]
  409c66:	1092      	asrs	r2, r2, #2
  409c68:	f04f 0c01 	mov.w	ip, #1
  409c6c:	fa0c f202 	lsl.w	r2, ip, r2
  409c70:	4313      	orrs	r3, r2
  409c72:	f8c8 3004 	str.w	r3, [r8, #4]
  409c76:	460a      	mov	r2, r1
  409c78:	e77d      	b.n	409b76 <_malloc_r+0x382>
  409c7a:	2301      	movs	r3, #1
  409c7c:	f8c9 3004 	str.w	r3, [r9, #4]
  409c80:	464c      	mov	r4, r9
  409c82:	2200      	movs	r2, #0
  409c84:	e72c      	b.n	409ae0 <_malloc_r+0x2ec>
  409c86:	f240 5354 	movw	r3, #1364	; 0x554
  409c8a:	4298      	cmp	r0, r3
  409c8c:	d81c      	bhi.n	409cc8 <_malloc_r+0x4d4>
  409c8e:	0ca8      	lsrs	r0, r5, #18
  409c90:	307c      	adds	r0, #124	; 0x7c
  409c92:	0041      	lsls	r1, r0, #1
  409c94:	e5ee      	b.n	409874 <_malloc_r+0x80>
  409c96:	3210      	adds	r2, #16
  409c98:	e6b4      	b.n	409a04 <_malloc_r+0x210>
  409c9a:	2a54      	cmp	r2, #84	; 0x54
  409c9c:	d823      	bhi.n	409ce6 <_malloc_r+0x4f2>
  409c9e:	0b1a      	lsrs	r2, r3, #12
  409ca0:	326e      	adds	r2, #110	; 0x6e
  409ca2:	ea4f 0c42 	mov.w	ip, r2, lsl #1
  409ca6:	e754      	b.n	409b52 <_malloc_r+0x35e>
  409ca8:	68bc      	ldr	r4, [r7, #8]
  409caa:	6862      	ldr	r2, [r4, #4]
  409cac:	f022 0203 	bic.w	r2, r2, #3
  409cb0:	e716      	b.n	409ae0 <_malloc_r+0x2ec>
  409cb2:	f3cb 000b 	ubfx	r0, fp, #0, #12
  409cb6:	2800      	cmp	r0, #0
  409cb8:	f47f aeb9 	bne.w	409a2e <_malloc_r+0x23a>
  409cbc:	4442      	add	r2, r8
  409cbe:	68bb      	ldr	r3, [r7, #8]
  409cc0:	f042 0201 	orr.w	r2, r2, #1
  409cc4:	605a      	str	r2, [r3, #4]
  409cc6:	e6fd      	b.n	409ac4 <_malloc_r+0x2d0>
  409cc8:	21fc      	movs	r1, #252	; 0xfc
  409cca:	207e      	movs	r0, #126	; 0x7e
  409ccc:	e5d2      	b.n	409874 <_malloc_r+0x80>
  409cce:	2201      	movs	r2, #1
  409cd0:	f04f 0a00 	mov.w	sl, #0
  409cd4:	e6d4      	b.n	409a80 <_malloc_r+0x28c>
  409cd6:	f104 0108 	add.w	r1, r4, #8
  409cda:	4630      	mov	r0, r6
  409cdc:	f7ff fcae 	bl	40963c <_free_r>
  409ce0:	f8da 1000 	ldr.w	r1, [sl]
  409ce4:	e6ee      	b.n	409ac4 <_malloc_r+0x2d0>
  409ce6:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  409cea:	d804      	bhi.n	409cf6 <_malloc_r+0x502>
  409cec:	0bda      	lsrs	r2, r3, #15
  409cee:	3277      	adds	r2, #119	; 0x77
  409cf0:	ea4f 0c42 	mov.w	ip, r2, lsl #1
  409cf4:	e72d      	b.n	409b52 <_malloc_r+0x35e>
  409cf6:	f240 5154 	movw	r1, #1364	; 0x554
  409cfa:	428a      	cmp	r2, r1
  409cfc:	d804      	bhi.n	409d08 <_malloc_r+0x514>
  409cfe:	0c9a      	lsrs	r2, r3, #18
  409d00:	327c      	adds	r2, #124	; 0x7c
  409d02:	ea4f 0c42 	mov.w	ip, r2, lsl #1
  409d06:	e724      	b.n	409b52 <_malloc_r+0x35e>
  409d08:	f04f 0cfc 	mov.w	ip, #252	; 0xfc
  409d0c:	227e      	movs	r2, #126	; 0x7e
  409d0e:	e720      	b.n	409b52 <_malloc_r+0x35e>
  409d10:	687b      	ldr	r3, [r7, #4]
  409d12:	e78b      	b.n	409c2c <_malloc_r+0x438>
  409d14:	20000520 	.word	0x20000520

00409d18 <memchr>:
  409d18:	0783      	lsls	r3, r0, #30
  409d1a:	b470      	push	{r4, r5, r6}
  409d1c:	b2c9      	uxtb	r1, r1
  409d1e:	d040      	beq.n	409da2 <memchr+0x8a>
  409d20:	1e54      	subs	r4, r2, #1
  409d22:	2a00      	cmp	r2, #0
  409d24:	d03f      	beq.n	409da6 <memchr+0x8e>
  409d26:	7803      	ldrb	r3, [r0, #0]
  409d28:	428b      	cmp	r3, r1
  409d2a:	bf18      	it	ne
  409d2c:	1c43      	addne	r3, r0, #1
  409d2e:	d106      	bne.n	409d3e <memchr+0x26>
  409d30:	e01d      	b.n	409d6e <memchr+0x56>
  409d32:	b1f4      	cbz	r4, 409d72 <memchr+0x5a>
  409d34:	7802      	ldrb	r2, [r0, #0]
  409d36:	428a      	cmp	r2, r1
  409d38:	f104 34ff 	add.w	r4, r4, #4294967295
  409d3c:	d017      	beq.n	409d6e <memchr+0x56>
  409d3e:	f013 0f03 	tst.w	r3, #3
  409d42:	4618      	mov	r0, r3
  409d44:	f103 0301 	add.w	r3, r3, #1
  409d48:	d1f3      	bne.n	409d32 <memchr+0x1a>
  409d4a:	2c03      	cmp	r4, #3
  409d4c:	d814      	bhi.n	409d78 <memchr+0x60>
  409d4e:	b184      	cbz	r4, 409d72 <memchr+0x5a>
  409d50:	7803      	ldrb	r3, [r0, #0]
  409d52:	428b      	cmp	r3, r1
  409d54:	d00b      	beq.n	409d6e <memchr+0x56>
  409d56:	1905      	adds	r5, r0, r4
  409d58:	1c43      	adds	r3, r0, #1
  409d5a:	e002      	b.n	409d62 <memchr+0x4a>
  409d5c:	7802      	ldrb	r2, [r0, #0]
  409d5e:	428a      	cmp	r2, r1
  409d60:	d005      	beq.n	409d6e <memchr+0x56>
  409d62:	42ab      	cmp	r3, r5
  409d64:	4618      	mov	r0, r3
  409d66:	f103 0301 	add.w	r3, r3, #1
  409d6a:	d1f7      	bne.n	409d5c <memchr+0x44>
  409d6c:	2000      	movs	r0, #0
  409d6e:	bc70      	pop	{r4, r5, r6}
  409d70:	4770      	bx	lr
  409d72:	4620      	mov	r0, r4
  409d74:	bc70      	pop	{r4, r5, r6}
  409d76:	4770      	bx	lr
  409d78:	ea41 2601 	orr.w	r6, r1, r1, lsl #8
  409d7c:	4602      	mov	r2, r0
  409d7e:	ea46 4606 	orr.w	r6, r6, r6, lsl #16
  409d82:	4610      	mov	r0, r2
  409d84:	3204      	adds	r2, #4
  409d86:	6803      	ldr	r3, [r0, #0]
  409d88:	4073      	eors	r3, r6
  409d8a:	f1a3 3501 	sub.w	r5, r3, #16843009	; 0x1010101
  409d8e:	ea25 0303 	bic.w	r3, r5, r3
  409d92:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
  409d96:	d1da      	bne.n	409d4e <memchr+0x36>
  409d98:	3c04      	subs	r4, #4
  409d9a:	2c03      	cmp	r4, #3
  409d9c:	4610      	mov	r0, r2
  409d9e:	d8f0      	bhi.n	409d82 <memchr+0x6a>
  409da0:	e7d5      	b.n	409d4e <memchr+0x36>
  409da2:	4614      	mov	r4, r2
  409da4:	e7d1      	b.n	409d4a <memchr+0x32>
  409da6:	4610      	mov	r0, r2
  409da8:	e7e1      	b.n	409d6e <memchr+0x56>
  409daa:	bf00      	nop

00409dac <memmove>:
  409dac:	4288      	cmp	r0, r1
  409dae:	b5f0      	push	{r4, r5, r6, r7, lr}
  409db0:	d90d      	bls.n	409dce <memmove+0x22>
  409db2:	188b      	adds	r3, r1, r2
  409db4:	4298      	cmp	r0, r3
  409db6:	d20a      	bcs.n	409dce <memmove+0x22>
  409db8:	1881      	adds	r1, r0, r2
  409dba:	2a00      	cmp	r2, #0
  409dbc:	d054      	beq.n	409e68 <memmove+0xbc>
  409dbe:	1a9a      	subs	r2, r3, r2
  409dc0:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
  409dc4:	f801 4d01 	strb.w	r4, [r1, #-1]!
  409dc8:	4293      	cmp	r3, r2
  409dca:	d1f9      	bne.n	409dc0 <memmove+0x14>
  409dcc:	bdf0      	pop	{r4, r5, r6, r7, pc}
  409dce:	2a0f      	cmp	r2, #15
  409dd0:	d948      	bls.n	409e64 <memmove+0xb8>
  409dd2:	ea40 0301 	orr.w	r3, r0, r1
  409dd6:	079b      	lsls	r3, r3, #30
  409dd8:	d147      	bne.n	409e6a <memmove+0xbe>
  409dda:	f100 0410 	add.w	r4, r0, #16
  409dde:	f101 0310 	add.w	r3, r1, #16
  409de2:	4615      	mov	r5, r2
  409de4:	f853 6c10 	ldr.w	r6, [r3, #-16]
  409de8:	f844 6c10 	str.w	r6, [r4, #-16]
  409dec:	f853 6c0c 	ldr.w	r6, [r3, #-12]
  409df0:	f844 6c0c 	str.w	r6, [r4, #-12]
  409df4:	f853 6c08 	ldr.w	r6, [r3, #-8]
  409df8:	f844 6c08 	str.w	r6, [r4, #-8]
  409dfc:	3d10      	subs	r5, #16
  409dfe:	f853 6c04 	ldr.w	r6, [r3, #-4]
  409e02:	f844 6c04 	str.w	r6, [r4, #-4]
  409e06:	2d0f      	cmp	r5, #15
  409e08:	f103 0310 	add.w	r3, r3, #16
  409e0c:	f104 0410 	add.w	r4, r4, #16
  409e10:	d8e8      	bhi.n	409de4 <memmove+0x38>
  409e12:	f1a2 0310 	sub.w	r3, r2, #16
  409e16:	f023 030f 	bic.w	r3, r3, #15
  409e1a:	f002 0e0f 	and.w	lr, r2, #15
  409e1e:	3310      	adds	r3, #16
  409e20:	f1be 0f03 	cmp.w	lr, #3
  409e24:	4419      	add	r1, r3
  409e26:	4403      	add	r3, r0
  409e28:	d921      	bls.n	409e6e <memmove+0xc2>
  409e2a:	1f1e      	subs	r6, r3, #4
  409e2c:	460d      	mov	r5, r1
  409e2e:	4674      	mov	r4, lr
  409e30:	3c04      	subs	r4, #4
  409e32:	f855 7b04 	ldr.w	r7, [r5], #4
  409e36:	f846 7f04 	str.w	r7, [r6, #4]!
  409e3a:	2c03      	cmp	r4, #3
  409e3c:	d8f8      	bhi.n	409e30 <memmove+0x84>
  409e3e:	f1ae 0404 	sub.w	r4, lr, #4
  409e42:	f024 0403 	bic.w	r4, r4, #3
  409e46:	3404      	adds	r4, #4
  409e48:	4423      	add	r3, r4
  409e4a:	4421      	add	r1, r4
  409e4c:	f002 0203 	and.w	r2, r2, #3
  409e50:	b152      	cbz	r2, 409e68 <memmove+0xbc>
  409e52:	3b01      	subs	r3, #1
  409e54:	440a      	add	r2, r1
  409e56:	f811 4b01 	ldrb.w	r4, [r1], #1
  409e5a:	f803 4f01 	strb.w	r4, [r3, #1]!
  409e5e:	4291      	cmp	r1, r2
  409e60:	d1f9      	bne.n	409e56 <memmove+0xaa>
  409e62:	bdf0      	pop	{r4, r5, r6, r7, pc}
  409e64:	4603      	mov	r3, r0
  409e66:	e7f3      	b.n	409e50 <memmove+0xa4>
  409e68:	bdf0      	pop	{r4, r5, r6, r7, pc}
  409e6a:	4603      	mov	r3, r0
  409e6c:	e7f1      	b.n	409e52 <memmove+0xa6>
  409e6e:	4672      	mov	r2, lr
  409e70:	e7ee      	b.n	409e50 <memmove+0xa4>
  409e72:	bf00      	nop

00409e74 <__malloc_lock>:
  409e74:	4770      	bx	lr
  409e76:	bf00      	nop

00409e78 <__malloc_unlock>:
  409e78:	4770      	bx	lr
  409e7a:	bf00      	nop

00409e7c <_Balloc>:
  409e7c:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
  409e7e:	b570      	push	{r4, r5, r6, lr}
  409e80:	4605      	mov	r5, r0
  409e82:	460c      	mov	r4, r1
  409e84:	b14b      	cbz	r3, 409e9a <_Balloc+0x1e>
  409e86:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
  409e8a:	b180      	cbz	r0, 409eae <_Balloc+0x32>
  409e8c:	6802      	ldr	r2, [r0, #0]
  409e8e:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
  409e92:	2300      	movs	r3, #0
  409e94:	6103      	str	r3, [r0, #16]
  409e96:	60c3      	str	r3, [r0, #12]
  409e98:	bd70      	pop	{r4, r5, r6, pc}
  409e9a:	2104      	movs	r1, #4
  409e9c:	2221      	movs	r2, #33	; 0x21
  409e9e:	f000 fde9 	bl	40aa74 <_calloc_r>
  409ea2:	64e8      	str	r0, [r5, #76]	; 0x4c
  409ea4:	4603      	mov	r3, r0
  409ea6:	2800      	cmp	r0, #0
  409ea8:	d1ed      	bne.n	409e86 <_Balloc+0xa>
  409eaa:	2000      	movs	r0, #0
  409eac:	bd70      	pop	{r4, r5, r6, pc}
  409eae:	2101      	movs	r1, #1
  409eb0:	fa01 f604 	lsl.w	r6, r1, r4
  409eb4:	1d72      	adds	r2, r6, #5
  409eb6:	4628      	mov	r0, r5
  409eb8:	0092      	lsls	r2, r2, #2
  409eba:	f000 fddb 	bl	40aa74 <_calloc_r>
  409ebe:	2800      	cmp	r0, #0
  409ec0:	d0f3      	beq.n	409eaa <_Balloc+0x2e>
  409ec2:	6044      	str	r4, [r0, #4]
  409ec4:	6086      	str	r6, [r0, #8]
  409ec6:	e7e4      	b.n	409e92 <_Balloc+0x16>

00409ec8 <_Bfree>:
  409ec8:	b131      	cbz	r1, 409ed8 <_Bfree+0x10>
  409eca:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
  409ecc:	684a      	ldr	r2, [r1, #4]
  409ece:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
  409ed2:	6008      	str	r0, [r1, #0]
  409ed4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  409ed8:	4770      	bx	lr
  409eda:	bf00      	nop

00409edc <__multadd>:
  409edc:	b5f0      	push	{r4, r5, r6, r7, lr}
  409ede:	690c      	ldr	r4, [r1, #16]
  409ee0:	b083      	sub	sp, #12
  409ee2:	460d      	mov	r5, r1
  409ee4:	4606      	mov	r6, r0
  409ee6:	f101 0e14 	add.w	lr, r1, #20
  409eea:	2700      	movs	r7, #0
  409eec:	f8de 1000 	ldr.w	r1, [lr]
  409ef0:	b288      	uxth	r0, r1
  409ef2:	0c09      	lsrs	r1, r1, #16
  409ef4:	fb02 3300 	mla	r3, r2, r0, r3
  409ef8:	fb02 f101 	mul.w	r1, r2, r1
  409efc:	eb01 4113 	add.w	r1, r1, r3, lsr #16
  409f00:	3701      	adds	r7, #1
  409f02:	b29b      	uxth	r3, r3
  409f04:	eb03 4301 	add.w	r3, r3, r1, lsl #16
  409f08:	42bc      	cmp	r4, r7
  409f0a:	f84e 3b04 	str.w	r3, [lr], #4
  409f0e:	ea4f 4311 	mov.w	r3, r1, lsr #16
  409f12:	dceb      	bgt.n	409eec <__multadd+0x10>
  409f14:	b13b      	cbz	r3, 409f26 <__multadd+0x4a>
  409f16:	68aa      	ldr	r2, [r5, #8]
  409f18:	4294      	cmp	r4, r2
  409f1a:	da07      	bge.n	409f2c <__multadd+0x50>
  409f1c:	eb05 0284 	add.w	r2, r5, r4, lsl #2
  409f20:	3401      	adds	r4, #1
  409f22:	6153      	str	r3, [r2, #20]
  409f24:	612c      	str	r4, [r5, #16]
  409f26:	4628      	mov	r0, r5
  409f28:	b003      	add	sp, #12
  409f2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  409f2c:	6869      	ldr	r1, [r5, #4]
  409f2e:	9301      	str	r3, [sp, #4]
  409f30:	3101      	adds	r1, #1
  409f32:	4630      	mov	r0, r6
  409f34:	f7ff ffa2 	bl	409e7c <_Balloc>
  409f38:	692a      	ldr	r2, [r5, #16]
  409f3a:	3202      	adds	r2, #2
  409f3c:	f105 010c 	add.w	r1, r5, #12
  409f40:	4607      	mov	r7, r0
  409f42:	0092      	lsls	r2, r2, #2
  409f44:	300c      	adds	r0, #12
  409f46:	f7fc fdf7 	bl	406b38 <memcpy>
  409f4a:	6cf2      	ldr	r2, [r6, #76]	; 0x4c
  409f4c:	6869      	ldr	r1, [r5, #4]
  409f4e:	9b01      	ldr	r3, [sp, #4]
  409f50:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
  409f54:	6028      	str	r0, [r5, #0]
  409f56:	f842 5021 	str.w	r5, [r2, r1, lsl #2]
  409f5a:	463d      	mov	r5, r7
  409f5c:	e7de      	b.n	409f1c <__multadd+0x40>
  409f5e:	bf00      	nop

00409f60 <__hi0bits>:
  409f60:	0c03      	lsrs	r3, r0, #16
  409f62:	041b      	lsls	r3, r3, #16
  409f64:	b9b3      	cbnz	r3, 409f94 <__hi0bits+0x34>
  409f66:	0400      	lsls	r0, r0, #16
  409f68:	2310      	movs	r3, #16
  409f6a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
  409f6e:	bf04      	itt	eq
  409f70:	0200      	lsleq	r0, r0, #8
  409f72:	3308      	addeq	r3, #8
  409f74:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
  409f78:	bf04      	itt	eq
  409f7a:	0100      	lsleq	r0, r0, #4
  409f7c:	3304      	addeq	r3, #4
  409f7e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
  409f82:	bf04      	itt	eq
  409f84:	0080      	lsleq	r0, r0, #2
  409f86:	3302      	addeq	r3, #2
  409f88:	2800      	cmp	r0, #0
  409f8a:	db07      	blt.n	409f9c <__hi0bits+0x3c>
  409f8c:	0042      	lsls	r2, r0, #1
  409f8e:	d403      	bmi.n	409f98 <__hi0bits+0x38>
  409f90:	2020      	movs	r0, #32
  409f92:	4770      	bx	lr
  409f94:	2300      	movs	r3, #0
  409f96:	e7e8      	b.n	409f6a <__hi0bits+0xa>
  409f98:	1c58      	adds	r0, r3, #1
  409f9a:	4770      	bx	lr
  409f9c:	4618      	mov	r0, r3
  409f9e:	4770      	bx	lr

00409fa0 <__lo0bits>:
  409fa0:	6803      	ldr	r3, [r0, #0]
  409fa2:	f013 0207 	ands.w	r2, r3, #7
  409fa6:	d007      	beq.n	409fb8 <__lo0bits+0x18>
  409fa8:	07d9      	lsls	r1, r3, #31
  409faa:	d420      	bmi.n	409fee <__lo0bits+0x4e>
  409fac:	079a      	lsls	r2, r3, #30
  409fae:	d420      	bmi.n	409ff2 <__lo0bits+0x52>
  409fb0:	089b      	lsrs	r3, r3, #2
  409fb2:	6003      	str	r3, [r0, #0]
  409fb4:	2002      	movs	r0, #2
  409fb6:	4770      	bx	lr
  409fb8:	b299      	uxth	r1, r3
  409fba:	b909      	cbnz	r1, 409fc0 <__lo0bits+0x20>
  409fbc:	0c1b      	lsrs	r3, r3, #16
  409fbe:	2210      	movs	r2, #16
  409fc0:	f013 0fff 	tst.w	r3, #255	; 0xff
  409fc4:	bf04      	itt	eq
  409fc6:	0a1b      	lsreq	r3, r3, #8
  409fc8:	3208      	addeq	r2, #8
  409fca:	0719      	lsls	r1, r3, #28
  409fcc:	bf04      	itt	eq
  409fce:	091b      	lsreq	r3, r3, #4
  409fd0:	3204      	addeq	r2, #4
  409fd2:	0799      	lsls	r1, r3, #30
  409fd4:	bf04      	itt	eq
  409fd6:	089b      	lsreq	r3, r3, #2
  409fd8:	3202      	addeq	r2, #2
  409fda:	07d9      	lsls	r1, r3, #31
  409fdc:	d404      	bmi.n	409fe8 <__lo0bits+0x48>
  409fde:	085b      	lsrs	r3, r3, #1
  409fe0:	d101      	bne.n	409fe6 <__lo0bits+0x46>
  409fe2:	2020      	movs	r0, #32
  409fe4:	4770      	bx	lr
  409fe6:	3201      	adds	r2, #1
  409fe8:	6003      	str	r3, [r0, #0]
  409fea:	4610      	mov	r0, r2
  409fec:	4770      	bx	lr
  409fee:	2000      	movs	r0, #0
  409ff0:	4770      	bx	lr
  409ff2:	085b      	lsrs	r3, r3, #1
  409ff4:	6003      	str	r3, [r0, #0]
  409ff6:	2001      	movs	r0, #1
  409ff8:	4770      	bx	lr
  409ffa:	bf00      	nop

00409ffc <__i2b>:
  409ffc:	b510      	push	{r4, lr}
  409ffe:	460c      	mov	r4, r1
  40a000:	2101      	movs	r1, #1
  40a002:	f7ff ff3b 	bl	409e7c <_Balloc>
  40a006:	2201      	movs	r2, #1
  40a008:	6144      	str	r4, [r0, #20]
  40a00a:	6102      	str	r2, [r0, #16]
  40a00c:	bd10      	pop	{r4, pc}
  40a00e:	bf00      	nop

0040a010 <__multiply>:
  40a010:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40a014:	690f      	ldr	r7, [r1, #16]
  40a016:	6916      	ldr	r6, [r2, #16]
  40a018:	42b7      	cmp	r7, r6
  40a01a:	b083      	sub	sp, #12
  40a01c:	460d      	mov	r5, r1
  40a01e:	4614      	mov	r4, r2
  40a020:	f2c0 808d 	blt.w	40a13e <__multiply+0x12e>
  40a024:	4633      	mov	r3, r6
  40a026:	463e      	mov	r6, r7
  40a028:	461f      	mov	r7, r3
  40a02a:	68ab      	ldr	r3, [r5, #8]
  40a02c:	6869      	ldr	r1, [r5, #4]
  40a02e:	eb06 0807 	add.w	r8, r6, r7
  40a032:	4598      	cmp	r8, r3
  40a034:	bfc8      	it	gt
  40a036:	3101      	addgt	r1, #1
  40a038:	f7ff ff20 	bl	409e7c <_Balloc>
  40a03c:	f100 0c14 	add.w	ip, r0, #20
  40a040:	eb0c 0988 	add.w	r9, ip, r8, lsl #2
  40a044:	45cc      	cmp	ip, r9
  40a046:	9000      	str	r0, [sp, #0]
  40a048:	d205      	bcs.n	40a056 <__multiply+0x46>
  40a04a:	4663      	mov	r3, ip
  40a04c:	2100      	movs	r1, #0
  40a04e:	f843 1b04 	str.w	r1, [r3], #4
  40a052:	4599      	cmp	r9, r3
  40a054:	d8fb      	bhi.n	40a04e <__multiply+0x3e>
  40a056:	f104 0214 	add.w	r2, r4, #20
  40a05a:	eb02 0a87 	add.w	sl, r2, r7, lsl #2
  40a05e:	f105 0314 	add.w	r3, r5, #20
  40a062:	4552      	cmp	r2, sl
  40a064:	eb03 0e86 	add.w	lr, r3, r6, lsl #2
  40a068:	d254      	bcs.n	40a114 <__multiply+0x104>
  40a06a:	f8cd 9004 	str.w	r9, [sp, #4]
  40a06e:	4699      	mov	r9, r3
  40a070:	f852 3b04 	ldr.w	r3, [r2], #4
  40a074:	fa1f fb83 	uxth.w	fp, r3
  40a078:	f1bb 0f00 	cmp.w	fp, #0
  40a07c:	d020      	beq.n	40a0c0 <__multiply+0xb0>
  40a07e:	2000      	movs	r0, #0
  40a080:	464f      	mov	r7, r9
  40a082:	4666      	mov	r6, ip
  40a084:	4605      	mov	r5, r0
  40a086:	e000      	b.n	40a08a <__multiply+0x7a>
  40a088:	461e      	mov	r6, r3
  40a08a:	f857 4b04 	ldr.w	r4, [r7], #4
  40a08e:	6830      	ldr	r0, [r6, #0]
  40a090:	b2a1      	uxth	r1, r4
  40a092:	b283      	uxth	r3, r0
  40a094:	fb0b 3101 	mla	r1, fp, r1, r3
  40a098:	0c24      	lsrs	r4, r4, #16
  40a09a:	0c00      	lsrs	r0, r0, #16
  40a09c:	194b      	adds	r3, r1, r5
  40a09e:	fb0b 0004 	mla	r0, fp, r4, r0
  40a0a2:	eb00 4013 	add.w	r0, r0, r3, lsr #16
  40a0a6:	b299      	uxth	r1, r3
  40a0a8:	4633      	mov	r3, r6
  40a0aa:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
  40a0ae:	45be      	cmp	lr, r7
  40a0b0:	ea4f 4510 	mov.w	r5, r0, lsr #16
  40a0b4:	f843 1b04 	str.w	r1, [r3], #4
  40a0b8:	d8e6      	bhi.n	40a088 <__multiply+0x78>
  40a0ba:	6075      	str	r5, [r6, #4]
  40a0bc:	f852 3c04 	ldr.w	r3, [r2, #-4]
  40a0c0:	ea5f 4b13 	movs.w	fp, r3, lsr #16
  40a0c4:	d020      	beq.n	40a108 <__multiply+0xf8>
  40a0c6:	f8dc 3000 	ldr.w	r3, [ip]
  40a0ca:	4667      	mov	r7, ip
  40a0cc:	4618      	mov	r0, r3
  40a0ce:	464d      	mov	r5, r9
  40a0d0:	2100      	movs	r1, #0
  40a0d2:	e000      	b.n	40a0d6 <__multiply+0xc6>
  40a0d4:	4637      	mov	r7, r6
  40a0d6:	882c      	ldrh	r4, [r5, #0]
  40a0d8:	0c00      	lsrs	r0, r0, #16
  40a0da:	fb0b 0004 	mla	r0, fp, r4, r0
  40a0de:	4401      	add	r1, r0
  40a0e0:	b29c      	uxth	r4, r3
  40a0e2:	463e      	mov	r6, r7
  40a0e4:	ea44 4301 	orr.w	r3, r4, r1, lsl #16
  40a0e8:	f846 3b04 	str.w	r3, [r6], #4
  40a0ec:	6878      	ldr	r0, [r7, #4]
  40a0ee:	f855 4b04 	ldr.w	r4, [r5], #4
  40a0f2:	b283      	uxth	r3, r0
  40a0f4:	0c24      	lsrs	r4, r4, #16
  40a0f6:	fb0b 3404 	mla	r4, fp, r4, r3
  40a0fa:	eb04 4311 	add.w	r3, r4, r1, lsr #16
  40a0fe:	45ae      	cmp	lr, r5
  40a100:	ea4f 4113 	mov.w	r1, r3, lsr #16
  40a104:	d8e6      	bhi.n	40a0d4 <__multiply+0xc4>
  40a106:	607b      	str	r3, [r7, #4]
  40a108:	4592      	cmp	sl, r2
  40a10a:	f10c 0c04 	add.w	ip, ip, #4
  40a10e:	d8af      	bhi.n	40a070 <__multiply+0x60>
  40a110:	f8dd 9004 	ldr.w	r9, [sp, #4]
  40a114:	f1b8 0f00 	cmp.w	r8, #0
  40a118:	dd0b      	ble.n	40a132 <__multiply+0x122>
  40a11a:	f859 3c04 	ldr.w	r3, [r9, #-4]
  40a11e:	f1a9 0904 	sub.w	r9, r9, #4
  40a122:	b11b      	cbz	r3, 40a12c <__multiply+0x11c>
  40a124:	e005      	b.n	40a132 <__multiply+0x122>
  40a126:	f859 3d04 	ldr.w	r3, [r9, #-4]!
  40a12a:	b913      	cbnz	r3, 40a132 <__multiply+0x122>
  40a12c:	f1b8 0801 	subs.w	r8, r8, #1
  40a130:	d1f9      	bne.n	40a126 <__multiply+0x116>
  40a132:	9800      	ldr	r0, [sp, #0]
  40a134:	f8c0 8010 	str.w	r8, [r0, #16]
  40a138:	b003      	add	sp, #12
  40a13a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40a13e:	4615      	mov	r5, r2
  40a140:	460c      	mov	r4, r1
  40a142:	e772      	b.n	40a02a <__multiply+0x1a>

0040a144 <__pow5mult>:
  40a144:	f012 0303 	ands.w	r3, r2, #3
  40a148:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40a14c:	4614      	mov	r4, r2
  40a14e:	4607      	mov	r7, r0
  40a150:	460e      	mov	r6, r1
  40a152:	d12d      	bne.n	40a1b0 <__pow5mult+0x6c>
  40a154:	10a4      	asrs	r4, r4, #2
  40a156:	d01c      	beq.n	40a192 <__pow5mult+0x4e>
  40a158:	6cbd      	ldr	r5, [r7, #72]	; 0x48
  40a15a:	b395      	cbz	r5, 40a1c2 <__pow5mult+0x7e>
  40a15c:	07e3      	lsls	r3, r4, #31
  40a15e:	f04f 0800 	mov.w	r8, #0
  40a162:	d406      	bmi.n	40a172 <__pow5mult+0x2e>
  40a164:	1064      	asrs	r4, r4, #1
  40a166:	d014      	beq.n	40a192 <__pow5mult+0x4e>
  40a168:	6828      	ldr	r0, [r5, #0]
  40a16a:	b1a8      	cbz	r0, 40a198 <__pow5mult+0x54>
  40a16c:	4605      	mov	r5, r0
  40a16e:	07e3      	lsls	r3, r4, #31
  40a170:	d5f8      	bpl.n	40a164 <__pow5mult+0x20>
  40a172:	4638      	mov	r0, r7
  40a174:	4631      	mov	r1, r6
  40a176:	462a      	mov	r2, r5
  40a178:	f7ff ff4a 	bl	40a010 <__multiply>
  40a17c:	b1b6      	cbz	r6, 40a1ac <__pow5mult+0x68>
  40a17e:	6872      	ldr	r2, [r6, #4]
  40a180:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  40a182:	1064      	asrs	r4, r4, #1
  40a184:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
  40a188:	6031      	str	r1, [r6, #0]
  40a18a:	f843 6022 	str.w	r6, [r3, r2, lsl #2]
  40a18e:	4606      	mov	r6, r0
  40a190:	d1ea      	bne.n	40a168 <__pow5mult+0x24>
  40a192:	4630      	mov	r0, r6
  40a194:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40a198:	4629      	mov	r1, r5
  40a19a:	462a      	mov	r2, r5
  40a19c:	4638      	mov	r0, r7
  40a19e:	f7ff ff37 	bl	40a010 <__multiply>
  40a1a2:	6028      	str	r0, [r5, #0]
  40a1a4:	f8c0 8000 	str.w	r8, [r0]
  40a1a8:	4605      	mov	r5, r0
  40a1aa:	e7e0      	b.n	40a16e <__pow5mult+0x2a>
  40a1ac:	4606      	mov	r6, r0
  40a1ae:	e7d9      	b.n	40a164 <__pow5mult+0x20>
  40a1b0:	1e5a      	subs	r2, r3, #1
  40a1b2:	4d0b      	ldr	r5, [pc, #44]	; (40a1e0 <__pow5mult+0x9c>)
  40a1b4:	2300      	movs	r3, #0
  40a1b6:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
  40a1ba:	f7ff fe8f 	bl	409edc <__multadd>
  40a1be:	4606      	mov	r6, r0
  40a1c0:	e7c8      	b.n	40a154 <__pow5mult+0x10>
  40a1c2:	2101      	movs	r1, #1
  40a1c4:	4638      	mov	r0, r7
  40a1c6:	f7ff fe59 	bl	409e7c <_Balloc>
  40a1ca:	f240 2171 	movw	r1, #625	; 0x271
  40a1ce:	2201      	movs	r2, #1
  40a1d0:	2300      	movs	r3, #0
  40a1d2:	6141      	str	r1, [r0, #20]
  40a1d4:	6102      	str	r2, [r0, #16]
  40a1d6:	4605      	mov	r5, r0
  40a1d8:	64b8      	str	r0, [r7, #72]	; 0x48
  40a1da:	6003      	str	r3, [r0, #0]
  40a1dc:	e7be      	b.n	40a15c <__pow5mult+0x18>
  40a1de:	bf00      	nop
  40a1e0:	0040c2d0 	.word	0x0040c2d0

0040a1e4 <__lshift>:
  40a1e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  40a1e8:	690f      	ldr	r7, [r1, #16]
  40a1ea:	688b      	ldr	r3, [r1, #8]
  40a1ec:	ea4f 1962 	mov.w	r9, r2, asr #5
  40a1f0:	444f      	add	r7, r9
  40a1f2:	1c7d      	adds	r5, r7, #1
  40a1f4:	429d      	cmp	r5, r3
  40a1f6:	460e      	mov	r6, r1
  40a1f8:	4614      	mov	r4, r2
  40a1fa:	6849      	ldr	r1, [r1, #4]
  40a1fc:	4680      	mov	r8, r0
  40a1fe:	dd04      	ble.n	40a20a <__lshift+0x26>
  40a200:	005b      	lsls	r3, r3, #1
  40a202:	429d      	cmp	r5, r3
  40a204:	f101 0101 	add.w	r1, r1, #1
  40a208:	dcfa      	bgt.n	40a200 <__lshift+0x1c>
  40a20a:	4640      	mov	r0, r8
  40a20c:	f7ff fe36 	bl	409e7c <_Balloc>
  40a210:	f1b9 0f00 	cmp.w	r9, #0
  40a214:	f100 0114 	add.w	r1, r0, #20
  40a218:	dd09      	ble.n	40a22e <__lshift+0x4a>
  40a21a:	2300      	movs	r3, #0
  40a21c:	469e      	mov	lr, r3
  40a21e:	460a      	mov	r2, r1
  40a220:	3301      	adds	r3, #1
  40a222:	454b      	cmp	r3, r9
  40a224:	f842 eb04 	str.w	lr, [r2], #4
  40a228:	d1fa      	bne.n	40a220 <__lshift+0x3c>
  40a22a:	eb01 0183 	add.w	r1, r1, r3, lsl #2
  40a22e:	6932      	ldr	r2, [r6, #16]
  40a230:	f106 0314 	add.w	r3, r6, #20
  40a234:	f014 0c1f 	ands.w	ip, r4, #31
  40a238:	eb03 0e82 	add.w	lr, r3, r2, lsl #2
  40a23c:	d01f      	beq.n	40a27e <__lshift+0x9a>
  40a23e:	f1cc 0920 	rsb	r9, ip, #32
  40a242:	2200      	movs	r2, #0
  40a244:	681c      	ldr	r4, [r3, #0]
  40a246:	fa04 f40c 	lsl.w	r4, r4, ip
  40a24a:	4314      	orrs	r4, r2
  40a24c:	468a      	mov	sl, r1
  40a24e:	f841 4b04 	str.w	r4, [r1], #4
  40a252:	f853 4b04 	ldr.w	r4, [r3], #4
  40a256:	459e      	cmp	lr, r3
  40a258:	fa24 f209 	lsr.w	r2, r4, r9
  40a25c:	d8f2      	bhi.n	40a244 <__lshift+0x60>
  40a25e:	f8ca 2004 	str.w	r2, [sl, #4]
  40a262:	b102      	cbz	r2, 40a266 <__lshift+0x82>
  40a264:	1cbd      	adds	r5, r7, #2
  40a266:	f8d8 304c 	ldr.w	r3, [r8, #76]	; 0x4c
  40a26a:	6872      	ldr	r2, [r6, #4]
  40a26c:	3d01      	subs	r5, #1
  40a26e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
  40a272:	6105      	str	r5, [r0, #16]
  40a274:	6031      	str	r1, [r6, #0]
  40a276:	f843 6022 	str.w	r6, [r3, r2, lsl #2]
  40a27a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40a27e:	3904      	subs	r1, #4
  40a280:	f853 2b04 	ldr.w	r2, [r3], #4
  40a284:	f841 2f04 	str.w	r2, [r1, #4]!
  40a288:	459e      	cmp	lr, r3
  40a28a:	d8f9      	bhi.n	40a280 <__lshift+0x9c>
  40a28c:	e7eb      	b.n	40a266 <__lshift+0x82>
  40a28e:	bf00      	nop

0040a290 <__mcmp>:
  40a290:	6902      	ldr	r2, [r0, #16]
  40a292:	690b      	ldr	r3, [r1, #16]
  40a294:	1ad2      	subs	r2, r2, r3
  40a296:	d113      	bne.n	40a2c0 <__mcmp+0x30>
  40a298:	009b      	lsls	r3, r3, #2
  40a29a:	3014      	adds	r0, #20
  40a29c:	3114      	adds	r1, #20
  40a29e:	4419      	add	r1, r3
  40a2a0:	b410      	push	{r4}
  40a2a2:	4403      	add	r3, r0
  40a2a4:	e001      	b.n	40a2aa <__mcmp+0x1a>
  40a2a6:	4298      	cmp	r0, r3
  40a2a8:	d20c      	bcs.n	40a2c4 <__mcmp+0x34>
  40a2aa:	f853 4d04 	ldr.w	r4, [r3, #-4]!
  40a2ae:	f851 2d04 	ldr.w	r2, [r1, #-4]!
  40a2b2:	4294      	cmp	r4, r2
  40a2b4:	d0f7      	beq.n	40a2a6 <__mcmp+0x16>
  40a2b6:	d309      	bcc.n	40a2cc <__mcmp+0x3c>
  40a2b8:	2001      	movs	r0, #1
  40a2ba:	f85d 4b04 	ldr.w	r4, [sp], #4
  40a2be:	4770      	bx	lr
  40a2c0:	4610      	mov	r0, r2
  40a2c2:	4770      	bx	lr
  40a2c4:	2000      	movs	r0, #0
  40a2c6:	f85d 4b04 	ldr.w	r4, [sp], #4
  40a2ca:	4770      	bx	lr
  40a2cc:	f04f 30ff 	mov.w	r0, #4294967295
  40a2d0:	f85d 4b04 	ldr.w	r4, [sp], #4
  40a2d4:	4770      	bx	lr
  40a2d6:	bf00      	nop

0040a2d8 <__mdiff>:
  40a2d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40a2dc:	460e      	mov	r6, r1
  40a2de:	4605      	mov	r5, r0
  40a2e0:	4611      	mov	r1, r2
  40a2e2:	4630      	mov	r0, r6
  40a2e4:	4614      	mov	r4, r2
  40a2e6:	f7ff ffd3 	bl	40a290 <__mcmp>
  40a2ea:	1e07      	subs	r7, r0, #0
  40a2ec:	d054      	beq.n	40a398 <__mdiff+0xc0>
  40a2ee:	db4d      	blt.n	40a38c <__mdiff+0xb4>
  40a2f0:	f04f 0800 	mov.w	r8, #0
  40a2f4:	6871      	ldr	r1, [r6, #4]
  40a2f6:	4628      	mov	r0, r5
  40a2f8:	f7ff fdc0 	bl	409e7c <_Balloc>
  40a2fc:	6937      	ldr	r7, [r6, #16]
  40a2fe:	6923      	ldr	r3, [r4, #16]
  40a300:	f8c0 800c 	str.w	r8, [r0, #12]
  40a304:	3614      	adds	r6, #20
  40a306:	f104 0214 	add.w	r2, r4, #20
  40a30a:	eb02 0c83 	add.w	ip, r2, r3, lsl #2
  40a30e:	f100 0514 	add.w	r5, r0, #20
  40a312:	eb06 0e87 	add.w	lr, r6, r7, lsl #2
  40a316:	2300      	movs	r3, #0
  40a318:	f856 8b04 	ldr.w	r8, [r6], #4
  40a31c:	f852 4b04 	ldr.w	r4, [r2], #4
  40a320:	fa13 f388 	uxtah	r3, r3, r8
  40a324:	b2a1      	uxth	r1, r4
  40a326:	0c24      	lsrs	r4, r4, #16
  40a328:	1a59      	subs	r1, r3, r1
  40a32a:	ebc4 4318 	rsb	r3, r4, r8, lsr #16
  40a32e:	eb03 4321 	add.w	r3, r3, r1, asr #16
  40a332:	b289      	uxth	r1, r1
  40a334:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
  40a338:	4594      	cmp	ip, r2
  40a33a:	f845 1b04 	str.w	r1, [r5], #4
  40a33e:	ea4f 4323 	mov.w	r3, r3, asr #16
  40a342:	4634      	mov	r4, r6
  40a344:	d8e8      	bhi.n	40a318 <__mdiff+0x40>
  40a346:	45b6      	cmp	lr, r6
  40a348:	46ac      	mov	ip, r5
  40a34a:	d915      	bls.n	40a378 <__mdiff+0xa0>
  40a34c:	f854 2b04 	ldr.w	r2, [r4], #4
  40a350:	fa13 f182 	uxtah	r1, r3, r2
  40a354:	0c13      	lsrs	r3, r2, #16
  40a356:	eb03 4321 	add.w	r3, r3, r1, asr #16
  40a35a:	b289      	uxth	r1, r1
  40a35c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
  40a360:	45a6      	cmp	lr, r4
  40a362:	f845 1b04 	str.w	r1, [r5], #4
  40a366:	ea4f 4323 	mov.w	r3, r3, asr #16
  40a36a:	d8ef      	bhi.n	40a34c <__mdiff+0x74>
  40a36c:	43f6      	mvns	r6, r6
  40a36e:	4476      	add	r6, lr
  40a370:	f026 0503 	bic.w	r5, r6, #3
  40a374:	3504      	adds	r5, #4
  40a376:	4465      	add	r5, ip
  40a378:	3d04      	subs	r5, #4
  40a37a:	b921      	cbnz	r1, 40a386 <__mdiff+0xae>
  40a37c:	f855 3d04 	ldr.w	r3, [r5, #-4]!
  40a380:	3f01      	subs	r7, #1
  40a382:	2b00      	cmp	r3, #0
  40a384:	d0fa      	beq.n	40a37c <__mdiff+0xa4>
  40a386:	6107      	str	r7, [r0, #16]
  40a388:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40a38c:	4633      	mov	r3, r6
  40a38e:	f04f 0801 	mov.w	r8, #1
  40a392:	4626      	mov	r6, r4
  40a394:	461c      	mov	r4, r3
  40a396:	e7ad      	b.n	40a2f4 <__mdiff+0x1c>
  40a398:	4628      	mov	r0, r5
  40a39a:	4639      	mov	r1, r7
  40a39c:	f7ff fd6e 	bl	409e7c <_Balloc>
  40a3a0:	2301      	movs	r3, #1
  40a3a2:	6147      	str	r7, [r0, #20]
  40a3a4:	6103      	str	r3, [r0, #16]
  40a3a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40a3aa:	bf00      	nop

0040a3ac <__d2b>:
  40a3ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40a3b0:	b082      	sub	sp, #8
  40a3b2:	2101      	movs	r1, #1
  40a3b4:	461c      	mov	r4, r3
  40a3b6:	f3c3 570a 	ubfx	r7, r3, #20, #11
  40a3ba:	4615      	mov	r5, r2
  40a3bc:	9e08      	ldr	r6, [sp, #32]
  40a3be:	f7ff fd5d 	bl	409e7c <_Balloc>
  40a3c2:	f3c4 0413 	ubfx	r4, r4, #0, #20
  40a3c6:	4680      	mov	r8, r0
  40a3c8:	b10f      	cbz	r7, 40a3ce <__d2b+0x22>
  40a3ca:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
  40a3ce:	9401      	str	r4, [sp, #4]
  40a3d0:	b31d      	cbz	r5, 40a41a <__d2b+0x6e>
  40a3d2:	a802      	add	r0, sp, #8
  40a3d4:	f840 5d08 	str.w	r5, [r0, #-8]!
  40a3d8:	f7ff fde2 	bl	409fa0 <__lo0bits>
  40a3dc:	2800      	cmp	r0, #0
  40a3de:	d134      	bne.n	40a44a <__d2b+0x9e>
  40a3e0:	e89d 000c 	ldmia.w	sp, {r2, r3}
  40a3e4:	f8c8 2014 	str.w	r2, [r8, #20]
  40a3e8:	2b00      	cmp	r3, #0
  40a3ea:	bf14      	ite	ne
  40a3ec:	2402      	movne	r4, #2
  40a3ee:	2401      	moveq	r4, #1
  40a3f0:	f8c8 3018 	str.w	r3, [r8, #24]
  40a3f4:	f8c8 4010 	str.w	r4, [r8, #16]
  40a3f8:	b9df      	cbnz	r7, 40a432 <__d2b+0x86>
  40a3fa:	eb08 0384 	add.w	r3, r8, r4, lsl #2
  40a3fe:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
  40a402:	6030      	str	r0, [r6, #0]
  40a404:	6918      	ldr	r0, [r3, #16]
  40a406:	f7ff fdab 	bl	409f60 <__hi0bits>
  40a40a:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40a40c:	ebc0 1044 	rsb	r0, r0, r4, lsl #5
  40a410:	6018      	str	r0, [r3, #0]
  40a412:	4640      	mov	r0, r8
  40a414:	b002      	add	sp, #8
  40a416:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40a41a:	a801      	add	r0, sp, #4
  40a41c:	f7ff fdc0 	bl	409fa0 <__lo0bits>
  40a420:	2401      	movs	r4, #1
  40a422:	9b01      	ldr	r3, [sp, #4]
  40a424:	f8c8 3014 	str.w	r3, [r8, #20]
  40a428:	3020      	adds	r0, #32
  40a42a:	f8c8 4010 	str.w	r4, [r8, #16]
  40a42e:	2f00      	cmp	r7, #0
  40a430:	d0e3      	beq.n	40a3fa <__d2b+0x4e>
  40a432:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40a434:	f2a7 4733 	subw	r7, r7, #1075	; 0x433
  40a438:	4407      	add	r7, r0
  40a43a:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
  40a43e:	6037      	str	r7, [r6, #0]
  40a440:	6018      	str	r0, [r3, #0]
  40a442:	4640      	mov	r0, r8
  40a444:	b002      	add	sp, #8
  40a446:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40a44a:	e89d 000c 	ldmia.w	sp, {r2, r3}
  40a44e:	f1c0 0120 	rsb	r1, r0, #32
  40a452:	fa03 f101 	lsl.w	r1, r3, r1
  40a456:	430a      	orrs	r2, r1
  40a458:	40c3      	lsrs	r3, r0
  40a45a:	9301      	str	r3, [sp, #4]
  40a45c:	f8c8 2014 	str.w	r2, [r8, #20]
  40a460:	e7c2      	b.n	40a3e8 <__d2b+0x3c>
  40a462:	bf00      	nop

0040a464 <_realloc_r>:
  40a464:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40a468:	4617      	mov	r7, r2
  40a46a:	b083      	sub	sp, #12
  40a46c:	460e      	mov	r6, r1
  40a46e:	2900      	cmp	r1, #0
  40a470:	f000 80e7 	beq.w	40a642 <_realloc_r+0x1de>
  40a474:	4681      	mov	r9, r0
  40a476:	f107 050b 	add.w	r5, r7, #11
  40a47a:	f7ff fcfb 	bl	409e74 <__malloc_lock>
  40a47e:	f856 3c04 	ldr.w	r3, [r6, #-4]
  40a482:	2d16      	cmp	r5, #22
  40a484:	f023 0403 	bic.w	r4, r3, #3
  40a488:	f1a6 0808 	sub.w	r8, r6, #8
  40a48c:	d84c      	bhi.n	40a528 <_realloc_r+0xc4>
  40a48e:	2210      	movs	r2, #16
  40a490:	4615      	mov	r5, r2
  40a492:	42af      	cmp	r7, r5
  40a494:	d84d      	bhi.n	40a532 <_realloc_r+0xce>
  40a496:	4294      	cmp	r4, r2
  40a498:	f280 8084 	bge.w	40a5a4 <_realloc_r+0x140>
  40a49c:	f8df b3ac 	ldr.w	fp, [pc, #940]	; 40a84c <_realloc_r+0x3e8>
  40a4a0:	f8db 0008 	ldr.w	r0, [fp, #8]
  40a4a4:	eb08 0104 	add.w	r1, r8, r4
  40a4a8:	4288      	cmp	r0, r1
  40a4aa:	f000 80d6 	beq.w	40a65a <_realloc_r+0x1f6>
  40a4ae:	6848      	ldr	r0, [r1, #4]
  40a4b0:	f020 0e01 	bic.w	lr, r0, #1
  40a4b4:	448e      	add	lr, r1
  40a4b6:	f8de e004 	ldr.w	lr, [lr, #4]
  40a4ba:	f01e 0f01 	tst.w	lr, #1
  40a4be:	d13f      	bne.n	40a540 <_realloc_r+0xdc>
  40a4c0:	f020 0003 	bic.w	r0, r0, #3
  40a4c4:	4420      	add	r0, r4
  40a4c6:	4290      	cmp	r0, r2
  40a4c8:	f280 80c1 	bge.w	40a64e <_realloc_r+0x1ea>
  40a4cc:	07db      	lsls	r3, r3, #31
  40a4ce:	f100 808f 	bmi.w	40a5f0 <_realloc_r+0x18c>
  40a4d2:	f856 3c08 	ldr.w	r3, [r6, #-8]
  40a4d6:	ebc3 0a08 	rsb	sl, r3, r8
  40a4da:	f8da 3004 	ldr.w	r3, [sl, #4]
  40a4de:	f023 0303 	bic.w	r3, r3, #3
  40a4e2:	eb00 0e03 	add.w	lr, r0, r3
  40a4e6:	4596      	cmp	lr, r2
  40a4e8:	db34      	blt.n	40a554 <_realloc_r+0xf0>
  40a4ea:	68cb      	ldr	r3, [r1, #12]
  40a4ec:	688a      	ldr	r2, [r1, #8]
  40a4ee:	4657      	mov	r7, sl
  40a4f0:	60d3      	str	r3, [r2, #12]
  40a4f2:	609a      	str	r2, [r3, #8]
  40a4f4:	f857 1f08 	ldr.w	r1, [r7, #8]!
  40a4f8:	f8da 300c 	ldr.w	r3, [sl, #12]
  40a4fc:	60cb      	str	r3, [r1, #12]
  40a4fe:	1f22      	subs	r2, r4, #4
  40a500:	2a24      	cmp	r2, #36	; 0x24
  40a502:	6099      	str	r1, [r3, #8]
  40a504:	f200 8136 	bhi.w	40a774 <_realloc_r+0x310>
  40a508:	2a13      	cmp	r2, #19
  40a50a:	f240 80fd 	bls.w	40a708 <_realloc_r+0x2a4>
  40a50e:	6833      	ldr	r3, [r6, #0]
  40a510:	f8ca 3008 	str.w	r3, [sl, #8]
  40a514:	6873      	ldr	r3, [r6, #4]
  40a516:	f8ca 300c 	str.w	r3, [sl, #12]
  40a51a:	2a1b      	cmp	r2, #27
  40a51c:	f200 8140 	bhi.w	40a7a0 <_realloc_r+0x33c>
  40a520:	3608      	adds	r6, #8
  40a522:	f10a 0310 	add.w	r3, sl, #16
  40a526:	e0f0      	b.n	40a70a <_realloc_r+0x2a6>
  40a528:	f025 0507 	bic.w	r5, r5, #7
  40a52c:	2d00      	cmp	r5, #0
  40a52e:	462a      	mov	r2, r5
  40a530:	daaf      	bge.n	40a492 <_realloc_r+0x2e>
  40a532:	230c      	movs	r3, #12
  40a534:	2000      	movs	r0, #0
  40a536:	f8c9 3000 	str.w	r3, [r9]
  40a53a:	b003      	add	sp, #12
  40a53c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40a540:	07d9      	lsls	r1, r3, #31
  40a542:	d455      	bmi.n	40a5f0 <_realloc_r+0x18c>
  40a544:	f856 3c08 	ldr.w	r3, [r6, #-8]
  40a548:	ebc3 0a08 	rsb	sl, r3, r8
  40a54c:	f8da 3004 	ldr.w	r3, [sl, #4]
  40a550:	f023 0303 	bic.w	r3, r3, #3
  40a554:	4423      	add	r3, r4
  40a556:	4293      	cmp	r3, r2
  40a558:	db4a      	blt.n	40a5f0 <_realloc_r+0x18c>
  40a55a:	4657      	mov	r7, sl
  40a55c:	f8da 100c 	ldr.w	r1, [sl, #12]
  40a560:	f857 0f08 	ldr.w	r0, [r7, #8]!
  40a564:	1f22      	subs	r2, r4, #4
  40a566:	2a24      	cmp	r2, #36	; 0x24
  40a568:	60c1      	str	r1, [r0, #12]
  40a56a:	6088      	str	r0, [r1, #8]
  40a56c:	f200 810e 	bhi.w	40a78c <_realloc_r+0x328>
  40a570:	2a13      	cmp	r2, #19
  40a572:	f240 8109 	bls.w	40a788 <_realloc_r+0x324>
  40a576:	6831      	ldr	r1, [r6, #0]
  40a578:	f8ca 1008 	str.w	r1, [sl, #8]
  40a57c:	6871      	ldr	r1, [r6, #4]
  40a57e:	f8ca 100c 	str.w	r1, [sl, #12]
  40a582:	2a1b      	cmp	r2, #27
  40a584:	f200 8121 	bhi.w	40a7ca <_realloc_r+0x366>
  40a588:	3608      	adds	r6, #8
  40a58a:	f10a 0210 	add.w	r2, sl, #16
  40a58e:	6831      	ldr	r1, [r6, #0]
  40a590:	6011      	str	r1, [r2, #0]
  40a592:	6871      	ldr	r1, [r6, #4]
  40a594:	6051      	str	r1, [r2, #4]
  40a596:	68b1      	ldr	r1, [r6, #8]
  40a598:	6091      	str	r1, [r2, #8]
  40a59a:	461c      	mov	r4, r3
  40a59c:	f8da 3004 	ldr.w	r3, [sl, #4]
  40a5a0:	463e      	mov	r6, r7
  40a5a2:	46d0      	mov	r8, sl
  40a5a4:	1b62      	subs	r2, r4, r5
  40a5a6:	2a0f      	cmp	r2, #15
  40a5a8:	f003 0301 	and.w	r3, r3, #1
  40a5ac:	d80e      	bhi.n	40a5cc <_realloc_r+0x168>
  40a5ae:	4323      	orrs	r3, r4
  40a5b0:	4444      	add	r4, r8
  40a5b2:	f8c8 3004 	str.w	r3, [r8, #4]
  40a5b6:	6863      	ldr	r3, [r4, #4]
  40a5b8:	f043 0301 	orr.w	r3, r3, #1
  40a5bc:	6063      	str	r3, [r4, #4]
  40a5be:	4648      	mov	r0, r9
  40a5c0:	f7ff fc5a 	bl	409e78 <__malloc_unlock>
  40a5c4:	4630      	mov	r0, r6
  40a5c6:	b003      	add	sp, #12
  40a5c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40a5cc:	eb08 0105 	add.w	r1, r8, r5
  40a5d0:	431d      	orrs	r5, r3
  40a5d2:	f042 0301 	orr.w	r3, r2, #1
  40a5d6:	440a      	add	r2, r1
  40a5d8:	f8c8 5004 	str.w	r5, [r8, #4]
  40a5dc:	604b      	str	r3, [r1, #4]
  40a5de:	6853      	ldr	r3, [r2, #4]
  40a5e0:	f043 0301 	orr.w	r3, r3, #1
  40a5e4:	3108      	adds	r1, #8
  40a5e6:	6053      	str	r3, [r2, #4]
  40a5e8:	4648      	mov	r0, r9
  40a5ea:	f7ff f827 	bl	40963c <_free_r>
  40a5ee:	e7e6      	b.n	40a5be <_realloc_r+0x15a>
  40a5f0:	4639      	mov	r1, r7
  40a5f2:	4648      	mov	r0, r9
  40a5f4:	f7ff f8fe 	bl	4097f4 <_malloc_r>
  40a5f8:	4607      	mov	r7, r0
  40a5fa:	b1d8      	cbz	r0, 40a634 <_realloc_r+0x1d0>
  40a5fc:	f856 3c04 	ldr.w	r3, [r6, #-4]
  40a600:	f023 0201 	bic.w	r2, r3, #1
  40a604:	4442      	add	r2, r8
  40a606:	f1a0 0108 	sub.w	r1, r0, #8
  40a60a:	4291      	cmp	r1, r2
  40a60c:	f000 80ac 	beq.w	40a768 <_realloc_r+0x304>
  40a610:	1f22      	subs	r2, r4, #4
  40a612:	2a24      	cmp	r2, #36	; 0x24
  40a614:	f200 8099 	bhi.w	40a74a <_realloc_r+0x2e6>
  40a618:	2a13      	cmp	r2, #19
  40a61a:	d86a      	bhi.n	40a6f2 <_realloc_r+0x28e>
  40a61c:	4603      	mov	r3, r0
  40a61e:	4632      	mov	r2, r6
  40a620:	6811      	ldr	r1, [r2, #0]
  40a622:	6019      	str	r1, [r3, #0]
  40a624:	6851      	ldr	r1, [r2, #4]
  40a626:	6059      	str	r1, [r3, #4]
  40a628:	6892      	ldr	r2, [r2, #8]
  40a62a:	609a      	str	r2, [r3, #8]
  40a62c:	4631      	mov	r1, r6
  40a62e:	4648      	mov	r0, r9
  40a630:	f7ff f804 	bl	40963c <_free_r>
  40a634:	4648      	mov	r0, r9
  40a636:	f7ff fc1f 	bl	409e78 <__malloc_unlock>
  40a63a:	4638      	mov	r0, r7
  40a63c:	b003      	add	sp, #12
  40a63e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40a642:	4611      	mov	r1, r2
  40a644:	b003      	add	sp, #12
  40a646:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40a64a:	f7ff b8d3 	b.w	4097f4 <_malloc_r>
  40a64e:	68ca      	ldr	r2, [r1, #12]
  40a650:	6889      	ldr	r1, [r1, #8]
  40a652:	4604      	mov	r4, r0
  40a654:	60ca      	str	r2, [r1, #12]
  40a656:	6091      	str	r1, [r2, #8]
  40a658:	e7a4      	b.n	40a5a4 <_realloc_r+0x140>
  40a65a:	6841      	ldr	r1, [r0, #4]
  40a65c:	f021 0103 	bic.w	r1, r1, #3
  40a660:	4421      	add	r1, r4
  40a662:	f105 0010 	add.w	r0, r5, #16
  40a666:	4281      	cmp	r1, r0
  40a668:	da5b      	bge.n	40a722 <_realloc_r+0x2be>
  40a66a:	07db      	lsls	r3, r3, #31
  40a66c:	d4c0      	bmi.n	40a5f0 <_realloc_r+0x18c>
  40a66e:	f856 3c08 	ldr.w	r3, [r6, #-8]
  40a672:	ebc3 0a08 	rsb	sl, r3, r8
  40a676:	f8da 3004 	ldr.w	r3, [sl, #4]
  40a67a:	f023 0303 	bic.w	r3, r3, #3
  40a67e:	eb01 0c03 	add.w	ip, r1, r3
  40a682:	4560      	cmp	r0, ip
  40a684:	f73f af66 	bgt.w	40a554 <_realloc_r+0xf0>
  40a688:	4657      	mov	r7, sl
  40a68a:	f8da 300c 	ldr.w	r3, [sl, #12]
  40a68e:	f857 1f08 	ldr.w	r1, [r7, #8]!
  40a692:	1f22      	subs	r2, r4, #4
  40a694:	2a24      	cmp	r2, #36	; 0x24
  40a696:	60cb      	str	r3, [r1, #12]
  40a698:	6099      	str	r1, [r3, #8]
  40a69a:	f200 80b8 	bhi.w	40a80e <_realloc_r+0x3aa>
  40a69e:	2a13      	cmp	r2, #19
  40a6a0:	f240 80a9 	bls.w	40a7f6 <_realloc_r+0x392>
  40a6a4:	6833      	ldr	r3, [r6, #0]
  40a6a6:	f8ca 3008 	str.w	r3, [sl, #8]
  40a6aa:	6873      	ldr	r3, [r6, #4]
  40a6ac:	f8ca 300c 	str.w	r3, [sl, #12]
  40a6b0:	2a1b      	cmp	r2, #27
  40a6b2:	f200 80b5 	bhi.w	40a820 <_realloc_r+0x3bc>
  40a6b6:	3608      	adds	r6, #8
  40a6b8:	f10a 0310 	add.w	r3, sl, #16
  40a6bc:	6832      	ldr	r2, [r6, #0]
  40a6be:	601a      	str	r2, [r3, #0]
  40a6c0:	6872      	ldr	r2, [r6, #4]
  40a6c2:	605a      	str	r2, [r3, #4]
  40a6c4:	68b2      	ldr	r2, [r6, #8]
  40a6c6:	609a      	str	r2, [r3, #8]
  40a6c8:	eb0a 0205 	add.w	r2, sl, r5
  40a6cc:	ebc5 030c 	rsb	r3, r5, ip
  40a6d0:	f043 0301 	orr.w	r3, r3, #1
  40a6d4:	f8cb 2008 	str.w	r2, [fp, #8]
  40a6d8:	6053      	str	r3, [r2, #4]
  40a6da:	f8da 3004 	ldr.w	r3, [sl, #4]
  40a6de:	f003 0301 	and.w	r3, r3, #1
  40a6e2:	431d      	orrs	r5, r3
  40a6e4:	4648      	mov	r0, r9
  40a6e6:	f8ca 5004 	str.w	r5, [sl, #4]
  40a6ea:	f7ff fbc5 	bl	409e78 <__malloc_unlock>
  40a6ee:	4638      	mov	r0, r7
  40a6f0:	e769      	b.n	40a5c6 <_realloc_r+0x162>
  40a6f2:	6833      	ldr	r3, [r6, #0]
  40a6f4:	6003      	str	r3, [r0, #0]
  40a6f6:	6873      	ldr	r3, [r6, #4]
  40a6f8:	6043      	str	r3, [r0, #4]
  40a6fa:	2a1b      	cmp	r2, #27
  40a6fc:	d829      	bhi.n	40a752 <_realloc_r+0x2ee>
  40a6fe:	f100 0308 	add.w	r3, r0, #8
  40a702:	f106 0208 	add.w	r2, r6, #8
  40a706:	e78b      	b.n	40a620 <_realloc_r+0x1bc>
  40a708:	463b      	mov	r3, r7
  40a70a:	6832      	ldr	r2, [r6, #0]
  40a70c:	601a      	str	r2, [r3, #0]
  40a70e:	6872      	ldr	r2, [r6, #4]
  40a710:	605a      	str	r2, [r3, #4]
  40a712:	68b2      	ldr	r2, [r6, #8]
  40a714:	609a      	str	r2, [r3, #8]
  40a716:	463e      	mov	r6, r7
  40a718:	4674      	mov	r4, lr
  40a71a:	f8da 3004 	ldr.w	r3, [sl, #4]
  40a71e:	46d0      	mov	r8, sl
  40a720:	e740      	b.n	40a5a4 <_realloc_r+0x140>
  40a722:	eb08 0205 	add.w	r2, r8, r5
  40a726:	1b4b      	subs	r3, r1, r5
  40a728:	f043 0301 	orr.w	r3, r3, #1
  40a72c:	f8cb 2008 	str.w	r2, [fp, #8]
  40a730:	6053      	str	r3, [r2, #4]
  40a732:	f856 3c04 	ldr.w	r3, [r6, #-4]
  40a736:	f003 0301 	and.w	r3, r3, #1
  40a73a:	431d      	orrs	r5, r3
  40a73c:	4648      	mov	r0, r9
  40a73e:	f846 5c04 	str.w	r5, [r6, #-4]
  40a742:	f7ff fb99 	bl	409e78 <__malloc_unlock>
  40a746:	4630      	mov	r0, r6
  40a748:	e73d      	b.n	40a5c6 <_realloc_r+0x162>
  40a74a:	4631      	mov	r1, r6
  40a74c:	f7ff fb2e 	bl	409dac <memmove>
  40a750:	e76c      	b.n	40a62c <_realloc_r+0x1c8>
  40a752:	68b3      	ldr	r3, [r6, #8]
  40a754:	6083      	str	r3, [r0, #8]
  40a756:	68f3      	ldr	r3, [r6, #12]
  40a758:	60c3      	str	r3, [r0, #12]
  40a75a:	2a24      	cmp	r2, #36	; 0x24
  40a75c:	d02c      	beq.n	40a7b8 <_realloc_r+0x354>
  40a75e:	f100 0310 	add.w	r3, r0, #16
  40a762:	f106 0210 	add.w	r2, r6, #16
  40a766:	e75b      	b.n	40a620 <_realloc_r+0x1bc>
  40a768:	f850 2c04 	ldr.w	r2, [r0, #-4]
  40a76c:	f022 0203 	bic.w	r2, r2, #3
  40a770:	4414      	add	r4, r2
  40a772:	e717      	b.n	40a5a4 <_realloc_r+0x140>
  40a774:	4631      	mov	r1, r6
  40a776:	4638      	mov	r0, r7
  40a778:	4674      	mov	r4, lr
  40a77a:	463e      	mov	r6, r7
  40a77c:	f7ff fb16 	bl	409dac <memmove>
  40a780:	46d0      	mov	r8, sl
  40a782:	f8da 3004 	ldr.w	r3, [sl, #4]
  40a786:	e70d      	b.n	40a5a4 <_realloc_r+0x140>
  40a788:	463a      	mov	r2, r7
  40a78a:	e700      	b.n	40a58e <_realloc_r+0x12a>
  40a78c:	4631      	mov	r1, r6
  40a78e:	4638      	mov	r0, r7
  40a790:	461c      	mov	r4, r3
  40a792:	463e      	mov	r6, r7
  40a794:	f7ff fb0a 	bl	409dac <memmove>
  40a798:	46d0      	mov	r8, sl
  40a79a:	f8da 3004 	ldr.w	r3, [sl, #4]
  40a79e:	e701      	b.n	40a5a4 <_realloc_r+0x140>
  40a7a0:	68b3      	ldr	r3, [r6, #8]
  40a7a2:	f8ca 3010 	str.w	r3, [sl, #16]
  40a7a6:	68f3      	ldr	r3, [r6, #12]
  40a7a8:	f8ca 3014 	str.w	r3, [sl, #20]
  40a7ac:	2a24      	cmp	r2, #36	; 0x24
  40a7ae:	d018      	beq.n	40a7e2 <_realloc_r+0x37e>
  40a7b0:	3610      	adds	r6, #16
  40a7b2:	f10a 0318 	add.w	r3, sl, #24
  40a7b6:	e7a8      	b.n	40a70a <_realloc_r+0x2a6>
  40a7b8:	6933      	ldr	r3, [r6, #16]
  40a7ba:	6103      	str	r3, [r0, #16]
  40a7bc:	6973      	ldr	r3, [r6, #20]
  40a7be:	6143      	str	r3, [r0, #20]
  40a7c0:	f106 0218 	add.w	r2, r6, #24
  40a7c4:	f100 0318 	add.w	r3, r0, #24
  40a7c8:	e72a      	b.n	40a620 <_realloc_r+0x1bc>
  40a7ca:	68b1      	ldr	r1, [r6, #8]
  40a7cc:	f8ca 1010 	str.w	r1, [sl, #16]
  40a7d0:	68f1      	ldr	r1, [r6, #12]
  40a7d2:	f8ca 1014 	str.w	r1, [sl, #20]
  40a7d6:	2a24      	cmp	r2, #36	; 0x24
  40a7d8:	d00f      	beq.n	40a7fa <_realloc_r+0x396>
  40a7da:	3610      	adds	r6, #16
  40a7dc:	f10a 0218 	add.w	r2, sl, #24
  40a7e0:	e6d5      	b.n	40a58e <_realloc_r+0x12a>
  40a7e2:	6933      	ldr	r3, [r6, #16]
  40a7e4:	f8ca 3018 	str.w	r3, [sl, #24]
  40a7e8:	6973      	ldr	r3, [r6, #20]
  40a7ea:	f8ca 301c 	str.w	r3, [sl, #28]
  40a7ee:	3618      	adds	r6, #24
  40a7f0:	f10a 0320 	add.w	r3, sl, #32
  40a7f4:	e789      	b.n	40a70a <_realloc_r+0x2a6>
  40a7f6:	463b      	mov	r3, r7
  40a7f8:	e760      	b.n	40a6bc <_realloc_r+0x258>
  40a7fa:	6932      	ldr	r2, [r6, #16]
  40a7fc:	f8ca 2018 	str.w	r2, [sl, #24]
  40a800:	6972      	ldr	r2, [r6, #20]
  40a802:	f8ca 201c 	str.w	r2, [sl, #28]
  40a806:	3618      	adds	r6, #24
  40a808:	f10a 0220 	add.w	r2, sl, #32
  40a80c:	e6bf      	b.n	40a58e <_realloc_r+0x12a>
  40a80e:	4631      	mov	r1, r6
  40a810:	4638      	mov	r0, r7
  40a812:	f8cd c004 	str.w	ip, [sp, #4]
  40a816:	f7ff fac9 	bl	409dac <memmove>
  40a81a:	f8dd c004 	ldr.w	ip, [sp, #4]
  40a81e:	e753      	b.n	40a6c8 <_realloc_r+0x264>
  40a820:	68b3      	ldr	r3, [r6, #8]
  40a822:	f8ca 3010 	str.w	r3, [sl, #16]
  40a826:	68f3      	ldr	r3, [r6, #12]
  40a828:	f8ca 3014 	str.w	r3, [sl, #20]
  40a82c:	2a24      	cmp	r2, #36	; 0x24
  40a82e:	d003      	beq.n	40a838 <_realloc_r+0x3d4>
  40a830:	3610      	adds	r6, #16
  40a832:	f10a 0318 	add.w	r3, sl, #24
  40a836:	e741      	b.n	40a6bc <_realloc_r+0x258>
  40a838:	6933      	ldr	r3, [r6, #16]
  40a83a:	f8ca 3018 	str.w	r3, [sl, #24]
  40a83e:	6973      	ldr	r3, [r6, #20]
  40a840:	f8ca 301c 	str.w	r3, [sl, #28]
  40a844:	3618      	adds	r6, #24
  40a846:	f10a 0320 	add.w	r3, sl, #32
  40a84a:	e737      	b.n	40a6bc <_realloc_r+0x258>
  40a84c:	20000520 	.word	0x20000520

0040a850 <__fpclassifyd>:
  40a850:	b410      	push	{r4}
  40a852:	f031 4400 	bics.w	r4, r1, #2147483648	; 0x80000000
  40a856:	d008      	beq.n	40a86a <__fpclassifyd+0x1a>
  40a858:	4b11      	ldr	r3, [pc, #68]	; (40a8a0 <__fpclassifyd+0x50>)
  40a85a:	f5a1 1280 	sub.w	r2, r1, #1048576	; 0x100000
  40a85e:	429a      	cmp	r2, r3
  40a860:	d808      	bhi.n	40a874 <__fpclassifyd+0x24>
  40a862:	2004      	movs	r0, #4
  40a864:	f85d 4b04 	ldr.w	r4, [sp], #4
  40a868:	4770      	bx	lr
  40a86a:	b918      	cbnz	r0, 40a874 <__fpclassifyd+0x24>
  40a86c:	2002      	movs	r0, #2
  40a86e:	f85d 4b04 	ldr.w	r4, [sp], #4
  40a872:	4770      	bx	lr
  40a874:	f101 41ff 	add.w	r1, r1, #2139095040	; 0x7f800000
  40a878:	4b09      	ldr	r3, [pc, #36]	; (40a8a0 <__fpclassifyd+0x50>)
  40a87a:	f501 01e0 	add.w	r1, r1, #7340032	; 0x700000
  40a87e:	4299      	cmp	r1, r3
  40a880:	d9ef      	bls.n	40a862 <__fpclassifyd+0x12>
  40a882:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
  40a886:	d201      	bcs.n	40a88c <__fpclassifyd+0x3c>
  40a888:	2003      	movs	r0, #3
  40a88a:	e7eb      	b.n	40a864 <__fpclassifyd+0x14>
  40a88c:	4b05      	ldr	r3, [pc, #20]	; (40a8a4 <__fpclassifyd+0x54>)
  40a88e:	429c      	cmp	r4, r3
  40a890:	d001      	beq.n	40a896 <__fpclassifyd+0x46>
  40a892:	2000      	movs	r0, #0
  40a894:	e7e6      	b.n	40a864 <__fpclassifyd+0x14>
  40a896:	fab0 f080 	clz	r0, r0
  40a89a:	0940      	lsrs	r0, r0, #5
  40a89c:	e7e2      	b.n	40a864 <__fpclassifyd+0x14>
  40a89e:	bf00      	nop
  40a8a0:	7fdfffff 	.word	0x7fdfffff
  40a8a4:	7ff00000 	.word	0x7ff00000

0040a8a8 <_sbrk_r>:
  40a8a8:	b538      	push	{r3, r4, r5, lr}
  40a8aa:	4c07      	ldr	r4, [pc, #28]	; (40a8c8 <_sbrk_r+0x20>)
  40a8ac:	2300      	movs	r3, #0
  40a8ae:	4605      	mov	r5, r0
  40a8b0:	4608      	mov	r0, r1
  40a8b2:	6023      	str	r3, [r4, #0]
  40a8b4:	f7f9 fac8 	bl	403e48 <_sbrk>
  40a8b8:	1c43      	adds	r3, r0, #1
  40a8ba:	d000      	beq.n	40a8be <_sbrk_r+0x16>
  40a8bc:	bd38      	pop	{r3, r4, r5, pc}
  40a8be:	6823      	ldr	r3, [r4, #0]
  40a8c0:	2b00      	cmp	r3, #0
  40a8c2:	d0fb      	beq.n	40a8bc <_sbrk_r+0x14>
  40a8c4:	602b      	str	r3, [r5, #0]
  40a8c6:	bd38      	pop	{r3, r4, r5, pc}
  40a8c8:	2000b0cc 	.word	0x2000b0cc

0040a8cc <__ssprint_r>:
  40a8cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40a8d0:	6893      	ldr	r3, [r2, #8]
  40a8d2:	f8d2 8000 	ldr.w	r8, [r2]
  40a8d6:	b083      	sub	sp, #12
  40a8d8:	4691      	mov	r9, r2
  40a8da:	2b00      	cmp	r3, #0
  40a8dc:	d072      	beq.n	40a9c4 <__ssprint_r+0xf8>
  40a8de:	4607      	mov	r7, r0
  40a8e0:	f04f 0b00 	mov.w	fp, #0
  40a8e4:	6808      	ldr	r0, [r1, #0]
  40a8e6:	688b      	ldr	r3, [r1, #8]
  40a8e8:	460d      	mov	r5, r1
  40a8ea:	465c      	mov	r4, fp
  40a8ec:	2c00      	cmp	r4, #0
  40a8ee:	d045      	beq.n	40a97c <__ssprint_r+0xb0>
  40a8f0:	429c      	cmp	r4, r3
  40a8f2:	461e      	mov	r6, r3
  40a8f4:	469a      	mov	sl, r3
  40a8f6:	d348      	bcc.n	40a98a <__ssprint_r+0xbe>
  40a8f8:	89ab      	ldrh	r3, [r5, #12]
  40a8fa:	f413 6f90 	tst.w	r3, #1152	; 0x480
  40a8fe:	d02d      	beq.n	40a95c <__ssprint_r+0x90>
  40a900:	696e      	ldr	r6, [r5, #20]
  40a902:	6929      	ldr	r1, [r5, #16]
  40a904:	eb06 0646 	add.w	r6, r6, r6, lsl #1
  40a908:	ebc1 0a00 	rsb	sl, r1, r0
  40a90c:	eb06 76d6 	add.w	r6, r6, r6, lsr #31
  40a910:	1c60      	adds	r0, r4, #1
  40a912:	1076      	asrs	r6, r6, #1
  40a914:	4450      	add	r0, sl
  40a916:	4286      	cmp	r6, r0
  40a918:	4632      	mov	r2, r6
  40a91a:	bf3c      	itt	cc
  40a91c:	4606      	movcc	r6, r0
  40a91e:	4632      	movcc	r2, r6
  40a920:	055b      	lsls	r3, r3, #21
  40a922:	d535      	bpl.n	40a990 <__ssprint_r+0xc4>
  40a924:	4611      	mov	r1, r2
  40a926:	4638      	mov	r0, r7
  40a928:	f7fe ff64 	bl	4097f4 <_malloc_r>
  40a92c:	2800      	cmp	r0, #0
  40a92e:	d039      	beq.n	40a9a4 <__ssprint_r+0xd8>
  40a930:	4652      	mov	r2, sl
  40a932:	6929      	ldr	r1, [r5, #16]
  40a934:	9001      	str	r0, [sp, #4]
  40a936:	f7fc f8ff 	bl	406b38 <memcpy>
  40a93a:	89aa      	ldrh	r2, [r5, #12]
  40a93c:	9b01      	ldr	r3, [sp, #4]
  40a93e:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
  40a942:	f042 0280 	orr.w	r2, r2, #128	; 0x80
  40a946:	81aa      	strh	r2, [r5, #12]
  40a948:	ebca 0206 	rsb	r2, sl, r6
  40a94c:	eb03 000a 	add.w	r0, r3, sl
  40a950:	616e      	str	r6, [r5, #20]
  40a952:	612b      	str	r3, [r5, #16]
  40a954:	6028      	str	r0, [r5, #0]
  40a956:	60aa      	str	r2, [r5, #8]
  40a958:	4626      	mov	r6, r4
  40a95a:	46a2      	mov	sl, r4
  40a95c:	4652      	mov	r2, sl
  40a95e:	4659      	mov	r1, fp
  40a960:	f7ff fa24 	bl	409dac <memmove>
  40a964:	f8d9 2008 	ldr.w	r2, [r9, #8]
  40a968:	68ab      	ldr	r3, [r5, #8]
  40a96a:	6828      	ldr	r0, [r5, #0]
  40a96c:	1b9b      	subs	r3, r3, r6
  40a96e:	4450      	add	r0, sl
  40a970:	1b14      	subs	r4, r2, r4
  40a972:	60ab      	str	r3, [r5, #8]
  40a974:	6028      	str	r0, [r5, #0]
  40a976:	f8c9 4008 	str.w	r4, [r9, #8]
  40a97a:	b31c      	cbz	r4, 40a9c4 <__ssprint_r+0xf8>
  40a97c:	f8d8 b000 	ldr.w	fp, [r8]
  40a980:	f8d8 4004 	ldr.w	r4, [r8, #4]
  40a984:	f108 0808 	add.w	r8, r8, #8
  40a988:	e7b0      	b.n	40a8ec <__ssprint_r+0x20>
  40a98a:	4626      	mov	r6, r4
  40a98c:	46a2      	mov	sl, r4
  40a98e:	e7e5      	b.n	40a95c <__ssprint_r+0x90>
  40a990:	4638      	mov	r0, r7
  40a992:	f7ff fd67 	bl	40a464 <_realloc_r>
  40a996:	4603      	mov	r3, r0
  40a998:	2800      	cmp	r0, #0
  40a99a:	d1d5      	bne.n	40a948 <__ssprint_r+0x7c>
  40a99c:	4638      	mov	r0, r7
  40a99e:	6929      	ldr	r1, [r5, #16]
  40a9a0:	f7fe fe4c 	bl	40963c <_free_r>
  40a9a4:	230c      	movs	r3, #12
  40a9a6:	603b      	str	r3, [r7, #0]
  40a9a8:	89ab      	ldrh	r3, [r5, #12]
  40a9aa:	2200      	movs	r2, #0
  40a9ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40a9b0:	f04f 30ff 	mov.w	r0, #4294967295
  40a9b4:	81ab      	strh	r3, [r5, #12]
  40a9b6:	f8c9 2008 	str.w	r2, [r9, #8]
  40a9ba:	f8c9 2004 	str.w	r2, [r9, #4]
  40a9be:	b003      	add	sp, #12
  40a9c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40a9c4:	2000      	movs	r0, #0
  40a9c6:	f8c9 0004 	str.w	r0, [r9, #4]
  40a9ca:	b003      	add	sp, #12
  40a9cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0040a9d0 <__register_exitproc>:
  40a9d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  40a9d4:	4c25      	ldr	r4, [pc, #148]	; (40aa6c <__register_exitproc+0x9c>)
  40a9d6:	6825      	ldr	r5, [r4, #0]
  40a9d8:	f8d5 4148 	ldr.w	r4, [r5, #328]	; 0x148
  40a9dc:	4606      	mov	r6, r0
  40a9de:	4688      	mov	r8, r1
  40a9e0:	4692      	mov	sl, r2
  40a9e2:	4699      	mov	r9, r3
  40a9e4:	b3cc      	cbz	r4, 40aa5a <__register_exitproc+0x8a>
  40a9e6:	6860      	ldr	r0, [r4, #4]
  40a9e8:	281f      	cmp	r0, #31
  40a9ea:	dc18      	bgt.n	40aa1e <__register_exitproc+0x4e>
  40a9ec:	1c43      	adds	r3, r0, #1
  40a9ee:	b17e      	cbz	r6, 40aa10 <__register_exitproc+0x40>
  40a9f0:	eb04 0580 	add.w	r5, r4, r0, lsl #2
  40a9f4:	2101      	movs	r1, #1
  40a9f6:	f8c5 a088 	str.w	sl, [r5, #136]	; 0x88
  40a9fa:	f8d4 7188 	ldr.w	r7, [r4, #392]	; 0x188
  40a9fe:	fa01 f200 	lsl.w	r2, r1, r0
  40aa02:	4317      	orrs	r7, r2
  40aa04:	2e02      	cmp	r6, #2
  40aa06:	f8c4 7188 	str.w	r7, [r4, #392]	; 0x188
  40aa0a:	f8c5 9108 	str.w	r9, [r5, #264]	; 0x108
  40aa0e:	d01e      	beq.n	40aa4e <__register_exitproc+0x7e>
  40aa10:	3002      	adds	r0, #2
  40aa12:	6063      	str	r3, [r4, #4]
  40aa14:	f844 8020 	str.w	r8, [r4, r0, lsl #2]
  40aa18:	2000      	movs	r0, #0
  40aa1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40aa1e:	4b14      	ldr	r3, [pc, #80]	; (40aa70 <__register_exitproc+0xa0>)
  40aa20:	b303      	cbz	r3, 40aa64 <__register_exitproc+0x94>
  40aa22:	f44f 70c8 	mov.w	r0, #400	; 0x190
  40aa26:	f3af 8000 	nop.w
  40aa2a:	4604      	mov	r4, r0
  40aa2c:	b1d0      	cbz	r0, 40aa64 <__register_exitproc+0x94>
  40aa2e:	f8d5 3148 	ldr.w	r3, [r5, #328]	; 0x148
  40aa32:	2700      	movs	r7, #0
  40aa34:	e880 0088 	stmia.w	r0, {r3, r7}
  40aa38:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
  40aa3c:	4638      	mov	r0, r7
  40aa3e:	2301      	movs	r3, #1
  40aa40:	f8c4 7188 	str.w	r7, [r4, #392]	; 0x188
  40aa44:	f8c4 718c 	str.w	r7, [r4, #396]	; 0x18c
  40aa48:	2e00      	cmp	r6, #0
  40aa4a:	d0e1      	beq.n	40aa10 <__register_exitproc+0x40>
  40aa4c:	e7d0      	b.n	40a9f0 <__register_exitproc+0x20>
  40aa4e:	f8d4 118c 	ldr.w	r1, [r4, #396]	; 0x18c
  40aa52:	430a      	orrs	r2, r1
  40aa54:	f8c4 218c 	str.w	r2, [r4, #396]	; 0x18c
  40aa58:	e7da      	b.n	40aa10 <__register_exitproc+0x40>
  40aa5a:	f505 74a6 	add.w	r4, r5, #332	; 0x14c
  40aa5e:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
  40aa62:	e7c0      	b.n	40a9e6 <__register_exitproc+0x16>
  40aa64:	f04f 30ff 	mov.w	r0, #4294967295
  40aa68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40aa6c:	0040c080 	.word	0x0040c080
  40aa70:	00000000 	.word	0x00000000

0040aa74 <_calloc_r>:
  40aa74:	b510      	push	{r4, lr}
  40aa76:	fb02 f101 	mul.w	r1, r2, r1
  40aa7a:	f7fe febb 	bl	4097f4 <_malloc_r>
  40aa7e:	4604      	mov	r4, r0
  40aa80:	b168      	cbz	r0, 40aa9e <_calloc_r+0x2a>
  40aa82:	f850 2c04 	ldr.w	r2, [r0, #-4]
  40aa86:	f022 0203 	bic.w	r2, r2, #3
  40aa8a:	3a04      	subs	r2, #4
  40aa8c:	2a24      	cmp	r2, #36	; 0x24
  40aa8e:	d818      	bhi.n	40aac2 <_calloc_r+0x4e>
  40aa90:	2a13      	cmp	r2, #19
  40aa92:	d806      	bhi.n	40aaa2 <_calloc_r+0x2e>
  40aa94:	4603      	mov	r3, r0
  40aa96:	2200      	movs	r2, #0
  40aa98:	601a      	str	r2, [r3, #0]
  40aa9a:	605a      	str	r2, [r3, #4]
  40aa9c:	609a      	str	r2, [r3, #8]
  40aa9e:	4620      	mov	r0, r4
  40aaa0:	bd10      	pop	{r4, pc}
  40aaa2:	2300      	movs	r3, #0
  40aaa4:	2a1b      	cmp	r2, #27
  40aaa6:	6003      	str	r3, [r0, #0]
  40aaa8:	6043      	str	r3, [r0, #4]
  40aaaa:	d90f      	bls.n	40aacc <_calloc_r+0x58>
  40aaac:	2a24      	cmp	r2, #36	; 0x24
  40aaae:	6083      	str	r3, [r0, #8]
  40aab0:	60c3      	str	r3, [r0, #12]
  40aab2:	bf05      	ittet	eq
  40aab4:	6103      	streq	r3, [r0, #16]
  40aab6:	6143      	streq	r3, [r0, #20]
  40aab8:	f100 0310 	addne.w	r3, r0, #16
  40aabc:	f100 0318 	addeq.w	r3, r0, #24
  40aac0:	e7e9      	b.n	40aa96 <_calloc_r+0x22>
  40aac2:	2100      	movs	r1, #0
  40aac4:	f7fc f8d2 	bl	406c6c <memset>
  40aac8:	4620      	mov	r0, r4
  40aaca:	bd10      	pop	{r4, pc}
  40aacc:	f100 0308 	add.w	r3, r0, #8
  40aad0:	e7e1      	b.n	40aa96 <_calloc_r+0x22>
  40aad2:	bf00      	nop

0040aad4 <__aeabi_drsub>:
  40aad4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
  40aad8:	e002      	b.n	40aae0 <__adddf3>
  40aada:	bf00      	nop

0040aadc <__aeabi_dsub>:
  40aadc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0040aae0 <__adddf3>:
  40aae0:	b530      	push	{r4, r5, lr}
  40aae2:	ea4f 0441 	mov.w	r4, r1, lsl #1
  40aae6:	ea4f 0543 	mov.w	r5, r3, lsl #1
  40aaea:	ea94 0f05 	teq	r4, r5
  40aaee:	bf08      	it	eq
  40aaf0:	ea90 0f02 	teqeq	r0, r2
  40aaf4:	bf1f      	itttt	ne
  40aaf6:	ea54 0c00 	orrsne.w	ip, r4, r0
  40aafa:	ea55 0c02 	orrsne.w	ip, r5, r2
  40aafe:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
  40ab02:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  40ab06:	f000 80e2 	beq.w	40acce <__adddf3+0x1ee>
  40ab0a:	ea4f 5454 	mov.w	r4, r4, lsr #21
  40ab0e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
  40ab12:	bfb8      	it	lt
  40ab14:	426d      	neglt	r5, r5
  40ab16:	dd0c      	ble.n	40ab32 <__adddf3+0x52>
  40ab18:	442c      	add	r4, r5
  40ab1a:	ea80 0202 	eor.w	r2, r0, r2
  40ab1e:	ea81 0303 	eor.w	r3, r1, r3
  40ab22:	ea82 0000 	eor.w	r0, r2, r0
  40ab26:	ea83 0101 	eor.w	r1, r3, r1
  40ab2a:	ea80 0202 	eor.w	r2, r0, r2
  40ab2e:	ea81 0303 	eor.w	r3, r1, r3
  40ab32:	2d36      	cmp	r5, #54	; 0x36
  40ab34:	bf88      	it	hi
  40ab36:	bd30      	pophi	{r4, r5, pc}
  40ab38:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  40ab3c:	ea4f 3101 	mov.w	r1, r1, lsl #12
  40ab40:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
  40ab44:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
  40ab48:	d002      	beq.n	40ab50 <__adddf3+0x70>
  40ab4a:	4240      	negs	r0, r0
  40ab4c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  40ab50:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
  40ab54:	ea4f 3303 	mov.w	r3, r3, lsl #12
  40ab58:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
  40ab5c:	d002      	beq.n	40ab64 <__adddf3+0x84>
  40ab5e:	4252      	negs	r2, r2
  40ab60:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
  40ab64:	ea94 0f05 	teq	r4, r5
  40ab68:	f000 80a7 	beq.w	40acba <__adddf3+0x1da>
  40ab6c:	f1a4 0401 	sub.w	r4, r4, #1
  40ab70:	f1d5 0e20 	rsbs	lr, r5, #32
  40ab74:	db0d      	blt.n	40ab92 <__adddf3+0xb2>
  40ab76:	fa02 fc0e 	lsl.w	ip, r2, lr
  40ab7a:	fa22 f205 	lsr.w	r2, r2, r5
  40ab7e:	1880      	adds	r0, r0, r2
  40ab80:	f141 0100 	adc.w	r1, r1, #0
  40ab84:	fa03 f20e 	lsl.w	r2, r3, lr
  40ab88:	1880      	adds	r0, r0, r2
  40ab8a:	fa43 f305 	asr.w	r3, r3, r5
  40ab8e:	4159      	adcs	r1, r3
  40ab90:	e00e      	b.n	40abb0 <__adddf3+0xd0>
  40ab92:	f1a5 0520 	sub.w	r5, r5, #32
  40ab96:	f10e 0e20 	add.w	lr, lr, #32
  40ab9a:	2a01      	cmp	r2, #1
  40ab9c:	fa03 fc0e 	lsl.w	ip, r3, lr
  40aba0:	bf28      	it	cs
  40aba2:	f04c 0c02 	orrcs.w	ip, ip, #2
  40aba6:	fa43 f305 	asr.w	r3, r3, r5
  40abaa:	18c0      	adds	r0, r0, r3
  40abac:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
  40abb0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  40abb4:	d507      	bpl.n	40abc6 <__adddf3+0xe6>
  40abb6:	f04f 0e00 	mov.w	lr, #0
  40abba:	f1dc 0c00 	rsbs	ip, ip, #0
  40abbe:	eb7e 0000 	sbcs.w	r0, lr, r0
  40abc2:	eb6e 0101 	sbc.w	r1, lr, r1
  40abc6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
  40abca:	d31b      	bcc.n	40ac04 <__adddf3+0x124>
  40abcc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
  40abd0:	d30c      	bcc.n	40abec <__adddf3+0x10c>
  40abd2:	0849      	lsrs	r1, r1, #1
  40abd4:	ea5f 0030 	movs.w	r0, r0, rrx
  40abd8:	ea4f 0c3c 	mov.w	ip, ip, rrx
  40abdc:	f104 0401 	add.w	r4, r4, #1
  40abe0:	ea4f 5244 	mov.w	r2, r4, lsl #21
  40abe4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
  40abe8:	f080 809a 	bcs.w	40ad20 <__adddf3+0x240>
  40abec:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
  40abf0:	bf08      	it	eq
  40abf2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  40abf6:	f150 0000 	adcs.w	r0, r0, #0
  40abfa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  40abfe:	ea41 0105 	orr.w	r1, r1, r5
  40ac02:	bd30      	pop	{r4, r5, pc}
  40ac04:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
  40ac08:	4140      	adcs	r0, r0
  40ac0a:	eb41 0101 	adc.w	r1, r1, r1
  40ac0e:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  40ac12:	f1a4 0401 	sub.w	r4, r4, #1
  40ac16:	d1e9      	bne.n	40abec <__adddf3+0x10c>
  40ac18:	f091 0f00 	teq	r1, #0
  40ac1c:	bf04      	itt	eq
  40ac1e:	4601      	moveq	r1, r0
  40ac20:	2000      	moveq	r0, #0
  40ac22:	fab1 f381 	clz	r3, r1
  40ac26:	bf08      	it	eq
  40ac28:	3320      	addeq	r3, #32
  40ac2a:	f1a3 030b 	sub.w	r3, r3, #11
  40ac2e:	f1b3 0220 	subs.w	r2, r3, #32
  40ac32:	da0c      	bge.n	40ac4e <__adddf3+0x16e>
  40ac34:	320c      	adds	r2, #12
  40ac36:	dd08      	ble.n	40ac4a <__adddf3+0x16a>
  40ac38:	f102 0c14 	add.w	ip, r2, #20
  40ac3c:	f1c2 020c 	rsb	r2, r2, #12
  40ac40:	fa01 f00c 	lsl.w	r0, r1, ip
  40ac44:	fa21 f102 	lsr.w	r1, r1, r2
  40ac48:	e00c      	b.n	40ac64 <__adddf3+0x184>
  40ac4a:	f102 0214 	add.w	r2, r2, #20
  40ac4e:	bfd8      	it	le
  40ac50:	f1c2 0c20 	rsble	ip, r2, #32
  40ac54:	fa01 f102 	lsl.w	r1, r1, r2
  40ac58:	fa20 fc0c 	lsr.w	ip, r0, ip
  40ac5c:	bfdc      	itt	le
  40ac5e:	ea41 010c 	orrle.w	r1, r1, ip
  40ac62:	4090      	lslle	r0, r2
  40ac64:	1ae4      	subs	r4, r4, r3
  40ac66:	bfa2      	ittt	ge
  40ac68:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
  40ac6c:	4329      	orrge	r1, r5
  40ac6e:	bd30      	popge	{r4, r5, pc}
  40ac70:	ea6f 0404 	mvn.w	r4, r4
  40ac74:	3c1f      	subs	r4, #31
  40ac76:	da1c      	bge.n	40acb2 <__adddf3+0x1d2>
  40ac78:	340c      	adds	r4, #12
  40ac7a:	dc0e      	bgt.n	40ac9a <__adddf3+0x1ba>
  40ac7c:	f104 0414 	add.w	r4, r4, #20
  40ac80:	f1c4 0220 	rsb	r2, r4, #32
  40ac84:	fa20 f004 	lsr.w	r0, r0, r4
  40ac88:	fa01 f302 	lsl.w	r3, r1, r2
  40ac8c:	ea40 0003 	orr.w	r0, r0, r3
  40ac90:	fa21 f304 	lsr.w	r3, r1, r4
  40ac94:	ea45 0103 	orr.w	r1, r5, r3
  40ac98:	bd30      	pop	{r4, r5, pc}
  40ac9a:	f1c4 040c 	rsb	r4, r4, #12
  40ac9e:	f1c4 0220 	rsb	r2, r4, #32
  40aca2:	fa20 f002 	lsr.w	r0, r0, r2
  40aca6:	fa01 f304 	lsl.w	r3, r1, r4
  40acaa:	ea40 0003 	orr.w	r0, r0, r3
  40acae:	4629      	mov	r1, r5
  40acb0:	bd30      	pop	{r4, r5, pc}
  40acb2:	fa21 f004 	lsr.w	r0, r1, r4
  40acb6:	4629      	mov	r1, r5
  40acb8:	bd30      	pop	{r4, r5, pc}
  40acba:	f094 0f00 	teq	r4, #0
  40acbe:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
  40acc2:	bf06      	itte	eq
  40acc4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
  40acc8:	3401      	addeq	r4, #1
  40acca:	3d01      	subne	r5, #1
  40accc:	e74e      	b.n	40ab6c <__adddf3+0x8c>
  40acce:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  40acd2:	bf18      	it	ne
  40acd4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  40acd8:	d029      	beq.n	40ad2e <__adddf3+0x24e>
  40acda:	ea94 0f05 	teq	r4, r5
  40acde:	bf08      	it	eq
  40ace0:	ea90 0f02 	teqeq	r0, r2
  40ace4:	d005      	beq.n	40acf2 <__adddf3+0x212>
  40ace6:	ea54 0c00 	orrs.w	ip, r4, r0
  40acea:	bf04      	itt	eq
  40acec:	4619      	moveq	r1, r3
  40acee:	4610      	moveq	r0, r2
  40acf0:	bd30      	pop	{r4, r5, pc}
  40acf2:	ea91 0f03 	teq	r1, r3
  40acf6:	bf1e      	ittt	ne
  40acf8:	2100      	movne	r1, #0
  40acfa:	2000      	movne	r0, #0
  40acfc:	bd30      	popne	{r4, r5, pc}
  40acfe:	ea5f 5c54 	movs.w	ip, r4, lsr #21
  40ad02:	d105      	bne.n	40ad10 <__adddf3+0x230>
  40ad04:	0040      	lsls	r0, r0, #1
  40ad06:	4149      	adcs	r1, r1
  40ad08:	bf28      	it	cs
  40ad0a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
  40ad0e:	bd30      	pop	{r4, r5, pc}
  40ad10:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
  40ad14:	bf3c      	itt	cc
  40ad16:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
  40ad1a:	bd30      	popcc	{r4, r5, pc}
  40ad1c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  40ad20:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
  40ad24:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  40ad28:	f04f 0000 	mov.w	r0, #0
  40ad2c:	bd30      	pop	{r4, r5, pc}
  40ad2e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  40ad32:	bf1a      	itte	ne
  40ad34:	4619      	movne	r1, r3
  40ad36:	4610      	movne	r0, r2
  40ad38:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
  40ad3c:	bf1c      	itt	ne
  40ad3e:	460b      	movne	r3, r1
  40ad40:	4602      	movne	r2, r0
  40ad42:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  40ad46:	bf06      	itte	eq
  40ad48:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
  40ad4c:	ea91 0f03 	teqeq	r1, r3
  40ad50:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
  40ad54:	bd30      	pop	{r4, r5, pc}
  40ad56:	bf00      	nop

0040ad58 <__aeabi_ui2d>:
  40ad58:	f090 0f00 	teq	r0, #0
  40ad5c:	bf04      	itt	eq
  40ad5e:	2100      	moveq	r1, #0
  40ad60:	4770      	bxeq	lr
  40ad62:	b530      	push	{r4, r5, lr}
  40ad64:	f44f 6480 	mov.w	r4, #1024	; 0x400
  40ad68:	f104 0432 	add.w	r4, r4, #50	; 0x32
  40ad6c:	f04f 0500 	mov.w	r5, #0
  40ad70:	f04f 0100 	mov.w	r1, #0
  40ad74:	e750      	b.n	40ac18 <__adddf3+0x138>
  40ad76:	bf00      	nop

0040ad78 <__aeabi_i2d>:
  40ad78:	f090 0f00 	teq	r0, #0
  40ad7c:	bf04      	itt	eq
  40ad7e:	2100      	moveq	r1, #0
  40ad80:	4770      	bxeq	lr
  40ad82:	b530      	push	{r4, r5, lr}
  40ad84:	f44f 6480 	mov.w	r4, #1024	; 0x400
  40ad88:	f104 0432 	add.w	r4, r4, #50	; 0x32
  40ad8c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
  40ad90:	bf48      	it	mi
  40ad92:	4240      	negmi	r0, r0
  40ad94:	f04f 0100 	mov.w	r1, #0
  40ad98:	e73e      	b.n	40ac18 <__adddf3+0x138>
  40ad9a:	bf00      	nop

0040ad9c <__aeabi_f2d>:
  40ad9c:	0042      	lsls	r2, r0, #1
  40ad9e:	ea4f 01e2 	mov.w	r1, r2, asr #3
  40ada2:	ea4f 0131 	mov.w	r1, r1, rrx
  40ada6:	ea4f 7002 	mov.w	r0, r2, lsl #28
  40adaa:	bf1f      	itttt	ne
  40adac:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
  40adb0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  40adb4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
  40adb8:	4770      	bxne	lr
  40adba:	f092 0f00 	teq	r2, #0
  40adbe:	bf14      	ite	ne
  40adc0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  40adc4:	4770      	bxeq	lr
  40adc6:	b530      	push	{r4, r5, lr}
  40adc8:	f44f 7460 	mov.w	r4, #896	; 0x380
  40adcc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  40add0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  40add4:	e720      	b.n	40ac18 <__adddf3+0x138>
  40add6:	bf00      	nop

0040add8 <__aeabi_ul2d>:
  40add8:	ea50 0201 	orrs.w	r2, r0, r1
  40addc:	bf08      	it	eq
  40adde:	4770      	bxeq	lr
  40ade0:	b530      	push	{r4, r5, lr}
  40ade2:	f04f 0500 	mov.w	r5, #0
  40ade6:	e00a      	b.n	40adfe <__aeabi_l2d+0x16>

0040ade8 <__aeabi_l2d>:
  40ade8:	ea50 0201 	orrs.w	r2, r0, r1
  40adec:	bf08      	it	eq
  40adee:	4770      	bxeq	lr
  40adf0:	b530      	push	{r4, r5, lr}
  40adf2:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
  40adf6:	d502      	bpl.n	40adfe <__aeabi_l2d+0x16>
  40adf8:	4240      	negs	r0, r0
  40adfa:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  40adfe:	f44f 6480 	mov.w	r4, #1024	; 0x400
  40ae02:	f104 0432 	add.w	r4, r4, #50	; 0x32
  40ae06:	ea5f 5c91 	movs.w	ip, r1, lsr #22
  40ae0a:	f43f aedc 	beq.w	40abc6 <__adddf3+0xe6>
  40ae0e:	f04f 0203 	mov.w	r2, #3
  40ae12:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  40ae16:	bf18      	it	ne
  40ae18:	3203      	addne	r2, #3
  40ae1a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  40ae1e:	bf18      	it	ne
  40ae20:	3203      	addne	r2, #3
  40ae22:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
  40ae26:	f1c2 0320 	rsb	r3, r2, #32
  40ae2a:	fa00 fc03 	lsl.w	ip, r0, r3
  40ae2e:	fa20 f002 	lsr.w	r0, r0, r2
  40ae32:	fa01 fe03 	lsl.w	lr, r1, r3
  40ae36:	ea40 000e 	orr.w	r0, r0, lr
  40ae3a:	fa21 f102 	lsr.w	r1, r1, r2
  40ae3e:	4414      	add	r4, r2
  40ae40:	e6c1      	b.n	40abc6 <__adddf3+0xe6>
  40ae42:	bf00      	nop

0040ae44 <__aeabi_dmul>:
  40ae44:	b570      	push	{r4, r5, r6, lr}
  40ae46:	f04f 0cff 	mov.w	ip, #255	; 0xff
  40ae4a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  40ae4e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  40ae52:	bf1d      	ittte	ne
  40ae54:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  40ae58:	ea94 0f0c 	teqne	r4, ip
  40ae5c:	ea95 0f0c 	teqne	r5, ip
  40ae60:	f000 f8de 	bleq	40b020 <__aeabi_dmul+0x1dc>
  40ae64:	442c      	add	r4, r5
  40ae66:	ea81 0603 	eor.w	r6, r1, r3
  40ae6a:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
  40ae6e:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
  40ae72:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
  40ae76:	bf18      	it	ne
  40ae78:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
  40ae7c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  40ae80:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  40ae84:	d038      	beq.n	40aef8 <__aeabi_dmul+0xb4>
  40ae86:	fba0 ce02 	umull	ip, lr, r0, r2
  40ae8a:	f04f 0500 	mov.w	r5, #0
  40ae8e:	fbe1 e502 	umlal	lr, r5, r1, r2
  40ae92:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
  40ae96:	fbe0 e503 	umlal	lr, r5, r0, r3
  40ae9a:	f04f 0600 	mov.w	r6, #0
  40ae9e:	fbe1 5603 	umlal	r5, r6, r1, r3
  40aea2:	f09c 0f00 	teq	ip, #0
  40aea6:	bf18      	it	ne
  40aea8:	f04e 0e01 	orrne.w	lr, lr, #1
  40aeac:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
  40aeb0:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
  40aeb4:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
  40aeb8:	d204      	bcs.n	40aec4 <__aeabi_dmul+0x80>
  40aeba:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
  40aebe:	416d      	adcs	r5, r5
  40aec0:	eb46 0606 	adc.w	r6, r6, r6
  40aec4:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
  40aec8:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
  40aecc:	ea4f 20c5 	mov.w	r0, r5, lsl #11
  40aed0:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
  40aed4:	ea4f 2ece 	mov.w	lr, lr, lsl #11
  40aed8:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  40aedc:	bf88      	it	hi
  40aede:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  40aee2:	d81e      	bhi.n	40af22 <__aeabi_dmul+0xde>
  40aee4:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
  40aee8:	bf08      	it	eq
  40aeea:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
  40aeee:	f150 0000 	adcs.w	r0, r0, #0
  40aef2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  40aef6:	bd70      	pop	{r4, r5, r6, pc}
  40aef8:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
  40aefc:	ea46 0101 	orr.w	r1, r6, r1
  40af00:	ea40 0002 	orr.w	r0, r0, r2
  40af04:	ea81 0103 	eor.w	r1, r1, r3
  40af08:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
  40af0c:	bfc2      	ittt	gt
  40af0e:	ebd4 050c 	rsbsgt	r5, r4, ip
  40af12:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  40af16:	bd70      	popgt	{r4, r5, r6, pc}
  40af18:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  40af1c:	f04f 0e00 	mov.w	lr, #0
  40af20:	3c01      	subs	r4, #1
  40af22:	f300 80ab 	bgt.w	40b07c <__aeabi_dmul+0x238>
  40af26:	f114 0f36 	cmn.w	r4, #54	; 0x36
  40af2a:	bfde      	ittt	le
  40af2c:	2000      	movle	r0, #0
  40af2e:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
  40af32:	bd70      	pople	{r4, r5, r6, pc}
  40af34:	f1c4 0400 	rsb	r4, r4, #0
  40af38:	3c20      	subs	r4, #32
  40af3a:	da35      	bge.n	40afa8 <__aeabi_dmul+0x164>
  40af3c:	340c      	adds	r4, #12
  40af3e:	dc1b      	bgt.n	40af78 <__aeabi_dmul+0x134>
  40af40:	f104 0414 	add.w	r4, r4, #20
  40af44:	f1c4 0520 	rsb	r5, r4, #32
  40af48:	fa00 f305 	lsl.w	r3, r0, r5
  40af4c:	fa20 f004 	lsr.w	r0, r0, r4
  40af50:	fa01 f205 	lsl.w	r2, r1, r5
  40af54:	ea40 0002 	orr.w	r0, r0, r2
  40af58:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
  40af5c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  40af60:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  40af64:	fa21 f604 	lsr.w	r6, r1, r4
  40af68:	eb42 0106 	adc.w	r1, r2, r6
  40af6c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  40af70:	bf08      	it	eq
  40af72:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  40af76:	bd70      	pop	{r4, r5, r6, pc}
  40af78:	f1c4 040c 	rsb	r4, r4, #12
  40af7c:	f1c4 0520 	rsb	r5, r4, #32
  40af80:	fa00 f304 	lsl.w	r3, r0, r4
  40af84:	fa20 f005 	lsr.w	r0, r0, r5
  40af88:	fa01 f204 	lsl.w	r2, r1, r4
  40af8c:	ea40 0002 	orr.w	r0, r0, r2
  40af90:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  40af94:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  40af98:	f141 0100 	adc.w	r1, r1, #0
  40af9c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  40afa0:	bf08      	it	eq
  40afa2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  40afa6:	bd70      	pop	{r4, r5, r6, pc}
  40afa8:	f1c4 0520 	rsb	r5, r4, #32
  40afac:	fa00 f205 	lsl.w	r2, r0, r5
  40afb0:	ea4e 0e02 	orr.w	lr, lr, r2
  40afb4:	fa20 f304 	lsr.w	r3, r0, r4
  40afb8:	fa01 f205 	lsl.w	r2, r1, r5
  40afbc:	ea43 0302 	orr.w	r3, r3, r2
  40afc0:	fa21 f004 	lsr.w	r0, r1, r4
  40afc4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  40afc8:	fa21 f204 	lsr.w	r2, r1, r4
  40afcc:	ea20 0002 	bic.w	r0, r0, r2
  40afd0:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
  40afd4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  40afd8:	bf08      	it	eq
  40afda:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  40afde:	bd70      	pop	{r4, r5, r6, pc}
  40afe0:	f094 0f00 	teq	r4, #0
  40afe4:	d10f      	bne.n	40b006 <__aeabi_dmul+0x1c2>
  40afe6:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
  40afea:	0040      	lsls	r0, r0, #1
  40afec:	eb41 0101 	adc.w	r1, r1, r1
  40aff0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  40aff4:	bf08      	it	eq
  40aff6:	3c01      	subeq	r4, #1
  40aff8:	d0f7      	beq.n	40afea <__aeabi_dmul+0x1a6>
  40affa:	ea41 0106 	orr.w	r1, r1, r6
  40affe:	f095 0f00 	teq	r5, #0
  40b002:	bf18      	it	ne
  40b004:	4770      	bxne	lr
  40b006:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
  40b00a:	0052      	lsls	r2, r2, #1
  40b00c:	eb43 0303 	adc.w	r3, r3, r3
  40b010:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
  40b014:	bf08      	it	eq
  40b016:	3d01      	subeq	r5, #1
  40b018:	d0f7      	beq.n	40b00a <__aeabi_dmul+0x1c6>
  40b01a:	ea43 0306 	orr.w	r3, r3, r6
  40b01e:	4770      	bx	lr
  40b020:	ea94 0f0c 	teq	r4, ip
  40b024:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  40b028:	bf18      	it	ne
  40b02a:	ea95 0f0c 	teqne	r5, ip
  40b02e:	d00c      	beq.n	40b04a <__aeabi_dmul+0x206>
  40b030:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  40b034:	bf18      	it	ne
  40b036:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  40b03a:	d1d1      	bne.n	40afe0 <__aeabi_dmul+0x19c>
  40b03c:	ea81 0103 	eor.w	r1, r1, r3
  40b040:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  40b044:	f04f 0000 	mov.w	r0, #0
  40b048:	bd70      	pop	{r4, r5, r6, pc}
  40b04a:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  40b04e:	bf06      	itte	eq
  40b050:	4610      	moveq	r0, r2
  40b052:	4619      	moveq	r1, r3
  40b054:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  40b058:	d019      	beq.n	40b08e <__aeabi_dmul+0x24a>
  40b05a:	ea94 0f0c 	teq	r4, ip
  40b05e:	d102      	bne.n	40b066 <__aeabi_dmul+0x222>
  40b060:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
  40b064:	d113      	bne.n	40b08e <__aeabi_dmul+0x24a>
  40b066:	ea95 0f0c 	teq	r5, ip
  40b06a:	d105      	bne.n	40b078 <__aeabi_dmul+0x234>
  40b06c:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
  40b070:	bf1c      	itt	ne
  40b072:	4610      	movne	r0, r2
  40b074:	4619      	movne	r1, r3
  40b076:	d10a      	bne.n	40b08e <__aeabi_dmul+0x24a>
  40b078:	ea81 0103 	eor.w	r1, r1, r3
  40b07c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  40b080:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  40b084:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  40b088:	f04f 0000 	mov.w	r0, #0
  40b08c:	bd70      	pop	{r4, r5, r6, pc}
  40b08e:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  40b092:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
  40b096:	bd70      	pop	{r4, r5, r6, pc}

0040b098 <__aeabi_ddiv>:
  40b098:	b570      	push	{r4, r5, r6, lr}
  40b09a:	f04f 0cff 	mov.w	ip, #255	; 0xff
  40b09e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  40b0a2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  40b0a6:	bf1d      	ittte	ne
  40b0a8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  40b0ac:	ea94 0f0c 	teqne	r4, ip
  40b0b0:	ea95 0f0c 	teqne	r5, ip
  40b0b4:	f000 f8a7 	bleq	40b206 <__aeabi_ddiv+0x16e>
  40b0b8:	eba4 0405 	sub.w	r4, r4, r5
  40b0bc:	ea81 0e03 	eor.w	lr, r1, r3
  40b0c0:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  40b0c4:	ea4f 3101 	mov.w	r1, r1, lsl #12
  40b0c8:	f000 8088 	beq.w	40b1dc <__aeabi_ddiv+0x144>
  40b0cc:	ea4f 3303 	mov.w	r3, r3, lsl #12
  40b0d0:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
  40b0d4:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
  40b0d8:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
  40b0dc:	ea4f 2202 	mov.w	r2, r2, lsl #8
  40b0e0:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
  40b0e4:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
  40b0e8:	ea4f 2600 	mov.w	r6, r0, lsl #8
  40b0ec:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
  40b0f0:	429d      	cmp	r5, r3
  40b0f2:	bf08      	it	eq
  40b0f4:	4296      	cmpeq	r6, r2
  40b0f6:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
  40b0fa:	f504 7440 	add.w	r4, r4, #768	; 0x300
  40b0fe:	d202      	bcs.n	40b106 <__aeabi_ddiv+0x6e>
  40b100:	085b      	lsrs	r3, r3, #1
  40b102:	ea4f 0232 	mov.w	r2, r2, rrx
  40b106:	1ab6      	subs	r6, r6, r2
  40b108:	eb65 0503 	sbc.w	r5, r5, r3
  40b10c:	085b      	lsrs	r3, r3, #1
  40b10e:	ea4f 0232 	mov.w	r2, r2, rrx
  40b112:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
  40b116:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
  40b11a:	ebb6 0e02 	subs.w	lr, r6, r2
  40b11e:	eb75 0e03 	sbcs.w	lr, r5, r3
  40b122:	bf22      	ittt	cs
  40b124:	1ab6      	subcs	r6, r6, r2
  40b126:	4675      	movcs	r5, lr
  40b128:	ea40 000c 	orrcs.w	r0, r0, ip
  40b12c:	085b      	lsrs	r3, r3, #1
  40b12e:	ea4f 0232 	mov.w	r2, r2, rrx
  40b132:	ebb6 0e02 	subs.w	lr, r6, r2
  40b136:	eb75 0e03 	sbcs.w	lr, r5, r3
  40b13a:	bf22      	ittt	cs
  40b13c:	1ab6      	subcs	r6, r6, r2
  40b13e:	4675      	movcs	r5, lr
  40b140:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
  40b144:	085b      	lsrs	r3, r3, #1
  40b146:	ea4f 0232 	mov.w	r2, r2, rrx
  40b14a:	ebb6 0e02 	subs.w	lr, r6, r2
  40b14e:	eb75 0e03 	sbcs.w	lr, r5, r3
  40b152:	bf22      	ittt	cs
  40b154:	1ab6      	subcs	r6, r6, r2
  40b156:	4675      	movcs	r5, lr
  40b158:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
  40b15c:	085b      	lsrs	r3, r3, #1
  40b15e:	ea4f 0232 	mov.w	r2, r2, rrx
  40b162:	ebb6 0e02 	subs.w	lr, r6, r2
  40b166:	eb75 0e03 	sbcs.w	lr, r5, r3
  40b16a:	bf22      	ittt	cs
  40b16c:	1ab6      	subcs	r6, r6, r2
  40b16e:	4675      	movcs	r5, lr
  40b170:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
  40b174:	ea55 0e06 	orrs.w	lr, r5, r6
  40b178:	d018      	beq.n	40b1ac <__aeabi_ddiv+0x114>
  40b17a:	ea4f 1505 	mov.w	r5, r5, lsl #4
  40b17e:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
  40b182:	ea4f 1606 	mov.w	r6, r6, lsl #4
  40b186:	ea4f 03c3 	mov.w	r3, r3, lsl #3
  40b18a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
  40b18e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
  40b192:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
  40b196:	d1c0      	bne.n	40b11a <__aeabi_ddiv+0x82>
  40b198:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  40b19c:	d10b      	bne.n	40b1b6 <__aeabi_ddiv+0x11e>
  40b19e:	ea41 0100 	orr.w	r1, r1, r0
  40b1a2:	f04f 0000 	mov.w	r0, #0
  40b1a6:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
  40b1aa:	e7b6      	b.n	40b11a <__aeabi_ddiv+0x82>
  40b1ac:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  40b1b0:	bf04      	itt	eq
  40b1b2:	4301      	orreq	r1, r0
  40b1b4:	2000      	moveq	r0, #0
  40b1b6:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  40b1ba:	bf88      	it	hi
  40b1bc:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  40b1c0:	f63f aeaf 	bhi.w	40af22 <__aeabi_dmul+0xde>
  40b1c4:	ebb5 0c03 	subs.w	ip, r5, r3
  40b1c8:	bf04      	itt	eq
  40b1ca:	ebb6 0c02 	subseq.w	ip, r6, r2
  40b1ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  40b1d2:	f150 0000 	adcs.w	r0, r0, #0
  40b1d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  40b1da:	bd70      	pop	{r4, r5, r6, pc}
  40b1dc:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
  40b1e0:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
  40b1e4:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
  40b1e8:	bfc2      	ittt	gt
  40b1ea:	ebd4 050c 	rsbsgt	r5, r4, ip
  40b1ee:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  40b1f2:	bd70      	popgt	{r4, r5, r6, pc}
  40b1f4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  40b1f8:	f04f 0e00 	mov.w	lr, #0
  40b1fc:	3c01      	subs	r4, #1
  40b1fe:	e690      	b.n	40af22 <__aeabi_dmul+0xde>
  40b200:	ea45 0e06 	orr.w	lr, r5, r6
  40b204:	e68d      	b.n	40af22 <__aeabi_dmul+0xde>
  40b206:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  40b20a:	ea94 0f0c 	teq	r4, ip
  40b20e:	bf08      	it	eq
  40b210:	ea95 0f0c 	teqeq	r5, ip
  40b214:	f43f af3b 	beq.w	40b08e <__aeabi_dmul+0x24a>
  40b218:	ea94 0f0c 	teq	r4, ip
  40b21c:	d10a      	bne.n	40b234 <__aeabi_ddiv+0x19c>
  40b21e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  40b222:	f47f af34 	bne.w	40b08e <__aeabi_dmul+0x24a>
  40b226:	ea95 0f0c 	teq	r5, ip
  40b22a:	f47f af25 	bne.w	40b078 <__aeabi_dmul+0x234>
  40b22e:	4610      	mov	r0, r2
  40b230:	4619      	mov	r1, r3
  40b232:	e72c      	b.n	40b08e <__aeabi_dmul+0x24a>
  40b234:	ea95 0f0c 	teq	r5, ip
  40b238:	d106      	bne.n	40b248 <__aeabi_ddiv+0x1b0>
  40b23a:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  40b23e:	f43f aefd 	beq.w	40b03c <__aeabi_dmul+0x1f8>
  40b242:	4610      	mov	r0, r2
  40b244:	4619      	mov	r1, r3
  40b246:	e722      	b.n	40b08e <__aeabi_dmul+0x24a>
  40b248:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  40b24c:	bf18      	it	ne
  40b24e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  40b252:	f47f aec5 	bne.w	40afe0 <__aeabi_dmul+0x19c>
  40b256:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
  40b25a:	f47f af0d 	bne.w	40b078 <__aeabi_dmul+0x234>
  40b25e:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
  40b262:	f47f aeeb 	bne.w	40b03c <__aeabi_dmul+0x1f8>
  40b266:	e712      	b.n	40b08e <__aeabi_dmul+0x24a>

0040b268 <__gedf2>:
  40b268:	f04f 3cff 	mov.w	ip, #4294967295
  40b26c:	e006      	b.n	40b27c <__cmpdf2+0x4>
  40b26e:	bf00      	nop

0040b270 <__ledf2>:
  40b270:	f04f 0c01 	mov.w	ip, #1
  40b274:	e002      	b.n	40b27c <__cmpdf2+0x4>
  40b276:	bf00      	nop

0040b278 <__cmpdf2>:
  40b278:	f04f 0c01 	mov.w	ip, #1
  40b27c:	f84d cd04 	str.w	ip, [sp, #-4]!
  40b280:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  40b284:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  40b288:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  40b28c:	bf18      	it	ne
  40b28e:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
  40b292:	d01b      	beq.n	40b2cc <__cmpdf2+0x54>
  40b294:	b001      	add	sp, #4
  40b296:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
  40b29a:	bf0c      	ite	eq
  40b29c:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
  40b2a0:	ea91 0f03 	teqne	r1, r3
  40b2a4:	bf02      	ittt	eq
  40b2a6:	ea90 0f02 	teqeq	r0, r2
  40b2aa:	2000      	moveq	r0, #0
  40b2ac:	4770      	bxeq	lr
  40b2ae:	f110 0f00 	cmn.w	r0, #0
  40b2b2:	ea91 0f03 	teq	r1, r3
  40b2b6:	bf58      	it	pl
  40b2b8:	4299      	cmppl	r1, r3
  40b2ba:	bf08      	it	eq
  40b2bc:	4290      	cmpeq	r0, r2
  40b2be:	bf2c      	ite	cs
  40b2c0:	17d8      	asrcs	r0, r3, #31
  40b2c2:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
  40b2c6:	f040 0001 	orr.w	r0, r0, #1
  40b2ca:	4770      	bx	lr
  40b2cc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  40b2d0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  40b2d4:	d102      	bne.n	40b2dc <__cmpdf2+0x64>
  40b2d6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
  40b2da:	d107      	bne.n	40b2ec <__cmpdf2+0x74>
  40b2dc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  40b2e0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  40b2e4:	d1d6      	bne.n	40b294 <__cmpdf2+0x1c>
  40b2e6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
  40b2ea:	d0d3      	beq.n	40b294 <__cmpdf2+0x1c>
  40b2ec:	f85d 0b04 	ldr.w	r0, [sp], #4
  40b2f0:	4770      	bx	lr
  40b2f2:	bf00      	nop

0040b2f4 <__aeabi_cdrcmple>:
  40b2f4:	4684      	mov	ip, r0
  40b2f6:	4610      	mov	r0, r2
  40b2f8:	4662      	mov	r2, ip
  40b2fa:	468c      	mov	ip, r1
  40b2fc:	4619      	mov	r1, r3
  40b2fe:	4663      	mov	r3, ip
  40b300:	e000      	b.n	40b304 <__aeabi_cdcmpeq>
  40b302:	bf00      	nop

0040b304 <__aeabi_cdcmpeq>:
  40b304:	b501      	push	{r0, lr}
  40b306:	f7ff ffb7 	bl	40b278 <__cmpdf2>
  40b30a:	2800      	cmp	r0, #0
  40b30c:	bf48      	it	mi
  40b30e:	f110 0f00 	cmnmi.w	r0, #0
  40b312:	bd01      	pop	{r0, pc}

0040b314 <__aeabi_dcmpeq>:
  40b314:	f84d ed08 	str.w	lr, [sp, #-8]!
  40b318:	f7ff fff4 	bl	40b304 <__aeabi_cdcmpeq>
  40b31c:	bf0c      	ite	eq
  40b31e:	2001      	moveq	r0, #1
  40b320:	2000      	movne	r0, #0
  40b322:	f85d fb08 	ldr.w	pc, [sp], #8
  40b326:	bf00      	nop

0040b328 <__aeabi_dcmplt>:
  40b328:	f84d ed08 	str.w	lr, [sp, #-8]!
  40b32c:	f7ff ffea 	bl	40b304 <__aeabi_cdcmpeq>
  40b330:	bf34      	ite	cc
  40b332:	2001      	movcc	r0, #1
  40b334:	2000      	movcs	r0, #0
  40b336:	f85d fb08 	ldr.w	pc, [sp], #8
  40b33a:	bf00      	nop

0040b33c <__aeabi_dcmple>:
  40b33c:	f84d ed08 	str.w	lr, [sp, #-8]!
  40b340:	f7ff ffe0 	bl	40b304 <__aeabi_cdcmpeq>
  40b344:	bf94      	ite	ls
  40b346:	2001      	movls	r0, #1
  40b348:	2000      	movhi	r0, #0
  40b34a:	f85d fb08 	ldr.w	pc, [sp], #8
  40b34e:	bf00      	nop

0040b350 <__aeabi_dcmpge>:
  40b350:	f84d ed08 	str.w	lr, [sp, #-8]!
  40b354:	f7ff ffce 	bl	40b2f4 <__aeabi_cdrcmple>
  40b358:	bf94      	ite	ls
  40b35a:	2001      	movls	r0, #1
  40b35c:	2000      	movhi	r0, #0
  40b35e:	f85d fb08 	ldr.w	pc, [sp], #8
  40b362:	bf00      	nop

0040b364 <__aeabi_dcmpgt>:
  40b364:	f84d ed08 	str.w	lr, [sp, #-8]!
  40b368:	f7ff ffc4 	bl	40b2f4 <__aeabi_cdrcmple>
  40b36c:	bf34      	ite	cc
  40b36e:	2001      	movcc	r0, #1
  40b370:	2000      	movcs	r0, #0
  40b372:	f85d fb08 	ldr.w	pc, [sp], #8
  40b376:	bf00      	nop

0040b378 <__aeabi_d2iz>:
  40b378:	ea4f 0241 	mov.w	r2, r1, lsl #1
  40b37c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
  40b380:	d215      	bcs.n	40b3ae <__aeabi_d2iz+0x36>
  40b382:	d511      	bpl.n	40b3a8 <__aeabi_d2iz+0x30>
  40b384:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
  40b388:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
  40b38c:	d912      	bls.n	40b3b4 <__aeabi_d2iz+0x3c>
  40b38e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
  40b392:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
  40b396:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
  40b39a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  40b39e:	fa23 f002 	lsr.w	r0, r3, r2
  40b3a2:	bf18      	it	ne
  40b3a4:	4240      	negne	r0, r0
  40b3a6:	4770      	bx	lr
  40b3a8:	f04f 0000 	mov.w	r0, #0
  40b3ac:	4770      	bx	lr
  40b3ae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
  40b3b2:	d105      	bne.n	40b3c0 <__aeabi_d2iz+0x48>
  40b3b4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
  40b3b8:	bf08      	it	eq
  40b3ba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
  40b3be:	4770      	bx	lr
  40b3c0:	f04f 0000 	mov.w	r0, #0
  40b3c4:	4770      	bx	lr
  40b3c6:	bf00      	nop

0040b3c8 <__aeabi_uldivmod>:
  40b3c8:	b953      	cbnz	r3, 40b3e0 <__aeabi_uldivmod+0x18>
  40b3ca:	b94a      	cbnz	r2, 40b3e0 <__aeabi_uldivmod+0x18>
  40b3cc:	2900      	cmp	r1, #0
  40b3ce:	bf08      	it	eq
  40b3d0:	2800      	cmpeq	r0, #0
  40b3d2:	bf1c      	itt	ne
  40b3d4:	f04f 31ff 	movne.w	r1, #4294967295
  40b3d8:	f04f 30ff 	movne.w	r0, #4294967295
  40b3dc:	f000 b83c 	b.w	40b458 <__aeabi_idiv0>
  40b3e0:	b082      	sub	sp, #8
  40b3e2:	46ec      	mov	ip, sp
  40b3e4:	e92d 5000 	stmdb	sp!, {ip, lr}
  40b3e8:	f000 f81e 	bl	40b428 <__gnu_uldivmod_helper>
  40b3ec:	f8dd e004 	ldr.w	lr, [sp, #4]
  40b3f0:	b002      	add	sp, #8
  40b3f2:	bc0c      	pop	{r2, r3}
  40b3f4:	4770      	bx	lr
  40b3f6:	bf00      	nop

0040b3f8 <__gnu_ldivmod_helper>:
  40b3f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40b3fc:	9c06      	ldr	r4, [sp, #24]
  40b3fe:	4615      	mov	r5, r2
  40b400:	4606      	mov	r6, r0
  40b402:	460f      	mov	r7, r1
  40b404:	4698      	mov	r8, r3
  40b406:	f000 f829 	bl	40b45c <__divdi3>
  40b40a:	fb05 f301 	mul.w	r3, r5, r1
  40b40e:	fb00 3808 	mla	r8, r0, r8, r3
  40b412:	fba5 2300 	umull	r2, r3, r5, r0
  40b416:	1ab2      	subs	r2, r6, r2
  40b418:	4443      	add	r3, r8
  40b41a:	eb67 0303 	sbc.w	r3, r7, r3
  40b41e:	e9c4 2300 	strd	r2, r3, [r4]
  40b422:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40b426:	bf00      	nop

0040b428 <__gnu_uldivmod_helper>:
  40b428:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40b42c:	9c06      	ldr	r4, [sp, #24]
  40b42e:	4690      	mov	r8, r2
  40b430:	4606      	mov	r6, r0
  40b432:	460f      	mov	r7, r1
  40b434:	461d      	mov	r5, r3
  40b436:	f000 f95f 	bl	40b6f8 <__udivdi3>
  40b43a:	fb00 f505 	mul.w	r5, r0, r5
  40b43e:	fba0 2308 	umull	r2, r3, r0, r8
  40b442:	fb08 5501 	mla	r5, r8, r1, r5
  40b446:	1ab2      	subs	r2, r6, r2
  40b448:	442b      	add	r3, r5
  40b44a:	eb67 0303 	sbc.w	r3, r7, r3
  40b44e:	e9c4 2300 	strd	r2, r3, [r4]
  40b452:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40b456:	bf00      	nop

0040b458 <__aeabi_idiv0>:
  40b458:	4770      	bx	lr
  40b45a:	bf00      	nop

0040b45c <__divdi3>:
  40b45c:	2900      	cmp	r1, #0
  40b45e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  40b462:	f2c0 80a6 	blt.w	40b5b2 <__divdi3+0x156>
  40b466:	2600      	movs	r6, #0
  40b468:	2b00      	cmp	r3, #0
  40b46a:	f2c0 809c 	blt.w	40b5a6 <__divdi3+0x14a>
  40b46e:	4688      	mov	r8, r1
  40b470:	4694      	mov	ip, r2
  40b472:	469e      	mov	lr, r3
  40b474:	4615      	mov	r5, r2
  40b476:	4604      	mov	r4, r0
  40b478:	460f      	mov	r7, r1
  40b47a:	2b00      	cmp	r3, #0
  40b47c:	d13d      	bne.n	40b4fa <__divdi3+0x9e>
  40b47e:	428a      	cmp	r2, r1
  40b480:	d959      	bls.n	40b536 <__divdi3+0xda>
  40b482:	fab2 f382 	clz	r3, r2
  40b486:	b13b      	cbz	r3, 40b498 <__divdi3+0x3c>
  40b488:	f1c3 0220 	rsb	r2, r3, #32
  40b48c:	409f      	lsls	r7, r3
  40b48e:	fa20 f202 	lsr.w	r2, r0, r2
  40b492:	409d      	lsls	r5, r3
  40b494:	4317      	orrs	r7, r2
  40b496:	409c      	lsls	r4, r3
  40b498:	0c29      	lsrs	r1, r5, #16
  40b49a:	0c22      	lsrs	r2, r4, #16
  40b49c:	fbb7 fef1 	udiv	lr, r7, r1
  40b4a0:	b2a8      	uxth	r0, r5
  40b4a2:	fb01 771e 	mls	r7, r1, lr, r7
  40b4a6:	ea42 4707 	orr.w	r7, r2, r7, lsl #16
  40b4aa:	fb00 f30e 	mul.w	r3, r0, lr
  40b4ae:	42bb      	cmp	r3, r7
  40b4b0:	d90a      	bls.n	40b4c8 <__divdi3+0x6c>
  40b4b2:	197f      	adds	r7, r7, r5
  40b4b4:	f10e 32ff 	add.w	r2, lr, #4294967295
  40b4b8:	f080 8105 	bcs.w	40b6c6 <__divdi3+0x26a>
  40b4bc:	42bb      	cmp	r3, r7
  40b4be:	f240 8102 	bls.w	40b6c6 <__divdi3+0x26a>
  40b4c2:	f1ae 0e02 	sub.w	lr, lr, #2
  40b4c6:	442f      	add	r7, r5
  40b4c8:	1aff      	subs	r7, r7, r3
  40b4ca:	b2a4      	uxth	r4, r4
  40b4cc:	fbb7 f3f1 	udiv	r3, r7, r1
  40b4d0:	fb01 7713 	mls	r7, r1, r3, r7
  40b4d4:	ea44 4707 	orr.w	r7, r4, r7, lsl #16
  40b4d8:	fb00 f003 	mul.w	r0, r0, r3
  40b4dc:	42b8      	cmp	r0, r7
  40b4de:	d908      	bls.n	40b4f2 <__divdi3+0x96>
  40b4e0:	197f      	adds	r7, r7, r5
  40b4e2:	f103 32ff 	add.w	r2, r3, #4294967295
  40b4e6:	f080 80f0 	bcs.w	40b6ca <__divdi3+0x26e>
  40b4ea:	42b8      	cmp	r0, r7
  40b4ec:	f240 80ed 	bls.w	40b6ca <__divdi3+0x26e>
  40b4f0:	3b02      	subs	r3, #2
  40b4f2:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
  40b4f6:	2200      	movs	r2, #0
  40b4f8:	e003      	b.n	40b502 <__divdi3+0xa6>
  40b4fa:	428b      	cmp	r3, r1
  40b4fc:	d90f      	bls.n	40b51e <__divdi3+0xc2>
  40b4fe:	2200      	movs	r2, #0
  40b500:	4613      	mov	r3, r2
  40b502:	1c34      	adds	r4, r6, #0
  40b504:	bf18      	it	ne
  40b506:	2401      	movne	r4, #1
  40b508:	4260      	negs	r0, r4
  40b50a:	f04f 0500 	mov.w	r5, #0
  40b50e:	eb65 0145 	sbc.w	r1, r5, r5, lsl #1
  40b512:	4058      	eors	r0, r3
  40b514:	4051      	eors	r1, r2
  40b516:	1900      	adds	r0, r0, r4
  40b518:	4169      	adcs	r1, r5
  40b51a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  40b51e:	fab3 f283 	clz	r2, r3
  40b522:	2a00      	cmp	r2, #0
  40b524:	f040 8086 	bne.w	40b634 <__divdi3+0x1d8>
  40b528:	428b      	cmp	r3, r1
  40b52a:	d302      	bcc.n	40b532 <__divdi3+0xd6>
  40b52c:	4584      	cmp	ip, r0
  40b52e:	f200 80db 	bhi.w	40b6e8 <__divdi3+0x28c>
  40b532:	2301      	movs	r3, #1
  40b534:	e7e5      	b.n	40b502 <__divdi3+0xa6>
  40b536:	b912      	cbnz	r2, 40b53e <__divdi3+0xe2>
  40b538:	2301      	movs	r3, #1
  40b53a:	fbb3 f5f2 	udiv	r5, r3, r2
  40b53e:	fab5 f085 	clz	r0, r5
  40b542:	2800      	cmp	r0, #0
  40b544:	d13b      	bne.n	40b5be <__divdi3+0x162>
  40b546:	1b78      	subs	r0, r7, r5
  40b548:	ea4f 4e15 	mov.w	lr, r5, lsr #16
  40b54c:	fa1f fc85 	uxth.w	ip, r5
  40b550:	2201      	movs	r2, #1
  40b552:	fbb0 f8fe 	udiv	r8, r0, lr
  40b556:	0c21      	lsrs	r1, r4, #16
  40b558:	fb0e 0718 	mls	r7, lr, r8, r0
  40b55c:	ea41 4707 	orr.w	r7, r1, r7, lsl #16
  40b560:	fb0c f308 	mul.w	r3, ip, r8
  40b564:	42bb      	cmp	r3, r7
  40b566:	d907      	bls.n	40b578 <__divdi3+0x11c>
  40b568:	197f      	adds	r7, r7, r5
  40b56a:	f108 31ff 	add.w	r1, r8, #4294967295
  40b56e:	d202      	bcs.n	40b576 <__divdi3+0x11a>
  40b570:	42bb      	cmp	r3, r7
  40b572:	f200 80bd 	bhi.w	40b6f0 <__divdi3+0x294>
  40b576:	4688      	mov	r8, r1
  40b578:	1aff      	subs	r7, r7, r3
  40b57a:	b2a4      	uxth	r4, r4
  40b57c:	fbb7 f3fe 	udiv	r3, r7, lr
  40b580:	fb0e 7713 	mls	r7, lr, r3, r7
  40b584:	ea44 4707 	orr.w	r7, r4, r7, lsl #16
  40b588:	fb0c fc03 	mul.w	ip, ip, r3
  40b58c:	45bc      	cmp	ip, r7
  40b58e:	d907      	bls.n	40b5a0 <__divdi3+0x144>
  40b590:	197f      	adds	r7, r7, r5
  40b592:	f103 31ff 	add.w	r1, r3, #4294967295
  40b596:	d202      	bcs.n	40b59e <__divdi3+0x142>
  40b598:	45bc      	cmp	ip, r7
  40b59a:	f200 80a7 	bhi.w	40b6ec <__divdi3+0x290>
  40b59e:	460b      	mov	r3, r1
  40b5a0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
  40b5a4:	e7ad      	b.n	40b502 <__divdi3+0xa6>
  40b5a6:	4252      	negs	r2, r2
  40b5a8:	ea6f 0606 	mvn.w	r6, r6
  40b5ac:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
  40b5b0:	e75d      	b.n	40b46e <__divdi3+0x12>
  40b5b2:	4240      	negs	r0, r0
  40b5b4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  40b5b8:	f04f 36ff 	mov.w	r6, #4294967295
  40b5bc:	e754      	b.n	40b468 <__divdi3+0xc>
  40b5be:	f1c0 0220 	rsb	r2, r0, #32
  40b5c2:	fa24 f102 	lsr.w	r1, r4, r2
  40b5c6:	fa07 f300 	lsl.w	r3, r7, r0
  40b5ca:	4085      	lsls	r5, r0
  40b5cc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
  40b5d0:	40d7      	lsrs	r7, r2
  40b5d2:	4319      	orrs	r1, r3
  40b5d4:	fbb7 f2fe 	udiv	r2, r7, lr
  40b5d8:	0c0b      	lsrs	r3, r1, #16
  40b5da:	fb0e 7712 	mls	r7, lr, r2, r7
  40b5de:	fa1f fc85 	uxth.w	ip, r5
  40b5e2:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
  40b5e6:	fb0c f702 	mul.w	r7, ip, r2
  40b5ea:	429f      	cmp	r7, r3
  40b5ec:	fa04 f400 	lsl.w	r4, r4, r0
  40b5f0:	d907      	bls.n	40b602 <__divdi3+0x1a6>
  40b5f2:	195b      	adds	r3, r3, r5
  40b5f4:	f102 30ff 	add.w	r0, r2, #4294967295
  40b5f8:	d274      	bcs.n	40b6e4 <__divdi3+0x288>
  40b5fa:	429f      	cmp	r7, r3
  40b5fc:	d972      	bls.n	40b6e4 <__divdi3+0x288>
  40b5fe:	3a02      	subs	r2, #2
  40b600:	442b      	add	r3, r5
  40b602:	1bdf      	subs	r7, r3, r7
  40b604:	b289      	uxth	r1, r1
  40b606:	fbb7 f8fe 	udiv	r8, r7, lr
  40b60a:	fb0e 7318 	mls	r3, lr, r8, r7
  40b60e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
  40b612:	fb0c f708 	mul.w	r7, ip, r8
  40b616:	429f      	cmp	r7, r3
  40b618:	d908      	bls.n	40b62c <__divdi3+0x1d0>
  40b61a:	195b      	adds	r3, r3, r5
  40b61c:	f108 31ff 	add.w	r1, r8, #4294967295
  40b620:	d25c      	bcs.n	40b6dc <__divdi3+0x280>
  40b622:	429f      	cmp	r7, r3
  40b624:	d95a      	bls.n	40b6dc <__divdi3+0x280>
  40b626:	f1a8 0802 	sub.w	r8, r8, #2
  40b62a:	442b      	add	r3, r5
  40b62c:	1bd8      	subs	r0, r3, r7
  40b62e:	ea48 4202 	orr.w	r2, r8, r2, lsl #16
  40b632:	e78e      	b.n	40b552 <__divdi3+0xf6>
  40b634:	f1c2 0320 	rsb	r3, r2, #32
  40b638:	fa2c f103 	lsr.w	r1, ip, r3
  40b63c:	fa0e fe02 	lsl.w	lr, lr, r2
  40b640:	fa20 f703 	lsr.w	r7, r0, r3
  40b644:	ea41 0e0e 	orr.w	lr, r1, lr
  40b648:	fa08 f002 	lsl.w	r0, r8, r2
  40b64c:	fa28 f103 	lsr.w	r1, r8, r3
  40b650:	ea4f 451e 	mov.w	r5, lr, lsr #16
  40b654:	4338      	orrs	r0, r7
  40b656:	fbb1 f8f5 	udiv	r8, r1, r5
  40b65a:	0c03      	lsrs	r3, r0, #16
  40b65c:	fb05 1118 	mls	r1, r5, r8, r1
  40b660:	fa1f f78e 	uxth.w	r7, lr
  40b664:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
  40b668:	fb07 f308 	mul.w	r3, r7, r8
  40b66c:	428b      	cmp	r3, r1
  40b66e:	fa0c fc02 	lsl.w	ip, ip, r2
  40b672:	d909      	bls.n	40b688 <__divdi3+0x22c>
  40b674:	eb11 010e 	adds.w	r1, r1, lr
  40b678:	f108 39ff 	add.w	r9, r8, #4294967295
  40b67c:	d230      	bcs.n	40b6e0 <__divdi3+0x284>
  40b67e:	428b      	cmp	r3, r1
  40b680:	d92e      	bls.n	40b6e0 <__divdi3+0x284>
  40b682:	f1a8 0802 	sub.w	r8, r8, #2
  40b686:	4471      	add	r1, lr
  40b688:	1ac9      	subs	r1, r1, r3
  40b68a:	b280      	uxth	r0, r0
  40b68c:	fbb1 f3f5 	udiv	r3, r1, r5
  40b690:	fb05 1113 	mls	r1, r5, r3, r1
  40b694:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
  40b698:	fb07 f703 	mul.w	r7, r7, r3
  40b69c:	428f      	cmp	r7, r1
  40b69e:	d908      	bls.n	40b6b2 <__divdi3+0x256>
  40b6a0:	eb11 010e 	adds.w	r1, r1, lr
  40b6a4:	f103 30ff 	add.w	r0, r3, #4294967295
  40b6a8:	d216      	bcs.n	40b6d8 <__divdi3+0x27c>
  40b6aa:	428f      	cmp	r7, r1
  40b6ac:	d914      	bls.n	40b6d8 <__divdi3+0x27c>
  40b6ae:	3b02      	subs	r3, #2
  40b6b0:	4471      	add	r1, lr
  40b6b2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
  40b6b6:	1bc9      	subs	r1, r1, r7
  40b6b8:	fba3 890c 	umull	r8, r9, r3, ip
  40b6bc:	4549      	cmp	r1, r9
  40b6be:	d309      	bcc.n	40b6d4 <__divdi3+0x278>
  40b6c0:	d005      	beq.n	40b6ce <__divdi3+0x272>
  40b6c2:	2200      	movs	r2, #0
  40b6c4:	e71d      	b.n	40b502 <__divdi3+0xa6>
  40b6c6:	4696      	mov	lr, r2
  40b6c8:	e6fe      	b.n	40b4c8 <__divdi3+0x6c>
  40b6ca:	4613      	mov	r3, r2
  40b6cc:	e711      	b.n	40b4f2 <__divdi3+0x96>
  40b6ce:	4094      	lsls	r4, r2
  40b6d0:	4544      	cmp	r4, r8
  40b6d2:	d2f6      	bcs.n	40b6c2 <__divdi3+0x266>
  40b6d4:	3b01      	subs	r3, #1
  40b6d6:	e7f4      	b.n	40b6c2 <__divdi3+0x266>
  40b6d8:	4603      	mov	r3, r0
  40b6da:	e7ea      	b.n	40b6b2 <__divdi3+0x256>
  40b6dc:	4688      	mov	r8, r1
  40b6de:	e7a5      	b.n	40b62c <__divdi3+0x1d0>
  40b6e0:	46c8      	mov	r8, r9
  40b6e2:	e7d1      	b.n	40b688 <__divdi3+0x22c>
  40b6e4:	4602      	mov	r2, r0
  40b6e6:	e78c      	b.n	40b602 <__divdi3+0x1a6>
  40b6e8:	4613      	mov	r3, r2
  40b6ea:	e70a      	b.n	40b502 <__divdi3+0xa6>
  40b6ec:	3b02      	subs	r3, #2
  40b6ee:	e757      	b.n	40b5a0 <__divdi3+0x144>
  40b6f0:	f1a8 0802 	sub.w	r8, r8, #2
  40b6f4:	442f      	add	r7, r5
  40b6f6:	e73f      	b.n	40b578 <__divdi3+0x11c>

0040b6f8 <__udivdi3>:
  40b6f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40b6fc:	2b00      	cmp	r3, #0
  40b6fe:	d144      	bne.n	40b78a <__udivdi3+0x92>
  40b700:	428a      	cmp	r2, r1
  40b702:	4615      	mov	r5, r2
  40b704:	4604      	mov	r4, r0
  40b706:	d94f      	bls.n	40b7a8 <__udivdi3+0xb0>
  40b708:	fab2 f782 	clz	r7, r2
  40b70c:	460e      	mov	r6, r1
  40b70e:	b14f      	cbz	r7, 40b724 <__udivdi3+0x2c>
  40b710:	f1c7 0320 	rsb	r3, r7, #32
  40b714:	40b9      	lsls	r1, r7
  40b716:	fa20 f603 	lsr.w	r6, r0, r3
  40b71a:	fa02 f507 	lsl.w	r5, r2, r7
  40b71e:	430e      	orrs	r6, r1
  40b720:	fa00 f407 	lsl.w	r4, r0, r7
  40b724:	ea4f 4e15 	mov.w	lr, r5, lsr #16
  40b728:	0c23      	lsrs	r3, r4, #16
  40b72a:	fbb6 f0fe 	udiv	r0, r6, lr
  40b72e:	b2af      	uxth	r7, r5
  40b730:	fb0e 6110 	mls	r1, lr, r0, r6
  40b734:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
  40b738:	fb07 f100 	mul.w	r1, r7, r0
  40b73c:	4299      	cmp	r1, r3
  40b73e:	d909      	bls.n	40b754 <__udivdi3+0x5c>
  40b740:	195b      	adds	r3, r3, r5
  40b742:	f100 32ff 	add.w	r2, r0, #4294967295
  40b746:	f080 80ec 	bcs.w	40b922 <__udivdi3+0x22a>
  40b74a:	4299      	cmp	r1, r3
  40b74c:	f240 80e9 	bls.w	40b922 <__udivdi3+0x22a>
  40b750:	3802      	subs	r0, #2
  40b752:	442b      	add	r3, r5
  40b754:	1a5a      	subs	r2, r3, r1
  40b756:	b2a4      	uxth	r4, r4
  40b758:	fbb2 f3fe 	udiv	r3, r2, lr
  40b75c:	fb0e 2213 	mls	r2, lr, r3, r2
  40b760:	ea44 4202 	orr.w	r2, r4, r2, lsl #16
  40b764:	fb07 f703 	mul.w	r7, r7, r3
  40b768:	4297      	cmp	r7, r2
  40b76a:	d908      	bls.n	40b77e <__udivdi3+0x86>
  40b76c:	1952      	adds	r2, r2, r5
  40b76e:	f103 31ff 	add.w	r1, r3, #4294967295
  40b772:	f080 80d8 	bcs.w	40b926 <__udivdi3+0x22e>
  40b776:	4297      	cmp	r7, r2
  40b778:	f240 80d5 	bls.w	40b926 <__udivdi3+0x22e>
  40b77c:	3b02      	subs	r3, #2
  40b77e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
  40b782:	2600      	movs	r6, #0
  40b784:	4631      	mov	r1, r6
  40b786:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40b78a:	428b      	cmp	r3, r1
  40b78c:	d847      	bhi.n	40b81e <__udivdi3+0x126>
  40b78e:	fab3 f683 	clz	r6, r3
  40b792:	2e00      	cmp	r6, #0
  40b794:	d148      	bne.n	40b828 <__udivdi3+0x130>
  40b796:	428b      	cmp	r3, r1
  40b798:	d302      	bcc.n	40b7a0 <__udivdi3+0xa8>
  40b79a:	4282      	cmp	r2, r0
  40b79c:	f200 80cd 	bhi.w	40b93a <__udivdi3+0x242>
  40b7a0:	2001      	movs	r0, #1
  40b7a2:	4631      	mov	r1, r6
  40b7a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40b7a8:	b912      	cbnz	r2, 40b7b0 <__udivdi3+0xb8>
  40b7aa:	2501      	movs	r5, #1
  40b7ac:	fbb5 f5f2 	udiv	r5, r5, r2
  40b7b0:	fab5 f885 	clz	r8, r5
  40b7b4:	f1b8 0f00 	cmp.w	r8, #0
  40b7b8:	d177      	bne.n	40b8aa <__udivdi3+0x1b2>
  40b7ba:	1b4a      	subs	r2, r1, r5
  40b7bc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
  40b7c0:	b2af      	uxth	r7, r5
  40b7c2:	2601      	movs	r6, #1
  40b7c4:	fbb2 f0fe 	udiv	r0, r2, lr
  40b7c8:	0c23      	lsrs	r3, r4, #16
  40b7ca:	fb0e 2110 	mls	r1, lr, r0, r2
  40b7ce:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
  40b7d2:	fb07 f300 	mul.w	r3, r7, r0
  40b7d6:	428b      	cmp	r3, r1
  40b7d8:	d907      	bls.n	40b7ea <__udivdi3+0xf2>
  40b7da:	1949      	adds	r1, r1, r5
  40b7dc:	f100 32ff 	add.w	r2, r0, #4294967295
  40b7e0:	d202      	bcs.n	40b7e8 <__udivdi3+0xf0>
  40b7e2:	428b      	cmp	r3, r1
  40b7e4:	f200 80ba 	bhi.w	40b95c <__udivdi3+0x264>
  40b7e8:	4610      	mov	r0, r2
  40b7ea:	1ac9      	subs	r1, r1, r3
  40b7ec:	b2a4      	uxth	r4, r4
  40b7ee:	fbb1 f3fe 	udiv	r3, r1, lr
  40b7f2:	fb0e 1113 	mls	r1, lr, r3, r1
  40b7f6:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
  40b7fa:	fb07 f703 	mul.w	r7, r7, r3
  40b7fe:	42a7      	cmp	r7, r4
  40b800:	d908      	bls.n	40b814 <__udivdi3+0x11c>
  40b802:	1964      	adds	r4, r4, r5
  40b804:	f103 32ff 	add.w	r2, r3, #4294967295
  40b808:	f080 808f 	bcs.w	40b92a <__udivdi3+0x232>
  40b80c:	42a7      	cmp	r7, r4
  40b80e:	f240 808c 	bls.w	40b92a <__udivdi3+0x232>
  40b812:	3b02      	subs	r3, #2
  40b814:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
  40b818:	4631      	mov	r1, r6
  40b81a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40b81e:	2600      	movs	r6, #0
  40b820:	4630      	mov	r0, r6
  40b822:	4631      	mov	r1, r6
  40b824:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40b828:	f1c6 0420 	rsb	r4, r6, #32
  40b82c:	fa22 f504 	lsr.w	r5, r2, r4
  40b830:	40b3      	lsls	r3, r6
  40b832:	432b      	orrs	r3, r5
  40b834:	fa20 fc04 	lsr.w	ip, r0, r4
  40b838:	fa01 f706 	lsl.w	r7, r1, r6
  40b83c:	fa21 f504 	lsr.w	r5, r1, r4
  40b840:	ea4f 4e13 	mov.w	lr, r3, lsr #16
  40b844:	ea4c 0707 	orr.w	r7, ip, r7
  40b848:	fbb5 f8fe 	udiv	r8, r5, lr
  40b84c:	0c39      	lsrs	r1, r7, #16
  40b84e:	fb0e 5518 	mls	r5, lr, r8, r5
  40b852:	fa1f fc83 	uxth.w	ip, r3
  40b856:	ea41 4505 	orr.w	r5, r1, r5, lsl #16
  40b85a:	fb0c f108 	mul.w	r1, ip, r8
  40b85e:	42a9      	cmp	r1, r5
  40b860:	fa02 f206 	lsl.w	r2, r2, r6
  40b864:	d904      	bls.n	40b870 <__udivdi3+0x178>
  40b866:	18ed      	adds	r5, r5, r3
  40b868:	f108 34ff 	add.w	r4, r8, #4294967295
  40b86c:	d367      	bcc.n	40b93e <__udivdi3+0x246>
  40b86e:	46a0      	mov	r8, r4
  40b870:	1a6d      	subs	r5, r5, r1
  40b872:	b2bf      	uxth	r7, r7
  40b874:	fbb5 f4fe 	udiv	r4, r5, lr
  40b878:	fb0e 5514 	mls	r5, lr, r4, r5
  40b87c:	ea47 4105 	orr.w	r1, r7, r5, lsl #16
  40b880:	fb0c fc04 	mul.w	ip, ip, r4
  40b884:	458c      	cmp	ip, r1
  40b886:	d904      	bls.n	40b892 <__udivdi3+0x19a>
  40b888:	18c9      	adds	r1, r1, r3
  40b88a:	f104 35ff 	add.w	r5, r4, #4294967295
  40b88e:	d35c      	bcc.n	40b94a <__udivdi3+0x252>
  40b890:	462c      	mov	r4, r5
  40b892:	ea44 4408 	orr.w	r4, r4, r8, lsl #16
  40b896:	ebcc 0101 	rsb	r1, ip, r1
  40b89a:	fba4 2302 	umull	r2, r3, r4, r2
  40b89e:	4299      	cmp	r1, r3
  40b8a0:	d348      	bcc.n	40b934 <__udivdi3+0x23c>
  40b8a2:	d044      	beq.n	40b92e <__udivdi3+0x236>
  40b8a4:	4620      	mov	r0, r4
  40b8a6:	2600      	movs	r6, #0
  40b8a8:	e76c      	b.n	40b784 <__udivdi3+0x8c>
  40b8aa:	f1c8 0420 	rsb	r4, r8, #32
  40b8ae:	fa01 f308 	lsl.w	r3, r1, r8
  40b8b2:	fa05 f508 	lsl.w	r5, r5, r8
  40b8b6:	fa20 f704 	lsr.w	r7, r0, r4
  40b8ba:	40e1      	lsrs	r1, r4
  40b8bc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
  40b8c0:	431f      	orrs	r7, r3
  40b8c2:	fbb1 f6fe 	udiv	r6, r1, lr
  40b8c6:	0c3a      	lsrs	r2, r7, #16
  40b8c8:	fb0e 1116 	mls	r1, lr, r6, r1
  40b8cc:	fa1f fc85 	uxth.w	ip, r5
  40b8d0:	ea42 4301 	orr.w	r3, r2, r1, lsl #16
  40b8d4:	fb0c f206 	mul.w	r2, ip, r6
  40b8d8:	429a      	cmp	r2, r3
  40b8da:	fa00 f408 	lsl.w	r4, r0, r8
  40b8de:	d907      	bls.n	40b8f0 <__udivdi3+0x1f8>
  40b8e0:	195b      	adds	r3, r3, r5
  40b8e2:	f106 31ff 	add.w	r1, r6, #4294967295
  40b8e6:	d237      	bcs.n	40b958 <__udivdi3+0x260>
  40b8e8:	429a      	cmp	r2, r3
  40b8ea:	d935      	bls.n	40b958 <__udivdi3+0x260>
  40b8ec:	3e02      	subs	r6, #2
  40b8ee:	442b      	add	r3, r5
  40b8f0:	1a9b      	subs	r3, r3, r2
  40b8f2:	b2bf      	uxth	r7, r7
  40b8f4:	fbb3 f0fe 	udiv	r0, r3, lr
  40b8f8:	fb0e 3310 	mls	r3, lr, r0, r3
  40b8fc:	ea47 4303 	orr.w	r3, r7, r3, lsl #16
  40b900:	fb0c f100 	mul.w	r1, ip, r0
  40b904:	4299      	cmp	r1, r3
  40b906:	d907      	bls.n	40b918 <__udivdi3+0x220>
  40b908:	195b      	adds	r3, r3, r5
  40b90a:	f100 32ff 	add.w	r2, r0, #4294967295
  40b90e:	d221      	bcs.n	40b954 <__udivdi3+0x25c>
  40b910:	4299      	cmp	r1, r3
  40b912:	d91f      	bls.n	40b954 <__udivdi3+0x25c>
  40b914:	3802      	subs	r0, #2
  40b916:	442b      	add	r3, r5
  40b918:	1a5a      	subs	r2, r3, r1
  40b91a:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
  40b91e:	4667      	mov	r7, ip
  40b920:	e750      	b.n	40b7c4 <__udivdi3+0xcc>
  40b922:	4610      	mov	r0, r2
  40b924:	e716      	b.n	40b754 <__udivdi3+0x5c>
  40b926:	460b      	mov	r3, r1
  40b928:	e729      	b.n	40b77e <__udivdi3+0x86>
  40b92a:	4613      	mov	r3, r2
  40b92c:	e772      	b.n	40b814 <__udivdi3+0x11c>
  40b92e:	40b0      	lsls	r0, r6
  40b930:	4290      	cmp	r0, r2
  40b932:	d2b7      	bcs.n	40b8a4 <__udivdi3+0x1ac>
  40b934:	1e60      	subs	r0, r4, #1
  40b936:	2600      	movs	r6, #0
  40b938:	e724      	b.n	40b784 <__udivdi3+0x8c>
  40b93a:	4630      	mov	r0, r6
  40b93c:	e722      	b.n	40b784 <__udivdi3+0x8c>
  40b93e:	42a9      	cmp	r1, r5
  40b940:	d995      	bls.n	40b86e <__udivdi3+0x176>
  40b942:	f1a8 0802 	sub.w	r8, r8, #2
  40b946:	441d      	add	r5, r3
  40b948:	e792      	b.n	40b870 <__udivdi3+0x178>
  40b94a:	458c      	cmp	ip, r1
  40b94c:	d9a0      	bls.n	40b890 <__udivdi3+0x198>
  40b94e:	3c02      	subs	r4, #2
  40b950:	4419      	add	r1, r3
  40b952:	e79e      	b.n	40b892 <__udivdi3+0x19a>
  40b954:	4610      	mov	r0, r2
  40b956:	e7df      	b.n	40b918 <__udivdi3+0x220>
  40b958:	460e      	mov	r6, r1
  40b95a:	e7c9      	b.n	40b8f0 <__udivdi3+0x1f8>
  40b95c:	3802      	subs	r0, #2
  40b95e:	4429      	add	r1, r5
  40b960:	e743      	b.n	40b7ea <__udivdi3+0xf2>
  40b962:	bf00      	nop

0040b964 <all_twi_definitions>:
  40b964:	8000 4001 8100 4001 0013 0000 0013 0000     ...@...@........
  40b974:	c000 4001 c100 4001 0014 0000 0014 0000     ...@...@........

0040b984 <all_uart_definitions>:
  40b984:	0600 400e 0700 400e 0008 0000 0008 0000     ...@...@........
  40b994:	0800 400e 0900 400e 0009 0000 0009 0000     ...@...@........

0040b9a4 <all_usart_definitions>:
  40b9a4:	4000 4002 4100 4002 000e 0000 000e 0000     .@.@.A.@........
  40b9b4:	8000 4002 8100 4002 000f 0000 000f 0000     ...@...@........

0040b9c4 <xHelpCommand>:
  40b9c4:	ba7c 0040 ba84 0040 3e7d 0040 0000 0000     |.@...@.}>@.....
  40b9d4:	6e49 6f63 7272 6365 2074 6f63 6d6d 6e61     Incorrect comman
  40b9e4:	2064 6170 6172 656d 6574 2872 2973 202e     d parameter(s). 
  40b9f4:	4520 746e 7265 2220 6568 706c 2022 6f74      Enter "help" to
  40ba04:	7620 6569 2077 2061 696c 7473 6f20 2066      view a list of 
  40ba14:	7661 6961 616c 6c62 2065 6f63 6d6d 6e61     available comman
  40ba24:	7364 0d2e 0d0a 000a 6f43 6d6d 6e61 2064     ds......Command 
  40ba34:	6f6e 2074 6572 6f63 6e67 7369 6465 202e     not recognised. 
  40ba44:	4520 746e 7265 2220 6568 706c 2022 6f74      Enter "help" to
  40ba54:	7620 6569 2077 2061 696c 7473 6f20 2066      view a list of 
  40ba64:	7661 6961 616c 6c62 2065 6f63 6d6d 6e61     available comman
  40ba74:	7364 0d2e 0d0a 000a 6568 706c 0000 0000     ds......help....
  40ba84:	0a0d 6568 706c 0d3a 200a 694c 7473 2073     ..help:.. Lists 
  40ba94:	6c61 206c 6874 2065 6572 6967 7473 7265     all the register
  40baa4:	6465 6320 6d6f 616d 646e 0d73 0d0a 000a     ed commands.....
  40bab4:	4449 454c 0000 0000 2509 0963 7525 2509     IDLE.....%c.%u.%
  40bac4:	0975 7525 0a0d 0000 2509 0975 2509 2575     u.%u.....%u..%u%
  40bad4:	0d25 000a 2509 0975 3c09 2531 0d25 000a     %....%u..<1%%...
  40bae4:	6d54 2072 7653 0063                         Tmr Svc.

0040baec <create_task_command_definition>:
  40baec:	bd70 0040 bd7c 0040 60dd 0040 0001 0000     p.@.|.@..`@.....

0040bafc <multi_parameter_echo_command_definition>:
  40bafc:	bde4 0040 bdf4 0040 6181 0040 00ff 0000     ..@...@..a@.....

0040bb0c <delete_task_command_definition>:
  40bb0c:	bd1c 0040 bd28 0040 6085 0040 0000 0000     ..@.(.@..`@.....

0040bb1c <run_time_stats_command_definition>:
  40bb1c:	bf18 0040 bf28 0040 62f1 0040 0000 0000     ..@.(.@..b@.....
  40bb2c:	6154 6b73 6420 6c65 7465 6465 0a0d 0000     Task deleted....
  40bb3c:	6854 2065 6174 6b73 7720 7361 6e20 746f     The task was not
  40bb4c:	7220 6e75 696e 676e 202e 4520 6578 7563      running.  Execu
  40bb5c:	6574 7420 6568 6320 6572 7461 2d65 6174     te the create-ta
  40bb6c:	6b73 6320 6d6f 616d 646e 6620 7269 7473     sk command first
  40bb7c:	0d2e 000a 6854 2065 6174 6b73 6820 7361     ....The task has
  40bb8c:	6120 726c 6165 7964 6220 6565 206e 7263      already been cr
  40bb9c:	6165 6574 2e64 4520 6578 7563 6574 7420     eated. Execute t
  40bbac:	6568 6420 6c65 7465 2d65 6174 6b73 6320     he delete-task c
  40bbbc:	6d6f 616d 646e 6620 7269 7473 0d2e 000a     ommand first....
  40bbcc:	7243 6165 6574 0064 6154 6b73 6320 6572     Created.Task cre
  40bbdc:	7461 6465 0a0d 0000 6154 6b73 6e20 746f     ated....Task not
  40bbec:	6320 6572 7461 6465 0a0d 0000 6854 2065      created....The 
  40bbfc:	6170 6172 656d 6574 7372 7720 7265 3a65     parameters were:
  40bc0c:	0a0d 0000 6c25 3a64 0020 0000 6854 2065     ....%ld: ...The 
  40bc1c:	6874 6572 2065 6170 6172 656d 6574 7372     three parameters
  40bc2c:	7720 7265 3a65 0a0d 0000 0000 6154 6b73      were:......Task
  40bc3c:	2020 2020 2020 2020 2020 2020 6241 2073                 Abs 
  40bc4c:	6954 656d 2020 2020 2020 2025 6954 656d     Time      % Time
  40bc5c:	0a0d 2a2a 2a2a 2a2a 2a2a 2a2a 2a2a 2a2a     ..**************
  40bc6c:	2a2a 2a2a 2a2a 2a2a 2a2a 2a2a 2a2a 2a2a     ****************
  40bc7c:	2a2a 2a2a 2a2a 2a2a 2a2a 0a0d 0000 0000     **********......
  40bc8c:	6154 6b73 2020 2020 2020 2020 2020 7453     Task          St
  40bc9c:	7461 2065 5020 6972 726f 7469 2079 5320     ate  Priority  S
  40bcac:	6174 6b63 2309 0a0d 2a2a 2a2a 2a2a 2a2a     tack.#..********
  40bcbc:	2a2a 2a2a 2a2a 2a2a 2a2a 2a2a 2a2a 2a2a     ****************
  40bccc:	2a2a 2a2a 2a2a 2a2a 2a2a 2a2a 2a2a 2a2a     ****************
  40bcdc:	2a2a 2a2a 2a2a 2a2a 0a0d 0000 7243 6165     ********....Crea
  40bcec:	6574 2064 6174 6b73 7220 6e75 696e 676e     ted task running
  40bcfc:	202e 5220 6365 6965 6576 2064 6170 6172     .  Received para
  40bd0c:	656d 6574 2072 6c25 0d64 0d0a 000a 0000     meter %ld.......
  40bd1c:	6564 656c 6574 742d 7361 006b 6564 656c     delete-task.dele
  40bd2c:	6574 742d 7361 3a6b 0a0d 4420 6c65 7465     te-task:.. Delet
  40bd3c:	7365 7420 6568 7420 7361 206b 7263 6165     es the task crea
  40bd4c:	6574 2064 7962 7420 6568 6320 6572 7461     ted by the creat
  40bd5c:	2d65 6174 6b73 6320 6d6f 616d 646e 0a0d     e-task command..
  40bd6c:	0a0d 0000 7263 6165 6574 742d 7361 006b     ....create-task.
  40bd7c:	7263 6165 6574 742d 7361 206b 703c 7261     create-task <par
  40bd8c:	6d61 3a3e 0a0d 4320 6572 7461 7365 6120     am>:.. Creates a
  40bd9c:	6e20 7765 7420 7361 206b 6874 7461 7020      new task that p
  40bdac:	7265 6f69 6964 6163 6c6c 2079 7277 7469     eriodically writ
  40bdbc:	7365 7420 6568 7020 7261 6d61 7465 7265     es the parameter
  40bdcc:	7420 206f 6874 2065 4c43 2049 756f 7074      to the CLI outp
  40bddc:	7475 0a0d 0a0d 0000 6365 6f68 702d 7261     ut......echo-par
  40bdec:	6d61 7465 7265 0073 6365 6f68 702d 7261     ameters.echo-par
  40bdfc:	6d61 7465 7265 2073 2e3c 2e2e 3a3e 0a0d     ameters <...>:..
  40be0c:	5420 6b61 2065 6176 6972 6261 656c 6e20      Take variable n
  40be1c:	6d75 6562 2072 666f 7020 7261 6d61 7465     umber of paramet
  40be2c:	7265 2c73 6520 6863 736f 6520 6361 2068     ers, echos each 
  40be3c:	6e69 7420 7275 0d6e 0d0a 000a 6365 6f68     in turn.....echo
  40be4c:	332d 702d 7261 6d61 7465 7265 0073 0000     -3-parameters...
  40be5c:	6365 6f68 332d 702d 7261 6d61 7465 7265     echo-3-parameter
  40be6c:	2073 703c 7261 6d61 3e31 3c20 6170 6172     s <param1> <para
  40be7c:	326d 203e 703c 7261 6d61 3e33 0d3a 200a     m2> <param3>:.. 
  40be8c:	7845 6570 7463 2073 6874 6572 2065 6170     Expects three pa
  40be9c:	6172 656d 6574 7372 202c 6365 6f68 2073     rameters, echos 
  40beac:	6165 6863 6920 206e 7574 6e72 0a0d 0a0d     each in turn....
  40bebc:	0000 0000 6174 6b73 732d 6174 7374 0000     ....task-stats..
  40becc:	6174 6b73 732d 6174 7374 0d3a 200a 6944     task-stats:.. Di
  40bedc:	7073 616c 7379 6120 7420 6261 656c 7320     splays a table s
  40beec:	6f68 6977 676e 7420 6568 7320 6174 6574     howing the state
  40befc:	6f20 2066 6165 6863 4620 6572 5265 4f54      of each FreeRTO
  40bf0c:	2053 6174 6b73 0a0d 0a0d 0000 7572 2d6e     S task......run-
  40bf1c:	6974 656d 732d 6174 7374 0000 7572 2d6e     time-stats..run-
  40bf2c:	6974 656d 732d 6174 7374 0d3a 200a 6944     time-stats:.. Di
  40bf3c:	7073 616c 7379 6120 7420 6261 656c 7320     splays a table s
  40bf4c:	6f68 6977 676e 6820 776f 6d20 6375 2068     howing how much 
  40bf5c:	7270 636f 7365 6973 676e 7420 6d69 2065     processing time 
  40bf6c:	6165 6863 4620 6572 5265 4f54 2053 6174     each FreeRTOS ta
  40bf7c:	6b73 6820 7361 7520 6573 0d64 0d0a 000a     sk has used.....

0040bf8c <task_stats_command_definition>:
  40bf8c:	bec0 0040 becc 0040 6321 0040 0000 0000     ..@...@.!c@.....

0040bf9c <three_parameter_echo_command_definition>:
  40bf9c:	be48 0040 be5c 0040 6235 0040 0003 0000     H.@.\.@.5b@.....
  40bfac:	af98 2000 0032 0000 000a 0000 0301 0000     ... 2...........
  40bfbc:	7246 6565 5452 534f 6320 6d6f 616d 646e     FreeRTOS command
  40bfcc:	7320 7265 6576 2e72 0a0d 7954 6570 4820      server...Type H
  40bfdc:	6c65 2070 6f74 7620 6569 2077 2061 696c     elp to view a li
  40bfec:	7473 6f20 2066 6572 6967 7473 7265 6465     st of registered
  40bffc:	6320 6d6f 616d 646e 2e73 0a0d 0a0d 003e      commands.....>.
  40c00c:	0a0d 505b 6572 7373 4520 544e 5245 7420     ..[Press ENTER t
  40c01c:	206f 7865 6365 7475 2065 6874 2065 7270     o execute the pr
  40c02c:	7665 6f69 7375 6320 6d6f 616d 646e 6120     evious command a
  40c03c:	6167 6e69 0d5d 3e0a 0000 0000 5f55 4c43     gain]..>....U_CL
  40c04c:	0049 0000 4443 5f43 4c43 0049               I...CDC_CLI.

0040c058 <xActiveStates>:
	...
  40c060:	0001 0000                                   ....

0040c064 <ulLED>:
  40c064:	0013 0000 0014 0000 0054 0000 454c 2044     ........T...LED 
  40c074:	6974 656d 0072 0000 0043 0000               timer...C...

0040c080 <_global_impure_ptr>:
  40c080:	00b8 2000                                   ... 

0040c084 <zeroes.6911>:
  40c084:	3030 3030 3030 3030 3030 3030 3030 3030     0000000000000000

0040c094 <blanks.6910>:
  40c094:	2020 2020 2020 2020 2020 2020 2020 2020                     
  40c0a4:	4e49 0046 6e69 0066 414e 004e 616e 006e     INF.inf.NAN.nan.
  40c0b4:	3130 3332 3534 3736 3938 4241 4443 4645     0123456789ABCDEF
  40c0c4:	0000 0000 3130 3332 3534 3736 3938 6261     ....0123456789ab
  40c0d4:	6463 6665 0000 0000 6e28 6c75 296c 0000     cdef....(null)..
  40c0e4:	0030 0000                                   0...

0040c0e8 <_ctype_>:
  40c0e8:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
  40c0f8:	2020 2020 2020 2020 2020 2020 2020 2020                     
  40c108:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
  40c118:	0410 0404 0404 0404 0404 1004 1010 1010     ................
  40c128:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
  40c138:	0101 0101 0101 0101 0101 0101 1010 1010     ................
  40c148:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
  40c158:	0202 0202 0202 0202 0202 0202 1010 1010     ................
  40c168:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...
  40c1ec:	6e49 6966 696e 7974 0000 0000 614e 004e     Infinity....NaN.
  40c1fc:	4f50 4953 0058 0000 002e 0000               POSIX.......

0040c208 <__mprec_tens>:
  40c208:	0000 0000 0000 3ff0 0000 0000 0000 4024     .......?......$@
  40c218:	0000 0000 0000 4059 0000 0000 4000 408f     ......Y@.....@.@
  40c228:	0000 0000 8800 40c3 0000 0000 6a00 40f8     .......@.....j.@
  40c238:	0000 0000 8480 412e 0000 0000 12d0 4163     .......A......cA
  40c248:	0000 0000 d784 4197 0000 0000 cd65 41cd     .......A....e..A
  40c258:	0000 2000 a05f 4202 0000 e800 4876 4237     ... _..B....vH7B
  40c268:	0000 a200 1a94 426d 0000 e540 309c 42a2     ......mB..@..0.B
  40c278:	0000 1e90 bcc4 42d6 0000 2634 6bf5 430c     .......B..4&.k.C
  40c288:	8000 37e0 c379 4341 a000 85d8 3457 4376     ...7y.AC....W4vC
  40c298:	c800 674e c16d 43ab 3d00 6091 58e4 43e1     ..Ngm..C.=.`.X.C
  40c2a8:	8c40 78b5 af1d 4415 ef50 d6e2 1ae4 444b     @..x...DP.....KD
  40c2b8:	d592 064d f0cf 4480 4af6 c7e1 2d02 44b5     ..M....D.J...-.D
  40c2c8:	9db4 79d9 7843 44ea                         ...yCx.D

0040c2d0 <p05.5302>:
  40c2d0:	0005 0000 0019 0000 007d 0000 0000 0000     ........}.......

0040c2e0 <__mprec_bigtens>:
  40c2e0:	8000 37e0 c379 4341 6e17 b505 b8b5 4693     ...7y.AC.n.....F
  40c2f0:	f9f5 e93f 4f03 4d38 1d32 f930 7748 5a82     ..?..O8M2.0.Hw.Z
  40c300:	bf3c 7f73 4fdd 7515                         <.s..O.u

0040c308 <_init>:
  40c308:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40c30a:	bf00      	nop
  40c30c:	bcf8      	pop	{r3, r4, r5, r6, r7}
  40c30e:	bc08      	pop	{r3}
  40c310:	469e      	mov	lr, r3
  40c312:	4770      	bx	lr

0040c314 <__init_array_start>:
  40c314:	00408591 	.word	0x00408591

0040c318 <__frame_dummy_init_array_entry>:
  40c318:	004000f1                                ..@.

0040c31c <_fini>:
  40c31c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40c31e:	bf00      	nop
  40c320:	bcf8      	pop	{r3, r4, r5, r6, r7}
  40c322:	bc08      	pop	{r3}
  40c324:	469e      	mov	lr, r3
  40c326:	4770      	bx	lr

0040c328 <__fini_array_start>:
  40c328:	004000cd 	.word	0x004000cd
