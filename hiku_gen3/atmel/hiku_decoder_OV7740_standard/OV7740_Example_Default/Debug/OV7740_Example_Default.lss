
OV7740_Example_Default.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0001004c  00400000  00400000  00008000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  0041004c  0041004c  0001804c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     000008b4  20000000  00410054  00020000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          000004bc  200008b4  00410908  000208b4  2**2
                  ALLOC
  4 .stack        00003000  20000d70  00410dc4  000208b4  2**0
                  ALLOC
  5 .ARM.attributes 0000002a  00000000  00000000  000208b4  2**0
                  CONTENTS, READONLY
  6 .comment      0000005b  00000000  00000000  000208de  2**0
                  CONTENTS, READONLY
  7 .debug_info   0001c6df  00000000  00000000  00020939  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00004377  00000000  00000000  0003d018  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    000120b1  00000000  00000000  0004138f  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000cd8  00000000  00000000  00053440  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000013f0  00000000  00000000  00054118  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  000176d7  00000000  00000000  00055508  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00010c10  00000000  00000000  0006cbdf  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    0005c037  00000000  00000000  0007d7ef  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00003310  00000000  00000000  000d9828  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <_sfixed>:
  400000:	20003d70 	.word	0x20003d70
  400004:	0040116d 	.word	0x0040116d
  400008:	00401169 	.word	0x00401169
  40000c:	00401169 	.word	0x00401169
  400010:	00401169 	.word	0x00401169
  400014:	00401169 	.word	0x00401169
  400018:	00401169 	.word	0x00401169
	...
  40002c:	00401169 	.word	0x00401169
  400030:	00401169 	.word	0x00401169
  400034:	00000000 	.word	0x00000000
  400038:	00401169 	.word	0x00401169
  40003c:	00401169 	.word	0x00401169
  400040:	00401169 	.word	0x00401169
  400044:	00401169 	.word	0x00401169
  400048:	00401169 	.word	0x00401169
  40004c:	00401169 	.word	0x00401169
  400050:	00401169 	.word	0x00401169
  400054:	00401169 	.word	0x00401169
  400058:	00401169 	.word	0x00401169
  40005c:	00000000 	.word	0x00000000
  400060:	00401169 	.word	0x00401169
  400064:	00401169 	.word	0x00401169
  400068:	00000000 	.word	0x00000000
  40006c:	00400db5 	.word	0x00400db5
  400070:	00400dc9 	.word	0x00400dc9
  400074:	00400ddd 	.word	0x00400ddd
  400078:	00401169 	.word	0x00401169
  40007c:	00401169 	.word	0x00401169
	...
  400088:	00401169 	.word	0x00401169
  40008c:	00401169 	.word	0x00401169
  400090:	00401169 	.word	0x00401169
  400094:	00401169 	.word	0x00401169
  400098:	00401169 	.word	0x00401169
  40009c:	00401169 	.word	0x00401169
  4000a0:	00401169 	.word	0x00401169
  4000a4:	00401169 	.word	0x00401169
  4000a8:	00401169 	.word	0x00401169
  4000ac:	00401169 	.word	0x00401169
  4000b0:	00401169 	.word	0x00401169
  4000b4:	00401169 	.word	0x00401169
  4000b8:	00401169 	.word	0x00401169
  4000bc:	00401169 	.word	0x00401169
  4000c0:	00401169 	.word	0x00401169
  4000c4:	00401169 	.word	0x00401169
  4000c8:	00401169 	.word	0x00401169

004000cc <__do_global_dtors_aux>:
  4000cc:	b510      	push	{r4, lr}
  4000ce:	4c05      	ldr	r4, [pc, #20]	; (4000e4 <__do_global_dtors_aux+0x18>)
  4000d0:	7823      	ldrb	r3, [r4, #0]
  4000d2:	b933      	cbnz	r3, 4000e2 <__do_global_dtors_aux+0x16>
  4000d4:	4b04      	ldr	r3, [pc, #16]	; (4000e8 <__do_global_dtors_aux+0x1c>)
  4000d6:	b113      	cbz	r3, 4000de <__do_global_dtors_aux+0x12>
  4000d8:	4804      	ldr	r0, [pc, #16]	; (4000ec <__do_global_dtors_aux+0x20>)
  4000da:	f3af 8000 	nop.w
  4000de:	2301      	movs	r3, #1
  4000e0:	7023      	strb	r3, [r4, #0]
  4000e2:	bd10      	pop	{r4, pc}
  4000e4:	200008b4 	.word	0x200008b4
  4000e8:	00000000 	.word	0x00000000
  4000ec:	00410054 	.word	0x00410054

004000f0 <frame_dummy>:
  4000f0:	4b08      	ldr	r3, [pc, #32]	; (400114 <frame_dummy+0x24>)
  4000f2:	b510      	push	{r4, lr}
  4000f4:	b11b      	cbz	r3, 4000fe <frame_dummy+0xe>
  4000f6:	4808      	ldr	r0, [pc, #32]	; (400118 <frame_dummy+0x28>)
  4000f8:	4908      	ldr	r1, [pc, #32]	; (40011c <frame_dummy+0x2c>)
  4000fa:	f3af 8000 	nop.w
  4000fe:	4808      	ldr	r0, [pc, #32]	; (400120 <frame_dummy+0x30>)
  400100:	6803      	ldr	r3, [r0, #0]
  400102:	b903      	cbnz	r3, 400106 <frame_dummy+0x16>
  400104:	bd10      	pop	{r4, pc}
  400106:	4b07      	ldr	r3, [pc, #28]	; (400124 <frame_dummy+0x34>)
  400108:	2b00      	cmp	r3, #0
  40010a:	d0fb      	beq.n	400104 <frame_dummy+0x14>
  40010c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  400110:	4718      	bx	r3
  400112:	bf00      	nop
  400114:	00000000 	.word	0x00000000
  400118:	00410054 	.word	0x00410054
  40011c:	200008b8 	.word	0x200008b8
  400120:	00410054 	.word	0x00410054
  400124:	00000000 	.word	0x00000000

00400128 <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
  400128:	b510      	push	{r4, lr}
	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
  40012a:	480e      	ldr	r0, [pc, #56]	; (400164 <sysclk_init+0x3c>)
  40012c:	4b0e      	ldr	r3, [pc, #56]	; (400168 <sysclk_init+0x40>)
  40012e:	4798      	blx	r3
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
  400130:	2000      	movs	r0, #0
  400132:	213e      	movs	r1, #62	; 0x3e
  400134:	4b0d      	ldr	r3, [pc, #52]	; (40016c <sysclk_init+0x44>)
  400136:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
  400138:	4c0d      	ldr	r4, [pc, #52]	; (400170 <sysclk_init+0x48>)
  40013a:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
  40013c:	2800      	cmp	r0, #0
  40013e:	d0fc      	beq.n	40013a <sysclk_init+0x12>

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
	} else {
		pmc_disable_pllbck();
  400140:	4b0c      	ldr	r3, [pc, #48]	; (400174 <sysclk_init+0x4c>)
  400142:	4798      	blx	r3
		PMC->CKGR_PLLBR = p_cfg->ctrl;
  400144:	4a0c      	ldr	r2, [pc, #48]	; (400178 <sysclk_init+0x50>)
  400146:	4b0d      	ldr	r3, [pc, #52]	; (40017c <sysclk_init+0x54>)
  400148:	62da      	str	r2, [r3, #44]	; 0x2c
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		return pmc_is_locked_pllack();
	} else {
		return pmc_is_locked_pllbck();
  40014a:	4c0d      	ldr	r4, [pc, #52]	; (400180 <sysclk_init+0x58>)
  40014c:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
  40014e:	2800      	cmp	r0, #0
  400150:	d0fc      	beq.n	40014c <sysclk_init+0x24>

		pll_enable_source(CONFIG_PLL1_SOURCE);
		pll_config_defaults(&pllcfg, 1);
		pll_enable(&pllcfg, 1);
		pll_wait_for_lock(1);
		pmc_switch_mck_to_pllbck(CONFIG_SYSCLK_PRES);
  400152:	2010      	movs	r0, #16
  400154:	4b0b      	ldr	r3, [pc, #44]	; (400184 <sysclk_init+0x5c>)
  400156:	4798      	blx	r3
	}
#endif

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
  400158:	4b0b      	ldr	r3, [pc, #44]	; (400188 <sysclk_init+0x60>)
  40015a:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
  40015c:	4801      	ldr	r0, [pc, #4]	; (400164 <sysclk_init+0x3c>)
  40015e:	4b02      	ldr	r3, [pc, #8]	; (400168 <sysclk_init+0x40>)
  400160:	4798      	blx	r3
  400162:	bd10      	pop	{r4, pc}
  400164:	07270e00 	.word	0x07270e00
  400168:	00401331 	.word	0x00401331
  40016c:	00400e55 	.word	0x00400e55
  400170:	00400ea9 	.word	0x00400ea9
  400174:	00400ef5 	.word	0x00400ef5
  400178:	00133f01 	.word	0x00133f01
  40017c:	400e0400 	.word	0x400e0400
  400180:	00400f01 	.word	0x00400f01
  400184:	00400df1 	.word	0x00400df1
  400188:	0040121d 	.word	0x0040121d

0040018c <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len)
{
	int nChars = 0;

	if (file != 0) {
  40018c:	b9a8      	cbnz	r0, 4001ba <_read+0x2e>
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
  40018e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  400192:	460c      	mov	r4, r1
  400194:	4690      	mov	r8, r2

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
  400196:	2a00      	cmp	r2, #0
  400198:	dd0a      	ble.n	4001b0 <_read+0x24>
  40019a:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
  40019c:	4e08      	ldr	r6, [pc, #32]	; (4001c0 <_read+0x34>)
  40019e:	4d09      	ldr	r5, [pc, #36]	; (4001c4 <_read+0x38>)
  4001a0:	6830      	ldr	r0, [r6, #0]
  4001a2:	4621      	mov	r1, r4
  4001a4:	682b      	ldr	r3, [r5, #0]
  4001a6:	4798      	blx	r3
		ptr++;
  4001a8:	3401      	adds	r4, #1

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
  4001aa:	42bc      	cmp	r4, r7
  4001ac:	d1f8      	bne.n	4001a0 <_read+0x14>
  4001ae:	e001      	b.n	4001b4 <_read+0x28>
  4001b0:	f04f 0800 	mov.w	r8, #0
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
	}
	return nChars;
  4001b4:	4640      	mov	r0, r8
  4001b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
_read (int file, char * ptr, int len)
{
	int nChars = 0;

	if (file != 0) {
		return -1;
  4001ba:	f04f 30ff 	mov.w	r0, #4294967295
  4001be:	4770      	bx	lr
  4001c0:	20000d60 	.word	0x20000d60
  4001c4:	20000d58 	.word	0x20000d58

004001c8 <_write>:
int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
  4001c8:	3801      	subs	r0, #1
  4001ca:	2802      	cmp	r0, #2
  4001cc:	d818      	bhi.n	400200 <_write+0x38>
int __attribute__((weak))
_write (int file, const char *ptr, int len);

int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
  4001ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4001d2:	460e      	mov	r6, r1
  4001d4:	4614      	mov	r4, r2

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
  4001d6:	b182      	cbz	r2, 4001fa <_write+0x32>
  4001d8:	460d      	mov	r5, r1
		if (ptr_put(stdio_base, *ptr++) < 0) {
  4001da:	f8df 8038 	ldr.w	r8, [pc, #56]	; 400214 <_write+0x4c>
  4001de:	4f0c      	ldr	r7, [pc, #48]	; (400210 <_write+0x48>)
  4001e0:	f8d8 0000 	ldr.w	r0, [r8]
  4001e4:	f815 1b01 	ldrb.w	r1, [r5], #1
  4001e8:	683b      	ldr	r3, [r7, #0]
  4001ea:	4798      	blx	r3
  4001ec:	2800      	cmp	r0, #0
  4001ee:	db0a      	blt.n	400206 <_write+0x3e>
  4001f0:	1ba8      	subs	r0, r5, r6

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
  4001f2:	3c01      	subs	r4, #1
  4001f4:	d1f4      	bne.n	4001e0 <_write+0x18>
  4001f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4001fa:	2000      	movs	r0, #0
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
		}
		++nChars;
	}
	return nChars;
  4001fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
_write (int file, const char *ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
  400200:	f04f 30ff 	mov.w	r0, #4294967295
			return -1;
		}
		++nChars;
	}
	return nChars;
}
  400204:	4770      	bx	lr
		return -1;
	}

	for (; len != 0; --len) {
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
  400206:	f04f 30ff 	mov.w	r0, #4294967295
		}
		++nChars;
	}
	return nChars;
}
  40020a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40020e:	bf00      	nop
  400210:	20000d5c 	.word	0x20000d5c
  400214:	20000d60 	.word	0x20000d60

00400218 <board_init>:
#include "board.h"
#include "conf_board.h"
#include "gpio.h"

void board_init(void)
{
  400218:	b570      	push	{r4, r5, r6, lr}
	/* Disable the watchdog */
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	WDT->WDT_MR = WDT_MR_WDDIS;
  40021a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  40021e:	4b67      	ldr	r3, [pc, #412]	; (4003bc <board_init+0x1a4>)
  400220:	605a      	str	r2, [r3, #4]
#endif

	/* Configure LED pins */
	gpio_configure_pin(LED0_GPIO, LED0_FLAGS);
  400222:	204c      	movs	r0, #76	; 0x4c
  400224:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
  400228:	4c65      	ldr	r4, [pc, #404]	; (4003c0 <board_init+0x1a8>)
  40022a:	47a0      	blx	r4

	/* Configure Push Button pins */
	gpio_configure_pin(GPIO_PUSH_BUTTON_1, GPIO_PUSH_BUTTON_1_FLAGS);
  40022c:	2002      	movs	r0, #2
  40022e:	4965      	ldr	r1, [pc, #404]	; (4003c4 <board_init+0x1ac>)
  400230:	47a0      	blx	r4
	gpio_configure_group(PINS_UART_PIO, PINS_UART, PINS_UART_FLAGS);
#endif

	/* Configure TWI pins */
#ifdef CONF_BOARD_TWI0
	gpio_configure_pin(TWI0_DATA_GPIO, TWI0_DATA_FLAGS);
  400232:	2003      	movs	r0, #3
  400234:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  400238:	47a0      	blx	r4
	gpio_configure_pin(TWI0_CLK_GPIO, TWI0_CLK_FLAGS);
  40023a:	2004      	movs	r0, #4
  40023c:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  400240:	47a0      	blx	r4
	gpio_configure_pin(SPI_NPCS0_GPIO, SPI_NPCS0_FLAGS);
#endif

	/* Configure PCK0 pins */
#ifdef CONF_BOARD_PCK0
	gpio_configure_pin(PIN_PCK0, PIN_PCK0_FLAGS);
  400242:	202d      	movs	r0, #45	; 0x2d
  400244:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  400248:	47a0      	blx	r4
	gpio_configure_pin(USB_VBUS_GPIO, USB_VBUS_FLAGS);
#endif

	/* Configure LCD EBI pins */
#ifdef CONF_BOARD_ILI9325
	gpio_configure_pin(PIN_EBI_DATA_BUS_D0, PIN_EBI_DATA_BUS_FLAGS);
  40024a:	4d5f      	ldr	r5, [pc, #380]	; (4003c8 <board_init+0x1b0>)
  40024c:	2040      	movs	r0, #64	; 0x40
  40024e:	4629      	mov	r1, r5
  400250:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_DATA_BUS_D1, PIN_EBI_DATA_BUS_FLAGS);
  400252:	2041      	movs	r0, #65	; 0x41
  400254:	4629      	mov	r1, r5
  400256:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_DATA_BUS_D2, PIN_EBI_DATA_BUS_FLAGS);
  400258:	2042      	movs	r0, #66	; 0x42
  40025a:	4629      	mov	r1, r5
  40025c:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_DATA_BUS_D3, PIN_EBI_DATA_BUS_FLAGS);
  40025e:	2043      	movs	r0, #67	; 0x43
  400260:	4629      	mov	r1, r5
  400262:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_DATA_BUS_D4, PIN_EBI_DATA_BUS_FLAGS);
  400264:	2044      	movs	r0, #68	; 0x44
  400266:	4629      	mov	r1, r5
  400268:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_DATA_BUS_D5, PIN_EBI_DATA_BUS_FLAGS);
  40026a:	2045      	movs	r0, #69	; 0x45
  40026c:	4629      	mov	r1, r5
  40026e:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_DATA_BUS_D6, PIN_EBI_DATA_BUS_FLAGS);
  400270:	2046      	movs	r0, #70	; 0x46
  400272:	4629      	mov	r1, r5
  400274:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_DATA_BUS_D7, PIN_EBI_DATA_BUS_FLAGS);
  400276:	2047      	movs	r0, #71	; 0x47
  400278:	4629      	mov	r1, r5
  40027a:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_NRD, PIN_EBI_NRD_FLAGS);
  40027c:	204b      	movs	r0, #75	; 0x4b
  40027e:	4629      	mov	r1, r5
  400280:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_NWE, PIN_EBI_NWE_FLAGS);
  400282:	2048      	movs	r0, #72	; 0x48
  400284:	4629      	mov	r1, r5
  400286:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_NCS2, PIN_EBI_NCS2_FLAGS);
  400288:	4e50      	ldr	r6, [pc, #320]	; (4003cc <board_init+0x1b4>)
  40028a:	2016      	movs	r0, #22
  40028c:	4631      	mov	r1, r6
  40028e:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_LCD_RS, PIN_EBI_LCD_RS_FLAGS);
  400290:	2053      	movs	r0, #83	; 0x53
  400292:	4629      	mov	r1, r5
  400294:	47a0      	blx	r4
#endif

	/* Configure Backlight control pin */
#ifdef CONF_BOARD_AAT3155
	gpio_configure_pin(BOARD_AAT31XX_SET_GPIO, BOARD_AAT31XX_SET_FLAGS);
  400296:	204d      	movs	r0, #77	; 0x4d
  400298:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
  40029c:	47a0      	blx	r4
#endif

	/* Configure SRAM pins */
#ifdef CONF_BOARD_SRAM
	gpio_configure_pin(PIN_EBI_DATA_BUS_D0, PIN_EBI_DATA_BUS_FLAGS);
  40029e:	2040      	movs	r0, #64	; 0x40
  4002a0:	4629      	mov	r1, r5
  4002a2:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_DATA_BUS_D1, PIN_EBI_DATA_BUS_FLAGS);
  4002a4:	2041      	movs	r0, #65	; 0x41
  4002a6:	4629      	mov	r1, r5
  4002a8:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_DATA_BUS_D2, PIN_EBI_DATA_BUS_FLAGS);
  4002aa:	2042      	movs	r0, #66	; 0x42
  4002ac:	4629      	mov	r1, r5
  4002ae:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_DATA_BUS_D3, PIN_EBI_DATA_BUS_FLAGS);
  4002b0:	2043      	movs	r0, #67	; 0x43
  4002b2:	4629      	mov	r1, r5
  4002b4:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_DATA_BUS_D4, PIN_EBI_DATA_BUS_FLAGS);
  4002b6:	2044      	movs	r0, #68	; 0x44
  4002b8:	4629      	mov	r1, r5
  4002ba:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_DATA_BUS_D5, PIN_EBI_DATA_BUS_FLAGS);
  4002bc:	2045      	movs	r0, #69	; 0x45
  4002be:	4629      	mov	r1, r5
  4002c0:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_DATA_BUS_D6, PIN_EBI_DATA_BUS_FLAGS);
  4002c2:	2046      	movs	r0, #70	; 0x46
  4002c4:	4629      	mov	r1, r5
  4002c6:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_DATA_BUS_D7, PIN_EBI_DATA_BUS_FLAGS);
  4002c8:	2047      	movs	r0, #71	; 0x47
  4002ca:	4629      	mov	r1, r5
  4002cc:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_NRD, PIN_EBI_NRD_FLAGS);
  4002ce:	204b      	movs	r0, #75	; 0x4b
  4002d0:	4629      	mov	r1, r5
  4002d2:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_NWE, PIN_EBI_NWE_FLAGS);
  4002d4:	2048      	movs	r0, #72	; 0x48
  4002d6:	4629      	mov	r1, r5
  4002d8:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_NCS0, PIN_EBI_NCS0_FLAGS);
  4002da:	204e      	movs	r0, #78	; 0x4e
  4002dc:	4629      	mov	r1, r5
  4002de:	47a0      	blx	r4
	gpio_configure_pin(SRAM_VCC_GPIO, SRAM_VCC_FLAGS);
  4002e0:	2049      	movs	r0, #73	; 0x49
  4002e2:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
  4002e6:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_ADDR_BUS_A0, PIN_EBI_ADDR_BUS_FLAG1);
  4002e8:	2052      	movs	r0, #82	; 0x52
  4002ea:	4629      	mov	r1, r5
  4002ec:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_ADDR_BUS_A1, PIN_EBI_ADDR_BUS_FLAG1);
  4002ee:	2053      	movs	r0, #83	; 0x53
  4002f0:	4629      	mov	r1, r5
  4002f2:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_ADDR_BUS_A2, PIN_EBI_ADDR_BUS_FLAG1);
  4002f4:	2054      	movs	r0, #84	; 0x54
  4002f6:	4629      	mov	r1, r5
  4002f8:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_ADDR_BUS_A3, PIN_EBI_ADDR_BUS_FLAG1);
  4002fa:	2055      	movs	r0, #85	; 0x55
  4002fc:	4629      	mov	r1, r5
  4002fe:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_ADDR_BUS_A4, PIN_EBI_ADDR_BUS_FLAG1);
  400300:	2056      	movs	r0, #86	; 0x56
  400302:	4629      	mov	r1, r5
  400304:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_ADDR_BUS_A5, PIN_EBI_ADDR_BUS_FLAG1);
  400306:	2057      	movs	r0, #87	; 0x57
  400308:	4629      	mov	r1, r5
  40030a:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_ADDR_BUS_A6, PIN_EBI_ADDR_BUS_FLAG1);
  40030c:	2058      	movs	r0, #88	; 0x58
  40030e:	4629      	mov	r1, r5
  400310:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_ADDR_BUS_A7, PIN_EBI_ADDR_BUS_FLAG1);
  400312:	2059      	movs	r0, #89	; 0x59
  400314:	4629      	mov	r1, r5
  400316:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_ADDR_BUS_A8, PIN_EBI_ADDR_BUS_FLAG1);
  400318:	205a      	movs	r0, #90	; 0x5a
  40031a:	4629      	mov	r1, r5
  40031c:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_ADDR_BUS_A9, PIN_EBI_ADDR_BUS_FLAG1);
  40031e:	205b      	movs	r0, #91	; 0x5b
  400320:	4629      	mov	r1, r5
  400322:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_ADDR_BUS_A10, PIN_EBI_ADDR_BUS_FLAG1);
  400324:	205c      	movs	r0, #92	; 0x5c
  400326:	4629      	mov	r1, r5
  400328:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_ADDR_BUS_A11, PIN_EBI_ADDR_BUS_FLAG1);
  40032a:	205d      	movs	r0, #93	; 0x5d
  40032c:	4629      	mov	r1, r5
  40032e:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_ADDR_BUS_A12, PIN_EBI_ADDR_BUS_FLAG1);
  400330:	205e      	movs	r0, #94	; 0x5e
  400332:	4629      	mov	r1, r5
  400334:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_ADDR_BUS_A13, PIN_EBI_ADDR_BUS_FLAG1);
  400336:	205f      	movs	r0, #95	; 0x5f
  400338:	4629      	mov	r1, r5
  40033a:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_ADDR_BUS_A14, PIN_EBI_ADDR_BUS_FLAG2);
  40033c:	2012      	movs	r0, #18
  40033e:	4631      	mov	r1, r6
  400340:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_ADDR_BUS_A15, PIN_EBI_ADDR_BUS_FLAG2);
  400342:	2013      	movs	r0, #19
  400344:	4631      	mov	r1, r6
  400346:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_ADDR_BUS_A16, PIN_EBI_ADDR_BUS_FLAG2);
  400348:	2014      	movs	r0, #20
  40034a:	4631      	mov	r1, r6
  40034c:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_ADDR_BUS_A17, PIN_EBI_ADDR_BUS_FLAG2);
  40034e:	2000      	movs	r0, #0
  400350:	4631      	mov	r1, r6
  400352:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_ADDR_BUS_A18, PIN_EBI_ADDR_BUS_FLAG2);
  400354:	2001      	movs	r0, #1
  400356:	4631      	mov	r1, r6
  400358:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_ADDR_BUS_A19, PIN_EBI_ADDR_BUS_FLAG1);
  40035a:	2050      	movs	r0, #80	; 0x50
  40035c:	4629      	mov	r1, r5
  40035e:	47a0      	blx	r4
#endif

	/* Configure Image sensor pins */
#ifdef CONF_BOARD_OV7740_IMAGE_SENSOR
	gpio_configure_pin(OV_SW_OVT_GPIO, OV_SW_OVT_FLAGS);
  400360:	204a      	movs	r0, #74	; 0x4a
  400362:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
  400366:	47a0      	blx	r4
	gpio_configure_pin(OV_RST_GPIO, OV_RST_FLAGS);
  400368:	204f      	movs	r0, #79	; 0x4f
  40036a:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
  40036e:	47a0      	blx	r4
	gpio_configure_pin(OV_FSIN_GPIO, OV_FSIN_FLAGS);
  400370:	2015      	movs	r0, #21
  400372:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
  400376:	47a0      	blx	r4
	gpio_configure_pin(OV_HSYNC_GPIO, OV_HSYNC_FLAGS);
  400378:	2010      	movs	r0, #16
  40037a:	2171      	movs	r1, #113	; 0x71
  40037c:	47a0      	blx	r4
	gpio_configure_pin(OV_VSYNC_GPIO, OV_VSYNC_FLAGS);
  40037e:	200f      	movs	r0, #15
  400380:	2171      	movs	r1, #113	; 0x71
  400382:	47a0      	blx	r4
	gpio_configure_pin(OV_DATA_BUS_D2, OV_DATA_BUS_FLAGS);
  400384:	f105 5500 	add.w	r5, r5, #536870912	; 0x20000000
  400388:	2018      	movs	r0, #24
  40038a:	4629      	mov	r1, r5
  40038c:	47a0      	blx	r4
	gpio_configure_pin(OV_DATA_BUS_D3, OV_DATA_BUS_FLAGS);
  40038e:	2019      	movs	r0, #25
  400390:	4629      	mov	r1, r5
  400392:	47a0      	blx	r4
	gpio_configure_pin(OV_DATA_BUS_D4, OV_DATA_BUS_FLAGS);
  400394:	201a      	movs	r0, #26
  400396:	4629      	mov	r1, r5
  400398:	47a0      	blx	r4
	gpio_configure_pin(OV_DATA_BUS_D5, OV_DATA_BUS_FLAGS);
  40039a:	201b      	movs	r0, #27
  40039c:	4629      	mov	r1, r5
  40039e:	47a0      	blx	r4
	gpio_configure_pin(OV_DATA_BUS_D6, OV_DATA_BUS_FLAGS);
  4003a0:	201c      	movs	r0, #28
  4003a2:	4629      	mov	r1, r5
  4003a4:	47a0      	blx	r4
	gpio_configure_pin(OV_DATA_BUS_D7, OV_DATA_BUS_FLAGS);
  4003a6:	201d      	movs	r0, #29
  4003a8:	4629      	mov	r1, r5
  4003aa:	47a0      	blx	r4
	gpio_configure_pin(OV_DATA_BUS_D8, OV_DATA_BUS_FLAGS);
  4003ac:	201e      	movs	r0, #30
  4003ae:	4629      	mov	r1, r5
  4003b0:	47a0      	blx	r4
	gpio_configure_pin(OV_DATA_BUS_D9, OV_DATA_BUS_FLAGS);
  4003b2:	201f      	movs	r0, #31
  4003b4:	4629      	mov	r1, r5
  4003b6:	47a0      	blx	r4
  4003b8:	bd70      	pop	{r4, r5, r6, pc}
  4003ba:	bf00      	nop
  4003bc:	400e1450 	.word	0x400e1450
  4003c0:	00400bb9 	.word	0x00400bb9
  4003c4:	28000079 	.word	0x28000079
  4003c8:	08000001 	.word	0x08000001
  4003cc:	18000001 	.word	0x18000001

004003d0 <ov_power>:
 * \param on_off 1 to turn on OV7740 sensor and 0 to turn off.
 * \param p_pio Pointer to the PIO instance which control OV7740 sensor power.
 * \param ul_mask Bitmask of OV7740 sensor power pin.
 */
void ov_power(uint32_t ul_on_off, Pio* const p_pio, const uint32_t ul_mask)
{
  4003d0:	b508      	push	{r3, lr}
	if (ul_on_off) {
  4003d2:	b120      	cbz	r0, 4003de <ov_power+0xe>
		pio_clear(p_pio, ul_mask);
  4003d4:	4608      	mov	r0, r1
  4003d6:	4611      	mov	r1, r2
  4003d8:	4b03      	ldr	r3, [pc, #12]	; (4003e8 <ov_power+0x18>)
  4003da:	4798      	blx	r3
  4003dc:	bd08      	pop	{r3, pc}
	} else {
		pio_set(p_pio, ul_mask);
  4003de:	4608      	mov	r0, r1
  4003e0:	4611      	mov	r1, r2
  4003e2:	4b02      	ldr	r3, [pc, #8]	; (4003ec <ov_power+0x1c>)
  4003e4:	4798      	blx	r3
  4003e6:	bd08      	pop	{r3, pc}
  4003e8:	00400a81 	.word	0x00400a81
  4003ec:	00400a7d 	.word	0x00400a7d

004003f0 <ov_read_reg>:
 * \param p_twi TWI interface.
 * \param p_packet TWI packet.
 * \return 0 on success, TWID_ERROR_BUSY otherwise.
 */
uint32_t ov_read_reg(Twi* const p_twi, twi_packet_t* const p_packet)
{
  4003f0:	b508      	push	{r3, lr}
	uint32_t ul_status;

	ul_status = twi_master_read(p_twi, p_packet);
  4003f2:	4b01      	ldr	r3, [pc, #4]	; (4003f8 <ov_read_reg+0x8>)
  4003f4:	4798      	blx	r3

	return ul_status;
}
  4003f6:	bd08      	pop	{r3, pc}
  4003f8:	00400fe9 	.word	0x00400fe9

004003fc <ov_write_reg>:
 * \param p_twi TWI interface.
 * \param p_packet TWI packet.
 * \return 0 on success, TWID_ERROR_BUSY otherwise.
 */
uint32_t ov_write_reg(Twi* const p_twi, twi_packet_t* const p_packet)
{
  4003fc:	b508      	push	{r3, lr}
	uint32_t ul_status;

	ul_status = twi_master_write(p_twi, p_packet);
  4003fe:	4b01      	ldr	r3, [pc, #4]	; (400404 <ov_write_reg+0x8>)
  400400:	4798      	blx	r3

	return ul_status;
}
  400402:	bd08      	pop	{r3, pc}
  400404:	004010c9 	.word	0x004010c9

00400408 <ov_write_regs>:
 * \param p_twi TWI interface.
 * \param p_reg_list Register list to be written.
 * \return 0 on success, TWID_ERROR_BUSY otherwise.
 */
uint32_t ov_write_regs(Twi* const p_twi, const ov_reg *p_reg_list)
{
  400408:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40040c:	b086      	sub	sp, #24
  40040e:	4607      	mov	r7, r0
  400410:	1c4c      	adds	r4, r1, #1
			(p_next->val == OV_VAL_TERM))) {
		if (p_next->reg == 0xFE) {
			delay_ms(5);
		} else {
			twi_packet_regs.addr[0] = p_next->reg;
			twi_packet_regs.addr_length = 1;
  400412:	2501      	movs	r5, #1
			twi_packet_regs.chip = OV_I2C_SENSOR_ADDRESS;
			twi_packet_regs.length = 1;
			twi_packet_regs.buffer = &(p_next->val);

			ul_err = ov_write_reg(p_twi, &twi_packet_regs);
  400414:	4e12      	ldr	r6, [pc, #72]	; (400460 <ov_write_regs+0x58>)
	ov_reg *p_next = (ov_reg *)p_reg_list;

	while (!((p_next->reg == OV_REG_TERM) &&
			(p_next->val == OV_VAL_TERM))) {
		if (p_next->reg == 0xFE) {
			delay_ms(5);
  400416:	f8df 804c 	ldr.w	r8, [pc, #76]	; 400464 <ov_write_regs+0x5c>
	uint32_t ul_err;
	uint32_t ul_size = 0;
	twi_packet_t twi_packet_regs;
	ov_reg *p_next = (ov_reg *)p_reg_list;

	while (!((p_next->reg == OV_REG_TERM) &&
  40041a:	e013      	b.n	400444 <ov_write_regs+0x3c>
			(p_next->val == OV_VAL_TERM))) {
		if (p_next->reg == 0xFE) {
  40041c:	2bfe      	cmp	r3, #254	; 0xfe
  40041e:	d103      	bne.n	400428 <ov_write_regs+0x20>
			delay_ms(5);
  400420:	f24a 706a 	movw	r0, #42858	; 0xa76a
  400424:	47c0      	blx	r8
  400426:	e00c      	b.n	400442 <ov_write_regs+0x3a>
		} else {
			twi_packet_regs.addr[0] = p_next->reg;
  400428:	f88d 3004 	strb.w	r3, [sp, #4]
			twi_packet_regs.addr_length = 1;
  40042c:	9502      	str	r5, [sp, #8]
			twi_packet_regs.chip = OV_I2C_SENSOR_ADDRESS;
  40042e:	2321      	movs	r3, #33	; 0x21
  400430:	f88d 3014 	strb.w	r3, [sp, #20]
			twi_packet_regs.length = 1;
  400434:	9504      	str	r5, [sp, #16]
			twi_packet_regs.buffer = &(p_next->val);
  400436:	9203      	str	r2, [sp, #12]

			ul_err = ov_write_reg(p_twi, &twi_packet_regs);
  400438:	4638      	mov	r0, r7
  40043a:	a901      	add	r1, sp, #4
  40043c:	47b0      	blx	r6
			ul_size++;

			if (ul_err == TWI_BUSY) {
  40043e:	2808      	cmp	r0, #8
  400440:	d00a      	beq.n	400458 <ov_write_regs+0x50>
  400442:	3402      	adds	r4, #2
  400444:	4622      	mov	r2, r4
	uint32_t ul_err;
	uint32_t ul_size = 0;
	twi_packet_t twi_packet_regs;
	ov_reg *p_next = (ov_reg *)p_reg_list;

	while (!((p_next->reg == OV_REG_TERM) &&
  400446:	f814 3c01 	ldrb.w	r3, [r4, #-1]
  40044a:	2bff      	cmp	r3, #255	; 0xff
  40044c:	d1e6      	bne.n	40041c <ov_write_regs+0x14>
  40044e:	7821      	ldrb	r1, [r4, #0]
  400450:	29ff      	cmp	r1, #255	; 0xff
  400452:	d1e9      	bne.n	400428 <ov_write_regs+0x20>
			}
		}

		p_next++;
	}
	return 0;
  400454:	2000      	movs	r0, #0
  400456:	e000      	b.n	40045a <ov_write_regs+0x52>

			ul_err = ov_write_reg(p_twi, &twi_packet_regs);
			ul_size++;

			if (ul_err == TWI_BUSY) {
				return ul_err;
  400458:	2008      	movs	r0, #8
		}

		p_next++;
	}
	return 0;
}
  40045a:	b006      	add	sp, #24
  40045c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  400460:	004003fd 	.word	0x004003fd
  400464:	20000001 	.word	0x20000001

00400468 <ov_init>:
 *
 * \param p_twi TWI interface.
 * \return 0 on success, 1 otherwise.
 */
uint32_t ov_init(Twi* const p_twi)
{
  400468:	b5f0      	push	{r4, r5, r6, r7, lr}
  40046a:	b08d      	sub	sp, #52	; 0x34
  40046c:	4607      	mov	r7, r0
 */
static uint32_t ov_id(Twi* const p_twi)
{
	twi_packet_t packet_pid;
	twi_packet_t packet_ver;
	uint32_t ul_id = 0;
  40046e:	2300      	movs	r3, #0
  400470:	9300      	str	r3, [sp, #0]
	uint32_t ul_ver = 0;
  400472:	9301      	str	r3, [sp, #4]

	/* OV_PID */
	packet_pid.chip = OV_I2C_SENSOR_ADDRESS;
  400474:	2621      	movs	r6, #33	; 0x21
  400476:	f88d 6018 	strb.w	r6, [sp, #24]
	packet_pid.addr[0] = OV7740_PIDH;
  40047a:	230a      	movs	r3, #10
  40047c:	f88d 3008 	strb.w	r3, [sp, #8]
	packet_pid.addr_length = 1;
  400480:	2401      	movs	r4, #1
  400482:	9403      	str	r4, [sp, #12]
	packet_pid.buffer = &ul_id;
  400484:	f8cd d010 	str.w	sp, [sp, #16]
	packet_pid.length = 1;
  400488:	9405      	str	r4, [sp, #20]

	ov_read_reg(p_twi, &packet_pid);
  40048a:	a902      	add	r1, sp, #8
  40048c:	4d3a      	ldr	r5, [pc, #232]	; (400578 <ov_init+0x110>)
  40048e:	47a8      	blx	r5

	/* OV_VER */
	packet_ver.chip = OV_I2C_SENSOR_ADDRESS;
  400490:	f88d 602c 	strb.w	r6, [sp, #44]	; 0x2c
	packet_ver.addr[0] = OV7740_PIDL;
  400494:	230b      	movs	r3, #11
  400496:	f88d 301c 	strb.w	r3, [sp, #28]
	packet_ver.addr_length = 1;
  40049a:	9408      	str	r4, [sp, #32]
	packet_ver.buffer = &ul_ver;
  40049c:	ab01      	add	r3, sp, #4
  40049e:	9309      	str	r3, [sp, #36]	; 0x24
	packet_ver.length = 1;
  4004a0:	940a      	str	r4, [sp, #40]	; 0x28

	ov_read_reg(p_twi, &packet_ver);
  4004a2:	4638      	mov	r0, r7
  4004a4:	a907      	add	r1, sp, #28
  4004a6:	47a8      	blx	r5
	return ((uint32_t)(ul_id << 8) | ul_ver);
  4004a8:	9b01      	ldr	r3, [sp, #4]
  4004aa:	9a00      	ldr	r2, [sp, #0]
  4004ac:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
{
	uint32_t ul_id = 0;

	ul_id = ov_id( p_twi );

	if (((ul_id >> 8)&0xff)  == OV7740_PIDH_DEFAULT) {
  4004b0:	f3c3 2307 	ubfx	r3, r3, #8, #8
  4004b4:	2b77      	cmp	r3, #119	; 0x77
  4004b6:	d135      	bne.n	400524 <ov_init+0xbc>
 * \return 0 if the sensor is present, 1 otherwise.
 */
static uint32_t ov_manufacturer(Twi* const p_twi)
{
	twi_packet_t twi_packet;
	uint32_t ul_midh = 0;
  4004b8:	2300      	movs	r3, #0
  4004ba:	9301      	str	r3, [sp, #4]
	uint32_t ul_midl = 0;
  4004bc:	9302      	str	r3, [sp, #8]

	/* OV_MIDH */
	twi_packet.addr[0] = OV7740_MIDH;
  4004be:	231c      	movs	r3, #28
  4004c0:	f88d 301c 	strb.w	r3, [sp, #28]
	twi_packet.addr_length = 1;
  4004c4:	9408      	str	r4, [sp, #32]
	twi_packet.chip = OV_I2C_SENSOR_ADDRESS;
  4004c6:	f88d 602c 	strb.w	r6, [sp, #44]	; 0x2c
	twi_packet.buffer = &ul_midh;
  4004ca:	ab01      	add	r3, sp, #4
  4004cc:	9309      	str	r3, [sp, #36]	; 0x24
	twi_packet.length = 1;
  4004ce:	940a      	str	r4, [sp, #40]	; 0x28

	ov_read_reg(p_twi, &twi_packet);
  4004d0:	4638      	mov	r0, r7
  4004d2:	a907      	add	r1, sp, #28
  4004d4:	47a8      	blx	r5

	/* OV_MIDL */
	twi_packet.addr[0] = OV7740_MIDL;
  4004d6:	231d      	movs	r3, #29
  4004d8:	f88d 301c 	strb.w	r3, [sp, #28]
	twi_packet.addr_length = 1;
  4004dc:	9408      	str	r4, [sp, #32]
	twi_packet.chip = OV_I2C_SENSOR_ADDRESS;
  4004de:	f88d 602c 	strb.w	r6, [sp, #44]	; 0x2c
	twi_packet.buffer = &ul_midl;
  4004e2:	ab02      	add	r3, sp, #8
  4004e4:	9309      	str	r3, [sp, #36]	; 0x24
	twi_packet.length = 1;
  4004e6:	940a      	str	r4, [sp, #40]	; 0x28

	ov_read_reg(p_twi, &twi_packet);
  4004e8:	4638      	mov	r0, r7
  4004ea:	a907      	add	r1, sp, #28
  4004ec:	47a8      	blx	r5

	if ((ul_midh == OV7740_MIDH_DEFAULT) && (ul_midl == OV7740_MIDL_DEFAULT)) {
  4004ee:	9b01      	ldr	r3, [sp, #4]
  4004f0:	2b7f      	cmp	r3, #127	; 0x7f
  4004f2:	d13e      	bne.n	400572 <ov_init+0x10a>
  4004f4:	9b02      	ldr	r3, [sp, #8]
  4004f6:	2ba2      	cmp	r3, #162	; 0xa2
  4004f8:	d13b      	bne.n	400572 <ov_init+0x10a>
  4004fa:	e015      	b.n	400528 <ov_init+0xc0>
	if (ul_value != ul_entervalue) {
		return 1;
	}

	/* return old value */
	twi_packet.buffer = &ul_oldvalue;
  4004fc:	ab01      	add	r3, sp, #4
  4004fe:	9309      	str	r3, [sp, #36]	; 0x24
	ov_write_reg(p_twi, &twi_packet);
  400500:	4638      	mov	r0, r7
  400502:	a907      	add	r1, sp, #28
  400504:	4b1d      	ldr	r3, [pc, #116]	; (40057c <ov_init+0x114>)
  400506:	4798      	blx	r3

	twi_packet.buffer = &ul_value;
  400508:	f8cd d024 	str.w	sp, [sp, #36]	; 0x24
	ov_read_reg(p_twi, &twi_packet);
  40050c:	4638      	mov	r0, r7
  40050e:	a907      	add	r1, sp, #28
  400510:	4b19      	ldr	r3, [pc, #100]	; (400578 <ov_init+0x110>)
  400512:	4798      	blx	r3

	if (ul_value != ul_oldvalue) {
  400514:	9801      	ldr	r0, [sp, #4]
  400516:	9b00      	ldr	r3, [sp, #0]
  400518:	1a18      	subs	r0, r3, r0
  40051a:	bf18      	it	ne
  40051c:	2001      	movne	r0, #1
  40051e:	e029      	b.n	400574 <ov_init+0x10c>

	twi_packet.buffer = &ul_value;
	ov_read_reg(p_twi, &twi_packet);

	if (ul_value != ul_entervalue) {
		return 1;
  400520:	2001      	movs	r0, #1
  400522:	e027      	b.n	400574 <ov_init+0x10c>
				return 0;
			}
		}
	}

	return 1;
  400524:	2001      	movs	r0, #1
  400526:	e025      	b.n	400574 <ov_init+0x10c>
 * \return 0 on success, 1 otherwise.
 */
static uint32_t ov_test_write(Twi* const p_twi)
{
	twi_packet_t twi_packet;
	uint32_t ul_value = 0;
  400528:	2300      	movs	r3, #0
  40052a:	9300      	str	r3, [sp, #0]
	uint32_t ul_oldvalue = 0;
  40052c:	9301      	str	r3, [sp, #4]
	uint32_t ul_entervalue = 0;
  40052e:	9302      	str	r3, [sp, #8]

	/* OV_BLUE_GAIN */
	twi_packet.addr[0] = 0x01;
  400530:	2301      	movs	r3, #1
  400532:	f88d 301c 	strb.w	r3, [sp, #28]
	twi_packet.addr_length = 1;
  400536:	9308      	str	r3, [sp, #32]
	twi_packet.chip = OV_I2C_SENSOR_ADDRESS;
  400538:	2221      	movs	r2, #33	; 0x21
  40053a:	f88d 202c 	strb.w	r2, [sp, #44]	; 0x2c
	twi_packet.length = 1;
  40053e:	930a      	str	r3, [sp, #40]	; 0x28

	twi_packet.buffer = &ul_oldvalue;
  400540:	ab01      	add	r3, sp, #4
  400542:	9309      	str	r3, [sp, #36]	; 0x24
	ov_read_reg(p_twi, &twi_packet);
  400544:	4638      	mov	r0, r7
  400546:	a907      	add	r1, sp, #28
  400548:	4c0b      	ldr	r4, [pc, #44]	; (400578 <ov_init+0x110>)
  40054a:	47a0      	blx	r4

	ul_entervalue = 0xAD;
  40054c:	ab0c      	add	r3, sp, #48	; 0x30
  40054e:	22ad      	movs	r2, #173	; 0xad
  400550:	f843 2d28 	str.w	r2, [r3, #-40]!
	twi_packet.buffer = &ul_entervalue;
  400554:	9309      	str	r3, [sp, #36]	; 0x24
	ov_write_reg(p_twi, &twi_packet);
  400556:	4638      	mov	r0, r7
  400558:	a907      	add	r1, sp, #28
  40055a:	4b08      	ldr	r3, [pc, #32]	; (40057c <ov_init+0x114>)
  40055c:	4798      	blx	r3

	twi_packet.buffer = &ul_value;
  40055e:	f8cd d024 	str.w	sp, [sp, #36]	; 0x24
	ov_read_reg(p_twi, &twi_packet);
  400562:	4638      	mov	r0, r7
  400564:	a907      	add	r1, sp, #28
  400566:	47a0      	blx	r4

	if (ul_value != ul_entervalue) {
  400568:	9b02      	ldr	r3, [sp, #8]
  40056a:	9a00      	ldr	r2, [sp, #0]
  40056c:	429a      	cmp	r2, r3
  40056e:	d1d7      	bne.n	400520 <ov_init+0xb8>
  400570:	e7c4      	b.n	4004fc <ov_init+0x94>
				return 0;
			}
		}
	}

	return 1;
  400572:	2001      	movs	r0, #1
}
  400574:	b00d      	add	sp, #52	; 0x34
  400576:	bdf0      	pop	{r4, r5, r6, r7, pc}
  400578:	004003f1 	.word	0x004003f1
  40057c:	004003fd 	.word	0x004003fd

00400580 <ov_configure>:
 * \param p_twi TWI interface.
 * \param format Specific format to configure.
 * \return 0 on success, 1 otherwise.
 */
uint32_t ov_configure(Twi* const p_twi, const e_ov7740_format format)
{
  400580:	b508      	push	{r3, lr}
	const ov_reg *p_regs_conf = NULL;

	/* Common register initialization */
	switch (format) {
  400582:	2908      	cmp	r1, #8
  400584:	d814      	bhi.n	4005b0 <ov_configure+0x30>
  400586:	e8df f001 	tbb	[pc, r1]
  40058a:	0515      	.short	0x0515
  40058c:	0b090717 	.word	0x0b090717
  400590:	0f0d      	.short	0x0f0d
  400592:	11          	.byte	0x11
  400593:	00          	.byte	0x00
	case QVGA_YUV422_10FPS:
		p_regs_conf = OV7740_QVGA_YUV422_10FPS;
		break;

	case QVGA_YUV422_15FPS:
		p_regs_conf = OV7740_QVGA_YUV422_15FPS;
  400594:	490b      	ldr	r1, [pc, #44]	; (4005c4 <ov_configure+0x44>)
  400596:	e010      	b.n	4005ba <ov_configure+0x3a>
	case QVGA_YUV422_20FPS:
		p_regs_conf = OV7740_QVGA_YUV422_20FPS;
		break;

	case QVGA_YUV422_30FPS:
		p_regs_conf = OV7740_QVGA_YUV422_30FPS;
  400598:	490b      	ldr	r1, [pc, #44]	; (4005c8 <ov_configure+0x48>)
		break;
  40059a:	e00e      	b.n	4005ba <ov_configure+0x3a>

	case QVGA_RGB888:
		p_regs_conf = OV7740_QVGA_RGB888;
  40059c:	490b      	ldr	r1, [pc, #44]	; (4005cc <ov_configure+0x4c>)
		break;
  40059e:	e00c      	b.n	4005ba <ov_configure+0x3a>

	case QQVGA_YUV422:
		p_regs_conf = OV7740_QQVGA_YUV422;
  4005a0:	490b      	ldr	r1, [pc, #44]	; (4005d0 <ov_configure+0x50>)
		break;
  4005a2:	e00a      	b.n	4005ba <ov_configure+0x3a>

	case QQVGA_RGB888:
		p_regs_conf = OV7740_QQVGA_RGB888;
  4005a4:	490b      	ldr	r1, [pc, #44]	; (4005d4 <ov_configure+0x54>)
		break;
  4005a6:	e008      	b.n	4005ba <ov_configure+0x3a>

	case TEST_PATTERN:
		p_regs_conf = OV7740_TEST_PATTERN;
  4005a8:	490b      	ldr	r1, [pc, #44]	; (4005d8 <ov_configure+0x58>)
		break;
  4005aa:	e006      	b.n	4005ba <ov_configure+0x3a>

	case VGA_YUV422_20FPS:
		p_regs_conf = OV7740_VGA_YUV422_20FPS;
  4005ac:	490b      	ldr	r1, [pc, #44]	; (4005dc <ov_configure+0x5c>)
		break;
  4005ae:	e004      	b.n	4005ba <ov_configure+0x3a>
	if (p_regs_conf != NULL) {
		ov_write_regs( p_twi, p_regs_conf );
		return 0;
	}

	return 1;
  4005b0:	2001      	movs	r0, #1
  4005b2:	bd08      	pop	{r3, pc}
	const ov_reg *p_regs_conf = NULL;

	/* Common register initialization */
	switch (format) {
	case QVGA_YUV422_10FPS:
		p_regs_conf = OV7740_QVGA_YUV422_10FPS;
  4005b4:	490a      	ldr	r1, [pc, #40]	; (4005e0 <ov_configure+0x60>)
  4005b6:	e000      	b.n	4005ba <ov_configure+0x3a>
	case QVGA_YUV422_15FPS:
		p_regs_conf = OV7740_QVGA_YUV422_15FPS;
		break;

	case QVGA_YUV422_20FPS:
		p_regs_conf = OV7740_QVGA_YUV422_20FPS;
  4005b8:	490a      	ldr	r1, [pc, #40]	; (4005e4 <ov_configure+0x64>)
	default:
		break;
	}

	if (p_regs_conf != NULL) {
		ov_write_regs( p_twi, p_regs_conf );
  4005ba:	4b0b      	ldr	r3, [pc, #44]	; (4005e8 <ov_configure+0x68>)
  4005bc:	4798      	blx	r3
		return 0;
  4005be:	2000      	movs	r0, #0
	}

	return 1;
}
  4005c0:	bd08      	pop	{r3, pc}
  4005c2:	bf00      	nop
  4005c4:	0040de3c 	.word	0x0040de3c
  4005c8:	0040e3e8 	.word	0x0040e3e8
  4005cc:	0040df2c 	.word	0x0040df2c
  4005d0:	0040e2f4 	.word	0x0040e2f4
  4005d4:	0040dd48 	.word	0x0040dd48
  4005d8:	0040e020 	.word	0x0040e020
  4005dc:	0040dc58 	.word	0x0040dc58
  4005e0:	0040e204 	.word	0x0040e204
  4005e4:	0040e114 	.word	0x0040e114
  4005e8:	00400409 	.word	0x00400409

004005ec <aat31xx_set_backlight>:
 * \param ul_level backlight level.
 *
 * \note pin BOARD_AAT31XX_SET_GPIO must be configured before calling aat31xx_set_backlight.
 */
void aat31xx_set_backlight(uint32_t ul_level)
{
  4005ec:	b470      	push	{r4, r5, r6}
  4005ee:	b083      	sub	sp, #12
	volatile uint32_t ul_delay;
	uint32_t i;

#ifdef CONF_BOARD_AAT3155
	ul_level = AAT31XX_MAX_BACKLIGHT_LEVEL - ul_level + 1;
  4005f0:	f1c0 0011 	rsb	r0, r0, #17
#ifdef CONF_BOARD_AAT3193
	ul_level = AAT31XX_MAX_BACKLIGHT_LEVEL - ul_level + 1;
#endif

	/* Ensure valid level */
	ul_level = (ul_level > AAT31XX_MAX_BACKLIGHT_LEVEL) ? AAT31XX_MAX_BACKLIGHT_LEVEL : ul_level;
  4005f4:	2810      	cmp	r0, #16
  4005f6:	bf28      	it	cs
  4005f8:	2010      	movcs	r0, #16
	ul_level = (ul_level < AAT31XX_MIN_BACKLIGHT_LEVEL) ? AAT31XX_MIN_BACKLIGHT_LEVEL : ul_level;
  4005fa:	2800      	cmp	r0, #0
  4005fc:	bf08      	it	eq
  4005fe:	2001      	moveq	r0, #1
 * \param ul_level backlight level.
 *
 * \note pin BOARD_AAT31XX_SET_GPIO must be configured before calling aat31xx_set_backlight.
 */
void aat31xx_set_backlight(uint32_t ul_level)
{
  400600:	2100      	movs	r1, #0
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  400602:	4e10      	ldr	r6, [pc, #64]	; (400644 <aat31xx_set_backlight+0x58>)
  400604:	f44f 5500 	mov.w	r5, #8192	; 0x2000
	ul_level = (ul_level < AAT31XX_MIN_BACKLIGHT_LEVEL) ? AAT31XX_MIN_BACKLIGHT_LEVEL : ul_level;

	/* Set new backlight level */
	for (i = 0; i < ul_level; i++) {
		ioport_set_pin_level(BOARD_AAT31XX_SET_GPIO, IOPORT_PIN_LEVEL_LOW);
		ul_delay = DELAY_PULSE;
  400608:	2418      	movs	r4, #24
  40060a:	6375      	str	r5, [r6, #52]	; 0x34
  40060c:	9401      	str	r4, [sp, #4]
		while (ul_delay--) {
  40060e:	9b01      	ldr	r3, [sp, #4]
  400610:	1e5a      	subs	r2, r3, #1
  400612:	9201      	str	r2, [sp, #4]
  400614:	2b00      	cmp	r3, #0
  400616:	d1fa      	bne.n	40060e <aat31xx_set_backlight+0x22>
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  400618:	6335      	str	r5, [r6, #48]	; 0x30
		}

		ioport_set_pin_level(BOARD_AAT31XX_SET_GPIO, IOPORT_PIN_LEVEL_HIGH);

		ul_delay = DELAY_PULSE;
  40061a:	9401      	str	r4, [sp, #4]
		while (ul_delay--) {
  40061c:	9b01      	ldr	r3, [sp, #4]
  40061e:	1e5a      	subs	r2, r3, #1
  400620:	9201      	str	r2, [sp, #4]
  400622:	2b00      	cmp	r3, #0
  400624:	d1fa      	bne.n	40061c <aat31xx_set_backlight+0x30>
	/* Ensure valid level */
	ul_level = (ul_level > AAT31XX_MAX_BACKLIGHT_LEVEL) ? AAT31XX_MAX_BACKLIGHT_LEVEL : ul_level;
	ul_level = (ul_level < AAT31XX_MIN_BACKLIGHT_LEVEL) ? AAT31XX_MIN_BACKLIGHT_LEVEL : ul_level;

	/* Set new backlight level */
	for (i = 0; i < ul_level; i++) {
  400626:	3101      	adds	r1, #1
  400628:	4281      	cmp	r1, r0
  40062a:	d3ee      	bcc.n	40060a <aat31xx_set_backlight+0x1e>
		ul_delay = DELAY_PULSE;
		while (ul_delay--) {
		}
	}

	ul_delay = DELAY_ENABLE;
  40062c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
  400630:	9301      	str	r3, [sp, #4]
	while (ul_delay--) {
  400632:	9b01      	ldr	r3, [sp, #4]
  400634:	1e5a      	subs	r2, r3, #1
  400636:	9201      	str	r2, [sp, #4]
  400638:	2b00      	cmp	r3, #0
  40063a:	d1fa      	bne.n	400632 <aat31xx_set_backlight+0x46>
	}
}
  40063c:	b003      	add	sp, #12
  40063e:	bc70      	pop	{r4, r5, r6}
  400640:	4770      	bx	lr
  400642:	bf00      	nop
  400644:	400e1200 	.word	0x400e1200

00400648 <aat31xx_disable_backlight>:

/**
 * \brief Switch off backlight.
 */
void aat31xx_disable_backlight(void)
{
  400648:	b082      	sub	sp, #8
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  40064a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  40064e:	4b06      	ldr	r3, [pc, #24]	; (400668 <aat31xx_disable_backlight+0x20>)
  400650:	635a      	str	r2, [r3, #52]	; 0x34
	volatile uint32_t ul_delay;

	ioport_set_pin_level(BOARD_AAT31XX_SET_GPIO, IOPORT_PIN_LEVEL_LOW);

	ul_delay = DELAY_DISABLE;
  400652:	f44f 3300 	mov.w	r3, #131072	; 0x20000
  400656:	9301      	str	r3, [sp, #4]
	while (ul_delay--) {
  400658:	9b01      	ldr	r3, [sp, #4]
  40065a:	1e5a      	subs	r2, r3, #1
  40065c:	9201      	str	r2, [sp, #4]
  40065e:	2b00      	cmp	r3, #0
  400660:	d1fa      	bne.n	400658 <aat31xx_disable_backlight+0x10>
	}
}
  400662:	b002      	add	sp, #8
  400664:	4770      	bx	lr
  400666:	bf00      	nop
  400668:	400e1200 	.word	0x400e1200

0040066c <ili9325_write_ram>:
 *
 * \param ul_color 24-bits RGB color.
 */
static void ili9325_write_ram(ili9325_color_t ul_color)
{
	LCD_WD((ul_color >> 16) & 0xFF);
  40066c:	f3c0 4207 	ubfx	r2, r0, #16, #8
	{
		*((volatile uint8_t *)(BOARD_ILI9325_ADDR)) = lcd_index; /* ILI9325 index register address */
	}
	static inline void LCD_WD(uint8_t lcd_data)
	{
		*((volatile uint8_t *)((BOARD_ILI9325_ADDR) | (BOARD_ILI9325_RS))) = lcd_data;
  400670:	4b03      	ldr	r3, [pc, #12]	; (400680 <ili9325_write_ram+0x14>)
  400672:	701a      	strb	r2, [r3, #0]
	LCD_WD((ul_color >> 8) & 0xFF);
  400674:	f3c0 2207 	ubfx	r2, r0, #8, #8
  400678:	701a      	strb	r2, [r3, #0]
	LCD_WD(ul_color & 0xFF);
  40067a:	b2c0      	uxtb	r0, r0
  40067c:	7018      	strb	r0, [r3, #0]
  40067e:	4770      	bx	lr
  400680:	62000002 	.word	0x62000002

00400684 <ili9325_write_register>:

/* Define EBI access for ILI9325 8-bit System Interface.*/
#if defined(BOARD_ILI9325_ADDR) && defined (BOARD_ILI9325_RS)
	static inline void LCD_IR(uint8_t lcd_index)
	{
		*((volatile uint8_t *)(BOARD_ILI9325_ADDR)) = lcd_index; /* ILI9325 index register address */
  400684:	f04f 43c4 	mov.w	r3, #1644167168	; 0x62000000
  400688:	2200      	movs	r2, #0
  40068a:	701a      	strb	r2, [r3, #0]
  40068c:	7018      	strb	r0, [r3, #0]
 */
static void ili9325_write_register(uint8_t uc_reg, uint16_t us_data)
{
	LCD_IR(0);
	LCD_IR(uc_reg);
	LCD_WD((us_data >> 8) & 0xFF);
  40068e:	0a0a      	lsrs	r2, r1, #8
	}
	static inline void LCD_WD(uint8_t lcd_data)
	{
		*((volatile uint8_t *)((BOARD_ILI9325_ADDR) | (BOARD_ILI9325_RS))) = lcd_data;
  400690:	3302      	adds	r3, #2
  400692:	701a      	strb	r2, [r3, #0]
	LCD_WD(us_data & 0xFF);
  400694:	b2c9      	uxtb	r1, r1
  400696:	7019      	strb	r1, [r3, #0]
  400698:	4770      	bx	lr
  40069a:	bf00      	nop

0040069c <ili9325_delay>:

/**
 * \brief Delay function.
 */
static void ili9325_delay(uint32_t ul_ms)
{
  40069c:	b082      	sub	sp, #8
	volatile uint32_t i;

	for(i = 0; i < ul_ms; i++) {
  40069e:	2300      	movs	r3, #0
  4006a0:	9301      	str	r3, [sp, #4]
  4006a2:	9b01      	ldr	r3, [sp, #4]
  4006a4:	4298      	cmp	r0, r3
  4006a6:	d911      	bls.n	4006cc <ili9325_delay+0x30>
		for(i = 0; i < 100000; i++) {
  4006a8:	2100      	movs	r1, #0
  4006aa:	4a09      	ldr	r2, [pc, #36]	; (4006d0 <ili9325_delay+0x34>)
  4006ac:	9101      	str	r1, [sp, #4]
  4006ae:	9b01      	ldr	r3, [sp, #4]
  4006b0:	4293      	cmp	r3, r2
  4006b2:	d805      	bhi.n	4006c0 <ili9325_delay+0x24>
  4006b4:	9b01      	ldr	r3, [sp, #4]
  4006b6:	3301      	adds	r3, #1
  4006b8:	9301      	str	r3, [sp, #4]
  4006ba:	9b01      	ldr	r3, [sp, #4]
  4006bc:	4293      	cmp	r3, r2
  4006be:	d9f9      	bls.n	4006b4 <ili9325_delay+0x18>
 */
static void ili9325_delay(uint32_t ul_ms)
{
	volatile uint32_t i;

	for(i = 0; i < ul_ms; i++) {
  4006c0:	9b01      	ldr	r3, [sp, #4]
  4006c2:	3301      	adds	r3, #1
  4006c4:	9301      	str	r3, [sp, #4]
  4006c6:	9b01      	ldr	r3, [sp, #4]
  4006c8:	4283      	cmp	r3, r0
  4006ca:	d3ef      	bcc.n	4006ac <ili9325_delay+0x10>
		for(i = 0; i < 100000; i++) {
		}
	}
}
  4006cc:	b002      	add	sp, #8
  4006ce:	4770      	bx	lr
  4006d0:	0001869f 	.word	0x0001869f

004006d4 <ili9325_display_on>:

/**
 * \brief Turn on the LCD.
 */
void ili9325_display_on(void)
{
  4006d4:	b508      	push	{r3, lr}
	ili9325_write_register(ILI9325_DISP_CTRL1,
  4006d6:	2007      	movs	r0, #7
  4006d8:	f240 1133 	movw	r1, #307	; 0x133
  4006dc:	4b01      	ldr	r3, [pc, #4]	; (4006e4 <ili9325_display_on+0x10>)
  4006de:	4798      	blx	r3
  4006e0:	bd08      	pop	{r3, pc}
  4006e2:	bf00      	nop
  4006e4:	00400685 	.word	0x00400685

004006e8 <ili9325_set_foreground_color>:
 * \brief Set foreground color.
 *
 * \param ul_color foreground color.
 */
void ili9325_set_foreground_color(ili9325_color_t ul_color)
{
  4006e8:	4a04      	ldr	r2, [pc, #16]	; (4006fc <ili9325_set_foreground_color+0x14>)
  4006ea:	1f13      	subs	r3, r2, #4
  4006ec:	f502 726f 	add.w	r2, r2, #956	; 0x3bc
	uint32_t i;

	/* Fill the cache with selected color */
	for (i = 0; i < LCD_DATA_CACHE_SIZE; ++i) {
		g_ul_pixel_cache[i] = ul_color;
  4006f0:	f843 0f04 	str.w	r0, [r3, #4]!
void ili9325_set_foreground_color(ili9325_color_t ul_color)
{
	uint32_t i;

	/* Fill the cache with selected color */
	for (i = 0; i < LCD_DATA_CACHE_SIZE; ++i) {
  4006f4:	4293      	cmp	r3, r2
  4006f6:	d1fb      	bne.n	4006f0 <ili9325_set_foreground_color+0x8>
		g_ul_pixel_cache[i] = ul_color;
	}
}
  4006f8:	4770      	bx	lr
  4006fa:	bf00      	nop
  4006fc:	200008d0 	.word	0x200008d0

00400700 <ili9325_set_window>:
 * \param ul_width The width of the window.
 * \param ul_height The height of the window.
 */
void ili9325_set_window(uint32_t ul_x, uint32_t ul_y, uint32_t ul_width,
		uint32_t ul_height)
{
  400700:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  400704:	460f      	mov	r7, r1
  400706:	4615      	mov	r5, r2
  400708:	461c      	mov	r4, r3
	Assert(ul_y <= 0x13f);
	Assert(ul_width <= (0xF0 - ul_x));
	Assert(ul_height <= (0x140 - ul_y));

	/* Set Horizontal Address Start Position */
	ili9325_write_register(ILI9325_HORIZONTAL_ADDR_START, (uint16_t)ul_x);
  40070a:	fa1f f880 	uxth.w	r8, r0
  40070e:	2050      	movs	r0, #80	; 0x50
  400710:	4641      	mov	r1, r8
  400712:	4e09      	ldr	r6, [pc, #36]	; (400738 <ili9325_set_window+0x38>)
  400714:	47b0      	blx	r6
  400716:	1e69      	subs	r1, r5, #1

	/* Set Horizontal Address End Position */
	ili9325_write_register(ILI9325_HORIZONTAL_ADDR_END, (uint16_t)(ul_x + ul_width - 1));
  400718:	4441      	add	r1, r8
  40071a:	2051      	movs	r0, #81	; 0x51
  40071c:	b289      	uxth	r1, r1
  40071e:	47b0      	blx	r6

	/* Set Vertical Address Start Position */
	ili9325_write_register(ILI9325_VERTICAL_ADDR_START, (uint16_t)ul_y);
  400720:	b2bd      	uxth	r5, r7
  400722:	2052      	movs	r0, #82	; 0x52
  400724:	4629      	mov	r1, r5
  400726:	47b0      	blx	r6
  400728:	1e61      	subs	r1, r4, #1

	/* Set Vertical Address End Position */
	ili9325_write_register(ILI9325_VERTICAL_ADDR_END, (uint16_t)(ul_y + ul_height - 1));
  40072a:	4429      	add	r1, r5
  40072c:	2053      	movs	r0, #83	; 0x53
  40072e:	b289      	uxth	r1, r1
  400730:	47b0      	blx	r6
  400732:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  400736:	bf00      	nop
  400738:	00400685 	.word	0x00400685

0040073c <ili9325_set_cursor_position>:
 *
 * \param us_x X coordinate of upper-left corner on LCD.
 * \param us_y Y coordinate of upper-left corner on LCD.
 */
void ili9325_set_cursor_position(uint16_t us_x, uint16_t us_y)
{
  40073c:	b538      	push	{r3, r4, r5, lr}
  40073e:	4603      	mov	r3, r0
  400740:	460d      	mov	r5, r1
	/* GRAM Horizontal/Vertical Address Set (R20h, R21h) */
	ili9325_write_register(ILI9325_HORIZONTAL_GRAM_ADDR_SET, us_x); /* column */
  400742:	2020      	movs	r0, #32
  400744:	4619      	mov	r1, r3
  400746:	4c03      	ldr	r4, [pc, #12]	; (400754 <ili9325_set_cursor_position+0x18>)
  400748:	47a0      	blx	r4
	ili9325_write_register(ILI9325_VERTICAL_GRAM_ADDR_SET, us_y); /* row */
  40074a:	2021      	movs	r0, #33	; 0x21
  40074c:	4629      	mov	r1, r5
  40074e:	47a0      	blx	r4
  400750:	bd38      	pop	{r3, r4, r5, pc}
  400752:	bf00      	nop
  400754:	00400685 	.word	0x00400685

00400758 <ili9325_init>:

/* Define EBI access for ILI9325 8-bit System Interface.*/
#if defined(BOARD_ILI9325_ADDR) && defined (BOARD_ILI9325_RS)
	static inline void LCD_IR(uint8_t lcd_index)
	{
		*((volatile uint8_t *)(BOARD_ILI9325_ADDR)) = lcd_index; /* ILI9325 index register address */
  400758:	f04f 43c4 	mov.w	r3, #1644167168	; 0x62000000
  40075c:	2200      	movs	r2, #0
  40075e:	701a      	strb	r2, [r3, #0]
  400760:	701a      	strb	r2, [r3, #0]
	{
		*((volatile uint8_t *)((BOARD_ILI9325_ADDR) | (BOARD_ILI9325_RS))) = lcd_data;
	}
	static inline uint8_t LCD_RD(void)
	{
		return *((volatile uint8_t *)((BOARD_ILI9325_ADDR) | (BOARD_ILI9325_RS)));
  400762:	4a5f      	ldr	r2, [pc, #380]	; (4008e0 <ili9325_init+0x188>)
  400764:	7811      	ldrb	r1, [r2, #0]
  400766:	7813      	ldrb	r3, [r2, #0]
static uint16_t ili9325_lcd_get_16(void)
{
	uint16_t us_value;

	us_value = LCD_RD();
	us_value = (us_value << 8) | LCD_RD();
  400768:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
uint32_t ili9325_init(struct ili9325_opt_t *p_opt)
{
	/* Check ILI9325 chipid */
	uint16_t chipid = ili9325_read_register(ILI9325_DEVICE_CODE_REG); /* Driver Code Read (R00h) */

	if (chipid != ILI9325_DEVICE_CODE) {
  40076c:	b21b      	sxth	r3, r3
  40076e:	4a5d      	ldr	r2, [pc, #372]	; (4008e4 <ili9325_init+0x18c>)
  400770:	4293      	cmp	r3, r2
  400772:	f040 80b3 	bne.w	4008dc <ili9325_init+0x184>
 * \param p_opt pointer to ILI9325 option structure.
 *
 * \return 0 if initialization succeeds, otherwise fails.
 */
uint32_t ili9325_init(struct ili9325_opt_t *p_opt)
{
  400776:	b570      	push	{r4, r5, r6, lr}
  400778:	4605      	mov	r5, r0
	if (chipid != ILI9325_DEVICE_CODE) {
		return 1;
	}

	/* Turn off LCD */
	ili9325_write_register(ILI9325_DISP_CTRL1, ILI9325_DISP_CTRL1_GON |
  40077a:	2007      	movs	r0, #7
  40077c:	2133      	movs	r1, #51	; 0x33
  40077e:	4c5a      	ldr	r4, [pc, #360]	; (4008e8 <ili9325_init+0x190>)
  400780:	47a0      	blx	r4
			ILI9325_DISP_CTRL1_DTE | ILI9325_DISP_CTRL1_D(0x03));

	/* Start initial sequence */
	/* Disable sleep and standby mode*/
	ili9325_write_register(ILI9325_POWER_CTRL1, 0x0000);
  400782:	2010      	movs	r0, #16
  400784:	2100      	movs	r1, #0
  400786:	47a0      	blx	r4
	/* Start internal OSC */
	ili9325_write_register(ILI9325_START_OSC_CTRL, ILI9325_START_OSC_CTRL_EN);
  400788:	2000      	movs	r0, #0
  40078a:	2101      	movs	r1, #1
  40078c:	47a0      	blx	r4
	/* Set SS bit and direction output from S720 to S1 */
	ili9325_write_register(ILI9325_DRIVER_OUTPUT_CTRL1, ILI9325_DRIVER_OUTPUT_CTRL1_SS);
  40078e:	2001      	movs	r0, #1
  400790:	f44f 7180 	mov.w	r1, #256	; 0x100
  400794:	47a0      	blx	r4
	/* Set 1 line inversion */
	ili9325_write_register(ILI9325_LCD_DRIVING_CTRL, ILI9325_LCD_DRIVING_CTRL_BIT10 |
  400796:	2002      	movs	r0, #2
  400798:	f44f 61e0 	mov.w	r1, #1792	; 0x700
  40079c:	47a0      	blx	r4
			ILI9325_LCD_DRIVING_CTRL_EOR | ILI9325_LCD_DRIVING_CTRL_BC0);
	/* Disable resizing feature */
	ili9325_write_register(ILI9325_RESIZE_CTRL, 0x0000);
  40079e:	2004      	movs	r0, #4
  4007a0:	2100      	movs	r1, #0
  4007a2:	47a0      	blx	r4
	/* Set the back porch and front porch */
	ili9325_write_register(ILI9325_DISP_CTRL2, ILI9325_DISP_CTRL2_BP(0x07) |
  4007a4:	2008      	movs	r0, #8
  4007a6:	f240 2107 	movw	r1, #519	; 0x207
  4007aa:	47a0      	blx	r4
			ILI9325_DISP_CTRL2_FP(0x02));
	/* Set non-display area refresh cycle ISC[3:0] */
	ili9325_write_register(ILI9325_DISP_CTRL3, 0x0000);
  4007ac:	2009      	movs	r0, #9
  4007ae:	2100      	movs	r1, #0
  4007b0:	47a0      	blx	r4
	/* Disable FMARK function */
	ili9325_write_register(ILI9325_DISP_CTRL4, 0x0000);
  4007b2:	200a      	movs	r0, #10
  4007b4:	2100      	movs	r1, #0
  4007b6:	47a0      	blx	r4
	/* 18-bit RGB interface and writing display data by the system interface */
	ili9325_write_register(ILI9325_RGB_DISP_INTERFACE_CTRL1, 0x0000);
  4007b8:	200c      	movs	r0, #12
  4007ba:	2100      	movs	r1, #0
  4007bc:	47a0      	blx	r4
	/* Set the output position of frame cycle */
	ili9325_write_register(ILI9325_FRAME_MAKER_POS, 0x0000);
  4007be:	200d      	movs	r0, #13
  4007c0:	2100      	movs	r1, #0
  4007c2:	47a0      	blx	r4
	/* RGB interface polarity */
	ili9325_write_register(ILI9325_RGB_DISP_INTERFACE_CTRL2, 0x0000);
  4007c4:	200f      	movs	r0, #15
  4007c6:	2100      	movs	r1, #0
  4007c8:	47a0      	blx	r4

	/* Power on sequence */
	/* Disable sleep and standby mode */
	ili9325_write_register(ILI9325_POWER_CTRL1, 0x0000);
  4007ca:	2010      	movs	r0, #16
  4007cc:	2100      	movs	r1, #0
  4007ce:	47a0      	blx	r4
	/* Selects the operating frequency of the step-up circuit 1,2 and Sets the ratio factor of Vci */
	ili9325_write_register(ILI9325_POWER_CTRL2, 0x0000);
  4007d0:	2011      	movs	r0, #17
  4007d2:	2100      	movs	r1, #0
  4007d4:	47a0      	blx	r4
	/* Set VREG1OUT voltage */
	ili9325_write_register(ILI9325_POWER_CTRL3, 0x0000);
  4007d6:	2012      	movs	r0, #18
  4007d8:	2100      	movs	r1, #0
  4007da:	47a0      	blx	r4
	/* Set VCOM amplitude */
	ili9325_write_register(ILI9325_POWER_CTRL4, 0x0000);
  4007dc:	2013      	movs	r0, #19
  4007de:	2100      	movs	r1, #0
  4007e0:	47a0      	blx	r4
	ili9325_delay(200);
  4007e2:	20c8      	movs	r0, #200	; 0xc8
  4007e4:	4e41      	ldr	r6, [pc, #260]	; (4008ec <ili9325_init+0x194>)
  4007e6:	47b0      	blx	r6

	/* Enable power supply and source driver */
	/* Adjusts the constant current and Sets the factor used in the step-up circuits.*/
	ili9325_write_register(ILI9325_POWER_CTRL1, ILI9325_POWER_CTRL1_SAP |
  4007e8:	2010      	movs	r0, #16
  4007ea:	f241 2190 	movw	r1, #4752	; 0x1290
  4007ee:	47a0      	blx	r4
			ILI9325_POWER_CTRL1_BT(0x02) | ILI9325_POWER_CTRL1_APE | ILI9325_POWER_CTRL1_AP(0x01));
	/* Select the operating frequency of the step-up circuit 1,2 and Sets the ratio factor of Vci */
	ili9325_write_register(ILI9325_POWER_CTRL2, ILI9325_POWER_CTRL2_DC1(0x02) |
  4007f0:	2011      	movs	r0, #17
  4007f2:	f240 2127 	movw	r1, #551	; 0x227
  4007f6:	47a0      	blx	r4
			ILI9325_POWER_CTRL2_DC0(0x02) | ILI9325_POWER_CTRL2_VC(0x07));
	ili9325_delay(50);
  4007f8:	2032      	movs	r0, #50	; 0x32
  4007fa:	47b0      	blx	r6
	/* Internal reference voltage= Vci */
	ili9325_write_register(ILI9325_POWER_CTRL3, ILI9325_POWER_CTRL3_PON |
  4007fc:	2012      	movs	r0, #18
  4007fe:	211b      	movs	r1, #27
  400800:	47a0      	blx	r4
			ILI9325_POWER_CTRL3_VRH(0x0B));
	ili9325_delay(50);
  400802:	2032      	movs	r0, #50	; 0x32
  400804:	47b0      	blx	r6
	/* Set VDV[4:0] for VCOM amplitude */
	ili9325_write_register(ILI9325_POWER_CTRL4, ILI9325_POWER_CTRL4_VDV(0x11));
  400806:	2013      	movs	r0, #19
  400808:	f44f 5188 	mov.w	r1, #4352	; 0x1100
  40080c:	47a0      	blx	r4
	/* Set VCM[5:0] for VCOMH */
	ili9325_write_register(ILI9325_POWER_CTRL7, ILI9325_POWER_CTRL7_VCM(0x19));
  40080e:	2029      	movs	r0, #41	; 0x29
  400810:	2119      	movs	r1, #25
  400812:	47a0      	blx	r4
	/* Set Frame Rate */
	ili9325_write_register(ILI9325_FRAME_RATE_AND_COLOR_CTRL,
  400814:	202b      	movs	r0, #43	; 0x2b
  400816:	210d      	movs	r1, #13
  400818:	47a0      	blx	r4
			ILI9325_FRAME_RATE_AND_COLOR_CTRL_FRS(0x0D));
	ili9325_delay(50);
  40081a:	2032      	movs	r0, #50	; 0x32
  40081c:	47b0      	blx	r6

	/* Adjust the Gamma Curve */
	ili9325_write_register(ILI9325_GAMMA_CTRL1, 0x0000);
  40081e:	2030      	movs	r0, #48	; 0x30
  400820:	2100      	movs	r1, #0
  400822:	47a0      	blx	r4
	ili9325_write_register(ILI9325_GAMMA_CTRL2, ILI9325_GAMMA_CTRL2_KP3(0x02) |
  400824:	2031      	movs	r0, #49	; 0x31
  400826:	f44f 7101 	mov.w	r1, #516	; 0x204
  40082a:	47a0      	blx	r4
			ILI9325_GAMMA_CTRL2_KP2(0x04));
	ili9325_write_register(ILI9325_GAMMA_CTRL3, ILI9325_GAMMA_CTRL3_KP5(0x02) |
  40082c:	2032      	movs	r0, #50	; 0x32
  40082e:	f44f 7100 	mov.w	r1, #512	; 0x200
  400832:	47a0      	blx	r4
			ILI9325_GAMMA_CTRL3_KP4(0x00));
	ili9325_write_register(ILI9325_GAMMA_CTRL4, ILI9325_GAMMA_CTRL4_RP1(0x00) |
  400834:	2035      	movs	r0, #53	; 0x35
  400836:	2107      	movs	r1, #7
  400838:	47a0      	blx	r4
			ILI9325_GAMMA_CTRL4_RP0(0x07));
	ili9325_write_register(ILI9325_GAMMA_CTRL5, ILI9325_GAMMA_CTRL5_VRP1(0x14) |
  40083a:	2036      	movs	r0, #54	; 0x36
  40083c:	f241 4104 	movw	r1, #5124	; 0x1404
  400840:	47a0      	blx	r4
			ILI9325_GAMMA_CTRL5_VRP0(0x04));
	ili9325_write_register(ILI9325_GAMMA_CTRL6, ILI9325_GAMMA_CTRL6_KN1(0x07) |
  400842:	2037      	movs	r0, #55	; 0x37
  400844:	f240 7105 	movw	r1, #1797	; 0x705
  400848:	47a0      	blx	r4
			ILI9325_GAMMA_CTRL6_KN0(0x05));
	ili9325_write_register(ILI9325_GAMMA_CTRL7, ILI9325_GAMMA_CTRL7_KN3(0x03) |
  40084a:	2038      	movs	r0, #56	; 0x38
  40084c:	f240 3105 	movw	r1, #773	; 0x305
  400850:	47a0      	blx	r4
			ILI9325_GAMMA_CTRL7_KN2(0x05));
	ili9325_write_register(ILI9325_GAMMA_CTRL8, ILI9325_GAMMA_CTRL8_KN5(0x07) |
  400852:	2039      	movs	r0, #57	; 0x39
  400854:	f240 7107 	movw	r1, #1799	; 0x707
  400858:	47a0      	blx	r4
			ILI9325_GAMMA_CTRL8_KN4(0x07));
	ili9325_write_register(ILI9325_GAMMA_CTRL9, ILI9325_GAMMA_CTRL9_RN1(0x07) |
  40085a:	203c      	movs	r0, #60	; 0x3c
  40085c:	f240 7101 	movw	r1, #1793	; 0x701
  400860:	47a0      	blx	r4
			ILI9325_GAMMA_CTRL9_RN0(0x01));
	ili9325_write_register(ILI9325_GAMMA_CTRL10, ILI9325_GAMMA_CTRL10_VRN1(0x00) |
  400862:	203d      	movs	r0, #61	; 0x3d
  400864:	210e      	movs	r1, #14
  400866:	47a0      	blx	r4
			ILI9325_GAMMA_CTRL10_VRN0(0x0E));
	/* Use the high speed write mode (HWM=1) */
	/* When TRI = 1, data are transferred to the internal RAM in 8-bit x 3 transfers mode via the 8-bit interface. */
	/* DFM Set the mode of transferring data to the internal RAM when TRI = 1. */
	/* I/D[1:0] = 11 Horizontal : increment Vertical : increment, AM=0:Horizontal */
	ili9325_write_register(ILI9325_ENTRY_MODE, ILI9325_ENTRY_MODE_TRI |
  400868:	2003      	movs	r0, #3
  40086a:	f24d 0110 	movw	r1, #53264	; 0xd010
  40086e:	47a0      	blx	r4
			ILI9325_ENTRY_MODE_DFM | ILI9325_ENTRY_MODE_ID(0x01) |ILI9325_ENTRY_MODE_BGR);
	/* Sets the number of lines to drive the LCD at an interval of 8 lines. */
	/* The scan direction is from G320 to G1 */
	ili9325_write_register(ILI9325_DRIVER_OUTPUT_CTRL2, ILI9325_DRIVER_OUTPUT_CTRL2_GS |
  400870:	2060      	movs	r0, #96	; 0x60
  400872:	f44f 4127 	mov.w	r1, #42752	; 0xa700
  400876:	47a0      	blx	r4
			ILI9325_DRIVER_OUTPUT_CTRL2_NL(0x27));

	/* Vertical Scrolling */
	/* Disable scrolling and enable the grayscale inversion */
	ili9325_write_register(ILI9325_BASE_IMG_DISP_CTRL, ILI9325_BASE_IMG_DISP_CTRL_REV);
  400878:	2061      	movs	r0, #97	; 0x61
  40087a:	2101      	movs	r1, #1
  40087c:	47a0      	blx	r4
	ili9325_write_register(ILI9325_VERTICAL_SCROLL_CTRL, 0x0000);
  40087e:	206a      	movs	r0, #106	; 0x6a
  400880:	2100      	movs	r1, #0
  400882:	47a0      	blx	r4

	/* Disable Partial Display */
	ili9325_write_register(ILI9325_PARTIAL_IMG1_DISP_POS, 0x0000);
  400884:	2080      	movs	r0, #128	; 0x80
  400886:	2100      	movs	r1, #0
  400888:	47a0      	blx	r4
	ili9325_write_register(ILI9325_PARTIAL_IMG1_AREA_START_LINE, 0x0000);
  40088a:	2081      	movs	r0, #129	; 0x81
  40088c:	2100      	movs	r1, #0
  40088e:	47a0      	blx	r4
	ili9325_write_register(ILI9325_PARTIAL_IMG1_AREA_END_LINE, 0x0000);
  400890:	2082      	movs	r0, #130	; 0x82
  400892:	2100      	movs	r1, #0
  400894:	47a0      	blx	r4
	ili9325_write_register(ILI9325_PARTIAL_IMG2_DISP_POS, 0x0000);
  400896:	2083      	movs	r0, #131	; 0x83
  400898:	2100      	movs	r1, #0
  40089a:	47a0      	blx	r4
	ili9325_write_register(ILI9325_PARTIAL_IMG2_AREA_START_LINE, 0x0000);
  40089c:	2084      	movs	r0, #132	; 0x84
  40089e:	2100      	movs	r1, #0
  4008a0:	47a0      	blx	r4
	ili9325_write_register(ILI9325_PARTIAL_IMG2_AREA_END_LINE, 0x0000);
  4008a2:	2085      	movs	r0, #133	; 0x85
  4008a4:	2100      	movs	r1, #0
  4008a6:	47a0      	blx	r4

	/* Panel Control */
	ili9325_write_register(ILI9325_PANEL_INTERFACE_CTRL1,
  4008a8:	2090      	movs	r0, #144	; 0x90
  4008aa:	2110      	movs	r1, #16
  4008ac:	47a0      	blx	r4
			ILI9325_PANEL_INTERFACE_CTRL1_RTNI(0x10));
	ili9325_write_register(ILI9325_PANEL_INTERFACE_CTRL2,
  4008ae:	2092      	movs	r0, #146	; 0x92
  4008b0:	f44f 61c0 	mov.w	r1, #1536	; 0x600
  4008b4:	47a0      	blx	r4
			ILI9325_PANEL_INTERFACE_CTRL2_NOWI(0x06));
	ili9325_write_register(ILI9325_PANEL_INTERFACE_CTRL4,
  4008b6:	2095      	movs	r0, #149	; 0x95
  4008b8:	f44f 7188 	mov.w	r1, #272	; 0x110
  4008bc:	47a0      	blx	r4
			ILI9325_PANEL_INTERFACE_CTRL4_DIVE(0x01) |
			ILI9325_PANEL_INTERFACE_CTRL4_RTNE(0x10));

	ili9325_set_window(0, 0,p_opt->ul_width,p_opt->ul_height);
  4008be:	2000      	movs	r0, #0
  4008c0:	4601      	mov	r1, r0
  4008c2:	682a      	ldr	r2, [r5, #0]
  4008c4:	686b      	ldr	r3, [r5, #4]
  4008c6:	4c0a      	ldr	r4, [pc, #40]	; (4008f0 <ili9325_init+0x198>)
  4008c8:	47a0      	blx	r4
	ili9325_set_foreground_color(p_opt->foreground_color);
  4008ca:	68a8      	ldr	r0, [r5, #8]
  4008cc:	4b09      	ldr	r3, [pc, #36]	; (4008f4 <ili9325_init+0x19c>)
  4008ce:	4798      	blx	r3
	ili9325_set_cursor_position(0, 0);
  4008d0:	2000      	movs	r0, #0
  4008d2:	4601      	mov	r1, r0
  4008d4:	4b08      	ldr	r3, [pc, #32]	; (4008f8 <ili9325_init+0x1a0>)
  4008d6:	4798      	blx	r3
	return 0;
  4008d8:	2000      	movs	r0, #0
  4008da:	bd70      	pop	{r4, r5, r6, pc}
{
	/* Check ILI9325 chipid */
	uint16_t chipid = ili9325_read_register(ILI9325_DEVICE_CODE_REG); /* Driver Code Read (R00h) */

	if (chipid != ILI9325_DEVICE_CODE) {
		return 1;
  4008dc:	2001      	movs	r0, #1
  4008de:	4770      	bx	lr
  4008e0:	62000002 	.word	0x62000002
  4008e4:	ffff9325 	.word	0xffff9325
  4008e8:	00400685 	.word	0x00400685
  4008ec:	0040069d 	.word	0x0040069d
  4008f0:	00400701 	.word	0x00400701
  4008f4:	004006e9 	.word	0x004006e9
  4008f8:	0040073d 	.word	0x0040073d

004008fc <ili9325_fill>:
 * \brief Fill the LCD buffer with the specified color.
 *
 * \param ul_color fill color.
 */
void ili9325_fill(ili9325_color_t ul_color)
{
  4008fc:	b570      	push	{r4, r5, r6, lr}
  4008fe:	4606      	mov	r6, r0
	uint32_t dw;

	ili9325_set_cursor_position(0, 0);
  400900:	2000      	movs	r0, #0
  400902:	4601      	mov	r1, r0
  400904:	4b07      	ldr	r3, [pc, #28]	; (400924 <ili9325_fill+0x28>)
  400906:	4798      	blx	r3

/* Define EBI access for ILI9325 8-bit System Interface.*/
#if defined(BOARD_ILI9325_ADDR) && defined (BOARD_ILI9325_RS)
	static inline void LCD_IR(uint8_t lcd_index)
	{
		*((volatile uint8_t *)(BOARD_ILI9325_ADDR)) = lcd_index; /* ILI9325 index register address */
  400908:	f04f 43c4 	mov.w	r3, #1644167168	; 0x62000000
  40090c:	2200      	movs	r2, #0
  40090e:	701a      	strb	r2, [r3, #0]
  400910:	2222      	movs	r2, #34	; 0x22
  400912:	701a      	strb	r2, [r3, #0]
  400914:	f44f 3496 	mov.w	r4, #76800	; 0x12c00
	ili9325_write_ram_prepare();

	for (dw = ILI9325_LCD_WIDTH * ILI9325_LCD_HEIGHT; dw > 0; dw--) {
		ili9325_write_ram(ul_color);
  400918:	4d03      	ldr	r5, [pc, #12]	; (400928 <ili9325_fill+0x2c>)
  40091a:	4630      	mov	r0, r6
  40091c:	47a8      	blx	r5
	uint32_t dw;

	ili9325_set_cursor_position(0, 0);
	ili9325_write_ram_prepare();

	for (dw = ILI9325_LCD_WIDTH * ILI9325_LCD_HEIGHT; dw > 0; dw--) {
  40091e:	3c01      	subs	r4, #1
  400920:	d1fb      	bne.n	40091a <ili9325_fill+0x1e>
		ili9325_write_ram(ul_color);
	}
}
  400922:	bd70      	pop	{r4, r5, r6, pc}
  400924:	0040073d 	.word	0x0040073d
  400928:	0040066d 	.word	0x0040066d

0040092c <ili9325_draw_pixel>:
 *
 * \return 0 if succeeds, otherwise fails.
 */
uint32_t ili9325_draw_pixel(uint32_t ul_x, uint32_t ul_y)
{
	if ((ul_x >= ILI9325_LCD_WIDTH) || (ul_y >= ILI9325_LCD_HEIGHT)) {
  40092c:	28ef      	cmp	r0, #239	; 0xef
  40092e:	d813      	bhi.n	400958 <ili9325_draw_pixel+0x2c>
  400930:	f5b1 7fa0 	cmp.w	r1, #320	; 0x140
  400934:	d212      	bcs.n	40095c <ili9325_draw_pixel+0x30>
 * \param ul_y Y coordinate of pixel.
 *
 * \return 0 if succeeds, otherwise fails.
 */
uint32_t ili9325_draw_pixel(uint32_t ul_x, uint32_t ul_y)
{
  400936:	b510      	push	{r4, lr}
	if ((ul_x >= ILI9325_LCD_WIDTH) || (ul_y >= ILI9325_LCD_HEIGHT)) {
		return 1;
	}

	/* Set cursor */
	ili9325_set_cursor_position(ul_x, ul_y);
  400938:	b280      	uxth	r0, r0
  40093a:	b289      	uxth	r1, r1
  40093c:	4b08      	ldr	r3, [pc, #32]	; (400960 <ili9325_draw_pixel+0x34>)
  40093e:	4798      	blx	r3
  400940:	f04f 43c4 	mov.w	r3, #1644167168	; 0x62000000
  400944:	2400      	movs	r4, #0
  400946:	701c      	strb	r4, [r3, #0]
  400948:	2222      	movs	r2, #34	; 0x22
  40094a:	701a      	strb	r2, [r3, #0]

	/* Prepare to write in GRAM */
	ili9325_write_ram_prepare();
	ili9325_write_ram(*g_ul_pixel_cache);
  40094c:	4b05      	ldr	r3, [pc, #20]	; (400964 <ili9325_draw_pixel+0x38>)
  40094e:	6818      	ldr	r0, [r3, #0]
  400950:	4b05      	ldr	r3, [pc, #20]	; (400968 <ili9325_draw_pixel+0x3c>)
  400952:	4798      	blx	r3
	return 0;
  400954:	4620      	mov	r0, r4
  400956:	bd10      	pop	{r4, pc}
 * \return 0 if succeeds, otherwise fails.
 */
uint32_t ili9325_draw_pixel(uint32_t ul_x, uint32_t ul_y)
{
	if ((ul_x >= ILI9325_LCD_WIDTH) || (ul_y >= ILI9325_LCD_HEIGHT)) {
		return 1;
  400958:	2001      	movs	r0, #1
  40095a:	4770      	bx	lr
  40095c:	2001      	movs	r0, #1
  40095e:	4770      	bx	lr
  400960:	0040073d 	.word	0x0040073d
  400964:	200008d0 	.word	0x200008d0
  400968:	0040066d 	.word	0x0040066d

0040096c <ili9325_draw_prepare>:
 * \param ul_width The width of the window.
 * \param ul_height The height of the window.
 */
void ili9325_draw_prepare(uint32_t ul_x, uint32_t ul_y, uint32_t ul_width,
		uint32_t ul_height)
{
  40096c:	b570      	push	{r4, r5, r6, lr}
  40096e:	4605      	mov	r5, r0
  400970:	460c      	mov	r4, r1
	/* Determine the refresh window area */
	ili9325_set_window(ul_x, ul_y, ul_width, ul_height);
  400972:	4e06      	ldr	r6, [pc, #24]	; (40098c <ili9325_draw_prepare+0x20>)
  400974:	47b0      	blx	r6

	/* Set cursor */
	ili9325_set_cursor_position(ul_x, ul_y);
  400976:	b2a8      	uxth	r0, r5
  400978:	b2a1      	uxth	r1, r4
  40097a:	4b05      	ldr	r3, [pc, #20]	; (400990 <ili9325_draw_prepare+0x24>)
  40097c:	4798      	blx	r3
  40097e:	f04f 43c4 	mov.w	r3, #1644167168	; 0x62000000
  400982:	2200      	movs	r2, #0
  400984:	701a      	strb	r2, [r3, #0]
  400986:	2222      	movs	r2, #34	; 0x22
  400988:	701a      	strb	r2, [r3, #0]
  40098a:	bd70      	pop	{r4, r5, r6, pc}
  40098c:	00400701 	.word	0x00400701
  400990:	0040073d 	.word	0x0040073d

00400994 <ili9325_draw_string>:
 * \param ul_x X coordinate of string top-left corner.
 * \param ul_y Y coordinate of string top-left corner.
 * \param p_str String to display.
 */
void ili9325_draw_string(uint32_t ul_x, uint32_t ul_y, const uint8_t *p_str)
{
  400994:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  400998:	b085      	sub	sp, #20
  40099a:	9003      	str	r0, [sp, #12]
  40099c:	9202      	str	r2, [sp, #8]
	uint32_t xorg = ul_x;

	while (*p_str != 0) {
  40099e:	7813      	ldrb	r3, [r2, #0]
  4009a0:	2b00      	cmp	r3, #0
  4009a2:	d046      	beq.n	400a32 <ili9325_draw_string+0x9e>
  4009a4:	468b      	mov	fp, r1
  4009a6:	9001      	str	r0, [sp, #4]
		offset1 = offset0 + 1;

		/* Draw pixel on screen depending on the corresponding bit value from the charset */
		for (row = 0; row < 8; row++) {
			if ((p_uc_charset10x14[offset0] >> (7 - row)) & 0x1) {
				ili9325_draw_pixel(ul_x + col, ul_y + row);
  4009a8:	f8df 9090 	ldr.w	r9, [pc, #144]	; 400a3c <ili9325_draw_string+0xa8>
{
	uint32_t xorg = ul_x;

	while (*p_str != 0) {
		/* If newline, jump to the next line (font height + 2) */
		if (*p_str == '\n') {
  4009ac:	2b0a      	cmp	r3, #10
  4009ae:	d104      	bne.n	4009ba <ili9325_draw_string+0x26>
			ul_y += gfont.height + 2;
  4009b0:	f10b 0b10 	add.w	fp, fp, #16
			ul_x = xorg;
  4009b4:	9b03      	ldr	r3, [sp, #12]
  4009b6:	9301      	str	r3, [sp, #4]
  4009b8:	e035      	b.n	400a26 <ili9325_draw_string+0x92>
	uint32_t row, col;
	uint32_t offset, offset0, offset1;

	/* Compute offset according of the specified ASCII character */
	/* Note: the first 32 characters of the ASCII table are not handled */
	offset = ((uint32_t)uc_c - 0x20) * 20;
  4009ba:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  4009be:	4e1e      	ldr	r6, [pc, #120]	; (400a38 <ili9325_draw_string+0xa4>)
  4009c0:	eb06 0383 	add.w	r3, r6, r3, lsl #2
  4009c4:	f2a3 267f 	subw	r6, r3, #639	; 0x27f
  4009c8:	9a01      	ldr	r2, [sp, #4]
  4009ca:	4613      	mov	r3, r2
  4009cc:	330a      	adds	r3, #10
  4009ce:	9300      	str	r3, [sp, #0]
  4009d0:	4690      	mov	r8, r2
  4009d2:	2407      	movs	r4, #7
  4009d4:	4637      	mov	r7, r6
  4009d6:	eb0b 0a04 	add.w	sl, fp, r4
  4009da:	463d      	mov	r5, r7
		offset0 = offset + col * 2;
		offset1 = offset0 + 1;

		/* Draw pixel on screen depending on the corresponding bit value from the charset */
		for (row = 0; row < 8; row++) {
			if ((p_uc_charset10x14[offset0] >> (7 - row)) & 0x1) {
  4009dc:	f816 3c01 	ldrb.w	r3, [r6, #-1]
  4009e0:	4123      	asrs	r3, r4
  4009e2:	f013 0f01 	tst.w	r3, #1
  4009e6:	d003      	beq.n	4009f0 <ili9325_draw_string+0x5c>
				ili9325_draw_pixel(ul_x + col, ul_y + row);
  4009e8:	4640      	mov	r0, r8
  4009ea:	ebc4 010a 	rsb	r1, r4, sl
  4009ee:	47c8      	blx	r9
  4009f0:	3c01      	subs	r4, #1
		/* Compute the first and second byte offset of a column */
		offset0 = offset + col * 2;
		offset1 = offset0 + 1;

		/* Draw pixel on screen depending on the corresponding bit value from the charset */
		for (row = 0; row < 8; row++) {
  4009f2:	f1b4 3fff 	cmp.w	r4, #4294967295
  4009f6:	d1f0      	bne.n	4009da <ili9325_draw_string+0x46>
  4009f8:	2407      	movs	r4, #7
  4009fa:	f10b 070f 	add.w	r7, fp, #15
				ili9325_draw_pixel(ul_x + col, ul_y + row);
			}
		}

		for (row = 0; row < 6; row++) {
			if ((p_uc_charset10x14[offset1] >> (7 - row)) & 0x1) {
  4009fe:	782b      	ldrb	r3, [r5, #0]
  400a00:	4123      	asrs	r3, r4
  400a02:	f013 0f01 	tst.w	r3, #1
  400a06:	d002      	beq.n	400a0e <ili9325_draw_string+0x7a>
				ili9325_draw_pixel(ul_x + col, ul_y + row + 8);
  400a08:	4640      	mov	r0, r8
  400a0a:	1b39      	subs	r1, r7, r4
  400a0c:	47c8      	blx	r9
  400a0e:	3c01      	subs	r4, #1
			if ((p_uc_charset10x14[offset0] >> (7 - row)) & 0x1) {
				ili9325_draw_pixel(ul_x + col, ul_y + row);
			}
		}

		for (row = 0; row < 6; row++) {
  400a10:	2c01      	cmp	r4, #1
  400a12:	d1f4      	bne.n	4009fe <ili9325_draw_string+0x6a>
  400a14:	3602      	adds	r6, #2
  400a16:	f108 0801 	add.w	r8, r8, #1

	/* Compute offset according of the specified ASCII character */
	/* Note: the first 32 characters of the ASCII table are not handled */
	offset = ((uint32_t)uc_c - 0x20) * 20;

	for (col = 0; col < 10; col++) {
  400a1a:	9b00      	ldr	r3, [sp, #0]
  400a1c:	4598      	cmp	r8, r3
  400a1e:	d1d8      	bne.n	4009d2 <ili9325_draw_string+0x3e>
			ul_y += gfont.height + 2;
			ul_x = xorg;
		} else {
			/* Draw the character and place cursor right after (font width + 2) */
			ili9325_draw_char(ul_x, ul_y, *p_str);
			ul_x += gfont.width + 2;
  400a20:	9b01      	ldr	r3, [sp, #4]
  400a22:	330c      	adds	r3, #12
  400a24:	9301      	str	r3, [sp, #4]
 */
void ili9325_draw_string(uint32_t ul_x, uint32_t ul_y, const uint8_t *p_str)
{
	uint32_t xorg = ul_x;

	while (*p_str != 0) {
  400a26:	9a02      	ldr	r2, [sp, #8]
  400a28:	f812 3f01 	ldrb.w	r3, [r2, #1]!
  400a2c:	9202      	str	r2, [sp, #8]
  400a2e:	2b00      	cmp	r3, #0
  400a30:	d1bc      	bne.n	4009ac <ili9325_draw_string+0x18>
			ili9325_draw_char(ul_x, ul_y, *p_str);
			ul_x += gfont.width + 2;
		}
		p_str++;
	}
}
  400a32:	b005      	add	sp, #20
  400a34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  400a38:	0040e4d8 	.word	0x0040e4d8
  400a3c:	0040092d 	.word	0x0040092d

00400a40 <smc_set_setup_timing>:
 * \param ul_setup_timing Setup timing for NWE, NCS, NRD.
 */
void smc_set_setup_timing(Smc *p_smc, uint32_t ul_cs,
		uint32_t ul_setup_timing)
{
	p_smc->SMC_CS_NUMBER[ul_cs].SMC_SETUP = ul_setup_timing;
  400a40:	0109      	lsls	r1, r1, #4
  400a42:	5042      	str	r2, [r0, r1]
  400a44:	4770      	bx	lr
  400a46:	bf00      	nop

00400a48 <smc_set_pulse_timing>:
 * \param ul_pulse_timing Pulse timing for NWE,NCS,NRD.
 */
void smc_set_pulse_timing(Smc *p_smc, uint32_t ul_cs,
		uint32_t ul_pulse_timing)
{
	p_smc->SMC_CS_NUMBER[ul_cs].SMC_PULSE = ul_pulse_timing;
  400a48:	eb00 1101 	add.w	r1, r0, r1, lsl #4
  400a4c:	604a      	str	r2, [r1, #4]
  400a4e:	4770      	bx	lr

00400a50 <smc_set_cycle_timing>:
 * \param ul_cycle_timing Cycle timing for NWE and NRD.
 */
void smc_set_cycle_timing(Smc *p_smc, uint32_t ul_cs,
		uint32_t ul_cycle_timing)
{
	p_smc->SMC_CS_NUMBER[ul_cs].SMC_CYCLE = ul_cycle_timing;
  400a50:	eb00 1101 	add.w	r1, r0, r1, lsl #4
  400a54:	608a      	str	r2, [r1, #8]
  400a56:	4770      	bx	lr

00400a58 <smc_set_mode>:
 * \param ul_cs Chip select number to be set.
 * \param ul_mode SMC mode.
 */
void smc_set_mode(Smc *p_smc, uint32_t ul_cs, uint32_t ul_mode)
{
	p_smc->SMC_CS_NUMBER[ul_cs].SMC_MODE = ul_mode;
  400a58:	eb00 1101 	add.w	r1, r0, r1, lsl #4
  400a5c:	60ca      	str	r2, [r1, #12]
  400a5e:	4770      	bx	lr

00400a60 <pio_set_debounce_filter>:
void pio_set_debounce_filter(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_cut_off)
{
#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	/* Set Debouncing, 0 bit field no effect */
	p_pio->PIO_IFSCER = ul_mask;
  400a60:	f8c0 1084 	str.w	r1, [r0, #132]	; 0x84
	/*
	 * The debouncing filter can filter a pulse of less than 1/2 Period of a
	 * programmable Divided Slow Clock:
	 * Tdiv_slclk = ((DIV+1)*2).Tslow_clock
	 */
	p_pio->PIO_SCDR = PIO_SCDR_DIV((FREQ_SLOW_CLOCK_EXT /
  400a64:	0052      	lsls	r2, r2, #1
  400a66:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  400a6a:	fbb3 f2f2 	udiv	r2, r3, r2
  400a6e:	3a01      	subs	r2, #1
  400a70:	f3c2 020d 	ubfx	r2, r2, #0, #14
  400a74:	f8c0 208c 	str.w	r2, [r0, #140]	; 0x8c
  400a78:	4770      	bx	lr
  400a7a:	bf00      	nop

00400a7c <pio_set>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_set(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_SODR = ul_mask;
  400a7c:	6301      	str	r1, [r0, #48]	; 0x30
  400a7e:	4770      	bx	lr

00400a80 <pio_clear>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_clear(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_CODR = ul_mask;
  400a80:	6341      	str	r1, [r0, #52]	; 0x34
  400a82:	4770      	bx	lr

00400a84 <pio_set_peripheral>:
		const uint32_t ul_mask)
{
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
  400a84:	6442      	str	r2, [r0, #68]	; 0x44

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	switch (ul_type) {
  400a86:	f1b1 5fc0 	cmp.w	r1, #402653184	; 0x18000000
  400a8a:	d02f      	beq.n	400aec <pio_set_peripheral+0x68>
  400a8c:	d807      	bhi.n	400a9e <pio_set_peripheral+0x1a>
  400a8e:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
  400a92:	d014      	beq.n	400abe <pio_set_peripheral+0x3a>
  400a94:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
  400a98:	d01e      	beq.n	400ad8 <pio_set_peripheral+0x54>
  400a9a:	b939      	cbnz	r1, 400aac <pio_set_peripheral+0x28>
  400a9c:	4770      	bx	lr
  400a9e:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
  400aa2:	d037      	beq.n	400b14 <pio_set_peripheral+0x90>
  400aa4:	d804      	bhi.n	400ab0 <pio_set_peripheral+0x2c>
  400aa6:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
  400aaa:	d029      	beq.n	400b00 <pio_set_peripheral+0x7c>
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
  400aac:	6042      	str	r2, [r0, #4]
  400aae:	4770      	bx	lr

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	switch (ul_type) {
  400ab0:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
  400ab4:	d02e      	beq.n	400b14 <pio_set_peripheral+0x90>
  400ab6:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
  400aba:	d02b      	beq.n	400b14 <pio_set_peripheral+0x90>
  400abc:	e7f6      	b.n	400aac <pio_set_peripheral+0x28>
 * \param ul_type PIO type.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_set_peripheral(Pio *p_pio, const pio_type_t ul_type,
		const uint32_t ul_mask)
{
  400abe:	b410      	push	{r4}
	p_pio->PIO_IDR = ul_mask;

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	switch (ul_type) {
	case PIO_PERIPH_A:
		ul_sr = p_pio->PIO_ABCDSR[0];
  400ac0:	6f01      	ldr	r1, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  400ac2:	6f04      	ldr	r4, [r0, #112]	; 0x70
  400ac4:	43d3      	mvns	r3, r2
  400ac6:	4021      	ands	r1, r4
  400ac8:	4019      	ands	r1, r3
  400aca:	6701      	str	r1, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  400acc:	6f41      	ldr	r1, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  400ace:	6f44      	ldr	r4, [r0, #116]	; 0x74
  400ad0:	4021      	ands	r1, r4
  400ad2:	400b      	ands	r3, r1
  400ad4:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  400ad6:	e01a      	b.n	400b0e <pio_set_peripheral+0x8a>
	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABCDSR[0];
  400ad8:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  400ada:	4313      	orrs	r3, r2
  400adc:	6703      	str	r3, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  400ade:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  400ae0:	6f41      	ldr	r1, [r0, #116]	; 0x74
  400ae2:	400b      	ands	r3, r1
  400ae4:	ea23 0302 	bic.w	r3, r3, r2
  400ae8:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  400aea:	e7df      	b.n	400aac <pio_set_peripheral+0x28>
#if (!SAMG)
	case PIO_PERIPH_C:
		ul_sr = p_pio->PIO_ABCDSR[0];
  400aec:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  400aee:	6f01      	ldr	r1, [r0, #112]	; 0x70
  400af0:	400b      	ands	r3, r1
  400af2:	ea23 0302 	bic.w	r3, r3, r2
  400af6:	6703      	str	r3, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  400af8:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  400afa:	4313      	orrs	r3, r2
  400afc:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  400afe:	e7d5      	b.n	400aac <pio_set_peripheral+0x28>
	case PIO_PERIPH_D:
		ul_sr = p_pio->PIO_ABCDSR[0];
  400b00:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  400b02:	4313      	orrs	r3, r2
  400b04:	6703      	str	r3, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  400b06:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  400b08:	4313      	orrs	r3, r2
  400b0a:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  400b0c:	e7ce      	b.n	400aac <pio_set_peripheral+0x28>
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
  400b0e:	6042      	str	r2, [r0, #4]
}
  400b10:	f85d 4b04 	ldr.w	r4, [sp], #4
  400b14:	4770      	bx	lr
  400b16:	bf00      	nop

00400b18 <pio_set_input>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
  400b18:	6441      	str	r1, [r0, #68]	; 0x44
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  400b1a:	f012 0f01 	tst.w	r2, #1
		p_pio->PIO_PUER = ul_mask;
  400b1e:	bf14      	ite	ne
  400b20:	6641      	strne	r1, [r0, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
  400b22:	6601      	streq	r1, [r0, #96]	; 0x60
{
	pio_disable_interrupt(p_pio, ul_mask);
	pio_pull_up(p_pio, ul_mask, ul_attribute & PIO_PULLUP);

	/* Enable Input Filter if necessary */
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
  400b24:	f012 0f0a 	tst.w	r2, #10
		p_pio->PIO_IFER = ul_mask;
  400b28:	bf14      	ite	ne
  400b2a:	6201      	strne	r1, [r0, #32]
	} else {
		p_pio->PIO_IFDR = ul_mask;
  400b2c:	6241      	streq	r1, [r0, #36]	; 0x24
	}

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	/* Enable de-glitch or de-bounce if necessary */
	if (ul_attribute & PIO_DEGLITCH) {
  400b2e:	f012 0f02 	tst.w	r2, #2
  400b32:	d002      	beq.n	400b3a <pio_set_input+0x22>
		p_pio->PIO_IFSCDR = ul_mask;
  400b34:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
  400b38:	e004      	b.n	400b44 <pio_set_input+0x2c>
	} else {
		if (ul_attribute & PIO_DEBOUNCE) {
  400b3a:	f012 0f08 	tst.w	r2, #8
			p_pio->PIO_IFSCER = ul_mask;
  400b3e:	bf18      	it	ne
  400b40:	f8c0 1084 	strne.w	r1, [r0, #132]	; 0x84
#else
#error "Unsupported device"
#endif

	/* Configure pin as input */
	p_pio->PIO_ODR = ul_mask;
  400b44:	6141      	str	r1, [r0, #20]
	p_pio->PIO_PER = ul_mask;
  400b46:	6001      	str	r1, [r0, #0]
  400b48:	4770      	bx	lr
  400b4a:	bf00      	nop

00400b4c <pio_set_output>:
 */
void pio_set_output(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_default_level,
		const uint32_t ul_multidrive_enable,
		const uint32_t ul_pull_up_enable)
{
  400b4c:	b410      	push	{r4}
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
  400b4e:	6441      	str	r1, [r0, #68]	; 0x44
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  400b50:	9c01      	ldr	r4, [sp, #4]
  400b52:	b10c      	cbz	r4, 400b58 <pio_set_output+0xc>
		p_pio->PIO_PUER = ul_mask;
  400b54:	6641      	str	r1, [r0, #100]	; 0x64
  400b56:	e000      	b.n	400b5a <pio_set_output+0xe>
	} else {
		p_pio->PIO_PUDR = ul_mask;
  400b58:	6601      	str	r1, [r0, #96]	; 0x60
{
	pio_disable_interrupt(p_pio, ul_mask);
	pio_pull_up(p_pio, ul_mask, ul_pull_up_enable);

	/* Enable multi-drive if necessary */
	if (ul_multidrive_enable) {
  400b5a:	b10b      	cbz	r3, 400b60 <pio_set_output+0x14>
		p_pio->PIO_MDER = ul_mask;
  400b5c:	6501      	str	r1, [r0, #80]	; 0x50
  400b5e:	e000      	b.n	400b62 <pio_set_output+0x16>
	} else {
		p_pio->PIO_MDDR = ul_mask;
  400b60:	6541      	str	r1, [r0, #84]	; 0x54
	}

	/* Set default value */
	if (ul_default_level) {
  400b62:	b10a      	cbz	r2, 400b68 <pio_set_output+0x1c>
		p_pio->PIO_SODR = ul_mask;
  400b64:	6301      	str	r1, [r0, #48]	; 0x30
  400b66:	e000      	b.n	400b6a <pio_set_output+0x1e>
	} else {
		p_pio->PIO_CODR = ul_mask;
  400b68:	6341      	str	r1, [r0, #52]	; 0x34
	}

	/* Configure pin(s) as output(s) */
	p_pio->PIO_OER = ul_mask;
  400b6a:	6101      	str	r1, [r0, #16]
	p_pio->PIO_PER = ul_mask;
  400b6c:	6001      	str	r1, [r0, #0]
}
  400b6e:	f85d 4b04 	ldr.w	r4, [sp], #4
  400b72:	4770      	bx	lr

00400b74 <pio_configure_interrupt>:
 */
void pio_configure_interrupt(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_attr)
{
	/* Configure additional interrupt mode registers. */
	if (ul_attr & PIO_IT_AIME) {
  400b74:	f012 0f10 	tst.w	r2, #16
  400b78:	d010      	beq.n	400b9c <pio_configure_interrupt+0x28>
		/* Enable additional interrupt mode. */
		p_pio->PIO_AIMER = ul_mask;
  400b7a:	f8c0 10b0 	str.w	r1, [r0, #176]	; 0xb0

		/* If bit field of the selected pin is 1, set as
		   Rising Edge/High level detection event. */
		if (ul_attr & PIO_IT_RE_OR_HL) {
  400b7e:	f012 0f20 	tst.w	r2, #32
			/* Rising Edge or High Level */
			p_pio->PIO_REHLSR = ul_mask;
  400b82:	bf14      	ite	ne
  400b84:	f8c0 10d4 	strne.w	r1, [r0, #212]	; 0xd4
		} else {
			/* Falling Edge or Low Level */
			p_pio->PIO_FELLSR = ul_mask;
  400b88:	f8c0 10d0 	streq.w	r1, [r0, #208]	; 0xd0
		}

		/* If bit field of the selected pin is 1, set as
		   edge detection source. */
		if (ul_attr & PIO_IT_EDGE) {
  400b8c:	f012 0f40 	tst.w	r2, #64	; 0x40
			/* Edge select */
			p_pio->PIO_ESR = ul_mask;
  400b90:	bf14      	ite	ne
  400b92:	f8c0 10c0 	strne.w	r1, [r0, #192]	; 0xc0
		} else {
			/* Level select */
			p_pio->PIO_LSR = ul_mask;
  400b96:	f8c0 10c4 	streq.w	r1, [r0, #196]	; 0xc4
  400b9a:	4770      	bx	lr
		}
	} else {
		/* Disable additional interrupt mode. */
		p_pio->PIO_AIMDR = ul_mask;
  400b9c:	f8c0 10b4 	str.w	r1, [r0, #180]	; 0xb4
  400ba0:	4770      	bx	lr
  400ba2:	bf00      	nop

00400ba4 <pio_enable_interrupt>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_enable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_ISR;
  400ba4:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
	p_pio->PIO_IER = ul_mask;
  400ba6:	6401      	str	r1, [r0, #64]	; 0x40
  400ba8:	4770      	bx	lr
  400baa:	bf00      	nop

00400bac <pio_disable_interrupt>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
  400bac:	6441      	str	r1, [r0, #68]	; 0x44
  400bae:	4770      	bx	lr

00400bb0 <pio_get_interrupt_status>:
 *
 * \return The interrupt status mask value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
  400bb0:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
  400bb2:	4770      	bx	lr

00400bb4 <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
  400bb4:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
  400bb6:	4770      	bx	lr

00400bb8 <pio_configure_pin>:
 * \param ul_flags Pins attributes.
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
  400bb8:	b570      	push	{r4, r5, r6, lr}
  400bba:	b082      	sub	sp, #8
  400bbc:	460d      	mov	r5, r1
		p_pio = PIOC;
	} else {
		p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
	}
#else
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
  400bbe:	0943      	lsrs	r3, r0, #5
  400bc0:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  400bc4:	f203 7307 	addw	r3, r3, #1799	; 0x707
  400bc8:	025c      	lsls	r4, r3, #9
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
	Pio *p_pio = pio_get_pin_group(ul_pin);

	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
  400bca:	f001 43f0 	and.w	r3, r1, #2013265920	; 0x78000000
  400bce:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
  400bd2:	d047      	beq.n	400c64 <pio_configure_pin+0xac>
  400bd4:	d809      	bhi.n	400bea <pio_configure_pin+0x32>
  400bd6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
  400bda:	d021      	beq.n	400c20 <pio_configure_pin+0x68>
  400bdc:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
  400be0:	d02f      	beq.n	400c42 <pio_configure_pin+0x8a>
  400be2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
  400be6:	d16f      	bne.n	400cc8 <pio_configure_pin+0x110>
  400be8:	e009      	b.n	400bfe <pio_configure_pin+0x46>
  400bea:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
  400bee:	d055      	beq.n	400c9c <pio_configure_pin+0xe4>
  400bf0:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
  400bf4:	d052      	beq.n	400c9c <pio_configure_pin+0xe4>
  400bf6:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
  400bfa:	d044      	beq.n	400c86 <pio_configure_pin+0xce>
  400bfc:	e064      	b.n	400cc8 <pio_configure_pin+0x110>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
  400bfe:	f000 001f 	and.w	r0, r0, #31
  400c02:	2601      	movs	r6, #1
  400c04:	4086      	lsls	r6, r0
  400c06:	4620      	mov	r0, r4
  400c08:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  400c0c:	4632      	mov	r2, r6
  400c0e:	4b30      	ldr	r3, [pc, #192]	; (400cd0 <pio_configure_pin+0x118>)
  400c10:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  400c12:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
  400c16:	bf14      	ite	ne
  400c18:	6666      	strne	r6, [r4, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
  400c1a:	6626      	streq	r6, [r4, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
  400c1c:	2001      	movs	r0, #1
  400c1e:	e054      	b.n	400cca <pio_configure_pin+0x112>
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
				(ul_flags & PIO_PULLUP));
		break;
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, (1 << (ul_pin & 0x1F)));
  400c20:	f000 001f 	and.w	r0, r0, #31
  400c24:	2601      	movs	r6, #1
  400c26:	4086      	lsls	r6, r0
  400c28:	4620      	mov	r0, r4
  400c2a:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  400c2e:	4632      	mov	r2, r6
  400c30:	4b27      	ldr	r3, [pc, #156]	; (400cd0 <pio_configure_pin+0x118>)
  400c32:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  400c34:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
  400c38:	bf14      	ite	ne
  400c3a:	6666      	strne	r6, [r4, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
  400c3c:	6626      	streq	r6, [r4, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
  400c3e:	2001      	movs	r0, #1
  400c40:	e043      	b.n	400cca <pio_configure_pin+0x112>
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
				(ul_flags & PIO_PULLUP));
		break;
#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	case PIO_TYPE_PIO_PERIPH_C:
		pio_set_peripheral(p_pio, PIO_PERIPH_C, (1 << (ul_pin & 0x1F)));
  400c42:	f000 001f 	and.w	r0, r0, #31
  400c46:	2601      	movs	r6, #1
  400c48:	4086      	lsls	r6, r0
  400c4a:	4620      	mov	r0, r4
  400c4c:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  400c50:	4632      	mov	r2, r6
  400c52:	4b1f      	ldr	r3, [pc, #124]	; (400cd0 <pio_configure_pin+0x118>)
  400c54:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  400c56:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
  400c5a:	bf14      	ite	ne
  400c5c:	6666      	strne	r6, [r4, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
  400c5e:	6626      	streq	r6, [r4, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
  400c60:	2001      	movs	r0, #1
  400c62:	e032      	b.n	400cca <pio_configure_pin+0x112>
		pio_set_peripheral(p_pio, PIO_PERIPH_C, (1 << (ul_pin & 0x1F)));
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
				(ul_flags & PIO_PULLUP));
		break;
	case PIO_TYPE_PIO_PERIPH_D:
		pio_set_peripheral(p_pio, PIO_PERIPH_D, (1 << (ul_pin & 0x1F)));
  400c64:	f000 001f 	and.w	r0, r0, #31
  400c68:	2601      	movs	r6, #1
  400c6a:	4086      	lsls	r6, r0
  400c6c:	4620      	mov	r0, r4
  400c6e:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
  400c72:	4632      	mov	r2, r6
  400c74:	4b16      	ldr	r3, [pc, #88]	; (400cd0 <pio_configure_pin+0x118>)
  400c76:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  400c78:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
  400c7c:	bf14      	ite	ne
  400c7e:	6666      	strne	r6, [r4, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
  400c80:	6626      	streq	r6, [r4, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
  400c82:	2001      	movs	r0, #1
  400c84:	e021      	b.n	400cca <pio_configure_pin+0x112>
				(ul_flags & PIO_PULLUP));
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
  400c86:	f000 031f 	and.w	r3, r0, #31
  400c8a:	2601      	movs	r6, #1
  400c8c:	4620      	mov	r0, r4
  400c8e:	fa06 f103 	lsl.w	r1, r6, r3
  400c92:	462a      	mov	r2, r5
  400c94:	4b0f      	ldr	r3, [pc, #60]	; (400cd4 <pio_configure_pin+0x11c>)
  400c96:	4798      	blx	r3

	default:
		return 0;
	}

	return 1;
  400c98:	4630      	mov	r0, r6
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;
  400c9a:	e016      	b.n	400cca <pio_configure_pin+0x112>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
  400c9c:	f000 031f 	and.w	r3, r0, #31
  400ca0:	2601      	movs	r6, #1
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
  400ca2:	f005 5260 	and.w	r2, r5, #939524096	; 0x38000000
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
  400ca6:	ea05 0106 	and.w	r1, r5, r6
  400caa:	9100      	str	r1, [sp, #0]
  400cac:	4620      	mov	r0, r4
  400cae:	fa06 f103 	lsl.w	r1, r6, r3
  400cb2:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
  400cb6:	bf14      	ite	ne
  400cb8:	2200      	movne	r2, #0
  400cba:	2201      	moveq	r2, #1
  400cbc:	f3c5 0380 	ubfx	r3, r5, #2, #1
  400cc0:	4c05      	ldr	r4, [pc, #20]	; (400cd8 <pio_configure_pin+0x120>)
  400cc2:	47a0      	blx	r4

	default:
		return 0;
	}

	return 1;
  400cc4:	4630      	mov	r0, r6
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
		break;
  400cc6:	e000      	b.n	400cca <pio_configure_pin+0x112>

	default:
		return 0;
  400cc8:	2000      	movs	r0, #0
	}

	return 1;
}
  400cca:	b002      	add	sp, #8
  400ccc:	bd70      	pop	{r4, r5, r6, pc}
  400cce:	bf00      	nop
  400cd0:	00400a85 	.word	0x00400a85
  400cd4:	00400b19 	.word	0x00400b19
  400cd8:	00400b4d 	.word	0x00400b4d

00400cdc <pio_capture_enable>:
 *
 * \param p_pio Pointer to a PIO instance.
 */
void pio_capture_enable(Pio *p_pio)
{
	p_pio->PIO_PCMR |= PIO_PCMR_PCEN;
  400cdc:	f8d0 3150 	ldr.w	r3, [r0, #336]	; 0x150
  400ce0:	f043 0301 	orr.w	r3, r3, #1
  400ce4:	f8c0 3150 	str.w	r3, [r0, #336]	; 0x150
	pio_capture_enable_flag = true;
  400ce8:	2201      	movs	r2, #1
  400cea:	4b01      	ldr	r3, [pc, #4]	; (400cf0 <pio_capture_enable+0x14>)
  400cec:	601a      	str	r2, [r3, #0]
  400cee:	4770      	bx	lr
  400cf0:	20000d64 	.word	0x20000d64

00400cf4 <pio_capture_disable>:
 *
 * \param p_pio Pointer to a PIO instance.
 */
void pio_capture_disable(Pio *p_pio)
{
	p_pio->PIO_PCMR &= (~PIO_PCMR_PCEN);
  400cf4:	f8d0 3150 	ldr.w	r3, [r0, #336]	; 0x150
  400cf8:	f023 0301 	bic.w	r3, r3, #1
  400cfc:	f8c0 3150 	str.w	r3, [r0, #336]	; 0x150
	pio_capture_enable_flag = false;
  400d00:	2200      	movs	r2, #0
  400d02:	4b01      	ldr	r3, [pc, #4]	; (400d08 <pio_capture_disable+0x14>)
  400d04:	601a      	str	r2, [r3, #0]
  400d06:	4770      	bx	lr
  400d08:	20000d64 	.word	0x20000d64

00400d0c <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
  400d0c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  400d10:	4681      	mov	r9, r0
  400d12:	4688      	mov	r8, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
  400d14:	4b12      	ldr	r3, [pc, #72]	; (400d60 <pio_handler_process+0x54>)
  400d16:	4798      	blx	r3
  400d18:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
  400d1a:	4648      	mov	r0, r9
  400d1c:	4b11      	ldr	r3, [pc, #68]	; (400d64 <pio_handler_process+0x58>)
  400d1e:	4798      	blx	r3

	/* Check pending events */
	if (status != 0) {
  400d20:	4005      	ands	r5, r0
  400d22:	d013      	beq.n	400d4c <pio_handler_process+0x40>
  400d24:	4c10      	ldr	r4, [pc, #64]	; (400d68 <pio_handler_process+0x5c>)
  400d26:	f104 0660 	add.w	r6, r4, #96	; 0x60
		/* Find triggering source */
		i = 0;
		while (status != 0) {
			/* Source is configured on the same controller */
			if (gs_interrupt_sources[i].id == ul_id) {
  400d2a:	6823      	ldr	r3, [r4, #0]
  400d2c:	4543      	cmp	r3, r8
  400d2e:	d108      	bne.n	400d42 <pio_handler_process+0x36>
				/* Source has PIOs whose statuses have changed */
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  400d30:	6861      	ldr	r1, [r4, #4]
  400d32:	4229      	tst	r1, r5
  400d34:	d005      	beq.n	400d42 <pio_handler_process+0x36>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  400d36:	68e3      	ldr	r3, [r4, #12]
  400d38:	4640      	mov	r0, r8
  400d3a:	4798      	blx	r3
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
  400d3c:	6863      	ldr	r3, [r4, #4]
  400d3e:	ea25 0503 	bic.w	r5, r5, r3
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
  400d42:	42b4      	cmp	r4, r6
  400d44:	d002      	beq.n	400d4c <pio_handler_process+0x40>
  400d46:	3410      	adds	r4, #16

	/* Check pending events */
	if (status != 0) {
		/* Find triggering source */
		i = 0;
		while (status != 0) {
  400d48:	2d00      	cmp	r5, #0
  400d4a:	d1ee      	bne.n	400d2a <pio_handler_process+0x1e>
		}
	}

	/* Check capture events */
#if (SAM3S || SAM4S || SAM4E)
	if (pio_capture_enable_flag) {
  400d4c:	4b07      	ldr	r3, [pc, #28]	; (400d6c <pio_handler_process+0x60>)
  400d4e:	681b      	ldr	r3, [r3, #0]
  400d50:	b123      	cbz	r3, 400d5c <pio_handler_process+0x50>
		if (pio_capture_handler) {
  400d52:	4b07      	ldr	r3, [pc, #28]	; (400d70 <pio_handler_process+0x64>)
  400d54:	681b      	ldr	r3, [r3, #0]
  400d56:	b10b      	cbz	r3, 400d5c <pio_handler_process+0x50>
			pio_capture_handler(p_pio);
  400d58:	4648      	mov	r0, r9
  400d5a:	4798      	blx	r3
  400d5c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  400d60:	00400bb1 	.word	0x00400bb1
  400d64:	00400bb5 	.word	0x00400bb5
  400d68:	20000c98 	.word	0x20000c98
  400d6c:	20000d64 	.word	0x20000d64
  400d70:	20000c94 	.word	0x20000c94

00400d74 <pio_handler_set>:
 *
 * \return 0 if successful, 1 if the maximum number of sources has been defined.
 */
uint32_t pio_handler_set(Pio *p_pio, uint32_t ul_id, uint32_t ul_mask,
		uint32_t ul_attr, void (*p_handler) (uint32_t, uint32_t))
{
  400d74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct s_interrupt_source *pSource;

	if (gs_ul_nb_sources >= MAX_INTERRUPT_SOURCES)
  400d76:	4c0c      	ldr	r4, [pc, #48]	; (400da8 <pio_handler_set+0x34>)
  400d78:	6824      	ldr	r4, [r4, #0]
  400d7a:	2c06      	cmp	r4, #6
  400d7c:	d811      	bhi.n	400da2 <pio_handler_set+0x2e>
  400d7e:	4615      	mov	r5, r2
		return 1;

	/* Define new source */
	pSource = &(gs_interrupt_sources[gs_ul_nb_sources]);
	pSource->id = ul_id;
  400d80:	4f0a      	ldr	r7, [pc, #40]	; (400dac <pio_handler_set+0x38>)
  400d82:	0122      	lsls	r2, r4, #4
  400d84:	18be      	adds	r6, r7, r2
  400d86:	50b9      	str	r1, [r7, r2]
	pSource->mask = ul_mask;
  400d88:	6075      	str	r5, [r6, #4]
	pSource->attr = ul_attr;
  400d8a:	60b3      	str	r3, [r6, #8]
	pSource->handler = p_handler;
  400d8c:	9a06      	ldr	r2, [sp, #24]
  400d8e:	60f2      	str	r2, [r6, #12]
	gs_ul_nb_sources++;
  400d90:	3401      	adds	r4, #1
  400d92:	4a05      	ldr	r2, [pc, #20]	; (400da8 <pio_handler_set+0x34>)
  400d94:	6014      	str	r4, [r2, #0]

	/* Configure interrupt mode */
	pio_configure_interrupt(p_pio, ul_mask, ul_attr);
  400d96:	4629      	mov	r1, r5
  400d98:	461a      	mov	r2, r3
  400d9a:	4b05      	ldr	r3, [pc, #20]	; (400db0 <pio_handler_set+0x3c>)
  400d9c:	4798      	blx	r3

	return 0;
  400d9e:	2000      	movs	r0, #0
  400da0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		uint32_t ul_attr, void (*p_handler) (uint32_t, uint32_t))
{
	struct s_interrupt_source *pSource;

	if (gs_ul_nb_sources >= MAX_INTERRUPT_SOURCES)
		return 1;
  400da2:	2001      	movs	r0, #1

	/* Configure interrupt mode */
	pio_configure_interrupt(p_pio, ul_mask, ul_attr);

	return 0;
}
  400da4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  400da6:	bf00      	nop
  400da8:	20000c90 	.word	0x20000c90
  400dac:	20000c98 	.word	0x20000c98
  400db0:	00400b75 	.word	0x00400b75

00400db4 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
  400db4:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
  400db6:	4802      	ldr	r0, [pc, #8]	; (400dc0 <PIOA_Handler+0xc>)
  400db8:	210b      	movs	r1, #11
  400dba:	4b02      	ldr	r3, [pc, #8]	; (400dc4 <PIOA_Handler+0x10>)
  400dbc:	4798      	blx	r3
  400dbe:	bd08      	pop	{r3, pc}
  400dc0:	400e0e00 	.word	0x400e0e00
  400dc4:	00400d0d 	.word	0x00400d0d

00400dc8 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
  400dc8:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
  400dca:	4802      	ldr	r0, [pc, #8]	; (400dd4 <PIOB_Handler+0xc>)
  400dcc:	210c      	movs	r1, #12
  400dce:	4b02      	ldr	r3, [pc, #8]	; (400dd8 <PIOB_Handler+0x10>)
  400dd0:	4798      	blx	r3
  400dd2:	bd08      	pop	{r3, pc}
  400dd4:	400e1000 	.word	0x400e1000
  400dd8:	00400d0d 	.word	0x00400d0d

00400ddc <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
  400ddc:	b508      	push	{r3, lr}
	pio_handler_process(PIOC, ID_PIOC);
  400dde:	4802      	ldr	r0, [pc, #8]	; (400de8 <PIOC_Handler+0xc>)
  400de0:	210d      	movs	r1, #13
  400de2:	4b02      	ldr	r3, [pc, #8]	; (400dec <PIOC_Handler+0x10>)
  400de4:	4798      	blx	r3
  400de6:	bd08      	pop	{r3, pc}
  400de8:	400e1200 	.word	0x400e1200
  400dec:	00400d0d 	.word	0x00400d0d

00400df0 <pmc_switch_mck_to_pllbck>:
 */
uint32_t pmc_switch_mck_to_pllbck(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
  400df0:	4a17      	ldr	r2, [pc, #92]	; (400e50 <pmc_switch_mck_to_pllbck+0x60>)
  400df2:	6b13      	ldr	r3, [r2, #48]	; 0x30
  400df4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  400df8:	4318      	orrs	r0, r3
  400dfa:	6310      	str	r0, [r2, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  400dfc:	6e93      	ldr	r3, [r2, #104]	; 0x68
  400dfe:	f013 0f08 	tst.w	r3, #8
  400e02:	d003      	beq.n	400e0c <pmc_switch_mck_to_pllbck+0x1c>
  400e04:	e009      	b.n	400e1a <pmc_switch_mck_to_pllbck+0x2a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  400e06:	3b01      	subs	r3, #1
  400e08:	d103      	bne.n	400e12 <pmc_switch_mck_to_pllbck+0x22>
  400e0a:	e01c      	b.n	400e46 <pmc_switch_mck_to_pllbck+0x56>
uint32_t pmc_switch_mck_to_pllbck(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  400e0c:	f44f 6300 	mov.w	r3, #2048	; 0x800
  400e10:	490f      	ldr	r1, [pc, #60]	; (400e50 <pmc_switch_mck_to_pllbck+0x60>)
  400e12:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  400e14:	f012 0f08 	tst.w	r2, #8
  400e18:	d0f5      	beq.n	400e06 <pmc_switch_mck_to_pllbck+0x16>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
  400e1a:	4b0d      	ldr	r3, [pc, #52]	; (400e50 <pmc_switch_mck_to_pllbck+0x60>)
  400e1c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  400e1e:	f042 0203 	orr.w	r2, r2, #3
  400e22:	631a      	str	r2, [r3, #48]	; 0x30
			PMC_MCKR_CSS_PLLB_CLK;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  400e24:	6e98      	ldr	r0, [r3, #104]	; 0x68
  400e26:	f010 0008 	ands.w	r0, r0, #8
  400e2a:	d004      	beq.n	400e36 <pmc_switch_mck_to_pllbck+0x46>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	return 0;
  400e2c:	2000      	movs	r0, #0
  400e2e:	4770      	bx	lr

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLB_CLK;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
  400e30:	3b01      	subs	r3, #1
  400e32:	d103      	bne.n	400e3c <pmc_switch_mck_to_pllbck+0x4c>
  400e34:	e009      	b.n	400e4a <pmc_switch_mck_to_pllbck+0x5a>
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLB_CLK;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  400e36:	f44f 6300 	mov.w	r3, #2048	; 0x800
  400e3a:	4905      	ldr	r1, [pc, #20]	; (400e50 <pmc_switch_mck_to_pllbck+0x60>)
  400e3c:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  400e3e:	f012 0f08 	tst.w	r2, #8
  400e42:	d0f5      	beq.n	400e30 <pmc_switch_mck_to_pllbck+0x40>
  400e44:	4770      	bx	lr

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
			return 1;
  400e46:	2001      	movs	r0, #1
  400e48:	4770      	bx	lr
	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLB_CLK;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
			return 1;
  400e4a:	2001      	movs	r0, #1
		}
	}

	return 0;
}
  400e4c:	4770      	bx	lr
  400e4e:	bf00      	nop
  400e50:	400e0400 	.word	0x400e0400

00400e54 <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
  400e54:	b138      	cbz	r0, 400e66 <pmc_switch_mainck_to_xtal+0x12>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  400e56:	4911      	ldr	r1, [pc, #68]	; (400e9c <pmc_switch_mainck_to_xtal+0x48>)
  400e58:	6a0b      	ldr	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  400e5a:	4a11      	ldr	r2, [pc, #68]	; (400ea0 <pmc_switch_mainck_to_xtal+0x4c>)
  400e5c:	401a      	ands	r2, r3
  400e5e:	4b11      	ldr	r3, [pc, #68]	; (400ea4 <pmc_switch_mainck_to_xtal+0x50>)
  400e60:	4313      	orrs	r3, r2
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  400e62:	620b      	str	r3, [r1, #32]
  400e64:	4770      	bx	lr
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  400e66:	4a0d      	ldr	r2, [pc, #52]	; (400e9c <pmc_switch_mainck_to_xtal+0x48>)
  400e68:	6a13      	ldr	r3, [r2, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  400e6a:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
  400e6e:	f023 0303 	bic.w	r3, r3, #3
  400e72:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  400e76:	f043 0301 	orr.w	r3, r3, #1
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
  400e7a:	0209      	lsls	r1, r1, #8
  400e7c:	b289      	uxth	r1, r1
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  400e7e:	430b      	orrs	r3, r1
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  400e80:	6213      	str	r3, [r2, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  400e82:	6e93      	ldr	r3, [r2, #104]	; 0x68
  400e84:	f013 0f01 	tst.w	r3, #1
  400e88:	d0fb      	beq.n	400e82 <pmc_switch_mainck_to_xtal+0x2e>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
  400e8a:	4a04      	ldr	r2, [pc, #16]	; (400e9c <pmc_switch_mainck_to_xtal+0x48>)
  400e8c:	6a13      	ldr	r3, [r2, #32]
  400e8e:	f043 739b 	orr.w	r3, r3, #20316160	; 0x1360000
  400e92:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
  400e96:	6213      	str	r3, [r2, #32]
  400e98:	4770      	bx	lr
  400e9a:	bf00      	nop
  400e9c:	400e0400 	.word	0x400e0400
  400ea0:	fec8fffc 	.word	0xfec8fffc
  400ea4:	01370002 	.word	0x01370002

00400ea8 <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
  400ea8:	4b02      	ldr	r3, [pc, #8]	; (400eb4 <pmc_osc_is_ready_mainck+0xc>)
  400eaa:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  400eac:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
  400eb0:	4770      	bx	lr
  400eb2:	bf00      	nop
  400eb4:	400e0400 	.word	0x400e0400

00400eb8 <pmc_enable_pllack>:
 * \param mula PLLA multiplier.
 * \param pllacount PLLA counter.
 * \param diva Divider.
 */
void pmc_enable_pllack(uint32_t mula, uint32_t pllacount, uint32_t diva)
{
  400eb8:	b410      	push	{r4}
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
  400eba:	4c0c      	ldr	r4, [pc, #48]	; (400eec <pmc_enable_pllack+0x34>)
  400ebc:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
  400ec0:	62a3      	str	r3, [r4, #40]	; 0x28
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_PLLAEN(diva) |
			CKGR_PLLAR_PLLACOUNT(pllacount) | CKGR_PLLAR_MULA(mula);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_DIVA(diva) |
			CKGR_PLLAR_PLLACOUNT(pllacount) | CKGR_PLLAR_MULA(mula);
  400ec2:	4b0b      	ldr	r3, [pc, #44]	; (400ef0 <pmc_enable_pllack+0x38>)
  400ec4:	ea03 4000 	and.w	r0, r3, r0, lsl #16
  400ec8:	f040 5000 	orr.w	r0, r0, #536870912	; 0x20000000

#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_PLLAEN(diva) |
			CKGR_PLLAR_PLLACOUNT(pllacount) | CKGR_PLLAR_MULA(mula);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_DIVA(diva) |
  400ecc:	b2d2      	uxtb	r2, r2
  400ece:	4302      	orrs	r2, r0
			CKGR_PLLAR_PLLACOUNT(pllacount) | CKGR_PLLAR_MULA(mula);
  400ed0:	0209      	lsls	r1, r1, #8
  400ed2:	f401 517c 	and.w	r1, r1, #16128	; 0x3f00
  400ed6:	430a      	orrs	r2, r1

#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_PLLAEN(diva) |
			CKGR_PLLAR_PLLACOUNT(pllacount) | CKGR_PLLAR_MULA(mula);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_DIVA(diva) |
  400ed8:	62a2      	str	r2, [r4, #40]	; 0x28
			CKGR_PLLAR_PLLACOUNT(pllacount) | CKGR_PLLAR_MULA(mula);
#endif
	while ((PMC->PMC_SR & PMC_SR_LOCKA) == 0);
  400eda:	4622      	mov	r2, r4
  400edc:	6e93      	ldr	r3, [r2, #104]	; 0x68
  400ede:	f013 0f02 	tst.w	r3, #2
  400ee2:	d0fb      	beq.n	400edc <pmc_enable_pllack+0x24>
}
  400ee4:	f85d 4b04 	ldr.w	r4, [sp], #4
  400ee8:	4770      	bx	lr
  400eea:	bf00      	nop
  400eec:	400e0400 	.word	0x400e0400
  400ef0:	07ff0000 	.word	0x07ff0000

00400ef4 <pmc_disable_pllbck>:
/**
 * \brief Disable PLLB clock.
 */
void pmc_disable_pllbck(void)
{
	PMC->CKGR_PLLBR = CKGR_PLLBR_MULB(0);
  400ef4:	2200      	movs	r2, #0
  400ef6:	4b01      	ldr	r3, [pc, #4]	; (400efc <pmc_disable_pllbck+0x8>)
  400ef8:	62da      	str	r2, [r3, #44]	; 0x2c
  400efa:	4770      	bx	lr
  400efc:	400e0400 	.word	0x400e0400

00400f00 <pmc_is_locked_pllbck>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllbck(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKB);
  400f00:	4b02      	ldr	r3, [pc, #8]	; (400f0c <pmc_is_locked_pllbck+0xc>)
  400f02:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  400f04:	f000 0004 	and.w	r0, r0, #4
  400f08:	4770      	bx	lr
  400f0a:	bf00      	nop
  400f0c:	400e0400 	.word	0x400e0400

00400f10 <pmc_enable_periph_clk>:
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
  400f10:	2822      	cmp	r0, #34	; 0x22
  400f12:	d81e      	bhi.n	400f52 <pmc_enable_periph_clk+0x42>
		return 1;
	}

	if (ul_id < 32) {
  400f14:	281f      	cmp	r0, #31
  400f16:	d80c      	bhi.n	400f32 <pmc_enable_periph_clk+0x22>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
  400f18:	4b11      	ldr	r3, [pc, #68]	; (400f60 <pmc_enable_periph_clk+0x50>)
  400f1a:	699a      	ldr	r2, [r3, #24]
  400f1c:	2301      	movs	r3, #1
  400f1e:	4083      	lsls	r3, r0
  400f20:	401a      	ands	r2, r3
  400f22:	4293      	cmp	r3, r2
  400f24:	d017      	beq.n	400f56 <pmc_enable_periph_clk+0x46>
			PMC->PMC_PCER0 = 1 << ul_id;
  400f26:	2301      	movs	r3, #1
  400f28:	4083      	lsls	r3, r0
  400f2a:	4a0d      	ldr	r2, [pc, #52]	; (400f60 <pmc_enable_periph_clk+0x50>)
  400f2c:	6113      	str	r3, [r2, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
  400f2e:	2000      	movs	r0, #0
  400f30:	4770      	bx	lr
			PMC->PMC_PCER0 = 1 << ul_id;
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP || SAMG55 || SAMV71 || SAMV70 || SAME70 || SAMS70)
	} else {
		ul_id -= 32;
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
  400f32:	4b0b      	ldr	r3, [pc, #44]	; (400f60 <pmc_enable_periph_clk+0x50>)
  400f34:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
			PMC->PMC_PCER0 = 1 << ul_id;
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP || SAMG55 || SAMV71 || SAMV70 || SAME70 || SAMS70)
	} else {
		ul_id -= 32;
  400f38:	3820      	subs	r0, #32
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
  400f3a:	2301      	movs	r3, #1
  400f3c:	4083      	lsls	r3, r0
  400f3e:	401a      	ands	r2, r3
  400f40:	4293      	cmp	r3, r2
  400f42:	d00a      	beq.n	400f5a <pmc_enable_periph_clk+0x4a>
			PMC->PMC_PCER1 = 1 << ul_id;
  400f44:	2301      	movs	r3, #1
  400f46:	4083      	lsls	r3, r0
  400f48:	4a05      	ldr	r2, [pc, #20]	; (400f60 <pmc_enable_periph_clk+0x50>)
  400f4a:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
		}
#endif
	}

	return 0;
  400f4e:	2000      	movs	r0, #0
  400f50:	4770      	bx	lr
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
		return 1;
  400f52:	2001      	movs	r0, #1
  400f54:	4770      	bx	lr
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
  400f56:	2000      	movs	r0, #0
  400f58:	4770      	bx	lr
  400f5a:	2000      	movs	r0, #0
}
  400f5c:	4770      	bx	lr
  400f5e:	bf00      	nop
  400f60:	400e0400 	.word	0x400e0400

00400f64 <twi_set_speed>:
uint32_t twi_set_speed(Twi *p_twi, uint32_t ul_speed, uint32_t ul_mck)
{
	uint32_t ckdiv = 0;
	uint32_t c_lh_div;

	if (ul_speed > I2C_FAST_MODE_SPEED) {
  400f64:	4b0f      	ldr	r3, [pc, #60]	; (400fa4 <twi_set_speed+0x40>)
  400f66:	4299      	cmp	r1, r3
  400f68:	d819      	bhi.n	400f9e <twi_set_speed+0x3a>
		return FAIL;
	}

	c_lh_div = ul_mck / (ul_speed * TWI_CLK_DIVIDER) - TWI_CLK_CALC_ARGU;
  400f6a:	0049      	lsls	r1, r1, #1
  400f6c:	fbb2 f2f1 	udiv	r2, r2, r1
  400f70:	3a04      	subs	r2, #4

	/* cldiv must fit in 8 bits, ckdiv must fit in 3 bits */
	while ((c_lh_div > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
  400f72:	2aff      	cmp	r2, #255	; 0xff
  400f74:	d907      	bls.n	400f86 <twi_set_speed+0x22>
  400f76:	2300      	movs	r3, #0
		/* Increase clock divider */
		ckdiv++;
  400f78:	3301      	adds	r3, #1
		/* Divide cldiv value */
		c_lh_div /= TWI_CLK_DIVIDER;
  400f7a:	0852      	lsrs	r2, r2, #1
	}

	c_lh_div = ul_mck / (ul_speed * TWI_CLK_DIVIDER) - TWI_CLK_CALC_ARGU;

	/* cldiv must fit in 8 bits, ckdiv must fit in 3 bits */
	while ((c_lh_div > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
  400f7c:	2aff      	cmp	r2, #255	; 0xff
  400f7e:	d903      	bls.n	400f88 <twi_set_speed+0x24>
  400f80:	2b07      	cmp	r3, #7
  400f82:	d1f9      	bne.n	400f78 <twi_set_speed+0x14>
  400f84:	e000      	b.n	400f88 <twi_set_speed+0x24>
 * \retval PASS New speed setting is accepted.
 * \retval FAIL New speed setting is rejected.
 */
uint32_t twi_set_speed(Twi *p_twi, uint32_t ul_speed, uint32_t ul_mck)
{
	uint32_t ckdiv = 0;
  400f86:	2300      	movs	r3, #0
		c_lh_div /= TWI_CLK_DIVIDER;
	}

	/* set clock waveform generator register */
	p_twi->TWI_CWGR =
			TWI_CWGR_CLDIV(c_lh_div) | TWI_CWGR_CHDIV(c_lh_div) |
  400f88:	0211      	lsls	r1, r2, #8
  400f8a:	b289      	uxth	r1, r1
			TWI_CWGR_CKDIV(ckdiv);
  400f8c:	041b      	lsls	r3, r3, #16
  400f8e:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
  400f92:	430b      	orrs	r3, r1
		c_lh_div /= TWI_CLK_DIVIDER;
	}

	/* set clock waveform generator register */
	p_twi->TWI_CWGR =
			TWI_CWGR_CLDIV(c_lh_div) | TWI_CWGR_CHDIV(c_lh_div) |
  400f94:	b2d2      	uxtb	r2, r2
  400f96:	431a      	orrs	r2, r3
		/* Divide cldiv value */
		c_lh_div /= TWI_CLK_DIVIDER;
	}

	/* set clock waveform generator register */
	p_twi->TWI_CWGR =
  400f98:	6102      	str	r2, [r0, #16]
			TWI_CWGR_CLDIV(c_lh_div) | TWI_CWGR_CHDIV(c_lh_div) |
			TWI_CWGR_CKDIV(ckdiv);

	return PASS;
  400f9a:	2000      	movs	r0, #0
  400f9c:	4770      	bx	lr
{
	uint32_t ckdiv = 0;
	uint32_t c_lh_div;

	if (ul_speed > I2C_FAST_MODE_SPEED) {
		return FAIL;
  400f9e:	2001      	movs	r0, #1
	p_twi->TWI_CWGR =
			TWI_CWGR_CLDIV(c_lh_div) | TWI_CWGR_CHDIV(c_lh_div) |
			TWI_CWGR_CKDIV(ckdiv);

	return PASS;
}
  400fa0:	4770      	bx	lr
  400fa2:	bf00      	nop
  400fa4:	00061a80 	.word	0x00061a80

00400fa8 <twi_master_init>:
 * \param p_opt Options for initializing the TWI module (see \ref twi_options_t).
 *
 * \return TWI_SUCCESS if initialization is complete, error code otherwise.
 */
uint32_t twi_master_init(Twi *p_twi, const twi_options_t *p_opt)
{
  400fa8:	b538      	push	{r3, r4, r5, lr}
  400faa:	4604      	mov	r4, r0
  400fac:	460d      	mov	r5, r1
	uint32_t status = TWI_SUCCESS;

	/* Disable TWI interrupts */
	p_twi->TWI_IDR = ~0UL;
  400fae:	f04f 33ff 	mov.w	r3, #4294967295
  400fb2:	6283      	str	r3, [r0, #40]	; 0x28

	/* Dummy read in status register */
	p_twi->TWI_SR;
  400fb4:	6a03      	ldr	r3, [r0, #32]
 * \param p_twi Pointer to a TWI instance.
 */
void twi_reset(Twi *p_twi)
{
	/* Set SWRST bit to reset TWI peripheral */
	p_twi->TWI_CR = TWI_CR_SWRST;
  400fb6:	2380      	movs	r3, #128	; 0x80
  400fb8:	6003      	str	r3, [r0, #0]
	p_twi->TWI_RHR;
  400fba:	6b03      	ldr	r3, [r0, #48]	; 0x30
 * \param p_twi Pointer to a TWI instance.
 */
void twi_enable_master_mode(Twi *p_twi)
{
	/* Set Master Disable bit and Slave Disable bit */
	p_twi->TWI_CR = TWI_CR_MSDIS;
  400fbc:	2308      	movs	r3, #8
  400fbe:	6003      	str	r3, [r0, #0]
	p_twi->TWI_CR = TWI_CR_SVDIS;
  400fc0:	2320      	movs	r3, #32
  400fc2:	6003      	str	r3, [r0, #0]

	/* Set Master Enable bit */
	p_twi->TWI_CR = TWI_CR_MSEN;
  400fc4:	2304      	movs	r3, #4
  400fc6:	6003      	str	r3, [r0, #0]
	twi_reset(p_twi);

	twi_enable_master_mode(p_twi);

	/* Select the speed */
	if (twi_set_speed(p_twi, p_opt->speed, p_opt->master_clk) == FAIL) {
  400fc8:	6849      	ldr	r1, [r1, #4]
  400fca:	682a      	ldr	r2, [r5, #0]
  400fcc:	4b05      	ldr	r3, [pc, #20]	; (400fe4 <twi_master_init+0x3c>)
  400fce:	4798      	blx	r3
  400fd0:	2801      	cmp	r0, #1
  400fd2:	bf14      	ite	ne
  400fd4:	2000      	movne	r0, #0
  400fd6:	2001      	moveq	r0, #1
		/* The desired speed setting is rejected */
		status = TWI_INVALID_ARGUMENT;
	}

	if (p_opt->smbus == 1) {
  400fd8:	7a6b      	ldrb	r3, [r5, #9]
  400fda:	2b01      	cmp	r3, #1
		p_twi->TWI_CR = TWI_CR_QUICK;
  400fdc:	bf04      	itt	eq
  400fde:	2340      	moveq	r3, #64	; 0x40
  400fe0:	6023      	streq	r3, [r4, #0]
	}

	return status;
}
  400fe2:	bd38      	pop	{r3, r4, r5, pc}
  400fe4:	00400f65 	.word	0x00400f65

00400fe8 <twi_master_read>:
 * \param p_packet Packet information and data (see \ref twi_packet_t).
 *
 * \return TWI_SUCCESS if all bytes were read, error code otherwise.
 */
uint32_t twi_master_read(Twi *p_twi, twi_packet_t *p_packet)
{
  400fe8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint32_t status;
	uint32_t cnt = p_packet->length;
  400fec:	68ca      	ldr	r2, [r1, #12]
	uint8_t *buffer = p_packet->buffer;
  400fee:	688d      	ldr	r5, [r1, #8]
	uint8_t stop_sent = 0;
	uint32_t timeout = TWI_TIMEOUT;;
	
	/* Check argument */
	if (cnt == 0) {
  400ff0:	2a00      	cmp	r2, #0
  400ff2:	d048      	beq.n	401086 <twi_master_read+0x9e>
		return TWI_INVALID_ARGUMENT;
	}

	/* Set read mode, slave address and 3 internal address byte lengths */
	p_twi->TWI_MMR = 0;
  400ff4:	2600      	movs	r6, #0
  400ff6:	6046      	str	r6, [r0, #4]
	p_twi->TWI_MMR = TWI_MMR_MREAD | TWI_MMR_DADR(p_packet->chip) |
			((p_packet->addr_length << TWI_MMR_IADRSZ_Pos) &
  400ff8:	684b      	ldr	r3, [r1, #4]
  400ffa:	021b      	lsls	r3, r3, #8
  400ffc:	f403 7340 	and.w	r3, r3, #768	; 0x300
  401000:	f443 5480 	orr.w	r4, r3, #4096	; 0x1000
		return TWI_INVALID_ARGUMENT;
	}

	/* Set read mode, slave address and 3 internal address byte lengths */
	p_twi->TWI_MMR = 0;
	p_twi->TWI_MMR = TWI_MMR_MREAD | TWI_MMR_DADR(p_packet->chip) |
  401004:	7c0b      	ldrb	r3, [r1, #16]
  401006:	041b      	lsls	r3, r3, #16
  401008:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
  40100c:	4323      	orrs	r3, r4
  40100e:	6043      	str	r3, [r0, #4]
			((p_packet->addr_length << TWI_MMR_IADRSZ_Pos) &
			TWI_MMR_IADRSZ_Msk);

	/* Set internal address for remote chip */
	p_twi->TWI_IADR = 0;
  401010:	60c6      	str	r6, [r0, #12]
	p_twi->TWI_IADR = twi_mk_addr(p_packet->addr, p_packet->addr_length);
  401012:	684c      	ldr	r4, [r1, #4]
 */
static uint32_t twi_mk_addr(const uint8_t *addr, int len)
{
	uint32_t val;

	if (len == 0)
  401014:	b15c      	cbz	r4, 40102e <twi_master_read+0x46>
		return 0;

	val = addr[0];
  401016:	780b      	ldrb	r3, [r1, #0]
	if (len > 1) {
  401018:	2c01      	cmp	r4, #1
		val <<= 8;
		val |= addr[1];
  40101a:	bfc4      	itt	gt
  40101c:	784e      	ldrbgt	r6, [r1, #1]
  40101e:	ea46 2303 	orrgt.w	r3, r6, r3, lsl #8
	}
	if (len > 2) {
  401022:	2c02      	cmp	r4, #2
  401024:	dd04      	ble.n	401030 <twi_master_read+0x48>
		val <<= 8;
		val |= addr[2];
  401026:	7889      	ldrb	r1, [r1, #2]
  401028:	ea41 2303 	orr.w	r3, r1, r3, lsl #8
  40102c:	e000      	b.n	401030 <twi_master_read+0x48>
static uint32_t twi_mk_addr(const uint8_t *addr, int len)
{
	uint32_t val;

	if (len == 0)
		return 0;
  40102e:	2300      	movs	r3, #0
			((p_packet->addr_length << TWI_MMR_IADRSZ_Pos) &
			TWI_MMR_IADRSZ_Msk);

	/* Set internal address for remote chip */
	p_twi->TWI_IADR = 0;
	p_twi->TWI_IADR = twi_mk_addr(p_packet->addr, p_packet->addr_length);
  401030:	60c3      	str	r3, [r0, #12]

	/* Send a START condition */
	if (cnt == 1) {
  401032:	2a01      	cmp	r2, #1
  401034:	d103      	bne.n	40103e <twi_master_read+0x56>
		p_twi->TWI_CR = TWI_CR_START | TWI_CR_STOP;
  401036:	2303      	movs	r3, #3
  401038:	6003      	str	r3, [r0, #0]
		stop_sent = 1;
  40103a:	2701      	movs	r7, #1
  40103c:	e02f      	b.n	40109e <twi_master_read+0xb6>
	} else {
		p_twi->TWI_CR = TWI_CR_START;
  40103e:	2301      	movs	r3, #1
  401040:	6003      	str	r3, [r0, #0]
		stop_sent = 0;
  401042:	2700      	movs	r7, #0
  401044:	e02b      	b.n	40109e <twi_master_read+0xb6>
		if (cnt == 1  && !stop_sent) {
			p_twi->TWI_CR = TWI_CR_STOP;
			stop_sent = 1;
		}

		if (!(status & TWI_SR_RXRDY)) {
  401046:	4621      	mov	r1, r4
		p_twi->TWI_CR = TWI_CR_START;
		stop_sent = 0;
	}

	while (cnt > 0) {
		status = p_twi->TWI_SR;
  401048:	6a03      	ldr	r3, [r0, #32]
		if (status & TWI_SR_NACK) {
  40104a:	f413 7f80 	tst.w	r3, #256	; 0x100
  40104e:	d11d      	bne.n	40108c <twi_master_read+0xa4>
			return TWI_RECEIVE_NACK;
		}

		if (!timeout--) {
  401050:	1e4c      	subs	r4, r1, #1
  401052:	b1f1      	cbz	r1, 401092 <twi_master_read+0xaa>
			return TWI_ERROR_TIMEOUT;
		}
				
		/* Last byte ? */
		if (cnt == 1  && !stop_sent) {
  401054:	2a01      	cmp	r2, #1
  401056:	d104      	bne.n	401062 <twi_master_read+0x7a>
  401058:	bb77      	cbnz	r7, 4010b8 <twi_master_read+0xd0>
			p_twi->TWI_CR = TWI_CR_STOP;
  40105a:	f8c0 8000 	str.w	r8, [r0]
			stop_sent = 1;
  40105e:	4667      	mov	r7, ip
  401060:	e02a      	b.n	4010b8 <twi_master_read+0xd0>
		}

		if (!(status & TWI_SR_RXRDY)) {
  401062:	f013 0f02 	tst.w	r3, #2
  401066:	d005      	beq.n	401074 <twi_master_read+0x8c>
			continue;
		}
		*buffer++ = p_twi->TWI_RHR;
  401068:	6b03      	ldr	r3, [r0, #48]	; 0x30
  40106a:	702b      	strb	r3, [r5, #0]

		cnt--;
  40106c:	3a01      	subs	r2, #1
		}

		if (!(status & TWI_SR_RXRDY)) {
			continue;
		}
		*buffer++ = p_twi->TWI_RHR;
  40106e:	3501      	adds	r5, #1

		cnt--;
		timeout = TWI_TIMEOUT;
  401070:	4631      	mov	r1, r6
  401072:	e000      	b.n	401076 <twi_master_read+0x8e>
  401074:	4621      	mov	r1, r4
	} else {
		p_twi->TWI_CR = TWI_CR_START;
		stop_sent = 0;
	}

	while (cnt > 0) {
  401076:	2a00      	cmp	r2, #0
  401078:	d1e6      	bne.n	401048 <twi_master_read+0x60>

		cnt--;
		timeout = TWI_TIMEOUT;
	}

	while (!(p_twi->TWI_SR & TWI_SR_TXCOMP)) {
  40107a:	6a03      	ldr	r3, [r0, #32]
  40107c:	f013 0f01 	tst.w	r3, #1
  401080:	d0fb      	beq.n	40107a <twi_master_read+0x92>
	}

	p_twi->TWI_SR;
  401082:	6a03      	ldr	r3, [r0, #32]

	return TWI_SUCCESS;
  401084:	e01c      	b.n	4010c0 <twi_master_read+0xd8>
	uint8_t stop_sent = 0;
	uint32_t timeout = TWI_TIMEOUT;;
	
	/* Check argument */
	if (cnt == 0) {
		return TWI_INVALID_ARGUMENT;
  401086:	f04f 0e01 	mov.w	lr, #1
  40108a:	e019      	b.n	4010c0 <twi_master_read+0xd8>
	}

	while (cnt > 0) {
		status = p_twi->TWI_SR;
		if (status & TWI_SR_NACK) {
			return TWI_RECEIVE_NACK;
  40108c:	f04f 0e05 	mov.w	lr, #5
  401090:	e016      	b.n	4010c0 <twi_master_read+0xd8>
		}

		if (!timeout--) {
			return TWI_ERROR_TIMEOUT;
  401092:	f04f 0e09 	mov.w	lr, #9
  401096:	e013      	b.n	4010c0 <twi_master_read+0xd8>
	}

	while (cnt > 0) {
		status = p_twi->TWI_SR;
		if (status & TWI_SR_NACK) {
			return TWI_RECEIVE_NACK;
  401098:	f04f 0e05 	mov.w	lr, #5
  40109c:	e010      	b.n	4010c0 <twi_master_read+0xd8>
		p_twi->TWI_CR = TWI_CR_START;
		stop_sent = 0;
	}

	while (cnt > 0) {
		status = p_twi->TWI_SR;
  40109e:	6a03      	ldr	r3, [r0, #32]
		if (status & TWI_SR_NACK) {
  4010a0:	f413 7e80 	ands.w	lr, r3, #256	; 0x100
  4010a4:	d1f8      	bne.n	401098 <twi_master_read+0xb0>
  4010a6:	f643 2497 	movw	r4, #14999	; 0x3a97
			continue;
		}
		*buffer++ = p_twi->TWI_RHR;

		cnt--;
		timeout = TWI_TIMEOUT;
  4010aa:	f643 2698 	movw	r6, #15000	; 0x3a98
			return TWI_ERROR_TIMEOUT;
		}
				
		/* Last byte ? */
		if (cnt == 1  && !stop_sent) {
			p_twi->TWI_CR = TWI_CR_STOP;
  4010ae:	f04f 0802 	mov.w	r8, #2
			stop_sent = 1;
  4010b2:	f04f 0c01 	mov.w	ip, #1
  4010b6:	e7cd      	b.n	401054 <twi_master_read+0x6c>
		}

		if (!(status & TWI_SR_RXRDY)) {
  4010b8:	f013 0f02 	tst.w	r3, #2
  4010bc:	d0c3      	beq.n	401046 <twi_master_read+0x5e>
  4010be:	e7d3      	b.n	401068 <twi_master_read+0x80>
	}

	p_twi->TWI_SR;

	return TWI_SUCCESS;
}
  4010c0:	4670      	mov	r0, lr
  4010c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4010c6:	bf00      	nop

004010c8 <twi_master_write>:
 * \param p_packet Packet information and data (see \ref twi_packet_t).
 *
 * \return TWI_SUCCESS if all bytes were written, error code otherwise.
 */
uint32_t twi_master_write(Twi *p_twi, twi_packet_t *p_packet)
{
  4010c8:	4603      	mov	r3, r0
	uint32_t status;
	uint32_t cnt = p_packet->length;
  4010ca:	68ca      	ldr	r2, [r1, #12]
	uint8_t *buffer = p_packet->buffer;
  4010cc:	6888      	ldr	r0, [r1, #8]

	/* Check argument */
	if (cnt == 0) {
  4010ce:	2a00      	cmp	r2, #0
  4010d0:	d040      	beq.n	401154 <twi_master_write+0x8c>
 * \param p_packet Packet information and data (see \ref twi_packet_t).
 *
 * \return TWI_SUCCESS if all bytes were written, error code otherwise.
 */
uint32_t twi_master_write(Twi *p_twi, twi_packet_t *p_packet)
{
  4010d2:	b470      	push	{r4, r5, r6}
	if (cnt == 0) {
		return TWI_INVALID_ARGUMENT;
	}

	/* Set write mode, slave address and 3 internal address byte lengths */
	p_twi->TWI_MMR = 0;
  4010d4:	2600      	movs	r6, #0
  4010d6:	605e      	str	r6, [r3, #4]
	p_twi->TWI_MMR = TWI_MMR_DADR(p_packet->chip) |
  4010d8:	7c0c      	ldrb	r4, [r1, #16]
  4010da:	0424      	lsls	r4, r4, #16
  4010dc:	f404 05fe 	and.w	r5, r4, #8323072	; 0x7f0000
			((p_packet->addr_length << TWI_MMR_IADRSZ_Pos) &
  4010e0:	684c      	ldr	r4, [r1, #4]
  4010e2:	0224      	lsls	r4, r4, #8
  4010e4:	f404 7440 	and.w	r4, r4, #768	; 0x300
		return TWI_INVALID_ARGUMENT;
	}

	/* Set write mode, slave address and 3 internal address byte lengths */
	p_twi->TWI_MMR = 0;
	p_twi->TWI_MMR = TWI_MMR_DADR(p_packet->chip) |
  4010e8:	432c      	orrs	r4, r5
  4010ea:	605c      	str	r4, [r3, #4]
			((p_packet->addr_length << TWI_MMR_IADRSZ_Pos) &
			TWI_MMR_IADRSZ_Msk);

	/* Set internal address for remote chip */
	p_twi->TWI_IADR = 0;
  4010ec:	60de      	str	r6, [r3, #12]
	p_twi->TWI_IADR = twi_mk_addr(p_packet->addr, p_packet->addr_length);
  4010ee:	684d      	ldr	r5, [r1, #4]
 */
static uint32_t twi_mk_addr(const uint8_t *addr, int len)
{
	uint32_t val;

	if (len == 0)
  4010f0:	b15d      	cbz	r5, 40110a <twi_master_write+0x42>
		return 0;

	val = addr[0];
  4010f2:	780c      	ldrb	r4, [r1, #0]
	if (len > 1) {
  4010f4:	2d01      	cmp	r5, #1
		val <<= 8;
		val |= addr[1];
  4010f6:	bfc4      	itt	gt
  4010f8:	784e      	ldrbgt	r6, [r1, #1]
  4010fa:	ea46 2404 	orrgt.w	r4, r6, r4, lsl #8
	}
	if (len > 2) {
  4010fe:	2d02      	cmp	r5, #2
  401100:	dd04      	ble.n	40110c <twi_master_write+0x44>
		val <<= 8;
		val |= addr[2];
  401102:	7889      	ldrb	r1, [r1, #2]
  401104:	ea41 2404 	orr.w	r4, r1, r4, lsl #8
  401108:	e000      	b.n	40110c <twi_master_write+0x44>
static uint32_t twi_mk_addr(const uint8_t *addr, int len)
{
	uint32_t val;

	if (len == 0)
		return 0;
  40110a:	2400      	movs	r4, #0
			((p_packet->addr_length << TWI_MMR_IADRSZ_Pos) &
			TWI_MMR_IADRSZ_Msk);

	/* Set internal address for remote chip */
	p_twi->TWI_IADR = 0;
	p_twi->TWI_IADR = twi_mk_addr(p_packet->addr, p_packet->addr_length);
  40110c:	60dc      	str	r4, [r3, #12]
  40110e:	e00b      	b.n	401128 <twi_master_write+0x60>

	/* Send all bytes */
	while (cnt > 0) {
		status = p_twi->TWI_SR;
  401110:	6a19      	ldr	r1, [r3, #32]
		if (status & TWI_SR_NACK) {
  401112:	f411 7f80 	tst.w	r1, #256	; 0x100
  401116:	d11f      	bne.n	401158 <twi_master_write+0x90>
			return TWI_RECEIVE_NACK;
		}

		if (!(status & TWI_SR_TXRDY)) {
  401118:	f011 0f04 	tst.w	r1, #4
  40111c:	d0f8      	beq.n	401110 <twi_master_write+0x48>
			continue;
		}
		p_twi->TWI_THR = *buffer++;
  40111e:	f810 1b01 	ldrb.w	r1, [r0], #1
  401122:	6359      	str	r1, [r3, #52]	; 0x34
	/* Set internal address for remote chip */
	p_twi->TWI_IADR = 0;
	p_twi->TWI_IADR = twi_mk_addr(p_packet->addr, p_packet->addr_length);

	/* Send all bytes */
	while (cnt > 0) {
  401124:	3a01      	subs	r2, #1
  401126:	d007      	beq.n	401138 <twi_master_write+0x70>
		status = p_twi->TWI_SR;
  401128:	6a19      	ldr	r1, [r3, #32]
		if (status & TWI_SR_NACK) {
  40112a:	f411 7f80 	tst.w	r1, #256	; 0x100
  40112e:	d115      	bne.n	40115c <twi_master_write+0x94>
			return TWI_RECEIVE_NACK;
		}

		if (!(status & TWI_SR_TXRDY)) {
  401130:	f011 0f04 	tst.w	r1, #4
  401134:	d0ec      	beq.n	401110 <twi_master_write+0x48>
  401136:	e7f2      	b.n	40111e <twi_master_write+0x56>

		cnt--;
	}

	while (1) {
		status = p_twi->TWI_SR;
  401138:	6a1a      	ldr	r2, [r3, #32]
		if (status & TWI_SR_NACK) {
  40113a:	f412 7080 	ands.w	r0, r2, #256	; 0x100
  40113e:	d10f      	bne.n	401160 <twi_master_write+0x98>
			return TWI_RECEIVE_NACK;
		}

		if (status & TWI_SR_TXRDY) {
  401140:	f012 0f04 	tst.w	r2, #4
  401144:	d0f8      	beq.n	401138 <twi_master_write+0x70>
			break;
		}
	}

	p_twi->TWI_CR = TWI_CR_STOP;
  401146:	2202      	movs	r2, #2
  401148:	601a      	str	r2, [r3, #0]

	while (!(p_twi->TWI_SR & TWI_SR_TXCOMP)) {
  40114a:	6a1a      	ldr	r2, [r3, #32]
  40114c:	f012 0f01 	tst.w	r2, #1
  401150:	d0fb      	beq.n	40114a <twi_master_write+0x82>
  401152:	e006      	b.n	401162 <twi_master_write+0x9a>
	uint32_t cnt = p_packet->length;
	uint8_t *buffer = p_packet->buffer;

	/* Check argument */
	if (cnt == 0) {
		return TWI_INVALID_ARGUMENT;
  401154:	2001      	movs	r0, #1

	while (!(p_twi->TWI_SR & TWI_SR_TXCOMP)) {
	}

	return TWI_SUCCESS;
}
  401156:	4770      	bx	lr

	/* Send all bytes */
	while (cnt > 0) {
		status = p_twi->TWI_SR;
		if (status & TWI_SR_NACK) {
			return TWI_RECEIVE_NACK;
  401158:	2005      	movs	r0, #5
  40115a:	e002      	b.n	401162 <twi_master_write+0x9a>
  40115c:	2005      	movs	r0, #5
  40115e:	e000      	b.n	401162 <twi_master_write+0x9a>
	}

	while (1) {
		status = p_twi->TWI_SR;
		if (status & TWI_SR_NACK) {
			return TWI_RECEIVE_NACK;
  401160:	2005      	movs	r0, #5

	while (!(p_twi->TWI_SR & TWI_SR_TXCOMP)) {
	}

	return TWI_SUCCESS;
}
  401162:	bc70      	pop	{r4, r5, r6}
  401164:	4770      	bx	lr
  401166:	bf00      	nop

00401168 <Dummy_Handler>:
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
	while (1) {
	}
  401168:	e7fe      	b.n	401168 <Dummy_Handler>
  40116a:	bf00      	nop

0040116c <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
  40116c:	b508      	push	{r3, lr}

	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc > pDest) {
  40116e:	4b20      	ldr	r3, [pc, #128]	; (4011f0 <Reset_Handler+0x84>)
  401170:	4a20      	ldr	r2, [pc, #128]	; (4011f4 <Reset_Handler+0x88>)
  401172:	429a      	cmp	r2, r3
  401174:	d913      	bls.n	40119e <Reset_Handler+0x32>
		for (; pDest < &_erelocate;) {
  401176:	4b20      	ldr	r3, [pc, #128]	; (4011f8 <Reset_Handler+0x8c>)
  401178:	4a1d      	ldr	r2, [pc, #116]	; (4011f0 <Reset_Handler+0x84>)
  40117a:	429a      	cmp	r2, r3
  40117c:	d21f      	bcs.n	4011be <Reset_Handler+0x52>
  40117e:	4611      	mov	r1, r2
  401180:	3204      	adds	r2, #4
  401182:	3303      	adds	r3, #3
  401184:	1a9b      	subs	r3, r3, r2
  401186:	f023 0303 	bic.w	r3, r3, #3
  40118a:	3304      	adds	r3, #4
  40118c:	4a19      	ldr	r2, [pc, #100]	; (4011f4 <Reset_Handler+0x88>)
  40118e:	4413      	add	r3, r2
			*pDest++ = *pSrc++;
  401190:	f852 0b04 	ldr.w	r0, [r2], #4
  401194:	f841 0b04 	str.w	r0, [r1], #4
	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc > pDest) {
		for (; pDest < &_erelocate;) {
  401198:	429a      	cmp	r2, r3
  40119a:	d1f9      	bne.n	401190 <Reset_Handler+0x24>
  40119c:	e00f      	b.n	4011be <Reset_Handler+0x52>
			*pDest++ = *pSrc++;
		}
	} else if (pSrc < pDest) {
  40119e:	4b14      	ldr	r3, [pc, #80]	; (4011f0 <Reset_Handler+0x84>)
  4011a0:	4a14      	ldr	r2, [pc, #80]	; (4011f4 <Reset_Handler+0x88>)
  4011a2:	429a      	cmp	r2, r3
  4011a4:	d20b      	bcs.n	4011be <Reset_Handler+0x52>
		uint32_t nb_bytes = (uint32_t)&_erelocate - (uint32_t)&_srelocate;
  4011a6:	4b14      	ldr	r3, [pc, #80]	; (4011f8 <Reset_Handler+0x8c>)
  4011a8:	4a11      	ldr	r2, [pc, #68]	; (4011f0 <Reset_Handler+0x84>)
  4011aa:	1a9a      	subs	r2, r3, r2
  4011ac:	4813      	ldr	r0, [pc, #76]	; (4011fc <Reset_Handler+0x90>)
		pSrc = (uint32_t*)((uint32_t)pSrc + nb_bytes) - 1;
  4011ae:	1881      	adds	r1, r0, r2
		pDest = (uint32_t*)((uint32_t)pDest + nb_bytes) - 1;
		for (;nb_bytes;nb_bytes -= 4) {
  4011b0:	b12a      	cbz	r2, 4011be <Reset_Handler+0x52>
			*pDest-- = *pSrc--;
  4011b2:	f851 2904 	ldr.w	r2, [r1], #-4
  4011b6:	f843 2d04 	str.w	r2, [r3, #-4]!
		}
	} else if (pSrc < pDest) {
		uint32_t nb_bytes = (uint32_t)&_erelocate - (uint32_t)&_srelocate;
		pSrc = (uint32_t*)((uint32_t)pSrc + nb_bytes) - 1;
		pDest = (uint32_t*)((uint32_t)pDest + nb_bytes) - 1;
		for (;nb_bytes;nb_bytes -= 4) {
  4011ba:	4281      	cmp	r1, r0
  4011bc:	d1f9      	bne.n	4011b2 <Reset_Handler+0x46>

    No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
  4011be:	bf00      	nop
		}
	}
	__NOP();

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
  4011c0:	4b0f      	ldr	r3, [pc, #60]	; (401200 <Reset_Handler+0x94>)
  4011c2:	4a10      	ldr	r2, [pc, #64]	; (401204 <Reset_Handler+0x98>)
  4011c4:	429a      	cmp	r2, r3
  4011c6:	d20b      	bcs.n	4011e0 <Reset_Handler+0x74>
  4011c8:	1d13      	adds	r3, r2, #4
  4011ca:	4a0f      	ldr	r2, [pc, #60]	; (401208 <Reset_Handler+0x9c>)
  4011cc:	1ad2      	subs	r2, r2, r3
  4011ce:	f022 0203 	bic.w	r2, r2, #3
  4011d2:	441a      	add	r2, r3
  4011d4:	3b04      	subs	r3, #4
		*pDest++ = 0;
  4011d6:	2100      	movs	r1, #0
  4011d8:	f843 1b04 	str.w	r1, [r3], #4
		}
	}
	__NOP();

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
  4011dc:	4293      	cmp	r3, r2
  4011de:	d1fb      	bne.n	4011d8 <Reset_Handler+0x6c>
		*pDest++ = 0;
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) & _sfixed;
	SCB->VTOR = ((uint32_t) pSrc);
  4011e0:	4b0a      	ldr	r3, [pc, #40]	; (40120c <Reset_Handler+0xa0>)
  4011e2:	4a0b      	ldr	r2, [pc, #44]	; (401210 <Reset_Handler+0xa4>)
  4011e4:	609a      	str	r2, [r3, #8]

	/* Initialize the C library */
	__libc_init_array();
  4011e6:	4b0b      	ldr	r3, [pc, #44]	; (401214 <Reset_Handler+0xa8>)
  4011e8:	4798      	blx	r3

	/* Branch to main function */
	main();
  4011ea:	4b0b      	ldr	r3, [pc, #44]	; (401218 <Reset_Handler+0xac>)
  4011ec:	4798      	blx	r3

	/* Infinite loop */
	while (1);
  4011ee:	e7fe      	b.n	4011ee <Reset_Handler+0x82>
  4011f0:	20000000 	.word	0x20000000
  4011f4:	00410054 	.word	0x00410054
  4011f8:	200008b4 	.word	0x200008b4
  4011fc:	00410050 	.word	0x00410050
  401200:	20000d70 	.word	0x20000d70
  401204:	200008b4 	.word	0x200008b4
  401208:	20000d73 	.word	0x20000d73
  40120c:	e000ed00 	.word	0xe000ed00
  401210:	00400000 	.word	0x00400000
  401214:	00406cd9 	.word	0x00406cd9
  401218:	00405cd1 	.word	0x00405cd1

0040121c <SystemCoreClockUpdate>:
 * \brief Get Core Clock Frequency.
 */
void SystemCoreClockUpdate( void )
{
	/* Determine clock frequency according to clock register values */
	switch ( PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk ) {
  40121c:	4b3d      	ldr	r3, [pc, #244]	; (401314 <SystemCoreClockUpdate+0xf8>)
  40121e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  401220:	f003 0303 	and.w	r3, r3, #3
  401224:	2b03      	cmp	r3, #3
  401226:	d85d      	bhi.n	4012e4 <SystemCoreClockUpdate+0xc8>
  401228:	e8df f003 	tbb	[pc, r3]
  40122c:	2b2b0e02 	.word	0x2b2b0e02
	case PMC_MCKR_CSS_SLOW_CLK: /* Slow clock */
			if ( SUPC->SUPC_SR & SUPC_SR_OSCSEL ) {
  401230:	4b39      	ldr	r3, [pc, #228]	; (401318 <SystemCoreClockUpdate+0xfc>)
  401232:	695b      	ldr	r3, [r3, #20]
  401234:	f013 0f80 	tst.w	r3, #128	; 0x80
				SystemCoreClock = CHIP_FREQ_XTAL_32K;
  401238:	bf14      	ite	ne
  40123a:	f44f 4200 	movne.w	r2, #32768	; 0x8000
			} else {
				SystemCoreClock = CHIP_FREQ_SLCK_RC;
  40123e:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
  401242:	4b36      	ldr	r3, [pc, #216]	; (40131c <SystemCoreClockUpdate+0x100>)
  401244:	601a      	str	r2, [r3, #0]
  401246:	e04d      	b.n	4012e4 <SystemCoreClockUpdate+0xc8>
			}
		break;
		
	case PMC_MCKR_CSS_MAIN_CLK: /* Main clock */
		if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL ) {
  401248:	4b32      	ldr	r3, [pc, #200]	; (401314 <SystemCoreClockUpdate+0xf8>)
  40124a:	6a1b      	ldr	r3, [r3, #32]
  40124c:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  401250:	d003      	beq.n	40125a <SystemCoreClockUpdate+0x3e>
			SystemCoreClock = CHIP_FREQ_XTAL;
  401252:	4a33      	ldr	r2, [pc, #204]	; (401320 <SystemCoreClockUpdate+0x104>)
  401254:	4b31      	ldr	r3, [pc, #196]	; (40131c <SystemCoreClockUpdate+0x100>)
  401256:	601a      	str	r2, [r3, #0]
  401258:	e044      	b.n	4012e4 <SystemCoreClockUpdate+0xc8>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  40125a:	4a32      	ldr	r2, [pc, #200]	; (401324 <SystemCoreClockUpdate+0x108>)
  40125c:	4b2f      	ldr	r3, [pc, #188]	; (40131c <SystemCoreClockUpdate+0x100>)
  40125e:	601a      	str	r2, [r3, #0]
			
			switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk ) {
  401260:	4b2c      	ldr	r3, [pc, #176]	; (401314 <SystemCoreClockUpdate+0xf8>)
  401262:	6a1b      	ldr	r3, [r3, #32]
  401264:	f003 0370 	and.w	r3, r3, #112	; 0x70
  401268:	2b10      	cmp	r3, #16
  40126a:	d002      	beq.n	401272 <SystemCoreClockUpdate+0x56>
  40126c:	2b20      	cmp	r3, #32
  40126e:	d004      	beq.n	40127a <SystemCoreClockUpdate+0x5e>
  401270:	e038      	b.n	4012e4 <SystemCoreClockUpdate+0xc8>
			case CKGR_MOR_MOSCRCF_4_MHz:
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
			break;
			
			case CKGR_MOR_MOSCRCF_8_MHz:
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_8MHZ;
  401272:	4a2d      	ldr	r2, [pc, #180]	; (401328 <SystemCoreClockUpdate+0x10c>)
  401274:	4b29      	ldr	r3, [pc, #164]	; (40131c <SystemCoreClockUpdate+0x100>)
  401276:	601a      	str	r2, [r3, #0]
			break;
  401278:	e034      	b.n	4012e4 <SystemCoreClockUpdate+0xc8>
			
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_12MHZ;
  40127a:	4a29      	ldr	r2, [pc, #164]	; (401320 <SystemCoreClockUpdate+0x104>)
  40127c:	4b27      	ldr	r3, [pc, #156]	; (40131c <SystemCoreClockUpdate+0x100>)
  40127e:	601a      	str	r2, [r3, #0]
			break;
  401280:	e030      	b.n	4012e4 <SystemCoreClockUpdate+0xc8>
		}
		break;
		
	case PMC_MCKR_CSS_PLLA_CLK:	/* PLLA clock */
	case PMC_MCKR_CSS_PLLB_CLK:	/* PLLB clock */
			if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL ) {
  401282:	4b24      	ldr	r3, [pc, #144]	; (401314 <SystemCoreClockUpdate+0xf8>)
  401284:	6a1b      	ldr	r3, [r3, #32]
  401286:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  40128a:	d003      	beq.n	401294 <SystemCoreClockUpdate+0x78>
				SystemCoreClock = CHIP_FREQ_XTAL;
  40128c:	4a24      	ldr	r2, [pc, #144]	; (401320 <SystemCoreClockUpdate+0x104>)
  40128e:	4b23      	ldr	r3, [pc, #140]	; (40131c <SystemCoreClockUpdate+0x100>)
  401290:	601a      	str	r2, [r3, #0]
  401292:	e012      	b.n	4012ba <SystemCoreClockUpdate+0x9e>
			} else {
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  401294:	4a23      	ldr	r2, [pc, #140]	; (401324 <SystemCoreClockUpdate+0x108>)
  401296:	4b21      	ldr	r3, [pc, #132]	; (40131c <SystemCoreClockUpdate+0x100>)
  401298:	601a      	str	r2, [r3, #0]
				
				switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk ) {
  40129a:	4b1e      	ldr	r3, [pc, #120]	; (401314 <SystemCoreClockUpdate+0xf8>)
  40129c:	6a1b      	ldr	r3, [r3, #32]
  40129e:	f003 0370 	and.w	r3, r3, #112	; 0x70
  4012a2:	2b10      	cmp	r3, #16
  4012a4:	d002      	beq.n	4012ac <SystemCoreClockUpdate+0x90>
  4012a6:	2b20      	cmp	r3, #32
  4012a8:	d004      	beq.n	4012b4 <SystemCoreClockUpdate+0x98>
  4012aa:	e006      	b.n	4012ba <SystemCoreClockUpdate+0x9e>
				case CKGR_MOR_MOSCRCF_4_MHz:
					SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
					break;
				
				case CKGR_MOR_MOSCRCF_8_MHz:
					SystemCoreClock = CHIP_FREQ_MAINCK_RC_8MHZ;
  4012ac:	4a1e      	ldr	r2, [pc, #120]	; (401328 <SystemCoreClockUpdate+0x10c>)
  4012ae:	4b1b      	ldr	r3, [pc, #108]	; (40131c <SystemCoreClockUpdate+0x100>)
  4012b0:	601a      	str	r2, [r3, #0]
					break;
  4012b2:	e002      	b.n	4012ba <SystemCoreClockUpdate+0x9e>
				
				case CKGR_MOR_MOSCRCF_12_MHz:
					SystemCoreClock = CHIP_FREQ_MAINCK_RC_12MHZ;
  4012b4:	4a1a      	ldr	r2, [pc, #104]	; (401320 <SystemCoreClockUpdate+0x104>)
  4012b6:	4b19      	ldr	r3, [pc, #100]	; (40131c <SystemCoreClockUpdate+0x100>)
  4012b8:	601a      	str	r2, [r3, #0]
				default:
					break;
				}
			}
			
			if ( (uint32_t)(PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) ==
  4012ba:	4b16      	ldr	r3, [pc, #88]	; (401314 <SystemCoreClockUpdate+0xf8>)
  4012bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4012be:	f003 0303 	and.w	r3, r3, #3
  4012c2:	2b02      	cmp	r3, #2
					PMC_MCKR_CSS_PLLA_CLK ) {
				SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk)
  4012c4:	4a13      	ldr	r2, [pc, #76]	; (401314 <SystemCoreClockUpdate+0xf8>)
  4012c6:	bf07      	ittee	eq
  4012c8:	6a93      	ldreq	r3, [r2, #40]	; 0x28
						>> CKGR_PLLAR_MULA_Pos) + 1U);
				SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk)
  4012ca:	6a92      	ldreq	r2, [r2, #40]	; 0x28
						>> CKGR_PLLAR_DIVA_Pos));
			} else {
				SystemCoreClock *= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_MULB_Msk)
  4012cc:	6ad3      	ldrne	r3, [r2, #44]	; 0x2c
						>> CKGR_PLLBR_MULB_Pos) + 1U);
				SystemCoreClock /= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_DIVB_Msk)
  4012ce:	6ad2      	ldrne	r2, [r2, #44]	; 0x2c
  4012d0:	4812      	ldr	r0, [pc, #72]	; (40131c <SystemCoreClockUpdate+0x100>)
						>> CKGR_PLLAR_MULA_Pos) + 1U);
				SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk)
						>> CKGR_PLLAR_DIVA_Pos));
			} else {
				SystemCoreClock *= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_MULB_Msk)
						>> CKGR_PLLBR_MULB_Pos) + 1U);
  4012d2:	f3c3 410a 	ubfx	r1, r3, #16, #11
				SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk)
						>> CKGR_PLLAR_MULA_Pos) + 1U);
				SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk)
						>> CKGR_PLLAR_DIVA_Pos));
			} else {
				SystemCoreClock *= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_MULB_Msk)
  4012d6:	6803      	ldr	r3, [r0, #0]
  4012d8:	fb01 3303 	mla	r3, r1, r3, r3
						>> CKGR_PLLBR_MULB_Pos) + 1U);
				SystemCoreClock /= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_DIVB_Msk)
						>> CKGR_PLLBR_DIVB_Pos));
  4012dc:	b2d2      	uxtb	r2, r2
				SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk)
						>> CKGR_PLLAR_DIVA_Pos));
			} else {
				SystemCoreClock *= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_MULB_Msk)
						>> CKGR_PLLBR_MULB_Pos) + 1U);
				SystemCoreClock /= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_DIVB_Msk)
  4012de:	fbb3 f3f2 	udiv	r3, r3, r2
  4012e2:	6003      	str	r3, [r0, #0]
		
	default:
		break;
	}

	if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 ) {
  4012e4:	4b0b      	ldr	r3, [pc, #44]	; (401314 <SystemCoreClockUpdate+0xf8>)
  4012e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4012e8:	f003 0370 	and.w	r3, r3, #112	; 0x70
  4012ec:	2b70      	cmp	r3, #112	; 0x70
  4012ee:	d107      	bne.n	401300 <SystemCoreClockUpdate+0xe4>
		SystemCoreClock /= 3U;
  4012f0:	4a0a      	ldr	r2, [pc, #40]	; (40131c <SystemCoreClockUpdate+0x100>)
  4012f2:	6813      	ldr	r3, [r2, #0]
  4012f4:	490d      	ldr	r1, [pc, #52]	; (40132c <SystemCoreClockUpdate+0x110>)
  4012f6:	fba1 1303 	umull	r1, r3, r1, r3
  4012fa:	085b      	lsrs	r3, r3, #1
  4012fc:	6013      	str	r3, [r2, #0]
  4012fe:	4770      	bx	lr
	} else {
		SystemCoreClock >>=
			((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  401300:	4b04      	ldr	r3, [pc, #16]	; (401314 <SystemCoreClockUpdate+0xf8>)
  401302:	6b1a      	ldr	r2, [r3, #48]	; 0x30
	}

	if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 ) {
		SystemCoreClock /= 3U;
	} else {
		SystemCoreClock >>=
  401304:	4905      	ldr	r1, [pc, #20]	; (40131c <SystemCoreClockUpdate+0x100>)
			((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  401306:	f3c2 1202 	ubfx	r2, r2, #4, #3
	}

	if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 ) {
		SystemCoreClock /= 3U;
	} else {
		SystemCoreClock >>=
  40130a:	680b      	ldr	r3, [r1, #0]
  40130c:	40d3      	lsrs	r3, r2
  40130e:	600b      	str	r3, [r1, #0]
  401310:	4770      	bx	lr
  401312:	bf00      	nop
  401314:	400e0400 	.word	0x400e0400
  401318:	400e1410 	.word	0x400e1410
  40131c:	2000000c 	.word	0x2000000c
  401320:	00b71b00 	.word	0x00b71b00
  401324:	003d0900 	.word	0x003d0900
  401328:	007a1200 	.word	0x007a1200
  40132c:	aaaaaaab 	.word	0xaaaaaaab

00401330 <system_init_flash>:
 */
void system_init_flash( uint32_t ul_clk )
{
  /* Set FWS for embedded Flash access according to operating frequency */
#if !defined(ID_EFC1)
	if ( ul_clk < CHIP_FREQ_FWS_0 ) {
  401330:	4b12      	ldr	r3, [pc, #72]	; (40137c <system_init_flash+0x4c>)
  401332:	4298      	cmp	r0, r3
  401334:	d804      	bhi.n	401340 <system_init_flash+0x10>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  401336:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  40133a:	4b11      	ldr	r3, [pc, #68]	; (401380 <system_init_flash+0x50>)
  40133c:	601a      	str	r2, [r3, #0]
  40133e:	4770      	bx	lr
	} else {
		if ( ul_clk < CHIP_FREQ_FWS_1 ) {
  401340:	4b10      	ldr	r3, [pc, #64]	; (401384 <system_init_flash+0x54>)
  401342:	4298      	cmp	r0, r3
  401344:	d803      	bhi.n	40134e <system_init_flash+0x1e>
			EFC0->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  401346:	4a10      	ldr	r2, [pc, #64]	; (401388 <system_init_flash+0x58>)
  401348:	4b0d      	ldr	r3, [pc, #52]	; (401380 <system_init_flash+0x50>)
  40134a:	601a      	str	r2, [r3, #0]
  40134c:	4770      	bx	lr
		} else {
			if ( ul_clk < CHIP_FREQ_FWS_2 ) {
  40134e:	4b0f      	ldr	r3, [pc, #60]	; (40138c <system_init_flash+0x5c>)
  401350:	4298      	cmp	r0, r3
  401352:	d803      	bhi.n	40135c <system_init_flash+0x2c>
				EFC0->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  401354:	4a0e      	ldr	r2, [pc, #56]	; (401390 <system_init_flash+0x60>)
  401356:	4b0a      	ldr	r3, [pc, #40]	; (401380 <system_init_flash+0x50>)
  401358:	601a      	str	r2, [r3, #0]
  40135a:	4770      	bx	lr
			} else {
				if ( ul_clk < CHIP_FREQ_FWS_3 ) {
  40135c:	4b0d      	ldr	r3, [pc, #52]	; (401394 <system_init_flash+0x64>)
  40135e:	4298      	cmp	r0, r3
  401360:	d803      	bhi.n	40136a <system_init_flash+0x3a>
					EFC0->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  401362:	4a0d      	ldr	r2, [pc, #52]	; (401398 <system_init_flash+0x68>)
  401364:	4b06      	ldr	r3, [pc, #24]	; (401380 <system_init_flash+0x50>)
  401366:	601a      	str	r2, [r3, #0]
  401368:	4770      	bx	lr
				} else {
					if ( ul_clk < CHIP_FREQ_FWS_4 ) {
  40136a:	4b0c      	ldr	r3, [pc, #48]	; (40139c <system_init_flash+0x6c>)
  40136c:	4298      	cmp	r0, r3
					EFC0->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
  40136e:	bf94      	ite	ls
  401370:	f04f 2204 	movls.w	r2, #67109888	; 0x4000400
					} else {
					EFC0->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  401374:	4a0a      	ldrhi	r2, [pc, #40]	; (4013a0 <system_init_flash+0x70>)
  401376:	4b02      	ldr	r3, [pc, #8]	; (401380 <system_init_flash+0x50>)
  401378:	601a      	str	r2, [r3, #0]
  40137a:	4770      	bx	lr
  40137c:	01312cff 	.word	0x01312cff
  401380:	400e0a00 	.word	0x400e0a00
  401384:	026259ff 	.word	0x026259ff
  401388:	04000100 	.word	0x04000100
  40138c:	039386ff 	.word	0x039386ff
  401390:	04000200 	.word	0x04000200
  401394:	04c4b3ff 	.word	0x04c4b3ff
  401398:	04000300 	.word	0x04000300
  40139c:	05f5e0ff 	.word	0x05f5e0ff
  4013a0:	04000500 	.word	0x04000500

004013a4 <_sbrk>:
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;

	if (heap == NULL) {
  4013a4:	4b09      	ldr	r3, [pc, #36]	; (4013cc <_sbrk+0x28>)
  4013a6:	681b      	ldr	r3, [r3, #0]
  4013a8:	b913      	cbnz	r3, 4013b0 <_sbrk+0xc>
		heap = (unsigned char *)&_end;
  4013aa:	4a09      	ldr	r2, [pc, #36]	; (4013d0 <_sbrk+0x2c>)
  4013ac:	4b07      	ldr	r3, [pc, #28]	; (4013cc <_sbrk+0x28>)
  4013ae:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
  4013b0:	4b06      	ldr	r3, [pc, #24]	; (4013cc <_sbrk+0x28>)
  4013b2:	681b      	ldr	r3, [r3, #0]

	if (((int)prev_heap + incr) > ramend) {
  4013b4:	181a      	adds	r2, r3, r0
  4013b6:	4907      	ldr	r1, [pc, #28]	; (4013d4 <_sbrk+0x30>)
  4013b8:	4291      	cmp	r1, r2
  4013ba:	db04      	blt.n	4013c6 <_sbrk+0x22>
		return (caddr_t) -1;	
	}

	heap += incr;
  4013bc:	4610      	mov	r0, r2
  4013be:	4a03      	ldr	r2, [pc, #12]	; (4013cc <_sbrk+0x28>)
  4013c0:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap;
  4013c2:	4618      	mov	r0, r3
  4013c4:	4770      	bx	lr
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;

	if (((int)prev_heap + incr) > ramend) {
		return (caddr_t) -1;	
  4013c6:	f04f 30ff 	mov.w	r0, #4294967295
	}

	heap += incr;

	return (caddr_t) prev_heap;
}
  4013ca:	4770      	bx	lr
  4013cc:	20000d08 	.word	0x20000d08
  4013d0:	20003d70 	.word	0x20003d70
  4013d4:	2001fffc 	.word	0x2001fffc

004013d8 <_close>:
}

extern int _close(int file)
{
	return -1;
}
  4013d8:	f04f 30ff 	mov.w	r0, #4294967295
  4013dc:	4770      	bx	lr
  4013de:	bf00      	nop

004013e0 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
  4013e0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  4013e4:	604b      	str	r3, [r1, #4]

	return 0;
}
  4013e6:	2000      	movs	r0, #0
  4013e8:	4770      	bx	lr
  4013ea:	bf00      	nop

004013ec <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
  4013ec:	2001      	movs	r0, #1
  4013ee:	4770      	bx	lr

004013f0 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
  4013f0:	2000      	movs	r0, #0
  4013f2:	4770      	bx	lr

004013f4 <_exit>:

extern void _exit(int status)
{
  4013f4:	b508      	push	{r3, lr}
  4013f6:	4601      	mov	r1, r0
	printf("Exiting with status %d.\n", status);
  4013f8:	4801      	ldr	r0, [pc, #4]	; (401400 <_exit+0xc>)
  4013fa:	4b02      	ldr	r3, [pc, #8]	; (401404 <_exit+0x10>)
  4013fc:	4798      	blx	r3

	for (;;);
  4013fe:	e7fe      	b.n	4013fe <_exit+0xa>
  401400:	0040ec58 	.word	0x0040ec58
  401404:	00406d29 	.word	0x00406d29

00401408 <_kill>:
}

extern void _kill(int pid, int sig)
{
  401408:	4770      	bx	lr
  40140a:	bf00      	nop

0040140c <_getpid>:
}

extern int _getpid(void)
{
	return -1;
}
  40140c:	f04f 30ff 	mov.w	r0, #4294967295
  401410:	4770      	bx	lr
  401412:	bf00      	nop

00401414 <_zbar_decode_code128>:
    dcode->code128.character = j;
    return(0);
}

zbar_symbol_type_t _zbar_decode_code128 (zbar_decoder_t *dcode)
{
  401414:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  401418:	b08d      	sub	sp, #52	; 0x34

/* retrieve i-th previous element width */
static inline unsigned get_width (const zbar_decoder_t *dcode,
                                  unsigned char offset)
{
    return(dcode->w[(dcode->idx - offset) & (DECODE_WINDOW - 1)]);
  40141a:	7801      	ldrb	r1, [r0, #0]
  40141c:	f001 050f 	and.w	r5, r1, #15
  401420:	eb00 0585 	add.w	r5, r0, r5, lsl #2
  401424:	686a      	ldr	r2, [r5, #4]
  401426:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
  40142a:	441a      	add	r2, r3
  40142c:	1f8b      	subs	r3, r1, #6
  40142e:	f003 030f 	and.w	r3, r3, #15
  401432:	eb00 0383 	add.w	r3, r0, r3, lsl #2
    code128_decoder_t *dcode128 = &dcode->code128;
    signed char c;

    /* update latest character width */
    dcode128->s6 -= get_width(dcode, 6);
    dcode128->s6 += get_width(dcode, 0);
  401436:	685b      	ldr	r3, [r3, #4]
  401438:	1ad2      	subs	r2, r2, r3
  40143a:	f8c0 2108 	str.w	r2, [r0, #264]	; 0x108

    if((dcode128->character < 0)
  40143e:	f8b0 3104 	ldrh.w	r3, [r0, #260]	; 0x104
  401442:	f343 130b 	sbfx	r3, r3, #4, #12
  401446:	2b00      	cmp	r3, #0
  401448:	da02      	bge.n	401450 <_zbar_decode_code128+0x3c>
  40144a:	f001 0301 	and.w	r3, r1, #1
  40144e:	e016      	b.n	40147e <_zbar_decode_code128+0x6a>
       ? get_color(dcode) != ZBAR_SPACE
       : (/* process every 6th element of active symbol */
          ++dcode128->element != 6 ||
  401450:	f890 4104 	ldrb.w	r4, [r0, #260]	; 0x104
  401454:	f3c4 0342 	ubfx	r3, r4, #1, #3
  401458:	3301      	adds	r3, #1
  40145a:	f003 0307 	and.w	r3, r3, #7
  40145e:	f363 0443 	bfi	r4, r3, #1, #3
  401462:	f880 4104 	strb.w	r4, [r0, #260]	; 0x104
  401466:	2b06      	cmp	r3, #6
  401468:	d108      	bne.n	40147c <_zbar_decode_code128+0x68>
          /* decode color based on direction */
          get_color(dcode) != dcode128->direction))
  40146a:	b2e3      	uxtb	r3, r4
    dcode128->s6 += get_width(dcode, 0);

    if((dcode128->character < 0)
       ? get_color(dcode) != ZBAR_SPACE
       : (/* process every 6th element of active symbol */
          ++dcode128->element != 6 ||
  40146c:	f003 0301 	and.w	r3, r3, #1
  401470:	f001 0401 	and.w	r4, r1, #1
  401474:	1b1b      	subs	r3, r3, r4
  401476:	bf18      	it	ne
  401478:	2301      	movne	r3, #1
  40147a:	e000      	b.n	40147e <_zbar_decode_code128+0x6a>
  40147c:	2301      	movs	r3, #1

    /* update latest character width */
    dcode128->s6 -= get_width(dcode, 6);
    dcode128->s6 += get_width(dcode, 0);

    if((dcode128->character < 0)
  40147e:	2b00      	cmp	r3, #0
  401480:	f040 8740 	bne.w	402304 <_zbar_decode_code128+0xef0>
  401484:	4604      	mov	r4, r0
       : (/* process every 6th element of active symbol */
          ++dcode128->element != 6 ||
          /* decode color based on direction */
          get_color(dcode) != dcode128->direction))
        return(0);
    dcode128->element = 0;
  401486:	f890 3104 	ldrb.w	r3, [r0, #260]	; 0x104
  40148a:	f36f 0343 	bfc	r3, #1, #3
  40148e:	f880 3104 	strb.w	r3, [r0, #260]	; 0x104

    /* build edge signature of character */
    unsigned s = dcode->code128.s6;

    dbprintf(2, " s=%d", s);
    if(s < 5)
  401492:	2a04      	cmp	r2, #4
  401494:	f240 87b1 	bls.w	4023fa <_zbar_decode_code128+0xfe6>
    sig = (get_color(dcode) == ZBAR_BAR)
        ? ((decode_e(get_width(dcode, 0) + get_width(dcode, 1), s, 11) << 12) |
           (decode_e(get_width(dcode, 1) + get_width(dcode, 2), s, 11) << 8) |
           (decode_e(get_width(dcode, 2) + get_width(dcode, 3), s, 11) << 4) |
           (decode_e(get_width(dcode, 3) + get_width(dcode, 4), s, 11)))
        : ((decode_e(get_width(dcode, 5) + get_width(dcode, 4), s, 11) << 12) |
  401498:	f011 0f01 	tst.w	r1, #1
  40149c:	d058      	beq.n	401550 <_zbar_decode_code128+0x13c>
  40149e:	1e4b      	subs	r3, r1, #1
  4014a0:	f003 030f 	and.w	r3, r3, #15
  4014a4:	eb00 0383 	add.w	r3, r0, r3, lsl #2
  4014a8:	6858      	ldr	r0, [r3, #4]
    dbprintf(2, " s=%d", s);
    if(s < 5)
        return(-1);
    /* calculate similar edge measurements */
    sig = (get_color(dcode) == ZBAR_BAR)
        ? ((decode_e(get_width(dcode, 0) + get_width(dcode, 1), s, 11) << 12) |
  4014aa:	686b      	ldr	r3, [r5, #4]
  4014ac:	18c5      	adds	r5, r0, r3
{
    /* result is encoded number of units - 2
     * (for use as zero based index)
     * or -1 if invalid
     */
    unsigned char E = ((e * n * 2 + 1) / s - 3) / 2;
  4014ae:	2316      	movs	r3, #22
  4014b0:	fb03 f305 	mul.w	r3, r3, r5
  4014b4:	3301      	adds	r3, #1
  4014b6:	fbb3 f3f2 	udiv	r3, r3, r2
  4014ba:	3b03      	subs	r3, #3
    return((E >= n - 3) ? -1 : E);
  4014bc:	f3c3 0347 	ubfx	r3, r3, #1, #8
  4014c0:	2b07      	cmp	r3, #7
  4014c2:	bf88      	it	hi
  4014c4:	f04f 33ff 	movhi.w	r3, #4294967295

/* retrieve i-th previous element width */
static inline unsigned get_width (const zbar_decoder_t *dcode,
                                  unsigned char offset)
{
    return(dcode->w[(dcode->idx - offset) & (DECODE_WINDOW - 1)]);
  4014c8:	1e8d      	subs	r5, r1, #2
  4014ca:	f005 050f 	and.w	r5, r5, #15
  4014ce:	eb04 0585 	add.w	r5, r4, r5, lsl #2
  4014d2:	686e      	ldr	r6, [r5, #4]
           (decode_e(get_width(dcode, 1) + get_width(dcode, 2), s, 11) << 8) |
  4014d4:	4430      	add	r0, r6
{
    /* result is encoded number of units - 2
     * (for use as zero based index)
     * or -1 if invalid
     */
    unsigned char E = ((e * n * 2 + 1) / s - 3) / 2;
  4014d6:	2516      	movs	r5, #22
  4014d8:	fb05 f000 	mul.w	r0, r5, r0
  4014dc:	3001      	adds	r0, #1
  4014de:	fbb0 f0f2 	udiv	r0, r0, r2
  4014e2:	3803      	subs	r0, #3
    return((E >= n - 3) ? -1 : E);
  4014e4:	f3c0 0047 	ubfx	r0, r0, #1, #8
  4014e8:	2807      	cmp	r0, #7
  4014ea:	bf88      	it	hi
  4014ec:	f04f 30ff 	movhi.w	r0, #4294967295
  4014f0:	0200      	lsls	r0, r0, #8
    dbprintf(2, " s=%d", s);
    if(s < 5)
        return(-1);
    /* calculate similar edge measurements */
    sig = (get_color(dcode) == ZBAR_BAR)
        ? ((decode_e(get_width(dcode, 0) + get_width(dcode, 1), s, 11) << 12) |
  4014f2:	ea40 3303 	orr.w	r3, r0, r3, lsl #12

/* retrieve i-th previous element width */
static inline unsigned get_width (const zbar_decoder_t *dcode,
                                  unsigned char offset)
{
    return(dcode->w[(dcode->idx - offset) & (DECODE_WINDOW - 1)]);
  4014f6:	1ec8      	subs	r0, r1, #3
  4014f8:	f000 000f 	and.w	r0, r0, #15
  4014fc:	eb04 0080 	add.w	r0, r4, r0, lsl #2
  401500:	6840      	ldr	r0, [r0, #4]
           (decode_e(get_width(dcode, 1) + get_width(dcode, 2), s, 11) << 8) |
           (decode_e(get_width(dcode, 2) + get_width(dcode, 3), s, 11) << 4) |
  401502:	1985      	adds	r5, r0, r6
{
    /* result is encoded number of units - 2
     * (for use as zero based index)
     * or -1 if invalid
     */
    unsigned char E = ((e * n * 2 + 1) / s - 3) / 2;
  401504:	2616      	movs	r6, #22
  401506:	fb06 f505 	mul.w	r5, r6, r5
  40150a:	3501      	adds	r5, #1
  40150c:	fbb5 f5f2 	udiv	r5, r5, r2
  401510:	3d03      	subs	r5, #3
    return((E >= n - 3) ? -1 : E);
  401512:	f3c5 0547 	ubfx	r5, r5, #1, #8
  401516:	2d07      	cmp	r5, #7
  401518:	bf88      	it	hi
  40151a:	f04f 35ff 	movhi.w	r5, #4294967295
    if(s < 5)
        return(-1);
    /* calculate similar edge measurements */
    sig = (get_color(dcode) == ZBAR_BAR)
        ? ((decode_e(get_width(dcode, 0) + get_width(dcode, 1), s, 11) << 12) |
           (decode_e(get_width(dcode, 1) + get_width(dcode, 2), s, 11) << 8) |
  40151e:	ea43 1505 	orr.w	r5, r3, r5, lsl #4

/* retrieve i-th previous element width */
static inline unsigned get_width (const zbar_decoder_t *dcode,
                                  unsigned char offset)
{
    return(dcode->w[(dcode->idx - offset) & (DECODE_WINDOW - 1)]);
  401522:	3904      	subs	r1, #4
  401524:	f001 010f 	and.w	r1, r1, #15
  401528:	eb04 0181 	add.w	r1, r4, r1, lsl #2
           (decode_e(get_width(dcode, 2) + get_width(dcode, 3), s, 11) << 4) |
           (decode_e(get_width(dcode, 3) + get_width(dcode, 4), s, 11)))
  40152c:	6849      	ldr	r1, [r1, #4]
  40152e:	4408      	add	r0, r1
{
    /* result is encoded number of units - 2
     * (for use as zero based index)
     * or -1 if invalid
     */
    unsigned char E = ((e * n * 2 + 1) / s - 3) / 2;
  401530:	4631      	mov	r1, r6
  401532:	fb01 f100 	mul.w	r1, r1, r0
  401536:	3101      	adds	r1, #1
  401538:	fbb1 f1f2 	udiv	r1, r1, r2
  40153c:	3903      	subs	r1, #3
    return((E >= n - 3) ? -1 : E);
  40153e:	f3c1 0147 	ubfx	r1, r1, #1, #8
  401542:	2907      	cmp	r1, #7
  401544:	bf88      	it	hi
  401546:	f04f 31ff 	movhi.w	r1, #4294967295
        : ((decode_e(get_width(dcode, 5) + get_width(dcode, 4), s, 11) << 12) |
  40154a:	ea45 0301 	orr.w	r3, r5, r1
  40154e:	e05b      	b.n	401608 <_zbar_decode_code128+0x1f4>

/* retrieve i-th previous element width */
static inline unsigned get_width (const zbar_decoder_t *dcode,
                                  unsigned char offset)
{
    return(dcode->w[(dcode->idx - offset) & (DECODE_WINDOW - 1)]);
  401550:	1f0b      	subs	r3, r1, #4
  401552:	f003 030f 	and.w	r3, r3, #15
  401556:	eb00 0383 	add.w	r3, r0, r3, lsl #2
  40155a:	6858      	ldr	r0, [r3, #4]
  40155c:	1f4b      	subs	r3, r1, #5
  40155e:	f003 030f 	and.w	r3, r3, #15
  401562:	eb04 0383 	add.w	r3, r4, r3, lsl #2
  401566:	685b      	ldr	r3, [r3, #4]
  401568:	18c5      	adds	r5, r0, r3
{
    /* result is encoded number of units - 2
     * (for use as zero based index)
     * or -1 if invalid
     */
    unsigned char E = ((e * n * 2 + 1) / s - 3) / 2;
  40156a:	2316      	movs	r3, #22
  40156c:	fb03 f305 	mul.w	r3, r3, r5
  401570:	3301      	adds	r3, #1
  401572:	fbb3 f3f2 	udiv	r3, r3, r2
  401576:	3b03      	subs	r3, #3
    return((E >= n - 3) ? -1 : E);
  401578:	f3c3 0347 	ubfx	r3, r3, #1, #8
  40157c:	2b07      	cmp	r3, #7
  40157e:	bf88      	it	hi
  401580:	f04f 33ff 	movhi.w	r3, #4294967295

/* retrieve i-th previous element width */
static inline unsigned get_width (const zbar_decoder_t *dcode,
                                  unsigned char offset)
{
    return(dcode->w[(dcode->idx - offset) & (DECODE_WINDOW - 1)]);
  401584:	1ecd      	subs	r5, r1, #3
  401586:	f005 050f 	and.w	r5, r5, #15
  40158a:	eb04 0585 	add.w	r5, r4, r5, lsl #2
  40158e:	686e      	ldr	r6, [r5, #4]
           (decode_e(get_width(dcode, 4) + get_width(dcode, 3), s, 11) << 8) |
  401590:	4430      	add	r0, r6
{
    /* result is encoded number of units - 2
     * (for use as zero based index)
     * or -1 if invalid
     */
    unsigned char E = ((e * n * 2 + 1) / s - 3) / 2;
  401592:	2516      	movs	r5, #22
  401594:	fb05 f000 	mul.w	r0, r5, r0
  401598:	3001      	adds	r0, #1
  40159a:	fbb0 f0f2 	udiv	r0, r0, r2
  40159e:	3803      	subs	r0, #3
    return((E >= n - 3) ? -1 : E);
  4015a0:	f3c0 0047 	ubfx	r0, r0, #1, #8
  4015a4:	2807      	cmp	r0, #7
  4015a6:	bf88      	it	hi
  4015a8:	f04f 30ff 	movhi.w	r0, #4294967295
  4015ac:	0200      	lsls	r0, r0, #8
    sig = (get_color(dcode) == ZBAR_BAR)
        ? ((decode_e(get_width(dcode, 0) + get_width(dcode, 1), s, 11) << 12) |
           (decode_e(get_width(dcode, 1) + get_width(dcode, 2), s, 11) << 8) |
           (decode_e(get_width(dcode, 2) + get_width(dcode, 3), s, 11) << 4) |
           (decode_e(get_width(dcode, 3) + get_width(dcode, 4), s, 11)))
        : ((decode_e(get_width(dcode, 5) + get_width(dcode, 4), s, 11) << 12) |
  4015ae:	ea40 3003 	orr.w	r0, r0, r3, lsl #12

/* retrieve i-th previous element width */
static inline unsigned get_width (const zbar_decoder_t *dcode,
                                  unsigned char offset)
{
    return(dcode->w[(dcode->idx - offset) & (DECODE_WINDOW - 1)]);
  4015b2:	1e8b      	subs	r3, r1, #2
  4015b4:	f003 030f 	and.w	r3, r3, #15
  4015b8:	eb04 0383 	add.w	r3, r4, r3, lsl #2
  4015bc:	685d      	ldr	r5, [r3, #4]
           (decode_e(get_width(dcode, 4) + get_width(dcode, 3), s, 11) << 8) |
           (decode_e(get_width(dcode, 3) + get_width(dcode, 2), s, 11) << 4) |
  4015be:	442e      	add	r6, r5
{
    /* result is encoded number of units - 2
     * (for use as zero based index)
     * or -1 if invalid
     */
    unsigned char E = ((e * n * 2 + 1) / s - 3) / 2;
  4015c0:	2316      	movs	r3, #22
  4015c2:	fb03 f306 	mul.w	r3, r3, r6
  4015c6:	3301      	adds	r3, #1
  4015c8:	fbb3 f3f2 	udiv	r3, r3, r2
  4015cc:	3b03      	subs	r3, #3
    return((E >= n - 3) ? -1 : E);
  4015ce:	f3c3 0347 	ubfx	r3, r3, #1, #8
  4015d2:	2b07      	cmp	r3, #7
  4015d4:	bf88      	it	hi
  4015d6:	f04f 33ff 	movhi.w	r3, #4294967295
        ? ((decode_e(get_width(dcode, 0) + get_width(dcode, 1), s, 11) << 12) |
           (decode_e(get_width(dcode, 1) + get_width(dcode, 2), s, 11) << 8) |
           (decode_e(get_width(dcode, 2) + get_width(dcode, 3), s, 11) << 4) |
           (decode_e(get_width(dcode, 3) + get_width(dcode, 4), s, 11)))
        : ((decode_e(get_width(dcode, 5) + get_width(dcode, 4), s, 11) << 12) |
           (decode_e(get_width(dcode, 4) + get_width(dcode, 3), s, 11) << 8) |
  4015da:	ea40 1303 	orr.w	r3, r0, r3, lsl #4

/* retrieve i-th previous element width */
static inline unsigned get_width (const zbar_decoder_t *dcode,
                                  unsigned char offset)
{
    return(dcode->w[(dcode->idx - offset) & (DECODE_WINDOW - 1)]);
  4015de:	3901      	subs	r1, #1
  4015e0:	f001 010f 	and.w	r1, r1, #15
  4015e4:	eb04 0181 	add.w	r1, r4, r1, lsl #2
           (decode_e(get_width(dcode, 3) + get_width(dcode, 2), s, 11) << 4) |
           (decode_e(get_width(dcode, 2) + get_width(dcode, 1), s, 11)));
  4015e8:	6849      	ldr	r1, [r1, #4]
  4015ea:	440d      	add	r5, r1
{
    /* result is encoded number of units - 2
     * (for use as zero based index)
     * or -1 if invalid
     */
    unsigned char E = ((e * n * 2 + 1) / s - 3) / 2;
  4015ec:	2116      	movs	r1, #22
  4015ee:	fb01 f105 	mul.w	r1, r1, r5
  4015f2:	3101      	adds	r1, #1
  4015f4:	fbb1 f1f2 	udiv	r1, r1, r2
  4015f8:	3903      	subs	r1, #3
    return((E >= n - 3) ? -1 : E);
  4015fa:	f3c1 0147 	ubfx	r1, r1, #1, #8
  4015fe:	2907      	cmp	r1, #7
  401600:	bf88      	it	hi
  401602:	f04f 31ff 	movhi.w	r1, #4294967295
    sig = (get_color(dcode) == ZBAR_BAR)
        ? ((decode_e(get_width(dcode, 0) + get_width(dcode, 1), s, 11) << 12) |
           (decode_e(get_width(dcode, 1) + get_width(dcode, 2), s, 11) << 8) |
           (decode_e(get_width(dcode, 2) + get_width(dcode, 3), s, 11) << 4) |
           (decode_e(get_width(dcode, 3) + get_width(dcode, 4), s, 11)))
        : ((decode_e(get_width(dcode, 5) + get_width(dcode, 4), s, 11) << 12) |
  401606:	430b      	orrs	r3, r1
           (decode_e(get_width(dcode, 4) + get_width(dcode, 3), s, 11) << 8) |
           (decode_e(get_width(dcode, 3) + get_width(dcode, 2), s, 11) << 4) |
           (decode_e(get_width(dcode, 2) + get_width(dcode, 1), s, 11)));
    if(sig < 0)
  401608:	2b00      	cmp	r3, #0
  40160a:	f2c0 86f6 	blt.w	4023fa <_zbar_decode_code128+0xfe6>
        return(-1);
    dbprintf(2, " sig=%04x", sig);
    /* lookup edge signature */
    c = (sig & 0x4444) ? decode_hi(sig) : decode_lo(sig);
  40160e:	f244 4144 	movw	r1, #17476	; 0x4444
  401612:	420b      	tst	r3, r1
  401614:	d076      	beq.n	401704 <_zbar_decode_code128+0x2f0>
    return(c);
}

static inline signed char decode_hi (int sig)
{
    unsigned char rev = (sig & 0x4400) != 0;
  401616:	f413 4f88 	tst.w	r3, #17408	; 0x4400
  40161a:	bf14      	ite	ne
  40161c:	2001      	movne	r0, #1
  40161e:	2000      	moveq	r0, #0
    unsigned char idx, c;
    if(rev)
  401620:	2800      	cmp	r0, #0
  401622:	f000 867d 	beq.w	402320 <_zbar_decode_code128+0xf0c>
        sig = (((sig >> 12) & 0x000f) |
               ((sig >>  4) & 0x00f0) |
  401626:	111d      	asrs	r5, r3, #4
  401628:	f005 05f0 	and.w	r5, r5, #240	; 0xf0
static inline signed char decode_hi (int sig)
{
    unsigned char rev = (sig & 0x4400) != 0;
    unsigned char idx, c;
    if(rev)
        sig = (((sig >> 12) & 0x000f) |
  40162c:	f3c3 3103 	ubfx	r1, r3, #12, #4
  401630:	430d      	orrs	r5, r1
               ((sig >>  4) & 0x00f0) |
               ((sig <<  4) & 0x0f00) |
  401632:	0119      	lsls	r1, r3, #4
  401634:	f401 6170 	and.w	r1, r1, #3840	; 0xf00
{
    unsigned char rev = (sig & 0x4400) != 0;
    unsigned char idx, c;
    if(rev)
        sig = (((sig >> 12) & 0x000f) |
               ((sig >>  4) & 0x00f0) |
  401638:	4329      	orrs	r1, r5
               ((sig <<  4) & 0x0f00) |
               ((sig << 12) & 0xf000));
  40163a:	031b      	lsls	r3, r3, #12
  40163c:	b29b      	uxth	r3, r3
static inline signed char decode_hi (int sig)
{
    unsigned char rev = (sig & 0x4400) != 0;
    unsigned char idx, c;
    if(rev)
        sig = (((sig >> 12) & 0x000f) |
  40163e:	430b      	orrs	r3, r1
               ((sig >>  4) & 0x00f0) |
               ((sig <<  4) & 0x0f00) |
               ((sig << 12) & 0xf000));
    dbprintf(2, " rev=%x", rev != 0);

    switch(sig) {
  401640:	f240 3141 	movw	r1, #833	; 0x341
  401644:	428b      	cmp	r3, r1
  401646:	d03e      	beq.n	4016c6 <_zbar_decode_code128+0x2b2>
  401648:	dc14      	bgt.n	401674 <_zbar_decode_code128+0x260>
  40164a:	2b34      	cmp	r3, #52	; 0x34
  40164c:	d033      	beq.n	4016b6 <_zbar_decode_code128+0x2a2>
  40164e:	dc04      	bgt.n	40165a <_zbar_decode_code128+0x246>
  401650:	2b14      	cmp	r3, #20
  401652:	d046      	beq.n	4016e2 <_zbar_decode_code128+0x2ce>
  401654:	2b25      	cmp	r3, #37	; 0x25
  401656:	d049      	beq.n	4016ec <_zbar_decode_code128+0x2d8>
  401658:	e100      	b.n	40185c <_zbar_decode_code128+0x448>
  40165a:	f240 1143 	movw	r1, #323	; 0x143
  40165e:	428b      	cmp	r3, r1
  401660:	d02d      	beq.n	4016be <_zbar_decode_code128+0x2aa>
  401662:	f240 2143 	movw	r1, #579	; 0x243
  401666:	428b      	cmp	r3, r1
  401668:	d02b      	beq.n	4016c2 <_zbar_decode_code128+0x2ae>
  40166a:	f5b3 7f9a 	cmp.w	r3, #308	; 0x134
  40166e:	f040 80f5 	bne.w	40185c <_zbar_decode_code128+0x448>
  401672:	e022      	b.n	4016ba <_zbar_decode_code128+0x2a6>
  401674:	f241 1134 	movw	r1, #4404	; 0x1134
  401678:	428b      	cmp	r3, r1
  40167a:	d02c      	beq.n	4016d6 <_zbar_decode_code128+0x2c2>
  40167c:	dc0d      	bgt.n	40169a <_zbar_decode_code128+0x286>
  40167e:	f241 0124 	movw	r1, #4132	; 0x1024
  401682:	428b      	cmp	r3, r1
  401684:	d023      	beq.n	4016ce <_zbar_decode_code128+0x2ba>
  401686:	f241 1114 	movw	r1, #4372	; 0x1114
  40168a:	428b      	cmp	r3, r1
  40168c:	d021      	beq.n	4016d2 <_zbar_decode_code128+0x2be>
  40168e:	f240 3152 	movw	r1, #850	; 0x352
  401692:	428b      	cmp	r3, r1
  401694:	f040 80e2 	bne.w	40185c <_zbar_decode_code128+0x448>
  401698:	e017      	b.n	4016ca <_zbar_decode_code128+0x2b6>
  40169a:	f241 2143 	movw	r1, #4675	; 0x1243
  40169e:	428b      	cmp	r3, r1
  4016a0:	d01d      	beq.n	4016de <_zbar_decode_code128+0x2ca>
  4016a2:	f241 4141 	movw	r1, #5185	; 0x1441
  4016a6:	428b      	cmp	r3, r1
  4016a8:	d024      	beq.n	4016f4 <_zbar_decode_code128+0x2e0>
  4016aa:	f241 2142 	movw	r1, #4674	; 0x1242
  4016ae:	428b      	cmp	r3, r1
  4016b0:	f040 80d4 	bne.w	40185c <_zbar_decode_code128+0x448>
  4016b4:	e011      	b.n	4016da <_zbar_decode_code128+0x2c6>
    case 0x0014: idx = 0x0; break;
    case 0x0025: idx = 0x1; break;
    case 0x0034: idx = 0x2; break;
  4016b6:	2302      	movs	r3, #2
  4016b8:	e016      	b.n	4016e8 <_zbar_decode_code128+0x2d4>
    case 0x0134: idx = 0x3; break;
  4016ba:	2303      	movs	r3, #3
  4016bc:	e014      	b.n	4016e8 <_zbar_decode_code128+0x2d4>
    case 0x0143: idx = 0x4; break;
  4016be:	2304      	movs	r3, #4
  4016c0:	e012      	b.n	4016e8 <_zbar_decode_code128+0x2d4>
    case 0x0243: idx = 0x5; break;
  4016c2:	2305      	movs	r3, #5
  4016c4:	e010      	b.n	4016e8 <_zbar_decode_code128+0x2d4>
    case 0x0341: idx = 0x6; break;
  4016c6:	2306      	movs	r3, #6
  4016c8:	e00e      	b.n	4016e8 <_zbar_decode_code128+0x2d4>
    case 0x0352: idx = 0x7; break;
  4016ca:	2307      	movs	r3, #7
  4016cc:	e00c      	b.n	4016e8 <_zbar_decode_code128+0x2d4>
    case 0x1024: idx = 0x8; break;
  4016ce:	2308      	movs	r3, #8
  4016d0:	e00a      	b.n	4016e8 <_zbar_decode_code128+0x2d4>
    case 0x1114: idx = 0x9; break;
  4016d2:	2309      	movs	r3, #9
  4016d4:	e008      	b.n	4016e8 <_zbar_decode_code128+0x2d4>
    case 0x1134: idx = 0xa; break;
  4016d6:	230a      	movs	r3, #10
  4016d8:	e006      	b.n	4016e8 <_zbar_decode_code128+0x2d4>
    case 0x1242: idx = 0xb; break;
  4016da:	230b      	movs	r3, #11
  4016dc:	e004      	b.n	4016e8 <_zbar_decode_code128+0x2d4>
    case 0x1243: idx = 0xc; break;
  4016de:	230c      	movs	r3, #12
  4016e0:	e002      	b.n	4016e8 <_zbar_decode_code128+0x2d4>
               ((sig <<  4) & 0x0f00) |
               ((sig << 12) & 0xf000));
    dbprintf(2, " rev=%x", rev != 0);

    switch(sig) {
    case 0x0014: idx = 0x0; break;
  4016e2:	2300      	movs	r3, #0
  4016e4:	e000      	b.n	4016e8 <_zbar_decode_code128+0x2d4>
  4016e6:	2300      	movs	r3, #0
    case 0x1242: idx = 0xb; break;
    case 0x1243: idx = 0xc; break;
    case 0x1441: idx = 0xd; rev = 0; break;
    default: return(-1);
    }
    if(rev)
  4016e8:	b908      	cbnz	r0, 4016ee <_zbar_decode_code128+0x2da>
  4016ea:	e006      	b.n	4016fa <_zbar_decode_code128+0x2e6>
               ((sig << 12) & 0xf000));
    dbprintf(2, " rev=%x", rev != 0);

    switch(sig) {
    case 0x0014: idx = 0x0; break;
    case 0x0025: idx = 0x1; break;
  4016ec:	2301      	movs	r3, #1
    case 0x1243: idx = 0xc; break;
    case 0x1441: idx = 0xd; rev = 0; break;
    default: return(-1);
    }
    if(rev)
        idx += 0xe;
  4016ee:	330e      	adds	r3, #14
  4016f0:	b2db      	uxtb	r3, r3
  4016f2:	e002      	b.n	4016fa <_zbar_decode_code128+0x2e6>
    case 0x1024: idx = 0x8; break;
    case 0x1114: idx = 0x9; break;
    case 0x1134: idx = 0xa; break;
    case 0x1242: idx = 0xb; break;
    case 0x1243: idx = 0xc; break;
    case 0x1441: idx = 0xd; rev = 0; break;
  4016f4:	230d      	movs	r3, #13
  4016f6:	e000      	b.n	4016fa <_zbar_decode_code128+0x2e6>
  4016f8:	230d      	movs	r3, #13
    default: return(-1);
    }
    if(rev)
        idx += 0xe;
    c = characters[0x51 + idx];
  4016fa:	49b5      	ldr	r1, [pc, #724]	; (4019d0 <_zbar_decode_code128+0x5bc>)
  4016fc:	440b      	add	r3, r1
    dbprintf(2, " %02x => %02x", idx, c);
    return(c);
  4016fe:	f893 1051 	ldrb.w	r1, [r3, #81]	; 0x51
  401702:	e04c      	b.n	40179e <_zbar_decode_code128+0x38a>
};

static inline signed char decode_lo (int sig)
{
    unsigned char offset = (((sig >> 1) & 0x01) |
                            ((sig >> 3) & 0x06) |
  401704:	10d8      	asrs	r0, r3, #3
    0xf7, 0xff, 0xf8, 0x9f, 0xff, 0xff, 0xff, 0xff,     /* 33 */
};

static inline signed char decode_lo (int sig)
{
    unsigned char offset = (((sig >> 1) & 0x01) |
  401706:	f000 0006 	and.w	r0, r0, #6
  40170a:	f3c3 0140 	ubfx	r1, r3, #1, #1
  40170e:	4308      	orrs	r0, r1
                            ((sig >> 3) & 0x06) |
                            ((sig >> 5) & 0x18) |
  401710:	1159      	asrs	r1, r3, #5
    0xf7, 0xff, 0xf8, 0x9f, 0xff, 0xff, 0xff, 0xff,     /* 33 */
};

static inline signed char decode_lo (int sig)
{
    unsigned char offset = (((sig >> 1) & 0x01) |
  401712:	f001 0118 	and.w	r1, r1, #24
  401716:	4301      	orrs	r1, r0
                            ((sig >> 3) & 0x06) |
                            ((sig >> 5) & 0x18) |
                            ((sig >> 7) & 0x60));
  401718:	11d8      	asrs	r0, r3, #7
    0xf7, 0xff, 0xf8, 0x9f, 0xff, 0xff, 0xff, 0xff,     /* 33 */
};

static inline signed char decode_lo (int sig)
{
    unsigned char offset = (((sig >> 1) & 0x01) |
  40171a:	f000 0060 	and.w	r0, r0, #96	; 0x60
                            ((sig >> 3) & 0x06) |
                            ((sig >> 5) & 0x18) |
                            ((sig >> 7) & 0x60));
    unsigned char idx = lo_offset[offset];
  40171e:	ea41 0700 	orr.w	r7, r1, r0
  401722:	49ac      	ldr	r1, [pc, #688]	; (4019d4 <_zbar_decode_code128+0x5c0>)
  401724:	5dcd      	ldrb	r5, [r1, r7]
    unsigned char base, c;

    if(sig & 1)
  401726:	f013 0f01 	tst.w	r3, #1
        idx &= 0xf;
  40172a:	bf14      	ite	ne
  40172c:	f005 050f 	andne.w	r5, r5, #15
    else
        idx >>= 4;
  401730:	092d      	lsreq	r5, r5, #4
    if(idx == 0xf)
  401732:	2d0f      	cmp	r5, #15
  401734:	f000 8656 	beq.w	4023e4 <_zbar_decode_code128+0xfd0>
        return(-1);

    base = (sig >> 11) | ((sig >> 9) & 1);
  401738:	f3c3 2640 	ubfx	r6, r3, #9, #1
  40173c:	ea46 26e3 	orr.w	r6, r6, r3, asr #11
  401740:	b2f1      	uxtb	r1, r6
    zassert(base < 8, -1, "sig=%x offset=%x idx=%x base=%x\n",
  401742:	2907      	cmp	r1, #7
  401744:	d911      	bls.n	40176a <_zbar_decode_code128+0x356>
  401746:	4aa4      	ldr	r2, [pc, #656]	; (4019d8 <_zbar_decode_code128+0x5c4>)
  401748:	6812      	ldr	r2, [r2, #0]
  40174a:	68d0      	ldr	r0, [r2, #12]
  40174c:	4aa3      	ldr	r2, [pc, #652]	; (4019dc <_zbar_decode_code128+0x5c8>)
  40174e:	9200      	str	r2, [sp, #0]
  401750:	4aa3      	ldr	r2, [pc, #652]	; (4019e0 <_zbar_decode_code128+0x5cc>)
  401752:	9201      	str	r2, [sp, #4]
  401754:	9302      	str	r3, [sp, #8]
  401756:	9703      	str	r7, [sp, #12]
  401758:	9504      	str	r5, [sp, #16]
  40175a:	9105      	str	r1, [sp, #20]
  40175c:	49a1      	ldr	r1, [pc, #644]	; (4019e4 <_zbar_decode_code128+0x5d0>)
  40175e:	4aa2      	ldr	r2, [pc, #648]	; (4019e8 <_zbar_decode_code128+0x5d4>)
  401760:	2386      	movs	r3, #134	; 0x86
  401762:	4da2      	ldr	r5, [pc, #648]	; (4019ec <_zbar_decode_code128+0x5d8>)
  401764:	47a8      	blx	r5
  401766:	f000 be3d 	b.w	4023e4 <_zbar_decode_code128+0xfd0>
            sig, offset, idx, base);
    idx += lo_base[base];
  40176a:	48a1      	ldr	r0, [pc, #644]	; (4019f0 <_zbar_decode_code128+0x5dc>)
  40176c:	5c40      	ldrb	r0, [r0, r1]
  40176e:	4405      	add	r5, r0
  401770:	b2ed      	uxtb	r5, r5

    zassert(idx <= 0x50, -1, "sig=%x offset=%x base=%x idx=%x\n",
  401772:	2d50      	cmp	r5, #80	; 0x50
  401774:	d911      	bls.n	40179a <_zbar_decode_code128+0x386>
  401776:	4a98      	ldr	r2, [pc, #608]	; (4019d8 <_zbar_decode_code128+0x5c4>)
  401778:	6812      	ldr	r2, [r2, #0]
  40177a:	68d0      	ldr	r0, [r2, #12]
  40177c:	4a97      	ldr	r2, [pc, #604]	; (4019dc <_zbar_decode_code128+0x5c8>)
  40177e:	9200      	str	r2, [sp, #0]
  401780:	4a9c      	ldr	r2, [pc, #624]	; (4019f4 <_zbar_decode_code128+0x5e0>)
  401782:	9201      	str	r2, [sp, #4]
  401784:	9302      	str	r3, [sp, #8]
  401786:	9703      	str	r7, [sp, #12]
  401788:	9104      	str	r1, [sp, #16]
  40178a:	9505      	str	r5, [sp, #20]
  40178c:	499a      	ldr	r1, [pc, #616]	; (4019f8 <_zbar_decode_code128+0x5e4>)
  40178e:	4a96      	ldr	r2, [pc, #600]	; (4019e8 <_zbar_decode_code128+0x5d4>)
  401790:	238a      	movs	r3, #138	; 0x8a
  401792:	4d96      	ldr	r5, [pc, #600]	; (4019ec <_zbar_decode_code128+0x5d8>)
  401794:	47a8      	blx	r5
  401796:	f000 be25 	b.w	4023e4 <_zbar_decode_code128+0xfd0>
            sig, offset, base, idx);
    c = characters[idx];
  40179a:	4b8d      	ldr	r3, [pc, #564]	; (4019d0 <_zbar_decode_code128+0x5bc>)
    dbprintf(2, " %02x(%x(%02x)/%x(%02x)) => %02x",
             idx, base, lo_base[base], offset, lo_offset[offset],
             (unsigned char)c);
    return(c);
  40179c:	5d59      	ldrb	r1, [r3, r5]
    if(sig < 0)
        return(-1);
    dbprintf(2, " sig=%04x", sig);
    /* lookup edge signature */
    c = (sig & 0x4444) ? decode_hi(sig) : decode_lo(sig);
    if(c == -1)
  40179e:	b24b      	sxtb	r3, r1
  4017a0:	f1b3 3fff 	cmp.w	r3, #4294967295
  4017a4:	f000 8629 	beq.w	4023fa <_zbar_decode_code128+0xfe6>
};

/* return current element color */
static inline char get_color (const zbar_decoder_t *dcode)
{
    return(dcode->idx & 1);
  4017a8:	7823      	ldrb	r3, [r4, #0]
        return(-1);

    /* character validation */
    bars = (get_color(dcode) == ZBAR_BAR)
        ? (get_width(dcode, 0) + get_width(dcode, 2) + get_width(dcode, 4))
        : (get_width(dcode, 1) + get_width(dcode, 3) + get_width(dcode, 5));
  4017aa:	f013 0f01 	tst.w	r3, #1
  4017ae:	d013      	beq.n	4017d8 <_zbar_decode_code128+0x3c4>

/* retrieve i-th previous element width */
static inline unsigned get_width (const zbar_decoder_t *dcode,
                                  unsigned char offset)
{
    return(dcode->w[(dcode->idx - offset) & (DECODE_WINDOW - 1)]);
  4017b0:	1e98      	subs	r0, r3, #2
  4017b2:	f000 000f 	and.w	r0, r0, #15
  4017b6:	eb04 0080 	add.w	r0, r4, r0, lsl #2
  4017ba:	1f1d      	subs	r5, r3, #4
  4017bc:	f005 050f 	and.w	r5, r5, #15
  4017c0:	eb04 0585 	add.w	r5, r4, r5, lsl #2
  4017c4:	6846      	ldr	r6, [r0, #4]
  4017c6:	6868      	ldr	r0, [r5, #4]
  4017c8:	4430      	add	r0, r6
  4017ca:	f003 030f 	and.w	r3, r3, #15
  4017ce:	eb04 0383 	add.w	r3, r4, r3, lsl #2
  4017d2:	685b      	ldr	r3, [r3, #4]
  4017d4:	4418      	add	r0, r3
  4017d6:	e013      	b.n	401800 <_zbar_decode_code128+0x3ec>
  4017d8:	1edd      	subs	r5, r3, #3
  4017da:	f005 050f 	and.w	r5, r5, #15
  4017de:	eb04 0585 	add.w	r5, r4, r5, lsl #2
  4017e2:	1e58      	subs	r0, r3, #1
  4017e4:	f000 000f 	and.w	r0, r0, #15
  4017e8:	eb04 0080 	add.w	r0, r4, r0, lsl #2
  4017ec:	686d      	ldr	r5, [r5, #4]
  4017ee:	6840      	ldr	r0, [r0, #4]
  4017f0:	4428      	add	r0, r5
  4017f2:	3b05      	subs	r3, #5
  4017f4:	f003 030f 	and.w	r3, r3, #15
  4017f8:	eb04 0383 	add.w	r3, r4, r3, lsl #2
  4017fc:	685b      	ldr	r3, [r3, #4]
  4017fe:	4418      	add	r0, r3
    bars = bars * 11 * 4 / s;
  401800:	232c      	movs	r3, #44	; 0x2c
  401802:	fb03 f300 	mul.w	r3, r3, r0
  401806:	fbb3 f2f2 	udiv	r2, r3, r2
    return(c);
}

static inline unsigned char calc_check (unsigned char c)
{
    if(!(c & 0x80))
  40180a:	f011 0f80 	tst.w	r1, #128	; 0x80
  40180e:	d016      	beq.n	40183e <_zbar_decode_code128+0x42a>
        return(0x18);
    c &= 0x7f;
  401810:	f001 037f 	and.w	r3, r1, #127	; 0x7f
    if(c < 0x3d)
  401814:	2b3c      	cmp	r3, #60	; 0x3c
  401816:	d806      	bhi.n	401826 <_zbar_decode_code128+0x412>
        return((c < 0x30 && c != 0x17) ? 0x10 : 0x20);
  401818:	2b2f      	cmp	r3, #47	; 0x2f
  40181a:	d812      	bhi.n	401842 <_zbar_decode_code128+0x42e>
  40181c:	2b17      	cmp	r3, #23
  40181e:	bf0c      	ite	eq
  401820:	2320      	moveq	r3, #32
  401822:	2310      	movne	r3, #16
  401824:	e00e      	b.n	401844 <_zbar_decode_code128+0x430>
    if(c < 0x50)
  401826:	2b4f      	cmp	r3, #79	; 0x4f
  401828:	d804      	bhi.n	401834 <_zbar_decode_code128+0x420>
        return((c == 0x4d) ? 0x20 : 0x10);
  40182a:	2b4d      	cmp	r3, #77	; 0x4d
  40182c:	bf0c      	ite	eq
  40182e:	2320      	moveq	r3, #32
  401830:	2310      	movne	r3, #16
  401832:	e007      	b.n	401844 <_zbar_decode_code128+0x430>
    return((c < 0x67) ? 0x20 : 0x10);
  401834:	2b67      	cmp	r3, #103	; 0x67
  401836:	bf34      	ite	cc
  401838:	2320      	movcc	r3, #32
  40183a:	2310      	movcs	r3, #16
  40183c:	e002      	b.n	401844 <_zbar_decode_code128+0x430>
}

static inline unsigned char calc_check (unsigned char c)
{
    if(!(c & 0x80))
        return(0x18);
  40183e:	2318      	movs	r3, #24
  401840:	e000      	b.n	401844 <_zbar_decode_code128+0x430>
    c &= 0x7f;
    if(c < 0x3d)
        return((c < 0x30 && c != 0x17) ? 0x10 : 0x20);
  401842:	2320      	movs	r3, #32
        ? (get_width(dcode, 0) + get_width(dcode, 2) + get_width(dcode, 4))
        : (get_width(dcode, 1) + get_width(dcode, 3) + get_width(dcode, 5));
    bars = bars * 11 * 4 / s;
    chk = calc_check(c);
    dbprintf(2, " bars=%d chk=%d", bars, chk);
    if(chk - 7 > bars || bars > chk + 7)
  401844:	b25b      	sxtb	r3, r3
  401846:	1fd8      	subs	r0, r3, #7
  401848:	4282      	cmp	r2, r0
  40184a:	f0c0 85d6 	bcc.w	4023fa <_zbar_decode_code128+0xfe6>
  40184e:	3307      	adds	r3, #7
  401850:	429a      	cmp	r2, r3
  401852:	f200 85d2 	bhi.w	4023fa <_zbar_decode_code128+0xfe6>
        return(-1);

    return(c & 0x7f);
  401856:	f001 067f 	and.w	r6, r1, #127	; 0x7f
  40185a:	e002      	b.n	401862 <_zbar_decode_code128+0x44e>
        return(-1);
    dbprintf(2, " sig=%04x", sig);
    /* lookup edge signature */
    c = (sig & 0x4444) ? decode_hi(sig) : decode_lo(sig);
    if(c == -1)
        return(-1);
  40185c:	26ff      	movs	r6, #255	; 0xff
  40185e:	e000      	b.n	401862 <_zbar_decode_code128+0x44e>
  401860:	26ff      	movs	r6, #255	; 0xff
    dbprintf(2, "      code128[%c%02d+%x]:",
             (dcode128->direction) ? '<' : '>',
             dcode128->character, dcode128->element);

    c = decode6(dcode);
    if(dcode128->character < 0) {
  401862:	f8b4 3104 	ldrh.w	r3, [r4, #260]	; 0x104
  401866:	f343 130b 	sbfx	r3, r3, #4, #12
  40186a:	b29d      	uxth	r5, r3
  40186c:	b21b      	sxth	r3, r3
  40186e:	2b00      	cmp	r3, #0
  401870:	da35      	bge.n	4018de <_zbar_decode_code128+0x4ca>
        unsigned qz;
        dbprintf(2, " c=%02x", c);
        if(c < START_A || c > STOP_REV || c == STOP_FWD) {
  401872:	b2f2      	uxtb	r2, r6
  401874:	f1a2 0367 	sub.w	r3, r2, #103	; 0x67
  401878:	b2db      	uxtb	r3, r3
  40187a:	2b04      	cmp	r3, #4
  40187c:	f200 8544 	bhi.w	402308 <_zbar_decode_code128+0xef4>
  401880:	b273      	sxtb	r3, r6
  401882:	2b6a      	cmp	r3, #106	; 0x6a
  401884:	f000 8542 	beq.w	40230c <_zbar_decode_code128+0xef8>
  401888:	7823      	ldrb	r3, [r4, #0]
  40188a:	3b06      	subs	r3, #6
  40188c:	f003 030f 	and.w	r3, r3, #15
  401890:	eb04 0383 	add.w	r3, r4, r3, lsl #2
  401894:	685b      	ldr	r3, [r3, #4]
            dbprintf(2, " [invalid]\n");
            return(0);
        }
        qz = get_width(dcode, 6);
        if(qz && qz < (dcode128->s6 * 3) / 4) {
  401896:	b13b      	cbz	r3, 4018a8 <_zbar_decode_code128+0x494>
  401898:	f8d4 1108 	ldr.w	r1, [r4, #264]	; 0x108
  40189c:	eb01 0141 	add.w	r1, r1, r1, lsl #1
  4018a0:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
  4018a4:	f0c0 8534 	bcc.w	402310 <_zbar_decode_code128+0xefc>
            dbprintf(2, " [invalid qz %d]\n", qz);
            return(0);
        }
        /* decoded valid start/stop */
        /* initialize state */
        dcode128->character = 1;
  4018a8:	f8b4 3104 	ldrh.w	r3, [r4, #260]	; 0x104
  4018ac:	2101      	movs	r1, #1
  4018ae:	f361 130f 	bfi	r3, r1, #4, #12
  4018b2:	f8a4 3104 	strh.w	r3, [r4, #260]	; 0x104
        if(c == STOP_REV) {
  4018b6:	b271      	sxtb	r1, r6
  4018b8:	296b      	cmp	r1, #107	; 0x6b
            dcode128->direction = ZBAR_BAR;
  4018ba:	f894 3104 	ldrb.w	r3, [r4, #260]	; 0x104
            dcode128->element = 7;
  4018be:	bf0c      	ite	eq
  4018c0:	f043 030f 	orreq.w	r3, r3, #15
        }
        else
            dcode128->direction = ZBAR_SPACE;
  4018c4:	f36f 0300 	bfcne	r3, #0, #1
  4018c8:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
        dcode128->start = c;
  4018cc:	f884 2106 	strb.w	r2, [r4, #262]	; 0x106
        dcode128->width = dcode128->s6;
  4018d0:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
  4018d4:	f8c4 310c 	str.w	r3, [r4, #268]	; 0x10c
        dbprintf(2, " dir=%x [valid start]\n", dcode128->direction);
        return(0);
  4018d8:	2000      	movs	r0, #0
  4018da:	f000 bdf0 	b.w	4024be <_zbar_decode_code128+0x10aa>
    }
    else if(c < 0 || size_buf(dcode, dcode128->character + 1)) {
  4018de:	f016 0f80 	tst.w	r6, #128	; 0x80
  4018e2:	d11d      	bne.n	401920 <_zbar_decode_code128+0x50c>
  4018e4:	b22d      	sxth	r5, r5
  4018e6:	3501      	adds	r5, #1
/* ensure output buffer has sufficient allocation for request */
static inline char size_buf (zbar_decoder_t *dcode,
                             unsigned len)
{
    unsigned char *buf;
    if(len <= BUFFER_MIN)
  4018e8:	2d20      	cmp	r5, #32
  4018ea:	f240 858e 	bls.w	40240a <_zbar_decode_code128+0xff6>
        return(0);
    if(len < dcode->buf_alloc)
  4018ee:	6d63      	ldr	r3, [r4, #84]	; 0x54
  4018f0:	429d      	cmp	r5, r3
  4018f2:	f0c0 858a 	bcc.w	40240a <_zbar_decode_code128+0xff6>
        /* FIXME size reduction heuristic? */
        return(0);
    if(len > BUFFER_MAX)
  4018f6:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
  4018fa:	d811      	bhi.n	401920 <_zbar_decode_code128+0x50c>
        return(1);
    if(len < dcode->buf_alloc + BUFFER_INCR) {
  4018fc:	3310      	adds	r3, #16
  4018fe:	429d      	cmp	r5, r3
  401900:	d205      	bcs.n	40190e <_zbar_decode_code128+0x4fa>
  401902:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
  401906:	bf28      	it	cs
  401908:	f44f 7380 	movcs.w	r3, #256	; 0x100
  40190c:	461d      	mov	r5, r3
        len = dcode->buf_alloc + BUFFER_INCR;
        if(len > BUFFER_MAX)
            len = BUFFER_MAX;
    }
    buf = realloc(dcode->buf, len);
  40190e:	6de0      	ldr	r0, [r4, #92]	; 0x5c
  401910:	4629      	mov	r1, r5
  401912:	4b3a      	ldr	r3, [pc, #232]	; (4019fc <_zbar_decode_code128+0x5e8>)
  401914:	4798      	blx	r3
    if(!buf)
  401916:	b118      	cbz	r0, 401920 <_zbar_decode_code128+0x50c>
        return(1);
    dcode->buf = buf;
  401918:	65e0      	str	r0, [r4, #92]	; 0x5c
    dcode->buf_alloc = len;
  40191a:	6565      	str	r5, [r4, #84]	; 0x54
  40191c:	f000 bd75 	b.w	40240a <_zbar_decode_code128+0xff6>
        dbprintf(1, (c < 0) ? " [aborted]\n" : " [overflow]\n");
        if(dcode128->character > 1)
  401920:	f8b4 3104 	ldrh.w	r3, [r4, #260]	; 0x104
  401924:	f343 130b 	sbfx	r3, r3, #4, #12
  401928:	2b01      	cmp	r3, #1
  40192a:	dd17      	ble.n	40195c <_zbar_decode_code128+0x548>

/* check and release shared state lock */
static inline char release_lock (zbar_decoder_t *dcode,
                                 zbar_symbol_type_t req)
{
    zassert(dcode->lock == req, 1, "lock=%d req=%d\n",
  40192c:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
  401930:	2b80      	cmp	r3, #128	; 0x80
  401932:	d010      	beq.n	401956 <_zbar_decode_code128+0x542>
  401934:	4a28      	ldr	r2, [pc, #160]	; (4019d8 <_zbar_decode_code128+0x5c4>)
  401936:	6812      	ldr	r2, [r2, #0]
  401938:	68d0      	ldr	r0, [r2, #12]
  40193a:	4a31      	ldr	r2, [pc, #196]	; (401a00 <_zbar_decode_code128+0x5ec>)
  40193c:	9200      	str	r2, [sp, #0]
  40193e:	4a31      	ldr	r2, [pc, #196]	; (401a04 <_zbar_decode_code128+0x5f0>)
  401940:	9201      	str	r2, [sp, #4]
  401942:	9302      	str	r3, [sp, #8]
  401944:	2380      	movs	r3, #128	; 0x80
  401946:	9303      	str	r3, [sp, #12]
  401948:	492f      	ldr	r1, [pc, #188]	; (401a08 <_zbar_decode_code128+0x5f4>)
  40194a:	4a30      	ldr	r2, [pc, #192]	; (401a0c <_zbar_decode_code128+0x5f8>)
  40194c:	f240 1307 	movw	r3, #263	; 0x107
  401950:	4d26      	ldr	r5, [pc, #152]	; (4019ec <_zbar_decode_code128+0x5d8>)
  401952:	47a8      	blx	r5
  401954:	e002      	b.n	40195c <_zbar_decode_code128+0x548>
            dcode->lock, req);
    dcode->lock = 0;
  401956:	2300      	movs	r3, #0
  401958:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
            release_lock(dcode, ZBAR_CODE128);
        dcode128->character = -1;
  40195c:	f8b4 3104 	ldrh.w	r3, [r4, #260]	; 0x104
  401960:	f04f 32ff 	mov.w	r2, #4294967295
  401964:	f362 130f 	bfi	r3, r2, #4, #12
  401968:	f8a4 3104 	strh.w	r3, [r4, #260]	; 0x104
        return(0);
  40196c:	2000      	movs	r0, #0
  40196e:	f000 bda6 	b.w	4024be <_zbar_decode_code128+0x10aa>
    }
    else {
        unsigned dw;
        if(dcode128->width > dcode128->s6)
            dw = dcode128->width - dcode128->s6;
  401972:	1a99      	subs	r1, r3, r2
  401974:	e000      	b.n	401978 <_zbar_decode_code128+0x564>
        else
            dw = dcode128->s6 - dcode128->width;
  401976:	1ad1      	subs	r1, r2, r3
        dw *= 4;
        if(dw > dcode128->width) {
  401978:	ebb3 0f81 	cmp.w	r3, r1, lsl #2
  40197c:	d248      	bcs.n	401a10 <_zbar_decode_code128+0x5fc>
            dbprintf(1, " [width var]\n");
            if(dcode128->character > 1)
  40197e:	f8b4 3104 	ldrh.w	r3, [r4, #260]	; 0x104
  401982:	f343 130b 	sbfx	r3, r3, #4, #12
  401986:	2b01      	cmp	r3, #1
  401988:	dd17      	ble.n	4019ba <_zbar_decode_code128+0x5a6>

/* check and release shared state lock */
static inline char release_lock (zbar_decoder_t *dcode,
                                 zbar_symbol_type_t req)
{
    zassert(dcode->lock == req, 1, "lock=%d req=%d\n",
  40198a:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
  40198e:	2b80      	cmp	r3, #128	; 0x80
  401990:	d010      	beq.n	4019b4 <_zbar_decode_code128+0x5a0>
  401992:	4a11      	ldr	r2, [pc, #68]	; (4019d8 <_zbar_decode_code128+0x5c4>)
  401994:	6812      	ldr	r2, [r2, #0]
  401996:	68d0      	ldr	r0, [r2, #12]
  401998:	4a19      	ldr	r2, [pc, #100]	; (401a00 <_zbar_decode_code128+0x5ec>)
  40199a:	9200      	str	r2, [sp, #0]
  40199c:	4a19      	ldr	r2, [pc, #100]	; (401a04 <_zbar_decode_code128+0x5f0>)
  40199e:	9201      	str	r2, [sp, #4]
  4019a0:	9302      	str	r3, [sp, #8]
  4019a2:	2380      	movs	r3, #128	; 0x80
  4019a4:	9303      	str	r3, [sp, #12]
  4019a6:	4918      	ldr	r1, [pc, #96]	; (401a08 <_zbar_decode_code128+0x5f4>)
  4019a8:	4a18      	ldr	r2, [pc, #96]	; (401a0c <_zbar_decode_code128+0x5f8>)
  4019aa:	f240 1307 	movw	r3, #263	; 0x107
  4019ae:	4d0f      	ldr	r5, [pc, #60]	; (4019ec <_zbar_decode_code128+0x5d8>)
  4019b0:	47a8      	blx	r5
  4019b2:	e002      	b.n	4019ba <_zbar_decode_code128+0x5a6>
            dcode->lock, req);
    dcode->lock = 0;
  4019b4:	2300      	movs	r3, #0
  4019b6:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
                release_lock(dcode, ZBAR_CODE128);
            dcode128->character = -1;
  4019ba:	f8b4 3104 	ldrh.w	r3, [r4, #260]	; 0x104
  4019be:	f04f 32ff 	mov.w	r2, #4294967295
  4019c2:	f362 130f 	bfi	r3, r2, #4, #12
  4019c6:	f8a4 3104 	strh.w	r3, [r4, #260]	; 0x104
            return(0);
  4019ca:	2000      	movs	r0, #0
  4019cc:	f000 bd77 	b.w	4024be <_zbar_decode_code128+0x10aa>
  4019d0:	0040f1c8 	.word	0x0040f1c8
  4019d4:	0040ec98 	.word	0x0040ec98
  4019d8:	20000440 	.word	0x20000440
  4019dc:	0040f234 	.word	0x0040f234
  4019e0:	0040edac 	.word	0x0040edac
  4019e4:	0040ed34 	.word	0x0040ed34
  4019e8:	0040ed84 	.word	0x0040ed84
  4019ec:	004066d1 	.word	0x004066d1
  4019f0:	0040f1c0 	.word	0x0040f1c0
  4019f4:	0040ee08 	.word	0x0040ee08
  4019f8:	0040edb8 	.word	0x0040edb8
  4019fc:	0040770d 	.word	0x0040770d
  401a00:	0040ed18 	.word	0x0040ed18
  401a04:	0040ee80 	.word	0x0040ee80
  401a08:	0040ee14 	.word	0x0040ee14
  401a0c:	0040ee50 	.word	0x0040ee50
        }
    }
    dcode128->width = dcode128->s6;
  401a10:	f8c4 210c 	str.w	r2, [r4, #268]	; 0x10c

    zassert(dcode->buf_alloc > dcode128->character, 0,
  401a14:	6d67      	ldr	r7, [r4, #84]	; 0x54
  401a16:	f8b4 5104 	ldrh.w	r5, [r4, #260]	; 0x104
  401a1a:	f345 150b 	sbfx	r5, r5, #4, #12
  401a1e:	b22b      	sxth	r3, r5
  401a20:	429f      	cmp	r7, r3
  401a22:	d81b      	bhi.n	401a5c <_zbar_decode_code128+0x648>
  401a24:	4bac      	ldr	r3, [pc, #688]	; (401cd8 <_zbar_decode_code128+0x8c4>)
  401a26:	681b      	ldr	r3, [r3, #0]
  401a28:	f8d3 800c 	ldr.w	r8, [r3, #12]
  401a2c:	6de0      	ldr	r0, [r4, #92]	; 0x5c
  401a2e:	4639      	mov	r1, r7
  401a30:	4baa      	ldr	r3, [pc, #680]	; (401cdc <_zbar_decode_code128+0x8c8>)
  401a32:	4798      	blx	r3
  401a34:	4baa      	ldr	r3, [pc, #680]	; (401ce0 <_zbar_decode_code128+0x8cc>)
  401a36:	9300      	str	r3, [sp, #0]
  401a38:	4baa      	ldr	r3, [pc, #680]	; (401ce4 <_zbar_decode_code128+0x8d0>)
  401a3a:	9301      	str	r3, [sp, #4]
  401a3c:	9702      	str	r7, [sp, #8]
  401a3e:	b22d      	sxth	r5, r5
  401a40:	9503      	str	r5, [sp, #12]
  401a42:	b271      	sxtb	r1, r6
  401a44:	9104      	str	r1, [sp, #16]
  401a46:	9005      	str	r0, [sp, #20]
  401a48:	4640      	mov	r0, r8
  401a4a:	49a7      	ldr	r1, [pc, #668]	; (401ce8 <_zbar_decode_code128+0x8d4>)
  401a4c:	4aa7      	ldr	r2, [pc, #668]	; (401cec <_zbar_decode_code128+0x8d8>)
  401a4e:	f44f 7304 	mov.w	r3, #528	; 0x210
  401a52:	4ca7      	ldr	r4, [pc, #668]	; (401cf0 <_zbar_decode_code128+0x8dc>)
  401a54:	47a0      	blx	r4
  401a56:	2000      	movs	r0, #0
  401a58:	f000 bd31 	b.w	4024be <_zbar_decode_code128+0x10aa>
            "alloc=%x idx=%x c=%02x %s\n",
            dcode->buf_alloc, dcode128->character, c,
            _zbar_decoder_buf_dump(dcode->buf, dcode->buf_alloc));

    if(dcode128->character == 1) {
  401a5c:	f8b4 3104 	ldrh.w	r3, [r4, #260]	; 0x104
  401a60:	f023 030f 	bic.w	r3, r3, #15
  401a64:	b29b      	uxth	r3, r3
  401a66:	2b10      	cmp	r3, #16
  401a68:	d10b      	bne.n	401a82 <_zbar_decode_code128+0x66e>

/* acquire shared state lock */
static inline char acquire_lock (zbar_decoder_t *dcode,
                                 zbar_symbol_type_t req)
{
    if(dcode->lock) {
  401a6a:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
  401a6e:	2b00      	cmp	r3, #0
  401a70:	f040 84d4 	bne.w	40241c <_zbar_decode_code128+0x1008>
        dbprintf(2, " [locked %d]\n", dcode->lock);
        return(1);
    }
    dcode->lock = req;
  401a74:	2380      	movs	r3, #128	; 0x80
  401a76:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
        /* lock shared resources */
        if(acquire_lock(dcode, ZBAR_CODE128)) {
            dcode128->character = -1;
            return(0);
        }
        dcode->buf[0] = dcode128->start;
  401a7a:	6de3      	ldr	r3, [r4, #92]	; 0x5c
  401a7c:	f894 2106 	ldrb.w	r2, [r4, #262]	; 0x106
  401a80:	701a      	strb	r2, [r3, #0]
    }

    dcode->buf[dcode128->character++] = c;
  401a82:	6de0      	ldr	r0, [r4, #92]	; 0x5c
  401a84:	f8b4 3104 	ldrh.w	r3, [r4, #260]	; 0x104
  401a88:	f343 120b 	sbfx	r2, r3, #4, #12
  401a8c:	f3c2 010b 	ubfx	r1, r2, #0, #12
  401a90:	3101      	adds	r1, #1
  401a92:	f361 130f 	bfi	r3, r1, #4, #12
  401a96:	f8a4 3104 	strh.w	r3, [r4, #260]	; 0x104
  401a9a:	b2f3      	uxtb	r3, r6
  401a9c:	b212      	sxth	r2, r2
  401a9e:	5483      	strb	r3, [r0, r2]

    if(dcode128->character > 2 &&
  401aa0:	f8b4 1104 	ldrh.w	r1, [r4, #260]	; 0x104
  401aa4:	f341 110b 	sbfx	r1, r1, #4, #12
  401aa8:	b20a      	sxth	r2, r1
  401aaa:	2a02      	cmp	r2, #2
  401aac:	f340 8432 	ble.w	402314 <_zbar_decode_code128+0xf00>
       ((dcode128->direction)
        ? c >= START_A && c <= START_C
  401ab0:	f894 2104 	ldrb.w	r2, [r4, #260]	; 0x104
        dcode->buf[0] = dcode128->start;
    }

    dcode->buf[dcode128->character++] = c;

    if(dcode128->character > 2 &&
  401ab4:	f012 0201 	ands.w	r2, r2, #1
  401ab8:	d006      	beq.n	401ac8 <_zbar_decode_code128+0x6b4>
       ((dcode128->direction)
        ? c >= START_A && c <= START_C
  401aba:	3b67      	subs	r3, #103	; 0x67
        dcode->buf[0] = dcode128->start;
    }

    dcode->buf[dcode128->character++] = c;

    if(dcode128->character > 2 &&
  401abc:	b2db      	uxtb	r3, r3
  401abe:	2b02      	cmp	r3, #2
  401ac0:	d908      	bls.n	401ad4 <_zbar_decode_code128+0x6c0>
            release_lock(dcode, ZBAR_CODE128);
        return(sym);
    }

    dbprintf(2, "\n");
    return(0);
  401ac2:	2000      	movs	r0, #0
  401ac4:	f000 bcfb 	b.w	4024be <_zbar_decode_code128+0x10aa>
        dcode->buf[0] = dcode128->start;
    }

    dcode->buf[dcode128->character++] = c;

    if(dcode128->character > 2 &&
  401ac8:	b276      	sxtb	r6, r6
  401aca:	2e6a      	cmp	r6, #106	; 0x6a
  401acc:	d005      	beq.n	401ada <_zbar_decode_code128+0x6c6>
            release_lock(dcode, ZBAR_CODE128);
        return(sym);
    }

    dbprintf(2, "\n");
    return(0);
  401ace:	2000      	movs	r0, #0
  401ad0:	f000 bcf5 	b.w	4024be <_zbar_decode_code128+0x10aa>
    code128_decoder_t *dcode128 = &dcode->code128;
    if(dcode128->character < 3)
        return(1);

    /* add in irregularly weighted start character */
    idx = (dcode128->direction) ? dcode128->character - 1 : 0;
  401ad4:	b20b      	sxth	r3, r1
  401ad6:	3b01      	subs	r3, #1
  401ad8:	e000      	b.n	401adc <_zbar_decode_code128+0x6c8>
  401ada:	2300      	movs	r3, #0
    sum = dcode->buf[idx];
  401adc:	6de0      	ldr	r0, [r4, #92]	; 0x5c
  401ade:	5cc6      	ldrb	r6, [r0, r3]
    if(sum >= 103)
  401ae0:	2e66      	cmp	r6, #102	; 0x66
  401ae2:	f240 84a5 	bls.w	402430 <_zbar_decode_code128+0x101c>
        sum -= 103;
  401ae6:	3e67      	subs	r6, #103	; 0x67

    /* calculate sum in reverse to avoid multiply operations */
    for(i = dcode128->character - 3; i; i--) {
  401ae8:	fa0f fc81 	sxth.w	ip, r1
  401aec:	f1bc 0703 	subs.w	r7, ip, #3
  401af0:	d05c      	beq.n	401bac <_zbar_decode_code128+0x798>
        zassert(sum < 103, -1, "dir=%x i=%x sum=%x acc=%x %s\n",
  401af2:	2e66      	cmp	r6, #102	; 0x66
  401af4:	d920      	bls.n	401b38 <_zbar_decode_code128+0x724>
  401af6:	e002      	b.n	401afe <_zbar_decode_code128+0x6ea>
  401af8:	2e66      	cmp	r6, #102	; 0x66
  401afa:	d923      	bls.n	401b44 <_zbar_decode_code128+0x730>
  401afc:	e000      	b.n	401b00 <_zbar_decode_code128+0x6ec>
    return(c & 0x7f);
}

static inline unsigned char validate_checksum (zbar_decoder_t *dcode)
{
    unsigned idx, sum, i, acc = 0;
  401afe:	2500      	movs	r5, #0
    if(sum >= 103)
        sum -= 103;

    /* calculate sum in reverse to avoid multiply operations */
    for(i = dcode128->character - 3; i; i--) {
        zassert(sum < 103, -1, "dir=%x i=%x sum=%x acc=%x %s\n",
  401b00:	4b75      	ldr	r3, [pc, #468]	; (401cd8 <_zbar_decode_code128+0x8c4>)
  401b02:	681b      	ldr	r3, [r3, #0]
  401b04:	f8d3 900c 	ldr.w	r9, [r3, #12]
  401b08:	f894 8104 	ldrb.w	r8, [r4, #260]	; 0x104
  401b0c:	f008 0801 	and.w	r8, r8, #1
  401b10:	b209      	sxth	r1, r1
  401b12:	4b72      	ldr	r3, [pc, #456]	; (401cdc <_zbar_decode_code128+0x8c8>)
  401b14:	4798      	blx	r3
  401b16:	4b77      	ldr	r3, [pc, #476]	; (401cf4 <_zbar_decode_code128+0x8e0>)
  401b18:	9300      	str	r3, [sp, #0]
  401b1a:	4b77      	ldr	r3, [pc, #476]	; (401cf8 <_zbar_decode_code128+0x8e4>)
  401b1c:	9301      	str	r3, [sp, #4]
  401b1e:	f8cd 8008 	str.w	r8, [sp, #8]
  401b22:	9703      	str	r7, [sp, #12]
  401b24:	9604      	str	r6, [sp, #16]
  401b26:	9505      	str	r5, [sp, #20]
  401b28:	9006      	str	r0, [sp, #24]
  401b2a:	4648      	mov	r0, r9
  401b2c:	4973      	ldr	r1, [pc, #460]	; (401cfc <_zbar_decode_code128+0x8e8>)
  401b2e:	4a6f      	ldr	r2, [pc, #444]	; (401cec <_zbar_decode_code128+0x8d8>)
  401b30:	23ff      	movs	r3, #255	; 0xff
  401b32:	4d6f      	ldr	r5, [pc, #444]	; (401cf0 <_zbar_decode_code128+0x8dc>)
  401b34:	47a8      	blx	r5
  401b36:	e39b      	b.n	402270 <_zbar_decode_code128+0xe5c>
  401b38:	b20b      	sxth	r3, r1
  401b3a:	3b01      	subs	r3, #1
  401b3c:	1bdb      	subs	r3, r3, r7
    return(c & 0x7f);
}

static inline unsigned char validate_checksum (zbar_decoder_t *dcode)
{
    unsigned idx, sum, i, acc = 0;
  401b3e:	3f01      	subs	r7, #1
  401b40:	2500      	movs	r5, #0
  401b42:	e001      	b.n	401b48 <_zbar_decode_code128+0x734>
  401b44:	3f01      	subs	r7, #1
  401b46:	3301      	adds	r3, #1
  401b48:	f107 0801 	add.w	r8, r7, #1
    /* calculate sum in reverse to avoid multiply operations */
    for(i = dcode128->character - 3; i; i--) {
        zassert(sum < 103, -1, "dir=%x i=%x sum=%x acc=%x %s\n",
                dcode128->direction, i, sum, acc,
                _zbar_decoder_buf_dump(dcode->buf, dcode128->character));
        idx = (dcode128->direction) ? dcode128->character - 1 - i : i;
  401b4c:	2a00      	cmp	r2, #0
  401b4e:	bf14      	ite	ne
  401b50:	469e      	movne	lr, r3
  401b52:	46c6      	moveq	lr, r8
        acc += dcode->buf[idx];
  401b54:	f810 e00e 	ldrb.w	lr, [r0, lr]
  401b58:	4475      	add	r5, lr
        if(acc >= 103)
  401b5a:	2d66      	cmp	r5, #102	; 0x66
  401b5c:	d91f      	bls.n	401b9e <_zbar_decode_code128+0x78a>
            acc -= 103;
  401b5e:	3d67      	subs	r5, #103	; 0x67
        zassert(acc < 103, -1, "dir=%x i=%x sum=%x acc=%x %s\n",
  401b60:	2d66      	cmp	r5, #102	; 0x66
  401b62:	d91c      	bls.n	401b9e <_zbar_decode_code128+0x78a>
  401b64:	4b5c      	ldr	r3, [pc, #368]	; (401cd8 <_zbar_decode_code128+0x8c4>)
  401b66:	681b      	ldr	r3, [r3, #0]
  401b68:	f8d3 900c 	ldr.w	r9, [r3, #12]
  401b6c:	f894 7104 	ldrb.w	r7, [r4, #260]	; 0x104
  401b70:	f007 0701 	and.w	r7, r7, #1
  401b74:	b209      	sxth	r1, r1
  401b76:	4b59      	ldr	r3, [pc, #356]	; (401cdc <_zbar_decode_code128+0x8c8>)
  401b78:	4798      	blx	r3
  401b7a:	4b5e      	ldr	r3, [pc, #376]	; (401cf4 <_zbar_decode_code128+0x8e0>)
  401b7c:	9300      	str	r3, [sp, #0]
  401b7e:	4b60      	ldr	r3, [pc, #384]	; (401d00 <_zbar_decode_code128+0x8ec>)
  401b80:	9301      	str	r3, [sp, #4]
  401b82:	9702      	str	r7, [sp, #8]
  401b84:	f8cd 800c 	str.w	r8, [sp, #12]
  401b88:	9604      	str	r6, [sp, #16]
  401b8a:	9505      	str	r5, [sp, #20]
  401b8c:	9006      	str	r0, [sp, #24]
  401b8e:	4648      	mov	r0, r9
  401b90:	495a      	ldr	r1, [pc, #360]	; (401cfc <_zbar_decode_code128+0x8e8>)
  401b92:	4a56      	ldr	r2, [pc, #344]	; (401cec <_zbar_decode_code128+0x8d8>)
  401b94:	f44f 7383 	mov.w	r3, #262	; 0x106
  401b98:	4d55      	ldr	r5, [pc, #340]	; (401cf0 <_zbar_decode_code128+0x8dc>)
  401b9a:	47a8      	blx	r5
  401b9c:	e368      	b.n	402270 <_zbar_decode_code128+0xe5c>
                dcode128->direction, i, sum, acc,
                _zbar_decoder_buf_dump(dcode->buf, dcode128->character));
        sum += acc;
  401b9e:	442e      	add	r6, r5
        if(sum >= 103)
  401ba0:	2e66      	cmp	r6, #102	; 0x66
  401ba2:	f240 844d 	bls.w	402440 <_zbar_decode_code128+0x102c>
            sum -= 103;
  401ba6:	3e67      	subs	r6, #103	; 0x67
    sum = dcode->buf[idx];
    if(sum >= 103)
        sum -= 103;

    /* calculate sum in reverse to avoid multiply operations */
    for(i = dcode128->character - 3; i; i--) {
  401ba8:	2f00      	cmp	r7, #0
  401baa:	d1a5      	bne.n	401af8 <_zbar_decode_code128+0x6e4>
        if(sum >= 103)
            sum -= 103;
    }

    /* and compare to check character */
    idx = (dcode128->direction) ? 1 : dcode128->character - 2;
  401bac:	b912      	cbnz	r2, 401bb4 <_zbar_decode_code128+0x7a0>
  401bae:	f1ac 0c02 	sub.w	ip, ip, #2
  401bb2:	e001      	b.n	401bb8 <_zbar_decode_code128+0x7a4>
  401bb4:	f04f 0c01 	mov.w	ip, #1
    check = dcode->buf[idx];
    dbprintf(2, " chk=%02x(%02x)", sum, check);
    err = (sum != check);
  401bb8:	f810 300c 	ldrb.w	r3, [r0, ip]
       ((dcode128->direction)
        ? c >= START_A && c <= START_C
        : c == STOP_FWD)) {
        /* FIXME STOP_FWD should check extra bar (and QZ!) */
        zbar_symbol_type_t sym = ZBAR_CODE128;
        if(validate_checksum(dcode) || postprocess(dcode))
  401bbc:	42b3      	cmp	r3, r6
  401bbe:	f040 846c 	bne.w	40249a <_zbar_decode_code128+0x1086>
{
    unsigned i, j, cexp;
    unsigned char code = 0, charset;
    code128_decoder_t *dcode128 = &dcode->code128;
    dbprintf(2, "\n    postproc len=%d", dcode128->character);
    dcode->modifiers = 0;
  401bc2:	2300      	movs	r3, #0
  401bc4:	64a3      	str	r3, [r4, #72]	; 0x48
    dcode->direction = 1 - 2 * dcode128->direction;
  401bc6:	f894 2104 	ldrb.w	r2, [r4, #260]	; 0x104
  401bca:	f002 0501 	and.w	r5, r2, #1
  401bce:	006b      	lsls	r3, r5, #1
  401bd0:	f1c3 0301 	rsb	r3, r3, #1
  401bd4:	64e3      	str	r3, [r4, #76]	; 0x4c
    if(dcode128->direction) {
  401bd6:	f012 0f01 	tst.w	r2, #1
  401bda:	d03e      	beq.n	401c5a <_zbar_decode_code128+0x846>
        /* reverse buffer */
        dbprintf(2, " (rev)");
        for(i = 0; i < dcode128->character / 2; i++) {
  401bdc:	f8b4 3104 	ldrh.w	r3, [r4, #260]	; 0x104
  401be0:	f343 130b 	sbfx	r3, r3, #4, #12
  401be4:	b299      	uxth	r1, r3
  401be6:	b21b      	sxth	r3, r3
  401be8:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
  401bec:	085b      	lsrs	r3, r3, #1
  401bee:	d015      	beq.n	401c1c <_zbar_decode_code128+0x808>
  401bf0:	2200      	movs	r2, #0
            unsigned j = dcode128->character - 1 - i;
  401bf2:	b20b      	sxth	r3, r1
  401bf4:	3b01      	subs	r3, #1
  401bf6:	1a9b      	subs	r3, r3, r2
            code = dcode->buf[i];
  401bf8:	6de1      	ldr	r1, [r4, #92]	; 0x5c
  401bfa:	5c88      	ldrb	r0, [r1, r2]
            dcode->buf[i] = dcode->buf[j];
  401bfc:	5ccd      	ldrb	r5, [r1, r3]
  401bfe:	548d      	strb	r5, [r1, r2]
            dcode->buf[j] = code;
  401c00:	6de1      	ldr	r1, [r4, #92]	; 0x5c
  401c02:	54c8      	strb	r0, [r1, r3]
    dcode->modifiers = 0;
    dcode->direction = 1 - 2 * dcode128->direction;
    if(dcode128->direction) {
        /* reverse buffer */
        dbprintf(2, " (rev)");
        for(i = 0; i < dcode128->character / 2; i++) {
  401c04:	3201      	adds	r2, #1
  401c06:	f8b4 3104 	ldrh.w	r3, [r4, #260]	; 0x104
  401c0a:	f343 130b 	sbfx	r3, r3, #4, #12
  401c0e:	b299      	uxth	r1, r3
  401c10:	b21b      	sxth	r3, r3
  401c12:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
  401c16:	ebb2 0f63 	cmp.w	r2, r3, asr #1
  401c1a:	d3ea      	bcc.n	401bf2 <_zbar_decode_code128+0x7de>
            unsigned j = dcode128->character - 1 - i;
            code = dcode->buf[i];
            dcode->buf[i] = dcode->buf[j];
            dcode->buf[j] = code;
        }
        zassert(dcode->buf[dcode128->character - 1] == STOP_REV, 1,
  401c1c:	6de0      	ldr	r0, [r4, #92]	; 0x5c
  401c1e:	fa00 f381 	sxtah	r3, r0, r1
  401c22:	f813 3c01 	ldrb.w	r3, [r3, #-1]
  401c26:	2b6b      	cmp	r3, #107	; 0x6b
  401c28:	d036      	beq.n	401c98 <_zbar_decode_code128+0x884>
  401c2a:	4b2b      	ldr	r3, [pc, #172]	; (401cd8 <_zbar_decode_code128+0x8c4>)
  401c2c:	681b      	ldr	r3, [r3, #0]
  401c2e:	68de      	ldr	r6, [r3, #12]
  401c30:	f894 5104 	ldrb.w	r5, [r4, #260]	; 0x104
  401c34:	f005 0501 	and.w	r5, r5, #1
  401c38:	b209      	sxth	r1, r1
  401c3a:	4b28      	ldr	r3, [pc, #160]	; (401cdc <_zbar_decode_code128+0x8c8>)
  401c3c:	4798      	blx	r3
  401c3e:	4b31      	ldr	r3, [pc, #196]	; (401d04 <_zbar_decode_code128+0x8f0>)
  401c40:	9300      	str	r3, [sp, #0]
  401c42:	4b31      	ldr	r3, [pc, #196]	; (401d08 <_zbar_decode_code128+0x8f4>)
  401c44:	9301      	str	r3, [sp, #4]
  401c46:	9502      	str	r5, [sp, #8]
  401c48:	9003      	str	r0, [sp, #12]
  401c4a:	4630      	mov	r0, r6
  401c4c:	492f      	ldr	r1, [pc, #188]	; (401d0c <_zbar_decode_code128+0x8f8>)
  401c4e:	4a27      	ldr	r2, [pc, #156]	; (401cec <_zbar_decode_code128+0x8d8>)
  401c50:	f240 135b 	movw	r3, #347	; 0x15b
  401c54:	4d26      	ldr	r5, [pc, #152]	; (401cf0 <_zbar_decode_code128+0x8dc>)
  401c56:	47a8      	blx	r5
  401c58:	e30a      	b.n	402270 <_zbar_decode_code128+0xe5c>
                "dir=%x %s\n", dcode128->direction,
                _zbar_decoder_buf_dump(dcode->buf, dcode->code128.character));
    }
    else
        zassert(dcode->buf[dcode128->character - 1] == STOP_FWD, 1,
  401c5a:	6de0      	ldr	r0, [r4, #92]	; 0x5c
  401c5c:	f8b4 1104 	ldrh.w	r1, [r4, #260]	; 0x104
  401c60:	f341 110b 	sbfx	r1, r1, #4, #12
  401c64:	fa00 f381 	sxtah	r3, r0, r1
  401c68:	f813 3c01 	ldrb.w	r3, [r3, #-1]
  401c6c:	2b6a      	cmp	r3, #106	; 0x6a
  401c6e:	d013      	beq.n	401c98 <_zbar_decode_code128+0x884>
  401c70:	4b19      	ldr	r3, [pc, #100]	; (401cd8 <_zbar_decode_code128+0x8c4>)
  401c72:	681b      	ldr	r3, [r3, #0]
  401c74:	68de      	ldr	r6, [r3, #12]
  401c76:	b209      	sxth	r1, r1
  401c78:	4b18      	ldr	r3, [pc, #96]	; (401cdc <_zbar_decode_code128+0x8c8>)
  401c7a:	4798      	blx	r3
  401c7c:	4b21      	ldr	r3, [pc, #132]	; (401d04 <_zbar_decode_code128+0x8f0>)
  401c7e:	9300      	str	r3, [sp, #0]
  401c80:	4b23      	ldr	r3, [pc, #140]	; (401d10 <_zbar_decode_code128+0x8fc>)
  401c82:	9301      	str	r3, [sp, #4]
  401c84:	9502      	str	r5, [sp, #8]
  401c86:	9003      	str	r0, [sp, #12]
  401c88:	4630      	mov	r0, r6
  401c8a:	4920      	ldr	r1, [pc, #128]	; (401d0c <_zbar_decode_code128+0x8f8>)
  401c8c:	4a17      	ldr	r2, [pc, #92]	; (401cec <_zbar_decode_code128+0x8d8>)
  401c8e:	f44f 73b0 	mov.w	r3, #352	; 0x160
  401c92:	4d17      	ldr	r5, [pc, #92]	; (401cf0 <_zbar_decode_code128+0x8dc>)
  401c94:	47a8      	blx	r5
  401c96:	e2eb      	b.n	402270 <_zbar_decode_code128+0xe5c>
                "dir=%x %s\n", dcode128->direction,
                _zbar_decoder_buf_dump(dcode->buf, dcode->code128.character));

    code = dcode->buf[0];
  401c98:	6de0      	ldr	r0, [r4, #92]	; 0x5c
  401c9a:	7803      	ldrb	r3, [r0, #0]
  401c9c:	930a      	str	r3, [sp, #40]	; 0x28
    zassert(code >= START_A && code <= START_C, 1, "%s\n",
  401c9e:	f1a3 0967 	sub.w	r9, r3, #103	; 0x67
  401ca2:	fa5f f989 	uxtb.w	r9, r9
  401ca6:	f1b9 0f02 	cmp.w	r9, #2
  401caa:	d937      	bls.n	401d1c <_zbar_decode_code128+0x908>
  401cac:	4b0a      	ldr	r3, [pc, #40]	; (401cd8 <_zbar_decode_code128+0x8c4>)
  401cae:	681b      	ldr	r3, [r3, #0]
  401cb0:	68dd      	ldr	r5, [r3, #12]
  401cb2:	f8b4 1104 	ldrh.w	r1, [r4, #260]	; 0x104
  401cb6:	f341 110b 	sbfx	r1, r1, #4, #12
  401cba:	4b08      	ldr	r3, [pc, #32]	; (401cdc <_zbar_decode_code128+0x8c8>)
  401cbc:	4798      	blx	r3
  401cbe:	4b11      	ldr	r3, [pc, #68]	; (401d04 <_zbar_decode_code128+0x8f0>)
  401cc0:	9300      	str	r3, [sp, #0]
  401cc2:	4b14      	ldr	r3, [pc, #80]	; (401d14 <_zbar_decode_code128+0x900>)
  401cc4:	9301      	str	r3, [sp, #4]
  401cc6:	9002      	str	r0, [sp, #8]
  401cc8:	4628      	mov	r0, r5
  401cca:	4913      	ldr	r1, [pc, #76]	; (401d18 <_zbar_decode_code128+0x904>)
  401ccc:	4a07      	ldr	r2, [pc, #28]	; (401cec <_zbar_decode_code128+0x8d8>)
  401cce:	f44f 73b2 	mov.w	r3, #356	; 0x164
  401cd2:	4d07      	ldr	r5, [pc, #28]	; (401cf0 <_zbar_decode_code128+0x8dc>)
  401cd4:	47a8      	blx	r5
  401cd6:	e2cb      	b.n	402270 <_zbar_decode_code128+0xe5c>
  401cd8:	20000440 	.word	0x20000440
  401cdc:	004030ad 	.word	0x004030ad
  401ce0:	0040f1a8 	.word	0x0040f1a8
  401ce4:	0040eedc 	.word	0x0040eedc
  401ce8:	0040ee94 	.word	0x0040ee94
  401cec:	0040ed84 	.word	0x0040ed84
  401cf0:	004066d1 	.word	0x004066d1
  401cf4:	0040ec74 	.word	0x0040ec74
  401cf8:	0040ef50 	.word	0x0040ef50
  401cfc:	0040ef04 	.word	0x0040ef04
  401d00:	0040ef5c 	.word	0x0040ef5c
  401d04:	0040ed28 	.word	0x0040ed28
  401d08:	0040efa0 	.word	0x0040efa0
  401d0c:	0040ef68 	.word	0x0040ef68
  401d10:	0040efd0 	.word	0x0040efd0
  401d14:	0040f030 	.word	0x0040f030
  401d18:	0040f000 	.word	0x0040f000
            _zbar_decoder_buf_dump(dcode->buf, dcode->code128.character));

    charset = code - START_A;
    cexp = (code == START_C) ? 1 : 0;
  401d1c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  401d1e:	2b69      	cmp	r3, #105	; 0x69
  401d20:	bf14      	ite	ne
  401d22:	2300      	movne	r3, #0
  401d24:	2301      	moveq	r3, #1
  401d26:	9309      	str	r3, [sp, #36]	; 0x24
    dbprintf(2, " start=%c", 'A' + charset);

    for(i = 1, j = 0; i < dcode128->character - 2; i++) {
  401d28:	f8b4 3104 	ldrh.w	r3, [r4, #260]	; 0x104
  401d2c:	f343 130b 	sbfx	r3, r3, #4, #12
  401d30:	b299      	uxth	r1, r3
  401d32:	b21b      	sxth	r3, r3
  401d34:	3b02      	subs	r3, #2
  401d36:	2b01      	cmp	r3, #1
  401d38:	f240 8196 	bls.w	402068 <_zbar_decode_code128+0xc54>
        unsigned char code = dcode->buf[i];
  401d3c:	f890 8001 	ldrb.w	r8, [r0, #1]
        zassert(!(code & 0x80), 1,
  401d40:	f018 0f80 	tst.w	r8, #128	; 0x80
  401d44:	d10a      	bne.n	401d5c <_zbar_decode_code128+0x948>
  401d46:	f04f 0b00 	mov.w	fp, #0
  401d4a:	2701      	movs	r7, #1
  401d4c:	e025      	b.n	401d9a <_zbar_decode_code128+0x986>
    charset = code - START_A;
    cexp = (code == START_C) ? 1 : 0;
    dbprintf(2, " start=%c", 'A' + charset);

    for(i = 1, j = 0; i < dcode128->character - 2; i++) {
        unsigned char code = dcode->buf[i];
  401d4e:	6de0      	ldr	r0, [r4, #92]	; 0x5c
  401d50:	f810 8007 	ldrb.w	r8, [r0, r7]
        zassert(!(code & 0x80), 1,
  401d54:	f018 0f80 	tst.w	r8, #128	; 0x80
  401d58:	d01f      	beq.n	401d9a <_zbar_decode_code128+0x986>
  401d5a:	e002      	b.n	401d62 <_zbar_decode_code128+0x94e>

    charset = code - START_A;
    cexp = (code == START_C) ? 1 : 0;
    dbprintf(2, " start=%c", 'A' + charset);

    for(i = 1, j = 0; i < dcode128->character - 2; i++) {
  401d5c:	f04f 0b00 	mov.w	fp, #0
  401d60:	2701      	movs	r7, #1
        unsigned char code = dcode->buf[i];
        zassert(!(code & 0x80), 1,
  401d62:	4b93      	ldr	r3, [pc, #588]	; (401fb0 <_zbar_decode_code128+0xb9c>)
  401d64:	681b      	ldr	r3, [r3, #0]
  401d66:	68de      	ldr	r6, [r3, #12]
  401d68:	b209      	sxth	r1, r1
  401d6a:	4b92      	ldr	r3, [pc, #584]	; (401fb4 <_zbar_decode_code128+0xba0>)
  401d6c:	4798      	blx	r3
  401d6e:	4b92      	ldr	r3, [pc, #584]	; (401fb8 <_zbar_decode_code128+0xba4>)
  401d70:	9300      	str	r3, [sp, #0]
  401d72:	4b92      	ldr	r3, [pc, #584]	; (401fbc <_zbar_decode_code128+0xba8>)
  401d74:	9301      	str	r3, [sp, #4]
  401d76:	9702      	str	r7, [sp, #8]
  401d78:	f8cd b00c 	str.w	fp, [sp, #12]
  401d7c:	f8cd 8010 	str.w	r8, [sp, #16]
  401d80:	f8cd 9014 	str.w	r9, [sp, #20]
  401d84:	9b09      	ldr	r3, [sp, #36]	; 0x24
  401d86:	9306      	str	r3, [sp, #24]
  401d88:	9007      	str	r0, [sp, #28]
  401d8a:	4630      	mov	r0, r6
  401d8c:	498c      	ldr	r1, [pc, #560]	; (401fc0 <_zbar_decode_code128+0xbac>)
  401d8e:	4a8d      	ldr	r2, [pc, #564]	; (401fc4 <_zbar_decode_code128+0xbb0>)
  401d90:	f240 136f 	movw	r3, #367	; 0x16f
  401d94:	4d8c      	ldr	r5, [pc, #560]	; (401fc8 <_zbar_decode_code128+0xbb4>)
  401d96:	47a8      	blx	r5
  401d98:	e26a      	b.n	402270 <_zbar_decode_code128+0xe5c>
                "i=%x j=%x code=%02x charset=%x cexp=%x %s\n",
                i, j, code, charset, cexp,
                _zbar_decoder_buf_dump(dcode->buf, dcode->code128.character));

        if((charset & 0x2) && (code < 100))
  401d9a:	f019 0f02 	tst.w	r9, #2
  401d9e:	f000 8354 	beq.w	40244a <_zbar_decode_code128+0x1036>
  401da2:	f1b8 0f63 	cmp.w	r8, #99	; 0x63
  401da6:	f240 8153 	bls.w	402050 <_zbar_decode_code128+0xc3c>
  401daa:	e353      	b.n	402454 <_zbar_decode_code128+0x1040>
            /* defer character set C for expansion */
            continue;
        else if(code < 0x60) {
            /* convert character set B to ASCII */
            code = code + 0x20;
  401dac:	f108 0320 	add.w	r3, r8, #32
  401db0:	b2db      	uxtb	r3, r3
            if((!charset || (charset == 0x81)) && (code >= 0x60))
  401db2:	f1b9 0f00 	cmp.w	r9, #0
  401db6:	f000 8357 	beq.w	402468 <_zbar_decode_code128+0x1054>
  401dba:	f1b9 0f81 	cmp.w	r9, #129	; 0x81
  401dbe:	d103      	bne.n	401dc8 <_zbar_decode_code128+0x9b4>
  401dc0:	e35b      	b.n	40247a <_zbar_decode_code128+0x1066>
                /* convert character set A to ASCII */
                code -= 0x60;
  401dc2:	f1a8 0340 	sub.w	r3, r8, #64	; 0x40
  401dc6:	b2db      	uxtb	r3, r3
            dcode->buf[j++] = code;
  401dc8:	f10b 0201 	add.w	r2, fp, #1
  401dcc:	f800 300b 	strb.w	r3, [r0, fp]
            if(charset & 0x80)
  401dd0:	f019 0f80 	tst.w	r9, #128	; 0x80
  401dd4:	f000 813b 	beq.w	40204e <_zbar_decode_code128+0xc3a>
                charset &= 0x7f;
  401dd8:	f009 097f 	and.w	r9, r9, #127	; 0x7f
  401ddc:	4693      	mov	fp, r2
  401dde:	e137      	b.n	402050 <_zbar_decode_code128+0xc3c>
        else {
            dbprintf(2, " %02x", code);
            if(charset & 0x2) {
                unsigned delta;
                /* expand character set C to ASCII */
                zassert(cexp, 1, "i=%x j=%x code=%02x charset=%x cexp=%x %s\n",
  401de0:	9b09      	ldr	r3, [sp, #36]	; 0x24
  401de2:	b9db      	cbnz	r3, 401e1c <_zbar_decode_code128+0xa08>
  401de4:	4b72      	ldr	r3, [pc, #456]	; (401fb0 <_zbar_decode_code128+0xb9c>)
  401de6:	681b      	ldr	r3, [r3, #0]
  401de8:	68dd      	ldr	r5, [r3, #12]
  401dea:	b209      	sxth	r1, r1
  401dec:	4b71      	ldr	r3, [pc, #452]	; (401fb4 <_zbar_decode_code128+0xba0>)
  401dee:	4798      	blx	r3
  401df0:	4b71      	ldr	r3, [pc, #452]	; (401fb8 <_zbar_decode_code128+0xba4>)
  401df2:	9300      	str	r3, [sp, #0]
  401df4:	4b75      	ldr	r3, [pc, #468]	; (401fcc <_zbar_decode_code128+0xbb8>)
  401df6:	9301      	str	r3, [sp, #4]
  401df8:	9702      	str	r7, [sp, #8]
  401dfa:	f8cd b00c 	str.w	fp, [sp, #12]
  401dfe:	f8cd 8010 	str.w	r8, [sp, #16]
  401e02:	f8cd 9014 	str.w	r9, [sp, #20]
  401e06:	2300      	movs	r3, #0
  401e08:	9306      	str	r3, [sp, #24]
  401e0a:	9007      	str	r0, [sp, #28]
  401e0c:	4628      	mov	r0, r5
  401e0e:	496c      	ldr	r1, [pc, #432]	; (401fc0 <_zbar_decode_code128+0xbac>)
  401e10:	4a6c      	ldr	r2, [pc, #432]	; (401fc4 <_zbar_decode_code128+0xbb0>)
  401e12:	f44f 73c3 	mov.w	r3, #390	; 0x186
  401e16:	4d6c      	ldr	r5, [pc, #432]	; (401fc8 <_zbar_decode_code128+0xbb4>)
  401e18:	47a8      	blx	r5
  401e1a:	e229      	b.n	402270 <_zbar_decode_code128+0xe5c>
                                      unsigned dst)
{
    unsigned i, j;

    /* expand buffer to accomodate 2x set C characters (2 digits per-char) */
    unsigned delta = end - start;
  401e1c:	9b09      	ldr	r3, [sp, #36]	; 0x24
  401e1e:	ebc3 0a07 	rsb	sl, r3, r7
    unsigned newlen = dcode->code128.character + delta;
  401e22:	fa0a f581 	sxtah	r5, sl, r1
/* ensure output buffer has sufficient allocation for request */
static inline char size_buf (zbar_decoder_t *dcode,
                             unsigned len)
{
    unsigned char *buf;
    if(len <= BUFFER_MIN)
  401e26:	2d20      	cmp	r5, #32
  401e28:	d915      	bls.n	401e56 <_zbar_decode_code128+0xa42>
        return(0);
    if(len < dcode->buf_alloc)
  401e2a:	6d66      	ldr	r6, [r4, #84]	; 0x54
  401e2c:	42b5      	cmp	r5, r6
  401e2e:	d312      	bcc.n	401e56 <_zbar_decode_code128+0xa42>
        /* FIXME size reduction heuristic? */
        return(0);
    if(len > BUFFER_MAX)
  401e30:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
  401e34:	d80f      	bhi.n	401e56 <_zbar_decode_code128+0xa42>
        return(1);
    if(len < dcode->buf_alloc + BUFFER_INCR) {
  401e36:	3610      	adds	r6, #16
  401e38:	42b5      	cmp	r5, r6
  401e3a:	d205      	bcs.n	401e48 <_zbar_decode_code128+0xa34>
  401e3c:	f5b6 7f80 	cmp.w	r6, #256	; 0x100
  401e40:	bf28      	it	cs
  401e42:	f44f 7680 	movcs.w	r6, #256	; 0x100
  401e46:	e000      	b.n	401e4a <_zbar_decode_code128+0xa36>
  401e48:	462e      	mov	r6, r5
        len = dcode->buf_alloc + BUFFER_INCR;
        if(len > BUFFER_MAX)
            len = BUFFER_MAX;
    }
    buf = realloc(dcode->buf, len);
  401e4a:	4631      	mov	r1, r6
  401e4c:	4b60      	ldr	r3, [pc, #384]	; (401fd0 <_zbar_decode_code128+0xbbc>)
  401e4e:	4798      	blx	r3
    if(!buf)
  401e50:	b108      	cbz	r0, 401e56 <_zbar_decode_code128+0xa42>
        return(1);
    dcode->buf = buf;
  401e52:	65e0      	str	r0, [r4, #92]	; 0x5c
    dcode->buf_alloc = len;
  401e54:	6566      	str	r6, [r4, #84]	; 0x54
    size_buf(dcode, newlen);

    /* relocate unprocessed data to end of buffer */
    memmove(dcode->buf + start + delta, dcode->buf + start,
  401e56:	6de1      	ldr	r1, [r4, #92]	; 0x5c
            dcode->code128.character - start);
  401e58:	f8b4 2104 	ldrh.w	r2, [r4, #260]	; 0x104
    unsigned delta = end - start;
    unsigned newlen = dcode->code128.character + delta;
    size_buf(dcode, newlen);

    /* relocate unprocessed data to end of buffer */
    memmove(dcode->buf + start + delta, dcode->buf + start,
  401e5c:	f342 120b 	sbfx	r2, r2, #4, #12
  401e60:	19c8      	adds	r0, r1, r7
  401e62:	9e09      	ldr	r6, [sp, #36]	; 0x24
  401e64:	4431      	add	r1, r6
  401e66:	1b92      	subs	r2, r2, r6
  401e68:	4b5a      	ldr	r3, [pc, #360]	; (401fd4 <_zbar_decode_code128+0xbc0>)
  401e6a:	4798      	blx	r3
            dcode->code128.character - start);
    dcode->code128.character = newlen;
  401e6c:	f8b4 3104 	ldrh.w	r3, [r4, #260]	; 0x104
  401e70:	f365 130f 	bfi	r3, r5, #4, #12
  401e74:	f8a4 3104 	strh.w	r3, [r4, #260]	; 0x104

    for(i = 0, j = dst; i < delta; i++, j += 2) {
  401e78:	f1ba 0f00 	cmp.w	sl, #0
  401e7c:	d06d      	beq.n	401f5a <_zbar_decode_code128+0xb46>
  401e7e:	465d      	mov	r5, fp
  401e80:	2600      	movs	r6, #0
        /* convert each set C character into two ASCII digits */
        unsigned char code = dcode->buf[start + delta + i];
  401e82:	6de2      	ldr	r2, [r4, #92]	; 0x5c
  401e84:	19d3      	adds	r3, r2, r7
  401e86:	5d9b      	ldrb	r3, [r3, r6]
        dcode->buf[j] = '0';
  401e88:	f04f 0130 	mov.w	r1, #48	; 0x30
  401e8c:	5551      	strb	r1, [r2, r5]
        if(code >= 50) {
  401e8e:	2b31      	cmp	r3, #49	; 0x31
  401e90:	d905      	bls.n	401e9e <_zbar_decode_code128+0xa8a>
            code -= 50;
  401e92:	3b32      	subs	r3, #50	; 0x32
  401e94:	b2db      	uxtb	r3, r3
            dcode->buf[j] += 5;
  401e96:	6de1      	ldr	r1, [r4, #92]	; 0x5c
  401e98:	5d4a      	ldrb	r2, [r1, r5]
  401e9a:	3205      	adds	r2, #5
  401e9c:	554a      	strb	r2, [r1, r5]
        }
        if(code >= 30) {
  401e9e:	2b1d      	cmp	r3, #29
  401ea0:	d905      	bls.n	401eae <_zbar_decode_code128+0xa9a>
            code -= 30;
  401ea2:	3b1e      	subs	r3, #30
  401ea4:	b2db      	uxtb	r3, r3
            dcode->buf[j] += 3;
  401ea6:	6de1      	ldr	r1, [r4, #92]	; 0x5c
  401ea8:	5d4a      	ldrb	r2, [r1, r5]
  401eaa:	3203      	adds	r2, #3
  401eac:	554a      	strb	r2, [r1, r5]
        }
        if(code >= 20) {
  401eae:	2b13      	cmp	r3, #19
  401eb0:	d905      	bls.n	401ebe <_zbar_decode_code128+0xaaa>
            code -= 20;
  401eb2:	3b14      	subs	r3, #20
  401eb4:	b2db      	uxtb	r3, r3
            dcode->buf[j] += 2;
  401eb6:	6de1      	ldr	r1, [r4, #92]	; 0x5c
  401eb8:	5d4a      	ldrb	r2, [r1, r5]
  401eba:	3202      	adds	r2, #2
  401ebc:	554a      	strb	r2, [r1, r5]
        }
        if(code >= 10) {
  401ebe:	2b09      	cmp	r3, #9
  401ec0:	f240 82df 	bls.w	402482 <_zbar_decode_code128+0x106e>
            code -= 10;
  401ec4:	3b0a      	subs	r3, #10
  401ec6:	b2db      	uxtb	r3, r3
            dcode->buf[j] += 1;
  401ec8:	6de1      	ldr	r1, [r4, #92]	; 0x5c
  401eca:	5d4a      	ldrb	r2, [r1, r5]
  401ecc:	3201      	adds	r2, #1
  401ece:	554a      	strb	r2, [r1, r5]
        }
        zassert(dcode->buf[j] <= '9', delta,
  401ed0:	6de0      	ldr	r0, [r4, #92]	; 0x5c
  401ed2:	5d42      	ldrb	r2, [r0, r5]
  401ed4:	2a39      	cmp	r2, #57	; 0x39
  401ed6:	d91b      	bls.n	401f10 <_zbar_decode_code128+0xafc>
  401ed8:	4b35      	ldr	r3, [pc, #212]	; (401fb0 <_zbar_decode_code128+0xb9c>)
  401eda:	681b      	ldr	r3, [r3, #0]
  401edc:	68db      	ldr	r3, [r3, #12]
  401ede:	930b      	str	r3, [sp, #44]	; 0x2c
  401ee0:	f8b4 1104 	ldrh.w	r1, [r4, #260]	; 0x104
  401ee4:	f341 110b 	sbfx	r1, r1, #4, #12
  401ee8:	4b32      	ldr	r3, [pc, #200]	; (401fb4 <_zbar_decode_code128+0xba0>)
  401eea:	4798      	blx	r3
  401eec:	4b3a      	ldr	r3, [pc, #232]	; (401fd8 <_zbar_decode_code128+0xbc4>)
  401eee:	9300      	str	r3, [sp, #0]
  401ef0:	4b3a      	ldr	r3, [pc, #232]	; (401fdc <_zbar_decode_code128+0xbc8>)
  401ef2:	9301      	str	r3, [sp, #4]
  401ef4:	9a09      	ldr	r2, [sp, #36]	; 0x24
  401ef6:	9202      	str	r2, [sp, #8]
  401ef8:	9703      	str	r7, [sp, #12]
  401efa:	9604      	str	r6, [sp, #16]
  401efc:	9505      	str	r5, [sp, #20]
  401efe:	9006      	str	r0, [sp, #24]
  401f00:	980b      	ldr	r0, [sp, #44]	; 0x2c
  401f02:	4937      	ldr	r1, [pc, #220]	; (401fe0 <_zbar_decode_code128+0xbcc>)
  401f04:	4a2f      	ldr	r2, [pc, #188]	; (401fc4 <_zbar_decode_code128+0xbb0>)
  401f06:	f44f 739f 	mov.w	r3, #318	; 0x13e
  401f0a:	4d2f      	ldr	r5, [pc, #188]	; (401fc8 <_zbar_decode_code128+0xbb4>)
  401f0c:	47a8      	blx	r5
  401f0e:	e024      	b.n	401f5a <_zbar_decode_code128+0xb46>
                "start=%x end=%x i=%x j=%x %s\n", start, end, i, j,
                _zbar_decoder_buf_dump(dcode->buf, dcode->code128.character));
        zassert(code <= 9, delta,
  401f10:	2b09      	cmp	r3, #9
  401f12:	d91b      	bls.n	401f4c <_zbar_decode_code128+0xb38>
  401f14:	4b26      	ldr	r3, [pc, #152]	; (401fb0 <_zbar_decode_code128+0xb9c>)
  401f16:	681b      	ldr	r3, [r3, #0]
  401f18:	68db      	ldr	r3, [r3, #12]
  401f1a:	930b      	str	r3, [sp, #44]	; 0x2c
  401f1c:	f8b4 1104 	ldrh.w	r1, [r4, #260]	; 0x104
  401f20:	f341 110b 	sbfx	r1, r1, #4, #12
  401f24:	4b23      	ldr	r3, [pc, #140]	; (401fb4 <_zbar_decode_code128+0xba0>)
  401f26:	4798      	blx	r3
  401f28:	4b2b      	ldr	r3, [pc, #172]	; (401fd8 <_zbar_decode_code128+0xbc4>)
  401f2a:	9300      	str	r3, [sp, #0]
  401f2c:	4b2d      	ldr	r3, [pc, #180]	; (401fe4 <_zbar_decode_code128+0xbd0>)
  401f2e:	9301      	str	r3, [sp, #4]
  401f30:	9a09      	ldr	r2, [sp, #36]	; 0x24
  401f32:	9202      	str	r2, [sp, #8]
  401f34:	9703      	str	r7, [sp, #12]
  401f36:	9604      	str	r6, [sp, #16]
  401f38:	9505      	str	r5, [sp, #20]
  401f3a:	9006      	str	r0, [sp, #24]
  401f3c:	980b      	ldr	r0, [sp, #44]	; 0x2c
  401f3e:	4928      	ldr	r1, [pc, #160]	; (401fe0 <_zbar_decode_code128+0xbcc>)
  401f40:	4a20      	ldr	r2, [pc, #128]	; (401fc4 <_zbar_decode_code128+0xbb0>)
  401f42:	f240 1341 	movw	r3, #321	; 0x141
  401f46:	4d20      	ldr	r5, [pc, #128]	; (401fc8 <_zbar_decode_code128+0xbb4>)
  401f48:	47a8      	blx	r5
  401f4a:	e006      	b.n	401f5a <_zbar_decode_code128+0xb46>
                "start=%x end=%x i=%x j=%x %s\n", start, end, i, j,
                _zbar_decoder_buf_dump(dcode->buf, dcode->code128.character));
        dcode->buf[j + 1] = '0' + code;
  401f4c:	4428      	add	r0, r5
  401f4e:	3330      	adds	r3, #48	; 0x30
  401f50:	7043      	strb	r3, [r0, #1]
    /* relocate unprocessed data to end of buffer */
    memmove(dcode->buf + start + delta, dcode->buf + start,
            dcode->code128.character - start);
    dcode->code128.character = newlen;

    for(i = 0, j = dst; i < delta; i++, j += 2) {
  401f52:	3601      	adds	r6, #1
  401f54:	3502      	adds	r5, #2
  401f56:	4556      	cmp	r6, sl
  401f58:	d193      	bne.n	401e82 <_zbar_decode_code128+0xa6e>
                zassert(cexp, 1, "i=%x j=%x code=%02x charset=%x cexp=%x %s\n",
                        i, j, code, charset, cexp,
                        _zbar_decoder_buf_dump(dcode->buf,
                                                dcode->code128.character));
                delta = postprocess_c(dcode, cexp, i, j);
                i += delta;
  401f5a:	4457      	add	r7, sl
                j += delta * 2;
  401f5c:	eb0b 0b4a 	add.w	fp, fp, sl, lsl #1
                cexp = 0;
  401f60:	2300      	movs	r3, #0
  401f62:	9309      	str	r3, [sp, #36]	; 0x24
            }
            if(code < CODE_C) {
  401f64:	f1b8 0f62 	cmp.w	r8, #98	; 0x62
  401f68:	d803      	bhi.n	401f72 <_zbar_decode_code128+0xb5e>
                if(code == SHIFT)
  401f6a:	d16a      	bne.n	402042 <_zbar_decode_code128+0xc2e>
                    charset |= 0x80;
  401f6c:	f049 0980 	orr.w	r9, r9, #128	; 0x80
  401f70:	e067      	b.n	402042 <_zbar_decode_code128+0xc2e>
                }
                else if(code == FNC3) {
                    /* FIXME FNC3 - initialize */
                }
            }
            else if(code == FNC1) {
  401f72:	f1b8 0f66 	cmp.w	r8, #102	; 0x66
  401f76:	d137      	bne.n	401fe8 <_zbar_decode_code128+0xbd4>
                /* FNC1 - Code 128 subsets or ASCII 0x1d */
                if(i == 1)
  401f78:	2f01      	cmp	r7, #1
  401f7a:	d104      	bne.n	401f86 <_zbar_decode_code128+0xb72>
                    dcode->modifiers |= MOD(ZBAR_MOD_GS1);
  401f7c:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  401f7e:	f043 0301 	orr.w	r3, r3, #1
  401f82:	64a3      	str	r3, [r4, #72]	; 0x48
  401f84:	e05d      	b.n	402042 <_zbar_decode_code128+0xc2e>
                else if(i == 2)
  401f86:	2f02      	cmp	r7, #2
  401f88:	d104      	bne.n	401f94 <_zbar_decode_code128+0xb80>
                    dcode->modifiers |= MOD(ZBAR_MOD_AIM);
  401f8a:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  401f8c:	f043 0302 	orr.w	r3, r3, #2
  401f90:	64a3      	str	r3, [r4, #72]	; 0x48
  401f92:	e056      	b.n	402042 <_zbar_decode_code128+0xc2e>
                else if(i < dcode->code128.character - 3)
  401f94:	f8b4 3104 	ldrh.w	r3, [r4, #260]	; 0x104
  401f98:	f343 130b 	sbfx	r3, r3, #4, #12
  401f9c:	3b03      	subs	r3, #3
  401f9e:	429f      	cmp	r7, r3
  401fa0:	d24f      	bcs.n	402042 <_zbar_decode_code128+0xc2e>
                    dcode->buf[j++] = 0x1d;
  401fa2:	6de3      	ldr	r3, [r4, #92]	; 0x5c
  401fa4:	221d      	movs	r2, #29
  401fa6:	f803 200b 	strb.w	r2, [r3, fp]
  401faa:	f10b 0b01 	add.w	fp, fp, #1
  401fae:	e048      	b.n	402042 <_zbar_decode_code128+0xc2e>
  401fb0:	20000440 	.word	0x20000440
  401fb4:	004030ad 	.word	0x004030ad
  401fb8:	0040ed28 	.word	0x0040ed28
  401fbc:	0040f0ac 	.word	0x0040f0ac
  401fc0:	0040f054 	.word	0x0040f054
  401fc4:	0040ed84 	.word	0x0040ed84
  401fc8:	004066d1 	.word	0x004066d1
  401fcc:	0040f0bc 	.word	0x0040f0bc
  401fd0:	0040770d 	.word	0x0040770d
  401fd4:	004075a1 	.word	0x004075a1
  401fd8:	0040ec88 	.word	0x0040ec88
  401fdc:	0040f110 	.word	0x0040f110
  401fe0:	0040f0c4 	.word	0x0040f0c4
  401fe4:	0040f128 	.word	0x0040f128
                /*else drop trailing FNC1 */
            }
            else if(code >= START_A) {
  401fe8:	f1b8 0f66 	cmp.w	r8, #102	; 0x66
  401fec:	f200 8140 	bhi.w	402270 <_zbar_decode_code128+0xe5c>
                dbprintf(1, " [truncated]\n");
                return(1);
            }
            else {
                unsigned char newset = CODE_A - code;
  401ff0:	f1c8 0365 	rsb	r3, r8, #101	; 0x65
  401ff4:	b2db      	uxtb	r3, r3
                zassert(code >= CODE_C && code <= CODE_A, 1,
  401ff6:	f1a8 0263 	sub.w	r2, r8, #99	; 0x63
  401ffa:	b2d2      	uxtb	r2, r2
  401ffc:	2a02      	cmp	r2, #2
  401ffe:	d91f      	bls.n	402040 <_zbar_decode_code128+0xc2c>
  402000:	4baa      	ldr	r3, [pc, #680]	; (4022ac <_zbar_decode_code128+0xe98>)
  402002:	681b      	ldr	r3, [r3, #0]
  402004:	68dd      	ldr	r5, [r3, #12]
  402006:	f8b4 1104 	ldrh.w	r1, [r4, #260]	; 0x104
  40200a:	6de0      	ldr	r0, [r4, #92]	; 0x5c
  40200c:	f341 110b 	sbfx	r1, r1, #4, #12
  402010:	4ba7      	ldr	r3, [pc, #668]	; (4022b0 <_zbar_decode_code128+0xe9c>)
  402012:	4798      	blx	r3
  402014:	4ba7      	ldr	r3, [pc, #668]	; (4022b4 <_zbar_decode_code128+0xea0>)
  402016:	9300      	str	r3, [sp, #0]
  402018:	4ba7      	ldr	r3, [pc, #668]	; (4022b8 <_zbar_decode_code128+0xea4>)
  40201a:	9301      	str	r3, [sp, #4]
  40201c:	9702      	str	r7, [sp, #8]
  40201e:	f8cd b00c 	str.w	fp, [sp, #12]
  402022:	f8cd 8010 	str.w	r8, [sp, #16]
  402026:	f8cd 9014 	str.w	r9, [sp, #20]
  40202a:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40202c:	9306      	str	r3, [sp, #24]
  40202e:	9007      	str	r0, [sp, #28]
  402030:	4628      	mov	r0, r5
  402032:	49a2      	ldr	r1, [pc, #648]	; (4022bc <_zbar_decode_code128+0xea8>)
  402034:	4aa2      	ldr	r2, [pc, #648]	; (4022c0 <_zbar_decode_code128+0xeac>)
  402036:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
  40203a:	4da2      	ldr	r5, [pc, #648]	; (4022c4 <_zbar_decode_code128+0xeb0>)
  40203c:	47a8      	blx	r5
  40203e:	e117      	b.n	402270 <_zbar_decode_code128+0xe5c>
  402040:	4699      	mov	r9, r3
                    charset = newset;
                else {
                    /* FIXME FNC4 - extended ASCII */
                }
            }
            if(charset & 0x2)
  402042:	f019 0f02 	tst.w	r9, #2
  402046:	d003      	beq.n	402050 <_zbar_decode_code128+0xc3c>
                cexp = i + 1;
  402048:	1c7b      	adds	r3, r7, #1
  40204a:	9309      	str	r3, [sp, #36]	; 0x24
  40204c:	e000      	b.n	402050 <_zbar_decode_code128+0xc3c>
            /* convert character set B to ASCII */
            code = code + 0x20;
            if((!charset || (charset == 0x81)) && (code >= 0x60))
                /* convert character set A to ASCII */
                code -= 0x60;
            dcode->buf[j++] = code;
  40204e:	4693      	mov	fp, r2

    charset = code - START_A;
    cexp = (code == START_C) ? 1 : 0;
    dbprintf(2, " start=%c", 'A' + charset);

    for(i = 1, j = 0; i < dcode128->character - 2; i++) {
  402050:	3701      	adds	r7, #1
  402052:	f8b4 3104 	ldrh.w	r3, [r4, #260]	; 0x104
  402056:	f343 130b 	sbfx	r3, r3, #4, #12
  40205a:	b299      	uxth	r1, r3
  40205c:	b21b      	sxth	r3, r3
  40205e:	3b02      	subs	r3, #2
  402060:	429f      	cmp	r7, r3
  402062:	f4ff ae74 	bcc.w	401d4e <_zbar_decode_code128+0x93a>
  402066:	e002      	b.n	40206e <_zbar_decode_code128+0xc5a>
  402068:	f04f 0b00 	mov.w	fp, #0
  40206c:	2701      	movs	r7, #1
            }
            if(charset & 0x2)
                cexp = i + 1;
        }
    }
    if(charset & 0x2) {
  40206e:	f019 0f02 	tst.w	r9, #2
  402072:	f000 80c5 	beq.w	402200 <_zbar_decode_code128+0xdec>
        zassert(cexp, 1, "i=%x j=%x code=%02x charset=%x cexp=%x %s\n",
  402076:	9b09      	ldr	r3, [sp, #36]	; 0x24
  402078:	b9e3      	cbnz	r3, 4020b4 <_zbar_decode_code128+0xca0>
  40207a:	4b8c      	ldr	r3, [pc, #560]	; (4022ac <_zbar_decode_code128+0xe98>)
  40207c:	681b      	ldr	r3, [r3, #0]
  40207e:	68dd      	ldr	r5, [r3, #12]
  402080:	6de0      	ldr	r0, [r4, #92]	; 0x5c
  402082:	b209      	sxth	r1, r1
  402084:	4b8a      	ldr	r3, [pc, #552]	; (4022b0 <_zbar_decode_code128+0xe9c>)
  402086:	4798      	blx	r3
  402088:	4b8a      	ldr	r3, [pc, #552]	; (4022b4 <_zbar_decode_code128+0xea0>)
  40208a:	9300      	str	r3, [sp, #0]
  40208c:	4b8e      	ldr	r3, [pc, #568]	; (4022c8 <_zbar_decode_code128+0xeb4>)
  40208e:	9301      	str	r3, [sp, #4]
  402090:	9702      	str	r7, [sp, #8]
  402092:	f8cd b00c 	str.w	fp, [sp, #12]
  402096:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  402098:	9304      	str	r3, [sp, #16]
  40209a:	f8cd 9014 	str.w	r9, [sp, #20]
  40209e:	2300      	movs	r3, #0
  4020a0:	9306      	str	r3, [sp, #24]
  4020a2:	9007      	str	r0, [sp, #28]
  4020a4:	4628      	mov	r0, r5
  4020a6:	4985      	ldr	r1, [pc, #532]	; (4022bc <_zbar_decode_code128+0xea8>)
  4020a8:	4a85      	ldr	r2, [pc, #532]	; (4022c0 <_zbar_decode_code128+0xeac>)
  4020aa:	f240 13b9 	movw	r3, #441	; 0x1b9
  4020ae:	4d85      	ldr	r5, [pc, #532]	; (4022c4 <_zbar_decode_code128+0xeb0>)
  4020b0:	47a8      	blx	r5
  4020b2:	e0dd      	b.n	402270 <_zbar_decode_code128+0xe5c>
                                      unsigned dst)
{
    unsigned i, j;

    /* expand buffer to accomodate 2x set C characters (2 digits per-char) */
    unsigned delta = end - start;
  4020b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
  4020b6:	1afe      	subs	r6, r7, r3
    unsigned newlen = dcode->code128.character + delta;
  4020b8:	fa06 f881 	sxtah	r8, r6, r1
/* ensure output buffer has sufficient allocation for request */
static inline char size_buf (zbar_decoder_t *dcode,
                             unsigned len)
{
    unsigned char *buf;
    if(len <= BUFFER_MIN)
  4020bc:	f1b8 0f20 	cmp.w	r8, #32
  4020c0:	d917      	bls.n	4020f2 <_zbar_decode_code128+0xcde>
        return(0);
    if(len < dcode->buf_alloc)
  4020c2:	6d63      	ldr	r3, [r4, #84]	; 0x54
  4020c4:	4598      	cmp	r8, r3
  4020c6:	d314      	bcc.n	4020f2 <_zbar_decode_code128+0xcde>
        /* FIXME size reduction heuristic? */
        return(0);
    if(len > BUFFER_MAX)
  4020c8:	f5b8 7f80 	cmp.w	r8, #256	; 0x100
  4020cc:	d811      	bhi.n	4020f2 <_zbar_decode_code128+0xcde>
        return(1);
    if(len < dcode->buf_alloc + BUFFER_INCR) {
  4020ce:	3310      	adds	r3, #16
  4020d0:	4598      	cmp	r8, r3
  4020d2:	d206      	bcs.n	4020e2 <_zbar_decode_code128+0xcce>
  4020d4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
  4020d8:	bf28      	it	cs
  4020da:	f44f 7380 	movcs.w	r3, #256	; 0x100
  4020de:	461d      	mov	r5, r3
  4020e0:	e000      	b.n	4020e4 <_zbar_decode_code128+0xcd0>
  4020e2:	4645      	mov	r5, r8
        len = dcode->buf_alloc + BUFFER_INCR;
        if(len > BUFFER_MAX)
            len = BUFFER_MAX;
    }
    buf = realloc(dcode->buf, len);
  4020e4:	6de0      	ldr	r0, [r4, #92]	; 0x5c
  4020e6:	4629      	mov	r1, r5
  4020e8:	4b78      	ldr	r3, [pc, #480]	; (4022cc <_zbar_decode_code128+0xeb8>)
  4020ea:	4798      	blx	r3
    if(!buf)
  4020ec:	b108      	cbz	r0, 4020f2 <_zbar_decode_code128+0xcde>
        return(1);
    dcode->buf = buf;
  4020ee:	65e0      	str	r0, [r4, #92]	; 0x5c
    dcode->buf_alloc = len;
  4020f0:	6565      	str	r5, [r4, #84]	; 0x54
    size_buf(dcode, newlen);

    /* relocate unprocessed data to end of buffer */
    memmove(dcode->buf + start + delta, dcode->buf + start,
  4020f2:	6de1      	ldr	r1, [r4, #92]	; 0x5c
            dcode->code128.character - start);
  4020f4:	f8b4 2104 	ldrh.w	r2, [r4, #260]	; 0x104
    unsigned delta = end - start;
    unsigned newlen = dcode->code128.character + delta;
    size_buf(dcode, newlen);

    /* relocate unprocessed data to end of buffer */
    memmove(dcode->buf + start + delta, dcode->buf + start,
  4020f8:	f342 120b 	sbfx	r2, r2, #4, #12
  4020fc:	19c8      	adds	r0, r1, r7
  4020fe:	9d09      	ldr	r5, [sp, #36]	; 0x24
  402100:	4429      	add	r1, r5
  402102:	1b52      	subs	r2, r2, r5
  402104:	4b72      	ldr	r3, [pc, #456]	; (4022d0 <_zbar_decode_code128+0xebc>)
  402106:	4798      	blx	r3
            dcode->code128.character - start);
    dcode->code128.character = newlen;
  402108:	f8b4 3104 	ldrh.w	r3, [r4, #260]	; 0x104
  40210c:	f368 130f 	bfi	r3, r8, #4, #12
  402110:	f8a4 3104 	strh.w	r3, [r4, #260]	; 0x104

    for(i = 0, j = dst; i < delta; i++, j += 2) {
  402114:	2e00      	cmp	r6, #0
  402116:	d071      	beq.n	4021fc <_zbar_decode_code128+0xde8>
  402118:	465d      	mov	r5, fp
  40211a:	f04f 0800 	mov.w	r8, #0
        /* convert each set C character into two ASCII digits */
        unsigned char code = dcode->buf[start + delta + i];
        dcode->buf[j] = '0';
  40211e:	2130      	movs	r1, #48	; 0x30
            dcode->code128.character - start);
    dcode->code128.character = newlen;

    for(i = 0, j = dst; i < delta; i++, j += 2) {
        /* convert each set C character into two ASCII digits */
        unsigned char code = dcode->buf[start + delta + i];
  402120:	6de2      	ldr	r2, [r4, #92]	; 0x5c
  402122:	19d3      	adds	r3, r2, r7
  402124:	f813 3008 	ldrb.w	r3, [r3, r8]
        dcode->buf[j] = '0';
  402128:	5551      	strb	r1, [r2, r5]
        if(code >= 50) {
  40212a:	2b31      	cmp	r3, #49	; 0x31
  40212c:	d905      	bls.n	40213a <_zbar_decode_code128+0xd26>
            code -= 50;
  40212e:	3b32      	subs	r3, #50	; 0x32
  402130:	b2db      	uxtb	r3, r3
            dcode->buf[j] += 5;
  402132:	6de0      	ldr	r0, [r4, #92]	; 0x5c
  402134:	5d42      	ldrb	r2, [r0, r5]
  402136:	3205      	adds	r2, #5
  402138:	5542      	strb	r2, [r0, r5]
        }
        if(code >= 30) {
  40213a:	2b1d      	cmp	r3, #29
  40213c:	d905      	bls.n	40214a <_zbar_decode_code128+0xd36>
            code -= 30;
  40213e:	3b1e      	subs	r3, #30
  402140:	b2db      	uxtb	r3, r3
            dcode->buf[j] += 3;
  402142:	6de0      	ldr	r0, [r4, #92]	; 0x5c
  402144:	5d42      	ldrb	r2, [r0, r5]
  402146:	3203      	adds	r2, #3
  402148:	5542      	strb	r2, [r0, r5]
        }
        if(code >= 20) {
  40214a:	2b13      	cmp	r3, #19
  40214c:	d905      	bls.n	40215a <_zbar_decode_code128+0xd46>
            code -= 20;
  40214e:	3b14      	subs	r3, #20
  402150:	b2db      	uxtb	r3, r3
            dcode->buf[j] += 2;
  402152:	6de0      	ldr	r0, [r4, #92]	; 0x5c
  402154:	5d42      	ldrb	r2, [r0, r5]
  402156:	3202      	adds	r2, #2
  402158:	5542      	strb	r2, [r0, r5]
        }
        if(code >= 10) {
  40215a:	2b09      	cmp	r3, #9
  40215c:	f240 8197 	bls.w	40248e <_zbar_decode_code128+0x107a>
            code -= 10;
  402160:	3b0a      	subs	r3, #10
  402162:	b2db      	uxtb	r3, r3
            dcode->buf[j] += 1;
  402164:	6de0      	ldr	r0, [r4, #92]	; 0x5c
  402166:	5d42      	ldrb	r2, [r0, r5]
  402168:	3201      	adds	r2, #1
  40216a:	5542      	strb	r2, [r0, r5]
        }
        zassert(dcode->buf[j] <= '9', delta,
  40216c:	6de0      	ldr	r0, [r4, #92]	; 0x5c
  40216e:	5d42      	ldrb	r2, [r0, r5]
  402170:	2a39      	cmp	r2, #57	; 0x39
  402172:	d91c      	bls.n	4021ae <_zbar_decode_code128+0xd9a>
  402174:	4b4d      	ldr	r3, [pc, #308]	; (4022ac <_zbar_decode_code128+0xe98>)
  402176:	681b      	ldr	r3, [r3, #0]
  402178:	f8d3 900c 	ldr.w	r9, [r3, #12]
  40217c:	f8b4 1104 	ldrh.w	r1, [r4, #260]	; 0x104
  402180:	f341 110b 	sbfx	r1, r1, #4, #12
  402184:	4b4a      	ldr	r3, [pc, #296]	; (4022b0 <_zbar_decode_code128+0xe9c>)
  402186:	4798      	blx	r3
  402188:	4b52      	ldr	r3, [pc, #328]	; (4022d4 <_zbar_decode_code128+0xec0>)
  40218a:	9300      	str	r3, [sp, #0]
  40218c:	4b52      	ldr	r3, [pc, #328]	; (4022d8 <_zbar_decode_code128+0xec4>)
  40218e:	9301      	str	r3, [sp, #4]
  402190:	9b09      	ldr	r3, [sp, #36]	; 0x24
  402192:	9302      	str	r3, [sp, #8]
  402194:	9703      	str	r7, [sp, #12]
  402196:	f8cd 8010 	str.w	r8, [sp, #16]
  40219a:	9505      	str	r5, [sp, #20]
  40219c:	9006      	str	r0, [sp, #24]
  40219e:	4648      	mov	r0, r9
  4021a0:	494e      	ldr	r1, [pc, #312]	; (4022dc <_zbar_decode_code128+0xec8>)
  4021a2:	4a47      	ldr	r2, [pc, #284]	; (4022c0 <_zbar_decode_code128+0xeac>)
  4021a4:	f44f 739f 	mov.w	r3, #318	; 0x13e
  4021a8:	4d46      	ldr	r5, [pc, #280]	; (4022c4 <_zbar_decode_code128+0xeb0>)
  4021aa:	47a8      	blx	r5
  4021ac:	e026      	b.n	4021fc <_zbar_decode_code128+0xde8>
                "start=%x end=%x i=%x j=%x %s\n", start, end, i, j,
                _zbar_decoder_buf_dump(dcode->buf, dcode->code128.character));
        zassert(code <= 9, delta,
  4021ae:	2b09      	cmp	r3, #9
  4021b0:	d91c      	bls.n	4021ec <_zbar_decode_code128+0xdd8>
  4021b2:	4b3e      	ldr	r3, [pc, #248]	; (4022ac <_zbar_decode_code128+0xe98>)
  4021b4:	681b      	ldr	r3, [r3, #0]
  4021b6:	f8d3 900c 	ldr.w	r9, [r3, #12]
  4021ba:	f8b4 1104 	ldrh.w	r1, [r4, #260]	; 0x104
  4021be:	f341 110b 	sbfx	r1, r1, #4, #12
  4021c2:	4b3b      	ldr	r3, [pc, #236]	; (4022b0 <_zbar_decode_code128+0xe9c>)
  4021c4:	4798      	blx	r3
  4021c6:	4b43      	ldr	r3, [pc, #268]	; (4022d4 <_zbar_decode_code128+0xec0>)
  4021c8:	9300      	str	r3, [sp, #0]
  4021ca:	4b45      	ldr	r3, [pc, #276]	; (4022e0 <_zbar_decode_code128+0xecc>)
  4021cc:	9301      	str	r3, [sp, #4]
  4021ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
  4021d0:	9302      	str	r3, [sp, #8]
  4021d2:	9703      	str	r7, [sp, #12]
  4021d4:	f8cd 8010 	str.w	r8, [sp, #16]
  4021d8:	9505      	str	r5, [sp, #20]
  4021da:	9006      	str	r0, [sp, #24]
  4021dc:	4648      	mov	r0, r9
  4021de:	493f      	ldr	r1, [pc, #252]	; (4022dc <_zbar_decode_code128+0xec8>)
  4021e0:	4a37      	ldr	r2, [pc, #220]	; (4022c0 <_zbar_decode_code128+0xeac>)
  4021e2:	f240 1341 	movw	r3, #321	; 0x141
  4021e6:	4d37      	ldr	r5, [pc, #220]	; (4022c4 <_zbar_decode_code128+0xeb0>)
  4021e8:	47a8      	blx	r5
  4021ea:	e007      	b.n	4021fc <_zbar_decode_code128+0xde8>
                "start=%x end=%x i=%x j=%x %s\n", start, end, i, j,
                _zbar_decoder_buf_dump(dcode->buf, dcode->code128.character));
        dcode->buf[j + 1] = '0' + code;
  4021ec:	4428      	add	r0, r5
  4021ee:	3330      	adds	r3, #48	; 0x30
  4021f0:	7043      	strb	r3, [r0, #1]
    /* relocate unprocessed data to end of buffer */
    memmove(dcode->buf + start + delta, dcode->buf + start,
            dcode->code128.character - start);
    dcode->code128.character = newlen;

    for(i = 0, j = dst; i < delta; i++, j += 2) {
  4021f2:	f108 0801 	add.w	r8, r8, #1
  4021f6:	3502      	adds	r5, #2
  4021f8:	45b0      	cmp	r8, r6
  4021fa:	d191      	bne.n	402120 <_zbar_decode_code128+0xd0c>
    if(charset & 0x2) {
        zassert(cexp, 1, "i=%x j=%x code=%02x charset=%x cexp=%x %s\n",
                i, j, code, charset, cexp,
                _zbar_decoder_buf_dump(dcode->buf,
                                        dcode->code128.character));
        j += postprocess_c(dcode, cexp, i, j) * 2;
  4021fc:	eb0b 0b46 	add.w	fp, fp, r6, lsl #1
    }
    zassert(j < dcode->buf_alloc, 1, "j=%02x %s\n", j,
  402200:	6d63      	ldr	r3, [r4, #84]	; 0x54
  402202:	455b      	cmp	r3, fp
  402204:	d818      	bhi.n	402238 <_zbar_decode_code128+0xe24>
  402206:	4b29      	ldr	r3, [pc, #164]	; (4022ac <_zbar_decode_code128+0xe98>)
  402208:	681b      	ldr	r3, [r3, #0]
  40220a:	68dd      	ldr	r5, [r3, #12]
  40220c:	f8b4 1104 	ldrh.w	r1, [r4, #260]	; 0x104
  402210:	6de0      	ldr	r0, [r4, #92]	; 0x5c
  402212:	f341 110b 	sbfx	r1, r1, #4, #12
  402216:	4b26      	ldr	r3, [pc, #152]	; (4022b0 <_zbar_decode_code128+0xe9c>)
  402218:	4798      	blx	r3
  40221a:	4b26      	ldr	r3, [pc, #152]	; (4022b4 <_zbar_decode_code128+0xea0>)
  40221c:	9300      	str	r3, [sp, #0]
  40221e:	4b31      	ldr	r3, [pc, #196]	; (4022e4 <_zbar_decode_code128+0xed0>)
  402220:	9301      	str	r3, [sp, #4]
  402222:	f8cd b008 	str.w	fp, [sp, #8]
  402226:	9003      	str	r0, [sp, #12]
  402228:	4628      	mov	r0, r5
  40222a:	492f      	ldr	r1, [pc, #188]	; (4022e8 <_zbar_decode_code128+0xed4>)
  40222c:	4a24      	ldr	r2, [pc, #144]	; (4022c0 <_zbar_decode_code128+0xeac>)
  40222e:	f240 13bd 	movw	r3, #445	; 0x1bd
  402232:	4d24      	ldr	r5, [pc, #144]	; (4022c4 <_zbar_decode_code128+0xeb0>)
  402234:	47a8      	blx	r5
  402236:	e01b      	b.n	402270 <_zbar_decode_code128+0xe5c>
            _zbar_decoder_buf_dump(dcode->buf, dcode->code128.character));
    dcode->buflen = j;
  402238:	f8c4 b058 	str.w	fp, [r4, #88]	; 0x58
    dcode->buf[j] = '\0';
  40223c:	6de3      	ldr	r3, [r4, #92]	; 0x5c
  40223e:	2200      	movs	r2, #0
  402240:	f803 200b 	strb.w	r2, [r3, fp]
    dcode->code128.character = j;
  402244:	f8b4 3104 	ldrh.w	r3, [r4, #260]	; 0x104
  402248:	f36b 130f 	bfi	r3, fp, #4, #12
  40224c:	f8a4 3104 	strh.w	r3, [r4, #260]	; 0x104
        : c == STOP_FWD)) {
        /* FIXME STOP_FWD should check extra bar (and QZ!) */
        zbar_symbol_type_t sym = ZBAR_CODE128;
        if(validate_checksum(dcode) || postprocess(dcode))
            sym = ZBAR_NONE;
        else if(dcode128->character < CFG(*dcode128, ZBAR_CFG_MIN_LEN) ||
  402250:	f343 130b 	sbfx	r3, r3, #4, #12
  402254:	f8d4 2114 	ldr.w	r2, [r4, #276]	; 0x114
  402258:	4293      	cmp	r3, r2
  40225a:	f2c0 811e 	blt.w	40249a <_zbar_decode_code128+0x1086>
                (CFG(*dcode128, ZBAR_CFG_MAX_LEN) > 0 &&
  40225e:	f8d4 2118 	ldr.w	r2, [r4, #280]	; 0x118
        : c == STOP_FWD)) {
        /* FIXME STOP_FWD should check extra bar (and QZ!) */
        zbar_symbol_type_t sym = ZBAR_CODE128;
        if(validate_checksum(dcode) || postprocess(dcode))
            sym = ZBAR_NONE;
        else if(dcode128->character < CFG(*dcode128, ZBAR_CFG_MIN_LEN) ||
  402262:	2a00      	cmp	r2, #0
  402264:	f340 8122 	ble.w	4024ac <_zbar_decode_code128+0x1098>
                (CFG(*dcode128, ZBAR_CFG_MAX_LEN) > 0 &&
  402268:	4293      	cmp	r3, r2
  40226a:	f300 8116 	bgt.w	40249a <_zbar_decode_code128+0x1086>
  40226e:	e11d      	b.n	4024ac <_zbar_decode_code128+0x1098>
            dbprintf(2, " [invalid len]\n");
            sym = ZBAR_NONE;
        }
        else
            dbprintf(2, " [valid end]\n");
        dcode128->character = -1;
  402270:	f8b4 3104 	ldrh.w	r3, [r4, #260]	; 0x104
  402274:	f04f 32ff 	mov.w	r2, #4294967295
  402278:	f362 130f 	bfi	r3, r2, #4, #12
  40227c:	f8a4 3104 	strh.w	r3, [r4, #260]	; 0x104

/* check and release shared state lock */
static inline char release_lock (zbar_decoder_t *dcode,
                                 zbar_symbol_type_t req)
{
    zassert(dcode->lock == req, 1, "lock=%d req=%d\n",
  402280:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
  402284:	2b80      	cmp	r3, #128	; 0x80
  402286:	d039      	beq.n	4022fc <_zbar_decode_code128+0xee8>
  402288:	4a08      	ldr	r2, [pc, #32]	; (4022ac <_zbar_decode_code128+0xe98>)
  40228a:	6812      	ldr	r2, [r2, #0]
  40228c:	4917      	ldr	r1, [pc, #92]	; (4022ec <_zbar_decode_code128+0xed8>)
  40228e:	9100      	str	r1, [sp, #0]
  402290:	4917      	ldr	r1, [pc, #92]	; (4022f0 <_zbar_decode_code128+0xedc>)
  402292:	9101      	str	r1, [sp, #4]
  402294:	9302      	str	r3, [sp, #8]
  402296:	2380      	movs	r3, #128	; 0x80
  402298:	9303      	str	r3, [sp, #12]
  40229a:	68d0      	ldr	r0, [r2, #12]
  40229c:	4915      	ldr	r1, [pc, #84]	; (4022f4 <_zbar_decode_code128+0xee0>)
  40229e:	4a16      	ldr	r2, [pc, #88]	; (4022f8 <_zbar_decode_code128+0xee4>)
  4022a0:	f240 1307 	movw	r3, #263	; 0x107
  4022a4:	4c07      	ldr	r4, [pc, #28]	; (4022c4 <_zbar_decode_code128+0xeb0>)
  4022a6:	47a0      	blx	r4
        if(!sym)
            release_lock(dcode, ZBAR_CODE128);
        return(sym);
  4022a8:	2000      	movs	r0, #0
  4022aa:	e108      	b.n	4024be <_zbar_decode_code128+0x10aa>
  4022ac:	20000440 	.word	0x20000440
  4022b0:	004030ad 	.word	0x004030ad
  4022b4:	0040ed28 	.word	0x0040ed28
  4022b8:	0040f134 	.word	0x0040f134
  4022bc:	0040f054 	.word	0x0040f054
  4022c0:	0040ed84 	.word	0x0040ed84
  4022c4:	004066d1 	.word	0x004066d1
  4022c8:	0040f0bc 	.word	0x0040f0bc
  4022cc:	0040770d 	.word	0x0040770d
  4022d0:	004075a1 	.word	0x004075a1
  4022d4:	0040ec88 	.word	0x0040ec88
  4022d8:	0040f110 	.word	0x0040f110
  4022dc:	0040f0c4 	.word	0x0040f0c4
  4022e0:	0040f128 	.word	0x0040f128
  4022e4:	0040f190 	.word	0x0040f190
  4022e8:	0040f158 	.word	0x0040f158
  4022ec:	0040ed18 	.word	0x0040ed18
  4022f0:	0040ee80 	.word	0x0040ee80
  4022f4:	0040ee14 	.word	0x0040ee14
  4022f8:	0040ee50 	.word	0x0040ee50
            dcode->lock, req);
    dcode->lock = 0;
  4022fc:	2000      	movs	r0, #0
  4022fe:	f8a4 0046 	strh.w	r0, [r4, #70]	; 0x46
  402302:	e0dc      	b.n	4024be <_zbar_decode_code128+0x10aa>
       ? get_color(dcode) != ZBAR_SPACE
       : (/* process every 6th element of active symbol */
          ++dcode128->element != 6 ||
          /* decode color based on direction */
          get_color(dcode) != dcode128->direction))
        return(0);
  402304:	2000      	movs	r0, #0
  402306:	e0da      	b.n	4024be <_zbar_decode_code128+0x10aa>
    if(dcode128->character < 0) {
        unsigned qz;
        dbprintf(2, " c=%02x", c);
        if(c < START_A || c > STOP_REV || c == STOP_FWD) {
            dbprintf(2, " [invalid]\n");
            return(0);
  402308:	2000      	movs	r0, #0
  40230a:	e0d8      	b.n	4024be <_zbar_decode_code128+0x10aa>
  40230c:	2000      	movs	r0, #0
  40230e:	e0d6      	b.n	4024be <_zbar_decode_code128+0x10aa>
        }
        qz = get_width(dcode, 6);
        if(qz && qz < (dcode128->s6 * 3) / 4) {
            dbprintf(2, " [invalid qz %d]\n", qz);
            return(0);
  402310:	2000      	movs	r0, #0
  402312:	e0d4      	b.n	4024be <_zbar_decode_code128+0x10aa>
            release_lock(dcode, ZBAR_CODE128);
        return(sym);
    }

    dbprintf(2, "\n");
    return(0);
  402314:	2000      	movs	r0, #0
  402316:	e0d2      	b.n	4024be <_zbar_decode_code128+0x10aa>
    if(dcode128->character < 0) {
        unsigned qz;
        dbprintf(2, " c=%02x", c);
        if(c < START_A || c > STOP_REV || c == STOP_FWD) {
            dbprintf(2, " [invalid]\n");
            return(0);
  402318:	2000      	movs	r0, #0
  40231a:	e0d0      	b.n	4024be <_zbar_decode_code128+0x10aa>
  40231c:	2000      	movs	r0, #0
  40231e:	e0ce      	b.n	4024be <_zbar_decode_code128+0x10aa>
               ((sig >>  4) & 0x00f0) |
               ((sig <<  4) & 0x0f00) |
               ((sig << 12) & 0xf000));
    dbprintf(2, " rev=%x", rev != 0);

    switch(sig) {
  402320:	f240 3141 	movw	r1, #833	; 0x341
  402324:	428b      	cmp	r3, r1
  402326:	d04b      	beq.n	4023c0 <_zbar_decode_code128+0xfac>
  402328:	dc16      	bgt.n	402358 <_zbar_decode_code128+0xf44>
  40232a:	2b34      	cmp	r3, #52	; 0x34
  40232c:	d054      	beq.n	4023d8 <_zbar_decode_code128+0xfc4>
  40232e:	dc06      	bgt.n	40233e <_zbar_decode_code128+0xf2a>
  402330:	2b14      	cmp	r3, #20
  402332:	f43f a9d8 	beq.w	4016e6 <_zbar_decode_code128+0x2d2>
  402336:	2b25      	cmp	r3, #37	; 0x25
  402338:	d051      	beq.n	4023de <_zbar_decode_code128+0xfca>
  40233a:	f7ff ba91 	b.w	401860 <_zbar_decode_code128+0x44c>
  40233e:	f240 1143 	movw	r1, #323	; 0x143
  402342:	428b      	cmp	r3, r1
  402344:	d042      	beq.n	4023cc <_zbar_decode_code128+0xfb8>
  402346:	f240 2143 	movw	r1, #579	; 0x243
  40234a:	428b      	cmp	r3, r1
  40234c:	d03b      	beq.n	4023c6 <_zbar_decode_code128+0xfb2>
  40234e:	f5b3 7f9a 	cmp.w	r3, #308	; 0x134
  402352:	f47f aa85 	bne.w	401860 <_zbar_decode_code128+0x44c>
  402356:	e03c      	b.n	4023d2 <_zbar_decode_code128+0xfbe>
  402358:	f241 1134 	movw	r1, #4404	; 0x1134
  40235c:	428b      	cmp	r3, r1
  40235e:	d023      	beq.n	4023a8 <_zbar_decode_code128+0xf94>
  402360:	dc0d      	bgt.n	40237e <_zbar_decode_code128+0xf6a>
  402362:	f241 0124 	movw	r1, #4132	; 0x1024
  402366:	428b      	cmp	r3, r1
  402368:	d024      	beq.n	4023b4 <_zbar_decode_code128+0xfa0>
  40236a:	f241 1114 	movw	r1, #4372	; 0x1114
  40236e:	428b      	cmp	r3, r1
  402370:	d01d      	beq.n	4023ae <_zbar_decode_code128+0xf9a>
  402372:	f240 3152 	movw	r1, #850	; 0x352
  402376:	428b      	cmp	r3, r1
  402378:	f47f aa72 	bne.w	401860 <_zbar_decode_code128+0x44c>
  40237c:	e01d      	b.n	4023ba <_zbar_decode_code128+0xfa6>
  40237e:	f241 2143 	movw	r1, #4675	; 0x1243
  402382:	428b      	cmp	r3, r1
  402384:	d00a      	beq.n	40239c <_zbar_decode_code128+0xf88>
  402386:	f241 4141 	movw	r1, #5185	; 0x1441
  40238a:	428b      	cmp	r3, r1
  40238c:	f43f a9b4 	beq.w	4016f8 <_zbar_decode_code128+0x2e4>
  402390:	f241 2142 	movw	r1, #4674	; 0x1242
  402394:	428b      	cmp	r3, r1
  402396:	f47f aa63 	bne.w	401860 <_zbar_decode_code128+0x44c>
  40239a:	e002      	b.n	4023a2 <_zbar_decode_code128+0xf8e>
    case 0x0352: idx = 0x7; break;
    case 0x1024: idx = 0x8; break;
    case 0x1114: idx = 0x9; break;
    case 0x1134: idx = 0xa; break;
    case 0x1242: idx = 0xb; break;
    case 0x1243: idx = 0xc; break;
  40239c:	230c      	movs	r3, #12
  40239e:	f7ff b9a3 	b.w	4016e8 <_zbar_decode_code128+0x2d4>
    case 0x0341: idx = 0x6; break;
    case 0x0352: idx = 0x7; break;
    case 0x1024: idx = 0x8; break;
    case 0x1114: idx = 0x9; break;
    case 0x1134: idx = 0xa; break;
    case 0x1242: idx = 0xb; break;
  4023a2:	230b      	movs	r3, #11
  4023a4:	f7ff b9a0 	b.w	4016e8 <_zbar_decode_code128+0x2d4>
    case 0x0243: idx = 0x5; break;
    case 0x0341: idx = 0x6; break;
    case 0x0352: idx = 0x7; break;
    case 0x1024: idx = 0x8; break;
    case 0x1114: idx = 0x9; break;
    case 0x1134: idx = 0xa; break;
  4023a8:	230a      	movs	r3, #10
  4023aa:	f7ff b99d 	b.w	4016e8 <_zbar_decode_code128+0x2d4>
    case 0x0143: idx = 0x4; break;
    case 0x0243: idx = 0x5; break;
    case 0x0341: idx = 0x6; break;
    case 0x0352: idx = 0x7; break;
    case 0x1024: idx = 0x8; break;
    case 0x1114: idx = 0x9; break;
  4023ae:	2309      	movs	r3, #9
  4023b0:	f7ff b99a 	b.w	4016e8 <_zbar_decode_code128+0x2d4>
    case 0x0134: idx = 0x3; break;
    case 0x0143: idx = 0x4; break;
    case 0x0243: idx = 0x5; break;
    case 0x0341: idx = 0x6; break;
    case 0x0352: idx = 0x7; break;
    case 0x1024: idx = 0x8; break;
  4023b4:	2308      	movs	r3, #8
  4023b6:	f7ff b997 	b.w	4016e8 <_zbar_decode_code128+0x2d4>
    case 0x0034: idx = 0x2; break;
    case 0x0134: idx = 0x3; break;
    case 0x0143: idx = 0x4; break;
    case 0x0243: idx = 0x5; break;
    case 0x0341: idx = 0x6; break;
    case 0x0352: idx = 0x7; break;
  4023ba:	2307      	movs	r3, #7
  4023bc:	f7ff b994 	b.w	4016e8 <_zbar_decode_code128+0x2d4>
    case 0x0025: idx = 0x1; break;
    case 0x0034: idx = 0x2; break;
    case 0x0134: idx = 0x3; break;
    case 0x0143: idx = 0x4; break;
    case 0x0243: idx = 0x5; break;
    case 0x0341: idx = 0x6; break;
  4023c0:	2306      	movs	r3, #6
  4023c2:	f7ff b991 	b.w	4016e8 <_zbar_decode_code128+0x2d4>
    case 0x0014: idx = 0x0; break;
    case 0x0025: idx = 0x1; break;
    case 0x0034: idx = 0x2; break;
    case 0x0134: idx = 0x3; break;
    case 0x0143: idx = 0x4; break;
    case 0x0243: idx = 0x5; break;
  4023c6:	2305      	movs	r3, #5
  4023c8:	f7ff b98e 	b.w	4016e8 <_zbar_decode_code128+0x2d4>
    switch(sig) {
    case 0x0014: idx = 0x0; break;
    case 0x0025: idx = 0x1; break;
    case 0x0034: idx = 0x2; break;
    case 0x0134: idx = 0x3; break;
    case 0x0143: idx = 0x4; break;
  4023cc:	2304      	movs	r3, #4
  4023ce:	f7ff b98b 	b.w	4016e8 <_zbar_decode_code128+0x2d4>

    switch(sig) {
    case 0x0014: idx = 0x0; break;
    case 0x0025: idx = 0x1; break;
    case 0x0034: idx = 0x2; break;
    case 0x0134: idx = 0x3; break;
  4023d2:	2303      	movs	r3, #3
  4023d4:	f7ff b988 	b.w	4016e8 <_zbar_decode_code128+0x2d4>
    dbprintf(2, " rev=%x", rev != 0);

    switch(sig) {
    case 0x0014: idx = 0x0; break;
    case 0x0025: idx = 0x1; break;
    case 0x0034: idx = 0x2; break;
  4023d8:	2302      	movs	r3, #2
  4023da:	f7ff b985 	b.w	4016e8 <_zbar_decode_code128+0x2d4>
               ((sig << 12) & 0xf000));
    dbprintf(2, " rev=%x", rev != 0);

    switch(sig) {
    case 0x0014: idx = 0x0; break;
    case 0x0025: idx = 0x1; break;
  4023de:	2301      	movs	r3, #1
  4023e0:	f7ff b982 	b.w	4016e8 <_zbar_decode_code128+0x2d4>
    dbprintf(2, "      code128[%c%02d+%x]:",
             (dcode128->direction) ? '<' : '>',
             dcode128->character, dcode128->element);

    c = decode6(dcode);
    if(dcode128->character < 0) {
  4023e4:	f8b4 3104 	ldrh.w	r3, [r4, #260]	; 0x104
  4023e8:	f343 130b 	sbfx	r3, r3, #4, #12
  4023ec:	b29d      	uxth	r5, r3
  4023ee:	b21b      	sxth	r3, r3
  4023f0:	2b00      	cmp	r3, #0
  4023f2:	db91      	blt.n	402318 <_zbar_decode_code128+0xf04>
        return(-1);
    dbprintf(2, " sig=%04x", sig);
    /* lookup edge signature */
    c = (sig & 0x4444) ? decode_hi(sig) : decode_lo(sig);
    if(c == -1)
        return(-1);
  4023f4:	26ff      	movs	r6, #255	; 0xff
  4023f6:	f7ff ba72 	b.w	4018de <_zbar_decode_code128+0x4ca>
    dbprintf(2, "      code128[%c%02d+%x]:",
             (dcode128->direction) ? '<' : '>',
             dcode128->character, dcode128->element);

    c = decode6(dcode);
    if(dcode128->character < 0) {
  4023fa:	f8b4 3104 	ldrh.w	r3, [r4, #260]	; 0x104
  4023fe:	f343 130b 	sbfx	r3, r3, #4, #12
  402402:	2b00      	cmp	r3, #0
  402404:	f6bf aa8c 	bge.w	401920 <_zbar_decode_code128+0x50c>
  402408:	e788      	b.n	40231c <_zbar_decode_code128+0xf08>
        dcode128->character = -1;
        return(0);
    }
    else {
        unsigned dw;
        if(dcode128->width > dcode128->s6)
  40240a:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
  40240e:	f8d4 2108 	ldr.w	r2, [r4, #264]	; 0x108
  402412:	4293      	cmp	r3, r2
  402414:	f63f aaad 	bhi.w	401972 <_zbar_decode_code128+0x55e>
  402418:	f7ff baad 	b.w	401976 <_zbar_decode_code128+0x562>
            _zbar_decoder_buf_dump(dcode->buf, dcode->buf_alloc));

    if(dcode128->character == 1) {
        /* lock shared resources */
        if(acquire_lock(dcode, ZBAR_CODE128)) {
            dcode128->character = -1;
  40241c:	f8b4 3104 	ldrh.w	r3, [r4, #260]	; 0x104
  402420:	f04f 32ff 	mov.w	r2, #4294967295
  402424:	f362 130f 	bfi	r3, r2, #4, #12
  402428:	f8a4 3104 	strh.w	r3, [r4, #260]	; 0x104
            return(0);
  40242c:	2000      	movs	r0, #0
  40242e:	e046      	b.n	4024be <_zbar_decode_code128+0x10aa>
    sum = dcode->buf[idx];
    if(sum >= 103)
        sum -= 103;

    /* calculate sum in reverse to avoid multiply operations */
    for(i = dcode128->character - 3; i; i--) {
  402430:	fa0f fc81 	sxth.w	ip, r1
  402434:	f1bc 0703 	subs.w	r7, ip, #3
  402438:	f47f ab7e 	bne.w	401b38 <_zbar_decode_code128+0x724>
  40243c:	f7ff bbb6 	b.w	401bac <_zbar_decode_code128+0x798>
  402440:	2f00      	cmp	r7, #0
  402442:	f47f ab7f 	bne.w	401b44 <_zbar_decode_code128+0x730>
  402446:	f7ff bbb1 	b.w	401bac <_zbar_decode_code128+0x798>
                _zbar_decoder_buf_dump(dcode->buf, dcode->code128.character));

        if((charset & 0x2) && (code < 100))
            /* defer character set C for expansion */
            continue;
        else if(code < 0x60) {
  40244a:	f1b8 0f5f 	cmp.w	r8, #95	; 0x5f
  40244e:	f67f acad 	bls.w	401dac <_zbar_decode_code128+0x998>
  402452:	e587      	b.n	401f64 <_zbar_decode_code128+0xb50>
  402454:	f1b8 0f5f 	cmp.w	r8, #95	; 0x5f
  402458:	f67f aca8 	bls.w	401dac <_zbar_decode_code128+0x998>
  40245c:	e4c0      	b.n	401de0 <_zbar_decode_code128+0x9cc>
            /* convert character set B to ASCII */
            code = code + 0x20;
            if((!charset || (charset == 0x81)) && (code >= 0x60))
                /* convert character set A to ASCII */
                code -= 0x60;
            dcode->buf[j++] = code;
  40245e:	f800 300b 	strb.w	r3, [r0, fp]
  402462:	f10b 0b01 	add.w	fp, fp, #1
  402466:	e5f3      	b.n	402050 <_zbar_decode_code128+0xc3c>
            /* defer character set C for expansion */
            continue;
        else if(code < 0x60) {
            /* convert character set B to ASCII */
            code = code + 0x20;
            if((!charset || (charset == 0x81)) && (code >= 0x60))
  402468:	2b5f      	cmp	r3, #95	; 0x5f
  40246a:	f63f acaa 	bhi.w	401dc2 <_zbar_decode_code128+0x9ae>
  40246e:	e7f6      	b.n	40245e <_zbar_decode_code128+0x104a>
                /* convert character set A to ASCII */
                code -= 0x60;
            dcode->buf[j++] = code;
  402470:	f10b 0201 	add.w	r2, fp, #1
  402474:	f800 300b 	strb.w	r3, [r0, fp]
  402478:	e4ae      	b.n	401dd8 <_zbar_decode_code128+0x9c4>
            /* defer character set C for expansion */
            continue;
        else if(code < 0x60) {
            /* convert character set B to ASCII */
            code = code + 0x20;
            if((!charset || (charset == 0x81)) && (code >= 0x60))
  40247a:	2b5f      	cmp	r3, #95	; 0x5f
  40247c:	f63f aca1 	bhi.w	401dc2 <_zbar_decode_code128+0x9ae>
  402480:	e7f6      	b.n	402470 <_zbar_decode_code128+0x105c>
        }
        if(code >= 10) {
            code -= 10;
            dcode->buf[j] += 1;
        }
        zassert(dcode->buf[j] <= '9', delta,
  402482:	6de0      	ldr	r0, [r4, #92]	; 0x5c
  402484:	5d42      	ldrb	r2, [r0, r5]
  402486:	2a39      	cmp	r2, #57	; 0x39
  402488:	f67f ad60 	bls.w	401f4c <_zbar_decode_code128+0xb38>
  40248c:	e524      	b.n	401ed8 <_zbar_decode_code128+0xac4>
  40248e:	6de0      	ldr	r0, [r4, #92]	; 0x5c
  402490:	5d42      	ldrb	r2, [r0, r5]
  402492:	2a39      	cmp	r2, #57	; 0x39
  402494:	f67f aeaa 	bls.w	4021ec <_zbar_decode_code128+0xdd8>
  402498:	e66c      	b.n	402174 <_zbar_decode_code128+0xd60>
            dbprintf(2, " [invalid len]\n");
            sym = ZBAR_NONE;
        }
        else
            dbprintf(2, " [valid end]\n");
        dcode128->character = -1;
  40249a:	f8b4 3104 	ldrh.w	r3, [r4, #260]	; 0x104
  40249e:	f04f 32ff 	mov.w	r2, #4294967295
  4024a2:	f362 130f 	bfi	r3, r2, #4, #12
  4024a6:	f8a4 3104 	strh.w	r3, [r4, #260]	; 0x104
  4024aa:	e6e9      	b.n	402280 <_zbar_decode_code128+0xe6c>
  4024ac:	f8b4 3104 	ldrh.w	r3, [r4, #260]	; 0x104
  4024b0:	f04f 32ff 	mov.w	r2, #4294967295
  4024b4:	f362 130f 	bfi	r3, r2, #4, #12
  4024b8:	f8a4 3104 	strh.w	r3, [r4, #260]	; 0x104
  4024bc:	2080      	movs	r0, #128	; 0x80
        return(sym);
    }

    dbprintf(2, "\n");
    return(0);
}
  4024be:	b00d      	add	sp, #52	; 0x34
  4024c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

004024c4 <_zbar_decode_code39>:
    w *= 4;
    return(ref - dref <= w && w <= ref + dref);
}

zbar_symbol_type_t _zbar_decode_code39 (zbar_decoder_t *dcode)
{
  4024c4:	b5f0      	push	{r4, r5, r6, r7, lr}
  4024c6:	b087      	sub	sp, #28
  4024c8:	4604      	mov	r4, r0

/* retrieve i-th previous element width */
static inline unsigned get_width (const zbar_decoder_t *dcode,
                                  unsigned char offset)
{
    return(dcode->w[(dcode->idx - offset) & (DECODE_WINDOW - 1)]);
  4024ca:	7807      	ldrb	r7, [r0, #0]
  4024cc:	4638      	mov	r0, r7
  4024ce:	f007 030f 	and.w	r3, r7, #15
  4024d2:	eb04 0383 	add.w	r3, r4, r3, lsl #2
  4024d6:	685d      	ldr	r5, [r3, #4]
  4024d8:	f8d4 20f0 	ldr.w	r2, [r4, #240]	; 0xf0
  4024dc:	442a      	add	r2, r5
  4024de:	f1a7 0309 	sub.w	r3, r7, #9
  4024e2:	f003 030f 	and.w	r3, r3, #15
  4024e6:	eb04 0383 	add.w	r3, r4, r3, lsl #2
    code39_decoder_t *dcode39 = &dcode->code39;

    /* update latest character width */
    dcode39->s9 -= get_width(dcode, 9);
    dcode39->s9 += get_width(dcode, 0);
  4024ea:	685b      	ldr	r3, [r3, #4]
  4024ec:	1ad2      	subs	r2, r2, r3
  4024ee:	f8c4 20f0 	str.w	r2, [r4, #240]	; 0xf0

    if(dcode39->character < 0) {
  4024f2:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
  4024f6:	f343 1e4b 	sbfx	lr, r3, #5, #12
  4024fa:	fa0f f38e 	sxth.w	r3, lr
  4024fe:	2b00      	cmp	r3, #0
  402500:	f280 80e2 	bge.w	4026c8 <_zbar_decode_code39+0x204>
        if(get_color(dcode) != ZBAR_BAR)
  402504:	f017 0f01 	tst.w	r7, #1
  402508:	f000 836d 	beq.w	402be6 <_zbar_decode_code39+0x722>

static inline signed char code39_decode9 (zbar_decoder_t *dcode)
{
    code39_decoder_t *dcode39 = &dcode->code39;

    if(dcode39->s9 < 9)
  40250c:	2a08      	cmp	r2, #8
  40250e:	f240 836e 	bls.w	402bee <_zbar_decode_code39+0x72a>
  402512:	2600      	movs	r6, #0
  402514:	4631      	mov	r1, r6
  402516:	1bbb      	subs	r3, r7, r6
  402518:	f003 030f 	and.w	r3, r3, #15
  40251c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
{
    /* result is encoded number of units - 2
     * (for use as zero based index)
     * or -1 if invalid
     */
    unsigned char E = ((e * n * 2 + 1) / s - 3) / 2;
  402520:	685b      	ldr	r3, [r3, #4]
  402522:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
  402526:	011b      	lsls	r3, r3, #4
  402528:	3301      	adds	r3, #1
  40252a:	fbb3 f3f2 	udiv	r3, r3, r2
  40252e:	3b03      	subs	r3, #3
    return((E >= n - 3) ? -1 : E);
  402530:	f3c3 0347 	ubfx	r3, r3, #1, #8
  402534:	2b44      	cmp	r3, #68	; 0x44
  402536:	f200 835a 	bhi.w	402bee <_zbar_decode_code39+0x72a>

static inline unsigned char code39_decode1 (unsigned char enc,
                                            unsigned e,
                                            unsigned s)
{
    unsigned char E = decode_e(e, s, 72);
  40253a:	b2db      	uxtb	r3, r3
    if(E > 18)
  40253c:	2b12      	cmp	r3, #18
  40253e:	f200 80bb 	bhi.w	4026b8 <_zbar_decode_code39+0x1f4>
        return(0xff);
    enc <<= 1;
  402542:	0049      	lsls	r1, r1, #1
  402544:	b2c9      	uxtb	r1, r1
    if(E > 6) {
  402546:	2b06      	cmp	r3, #6
        enc |= 1;
  402548:	bf88      	it	hi
  40254a:	f041 0101 	orrhi.w	r1, r1, #1

    /* threshold bar width ratios */
    unsigned char i, enc = 0;
    for(i = 0; i < 5; i++) {
        enc = code39_decode1(enc, get_width(dcode, i), dcode39->s9);
        if(enc == 0xff)
  40254e:	29ff      	cmp	r1, #255	; 0xff
  402550:	f000 834d 	beq.w	402bee <_zbar_decode_code39+0x72a>
  402554:	1c75      	adds	r5, r6, #1
  402556:	b2ed      	uxtb	r5, r5
  402558:	3601      	adds	r6, #1
    if(dcode39->s9 < 9)
        return(-1);

    /* threshold bar width ratios */
    unsigned char i, enc = 0;
    for(i = 0; i < 5; i++) {
  40255a:	2e05      	cmp	r6, #5
  40255c:	d1db      	bne.n	402516 <_zbar_decode_code39+0x52>
        enc = code39_decode1(enc, get_width(dcode, i), dcode39->s9);
        if(enc == 0xff)
            return(-1);
    }
    zassert(enc < 0x20, -1, " enc=%x s9=%x\n", enc, dcode39->s9);
  40255e:	291f      	cmp	r1, #31
  402560:	d90e      	bls.n	402580 <_zbar_decode_code39+0xbc>
  402562:	4bb4      	ldr	r3, [pc, #720]	; (402834 <_zbar_decode_code39+0x370>)
  402564:	681b      	ldr	r3, [r3, #0]
  402566:	48b4      	ldr	r0, [pc, #720]	; (402838 <_zbar_decode_code39+0x374>)
  402568:	9000      	str	r0, [sp, #0]
  40256a:	48b4      	ldr	r0, [pc, #720]	; (40283c <_zbar_decode_code39+0x378>)
  40256c:	9001      	str	r0, [sp, #4]
  40256e:	9102      	str	r1, [sp, #8]
  402570:	9203      	str	r2, [sp, #12]
  402572:	68d8      	ldr	r0, [r3, #12]
  402574:	49b2      	ldr	r1, [pc, #712]	; (402840 <_zbar_decode_code39+0x37c>)
  402576:	4ab3      	ldr	r2, [pc, #716]	; (402844 <_zbar_decode_code39+0x380>)
  402578:	23a0      	movs	r3, #160	; 0xa0
  40257a:	4cb3      	ldr	r4, [pc, #716]	; (402848 <_zbar_decode_code39+0x384>)
  40257c:	47a0      	blx	r4
  40257e:	e336      	b.n	402bee <_zbar_decode_code39+0x72a>

    /* lookup first 5 encoded widths for coarse decode */
    unsigned char idx = code39_hi[enc];
  402580:	4bb2      	ldr	r3, [pc, #712]	; (40284c <_zbar_decode_code39+0x388>)
  402582:	5c5e      	ldrb	r6, [r3, r1]
    if(idx == 0xff)
  402584:	2eff      	cmp	r6, #255	; 0xff
  402586:	f000 8332 	beq.w	402bee <_zbar_decode_code39+0x72a>
        return(-1);

    /* encode remaining widths (NB first encoded width is lost) */
    for(; i < 9; i++) {
  40258a:	2d08      	cmp	r5, #8
  40258c:	d822      	bhi.n	4025d4 <_zbar_decode_code39+0x110>

/* retrieve i-th previous element width */
static inline unsigned get_width (const zbar_decoder_t *dcode,
                                  unsigned char offset)
{
    return(dcode->w[(dcode->idx - offset) & (DECODE_WINDOW - 1)]);
  40258e:	1b43      	subs	r3, r0, r5
  402590:	f003 030f 	and.w	r3, r3, #15
  402594:	eb04 0383 	add.w	r3, r4, r3, lsl #2
{
    /* result is encoded number of units - 2
     * (for use as zero based index)
     * or -1 if invalid
     */
    unsigned char E = ((e * n * 2 + 1) / s - 3) / 2;
  402598:	685b      	ldr	r3, [r3, #4]
  40259a:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
  40259e:	011b      	lsls	r3, r3, #4
  4025a0:	3301      	adds	r3, #1
  4025a2:	fbb3 f3f2 	udiv	r3, r3, r2
  4025a6:	3b03      	subs	r3, #3
    return((E >= n - 3) ? -1 : E);
  4025a8:	f3c3 0347 	ubfx	r3, r3, #1, #8
  4025ac:	2b44      	cmp	r3, #68	; 0x44
  4025ae:	f200 831e 	bhi.w	402bee <_zbar_decode_code39+0x72a>

static inline unsigned char code39_decode1 (unsigned char enc,
                                            unsigned e,
                                            unsigned s)
{
    unsigned char E = decode_e(e, s, 72);
  4025b2:	b2db      	uxtb	r3, r3
    if(E > 18)
  4025b4:	2b12      	cmp	r3, #18
  4025b6:	f200 8081 	bhi.w	4026bc <_zbar_decode_code39+0x1f8>
        return(0xff);
    enc <<= 1;
  4025ba:	0049      	lsls	r1, r1, #1
  4025bc:	b2c9      	uxtb	r1, r1
    if(E > 6) {
  4025be:	2b06      	cmp	r3, #6
        enc |= 1;
  4025c0:	bf88      	it	hi
  4025c2:	f041 0101 	orrhi.w	r1, r1, #1
        return(-1);

    /* encode remaining widths (NB first encoded width is lost) */
    for(; i < 9; i++) {
        enc = code39_decode1(enc, get_width(dcode, i), dcode39->s9);
        if(enc == 0xff)
  4025c6:	29ff      	cmp	r1, #255	; 0xff
  4025c8:	f000 8311 	beq.w	402bee <_zbar_decode_code39+0x72a>
    unsigned char idx = code39_hi[enc];
    if(idx == 0xff)
        return(-1);

    /* encode remaining widths (NB first encoded width is lost) */
    for(; i < 9; i++) {
  4025cc:	3501      	adds	r5, #1
  4025ce:	b2ed      	uxtb	r5, r5
  4025d0:	2d09      	cmp	r5, #9
  4025d2:	d1dc      	bne.n	40258e <_zbar_decode_code39+0xca>
        enc = code39_decode1(enc, get_width(dcode, i), dcode39->s9);
        if(enc == 0xff)
            return(-1);
    }

    if((idx & 0xc0) == 0x80)
  4025d4:	f006 03c0 	and.w	r3, r6, #192	; 0xc0
  4025d8:	2b80      	cmp	r3, #128	; 0x80
  4025da:	d105      	bne.n	4025e8 <_zbar_decode_code39+0x124>
        idx = (idx & 0x3f) + ((enc >> 3) & 1);
  4025dc:	f006 063f 	and.w	r6, r6, #63	; 0x3f
  4025e0:	f3c1 03c0 	ubfx	r3, r1, #3, #1
  4025e4:	441e      	add	r6, r3
  4025e6:	e00d      	b.n	402604 <_zbar_decode_code39+0x140>
    else if((idx & 0xc0) == 0xc0)
  4025e8:	2bc0      	cmp	r3, #192	; 0xc0
  4025ea:	d105      	bne.n	4025f8 <_zbar_decode_code39+0x134>
        idx = (idx & 0x3f) + ((enc >> 2) & 1);
  4025ec:	f006 063f 	and.w	r6, r6, #63	; 0x3f
  4025f0:	f3c1 0380 	ubfx	r3, r1, #2, #1
  4025f4:	441e      	add	r6, r3
  4025f6:	e005      	b.n	402604 <_zbar_decode_code39+0x140>
    else if(idx & 0xc0)
  4025f8:	b123      	cbz	r3, 402604 <_zbar_decode_code39+0x140>
        idx = (idx & 0x3f) + ((enc >> 2) & 3);
  4025fa:	f006 063f 	and.w	r6, r6, #63	; 0x3f
  4025fe:	f3c1 0381 	ubfx	r3, r1, #2, #2
  402602:	441e      	add	r6, r3
    zassert(idx < 0x2c, -1, " idx=%x enc=%x s9=%x\n", idx, enc, dcode39->s9);
  402604:	2e2b      	cmp	r6, #43	; 0x2b
  402606:	d90f      	bls.n	402628 <_zbar_decode_code39+0x164>
  402608:	4b8a      	ldr	r3, [pc, #552]	; (402834 <_zbar_decode_code39+0x370>)
  40260a:	681b      	ldr	r3, [r3, #0]
  40260c:	488a      	ldr	r0, [pc, #552]	; (402838 <_zbar_decode_code39+0x374>)
  40260e:	9000      	str	r0, [sp, #0]
  402610:	488f      	ldr	r0, [pc, #572]	; (402850 <_zbar_decode_code39+0x38c>)
  402612:	9001      	str	r0, [sp, #4]
  402614:	9602      	str	r6, [sp, #8]
  402616:	9103      	str	r1, [sp, #12]
  402618:	9204      	str	r2, [sp, #16]
  40261a:	68d8      	ldr	r0, [r3, #12]
  40261c:	498d      	ldr	r1, [pc, #564]	; (402854 <_zbar_decode_code39+0x390>)
  40261e:	4a89      	ldr	r2, [pc, #548]	; (402844 <_zbar_decode_code39+0x380>)
  402620:	23b4      	movs	r3, #180	; 0xb4
  402622:	4c89      	ldr	r4, [pc, #548]	; (402848 <_zbar_decode_code39+0x384>)
  402624:	47a0      	blx	r4
  402626:	e2e2      	b.n	402bee <_zbar_decode_code39+0x72a>

    const char39_t *c = &code39_encodings[idx];
  402628:	4633      	mov	r3, r6
    dbprintf(2, " i=%02x chk=%02x c=%02x/%02x", idx, c->chk, c->fwd, c->rev);
    if(enc != c->chk)
  40262a:	eb06 0646 	add.w	r6, r6, r6, lsl #1
  40262e:	488a      	ldr	r0, [pc, #552]	; (402858 <_zbar_decode_code39+0x394>)
  402630:	5d80      	ldrb	r0, [r0, r6]
  402632:	4288      	cmp	r0, r1
  402634:	f040 82db 	bne.w	402bee <_zbar_decode_code39+0x72a>
        return(-1);

    dcode39->width = dcode39->s9;
  402638:	f8c4 20f4 	str.w	r2, [r4, #244]	; 0xf4
    return((dcode39->direction) ? c->rev : c->fwd);
  40263c:	f894 20ec 	ldrb.w	r2, [r4, #236]	; 0xec
  402640:	f012 0f01 	tst.w	r2, #1
  402644:	d004      	beq.n	402650 <_zbar_decode_code39+0x18c>
  402646:	4633      	mov	r3, r6
  402648:	4a83      	ldr	r2, [pc, #524]	; (402858 <_zbar_decode_code39+0x394>)
  40264a:	4413      	add	r3, r2
  40264c:	785b      	ldrb	r3, [r3, #1]
  40264e:	e004      	b.n	40265a <_zbar_decode_code39+0x196>
  402650:	eb03 0343 	add.w	r3, r3, r3, lsl #1
  402654:	4a80      	ldr	r2, [pc, #512]	; (402858 <_zbar_decode_code39+0x394>)
  402656:	4413      	add	r3, r2
  402658:	789b      	ldrb	r3, [r3, #2]
{
    code39_decoder_t *dcode39 = &dcode->code39;
    dbprintf(2, " s=%d ", dcode39->s9);

    signed char c = code39_decode9(dcode);
    if(c != 0x19 && c != 0x2b) {
  40265a:	b25a      	sxtb	r2, r3
  40265c:	2a19      	cmp	r2, #25
  40265e:	d001      	beq.n	402664 <_zbar_decode_code39+0x1a0>
  402660:	2a2b      	cmp	r2, #43	; 0x2b
  402662:	d12d      	bne.n	4026c0 <_zbar_decode_code39+0x1fc>
        dbprintf(2, "\n");
        return(ZBAR_NONE);
    }
    dcode39->direction ^= (c == 0x19);
  402664:	b25b      	sxtb	r3, r3
  402666:	f894 20ec 	ldrb.w	r2, [r4, #236]	; 0xec
  40266a:	f3c2 0100 	ubfx	r1, r2, #0, #1
  40266e:	2b19      	cmp	r3, #25
  402670:	bf14      	ite	ne
  402672:	460b      	movne	r3, r1
  402674:	f081 0301 	eoreq.w	r3, r1, #1
  402678:	f363 0200 	bfi	r2, r3, #0, #1
  40267c:	f884 20ec 	strb.w	r2, [r4, #236]	; 0xec

/* retrieve i-th previous element width */
static inline unsigned get_width (const zbar_decoder_t *dcode,
                                  unsigned char offset)
{
    return(dcode->w[(dcode->idx - offset) & (DECODE_WINDOW - 1)]);
  402680:	7823      	ldrb	r3, [r4, #0]
  402682:	3b09      	subs	r3, #9
  402684:	f003 030f 	and.w	r3, r3, #15
  402688:	eb04 0383 	add.w	r3, r4, r3, lsl #2
  40268c:	685b      	ldr	r3, [r3, #4]

    /* check leading quiet zone - spec is 10x */
    unsigned quiet = get_width(dcode, 9);
    if(quiet && quiet < dcode39->s9 / 2) {
  40268e:	b123      	cbz	r3, 40269a <_zbar_decode_code39+0x1d6>
  402690:	f8d4 20f0 	ldr.w	r2, [r4, #240]	; 0xf0
  402694:	ebb3 0f52 	cmp.w	r3, r2, lsr #1
  402698:	d314      	bcc.n	4026c4 <_zbar_decode_code39+0x200>
        dbprintf(2, " [invalid quiet]\n");
        return(ZBAR_NONE);
    }

    dcode39->element = 9;
  40269a:	f894 30ec 	ldrb.w	r3, [r4, #236]	; 0xec
  40269e:	2209      	movs	r2, #9
  4026a0:	f362 0344 	bfi	r3, r2, #1, #4
  4026a4:	f884 30ec 	strb.w	r3, [r4, #236]	; 0xec
    dcode39->character = 0;
  4026a8:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
  4026ac:	f36f 1350 	bfc	r3, #5, #12
  4026b0:	f8c4 30ec 	str.w	r3, [r4, #236]	; 0xec
    dbprintf(1, " dir=%x [valid start]\n", dcode39->direction);
    return(ZBAR_PARTIAL);
  4026b4:	2001      	movs	r0, #1
  4026b6:	e2dc      	b.n	402c72 <_zbar_decode_code39+0x7ae>
    dbprintf(2, " s=%d ", dcode39->s9);

    signed char c = code39_decode9(dcode);
    if(c != 0x19 && c != 0x2b) {
        dbprintf(2, "\n");
        return(ZBAR_NONE);
  4026b8:	2000      	movs	r0, #0
  4026ba:	e2da      	b.n	402c72 <_zbar_decode_code39+0x7ae>
  4026bc:	2000      	movs	r0, #0
  4026be:	e2d8      	b.n	402c72 <_zbar_decode_code39+0x7ae>
  4026c0:	2000      	movs	r0, #0
  4026c2:	e2d6      	b.n	402c72 <_zbar_decode_code39+0x7ae>

    /* check leading quiet zone - spec is 10x */
    unsigned quiet = get_width(dcode, 9);
    if(quiet && quiet < dcode39->s9 / 2) {
        dbprintf(2, " [invalid quiet]\n");
        return(ZBAR_NONE);
  4026c4:	2000      	movs	r0, #0

    if(dcode39->character < 0) {
        if(get_color(dcode) != ZBAR_BAR)
            return(ZBAR_NONE);
        dbprintf(2, "      code39:");
        return(code39_decode_start(dcode));
  4026c6:	e2d4      	b.n	402c72 <_zbar_decode_code39+0x7ae>
    }

    if(++dcode39->element < 9)
  4026c8:	f894 10ec 	ldrb.w	r1, [r4, #236]	; 0xec
  4026cc:	f3c1 0343 	ubfx	r3, r1, #1, #4
  4026d0:	3301      	adds	r3, #1
  4026d2:	f003 030f 	and.w	r3, r3, #15
  4026d6:	f363 0144 	bfi	r1, r3, #1, #4
  4026da:	f884 10ec 	strb.w	r1, [r4, #236]	; 0xec
  4026de:	2b08      	cmp	r3, #8
  4026e0:	f340 8283 	ble.w	402bea <_zbar_decode_code39+0x726>

    dbprintf(2, "      code39[%c%02d+%x]",
             (dcode39->direction) ? '<' : '>',
             dcode39->character, dcode39->element);

    if(dcode39->element == 10) {
  4026e4:	b2ce      	uxtb	r6, r1
  4026e6:	f006 031e 	and.w	r3, r6, #30
  4026ea:	2b14      	cmp	r3, #20
  4026ec:	f040 8104 	bne.w	4028f8 <_zbar_decode_code39+0x434>
        unsigned space = get_width(dcode, 0);
        if(dcode39->character &&
  4026f0:	f8d4 20ec 	ldr.w	r2, [r4, #236]	; 0xec
  4026f4:	4b59      	ldr	r3, [pc, #356]	; (40285c <_zbar_decode_code39+0x398>)
  4026f6:	4013      	ands	r3, r2
  4026f8:	2b00      	cmp	r3, #0
  4026fa:	f000 8283 	beq.w	402c04 <_zbar_decode_code39+0x740>
           dcode->buf[dcode39->character - 1] == 0x2b) {  /* STOP */
  4026fe:	6de3      	ldr	r3, [r4, #92]	; 0x5c
  402700:	fa03 f38e 	sxtah	r3, r3, lr
             (dcode39->direction) ? '<' : '>',
             dcode39->character, dcode39->element);

    if(dcode39->element == 10) {
        unsigned space = get_width(dcode, 0);
        if(dcode39->character &&
  402704:	f813 3c01 	ldrb.w	r3, [r3, #-1]
  402708:	2b2b      	cmp	r3, #43	; 0x2b
  40270a:	f040 8282 	bne.w	402c12 <_zbar_decode_code39+0x74e>
           dcode->buf[dcode39->character - 1] == 0x2b) {  /* STOP */
            /* trim STOP character */
            dcode39->character--;
  40270e:	f60e 73ff 	addw	r3, lr, #4095	; 0xfff
  402712:	f343 030b 	sbfx	r3, r3, #0, #12
  402716:	b29b      	uxth	r3, r3
  402718:	f363 1250 	bfi	r2, r3, #5, #12
  40271c:	f8c4 20ec 	str.w	r2, [r4, #236]	; 0xec
            zbar_symbol_type_t sym = ZBAR_NONE;

            /* trailing quiet zone check */
            if(space && space < dcode39->width / 2)
  402720:	b12d      	cbz	r5, 40272e <_zbar_decode_code39+0x26a>
  402722:	f8d4 20f4 	ldr.w	r2, [r4, #244]	; 0xf4
  402726:	ebb5 0f52 	cmp.w	r5, r2, lsr #1
  40272a:	f0c0 8262 	bcc.w	402bf2 <_zbar_decode_code39+0x72e>
                dbprintf(2, " [invalid qz]\n");
            else if(dcode39->character < CFG(*dcode39, ZBAR_CFG_MIN_LEN) ||
  40272e:	b21b      	sxth	r3, r3
  402730:	f8d4 20fc 	ldr.w	r2, [r4, #252]	; 0xfc
  402734:	4293      	cmp	r3, r2
  402736:	f2c0 825c 	blt.w	402bf2 <_zbar_decode_code39+0x72e>
                    (CFG(*dcode39, ZBAR_CFG_MAX_LEN) > 0 &&
  40273a:	f8d4 2100 	ldr.w	r2, [r4, #256]	; 0x100
            zbar_symbol_type_t sym = ZBAR_NONE;

            /* trailing quiet zone check */
            if(space && space < dcode39->width / 2)
                dbprintf(2, " [invalid qz]\n");
            else if(dcode39->character < CFG(*dcode39, ZBAR_CFG_MIN_LEN) ||
  40273e:	2a00      	cmp	r2, #0
  402740:	dd02      	ble.n	402748 <_zbar_decode_code39+0x284>
                    (CFG(*dcode39, ZBAR_CFG_MAX_LEN) > 0 &&
  402742:	4293      	cmp	r3, r2
  402744:	f300 8255 	bgt.w	402bf2 <_zbar_decode_code39+0x72e>
}

static inline int code39_postprocess (zbar_decoder_t *dcode)
{
    code39_decoder_t *dcode39 = &dcode->code39;
    dcode->direction = 1 - 2 * dcode39->direction;
  402748:	f894 20ec 	ldrb.w	r2, [r4, #236]	; 0xec
  40274c:	f002 0301 	and.w	r3, r2, #1
  402750:	005b      	lsls	r3, r3, #1
  402752:	f1c3 0301 	rsb	r3, r3, #1
  402756:	64e3      	str	r3, [r4, #76]	; 0x4c
    int i;
    if(dcode39->direction) {
  402758:	f012 0f01 	tst.w	r2, #1
  40275c:	d01d      	beq.n	40279a <_zbar_decode_code39+0x2d6>
        /* reverse buffer */
        dbprintf(2, " (rev)");
        for(i = 0; i < dcode39->character / 2; i++) {
  40275e:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
  402762:	f343 134b 	sbfx	r3, r3, #5, #12
  402766:	b29a      	uxth	r2, r3
  402768:	b21b      	sxth	r3, r3
  40276a:	2b01      	cmp	r3, #1
  40276c:	dd15      	ble.n	40279a <_zbar_decode_code39+0x2d6>
  40276e:	2100      	movs	r1, #0
            unsigned j = dcode39->character - 1 - i;
  402770:	b213      	sxth	r3, r2
  402772:	3b01      	subs	r3, #1
  402774:	1a5b      	subs	r3, r3, r1
            char code = dcode->buf[i];
  402776:	6de2      	ldr	r2, [r4, #92]	; 0x5c
  402778:	5c50      	ldrb	r0, [r2, r1]
            dcode->buf[i] = dcode->buf[j];
  40277a:	5cd5      	ldrb	r5, [r2, r3]
  40277c:	5455      	strb	r5, [r2, r1]
            dcode->buf[j] = code;
  40277e:	6de2      	ldr	r2, [r4, #92]	; 0x5c
  402780:	54d0      	strb	r0, [r2, r3]
    dcode->direction = 1 - 2 * dcode39->direction;
    int i;
    if(dcode39->direction) {
        /* reverse buffer */
        dbprintf(2, " (rev)");
        for(i = 0; i < dcode39->character / 2; i++) {
  402782:	3101      	adds	r1, #1
  402784:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
  402788:	f343 134b 	sbfx	r3, r3, #5, #12
  40278c:	b29a      	uxth	r2, r3
  40278e:	b21b      	sxth	r3, r3
  402790:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
  402794:	ebb1 0f63 	cmp.w	r1, r3, asr #1
  402798:	dbea      	blt.n	402770 <_zbar_decode_code39+0x2ac>
            char code = dcode->buf[i];
            dcode->buf[i] = dcode->buf[j];
            dcode->buf[j] = code;
        }
    }
    for(i = 0; i < dcode39->character; i++)
  40279a:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
  40279e:	f343 134b 	sbfx	r3, r3, #5, #12
  4027a2:	b299      	uxth	r1, r3
  4027a4:	b21b      	sxth	r3, r3
  4027a6:	2b00      	cmp	r3, #0
  4027a8:	dd14      	ble.n	4027d4 <_zbar_decode_code39+0x310>
  4027aa:	2500      	movs	r5, #0
        dcode->buf[i] = ((dcode->buf[i] < 0x2b)
  4027ac:	263f      	movs	r6, #63	; 0x3f
  4027ae:	482c      	ldr	r0, [pc, #176]	; (402860 <_zbar_decode_code39+0x39c>)
  4027b0:	6de3      	ldr	r3, [r4, #92]	; 0x5c
  4027b2:	195a      	adds	r2, r3, r5
  4027b4:	5d5b      	ldrb	r3, [r3, r5]
  4027b6:	2b2a      	cmp	r3, #42	; 0x2a
  4027b8:	bf94      	ite	ls
  4027ba:	5cc3      	ldrbls	r3, [r0, r3]
  4027bc:	4633      	movhi	r3, r6
  4027be:	7013      	strb	r3, [r2, #0]
            char code = dcode->buf[i];
            dcode->buf[i] = dcode->buf[j];
            dcode->buf[j] = code;
        }
    }
    for(i = 0; i < dcode39->character; i++)
  4027c0:	3501      	adds	r5, #1
  4027c2:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
  4027c6:	f343 134b 	sbfx	r3, r3, #5, #12
  4027ca:	b299      	uxth	r1, r3
  4027cc:	b21b      	sxth	r3, r3
  4027ce:	429d      	cmp	r5, r3
  4027d0:	dbee      	blt.n	4027b0 <_zbar_decode_code39+0x2ec>
  4027d2:	e000      	b.n	4027d6 <_zbar_decode_code39+0x312>
  4027d4:	2500      	movs	r5, #0
        dcode->buf[i] = ((dcode->buf[i] < 0x2b)
                         ? code39_characters[(unsigned)dcode->buf[i]]
                         : '?');
    zassert(i < dcode->buf_alloc, -1, "i=%02x %s\n", i,
  4027d6:	6d63      	ldr	r3, [r4, #84]	; 0x54
  4027d8:	429d      	cmp	r5, r3
  4027da:	d31b      	bcc.n	402814 <_zbar_decode_code39+0x350>
  4027dc:	4b15      	ldr	r3, [pc, #84]	; (402834 <_zbar_decode_code39+0x370>)
  4027de:	681b      	ldr	r3, [r3, #0]
  4027e0:	68de      	ldr	r6, [r3, #12]
  4027e2:	6de0      	ldr	r0, [r4, #92]	; 0x5c
  4027e4:	b209      	sxth	r1, r1
  4027e6:	4b1f      	ldr	r3, [pc, #124]	; (402864 <_zbar_decode_code39+0x3a0>)
  4027e8:	4798      	blx	r3
  4027ea:	4b1f      	ldr	r3, [pc, #124]	; (402868 <_zbar_decode_code39+0x3a4>)
  4027ec:	9300      	str	r3, [sp, #0]
  4027ee:	4b1f      	ldr	r3, [pc, #124]	; (40286c <_zbar_decode_code39+0x3a8>)
  4027f0:	9301      	str	r3, [sp, #4]
  4027f2:	9502      	str	r5, [sp, #8]
  4027f4:	9003      	str	r0, [sp, #12]
  4027f6:	4630      	mov	r0, r6
  4027f8:	491d      	ldr	r1, [pc, #116]	; (402870 <_zbar_decode_code39+0x3ac>)
  4027fa:	4a12      	ldr	r2, [pc, #72]	; (402844 <_zbar_decode_code39+0x380>)
  4027fc:	23ec      	movs	r3, #236	; 0xec
  4027fe:	4d12      	ldr	r5, [pc, #72]	; (402848 <_zbar_decode_code39+0x384>)
  402800:	47a8      	blx	r5
            else if(!code39_postprocess(dcode)) {
                /* FIXME checksum */
                dbprintf(2, " [valid end]\n");
                sym = ZBAR_CODE39;
            }
            dcode39->character = -1;
  402802:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
  402806:	f04f 32ff 	mov.w	r2, #4294967295
  40280a:	f362 1350 	bfi	r3, r2, #5, #12
  40280e:	f8c4 30ec 	str.w	r3, [r4, #236]	; 0xec
  402812:	e02f      	b.n	402874 <_zbar_decode_code39+0x3b0>
        dcode->buf[i] = ((dcode->buf[i] < 0x2b)
                         ? code39_characters[(unsigned)dcode->buf[i]]
                         : '?');
    zassert(i < dcode->buf_alloc, -1, "i=%02x %s\n", i,
            _zbar_decoder_buf_dump(dcode->buf, dcode39->character));
    dcode->buflen = i;
  402814:	65a5      	str	r5, [r4, #88]	; 0x58
    dcode->buf[i] = '\0';
  402816:	6de2      	ldr	r2, [r4, #92]	; 0x5c
  402818:	2300      	movs	r3, #0
  40281a:	5553      	strb	r3, [r2, r5]
    dcode->modifiers = 0;
  40281c:	64a3      	str	r3, [r4, #72]	; 0x48
            else if(!code39_postprocess(dcode)) {
                /* FIXME checksum */
                dbprintf(2, " [valid end]\n");
                sym = ZBAR_CODE39;
            }
            dcode39->character = -1;
  40281e:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
  402822:	f04f 32ff 	mov.w	r2, #4294967295
  402826:	f362 1350 	bfi	r3, r2, #5, #12
  40282a:	f8c4 30ec 	str.w	r3, [r4, #236]	; 0xec
                     dcode39->character > CFG(*dcode39, ZBAR_CFG_MAX_LEN)))
                dbprintf(2, " [invalid len]\n");
            else if(!code39_postprocess(dcode)) {
                /* FIXME checksum */
                dbprintf(2, " [valid end]\n");
                sym = ZBAR_CODE39;
  40282e:	2027      	movs	r0, #39	; 0x27
  402830:	e21f      	b.n	402c72 <_zbar_decode_code39+0x7ae>
  402832:	bf00      	nop
  402834:	20000440 	.word	0x20000440
  402838:	0040f49c 	.word	0x0040f49c
  40283c:	0040f310 	.word	0x0040f310
  402840:	0040f2b0 	.word	0x0040f2b0
  402844:	0040f2ec 	.word	0x0040f2ec
  402848:	004066d1 	.word	0x004066d1
  40284c:	0040f290 	.word	0x0040f290
  402850:	0040f360 	.word	0x0040f360
  402854:	0040f31c 	.word	0x0040f31c
  402858:	0040f404 	.word	0x0040f404
  40285c:	0001ffe0 	.word	0x0001ffe0
  402860:	0040f240 	.word	0x0040f240
  402864:	004030ad 	.word	0x004030ad
  402868:	0040f27c 	.word	0x0040f27c
  40286c:	0040f3a4 	.word	0x0040f3a4
  402870:	0040f36c 	.word	0x0040f36c

/* check and release shared state lock */
static inline char release_lock (zbar_decoder_t *dcode,
                                 zbar_symbol_type_t req)
{
    zassert(dcode->lock == req, 1, "lock=%d req=%d\n",
  402874:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
  402878:	2b27      	cmp	r3, #39	; 0x27
  40287a:	d011      	beq.n	4028a0 <_zbar_decode_code39+0x3dc>
  40287c:	4ab1      	ldr	r2, [pc, #708]	; (402b44 <_zbar_decode_code39+0x680>)
  40287e:	6812      	ldr	r2, [r2, #0]
  402880:	68d0      	ldr	r0, [r2, #12]
  402882:	4ab1      	ldr	r2, [pc, #708]	; (402b48 <_zbar_decode_code39+0x684>)
  402884:	9200      	str	r2, [sp, #0]
  402886:	4ab1      	ldr	r2, [pc, #708]	; (402b4c <_zbar_decode_code39+0x688>)
  402888:	9201      	str	r2, [sp, #4]
  40288a:	9302      	str	r3, [sp, #8]
  40288c:	2327      	movs	r3, #39	; 0x27
  40288e:	9303      	str	r3, [sp, #12]
  402890:	49af      	ldr	r1, [pc, #700]	; (402b50 <_zbar_decode_code39+0x68c>)
  402892:	4ab0      	ldr	r2, [pc, #704]	; (402b54 <_zbar_decode_code39+0x690>)
  402894:	f240 1307 	movw	r3, #263	; 0x107
  402898:	4caf      	ldr	r4, [pc, #700]	; (402b58 <_zbar_decode_code39+0x694>)
  40289a:	47a0      	blx	r4
            }
            dcode39->character = -1;
            if(!sym)
                release_lock(dcode, ZBAR_CODE39);
            return(sym);
  40289c:	2000      	movs	r0, #0
  40289e:	e1e8      	b.n	402c72 <_zbar_decode_code39+0x7ae>
            dcode->lock, req);
    dcode->lock = 0;
  4028a0:	2000      	movs	r0, #0
  4028a2:	f8a4 0046 	strh.w	r0, [r4, #70]	; 0x46
  4028a6:	e1e4      	b.n	402c72 <_zbar_decode_code39+0x7ae>

/* check and release shared state lock */
static inline char release_lock (zbar_decoder_t *dcode,
                                 zbar_symbol_type_t req)
{
    zassert(dcode->lock == req, 1, "lock=%d req=%d\n",
  4028a8:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
  4028ac:	2b27      	cmp	r3, #39	; 0x27
  4028ae:	d010      	beq.n	4028d2 <_zbar_decode_code39+0x40e>
  4028b0:	4aa4      	ldr	r2, [pc, #656]	; (402b44 <_zbar_decode_code39+0x680>)
  4028b2:	6812      	ldr	r2, [r2, #0]
  4028b4:	68d0      	ldr	r0, [r2, #12]
  4028b6:	4aa4      	ldr	r2, [pc, #656]	; (402b48 <_zbar_decode_code39+0x684>)
  4028b8:	9200      	str	r2, [sp, #0]
  4028ba:	4aa4      	ldr	r2, [pc, #656]	; (402b4c <_zbar_decode_code39+0x688>)
  4028bc:	9201      	str	r2, [sp, #4]
  4028be:	9302      	str	r3, [sp, #8]
  4028c0:	2327      	movs	r3, #39	; 0x27
  4028c2:	9303      	str	r3, [sp, #12]
  4028c4:	49a2      	ldr	r1, [pc, #648]	; (402b50 <_zbar_decode_code39+0x68c>)
  4028c6:	4aa3      	ldr	r2, [pc, #652]	; (402b54 <_zbar_decode_code39+0x690>)
  4028c8:	f240 1307 	movw	r3, #263	; 0x107
  4028cc:	4da2      	ldr	r5, [pc, #648]	; (402b58 <_zbar_decode_code39+0x694>)
  4028ce:	47a8      	blx	r5
  4028d0:	e002      	b.n	4028d8 <_zbar_decode_code39+0x414>
            dcode->lock, req);
    dcode->lock = 0;
  4028d2:	2300      	movs	r3, #0
  4028d4:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
        if(space > dcode39->width / 2) {
            /* inter-character space check failure */
            dbprintf(2, " ics>%d [invalid ics]", dcode39->width);
            if(dcode39->character)
                release_lock(dcode, ZBAR_CODE39);
            dcode39->character = -1;
  4028d8:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
  4028dc:	f04f 32ff 	mov.w	r2, #4294967295
  4028e0:	f362 1350 	bfi	r3, r2, #5, #12
  4028e4:	f8c4 30ec 	str.w	r3, [r4, #236]	; 0xec
        }
        dcode39->element = 0;
  4028e8:	f894 30ec 	ldrb.w	r3, [r4, #236]	; 0xec
  4028ec:	f36f 0344 	bfc	r3, #1, #4
  4028f0:	f884 30ec 	strb.w	r3, [r4, #236]	; 0xec
        dbprintf(2, "\n");
        return(ZBAR_NONE);
  4028f4:	2000      	movs	r0, #0
  4028f6:	e1bc      	b.n	402c72 <_zbar_decode_code39+0x7ae>
    }

    dbprintf(2, " s=%d ", dcode39->s9);
    if(!check_width(dcode39->width, dcode39->s9)) {
  4028f8:	f8d4 30f4 	ldr.w	r3, [r4, #244]	; 0xf4
static inline int
check_width (unsigned ref,
             unsigned w)
{
    unsigned dref = ref;
    ref *= 4;
  4028fc:	009d      	lsls	r5, r3, #2
    w *= 4;
  4028fe:	0091      	lsls	r1, r2, #2
    return(ref - dref <= w && w <= ref + dref);
  402900:	ebc3 0e05 	rsb	lr, r3, r5
  402904:	4571      	cmp	r1, lr
  402906:	f0c0 818b 	bcc.w	402c20 <_zbar_decode_code39+0x75c>
  40290a:	442b      	add	r3, r5
  40290c:	4299      	cmp	r1, r3
  40290e:	f240 818f 	bls.w	402c30 <_zbar_decode_code39+0x76c>
  402912:	e185      	b.n	402c20 <_zbar_decode_code39+0x75c>

/* check and release shared state lock */
static inline char release_lock (zbar_decoder_t *dcode,
                                 zbar_symbol_type_t req)
{
    zassert(dcode->lock == req, 1, "lock=%d req=%d\n",
  402914:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
  402918:	2b27      	cmp	r3, #39	; 0x27
  40291a:	d010      	beq.n	40293e <_zbar_decode_code39+0x47a>
  40291c:	4a89      	ldr	r2, [pc, #548]	; (402b44 <_zbar_decode_code39+0x680>)
  40291e:	6812      	ldr	r2, [r2, #0]
  402920:	68d0      	ldr	r0, [r2, #12]
  402922:	4a89      	ldr	r2, [pc, #548]	; (402b48 <_zbar_decode_code39+0x684>)
  402924:	9200      	str	r2, [sp, #0]
  402926:	4a89      	ldr	r2, [pc, #548]	; (402b4c <_zbar_decode_code39+0x688>)
  402928:	9201      	str	r2, [sp, #4]
  40292a:	9302      	str	r3, [sp, #8]
  40292c:	2327      	movs	r3, #39	; 0x27
  40292e:	9303      	str	r3, [sp, #12]
  402930:	4987      	ldr	r1, [pc, #540]	; (402b50 <_zbar_decode_code39+0x68c>)
  402932:	4a88      	ldr	r2, [pc, #544]	; (402b54 <_zbar_decode_code39+0x690>)
  402934:	f240 1307 	movw	r3, #263	; 0x107
  402938:	4d87      	ldr	r5, [pc, #540]	; (402b58 <_zbar_decode_code39+0x694>)
  40293a:	47a8      	blx	r5
  40293c:	e002      	b.n	402944 <_zbar_decode_code39+0x480>
            dcode->lock, req);
    dcode->lock = 0;
  40293e:	2300      	movs	r3, #0
  402940:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
    dbprintf(2, " s=%d ", dcode39->s9);
    if(!check_width(dcode39->width, dcode39->s9)) {
        dbprintf(2, " [width]\n");
        if(dcode39->character)
            release_lock(dcode, ZBAR_CODE39);
        dcode39->character = -1;
  402944:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
  402948:	f04f 32ff 	mov.w	r2, #4294967295
  40294c:	f362 1350 	bfi	r3, r2, #5, #12
  402950:	f8c4 30ec 	str.w	r3, [r4, #236]	; 0xec
        return(ZBAR_NONE);
  402954:	2000      	movs	r0, #0
  402956:	e18c      	b.n	402c72 <_zbar_decode_code39+0x7ae>

static inline signed char code39_decode9 (zbar_decoder_t *dcode)
{
    code39_decoder_t *dcode39 = &dcode->code39;

    if(dcode39->s9 < 9)
  402958:	f04f 0e00 	mov.w	lr, #0
  40295c:	4675      	mov	r5, lr
  40295e:	ebce 0307 	rsb	r3, lr, r7

/* retrieve i-th previous element width */
static inline unsigned get_width (const zbar_decoder_t *dcode,
                                  unsigned char offset)
{
    return(dcode->w[(dcode->idx - offset) & (DECODE_WINDOW - 1)]);
  402962:	f003 030f 	and.w	r3, r3, #15
  402966:	eb04 0383 	add.w	r3, r4, r3, lsl #2
{
    /* result is encoded number of units - 2
     * (for use as zero based index)
     * or -1 if invalid
     */
    unsigned char E = ((e * n * 2 + 1) / s - 3) / 2;
  40296a:	685b      	ldr	r3, [r3, #4]
  40296c:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
  402970:	011b      	lsls	r3, r3, #4
  402972:	3301      	adds	r3, #1
  402974:	fbb3 f3f2 	udiv	r3, r3, r2
  402978:	3b03      	subs	r3, #3
    return((E >= n - 3) ? -1 : E);
  40297a:	f3c3 0347 	ubfx	r3, r3, #1, #8
  40297e:	2b44      	cmp	r3, #68	; 0x44
  402980:	f200 8159 	bhi.w	402c36 <_zbar_decode_code39+0x772>

static inline unsigned char code39_decode1 (unsigned char enc,
                                            unsigned e,
                                            unsigned s)
{
    unsigned char E = decode_e(e, s, 72);
  402984:	b2db      	uxtb	r3, r3
    if(E > 18)
  402986:	2b12      	cmp	r3, #18
  402988:	f200 816b 	bhi.w	402c62 <_zbar_decode_code39+0x79e>
        return(0xff);
    enc <<= 1;
  40298c:	006d      	lsls	r5, r5, #1
  40298e:	b2ed      	uxtb	r5, r5
    if(E > 6) {
  402990:	2b06      	cmp	r3, #6
        enc |= 1;
  402992:	bf88      	it	hi
  402994:	f045 0501 	orrhi.w	r5, r5, #1

    /* threshold bar width ratios */
    unsigned char i, enc = 0;
    for(i = 0; i < 5; i++) {
        enc = code39_decode1(enc, get_width(dcode, i), dcode39->s9);
        if(enc == 0xff)
  402998:	2dff      	cmp	r5, #255	; 0xff
  40299a:	f000 814c 	beq.w	402c36 <_zbar_decode_code39+0x772>
  40299e:	f10e 0101 	add.w	r1, lr, #1
  4029a2:	b2c9      	uxtb	r1, r1
  4029a4:	f10e 0e01 	add.w	lr, lr, #1
    if(dcode39->s9 < 9)
        return(-1);

    /* threshold bar width ratios */
    unsigned char i, enc = 0;
    for(i = 0; i < 5; i++) {
  4029a8:	f1be 0f05 	cmp.w	lr, #5
  4029ac:	d1d7      	bne.n	40295e <_zbar_decode_code39+0x49a>
  4029ae:	468e      	mov	lr, r1
        enc = code39_decode1(enc, get_width(dcode, i), dcode39->s9);
        if(enc == 0xff)
            return(-1);
    }
    zassert(enc < 0x20, -1, " enc=%x s9=%x\n", enc, dcode39->s9);
  4029b0:	2d1f      	cmp	r5, #31
  4029b2:	d90e      	bls.n	4029d2 <_zbar_decode_code39+0x50e>
  4029b4:	4b63      	ldr	r3, [pc, #396]	; (402b44 <_zbar_decode_code39+0x680>)
  4029b6:	681b      	ldr	r3, [r3, #0]
  4029b8:	68d8      	ldr	r0, [r3, #12]
  4029ba:	4b68      	ldr	r3, [pc, #416]	; (402b5c <_zbar_decode_code39+0x698>)
  4029bc:	9300      	str	r3, [sp, #0]
  4029be:	4b68      	ldr	r3, [pc, #416]	; (402b60 <_zbar_decode_code39+0x69c>)
  4029c0:	9301      	str	r3, [sp, #4]
  4029c2:	9502      	str	r5, [sp, #8]
  4029c4:	9203      	str	r2, [sp, #12]
  4029c6:	4967      	ldr	r1, [pc, #412]	; (402b64 <_zbar_decode_code39+0x6a0>)
  4029c8:	4a67      	ldr	r2, [pc, #412]	; (402b68 <_zbar_decode_code39+0x6a4>)
  4029ca:	23a0      	movs	r3, #160	; 0xa0
  4029cc:	4d62      	ldr	r5, [pc, #392]	; (402b58 <_zbar_decode_code39+0x694>)
  4029ce:	47a8      	blx	r5
  4029d0:	e131      	b.n	402c36 <_zbar_decode_code39+0x772>

    /* lookup first 5 encoded widths for coarse decode */
    unsigned char idx = code39_hi[enc];
  4029d2:	4b66      	ldr	r3, [pc, #408]	; (402b6c <_zbar_decode_code39+0x6a8>)
  4029d4:	5d5f      	ldrb	r7, [r3, r5]
    if(idx == 0xff)
  4029d6:	2fff      	cmp	r7, #255	; 0xff
  4029d8:	f000 812d 	beq.w	402c36 <_zbar_decode_code39+0x772>
        return(-1);

    /* encode remaining widths (NB first encoded width is lost) */
    for(; i < 9; i++) {
  4029dc:	2908      	cmp	r1, #8
  4029de:	d822      	bhi.n	402a26 <_zbar_decode_code39+0x562>

/* retrieve i-th previous element width */
static inline unsigned get_width (const zbar_decoder_t *dcode,
                                  unsigned char offset)
{
    return(dcode->w[(dcode->idx - offset) & (DECODE_WINDOW - 1)]);
  4029e0:	1a43      	subs	r3, r0, r1
  4029e2:	f003 030f 	and.w	r3, r3, #15
  4029e6:	eb04 0383 	add.w	r3, r4, r3, lsl #2
{
    /* result is encoded number of units - 2
     * (for use as zero based index)
     * or -1 if invalid
     */
    unsigned char E = ((e * n * 2 + 1) / s - 3) / 2;
  4029ea:	685b      	ldr	r3, [r3, #4]
  4029ec:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
  4029f0:	011b      	lsls	r3, r3, #4
  4029f2:	3301      	adds	r3, #1
  4029f4:	fbb3 f3f2 	udiv	r3, r3, r2
  4029f8:	3b03      	subs	r3, #3
    return((E >= n - 3) ? -1 : E);
  4029fa:	f3c3 0347 	ubfx	r3, r3, #1, #8
  4029fe:	2b44      	cmp	r3, #68	; 0x44
  402a00:	f200 8119 	bhi.w	402c36 <_zbar_decode_code39+0x772>

static inline unsigned char code39_decode1 (unsigned char enc,
                                            unsigned e,
                                            unsigned s)
{
    unsigned char E = decode_e(e, s, 72);
  402a04:	b2db      	uxtb	r3, r3
    if(E > 18)
  402a06:	2b12      	cmp	r3, #18
  402a08:	f200 812b 	bhi.w	402c62 <_zbar_decode_code39+0x79e>
        return(0xff);
    enc <<= 1;
  402a0c:	006d      	lsls	r5, r5, #1
  402a0e:	b2ed      	uxtb	r5, r5
    if(E > 6) {
  402a10:	2b06      	cmp	r3, #6
        enc |= 1;
  402a12:	bf88      	it	hi
  402a14:	f045 0501 	orrhi.w	r5, r5, #1
        return(-1);

    /* encode remaining widths (NB first encoded width is lost) */
    for(; i < 9; i++) {
        enc = code39_decode1(enc, get_width(dcode, i), dcode39->s9);
        if(enc == 0xff)
  402a18:	2dff      	cmp	r5, #255	; 0xff
  402a1a:	f000 810c 	beq.w	402c36 <_zbar_decode_code39+0x772>
    unsigned char idx = code39_hi[enc];
    if(idx == 0xff)
        return(-1);

    /* encode remaining widths (NB first encoded width is lost) */
    for(; i < 9; i++) {
  402a1e:	3101      	adds	r1, #1
  402a20:	b2c9      	uxtb	r1, r1
  402a22:	2909      	cmp	r1, #9
  402a24:	d1dc      	bne.n	4029e0 <_zbar_decode_code39+0x51c>
        enc = code39_decode1(enc, get_width(dcode, i), dcode39->s9);
        if(enc == 0xff)
            return(-1);
    }

    if((idx & 0xc0) == 0x80)
  402a26:	f007 03c0 	and.w	r3, r7, #192	; 0xc0
  402a2a:	2b80      	cmp	r3, #128	; 0x80
  402a2c:	d105      	bne.n	402a3a <_zbar_decode_code39+0x576>
        idx = (idx & 0x3f) + ((enc >> 3) & 1);
  402a2e:	f007 073f 	and.w	r7, r7, #63	; 0x3f
  402a32:	f3c5 03c0 	ubfx	r3, r5, #3, #1
  402a36:	441f      	add	r7, r3
  402a38:	e00d      	b.n	402a56 <_zbar_decode_code39+0x592>
    else if((idx & 0xc0) == 0xc0)
  402a3a:	2bc0      	cmp	r3, #192	; 0xc0
  402a3c:	d105      	bne.n	402a4a <_zbar_decode_code39+0x586>
        idx = (idx & 0x3f) + ((enc >> 2) & 1);
  402a3e:	f007 073f 	and.w	r7, r7, #63	; 0x3f
  402a42:	f3c5 0380 	ubfx	r3, r5, #2, #1
  402a46:	441f      	add	r7, r3
  402a48:	e005      	b.n	402a56 <_zbar_decode_code39+0x592>
    else if(idx & 0xc0)
  402a4a:	b123      	cbz	r3, 402a56 <_zbar_decode_code39+0x592>
        idx = (idx & 0x3f) + ((enc >> 2) & 3);
  402a4c:	f007 073f 	and.w	r7, r7, #63	; 0x3f
  402a50:	f3c5 0381 	ubfx	r3, r5, #2, #2
  402a54:	441f      	add	r7, r3
    zassert(idx < 0x2c, -1, " idx=%x enc=%x s9=%x\n", idx, enc, dcode39->s9);
  402a56:	2f2b      	cmp	r7, #43	; 0x2b
  402a58:	d90f      	bls.n	402a7a <_zbar_decode_code39+0x5b6>
  402a5a:	4b3a      	ldr	r3, [pc, #232]	; (402b44 <_zbar_decode_code39+0x680>)
  402a5c:	681b      	ldr	r3, [r3, #0]
  402a5e:	493f      	ldr	r1, [pc, #252]	; (402b5c <_zbar_decode_code39+0x698>)
  402a60:	9100      	str	r1, [sp, #0]
  402a62:	4943      	ldr	r1, [pc, #268]	; (402b70 <_zbar_decode_code39+0x6ac>)
  402a64:	9101      	str	r1, [sp, #4]
  402a66:	9702      	str	r7, [sp, #8]
  402a68:	9503      	str	r5, [sp, #12]
  402a6a:	9204      	str	r2, [sp, #16]
  402a6c:	68d8      	ldr	r0, [r3, #12]
  402a6e:	4941      	ldr	r1, [pc, #260]	; (402b74 <_zbar_decode_code39+0x6b0>)
  402a70:	4a3d      	ldr	r2, [pc, #244]	; (402b68 <_zbar_decode_code39+0x6a4>)
  402a72:	23b4      	movs	r3, #180	; 0xb4
  402a74:	4d38      	ldr	r5, [pc, #224]	; (402b58 <_zbar_decode_code39+0x694>)
  402a76:	47a8      	blx	r5
  402a78:	e0dd      	b.n	402c36 <_zbar_decode_code39+0x772>

    const char39_t *c = &code39_encodings[idx];
  402a7a:	463b      	mov	r3, r7
    dbprintf(2, " i=%02x chk=%02x c=%02x/%02x", idx, c->chk, c->fwd, c->rev);
    if(enc != c->chk)
  402a7c:	eb07 0747 	add.w	r7, r7, r7, lsl #1
  402a80:	493d      	ldr	r1, [pc, #244]	; (402b78 <_zbar_decode_code39+0x6b4>)
  402a82:	5dc9      	ldrb	r1, [r1, r7]
  402a84:	42a9      	cmp	r1, r5
  402a86:	f040 80d6 	bne.w	402c36 <_zbar_decode_code39+0x772>
        return(-1);

    dcode39->width = dcode39->s9;
  402a8a:	f8c4 20f4 	str.w	r2, [r4, #244]	; 0xf4
    return((dcode39->direction) ? c->rev : c->fwd);
  402a8e:	f016 0f01 	tst.w	r6, #1
  402a92:	d004      	beq.n	402a9e <_zbar_decode_code39+0x5da>
  402a94:	463b      	mov	r3, r7
  402a96:	4a38      	ldr	r2, [pc, #224]	; (402b78 <_zbar_decode_code39+0x6b4>)
  402a98:	4413      	add	r3, r2
  402a9a:	785e      	ldrb	r6, [r3, #1]
  402a9c:	e004      	b.n	402aa8 <_zbar_decode_code39+0x5e4>
  402a9e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
  402aa2:	4a35      	ldr	r2, [pc, #212]	; (402b78 <_zbar_decode_code39+0x6b4>)
  402aa4:	4413      	add	r3, r2
  402aa6:	789e      	ldrb	r6, [r3, #2]

    signed char c = code39_decode9(dcode);
    dbprintf(2, " c=%d", c);

    /* lock shared resources */
    if(!dcode39->character && acquire_lock(dcode, ZBAR_CODE39)) {
  402aa8:	f8d4 20ec 	ldr.w	r2, [r4, #236]	; 0xec
  402aac:	4b33      	ldr	r3, [pc, #204]	; (402b7c <_zbar_decode_code39+0x6b8>)
  402aae:	4013      	ands	r3, r2
  402ab0:	b97b      	cbnz	r3, 402ad2 <_zbar_decode_code39+0x60e>
  402ab2:	e002      	b.n	402aba <_zbar_decode_code39+0x5f6>
  402ab4:	26ff      	movs	r6, #255	; 0xff
  402ab6:	e000      	b.n	402aba <_zbar_decode_code39+0x5f6>
  402ab8:	26ff      	movs	r6, #255	; 0xff

/* acquire shared state lock */
static inline char acquire_lock (zbar_decoder_t *dcode,
                                 zbar_symbol_type_t req)
{
    if(dcode->lock) {
  402aba:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
  402abe:	2b00      	cmp	r3, #0
  402ac0:	f040 80c1 	bne.w	402c46 <_zbar_decode_code39+0x782>
        dbprintf(2, " [locked %d]\n", dcode->lock);
        return(1);
    }
    dcode->lock = req;
  402ac4:	2327      	movs	r3, #39	; 0x27
  402ac6:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
        dcode39->character = -1;
        return(ZBAR_PARTIAL);
    }

    if(c < 0 || size_buf(dcode, dcode39->character + 1)) {
  402aca:	f016 0f80 	tst.w	r6, #128	; 0x80
  402ace:	d003      	beq.n	402ad8 <_zbar_decode_code39+0x614>
  402ad0:	e058      	b.n	402b84 <_zbar_decode_code39+0x6c0>
  402ad2:	f016 0f80 	tst.w	r6, #128	; 0x80
  402ad6:	d11f      	bne.n	402b18 <_zbar_decode_code39+0x654>
  402ad8:	f8d4 50ec 	ldr.w	r5, [r4, #236]	; 0xec
  402adc:	f345 154b 	sbfx	r5, r5, #5, #12
  402ae0:	3501      	adds	r5, #1
/* ensure output buffer has sufficient allocation for request */
static inline char size_buf (zbar_decoder_t *dcode,
                             unsigned len)
{
    unsigned char *buf;
    if(len <= BUFFER_MIN)
  402ae2:	2d20      	cmp	r5, #32
  402ae4:	f240 80b9 	bls.w	402c5a <_zbar_decode_code39+0x796>
        return(0);
    if(len < dcode->buf_alloc)
  402ae8:	6d63      	ldr	r3, [r4, #84]	; 0x54
  402aea:	42ab      	cmp	r3, r5
  402aec:	f200 80b5 	bhi.w	402c5a <_zbar_decode_code39+0x796>
        /* FIXME size reduction heuristic? */
        return(0);
    if(len > BUFFER_MAX)
  402af0:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
  402af4:	d810      	bhi.n	402b18 <_zbar_decode_code39+0x654>
        return(1);
    if(len < dcode->buf_alloc + BUFFER_INCR) {
  402af6:	3310      	adds	r3, #16
  402af8:	429d      	cmp	r5, r3
  402afa:	d205      	bcs.n	402b08 <_zbar_decode_code39+0x644>
  402afc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
  402b00:	bf28      	it	cs
  402b02:	f44f 7380 	movcs.w	r3, #256	; 0x100
  402b06:	461d      	mov	r5, r3
        len = dcode->buf_alloc + BUFFER_INCR;
        if(len > BUFFER_MAX)
            len = BUFFER_MAX;
    }
    buf = realloc(dcode->buf, len);
  402b08:	6de0      	ldr	r0, [r4, #92]	; 0x5c
  402b0a:	4629      	mov	r1, r5
  402b0c:	4b1c      	ldr	r3, [pc, #112]	; (402b80 <_zbar_decode_code39+0x6bc>)
  402b0e:	4798      	blx	r3
    if(!buf)
  402b10:	b110      	cbz	r0, 402b18 <_zbar_decode_code39+0x654>
        return(1);
    dcode->buf = buf;
  402b12:	65e0      	str	r0, [r4, #92]	; 0x5c
    dcode->buf_alloc = len;
  402b14:	6565      	str	r5, [r4, #84]	; 0x54
  402b16:	e0a0      	b.n	402c5a <_zbar_decode_code39+0x796>

/* check and release shared state lock */
static inline char release_lock (zbar_decoder_t *dcode,
                                 zbar_symbol_type_t req)
{
    zassert(dcode->lock == req, 1, "lock=%d req=%d\n",
  402b18:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
  402b1c:	2b27      	cmp	r3, #39	; 0x27
  402b1e:	d031      	beq.n	402b84 <_zbar_decode_code39+0x6c0>
  402b20:	4a08      	ldr	r2, [pc, #32]	; (402b44 <_zbar_decode_code39+0x680>)
  402b22:	6812      	ldr	r2, [r2, #0]
  402b24:	68d0      	ldr	r0, [r2, #12]
  402b26:	4a08      	ldr	r2, [pc, #32]	; (402b48 <_zbar_decode_code39+0x684>)
  402b28:	9200      	str	r2, [sp, #0]
  402b2a:	4a08      	ldr	r2, [pc, #32]	; (402b4c <_zbar_decode_code39+0x688>)
  402b2c:	9201      	str	r2, [sp, #4]
  402b2e:	9302      	str	r3, [sp, #8]
  402b30:	2327      	movs	r3, #39	; 0x27
  402b32:	9303      	str	r3, [sp, #12]
  402b34:	4906      	ldr	r1, [pc, #24]	; (402b50 <_zbar_decode_code39+0x68c>)
  402b36:	4a07      	ldr	r2, [pc, #28]	; (402b54 <_zbar_decode_code39+0x690>)
  402b38:	f240 1307 	movw	r3, #263	; 0x107
  402b3c:	4d06      	ldr	r5, [pc, #24]	; (402b58 <_zbar_decode_code39+0x694>)
  402b3e:	47a8      	blx	r5
  402b40:	e023      	b.n	402b8a <_zbar_decode_code39+0x6c6>
  402b42:	bf00      	nop
  402b44:	20000440 	.word	0x20000440
  402b48:	0040f26c 	.word	0x0040f26c
  402b4c:	0040ee80 	.word	0x0040ee80
  402b50:	0040ee14 	.word	0x0040ee14
  402b54:	0040ee50 	.word	0x0040ee50
  402b58:	004066d1 	.word	0x004066d1
  402b5c:	0040f49c 	.word	0x0040f49c
  402b60:	0040f310 	.word	0x0040f310
  402b64:	0040f2b0 	.word	0x0040f2b0
  402b68:	0040f2ec 	.word	0x0040f2ec
  402b6c:	0040f290 	.word	0x0040f290
  402b70:	0040f360 	.word	0x0040f360
  402b74:	0040f31c 	.word	0x0040f31c
  402b78:	0040f404 	.word	0x0040f404
  402b7c:	0001ffe0 	.word	0x0001ffe0
  402b80:	0040770d 	.word	0x0040770d
            dcode->lock, req);
    dcode->lock = 0;
  402b84:	2300      	movs	r3, #0
  402b86:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
        dbprintf(1, (c < 0) ? " [aborted]\n" : " [overflow]\n");
        release_lock(dcode, ZBAR_CODE39);
        dcode39->character = -1;
  402b8a:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
  402b8e:	f04f 32ff 	mov.w	r2, #4294967295
  402b92:	f362 1350 	bfi	r3, r2, #5, #12
  402b96:	f8c4 30ec 	str.w	r3, [r4, #236]	; 0xec
        return(ZBAR_NONE);
  402b9a:	2000      	movs	r0, #0
  402b9c:	e069      	b.n	402c72 <_zbar_decode_code39+0x7ae>
    }
    else {
        zassert(c < 0x2c, ZBAR_NONE, "c=%02x s9=%x\n", c, dcode39->s9);
  402b9e:	4b36      	ldr	r3, [pc, #216]	; (402c78 <_zbar_decode_code39+0x7b4>)
  402ba0:	681b      	ldr	r3, [r3, #0]
  402ba2:	68d8      	ldr	r0, [r3, #12]
  402ba4:	4b35      	ldr	r3, [pc, #212]	; (402c7c <_zbar_decode_code39+0x7b8>)
  402ba6:	9300      	str	r3, [sp, #0]
  402ba8:	4b35      	ldr	r3, [pc, #212]	; (402c80 <_zbar_decode_code39+0x7bc>)
  402baa:	9301      	str	r3, [sp, #4]
  402bac:	b276      	sxtb	r6, r6
  402bae:	9602      	str	r6, [sp, #8]
  402bb0:	f8d4 30f0 	ldr.w	r3, [r4, #240]	; 0xf0
  402bb4:	9303      	str	r3, [sp, #12]
  402bb6:	4933      	ldr	r1, [pc, #204]	; (402c84 <_zbar_decode_code39+0x7c0>)
  402bb8:	4a33      	ldr	r2, [pc, #204]	; (402c88 <_zbar_decode_code39+0x7c4>)
  402bba:	f240 1351 	movw	r3, #337	; 0x151
  402bbe:	4c33      	ldr	r4, [pc, #204]	; (402c8c <_zbar_decode_code39+0x7c8>)
  402bc0:	47a0      	blx	r4
  402bc2:	2000      	movs	r0, #0
  402bc4:	e055      	b.n	402c72 <_zbar_decode_code39+0x7ae>
        dbprintf(2, "\n");
    }

    dcode->buf[dcode39->character++] = c;
  402bc6:	6de0      	ldr	r0, [r4, #92]	; 0x5c
  402bc8:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
  402bcc:	f343 124b 	sbfx	r2, r3, #5, #12
  402bd0:	f3c2 010b 	ubfx	r1, r2, #0, #12
  402bd4:	3101      	adds	r1, #1
  402bd6:	f361 1350 	bfi	r3, r1, #5, #12
  402bda:	f8c4 30ec 	str.w	r3, [r4, #236]	; 0xec
  402bde:	b212      	sxth	r2, r2
  402be0:	5486      	strb	r6, [r0, r2]

    return(ZBAR_NONE);
  402be2:	2000      	movs	r0, #0
  402be4:	e045      	b.n	402c72 <_zbar_decode_code39+0x7ae>
    dcode39->s9 -= get_width(dcode, 9);
    dcode39->s9 += get_width(dcode, 0);

    if(dcode39->character < 0) {
        if(get_color(dcode) != ZBAR_BAR)
            return(ZBAR_NONE);
  402be6:	2000      	movs	r0, #0
  402be8:	e043      	b.n	402c72 <_zbar_decode_code39+0x7ae>
        dbprintf(2, "      code39:");
        return(code39_decode_start(dcode));
    }

    if(++dcode39->element < 9)
        return(ZBAR_NONE);
  402bea:	2000      	movs	r0, #0
  402bec:	e041      	b.n	402c72 <_zbar_decode_code39+0x7ae>
    dbprintf(2, " s=%d ", dcode39->s9);

    signed char c = code39_decode9(dcode);
    if(c != 0x19 && c != 0x2b) {
        dbprintf(2, "\n");
        return(ZBAR_NONE);
  402bee:	2000      	movs	r0, #0
  402bf0:	e03f      	b.n	402c72 <_zbar_decode_code39+0x7ae>
            else if(!code39_postprocess(dcode)) {
                /* FIXME checksum */
                dbprintf(2, " [valid end]\n");
                sym = ZBAR_CODE39;
            }
            dcode39->character = -1;
  402bf2:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
  402bf6:	f04f 32ff 	mov.w	r2, #4294967295
  402bfa:	f362 1350 	bfi	r3, r2, #5, #12
  402bfe:	f8c4 30ec 	str.w	r3, [r4, #236]	; 0xec
  402c02:	e637      	b.n	402874 <_zbar_decode_code39+0x3b0>
            if(!sym)
                release_lock(dcode, ZBAR_CODE39);
            return(sym);
        }
        if(space > dcode39->width / 2) {
  402c04:	f8d4 30f4 	ldr.w	r3, [r4, #244]	; 0xf4
  402c08:	ebb5 0f53 	cmp.w	r5, r3, lsr #1
  402c0c:	f63f ae64 	bhi.w	4028d8 <_zbar_decode_code39+0x414>
  402c10:	e66a      	b.n	4028e8 <_zbar_decode_code39+0x424>
  402c12:	f8d4 30f4 	ldr.w	r3, [r4, #244]	; 0xf4
  402c16:	ebb5 0f53 	cmp.w	r5, r3, lsr #1
  402c1a:	f63f ae45 	bhi.w	4028a8 <_zbar_decode_code39+0x3e4>
  402c1e:	e663      	b.n	4028e8 <_zbar_decode_code39+0x424>
    }

    dbprintf(2, " s=%d ", dcode39->s9);
    if(!check_width(dcode39->width, dcode39->s9)) {
        dbprintf(2, " [width]\n");
        if(dcode39->character)
  402c20:	f8d4 20ec 	ldr.w	r2, [r4, #236]	; 0xec
  402c24:	4b1a      	ldr	r3, [pc, #104]	; (402c90 <_zbar_decode_code39+0x7cc>)
  402c26:	4013      	ands	r3, r2
  402c28:	2b00      	cmp	r3, #0
  402c2a:	f43f ae8b 	beq.w	402944 <_zbar_decode_code39+0x480>
  402c2e:	e671      	b.n	402914 <_zbar_decode_code39+0x450>

static inline signed char code39_decode9 (zbar_decoder_t *dcode)
{
    code39_decoder_t *dcode39 = &dcode->code39;

    if(dcode39->s9 < 9)
  402c30:	2a08      	cmp	r2, #8
  402c32:	f63f ae91 	bhi.w	402958 <_zbar_decode_code39+0x494>

    signed char c = code39_decode9(dcode);
    dbprintf(2, " c=%d", c);

    /* lock shared resources */
    if(!dcode39->character && acquire_lock(dcode, ZBAR_CODE39)) {
  402c36:	f8d4 20ec 	ldr.w	r2, [r4, #236]	; 0xec
  402c3a:	4b15      	ldr	r3, [pc, #84]	; (402c90 <_zbar_decode_code39+0x7cc>)
  402c3c:	4013      	ands	r3, r2
  402c3e:	2b00      	cmp	r3, #0
  402c40:	f43f af38 	beq.w	402ab4 <_zbar_decode_code39+0x5f0>
  402c44:	e768      	b.n	402b18 <_zbar_decode_code39+0x654>
        dcode39->character = -1;
  402c46:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
  402c4a:	f04f 32ff 	mov.w	r2, #4294967295
  402c4e:	f362 1350 	bfi	r3, r2, #5, #12
  402c52:	f8c4 30ec 	str.w	r3, [r4, #236]	; 0xec
        return(ZBAR_PARTIAL);
  402c56:	2001      	movs	r0, #1
  402c58:	e00b      	b.n	402c72 <_zbar_decode_code39+0x7ae>
        release_lock(dcode, ZBAR_CODE39);
        dcode39->character = -1;
        return(ZBAR_NONE);
    }
    else {
        zassert(c < 0x2c, ZBAR_NONE, "c=%02x s9=%x\n", c, dcode39->s9);
  402c5a:	b273      	sxtb	r3, r6
  402c5c:	2b2b      	cmp	r3, #43	; 0x2b
  402c5e:	ddb2      	ble.n	402bc6 <_zbar_decode_code39+0x702>
  402c60:	e79d      	b.n	402b9e <_zbar_decode_code39+0x6da>

    signed char c = code39_decode9(dcode);
    dbprintf(2, " c=%d", c);

    /* lock shared resources */
    if(!dcode39->character && acquire_lock(dcode, ZBAR_CODE39)) {
  402c62:	f8d4 20ec 	ldr.w	r2, [r4, #236]	; 0xec
  402c66:	4b0a      	ldr	r3, [pc, #40]	; (402c90 <_zbar_decode_code39+0x7cc>)
  402c68:	4013      	ands	r3, r2
  402c6a:	2b00      	cmp	r3, #0
  402c6c:	f43f af24 	beq.w	402ab8 <_zbar_decode_code39+0x5f4>
  402c70:	e752      	b.n	402b18 <_zbar_decode_code39+0x654>
    }

    dcode->buf[dcode39->character++] = c;

    return(ZBAR_NONE);
}
  402c72:	b007      	add	sp, #28
  402c74:	bdf0      	pop	{r4, r5, r6, r7, pc}
  402c76:	bf00      	nop
  402c78:	20000440 	.word	0x20000440
  402c7c:	0040f488 	.word	0x0040f488
  402c80:	0040f3f8 	.word	0x0040f3f8
  402c84:	0040f3bc 	.word	0x0040f3bc
  402c88:	0040f2ec 	.word	0x0040f2ec
  402c8c:	004066d1 	.word	0x004066d1
  402c90:	0001ffe0 	.word	0x0001ffe0

00402c94 <zbar_decoder_destroy>:
    zbar_decoder_reset(dcode);
    return(dcode);
}

void zbar_decoder_destroy (zbar_decoder_t *dcode)
{
  402c94:	b510      	push	{r4, lr}
  402c96:	4604      	mov	r4, r0
#ifdef ENABLE_DATABAR
    if(dcode->databar.segs)
        free(dcode->databar.segs);
#endif
    if(dcode->buf)
  402c98:	6dc0      	ldr	r0, [r0, #92]	; 0x5c
  402c9a:	b108      	cbz	r0, 402ca0 <zbar_decoder_destroy+0xc>
        free(dcode->buf);
  402c9c:	4b02      	ldr	r3, [pc, #8]	; (402ca8 <zbar_decoder_destroy+0x14>)
  402c9e:	4798      	blx	r3
    free(dcode);
  402ca0:	4620      	mov	r0, r4
  402ca2:	4b01      	ldr	r3, [pc, #4]	; (402ca8 <zbar_decoder_destroy+0x14>)
  402ca4:	4798      	blx	r3
  402ca6:	bd10      	pop	{r4, pc}
  402ca8:	00406e41 	.word	0x00406e41

00402cac <zbar_decoder_reset>:
}

void zbar_decoder_reset (zbar_decoder_t *dcode)
{
  402cac:	b510      	push	{r4, lr}
  402cae:	4604      	mov	r4, r0
    memset(dcode, 0, (long)&dcode->buf_alloc - (long)dcode);
  402cb0:	2100      	movs	r1, #0
  402cb2:	2254      	movs	r2, #84	; 0x54
  402cb4:	4b1a      	ldr	r3, [pc, #104]	; (402d20 <zbar_decoder_reset+0x74>)
  402cb6:	4798      	blx	r3
} ean_decoder_t;

/* reset EAN/UPC pass specific state */
static inline void ean_new_scan (ean_decoder_t *ean)
{
    ean->pass[0].state = ean->pass[1].state = -1;
  402cb8:	23ff      	movs	r3, #255	; 0xff
  402cba:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
  402cbe:	f884 3068 	strb.w	r3, [r4, #104]	; 0x68
    ean->pass[2].state = ean->pass[3].state = -1;
  402cc2:	f884 3098 	strb.w	r3, [r4, #152]	; 0x98
  402cc6:	f884 3088 	strb.w	r3, [r4, #136]	; 0x88
    ean->s4 = 0;
  402cca:	2300      	movs	r3, #0
  402ccc:	f8c4 30b0 	str.w	r3, [r4, #176]	; 0xb0

/* reset all EAN/UPC state */
static inline void ean_reset (ean_decoder_t *ean)
{
    ean_new_scan(ean);
    ean->left = ean->right = ZBAR_NONE;
  402cd0:	f8a4 30aa 	strh.w	r3, [r4, #170]	; 0xaa
  402cd4:	f8a4 30a8 	strh.w	r3, [r4, #168]	; 0xa8
} code39_decoder_t;

/* reset Code 39 specific state */
static inline void code39_reset (code39_decoder_t *dcode39)
{
    dcode39->direction = 0;
  402cd8:	f894 20ec 	ldrb.w	r2, [r4, #236]	; 0xec
    dcode39->element = 0;
  402cdc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
  402ce0:	f363 0244 	bfi	r2, r3, #1, #4
  402ce4:	f884 20ec 	strb.w	r2, [r4, #236]	; 0xec
    dcode39->character = -1;
  402ce8:	f8d4 20ec 	ldr.w	r2, [r4, #236]	; 0xec
  402cec:	f04f 31ff 	mov.w	r1, #4294967295
  402cf0:	f361 1250 	bfi	r2, r1, #5, #12
  402cf4:	f8c4 20ec 	str.w	r2, [r4, #236]	; 0xec
    dcode39->s9 = 0;
  402cf8:	f8c4 30f0 	str.w	r3, [r4, #240]	; 0xf0
} code128_decoder_t;

/* reset Code 128 specific state */
static inline void code128_reset (code128_decoder_t *dcode128)
{
    dcode128->direction = 0;
  402cfc:	f894 2104 	ldrb.w	r2, [r4, #260]	; 0x104
    dcode128->element = 0;
  402d00:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
  402d04:	f363 0243 	bfi	r2, r3, #1, #3
  402d08:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
    dcode128->character = -1;
  402d0c:	f8b4 2104 	ldrh.w	r2, [r4, #260]	; 0x104
  402d10:	f361 120f 	bfi	r2, r1, #4, #12
  402d14:	f8a4 2104 	strh.w	r2, [r4, #260]	; 0x104
    dcode128->s6 = 0;
  402d18:	f8c4 3108 	str.w	r3, [r4, #264]	; 0x108
  402d1c:	bd10      	pop	{r4, pc}
  402d1e:	bf00      	nop
  402d20:	00407669 	.word	0x00407669

00402d24 <zbar_decoder_create>:
#endif
#include "debug.h"
#include "decoder.h"

zbar_decoder_t *zbar_decoder_create ()
{
  402d24:	b510      	push	{r4, lr}
    zbar_decoder_t *dcode = calloc(1, sizeof(zbar_decoder_t));
  402d26:	2001      	movs	r0, #1
  402d28:	f44f 718e 	mov.w	r1, #284	; 0x11c
  402d2c:	4b11      	ldr	r3, [pc, #68]	; (402d74 <zbar_decoder_create+0x50>)
  402d2e:	4798      	blx	r3
  402d30:	4604      	mov	r4, r0
    dcode->buf_alloc = BUFFER_MIN;
  402d32:	2020      	movs	r0, #32
  402d34:	6560      	str	r0, [r4, #84]	; 0x54
    dcode->buf = malloc(dcode->buf_alloc);
  402d36:	4b10      	ldr	r3, [pc, #64]	; (402d78 <zbar_decoder_create+0x54>)
  402d38:	4798      	blx	r3
  402d3a:	65e0      	str	r0, [r4, #92]	; 0x5c

    /* initialize default configs */
#ifdef ENABLE_EAN
    dcode->ean.enable = 1;
  402d3c:	2301      	movs	r3, #1
  402d3e:	f884 30ca 	strb.w	r3, [r4, #202]	; 0xca
    dcode->ean.ean13_config = ((1 << ZBAR_CFG_ENABLE) |
  402d42:	2205      	movs	r2, #5
  402d44:	f8c4 20cc 	str.w	r2, [r4, #204]	; 0xcc
                               (1 << ZBAR_CFG_EMIT_CHECK));
    dcode->ean.ean8_config = ((1 << ZBAR_CFG_ENABLE) |
  402d48:	f8c4 20d0 	str.w	r2, [r4, #208]	; 0xd0
                              (1 << ZBAR_CFG_EMIT_CHECK));
    dcode->ean.upca_config = 1 << ZBAR_CFG_EMIT_CHECK;
  402d4c:	2204      	movs	r2, #4
  402d4e:	f8c4 20d4 	str.w	r2, [r4, #212]	; 0xd4
    dcode->ean.upce_config = 1 << ZBAR_CFG_EMIT_CHECK;
  402d52:	f8c4 20d8 	str.w	r2, [r4, #216]	; 0xd8
    dcode->ean.isbn10_config = 1 << ZBAR_CFG_EMIT_CHECK;
  402d56:	f8c4 20dc 	str.w	r2, [r4, #220]	; 0xdc
    dcode->ean.isbn13_config = 1 << ZBAR_CFG_EMIT_CHECK;
  402d5a:	f8c4 20e0 	str.w	r2, [r4, #224]	; 0xe0
#ifdef ENABLE_CODABAR
    dcode->codabar.config = 1 << ZBAR_CFG_ENABLE;
    CFG(dcode->codabar, ZBAR_CFG_MIN_LEN) = 4;
#endif
#ifdef ENABLE_CODE39
    dcode->code39.config = 1 << ZBAR_CFG_ENABLE;
  402d5e:	f8c4 30f8 	str.w	r3, [r4, #248]	; 0xf8
    CFG(dcode->code39, ZBAR_CFG_MIN_LEN) = 1;
  402d62:	f8c4 30fc 	str.w	r3, [r4, #252]	; 0xfc
#endif
#ifdef ENABLE_CODE93
    dcode->code93.config = 1 << ZBAR_CFG_ENABLE;
#endif
#ifdef ENABLE_CODE128
    dcode->code128.config = 1 << ZBAR_CFG_ENABLE;
  402d66:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
#endif
#ifdef ENABLE_QRCODE
    dcode->qrf.config = 1 << ZBAR_CFG_ENABLE;
#endif

    zbar_decoder_reset(dcode);
  402d6a:	4620      	mov	r0, r4
  402d6c:	4b03      	ldr	r3, [pc, #12]	; (402d7c <zbar_decoder_create+0x58>)
  402d6e:	4798      	blx	r3
    return(dcode);
}
  402d70:	4620      	mov	r0, r4
  402d72:	bd10      	pop	{r4, pc}
  402d74:	00406325 	.word	0x00406325
  402d78:	00406e31 	.word	0x00406e31
  402d7c:	00402cad 	.word	0x00402cad

00402d80 <zbar_decoder_new_scan>:
    qr_finder_reset(&dcode->qrf);
#endif
}

void zbar_decoder_new_scan (zbar_decoder_t *dcode)
{
  402d80:	b510      	push	{r4, lr}
  402d82:	4604      	mov	r4, r0
    /* soft reset decoder */
    memset(dcode->w, 0, sizeof(dcode->w));
  402d84:	3004      	adds	r0, #4
  402d86:	2100      	movs	r1, #0
  402d88:	2240      	movs	r2, #64	; 0x40
  402d8a:	4b1a      	ldr	r3, [pc, #104]	; (402df4 <zbar_decoder_new_scan+0x74>)
  402d8c:	4798      	blx	r3
    dcode->lock = 0;
  402d8e:	2300      	movs	r3, #0
  402d90:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
    dcode->idx = 0;
  402d94:	7023      	strb	r3, [r4, #0]
    dcode->s6 = 0;
  402d96:	6523      	str	r3, [r4, #80]	; 0x50
} ean_decoder_t;

/* reset EAN/UPC pass specific state */
static inline void ean_new_scan (ean_decoder_t *ean)
{
    ean->pass[0].state = ean->pass[1].state = -1;
  402d98:	22ff      	movs	r2, #255	; 0xff
  402d9a:	f884 2078 	strb.w	r2, [r4, #120]	; 0x78
  402d9e:	f884 2068 	strb.w	r2, [r4, #104]	; 0x68
    ean->pass[2].state = ean->pass[3].state = -1;
  402da2:	f884 2098 	strb.w	r2, [r4, #152]	; 0x98
  402da6:	f884 2088 	strb.w	r2, [r4, #136]	; 0x88
    ean->s4 = 0;
  402daa:	f8c4 30b0 	str.w	r3, [r4, #176]	; 0xb0
} code39_decoder_t;

/* reset Code 39 specific state */
static inline void code39_reset (code39_decoder_t *dcode39)
{
    dcode39->direction = 0;
  402dae:	f894 20ec 	ldrb.w	r2, [r4, #236]	; 0xec
    dcode39->element = 0;
  402db2:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
  402db6:	f363 0244 	bfi	r2, r3, #1, #4
  402dba:	f884 20ec 	strb.w	r2, [r4, #236]	; 0xec
    dcode39->character = -1;
  402dbe:	f8d4 20ec 	ldr.w	r2, [r4, #236]	; 0xec
  402dc2:	f04f 31ff 	mov.w	r1, #4294967295
  402dc6:	f361 1250 	bfi	r2, r1, #5, #12
  402dca:	f8c4 20ec 	str.w	r2, [r4, #236]	; 0xec
    dcode39->s9 = 0;
  402dce:	f8c4 30f0 	str.w	r3, [r4, #240]	; 0xf0
} code128_decoder_t;

/* reset Code 128 specific state */
static inline void code128_reset (code128_decoder_t *dcode128)
{
    dcode128->direction = 0;
  402dd2:	f894 2104 	ldrb.w	r2, [r4, #260]	; 0x104
    dcode128->element = 0;
  402dd6:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
  402dda:	f363 0243 	bfi	r2, r3, #1, #3
  402dde:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
    dcode128->character = -1;
  402de2:	f8b4 2104 	ldrh.w	r2, [r4, #260]	; 0x104
  402de6:	f361 120f 	bfi	r2, r1, #4, #12
  402dea:	f8a4 2104 	strh.w	r2, [r4, #260]	; 0x104
    dcode128->s6 = 0;
  402dee:	f8c4 3108 	str.w	r3, [r4, #264]	; 0x108
  402df2:	bd10      	pop	{r4, pc}
  402df4:	00407669 	.word	0x00407669

00402df8 <zbar_decoder_get_data>:
}

const char *zbar_decoder_get_data (const zbar_decoder_t *dcode)
{
    return((char*)dcode->buf);
}
  402df8:	6dc0      	ldr	r0, [r0, #92]	; 0x5c
  402dfa:	4770      	bx	lr

00402dfc <zbar_decoder_get_data_length>:

unsigned int zbar_decoder_get_data_length (const zbar_decoder_t *dcode)
{
    return(dcode->buflen);
}
  402dfc:	6d80      	ldr	r0, [r0, #88]	; 0x58
  402dfe:	4770      	bx	lr

00402e00 <zbar_decoder_get_direction>:

int zbar_decoder_get_direction (const zbar_decoder_t *dcode)
{
    return(dcode->direction);
}
  402e00:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
  402e02:	4770      	bx	lr

00402e04 <zbar_decoder_set_handler>:

zbar_decoder_handler_t *
zbar_decoder_set_handler (zbar_decoder_t *dcode,
                          zbar_decoder_handler_t *handler)
{
  402e04:	4603      	mov	r3, r0
    zbar_decoder_handler_t *result = dcode->handler;
  402e06:	6e40      	ldr	r0, [r0, #100]	; 0x64
    dcode->handler = handler;
  402e08:	6659      	str	r1, [r3, #100]	; 0x64
    return(result);
}
  402e0a:	4770      	bx	lr

00402e0c <zbar_decoder_set_userdata>:

void zbar_decoder_set_userdata (zbar_decoder_t *dcode,
                                void *userdata)
{
    dcode->userdata = userdata;
  402e0c:	6601      	str	r1, [r0, #96]	; 0x60
  402e0e:	4770      	bx	lr

00402e10 <zbar_decoder_get_userdata>:
}

void *zbar_decoder_get_userdata (const zbar_decoder_t *dcode)
{
    return(dcode->userdata);
}
  402e10:	6e00      	ldr	r0, [r0, #96]	; 0x60
  402e12:	4770      	bx	lr

00402e14 <zbar_decoder_get_type>:

zbar_symbol_type_t zbar_decoder_get_type (const zbar_decoder_t *dcode)
{
    return(dcode->type);
}
  402e14:	f8b0 0044 	ldrh.w	r0, [r0, #68]	; 0x44
  402e18:	4770      	bx	lr
  402e1a:	bf00      	nop

00402e1c <zbar_decoder_get_modifiers>:

unsigned int zbar_decoder_get_modifiers (const zbar_decoder_t *dcode)
{
    return(dcode->modifiers);
}
  402e1c:	6c80      	ldr	r0, [r0, #72]	; 0x48
  402e1e:	4770      	bx	lr

00402e20 <zbar_decode_width>:

zbar_symbol_type_t zbar_decode_width (zbar_decoder_t *dcode,
                                      unsigned w)
{
  402e20:	b570      	push	{r4, r5, r6, lr}
  402e22:	b084      	sub	sp, #16
  402e24:	4604      	mov	r4, r0
    zbar_symbol_type_t tmp, sym = ZBAR_NONE;

    dcode->w[dcode->idx & (DECODE_WINDOW - 1)] = w;
  402e26:	7803      	ldrb	r3, [r0, #0]
  402e28:	f003 020f 	and.w	r2, r3, #15
  402e2c:	eb00 0282 	add.w	r2, r0, r2, lsl #2
  402e30:	6051      	str	r1, [r2, #4]

/* retrieve i-th previous element width */
static inline unsigned get_width (const zbar_decoder_t *dcode,
                                  unsigned char offset)
{
    return(dcode->w[(dcode->idx - offset) & (DECODE_WINDOW - 1)]);
  402e32:	1e5a      	subs	r2, r3, #1
  402e34:	f002 020f 	and.w	r2, r2, #15
  402e38:	eb00 0282 	add.w	r2, r0, r2, lsl #2
  402e3c:	6851      	ldr	r1, [r2, #4]
  402e3e:	6d02      	ldr	r2, [r0, #80]	; 0x50
  402e40:	440a      	add	r2, r1
  402e42:	3b07      	subs	r3, #7
  402e44:	f003 030f 	and.w	r3, r3, #15
  402e48:	eb00 0383 	add.w	r3, r0, r3, lsl #2
    dbprintf(1, "    decode[%x]: w=%d (%g)\n", dcode->idx, w, (w / 32.));

    /* update shared character width */
    dcode->s6 -= get_width(dcode, 7);
    dcode->s6 += get_width(dcode, 1);
  402e4c:	685b      	ldr	r3, [r3, #4]
  402e4e:	1ad2      	subs	r2, r2, r3
  402e50:	6502      	str	r2, [r0, #80]	; 0x50
    if(TEST_CFG(dcode->qrf.config, ZBAR_CFG_ENABLE) &&
       (tmp = _zbar_find_qr(dcode)) > ZBAR_PARTIAL)
        sym = tmp;
#endif
#ifdef ENABLE_EAN
    if((dcode->ean.enable) &&
  402e52:	f990 30ca 	ldrsb.w	r3, [r0, #202]	; 0xca
  402e56:	b11b      	cbz	r3, 402e60 <zbar_decode_width+0x40>
  402e58:	4b21      	ldr	r3, [pc, #132]	; (402ee0 <zbar_decode_width+0xc0>)
  402e5a:	4798      	blx	r3
  402e5c:	4605      	mov	r5, r0
  402e5e:	e000      	b.n	402e62 <zbar_decode_width+0x42>
}

zbar_symbol_type_t zbar_decode_width (zbar_decoder_t *dcode,
                                      unsigned w)
{
    zbar_symbol_type_t tmp, sym = ZBAR_NONE;
  402e60:	2500      	movs	r5, #0
    if((dcode->ean.enable) &&
       (tmp = _zbar_decode_ean(dcode)))
        sym = tmp;
#endif
#ifdef ENABLE_CODE39
    if(TEST_CFG(dcode->code39.config, ZBAR_CFG_ENABLE) &&
  402e62:	f8d4 30f8 	ldr.w	r3, [r4, #248]	; 0xf8
  402e66:	f013 0f01 	tst.w	r3, #1
  402e6a:	d005      	beq.n	402e78 <zbar_decode_width+0x58>
  402e6c:	4620      	mov	r0, r4
  402e6e:	4b1d      	ldr	r3, [pc, #116]	; (402ee4 <zbar_decode_width+0xc4>)
  402e70:	4798      	blx	r3
       (tmp = _zbar_decode_code39(dcode)) > ZBAR_PARTIAL)
        sym = tmp;
  402e72:	2801      	cmp	r0, #1
  402e74:	bf88      	it	hi
  402e76:	4605      	movhi	r5, r0
    if(TEST_CFG(dcode->code93.config, ZBAR_CFG_ENABLE) &&
       (tmp = _zbar_decode_code93(dcode)) > ZBAR_PARTIAL)
        sym = tmp;
#endif
#ifdef ENABLE_CODE128
    if(TEST_CFG(dcode->code128.config, ZBAR_CFG_ENABLE) &&
  402e78:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
  402e7c:	f013 0f01 	tst.w	r3, #1
  402e80:	d005      	beq.n	402e8e <zbar_decode_width+0x6e>
  402e82:	4620      	mov	r0, r4
  402e84:	4b18      	ldr	r3, [pc, #96]	; (402ee8 <zbar_decode_width+0xc8>)
  402e86:	4798      	blx	r3
       (tmp = _zbar_decode_code128(dcode)) > ZBAR_PARTIAL)
        sym = tmp;
  402e88:	2801      	cmp	r0, #1
  402e8a:	bf88      	it	hi
  402e8c:	4605      	movhi	r5, r0
    if(TEST_CFG(dcode->pdf417.config, ZBAR_CFG_ENABLE) &&
       (tmp = _zbar_decode_pdf417(dcode)) > ZBAR_PARTIAL)
        sym = tmp;
#endif

    dcode->idx++;
  402e8e:	7823      	ldrb	r3, [r4, #0]
  402e90:	3301      	adds	r3, #1
  402e92:	7023      	strb	r3, [r4, #0]
    dcode->type = sym;
  402e94:	f8a4 5044 	strh.w	r5, [r4, #68]	; 0x44
    if(sym) {
  402e98:	b1fd      	cbz	r5, 402eda <zbar_decode_width+0xba>
        if(dcode->lock && sym > ZBAR_PARTIAL && sym != ZBAR_QRCODE)
  402e9a:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
  402e9e:	b1c3      	cbz	r3, 402ed2 <zbar_decode_width+0xb2>
  402ea0:	2d01      	cmp	r5, #1
  402ea2:	d916      	bls.n	402ed2 <zbar_decode_width+0xb2>
  402ea4:	2d40      	cmp	r5, #64	; 0x40
  402ea6:	d014      	beq.n	402ed2 <zbar_decode_width+0xb2>

/* check and release shared state lock */
static inline char release_lock (zbar_decoder_t *dcode,
                                 zbar_symbol_type_t req)
{
    zassert(dcode->lock == req, 1, "lock=%d req=%d\n",
  402ea8:	429d      	cmp	r5, r3
  402eaa:	d00f      	beq.n	402ecc <zbar_decode_width+0xac>
  402eac:	4a0f      	ldr	r2, [pc, #60]	; (402eec <zbar_decode_width+0xcc>)
  402eae:	6812      	ldr	r2, [r2, #0]
  402eb0:	68d0      	ldr	r0, [r2, #12]
  402eb2:	4a0f      	ldr	r2, [pc, #60]	; (402ef0 <zbar_decode_width+0xd0>)
  402eb4:	9200      	str	r2, [sp, #0]
  402eb6:	4a0f      	ldr	r2, [pc, #60]	; (402ef4 <zbar_decode_width+0xd4>)
  402eb8:	9201      	str	r2, [sp, #4]
  402eba:	9302      	str	r3, [sp, #8]
  402ebc:	9503      	str	r5, [sp, #12]
  402ebe:	490e      	ldr	r1, [pc, #56]	; (402ef8 <zbar_decode_width+0xd8>)
  402ec0:	4a0e      	ldr	r2, [pc, #56]	; (402efc <zbar_decode_width+0xdc>)
  402ec2:	f240 1307 	movw	r3, #263	; 0x107
  402ec6:	4e0e      	ldr	r6, [pc, #56]	; (402f00 <zbar_decode_width+0xe0>)
  402ec8:	47b0      	blx	r6
  402eca:	e002      	b.n	402ed2 <zbar_decode_width+0xb2>
            dcode->lock, req);
    dcode->lock = 0;
  402ecc:	2300      	movs	r3, #0
  402ece:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
            release_lock(dcode, sym);
        if(dcode->handler)
  402ed2:	6e63      	ldr	r3, [r4, #100]	; 0x64
  402ed4:	b10b      	cbz	r3, 402eda <zbar_decode_width+0xba>
            dcode->handler(dcode);
  402ed6:	4620      	mov	r0, r4
  402ed8:	4798      	blx	r3
    }
    return(sym);
}
  402eda:	4628      	mov	r0, r5
  402edc:	b004      	add	sp, #16
  402ede:	bd70      	pop	{r4, r5, r6, pc}
  402ee0:	00403159 	.word	0x00403159
  402ee4:	004024c5 	.word	0x004024c5
  402ee8:	00401415 	.word	0x00401415
  402eec:	20000440 	.word	0x20000440
  402ef0:	0040f4ac 	.word	0x0040f4ac
  402ef4:	0040ee80 	.word	0x0040ee80
  402ef8:	0040ee14 	.word	0x0040ee14
  402efc:	0040ee50 	.word	0x0040ee50
  402f00:	004066d1 	.word	0x004066d1

00402f04 <zbar_decoder_get_configs>:
static inline const unsigned int*
decoder_get_configp (const zbar_decoder_t *dcode,
                     zbar_symbol_type_t sym)
{
    const unsigned int *config;
    switch(sym) {
  402f04:	290a      	cmp	r1, #10
  402f06:	d024      	beq.n	402f52 <zbar_decoder_get_configs+0x4e>
  402f08:	d80a      	bhi.n	402f20 <zbar_decoder_get_configs+0x1c>
  402f0a:	2905      	cmp	r1, #5
  402f0c:	d019      	beq.n	402f42 <zbar_decoder_get_configs+0x3e>
  402f0e:	d802      	bhi.n	402f16 <zbar_decoder_get_configs+0x12>
  402f10:	2902      	cmp	r1, #2
  402f12:	d014      	beq.n	402f3e <zbar_decoder_get_configs+0x3a>
  402f14:	e026      	b.n	402f64 <zbar_decoder_get_configs+0x60>
  402f16:	2908      	cmp	r1, #8
  402f18:	d015      	beq.n	402f46 <zbar_decoder_get_configs+0x42>
  402f1a:	2909      	cmp	r1, #9
  402f1c:	d017      	beq.n	402f4e <zbar_decoder_get_configs+0x4a>
  402f1e:	e021      	b.n	402f64 <zbar_decoder_get_configs+0x60>
  402f20:	290e      	cmp	r1, #14
  402f22:	d018      	beq.n	402f56 <zbar_decoder_get_configs+0x52>
  402f24:	d804      	bhi.n	402f30 <zbar_decoder_get_configs+0x2c>
  402f26:	290c      	cmp	r1, #12
  402f28:	d00f      	beq.n	402f4a <zbar_decoder_get_configs+0x46>
  402f2a:	290d      	cmp	r1, #13
  402f2c:	d005      	beq.n	402f3a <zbar_decoder_get_configs+0x36>
  402f2e:	e019      	b.n	402f64 <zbar_decoder_get_configs+0x60>
  402f30:	2927      	cmp	r1, #39	; 0x27
  402f32:	d012      	beq.n	402f5a <zbar_decoder_get_configs+0x56>
  402f34:	2980      	cmp	r1, #128	; 0x80
  402f36:	d012      	beq.n	402f5e <zbar_decoder_get_configs+0x5a>
  402f38:	e014      	b.n	402f64 <zbar_decoder_get_configs+0x60>
#ifdef ENABLE_EAN
    case ZBAR_EAN13:
        config = &dcode->ean.ean13_config;
  402f3a:	30cc      	adds	r0, #204	; 0xcc
  402f3c:	e013      	b.n	402f66 <zbar_decoder_get_configs+0x62>
        break;

    case ZBAR_EAN2:
        config = &dcode->ean.ean2_config;
  402f3e:	30e8      	adds	r0, #232	; 0xe8
  402f40:	e011      	b.n	402f66 <zbar_decoder_get_configs+0x62>
        break;

    case ZBAR_EAN5:
        config = &dcode->ean.ean5_config;
  402f42:	30e4      	adds	r0, #228	; 0xe4
  402f44:	e00f      	b.n	402f66 <zbar_decoder_get_configs+0x62>
        break;

    case ZBAR_EAN8:
        config = &dcode->ean.ean8_config;
  402f46:	30d0      	adds	r0, #208	; 0xd0
  402f48:	e00d      	b.n	402f66 <zbar_decoder_get_configs+0x62>
        break;

    case ZBAR_UPCA:
        config = &dcode->ean.upca_config;
  402f4a:	30d4      	adds	r0, #212	; 0xd4
  402f4c:	e00b      	b.n	402f66 <zbar_decoder_get_configs+0x62>
        break;

    case ZBAR_UPCE:
        config = &dcode->ean.upce_config;
  402f4e:	30d8      	adds	r0, #216	; 0xd8
  402f50:	e009      	b.n	402f66 <zbar_decoder_get_configs+0x62>
        break;

    case ZBAR_ISBN10:
        config = &dcode->ean.isbn10_config;
  402f52:	30dc      	adds	r0, #220	; 0xdc
  402f54:	e007      	b.n	402f66 <zbar_decoder_get_configs+0x62>
        break;

    case ZBAR_ISBN13:
        config = &dcode->ean.isbn13_config;
  402f56:	30e0      	adds	r0, #224	; 0xe0
  402f58:	e005      	b.n	402f66 <zbar_decoder_get_configs+0x62>
        break;
#endif

#ifdef ENABLE_CODE39
    case ZBAR_CODE39:
        config = &dcode->code39.config;
  402f5a:	30f8      	adds	r0, #248	; 0xf8
  402f5c:	e003      	b.n	402f66 <zbar_decoder_get_configs+0x62>
        break;
#endif

#ifdef ENABLE_CODE128
    case ZBAR_CODE128:
        config = &dcode->code128.config;
  402f5e:	f500 7088 	add.w	r0, r0, #272	; 0x110
  402f62:	e000      	b.n	402f66 <zbar_decoder_get_configs+0x62>
        config = &dcode->qrf.config;
        break;
#endif

    default:
        config = NULL;
  402f64:	2000      	movs	r0, #0

unsigned int zbar_decoder_get_configs (const zbar_decoder_t *dcode,
                                       zbar_symbol_type_t sym)
{
    const unsigned *config = decoder_get_configp(dcode, sym);
    if(!config)
  402f66:	b108      	cbz	r0, 402f6c <zbar_decoder_get_configs+0x68>
        return(0);
    return(*config);
  402f68:	6800      	ldr	r0, [r0, #0]
  402f6a:	4770      	bx	lr
unsigned int zbar_decoder_get_configs (const zbar_decoder_t *dcode,
                                       zbar_symbol_type_t sym)
{
    const unsigned *config = decoder_get_configp(dcode, sym);
    if(!config)
        return(0);
  402f6c:	2000      	movs	r0, #0
    return(*config);
}
  402f6e:	4770      	bx	lr

00402f70 <zbar_decoder_set_config>:

int zbar_decoder_set_config (zbar_decoder_t *dcode,
                             zbar_symbol_type_t sym,
                             zbar_config_t cfg,
                             int val)
{
  402f70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if(sym == ZBAR_NONE) {
  402f72:	b979      	cbnz	r1, 402f94 <zbar_decoder_set_config+0x24>
  402f74:	461e      	mov	r6, r3
  402f76:	4615      	mov	r5, r2
  402f78:	4607      	mov	r7, r0
  402f7a:	210d      	movs	r1, #13
  402f7c:	4c4a      	ldr	r4, [pc, #296]	; (4030a8 <zbar_decoder_set_config+0x138>)
	    ZBAR_CODE39, ZBAR_CODE93, ZBAR_CODE128, ZBAR_QRCODE, 
	    ZBAR_PDF417, 0
        };
        const zbar_symbol_type_t *symp;
        for(symp = all; *symp; symp++)
            zbar_decoder_set_config(dcode, *symp, cfg, val);
  402f7e:	4638      	mov	r0, r7
  402f80:	462a      	mov	r2, r5
  402f82:	4633      	mov	r3, r6
  402f84:	f7ff fff4 	bl	402f70 <zbar_decoder_set_config>
            ZBAR_I25, ZBAR_DATABAR, ZBAR_DATABAR_EXP, ZBAR_CODABAR,
	    ZBAR_CODE39, ZBAR_CODE93, ZBAR_CODE128, ZBAR_QRCODE, 
	    ZBAR_PDF417, 0
        };
        const zbar_symbol_type_t *symp;
        for(symp = all; *symp; symp++)
  402f88:	f834 1f02 	ldrh.w	r1, [r4, #2]!
  402f8c:	2900      	cmp	r1, #0
  402f8e:	d1f6      	bne.n	402f7e <zbar_decoder_set_config+0xe>
            zbar_decoder_set_config(dcode, *symp, cfg, val);
        return(0);
  402f90:	2000      	movs	r0, #0
  402f92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  402f94:	460c      	mov	r4, r1
    }

    if(cfg >= 0 && cfg < ZBAR_CFG_NUM)
  402f96:	2a03      	cmp	r2, #3
  402f98:	d864      	bhi.n	403064 <zbar_decoder_set_config+0xf4>
static inline const unsigned int*
decoder_get_configp (const zbar_decoder_t *dcode,
                     zbar_symbol_type_t sym)
{
    const unsigned int *config;
    switch(sym) {
  402f9a:	290a      	cmp	r1, #10
  402f9c:	d02a      	beq.n	402ff4 <zbar_decoder_set_config+0x84>
  402f9e:	d80a      	bhi.n	402fb6 <zbar_decoder_set_config+0x46>
  402fa0:	2905      	cmp	r1, #5
  402fa2:	d01b      	beq.n	402fdc <zbar_decoder_set_config+0x6c>
  402fa4:	d802      	bhi.n	402fac <zbar_decoder_set_config+0x3c>
  402fa6:	2902      	cmp	r1, #2
  402fa8:	d015      	beq.n	402fd6 <zbar_decoder_set_config+0x66>
  402faa:	e070      	b.n	40308e <zbar_decoder_set_config+0x11e>
  402fac:	2908      	cmp	r1, #8
  402fae:	d018      	beq.n	402fe2 <zbar_decoder_set_config+0x72>
  402fb0:	2909      	cmp	r1, #9
  402fb2:	d01c      	beq.n	402fee <zbar_decoder_set_config+0x7e>
  402fb4:	e06b      	b.n	40308e <zbar_decoder_set_config+0x11e>
  402fb6:	290e      	cmp	r1, #14
  402fb8:	d01f      	beq.n	402ffa <zbar_decoder_set_config+0x8a>
  402fba:	d804      	bhi.n	402fc6 <zbar_decoder_set_config+0x56>
  402fbc:	290c      	cmp	r1, #12
  402fbe:	d013      	beq.n	402fe8 <zbar_decoder_set_config+0x78>
  402fc0:	290d      	cmp	r1, #13
  402fc2:	d005      	beq.n	402fd0 <zbar_decoder_set_config+0x60>
  402fc4:	e063      	b.n	40308e <zbar_decoder_set_config+0x11e>
  402fc6:	2927      	cmp	r1, #39	; 0x27
  402fc8:	d01a      	beq.n	403000 <zbar_decoder_set_config+0x90>
  402fca:	2980      	cmp	r1, #128	; 0x80
  402fcc:	d01b      	beq.n	403006 <zbar_decoder_set_config+0x96>
  402fce:	e05e      	b.n	40308e <zbar_decoder_set_config+0x11e>
#ifdef ENABLE_EAN
    case ZBAR_EAN13:
        config = &dcode->ean.ean13_config;
  402fd0:	f100 01cc 	add.w	r1, r0, #204	; 0xcc
  402fd4:	e065      	b.n	4030a2 <zbar_decoder_set_config+0x132>
        break;

    case ZBAR_EAN2:
        config = &dcode->ean.ean2_config;
  402fd6:	f100 01e8 	add.w	r1, r0, #232	; 0xe8
  402fda:	e062      	b.n	4030a2 <zbar_decoder_set_config+0x132>
        break;

    case ZBAR_EAN5:
        config = &dcode->ean.ean5_config;
  402fdc:	f100 01e4 	add.w	r1, r0, #228	; 0xe4
  402fe0:	e05f      	b.n	4030a2 <zbar_decoder_set_config+0x132>
        break;

    case ZBAR_EAN8:
        config = &dcode->ean.ean8_config;
  402fe2:	f100 01d0 	add.w	r1, r0, #208	; 0xd0
  402fe6:	e05c      	b.n	4030a2 <zbar_decoder_set_config+0x132>
        break;

    case ZBAR_UPCA:
        config = &dcode->ean.upca_config;
  402fe8:	f100 01d4 	add.w	r1, r0, #212	; 0xd4
  402fec:	e059      	b.n	4030a2 <zbar_decoder_set_config+0x132>
        break;

    case ZBAR_UPCE:
        config = &dcode->ean.upce_config;
  402fee:	f100 01d8 	add.w	r1, r0, #216	; 0xd8
  402ff2:	e056      	b.n	4030a2 <zbar_decoder_set_config+0x132>
        break;

    case ZBAR_ISBN10:
        config = &dcode->ean.isbn10_config;
  402ff4:	f100 01dc 	add.w	r1, r0, #220	; 0xdc
  402ff8:	e053      	b.n	4030a2 <zbar_decoder_set_config+0x132>
        break;

    case ZBAR_ISBN13:
        config = &dcode->ean.isbn13_config;
  402ffa:	f100 01e0 	add.w	r1, r0, #224	; 0xe0
  402ffe:	e050      	b.n	4030a2 <zbar_decoder_set_config+0x132>
        break;
#endif

#ifdef ENABLE_CODE39
    case ZBAR_CODE39:
        config = &dcode->code39.config;
  403000:	f100 01f8 	add.w	r1, r0, #248	; 0xf8
  403004:	e04d      	b.n	4030a2 <zbar_decoder_set_config+0x132>
        break;
#endif

#ifdef ENABLE_CODE128
    case ZBAR_CODE128:
        config = &dcode->code128.config;
  403006:	f500 7188 	add.w	r1, r0, #272	; 0x110
  40300a:	e04a      	b.n	4030a2 <zbar_decoder_set_config+0x132>
{
    unsigned *config = (void*)decoder_get_configp(dcode, sym);
    if(!config || cfg >= ZBAR_CFG_NUM)
        return(1);

    if(!val)
  40300c:	b93b      	cbnz	r3, 40301e <zbar_decoder_set_config+0xae>
        *config &= ~(1 << cfg);
  40300e:	2301      	movs	r3, #1
  403010:	fa03 f202 	lsl.w	r2, r3, r2
  403014:	680b      	ldr	r3, [r1, #0]
  403016:	ea23 0302 	bic.w	r3, r3, r2
  40301a:	600b      	str	r3, [r1, #0]
  40301c:	e005      	b.n	40302a <zbar_decoder_set_config+0xba>
    else if(val == 1)
  40301e:	2b01      	cmp	r3, #1
  403020:	d137      	bne.n	403092 <zbar_decoder_set_config+0x122>
        *config |= (1 << cfg);
  403022:	4093      	lsls	r3, r2
  403024:	680a      	ldr	r2, [r1, #0]
  403026:	4313      	orrs	r3, r2
  403028:	600b      	str	r3, [r1, #0]
    else
        return(1);

#ifdef ENABLE_EAN
    dcode->ean.enable = TEST_CFG(dcode->ean.ean13_config |
  40302a:	f8d0 20e8 	ldr.w	r2, [r0, #232]	; 0xe8
  40302e:	f8d0 30cc 	ldr.w	r3, [r0, #204]	; 0xcc
  403032:	431a      	orrs	r2, r3
  403034:	f8d0 30e4 	ldr.w	r3, [r0, #228]	; 0xe4
  403038:	431a      	orrs	r2, r3
  40303a:	f8d0 30d0 	ldr.w	r3, [r0, #208]	; 0xd0
  40303e:	431a      	orrs	r2, r3
  403040:	f8d0 30d4 	ldr.w	r3, [r0, #212]	; 0xd4
  403044:	431a      	orrs	r2, r3
  403046:	f8d0 30d8 	ldr.w	r3, [r0, #216]	; 0xd8
  40304a:	431a      	orrs	r2, r3
  40304c:	f8d0 30dc 	ldr.w	r3, [r0, #220]	; 0xdc
  403050:	431a      	orrs	r2, r3
  403052:	f8d0 30e0 	ldr.w	r3, [r0, #224]	; 0xe0
  403056:	4313      	orrs	r3, r2
  403058:	f003 0301 	and.w	r3, r3, #1
  40305c:	f880 30ca 	strb.w	r3, [r0, #202]	; 0xca
                                 dcode->ean.isbn10_config |
                                 dcode->ean.isbn13_config,
                                 ZBAR_CFG_ENABLE);
#endif

    return(0);
  403060:	2000      	movs	r0, #0
  403062:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return(0);
    }

    if(cfg >= 0 && cfg < ZBAR_CFG_NUM)
        return(decoder_set_config_bool(dcode, sym, cfg, val));
    else if(cfg >= ZBAR_CFG_MIN_LEN && cfg <= ZBAR_CFG_MAX_LEN)
  403064:	f1a2 0120 	sub.w	r1, r2, #32
  403068:	b289      	uxth	r1, r1
  40306a:	2901      	cmp	r1, #1
  40306c:	d813      	bhi.n	403096 <zbar_decoder_set_config+0x126>
static inline int decoder_set_config_int (zbar_decoder_t *dcode,
                                          zbar_symbol_type_t sym,
                                          zbar_config_t cfg,
                                          int val)
{
    switch(sym) {
  40306e:	2c27      	cmp	r4, #39	; 0x27
  403070:	d002      	beq.n	403078 <zbar_decoder_set_config+0x108>
  403072:	2c80      	cmp	r4, #128	; 0x80
  403074:	d005      	beq.n	403082 <zbar_decoder_set_config+0x112>
  403076:	e010      	b.n	40309a <zbar_decoder_set_config+0x12a>
        CFG(dcode->codabar, cfg) = val;
        break;
#endif
#ifdef ENABLE_CODE39
    case ZBAR_CODE39:
        CFG(dcode->code39, cfg) = val;
  403078:	eb00 0282 	add.w	r2, r0, r2, lsl #2
  40307c:	67d3      	str	r3, [r2, #124]	; 0x7c
#endif

    default:
        return(1);
    }
    return(0);
  40307e:	2000      	movs	r0, #0
  403080:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        CFG(dcode->code93, cfg) = val;
        break;
#endif
#ifdef ENABLE_CODE128
    case ZBAR_CODE128:
        CFG(dcode->code128, cfg) = val;
  403082:	eb00 0282 	add.w	r2, r0, r2, lsl #2
  403086:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
#endif

    default:
        return(1);
    }
    return(0);
  40308a:	2000      	movs	r0, #0
  40308c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                                           zbar_config_t cfg,
                                           int val)
{
    unsigned *config = (void*)decoder_get_configp(dcode, sym);
    if(!config || cfg >= ZBAR_CFG_NUM)
        return(1);
  40308e:	2001      	movs	r0, #1
  403090:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(!val)
        *config &= ~(1 << cfg);
    else if(val == 1)
        *config |= (1 << cfg);
    else
        return(1);
  403092:	2001      	movs	r0, #1
  403094:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(cfg >= 0 && cfg < ZBAR_CFG_NUM)
        return(decoder_set_config_bool(dcode, sym, cfg, val));
    else if(cfg >= ZBAR_CFG_MIN_LEN && cfg <= ZBAR_CFG_MAX_LEN)
        return(decoder_set_config_int(dcode, sym, cfg, val));
    else
        return(1);
  403096:	2001      	movs	r0, #1
  403098:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        CFG(dcode->pdf417, cfg) = val;
        break;
#endif

    default:
        return(1);
  40309a:	2001      	movs	r0, #1
  40309c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                                           zbar_config_t cfg,
                                           int val)
{
    unsigned *config = (void*)decoder_get_configp(dcode, sym);
    if(!config || cfg >= ZBAR_CFG_NUM)
        return(1);
  40309e:	2001      	movs	r0, #1
  4030a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                                           zbar_symbol_type_t sym,
                                           zbar_config_t cfg,
                                           int val)
{
    unsigned *config = (void*)decoder_get_configp(dcode, sym);
    if(!config || cfg >= ZBAR_CFG_NUM)
  4030a2:	2900      	cmp	r1, #0
  4030a4:	d1b2      	bne.n	40300c <zbar_decoder_set_config+0x9c>
  4030a6:	e7fa      	b.n	40309e <zbar_decoder_set_config+0x12e>
  4030a8:	0040f4bc 	.word	0x0040f4bc

004030ac <_zbar_decoder_buf_dump>:
static char *decoder_dump = NULL;
static unsigned decoder_dumplen = 0;

const char *_zbar_decoder_buf_dump (unsigned char *buf,
                                    unsigned int buflen)
{
  4030ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  4030b0:	b082      	sub	sp, #8
  4030b2:	4606      	mov	r6, r0
  4030b4:	460f      	mov	r7, r1
    int dumplen = (buflen * 3) + 12;
  4030b6:	eb01 0441 	add.w	r4, r1, r1, lsl #1
  4030ba:	340c      	adds	r4, #12
    char *p;
    int i;

    if(!decoder_dump || dumplen > decoder_dumplen) {
  4030bc:	4b1d      	ldr	r3, [pc, #116]	; (403134 <_zbar_decoder_buf_dump+0x88>)
  4030be:	6818      	ldr	r0, [r3, #0]
  4030c0:	b128      	cbz	r0, 4030ce <_zbar_decoder_buf_dump+0x22>
  4030c2:	4b1d      	ldr	r3, [pc, #116]	; (403138 <_zbar_decoder_buf_dump+0x8c>)
  4030c4:	681b      	ldr	r3, [r3, #0]
  4030c6:	429c      	cmp	r4, r3
  4030c8:	d908      	bls.n	4030dc <_zbar_decoder_buf_dump+0x30>
        if(decoder_dump)
            free(decoder_dump);
  4030ca:	4b1c      	ldr	r3, [pc, #112]	; (40313c <_zbar_decoder_buf_dump+0x90>)
  4030cc:	4798      	blx	r3
        decoder_dump = malloc(dumplen);
  4030ce:	4620      	mov	r0, r4
  4030d0:	4b1b      	ldr	r3, [pc, #108]	; (403140 <_zbar_decoder_buf_dump+0x94>)
  4030d2:	4798      	blx	r3
  4030d4:	4b17      	ldr	r3, [pc, #92]	; (403134 <_zbar_decoder_buf_dump+0x88>)
  4030d6:	6018      	str	r0, [r3, #0]
        decoder_dumplen = dumplen;
  4030d8:	4b17      	ldr	r3, [pc, #92]	; (403138 <_zbar_decoder_buf_dump+0x8c>)
  4030da:	601c      	str	r4, [r3, #0]
    }
    p = decoder_dump +
        snprintf(decoder_dump, 12, "buf[%04x]=",
  4030dc:	4b15      	ldr	r3, [pc, #84]	; (403134 <_zbar_decoder_buf_dump+0x88>)
  4030de:	681d      	ldr	r5, [r3, #0]
  4030e0:	4628      	mov	r0, r5
  4030e2:	210c      	movs	r1, #12
  4030e4:	4a17      	ldr	r2, [pc, #92]	; (403144 <_zbar_decoder_buf_dump+0x98>)
  4030e6:	f64f 73ff 	movw	r3, #65535	; 0xffff
  4030ea:	42bb      	cmp	r3, r7
  4030ec:	bf28      	it	cs
  4030ee:	463b      	movcs	r3, r7
  4030f0:	4c15      	ldr	r4, [pc, #84]	; (403148 <_zbar_decoder_buf_dump+0x9c>)
  4030f2:	47a0      	blx	r4
        if(decoder_dump)
            free(decoder_dump);
        decoder_dump = malloc(dumplen);
        decoder_dumplen = dumplen;
    }
    p = decoder_dump +
  4030f4:	4405      	add	r5, r0
        snprintf(decoder_dump, 12, "buf[%04x]=",
                 (buflen > 0xffff) ? 0xffff : buflen);
    for(i = 0; i < buflen; i++)
  4030f6:	b1c7      	cbz	r7, 40312a <_zbar_decoder_buf_dump+0x7e>
  4030f8:	3e01      	subs	r6, #1
  4030fa:	2400      	movs	r4, #0
        p += snprintf(p, 4, "%s%02x", (i) ? " " : "",  buf[i]);
  4030fc:	4b13      	ldr	r3, [pc, #76]	; (40314c <_zbar_decoder_buf_dump+0xa0>)
  4030fe:	f8df 9050 	ldr.w	r9, [pc, #80]	; 403150 <_zbar_decoder_buf_dump+0xa4>
  403102:	f8df 8044 	ldr.w	r8, [pc, #68]	; 403148 <_zbar_decoder_buf_dump+0x9c>
  403106:	f8df a04c 	ldr.w	sl, [pc, #76]	; 403154 <_zbar_decoder_buf_dump+0xa8>
  40310a:	e003      	b.n	403114 <_zbar_decoder_buf_dump+0x68>
  40310c:	4b0f      	ldr	r3, [pc, #60]	; (40314c <_zbar_decoder_buf_dump+0xa0>)
  40310e:	2c00      	cmp	r4, #0
  403110:	bf18      	it	ne
  403112:	4653      	movne	r3, sl
  403114:	f816 2f01 	ldrb.w	r2, [r6, #1]!
  403118:	9200      	str	r2, [sp, #0]
  40311a:	4628      	mov	r0, r5
  40311c:	2104      	movs	r1, #4
  40311e:	464a      	mov	r2, r9
  403120:	47c0      	blx	r8
  403122:	4405      	add	r5, r0
        decoder_dumplen = dumplen;
    }
    p = decoder_dump +
        snprintf(decoder_dump, 12, "buf[%04x]=",
                 (buflen > 0xffff) ? 0xffff : buflen);
    for(i = 0; i < buflen; i++)
  403124:	3401      	adds	r4, #1
  403126:	42bc      	cmp	r4, r7
  403128:	d1f0      	bne.n	40310c <_zbar_decoder_buf_dump+0x60>
        p += snprintf(p, 4, "%s%02x", (i) ? " " : "",  buf[i]);
    return(decoder_dump);
}
  40312a:	4b02      	ldr	r3, [pc, #8]	; (403134 <_zbar_decoder_buf_dump+0x88>)
  40312c:	6818      	ldr	r0, [r3, #0]
  40312e:	b002      	add	sp, #8
  403130:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  403134:	20000d10 	.word	0x20000d10
  403138:	20000d0c 	.word	0x20000d0c
  40313c:	00406e41 	.word	0x00406e41
  403140:	00406e31 	.word	0x00406e31
  403144:	0040f4e4 	.word	0x0040f4e4
  403148:	00407b2d 	.word	0x00407b2d
  40314c:	0040f8a8 	.word	0x0040f8a8
  403150:	0040f4f0 	.word	0x0040f4f0
  403154:	0040f4e0 	.word	0x0040f4e0

00403158 <_zbar_decode_ean>:
    dcode->modifiers = 0;
    dbprintf(2, " base=%d j=%d (%s)", base, j, dcode->buf);
}

zbar_symbol_type_t _zbar_decode_ean (zbar_decoder_t *dcode)
{
  403158:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40315c:	b091      	sub	sp, #68	; 0x44
  40315e:	4681      	mov	r9, r0
    /* process upto 4 separate passes */
    zbar_symbol_type_t sym = ZBAR_NONE;
    unsigned char pass_idx = dcode->idx & 3;
  403160:	7803      	ldrb	r3, [r0, #0]
  403162:	f003 0203 	and.w	r2, r3, #3
  403166:	920a      	str	r2, [sp, #40]	; 0x28

/* retrieve i-th previous element width */
static inline unsigned get_width (const zbar_decoder_t *dcode,
                                  unsigned char offset)
{
    return(dcode->w[(dcode->idx - offset) & (DECODE_WINDOW - 1)]);
  403168:	f003 020f 	and.w	r2, r3, #15
  40316c:	eb00 0282 	add.w	r2, r0, r2, lsl #2
  403170:	6851      	ldr	r1, [r2, #4]
  403172:	f8d0 20b0 	ldr.w	r2, [r0, #176]	; 0xb0
  403176:	440a      	add	r2, r1
  403178:	3b04      	subs	r3, #4
  40317a:	f003 030f 	and.w	r3, r3, #15
  40317e:	eb00 0383 	add.w	r3, r0, r3, lsl #2
    unsigned char i;

    /* update latest character width */
    dcode->ean.s4 -= get_width(dcode, 4);
    dcode->ean.s4 += get_width(dcode, 0);
  403182:	685b      	ldr	r3, [r3, #4]
  403184:	1ad2      	subs	r2, r2, r3
  403186:	f8c0 20b0 	str.w	r2, [r0, #176]	; 0xb0
  40318a:	4682      	mov	sl, r0
  40318c:	f04f 0800 	mov.w	r8, #0
}

zbar_symbol_type_t _zbar_decode_ean (zbar_decoder_t *dcode)
{
    /* process upto 4 separate passes */
    zbar_symbol_type_t sym = ZBAR_NONE;
  403190:	46c3      	mov	fp, r8
    /* update latest character width */
    dcode->ean.s4 -= get_width(dcode, 4);
    dcode->ean.s4 += get_width(dcode, 0);

    for(i = 0; i < 4; i++) {
        ean_pass_t *pass = &dcode->ean.pass[i];
  403192:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
  403196:	4654      	mov	r4, sl
        if(pass->state >= 0 ||
  403198:	f89a 2068 	ldrb.w	r2, [sl, #104]	; 0x68
  40319c:	f012 0f80 	tst.w	r2, #128	; 0x80
  4031a0:	d005      	beq.n	4031ae <_zbar_decode_ean+0x56>
  4031a2:	fa5f f388 	uxtb.w	r3, r8
  4031a6:	990a      	ldr	r1, [sp, #40]	; 0x28
  4031a8:	428b      	cmp	r3, r1
  4031aa:	f040 87c0 	bne.w	40412e <_zbar_decode_ean+0xfd6>
/* update state for one of 4 parallel passes */
static inline zbar_symbol_type_t decode_pass (zbar_decoder_t *dcode,
                                              ean_pass_t *pass)
{
    unsigned char idx, fwd;
    pass->state++;
  4031ae:	b2d2      	uxtb	r2, r2
  4031b0:	1c51      	adds	r1, r2, #1
  4031b2:	b2c9      	uxtb	r1, r1
  4031b4:	b2ce      	uxtb	r6, r1
  4031b6:	f884 6068 	strb.w	r6, [r4, #104]	; 0x68
    idx = pass->state & STATE_IDX;
  4031ba:	f001 053f 	and.w	r5, r1, #63	; 0x3f
};

/* return current element color */
static inline char get_color (const zbar_decoder_t *dcode)
{
    return(dcode->idx & 1);
  4031be:	f899 3000 	ldrb.w	r3, [r9]
    fwd = pass->state & 1;

    if(get_color(dcode) == ZBAR_SPACE) {
  4031c2:	f013 0c01 	ands.w	ip, r3, #1
  4031c6:	f040 828b 	bne.w	4036e0 <_zbar_decode_ean+0x588>
        if(pass->state & STATE_ADDON) {
  4031ca:	f011 0f40 	tst.w	r1, #64	; 0x40
  4031ce:	f000 80b9 	beq.w	403344 <_zbar_decode_ean+0x1ec>
            dbprintf(2, " i=%d", idx);
            if(idx == 0x09 || idx == 0x21) {
  4031d2:	2d09      	cmp	r5, #9
  4031d4:	d002      	beq.n	4031dc <_zbar_decode_ean+0x84>
  4031d6:	2d21      	cmp	r5, #33	; 0x21
  4031d8:	f040 80a9 	bne.w	40332e <_zbar_decode_ean+0x1d6>

/* retrieve i-th previous element width */
static inline unsigned get_width (const zbar_decoder_t *dcode,
                                  unsigned char offset)
{
    return(dcode->w[(dcode->idx - offset) & (DECODE_WINDOW - 1)]);
  4031dc:	f003 000f 	and.w	r0, r3, #15
  4031e0:	eb09 0080 	add.w	r0, r9, r0, lsl #2
  4031e4:	6840      	ldr	r0, [r0, #4]
  4031e6:	900b      	str	r0, [sp, #44]	; 0x2c
  4031e8:	1e58      	subs	r0, r3, #1
  4031ea:	f1a3 0e05 	sub.w	lr, r3, #5
static inline unsigned calc_s (const zbar_decoder_t *dcode,
                               unsigned char offset,
                               unsigned char n)
{
    /* FIXME check that this gets unrolled for constant n */
    unsigned s = 0;
  4031ee:	2700      	movs	r7, #0

/* retrieve i-th previous element width */
static inline unsigned get_width (const zbar_decoder_t *dcode,
                                  unsigned char offset)
{
    return(dcode->w[(dcode->idx - offset) & (DECODE_WINDOW - 1)]);
  4031f0:	f000 060f 	and.w	r6, r0, #15
  4031f4:	eb09 0686 	add.w	r6, r9, r6, lsl #2
                               unsigned char n)
{
    /* FIXME check that this gets unrolled for constant n */
    unsigned s = 0;
    while(n--)
        s += get_width(dcode, offset++);
  4031f8:	6876      	ldr	r6, [r6, #4]
  4031fa:	4437      	add	r7, r6
  4031fc:	3801      	subs	r0, #1
                               unsigned char offset,
                               unsigned char n)
{
    /* FIXME check that this gets unrolled for constant n */
    unsigned s = 0;
    while(n--)
  4031fe:	4570      	cmp	r0, lr
  403200:	d1f6      	bne.n	4031f0 <_zbar_decode_ean+0x98>
                unsigned qz = get_width(dcode, 0);
                unsigned s = calc_s(dcode, 1, 4);
                zbar_symbol_type_t part = !qz || (qz >= s * 3 / 4);
  403202:	980b      	ldr	r0, [sp, #44]	; 0x2c
  403204:	b128      	cbz	r0, 403212 <_zbar_decode_ean+0xba>
  403206:	eb07 0747 	add.w	r7, r7, r7, lsl #1
                if(part && idx == 0x09)
  40320a:	ebb0 0f97 	cmp.w	r0, r7, lsr #2
  40320e:	f0c0 8084 	bcc.w	40331a <_zbar_decode_ean+0x1c2>
  403212:	2d09      	cmp	r5, #9
  403214:	d11f      	bne.n	403256 <_zbar_decode_ean+0xfe>
}

static inline char ean_part_end2 (ean_decoder_t *ean,
                                  ean_pass_t *pass)
{
    if(!TEST_CFG(ean->ean2_config, ZBAR_CFG_ENABLE))
  403216:	f8d9 00e8 	ldr.w	r0, [r9, #232]	; 0xe8
  40321a:	f010 0f01 	tst.w	r0, #1
  40321e:	f000 8086 	beq.w	40332e <_zbar_decode_ean+0x1d6>
        return(ZBAR_NONE);

    /* extract parity bits */
    unsigned char par = ((pass->raw[1] & 0x10) >> 3 |
  403222:	f894 6071 	ldrb.w	r6, [r4, #113]	; 0x71
                         (pass->raw[2] & 0x10) >> 4);
  403226:	f894 0072 	ldrb.w	r0, [r4, #114]	; 0x72
  40322a:	f3c0 1e00 	ubfx	lr, r0, #4, #1
{
    if(!TEST_CFG(ean->ean2_config, ZBAR_CFG_ENABLE))
        return(ZBAR_NONE);

    /* extract parity bits */
    unsigned char par = ((pass->raw[1] & 0x10) >> 3 |
  40322e:	f006 0710 	and.w	r7, r6, #16
  403232:	b2ff      	uxtb	r7, r7
                         (pass->raw[2] & 0x10) >> 4);
    /* calculate "checksum" */
    unsigned char chk = ~((pass->raw[1] & 0xf) * 10 +
  403234:	f006 060f 	and.w	r6, r6, #15
  403238:	eb06 0686 	add.w	r6, r6, r6, lsl #2
  40323c:	f000 000f 	and.w	r0, r0, #15
  403240:	eb00 0046 	add.w	r0, r0, r6, lsl #1
  403244:	43c0      	mvns	r0, r0
                          (pass->raw[2] & 0xf)) & 0x3;
    dbprintf(2, " par=%x chk=%x", par, chk);
    if(par != chk)
  403246:	ea4e 07e7 	orr.w	r7, lr, r7, asr #3
  40324a:	f000 0003 	and.w	r0, r0, #3
  40324e:	4287      	cmp	r7, r0
  403250:	d16d      	bne.n	40332e <_zbar_decode_ean+0x1d6>
            if(idx == 0x09 || idx == 0x21) {
                unsigned qz = get_width(dcode, 0);
                unsigned s = calc_s(dcode, 1, 4);
                zbar_symbol_type_t part = !qz || (qz >= s * 3 / 4);
                if(part && idx == 0x09)
                    part = ean_part_end2(&dcode->ean, pass);
  403252:	2002      	movs	r0, #2
  403254:	e064      	b.n	403320 <_zbar_decode_ean+0x1c8>
}

static inline char ean_part_end5 (ean_decoder_t *ean,
                                  ean_pass_t *pass)
{
    if(!TEST_CFG(ean->ean5_config, ZBAR_CFG_ENABLE))
  403256:	f8d9 00e4 	ldr.w	r0, [r9, #228]	; 0xe4
  40325a:	f010 0f01 	tst.w	r0, #1
  40325e:	d059      	beq.n	403314 <_zbar_decode_ean+0x1bc>
        return(ZBAR_NONE);

    /* extract parity bits */
    unsigned char par = ((pass->raw[1] & 0x10) |
  403260:	f894 e071 	ldrb.w	lr, [r4, #113]	; 0x71
                         (pass->raw[2] & 0x10) >> 1 |
  403264:	f894 0072 	ldrb.w	r0, [r4, #114]	; 0x72
  403268:	4607      	mov	r7, r0
                         (pass->raw[3] & 0x10) >> 2 |
  40326a:	f894 6073 	ldrb.w	r6, [r4, #115]	; 0x73
  40326e:	960b      	str	r6, [sp, #44]	; 0x2c
                         (pass->raw[4] & 0x10) >> 3 |
  403270:	f894 6074 	ldrb.w	r6, [r4, #116]	; 0x74
  403274:	4630      	mov	r0, r6
                         (pass->raw[5] & 0x10) >> 4);
  403276:	f894 6075 	ldrb.w	r6, [r4, #117]	; 0x75
  40327a:	960c      	str	r6, [sp, #48]	; 0x30
    if(!TEST_CFG(ean->ean5_config, ZBAR_CFG_ENABLE))
        return(ZBAR_NONE);

    /* extract parity bits */
    unsigned char par = ((pass->raw[1] & 0x10) |
                         (pass->raw[2] & 0x10) >> 1 |
  40327c:	970d      	str	r7, [sp, #52]	; 0x34
  40327e:	f007 0610 	and.w	r6, r7, #16
  403282:	b2f6      	uxtb	r6, r6
  403284:	4637      	mov	r7, r6
                         (pass->raw[3] & 0x10) >> 2 |
  403286:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
  403288:	f006 0610 	and.w	r6, r6, #16
  40328c:	b2f6      	uxtb	r6, r6
  40328e:	10b6      	asrs	r6, r6, #2
  403290:	ea46 0667 	orr.w	r6, r6, r7, asr #1
{
    if(!TEST_CFG(ean->ean5_config, ZBAR_CFG_ENABLE))
        return(ZBAR_NONE);

    /* extract parity bits */
    unsigned char par = ((pass->raw[1] & 0x10) |
  403294:	f00e 0710 	and.w	r7, lr, #16
  403298:	433e      	orrs	r6, r7
                         (pass->raw[2] & 0x10) >> 1 |
                         (pass->raw[3] & 0x10) >> 2 |
                         (pass->raw[4] & 0x10) >> 3 |
  40329a:	900e      	str	r0, [sp, #56]	; 0x38
  40329c:	f000 0710 	and.w	r7, r0, #16
  4032a0:	b2ff      	uxtb	r7, r7
{
    if(!TEST_CFG(ean->ean5_config, ZBAR_CFG_ENABLE))
        return(ZBAR_NONE);

    /* extract parity bits */
    unsigned char par = ((pass->raw[1] & 0x10) |
  4032a2:	ea46 06e7 	orr.w	r6, r6, r7, asr #3
                         (pass->raw[2] & 0x10) >> 1 |
                         (pass->raw[3] & 0x10) >> 2 |
                         (pass->raw[4] & 0x10) >> 3 |
                         (pass->raw[5] & 0x10) >> 4);
  4032a6:	980c      	ldr	r0, [sp, #48]	; 0x30
  4032a8:	f3c0 1700 	ubfx	r7, r0, #4, #1
{
    if(!TEST_CFG(ean->ean5_config, ZBAR_CFG_ENABLE))
        return(ZBAR_NONE);

    /* extract parity bits */
    unsigned char par = ((pass->raw[1] & 0x10) |
  4032ac:	433e      	orrs	r6, r7
                         (pass->raw[2] & 0x10) >> 1 |
                         (pass->raw[3] & 0x10) >> 2 |
                         (pass->raw[4] & 0x10) >> 3 |
                         (pass->raw[5] & 0x10) >> 4);
    /* calculate checksum */
    unsigned char chk = (((pass->raw[1] & 0x0f) +
  4032ae:	f00e 0e0f 	and.w	lr, lr, #15
                          (pass->raw[2] & 0x0f) * 3 +
  4032b2:	980d      	ldr	r0, [sp, #52]	; 0x34
  4032b4:	f000 000f 	and.w	r0, r0, #15
  4032b8:	eb00 0040 	add.w	r0, r0, r0, lsl #1
                         (pass->raw[2] & 0x10) >> 1 |
                         (pass->raw[3] & 0x10) >> 2 |
                         (pass->raw[4] & 0x10) >> 3 |
                         (pass->raw[5] & 0x10) >> 4);
    /* calculate checksum */
    unsigned char chk = (((pass->raw[1] & 0x0f) +
  4032bc:	4470      	add	r0, lr
                          (pass->raw[2] & 0x0f) * 3 +
                          (pass->raw[3] & 0x0f) +
  4032be:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
  4032c0:	f007 070f 	and.w	r7, r7, #15
                         (pass->raw[3] & 0x10) >> 2 |
                         (pass->raw[4] & 0x10) >> 3 |
                         (pass->raw[5] & 0x10) >> 4);
    /* calculate checksum */
    unsigned char chk = (((pass->raw[1] & 0x0f) +
                          (pass->raw[2] & 0x0f) * 3 +
  4032c4:	4438      	add	r0, r7
                          (pass->raw[3] & 0x0f) +
                          (pass->raw[4] & 0x0f) * 3 +
  4032c6:	9f0e      	ldr	r7, [sp, #56]	; 0x38
  4032c8:	f007 070f 	and.w	r7, r7, #15
  4032cc:	eb07 0747 	add.w	r7, r7, r7, lsl #1
                         (pass->raw[4] & 0x10) >> 3 |
                         (pass->raw[5] & 0x10) >> 4);
    /* calculate checksum */
    unsigned char chk = (((pass->raw[1] & 0x0f) +
                          (pass->raw[2] & 0x0f) * 3 +
                          (pass->raw[3] & 0x0f) +
  4032d0:	4407      	add	r7, r0
                          (pass->raw[4] & 0x0f) * 3 +
                          (pass->raw[5] & 0x0f)) * 3) % 10;
  4032d2:	980c      	ldr	r0, [sp, #48]	; 0x30
  4032d4:	f000 000f 	and.w	r0, r0, #15
                         (pass->raw[5] & 0x10) >> 4);
    /* calculate checksum */
    unsigned char chk = (((pass->raw[1] & 0x0f) +
                          (pass->raw[2] & 0x0f) * 3 +
                          (pass->raw[3] & 0x0f) +
                          (pass->raw[4] & 0x0f) * 3 +
  4032d8:	4438      	add	r0, r7
                          (pass->raw[5] & 0x0f)) * 3) % 10;
  4032da:	eb00 0040 	add.w	r0, r0, r0, lsl #1
  4032de:	4fc3      	ldr	r7, [pc, #780]	; (4035ec <_zbar_decode_ean+0x494>)
  4032e0:	fb87 7e00 	smull	r7, lr, r7, r0
  4032e4:	17c7      	asrs	r7, r0, #31
  4032e6:	ebc7 07ae 	rsb	r7, r7, lr, asr #2
  4032ea:	eb07 0787 	add.w	r7, r7, r7, lsl #2
  4032ee:	eba0 0047 	sub.w	r0, r0, r7, lsl #1
                         (pass->raw[2] & 0x10) >> 1 |
                         (pass->raw[3] & 0x10) >> 2 |
                         (pass->raw[4] & 0x10) >> 3 |
                         (pass->raw[5] & 0x10) >> 4);
    /* calculate checksum */
    unsigned char chk = (((pass->raw[1] & 0x0f) +
  4032f2:	b2c0      	uxtb	r0, r0
                          (pass->raw[2] & 0x0f) * 3 +
                          (pass->raw[3] & 0x0f) +
                          (pass->raw[4] & 0x0f) * 3 +
                          (pass->raw[5] & 0x0f)) * 3) % 10;

    unsigned char parchk = parity_decode[par >> 1];
  4032f4:	0877      	lsrs	r7, r6, #1
  4032f6:	f8df e2f8 	ldr.w	lr, [pc, #760]	; 4035f0 <_zbar_decode_ean+0x498>
  4032fa:	f81e 7007 	ldrb.w	r7, [lr, r7]
    if(par & 1)
  4032fe:	f016 0f01 	tst.w	r6, #1
        parchk >>= 4;
  403302:	bf18      	it	ne
  403304:	093f      	lsrne	r7, r7, #4
    parchk &= 0xf;
    dbprintf(2, " par=%x(%d) chk=%d", par, parchk, chk);
    if(parchk != chk)
  403306:	f007 070f 	and.w	r7, r7, #15
    dbprintf(1, "decode5=%x%x%x%x%x\n",
             pass->raw[1] & 0xf, pass->raw[2] & 0xf,
             pass->raw[3] & 0xf, pass->raw[4] & 0xf,
             pass->raw[5] & 0xf);

    return(ZBAR_EAN5);
  40330a:	42b8      	cmp	r0, r7
  40330c:	bf14      	ite	ne
  40330e:	4660      	movne	r0, ip
  403310:	2005      	moveq	r0, #5
  403312:	e000      	b.n	403316 <_zbar_decode_ean+0x1be>

static inline char ean_part_end5 (ean_decoder_t *ean,
                                  ean_pass_t *pass)
{
    if(!TEST_CFG(ean->ean5_config, ZBAR_CFG_ENABLE))
        return(ZBAR_NONE);
  403314:	4660      	mov	r0, ip
                unsigned s = calc_s(dcode, 1, 4);
                zbar_symbol_type_t part = !qz || (qz >= s * 3 / 4);
                if(part && idx == 0x09)
                    part = ean_part_end2(&dcode->ean, pass);
                else if(part)
                    part = ean_part_end5(&dcode->ean, pass);
  403316:	b280      	uxth	r0, r0

                if(part || idx == 0x21) {
  403318:	b910      	cbnz	r0, 403320 <_zbar_decode_ean+0x1c8>
  40331a:	2d21      	cmp	r5, #33	; 0x21
  40331c:	d107      	bne.n	40332e <_zbar_decode_ean+0x1d6>
  40331e:	2000      	movs	r0, #0
                    dcode->ean.direction = 0;
  403320:	2300      	movs	r3, #0
  403322:	f8c9 30ac 	str.w	r3, [r9, #172]	; 0xac
                    pass->state = -1;
  403326:	23ff      	movs	r3, #255	; 0xff
  403328:	f884 3068 	strb.w	r3, [r4, #104]	; 0x68
  40332c:	e366      	b.n	4039fc <_zbar_decode_ean+0x8a4>
                    return(part);
                }
            }
            if((idx & 7) == 1) {
  40332e:	f001 0107 	and.w	r1, r1, #7
  403332:	2901      	cmp	r1, #1
  403334:	f040 81d4 	bne.w	4036e0 <_zbar_decode_ean+0x588>
                dbprintf(2, " +");
                pass->state += 2;
  403338:	3203      	adds	r2, #3
  40333a:	f884 2068 	strb.w	r2, [r4, #104]	; 0x68
                idx += 2;
  40333e:	3502      	adds	r5, #2
  403340:	b2ed      	uxtb	r5, r5
  403342:	e1cd      	b.n	4036e0 <_zbar_decode_ean+0x588>
                                              ean_pass_t *pass)
{
    unsigned char idx, fwd;
    pass->state++;
    idx = pass->state & STATE_IDX;
    fwd = pass->state & 1;
  403344:	f001 0e01 	and.w	lr, r1, #1
                dbprintf(2, " +");
                pass->state += 2;
                idx += 2;
            }
        }
        else if((idx == 0x10 || idx == 0x11) &&
  403348:	f1a5 0210 	sub.w	r2, r5, #16
  40334c:	b2d2      	uxtb	r2, r2
  40334e:	2a01      	cmp	r2, #1
  403350:	f200 80b7 	bhi.w	4034c2 <_zbar_decode_ean+0x36a>
                TEST_CFG(dcode->ean.ean8_config, ZBAR_CFG_ENABLE) &&
  403354:	f8d9 20d0 	ldr.w	r2, [r9, #208]	; 0xd0
                dbprintf(2, " +");
                pass->state += 2;
                idx += 2;
            }
        }
        else if((idx == 0x10 || idx == 0x11) &&
  403358:	f012 0f01 	tst.w	r2, #1
  40335c:	f000 80b1 	beq.w	4034c2 <_zbar_decode_ean+0x36a>
                                   unsigned char fwd)
{
    signed char code, i;

    /* reference width from previous character */
    unsigned s = calc_s(dcode, 4 + fwd, 4);
  403360:	f10e 0204 	add.w	r2, lr, #4
  403364:	b2d2      	uxtb	r2, r2
  403366:	f10e 0008 	add.w	r0, lr, #8
  40336a:	b2c0      	uxtb	r0, r0
static inline unsigned calc_s (const zbar_decoder_t *dcode,
                               unsigned char offset,
                               unsigned char n)
{
    /* FIXME check that this gets unrolled for constant n */
    unsigned s = 0;
  40336c:	2100      	movs	r1, #0

/* retrieve i-th previous element width */
static inline unsigned get_width (const zbar_decoder_t *dcode,
                                  unsigned char offset)
{
    return(dcode->w[(dcode->idx - offset) & (DECODE_WINDOW - 1)]);
  40336e:	940b      	str	r4, [sp, #44]	; 0x2c
  403370:	461c      	mov	r4, r3
  403372:	460f      	mov	r7, r1
                               unsigned char n)
{
    /* FIXME check that this gets unrolled for constant n */
    unsigned s = 0;
    while(n--)
        s += get_width(dcode, offset++);
  403374:	1c51      	adds	r1, r2, #1
  403376:	b2c9      	uxtb	r1, r1

/* retrieve i-th previous element width */
static inline unsigned get_width (const zbar_decoder_t *dcode,
                                  unsigned char offset)
{
    return(dcode->w[(dcode->idx - offset) & (DECODE_WINDOW - 1)]);
  403378:	940c      	str	r4, [sp, #48]	; 0x30
  40337a:	1a9a      	subs	r2, r3, r2
  40337c:	f002 020f 	and.w	r2, r2, #15
  403380:	eb09 0282 	add.w	r2, r9, r2, lsl #2
                               unsigned char n)
{
    /* FIXME check that this gets unrolled for constant n */
    unsigned s = 0;
    while(n--)
        s += get_width(dcode, offset++);
  403384:	6852      	ldr	r2, [r2, #4]
  403386:	4417      	add	r7, r2
  403388:	460a      	mov	r2, r1
                               unsigned char offset,
                               unsigned char n)
{
    /* FIXME check that this gets unrolled for constant n */
    unsigned s = 0;
    while(n--)
  40338a:	4281      	cmp	r1, r0
  40338c:	d1f2      	bne.n	403374 <_zbar_decode_ean+0x21c>
  40338e:	970d      	str	r7, [sp, #52]	; 0x34
  403390:	9c0b      	ldr	r4, [sp, #44]	; 0x2c

/* retrieve i-th previous element width */
static inline unsigned get_width (const zbar_decoder_t *dcode,
                                  unsigned char offset)
{
    return(dcode->w[(dcode->idx - offset) & (DECODE_WINDOW - 1)]);
  403392:	f003 020f 	and.w	r2, r3, #15
  403396:	eb09 0282 	add.w	r2, r9, r2, lsl #2
  40339a:	6852      	ldr	r2, [r2, #4]

    /* check quiet zone */
    unsigned qz = get_width(dcode, 0);
    if(!fwd && qz && qz <= s * 3 / 4) {
  40339c:	f1be 0f00 	cmp.w	lr, #0
  4033a0:	d10a      	bne.n	4033b8 <_zbar_decode_ean+0x260>
  4033a2:	b19a      	cbz	r2, 4033cc <_zbar_decode_ean+0x274>
  4033a4:	eb07 0147 	add.w	r1, r7, r7, lsl #1
  4033a8:	ebb2 0f91 	cmp.w	r2, r1, lsr #2
  4033ac:	f240 8089 	bls.w	4034c2 <_zbar_decode_ean+0x36a>
        return(-1);
    }

    dbprintf(2, " (");
    code = 0;
    for(i = 1 - fwd; i < 3 + fwd; i++) {
  4033b0:	2203      	movs	r2, #3
  4033b2:	920e      	str	r2, [sp, #56]	; 0x38
  4033b4:	2001      	movs	r0, #1
  4033b6:	e00c      	b.n	4033d2 <_zbar_decode_ean+0x27a>
  4033b8:	f08e 0001 	eor.w	r0, lr, #1
  4033bc:	f10e 0203 	add.w	r2, lr, #3
  4033c0:	4611      	mov	r1, r2
  4033c2:	920e      	str	r2, [sp, #56]	; 0x38
  4033c4:	b242      	sxtb	r2, r0
  4033c6:	428a      	cmp	r2, r1
  4033c8:	db03      	blt.n	4033d2 <_zbar_decode_ean+0x27a>
  4033ca:	e034      	b.n	403436 <_zbar_decode_ean+0x2de>
  4033cc:	2203      	movs	r2, #3
  4033ce:	920e      	str	r2, [sp, #56]	; 0x38
  4033d0:	2001      	movs	r0, #1
  4033d2:	2700      	movs	r7, #0
  4033d4:	960f      	str	r6, [sp, #60]	; 0x3c
  4033d6:	930b      	str	r3, [sp, #44]	; 0x2c
  4033d8:	4601      	mov	r1, r0
  4033da:	9e0c      	ldr	r6, [sp, #48]	; 0x30
  4033dc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  4033de:	940c      	str	r4, [sp, #48]	; 0x30
  4033e0:	9c0e      	ldr	r4, [sp, #56]	; 0x38
        unsigned e = get_width(dcode, i) + get_width(dcode, i + 1);
  4033e2:	b2ca      	uxtb	r2, r1
  4033e4:	1c51      	adds	r1, r2, #1
  4033e6:	b2c9      	uxtb	r1, r1
  4033e8:	1a70      	subs	r0, r6, r1
  4033ea:	f000 000f 	and.w	r0, r0, #15
  4033ee:	eb09 0080 	add.w	r0, r9, r0, lsl #2
  4033f2:	1ab2      	subs	r2, r6, r2
  4033f4:	f002 020f 	and.w	r2, r2, #15
  4033f8:	eb09 0282 	add.w	r2, r9, r2, lsl #2
  4033fc:	6840      	ldr	r0, [r0, #4]
  4033fe:	6852      	ldr	r2, [r2, #4]
  403400:	4402      	add	r2, r0
{
    /* result is encoded number of units - 2
     * (for use as zero based index)
     * or -1 if invalid
     */
    unsigned char E = ((e * n * 2 + 1) / s - 3) / 2;
  403402:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
  403406:	0052      	lsls	r2, r2, #1
  403408:	3201      	adds	r2, #1
  40340a:	fbb2 f2f3 	udiv	r2, r2, r3
  40340e:	3a03      	subs	r2, #3
    return((E >= n - 3) ? -1 : E);
  403410:	f3c2 0247 	ubfx	r2, r2, #1, #8
  403414:	2a03      	cmp	r2, #3
  403416:	d84f      	bhi.n	4034b8 <_zbar_decode_ean+0x360>
        dbprintf(2, " %d", e);
        code = (code << 2) | decode_e(e, s, 7);
  403418:	00bf      	lsls	r7, r7, #2
  40341a:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
  40341e:	4317      	orrs	r7, r2
        if(code < 0) {
  403420:	f017 0f80 	tst.w	r7, #128	; 0x80
  403424:	d14b      	bne.n	4034be <_zbar_decode_ean+0x366>
  403426:	b2c9      	uxtb	r1, r1
        return(-1);
    }

    dbprintf(2, " (");
    code = 0;
    for(i = 1 - fwd; i < 3 + fwd; i++) {
  403428:	b24a      	sxtb	r2, r1
  40342a:	42a2      	cmp	r2, r4
  40342c:	dbd9      	blt.n	4033e2 <_zbar_decode_ean+0x28a>
  40342e:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
  403430:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  403432:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  403434:	e000      	b.n	403438 <_zbar_decode_ean+0x2e0>
        dbprintf(2, " [invalid quiet]");
        return(-1);
    }

    dbprintf(2, " (");
    code = 0;
  403436:	2700      	movs	r7, #0
                pass->state += 2;
                idx += 2;
            }
        }
        else if((idx == 0x10 || idx == 0x11) &&
                TEST_CFG(dcode->ean.ean8_config, ZBAR_CFG_ENABLE) &&
  403438:	2f00      	cmp	r7, #0
  40343a:	d142      	bne.n	4034c2 <_zbar_decode_ean+0x36a>

static inline zbar_symbol_type_t ean_part_end4 (ean_pass_t *pass,
                                                unsigned char fwd)
{
    /* extract parity bits */
    unsigned char par = ((pass->raw[1] & 0x10) >> 1 |
  40343c:	f894 5071 	ldrb.w	r5, [r4, #113]	; 0x71
                         (pass->raw[2] & 0x10) >> 2 |
  403440:	f894 1072 	ldrb.w	r1, [r4, #114]	; 0x72
                         (pass->raw[3] & 0x10) >> 3 |
  403444:	f894 0073 	ldrb.w	r0, [r4, #115]	; 0x73
                         (pass->raw[4] & 0x10) >> 4);
  403448:	f894 7074 	ldrb.w	r7, [r4, #116]	; 0x74
static inline zbar_symbol_type_t ean_part_end4 (ean_pass_t *pass,
                                                unsigned char fwd)
{
    /* extract parity bits */
    unsigned char par = ((pass->raw[1] & 0x10) >> 1 |
                         (pass->raw[2] & 0x10) >> 2 |
  40344c:	f001 0310 	and.w	r3, r1, #16
  403450:	b2da      	uxtb	r2, r3

static inline zbar_symbol_type_t ean_part_end4 (ean_pass_t *pass,
                                                unsigned char fwd)
{
    /* extract parity bits */
    unsigned char par = ((pass->raw[1] & 0x10) >> 1 |
  403452:	f005 0310 	and.w	r3, r5, #16
  403456:	b2db      	uxtb	r3, r3
  403458:	105b      	asrs	r3, r3, #1
  40345a:	ea43 03a2 	orr.w	r3, r3, r2, asr #2
                         (pass->raw[2] & 0x10) >> 2 |
                         (pass->raw[3] & 0x10) >> 3 |
  40345e:	f000 0210 	and.w	r2, r0, #16
  403462:	b2d2      	uxtb	r2, r2

static inline zbar_symbol_type_t ean_part_end4 (ean_pass_t *pass,
                                                unsigned char fwd)
{
    /* extract parity bits */
    unsigned char par = ((pass->raw[1] & 0x10) >> 1 |
  403464:	ea43 03e2 	orr.w	r3, r3, r2, asr #3
                         (pass->raw[2] & 0x10) >> 2 |
                         (pass->raw[3] & 0x10) >> 3 |
                         (pass->raw[4] & 0x10) >> 4);
  403468:	f3c7 1200 	ubfx	r2, r7, #4, #1

    dbprintf(2, " par=%x", par);
    if(par && par != 0xf)
  40346c:	4313      	orrs	r3, r2
  40346e:	d001      	beq.n	403474 <_zbar_decode_ean+0x31c>
  403470:	2b0f      	cmp	r3, #15
  403472:	d11c      	bne.n	4034ae <_zbar_decode_ean+0x356>
        /* invalid parity combination */
        return(ZBAR_NONE);

    if(!par == fwd) {
  403474:	fab3 f383 	clz	r3, r3
  403478:	095b      	lsrs	r3, r3, #5
  40347a:	4573      	cmp	r3, lr
  40347c:	d10b      	bne.n	403496 <_zbar_decode_ean+0x33e>
        /* reverse sampled digits */
        unsigned char tmp = pass->raw[1];
        pass->state |= STATE_REV;
  40347e:	f066 067f 	orn	r6, r6, #127	; 0x7f
  403482:	f884 6068 	strb.w	r6, [r4, #104]	; 0x68
        pass->raw[1] = pass->raw[4];
  403486:	f884 7071 	strb.w	r7, [r4, #113]	; 0x71
        pass->raw[4] = tmp;
  40348a:	f884 5074 	strb.w	r5, [r4, #116]	; 0x74
        tmp = pass->raw[2];
        pass->raw[2] = pass->raw[3];
  40348e:	f884 0072 	strb.w	r0, [r4, #114]	; 0x72
        pass->raw[3] = tmp;
  403492:	f884 1073 	strb.w	r1, [r4, #115]	; 0x73
    dbprintf(1, "decode4=%x%x%x%x\n",
             pass->raw[1] & 0xf, pass->raw[2] & 0xf,
             pass->raw[3] & 0xf, pass->raw[4] & 0xf);
    if(!par)
        return(ZBAR_EAN8 | EAN_RIGHT);
    return(ZBAR_EAN8 | EAN_LEFT);
  403496:	2b00      	cmp	r3, #0
                TEST_CFG(dcode->ean.ean8_config, ZBAR_CFG_ENABLE) &&
                !aux_end(dcode, fwd)) {
            dbprintf(2, " fwd=%x", fwd);
            zbar_symbol_type_t part = ean_part_end4(pass, fwd);
            if(part)
                dcode->ean.direction = (pass->state & STATE_REV) != 0;
  403498:	f994 3068 	ldrsb.w	r3, [r4, #104]	; 0x68
  40349c:	ea4f 73d3 	mov.w	r3, r3, lsr #31
  4034a0:	f8c9 30ac 	str.w	r3, [r9, #172]	; 0xac
  4034a4:	f241 0008 	movw	r0, #4104	; 0x1008
  4034a8:	bf08      	it	eq
  4034aa:	2008      	moveq	r0, #8
  4034ac:	e000      	b.n	4034b0 <_zbar_decode_ean+0x358>
                         (pass->raw[4] & 0x10) >> 4);

    dbprintf(2, " par=%x", par);
    if(par && par != 0xf)
        /* invalid parity combination */
        return(ZBAR_NONE);
  4034ae:	2000      	movs	r0, #0
                !aux_end(dcode, fwd)) {
            dbprintf(2, " fwd=%x", fwd);
            zbar_symbol_type_t part = ean_part_end4(pass, fwd);
            if(part)
                dcode->ean.direction = (pass->state & STATE_REV) != 0;
            pass->state = -1;
  4034b0:	23ff      	movs	r3, #255	; 0xff
  4034b2:	f884 3068 	strb.w	r3, [r4, #104]	; 0x68
  4034b6:	e2a1      	b.n	4039fc <_zbar_decode_ean+0x8a4>
  4034b8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  4034ba:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  4034bc:	e001      	b.n	4034c2 <_zbar_decode_ean+0x36a>
  4034be:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  4034c0:	9c0c      	ldr	r4, [sp, #48]	; 0x30
            return(part);
        }
	else if((idx == 0x18 || idx == 0x19)) {
  4034c2:	f1a5 0218 	sub.w	r2, r5, #24
  4034c6:	b2d2      	uxtb	r2, r2
  4034c8:	2a01      	cmp	r2, #1
  4034ca:	f200 8109 	bhi.w	4036e0 <_zbar_decode_ean+0x588>
                                   unsigned char fwd)
{
    signed char code, i;

    /* reference width from previous character */
    unsigned s = calc_s(dcode, 4 + fwd, 4);
  4034ce:	f10e 0204 	add.w	r2, lr, #4
  4034d2:	b2d2      	uxtb	r2, r2
  4034d4:	f10e 0008 	add.w	r0, lr, #8
  4034d8:	b2c0      	uxtb	r0, r0
static inline unsigned calc_s (const zbar_decoder_t *dcode,
                               unsigned char offset,
                               unsigned char n)
{
    /* FIXME check that this gets unrolled for constant n */
    unsigned s = 0;
  4034da:	2600      	movs	r6, #0

/* retrieve i-th previous element width */
static inline unsigned get_width (const zbar_decoder_t *dcode,
                                  unsigned char offset)
{
    return(dcode->w[(dcode->idx - offset) & (DECODE_WINDOW - 1)]);
  4034dc:	461f      	mov	r7, r3
                               unsigned char n)
{
    /* FIXME check that this gets unrolled for constant n */
    unsigned s = 0;
    while(n--)
        s += get_width(dcode, offset++);
  4034de:	1c51      	adds	r1, r2, #1
  4034e0:	b2c9      	uxtb	r1, r1

/* retrieve i-th previous element width */
static inline unsigned get_width (const zbar_decoder_t *dcode,
                                  unsigned char offset)
{
    return(dcode->w[(dcode->idx - offset) & (DECODE_WINDOW - 1)]);
  4034e2:	463d      	mov	r5, r7
  4034e4:	1a9a      	subs	r2, r3, r2
  4034e6:	f002 020f 	and.w	r2, r2, #15
  4034ea:	eb09 0282 	add.w	r2, r9, r2, lsl #2
                               unsigned char n)
{
    /* FIXME check that this gets unrolled for constant n */
    unsigned s = 0;
    while(n--)
        s += get_width(dcode, offset++);
  4034ee:	6852      	ldr	r2, [r2, #4]
  4034f0:	4416      	add	r6, r2
  4034f2:	460a      	mov	r2, r1
                               unsigned char offset,
                               unsigned char n)
{
    /* FIXME check that this gets unrolled for constant n */
    unsigned s = 0;
    while(n--)
  4034f4:	4281      	cmp	r1, r0
  4034f6:	d1f2      	bne.n	4034de <_zbar_decode_ean+0x386>

/* retrieve i-th previous element width */
static inline unsigned get_width (const zbar_decoder_t *dcode,
                                  unsigned char offset)
{
    return(dcode->w[(dcode->idx - offset) & (DECODE_WINDOW - 1)]);
  4034f8:	f003 030f 	and.w	r3, r3, #15
  4034fc:	eb09 0383 	add.w	r3, r9, r3, lsl #2
  403500:	685b      	ldr	r3, [r3, #4]

    /* check quiet zone */
    unsigned qz = get_width(dcode, 0);
    if(!fwd && qz && qz <= s * 3 / 4) {
  403502:	f1be 0f00 	cmp.w	lr, #0
  403506:	d109      	bne.n	40351c <_zbar_decode_ean+0x3c4>
  403508:	b183      	cbz	r3, 40352c <_zbar_decode_ean+0x3d4>
  40350a:	eb06 0246 	add.w	r2, r6, r6, lsl #1
  40350e:	ebb3 0f92 	cmp.w	r3, r2, lsr #2
  403512:	f240 80de 	bls.w	4036d2 <_zbar_decode_ean+0x57a>
        return(-1);
    }

    dbprintf(2, " (");
    code = 0;
    for(i = 1 - fwd; i < 3 + fwd; i++) {
  403516:	2703      	movs	r7, #3
  403518:	2101      	movs	r1, #1
  40351a:	e009      	b.n	403530 <_zbar_decode_ean+0x3d8>
  40351c:	f08e 0101 	eor.w	r1, lr, #1
  403520:	f10e 0703 	add.w	r7, lr, #3
  403524:	b24b      	sxtb	r3, r1
  403526:	42bb      	cmp	r3, r7
  403528:	db02      	blt.n	403530 <_zbar_decode_ean+0x3d8>
  40352a:	e02e      	b.n	40358a <_zbar_decode_ean+0x432>
  40352c:	2703      	movs	r7, #3
  40352e:	2101      	movs	r1, #1
  403530:	2000      	movs	r0, #0
  403532:	460a      	mov	r2, r1
        unsigned e = get_width(dcode, i) + get_width(dcode, i + 1);
  403534:	b2d3      	uxtb	r3, r2
  403536:	1c5a      	adds	r2, r3, #1
  403538:	b2d2      	uxtb	r2, r2
  40353a:	ebc2 0c05 	rsb	ip, r2, r5
  40353e:	f00c 0c0f 	and.w	ip, ip, #15
  403542:	eb09 0c8c 	add.w	ip, r9, ip, lsl #2
  403546:	1ae9      	subs	r1, r5, r3
  403548:	f001 010f 	and.w	r1, r1, #15
  40354c:	eb09 0181 	add.w	r1, r9, r1, lsl #2
  403550:	f8dc c004 	ldr.w	ip, [ip, #4]
  403554:	684b      	ldr	r3, [r1, #4]
  403556:	4463      	add	r3, ip
{
    /* result is encoded number of units - 2
     * (for use as zero based index)
     * or -1 if invalid
     */
    unsigned char E = ((e * n * 2 + 1) / s - 3) / 2;
  403558:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
  40355c:	005b      	lsls	r3, r3, #1
  40355e:	3301      	adds	r3, #1
  403560:	fbb3 f3f6 	udiv	r3, r3, r6
  403564:	3b03      	subs	r3, #3
    return((E >= n - 3) ? -1 : E);
  403566:	f3c3 0347 	ubfx	r3, r3, #1, #8
  40356a:	2b03      	cmp	r3, #3
  40356c:	f200 85f7 	bhi.w	40415e <_zbar_decode_ean+0x1006>
        dbprintf(2, " %d", e);
        code = (code << 2) | decode_e(e, s, 7);
  403570:	0080      	lsls	r0, r0, #2
  403572:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
  403576:	4318      	orrs	r0, r3
        if(code < 0) {
  403578:	f010 0f80 	tst.w	r0, #128	; 0x80
  40357c:	f040 80ab 	bne.w	4036d6 <_zbar_decode_ean+0x57e>
  403580:	b2d2      	uxtb	r2, r2
        return(-1);
    }

    dbprintf(2, " (");
    code = 0;
    for(i = 1 - fwd; i < 3 + fwd; i++) {
  403582:	b253      	sxtb	r3, r2
  403584:	42bb      	cmp	r3, r7
  403586:	dbd5      	blt.n	403534 <_zbar_decode_ean+0x3dc>
  403588:	e000      	b.n	40358c <_zbar_decode_ean+0x434>
        dbprintf(2, " [invalid quiet]");
        return(-1);
    }

    dbprintf(2, " (");
    code = 0;
  40358a:	2000      	movs	r0, #0
            return(part);
        }
	else if((idx == 0x18 || idx == 0x19)) {
	  zbar_symbol_type_t part = ZBAR_NONE;
	  dbprintf(2, " fwd=%x", fwd);
	  if(!aux_end(dcode, fwd) && pass->raw[5] != 0xff)
  40358c:	2800      	cmp	r0, #0
  40358e:	f040 85e6 	bne.w	40415e <_zbar_decode_ean+0x1006>
  403592:	f894 3075 	ldrb.w	r3, [r4, #117]	; 0x75
  403596:	2bff      	cmp	r3, #255	; 0xff
  403598:	f000 85e1 	beq.w	40415e <_zbar_decode_ean+0x1006>
static inline zbar_symbol_type_t ean_part_end7 (ean_decoder_t *ean,
                                                ean_pass_t *pass,
                                                unsigned char fwd)
{
    /* calculate parity index */
    unsigned char par = ((fwd)
  40359c:	f1be 0f00 	cmp.w	lr, #0
  4035a0:	d028      	beq.n	4035f4 <_zbar_decode_ean+0x49c>
                         ? ((pass->raw[1] & 0x10) << 1 |
  4035a2:	f894 1071 	ldrb.w	r1, [r4, #113]	; 0x71
  4035a6:	f001 0110 	and.w	r1, r1, #16
  4035aa:	b2c9      	uxtb	r1, r1
                            (pass->raw[2] & 0x10) |
                            (pass->raw[3] & 0x10) >> 1 |
  4035ac:	f894 2073 	ldrb.w	r2, [r4, #115]	; 0x73
  4035b0:	f002 0210 	and.w	r2, r2, #16
  4035b4:	b2d2      	uxtb	r2, r2
  4035b6:	1052      	asrs	r2, r2, #1
  4035b8:	ea42 0141 	orr.w	r1, r2, r1, lsl #1
static inline zbar_symbol_type_t ean_part_end7 (ean_decoder_t *ean,
                                                ean_pass_t *pass,
                                                unsigned char fwd)
{
    /* calculate parity index */
    unsigned char par = ((fwd)
  4035bc:	f894 2072 	ldrb.w	r2, [r4, #114]	; 0x72
  4035c0:	f002 0210 	and.w	r2, r2, #16
  4035c4:	430a      	orrs	r2, r1
                         ? ((pass->raw[1] & 0x10) << 1 |
                            (pass->raw[2] & 0x10) |
                            (pass->raw[3] & 0x10) >> 1 |
                            (pass->raw[4] & 0x10) >> 2 |
  4035c6:	f894 1074 	ldrb.w	r1, [r4, #116]	; 0x74
  4035ca:	f001 0110 	and.w	r1, r1, #16
  4035ce:	b2c9      	uxtb	r1, r1
static inline zbar_symbol_type_t ean_part_end7 (ean_decoder_t *ean,
                                                ean_pass_t *pass,
                                                unsigned char fwd)
{
    /* calculate parity index */
    unsigned char par = ((fwd)
  4035d0:	ea42 02a1 	orr.w	r2, r2, r1, asr #2
                         ? ((pass->raw[1] & 0x10) << 1 |
                            (pass->raw[2] & 0x10) |
                            (pass->raw[3] & 0x10) >> 1 |
                            (pass->raw[4] & 0x10) >> 2 |
                            (pass->raw[5] & 0x10) >> 3 |
  4035d4:	f003 0310 	and.w	r3, r3, #16
  4035d8:	b2db      	uxtb	r3, r3
static inline zbar_symbol_type_t ean_part_end7 (ean_decoder_t *ean,
                                                ean_pass_t *pass,
                                                unsigned char fwd)
{
    /* calculate parity index */
    unsigned char par = ((fwd)
  4035da:	ea42 03e3 	orr.w	r3, r2, r3, asr #3
                         ? ((pass->raw[1] & 0x10) << 1 |
                            (pass->raw[2] & 0x10) |
                            (pass->raw[3] & 0x10) >> 1 |
                            (pass->raw[4] & 0x10) >> 2 |
                            (pass->raw[5] & 0x10) >> 3 |
                            (pass->raw[6] & 0x10) >> 4)
  4035de:	f894 2076 	ldrb.w	r2, [r4, #118]	; 0x76
  4035e2:	f3c2 1200 	ubfx	r2, r2, #4, #1
static inline zbar_symbol_type_t ean_part_end7 (ean_decoder_t *ean,
                                                ean_pass_t *pass,
                                                unsigned char fwd)
{
    /* calculate parity index */
    unsigned char par = ((fwd)
  4035e6:	4313      	orrs	r3, r2
  4035e8:	e027      	b.n	40363a <_zbar_decode_ean+0x4e2>
  4035ea:	bf00      	nop
  4035ec:	66666667 	.word	0x66666667
  4035f0:	0040f500 	.word	0x0040f500
                            (pass->raw[2] & 0x10) |
                            (pass->raw[3] & 0x10) >> 1 |
                            (pass->raw[4] & 0x10) >> 2 |
                            (pass->raw[5] & 0x10) >> 3 |
                            (pass->raw[6] & 0x10) >> 4)
                         : ((pass->raw[1] & 0x10) >> 4 |
  4035f4:	f894 2071 	ldrb.w	r2, [r4, #113]	; 0x71
  4035f8:	f3c2 1200 	ubfx	r2, r2, #4, #1
                            (pass->raw[2] & 0x10) >> 3 |
  4035fc:	f894 1072 	ldrb.w	r1, [r4, #114]	; 0x72
  403600:	f001 0110 	and.w	r1, r1, #16
  403604:	b2c9      	uxtb	r1, r1
static inline zbar_symbol_type_t ean_part_end7 (ean_decoder_t *ean,
                                                ean_pass_t *pass,
                                                unsigned char fwd)
{
    /* calculate parity index */
    unsigned char par = ((fwd)
  403606:	ea42 02e1 	orr.w	r2, r2, r1, asr #3
  40360a:	f003 0310 	and.w	r3, r3, #16
  40360e:	4313      	orrs	r3, r2
                            (pass->raw[4] & 0x10) >> 2 |
                            (pass->raw[5] & 0x10) >> 3 |
                            (pass->raw[6] & 0x10) >> 4)
                         : ((pass->raw[1] & 0x10) >> 4 |
                            (pass->raw[2] & 0x10) >> 3 |
                            (pass->raw[3] & 0x10) >> 2 |
  403610:	f894 2073 	ldrb.w	r2, [r4, #115]	; 0x73
  403614:	f002 0210 	and.w	r2, r2, #16
  403618:	b2d2      	uxtb	r2, r2
  40361a:	ea43 03a2 	orr.w	r3, r3, r2, asr #2
                            (pass->raw[4] & 0x10) >> 1 |
  40361e:	f894 2074 	ldrb.w	r2, [r4, #116]	; 0x74
  403622:	f002 0210 	and.w	r2, r2, #16
  403626:	b2d2      	uxtb	r2, r2
static inline zbar_symbol_type_t ean_part_end7 (ean_decoder_t *ean,
                                                ean_pass_t *pass,
                                                unsigned char fwd)
{
    /* calculate parity index */
    unsigned char par = ((fwd)
  403628:	ea43 0362 	orr.w	r3, r3, r2, asr #1
                         : ((pass->raw[1] & 0x10) >> 4 |
                            (pass->raw[2] & 0x10) >> 3 |
                            (pass->raw[3] & 0x10) >> 2 |
                            (pass->raw[4] & 0x10) >> 1 |
                            (pass->raw[5] & 0x10) |
                            (pass->raw[6] & 0x10) << 1));
  40362c:	f894 2076 	ldrb.w	r2, [r4, #118]	; 0x76
  403630:	f002 0210 	and.w	r2, r2, #16
  403634:	b2d2      	uxtb	r2, r2
static inline zbar_symbol_type_t ean_part_end7 (ean_decoder_t *ean,
                                                ean_pass_t *pass,
                                                unsigned char fwd)
{
    /* calculate parity index */
    unsigned char par = ((fwd)
  403636:	ea43 0342 	orr.w	r3, r3, r2, lsl #1
                            (pass->raw[4] & 0x10) >> 1 |
                            (pass->raw[5] & 0x10) |
                            (pass->raw[6] & 0x10) << 1));

    /* lookup parity combination */
    pass->raw[0] = parity_decode[par >> 1];
  40363a:	085a      	lsrs	r2, r3, #1
  40363c:	49ca      	ldr	r1, [pc, #808]	; (403968 <_zbar_decode_ean+0x810>)
  40363e:	5c8a      	ldrb	r2, [r1, r2]
    if(par & 1)
  403640:	f013 0f01 	tst.w	r3, #1
        pass->raw[0] >>= 4;
  403644:	bf18      	it	ne
  403646:	0912      	lsrne	r2, r2, #4
  403648:	f884 2070 	strb.w	r2, [r4, #112]	; 0x70
    pass->raw[0] &= 0xf;
  40364c:	f894 2070 	ldrb.w	r2, [r4, #112]	; 0x70
  403650:	f002 020f 	and.w	r2, r2, #15
  403654:	f884 2070 	strb.w	r2, [r4, #112]	; 0x70
    dbprintf(2, " par=%02x(%x)", par, pass->raw[0]);

    if(pass->raw[0] == 0xf)
  403658:	2a0f      	cmp	r2, #15
  40365a:	f000 8580 	beq.w	40415e <_zbar_decode_ean+0x1006>
        /* invalid parity combination */
        return(ZBAR_NONE);

    if(!par == fwd) {
  40365e:	fab3 f283 	clz	r2, r3
  403662:	0952      	lsrs	r2, r2, #5
  403664:	4572      	cmp	r2, lr
  403666:	d11d      	bne.n	4036a4 <_zbar_decode_ean+0x54c>
        unsigned char i;
        pass->state |= STATE_REV;
  403668:	f894 1068 	ldrb.w	r1, [r4, #104]	; 0x68
  40366c:	f061 017f 	orn	r1, r1, #127	; 0x7f
  403670:	f884 1068 	strb.w	r1, [r4, #104]	; 0x68
        /* reverse sampled digits */
        for(i = 1; i < 4; i++) {
            unsigned char tmp = pass->raw[i];
  403674:	f894 1071 	ldrb.w	r1, [r4, #113]	; 0x71
            pass->raw[i] = pass->raw[7 - i];
  403678:	f894 0076 	ldrb.w	r0, [r4, #118]	; 0x76
  40367c:	f884 0071 	strb.w	r0, [r4, #113]	; 0x71
            pass->raw[7 - i] = tmp;
  403680:	f884 1076 	strb.w	r1, [r4, #118]	; 0x76
    if(!par == fwd) {
        unsigned char i;
        pass->state |= STATE_REV;
        /* reverse sampled digits */
        for(i = 1; i < 4; i++) {
            unsigned char tmp = pass->raw[i];
  403684:	f894 1072 	ldrb.w	r1, [r4, #114]	; 0x72
            pass->raw[i] = pass->raw[7 - i];
  403688:	f894 0075 	ldrb.w	r0, [r4, #117]	; 0x75
  40368c:	f884 0072 	strb.w	r0, [r4, #114]	; 0x72
            pass->raw[7 - i] = tmp;
  403690:	f884 1075 	strb.w	r1, [r4, #117]	; 0x75
    if(!par == fwd) {
        unsigned char i;
        pass->state |= STATE_REV;
        /* reverse sampled digits */
        for(i = 1; i < 4; i++) {
            unsigned char tmp = pass->raw[i];
  403694:	f894 1073 	ldrb.w	r1, [r4, #115]	; 0x73
            pass->raw[i] = pass->raw[7 - i];
  403698:	f894 0074 	ldrb.w	r0, [r4, #116]	; 0x74
  40369c:	f884 0073 	strb.w	r0, [r4, #115]	; 0x73
            pass->raw[7 - i] = tmp;
  4036a0:	f884 1074 	strb.w	r1, [r4, #116]	; 0x74
             pass->raw[0] & 0xf, pass->raw[1] & 0xf,
             pass->raw[2] & 0xf, pass->raw[3] & 0xf,
             pass->raw[4] & 0xf, pass->raw[5] & 0xf,
             pass->raw[6] & 0xf, par);

    if(TEST_CFG(ean->ean13_config, ZBAR_CFG_ENABLE)) {
  4036a4:	f8d9 10cc 	ldr.w	r1, [r9, #204]	; 0xcc
  4036a8:	f011 0f01 	tst.w	r1, #1
  4036ac:	d008      	beq.n	4036c0 <_zbar_decode_ean+0x568>
        if(!par)
  4036ae:	2a00      	cmp	r2, #0
  4036b0:	f040 8546 	bne.w	404140 <_zbar_decode_ean+0xfe8>
            return(ZBAR_EAN13 | EAN_RIGHT);
        if(par & 0x20)
  4036b4:	f013 0f20 	tst.w	r3, #32
  4036b8:	f040 8545 	bne.w	404146 <_zbar_decode_ean+0xfee>
  4036bc:	f000 bdbe 	b.w	40423c <_zbar_decode_ean+0x10e4>
            return(ZBAR_EAN13 | EAN_LEFT);
    }
    if(par && !(par & 0x20))
  4036c0:	2b00      	cmp	r3, #0
  4036c2:	f000 854c 	beq.w	40415e <_zbar_decode_ean+0x1006>
  4036c6:	f013 0f20 	tst.w	r3, #32
  4036ca:	f000 853e 	beq.w	40414a <_zbar_decode_ean+0xff2>
  4036ce:	f000 bd46 	b.w	40415e <_zbar_decode_ean+0x1006>
                dcode->ean.direction = (pass->state & STATE_REV) != 0;
            pass->state = -1;
            return(part);
        }
	else if((idx == 0x18 || idx == 0x19)) {
	  zbar_symbol_type_t part = ZBAR_NONE;
  4036d2:	2000      	movs	r0, #0
  4036d4:	e000      	b.n	4036d8 <_zbar_decode_ean+0x580>
  4036d6:	2000      	movs	r0, #0
	  dbprintf(2, " fwd=%x", fwd);
	  if(!aux_end(dcode, fwd) && pass->raw[5] != 0xff)
	    part = ean_part_end7(&dcode->ean, pass, fwd);
	  if(part)
	    dcode->ean.direction = (pass->state & STATE_REV) != 0;
	  pass->state = -1;
  4036d8:	23ff      	movs	r3, #255	; 0xff
  4036da:	f884 3068 	strb.w	r3, [r4, #104]	; 0x68
  4036de:	e18d      	b.n	4039fc <_zbar_decode_ean+0x8a4>
	  return(part);
        }
    }

    if(pass->state & STATE_ADDON)
  4036e0:	f894 1068 	ldrb.w	r1, [r4, #104]	; 0x68
  4036e4:	f011 0f40 	tst.w	r1, #64	; 0x40
        idx >>= 1;
  4036e8:	bf18      	it	ne
  4036ea:	086d      	lsrne	r5, r5, #1

    if(!(idx & 0x03) && idx <= 0x14) {
  4036ec:	f015 0f03 	tst.w	r5, #3
  4036f0:	f040 851d 	bne.w	40412e <_zbar_decode_ean+0xfd6>
  4036f4:	2d14      	cmp	r5, #20
  4036f6:	f200 851a 	bhi.w	40412e <_zbar_decode_ean+0xfd6>
        signed char code = -1;
        unsigned w = pass->width;
  4036fa:	6ee6      	ldr	r6, [r4, #108]	; 0x6c
        if(!dcode->ean.s4)
  4036fc:	f8d9 20b0 	ldr.w	r2, [r9, #176]	; 0xb0
  403700:	2a00      	cmp	r2, #0
  403702:	f000 8514 	beq.w	40412e <_zbar_decode_ean+0xfd6>
            return(0);
        /* validate guard bars before decoding first char of symbol */
        if(!pass->state) {
  403706:	2900      	cmp	r1, #0
  403708:	f040 8084 	bne.w	403814 <_zbar_decode_ean+0x6bc>

/* retrieve i-th previous element width */
static inline unsigned get_width (const zbar_decoder_t *dcode,
                                  unsigned char offset)
{
    return(dcode->w[(dcode->idx - offset) & (DECODE_WINDOW - 1)]);
  40370c:	1f58      	subs	r0, r3, #5
  40370e:	f000 000f 	and.w	r0, r0, #15
  403712:	eb09 0080 	add.w	r0, r9, r0, lsl #2
  403716:	6847      	ldr	r7, [r0, #4]
  403718:	1f98      	subs	r0, r3, #6
  40371a:	f000 000f 	and.w	r0, r0, #15
  40371e:	eb09 0080 	add.w	r0, r9, r0, lsl #2
  403722:	6845      	ldr	r5, [r0, #4]
 * using current 4 as possible character
 */
static inline signed char aux_start (zbar_decoder_t *dcode)
{
    /* FIXME NB add-on has no guard in reverse */
    unsigned e1, e2 = get_width(dcode, 5) + get_width(dcode, 6);
  403724:	19e8      	adds	r0, r5, r7
    unsigned char E1;
    if(dcode->ean.s4 < 6)
  403726:	2a05      	cmp	r2, #5
  403728:	f240 8524 	bls.w	404174 <_zbar_decode_ean+0x101c>
{
    /* result is encoded number of units - 2
     * (for use as zero based index)
     * or -1 if invalid
     */
    unsigned char E = ((e * n * 2 + 1) / s - 3) / 2;
  40372c:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
  403730:	0040      	lsls	r0, r0, #1
  403732:	3001      	adds	r0, #1
  403734:	fbb0 f0f2 	udiv	r0, r0, r2
  403738:	3803      	subs	r0, #3
    return((E >= n - 3) ? -1 : E);
  40373a:	f3c0 0047 	ubfx	r0, r0, #1, #8
  40373e:	2803      	cmp	r0, #3
  403740:	d862      	bhi.n	403808 <_zbar_decode_ean+0x6b0>
        return(-1);

    if(decode_e(e2, dcode->ean.s4, 7)) {
  403742:	2800      	cmp	r0, #0
  403744:	f040 8516 	bne.w	404174 <_zbar_decode_ean+0x101c>

/* retrieve i-th previous element width */
static inline unsigned get_width (const zbar_decoder_t *dcode,
                                  unsigned char offset)
{
    return(dcode->w[(dcode->idx - offset) & (DECODE_WINDOW - 1)]);
  403748:	1f18      	subs	r0, r3, #4
  40374a:	f000 000f 	and.w	r0, r0, #15
  40374e:	eb09 0080 	add.w	r0, r9, r0, lsl #2
        dbprintf(2, " [invalid any]");
        return(-1);
    }

    e1 = get_width(dcode, 4) + get_width(dcode, 5);
  403752:	6840      	ldr	r0, [r0, #4]
  403754:	4438      	add	r0, r7
{
    /* result is encoded number of units - 2
     * (for use as zero based index)
     * or -1 if invalid
     */
    unsigned char E = ((e * n * 2 + 1) / s - 3) / 2;
  403756:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
  40375a:	0040      	lsls	r0, r0, #1
  40375c:	3001      	adds	r0, #1
  40375e:	fbb0 f0f2 	udiv	r0, r0, r2
  403762:	3803      	subs	r0, #3
    return((E >= n - 3) ? -1 : E);
  403764:	f3c0 0047 	ubfx	r0, r0, #1, #8
  403768:	2803      	cmp	r0, #3
  40376a:	f200 856a 	bhi.w	404242 <_zbar_decode_ean+0x10ea>
    E1 = decode_e(e1, dcode->ean.s4, 7);
  40376e:	b2c0      	uxtb	r0, r0

    if(get_color(dcode) == ZBAR_BAR) {
  403770:	f1bc 0f00 	cmp.w	ip, #0
  403774:	d018      	beq.n	4037a8 <_zbar_decode_ean+0x650>
  403776:	e000      	b.n	40377a <_zbar_decode_ean+0x622>
        dbprintf(2, " [invalid any]");
        return(-1);
    }

    e1 = get_width(dcode, 4) + get_width(dcode, 5);
    E1 = decode_e(e1, dcode->ean.s4, 7);
  403778:	20ff      	movs	r0, #255	; 0xff

/* retrieve i-th previous element width */
static inline unsigned get_width (const zbar_decoder_t *dcode,
                                  unsigned char offset)
{
    return(dcode->w[(dcode->idx - offset) & (DECODE_WINDOW - 1)]);
  40377a:	1fdd      	subs	r5, r3, #7
  40377c:	f005 050f 	and.w	r5, r5, #15
  403780:	eb09 0585 	add.w	r5, r9, r5, lsl #2
  403784:	686d      	ldr	r5, [r5, #4]

    if(get_color(dcode) == ZBAR_BAR) {
        /* check for quiet-zone */
        unsigned qz = get_width(dcode, 7);
        if(!qz || qz > dcode->ean.s4 * 3 / 4) {
  403786:	b12d      	cbz	r5, 403794 <_zbar_decode_ean+0x63c>
  403788:	eb02 0742 	add.w	r7, r2, r2, lsl #1
  40378c:	ebb5 0f97 	cmp.w	r5, r7, lsr #2
  403790:	f240 84f0 	bls.w	404174 <_zbar_decode_ean+0x101c>
            if(!E1) {
  403794:	2800      	cmp	r0, #0
  403796:	f000 84e5 	beq.w	404164 <_zbar_decode_ean+0x100c>
                dbprintf(2, " [valid normal]");
                return(0); /* normal symbol start */
            }
            else if(E1 == 1) {
  40379a:	2801      	cmp	r0, #1
                dbprintf(2, " [valid add-on]");
                return(STATE_ADDON); /* add-on symbol start */
  40379c:	bf08      	it	eq
  40379e:	2140      	moveq	r1, #64	; 0x40
        if(!qz || qz > dcode->ean.s4 * 3 / 4) {
            if(!E1) {
                dbprintf(2, " [valid normal]");
                return(0); /* normal symbol start */
            }
            else if(E1 == 1) {
  4037a0:	f000 84e0 	beq.w	404164 <_zbar_decode_ean+0x100c>
  4037a4:	f000 bce6 	b.w	404174 <_zbar_decode_ean+0x101c>
        }
        dbprintf(2, " [invalid start]");
        return(-1);
    }

    if(!E1) {
  4037a8:	2800      	cmp	r0, #0
  4037aa:	f040 84e3 	bne.w	404174 <_zbar_decode_ean+0x101c>
  4037ae:	1fd8      	subs	r0, r3, #7
  4037b0:	f000 000f 	and.w	r0, r0, #15
  4037b4:	eb09 0080 	add.w	r0, r9, r0, lsl #2
  4037b8:	6847      	ldr	r7, [r0, #4]
  4037ba:	f1a3 0008 	sub.w	r0, r3, #8
  4037be:	f000 000f 	and.w	r0, r0, #15
  4037c2:	eb09 0080 	add.w	r0, r9, r0, lsl #2
        /* attempting decode from SPACE => validate center guard */
        unsigned e3 = get_width(dcode, 6) + get_width(dcode, 7);
        unsigned e4 = get_width(dcode, 7) + get_width(dcode, 8);
  4037c6:	6840      	ldr	r0, [r0, #4]
  4037c8:	4438      	add	r0, r7
        return(-1);
    }

    if(!E1) {
        /* attempting decode from SPACE => validate center guard */
        unsigned e3 = get_width(dcode, 6) + get_width(dcode, 7);
  4037ca:	443d      	add	r5, r7
{
    /* result is encoded number of units - 2
     * (for use as zero based index)
     * or -1 if invalid
     */
    unsigned char E = ((e * n * 2 + 1) / s - 3) / 2;
  4037cc:	ebc5 05c5 	rsb	r5, r5, r5, lsl #3
  4037d0:	006d      	lsls	r5, r5, #1
  4037d2:	3501      	adds	r5, #1
  4037d4:	fbb5 f5f2 	udiv	r5, r5, r2
  4037d8:	3d03      	subs	r5, #3
    return((E >= n - 3) ? -1 : E);
  4037da:	f3c5 0547 	ubfx	r5, r5, #1, #8
  4037de:	2d03      	cmp	r5, #3
  4037e0:	d812      	bhi.n	403808 <_zbar_decode_ean+0x6b0>
        unsigned e4 = get_width(dcode, 7) + get_width(dcode, 8);
        if(!decode_e(e3, dcode->ean.s4, 7) &&
  4037e2:	2d00      	cmp	r5, #0
  4037e4:	f040 84c6 	bne.w	404174 <_zbar_decode_ean+0x101c>
{
    /* result is encoded number of units - 2
     * (for use as zero based index)
     * or -1 if invalid
     */
    unsigned char E = ((e * n * 2 + 1) / s - 3) / 2;
  4037e8:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
  4037ec:	0040      	lsls	r0, r0, #1
  4037ee:	3001      	adds	r0, #1
  4037f0:	fbb0 f0f2 	udiv	r0, r0, r2
  4037f4:	3803      	subs	r0, #3
    return((E >= n - 3) ? -1 : E);
  4037f6:	f3c0 0047 	ubfx	r0, r0, #1, #8
  4037fa:	2803      	cmp	r0, #3
  4037fc:	d804      	bhi.n	403808 <_zbar_decode_ean+0x6b0>
  4037fe:	2800      	cmp	r0, #0
  403800:	f000 84b0 	beq.w	404164 <_zbar_decode_ean+0x100c>
  403804:	f000 bcb6 	b.w	404174 <_zbar_decode_ean+0x101c>
        unsigned w = pass->width;
        if(!dcode->ean.s4)
            return(0);
        /* validate guard bars before decoding first char of symbol */
        if(!pass->state) {
            pass->state = aux_start(dcode);
  403808:	23ff      	movs	r3, #255	; 0xff
  40380a:	f884 3068 	strb.w	r3, [r4, #104]	; 0x68
            pass->width = dcode->ean.s4;
  40380e:	66e2      	str	r2, [r4, #108]	; 0x6c
  403810:	f000 bc8d 	b.w	40412e <_zbar_decode_ean+0xfd6>

static inline int check_width (unsigned w0,
                               unsigned w1)
{
    unsigned dw0 = w0;
    w0 *= 8;
  403814:	00f1      	lsls	r1, r6, #3
    w1 *= 8;
  403816:	00d0      	lsls	r0, r2, #3
    return(w0 - dw0 <= w1 && w1 <= w0 + dw0);
  403818:	1b8f      	subs	r7, r1, r6
  40381a:	42b8      	cmp	r0, r7
  40381c:	f0c0 84c0 	bcc.w	4041a0 <_zbar_decode_ean+0x1048>
  403820:	4431      	add	r1, r6
  403822:	4288      	cmp	r0, r1
  403824:	f240 84ab 	bls.w	40417e <_zbar_decode_ean+0x1026>
  403828:	f000 bcba 	b.w	4041a0 <_zbar_decode_ean+0x1048>
        if(!pass->state) {
            pass->state = aux_start(dcode);
            pass->width = dcode->ean.s4;
            if(pass->state < 0)
                return(0);
            idx = pass->state & STATE_IDX;
  40382c:	2500      	movs	r5, #0
    signed char code;

    /* calculate similar edge measurements */
    unsigned e1 = ((get_color(dcode) == ZBAR_BAR)
                   ? get_width(dcode, 0) + get_width(dcode, 1)
                   : get_width(dcode, 2) + get_width(dcode, 3));
  40382e:	f1bc 0f00 	cmp.w	ip, #0
  403832:	d00d      	beq.n	403850 <_zbar_decode_ean+0x6f8>

/* retrieve i-th previous element width */
static inline unsigned get_width (const zbar_decoder_t *dcode,
                                  unsigned char offset)
{
    return(dcode->w[(dcode->idx - offset) & (DECODE_WINDOW - 1)]);
  403834:	1e59      	subs	r1, r3, #1
  403836:	f001 010f 	and.w	r1, r1, #15
  40383a:	eb09 0181 	add.w	r1, r9, r1, lsl #2
  40383e:	f003 000f 	and.w	r0, r3, #15
  403842:	eb09 0080 	add.w	r0, r9, r0, lsl #2
  403846:	684e      	ldr	r6, [r1, #4]
  403848:	6841      	ldr	r1, [r0, #4]
  40384a:	eb06 0e01 	add.w	lr, r6, r1
  40384e:	e00d      	b.n	40386c <_zbar_decode_ean+0x714>
  403850:	1ed8      	subs	r0, r3, #3
  403852:	f000 000f 	and.w	r0, r0, #15
  403856:	eb09 0080 	add.w	r0, r9, r0, lsl #2
  40385a:	1e99      	subs	r1, r3, #2
  40385c:	f001 010f 	and.w	r1, r1, #15
  403860:	eb09 0181 	add.w	r1, r9, r1, lsl #2
  403864:	6840      	ldr	r0, [r0, #4]
  403866:	6849      	ldr	r1, [r1, #4]
  403868:	eb00 0e01 	add.w	lr, r0, r1
  40386c:	1e59      	subs	r1, r3, #1
  40386e:	f001 010f 	and.w	r1, r1, #15
  403872:	eb09 0181 	add.w	r1, r9, r1, lsl #2
  403876:	684f      	ldr	r7, [r1, #4]
  403878:	1e99      	subs	r1, r3, #2
  40387a:	f001 010f 	and.w	r1, r1, #15
  40387e:	eb09 0181 	add.w	r1, r9, r1, lsl #2
  403882:	6849      	ldr	r1, [r1, #4]
  403884:	910b      	str	r1, [sp, #44]	; 0x2c
    unsigned e2 = get_width(dcode, 1) + get_width(dcode, 2);
  403886:	19c8      	adds	r0, r1, r7
  403888:	900c      	str	r0, [sp, #48]	; 0x30
    dbprintf(2, "\n        e1=%d e2=%d", e1, e2);

    if(dcode->ean.s4 < 6)
  40388a:	2a05      	cmp	r2, #5
  40388c:	f240 8488 	bls.w	4041a0 <_zbar_decode_ean+0x1048>
{
    /* result is encoded number of units - 2
     * (for use as zero based index)
     * or -1 if invalid
     */
    unsigned char E = ((e * n * 2 + 1) / s - 3) / 2;
  403890:	ebce 01ce 	rsb	r1, lr, lr, lsl #3
  403894:	0049      	lsls	r1, r1, #1
  403896:	3101      	adds	r1, #1
  403898:	fbb1 f1f2 	udiv	r1, r1, r2
  40389c:	3903      	subs	r1, #3
    return((E >= n - 3) ? -1 : E);
  40389e:	f3c1 0147 	ubfx	r1, r1, #1, #8
  4038a2:	2903      	cmp	r1, #3
  4038a4:	bf88      	it	hi
  4038a6:	f04f 31ff 	movhi.w	r1, #4294967295
{
    /* result is encoded number of units - 2
     * (for use as zero based index)
     * or -1 if invalid
     */
    unsigned char E = ((e * n * 2 + 1) / s - 3) / 2;
  4038aa:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
  4038ae:	0040      	lsls	r0, r0, #1
  4038b0:	3001      	adds	r0, #1
  4038b2:	fbb0 f0f2 	udiv	r0, r0, r2
  4038b6:	3803      	subs	r0, #3
    return((E >= n - 3) ? -1 : E);
  4038b8:	f3c0 0047 	ubfx	r0, r0, #1, #8
  4038bc:	2803      	cmp	r0, #3
  4038be:	d861      	bhi.n	403984 <_zbar_decode_ean+0x82c>
        return(-1);

    /* create compacted encoding for direct lookup */
    code = ((decode_e(e1, dcode->ean.s4, 7) << 2) |
  4038c0:	ea40 0181 	orr.w	r1, r0, r1, lsl #2
  4038c4:	b2c9      	uxtb	r1, r1
             decode_e(e2, dcode->ean.s4, 7));
    if(code < 0)
  4038c6:	f011 0f80 	tst.w	r1, #128	; 0x80
  4038ca:	f040 8469 	bne.w	4041a0 <_zbar_decode_ean+0x1048>
       E1E2 == 34 (0110)
       E1E2 == 43 (1001)
       E1E2 == 33 (0101)
       E1E2 == 44 (1010)
     */
    if((1 << code) & 0x0660) {
  4038ce:	b248      	sxtb	r0, r1
  4038d0:	4606      	mov	r6, r0
  4038d2:	f44f 60cc 	mov.w	r0, #1632	; 0x660
  4038d6:	4130      	asrs	r0, r6
  4038d8:	f010 0f01 	tst.w	r0, #1
  4038dc:	f000 845b 	beq.w	404196 <_zbar_decode_ean+0x103e>
        unsigned char mid, alt;
        /* use sum of bar widths */
        unsigned d2 = ((get_color(dcode) == ZBAR_BAR)
                       ? get_width(dcode, 0) + get_width(dcode, 2)
                       : get_width(dcode, 1) + get_width(dcode, 3));
  4038e0:	f1bc 0f00 	cmp.w	ip, #0
  4038e4:	d008      	beq.n	4038f8 <_zbar_decode_ean+0x7a0>

/* retrieve i-th previous element width */
static inline unsigned get_width (const zbar_decoder_t *dcode,
                                  unsigned char offset)
{
    return(dcode->w[(dcode->idx - offset) & (DECODE_WINDOW - 1)]);
  4038e6:	f003 030f 	and.w	r3, r3, #15
  4038ea:	eb09 0383 	add.w	r3, r9, r3, lsl #2
  4038ee:	685b      	ldr	r3, [r3, #4]
  4038f0:	980b      	ldr	r0, [sp, #44]	; 0x2c
  4038f2:	4418      	add	r0, r3
  4038f4:	4607      	mov	r7, r0
  4038f6:	e006      	b.n	403906 <_zbar_decode_ean+0x7ae>
  4038f8:	3b03      	subs	r3, #3
  4038fa:	f003 030f 	and.w	r3, r3, #15
  4038fe:	eb09 0383 	add.w	r3, r9, r3, lsl #2
  403902:	685b      	ldr	r3, [r3, #4]
  403904:	441f      	add	r7, r3
        d2 *= 7;
  403906:	ebc7 07c7 	rsb	r7, r7, r7, lsl #3
        mid = (((1 << code) & 0x0420)
                             ? 3     /* E1E2 in 33,44 */
  40390a:	f44f 6384 	mov.w	r3, #1056	; 0x420
  40390e:	4133      	asrs	r3, r6
  403910:	f003 0301 	and.w	r3, r3, #1
        /* use sum of bar widths */
        unsigned d2 = ((get_color(dcode) == ZBAR_BAR)
                       ? get_width(dcode, 0) + get_width(dcode, 2)
                       : get_width(dcode, 1) + get_width(dcode, 3));
        d2 *= 7;
        mid = (((1 << code) & 0x0420)
  403914:	2b00      	cmp	r3, #0
  403916:	bf14      	ite	ne
  403918:	2303      	movne	r3, #3
  40391a:	2304      	moveq	r3, #4
                             ? 3     /* E1E2 in 33,44 */
                             : 4);   /* E1E2 in 34,43 */
        alt = d2 > (mid * dcode->ean.s4);
  40391c:	fb02 f303 	mul.w	r3, r2, r3
        if(alt)
  403920:	429f      	cmp	r7, r3
  403922:	f240 8438 	bls.w	404196 <_zbar_decode_ean+0x103e>
            code = ((code >> 1) & 3) | 0x10; /* compress code space */
  403926:	f3c1 0141 	ubfx	r1, r1, #1, #2
  40392a:	f041 0110 	orr.w	r1, r1, #16
        if(w)
            code = decode4(dcode);
        else
            dbprintf(2, " [bad width]");

        if((code < 0 && idx != 0x10) || 
  40392e:	f011 0f80 	tst.w	r1, #128	; 0x80
  403932:	f000 8438 	beq.w	4041a6 <_zbar_decode_ean+0x104e>
  403936:	e026      	b.n	403986 <_zbar_decode_ean+0x82e>
        if(alt)
            code = ((code >> 1) & 3) | 0x10; /* compress code space */
        dbprintf(2, " (d2=%d(%d) alt=%d)", d2, mid * dcode->ean.s4, alt);
    }
    dbprintf(2, " char=%02x", digits[(unsigned char)code]);
    zassert(code < 0x14, -1, "code=%02x e1=%x e2=%x s4=%x color=%x\n",
  403938:	4b0c      	ldr	r3, [pc, #48]	; (40396c <_zbar_decode_ean+0x814>)
  40393a:	681b      	ldr	r3, [r3, #0]
  40393c:	68d8      	ldr	r0, [r3, #12]
  40393e:	4b0c      	ldr	r3, [pc, #48]	; (403970 <_zbar_decode_ean+0x818>)
  403940:	9300      	str	r3, [sp, #0]
  403942:	4b0c      	ldr	r3, [pc, #48]	; (403974 <_zbar_decode_ean+0x81c>)
  403944:	9301      	str	r3, [sp, #4]
  403946:	b249      	sxtb	r1, r1
  403948:	9102      	str	r1, [sp, #8]
  40394a:	f8cd e00c 	str.w	lr, [sp, #12]
  40394e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  403950:	9304      	str	r3, [sp, #16]
  403952:	9205      	str	r2, [sp, #20]
  403954:	f8cd c018 	str.w	ip, [sp, #24]
  403958:	4907      	ldr	r1, [pc, #28]	; (403978 <_zbar_decode_ean+0x820>)
  40395a:	4a08      	ldr	r2, [pc, #32]	; (40397c <_zbar_decode_ean+0x824>)
  40395c:	f240 1301 	movw	r3, #257	; 0x101
  403960:	4e07      	ldr	r6, [pc, #28]	; (403980 <_zbar_decode_ean+0x828>)
  403962:	47b0      	blx	r6
  403964:	f000 bc1c 	b.w	4041a0 <_zbar_decode_ean+0x1048>
  403968:	0040f500 	.word	0x0040f500
  40396c:	20000440 	.word	0x20000440
  403970:	0040f4f8 	.word	0x0040f4f8
  403974:	0040f5ac 	.word	0x0040f5ac
  403978:	0040f534 	.word	0x0040f534
  40397c:	0040f588 	.word	0x0040f588
  403980:	004066d1 	.word	0x004066d1

    /* create compacted encoding for direct lookup */
    code = ((decode_e(e1, dcode->ean.s4, 7) << 2) |
             decode_e(e2, dcode->ean.s4, 7));
    if(code < 0)
        return(-1);
  403984:	21ff      	movs	r1, #255	; 0xff
        if(w)
            code = decode4(dcode);
        else
            dbprintf(2, " [bad width]");

        if((code < 0 && idx != 0x10) || 
  403986:	2d10      	cmp	r5, #16
  403988:	d122      	bne.n	4039d0 <_zbar_decode_ean+0x878>
           (idx > 0 && (pass->state & STATE_ADDON) && aux_mid(dcode)))
  40398a:	f894 3068 	ldrb.w	r3, [r4, #104]	; 0x68
  40398e:	f013 0f40 	tst.w	r3, #64	; 0x40
  403992:	d021      	beq.n	4039d8 <_zbar_decode_ean+0x880>
  403994:	f899 3000 	ldrb.w	r3, [r9]
  403998:	1f58      	subs	r0, r3, #5
  40399a:	f000 000f 	and.w	r0, r0, #15
  40399e:	eb09 0080 	add.w	r0, r9, r0, lsl #2
  4039a2:	1f1a      	subs	r2, r3, #4
  4039a4:	f002 020f 	and.w	r2, r2, #15
  4039a8:	eb09 0282 	add.w	r2, r9, r2, lsl #2

/* check addon delimiter using current 4 as character
 */
static inline signed char aux_mid (zbar_decoder_t *dcode)
{
    unsigned e = get_width(dcode, 4) + get_width(dcode, 5);
  4039ac:	6840      	ldr	r0, [r0, #4]
  4039ae:	6853      	ldr	r3, [r2, #4]
  4039b0:	4403      	add	r3, r0
{
    /* result is encoded number of units - 2
     * (for use as zero based index)
     * or -1 if invalid
     */
    unsigned char E = ((e * n * 2 + 1) / s - 3) / 2;
  4039b2:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
  4039b6:	005b      	lsls	r3, r3, #1
  4039b8:	3301      	adds	r3, #1
  4039ba:	f8d9 20b0 	ldr.w	r2, [r9, #176]	; 0xb0
  4039be:	fbb3 f3f2 	udiv	r3, r3, r2
  4039c2:	3b03      	subs	r3, #3
    return((E >= n - 3) ? -1 : E);
  4039c4:	f3c3 0347 	ubfx	r3, r3, #1, #8
  4039c8:	2b03      	cmp	r3, #3
  4039ca:	d801      	bhi.n	4039d0 <_zbar_decode_ean+0x878>
            code = decode4(dcode);
        else
            dbprintf(2, " [bad width]");

        if((code < 0 && idx != 0x10) || 
           (idx > 0 && (pass->state & STATE_ADDON) && aux_mid(dcode)))
  4039cc:	b25b      	sxtb	r3, r3
  4039ce:	b11b      	cbz	r3, 4039d8 <_zbar_decode_ean+0x880>
            pass->state = -1;
  4039d0:	23ff      	movs	r3, #255	; 0xff
  4039d2:	f884 3068 	strb.w	r3, [r4, #104]	; 0x68
  4039d6:	e3aa      	b.n	40412e <_zbar_decode_ean+0xfd6>
        else if(code < 0)
  4039d8:	f011 0f80 	tst.w	r1, #128	; 0x80
  4039dc:	d003      	beq.n	4039e6 <_zbar_decode_ean+0x88e>
            pass->raw[5] = 0xff;
  4039de:	23ff      	movs	r3, #255	; 0xff
  4039e0:	f884 3075 	strb.w	r3, [r4, #117]	; 0x75
  4039e4:	e3a3      	b.n	40412e <_zbar_decode_ean+0xfd6>
        else {
            dbprintf(2, "\n        raw[%x]=%02x =>", idx >> 2,
                     digits[(unsigned char)code]);
            pass->raw[(idx >> 2) + 1] = digits[(unsigned char)code];
  4039e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
  4039e8:	eb09 1303 	add.w	r3, r9, r3, lsl #4
  4039ec:	eb03 0595 	add.w	r5, r3, r5, lsr #2
  4039f0:	b2c9      	uxtb	r1, r1
  4039f2:	4bbf      	ldr	r3, [pc, #764]	; (403cf0 <_zbar_decode_ean+0xb98>)
  4039f4:	5c5b      	ldrb	r3, [r3, r1]
  4039f6:	f885 3071 	strb.w	r3, [r5, #113]	; 0x71
  4039fa:	e398      	b.n	40412e <_zbar_decode_ean+0xfd6>
        {
            zbar_symbol_type_t part;
            dbprintf(2, "      ean[%x/%x]: idx=%x st=%d s=%d",
                     i, pass_idx, dcode->idx, pass->state, dcode->ean.s4);
            part = decode_pass(dcode, pass);
            if(part) {
  4039fc:	2800      	cmp	r0, #0
  4039fe:	f000 8396 	beq.w	40412e <_zbar_decode_ean+0xfd6>
    /* copy raw data into holding buffer */
    /* if same partial is not consistent, reset others */
    dbprintf(2, " integrate part=%x (%s)", part, dsprintbuf(ean));
    signed char i, j;

    if((ean->left && ((part & ZBAR_SYMBOL) != ean->left)) ||
  403a02:	f8b9 30a8 	ldrh.w	r3, [r9, #168]	; 0xa8
  403a06:	b113      	cbz	r3, 403a0e <_zbar_decode_ean+0x8b6>
  403a08:	b2c2      	uxtb	r2, r0
  403a0a:	429a      	cmp	r2, r3
  403a0c:	d105      	bne.n	403a1a <_zbar_decode_ean+0x8c2>
       (ean->right && ((part & ZBAR_SYMBOL) != ean->right))) {
  403a0e:	f8b9 30aa 	ldrh.w	r3, [r9, #170]	; 0xaa
    /* copy raw data into holding buffer */
    /* if same partial is not consistent, reset others */
    dbprintf(2, " integrate part=%x (%s)", part, dsprintbuf(ean));
    signed char i, j;

    if((ean->left && ((part & ZBAR_SYMBOL) != ean->left)) ||
  403a12:	b13b      	cbz	r3, 403a24 <_zbar_decode_ean+0x8cc>
       (ean->right && ((part & ZBAR_SYMBOL) != ean->right))) {
  403a14:	b2c2      	uxtb	r2, r0
  403a16:	429a      	cmp	r2, r3
  403a18:	d004      	beq.n	403a24 <_zbar_decode_ean+0x8cc>
        /* partial mismatch - reset collected parts */
        dbprintf(2, " rst(type %x %x)", ean->left, ean->right);
        ean->left = ean->right = ZBAR_NONE;
  403a1a:	2300      	movs	r3, #0
  403a1c:	f8a9 30aa 	strh.w	r3, [r9, #170]	; 0xaa
  403a20:	f8a9 30a8 	strh.w	r3, [r9, #168]	; 0xa8
    }

    if((ean->left || ean->right) &&
  403a24:	f8d9 30a8 	ldr.w	r3, [r9, #168]	; 0xa8
  403a28:	b163      	cbz	r3, 403a44 <_zbar_decode_ean+0x8ec>
       !check_width(ean->width, pass->width)) {
  403a2a:	f8d9 30b4 	ldr.w	r3, [r9, #180]	; 0xb4

static inline int check_width (unsigned w0,
                               unsigned w1)
{
    unsigned dw0 = w0;
    w0 *= 8;
  403a2e:	00d9      	lsls	r1, r3, #3
    w1 *= 8;
  403a30:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
  403a32:	00d2      	lsls	r2, r2, #3
    return(w0 - dw0 <= w1 && w1 <= w0 + dw0);
  403a34:	1acd      	subs	r5, r1, r3
  403a36:	42aa      	cmp	r2, r5
  403a38:	f0c0 83ba 	bcc.w	4041b0 <_zbar_decode_ean+0x1058>
  403a3c:	440b      	add	r3, r1
  403a3e:	429a      	cmp	r2, r3
  403a40:	f200 83b6 	bhi.w	4041b0 <_zbar_decode_ean+0x1058>
      dbprintf(2, " rst(width %d)", pass->width);
      ean->left = ean->right = ZBAR_NONE;
    }


    if(part & EAN_RIGHT) {
  403a44:	f400 5380 	and.w	r3, r0, #4096	; 0x1000
  403a48:	b29b      	uxth	r3, r3
  403a4a:	b393      	cbz	r3, 403ab2 <_zbar_decode_ean+0x95a>
        part &= ZBAR_SYMBOL;
  403a4c:	b2c0      	uxtb	r0, r0
        j = part - 1;
  403a4e:	1e45      	subs	r5, r0, #1
  403a50:	b2ed      	uxtb	r5, r5
        for(i = part >> 1; i; i--, j--) {
  403a52:	0842      	lsrs	r2, r0, #1
  403a54:	f002 03ff 	and.w	r3, r2, #255	; 0xff
  403a58:	b322      	cbz	r2, 403aa4 <_zbar_decode_ean+0x94c>
  403a5a:	1aad      	subs	r5, r5, r2
            unsigned char digit = pass->raw[i] & 0xf;
  403a5c:	9a09      	ldr	r2, [sp, #36]	; 0x24
  403a5e:	eb09 1602 	add.w	r6, r9, r2, lsl #4
            if(ean->right && ean->buf[j] != digit) {
                /* partial mismatch - reset collected parts */
                dbprintf(2, " rst(right)");
                ean->left = ean->right = ZBAR_NONE;
  403a62:	2700      	movs	r7, #0
  403a64:	b2d9      	uxtb	r1, r3
  403a66:	194a      	adds	r2, r1, r5
  403a68:	b2d2      	uxtb	r2, r2

    if(part & EAN_RIGHT) {
        part &= ZBAR_SYMBOL;
        j = part - 1;
        for(i = part >> 1; i; i--, j--) {
            unsigned char digit = pass->raw[i] & 0xf;
  403a6a:	fa46 f383 	sxtab	r3, r6, r3
  403a6e:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
  403a72:	f003 030f 	and.w	r3, r3, #15
            if(ean->right && ean->buf[j] != digit) {
  403a76:	f8b9 e0aa 	ldrh.w	lr, [r9, #170]	; 0xaa
  403a7a:	f1be 0f00 	cmp.w	lr, #0
  403a7e:	d009      	beq.n	403a94 <_zbar_decode_ean+0x93c>
  403a80:	fa49 fe82 	sxtab	lr, r9, r2
  403a84:	f99e e0b8 	ldrsb.w	lr, [lr, #184]	; 0xb8
  403a88:	459e      	cmp	lr, r3
                /* partial mismatch - reset collected parts */
                dbprintf(2, " rst(right)");
                ean->left = ean->right = ZBAR_NONE;
  403a8a:	bf1c      	itt	ne
  403a8c:	f8a9 70aa 	strhne.w	r7, [r9, #170]	; 0xaa
  403a90:	f8a9 70a8 	strhne.w	r7, [r9, #168]	; 0xa8
            }
            ean->buf[j] = digit;
  403a94:	fa49 f282 	sxtab	r2, r9, r2
  403a98:	f882 30b8 	strb.w	r3, [r2, #184]	; 0xb8
  403a9c:	1e4b      	subs	r3, r1, #1


    if(part & EAN_RIGHT) {
        part &= ZBAR_SYMBOL;
        j = part - 1;
        for(i = part >> 1; i; i--, j--) {
  403a9e:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
  403aa2:	d1df      	bne.n	403a64 <_zbar_decode_ean+0x90c>
                dbprintf(2, " rst(right)");
                ean->left = ean->right = ZBAR_NONE;
            }
            ean->buf[j] = digit;
        }
        ean->right = part;
  403aa4:	f8a9 00aa 	strh.w	r0, [r9, #170]	; 0xaa
        part &= ean->left;  /* FIXME!? */
  403aa8:	f8b9 b0a8 	ldrh.w	fp, [r9, #168]	; 0xa8
  403aac:	ea00 0b0b 	and.w	fp, r0, fp
  403ab0:	e0bd      	b.n	403c2e <_zbar_decode_ean+0xad6>
    }
    else if(part == ZBAR_EAN13 || part == ZBAR_EAN8) /* EAN_LEFT */ {
  403ab2:	280d      	cmp	r0, #13
  403ab4:	f000 8382 	beq.w	4041bc <_zbar_decode_ean+0x1064>
  403ab8:	2808      	cmp	r0, #8
  403aba:	d129      	bne.n	403b10 <_zbar_decode_ean+0x9b8>
  403abc:	e37e      	b.n	4041bc <_zbar_decode_ean+0x1064>
  403abe:	b2cb      	uxtb	r3, r1
  403ac0:	1aea      	subs	r2, r5, r3
  403ac2:	b2d2      	uxtb	r2, r2
  403ac4:	1afb      	subs	r3, r7, r3
        j = (part - 1) >> 1;
        for(i = part >> 1; j >= 0; i--, j--) {
            unsigned char digit = pass->raw[i] & 0xf;
  403ac6:	fa46 f383 	sxtab	r3, r6, r3
  403aca:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
  403ace:	f003 030f 	and.w	r3, r3, #15
            if(ean->left && ean->buf[j] != digit) {
  403ad2:	f8b9 c0a8 	ldrh.w	ip, [r9, #168]	; 0xa8
  403ad6:	f1bc 0f00 	cmp.w	ip, #0
  403ada:	d009      	beq.n	403af0 <_zbar_decode_ean+0x998>
  403adc:	fa49 fc82 	sxtab	ip, r9, r2
  403ae0:	f99c c0b8 	ldrsb.w	ip, [ip, #184]	; 0xb8
  403ae4:	459c      	cmp	ip, r3
                /* partial mismatch - reset collected parts */
                dbprintf(2, " rst(left)");
                ean->left = ean->right = ZBAR_NONE;
  403ae6:	bf1c      	itt	ne
  403ae8:	f8a9 e0aa 	strhne.w	lr, [r9, #170]	; 0xaa
  403aec:	f8a9 e0a8 	strhne.w	lr, [r9, #168]	; 0xa8
            }
            ean->buf[j] = digit;
  403af0:	fa49 f282 	sxtab	r2, r9, r2
  403af4:	f882 30b8 	strb.w	r3, [r2, #184]	; 0xb8
  403af8:	3101      	adds	r1, #1
  403afa:	1a6b      	subs	r3, r5, r1
        ean->right = part;
        part &= ean->left;  /* FIXME!? */
    }
    else if(part == ZBAR_EAN13 || part == ZBAR_EAN8) /* EAN_LEFT */ {
        j = (part - 1) >> 1;
        for(i = part >> 1; j >= 0; i--, j--) {
  403afc:	f013 0f80 	tst.w	r3, #128	; 0x80
  403b00:	d0dd      	beq.n	403abe <_zbar_decode_ean+0x966>
                dbprintf(2, " rst(left)");
                ean->left = ean->right = ZBAR_NONE;
            }
            ean->buf[j] = digit;
        }
        ean->left = part;
  403b02:	f8a9 00a8 	strh.w	r0, [r9, #168]	; 0xa8
        part &= ean->right;  /* FIXME!? */
  403b06:	f8b9 b0aa 	ldrh.w	fp, [r9, #170]	; 0xaa
  403b0a:	ea00 0b0b 	and.w	fp, r0, fp
  403b0e:	e08e      	b.n	403c2e <_zbar_decode_ean+0xad6>
    }
    else if(part != ZBAR_UPCE) /* add-ons */ {
  403b10:	2809      	cmp	r0, #9
  403b12:	d017      	beq.n	403b44 <_zbar_decode_ean+0x9ec>
        for(i = part; i > 0; i--)
  403b14:	b2c3      	uxtb	r3, r0
  403b16:	b25a      	sxtb	r2, r3
  403b18:	2a00      	cmp	r2, #0
  403b1a:	dd10      	ble.n	403b3e <_zbar_decode_ean+0x9e6>
            ean->buf[i - 1] = pass->raw[i] & 0xf;
  403b1c:	9a09      	ldr	r2, [sp, #36]	; 0x24
  403b1e:	eb09 1502 	add.w	r5, r9, r2, lsl #4
  403b22:	b25a      	sxtb	r2, r3
  403b24:	eb09 0102 	add.w	r1, r9, r2
  403b28:	442a      	add	r2, r5
  403b2a:	f892 2070 	ldrb.w	r2, [r2, #112]	; 0x70
  403b2e:	f002 020f 	and.w	r2, r2, #15
  403b32:	f881 20b7 	strb.w	r2, [r1, #183]	; 0xb7
  403b36:	3b01      	subs	r3, #1
        }
        ean->left = part;
        part &= ean->right;  /* FIXME!? */
    }
    else if(part != ZBAR_UPCE) /* add-ons */ {
        for(i = part; i > 0; i--)
  403b38:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
  403b3c:	d1f1      	bne.n	403b22 <_zbar_decode_ean+0x9ca>
            ean->buf[i - 1] = pass->raw[i] & 0xf;
        ean->left = part;
  403b3e:	f8a9 00a8 	strh.w	r0, [r9, #168]	; 0xa8
  403b42:	e345      	b.n	4041d0 <_zbar_decode_ean+0x1078>
                                    ean_pass_t *pass)
{
    int i = 0;
    unsigned char decode;
    /* parity encoded digit is checksum */
    ean->buf[12] = pass->raw[i++];
  403b44:	f894 3070 	ldrb.w	r3, [r4, #112]	; 0x70
  403b48:	f889 30c4 	strb.w	r3, [r9, #196]	; 0xc4

    decode = pass->raw[6] & 0xf;
  403b4c:	f894 3076 	ldrb.w	r3, [r4, #118]	; 0x76
  403b50:	f003 030f 	and.w	r3, r3, #15
    ean->buf[0] = 0;
  403b54:	2200      	movs	r2, #0
  403b56:	f889 20b8 	strb.w	r2, [r9, #184]	; 0xb8
    ean->buf[1] = 0;
  403b5a:	f889 20b9 	strb.w	r2, [r9, #185]	; 0xb9
    ean->buf[2] = pass->raw[i++] & 0xf;
  403b5e:	f894 2071 	ldrb.w	r2, [r4, #113]	; 0x71
  403b62:	f002 020f 	and.w	r2, r2, #15
  403b66:	f889 20ba 	strb.w	r2, [r9, #186]	; 0xba
    ean->buf[3] = pass->raw[i++] & 0xf;
  403b6a:	f894 2072 	ldrb.w	r2, [r4, #114]	; 0x72
  403b6e:	f002 020f 	and.w	r2, r2, #15
  403b72:	f889 20bb 	strb.w	r2, [r9, #187]	; 0xbb
    ean->buf[4] = (decode < 3) ? decode : pass->raw[i++] & 0xf;
  403b76:	2b02      	cmp	r3, #2
  403b78:	d802      	bhi.n	403b80 <_zbar_decode_ean+0xa28>
  403b7a:	b2d9      	uxtb	r1, r3

    decode = pass->raw[6] & 0xf;
    ean->buf[0] = 0;
    ean->buf[1] = 0;
    ean->buf[2] = pass->raw[i++] & 0xf;
    ean->buf[3] = pass->raw[i++] & 0xf;
  403b7c:	2203      	movs	r2, #3
  403b7e:	e004      	b.n	403b8a <_zbar_decode_ean+0xa32>
    ean->buf[4] = (decode < 3) ? decode : pass->raw[i++] & 0xf;
  403b80:	f894 1073 	ldrb.w	r1, [r4, #115]	; 0x73
  403b84:	f001 010f 	and.w	r1, r1, #15
  403b88:	2204      	movs	r2, #4
  403b8a:	f889 10bc 	strb.w	r1, [r9, #188]	; 0xbc
    ean->buf[5] = (decode < 4) ? 0 : pass->raw[i++] & 0xf;
  403b8e:	2b03      	cmp	r3, #3
  403b90:	d909      	bls.n	403ba6 <_zbar_decode_ean+0xa4e>
  403b92:	9909      	ldr	r1, [sp, #36]	; 0x24
  403b94:	eb09 1101 	add.w	r1, r9, r1, lsl #4
  403b98:	4411      	add	r1, r2
  403b9a:	f891 1070 	ldrb.w	r1, [r1, #112]	; 0x70
  403b9e:	f001 010f 	and.w	r1, r1, #15
  403ba2:	3201      	adds	r2, #1
  403ba4:	e000      	b.n	403ba8 <_zbar_decode_ean+0xa50>
  403ba6:	2100      	movs	r1, #0
  403ba8:	f889 10bd 	strb.w	r1, [r9, #189]	; 0xbd
    ean->buf[6] = (decode < 5) ? 0 : pass->raw[i++] & 0xf;
  403bac:	2b04      	cmp	r3, #4
  403bae:	d909      	bls.n	403bc4 <_zbar_decode_ean+0xa6c>
  403bb0:	9909      	ldr	r1, [sp, #36]	; 0x24
  403bb2:	eb09 1101 	add.w	r1, r9, r1, lsl #4
  403bb6:	4411      	add	r1, r2
  403bb8:	f891 1070 	ldrb.w	r1, [r1, #112]	; 0x70
  403bbc:	f001 010f 	and.w	r1, r1, #15
  403bc0:	3201      	adds	r2, #1
  403bc2:	e000      	b.n	403bc6 <_zbar_decode_ean+0xa6e>
  403bc4:	2100      	movs	r1, #0
  403bc6:	f889 10be 	strb.w	r1, [r9, #190]	; 0xbe
    ean->buf[7] = 0;
  403bca:	2100      	movs	r1, #0
  403bcc:	f889 10bf 	strb.w	r1, [r9, #191]	; 0xbf
    ean->buf[8] = 0;
  403bd0:	f889 10c0 	strb.w	r1, [r9, #192]	; 0xc0
    ean->buf[9] = (decode < 3) ? pass->raw[i++] & 0xf : 0;
  403bd4:	2b02      	cmp	r3, #2
  403bd6:	d809      	bhi.n	403bec <_zbar_decode_ean+0xa94>
  403bd8:	9909      	ldr	r1, [sp, #36]	; 0x24
  403bda:	eb09 1101 	add.w	r1, r9, r1, lsl #4
  403bde:	4411      	add	r1, r2
  403be0:	f891 1070 	ldrb.w	r1, [r1, #112]	; 0x70
  403be4:	f001 010f 	and.w	r1, r1, #15
  403be8:	3201      	adds	r2, #1
  403bea:	e000      	b.n	403bee <_zbar_decode_ean+0xa96>
  403bec:	2100      	movs	r1, #0
  403bee:	f889 10c1 	strb.w	r1, [r9, #193]	; 0xc1
    ean->buf[10] = (decode < 4) ? pass->raw[i++] & 0xf : 0;
  403bf2:	2b03      	cmp	r3, #3
  403bf4:	d809      	bhi.n	403c0a <_zbar_decode_ean+0xab2>
  403bf6:	9909      	ldr	r1, [sp, #36]	; 0x24
  403bf8:	eb09 1101 	add.w	r1, r9, r1, lsl #4
  403bfc:	4411      	add	r1, r2
  403bfe:	f891 1070 	ldrb.w	r1, [r1, #112]	; 0x70
  403c02:	f001 010f 	and.w	r1, r1, #15
  403c06:	3201      	adds	r2, #1
  403c08:	e000      	b.n	403c0c <_zbar_decode_ean+0xab4>
  403c0a:	2100      	movs	r1, #0
  403c0c:	f889 10c2 	strb.w	r1, [r9, #194]	; 0xc2
    ean->buf[11] = (decode < 5) ? pass->raw[i] & 0xf : decode;
  403c10:	2b04      	cmp	r3, #4
  403c12:	d808      	bhi.n	403c26 <_zbar_decode_ean+0xace>
  403c14:	9b09      	ldr	r3, [sp, #36]	; 0x24
  403c16:	eb09 1303 	add.w	r3, r9, r3, lsl #4
  403c1a:	4413      	add	r3, r2
  403c1c:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
  403c20:	f003 030f 	and.w	r3, r3, #15
  403c24:	e000      	b.n	403c28 <_zbar_decode_ean+0xad0>
  403c26:	b2db      	uxtb	r3, r3
  403c28:	f889 30c3 	strb.w	r3, [r9, #195]	; 0xc3
  403c2c:	e2d0      	b.n	4041d0 <_zbar_decode_ean+0x1078>
        ean->left = part;
    }
    else
        ean_expand_upce(ean, pass);

    ean->width = pass->width;
  403c2e:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
  403c30:	f8c9 30b4 	str.w	r3, [r9, #180]	; 0xb4

    if(!part)
  403c34:	f1bb 0f00 	cmp.w	fp, #0
  403c38:	f000 8171 	beq.w	403f1e <_zbar_decode_ean+0xdc6>
        part = ZBAR_PARTIAL;

    if(((part == ZBAR_EAN13 ||
  403c3c:	f02b 0304 	bic.w	r3, fp, #4
  403c40:	b29b      	uxth	r3, r3
  403c42:	2b09      	cmp	r3, #9
  403c44:	f040 82d6 	bne.w	4041f4 <_zbar_decode_ean+0x109c>
  403c48:	e2c7      	b.n	4041da <_zbar_decode_ean+0x1082>
                                               int n)
{
    unsigned char chk = 0;
    unsigned char i, d;
    for(i = 0; i < n; i++) {
        unsigned char d = ean->buf[i];
  403c4a:	eb09 0203 	add.w	r2, r9, r3
  403c4e:	f892 60b8 	ldrb.w	r6, [r2, #184]	; 0xb8
        zassert(d < 10, -1, "i=%x d=%x chk=%x %s\n", i, d, chk,
  403c52:	2e09      	cmp	r6, #9
  403c54:	d91b      	bls.n	403c8e <_zbar_decode_ean+0xb36>
  403c56:	e002      	b.n	403c5e <_zbar_decode_ean+0xb06>
                                               int n)
{
    unsigned char chk = 0;
    unsigned char i, d;
    for(i = 0; i < n; i++) {
        unsigned char d = ean->buf[i];
  403c58:	462e      	mov	r6, r5
        zassert(d < 10, -1, "i=%x d=%x chk=%x %s\n", i, d, chk,
  403c5a:	2500      	movs	r5, #0
static inline signed char ean_verify_checksum (ean_decoder_t *ean,
                                               int n)
{
    unsigned char chk = 0;
    unsigned char i, d;
    for(i = 0; i < n; i++) {
  403c5c:	462f      	mov	r7, r5
        unsigned char d = ean->buf[i];
        zassert(d < 10, -1, "i=%x d=%x chk=%x %s\n", i, d, chk,
  403c5e:	4b25      	ldr	r3, [pc, #148]	; (403cf4 <_zbar_decode_ean+0xb9c>)
  403c60:	681b      	ldr	r3, [r3, #0]
  403c62:	68dc      	ldr	r4, [r3, #12]
  403c64:	f109 00b8 	add.w	r0, r9, #184	; 0xb8
  403c68:	2112      	movs	r1, #18
  403c6a:	4b23      	ldr	r3, [pc, #140]	; (403cf8 <_zbar_decode_ean+0xba0>)
  403c6c:	4798      	blx	r3
  403c6e:	4b23      	ldr	r3, [pc, #140]	; (403cfc <_zbar_decode_ean+0xba4>)
  403c70:	9300      	str	r3, [sp, #0]
  403c72:	4b23      	ldr	r3, [pc, #140]	; (403d00 <_zbar_decode_ean+0xba8>)
  403c74:	9301      	str	r3, [sp, #4]
  403c76:	9702      	str	r7, [sp, #8]
  403c78:	9603      	str	r6, [sp, #12]
  403c7a:	9504      	str	r5, [sp, #16]
  403c7c:	9005      	str	r0, [sp, #20]
  403c7e:	4620      	mov	r0, r4
  403c80:	4920      	ldr	r1, [pc, #128]	; (403d04 <_zbar_decode_ean+0xbac>)
  403c82:	4a21      	ldr	r2, [pc, #132]	; (403d08 <_zbar_decode_ean+0xbb0>)
  403c84:	f240 230a 	movw	r3, #522	; 0x20a
  403c88:	4c20      	ldr	r4, [pc, #128]	; (403d0c <_zbar_decode_ean+0xbb4>)
  403c8a:	47a0      	blx	r4
  403c8c:	e0e1      	b.n	403e52 <_zbar_decode_ean+0xcfa>
                _zbar_decoder_buf_dump((void*)ean->buf, 18));
        chk += d;
  403c8e:	4435      	add	r5, r6
  403c90:	b2ed      	uxtb	r5, r5
        if((i ^ n) & 1) {
  403c92:	f013 0f01 	tst.w	r3, #1
  403c96:	d007      	beq.n	403ca8 <_zbar_decode_ean+0xb50>
            chk += d << 1;
  403c98:	eb05 0546 	add.w	r5, r5, r6, lsl #1
  403c9c:	f005 05ff 	and.w	r5, r5, #255	; 0xff
            if(chk >= 20)
  403ca0:	2d13      	cmp	r5, #19
                chk -= 20;
  403ca2:	bf84      	itt	hi
  403ca4:	3d14      	subhi	r5, #20
  403ca6:	b2ed      	uxtbhi	r5, r5
        }
        if(chk >= 10)
  403ca8:	2d09      	cmp	r5, #9
            chk -= 10;
  403caa:	bf84      	itt	hi
  403cac:	3d0a      	subhi	r5, #10
  403cae:	b2ed      	uxtbhi	r5, r5
static inline signed char ean_verify_checksum (ean_decoder_t *ean,
                                               int n)
{
    unsigned char chk = 0;
    unsigned char i, d;
    for(i = 0; i < n; i++) {
  403cb0:	3301      	adds	r3, #1
  403cb2:	b2db      	uxtb	r3, r3
  403cb4:	461f      	mov	r7, r3
  403cb6:	2b0b      	cmp	r3, #11
  403cb8:	ddc7      	ble.n	403c4a <_zbar_decode_ean+0xaf2>
                chk -= 20;
        }
        if(chk >= 10)
            chk -= 10;
    }
    zassert(chk < 10, -1, "chk=%x n=%x %s", chk, n,
  403cba:	2d09      	cmp	r5, #9
  403cbc:	d92c      	bls.n	403d18 <_zbar_decode_ean+0xbc0>
  403cbe:	4b0d      	ldr	r3, [pc, #52]	; (403cf4 <_zbar_decode_ean+0xb9c>)
  403cc0:	681b      	ldr	r3, [r3, #0]
  403cc2:	68dc      	ldr	r4, [r3, #12]
  403cc4:	f109 00b8 	add.w	r0, r9, #184	; 0xb8
  403cc8:	2112      	movs	r1, #18
  403cca:	4b0b      	ldr	r3, [pc, #44]	; (403cf8 <_zbar_decode_ean+0xba0>)
  403ccc:	4798      	blx	r3
  403cce:	4b0b      	ldr	r3, [pc, #44]	; (403cfc <_zbar_decode_ean+0xba4>)
  403cd0:	9300      	str	r3, [sp, #0]
  403cd2:	4b0f      	ldr	r3, [pc, #60]	; (403d10 <_zbar_decode_ean+0xbb8>)
  403cd4:	9301      	str	r3, [sp, #4]
  403cd6:	9502      	str	r5, [sp, #8]
  403cd8:	230c      	movs	r3, #12
  403cda:	9303      	str	r3, [sp, #12]
  403cdc:	9004      	str	r0, [sp, #16]
  403cde:	4620      	mov	r0, r4
  403ce0:	490c      	ldr	r1, [pc, #48]	; (403d14 <_zbar_decode_ean+0xbbc>)
  403ce2:	4a09      	ldr	r2, [pc, #36]	; (403d08 <_zbar_decode_ean+0xbb0>)
  403ce4:	f240 2315 	movw	r3, #533	; 0x215
  403ce8:	4c08      	ldr	r4, [pc, #32]	; (403d0c <_zbar_decode_ean+0xbb4>)
  403cea:	47a0      	blx	r4
  403cec:	e0b1      	b.n	403e52 <_zbar_decode_ean+0xcfa>
  403cee:	bf00      	nop
  403cf0:	0040f520 	.word	0x0040f520
  403cf4:	20000440 	.word	0x20000440
  403cf8:	004030ad 	.word	0x004030ad
  403cfc:	0040f6ec 	.word	0x0040f6ec
  403d00:	0040f5fc 	.word	0x0040f5fc
  403d04:	0040f5b8 	.word	0x0040f5b8
  403d08:	0040f588 	.word	0x0040f588
  403d0c:	004066d1 	.word	0x004066d1
  403d10:	0040f640 	.word	0x0040f640
  403d14:	0040f604 	.word	0x0040f604
            _zbar_decoder_buf_dump((void*)ean->buf, 18));
    if(chk)
  403d18:	b115      	cbz	r5, 403d20 <_zbar_decode_ean+0xbc8>
        chk = 10 - chk;
  403d1a:	f1c5 050a 	rsb	r5, r5, #10
  403d1e:	b2ed      	uxtb	r5, r5
    d = ean->buf[n];
  403d20:	f899 60c4 	ldrb.w	r6, [r9, #196]	; 0xc4
    zassert(d < 10, -1, "n=%x d=%x chk=%x %s\n", n, d, chk,
  403d24:	2e09      	cmp	r6, #9
  403d26:	d918      	bls.n	403d5a <_zbar_decode_ean+0xc02>
  403d28:	4baf      	ldr	r3, [pc, #700]	; (403fe8 <_zbar_decode_ean+0xe90>)
  403d2a:	681b      	ldr	r3, [r3, #0]
  403d2c:	68dc      	ldr	r4, [r3, #12]
  403d2e:	f109 00b8 	add.w	r0, r9, #184	; 0xb8
  403d32:	2112      	movs	r1, #18
  403d34:	4bad      	ldr	r3, [pc, #692]	; (403fec <_zbar_decode_ean+0xe94>)
  403d36:	4798      	blx	r3
  403d38:	4bad      	ldr	r3, [pc, #692]	; (403ff0 <_zbar_decode_ean+0xe98>)
  403d3a:	9300      	str	r3, [sp, #0]
  403d3c:	4bad      	ldr	r3, [pc, #692]	; (403ff4 <_zbar_decode_ean+0xe9c>)
  403d3e:	9301      	str	r3, [sp, #4]
  403d40:	230c      	movs	r3, #12
  403d42:	9302      	str	r3, [sp, #8]
  403d44:	9603      	str	r6, [sp, #12]
  403d46:	9504      	str	r5, [sp, #16]
  403d48:	9005      	str	r0, [sp, #20]
  403d4a:	4620      	mov	r0, r4
  403d4c:	49aa      	ldr	r1, [pc, #680]	; (403ff8 <_zbar_decode_ean+0xea0>)
  403d4e:	4aab      	ldr	r2, [pc, #684]	; (403ffc <_zbar_decode_ean+0xea4>)
  403d50:	f240 231a 	movw	r3, #538	; 0x21a
  403d54:	4caa      	ldr	r4, [pc, #680]	; (404000 <_zbar_decode_ean+0xea8>)
  403d56:	47a0      	blx	r4
  403d58:	e07b      	b.n	403e52 <_zbar_decode_ean+0xcfa>

    if(!part)
        part = ZBAR_PARTIAL;

    if(((part == ZBAR_EAN13 ||
         part == ZBAR_UPCE) && ean_verify_checksum(ean, 12)) ||
  403d5a:	42ae      	cmp	r6, r5
  403d5c:	f000 8280 	beq.w	404260 <_zbar_decode_ean+0x1108>
  403d60:	e077      	b.n	403e52 <_zbar_decode_ean+0xcfa>
                                               int n)
{
    unsigned char chk = 0;
    unsigned char i, d;
    for(i = 0; i < n; i++) {
        unsigned char d = ean->buf[i];
  403d62:	eb09 0203 	add.w	r2, r9, r3
  403d66:	f892 50b8 	ldrb.w	r5, [r2, #184]	; 0xb8
        zassert(d < 10, -1, "i=%x d=%x chk=%x %s\n", i, d, chk,
  403d6a:	2d09      	cmp	r5, #9
  403d6c:	d91c      	bls.n	403da8 <_zbar_decode_ean+0xc50>
  403d6e:	e001      	b.n	403d74 <_zbar_decode_ean+0xc1c>
  403d70:	2400      	movs	r4, #0
static inline signed char ean_verify_checksum (ean_decoder_t *ean,
                                               int n)
{
    unsigned char chk = 0;
    unsigned char i, d;
    for(i = 0; i < n; i++) {
  403d72:	4626      	mov	r6, r4
        unsigned char d = ean->buf[i];
        zassert(d < 10, -1, "i=%x d=%x chk=%x %s\n", i, d, chk,
  403d74:	4b9c      	ldr	r3, [pc, #624]	; (403fe8 <_zbar_decode_ean+0xe90>)
  403d76:	681b      	ldr	r3, [r3, #0]
  403d78:	68df      	ldr	r7, [r3, #12]
  403d7a:	f109 00b8 	add.w	r0, r9, #184	; 0xb8
  403d7e:	2112      	movs	r1, #18
  403d80:	4b9a      	ldr	r3, [pc, #616]	; (403fec <_zbar_decode_ean+0xe94>)
  403d82:	4798      	blx	r3
  403d84:	4b9a      	ldr	r3, [pc, #616]	; (403ff0 <_zbar_decode_ean+0xe98>)
  403d86:	9300      	str	r3, [sp, #0]
  403d88:	4b9a      	ldr	r3, [pc, #616]	; (403ff4 <_zbar_decode_ean+0xe9c>)
  403d8a:	9301      	str	r3, [sp, #4]
  403d8c:	9602      	str	r6, [sp, #8]
  403d8e:	9503      	str	r5, [sp, #12]
  403d90:	9404      	str	r4, [sp, #16]
  403d92:	9005      	str	r0, [sp, #20]
  403d94:	4638      	mov	r0, r7
  403d96:	499b      	ldr	r1, [pc, #620]	; (404004 <_zbar_decode_ean+0xeac>)
  403d98:	4a98      	ldr	r2, [pc, #608]	; (403ffc <_zbar_decode_ean+0xea4>)
  403d9a:	f240 230a 	movw	r3, #522	; 0x20a
  403d9e:	4c98      	ldr	r4, [pc, #608]	; (404000 <_zbar_decode_ean+0xea8>)
  403da0:	47a0      	blx	r4
  403da2:	e056      	b.n	403e52 <_zbar_decode_ean+0xcfa>
static inline signed char ean_verify_checksum (ean_decoder_t *ean,
                                               int n)
{
    unsigned char chk = 0;
    unsigned char i, d;
    for(i = 0; i < n; i++) {
  403da4:	2300      	movs	r3, #0
  403da6:	461c      	mov	r4, r3
        unsigned char d = ean->buf[i];
        zassert(d < 10, -1, "i=%x d=%x chk=%x %s\n", i, d, chk,
                _zbar_decoder_buf_dump((void*)ean->buf, 18));
        chk += d;
  403da8:	442c      	add	r4, r5
  403daa:	b2e4      	uxtb	r4, r4
        if((i ^ n) & 1) {
  403dac:	f013 0f01 	tst.w	r3, #1
  403db0:	d106      	bne.n	403dc0 <_zbar_decode_ean+0xc68>
            chk += d << 1;
  403db2:	eb04 0445 	add.w	r4, r4, r5, lsl #1
  403db6:	b2e4      	uxtb	r4, r4
            if(chk >= 20)
  403db8:	2c13      	cmp	r4, #19
                chk -= 20;
  403dba:	bf84      	itt	hi
  403dbc:	3c14      	subhi	r4, #20
  403dbe:	b2e4      	uxtbhi	r4, r4
        }
        if(chk >= 10)
  403dc0:	2c09      	cmp	r4, #9
            chk -= 10;
  403dc2:	bf84      	itt	hi
  403dc4:	3c0a      	subhi	r4, #10
  403dc6:	b2e4      	uxtbhi	r4, r4
static inline signed char ean_verify_checksum (ean_decoder_t *ean,
                                               int n)
{
    unsigned char chk = 0;
    unsigned char i, d;
    for(i = 0; i < n; i++) {
  403dc8:	3301      	adds	r3, #1
  403dca:	b2db      	uxtb	r3, r3
  403dcc:	461e      	mov	r6, r3
  403dce:	2b06      	cmp	r3, #6
  403dd0:	ddc7      	ble.n	403d62 <_zbar_decode_ean+0xc0a>
                chk -= 20;
        }
        if(chk >= 10)
            chk -= 10;
    }
    zassert(chk < 10, -1, "chk=%x n=%x %s", chk, n,
  403dd2:	2c09      	cmp	r4, #9
  403dd4:	d917      	bls.n	403e06 <_zbar_decode_ean+0xcae>
  403dd6:	4b84      	ldr	r3, [pc, #528]	; (403fe8 <_zbar_decode_ean+0xe90>)
  403dd8:	681b      	ldr	r3, [r3, #0]
  403dda:	68dd      	ldr	r5, [r3, #12]
  403ddc:	f109 00b8 	add.w	r0, r9, #184	; 0xb8
  403de0:	2112      	movs	r1, #18
  403de2:	4b82      	ldr	r3, [pc, #520]	; (403fec <_zbar_decode_ean+0xe94>)
  403de4:	4798      	blx	r3
  403de6:	4b82      	ldr	r3, [pc, #520]	; (403ff0 <_zbar_decode_ean+0xe98>)
  403de8:	9300      	str	r3, [sp, #0]
  403dea:	4b87      	ldr	r3, [pc, #540]	; (404008 <_zbar_decode_ean+0xeb0>)
  403dec:	9301      	str	r3, [sp, #4]
  403dee:	9402      	str	r4, [sp, #8]
  403df0:	2307      	movs	r3, #7
  403df2:	9303      	str	r3, [sp, #12]
  403df4:	9004      	str	r0, [sp, #16]
  403df6:	4628      	mov	r0, r5
  403df8:	4984      	ldr	r1, [pc, #528]	; (40400c <_zbar_decode_ean+0xeb4>)
  403dfa:	4a80      	ldr	r2, [pc, #512]	; (403ffc <_zbar_decode_ean+0xea4>)
  403dfc:	f240 2315 	movw	r3, #533	; 0x215
  403e00:	4c7f      	ldr	r4, [pc, #508]	; (404000 <_zbar_decode_ean+0xea8>)
  403e02:	47a0      	blx	r4
  403e04:	e025      	b.n	403e52 <_zbar_decode_ean+0xcfa>
            _zbar_decoder_buf_dump((void*)ean->buf, 18));
    if(chk)
  403e06:	b114      	cbz	r4, 403e0e <_zbar_decode_ean+0xcb6>
        chk = 10 - chk;
  403e08:	f1c4 040a 	rsb	r4, r4, #10
  403e0c:	b2e4      	uxtb	r4, r4
    d = ean->buf[n];
  403e0e:	f899 50bf 	ldrb.w	r5, [r9, #191]	; 0xbf
    zassert(d < 10, -1, "n=%x d=%x chk=%x %s\n", n, d, chk,
  403e12:	2d09      	cmp	r5, #9
  403e14:	d918      	bls.n	403e48 <_zbar_decode_ean+0xcf0>
  403e16:	4b74      	ldr	r3, [pc, #464]	; (403fe8 <_zbar_decode_ean+0xe90>)
  403e18:	681b      	ldr	r3, [r3, #0]
  403e1a:	68de      	ldr	r6, [r3, #12]
  403e1c:	f109 00b8 	add.w	r0, r9, #184	; 0xb8
  403e20:	2112      	movs	r1, #18
  403e22:	4b72      	ldr	r3, [pc, #456]	; (403fec <_zbar_decode_ean+0xe94>)
  403e24:	4798      	blx	r3
  403e26:	4b72      	ldr	r3, [pc, #456]	; (403ff0 <_zbar_decode_ean+0xe98>)
  403e28:	9300      	str	r3, [sp, #0]
  403e2a:	4b72      	ldr	r3, [pc, #456]	; (403ff4 <_zbar_decode_ean+0xe9c>)
  403e2c:	9301      	str	r3, [sp, #4]
  403e2e:	2307      	movs	r3, #7
  403e30:	9302      	str	r3, [sp, #8]
  403e32:	9503      	str	r5, [sp, #12]
  403e34:	9404      	str	r4, [sp, #16]
  403e36:	9005      	str	r0, [sp, #20]
  403e38:	4630      	mov	r0, r6
  403e3a:	496f      	ldr	r1, [pc, #444]	; (403ff8 <_zbar_decode_ean+0xea0>)
  403e3c:	4a6f      	ldr	r2, [pc, #444]	; (403ffc <_zbar_decode_ean+0xea4>)
  403e3e:	f240 231a 	movw	r3, #538	; 0x21a
  403e42:	4c6f      	ldr	r4, [pc, #444]	; (404000 <_zbar_decode_ean+0xea8>)
  403e44:	47a0      	blx	r4
  403e46:	e004      	b.n	403e52 <_zbar_decode_ean+0xcfa>
    if(!part)
        part = ZBAR_PARTIAL;

    if(((part == ZBAR_EAN13 ||
         part == ZBAR_UPCE) && ean_verify_checksum(ean, 12)) ||
       (part == ZBAR_EAN8 && ean_verify_checksum(ean, 7))) {
  403e48:	42a5      	cmp	r5, r4
  403e4a:	bf08      	it	eq
  403e4c:	f04f 0b08 	moveq.w	fp, #8
  403e50:	d067      	beq.n	403f22 <_zbar_decode_ean+0xdca>
        /* invalid checksum */
        if(ean->right)
  403e52:	f8b9 30aa 	ldrh.w	r3, [r9, #170]	; 0xaa
  403e56:	2b00      	cmp	r3, #0
  403e58:	f000 81d1 	beq.w	4041fe <_zbar_decode_ean+0x10a6>
	  ean->left = ZBAR_NONE;
  403e5c:	f04f 0b00 	mov.w	fp, #0
  403e60:	f8a9 b0a8 	strh.w	fp, [r9, #168]	; 0xa8
  403e64:	e05d      	b.n	403f22 <_zbar_decode_ean+0xdca>
        else
	  ean->right = ZBAR_NONE;
        part = ZBAR_NONE;
    }

    if(part == ZBAR_EAN13) {
  403e66:	f1bb 0f0d 	cmp.w	fp, #13
  403e6a:	d127      	bne.n	403ebc <_zbar_decode_ean+0xd64>
        /* special case EAN-13 subsets */
        if(!ean->buf[0] && TEST_CFG(ean->upca_config, ZBAR_CFG_ENABLE))
  403e6c:	f999 30b8 	ldrsb.w	r3, [r9, #184]	; 0xb8
  403e70:	b92b      	cbnz	r3, 403e7e <_zbar_decode_ean+0xd26>
  403e72:	f8d9 30d4 	ldr.w	r3, [r9, #212]	; 0xd4
  403e76:	f013 0f01 	tst.w	r3, #1
  403e7a:	f040 81c3 	bne.w	404204 <_zbar_decode_ean+0x10ac>
            part = ZBAR_UPCA;
        else if(ean->buf[0] == 9 && ean->buf[1] == 7) {
  403e7e:	f9b9 20b8 	ldrsh.w	r2, [r9, #184]	; 0xb8
  403e82:	f240 7309 	movw	r3, #1801	; 0x709
  403e86:	429a      	cmp	r2, r3
  403e88:	d14f      	bne.n	403f2a <_zbar_decode_ean+0xdd2>
            /* ISBN-10 has priority over ISBN-13(?) */
            if(ean->buf[2] == 8 &&
  403e8a:	f899 30ba 	ldrb.w	r3, [r9, #186]	; 0xba
  403e8e:	b25a      	sxtb	r2, r3
  403e90:	2a08      	cmp	r2, #8
  403e92:	d106      	bne.n	403ea2 <_zbar_decode_ean+0xd4a>
               TEST_CFG(ean->isbn10_config, ZBAR_CFG_ENABLE))
  403e94:	f8d9 30dc 	ldr.w	r3, [r9, #220]	; 0xdc
        /* special case EAN-13 subsets */
        if(!ean->buf[0] && TEST_CFG(ean->upca_config, ZBAR_CFG_ENABLE))
            part = ZBAR_UPCA;
        else if(ean->buf[0] == 9 && ean->buf[1] == 7) {
            /* ISBN-10 has priority over ISBN-13(?) */
            if(ean->buf[2] == 8 &&
  403e98:	f013 0f01 	tst.w	r3, #1
  403e9c:	f040 81b5 	bne.w	40420a <_zbar_decode_ean+0x10b2>
  403ea0:	e003      	b.n	403eaa <_zbar_decode_ean+0xd52>
               TEST_CFG(ean->isbn10_config, ZBAR_CFG_ENABLE))
                part = ZBAR_ISBN10;
            else if((ean->buf[2] == 8 || ean->buf[2] == 9) &&
  403ea2:	3b08      	subs	r3, #8
  403ea4:	b2db      	uxtb	r3, r3
  403ea6:	2b01      	cmp	r3, #1
  403ea8:	d83f      	bhi.n	403f2a <_zbar_decode_ean+0xdd2>
               TEST_CFG(ean->isbn13_config, ZBAR_CFG_ENABLE))
  403eaa:	f8d9 30e0 	ldr.w	r3, [r9, #224]	; 0xe0
  403eae:	f003 0301 	and.w	r3, r3, #1
                part = ZBAR_ISBN13;
  403eb2:	2b00      	cmp	r3, #0
  403eb4:	bf18      	it	ne
  403eb6:	f04f 0b0e 	movne.w	fp, #14
  403eba:	e036      	b.n	403f2a <_zbar_decode_ean+0xdd2>
        }
    }
    else if(part == ZBAR_UPCE) {
  403ebc:	f1bb 0f09 	cmp.w	fp, #9
  403ec0:	d12f      	bne.n	403f22 <_zbar_decode_ean+0xdca>
        if(TEST_CFG(ean->upce_config, ZBAR_CFG_ENABLE)) {
  403ec2:	f8d9 30d8 	ldr.w	r3, [r9, #216]	; 0xd8
  403ec6:	f013 0f01 	tst.w	r3, #1
  403eca:	d019      	beq.n	403f00 <_zbar_decode_ean+0xda8>
            /* UPC-E was decompressed for checksum verification,
             * but user requested compressed result
             */
            ean->buf[0] = ean->buf[1] = 0;
  403ecc:	2300      	movs	r3, #0
  403ece:	f889 30b9 	strb.w	r3, [r9, #185]	; 0xb9
  403ed2:	f889 30b8 	strb.w	r3, [r9, #184]	; 0xb8
  403ed6:	f10a 0170 	add.w	r1, sl, #112	; 0x70
  403eda:	f109 02b9 	add.w	r2, r9, #185	; 0xb9
  403ede:	f109 00bf 	add.w	r0, r9, #191	; 0xbf
            for(i = 2; i < 8; i++)
                ean->buf[i] = pass->raw[i - 1] & 0xf;
  403ee2:	f811 3f01 	ldrb.w	r3, [r1, #1]!
  403ee6:	f003 030f 	and.w	r3, r3, #15
  403eea:	f802 3f01 	strb.w	r3, [r2, #1]!
        if(TEST_CFG(ean->upce_config, ZBAR_CFG_ENABLE)) {
            /* UPC-E was decompressed for checksum verification,
             * but user requested compressed result
             */
            ean->buf[0] = ean->buf[1] = 0;
            for(i = 2; i < 8; i++)
  403eee:	4282      	cmp	r2, r0
  403ef0:	d1f7      	bne.n	403ee2 <_zbar_decode_ean+0xd8a>
                ean->buf[i] = pass->raw[i - 1] & 0xf;
            ean->buf[i] = pass->raw[0] & 0xf;
  403ef2:	f894 3070 	ldrb.w	r3, [r4, #112]	; 0x70
  403ef6:	f003 030f 	and.w	r3, r3, #15
  403efa:	f889 30c0 	strb.w	r3, [r9, #192]	; 0xc0
  403efe:	e014      	b.n	403f2a <_zbar_decode_ean+0xdd2>
        }
        else if(TEST_CFG(ean->upca_config, ZBAR_CFG_ENABLE))
  403f00:	f8d9 30d4 	ldr.w	r3, [r9, #212]	; 0xd4
  403f04:	f013 0f01 	tst.w	r3, #1
  403f08:	f040 8182 	bne.w	404210 <_zbar_decode_ean+0x10b8>
            /* UPC-E reported as UPC-A has priority over EAN-13 */
            part = ZBAR_UPCA;
        else if(TEST_CFG(ean->ean13_config, ZBAR_CFG_ENABLE))
  403f0c:	f8d9 30cc 	ldr.w	r3, [r9, #204]	; 0xcc
  403f10:	f013 0f01 	tst.w	r3, #1
  403f14:	f040 817f 	bne.w	404216 <_zbar_decode_ean+0x10be>
            dbprintf(2, "      ean[%x/%x]: idx=%x st=%d s=%d",
                     i, pass_idx, dcode->idx, pass->state, dcode->ean.s4);
            part = decode_pass(dcode, pass);
            if(part) {
                /* update accumulated data from new partial decode */
                sym = integrate_partial(&dcode->ean, pass, part);
  403f18:	f04f 0b00 	mov.w	fp, #0
  403f1c:	e107      	b.n	40412e <_zbar_decode_ean+0xfd6>
        ean_expand_upce(ean, pass);

    ean->width = pass->width;

    if(!part)
        part = ZBAR_PARTIAL;
  403f1e:	f04f 0b01 	mov.w	fp, #1
                     i, pass_idx, dcode->idx, pass->state, dcode->ean.s4);
            part = decode_pass(dcode, pass);
            if(part) {
                /* update accumulated data from new partial decode */
                sym = integrate_partial(&dcode->ean, pass, part);
                if(sym) {
  403f22:	f1bb 0f00 	cmp.w	fp, #0
  403f26:	f000 8102 	beq.w	40412e <_zbar_decode_ean+0xfd6>
                    /* this pass valid => _reset_ all passes */
                    dbprintf(2, " sym=%x", sym);
                    dcode->ean.pass[0].state = dcode->ean.pass[1].state = -1;
  403f2a:	23ff      	movs	r3, #255	; 0xff
  403f2c:	f889 3078 	strb.w	r3, [r9, #120]	; 0x78
  403f30:	f889 3068 	strb.w	r3, [r9, #104]	; 0x68
                    dcode->ean.pass[2].state = dcode->ean.pass[3].state = -1;
  403f34:	f889 3098 	strb.w	r3, [r9, #152]	; 0x98
  403f38:	f889 3088 	strb.w	r3, [r9, #136]	; 0x88
                    if(sym > ZBAR_PARTIAL) {
  403f3c:	f1bb 0f01 	cmp.w	fp, #1
  403f40:	f240 80f5 	bls.w	40412e <_zbar_decode_ean+0xfd6>

/* acquire shared state lock */
static inline char acquire_lock (zbar_decoder_t *dcode,
                                 zbar_symbol_type_t req)
{
    if(dcode->lock) {
  403f44:	f8b9 3046 	ldrh.w	r3, [r9, #70]	; 0x46
  403f48:	2b00      	cmp	r3, #0
  403f4a:	f040 80ee 	bne.w	40412a <_zbar_decode_ean+0xfd2>
        dbprintf(2, " [locked %d]\n", dcode->lock);
        return(1);
    }
    dcode->lock = req;
  403f4e:	f8a9 b046 	strh.w	fp, [r9, #70]	; 0x46
{
    ean_decoder_t *ean = &dcode->ean;
    zbar_symbol_type_t base = sym;
    int i = 0, j = 0;
    if(base > ZBAR_PARTIAL) {
        if(base == ZBAR_UPCA)
  403f52:	f1bb 0f0c 	cmp.w	fp, #12
  403f56:	d033      	beq.n	403fc0 <_zbar_decode_ean+0xe68>
            i = 1;
        else if(base == ZBAR_UPCE) {
  403f58:	f1bb 0f09 	cmp.w	fp, #9
  403f5c:	d023      	beq.n	403fa6 <_zbar_decode_ean+0xe4e>
            i = 1;
            base--;
        }
        else if(base == ZBAR_ISBN13)
  403f5e:	f1bb 0f0e 	cmp.w	fp, #14
  403f62:	d039      	beq.n	403fd8 <_zbar_decode_ean+0xe80>
            base = ZBAR_EAN13;
        else if(base == ZBAR_ISBN10)
  403f64:	f1bb 0f0a 	cmp.w	fp, #10
  403f68:	f040 8158 	bne.w	40421c <_zbar_decode_ean+0x10c4>
  403f6c:	e057      	b.n	40401e <_zbar_decode_ean+0xec6>
}

static inline unsigned ean_get_config (ean_decoder_t *ean,
                                       zbar_symbol_type_t sym)
{
    switch(sym) {
  403f6e:	f1ab 0302 	sub.w	r3, fp, #2
  403f72:	2b0c      	cmp	r3, #12
  403f74:	d84c      	bhi.n	404010 <_zbar_decode_ean+0xeb8>
  403f76:	e8df f003 	tbb	[pc, r3]
  403f7a:	4b07      	.short	0x4b07
  403f7c:	4b4b0c4b 	.word	0x4b4b0c4b
  403f80:	4b1e1911 	.word	0x4b1e1911
  403f84:	2a25      	.short	0x2a25
  403f86:	31          	.byte	0x31
  403f87:	00          	.byte	0x00
    case ZBAR_EAN2:   return(ean->ean2_config);
  403f88:	f8d9 10e8 	ldr.w	r1, [r9, #232]	; 0xe8
  403f8c:	465b      	mov	r3, fp
static inline void postprocess (zbar_decoder_t *dcode,
                                zbar_symbol_type_t sym)
{
    ean_decoder_t *ean = &dcode->ean;
    zbar_symbol_type_t base = sym;
    int i = 0, j = 0;
  403f8e:	2200      	movs	r2, #0
  403f90:	e15e      	b.n	404250 <_zbar_decode_ean+0x10f8>
    case ZBAR_EAN5:   return(ean->ean5_config);
  403f92:	f8d9 10e4 	ldr.w	r1, [r9, #228]	; 0xe4
  403f96:	465b      	mov	r3, fp
  403f98:	2200      	movs	r2, #0
  403f9a:	e159      	b.n	404250 <_zbar_decode_ean+0x10f8>
    case ZBAR_EAN8:   return(ean->ean8_config);
  403f9c:	f8d9 10d0 	ldr.w	r1, [r9, #208]	; 0xd0
  403fa0:	465b      	mov	r3, fp
  403fa2:	2200      	movs	r2, #0
  403fa4:	e154      	b.n	404250 <_zbar_decode_ean+0x10f8>
    if(base > ZBAR_PARTIAL) {
        if(base == ZBAR_UPCA)
            i = 1;
        else if(base == ZBAR_UPCE) {
            i = 1;
  403fa6:	2201      	movs	r2, #1
            base--;
  403fa8:	2308      	movs	r3, #8
  403faa:	e001      	b.n	403fb0 <_zbar_decode_ean+0xe58>
}

static inline unsigned ean_get_config (ean_decoder_t *ean,
                                       zbar_symbol_type_t sym)
{
    switch(sym) {
  403fac:	465b      	mov	r3, fp
static inline void postprocess (zbar_decoder_t *dcode,
                                zbar_symbol_type_t sym)
{
    ean_decoder_t *ean = &dcode->ean;
    zbar_symbol_type_t base = sym;
    int i = 0, j = 0;
  403fae:	2200      	movs	r2, #0
    case ZBAR_EAN2:   return(ean->ean2_config);
    case ZBAR_EAN5:   return(ean->ean5_config);
    case ZBAR_EAN8:   return(ean->ean8_config);
    case ZBAR_UPCE:   return(ean->upce_config);
  403fb0:	f8d9 10d8 	ldr.w	r1, [r9, #216]	; 0xd8
  403fb4:	e02f      	b.n	404016 <_zbar_decode_ean+0xebe>
    case ZBAR_ISBN10: return(ean->isbn10_config);
  403fb6:	f8d9 10dc 	ldr.w	r1, [r9, #220]	; 0xdc
  403fba:	465b      	mov	r3, fp
  403fbc:	2200      	movs	r2, #0
  403fbe:	e147      	b.n	404250 <_zbar_decode_ean+0x10f8>
    if(base > ZBAR_PARTIAL) {
        if(base == ZBAR_UPCA)
            i = 1;
  403fc0:	2201      	movs	r2, #1
  403fc2:	e000      	b.n	403fc6 <_zbar_decode_ean+0xe6e>
static inline void postprocess (zbar_decoder_t *dcode,
                                zbar_symbol_type_t sym)
{
    ean_decoder_t *ean = &dcode->ean;
    zbar_symbol_type_t base = sym;
    int i = 0, j = 0;
  403fc4:	2200      	movs	r2, #0
    case ZBAR_UPCA:   return(ean->upca_config);
  403fc6:	f8d9 10d4 	ldr.w	r1, [r9, #212]	; 0xd4
  403fca:	230c      	movs	r3, #12
  403fcc:	e140      	b.n	404250 <_zbar_decode_ean+0x10f8>
    case ZBAR_EAN13:  return(ean->ean13_config);
  403fce:	f8d9 10cc 	ldr.w	r1, [r9, #204]	; 0xcc
  403fd2:	465b      	mov	r3, fp
  403fd4:	2200      	movs	r2, #0
  403fd6:	e13b      	b.n	404250 <_zbar_decode_ean+0x10f8>
        else if(base == ZBAR_UPCE) {
            i = 1;
            base--;
        }
        else if(base == ZBAR_ISBN13)
            base = ZBAR_EAN13;
  403fd8:	230d      	movs	r3, #13
  403fda:	e000      	b.n	403fde <_zbar_decode_ean+0xe86>
}

static inline unsigned ean_get_config (ean_decoder_t *ean,
                                       zbar_symbol_type_t sym)
{
    switch(sym) {
  403fdc:	465b      	mov	r3, fp
    case ZBAR_EAN8:   return(ean->ean8_config);
    case ZBAR_UPCE:   return(ean->upce_config);
    case ZBAR_ISBN10: return(ean->isbn10_config);
    case ZBAR_UPCA:   return(ean->upca_config);
    case ZBAR_EAN13:  return(ean->ean13_config);
    case ZBAR_ISBN13: return(ean->isbn13_config);
  403fde:	f8d9 10e0 	ldr.w	r1, [r9, #224]	; 0xe0
  403fe2:	2200      	movs	r2, #0
  403fe4:	e017      	b.n	404016 <_zbar_decode_ean+0xebe>
  403fe6:	bf00      	nop
  403fe8:	20000440 	.word	0x20000440
  403fec:	004030ad 	.word	0x004030ad
  403ff0:	0040f6ec 	.word	0x0040f6ec
  403ff4:	0040f5fc 	.word	0x0040f5fc
  403ff8:	0040f64c 	.word	0x0040f64c
  403ffc:	0040f588 	.word	0x0040f588
  404000:	004066d1 	.word	0x004066d1
  404004:	0040f5b8 	.word	0x0040f5b8
  404008:	0040f640 	.word	0x0040f640
  40400c:	0040f604 	.word	0x0040f604
}

static inline unsigned ean_get_config (ean_decoder_t *ean,
                                       zbar_symbol_type_t sym)
{
    switch(sym) {
  404010:	465b      	mov	r3, fp
static inline void postprocess (zbar_decoder_t *dcode,
                                zbar_symbol_type_t sym)
{
    ean_decoder_t *ean = &dcode->ean;
    zbar_symbol_type_t base = sym;
    int i = 0, j = 0;
  404012:	2200      	movs	r2, #0
    case ZBAR_UPCE:   return(ean->upce_config);
    case ZBAR_ISBN10: return(ean->isbn10_config);
    case ZBAR_UPCA:   return(ean->upca_config);
    case ZBAR_EAN13:  return(ean->ean13_config);
    case ZBAR_ISBN13: return(ean->isbn13_config);
    default:          return(0);
  404014:	4611      	mov	r1, r2
            base = ZBAR_EAN13;
        else if(base == ZBAR_ISBN10)
            i = 3;

        if(base == ZBAR_ISBN10 ||
           (base > ZBAR_EAN5 &&
  404016:	f011 0f04 	tst.w	r1, #4
  40401a:	d104      	bne.n	404026 <_zbar_decode_ean+0xece>
  40401c:	e001      	b.n	404022 <_zbar_decode_ean+0xeca>
/* copy result to output buffer */
static inline void postprocess (zbar_decoder_t *dcode,
                                zbar_symbol_type_t sym)
{
    ean_decoder_t *ean = &dcode->ean;
    zbar_symbol_type_t base = sym;
  40401e:	465b      	mov	r3, fp
            base--;
        }
        else if(base == ZBAR_ISBN13)
            base = ZBAR_EAN13;
        else if(base == ZBAR_ISBN10)
            i = 3;
  404020:	2203      	movs	r2, #3

        if(base == ZBAR_ISBN10 ||
           (base > ZBAR_EAN5 &&
            !TEST_CFG(ean_get_config(ean, sym), ZBAR_CFG_EMIT_CHECK)))
            base--;
  404022:	3b01      	subs	r3, #1
  404024:	b29b      	uxth	r3, r3

        for(; j < base && ean->buf[i] >= 0; i++, j++)
  404026:	461c      	mov	r4, r3
  404028:	2b00      	cmp	r3, #0
  40402a:	dd69      	ble.n	404100 <_zbar_decode_ean+0xfa8>
  40402c:	eb09 0302 	add.w	r3, r9, r2
  404030:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
  404034:	f013 0f80 	tst.w	r3, #128	; 0x80
  404038:	d164      	bne.n	404104 <_zbar_decode_ean+0xfac>
  40403a:	32b8      	adds	r2, #184	; 0xb8
  40403c:	eb09 0002 	add.w	r0, r9, r2
  404040:	2200      	movs	r2, #0
            dcode->buf[j] = ean->buf[i] + '0';
  404042:	f8d9 105c 	ldr.w	r1, [r9, #92]	; 0x5c
  404046:	3330      	adds	r3, #48	; 0x30
  404048:	548b      	strb	r3, [r1, r2]
        if(base == ZBAR_ISBN10 ||
           (base > ZBAR_EAN5 &&
            !TEST_CFG(ean_get_config(ean, sym), ZBAR_CFG_EMIT_CHECK)))
            base--;

        for(; j < base && ean->buf[i] >= 0; i++, j++)
  40404a:	3201      	adds	r2, #1
  40404c:	4294      	cmp	r4, r2
  40404e:	d006      	beq.n	40405e <_zbar_decode_ean+0xf06>
  404050:	f810 3f01 	ldrb.w	r3, [r0, #1]!
  404054:	f013 0f80 	tst.w	r3, #128	; 0x80
  404058:	d0f3      	beq.n	404042 <_zbar_decode_ean+0xeea>
  40405a:	4613      	mov	r3, r2
  40405c:	e000      	b.n	404060 <_zbar_decode_ean+0xf08>
  40405e:	4613      	mov	r3, r2
            dcode->buf[j] = ean->buf[i] + '0';

        if(sym == ZBAR_ISBN10 && j == 9 &&
  404060:	f1bb 0f0a 	cmp.w	fp, #10
  404064:	d151      	bne.n	40410a <_zbar_decode_ean+0xfb2>
  404066:	2b09      	cmp	r3, #9
  404068:	d14f      	bne.n	40410a <_zbar_decode_ean+0xfb2>
  40406a:	f8d9 20dc 	ldr.w	r2, [r9, #220]	; 0xdc
  40406e:	f012 0f04 	tst.w	r2, #4
  404072:	d049      	beq.n	404108 <_zbar_decode_ean+0xfb0>
           TEST_CFG(ean->isbn10_config, ZBAR_CFG_EMIT_CHECK))
            /* recalculate ISBN-10 check digit */
            dcode->buf[j++] = isbn10_calc_checksum(ean);
  404074:	f8d9 705c 	ldr.w	r7, [r9, #92]	; 0x5c
static inline unsigned char isbn10_calc_checksum (ean_decoder_t *ean)
{
    unsigned int chk = 0;
    unsigned char w;
    for(w = 10; w > 1; w--) {
        unsigned char d = ean->buf[13 - w];
  404078:	f899 40bb 	ldrb.w	r4, [r9, #187]	; 0xbb
        zassert(d < 10, '?', "w=%x d=%x chk=%x %s\n", w, d, chk,
  40407c:	2c09      	cmp	r4, #9
  40407e:	f240 80d4 	bls.w	40422a <_zbar_decode_ean+0x10d2>
  404082:	e005      	b.n	404090 <_zbar_decode_ean+0xf38>
static inline unsigned char isbn10_calc_checksum (ean_decoder_t *ean)
{
    unsigned int chk = 0;
    unsigned char w;
    for(w = 10; w > 1; w--) {
        unsigned char d = ean->buf[13 - w];
  404084:	461e      	mov	r6, r3
  404086:	f812 4f01 	ldrb.w	r4, [r2, #1]!
        zassert(d < 10, '?', "w=%x d=%x chk=%x %s\n", w, d, chk,
  40408a:	2c09      	cmp	r4, #9
  40408c:	d91c      	bls.n	4040c8 <_zbar_decode_ean+0xf70>
  40408e:	e001      	b.n	404094 <_zbar_decode_ean+0xf3c>
    return(0);
}

static inline unsigned char isbn10_calc_checksum (ean_decoder_t *ean)
{
    unsigned int chk = 0;
  404090:	2500      	movs	r5, #0
    unsigned char w;
    for(w = 10; w > 1; w--) {
        unsigned char d = ean->buf[13 - w];
  404092:	260a      	movs	r6, #10
        zassert(d < 10, '?', "w=%x d=%x chk=%x %s\n", w, d, chk,
  404094:	4b77      	ldr	r3, [pc, #476]	; (404274 <_zbar_decode_ean+0x111c>)
  404096:	681b      	ldr	r3, [r3, #0]
  404098:	68db      	ldr	r3, [r3, #12]
  40409a:	9309      	str	r3, [sp, #36]	; 0x24
  40409c:	f109 00b8 	add.w	r0, r9, #184	; 0xb8
  4040a0:	2112      	movs	r1, #18
  4040a2:	4b75      	ldr	r3, [pc, #468]	; (404278 <_zbar_decode_ean+0x1120>)
  4040a4:	4798      	blx	r3
  4040a6:	4b75      	ldr	r3, [pc, #468]	; (40427c <_zbar_decode_ean+0x1124>)
  4040a8:	9300      	str	r3, [sp, #0]
  4040aa:	4b75      	ldr	r3, [pc, #468]	; (404280 <_zbar_decode_ean+0x1128>)
  4040ac:	9301      	str	r3, [sp, #4]
  4040ae:	9602      	str	r6, [sp, #8]
  4040b0:	9403      	str	r4, [sp, #12]
  4040b2:	9504      	str	r5, [sp, #16]
  4040b4:	9005      	str	r0, [sp, #20]
  4040b6:	9809      	ldr	r0, [sp, #36]	; 0x24
  4040b8:	4972      	ldr	r1, [pc, #456]	; (404284 <_zbar_decode_ean+0x112c>)
  4040ba:	4a73      	ldr	r2, [pc, #460]	; (404288 <_zbar_decode_ean+0x1130>)
  4040bc:	f240 232a 	movw	r3, #554	; 0x22a
  4040c0:	4c72      	ldr	r4, [pc, #456]	; (40428c <_zbar_decode_ean+0x1134>)
  4040c2:	47a0      	blx	r4
  4040c4:	233f      	movs	r3, #63	; 0x3f
  4040c6:	e018      	b.n	4040fa <_zbar_decode_ean+0xfa2>
                _zbar_decoder_buf_dump((void*)ean->buf, 18));
        chk += d * w;
  4040c8:	fb04 5503 	mla	r5, r4, r3, r5
  4040cc:	3b01      	subs	r3, #1

static inline unsigned char isbn10_calc_checksum (ean_decoder_t *ean)
{
    unsigned int chk = 0;
    unsigned char w;
    for(w = 10; w > 1; w--) {
  4040ce:	428a      	cmp	r2, r1
  4040d0:	d1d8      	bne.n	404084 <_zbar_decode_ean+0xf2c>
        unsigned char d = ean->buf[13 - w];
        zassert(d < 10, '?', "w=%x d=%x chk=%x %s\n", w, d, chk,
                _zbar_decoder_buf_dump((void*)ean->buf, 18));
        chk += d * w;
    }
    chk = chk % 11;
  4040d2:	4b6f      	ldr	r3, [pc, #444]	; (404290 <_zbar_decode_ean+0x1138>)
  4040d4:	fba3 2305 	umull	r2, r3, r3, r5
  4040d8:	08db      	lsrs	r3, r3, #3
  4040da:	eb03 0283 	add.w	r2, r3, r3, lsl #2
  4040de:	eb03 0342 	add.w	r3, r3, r2, lsl #1
    if(!chk)
  4040e2:	1aeb      	subs	r3, r5, r3
  4040e4:	d006      	beq.n	4040f4 <_zbar_decode_ean+0xf9c>
        return('0');
    chk = 11 - chk;
  4040e6:	f1c3 030b 	rsb	r3, r3, #11
    if(chk < 10)
  4040ea:	2b09      	cmp	r3, #9
  4040ec:	d804      	bhi.n	4040f8 <_zbar_decode_ean+0xfa0>
        return(chk + '0');
  4040ee:	3330      	adds	r3, #48	; 0x30
  4040f0:	b2db      	uxtb	r3, r3
  4040f2:	e002      	b.n	4040fa <_zbar_decode_ean+0xfa2>
                _zbar_decoder_buf_dump((void*)ean->buf, 18));
        chk += d * w;
    }
    chk = chk % 11;
    if(!chk)
        return('0');
  4040f4:	2330      	movs	r3, #48	; 0x30
  4040f6:	e000      	b.n	4040fa <_zbar_decode_ean+0xfa2>
    chk = 11 - chk;
    if(chk < 10)
        return(chk + '0');
    return('X');
  4040f8:	2358      	movs	r3, #88	; 0x58
            dcode->buf[j] = ean->buf[i] + '0';

        if(sym == ZBAR_ISBN10 && j == 9 &&
           TEST_CFG(ean->isbn10_config, ZBAR_CFG_EMIT_CHECK))
            /* recalculate ISBN-10 check digit */
            dcode->buf[j++] = isbn10_calc_checksum(ean);
  4040fa:	727b      	strb	r3, [r7, #9]
  4040fc:	220a      	movs	r2, #10
  4040fe:	e004      	b.n	40410a <_zbar_decode_ean+0xfb2>
        if(base == ZBAR_ISBN10 ||
           (base > ZBAR_EAN5 &&
            !TEST_CFG(ean_get_config(ean, sym), ZBAR_CFG_EMIT_CHECK)))
            base--;

        for(; j < base && ean->buf[i] >= 0; i++, j++)
  404100:	2200      	movs	r2, #0
  404102:	e002      	b.n	40410a <_zbar_decode_ean+0xfb2>
  404104:	2200      	movs	r2, #0
  404106:	e000      	b.n	40410a <_zbar_decode_ean+0xfb2>
            dcode->buf[j] = ean->buf[i] + '0';

        if(sym == ZBAR_ISBN10 && j == 9 &&
  404108:	461a      	mov	r2, r3
           TEST_CFG(ean->isbn10_config, ZBAR_CFG_EMIT_CHECK))
            /* recalculate ISBN-10 check digit */
            dcode->buf[j++] = isbn10_calc_checksum(ean);
    }
    dcode->buflen = j;
  40410a:	f8c9 2058 	str.w	r2, [r9, #88]	; 0x58
    dcode->buf[j] = '\0';
  40410e:	f8d9 305c 	ldr.w	r3, [r9, #92]	; 0x5c
  404112:	2100      	movs	r1, #0
  404114:	5499      	strb	r1, [r3, r2]
    dcode->direction = 1 - 2 * ean->direction;
  404116:	f8d9 30ac 	ldr.w	r3, [r9, #172]	; 0xac
  40411a:	005b      	lsls	r3, r3, #1
  40411c:	f1c3 0301 	rsb	r3, r3, #1
  404120:	f8c9 304c 	str.w	r3, [r9, #76]	; 0x4c
    dcode->modifiers = 0;
  404124:	f8c9 1048 	str.w	r1, [r9, #72]	; 0x48
  404128:	e001      	b.n	40412e <_zbar_decode_ean+0xfd6>
                    if(sym > ZBAR_PARTIAL) {
                        if(!acquire_lock(dcode, sym))
                            postprocess(dcode, sym);
                        else {
                            dbprintf(1, " [locked %d]", dcode->lock);
                            sym = ZBAR_PARTIAL;
  40412a:	f04f 0b01 	mov.w	fp, #1
  40412e:	f108 0801 	add.w	r8, r8, #1
  404132:	f10a 0a10 	add.w	sl, sl, #16

    /* update latest character width */
    dcode->ean.s4 -= get_width(dcode, 4);
    dcode->ean.s4 += get_width(dcode, 0);

    for(i = 0; i < 4; i++) {
  404136:	f1b8 0f04 	cmp.w	r8, #4
  40413a:	f47f a82a 	bne.w	403192 <_zbar_decode_ean+0x3a>
  40413e:	e094      	b.n	40426a <_zbar_decode_ean+0x1112>
             pass->raw[4] & 0xf, pass->raw[5] & 0xf,
             pass->raw[6] & 0xf, par);

    if(TEST_CFG(ean->ean13_config, ZBAR_CFG_ENABLE)) {
        if(!par)
            return(ZBAR_EAN13 | EAN_RIGHT);
  404140:	f241 000d 	movw	r0, #4109	; 0x100d
  404144:	e004      	b.n	404150 <_zbar_decode_ean+0xff8>
        if(par & 0x20)
            return(ZBAR_EAN13 | EAN_LEFT);
  404146:	200d      	movs	r0, #13
  404148:	e002      	b.n	404150 <_zbar_decode_ean+0xff8>
    }
    if(par && !(par & 0x20))
        return(ZBAR_UPCE);
  40414a:	2009      	movs	r0, #9
  40414c:	e000      	b.n	404150 <_zbar_decode_ean+0xff8>
  40414e:	2009      	movs	r0, #9
	  zbar_symbol_type_t part = ZBAR_NONE;
	  dbprintf(2, " fwd=%x", fwd);
	  if(!aux_end(dcode, fwd) && pass->raw[5] != 0xff)
	    part = ean_part_end7(&dcode->ean, pass, fwd);
	  if(part)
	    dcode->ean.direction = (pass->state & STATE_REV) != 0;
  404150:	f994 3068 	ldrsb.w	r3, [r4, #104]	; 0x68
  404154:	0fdb      	lsrs	r3, r3, #31
  404156:	f8c9 30ac 	str.w	r3, [r9, #172]	; 0xac
  40415a:	f7ff babd 	b.w	4036d8 <_zbar_decode_ean+0x580>
                dcode->ean.direction = (pass->state & STATE_REV) != 0;
            pass->state = -1;
            return(part);
        }
	else if((idx == 0x18 || idx == 0x19)) {
	  zbar_symbol_type_t part = ZBAR_NONE;
  40415e:	2000      	movs	r0, #0
  404160:	f7ff baba 	b.w	4036d8 <_zbar_decode_ean+0x580>
        unsigned w = pass->width;
        if(!dcode->ean.s4)
            return(0);
        /* validate guard bars before decoding first char of symbol */
        if(!pass->state) {
            pass->state = aux_start(dcode);
  404164:	f884 1068 	strb.w	r1, [r4, #104]	; 0x68
            pass->width = dcode->ean.s4;
  404168:	66e2      	str	r2, [r4, #108]	; 0x6c
            w = check_width(w, dcode->ean.s4);
            if(w)
                pass->width = (pass->width + dcode->ean.s4 * 3) / 4;
        }

        if(w)
  40416a:	2e00      	cmp	r6, #0
  40416c:	f47f ab5e 	bne.w	40382c <_zbar_decode_ean+0x6d4>
        if(!pass->state) {
            pass->state = aux_start(dcode);
            pass->width = dcode->ean.s4;
            if(pass->state < 0)
                return(0);
            idx = pass->state & STATE_IDX;
  404170:	2500      	movs	r5, #0
  404172:	e015      	b.n	4041a0 <_zbar_decode_ean+0x1048>
        unsigned w = pass->width;
        if(!dcode->ean.s4)
            return(0);
        /* validate guard bars before decoding first char of symbol */
        if(!pass->state) {
            pass->state = aux_start(dcode);
  404174:	23ff      	movs	r3, #255	; 0xff
  404176:	f884 3068 	strb.w	r3, [r4, #104]	; 0x68
            pass->width = dcode->ean.s4;
  40417a:	66e2      	str	r2, [r4, #108]	; 0x6c
  40417c:	e7d7      	b.n	40412e <_zbar_decode_ean+0xfd6>
            idx = pass->state & STATE_IDX;
        }
        else {
            w = check_width(w, dcode->ean.s4);
            if(w)
                pass->width = (pass->width + dcode->ean.s4 * 3) / 4;
  40417e:	eb02 0142 	add.w	r1, r2, r2, lsl #1
  404182:	4431      	add	r1, r6
  404184:	0889      	lsrs	r1, r1, #2
  404186:	66e1      	str	r1, [r4, #108]	; 0x6c
  404188:	f7ff bb51 	b.w	40382e <_zbar_decode_ean+0x6d6>
        if(w)
            code = decode4(dcode);
        else
            dbprintf(2, " [bad width]");

        if((code < 0 && idx != 0x10) || 
  40418c:	2d00      	cmp	r5, #0
  40418e:	f43f ac2a 	beq.w	4039e6 <_zbar_decode_ean+0x88e>
  404192:	f7ff bbfa 	b.w	40398a <_zbar_decode_ean+0x832>
        if(alt)
            code = ((code >> 1) & 3) | 0x10; /* compress code space */
        dbprintf(2, " (d2=%d(%d) alt=%d)", d2, mid * dcode->ean.s4, alt);
    }
    dbprintf(2, " char=%02x", digits[(unsigned char)code]);
    zassert(code < 0x14, -1, "code=%02x e1=%x e2=%x s4=%x color=%x\n",
  404196:	b24b      	sxtb	r3, r1
  404198:	2b13      	cmp	r3, #19
  40419a:	ddf7      	ble.n	40418c <_zbar_decode_ean+0x1034>
  40419c:	f7ff bbcc 	b.w	403938 <_zbar_decode_ean+0x7e0>
        /* use sum of bar widths */
        unsigned d2 = ((get_color(dcode) == ZBAR_BAR)
                       ? get_width(dcode, 0) + get_width(dcode, 2)
                       : get_width(dcode, 1) + get_width(dcode, 3));
        d2 *= 7;
        mid = (((1 << code) & 0x0420)
  4041a0:	21ff      	movs	r1, #255	; 0xff
  4041a2:	f7ff bbf0 	b.w	403986 <_zbar_decode_ean+0x82e>
        if(w)
            code = decode4(dcode);
        else
            dbprintf(2, " [bad width]");

        if((code < 0 && idx != 0x10) || 
  4041a6:	2d00      	cmp	r5, #0
  4041a8:	f43f ac1d 	beq.w	4039e6 <_zbar_decode_ean+0x88e>
  4041ac:	f7ff bbed 	b.w	40398a <_zbar_decode_ean+0x832>
    }

    if((ean->left || ean->right) &&
       !check_width(ean->width, pass->width)) {
      dbprintf(2, " rst(width %d)", pass->width);
      ean->left = ean->right = ZBAR_NONE;
  4041b0:	2300      	movs	r3, #0
  4041b2:	f8a9 30aa 	strh.w	r3, [r9, #170]	; 0xaa
  4041b6:	f8a9 30a8 	strh.w	r3, [r9, #168]	; 0xa8
  4041ba:	e443      	b.n	403a44 <_zbar_decode_ean+0x8ec>
        }
        ean->right = part;
        part &= ean->left;  /* FIXME!? */
    }
    else if(part == ZBAR_EAN13 || part == ZBAR_EAN8) /* EAN_LEFT */ {
        j = (part - 1) >> 1;
  4041bc:	1e45      	subs	r5, r0, #1
        for(i = part >> 1; j >= 0; i--, j--) {
  4041be:	0847      	lsrs	r7, r0, #1
  4041c0:	2100      	movs	r1, #0
  4041c2:	f3c5 0547 	ubfx	r5, r5, #1, #8
            unsigned char digit = pass->raw[i] & 0xf;
  4041c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
  4041c8:	eb09 1603 	add.w	r6, r9, r3, lsl #4
            if(ean->left && ean->buf[j] != digit) {
                /* partial mismatch - reset collected parts */
                dbprintf(2, " rst(left)");
                ean->left = ean->right = ZBAR_NONE;
  4041cc:	468e      	mov	lr, r1
  4041ce:	e476      	b.n	403abe <_zbar_decode_ean+0x966>
        ean->left = part;
    }
    else
        ean_expand_upce(ean, pass);

    ean->width = pass->width;
  4041d0:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
  4041d2:	f8c9 30b4 	str.w	r3, [r9, #180]	; 0xb4
  4041d6:	4683      	mov	fp, r0
  4041d8:	e530      	b.n	403c3c <_zbar_decode_ean+0xae4>
                                               int n)
{
    unsigned char chk = 0;
    unsigned char i, d;
    for(i = 0; i < n; i++) {
        unsigned char d = ean->buf[i];
  4041da:	f899 50b8 	ldrb.w	r5, [r9, #184]	; 0xb8
        zassert(d < 10, -1, "i=%x d=%x chk=%x %s\n", i, d, chk,
  4041de:	2d09      	cmp	r5, #9
  4041e0:	f63f ad3a 	bhi.w	403c58 <_zbar_decode_ean+0xb00>
  4041e4:	2300      	movs	r3, #0
  4041e6:	e563      	b.n	403cb0 <_zbar_decode_ean+0xb58>
                                               int n)
{
    unsigned char chk = 0;
    unsigned char i, d;
    for(i = 0; i < n; i++) {
        unsigned char d = ean->buf[i];
  4041e8:	f899 50b8 	ldrb.w	r5, [r9, #184]	; 0xb8
        zassert(d < 10, -1, "i=%x d=%x chk=%x %s\n", i, d, chk,
  4041ec:	2d09      	cmp	r5, #9
  4041ee:	f67f add9 	bls.w	403da4 <_zbar_decode_ean+0xc4c>
  4041f2:	e5bd      	b.n	403d70 <_zbar_decode_ean+0xc18>

    if(!part)
        part = ZBAR_PARTIAL;

    if(((part == ZBAR_EAN13 ||
         part == ZBAR_UPCE) && ean_verify_checksum(ean, 12)) ||
  4041f4:	f1bb 0f08 	cmp.w	fp, #8
  4041f8:	f47f ae35 	bne.w	403e66 <_zbar_decode_ean+0xd0e>
  4041fc:	e7f4      	b.n	4041e8 <_zbar_decode_ean+0x1090>
        /* invalid checksum */
        if(ean->right)
	  ean->left = ZBAR_NONE;
        else
	  ean->right = ZBAR_NONE;
        part = ZBAR_NONE;
  4041fe:	f04f 0b00 	mov.w	fp, #0
  404202:	e68e      	b.n	403f22 <_zbar_decode_ean+0xdca>
    }

    if(part == ZBAR_EAN13) {
        /* special case EAN-13 subsets */
        if(!ean->buf[0] && TEST_CFG(ean->upca_config, ZBAR_CFG_ENABLE))
            part = ZBAR_UPCA;
  404204:	f04f 0b0c 	mov.w	fp, #12
  404208:	e68f      	b.n	403f2a <_zbar_decode_ean+0xdd2>
        else if(ean->buf[0] == 9 && ean->buf[1] == 7) {
            /* ISBN-10 has priority over ISBN-13(?) */
            if(ean->buf[2] == 8 &&
               TEST_CFG(ean->isbn10_config, ZBAR_CFG_ENABLE))
                part = ZBAR_ISBN10;
  40420a:	f04f 0b0a 	mov.w	fp, #10
  40420e:	e68c      	b.n	403f2a <_zbar_decode_ean+0xdd2>
                ean->buf[i] = pass->raw[i - 1] & 0xf;
            ean->buf[i] = pass->raw[0] & 0xf;
        }
        else if(TEST_CFG(ean->upca_config, ZBAR_CFG_ENABLE))
            /* UPC-E reported as UPC-A has priority over EAN-13 */
            part = ZBAR_UPCA;
  404210:	f04f 0b0c 	mov.w	fp, #12
  404214:	e689      	b.n	403f2a <_zbar_decode_ean+0xdd2>
        else if(TEST_CFG(ean->ean13_config, ZBAR_CFG_ENABLE))
            part = ZBAR_EAN13;
  404216:	f04f 0b0d 	mov.w	fp, #13
  40421a:	e686      	b.n	403f2a <_zbar_decode_ean+0xdd2>
        else if(base == ZBAR_ISBN13)
            base = ZBAR_EAN13;
        else if(base == ZBAR_ISBN10)
            i = 3;

        if(base == ZBAR_ISBN10 ||
  40421c:	f1bb 0f05 	cmp.w	fp, #5
  404220:	f63f aea5 	bhi.w	403f6e <_zbar_decode_ean+0xe16>
  404224:	465b      	mov	r3, fp
static inline void postprocess (zbar_decoder_t *dcode,
                                zbar_symbol_type_t sym)
{
    ean_decoder_t *ean = &dcode->ean;
    zbar_symbol_type_t base = sym;
    int i = 0, j = 0;
  404226:	2200      	movs	r2, #0
  404228:	e6fd      	b.n	404026 <_zbar_decode_ean+0xece>
    unsigned char w;
    for(w = 10; w > 1; w--) {
        unsigned char d = ean->buf[13 - w];
        zassert(d < 10, '?', "w=%x d=%x chk=%x %s\n", w, d, chk,
                _zbar_decoder_buf_dump((void*)ean->buf, 18));
        chk += d * w;
  40422a:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  40422e:	0065      	lsls	r5, r4, #1
  404230:	f109 02bb 	add.w	r2, r9, #187	; 0xbb
  404234:	f109 01c3 	add.w	r1, r9, #195	; 0xc3
  404238:	2309      	movs	r3, #9
  40423a:	e723      	b.n	404084 <_zbar_decode_ean+0xf2c>
        if(!par)
            return(ZBAR_EAN13 | EAN_RIGHT);
        if(par & 0x20)
            return(ZBAR_EAN13 | EAN_LEFT);
    }
    if(par && !(par & 0x20))
  40423c:	2b00      	cmp	r3, #0
  40423e:	d186      	bne.n	40414e <_zbar_decode_ean+0xff6>
  404240:	e78d      	b.n	40415e <_zbar_decode_ean+0x1006>
    }

    e1 = get_width(dcode, 4) + get_width(dcode, 5);
    E1 = decode_e(e1, dcode->ean.s4, 7);

    if(get_color(dcode) == ZBAR_BAR) {
  404242:	f1bc 0f00 	cmp.w	ip, #0
  404246:	d095      	beq.n	404174 <_zbar_decode_ean+0x101c>
  404248:	f7ff ba96 	b.w	403778 <_zbar_decode_ean+0x620>
        if(base == ZBAR_ISBN10 ||
           (base > ZBAR_EAN5 &&
            !TEST_CFG(ean_get_config(ean, sym), ZBAR_CFG_EMIT_CHECK)))
            base--;

        for(; j < base && ean->buf[i] >= 0; i++, j++)
  40424c:	461c      	mov	r4, r3
  40424e:	e6ed      	b.n	40402c <_zbar_decode_ean+0xed4>
            base = ZBAR_EAN13;
        else if(base == ZBAR_ISBN10)
            i = 3;

        if(base == ZBAR_ISBN10 ||
           (base > ZBAR_EAN5 &&
  404250:	f011 0f04 	tst.w	r1, #4
  404254:	f43f aee5 	beq.w	404022 <_zbar_decode_ean+0xeca>
  404258:	e7f8      	b.n	40424c <_zbar_decode_ean+0x10f4>
                                               int n)
{
    unsigned char chk = 0;
    unsigned char i, d;
    for(i = 0; i < n; i++) {
        unsigned char d = ean->buf[i];
  40425a:	f899 50b8 	ldrb.w	r5, [r9, #184]	; 0xb8
  40425e:	e5a1      	b.n	403da4 <_zbar_decode_ean+0xc4c>

    if(!part)
        part = ZBAR_PARTIAL;

    if(((part == ZBAR_EAN13 ||
         part == ZBAR_UPCE) && ean_verify_checksum(ean, 12)) ||
  404260:	f1bb 0f08 	cmp.w	fp, #8
  404264:	f47f adff 	bne.w	403e66 <_zbar_decode_ean+0xd0e>
  404268:	e7f7      	b.n	40425a <_zbar_decode_ean+0x1102>
            }
            dbprintf(2, "\n");
        }
    }
    return(sym);
}
  40426a:	4658      	mov	r0, fp
  40426c:	b011      	add	sp, #68	; 0x44
  40426e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404272:	bf00      	nop
  404274:	20000440 	.word	0x20000440
  404278:	004030ad 	.word	0x004030ad
  40427c:	0040f6d4 	.word	0x0040f6d4
  404280:	0040f5fc 	.word	0x0040f5fc
  404284:	0040f690 	.word	0x0040f690
  404288:	0040f588 	.word	0x0040f588
  40428c:	004066d1 	.word	0x004066d1
  404290:	ba2e8ba3 	.word	0xba2e8ba3

00404294 <zbar_image_create>:
#include "error.h"
#include "image.h"
#include "refcnt.h"

zbar_image_t *zbar_image_create ()
{
  404294:	b510      	push	{r4, lr}
    zbar_image_t *img = calloc(1, sizeof(zbar_image_t));
  404296:	2001      	movs	r0, #1
  404298:	2144      	movs	r1, #68	; 0x44
  40429a:	4b0a      	ldr	r3, [pc, #40]	; (4042c4 <zbar_image_create+0x30>)
  40429c:	4798      	blx	r3
  40429e:	4604      	mov	r4, r0
    _zbar_refcnt_init();
  4042a0:	4b09      	ldr	r3, [pc, #36]	; (4042c8 <zbar_image_create+0x34>)
  4042a2:	4798      	blx	r3
typedef int refcnt_t;

static inline int _zbar_refcnt (refcnt_t *cnt,
                                int delta)
{
    int rc = (*cnt += delta);
  4042a4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  4042a6:	3301      	adds	r3, #1
  4042a8:	62e3      	str	r3, [r4, #44]	; 0x2c
    assert(rc >= 0);
  4042aa:	2b00      	cmp	r3, #0
  4042ac:	da05      	bge.n	4042ba <zbar_image_create+0x26>
  4042ae:	4807      	ldr	r0, [pc, #28]	; (4042cc <zbar_image_create+0x38>)
  4042b0:	2157      	movs	r1, #87	; 0x57
  4042b2:	4a07      	ldr	r2, [pc, #28]	; (4042d0 <zbar_image_create+0x3c>)
  4042b4:	4b07      	ldr	r3, [pc, #28]	; (4042d4 <zbar_image_create+0x40>)
  4042b6:	4c08      	ldr	r4, [pc, #32]	; (4042d8 <zbar_image_create+0x44>)
  4042b8:	47a0      	blx	r4
    _zbar_image_refcnt(img, 1);
    img->srcidx = -1;
  4042ba:	f04f 33ff 	mov.w	r3, #4294967295
  4042be:	6363      	str	r3, [r4, #52]	; 0x34
    return(img);
}
  4042c0:	4620      	mov	r0, r4
  4042c2:	bd10      	pop	{r4, pc}
  4042c4:	00406325 	.word	0x00406325
  4042c8:	0040563d 	.word	0x0040563d
  4042cc:	0040f710 	.word	0x0040f710
  4042d0:	0040f700 	.word	0x0040f700
  4042d4:	0040f73c 	.word	0x0040f73c
  4042d8:	004062e9 	.word	0x004062e9

004042dc <zbar_image_free_data>:
    img->crop_h = h;
}

inline void zbar_image_free_data (zbar_image_t *img)
{
    if(!img)
  4042dc:	2800      	cmp	r0, #0
  4042de:	d02c      	beq.n	40433a <zbar_image_free_data+0x5e>
    img->crop_y = y;
    img->crop_h = h;
}

inline void zbar_image_free_data (zbar_image_t *img)
{
  4042e0:	b538      	push	{r3, r4, r5, lr}
  4042e2:	4604      	mov	r4, r0
    if(!img)
        return;
    if(img->src) {
  4042e4:	6b03      	ldr	r3, [r0, #48]	; 0x30
  4042e6:	b1c3      	cbz	r3, 40431a <zbar_image_free_data+0x3e>
        zbar_image_t *newimg;
        /* replace video image w/new copy */
        assert(img->refcnt); /* FIXME needs lock */
  4042e8:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  4042ea:	b92b      	cbnz	r3, 4042f8 <zbar_image_free_data+0x1c>
  4042ec:	4813      	ldr	r0, [pc, #76]	; (40433c <zbar_image_free_data+0x60>)
  4042ee:	219a      	movs	r1, #154	; 0x9a
  4042f0:	4a13      	ldr	r2, [pc, #76]	; (404340 <zbar_image_free_data+0x64>)
  4042f2:	4b14      	ldr	r3, [pc, #80]	; (404344 <zbar_image_free_data+0x68>)
  4042f4:	4c14      	ldr	r4, [pc, #80]	; (404348 <zbar_image_free_data+0x6c>)
  4042f6:	47a0      	blx	r4
        newimg = zbar_image_create();
  4042f8:	4b14      	ldr	r3, [pc, #80]	; (40434c <zbar_image_free_data+0x70>)
  4042fa:	4798      	blx	r3
  4042fc:	4605      	mov	r5, r0
        memcpy(newimg, img, sizeof(zbar_image_t));
  4042fe:	4621      	mov	r1, r4
  404300:	2244      	movs	r2, #68	; 0x44
  404302:	4b13      	ldr	r3, [pc, #76]	; (404350 <zbar_image_free_data+0x74>)
  404304:	4798      	blx	r3
        /* recycle video image */
        newimg->cleanup(newimg);
  404306:	6aab      	ldr	r3, [r5, #40]	; 0x28
  404308:	4628      	mov	r0, r5
  40430a:	4798      	blx	r3
        /* detach old image from src */
        img->cleanup = NULL;
  40430c:	2300      	movs	r3, #0
  40430e:	62a3      	str	r3, [r4, #40]	; 0x28
        img->src = NULL;
  404310:	6323      	str	r3, [r4, #48]	; 0x30
        img->srcidx = -1;
  404312:	f04f 33ff 	mov.w	r3, #4294967295
  404316:	6363      	str	r3, [r4, #52]	; 0x34
  404318:	e00c      	b.n	404334 <zbar_image_free_data+0x58>
    }
    else if(img->cleanup && img->data) {
  40431a:	6a83      	ldr	r3, [r0, #40]	; 0x28
  40431c:	b153      	cbz	r3, 404334 <zbar_image_free_data+0x58>
  40431e:	68c0      	ldr	r0, [r0, #12]
  404320:	b140      	cbz	r0, 404334 <zbar_image_free_data+0x58>
        if(img->cleanup != zbar_image_free_data) {
  404322:	4a0c      	ldr	r2, [pc, #48]	; (404354 <zbar_image_free_data+0x78>)
  404324:	4293      	cmp	r3, r2
  404326:	d003      	beq.n	404330 <zbar_image_free_data+0x54>
            /* using function address to detect this case is a bad idea;
             * windows link libraries add an extra layer of indirection...
             * this works around that problem (bug #2796277)
             */
            zbar_image_cleanup_handler_t *cleanup = img->cleanup;
            img->cleanup = zbar_image_free_data;
  404328:	62a2      	str	r2, [r4, #40]	; 0x28
            cleanup(img);
  40432a:	4620      	mov	r0, r4
  40432c:	4798      	blx	r3
  40432e:	e001      	b.n	404334 <zbar_image_free_data+0x58>
        }
        else
            free((void*)img->data);
  404330:	4b09      	ldr	r3, [pc, #36]	; (404358 <zbar_image_free_data+0x7c>)
  404332:	4798      	blx	r3
    }
    img->data = NULL;
  404334:	2300      	movs	r3, #0
  404336:	60e3      	str	r3, [r4, #12]
  404338:	bd38      	pop	{r3, r4, r5, pc}
  40433a:	4770      	bx	lr
  40433c:	0040f744 	.word	0x0040f744
  404340:	0040f7d8 	.word	0x0040f7d8
  404344:	0040f768 	.word	0x0040f768
  404348:	004062e9 	.word	0x004062e9
  40434c:	00404295 	.word	0x00404295
  404350:	0040746d 	.word	0x0040746d
  404354:	004042dd 	.word	0x004042dd
  404358:	00406e41 	.word	0x00406e41

0040435c <zbar_image_set_format>:
}

void zbar_image_set_format (zbar_image_t *img,
                            unsigned long fmt)
{
    img->format = fmt;
  40435c:	6001      	str	r1, [r0, #0]
  40435e:	4770      	bx	lr

00404360 <zbar_image_set_size>:

void zbar_image_set_size (zbar_image_t *img,
                          unsigned w,
                          unsigned h)
{
    img->crop_x = img->crop_y = 0;
  404360:	2300      	movs	r3, #0
  404362:	6183      	str	r3, [r0, #24]
  404364:	6143      	str	r3, [r0, #20]
    img->width = img->crop_w = w;
  404366:	61c1      	str	r1, [r0, #28]
  404368:	6041      	str	r1, [r0, #4]
    img->height = img->crop_h = h;
  40436a:	6202      	str	r2, [r0, #32]
  40436c:	6082      	str	r2, [r0, #8]
  40436e:	4770      	bx	lr

00404370 <zbar_image_set_data>:

void zbar_image_set_data (zbar_image_t *img,
                          const void *data,
                          unsigned long len,
                          zbar_image_cleanup_handler_t *cleanup)
{
  404370:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  404374:	4688      	mov	r8, r1
  404376:	4617      	mov	r7, r2
  404378:	461e      	mov	r6, r3
    img->crop_h = h;
}

inline void zbar_image_free_data (zbar_image_t *img)
{
    if(!img)
  40437a:	4604      	mov	r4, r0
  40437c:	b330      	cbz	r0, 4043cc <zbar_image_set_data+0x5c>
        return;
    if(img->src) {
  40437e:	6b03      	ldr	r3, [r0, #48]	; 0x30
  404380:	b1bb      	cbz	r3, 4043b2 <zbar_image_set_data+0x42>
        zbar_image_t *newimg;
        /* replace video image w/new copy */
        assert(img->refcnt); /* FIXME needs lock */
  404382:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  404384:	b92b      	cbnz	r3, 404392 <zbar_image_set_data+0x22>
  404386:	4814      	ldr	r0, [pc, #80]	; (4043d8 <zbar_image_set_data+0x68>)
  404388:	219a      	movs	r1, #154	; 0x9a
  40438a:	4a14      	ldr	r2, [pc, #80]	; (4043dc <zbar_image_set_data+0x6c>)
  40438c:	4b14      	ldr	r3, [pc, #80]	; (4043e0 <zbar_image_set_data+0x70>)
  40438e:	4c15      	ldr	r4, [pc, #84]	; (4043e4 <zbar_image_set_data+0x74>)
  404390:	47a0      	blx	r4
        newimg = zbar_image_create();
  404392:	4b15      	ldr	r3, [pc, #84]	; (4043e8 <zbar_image_set_data+0x78>)
  404394:	4798      	blx	r3
  404396:	4605      	mov	r5, r0
        memcpy(newimg, img, sizeof(zbar_image_t));
  404398:	4621      	mov	r1, r4
  40439a:	2244      	movs	r2, #68	; 0x44
  40439c:	4b13      	ldr	r3, [pc, #76]	; (4043ec <zbar_image_set_data+0x7c>)
  40439e:	4798      	blx	r3
        /* recycle video image */
        newimg->cleanup(newimg);
  4043a0:	6aab      	ldr	r3, [r5, #40]	; 0x28
  4043a2:	4628      	mov	r0, r5
  4043a4:	4798      	blx	r3
        /* detach old image from src */
        img->cleanup = NULL;
        img->src = NULL;
  4043a6:	2300      	movs	r3, #0
  4043a8:	6323      	str	r3, [r4, #48]	; 0x30
        img->srcidx = -1;
  4043aa:	f04f 33ff 	mov.w	r3, #4294967295
  4043ae:	6363      	str	r3, [r4, #52]	; 0x34
  4043b0:	e00c      	b.n	4043cc <zbar_image_set_data+0x5c>
    }
    else if(img->cleanup && img->data) {
  4043b2:	6a83      	ldr	r3, [r0, #40]	; 0x28
  4043b4:	b153      	cbz	r3, 4043cc <zbar_image_set_data+0x5c>
  4043b6:	68c0      	ldr	r0, [r0, #12]
  4043b8:	b140      	cbz	r0, 4043cc <zbar_image_set_data+0x5c>
        if(img->cleanup != zbar_image_free_data) {
  4043ba:	4a0d      	ldr	r2, [pc, #52]	; (4043f0 <zbar_image_set_data+0x80>)
  4043bc:	4293      	cmp	r3, r2
  4043be:	d003      	beq.n	4043c8 <zbar_image_set_data+0x58>
            /* using function address to detect this case is a bad idea;
             * windows link libraries add an extra layer of indirection...
             * this works around that problem (bug #2796277)
             */
            zbar_image_cleanup_handler_t *cleanup = img->cleanup;
            img->cleanup = zbar_image_free_data;
  4043c0:	62a2      	str	r2, [r4, #40]	; 0x28
            cleanup(img);
  4043c2:	4620      	mov	r0, r4
  4043c4:	4798      	blx	r3
  4043c6:	e001      	b.n	4043cc <zbar_image_set_data+0x5c>
        }
        else
            free((void*)img->data);
  4043c8:	4b0a      	ldr	r3, [pc, #40]	; (4043f4 <zbar_image_set_data+0x84>)
  4043ca:	4798      	blx	r3
                          const void *data,
                          unsigned long len,
                          zbar_image_cleanup_handler_t *cleanup)
{
    zbar_image_free_data(img);
    img->data = data;
  4043cc:	f8c4 800c 	str.w	r8, [r4, #12]
    img->datalen = len;
  4043d0:	6127      	str	r7, [r4, #16]
    img->cleanup = cleanup;
  4043d2:	62a6      	str	r6, [r4, #40]	; 0x28
  4043d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4043d8:	0040f744 	.word	0x0040f744
  4043dc:	0040f7d8 	.word	0x0040f7d8
  4043e0:	0040f768 	.word	0x0040f768
  4043e4:	004062e9 	.word	0x004062e9
  4043e8:	00404295 	.word	0x00404295
  4043ec:	0040746d 	.word	0x0040746d
  4043f0:	004042dd 	.word	0x004042dd
  4043f4:	00406e41 	.word	0x00406e41

004043f8 <zbar_image_first_symbol>:
    img->syms = (zbar_symbol_set_t*)syms;
}

const zbar_symbol_t *zbar_image_first_symbol (const zbar_image_t *img)
{
    return((img->syms) ? img->syms->head : NULL);
  4043f8:	6c03      	ldr	r3, [r0, #64]	; 0x40
  4043fa:	b10b      	cbz	r3, 404400 <zbar_image_first_symbol+0x8>
  4043fc:	6898      	ldr	r0, [r3, #8]
  4043fe:	4770      	bx	lr
  404400:	2000      	movs	r0, #0
}
  404402:	4770      	bx	lr

00404404 <_zbar_image_scanner_recycle_syms>:

void _zbar_image_scanner_recycle_syms (zbar_image_scanner_t *iscn,
                                       zbar_symbol_t *sym)
{
    zbar_symbol_t *next = NULL;
    for(; sym; sym = next) {
  404404:	2900      	cmp	r1, #0
  404406:	d072      	beq.n	4044ee <_zbar_image_scanner_recycle_syms+0xea>
#endif
};

void _zbar_image_scanner_recycle_syms (zbar_image_scanner_t *iscn,
                                       zbar_symbol_t *sym)
{
  404408:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  40440c:	4607      	mov	r7, r0
  40440e:	460c      	mov	r4, r1
        if(sym->refcnt && _zbar_refcnt(&sym->refcnt, -1)) {
            /* unlink referenced symbol */
            /* FIXME handle outstanding component refs (currently unsupported)
             */
            assert(sym->data_alloc);
            sym->next = NULL;
  404410:	2600      	movs	r6, #0
            for(i = 0; i < RECYCLE_BUCKETS; i++)
                if(sym->data_alloc < 1 << (i * 2))
                    break;
            if(i == RECYCLE_BUCKETS) {
                assert(sym->data);
                free(sym->data);
  404412:	f8df 9104 	ldr.w	r9, [pc, #260]	; 404518 <_zbar_image_scanner_recycle_syms+0x114>
                sym->data = NULL;
                sym->data_alloc = 0;
                i = 0;
  404416:	46b0      	mov	r8, r6
void _zbar_image_scanner_recycle_syms (zbar_image_scanner_t *iscn,
                                       zbar_symbol_t *sym)
{
    zbar_symbol_t *next = NULL;
    for(; sym; sym = next) {
        next = sym->next;
  404418:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
        if(sym->refcnt && _zbar_refcnt(&sym->refcnt, -1)) {
  40441a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  40441c:	b1a3      	cbz	r3, 404448 <_zbar_image_scanner_recycle_syms+0x44>
typedef int refcnt_t;

static inline int _zbar_refcnt (refcnt_t *cnt,
                                int delta)
{
    int rc = (*cnt += delta);
  40441e:	3b01      	subs	r3, #1
  404420:	62a3      	str	r3, [r4, #40]	; 0x28
    assert(rc >= 0);
  404422:	2b00      	cmp	r3, #0
  404424:	da05      	bge.n	404432 <_zbar_image_scanner_recycle_syms+0x2e>
  404426:	4832      	ldr	r0, [pc, #200]	; (4044f0 <_zbar_image_scanner_recycle_syms+0xec>)
  404428:	2157      	movs	r1, #87	; 0x57
  40442a:	4a32      	ldr	r2, [pc, #200]	; (4044f4 <_zbar_image_scanner_recycle_syms+0xf0>)
  40442c:	4b32      	ldr	r3, [pc, #200]	; (4044f8 <_zbar_image_scanner_recycle_syms+0xf4>)
  40442e:	4c33      	ldr	r4, [pc, #204]	; (4044fc <_zbar_image_scanner_recycle_syms+0xf8>)
  404430:	47a0      	blx	r4
  404432:	b14b      	cbz	r3, 404448 <_zbar_image_scanner_recycle_syms+0x44>
            /* unlink referenced symbol */
            /* FIXME handle outstanding component refs (currently unsupported)
             */
            assert(sym->data_alloc);
  404434:	68e3      	ldr	r3, [r4, #12]
  404436:	b92b      	cbnz	r3, 404444 <_zbar_image_scanner_recycle_syms+0x40>
  404438:	4831      	ldr	r0, [pc, #196]	; (404500 <_zbar_image_scanner_recycle_syms+0xfc>)
  40443a:	2185      	movs	r1, #133	; 0x85
  40443c:	4a31      	ldr	r2, [pc, #196]	; (404504 <_zbar_image_scanner_recycle_syms+0x100>)
  40443e:	4b32      	ldr	r3, [pc, #200]	; (404508 <_zbar_image_scanner_recycle_syms+0x104>)
  404440:	4c2e      	ldr	r4, [pc, #184]	; (4044fc <_zbar_image_scanner_recycle_syms+0xf8>)
  404442:	47a0      	blx	r4
            sym->next = NULL;
  404444:	62e6      	str	r6, [r4, #44]	; 0x2c
  404446:	e049      	b.n	4044dc <_zbar_image_scanner_recycle_syms+0xd8>
        }
        else {
            int i;
            recycle_bucket_t *bucket;
            /* recycle unreferenced symbol */
            if(!sym->data_alloc) {
  404448:	68e2      	ldr	r2, [r4, #12]
  40444a:	2a00      	cmp	r2, #0
  40444c:	d14b      	bne.n	4044e6 <_zbar_image_scanner_recycle_syms+0xe2>
                sym->data = NULL;
  40444e:	6166      	str	r6, [r4, #20]
                sym->datalen = 0;
  404450:	6126      	str	r6, [r4, #16]
            }
            if(sym->syms) {
  404452:	6b21      	ldr	r1, [r4, #48]	; 0x30
  404454:	b1e1      	cbz	r1, 404490 <_zbar_image_scanner_recycle_syms+0x8c>
typedef int refcnt_t;

static inline int _zbar_refcnt (refcnt_t *cnt,
                                int delta)
{
    int rc = (*cnt += delta);
  404456:	680b      	ldr	r3, [r1, #0]
  404458:	3b01      	subs	r3, #1
  40445a:	600b      	str	r3, [r1, #0]
    assert(rc >= 0);
  40445c:	2b00      	cmp	r3, #0
  40445e:	da05      	bge.n	40446c <_zbar_image_scanner_recycle_syms+0x68>
  404460:	4823      	ldr	r0, [pc, #140]	; (4044f0 <_zbar_image_scanner_recycle_syms+0xec>)
  404462:	2157      	movs	r1, #87	; 0x57
  404464:	4a23      	ldr	r2, [pc, #140]	; (4044f4 <_zbar_image_scanner_recycle_syms+0xf0>)
  404466:	4b24      	ldr	r3, [pc, #144]	; (4044f8 <_zbar_image_scanner_recycle_syms+0xf4>)
  404468:	4c24      	ldr	r4, [pc, #144]	; (4044fc <_zbar_image_scanner_recycle_syms+0xf8>)
  40446a:	47a0      	blx	r4
                if(_zbar_refcnt(&sym->syms->refcnt, -1))
  40446c:	b12b      	cbz	r3, 40447a <_zbar_image_scanner_recycle_syms+0x76>
                    assert(0);
  40446e:	4824      	ldr	r0, [pc, #144]	; (404500 <_zbar_image_scanner_recycle_syms+0xfc>)
  404470:	2192      	movs	r1, #146	; 0x92
  404472:	4a24      	ldr	r2, [pc, #144]	; (404504 <_zbar_image_scanner_recycle_syms+0x100>)
  404474:	4b25      	ldr	r3, [pc, #148]	; (40450c <_zbar_image_scanner_recycle_syms+0x108>)
  404476:	4c21      	ldr	r4, [pc, #132]	; (4044fc <_zbar_image_scanner_recycle_syms+0xf8>)
  404478:	47a0      	blx	r4
                _zbar_image_scanner_recycle_syms(iscn, sym->syms->head);
  40447a:	6b23      	ldr	r3, [r4, #48]	; 0x30
  40447c:	4638      	mov	r0, r7
  40447e:	6899      	ldr	r1, [r3, #8]
  404480:	f7ff ffc0 	bl	404404 <_zbar_image_scanner_recycle_syms>
                sym->syms->head = NULL;
  404484:	6b23      	ldr	r3, [r4, #48]	; 0x30
  404486:	609e      	str	r6, [r3, #8]
                _zbar_symbol_set_free(sym->syms);
  404488:	6b20      	ldr	r0, [r4, #48]	; 0x30
  40448a:	4b21      	ldr	r3, [pc, #132]	; (404510 <_zbar_image_scanner_recycle_syms+0x10c>)
  40448c:	4798      	blx	r3
                sym->syms = NULL;
  40448e:	6326      	str	r6, [r4, #48]	; 0x30
            }
            for(i = 0; i < RECYCLE_BUCKETS; i++)
                if(sym->data_alloc < 1 << (i * 2))
  404490:	68e2      	ldr	r2, [r4, #12]
  404492:	b92a      	cbnz	r2, 4044a0 <_zbar_image_scanner_recycle_syms+0x9c>
  404494:	e019      	b.n	4044ca <_zbar_image_scanner_recycle_syms+0xc6>
  404496:	0059      	lsls	r1, r3, #1
  404498:	fa32 f101 	lsrs.w	r1, r2, r1
  40449c:	d102      	bne.n	4044a4 <_zbar_image_scanner_recycle_syms+0xa0>
  40449e:	e005      	b.n	4044ac <_zbar_image_scanner_recycle_syms+0xa8>
                _zbar_image_scanner_recycle_syms(iscn, sym->syms->head);
                sym->syms->head = NULL;
                _zbar_symbol_set_free(sym->syms);
                sym->syms = NULL;
            }
            for(i = 0; i < RECYCLE_BUCKETS; i++)
  4044a0:	2301      	movs	r3, #1
  4044a2:	e7f8      	b.n	404496 <_zbar_image_scanner_recycle_syms+0x92>
  4044a4:	3301      	adds	r3, #1
  4044a6:	2b05      	cmp	r3, #5
  4044a8:	d1f5      	bne.n	404496 <_zbar_image_scanner_recycle_syms+0x92>
  4044aa:	e001      	b.n	4044b0 <_zbar_image_scanner_recycle_syms+0xac>
                if(sym->data_alloc < 1 << (i * 2))
                    break;
            if(i == RECYCLE_BUCKETS) {
  4044ac:	2b05      	cmp	r3, #5
  4044ae:	d10d      	bne.n	4044cc <_zbar_image_scanner_recycle_syms+0xc8>
                assert(sym->data);
  4044b0:	6960      	ldr	r0, [r4, #20]
  4044b2:	b928      	cbnz	r0, 4044c0 <_zbar_image_scanner_recycle_syms+0xbc>
  4044b4:	4812      	ldr	r0, [pc, #72]	; (404500 <_zbar_image_scanner_recycle_syms+0xfc>)
  4044b6:	219c      	movs	r1, #156	; 0x9c
  4044b8:	4a12      	ldr	r2, [pc, #72]	; (404504 <_zbar_image_scanner_recycle_syms+0x100>)
  4044ba:	4b16      	ldr	r3, [pc, #88]	; (404514 <_zbar_image_scanner_recycle_syms+0x110>)
  4044bc:	4c0f      	ldr	r4, [pc, #60]	; (4044fc <_zbar_image_scanner_recycle_syms+0xf8>)
  4044be:	47a0      	blx	r4
                free(sym->data);
  4044c0:	47c8      	blx	r9
                sym->data = NULL;
  4044c2:	6166      	str	r6, [r4, #20]
                sym->data_alloc = 0;
  4044c4:	60e6      	str	r6, [r4, #12]
                i = 0;
  4044c6:	4643      	mov	r3, r8
  4044c8:	e000      	b.n	4044cc <_zbar_image_scanner_recycle_syms+0xc8>
                _zbar_image_scanner_recycle_syms(iscn, sym->syms->head);
                sym->syms->head = NULL;
                _zbar_symbol_set_free(sym->syms);
                sym->syms = NULL;
            }
            for(i = 0; i < RECYCLE_BUCKETS; i++)
  4044ca:	4633      	mov	r3, r6
  4044cc:	eb07 03c3 	add.w	r3, r7, r3, lsl #3
                sym->data_alloc = 0;
                i = 0;
            }
            bucket = &iscn->recycle[i];
            /* FIXME cap bucket fill */
            bucket->nsyms++;
  4044d0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  4044d2:	3201      	adds	r2, #1
  4044d4:	631a      	str	r2, [r3, #48]	; 0x30
            sym->next = bucket->head;
  4044d6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
  4044d8:	62e2      	str	r2, [r4, #44]	; 0x2c
            bucket->head = sym;
  4044da:	635c      	str	r4, [r3, #52]	; 0x34
  4044dc:	462c      	mov	r4, r5

void _zbar_image_scanner_recycle_syms (zbar_image_scanner_t *iscn,
                                       zbar_symbol_t *sym)
{
    zbar_symbol_t *next = NULL;
    for(; sym; sym = next) {
  4044de:	2d00      	cmp	r5, #0
  4044e0:	d19a      	bne.n	404418 <_zbar_image_scanner_recycle_syms+0x14>
  4044e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
            /* recycle unreferenced symbol */
            if(!sym->data_alloc) {
                sym->data = NULL;
                sym->datalen = 0;
            }
            if(sym->syms) {
  4044e6:	6b21      	ldr	r1, [r4, #48]	; 0x30
  4044e8:	2900      	cmp	r1, #0
  4044ea:	d1b4      	bne.n	404456 <_zbar_image_scanner_recycle_syms+0x52>
  4044ec:	e7d8      	b.n	4044a0 <_zbar_image_scanner_recycle_syms+0x9c>
  4044ee:	4770      	bx	lr
  4044f0:	0040f710 	.word	0x0040f710
  4044f4:	0040fad4 	.word	0x0040fad4
  4044f8:	0040f73c 	.word	0x0040f73c
  4044fc:	004062e9 	.word	0x004062e9
  404500:	0040f80c 	.word	0x0040f80c
  404504:	0040fae4 	.word	0x0040fae4
  404508:	0040f838 	.word	0x0040f838
  40450c:	0040fcdc 	.word	0x0040fcdc
  404510:	00405ba9 	.word	0x00405ba9
  404514:	0040f848 	.word	0x0040f848
  404518:	00406e41 	.word	0x00406e41

0040451c <_zbar_image_scanner_add_sym>:
        sym->cache_count = 0;
}

void _zbar_image_scanner_add_sym(zbar_image_scanner_t *iscn,
                                 zbar_symbol_t *sym)
{
  40451c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  404520:	4607      	mov	r7, r0
  404522:	460d      	mov	r5, r1
}

static inline void cache_sym (zbar_image_scanner_t *iscn,
                              zbar_symbol_t *sym)
{
    if(iscn->enable_cache) {
  404524:	6d83      	ldr	r3, [r0, #88]	; 0x58
  404526:	2b00      	cmp	r3, #0
  404528:	f000 80be 	beq.w	4046a8 <_zbar_image_scanner_add_sym+0x18c>

static inline zbar_symbol_t *cache_lookup (zbar_image_scanner_t *iscn,
                                           zbar_symbol_t *sym)
{
    /* search for matching entry in cache */
    zbar_symbol_t **entry = &iscn->cache;
  40452c:	f100 065c 	add.w	r6, r0, #92	; 0x5c
    while(*entry) {
        if((*entry)->type == sym->type &&
           (*entry)->datalen == sym->datalen &&
           !memcmp((*entry)->data, sym->data, sym->datalen))
  404530:	f8df a21c 	ldr.w	sl, [pc, #540]	; 404750 <_zbar_image_scanner_add_sym+0x234>
            break;
        if((sym->time - (*entry)->time) > CACHE_TIMEOUT) {
            /* recycle stale cache entry */
            zbar_symbol_t *next = (*entry)->next;
            (*entry)->next = NULL;
  404534:	f04f 0900 	mov.w	r9, #0
            _zbar_image_scanner_recycle_syms(iscn, *entry);
  404538:	f8df 8218 	ldr.w	r8, [pc, #536]	; 404754 <_zbar_image_scanner_add_sym+0x238>
  40453c:	e01f      	b.n	40457e <_zbar_image_scanner_add_sym+0x62>
                                           zbar_symbol_t *sym)
{
    /* search for matching entry in cache */
    zbar_symbol_t **entry = &iscn->cache;
    while(*entry) {
        if((*entry)->type == sym->type &&
  40453e:	8822      	ldrh	r2, [r4, #0]
  404540:	882b      	ldrh	r3, [r5, #0]
  404542:	429a      	cmp	r2, r3
  404544:	d109      	bne.n	40455a <_zbar_image_scanner_add_sym+0x3e>
           (*entry)->datalen == sym->datalen &&
  404546:	6922      	ldr	r2, [r4, #16]
                                           zbar_symbol_t *sym)
{
    /* search for matching entry in cache */
    zbar_symbol_t **entry = &iscn->cache;
    while(*entry) {
        if((*entry)->type == sym->type &&
  404548:	692b      	ldr	r3, [r5, #16]
  40454a:	429a      	cmp	r2, r3
  40454c:	d105      	bne.n	40455a <_zbar_image_scanner_add_sym+0x3e>
           (*entry)->datalen == sym->datalen &&
           !memcmp((*entry)->data, sym->data, sym->datalen))
  40454e:	6960      	ldr	r0, [r4, #20]
  404550:	6969      	ldr	r1, [r5, #20]
  404552:	47d0      	blx	sl
{
    /* search for matching entry in cache */
    zbar_symbol_t **entry = &iscn->cache;
    while(*entry) {
        if((*entry)->type == sym->type &&
           (*entry)->datalen == sym->datalen &&
  404554:	2800      	cmp	r0, #0
  404556:	f000 808d 	beq.w	404674 <_zbar_image_scanner_add_sym+0x158>
           !memcmp((*entry)->data, sym->data, sym->datalen))
            break;
        if((sym->time - (*entry)->time) > CACHE_TIMEOUT) {
  40455a:	6b6b      	ldr	r3, [r5, #52]	; 0x34
  40455c:	6b62      	ldr	r2, [r4, #52]	; 0x34
  40455e:	1a9b      	subs	r3, r3, r2
  404560:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
  404564:	d909      	bls.n	40457a <_zbar_image_scanner_add_sym+0x5e>
            /* recycle stale cache entry */
            zbar_symbol_t *next = (*entry)->next;
  404566:	f8d4 b02c 	ldr.w	fp, [r4, #44]	; 0x2c
            (*entry)->next = NULL;
  40456a:	f8c4 902c 	str.w	r9, [r4, #44]	; 0x2c
            _zbar_image_scanner_recycle_syms(iscn, *entry);
  40456e:	4638      	mov	r0, r7
  404570:	6831      	ldr	r1, [r6, #0]
  404572:	47c0      	blx	r8
            *entry = next;
  404574:	f8c6 b000 	str.w	fp, [r6]
  404578:	e001      	b.n	40457e <_zbar_image_scanner_add_sym+0x62>
        }
        else
            entry = &(*entry)->next;
  40457a:	f104 062c 	add.w	r6, r4, #44	; 0x2c
static inline zbar_symbol_t *cache_lookup (zbar_image_scanner_t *iscn,
                                           zbar_symbol_t *sym)
{
    /* search for matching entry in cache */
    zbar_symbol_t **entry = &iscn->cache;
    while(*entry) {
  40457e:	6834      	ldr	r4, [r6, #0]
  404580:	2c00      	cmp	r4, #0
  404582:	d1dc      	bne.n	40453e <_zbar_image_scanner_add_sym+0x22>
  404584:	e0b1      	b.n	4046ea <_zbar_image_scanner_add_sym+0x1ce>
                               int datalen)
{
    /* recycle old or alloc new symbol */
    zbar_symbol_t *sym = NULL;
    int i;
    for(i = 0; i < RECYCLE_BUCKETS - 1; i++)
  404586:	2301      	movs	r3, #1
  404588:	e002      	b.n	404590 <_zbar_image_scanner_add_sym+0x74>
  40458a:	2302      	movs	r3, #2
  40458c:	e000      	b.n	404590 <_zbar_image_scanner_add_sym+0x74>
  40458e:	2303      	movs	r3, #3
        if(datalen <= 1 << (i * 2))
            break;

    for(; i > 0; i--)
  404590:	2b00      	cmp	r3, #0
  404592:	dd26      	ble.n	4045e2 <_zbar_image_scanner_add_sym+0xc6>
        if((sym = iscn->recycle[i].head)) {
  404594:	eb07 02c3 	add.w	r2, r7, r3, lsl #3
  404598:	6b54      	ldr	r4, [r2, #52]	; 0x34
  40459a:	eb07 02c3 	add.w	r2, r7, r3, lsl #3
  40459e:	b164      	cbz	r4, 4045ba <_zbar_image_scanner_add_sym+0x9e>
  4045a0:	e002      	b.n	4045a8 <_zbar_image_scanner_add_sym+0x8c>
  4045a2:	3a08      	subs	r2, #8
  4045a4:	6b54      	ldr	r4, [r2, #52]	; 0x34
  4045a6:	b144      	cbz	r4, 4045ba <_zbar_image_scanner_add_sym+0x9e>
  4045a8:	eb07 0183 	add.w	r1, r7, r3, lsl #2
            STAT(sym_recycle[i]);
  4045ac:	f8d1 20d8 	ldr.w	r2, [r1, #216]	; 0xd8
  4045b0:	3201      	adds	r2, #1
  4045b2:	f8c1 20d8 	str.w	r2, [r1, #216]	; 0xd8
            break;
        }

    if(sym) {
  4045b6:	b91c      	cbnz	r4, 4045c0 <_zbar_image_scanner_add_sym+0xa4>
  4045b8:	e013      	b.n	4045e2 <_zbar_image_scanner_add_sym+0xc6>
    int i;
    for(i = 0; i < RECYCLE_BUCKETS - 1; i++)
        if(datalen <= 1 << (i * 2))
            break;

    for(; i > 0; i--)
  4045ba:	3b01      	subs	r3, #1
  4045bc:	d1f1      	bne.n	4045a2 <_zbar_image_scanner_add_sym+0x86>
  4045be:	e010      	b.n	4045e2 <_zbar_image_scanner_add_sym+0xc6>
            STAT(sym_recycle[i]);
            break;
        }

    if(sym) {
        iscn->recycle[i].head = sym->next;
  4045c0:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  4045c2:	eb07 03c3 	add.w	r3, r7, r3, lsl #3
  4045c6:	635a      	str	r2, [r3, #52]	; 0x34
        sym->next = NULL;
  4045c8:	2200      	movs	r2, #0
  4045ca:	62e2      	str	r2, [r4, #44]	; 0x2c
        assert(iscn->recycle[i].nsyms);
  4045cc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  4045ce:	b92a      	cbnz	r2, 4045dc <_zbar_image_scanner_add_sym+0xc0>
  4045d0:	4852      	ldr	r0, [pc, #328]	; (40471c <_zbar_image_scanner_add_sym+0x200>)
  4045d2:	21e8      	movs	r1, #232	; 0xe8
  4045d4:	4a52      	ldr	r2, [pc, #328]	; (404720 <_zbar_image_scanner_add_sym+0x204>)
  4045d6:	4b53      	ldr	r3, [pc, #332]	; (404724 <_zbar_image_scanner_add_sym+0x208>)
  4045d8:	4c53      	ldr	r4, [pc, #332]	; (404728 <_zbar_image_scanner_add_sym+0x20c>)
  4045da:	47a0      	blx	r4
        iscn->recycle[i].nsyms--;
  4045dc:	3a01      	subs	r2, #1
  4045de:	631a      	str	r2, [r3, #48]	; 0x30
  4045e0:	e009      	b.n	4045f6 <_zbar_image_scanner_add_sym+0xda>
    }
    else {
        sym = calloc(1, sizeof(zbar_symbol_t));
  4045e2:	2001      	movs	r0, #1
  4045e4:	2140      	movs	r1, #64	; 0x40
  4045e6:	4b51      	ldr	r3, [pc, #324]	; (40472c <_zbar_image_scanner_add_sym+0x210>)
  4045e8:	4798      	blx	r3
  4045ea:	4604      	mov	r4, r0
        STAT(sym_new);
  4045ec:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
  4045f0:	3301      	adds	r3, #1
  4045f2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    }

    /* init new symbol */
    sym->type = type;
  4045f6:	f8a4 8000 	strh.w	r8, [r4]
    sym->quality = 1;
  4045fa:	2301      	movs	r3, #1
  4045fc:	63e3      	str	r3, [r4, #60]	; 0x3c
    sym->npts = 0;
  4045fe:	2300      	movs	r3, #0
  404600:	61e3      	str	r3, [r4, #28]
    sym->orient = ZBAR_ORIENT_UNKNOWN;
  404602:	22ff      	movs	r2, #255	; 0xff
  404604:	f884 2024 	strb.w	r2, [r4, #36]	; 0x24
    sym->cache_count = 0;
  404608:	63a3      	str	r3, [r4, #56]	; 0x38
    sym->time = iscn->time;
  40460a:	693b      	ldr	r3, [r7, #16]
  40460c:	6363      	str	r3, [r4, #52]	; 0x34
    assert(!sym->syms);
  40460e:	6b23      	ldr	r3, [r4, #48]	; 0x30
  404610:	b12b      	cbz	r3, 40461e <_zbar_image_scanner_add_sym+0x102>
  404612:	4842      	ldr	r0, [pc, #264]	; (40471c <_zbar_image_scanner_add_sym+0x200>)
  404614:	21f7      	movs	r1, #247	; 0xf7
  404616:	4a42      	ldr	r2, [pc, #264]	; (404720 <_zbar_image_scanner_add_sym+0x204>)
  404618:	4b45      	ldr	r3, [pc, #276]	; (404730 <_zbar_image_scanner_add_sym+0x214>)
  40461a:	4c43      	ldr	r4, [pc, #268]	; (404728 <_zbar_image_scanner_add_sym+0x20c>)
  40461c:	47a0      	blx	r4

    if(datalen > 0) {
  40461e:	2e00      	cmp	r6, #0
  404620:	dd0e      	ble.n	404640 <_zbar_image_scanner_add_sym+0x124>
        sym->datalen = datalen - 1;
  404622:	1e73      	subs	r3, r6, #1
  404624:	6123      	str	r3, [r4, #16]
        if(sym->data_alloc < datalen) {
  404626:	68e3      	ldr	r3, [r4, #12]
  404628:	429e      	cmp	r6, r3
  40462a:	d911      	bls.n	404650 <_zbar_image_scanner_add_sym+0x134>
            if(sym->data)
  40462c:	6960      	ldr	r0, [r4, #20]
  40462e:	b108      	cbz	r0, 404634 <_zbar_image_scanner_add_sym+0x118>
                free(sym->data);
  404630:	4b40      	ldr	r3, [pc, #256]	; (404734 <_zbar_image_scanner_add_sym+0x218>)
  404632:	4798      	blx	r3
            sym->data_alloc = datalen;
  404634:	60e6      	str	r6, [r4, #12]
            sym->data = malloc(datalen);
  404636:	4630      	mov	r0, r6
  404638:	4b3f      	ldr	r3, [pc, #252]	; (404738 <_zbar_image_scanner_add_sym+0x21c>)
  40463a:	4798      	blx	r3
  40463c:	6160      	str	r0, [r4, #20]
  40463e:	e007      	b.n	404650 <_zbar_image_scanner_add_sym+0x134>
        }
    }
    else {
        if(sym->data)
  404640:	6960      	ldr	r0, [r4, #20]
  404642:	b108      	cbz	r0, 404648 <_zbar_image_scanner_add_sym+0x12c>
            free(sym->data);
  404644:	4b3b      	ldr	r3, [pc, #236]	; (404734 <_zbar_image_scanner_add_sym+0x218>)
  404646:	4798      	blx	r3
        sym->data = NULL;
  404648:	2300      	movs	r3, #0
  40464a:	6163      	str	r3, [r4, #20]
        sym->datalen = sym->data_alloc = 0;
  40464c:	60e3      	str	r3, [r4, #12]
  40464e:	6123      	str	r3, [r4, #16]
        zbar_symbol_t *entry = cache_lookup(iscn, sym);
        if(!entry) {
            /* FIXME reuse sym */
            entry = _zbar_image_scanner_alloc_sym(iscn, sym->type,
                                                  sym->datalen + 1);
            entry->configs = sym->configs;
  404650:	686b      	ldr	r3, [r5, #4]
  404652:	6063      	str	r3, [r4, #4]
            entry->modifiers = sym->modifiers;
  404654:	68ab      	ldr	r3, [r5, #8]
  404656:	60a3      	str	r3, [r4, #8]
            memcpy(entry->data, sym->data, sym->datalen);
  404658:	6960      	ldr	r0, [r4, #20]
  40465a:	6969      	ldr	r1, [r5, #20]
  40465c:	692a      	ldr	r2, [r5, #16]
  40465e:	4b37      	ldr	r3, [pc, #220]	; (40473c <_zbar_image_scanner_add_sym+0x220>)
  404660:	4798      	blx	r3
            entry->time = sym->time - CACHE_HYSTERESIS;
  404662:	6b6b      	ldr	r3, [r5, #52]	; 0x34
  404664:	f5a3 63fa 	sub.w	r3, r3, #2000	; 0x7d0
  404668:	6363      	str	r3, [r4, #52]	; 0x34
            entry->cache_count = 0;
  40466a:	2300      	movs	r3, #0
  40466c:	63a3      	str	r3, [r4, #56]	; 0x38
            /* add to cache */
            entry->next = iscn->cache;
  40466e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
  404670:	62e3      	str	r3, [r4, #44]	; 0x2c
            iscn->cache = entry;
  404672:	65fc      	str	r4, [r7, #92]	; 0x5c
        }

        /* consistency check and hysteresis */
        age = sym->time - entry->time;
  404674:	6b6a      	ldr	r2, [r5, #52]	; 0x34
  404676:	6b63      	ldr	r3, [r4, #52]	; 0x34
  404678:	1ad3      	subs	r3, r2, r3
        entry->time = sym->time;
  40467a:	6362      	str	r2, [r4, #52]	; 0x34
        near_thresh = (age < CACHE_PROXIMITY);
        far_thresh = (age >= CACHE_HYSTERESIS);
        dup = (entry->cache_count >= 0);
  40467c:	6ba2      	ldr	r2, [r4, #56]	; 0x38
        if((!dup && !near_thresh) || far_thresh) {
  40467e:	2a00      	cmp	r2, #0
  404680:	da45      	bge.n	40470e <_zbar_image_scanner_add_sym+0x1f2>
  404682:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
  404686:	d308      	bcc.n	40469a <_zbar_image_scanner_add_sym+0x17e>
            int type = sym->type;
            int h = _zbar_get_symbol_hash(type);
  404688:	8828      	ldrh	r0, [r5, #0]
  40468a:	4b2d      	ldr	r3, [pc, #180]	; (404740 <_zbar_image_scanner_add_sym+0x224>)
  40468c:	4798      	blx	r3
            entry->cache_count = -iscn->sym_configs[0][h];
  40468e:	301c      	adds	r0, #28
  404690:	f857 3020 	ldr.w	r3, [r7, r0, lsl #2]
  404694:	425b      	negs	r3, r3
  404696:	63a3      	str	r3, [r4, #56]	; 0x38
  404698:	e001      	b.n	40469e <_zbar_image_scanner_add_sym+0x182>
        }
        else if(dup || near_thresh)
            entry->cache_count++;
  40469a:	3201      	adds	r2, #1
  40469c:	63a2      	str	r2, [r4, #56]	; 0x38

        sym->cache_count = entry->cache_count;
  40469e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  4046a0:	63aa      	str	r2, [r5, #56]	; 0x38
                                 zbar_symbol_t *sym)
{
    zbar_symbol_set_t *syms;
    cache_sym(iscn, sym);

    syms = iscn->syms;
  4046a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    if(sym->cache_count || !syms->tail) {
  4046a4:	b92a      	cbnz	r2, 4046b2 <_zbar_image_scanner_add_sym+0x196>
  4046a6:	e002      	b.n	4046ae <_zbar_image_scanner_add_sym+0x192>
            entry->cache_count++;

        sym->cache_count = entry->cache_count;
    }
    else
        sym->cache_count = 0;
  4046a8:	2300      	movs	r3, #0
  4046aa:	638b      	str	r3, [r1, #56]	; 0x38
                                 zbar_symbol_t *sym)
{
    zbar_symbol_set_t *syms;
    cache_sym(iscn, sym);

    syms = iscn->syms;
  4046ac:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    if(sym->cache_count || !syms->tail) {
  4046ae:	68da      	ldr	r2, [r3, #12]
  4046b0:	b91a      	cbnz	r2, 4046ba <_zbar_image_scanner_add_sym+0x19e>
        sym->next = syms->head;
  4046b2:	689a      	ldr	r2, [r3, #8]
  4046b4:	62ea      	str	r2, [r5, #44]	; 0x2c
        syms->head = sym;
  4046b6:	609d      	str	r5, [r3, #8]
  4046b8:	e003      	b.n	4046c2 <_zbar_image_scanner_add_sym+0x1a6>
    }
    else {
        sym->next = syms->tail->next;
  4046ba:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
  4046bc:	62ea      	str	r2, [r5, #44]	; 0x2c
        syms->tail->next = sym;
  4046be:	68da      	ldr	r2, [r3, #12]
  4046c0:	62d5      	str	r5, [r2, #44]	; 0x2c
    }

    if(!sym->cache_count)
  4046c2:	6baa      	ldr	r2, [r5, #56]	; 0x38
  4046c4:	b91a      	cbnz	r2, 4046ce <_zbar_image_scanner_add_sym+0x1b2>
        syms->nsyms++;
  4046c6:	685a      	ldr	r2, [r3, #4]
  4046c8:	3201      	adds	r2, #1
  4046ca:	605a      	str	r2, [r3, #4]
  4046cc:	e002      	b.n	4046d4 <_zbar_image_scanner_add_sym+0x1b8>
    else if(!syms->tail)
  4046ce:	68da      	ldr	r2, [r3, #12]
  4046d0:	b902      	cbnz	r2, 4046d4 <_zbar_image_scanner_add_sym+0x1b8>
        syms->tail = sym;
  4046d2:	60dd      	str	r5, [r3, #12]
typedef int refcnt_t;

static inline int _zbar_refcnt (refcnt_t *cnt,
                                int delta)
{
    int rc = (*cnt += delta);
  4046d4:	6aab      	ldr	r3, [r5, #40]	; 0x28
  4046d6:	3301      	adds	r3, #1
  4046d8:	62ab      	str	r3, [r5, #40]	; 0x28
    assert(rc >= 0);
  4046da:	2b00      	cmp	r3, #0
  4046dc:	da1b      	bge.n	404716 <_zbar_image_scanner_add_sym+0x1fa>
  4046de:	4819      	ldr	r0, [pc, #100]	; (404744 <_zbar_image_scanner_add_sym+0x228>)
  4046e0:	2157      	movs	r1, #87	; 0x57
  4046e2:	4a19      	ldr	r2, [pc, #100]	; (404748 <_zbar_image_scanner_add_sym+0x22c>)
  4046e4:	4b19      	ldr	r3, [pc, #100]	; (40474c <_zbar_image_scanner_add_sym+0x230>)
  4046e6:	4c10      	ldr	r4, [pc, #64]	; (404728 <_zbar_image_scanner_add_sym+0x20c>)
  4046e8:	47a0      	blx	r4
    if(iscn->enable_cache) {
        uint32_t age, near_thresh, far_thresh, dup;
        zbar_symbol_t *entry = cache_lookup(iscn, sym);
        if(!entry) {
            /* FIXME reuse sym */
            entry = _zbar_image_scanner_alloc_sym(iscn, sym->type,
  4046ea:	f8b5 8000 	ldrh.w	r8, [r5]
                                                  sym->datalen + 1);
  4046ee:	692e      	ldr	r6, [r5, #16]
  4046f0:	3601      	adds	r6, #1
{
    /* recycle old or alloc new symbol */
    zbar_symbol_t *sym = NULL;
    int i;
    for(i = 0; i < RECYCLE_BUCKETS - 1; i++)
        if(datalen <= 1 << (i * 2))
  4046f2:	2e01      	cmp	r6, #1
  4046f4:	f77f af75 	ble.w	4045e2 <_zbar_image_scanner_add_sym+0xc6>
  4046f8:	2e04      	cmp	r6, #4
  4046fa:	f77f af44 	ble.w	404586 <_zbar_image_scanner_add_sym+0x6a>
  4046fe:	2e10      	cmp	r6, #16
  404700:	f77f af43 	ble.w	40458a <_zbar_image_scanner_add_sym+0x6e>
  404704:	2e40      	cmp	r6, #64	; 0x40
  404706:	f77f af42 	ble.w	40458e <_zbar_image_scanner_add_sym+0x72>
                               int datalen)
{
    /* recycle old or alloc new symbol */
    zbar_symbol_t *sym = NULL;
    int i;
    for(i = 0; i < RECYCLE_BUCKETS - 1; i++)
  40470a:	2304      	movs	r3, #4
  40470c:	e742      	b.n	404594 <_zbar_image_scanner_add_sym+0x78>
        age = sym->time - entry->time;
        entry->time = sym->time;
        near_thresh = (age < CACHE_PROXIMITY);
        far_thresh = (age >= CACHE_HYSTERESIS);
        dup = (entry->cache_count >= 0);
        if((!dup && !near_thresh) || far_thresh) {
  40470e:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
  404712:	d2b9      	bcs.n	404688 <_zbar_image_scanner_add_sym+0x16c>
  404714:	e7c1      	b.n	40469a <_zbar_image_scanner_add_sym+0x17e>
  404716:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40471a:	bf00      	nop
  40471c:	0040f80c 	.word	0x0040f80c
  404720:	0040fab4 	.word	0x0040fab4
  404724:	0040f854 	.word	0x0040f854
  404728:	004062e9 	.word	0x004062e9
  40472c:	00406325 	.word	0x00406325
  404730:	0040f86c 	.word	0x0040f86c
  404734:	00406e41 	.word	0x00406e41
  404738:	00406e31 	.word	0x00406e31
  40473c:	0040746d 	.word	0x0040746d
  404740:	00405a61 	.word	0x00405a61
  404744:	0040f710 	.word	0x0040f710
  404748:	0040fad4 	.word	0x0040fad4
  40474c:	0040f73c 	.word	0x0040f73c
  404750:	00407409 	.word	0x00407409
  404754:	00404405 	.word	0x00404405

00404758 <symbol_handler>:
    _zbar_qr_found_line(iscn->qr, vert, line);
}
#endif

static void symbol_handler (zbar_decoder_t *dcode)
{
  404758:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40475c:	b087      	sub	sp, #28
  40475e:	4680      	mov	r8, r0
    zbar_image_scanner_t *iscn = zbar_decoder_get_userdata(dcode);
  404760:	4b7a      	ldr	r3, [pc, #488]	; (40494c <symbol_handler+0x1f4>)
  404762:	4798      	blx	r3
  404764:	4607      	mov	r7, r0
    zbar_symbol_type_t type = zbar_decoder_get_type(dcode);
  404766:	4640      	mov	r0, r8
  404768:	4b79      	ldr	r3, [pc, #484]	; (404950 <symbol_handler+0x1f8>)
  40476a:	4798      	blx	r3
  40476c:	4605      	mov	r5, r0
    if(type == ZBAR_QRCODE) {
        qr_handler(iscn);
        return;
    }
#else
    assert(type != ZBAR_QRCODE);
  40476e:	2840      	cmp	r0, #64	; 0x40
  404770:	d106      	bne.n	404780 <symbol_handler+0x28>
  404772:	4878      	ldr	r0, [pc, #480]	; (404954 <symbol_handler+0x1fc>)
  404774:	f44f 71cc 	mov.w	r1, #408	; 0x198
  404778:	4a77      	ldr	r2, [pc, #476]	; (404958 <symbol_handler+0x200>)
  40477a:	4b78      	ldr	r3, [pc, #480]	; (40495c <symbol_handler+0x204>)
  40477c:	4c78      	ldr	r4, [pc, #480]	; (404960 <symbol_handler+0x208>)
  40477e:	47a0      	blx	r4
#endif

    if(TEST_CFG(iscn, ZBAR_CFG_POSITION)) {
  404780:	6e3b      	ldr	r3, [r7, #96]	; 0x60
  404782:	f013 0f01 	tst.w	r3, #1
  404786:	d014      	beq.n	4047b2 <symbol_handler+0x5a>
        /* tmp position fixup */
        int w = zbar_scanner_get_width(iscn->scn);
  404788:	6838      	ldr	r0, [r7, #0]
  40478a:	4b76      	ldr	r3, [pc, #472]	; (404964 <symbol_handler+0x20c>)
  40478c:	4798      	blx	r3
  40478e:	4601      	mov	r1, r0
        int u = iscn->umin + iscn->du * zbar_scanner_get_edge(iscn->scn, w, 0);
  404790:	6a7c      	ldr	r4, [r7, #36]	; 0x24
  404792:	6a3e      	ldr	r6, [r7, #32]
  404794:	6838      	ldr	r0, [r7, #0]
  404796:	2200      	movs	r2, #0
  404798:	4b73      	ldr	r3, [pc, #460]	; (404968 <symbol_handler+0x210>)
  40479a:	4798      	blx	r3
  40479c:	fb06 4900 	mla	r9, r6, r0, r4
        if(iscn->dx) {
  4047a0:	69bb      	ldr	r3, [r7, #24]
  4047a2:	b113      	cbz	r3, 4047aa <symbol_handler+0x52>
            x = u;
            y = iscn->v;
  4047a4:	f8d7 a028 	ldr.w	sl, [r7, #40]	; 0x28
  4047a8:	e006      	b.n	4047b8 <symbol_handler+0x60>
        }
        else {
            x = iscn->v;
            y = u;
  4047aa:	46ca      	mov	sl, r9
        if(iscn->dx) {
            x = u;
            y = iscn->v;
        }
        else {
            x = iscn->v;
  4047ac:	f8d7 9028 	ldr.w	r9, [r7, #40]	; 0x28
  4047b0:	e002      	b.n	4047b8 <symbol_handler+0x60>

static void symbol_handler (zbar_decoder_t *dcode)
{
    zbar_image_scanner_t *iscn = zbar_decoder_get_userdata(dcode);
    zbar_symbol_type_t type = zbar_decoder_get_type(dcode);
    int x = 0, y = 0, dir;
  4047b2:	f04f 0a00 	mov.w	sl, #0
  4047b6:	46d1      	mov	r9, sl
            y = u;
        }
    }

    /* FIXME debug flag to save/display all PARTIALs */
    if(type <= ZBAR_PARTIAL) {
  4047b8:	2d01      	cmp	r5, #1
  4047ba:	d80f      	bhi.n	4047dc <symbol_handler+0x84>
        zprintf(256, "partial symbol @(%d,%d)\n", x, y);
  4047bc:	4b6b      	ldr	r3, [pc, #428]	; (40496c <symbol_handler+0x214>)
  4047be:	681b      	ldr	r3, [r3, #0]
  4047c0:	2bff      	cmp	r3, #255	; 0xff
  4047c2:	f340 8149 	ble.w	404a58 <symbol_handler+0x300>
  4047c6:	4b6a      	ldr	r3, [pc, #424]	; (404970 <symbol_handler+0x218>)
  4047c8:	681b      	ldr	r3, [r3, #0]
  4047ca:	68d8      	ldr	r0, [r3, #12]
  4047cc:	f8cd a000 	str.w	sl, [sp]
  4047d0:	4968      	ldr	r1, [pc, #416]	; (404974 <symbol_handler+0x21c>)
  4047d2:	4a61      	ldr	r2, [pc, #388]	; (404958 <symbol_handler+0x200>)
  4047d4:	464b      	mov	r3, r9
  4047d6:	4c68      	ldr	r4, [pc, #416]	; (404978 <symbol_handler+0x220>)
  4047d8:	47a0      	blx	r4
  4047da:	e13d      	b.n	404a58 <symbol_handler+0x300>
        return;
    }

    data = zbar_decoder_get_data(dcode);
  4047dc:	4640      	mov	r0, r8
  4047de:	4b67      	ldr	r3, [pc, #412]	; (40497c <symbol_handler+0x224>)
  4047e0:	4798      	blx	r3
  4047e2:	9005      	str	r0, [sp, #20]
    datalen = zbar_decoder_get_data_length(dcode);
  4047e4:	4640      	mov	r0, r8
  4047e6:	4b66      	ldr	r3, [pc, #408]	; (404980 <symbol_handler+0x228>)
  4047e8:	4798      	blx	r3
  4047ea:	4606      	mov	r6, r0

    /* FIXME need better symbol matching */
    for(sym = iscn->syms->head; sym; sym = sym->next)
  4047ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  4047ee:	689c      	ldr	r4, [r3, #8]
  4047f0:	2c00      	cmp	r4, #0
  4047f2:	d043      	beq.n	40487c <symbol_handler+0x124>
        if(sym->type == type &&
           sym->datalen == datalen &&
           !memcmp(sym->data, data, datalen)) {
  4047f4:	f8df b1b0 	ldr.w	fp, [pc, #432]	; 4049a8 <symbol_handler+0x250>
    data = zbar_decoder_get_data(dcode);
    datalen = zbar_decoder_get_data_length(dcode);

    /* FIXME need better symbol matching */
    for(sym = iscn->syms->head; sym; sym = sym->next)
        if(sym->type == type &&
  4047f8:	8823      	ldrh	r3, [r4, #0]
  4047fa:	42ab      	cmp	r3, r5
  4047fc:	d13b      	bne.n	404876 <symbol_handler+0x11e>
  4047fe:	6923      	ldr	r3, [r4, #16]
  404800:	42b3      	cmp	r3, r6
  404802:	d138      	bne.n	404876 <symbol_handler+0x11e>
           sym->datalen == datalen &&
           !memcmp(sym->data, data, datalen)) {
  404804:	6960      	ldr	r0, [r4, #20]
  404806:	9905      	ldr	r1, [sp, #20]
  404808:	4632      	mov	r2, r6
  40480a:	47d8      	blx	fp
    datalen = zbar_decoder_get_data_length(dcode);

    /* FIXME need better symbol matching */
    for(sym = iscn->syms->head; sym; sym = sym->next)
        if(sym->type == type &&
           sym->datalen == datalen &&
  40480c:	2800      	cmp	r0, #0
  40480e:	d132      	bne.n	404876 <symbol_handler+0x11e>
           !memcmp(sym->data, data, datalen)) {
            sym->quality++;
  404810:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  404812:	3301      	adds	r3, #1
  404814:	63e3      	str	r3, [r4, #60]	; 0x3c
            zprintf(224, "dup symbol @(%d,%d): dup %s: %.20s\n",
  404816:	4b55      	ldr	r3, [pc, #340]	; (40496c <symbol_handler+0x214>)
  404818:	681b      	ldr	r3, [r3, #0]
  40481a:	2bdf      	cmp	r3, #223	; 0xdf
  40481c:	dd10      	ble.n	404840 <symbol_handler+0xe8>
  40481e:	4b54      	ldr	r3, [pc, #336]	; (404970 <symbol_handler+0x218>)
  404820:	681b      	ldr	r3, [r3, #0]
  404822:	68de      	ldr	r6, [r3, #12]
  404824:	4628      	mov	r0, r5
  404826:	4b57      	ldr	r3, [pc, #348]	; (404984 <symbol_handler+0x22c>)
  404828:	4798      	blx	r3
  40482a:	f8cd a000 	str.w	sl, [sp]
  40482e:	9001      	str	r0, [sp, #4]
  404830:	9b05      	ldr	r3, [sp, #20]
  404832:	9302      	str	r3, [sp, #8]
  404834:	4630      	mov	r0, r6
  404836:	4954      	ldr	r1, [pc, #336]	; (404988 <symbol_handler+0x230>)
  404838:	4a47      	ldr	r2, [pc, #284]	; (404958 <symbol_handler+0x200>)
  40483a:	464b      	mov	r3, r9
  40483c:	4d4e      	ldr	r5, [pc, #312]	; (404978 <symbol_handler+0x220>)
  40483e:	47a8      	blx	r5
                    x, y, zbar_get_symbol_name(type), data);
            if(TEST_CFG(iscn, ZBAR_CFG_POSITION))
  404840:	6e3b      	ldr	r3, [r7, #96]	; 0x60
  404842:	f013 0f01 	tst.w	r3, #1
  404846:	f000 8107 	beq.w	404a58 <symbol_handler+0x300>

static inline void sym_add_point (zbar_symbol_t *sym,
                                  int x,
                                  int y)
{
    int i = sym->npts;
  40484a:	69e5      	ldr	r5, [r4, #28]
    if(++sym->npts >= sym->pts_alloc)
  40484c:	1c6b      	adds	r3, r5, #1
  40484e:	61e3      	str	r3, [r4, #28]
  404850:	69a1      	ldr	r1, [r4, #24]
  404852:	428b      	cmp	r3, r1
  404854:	d306      	bcc.n	404864 <symbol_handler+0x10c>
        sym->pts = realloc(sym->pts, ++sym->pts_alloc * sizeof(point_t));
  404856:	3101      	adds	r1, #1
  404858:	61a1      	str	r1, [r4, #24]
  40485a:	6a20      	ldr	r0, [r4, #32]
  40485c:	00c9      	lsls	r1, r1, #3
  40485e:	4b4b      	ldr	r3, [pc, #300]	; (40498c <symbol_handler+0x234>)
  404860:	4798      	blx	r3
  404862:	6220      	str	r0, [r4, #32]
    sym->pts[i].x = x;
  404864:	6a23      	ldr	r3, [r4, #32]
  404866:	f843 9035 	str.w	r9, [r3, r5, lsl #3]
    sym->pts[i].y = y;
  40486a:	6a23      	ldr	r3, [r4, #32]
  40486c:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
  404870:	f8c3 a004 	str.w	sl, [r3, #4]
  404874:	e0f0      	b.n	404a58 <symbol_handler+0x300>

    data = zbar_decoder_get_data(dcode);
    datalen = zbar_decoder_get_data_length(dcode);

    /* FIXME need better symbol matching */
    for(sym = iscn->syms->head; sym; sym = sym->next)
  404876:	6ae4      	ldr	r4, [r4, #44]	; 0x2c
  404878:	2c00      	cmp	r4, #0
  40487a:	d1bd      	bne.n	4047f8 <symbol_handler+0xa0>
                /* FIXME should be polygon */
                sym_add_point(sym, x, y);
            return;
        }

    sym = _zbar_image_scanner_alloc_sym(iscn, type, datalen + 1);
  40487c:	3601      	adds	r6, #1
{
    /* recycle old or alloc new symbol */
    zbar_symbol_t *sym = NULL;
    int i;
    for(i = 0; i < RECYCLE_BUCKETS - 1; i++)
        if(datalen <= 1 << (i * 2))
  40487e:	2e01      	cmp	r6, #1
  404880:	dd36      	ble.n	4048f0 <symbol_handler+0x198>
  404882:	2e04      	cmp	r6, #4
  404884:	dd06      	ble.n	404894 <symbol_handler+0x13c>
  404886:	2e10      	cmp	r6, #16
  404888:	dd06      	ble.n	404898 <symbol_handler+0x140>
  40488a:	2e40      	cmp	r6, #64	; 0x40
                               int datalen)
{
    /* recycle old or alloc new symbol */
    zbar_symbol_t *sym = NULL;
    int i;
    for(i = 0; i < RECYCLE_BUCKETS - 1; i++)
  40488c:	bfd8      	it	le
  40488e:	2303      	movle	r3, #3
        if(datalen <= 1 << (i * 2))
  404890:	dd03      	ble.n	40489a <symbol_handler+0x142>
  404892:	e005      	b.n	4048a0 <symbol_handler+0x148>
                               int datalen)
{
    /* recycle old or alloc new symbol */
    zbar_symbol_t *sym = NULL;
    int i;
    for(i = 0; i < RECYCLE_BUCKETS - 1; i++)
  404894:	2301      	movs	r3, #1
  404896:	e000      	b.n	40489a <symbol_handler+0x142>
  404898:	2302      	movs	r3, #2
        if(datalen <= 1 << (i * 2))
            break;

    for(; i > 0; i--)
  40489a:	2b00      	cmp	r3, #0
  40489c:	dc01      	bgt.n	4048a2 <symbol_handler+0x14a>
  40489e:	e027      	b.n	4048f0 <symbol_handler+0x198>
                               int datalen)
{
    /* recycle old or alloc new symbol */
    zbar_symbol_t *sym = NULL;
    int i;
    for(i = 0; i < RECYCLE_BUCKETS - 1; i++)
  4048a0:	2304      	movs	r3, #4
        if(datalen <= 1 << (i * 2))
            break;

    for(; i > 0; i--)
        if((sym = iscn->recycle[i].head)) {
  4048a2:	eb07 02c3 	add.w	r2, r7, r3, lsl #3
  4048a6:	6b54      	ldr	r4, [r2, #52]	; 0x34
  4048a8:	eb07 02c3 	add.w	r2, r7, r3, lsl #3
  4048ac:	b164      	cbz	r4, 4048c8 <symbol_handler+0x170>
  4048ae:	e002      	b.n	4048b6 <symbol_handler+0x15e>
  4048b0:	3a08      	subs	r2, #8
  4048b2:	6b54      	ldr	r4, [r2, #52]	; 0x34
  4048b4:	b144      	cbz	r4, 4048c8 <symbol_handler+0x170>
  4048b6:	eb07 0183 	add.w	r1, r7, r3, lsl #2
            STAT(sym_recycle[i]);
  4048ba:	f8d1 20d8 	ldr.w	r2, [r1, #216]	; 0xd8
  4048be:	3201      	adds	r2, #1
  4048c0:	f8c1 20d8 	str.w	r2, [r1, #216]	; 0xd8
            break;
        }

    if(sym) {
  4048c4:	b91c      	cbnz	r4, 4048ce <symbol_handler+0x176>
  4048c6:	e013      	b.n	4048f0 <symbol_handler+0x198>
    int i;
    for(i = 0; i < RECYCLE_BUCKETS - 1; i++)
        if(datalen <= 1 << (i * 2))
            break;

    for(; i > 0; i--)
  4048c8:	3b01      	subs	r3, #1
  4048ca:	d1f1      	bne.n	4048b0 <symbol_handler+0x158>
  4048cc:	e010      	b.n	4048f0 <symbol_handler+0x198>
            STAT(sym_recycle[i]);
            break;
        }

    if(sym) {
        iscn->recycle[i].head = sym->next;
  4048ce:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  4048d0:	eb07 03c3 	add.w	r3, r7, r3, lsl #3
  4048d4:	635a      	str	r2, [r3, #52]	; 0x34
        sym->next = NULL;
  4048d6:	2200      	movs	r2, #0
  4048d8:	62e2      	str	r2, [r4, #44]	; 0x2c
        assert(iscn->recycle[i].nsyms);
  4048da:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  4048dc:	b92a      	cbnz	r2, 4048ea <symbol_handler+0x192>
  4048de:	481d      	ldr	r0, [pc, #116]	; (404954 <symbol_handler+0x1fc>)
  4048e0:	21e8      	movs	r1, #232	; 0xe8
  4048e2:	4a2b      	ldr	r2, [pc, #172]	; (404990 <symbol_handler+0x238>)
  4048e4:	4b2b      	ldr	r3, [pc, #172]	; (404994 <symbol_handler+0x23c>)
  4048e6:	4c1e      	ldr	r4, [pc, #120]	; (404960 <symbol_handler+0x208>)
  4048e8:	47a0      	blx	r4
        iscn->recycle[i].nsyms--;
  4048ea:	3a01      	subs	r2, #1
  4048ec:	631a      	str	r2, [r3, #48]	; 0x30
  4048ee:	e009      	b.n	404904 <symbol_handler+0x1ac>
    }
    else {
        sym = calloc(1, sizeof(zbar_symbol_t));
  4048f0:	2001      	movs	r0, #1
  4048f2:	2140      	movs	r1, #64	; 0x40
  4048f4:	4b28      	ldr	r3, [pc, #160]	; (404998 <symbol_handler+0x240>)
  4048f6:	4798      	blx	r3
  4048f8:	4604      	mov	r4, r0
        STAT(sym_new);
  4048fa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
  4048fe:	3301      	adds	r3, #1
  404900:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    }

    /* init new symbol */
    sym->type = type;
  404904:	8025      	strh	r5, [r4, #0]
    sym->quality = 1;
  404906:	2301      	movs	r3, #1
  404908:	63e3      	str	r3, [r4, #60]	; 0x3c
    sym->npts = 0;
  40490a:	2300      	movs	r3, #0
  40490c:	61e3      	str	r3, [r4, #28]
    sym->orient = ZBAR_ORIENT_UNKNOWN;
  40490e:	22ff      	movs	r2, #255	; 0xff
  404910:	f884 2024 	strb.w	r2, [r4, #36]	; 0x24
    sym->cache_count = 0;
  404914:	63a3      	str	r3, [r4, #56]	; 0x38
    sym->time = iscn->time;
  404916:	693b      	ldr	r3, [r7, #16]
  404918:	6363      	str	r3, [r4, #52]	; 0x34
    assert(!sym->syms);
  40491a:	6b23      	ldr	r3, [r4, #48]	; 0x30
  40491c:	b12b      	cbz	r3, 40492a <symbol_handler+0x1d2>
  40491e:	480d      	ldr	r0, [pc, #52]	; (404954 <symbol_handler+0x1fc>)
  404920:	21f7      	movs	r1, #247	; 0xf7
  404922:	4a1b      	ldr	r2, [pc, #108]	; (404990 <symbol_handler+0x238>)
  404924:	4b1d      	ldr	r3, [pc, #116]	; (40499c <symbol_handler+0x244>)
  404926:	4c0e      	ldr	r4, [pc, #56]	; (404960 <symbol_handler+0x208>)
  404928:	47a0      	blx	r4

    if(datalen > 0) {
  40492a:	2e00      	cmp	r6, #0
  40492c:	dd3e      	ble.n	4049ac <symbol_handler+0x254>
        sym->datalen = datalen - 1;
  40492e:	1e73      	subs	r3, r6, #1
  404930:	6123      	str	r3, [r4, #16]
        if(sym->data_alloc < datalen) {
  404932:	68e3      	ldr	r3, [r4, #12]
  404934:	429e      	cmp	r6, r3
  404936:	d941      	bls.n	4049bc <symbol_handler+0x264>
            if(sym->data)
  404938:	6960      	ldr	r0, [r4, #20]
  40493a:	b108      	cbz	r0, 404940 <symbol_handler+0x1e8>
                free(sym->data);
  40493c:	4b18      	ldr	r3, [pc, #96]	; (4049a0 <symbol_handler+0x248>)
  40493e:	4798      	blx	r3
            sym->data_alloc = datalen;
  404940:	60e6      	str	r6, [r4, #12]
            sym->data = malloc(datalen);
  404942:	4630      	mov	r0, r6
  404944:	4b17      	ldr	r3, [pc, #92]	; (4049a4 <symbol_handler+0x24c>)
  404946:	4798      	blx	r3
  404948:	6160      	str	r0, [r4, #20]
  40494a:	e037      	b.n	4049bc <symbol_handler+0x264>
  40494c:	00402e11 	.word	0x00402e11
  404950:	00402e15 	.word	0x00402e15
  404954:	0040f80c 	.word	0x0040f80c
  404958:	0040f7f0 	.word	0x0040f7f0
  40495c:	0040f878 	.word	0x0040f878
  404960:	004062e9 	.word	0x004062e9
  404964:	00405699 	.word	0x00405699
  404968:	0040569d 	.word	0x0040569d
  40496c:	20000d14 	.word	0x20000d14
  404970:	20000440 	.word	0x20000440
  404974:	0040f88c 	.word	0x0040f88c
  404978:	004066d1 	.word	0x004066d1
  40497c:	00402df9 	.word	0x00402df9
  404980:	00402dfd 	.word	0x00402dfd
  404984:	0040593d 	.word	0x0040593d
  404988:	0040f8ac 	.word	0x0040f8ac
  40498c:	0040770d 	.word	0x0040770d
  404990:	0040fab4 	.word	0x0040fab4
  404994:	0040f854 	.word	0x0040f854
  404998:	00406325 	.word	0x00406325
  40499c:	0040f86c 	.word	0x0040f86c
  4049a0:	00406e41 	.word	0x00406e41
  4049a4:	00406e31 	.word	0x00406e31
  4049a8:	00407409 	.word	0x00407409
        }
    }
    else {
        if(sym->data)
  4049ac:	6960      	ldr	r0, [r4, #20]
  4049ae:	b108      	cbz	r0, 4049b4 <symbol_handler+0x25c>
            free(sym->data);
  4049b0:	4b2b      	ldr	r3, [pc, #172]	; (404a60 <symbol_handler+0x308>)
  4049b2:	4798      	blx	r3
        sym->data = NULL;
  4049b4:	2300      	movs	r3, #0
  4049b6:	6163      	str	r3, [r4, #20]
        sym->datalen = sym->data_alloc = 0;
  4049b8:	60e3      	str	r3, [r4, #12]
  4049ba:	6123      	str	r3, [r4, #16]
                sym_add_point(sym, x, y);
            return;
        }

    sym = _zbar_image_scanner_alloc_sym(iscn, type, datalen + 1);
    sym->configs = zbar_decoder_get_configs(dcode, type);
  4049bc:	4640      	mov	r0, r8
  4049be:	4629      	mov	r1, r5
  4049c0:	4b28      	ldr	r3, [pc, #160]	; (404a64 <symbol_handler+0x30c>)
  4049c2:	4798      	blx	r3
  4049c4:	6060      	str	r0, [r4, #4]
    sym->modifiers = zbar_decoder_get_modifiers(dcode);
  4049c6:	4640      	mov	r0, r8
  4049c8:	4b27      	ldr	r3, [pc, #156]	; (404a68 <symbol_handler+0x310>)
  4049ca:	4798      	blx	r3
  4049cc:	60a0      	str	r0, [r4, #8]
    /* FIXME grab decoder buffer */
    memcpy(sym->data, data, datalen + 1);
  4049ce:	6960      	ldr	r0, [r4, #20]
  4049d0:	9905      	ldr	r1, [sp, #20]
  4049d2:	4632      	mov	r2, r6
  4049d4:	4b25      	ldr	r3, [pc, #148]	; (404a6c <symbol_handler+0x314>)
  4049d6:	4798      	blx	r3

    /* initialize first point */
    if(TEST_CFG(iscn, ZBAR_CFG_POSITION)) {
  4049d8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
  4049da:	f013 0f01 	tst.w	r3, #1
  4049de:	d029      	beq.n	404a34 <symbol_handler+0x2dc>
        zprintf(192, "new symbol @(%d,%d): %s: %.20s\n",
  4049e0:	4b23      	ldr	r3, [pc, #140]	; (404a70 <symbol_handler+0x318>)
  4049e2:	681b      	ldr	r3, [r3, #0]
  4049e4:	2bbf      	cmp	r3, #191	; 0xbf
  4049e6:	dd10      	ble.n	404a0a <symbol_handler+0x2b2>
  4049e8:	4b22      	ldr	r3, [pc, #136]	; (404a74 <symbol_handler+0x31c>)
  4049ea:	681b      	ldr	r3, [r3, #0]
  4049ec:	68de      	ldr	r6, [r3, #12]
  4049ee:	4628      	mov	r0, r5
  4049f0:	4b21      	ldr	r3, [pc, #132]	; (404a78 <symbol_handler+0x320>)
  4049f2:	4798      	blx	r3
  4049f4:	f8cd a000 	str.w	sl, [sp]
  4049f8:	9001      	str	r0, [sp, #4]
  4049fa:	9b05      	ldr	r3, [sp, #20]
  4049fc:	9302      	str	r3, [sp, #8]
  4049fe:	4630      	mov	r0, r6
  404a00:	491e      	ldr	r1, [pc, #120]	; (404a7c <symbol_handler+0x324>)
  404a02:	4a1f      	ldr	r2, [pc, #124]	; (404a80 <symbol_handler+0x328>)
  404a04:	464b      	mov	r3, r9
  404a06:	4d1f      	ldr	r5, [pc, #124]	; (404a84 <symbol_handler+0x32c>)
  404a08:	47a8      	blx	r5

static inline void sym_add_point (zbar_symbol_t *sym,
                                  int x,
                                  int y)
{
    int i = sym->npts;
  404a0a:	69e5      	ldr	r5, [r4, #28]
    if(++sym->npts >= sym->pts_alloc)
  404a0c:	1c6a      	adds	r2, r5, #1
  404a0e:	61e2      	str	r2, [r4, #28]
  404a10:	69a3      	ldr	r3, [r4, #24]
  404a12:	429a      	cmp	r2, r3
  404a14:	d306      	bcc.n	404a24 <symbol_handler+0x2cc>
        sym->pts = realloc(sym->pts, ++sym->pts_alloc * sizeof(point_t));
  404a16:	1c59      	adds	r1, r3, #1
  404a18:	61a1      	str	r1, [r4, #24]
  404a1a:	6a20      	ldr	r0, [r4, #32]
  404a1c:	00c9      	lsls	r1, r1, #3
  404a1e:	4b1a      	ldr	r3, [pc, #104]	; (404a88 <symbol_handler+0x330>)
  404a20:	4798      	blx	r3
  404a22:	6220      	str	r0, [r4, #32]
    sym->pts[i].x = x;
  404a24:	6a23      	ldr	r3, [r4, #32]
  404a26:	f843 9035 	str.w	r9, [r3, r5, lsl #3]
    sym->pts[i].y = y;
  404a2a:	6a23      	ldr	r3, [r4, #32]
  404a2c:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
  404a30:	f8c3 a004 	str.w	sl, [r3, #4]
                x, y, zbar_get_symbol_name(type), data);
        sym_add_point(sym, x, y);
    }

    dir = zbar_decoder_get_direction(dcode);
  404a34:	4640      	mov	r0, r8
  404a36:	4b15      	ldr	r3, [pc, #84]	; (404a8c <symbol_handler+0x334>)
  404a38:	4798      	blx	r3
    if(dir)
  404a3a:	b148      	cbz	r0, 404a50 <symbol_handler+0x2f8>
        sym->orient = (iscn->dy != 0) + ((iscn->du ^ dir) & 2);
  404a3c:	6a3b      	ldr	r3, [r7, #32]
  404a3e:	4043      	eors	r3, r0
  404a40:	f003 0302 	and.w	r3, r3, #2
  404a44:	69fa      	ldr	r2, [r7, #28]
  404a46:	2a00      	cmp	r2, #0
  404a48:	bf18      	it	ne
  404a4a:	3301      	addne	r3, #1
  404a4c:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24

    _zbar_image_scanner_add_sym(iscn, sym);
  404a50:	4638      	mov	r0, r7
  404a52:	4621      	mov	r1, r4
  404a54:	4b0e      	ldr	r3, [pc, #56]	; (404a90 <symbol_handler+0x338>)
  404a56:	4798      	blx	r3
}
  404a58:	b007      	add	sp, #28
  404a5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404a5e:	bf00      	nop
  404a60:	00406e41 	.word	0x00406e41
  404a64:	00402f05 	.word	0x00402f05
  404a68:	00402e1d 	.word	0x00402e1d
  404a6c:	0040746d 	.word	0x0040746d
  404a70:	20000d14 	.word	0x20000d14
  404a74:	20000440 	.word	0x20000440
  404a78:	0040593d 	.word	0x0040593d
  404a7c:	0040f8d4 	.word	0x0040f8d4
  404a80:	0040f7f0 	.word	0x0040f7f0
  404a84:	004066d1 	.word	0x004066d1
  404a88:	0040770d 	.word	0x0040770d
  404a8c:	00402e01 	.word	0x00402e01
  404a90:	0040451d 	.word	0x0040451d

00404a94 <zbar_image_scanner_destroy>:
                i, iscn->stat_sym_recycle[i]);
}
#endif

void zbar_image_scanner_destroy (zbar_image_scanner_t *iscn)
{
  404a94:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  404a98:	b083      	sub	sp, #12
  404a9a:	4607      	mov	r7, r0

#ifndef NO_STATS
static inline void dump_stats (const zbar_image_scanner_t *iscn)
{
    int i;
    zprintf(1, "symbol sets allocated   = %-4d\n", iscn->stat_syms_new);
  404a9c:	4b3e      	ldr	r3, [pc, #248]	; (404b98 <zbar_image_scanner_destroy+0x104>)
  404a9e:	681b      	ldr	r3, [r3, #0]
  404aa0:	2b00      	cmp	r3, #0
  404aa2:	dd32      	ble.n	404b0a <zbar_image_scanner_destroy+0x76>
  404aa4:	4b3d      	ldr	r3, [pc, #244]	; (404b9c <zbar_image_scanner_destroy+0x108>)
  404aa6:	681b      	ldr	r3, [r3, #0]
  404aa8:	68d8      	ldr	r0, [r3, #12]
  404aaa:	493d      	ldr	r1, [pc, #244]	; (404ba0 <zbar_image_scanner_destroy+0x10c>)
  404aac:	4a3d      	ldr	r2, [pc, #244]	; (404ba4 <zbar_image_scanner_destroy+0x110>)
  404aae:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
  404ab2:	4c3d      	ldr	r4, [pc, #244]	; (404ba8 <zbar_image_scanner_destroy+0x114>)
  404ab4:	47a0      	blx	r4
    zprintf(1, "    scanner syms in use = %-4d\trecycled  = %-4d\n",
  404ab6:	4b38      	ldr	r3, [pc, #224]	; (404b98 <zbar_image_scanner_destroy+0x104>)
  404ab8:	681b      	ldr	r3, [r3, #0]
  404aba:	2b00      	cmp	r3, #0
  404abc:	dd25      	ble.n	404b0a <zbar_image_scanner_destroy+0x76>
  404abe:	4b37      	ldr	r3, [pc, #220]	; (404b9c <zbar_image_scanner_destroy+0x108>)
  404ac0:	681b      	ldr	r3, [r3, #0]
  404ac2:	68d8      	ldr	r0, [r3, #12]
  404ac4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
  404ac8:	9300      	str	r3, [sp, #0]
  404aca:	4938      	ldr	r1, [pc, #224]	; (404bac <zbar_image_scanner_destroy+0x118>)
  404acc:	4a35      	ldr	r2, [pc, #212]	; (404ba4 <zbar_image_scanner_destroy+0x110>)
  404ace:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
  404ad2:	47a0      	blx	r4
            iscn->stat_iscn_syms_inuse, iscn->stat_iscn_syms_recycle);
    zprintf(1, "    image syms in use   = %-4d\trecycled  = %-4d\n",
  404ad4:	4b30      	ldr	r3, [pc, #192]	; (404b98 <zbar_image_scanner_destroy+0x104>)
  404ad6:	681b      	ldr	r3, [r3, #0]
  404ad8:	2b00      	cmp	r3, #0
  404ada:	dd16      	ble.n	404b0a <zbar_image_scanner_destroy+0x76>
  404adc:	4b2f      	ldr	r3, [pc, #188]	; (404b9c <zbar_image_scanner_destroy+0x108>)
  404ade:	681b      	ldr	r3, [r3, #0]
  404ae0:	68d8      	ldr	r0, [r3, #12]
  404ae2:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
  404ae6:	9300      	str	r3, [sp, #0]
  404ae8:	4931      	ldr	r1, [pc, #196]	; (404bb0 <zbar_image_scanner_destroy+0x11c>)
  404aea:	4a2e      	ldr	r2, [pc, #184]	; (404ba4 <zbar_image_scanner_destroy+0x110>)
  404aec:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
  404af0:	47a0      	blx	r4
            iscn->stat_img_syms_inuse, iscn->stat_img_syms_recycle);
    zprintf(1, "symbols allocated       = %-4d\n", iscn->stat_sym_new);
  404af2:	4b29      	ldr	r3, [pc, #164]	; (404b98 <zbar_image_scanner_destroy+0x104>)
  404af4:	681b      	ldr	r3, [r3, #0]
  404af6:	2b00      	cmp	r3, #0
  404af8:	dd07      	ble.n	404b0a <zbar_image_scanner_destroy+0x76>
  404afa:	4b28      	ldr	r3, [pc, #160]	; (404b9c <zbar_image_scanner_destroy+0x108>)
  404afc:	681b      	ldr	r3, [r3, #0]
  404afe:	68d8      	ldr	r0, [r3, #12]
  404b00:	492c      	ldr	r1, [pc, #176]	; (404bb4 <zbar_image_scanner_destroy+0x120>)
  404b02:	4a28      	ldr	r2, [pc, #160]	; (404ba4 <zbar_image_scanner_destroy+0x110>)
  404b04:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
  404b08:	47a0      	blx	r4
  404b0a:	f107 05d8 	add.w	r5, r7, #216	; 0xd8
                i, iscn->stat_sym_recycle[i]);
}
#endif

void zbar_image_scanner_destroy (zbar_image_scanner_t *iscn)
{
  404b0e:	2400      	movs	r4, #0
            iscn->stat_iscn_syms_inuse, iscn->stat_iscn_syms_recycle);
    zprintf(1, "    image syms in use   = %-4d\trecycled  = %-4d\n",
            iscn->stat_img_syms_inuse, iscn->stat_img_syms_recycle);
    zprintf(1, "symbols allocated       = %-4d\n", iscn->stat_sym_new);
    for(i = 0; i < RECYCLE_BUCKETS; i++)
        zprintf(1, "     recycled[%d]        = %-4d\n",
  404b10:	4e21      	ldr	r6, [pc, #132]	; (404b98 <zbar_image_scanner_destroy+0x104>)
  404b12:	f8df 9088 	ldr.w	r9, [pc, #136]	; 404b9c <zbar_image_scanner_destroy+0x108>
  404b16:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 404bd0 <zbar_image_scanner_destroy+0x13c>
  404b1a:	6833      	ldr	r3, [r6, #0]
  404b1c:	2b00      	cmp	r3, #0
  404b1e:	dd0a      	ble.n	404b36 <zbar_image_scanner_destroy+0xa2>
  404b20:	f8d9 3000 	ldr.w	r3, [r9]
  404b24:	68d8      	ldr	r0, [r3, #12]
  404b26:	682b      	ldr	r3, [r5, #0]
  404b28:	9300      	str	r3, [sp, #0]
  404b2a:	4641      	mov	r1, r8
  404b2c:	4a1d      	ldr	r2, [pc, #116]	; (404ba4 <zbar_image_scanner_destroy+0x110>)
  404b2e:	4623      	mov	r3, r4
  404b30:	f8df c074 	ldr.w	ip, [pc, #116]	; 404ba8 <zbar_image_scanner_destroy+0x114>
  404b34:	47e0      	blx	ip
    zprintf(1, "    scanner syms in use = %-4d\trecycled  = %-4d\n",
            iscn->stat_iscn_syms_inuse, iscn->stat_iscn_syms_recycle);
    zprintf(1, "    image syms in use   = %-4d\trecycled  = %-4d\n",
            iscn->stat_img_syms_inuse, iscn->stat_img_syms_recycle);
    zprintf(1, "symbols allocated       = %-4d\n", iscn->stat_sym_new);
    for(i = 0; i < RECYCLE_BUCKETS; i++)
  404b36:	3401      	adds	r4, #1
  404b38:	3504      	adds	r5, #4
  404b3a:	2c05      	cmp	r4, #5
  404b3c:	d1ed      	bne.n	404b1a <zbar_image_scanner_destroy+0x86>

void zbar_image_scanner_destroy (zbar_image_scanner_t *iscn)
{
    int i;
    dump_stats(iscn);
    if(iscn->syms) {
  404b3e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
  404b40:	b150      	cbz	r0, 404b58 <zbar_image_scanner_destroy+0xc4>
        if(iscn->syms->refcnt)
  404b42:	6803      	ldr	r3, [r0, #0]
  404b44:	b123      	cbz	r3, 404b50 <zbar_image_scanner_destroy+0xbc>
            zbar_symbol_set_ref(iscn->syms, -1);
  404b46:	f04f 31ff 	mov.w	r1, #4294967295
  404b4a:	4b1b      	ldr	r3, [pc, #108]	; (404bb8 <zbar_image_scanner_destroy+0x124>)
  404b4c:	4798      	blx	r3
  404b4e:	e001      	b.n	404b54 <zbar_image_scanner_destroy+0xc0>
        else
            _zbar_symbol_set_free(iscn->syms);
  404b50:	4b1a      	ldr	r3, [pc, #104]	; (404bbc <zbar_image_scanner_destroy+0x128>)
  404b52:	4798      	blx	r3
        iscn->syms = NULL;
  404b54:	2300      	movs	r3, #0
  404b56:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    if(iscn->scn)
  404b58:	6838      	ldr	r0, [r7, #0]
  404b5a:	b108      	cbz	r0, 404b60 <zbar_image_scanner_destroy+0xcc>
        zbar_scanner_destroy(iscn->scn);
  404b5c:	4b18      	ldr	r3, [pc, #96]	; (404bc0 <zbar_image_scanner_destroy+0x12c>)
  404b5e:	4798      	blx	r3
    iscn->scn = NULL;
  404b60:	2300      	movs	r3, #0
  404b62:	603b      	str	r3, [r7, #0]
    if(iscn->dcode)
  404b64:	6878      	ldr	r0, [r7, #4]
  404b66:	b108      	cbz	r0, 404b6c <zbar_image_scanner_destroy+0xd8>
        zbar_decoder_destroy(iscn->dcode);
  404b68:	4b16      	ldr	r3, [pc, #88]	; (404bc4 <zbar_image_scanner_destroy+0x130>)
  404b6a:	4798      	blx	r3
    iscn->dcode = NULL;
  404b6c:	2300      	movs	r3, #0
  404b6e:	607b      	str	r3, [r7, #4]
  404b70:	463e      	mov	r6, r7
  404b72:	f107 0828 	add.w	r8, r7, #40	; 0x28
    for(i = 0; i < RECYCLE_BUCKETS; i++) {
        zbar_symbol_t *sym, *next;
        for(sym = iscn->recycle[i].head; sym; sym = next) {
            next = sym->next;
            _zbar_symbol_free(sym);
  404b76:	4d14      	ldr	r5, [pc, #80]	; (404bc8 <zbar_image_scanner_destroy+0x134>)
    if(iscn->dcode)
        zbar_decoder_destroy(iscn->dcode);
    iscn->dcode = NULL;
    for(i = 0; i < RECYCLE_BUCKETS; i++) {
        zbar_symbol_t *sym, *next;
        for(sym = iscn->recycle[i].head; sym; sym = next) {
  404b78:	6b70      	ldr	r0, [r6, #52]	; 0x34
  404b7a:	b120      	cbz	r0, 404b86 <zbar_image_scanner_destroy+0xf2>
            next = sym->next;
  404b7c:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
            _zbar_symbol_free(sym);
  404b7e:	47a8      	blx	r5
    if(iscn->dcode)
        zbar_decoder_destroy(iscn->dcode);
    iscn->dcode = NULL;
    for(i = 0; i < RECYCLE_BUCKETS; i++) {
        zbar_symbol_t *sym, *next;
        for(sym = iscn->recycle[i].head; sym; sym = next) {
  404b80:	4620      	mov	r0, r4
  404b82:	2c00      	cmp	r4, #0
  404b84:	d1fa      	bne.n	404b7c <zbar_image_scanner_destroy+0xe8>
  404b86:	3608      	adds	r6, #8
        zbar_scanner_destroy(iscn->scn);
    iscn->scn = NULL;
    if(iscn->dcode)
        zbar_decoder_destroy(iscn->dcode);
    iscn->dcode = NULL;
    for(i = 0; i < RECYCLE_BUCKETS; i++) {
  404b88:	4546      	cmp	r6, r8
  404b8a:	d1f5      	bne.n	404b78 <zbar_image_scanner_destroy+0xe4>
    if(iscn->qr) {
        _zbar_qr_destroy(iscn->qr);
        iscn->qr = NULL;
    }
#endif
    free(iscn);
  404b8c:	4638      	mov	r0, r7
  404b8e:	4b0f      	ldr	r3, [pc, #60]	; (404bcc <zbar_image_scanner_destroy+0x138>)
  404b90:	4798      	blx	r3
}
  404b92:	b003      	add	sp, #12
  404b94:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  404b98:	20000d14 	.word	0x20000d14
  404b9c:	20000440 	.word	0x20000440
  404ba0:	0040f8f8 	.word	0x0040f8f8
  404ba4:	0040f800 	.word	0x0040f800
  404ba8:	004066d1 	.word	0x004066d1
  404bac:	0040f91c 	.word	0x0040f91c
  404bb0:	0040f954 	.word	0x0040f954
  404bb4:	0040f98c 	.word	0x0040f98c
  404bb8:	00405af1 	.word	0x00405af1
  404bbc:	00405ba9 	.word	0x00405ba9
  404bc0:	00405641 	.word	0x00405641
  404bc4:	00402c95 	.word	0x00402c95
  404bc8:	00405b71 	.word	0x00405b71
  404bcc:	00406e41 	.word	0x00406e41
  404bd0:	0040f9b0 	.word	0x0040f9b0

00404bd4 <zbar_image_scanner_create>:

    _zbar_image_scanner_add_sym(iscn, sym);
}

zbar_image_scanner_t *zbar_image_scanner_create ()
{
  404bd4:	b570      	push	{r4, r5, r6, lr}
    zbar_image_scanner_t *iscn = calloc(1, sizeof(zbar_image_scanner_t));
  404bd6:	2001      	movs	r0, #1
  404bd8:	21ec      	movs	r1, #236	; 0xec
  404bda:	4b28      	ldr	r3, [pc, #160]	; (404c7c <zbar_image_scanner_create+0xa8>)
  404bdc:	4798      	blx	r3
    if(!iscn)
  404bde:	2800      	cmp	r0, #0
  404be0:	d049      	beq.n	404c76 <zbar_image_scanner_create+0xa2>
  404be2:	4604      	mov	r4, r0
        return(NULL);
    iscn->dcode = zbar_decoder_create();
  404be4:	4b26      	ldr	r3, [pc, #152]	; (404c80 <zbar_image_scanner_create+0xac>)
  404be6:	4798      	blx	r3
  404be8:	6060      	str	r0, [r4, #4]
    iscn->scn = zbar_scanner_create(iscn->dcode);
  404bea:	4b26      	ldr	r3, [pc, #152]	; (404c84 <zbar_image_scanner_create+0xb0>)
  404bec:	4798      	blx	r3
  404bee:	6020      	str	r0, [r4, #0]
    if(!iscn->dcode || !iscn->scn) {
  404bf0:	6863      	ldr	r3, [r4, #4]
  404bf2:	b103      	cbz	r3, 404bf6 <zbar_image_scanner_create+0x22>
  404bf4:	b920      	cbnz	r0, 404c00 <zbar_image_scanner_create+0x2c>
        zbar_image_scanner_destroy(iscn);
  404bf6:	4620      	mov	r0, r4
  404bf8:	4b23      	ldr	r3, [pc, #140]	; (404c88 <zbar_image_scanner_create+0xb4>)
  404bfa:	4798      	blx	r3
        return(NULL);
  404bfc:	2000      	movs	r0, #0
  404bfe:	bd70      	pop	{r4, r5, r6, pc}
    }
    zbar_decoder_set_userdata(iscn->dcode, iscn);
  404c00:	4618      	mov	r0, r3
  404c02:	4621      	mov	r1, r4
  404c04:	4b21      	ldr	r3, [pc, #132]	; (404c8c <zbar_image_scanner_create+0xb8>)
  404c06:	4798      	blx	r3
    zbar_decoder_set_handler(iscn->dcode, symbol_handler);
  404c08:	6860      	ldr	r0, [r4, #4]
  404c0a:	4921      	ldr	r1, [pc, #132]	; (404c90 <zbar_image_scanner_create+0xbc>)
  404c0c:	4b21      	ldr	r3, [pc, #132]	; (404c94 <zbar_image_scanner_create+0xc0>)
  404c0e:	4798      	blx	r3
#ifdef ENABLE_QRCODE
    iscn->qr = _zbar_qr_create();
#endif

    /* apply default configuration */
    CFG(iscn, ZBAR_CFG_X_DENSITY) = 1;
  404c10:	2301      	movs	r3, #1
  404c12:	66a3      	str	r3, [r4, #104]	; 0x68
    CFG(iscn, ZBAR_CFG_Y_DENSITY) = 1;
  404c14:	66e3      	str	r3, [r4, #108]	; 0x6c
    cfg -= ZBAR_CFG_POSITION;

    if(!val)
        iscn->config &= ~(1 << cfg);
    else if(val == 1)
        iscn->config |= (1 << cfg);
  404c16:	6e23      	ldr	r3, [r4, #96]	; 0x60
  404c18:	f043 0301 	orr.w	r3, r3, #1
  404c1c:	6623      	str	r3, [r4, #96]	; 0x60
  404c1e:	f104 036c 	add.w	r3, r4, #108	; 0x6c
  404c22:	f104 01bc 	add.w	r1, r4, #188	; 0xbc
            i = _zbar_get_symbol_hash(sym);
            iscn->sym_configs[c][i] = val;
        }
        else
            for(i = 0; i < NUM_SYMS; i++)
                iscn->sym_configs[c][i] = val;
  404c26:	2202      	movs	r2, #2
  404c28:	f843 2f04 	str.w	r2, [r3, #4]!
        if(sym > ZBAR_PARTIAL) {
            i = _zbar_get_symbol_hash(sym);
            iscn->sym_configs[c][i] = val;
        }
        else
            for(i = 0; i < NUM_SYMS; i++)
  404c2c:	428b      	cmp	r3, r1
  404c2e:	d1fb      	bne.n	404c28 <zbar_image_scanner_create+0x54>
        int c, i;
        if(cfg > ZBAR_CFG_UNCERTAINTY)
            return(1);
        c = cfg - ZBAR_CFG_UNCERTAINTY;
        if(sym > ZBAR_PARTIAL) {
            i = _zbar_get_symbol_hash(sym);
  404c30:	2040      	movs	r0, #64	; 0x40
  404c32:	4d19      	ldr	r5, [pc, #100]	; (404c98 <zbar_image_scanner_create+0xc4>)
  404c34:	47a8      	blx	r5
            iscn->sym_configs[c][i] = val;
  404c36:	301c      	adds	r0, #28
  404c38:	2600      	movs	r6, #0
  404c3a:	f844 6020 	str.w	r6, [r4, r0, lsl #2]
        int c, i;
        if(cfg > ZBAR_CFG_UNCERTAINTY)
            return(1);
        c = cfg - ZBAR_CFG_UNCERTAINTY;
        if(sym > ZBAR_PARTIAL) {
            i = _zbar_get_symbol_hash(sym);
  404c3e:	2080      	movs	r0, #128	; 0x80
  404c40:	47a8      	blx	r5
            iscn->sym_configs[c][i] = val;
  404c42:	301c      	adds	r0, #28
  404c44:	f844 6020 	str.w	r6, [r4, r0, lsl #2]
        int c, i;
        if(cfg > ZBAR_CFG_UNCERTAINTY)
            return(1);
        c = cfg - ZBAR_CFG_UNCERTAINTY;
        if(sym > ZBAR_PARTIAL) {
            i = _zbar_get_symbol_hash(sym);
  404c48:	205d      	movs	r0, #93	; 0x5d
  404c4a:	47a8      	blx	r5
            iscn->sym_configs[c][i] = val;
  404c4c:	301c      	adds	r0, #28
  404c4e:	f844 6020 	str.w	r6, [r4, r0, lsl #2]
        int c, i;
        if(cfg > ZBAR_CFG_UNCERTAINTY)
            return(1);
        c = cfg - ZBAR_CFG_UNCERTAINTY;
        if(sym > ZBAR_PARTIAL) {
            i = _zbar_get_symbol_hash(sym);
  404c52:	2027      	movs	r0, #39	; 0x27
  404c54:	47a8      	blx	r5
            iscn->sym_configs[c][i] = val;
  404c56:	301c      	adds	r0, #28
  404c58:	f844 6020 	str.w	r6, [r4, r0, lsl #2]
        int c, i;
        if(cfg > ZBAR_CFG_UNCERTAINTY)
            return(1);
        c = cfg - ZBAR_CFG_UNCERTAINTY;
        if(sym > ZBAR_PARTIAL) {
            i = _zbar_get_symbol_hash(sym);
  404c5c:	2026      	movs	r0, #38	; 0x26
  404c5e:	47a8      	blx	r5
            iscn->sym_configs[c][i] = val;
  404c60:	301c      	adds	r0, #28
  404c62:	2301      	movs	r3, #1
  404c64:	f844 3020 	str.w	r3, [r4, r0, lsl #2]
        int c, i;
        if(cfg > ZBAR_CFG_UNCERTAINTY)
            return(1);
        c = cfg - ZBAR_CFG_UNCERTAINTY;
        if(sym > ZBAR_PARTIAL) {
            i = _zbar_get_symbol_hash(sym);
  404c68:	200f      	movs	r0, #15
  404c6a:	47a8      	blx	r5
            iscn->sym_configs[c][i] = val;
  404c6c:	301c      	adds	r0, #28
  404c6e:	f844 6020 	str.w	r6, [r4, r0, lsl #2]
    zbar_image_scanner_set_config(iscn, ZBAR_CODE128, ZBAR_CFG_UNCERTAINTY, 0);
    zbar_image_scanner_set_config(iscn, ZBAR_CODE93, ZBAR_CFG_UNCERTAINTY, 0);
    zbar_image_scanner_set_config(iscn, ZBAR_CODE39, ZBAR_CFG_UNCERTAINTY, 0);
    zbar_image_scanner_set_config(iscn, ZBAR_CODABAR, ZBAR_CFG_UNCERTAINTY, 1);
    zbar_image_scanner_set_config(iscn, ZBAR_COMPOSITE, ZBAR_CFG_UNCERTAINTY, 0);
    return(iscn);
  404c72:	4620      	mov	r0, r4
  404c74:	bd70      	pop	{r4, r5, r6, pc}

zbar_image_scanner_t *zbar_image_scanner_create ()
{
    zbar_image_scanner_t *iscn = calloc(1, sizeof(zbar_image_scanner_t));
    if(!iscn)
        return(NULL);
  404c76:	2000      	movs	r0, #0
    zbar_image_scanner_set_config(iscn, ZBAR_CODE93, ZBAR_CFG_UNCERTAINTY, 0);
    zbar_image_scanner_set_config(iscn, ZBAR_CODE39, ZBAR_CFG_UNCERTAINTY, 0);
    zbar_image_scanner_set_config(iscn, ZBAR_CODABAR, ZBAR_CFG_UNCERTAINTY, 1);
    zbar_image_scanner_set_config(iscn, ZBAR_COMPOSITE, ZBAR_CFG_UNCERTAINTY, 0);
    return(iscn);
}
  404c78:	bd70      	pop	{r4, r5, r6, pc}
  404c7a:	bf00      	nop
  404c7c:	00406325 	.word	0x00406325
  404c80:	00402d25 	.word	0x00402d25
  404c84:	00405675 	.word	0x00405675
  404c88:	00404a95 	.word	0x00404a95
  404c8c:	00402e0d 	.word	0x00402e0d
  404c90:	00404759 	.word	0x00404759
  404c94:	00402e05 	.word	0x00402e05
  404c98:	00405a61 	.word	0x00405a61

00404c9c <zbar_image_scanner_set_config>:

int zbar_image_scanner_set_config (zbar_image_scanner_t *iscn,
                                   zbar_symbol_type_t sym,
                                   zbar_config_t cfg,
                                   int val)
{
  404c9c:	b570      	push	{r4, r5, r6, lr}
  404c9e:	4606      	mov	r6, r0
  404ca0:	461d      	mov	r5, r3
    if((sym == 0 || sym == ZBAR_COMPOSITE) && cfg == ZBAR_CFG_ENABLE) {
  404ca2:	460b      	mov	r3, r1
  404ca4:	b111      	cbz	r1, 404cac <zbar_image_scanner_set_config+0x10>
  404ca6:	290f      	cmp	r1, #15
  404ca8:	d106      	bne.n	404cb8 <zbar_image_scanner_set_config+0x1c>
  404caa:	e062      	b.n	404d72 <zbar_image_scanner_set_config+0xd6>
  404cac:	b922      	cbnz	r2, 404cb8 <zbar_image_scanner_set_config+0x1c>
        iscn->ean_config = !!val;
  404cae:	1c29      	adds	r1, r5, #0
  404cb0:	bf18      	it	ne
  404cb2:	2101      	movne	r1, #1
  404cb4:	6641      	str	r1, [r0, #100]	; 0x64
  404cb6:	e001      	b.n	404cbc <zbar_image_scanner_set_config+0x20>
        if(sym)
            return(0);
    }

    if(cfg < ZBAR_CFG_UNCERTAINTY)
  404cb8:	2a3f      	cmp	r2, #63	; 0x3f
  404cba:	d805      	bhi.n	404cc8 <zbar_image_scanner_set_config+0x2c>
        return(zbar_decoder_set_config(iscn->dcode, sym, cfg, val));
  404cbc:	6870      	ldr	r0, [r6, #4]
  404cbe:	4619      	mov	r1, r3
  404cc0:	462b      	mov	r3, r5
  404cc2:	4c2d      	ldr	r4, [pc, #180]	; (404d78 <zbar_image_scanner_set_config+0xdc>)
  404cc4:	47a0      	blx	r4
  404cc6:	bd70      	pop	{r4, r5, r6, pc}

    if(cfg < ZBAR_CFG_POSITION) {
  404cc8:	2a7f      	cmp	r2, #127	; 0x7f
  404cca:	d821      	bhi.n	404d10 <zbar_image_scanner_set_config+0x74>
        int c, i;
        if(cfg > ZBAR_CFG_UNCERTAINTY)
  404ccc:	2a40      	cmp	r2, #64	; 0x40
  404cce:	d842      	bhi.n	404d56 <zbar_image_scanner_set_config+0xba>
            return(1);
        c = cfg - ZBAR_CFG_UNCERTAINTY;
  404cd0:	f1a2 0440 	sub.w	r4, r2, #64	; 0x40
        if(sym > ZBAR_PARTIAL) {
  404cd4:	2b01      	cmp	r3, #1
  404cd6:	d90c      	bls.n	404cf2 <zbar_image_scanner_set_config+0x56>
            i = _zbar_get_symbol_hash(sym);
  404cd8:	4618      	mov	r0, r3
  404cda:	4b28      	ldr	r3, [pc, #160]	; (404d7c <zbar_image_scanner_set_config+0xe0>)
  404cdc:	4798      	blx	r3
            iscn->sym_configs[c][i] = val;
  404cde:	eb04 0284 	add.w	r2, r4, r4, lsl #2
  404ce2:	eb00 0082 	add.w	r0, r0, r2, lsl #2
  404ce6:	f100 021c 	add.w	r2, r0, #28
  404cea:	f846 5022 	str.w	r5, [r6, r2, lsl #2]
        }
        else
            for(i = 0; i < NUM_SYMS; i++)
                iscn->sym_configs[c][i] = val;
        return(0);
  404cee:	2000      	movs	r0, #0
  404cf0:	bd70      	pop	{r4, r5, r6, pc}
  404cf2:	eb04 0284 	add.w	r2, r4, r4, lsl #2
  404cf6:	0112      	lsls	r2, r2, #4
  404cf8:	f102 036c 	add.w	r3, r2, #108	; 0x6c
  404cfc:	4433      	add	r3, r6
  404cfe:	f102 00bc 	add.w	r0, r2, #188	; 0xbc
  404d02:	4430      	add	r0, r6
            i = _zbar_get_symbol_hash(sym);
            iscn->sym_configs[c][i] = val;
        }
        else
            for(i = 0; i < NUM_SYMS; i++)
                iscn->sym_configs[c][i] = val;
  404d04:	f843 5f04 	str.w	r5, [r3, #4]!
        if(sym > ZBAR_PARTIAL) {
            i = _zbar_get_symbol_hash(sym);
            iscn->sym_configs[c][i] = val;
        }
        else
            for(i = 0; i < NUM_SYMS; i++)
  404d08:	4283      	cmp	r3, r0
  404d0a:	d1fb      	bne.n	404d04 <zbar_image_scanner_set_config+0x68>
                iscn->sym_configs[c][i] = val;
        return(0);
  404d0c:	2000      	movs	r0, #0
  404d0e:	bd70      	pop	{r4, r5, r6, pc}
    }

    if(sym > ZBAR_PARTIAL)
  404d10:	2b01      	cmp	r3, #1
  404d12:	d822      	bhi.n	404d5a <zbar_image_scanner_set_config+0xbe>
        return(1);

    if(cfg >= ZBAR_CFG_X_DENSITY && cfg <= ZBAR_CFG_Y_DENSITY) {
  404d14:	f5a2 7380 	sub.w	r3, r2, #256	; 0x100
  404d18:	b29b      	uxth	r3, r3
  404d1a:	2b01      	cmp	r3, #1
  404d1c:	d804      	bhi.n	404d28 <zbar_image_scanner_set_config+0x8c>
        CFG(iscn, cfg) = val;
  404d1e:	3ae6      	subs	r2, #230	; 0xe6
  404d20:	f846 5022 	str.w	r5, [r6, r2, lsl #2]
        return(0);
  404d24:	2000      	movs	r0, #0
  404d26:	bd70      	pop	{r4, r5, r6, pc}
    }

    if(cfg > ZBAR_CFG_POSITION)
  404d28:	2a80      	cmp	r2, #128	; 0x80
  404d2a:	d818      	bhi.n	404d5e <zbar_image_scanner_set_config+0xc2>
        return(1);
    cfg -= ZBAR_CFG_POSITION;
  404d2c:	3a80      	subs	r2, #128	; 0x80
  404d2e:	b292      	uxth	r2, r2

    if(!val)
  404d30:	b945      	cbnz	r5, 404d44 <zbar_image_scanner_set_config+0xa8>
        iscn->config &= ~(1 << cfg);
  404d32:	2301      	movs	r3, #1
  404d34:	fa03 f202 	lsl.w	r2, r3, r2
  404d38:	6e33      	ldr	r3, [r6, #96]	; 0x60
  404d3a:	ea23 0302 	bic.w	r3, r3, r2
  404d3e:	6633      	str	r3, [r6, #96]	; 0x60
    else if(val == 1)
        iscn->config |= (1 << cfg);
    else
        return(1);

    return(0);
  404d40:	2000      	movs	r0, #0
  404d42:	bd70      	pop	{r4, r5, r6, pc}
        return(1);
    cfg -= ZBAR_CFG_POSITION;

    if(!val)
        iscn->config &= ~(1 << cfg);
    else if(val == 1)
  404d44:	2d01      	cmp	r5, #1
  404d46:	d10c      	bne.n	404d62 <zbar_image_scanner_set_config+0xc6>
        iscn->config |= (1 << cfg);
  404d48:	2301      	movs	r3, #1
  404d4a:	4093      	lsls	r3, r2
  404d4c:	6e32      	ldr	r2, [r6, #96]	; 0x60
  404d4e:	4313      	orrs	r3, r2
  404d50:	6633      	str	r3, [r6, #96]	; 0x60
    else
        return(1);

    return(0);
  404d52:	2000      	movs	r0, #0
  404d54:	bd70      	pop	{r4, r5, r6, pc}
        return(zbar_decoder_set_config(iscn->dcode, sym, cfg, val));

    if(cfg < ZBAR_CFG_POSITION) {
        int c, i;
        if(cfg > ZBAR_CFG_UNCERTAINTY)
            return(1);
  404d56:	2001      	movs	r0, #1
  404d58:	bd70      	pop	{r4, r5, r6, pc}
                iscn->sym_configs[c][i] = val;
        return(0);
    }

    if(sym > ZBAR_PARTIAL)
        return(1);
  404d5a:	2001      	movs	r0, #1
  404d5c:	bd70      	pop	{r4, r5, r6, pc}
        CFG(iscn, cfg) = val;
        return(0);
    }

    if(cfg > ZBAR_CFG_POSITION)
        return(1);
  404d5e:	2001      	movs	r0, #1
  404d60:	bd70      	pop	{r4, r5, r6, pc}
    if(!val)
        iscn->config &= ~(1 << cfg);
    else if(val == 1)
        iscn->config |= (1 << cfg);
    else
        return(1);
  404d62:	2001      	movs	r0, #1
  404d64:	bd70      	pop	{r4, r5, r6, pc}
                                   zbar_symbol_type_t sym,
                                   zbar_config_t cfg,
                                   int val)
{
    if((sym == 0 || sym == ZBAR_COMPOSITE) && cfg == ZBAR_CFG_ENABLE) {
        iscn->ean_config = !!val;
  404d66:	3500      	adds	r5, #0
  404d68:	bf18      	it	ne
  404d6a:	2501      	movne	r5, #1
  404d6c:	6675      	str	r5, [r6, #100]	; 0x64
        if(sym)
            return(0);
  404d6e:	2000      	movs	r0, #0
  404d70:	bd70      	pop	{r4, r5, r6, pc}
int zbar_image_scanner_set_config (zbar_image_scanner_t *iscn,
                                   zbar_symbol_type_t sym,
                                   zbar_config_t cfg,
                                   int val)
{
    if((sym == 0 || sym == ZBAR_COMPOSITE) && cfg == ZBAR_CFG_ENABLE) {
  404d72:	2a00      	cmp	r2, #0
  404d74:	d0f7      	beq.n	404d66 <zbar_image_scanner_set_config+0xca>
  404d76:	e79f      	b.n	404cb8 <zbar_image_scanner_set_config+0x1c>
  404d78:	00402f71 	.word	0x00402f71
  404d7c:	00405a61 	.word	0x00405a61

00404d80 <zbar_scan_image>:
        p += (dx) + ((uintptr_t)(dy) * w);       \
    } while(0);

int zbar_scan_image (zbar_image_scanner_t *iscn,
                     zbar_image_t *img)
{
  404d80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  404d84:	b093      	sub	sp, #76	; 0x4c
    zbar_symbol_set_t *syms;
    const uint8_t *data;
    zbar_scanner_t *scn = iscn->scn;
  404d86:	6803      	ldr	r3, [r0, #0]
  404d88:	9302      	str	r3, [sp, #8]
    int density;

    /* timestamp image
     * FIXME prefer video timestamp
     */
    iscn->time = 0;//_zbar_timer_now();
  404d8a:	2300      	movs	r3, #0
  404d8c:	6103      	str	r3, [r0, #16]
#ifdef ENABLE_QRCODE
    _zbar_qr_reset(iscn->qr);
#endif

    /* image must be in grayscale format */
    if(img->format != fourcc('Y','8','0','0') &&
  404d8e:	680b      	ldr	r3, [r1, #0]
  404d90:	4a8a      	ldr	r2, [pc, #552]	; (404fbc <zbar_scan_image+0x23c>)
  404d92:	4293      	cmp	r3, r2
  404d94:	d003      	beq.n	404d9e <zbar_scan_image+0x1e>
  404d96:	4a8a      	ldr	r2, [pc, #552]	; (404fc0 <zbar_scan_image+0x240>)
  404d98:	4293      	cmp	r3, r2
  404d9a:	f040 83fd 	bne.w	405598 <zbar_scan_image+0x818>
  404d9e:	9106      	str	r1, [sp, #24]
  404da0:	4683      	mov	fp, r0
       img->format != fourcc('G','R','E','Y'))
        return(-1);
    iscn->img = img;
  404da2:	f8cb 1014 	str.w	r1, [fp, #20]
}

inline void zbar_image_scanner_recycle_image (zbar_image_scanner_t *iscn,
                                              zbar_image_t *img)
{
    zbar_symbol_set_t *syms = iscn->syms;
  404da6:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
    if(syms && syms->refcnt) {
  404da8:	b1d4      	cbz	r4, 404de0 <zbar_scan_image+0x60>
  404daa:	6823      	ldr	r3, [r4, #0]
  404dac:	b1c3      	cbz	r3, 404de0 <zbar_scan_image+0x60>
typedef int refcnt_t;

static inline int _zbar_refcnt (refcnt_t *cnt,
                                int delta)
{
    int rc = (*cnt += delta);
  404dae:	3b01      	subs	r3, #1
  404db0:	6023      	str	r3, [r4, #0]
    assert(rc >= 0);
  404db2:	2b00      	cmp	r3, #0
  404db4:	da05      	bge.n	404dc2 <zbar_scan_image+0x42>
  404db6:	4883      	ldr	r0, [pc, #524]	; (404fc4 <zbar_scan_image+0x244>)
  404db8:	2157      	movs	r1, #87	; 0x57
  404dba:	4a83      	ldr	r2, [pc, #524]	; (404fc8 <zbar_scan_image+0x248>)
  404dbc:	4b83      	ldr	r3, [pc, #524]	; (404fcc <zbar_scan_image+0x24c>)
  404dbe:	4c84      	ldr	r4, [pc, #528]	; (404fd0 <zbar_scan_image+0x250>)
  404dc0:	47a0      	blx	r4
}

static inline int recycle_syms (zbar_image_scanner_t *iscn,
                                zbar_symbol_set_t *syms)
{
    if(_zbar_refcnt(&syms->refcnt, -1))
  404dc2:	2b00      	cmp	r3, #0
  404dc4:	f040 83eb 	bne.w	40559e <zbar_scan_image+0x81e>
        return(1);

    _zbar_image_scanner_recycle_syms(iscn, syms->head);
  404dc8:	68a1      	ldr	r1, [r4, #8]
  404dca:	4b82      	ldr	r3, [pc, #520]	; (404fd4 <zbar_scan_image+0x254>)
  404dcc:	4798      	blx	r3
    syms->head = syms->tail = NULL;
  404dce:	2300      	movs	r3, #0
  404dd0:	60e3      	str	r3, [r4, #12]
  404dd2:	60a3      	str	r3, [r4, #8]
    syms->nsyms = 0;
  404dd4:	6063      	str	r3, [r4, #4]
        if(recycle_syms(iscn, syms)) {
            STAT(iscn_syms_inuse);
            iscn->syms = NULL;
        }
        else
            STAT(iscn_syms_recycle);
  404dd6:	f8db 30c8 	ldr.w	r3, [fp, #200]	; 0xc8
  404dda:	3301      	adds	r3, #1
  404ddc:	f8cb 30c8 	str.w	r3, [fp, #200]	; 0xc8
    }

    syms = img->syms;
  404de0:	9906      	ldr	r1, [sp, #24]
  404de2:	6c0b      	ldr	r3, [r1, #64]	; 0x40
  404de4:	461a      	mov	r2, r3
  404de6:	930f      	str	r3, [sp, #60]	; 0x3c
    img->syms = NULL;
  404de8:	2300      	movs	r3, #0
  404dea:	640b      	str	r3, [r1, #64]	; 0x40
    if(syms && recycle_syms(iscn, syms))
  404dec:	b332      	cbz	r2, 404e3c <zbar_scan_image+0xbc>
typedef int refcnt_t;

static inline int _zbar_refcnt (refcnt_t *cnt,
                                int delta)
{
    int rc = (*cnt += delta);
  404dee:	6813      	ldr	r3, [r2, #0]
  404df0:	3b01      	subs	r3, #1
  404df2:	6013      	str	r3, [r2, #0]
    assert(rc >= 0);
  404df4:	2b00      	cmp	r3, #0
  404df6:	da05      	bge.n	404e04 <zbar_scan_image+0x84>
  404df8:	4872      	ldr	r0, [pc, #456]	; (404fc4 <zbar_scan_image+0x244>)
  404dfa:	2157      	movs	r1, #87	; 0x57
  404dfc:	4a72      	ldr	r2, [pc, #456]	; (404fc8 <zbar_scan_image+0x248>)
  404dfe:	4b73      	ldr	r3, [pc, #460]	; (404fcc <zbar_scan_image+0x24c>)
  404e00:	4c73      	ldr	r4, [pc, #460]	; (404fd0 <zbar_scan_image+0x250>)
  404e02:	47a0      	blx	r4
}

static inline int recycle_syms (zbar_image_scanner_t *iscn,
                                zbar_symbol_set_t *syms)
{
    if(_zbar_refcnt(&syms->refcnt, -1))
  404e04:	2b00      	cmp	r3, #0
  404e06:	f040 83d2 	bne.w	4055ae <zbar_scan_image+0x82e>
        return(1);

    _zbar_image_scanner_recycle_syms(iscn, syms->head);
  404e0a:	4658      	mov	r0, fp
  404e0c:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
  404e0e:	68a1      	ldr	r1, [r4, #8]
  404e10:	4b70      	ldr	r3, [pc, #448]	; (404fd4 <zbar_scan_image+0x254>)
  404e12:	4798      	blx	r3
    syms->head = syms->tail = NULL;
  404e14:	2300      	movs	r3, #0
  404e16:	60e3      	str	r3, [r4, #12]
  404e18:	4620      	mov	r0, r4
  404e1a:	60a3      	str	r3, [r4, #8]
    syms->nsyms = 0;
  404e1c:	6063      	str	r3, [r4, #4]
    syms = img->syms;
    img->syms = NULL;
    if(syms && recycle_syms(iscn, syms))
        STAT(img_syms_inuse);
    else if(syms) {
        STAT(img_syms_recycle);
  404e1e:	f8db 30d0 	ldr.w	r3, [fp, #208]	; 0xd0
  404e22:	3301      	adds	r3, #1
  404e24:	f8cb 30d0 	str.w	r3, [fp, #208]	; 0xd0

        /* select one set to resurrect, destroy the other */
        if(iscn->syms)
  404e28:	f8db 302c 	ldr.w	r3, [fp, #44]	; 0x2c
  404e2c:	b113      	cbz	r3, 404e34 <zbar_scan_image+0xb4>
            _zbar_symbol_set_free(syms);
  404e2e:	4b6a      	ldr	r3, [pc, #424]	; (404fd8 <zbar_scan_image+0x258>)
  404e30:	4798      	blx	r3
  404e32:	e003      	b.n	404e3c <zbar_scan_image+0xbc>
        else
            iscn->syms = syms;
  404e34:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  404e36:	f8cb 302c 	str.w	r3, [fp, #44]	; 0x2c
  404e3a:	e011      	b.n	404e60 <zbar_scan_image+0xe0>
        return(-1);
    iscn->img = img;

    /* recycle previous scanner and image results */
    zbar_image_scanner_recycle_image(iscn, img);
    syms = iscn->syms;
  404e3c:	f8db 302c 	ldr.w	r3, [fp, #44]	; 0x2c
  404e40:	930f      	str	r3, [sp, #60]	; 0x3c
    if(!syms) {
  404e42:	b96b      	cbnz	r3, 404e60 <zbar_scan_image+0xe0>
        syms = iscn->syms = _zbar_symbol_set_create();
  404e44:	4b65      	ldr	r3, [pc, #404]	; (404fdc <zbar_scan_image+0x25c>)
  404e46:	4798      	blx	r3
  404e48:	900f      	str	r0, [sp, #60]	; 0x3c
  404e4a:	f8cb 002c 	str.w	r0, [fp, #44]	; 0x2c
        STAT(syms_new);
  404e4e:	f8db 30c0 	ldr.w	r3, [fp, #192]	; 0xc0
  404e52:	3301      	adds	r3, #1
  404e54:	f8cb 30c0 	str.w	r3, [fp, #192]	; 0xc0
        zbar_symbol_set_ref(syms, 1);
  404e58:	2101      	movs	r1, #1
  404e5a:	4b61      	ldr	r3, [pc, #388]	; (404fe0 <zbar_scan_image+0x260>)
  404e5c:	4798      	blx	r3
  404e5e:	e003      	b.n	404e68 <zbar_scan_image+0xe8>
    }
    else
        zbar_symbol_set_ref(syms, 2);
  404e60:	980f      	ldr	r0, [sp, #60]	; 0x3c
  404e62:	2102      	movs	r1, #2
  404e64:	4b5e      	ldr	r3, [pc, #376]	; (404fe0 <zbar_scan_image+0x260>)
  404e66:	4798      	blx	r3
    img->syms = syms;
  404e68:	9a06      	ldr	r2, [sp, #24]
  404e6a:	4613      	mov	r3, r2
  404e6c:	990f      	ldr	r1, [sp, #60]	; 0x3c
  404e6e:	6411      	str	r1, [r2, #64]	; 0x40

    w = img->width;
  404e70:	6856      	ldr	r6, [r2, #4]
    h = img->height;
  404e72:	6894      	ldr	r4, [r2, #8]
    cx1 = img->crop_x + img->crop_w;
  404e74:	69d2      	ldr	r2, [r2, #28]
  404e76:	695b      	ldr	r3, [r3, #20]
  404e78:	eb02 0a03 	add.w	sl, r2, r3
    assert(cx1 <= w);
  404e7c:	4556      	cmp	r6, sl
  404e7e:	d206      	bcs.n	404e8e <zbar_scan_image+0x10e>
  404e80:	4858      	ldr	r0, [pc, #352]	; (404fe4 <zbar_scan_image+0x264>)
  404e82:	f240 21ab 	movw	r1, #683	; 0x2ab
  404e86:	4a58      	ldr	r2, [pc, #352]	; (404fe8 <zbar_scan_image+0x268>)
  404e88:	4b58      	ldr	r3, [pc, #352]	; (404fec <zbar_scan_image+0x26c>)
  404e8a:	4c51      	ldr	r4, [pc, #324]	; (404fd0 <zbar_scan_image+0x250>)
  404e8c:	47a0      	blx	r4
    cy1 = img->crop_y + img->crop_h;
  404e8e:	9906      	ldr	r1, [sp, #24]
  404e90:	6a0a      	ldr	r2, [r1, #32]
  404e92:	698b      	ldr	r3, [r1, #24]
  404e94:	18d3      	adds	r3, r2, r3
  404e96:	9308      	str	r3, [sp, #32]
    assert(cy1 <= h);
  404e98:	429c      	cmp	r4, r3
  404e9a:	d206      	bcs.n	404eaa <zbar_scan_image+0x12a>
  404e9c:	4851      	ldr	r0, [pc, #324]	; (404fe4 <zbar_scan_image+0x264>)
  404e9e:	f240 21ad 	movw	r1, #685	; 0x2ad
  404ea2:	4a51      	ldr	r2, [pc, #324]	; (404fe8 <zbar_scan_image+0x268>)
  404ea4:	4b52      	ldr	r3, [pc, #328]	; (404ff0 <zbar_scan_image+0x270>)
  404ea6:	4c4a      	ldr	r4, [pc, #296]	; (404fd0 <zbar_scan_image+0x250>)
  404ea8:	47a0      	blx	r4
    data = img->data;
  404eaa:	9d06      	ldr	r5, [sp, #24]
  404eac:	68eb      	ldr	r3, [r5, #12]
  404eae:	9303      	str	r3, [sp, #12]

    //zbar_image_write_png(img, "debug.png");
    //svg_open("debug.svg", 0, 0, w, h);
    //svg_image("debug.png", w, h);

    zbar_scanner_new_scan(scn);
  404eb0:	9802      	ldr	r0, [sp, #8]
  404eb2:	4b50      	ldr	r3, [pc, #320]	; (404ff4 <zbar_scan_image+0x274>)
  404eb4:	4798      	blx	r3

    density = CFG(iscn, ZBAR_CFG_Y_DENSITY);
  404eb6:	f8db 206c 	ldr.w	r2, [fp, #108]	; 0x6c
    if(density > 0) {
  404eba:	2a00      	cmp	r2, #0
  404ebc:	f340 8114 	ble.w	4050e8 <zbar_scan_image+0x368>
        const uint8_t *p = data;
        int x = 0, y = 0;

        int border = (((img->crop_h - 1) % density) + 1) / 2;
  404ec0:	6a28      	ldr	r0, [r5, #32]
  404ec2:	1e41      	subs	r1, r0, #1
  404ec4:	fbb1 f3f2 	udiv	r3, r1, r2
  404ec8:	fb02 1313 	mls	r3, r2, r3, r1
  404ecc:	1c59      	adds	r1, r3, #1
        if(border > img->crop_h / 2)
  404ece:	0840      	lsrs	r0, r0, #1
  404ed0:	0849      	lsrs	r1, r1, #1
            border = img->crop_h / 2;
        border += img->crop_y;
  404ed2:	69ab      	ldr	r3, [r5, #24]
  404ed4:	4281      	cmp	r1, r0
  404ed6:	bf94      	ite	ls
  404ed8:	185b      	addls	r3, r3, r1
  404eda:	181b      	addhi	r3, r3, r0
  404edc:	9307      	str	r3, [sp, #28]
        assert(border <= h);
  404ede:	429c      	cmp	r4, r3
  404ee0:	d206      	bcs.n	404ef0 <zbar_scan_image+0x170>
  404ee2:	4840      	ldr	r0, [pc, #256]	; (404fe4 <zbar_scan_image+0x264>)
  404ee4:	f240 21bf 	movw	r1, #703	; 0x2bf
  404ee8:	4a3f      	ldr	r2, [pc, #252]	; (404fe8 <zbar_scan_image+0x268>)
  404eea:	4b43      	ldr	r3, [pc, #268]	; (404ff8 <zbar_scan_image+0x278>)
  404eec:	4c38      	ldr	r4, [pc, #224]	; (404fd0 <zbar_scan_image+0x250>)
  404eee:	47a0      	blx	r4
        //svg_group_start("scanner", 0, 1, 1, 0, 0);
        iscn->dy = 0;
  404ef0:	2100      	movs	r1, #0
  404ef2:	f8cb 101c 	str.w	r1, [fp, #28]

        movedelta(img->crop_x, border);
  404ef6:	9906      	ldr	r1, [sp, #24]
  404ef8:	694c      	ldr	r4, [r1, #20]
  404efa:	fb06 4103 	mla	r1, r6, r3, r4
  404efe:	9803      	ldr	r0, [sp, #12]
  404f00:	1841      	adds	r1, r0, r1
  404f02:	9110      	str	r1, [sp, #64]	; 0x40
        iscn->v = y;
  404f04:	f8cb 3028 	str.w	r3, [fp, #40]	; 0x28

        while(y < cy1) {
  404f08:	9808      	ldr	r0, [sp, #32]
  404f0a:	4298      	cmp	r0, r3
  404f0c:	f240 80ec 	bls.w	4050e8 <zbar_scan_image+0x368>
            }
            ASSERT_POS;
            quiet_border(iscn);
            //svg_path_end();

            movedelta(-1, density);
  404f10:	fb06 f102 	mul.w	r1, r6, r2
  404f14:	1e48      	subs	r0, r1, #1
  404f16:	9009      	str	r0, [sp, #36]	; 0x24
            }
            ASSERT_POS;
            quiet_border(iscn);
            //svg_path_end();

            movedelta(1, density);
  404f18:	1c48      	adds	r0, r1, #1
  404f1a:	900b      	str	r0, [sp, #44]	; 0x2c
  404f1c:	0050      	lsls	r0, r2, #1
  404f1e:	fb06 f500 	mul.w	r5, r6, r0
  404f22:	950c      	str	r5, [sp, #48]	; 0x30
  404f24:	18d1      	adds	r1, r2, r3
  404f26:	fb01 f506 	mul.w	r5, r1, r6
  404f2a:	9504      	str	r5, [sp, #16]
  404f2c:	900d      	str	r0, [sp, #52]	; 0x34
  404f2e:	9105      	str	r1, [sp, #20]
  404f30:	fb06 f303 	mul.w	r3, r6, r3
  404f34:	1b5b      	subs	r3, r3, r5
  404f36:	930a      	str	r3, [sp, #40]	; 0x28
  404f38:	900e      	str	r0, [sp, #56]	; 0x38
            iscn->dx = iscn->du = 1;
            iscn->umin = cx0;
            while(x < cx1) {
                uint8_t d = *p;
                movedelta(1, 0);
                zbar_scan_y(scn, d);
  404f3a:	4f30      	ldr	r7, [pc, #192]	; (404ffc <zbar_scan_image+0x27c>)
  404f3c:	9611      	str	r6, [sp, #68]	; 0x44
  404f3e:	4656      	mov	r6, sl
  404f40:	f8dd 9040 	ldr.w	r9, [sp, #64]	; 0x40

        movedelta(img->crop_x, border);
        iscn->v = y;

        while(y < cy1) {
            int cx0 = img->crop_x;;
  404f44:	9b06      	ldr	r3, [sp, #24]
  404f46:	f8d3 8014 	ldr.w	r8, [r3, #20]
            zprintf(128, "img_x+: %04d,%04d @%p\n", x, y, p);
  404f4a:	4b2d      	ldr	r3, [pc, #180]	; (405000 <zbar_scan_image+0x280>)
  404f4c:	681b      	ldr	r3, [r3, #0]
  404f4e:	2b7f      	cmp	r3, #127	; 0x7f
  404f50:	dd0b      	ble.n	404f6a <zbar_scan_image+0x1ea>
  404f52:	4b2c      	ldr	r3, [pc, #176]	; (405004 <zbar_scan_image+0x284>)
  404f54:	681b      	ldr	r3, [r3, #0]
  404f56:	68d8      	ldr	r0, [r3, #12]
  404f58:	9b07      	ldr	r3, [sp, #28]
  404f5a:	9300      	str	r3, [sp, #0]
  404f5c:	f8cd 9004 	str.w	r9, [sp, #4]
  404f60:	4929      	ldr	r1, [pc, #164]	; (405008 <zbar_scan_image+0x288>)
  404f62:	4a21      	ldr	r2, [pc, #132]	; (404fe8 <zbar_scan_image+0x268>)
  404f64:	4623      	mov	r3, r4
  404f66:	4d29      	ldr	r5, [pc, #164]	; (40500c <zbar_scan_image+0x28c>)
  404f68:	47a8      	blx	r5
            //svg_path_start("vedge", 1. / 32, 0, y + 0.5);
            iscn->dx = iscn->du = 1;
  404f6a:	2301      	movs	r3, #1
  404f6c:	f8cb 3020 	str.w	r3, [fp, #32]
  404f70:	f8cb 3018 	str.w	r3, [fp, #24]
            iscn->umin = cx0;
  404f74:	f8cb 8024 	str.w	r8, [fp, #36]	; 0x24
            while(x < cx1) {
  404f78:	4625      	mov	r5, r4
  404f7a:	42a6      	cmp	r6, r4
  404f7c:	d90e      	bls.n	404f9c <zbar_scan_image+0x21c>
  404f7e:	464c      	mov	r4, r9
  404f80:	ebc9 0a05 	rsb	sl, r9, r5
                uint8_t d = *p;
                movedelta(1, 0);
                zbar_scan_y(scn, d);
  404f84:	9802      	ldr	r0, [sp, #8]
  404f86:	f814 1b01 	ldrb.w	r1, [r4], #1
  404f8a:	47b8      	blx	r7
  404f8c:	eb04 030a 	add.w	r3, r4, sl
            int cx0 = img->crop_x;;
            zprintf(128, "img_x+: %04d,%04d @%p\n", x, y, p);
            //svg_path_start("vedge", 1. / 32, 0, y + 0.5);
            iscn->dx = iscn->du = 1;
            iscn->umin = cx0;
            while(x < cx1) {
  404f90:	429e      	cmp	r6, r3
  404f92:	d8f7      	bhi.n	404f84 <zbar_scan_image+0x204>
  404f94:	4634      	mov	r4, r6
  404f96:	1b75      	subs	r5, r6, r5
  404f98:	44a9      	add	r9, r5
  404f9a:	4635      	mov	r5, r6
  404f9c:	9b04      	ldr	r3, [sp, #16]
  404f9e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  404fa0:	4413      	add	r3, r2
                uint8_t d = *p;
                movedelta(1, 0);
                zbar_scan_y(scn, d);
            }
            ASSERT_POS;
  404fa2:	441d      	add	r5, r3
  404fa4:	9b03      	ldr	r3, [sp, #12]
  404fa6:	441d      	add	r5, r3
  404fa8:	454d      	cmp	r5, r9
  404faa:	d033      	beq.n	405014 <zbar_scan_image+0x294>
  404fac:	480d      	ldr	r0, [pc, #52]	; (404fe4 <zbar_scan_image+0x264>)
  404fae:	f240 21d1 	movw	r1, #721	; 0x2d1
  404fb2:	4a0d      	ldr	r2, [pc, #52]	; (404fe8 <zbar_scan_image+0x268>)
  404fb4:	4b16      	ldr	r3, [pc, #88]	; (405010 <zbar_scan_image+0x290>)
  404fb6:	4c06      	ldr	r4, [pc, #24]	; (404fd0 <zbar_scan_image+0x250>)
  404fb8:	47a0      	blx	r4
  404fba:	bf00      	nop
  404fbc:	30303859 	.word	0x30303859
  404fc0:	59455247 	.word	0x59455247
  404fc4:	0040f710 	.word	0x0040f710
  404fc8:	0040fad4 	.word	0x0040fad4
  404fcc:	0040f73c 	.word	0x0040f73c
  404fd0:	004062e9 	.word	0x004062e9
  404fd4:	00404405 	.word	0x00404405
  404fd8:	00405ba9 	.word	0x00405ba9
  404fdc:	00405ab9 	.word	0x00405ab9
  404fe0:	00405af1 	.word	0x00405af1
  404fe4:	0040f80c 	.word	0x0040f80c
  404fe8:	0040faa4 	.word	0x0040faa4
  404fec:	0040f9d8 	.word	0x0040f9d8
  404ff0:	0040f9e4 	.word	0x0040f9e4
  404ff4:	0040571d 	.word	0x0040571d
  404ff8:	0040f9f0 	.word	0x0040f9f0
  404ffc:	004057b1 	.word	0x004057b1
  405000:	20000d14 	.word	0x20000d14
  405004:	20000440 	.word	0x20000440
  405008:	0040f9fc 	.word	0x0040f9fc
  40500c:	004066d1 	.word	0x004066d1
  405010:	0040fa18 	.word	0x0040fa18
}

static inline void quiet_border (zbar_image_scanner_t *iscn)
{
    /* flush scanner pipeline */
    zbar_scanner_t *scn = iscn->scn;
  405014:	f8db 9000 	ldr.w	r9, [fp]
    zbar_scanner_flush(scn);
  405018:	4648      	mov	r0, r9
  40501a:	f8df a2dc 	ldr.w	sl, [pc, #732]	; 4052f8 <zbar_scan_image+0x578>
  40501e:	47d0      	blx	sl
    zbar_scanner_flush(scn);
  405020:	4648      	mov	r0, r9
  405022:	47d0      	blx	sl
    zbar_scanner_new_scan(scn);
  405024:	4648      	mov	r0, r9
  405026:	4ba8      	ldr	r3, [pc, #672]	; (4052c8 <zbar_scan_image+0x548>)
  405028:	4798      	blx	r3
            }
            ASSERT_POS;
            quiet_border(iscn);
            //svg_path_end();

            movedelta(-1, density);
  40502a:	3c01      	subs	r4, #1
  40502c:	9b05      	ldr	r3, [sp, #20]
  40502e:	461a      	mov	r2, r3
  405030:	9909      	ldr	r1, [sp, #36]	; 0x24
  405032:	440d      	add	r5, r1
            iscn->v = y;
  405034:	f8cb 3028 	str.w	r3, [fp, #40]	; 0x28
            if(y >= cy1)
  405038:	9908      	ldr	r1, [sp, #32]
  40503a:	4299      	cmp	r1, r3
  40503c:	d952      	bls.n	4050e4 <zbar_scan_image+0x364>
                break;

            zprintf(128, "img_x-: %04d,%04d @%p\n", x, y, p);
  40503e:	4ba3      	ldr	r3, [pc, #652]	; (4052cc <zbar_scan_image+0x54c>)
  405040:	681b      	ldr	r3, [r3, #0]
  405042:	2b7f      	cmp	r3, #127	; 0x7f
  405044:	dd0a      	ble.n	40505c <zbar_scan_image+0x2dc>
  405046:	4ba2      	ldr	r3, [pc, #648]	; (4052d0 <zbar_scan_image+0x550>)
  405048:	681b      	ldr	r3, [r3, #0]
  40504a:	68d8      	ldr	r0, [r3, #12]
  40504c:	9200      	str	r2, [sp, #0]
  40504e:	9501      	str	r5, [sp, #4]
  405050:	49a0      	ldr	r1, [pc, #640]	; (4052d4 <zbar_scan_image+0x554>)
  405052:	4aa1      	ldr	r2, [pc, #644]	; (4052d8 <zbar_scan_image+0x558>)
  405054:	4623      	mov	r3, r4
  405056:	f8df c2a4 	ldr.w	ip, [pc, #676]	; 4052fc <zbar_scan_image+0x57c>
  40505a:	47e0      	blx	ip
            //svg_path_start("vedge", -1. / 32, w, y + 0.5);
            iscn->dx = iscn->du = -1;
  40505c:	f04f 33ff 	mov.w	r3, #4294967295
  405060:	f8cb 3020 	str.w	r3, [fp, #32]
  405064:	f8cb 3018 	str.w	r3, [fp, #24]
            iscn->umin = cx1;
  405068:	f8cb 6024 	str.w	r6, [fp, #36]	; 0x24
            while(x >= cx0) {
  40506c:	45a0      	cmp	r8, r4
  40506e:	dc08      	bgt.n	405082 <zbar_scan_image+0x302>
  405070:	46a9      	mov	r9, r5
                uint8_t d = *p;
  405072:	f819 1901 	ldrb.w	r1, [r9], #-1
                movedelta(-1, 0);
  405076:	3c01      	subs	r4, #1
  405078:	464d      	mov	r5, r9
                zbar_scan_y(scn, d);
  40507a:	9802      	ldr	r0, [sp, #8]
  40507c:	47b8      	blx	r7

            zprintf(128, "img_x-: %04d,%04d @%p\n", x, y, p);
            //svg_path_start("vedge", -1. / 32, w, y + 0.5);
            iscn->dx = iscn->du = -1;
            iscn->umin = cx1;
            while(x >= cx0) {
  40507e:	45a0      	cmp	r8, r4
  405080:	ddf7      	ble.n	405072 <zbar_scan_image+0x2f2>
                uint8_t d = *p;
                movedelta(-1, 0);
                zbar_scan_y(scn, d);
            }
            ASSERT_POS;
  405082:	9b04      	ldr	r3, [sp, #16]
  405084:	eb04 0903 	add.w	r9, r4, r3
  405088:	9b03      	ldr	r3, [sp, #12]
  40508a:	4499      	add	r9, r3
  40508c:	45a9      	cmp	r9, r5
  40508e:	d006      	beq.n	40509e <zbar_scan_image+0x31e>
  405090:	4892      	ldr	r0, [pc, #584]	; (4052dc <zbar_scan_image+0x55c>)
  405092:	f240 21e3 	movw	r1, #739	; 0x2e3
  405096:	4a90      	ldr	r2, [pc, #576]	; (4052d8 <zbar_scan_image+0x558>)
  405098:	4b91      	ldr	r3, [pc, #580]	; (4052e0 <zbar_scan_image+0x560>)
  40509a:	4c92      	ldr	r4, [pc, #584]	; (4052e4 <zbar_scan_image+0x564>)
  40509c:	47a0      	blx	r4
}

static inline void quiet_border (zbar_image_scanner_t *iscn)
{
    /* flush scanner pipeline */
    zbar_scanner_t *scn = iscn->scn;
  40509e:	f8db 5000 	ldr.w	r5, [fp]
    zbar_scanner_flush(scn);
  4050a2:	4628      	mov	r0, r5
  4050a4:	f8df 8250 	ldr.w	r8, [pc, #592]	; 4052f8 <zbar_scan_image+0x578>
  4050a8:	47c0      	blx	r8
    zbar_scanner_flush(scn);
  4050aa:	4628      	mov	r0, r5
  4050ac:	47c0      	blx	r8
    zbar_scanner_new_scan(scn);
  4050ae:	4628      	mov	r0, r5
  4050b0:	4b85      	ldr	r3, [pc, #532]	; (4052c8 <zbar_scan_image+0x548>)
  4050b2:	4798      	blx	r3
            }
            ASSERT_POS;
            quiet_border(iscn);
            //svg_path_end();

            movedelta(1, density);
  4050b4:	3401      	adds	r4, #1
  4050b6:	9b07      	ldr	r3, [sp, #28]
  4050b8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  4050ba:	4413      	add	r3, r2
  4050bc:	9307      	str	r3, [sp, #28]
  4050be:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  4050c0:	4491      	add	r9, r2
            iscn->v = y;
  4050c2:	f8cb 3028 	str.w	r3, [fp, #40]	; 0x28
  4050c6:	9a04      	ldr	r2, [sp, #16]
  4050c8:	990c      	ldr	r1, [sp, #48]	; 0x30
  4050ca:	440a      	add	r2, r1
  4050cc:	9204      	str	r2, [sp, #16]
  4050ce:	9a05      	ldr	r2, [sp, #20]
  4050d0:	990d      	ldr	r1, [sp, #52]	; 0x34
  4050d2:	440a      	add	r2, r1
  4050d4:	9205      	str	r2, [sp, #20]
        iscn->dy = 0;

        movedelta(img->crop_x, border);
        iscn->v = y;

        while(y < cy1) {
  4050d6:	9a08      	ldr	r2, [sp, #32]
  4050d8:	429a      	cmp	r2, r3
  4050da:	f63f af33 	bhi.w	404f44 <zbar_scan_image+0x1c4>
  4050de:	46b2      	mov	sl, r6
  4050e0:	9e11      	ldr	r6, [sp, #68]	; 0x44
  4050e2:	e001      	b.n	4050e8 <zbar_scan_image+0x368>
  4050e4:	46b2      	mov	sl, r6
  4050e6:	9e11      	ldr	r6, [sp, #68]	; 0x44
            movedelta(1, density);
            iscn->v = y;
        }
        //svg_group_end();
    }
    iscn->dx = 0;
  4050e8:	2300      	movs	r3, #0
  4050ea:	f8cb 3018 	str.w	r3, [fp, #24]

    density = CFG(iscn, ZBAR_CFG_X_DENSITY);
  4050ee:	f8db 3068 	ldr.w	r3, [fp, #104]	; 0x68
  4050f2:	930c      	str	r3, [sp, #48]	; 0x30
    if(density > 0) {
  4050f4:	461c      	mov	r4, r3
  4050f6:	2b00      	cmp	r3, #0
  4050f8:	f340 80cf 	ble.w	40529a <zbar_scan_image+0x51a>
        const uint8_t *p = data;
        int x = 0, y = 0;

        int border = (((img->crop_w - 1) % density) + 1) / 2;
  4050fc:	9d06      	ldr	r5, [sp, #24]
  4050fe:	69ea      	ldr	r2, [r5, #28]
  405100:	9307      	str	r3, [sp, #28]
  405102:	1e51      	subs	r1, r2, #1
  405104:	fbb1 f3f3 	udiv	r3, r1, r3
  405108:	fb04 1313 	mls	r3, r4, r3, r1
  40510c:	3301      	adds	r3, #1
        if(border > img->crop_w / 2)
  40510e:	0851      	lsrs	r1, r2, #1
  405110:	085b      	lsrs	r3, r3, #1
            border = img->crop_w / 2;
        border += img->crop_x;
  405112:	696a      	ldr	r2, [r5, #20]
  405114:	428b      	cmp	r3, r1
  405116:	bf94      	ite	ls
  405118:	18d3      	addls	r3, r2, r3
  40511a:	1853      	addhi	r3, r2, r1
  40511c:	9305      	str	r3, [sp, #20]
        assert(border <= w);
  40511e:	429e      	cmp	r6, r3
  405120:	d206      	bcs.n	405130 <zbar_scan_image+0x3b0>
  405122:	486e      	ldr	r0, [pc, #440]	; (4052dc <zbar_scan_image+0x55c>)
  405124:	f240 21f7 	movw	r1, #759	; 0x2f7
  405128:	4a6b      	ldr	r2, [pc, #428]	; (4052d8 <zbar_scan_image+0x558>)
  40512a:	4b6f      	ldr	r3, [pc, #444]	; (4052e8 <zbar_scan_image+0x568>)
  40512c:	4c6d      	ldr	r4, [pc, #436]	; (4052e4 <zbar_scan_image+0x564>)
  40512e:	47a0      	blx	r4
        //svg_group_start("scanner", 90, 1, -1, 0, 0);
        movedelta(border, img->crop_y);
  405130:	9a06      	ldr	r2, [sp, #24]
  405132:	6994      	ldr	r4, [r2, #24]
  405134:	fb06 3904 	mla	r9, r6, r4, r3
  405138:	9a03      	ldr	r2, [sp, #12]
  40513a:	4491      	add	r9, r2
        iscn->v = x;
  40513c:	f8cb 3028 	str.w	r3, [fp, #40]	; 0x28

        while(x < cx1) {
  405140:	459a      	cmp	sl, r3
  405142:	f240 80aa 	bls.w	40529a <zbar_scan_image+0x51a>
  405146:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  405148:	0051      	lsls	r1, r2, #1
  40514a:	910a      	str	r1, [sp, #40]	; 0x28
  40514c:	18d3      	adds	r3, r2, r3
  40514e:	9304      	str	r3, [sp, #16]
  405150:	910b      	str	r1, [sp, #44]	; 0x2c
            iscn->dy = iscn->du = 1;
            iscn->umin = cy0;
            while(y < cy1) {
                uint8_t d = *p;
                movedelta(0, 1);
                zbar_scan_y(scn, d);
  405152:	4f66      	ldr	r7, [pc, #408]	; (4052ec <zbar_scan_image+0x56c>)
  405154:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
  405158:	9d08      	ldr	r5, [sp, #32]
        //svg_group_start("scanner", 90, 1, -1, 0, 0);
        movedelta(border, img->crop_y);
        iscn->v = x;

        while(x < cx1) {
            int cy0 = img->crop_y;
  40515a:	9b06      	ldr	r3, [sp, #24]
  40515c:	f8d3 8018 	ldr.w	r8, [r3, #24]
            zprintf(128, "img_y+: %04d,%04d @%p\n", x, y, p);
  405160:	4b5a      	ldr	r3, [pc, #360]	; (4052cc <zbar_scan_image+0x54c>)
  405162:	681b      	ldr	r3, [r3, #0]
  405164:	2b7f      	cmp	r3, #127	; 0x7f
  405166:	dd0b      	ble.n	405180 <zbar_scan_image+0x400>
  405168:	4b59      	ldr	r3, [pc, #356]	; (4052d0 <zbar_scan_image+0x550>)
  40516a:	681b      	ldr	r3, [r3, #0]
  40516c:	68d8      	ldr	r0, [r3, #12]
  40516e:	9400      	str	r4, [sp, #0]
  405170:	f8cd 9004 	str.w	r9, [sp, #4]
  405174:	495e      	ldr	r1, [pc, #376]	; (4052f0 <zbar_scan_image+0x570>)
  405176:	4a58      	ldr	r2, [pc, #352]	; (4052d8 <zbar_scan_image+0x558>)
  405178:	9b05      	ldr	r3, [sp, #20]
  40517a:	f8df c180 	ldr.w	ip, [pc, #384]	; 4052fc <zbar_scan_image+0x57c>
  40517e:	47e0      	blx	ip
            //svg_path_start("vedge", 1. / 32, 0, x + 0.5);
            iscn->dy = iscn->du = 1;
  405180:	2301      	movs	r3, #1
  405182:	f8cb 3020 	str.w	r3, [fp, #32]
  405186:	f8cb 301c 	str.w	r3, [fp, #28]
            iscn->umin = cy0;
  40518a:	f8cb 8024 	str.w	r8, [fp, #36]	; 0x24
            while(y < cy1) {
  40518e:	9408      	str	r4, [sp, #32]
  405190:	42a5      	cmp	r5, r4
  405192:	d90d      	bls.n	4051b0 <zbar_scan_image+0x430>
  405194:	46ca      	mov	sl, r9
                uint8_t d = *p;
  405196:	f89a 1000 	ldrb.w	r1, [sl]
                movedelta(0, 1);
  40519a:	3401      	adds	r4, #1
  40519c:	44b2      	add	sl, r6
                zbar_scan_y(scn, d);
  40519e:	9802      	ldr	r0, [sp, #8]
  4051a0:	47b8      	blx	r7
            int cy0 = img->crop_y;
            zprintf(128, "img_y+: %04d,%04d @%p\n", x, y, p);
            //svg_path_start("vedge", 1. / 32, 0, x + 0.5);
            iscn->dy = iscn->du = 1;
            iscn->umin = cy0;
            while(y < cy1) {
  4051a2:	42a5      	cmp	r5, r4
  4051a4:	d8f7      	bhi.n	405196 <zbar_scan_image+0x416>
  4051a6:	462c      	mov	r4, r5
  4051a8:	9b08      	ldr	r3, [sp, #32]
  4051aa:	1aeb      	subs	r3, r5, r3
  4051ac:	fb06 9903 	mla	r9, r6, r3, r9
                uint8_t d = *p;
                movedelta(0, 1);
                zbar_scan_y(scn, d);
            }
            ASSERT_POS;
  4051b0:	9b05      	ldr	r3, [sp, #20]
  4051b2:	9308      	str	r3, [sp, #32]
  4051b4:	fb06 3a04 	mla	sl, r6, r4, r3
  4051b8:	9b03      	ldr	r3, [sp, #12]
  4051ba:	449a      	add	sl, r3
  4051bc:	45ca      	cmp	sl, r9
  4051be:	d006      	beq.n	4051ce <zbar_scan_image+0x44e>
  4051c0:	4846      	ldr	r0, [pc, #280]	; (4052dc <zbar_scan_image+0x55c>)
  4051c2:	f240 3107 	movw	r1, #775	; 0x307
  4051c6:	4a44      	ldr	r2, [pc, #272]	; (4052d8 <zbar_scan_image+0x558>)
  4051c8:	4b45      	ldr	r3, [pc, #276]	; (4052e0 <zbar_scan_image+0x560>)
  4051ca:	4c46      	ldr	r4, [pc, #280]	; (4052e4 <zbar_scan_image+0x564>)
  4051cc:	47a0      	blx	r4
}

static inline void quiet_border (zbar_image_scanner_t *iscn)
{
    /* flush scanner pipeline */
    zbar_scanner_t *scn = iscn->scn;
  4051ce:	f8db 3000 	ldr.w	r3, [fp]
    zbar_scanner_flush(scn);
  4051d2:	9305      	str	r3, [sp, #20]
  4051d4:	4618      	mov	r0, r3
  4051d6:	f8df 9120 	ldr.w	r9, [pc, #288]	; 4052f8 <zbar_scan_image+0x578>
  4051da:	47c8      	blx	r9
    zbar_scanner_flush(scn);
  4051dc:	9805      	ldr	r0, [sp, #20]
  4051de:	47c8      	blx	r9
    zbar_scanner_new_scan(scn);
  4051e0:	9805      	ldr	r0, [sp, #20]
  4051e2:	4b39      	ldr	r3, [pc, #228]	; (4052c8 <zbar_scan_image+0x548>)
  4051e4:	4798      	blx	r3
            }
            ASSERT_POS;
            quiet_border(iscn);
            //svg_path_end();

            movedelta(density, -1);
  4051e6:	9804      	ldr	r0, [sp, #16]
  4051e8:	4603      	mov	r3, r0
  4051ea:	3c01      	subs	r4, #1
  4051ec:	9907      	ldr	r1, [sp, #28]
  4051ee:	1b8a      	subs	r2, r1, r6
  4051f0:	4492      	add	sl, r2
            iscn->v = x;
  4051f2:	f8cb 0028 	str.w	r0, [fp, #40]	; 0x28
            if(x >= cx1)
  4051f6:	9909      	ldr	r1, [sp, #36]	; 0x24
  4051f8:	4281      	cmp	r1, r0
  4051fa:	d94e      	bls.n	40529a <zbar_scan_image+0x51a>
                break;

            zprintf(128, "img_y-: %04d,%04d @%p\n", x, y, p);
  4051fc:	4a33      	ldr	r2, [pc, #204]	; (4052cc <zbar_scan_image+0x54c>)
  4051fe:	6812      	ldr	r2, [r2, #0]
  405200:	2a7f      	cmp	r2, #127	; 0x7f
  405202:	dd0a      	ble.n	40521a <zbar_scan_image+0x49a>
  405204:	4a32      	ldr	r2, [pc, #200]	; (4052d0 <zbar_scan_image+0x550>)
  405206:	6812      	ldr	r2, [r2, #0]
  405208:	68d0      	ldr	r0, [r2, #12]
  40520a:	9400      	str	r4, [sp, #0]
  40520c:	f8cd a004 	str.w	sl, [sp, #4]
  405210:	4938      	ldr	r1, [pc, #224]	; (4052f4 <zbar_scan_image+0x574>)
  405212:	4a31      	ldr	r2, [pc, #196]	; (4052d8 <zbar_scan_image+0x558>)
  405214:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 4052fc <zbar_scan_image+0x57c>
  405218:	47e0      	blx	ip
            //svg_path_start("vedge", -1. / 32, h, x + 0.5);
            iscn->dy = iscn->du = -1;
  40521a:	f04f 33ff 	mov.w	r3, #4294967295
  40521e:	f8cb 3020 	str.w	r3, [fp, #32]
  405222:	f8cb 301c 	str.w	r3, [fp, #28]
            iscn->umin = cy1;
  405226:	f8cb 5024 	str.w	r5, [fp, #36]	; 0x24
            while(y >= cy0) {
  40522a:	45a0      	cmp	r8, r4
  40522c:	dc08      	bgt.n	405240 <zbar_scan_image+0x4c0>
                uint8_t d = *p;
  40522e:	f89a 1000 	ldrb.w	r1, [sl]
                movedelta(0, -1);
  405232:	3c01      	subs	r4, #1
  405234:	ebc6 0a0a 	rsb	sl, r6, sl
                zbar_scan_y(scn, d);
  405238:	9802      	ldr	r0, [sp, #8]
  40523a:	47b8      	blx	r7

            zprintf(128, "img_y-: %04d,%04d @%p\n", x, y, p);
            //svg_path_start("vedge", -1. / 32, h, x + 0.5);
            iscn->dy = iscn->du = -1;
            iscn->umin = cy1;
            while(y >= cy0) {
  40523c:	45a0      	cmp	r8, r4
  40523e:	ddf6      	ble.n	40522e <zbar_scan_image+0x4ae>
                uint8_t d = *p;
                movedelta(0, -1);
                zbar_scan_y(scn, d);
            }
            ASSERT_POS;
  405240:	9b04      	ldr	r3, [sp, #16]
  405242:	fb06 3904 	mla	r9, r6, r4, r3
  405246:	9b03      	ldr	r3, [sp, #12]
  405248:	eb03 0809 	add.w	r8, r3, r9
  40524c:	45d0      	cmp	r8, sl
  40524e:	d006      	beq.n	40525e <zbar_scan_image+0x4de>
  405250:	4822      	ldr	r0, [pc, #136]	; (4052dc <zbar_scan_image+0x55c>)
  405252:	f240 3119 	movw	r1, #793	; 0x319
  405256:	4a20      	ldr	r2, [pc, #128]	; (4052d8 <zbar_scan_image+0x558>)
  405258:	4b21      	ldr	r3, [pc, #132]	; (4052e0 <zbar_scan_image+0x560>)
  40525a:	4c22      	ldr	r4, [pc, #136]	; (4052e4 <zbar_scan_image+0x564>)
  40525c:	47a0      	blx	r4
}

static inline void quiet_border (zbar_image_scanner_t *iscn)
{
    /* flush scanner pipeline */
    zbar_scanner_t *scn = iscn->scn;
  40525e:	f8db 9000 	ldr.w	r9, [fp]
    zbar_scanner_flush(scn);
  405262:	4648      	mov	r0, r9
  405264:	f8df a090 	ldr.w	sl, [pc, #144]	; 4052f8 <zbar_scan_image+0x578>
  405268:	47d0      	blx	sl
    zbar_scanner_flush(scn);
  40526a:	4648      	mov	r0, r9
  40526c:	47d0      	blx	sl
    zbar_scanner_new_scan(scn);
  40526e:	4648      	mov	r0, r9
  405270:	4b15      	ldr	r3, [pc, #84]	; (4052c8 <zbar_scan_image+0x548>)
  405272:	4798      	blx	r3
  405274:	9b08      	ldr	r3, [sp, #32]
  405276:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  405278:	4413      	add	r3, r2
  40527a:	9305      	str	r3, [sp, #20]
            }
            ASSERT_POS;
            quiet_border(iscn);
            //svg_path_end();

            movedelta(density, 1);
  40527c:	3401      	adds	r4, #1
  40527e:	9a07      	ldr	r2, [sp, #28]
  405280:	eb02 0906 	add.w	r9, r2, r6
  405284:	44c1      	add	r9, r8
            iscn->v = x;
  405286:	f8cb 3028 	str.w	r3, [fp, #40]	; 0x28
  40528a:	9a04      	ldr	r2, [sp, #16]
  40528c:	990a      	ldr	r1, [sp, #40]	; 0x28
  40528e:	440a      	add	r2, r1
  405290:	9204      	str	r2, [sp, #16]
        assert(border <= w);
        //svg_group_start("scanner", 90, 1, -1, 0, 0);
        movedelta(border, img->crop_y);
        iscn->v = x;

        while(x < cx1) {
  405292:	9a09      	ldr	r2, [sp, #36]	; 0x24
  405294:	429a      	cmp	r2, r3
  405296:	f63f af60 	bhi.w	40515a <zbar_scan_image+0x3da>
            movedelta(density, 1);
            iscn->v = x;
        }
        //svg_group_end();
    }
    iscn->dy = 0;
  40529a:	2300      	movs	r3, #0
  40529c:	f8cb 301c 	str.w	r3, [fp, #28]
    iscn->img = NULL;
  4052a0:	f8cb 3014 	str.w	r3, [fp, #20]
    _zbar_qr_decode(iscn->qr, iscn, img);
#endif

    /* FIXME tmp hack to filter bad EAN results */
    /* FIXME tmp hack to merge simple case EAN add-ons */
    char filter = (!iscn->enable_cache &&
  4052a4:	f8db 3058 	ldr.w	r3, [fp, #88]	; 0x58
  4052a8:	b95b      	cbnz	r3, 4052c2 <zbar_scan_image+0x542>
  4052aa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  4052ac:	2b01      	cmp	r3, #1
  4052ae:	d027      	beq.n	405300 <zbar_scan_image+0x580>
                   (density == 1 || CFG(iscn, ZBAR_CFG_Y_DENSITY) == 1));
  4052b0:	f8db 306c 	ldr.w	r3, [fp, #108]	; 0x6c
  4052b4:	2b01      	cmp	r3, #1
  4052b6:	bf14      	ite	ne
  4052b8:	f04f 0900 	movne.w	r9, #0
  4052bc:	f04f 0901 	moveq.w	r9, #1
  4052c0:	e020      	b.n	405304 <zbar_scan_image+0x584>
    _zbar_qr_decode(iscn->qr, iscn, img);
#endif

    /* FIXME tmp hack to filter bad EAN results */
    /* FIXME tmp hack to merge simple case EAN add-ons */
    char filter = (!iscn->enable_cache &&
  4052c2:	f04f 0900 	mov.w	r9, #0
  4052c6:	e01d      	b.n	405304 <zbar_scan_image+0x584>
  4052c8:	0040571d 	.word	0x0040571d
  4052cc:	20000d14 	.word	0x20000d14
  4052d0:	20000440 	.word	0x20000440
  4052d4:	0040fa38 	.word	0x0040fa38
  4052d8:	0040faa4 	.word	0x0040faa4
  4052dc:	0040f80c 	.word	0x0040f80c
  4052e0:	0040fa18 	.word	0x0040fa18
  4052e4:	004062e9 	.word	0x004062e9
  4052e8:	0040fa54 	.word	0x0040fa54
  4052ec:	004057b1 	.word	0x004057b1
  4052f0:	0040fa60 	.word	0x0040fa60
  4052f4:	0040fa7c 	.word	0x0040fa7c
  4052f8:	004056c1 	.word	0x004056c1
  4052fc:	004066d1 	.word	0x004066d1
  405300:	f04f 0901 	mov.w	r9, #1
                   (density == 1 || CFG(iscn, ZBAR_CFG_Y_DENSITY) == 1));
    int nean = 0, naddon = 0;
    if(syms->nsyms) {
  405304:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  405306:	685b      	ldr	r3, [r3, #4]
  405308:	2b00      	cmp	r3, #0
  40530a:	f000 8142 	beq.w	405592 <zbar_scan_image+0x812>
        zbar_symbol_t **symp;
        for(symp = &syms->head; *symp; ) {
  40530e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  405310:	3308      	adds	r3, #8
  405312:	9304      	str	r3, [sp, #16]
  405314:	461e      	mov	r6, r3

    /* FIXME tmp hack to filter bad EAN results */
    /* FIXME tmp hack to merge simple case EAN add-ons */
    char filter = (!iscn->enable_cache &&
                   (density == 1 || CFG(iscn, ZBAR_CFG_Y_DENSITY) == 1));
    int nean = 0, naddon = 0;
  405316:	2300      	movs	r3, #0
  405318:	9303      	str	r3, [sp, #12]
  40531a:	9302      	str	r3, [sp, #8]

                    /* recycle */
                    *symp = sym->next;
                    syms->nsyms--;
                    sym->next = NULL;
                    _zbar_image_scanner_recycle_syms(iscn, sym);
  40531c:	f8df a2e8 	ldr.w	sl, [pc, #744]	; 405608 <zbar_scan_image+0x888>
    char filter = (!iscn->enable_cache &&
                   (density == 1 || CFG(iscn, ZBAR_CFG_Y_DENSITY) == 1));
    int nean = 0, naddon = 0;
    if(syms->nsyms) {
        zbar_symbol_t **symp;
        for(symp = &syms->head; *symp; ) {
  405320:	e05e      	b.n	4053e0 <zbar_scan_image+0x660>
            zbar_symbol_t *sym = *symp;
            if(sym->cache_count <= 0 &&
  405322:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  405324:	2b00      	cmp	r3, #0
  405326:	dc59      	bgt.n	4053dc <zbar_scan_image+0x65c>
               ((sym->type < ZBAR_COMPOSITE && sym->type > ZBAR_PARTIAL) ||
  405328:	8823      	ldrh	r3, [r4, #0]
  40532a:	1e9a      	subs	r2, r3, #2
    int nean = 0, naddon = 0;
    if(syms->nsyms) {
        zbar_symbol_t **symp;
        for(symp = &syms->head; *symp; ) {
            zbar_symbol_t *sym = *symp;
            if(sym->cache_count <= 0 &&
  40532c:	b292      	uxth	r2, r2
  40532e:	2a0c      	cmp	r2, #12
  405330:	d907      	bls.n	405342 <zbar_scan_image+0x5c2>
               ((sym->type < ZBAR_COMPOSITE && sym->type > ZBAR_PARTIAL) ||
  405332:	f1a3 0222 	sub.w	r2, r3, #34	; 0x22
  405336:	b292      	uxth	r2, r2
  405338:	2a01      	cmp	r2, #1
  40533a:	d905      	bls.n	405348 <zbar_scan_image+0x5c8>
                sym->type == ZBAR_DATABAR ||
                sym->type == ZBAR_DATABAR_EXP ||
  40533c:	2b26      	cmp	r3, #38	; 0x26
  40533e:	d14d      	bne.n	4053dc <zbar_scan_image+0x65c>
  405340:	e16b      	b.n	40561a <zbar_scan_image+0x89a>
                sym->type == ZBAR_CODABAR))
            {
	        if((sym->type == ZBAR_CODABAR || filter) && sym->quality < 4) {
  405342:	2b26      	cmp	r3, #38	; 0x26
  405344:	f000 8139 	beq.w	4055ba <zbar_scan_image+0x83a>
  405348:	f019 0fff 	tst.w	r9, #255	; 0xff
  40534c:	d039      	beq.n	4053c2 <zbar_scan_image+0x642>
  40534e:	6be2      	ldr	r2, [r4, #60]	; 0x3c
  405350:	2a03      	cmp	r2, #3
  405352:	dc36      	bgt.n	4053c2 <zbar_scan_image+0x642>
                    if(iscn->enable_cache) {
  405354:	f8db 3058 	ldr.w	r3, [fp, #88]	; 0x58
  405358:	b33b      	cbz	r3, 4053aa <zbar_scan_image+0x62a>

static inline zbar_symbol_t *cache_lookup (zbar_image_scanner_t *iscn,
                                           zbar_symbol_t *sym)
{
    /* search for matching entry in cache */
    zbar_symbol_t **entry = &iscn->cache;
  40535a:	f10b 075c 	add.w	r7, fp, #92	; 0x5c
  40535e:	e020      	b.n	4053a2 <zbar_scan_image+0x622>
    while(*entry) {
        if((*entry)->type == sym->type &&
  405360:	882a      	ldrh	r2, [r5, #0]
  405362:	8823      	ldrh	r3, [r4, #0]
  405364:	429a      	cmp	r2, r3
  405366:	d10a      	bne.n	40537e <zbar_scan_image+0x5fe>
           (*entry)->datalen == sym->datalen &&
  405368:	692a      	ldr	r2, [r5, #16]
                                           zbar_symbol_t *sym)
{
    /* search for matching entry in cache */
    zbar_symbol_t **entry = &iscn->cache;
    while(*entry) {
        if((*entry)->type == sym->type &&
  40536a:	6923      	ldr	r3, [r4, #16]
  40536c:	429a      	cmp	r2, r3
  40536e:	d106      	bne.n	40537e <zbar_scan_image+0x5fe>
           (*entry)->datalen == sym->datalen &&
           !memcmp((*entry)->data, sym->data, sym->datalen))
  405370:	6968      	ldr	r0, [r5, #20]
  405372:	6961      	ldr	r1, [r4, #20]
  405374:	4b95      	ldr	r3, [pc, #596]	; (4055cc <zbar_scan_image+0x84c>)
  405376:	4798      	blx	r3
{
    /* search for matching entry in cache */
    zbar_symbol_t **entry = &iscn->cache;
    while(*entry) {
        if((*entry)->type == sym->type &&
           (*entry)->datalen == sym->datalen &&
  405378:	2800      	cmp	r0, #0
  40537a:	f000 8123 	beq.w	4055c4 <zbar_scan_image+0x844>
           !memcmp((*entry)->data, sym->data, sym->datalen))
            break;
        if((sym->time - (*entry)->time) > CACHE_TIMEOUT) {
  40537e:	6b63      	ldr	r3, [r4, #52]	; 0x34
  405380:	6b6a      	ldr	r2, [r5, #52]	; 0x34
  405382:	1a9b      	subs	r3, r3, r2
  405384:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
  405388:	d909      	bls.n	40539e <zbar_scan_image+0x61e>
            /* recycle stale cache entry */
            zbar_symbol_t *next = (*entry)->next;
  40538a:	f8d5 802c 	ldr.w	r8, [r5, #44]	; 0x2c
            (*entry)->next = NULL;
  40538e:	2300      	movs	r3, #0
  405390:	62eb      	str	r3, [r5, #44]	; 0x2c
            _zbar_image_scanner_recycle_syms(iscn, *entry);
  405392:	4658      	mov	r0, fp
  405394:	6839      	ldr	r1, [r7, #0]
  405396:	47d0      	blx	sl
            *entry = next;
  405398:	f8c7 8000 	str.w	r8, [r7]
  40539c:	e001      	b.n	4053a2 <zbar_scan_image+0x622>
        }
        else
            entry = &(*entry)->next;
  40539e:	f105 072c 	add.w	r7, r5, #44	; 0x2c
static inline zbar_symbol_t *cache_lookup (zbar_image_scanner_t *iscn,
                                           zbar_symbol_t *sym)
{
    /* search for matching entry in cache */
    zbar_symbol_t **entry = &iscn->cache;
    while(*entry) {
  4053a2:	683d      	ldr	r5, [r7, #0]
  4053a4:	2d00      	cmp	r5, #0
  4053a6:	d1db      	bne.n	405360 <zbar_scan_image+0x5e0>
  4053a8:	e130      	b.n	40560c <zbar_scan_image+0x88c>
                        else
                            assert(0);
                    }

                    /* recycle */
                    *symp = sym->next;
  4053aa:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  4053ac:	6033      	str	r3, [r6, #0]
                    syms->nsyms--;
  4053ae:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  4053b0:	6853      	ldr	r3, [r2, #4]
  4053b2:	3b01      	subs	r3, #1
  4053b4:	6053      	str	r3, [r2, #4]
                    sym->next = NULL;
  4053b6:	2300      	movs	r3, #0
  4053b8:	62e3      	str	r3, [r4, #44]	; 0x2c
                    _zbar_image_scanner_recycle_syms(iscn, sym);
  4053ba:	4658      	mov	r0, fp
  4053bc:	4621      	mov	r1, r4
  4053be:	47d0      	blx	sl
                    continue;
  4053c0:	e00e      	b.n	4053e0 <zbar_scan_image+0x660>
                }
                else if(sym->type < ZBAR_COMPOSITE &&
  4053c2:	2b0e      	cmp	r3, #14
  4053c4:	d80a      	bhi.n	4053dc <zbar_scan_image+0x65c>
  4053c6:	2b0a      	cmp	r3, #10
  4053c8:	d008      	beq.n	4053dc <zbar_scan_image+0x65c>
                        sym->type != ZBAR_ISBN10)
                {
                    if(sym->type > ZBAR_EAN5)
  4053ca:	2b05      	cmp	r3, #5
  4053cc:	d903      	bls.n	4053d6 <zbar_scan_image+0x656>
                        nean++;
  4053ce:	9b02      	ldr	r3, [sp, #8]
  4053d0:	3301      	adds	r3, #1
  4053d2:	9302      	str	r3, [sp, #8]
  4053d4:	e002      	b.n	4053dc <zbar_scan_image+0x65c>
                    else
                        naddon++;
  4053d6:	9b03      	ldr	r3, [sp, #12]
  4053d8:	3301      	adds	r3, #1
  4053da:	9303      	str	r3, [sp, #12]
                }
            }
            symp = &sym->next;
  4053dc:	f104 062c 	add.w	r6, r4, #44	; 0x2c
    char filter = (!iscn->enable_cache &&
                   (density == 1 || CFG(iscn, ZBAR_CFG_Y_DENSITY) == 1));
    int nean = 0, naddon = 0;
    if(syms->nsyms) {
        zbar_symbol_t **symp;
        for(symp = &syms->head; *symp; ) {
  4053e0:	6834      	ldr	r4, [r6, #0]
  4053e2:	2c00      	cmp	r4, #0
  4053e4:	d19d      	bne.n	405322 <zbar_scan_image+0x5a2>
                }
            }
            symp = &sym->next;
        }

        if(nean == 1 && naddon == 1 && iscn->ean_config) {
  4053e6:	9b02      	ldr	r3, [sp, #8]
  4053e8:	2b01      	cmp	r3, #1
  4053ea:	f040 80c8 	bne.w	40557e <zbar_scan_image+0x7fe>
  4053ee:	9b03      	ldr	r3, [sp, #12]
  4053f0:	2b01      	cmp	r3, #1
  4053f2:	f040 80c4 	bne.w	40557e <zbar_scan_image+0x7fe>
  4053f6:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  4053fa:	b9b3      	cbnz	r3, 40542a <zbar_scan_image+0x6aa>
  4053fc:	e0bf      	b.n	40557e <zbar_scan_image+0x7fe>
            /* create container symbol for composite result */
            zbar_symbol_t *ean = NULL, *addon = NULL;
            for(symp = &syms->head; *symp; ) {
                zbar_symbol_t *sym = *symp;
                if(sym->type < ZBAR_COMPOSITE && sym->type > ZBAR_PARTIAL) {
  4053fe:	881a      	ldrh	r2, [r3, #0]
  405400:	3a02      	subs	r2, #2
  405402:	b292      	uxth	r2, r2
  405404:	2a0c      	cmp	r2, #12
  405406:	d80d      	bhi.n	405424 <zbar_scan_image+0x6a4>
                    /* move to composite */
                    *symp = sym->next;
  405408:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  40540a:	6002      	str	r2, [r0, #0]
                    syms->nsyms--;
  40540c:	6862      	ldr	r2, [r4, #4]
  40540e:	3a01      	subs	r2, #1
  405410:	6062      	str	r2, [r4, #4]
                    sym->next = NULL;
  405412:	62d9      	str	r1, [r3, #44]	; 0x2c
                    if(sym->type <= ZBAR_EAN5)
  405414:	881a      	ldrh	r2, [r3, #0]
                        addon = sym;
                    else
                        ean = sym;
  405416:	2a05      	cmp	r2, #5
  405418:	bf88      	it	hi
  40541a:	461d      	movhi	r5, r3
  40541c:	2a05      	cmp	r2, #5
  40541e:	bf98      	it	ls
  405420:	461e      	movls	r6, r3
  405422:	e007      	b.n	405434 <zbar_scan_image+0x6b4>
                }
                else
                    symp = &sym->next;
  405424:	f103 002c 	add.w	r0, r3, #44	; 0x2c
  405428:	e004      	b.n	405434 <zbar_scan_image+0x6b4>
  40542a:	2600      	movs	r6, #0
  40542c:	4635      	mov	r5, r6
                zbar_symbol_t *sym = *symp;
                if(sym->type < ZBAR_COMPOSITE && sym->type > ZBAR_PARTIAL) {
                    /* move to composite */
                    *symp = sym->next;
                    syms->nsyms--;
                    sym->next = NULL;
  40542e:	4631      	mov	r1, r6
  405430:	9804      	ldr	r0, [sp, #16]
  405432:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
        }

        if(nean == 1 && naddon == 1 && iscn->ean_config) {
            /* create container symbol for composite result */
            zbar_symbol_t *ean = NULL, *addon = NULL;
            for(symp = &syms->head; *symp; ) {
  405434:	6803      	ldr	r3, [r0, #0]
  405436:	2b00      	cmp	r3, #0
  405438:	d1e1      	bne.n	4053fe <zbar_scan_image+0x67e>
                        ean = sym;
                }
                else
                    symp = &sym->next;
            }
            assert(ean);
  40543a:	b935      	cbnz	r5, 40544a <zbar_scan_image+0x6ca>
  40543c:	4864      	ldr	r0, [pc, #400]	; (4055d0 <zbar_scan_image+0x850>)
  40543e:	f240 3167 	movw	r1, #871	; 0x367
  405442:	4a64      	ldr	r2, [pc, #400]	; (4055d4 <zbar_scan_image+0x854>)
  405444:	4b64      	ldr	r3, [pc, #400]	; (4055d8 <zbar_scan_image+0x858>)
  405446:	4c65      	ldr	r4, [pc, #404]	; (4055dc <zbar_scan_image+0x85c>)
  405448:	47a0      	blx	r4
            assert(addon);
  40544a:	b936      	cbnz	r6, 40545a <zbar_scan_image+0x6da>
  40544c:	4860      	ldr	r0, [pc, #384]	; (4055d0 <zbar_scan_image+0x850>)
  40544e:	f44f 715a 	mov.w	r1, #872	; 0x368
  405452:	4a60      	ldr	r2, [pc, #384]	; (4055d4 <zbar_scan_image+0x854>)
  405454:	4b62      	ldr	r3, [pc, #392]	; (4055e0 <zbar_scan_image+0x860>)
  405456:	4c61      	ldr	r4, [pc, #388]	; (4055dc <zbar_scan_image+0x85c>)
  405458:	47a0      	blx	r4

            int datalen = ean->datalen + addon->datalen + 1;
  40545a:	692f      	ldr	r7, [r5, #16]
  40545c:	6933      	ldr	r3, [r6, #16]
  40545e:	443b      	add	r3, r7
  405460:	1c5f      	adds	r7, r3, #1
{
    /* recycle old or alloc new symbol */
    zbar_symbol_t *sym = NULL;
    int i;
    for(i = 0; i < RECYCLE_BUCKETS - 1; i++)
        if(datalen <= 1 << (i * 2))
  405462:	2f01      	cmp	r7, #1
  405464:	dd36      	ble.n	4054d4 <zbar_scan_image+0x754>
  405466:	2f04      	cmp	r7, #4
  405468:	dd06      	ble.n	405478 <zbar_scan_image+0x6f8>
  40546a:	2f10      	cmp	r7, #16
  40546c:	dd06      	ble.n	40547c <zbar_scan_image+0x6fc>
  40546e:	2f40      	cmp	r7, #64	; 0x40
                               int datalen)
{
    /* recycle old or alloc new symbol */
    zbar_symbol_t *sym = NULL;
    int i;
    for(i = 0; i < RECYCLE_BUCKETS - 1; i++)
  405470:	bfd8      	it	le
  405472:	2303      	movle	r3, #3
        if(datalen <= 1 << (i * 2))
  405474:	dd03      	ble.n	40547e <zbar_scan_image+0x6fe>
  405476:	e005      	b.n	405484 <zbar_scan_image+0x704>
                               int datalen)
{
    /* recycle old or alloc new symbol */
    zbar_symbol_t *sym = NULL;
    int i;
    for(i = 0; i < RECYCLE_BUCKETS - 1; i++)
  405478:	2301      	movs	r3, #1
  40547a:	e000      	b.n	40547e <zbar_scan_image+0x6fe>
  40547c:	2302      	movs	r3, #2
        if(datalen <= 1 << (i * 2))
            break;

    for(; i > 0; i--)
  40547e:	2b00      	cmp	r3, #0
  405480:	dd28      	ble.n	4054d4 <zbar_scan_image+0x754>
  405482:	e000      	b.n	405486 <zbar_scan_image+0x706>
                               int datalen)
{
    /* recycle old or alloc new symbol */
    zbar_symbol_t *sym = NULL;
    int i;
    for(i = 0; i < RECYCLE_BUCKETS - 1; i++)
  405484:	2304      	movs	r3, #4
        if(datalen <= 1 << (i * 2))
            break;

    for(; i > 0; i--)
        if((sym = iscn->recycle[i].head)) {
  405486:	eb0b 02c3 	add.w	r2, fp, r3, lsl #3
  40548a:	6b54      	ldr	r4, [r2, #52]	; 0x34
  40548c:	eb0b 02c3 	add.w	r2, fp, r3, lsl #3
  405490:	b164      	cbz	r4, 4054ac <zbar_scan_image+0x72c>
  405492:	e002      	b.n	40549a <zbar_scan_image+0x71a>
  405494:	3a08      	subs	r2, #8
  405496:	6b54      	ldr	r4, [r2, #52]	; 0x34
  405498:	b144      	cbz	r4, 4054ac <zbar_scan_image+0x72c>
  40549a:	eb0b 0183 	add.w	r1, fp, r3, lsl #2
            STAT(sym_recycle[i]);
  40549e:	f8d1 20d8 	ldr.w	r2, [r1, #216]	; 0xd8
  4054a2:	3201      	adds	r2, #1
  4054a4:	f8c1 20d8 	str.w	r2, [r1, #216]	; 0xd8
            break;
        }

    if(sym) {
  4054a8:	b91c      	cbnz	r4, 4054b2 <zbar_scan_image+0x732>
  4054aa:	e013      	b.n	4054d4 <zbar_scan_image+0x754>
    int i;
    for(i = 0; i < RECYCLE_BUCKETS - 1; i++)
        if(datalen <= 1 << (i * 2))
            break;

    for(; i > 0; i--)
  4054ac:	3b01      	subs	r3, #1
  4054ae:	d1f1      	bne.n	405494 <zbar_scan_image+0x714>
  4054b0:	e010      	b.n	4054d4 <zbar_scan_image+0x754>
            STAT(sym_recycle[i]);
            break;
        }

    if(sym) {
        iscn->recycle[i].head = sym->next;
  4054b2:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  4054b4:	eb0b 03c3 	add.w	r3, fp, r3, lsl #3
  4054b8:	635a      	str	r2, [r3, #52]	; 0x34
        sym->next = NULL;
  4054ba:	2200      	movs	r2, #0
  4054bc:	62e2      	str	r2, [r4, #44]	; 0x2c
        assert(iscn->recycle[i].nsyms);
  4054be:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  4054c0:	b92a      	cbnz	r2, 4054ce <zbar_scan_image+0x74e>
  4054c2:	4843      	ldr	r0, [pc, #268]	; (4055d0 <zbar_scan_image+0x850>)
  4054c4:	21e8      	movs	r1, #232	; 0xe8
  4054c6:	4a47      	ldr	r2, [pc, #284]	; (4055e4 <zbar_scan_image+0x864>)
  4054c8:	4b47      	ldr	r3, [pc, #284]	; (4055e8 <zbar_scan_image+0x868>)
  4054ca:	4c44      	ldr	r4, [pc, #272]	; (4055dc <zbar_scan_image+0x85c>)
  4054cc:	47a0      	blx	r4
        iscn->recycle[i].nsyms--;
  4054ce:	3a01      	subs	r2, #1
  4054d0:	631a      	str	r2, [r3, #48]	; 0x30
  4054d2:	e009      	b.n	4054e8 <zbar_scan_image+0x768>
    }
    else {
        sym = calloc(1, sizeof(zbar_symbol_t));
  4054d4:	2001      	movs	r0, #1
  4054d6:	2140      	movs	r1, #64	; 0x40
  4054d8:	4b44      	ldr	r3, [pc, #272]	; (4055ec <zbar_scan_image+0x86c>)
  4054da:	4798      	blx	r3
  4054dc:	4604      	mov	r4, r0
        STAT(sym_new);
  4054de:	f8db 30d4 	ldr.w	r3, [fp, #212]	; 0xd4
  4054e2:	3301      	adds	r3, #1
  4054e4:	f8cb 30d4 	str.w	r3, [fp, #212]	; 0xd4
    }

    /* init new symbol */
    sym->type = type;
  4054e8:	230f      	movs	r3, #15
  4054ea:	8023      	strh	r3, [r4, #0]
    sym->quality = 1;
  4054ec:	2301      	movs	r3, #1
  4054ee:	63e3      	str	r3, [r4, #60]	; 0x3c
    sym->npts = 0;
  4054f0:	2300      	movs	r3, #0
  4054f2:	61e3      	str	r3, [r4, #28]
    sym->orient = ZBAR_ORIENT_UNKNOWN;
  4054f4:	22ff      	movs	r2, #255	; 0xff
  4054f6:	f884 2024 	strb.w	r2, [r4, #36]	; 0x24
    sym->cache_count = 0;
  4054fa:	63a3      	str	r3, [r4, #56]	; 0x38
    sym->time = iscn->time;
  4054fc:	f8db 3010 	ldr.w	r3, [fp, #16]
  405500:	6363      	str	r3, [r4, #52]	; 0x34
    assert(!sym->syms);
  405502:	6b23      	ldr	r3, [r4, #48]	; 0x30
  405504:	b12b      	cbz	r3, 405512 <zbar_scan_image+0x792>
  405506:	4832      	ldr	r0, [pc, #200]	; (4055d0 <zbar_scan_image+0x850>)
  405508:	21f7      	movs	r1, #247	; 0xf7
  40550a:	4a36      	ldr	r2, [pc, #216]	; (4055e4 <zbar_scan_image+0x864>)
  40550c:	4b38      	ldr	r3, [pc, #224]	; (4055f0 <zbar_scan_image+0x870>)
  40550e:	4c33      	ldr	r4, [pc, #204]	; (4055dc <zbar_scan_image+0x85c>)
  405510:	47a0      	blx	r4

    if(datalen > 0) {
  405512:	2f00      	cmp	r7, #0
  405514:	dd0e      	ble.n	405534 <zbar_scan_image+0x7b4>
        sym->datalen = datalen - 1;
  405516:	1e7b      	subs	r3, r7, #1
  405518:	6123      	str	r3, [r4, #16]
        if(sym->data_alloc < datalen) {
  40551a:	68e3      	ldr	r3, [r4, #12]
  40551c:	429f      	cmp	r7, r3
  40551e:	d911      	bls.n	405544 <zbar_scan_image+0x7c4>
            if(sym->data)
  405520:	6960      	ldr	r0, [r4, #20]
  405522:	b108      	cbz	r0, 405528 <zbar_scan_image+0x7a8>
                free(sym->data);
  405524:	4b33      	ldr	r3, [pc, #204]	; (4055f4 <zbar_scan_image+0x874>)
  405526:	4798      	blx	r3
            sym->data_alloc = datalen;
  405528:	60e7      	str	r7, [r4, #12]
            sym->data = malloc(datalen);
  40552a:	4638      	mov	r0, r7
  40552c:	4b32      	ldr	r3, [pc, #200]	; (4055f8 <zbar_scan_image+0x878>)
  40552e:	4798      	blx	r3
  405530:	6160      	str	r0, [r4, #20]
  405532:	e007      	b.n	405544 <zbar_scan_image+0x7c4>
        }
    }
    else {
        if(sym->data)
  405534:	6960      	ldr	r0, [r4, #20]
  405536:	b108      	cbz	r0, 40553c <zbar_scan_image+0x7bc>
            free(sym->data);
  405538:	4b2e      	ldr	r3, [pc, #184]	; (4055f4 <zbar_scan_image+0x874>)
  40553a:	4798      	blx	r3
        sym->data = NULL;
  40553c:	2300      	movs	r3, #0
  40553e:	6163      	str	r3, [r4, #20]
        sym->datalen = sym->data_alloc = 0;
  405540:	60e3      	str	r3, [r4, #12]
  405542:	6123      	str	r3, [r4, #16]
            assert(addon);

            int datalen = ean->datalen + addon->datalen + 1;
            zbar_symbol_t *ean_sym =
                _zbar_image_scanner_alloc_sym(iscn, ZBAR_COMPOSITE, datalen);
            ean_sym->orient = ean->orient;
  405544:	f895 3024 	ldrb.w	r3, [r5, #36]	; 0x24
  405548:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
            ean_sym->syms = _zbar_symbol_set_create();
  40554c:	4b2b      	ldr	r3, [pc, #172]	; (4055fc <zbar_scan_image+0x87c>)
  40554e:	4798      	blx	r3
  405550:	6320      	str	r0, [r4, #48]	; 0x30
            memcpy(ean_sym->data, ean->data, ean->datalen);
  405552:	6960      	ldr	r0, [r4, #20]
  405554:	6969      	ldr	r1, [r5, #20]
  405556:	692a      	ldr	r2, [r5, #16]
  405558:	4f29      	ldr	r7, [pc, #164]	; (405600 <zbar_scan_image+0x880>)
  40555a:	47b8      	blx	r7
            memcpy(ean_sym->data + ean->datalen,
  40555c:	6960      	ldr	r0, [r4, #20]
  40555e:	692b      	ldr	r3, [r5, #16]
  405560:	6932      	ldr	r2, [r6, #16]
  405562:	4418      	add	r0, r3
  405564:	6971      	ldr	r1, [r6, #20]
  405566:	3201      	adds	r2, #1
  405568:	47b8      	blx	r7
                   addon->data, addon->datalen + 1);
            ean_sym->syms->head = ean;
  40556a:	6b23      	ldr	r3, [r4, #48]	; 0x30
  40556c:	609d      	str	r5, [r3, #8]
            ean->next = addon;
  40556e:	62ee      	str	r6, [r5, #44]	; 0x2c
            ean_sym->syms->nsyms = 2;
  405570:	6b23      	ldr	r3, [r4, #48]	; 0x30
  405572:	2202      	movs	r2, #2
  405574:	605a      	str	r2, [r3, #4]
            _zbar_image_scanner_add_sym(iscn, ean_sym);
  405576:	4658      	mov	r0, fp
  405578:	4621      	mov	r1, r4
  40557a:	4b22      	ldr	r3, [pc, #136]	; (405604 <zbar_scan_image+0x884>)
  40557c:	4798      	blx	r3
        }
    }

    if(syms->nsyms && iscn->handler)
  40557e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  405580:	685b      	ldr	r3, [r3, #4]
  405582:	b133      	cbz	r3, 405592 <zbar_scan_image+0x812>
  405584:	f8db 300c 	ldr.w	r3, [fp, #12]
  405588:	b11b      	cbz	r3, 405592 <zbar_scan_image+0x812>
        iscn->handler(img, iscn->userdata);
  40558a:	9806      	ldr	r0, [sp, #24]
  40558c:	f8db 1008 	ldr.w	r1, [fp, #8]
  405590:	4798      	blx	r3

    //svg_close();
    return(syms->nsyms);
  405592:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  405594:	6858      	ldr	r0, [r3, #4]
  405596:	e045      	b.n	405624 <zbar_scan_image+0x8a4>
#endif

    /* image must be in grayscale format */
    if(img->format != fourcc('Y','8','0','0') &&
       img->format != fourcc('G','R','E','Y'))
        return(-1);
  405598:	f04f 30ff 	mov.w	r0, #4294967295
  40559c:	e042      	b.n	405624 <zbar_scan_image+0x8a4>
                                              zbar_image_t *img)
{
    zbar_symbol_set_t *syms = iscn->syms;
    if(syms && syms->refcnt) {
        if(recycle_syms(iscn, syms)) {
            STAT(iscn_syms_inuse);
  40559e:	f8d0 30c4 	ldr.w	r3, [r0, #196]	; 0xc4
  4055a2:	3301      	adds	r3, #1
  4055a4:	f8c0 30c4 	str.w	r3, [r0, #196]	; 0xc4
            iscn->syms = NULL;
  4055a8:	2300      	movs	r3, #0
  4055aa:	62c3      	str	r3, [r0, #44]	; 0x2c
  4055ac:	e418      	b.n	404de0 <zbar_scan_image+0x60>
    }

    syms = img->syms;
    img->syms = NULL;
    if(syms && recycle_syms(iscn, syms))
        STAT(img_syms_inuse);
  4055ae:	f8db 30cc 	ldr.w	r3, [fp, #204]	; 0xcc
  4055b2:	3301      	adds	r3, #1
  4055b4:	f8cb 30cc 	str.w	r3, [fp, #204]	; 0xcc
  4055b8:	e440      	b.n	404e3c <zbar_scan_image+0xbc>
               ((sym->type < ZBAR_COMPOSITE && sym->type > ZBAR_PARTIAL) ||
                sym->type == ZBAR_DATABAR ||
                sym->type == ZBAR_DATABAR_EXP ||
                sym->type == ZBAR_CODABAR))
            {
	        if((sym->type == ZBAR_CODABAR || filter) && sym->quality < 4) {
  4055ba:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  4055bc:	2b03      	cmp	r3, #3
  4055be:	f77f aec9 	ble.w	405354 <zbar_scan_image+0x5d4>
  4055c2:	e70b      	b.n	4053dc <zbar_scan_image+0x65c>
                    if(iscn->enable_cache) {
                        /* revert cache update */
                        zbar_symbol_t *entry = cache_lookup(iscn, sym);
                        if(entry)
                            entry->cache_count--;
  4055c4:	6bab      	ldr	r3, [r5, #56]	; 0x38
  4055c6:	3b01      	subs	r3, #1
  4055c8:	63ab      	str	r3, [r5, #56]	; 0x38
  4055ca:	e6ee      	b.n	4053aa <zbar_scan_image+0x62a>
  4055cc:	00407409 	.word	0x00407409
  4055d0:	0040f80c 	.word	0x0040f80c
  4055d4:	0040faa4 	.word	0x0040faa4
  4055d8:	0040fa98 	.word	0x0040fa98
  4055dc:	004062e9 	.word	0x004062e9
  4055e0:	0040fa9c 	.word	0x0040fa9c
  4055e4:	0040fab4 	.word	0x0040fab4
  4055e8:	0040f854 	.word	0x0040f854
  4055ec:	00406325 	.word	0x00406325
  4055f0:	0040f86c 	.word	0x0040f86c
  4055f4:	00406e41 	.word	0x00406e41
  4055f8:	00406e31 	.word	0x00406e31
  4055fc:	00405ab9 	.word	0x00405ab9
  405600:	0040746d 	.word	0x0040746d
  405604:	0040451d 	.word	0x0040451d
  405608:	00404405 	.word	0x00404405
                        else
                            assert(0);
  40560c:	4807      	ldr	r0, [pc, #28]	; (40562c <zbar_scan_image+0x8ac>)
  40560e:	f240 313f 	movw	r1, #831	; 0x33f
  405612:	4a07      	ldr	r2, [pc, #28]	; (405630 <zbar_scan_image+0x8b0>)
  405614:	4b07      	ldr	r3, [pc, #28]	; (405634 <zbar_scan_image+0x8b4>)
  405616:	4c08      	ldr	r4, [pc, #32]	; (405638 <zbar_scan_image+0x8b8>)
  405618:	47a0      	blx	r4
               ((sym->type < ZBAR_COMPOSITE && sym->type > ZBAR_PARTIAL) ||
                sym->type == ZBAR_DATABAR ||
                sym->type == ZBAR_DATABAR_EXP ||
                sym->type == ZBAR_CODABAR))
            {
	        if((sym->type == ZBAR_CODABAR || filter) && sym->quality < 4) {
  40561a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  40561c:	2b03      	cmp	r3, #3
  40561e:	f77f ae99 	ble.w	405354 <zbar_scan_image+0x5d4>
  405622:	e6db      	b.n	4053dc <zbar_scan_image+0x65c>
    if(syms->nsyms && iscn->handler)
        iscn->handler(img, iscn->userdata);

    //svg_close();
    return(syms->nsyms);
}
  405624:	b013      	add	sp, #76	; 0x4c
  405626:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40562a:	bf00      	nop
  40562c:	0040f80c 	.word	0x0040f80c
  405630:	0040faa4 	.word	0x0040faa4
  405634:	0040fcdc 	.word	0x0040fcdc
  405638:	004062e9 	.word	0x004062e9

0040563c <_zbar_refcnt_init>:


#else

void _zbar_refcnt_init ()
{
  40563c:	4770      	bx	lr
  40563e:	bf00      	nop

00405640 <zbar_scanner_destroy>:
    zbar_scanner_reset(scn);
    return(scn);
}

void zbar_scanner_destroy (zbar_scanner_t *scn)
{
  405640:	b508      	push	{r3, lr}
    free(scn);
  405642:	4b01      	ldr	r3, [pc, #4]	; (405648 <zbar_scanner_destroy+0x8>)
  405644:	4798      	blx	r3
  405646:	bd08      	pop	{r3, pc}
  405648:	00406e41 	.word	0x00406e41

0040564c <zbar_scanner_reset>:
}

zbar_symbol_type_t zbar_scanner_reset (zbar_scanner_t *scn)
{
  40564c:	b510      	push	{r4, lr}
  40564e:	4604      	mov	r4, r0
    memset(&scn->x, 0, sizeof(zbar_scanner_t) - offsetof(zbar_scanner_t, x));
  405650:	3008      	adds	r0, #8
  405652:	2100      	movs	r1, #0
  405654:	2228      	movs	r2, #40	; 0x28
  405656:	4b05      	ldr	r3, [pc, #20]	; (40566c <zbar_scanner_reset+0x20>)
  405658:	4798      	blx	r3
    scn->y1_thresh = scn->y1_min_thresh;
  40565a:	6863      	ldr	r3, [r4, #4]
  40565c:	6223      	str	r3, [r4, #32]
    if(scn->decoder)
  40565e:	6820      	ldr	r0, [r4, #0]
  405660:	b108      	cbz	r0, 405666 <zbar_scanner_reset+0x1a>
        zbar_decoder_reset(scn->decoder);
  405662:	4b03      	ldr	r3, [pc, #12]	; (405670 <zbar_scanner_reset+0x24>)
  405664:	4798      	blx	r3
    return(ZBAR_NONE);
}
  405666:	2000      	movs	r0, #0
  405668:	bd10      	pop	{r4, pc}
  40566a:	bf00      	nop
  40566c:	00407669 	.word	0x00407669
  405670:	00402cad 	.word	0x00402cad

00405674 <zbar_scanner_create>:
    unsigned last_edge;     /* interpolated position of last located edge */
    unsigned width;         /* last element width */
};

zbar_scanner_t *zbar_scanner_create (zbar_decoder_t *dcode)
{
  405674:	b538      	push	{r3, r4, r5, lr}
  405676:	4605      	mov	r5, r0
    zbar_scanner_t *scn = malloc(sizeof(zbar_scanner_t));
  405678:	2030      	movs	r0, #48	; 0x30
  40567a:	4b05      	ldr	r3, [pc, #20]	; (405690 <zbar_scanner_create+0x1c>)
  40567c:	4798      	blx	r3
  40567e:	4604      	mov	r4, r0
    scn->decoder = dcode;
  405680:	6005      	str	r5, [r0, #0]
    scn->y1_min_thresh = ZBAR_SCANNER_THRESH_MIN;
  405682:	2304      	movs	r3, #4
  405684:	6043      	str	r3, [r0, #4]
    zbar_scanner_reset(scn);
  405686:	4b03      	ldr	r3, [pc, #12]	; (405694 <zbar_scanner_create+0x20>)
  405688:	4798      	blx	r3
    return(scn);
}
  40568a:	4620      	mov	r0, r4
  40568c:	bd38      	pop	{r3, r4, r5, pc}
  40568e:	bf00      	nop
  405690:	00406e31 	.word	0x00406e31
  405694:	0040564d 	.word	0x0040564d

00405698 <zbar_scanner_get_width>:
}

unsigned zbar_scanner_get_width (const zbar_scanner_t *scn)
{
    return(scn->width);
}
  405698:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
  40569a:	4770      	bx	lr

0040569c <zbar_scanner_get_edge>:

unsigned zbar_scanner_get_edge (const zbar_scanner_t *scn,
                                unsigned offset,
                                int prec)
{
  40569c:	6a80      	ldr	r0, [r0, #40]	; 0x28
  40569e:	3830      	subs	r0, #48	; 0x30
    unsigned edge = scn->last_edge - offset - (1 << ZBAR_FIXED) - ROUND;
  4056a0:	1a41      	subs	r1, r0, r1
    prec = ZBAR_FIXED - prec;
  4056a2:	f1c2 0205 	rsb	r2, r2, #5
    if(prec > 0)
  4056a6:	2a00      	cmp	r2, #0
  4056a8:	dd02      	ble.n	4056b0 <zbar_scanner_get_edge+0x14>
        return(edge >> prec);
  4056aa:	fa21 f002 	lsr.w	r0, r1, r2
  4056ae:	4770      	bx	lr
    else if(!prec)
  4056b0:	b11a      	cbz	r2, 4056ba <zbar_scanner_get_edge+0x1e>
        return(edge);
    else
        return(edge << -prec);
  4056b2:	4252      	negs	r2, r2
  4056b4:	fa01 f002 	lsl.w	r0, r1, r2
  4056b8:	4770      	bx	lr
    unsigned edge = scn->last_edge - offset - (1 << ZBAR_FIXED) - ROUND;
    prec = ZBAR_FIXED - prec;
    if(prec > 0)
        return(edge >> prec);
    else if(!prec)
        return(edge);
  4056ba:	4608      	mov	r0, r1
    else
        return(edge << -prec);
}
  4056bc:	4770      	bx	lr
  4056be:	bf00      	nop

004056c0 <zbar_scanner_flush>:
        return(zbar_decode_width(scn->decoder, scn->width));
    return(ZBAR_PARTIAL);
}

inline zbar_symbol_type_t zbar_scanner_flush (zbar_scanner_t *scn)
{
  4056c0:	b538      	push	{r3, r4, r5, lr}
    unsigned x;
    if(!scn->y1_sign)
  4056c2:	69c3      	ldr	r3, [r0, #28]
  4056c4:	b323      	cbz	r3, 405710 <zbar_scanner_flush+0x50>
  4056c6:	4604      	mov	r4, r0
        return(ZBAR_NONE);

    x = (scn->x << ZBAR_FIXED) + ROUND;
  4056c8:	6885      	ldr	r5, [r0, #8]
  4056ca:	016d      	lsls	r5, r5, #5
  4056cc:	3510      	adds	r5, #16

    if(scn->cur_edge != x || scn->y1_sign > 0) {
  4056ce:	6a42      	ldr	r2, [r0, #36]	; 0x24
  4056d0:	42aa      	cmp	r2, r5
  4056d2:	d101      	bne.n	4056d8 <zbar_scanner_flush+0x18>
  4056d4:	2b00      	cmp	r3, #0
  4056d6:	dd12      	ble.n	4056fe <zbar_scanner_flush+0x3e>
static inline zbar_symbol_type_t process_edge (zbar_scanner_t *scn,
                                               int y1)
{
    if(!scn->y1_sign)
        scn->last_edge = scn->cur_edge = (1 << ZBAR_FIXED) + ROUND;
    else if(!scn->last_edge)
  4056d8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  4056da:	b903      	cbnz	r3, 4056de <zbar_scanner_flush+0x1e>
        scn->last_edge = scn->cur_edge;
  4056dc:	62a2      	str	r2, [r4, #40]	; 0x28

    scn->width = scn->cur_edge - scn->last_edge;
  4056de:	6a63      	ldr	r3, [r4, #36]	; 0x24
  4056e0:	6aa1      	ldr	r1, [r4, #40]	; 0x28
  4056e2:	1a59      	subs	r1, r3, r1
  4056e4:	62e1      	str	r1, [r4, #44]	; 0x2c
    dbprintf(1, " sgn=%d cur=%d.%d w=%d (%s)\n",
             scn->y1_sign, scn->cur_edge >> ZBAR_FIXED,
             scn->cur_edge & ((1 << ZBAR_FIXED) - 1), scn->width,
             ((y1 > 0) ? "SPACE" : "BAR"));
    scn->last_edge = scn->cur_edge;
  4056e6:	62a3      	str	r3, [r4, #40]	; 0x28
#if DEBUG_SVG > 1
    svg_path_moveto(SVG_ABS, scn->last_edge - (1 << ZBAR_FIXED) - ROUND, 0);
#endif

    /* pass to decoder */
    if(scn->decoder)
  4056e8:	6820      	ldr	r0, [r4, #0]
  4056ea:	b110      	cbz	r0, 4056f2 <zbar_scanner_flush+0x32>
        return(zbar_decode_width(scn->decoder, scn->width));
  4056ec:	4b0a      	ldr	r3, [pc, #40]	; (405718 <zbar_scanner_flush+0x58>)
  4056ee:	4798      	blx	r3
  4056f0:	e000      	b.n	4056f4 <zbar_scanner_flush+0x34>
    return(ZBAR_PARTIAL);
  4056f2:	2001      	movs	r0, #1
    x = (scn->x << ZBAR_FIXED) + ROUND;

    if(scn->cur_edge != x || scn->y1_sign > 0) {
        zbar_symbol_type_t edge = process_edge(scn, -scn->y1_sign);
        dbprintf(1, "flush0:");
        scn->cur_edge = x;
  4056f4:	6265      	str	r5, [r4, #36]	; 0x24
        scn->y1_sign = -scn->y1_sign;
  4056f6:	69e3      	ldr	r3, [r4, #28]
  4056f8:	425b      	negs	r3, r3
  4056fa:	61e3      	str	r3, [r4, #28]
        return(edge);
  4056fc:	bd38      	pop	{r3, r4, r5, pc}
    }

    scn->y1_sign = scn->width = 0;
  4056fe:	2300      	movs	r3, #0
  405700:	62c3      	str	r3, [r0, #44]	; 0x2c
  405702:	61c3      	str	r3, [r0, #28]
    if(scn->decoder)
  405704:	6800      	ldr	r0, [r0, #0]
  405706:	b128      	cbz	r0, 405714 <zbar_scanner_flush+0x54>
        return(zbar_decode_width(scn->decoder, 0));
  405708:	4619      	mov	r1, r3
  40570a:	4b03      	ldr	r3, [pc, #12]	; (405718 <zbar_scanner_flush+0x58>)
  40570c:	4798      	blx	r3
  40570e:	bd38      	pop	{r3, r4, r5, pc}

inline zbar_symbol_type_t zbar_scanner_flush (zbar_scanner_t *scn)
{
    unsigned x;
    if(!scn->y1_sign)
        return(ZBAR_NONE);
  405710:	2000      	movs	r0, #0
  405712:	bd38      	pop	{r3, r4, r5, pc}
    }

    scn->y1_sign = scn->width = 0;
    if(scn->decoder)
        return(zbar_decode_width(scn->decoder, 0));
    return(ZBAR_PARTIAL);
  405714:	2001      	movs	r0, #1
}
  405716:	bd38      	pop	{r3, r4, r5, pc}
  405718:	00402e21 	.word	0x00402e21

0040571c <zbar_scanner_new_scan>:

zbar_symbol_type_t zbar_scanner_new_scan (zbar_scanner_t *scn)
{
  40571c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  405720:	4604      	mov	r4, r0
    zbar_symbol_type_t edge = ZBAR_NONE;
  405722:	f04f 0900 	mov.w	r9, #0
#endif

    /* pass to decoder */
    if(scn->decoder)
        return(zbar_decode_width(scn->decoder, scn->width));
    return(ZBAR_PARTIAL);
  405726:	f04f 0801 	mov.w	r8, #1
    svg_path_moveto(SVG_ABS, scn->last_edge - (1 << ZBAR_FIXED) - ROUND, 0);
#endif

    /* pass to decoder */
    if(scn->decoder)
        return(zbar_decode_width(scn->decoder, scn->width));
  40572a:	4e1e      	ldr	r6, [pc, #120]	; (4057a4 <zbar_scanner_new_scan+0x88>)
        scn->cur_edge = x;
        scn->y1_sign = -scn->y1_sign;
        return(edge);
    }

    scn->y1_sign = scn->width = 0;
  40572c:	464f      	mov	r7, r9
}

zbar_symbol_type_t zbar_scanner_new_scan (zbar_scanner_t *scn)
{
    zbar_symbol_type_t edge = ZBAR_NONE;
    while(scn->y1_sign) {
  40572e:	e026      	b.n	40577e <zbar_scanner_new_scan+0x62>
{
    unsigned x;
    if(!scn->y1_sign)
        return(ZBAR_NONE);

    x = (scn->x << ZBAR_FIXED) + ROUND;
  405730:	68a5      	ldr	r5, [r4, #8]
  405732:	016d      	lsls	r5, r5, #5
  405734:	3510      	adds	r5, #16

    if(scn->cur_edge != x || scn->y1_sign > 0) {
  405736:	6a62      	ldr	r2, [r4, #36]	; 0x24
  405738:	4295      	cmp	r5, r2
  40573a:	d101      	bne.n	405740 <zbar_scanner_new_scan+0x24>
  40573c:	2b00      	cmp	r3, #0
  40573e:	dd11      	ble.n	405764 <zbar_scanner_new_scan+0x48>
static inline zbar_symbol_type_t process_edge (zbar_scanner_t *scn,
                                               int y1)
{
    if(!scn->y1_sign)
        scn->last_edge = scn->cur_edge = (1 << ZBAR_FIXED) + ROUND;
    else if(!scn->last_edge)
  405740:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  405742:	b903      	cbnz	r3, 405746 <zbar_scanner_new_scan+0x2a>
        scn->last_edge = scn->cur_edge;
  405744:	62a2      	str	r2, [r4, #40]	; 0x28

    scn->width = scn->cur_edge - scn->last_edge;
  405746:	6a63      	ldr	r3, [r4, #36]	; 0x24
  405748:	6aa1      	ldr	r1, [r4, #40]	; 0x28
  40574a:	1a59      	subs	r1, r3, r1
  40574c:	62e1      	str	r1, [r4, #44]	; 0x2c
    dbprintf(1, " sgn=%d cur=%d.%d w=%d (%s)\n",
             scn->y1_sign, scn->cur_edge >> ZBAR_FIXED,
             scn->cur_edge & ((1 << ZBAR_FIXED) - 1), scn->width,
             ((y1 > 0) ? "SPACE" : "BAR"));
    scn->last_edge = scn->cur_edge;
  40574e:	62a3      	str	r3, [r4, #40]	; 0x28
#if DEBUG_SVG > 1
    svg_path_moveto(SVG_ABS, scn->last_edge - (1 << ZBAR_FIXED) - ROUND, 0);
#endif

    /* pass to decoder */
    if(scn->decoder)
  405750:	6820      	ldr	r0, [r4, #0]
  405752:	b108      	cbz	r0, 405758 <zbar_scanner_new_scan+0x3c>
        return(zbar_decode_width(scn->decoder, scn->width));
  405754:	47b0      	blx	r6
  405756:	e000      	b.n	40575a <zbar_scanner_new_scan+0x3e>
    return(ZBAR_PARTIAL);
  405758:	4640      	mov	r0, r8
    x = (scn->x << ZBAR_FIXED) + ROUND;

    if(scn->cur_edge != x || scn->y1_sign > 0) {
        zbar_symbol_type_t edge = process_edge(scn, -scn->y1_sign);
        dbprintf(1, "flush0:");
        scn->cur_edge = x;
  40575a:	6265      	str	r5, [r4, #36]	; 0x24
        scn->y1_sign = -scn->y1_sign;
  40575c:	69e3      	ldr	r3, [r4, #28]
  40575e:	425b      	negs	r3, r3
  405760:	61e3      	str	r3, [r4, #28]
  405762:	e007      	b.n	405774 <zbar_scanner_new_scan+0x58>
        return(edge);
    }

    scn->y1_sign = scn->width = 0;
  405764:	62e7      	str	r7, [r4, #44]	; 0x2c
  405766:	61e7      	str	r7, [r4, #28]
    if(scn->decoder)
  405768:	6820      	ldr	r0, [r4, #0]
  40576a:	b110      	cbz	r0, 405772 <zbar_scanner_new_scan+0x56>
        return(zbar_decode_width(scn->decoder, 0));
  40576c:	4639      	mov	r1, r7
  40576e:	47b0      	blx	r6
  405770:	e000      	b.n	405774 <zbar_scanner_new_scan+0x58>
    return(ZBAR_PARTIAL);
  405772:	4640      	mov	r0, r8
  405774:	4548      	cmp	r0, r9
  405776:	bf38      	it	cc
  405778:	4648      	movcc	r0, r9
  40577a:	fa1f f980 	uxth.w	r9, r0
}

zbar_symbol_type_t zbar_scanner_new_scan (zbar_scanner_t *scn)
{
    zbar_symbol_type_t edge = ZBAR_NONE;
    while(scn->y1_sign) {
  40577e:	69e3      	ldr	r3, [r4, #28]
  405780:	2b00      	cmp	r3, #0
  405782:	d1d5      	bne.n	405730 <zbar_scanner_new_scan+0x14>
        if(tmp < 0 || tmp > edge)
            edge = tmp;
    }

    /* reset scanner and associated decoder */
    memset(&scn->x, 0, sizeof(zbar_scanner_t) - offsetof(zbar_scanner_t, x));
  405784:	f104 0008 	add.w	r0, r4, #8
  405788:	2100      	movs	r1, #0
  40578a:	2228      	movs	r2, #40	; 0x28
  40578c:	4b06      	ldr	r3, [pc, #24]	; (4057a8 <zbar_scanner_new_scan+0x8c>)
  40578e:	4798      	blx	r3
    scn->y1_thresh = scn->y1_min_thresh;
  405790:	6863      	ldr	r3, [r4, #4]
  405792:	6223      	str	r3, [r4, #32]
    if(scn->decoder)
  405794:	6820      	ldr	r0, [r4, #0]
  405796:	b108      	cbz	r0, 40579c <zbar_scanner_new_scan+0x80>
        zbar_decoder_new_scan(scn->decoder);
  405798:	4b04      	ldr	r3, [pc, #16]	; (4057ac <zbar_scanner_new_scan+0x90>)
  40579a:	4798      	blx	r3
    return(edge);
}
  40579c:	4648      	mov	r0, r9
  40579e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  4057a2:	bf00      	nop
  4057a4:	00402e21 	.word	0x00402e21
  4057a8:	00407669 	.word	0x00407669
  4057ac:	00402d81 	.word	0x00402d81

004057b0 <zbar_scan_y>:

zbar_symbol_type_t zbar_scan_y (zbar_scanner_t *scn,
                                int y)
{
  4057b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  4057b4:	4605      	mov	r5, r0
    /* FIXME calc and clip to max y range... */
    /* retrieve short value history */
    register int x = scn->x;
  4057b6:	6886      	ldr	r6, [r0, #8]
    register int y0_1 = scn->y0[(x - 1) & 3];
  4057b8:	1e73      	subs	r3, r6, #1
  4057ba:	f003 0303 	and.w	r3, r3, #3
  4057be:	eb00 0383 	add.w	r3, r0, r3, lsl #2
  4057c2:	68da      	ldr	r2, [r3, #12]
    register int y0_0 = y0_1;
    register int y0_2, y0_3, y1_1, y2_1, y2_2;
    zbar_symbol_type_t edge;
    if(x) {
  4057c4:	b166      	cbz	r6, 4057e0 <zbar_scan_y+0x30>
        /* update weighted moving average */
        y0_0 += ((int)((y - y0_1) * EWMA_WEIGHT)) >> ZBAR_FIXED;
  4057c6:	1a89      	subs	r1, r1, r2
  4057c8:	eb01 0181 	add.w	r1, r1, r1, lsl #2
  4057cc:	eb01 0181 	add.w	r1, r1, r1, lsl #2
  4057d0:	eb02 1161 	add.w	r1, r2, r1, asr #5
        scn->y0[x & 3] = y0_0;
  4057d4:	f006 0303 	and.w	r3, r6, #3
  4057d8:	eb00 0383 	add.w	r3, r0, r3, lsl #2
  4057dc:	60d9      	str	r1, [r3, #12]
  4057de:	e004      	b.n	4057ea <zbar_scan_y+0x3a>
    }
    else
        y0_0 = y0_1 = scn->y0[0] = scn->y0[1] = scn->y0[2] = scn->y0[3] = y;
  4057e0:	6181      	str	r1, [r0, #24]
  4057e2:	6141      	str	r1, [r0, #20]
  4057e4:	6101      	str	r1, [r0, #16]
  4057e6:	60c1      	str	r1, [r0, #12]
  4057e8:	460a      	mov	r2, r1
    y0_2 = scn->y0[(x - 2) & 3];
  4057ea:	1eb3      	subs	r3, r6, #2
  4057ec:	f003 0303 	and.w	r3, r3, #3
  4057f0:	eb05 0383 	add.w	r3, r5, r3, lsl #2
  4057f4:	68dc      	ldr	r4, [r3, #12]
    y0_3 = scn->y0[(x - 3) & 3];
  4057f6:	1ef3      	subs	r3, r6, #3
  4057f8:	f003 0303 	and.w	r3, r3, #3
  4057fc:	eb05 0383 	add.w	r3, r5, r3, lsl #2
  405800:	68d8      	ldr	r0, [r3, #12]
    /* 1st differential @ x-1 */
    y1_1 = y0_1 - y0_2;
  405802:	1b13      	subs	r3, r2, r4
    {
        register int y1_2 = y0_2 - y0_3;
  405804:	1a27      	subs	r7, r4, r0
        if((abs(y1_1) < abs(y1_2)) &&
  405806:	ea83 7ce3 	eor.w	ip, r3, r3, asr #31
  40580a:	ebac 7ce3 	sub.w	ip, ip, r3, asr #31
  40580e:	ea87 7ee7 	eor.w	lr, r7, r7, asr #31
  405812:	ebae 7ee7 	sub.w	lr, lr, r7, asr #31
  405816:	45f4      	cmp	ip, lr
  405818:	da09      	bge.n	40582e <zbar_scan_y+0x7e>
  40581a:	ea4f 7ed3 	mov.w	lr, r3, lsr #31
  40581e:	ea6f 0c07 	mvn.w	ip, r7
  405822:	ea4f 7cdc 	mov.w	ip, ip, lsr #31
    else
        y0_0 = y0_1 = scn->y0[0] = scn->y0[1] = scn->y0[2] = scn->y0[3] = y;
    y0_2 = scn->y0[(x - 2) & 3];
    y0_3 = scn->y0[(x - 3) & 3];
    /* 1st differential @ x-1 */
    y1_1 = y0_1 - y0_2;
  405826:	45e6      	cmp	lr, ip
  405828:	bf08      	it	eq
  40582a:	461f      	moveq	r7, r3
  40582c:	e000      	b.n	405830 <zbar_scan_y+0x80>
  40582e:	461f      	mov	r7, r3
           ((y1_1 >= 0) == (y1_2 >= 0)))
            y1_1 = y1_2;
    }

    /* 2nd differentials @ x-1 & x-2 */
    y2_1 = y0_0 - (y0_1 * 2) + y0_2;
  405830:	eba1 0142 	sub.w	r1, r1, r2, lsl #1
    y2_2 = y0_1 - (y0_2 * 2) + y0_3;
  405834:	1b1b      	subs	r3, r3, r4
  405836:	eb03 0900 	add.w	r9, r3, r0
    dbprintf(1, "scan: x=%d y=%d y0=%d y1=%d y2=%d",
             x, y, y0_1, y1_1, y2_1);

    edge = ZBAR_NONE;
    /* 2nd zero-crossing is 1st local min/max - could be edge */
    if((!y2_1 ||
  40583a:	190c      	adds	r4, r1, r4
  40583c:	d009      	beq.n	405852 <zbar_scan_y+0xa2>
  40583e:	2c00      	cmp	r4, #0
  405840:	dd04      	ble.n	40584c <zbar_scan_y+0x9c>
  405842:	f1b9 0f00 	cmp.w	r9, #0
  405846:	db04      	blt.n	405852 <zbar_scan_y+0xa2>
    y2_2 = y0_1 - (y0_2 * 2) + y0_3;

    dbprintf(1, "scan: x=%d y=%d y0=%d y1=%d y2=%d",
             x, y, y0_1, y1_1, y2_1);

    edge = ZBAR_NONE;
  405848:	2000      	movs	r0, #0
  40584a:	e070      	b.n	40592e <zbar_scan_y+0x17e>
    /* 2nd zero-crossing is 1st local min/max - could be edge */
    if((!y2_1 ||
  40584c:	f1b9 0f00 	cmp.w	r9, #0
  405850:	dd5f      	ble.n	405912 <zbar_scan_y+0x162>
}

static inline unsigned calc_thresh (zbar_scanner_t *scn)
{
    /* threshold 1st to improve noise rejection */
    unsigned dx, thresh = scn->y1_thresh;
  405852:	6a28      	ldr	r0, [r5, #32]
    unsigned long t;
    if((thresh <= scn->y1_min_thresh) || !scn->width) {
  405854:	6869      	ldr	r1, [r5, #4]
  405856:	4288      	cmp	r0, r1
  405858:	d915      	bls.n	405886 <zbar_scan_y+0xd6>
  40585a:	f8d5 e02c 	ldr.w	lr, [r5, #44]	; 0x2c
  40585e:	f1be 0f00 	cmp.w	lr, #0
  405862:	d010      	beq.n	405886 <zbar_scan_y+0xd6>
        dbprintf(1, " tmin=%d", scn->y1_min_thresh);
        return(scn->y1_min_thresh);
    }
    /* slowly return threshold to min */
    dx = (scn->x << ZBAR_FIXED) - scn->last_edge;
  405864:	6aab      	ldr	r3, [r5, #40]	; 0x28
  405866:	68aa      	ldr	r2, [r5, #8]
  405868:	ebc3 1242 	rsb	r2, r3, r2, lsl #5
    t = thresh * dx;
  40586c:	fb00 f202 	mul.w	r2, r0, r2
    t /= scn->width;
  405870:	fbb2 f3fe 	udiv	r3, r2, lr
    t /= ZBAR_SCANNER_THRESH_FADE;
  405874:	08db      	lsrs	r3, r3, #3
    dbprintf(1, " thr=%d t=%ld x=%d last=%d.%d (%d)",
             thresh, t, scn->x, scn->last_edge >> ZBAR_FIXED,
             scn->last_edge & ((1 << ZBAR_FIXED) - 1), dx);
    if(thresh > t) {
  405876:	4298      	cmp	r0, r3
  405878:	d902      	bls.n	405880 <zbar_scan_y+0xd0>
        thresh -= t;
  40587a:	1ac3      	subs	r3, r0, r3
        if(thresh > scn->y1_min_thresh)
  40587c:	4299      	cmp	r1, r3
  40587e:	d301      	bcc.n	405884 <zbar_scan_y+0xd4>
            return(thresh);
    }
    scn->y1_thresh = scn->y1_min_thresh;
  405880:	6229      	str	r1, [r5, #32]
  405882:	e000      	b.n	405886 <zbar_scan_y+0xd6>
             thresh, t, scn->x, scn->last_edge >> ZBAR_FIXED,
             scn->last_edge & ((1 << ZBAR_FIXED) - 1), dx);
    if(thresh > t) {
        thresh -= t;
        if(thresh > scn->y1_min_thresh)
            return(thresh);
  405884:	4619      	mov	r1, r3

    edge = ZBAR_NONE;
    /* 2nd zero-crossing is 1st local min/max - could be edge */
    if((!y2_1 ||
        ((y2_1 > 0) ? y2_2 < 0 : y2_2 > 0)) &&
       (calc_thresh(scn) <= abs(y1_1)))
  405886:	ea87 78e7 	eor.w	r8, r7, r7, asr #31
  40588a:	eba8 78e7 	sub.w	r8, r8, r7, asr #31
             x, y, y0_1, y1_1, y2_1);

    edge = ZBAR_NONE;
    /* 2nd zero-crossing is 1st local min/max - could be edge */
    if((!y2_1 ||
        ((y2_1 > 0) ? y2_2 < 0 : y2_2 > 0)) &&
  40588e:	4588      	cmp	r8, r1
  405890:	d341      	bcc.n	405916 <zbar_scan_y+0x166>
       (calc_thresh(scn) <= abs(y1_1)))
    {
        /* check for 1st sign change */
        char y1_rev = (scn->y1_sign > 0) ? y1_1 < 0 : y1_1 > 0;
  405892:	69e9      	ldr	r1, [r5, #28]
  405894:	2900      	cmp	r1, #0
  405896:	dd01      	ble.n	40589c <zbar_scan_y+0xec>
  405898:	0ffa      	lsrs	r2, r7, #31
  40589a:	e003      	b.n	4058a4 <zbar_scan_y+0xf4>
  40589c:	2f00      	cmp	r7, #0
  40589e:	bfd4      	ite	le
  4058a0:	2200      	movle	r2, #0
  4058a2:	2201      	movgt	r2, #1
        if(y1_rev)
  4058a4:	2a00      	cmp	r2, #0
  4058a6:	d038      	beq.n	40591a <zbar_scan_y+0x16a>
}

static inline zbar_symbol_type_t process_edge (zbar_scanner_t *scn,
                                               int y1)
{
    if(!scn->y1_sign)
  4058a8:	b919      	cbnz	r1, 4058b2 <zbar_scan_y+0x102>
        scn->last_edge = scn->cur_edge = (1 << ZBAR_FIXED) + ROUND;
  4058aa:	2330      	movs	r3, #48	; 0x30
  4058ac:	626b      	str	r3, [r5, #36]	; 0x24
  4058ae:	62ab      	str	r3, [r5, #40]	; 0x28
  4058b0:	e003      	b.n	4058ba <zbar_scan_y+0x10a>
    else if(!scn->last_edge)
  4058b2:	6aab      	ldr	r3, [r5, #40]	; 0x28
  4058b4:	b90b      	cbnz	r3, 4058ba <zbar_scan_y+0x10a>
        scn->last_edge = scn->cur_edge;
  4058b6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
  4058b8:	62ab      	str	r3, [r5, #40]	; 0x28

    scn->width = scn->cur_edge - scn->last_edge;
  4058ba:	6a6b      	ldr	r3, [r5, #36]	; 0x24
  4058bc:	6aa9      	ldr	r1, [r5, #40]	; 0x28
  4058be:	1a59      	subs	r1, r3, r1
  4058c0:	62e9      	str	r1, [r5, #44]	; 0x2c
    dbprintf(1, " sgn=%d cur=%d.%d w=%d (%s)\n",
             scn->y1_sign, scn->cur_edge >> ZBAR_FIXED,
             scn->cur_edge & ((1 << ZBAR_FIXED) - 1), scn->width,
             ((y1 > 0) ? "SPACE" : "BAR"));
    scn->last_edge = scn->cur_edge;
  4058c2:	62ab      	str	r3, [r5, #40]	; 0x28
#if DEBUG_SVG > 1
    svg_path_moveto(SVG_ABS, scn->last_edge - (1 << ZBAR_FIXED) - ROUND, 0);
#endif

    /* pass to decoder */
    if(scn->decoder)
  4058c4:	6828      	ldr	r0, [r5, #0]
  4058c6:	b380      	cbz	r0, 40592a <zbar_scan_y+0x17a>
        return(zbar_decode_width(scn->decoder, scn->width));
  4058c8:	4b1b      	ldr	r3, [pc, #108]	; (405938 <zbar_scan_y+0x188>)
  4058ca:	4798      	blx	r3
  4058cc:	e000      	b.n	4058d0 <zbar_scan_y+0x120>
    y2_2 = y0_1 - (y0_2 * 2) + y0_3;

    dbprintf(1, "scan: x=%d y=%d y0=%d y1=%d y2=%d",
             x, y, y0_1, y1_1, y2_1);

    edge = ZBAR_NONE;
  4058ce:	2000      	movs	r0, #0
            /* intensity change reversal - finalize previous edge */
            edge = process_edge(scn, y1_1);

        if(y1_rev || (abs(scn->y1_sign) < abs(y1_1))) {
            int d;
            scn->y1_sign = y1_1;
  4058d0:	61ef      	str	r7, [r5, #28]

            /* adaptive thresholding */
            /* start at multiple of new min/max */
            scn->y1_thresh = (abs(y1_1) * THRESH_INIT + ROUND) >> ZBAR_FIXED;
  4058d2:	ebc8 03c8 	rsb	r3, r8, r8, lsl #3
  4058d6:	005b      	lsls	r3, r3, #1
  4058d8:	3310      	adds	r3, #16
  4058da:	095b      	lsrs	r3, r3, #5
  4058dc:	622b      	str	r3, [r5, #32]
            dbprintf(1, "\tthr=%d", scn->y1_thresh);
            if(scn->y1_thresh < scn->y1_min_thresh)
  4058de:	686a      	ldr	r2, [r5, #4]
  4058e0:	4293      	cmp	r3, r2
                scn->y1_thresh = scn->y1_min_thresh;
  4058e2:	bf38      	it	cc
  4058e4:	622a      	strcc	r2, [r5, #32]

            /* update current edge */
            d = y2_1 - y2_2;
            scn->cur_edge = 1 << ZBAR_FIXED;
            if(!d)
  4058e6:	ebb4 0309 	subs.w	r3, r4, r9
  4058ea:	d102      	bne.n	4058f2 <zbar_scan_y+0x142>
                scn->cur_edge >>= 1;
  4058ec:	2310      	movs	r3, #16
  4058ee:	626b      	str	r3, [r5, #36]	; 0x24
  4058f0:	e00a      	b.n	405908 <zbar_scan_y+0x158>
            else if(y2_1)
  4058f2:	b914      	cbnz	r4, 4058fa <zbar_scan_y+0x14a>
            if(scn->y1_thresh < scn->y1_min_thresh)
                scn->y1_thresh = scn->y1_min_thresh;

            /* update current edge */
            d = y2_1 - y2_2;
            scn->cur_edge = 1 << ZBAR_FIXED;
  4058f4:	2320      	movs	r3, #32
  4058f6:	626b      	str	r3, [r5, #36]	; 0x24
  4058f8:	e006      	b.n	405908 <zbar_scan_y+0x158>
            if(!d)
                scn->cur_edge >>= 1;
            else if(y2_1)
                /* interpolate zero crossing */
                scn->cur_edge -= ((y2_1 << ZBAR_FIXED) + 1) / d;
  4058fa:	0161      	lsls	r1, r4, #5
  4058fc:	3101      	adds	r1, #1
  4058fe:	fb91 f3f3 	sdiv	r3, r1, r3
  405902:	f1c3 0320 	rsb	r3, r3, #32
  405906:	626b      	str	r3, [r5, #36]	; 0x24
            scn->cur_edge += x << ZBAR_FIXED;
  405908:	6a6b      	ldr	r3, [r5, #36]	; 0x24
  40590a:	eb03 1346 	add.w	r3, r3, r6, lsl #5
  40590e:	626b      	str	r3, [r5, #36]	; 0x24
            dbprintf(1, "\n");
  405910:	e00d      	b.n	40592e <zbar_scan_y+0x17e>
    y2_2 = y0_1 - (y0_2 * 2) + y0_3;

    dbprintf(1, "scan: x=%d y=%d y0=%d y1=%d y2=%d",
             x, y, y0_1, y1_1, y2_1);

    edge = ZBAR_NONE;
  405912:	2000      	movs	r0, #0
  405914:	e00b      	b.n	40592e <zbar_scan_y+0x17e>
  405916:	2000      	movs	r0, #0
  405918:	e009      	b.n	40592e <zbar_scan_y+0x17e>
        char y1_rev = (scn->y1_sign > 0) ? y1_1 < 0 : y1_1 > 0;
        if(y1_rev)
            /* intensity change reversal - finalize previous edge */
            edge = process_edge(scn, y1_1);

        if(y1_rev || (abs(scn->y1_sign) < abs(y1_1))) {
  40591a:	ea81 73e1 	eor.w	r3, r1, r1, asr #31
  40591e:	eba3 73e1 	sub.w	r3, r3, r1, asr #31
  405922:	4598      	cmp	r8, r3
  405924:	dcd3      	bgt.n	4058ce <zbar_scan_y+0x11e>
    y2_2 = y0_1 - (y0_2 * 2) + y0_3;

    dbprintf(1, "scan: x=%d y=%d y0=%d y1=%d y2=%d",
             x, y, y0_1, y1_1, y2_1);

    edge = ZBAR_NONE;
  405926:	2000      	movs	r0, #0
  405928:	e001      	b.n	40592e <zbar_scan_y+0x17e>
#endif

    /* pass to decoder */
    if(scn->decoder)
        return(zbar_decode_width(scn->decoder, scn->width));
    return(ZBAR_PARTIAL);
  40592a:	2001      	movs	r0, #1
  40592c:	e7d0      	b.n	4058d0 <zbar_scan_y+0x120>
    }
    else
        dbprintf(1, "\n");
    /* FIXME add fall-thru pass to decoder after heuristic "idle" period
       (eg, 6-8 * last width) */
    scn->x = x + 1;
  40592e:	3601      	adds	r6, #1
  405930:	60ae      	str	r6, [r5, #8]
    return(edge);
}
  405932:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  405936:	bf00      	nop
  405938:	00402e21 	.word	0x00402e21

0040593c <zbar_get_symbol_name>:

//#include <FreeRTOS.h>

const char *zbar_get_symbol_name (zbar_symbol_type_t sym)
{
    switch(sym & ZBAR_SYMBOL) {
  40593c:	b2c0      	uxtb	r0, r0
  40593e:	3802      	subs	r0, #2
  405940:	287e      	cmp	r0, #126	; 0x7e
  405942:	d863      	bhi.n	405a0c <zbar_get_symbol_name+0xd0>
  405944:	e8df f000 	tbb	[pc, r0]
  405948:	40626264 	.word	0x40626264
  40594c:	44426262 	.word	0x44426262
  405950:	4a486246 	.word	0x4a486246
  405954:	62624e4c 	.word	0x62624e4c
  405958:	62626262 	.word	0x62626262
  40595c:	50626262 	.word	0x50626262
  405960:	62626262 	.word	0x62626262
  405964:	62626262 	.word	0x62626262
  405968:	62625452 	.word	0x62625452
  40596c:	62625856 	.word	0x62625856
  405970:	62626262 	.word	0x62626262
  405974:	62626262 	.word	0x62626262
  405978:	62626262 	.word	0x62626262
  40597c:	5e626262 	.word	0x5e626262
  405980:	62626262 	.word	0x62626262
  405984:	62606262 	.word	0x62606262
  405988:	62626262 	.word	0x62626262
  40598c:	62626262 	.word	0x62626262
  405990:	62626262 	.word	0x62626262
  405994:	62626262 	.word	0x62626262
  405998:	62626262 	.word	0x62626262
  40599c:	62626262 	.word	0x62626262
  4059a0:	5a626262 	.word	0x5a626262
  4059a4:	62626262 	.word	0x62626262
  4059a8:	62626262 	.word	0x62626262
  4059ac:	62626262 	.word	0x62626262
  4059b0:	62626262 	.word	0x62626262
  4059b4:	62626262 	.word	0x62626262
  4059b8:	62626262 	.word	0x62626262
  4059bc:	62626262 	.word	0x62626262
  4059c0:	62626262 	.word	0x62626262
  4059c4:	6262      	.short	0x6262
  4059c6:	5c          	.byte	0x5c
  4059c7:	00          	.byte	0x00
    case ZBAR_EAN2: return("EAN-2");
    case ZBAR_EAN5: return("EAN-5");
  4059c8:	4812      	ldr	r0, [pc, #72]	; (405a14 <zbar_get_symbol_name+0xd8>)
  4059ca:	4770      	bx	lr
    case ZBAR_EAN8: return("EAN-8");
  4059cc:	4812      	ldr	r0, [pc, #72]	; (405a18 <zbar_get_symbol_name+0xdc>)
  4059ce:	4770      	bx	lr
    case ZBAR_UPCE: return("UPC-E");
  4059d0:	4812      	ldr	r0, [pc, #72]	; (405a1c <zbar_get_symbol_name+0xe0>)
  4059d2:	4770      	bx	lr
    case ZBAR_ISBN10: return("ISBN-10");
  4059d4:	4812      	ldr	r0, [pc, #72]	; (405a20 <zbar_get_symbol_name+0xe4>)
  4059d6:	4770      	bx	lr
    case ZBAR_UPCA: return("UPC-A");
  4059d8:	4812      	ldr	r0, [pc, #72]	; (405a24 <zbar_get_symbol_name+0xe8>)
  4059da:	4770      	bx	lr
    case ZBAR_EAN13: return("EAN-13");
  4059dc:	4812      	ldr	r0, [pc, #72]	; (405a28 <zbar_get_symbol_name+0xec>)
  4059de:	4770      	bx	lr
    case ZBAR_ISBN13: return("ISBN-13");
  4059e0:	4812      	ldr	r0, [pc, #72]	; (405a2c <zbar_get_symbol_name+0xf0>)
  4059e2:	4770      	bx	lr
    case ZBAR_COMPOSITE: return("COMPOSITE");
  4059e4:	4812      	ldr	r0, [pc, #72]	; (405a30 <zbar_get_symbol_name+0xf4>)
  4059e6:	4770      	bx	lr
    case ZBAR_I25: return("I2/5");
  4059e8:	4812      	ldr	r0, [pc, #72]	; (405a34 <zbar_get_symbol_name+0xf8>)
  4059ea:	4770      	bx	lr
    case ZBAR_DATABAR: return("DataBar");
  4059ec:	4812      	ldr	r0, [pc, #72]	; (405a38 <zbar_get_symbol_name+0xfc>)
  4059ee:	4770      	bx	lr
    case ZBAR_DATABAR_EXP: return("DataBar-Exp");
  4059f0:	4812      	ldr	r0, [pc, #72]	; (405a3c <zbar_get_symbol_name+0x100>)
  4059f2:	4770      	bx	lr
    case ZBAR_CODABAR: return("Codabar");
  4059f4:	4812      	ldr	r0, [pc, #72]	; (405a40 <zbar_get_symbol_name+0x104>)
  4059f6:	4770      	bx	lr
    case ZBAR_CODE39: return("CODE-39");
  4059f8:	4812      	ldr	r0, [pc, #72]	; (405a44 <zbar_get_symbol_name+0x108>)
  4059fa:	4770      	bx	lr
    case ZBAR_CODE93: return("CODE-93");
  4059fc:	4812      	ldr	r0, [pc, #72]	; (405a48 <zbar_get_symbol_name+0x10c>)
  4059fe:	4770      	bx	lr
    case ZBAR_CODE128: return("CODE-128");
  405a00:	4812      	ldr	r0, [pc, #72]	; (405a4c <zbar_get_symbol_name+0x110>)
  405a02:	4770      	bx	lr
    case ZBAR_PDF417: return("PDF417");
  405a04:	4812      	ldr	r0, [pc, #72]	; (405a50 <zbar_get_symbol_name+0x114>)
  405a06:	4770      	bx	lr
    case ZBAR_QRCODE: return("QR-Code");
  405a08:	4812      	ldr	r0, [pc, #72]	; (405a54 <zbar_get_symbol_name+0x118>)
  405a0a:	4770      	bx	lr
    default: return("UNKNOWN");
  405a0c:	4812      	ldr	r0, [pc, #72]	; (405a58 <zbar_get_symbol_name+0x11c>)
  405a0e:	4770      	bx	lr
//#include <FreeRTOS.h>

const char *zbar_get_symbol_name (zbar_symbol_type_t sym)
{
    switch(sym & ZBAR_SYMBOL) {
    case ZBAR_EAN2: return("EAN-2");
  405a10:	4812      	ldr	r0, [pc, #72]	; (405a5c <zbar_get_symbol_name+0x120>)
    case ZBAR_CODE128: return("CODE-128");
    case ZBAR_PDF417: return("PDF417");
    case ZBAR_QRCODE: return("QR-Code");
    default: return("UNKNOWN");
    }
}
  405a12:	4770      	bx	lr
  405a14:	0040fb40 	.word	0x0040fb40
  405a18:	0040fb48 	.word	0x0040fb48
  405a1c:	0040fb50 	.word	0x0040fb50
  405a20:	0040fb58 	.word	0x0040fb58
  405a24:	0040fb60 	.word	0x0040fb60
  405a28:	0040fb68 	.word	0x0040fb68
  405a2c:	0040fb70 	.word	0x0040fb70
  405a30:	0040fb78 	.word	0x0040fb78
  405a34:	0040fb84 	.word	0x0040fb84
  405a38:	0040fb8c 	.word	0x0040fb8c
  405a3c:	0040fb94 	.word	0x0040fb94
  405a40:	0040fba0 	.word	0x0040fba0
  405a44:	0040fba8 	.word	0x0040fba8
  405a48:	0040fbb0 	.word	0x0040fbb0
  405a4c:	0040fbb8 	.word	0x0040fbb8
  405a50:	0040fbc4 	.word	0x0040fbc4
  405a54:	0040fbcc 	.word	0x0040fbcc
  405a58:	0040fbd4 	.word	0x0040fbd4
  405a5c:	0040fb38 	.word	0x0040fb38

00405a60 <_zbar_get_symbol_hash>:
    default: return("UNKNOWN");
    }
}

int _zbar_get_symbol_hash (zbar_symbol_type_t sym)
{
  405a60:	b510      	push	{r4, lr}
        0x00, 0x01, 0x10, 0x11,   -1, 0x11, 0x16, 0x0c,
	0x05, 0x06, 0x08,   -1, 0x04, 0x03, 0x07, 0x12,
	  -1,   -1,   -1,   -1,   -1,   -1,   -1, 0x02,
	  -1, 0x00, 0x12, 0x0c, 0x0b, 0x1d, 0x0a, 0x00,
     };
    int g0 = hash[sym & 0x1f];
  405a62:	4a0b      	ldr	r2, [pc, #44]	; (405a90 <_zbar_get_symbol_hash+0x30>)
  405a64:	f000 031f 	and.w	r3, r0, #31
  405a68:	56d1      	ldrsb	r1, [r2, r3]
    int g1 = hash[~(sym >> 4) & 0x1f];
  405a6a:	ea6f 1010 	mvn.w	r0, r0, lsr #4
  405a6e:	f000 001f 	and.w	r0, r0, #31
  405a72:	5613      	ldrsb	r3, [r2, r0]
    assert(g0 >= 0 && g1 >= 0);
  405a74:	2900      	cmp	r1, #0
  405a76:	db01      	blt.n	405a7c <_zbar_get_symbol_hash+0x1c>
  405a78:	2b00      	cmp	r3, #0
  405a7a:	da05      	bge.n	405a88 <_zbar_get_symbol_hash+0x28>
  405a7c:	4805      	ldr	r0, [pc, #20]	; (405a94 <_zbar_get_symbol_hash+0x34>)
  405a7e:	216f      	movs	r1, #111	; 0x6f
  405a80:	4a05      	ldr	r2, [pc, #20]	; (405a98 <_zbar_get_symbol_hash+0x38>)
  405a82:	4b06      	ldr	r3, [pc, #24]	; (405a9c <_zbar_get_symbol_hash+0x3c>)
  405a84:	4c06      	ldr	r4, [pc, #24]	; (405aa0 <_zbar_get_symbol_hash+0x40>)
  405a86:	47a0      	blx	r4
    if(g0 < 0 || g1 < 0)
        return(0);
    return((g0 + g1) & 0x1f);
  405a88:	18c8      	adds	r0, r1, r3
}
  405a8a:	f000 001f 	and.w	r0, r0, #31
  405a8e:	bd10      	pop	{r4, pc}
  405a90:	0040fb18 	.word	0x0040fb18
  405a94:	0040fc68 	.word	0x0040fc68
  405a98:	0040fd64 	.word	0x0040fd64
  405a9c:	0040fc8c 	.word	0x0040fc8c
  405aa0:	004062e9 	.word	0x004062e9

00405aa4 <zbar_symbol_get_type>:
}

zbar_symbol_type_t zbar_symbol_get_type (const zbar_symbol_t *sym)
{
    return(sym->type);
}
  405aa4:	8800      	ldrh	r0, [r0, #0]
  405aa6:	4770      	bx	lr

00405aa8 <zbar_symbol_get_data>:
}

const char *zbar_symbol_get_data (const zbar_symbol_t *sym)
{
    return(sym->data);
}
  405aa8:	6940      	ldr	r0, [r0, #20]
  405aaa:	4770      	bx	lr

00405aac <zbar_symbol_next>:
    return(sym->orient);
}

const zbar_symbol_t *zbar_symbol_next (const zbar_symbol_t *sym)
{
    return((sym) ? sym->next : NULL);
  405aac:	b108      	cbz	r0, 405ab2 <zbar_symbol_next+0x6>
  405aae:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
  405ab0:	4770      	bx	lr
  405ab2:	2000      	movs	r0, #0
}
  405ab4:	4770      	bx	lr
  405ab6:	bf00      	nop

00405ab8 <_zbar_symbol_set_create>:
    return(*buf);
}


zbar_symbol_set_t *_zbar_symbol_set_create ()
{
  405ab8:	b510      	push	{r4, lr}
    zbar_symbol_set_t *syms = calloc(1, sizeof(*syms));
  405aba:	2001      	movs	r0, #1
  405abc:	2110      	movs	r1, #16
  405abe:	4b07      	ldr	r3, [pc, #28]	; (405adc <_zbar_symbol_set_create+0x24>)
  405ac0:	4798      	blx	r3
typedef int refcnt_t;

static inline int _zbar_refcnt (refcnt_t *cnt,
                                int delta)
{
    int rc = (*cnt += delta);
  405ac2:	6803      	ldr	r3, [r0, #0]
  405ac4:	3301      	adds	r3, #1
  405ac6:	6003      	str	r3, [r0, #0]
    assert(rc >= 0);
  405ac8:	2b00      	cmp	r3, #0
  405aca:	da05      	bge.n	405ad8 <_zbar_symbol_set_create+0x20>
  405acc:	4804      	ldr	r0, [pc, #16]	; (405ae0 <_zbar_symbol_set_create+0x28>)
  405ace:	2157      	movs	r1, #87	; 0x57
  405ad0:	4a04      	ldr	r2, [pc, #16]	; (405ae4 <_zbar_symbol_set_create+0x2c>)
  405ad2:	4b05      	ldr	r3, [pc, #20]	; (405ae8 <_zbar_symbol_set_create+0x30>)
  405ad4:	4c05      	ldr	r4, [pc, #20]	; (405aec <_zbar_symbol_set_create+0x34>)
  405ad6:	47a0      	blx	r4
    _zbar_refcnt(&syms->refcnt, 1);
    return(syms);
}
  405ad8:	bd10      	pop	{r4, pc}
  405ada:	bf00      	nop
  405adc:	00406325 	.word	0x00406325
  405ae0:	0040f710 	.word	0x0040f710
  405ae4:	0040fb08 	.word	0x0040fb08
  405ae8:	0040f73c 	.word	0x0040f73c
  405aec:	004062e9 	.word	0x004062e9

00405af0 <zbar_symbol_set_ref>:
    free(syms);
}

void zbar_symbol_set_ref (const zbar_symbol_set_t *syms,
                          int delta)
{
  405af0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  405af2:	4605      	mov	r5, r0
typedef int refcnt_t;

static inline int _zbar_refcnt (refcnt_t *cnt,
                                int delta)
{
    int rc = (*cnt += delta);
  405af4:	6803      	ldr	r3, [r0, #0]
  405af6:	440b      	add	r3, r1
  405af8:	6003      	str	r3, [r0, #0]
    assert(rc >= 0);
  405afa:	2b00      	cmp	r3, #0
  405afc:	da05      	bge.n	405b0a <zbar_symbol_set_ref+0x1a>
  405afe:	4816      	ldr	r0, [pc, #88]	; (405b58 <zbar_symbol_set_ref+0x68>)
  405b00:	2157      	movs	r1, #87	; 0x57
  405b02:	4a16      	ldr	r2, [pc, #88]	; (405b5c <zbar_symbol_set_ref+0x6c>)
  405b04:	4b16      	ldr	r3, [pc, #88]	; (405b60 <zbar_symbol_set_ref+0x70>)
  405b06:	4c17      	ldr	r4, [pc, #92]	; (405b64 <zbar_symbol_set_ref+0x74>)
  405b08:	47a0      	blx	r4
    zbar_symbol_set_t *ncsyms = (zbar_symbol_set_t*)syms;
    if(!_zbar_refcnt(&ncsyms->refcnt, delta) && delta <= 0)
  405b0a:	bb1b      	cbnz	r3, 405b54 <zbar_symbol_set_ref+0x64>
  405b0c:	2900      	cmp	r1, #0
  405b0e:	dc21      	bgt.n	405b54 <zbar_symbol_set_ref+0x64>
}

inline void _zbar_symbol_set_free (zbar_symbol_set_t *syms)
{
    zbar_symbol_t *sym, *next;
    for(sym = syms->head; sym; sym = next) {
  405b10:	6880      	ldr	r0, [r0, #8]
  405b12:	b1e0      	cbz	r0, 405b4e <zbar_symbol_set_ref+0x5e>
        next = sym->next;
  405b14:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
        sym->next = NULL;
  405b16:	62c3      	str	r3, [r0, #44]	; 0x2c
typedef int refcnt_t;

static inline int _zbar_refcnt (refcnt_t *cnt,
                                int delta)
{
    int rc = (*cnt += delta);
  405b18:	6a83      	ldr	r3, [r0, #40]	; 0x28
  405b1a:	3b01      	subs	r3, #1
  405b1c:	6283      	str	r3, [r0, #40]	; 0x28
    assert(rc >= 0);
  405b1e:	2b00      	cmp	r3, #0
  405b20:	db0a      	blt.n	405b38 <zbar_symbol_set_ref+0x48>

static inline void _zbar_symbol_refcnt (zbar_symbol_t *sym,
                                        int delta)
{
    if(!_zbar_refcnt(&sym->refcnt, delta) && delta <= 0)
        _zbar_symbol_free(sym);
  405b22:	4f11      	ldr	r7, [pc, #68]	; (405b68 <zbar_symbol_set_ref+0x78>)
  405b24:	2600      	movs	r6, #0
  405b26:	e00e      	b.n	405b46 <zbar_symbol_set_ref+0x56>

inline void _zbar_symbol_set_free (zbar_symbol_set_t *syms)
{
    zbar_symbol_t *sym, *next;
    for(sym = syms->head; sym; sym = next) {
        next = sym->next;
  405b28:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
        sym->next = NULL;
  405b2a:	62e6      	str	r6, [r4, #44]	; 0x2c
typedef int refcnt_t;

static inline int _zbar_refcnt (refcnt_t *cnt,
                                int delta)
{
    int rc = (*cnt += delta);
  405b2c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  405b2e:	3b01      	subs	r3, #1
  405b30:	62a3      	str	r3, [r4, #40]	; 0x28
  405b32:	4620      	mov	r0, r4
    assert(rc >= 0);
  405b34:	2b00      	cmp	r3, #0
  405b36:	da05      	bge.n	405b44 <zbar_symbol_set_ref+0x54>
  405b38:	4807      	ldr	r0, [pc, #28]	; (405b58 <zbar_symbol_set_ref+0x68>)
  405b3a:	2157      	movs	r1, #87	; 0x57
  405b3c:	4a07      	ldr	r2, [pc, #28]	; (405b5c <zbar_symbol_set_ref+0x6c>)
  405b3e:	4b08      	ldr	r3, [pc, #32]	; (405b60 <zbar_symbol_set_ref+0x70>)
  405b40:	4c08      	ldr	r4, [pc, #32]	; (405b64 <zbar_symbol_set_ref+0x74>)
  405b42:	47a0      	blx	r4

inline void _zbar_symbol_set_free (zbar_symbol_set_t *syms)
{
    zbar_symbol_t *sym, *next;
    for(sym = syms->head; sym; sym = next) {
        next = sym->next;
  405b44:	4614      	mov	r4, r2
}

static inline void _zbar_symbol_refcnt (zbar_symbol_t *sym,
                                        int delta)
{
    if(!_zbar_refcnt(&sym->refcnt, delta) && delta <= 0)
  405b46:	b903      	cbnz	r3, 405b4a <zbar_symbol_set_ref+0x5a>
        _zbar_symbol_free(sym);
  405b48:	47b8      	blx	r7
}

inline void _zbar_symbol_set_free (zbar_symbol_set_t *syms)
{
    zbar_symbol_t *sym, *next;
    for(sym = syms->head; sym; sym = next) {
  405b4a:	2c00      	cmp	r4, #0
  405b4c:	d1ec      	bne.n	405b28 <zbar_symbol_set_ref+0x38>
        next = sym->next;
        sym->next = NULL;
        _zbar_symbol_refcnt(sym, -1);
    }
    syms->head = NULL;
    free(syms);
  405b4e:	4628      	mov	r0, r5
  405b50:	4b06      	ldr	r3, [pc, #24]	; (405b6c <zbar_symbol_set_ref+0x7c>)
  405b52:	4798      	blx	r3
  405b54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  405b56:	bf00      	nop
  405b58:	0040f710 	.word	0x0040f710
  405b5c:	0040fb08 	.word	0x0040fb08
  405b60:	0040f73c 	.word	0x0040f73c
  405b64:	004062e9 	.word	0x004062e9
  405b68:	00405b71 	.word	0x00405b71
  405b6c:	00406e41 	.word	0x00406e41

00405b70 <_zbar_symbol_free>:
        return(0);
    return((g0 + g1) & 0x1f);
}

void _zbar_symbol_free (zbar_symbol_t *sym)
{
  405b70:	b510      	push	{r4, lr}
  405b72:	4604      	mov	r4, r0
    if(sym->syms) {
  405b74:	6b00      	ldr	r0, [r0, #48]	; 0x30
  405b76:	b128      	cbz	r0, 405b84 <_zbar_symbol_free+0x14>
        zbar_symbol_set_ref(sym->syms, -1);
  405b78:	f04f 31ff 	mov.w	r1, #4294967295
  405b7c:	4b08      	ldr	r3, [pc, #32]	; (405ba0 <_zbar_symbol_free+0x30>)
  405b7e:	4798      	blx	r3
        sym->syms = NULL;
  405b80:	2300      	movs	r3, #0
  405b82:	6323      	str	r3, [r4, #48]	; 0x30
    }
    if(sym->pts)
  405b84:	6a20      	ldr	r0, [r4, #32]
  405b86:	b108      	cbz	r0, 405b8c <_zbar_symbol_free+0x1c>
        free(sym->pts);
  405b88:	4b06      	ldr	r3, [pc, #24]	; (405ba4 <_zbar_symbol_free+0x34>)
  405b8a:	4798      	blx	r3
    if(sym->data_alloc && sym->data)
  405b8c:	68e3      	ldr	r3, [r4, #12]
  405b8e:	b11b      	cbz	r3, 405b98 <_zbar_symbol_free+0x28>
  405b90:	6960      	ldr	r0, [r4, #20]
  405b92:	b108      	cbz	r0, 405b98 <_zbar_symbol_free+0x28>
        free(sym->data);
  405b94:	4b03      	ldr	r3, [pc, #12]	; (405ba4 <_zbar_symbol_free+0x34>)
  405b96:	4798      	blx	r3
    free(sym);
  405b98:	4620      	mov	r0, r4
  405b9a:	4b02      	ldr	r3, [pc, #8]	; (405ba4 <_zbar_symbol_free+0x34>)
  405b9c:	4798      	blx	r3
  405b9e:	bd10      	pop	{r4, pc}
  405ba0:	00405af1 	.word	0x00405af1
  405ba4:	00406e41 	.word	0x00406e41

00405ba8 <_zbar_symbol_set_free>:
    _zbar_refcnt(&syms->refcnt, 1);
    return(syms);
}

inline void _zbar_symbol_set_free (zbar_symbol_set_t *syms)
{
  405ba8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  405baa:	4606      	mov	r6, r0
    zbar_symbol_t *sym, *next;
    for(sym = syms->head; sym; sym = next) {
  405bac:	6880      	ldr	r0, [r0, #8]
  405bae:	b1e8      	cbz	r0, 405bec <_zbar_symbol_set_free+0x44>
        next = sym->next;
  405bb0:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
        sym->next = NULL;
  405bb2:	2300      	movs	r3, #0
  405bb4:	62c3      	str	r3, [r0, #44]	; 0x2c
typedef int refcnt_t;

static inline int _zbar_refcnt (refcnt_t *cnt,
                                int delta)
{
    int rc = (*cnt += delta);
  405bb6:	6a83      	ldr	r3, [r0, #40]	; 0x28
  405bb8:	3b01      	subs	r3, #1
  405bba:	6283      	str	r3, [r0, #40]	; 0x28
    assert(rc >= 0);
  405bbc:	2b00      	cmp	r3, #0
  405bbe:	db0a      	blt.n	405bd6 <_zbar_symbol_set_free+0x2e>
  405bc0:	4f0c      	ldr	r7, [pc, #48]	; (405bf4 <_zbar_symbol_set_free+0x4c>)
  405bc2:	2500      	movs	r5, #0
  405bc4:	e00e      	b.n	405be4 <_zbar_symbol_set_free+0x3c>

inline void _zbar_symbol_set_free (zbar_symbol_set_t *syms)
{
    zbar_symbol_t *sym, *next;
    for(sym = syms->head; sym; sym = next) {
        next = sym->next;
  405bc6:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
        sym->next = NULL;
  405bc8:	62e5      	str	r5, [r4, #44]	; 0x2c
typedef int refcnt_t;

static inline int _zbar_refcnt (refcnt_t *cnt,
                                int delta)
{
    int rc = (*cnt += delta);
  405bca:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  405bcc:	3b01      	subs	r3, #1
  405bce:	62a3      	str	r3, [r4, #40]	; 0x28
  405bd0:	4620      	mov	r0, r4
    assert(rc >= 0);
  405bd2:	2b00      	cmp	r3, #0
  405bd4:	da05      	bge.n	405be2 <_zbar_symbol_set_free+0x3a>
  405bd6:	4808      	ldr	r0, [pc, #32]	; (405bf8 <_zbar_symbol_set_free+0x50>)
  405bd8:	2157      	movs	r1, #87	; 0x57
  405bda:	4a08      	ldr	r2, [pc, #32]	; (405bfc <_zbar_symbol_set_free+0x54>)
  405bdc:	4b08      	ldr	r3, [pc, #32]	; (405c00 <_zbar_symbol_set_free+0x58>)
  405bde:	4c09      	ldr	r4, [pc, #36]	; (405c04 <_zbar_symbol_set_free+0x5c>)
  405be0:	47a0      	blx	r4

inline void _zbar_symbol_set_free (zbar_symbol_set_t *syms)
{
    zbar_symbol_t *sym, *next;
    for(sym = syms->head; sym; sym = next) {
        next = sym->next;
  405be2:	4614      	mov	r4, r2
}

static inline void _zbar_symbol_refcnt (zbar_symbol_t *sym,
                                        int delta)
{
    if(!_zbar_refcnt(&sym->refcnt, delta) && delta <= 0)
  405be4:	b903      	cbnz	r3, 405be8 <_zbar_symbol_set_free+0x40>
        _zbar_symbol_free(sym);
  405be6:	47b8      	blx	r7
}

inline void _zbar_symbol_set_free (zbar_symbol_set_t *syms)
{
    zbar_symbol_t *sym, *next;
    for(sym = syms->head; sym; sym = next) {
  405be8:	2c00      	cmp	r4, #0
  405bea:	d1ec      	bne.n	405bc6 <_zbar_symbol_set_free+0x1e>
        next = sym->next;
        sym->next = NULL;
        _zbar_symbol_refcnt(sym, -1);
    }
    syms->head = NULL;
    free(syms);
  405bec:	4630      	mov	r0, r6
  405bee:	4b06      	ldr	r3, [pc, #24]	; (405c08 <_zbar_symbol_set_free+0x60>)
  405bf0:	4798      	blx	r3
  405bf2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  405bf4:	00405b71 	.word	0x00405b71
  405bf8:	0040f710 	.word	0x0040f710
  405bfc:	0040fb08 	.word	0x0040fb08
  405c00:	0040f73c 	.word	0x0040f73c
  405c04:	004062e9 	.word	0x004062e9
  405c08:	00406e41 	.word	0x00406e41

00405c0c <vsync_handler>:
static void vsync_handler(uint32_t ul_id, uint32_t ul_mask)
{
	unused(ul_id);
	unused(ul_mask);

	g_ul_vsync_flag = true;
  405c0c:	2201      	movs	r2, #1
  405c0e:	4b01      	ldr	r3, [pc, #4]	; (405c14 <vsync_handler+0x8>)
  405c10:	601a      	str	r2, [r3, #0]
  405c12:	4770      	bx	lr
  405c14:	20000d1c 	.word	0x20000d1c

00405c18 <button_handler>:
static void button_handler(uint32_t ul_id, uint32_t ul_mask)
{
	unused(ul_id);
	unused(ul_mask);

	if (g_ul_push_button_trigger){
  405c18:	4b06      	ldr	r3, [pc, #24]	; (405c34 <button_handler+0x1c>)
  405c1a:	681b      	ldr	r3, [r3, #0]
  405c1c:	b133      	cbz	r3, 405c2c <button_handler+0x14>
		g_ul_push_button_trigger = false;
  405c1e:	2200      	movs	r2, #0
  405c20:	4b04      	ldr	r3, [pc, #16]	; (405c34 <button_handler+0x1c>)
  405c22:	601a      	str	r2, [r3, #0]
		g_display_splash = true;
  405c24:	2201      	movs	r2, #1
  405c26:	4b04      	ldr	r3, [pc, #16]	; (405c38 <button_handler+0x20>)
  405c28:	601a      	str	r2, [r3, #0]
  405c2a:	4770      	bx	lr

	} else {
		g_ul_push_button_trigger = true;
  405c2c:	2201      	movs	r2, #1
  405c2e:	4b01      	ldr	r3, [pc, #4]	; (405c34 <button_handler+0x1c>)
  405c30:	601a      	str	r2, [r3, #0]
  405c32:	4770      	bx	lr
  405c34:	20000d18 	.word	0x20000d18
  405c38:	20000d20 	.word	0x20000d20

00405c3c <display_init>:

/**
 * \brief Intialize LCD display.
 */
static void display_init(void)
{
  405c3c:	b510      	push	{r4, lr}
  405c3e:	b084      	sub	sp, #16
	struct ili9325_opt_t ili9325_display_opt;

	/* Enable peripheral clock */
	pmc_enable_periph_clk( ID_SMC );
  405c40:	200a      	movs	r0, #10
  405c42:	4b17      	ldr	r3, [pc, #92]	; (405ca0 <display_init+0x64>)
  405c44:	4798      	blx	r3

	/* Configure SMC interface for LCD */
	smc_set_setup_timing(SMC, ILI9325_LCD_CS, SMC_SETUP_NWE_SETUP(2)
  405c46:	4c17      	ldr	r4, [pc, #92]	; (405ca4 <display_init+0x68>)
  405c48:	4620      	mov	r0, r4
  405c4a:	2102      	movs	r1, #2
  405c4c:	f04f 3202 	mov.w	r2, #33686018	; 0x2020202
  405c50:	4b15      	ldr	r3, [pc, #84]	; (405ca8 <display_init+0x6c>)
  405c52:	4798      	blx	r3
			| SMC_SETUP_NCS_WR_SETUP(2)
			| SMC_SETUP_NRD_SETUP(2)
			| SMC_SETUP_NCS_RD_SETUP(2));

	smc_set_pulse_timing(SMC, ILI9325_LCD_CS, SMC_PULSE_NWE_PULSE(4)
  405c54:	4620      	mov	r0, r4
  405c56:	2102      	movs	r1, #2
  405c58:	4a14      	ldr	r2, [pc, #80]	; (405cac <display_init+0x70>)
  405c5a:	4b15      	ldr	r3, [pc, #84]	; (405cb0 <display_init+0x74>)
  405c5c:	4798      	blx	r3
			| SMC_PULSE_NCS_WR_PULSE(4)
			| SMC_PULSE_NRD_PULSE(10)
			| SMC_PULSE_NCS_RD_PULSE(10));

	smc_set_cycle_timing(SMC, ILI9325_LCD_CS, SMC_CYCLE_NWE_CYCLE(10)
  405c5e:	4620      	mov	r0, r4
  405c60:	2102      	movs	r1, #2
  405c62:	4a14      	ldr	r2, [pc, #80]	; (405cb4 <display_init+0x78>)
  405c64:	4b14      	ldr	r3, [pc, #80]	; (405cb8 <display_init+0x7c>)
  405c66:	4798      	blx	r3
			| SMC_CYCLE_NRD_CYCLE(22));

	smc_set_mode(SMC, ILI9325_LCD_CS, SMC_MODE_READ_MODE
  405c68:	4620      	mov	r0, r4
  405c6a:	2102      	movs	r1, #2
  405c6c:	2203      	movs	r2, #3
  405c6e:	4b13      	ldr	r3, [pc, #76]	; (405cbc <display_init+0x80>)
  405c70:	4798      	blx	r3
			| SMC_MODE_WRITE_MODE);

	/* Initialize display parameter */
	ili9325_display_opt.ul_width = ILI9325_LCD_WIDTH;
  405c72:	23f0      	movs	r3, #240	; 0xf0
  405c74:	9300      	str	r3, [sp, #0]
	ili9325_display_opt.ul_height = ILI9325_LCD_HEIGHT;
  405c76:	f44f 73a0 	mov.w	r3, #320	; 0x140
  405c7a:	9301      	str	r3, [sp, #4]
	ili9325_display_opt.foreground_color = COLOR_BLACK;
  405c7c:	2300      	movs	r3, #0
  405c7e:	9302      	str	r3, [sp, #8]
	ili9325_display_opt.background_color = COLOR_WHITE;
  405c80:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
  405c84:	9303      	str	r3, [sp, #12]

	/* Switch off backlight */
	aat31xx_disable_backlight();
  405c86:	4b0e      	ldr	r3, [pc, #56]	; (405cc0 <display_init+0x84>)
  405c88:	4798      	blx	r3

	/* Initialize LCD */
	ili9325_init(&ili9325_display_opt);
  405c8a:	4668      	mov	r0, sp
  405c8c:	4b0d      	ldr	r3, [pc, #52]	; (405cc4 <display_init+0x88>)
  405c8e:	4798      	blx	r3

	/* Set backlight level */
	aat31xx_set_backlight(AAT31XX_MAX_BACKLIGHT_LEVEL);
  405c90:	2010      	movs	r0, #16
  405c92:	4b0d      	ldr	r3, [pc, #52]	; (405cc8 <display_init+0x8c>)
  405c94:	4798      	blx	r3

	/* Turn on LCD */
	ili9325_display_on();
  405c96:	4b0d      	ldr	r3, [pc, #52]	; (405ccc <display_init+0x90>)
  405c98:	4798      	blx	r3
}
  405c9a:	b004      	add	sp, #16
  405c9c:	bd10      	pop	{r4, pc}
  405c9e:	bf00      	nop
  405ca0:	00400f11 	.word	0x00400f11
  405ca4:	400e0000 	.word	0x400e0000
  405ca8:	00400a41 	.word	0x00400a41
  405cac:	0a0a0404 	.word	0x0a0a0404
  405cb0:	00400a49 	.word	0x00400a49
  405cb4:	0016000a 	.word	0x0016000a
  405cb8:	00400a51 	.word	0x00400a51
  405cbc:	00400a59 	.word	0x00400a59
  405cc0:	00400649 	.word	0x00400649
  405cc4:	00400759 	.word	0x00400759
  405cc8:	004005ed 	.word	0x004005ed
  405ccc:	004006d5 	.word	0x004006d5

00405cd0 <main>:
 * \brief Application entry point for image sensor capture example.
 *
 * \return Unused (ANSI-C compatibility).
 */
int main(void)
{
  405cd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  405cd4:	b087      	sub	sp, #28
	sysclk_init();
  405cd6:	4baf      	ldr	r3, [pc, #700]	; (405f94 <main+0x2c4>)
  405cd8:	4798      	blx	r3
	board_init();
  405cda:	4baf      	ldr	r3, [pc, #700]	; (405f98 <main+0x2c8>)
  405cdc:	4798      	blx	r3

	/* OV7740 send image sensor data at 24 Mhz. For best performances, PCK0
	 * which will capture OV7740 data, has to work at 24Mhz. It's easier and
	 * optimum to use one PLL for core (PLLB) and one other for PCK0 (PLLA).
	 */
	pmc_enable_pllack(7, 0x1, 1); /* PLLA work at 96 Mhz */
  405cde:	2007      	movs	r0, #7
  405ce0:	2101      	movs	r1, #1
  405ce2:	460a      	mov	r2, r1
  405ce4:	4bad      	ldr	r3, [pc, #692]	; (405f9c <main+0x2cc>)
  405ce6:	4798      	blx	r3

	/* LCD display initialization */
	display_init();
  405ce8:	4bad      	ldr	r3, [pc, #692]	; (405fa0 <main+0x2d0>)
  405cea:	4798      	blx	r3

	/* LCD display information */
	ili9325_fill(COLOR_TURQUOISE);
  405cec:	48ad      	ldr	r0, [pc, #692]	; (405fa4 <main+0x2d4>)
  405cee:	4bae      	ldr	r3, [pc, #696]	; (405fa8 <main+0x2d8>)
  405cf0:	4798      	blx	r3
	ili9325_draw_string(0, 20,
  405cf2:	2000      	movs	r0, #0
  405cf4:	2114      	movs	r1, #20
  405cf6:	4aad      	ldr	r2, [pc, #692]	; (405fac <main+0x2dc>)
  405cf8:	4cad      	ldr	r4, [pc, #692]	; (405fb0 <main+0x2e0>)
  405cfa:	47a0      	blx	r4
			(uint8_t *)"OV7740 image sensor\ncapture example");
	ili9325_draw_string(0, 80,
  405cfc:	2000      	movs	r0, #0
  405cfe:	2150      	movs	r1, #80	; 0x50
  405d00:	4aac      	ldr	r2, [pc, #688]	; (405fb4 <main+0x2e4>)
  405d02:	47a0      	blx	r4
 * \brief Configure SMC interface for SRAM.
 */
static void board_configure_sram( void )
{
	/* Enable peripheral clock */
	pmc_enable_periph_clk( ID_SMC );
  405d04:	200a      	movs	r0, #10
  405d06:	4dac      	ldr	r5, [pc, #688]	; (405fb8 <main+0x2e8>)
  405d08:	47a8      	blx	r5

	/* Configure SMC interface for SRAM */
	smc_set_setup_timing(SMC, SRAM_CS, SMC_SETUP_NWE_SETUP(2)
  405d0a:	4cac      	ldr	r4, [pc, #688]	; (405fbc <main+0x2ec>)
  405d0c:	4620      	mov	r0, r4
  405d0e:	2100      	movs	r1, #0
  405d10:	4aab      	ldr	r2, [pc, #684]	; (405fc0 <main+0x2f0>)
  405d12:	4bac      	ldr	r3, [pc, #688]	; (405fc4 <main+0x2f4>)
  405d14:	4798      	blx	r3
			| SMC_SETUP_NCS_WR_SETUP(0)
			| SMC_SETUP_NRD_SETUP(3)
			| SMC_SETUP_NCS_RD_SETUP(0));

	smc_set_pulse_timing(SMC, SRAM_CS, SMC_PULSE_NWE_PULSE(4)
  405d16:	4620      	mov	r0, r4
  405d18:	2100      	movs	r1, #0
  405d1a:	4aab      	ldr	r2, [pc, #684]	; (405fc8 <main+0x2f8>)
  405d1c:	4bab      	ldr	r3, [pc, #684]	; (405fcc <main+0x2fc>)
  405d1e:	4798      	blx	r3
			| SMC_PULSE_NCS_WR_PULSE(5)
			| SMC_PULSE_NRD_PULSE(4)
			| SMC_PULSE_NCS_RD_PULSE(6));

	smc_set_cycle_timing(SMC, SRAM_CS, SMC_CYCLE_NWE_CYCLE(6)
  405d20:	4620      	mov	r0, r4
  405d22:	2100      	movs	r1, #0
  405d24:	4aaa      	ldr	r2, [pc, #680]	; (405fd0 <main+0x300>)
  405d26:	4bab      	ldr	r3, [pc, #684]	; (405fd4 <main+0x304>)
  405d28:	4798      	blx	r3
			| SMC_CYCLE_NRD_CYCLE(7));

	smc_set_mode(SMC, SRAM_CS, SMC_MODE_READ_MODE
  405d2a:	4620      	mov	r0, r4
  405d2c:	2100      	movs	r1, #0
  405d2e:	2203      	movs	r2, #3
  405d30:	4ba9      	ldr	r3, [pc, #676]	; (405fd8 <main+0x308>)
  405d32:	4798      	blx	r3
 * \brief Configure push button and initialize button_handler interrupt.
 */
static void configure_button(void)
{
	/* Configure PIO clock. */
	pmc_enable_periph_clk(PUSH_BUTTON_ID);
  405d34:	200b      	movs	r0, #11
  405d36:	47a8      	blx	r5

	/* Adjust PIO debounce filter using a 10 Hz filter. */
	pio_set_debounce_filter(PUSH_BUTTON_PIO, PUSH_BUTTON_PIN_MSK, 10);
  405d38:	f504 6460 	add.w	r4, r4, #3584	; 0xe00
  405d3c:	4620      	mov	r0, r4
  405d3e:	2104      	movs	r1, #4
  405d40:	220a      	movs	r2, #10
  405d42:	4ba6      	ldr	r3, [pc, #664]	; (405fdc <main+0x30c>)
  405d44:	4798      	blx	r3

	/* Initialize PIO interrupt handler, see PIO definition in conf_board.h
	**/
	pio_handler_set(PUSH_BUTTON_PIO, PUSH_BUTTON_ID, PUSH_BUTTON_PIN_MSK,
  405d46:	4ba6      	ldr	r3, [pc, #664]	; (405fe0 <main+0x310>)
  405d48:	9300      	str	r3, [sp, #0]
  405d4a:	4620      	mov	r0, r4
  405d4c:	210b      	movs	r1, #11
  405d4e:	2204      	movs	r2, #4
  405d50:	2379      	movs	r3, #121	; 0x79
  405d52:	f8df 82f8 	ldr.w	r8, [pc, #760]	; 40604c <main+0x37c>
  405d56:	47c0      	blx	r8
    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
/*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  405d58:	4ea2      	ldr	r6, [pc, #648]	; (405fe4 <main+0x314>)
  405d5a:	f44f 6700 	mov.w	r7, #2048	; 0x800
  405d5e:	6037      	str	r7, [r6, #0]

	/* Enable PIO controller IRQs. */
	NVIC_EnableIRQ((IRQn_Type)PUSH_BUTTON_ID);

	/* Enable PIO interrupt lines. */
	pio_enable_interrupt(PUSH_BUTTON_PIO, PUSH_BUTTON_PIN_MSK);
  405d60:	4620      	mov	r0, r4
  405d62:	2104      	movs	r1, #4
  405d64:	4ba0      	ldr	r3, [pc, #640]	; (405fe8 <main+0x318>)
  405d66:	4798      	blx	r3
 */
static void init_vsync_interrupts(void)
{
	/* Initialize PIO interrupt handler, see PIO definition in conf_board.h
	**/
	pio_handler_set(OV7740_VSYNC_PIO, OV7740_VSYNC_ID, OV7740_VSYNC_MASK,
  405d68:	4ba0      	ldr	r3, [pc, #640]	; (405fec <main+0x31c>)
  405d6a:	9300      	str	r3, [sp, #0]
  405d6c:	4620      	mov	r0, r4
  405d6e:	210b      	movs	r1, #11
  405d70:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  405d74:	2301      	movs	r3, #1
  405d76:	47c0      	blx	r8
  405d78:	6037      	str	r7, [r6, #0]
 * \param ul_id Corresponding PIO ID.
 */
static void pio_capture_init(Pio *p_pio, uint32_t ul_id)
{
	/* Enable periphral clock */
	pmc_enable_periph_clk(ul_id);
  405d7a:	200b      	movs	r0, #11
  405d7c:	47a8      	blx	r5

	/* Disable pio capture */
	p_pio->PIO_PCMR &= ~((uint32_t)PIO_PCMR_PCEN);
  405d7e:	f8d4 3150 	ldr.w	r3, [r4, #336]	; 0x150
  405d82:	f023 0301 	bic.w	r3, r3, #1
  405d86:	f8c4 3150 	str.w	r3, [r4, #336]	; 0x150

	/* Disable rxbuff interrupt */
	p_pio->PIO_PCIDR |= PIO_PCIDR_RXBUFF;
  405d8a:	f8d4 3158 	ldr.w	r3, [r4, #344]	; 0x158
  405d8e:	f043 0308 	orr.w	r3, r3, #8
  405d92:	f8c4 3158 	str.w	r3, [r4, #344]	; 0x158

	/* 32bit width*/
	p_pio->PIO_PCMR &= ~((uint32_t)PIO_PCMR_DSIZE_Msk);
  405d96:	f8d4 3150 	ldr.w	r3, [r4, #336]	; 0x150
  405d9a:	f023 0330 	bic.w	r3, r3, #48	; 0x30
  405d9e:	f8c4 3150 	str.w	r3, [r4, #336]	; 0x150
	p_pio->PIO_PCMR |= PIO_PCMR_DSIZE_WORD;
  405da2:	f8d4 3150 	ldr.w	r3, [r4, #336]	; 0x150
  405da6:	f043 0320 	orr.w	r3, r3, #32
  405daa:	f8c4 3150 	str.w	r3, [r4, #336]	; 0x150

	/* Only HSYNC and VSYNC enabled */
	p_pio->PIO_PCMR &= ~((uint32_t)PIO_PCMR_ALWYS);
  405dae:	f8d4 3150 	ldr.w	r3, [r4, #336]	; 0x150
  405db2:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  405db6:	f8c4 3150 	str.w	r3, [r4, #336]	; 0x150
	p_pio->PIO_PCMR &= ~((uint32_t)PIO_PCMR_HALFS);
  405dba:	f8d4 3150 	ldr.w	r3, [r4, #336]	; 0x150
  405dbe:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
  405dc2:	f8c4 3150 	str.w	r3, [r4, #336]	; 0x150

	/* Init PIO capture*/
	pio_capture_init(OV_DATA_BUS_PIO, OV_DATA_BUS_ID);

	/* Turn on ov7740 image sensor using power pin */
	ov_power(true, OV_POWER_PIO, OV_POWER_MASK);
  405dc6:	2001      	movs	r0, #1
  405dc8:	4989      	ldr	r1, [pc, #548]	; (405ff0 <main+0x320>)
  405dca:	f44f 6280 	mov.w	r2, #1024	; 0x400
  405dce:	4b89      	ldr	r3, [pc, #548]	; (405ff4 <main+0x324>)
  405dd0:	4798      	blx	r3

	/* Init PCK0 to work at 24 Mhz */
	/* 96/4=24 Mhz */
	PMC->PMC_PCK[0] = (PMC_PCK_PRES_CLK_4 | PMC_PCK_CSS_PLLA_CLK);
  405dd2:	4b89      	ldr	r3, [pc, #548]	; (405ff8 <main+0x328>)
  405dd4:	2222      	movs	r2, #34	; 0x22
  405dd6:	641a      	str	r2, [r3, #64]	; 0x40
	PMC->PMC_SCER = PMC_SCER_PCK0;
  405dd8:	f44f 7280 	mov.w	r2, #256	; 0x100
  405ddc:	601a      	str	r2, [r3, #0]
	while (!(PMC->PMC_SCSR & PMC_SCSR_PCK0)) {
  405dde:	689a      	ldr	r2, [r3, #8]
  405de0:	f412 7f80 	tst.w	r2, #256	; 0x100
  405de4:	d0fb      	beq.n	405dde <main+0x10e>
	}

	/* Enable TWI peripheral */
	pmc_enable_periph_clk(ID_BOARD_TWI);
  405de6:	2013      	movs	r0, #19
  405de8:	4b73      	ldr	r3, [pc, #460]	; (405fb8 <main+0x2e8>)
  405dea:	4798      	blx	r3

	/* Init TWI peripheral */
	opt.master_clk = sysclk_get_cpu_hz();
  405dec:	4b83      	ldr	r3, [pc, #524]	; (405ffc <main+0x32c>)
  405dee:	9303      	str	r3, [sp, #12]
	opt.speed      = TWI_CLK;
  405df0:	4b83      	ldr	r3, [pc, #524]	; (406000 <main+0x330>)
  405df2:	9304      	str	r3, [sp, #16]
	twi_master_init(BOARD_TWI, &opt);
  405df4:	4883      	ldr	r0, [pc, #524]	; (406004 <main+0x334>)
  405df6:	a903      	add	r1, sp, #12
  405df8:	4b83      	ldr	r3, [pc, #524]	; (406008 <main+0x338>)
  405dfa:	4798      	blx	r3

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
  405dfc:	4b79      	ldr	r3, [pc, #484]	; (405fe4 <main+0x314>)
  405dfe:	f44f 2200 	mov.w	r2, #524288	; 0x80000
  405e02:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
  405e06:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
  405e0a:	2100      	movs	r1, #0
  405e0c:	f883 1313 	strb.w	r1, [r3, #787]	; 0x313
    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
/*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  405e10:	601a      	str	r2, [r3, #0]
	NVIC_ClearPendingIRQ(BOARD_TWI_IRQn);
	NVIC_SetPriority(BOARD_TWI_IRQn, 0);
	NVIC_EnableIRQ(BOARD_TWI_IRQn);

	/* ov7740 Initialization */
	while (ov_init(BOARD_TWI) == 1) {
  405e12:	4d7c      	ldr	r5, [pc, #496]	; (406004 <main+0x334>)
  405e14:	4c7d      	ldr	r4, [pc, #500]	; (40600c <main+0x33c>)
  405e16:	4628      	mov	r0, r5
  405e18:	47a0      	blx	r4
  405e1a:	2801      	cmp	r0, #1
  405e1c:	d0fb      	beq.n	405e16 <main+0x146>
	}

	/* ov7740 configuration */
	ov_configure(BOARD_TWI, QVGA_YUV422_20FPS);
  405e1e:	4879      	ldr	r0, [pc, #484]	; (406004 <main+0x334>)
  405e20:	2102      	movs	r1, #2
  405e22:	4b7b      	ldr	r3, [pc, #492]	; (406010 <main+0x340>)
  405e24:	4798      	blx	r3

	/* Wait 3 seconds to let the image sensor to adapt to environment */
	delay_ms(3000);
  405e26:	487b      	ldr	r0, [pc, #492]	; (406014 <main+0x344>)
  405e28:	4b7b      	ldr	r3, [pc, #492]	; (406018 <main+0x348>)
  405e2a:	4798      	blx	r3

	/* OV7740 image sensor initialization*/
	capture_init();

	/* LCD display information*/
	ili9325_fill(COLOR_TURQUOISE);
  405e2c:	485d      	ldr	r0, [pc, #372]	; (405fa4 <main+0x2d4>)
  405e2e:	4b5e      	ldr	r3, [pc, #376]	; (405fa8 <main+0x2d8>)
  405e30:	4798      	blx	r3
	ili9325_draw_string(0, 20,
  405e32:	2000      	movs	r0, #0
  405e34:	2114      	movs	r1, #20
  405e36:	4a5d      	ldr	r2, [pc, #372]	; (405fac <main+0x2dc>)
  405e38:	4c5d      	ldr	r4, [pc, #372]	; (405fb0 <main+0x2e0>)
  405e3a:	47a0      	blx	r4
			(uint8_t *)"OV7740 image sensor\ncapture example");
	ili9325_draw_string(0, 80,
  405e3c:	2000      	movs	r0, #0
  405e3e:	2150      	movs	r1, #80	; 0x50
  405e40:	4a76      	ldr	r2, [pc, #472]	; (40601c <main+0x34c>)
  405e42:	47a0      	blx	r4
		//	                             * out */
		//}
		/* Reset push button trigger flag */
		//g_ul_push_button_trigger = false;

		if (g_ul_push_button_trigger) {
  405e44:	4b76      	ldr	r3, [pc, #472]	; (406020 <main+0x350>)
  405e46:	681b      	ldr	r3, [r3, #0]
  405e48:	2b00      	cmp	r3, #0
  405e4a:	f000 8187 	beq.w	40615c <main+0x48c>
 * \brief Start picture capture.
 */
static void start_capture(void)
{
	/* Set capturing destination address*/
	g_p_uc_cap_dest_buf = (uint8_t *)CAP_DEST;
  405e4e:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
  405e52:	4a74      	ldr	r2, [pc, #464]	; (406024 <main+0x354>)
  405e54:	6013      	str	r3, [r2, #0]

	/* Set cap_rows value*/
	g_us_cap_rows = IMAGE_HEIGHT;
  405e56:	22f0      	movs	r2, #240	; 0xf0
  405e58:	4b73      	ldr	r3, [pc, #460]	; (406028 <main+0x358>)
  405e5a:	801a      	strh	r2, [r3, #0]

	/* Enable vsync interrupt*/
	pio_enable_interrupt(OV7740_VSYNC_PIO, OV7740_VSYNC_MASK);
  405e5c:	4873      	ldr	r0, [pc, #460]	; (40602c <main+0x35c>)
  405e5e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
  405e62:	4b61      	ldr	r3, [pc, #388]	; (405fe8 <main+0x318>)
  405e64:	4798      	blx	r3

	/* Capture acquisition will start on rising edge of Vsync signal.
	 * So wait g_vsync_flag = 1 before start process
	 */
	while (!g_ul_vsync_flag) {
  405e66:	4b72      	ldr	r3, [pc, #456]	; (406030 <main+0x360>)
  405e68:	681b      	ldr	r3, [r3, #0]
  405e6a:	2b00      	cmp	r3, #0
  405e6c:	d0fb      	beq.n	405e66 <main+0x196>
	}

	/* Disable vsync interrupt*/
	pio_disable_interrupt(OV7740_VSYNC_PIO, OV7740_VSYNC_MASK);
  405e6e:	486f      	ldr	r0, [pc, #444]	; (40602c <main+0x35c>)
  405e70:	f44f 4100 	mov.w	r1, #32768	; 0x8000
  405e74:	4b6f      	ldr	r3, [pc, #444]	; (406034 <main+0x364>)
  405e76:	4798      	blx	r3

	/* Enable pio capture*/
	pio_capture_enable(OV7740_DATA_BUS_PIO);
  405e78:	486c      	ldr	r0, [pc, #432]	; (40602c <main+0x35c>)
  405e7a:	4b6f      	ldr	r3, [pc, #444]	; (406038 <main+0x368>)
  405e7c:	4798      	blx	r3

	/* Capture data and send it to external SRAM memory thanks to PDC
	 * feature */
	pio_capture_to_buffer(OV7740_DATA_BUS_PIO, g_p_uc_cap_dest_buf,
  405e7e:	4b69      	ldr	r3, [pc, #420]	; (406024 <main+0x354>)
  405e80:	6819      	ldr	r1, [r3, #0]
			(g_us_cap_line * g_us_cap_rows) >> 2);
  405e82:	4b6e      	ldr	r3, [pc, #440]	; (40603c <main+0x36c>)
  405e84:	881a      	ldrh	r2, [r3, #0]
  405e86:	4b68      	ldr	r3, [pc, #416]	; (406028 <main+0x358>)
  405e88:	881b      	ldrh	r3, [r3, #0]
  405e8a:	fb03 f302 	mul.w	r3, r3, r2
  405e8e:	109b      	asrs	r3, r3, #2
 */
static uint8_t pio_capture_to_buffer(Pio *p_pio, uint8_t *uc_buf,
		uint32_t ul_size)
{
	/* Check if the first PDC bank is free */
	if ((p_pio->PIO_RCR == 0) && (p_pio->PIO_RNCR == 0)) {
  405e90:	4a66      	ldr	r2, [pc, #408]	; (40602c <main+0x35c>)
  405e92:	f8d2 216c 	ldr.w	r2, [r2, #364]	; 0x16c
  405e96:	b962      	cbnz	r2, 405eb2 <main+0x1e2>
  405e98:	4a64      	ldr	r2, [pc, #400]	; (40602c <main+0x35c>)
  405e9a:	f8d2 217c 	ldr.w	r2, [r2, #380]	; 0x17c
  405e9e:	b942      	cbnz	r2, 405eb2 <main+0x1e2>
		p_pio->PIO_RPR = (uint32_t)uc_buf;
  405ea0:	4a62      	ldr	r2, [pc, #392]	; (40602c <main+0x35c>)
  405ea2:	f8c2 1168 	str.w	r1, [r2, #360]	; 0x168
		p_pio->PIO_RCR = ul_size;
  405ea6:	f8c2 316c 	str.w	r3, [r2, #364]	; 0x16c
		p_pio->PIO_PTCR = PIO_PTCR_RXTEN;
  405eaa:	2301      	movs	r3, #1
  405eac:	f8c2 3188 	str.w	r3, [r2, #392]	; 0x188
  405eb0:	e008      	b.n	405ec4 <main+0x1f4>
		return 1;
	} else if (p_pio->PIO_RNCR == 0) {
  405eb2:	4a5e      	ldr	r2, [pc, #376]	; (40602c <main+0x35c>)
  405eb4:	f8d2 217c 	ldr.w	r2, [r2, #380]	; 0x17c
  405eb8:	b922      	cbnz	r2, 405ec4 <main+0x1f4>
		p_pio->PIO_RNPR = (uint32_t)uc_buf;
  405eba:	4a5c      	ldr	r2, [pc, #368]	; (40602c <main+0x35c>)
  405ebc:	f8c2 1178 	str.w	r1, [r2, #376]	; 0x178
		p_pio->PIO_RNCR = ul_size;
  405ec0:	f8c2 317c 	str.w	r3, [r2, #380]	; 0x17c
	 * feature */
	pio_capture_to_buffer(OV7740_DATA_BUS_PIO, g_p_uc_cap_dest_buf,
			(g_us_cap_line * g_us_cap_rows) >> 2);

	/* Wait end of capture*/
	while (!((OV7740_DATA_BUS_PIO->PIO_PCISR & PIO_PCIMR_RXBUFF) ==
  405ec4:	4b59      	ldr	r3, [pc, #356]	; (40602c <main+0x35c>)
  405ec6:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
  405eca:	f013 0f08 	tst.w	r3, #8
  405ece:	d0f9      	beq.n	405ec4 <main+0x1f4>
			PIO_PCIMR_RXBUFF)) {
	}

	/* Disable pio capture*/
	pio_capture_disable(OV7740_DATA_BUS_PIO);
  405ed0:	4856      	ldr	r0, [pc, #344]	; (40602c <main+0x35c>)
  405ed2:	4b5b      	ldr	r3, [pc, #364]	; (406040 <main+0x370>)
  405ed4:	4798      	blx	r3

	/* Reset vsync flag*/
	g_ul_vsync_flag = false;
  405ed6:	2100      	movs	r1, #0
  405ed8:	4b55      	ldr	r3, [pc, #340]	; (406030 <main+0x360>)
  405eda:	6019      	str	r1, [r3, #0]
	uint8_t *p_uc_data;
	
	volatile uint8_t *p_y_data;
	volatile uint32_t tempcursor;
	
	p_uc_data = (uint8_t *)g_p_uc_cap_dest_buf;
  405edc:	4b51      	ldr	r3, [pc, #324]	; (406024 <main+0x354>)
  405ede:	681e      	ldr	r6, [r3, #0]
  405ee0:	f04f 43c4 	mov.w	r3, #1644167168	; 0x62000000
  405ee4:	7019      	strb	r1, [r3, #0]
  405ee6:	2203      	movs	r2, #3
  405ee8:	701a      	strb	r2, [r3, #0]
	}
	static inline void LCD_WD(uint8_t lcd_data)
	{
		*((volatile uint8_t *)((BOARD_ILI9325_ADDR) | (BOARD_ILI9325_RS))) = lcd_data;
  405eea:	3302      	adds	r3, #2
  405eec:	22d0      	movs	r2, #208	; 0xd0
  405eee:	701a      	strb	r2, [r3, #0]
  405ef0:	2288      	movs	r2, #136	; 0x88
  405ef2:	701a      	strb	r2, [r3, #0]
			ILI9325_ENTRY_MODE_DFM | ILI9325_ENTRY_MODE_TRI |
			ILI9325_ENTRY_MODE_ORG) >> 8) & 0xFF);
	LCD_WD((ILI9325_ENTRY_MODE_BGR | ILI9325_ENTRY_MODE_AM |
			ILI9325_ENTRY_MODE_DFM | ILI9325_ENTRY_MODE_TRI |
			ILI9325_ENTRY_MODE_ORG) & 0xFF);
	ili9325_draw_prepare(0, 0, IMAGE_HEIGHT, IMAGE_WIDTH);
  405ef4:	4608      	mov	r0, r1
  405ef6:	22f0      	movs	r2, #240	; 0xf0
  405ef8:	f44f 73a0 	mov.w	r3, #320	; 0x140
  405efc:	4c51      	ldr	r4, [pc, #324]	; (406044 <main+0x374>)
  405efe:	47a0      	blx	r4
  405f00:	1d35      	adds	r5, r6, #4
	 * To display it on LCD,these pixel need to be converted in RGB format.
	 * The output of this conversion is two 3 bytes pixels in (B,G,R)
	 * format. First one is calculed using Y1,U,V and the other one with
	 * Y2,U,V. For that reason cap_line is twice bigger in color mode
	 * than in black and white mode. */
	for (ul_cursor = IMAGE_WIDTH * IMAGE_HEIGHT; ul_cursor != 0;
  405f02:	f44f 3796 	mov.w	r7, #76800	; 0x12c00
		l_v -= 128;
		l_u = p_uc_data[1]; /* U */
		l_u -= 128;

		l_blue = 516 * l_v + 128;
		l_green = -100 * l_v - 208 * l_u + 128;
  405f06:	f06f 0a63 	mvn.w	sl, #99	; 0x63
  405f0a:	f06f 09cf 	mvn.w	r9, #207	; 0xcf
		l_red = 409 * l_u + 128;
  405f0e:	f240 1899 	movw	r8, #409	; 0x199

		/* BLUE */
		LCD_WD( clip32_to_8((298 * l_y1 + l_blue) >> 8));
  405f12:	f44f 7c95 	mov.w	ip, #298	; 0x12a
  405f16:	4c4c      	ldr	r4, [pc, #304]	; (406048 <main+0x378>)
  405f18:	4628      	mov	r0, r5
	 * format. First one is calculed using Y1,U,V and the other one with
	 * Y2,U,V. For that reason cap_line is twice bigger in color mode
	 * than in black and white mode. */
	for (ul_cursor = IMAGE_WIDTH * IMAGE_HEIGHT; ul_cursor != 0;
			ul_cursor -= 2, p_uc_data += 4, p_y_data += 2) {
		l_y1 = p_uc_data[0]; /* Y1 */
  405f1a:	f815 1c04 	ldrb.w	r1, [r5, #-4]
		l_y1 -= 16;
		l_v = p_uc_data[3]; /* V */
  405f1e:	f815 3c01 	ldrb.w	r3, [r5, #-1]
		l_v -= 128;
  405f22:	3b80      	subs	r3, #128	; 0x80
		l_u = p_uc_data[1]; /* U */
  405f24:	f815 2c03 	ldrb.w	r2, [r5, #-3]
		l_u -= 128;
  405f28:	3a80      	subs	r2, #128	; 0x80

		l_blue = 516 * l_v + 128;
  405f2a:	eb03 1ec3 	add.w	lr, r3, r3, lsl #7
  405f2e:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
  405f32:	f10e 0e80 	add.w	lr, lr, #128	; 0x80
		l_green = -100 * l_v - 208 * l_u + 128;
  405f36:	fb09 fb02 	mul.w	fp, r9, r2
  405f3a:	fb0a b303 	mla	r3, sl, r3, fp
  405f3e:	3380      	adds	r3, #128	; 0x80
		l_red = 409 * l_u + 128;
  405f40:	fb08 f202 	mul.w	r2, r8, r2
  405f44:	f102 0b80 	add.w	fp, r2, #128	; 0x80
	 * Y2,U,V. For that reason cap_line is twice bigger in color mode
	 * than in black and white mode. */
	for (ul_cursor = IMAGE_WIDTH * IMAGE_HEIGHT; ul_cursor != 0;
			ul_cursor -= 2, p_uc_data += 4, p_y_data += 2) {
		l_y1 = p_uc_data[0]; /* Y1 */
		l_y1 -= 16;
  405f48:	3910      	subs	r1, #16
		l_blue = 516 * l_v + 128;
		l_green = -100 * l_v - 208 * l_u + 128;
		l_red = 409 * l_u + 128;

		/* BLUE */
		LCD_WD( clip32_to_8((298 * l_y1 + l_blue) >> 8));
  405f4a:	fb0c f101 	mul.w	r1, ip, r1
  405f4e:	eb0e 0201 	add.w	r2, lr, r1
  405f52:	1212      	asrs	r2, r2, #8
 * \param i Enter value .
 * \return i if 0<i<255, 0 if i<0 and 255 if i>255
 */
static inline uint8_t clip32_to_8( int32_t i )
{
	if (i > 255) {
  405f54:	2aff      	cmp	r2, #255	; 0xff
  405f56:	dc03      	bgt.n	405f60 <main+0x290>
		return 255;
	}

	if (i < 0) {
  405f58:	2a00      	cmp	r2, #0
  405f5a:	db03      	blt.n	405f64 <main+0x294>
		return 0;
	}

	return (uint8_t)i;
  405f5c:	b2d2      	uxtb	r2, r2
  405f5e:	e002      	b.n	405f66 <main+0x296>
 * \return i if 0<i<255, 0 if i<0 and 255 if i>255
 */
static inline uint8_t clip32_to_8( int32_t i )
{
	if (i > 255) {
		return 255;
  405f60:	22ff      	movs	r2, #255	; 0xff
  405f62:	e000      	b.n	405f66 <main+0x296>
	}

	if (i < 0) {
		return 0;
  405f64:	2200      	movs	r2, #0
  405f66:	7022      	strb	r2, [r4, #0]
		l_red = 409 * l_u + 128;

		/* BLUE */
		LCD_WD( clip32_to_8((298 * l_y1 + l_blue) >> 8));
		/* GREEN */
		LCD_WD( clip32_to_8((298 * l_y1 + l_green) >> 8));
  405f68:	185a      	adds	r2, r3, r1
  405f6a:	1212      	asrs	r2, r2, #8
 * \param i Enter value .
 * \return i if 0<i<255, 0 if i<0 and 255 if i>255
 */
static inline uint8_t clip32_to_8( int32_t i )
{
	if (i > 255) {
  405f6c:	2aff      	cmp	r2, #255	; 0xff
  405f6e:	dc03      	bgt.n	405f78 <main+0x2a8>
		return 255;
	}

	if (i < 0) {
  405f70:	2a00      	cmp	r2, #0
  405f72:	db03      	blt.n	405f7c <main+0x2ac>
		return 0;
	}

	return (uint8_t)i;
  405f74:	b2d2      	uxtb	r2, r2
  405f76:	e002      	b.n	405f7e <main+0x2ae>
 * \return i if 0<i<255, 0 if i<0 and 255 if i>255
 */
static inline uint8_t clip32_to_8( int32_t i )
{
	if (i > 255) {
		return 255;
  405f78:	22ff      	movs	r2, #255	; 0xff
  405f7a:	e000      	b.n	405f7e <main+0x2ae>
	}

	if (i < 0) {
		return 0;
  405f7c:	2200      	movs	r2, #0
  405f7e:	7022      	strb	r2, [r4, #0]
		/* BLUE */
		LCD_WD( clip32_to_8((298 * l_y1 + l_blue) >> 8));
		/* GREEN */
		LCD_WD( clip32_to_8((298 * l_y1 + l_green) >> 8));
		/* RED */
		LCD_WD( clip32_to_8((298 * l_y1 + l_red) >> 8));
  405f80:	4459      	add	r1, fp
  405f82:	1209      	asrs	r1, r1, #8
 * \param i Enter value .
 * \return i if 0<i<255, 0 if i<0 and 255 if i>255
 */
static inline uint8_t clip32_to_8( int32_t i )
{
	if (i > 255) {
  405f84:	29ff      	cmp	r1, #255	; 0xff
  405f86:	dc03      	bgt.n	405f90 <main+0x2c0>
		return 255;
	}

	if (i < 0) {
  405f88:	2900      	cmp	r1, #0
  405f8a:	db61      	blt.n	406050 <main+0x380>
		return 0;
	}

	return (uint8_t)i;
  405f8c:	b2c9      	uxtb	r1, r1
  405f8e:	e060      	b.n	406052 <main+0x382>
 * \return i if 0<i<255, 0 if i<0 and 255 if i>255
 */
static inline uint8_t clip32_to_8( int32_t i )
{
	if (i > 255) {
		return 255;
  405f90:	21ff      	movs	r1, #255	; 0xff
  405f92:	e05e      	b.n	406052 <main+0x382>
  405f94:	00400129 	.word	0x00400129
  405f98:	00400219 	.word	0x00400219
  405f9c:	00400eb9 	.word	0x00400eb9
  405fa0:	00405c3d 	.word	0x00405c3d
  405fa4:	0040e0d0 	.word	0x0040e0d0
  405fa8:	004008fd 	.word	0x004008fd
  405fac:	0040fd7c 	.word	0x0040fd7c
  405fb0:	00400995 	.word	0x00400995
  405fb4:	0040fda0 	.word	0x0040fda0
  405fb8:	00400f11 	.word	0x00400f11
  405fbc:	400e0000 	.word	0x400e0000
  405fc0:	00030002 	.word	0x00030002
  405fc4:	00400a41 	.word	0x00400a41
  405fc8:	06040504 	.word	0x06040504
  405fcc:	00400a49 	.word	0x00400a49
  405fd0:	00070006 	.word	0x00070006
  405fd4:	00400a51 	.word	0x00400a51
  405fd8:	00400a59 	.word	0x00400a59
  405fdc:	00400a61 	.word	0x00400a61
  405fe0:	00405c19 	.word	0x00405c19
  405fe4:	e000e100 	.word	0xe000e100
  405fe8:	00400ba5 	.word	0x00400ba5
  405fec:	00405c0d 	.word	0x00405c0d
  405ff0:	400e1200 	.word	0x400e1200
  405ff4:	004003d1 	.word	0x004003d1
  405ff8:	400e0400 	.word	0x400e0400
  405ffc:	07270e00 	.word	0x07270e00
  406000:	00061a80 	.word	0x00061a80
  406004:	40018000 	.word	0x40018000
  406008:	00400fa9 	.word	0x00400fa9
  40600c:	00400469 	.word	0x00400469
  406010:	00400581 	.word	0x00400581
  406014:	01885e6e 	.word	0x01885e6e
  406018:	20000001 	.word	0x20000001
  40601c:	0040fdc4 	.word	0x0040fdc4
  406020:	20000d18 	.word	0x20000d18
  406024:	20000d68 	.word	0x20000d68
  406028:	20000010 	.word	0x20000010
  40602c:	400e0e00 	.word	0x400e0e00
  406030:	20000d1c 	.word	0x20000d1c
  406034:	00400bad 	.word	0x00400bad
  406038:	00400cdd 	.word	0x00400cdd
  40603c:	20000012 	.word	0x20000012
  406040:	00400cf5 	.word	0x00400cf5
  406044:	0040096d 	.word	0x0040096d
  406048:	62000002 	.word	0x62000002
  40604c:	00400d75 	.word	0x00400d75
	}

	if (i < 0) {
		return 0;
  406050:	2100      	movs	r1, #0
  406052:	7021      	strb	r1, [r4, #0]
		/* GREEN */
		LCD_WD( clip32_to_8((298 * l_y1 + l_green) >> 8));
		/* RED */
		LCD_WD( clip32_to_8((298 * l_y1 + l_red) >> 8));

		l_y2 = p_uc_data[2]; /* Y2 */
  406054:	f810 2c02 	ldrb.w	r2, [r0, #-2]
		l_y2 -= 16;
  406058:	3a10      	subs	r2, #16
		LCD_WD( clip32_to_8((298 * l_y2 + l_blue) >> 8));
  40605a:	fb0c f202 	mul.w	r2, ip, r2
  40605e:	4496      	add	lr, r2
  406060:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 * \param i Enter value .
 * \return i if 0<i<255, 0 if i<0 and 255 if i>255
 */
static inline uint8_t clip32_to_8( int32_t i )
{
	if (i > 255) {
  406064:	f1be 0fff 	cmp.w	lr, #255	; 0xff
  406068:	dc05      	bgt.n	406076 <main+0x3a6>
		return 255;
	}

	if (i < 0) {
  40606a:	f1be 0f00 	cmp.w	lr, #0
  40606e:	db05      	blt.n	40607c <main+0x3ac>
		return 0;
	}

	return (uint8_t)i;
  406070:	fa5f fe8e 	uxtb.w	lr, lr
  406074:	e004      	b.n	406080 <main+0x3b0>
 * \return i if 0<i<255, 0 if i<0 and 255 if i>255
 */
static inline uint8_t clip32_to_8( int32_t i )
{
	if (i > 255) {
		return 255;
  406076:	f04f 0eff 	mov.w	lr, #255	; 0xff
  40607a:	e001      	b.n	406080 <main+0x3b0>
	}

	if (i < 0) {
		return 0;
  40607c:	f04f 0e00 	mov.w	lr, #0
  406080:	f884 e000 	strb.w	lr, [r4]
		LCD_WD( clip32_to_8((298 * l_y1 + l_red) >> 8));

		l_y2 = p_uc_data[2]; /* Y2 */
		l_y2 -= 16;
		LCD_WD( clip32_to_8((298 * l_y2 + l_blue) >> 8));
		LCD_WD( clip32_to_8((298 * l_y2 + l_green) >> 8));
  406084:	4413      	add	r3, r2
  406086:	121b      	asrs	r3, r3, #8
 * \param i Enter value .
 * \return i if 0<i<255, 0 if i<0 and 255 if i>255
 */
static inline uint8_t clip32_to_8( int32_t i )
{
	if (i > 255) {
  406088:	2bff      	cmp	r3, #255	; 0xff
  40608a:	dc03      	bgt.n	406094 <main+0x3c4>
		return 255;
	}

	if (i < 0) {
  40608c:	2b00      	cmp	r3, #0
  40608e:	db03      	blt.n	406098 <main+0x3c8>
		return 0;
	}

	return (uint8_t)i;
  406090:	b2db      	uxtb	r3, r3
  406092:	e002      	b.n	40609a <main+0x3ca>
 * \return i if 0<i<255, 0 if i<0 and 255 if i>255
 */
static inline uint8_t clip32_to_8( int32_t i )
{
	if (i > 255) {
		return 255;
  406094:	23ff      	movs	r3, #255	; 0xff
  406096:	e000      	b.n	40609a <main+0x3ca>
	}

	if (i < 0) {
		return 0;
  406098:	2300      	movs	r3, #0
  40609a:	7023      	strb	r3, [r4, #0]

		l_y2 = p_uc_data[2]; /* Y2 */
		l_y2 -= 16;
		LCD_WD( clip32_to_8((298 * l_y2 + l_blue) >> 8));
		LCD_WD( clip32_to_8((298 * l_y2 + l_green) >> 8));
		LCD_WD( clip32_to_8((298 * l_y2 + l_red) >> 8));				
  40609c:	445a      	add	r2, fp
  40609e:	1212      	asrs	r2, r2, #8
 * \param i Enter value .
 * \return i if 0<i<255, 0 if i<0 and 255 if i>255
 */
static inline uint8_t clip32_to_8( int32_t i )
{
	if (i > 255) {
  4060a0:	2aff      	cmp	r2, #255	; 0xff
  4060a2:	dc03      	bgt.n	4060ac <main+0x3dc>
		return 255;
	}

	if (i < 0) {
  4060a4:	2a00      	cmp	r2, #0
  4060a6:	db03      	blt.n	4060b0 <main+0x3e0>
		return 0;
	}

	return (uint8_t)i;
  4060a8:	b2d2      	uxtb	r2, r2
  4060aa:	e002      	b.n	4060b2 <main+0x3e2>
 * \return i if 0<i<255, 0 if i<0 and 255 if i>255
 */
static inline uint8_t clip32_to_8( int32_t i )
{
	if (i > 255) {
		return 255;
  4060ac:	22ff      	movs	r2, #255	; 0xff
  4060ae:	e000      	b.n	4060b2 <main+0x3e2>
	}

	if (i < 0) {
		return 0;
  4060b0:	2200      	movs	r2, #0
  4060b2:	7022      	strb	r2, [r4, #0]
		l_y2 -= 16;
		LCD_WD( clip32_to_8((298 * l_y2 + l_blue) >> 8));
		LCD_WD( clip32_to_8((298 * l_y2 + l_green) >> 8));
		LCD_WD( clip32_to_8((298 * l_y2 + l_red) >> 8));				
		
		p_y_data[0] = p_uc_data[0];		//	Y1
  4060b4:	f810 3c04 	ldrb.w	r3, [r0, #-4]
  4060b8:	7033      	strb	r3, [r6, #0]
		p_y_data[1] = p_uc_data[2];		//	Y2
  4060ba:	f810 3c02 	ldrb.w	r3, [r0, #-2]
  4060be:	7073      	strb	r3, [r6, #1]
		
		tempcursor = ul_cursor;
  4060c0:	9703      	str	r7, [sp, #12]
	 * The output of this conversion is two 3 bytes pixels in (B,G,R)
	 * format. First one is calculed using Y1,U,V and the other one with
	 * Y2,U,V. For that reason cap_line is twice bigger in color mode
	 * than in black and white mode. */
	for (ul_cursor = IMAGE_WIDTH * IMAGE_HEIGHT; ul_cursor != 0;
			ul_cursor -= 2, p_uc_data += 4, p_y_data += 2) {
  4060c2:	3602      	adds	r6, #2
  4060c4:	3504      	adds	r5, #4
	 * To display it on LCD,these pixel need to be converted in RGB format.
	 * The output of this conversion is two 3 bytes pixels in (B,G,R)
	 * format. First one is calculed using Y1,U,V and the other one with
	 * Y2,U,V. For that reason cap_line is twice bigger in color mode
	 * than in black and white mode. */
	for (ul_cursor = IMAGE_WIDTH * IMAGE_HEIGHT; ul_cursor != 0;
  4060c6:	3f02      	subs	r7, #2
  4060c8:	f47f af26 	bne.w	405f18 <main+0x248>
			_display();


			zbar_image_scanner_t *scanner = NULL;
			/* create a reader */
			scanner = zbar_image_scanner_create();
  4060cc:	4b2d      	ldr	r3, [pc, #180]	; (406184 <main+0x4b4>)
  4060ce:	4798      	blx	r3
  4060d0:	4605      	mov	r5, r0
			/* configure the reader */
			zbar_image_scanner_set_config(scanner, 0, ZBAR_CFG_ENABLE, 1);
  4060d2:	2100      	movs	r1, #0
  4060d4:	460a      	mov	r2, r1
  4060d6:	2301      	movs	r3, #1
  4060d8:	4c2b      	ldr	r4, [pc, #172]	; (406188 <main+0x4b8>)
  4060da:	47a0      	blx	r4
			//zbar_image_set_format(image, zbar_fourcc('Y','8','0','0'));
			//zbar_image_set_size(image, 6, 190);
			//zbar_image_set_data(image, temp, 6 * 190, zbar_image_free_data);

			uint8_t * temp = (uint8_t *)CAP_DEST;
			zbar_image_t *image = zbar_image_create();
  4060dc:	4b2b      	ldr	r3, [pc, #172]	; (40618c <main+0x4bc>)
  4060de:	4798      	blx	r3
  4060e0:	4604      	mov	r4, r0
			zbar_image_set_format(image, zbar_fourcc('G','R','E','Y'));
  4060e2:	492b      	ldr	r1, [pc, #172]	; (406190 <main+0x4c0>)
  4060e4:	4b2b      	ldr	r3, [pc, #172]	; (406194 <main+0x4c4>)
  4060e6:	4798      	blx	r3
			zbar_image_set_size(image, IMAGE_WIDTH, IMAGE_HEIGHT);
  4060e8:	4620      	mov	r0, r4
  4060ea:	f44f 71a0 	mov.w	r1, #320	; 0x140
  4060ee:	22f0      	movs	r2, #240	; 0xf0
  4060f0:	4b29      	ldr	r3, [pc, #164]	; (406198 <main+0x4c8>)
  4060f2:	4798      	blx	r3
			zbar_image_set_data(image, temp, IMAGE_WIDTH * IMAGE_HEIGHT, zbar_image_free_data);
  4060f4:	4620      	mov	r0, r4
  4060f6:	f04f 41c0 	mov.w	r1, #1610612736	; 0x60000000
  4060fa:	f44f 3296 	mov.w	r2, #76800	; 0x12c00
  4060fe:	4b27      	ldr	r3, [pc, #156]	; (40619c <main+0x4cc>)
  406100:	4e27      	ldr	r6, [pc, #156]	; (4061a0 <main+0x4d0>)
  406102:	47b0      	blx	r6


			/* scan the image for barcodes */
			int n = zbar_scan_image(scanner, image);
  406104:	4628      	mov	r0, r5
  406106:	4621      	mov	r1, r4
  406108:	4b26      	ldr	r3, [pc, #152]	; (4061a4 <main+0x4d4>)
  40610a:	4798      	blx	r3

			/* extract results */
			const zbar_symbol_t *symbol = zbar_image_first_symbol(image);
  40610c:	4620      	mov	r0, r4
  40610e:	4b26      	ldr	r3, [pc, #152]	; (4061a8 <main+0x4d8>)
  406110:	4798      	blx	r3
			for(; symbol; symbol = zbar_symbol_next(symbol)) {
  406112:	4604      	mov	r4, r0
  406114:	b310      	cbz	r0, 40615c <main+0x48c>
				/* print the results */
				zbar_symbol_type_t typ = zbar_symbol_get_type(symbol);
  406116:	f8df 80bc 	ldr.w	r8, [pc, #188]	; 4061d4 <main+0x504>
				volatile const char *data = zbar_symbol_get_data(symbol);
  40611a:	4f24      	ldr	r7, [pc, #144]	; (4061ac <main+0x4dc>)
		
				//printf("decoded %s symbol \"%s\"\n", zbar_get_symbol_name(typ), data);
				display_init();
  40611c:	4e24      	ldr	r6, [pc, #144]	; (4061b0 <main+0x4e0>)

			/* extract results */
			const zbar_symbol_t *symbol = zbar_image_first_symbol(image);
			for(; symbol; symbol = zbar_symbol_next(symbol)) {
				/* print the results */
				zbar_symbol_type_t typ = zbar_symbol_get_type(symbol);
  40611e:	4620      	mov	r0, r4
  406120:	47c0      	blx	r8
  406122:	4681      	mov	r9, r0
				volatile const char *data = zbar_symbol_get_data(symbol);
  406124:	4620      	mov	r0, r4
  406126:	47b8      	blx	r7
  406128:	4605      	mov	r5, r0
		
				//printf("decoded %s symbol \"%s\"\n", zbar_get_symbol_name(typ), data);
				display_init();
  40612a:	47b0      	blx	r6
				ili9325_fill(COLOR_BLUE);
  40612c:	20ff      	movs	r0, #255	; 0xff
  40612e:	4b21      	ldr	r3, [pc, #132]	; (4061b4 <main+0x4e4>)
  406130:	4798      	blx	r3
				ili9325_draw_string(0, 20, data);
  406132:	2000      	movs	r0, #0
  406134:	2114      	movs	r1, #20
  406136:	462a      	mov	r2, r5
  406138:	4d1f      	ldr	r5, [pc, #124]	; (4061b8 <main+0x4e8>)
  40613a:	47a8      	blx	r5
				ili9325_draw_string(0, 80, zbar_get_symbol_name(typ));
  40613c:	4648      	mov	r0, r9
  40613e:	4b1f      	ldr	r3, [pc, #124]	; (4061bc <main+0x4ec>)
  406140:	4798      	blx	r3
  406142:	4602      	mov	r2, r0
  406144:	2000      	movs	r0, #0
  406146:	2150      	movs	r1, #80	; 0x50
  406148:	47a8      	blx	r5
				
				g_ul_push_button_trigger = false;
  40614a:	2300      	movs	r3, #0
  40614c:	4a1c      	ldr	r2, [pc, #112]	; (4061c0 <main+0x4f0>)
  40614e:	6013      	str	r3, [r2, #0]
			/* scan the image for barcodes */
			int n = zbar_scan_image(scanner, image);

			/* extract results */
			const zbar_symbol_t *symbol = zbar_image_first_symbol(image);
			for(; symbol; symbol = zbar_symbol_next(symbol)) {
  406150:	4620      	mov	r0, r4
  406152:	4b1c      	ldr	r3, [pc, #112]	; (4061c4 <main+0x4f4>)
  406154:	4798      	blx	r3
  406156:	4604      	mov	r4, r0
  406158:	2800      	cmp	r0, #0
  40615a:	d1e0      	bne.n	40611e <main+0x44e>

			}

		} 
		
		if (g_display_splash) {
  40615c:	4b1a      	ldr	r3, [pc, #104]	; (4061c8 <main+0x4f8>)
  40615e:	681b      	ldr	r3, [r3, #0]
  406160:	2b00      	cmp	r3, #0
  406162:	f43f ae6f 	beq.w	405e44 <main+0x174>
			display_init();
  406166:	4b12      	ldr	r3, [pc, #72]	; (4061b0 <main+0x4e0>)
  406168:	4798      	blx	r3
			ili9325_fill(COLOR_TOMATO);
  40616a:	4818      	ldr	r0, [pc, #96]	; (4061cc <main+0x4fc>)
  40616c:	4b11      	ldr	r3, [pc, #68]	; (4061b4 <main+0x4e4>)
  40616e:	4798      	blx	r3
			ili9325_draw_string(0, 80, (uint8_t *)"Press button\nto start decoding \nbrah!");
  406170:	2000      	movs	r0, #0
  406172:	2150      	movs	r1, #80	; 0x50
  406174:	4a16      	ldr	r2, [pc, #88]	; (4061d0 <main+0x500>)
  406176:	4b10      	ldr	r3, [pc, #64]	; (4061b8 <main+0x4e8>)
  406178:	4798      	blx	r3
			g_display_splash = false;
  40617a:	2200      	movs	r2, #0
  40617c:	4b12      	ldr	r3, [pc, #72]	; (4061c8 <main+0x4f8>)
  40617e:	601a      	str	r2, [r3, #0]
  406180:	e660      	b.n	405e44 <main+0x174>
  406182:	bf00      	nop
  406184:	00404bd5 	.word	0x00404bd5
  406188:	00404c9d 	.word	0x00404c9d
  40618c:	00404295 	.word	0x00404295
  406190:	59455247 	.word	0x59455247
  406194:	0040435d 	.word	0x0040435d
  406198:	00404361 	.word	0x00404361
  40619c:	004042dd 	.word	0x004042dd
  4061a0:	00404371 	.word	0x00404371
  4061a4:	00404d81 	.word	0x00404d81
  4061a8:	004043f9 	.word	0x004043f9
  4061ac:	00405aa9 	.word	0x00405aa9
  4061b0:	00405c3d 	.word	0x00405c3d
  4061b4:	004008fd 	.word	0x004008fd
  4061b8:	00400995 	.word	0x00400995
  4061bc:	0040593d 	.word	0x0040593d
  4061c0:	20000d18 	.word	0x20000d18
  4061c4:	00405aad 	.word	0x00405aad
  4061c8:	20000d20 	.word	0x20000d20
  4061cc:	00ff6347 	.word	0x00ff6347
  4061d0:	0040fdf8 	.word	0x0040fdf8
  4061d4:	00405aa5 	.word	0x00405aa5

004061d8 <__gedf2>:
  4061d8:	f04f 3cff 	mov.w	ip, #4294967295
  4061dc:	e006      	b.n	4061ec <__cmpdf2+0x4>
  4061de:	bf00      	nop

004061e0 <__ledf2>:
  4061e0:	f04f 0c01 	mov.w	ip, #1
  4061e4:	e002      	b.n	4061ec <__cmpdf2+0x4>
  4061e6:	bf00      	nop

004061e8 <__cmpdf2>:
  4061e8:	f04f 0c01 	mov.w	ip, #1
  4061ec:	f84d cd04 	str.w	ip, [sp, #-4]!
  4061f0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  4061f4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  4061f8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  4061fc:	bf18      	it	ne
  4061fe:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
  406202:	d01b      	beq.n	40623c <__cmpdf2+0x54>
  406204:	b001      	add	sp, #4
  406206:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
  40620a:	bf0c      	ite	eq
  40620c:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
  406210:	ea91 0f03 	teqne	r1, r3
  406214:	bf02      	ittt	eq
  406216:	ea90 0f02 	teqeq	r0, r2
  40621a:	2000      	moveq	r0, #0
  40621c:	4770      	bxeq	lr
  40621e:	f110 0f00 	cmn.w	r0, #0
  406222:	ea91 0f03 	teq	r1, r3
  406226:	bf58      	it	pl
  406228:	4299      	cmppl	r1, r3
  40622a:	bf08      	it	eq
  40622c:	4290      	cmpeq	r0, r2
  40622e:	bf2c      	ite	cs
  406230:	17d8      	asrcs	r0, r3, #31
  406232:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
  406236:	f040 0001 	orr.w	r0, r0, #1
  40623a:	4770      	bx	lr
  40623c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  406240:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  406244:	d102      	bne.n	40624c <__cmpdf2+0x64>
  406246:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
  40624a:	d107      	bne.n	40625c <__cmpdf2+0x74>
  40624c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  406250:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  406254:	d1d6      	bne.n	406204 <__cmpdf2+0x1c>
  406256:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
  40625a:	d0d3      	beq.n	406204 <__cmpdf2+0x1c>
  40625c:	f85d 0b04 	ldr.w	r0, [sp], #4
  406260:	4770      	bx	lr
  406262:	bf00      	nop

00406264 <__aeabi_cdrcmple>:
  406264:	4684      	mov	ip, r0
  406266:	4610      	mov	r0, r2
  406268:	4662      	mov	r2, ip
  40626a:	468c      	mov	ip, r1
  40626c:	4619      	mov	r1, r3
  40626e:	4663      	mov	r3, ip
  406270:	e000      	b.n	406274 <__aeabi_cdcmpeq>
  406272:	bf00      	nop

00406274 <__aeabi_cdcmpeq>:
  406274:	b501      	push	{r0, lr}
  406276:	f7ff ffb7 	bl	4061e8 <__cmpdf2>
  40627a:	2800      	cmp	r0, #0
  40627c:	bf48      	it	mi
  40627e:	f110 0f00 	cmnmi.w	r0, #0
  406282:	bd01      	pop	{r0, pc}

00406284 <__aeabi_dcmpeq>:
  406284:	f84d ed08 	str.w	lr, [sp, #-8]!
  406288:	f7ff fff4 	bl	406274 <__aeabi_cdcmpeq>
  40628c:	bf0c      	ite	eq
  40628e:	2001      	moveq	r0, #1
  406290:	2000      	movne	r0, #0
  406292:	f85d fb08 	ldr.w	pc, [sp], #8
  406296:	bf00      	nop

00406298 <__aeabi_dcmplt>:
  406298:	f84d ed08 	str.w	lr, [sp, #-8]!
  40629c:	f7ff ffea 	bl	406274 <__aeabi_cdcmpeq>
  4062a0:	bf34      	ite	cc
  4062a2:	2001      	movcc	r0, #1
  4062a4:	2000      	movcs	r0, #0
  4062a6:	f85d fb08 	ldr.w	pc, [sp], #8
  4062aa:	bf00      	nop

004062ac <__aeabi_dcmple>:
  4062ac:	f84d ed08 	str.w	lr, [sp, #-8]!
  4062b0:	f7ff ffe0 	bl	406274 <__aeabi_cdcmpeq>
  4062b4:	bf94      	ite	ls
  4062b6:	2001      	movls	r0, #1
  4062b8:	2000      	movhi	r0, #0
  4062ba:	f85d fb08 	ldr.w	pc, [sp], #8
  4062be:	bf00      	nop

004062c0 <__aeabi_dcmpge>:
  4062c0:	f84d ed08 	str.w	lr, [sp, #-8]!
  4062c4:	f7ff ffce 	bl	406264 <__aeabi_cdrcmple>
  4062c8:	bf94      	ite	ls
  4062ca:	2001      	movls	r0, #1
  4062cc:	2000      	movhi	r0, #0
  4062ce:	f85d fb08 	ldr.w	pc, [sp], #8
  4062d2:	bf00      	nop

004062d4 <__aeabi_dcmpgt>:
  4062d4:	f84d ed08 	str.w	lr, [sp, #-8]!
  4062d8:	f7ff ffc4 	bl	406264 <__aeabi_cdrcmple>
  4062dc:	bf34      	ite	cc
  4062de:	2001      	movcc	r0, #1
  4062e0:	2000      	movcs	r0, #0
  4062e2:	f85d fb08 	ldr.w	pc, [sp], #8
  4062e6:	bf00      	nop

004062e8 <__assert_func>:
  4062e8:	b500      	push	{lr}
  4062ea:	4c0a      	ldr	r4, [pc, #40]	; (406314 <__assert_func+0x2c>)
  4062ec:	6824      	ldr	r4, [r4, #0]
  4062ee:	4605      	mov	r5, r0
  4062f0:	b085      	sub	sp, #20
  4062f2:	68e0      	ldr	r0, [r4, #12]
  4062f4:	b152      	cbz	r2, 40630c <__assert_func+0x24>
  4062f6:	4c08      	ldr	r4, [pc, #32]	; (406318 <__assert_func+0x30>)
  4062f8:	9202      	str	r2, [sp, #8]
  4062fa:	e88d 0012 	stmia.w	sp, {r1, r4}
  4062fe:	461a      	mov	r2, r3
  406300:	4906      	ldr	r1, [pc, #24]	; (40631c <__assert_func+0x34>)
  406302:	462b      	mov	r3, r5
  406304:	f000 f9d0 	bl	4066a8 <fiprintf>
  406308:	f005 f8a8 	bl	40b45c <abort>
  40630c:	4c04      	ldr	r4, [pc, #16]	; (406320 <__assert_func+0x38>)
  40630e:	4622      	mov	r2, r4
  406310:	e7f2      	b.n	4062f8 <__assert_func+0x10>
  406312:	bf00      	nop
  406314:	20000440 	.word	0x20000440
  406318:	0040fe20 	.word	0x0040fe20
  40631c:	0040fe30 	.word	0x0040fe30
  406320:	0040f8a8 	.word	0x0040f8a8

00406324 <calloc>:
  406324:	4b02      	ldr	r3, [pc, #8]	; (406330 <calloc+0xc>)
  406326:	460a      	mov	r2, r1
  406328:	4601      	mov	r1, r0
  40632a:	6818      	ldr	r0, [r3, #0]
  40632c:	f000 b802 	b.w	406334 <_calloc_r>
  406330:	20000440 	.word	0x20000440

00406334 <_calloc_r>:
  406334:	b510      	push	{r4, lr}
  406336:	fb02 f101 	mul.w	r1, r2, r1
  40633a:	f000 fd89 	bl	406e50 <_malloc_r>
  40633e:	4604      	mov	r4, r0
  406340:	b168      	cbz	r0, 40635e <_calloc_r+0x2a>
  406342:	f850 2c04 	ldr.w	r2, [r0, #-4]
  406346:	f022 0203 	bic.w	r2, r2, #3
  40634a:	3a04      	subs	r2, #4
  40634c:	2a24      	cmp	r2, #36	; 0x24
  40634e:	d818      	bhi.n	406382 <_calloc_r+0x4e>
  406350:	2a13      	cmp	r2, #19
  406352:	d806      	bhi.n	406362 <_calloc_r+0x2e>
  406354:	4603      	mov	r3, r0
  406356:	2200      	movs	r2, #0
  406358:	601a      	str	r2, [r3, #0]
  40635a:	605a      	str	r2, [r3, #4]
  40635c:	609a      	str	r2, [r3, #8]
  40635e:	4620      	mov	r0, r4
  406360:	bd10      	pop	{r4, pc}
  406362:	2300      	movs	r3, #0
  406364:	2a1b      	cmp	r2, #27
  406366:	6003      	str	r3, [r0, #0]
  406368:	6043      	str	r3, [r0, #4]
  40636a:	d90f      	bls.n	40638c <_calloc_r+0x58>
  40636c:	2a24      	cmp	r2, #36	; 0x24
  40636e:	6083      	str	r3, [r0, #8]
  406370:	60c3      	str	r3, [r0, #12]
  406372:	bf05      	ittet	eq
  406374:	6103      	streq	r3, [r0, #16]
  406376:	6143      	streq	r3, [r0, #20]
  406378:	f100 0310 	addne.w	r3, r0, #16
  40637c:	f100 0318 	addeq.w	r3, r0, #24
  406380:	e7e9      	b.n	406356 <_calloc_r+0x22>
  406382:	2100      	movs	r1, #0
  406384:	f001 f970 	bl	407668 <memset>
  406388:	4620      	mov	r0, r4
  40638a:	bd10      	pop	{r4, pc}
  40638c:	f100 0308 	add.w	r3, r0, #8
  406390:	e7e1      	b.n	406356 <_calloc_r+0x22>
  406392:	bf00      	nop

00406394 <_fclose_r>:
  406394:	2900      	cmp	r1, #0
  406396:	d03d      	beq.n	406414 <_fclose_r+0x80>
  406398:	b570      	push	{r4, r5, r6, lr}
  40639a:	4605      	mov	r5, r0
  40639c:	460c      	mov	r4, r1
  40639e:	b108      	cbz	r0, 4063a4 <_fclose_r+0x10>
  4063a0:	6b83      	ldr	r3, [r0, #56]	; 0x38
  4063a2:	b37b      	cbz	r3, 406404 <_fclose_r+0x70>
  4063a4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4063a8:	b90b      	cbnz	r3, 4063ae <_fclose_r+0x1a>
  4063aa:	2000      	movs	r0, #0
  4063ac:	bd70      	pop	{r4, r5, r6, pc}
  4063ae:	4628      	mov	r0, r5
  4063b0:	4621      	mov	r1, r4
  4063b2:	f000 f831 	bl	406418 <__sflush_r>
  4063b6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  4063b8:	4606      	mov	r6, r0
  4063ba:	b133      	cbz	r3, 4063ca <_fclose_r+0x36>
  4063bc:	4628      	mov	r0, r5
  4063be:	69e1      	ldr	r1, [r4, #28]
  4063c0:	4798      	blx	r3
  4063c2:	2800      	cmp	r0, #0
  4063c4:	bfb8      	it	lt
  4063c6:	f04f 36ff 	movlt.w	r6, #4294967295
  4063ca:	89a3      	ldrh	r3, [r4, #12]
  4063cc:	061b      	lsls	r3, r3, #24
  4063ce:	d41c      	bmi.n	40640a <_fclose_r+0x76>
  4063d0:	6b21      	ldr	r1, [r4, #48]	; 0x30
  4063d2:	b141      	cbz	r1, 4063e6 <_fclose_r+0x52>
  4063d4:	f104 0340 	add.w	r3, r4, #64	; 0x40
  4063d8:	4299      	cmp	r1, r3
  4063da:	d002      	beq.n	4063e2 <_fclose_r+0x4e>
  4063dc:	4628      	mov	r0, r5
  4063de:	f000 f9d9 	bl	406794 <_free_r>
  4063e2:	2300      	movs	r3, #0
  4063e4:	6323      	str	r3, [r4, #48]	; 0x30
  4063e6:	6c61      	ldr	r1, [r4, #68]	; 0x44
  4063e8:	b121      	cbz	r1, 4063f4 <_fclose_r+0x60>
  4063ea:	4628      	mov	r0, r5
  4063ec:	f000 f9d2 	bl	406794 <_free_r>
  4063f0:	2300      	movs	r3, #0
  4063f2:	6463      	str	r3, [r4, #68]	; 0x44
  4063f4:	f000 f954 	bl	4066a0 <__sfp_lock_acquire>
  4063f8:	2300      	movs	r3, #0
  4063fa:	81a3      	strh	r3, [r4, #12]
  4063fc:	f000 f952 	bl	4066a4 <__sfp_lock_release>
  406400:	4630      	mov	r0, r6
  406402:	bd70      	pop	{r4, r5, r6, pc}
  406404:	f000 f946 	bl	406694 <__sinit>
  406408:	e7cc      	b.n	4063a4 <_fclose_r+0x10>
  40640a:	4628      	mov	r0, r5
  40640c:	6921      	ldr	r1, [r4, #16]
  40640e:	f000 f9c1 	bl	406794 <_free_r>
  406412:	e7dd      	b.n	4063d0 <_fclose_r+0x3c>
  406414:	2000      	movs	r0, #0
  406416:	4770      	bx	lr

00406418 <__sflush_r>:
  406418:	898b      	ldrh	r3, [r1, #12]
  40641a:	b29a      	uxth	r2, r3
  40641c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  406420:	460d      	mov	r5, r1
  406422:	0711      	lsls	r1, r2, #28
  406424:	4680      	mov	r8, r0
  406426:	d43c      	bmi.n	4064a2 <__sflush_r+0x8a>
  406428:	686a      	ldr	r2, [r5, #4]
  40642a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
  40642e:	2a00      	cmp	r2, #0
  406430:	81ab      	strh	r3, [r5, #12]
  406432:	dd65      	ble.n	406500 <__sflush_r+0xe8>
  406434:	6aae      	ldr	r6, [r5, #40]	; 0x28
  406436:	2e00      	cmp	r6, #0
  406438:	d04b      	beq.n	4064d2 <__sflush_r+0xba>
  40643a:	b29b      	uxth	r3, r3
  40643c:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
  406440:	2100      	movs	r1, #0
  406442:	b292      	uxth	r2, r2
  406444:	f8d8 4000 	ldr.w	r4, [r8]
  406448:	f8c8 1000 	str.w	r1, [r8]
  40644c:	2a00      	cmp	r2, #0
  40644e:	d05b      	beq.n	406508 <__sflush_r+0xf0>
  406450:	6d2a      	ldr	r2, [r5, #80]	; 0x50
  406452:	075f      	lsls	r7, r3, #29
  406454:	d505      	bpl.n	406462 <__sflush_r+0x4a>
  406456:	6869      	ldr	r1, [r5, #4]
  406458:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  40645a:	1a52      	subs	r2, r2, r1
  40645c:	b10b      	cbz	r3, 406462 <__sflush_r+0x4a>
  40645e:	6beb      	ldr	r3, [r5, #60]	; 0x3c
  406460:	1ad2      	subs	r2, r2, r3
  406462:	4640      	mov	r0, r8
  406464:	69e9      	ldr	r1, [r5, #28]
  406466:	2300      	movs	r3, #0
  406468:	47b0      	blx	r6
  40646a:	1c46      	adds	r6, r0, #1
  40646c:	d056      	beq.n	40651c <__sflush_r+0x104>
  40646e:	89ab      	ldrh	r3, [r5, #12]
  406470:	692a      	ldr	r2, [r5, #16]
  406472:	602a      	str	r2, [r5, #0]
  406474:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  406478:	b29b      	uxth	r3, r3
  40647a:	2200      	movs	r2, #0
  40647c:	606a      	str	r2, [r5, #4]
  40647e:	04da      	lsls	r2, r3, #19
  406480:	81ab      	strh	r3, [r5, #12]
  406482:	d43b      	bmi.n	4064fc <__sflush_r+0xe4>
  406484:	6b29      	ldr	r1, [r5, #48]	; 0x30
  406486:	f8c8 4000 	str.w	r4, [r8]
  40648a:	b311      	cbz	r1, 4064d2 <__sflush_r+0xba>
  40648c:	f105 0340 	add.w	r3, r5, #64	; 0x40
  406490:	4299      	cmp	r1, r3
  406492:	d002      	beq.n	40649a <__sflush_r+0x82>
  406494:	4640      	mov	r0, r8
  406496:	f000 f97d 	bl	406794 <_free_r>
  40649a:	2000      	movs	r0, #0
  40649c:	6328      	str	r0, [r5, #48]	; 0x30
  40649e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4064a2:	692e      	ldr	r6, [r5, #16]
  4064a4:	b1ae      	cbz	r6, 4064d2 <__sflush_r+0xba>
  4064a6:	682c      	ldr	r4, [r5, #0]
  4064a8:	602e      	str	r6, [r5, #0]
  4064aa:	0791      	lsls	r1, r2, #30
  4064ac:	bf0c      	ite	eq
  4064ae:	696b      	ldreq	r3, [r5, #20]
  4064b0:	2300      	movne	r3, #0
  4064b2:	1ba4      	subs	r4, r4, r6
  4064b4:	60ab      	str	r3, [r5, #8]
  4064b6:	e00a      	b.n	4064ce <__sflush_r+0xb6>
  4064b8:	4632      	mov	r2, r6
  4064ba:	4623      	mov	r3, r4
  4064bc:	6a6f      	ldr	r7, [r5, #36]	; 0x24
  4064be:	69e9      	ldr	r1, [r5, #28]
  4064c0:	4640      	mov	r0, r8
  4064c2:	47b8      	blx	r7
  4064c4:	2800      	cmp	r0, #0
  4064c6:	eba4 0400 	sub.w	r4, r4, r0
  4064ca:	4406      	add	r6, r0
  4064cc:	dd04      	ble.n	4064d8 <__sflush_r+0xc0>
  4064ce:	2c00      	cmp	r4, #0
  4064d0:	dcf2      	bgt.n	4064b8 <__sflush_r+0xa0>
  4064d2:	2000      	movs	r0, #0
  4064d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4064d8:	89ab      	ldrh	r3, [r5, #12]
  4064da:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  4064de:	81ab      	strh	r3, [r5, #12]
  4064e0:	f04f 30ff 	mov.w	r0, #4294967295
  4064e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4064e8:	89ab      	ldrh	r3, [r5, #12]
  4064ea:	692a      	ldr	r2, [r5, #16]
  4064ec:	6069      	str	r1, [r5, #4]
  4064ee:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  4064f2:	b29b      	uxth	r3, r3
  4064f4:	81ab      	strh	r3, [r5, #12]
  4064f6:	04db      	lsls	r3, r3, #19
  4064f8:	602a      	str	r2, [r5, #0]
  4064fa:	d5c3      	bpl.n	406484 <__sflush_r+0x6c>
  4064fc:	6528      	str	r0, [r5, #80]	; 0x50
  4064fe:	e7c1      	b.n	406484 <__sflush_r+0x6c>
  406500:	6bea      	ldr	r2, [r5, #60]	; 0x3c
  406502:	2a00      	cmp	r2, #0
  406504:	dc96      	bgt.n	406434 <__sflush_r+0x1c>
  406506:	e7e4      	b.n	4064d2 <__sflush_r+0xba>
  406508:	2301      	movs	r3, #1
  40650a:	4640      	mov	r0, r8
  40650c:	69e9      	ldr	r1, [r5, #28]
  40650e:	47b0      	blx	r6
  406510:	1c43      	adds	r3, r0, #1
  406512:	4602      	mov	r2, r0
  406514:	d019      	beq.n	40654a <__sflush_r+0x132>
  406516:	89ab      	ldrh	r3, [r5, #12]
  406518:	6aae      	ldr	r6, [r5, #40]	; 0x28
  40651a:	e79a      	b.n	406452 <__sflush_r+0x3a>
  40651c:	f8d8 1000 	ldr.w	r1, [r8]
  406520:	2900      	cmp	r1, #0
  406522:	d0e1      	beq.n	4064e8 <__sflush_r+0xd0>
  406524:	291d      	cmp	r1, #29
  406526:	d007      	beq.n	406538 <__sflush_r+0x120>
  406528:	2916      	cmp	r1, #22
  40652a:	d005      	beq.n	406538 <__sflush_r+0x120>
  40652c:	89ab      	ldrh	r3, [r5, #12]
  40652e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  406532:	81ab      	strh	r3, [r5, #12]
  406534:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  406538:	89ab      	ldrh	r3, [r5, #12]
  40653a:	692a      	ldr	r2, [r5, #16]
  40653c:	602a      	str	r2, [r5, #0]
  40653e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  406542:	2200      	movs	r2, #0
  406544:	81ab      	strh	r3, [r5, #12]
  406546:	606a      	str	r2, [r5, #4]
  406548:	e79c      	b.n	406484 <__sflush_r+0x6c>
  40654a:	f8d8 3000 	ldr.w	r3, [r8]
  40654e:	2b00      	cmp	r3, #0
  406550:	d0e1      	beq.n	406516 <__sflush_r+0xfe>
  406552:	2b1d      	cmp	r3, #29
  406554:	d007      	beq.n	406566 <__sflush_r+0x14e>
  406556:	2b16      	cmp	r3, #22
  406558:	d005      	beq.n	406566 <__sflush_r+0x14e>
  40655a:	89ab      	ldrh	r3, [r5, #12]
  40655c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  406560:	81ab      	strh	r3, [r5, #12]
  406562:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  406566:	f8c8 4000 	str.w	r4, [r8]
  40656a:	e7b2      	b.n	4064d2 <__sflush_r+0xba>

0040656c <_fflush_r>:
  40656c:	b510      	push	{r4, lr}
  40656e:	4604      	mov	r4, r0
  406570:	b082      	sub	sp, #8
  406572:	b108      	cbz	r0, 406578 <_fflush_r+0xc>
  406574:	6b83      	ldr	r3, [r0, #56]	; 0x38
  406576:	b153      	cbz	r3, 40658e <_fflush_r+0x22>
  406578:	f9b1 000c 	ldrsh.w	r0, [r1, #12]
  40657c:	b908      	cbnz	r0, 406582 <_fflush_r+0x16>
  40657e:	b002      	add	sp, #8
  406580:	bd10      	pop	{r4, pc}
  406582:	4620      	mov	r0, r4
  406584:	b002      	add	sp, #8
  406586:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  40658a:	f7ff bf45 	b.w	406418 <__sflush_r>
  40658e:	9101      	str	r1, [sp, #4]
  406590:	f000 f880 	bl	406694 <__sinit>
  406594:	9901      	ldr	r1, [sp, #4]
  406596:	e7ef      	b.n	406578 <_fflush_r+0xc>

00406598 <_cleanup_r>:
  406598:	4901      	ldr	r1, [pc, #4]	; (4065a0 <_cleanup_r+0x8>)
  40659a:	f000 bb73 	b.w	406c84 <_fwalk_reent>
  40659e:	bf00      	nop
  4065a0:	00406395 	.word	0x00406395

004065a4 <__sinit.part.1>:
  4065a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4065a8:	4b35      	ldr	r3, [pc, #212]	; (406680 <__sinit.part.1+0xdc>)
  4065aa:	6845      	ldr	r5, [r0, #4]
  4065ac:	63c3      	str	r3, [r0, #60]	; 0x3c
  4065ae:	2400      	movs	r4, #0
  4065b0:	4607      	mov	r7, r0
  4065b2:	f500 723b 	add.w	r2, r0, #748	; 0x2ec
  4065b6:	2304      	movs	r3, #4
  4065b8:	2103      	movs	r1, #3
  4065ba:	f8c0 12e4 	str.w	r1, [r0, #740]	; 0x2e4
  4065be:	f8c0 22e8 	str.w	r2, [r0, #744]	; 0x2e8
  4065c2:	f8c0 42e0 	str.w	r4, [r0, #736]	; 0x2e0
  4065c6:	b083      	sub	sp, #12
  4065c8:	602c      	str	r4, [r5, #0]
  4065ca:	606c      	str	r4, [r5, #4]
  4065cc:	60ac      	str	r4, [r5, #8]
  4065ce:	666c      	str	r4, [r5, #100]	; 0x64
  4065d0:	81ec      	strh	r4, [r5, #14]
  4065d2:	612c      	str	r4, [r5, #16]
  4065d4:	616c      	str	r4, [r5, #20]
  4065d6:	61ac      	str	r4, [r5, #24]
  4065d8:	81ab      	strh	r3, [r5, #12]
  4065da:	4621      	mov	r1, r4
  4065dc:	f105 005c 	add.w	r0, r5, #92	; 0x5c
  4065e0:	2208      	movs	r2, #8
  4065e2:	f001 f841 	bl	407668 <memset>
  4065e6:	68be      	ldr	r6, [r7, #8]
  4065e8:	f8df b098 	ldr.w	fp, [pc, #152]	; 406684 <__sinit.part.1+0xe0>
  4065ec:	f8df a098 	ldr.w	sl, [pc, #152]	; 406688 <__sinit.part.1+0xe4>
  4065f0:	f8df 9098 	ldr.w	r9, [pc, #152]	; 40668c <__sinit.part.1+0xe8>
  4065f4:	f8df 8098 	ldr.w	r8, [pc, #152]	; 406690 <__sinit.part.1+0xec>
  4065f8:	f8c5 b020 	str.w	fp, [r5, #32]
  4065fc:	2301      	movs	r3, #1
  4065fe:	2209      	movs	r2, #9
  406600:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
  406604:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
  406608:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
  40660c:	61ed      	str	r5, [r5, #28]
  40660e:	4621      	mov	r1, r4
  406610:	81f3      	strh	r3, [r6, #14]
  406612:	81b2      	strh	r2, [r6, #12]
  406614:	f106 005c 	add.w	r0, r6, #92	; 0x5c
  406618:	6034      	str	r4, [r6, #0]
  40661a:	6074      	str	r4, [r6, #4]
  40661c:	60b4      	str	r4, [r6, #8]
  40661e:	6674      	str	r4, [r6, #100]	; 0x64
  406620:	6134      	str	r4, [r6, #16]
  406622:	6174      	str	r4, [r6, #20]
  406624:	61b4      	str	r4, [r6, #24]
  406626:	2208      	movs	r2, #8
  406628:	9301      	str	r3, [sp, #4]
  40662a:	f001 f81d 	bl	407668 <memset>
  40662e:	68fd      	ldr	r5, [r7, #12]
  406630:	61f6      	str	r6, [r6, #28]
  406632:	2012      	movs	r0, #18
  406634:	2202      	movs	r2, #2
  406636:	f8c6 b020 	str.w	fp, [r6, #32]
  40663a:	f8c6 a024 	str.w	sl, [r6, #36]	; 0x24
  40663e:	f8c6 9028 	str.w	r9, [r6, #40]	; 0x28
  406642:	f8c6 802c 	str.w	r8, [r6, #44]	; 0x2c
  406646:	4621      	mov	r1, r4
  406648:	81a8      	strh	r0, [r5, #12]
  40664a:	81ea      	strh	r2, [r5, #14]
  40664c:	602c      	str	r4, [r5, #0]
  40664e:	606c      	str	r4, [r5, #4]
  406650:	60ac      	str	r4, [r5, #8]
  406652:	666c      	str	r4, [r5, #100]	; 0x64
  406654:	612c      	str	r4, [r5, #16]
  406656:	616c      	str	r4, [r5, #20]
  406658:	61ac      	str	r4, [r5, #24]
  40665a:	f105 005c 	add.w	r0, r5, #92	; 0x5c
  40665e:	2208      	movs	r2, #8
  406660:	f001 f802 	bl	407668 <memset>
  406664:	9b01      	ldr	r3, [sp, #4]
  406666:	61ed      	str	r5, [r5, #28]
  406668:	f8c5 b020 	str.w	fp, [r5, #32]
  40666c:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
  406670:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
  406674:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
  406678:	63bb      	str	r3, [r7, #56]	; 0x38
  40667a:	b003      	add	sp, #12
  40667c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  406680:	00406599 	.word	0x00406599
  406684:	00407bc9 	.word	0x00407bc9
  406688:	00407bed 	.word	0x00407bed
  40668c:	00407c25 	.word	0x00407c25
  406690:	00407c45 	.word	0x00407c45

00406694 <__sinit>:
  406694:	6b83      	ldr	r3, [r0, #56]	; 0x38
  406696:	b103      	cbz	r3, 40669a <__sinit+0x6>
  406698:	4770      	bx	lr
  40669a:	f7ff bf83 	b.w	4065a4 <__sinit.part.1>
  40669e:	bf00      	nop

004066a0 <__sfp_lock_acquire>:
  4066a0:	4770      	bx	lr
  4066a2:	bf00      	nop

004066a4 <__sfp_lock_release>:
  4066a4:	4770      	bx	lr
  4066a6:	bf00      	nop

004066a8 <fiprintf>:
  4066a8:	b40e      	push	{r1, r2, r3}
  4066aa:	b510      	push	{r4, lr}
  4066ac:	b083      	sub	sp, #12
  4066ae:	ab05      	add	r3, sp, #20
  4066b0:	4c06      	ldr	r4, [pc, #24]	; (4066cc <fiprintf+0x24>)
  4066b2:	f853 2b04 	ldr.w	r2, [r3], #4
  4066b6:	9301      	str	r3, [sp, #4]
  4066b8:	4601      	mov	r1, r0
  4066ba:	6820      	ldr	r0, [r4, #0]
  4066bc:	f002 fd86 	bl	4091cc <_vfiprintf_r>
  4066c0:	b003      	add	sp, #12
  4066c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  4066c6:	b003      	add	sp, #12
  4066c8:	4770      	bx	lr
  4066ca:	bf00      	nop
  4066cc:	20000440 	.word	0x20000440

004066d0 <fprintf>:
  4066d0:	b40e      	push	{r1, r2, r3}
  4066d2:	b510      	push	{r4, lr}
  4066d4:	b083      	sub	sp, #12
  4066d6:	ab05      	add	r3, sp, #20
  4066d8:	4c06      	ldr	r4, [pc, #24]	; (4066f4 <fprintf+0x24>)
  4066da:	f853 2b04 	ldr.w	r2, [r3], #4
  4066de:	9301      	str	r3, [sp, #4]
  4066e0:	4601      	mov	r1, r0
  4066e2:	6820      	ldr	r0, [r4, #0]
  4066e4:	f003 fbb6 	bl	409e54 <_vfprintf_r>
  4066e8:	b003      	add	sp, #12
  4066ea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  4066ee:	b003      	add	sp, #12
  4066f0:	4770      	bx	lr
  4066f2:	bf00      	nop
  4066f4:	20000440 	.word	0x20000440

004066f8 <_malloc_trim_r>:
  4066f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4066fa:	4f23      	ldr	r7, [pc, #140]	; (406788 <_malloc_trim_r+0x90>)
  4066fc:	460c      	mov	r4, r1
  4066fe:	4606      	mov	r6, r0
  406700:	f001 f800 	bl	407704 <__malloc_lock>
  406704:	68bb      	ldr	r3, [r7, #8]
  406706:	685d      	ldr	r5, [r3, #4]
  406708:	f025 0503 	bic.w	r5, r5, #3
  40670c:	1b29      	subs	r1, r5, r4
  40670e:	f601 71ef 	addw	r1, r1, #4079	; 0xfef
  406712:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
  406716:	f021 010f 	bic.w	r1, r1, #15
  40671a:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
  40671e:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
  406722:	db07      	blt.n	406734 <_malloc_trim_r+0x3c>
  406724:	4630      	mov	r0, r6
  406726:	2100      	movs	r1, #0
  406728:	f001 f9ee 	bl	407b08 <_sbrk_r>
  40672c:	68bb      	ldr	r3, [r7, #8]
  40672e:	442b      	add	r3, r5
  406730:	4298      	cmp	r0, r3
  406732:	d004      	beq.n	40673e <_malloc_trim_r+0x46>
  406734:	4630      	mov	r0, r6
  406736:	f000 ffe7 	bl	407708 <__malloc_unlock>
  40673a:	2000      	movs	r0, #0
  40673c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40673e:	4630      	mov	r0, r6
  406740:	4261      	negs	r1, r4
  406742:	f001 f9e1 	bl	407b08 <_sbrk_r>
  406746:	3001      	adds	r0, #1
  406748:	d00d      	beq.n	406766 <_malloc_trim_r+0x6e>
  40674a:	4b10      	ldr	r3, [pc, #64]	; (40678c <_malloc_trim_r+0x94>)
  40674c:	68ba      	ldr	r2, [r7, #8]
  40674e:	6819      	ldr	r1, [r3, #0]
  406750:	1b2d      	subs	r5, r5, r4
  406752:	f045 0501 	orr.w	r5, r5, #1
  406756:	4630      	mov	r0, r6
  406758:	1b09      	subs	r1, r1, r4
  40675a:	6055      	str	r5, [r2, #4]
  40675c:	6019      	str	r1, [r3, #0]
  40675e:	f000 ffd3 	bl	407708 <__malloc_unlock>
  406762:	2001      	movs	r0, #1
  406764:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  406766:	4630      	mov	r0, r6
  406768:	2100      	movs	r1, #0
  40676a:	f001 f9cd 	bl	407b08 <_sbrk_r>
  40676e:	68ba      	ldr	r2, [r7, #8]
  406770:	1a83      	subs	r3, r0, r2
  406772:	2b0f      	cmp	r3, #15
  406774:	ddde      	ble.n	406734 <_malloc_trim_r+0x3c>
  406776:	4c06      	ldr	r4, [pc, #24]	; (406790 <_malloc_trim_r+0x98>)
  406778:	4904      	ldr	r1, [pc, #16]	; (40678c <_malloc_trim_r+0x94>)
  40677a:	6824      	ldr	r4, [r4, #0]
  40677c:	f043 0301 	orr.w	r3, r3, #1
  406780:	1b00      	subs	r0, r0, r4
  406782:	6053      	str	r3, [r2, #4]
  406784:	6008      	str	r0, [r1, #0]
  406786:	e7d5      	b.n	406734 <_malloc_trim_r+0x3c>
  406788:	20000444 	.word	0x20000444
  40678c:	20000d30 	.word	0x20000d30
  406790:	20000850 	.word	0x20000850

00406794 <_free_r>:
  406794:	2900      	cmp	r1, #0
  406796:	d04e      	beq.n	406836 <_free_r+0xa2>
  406798:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40679c:	460c      	mov	r4, r1
  40679e:	4680      	mov	r8, r0
  4067a0:	f000 ffb0 	bl	407704 <__malloc_lock>
  4067a4:	f854 7c04 	ldr.w	r7, [r4, #-4]
  4067a8:	4962      	ldr	r1, [pc, #392]	; (406934 <_free_r+0x1a0>)
  4067aa:	f027 0201 	bic.w	r2, r7, #1
  4067ae:	f1a4 0508 	sub.w	r5, r4, #8
  4067b2:	18ab      	adds	r3, r5, r2
  4067b4:	688e      	ldr	r6, [r1, #8]
  4067b6:	6858      	ldr	r0, [r3, #4]
  4067b8:	429e      	cmp	r6, r3
  4067ba:	f020 0003 	bic.w	r0, r0, #3
  4067be:	d05a      	beq.n	406876 <_free_r+0xe2>
  4067c0:	07fe      	lsls	r6, r7, #31
  4067c2:	6058      	str	r0, [r3, #4]
  4067c4:	d40b      	bmi.n	4067de <_free_r+0x4a>
  4067c6:	f854 7c08 	ldr.w	r7, [r4, #-8]
  4067ca:	1bed      	subs	r5, r5, r7
  4067cc:	f101 0e08 	add.w	lr, r1, #8
  4067d0:	68ac      	ldr	r4, [r5, #8]
  4067d2:	4574      	cmp	r4, lr
  4067d4:	443a      	add	r2, r7
  4067d6:	d067      	beq.n	4068a8 <_free_r+0x114>
  4067d8:	68ef      	ldr	r7, [r5, #12]
  4067da:	60e7      	str	r7, [r4, #12]
  4067dc:	60bc      	str	r4, [r7, #8]
  4067de:	181c      	adds	r4, r3, r0
  4067e0:	6864      	ldr	r4, [r4, #4]
  4067e2:	07e4      	lsls	r4, r4, #31
  4067e4:	d40c      	bmi.n	406800 <_free_r+0x6c>
  4067e6:	4f54      	ldr	r7, [pc, #336]	; (406938 <_free_r+0x1a4>)
  4067e8:	689c      	ldr	r4, [r3, #8]
  4067ea:	42bc      	cmp	r4, r7
  4067ec:	4402      	add	r2, r0
  4067ee:	d07c      	beq.n	4068ea <_free_r+0x156>
  4067f0:	68d8      	ldr	r0, [r3, #12]
  4067f2:	60e0      	str	r0, [r4, #12]
  4067f4:	f042 0301 	orr.w	r3, r2, #1
  4067f8:	6084      	str	r4, [r0, #8]
  4067fa:	606b      	str	r3, [r5, #4]
  4067fc:	50aa      	str	r2, [r5, r2]
  4067fe:	e003      	b.n	406808 <_free_r+0x74>
  406800:	f042 0301 	orr.w	r3, r2, #1
  406804:	606b      	str	r3, [r5, #4]
  406806:	50aa      	str	r2, [r5, r2]
  406808:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
  40680c:	d214      	bcs.n	406838 <_free_r+0xa4>
  40680e:	08d2      	lsrs	r2, r2, #3
  406810:	eb01 03c2 	add.w	r3, r1, r2, lsl #3
  406814:	6848      	ldr	r0, [r1, #4]
  406816:	689f      	ldr	r7, [r3, #8]
  406818:	60af      	str	r7, [r5, #8]
  40681a:	1092      	asrs	r2, r2, #2
  40681c:	2401      	movs	r4, #1
  40681e:	fa04 f202 	lsl.w	r2, r4, r2
  406822:	4310      	orrs	r0, r2
  406824:	60eb      	str	r3, [r5, #12]
  406826:	6048      	str	r0, [r1, #4]
  406828:	609d      	str	r5, [r3, #8]
  40682a:	60fd      	str	r5, [r7, #12]
  40682c:	4640      	mov	r0, r8
  40682e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  406832:	f000 bf69 	b.w	407708 <__malloc_unlock>
  406836:	4770      	bx	lr
  406838:	0a53      	lsrs	r3, r2, #9
  40683a:	2b04      	cmp	r3, #4
  40683c:	d847      	bhi.n	4068ce <_free_r+0x13a>
  40683e:	0993      	lsrs	r3, r2, #6
  406840:	f103 0438 	add.w	r4, r3, #56	; 0x38
  406844:	0060      	lsls	r0, r4, #1
  406846:	eb01 0080 	add.w	r0, r1, r0, lsl #2
  40684a:	493a      	ldr	r1, [pc, #232]	; (406934 <_free_r+0x1a0>)
  40684c:	6883      	ldr	r3, [r0, #8]
  40684e:	4283      	cmp	r3, r0
  406850:	d043      	beq.n	4068da <_free_r+0x146>
  406852:	6859      	ldr	r1, [r3, #4]
  406854:	f021 0103 	bic.w	r1, r1, #3
  406858:	4291      	cmp	r1, r2
  40685a:	d902      	bls.n	406862 <_free_r+0xce>
  40685c:	689b      	ldr	r3, [r3, #8]
  40685e:	4298      	cmp	r0, r3
  406860:	d1f7      	bne.n	406852 <_free_r+0xbe>
  406862:	68da      	ldr	r2, [r3, #12]
  406864:	60ea      	str	r2, [r5, #12]
  406866:	60ab      	str	r3, [r5, #8]
  406868:	4640      	mov	r0, r8
  40686a:	6095      	str	r5, [r2, #8]
  40686c:	60dd      	str	r5, [r3, #12]
  40686e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  406872:	f000 bf49 	b.w	407708 <__malloc_unlock>
  406876:	07ff      	lsls	r7, r7, #31
  406878:	4402      	add	r2, r0
  40687a:	d407      	bmi.n	40688c <_free_r+0xf8>
  40687c:	f854 3c08 	ldr.w	r3, [r4, #-8]
  406880:	1aed      	subs	r5, r5, r3
  406882:	441a      	add	r2, r3
  406884:	68a8      	ldr	r0, [r5, #8]
  406886:	68eb      	ldr	r3, [r5, #12]
  406888:	60c3      	str	r3, [r0, #12]
  40688a:	6098      	str	r0, [r3, #8]
  40688c:	4b2b      	ldr	r3, [pc, #172]	; (40693c <_free_r+0x1a8>)
  40688e:	681b      	ldr	r3, [r3, #0]
  406890:	f042 0001 	orr.w	r0, r2, #1
  406894:	429a      	cmp	r2, r3
  406896:	6068      	str	r0, [r5, #4]
  406898:	608d      	str	r5, [r1, #8]
  40689a:	d3c7      	bcc.n	40682c <_free_r+0x98>
  40689c:	4b28      	ldr	r3, [pc, #160]	; (406940 <_free_r+0x1ac>)
  40689e:	4640      	mov	r0, r8
  4068a0:	6819      	ldr	r1, [r3, #0]
  4068a2:	f7ff ff29 	bl	4066f8 <_malloc_trim_r>
  4068a6:	e7c1      	b.n	40682c <_free_r+0x98>
  4068a8:	1819      	adds	r1, r3, r0
  4068aa:	6849      	ldr	r1, [r1, #4]
  4068ac:	07c9      	lsls	r1, r1, #31
  4068ae:	d409      	bmi.n	4068c4 <_free_r+0x130>
  4068b0:	68d9      	ldr	r1, [r3, #12]
  4068b2:	689b      	ldr	r3, [r3, #8]
  4068b4:	4402      	add	r2, r0
  4068b6:	f042 0001 	orr.w	r0, r2, #1
  4068ba:	60d9      	str	r1, [r3, #12]
  4068bc:	608b      	str	r3, [r1, #8]
  4068be:	6068      	str	r0, [r5, #4]
  4068c0:	50aa      	str	r2, [r5, r2]
  4068c2:	e7b3      	b.n	40682c <_free_r+0x98>
  4068c4:	f042 0301 	orr.w	r3, r2, #1
  4068c8:	606b      	str	r3, [r5, #4]
  4068ca:	50aa      	str	r2, [r5, r2]
  4068cc:	e7ae      	b.n	40682c <_free_r+0x98>
  4068ce:	2b14      	cmp	r3, #20
  4068d0:	d814      	bhi.n	4068fc <_free_r+0x168>
  4068d2:	f103 045b 	add.w	r4, r3, #91	; 0x5b
  4068d6:	0060      	lsls	r0, r4, #1
  4068d8:	e7b5      	b.n	406846 <_free_r+0xb2>
  4068da:	684a      	ldr	r2, [r1, #4]
  4068dc:	10a4      	asrs	r4, r4, #2
  4068de:	2001      	movs	r0, #1
  4068e0:	40a0      	lsls	r0, r4
  4068e2:	4302      	orrs	r2, r0
  4068e4:	604a      	str	r2, [r1, #4]
  4068e6:	461a      	mov	r2, r3
  4068e8:	e7bc      	b.n	406864 <_free_r+0xd0>
  4068ea:	f042 0301 	orr.w	r3, r2, #1
  4068ee:	614d      	str	r5, [r1, #20]
  4068f0:	610d      	str	r5, [r1, #16]
  4068f2:	60ec      	str	r4, [r5, #12]
  4068f4:	60ac      	str	r4, [r5, #8]
  4068f6:	606b      	str	r3, [r5, #4]
  4068f8:	50aa      	str	r2, [r5, r2]
  4068fa:	e797      	b.n	40682c <_free_r+0x98>
  4068fc:	2b54      	cmp	r3, #84	; 0x54
  4068fe:	d804      	bhi.n	40690a <_free_r+0x176>
  406900:	0b13      	lsrs	r3, r2, #12
  406902:	f103 046e 	add.w	r4, r3, #110	; 0x6e
  406906:	0060      	lsls	r0, r4, #1
  406908:	e79d      	b.n	406846 <_free_r+0xb2>
  40690a:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
  40690e:	d804      	bhi.n	40691a <_free_r+0x186>
  406910:	0bd3      	lsrs	r3, r2, #15
  406912:	f103 0477 	add.w	r4, r3, #119	; 0x77
  406916:	0060      	lsls	r0, r4, #1
  406918:	e795      	b.n	406846 <_free_r+0xb2>
  40691a:	f240 5054 	movw	r0, #1364	; 0x554
  40691e:	4283      	cmp	r3, r0
  406920:	d804      	bhi.n	40692c <_free_r+0x198>
  406922:	0c93      	lsrs	r3, r2, #18
  406924:	f103 047c 	add.w	r4, r3, #124	; 0x7c
  406928:	0060      	lsls	r0, r4, #1
  40692a:	e78c      	b.n	406846 <_free_r+0xb2>
  40692c:	20fc      	movs	r0, #252	; 0xfc
  40692e:	247e      	movs	r4, #126	; 0x7e
  406930:	e789      	b.n	406846 <_free_r+0xb2>
  406932:	bf00      	nop
  406934:	20000444 	.word	0x20000444
  406938:	2000044c 	.word	0x2000044c
  40693c:	2000084c 	.word	0x2000084c
  406940:	20000d2c 	.word	0x20000d2c

00406944 <_fstat_r>:
  406944:	b538      	push	{r3, r4, r5, lr}
  406946:	4c08      	ldr	r4, [pc, #32]	; (406968 <_fstat_r+0x24>)
  406948:	2300      	movs	r3, #0
  40694a:	4605      	mov	r5, r0
  40694c:	4608      	mov	r0, r1
  40694e:	4611      	mov	r1, r2
  406950:	6023      	str	r3, [r4, #0]
  406952:	f7fa fd45 	bl	4013e0 <_fstat>
  406956:	1c43      	adds	r3, r0, #1
  406958:	d000      	beq.n	40695c <_fstat_r+0x18>
  40695a:	bd38      	pop	{r3, r4, r5, pc}
  40695c:	6823      	ldr	r3, [r4, #0]
  40695e:	2b00      	cmp	r3, #0
  406960:	d0fb      	beq.n	40695a <_fstat_r+0x16>
  406962:	602b      	str	r3, [r5, #0]
  406964:	bd38      	pop	{r3, r4, r5, pc}
  406966:	bf00      	nop
  406968:	20000d6c 	.word	0x20000d6c

0040696c <__sfvwrite_r>:
  40696c:	6893      	ldr	r3, [r2, #8]
  40696e:	2b00      	cmp	r3, #0
  406970:	d07a      	beq.n	406a68 <__sfvwrite_r+0xfc>
  406972:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  406976:	f8b1 e00c 	ldrh.w	lr, [r1, #12]
  40697a:	f01e 0f08 	tst.w	lr, #8
  40697e:	b083      	sub	sp, #12
  406980:	460c      	mov	r4, r1
  406982:	4681      	mov	r9, r0
  406984:	4616      	mov	r6, r2
  406986:	d026      	beq.n	4069d6 <__sfvwrite_r+0x6a>
  406988:	690b      	ldr	r3, [r1, #16]
  40698a:	b323      	cbz	r3, 4069d6 <__sfvwrite_r+0x6a>
  40698c:	f00e 0802 	and.w	r8, lr, #2
  406990:	fa1f f088 	uxth.w	r0, r8
  406994:	6835      	ldr	r5, [r6, #0]
  406996:	b370      	cbz	r0, 4069f6 <__sfvwrite_r+0x8a>
  406998:	f04f 0a00 	mov.w	sl, #0
  40699c:	f8df b2e0 	ldr.w	fp, [pc, #736]	; 406c80 <__sfvwrite_r+0x314>
  4069a0:	46d0      	mov	r8, sl
  4069a2:	45d8      	cmp	r8, fp
  4069a4:	4643      	mov	r3, r8
  4069a6:	4652      	mov	r2, sl
  4069a8:	bf28      	it	cs
  4069aa:	465b      	movcs	r3, fp
  4069ac:	4648      	mov	r0, r9
  4069ae:	f1b8 0f00 	cmp.w	r8, #0
  4069b2:	d053      	beq.n	406a5c <__sfvwrite_r+0xf0>
  4069b4:	69e1      	ldr	r1, [r4, #28]
  4069b6:	6a67      	ldr	r7, [r4, #36]	; 0x24
  4069b8:	47b8      	blx	r7
  4069ba:	2800      	cmp	r0, #0
  4069bc:	dd73      	ble.n	406aa6 <__sfvwrite_r+0x13a>
  4069be:	68b3      	ldr	r3, [r6, #8]
  4069c0:	1a1b      	subs	r3, r3, r0
  4069c2:	4482      	add	sl, r0
  4069c4:	ebc0 0808 	rsb	r8, r0, r8
  4069c8:	60b3      	str	r3, [r6, #8]
  4069ca:	2b00      	cmp	r3, #0
  4069cc:	d1e9      	bne.n	4069a2 <__sfvwrite_r+0x36>
  4069ce:	2000      	movs	r0, #0
  4069d0:	b003      	add	sp, #12
  4069d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4069d6:	4648      	mov	r0, r9
  4069d8:	4621      	mov	r1, r4
  4069da:	f004 fcd3 	bl	40b384 <__swsetup_r>
  4069de:	2800      	cmp	r0, #0
  4069e0:	f040 8145 	bne.w	406c6e <__sfvwrite_r+0x302>
  4069e4:	f8b4 e00c 	ldrh.w	lr, [r4, #12]
  4069e8:	6835      	ldr	r5, [r6, #0]
  4069ea:	f00e 0802 	and.w	r8, lr, #2
  4069ee:	fa1f f088 	uxth.w	r0, r8
  4069f2:	2800      	cmp	r0, #0
  4069f4:	d1d0      	bne.n	406998 <__sfvwrite_r+0x2c>
  4069f6:	f01e 0b01 	ands.w	fp, lr, #1
  4069fa:	d15d      	bne.n	406ab8 <__sfvwrite_r+0x14c>
  4069fc:	46d8      	mov	r8, fp
  4069fe:	f1b8 0f00 	cmp.w	r8, #0
  406a02:	d025      	beq.n	406a50 <__sfvwrite_r+0xe4>
  406a04:	f41e 7f00 	tst.w	lr, #512	; 0x200
  406a08:	68a7      	ldr	r7, [r4, #8]
  406a0a:	d02f      	beq.n	406a6c <__sfvwrite_r+0x100>
  406a0c:	45b8      	cmp	r8, r7
  406a0e:	46ba      	mov	sl, r7
  406a10:	f0c0 80a9 	bcc.w	406b66 <__sfvwrite_r+0x1fa>
  406a14:	f41e 6f90 	tst.w	lr, #1152	; 0x480
  406a18:	f040 80b6 	bne.w	406b88 <__sfvwrite_r+0x21c>
  406a1c:	6820      	ldr	r0, [r4, #0]
  406a1e:	4652      	mov	r2, sl
  406a20:	4659      	mov	r1, fp
  406a22:	f000 fdbd 	bl	4075a0 <memmove>
  406a26:	68a0      	ldr	r0, [r4, #8]
  406a28:	6822      	ldr	r2, [r4, #0]
  406a2a:	1bc0      	subs	r0, r0, r7
  406a2c:	eb02 030a 	add.w	r3, r2, sl
  406a30:	60a0      	str	r0, [r4, #8]
  406a32:	6023      	str	r3, [r4, #0]
  406a34:	4640      	mov	r0, r8
  406a36:	68b3      	ldr	r3, [r6, #8]
  406a38:	1a1b      	subs	r3, r3, r0
  406a3a:	4483      	add	fp, r0
  406a3c:	ebc0 0808 	rsb	r8, r0, r8
  406a40:	60b3      	str	r3, [r6, #8]
  406a42:	2b00      	cmp	r3, #0
  406a44:	d0c3      	beq.n	4069ce <__sfvwrite_r+0x62>
  406a46:	f8b4 e00c 	ldrh.w	lr, [r4, #12]
  406a4a:	f1b8 0f00 	cmp.w	r8, #0
  406a4e:	d1d9      	bne.n	406a04 <__sfvwrite_r+0x98>
  406a50:	f8d5 b000 	ldr.w	fp, [r5]
  406a54:	f8d5 8004 	ldr.w	r8, [r5, #4]
  406a58:	3508      	adds	r5, #8
  406a5a:	e7d0      	b.n	4069fe <__sfvwrite_r+0x92>
  406a5c:	f8d5 a000 	ldr.w	sl, [r5]
  406a60:	f8d5 8004 	ldr.w	r8, [r5, #4]
  406a64:	3508      	adds	r5, #8
  406a66:	e79c      	b.n	4069a2 <__sfvwrite_r+0x36>
  406a68:	2000      	movs	r0, #0
  406a6a:	4770      	bx	lr
  406a6c:	6820      	ldr	r0, [r4, #0]
  406a6e:	6923      	ldr	r3, [r4, #16]
  406a70:	4298      	cmp	r0, r3
  406a72:	d803      	bhi.n	406a7c <__sfvwrite_r+0x110>
  406a74:	6962      	ldr	r2, [r4, #20]
  406a76:	4590      	cmp	r8, r2
  406a78:	f080 80b9 	bcs.w	406bee <__sfvwrite_r+0x282>
  406a7c:	4547      	cmp	r7, r8
  406a7e:	bf28      	it	cs
  406a80:	4647      	movcs	r7, r8
  406a82:	463a      	mov	r2, r7
  406a84:	4659      	mov	r1, fp
  406a86:	f000 fd8b 	bl	4075a0 <memmove>
  406a8a:	68a3      	ldr	r3, [r4, #8]
  406a8c:	6822      	ldr	r2, [r4, #0]
  406a8e:	1bdb      	subs	r3, r3, r7
  406a90:	443a      	add	r2, r7
  406a92:	60a3      	str	r3, [r4, #8]
  406a94:	6022      	str	r2, [r4, #0]
  406a96:	2b00      	cmp	r3, #0
  406a98:	d14a      	bne.n	406b30 <__sfvwrite_r+0x1c4>
  406a9a:	4648      	mov	r0, r9
  406a9c:	4621      	mov	r1, r4
  406a9e:	f7ff fd65 	bl	40656c <_fflush_r>
  406aa2:	2800      	cmp	r0, #0
  406aa4:	d044      	beq.n	406b30 <__sfvwrite_r+0x1c4>
  406aa6:	89a3      	ldrh	r3, [r4, #12]
  406aa8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  406aac:	f04f 30ff 	mov.w	r0, #4294967295
  406ab0:	81a3      	strh	r3, [r4, #12]
  406ab2:	b003      	add	sp, #12
  406ab4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  406ab8:	4680      	mov	r8, r0
  406aba:	9000      	str	r0, [sp, #0]
  406abc:	4683      	mov	fp, r0
  406abe:	4682      	mov	sl, r0
  406ac0:	f1ba 0f00 	cmp.w	sl, #0
  406ac4:	d02c      	beq.n	406b20 <__sfvwrite_r+0x1b4>
  406ac6:	9b00      	ldr	r3, [sp, #0]
  406ac8:	2b00      	cmp	r3, #0
  406aca:	d050      	beq.n	406b6e <__sfvwrite_r+0x202>
  406acc:	6820      	ldr	r0, [r4, #0]
  406ace:	6921      	ldr	r1, [r4, #16]
  406ad0:	f8d4 e008 	ldr.w	lr, [r4, #8]
  406ad4:	6962      	ldr	r2, [r4, #20]
  406ad6:	45d0      	cmp	r8, sl
  406ad8:	4643      	mov	r3, r8
  406ada:	bf28      	it	cs
  406adc:	4653      	movcs	r3, sl
  406ade:	4288      	cmp	r0, r1
  406ae0:	461f      	mov	r7, r3
  406ae2:	d904      	bls.n	406aee <__sfvwrite_r+0x182>
  406ae4:	eb0e 0c02 	add.w	ip, lr, r2
  406ae8:	4563      	cmp	r3, ip
  406aea:	f300 8092 	bgt.w	406c12 <__sfvwrite_r+0x2a6>
  406aee:	4293      	cmp	r3, r2
  406af0:	db20      	blt.n	406b34 <__sfvwrite_r+0x1c8>
  406af2:	4613      	mov	r3, r2
  406af4:	6a67      	ldr	r7, [r4, #36]	; 0x24
  406af6:	69e1      	ldr	r1, [r4, #28]
  406af8:	4648      	mov	r0, r9
  406afa:	465a      	mov	r2, fp
  406afc:	47b8      	blx	r7
  406afe:	1e07      	subs	r7, r0, #0
  406b00:	ddd1      	ble.n	406aa6 <__sfvwrite_r+0x13a>
  406b02:	ebb8 0807 	subs.w	r8, r8, r7
  406b06:	d025      	beq.n	406b54 <__sfvwrite_r+0x1e8>
  406b08:	68b3      	ldr	r3, [r6, #8]
  406b0a:	1bdb      	subs	r3, r3, r7
  406b0c:	44bb      	add	fp, r7
  406b0e:	ebc7 0a0a 	rsb	sl, r7, sl
  406b12:	60b3      	str	r3, [r6, #8]
  406b14:	2b00      	cmp	r3, #0
  406b16:	f43f af5a 	beq.w	4069ce <__sfvwrite_r+0x62>
  406b1a:	f1ba 0f00 	cmp.w	sl, #0
  406b1e:	d1d2      	bne.n	406ac6 <__sfvwrite_r+0x15a>
  406b20:	2300      	movs	r3, #0
  406b22:	f8d5 b000 	ldr.w	fp, [r5]
  406b26:	f8d5 a004 	ldr.w	sl, [r5, #4]
  406b2a:	9300      	str	r3, [sp, #0]
  406b2c:	3508      	adds	r5, #8
  406b2e:	e7c7      	b.n	406ac0 <__sfvwrite_r+0x154>
  406b30:	4638      	mov	r0, r7
  406b32:	e780      	b.n	406a36 <__sfvwrite_r+0xca>
  406b34:	461a      	mov	r2, r3
  406b36:	4659      	mov	r1, fp
  406b38:	9301      	str	r3, [sp, #4]
  406b3a:	f000 fd31 	bl	4075a0 <memmove>
  406b3e:	68a2      	ldr	r2, [r4, #8]
  406b40:	6821      	ldr	r1, [r4, #0]
  406b42:	9b01      	ldr	r3, [sp, #4]
  406b44:	ebb8 0807 	subs.w	r8, r8, r7
  406b48:	eba2 0203 	sub.w	r2, r2, r3
  406b4c:	440b      	add	r3, r1
  406b4e:	60a2      	str	r2, [r4, #8]
  406b50:	6023      	str	r3, [r4, #0]
  406b52:	d1d9      	bne.n	406b08 <__sfvwrite_r+0x19c>
  406b54:	4648      	mov	r0, r9
  406b56:	4621      	mov	r1, r4
  406b58:	f7ff fd08 	bl	40656c <_fflush_r>
  406b5c:	2800      	cmp	r0, #0
  406b5e:	d1a2      	bne.n	406aa6 <__sfvwrite_r+0x13a>
  406b60:	f8cd 8000 	str.w	r8, [sp]
  406b64:	e7d0      	b.n	406b08 <__sfvwrite_r+0x19c>
  406b66:	6820      	ldr	r0, [r4, #0]
  406b68:	4647      	mov	r7, r8
  406b6a:	46c2      	mov	sl, r8
  406b6c:	e757      	b.n	406a1e <__sfvwrite_r+0xb2>
  406b6e:	4658      	mov	r0, fp
  406b70:	210a      	movs	r1, #10
  406b72:	4652      	mov	r2, sl
  406b74:	f000 fbfe 	bl	407374 <memchr>
  406b78:	2800      	cmp	r0, #0
  406b7a:	d073      	beq.n	406c64 <__sfvwrite_r+0x2f8>
  406b7c:	3001      	adds	r0, #1
  406b7e:	2301      	movs	r3, #1
  406b80:	ebcb 0800 	rsb	r8, fp, r0
  406b84:	9300      	str	r3, [sp, #0]
  406b86:	e7a1      	b.n	406acc <__sfvwrite_r+0x160>
  406b88:	6967      	ldr	r7, [r4, #20]
  406b8a:	6921      	ldr	r1, [r4, #16]
  406b8c:	6823      	ldr	r3, [r4, #0]
  406b8e:	eb07 0747 	add.w	r7, r7, r7, lsl #1
  406b92:	1a5b      	subs	r3, r3, r1
  406b94:	eb07 77d7 	add.w	r7, r7, r7, lsr #31
  406b98:	1c58      	adds	r0, r3, #1
  406b9a:	107f      	asrs	r7, r7, #1
  406b9c:	4440      	add	r0, r8
  406b9e:	4287      	cmp	r7, r0
  406ba0:	463a      	mov	r2, r7
  406ba2:	bf3c      	itt	cc
  406ba4:	4607      	movcc	r7, r0
  406ba6:	463a      	movcc	r2, r7
  406ba8:	f41e 6f80 	tst.w	lr, #1024	; 0x400
  406bac:	9300      	str	r3, [sp, #0]
  406bae:	d046      	beq.n	406c3e <__sfvwrite_r+0x2d2>
  406bb0:	4611      	mov	r1, r2
  406bb2:	4648      	mov	r0, r9
  406bb4:	f000 f94c 	bl	406e50 <_malloc_r>
  406bb8:	9b00      	ldr	r3, [sp, #0]
  406bba:	4682      	mov	sl, r0
  406bbc:	2800      	cmp	r0, #0
  406bbe:	d059      	beq.n	406c74 <__sfvwrite_r+0x308>
  406bc0:	461a      	mov	r2, r3
  406bc2:	6921      	ldr	r1, [r4, #16]
  406bc4:	9300      	str	r3, [sp, #0]
  406bc6:	f000 fc51 	bl	40746c <memcpy>
  406bca:	89a2      	ldrh	r2, [r4, #12]
  406bcc:	9b00      	ldr	r3, [sp, #0]
  406bce:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
  406bd2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
  406bd6:	81a2      	strh	r2, [r4, #12]
  406bd8:	eb0a 0003 	add.w	r0, sl, r3
  406bdc:	1afb      	subs	r3, r7, r3
  406bde:	f8c4 a010 	str.w	sl, [r4, #16]
  406be2:	6167      	str	r7, [r4, #20]
  406be4:	6020      	str	r0, [r4, #0]
  406be6:	60a3      	str	r3, [r4, #8]
  406be8:	4647      	mov	r7, r8
  406bea:	46c2      	mov	sl, r8
  406bec:	e717      	b.n	406a1e <__sfvwrite_r+0xb2>
  406bee:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
  406bf2:	4543      	cmp	r3, r8
  406bf4:	bf28      	it	cs
  406bf6:	4643      	movcs	r3, r8
  406bf8:	6a67      	ldr	r7, [r4, #36]	; 0x24
  406bfa:	fb93 f3f2 	sdiv	r3, r3, r2
  406bfe:	4648      	mov	r0, r9
  406c00:	fb03 f302 	mul.w	r3, r3, r2
  406c04:	69e1      	ldr	r1, [r4, #28]
  406c06:	465a      	mov	r2, fp
  406c08:	47b8      	blx	r7
  406c0a:	2800      	cmp	r0, #0
  406c0c:	f73f af13 	bgt.w	406a36 <__sfvwrite_r+0xca>
  406c10:	e749      	b.n	406aa6 <__sfvwrite_r+0x13a>
  406c12:	4662      	mov	r2, ip
  406c14:	4659      	mov	r1, fp
  406c16:	f8cd c004 	str.w	ip, [sp, #4]
  406c1a:	f000 fcc1 	bl	4075a0 <memmove>
  406c1e:	6823      	ldr	r3, [r4, #0]
  406c20:	f8dd c004 	ldr.w	ip, [sp, #4]
  406c24:	4463      	add	r3, ip
  406c26:	6023      	str	r3, [r4, #0]
  406c28:	4648      	mov	r0, r9
  406c2a:	4621      	mov	r1, r4
  406c2c:	f7ff fc9e 	bl	40656c <_fflush_r>
  406c30:	f8dd c004 	ldr.w	ip, [sp, #4]
  406c34:	2800      	cmp	r0, #0
  406c36:	f47f af36 	bne.w	406aa6 <__sfvwrite_r+0x13a>
  406c3a:	4667      	mov	r7, ip
  406c3c:	e761      	b.n	406b02 <__sfvwrite_r+0x196>
  406c3e:	4648      	mov	r0, r9
  406c40:	f000 fd6c 	bl	40771c <_realloc_r>
  406c44:	9b00      	ldr	r3, [sp, #0]
  406c46:	4682      	mov	sl, r0
  406c48:	2800      	cmp	r0, #0
  406c4a:	d1c5      	bne.n	406bd8 <__sfvwrite_r+0x26c>
  406c4c:	4648      	mov	r0, r9
  406c4e:	6921      	ldr	r1, [r4, #16]
  406c50:	f7ff fda0 	bl	406794 <_free_r>
  406c54:	89a3      	ldrh	r3, [r4, #12]
  406c56:	220c      	movs	r2, #12
  406c58:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  406c5c:	b29b      	uxth	r3, r3
  406c5e:	f8c9 2000 	str.w	r2, [r9]
  406c62:	e721      	b.n	406aa8 <__sfvwrite_r+0x13c>
  406c64:	2301      	movs	r3, #1
  406c66:	f10a 0801 	add.w	r8, sl, #1
  406c6a:	9300      	str	r3, [sp, #0]
  406c6c:	e72e      	b.n	406acc <__sfvwrite_r+0x160>
  406c6e:	f04f 30ff 	mov.w	r0, #4294967295
  406c72:	e6ad      	b.n	4069d0 <__sfvwrite_r+0x64>
  406c74:	230c      	movs	r3, #12
  406c76:	f8c9 3000 	str.w	r3, [r9]
  406c7a:	89a3      	ldrh	r3, [r4, #12]
  406c7c:	e714      	b.n	406aa8 <__sfvwrite_r+0x13c>
  406c7e:	bf00      	nop
  406c80:	7ffffc00 	.word	0x7ffffc00

00406c84 <_fwalk_reent>:
  406c84:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  406c88:	f510 7738 	adds.w	r7, r0, #736	; 0x2e0
  406c8c:	d01f      	beq.n	406cce <_fwalk_reent+0x4a>
  406c8e:	4688      	mov	r8, r1
  406c90:	4606      	mov	r6, r0
  406c92:	f04f 0900 	mov.w	r9, #0
  406c96:	687d      	ldr	r5, [r7, #4]
  406c98:	68bc      	ldr	r4, [r7, #8]
  406c9a:	3d01      	subs	r5, #1
  406c9c:	d411      	bmi.n	406cc2 <_fwalk_reent+0x3e>
  406c9e:	89a3      	ldrh	r3, [r4, #12]
  406ca0:	2b01      	cmp	r3, #1
  406ca2:	f105 35ff 	add.w	r5, r5, #4294967295
  406ca6:	d908      	bls.n	406cba <_fwalk_reent+0x36>
  406ca8:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
  406cac:	3301      	adds	r3, #1
  406cae:	4621      	mov	r1, r4
  406cb0:	4630      	mov	r0, r6
  406cb2:	d002      	beq.n	406cba <_fwalk_reent+0x36>
  406cb4:	47c0      	blx	r8
  406cb6:	ea49 0900 	orr.w	r9, r9, r0
  406cba:	1c6b      	adds	r3, r5, #1
  406cbc:	f104 0468 	add.w	r4, r4, #104	; 0x68
  406cc0:	d1ed      	bne.n	406c9e <_fwalk_reent+0x1a>
  406cc2:	683f      	ldr	r7, [r7, #0]
  406cc4:	2f00      	cmp	r7, #0
  406cc6:	d1e6      	bne.n	406c96 <_fwalk_reent+0x12>
  406cc8:	4648      	mov	r0, r9
  406cca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  406cce:	46b9      	mov	r9, r7
  406cd0:	4648      	mov	r0, r9
  406cd2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  406cd6:	bf00      	nop

00406cd8 <__libc_init_array>:
  406cd8:	b570      	push	{r4, r5, r6, lr}
  406cda:	4e0f      	ldr	r6, [pc, #60]	; (406d18 <__libc_init_array+0x40>)
  406cdc:	4d0f      	ldr	r5, [pc, #60]	; (406d1c <__libc_init_array+0x44>)
  406cde:	1b76      	subs	r6, r6, r5
  406ce0:	10b6      	asrs	r6, r6, #2
  406ce2:	bf18      	it	ne
  406ce4:	2400      	movne	r4, #0
  406ce6:	d005      	beq.n	406cf4 <__libc_init_array+0x1c>
  406ce8:	3401      	adds	r4, #1
  406cea:	f855 3b04 	ldr.w	r3, [r5], #4
  406cee:	4798      	blx	r3
  406cf0:	42a6      	cmp	r6, r4
  406cf2:	d1f9      	bne.n	406ce8 <__libc_init_array+0x10>
  406cf4:	4e0a      	ldr	r6, [pc, #40]	; (406d20 <__libc_init_array+0x48>)
  406cf6:	4d0b      	ldr	r5, [pc, #44]	; (406d24 <__libc_init_array+0x4c>)
  406cf8:	1b76      	subs	r6, r6, r5
  406cfa:	f009 f995 	bl	410028 <_init>
  406cfe:	10b6      	asrs	r6, r6, #2
  406d00:	bf18      	it	ne
  406d02:	2400      	movne	r4, #0
  406d04:	d006      	beq.n	406d14 <__libc_init_array+0x3c>
  406d06:	3401      	adds	r4, #1
  406d08:	f855 3b04 	ldr.w	r3, [r5], #4
  406d0c:	4798      	blx	r3
  406d0e:	42a6      	cmp	r6, r4
  406d10:	d1f9      	bne.n	406d06 <__libc_init_array+0x2e>
  406d12:	bd70      	pop	{r4, r5, r6, pc}
  406d14:	bd70      	pop	{r4, r5, r6, pc}
  406d16:	bf00      	nop
  406d18:	00410034 	.word	0x00410034
  406d1c:	00410034 	.word	0x00410034
  406d20:	0041003c 	.word	0x0041003c
  406d24:	00410034 	.word	0x00410034

00406d28 <iprintf>:
  406d28:	b40f      	push	{r0, r1, r2, r3}
  406d2a:	b500      	push	{lr}
  406d2c:	4907      	ldr	r1, [pc, #28]	; (406d4c <iprintf+0x24>)
  406d2e:	b083      	sub	sp, #12
  406d30:	ab04      	add	r3, sp, #16
  406d32:	6808      	ldr	r0, [r1, #0]
  406d34:	f853 2b04 	ldr.w	r2, [r3], #4
  406d38:	6881      	ldr	r1, [r0, #8]
  406d3a:	9301      	str	r3, [sp, #4]
  406d3c:	f002 fa46 	bl	4091cc <_vfiprintf_r>
  406d40:	b003      	add	sp, #12
  406d42:	f85d eb04 	ldr.w	lr, [sp], #4
  406d46:	b004      	add	sp, #16
  406d48:	4770      	bx	lr
  406d4a:	bf00      	nop
  406d4c:	20000440 	.word	0x20000440

00406d50 <__smakebuf_r>:
  406d50:	898b      	ldrh	r3, [r1, #12]
  406d52:	b29a      	uxth	r2, r3
  406d54:	f012 0f02 	tst.w	r2, #2
  406d58:	d13c      	bne.n	406dd4 <__smakebuf_r+0x84>
  406d5a:	b5f0      	push	{r4, r5, r6, r7, lr}
  406d5c:	460c      	mov	r4, r1
  406d5e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  406d62:	2900      	cmp	r1, #0
  406d64:	b091      	sub	sp, #68	; 0x44
  406d66:	4605      	mov	r5, r0
  406d68:	db19      	blt.n	406d9e <__smakebuf_r+0x4e>
  406d6a:	aa01      	add	r2, sp, #4
  406d6c:	f7ff fdea 	bl	406944 <_fstat_r>
  406d70:	2800      	cmp	r0, #0
  406d72:	db12      	blt.n	406d9a <__smakebuf_r+0x4a>
  406d74:	9b02      	ldr	r3, [sp, #8]
  406d76:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
  406d7a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
  406d7e:	f5a3 5700 	sub.w	r7, r3, #8192	; 0x2000
  406d82:	fab7 f787 	clz	r7, r7
  406d86:	ea4f 1757 	mov.w	r7, r7, lsr #5
  406d8a:	d02a      	beq.n	406de2 <__smakebuf_r+0x92>
  406d8c:	89a3      	ldrh	r3, [r4, #12]
  406d8e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
  406d92:	81a3      	strh	r3, [r4, #12]
  406d94:	f44f 6680 	mov.w	r6, #1024	; 0x400
  406d98:	e00b      	b.n	406db2 <__smakebuf_r+0x62>
  406d9a:	89a3      	ldrh	r3, [r4, #12]
  406d9c:	b29a      	uxth	r2, r3
  406d9e:	f012 0f80 	tst.w	r2, #128	; 0x80
  406da2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
  406da6:	81a3      	strh	r3, [r4, #12]
  406da8:	bf0c      	ite	eq
  406daa:	f44f 6680 	moveq.w	r6, #1024	; 0x400
  406dae:	2640      	movne	r6, #64	; 0x40
  406db0:	2700      	movs	r7, #0
  406db2:	4628      	mov	r0, r5
  406db4:	4631      	mov	r1, r6
  406db6:	f000 f84b 	bl	406e50 <_malloc_r>
  406dba:	89a3      	ldrh	r3, [r4, #12]
  406dbc:	b340      	cbz	r0, 406e10 <__smakebuf_r+0xc0>
  406dbe:	4a1a      	ldr	r2, [pc, #104]	; (406e28 <__smakebuf_r+0xd8>)
  406dc0:	63ea      	str	r2, [r5, #60]	; 0x3c
  406dc2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  406dc6:	81a3      	strh	r3, [r4, #12]
  406dc8:	6020      	str	r0, [r4, #0]
  406dca:	6120      	str	r0, [r4, #16]
  406dcc:	6166      	str	r6, [r4, #20]
  406dce:	b99f      	cbnz	r7, 406df8 <__smakebuf_r+0xa8>
  406dd0:	b011      	add	sp, #68	; 0x44
  406dd2:	bdf0      	pop	{r4, r5, r6, r7, pc}
  406dd4:	f101 0343 	add.w	r3, r1, #67	; 0x43
  406dd8:	2201      	movs	r2, #1
  406dda:	600b      	str	r3, [r1, #0]
  406ddc:	610b      	str	r3, [r1, #16]
  406dde:	614a      	str	r2, [r1, #20]
  406de0:	4770      	bx	lr
  406de2:	4b12      	ldr	r3, [pc, #72]	; (406e2c <__smakebuf_r+0xdc>)
  406de4:	6aa2      	ldr	r2, [r4, #40]	; 0x28
  406de6:	429a      	cmp	r2, r3
  406de8:	d1d0      	bne.n	406d8c <__smakebuf_r+0x3c>
  406dea:	89a3      	ldrh	r3, [r4, #12]
  406dec:	f44f 6680 	mov.w	r6, #1024	; 0x400
  406df0:	4333      	orrs	r3, r6
  406df2:	81a3      	strh	r3, [r4, #12]
  406df4:	64e6      	str	r6, [r4, #76]	; 0x4c
  406df6:	e7dc      	b.n	406db2 <__smakebuf_r+0x62>
  406df8:	4628      	mov	r0, r5
  406dfa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  406dfe:	f005 fbad 	bl	40c55c <_isatty_r>
  406e02:	2800      	cmp	r0, #0
  406e04:	d0e4      	beq.n	406dd0 <__smakebuf_r+0x80>
  406e06:	89a3      	ldrh	r3, [r4, #12]
  406e08:	f043 0301 	orr.w	r3, r3, #1
  406e0c:	81a3      	strh	r3, [r4, #12]
  406e0e:	e7df      	b.n	406dd0 <__smakebuf_r+0x80>
  406e10:	059a      	lsls	r2, r3, #22
  406e12:	d4dd      	bmi.n	406dd0 <__smakebuf_r+0x80>
  406e14:	f104 0243 	add.w	r2, r4, #67	; 0x43
  406e18:	f043 0302 	orr.w	r3, r3, #2
  406e1c:	2101      	movs	r1, #1
  406e1e:	81a3      	strh	r3, [r4, #12]
  406e20:	6022      	str	r2, [r4, #0]
  406e22:	6122      	str	r2, [r4, #16]
  406e24:	6161      	str	r1, [r4, #20]
  406e26:	e7d3      	b.n	406dd0 <__smakebuf_r+0x80>
  406e28:	00406599 	.word	0x00406599
  406e2c:	00407c25 	.word	0x00407c25

00406e30 <malloc>:
  406e30:	4b02      	ldr	r3, [pc, #8]	; (406e3c <malloc+0xc>)
  406e32:	4601      	mov	r1, r0
  406e34:	6818      	ldr	r0, [r3, #0]
  406e36:	f000 b80b 	b.w	406e50 <_malloc_r>
  406e3a:	bf00      	nop
  406e3c:	20000440 	.word	0x20000440

00406e40 <free>:
  406e40:	4b02      	ldr	r3, [pc, #8]	; (406e4c <free+0xc>)
  406e42:	4601      	mov	r1, r0
  406e44:	6818      	ldr	r0, [r3, #0]
  406e46:	f7ff bca5 	b.w	406794 <_free_r>
  406e4a:	bf00      	nop
  406e4c:	20000440 	.word	0x20000440

00406e50 <_malloc_r>:
  406e50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  406e54:	f101 050b 	add.w	r5, r1, #11
  406e58:	2d16      	cmp	r5, #22
  406e5a:	b083      	sub	sp, #12
  406e5c:	4606      	mov	r6, r0
  406e5e:	d927      	bls.n	406eb0 <_malloc_r+0x60>
  406e60:	f035 0507 	bics.w	r5, r5, #7
  406e64:	f100 80b6 	bmi.w	406fd4 <_malloc_r+0x184>
  406e68:	42a9      	cmp	r1, r5
  406e6a:	f200 80b3 	bhi.w	406fd4 <_malloc_r+0x184>
  406e6e:	f000 fc49 	bl	407704 <__malloc_lock>
  406e72:	f5b5 7ffc 	cmp.w	r5, #504	; 0x1f8
  406e76:	d222      	bcs.n	406ebe <_malloc_r+0x6e>
  406e78:	4fc2      	ldr	r7, [pc, #776]	; (407184 <_malloc_r+0x334>)
  406e7a:	08e8      	lsrs	r0, r5, #3
  406e7c:	eb07 03c0 	add.w	r3, r7, r0, lsl #3
  406e80:	68dc      	ldr	r4, [r3, #12]
  406e82:	429c      	cmp	r4, r3
  406e84:	f000 81c8 	beq.w	407218 <_malloc_r+0x3c8>
  406e88:	6863      	ldr	r3, [r4, #4]
  406e8a:	68e1      	ldr	r1, [r4, #12]
  406e8c:	68a5      	ldr	r5, [r4, #8]
  406e8e:	f023 0303 	bic.w	r3, r3, #3
  406e92:	4423      	add	r3, r4
  406e94:	4630      	mov	r0, r6
  406e96:	685a      	ldr	r2, [r3, #4]
  406e98:	60e9      	str	r1, [r5, #12]
  406e9a:	f042 0201 	orr.w	r2, r2, #1
  406e9e:	608d      	str	r5, [r1, #8]
  406ea0:	605a      	str	r2, [r3, #4]
  406ea2:	f000 fc31 	bl	407708 <__malloc_unlock>
  406ea6:	3408      	adds	r4, #8
  406ea8:	4620      	mov	r0, r4
  406eaa:	b003      	add	sp, #12
  406eac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  406eb0:	2910      	cmp	r1, #16
  406eb2:	f200 808f 	bhi.w	406fd4 <_malloc_r+0x184>
  406eb6:	f000 fc25 	bl	407704 <__malloc_lock>
  406eba:	2510      	movs	r5, #16
  406ebc:	e7dc      	b.n	406e78 <_malloc_r+0x28>
  406ebe:	0a68      	lsrs	r0, r5, #9
  406ec0:	f000 808f 	beq.w	406fe2 <_malloc_r+0x192>
  406ec4:	2804      	cmp	r0, #4
  406ec6:	f200 8154 	bhi.w	407172 <_malloc_r+0x322>
  406eca:	09a8      	lsrs	r0, r5, #6
  406ecc:	3038      	adds	r0, #56	; 0x38
  406ece:	0041      	lsls	r1, r0, #1
  406ed0:	4fac      	ldr	r7, [pc, #688]	; (407184 <_malloc_r+0x334>)
  406ed2:	eb07 0181 	add.w	r1, r7, r1, lsl #2
  406ed6:	68cc      	ldr	r4, [r1, #12]
  406ed8:	42a1      	cmp	r1, r4
  406eda:	d106      	bne.n	406eea <_malloc_r+0x9a>
  406edc:	e00c      	b.n	406ef8 <_malloc_r+0xa8>
  406ede:	2a00      	cmp	r2, #0
  406ee0:	f280 8082 	bge.w	406fe8 <_malloc_r+0x198>
  406ee4:	68e4      	ldr	r4, [r4, #12]
  406ee6:	42a1      	cmp	r1, r4
  406ee8:	d006      	beq.n	406ef8 <_malloc_r+0xa8>
  406eea:	6863      	ldr	r3, [r4, #4]
  406eec:	f023 0303 	bic.w	r3, r3, #3
  406ef0:	1b5a      	subs	r2, r3, r5
  406ef2:	2a0f      	cmp	r2, #15
  406ef4:	ddf3      	ble.n	406ede <_malloc_r+0x8e>
  406ef6:	3801      	subs	r0, #1
  406ef8:	3001      	adds	r0, #1
  406efa:	49a2      	ldr	r1, [pc, #648]	; (407184 <_malloc_r+0x334>)
  406efc:	693c      	ldr	r4, [r7, #16]
  406efe:	f101 0e08 	add.w	lr, r1, #8
  406f02:	4574      	cmp	r4, lr
  406f04:	f000 817d 	beq.w	407202 <_malloc_r+0x3b2>
  406f08:	6863      	ldr	r3, [r4, #4]
  406f0a:	f023 0303 	bic.w	r3, r3, #3
  406f0e:	1b5a      	subs	r2, r3, r5
  406f10:	2a0f      	cmp	r2, #15
  406f12:	f300 8163 	bgt.w	4071dc <_malloc_r+0x38c>
  406f16:	2a00      	cmp	r2, #0
  406f18:	f8c1 e014 	str.w	lr, [r1, #20]
  406f1c:	f8c1 e010 	str.w	lr, [r1, #16]
  406f20:	da73      	bge.n	40700a <_malloc_r+0x1ba>
  406f22:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  406f26:	f080 8139 	bcs.w	40719c <_malloc_r+0x34c>
  406f2a:	08db      	lsrs	r3, r3, #3
  406f2c:	eb01 08c3 	add.w	r8, r1, r3, lsl #3
  406f30:	ea4f 0ca3 	mov.w	ip, r3, asr #2
  406f34:	684a      	ldr	r2, [r1, #4]
  406f36:	f8d8 9008 	ldr.w	r9, [r8, #8]
  406f3a:	f8c4 9008 	str.w	r9, [r4, #8]
  406f3e:	2301      	movs	r3, #1
  406f40:	fa03 f30c 	lsl.w	r3, r3, ip
  406f44:	4313      	orrs	r3, r2
  406f46:	f8c4 800c 	str.w	r8, [r4, #12]
  406f4a:	604b      	str	r3, [r1, #4]
  406f4c:	f8c8 4008 	str.w	r4, [r8, #8]
  406f50:	f8c9 400c 	str.w	r4, [r9, #12]
  406f54:	1082      	asrs	r2, r0, #2
  406f56:	2401      	movs	r4, #1
  406f58:	4094      	lsls	r4, r2
  406f5a:	429c      	cmp	r4, r3
  406f5c:	d862      	bhi.n	407024 <_malloc_r+0x1d4>
  406f5e:	4223      	tst	r3, r4
  406f60:	d106      	bne.n	406f70 <_malloc_r+0x120>
  406f62:	f020 0003 	bic.w	r0, r0, #3
  406f66:	0064      	lsls	r4, r4, #1
  406f68:	4223      	tst	r3, r4
  406f6a:	f100 0004 	add.w	r0, r0, #4
  406f6e:	d0fa      	beq.n	406f66 <_malloc_r+0x116>
  406f70:	eb07 08c0 	add.w	r8, r7, r0, lsl #3
  406f74:	46c4      	mov	ip, r8
  406f76:	4681      	mov	r9, r0
  406f78:	f8dc 300c 	ldr.w	r3, [ip, #12]
  406f7c:	459c      	cmp	ip, r3
  406f7e:	d107      	bne.n	406f90 <_malloc_r+0x140>
  406f80:	e141      	b.n	407206 <_malloc_r+0x3b6>
  406f82:	2900      	cmp	r1, #0
  406f84:	f280 8151 	bge.w	40722a <_malloc_r+0x3da>
  406f88:	68db      	ldr	r3, [r3, #12]
  406f8a:	459c      	cmp	ip, r3
  406f8c:	f000 813b 	beq.w	407206 <_malloc_r+0x3b6>
  406f90:	685a      	ldr	r2, [r3, #4]
  406f92:	f022 0203 	bic.w	r2, r2, #3
  406f96:	1b51      	subs	r1, r2, r5
  406f98:	290f      	cmp	r1, #15
  406f9a:	ddf2      	ble.n	406f82 <_malloc_r+0x132>
  406f9c:	461c      	mov	r4, r3
  406f9e:	f8d3 c00c 	ldr.w	ip, [r3, #12]
  406fa2:	f854 8f08 	ldr.w	r8, [r4, #8]!
  406fa6:	195a      	adds	r2, r3, r5
  406fa8:	f045 0901 	orr.w	r9, r5, #1
  406fac:	f041 0501 	orr.w	r5, r1, #1
  406fb0:	f8c3 9004 	str.w	r9, [r3, #4]
  406fb4:	4630      	mov	r0, r6
  406fb6:	f8c8 c00c 	str.w	ip, [r8, #12]
  406fba:	f8cc 8008 	str.w	r8, [ip, #8]
  406fbe:	617a      	str	r2, [r7, #20]
  406fc0:	613a      	str	r2, [r7, #16]
  406fc2:	f8c2 e00c 	str.w	lr, [r2, #12]
  406fc6:	f8c2 e008 	str.w	lr, [r2, #8]
  406fca:	6055      	str	r5, [r2, #4]
  406fcc:	5051      	str	r1, [r2, r1]
  406fce:	f000 fb9b 	bl	407708 <__malloc_unlock>
  406fd2:	e769      	b.n	406ea8 <_malloc_r+0x58>
  406fd4:	2400      	movs	r4, #0
  406fd6:	230c      	movs	r3, #12
  406fd8:	4620      	mov	r0, r4
  406fda:	6033      	str	r3, [r6, #0]
  406fdc:	b003      	add	sp, #12
  406fde:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  406fe2:	217e      	movs	r1, #126	; 0x7e
  406fe4:	203f      	movs	r0, #63	; 0x3f
  406fe6:	e773      	b.n	406ed0 <_malloc_r+0x80>
  406fe8:	4423      	add	r3, r4
  406fea:	68e1      	ldr	r1, [r4, #12]
  406fec:	685a      	ldr	r2, [r3, #4]
  406fee:	68a5      	ldr	r5, [r4, #8]
  406ff0:	f042 0201 	orr.w	r2, r2, #1
  406ff4:	60e9      	str	r1, [r5, #12]
  406ff6:	4630      	mov	r0, r6
  406ff8:	608d      	str	r5, [r1, #8]
  406ffa:	605a      	str	r2, [r3, #4]
  406ffc:	f000 fb84 	bl	407708 <__malloc_unlock>
  407000:	3408      	adds	r4, #8
  407002:	4620      	mov	r0, r4
  407004:	b003      	add	sp, #12
  407006:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40700a:	4423      	add	r3, r4
  40700c:	4630      	mov	r0, r6
  40700e:	685a      	ldr	r2, [r3, #4]
  407010:	f042 0201 	orr.w	r2, r2, #1
  407014:	605a      	str	r2, [r3, #4]
  407016:	f000 fb77 	bl	407708 <__malloc_unlock>
  40701a:	3408      	adds	r4, #8
  40701c:	4620      	mov	r0, r4
  40701e:	b003      	add	sp, #12
  407020:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  407024:	68bc      	ldr	r4, [r7, #8]
  407026:	6863      	ldr	r3, [r4, #4]
  407028:	f023 0803 	bic.w	r8, r3, #3
  40702c:	4545      	cmp	r5, r8
  40702e:	d804      	bhi.n	40703a <_malloc_r+0x1ea>
  407030:	ebc5 0308 	rsb	r3, r5, r8
  407034:	2b0f      	cmp	r3, #15
  407036:	f300 808c 	bgt.w	407152 <_malloc_r+0x302>
  40703a:	4b53      	ldr	r3, [pc, #332]	; (407188 <_malloc_r+0x338>)
  40703c:	f8df a158 	ldr.w	sl, [pc, #344]	; 407198 <_malloc_r+0x348>
  407040:	681a      	ldr	r2, [r3, #0]
  407042:	f8da 3000 	ldr.w	r3, [sl]
  407046:	3301      	adds	r3, #1
  407048:	442a      	add	r2, r5
  40704a:	eb04 0b08 	add.w	fp, r4, r8
  40704e:	f000 8150 	beq.w	4072f2 <_malloc_r+0x4a2>
  407052:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
  407056:	320f      	adds	r2, #15
  407058:	f422 627f 	bic.w	r2, r2, #4080	; 0xff0
  40705c:	f022 020f 	bic.w	r2, r2, #15
  407060:	4611      	mov	r1, r2
  407062:	4630      	mov	r0, r6
  407064:	9201      	str	r2, [sp, #4]
  407066:	f000 fd4f 	bl	407b08 <_sbrk_r>
  40706a:	f1b0 3fff 	cmp.w	r0, #4294967295
  40706e:	4681      	mov	r9, r0
  407070:	9a01      	ldr	r2, [sp, #4]
  407072:	f000 8147 	beq.w	407304 <_malloc_r+0x4b4>
  407076:	4583      	cmp	fp, r0
  407078:	f200 80ee 	bhi.w	407258 <_malloc_r+0x408>
  40707c:	4b43      	ldr	r3, [pc, #268]	; (40718c <_malloc_r+0x33c>)
  40707e:	6819      	ldr	r1, [r3, #0]
  407080:	45cb      	cmp	fp, r9
  407082:	4411      	add	r1, r2
  407084:	6019      	str	r1, [r3, #0]
  407086:	f000 8142 	beq.w	40730e <_malloc_r+0x4be>
  40708a:	f8da 0000 	ldr.w	r0, [sl]
  40708e:	f8df e108 	ldr.w	lr, [pc, #264]	; 407198 <_malloc_r+0x348>
  407092:	3001      	adds	r0, #1
  407094:	bf1b      	ittet	ne
  407096:	ebcb 0b09 	rsbne	fp, fp, r9
  40709a:	4459      	addne	r1, fp
  40709c:	f8ce 9000 	streq.w	r9, [lr]
  4070a0:	6019      	strne	r1, [r3, #0]
  4070a2:	f019 0107 	ands.w	r1, r9, #7
  4070a6:	f000 8107 	beq.w	4072b8 <_malloc_r+0x468>
  4070aa:	f1c1 0008 	rsb	r0, r1, #8
  4070ae:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
  4070b2:	4481      	add	r9, r0
  4070b4:	3108      	adds	r1, #8
  4070b6:	444a      	add	r2, r9
  4070b8:	f3c2 020b 	ubfx	r2, r2, #0, #12
  4070bc:	ebc2 0a01 	rsb	sl, r2, r1
  4070c0:	4651      	mov	r1, sl
  4070c2:	4630      	mov	r0, r6
  4070c4:	9301      	str	r3, [sp, #4]
  4070c6:	f000 fd1f 	bl	407b08 <_sbrk_r>
  4070ca:	1c43      	adds	r3, r0, #1
  4070cc:	9b01      	ldr	r3, [sp, #4]
  4070ce:	f000 812c 	beq.w	40732a <_malloc_r+0x4da>
  4070d2:	ebc9 0200 	rsb	r2, r9, r0
  4070d6:	4452      	add	r2, sl
  4070d8:	f042 0201 	orr.w	r2, r2, #1
  4070dc:	6819      	ldr	r1, [r3, #0]
  4070de:	f8c7 9008 	str.w	r9, [r7, #8]
  4070e2:	4451      	add	r1, sl
  4070e4:	42bc      	cmp	r4, r7
  4070e6:	f8c9 2004 	str.w	r2, [r9, #4]
  4070ea:	6019      	str	r1, [r3, #0]
  4070ec:	f8df a09c 	ldr.w	sl, [pc, #156]	; 40718c <_malloc_r+0x33c>
  4070f0:	d016      	beq.n	407120 <_malloc_r+0x2d0>
  4070f2:	f1b8 0f0f 	cmp.w	r8, #15
  4070f6:	f240 80ee 	bls.w	4072d6 <_malloc_r+0x486>
  4070fa:	6862      	ldr	r2, [r4, #4]
  4070fc:	f1a8 030c 	sub.w	r3, r8, #12
  407100:	f023 0307 	bic.w	r3, r3, #7
  407104:	18e0      	adds	r0, r4, r3
  407106:	f002 0201 	and.w	r2, r2, #1
  40710a:	f04f 0e05 	mov.w	lr, #5
  40710e:	431a      	orrs	r2, r3
  407110:	2b0f      	cmp	r3, #15
  407112:	6062      	str	r2, [r4, #4]
  407114:	f8c0 e004 	str.w	lr, [r0, #4]
  407118:	f8c0 e008 	str.w	lr, [r0, #8]
  40711c:	f200 8109 	bhi.w	407332 <_malloc_r+0x4e2>
  407120:	4b1b      	ldr	r3, [pc, #108]	; (407190 <_malloc_r+0x340>)
  407122:	68bc      	ldr	r4, [r7, #8]
  407124:	681a      	ldr	r2, [r3, #0]
  407126:	4291      	cmp	r1, r2
  407128:	bf88      	it	hi
  40712a:	6019      	strhi	r1, [r3, #0]
  40712c:	4b19      	ldr	r3, [pc, #100]	; (407194 <_malloc_r+0x344>)
  40712e:	681a      	ldr	r2, [r3, #0]
  407130:	4291      	cmp	r1, r2
  407132:	6862      	ldr	r2, [r4, #4]
  407134:	bf88      	it	hi
  407136:	6019      	strhi	r1, [r3, #0]
  407138:	f022 0203 	bic.w	r2, r2, #3
  40713c:	4295      	cmp	r5, r2
  40713e:	eba2 0305 	sub.w	r3, r2, r5
  407142:	d801      	bhi.n	407148 <_malloc_r+0x2f8>
  407144:	2b0f      	cmp	r3, #15
  407146:	dc04      	bgt.n	407152 <_malloc_r+0x302>
  407148:	4630      	mov	r0, r6
  40714a:	f000 fadd 	bl	407708 <__malloc_unlock>
  40714e:	2400      	movs	r4, #0
  407150:	e6aa      	b.n	406ea8 <_malloc_r+0x58>
  407152:	1962      	adds	r2, r4, r5
  407154:	f043 0301 	orr.w	r3, r3, #1
  407158:	f045 0501 	orr.w	r5, r5, #1
  40715c:	6065      	str	r5, [r4, #4]
  40715e:	4630      	mov	r0, r6
  407160:	60ba      	str	r2, [r7, #8]
  407162:	6053      	str	r3, [r2, #4]
  407164:	f000 fad0 	bl	407708 <__malloc_unlock>
  407168:	3408      	adds	r4, #8
  40716a:	4620      	mov	r0, r4
  40716c:	b003      	add	sp, #12
  40716e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  407172:	2814      	cmp	r0, #20
  407174:	d968      	bls.n	407248 <_malloc_r+0x3f8>
  407176:	2854      	cmp	r0, #84	; 0x54
  407178:	f200 8097 	bhi.w	4072aa <_malloc_r+0x45a>
  40717c:	0b28      	lsrs	r0, r5, #12
  40717e:	306e      	adds	r0, #110	; 0x6e
  407180:	0041      	lsls	r1, r0, #1
  407182:	e6a5      	b.n	406ed0 <_malloc_r+0x80>
  407184:	20000444 	.word	0x20000444
  407188:	20000d2c 	.word	0x20000d2c
  40718c:	20000d30 	.word	0x20000d30
  407190:	20000d28 	.word	0x20000d28
  407194:	20000d24 	.word	0x20000d24
  407198:	20000850 	.word	0x20000850
  40719c:	0a5a      	lsrs	r2, r3, #9
  40719e:	2a04      	cmp	r2, #4
  4071a0:	d955      	bls.n	40724e <_malloc_r+0x3fe>
  4071a2:	2a14      	cmp	r2, #20
  4071a4:	f200 80a7 	bhi.w	4072f6 <_malloc_r+0x4a6>
  4071a8:	325b      	adds	r2, #91	; 0x5b
  4071aa:	ea4f 0c42 	mov.w	ip, r2, lsl #1
  4071ae:	eb07 0c8c 	add.w	ip, r7, ip, lsl #2
  4071b2:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 407370 <_malloc_r+0x520>
  4071b6:	f8dc 1008 	ldr.w	r1, [ip, #8]
  4071ba:	4561      	cmp	r1, ip
  4071bc:	d07f      	beq.n	4072be <_malloc_r+0x46e>
  4071be:	684a      	ldr	r2, [r1, #4]
  4071c0:	f022 0203 	bic.w	r2, r2, #3
  4071c4:	4293      	cmp	r3, r2
  4071c6:	d202      	bcs.n	4071ce <_malloc_r+0x37e>
  4071c8:	6889      	ldr	r1, [r1, #8]
  4071ca:	458c      	cmp	ip, r1
  4071cc:	d1f7      	bne.n	4071be <_malloc_r+0x36e>
  4071ce:	68ca      	ldr	r2, [r1, #12]
  4071d0:	687b      	ldr	r3, [r7, #4]
  4071d2:	60e2      	str	r2, [r4, #12]
  4071d4:	60a1      	str	r1, [r4, #8]
  4071d6:	6094      	str	r4, [r2, #8]
  4071d8:	60cc      	str	r4, [r1, #12]
  4071da:	e6bb      	b.n	406f54 <_malloc_r+0x104>
  4071dc:	1963      	adds	r3, r4, r5
  4071de:	f042 0701 	orr.w	r7, r2, #1
  4071e2:	f045 0501 	orr.w	r5, r5, #1
  4071e6:	6065      	str	r5, [r4, #4]
  4071e8:	4630      	mov	r0, r6
  4071ea:	614b      	str	r3, [r1, #20]
  4071ec:	610b      	str	r3, [r1, #16]
  4071ee:	f8c3 e00c 	str.w	lr, [r3, #12]
  4071f2:	f8c3 e008 	str.w	lr, [r3, #8]
  4071f6:	605f      	str	r7, [r3, #4]
  4071f8:	509a      	str	r2, [r3, r2]
  4071fa:	3408      	adds	r4, #8
  4071fc:	f000 fa84 	bl	407708 <__malloc_unlock>
  407200:	e652      	b.n	406ea8 <_malloc_r+0x58>
  407202:	684b      	ldr	r3, [r1, #4]
  407204:	e6a6      	b.n	406f54 <_malloc_r+0x104>
  407206:	f109 0901 	add.w	r9, r9, #1
  40720a:	f019 0f03 	tst.w	r9, #3
  40720e:	f10c 0c08 	add.w	ip, ip, #8
  407212:	f47f aeb1 	bne.w	406f78 <_malloc_r+0x128>
  407216:	e02c      	b.n	407272 <_malloc_r+0x422>
  407218:	f104 0308 	add.w	r3, r4, #8
  40721c:	6964      	ldr	r4, [r4, #20]
  40721e:	42a3      	cmp	r3, r4
  407220:	bf08      	it	eq
  407222:	3002      	addeq	r0, #2
  407224:	f43f ae69 	beq.w	406efa <_malloc_r+0xaa>
  407228:	e62e      	b.n	406e88 <_malloc_r+0x38>
  40722a:	441a      	add	r2, r3
  40722c:	461c      	mov	r4, r3
  40722e:	6851      	ldr	r1, [r2, #4]
  407230:	68db      	ldr	r3, [r3, #12]
  407232:	f854 5f08 	ldr.w	r5, [r4, #8]!
  407236:	f041 0101 	orr.w	r1, r1, #1
  40723a:	6051      	str	r1, [r2, #4]
  40723c:	4630      	mov	r0, r6
  40723e:	60eb      	str	r3, [r5, #12]
  407240:	609d      	str	r5, [r3, #8]
  407242:	f000 fa61 	bl	407708 <__malloc_unlock>
  407246:	e62f      	b.n	406ea8 <_malloc_r+0x58>
  407248:	305b      	adds	r0, #91	; 0x5b
  40724a:	0041      	lsls	r1, r0, #1
  40724c:	e640      	b.n	406ed0 <_malloc_r+0x80>
  40724e:	099a      	lsrs	r2, r3, #6
  407250:	3238      	adds	r2, #56	; 0x38
  407252:	ea4f 0c42 	mov.w	ip, r2, lsl #1
  407256:	e7aa      	b.n	4071ae <_malloc_r+0x35e>
  407258:	42bc      	cmp	r4, r7
  40725a:	4b45      	ldr	r3, [pc, #276]	; (407370 <_malloc_r+0x520>)
  40725c:	f43f af0e 	beq.w	40707c <_malloc_r+0x22c>
  407260:	689c      	ldr	r4, [r3, #8]
  407262:	6862      	ldr	r2, [r4, #4]
  407264:	f022 0203 	bic.w	r2, r2, #3
  407268:	e768      	b.n	40713c <_malloc_r+0x2ec>
  40726a:	f8d8 8000 	ldr.w	r8, [r8]
  40726e:	4598      	cmp	r8, r3
  407270:	d17c      	bne.n	40736c <_malloc_r+0x51c>
  407272:	f010 0f03 	tst.w	r0, #3
  407276:	f1a8 0308 	sub.w	r3, r8, #8
  40727a:	f100 30ff 	add.w	r0, r0, #4294967295
  40727e:	d1f4      	bne.n	40726a <_malloc_r+0x41a>
  407280:	687b      	ldr	r3, [r7, #4]
  407282:	ea23 0304 	bic.w	r3, r3, r4
  407286:	607b      	str	r3, [r7, #4]
  407288:	0064      	lsls	r4, r4, #1
  40728a:	429c      	cmp	r4, r3
  40728c:	f63f aeca 	bhi.w	407024 <_malloc_r+0x1d4>
  407290:	2c00      	cmp	r4, #0
  407292:	f43f aec7 	beq.w	407024 <_malloc_r+0x1d4>
  407296:	4223      	tst	r3, r4
  407298:	4648      	mov	r0, r9
  40729a:	f47f ae69 	bne.w	406f70 <_malloc_r+0x120>
  40729e:	0064      	lsls	r4, r4, #1
  4072a0:	4223      	tst	r3, r4
  4072a2:	f100 0004 	add.w	r0, r0, #4
  4072a6:	d0fa      	beq.n	40729e <_malloc_r+0x44e>
  4072a8:	e662      	b.n	406f70 <_malloc_r+0x120>
  4072aa:	f5b0 7faa 	cmp.w	r0, #340	; 0x154
  4072ae:	d818      	bhi.n	4072e2 <_malloc_r+0x492>
  4072b0:	0be8      	lsrs	r0, r5, #15
  4072b2:	3077      	adds	r0, #119	; 0x77
  4072b4:	0041      	lsls	r1, r0, #1
  4072b6:	e60b      	b.n	406ed0 <_malloc_r+0x80>
  4072b8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  4072bc:	e6fb      	b.n	4070b6 <_malloc_r+0x266>
  4072be:	f8d8 3004 	ldr.w	r3, [r8, #4]
  4072c2:	1092      	asrs	r2, r2, #2
  4072c4:	f04f 0c01 	mov.w	ip, #1
  4072c8:	fa0c f202 	lsl.w	r2, ip, r2
  4072cc:	4313      	orrs	r3, r2
  4072ce:	f8c8 3004 	str.w	r3, [r8, #4]
  4072d2:	460a      	mov	r2, r1
  4072d4:	e77d      	b.n	4071d2 <_malloc_r+0x382>
  4072d6:	2301      	movs	r3, #1
  4072d8:	f8c9 3004 	str.w	r3, [r9, #4]
  4072dc:	464c      	mov	r4, r9
  4072de:	2200      	movs	r2, #0
  4072e0:	e72c      	b.n	40713c <_malloc_r+0x2ec>
  4072e2:	f240 5354 	movw	r3, #1364	; 0x554
  4072e6:	4298      	cmp	r0, r3
  4072e8:	d81c      	bhi.n	407324 <_malloc_r+0x4d4>
  4072ea:	0ca8      	lsrs	r0, r5, #18
  4072ec:	307c      	adds	r0, #124	; 0x7c
  4072ee:	0041      	lsls	r1, r0, #1
  4072f0:	e5ee      	b.n	406ed0 <_malloc_r+0x80>
  4072f2:	3210      	adds	r2, #16
  4072f4:	e6b4      	b.n	407060 <_malloc_r+0x210>
  4072f6:	2a54      	cmp	r2, #84	; 0x54
  4072f8:	d823      	bhi.n	407342 <_malloc_r+0x4f2>
  4072fa:	0b1a      	lsrs	r2, r3, #12
  4072fc:	326e      	adds	r2, #110	; 0x6e
  4072fe:	ea4f 0c42 	mov.w	ip, r2, lsl #1
  407302:	e754      	b.n	4071ae <_malloc_r+0x35e>
  407304:	68bc      	ldr	r4, [r7, #8]
  407306:	6862      	ldr	r2, [r4, #4]
  407308:	f022 0203 	bic.w	r2, r2, #3
  40730c:	e716      	b.n	40713c <_malloc_r+0x2ec>
  40730e:	f3cb 000b 	ubfx	r0, fp, #0, #12
  407312:	2800      	cmp	r0, #0
  407314:	f47f aeb9 	bne.w	40708a <_malloc_r+0x23a>
  407318:	4442      	add	r2, r8
  40731a:	68bb      	ldr	r3, [r7, #8]
  40731c:	f042 0201 	orr.w	r2, r2, #1
  407320:	605a      	str	r2, [r3, #4]
  407322:	e6fd      	b.n	407120 <_malloc_r+0x2d0>
  407324:	21fc      	movs	r1, #252	; 0xfc
  407326:	207e      	movs	r0, #126	; 0x7e
  407328:	e5d2      	b.n	406ed0 <_malloc_r+0x80>
  40732a:	2201      	movs	r2, #1
  40732c:	f04f 0a00 	mov.w	sl, #0
  407330:	e6d4      	b.n	4070dc <_malloc_r+0x28c>
  407332:	f104 0108 	add.w	r1, r4, #8
  407336:	4630      	mov	r0, r6
  407338:	f7ff fa2c 	bl	406794 <_free_r>
  40733c:	f8da 1000 	ldr.w	r1, [sl]
  407340:	e6ee      	b.n	407120 <_malloc_r+0x2d0>
  407342:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  407346:	d804      	bhi.n	407352 <_malloc_r+0x502>
  407348:	0bda      	lsrs	r2, r3, #15
  40734a:	3277      	adds	r2, #119	; 0x77
  40734c:	ea4f 0c42 	mov.w	ip, r2, lsl #1
  407350:	e72d      	b.n	4071ae <_malloc_r+0x35e>
  407352:	f240 5154 	movw	r1, #1364	; 0x554
  407356:	428a      	cmp	r2, r1
  407358:	d804      	bhi.n	407364 <_malloc_r+0x514>
  40735a:	0c9a      	lsrs	r2, r3, #18
  40735c:	327c      	adds	r2, #124	; 0x7c
  40735e:	ea4f 0c42 	mov.w	ip, r2, lsl #1
  407362:	e724      	b.n	4071ae <_malloc_r+0x35e>
  407364:	f04f 0cfc 	mov.w	ip, #252	; 0xfc
  407368:	227e      	movs	r2, #126	; 0x7e
  40736a:	e720      	b.n	4071ae <_malloc_r+0x35e>
  40736c:	687b      	ldr	r3, [r7, #4]
  40736e:	e78b      	b.n	407288 <_malloc_r+0x438>
  407370:	20000444 	.word	0x20000444

00407374 <memchr>:
  407374:	0783      	lsls	r3, r0, #30
  407376:	b470      	push	{r4, r5, r6}
  407378:	b2c9      	uxtb	r1, r1
  40737a:	d040      	beq.n	4073fe <memchr+0x8a>
  40737c:	1e54      	subs	r4, r2, #1
  40737e:	2a00      	cmp	r2, #0
  407380:	d03f      	beq.n	407402 <memchr+0x8e>
  407382:	7803      	ldrb	r3, [r0, #0]
  407384:	428b      	cmp	r3, r1
  407386:	bf18      	it	ne
  407388:	1c43      	addne	r3, r0, #1
  40738a:	d106      	bne.n	40739a <memchr+0x26>
  40738c:	e01d      	b.n	4073ca <memchr+0x56>
  40738e:	b1f4      	cbz	r4, 4073ce <memchr+0x5a>
  407390:	7802      	ldrb	r2, [r0, #0]
  407392:	428a      	cmp	r2, r1
  407394:	f104 34ff 	add.w	r4, r4, #4294967295
  407398:	d017      	beq.n	4073ca <memchr+0x56>
  40739a:	f013 0f03 	tst.w	r3, #3
  40739e:	4618      	mov	r0, r3
  4073a0:	f103 0301 	add.w	r3, r3, #1
  4073a4:	d1f3      	bne.n	40738e <memchr+0x1a>
  4073a6:	2c03      	cmp	r4, #3
  4073a8:	d814      	bhi.n	4073d4 <memchr+0x60>
  4073aa:	b184      	cbz	r4, 4073ce <memchr+0x5a>
  4073ac:	7803      	ldrb	r3, [r0, #0]
  4073ae:	428b      	cmp	r3, r1
  4073b0:	d00b      	beq.n	4073ca <memchr+0x56>
  4073b2:	1905      	adds	r5, r0, r4
  4073b4:	1c43      	adds	r3, r0, #1
  4073b6:	e002      	b.n	4073be <memchr+0x4a>
  4073b8:	7802      	ldrb	r2, [r0, #0]
  4073ba:	428a      	cmp	r2, r1
  4073bc:	d005      	beq.n	4073ca <memchr+0x56>
  4073be:	42ab      	cmp	r3, r5
  4073c0:	4618      	mov	r0, r3
  4073c2:	f103 0301 	add.w	r3, r3, #1
  4073c6:	d1f7      	bne.n	4073b8 <memchr+0x44>
  4073c8:	2000      	movs	r0, #0
  4073ca:	bc70      	pop	{r4, r5, r6}
  4073cc:	4770      	bx	lr
  4073ce:	4620      	mov	r0, r4
  4073d0:	bc70      	pop	{r4, r5, r6}
  4073d2:	4770      	bx	lr
  4073d4:	ea41 2601 	orr.w	r6, r1, r1, lsl #8
  4073d8:	4602      	mov	r2, r0
  4073da:	ea46 4606 	orr.w	r6, r6, r6, lsl #16
  4073de:	4610      	mov	r0, r2
  4073e0:	3204      	adds	r2, #4
  4073e2:	6803      	ldr	r3, [r0, #0]
  4073e4:	4073      	eors	r3, r6
  4073e6:	f1a3 3501 	sub.w	r5, r3, #16843009	; 0x1010101
  4073ea:	ea25 0303 	bic.w	r3, r5, r3
  4073ee:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
  4073f2:	d1da      	bne.n	4073aa <memchr+0x36>
  4073f4:	3c04      	subs	r4, #4
  4073f6:	2c03      	cmp	r4, #3
  4073f8:	4610      	mov	r0, r2
  4073fa:	d8f0      	bhi.n	4073de <memchr+0x6a>
  4073fc:	e7d5      	b.n	4073aa <memchr+0x36>
  4073fe:	4614      	mov	r4, r2
  407400:	e7d1      	b.n	4073a6 <memchr+0x32>
  407402:	4610      	mov	r0, r2
  407404:	e7e1      	b.n	4073ca <memchr+0x56>
  407406:	bf00      	nop

00407408 <memcmp>:
  407408:	2a03      	cmp	r2, #3
  40740a:	b470      	push	{r4, r5, r6}
  40740c:	d926      	bls.n	40745c <memcmp+0x54>
  40740e:	ea40 0301 	orr.w	r3, r0, r1
  407412:	079b      	lsls	r3, r3, #30
  407414:	d011      	beq.n	40743a <memcmp+0x32>
  407416:	7804      	ldrb	r4, [r0, #0]
  407418:	780d      	ldrb	r5, [r1, #0]
  40741a:	42ac      	cmp	r4, r5
  40741c:	d122      	bne.n	407464 <memcmp+0x5c>
  40741e:	4402      	add	r2, r0
  407420:	1c43      	adds	r3, r0, #1
  407422:	e005      	b.n	407430 <memcmp+0x28>
  407424:	f813 4b01 	ldrb.w	r4, [r3], #1
  407428:	f811 5f01 	ldrb.w	r5, [r1, #1]!
  40742c:	42ac      	cmp	r4, r5
  40742e:	d119      	bne.n	407464 <memcmp+0x5c>
  407430:	4293      	cmp	r3, r2
  407432:	d1f7      	bne.n	407424 <memcmp+0x1c>
  407434:	2000      	movs	r0, #0
  407436:	bc70      	pop	{r4, r5, r6}
  407438:	4770      	bx	lr
  40743a:	460c      	mov	r4, r1
  40743c:	4603      	mov	r3, r0
  40743e:	681e      	ldr	r6, [r3, #0]
  407440:	6825      	ldr	r5, [r4, #0]
  407442:	42ae      	cmp	r6, r5
  407444:	4618      	mov	r0, r3
  407446:	4621      	mov	r1, r4
  407448:	f103 0304 	add.w	r3, r3, #4
  40744c:	f104 0404 	add.w	r4, r4, #4
  407450:	d104      	bne.n	40745c <memcmp+0x54>
  407452:	3a04      	subs	r2, #4
  407454:	2a03      	cmp	r2, #3
  407456:	4618      	mov	r0, r3
  407458:	4621      	mov	r1, r4
  40745a:	d8f0      	bhi.n	40743e <memcmp+0x36>
  40745c:	2a00      	cmp	r2, #0
  40745e:	d1da      	bne.n	407416 <memcmp+0xe>
  407460:	4610      	mov	r0, r2
  407462:	e7e8      	b.n	407436 <memcmp+0x2e>
  407464:	1b60      	subs	r0, r4, r5
  407466:	bc70      	pop	{r4, r5, r6}
  407468:	4770      	bx	lr
  40746a:	bf00      	nop

0040746c <memcpy>:
  40746c:	4684      	mov	ip, r0
  40746e:	ea41 0300 	orr.w	r3, r1, r0
  407472:	f013 0303 	ands.w	r3, r3, #3
  407476:	d16d      	bne.n	407554 <memcpy+0xe8>
  407478:	3a40      	subs	r2, #64	; 0x40
  40747a:	d341      	bcc.n	407500 <memcpy+0x94>
  40747c:	f851 3b04 	ldr.w	r3, [r1], #4
  407480:	f840 3b04 	str.w	r3, [r0], #4
  407484:	f851 3b04 	ldr.w	r3, [r1], #4
  407488:	f840 3b04 	str.w	r3, [r0], #4
  40748c:	f851 3b04 	ldr.w	r3, [r1], #4
  407490:	f840 3b04 	str.w	r3, [r0], #4
  407494:	f851 3b04 	ldr.w	r3, [r1], #4
  407498:	f840 3b04 	str.w	r3, [r0], #4
  40749c:	f851 3b04 	ldr.w	r3, [r1], #4
  4074a0:	f840 3b04 	str.w	r3, [r0], #4
  4074a4:	f851 3b04 	ldr.w	r3, [r1], #4
  4074a8:	f840 3b04 	str.w	r3, [r0], #4
  4074ac:	f851 3b04 	ldr.w	r3, [r1], #4
  4074b0:	f840 3b04 	str.w	r3, [r0], #4
  4074b4:	f851 3b04 	ldr.w	r3, [r1], #4
  4074b8:	f840 3b04 	str.w	r3, [r0], #4
  4074bc:	f851 3b04 	ldr.w	r3, [r1], #4
  4074c0:	f840 3b04 	str.w	r3, [r0], #4
  4074c4:	f851 3b04 	ldr.w	r3, [r1], #4
  4074c8:	f840 3b04 	str.w	r3, [r0], #4
  4074cc:	f851 3b04 	ldr.w	r3, [r1], #4
  4074d0:	f840 3b04 	str.w	r3, [r0], #4
  4074d4:	f851 3b04 	ldr.w	r3, [r1], #4
  4074d8:	f840 3b04 	str.w	r3, [r0], #4
  4074dc:	f851 3b04 	ldr.w	r3, [r1], #4
  4074e0:	f840 3b04 	str.w	r3, [r0], #4
  4074e4:	f851 3b04 	ldr.w	r3, [r1], #4
  4074e8:	f840 3b04 	str.w	r3, [r0], #4
  4074ec:	f851 3b04 	ldr.w	r3, [r1], #4
  4074f0:	f840 3b04 	str.w	r3, [r0], #4
  4074f4:	f851 3b04 	ldr.w	r3, [r1], #4
  4074f8:	f840 3b04 	str.w	r3, [r0], #4
  4074fc:	3a40      	subs	r2, #64	; 0x40
  4074fe:	d2bd      	bcs.n	40747c <memcpy+0x10>
  407500:	3230      	adds	r2, #48	; 0x30
  407502:	d311      	bcc.n	407528 <memcpy+0xbc>
  407504:	f851 3b04 	ldr.w	r3, [r1], #4
  407508:	f840 3b04 	str.w	r3, [r0], #4
  40750c:	f851 3b04 	ldr.w	r3, [r1], #4
  407510:	f840 3b04 	str.w	r3, [r0], #4
  407514:	f851 3b04 	ldr.w	r3, [r1], #4
  407518:	f840 3b04 	str.w	r3, [r0], #4
  40751c:	f851 3b04 	ldr.w	r3, [r1], #4
  407520:	f840 3b04 	str.w	r3, [r0], #4
  407524:	3a10      	subs	r2, #16
  407526:	d2ed      	bcs.n	407504 <memcpy+0x98>
  407528:	320c      	adds	r2, #12
  40752a:	d305      	bcc.n	407538 <memcpy+0xcc>
  40752c:	f851 3b04 	ldr.w	r3, [r1], #4
  407530:	f840 3b04 	str.w	r3, [r0], #4
  407534:	3a04      	subs	r2, #4
  407536:	d2f9      	bcs.n	40752c <memcpy+0xc0>
  407538:	3204      	adds	r2, #4
  40753a:	d008      	beq.n	40754e <memcpy+0xe2>
  40753c:	07d2      	lsls	r2, r2, #31
  40753e:	bf1c      	itt	ne
  407540:	f811 3b01 	ldrbne.w	r3, [r1], #1
  407544:	f800 3b01 	strbne.w	r3, [r0], #1
  407548:	d301      	bcc.n	40754e <memcpy+0xe2>
  40754a:	880b      	ldrh	r3, [r1, #0]
  40754c:	8003      	strh	r3, [r0, #0]
  40754e:	4660      	mov	r0, ip
  407550:	4770      	bx	lr
  407552:	bf00      	nop
  407554:	2a08      	cmp	r2, #8
  407556:	d313      	bcc.n	407580 <memcpy+0x114>
  407558:	078b      	lsls	r3, r1, #30
  40755a:	d08d      	beq.n	407478 <memcpy+0xc>
  40755c:	f010 0303 	ands.w	r3, r0, #3
  407560:	d08a      	beq.n	407478 <memcpy+0xc>
  407562:	f1c3 0304 	rsb	r3, r3, #4
  407566:	1ad2      	subs	r2, r2, r3
  407568:	07db      	lsls	r3, r3, #31
  40756a:	bf1c      	itt	ne
  40756c:	f811 3b01 	ldrbne.w	r3, [r1], #1
  407570:	f800 3b01 	strbne.w	r3, [r0], #1
  407574:	d380      	bcc.n	407478 <memcpy+0xc>
  407576:	f831 3b02 	ldrh.w	r3, [r1], #2
  40757a:	f820 3b02 	strh.w	r3, [r0], #2
  40757e:	e77b      	b.n	407478 <memcpy+0xc>
  407580:	3a04      	subs	r2, #4
  407582:	d3d9      	bcc.n	407538 <memcpy+0xcc>
  407584:	3a01      	subs	r2, #1
  407586:	f811 3b01 	ldrb.w	r3, [r1], #1
  40758a:	f800 3b01 	strb.w	r3, [r0], #1
  40758e:	d2f9      	bcs.n	407584 <memcpy+0x118>
  407590:	780b      	ldrb	r3, [r1, #0]
  407592:	7003      	strb	r3, [r0, #0]
  407594:	784b      	ldrb	r3, [r1, #1]
  407596:	7043      	strb	r3, [r0, #1]
  407598:	788b      	ldrb	r3, [r1, #2]
  40759a:	7083      	strb	r3, [r0, #2]
  40759c:	4660      	mov	r0, ip
  40759e:	4770      	bx	lr

004075a0 <memmove>:
  4075a0:	4288      	cmp	r0, r1
  4075a2:	b5f0      	push	{r4, r5, r6, r7, lr}
  4075a4:	d90d      	bls.n	4075c2 <memmove+0x22>
  4075a6:	188b      	adds	r3, r1, r2
  4075a8:	4298      	cmp	r0, r3
  4075aa:	d20a      	bcs.n	4075c2 <memmove+0x22>
  4075ac:	1881      	adds	r1, r0, r2
  4075ae:	2a00      	cmp	r2, #0
  4075b0:	d054      	beq.n	40765c <memmove+0xbc>
  4075b2:	1a9a      	subs	r2, r3, r2
  4075b4:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
  4075b8:	f801 4d01 	strb.w	r4, [r1, #-1]!
  4075bc:	4293      	cmp	r3, r2
  4075be:	d1f9      	bne.n	4075b4 <memmove+0x14>
  4075c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4075c2:	2a0f      	cmp	r2, #15
  4075c4:	d948      	bls.n	407658 <memmove+0xb8>
  4075c6:	ea40 0301 	orr.w	r3, r0, r1
  4075ca:	079b      	lsls	r3, r3, #30
  4075cc:	d147      	bne.n	40765e <memmove+0xbe>
  4075ce:	f100 0410 	add.w	r4, r0, #16
  4075d2:	f101 0310 	add.w	r3, r1, #16
  4075d6:	4615      	mov	r5, r2
  4075d8:	f853 6c10 	ldr.w	r6, [r3, #-16]
  4075dc:	f844 6c10 	str.w	r6, [r4, #-16]
  4075e0:	f853 6c0c 	ldr.w	r6, [r3, #-12]
  4075e4:	f844 6c0c 	str.w	r6, [r4, #-12]
  4075e8:	f853 6c08 	ldr.w	r6, [r3, #-8]
  4075ec:	f844 6c08 	str.w	r6, [r4, #-8]
  4075f0:	3d10      	subs	r5, #16
  4075f2:	f853 6c04 	ldr.w	r6, [r3, #-4]
  4075f6:	f844 6c04 	str.w	r6, [r4, #-4]
  4075fa:	2d0f      	cmp	r5, #15
  4075fc:	f103 0310 	add.w	r3, r3, #16
  407600:	f104 0410 	add.w	r4, r4, #16
  407604:	d8e8      	bhi.n	4075d8 <memmove+0x38>
  407606:	f1a2 0310 	sub.w	r3, r2, #16
  40760a:	f023 030f 	bic.w	r3, r3, #15
  40760e:	f002 0e0f 	and.w	lr, r2, #15
  407612:	3310      	adds	r3, #16
  407614:	f1be 0f03 	cmp.w	lr, #3
  407618:	4419      	add	r1, r3
  40761a:	4403      	add	r3, r0
  40761c:	d921      	bls.n	407662 <memmove+0xc2>
  40761e:	1f1e      	subs	r6, r3, #4
  407620:	460d      	mov	r5, r1
  407622:	4674      	mov	r4, lr
  407624:	3c04      	subs	r4, #4
  407626:	f855 7b04 	ldr.w	r7, [r5], #4
  40762a:	f846 7f04 	str.w	r7, [r6, #4]!
  40762e:	2c03      	cmp	r4, #3
  407630:	d8f8      	bhi.n	407624 <memmove+0x84>
  407632:	f1ae 0404 	sub.w	r4, lr, #4
  407636:	f024 0403 	bic.w	r4, r4, #3
  40763a:	3404      	adds	r4, #4
  40763c:	4423      	add	r3, r4
  40763e:	4421      	add	r1, r4
  407640:	f002 0203 	and.w	r2, r2, #3
  407644:	b152      	cbz	r2, 40765c <memmove+0xbc>
  407646:	3b01      	subs	r3, #1
  407648:	440a      	add	r2, r1
  40764a:	f811 4b01 	ldrb.w	r4, [r1], #1
  40764e:	f803 4f01 	strb.w	r4, [r3, #1]!
  407652:	4291      	cmp	r1, r2
  407654:	d1f9      	bne.n	40764a <memmove+0xaa>
  407656:	bdf0      	pop	{r4, r5, r6, r7, pc}
  407658:	4603      	mov	r3, r0
  40765a:	e7f3      	b.n	407644 <memmove+0xa4>
  40765c:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40765e:	4603      	mov	r3, r0
  407660:	e7f1      	b.n	407646 <memmove+0xa6>
  407662:	4672      	mov	r2, lr
  407664:	e7ee      	b.n	407644 <memmove+0xa4>
  407666:	bf00      	nop

00407668 <memset>:
  407668:	b470      	push	{r4, r5, r6}
  40766a:	0784      	lsls	r4, r0, #30
  40766c:	d046      	beq.n	4076fc <memset+0x94>
  40766e:	1e54      	subs	r4, r2, #1
  407670:	2a00      	cmp	r2, #0
  407672:	d041      	beq.n	4076f8 <memset+0x90>
  407674:	b2cd      	uxtb	r5, r1
  407676:	4603      	mov	r3, r0
  407678:	e002      	b.n	407680 <memset+0x18>
  40767a:	1e62      	subs	r2, r4, #1
  40767c:	b3e4      	cbz	r4, 4076f8 <memset+0x90>
  40767e:	4614      	mov	r4, r2
  407680:	f803 5b01 	strb.w	r5, [r3], #1
  407684:	079a      	lsls	r2, r3, #30
  407686:	d1f8      	bne.n	40767a <memset+0x12>
  407688:	2c03      	cmp	r4, #3
  40768a:	d92e      	bls.n	4076ea <memset+0x82>
  40768c:	b2cd      	uxtb	r5, r1
  40768e:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
  407692:	2c0f      	cmp	r4, #15
  407694:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
  407698:	d919      	bls.n	4076ce <memset+0x66>
  40769a:	f103 0210 	add.w	r2, r3, #16
  40769e:	4626      	mov	r6, r4
  4076a0:	3e10      	subs	r6, #16
  4076a2:	2e0f      	cmp	r6, #15
  4076a4:	f842 5c10 	str.w	r5, [r2, #-16]
  4076a8:	f842 5c0c 	str.w	r5, [r2, #-12]
  4076ac:	f842 5c08 	str.w	r5, [r2, #-8]
  4076b0:	f842 5c04 	str.w	r5, [r2, #-4]
  4076b4:	f102 0210 	add.w	r2, r2, #16
  4076b8:	d8f2      	bhi.n	4076a0 <memset+0x38>
  4076ba:	f1a4 0210 	sub.w	r2, r4, #16
  4076be:	f022 020f 	bic.w	r2, r2, #15
  4076c2:	f004 040f 	and.w	r4, r4, #15
  4076c6:	3210      	adds	r2, #16
  4076c8:	2c03      	cmp	r4, #3
  4076ca:	4413      	add	r3, r2
  4076cc:	d90d      	bls.n	4076ea <memset+0x82>
  4076ce:	461e      	mov	r6, r3
  4076d0:	4622      	mov	r2, r4
  4076d2:	3a04      	subs	r2, #4
  4076d4:	2a03      	cmp	r2, #3
  4076d6:	f846 5b04 	str.w	r5, [r6], #4
  4076da:	d8fa      	bhi.n	4076d2 <memset+0x6a>
  4076dc:	1f22      	subs	r2, r4, #4
  4076de:	f022 0203 	bic.w	r2, r2, #3
  4076e2:	3204      	adds	r2, #4
  4076e4:	4413      	add	r3, r2
  4076e6:	f004 0403 	and.w	r4, r4, #3
  4076ea:	b12c      	cbz	r4, 4076f8 <memset+0x90>
  4076ec:	b2c9      	uxtb	r1, r1
  4076ee:	441c      	add	r4, r3
  4076f0:	f803 1b01 	strb.w	r1, [r3], #1
  4076f4:	42a3      	cmp	r3, r4
  4076f6:	d1fb      	bne.n	4076f0 <memset+0x88>
  4076f8:	bc70      	pop	{r4, r5, r6}
  4076fa:	4770      	bx	lr
  4076fc:	4614      	mov	r4, r2
  4076fe:	4603      	mov	r3, r0
  407700:	e7c2      	b.n	407688 <memset+0x20>
  407702:	bf00      	nop

00407704 <__malloc_lock>:
  407704:	4770      	bx	lr
  407706:	bf00      	nop

00407708 <__malloc_unlock>:
  407708:	4770      	bx	lr
  40770a:	bf00      	nop

0040770c <realloc>:
  40770c:	4b02      	ldr	r3, [pc, #8]	; (407718 <realloc+0xc>)
  40770e:	460a      	mov	r2, r1
  407710:	4601      	mov	r1, r0
  407712:	6818      	ldr	r0, [r3, #0]
  407714:	f000 b802 	b.w	40771c <_realloc_r>
  407718:	20000440 	.word	0x20000440

0040771c <_realloc_r>:
  40771c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  407720:	4617      	mov	r7, r2
  407722:	b083      	sub	sp, #12
  407724:	460e      	mov	r6, r1
  407726:	2900      	cmp	r1, #0
  407728:	f000 80e7 	beq.w	4078fa <_realloc_r+0x1de>
  40772c:	4681      	mov	r9, r0
  40772e:	f107 050b 	add.w	r5, r7, #11
  407732:	f7ff ffe7 	bl	407704 <__malloc_lock>
  407736:	f856 3c04 	ldr.w	r3, [r6, #-4]
  40773a:	2d16      	cmp	r5, #22
  40773c:	f023 0403 	bic.w	r4, r3, #3
  407740:	f1a6 0808 	sub.w	r8, r6, #8
  407744:	d84c      	bhi.n	4077e0 <_realloc_r+0xc4>
  407746:	2210      	movs	r2, #16
  407748:	4615      	mov	r5, r2
  40774a:	42af      	cmp	r7, r5
  40774c:	d84d      	bhi.n	4077ea <_realloc_r+0xce>
  40774e:	4294      	cmp	r4, r2
  407750:	f280 8084 	bge.w	40785c <_realloc_r+0x140>
  407754:	f8df b3ac 	ldr.w	fp, [pc, #940]	; 407b04 <_realloc_r+0x3e8>
  407758:	f8db 0008 	ldr.w	r0, [fp, #8]
  40775c:	eb08 0104 	add.w	r1, r8, r4
  407760:	4288      	cmp	r0, r1
  407762:	f000 80d6 	beq.w	407912 <_realloc_r+0x1f6>
  407766:	6848      	ldr	r0, [r1, #4]
  407768:	f020 0e01 	bic.w	lr, r0, #1
  40776c:	448e      	add	lr, r1
  40776e:	f8de e004 	ldr.w	lr, [lr, #4]
  407772:	f01e 0f01 	tst.w	lr, #1
  407776:	d13f      	bne.n	4077f8 <_realloc_r+0xdc>
  407778:	f020 0003 	bic.w	r0, r0, #3
  40777c:	4420      	add	r0, r4
  40777e:	4290      	cmp	r0, r2
  407780:	f280 80c1 	bge.w	407906 <_realloc_r+0x1ea>
  407784:	07db      	lsls	r3, r3, #31
  407786:	f100 808f 	bmi.w	4078a8 <_realloc_r+0x18c>
  40778a:	f856 3c08 	ldr.w	r3, [r6, #-8]
  40778e:	ebc3 0a08 	rsb	sl, r3, r8
  407792:	f8da 3004 	ldr.w	r3, [sl, #4]
  407796:	f023 0303 	bic.w	r3, r3, #3
  40779a:	eb00 0e03 	add.w	lr, r0, r3
  40779e:	4596      	cmp	lr, r2
  4077a0:	db34      	blt.n	40780c <_realloc_r+0xf0>
  4077a2:	68cb      	ldr	r3, [r1, #12]
  4077a4:	688a      	ldr	r2, [r1, #8]
  4077a6:	4657      	mov	r7, sl
  4077a8:	60d3      	str	r3, [r2, #12]
  4077aa:	609a      	str	r2, [r3, #8]
  4077ac:	f857 1f08 	ldr.w	r1, [r7, #8]!
  4077b0:	f8da 300c 	ldr.w	r3, [sl, #12]
  4077b4:	60cb      	str	r3, [r1, #12]
  4077b6:	1f22      	subs	r2, r4, #4
  4077b8:	2a24      	cmp	r2, #36	; 0x24
  4077ba:	6099      	str	r1, [r3, #8]
  4077bc:	f200 8136 	bhi.w	407a2c <_realloc_r+0x310>
  4077c0:	2a13      	cmp	r2, #19
  4077c2:	f240 80fd 	bls.w	4079c0 <_realloc_r+0x2a4>
  4077c6:	6833      	ldr	r3, [r6, #0]
  4077c8:	f8ca 3008 	str.w	r3, [sl, #8]
  4077cc:	6873      	ldr	r3, [r6, #4]
  4077ce:	f8ca 300c 	str.w	r3, [sl, #12]
  4077d2:	2a1b      	cmp	r2, #27
  4077d4:	f200 8140 	bhi.w	407a58 <_realloc_r+0x33c>
  4077d8:	3608      	adds	r6, #8
  4077da:	f10a 0310 	add.w	r3, sl, #16
  4077de:	e0f0      	b.n	4079c2 <_realloc_r+0x2a6>
  4077e0:	f025 0507 	bic.w	r5, r5, #7
  4077e4:	2d00      	cmp	r5, #0
  4077e6:	462a      	mov	r2, r5
  4077e8:	daaf      	bge.n	40774a <_realloc_r+0x2e>
  4077ea:	230c      	movs	r3, #12
  4077ec:	2000      	movs	r0, #0
  4077ee:	f8c9 3000 	str.w	r3, [r9]
  4077f2:	b003      	add	sp, #12
  4077f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4077f8:	07d9      	lsls	r1, r3, #31
  4077fa:	d455      	bmi.n	4078a8 <_realloc_r+0x18c>
  4077fc:	f856 3c08 	ldr.w	r3, [r6, #-8]
  407800:	ebc3 0a08 	rsb	sl, r3, r8
  407804:	f8da 3004 	ldr.w	r3, [sl, #4]
  407808:	f023 0303 	bic.w	r3, r3, #3
  40780c:	4423      	add	r3, r4
  40780e:	4293      	cmp	r3, r2
  407810:	db4a      	blt.n	4078a8 <_realloc_r+0x18c>
  407812:	4657      	mov	r7, sl
  407814:	f8da 100c 	ldr.w	r1, [sl, #12]
  407818:	f857 0f08 	ldr.w	r0, [r7, #8]!
  40781c:	1f22      	subs	r2, r4, #4
  40781e:	2a24      	cmp	r2, #36	; 0x24
  407820:	60c1      	str	r1, [r0, #12]
  407822:	6088      	str	r0, [r1, #8]
  407824:	f200 810e 	bhi.w	407a44 <_realloc_r+0x328>
  407828:	2a13      	cmp	r2, #19
  40782a:	f240 8109 	bls.w	407a40 <_realloc_r+0x324>
  40782e:	6831      	ldr	r1, [r6, #0]
  407830:	f8ca 1008 	str.w	r1, [sl, #8]
  407834:	6871      	ldr	r1, [r6, #4]
  407836:	f8ca 100c 	str.w	r1, [sl, #12]
  40783a:	2a1b      	cmp	r2, #27
  40783c:	f200 8121 	bhi.w	407a82 <_realloc_r+0x366>
  407840:	3608      	adds	r6, #8
  407842:	f10a 0210 	add.w	r2, sl, #16
  407846:	6831      	ldr	r1, [r6, #0]
  407848:	6011      	str	r1, [r2, #0]
  40784a:	6871      	ldr	r1, [r6, #4]
  40784c:	6051      	str	r1, [r2, #4]
  40784e:	68b1      	ldr	r1, [r6, #8]
  407850:	6091      	str	r1, [r2, #8]
  407852:	461c      	mov	r4, r3
  407854:	f8da 3004 	ldr.w	r3, [sl, #4]
  407858:	463e      	mov	r6, r7
  40785a:	46d0      	mov	r8, sl
  40785c:	1b62      	subs	r2, r4, r5
  40785e:	2a0f      	cmp	r2, #15
  407860:	f003 0301 	and.w	r3, r3, #1
  407864:	d80e      	bhi.n	407884 <_realloc_r+0x168>
  407866:	4323      	orrs	r3, r4
  407868:	4444      	add	r4, r8
  40786a:	f8c8 3004 	str.w	r3, [r8, #4]
  40786e:	6863      	ldr	r3, [r4, #4]
  407870:	f043 0301 	orr.w	r3, r3, #1
  407874:	6063      	str	r3, [r4, #4]
  407876:	4648      	mov	r0, r9
  407878:	f7ff ff46 	bl	407708 <__malloc_unlock>
  40787c:	4630      	mov	r0, r6
  40787e:	b003      	add	sp, #12
  407880:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  407884:	eb08 0105 	add.w	r1, r8, r5
  407888:	431d      	orrs	r5, r3
  40788a:	f042 0301 	orr.w	r3, r2, #1
  40788e:	440a      	add	r2, r1
  407890:	f8c8 5004 	str.w	r5, [r8, #4]
  407894:	604b      	str	r3, [r1, #4]
  407896:	6853      	ldr	r3, [r2, #4]
  407898:	f043 0301 	orr.w	r3, r3, #1
  40789c:	3108      	adds	r1, #8
  40789e:	6053      	str	r3, [r2, #4]
  4078a0:	4648      	mov	r0, r9
  4078a2:	f7fe ff77 	bl	406794 <_free_r>
  4078a6:	e7e6      	b.n	407876 <_realloc_r+0x15a>
  4078a8:	4639      	mov	r1, r7
  4078aa:	4648      	mov	r0, r9
  4078ac:	f7ff fad0 	bl	406e50 <_malloc_r>
  4078b0:	4607      	mov	r7, r0
  4078b2:	b1d8      	cbz	r0, 4078ec <_realloc_r+0x1d0>
  4078b4:	f856 3c04 	ldr.w	r3, [r6, #-4]
  4078b8:	f023 0201 	bic.w	r2, r3, #1
  4078bc:	4442      	add	r2, r8
  4078be:	f1a0 0108 	sub.w	r1, r0, #8
  4078c2:	4291      	cmp	r1, r2
  4078c4:	f000 80ac 	beq.w	407a20 <_realloc_r+0x304>
  4078c8:	1f22      	subs	r2, r4, #4
  4078ca:	2a24      	cmp	r2, #36	; 0x24
  4078cc:	f200 8099 	bhi.w	407a02 <_realloc_r+0x2e6>
  4078d0:	2a13      	cmp	r2, #19
  4078d2:	d86a      	bhi.n	4079aa <_realloc_r+0x28e>
  4078d4:	4603      	mov	r3, r0
  4078d6:	4632      	mov	r2, r6
  4078d8:	6811      	ldr	r1, [r2, #0]
  4078da:	6019      	str	r1, [r3, #0]
  4078dc:	6851      	ldr	r1, [r2, #4]
  4078de:	6059      	str	r1, [r3, #4]
  4078e0:	6892      	ldr	r2, [r2, #8]
  4078e2:	609a      	str	r2, [r3, #8]
  4078e4:	4631      	mov	r1, r6
  4078e6:	4648      	mov	r0, r9
  4078e8:	f7fe ff54 	bl	406794 <_free_r>
  4078ec:	4648      	mov	r0, r9
  4078ee:	f7ff ff0b 	bl	407708 <__malloc_unlock>
  4078f2:	4638      	mov	r0, r7
  4078f4:	b003      	add	sp, #12
  4078f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4078fa:	4611      	mov	r1, r2
  4078fc:	b003      	add	sp, #12
  4078fe:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  407902:	f7ff baa5 	b.w	406e50 <_malloc_r>
  407906:	68ca      	ldr	r2, [r1, #12]
  407908:	6889      	ldr	r1, [r1, #8]
  40790a:	4604      	mov	r4, r0
  40790c:	60ca      	str	r2, [r1, #12]
  40790e:	6091      	str	r1, [r2, #8]
  407910:	e7a4      	b.n	40785c <_realloc_r+0x140>
  407912:	6841      	ldr	r1, [r0, #4]
  407914:	f021 0103 	bic.w	r1, r1, #3
  407918:	4421      	add	r1, r4
  40791a:	f105 0010 	add.w	r0, r5, #16
  40791e:	4281      	cmp	r1, r0
  407920:	da5b      	bge.n	4079da <_realloc_r+0x2be>
  407922:	07db      	lsls	r3, r3, #31
  407924:	d4c0      	bmi.n	4078a8 <_realloc_r+0x18c>
  407926:	f856 3c08 	ldr.w	r3, [r6, #-8]
  40792a:	ebc3 0a08 	rsb	sl, r3, r8
  40792e:	f8da 3004 	ldr.w	r3, [sl, #4]
  407932:	f023 0303 	bic.w	r3, r3, #3
  407936:	eb01 0c03 	add.w	ip, r1, r3
  40793a:	4560      	cmp	r0, ip
  40793c:	f73f af66 	bgt.w	40780c <_realloc_r+0xf0>
  407940:	4657      	mov	r7, sl
  407942:	f8da 300c 	ldr.w	r3, [sl, #12]
  407946:	f857 1f08 	ldr.w	r1, [r7, #8]!
  40794a:	1f22      	subs	r2, r4, #4
  40794c:	2a24      	cmp	r2, #36	; 0x24
  40794e:	60cb      	str	r3, [r1, #12]
  407950:	6099      	str	r1, [r3, #8]
  407952:	f200 80b8 	bhi.w	407ac6 <_realloc_r+0x3aa>
  407956:	2a13      	cmp	r2, #19
  407958:	f240 80a9 	bls.w	407aae <_realloc_r+0x392>
  40795c:	6833      	ldr	r3, [r6, #0]
  40795e:	f8ca 3008 	str.w	r3, [sl, #8]
  407962:	6873      	ldr	r3, [r6, #4]
  407964:	f8ca 300c 	str.w	r3, [sl, #12]
  407968:	2a1b      	cmp	r2, #27
  40796a:	f200 80b5 	bhi.w	407ad8 <_realloc_r+0x3bc>
  40796e:	3608      	adds	r6, #8
  407970:	f10a 0310 	add.w	r3, sl, #16
  407974:	6832      	ldr	r2, [r6, #0]
  407976:	601a      	str	r2, [r3, #0]
  407978:	6872      	ldr	r2, [r6, #4]
  40797a:	605a      	str	r2, [r3, #4]
  40797c:	68b2      	ldr	r2, [r6, #8]
  40797e:	609a      	str	r2, [r3, #8]
  407980:	eb0a 0205 	add.w	r2, sl, r5
  407984:	ebc5 030c 	rsb	r3, r5, ip
  407988:	f043 0301 	orr.w	r3, r3, #1
  40798c:	f8cb 2008 	str.w	r2, [fp, #8]
  407990:	6053      	str	r3, [r2, #4]
  407992:	f8da 3004 	ldr.w	r3, [sl, #4]
  407996:	f003 0301 	and.w	r3, r3, #1
  40799a:	431d      	orrs	r5, r3
  40799c:	4648      	mov	r0, r9
  40799e:	f8ca 5004 	str.w	r5, [sl, #4]
  4079a2:	f7ff feb1 	bl	407708 <__malloc_unlock>
  4079a6:	4638      	mov	r0, r7
  4079a8:	e769      	b.n	40787e <_realloc_r+0x162>
  4079aa:	6833      	ldr	r3, [r6, #0]
  4079ac:	6003      	str	r3, [r0, #0]
  4079ae:	6873      	ldr	r3, [r6, #4]
  4079b0:	6043      	str	r3, [r0, #4]
  4079b2:	2a1b      	cmp	r2, #27
  4079b4:	d829      	bhi.n	407a0a <_realloc_r+0x2ee>
  4079b6:	f100 0308 	add.w	r3, r0, #8
  4079ba:	f106 0208 	add.w	r2, r6, #8
  4079be:	e78b      	b.n	4078d8 <_realloc_r+0x1bc>
  4079c0:	463b      	mov	r3, r7
  4079c2:	6832      	ldr	r2, [r6, #0]
  4079c4:	601a      	str	r2, [r3, #0]
  4079c6:	6872      	ldr	r2, [r6, #4]
  4079c8:	605a      	str	r2, [r3, #4]
  4079ca:	68b2      	ldr	r2, [r6, #8]
  4079cc:	609a      	str	r2, [r3, #8]
  4079ce:	463e      	mov	r6, r7
  4079d0:	4674      	mov	r4, lr
  4079d2:	f8da 3004 	ldr.w	r3, [sl, #4]
  4079d6:	46d0      	mov	r8, sl
  4079d8:	e740      	b.n	40785c <_realloc_r+0x140>
  4079da:	eb08 0205 	add.w	r2, r8, r5
  4079de:	1b4b      	subs	r3, r1, r5
  4079e0:	f043 0301 	orr.w	r3, r3, #1
  4079e4:	f8cb 2008 	str.w	r2, [fp, #8]
  4079e8:	6053      	str	r3, [r2, #4]
  4079ea:	f856 3c04 	ldr.w	r3, [r6, #-4]
  4079ee:	f003 0301 	and.w	r3, r3, #1
  4079f2:	431d      	orrs	r5, r3
  4079f4:	4648      	mov	r0, r9
  4079f6:	f846 5c04 	str.w	r5, [r6, #-4]
  4079fa:	f7ff fe85 	bl	407708 <__malloc_unlock>
  4079fe:	4630      	mov	r0, r6
  407a00:	e73d      	b.n	40787e <_realloc_r+0x162>
  407a02:	4631      	mov	r1, r6
  407a04:	f7ff fdcc 	bl	4075a0 <memmove>
  407a08:	e76c      	b.n	4078e4 <_realloc_r+0x1c8>
  407a0a:	68b3      	ldr	r3, [r6, #8]
  407a0c:	6083      	str	r3, [r0, #8]
  407a0e:	68f3      	ldr	r3, [r6, #12]
  407a10:	60c3      	str	r3, [r0, #12]
  407a12:	2a24      	cmp	r2, #36	; 0x24
  407a14:	d02c      	beq.n	407a70 <_realloc_r+0x354>
  407a16:	f100 0310 	add.w	r3, r0, #16
  407a1a:	f106 0210 	add.w	r2, r6, #16
  407a1e:	e75b      	b.n	4078d8 <_realloc_r+0x1bc>
  407a20:	f850 2c04 	ldr.w	r2, [r0, #-4]
  407a24:	f022 0203 	bic.w	r2, r2, #3
  407a28:	4414      	add	r4, r2
  407a2a:	e717      	b.n	40785c <_realloc_r+0x140>
  407a2c:	4631      	mov	r1, r6
  407a2e:	4638      	mov	r0, r7
  407a30:	4674      	mov	r4, lr
  407a32:	463e      	mov	r6, r7
  407a34:	f7ff fdb4 	bl	4075a0 <memmove>
  407a38:	46d0      	mov	r8, sl
  407a3a:	f8da 3004 	ldr.w	r3, [sl, #4]
  407a3e:	e70d      	b.n	40785c <_realloc_r+0x140>
  407a40:	463a      	mov	r2, r7
  407a42:	e700      	b.n	407846 <_realloc_r+0x12a>
  407a44:	4631      	mov	r1, r6
  407a46:	4638      	mov	r0, r7
  407a48:	461c      	mov	r4, r3
  407a4a:	463e      	mov	r6, r7
  407a4c:	f7ff fda8 	bl	4075a0 <memmove>
  407a50:	46d0      	mov	r8, sl
  407a52:	f8da 3004 	ldr.w	r3, [sl, #4]
  407a56:	e701      	b.n	40785c <_realloc_r+0x140>
  407a58:	68b3      	ldr	r3, [r6, #8]
  407a5a:	f8ca 3010 	str.w	r3, [sl, #16]
  407a5e:	68f3      	ldr	r3, [r6, #12]
  407a60:	f8ca 3014 	str.w	r3, [sl, #20]
  407a64:	2a24      	cmp	r2, #36	; 0x24
  407a66:	d018      	beq.n	407a9a <_realloc_r+0x37e>
  407a68:	3610      	adds	r6, #16
  407a6a:	f10a 0318 	add.w	r3, sl, #24
  407a6e:	e7a8      	b.n	4079c2 <_realloc_r+0x2a6>
  407a70:	6933      	ldr	r3, [r6, #16]
  407a72:	6103      	str	r3, [r0, #16]
  407a74:	6973      	ldr	r3, [r6, #20]
  407a76:	6143      	str	r3, [r0, #20]
  407a78:	f106 0218 	add.w	r2, r6, #24
  407a7c:	f100 0318 	add.w	r3, r0, #24
  407a80:	e72a      	b.n	4078d8 <_realloc_r+0x1bc>
  407a82:	68b1      	ldr	r1, [r6, #8]
  407a84:	f8ca 1010 	str.w	r1, [sl, #16]
  407a88:	68f1      	ldr	r1, [r6, #12]
  407a8a:	f8ca 1014 	str.w	r1, [sl, #20]
  407a8e:	2a24      	cmp	r2, #36	; 0x24
  407a90:	d00f      	beq.n	407ab2 <_realloc_r+0x396>
  407a92:	3610      	adds	r6, #16
  407a94:	f10a 0218 	add.w	r2, sl, #24
  407a98:	e6d5      	b.n	407846 <_realloc_r+0x12a>
  407a9a:	6933      	ldr	r3, [r6, #16]
  407a9c:	f8ca 3018 	str.w	r3, [sl, #24]
  407aa0:	6973      	ldr	r3, [r6, #20]
  407aa2:	f8ca 301c 	str.w	r3, [sl, #28]
  407aa6:	3618      	adds	r6, #24
  407aa8:	f10a 0320 	add.w	r3, sl, #32
  407aac:	e789      	b.n	4079c2 <_realloc_r+0x2a6>
  407aae:	463b      	mov	r3, r7
  407ab0:	e760      	b.n	407974 <_realloc_r+0x258>
  407ab2:	6932      	ldr	r2, [r6, #16]
  407ab4:	f8ca 2018 	str.w	r2, [sl, #24]
  407ab8:	6972      	ldr	r2, [r6, #20]
  407aba:	f8ca 201c 	str.w	r2, [sl, #28]
  407abe:	3618      	adds	r6, #24
  407ac0:	f10a 0220 	add.w	r2, sl, #32
  407ac4:	e6bf      	b.n	407846 <_realloc_r+0x12a>
  407ac6:	4631      	mov	r1, r6
  407ac8:	4638      	mov	r0, r7
  407aca:	f8cd c004 	str.w	ip, [sp, #4]
  407ace:	f7ff fd67 	bl	4075a0 <memmove>
  407ad2:	f8dd c004 	ldr.w	ip, [sp, #4]
  407ad6:	e753      	b.n	407980 <_realloc_r+0x264>
  407ad8:	68b3      	ldr	r3, [r6, #8]
  407ada:	f8ca 3010 	str.w	r3, [sl, #16]
  407ade:	68f3      	ldr	r3, [r6, #12]
  407ae0:	f8ca 3014 	str.w	r3, [sl, #20]
  407ae4:	2a24      	cmp	r2, #36	; 0x24
  407ae6:	d003      	beq.n	407af0 <_realloc_r+0x3d4>
  407ae8:	3610      	adds	r6, #16
  407aea:	f10a 0318 	add.w	r3, sl, #24
  407aee:	e741      	b.n	407974 <_realloc_r+0x258>
  407af0:	6933      	ldr	r3, [r6, #16]
  407af2:	f8ca 3018 	str.w	r3, [sl, #24]
  407af6:	6973      	ldr	r3, [r6, #20]
  407af8:	f8ca 301c 	str.w	r3, [sl, #28]
  407afc:	3618      	adds	r6, #24
  407afe:	f10a 0320 	add.w	r3, sl, #32
  407b02:	e737      	b.n	407974 <_realloc_r+0x258>
  407b04:	20000444 	.word	0x20000444

00407b08 <_sbrk_r>:
  407b08:	b538      	push	{r3, r4, r5, lr}
  407b0a:	4c07      	ldr	r4, [pc, #28]	; (407b28 <_sbrk_r+0x20>)
  407b0c:	2300      	movs	r3, #0
  407b0e:	4605      	mov	r5, r0
  407b10:	4608      	mov	r0, r1
  407b12:	6023      	str	r3, [r4, #0]
  407b14:	f7f9 fc46 	bl	4013a4 <_sbrk>
  407b18:	1c43      	adds	r3, r0, #1
  407b1a:	d000      	beq.n	407b1e <_sbrk_r+0x16>
  407b1c:	bd38      	pop	{r3, r4, r5, pc}
  407b1e:	6823      	ldr	r3, [r4, #0]
  407b20:	2b00      	cmp	r3, #0
  407b22:	d0fb      	beq.n	407b1c <_sbrk_r+0x14>
  407b24:	602b      	str	r3, [r5, #0]
  407b26:	bd38      	pop	{r3, r4, r5, pc}
  407b28:	20000d6c 	.word	0x20000d6c

00407b2c <snprintf>:
  407b2c:	b40c      	push	{r2, r3}
  407b2e:	b5f0      	push	{r4, r5, r6, r7, lr}
  407b30:	4b24      	ldr	r3, [pc, #144]	; (407bc4 <snprintf+0x98>)
  407b32:	2900      	cmp	r1, #0
  407b34:	b09d      	sub	sp, #116	; 0x74
  407b36:	681d      	ldr	r5, [r3, #0]
  407b38:	db3e      	blt.n	407bb8 <snprintf+0x8c>
  407b3a:	f44f 7302 	mov.w	r3, #520	; 0x208
  407b3e:	460c      	mov	r4, r1
  407b40:	9002      	str	r0, [sp, #8]
  407b42:	9006      	str	r0, [sp, #24]
  407b44:	f8ad 3014 	strh.w	r3, [sp, #20]
  407b48:	ae23      	add	r6, sp, #140	; 0x8c
  407b4a:	d017      	beq.n	407b7c <snprintf+0x50>
  407b4c:	1e4c      	subs	r4, r1, #1
  407b4e:	9a22      	ldr	r2, [sp, #136]	; 0x88
  407b50:	9404      	str	r4, [sp, #16]
  407b52:	4633      	mov	r3, r6
  407b54:	f64f 77ff 	movw	r7, #65535	; 0xffff
  407b58:	4628      	mov	r0, r5
  407b5a:	a902      	add	r1, sp, #8
  407b5c:	9407      	str	r4, [sp, #28]
  407b5e:	9601      	str	r6, [sp, #4]
  407b60:	f8ad 7016 	strh.w	r7, [sp, #22]
  407b64:	f000 f8a0 	bl	407ca8 <_svfprintf_r>
  407b68:	1c42      	adds	r2, r0, #1
  407b6a:	db22      	blt.n	407bb2 <snprintf+0x86>
  407b6c:	9b02      	ldr	r3, [sp, #8]
  407b6e:	2200      	movs	r2, #0
  407b70:	701a      	strb	r2, [r3, #0]
  407b72:	b01d      	add	sp, #116	; 0x74
  407b74:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
  407b78:	b002      	add	sp, #8
  407b7a:	4770      	bx	lr
  407b7c:	4633      	mov	r3, r6
  407b7e:	f64f 77ff 	movw	r7, #65535	; 0xffff
  407b82:	4628      	mov	r0, r5
  407b84:	a902      	add	r1, sp, #8
  407b86:	9a22      	ldr	r2, [sp, #136]	; 0x88
  407b88:	9404      	str	r4, [sp, #16]
  407b8a:	9407      	str	r4, [sp, #28]
  407b8c:	9601      	str	r6, [sp, #4]
  407b8e:	f8ad 7016 	strh.w	r7, [sp, #22]
  407b92:	f000 f889 	bl	407ca8 <_svfprintf_r>
  407b96:	1c43      	adds	r3, r0, #1
  407b98:	db04      	blt.n	407ba4 <snprintf+0x78>
  407b9a:	b01d      	add	sp, #116	; 0x74
  407b9c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
  407ba0:	b002      	add	sp, #8
  407ba2:	4770      	bx	lr
  407ba4:	238b      	movs	r3, #139	; 0x8b
  407ba6:	602b      	str	r3, [r5, #0]
  407ba8:	b01d      	add	sp, #116	; 0x74
  407baa:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
  407bae:	b002      	add	sp, #8
  407bb0:	4770      	bx	lr
  407bb2:	238b      	movs	r3, #139	; 0x8b
  407bb4:	602b      	str	r3, [r5, #0]
  407bb6:	e7d9      	b.n	407b6c <snprintf+0x40>
  407bb8:	238b      	movs	r3, #139	; 0x8b
  407bba:	602b      	str	r3, [r5, #0]
  407bbc:	f04f 30ff 	mov.w	r0, #4294967295
  407bc0:	e7eb      	b.n	407b9a <snprintf+0x6e>
  407bc2:	bf00      	nop
  407bc4:	20000440 	.word	0x20000440

00407bc8 <__sread>:
  407bc8:	b510      	push	{r4, lr}
  407bca:	460c      	mov	r4, r1
  407bcc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  407bd0:	f004 ffec 	bl	40cbac <_read_r>
  407bd4:	2800      	cmp	r0, #0
  407bd6:	db03      	blt.n	407be0 <__sread+0x18>
  407bd8:	6d23      	ldr	r3, [r4, #80]	; 0x50
  407bda:	4403      	add	r3, r0
  407bdc:	6523      	str	r3, [r4, #80]	; 0x50
  407bde:	bd10      	pop	{r4, pc}
  407be0:	89a3      	ldrh	r3, [r4, #12]
  407be2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
  407be6:	81a3      	strh	r3, [r4, #12]
  407be8:	bd10      	pop	{r4, pc}
  407bea:	bf00      	nop

00407bec <__swrite>:
  407bec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  407bf0:	4616      	mov	r6, r2
  407bf2:	898a      	ldrh	r2, [r1, #12]
  407bf4:	461d      	mov	r5, r3
  407bf6:	05d3      	lsls	r3, r2, #23
  407bf8:	460c      	mov	r4, r1
  407bfa:	4607      	mov	r7, r0
  407bfc:	d506      	bpl.n	407c0c <__swrite+0x20>
  407bfe:	2200      	movs	r2, #0
  407c00:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  407c04:	2302      	movs	r3, #2
  407c06:	f004 fcc9 	bl	40c59c <_lseek_r>
  407c0a:	89a2      	ldrh	r2, [r4, #12]
  407c0c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  407c10:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
  407c14:	81a2      	strh	r2, [r4, #12]
  407c16:	4638      	mov	r0, r7
  407c18:	4632      	mov	r2, r6
  407c1a:	462b      	mov	r3, r5
  407c1c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  407c20:	f003 bb9c 	b.w	40b35c <_write_r>

00407c24 <__sseek>:
  407c24:	b510      	push	{r4, lr}
  407c26:	460c      	mov	r4, r1
  407c28:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  407c2c:	f004 fcb6 	bl	40c59c <_lseek_r>
  407c30:	89a3      	ldrh	r3, [r4, #12]
  407c32:	1c42      	adds	r2, r0, #1
  407c34:	bf0e      	itee	eq
  407c36:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
  407c3a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
  407c3e:	6520      	strne	r0, [r4, #80]	; 0x50
  407c40:	81a3      	strh	r3, [r4, #12]
  407c42:	bd10      	pop	{r4, pc}

00407c44 <__sclose>:
  407c44:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  407c48:	f003 bc16 	b.w	40b478 <_close_r>

00407c4c <strlen>:
  407c4c:	f020 0103 	bic.w	r1, r0, #3
  407c50:	f010 0003 	ands.w	r0, r0, #3
  407c54:	f1c0 0000 	rsb	r0, r0, #0
  407c58:	f851 3b04 	ldr.w	r3, [r1], #4
  407c5c:	f100 0c04 	add.w	ip, r0, #4
  407c60:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
  407c64:	f06f 0200 	mvn.w	r2, #0
  407c68:	bf1c      	itt	ne
  407c6a:	fa22 f20c 	lsrne.w	r2, r2, ip
  407c6e:	4313      	orrne	r3, r2
  407c70:	f04f 0c01 	mov.w	ip, #1
  407c74:	ea4c 2c0c 	orr.w	ip, ip, ip, lsl #8
  407c78:	ea4c 4c0c 	orr.w	ip, ip, ip, lsl #16
  407c7c:	eba3 020c 	sub.w	r2, r3, ip
  407c80:	ea22 0203 	bic.w	r2, r2, r3
  407c84:	ea12 12cc 	ands.w	r2, r2, ip, lsl #7
  407c88:	bf04      	itt	eq
  407c8a:	f851 3b04 	ldreq.w	r3, [r1], #4
  407c8e:	3004      	addeq	r0, #4
  407c90:	d0f4      	beq.n	407c7c <strlen+0x30>
  407c92:	f1c2 0100 	rsb	r1, r2, #0
  407c96:	ea02 0201 	and.w	r2, r2, r1
  407c9a:	fab2 f282 	clz	r2, r2
  407c9e:	f1c2 021f 	rsb	r2, r2, #31
  407ca2:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
  407ca6:	4770      	bx	lr

00407ca8 <_svfprintf_r>:
  407ca8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  407cac:	b0c1      	sub	sp, #260	; 0x104
  407cae:	4689      	mov	r9, r1
  407cb0:	920a      	str	r2, [sp, #40]	; 0x28
  407cb2:	930e      	str	r3, [sp, #56]	; 0x38
  407cb4:	9008      	str	r0, [sp, #32]
  407cb6:	f004 fc6d 	bl	40c594 <_localeconv_r>
  407cba:	6803      	ldr	r3, [r0, #0]
  407cbc:	9317      	str	r3, [sp, #92]	; 0x5c
  407cbe:	4618      	mov	r0, r3
  407cc0:	f7ff ffc4 	bl	407c4c <strlen>
  407cc4:	f8b9 300c 	ldrh.w	r3, [r9, #12]
  407cc8:	9018      	str	r0, [sp, #96]	; 0x60
  407cca:	061a      	lsls	r2, r3, #24
  407ccc:	d504      	bpl.n	407cd8 <_svfprintf_r+0x30>
  407cce:	f8d9 3010 	ldr.w	r3, [r9, #16]
  407cd2:	2b00      	cmp	r3, #0
  407cd4:	f001 808c 	beq.w	408df0 <_svfprintf_r+0x1148>
  407cd8:	2300      	movs	r3, #0
  407cda:	af30      	add	r7, sp, #192	; 0xc0
  407cdc:	9313      	str	r3, [sp, #76]	; 0x4c
  407cde:	9325      	str	r3, [sp, #148]	; 0x94
  407ce0:	9324      	str	r3, [sp, #144]	; 0x90
  407ce2:	9316      	str	r3, [sp, #88]	; 0x58
  407ce4:	9319      	str	r3, [sp, #100]	; 0x64
  407ce6:	930b      	str	r3, [sp, #44]	; 0x2c
  407ce8:	9723      	str	r7, [sp, #140]	; 0x8c
  407cea:	9314      	str	r3, [sp, #80]	; 0x50
  407cec:	9315      	str	r3, [sp, #84]	; 0x54
  407cee:	463c      	mov	r4, r7
  407cf0:	464e      	mov	r6, r9
  407cf2:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  407cf4:	782b      	ldrb	r3, [r5, #0]
  407cf6:	2b00      	cmp	r3, #0
  407cf8:	f000 80a9 	beq.w	407e4e <_svfprintf_r+0x1a6>
  407cfc:	2b25      	cmp	r3, #37	; 0x25
  407cfe:	d102      	bne.n	407d06 <_svfprintf_r+0x5e>
  407d00:	e0a5      	b.n	407e4e <_svfprintf_r+0x1a6>
  407d02:	2b25      	cmp	r3, #37	; 0x25
  407d04:	d003      	beq.n	407d0e <_svfprintf_r+0x66>
  407d06:	f815 3f01 	ldrb.w	r3, [r5, #1]!
  407d0a:	2b00      	cmp	r3, #0
  407d0c:	d1f9      	bne.n	407d02 <_svfprintf_r+0x5a>
  407d0e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  407d10:	1aeb      	subs	r3, r5, r3
  407d12:	b173      	cbz	r3, 407d32 <_svfprintf_r+0x8a>
  407d14:	9a24      	ldr	r2, [sp, #144]	; 0x90
  407d16:	9925      	ldr	r1, [sp, #148]	; 0x94
  407d18:	980a      	ldr	r0, [sp, #40]	; 0x28
  407d1a:	6020      	str	r0, [r4, #0]
  407d1c:	3201      	adds	r2, #1
  407d1e:	4419      	add	r1, r3
  407d20:	2a07      	cmp	r2, #7
  407d22:	6063      	str	r3, [r4, #4]
  407d24:	9125      	str	r1, [sp, #148]	; 0x94
  407d26:	9224      	str	r2, [sp, #144]	; 0x90
  407d28:	dc72      	bgt.n	407e10 <_svfprintf_r+0x168>
  407d2a:	3408      	adds	r4, #8
  407d2c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  407d2e:	441a      	add	r2, r3
  407d30:	920b      	str	r2, [sp, #44]	; 0x2c
  407d32:	782b      	ldrb	r3, [r5, #0]
  407d34:	2b00      	cmp	r3, #0
  407d36:	f000 87b5 	beq.w	408ca4 <_svfprintf_r+0xffc>
  407d3a:	2300      	movs	r3, #0
  407d3c:	1c69      	adds	r1, r5, #1
  407d3e:	786d      	ldrb	r5, [r5, #1]
  407d40:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
  407d44:	461a      	mov	r2, r3
  407d46:	930c      	str	r3, [sp, #48]	; 0x30
  407d48:	9307      	str	r3, [sp, #28]
  407d4a:	f04f 3aff 	mov.w	sl, #4294967295
  407d4e:	1c4b      	adds	r3, r1, #1
  407d50:	f1a5 0120 	sub.w	r1, r5, #32
  407d54:	2958      	cmp	r1, #88	; 0x58
  407d56:	f200 83d9 	bhi.w	40850c <_svfprintf_r+0x864>
  407d5a:	e8df f011 	tbh	[pc, r1, lsl #1]
  407d5e:	0270      	.short	0x0270
  407d60:	03d703d7 	.word	0x03d703d7
  407d64:	03d70374 	.word	0x03d70374
  407d68:	03d703d7 	.word	0x03d703d7
  407d6c:	03d703d7 	.word	0x03d703d7
  407d70:	02f003d7 	.word	0x02f003d7
  407d74:	03d7020d 	.word	0x03d7020d
  407d78:	021101f4 	.word	0x021101f4
  407d7c:	037b03d7 	.word	0x037b03d7
  407d80:	02ba02ba 	.word	0x02ba02ba
  407d84:	02ba02ba 	.word	0x02ba02ba
  407d88:	02ba02ba 	.word	0x02ba02ba
  407d8c:	02ba02ba 	.word	0x02ba02ba
  407d90:	03d702ba 	.word	0x03d702ba
  407d94:	03d703d7 	.word	0x03d703d7
  407d98:	03d703d7 	.word	0x03d703d7
  407d9c:	03d703d7 	.word	0x03d703d7
  407da0:	03d703d7 	.word	0x03d703d7
  407da4:	02c903d7 	.word	0x02c903d7
  407da8:	03d7038b 	.word	0x03d7038b
  407dac:	03d7038b 	.word	0x03d7038b
  407db0:	03d703d7 	.word	0x03d703d7
  407db4:	036d03d7 	.word	0x036d03d7
  407db8:	03d703d7 	.word	0x03d703d7
  407dbc:	03d70305 	.word	0x03d70305
  407dc0:	03d703d7 	.word	0x03d703d7
  407dc4:	03d703d7 	.word	0x03d703d7
  407dc8:	03d70323 	.word	0x03d70323
  407dcc:	033d03d7 	.word	0x033d03d7
  407dd0:	03d703d7 	.word	0x03d703d7
  407dd4:	03d703d7 	.word	0x03d703d7
  407dd8:	03d703d7 	.word	0x03d703d7
  407ddc:	03d703d7 	.word	0x03d703d7
  407de0:	03d703d7 	.word	0x03d703d7
  407de4:	022c0358 	.word	0x022c0358
  407de8:	038b038b 	.word	0x038b038b
  407dec:	02fe038b 	.word	0x02fe038b
  407df0:	03d7022c 	.word	0x03d7022c
  407df4:	02e603d7 	.word	0x02e603d7
  407df8:	027e03d7 	.word	0x027e03d7
  407dfc:	03c001fb 	.word	0x03c001fb
  407e00:	03d70277 	.word	0x03d70277
  407e04:	03d70292 	.word	0x03d70292
  407e08:	03d7007a 	.word	0x03d7007a
  407e0c:	024a03d7 	.word	0x024a03d7
  407e10:	9808      	ldr	r0, [sp, #32]
  407e12:	9307      	str	r3, [sp, #28]
  407e14:	4631      	mov	r1, r6
  407e16:	aa23      	add	r2, sp, #140	; 0x8c
  407e18:	f004 ff52 	bl	40ccc0 <__ssprint_r>
  407e1c:	b950      	cbnz	r0, 407e34 <_svfprintf_r+0x18c>
  407e1e:	463c      	mov	r4, r7
  407e20:	9b07      	ldr	r3, [sp, #28]
  407e22:	e783      	b.n	407d2c <_svfprintf_r+0x84>
  407e24:	9808      	ldr	r0, [sp, #32]
  407e26:	4631      	mov	r1, r6
  407e28:	aa23      	add	r2, sp, #140	; 0x8c
  407e2a:	f004 ff49 	bl	40ccc0 <__ssprint_r>
  407e2e:	2800      	cmp	r0, #0
  407e30:	f000 8185 	beq.w	40813e <_svfprintf_r+0x496>
  407e34:	46b1      	mov	r9, r6
  407e36:	f8b9 300c 	ldrh.w	r3, [r9, #12]
  407e3a:	f013 0f40 	tst.w	r3, #64	; 0x40
  407e3e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  407e40:	bf18      	it	ne
  407e42:	f04f 33ff 	movne.w	r3, #4294967295
  407e46:	4618      	mov	r0, r3
  407e48:	b041      	add	sp, #260	; 0x104
  407e4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  407e4e:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  407e50:	e76f      	b.n	407d32 <_svfprintf_r+0x8a>
  407e52:	930a      	str	r3, [sp, #40]	; 0x28
  407e54:	9b07      	ldr	r3, [sp, #28]
  407e56:	0698      	lsls	r0, r3, #26
  407e58:	f140 82ad 	bpl.w	4083b6 <_svfprintf_r+0x70e>
  407e5c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  407e5e:	f103 0907 	add.w	r9, r3, #7
  407e62:	f029 0307 	bic.w	r3, r9, #7
  407e66:	f103 0208 	add.w	r2, r3, #8
  407e6a:	e9d3 8900 	ldrd	r8, r9, [r3]
  407e6e:	920e      	str	r2, [sp, #56]	; 0x38
  407e70:	2301      	movs	r3, #1
  407e72:	f04f 0c00 	mov.w	ip, #0
  407e76:	f88d c06f 	strb.w	ip, [sp, #111]	; 0x6f
  407e7a:	f8cd a044 	str.w	sl, [sp, #68]	; 0x44
  407e7e:	f1ba 0f00 	cmp.w	sl, #0
  407e82:	db03      	blt.n	407e8c <_svfprintf_r+0x1e4>
  407e84:	9a07      	ldr	r2, [sp, #28]
  407e86:	f022 0280 	bic.w	r2, r2, #128	; 0x80
  407e8a:	9207      	str	r2, [sp, #28]
  407e8c:	ea58 0209 	orrs.w	r2, r8, r9
  407e90:	f040 834c 	bne.w	40852c <_svfprintf_r+0x884>
  407e94:	f1ba 0f00 	cmp.w	sl, #0
  407e98:	f000 8451 	beq.w	40873e <_svfprintf_r+0xa96>
  407e9c:	2b01      	cmp	r3, #1
  407e9e:	f000 834f 	beq.w	408540 <_svfprintf_r+0x898>
  407ea2:	2b02      	cmp	r3, #2
  407ea4:	f000 8490 	beq.w	4087c8 <_svfprintf_r+0xb20>
  407ea8:	4639      	mov	r1, r7
  407eaa:	ea4f 02d8 	mov.w	r2, r8, lsr #3
  407eae:	ea42 7249 	orr.w	r2, r2, r9, lsl #29
  407eb2:	ea4f 00d9 	mov.w	r0, r9, lsr #3
  407eb6:	f008 0307 	and.w	r3, r8, #7
  407eba:	4681      	mov	r9, r0
  407ebc:	4690      	mov	r8, r2
  407ebe:	3330      	adds	r3, #48	; 0x30
  407ec0:	ea58 0209 	orrs.w	r2, r8, r9
  407ec4:	f801 3d01 	strb.w	r3, [r1, #-1]!
  407ec8:	d1ef      	bne.n	407eaa <_svfprintf_r+0x202>
  407eca:	9a07      	ldr	r2, [sp, #28]
  407ecc:	9110      	str	r1, [sp, #64]	; 0x40
  407ece:	07d2      	lsls	r2, r2, #31
  407ed0:	f100 8544 	bmi.w	40895c <_svfprintf_r+0xcb4>
  407ed4:	1a7b      	subs	r3, r7, r1
  407ed6:	930d      	str	r3, [sp, #52]	; 0x34
  407ed8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  407eda:	4592      	cmp	sl, r2
  407edc:	4653      	mov	r3, sl
  407ede:	bfb8      	it	lt
  407ee0:	4613      	movlt	r3, r2
  407ee2:	9309      	str	r3, [sp, #36]	; 0x24
  407ee4:	2300      	movs	r3, #0
  407ee6:	9312      	str	r3, [sp, #72]	; 0x48
  407ee8:	f1bc 0f00 	cmp.w	ip, #0
  407eec:	d002      	beq.n	407ef4 <_svfprintf_r+0x24c>
  407eee:	9b09      	ldr	r3, [sp, #36]	; 0x24
  407ef0:	3301      	adds	r3, #1
  407ef2:	9309      	str	r3, [sp, #36]	; 0x24
  407ef4:	9b07      	ldr	r3, [sp, #28]
  407ef6:	f013 0302 	ands.w	r3, r3, #2
  407efa:	930f      	str	r3, [sp, #60]	; 0x3c
  407efc:	d002      	beq.n	407f04 <_svfprintf_r+0x25c>
  407efe:	9b09      	ldr	r3, [sp, #36]	; 0x24
  407f00:	3302      	adds	r3, #2
  407f02:	9309      	str	r3, [sp, #36]	; 0x24
  407f04:	9b07      	ldr	r3, [sp, #28]
  407f06:	f013 0984 	ands.w	r9, r3, #132	; 0x84
  407f0a:	f040 830c 	bne.w	408526 <_svfprintf_r+0x87e>
  407f0e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  407f10:	9a09      	ldr	r2, [sp, #36]	; 0x24
  407f12:	ebc2 0803 	rsb	r8, r2, r3
  407f16:	f1b8 0f00 	cmp.w	r8, #0
  407f1a:	f340 8304 	ble.w	408526 <_svfprintf_r+0x87e>
  407f1e:	f1b8 0f10 	cmp.w	r8, #16
  407f22:	9925      	ldr	r1, [sp, #148]	; 0x94
  407f24:	9a24      	ldr	r2, [sp, #144]	; 0x90
  407f26:	f8df a544 	ldr.w	sl, [pc, #1348]	; 40846c <_svfprintf_r+0x7c4>
  407f2a:	dd29      	ble.n	407f80 <_svfprintf_r+0x2d8>
  407f2c:	4653      	mov	r3, sl
  407f2e:	f04f 0b10 	mov.w	fp, #16
  407f32:	46c2      	mov	sl, r8
  407f34:	46a8      	mov	r8, r5
  407f36:	461d      	mov	r5, r3
  407f38:	e006      	b.n	407f48 <_svfprintf_r+0x2a0>
  407f3a:	f1aa 0a10 	sub.w	sl, sl, #16
  407f3e:	f1ba 0f10 	cmp.w	sl, #16
  407f42:	f104 0408 	add.w	r4, r4, #8
  407f46:	dd17      	ble.n	407f78 <_svfprintf_r+0x2d0>
  407f48:	3201      	adds	r2, #1
  407f4a:	3110      	adds	r1, #16
  407f4c:	2a07      	cmp	r2, #7
  407f4e:	9125      	str	r1, [sp, #148]	; 0x94
  407f50:	9224      	str	r2, [sp, #144]	; 0x90
  407f52:	e884 0820 	stmia.w	r4, {r5, fp}
  407f56:	ddf0      	ble.n	407f3a <_svfprintf_r+0x292>
  407f58:	9808      	ldr	r0, [sp, #32]
  407f5a:	4631      	mov	r1, r6
  407f5c:	aa23      	add	r2, sp, #140	; 0x8c
  407f5e:	f004 feaf 	bl	40ccc0 <__ssprint_r>
  407f62:	2800      	cmp	r0, #0
  407f64:	f47f af66 	bne.w	407e34 <_svfprintf_r+0x18c>
  407f68:	f1aa 0a10 	sub.w	sl, sl, #16
  407f6c:	f1ba 0f10 	cmp.w	sl, #16
  407f70:	9925      	ldr	r1, [sp, #148]	; 0x94
  407f72:	9a24      	ldr	r2, [sp, #144]	; 0x90
  407f74:	463c      	mov	r4, r7
  407f76:	dce7      	bgt.n	407f48 <_svfprintf_r+0x2a0>
  407f78:	462b      	mov	r3, r5
  407f7a:	4645      	mov	r5, r8
  407f7c:	46d0      	mov	r8, sl
  407f7e:	469a      	mov	sl, r3
  407f80:	3201      	adds	r2, #1
  407f82:	eb08 0b01 	add.w	fp, r8, r1
  407f86:	2a07      	cmp	r2, #7
  407f88:	f8cd b094 	str.w	fp, [sp, #148]	; 0x94
  407f8c:	9224      	str	r2, [sp, #144]	; 0x90
  407f8e:	f8c4 a000 	str.w	sl, [r4]
  407f92:	f8c4 8004 	str.w	r8, [r4, #4]
  407f96:	f300 847b 	bgt.w	408890 <_svfprintf_r+0xbe8>
  407f9a:	f89d c06f 	ldrb.w	ip, [sp, #111]	; 0x6f
  407f9e:	3408      	adds	r4, #8
  407fa0:	f1bc 0f00 	cmp.w	ip, #0
  407fa4:	d00f      	beq.n	407fc6 <_svfprintf_r+0x31e>
  407fa6:	9b24      	ldr	r3, [sp, #144]	; 0x90
  407fa8:	3301      	adds	r3, #1
  407faa:	f10b 0b01 	add.w	fp, fp, #1
  407fae:	f10d 016f 	add.w	r1, sp, #111	; 0x6f
  407fb2:	2201      	movs	r2, #1
  407fb4:	2b07      	cmp	r3, #7
  407fb6:	f8cd b094 	str.w	fp, [sp, #148]	; 0x94
  407fba:	9324      	str	r3, [sp, #144]	; 0x90
  407fbc:	e884 0006 	stmia.w	r4, {r1, r2}
  407fc0:	f300 83da 	bgt.w	408778 <_svfprintf_r+0xad0>
  407fc4:	3408      	adds	r4, #8
  407fc6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  407fc8:	b173      	cbz	r3, 407fe8 <_svfprintf_r+0x340>
  407fca:	9b24      	ldr	r3, [sp, #144]	; 0x90
  407fcc:	3301      	adds	r3, #1
  407fce:	f10b 0b02 	add.w	fp, fp, #2
  407fd2:	a91c      	add	r1, sp, #112	; 0x70
  407fd4:	2202      	movs	r2, #2
  407fd6:	2b07      	cmp	r3, #7
  407fd8:	f8cd b094 	str.w	fp, [sp, #148]	; 0x94
  407fdc:	9324      	str	r3, [sp, #144]	; 0x90
  407fde:	e884 0006 	stmia.w	r4, {r1, r2}
  407fe2:	f300 83d5 	bgt.w	408790 <_svfprintf_r+0xae8>
  407fe6:	3408      	adds	r4, #8
  407fe8:	f1b9 0f80 	cmp.w	r9, #128	; 0x80
  407fec:	f000 8311 	beq.w	408612 <_svfprintf_r+0x96a>
  407ff0:	9b11      	ldr	r3, [sp, #68]	; 0x44
  407ff2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  407ff4:	ebc2 0a03 	rsb	sl, r2, r3
  407ff8:	f1ba 0f00 	cmp.w	sl, #0
  407ffc:	dd3c      	ble.n	408078 <_svfprintf_r+0x3d0>
  407ffe:	f1ba 0f10 	cmp.w	sl, #16
  408002:	9a24      	ldr	r2, [sp, #144]	; 0x90
  408004:	f8df 9468 	ldr.w	r9, [pc, #1128]	; 408470 <_svfprintf_r+0x7c8>
  408008:	dd2b      	ble.n	408062 <_svfprintf_r+0x3ba>
  40800a:	4649      	mov	r1, r9
  40800c:	465b      	mov	r3, fp
  40800e:	46a9      	mov	r9, r5
  408010:	f04f 0810 	mov.w	r8, #16
  408014:	f8dd b020 	ldr.w	fp, [sp, #32]
  408018:	460d      	mov	r5, r1
  40801a:	e006      	b.n	40802a <_svfprintf_r+0x382>
  40801c:	f1aa 0a10 	sub.w	sl, sl, #16
  408020:	f1ba 0f10 	cmp.w	sl, #16
  408024:	f104 0408 	add.w	r4, r4, #8
  408028:	dd17      	ble.n	40805a <_svfprintf_r+0x3b2>
  40802a:	3201      	adds	r2, #1
  40802c:	3310      	adds	r3, #16
  40802e:	2a07      	cmp	r2, #7
  408030:	9325      	str	r3, [sp, #148]	; 0x94
  408032:	9224      	str	r2, [sp, #144]	; 0x90
  408034:	e884 0120 	stmia.w	r4, {r5, r8}
  408038:	ddf0      	ble.n	40801c <_svfprintf_r+0x374>
  40803a:	4658      	mov	r0, fp
  40803c:	4631      	mov	r1, r6
  40803e:	aa23      	add	r2, sp, #140	; 0x8c
  408040:	f004 fe3e 	bl	40ccc0 <__ssprint_r>
  408044:	2800      	cmp	r0, #0
  408046:	f47f aef5 	bne.w	407e34 <_svfprintf_r+0x18c>
  40804a:	f1aa 0a10 	sub.w	sl, sl, #16
  40804e:	f1ba 0f10 	cmp.w	sl, #16
  408052:	9b25      	ldr	r3, [sp, #148]	; 0x94
  408054:	9a24      	ldr	r2, [sp, #144]	; 0x90
  408056:	463c      	mov	r4, r7
  408058:	dce7      	bgt.n	40802a <_svfprintf_r+0x382>
  40805a:	469b      	mov	fp, r3
  40805c:	462b      	mov	r3, r5
  40805e:	464d      	mov	r5, r9
  408060:	4699      	mov	r9, r3
  408062:	3201      	adds	r2, #1
  408064:	44d3      	add	fp, sl
  408066:	2a07      	cmp	r2, #7
  408068:	f8cd b094 	str.w	fp, [sp, #148]	; 0x94
  40806c:	9224      	str	r2, [sp, #144]	; 0x90
  40806e:	e884 0600 	stmia.w	r4, {r9, sl}
  408072:	f300 8375 	bgt.w	408760 <_svfprintf_r+0xab8>
  408076:	3408      	adds	r4, #8
  408078:	9b07      	ldr	r3, [sp, #28]
  40807a:	05d9      	lsls	r1, r3, #23
  40807c:	f100 826c 	bmi.w	408558 <_svfprintf_r+0x8b0>
  408080:	9b24      	ldr	r3, [sp, #144]	; 0x90
  408082:	990d      	ldr	r1, [sp, #52]	; 0x34
  408084:	9a10      	ldr	r2, [sp, #64]	; 0x40
  408086:	6022      	str	r2, [r4, #0]
  408088:	3301      	adds	r3, #1
  40808a:	448b      	add	fp, r1
  40808c:	2b07      	cmp	r3, #7
  40808e:	f8cd b094 	str.w	fp, [sp, #148]	; 0x94
  408092:	6061      	str	r1, [r4, #4]
  408094:	9324      	str	r3, [sp, #144]	; 0x90
  408096:	f300 8346 	bgt.w	408726 <_svfprintf_r+0xa7e>
  40809a:	3408      	adds	r4, #8
  40809c:	9b07      	ldr	r3, [sp, #28]
  40809e:	075a      	lsls	r2, r3, #29
  4080a0:	d541      	bpl.n	408126 <_svfprintf_r+0x47e>
  4080a2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  4080a4:	9a09      	ldr	r2, [sp, #36]	; 0x24
  4080a6:	1a9d      	subs	r5, r3, r2
  4080a8:	2d00      	cmp	r5, #0
  4080aa:	dd3c      	ble.n	408126 <_svfprintf_r+0x47e>
  4080ac:	2d10      	cmp	r5, #16
  4080ae:	9b24      	ldr	r3, [sp, #144]	; 0x90
  4080b0:	f8df a3b8 	ldr.w	sl, [pc, #952]	; 40846c <_svfprintf_r+0x7c4>
  4080b4:	dd23      	ble.n	4080fe <_svfprintf_r+0x456>
  4080b6:	f04f 0810 	mov.w	r8, #16
  4080ba:	465a      	mov	r2, fp
  4080bc:	f8dd 9020 	ldr.w	r9, [sp, #32]
  4080c0:	e004      	b.n	4080cc <_svfprintf_r+0x424>
  4080c2:	3d10      	subs	r5, #16
  4080c4:	2d10      	cmp	r5, #16
  4080c6:	f104 0408 	add.w	r4, r4, #8
  4080ca:	dd17      	ble.n	4080fc <_svfprintf_r+0x454>
  4080cc:	3301      	adds	r3, #1
  4080ce:	3210      	adds	r2, #16
  4080d0:	2b07      	cmp	r3, #7
  4080d2:	9225      	str	r2, [sp, #148]	; 0x94
  4080d4:	9324      	str	r3, [sp, #144]	; 0x90
  4080d6:	f8c4 a000 	str.w	sl, [r4]
  4080da:	f8c4 8004 	str.w	r8, [r4, #4]
  4080de:	ddf0      	ble.n	4080c2 <_svfprintf_r+0x41a>
  4080e0:	4648      	mov	r0, r9
  4080e2:	4631      	mov	r1, r6
  4080e4:	aa23      	add	r2, sp, #140	; 0x8c
  4080e6:	f004 fdeb 	bl	40ccc0 <__ssprint_r>
  4080ea:	2800      	cmp	r0, #0
  4080ec:	f47f aea2 	bne.w	407e34 <_svfprintf_r+0x18c>
  4080f0:	3d10      	subs	r5, #16
  4080f2:	2d10      	cmp	r5, #16
  4080f4:	9a25      	ldr	r2, [sp, #148]	; 0x94
  4080f6:	9b24      	ldr	r3, [sp, #144]	; 0x90
  4080f8:	463c      	mov	r4, r7
  4080fa:	dce7      	bgt.n	4080cc <_svfprintf_r+0x424>
  4080fc:	4693      	mov	fp, r2
  4080fe:	3301      	adds	r3, #1
  408100:	44ab      	add	fp, r5
  408102:	2b07      	cmp	r3, #7
  408104:	f8cd b094 	str.w	fp, [sp, #148]	; 0x94
  408108:	9324      	str	r3, [sp, #144]	; 0x90
  40810a:	f8c4 a000 	str.w	sl, [r4]
  40810e:	6065      	str	r5, [r4, #4]
  408110:	dd09      	ble.n	408126 <_svfprintf_r+0x47e>
  408112:	9808      	ldr	r0, [sp, #32]
  408114:	4631      	mov	r1, r6
  408116:	aa23      	add	r2, sp, #140	; 0x8c
  408118:	f004 fdd2 	bl	40ccc0 <__ssprint_r>
  40811c:	2800      	cmp	r0, #0
  40811e:	f47f ae89 	bne.w	407e34 <_svfprintf_r+0x18c>
  408122:	f8dd b094 	ldr.w	fp, [sp, #148]	; 0x94
  408126:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  408128:	9a09      	ldr	r2, [sp, #36]	; 0x24
  40812a:	990c      	ldr	r1, [sp, #48]	; 0x30
  40812c:	428a      	cmp	r2, r1
  40812e:	bfac      	ite	ge
  408130:	189b      	addge	r3, r3, r2
  408132:	185b      	addlt	r3, r3, r1
  408134:	930b      	str	r3, [sp, #44]	; 0x2c
  408136:	f1bb 0f00 	cmp.w	fp, #0
  40813a:	f47f ae73 	bne.w	407e24 <_svfprintf_r+0x17c>
  40813e:	2300      	movs	r3, #0
  408140:	9324      	str	r3, [sp, #144]	; 0x90
  408142:	463c      	mov	r4, r7
  408144:	e5d5      	b.n	407cf2 <_svfprintf_r+0x4a>
  408146:	4619      	mov	r1, r3
  408148:	9807      	ldr	r0, [sp, #28]
  40814a:	781d      	ldrb	r5, [r3, #0]
  40814c:	f040 0004 	orr.w	r0, r0, #4
  408150:	9007      	str	r0, [sp, #28]
  408152:	e5fc      	b.n	407d4e <_svfprintf_r+0xa6>
  408154:	930a      	str	r3, [sp, #40]	; 0x28
  408156:	9b07      	ldr	r3, [sp, #28]
  408158:	f013 0320 	ands.w	r3, r3, #32
  40815c:	f000 810e 	beq.w	40837c <_svfprintf_r+0x6d4>
  408160:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  408162:	f103 0907 	add.w	r9, r3, #7
  408166:	f029 0307 	bic.w	r3, r9, #7
  40816a:	f103 0208 	add.w	r2, r3, #8
  40816e:	e9d3 8900 	ldrd	r8, r9, [r3]
  408172:	920e      	str	r2, [sp, #56]	; 0x38
  408174:	2300      	movs	r3, #0
  408176:	e67c      	b.n	407e72 <_svfprintf_r+0x1ca>
  408178:	781d      	ldrb	r5, [r3, #0]
  40817a:	4619      	mov	r1, r3
  40817c:	222b      	movs	r2, #43	; 0x2b
  40817e:	e5e6      	b.n	407d4e <_svfprintf_r+0xa6>
  408180:	781d      	ldrb	r5, [r3, #0]
  408182:	2d2a      	cmp	r5, #42	; 0x2a
  408184:	f103 0101 	add.w	r1, r3, #1
  408188:	f000 87ad 	beq.w	4090e6 <_svfprintf_r+0x143e>
  40818c:	f1a5 0030 	sub.w	r0, r5, #48	; 0x30
  408190:	2809      	cmp	r0, #9
  408192:	460b      	mov	r3, r1
  408194:	f04f 0a00 	mov.w	sl, #0
  408198:	f63f adda 	bhi.w	407d50 <_svfprintf_r+0xa8>
  40819c:	f813 5b01 	ldrb.w	r5, [r3], #1
  4081a0:	eb0a 0a8a 	add.w	sl, sl, sl, lsl #2
  4081a4:	eb00 0a4a 	add.w	sl, r0, sl, lsl #1
  4081a8:	f1a5 0030 	sub.w	r0, r5, #48	; 0x30
  4081ac:	2809      	cmp	r0, #9
  4081ae:	d9f5      	bls.n	40819c <_svfprintf_r+0x4f4>
  4081b0:	ea4a 7aea 	orr.w	sl, sl, sl, asr #31
  4081b4:	e5cc      	b.n	407d50 <_svfprintf_r+0xa8>
  4081b6:	930a      	str	r3, [sp, #40]	; 0x28
  4081b8:	9b07      	ldr	r3, [sp, #28]
  4081ba:	f88d 206f 	strb.w	r2, [sp, #111]	; 0x6f
  4081be:	069b      	lsls	r3, r3, #26
  4081c0:	f140 80a1 	bpl.w	408306 <_svfprintf_r+0x65e>
  4081c4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  4081c6:	f103 0907 	add.w	r9, r3, #7
  4081ca:	f029 0907 	bic.w	r9, r9, #7
  4081ce:	e9d9 2300 	ldrd	r2, r3, [r9]
  4081d2:	f109 0108 	add.w	r1, r9, #8
  4081d6:	910e      	str	r1, [sp, #56]	; 0x38
  4081d8:	4690      	mov	r8, r2
  4081da:	4699      	mov	r9, r3
  4081dc:	2a00      	cmp	r2, #0
  4081de:	f173 0300 	sbcs.w	r3, r3, #0
  4081e2:	f2c0 840b 	blt.w	4089fc <_svfprintf_r+0xd54>
  4081e6:	f89d c06f 	ldrb.w	ip, [sp, #111]	; 0x6f
  4081ea:	f8cd a044 	str.w	sl, [sp, #68]	; 0x44
  4081ee:	2301      	movs	r3, #1
  4081f0:	e645      	b.n	407e7e <_svfprintf_r+0x1d6>
  4081f2:	930a      	str	r3, [sp, #40]	; 0x28
  4081f4:	4b9b      	ldr	r3, [pc, #620]	; (408464 <_svfprintf_r+0x7bc>)
  4081f6:	9316      	str	r3, [sp, #88]	; 0x58
  4081f8:	9b07      	ldr	r3, [sp, #28]
  4081fa:	f88d 206f 	strb.w	r2, [sp, #111]	; 0x6f
  4081fe:	069b      	lsls	r3, r3, #26
  408200:	f140 80f3 	bpl.w	4083ea <_svfprintf_r+0x742>
  408204:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  408206:	f103 0907 	add.w	r9, r3, #7
  40820a:	f029 0307 	bic.w	r3, r9, #7
  40820e:	e9d3 8900 	ldrd	r8, r9, [r3]
  408212:	f103 0208 	add.w	r2, r3, #8
  408216:	920e      	str	r2, [sp, #56]	; 0x38
  408218:	9b07      	ldr	r3, [sp, #28]
  40821a:	07d9      	lsls	r1, r3, #31
  40821c:	f140 80f5 	bpl.w	40840a <_svfprintf_r+0x762>
  408220:	ea58 0309 	orrs.w	r3, r8, r9
  408224:	f000 80f1 	beq.w	40840a <_svfprintf_r+0x762>
  408228:	9a07      	ldr	r2, [sp, #28]
  40822a:	f88d 5071 	strb.w	r5, [sp, #113]	; 0x71
  40822e:	2330      	movs	r3, #48	; 0x30
  408230:	f042 0202 	orr.w	r2, r2, #2
  408234:	f88d 3070 	strb.w	r3, [sp, #112]	; 0x70
  408238:	9207      	str	r2, [sp, #28]
  40823a:	2302      	movs	r3, #2
  40823c:	e619      	b.n	407e72 <_svfprintf_r+0x1ca>
  40823e:	781d      	ldrb	r5, [r3, #0]
  408240:	4619      	mov	r1, r3
  408242:	2a00      	cmp	r2, #0
  408244:	f47f ad83 	bne.w	407d4e <_svfprintf_r+0xa6>
  408248:	2220      	movs	r2, #32
  40824a:	e580      	b.n	407d4e <_svfprintf_r+0xa6>
  40824c:	9907      	ldr	r1, [sp, #28]
  40824e:	f041 0120 	orr.w	r1, r1, #32
  408252:	9107      	str	r1, [sp, #28]
  408254:	781d      	ldrb	r5, [r3, #0]
  408256:	4619      	mov	r1, r3
  408258:	e579      	b.n	407d4e <_svfprintf_r+0xa6>
  40825a:	930a      	str	r3, [sp, #40]	; 0x28
  40825c:	9b07      	ldr	r3, [sp, #28]
  40825e:	f88d 206f 	strb.w	r2, [sp, #111]	; 0x6f
  408262:	069a      	lsls	r2, r3, #26
  408264:	f140 84a1 	bpl.w	408baa <_svfprintf_r+0xf02>
  408268:	990b      	ldr	r1, [sp, #44]	; 0x2c
  40826a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  40826c:	ea4f 79e1 	mov.w	r9, r1, asr #31
  408270:	6813      	ldr	r3, [r2, #0]
  408272:	4608      	mov	r0, r1
  408274:	4688      	mov	r8, r1
  408276:	3204      	adds	r2, #4
  408278:	4649      	mov	r1, r9
  40827a:	920e      	str	r2, [sp, #56]	; 0x38
  40827c:	e9c3 0100 	strd	r0, r1, [r3]
  408280:	e537      	b.n	407cf2 <_svfprintf_r+0x4a>
  408282:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  408284:	930a      	str	r3, [sp, #40]	; 0x28
  408286:	6813      	ldr	r3, [r2, #0]
  408288:	9310      	str	r3, [sp, #64]	; 0x40
  40828a:	f04f 0b00 	mov.w	fp, #0
  40828e:	f88d b06f 	strb.w	fp, [sp, #111]	; 0x6f
  408292:	f102 0904 	add.w	r9, r2, #4
  408296:	2b00      	cmp	r3, #0
  408298:	f000 863b 	beq.w	408f12 <_svfprintf_r+0x126a>
  40829c:	f1ba 0f00 	cmp.w	sl, #0
  4082a0:	9810      	ldr	r0, [sp, #64]	; 0x40
  4082a2:	f2c0 85e9 	blt.w	408e78 <_svfprintf_r+0x11d0>
  4082a6:	4659      	mov	r1, fp
  4082a8:	4652      	mov	r2, sl
  4082aa:	f7ff f863 	bl	407374 <memchr>
  4082ae:	2800      	cmp	r0, #0
  4082b0:	f000 866c 	beq.w	408f8c <_svfprintf_r+0x12e4>
  4082b4:	9b10      	ldr	r3, [sp, #64]	; 0x40
  4082b6:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
  4082ba:	1ac3      	subs	r3, r0, r3
  4082bc:	930d      	str	r3, [sp, #52]	; 0x34
  4082be:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
  4082c2:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  4082c6:	9309      	str	r3, [sp, #36]	; 0x24
  4082c8:	f8cd b048 	str.w	fp, [sp, #72]	; 0x48
  4082cc:	f89d c06f 	ldrb.w	ip, [sp, #111]	; 0x6f
  4082d0:	e60a      	b.n	407ee8 <_svfprintf_r+0x240>
  4082d2:	f1a5 0030 	sub.w	r0, r5, #48	; 0x30
  4082d6:	2100      	movs	r1, #0
  4082d8:	f813 5b01 	ldrb.w	r5, [r3], #1
  4082dc:	eb01 0181 	add.w	r1, r1, r1, lsl #2
  4082e0:	eb00 0141 	add.w	r1, r0, r1, lsl #1
  4082e4:	f1a5 0030 	sub.w	r0, r5, #48	; 0x30
  4082e8:	2809      	cmp	r0, #9
  4082ea:	d9f5      	bls.n	4082d8 <_svfprintf_r+0x630>
  4082ec:	910c      	str	r1, [sp, #48]	; 0x30
  4082ee:	e52f      	b.n	407d50 <_svfprintf_r+0xa8>
  4082f0:	930a      	str	r3, [sp, #40]	; 0x28
  4082f2:	9b07      	ldr	r3, [sp, #28]
  4082f4:	f88d 206f 	strb.w	r2, [sp, #111]	; 0x6f
  4082f8:	f043 0310 	orr.w	r3, r3, #16
  4082fc:	9307      	str	r3, [sp, #28]
  4082fe:	9b07      	ldr	r3, [sp, #28]
  408300:	069b      	lsls	r3, r3, #26
  408302:	f53f af5f 	bmi.w	4081c4 <_svfprintf_r+0x51c>
  408306:	9b07      	ldr	r3, [sp, #28]
  408308:	06d8      	lsls	r0, r3, #27
  40830a:	f100 8368 	bmi.w	4089de <_svfprintf_r+0xd36>
  40830e:	9b07      	ldr	r3, [sp, #28]
  408310:	0659      	lsls	r1, r3, #25
  408312:	f140 8364 	bpl.w	4089de <_svfprintf_r+0xd36>
  408316:	990e      	ldr	r1, [sp, #56]	; 0x38
  408318:	f9b1 8000 	ldrsh.w	r8, [r1]
  40831c:	3104      	adds	r1, #4
  40831e:	ea4f 79e8 	mov.w	r9, r8, asr #31
  408322:	4642      	mov	r2, r8
  408324:	464b      	mov	r3, r9
  408326:	910e      	str	r1, [sp, #56]	; 0x38
  408328:	e758      	b.n	4081dc <_svfprintf_r+0x534>
  40832a:	781d      	ldrb	r5, [r3, #0]
  40832c:	9907      	ldr	r1, [sp, #28]
  40832e:	2d6c      	cmp	r5, #108	; 0x6c
  408330:	f000 84cb 	beq.w	408cca <_svfprintf_r+0x1022>
  408334:	f041 0110 	orr.w	r1, r1, #16
  408338:	9107      	str	r1, [sp, #28]
  40833a:	4619      	mov	r1, r3
  40833c:	e507      	b.n	407d4e <_svfprintf_r+0xa6>
  40833e:	9d0e      	ldr	r5, [sp, #56]	; 0x38
  408340:	6829      	ldr	r1, [r5, #0]
  408342:	910c      	str	r1, [sp, #48]	; 0x30
  408344:	4608      	mov	r0, r1
  408346:	2800      	cmp	r0, #0
  408348:	4629      	mov	r1, r5
  40834a:	f101 0104 	add.w	r1, r1, #4
  40834e:	f2c0 84b5 	blt.w	408cbc <_svfprintf_r+0x1014>
  408352:	910e      	str	r1, [sp, #56]	; 0x38
  408354:	781d      	ldrb	r5, [r3, #0]
  408356:	4619      	mov	r1, r3
  408358:	e4f9      	b.n	407d4e <_svfprintf_r+0xa6>
  40835a:	9907      	ldr	r1, [sp, #28]
  40835c:	f041 0140 	orr.w	r1, r1, #64	; 0x40
  408360:	9107      	str	r1, [sp, #28]
  408362:	781d      	ldrb	r5, [r3, #0]
  408364:	4619      	mov	r1, r3
  408366:	e4f2      	b.n	407d4e <_svfprintf_r+0xa6>
  408368:	930a      	str	r3, [sp, #40]	; 0x28
  40836a:	9b07      	ldr	r3, [sp, #28]
  40836c:	f043 0310 	orr.w	r3, r3, #16
  408370:	9307      	str	r3, [sp, #28]
  408372:	9b07      	ldr	r3, [sp, #28]
  408374:	f013 0320 	ands.w	r3, r3, #32
  408378:	f47f aef2 	bne.w	408160 <_svfprintf_r+0x4b8>
  40837c:	9a07      	ldr	r2, [sp, #28]
  40837e:	f012 0210 	ands.w	r2, r2, #16
  408382:	f040 8319 	bne.w	4089b8 <_svfprintf_r+0xd10>
  408386:	9b07      	ldr	r3, [sp, #28]
  408388:	f013 0340 	ands.w	r3, r3, #64	; 0x40
  40838c:	f000 8314 	beq.w	4089b8 <_svfprintf_r+0xd10>
  408390:	990e      	ldr	r1, [sp, #56]	; 0x38
  408392:	4613      	mov	r3, r2
  408394:	460a      	mov	r2, r1
  408396:	3204      	adds	r2, #4
  408398:	f8b1 8000 	ldrh.w	r8, [r1]
  40839c:	920e      	str	r2, [sp, #56]	; 0x38
  40839e:	f04f 0900 	mov.w	r9, #0
  4083a2:	e566      	b.n	407e72 <_svfprintf_r+0x1ca>
  4083a4:	930a      	str	r3, [sp, #40]	; 0x28
  4083a6:	9b07      	ldr	r3, [sp, #28]
  4083a8:	f043 0310 	orr.w	r3, r3, #16
  4083ac:	9307      	str	r3, [sp, #28]
  4083ae:	9b07      	ldr	r3, [sp, #28]
  4083b0:	0698      	lsls	r0, r3, #26
  4083b2:	f53f ad53 	bmi.w	407e5c <_svfprintf_r+0x1b4>
  4083b6:	9b07      	ldr	r3, [sp, #28]
  4083b8:	06d9      	lsls	r1, r3, #27
  4083ba:	f100 8306 	bmi.w	4089ca <_svfprintf_r+0xd22>
  4083be:	9b07      	ldr	r3, [sp, #28]
  4083c0:	065a      	lsls	r2, r3, #25
  4083c2:	f140 8302 	bpl.w	4089ca <_svfprintf_r+0xd22>
  4083c6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  4083c8:	f8b2 8000 	ldrh.w	r8, [r2]
  4083cc:	3204      	adds	r2, #4
  4083ce:	f04f 0900 	mov.w	r9, #0
  4083d2:	2301      	movs	r3, #1
  4083d4:	920e      	str	r2, [sp, #56]	; 0x38
  4083d6:	e54c      	b.n	407e72 <_svfprintf_r+0x1ca>
  4083d8:	930a      	str	r3, [sp, #40]	; 0x28
  4083da:	4b23      	ldr	r3, [pc, #140]	; (408468 <_svfprintf_r+0x7c0>)
  4083dc:	9316      	str	r3, [sp, #88]	; 0x58
  4083de:	9b07      	ldr	r3, [sp, #28]
  4083e0:	f88d 206f 	strb.w	r2, [sp, #111]	; 0x6f
  4083e4:	069b      	lsls	r3, r3, #26
  4083e6:	f53f af0d 	bmi.w	408204 <_svfprintf_r+0x55c>
  4083ea:	9b07      	ldr	r3, [sp, #28]
  4083ec:	06d8      	lsls	r0, r3, #27
  4083ee:	f140 83cd 	bpl.w	408b8c <_svfprintf_r+0xee4>
  4083f2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  4083f4:	4613      	mov	r3, r2
  4083f6:	681b      	ldr	r3, [r3, #0]
  4083f8:	4698      	mov	r8, r3
  4083fa:	9b07      	ldr	r3, [sp, #28]
  4083fc:	3204      	adds	r2, #4
  4083fe:	07d9      	lsls	r1, r3, #31
  408400:	920e      	str	r2, [sp, #56]	; 0x38
  408402:	f04f 0900 	mov.w	r9, #0
  408406:	f53f af0b 	bmi.w	408220 <_svfprintf_r+0x578>
  40840a:	2302      	movs	r3, #2
  40840c:	e531      	b.n	407e72 <_svfprintf_r+0x1ca>
  40840e:	990e      	ldr	r1, [sp, #56]	; 0x38
  408410:	930a      	str	r3, [sp, #40]	; 0x28
  408412:	680a      	ldr	r2, [r1, #0]
  408414:	f88d 2098 	strb.w	r2, [sp, #152]	; 0x98
  408418:	2300      	movs	r3, #0
  40841a:	2201      	movs	r2, #1
  40841c:	3104      	adds	r1, #4
  40841e:	469c      	mov	ip, r3
  408420:	9209      	str	r2, [sp, #36]	; 0x24
  408422:	910e      	str	r1, [sp, #56]	; 0x38
  408424:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
  408428:	ab26      	add	r3, sp, #152	; 0x98
  40842a:	f8cd c044 	str.w	ip, [sp, #68]	; 0x44
  40842e:	f8cd c048 	str.w	ip, [sp, #72]	; 0x48
  408432:	920d      	str	r2, [sp, #52]	; 0x34
  408434:	9310      	str	r3, [sp, #64]	; 0x40
  408436:	e55d      	b.n	407ef4 <_svfprintf_r+0x24c>
  408438:	9907      	ldr	r1, [sp, #28]
  40843a:	f041 0108 	orr.w	r1, r1, #8
  40843e:	9107      	str	r1, [sp, #28]
  408440:	781d      	ldrb	r5, [r3, #0]
  408442:	4619      	mov	r1, r3
  408444:	e483      	b.n	407d4e <_svfprintf_r+0xa6>
  408446:	9907      	ldr	r1, [sp, #28]
  408448:	f041 0101 	orr.w	r1, r1, #1
  40844c:	9107      	str	r1, [sp, #28]
  40844e:	781d      	ldrb	r5, [r3, #0]
  408450:	4619      	mov	r1, r3
  408452:	e47c      	b.n	407d4e <_svfprintf_r+0xa6>
  408454:	9907      	ldr	r1, [sp, #28]
  408456:	f041 0180 	orr.w	r1, r1, #128	; 0x80
  40845a:	9107      	str	r1, [sp, #28]
  40845c:	781d      	ldrb	r5, [r3, #0]
  40845e:	4619      	mov	r1, r3
  408460:	e475      	b.n	407d4e <_svfprintf_r+0xa6>
  408462:	bf00      	nop
  408464:	0040feac 	.word	0x0040feac
  408468:	0040fe98 	.word	0x0040fe98
  40846c:	0040fe78 	.word	0x0040fe78
  408470:	0040fe68 	.word	0x0040fe68
  408474:	930a      	str	r3, [sp, #40]	; 0x28
  408476:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  408478:	f88d 206f 	strb.w	r2, [sp, #111]	; 0x6f
  40847c:	f103 0907 	add.w	r9, r3, #7
  408480:	f029 0307 	bic.w	r3, r9, #7
  408484:	f103 0208 	add.w	r2, r3, #8
  408488:	920e      	str	r2, [sp, #56]	; 0x38
  40848a:	681a      	ldr	r2, [r3, #0]
  40848c:	9214      	str	r2, [sp, #80]	; 0x50
  40848e:	685b      	ldr	r3, [r3, #4]
  408490:	9315      	str	r3, [sp, #84]	; 0x54
  408492:	9915      	ldr	r1, [sp, #84]	; 0x54
  408494:	9814      	ldr	r0, [sp, #80]	; 0x50
  408496:	f004 fb9d 	bl	40cbd4 <__fpclassifyd>
  40849a:	2801      	cmp	r0, #1
  40849c:	46d3      	mov	fp, sl
  40849e:	9814      	ldr	r0, [sp, #80]	; 0x50
  4084a0:	9915      	ldr	r1, [sp, #84]	; 0x54
  4084a2:	f040 8359 	bne.w	408b58 <_svfprintf_r+0xeb0>
  4084a6:	2200      	movs	r2, #0
  4084a8:	2300      	movs	r3, #0
  4084aa:	f7fd fef5 	bl	406298 <__aeabi_dcmplt>
  4084ae:	2800      	cmp	r0, #0
  4084b0:	f040 8564 	bne.w	408f7c <_svfprintf_r+0x12d4>
  4084b4:	f89d c06f 	ldrb.w	ip, [sp, #111]	; 0x6f
  4084b8:	9b07      	ldr	r3, [sp, #28]
  4084ba:	4abe      	ldr	r2, [pc, #760]	; (4087b4 <_svfprintf_r+0xb0c>)
  4084bc:	f8df e300 	ldr.w	lr, [pc, #768]	; 4087c0 <_svfprintf_r+0xb18>
  4084c0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  4084c4:	9307      	str	r3, [sp, #28]
  4084c6:	4613      	mov	r3, r2
  4084c8:	2103      	movs	r1, #3
  4084ca:	2000      	movs	r0, #0
  4084cc:	2d47      	cmp	r5, #71	; 0x47
  4084ce:	bfd8      	it	le
  4084d0:	4673      	movle	r3, lr
  4084d2:	9109      	str	r1, [sp, #36]	; 0x24
  4084d4:	9011      	str	r0, [sp, #68]	; 0x44
  4084d6:	9310      	str	r3, [sp, #64]	; 0x40
  4084d8:	910d      	str	r1, [sp, #52]	; 0x34
  4084da:	9012      	str	r0, [sp, #72]	; 0x48
  4084dc:	e504      	b.n	407ee8 <_svfprintf_r+0x240>
  4084de:	980e      	ldr	r0, [sp, #56]	; 0x38
  4084e0:	9907      	ldr	r1, [sp, #28]
  4084e2:	930a      	str	r3, [sp, #40]	; 0x28
  4084e4:	2230      	movs	r2, #48	; 0x30
  4084e6:	6803      	ldr	r3, [r0, #0]
  4084e8:	f88d 2070 	strb.w	r2, [sp, #112]	; 0x70
  4084ec:	4602      	mov	r2, r0
  4084ee:	2578      	movs	r5, #120	; 0x78
  4084f0:	f041 0102 	orr.w	r1, r1, #2
  4084f4:	3204      	adds	r2, #4
  4084f6:	4698      	mov	r8, r3
  4084f8:	4baf      	ldr	r3, [pc, #700]	; (4087b8 <_svfprintf_r+0xb10>)
  4084fa:	9316      	str	r3, [sp, #88]	; 0x58
  4084fc:	9107      	str	r1, [sp, #28]
  4084fe:	920e      	str	r2, [sp, #56]	; 0x38
  408500:	f04f 0900 	mov.w	r9, #0
  408504:	f88d 5071 	strb.w	r5, [sp, #113]	; 0x71
  408508:	2302      	movs	r3, #2
  40850a:	e4b2      	b.n	407e72 <_svfprintf_r+0x1ca>
  40850c:	930a      	str	r3, [sp, #40]	; 0x28
  40850e:	f88d 206f 	strb.w	r2, [sp, #111]	; 0x6f
  408512:	2d00      	cmp	r5, #0
  408514:	f000 83c6 	beq.w	408ca4 <_svfprintf_r+0xffc>
  408518:	2300      	movs	r3, #0
  40851a:	2201      	movs	r2, #1
  40851c:	469c      	mov	ip, r3
  40851e:	9209      	str	r2, [sp, #36]	; 0x24
  408520:	f88d 5098 	strb.w	r5, [sp, #152]	; 0x98
  408524:	e77e      	b.n	408424 <_svfprintf_r+0x77c>
  408526:	f8dd b094 	ldr.w	fp, [sp, #148]	; 0x94
  40852a:	e539      	b.n	407fa0 <_svfprintf_r+0x2f8>
  40852c:	2b01      	cmp	r3, #1
  40852e:	f47f acb8 	bne.w	407ea2 <_svfprintf_r+0x1fa>
  408532:	f1b9 0f00 	cmp.w	r9, #0
  408536:	bf08      	it	eq
  408538:	f1b8 0f0a 	cmpeq.w	r8, #10
  40853c:	f080 821c 	bcs.w	408978 <_svfprintf_r+0xcd0>
  408540:	f50d 7b80 	add.w	fp, sp, #256	; 0x100
  408544:	f108 0830 	add.w	r8, r8, #48	; 0x30
  408548:	f80b 8d41 	strb.w	r8, [fp, #-65]!
  40854c:	ebcb 0307 	rsb	r3, fp, r7
  408550:	930d      	str	r3, [sp, #52]	; 0x34
  408552:	f8cd b040 	str.w	fp, [sp, #64]	; 0x40
  408556:	e4bf      	b.n	407ed8 <_svfprintf_r+0x230>
  408558:	2d65      	cmp	r5, #101	; 0x65
  40855a:	f340 80a0 	ble.w	40869e <_svfprintf_r+0x9f6>
  40855e:	9814      	ldr	r0, [sp, #80]	; 0x50
  408560:	9915      	ldr	r1, [sp, #84]	; 0x54
  408562:	2200      	movs	r2, #0
  408564:	2300      	movs	r3, #0
  408566:	f7fd fe8d 	bl	406284 <__aeabi_dcmpeq>
  40856a:	2800      	cmp	r0, #0
  40856c:	f000 8145 	beq.w	4087fa <_svfprintf_r+0xb52>
  408570:	9b24      	ldr	r3, [sp, #144]	; 0x90
  408572:	4a92      	ldr	r2, [pc, #584]	; (4087bc <_svfprintf_r+0xb14>)
  408574:	6022      	str	r2, [r4, #0]
  408576:	3301      	adds	r3, #1
  408578:	f10b 0b01 	add.w	fp, fp, #1
  40857c:	2201      	movs	r2, #1
  40857e:	2b07      	cmp	r3, #7
  408580:	f8cd b094 	str.w	fp, [sp, #148]	; 0x94
  408584:	9324      	str	r3, [sp, #144]	; 0x90
  408586:	6062      	str	r2, [r4, #4]
  408588:	f300 8334 	bgt.w	408bf4 <_svfprintf_r+0xf4c>
  40858c:	3408      	adds	r4, #8
  40858e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
  408590:	9a13      	ldr	r2, [sp, #76]	; 0x4c
  408592:	4293      	cmp	r3, r2
  408594:	db03      	blt.n	40859e <_svfprintf_r+0x8f6>
  408596:	9b07      	ldr	r3, [sp, #28]
  408598:	07da      	lsls	r2, r3, #31
  40859a:	f57f ad7f 	bpl.w	40809c <_svfprintf_r+0x3f4>
  40859e:	9b24      	ldr	r3, [sp, #144]	; 0x90
  4085a0:	9918      	ldr	r1, [sp, #96]	; 0x60
  4085a2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
  4085a4:	6022      	str	r2, [r4, #0]
  4085a6:	3301      	adds	r3, #1
  4085a8:	448b      	add	fp, r1
  4085aa:	2b07      	cmp	r3, #7
  4085ac:	f8cd b094 	str.w	fp, [sp, #148]	; 0x94
  4085b0:	6061      	str	r1, [r4, #4]
  4085b2:	9324      	str	r3, [sp, #144]	; 0x90
  4085b4:	f300 8390 	bgt.w	408cd8 <_svfprintf_r+0x1030>
  4085b8:	3408      	adds	r4, #8
  4085ba:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  4085bc:	1e5d      	subs	r5, r3, #1
  4085be:	2d00      	cmp	r5, #0
  4085c0:	f77f ad6c 	ble.w	40809c <_svfprintf_r+0x3f4>
  4085c4:	2d10      	cmp	r5, #16
  4085c6:	9b24      	ldr	r3, [sp, #144]	; 0x90
  4085c8:	f8df 91f8 	ldr.w	r9, [pc, #504]	; 4087c4 <_svfprintf_r+0xb1c>
  4085cc:	f340 81ba 	ble.w	408944 <_svfprintf_r+0xc9c>
  4085d0:	f04f 0810 	mov.w	r8, #16
  4085d4:	465a      	mov	r2, fp
  4085d6:	f8dd a020 	ldr.w	sl, [sp, #32]
  4085da:	e004      	b.n	4085e6 <_svfprintf_r+0x93e>
  4085dc:	3408      	adds	r4, #8
  4085de:	3d10      	subs	r5, #16
  4085e0:	2d10      	cmp	r5, #16
  4085e2:	f340 81ae 	ble.w	408942 <_svfprintf_r+0xc9a>
  4085e6:	3301      	adds	r3, #1
  4085e8:	3210      	adds	r2, #16
  4085ea:	2b07      	cmp	r3, #7
  4085ec:	9225      	str	r2, [sp, #148]	; 0x94
  4085ee:	9324      	str	r3, [sp, #144]	; 0x90
  4085f0:	f8c4 9000 	str.w	r9, [r4]
  4085f4:	f8c4 8004 	str.w	r8, [r4, #4]
  4085f8:	ddf0      	ble.n	4085dc <_svfprintf_r+0x934>
  4085fa:	4650      	mov	r0, sl
  4085fc:	4631      	mov	r1, r6
  4085fe:	aa23      	add	r2, sp, #140	; 0x8c
  408600:	f004 fb5e 	bl	40ccc0 <__ssprint_r>
  408604:	2800      	cmp	r0, #0
  408606:	f47f ac15 	bne.w	407e34 <_svfprintf_r+0x18c>
  40860a:	9a25      	ldr	r2, [sp, #148]	; 0x94
  40860c:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40860e:	463c      	mov	r4, r7
  408610:	e7e5      	b.n	4085de <_svfprintf_r+0x936>
  408612:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  408614:	9a09      	ldr	r2, [sp, #36]	; 0x24
  408616:	ebc2 0a03 	rsb	sl, r2, r3
  40861a:	f1ba 0f00 	cmp.w	sl, #0
  40861e:	f77f ace7 	ble.w	407ff0 <_svfprintf_r+0x348>
  408622:	f1ba 0f10 	cmp.w	sl, #16
  408626:	9a24      	ldr	r2, [sp, #144]	; 0x90
  408628:	f8df 9198 	ldr.w	r9, [pc, #408]	; 4087c4 <_svfprintf_r+0xb1c>
  40862c:	dd2b      	ble.n	408686 <_svfprintf_r+0x9de>
  40862e:	4649      	mov	r1, r9
  408630:	465b      	mov	r3, fp
  408632:	46a9      	mov	r9, r5
  408634:	f04f 0810 	mov.w	r8, #16
  408638:	f8dd b020 	ldr.w	fp, [sp, #32]
  40863c:	460d      	mov	r5, r1
  40863e:	e006      	b.n	40864e <_svfprintf_r+0x9a6>
  408640:	f1aa 0a10 	sub.w	sl, sl, #16
  408644:	f1ba 0f10 	cmp.w	sl, #16
  408648:	f104 0408 	add.w	r4, r4, #8
  40864c:	dd17      	ble.n	40867e <_svfprintf_r+0x9d6>
  40864e:	3201      	adds	r2, #1
  408650:	3310      	adds	r3, #16
  408652:	2a07      	cmp	r2, #7
  408654:	9325      	str	r3, [sp, #148]	; 0x94
  408656:	9224      	str	r2, [sp, #144]	; 0x90
  408658:	e884 0120 	stmia.w	r4, {r5, r8}
  40865c:	ddf0      	ble.n	408640 <_svfprintf_r+0x998>
  40865e:	4658      	mov	r0, fp
  408660:	4631      	mov	r1, r6
  408662:	aa23      	add	r2, sp, #140	; 0x8c
  408664:	f004 fb2c 	bl	40ccc0 <__ssprint_r>
  408668:	2800      	cmp	r0, #0
  40866a:	f47f abe3 	bne.w	407e34 <_svfprintf_r+0x18c>
  40866e:	f1aa 0a10 	sub.w	sl, sl, #16
  408672:	f1ba 0f10 	cmp.w	sl, #16
  408676:	9b25      	ldr	r3, [sp, #148]	; 0x94
  408678:	9a24      	ldr	r2, [sp, #144]	; 0x90
  40867a:	463c      	mov	r4, r7
  40867c:	dce7      	bgt.n	40864e <_svfprintf_r+0x9a6>
  40867e:	469b      	mov	fp, r3
  408680:	462b      	mov	r3, r5
  408682:	464d      	mov	r5, r9
  408684:	4699      	mov	r9, r3
  408686:	3201      	adds	r2, #1
  408688:	44d3      	add	fp, sl
  40868a:	2a07      	cmp	r2, #7
  40868c:	f8cd b094 	str.w	fp, [sp, #148]	; 0x94
  408690:	9224      	str	r2, [sp, #144]	; 0x90
  408692:	e884 0600 	stmia.w	r4, {r9, sl}
  408696:	f300 8252 	bgt.w	408b3e <_svfprintf_r+0xe96>
  40869a:	3408      	adds	r4, #8
  40869c:	e4a8      	b.n	407ff0 <_svfprintf_r+0x348>
  40869e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  4086a0:	9d24      	ldr	r5, [sp, #144]	; 0x90
  4086a2:	2b01      	cmp	r3, #1
  4086a4:	f340 8220 	ble.w	408ae8 <_svfprintf_r+0xe40>
  4086a8:	9b10      	ldr	r3, [sp, #64]	; 0x40
  4086aa:	6023      	str	r3, [r4, #0]
  4086ac:	3501      	adds	r5, #1
  4086ae:	f10b 0301 	add.w	r3, fp, #1
  4086b2:	2201      	movs	r2, #1
  4086b4:	2d07      	cmp	r5, #7
  4086b6:	9325      	str	r3, [sp, #148]	; 0x94
  4086b8:	9524      	str	r5, [sp, #144]	; 0x90
  4086ba:	6062      	str	r2, [r4, #4]
  4086bc:	f300 8226 	bgt.w	408b0c <_svfprintf_r+0xe64>
  4086c0:	3408      	adds	r4, #8
  4086c2:	9918      	ldr	r1, [sp, #96]	; 0x60
  4086c4:	6061      	str	r1, [r4, #4]
  4086c6:	3501      	adds	r5, #1
  4086c8:	eb03 0b01 	add.w	fp, r3, r1
  4086cc:	2d07      	cmp	r5, #7
  4086ce:	9b17      	ldr	r3, [sp, #92]	; 0x5c
  4086d0:	f8cd b094 	str.w	fp, [sp, #148]	; 0x94
  4086d4:	9524      	str	r5, [sp, #144]	; 0x90
  4086d6:	6023      	str	r3, [r4, #0]
  4086d8:	f300 8224 	bgt.w	408b24 <_svfprintf_r+0xe7c>
  4086dc:	3408      	adds	r4, #8
  4086de:	2300      	movs	r3, #0
  4086e0:	9814      	ldr	r0, [sp, #80]	; 0x50
  4086e2:	9915      	ldr	r1, [sp, #84]	; 0x54
  4086e4:	2200      	movs	r2, #0
  4086e6:	f7fd fdcd 	bl	406284 <__aeabi_dcmpeq>
  4086ea:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  4086ec:	2800      	cmp	r0, #0
  4086ee:	f040 80de 	bne.w	4088ae <_svfprintf_r+0xc06>
  4086f2:	9a10      	ldr	r2, [sp, #64]	; 0x40
  4086f4:	3b01      	subs	r3, #1
  4086f6:	3501      	adds	r5, #1
  4086f8:	3201      	adds	r2, #1
  4086fa:	449b      	add	fp, r3
  4086fc:	2d07      	cmp	r5, #7
  4086fe:	9524      	str	r5, [sp, #144]	; 0x90
  408700:	f8cd b094 	str.w	fp, [sp, #148]	; 0x94
  408704:	6022      	str	r2, [r4, #0]
  408706:	6063      	str	r3, [r4, #4]
  408708:	f300 810e 	bgt.w	408928 <_svfprintf_r+0xc80>
  40870c:	3408      	adds	r4, #8
  40870e:	9a19      	ldr	r2, [sp, #100]	; 0x64
  408710:	6062      	str	r2, [r4, #4]
  408712:	3501      	adds	r5, #1
  408714:	4493      	add	fp, r2
  408716:	ab1f      	add	r3, sp, #124	; 0x7c
  408718:	2d07      	cmp	r5, #7
  40871a:	f8cd b094 	str.w	fp, [sp, #148]	; 0x94
  40871e:	9524      	str	r5, [sp, #144]	; 0x90
  408720:	6023      	str	r3, [r4, #0]
  408722:	f77f acba 	ble.w	40809a <_svfprintf_r+0x3f2>
  408726:	9808      	ldr	r0, [sp, #32]
  408728:	4631      	mov	r1, r6
  40872a:	aa23      	add	r2, sp, #140	; 0x8c
  40872c:	f004 fac8 	bl	40ccc0 <__ssprint_r>
  408730:	2800      	cmp	r0, #0
  408732:	f47f ab7f 	bne.w	407e34 <_svfprintf_r+0x18c>
  408736:	f8dd b094 	ldr.w	fp, [sp, #148]	; 0x94
  40873a:	463c      	mov	r4, r7
  40873c:	e4ae      	b.n	40809c <_svfprintf_r+0x3f4>
  40873e:	2b00      	cmp	r3, #0
  408740:	d132      	bne.n	4087a8 <_svfprintf_r+0xb00>
  408742:	9b07      	ldr	r3, [sp, #28]
  408744:	07d8      	lsls	r0, r3, #31
  408746:	d52f      	bpl.n	4087a8 <_svfprintf_r+0xb00>
  408748:	f50d 7b80 	add.w	fp, sp, #256	; 0x100
  40874c:	2330      	movs	r3, #48	; 0x30
  40874e:	f80b 3d41 	strb.w	r3, [fp, #-65]!
  408752:	ebcb 0307 	rsb	r3, fp, r7
  408756:	930d      	str	r3, [sp, #52]	; 0x34
  408758:	f8cd b040 	str.w	fp, [sp, #64]	; 0x40
  40875c:	f7ff bbbc 	b.w	407ed8 <_svfprintf_r+0x230>
  408760:	9808      	ldr	r0, [sp, #32]
  408762:	4631      	mov	r1, r6
  408764:	aa23      	add	r2, sp, #140	; 0x8c
  408766:	f004 faab 	bl	40ccc0 <__ssprint_r>
  40876a:	2800      	cmp	r0, #0
  40876c:	f47f ab62 	bne.w	407e34 <_svfprintf_r+0x18c>
  408770:	f8dd b094 	ldr.w	fp, [sp, #148]	; 0x94
  408774:	463c      	mov	r4, r7
  408776:	e47f      	b.n	408078 <_svfprintf_r+0x3d0>
  408778:	9808      	ldr	r0, [sp, #32]
  40877a:	4631      	mov	r1, r6
  40877c:	aa23      	add	r2, sp, #140	; 0x8c
  40877e:	f004 fa9f 	bl	40ccc0 <__ssprint_r>
  408782:	2800      	cmp	r0, #0
  408784:	f47f ab56 	bne.w	407e34 <_svfprintf_r+0x18c>
  408788:	f8dd b094 	ldr.w	fp, [sp, #148]	; 0x94
  40878c:	463c      	mov	r4, r7
  40878e:	e41a      	b.n	407fc6 <_svfprintf_r+0x31e>
  408790:	9808      	ldr	r0, [sp, #32]
  408792:	4631      	mov	r1, r6
  408794:	aa23      	add	r2, sp, #140	; 0x8c
  408796:	f004 fa93 	bl	40ccc0 <__ssprint_r>
  40879a:	2800      	cmp	r0, #0
  40879c:	f47f ab4a 	bne.w	407e34 <_svfprintf_r+0x18c>
  4087a0:	f8dd b094 	ldr.w	fp, [sp, #148]	; 0x94
  4087a4:	463c      	mov	r4, r7
  4087a6:	e41f      	b.n	407fe8 <_svfprintf_r+0x340>
  4087a8:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
  4087ac:	9710      	str	r7, [sp, #64]	; 0x40
  4087ae:	f7ff bb93 	b.w	407ed8 <_svfprintf_r+0x230>
  4087b2:	bf00      	nop
  4087b4:	0040fe8c 	.word	0x0040fe8c
  4087b8:	0040feac 	.word	0x0040feac
  4087bc:	0040fcdc 	.word	0x0040fcdc
  4087c0:	0040fe88 	.word	0x0040fe88
  4087c4:	0040fe68 	.word	0x0040fe68
  4087c8:	9816      	ldr	r0, [sp, #88]	; 0x58
  4087ca:	46bb      	mov	fp, r7
  4087cc:	ea4f 1318 	mov.w	r3, r8, lsr #4
  4087d0:	f008 010f 	and.w	r1, r8, #15
  4087d4:	ea43 7309 	orr.w	r3, r3, r9, lsl #28
  4087d8:	ea4f 1219 	mov.w	r2, r9, lsr #4
  4087dc:	4698      	mov	r8, r3
  4087de:	4691      	mov	r9, r2
  4087e0:	5c43      	ldrb	r3, [r0, r1]
  4087e2:	f80b 3d01 	strb.w	r3, [fp, #-1]!
  4087e6:	ea58 0309 	orrs.w	r3, r8, r9
  4087ea:	d1ef      	bne.n	4087cc <_svfprintf_r+0xb24>
  4087ec:	465b      	mov	r3, fp
  4087ee:	f8cd b040 	str.w	fp, [sp, #64]	; 0x40
  4087f2:	1afb      	subs	r3, r7, r3
  4087f4:	930d      	str	r3, [sp, #52]	; 0x34
  4087f6:	f7ff bb6f 	b.w	407ed8 <_svfprintf_r+0x230>
  4087fa:	9d1d      	ldr	r5, [sp, #116]	; 0x74
  4087fc:	2d00      	cmp	r5, #0
  4087fe:	f340 8205 	ble.w	408c0c <_svfprintf_r+0xf64>
  408802:	9a13      	ldr	r2, [sp, #76]	; 0x4c
  408804:	9912      	ldr	r1, [sp, #72]	; 0x48
  408806:	428a      	cmp	r2, r1
  408808:	4613      	mov	r3, r2
  40880a:	bfa8      	it	ge
  40880c:	460b      	movge	r3, r1
  40880e:	461d      	mov	r5, r3
  408810:	9910      	ldr	r1, [sp, #64]	; 0x40
  408812:	2d00      	cmp	r5, #0
  408814:	eb01 0a02 	add.w	sl, r1, r2
  408818:	dd0b      	ble.n	408832 <_svfprintf_r+0xb8a>
  40881a:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40881c:	6021      	str	r1, [r4, #0]
  40881e:	3301      	adds	r3, #1
  408820:	44ab      	add	fp, r5
  408822:	2b07      	cmp	r3, #7
  408824:	f8cd b094 	str.w	fp, [sp, #148]	; 0x94
  408828:	6065      	str	r5, [r4, #4]
  40882a:	9324      	str	r3, [sp, #144]	; 0x90
  40882c:	f300 834d 	bgt.w	408eca <_svfprintf_r+0x1222>
  408830:	3408      	adds	r4, #8
  408832:	9b12      	ldr	r3, [sp, #72]	; 0x48
  408834:	2d00      	cmp	r5, #0
  408836:	bfa8      	it	ge
  408838:	1b5b      	subge	r3, r3, r5
  40883a:	2b00      	cmp	r3, #0
  40883c:	461d      	mov	r5, r3
  40883e:	f340 80f5 	ble.w	408a2c <_svfprintf_r+0xd84>
  408842:	2d10      	cmp	r5, #16
  408844:	9b24      	ldr	r3, [sp, #144]	; 0x90
  408846:	f8df 95f4 	ldr.w	r9, [pc, #1524]	; 408e3c <_svfprintf_r+0x1194>
  40884a:	f340 81c6 	ble.w	408bda <_svfprintf_r+0xf32>
  40884e:	465a      	mov	r2, fp
  408850:	f04f 0810 	mov.w	r8, #16
  408854:	f8dd b020 	ldr.w	fp, [sp, #32]
  408858:	e004      	b.n	408864 <_svfprintf_r+0xbbc>
  40885a:	3408      	adds	r4, #8
  40885c:	3d10      	subs	r5, #16
  40885e:	2d10      	cmp	r5, #16
  408860:	f340 81ba 	ble.w	408bd8 <_svfprintf_r+0xf30>
  408864:	3301      	adds	r3, #1
  408866:	3210      	adds	r2, #16
  408868:	2b07      	cmp	r3, #7
  40886a:	9225      	str	r2, [sp, #148]	; 0x94
  40886c:	9324      	str	r3, [sp, #144]	; 0x90
  40886e:	f8c4 9000 	str.w	r9, [r4]
  408872:	f8c4 8004 	str.w	r8, [r4, #4]
  408876:	ddf0      	ble.n	40885a <_svfprintf_r+0xbb2>
  408878:	4658      	mov	r0, fp
  40887a:	4631      	mov	r1, r6
  40887c:	aa23      	add	r2, sp, #140	; 0x8c
  40887e:	f004 fa1f 	bl	40ccc0 <__ssprint_r>
  408882:	2800      	cmp	r0, #0
  408884:	f47f aad6 	bne.w	407e34 <_svfprintf_r+0x18c>
  408888:	9a25      	ldr	r2, [sp, #148]	; 0x94
  40888a:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40888c:	463c      	mov	r4, r7
  40888e:	e7e5      	b.n	40885c <_svfprintf_r+0xbb4>
  408890:	9808      	ldr	r0, [sp, #32]
  408892:	4631      	mov	r1, r6
  408894:	aa23      	add	r2, sp, #140	; 0x8c
  408896:	f004 fa13 	bl	40ccc0 <__ssprint_r>
  40889a:	2800      	cmp	r0, #0
  40889c:	f47f aaca 	bne.w	407e34 <_svfprintf_r+0x18c>
  4088a0:	f89d c06f 	ldrb.w	ip, [sp, #111]	; 0x6f
  4088a4:	f8dd b094 	ldr.w	fp, [sp, #148]	; 0x94
  4088a8:	463c      	mov	r4, r7
  4088aa:	f7ff bb79 	b.w	407fa0 <_svfprintf_r+0x2f8>
  4088ae:	f103 38ff 	add.w	r8, r3, #4294967295
  4088b2:	f1b8 0f00 	cmp.w	r8, #0
  4088b6:	f77f af2a 	ble.w	40870e <_svfprintf_r+0xa66>
  4088ba:	f1b8 0f10 	cmp.w	r8, #16
  4088be:	f8df 957c 	ldr.w	r9, [pc, #1404]	; 408e3c <_svfprintf_r+0x1194>
  4088c2:	dd25      	ble.n	408910 <_svfprintf_r+0xc68>
  4088c4:	465b      	mov	r3, fp
  4088c6:	f04f 0a10 	mov.w	sl, #16
  4088ca:	f8dd b020 	ldr.w	fp, [sp, #32]
  4088ce:	e006      	b.n	4088de <_svfprintf_r+0xc36>
  4088d0:	f1a8 0810 	sub.w	r8, r8, #16
  4088d4:	f1b8 0f10 	cmp.w	r8, #16
  4088d8:	f104 0408 	add.w	r4, r4, #8
  4088dc:	dd17      	ble.n	40890e <_svfprintf_r+0xc66>
  4088de:	3501      	adds	r5, #1
  4088e0:	3310      	adds	r3, #16
  4088e2:	2d07      	cmp	r5, #7
  4088e4:	9325      	str	r3, [sp, #148]	; 0x94
  4088e6:	9524      	str	r5, [sp, #144]	; 0x90
  4088e8:	e884 0600 	stmia.w	r4, {r9, sl}
  4088ec:	ddf0      	ble.n	4088d0 <_svfprintf_r+0xc28>
  4088ee:	4658      	mov	r0, fp
  4088f0:	4631      	mov	r1, r6
  4088f2:	aa23      	add	r2, sp, #140	; 0x8c
  4088f4:	f004 f9e4 	bl	40ccc0 <__ssprint_r>
  4088f8:	2800      	cmp	r0, #0
  4088fa:	f47f aa9b 	bne.w	407e34 <_svfprintf_r+0x18c>
  4088fe:	f1a8 0810 	sub.w	r8, r8, #16
  408902:	f1b8 0f10 	cmp.w	r8, #16
  408906:	9b25      	ldr	r3, [sp, #148]	; 0x94
  408908:	9d24      	ldr	r5, [sp, #144]	; 0x90
  40890a:	463c      	mov	r4, r7
  40890c:	dce7      	bgt.n	4088de <_svfprintf_r+0xc36>
  40890e:	469b      	mov	fp, r3
  408910:	3501      	adds	r5, #1
  408912:	44c3      	add	fp, r8
  408914:	2d07      	cmp	r5, #7
  408916:	f8cd b094 	str.w	fp, [sp, #148]	; 0x94
  40891a:	9524      	str	r5, [sp, #144]	; 0x90
  40891c:	f8c4 9000 	str.w	r9, [r4]
  408920:	f8c4 8004 	str.w	r8, [r4, #4]
  408924:	f77f aef2 	ble.w	40870c <_svfprintf_r+0xa64>
  408928:	9808      	ldr	r0, [sp, #32]
  40892a:	4631      	mov	r1, r6
  40892c:	aa23      	add	r2, sp, #140	; 0x8c
  40892e:	f004 f9c7 	bl	40ccc0 <__ssprint_r>
  408932:	2800      	cmp	r0, #0
  408934:	f47f aa7e 	bne.w	407e34 <_svfprintf_r+0x18c>
  408938:	f8dd b094 	ldr.w	fp, [sp, #148]	; 0x94
  40893c:	9d24      	ldr	r5, [sp, #144]	; 0x90
  40893e:	463c      	mov	r4, r7
  408940:	e6e5      	b.n	40870e <_svfprintf_r+0xa66>
  408942:	4693      	mov	fp, r2
  408944:	3301      	adds	r3, #1
  408946:	44ab      	add	fp, r5
  408948:	2b07      	cmp	r3, #7
  40894a:	f8cd b094 	str.w	fp, [sp, #148]	; 0x94
  40894e:	9324      	str	r3, [sp, #144]	; 0x90
  408950:	f8c4 9000 	str.w	r9, [r4]
  408954:	6065      	str	r5, [r4, #4]
  408956:	f77f aba0 	ble.w	40809a <_svfprintf_r+0x3f2>
  40895a:	e6e4      	b.n	408726 <_svfprintf_r+0xa7e>
  40895c:	2b30      	cmp	r3, #48	; 0x30
  40895e:	9b10      	ldr	r3, [sp, #64]	; 0x40
  408960:	f43f af47 	beq.w	4087f2 <_svfprintf_r+0xb4a>
  408964:	3b01      	subs	r3, #1
  408966:	461a      	mov	r2, r3
  408968:	9310      	str	r3, [sp, #64]	; 0x40
  40896a:	1aba      	subs	r2, r7, r2
  40896c:	2330      	movs	r3, #48	; 0x30
  40896e:	920d      	str	r2, [sp, #52]	; 0x34
  408970:	f801 3c01 	strb.w	r3, [r1, #-1]
  408974:	f7ff bab0 	b.w	407ed8 <_svfprintf_r+0x230>
  408978:	46bb      	mov	fp, r7
  40897a:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
  40897e:	4640      	mov	r0, r8
  408980:	4649      	mov	r1, r9
  408982:	220a      	movs	r2, #10
  408984:	2300      	movs	r3, #0
  408986:	f004 fe99 	bl	40d6bc <__aeabi_uldivmod>
  40898a:	3230      	adds	r2, #48	; 0x30
  40898c:	4640      	mov	r0, r8
  40898e:	4649      	mov	r1, r9
  408990:	f80b 2d01 	strb.w	r2, [fp, #-1]!
  408994:	2300      	movs	r3, #0
  408996:	220a      	movs	r2, #10
  408998:	f004 fe90 	bl	40d6bc <__aeabi_uldivmod>
  40899c:	4680      	mov	r8, r0
  40899e:	4689      	mov	r9, r1
  4089a0:	ea58 0309 	orrs.w	r3, r8, r9
  4089a4:	d1eb      	bne.n	40897e <_svfprintf_r+0xcd6>
  4089a6:	465b      	mov	r3, fp
  4089a8:	1afb      	subs	r3, r7, r3
  4089aa:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
  4089ae:	f8cd b040 	str.w	fp, [sp, #64]	; 0x40
  4089b2:	930d      	str	r3, [sp, #52]	; 0x34
  4089b4:	f7ff ba90 	b.w	407ed8 <_svfprintf_r+0x230>
  4089b8:	990e      	ldr	r1, [sp, #56]	; 0x38
  4089ba:	680a      	ldr	r2, [r1, #0]
  4089bc:	3104      	adds	r1, #4
  4089be:	910e      	str	r1, [sp, #56]	; 0x38
  4089c0:	4690      	mov	r8, r2
  4089c2:	f04f 0900 	mov.w	r9, #0
  4089c6:	f7ff ba54 	b.w	407e72 <_svfprintf_r+0x1ca>
  4089ca:	990e      	ldr	r1, [sp, #56]	; 0x38
  4089cc:	680a      	ldr	r2, [r1, #0]
  4089ce:	3104      	adds	r1, #4
  4089d0:	2301      	movs	r3, #1
  4089d2:	910e      	str	r1, [sp, #56]	; 0x38
  4089d4:	4690      	mov	r8, r2
  4089d6:	f04f 0900 	mov.w	r9, #0
  4089da:	f7ff ba4a 	b.w	407e72 <_svfprintf_r+0x1ca>
  4089de:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  4089e0:	6813      	ldr	r3, [r2, #0]
  4089e2:	4698      	mov	r8, r3
  4089e4:	ea4f 79e3 	mov.w	r9, r3, asr #31
  4089e8:	4613      	mov	r3, r2
  4089ea:	3304      	adds	r3, #4
  4089ec:	4642      	mov	r2, r8
  4089ee:	930e      	str	r3, [sp, #56]	; 0x38
  4089f0:	2a00      	cmp	r2, #0
  4089f2:	464b      	mov	r3, r9
  4089f4:	f173 0300 	sbcs.w	r3, r3, #0
  4089f8:	f6bf abf5 	bge.w	4081e6 <_svfprintf_r+0x53e>
  4089fc:	f04f 0c2d 	mov.w	ip, #45	; 0x2d
  408a00:	f1d8 0800 	rsbs	r8, r8, #0
  408a04:	eb69 0949 	sbc.w	r9, r9, r9, lsl #1
  408a08:	f88d c06f 	strb.w	ip, [sp, #111]	; 0x6f
  408a0c:	f8cd a044 	str.w	sl, [sp, #68]	; 0x44
  408a10:	2301      	movs	r3, #1
  408a12:	f7ff ba34 	b.w	407e7e <_svfprintf_r+0x1d6>
  408a16:	9808      	ldr	r0, [sp, #32]
  408a18:	4631      	mov	r1, r6
  408a1a:	aa23      	add	r2, sp, #140	; 0x8c
  408a1c:	f004 f950 	bl	40ccc0 <__ssprint_r>
  408a20:	2800      	cmp	r0, #0
  408a22:	f47f aa07 	bne.w	407e34 <_svfprintf_r+0x18c>
  408a26:	f8dd b094 	ldr.w	fp, [sp, #148]	; 0x94
  408a2a:	463c      	mov	r4, r7
  408a2c:	9a10      	ldr	r2, [sp, #64]	; 0x40
  408a2e:	9912      	ldr	r1, [sp, #72]	; 0x48
  408a30:	9b1d      	ldr	r3, [sp, #116]	; 0x74
  408a32:	440a      	add	r2, r1
  408a34:	4690      	mov	r8, r2
  408a36:	9a13      	ldr	r2, [sp, #76]	; 0x4c
  408a38:	4293      	cmp	r3, r2
  408a3a:	db46      	blt.n	408aca <_svfprintf_r+0xe22>
  408a3c:	9a07      	ldr	r2, [sp, #28]
  408a3e:	07d0      	lsls	r0, r2, #31
  408a40:	d443      	bmi.n	408aca <_svfprintf_r+0xe22>
  408a42:	9a13      	ldr	r2, [sp, #76]	; 0x4c
  408a44:	ebc8 050a 	rsb	r5, r8, sl
  408a48:	1ad3      	subs	r3, r2, r3
  408a4a:	429d      	cmp	r5, r3
  408a4c:	bfa8      	it	ge
  408a4e:	461d      	movge	r5, r3
  408a50:	2d00      	cmp	r5, #0
  408a52:	dd0c      	ble.n	408a6e <_svfprintf_r+0xdc6>
  408a54:	9a24      	ldr	r2, [sp, #144]	; 0x90
  408a56:	f8c4 8000 	str.w	r8, [r4]
  408a5a:	3201      	adds	r2, #1
  408a5c:	44ab      	add	fp, r5
  408a5e:	2a07      	cmp	r2, #7
  408a60:	f8cd b094 	str.w	fp, [sp, #148]	; 0x94
  408a64:	6065      	str	r5, [r4, #4]
  408a66:	9224      	str	r2, [sp, #144]	; 0x90
  408a68:	f300 8267 	bgt.w	408f3a <_svfprintf_r+0x1292>
  408a6c:	3408      	adds	r4, #8
  408a6e:	2d00      	cmp	r5, #0
  408a70:	bfac      	ite	ge
  408a72:	1b5d      	subge	r5, r3, r5
  408a74:	461d      	movlt	r5, r3
  408a76:	2d00      	cmp	r5, #0
  408a78:	f77f ab10 	ble.w	40809c <_svfprintf_r+0x3f4>
  408a7c:	2d10      	cmp	r5, #16
  408a7e:	9b24      	ldr	r3, [sp, #144]	; 0x90
  408a80:	f8df 93b8 	ldr.w	r9, [pc, #952]	; 408e3c <_svfprintf_r+0x1194>
  408a84:	f77f af5e 	ble.w	408944 <_svfprintf_r+0xc9c>
  408a88:	f04f 0810 	mov.w	r8, #16
  408a8c:	465a      	mov	r2, fp
  408a8e:	f8dd a020 	ldr.w	sl, [sp, #32]
  408a92:	e004      	b.n	408a9e <_svfprintf_r+0xdf6>
  408a94:	3408      	adds	r4, #8
  408a96:	3d10      	subs	r5, #16
  408a98:	2d10      	cmp	r5, #16
  408a9a:	f77f af52 	ble.w	408942 <_svfprintf_r+0xc9a>
  408a9e:	3301      	adds	r3, #1
  408aa0:	3210      	adds	r2, #16
  408aa2:	2b07      	cmp	r3, #7
  408aa4:	9225      	str	r2, [sp, #148]	; 0x94
  408aa6:	9324      	str	r3, [sp, #144]	; 0x90
  408aa8:	f8c4 9000 	str.w	r9, [r4]
  408aac:	f8c4 8004 	str.w	r8, [r4, #4]
  408ab0:	ddf0      	ble.n	408a94 <_svfprintf_r+0xdec>
  408ab2:	4650      	mov	r0, sl
  408ab4:	4631      	mov	r1, r6
  408ab6:	aa23      	add	r2, sp, #140	; 0x8c
  408ab8:	f004 f902 	bl	40ccc0 <__ssprint_r>
  408abc:	2800      	cmp	r0, #0
  408abe:	f47f a9b9 	bne.w	407e34 <_svfprintf_r+0x18c>
  408ac2:	9a25      	ldr	r2, [sp, #148]	; 0x94
  408ac4:	9b24      	ldr	r3, [sp, #144]	; 0x90
  408ac6:	463c      	mov	r4, r7
  408ac8:	e7e5      	b.n	408a96 <_svfprintf_r+0xdee>
  408aca:	9a24      	ldr	r2, [sp, #144]	; 0x90
  408acc:	9818      	ldr	r0, [sp, #96]	; 0x60
  408ace:	9917      	ldr	r1, [sp, #92]	; 0x5c
  408ad0:	6021      	str	r1, [r4, #0]
  408ad2:	3201      	adds	r2, #1
  408ad4:	4483      	add	fp, r0
  408ad6:	2a07      	cmp	r2, #7
  408ad8:	f8cd b094 	str.w	fp, [sp, #148]	; 0x94
  408adc:	6060      	str	r0, [r4, #4]
  408ade:	9224      	str	r2, [sp, #144]	; 0x90
  408ae0:	f300 820a 	bgt.w	408ef8 <_svfprintf_r+0x1250>
  408ae4:	3408      	adds	r4, #8
  408ae6:	e7ac      	b.n	408a42 <_svfprintf_r+0xd9a>
  408ae8:	9b07      	ldr	r3, [sp, #28]
  408aea:	07d9      	lsls	r1, r3, #31
  408aec:	f53f addc 	bmi.w	4086a8 <_svfprintf_r+0xa00>
  408af0:	9b10      	ldr	r3, [sp, #64]	; 0x40
  408af2:	6023      	str	r3, [r4, #0]
  408af4:	3501      	adds	r5, #1
  408af6:	f10b 0b01 	add.w	fp, fp, #1
  408afa:	2301      	movs	r3, #1
  408afc:	2d07      	cmp	r5, #7
  408afe:	f8cd b094 	str.w	fp, [sp, #148]	; 0x94
  408b02:	9524      	str	r5, [sp, #144]	; 0x90
  408b04:	6063      	str	r3, [r4, #4]
  408b06:	f77f ae01 	ble.w	40870c <_svfprintf_r+0xa64>
  408b0a:	e70d      	b.n	408928 <_svfprintf_r+0xc80>
  408b0c:	9808      	ldr	r0, [sp, #32]
  408b0e:	4631      	mov	r1, r6
  408b10:	aa23      	add	r2, sp, #140	; 0x8c
  408b12:	f004 f8d5 	bl	40ccc0 <__ssprint_r>
  408b16:	2800      	cmp	r0, #0
  408b18:	f47f a98c 	bne.w	407e34 <_svfprintf_r+0x18c>
  408b1c:	9b25      	ldr	r3, [sp, #148]	; 0x94
  408b1e:	9d24      	ldr	r5, [sp, #144]	; 0x90
  408b20:	463c      	mov	r4, r7
  408b22:	e5ce      	b.n	4086c2 <_svfprintf_r+0xa1a>
  408b24:	9808      	ldr	r0, [sp, #32]
  408b26:	4631      	mov	r1, r6
  408b28:	aa23      	add	r2, sp, #140	; 0x8c
  408b2a:	f004 f8c9 	bl	40ccc0 <__ssprint_r>
  408b2e:	2800      	cmp	r0, #0
  408b30:	f47f a980 	bne.w	407e34 <_svfprintf_r+0x18c>
  408b34:	f8dd b094 	ldr.w	fp, [sp, #148]	; 0x94
  408b38:	9d24      	ldr	r5, [sp, #144]	; 0x90
  408b3a:	463c      	mov	r4, r7
  408b3c:	e5cf      	b.n	4086de <_svfprintf_r+0xa36>
  408b3e:	9808      	ldr	r0, [sp, #32]
  408b40:	4631      	mov	r1, r6
  408b42:	aa23      	add	r2, sp, #140	; 0x8c
  408b44:	f004 f8bc 	bl	40ccc0 <__ssprint_r>
  408b48:	2800      	cmp	r0, #0
  408b4a:	f47f a973 	bne.w	407e34 <_svfprintf_r+0x18c>
  408b4e:	f8dd b094 	ldr.w	fp, [sp, #148]	; 0x94
  408b52:	463c      	mov	r4, r7
  408b54:	f7ff ba4c 	b.w	407ff0 <_svfprintf_r+0x348>
  408b58:	f004 f83c 	bl	40cbd4 <__fpclassifyd>
  408b5c:	2800      	cmp	r0, #0
  408b5e:	f040 80c7 	bne.w	408cf0 <_svfprintf_r+0x1048>
  408b62:	4686      	mov	lr, r0
  408b64:	4ab2      	ldr	r2, [pc, #712]	; (408e30 <_svfprintf_r+0x1188>)
  408b66:	4bb3      	ldr	r3, [pc, #716]	; (408e34 <_svfprintf_r+0x118c>)
  408b68:	9011      	str	r0, [sp, #68]	; 0x44
  408b6a:	9807      	ldr	r0, [sp, #28]
  408b6c:	f89d c06f 	ldrb.w	ip, [sp, #111]	; 0x6f
  408b70:	f8cd e048 	str.w	lr, [sp, #72]	; 0x48
  408b74:	2103      	movs	r1, #3
  408b76:	f020 0080 	bic.w	r0, r0, #128	; 0x80
  408b7a:	2d47      	cmp	r5, #71	; 0x47
  408b7c:	bfd8      	it	le
  408b7e:	461a      	movle	r2, r3
  408b80:	9109      	str	r1, [sp, #36]	; 0x24
  408b82:	9007      	str	r0, [sp, #28]
  408b84:	9210      	str	r2, [sp, #64]	; 0x40
  408b86:	910d      	str	r1, [sp, #52]	; 0x34
  408b88:	f7ff b9ae 	b.w	407ee8 <_svfprintf_r+0x240>
  408b8c:	9b07      	ldr	r3, [sp, #28]
  408b8e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  408b90:	f013 0f40 	tst.w	r3, #64	; 0x40
  408b94:	4613      	mov	r3, r2
  408b96:	f43f ac2e 	beq.w	4083f6 <_svfprintf_r+0x74e>
  408b9a:	3304      	adds	r3, #4
  408b9c:	f8b2 8000 	ldrh.w	r8, [r2]
  408ba0:	930e      	str	r3, [sp, #56]	; 0x38
  408ba2:	f04f 0900 	mov.w	r9, #0
  408ba6:	f7ff bb37 	b.w	408218 <_svfprintf_r+0x570>
  408baa:	9b07      	ldr	r3, [sp, #28]
  408bac:	06db      	lsls	r3, r3, #27
  408bae:	d40b      	bmi.n	408bc8 <_svfprintf_r+0xf20>
  408bb0:	9b07      	ldr	r3, [sp, #28]
  408bb2:	065d      	lsls	r5, r3, #25
  408bb4:	d508      	bpl.n	408bc8 <_svfprintf_r+0xf20>
  408bb6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  408bb8:	6813      	ldr	r3, [r2, #0]
  408bba:	3204      	adds	r2, #4
  408bbc:	920e      	str	r2, [sp, #56]	; 0x38
  408bbe:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
  408bc2:	801a      	strh	r2, [r3, #0]
  408bc4:	f7ff b895 	b.w	407cf2 <_svfprintf_r+0x4a>
  408bc8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  408bca:	6813      	ldr	r3, [r2, #0]
  408bcc:	3204      	adds	r2, #4
  408bce:	920e      	str	r2, [sp, #56]	; 0x38
  408bd0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  408bd2:	601a      	str	r2, [r3, #0]
  408bd4:	f7ff b88d 	b.w	407cf2 <_svfprintf_r+0x4a>
  408bd8:	4693      	mov	fp, r2
  408bda:	3301      	adds	r3, #1
  408bdc:	44ab      	add	fp, r5
  408bde:	2b07      	cmp	r3, #7
  408be0:	f8cd b094 	str.w	fp, [sp, #148]	; 0x94
  408be4:	9324      	str	r3, [sp, #144]	; 0x90
  408be6:	f8c4 9000 	str.w	r9, [r4]
  408bea:	6065      	str	r5, [r4, #4]
  408bec:	f73f af13 	bgt.w	408a16 <_svfprintf_r+0xd6e>
  408bf0:	3408      	adds	r4, #8
  408bf2:	e71b      	b.n	408a2c <_svfprintf_r+0xd84>
  408bf4:	9808      	ldr	r0, [sp, #32]
  408bf6:	4631      	mov	r1, r6
  408bf8:	aa23      	add	r2, sp, #140	; 0x8c
  408bfa:	f004 f861 	bl	40ccc0 <__ssprint_r>
  408bfe:	2800      	cmp	r0, #0
  408c00:	f47f a918 	bne.w	407e34 <_svfprintf_r+0x18c>
  408c04:	f8dd b094 	ldr.w	fp, [sp, #148]	; 0x94
  408c08:	463c      	mov	r4, r7
  408c0a:	e4c0      	b.n	40858e <_svfprintf_r+0x8e6>
  408c0c:	9b24      	ldr	r3, [sp, #144]	; 0x90
  408c0e:	4a8a      	ldr	r2, [pc, #552]	; (408e38 <_svfprintf_r+0x1190>)
  408c10:	6022      	str	r2, [r4, #0]
  408c12:	3301      	adds	r3, #1
  408c14:	f10b 0b01 	add.w	fp, fp, #1
  408c18:	2201      	movs	r2, #1
  408c1a:	2b07      	cmp	r3, #7
  408c1c:	f8cd b094 	str.w	fp, [sp, #148]	; 0x94
  408c20:	9324      	str	r3, [sp, #144]	; 0x90
  408c22:	6062      	str	r2, [r4, #4]
  408c24:	f300 80f4 	bgt.w	408e10 <_svfprintf_r+0x1168>
  408c28:	3408      	adds	r4, #8
  408c2a:	b92d      	cbnz	r5, 408c38 <_svfprintf_r+0xf90>
  408c2c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  408c2e:	b91b      	cbnz	r3, 408c38 <_svfprintf_r+0xf90>
  408c30:	9b07      	ldr	r3, [sp, #28]
  408c32:	07db      	lsls	r3, r3, #31
  408c34:	f57f aa32 	bpl.w	40809c <_svfprintf_r+0x3f4>
  408c38:	9b24      	ldr	r3, [sp, #144]	; 0x90
  408c3a:	9818      	ldr	r0, [sp, #96]	; 0x60
  408c3c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
  408c3e:	6022      	str	r2, [r4, #0]
  408c40:	3301      	adds	r3, #1
  408c42:	eb0b 0100 	add.w	r1, fp, r0
  408c46:	2b07      	cmp	r3, #7
  408c48:	9125      	str	r1, [sp, #148]	; 0x94
  408c4a:	6060      	str	r0, [r4, #4]
  408c4c:	9324      	str	r3, [sp, #144]	; 0x90
  408c4e:	f300 81f3 	bgt.w	409038 <_svfprintf_r+0x1390>
  408c52:	f104 0208 	add.w	r2, r4, #8
  408c56:	426d      	negs	r5, r5
  408c58:	2d00      	cmp	r5, #0
  408c5a:	f340 80fc 	ble.w	408e56 <_svfprintf_r+0x11ae>
  408c5e:	2d10      	cmp	r5, #16
  408c60:	f8df 91d8 	ldr.w	r9, [pc, #472]	; 408e3c <_svfprintf_r+0x1194>
  408c64:	f340 813d 	ble.w	408ee2 <_svfprintf_r+0x123a>
  408c68:	2410      	movs	r4, #16
  408c6a:	f8dd 8020 	ldr.w	r8, [sp, #32]
  408c6e:	e004      	b.n	408c7a <_svfprintf_r+0xfd2>
  408c70:	3208      	adds	r2, #8
  408c72:	3d10      	subs	r5, #16
  408c74:	2d10      	cmp	r5, #16
  408c76:	f340 8134 	ble.w	408ee2 <_svfprintf_r+0x123a>
  408c7a:	3301      	adds	r3, #1
  408c7c:	3110      	adds	r1, #16
  408c7e:	2b07      	cmp	r3, #7
  408c80:	9125      	str	r1, [sp, #148]	; 0x94
  408c82:	9324      	str	r3, [sp, #144]	; 0x90
  408c84:	f8c2 9000 	str.w	r9, [r2]
  408c88:	6054      	str	r4, [r2, #4]
  408c8a:	ddf1      	ble.n	408c70 <_svfprintf_r+0xfc8>
  408c8c:	4640      	mov	r0, r8
  408c8e:	4631      	mov	r1, r6
  408c90:	aa23      	add	r2, sp, #140	; 0x8c
  408c92:	f004 f815 	bl	40ccc0 <__ssprint_r>
  408c96:	2800      	cmp	r0, #0
  408c98:	f47f a8cc 	bne.w	407e34 <_svfprintf_r+0x18c>
  408c9c:	9925      	ldr	r1, [sp, #148]	; 0x94
  408c9e:	9b24      	ldr	r3, [sp, #144]	; 0x90
  408ca0:	463a      	mov	r2, r7
  408ca2:	e7e6      	b.n	408c72 <_svfprintf_r+0xfca>
  408ca4:	9b25      	ldr	r3, [sp, #148]	; 0x94
  408ca6:	46b1      	mov	r9, r6
  408ca8:	2b00      	cmp	r3, #0
  408caa:	f43f a8c4 	beq.w	407e36 <_svfprintf_r+0x18e>
  408cae:	9808      	ldr	r0, [sp, #32]
  408cb0:	4631      	mov	r1, r6
  408cb2:	aa23      	add	r2, sp, #140	; 0x8c
  408cb4:	f004 f804 	bl	40ccc0 <__ssprint_r>
  408cb8:	f7ff b8bd 	b.w	407e36 <_svfprintf_r+0x18e>
  408cbc:	980c      	ldr	r0, [sp, #48]	; 0x30
  408cbe:	910e      	str	r1, [sp, #56]	; 0x38
  408cc0:	4240      	negs	r0, r0
  408cc2:	900c      	str	r0, [sp, #48]	; 0x30
  408cc4:	4619      	mov	r1, r3
  408cc6:	f7ff ba3f 	b.w	408148 <_svfprintf_r+0x4a0>
  408cca:	f041 0120 	orr.w	r1, r1, #32
  408cce:	9107      	str	r1, [sp, #28]
  408cd0:	785d      	ldrb	r5, [r3, #1]
  408cd2:	1c59      	adds	r1, r3, #1
  408cd4:	f7ff b83b 	b.w	407d4e <_svfprintf_r+0xa6>
  408cd8:	9808      	ldr	r0, [sp, #32]
  408cda:	4631      	mov	r1, r6
  408cdc:	aa23      	add	r2, sp, #140	; 0x8c
  408cde:	f003 ffef 	bl	40ccc0 <__ssprint_r>
  408ce2:	2800      	cmp	r0, #0
  408ce4:	f47f a8a6 	bne.w	407e34 <_svfprintf_r+0x18c>
  408ce8:	f8dd b094 	ldr.w	fp, [sp, #148]	; 0x94
  408cec:	463c      	mov	r4, r7
  408cee:	e464      	b.n	4085ba <_svfprintf_r+0x912>
  408cf0:	f025 0320 	bic.w	r3, r5, #32
  408cf4:	f1ba 3fff 	cmp.w	sl, #4294967295
  408cf8:	930d      	str	r3, [sp, #52]	; 0x34
  408cfa:	f000 8096 	beq.w	408e2a <_svfprintf_r+0x1182>
  408cfe:	2b47      	cmp	r3, #71	; 0x47
  408d00:	d105      	bne.n	408d0e <_svfprintf_r+0x1066>
  408d02:	f1ba 0f00 	cmp.w	sl, #0
  408d06:	bf14      	ite	ne
  408d08:	46d3      	movne	fp, sl
  408d0a:	f04f 0b01 	moveq.w	fp, #1
  408d0e:	9b07      	ldr	r3, [sp, #28]
  408d10:	f443 7380 	orr.w	r3, r3, #256	; 0x100
  408d14:	9311      	str	r3, [sp, #68]	; 0x44
  408d16:	9b15      	ldr	r3, [sp, #84]	; 0x54
  408d18:	f1b3 0a00 	subs.w	sl, r3, #0
  408d1c:	9b14      	ldr	r3, [sp, #80]	; 0x50
  408d1e:	9309      	str	r3, [sp, #36]	; 0x24
  408d20:	bfbb      	ittet	lt
  408d22:	4653      	movlt	r3, sl
  408d24:	f103 4a00 	addlt.w	sl, r3, #2147483648	; 0x80000000
  408d28:	2300      	movge	r3, #0
  408d2a:	232d      	movlt	r3, #45	; 0x2d
  408d2c:	2d66      	cmp	r5, #102	; 0x66
  408d2e:	930f      	str	r3, [sp, #60]	; 0x3c
  408d30:	f000 80ac 	beq.w	408e8c <_svfprintf_r+0x11e4>
  408d34:	2d46      	cmp	r5, #70	; 0x46
  408d36:	f000 80a9 	beq.w	408e8c <_svfprintf_r+0x11e4>
  408d3a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  408d3c:	9a09      	ldr	r2, [sp, #36]	; 0x24
  408d3e:	2b45      	cmp	r3, #69	; 0x45
  408d40:	bf0c      	ite	eq
  408d42:	f10b 0901 	addeq.w	r9, fp, #1
  408d46:	46d9      	movne	r9, fp
  408d48:	2002      	movs	r0, #2
  408d4a:	a91d      	add	r1, sp, #116	; 0x74
  408d4c:	e88d 0201 	stmia.w	sp, {r0, r9}
  408d50:	9102      	str	r1, [sp, #8]
  408d52:	a81e      	add	r0, sp, #120	; 0x78
  408d54:	a921      	add	r1, sp, #132	; 0x84
  408d56:	9003      	str	r0, [sp, #12]
  408d58:	4653      	mov	r3, sl
  408d5a:	9104      	str	r1, [sp, #16]
  408d5c:	9808      	ldr	r0, [sp, #32]
  408d5e:	f002 fc33 	bl	40b5c8 <_dtoa_r>
  408d62:	2d67      	cmp	r5, #103	; 0x67
  408d64:	9010      	str	r0, [sp, #64]	; 0x40
  408d66:	d002      	beq.n	408d6e <_svfprintf_r+0x10c6>
  408d68:	2d47      	cmp	r5, #71	; 0x47
  408d6a:	f040 809f 	bne.w	408eac <_svfprintf_r+0x1204>
  408d6e:	9b07      	ldr	r3, [sp, #28]
  408d70:	07db      	lsls	r3, r3, #31
  408d72:	f140 8189 	bpl.w	409088 <_svfprintf_r+0x13e0>
  408d76:	9b10      	ldr	r3, [sp, #64]	; 0x40
  408d78:	eb03 0809 	add.w	r8, r3, r9
  408d7c:	9809      	ldr	r0, [sp, #36]	; 0x24
  408d7e:	4651      	mov	r1, sl
  408d80:	2200      	movs	r2, #0
  408d82:	2300      	movs	r3, #0
  408d84:	f7fd fa7e 	bl	406284 <__aeabi_dcmpeq>
  408d88:	2800      	cmp	r0, #0
  408d8a:	f040 80fd 	bne.w	408f88 <_svfprintf_r+0x12e0>
  408d8e:	9b21      	ldr	r3, [sp, #132]	; 0x84
  408d90:	4598      	cmp	r8, r3
  408d92:	d906      	bls.n	408da2 <_svfprintf_r+0x10fa>
  408d94:	2130      	movs	r1, #48	; 0x30
  408d96:	1c5a      	adds	r2, r3, #1
  408d98:	9221      	str	r2, [sp, #132]	; 0x84
  408d9a:	7019      	strb	r1, [r3, #0]
  408d9c:	9b21      	ldr	r3, [sp, #132]	; 0x84
  408d9e:	4598      	cmp	r8, r3
  408da0:	d8f9      	bhi.n	408d96 <_svfprintf_r+0x10ee>
  408da2:	9a10      	ldr	r2, [sp, #64]	; 0x40
  408da4:	1a9b      	subs	r3, r3, r2
  408da6:	9313      	str	r3, [sp, #76]	; 0x4c
  408da8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  408daa:	2b47      	cmp	r3, #71	; 0x47
  408dac:	9b1d      	ldr	r3, [sp, #116]	; 0x74
  408dae:	f000 80de 	beq.w	408f6e <_svfprintf_r+0x12c6>
  408db2:	2d65      	cmp	r5, #101	; 0x65
  408db4:	f340 80f8 	ble.w	408fa8 <_svfprintf_r+0x1300>
  408db8:	2d66      	cmp	r5, #102	; 0x66
  408dba:	9312      	str	r3, [sp, #72]	; 0x48
  408dbc:	f000 8157 	beq.w	40906e <_svfprintf_r+0x13c6>
  408dc0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  408dc2:	9a12      	ldr	r2, [sp, #72]	; 0x48
  408dc4:	4293      	cmp	r3, r2
  408dc6:	f300 8144 	bgt.w	409052 <_svfprintf_r+0x13aa>
  408dca:	9b07      	ldr	r3, [sp, #28]
  408dcc:	07d9      	lsls	r1, r3, #31
  408dce:	f100 8173 	bmi.w	4090b8 <_svfprintf_r+0x1410>
  408dd2:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
  408dd6:	920d      	str	r2, [sp, #52]	; 0x34
  408dd8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  408dda:	2a00      	cmp	r2, #0
  408ddc:	f040 80bc 	bne.w	408f58 <_svfprintf_r+0x12b0>
  408de0:	9309      	str	r3, [sp, #36]	; 0x24
  408de2:	9b11      	ldr	r3, [sp, #68]	; 0x44
  408de4:	9307      	str	r3, [sp, #28]
  408de6:	9211      	str	r2, [sp, #68]	; 0x44
  408de8:	f89d c06f 	ldrb.w	ip, [sp, #111]	; 0x6f
  408dec:	f7ff b87c 	b.w	407ee8 <_svfprintf_r+0x240>
  408df0:	9808      	ldr	r0, [sp, #32]
  408df2:	2140      	movs	r1, #64	; 0x40
  408df4:	f7fe f82c 	bl	406e50 <_malloc_r>
  408df8:	f8c9 0000 	str.w	r0, [r9]
  408dfc:	f8c9 0010 	str.w	r0, [r9, #16]
  408e00:	2800      	cmp	r0, #0
  408e02:	f000 818c 	beq.w	40911e <_svfprintf_r+0x1476>
  408e06:	2340      	movs	r3, #64	; 0x40
  408e08:	f8c9 3014 	str.w	r3, [r9, #20]
  408e0c:	f7fe bf64 	b.w	407cd8 <_svfprintf_r+0x30>
  408e10:	9808      	ldr	r0, [sp, #32]
  408e12:	4631      	mov	r1, r6
  408e14:	aa23      	add	r2, sp, #140	; 0x8c
  408e16:	f003 ff53 	bl	40ccc0 <__ssprint_r>
  408e1a:	2800      	cmp	r0, #0
  408e1c:	f47f a80a 	bne.w	407e34 <_svfprintf_r+0x18c>
  408e20:	9d1d      	ldr	r5, [sp, #116]	; 0x74
  408e22:	f8dd b094 	ldr.w	fp, [sp, #148]	; 0x94
  408e26:	463c      	mov	r4, r7
  408e28:	e6ff      	b.n	408c2a <_svfprintf_r+0xf82>
  408e2a:	f04f 0b06 	mov.w	fp, #6
  408e2e:	e76e      	b.n	408d0e <_svfprintf_r+0x1066>
  408e30:	0040fe94 	.word	0x0040fe94
  408e34:	0040fe90 	.word	0x0040fe90
  408e38:	0040fcdc 	.word	0x0040fcdc
  408e3c:	0040fe68 	.word	0x0040fe68
  408e40:	9808      	ldr	r0, [sp, #32]
  408e42:	4631      	mov	r1, r6
  408e44:	aa23      	add	r2, sp, #140	; 0x8c
  408e46:	f003 ff3b 	bl	40ccc0 <__ssprint_r>
  408e4a:	2800      	cmp	r0, #0
  408e4c:	f47e aff2 	bne.w	407e34 <_svfprintf_r+0x18c>
  408e50:	9925      	ldr	r1, [sp, #148]	; 0x94
  408e52:	9b24      	ldr	r3, [sp, #144]	; 0x90
  408e54:	463a      	mov	r2, r7
  408e56:	9c13      	ldr	r4, [sp, #76]	; 0x4c
  408e58:	6054      	str	r4, [r2, #4]
  408e5a:	3301      	adds	r3, #1
  408e5c:	eb01 0b04 	add.w	fp, r1, r4
  408e60:	2b07      	cmp	r3, #7
  408e62:	9910      	ldr	r1, [sp, #64]	; 0x40
  408e64:	f8cd b094 	str.w	fp, [sp, #148]	; 0x94
  408e68:	9324      	str	r3, [sp, #144]	; 0x90
  408e6a:	6011      	str	r1, [r2, #0]
  408e6c:	f73f ac5b 	bgt.w	408726 <_svfprintf_r+0xa7e>
  408e70:	f102 0408 	add.w	r4, r2, #8
  408e74:	f7ff b912 	b.w	40809c <_svfprintf_r+0x3f4>
  408e78:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
  408e7c:	f7fe fee6 	bl	407c4c <strlen>
  408e80:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
  408e84:	900d      	str	r0, [sp, #52]	; 0x34
  408e86:	4603      	mov	r3, r0
  408e88:	f7ff ba1b 	b.w	4082c2 <_svfprintf_r+0x61a>
  408e8c:	2003      	movs	r0, #3
  408e8e:	a91d      	add	r1, sp, #116	; 0x74
  408e90:	e88d 0801 	stmia.w	sp, {r0, fp}
  408e94:	9102      	str	r1, [sp, #8]
  408e96:	a81e      	add	r0, sp, #120	; 0x78
  408e98:	a921      	add	r1, sp, #132	; 0x84
  408e9a:	9003      	str	r0, [sp, #12]
  408e9c:	9a09      	ldr	r2, [sp, #36]	; 0x24
  408e9e:	9104      	str	r1, [sp, #16]
  408ea0:	4653      	mov	r3, sl
  408ea2:	9808      	ldr	r0, [sp, #32]
  408ea4:	f002 fb90 	bl	40b5c8 <_dtoa_r>
  408ea8:	46d9      	mov	r9, fp
  408eaa:	9010      	str	r0, [sp, #64]	; 0x40
  408eac:	9b10      	ldr	r3, [sp, #64]	; 0x40
  408eae:	eb03 0809 	add.w	r8, r3, r9
  408eb2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  408eb4:	2b46      	cmp	r3, #70	; 0x46
  408eb6:	f47f af61 	bne.w	408d7c <_svfprintf_r+0x10d4>
  408eba:	9b10      	ldr	r3, [sp, #64]	; 0x40
  408ebc:	781b      	ldrb	r3, [r3, #0]
  408ebe:	2b30      	cmp	r3, #48	; 0x30
  408ec0:	f000 80e4 	beq.w	40908c <_svfprintf_r+0x13e4>
  408ec4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
  408ec6:	4498      	add	r8, r3
  408ec8:	e758      	b.n	408d7c <_svfprintf_r+0x10d4>
  408eca:	9808      	ldr	r0, [sp, #32]
  408ecc:	4631      	mov	r1, r6
  408ece:	aa23      	add	r2, sp, #140	; 0x8c
  408ed0:	f003 fef6 	bl	40ccc0 <__ssprint_r>
  408ed4:	2800      	cmp	r0, #0
  408ed6:	f47e afad 	bne.w	407e34 <_svfprintf_r+0x18c>
  408eda:	f8dd b094 	ldr.w	fp, [sp, #148]	; 0x94
  408ede:	463c      	mov	r4, r7
  408ee0:	e4a7      	b.n	408832 <_svfprintf_r+0xb8a>
  408ee2:	3301      	adds	r3, #1
  408ee4:	4429      	add	r1, r5
  408ee6:	2b07      	cmp	r3, #7
  408ee8:	9125      	str	r1, [sp, #148]	; 0x94
  408eea:	9324      	str	r3, [sp, #144]	; 0x90
  408eec:	f8c2 9000 	str.w	r9, [r2]
  408ef0:	6055      	str	r5, [r2, #4]
  408ef2:	dca5      	bgt.n	408e40 <_svfprintf_r+0x1198>
  408ef4:	3208      	adds	r2, #8
  408ef6:	e7ae      	b.n	408e56 <_svfprintf_r+0x11ae>
  408ef8:	9808      	ldr	r0, [sp, #32]
  408efa:	4631      	mov	r1, r6
  408efc:	aa23      	add	r2, sp, #140	; 0x8c
  408efe:	f003 fedf 	bl	40ccc0 <__ssprint_r>
  408f02:	2800      	cmp	r0, #0
  408f04:	f47e af96 	bne.w	407e34 <_svfprintf_r+0x18c>
  408f08:	9b1d      	ldr	r3, [sp, #116]	; 0x74
  408f0a:	f8dd b094 	ldr.w	fp, [sp, #148]	; 0x94
  408f0e:	463c      	mov	r4, r7
  408f10:	e597      	b.n	408a42 <_svfprintf_r+0xd9a>
  408f12:	4653      	mov	r3, sl
  408f14:	2b06      	cmp	r3, #6
  408f16:	bf28      	it	cs
  408f18:	2306      	movcs	r3, #6
  408f1a:	930d      	str	r3, [sp, #52]	; 0x34
  408f1c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  408f20:	f8dd c040 	ldr.w	ip, [sp, #64]	; 0x40
  408f24:	9309      	str	r3, [sp, #36]	; 0x24
  408f26:	4b83      	ldr	r3, [pc, #524]	; (409134 <_svfprintf_r+0x148c>)
  408f28:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
  408f2c:	f8cd c044 	str.w	ip, [sp, #68]	; 0x44
  408f30:	f8cd c048 	str.w	ip, [sp, #72]	; 0x48
  408f34:	9310      	str	r3, [sp, #64]	; 0x40
  408f36:	f7fe bfd7 	b.w	407ee8 <_svfprintf_r+0x240>
  408f3a:	9808      	ldr	r0, [sp, #32]
  408f3c:	4631      	mov	r1, r6
  408f3e:	aa23      	add	r2, sp, #140	; 0x8c
  408f40:	f003 febe 	bl	40ccc0 <__ssprint_r>
  408f44:	2800      	cmp	r0, #0
  408f46:	f47e af75 	bne.w	407e34 <_svfprintf_r+0x18c>
  408f4a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
  408f4c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
  408f4e:	f8dd b094 	ldr.w	fp, [sp, #148]	; 0x94
  408f52:	1ad3      	subs	r3, r2, r3
  408f54:	463c      	mov	r4, r7
  408f56:	e58a      	b.n	408a6e <_svfprintf_r+0xdc6>
  408f58:	9309      	str	r3, [sp, #36]	; 0x24
  408f5a:	9b11      	ldr	r3, [sp, #68]	; 0x44
  408f5c:	9307      	str	r3, [sp, #28]
  408f5e:	f04f 0c2d 	mov.w	ip, #45	; 0x2d
  408f62:	2300      	movs	r3, #0
  408f64:	f88d c06f 	strb.w	ip, [sp, #111]	; 0x6f
  408f68:	9311      	str	r3, [sp, #68]	; 0x44
  408f6a:	f7fe bfc0 	b.w	407eee <_svfprintf_r+0x246>
  408f6e:	1cda      	adds	r2, r3, #3
  408f70:	db19      	blt.n	408fa6 <_svfprintf_r+0x12fe>
  408f72:	459b      	cmp	fp, r3
  408f74:	db17      	blt.n	408fa6 <_svfprintf_r+0x12fe>
  408f76:	9312      	str	r3, [sp, #72]	; 0x48
  408f78:	2567      	movs	r5, #103	; 0x67
  408f7a:	e721      	b.n	408dc0 <_svfprintf_r+0x1118>
  408f7c:	f04f 0c2d 	mov.w	ip, #45	; 0x2d
  408f80:	f88d c06f 	strb.w	ip, [sp, #111]	; 0x6f
  408f84:	f7ff ba98 	b.w	4084b8 <_svfprintf_r+0x810>
  408f88:	4643      	mov	r3, r8
  408f8a:	e70a      	b.n	408da2 <_svfprintf_r+0x10fa>
  408f8c:	ea2a 73ea 	bic.w	r3, sl, sl, asr #31
  408f90:	9011      	str	r0, [sp, #68]	; 0x44
  408f92:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
  408f96:	9012      	str	r0, [sp, #72]	; 0x48
  408f98:	f89d c06f 	ldrb.w	ip, [sp, #111]	; 0x6f
  408f9c:	9309      	str	r3, [sp, #36]	; 0x24
  408f9e:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
  408fa2:	f7fe bfa1 	b.w	407ee8 <_svfprintf_r+0x240>
  408fa6:	3d02      	subs	r5, #2
  408fa8:	3b01      	subs	r3, #1
  408faa:	2b00      	cmp	r3, #0
  408fac:	931d      	str	r3, [sp, #116]	; 0x74
  408fae:	bfba      	itte	lt
  408fb0:	425b      	neglt	r3, r3
  408fb2:	222d      	movlt	r2, #45	; 0x2d
  408fb4:	222b      	movge	r2, #43	; 0x2b
  408fb6:	2b09      	cmp	r3, #9
  408fb8:	f88d 507c 	strb.w	r5, [sp, #124]	; 0x7c
  408fbc:	f88d 207d 	strb.w	r2, [sp, #125]	; 0x7d
  408fc0:	dd72      	ble.n	4090a8 <_svfprintf_r+0x1400>
  408fc2:	f10d 0e8b 	add.w	lr, sp, #139	; 0x8b
  408fc6:	4670      	mov	r0, lr
  408fc8:	4a5b      	ldr	r2, [pc, #364]	; (409138 <_svfprintf_r+0x1490>)
  408fca:	fb82 2103 	smull	r2, r1, r2, r3
  408fce:	17da      	asrs	r2, r3, #31
  408fd0:	ebc2 02a1 	rsb	r2, r2, r1, asr #2
  408fd4:	eb02 0182 	add.w	r1, r2, r2, lsl #2
  408fd8:	eba3 0341 	sub.w	r3, r3, r1, lsl #1
  408fdc:	f103 0130 	add.w	r1, r3, #48	; 0x30
  408fe0:	2a09      	cmp	r2, #9
  408fe2:	4613      	mov	r3, r2
  408fe4:	f800 1d01 	strb.w	r1, [r0, #-1]!
  408fe8:	dcee      	bgt.n	408fc8 <_svfprintf_r+0x1320>
  408fea:	4602      	mov	r2, r0
  408fec:	3330      	adds	r3, #48	; 0x30
  408fee:	b2d9      	uxtb	r1, r3
  408ff0:	f802 1d01 	strb.w	r1, [r2, #-1]!
  408ff4:	4596      	cmp	lr, r2
  408ff6:	f240 8099 	bls.w	40912c <_svfprintf_r+0x1484>
  408ffa:	f10d 027e 	add.w	r2, sp, #126	; 0x7e
  408ffe:	4603      	mov	r3, r0
  409000:	e001      	b.n	409006 <_svfprintf_r+0x135e>
  409002:	f813 1b01 	ldrb.w	r1, [r3], #1
  409006:	f802 1b01 	strb.w	r1, [r2], #1
  40900a:	4573      	cmp	r3, lr
  40900c:	d1f9      	bne.n	409002 <_svfprintf_r+0x135a>
  40900e:	ab23      	add	r3, sp, #140	; 0x8c
  409010:	1a1b      	subs	r3, r3, r0
  409012:	f10d 027e 	add.w	r2, sp, #126	; 0x7e
  409016:	4413      	add	r3, r2
  409018:	aa1f      	add	r2, sp, #124	; 0x7c
  40901a:	1a9b      	subs	r3, r3, r2
  40901c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
  40901e:	9319      	str	r3, [sp, #100]	; 0x64
  409020:	2a01      	cmp	r2, #1
  409022:	4413      	add	r3, r2
  409024:	930d      	str	r3, [sp, #52]	; 0x34
  409026:	dd6b      	ble.n	409100 <_svfprintf_r+0x1458>
  409028:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  40902a:	2200      	movs	r2, #0
  40902c:	3301      	adds	r3, #1
  40902e:	930d      	str	r3, [sp, #52]	; 0x34
  409030:	9212      	str	r2, [sp, #72]	; 0x48
  409032:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  409036:	e6cf      	b.n	408dd8 <_svfprintf_r+0x1130>
  409038:	9808      	ldr	r0, [sp, #32]
  40903a:	4631      	mov	r1, r6
  40903c:	aa23      	add	r2, sp, #140	; 0x8c
  40903e:	f003 fe3f 	bl	40ccc0 <__ssprint_r>
  409042:	2800      	cmp	r0, #0
  409044:	f47e aef6 	bne.w	407e34 <_svfprintf_r+0x18c>
  409048:	9d1d      	ldr	r5, [sp, #116]	; 0x74
  40904a:	9925      	ldr	r1, [sp, #148]	; 0x94
  40904c:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40904e:	463a      	mov	r2, r7
  409050:	e601      	b.n	408c56 <_svfprintf_r+0xfae>
  409052:	9b12      	ldr	r3, [sp, #72]	; 0x48
  409054:	2b00      	cmp	r3, #0
  409056:	bfd8      	it	le
  409058:	f1c3 0802 	rsble	r8, r3, #2
  40905c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  40905e:	bfc8      	it	gt
  409060:	f04f 0801 	movgt.w	r8, #1
  409064:	4443      	add	r3, r8
  409066:	930d      	str	r3, [sp, #52]	; 0x34
  409068:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  40906c:	e6b4      	b.n	408dd8 <_svfprintf_r+0x1130>
  40906e:	2b00      	cmp	r3, #0
  409070:	dd30      	ble.n	4090d4 <_svfprintf_r+0x142c>
  409072:	f1bb 0f00 	cmp.w	fp, #0
  409076:	d125      	bne.n	4090c4 <_svfprintf_r+0x141c>
  409078:	9b07      	ldr	r3, [sp, #28]
  40907a:	07db      	lsls	r3, r3, #31
  40907c:	d422      	bmi.n	4090c4 <_svfprintf_r+0x141c>
  40907e:	9a12      	ldr	r2, [sp, #72]	; 0x48
  409080:	920d      	str	r2, [sp, #52]	; 0x34
  409082:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
  409086:	e6a7      	b.n	408dd8 <_svfprintf_r+0x1130>
  409088:	9b21      	ldr	r3, [sp, #132]	; 0x84
  40908a:	e68a      	b.n	408da2 <_svfprintf_r+0x10fa>
  40908c:	9809      	ldr	r0, [sp, #36]	; 0x24
  40908e:	4651      	mov	r1, sl
  409090:	2200      	movs	r2, #0
  409092:	2300      	movs	r3, #0
  409094:	f7fd f8f6 	bl	406284 <__aeabi_dcmpeq>
  409098:	2800      	cmp	r0, #0
  40909a:	f47f af13 	bne.w	408ec4 <_svfprintf_r+0x121c>
  40909e:	f1c9 0301 	rsb	r3, r9, #1
  4090a2:	931d      	str	r3, [sp, #116]	; 0x74
  4090a4:	4498      	add	r8, r3
  4090a6:	e669      	b.n	408d7c <_svfprintf_r+0x10d4>
  4090a8:	3330      	adds	r3, #48	; 0x30
  4090aa:	2230      	movs	r2, #48	; 0x30
  4090ac:	f88d 307f 	strb.w	r3, [sp, #127]	; 0x7f
  4090b0:	f88d 207e 	strb.w	r2, [sp, #126]	; 0x7e
  4090b4:	ab20      	add	r3, sp, #128	; 0x80
  4090b6:	e7af      	b.n	409018 <_svfprintf_r+0x1370>
  4090b8:	9b12      	ldr	r3, [sp, #72]	; 0x48
  4090ba:	3301      	adds	r3, #1
  4090bc:	930d      	str	r3, [sp, #52]	; 0x34
  4090be:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  4090c2:	e689      	b.n	408dd8 <_svfprintf_r+0x1130>
  4090c4:	9b12      	ldr	r3, [sp, #72]	; 0x48
  4090c6:	f10b 0801 	add.w	r8, fp, #1
  4090ca:	4443      	add	r3, r8
  4090cc:	930d      	str	r3, [sp, #52]	; 0x34
  4090ce:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  4090d2:	e681      	b.n	408dd8 <_svfprintf_r+0x1130>
  4090d4:	f1bb 0f00 	cmp.w	fp, #0
  4090d8:	d11b      	bne.n	409112 <_svfprintf_r+0x146a>
  4090da:	9b07      	ldr	r3, [sp, #28]
  4090dc:	07d8      	lsls	r0, r3, #31
  4090de:	d418      	bmi.n	409112 <_svfprintf_r+0x146a>
  4090e0:	2301      	movs	r3, #1
  4090e2:	930d      	str	r3, [sp, #52]	; 0x34
  4090e4:	e678      	b.n	408dd8 <_svfprintf_r+0x1130>
  4090e6:	9d0e      	ldr	r5, [sp, #56]	; 0x38
  4090e8:	f8d5 a000 	ldr.w	sl, [r5]
  4090ec:	4628      	mov	r0, r5
  4090ee:	3004      	adds	r0, #4
  4090f0:	f1ba 0f00 	cmp.w	sl, #0
  4090f4:	785d      	ldrb	r5, [r3, #1]
  4090f6:	900e      	str	r0, [sp, #56]	; 0x38
  4090f8:	f6be ae29 	bge.w	407d4e <_svfprintf_r+0xa6>
  4090fc:	f7fe be25 	b.w	407d4a <_svfprintf_r+0xa2>
  409100:	9b07      	ldr	r3, [sp, #28]
  409102:	f013 0301 	ands.w	r3, r3, #1
  409106:	d18f      	bne.n	409028 <_svfprintf_r+0x1380>
  409108:	9312      	str	r3, [sp, #72]	; 0x48
  40910a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  40910c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  409110:	e662      	b.n	408dd8 <_svfprintf_r+0x1130>
  409112:	f10b 0302 	add.w	r3, fp, #2
  409116:	930d      	str	r3, [sp, #52]	; 0x34
  409118:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  40911c:	e65c      	b.n	408dd8 <_svfprintf_r+0x1130>
  40911e:	9a08      	ldr	r2, [sp, #32]
  409120:	230c      	movs	r3, #12
  409122:	6013      	str	r3, [r2, #0]
  409124:	f04f 30ff 	mov.w	r0, #4294967295
  409128:	f7fe be8e 	b.w	407e48 <_svfprintf_r+0x1a0>
  40912c:	f10d 037e 	add.w	r3, sp, #126	; 0x7e
  409130:	e772      	b.n	409018 <_svfprintf_r+0x1370>
  409132:	bf00      	nop
  409134:	0040fec0 	.word	0x0040fec0
  409138:	66666667 	.word	0x66666667

0040913c <__sprint_r.part.0>:
  40913c:	6e4b      	ldr	r3, [r1, #100]	; 0x64
  40913e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  409142:	049c      	lsls	r4, r3, #18
  409144:	460f      	mov	r7, r1
  409146:	4692      	mov	sl, r2
  409148:	d52b      	bpl.n	4091a2 <__sprint_r.part.0+0x66>
  40914a:	6893      	ldr	r3, [r2, #8]
  40914c:	6812      	ldr	r2, [r2, #0]
  40914e:	b333      	cbz	r3, 40919e <__sprint_r.part.0+0x62>
  409150:	4680      	mov	r8, r0
  409152:	f102 0908 	add.w	r9, r2, #8
  409156:	e919 0060 	ldmdb	r9, {r5, r6}
  40915a:	08b6      	lsrs	r6, r6, #2
  40915c:	d017      	beq.n	40918e <__sprint_r.part.0+0x52>
  40915e:	3d04      	subs	r5, #4
  409160:	2400      	movs	r4, #0
  409162:	e001      	b.n	409168 <__sprint_r.part.0+0x2c>
  409164:	42a6      	cmp	r6, r4
  409166:	d010      	beq.n	40918a <__sprint_r.part.0+0x4e>
  409168:	4640      	mov	r0, r8
  40916a:	f855 1f04 	ldr.w	r1, [r5, #4]!
  40916e:	463a      	mov	r2, r7
  409170:	f003 f9e2 	bl	40c538 <_fputwc_r>
  409174:	1c43      	adds	r3, r0, #1
  409176:	f104 0401 	add.w	r4, r4, #1
  40917a:	d1f3      	bne.n	409164 <__sprint_r.part.0+0x28>
  40917c:	2300      	movs	r3, #0
  40917e:	f8ca 3008 	str.w	r3, [sl, #8]
  409182:	f8ca 3004 	str.w	r3, [sl, #4]
  409186:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40918a:	f8da 3008 	ldr.w	r3, [sl, #8]
  40918e:	eba3 0386 	sub.w	r3, r3, r6, lsl #2
  409192:	f8ca 3008 	str.w	r3, [sl, #8]
  409196:	f109 0908 	add.w	r9, r9, #8
  40919a:	2b00      	cmp	r3, #0
  40919c:	d1db      	bne.n	409156 <__sprint_r.part.0+0x1a>
  40919e:	2000      	movs	r0, #0
  4091a0:	e7ec      	b.n	40917c <__sprint_r.part.0+0x40>
  4091a2:	f7fd fbe3 	bl	40696c <__sfvwrite_r>
  4091a6:	2300      	movs	r3, #0
  4091a8:	f8ca 3008 	str.w	r3, [sl, #8]
  4091ac:	f8ca 3004 	str.w	r3, [sl, #4]
  4091b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

004091b4 <__sprint_r>:
  4091b4:	6893      	ldr	r3, [r2, #8]
  4091b6:	b410      	push	{r4}
  4091b8:	b11b      	cbz	r3, 4091c2 <__sprint_r+0xe>
  4091ba:	f85d 4b04 	ldr.w	r4, [sp], #4
  4091be:	f7ff bfbd 	b.w	40913c <__sprint_r.part.0>
  4091c2:	4618      	mov	r0, r3
  4091c4:	6053      	str	r3, [r2, #4]
  4091c6:	f85d 4b04 	ldr.w	r4, [sp], #4
  4091ca:	4770      	bx	lr

004091cc <_vfiprintf_r>:
  4091cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4091d0:	b0ab      	sub	sp, #172	; 0xac
  4091d2:	461c      	mov	r4, r3
  4091d4:	9100      	str	r1, [sp, #0]
  4091d6:	4693      	mov	fp, r2
  4091d8:	9304      	str	r3, [sp, #16]
  4091da:	9001      	str	r0, [sp, #4]
  4091dc:	b118      	cbz	r0, 4091e6 <_vfiprintf_r+0x1a>
  4091de:	6b83      	ldr	r3, [r0, #56]	; 0x38
  4091e0:	2b00      	cmp	r3, #0
  4091e2:	f000 80e3 	beq.w	4093ac <_vfiprintf_r+0x1e0>
  4091e6:	9b00      	ldr	r3, [sp, #0]
  4091e8:	8999      	ldrh	r1, [r3, #12]
  4091ea:	b28a      	uxth	r2, r1
  4091ec:	0490      	lsls	r0, r2, #18
  4091ee:	d408      	bmi.n	409202 <_vfiprintf_r+0x36>
  4091f0:	4618      	mov	r0, r3
  4091f2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
  4091f4:	f441 5200 	orr.w	r2, r1, #8192	; 0x2000
  4091f8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  4091fc:	8182      	strh	r2, [r0, #12]
  4091fe:	6643      	str	r3, [r0, #100]	; 0x64
  409200:	b292      	uxth	r2, r2
  409202:	0711      	lsls	r1, r2, #28
  409204:	f140 80b2 	bpl.w	40936c <_vfiprintf_r+0x1a0>
  409208:	9b00      	ldr	r3, [sp, #0]
  40920a:	691b      	ldr	r3, [r3, #16]
  40920c:	2b00      	cmp	r3, #0
  40920e:	f000 80ad 	beq.w	40936c <_vfiprintf_r+0x1a0>
  409212:	f002 021a 	and.w	r2, r2, #26
  409216:	2a0a      	cmp	r2, #10
  409218:	f000 80b4 	beq.w	409384 <_vfiprintf_r+0x1b8>
  40921c:	2300      	movs	r3, #0
  40921e:	f10d 0a68 	add.w	sl, sp, #104	; 0x68
  409222:	9309      	str	r3, [sp, #36]	; 0x24
  409224:	930f      	str	r3, [sp, #60]	; 0x3c
  409226:	930e      	str	r3, [sp, #56]	; 0x38
  409228:	9302      	str	r3, [sp, #8]
  40922a:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
  40922e:	4654      	mov	r4, sl
  409230:	f89b 3000 	ldrb.w	r3, [fp]
  409234:	2b00      	cmp	r3, #0
  409236:	f000 84a3 	beq.w	409b80 <_vfiprintf_r+0x9b4>
  40923a:	2b25      	cmp	r3, #37	; 0x25
  40923c:	f000 84a0 	beq.w	409b80 <_vfiprintf_r+0x9b4>
  409240:	465a      	mov	r2, fp
  409242:	e001      	b.n	409248 <_vfiprintf_r+0x7c>
  409244:	2b25      	cmp	r3, #37	; 0x25
  409246:	d003      	beq.n	409250 <_vfiprintf_r+0x84>
  409248:	f812 3f01 	ldrb.w	r3, [r2, #1]!
  40924c:	2b00      	cmp	r3, #0
  40924e:	d1f9      	bne.n	409244 <_vfiprintf_r+0x78>
  409250:	ebcb 0602 	rsb	r6, fp, r2
  409254:	4615      	mov	r5, r2
  409256:	b196      	cbz	r6, 40927e <_vfiprintf_r+0xb2>
  409258:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  40925a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  40925c:	f8c4 b000 	str.w	fp, [r4]
  409260:	3301      	adds	r3, #1
  409262:	4432      	add	r2, r6
  409264:	2b07      	cmp	r3, #7
  409266:	6066      	str	r6, [r4, #4]
  409268:	920f      	str	r2, [sp, #60]	; 0x3c
  40926a:	930e      	str	r3, [sp, #56]	; 0x38
  40926c:	dd79      	ble.n	409362 <_vfiprintf_r+0x196>
  40926e:	2a00      	cmp	r2, #0
  409270:	f040 84af 	bne.w	409bd2 <_vfiprintf_r+0xa06>
  409274:	9b02      	ldr	r3, [sp, #8]
  409276:	920e      	str	r2, [sp, #56]	; 0x38
  409278:	4433      	add	r3, r6
  40927a:	4654      	mov	r4, sl
  40927c:	9302      	str	r3, [sp, #8]
  40927e:	782b      	ldrb	r3, [r5, #0]
  409280:	2b00      	cmp	r3, #0
  409282:	f000 8360 	beq.w	409946 <_vfiprintf_r+0x77a>
  409286:	2100      	movs	r1, #0
  409288:	f04f 0300 	mov.w	r3, #0
  40928c:	f04f 3cff 	mov.w	ip, #4294967295
  409290:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
  409294:	1c68      	adds	r0, r5, #1
  409296:	786b      	ldrb	r3, [r5, #1]
  409298:	4688      	mov	r8, r1
  40929a:	460d      	mov	r5, r1
  40929c:	4666      	mov	r6, ip
  40929e:	f100 0b01 	add.w	fp, r0, #1
  4092a2:	f1a3 0220 	sub.w	r2, r3, #32
  4092a6:	2a58      	cmp	r2, #88	; 0x58
  4092a8:	f200 82ab 	bhi.w	409802 <_vfiprintf_r+0x636>
  4092ac:	e8df f012 	tbh	[pc, r2, lsl #1]
  4092b0:	02a9029b 	.word	0x02a9029b
  4092b4:	02a302a9 	.word	0x02a302a9
  4092b8:	02a902a9 	.word	0x02a902a9
  4092bc:	02a902a9 	.word	0x02a902a9
  4092c0:	02a902a9 	.word	0x02a902a9
  4092c4:	02620255 	.word	0x02620255
  4092c8:	010d02a9 	.word	0x010d02a9
  4092cc:	02a9026e 	.word	0x02a9026e
  4092d0:	012f0129 	.word	0x012f0129
  4092d4:	012f012f 	.word	0x012f012f
  4092d8:	012f012f 	.word	0x012f012f
  4092dc:	012f012f 	.word	0x012f012f
  4092e0:	012f012f 	.word	0x012f012f
  4092e4:	02a902a9 	.word	0x02a902a9
  4092e8:	02a902a9 	.word	0x02a902a9
  4092ec:	02a902a9 	.word	0x02a902a9
  4092f0:	02a902a9 	.word	0x02a902a9
  4092f4:	02a902a9 	.word	0x02a902a9
  4092f8:	02a9013d 	.word	0x02a9013d
  4092fc:	02a902a9 	.word	0x02a902a9
  409300:	02a902a9 	.word	0x02a902a9
  409304:	02a902a9 	.word	0x02a902a9
  409308:	02a902a9 	.word	0x02a902a9
  40930c:	017402a9 	.word	0x017402a9
  409310:	02a902a9 	.word	0x02a902a9
  409314:	02a902a9 	.word	0x02a902a9
  409318:	018b02a9 	.word	0x018b02a9
  40931c:	02a902a9 	.word	0x02a902a9
  409320:	02a901a3 	.word	0x02a901a3
  409324:	02a902a9 	.word	0x02a902a9
  409328:	02a902a9 	.word	0x02a902a9
  40932c:	02a902a9 	.word	0x02a902a9
  409330:	02a902a9 	.word	0x02a902a9
  409334:	01c702a9 	.word	0x01c702a9
  409338:	02a901da 	.word	0x02a901da
  40933c:	02a902a9 	.word	0x02a902a9
  409340:	01da0123 	.word	0x01da0123
  409344:	02a902a9 	.word	0x02a902a9
  409348:	02a9024c 	.word	0x02a9024c
  40934c:	0113028a 	.word	0x0113028a
  409350:	020701f3 	.word	0x020701f3
  409354:	020d02a9 	.word	0x020d02a9
  409358:	008102a9 	.word	0x008102a9
  40935c:	02a902a9 	.word	0x02a902a9
  409360:	0233      	.short	0x0233
  409362:	3408      	adds	r4, #8
  409364:	9b02      	ldr	r3, [sp, #8]
  409366:	4433      	add	r3, r6
  409368:	9302      	str	r3, [sp, #8]
  40936a:	e788      	b.n	40927e <_vfiprintf_r+0xb2>
  40936c:	9801      	ldr	r0, [sp, #4]
  40936e:	9900      	ldr	r1, [sp, #0]
  409370:	f002 f808 	bl	40b384 <__swsetup_r>
  409374:	b9a8      	cbnz	r0, 4093a2 <_vfiprintf_r+0x1d6>
  409376:	9b00      	ldr	r3, [sp, #0]
  409378:	899a      	ldrh	r2, [r3, #12]
  40937a:	f002 021a 	and.w	r2, r2, #26
  40937e:	2a0a      	cmp	r2, #10
  409380:	f47f af4c 	bne.w	40921c <_vfiprintf_r+0x50>
  409384:	9b00      	ldr	r3, [sp, #0]
  409386:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
  40938a:	2b00      	cmp	r3, #0
  40938c:	f6ff af46 	blt.w	40921c <_vfiprintf_r+0x50>
  409390:	9801      	ldr	r0, [sp, #4]
  409392:	9900      	ldr	r1, [sp, #0]
  409394:	465a      	mov	r2, fp
  409396:	4623      	mov	r3, r4
  409398:	f000 fd20 	bl	409ddc <__sbprintf>
  40939c:	b02b      	add	sp, #172	; 0xac
  40939e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4093a2:	f04f 30ff 	mov.w	r0, #4294967295
  4093a6:	b02b      	add	sp, #172	; 0xac
  4093a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4093ac:	f7fd f972 	bl	406694 <__sinit>
  4093b0:	e719      	b.n	4091e6 <_vfiprintf_r+0x1a>
  4093b2:	f018 0f20 	tst.w	r8, #32
  4093b6:	9503      	str	r5, [sp, #12]
  4093b8:	46b4      	mov	ip, r6
  4093ba:	f000 810c 	beq.w	4095d6 <_vfiprintf_r+0x40a>
  4093be:	9b04      	ldr	r3, [sp, #16]
  4093c0:	3307      	adds	r3, #7
  4093c2:	f023 0307 	bic.w	r3, r3, #7
  4093c6:	f103 0208 	add.w	r2, r3, #8
  4093ca:	e9d3 6700 	ldrd	r6, r7, [r3]
  4093ce:	9204      	str	r2, [sp, #16]
  4093d0:	2301      	movs	r3, #1
  4093d2:	f04f 0200 	mov.w	r2, #0
  4093d6:	f88d 202f 	strb.w	r2, [sp, #47]	; 0x2f
  4093da:	46e1      	mov	r9, ip
  4093dc:	2500      	movs	r5, #0
  4093de:	f1bc 0f00 	cmp.w	ip, #0
  4093e2:	bfa8      	it	ge
  4093e4:	f028 0880 	bicge.w	r8, r8, #128	; 0x80
  4093e8:	ea56 0207 	orrs.w	r2, r6, r7
  4093ec:	f040 80c4 	bne.w	409578 <_vfiprintf_r+0x3ac>
  4093f0:	f1bc 0f00 	cmp.w	ip, #0
  4093f4:	f000 8381 	beq.w	409afa <_vfiprintf_r+0x92e>
  4093f8:	2b01      	cmp	r3, #1
  4093fa:	f000 80c5 	beq.w	409588 <_vfiprintf_r+0x3bc>
  4093fe:	2b02      	cmp	r3, #2
  409400:	f000 8387 	beq.w	409b12 <_vfiprintf_r+0x946>
  409404:	4651      	mov	r1, sl
  409406:	08f2      	lsrs	r2, r6, #3
  409408:	ea42 7247 	orr.w	r2, r2, r7, lsl #29
  40940c:	08f8      	lsrs	r0, r7, #3
  40940e:	f006 0307 	and.w	r3, r6, #7
  409412:	4607      	mov	r7, r0
  409414:	4616      	mov	r6, r2
  409416:	3330      	adds	r3, #48	; 0x30
  409418:	ea56 0207 	orrs.w	r2, r6, r7
  40941c:	f801 3d01 	strb.w	r3, [r1, #-1]!
  409420:	d1f1      	bne.n	409406 <_vfiprintf_r+0x23a>
  409422:	f018 0f01 	tst.w	r8, #1
  409426:	9107      	str	r1, [sp, #28]
  409428:	f040 83fc 	bne.w	409c24 <_vfiprintf_r+0xa58>
  40942c:	ebc1 090a 	rsb	r9, r1, sl
  409430:	45e1      	cmp	r9, ip
  409432:	464e      	mov	r6, r9
  409434:	bfb8      	it	lt
  409436:	4666      	movlt	r6, ip
  409438:	b105      	cbz	r5, 40943c <_vfiprintf_r+0x270>
  40943a:	3601      	adds	r6, #1
  40943c:	f018 0302 	ands.w	r3, r8, #2
  409440:	9305      	str	r3, [sp, #20]
  409442:	bf18      	it	ne
  409444:	3602      	addne	r6, #2
  409446:	f018 0384 	ands.w	r3, r8, #132	; 0x84
  40944a:	9306      	str	r3, [sp, #24]
  40944c:	f040 81fa 	bne.w	409844 <_vfiprintf_r+0x678>
  409450:	9b03      	ldr	r3, [sp, #12]
  409452:	1b9d      	subs	r5, r3, r6
  409454:	2d00      	cmp	r5, #0
  409456:	f340 81f5 	ble.w	409844 <_vfiprintf_r+0x678>
  40945a:	2d10      	cmp	r5, #16
  40945c:	f340 848c 	ble.w	409d78 <_vfiprintf_r+0xbac>
  409460:	f8dd e038 	ldr.w	lr, [sp, #56]	; 0x38
  409464:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  409466:	4fc6      	ldr	r7, [pc, #792]	; (409780 <_vfiprintf_r+0x5b4>)
  409468:	4620      	mov	r0, r4
  40946a:	2310      	movs	r3, #16
  40946c:	4664      	mov	r4, ip
  40946e:	4671      	mov	r1, lr
  409470:	4684      	mov	ip, r0
  409472:	e007      	b.n	409484 <_vfiprintf_r+0x2b8>
  409474:	f101 0e02 	add.w	lr, r1, #2
  409478:	f10c 0c08 	add.w	ip, ip, #8
  40947c:	4601      	mov	r1, r0
  40947e:	3d10      	subs	r5, #16
  409480:	2d10      	cmp	r5, #16
  409482:	dd13      	ble.n	4094ac <_vfiprintf_r+0x2e0>
  409484:	1c48      	adds	r0, r1, #1
  409486:	3210      	adds	r2, #16
  409488:	2807      	cmp	r0, #7
  40948a:	920f      	str	r2, [sp, #60]	; 0x3c
  40948c:	f8cc 7000 	str.w	r7, [ip]
  409490:	f8cc 3004 	str.w	r3, [ip, #4]
  409494:	900e      	str	r0, [sp, #56]	; 0x38
  409496:	dded      	ble.n	409474 <_vfiprintf_r+0x2a8>
  409498:	2a00      	cmp	r2, #0
  40949a:	f040 81c3 	bne.w	409824 <_vfiprintf_r+0x658>
  40949e:	3d10      	subs	r5, #16
  4094a0:	2d10      	cmp	r5, #16
  4094a2:	4611      	mov	r1, r2
  4094a4:	f04f 0e01 	mov.w	lr, #1
  4094a8:	46d4      	mov	ip, sl
  4094aa:	dceb      	bgt.n	409484 <_vfiprintf_r+0x2b8>
  4094ac:	4663      	mov	r3, ip
  4094ae:	4671      	mov	r1, lr
  4094b0:	46a4      	mov	ip, r4
  4094b2:	461c      	mov	r4, r3
  4094b4:	442a      	add	r2, r5
  4094b6:	2907      	cmp	r1, #7
  4094b8:	920f      	str	r2, [sp, #60]	; 0x3c
  4094ba:	6027      	str	r7, [r4, #0]
  4094bc:	6065      	str	r5, [r4, #4]
  4094be:	910e      	str	r1, [sp, #56]	; 0x38
  4094c0:	f300 8346 	bgt.w	409b50 <_vfiprintf_r+0x984>
  4094c4:	3408      	adds	r4, #8
  4094c6:	1c48      	adds	r0, r1, #1
  4094c8:	e1bf      	b.n	40984a <_vfiprintf_r+0x67e>
  4094ca:	4658      	mov	r0, fp
  4094cc:	f048 0804 	orr.w	r8, r8, #4
  4094d0:	f89b 3000 	ldrb.w	r3, [fp]
  4094d4:	e6e3      	b.n	40929e <_vfiprintf_r+0xd2>
  4094d6:	f018 0320 	ands.w	r3, r8, #32
  4094da:	9503      	str	r5, [sp, #12]
  4094dc:	46b4      	mov	ip, r6
  4094de:	d062      	beq.n	4095a6 <_vfiprintf_r+0x3da>
  4094e0:	9b04      	ldr	r3, [sp, #16]
  4094e2:	3307      	adds	r3, #7
  4094e4:	f023 0307 	bic.w	r3, r3, #7
  4094e8:	f103 0208 	add.w	r2, r3, #8
  4094ec:	e9d3 6700 	ldrd	r6, r7, [r3]
  4094f0:	9204      	str	r2, [sp, #16]
  4094f2:	2300      	movs	r3, #0
  4094f4:	e76d      	b.n	4093d2 <_vfiprintf_r+0x206>
  4094f6:	f048 0840 	orr.w	r8, r8, #64	; 0x40
  4094fa:	f89b 3000 	ldrb.w	r3, [fp]
  4094fe:	4658      	mov	r0, fp
  409500:	e6cd      	b.n	40929e <_vfiprintf_r+0xd2>
  409502:	f048 0880 	orr.w	r8, r8, #128	; 0x80
  409506:	f89b 3000 	ldrb.w	r3, [fp]
  40950a:	4658      	mov	r0, fp
  40950c:	e6c7      	b.n	40929e <_vfiprintf_r+0xd2>
  40950e:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
  409512:	2500      	movs	r5, #0
  409514:	f81b 3b01 	ldrb.w	r3, [fp], #1
  409518:	eb05 0585 	add.w	r5, r5, r5, lsl #2
  40951c:	eb02 0545 	add.w	r5, r2, r5, lsl #1
  409520:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
  409524:	2a09      	cmp	r2, #9
  409526:	d9f5      	bls.n	409514 <_vfiprintf_r+0x348>
  409528:	e6bb      	b.n	4092a2 <_vfiprintf_r+0xd6>
  40952a:	f048 0810 	orr.w	r8, r8, #16
  40952e:	f018 0f20 	tst.w	r8, #32
  409532:	9503      	str	r5, [sp, #12]
  409534:	46b4      	mov	ip, r6
  409536:	f88d 102f 	strb.w	r1, [sp, #47]	; 0x2f
  40953a:	f000 809b 	beq.w	409674 <_vfiprintf_r+0x4a8>
  40953e:	9904      	ldr	r1, [sp, #16]
  409540:	3107      	adds	r1, #7
  409542:	f021 0107 	bic.w	r1, r1, #7
  409546:	e9d1 2300 	ldrd	r2, r3, [r1]
  40954a:	3108      	adds	r1, #8
  40954c:	9104      	str	r1, [sp, #16]
  40954e:	4616      	mov	r6, r2
  409550:	461f      	mov	r7, r3
  409552:	2a00      	cmp	r2, #0
  409554:	f173 0300 	sbcs.w	r3, r3, #0
  409558:	f2c0 83a6 	blt.w	409ca8 <_vfiprintf_r+0xadc>
  40955c:	f1bc 0f00 	cmp.w	ip, #0
  409560:	bfa8      	it	ge
  409562:	f028 0880 	bicge.w	r8, r8, #128	; 0x80
  409566:	ea56 0207 	orrs.w	r2, r6, r7
  40956a:	f89d 502f 	ldrb.w	r5, [sp, #47]	; 0x2f
  40956e:	46e1      	mov	r9, ip
  409570:	f04f 0301 	mov.w	r3, #1
  409574:	f43f af3c 	beq.w	4093f0 <_vfiprintf_r+0x224>
  409578:	2b01      	cmp	r3, #1
  40957a:	f47f af40 	bne.w	4093fe <_vfiprintf_r+0x232>
  40957e:	2f00      	cmp	r7, #0
  409580:	bf08      	it	eq
  409582:	2e0a      	cmpeq	r6, #10
  409584:	f080 8334 	bcs.w	409bf0 <_vfiprintf_r+0xa24>
  409588:	ab2a      	add	r3, sp, #168	; 0xa8
  40958a:	3630      	adds	r6, #48	; 0x30
  40958c:	f803 6d41 	strb.w	r6, [r3, #-65]!
  409590:	ebc3 090a 	rsb	r9, r3, sl
  409594:	9307      	str	r3, [sp, #28]
  409596:	e74b      	b.n	409430 <_vfiprintf_r+0x264>
  409598:	f048 0810 	orr.w	r8, r8, #16
  40959c:	f018 0320 	ands.w	r3, r8, #32
  4095a0:	9503      	str	r5, [sp, #12]
  4095a2:	46b4      	mov	ip, r6
  4095a4:	d19c      	bne.n	4094e0 <_vfiprintf_r+0x314>
  4095a6:	f018 0210 	ands.w	r2, r8, #16
  4095aa:	f040 82f7 	bne.w	409b9c <_vfiprintf_r+0x9d0>
  4095ae:	f018 0340 	ands.w	r3, r8, #64	; 0x40
  4095b2:	f000 82f3 	beq.w	409b9c <_vfiprintf_r+0x9d0>
  4095b6:	9904      	ldr	r1, [sp, #16]
  4095b8:	4613      	mov	r3, r2
  4095ba:	460a      	mov	r2, r1
  4095bc:	3204      	adds	r2, #4
  4095be:	880e      	ldrh	r6, [r1, #0]
  4095c0:	9204      	str	r2, [sp, #16]
  4095c2:	2700      	movs	r7, #0
  4095c4:	e705      	b.n	4093d2 <_vfiprintf_r+0x206>
  4095c6:	f048 0810 	orr.w	r8, r8, #16
  4095ca:	f018 0f20 	tst.w	r8, #32
  4095ce:	9503      	str	r5, [sp, #12]
  4095d0:	46b4      	mov	ip, r6
  4095d2:	f47f aef4 	bne.w	4093be <_vfiprintf_r+0x1f2>
  4095d6:	9a04      	ldr	r2, [sp, #16]
  4095d8:	f018 0f10 	tst.w	r8, #16
  4095dc:	4613      	mov	r3, r2
  4095de:	f040 82e4 	bne.w	409baa <_vfiprintf_r+0x9de>
  4095e2:	f018 0f40 	tst.w	r8, #64	; 0x40
  4095e6:	f000 82e0 	beq.w	409baa <_vfiprintf_r+0x9de>
  4095ea:	8816      	ldrh	r6, [r2, #0]
  4095ec:	3204      	adds	r2, #4
  4095ee:	2700      	movs	r7, #0
  4095f0:	2301      	movs	r3, #1
  4095f2:	9204      	str	r2, [sp, #16]
  4095f4:	e6ed      	b.n	4093d2 <_vfiprintf_r+0x206>
  4095f6:	4a63      	ldr	r2, [pc, #396]	; (409784 <_vfiprintf_r+0x5b8>)
  4095f8:	9503      	str	r5, [sp, #12]
  4095fa:	f018 0f20 	tst.w	r8, #32
  4095fe:	46b4      	mov	ip, r6
  409600:	f88d 102f 	strb.w	r1, [sp, #47]	; 0x2f
  409604:	9209      	str	r2, [sp, #36]	; 0x24
  409606:	f000 8090 	beq.w	40972a <_vfiprintf_r+0x55e>
  40960a:	9a04      	ldr	r2, [sp, #16]
  40960c:	3207      	adds	r2, #7
  40960e:	f022 0207 	bic.w	r2, r2, #7
  409612:	e9d2 6700 	ldrd	r6, r7, [r2]
  409616:	f102 0108 	add.w	r1, r2, #8
  40961a:	9104      	str	r1, [sp, #16]
  40961c:	f018 0f01 	tst.w	r8, #1
  409620:	f000 8290 	beq.w	409b44 <_vfiprintf_r+0x978>
  409624:	ea56 0207 	orrs.w	r2, r6, r7
  409628:	f000 828c 	beq.w	409b44 <_vfiprintf_r+0x978>
  40962c:	2230      	movs	r2, #48	; 0x30
  40962e:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
  409632:	f048 0802 	orr.w	r8, r8, #2
  409636:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
  40963a:	2302      	movs	r3, #2
  40963c:	e6c9      	b.n	4093d2 <_vfiprintf_r+0x206>
  40963e:	9a04      	ldr	r2, [sp, #16]
  409640:	9503      	str	r5, [sp, #12]
  409642:	6813      	ldr	r3, [r2, #0]
  409644:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
  409648:	4613      	mov	r3, r2
  40964a:	3304      	adds	r3, #4
  40964c:	2601      	movs	r6, #1
  40964e:	f04f 0100 	mov.w	r1, #0
  409652:	9304      	str	r3, [sp, #16]
  409654:	ab10      	add	r3, sp, #64	; 0x40
  409656:	f88d 102f 	strb.w	r1, [sp, #47]	; 0x2f
  40965a:	46b1      	mov	r9, r6
  40965c:	9307      	str	r3, [sp, #28]
  40965e:	f04f 0c00 	mov.w	ip, #0
  409662:	e6eb      	b.n	40943c <_vfiprintf_r+0x270>
  409664:	f018 0f20 	tst.w	r8, #32
  409668:	9503      	str	r5, [sp, #12]
  40966a:	46b4      	mov	ip, r6
  40966c:	f88d 102f 	strb.w	r1, [sp, #47]	; 0x2f
  409670:	f47f af65 	bne.w	40953e <_vfiprintf_r+0x372>
  409674:	f018 0f10 	tst.w	r8, #16
  409678:	f040 82a2 	bne.w	409bc0 <_vfiprintf_r+0x9f4>
  40967c:	f018 0f40 	tst.w	r8, #64	; 0x40
  409680:	f000 829e 	beq.w	409bc0 <_vfiprintf_r+0x9f4>
  409684:	9904      	ldr	r1, [sp, #16]
  409686:	f9b1 6000 	ldrsh.w	r6, [r1]
  40968a:	3104      	adds	r1, #4
  40968c:	17f7      	asrs	r7, r6, #31
  40968e:	4632      	mov	r2, r6
  409690:	463b      	mov	r3, r7
  409692:	9104      	str	r1, [sp, #16]
  409694:	e75d      	b.n	409552 <_vfiprintf_r+0x386>
  409696:	9904      	ldr	r1, [sp, #16]
  409698:	9503      	str	r5, [sp, #12]
  40969a:	2330      	movs	r3, #48	; 0x30
  40969c:	460a      	mov	r2, r1
  40969e:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
  4096a2:	2378      	movs	r3, #120	; 0x78
  4096a4:	3204      	adds	r2, #4
  4096a6:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
  4096aa:	4b37      	ldr	r3, [pc, #220]	; (409788 <_vfiprintf_r+0x5bc>)
  4096ac:	9309      	str	r3, [sp, #36]	; 0x24
  4096ae:	46b4      	mov	ip, r6
  4096b0:	f048 0802 	orr.w	r8, r8, #2
  4096b4:	680e      	ldr	r6, [r1, #0]
  4096b6:	9204      	str	r2, [sp, #16]
  4096b8:	2700      	movs	r7, #0
  4096ba:	2302      	movs	r3, #2
  4096bc:	e689      	b.n	4093d2 <_vfiprintf_r+0x206>
  4096be:	f048 0820 	orr.w	r8, r8, #32
  4096c2:	f89b 3000 	ldrb.w	r3, [fp]
  4096c6:	4658      	mov	r0, fp
  4096c8:	e5e9      	b.n	40929e <_vfiprintf_r+0xd2>
  4096ca:	9a04      	ldr	r2, [sp, #16]
  4096cc:	9503      	str	r5, [sp, #12]
  4096ce:	6813      	ldr	r3, [r2, #0]
  4096d0:	9307      	str	r3, [sp, #28]
  4096d2:	f04f 0100 	mov.w	r1, #0
  4096d6:	46b4      	mov	ip, r6
  4096d8:	f88d 102f 	strb.w	r1, [sp, #47]	; 0x2f
  4096dc:	1d16      	adds	r6, r2, #4
  4096de:	2b00      	cmp	r3, #0
  4096e0:	f000 8350 	beq.w	409d84 <_vfiprintf_r+0xbb8>
  4096e4:	f1bc 0f00 	cmp.w	ip, #0
  4096e8:	f2c0 832a 	blt.w	409d40 <_vfiprintf_r+0xb74>
  4096ec:	9d07      	ldr	r5, [sp, #28]
  4096ee:	f8cd c010 	str.w	ip, [sp, #16]
  4096f2:	4662      	mov	r2, ip
  4096f4:	4628      	mov	r0, r5
  4096f6:	2100      	movs	r1, #0
  4096f8:	f7fd fe3c 	bl	407374 <memchr>
  4096fc:	f8dd c010 	ldr.w	ip, [sp, #16]
  409700:	2800      	cmp	r0, #0
  409702:	f000 8350 	beq.w	409da6 <_vfiprintf_r+0xbda>
  409706:	ebc5 0900 	rsb	r9, r5, r0
  40970a:	9604      	str	r6, [sp, #16]
  40970c:	f89d 502f 	ldrb.w	r5, [sp, #47]	; 0x2f
  409710:	f04f 0c00 	mov.w	ip, #0
  409714:	e68c      	b.n	409430 <_vfiprintf_r+0x264>
  409716:	4a1c      	ldr	r2, [pc, #112]	; (409788 <_vfiprintf_r+0x5bc>)
  409718:	9503      	str	r5, [sp, #12]
  40971a:	f018 0f20 	tst.w	r8, #32
  40971e:	46b4      	mov	ip, r6
  409720:	9209      	str	r2, [sp, #36]	; 0x24
  409722:	f88d 102f 	strb.w	r1, [sp, #47]	; 0x2f
  409726:	f47f af70 	bne.w	40960a <_vfiprintf_r+0x43e>
  40972a:	9904      	ldr	r1, [sp, #16]
  40972c:	f018 0f10 	tst.w	r8, #16
  409730:	460a      	mov	r2, r1
  409732:	f040 8240 	bne.w	409bb6 <_vfiprintf_r+0x9ea>
  409736:	f018 0f40 	tst.w	r8, #64	; 0x40
  40973a:	f000 823c 	beq.w	409bb6 <_vfiprintf_r+0x9ea>
  40973e:	3204      	adds	r2, #4
  409740:	880e      	ldrh	r6, [r1, #0]
  409742:	9204      	str	r2, [sp, #16]
  409744:	2700      	movs	r7, #0
  409746:	e769      	b.n	40961c <_vfiprintf_r+0x450>
  409748:	f89b 3000 	ldrb.w	r3, [fp]
  40974c:	2b6c      	cmp	r3, #108	; 0x6c
  40974e:	f000 82ea 	beq.w	409d26 <_vfiprintf_r+0xb5a>
  409752:	f048 0810 	orr.w	r8, r8, #16
  409756:	4658      	mov	r0, fp
  409758:	e5a1      	b.n	40929e <_vfiprintf_r+0xd2>
  40975a:	9a04      	ldr	r2, [sp, #16]
  40975c:	6815      	ldr	r5, [r2, #0]
  40975e:	4613      	mov	r3, r2
  409760:	2d00      	cmp	r5, #0
  409762:	f103 0304 	add.w	r3, r3, #4
  409766:	f2c0 82e6 	blt.w	409d36 <_vfiprintf_r+0xb6a>
  40976a:	9304      	str	r3, [sp, #16]
  40976c:	f89b 3000 	ldrb.w	r3, [fp]
  409770:	4658      	mov	r0, fp
  409772:	e594      	b.n	40929e <_vfiprintf_r+0xd2>
  409774:	f89b 3000 	ldrb.w	r3, [fp]
  409778:	4658      	mov	r0, fp
  40977a:	212b      	movs	r1, #43	; 0x2b
  40977c:	e58f      	b.n	40929e <_vfiprintf_r+0xd2>
  40977e:	bf00      	nop
  409780:	0040fed8 	.word	0x0040fed8
  409784:	0040fe98 	.word	0x0040fe98
  409788:	0040feac 	.word	0x0040feac
  40978c:	f89b 3000 	ldrb.w	r3, [fp]
  409790:	2b2a      	cmp	r3, #42	; 0x2a
  409792:	f10b 0001 	add.w	r0, fp, #1
  409796:	f000 830f 	beq.w	409db8 <_vfiprintf_r+0xbec>
  40979a:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
  40979e:	2a09      	cmp	r2, #9
  4097a0:	4683      	mov	fp, r0
  4097a2:	f04f 0600 	mov.w	r6, #0
  4097a6:	f63f ad7c 	bhi.w	4092a2 <_vfiprintf_r+0xd6>
  4097aa:	f81b 3b01 	ldrb.w	r3, [fp], #1
  4097ae:	eb06 0686 	add.w	r6, r6, r6, lsl #2
  4097b2:	eb02 0646 	add.w	r6, r2, r6, lsl #1
  4097b6:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
  4097ba:	2a09      	cmp	r2, #9
  4097bc:	d9f5      	bls.n	4097aa <_vfiprintf_r+0x5de>
  4097be:	ea46 76e6 	orr.w	r6, r6, r6, asr #31
  4097c2:	e56e      	b.n	4092a2 <_vfiprintf_r+0xd6>
  4097c4:	f018 0f20 	tst.w	r8, #32
  4097c8:	f88d 102f 	strb.w	r1, [sp, #47]	; 0x2f
  4097cc:	f000 8283 	beq.w	409cd6 <_vfiprintf_r+0xb0a>
  4097d0:	9a04      	ldr	r2, [sp, #16]
  4097d2:	9902      	ldr	r1, [sp, #8]
  4097d4:	6813      	ldr	r3, [r2, #0]
  4097d6:	17cf      	asrs	r7, r1, #31
  4097d8:	4608      	mov	r0, r1
  4097da:	3204      	adds	r2, #4
  4097dc:	4639      	mov	r1, r7
  4097de:	9204      	str	r2, [sp, #16]
  4097e0:	e9c3 0100 	strd	r0, r1, [r3]
  4097e4:	e524      	b.n	409230 <_vfiprintf_r+0x64>
  4097e6:	4658      	mov	r0, fp
  4097e8:	f89b 3000 	ldrb.w	r3, [fp]
  4097ec:	2900      	cmp	r1, #0
  4097ee:	f47f ad56 	bne.w	40929e <_vfiprintf_r+0xd2>
  4097f2:	2120      	movs	r1, #32
  4097f4:	e553      	b.n	40929e <_vfiprintf_r+0xd2>
  4097f6:	f048 0801 	orr.w	r8, r8, #1
  4097fa:	4658      	mov	r0, fp
  4097fc:	f89b 3000 	ldrb.w	r3, [fp]
  409800:	e54d      	b.n	40929e <_vfiprintf_r+0xd2>
  409802:	9503      	str	r5, [sp, #12]
  409804:	f88d 102f 	strb.w	r1, [sp, #47]	; 0x2f
  409808:	2b00      	cmp	r3, #0
  40980a:	f000 809c 	beq.w	409946 <_vfiprintf_r+0x77a>
  40980e:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
  409812:	f04f 0300 	mov.w	r3, #0
  409816:	2601      	movs	r6, #1
  409818:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
  40981c:	ab10      	add	r3, sp, #64	; 0x40
  40981e:	46b1      	mov	r9, r6
  409820:	9307      	str	r3, [sp, #28]
  409822:	e71c      	b.n	40965e <_vfiprintf_r+0x492>
  409824:	9801      	ldr	r0, [sp, #4]
  409826:	9900      	ldr	r1, [sp, #0]
  409828:	9308      	str	r3, [sp, #32]
  40982a:	aa0d      	add	r2, sp, #52	; 0x34
  40982c:	f7ff fc86 	bl	40913c <__sprint_r.part.0>
  409830:	2800      	cmp	r0, #0
  409832:	f040 808f 	bne.w	409954 <_vfiprintf_r+0x788>
  409836:	990e      	ldr	r1, [sp, #56]	; 0x38
  409838:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  40983a:	9b08      	ldr	r3, [sp, #32]
  40983c:	f101 0e01 	add.w	lr, r1, #1
  409840:	46d4      	mov	ip, sl
  409842:	e61c      	b.n	40947e <_vfiprintf_r+0x2b2>
  409844:	990e      	ldr	r1, [sp, #56]	; 0x38
  409846:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  409848:	1c48      	adds	r0, r1, #1
  40984a:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
  40984e:	b16b      	cbz	r3, 40986c <_vfiprintf_r+0x6a0>
  409850:	3201      	adds	r2, #1
  409852:	f10d 032f 	add.w	r3, sp, #47	; 0x2f
  409856:	2101      	movs	r1, #1
  409858:	2807      	cmp	r0, #7
  40985a:	920f      	str	r2, [sp, #60]	; 0x3c
  40985c:	900e      	str	r0, [sp, #56]	; 0x38
  40985e:	6023      	str	r3, [r4, #0]
  409860:	6061      	str	r1, [r4, #4]
  409862:	f300 8134 	bgt.w	409ace <_vfiprintf_r+0x902>
  409866:	4601      	mov	r1, r0
  409868:	3408      	adds	r4, #8
  40986a:	3001      	adds	r0, #1
  40986c:	9b05      	ldr	r3, [sp, #20]
  40986e:	b163      	cbz	r3, 40988a <_vfiprintf_r+0x6be>
  409870:	3202      	adds	r2, #2
  409872:	a90c      	add	r1, sp, #48	; 0x30
  409874:	2302      	movs	r3, #2
  409876:	2807      	cmp	r0, #7
  409878:	920f      	str	r2, [sp, #60]	; 0x3c
  40987a:	900e      	str	r0, [sp, #56]	; 0x38
  40987c:	e884 000a 	stmia.w	r4, {r1, r3}
  409880:	f300 8134 	bgt.w	409aec <_vfiprintf_r+0x920>
  409884:	4601      	mov	r1, r0
  409886:	3408      	adds	r4, #8
  409888:	3001      	adds	r0, #1
  40988a:	9b06      	ldr	r3, [sp, #24]
  40988c:	2b80      	cmp	r3, #128	; 0x80
  40988e:	f000 80d4 	beq.w	409a3a <_vfiprintf_r+0x86e>
  409892:	ebc9 070c 	rsb	r7, r9, ip
  409896:	2f00      	cmp	r7, #0
  409898:	dd2b      	ble.n	4098f2 <_vfiprintf_r+0x726>
  40989a:	2f10      	cmp	r7, #16
  40989c:	4daa      	ldr	r5, [pc, #680]	; (409b48 <_vfiprintf_r+0x97c>)
  40989e:	dd1f      	ble.n	4098e0 <_vfiprintf_r+0x714>
  4098a0:	46a6      	mov	lr, r4
  4098a2:	2310      	movs	r3, #16
  4098a4:	9c01      	ldr	r4, [sp, #4]
  4098a6:	e007      	b.n	4098b8 <_vfiprintf_r+0x6ec>
  4098a8:	f101 0c02 	add.w	ip, r1, #2
  4098ac:	f10e 0e08 	add.w	lr, lr, #8
  4098b0:	4601      	mov	r1, r0
  4098b2:	3f10      	subs	r7, #16
  4098b4:	2f10      	cmp	r7, #16
  4098b6:	dd11      	ble.n	4098dc <_vfiprintf_r+0x710>
  4098b8:	1c48      	adds	r0, r1, #1
  4098ba:	3210      	adds	r2, #16
  4098bc:	2807      	cmp	r0, #7
  4098be:	920f      	str	r2, [sp, #60]	; 0x3c
  4098c0:	f8ce 5000 	str.w	r5, [lr]
  4098c4:	f8ce 3004 	str.w	r3, [lr, #4]
  4098c8:	900e      	str	r0, [sp, #56]	; 0x38
  4098ca:	dded      	ble.n	4098a8 <_vfiprintf_r+0x6dc>
  4098cc:	bb6a      	cbnz	r2, 40992a <_vfiprintf_r+0x75e>
  4098ce:	3f10      	subs	r7, #16
  4098d0:	2f10      	cmp	r7, #16
  4098d2:	f04f 0c01 	mov.w	ip, #1
  4098d6:	4611      	mov	r1, r2
  4098d8:	46d6      	mov	lr, sl
  4098da:	dced      	bgt.n	4098b8 <_vfiprintf_r+0x6ec>
  4098dc:	4674      	mov	r4, lr
  4098de:	4660      	mov	r0, ip
  4098e0:	443a      	add	r2, r7
  4098e2:	2807      	cmp	r0, #7
  4098e4:	920f      	str	r2, [sp, #60]	; 0x3c
  4098e6:	e884 00a0 	stmia.w	r4, {r5, r7}
  4098ea:	900e      	str	r0, [sp, #56]	; 0x38
  4098ec:	dc3b      	bgt.n	409966 <_vfiprintf_r+0x79a>
  4098ee:	3408      	adds	r4, #8
  4098f0:	3001      	adds	r0, #1
  4098f2:	eb02 0309 	add.w	r3, r2, r9
  4098f6:	9a07      	ldr	r2, [sp, #28]
  4098f8:	930f      	str	r3, [sp, #60]	; 0x3c
  4098fa:	2807      	cmp	r0, #7
  4098fc:	e884 0204 	stmia.w	r4, {r2, r9}
  409900:	900e      	str	r0, [sp, #56]	; 0x38
  409902:	dd3d      	ble.n	409980 <_vfiprintf_r+0x7b4>
  409904:	2b00      	cmp	r3, #0
  409906:	f040 813e 	bne.w	409b86 <_vfiprintf_r+0x9ba>
  40990a:	f018 0f04 	tst.w	r8, #4
  40990e:	930e      	str	r3, [sp, #56]	; 0x38
  409910:	f040 812f 	bne.w	409b72 <_vfiprintf_r+0x9a6>
  409914:	9b02      	ldr	r3, [sp, #8]
  409916:	9a03      	ldr	r2, [sp, #12]
  409918:	4296      	cmp	r6, r2
  40991a:	bfac      	ite	ge
  40991c:	199b      	addge	r3, r3, r6
  40991e:	189b      	addlt	r3, r3, r2
  409920:	9302      	str	r3, [sp, #8]
  409922:	2300      	movs	r3, #0
  409924:	930e      	str	r3, [sp, #56]	; 0x38
  409926:	4654      	mov	r4, sl
  409928:	e482      	b.n	409230 <_vfiprintf_r+0x64>
  40992a:	4620      	mov	r0, r4
  40992c:	9900      	ldr	r1, [sp, #0]
  40992e:	9305      	str	r3, [sp, #20]
  409930:	aa0d      	add	r2, sp, #52	; 0x34
  409932:	f7ff fc03 	bl	40913c <__sprint_r.part.0>
  409936:	b968      	cbnz	r0, 409954 <_vfiprintf_r+0x788>
  409938:	990e      	ldr	r1, [sp, #56]	; 0x38
  40993a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  40993c:	9b05      	ldr	r3, [sp, #20]
  40993e:	f101 0c01 	add.w	ip, r1, #1
  409942:	46d6      	mov	lr, sl
  409944:	e7b5      	b.n	4098b2 <_vfiprintf_r+0x6e6>
  409946:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  409948:	b123      	cbz	r3, 409954 <_vfiprintf_r+0x788>
  40994a:	9801      	ldr	r0, [sp, #4]
  40994c:	9900      	ldr	r1, [sp, #0]
  40994e:	aa0d      	add	r2, sp, #52	; 0x34
  409950:	f7ff fbf4 	bl	40913c <__sprint_r.part.0>
  409954:	9b00      	ldr	r3, [sp, #0]
  409956:	899b      	ldrh	r3, [r3, #12]
  409958:	065b      	lsls	r3, r3, #25
  40995a:	f53f ad22 	bmi.w	4093a2 <_vfiprintf_r+0x1d6>
  40995e:	9802      	ldr	r0, [sp, #8]
  409960:	b02b      	add	sp, #172	; 0xac
  409962:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  409966:	2a00      	cmp	r2, #0
  409968:	f040 8191 	bne.w	409c8e <_vfiprintf_r+0xac2>
  40996c:	2201      	movs	r2, #1
  40996e:	9907      	ldr	r1, [sp, #28]
  409970:	f8cd 906c 	str.w	r9, [sp, #108]	; 0x6c
  409974:	464b      	mov	r3, r9
  409976:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
  40997a:	911a      	str	r1, [sp, #104]	; 0x68
  40997c:	920e      	str	r2, [sp, #56]	; 0x38
  40997e:	4654      	mov	r4, sl
  409980:	f104 0208 	add.w	r2, r4, #8
  409984:	f018 0f04 	tst.w	r8, #4
  409988:	d039      	beq.n	4099fe <_vfiprintf_r+0x832>
  40998a:	9903      	ldr	r1, [sp, #12]
  40998c:	1b8d      	subs	r5, r1, r6
  40998e:	2d00      	cmp	r5, #0
  409990:	dd35      	ble.n	4099fe <_vfiprintf_r+0x832>
  409992:	2d10      	cmp	r5, #16
  409994:	f340 8202 	ble.w	409d9c <_vfiprintf_r+0xbd0>
  409998:	980e      	ldr	r0, [sp, #56]	; 0x38
  40999a:	4f6c      	ldr	r7, [pc, #432]	; (409b4c <_vfiprintf_r+0x980>)
  40999c:	f8dd 8004 	ldr.w	r8, [sp, #4]
  4099a0:	f8dd 9000 	ldr.w	r9, [sp]
  4099a4:	2410      	movs	r4, #16
  4099a6:	e006      	b.n	4099b6 <_vfiprintf_r+0x7ea>
  4099a8:	f100 0e02 	add.w	lr, r0, #2
  4099ac:	3208      	adds	r2, #8
  4099ae:	4608      	mov	r0, r1
  4099b0:	3d10      	subs	r5, #16
  4099b2:	2d10      	cmp	r5, #16
  4099b4:	dd10      	ble.n	4099d8 <_vfiprintf_r+0x80c>
  4099b6:	1c41      	adds	r1, r0, #1
  4099b8:	3310      	adds	r3, #16
  4099ba:	2907      	cmp	r1, #7
  4099bc:	930f      	str	r3, [sp, #60]	; 0x3c
  4099be:	6017      	str	r7, [r2, #0]
  4099c0:	6054      	str	r4, [r2, #4]
  4099c2:	910e      	str	r1, [sp, #56]	; 0x38
  4099c4:	ddf0      	ble.n	4099a8 <_vfiprintf_r+0x7dc>
  4099c6:	2b00      	cmp	r3, #0
  4099c8:	d12a      	bne.n	409a20 <_vfiprintf_r+0x854>
  4099ca:	3d10      	subs	r5, #16
  4099cc:	2d10      	cmp	r5, #16
  4099ce:	f04f 0e01 	mov.w	lr, #1
  4099d2:	4618      	mov	r0, r3
  4099d4:	4652      	mov	r2, sl
  4099d6:	dcee      	bgt.n	4099b6 <_vfiprintf_r+0x7ea>
  4099d8:	442b      	add	r3, r5
  4099da:	f1be 0f07 	cmp.w	lr, #7
  4099de:	930f      	str	r3, [sp, #60]	; 0x3c
  4099e0:	6017      	str	r7, [r2, #0]
  4099e2:	6055      	str	r5, [r2, #4]
  4099e4:	f8cd e038 	str.w	lr, [sp, #56]	; 0x38
  4099e8:	dd09      	ble.n	4099fe <_vfiprintf_r+0x832>
  4099ea:	2b00      	cmp	r3, #0
  4099ec:	d092      	beq.n	409914 <_vfiprintf_r+0x748>
  4099ee:	9801      	ldr	r0, [sp, #4]
  4099f0:	9900      	ldr	r1, [sp, #0]
  4099f2:	aa0d      	add	r2, sp, #52	; 0x34
  4099f4:	f7ff fba2 	bl	40913c <__sprint_r.part.0>
  4099f8:	2800      	cmp	r0, #0
  4099fa:	d1ab      	bne.n	409954 <_vfiprintf_r+0x788>
  4099fc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  4099fe:	9a02      	ldr	r2, [sp, #8]
  409a00:	9903      	ldr	r1, [sp, #12]
  409a02:	428e      	cmp	r6, r1
  409a04:	bfac      	ite	ge
  409a06:	1992      	addge	r2, r2, r6
  409a08:	1852      	addlt	r2, r2, r1
  409a0a:	9202      	str	r2, [sp, #8]
  409a0c:	2b00      	cmp	r3, #0
  409a0e:	d088      	beq.n	409922 <_vfiprintf_r+0x756>
  409a10:	9801      	ldr	r0, [sp, #4]
  409a12:	9900      	ldr	r1, [sp, #0]
  409a14:	aa0d      	add	r2, sp, #52	; 0x34
  409a16:	f7ff fb91 	bl	40913c <__sprint_r.part.0>
  409a1a:	2800      	cmp	r0, #0
  409a1c:	d081      	beq.n	409922 <_vfiprintf_r+0x756>
  409a1e:	e799      	b.n	409954 <_vfiprintf_r+0x788>
  409a20:	4640      	mov	r0, r8
  409a22:	4649      	mov	r1, r9
  409a24:	aa0d      	add	r2, sp, #52	; 0x34
  409a26:	f7ff fb89 	bl	40913c <__sprint_r.part.0>
  409a2a:	2800      	cmp	r0, #0
  409a2c:	d192      	bne.n	409954 <_vfiprintf_r+0x788>
  409a2e:	980e      	ldr	r0, [sp, #56]	; 0x38
  409a30:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  409a32:	f100 0e01 	add.w	lr, r0, #1
  409a36:	4652      	mov	r2, sl
  409a38:	e7ba      	b.n	4099b0 <_vfiprintf_r+0x7e4>
  409a3a:	9b03      	ldr	r3, [sp, #12]
  409a3c:	1b9f      	subs	r7, r3, r6
  409a3e:	2f00      	cmp	r7, #0
  409a40:	f77f af27 	ble.w	409892 <_vfiprintf_r+0x6c6>
  409a44:	2f10      	cmp	r7, #16
  409a46:	4d40      	ldr	r5, [pc, #256]	; (409b48 <_vfiprintf_r+0x97c>)
  409a48:	f340 81b4 	ble.w	409db4 <_vfiprintf_r+0xbe8>
  409a4c:	4620      	mov	r0, r4
  409a4e:	2310      	movs	r3, #16
  409a50:	4664      	mov	r4, ip
  409a52:	4684      	mov	ip, r0
  409a54:	e007      	b.n	409a66 <_vfiprintf_r+0x89a>
  409a56:	f101 0e02 	add.w	lr, r1, #2
  409a5a:	f10c 0c08 	add.w	ip, ip, #8
  409a5e:	4601      	mov	r1, r0
  409a60:	3f10      	subs	r7, #16
  409a62:	2f10      	cmp	r7, #16
  409a64:	dd11      	ble.n	409a8a <_vfiprintf_r+0x8be>
  409a66:	1c48      	adds	r0, r1, #1
  409a68:	3210      	adds	r2, #16
  409a6a:	2807      	cmp	r0, #7
  409a6c:	920f      	str	r2, [sp, #60]	; 0x3c
  409a6e:	f8cc 5000 	str.w	r5, [ip]
  409a72:	f8cc 3004 	str.w	r3, [ip, #4]
  409a76:	900e      	str	r0, [sp, #56]	; 0x38
  409a78:	dded      	ble.n	409a56 <_vfiprintf_r+0x88a>
  409a7a:	b9c2      	cbnz	r2, 409aae <_vfiprintf_r+0x8e2>
  409a7c:	3f10      	subs	r7, #16
  409a7e:	2f10      	cmp	r7, #16
  409a80:	f04f 0e01 	mov.w	lr, #1
  409a84:	4611      	mov	r1, r2
  409a86:	46d4      	mov	ip, sl
  409a88:	dced      	bgt.n	409a66 <_vfiprintf_r+0x89a>
  409a8a:	4663      	mov	r3, ip
  409a8c:	46a4      	mov	ip, r4
  409a8e:	461c      	mov	r4, r3
  409a90:	443a      	add	r2, r7
  409a92:	f1be 0f07 	cmp.w	lr, #7
  409a96:	920f      	str	r2, [sp, #60]	; 0x3c
  409a98:	e884 00a0 	stmia.w	r4, {r5, r7}
  409a9c:	f8cd e038 	str.w	lr, [sp, #56]	; 0x38
  409aa0:	f300 80ef 	bgt.w	409c82 <_vfiprintf_r+0xab6>
  409aa4:	3408      	adds	r4, #8
  409aa6:	f10e 0001 	add.w	r0, lr, #1
  409aaa:	4671      	mov	r1, lr
  409aac:	e6f1      	b.n	409892 <_vfiprintf_r+0x6c6>
  409aae:	9801      	ldr	r0, [sp, #4]
  409ab0:	9900      	ldr	r1, [sp, #0]
  409ab2:	9305      	str	r3, [sp, #20]
  409ab4:	aa0d      	add	r2, sp, #52	; 0x34
  409ab6:	f7ff fb41 	bl	40913c <__sprint_r.part.0>
  409aba:	2800      	cmp	r0, #0
  409abc:	f47f af4a 	bne.w	409954 <_vfiprintf_r+0x788>
  409ac0:	990e      	ldr	r1, [sp, #56]	; 0x38
  409ac2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  409ac4:	9b05      	ldr	r3, [sp, #20]
  409ac6:	f101 0e01 	add.w	lr, r1, #1
  409aca:	46d4      	mov	ip, sl
  409acc:	e7c8      	b.n	409a60 <_vfiprintf_r+0x894>
  409ace:	2a00      	cmp	r2, #0
  409ad0:	f040 80c6 	bne.w	409c60 <_vfiprintf_r+0xa94>
  409ad4:	9b05      	ldr	r3, [sp, #20]
  409ad6:	2b00      	cmp	r3, #0
  409ad8:	f000 8086 	beq.w	409be8 <_vfiprintf_r+0xa1c>
  409adc:	aa0c      	add	r2, sp, #48	; 0x30
  409ade:	2302      	movs	r3, #2
  409ae0:	921a      	str	r2, [sp, #104]	; 0x68
  409ae2:	4608      	mov	r0, r1
  409ae4:	931b      	str	r3, [sp, #108]	; 0x6c
  409ae6:	461a      	mov	r2, r3
  409ae8:	4654      	mov	r4, sl
  409aea:	e6cb      	b.n	409884 <_vfiprintf_r+0x6b8>
  409aec:	2a00      	cmp	r2, #0
  409aee:	f040 80a6 	bne.w	409c3e <_vfiprintf_r+0xa72>
  409af2:	2001      	movs	r0, #1
  409af4:	4611      	mov	r1, r2
  409af6:	4654      	mov	r4, sl
  409af8:	e6c7      	b.n	40988a <_vfiprintf_r+0x6be>
  409afa:	bb03      	cbnz	r3, 409b3e <_vfiprintf_r+0x972>
  409afc:	f018 0f01 	tst.w	r8, #1
  409b00:	d01d      	beq.n	409b3e <_vfiprintf_r+0x972>
  409b02:	ab2a      	add	r3, sp, #168	; 0xa8
  409b04:	2230      	movs	r2, #48	; 0x30
  409b06:	f803 2d41 	strb.w	r2, [r3, #-65]!
  409b0a:	ebc3 090a 	rsb	r9, r3, sl
  409b0e:	9307      	str	r3, [sp, #28]
  409b10:	e48e      	b.n	409430 <_vfiprintf_r+0x264>
  409b12:	9809      	ldr	r0, [sp, #36]	; 0x24
  409b14:	46d1      	mov	r9, sl
  409b16:	0933      	lsrs	r3, r6, #4
  409b18:	f006 010f 	and.w	r1, r6, #15
  409b1c:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
  409b20:	093a      	lsrs	r2, r7, #4
  409b22:	461e      	mov	r6, r3
  409b24:	4617      	mov	r7, r2
  409b26:	5c43      	ldrb	r3, [r0, r1]
  409b28:	f809 3d01 	strb.w	r3, [r9, #-1]!
  409b2c:	ea56 0307 	orrs.w	r3, r6, r7
  409b30:	d1f1      	bne.n	409b16 <_vfiprintf_r+0x94a>
  409b32:	464b      	mov	r3, r9
  409b34:	f8cd 901c 	str.w	r9, [sp, #28]
  409b38:	ebc3 090a 	rsb	r9, r3, sl
  409b3c:	e478      	b.n	409430 <_vfiprintf_r+0x264>
  409b3e:	f8cd a01c 	str.w	sl, [sp, #28]
  409b42:	e475      	b.n	409430 <_vfiprintf_r+0x264>
  409b44:	2302      	movs	r3, #2
  409b46:	e444      	b.n	4093d2 <_vfiprintf_r+0x206>
  409b48:	0040fec8 	.word	0x0040fec8
  409b4c:	0040fed8 	.word	0x0040fed8
  409b50:	2a00      	cmp	r2, #0
  409b52:	f040 80d7 	bne.w	409d04 <_vfiprintf_r+0xb38>
  409b56:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
  409b5a:	2b00      	cmp	r3, #0
  409b5c:	f000 80ae 	beq.w	409cbc <_vfiprintf_r+0xaf0>
  409b60:	2301      	movs	r3, #1
  409b62:	f10d 012f 	add.w	r1, sp, #47	; 0x2f
  409b66:	4618      	mov	r0, r3
  409b68:	931b      	str	r3, [sp, #108]	; 0x6c
  409b6a:	461a      	mov	r2, r3
  409b6c:	911a      	str	r1, [sp, #104]	; 0x68
  409b6e:	4654      	mov	r4, sl
  409b70:	e679      	b.n	409866 <_vfiprintf_r+0x69a>
  409b72:	9a03      	ldr	r2, [sp, #12]
  409b74:	1b95      	subs	r5, r2, r6
  409b76:	2d00      	cmp	r5, #0
  409b78:	4652      	mov	r2, sl
  409b7a:	f73f af0a 	bgt.w	409992 <_vfiprintf_r+0x7c6>
  409b7e:	e6c9      	b.n	409914 <_vfiprintf_r+0x748>
  409b80:	465d      	mov	r5, fp
  409b82:	f7ff bb7c 	b.w	40927e <_vfiprintf_r+0xb2>
  409b86:	9801      	ldr	r0, [sp, #4]
  409b88:	9900      	ldr	r1, [sp, #0]
  409b8a:	aa0d      	add	r2, sp, #52	; 0x34
  409b8c:	f7ff fad6 	bl	40913c <__sprint_r.part.0>
  409b90:	2800      	cmp	r0, #0
  409b92:	f47f aedf 	bne.w	409954 <_vfiprintf_r+0x788>
  409b96:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  409b98:	4652      	mov	r2, sl
  409b9a:	e6f3      	b.n	409984 <_vfiprintf_r+0x7b8>
  409b9c:	9904      	ldr	r1, [sp, #16]
  409b9e:	460a      	mov	r2, r1
  409ba0:	3204      	adds	r2, #4
  409ba2:	680e      	ldr	r6, [r1, #0]
  409ba4:	9204      	str	r2, [sp, #16]
  409ba6:	2700      	movs	r7, #0
  409ba8:	e413      	b.n	4093d2 <_vfiprintf_r+0x206>
  409baa:	3204      	adds	r2, #4
  409bac:	681e      	ldr	r6, [r3, #0]
  409bae:	9204      	str	r2, [sp, #16]
  409bb0:	2301      	movs	r3, #1
  409bb2:	2700      	movs	r7, #0
  409bb4:	e40d      	b.n	4093d2 <_vfiprintf_r+0x206>
  409bb6:	6816      	ldr	r6, [r2, #0]
  409bb8:	3204      	adds	r2, #4
  409bba:	9204      	str	r2, [sp, #16]
  409bbc:	2700      	movs	r7, #0
  409bbe:	e52d      	b.n	40961c <_vfiprintf_r+0x450>
  409bc0:	9a04      	ldr	r2, [sp, #16]
  409bc2:	6816      	ldr	r6, [r2, #0]
  409bc4:	4613      	mov	r3, r2
  409bc6:	3304      	adds	r3, #4
  409bc8:	17f7      	asrs	r7, r6, #31
  409bca:	9304      	str	r3, [sp, #16]
  409bcc:	4632      	mov	r2, r6
  409bce:	463b      	mov	r3, r7
  409bd0:	e4bf      	b.n	409552 <_vfiprintf_r+0x386>
  409bd2:	9801      	ldr	r0, [sp, #4]
  409bd4:	9900      	ldr	r1, [sp, #0]
  409bd6:	aa0d      	add	r2, sp, #52	; 0x34
  409bd8:	f7ff fab0 	bl	40913c <__sprint_r.part.0>
  409bdc:	2800      	cmp	r0, #0
  409bde:	f47f aeb9 	bne.w	409954 <_vfiprintf_r+0x788>
  409be2:	4654      	mov	r4, sl
  409be4:	f7ff bbbe 	b.w	409364 <_vfiprintf_r+0x198>
  409be8:	4608      	mov	r0, r1
  409bea:	4654      	mov	r4, sl
  409bec:	4611      	mov	r1, r2
  409bee:	e64c      	b.n	40988a <_vfiprintf_r+0x6be>
  409bf0:	46d1      	mov	r9, sl
  409bf2:	f8cd c014 	str.w	ip, [sp, #20]
  409bf6:	4630      	mov	r0, r6
  409bf8:	4639      	mov	r1, r7
  409bfa:	220a      	movs	r2, #10
  409bfc:	2300      	movs	r3, #0
  409bfe:	f003 fd5d 	bl	40d6bc <__aeabi_uldivmod>
  409c02:	3230      	adds	r2, #48	; 0x30
  409c04:	4630      	mov	r0, r6
  409c06:	4639      	mov	r1, r7
  409c08:	f809 2d01 	strb.w	r2, [r9, #-1]!
  409c0c:	2300      	movs	r3, #0
  409c0e:	220a      	movs	r2, #10
  409c10:	f003 fd54 	bl	40d6bc <__aeabi_uldivmod>
  409c14:	4606      	mov	r6, r0
  409c16:	460f      	mov	r7, r1
  409c18:	ea56 0307 	orrs.w	r3, r6, r7
  409c1c:	d1eb      	bne.n	409bf6 <_vfiprintf_r+0xa2a>
  409c1e:	f8dd c014 	ldr.w	ip, [sp, #20]
  409c22:	e786      	b.n	409b32 <_vfiprintf_r+0x966>
  409c24:	2b30      	cmp	r3, #48	; 0x30
  409c26:	9b07      	ldr	r3, [sp, #28]
  409c28:	d086      	beq.n	409b38 <_vfiprintf_r+0x96c>
  409c2a:	3b01      	subs	r3, #1
  409c2c:	461a      	mov	r2, r3
  409c2e:	9307      	str	r3, [sp, #28]
  409c30:	2330      	movs	r3, #48	; 0x30
  409c32:	ebc2 090a 	rsb	r9, r2, sl
  409c36:	f801 3c01 	strb.w	r3, [r1, #-1]
  409c3a:	f7ff bbf9 	b.w	409430 <_vfiprintf_r+0x264>
  409c3e:	9801      	ldr	r0, [sp, #4]
  409c40:	9900      	ldr	r1, [sp, #0]
  409c42:	f8cd c014 	str.w	ip, [sp, #20]
  409c46:	aa0d      	add	r2, sp, #52	; 0x34
  409c48:	f7ff fa78 	bl	40913c <__sprint_r.part.0>
  409c4c:	2800      	cmp	r0, #0
  409c4e:	f47f ae81 	bne.w	409954 <_vfiprintf_r+0x788>
  409c52:	990e      	ldr	r1, [sp, #56]	; 0x38
  409c54:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  409c56:	f8dd c014 	ldr.w	ip, [sp, #20]
  409c5a:	1c48      	adds	r0, r1, #1
  409c5c:	4654      	mov	r4, sl
  409c5e:	e614      	b.n	40988a <_vfiprintf_r+0x6be>
  409c60:	9801      	ldr	r0, [sp, #4]
  409c62:	9900      	ldr	r1, [sp, #0]
  409c64:	f8cd c020 	str.w	ip, [sp, #32]
  409c68:	aa0d      	add	r2, sp, #52	; 0x34
  409c6a:	f7ff fa67 	bl	40913c <__sprint_r.part.0>
  409c6e:	2800      	cmp	r0, #0
  409c70:	f47f ae70 	bne.w	409954 <_vfiprintf_r+0x788>
  409c74:	990e      	ldr	r1, [sp, #56]	; 0x38
  409c76:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  409c78:	f8dd c020 	ldr.w	ip, [sp, #32]
  409c7c:	1c48      	adds	r0, r1, #1
  409c7e:	4654      	mov	r4, sl
  409c80:	e5f4      	b.n	40986c <_vfiprintf_r+0x6a0>
  409c82:	2a00      	cmp	r2, #0
  409c84:	d167      	bne.n	409d56 <_vfiprintf_r+0xb8a>
  409c86:	2001      	movs	r0, #1
  409c88:	4611      	mov	r1, r2
  409c8a:	4654      	mov	r4, sl
  409c8c:	e601      	b.n	409892 <_vfiprintf_r+0x6c6>
  409c8e:	9801      	ldr	r0, [sp, #4]
  409c90:	9900      	ldr	r1, [sp, #0]
  409c92:	aa0d      	add	r2, sp, #52	; 0x34
  409c94:	f7ff fa52 	bl	40913c <__sprint_r.part.0>
  409c98:	2800      	cmp	r0, #0
  409c9a:	f47f ae5b 	bne.w	409954 <_vfiprintf_r+0x788>
  409c9e:	980e      	ldr	r0, [sp, #56]	; 0x38
  409ca0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  409ca2:	3001      	adds	r0, #1
  409ca4:	4654      	mov	r4, sl
  409ca6:	e624      	b.n	4098f2 <_vfiprintf_r+0x726>
  409ca8:	252d      	movs	r5, #45	; 0x2d
  409caa:	4276      	negs	r6, r6
  409cac:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
  409cb0:	f88d 502f 	strb.w	r5, [sp, #47]	; 0x2f
  409cb4:	46e1      	mov	r9, ip
  409cb6:	2301      	movs	r3, #1
  409cb8:	f7ff bb91 	b.w	4093de <_vfiprintf_r+0x212>
  409cbc:	9b05      	ldr	r3, [sp, #20]
  409cbe:	4611      	mov	r1, r2
  409cc0:	2001      	movs	r0, #1
  409cc2:	4654      	mov	r4, sl
  409cc4:	2b00      	cmp	r3, #0
  409cc6:	f43f ade4 	beq.w	409892 <_vfiprintf_r+0x6c6>
  409cca:	aa0c      	add	r2, sp, #48	; 0x30
  409ccc:	2302      	movs	r3, #2
  409cce:	e88a 000c 	stmia.w	sl, {r2, r3}
  409cd2:	461a      	mov	r2, r3
  409cd4:	e5d6      	b.n	409884 <_vfiprintf_r+0x6b8>
  409cd6:	f018 0f10 	tst.w	r8, #16
  409cda:	d10b      	bne.n	409cf4 <_vfiprintf_r+0xb28>
  409cdc:	f018 0f40 	tst.w	r8, #64	; 0x40
  409ce0:	d008      	beq.n	409cf4 <_vfiprintf_r+0xb28>
  409ce2:	9a04      	ldr	r2, [sp, #16]
  409ce4:	6813      	ldr	r3, [r2, #0]
  409ce6:	3204      	adds	r2, #4
  409ce8:	9204      	str	r2, [sp, #16]
  409cea:	f8bd 2008 	ldrh.w	r2, [sp, #8]
  409cee:	801a      	strh	r2, [r3, #0]
  409cf0:	f7ff ba9e 	b.w	409230 <_vfiprintf_r+0x64>
  409cf4:	9a04      	ldr	r2, [sp, #16]
  409cf6:	6813      	ldr	r3, [r2, #0]
  409cf8:	3204      	adds	r2, #4
  409cfa:	9204      	str	r2, [sp, #16]
  409cfc:	9a02      	ldr	r2, [sp, #8]
  409cfe:	601a      	str	r2, [r3, #0]
  409d00:	f7ff ba96 	b.w	409230 <_vfiprintf_r+0x64>
  409d04:	9801      	ldr	r0, [sp, #4]
  409d06:	9900      	ldr	r1, [sp, #0]
  409d08:	f8cd c020 	str.w	ip, [sp, #32]
  409d0c:	aa0d      	add	r2, sp, #52	; 0x34
  409d0e:	f7ff fa15 	bl	40913c <__sprint_r.part.0>
  409d12:	2800      	cmp	r0, #0
  409d14:	f47f ae1e 	bne.w	409954 <_vfiprintf_r+0x788>
  409d18:	990e      	ldr	r1, [sp, #56]	; 0x38
  409d1a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  409d1c:	f8dd c020 	ldr.w	ip, [sp, #32]
  409d20:	1c48      	adds	r0, r1, #1
  409d22:	4654      	mov	r4, sl
  409d24:	e591      	b.n	40984a <_vfiprintf_r+0x67e>
  409d26:	f048 0820 	orr.w	r8, r8, #32
  409d2a:	f10b 0001 	add.w	r0, fp, #1
  409d2e:	f89b 3001 	ldrb.w	r3, [fp, #1]
  409d32:	f7ff bab4 	b.w	40929e <_vfiprintf_r+0xd2>
  409d36:	426d      	negs	r5, r5
  409d38:	9304      	str	r3, [sp, #16]
  409d3a:	4658      	mov	r0, fp
  409d3c:	f7ff bbc6 	b.w	4094cc <_vfiprintf_r+0x300>
  409d40:	9807      	ldr	r0, [sp, #28]
  409d42:	9604      	str	r6, [sp, #16]
  409d44:	f7fd ff82 	bl	407c4c <strlen>
  409d48:	f89d 502f 	ldrb.w	r5, [sp, #47]	; 0x2f
  409d4c:	4681      	mov	r9, r0
  409d4e:	f04f 0c00 	mov.w	ip, #0
  409d52:	f7ff bb6d 	b.w	409430 <_vfiprintf_r+0x264>
  409d56:	9801      	ldr	r0, [sp, #4]
  409d58:	9900      	ldr	r1, [sp, #0]
  409d5a:	f8cd c014 	str.w	ip, [sp, #20]
  409d5e:	aa0d      	add	r2, sp, #52	; 0x34
  409d60:	f7ff f9ec 	bl	40913c <__sprint_r.part.0>
  409d64:	2800      	cmp	r0, #0
  409d66:	f47f adf5 	bne.w	409954 <_vfiprintf_r+0x788>
  409d6a:	990e      	ldr	r1, [sp, #56]	; 0x38
  409d6c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  409d6e:	f8dd c014 	ldr.w	ip, [sp, #20]
  409d72:	1c48      	adds	r0, r1, #1
  409d74:	4654      	mov	r4, sl
  409d76:	e58c      	b.n	409892 <_vfiprintf_r+0x6c6>
  409d78:	990e      	ldr	r1, [sp, #56]	; 0x38
  409d7a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  409d7c:	4f15      	ldr	r7, [pc, #84]	; (409dd4 <_vfiprintf_r+0xc08>)
  409d7e:	3101      	adds	r1, #1
  409d80:	f7ff bb98 	b.w	4094b4 <_vfiprintf_r+0x2e8>
  409d84:	f1bc 0f06 	cmp.w	ip, #6
  409d88:	bf28      	it	cs
  409d8a:	f04f 0c06 	movcs.w	ip, #6
  409d8e:	4b12      	ldr	r3, [pc, #72]	; (409dd8 <_vfiprintf_r+0xc0c>)
  409d90:	9604      	str	r6, [sp, #16]
  409d92:	46e1      	mov	r9, ip
  409d94:	ea2c 76ec 	bic.w	r6, ip, ip, asr #31
  409d98:	9307      	str	r3, [sp, #28]
  409d9a:	e460      	b.n	40965e <_vfiprintf_r+0x492>
  409d9c:	990e      	ldr	r1, [sp, #56]	; 0x38
  409d9e:	4f0d      	ldr	r7, [pc, #52]	; (409dd4 <_vfiprintf_r+0xc08>)
  409da0:	f101 0e01 	add.w	lr, r1, #1
  409da4:	e618      	b.n	4099d8 <_vfiprintf_r+0x80c>
  409da6:	46e1      	mov	r9, ip
  409da8:	f89d 502f 	ldrb.w	r5, [sp, #47]	; 0x2f
  409dac:	9604      	str	r6, [sp, #16]
  409dae:	4684      	mov	ip, r0
  409db0:	f7ff bb3e 	b.w	409430 <_vfiprintf_r+0x264>
  409db4:	4686      	mov	lr, r0
  409db6:	e66b      	b.n	409a90 <_vfiprintf_r+0x8c4>
  409db8:	9a04      	ldr	r2, [sp, #16]
  409dba:	f89b 3001 	ldrb.w	r3, [fp, #1]
  409dbe:	6816      	ldr	r6, [r2, #0]
  409dc0:	3204      	adds	r2, #4
  409dc2:	2e00      	cmp	r6, #0
  409dc4:	9204      	str	r2, [sp, #16]
  409dc6:	f6bf aa6a 	bge.w	40929e <_vfiprintf_r+0xd2>
  409dca:	f04f 36ff 	mov.w	r6, #4294967295
  409dce:	f7ff ba66 	b.w	40929e <_vfiprintf_r+0xd2>
  409dd2:	bf00      	nop
  409dd4:	0040fed8 	.word	0x0040fed8
  409dd8:	0040fec0 	.word	0x0040fec0

00409ddc <__sbprintf>:
  409ddc:	e92d 42f0 	stmdb	sp!, {r4, r5, r6, r7, r9, lr}
  409de0:	460c      	mov	r4, r1
  409de2:	f5ad 6d8d 	sub.w	sp, sp, #1128	; 0x468
  409de6:	f8b1 e00c 	ldrh.w	lr, [r1, #12]
  409dea:	69e7      	ldr	r7, [r4, #28]
  409dec:	6e49      	ldr	r1, [r1, #100]	; 0x64
  409dee:	f8b4 900e 	ldrh.w	r9, [r4, #14]
  409df2:	9119      	str	r1, [sp, #100]	; 0x64
  409df4:	ad1a      	add	r5, sp, #104	; 0x68
  409df6:	f44f 6680 	mov.w	r6, #1024	; 0x400
  409dfa:	f02e 0e02 	bic.w	lr, lr, #2
  409dfe:	f04f 0c00 	mov.w	ip, #0
  409e02:	9707      	str	r7, [sp, #28]
  409e04:	4669      	mov	r1, sp
  409e06:	6a67      	ldr	r7, [r4, #36]	; 0x24
  409e08:	9500      	str	r5, [sp, #0]
  409e0a:	9504      	str	r5, [sp, #16]
  409e0c:	9602      	str	r6, [sp, #8]
  409e0e:	9605      	str	r6, [sp, #20]
  409e10:	f8ad e00c 	strh.w	lr, [sp, #12]
  409e14:	f8ad 900e 	strh.w	r9, [sp, #14]
  409e18:	9709      	str	r7, [sp, #36]	; 0x24
  409e1a:	f8cd c018 	str.w	ip, [sp, #24]
  409e1e:	4606      	mov	r6, r0
  409e20:	f7ff f9d4 	bl	4091cc <_vfiprintf_r>
  409e24:	1e05      	subs	r5, r0, #0
  409e26:	db07      	blt.n	409e38 <__sbprintf+0x5c>
  409e28:	4630      	mov	r0, r6
  409e2a:	4669      	mov	r1, sp
  409e2c:	f7fc fb9e 	bl	40656c <_fflush_r>
  409e30:	2800      	cmp	r0, #0
  409e32:	bf18      	it	ne
  409e34:	f04f 35ff 	movne.w	r5, #4294967295
  409e38:	f8bd 300c 	ldrh.w	r3, [sp, #12]
  409e3c:	065b      	lsls	r3, r3, #25
  409e3e:	d503      	bpl.n	409e48 <__sbprintf+0x6c>
  409e40:	89a3      	ldrh	r3, [r4, #12]
  409e42:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  409e46:	81a3      	strh	r3, [r4, #12]
  409e48:	4628      	mov	r0, r5
  409e4a:	f50d 6d8d 	add.w	sp, sp, #1128	; 0x468
  409e4e:	e8bd 82f0 	ldmia.w	sp!, {r4, r5, r6, r7, r9, pc}
  409e52:	bf00      	nop

00409e54 <_vfprintf_r>:
  409e54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  409e58:	b0bf      	sub	sp, #252	; 0xfc
  409e5a:	461c      	mov	r4, r3
  409e5c:	4689      	mov	r9, r1
  409e5e:	9208      	str	r2, [sp, #32]
  409e60:	4607      	mov	r7, r0
  409e62:	f002 fb97 	bl	40c594 <_localeconv_r>
  409e66:	6803      	ldr	r3, [r0, #0]
  409e68:	9315      	str	r3, [sp, #84]	; 0x54
  409e6a:	4618      	mov	r0, r3
  409e6c:	f7fd feee 	bl	407c4c <strlen>
  409e70:	940c      	str	r4, [sp, #48]	; 0x30
  409e72:	9016      	str	r0, [sp, #88]	; 0x58
  409e74:	b11f      	cbz	r7, 409e7e <_vfprintf_r+0x2a>
  409e76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
  409e78:	2b00      	cmp	r3, #0
  409e7a:	f000 80f3 	beq.w	40a064 <_vfprintf_r+0x210>
  409e7e:	f8b9 200c 	ldrh.w	r2, [r9, #12]
  409e82:	b293      	uxth	r3, r2
  409e84:	049d      	lsls	r5, r3, #18
  409e86:	d40a      	bmi.n	409e9e <_vfprintf_r+0x4a>
  409e88:	f8d9 1064 	ldr.w	r1, [r9, #100]	; 0x64
  409e8c:	f442 5300 	orr.w	r3, r2, #8192	; 0x2000
  409e90:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
  409e94:	f8a9 300c 	strh.w	r3, [r9, #12]
  409e98:	f8c9 1064 	str.w	r1, [r9, #100]	; 0x64
  409e9c:	b29b      	uxth	r3, r3
  409e9e:	0718      	lsls	r0, r3, #28
  409ea0:	f140 80aa 	bpl.w	409ff8 <_vfprintf_r+0x1a4>
  409ea4:	f8d9 2010 	ldr.w	r2, [r9, #16]
  409ea8:	2a00      	cmp	r2, #0
  409eaa:	f000 80a5 	beq.w	409ff8 <_vfprintf_r+0x1a4>
  409eae:	f003 031a 	and.w	r3, r3, #26
  409eb2:	2b0a      	cmp	r3, #10
  409eb4:	f000 80ac 	beq.w	40a010 <_vfprintf_r+0x1bc>
  409eb8:	2300      	movs	r3, #0
  409eba:	461a      	mov	r2, r3
  409ebc:	9311      	str	r3, [sp, #68]	; 0x44
  409ebe:	9323      	str	r3, [sp, #140]	; 0x8c
  409ec0:	9322      	str	r3, [sp, #136]	; 0x88
  409ec2:	9314      	str	r3, [sp, #80]	; 0x50
  409ec4:	9317      	str	r3, [sp, #92]	; 0x5c
  409ec6:	9309      	str	r3, [sp, #36]	; 0x24
  409ec8:	ab2e      	add	r3, sp, #184	; 0xb8
  409eca:	469c      	mov	ip, r3
  409ecc:	9321      	str	r3, [sp, #132]	; 0x84
  409ece:	9212      	str	r2, [sp, #72]	; 0x48
  409ed0:	9213      	str	r2, [sp, #76]	; 0x4c
  409ed2:	4664      	mov	r4, ip
  409ed4:	46b8      	mov	r8, r7
  409ed6:	9d08      	ldr	r5, [sp, #32]
  409ed8:	782b      	ldrb	r3, [r5, #0]
  409eda:	2b00      	cmp	r3, #0
  409edc:	f000 80c6 	beq.w	40a06c <_vfprintf_r+0x218>
  409ee0:	2b25      	cmp	r3, #37	; 0x25
  409ee2:	d102      	bne.n	409eea <_vfprintf_r+0x96>
  409ee4:	e0c2      	b.n	40a06c <_vfprintf_r+0x218>
  409ee6:	2b25      	cmp	r3, #37	; 0x25
  409ee8:	d003      	beq.n	409ef2 <_vfprintf_r+0x9e>
  409eea:	f815 3f01 	ldrb.w	r3, [r5, #1]!
  409eee:	2b00      	cmp	r3, #0
  409ef0:	d1f9      	bne.n	409ee6 <_vfprintf_r+0x92>
  409ef2:	9b08      	ldr	r3, [sp, #32]
  409ef4:	1aee      	subs	r6, r5, r3
  409ef6:	b17e      	cbz	r6, 409f18 <_vfprintf_r+0xc4>
  409ef8:	9b22      	ldr	r3, [sp, #136]	; 0x88
  409efa:	9a23      	ldr	r2, [sp, #140]	; 0x8c
  409efc:	9908      	ldr	r1, [sp, #32]
  409efe:	6021      	str	r1, [r4, #0]
  409f00:	3301      	adds	r3, #1
  409f02:	4432      	add	r2, r6
  409f04:	2b07      	cmp	r3, #7
  409f06:	6066      	str	r6, [r4, #4]
  409f08:	9223      	str	r2, [sp, #140]	; 0x8c
  409f0a:	9322      	str	r3, [sp, #136]	; 0x88
  409f0c:	f300 8093 	bgt.w	40a036 <_vfprintf_r+0x1e2>
  409f10:	3408      	adds	r4, #8
  409f12:	9b09      	ldr	r3, [sp, #36]	; 0x24
  409f14:	4433      	add	r3, r6
  409f16:	9309      	str	r3, [sp, #36]	; 0x24
  409f18:	782b      	ldrb	r3, [r5, #0]
  409f1a:	2b00      	cmp	r3, #0
  409f1c:	f000 8093 	beq.w	40a046 <_vfprintf_r+0x1f2>
  409f20:	2300      	movs	r3, #0
  409f22:	1c69      	adds	r1, r5, #1
  409f24:	f04f 3aff 	mov.w	sl, #4294967295
  409f28:	786d      	ldrb	r5, [r5, #1]
  409f2a:	f88d 3067 	strb.w	r3, [sp, #103]	; 0x67
  409f2e:	461a      	mov	r2, r3
  409f30:	930a      	str	r3, [sp, #40]	; 0x28
  409f32:	9306      	str	r3, [sp, #24]
  409f34:	4656      	mov	r6, sl
  409f36:	1c4b      	adds	r3, r1, #1
  409f38:	f1a5 0120 	sub.w	r1, r5, #32
  409f3c:	2958      	cmp	r1, #88	; 0x58
  409f3e:	f200 83c1 	bhi.w	40a6c4 <_vfprintf_r+0x870>
  409f42:	e8df f011 	tbh	[pc, r1, lsl #1]
  409f46:	0256      	.short	0x0256
  409f48:	03bf03bf 	.word	0x03bf03bf
  409f4c:	03bf02f6 	.word	0x03bf02f6
  409f50:	03bf03bf 	.word	0x03bf03bf
  409f54:	03bf03bf 	.word	0x03bf03bf
  409f58:	02fd03bf 	.word	0x02fd03bf
  409f5c:	03bf02c6 	.word	0x03bf02c6
  409f60:	034701f2 	.word	0x034701f2
  409f64:	02ca03bf 	.word	0x02ca03bf
  409f68:	02d102d1 	.word	0x02d102d1
  409f6c:	02d102d1 	.word	0x02d102d1
  409f70:	02d102d1 	.word	0x02d102d1
  409f74:	02d102d1 	.word	0x02d102d1
  409f78:	03bf02d1 	.word	0x03bf02d1
  409f7c:	03bf03bf 	.word	0x03bf03bf
  409f80:	03bf03bf 	.word	0x03bf03bf
  409f84:	03bf03bf 	.word	0x03bf03bf
  409f88:	03bf03bf 	.word	0x03bf03bf
  409f8c:	026b03bf 	.word	0x026b03bf
  409f90:	03bf028d 	.word	0x03bf028d
  409f94:	03bf028d 	.word	0x03bf028d
  409f98:	03bf03bf 	.word	0x03bf03bf
  409f9c:	02bf03bf 	.word	0x02bf03bf
  409fa0:	03bf03bf 	.word	0x03bf03bf
  409fa4:	03bf0362 	.word	0x03bf0362
  409fa8:	03bf03bf 	.word	0x03bf03bf
  409fac:	03bf03bf 	.word	0x03bf03bf
  409fb0:	03bf03a9 	.word	0x03bf03a9
  409fb4:	037f03bf 	.word	0x037f03bf
  409fb8:	03bf03bf 	.word	0x03bf03bf
  409fbc:	03bf03bf 	.word	0x03bf03bf
  409fc0:	03bf03bf 	.word	0x03bf03bf
  409fc4:	03bf03bf 	.word	0x03bf03bf
  409fc8:	03bf03bf 	.word	0x03bf03bf
  409fcc:	030b0394 	.word	0x030b0394
  409fd0:	028d028d 	.word	0x028d028d
  409fd4:	0324028d 	.word	0x0324028d
  409fd8:	03bf030b 	.word	0x03bf030b
  409fdc:	032b03bf 	.word	0x032b03bf
  409fe0:	033503bf 	.word	0x033503bf
  409fe4:	02e001f9 	.word	0x02e001f9
  409fe8:	03bf025d 	.word	0x03bf025d
  409fec:	03bf020b 	.word	0x03bf020b
  409ff0:	03bf0095 	.word	0x03bf0095
  409ff4:	023003bf 	.word	0x023003bf
  409ff8:	4638      	mov	r0, r7
  409ffa:	4649      	mov	r1, r9
  409ffc:	f001 f9c2 	bl	40b384 <__swsetup_r>
  40a000:	b9a0      	cbnz	r0, 40a02c <_vfprintf_r+0x1d8>
  40a002:	f8b9 300c 	ldrh.w	r3, [r9, #12]
  40a006:	f003 031a 	and.w	r3, r3, #26
  40a00a:	2b0a      	cmp	r3, #10
  40a00c:	f47f af54 	bne.w	409eb8 <_vfprintf_r+0x64>
  40a010:	f9b9 300e 	ldrsh.w	r3, [r9, #14]
  40a014:	2b00      	cmp	r3, #0
  40a016:	f6ff af4f 	blt.w	409eb8 <_vfprintf_r+0x64>
  40a01a:	4638      	mov	r0, r7
  40a01c:	4649      	mov	r1, r9
  40a01e:	9a08      	ldr	r2, [sp, #32]
  40a020:	4623      	mov	r3, r4
  40a022:	f001 f90b 	bl	40b23c <__sbprintf>
  40a026:	b03f      	add	sp, #252	; 0xfc
  40a028:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40a02c:	f04f 30ff 	mov.w	r0, #4294967295
  40a030:	b03f      	add	sp, #252	; 0xfc
  40a032:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40a036:	4640      	mov	r0, r8
  40a038:	4649      	mov	r1, r9
  40a03a:	aa21      	add	r2, sp, #132	; 0x84
  40a03c:	f7ff f8ba 	bl	4091b4 <__sprint_r>
  40a040:	b940      	cbnz	r0, 40a054 <_vfprintf_r+0x200>
  40a042:	ac2e      	add	r4, sp, #184	; 0xb8
  40a044:	e765      	b.n	409f12 <_vfprintf_r+0xbe>
  40a046:	9b23      	ldr	r3, [sp, #140]	; 0x8c
  40a048:	b123      	cbz	r3, 40a054 <_vfprintf_r+0x200>
  40a04a:	4640      	mov	r0, r8
  40a04c:	4649      	mov	r1, r9
  40a04e:	aa21      	add	r2, sp, #132	; 0x84
  40a050:	f7ff f8b0 	bl	4091b4 <__sprint_r>
  40a054:	f8b9 300c 	ldrh.w	r3, [r9, #12]
  40a058:	065a      	lsls	r2, r3, #25
  40a05a:	d4e7      	bmi.n	40a02c <_vfprintf_r+0x1d8>
  40a05c:	9809      	ldr	r0, [sp, #36]	; 0x24
  40a05e:	b03f      	add	sp, #252	; 0xfc
  40a060:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40a064:	4638      	mov	r0, r7
  40a066:	f7fc fb15 	bl	406694 <__sinit>
  40a06a:	e708      	b.n	409e7e <_vfprintf_r+0x2a>
  40a06c:	9d08      	ldr	r5, [sp, #32]
  40a06e:	e753      	b.n	409f18 <_vfprintf_r+0xc4>
  40a070:	9308      	str	r3, [sp, #32]
  40a072:	9b06      	ldr	r3, [sp, #24]
  40a074:	46b2      	mov	sl, r6
  40a076:	069e      	lsls	r6, r3, #26
  40a078:	f140 8318 	bpl.w	40a6ac <_vfprintf_r+0x858>
  40a07c:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  40a07e:	3707      	adds	r7, #7
  40a080:	f027 0307 	bic.w	r3, r7, #7
  40a084:	f103 0208 	add.w	r2, r3, #8
  40a088:	e9d3 6700 	ldrd	r6, r7, [r3]
  40a08c:	920c      	str	r2, [sp, #48]	; 0x30
  40a08e:	2301      	movs	r3, #1
  40a090:	f04f 0c00 	mov.w	ip, #0
  40a094:	f88d c067 	strb.w	ip, [sp, #103]	; 0x67
  40a098:	f8cd a03c 	str.w	sl, [sp, #60]	; 0x3c
  40a09c:	f1ba 0f00 	cmp.w	sl, #0
  40a0a0:	db03      	blt.n	40a0aa <_vfprintf_r+0x256>
  40a0a2:	9a06      	ldr	r2, [sp, #24]
  40a0a4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
  40a0a8:	9206      	str	r2, [sp, #24]
  40a0aa:	ea56 0207 	orrs.w	r2, r6, r7
  40a0ae:	f040 8319 	bne.w	40a6e4 <_vfprintf_r+0x890>
  40a0b2:	f1ba 0f00 	cmp.w	sl, #0
  40a0b6:	f000 8416 	beq.w	40a8e6 <_vfprintf_r+0xa92>
  40a0ba:	2b01      	cmp	r3, #1
  40a0bc:	f000 831a 	beq.w	40a6f4 <_vfprintf_r+0x8a0>
  40a0c0:	2b02      	cmp	r3, #2
  40a0c2:	f000 844c 	beq.w	40a95e <_vfprintf_r+0xb0a>
  40a0c6:	a92e      	add	r1, sp, #184	; 0xb8
  40a0c8:	08f2      	lsrs	r2, r6, #3
  40a0ca:	ea42 7247 	orr.w	r2, r2, r7, lsl #29
  40a0ce:	08f8      	lsrs	r0, r7, #3
  40a0d0:	f006 0307 	and.w	r3, r6, #7
  40a0d4:	4607      	mov	r7, r0
  40a0d6:	4616      	mov	r6, r2
  40a0d8:	3330      	adds	r3, #48	; 0x30
  40a0da:	ea56 0207 	orrs.w	r2, r6, r7
  40a0de:	f801 3d01 	strb.w	r3, [r1, #-1]!
  40a0e2:	d1f1      	bne.n	40a0c8 <_vfprintf_r+0x274>
  40a0e4:	9a06      	ldr	r2, [sp, #24]
  40a0e6:	910e      	str	r1, [sp, #56]	; 0x38
  40a0e8:	07d0      	lsls	r0, r2, #31
  40a0ea:	f100 850d 	bmi.w	40ab08 <_vfprintf_r+0xcb4>
  40a0ee:	ab2e      	add	r3, sp, #184	; 0xb8
  40a0f0:	1a5b      	subs	r3, r3, r1
  40a0f2:	930b      	str	r3, [sp, #44]	; 0x2c
  40a0f4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  40a0f6:	4592      	cmp	sl, r2
  40a0f8:	4653      	mov	r3, sl
  40a0fa:	bfb8      	it	lt
  40a0fc:	4613      	movlt	r3, r2
  40a0fe:	9307      	str	r3, [sp, #28]
  40a100:	2300      	movs	r3, #0
  40a102:	9310      	str	r3, [sp, #64]	; 0x40
  40a104:	f1bc 0f00 	cmp.w	ip, #0
  40a108:	d002      	beq.n	40a110 <_vfprintf_r+0x2bc>
  40a10a:	9b07      	ldr	r3, [sp, #28]
  40a10c:	3301      	adds	r3, #1
  40a10e:	9307      	str	r3, [sp, #28]
  40a110:	9b06      	ldr	r3, [sp, #24]
  40a112:	f013 0302 	ands.w	r3, r3, #2
  40a116:	930d      	str	r3, [sp, #52]	; 0x34
  40a118:	d002      	beq.n	40a120 <_vfprintf_r+0x2cc>
  40a11a:	9b07      	ldr	r3, [sp, #28]
  40a11c:	3302      	adds	r3, #2
  40a11e:	9307      	str	r3, [sp, #28]
  40a120:	9b06      	ldr	r3, [sp, #24]
  40a122:	f013 0684 	ands.w	r6, r3, #132	; 0x84
  40a126:	f040 82da 	bne.w	40a6de <_vfprintf_r+0x88a>
  40a12a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40a12c:	9a07      	ldr	r2, [sp, #28]
  40a12e:	ebc2 0a03 	rsb	sl, r2, r3
  40a132:	f1ba 0f00 	cmp.w	sl, #0
  40a136:	f340 82d2 	ble.w	40a6de <_vfprintf_r+0x88a>
  40a13a:	f1ba 0f10 	cmp.w	sl, #16
  40a13e:	9923      	ldr	r1, [sp, #140]	; 0x8c
  40a140:	9a22      	ldr	r2, [sp, #136]	; 0x88
  40a142:	4fb3      	ldr	r7, [pc, #716]	; (40a410 <_vfprintf_r+0x5bc>)
  40a144:	bfc8      	it	gt
  40a146:	f04f 0b10 	movgt.w	fp, #16
  40a14a:	dc07      	bgt.n	40a15c <_vfprintf_r+0x308>
  40a14c:	e01e      	b.n	40a18c <_vfprintf_r+0x338>
  40a14e:	f1aa 0a10 	sub.w	sl, sl, #16
  40a152:	f1ba 0f10 	cmp.w	sl, #16
  40a156:	f104 0408 	add.w	r4, r4, #8
  40a15a:	dd17      	ble.n	40a18c <_vfprintf_r+0x338>
  40a15c:	3201      	adds	r2, #1
  40a15e:	3110      	adds	r1, #16
  40a160:	2a07      	cmp	r2, #7
  40a162:	9123      	str	r1, [sp, #140]	; 0x8c
  40a164:	9222      	str	r2, [sp, #136]	; 0x88
  40a166:	e884 0880 	stmia.w	r4, {r7, fp}
  40a16a:	ddf0      	ble.n	40a14e <_vfprintf_r+0x2fa>
  40a16c:	4640      	mov	r0, r8
  40a16e:	4649      	mov	r1, r9
  40a170:	aa21      	add	r2, sp, #132	; 0x84
  40a172:	f7ff f81f 	bl	4091b4 <__sprint_r>
  40a176:	2800      	cmp	r0, #0
  40a178:	f47f af6c 	bne.w	40a054 <_vfprintf_r+0x200>
  40a17c:	f1aa 0a10 	sub.w	sl, sl, #16
  40a180:	f1ba 0f10 	cmp.w	sl, #16
  40a184:	9923      	ldr	r1, [sp, #140]	; 0x8c
  40a186:	9a22      	ldr	r2, [sp, #136]	; 0x88
  40a188:	ac2e      	add	r4, sp, #184	; 0xb8
  40a18a:	dce7      	bgt.n	40a15c <_vfprintf_r+0x308>
  40a18c:	3201      	adds	r2, #1
  40a18e:	eb0a 0b01 	add.w	fp, sl, r1
  40a192:	2a07      	cmp	r2, #7
  40a194:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
  40a198:	9222      	str	r2, [sp, #136]	; 0x88
  40a19a:	e884 0480 	stmia.w	r4, {r7, sl}
  40a19e:	f300 8443 	bgt.w	40aa28 <_vfprintf_r+0xbd4>
  40a1a2:	f89d c067 	ldrb.w	ip, [sp, #103]	; 0x67
  40a1a6:	3408      	adds	r4, #8
  40a1a8:	f1bc 0f00 	cmp.w	ip, #0
  40a1ac:	d00f      	beq.n	40a1ce <_vfprintf_r+0x37a>
  40a1ae:	9b22      	ldr	r3, [sp, #136]	; 0x88
  40a1b0:	3301      	adds	r3, #1
  40a1b2:	f10b 0b01 	add.w	fp, fp, #1
  40a1b6:	f10d 0167 	add.w	r1, sp, #103	; 0x67
  40a1ba:	2201      	movs	r2, #1
  40a1bc:	2b07      	cmp	r3, #7
  40a1be:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
  40a1c2:	9322      	str	r3, [sp, #136]	; 0x88
  40a1c4:	e884 0006 	stmia.w	r4, {r1, r2}
  40a1c8:	f300 83b7 	bgt.w	40a93a <_vfprintf_r+0xae6>
  40a1cc:	3408      	adds	r4, #8
  40a1ce:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  40a1d0:	b173      	cbz	r3, 40a1f0 <_vfprintf_r+0x39c>
  40a1d2:	9b22      	ldr	r3, [sp, #136]	; 0x88
  40a1d4:	3301      	adds	r3, #1
  40a1d6:	f10b 0b02 	add.w	fp, fp, #2
  40a1da:	a91a      	add	r1, sp, #104	; 0x68
  40a1dc:	2202      	movs	r2, #2
  40a1de:	2b07      	cmp	r3, #7
  40a1e0:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
  40a1e4:	9322      	str	r3, [sp, #136]	; 0x88
  40a1e6:	e884 0006 	stmia.w	r4, {r1, r2}
  40a1ea:	f300 839a 	bgt.w	40a922 <_vfprintf_r+0xace>
  40a1ee:	3408      	adds	r4, #8
  40a1f0:	2e80      	cmp	r6, #128	; 0x80
  40a1f2:	f000 82ea 	beq.w	40a7ca <_vfprintf_r+0x976>
  40a1f6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  40a1f8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  40a1fa:	ebc2 0a03 	rsb	sl, r2, r3
  40a1fe:	f1ba 0f00 	cmp.w	sl, #0
  40a202:	dd32      	ble.n	40a26a <_vfprintf_r+0x416>
  40a204:	f1ba 0f10 	cmp.w	sl, #16
  40a208:	9a22      	ldr	r2, [sp, #136]	; 0x88
  40a20a:	4f82      	ldr	r7, [pc, #520]	; (40a414 <_vfprintf_r+0x5c0>)
  40a20c:	dd22      	ble.n	40a254 <_vfprintf_r+0x400>
  40a20e:	2610      	movs	r6, #16
  40a210:	465b      	mov	r3, fp
  40a212:	e006      	b.n	40a222 <_vfprintf_r+0x3ce>
  40a214:	f1aa 0a10 	sub.w	sl, sl, #16
  40a218:	f1ba 0f10 	cmp.w	sl, #16
  40a21c:	f104 0408 	add.w	r4, r4, #8
  40a220:	dd17      	ble.n	40a252 <_vfprintf_r+0x3fe>
  40a222:	3201      	adds	r2, #1
  40a224:	3310      	adds	r3, #16
  40a226:	2a07      	cmp	r2, #7
  40a228:	9323      	str	r3, [sp, #140]	; 0x8c
  40a22a:	9222      	str	r2, [sp, #136]	; 0x88
  40a22c:	6027      	str	r7, [r4, #0]
  40a22e:	6066      	str	r6, [r4, #4]
  40a230:	ddf0      	ble.n	40a214 <_vfprintf_r+0x3c0>
  40a232:	4640      	mov	r0, r8
  40a234:	4649      	mov	r1, r9
  40a236:	aa21      	add	r2, sp, #132	; 0x84
  40a238:	f7fe ffbc 	bl	4091b4 <__sprint_r>
  40a23c:	2800      	cmp	r0, #0
  40a23e:	f47f af09 	bne.w	40a054 <_vfprintf_r+0x200>
  40a242:	f1aa 0a10 	sub.w	sl, sl, #16
  40a246:	f1ba 0f10 	cmp.w	sl, #16
  40a24a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
  40a24c:	9a22      	ldr	r2, [sp, #136]	; 0x88
  40a24e:	ac2e      	add	r4, sp, #184	; 0xb8
  40a250:	dce7      	bgt.n	40a222 <_vfprintf_r+0x3ce>
  40a252:	469b      	mov	fp, r3
  40a254:	3201      	adds	r2, #1
  40a256:	44d3      	add	fp, sl
  40a258:	2a07      	cmp	r2, #7
  40a25a:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
  40a25e:	9222      	str	r2, [sp, #136]	; 0x88
  40a260:	e884 0480 	stmia.w	r4, {r7, sl}
  40a264:	f300 8351 	bgt.w	40a90a <_vfprintf_r+0xab6>
  40a268:	3408      	adds	r4, #8
  40a26a:	9b06      	ldr	r3, [sp, #24]
  40a26c:	05db      	lsls	r3, r3, #23
  40a26e:	f100 8255 	bmi.w	40a71c <_vfprintf_r+0x8c8>
  40a272:	9b22      	ldr	r3, [sp, #136]	; 0x88
  40a274:	990b      	ldr	r1, [sp, #44]	; 0x2c
  40a276:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  40a278:	6022      	str	r2, [r4, #0]
  40a27a:	3301      	adds	r3, #1
  40a27c:	448b      	add	fp, r1
  40a27e:	2b07      	cmp	r3, #7
  40a280:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
  40a284:	6061      	str	r1, [r4, #4]
  40a286:	9322      	str	r3, [sp, #136]	; 0x88
  40a288:	f300 8317 	bgt.w	40a8ba <_vfprintf_r+0xa66>
  40a28c:	3408      	adds	r4, #8
  40a28e:	9b06      	ldr	r3, [sp, #24]
  40a290:	0759      	lsls	r1, r3, #29
  40a292:	d53a      	bpl.n	40a30a <_vfprintf_r+0x4b6>
  40a294:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40a296:	9a07      	ldr	r2, [sp, #28]
  40a298:	1a9d      	subs	r5, r3, r2
  40a29a:	2d00      	cmp	r5, #0
  40a29c:	dd35      	ble.n	40a30a <_vfprintf_r+0x4b6>
  40a29e:	2d10      	cmp	r5, #16
  40a2a0:	9b22      	ldr	r3, [sp, #136]	; 0x88
  40a2a2:	4f5b      	ldr	r7, [pc, #364]	; (40a410 <_vfprintf_r+0x5bc>)
  40a2a4:	dd1e      	ble.n	40a2e4 <_vfprintf_r+0x490>
  40a2a6:	2610      	movs	r6, #16
  40a2a8:	465a      	mov	r2, fp
  40a2aa:	e004      	b.n	40a2b6 <_vfprintf_r+0x462>
  40a2ac:	3d10      	subs	r5, #16
  40a2ae:	2d10      	cmp	r5, #16
  40a2b0:	f104 0408 	add.w	r4, r4, #8
  40a2b4:	dd15      	ble.n	40a2e2 <_vfprintf_r+0x48e>
  40a2b6:	3301      	adds	r3, #1
  40a2b8:	3210      	adds	r2, #16
  40a2ba:	2b07      	cmp	r3, #7
  40a2bc:	9223      	str	r2, [sp, #140]	; 0x8c
  40a2be:	9322      	str	r3, [sp, #136]	; 0x88
  40a2c0:	6027      	str	r7, [r4, #0]
  40a2c2:	6066      	str	r6, [r4, #4]
  40a2c4:	ddf2      	ble.n	40a2ac <_vfprintf_r+0x458>
  40a2c6:	4640      	mov	r0, r8
  40a2c8:	4649      	mov	r1, r9
  40a2ca:	aa21      	add	r2, sp, #132	; 0x84
  40a2cc:	f7fe ff72 	bl	4091b4 <__sprint_r>
  40a2d0:	2800      	cmp	r0, #0
  40a2d2:	f47f aebf 	bne.w	40a054 <_vfprintf_r+0x200>
  40a2d6:	3d10      	subs	r5, #16
  40a2d8:	2d10      	cmp	r5, #16
  40a2da:	9a23      	ldr	r2, [sp, #140]	; 0x8c
  40a2dc:	9b22      	ldr	r3, [sp, #136]	; 0x88
  40a2de:	ac2e      	add	r4, sp, #184	; 0xb8
  40a2e0:	dce9      	bgt.n	40a2b6 <_vfprintf_r+0x462>
  40a2e2:	4693      	mov	fp, r2
  40a2e4:	3301      	adds	r3, #1
  40a2e6:	44ab      	add	fp, r5
  40a2e8:	2b07      	cmp	r3, #7
  40a2ea:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
  40a2ee:	9322      	str	r3, [sp, #136]	; 0x88
  40a2f0:	6027      	str	r7, [r4, #0]
  40a2f2:	6065      	str	r5, [r4, #4]
  40a2f4:	dd09      	ble.n	40a30a <_vfprintf_r+0x4b6>
  40a2f6:	4640      	mov	r0, r8
  40a2f8:	4649      	mov	r1, r9
  40a2fa:	aa21      	add	r2, sp, #132	; 0x84
  40a2fc:	f7fe ff5a 	bl	4091b4 <__sprint_r>
  40a300:	2800      	cmp	r0, #0
  40a302:	f47f aea7 	bne.w	40a054 <_vfprintf_r+0x200>
  40a306:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
  40a30a:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40a30c:	9a07      	ldr	r2, [sp, #28]
  40a30e:	990a      	ldr	r1, [sp, #40]	; 0x28
  40a310:	428a      	cmp	r2, r1
  40a312:	bfac      	ite	ge
  40a314:	189b      	addge	r3, r3, r2
  40a316:	185b      	addlt	r3, r3, r1
  40a318:	9309      	str	r3, [sp, #36]	; 0x24
  40a31a:	f1bb 0f00 	cmp.w	fp, #0
  40a31e:	f040 82d8 	bne.w	40a8d2 <_vfprintf_r+0xa7e>
  40a322:	2300      	movs	r3, #0
  40a324:	9322      	str	r3, [sp, #136]	; 0x88
  40a326:	ac2e      	add	r4, sp, #184	; 0xb8
  40a328:	e5d5      	b.n	409ed6 <_vfprintf_r+0x82>
  40a32a:	4619      	mov	r1, r3
  40a32c:	9806      	ldr	r0, [sp, #24]
  40a32e:	781d      	ldrb	r5, [r3, #0]
  40a330:	f040 0004 	orr.w	r0, r0, #4
  40a334:	9006      	str	r0, [sp, #24]
  40a336:	e5fe      	b.n	409f36 <_vfprintf_r+0xe2>
  40a338:	9308      	str	r3, [sp, #32]
  40a33a:	9b06      	ldr	r3, [sp, #24]
  40a33c:	f013 0320 	ands.w	r3, r3, #32
  40a340:	46b2      	mov	sl, r6
  40a342:	f000 816d 	beq.w	40a620 <_vfprintf_r+0x7cc>
  40a346:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  40a348:	3707      	adds	r7, #7
  40a34a:	f027 0307 	bic.w	r3, r7, #7
  40a34e:	f103 0208 	add.w	r2, r3, #8
  40a352:	e9d3 6700 	ldrd	r6, r7, [r3]
  40a356:	920c      	str	r2, [sp, #48]	; 0x30
  40a358:	2300      	movs	r3, #0
  40a35a:	e699      	b.n	40a090 <_vfprintf_r+0x23c>
  40a35c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  40a35e:	9308      	str	r3, [sp, #32]
  40a360:	6813      	ldr	r3, [r2, #0]
  40a362:	930e      	str	r3, [sp, #56]	; 0x38
  40a364:	f04f 0b00 	mov.w	fp, #0
  40a368:	f88d b067 	strb.w	fp, [sp, #103]	; 0x67
  40a36c:	1d17      	adds	r7, r2, #4
  40a36e:	2b00      	cmp	r3, #0
  40a370:	f000 864f 	beq.w	40b012 <_vfprintf_r+0x11be>
  40a374:	2e00      	cmp	r6, #0
  40a376:	980e      	ldr	r0, [sp, #56]	; 0x38
  40a378:	f2c0 8601 	blt.w	40af7e <_vfprintf_r+0x112a>
  40a37c:	4659      	mov	r1, fp
  40a37e:	4632      	mov	r2, r6
  40a380:	f7fc fff8 	bl	407374 <memchr>
  40a384:	2800      	cmp	r0, #0
  40a386:	f000 8680 	beq.w	40b08a <_vfprintf_r+0x1236>
  40a38a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  40a38c:	f8cd b03c 	str.w	fp, [sp, #60]	; 0x3c
  40a390:	1ac3      	subs	r3, r0, r3
  40a392:	930b      	str	r3, [sp, #44]	; 0x2c
  40a394:	970c      	str	r7, [sp, #48]	; 0x30
  40a396:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  40a39a:	9307      	str	r3, [sp, #28]
  40a39c:	f8cd b040 	str.w	fp, [sp, #64]	; 0x40
  40a3a0:	f89d c067 	ldrb.w	ip, [sp, #103]	; 0x67
  40a3a4:	e6ae      	b.n	40a104 <_vfprintf_r+0x2b0>
  40a3a6:	9308      	str	r3, [sp, #32]
  40a3a8:	4b1b      	ldr	r3, [pc, #108]	; (40a418 <_vfprintf_r+0x5c4>)
  40a3aa:	9314      	str	r3, [sp, #80]	; 0x50
  40a3ac:	9b06      	ldr	r3, [sp, #24]
  40a3ae:	f88d 2067 	strb.w	r2, [sp, #103]	; 0x67
  40a3b2:	0699      	lsls	r1, r3, #26
  40a3b4:	46b2      	mov	sl, r6
  40a3b6:	f140 814f 	bpl.w	40a658 <_vfprintf_r+0x804>
  40a3ba:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  40a3bc:	3707      	adds	r7, #7
  40a3be:	f027 0307 	bic.w	r3, r7, #7
  40a3c2:	e9d3 6700 	ldrd	r6, r7, [r3]
  40a3c6:	f103 0208 	add.w	r2, r3, #8
  40a3ca:	920c      	str	r2, [sp, #48]	; 0x30
  40a3cc:	9b06      	ldr	r3, [sp, #24]
  40a3ce:	07db      	lsls	r3, r3, #31
  40a3d0:	f140 82de 	bpl.w	40a990 <_vfprintf_r+0xb3c>
  40a3d4:	ea56 0307 	orrs.w	r3, r6, r7
  40a3d8:	f000 82da 	beq.w	40a990 <_vfprintf_r+0xb3c>
  40a3dc:	9a06      	ldr	r2, [sp, #24]
  40a3de:	f88d 5069 	strb.w	r5, [sp, #105]	; 0x69
  40a3e2:	2330      	movs	r3, #48	; 0x30
  40a3e4:	f042 0202 	orr.w	r2, r2, #2
  40a3e8:	f88d 3068 	strb.w	r3, [sp, #104]	; 0x68
  40a3ec:	9206      	str	r2, [sp, #24]
  40a3ee:	2302      	movs	r3, #2
  40a3f0:	e64e      	b.n	40a090 <_vfprintf_r+0x23c>
  40a3f2:	781d      	ldrb	r5, [r3, #0]
  40a3f4:	4619      	mov	r1, r3
  40a3f6:	2a00      	cmp	r2, #0
  40a3f8:	f47f ad9d 	bne.w	409f36 <_vfprintf_r+0xe2>
  40a3fc:	2220      	movs	r2, #32
  40a3fe:	e59a      	b.n	409f36 <_vfprintf_r+0xe2>
  40a400:	9906      	ldr	r1, [sp, #24]
  40a402:	f041 0120 	orr.w	r1, r1, #32
  40a406:	9106      	str	r1, [sp, #24]
  40a408:	781d      	ldrb	r5, [r3, #0]
  40a40a:	4619      	mov	r1, r3
  40a40c:	e593      	b.n	409f36 <_vfprintf_r+0xe2>
  40a40e:	bf00      	nop
  40a410:	0040fef8 	.word	0x0040fef8
  40a414:	0040fee8 	.word	0x0040fee8
  40a418:	0040feac 	.word	0x0040feac
  40a41c:	9308      	str	r3, [sp, #32]
  40a41e:	9b06      	ldr	r3, [sp, #24]
  40a420:	f88d 2067 	strb.w	r2, [sp, #103]	; 0x67
  40a424:	f043 0310 	orr.w	r3, r3, #16
  40a428:	9306      	str	r3, [sp, #24]
  40a42a:	9b06      	ldr	r3, [sp, #24]
  40a42c:	0699      	lsls	r1, r3, #26
  40a42e:	46b2      	mov	sl, r6
  40a430:	f140 809c 	bpl.w	40a56c <_vfprintf_r+0x718>
  40a434:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  40a436:	3707      	adds	r7, #7
  40a438:	f027 0707 	bic.w	r7, r7, #7
  40a43c:	e9d7 2300 	ldrd	r2, r3, [r7]
  40a440:	f107 0108 	add.w	r1, r7, #8
  40a444:	910c      	str	r1, [sp, #48]	; 0x30
  40a446:	4616      	mov	r6, r2
  40a448:	461f      	mov	r7, r3
  40a44a:	2a00      	cmp	r2, #0
  40a44c:	f173 0300 	sbcs.w	r3, r3, #0
  40a450:	f2c0 8415 	blt.w	40ac7e <_vfprintf_r+0xe2a>
  40a454:	f89d c067 	ldrb.w	ip, [sp, #103]	; 0x67
  40a458:	f8cd a03c 	str.w	sl, [sp, #60]	; 0x3c
  40a45c:	2301      	movs	r3, #1
  40a45e:	e61d      	b.n	40a09c <_vfprintf_r+0x248>
  40a460:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  40a462:	9308      	str	r3, [sp, #32]
  40a464:	3707      	adds	r7, #7
  40a466:	f027 0307 	bic.w	r3, r7, #7
  40a46a:	f88d 2067 	strb.w	r2, [sp, #103]	; 0x67
  40a46e:	f103 0208 	add.w	r2, r3, #8
  40a472:	920c      	str	r2, [sp, #48]	; 0x30
  40a474:	681a      	ldr	r2, [r3, #0]
  40a476:	9212      	str	r2, [sp, #72]	; 0x48
  40a478:	685b      	ldr	r3, [r3, #4]
  40a47a:	9313      	str	r3, [sp, #76]	; 0x4c
  40a47c:	9913      	ldr	r1, [sp, #76]	; 0x4c
  40a47e:	9812      	ldr	r0, [sp, #72]	; 0x48
  40a480:	f002 fba8 	bl	40cbd4 <__fpclassifyd>
  40a484:	2801      	cmp	r0, #1
  40a486:	46b3      	mov	fp, r6
  40a488:	9812      	ldr	r0, [sp, #72]	; 0x48
  40a48a:	9913      	ldr	r1, [sp, #76]	; 0x4c
  40a48c:	f040 8406 	bne.w	40ac9c <_vfprintf_r+0xe48>
  40a490:	2200      	movs	r2, #0
  40a492:	2300      	movs	r3, #0
  40a494:	f7fb ff00 	bl	406298 <__aeabi_dcmplt>
  40a498:	2800      	cmp	r0, #0
  40a49a:	f040 85ee 	bne.w	40b07a <_vfprintf_r+0x1226>
  40a49e:	f89d c067 	ldrb.w	ip, [sp, #103]	; 0x67
  40a4a2:	9e06      	ldr	r6, [sp, #24]
  40a4a4:	4a99      	ldr	r2, [pc, #612]	; (40a70c <_vfprintf_r+0x8b8>)
  40a4a6:	4b9a      	ldr	r3, [pc, #616]	; (40a710 <_vfprintf_r+0x8bc>)
  40a4a8:	2103      	movs	r1, #3
  40a4aa:	2000      	movs	r0, #0
  40a4ac:	f026 0680 	bic.w	r6, r6, #128	; 0x80
  40a4b0:	2d47      	cmp	r5, #71	; 0x47
  40a4b2:	bfd8      	it	le
  40a4b4:	461a      	movle	r2, r3
  40a4b6:	9107      	str	r1, [sp, #28]
  40a4b8:	900f      	str	r0, [sp, #60]	; 0x3c
  40a4ba:	9606      	str	r6, [sp, #24]
  40a4bc:	920e      	str	r2, [sp, #56]	; 0x38
  40a4be:	910b      	str	r1, [sp, #44]	; 0x2c
  40a4c0:	9010      	str	r0, [sp, #64]	; 0x40
  40a4c2:	e61f      	b.n	40a104 <_vfprintf_r+0x2b0>
  40a4c4:	9906      	ldr	r1, [sp, #24]
  40a4c6:	f041 0108 	orr.w	r1, r1, #8
  40a4ca:	9106      	str	r1, [sp, #24]
  40a4cc:	781d      	ldrb	r5, [r3, #0]
  40a4ce:	4619      	mov	r1, r3
  40a4d0:	e531      	b.n	409f36 <_vfprintf_r+0xe2>
  40a4d2:	781d      	ldrb	r5, [r3, #0]
  40a4d4:	4619      	mov	r1, r3
  40a4d6:	222b      	movs	r2, #43	; 0x2b
  40a4d8:	e52d      	b.n	409f36 <_vfprintf_r+0xe2>
  40a4da:	9906      	ldr	r1, [sp, #24]
  40a4dc:	f041 0180 	orr.w	r1, r1, #128	; 0x80
  40a4e0:	9106      	str	r1, [sp, #24]
  40a4e2:	781d      	ldrb	r5, [r3, #0]
  40a4e4:	4619      	mov	r1, r3
  40a4e6:	e526      	b.n	409f36 <_vfprintf_r+0xe2>
  40a4e8:	f1a5 0030 	sub.w	r0, r5, #48	; 0x30
  40a4ec:	2100      	movs	r1, #0
  40a4ee:	f813 5b01 	ldrb.w	r5, [r3], #1
  40a4f2:	eb01 0181 	add.w	r1, r1, r1, lsl #2
  40a4f6:	eb00 0141 	add.w	r1, r0, r1, lsl #1
  40a4fa:	f1a5 0030 	sub.w	r0, r5, #48	; 0x30
  40a4fe:	2809      	cmp	r0, #9
  40a500:	d9f5      	bls.n	40a4ee <_vfprintf_r+0x69a>
  40a502:	910a      	str	r1, [sp, #40]	; 0x28
  40a504:	e518      	b.n	409f38 <_vfprintf_r+0xe4>
  40a506:	990c      	ldr	r1, [sp, #48]	; 0x30
  40a508:	9308      	str	r3, [sp, #32]
  40a50a:	2330      	movs	r3, #48	; 0x30
  40a50c:	9a06      	ldr	r2, [sp, #24]
  40a50e:	f88d 3068 	strb.w	r3, [sp, #104]	; 0x68
  40a512:	460b      	mov	r3, r1
  40a514:	3304      	adds	r3, #4
  40a516:	2578      	movs	r5, #120	; 0x78
  40a518:	f042 0202 	orr.w	r2, r2, #2
  40a51c:	930c      	str	r3, [sp, #48]	; 0x30
  40a51e:	4b7d      	ldr	r3, [pc, #500]	; (40a714 <_vfprintf_r+0x8c0>)
  40a520:	9314      	str	r3, [sp, #80]	; 0x50
  40a522:	46b2      	mov	sl, r6
  40a524:	9206      	str	r2, [sp, #24]
  40a526:	680e      	ldr	r6, [r1, #0]
  40a528:	f88d 5069 	strb.w	r5, [sp, #105]	; 0x69
  40a52c:	2700      	movs	r7, #0
  40a52e:	2302      	movs	r3, #2
  40a530:	e5ae      	b.n	40a090 <_vfprintf_r+0x23c>
  40a532:	9906      	ldr	r1, [sp, #24]
  40a534:	f041 0101 	orr.w	r1, r1, #1
  40a538:	9106      	str	r1, [sp, #24]
  40a53a:	781d      	ldrb	r5, [r3, #0]
  40a53c:	4619      	mov	r1, r3
  40a53e:	e4fa      	b.n	409f36 <_vfprintf_r+0xe2>
  40a540:	9d0c      	ldr	r5, [sp, #48]	; 0x30
  40a542:	6829      	ldr	r1, [r5, #0]
  40a544:	910a      	str	r1, [sp, #40]	; 0x28
  40a546:	4608      	mov	r0, r1
  40a548:	2800      	cmp	r0, #0
  40a54a:	4629      	mov	r1, r5
  40a54c:	f101 0104 	add.w	r1, r1, #4
  40a550:	f2c0 84e3 	blt.w	40af1a <_vfprintf_r+0x10c6>
  40a554:	910c      	str	r1, [sp, #48]	; 0x30
  40a556:	781d      	ldrb	r5, [r3, #0]
  40a558:	4619      	mov	r1, r3
  40a55a:	e4ec      	b.n	409f36 <_vfprintf_r+0xe2>
  40a55c:	9308      	str	r3, [sp, #32]
  40a55e:	9b06      	ldr	r3, [sp, #24]
  40a560:	f88d 2067 	strb.w	r2, [sp, #103]	; 0x67
  40a564:	0699      	lsls	r1, r3, #26
  40a566:	46b2      	mov	sl, r6
  40a568:	f53f af64 	bmi.w	40a434 <_vfprintf_r+0x5e0>
  40a56c:	9b06      	ldr	r3, [sp, #24]
  40a56e:	06da      	lsls	r2, r3, #27
  40a570:	f100 8292 	bmi.w	40aa98 <_vfprintf_r+0xc44>
  40a574:	9b06      	ldr	r3, [sp, #24]
  40a576:	065b      	lsls	r3, r3, #25
  40a578:	f140 828e 	bpl.w	40aa98 <_vfprintf_r+0xc44>
  40a57c:	990c      	ldr	r1, [sp, #48]	; 0x30
  40a57e:	f9b1 6000 	ldrsh.w	r6, [r1]
  40a582:	3104      	adds	r1, #4
  40a584:	17f7      	asrs	r7, r6, #31
  40a586:	4632      	mov	r2, r6
  40a588:	463b      	mov	r3, r7
  40a58a:	910c      	str	r1, [sp, #48]	; 0x30
  40a58c:	e75d      	b.n	40a44a <_vfprintf_r+0x5f6>
  40a58e:	9906      	ldr	r1, [sp, #24]
  40a590:	f041 0140 	orr.w	r1, r1, #64	; 0x40
  40a594:	9106      	str	r1, [sp, #24]
  40a596:	781d      	ldrb	r5, [r3, #0]
  40a598:	4619      	mov	r1, r3
  40a59a:	e4cc      	b.n	409f36 <_vfprintf_r+0xe2>
  40a59c:	781d      	ldrb	r5, [r3, #0]
  40a59e:	9906      	ldr	r1, [sp, #24]
  40a5a0:	2d6c      	cmp	r5, #108	; 0x6c
  40a5a2:	f000 84b3 	beq.w	40af0c <_vfprintf_r+0x10b8>
  40a5a6:	f041 0110 	orr.w	r1, r1, #16
  40a5aa:	9106      	str	r1, [sp, #24]
  40a5ac:	4619      	mov	r1, r3
  40a5ae:	e4c2      	b.n	409f36 <_vfprintf_r+0xe2>
  40a5b0:	9308      	str	r3, [sp, #32]
  40a5b2:	9b06      	ldr	r3, [sp, #24]
  40a5b4:	f88d 2067 	strb.w	r2, [sp, #103]	; 0x67
  40a5b8:	069a      	lsls	r2, r3, #26
  40a5ba:	f140 8400 	bpl.w	40adbe <_vfprintf_r+0xf6a>
  40a5be:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  40a5c0:	9909      	ldr	r1, [sp, #36]	; 0x24
  40a5c2:	6813      	ldr	r3, [r2, #0]
  40a5c4:	17cf      	asrs	r7, r1, #31
  40a5c6:	4608      	mov	r0, r1
  40a5c8:	3204      	adds	r2, #4
  40a5ca:	4639      	mov	r1, r7
  40a5cc:	920c      	str	r2, [sp, #48]	; 0x30
  40a5ce:	e9c3 0100 	strd	r0, r1, [r3]
  40a5d2:	e480      	b.n	409ed6 <_vfprintf_r+0x82>
  40a5d4:	781d      	ldrb	r5, [r3, #0]
  40a5d6:	2d2a      	cmp	r5, #42	; 0x2a
  40a5d8:	f103 0101 	add.w	r1, r3, #1
  40a5dc:	f000 860e 	beq.w	40b1fc <_vfprintf_r+0x13a8>
  40a5e0:	f1a5 0030 	sub.w	r0, r5, #48	; 0x30
  40a5e4:	2809      	cmp	r0, #9
  40a5e6:	460b      	mov	r3, r1
  40a5e8:	f04f 0600 	mov.w	r6, #0
  40a5ec:	f63f aca4 	bhi.w	409f38 <_vfprintf_r+0xe4>
  40a5f0:	f813 5b01 	ldrb.w	r5, [r3], #1
  40a5f4:	eb06 0686 	add.w	r6, r6, r6, lsl #2
  40a5f8:	eb00 0646 	add.w	r6, r0, r6, lsl #1
  40a5fc:	f1a5 0030 	sub.w	r0, r5, #48	; 0x30
  40a600:	2809      	cmp	r0, #9
  40a602:	d9f5      	bls.n	40a5f0 <_vfprintf_r+0x79c>
  40a604:	ea46 76e6 	orr.w	r6, r6, r6, asr #31
  40a608:	e496      	b.n	409f38 <_vfprintf_r+0xe4>
  40a60a:	9308      	str	r3, [sp, #32]
  40a60c:	9b06      	ldr	r3, [sp, #24]
  40a60e:	f043 0310 	orr.w	r3, r3, #16
  40a612:	9306      	str	r3, [sp, #24]
  40a614:	9b06      	ldr	r3, [sp, #24]
  40a616:	f013 0320 	ands.w	r3, r3, #32
  40a61a:	46b2      	mov	sl, r6
  40a61c:	f47f ae93 	bne.w	40a346 <_vfprintf_r+0x4f2>
  40a620:	9a06      	ldr	r2, [sp, #24]
  40a622:	f012 0210 	ands.w	r2, r2, #16
  40a626:	f040 8240 	bne.w	40aaaa <_vfprintf_r+0xc56>
  40a62a:	9b06      	ldr	r3, [sp, #24]
  40a62c:	f013 0340 	ands.w	r3, r3, #64	; 0x40
  40a630:	f000 823b 	beq.w	40aaaa <_vfprintf_r+0xc56>
  40a634:	990c      	ldr	r1, [sp, #48]	; 0x30
  40a636:	4613      	mov	r3, r2
  40a638:	460a      	mov	r2, r1
  40a63a:	3204      	adds	r2, #4
  40a63c:	880e      	ldrh	r6, [r1, #0]
  40a63e:	920c      	str	r2, [sp, #48]	; 0x30
  40a640:	2700      	movs	r7, #0
  40a642:	e525      	b.n	40a090 <_vfprintf_r+0x23c>
  40a644:	9308      	str	r3, [sp, #32]
  40a646:	4b34      	ldr	r3, [pc, #208]	; (40a718 <_vfprintf_r+0x8c4>)
  40a648:	9314      	str	r3, [sp, #80]	; 0x50
  40a64a:	9b06      	ldr	r3, [sp, #24]
  40a64c:	f88d 2067 	strb.w	r2, [sp, #103]	; 0x67
  40a650:	0699      	lsls	r1, r3, #26
  40a652:	46b2      	mov	sl, r6
  40a654:	f53f aeb1 	bmi.w	40a3ba <_vfprintf_r+0x566>
  40a658:	9b06      	ldr	r3, [sp, #24]
  40a65a:	06da      	lsls	r2, r3, #27
  40a65c:	f140 83c6 	bpl.w	40adec <_vfprintf_r+0xf98>
  40a660:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  40a662:	4613      	mov	r3, r2
  40a664:	3304      	adds	r3, #4
  40a666:	6816      	ldr	r6, [r2, #0]
  40a668:	930c      	str	r3, [sp, #48]	; 0x30
  40a66a:	2700      	movs	r7, #0
  40a66c:	e6ae      	b.n	40a3cc <_vfprintf_r+0x578>
  40a66e:	990c      	ldr	r1, [sp, #48]	; 0x30
  40a670:	9308      	str	r3, [sp, #32]
  40a672:	680a      	ldr	r2, [r1, #0]
  40a674:	f88d 2090 	strb.w	r2, [sp, #144]	; 0x90
  40a678:	2300      	movs	r3, #0
  40a67a:	2201      	movs	r2, #1
  40a67c:	3104      	adds	r1, #4
  40a67e:	469c      	mov	ip, r3
  40a680:	9207      	str	r2, [sp, #28]
  40a682:	910c      	str	r1, [sp, #48]	; 0x30
  40a684:	f88d 3067 	strb.w	r3, [sp, #103]	; 0x67
  40a688:	ab24      	add	r3, sp, #144	; 0x90
  40a68a:	f8cd c03c 	str.w	ip, [sp, #60]	; 0x3c
  40a68e:	f8cd c040 	str.w	ip, [sp, #64]	; 0x40
  40a692:	920b      	str	r2, [sp, #44]	; 0x2c
  40a694:	930e      	str	r3, [sp, #56]	; 0x38
  40a696:	e53b      	b.n	40a110 <_vfprintf_r+0x2bc>
  40a698:	9308      	str	r3, [sp, #32]
  40a69a:	9b06      	ldr	r3, [sp, #24]
  40a69c:	f043 0310 	orr.w	r3, r3, #16
  40a6a0:	9306      	str	r3, [sp, #24]
  40a6a2:	9b06      	ldr	r3, [sp, #24]
  40a6a4:	46b2      	mov	sl, r6
  40a6a6:	069e      	lsls	r6, r3, #26
  40a6a8:	f53f ace8 	bmi.w	40a07c <_vfprintf_r+0x228>
  40a6ac:	9b06      	ldr	r3, [sp, #24]
  40a6ae:	06d8      	lsls	r0, r3, #27
  40a6b0:	f140 8377 	bpl.w	40ada2 <_vfprintf_r+0xf4e>
  40a6b4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  40a6b6:	4613      	mov	r3, r2
  40a6b8:	3204      	adds	r2, #4
  40a6ba:	681e      	ldr	r6, [r3, #0]
  40a6bc:	920c      	str	r2, [sp, #48]	; 0x30
  40a6be:	2301      	movs	r3, #1
  40a6c0:	2700      	movs	r7, #0
  40a6c2:	e4e5      	b.n	40a090 <_vfprintf_r+0x23c>
  40a6c4:	9308      	str	r3, [sp, #32]
  40a6c6:	f88d 2067 	strb.w	r2, [sp, #103]	; 0x67
  40a6ca:	2d00      	cmp	r5, #0
  40a6cc:	f43f acbb 	beq.w	40a046 <_vfprintf_r+0x1f2>
  40a6d0:	2300      	movs	r3, #0
  40a6d2:	2201      	movs	r2, #1
  40a6d4:	469c      	mov	ip, r3
  40a6d6:	9207      	str	r2, [sp, #28]
  40a6d8:	f88d 5090 	strb.w	r5, [sp, #144]	; 0x90
  40a6dc:	e7d2      	b.n	40a684 <_vfprintf_r+0x830>
  40a6de:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
  40a6e2:	e561      	b.n	40a1a8 <_vfprintf_r+0x354>
  40a6e4:	2b01      	cmp	r3, #1
  40a6e6:	f47f aceb 	bne.w	40a0c0 <_vfprintf_r+0x26c>
  40a6ea:	2f00      	cmp	r7, #0
  40a6ec:	bf08      	it	eq
  40a6ee:	2e0a      	cmpeq	r6, #10
  40a6f0:	f080 81ef 	bcs.w	40aad2 <_vfprintf_r+0xc7e>
  40a6f4:	f10d 0bf8 	add.w	fp, sp, #248	; 0xf8
  40a6f8:	3630      	adds	r6, #48	; 0x30
  40a6fa:	f80b 6d41 	strb.w	r6, [fp, #-65]!
  40a6fe:	ab2e      	add	r3, sp, #184	; 0xb8
  40a700:	ebcb 0303 	rsb	r3, fp, r3
  40a704:	930b      	str	r3, [sp, #44]	; 0x2c
  40a706:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
  40a70a:	e4f3      	b.n	40a0f4 <_vfprintf_r+0x2a0>
  40a70c:	0040fe8c 	.word	0x0040fe8c
  40a710:	0040fe88 	.word	0x0040fe88
  40a714:	0040feac 	.word	0x0040feac
  40a718:	0040fe98 	.word	0x0040fe98
  40a71c:	2d65      	cmp	r5, #101	; 0x65
  40a71e:	f340 808a 	ble.w	40a836 <_vfprintf_r+0x9e2>
  40a722:	9812      	ldr	r0, [sp, #72]	; 0x48
  40a724:	9913      	ldr	r1, [sp, #76]	; 0x4c
  40a726:	2200      	movs	r2, #0
  40a728:	2300      	movs	r3, #0
  40a72a:	f7fb fdab 	bl	406284 <__aeabi_dcmpeq>
  40a72e:	2800      	cmp	r0, #0
  40a730:	f000 8131 	beq.w	40a996 <_vfprintf_r+0xb42>
  40a734:	9b22      	ldr	r3, [sp, #136]	; 0x88
  40a736:	4aba      	ldr	r2, [pc, #744]	; (40aa20 <_vfprintf_r+0xbcc>)
  40a738:	6022      	str	r2, [r4, #0]
  40a73a:	3301      	adds	r3, #1
  40a73c:	f10b 0b01 	add.w	fp, fp, #1
  40a740:	2201      	movs	r2, #1
  40a742:	2b07      	cmp	r3, #7
  40a744:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
  40a748:	9322      	str	r3, [sp, #136]	; 0x88
  40a74a:	6062      	str	r2, [r4, #4]
  40a74c:	f300 8367 	bgt.w	40ae1e <_vfprintf_r+0xfca>
  40a750:	3408      	adds	r4, #8
  40a752:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
  40a754:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40a756:	4293      	cmp	r3, r2
  40a758:	db03      	blt.n	40a762 <_vfprintf_r+0x90e>
  40a75a:	9b06      	ldr	r3, [sp, #24]
  40a75c:	07df      	lsls	r7, r3, #31
  40a75e:	f57f ad96 	bpl.w	40a28e <_vfprintf_r+0x43a>
  40a762:	9b22      	ldr	r3, [sp, #136]	; 0x88
  40a764:	9916      	ldr	r1, [sp, #88]	; 0x58
  40a766:	9a15      	ldr	r2, [sp, #84]	; 0x54
  40a768:	6022      	str	r2, [r4, #0]
  40a76a:	3301      	adds	r3, #1
  40a76c:	448b      	add	fp, r1
  40a76e:	2b07      	cmp	r3, #7
  40a770:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
  40a774:	6061      	str	r1, [r4, #4]
  40a776:	9322      	str	r3, [sp, #136]	; 0x88
  40a778:	f300 83d6 	bgt.w	40af28 <_vfprintf_r+0x10d4>
  40a77c:	3408      	adds	r4, #8
  40a77e:	9b11      	ldr	r3, [sp, #68]	; 0x44
  40a780:	1e5d      	subs	r5, r3, #1
  40a782:	2d00      	cmp	r5, #0
  40a784:	f77f ad83 	ble.w	40a28e <_vfprintf_r+0x43a>
  40a788:	2d10      	cmp	r5, #16
  40a78a:	9b22      	ldr	r3, [sp, #136]	; 0x88
  40a78c:	4fa5      	ldr	r7, [pc, #660]	; (40aa24 <_vfprintf_r+0xbd0>)
  40a78e:	f340 8195 	ble.w	40aabc <_vfprintf_r+0xc68>
  40a792:	2610      	movs	r6, #16
  40a794:	465a      	mov	r2, fp
  40a796:	e004      	b.n	40a7a2 <_vfprintf_r+0x94e>
  40a798:	3408      	adds	r4, #8
  40a79a:	3d10      	subs	r5, #16
  40a79c:	2d10      	cmp	r5, #16
  40a79e:	f340 818c 	ble.w	40aaba <_vfprintf_r+0xc66>
  40a7a2:	3301      	adds	r3, #1
  40a7a4:	3210      	adds	r2, #16
  40a7a6:	2b07      	cmp	r3, #7
  40a7a8:	9223      	str	r2, [sp, #140]	; 0x8c
  40a7aa:	9322      	str	r3, [sp, #136]	; 0x88
  40a7ac:	6027      	str	r7, [r4, #0]
  40a7ae:	6066      	str	r6, [r4, #4]
  40a7b0:	ddf2      	ble.n	40a798 <_vfprintf_r+0x944>
  40a7b2:	4640      	mov	r0, r8
  40a7b4:	4649      	mov	r1, r9
  40a7b6:	aa21      	add	r2, sp, #132	; 0x84
  40a7b8:	f7fe fcfc 	bl	4091b4 <__sprint_r>
  40a7bc:	2800      	cmp	r0, #0
  40a7be:	f47f ac49 	bne.w	40a054 <_vfprintf_r+0x200>
  40a7c2:	9a23      	ldr	r2, [sp, #140]	; 0x8c
  40a7c4:	9b22      	ldr	r3, [sp, #136]	; 0x88
  40a7c6:	ac2e      	add	r4, sp, #184	; 0xb8
  40a7c8:	e7e7      	b.n	40a79a <_vfprintf_r+0x946>
  40a7ca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40a7cc:	9a07      	ldr	r2, [sp, #28]
  40a7ce:	1a9e      	subs	r6, r3, r2
  40a7d0:	2e00      	cmp	r6, #0
  40a7d2:	f77f ad10 	ble.w	40a1f6 <_vfprintf_r+0x3a2>
  40a7d6:	2e10      	cmp	r6, #16
  40a7d8:	9a22      	ldr	r2, [sp, #136]	; 0x88
  40a7da:	4f92      	ldr	r7, [pc, #584]	; (40aa24 <_vfprintf_r+0xbd0>)
  40a7dc:	dd1f      	ble.n	40a81e <_vfprintf_r+0x9ca>
  40a7de:	f04f 0a10 	mov.w	sl, #16
  40a7e2:	465b      	mov	r3, fp
  40a7e4:	e004      	b.n	40a7f0 <_vfprintf_r+0x99c>
  40a7e6:	3e10      	subs	r6, #16
  40a7e8:	2e10      	cmp	r6, #16
  40a7ea:	f104 0408 	add.w	r4, r4, #8
  40a7ee:	dd15      	ble.n	40a81c <_vfprintf_r+0x9c8>
  40a7f0:	3201      	adds	r2, #1
  40a7f2:	3310      	adds	r3, #16
  40a7f4:	2a07      	cmp	r2, #7
  40a7f6:	9323      	str	r3, [sp, #140]	; 0x8c
  40a7f8:	9222      	str	r2, [sp, #136]	; 0x88
  40a7fa:	e884 0480 	stmia.w	r4, {r7, sl}
  40a7fe:	ddf2      	ble.n	40a7e6 <_vfprintf_r+0x992>
  40a800:	4640      	mov	r0, r8
  40a802:	4649      	mov	r1, r9
  40a804:	aa21      	add	r2, sp, #132	; 0x84
  40a806:	f7fe fcd5 	bl	4091b4 <__sprint_r>
  40a80a:	2800      	cmp	r0, #0
  40a80c:	f47f ac22 	bne.w	40a054 <_vfprintf_r+0x200>
  40a810:	3e10      	subs	r6, #16
  40a812:	2e10      	cmp	r6, #16
  40a814:	9b23      	ldr	r3, [sp, #140]	; 0x8c
  40a816:	9a22      	ldr	r2, [sp, #136]	; 0x88
  40a818:	ac2e      	add	r4, sp, #184	; 0xb8
  40a81a:	dce9      	bgt.n	40a7f0 <_vfprintf_r+0x99c>
  40a81c:	469b      	mov	fp, r3
  40a81e:	3201      	adds	r2, #1
  40a820:	44b3      	add	fp, r6
  40a822:	2a07      	cmp	r2, #7
  40a824:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
  40a828:	9222      	str	r2, [sp, #136]	; 0x88
  40a82a:	6027      	str	r7, [r4, #0]
  40a82c:	6066      	str	r6, [r4, #4]
  40a82e:	f300 8219 	bgt.w	40ac64 <_vfprintf_r+0xe10>
  40a832:	3408      	adds	r4, #8
  40a834:	e4df      	b.n	40a1f6 <_vfprintf_r+0x3a2>
  40a836:	9b11      	ldr	r3, [sp, #68]	; 0x44
  40a838:	9d22      	ldr	r5, [sp, #136]	; 0x88
  40a83a:	2b01      	cmp	r3, #1
  40a83c:	f340 81d4 	ble.w	40abe8 <_vfprintf_r+0xd94>
  40a840:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  40a842:	6023      	str	r3, [r4, #0]
  40a844:	3501      	adds	r5, #1
  40a846:	f10b 0601 	add.w	r6, fp, #1
  40a84a:	2301      	movs	r3, #1
  40a84c:	2d07      	cmp	r5, #7
  40a84e:	9623      	str	r6, [sp, #140]	; 0x8c
  40a850:	9522      	str	r5, [sp, #136]	; 0x88
  40a852:	6063      	str	r3, [r4, #4]
  40a854:	f300 81e4 	bgt.w	40ac20 <_vfprintf_r+0xdcc>
  40a858:	3408      	adds	r4, #8
  40a85a:	9a16      	ldr	r2, [sp, #88]	; 0x58
  40a85c:	9b15      	ldr	r3, [sp, #84]	; 0x54
  40a85e:	6023      	str	r3, [r4, #0]
  40a860:	3501      	adds	r5, #1
  40a862:	4416      	add	r6, r2
  40a864:	2d07      	cmp	r5, #7
  40a866:	9623      	str	r6, [sp, #140]	; 0x8c
  40a868:	9522      	str	r5, [sp, #136]	; 0x88
  40a86a:	6062      	str	r2, [r4, #4]
  40a86c:	f300 81e4 	bgt.w	40ac38 <_vfprintf_r+0xde4>
  40a870:	3408      	adds	r4, #8
  40a872:	2300      	movs	r3, #0
  40a874:	9812      	ldr	r0, [sp, #72]	; 0x48
  40a876:	9913      	ldr	r1, [sp, #76]	; 0x4c
  40a878:	2200      	movs	r2, #0
  40a87a:	f7fb fd03 	bl	406284 <__aeabi_dcmpeq>
  40a87e:	9b11      	ldr	r3, [sp, #68]	; 0x44
  40a880:	2800      	cmp	r0, #0
  40a882:	f040 80e0 	bne.w	40aa46 <_vfprintf_r+0xbf2>
  40a886:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  40a888:	3b01      	subs	r3, #1
  40a88a:	3501      	adds	r5, #1
  40a88c:	3201      	adds	r2, #1
  40a88e:	441e      	add	r6, r3
  40a890:	2d07      	cmp	r5, #7
  40a892:	9522      	str	r5, [sp, #136]	; 0x88
  40a894:	9623      	str	r6, [sp, #140]	; 0x8c
  40a896:	6022      	str	r2, [r4, #0]
  40a898:	6063      	str	r3, [r4, #4]
  40a89a:	f300 81b5 	bgt.w	40ac08 <_vfprintf_r+0xdb4>
  40a89e:	3408      	adds	r4, #8
  40a8a0:	9a17      	ldr	r2, [sp, #92]	; 0x5c
  40a8a2:	6062      	str	r2, [r4, #4]
  40a8a4:	3501      	adds	r5, #1
  40a8a6:	eb06 0b02 	add.w	fp, r6, r2
  40a8aa:	ab1d      	add	r3, sp, #116	; 0x74
  40a8ac:	2d07      	cmp	r5, #7
  40a8ae:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
  40a8b2:	9522      	str	r5, [sp, #136]	; 0x88
  40a8b4:	6023      	str	r3, [r4, #0]
  40a8b6:	f77f ace9 	ble.w	40a28c <_vfprintf_r+0x438>
  40a8ba:	4640      	mov	r0, r8
  40a8bc:	4649      	mov	r1, r9
  40a8be:	aa21      	add	r2, sp, #132	; 0x84
  40a8c0:	f7fe fc78 	bl	4091b4 <__sprint_r>
  40a8c4:	2800      	cmp	r0, #0
  40a8c6:	f47f abc5 	bne.w	40a054 <_vfprintf_r+0x200>
  40a8ca:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
  40a8ce:	ac2e      	add	r4, sp, #184	; 0xb8
  40a8d0:	e4dd      	b.n	40a28e <_vfprintf_r+0x43a>
  40a8d2:	4640      	mov	r0, r8
  40a8d4:	4649      	mov	r1, r9
  40a8d6:	aa21      	add	r2, sp, #132	; 0x84
  40a8d8:	f7fe fc6c 	bl	4091b4 <__sprint_r>
  40a8dc:	2800      	cmp	r0, #0
  40a8de:	f43f ad20 	beq.w	40a322 <_vfprintf_r+0x4ce>
  40a8e2:	f7ff bbb7 	b.w	40a054 <_vfprintf_r+0x200>
  40a8e6:	2b00      	cmp	r3, #0
  40a8e8:	d133      	bne.n	40a952 <_vfprintf_r+0xafe>
  40a8ea:	9b06      	ldr	r3, [sp, #24]
  40a8ec:	07da      	lsls	r2, r3, #31
  40a8ee:	d530      	bpl.n	40a952 <_vfprintf_r+0xafe>
  40a8f0:	f10d 0bf8 	add.w	fp, sp, #248	; 0xf8
  40a8f4:	2330      	movs	r3, #48	; 0x30
  40a8f6:	f80b 3d41 	strb.w	r3, [fp, #-65]!
  40a8fa:	ab2e      	add	r3, sp, #184	; 0xb8
  40a8fc:	ebcb 0303 	rsb	r3, fp, r3
  40a900:	930b      	str	r3, [sp, #44]	; 0x2c
  40a902:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
  40a906:	f7ff bbf5 	b.w	40a0f4 <_vfprintf_r+0x2a0>
  40a90a:	4640      	mov	r0, r8
  40a90c:	4649      	mov	r1, r9
  40a90e:	aa21      	add	r2, sp, #132	; 0x84
  40a910:	f7fe fc50 	bl	4091b4 <__sprint_r>
  40a914:	2800      	cmp	r0, #0
  40a916:	f47f ab9d 	bne.w	40a054 <_vfprintf_r+0x200>
  40a91a:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
  40a91e:	ac2e      	add	r4, sp, #184	; 0xb8
  40a920:	e4a3      	b.n	40a26a <_vfprintf_r+0x416>
  40a922:	4640      	mov	r0, r8
  40a924:	4649      	mov	r1, r9
  40a926:	aa21      	add	r2, sp, #132	; 0x84
  40a928:	f7fe fc44 	bl	4091b4 <__sprint_r>
  40a92c:	2800      	cmp	r0, #0
  40a92e:	f47f ab91 	bne.w	40a054 <_vfprintf_r+0x200>
  40a932:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
  40a936:	ac2e      	add	r4, sp, #184	; 0xb8
  40a938:	e45a      	b.n	40a1f0 <_vfprintf_r+0x39c>
  40a93a:	4640      	mov	r0, r8
  40a93c:	4649      	mov	r1, r9
  40a93e:	aa21      	add	r2, sp, #132	; 0x84
  40a940:	f7fe fc38 	bl	4091b4 <__sprint_r>
  40a944:	2800      	cmp	r0, #0
  40a946:	f47f ab85 	bne.w	40a054 <_vfprintf_r+0x200>
  40a94a:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
  40a94e:	ac2e      	add	r4, sp, #184	; 0xb8
  40a950:	e43d      	b.n	40a1ce <_vfprintf_r+0x37a>
  40a952:	ab2e      	add	r3, sp, #184	; 0xb8
  40a954:	f8cd a02c 	str.w	sl, [sp, #44]	; 0x2c
  40a958:	930e      	str	r3, [sp, #56]	; 0x38
  40a95a:	f7ff bbcb 	b.w	40a0f4 <_vfprintf_r+0x2a0>
  40a95e:	9814      	ldr	r0, [sp, #80]	; 0x50
  40a960:	f10d 0bb8 	add.w	fp, sp, #184	; 0xb8
  40a964:	0933      	lsrs	r3, r6, #4
  40a966:	f006 010f 	and.w	r1, r6, #15
  40a96a:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
  40a96e:	093a      	lsrs	r2, r7, #4
  40a970:	461e      	mov	r6, r3
  40a972:	4617      	mov	r7, r2
  40a974:	5c43      	ldrb	r3, [r0, r1]
  40a976:	f80b 3d01 	strb.w	r3, [fp, #-1]!
  40a97a:	ea56 0307 	orrs.w	r3, r6, r7
  40a97e:	d1f1      	bne.n	40a964 <_vfprintf_r+0xb10>
  40a980:	465a      	mov	r2, fp
  40a982:	ab2e      	add	r3, sp, #184	; 0xb8
  40a984:	1a9b      	subs	r3, r3, r2
  40a986:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
  40a98a:	930b      	str	r3, [sp, #44]	; 0x2c
  40a98c:	f7ff bbb2 	b.w	40a0f4 <_vfprintf_r+0x2a0>
  40a990:	2302      	movs	r3, #2
  40a992:	f7ff bb7d 	b.w	40a090 <_vfprintf_r+0x23c>
  40a996:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
  40a998:	2d00      	cmp	r5, #0
  40a99a:	f340 824c 	ble.w	40ae36 <_vfprintf_r+0xfe2>
  40a99e:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40a9a0:	9910      	ldr	r1, [sp, #64]	; 0x40
  40a9a2:	428a      	cmp	r2, r1
  40a9a4:	4613      	mov	r3, r2
  40a9a6:	bfa8      	it	ge
  40a9a8:	460b      	movge	r3, r1
  40a9aa:	461d      	mov	r5, r3
  40a9ac:	990e      	ldr	r1, [sp, #56]	; 0x38
  40a9ae:	2d00      	cmp	r5, #0
  40a9b0:	eb01 0a02 	add.w	sl, r1, r2
  40a9b4:	dd0b      	ble.n	40a9ce <_vfprintf_r+0xb7a>
  40a9b6:	9b22      	ldr	r3, [sp, #136]	; 0x88
  40a9b8:	6021      	str	r1, [r4, #0]
  40a9ba:	3301      	adds	r3, #1
  40a9bc:	44ab      	add	fp, r5
  40a9be:	2b07      	cmp	r3, #7
  40a9c0:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
  40a9c4:	6065      	str	r5, [r4, #4]
  40a9c6:	9322      	str	r3, [sp, #136]	; 0x88
  40a9c8:	f300 8300 	bgt.w	40afcc <_vfprintf_r+0x1178>
  40a9cc:	3408      	adds	r4, #8
  40a9ce:	9b10      	ldr	r3, [sp, #64]	; 0x40
  40a9d0:	2d00      	cmp	r5, #0
  40a9d2:	bfa8      	it	ge
  40a9d4:	1b5b      	subge	r3, r3, r5
  40a9d6:	2b00      	cmp	r3, #0
  40a9d8:	461d      	mov	r5, r3
  40a9da:	f340 80af 	ble.w	40ab3c <_vfprintf_r+0xce8>
  40a9de:	2d10      	cmp	r5, #16
  40a9e0:	9b22      	ldr	r3, [sp, #136]	; 0x88
  40a9e2:	4f10      	ldr	r7, [pc, #64]	; (40aa24 <_vfprintf_r+0xbd0>)
  40a9e4:	f340 820f 	ble.w	40ae06 <_vfprintf_r+0xfb2>
  40a9e8:	2610      	movs	r6, #16
  40a9ea:	465a      	mov	r2, fp
  40a9ec:	e004      	b.n	40a9f8 <_vfprintf_r+0xba4>
  40a9ee:	3408      	adds	r4, #8
  40a9f0:	3d10      	subs	r5, #16
  40a9f2:	2d10      	cmp	r5, #16
  40a9f4:	f340 8206 	ble.w	40ae04 <_vfprintf_r+0xfb0>
  40a9f8:	3301      	adds	r3, #1
  40a9fa:	3210      	adds	r2, #16
  40a9fc:	2b07      	cmp	r3, #7
  40a9fe:	9223      	str	r2, [sp, #140]	; 0x8c
  40aa00:	9322      	str	r3, [sp, #136]	; 0x88
  40aa02:	6027      	str	r7, [r4, #0]
  40aa04:	6066      	str	r6, [r4, #4]
  40aa06:	ddf2      	ble.n	40a9ee <_vfprintf_r+0xb9a>
  40aa08:	4640      	mov	r0, r8
  40aa0a:	4649      	mov	r1, r9
  40aa0c:	aa21      	add	r2, sp, #132	; 0x84
  40aa0e:	f7fe fbd1 	bl	4091b4 <__sprint_r>
  40aa12:	2800      	cmp	r0, #0
  40aa14:	f47f ab1e 	bne.w	40a054 <_vfprintf_r+0x200>
  40aa18:	9a23      	ldr	r2, [sp, #140]	; 0x8c
  40aa1a:	9b22      	ldr	r3, [sp, #136]	; 0x88
  40aa1c:	ac2e      	add	r4, sp, #184	; 0xb8
  40aa1e:	e7e7      	b.n	40a9f0 <_vfprintf_r+0xb9c>
  40aa20:	0040fcdc 	.word	0x0040fcdc
  40aa24:	0040fee8 	.word	0x0040fee8
  40aa28:	4640      	mov	r0, r8
  40aa2a:	4649      	mov	r1, r9
  40aa2c:	aa21      	add	r2, sp, #132	; 0x84
  40aa2e:	f7fe fbc1 	bl	4091b4 <__sprint_r>
  40aa32:	2800      	cmp	r0, #0
  40aa34:	f47f ab0e 	bne.w	40a054 <_vfprintf_r+0x200>
  40aa38:	f89d c067 	ldrb.w	ip, [sp, #103]	; 0x67
  40aa3c:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
  40aa40:	ac2e      	add	r4, sp, #184	; 0xb8
  40aa42:	f7ff bbb1 	b.w	40a1a8 <_vfprintf_r+0x354>
  40aa46:	f103 3aff 	add.w	sl, r3, #4294967295
  40aa4a:	f1ba 0f00 	cmp.w	sl, #0
  40aa4e:	f77f af27 	ble.w	40a8a0 <_vfprintf_r+0xa4c>
  40aa52:	f1ba 0f10 	cmp.w	sl, #16
  40aa56:	4f90      	ldr	r7, [pc, #576]	; (40ac98 <_vfprintf_r+0xe44>)
  40aa58:	bfc8      	it	gt
  40aa5a:	f04f 0b10 	movgt.w	fp, #16
  40aa5e:	dc07      	bgt.n	40aa70 <_vfprintf_r+0xc1c>
  40aa60:	e0f6      	b.n	40ac50 <_vfprintf_r+0xdfc>
  40aa62:	3408      	adds	r4, #8
  40aa64:	f1aa 0a10 	sub.w	sl, sl, #16
  40aa68:	f1ba 0f10 	cmp.w	sl, #16
  40aa6c:	f340 80f0 	ble.w	40ac50 <_vfprintf_r+0xdfc>
  40aa70:	3501      	adds	r5, #1
  40aa72:	3610      	adds	r6, #16
  40aa74:	2d07      	cmp	r5, #7
  40aa76:	9623      	str	r6, [sp, #140]	; 0x8c
  40aa78:	9522      	str	r5, [sp, #136]	; 0x88
  40aa7a:	e884 0880 	stmia.w	r4, {r7, fp}
  40aa7e:	ddf0      	ble.n	40aa62 <_vfprintf_r+0xc0e>
  40aa80:	4640      	mov	r0, r8
  40aa82:	4649      	mov	r1, r9
  40aa84:	aa21      	add	r2, sp, #132	; 0x84
  40aa86:	f7fe fb95 	bl	4091b4 <__sprint_r>
  40aa8a:	2800      	cmp	r0, #0
  40aa8c:	f47f aae2 	bne.w	40a054 <_vfprintf_r+0x200>
  40aa90:	9e23      	ldr	r6, [sp, #140]	; 0x8c
  40aa92:	9d22      	ldr	r5, [sp, #136]	; 0x88
  40aa94:	ac2e      	add	r4, sp, #184	; 0xb8
  40aa96:	e7e5      	b.n	40aa64 <_vfprintf_r+0xc10>
  40aa98:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  40aa9a:	6816      	ldr	r6, [r2, #0]
  40aa9c:	4613      	mov	r3, r2
  40aa9e:	3304      	adds	r3, #4
  40aaa0:	17f7      	asrs	r7, r6, #31
  40aaa2:	930c      	str	r3, [sp, #48]	; 0x30
  40aaa4:	4632      	mov	r2, r6
  40aaa6:	463b      	mov	r3, r7
  40aaa8:	e4cf      	b.n	40a44a <_vfprintf_r+0x5f6>
  40aaaa:	990c      	ldr	r1, [sp, #48]	; 0x30
  40aaac:	460a      	mov	r2, r1
  40aaae:	3204      	adds	r2, #4
  40aab0:	680e      	ldr	r6, [r1, #0]
  40aab2:	920c      	str	r2, [sp, #48]	; 0x30
  40aab4:	2700      	movs	r7, #0
  40aab6:	f7ff baeb 	b.w	40a090 <_vfprintf_r+0x23c>
  40aaba:	4693      	mov	fp, r2
  40aabc:	3301      	adds	r3, #1
  40aabe:	44ab      	add	fp, r5
  40aac0:	2b07      	cmp	r3, #7
  40aac2:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
  40aac6:	9322      	str	r3, [sp, #136]	; 0x88
  40aac8:	6027      	str	r7, [r4, #0]
  40aaca:	6065      	str	r5, [r4, #4]
  40aacc:	f77f abde 	ble.w	40a28c <_vfprintf_r+0x438>
  40aad0:	e6f3      	b.n	40a8ba <_vfprintf_r+0xa66>
  40aad2:	f10d 0bb8 	add.w	fp, sp, #184	; 0xb8
  40aad6:	f8cd c01c 	str.w	ip, [sp, #28]
  40aada:	4630      	mov	r0, r6
  40aadc:	4639      	mov	r1, r7
  40aade:	220a      	movs	r2, #10
  40aae0:	2300      	movs	r3, #0
  40aae2:	f002 fdeb 	bl	40d6bc <__aeabi_uldivmod>
  40aae6:	3230      	adds	r2, #48	; 0x30
  40aae8:	4630      	mov	r0, r6
  40aaea:	4639      	mov	r1, r7
  40aaec:	f80b 2d01 	strb.w	r2, [fp, #-1]!
  40aaf0:	2300      	movs	r3, #0
  40aaf2:	220a      	movs	r2, #10
  40aaf4:	f002 fde2 	bl	40d6bc <__aeabi_uldivmod>
  40aaf8:	4606      	mov	r6, r0
  40aafa:	460f      	mov	r7, r1
  40aafc:	ea56 0307 	orrs.w	r3, r6, r7
  40ab00:	d1eb      	bne.n	40aada <_vfprintf_r+0xc86>
  40ab02:	f8dd c01c 	ldr.w	ip, [sp, #28]
  40ab06:	e73b      	b.n	40a980 <_vfprintf_r+0xb2c>
  40ab08:	2b30      	cmp	r3, #48	; 0x30
  40ab0a:	f000 8219 	beq.w	40af40 <_vfprintf_r+0x10ec>
  40ab0e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  40ab10:	3b01      	subs	r3, #1
  40ab12:	461a      	mov	r2, r3
  40ab14:	a82e      	add	r0, sp, #184	; 0xb8
  40ab16:	930e      	str	r3, [sp, #56]	; 0x38
  40ab18:	1a82      	subs	r2, r0, r2
  40ab1a:	2330      	movs	r3, #48	; 0x30
  40ab1c:	920b      	str	r2, [sp, #44]	; 0x2c
  40ab1e:	f801 3c01 	strb.w	r3, [r1, #-1]
  40ab22:	f7ff bae7 	b.w	40a0f4 <_vfprintf_r+0x2a0>
  40ab26:	4640      	mov	r0, r8
  40ab28:	4649      	mov	r1, r9
  40ab2a:	aa21      	add	r2, sp, #132	; 0x84
  40ab2c:	f7fe fb42 	bl	4091b4 <__sprint_r>
  40ab30:	2800      	cmp	r0, #0
  40ab32:	f47f aa8f 	bne.w	40a054 <_vfprintf_r+0x200>
  40ab36:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
  40ab3a:	ac2e      	add	r4, sp, #184	; 0xb8
  40ab3c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  40ab3e:	9910      	ldr	r1, [sp, #64]	; 0x40
  40ab40:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
  40ab42:	440a      	add	r2, r1
  40ab44:	4616      	mov	r6, r2
  40ab46:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40ab48:	4293      	cmp	r3, r2
  40ab4a:	db3e      	blt.n	40abca <_vfprintf_r+0xd76>
  40ab4c:	9a06      	ldr	r2, [sp, #24]
  40ab4e:	07d5      	lsls	r5, r2, #31
  40ab50:	d43b      	bmi.n	40abca <_vfprintf_r+0xd76>
  40ab52:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40ab54:	ebc6 050a 	rsb	r5, r6, sl
  40ab58:	1ad3      	subs	r3, r2, r3
  40ab5a:	429d      	cmp	r5, r3
  40ab5c:	bfa8      	it	ge
  40ab5e:	461d      	movge	r5, r3
  40ab60:	2d00      	cmp	r5, #0
  40ab62:	462f      	mov	r7, r5
  40ab64:	dd0b      	ble.n	40ab7e <_vfprintf_r+0xd2a>
  40ab66:	9a22      	ldr	r2, [sp, #136]	; 0x88
  40ab68:	6026      	str	r6, [r4, #0]
  40ab6a:	3201      	adds	r2, #1
  40ab6c:	44ab      	add	fp, r5
  40ab6e:	2a07      	cmp	r2, #7
  40ab70:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
  40ab74:	6065      	str	r5, [r4, #4]
  40ab76:	9222      	str	r2, [sp, #136]	; 0x88
  40ab78:	f300 825e 	bgt.w	40b038 <_vfprintf_r+0x11e4>
  40ab7c:	3408      	adds	r4, #8
  40ab7e:	2f00      	cmp	r7, #0
  40ab80:	bfac      	ite	ge
  40ab82:	1bdd      	subge	r5, r3, r7
  40ab84:	461d      	movlt	r5, r3
  40ab86:	2d00      	cmp	r5, #0
  40ab88:	f77f ab81 	ble.w	40a28e <_vfprintf_r+0x43a>
  40ab8c:	2d10      	cmp	r5, #16
  40ab8e:	9b22      	ldr	r3, [sp, #136]	; 0x88
  40ab90:	4f41      	ldr	r7, [pc, #260]	; (40ac98 <_vfprintf_r+0xe44>)
  40ab92:	dd93      	ble.n	40aabc <_vfprintf_r+0xc68>
  40ab94:	2610      	movs	r6, #16
  40ab96:	465a      	mov	r2, fp
  40ab98:	e003      	b.n	40aba2 <_vfprintf_r+0xd4e>
  40ab9a:	3408      	adds	r4, #8
  40ab9c:	3d10      	subs	r5, #16
  40ab9e:	2d10      	cmp	r5, #16
  40aba0:	dd8b      	ble.n	40aaba <_vfprintf_r+0xc66>
  40aba2:	3301      	adds	r3, #1
  40aba4:	3210      	adds	r2, #16
  40aba6:	2b07      	cmp	r3, #7
  40aba8:	9223      	str	r2, [sp, #140]	; 0x8c
  40abaa:	9322      	str	r3, [sp, #136]	; 0x88
  40abac:	6027      	str	r7, [r4, #0]
  40abae:	6066      	str	r6, [r4, #4]
  40abb0:	ddf3      	ble.n	40ab9a <_vfprintf_r+0xd46>
  40abb2:	4640      	mov	r0, r8
  40abb4:	4649      	mov	r1, r9
  40abb6:	aa21      	add	r2, sp, #132	; 0x84
  40abb8:	f7fe fafc 	bl	4091b4 <__sprint_r>
  40abbc:	2800      	cmp	r0, #0
  40abbe:	f47f aa49 	bne.w	40a054 <_vfprintf_r+0x200>
  40abc2:	9a23      	ldr	r2, [sp, #140]	; 0x8c
  40abc4:	9b22      	ldr	r3, [sp, #136]	; 0x88
  40abc6:	ac2e      	add	r4, sp, #184	; 0xb8
  40abc8:	e7e8      	b.n	40ab9c <_vfprintf_r+0xd48>
  40abca:	9a22      	ldr	r2, [sp, #136]	; 0x88
  40abcc:	9816      	ldr	r0, [sp, #88]	; 0x58
  40abce:	9915      	ldr	r1, [sp, #84]	; 0x54
  40abd0:	6021      	str	r1, [r4, #0]
  40abd2:	3201      	adds	r2, #1
  40abd4:	4483      	add	fp, r0
  40abd6:	2a07      	cmp	r2, #7
  40abd8:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
  40abdc:	6060      	str	r0, [r4, #4]
  40abde:	9222      	str	r2, [sp, #136]	; 0x88
  40abe0:	f300 820a 	bgt.w	40aff8 <_vfprintf_r+0x11a4>
  40abe4:	3408      	adds	r4, #8
  40abe6:	e7b4      	b.n	40ab52 <_vfprintf_r+0xcfe>
  40abe8:	9b06      	ldr	r3, [sp, #24]
  40abea:	07d8      	lsls	r0, r3, #31
  40abec:	f53f ae28 	bmi.w	40a840 <_vfprintf_r+0x9ec>
  40abf0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  40abf2:	6023      	str	r3, [r4, #0]
  40abf4:	3501      	adds	r5, #1
  40abf6:	f10b 0601 	add.w	r6, fp, #1
  40abfa:	2301      	movs	r3, #1
  40abfc:	2d07      	cmp	r5, #7
  40abfe:	9623      	str	r6, [sp, #140]	; 0x8c
  40ac00:	9522      	str	r5, [sp, #136]	; 0x88
  40ac02:	6063      	str	r3, [r4, #4]
  40ac04:	f77f ae4b 	ble.w	40a89e <_vfprintf_r+0xa4a>
  40ac08:	4640      	mov	r0, r8
  40ac0a:	4649      	mov	r1, r9
  40ac0c:	aa21      	add	r2, sp, #132	; 0x84
  40ac0e:	f7fe fad1 	bl	4091b4 <__sprint_r>
  40ac12:	2800      	cmp	r0, #0
  40ac14:	f47f aa1e 	bne.w	40a054 <_vfprintf_r+0x200>
  40ac18:	9e23      	ldr	r6, [sp, #140]	; 0x8c
  40ac1a:	9d22      	ldr	r5, [sp, #136]	; 0x88
  40ac1c:	ac2e      	add	r4, sp, #184	; 0xb8
  40ac1e:	e63f      	b.n	40a8a0 <_vfprintf_r+0xa4c>
  40ac20:	4640      	mov	r0, r8
  40ac22:	4649      	mov	r1, r9
  40ac24:	aa21      	add	r2, sp, #132	; 0x84
  40ac26:	f7fe fac5 	bl	4091b4 <__sprint_r>
  40ac2a:	2800      	cmp	r0, #0
  40ac2c:	f47f aa12 	bne.w	40a054 <_vfprintf_r+0x200>
  40ac30:	9e23      	ldr	r6, [sp, #140]	; 0x8c
  40ac32:	9d22      	ldr	r5, [sp, #136]	; 0x88
  40ac34:	ac2e      	add	r4, sp, #184	; 0xb8
  40ac36:	e610      	b.n	40a85a <_vfprintf_r+0xa06>
  40ac38:	4640      	mov	r0, r8
  40ac3a:	4649      	mov	r1, r9
  40ac3c:	aa21      	add	r2, sp, #132	; 0x84
  40ac3e:	f7fe fab9 	bl	4091b4 <__sprint_r>
  40ac42:	2800      	cmp	r0, #0
  40ac44:	f47f aa06 	bne.w	40a054 <_vfprintf_r+0x200>
  40ac48:	9e23      	ldr	r6, [sp, #140]	; 0x8c
  40ac4a:	9d22      	ldr	r5, [sp, #136]	; 0x88
  40ac4c:	ac2e      	add	r4, sp, #184	; 0xb8
  40ac4e:	e610      	b.n	40a872 <_vfprintf_r+0xa1e>
  40ac50:	3501      	adds	r5, #1
  40ac52:	4456      	add	r6, sl
  40ac54:	2d07      	cmp	r5, #7
  40ac56:	9623      	str	r6, [sp, #140]	; 0x8c
  40ac58:	9522      	str	r5, [sp, #136]	; 0x88
  40ac5a:	e884 0480 	stmia.w	r4, {r7, sl}
  40ac5e:	f77f ae1e 	ble.w	40a89e <_vfprintf_r+0xa4a>
  40ac62:	e7d1      	b.n	40ac08 <_vfprintf_r+0xdb4>
  40ac64:	4640      	mov	r0, r8
  40ac66:	4649      	mov	r1, r9
  40ac68:	aa21      	add	r2, sp, #132	; 0x84
  40ac6a:	f7fe faa3 	bl	4091b4 <__sprint_r>
  40ac6e:	2800      	cmp	r0, #0
  40ac70:	f47f a9f0 	bne.w	40a054 <_vfprintf_r+0x200>
  40ac74:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
  40ac78:	ac2e      	add	r4, sp, #184	; 0xb8
  40ac7a:	f7ff babc 	b.w	40a1f6 <_vfprintf_r+0x3a2>
  40ac7e:	f04f 0c2d 	mov.w	ip, #45	; 0x2d
  40ac82:	4276      	negs	r6, r6
  40ac84:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
  40ac88:	f88d c067 	strb.w	ip, [sp, #103]	; 0x67
  40ac8c:	f8cd a03c 	str.w	sl, [sp, #60]	; 0x3c
  40ac90:	2301      	movs	r3, #1
  40ac92:	f7ff ba03 	b.w	40a09c <_vfprintf_r+0x248>
  40ac96:	bf00      	nop
  40ac98:	0040fee8 	.word	0x0040fee8
  40ac9c:	f001 ff9a 	bl	40cbd4 <__fpclassifyd>
  40aca0:	2800      	cmp	r0, #0
  40aca2:	f000 810d 	beq.w	40aec0 <_vfprintf_r+0x106c>
  40aca6:	f025 0320 	bic.w	r3, r5, #32
  40acaa:	f1b6 3fff 	cmp.w	r6, #4294967295
  40acae:	930b      	str	r3, [sp, #44]	; 0x2c
  40acb0:	f000 8258 	beq.w	40b164 <_vfprintf_r+0x1310>
  40acb4:	2b47      	cmp	r3, #71	; 0x47
  40acb6:	d104      	bne.n	40acc2 <_vfprintf_r+0xe6e>
  40acb8:	2e00      	cmp	r6, #0
  40acba:	bf14      	ite	ne
  40acbc:	46b3      	movne	fp, r6
  40acbe:	f04f 0b01 	moveq.w	fp, #1
  40acc2:	9b06      	ldr	r3, [sp, #24]
  40acc4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
  40acc8:	930f      	str	r3, [sp, #60]	; 0x3c
  40acca:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  40accc:	f1b3 0a00 	subs.w	sl, r3, #0
  40acd0:	9b12      	ldr	r3, [sp, #72]	; 0x48
  40acd2:	9307      	str	r3, [sp, #28]
  40acd4:	bfbb      	ittet	lt
  40acd6:	4653      	movlt	r3, sl
  40acd8:	f103 4a00 	addlt.w	sl, r3, #2147483648	; 0x80000000
  40acdc:	2300      	movge	r3, #0
  40acde:	232d      	movlt	r3, #45	; 0x2d
  40ace0:	2d66      	cmp	r5, #102	; 0x66
  40ace2:	930d      	str	r3, [sp, #52]	; 0x34
  40ace4:	f000 8154 	beq.w	40af90 <_vfprintf_r+0x113c>
  40ace8:	2d46      	cmp	r5, #70	; 0x46
  40acea:	f000 8151 	beq.w	40af90 <_vfprintf_r+0x113c>
  40acee:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  40acf0:	9a07      	ldr	r2, [sp, #28]
  40acf2:	2b45      	cmp	r3, #69	; 0x45
  40acf4:	bf0c      	ite	eq
  40acf6:	f10b 0701 	addeq.w	r7, fp, #1
  40acfa:	465f      	movne	r7, fp
  40acfc:	2002      	movs	r0, #2
  40acfe:	a91b      	add	r1, sp, #108	; 0x6c
  40ad00:	e88d 0081 	stmia.w	sp, {r0, r7}
  40ad04:	9102      	str	r1, [sp, #8]
  40ad06:	a81c      	add	r0, sp, #112	; 0x70
  40ad08:	a91f      	add	r1, sp, #124	; 0x7c
  40ad0a:	9003      	str	r0, [sp, #12]
  40ad0c:	4653      	mov	r3, sl
  40ad0e:	9104      	str	r1, [sp, #16]
  40ad10:	4640      	mov	r0, r8
  40ad12:	f000 fc59 	bl	40b5c8 <_dtoa_r>
  40ad16:	2d67      	cmp	r5, #103	; 0x67
  40ad18:	900e      	str	r0, [sp, #56]	; 0x38
  40ad1a:	d002      	beq.n	40ad22 <_vfprintf_r+0xece>
  40ad1c:	2d47      	cmp	r5, #71	; 0x47
  40ad1e:	f040 8147 	bne.w	40afb0 <_vfprintf_r+0x115c>
  40ad22:	9b06      	ldr	r3, [sp, #24]
  40ad24:	07db      	lsls	r3, r3, #31
  40ad26:	f140 823a 	bpl.w	40b19e <_vfprintf_r+0x134a>
  40ad2a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  40ad2c:	19de      	adds	r6, r3, r7
  40ad2e:	9807      	ldr	r0, [sp, #28]
  40ad30:	4651      	mov	r1, sl
  40ad32:	2200      	movs	r2, #0
  40ad34:	2300      	movs	r3, #0
  40ad36:	f7fb faa5 	bl	406284 <__aeabi_dcmpeq>
  40ad3a:	2800      	cmp	r0, #0
  40ad3c:	f040 81a3 	bne.w	40b086 <_vfprintf_r+0x1232>
  40ad40:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  40ad42:	429e      	cmp	r6, r3
  40ad44:	d906      	bls.n	40ad54 <_vfprintf_r+0xf00>
  40ad46:	2130      	movs	r1, #48	; 0x30
  40ad48:	1c5a      	adds	r2, r3, #1
  40ad4a:	921f      	str	r2, [sp, #124]	; 0x7c
  40ad4c:	7019      	strb	r1, [r3, #0]
  40ad4e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  40ad50:	429e      	cmp	r6, r3
  40ad52:	d8f9      	bhi.n	40ad48 <_vfprintf_r+0xef4>
  40ad54:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  40ad56:	1a9b      	subs	r3, r3, r2
  40ad58:	9311      	str	r3, [sp, #68]	; 0x44
  40ad5a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  40ad5c:	2b47      	cmp	r3, #71	; 0x47
  40ad5e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
  40ad60:	f000 8179 	beq.w	40b056 <_vfprintf_r+0x1202>
  40ad64:	2d65      	cmp	r5, #101	; 0x65
  40ad66:	f340 819c 	ble.w	40b0a2 <_vfprintf_r+0x124e>
  40ad6a:	2d66      	cmp	r5, #102	; 0x66
  40ad6c:	9310      	str	r3, [sp, #64]	; 0x40
  40ad6e:	f000 8209 	beq.w	40b184 <_vfprintf_r+0x1330>
  40ad72:	9b11      	ldr	r3, [sp, #68]	; 0x44
  40ad74:	9a10      	ldr	r2, [sp, #64]	; 0x40
  40ad76:	4293      	cmp	r3, r2
  40ad78:	f300 81f7 	bgt.w	40b16a <_vfprintf_r+0x1316>
  40ad7c:	9b06      	ldr	r3, [sp, #24]
  40ad7e:	07d9      	lsls	r1, r3, #31
  40ad80:	f100 8217 	bmi.w	40b1b2 <_vfprintf_r+0x135e>
  40ad84:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
  40ad88:	920b      	str	r2, [sp, #44]	; 0x2c
  40ad8a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  40ad8c:	2a00      	cmp	r2, #0
  40ad8e:	f040 8169 	bne.w	40b064 <_vfprintf_r+0x1210>
  40ad92:	9307      	str	r3, [sp, #28]
  40ad94:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  40ad96:	9306      	str	r3, [sp, #24]
  40ad98:	920f      	str	r2, [sp, #60]	; 0x3c
  40ad9a:	f89d c067 	ldrb.w	ip, [sp, #103]	; 0x67
  40ad9e:	f7ff b9b1 	b.w	40a104 <_vfprintf_r+0x2b0>
  40ada2:	9b06      	ldr	r3, [sp, #24]
  40ada4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  40ada6:	f013 0f40 	tst.w	r3, #64	; 0x40
  40adaa:	4613      	mov	r3, r2
  40adac:	f43f ac84 	beq.w	40a6b8 <_vfprintf_r+0x864>
  40adb0:	8816      	ldrh	r6, [r2, #0]
  40adb2:	3204      	adds	r2, #4
  40adb4:	2700      	movs	r7, #0
  40adb6:	2301      	movs	r3, #1
  40adb8:	920c      	str	r2, [sp, #48]	; 0x30
  40adba:	f7ff b969 	b.w	40a090 <_vfprintf_r+0x23c>
  40adbe:	9b06      	ldr	r3, [sp, #24]
  40adc0:	06db      	lsls	r3, r3, #27
  40adc2:	d40b      	bmi.n	40addc <_vfprintf_r+0xf88>
  40adc4:	9b06      	ldr	r3, [sp, #24]
  40adc6:	065f      	lsls	r7, r3, #25
  40adc8:	d508      	bpl.n	40addc <_vfprintf_r+0xf88>
  40adca:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  40adcc:	6813      	ldr	r3, [r2, #0]
  40adce:	3204      	adds	r2, #4
  40add0:	920c      	str	r2, [sp, #48]	; 0x30
  40add2:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
  40add6:	801a      	strh	r2, [r3, #0]
  40add8:	f7ff b87d 	b.w	409ed6 <_vfprintf_r+0x82>
  40addc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  40adde:	6813      	ldr	r3, [r2, #0]
  40ade0:	3204      	adds	r2, #4
  40ade2:	920c      	str	r2, [sp, #48]	; 0x30
  40ade4:	9a09      	ldr	r2, [sp, #36]	; 0x24
  40ade6:	601a      	str	r2, [r3, #0]
  40ade8:	f7ff b875 	b.w	409ed6 <_vfprintf_r+0x82>
  40adec:	9b06      	ldr	r3, [sp, #24]
  40adee:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  40adf0:	f013 0f40 	tst.w	r3, #64	; 0x40
  40adf4:	4613      	mov	r3, r2
  40adf6:	d076      	beq.n	40aee6 <_vfprintf_r+0x1092>
  40adf8:	3304      	adds	r3, #4
  40adfa:	8816      	ldrh	r6, [r2, #0]
  40adfc:	930c      	str	r3, [sp, #48]	; 0x30
  40adfe:	2700      	movs	r7, #0
  40ae00:	f7ff bae4 	b.w	40a3cc <_vfprintf_r+0x578>
  40ae04:	4693      	mov	fp, r2
  40ae06:	3301      	adds	r3, #1
  40ae08:	44ab      	add	fp, r5
  40ae0a:	2b07      	cmp	r3, #7
  40ae0c:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
  40ae10:	9322      	str	r3, [sp, #136]	; 0x88
  40ae12:	6027      	str	r7, [r4, #0]
  40ae14:	6065      	str	r5, [r4, #4]
  40ae16:	f73f ae86 	bgt.w	40ab26 <_vfprintf_r+0xcd2>
  40ae1a:	3408      	adds	r4, #8
  40ae1c:	e68e      	b.n	40ab3c <_vfprintf_r+0xce8>
  40ae1e:	4640      	mov	r0, r8
  40ae20:	4649      	mov	r1, r9
  40ae22:	aa21      	add	r2, sp, #132	; 0x84
  40ae24:	f7fe f9c6 	bl	4091b4 <__sprint_r>
  40ae28:	2800      	cmp	r0, #0
  40ae2a:	f47f a913 	bne.w	40a054 <_vfprintf_r+0x200>
  40ae2e:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
  40ae32:	ac2e      	add	r4, sp, #184	; 0xb8
  40ae34:	e48d      	b.n	40a752 <_vfprintf_r+0x8fe>
  40ae36:	9b22      	ldr	r3, [sp, #136]	; 0x88
  40ae38:	4ab0      	ldr	r2, [pc, #704]	; (40b0fc <_vfprintf_r+0x12a8>)
  40ae3a:	6022      	str	r2, [r4, #0]
  40ae3c:	3301      	adds	r3, #1
  40ae3e:	f10b 0b01 	add.w	fp, fp, #1
  40ae42:	2201      	movs	r2, #1
  40ae44:	2b07      	cmp	r3, #7
  40ae46:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
  40ae4a:	9322      	str	r3, [sp, #136]	; 0x88
  40ae4c:	6062      	str	r2, [r4, #4]
  40ae4e:	dc50      	bgt.n	40aef2 <_vfprintf_r+0x109e>
  40ae50:	3408      	adds	r4, #8
  40ae52:	b92d      	cbnz	r5, 40ae60 <_vfprintf_r+0x100c>
  40ae54:	9b11      	ldr	r3, [sp, #68]	; 0x44
  40ae56:	b91b      	cbnz	r3, 40ae60 <_vfprintf_r+0x100c>
  40ae58:	9b06      	ldr	r3, [sp, #24]
  40ae5a:	07de      	lsls	r6, r3, #31
  40ae5c:	f57f aa17 	bpl.w	40a28e <_vfprintf_r+0x43a>
  40ae60:	9b22      	ldr	r3, [sp, #136]	; 0x88
  40ae62:	9916      	ldr	r1, [sp, #88]	; 0x58
  40ae64:	9a15      	ldr	r2, [sp, #84]	; 0x54
  40ae66:	6022      	str	r2, [r4, #0]
  40ae68:	3301      	adds	r3, #1
  40ae6a:	eb0b 0201 	add.w	r2, fp, r1
  40ae6e:	2b07      	cmp	r3, #7
  40ae70:	9223      	str	r2, [sp, #140]	; 0x8c
  40ae72:	6061      	str	r1, [r4, #4]
  40ae74:	9322      	str	r3, [sp, #136]	; 0x88
  40ae76:	f300 8168 	bgt.w	40b14a <_vfprintf_r+0x12f6>
  40ae7a:	3408      	adds	r4, #8
  40ae7c:	426d      	negs	r5, r5
  40ae7e:	2d00      	cmp	r5, #0
  40ae80:	dd6f      	ble.n	40af62 <_vfprintf_r+0x110e>
  40ae82:	2d10      	cmp	r5, #16
  40ae84:	4f9e      	ldr	r7, [pc, #632]	; (40b100 <_vfprintf_r+0x12ac>)
  40ae86:	bfc8      	it	gt
  40ae88:	2610      	movgt	r6, #16
  40ae8a:	dc05      	bgt.n	40ae98 <_vfprintf_r+0x1044>
  40ae8c:	e0aa      	b.n	40afe4 <_vfprintf_r+0x1190>
  40ae8e:	3408      	adds	r4, #8
  40ae90:	3d10      	subs	r5, #16
  40ae92:	2d10      	cmp	r5, #16
  40ae94:	f340 80a6 	ble.w	40afe4 <_vfprintf_r+0x1190>
  40ae98:	3301      	adds	r3, #1
  40ae9a:	3210      	adds	r2, #16
  40ae9c:	2b07      	cmp	r3, #7
  40ae9e:	9223      	str	r2, [sp, #140]	; 0x8c
  40aea0:	9322      	str	r3, [sp, #136]	; 0x88
  40aea2:	6027      	str	r7, [r4, #0]
  40aea4:	6066      	str	r6, [r4, #4]
  40aea6:	ddf2      	ble.n	40ae8e <_vfprintf_r+0x103a>
  40aea8:	4640      	mov	r0, r8
  40aeaa:	4649      	mov	r1, r9
  40aeac:	aa21      	add	r2, sp, #132	; 0x84
  40aeae:	f7fe f981 	bl	4091b4 <__sprint_r>
  40aeb2:	2800      	cmp	r0, #0
  40aeb4:	f47f a8ce 	bne.w	40a054 <_vfprintf_r+0x200>
  40aeb8:	9a23      	ldr	r2, [sp, #140]	; 0x8c
  40aeba:	9b22      	ldr	r3, [sp, #136]	; 0x88
  40aebc:	ac2e      	add	r4, sp, #184	; 0xb8
  40aebe:	e7e7      	b.n	40ae90 <_vfprintf_r+0x103c>
  40aec0:	9e06      	ldr	r6, [sp, #24]
  40aec2:	4a90      	ldr	r2, [pc, #576]	; (40b104 <_vfprintf_r+0x12b0>)
  40aec4:	4b90      	ldr	r3, [pc, #576]	; (40b108 <_vfprintf_r+0x12b4>)
  40aec6:	f89d c067 	ldrb.w	ip, [sp, #103]	; 0x67
  40aeca:	900f      	str	r0, [sp, #60]	; 0x3c
  40aecc:	2103      	movs	r1, #3
  40aece:	f026 0680 	bic.w	r6, r6, #128	; 0x80
  40aed2:	2d47      	cmp	r5, #71	; 0x47
  40aed4:	bfd8      	it	le
  40aed6:	461a      	movle	r2, r3
  40aed8:	9107      	str	r1, [sp, #28]
  40aeda:	9606      	str	r6, [sp, #24]
  40aedc:	9010      	str	r0, [sp, #64]	; 0x40
  40aede:	920e      	str	r2, [sp, #56]	; 0x38
  40aee0:	910b      	str	r1, [sp, #44]	; 0x2c
  40aee2:	f7ff b90f 	b.w	40a104 <_vfprintf_r+0x2b0>
  40aee6:	3304      	adds	r3, #4
  40aee8:	6816      	ldr	r6, [r2, #0]
  40aeea:	930c      	str	r3, [sp, #48]	; 0x30
  40aeec:	2700      	movs	r7, #0
  40aeee:	f7ff ba6d 	b.w	40a3cc <_vfprintf_r+0x578>
  40aef2:	4640      	mov	r0, r8
  40aef4:	4649      	mov	r1, r9
  40aef6:	aa21      	add	r2, sp, #132	; 0x84
  40aef8:	f7fe f95c 	bl	4091b4 <__sprint_r>
  40aefc:	2800      	cmp	r0, #0
  40aefe:	f47f a8a9 	bne.w	40a054 <_vfprintf_r+0x200>
  40af02:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
  40af04:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
  40af08:	ac2e      	add	r4, sp, #184	; 0xb8
  40af0a:	e7a2      	b.n	40ae52 <_vfprintf_r+0xffe>
  40af0c:	f041 0120 	orr.w	r1, r1, #32
  40af10:	9106      	str	r1, [sp, #24]
  40af12:	785d      	ldrb	r5, [r3, #1]
  40af14:	1c59      	adds	r1, r3, #1
  40af16:	f7ff b80e 	b.w	409f36 <_vfprintf_r+0xe2>
  40af1a:	980a      	ldr	r0, [sp, #40]	; 0x28
  40af1c:	910c      	str	r1, [sp, #48]	; 0x30
  40af1e:	4240      	negs	r0, r0
  40af20:	900a      	str	r0, [sp, #40]	; 0x28
  40af22:	4619      	mov	r1, r3
  40af24:	f7ff ba02 	b.w	40a32c <_vfprintf_r+0x4d8>
  40af28:	4640      	mov	r0, r8
  40af2a:	4649      	mov	r1, r9
  40af2c:	aa21      	add	r2, sp, #132	; 0x84
  40af2e:	f7fe f941 	bl	4091b4 <__sprint_r>
  40af32:	2800      	cmp	r0, #0
  40af34:	f47f a88e 	bne.w	40a054 <_vfprintf_r+0x200>
  40af38:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
  40af3c:	ac2e      	add	r4, sp, #184	; 0xb8
  40af3e:	e41e      	b.n	40a77e <_vfprintf_r+0x92a>
  40af40:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  40af42:	ab2e      	add	r3, sp, #184	; 0xb8
  40af44:	1a9b      	subs	r3, r3, r2
  40af46:	930b      	str	r3, [sp, #44]	; 0x2c
  40af48:	f7ff b8d4 	b.w	40a0f4 <_vfprintf_r+0x2a0>
  40af4c:	4640      	mov	r0, r8
  40af4e:	4649      	mov	r1, r9
  40af50:	aa21      	add	r2, sp, #132	; 0x84
  40af52:	f7fe f92f 	bl	4091b4 <__sprint_r>
  40af56:	2800      	cmp	r0, #0
  40af58:	f47f a87c 	bne.w	40a054 <_vfprintf_r+0x200>
  40af5c:	9a23      	ldr	r2, [sp, #140]	; 0x8c
  40af5e:	9b22      	ldr	r3, [sp, #136]	; 0x88
  40af60:	ac2e      	add	r4, sp, #184	; 0xb8
  40af62:	9811      	ldr	r0, [sp, #68]	; 0x44
  40af64:	6060      	str	r0, [r4, #4]
  40af66:	3301      	adds	r3, #1
  40af68:	eb02 0b00 	add.w	fp, r2, r0
  40af6c:	2b07      	cmp	r3, #7
  40af6e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  40af70:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
  40af74:	9322      	str	r3, [sp, #136]	; 0x88
  40af76:	6022      	str	r2, [r4, #0]
  40af78:	f77f a988 	ble.w	40a28c <_vfprintf_r+0x438>
  40af7c:	e49d      	b.n	40a8ba <_vfprintf_r+0xa66>
  40af7e:	f8cd b03c 	str.w	fp, [sp, #60]	; 0x3c
  40af82:	f7fc fe63 	bl	407c4c <strlen>
  40af86:	970c      	str	r7, [sp, #48]	; 0x30
  40af88:	900b      	str	r0, [sp, #44]	; 0x2c
  40af8a:	4603      	mov	r3, r0
  40af8c:	f7ff ba03 	b.w	40a396 <_vfprintf_r+0x542>
  40af90:	2003      	movs	r0, #3
  40af92:	a91b      	add	r1, sp, #108	; 0x6c
  40af94:	e88d 0801 	stmia.w	sp, {r0, fp}
  40af98:	9102      	str	r1, [sp, #8]
  40af9a:	a81c      	add	r0, sp, #112	; 0x70
  40af9c:	a91f      	add	r1, sp, #124	; 0x7c
  40af9e:	9003      	str	r0, [sp, #12]
  40afa0:	9a07      	ldr	r2, [sp, #28]
  40afa2:	9104      	str	r1, [sp, #16]
  40afa4:	4653      	mov	r3, sl
  40afa6:	4640      	mov	r0, r8
  40afa8:	f000 fb0e 	bl	40b5c8 <_dtoa_r>
  40afac:	465f      	mov	r7, fp
  40afae:	900e      	str	r0, [sp, #56]	; 0x38
  40afb0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  40afb2:	19de      	adds	r6, r3, r7
  40afb4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  40afb6:	2b46      	cmp	r3, #70	; 0x46
  40afb8:	f47f aeb9 	bne.w	40ad2e <_vfprintf_r+0xeda>
  40afbc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  40afbe:	781b      	ldrb	r3, [r3, #0]
  40afc0:	2b30      	cmp	r3, #48	; 0x30
  40afc2:	f000 80fc 	beq.w	40b1be <_vfprintf_r+0x136a>
  40afc6:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
  40afc8:	443e      	add	r6, r7
  40afca:	e6b0      	b.n	40ad2e <_vfprintf_r+0xeda>
  40afcc:	4640      	mov	r0, r8
  40afce:	4649      	mov	r1, r9
  40afd0:	aa21      	add	r2, sp, #132	; 0x84
  40afd2:	f7fe f8ef 	bl	4091b4 <__sprint_r>
  40afd6:	2800      	cmp	r0, #0
  40afd8:	f47f a83c 	bne.w	40a054 <_vfprintf_r+0x200>
  40afdc:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
  40afe0:	ac2e      	add	r4, sp, #184	; 0xb8
  40afe2:	e4f4      	b.n	40a9ce <_vfprintf_r+0xb7a>
  40afe4:	3301      	adds	r3, #1
  40afe6:	442a      	add	r2, r5
  40afe8:	2b07      	cmp	r3, #7
  40afea:	9223      	str	r2, [sp, #140]	; 0x8c
  40afec:	9322      	str	r3, [sp, #136]	; 0x88
  40afee:	6027      	str	r7, [r4, #0]
  40aff0:	6065      	str	r5, [r4, #4]
  40aff2:	dcab      	bgt.n	40af4c <_vfprintf_r+0x10f8>
  40aff4:	3408      	adds	r4, #8
  40aff6:	e7b4      	b.n	40af62 <_vfprintf_r+0x110e>
  40aff8:	4640      	mov	r0, r8
  40affa:	4649      	mov	r1, r9
  40affc:	aa21      	add	r2, sp, #132	; 0x84
  40affe:	f7fe f8d9 	bl	4091b4 <__sprint_r>
  40b002:	2800      	cmp	r0, #0
  40b004:	f47f a826 	bne.w	40a054 <_vfprintf_r+0x200>
  40b008:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
  40b00a:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
  40b00e:	ac2e      	add	r4, sp, #184	; 0xb8
  40b010:	e59f      	b.n	40ab52 <_vfprintf_r+0xcfe>
  40b012:	2e06      	cmp	r6, #6
  40b014:	4633      	mov	r3, r6
  40b016:	bf28      	it	cs
  40b018:	2306      	movcs	r3, #6
  40b01a:	930b      	str	r3, [sp, #44]	; 0x2c
  40b01c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  40b020:	f8dd c038 	ldr.w	ip, [sp, #56]	; 0x38
  40b024:	9307      	str	r3, [sp, #28]
  40b026:	4b39      	ldr	r3, [pc, #228]	; (40b10c <_vfprintf_r+0x12b8>)
  40b028:	970c      	str	r7, [sp, #48]	; 0x30
  40b02a:	f8cd c03c 	str.w	ip, [sp, #60]	; 0x3c
  40b02e:	f8cd c040 	str.w	ip, [sp, #64]	; 0x40
  40b032:	930e      	str	r3, [sp, #56]	; 0x38
  40b034:	f7ff b866 	b.w	40a104 <_vfprintf_r+0x2b0>
  40b038:	4640      	mov	r0, r8
  40b03a:	4649      	mov	r1, r9
  40b03c:	aa21      	add	r2, sp, #132	; 0x84
  40b03e:	f7fe f8b9 	bl	4091b4 <__sprint_r>
  40b042:	2800      	cmp	r0, #0
  40b044:	f47f a806 	bne.w	40a054 <_vfprintf_r+0x200>
  40b048:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
  40b04a:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40b04c:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
  40b050:	1ad3      	subs	r3, r2, r3
  40b052:	ac2e      	add	r4, sp, #184	; 0xb8
  40b054:	e593      	b.n	40ab7e <_vfprintf_r+0xd2a>
  40b056:	1cdf      	adds	r7, r3, #3
  40b058:	db22      	blt.n	40b0a0 <_vfprintf_r+0x124c>
  40b05a:	459b      	cmp	fp, r3
  40b05c:	db20      	blt.n	40b0a0 <_vfprintf_r+0x124c>
  40b05e:	9310      	str	r3, [sp, #64]	; 0x40
  40b060:	2567      	movs	r5, #103	; 0x67
  40b062:	e686      	b.n	40ad72 <_vfprintf_r+0xf1e>
  40b064:	9307      	str	r3, [sp, #28]
  40b066:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  40b068:	9306      	str	r3, [sp, #24]
  40b06a:	f04f 0c2d 	mov.w	ip, #45	; 0x2d
  40b06e:	2300      	movs	r3, #0
  40b070:	f88d c067 	strb.w	ip, [sp, #103]	; 0x67
  40b074:	930f      	str	r3, [sp, #60]	; 0x3c
  40b076:	f7ff b848 	b.w	40a10a <_vfprintf_r+0x2b6>
  40b07a:	f04f 0c2d 	mov.w	ip, #45	; 0x2d
  40b07e:	f88d c067 	strb.w	ip, [sp, #103]	; 0x67
  40b082:	f7ff ba0e 	b.w	40a4a2 <_vfprintf_r+0x64e>
  40b086:	4633      	mov	r3, r6
  40b088:	e664      	b.n	40ad54 <_vfprintf_r+0xf00>
  40b08a:	ea26 73e6 	bic.w	r3, r6, r6, asr #31
  40b08e:	900f      	str	r0, [sp, #60]	; 0x3c
  40b090:	970c      	str	r7, [sp, #48]	; 0x30
  40b092:	9010      	str	r0, [sp, #64]	; 0x40
  40b094:	f89d c067 	ldrb.w	ip, [sp, #103]	; 0x67
  40b098:	9307      	str	r3, [sp, #28]
  40b09a:	960b      	str	r6, [sp, #44]	; 0x2c
  40b09c:	f7ff b832 	b.w	40a104 <_vfprintf_r+0x2b0>
  40b0a0:	3d02      	subs	r5, #2
  40b0a2:	3b01      	subs	r3, #1
  40b0a4:	2b00      	cmp	r3, #0
  40b0a6:	931b      	str	r3, [sp, #108]	; 0x6c
  40b0a8:	bfba      	itte	lt
  40b0aa:	425b      	neglt	r3, r3
  40b0ac:	222d      	movlt	r2, #45	; 0x2d
  40b0ae:	222b      	movge	r2, #43	; 0x2b
  40b0b0:	2b09      	cmp	r3, #9
  40b0b2:	f88d 5074 	strb.w	r5, [sp, #116]	; 0x74
  40b0b6:	f88d 2075 	strb.w	r2, [sp, #117]	; 0x75
  40b0ba:	dd72      	ble.n	40b1a2 <_vfprintf_r+0x134e>
  40b0bc:	f10d 0683 	add.w	r6, sp, #131	; 0x83
  40b0c0:	4630      	mov	r0, r6
  40b0c2:	4a13      	ldr	r2, [pc, #76]	; (40b110 <_vfprintf_r+0x12bc>)
  40b0c4:	fb82 2103 	smull	r2, r1, r2, r3
  40b0c8:	17da      	asrs	r2, r3, #31
  40b0ca:	ebc2 02a1 	rsb	r2, r2, r1, asr #2
  40b0ce:	eb02 0182 	add.w	r1, r2, r2, lsl #2
  40b0d2:	eba3 0341 	sub.w	r3, r3, r1, lsl #1
  40b0d6:	f103 0130 	add.w	r1, r3, #48	; 0x30
  40b0da:	2a09      	cmp	r2, #9
  40b0dc:	4613      	mov	r3, r2
  40b0de:	f800 1d01 	strb.w	r1, [r0, #-1]!
  40b0e2:	dcee      	bgt.n	40b0c2 <_vfprintf_r+0x126e>
  40b0e4:	4602      	mov	r2, r0
  40b0e6:	3330      	adds	r3, #48	; 0x30
  40b0e8:	b2d9      	uxtb	r1, r3
  40b0ea:	f802 1d01 	strb.w	r1, [r2, #-1]!
  40b0ee:	4296      	cmp	r6, r2
  40b0f0:	f240 80a0 	bls.w	40b234 <_vfprintf_r+0x13e0>
  40b0f4:	f10d 0276 	add.w	r2, sp, #118	; 0x76
  40b0f8:	4603      	mov	r3, r0
  40b0fa:	e00d      	b.n	40b118 <_vfprintf_r+0x12c4>
  40b0fc:	0040fcdc 	.word	0x0040fcdc
  40b100:	0040fee8 	.word	0x0040fee8
  40b104:	0040fe94 	.word	0x0040fe94
  40b108:	0040fe90 	.word	0x0040fe90
  40b10c:	0040fec0 	.word	0x0040fec0
  40b110:	66666667 	.word	0x66666667
  40b114:	f813 1b01 	ldrb.w	r1, [r3], #1
  40b118:	f802 1b01 	strb.w	r1, [r2], #1
  40b11c:	42b3      	cmp	r3, r6
  40b11e:	d1f9      	bne.n	40b114 <_vfprintf_r+0x12c0>
  40b120:	ab21      	add	r3, sp, #132	; 0x84
  40b122:	1a1b      	subs	r3, r3, r0
  40b124:	f10d 0276 	add.w	r2, sp, #118	; 0x76
  40b128:	4413      	add	r3, r2
  40b12a:	aa1d      	add	r2, sp, #116	; 0x74
  40b12c:	1a9b      	subs	r3, r3, r2
  40b12e:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40b130:	9317      	str	r3, [sp, #92]	; 0x5c
  40b132:	2a01      	cmp	r2, #1
  40b134:	4413      	add	r3, r2
  40b136:	930b      	str	r3, [sp, #44]	; 0x2c
  40b138:	dd6d      	ble.n	40b216 <_vfprintf_r+0x13c2>
  40b13a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  40b13c:	2200      	movs	r2, #0
  40b13e:	3301      	adds	r3, #1
  40b140:	930b      	str	r3, [sp, #44]	; 0x2c
  40b142:	9210      	str	r2, [sp, #64]	; 0x40
  40b144:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  40b148:	e61f      	b.n	40ad8a <_vfprintf_r+0xf36>
  40b14a:	4640      	mov	r0, r8
  40b14c:	4649      	mov	r1, r9
  40b14e:	aa21      	add	r2, sp, #132	; 0x84
  40b150:	f7fe f830 	bl	4091b4 <__sprint_r>
  40b154:	2800      	cmp	r0, #0
  40b156:	f47e af7d 	bne.w	40a054 <_vfprintf_r+0x200>
  40b15a:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
  40b15c:	9a23      	ldr	r2, [sp, #140]	; 0x8c
  40b15e:	9b22      	ldr	r3, [sp, #136]	; 0x88
  40b160:	ac2e      	add	r4, sp, #184	; 0xb8
  40b162:	e68b      	b.n	40ae7c <_vfprintf_r+0x1028>
  40b164:	f04f 0b06 	mov.w	fp, #6
  40b168:	e5ab      	b.n	40acc2 <_vfprintf_r+0xe6e>
  40b16a:	9b10      	ldr	r3, [sp, #64]	; 0x40
  40b16c:	2b00      	cmp	r3, #0
  40b16e:	bfd8      	it	le
  40b170:	f1c3 0602 	rsble	r6, r3, #2
  40b174:	9b11      	ldr	r3, [sp, #68]	; 0x44
  40b176:	bfc8      	it	gt
  40b178:	2601      	movgt	r6, #1
  40b17a:	18f3      	adds	r3, r6, r3
  40b17c:	930b      	str	r3, [sp, #44]	; 0x2c
  40b17e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  40b182:	e602      	b.n	40ad8a <_vfprintf_r+0xf36>
  40b184:	2b00      	cmp	r3, #0
  40b186:	dd30      	ble.n	40b1ea <_vfprintf_r+0x1396>
  40b188:	f1bb 0f00 	cmp.w	fp, #0
  40b18c:	d125      	bne.n	40b1da <_vfprintf_r+0x1386>
  40b18e:	9b06      	ldr	r3, [sp, #24]
  40b190:	07de      	lsls	r6, r3, #31
  40b192:	d422      	bmi.n	40b1da <_vfprintf_r+0x1386>
  40b194:	9a10      	ldr	r2, [sp, #64]	; 0x40
  40b196:	920b      	str	r2, [sp, #44]	; 0x2c
  40b198:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
  40b19c:	e5f5      	b.n	40ad8a <_vfprintf_r+0xf36>
  40b19e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  40b1a0:	e5d8      	b.n	40ad54 <_vfprintf_r+0xf00>
  40b1a2:	3330      	adds	r3, #48	; 0x30
  40b1a4:	2230      	movs	r2, #48	; 0x30
  40b1a6:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
  40b1aa:	f88d 2076 	strb.w	r2, [sp, #118]	; 0x76
  40b1ae:	ab1e      	add	r3, sp, #120	; 0x78
  40b1b0:	e7bb      	b.n	40b12a <_vfprintf_r+0x12d6>
  40b1b2:	9b10      	ldr	r3, [sp, #64]	; 0x40
  40b1b4:	3301      	adds	r3, #1
  40b1b6:	930b      	str	r3, [sp, #44]	; 0x2c
  40b1b8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  40b1bc:	e5e5      	b.n	40ad8a <_vfprintf_r+0xf36>
  40b1be:	9807      	ldr	r0, [sp, #28]
  40b1c0:	4651      	mov	r1, sl
  40b1c2:	2200      	movs	r2, #0
  40b1c4:	2300      	movs	r3, #0
  40b1c6:	f7fb f85d 	bl	406284 <__aeabi_dcmpeq>
  40b1ca:	2800      	cmp	r0, #0
  40b1cc:	f47f aefb 	bne.w	40afc6 <_vfprintf_r+0x1172>
  40b1d0:	f1c7 0701 	rsb	r7, r7, #1
  40b1d4:	971b      	str	r7, [sp, #108]	; 0x6c
  40b1d6:	443e      	add	r6, r7
  40b1d8:	e5a9      	b.n	40ad2e <_vfprintf_r+0xeda>
  40b1da:	9b10      	ldr	r3, [sp, #64]	; 0x40
  40b1dc:	f10b 0601 	add.w	r6, fp, #1
  40b1e0:	4433      	add	r3, r6
  40b1e2:	930b      	str	r3, [sp, #44]	; 0x2c
  40b1e4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  40b1e8:	e5cf      	b.n	40ad8a <_vfprintf_r+0xf36>
  40b1ea:	f1bb 0f00 	cmp.w	fp, #0
  40b1ee:	d11b      	bne.n	40b228 <_vfprintf_r+0x13d4>
  40b1f0:	9b06      	ldr	r3, [sp, #24]
  40b1f2:	07d8      	lsls	r0, r3, #31
  40b1f4:	d418      	bmi.n	40b228 <_vfprintf_r+0x13d4>
  40b1f6:	2301      	movs	r3, #1
  40b1f8:	930b      	str	r3, [sp, #44]	; 0x2c
  40b1fa:	e5c6      	b.n	40ad8a <_vfprintf_r+0xf36>
  40b1fc:	9d0c      	ldr	r5, [sp, #48]	; 0x30
  40b1fe:	682e      	ldr	r6, [r5, #0]
  40b200:	4628      	mov	r0, r5
  40b202:	3004      	adds	r0, #4
  40b204:	2e00      	cmp	r6, #0
  40b206:	785d      	ldrb	r5, [r3, #1]
  40b208:	900c      	str	r0, [sp, #48]	; 0x30
  40b20a:	f6be ae94 	bge.w	409f36 <_vfprintf_r+0xe2>
  40b20e:	f04f 36ff 	mov.w	r6, #4294967295
  40b212:	f7fe be90 	b.w	409f36 <_vfprintf_r+0xe2>
  40b216:	9b06      	ldr	r3, [sp, #24]
  40b218:	f013 0301 	ands.w	r3, r3, #1
  40b21c:	d18d      	bne.n	40b13a <_vfprintf_r+0x12e6>
  40b21e:	9310      	str	r3, [sp, #64]	; 0x40
  40b220:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  40b222:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  40b226:	e5b0      	b.n	40ad8a <_vfprintf_r+0xf36>
  40b228:	f10b 0302 	add.w	r3, fp, #2
  40b22c:	930b      	str	r3, [sp, #44]	; 0x2c
  40b22e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  40b232:	e5aa      	b.n	40ad8a <_vfprintf_r+0xf36>
  40b234:	f10d 0376 	add.w	r3, sp, #118	; 0x76
  40b238:	e777      	b.n	40b12a <_vfprintf_r+0x12d6>
  40b23a:	bf00      	nop

0040b23c <__sbprintf>:
  40b23c:	e92d 42f0 	stmdb	sp!, {r4, r5, r6, r7, r9, lr}
  40b240:	460c      	mov	r4, r1
  40b242:	f5ad 6d8d 	sub.w	sp, sp, #1128	; 0x468
  40b246:	f8b1 e00c 	ldrh.w	lr, [r1, #12]
  40b24a:	69e7      	ldr	r7, [r4, #28]
  40b24c:	6e49      	ldr	r1, [r1, #100]	; 0x64
  40b24e:	f8b4 900e 	ldrh.w	r9, [r4, #14]
  40b252:	9119      	str	r1, [sp, #100]	; 0x64
  40b254:	ad1a      	add	r5, sp, #104	; 0x68
  40b256:	f44f 6680 	mov.w	r6, #1024	; 0x400
  40b25a:	f02e 0e02 	bic.w	lr, lr, #2
  40b25e:	f04f 0c00 	mov.w	ip, #0
  40b262:	9707      	str	r7, [sp, #28]
  40b264:	4669      	mov	r1, sp
  40b266:	6a67      	ldr	r7, [r4, #36]	; 0x24
  40b268:	9500      	str	r5, [sp, #0]
  40b26a:	9504      	str	r5, [sp, #16]
  40b26c:	9602      	str	r6, [sp, #8]
  40b26e:	9605      	str	r6, [sp, #20]
  40b270:	f8ad e00c 	strh.w	lr, [sp, #12]
  40b274:	f8ad 900e 	strh.w	r9, [sp, #14]
  40b278:	9709      	str	r7, [sp, #36]	; 0x24
  40b27a:	f8cd c018 	str.w	ip, [sp, #24]
  40b27e:	4606      	mov	r6, r0
  40b280:	f7fe fde8 	bl	409e54 <_vfprintf_r>
  40b284:	1e05      	subs	r5, r0, #0
  40b286:	db07      	blt.n	40b298 <__sbprintf+0x5c>
  40b288:	4630      	mov	r0, r6
  40b28a:	4669      	mov	r1, sp
  40b28c:	f7fb f96e 	bl	40656c <_fflush_r>
  40b290:	2800      	cmp	r0, #0
  40b292:	bf18      	it	ne
  40b294:	f04f 35ff 	movne.w	r5, #4294967295
  40b298:	f8bd 300c 	ldrh.w	r3, [sp, #12]
  40b29c:	065b      	lsls	r3, r3, #25
  40b29e:	d503      	bpl.n	40b2a8 <__sbprintf+0x6c>
  40b2a0:	89a3      	ldrh	r3, [r4, #12]
  40b2a2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40b2a6:	81a3      	strh	r3, [r4, #12]
  40b2a8:	4628      	mov	r0, r5
  40b2aa:	f50d 6d8d 	add.w	sp, sp, #1128	; 0x468
  40b2ae:	e8bd 82f0 	ldmia.w	sp!, {r4, r5, r6, r7, r9, pc}
  40b2b2:	bf00      	nop

0040b2b4 <__swbuf_r>:
  40b2b4:	b570      	push	{r4, r5, r6, lr}
  40b2b6:	460d      	mov	r5, r1
  40b2b8:	4614      	mov	r4, r2
  40b2ba:	4606      	mov	r6, r0
  40b2bc:	b110      	cbz	r0, 40b2c4 <__swbuf_r+0x10>
  40b2be:	6b83      	ldr	r3, [r0, #56]	; 0x38
  40b2c0:	2b00      	cmp	r3, #0
  40b2c2:	d048      	beq.n	40b356 <__swbuf_r+0xa2>
  40b2c4:	89a2      	ldrh	r2, [r4, #12]
  40b2c6:	69a3      	ldr	r3, [r4, #24]
  40b2c8:	60a3      	str	r3, [r4, #8]
  40b2ca:	b291      	uxth	r1, r2
  40b2cc:	0708      	lsls	r0, r1, #28
  40b2ce:	d538      	bpl.n	40b342 <__swbuf_r+0x8e>
  40b2d0:	6923      	ldr	r3, [r4, #16]
  40b2d2:	2b00      	cmp	r3, #0
  40b2d4:	d035      	beq.n	40b342 <__swbuf_r+0x8e>
  40b2d6:	0489      	lsls	r1, r1, #18
  40b2d8:	b2ed      	uxtb	r5, r5
  40b2da:	d515      	bpl.n	40b308 <__swbuf_r+0x54>
  40b2dc:	6822      	ldr	r2, [r4, #0]
  40b2de:	6961      	ldr	r1, [r4, #20]
  40b2e0:	1ad3      	subs	r3, r2, r3
  40b2e2:	428b      	cmp	r3, r1
  40b2e4:	da1c      	bge.n	40b320 <__swbuf_r+0x6c>
  40b2e6:	3301      	adds	r3, #1
  40b2e8:	68a1      	ldr	r1, [r4, #8]
  40b2ea:	1c50      	adds	r0, r2, #1
  40b2ec:	3901      	subs	r1, #1
  40b2ee:	60a1      	str	r1, [r4, #8]
  40b2f0:	6020      	str	r0, [r4, #0]
  40b2f2:	7015      	strb	r5, [r2, #0]
  40b2f4:	6962      	ldr	r2, [r4, #20]
  40b2f6:	429a      	cmp	r2, r3
  40b2f8:	d01a      	beq.n	40b330 <__swbuf_r+0x7c>
  40b2fa:	89a3      	ldrh	r3, [r4, #12]
  40b2fc:	07db      	lsls	r3, r3, #31
  40b2fe:	d501      	bpl.n	40b304 <__swbuf_r+0x50>
  40b300:	2d0a      	cmp	r5, #10
  40b302:	d015      	beq.n	40b330 <__swbuf_r+0x7c>
  40b304:	4628      	mov	r0, r5
  40b306:	bd70      	pop	{r4, r5, r6, pc}
  40b308:	6e61      	ldr	r1, [r4, #100]	; 0x64
  40b30a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
  40b30e:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
  40b312:	81a2      	strh	r2, [r4, #12]
  40b314:	6822      	ldr	r2, [r4, #0]
  40b316:	6661      	str	r1, [r4, #100]	; 0x64
  40b318:	6961      	ldr	r1, [r4, #20]
  40b31a:	1ad3      	subs	r3, r2, r3
  40b31c:	428b      	cmp	r3, r1
  40b31e:	dbe2      	blt.n	40b2e6 <__swbuf_r+0x32>
  40b320:	4630      	mov	r0, r6
  40b322:	4621      	mov	r1, r4
  40b324:	f7fb f922 	bl	40656c <_fflush_r>
  40b328:	b940      	cbnz	r0, 40b33c <__swbuf_r+0x88>
  40b32a:	6822      	ldr	r2, [r4, #0]
  40b32c:	2301      	movs	r3, #1
  40b32e:	e7db      	b.n	40b2e8 <__swbuf_r+0x34>
  40b330:	4630      	mov	r0, r6
  40b332:	4621      	mov	r1, r4
  40b334:	f7fb f91a 	bl	40656c <_fflush_r>
  40b338:	2800      	cmp	r0, #0
  40b33a:	d0e3      	beq.n	40b304 <__swbuf_r+0x50>
  40b33c:	f04f 30ff 	mov.w	r0, #4294967295
  40b340:	bd70      	pop	{r4, r5, r6, pc}
  40b342:	4630      	mov	r0, r6
  40b344:	4621      	mov	r1, r4
  40b346:	f000 f81d 	bl	40b384 <__swsetup_r>
  40b34a:	2800      	cmp	r0, #0
  40b34c:	d1f6      	bne.n	40b33c <__swbuf_r+0x88>
  40b34e:	89a2      	ldrh	r2, [r4, #12]
  40b350:	6923      	ldr	r3, [r4, #16]
  40b352:	b291      	uxth	r1, r2
  40b354:	e7bf      	b.n	40b2d6 <__swbuf_r+0x22>
  40b356:	f7fb f99d 	bl	406694 <__sinit>
  40b35a:	e7b3      	b.n	40b2c4 <__swbuf_r+0x10>

0040b35c <_write_r>:
  40b35c:	b570      	push	{r4, r5, r6, lr}
  40b35e:	4c08      	ldr	r4, [pc, #32]	; (40b380 <_write_r+0x24>)
  40b360:	4606      	mov	r6, r0
  40b362:	2500      	movs	r5, #0
  40b364:	4608      	mov	r0, r1
  40b366:	4611      	mov	r1, r2
  40b368:	461a      	mov	r2, r3
  40b36a:	6025      	str	r5, [r4, #0]
  40b36c:	f7f4 ff2c 	bl	4001c8 <_write>
  40b370:	1c43      	adds	r3, r0, #1
  40b372:	d000      	beq.n	40b376 <_write_r+0x1a>
  40b374:	bd70      	pop	{r4, r5, r6, pc}
  40b376:	6823      	ldr	r3, [r4, #0]
  40b378:	2b00      	cmp	r3, #0
  40b37a:	d0fb      	beq.n	40b374 <_write_r+0x18>
  40b37c:	6033      	str	r3, [r6, #0]
  40b37e:	bd70      	pop	{r4, r5, r6, pc}
  40b380:	20000d6c 	.word	0x20000d6c

0040b384 <__swsetup_r>:
  40b384:	b538      	push	{r3, r4, r5, lr}
  40b386:	4b2f      	ldr	r3, [pc, #188]	; (40b444 <__swsetup_r+0xc0>)
  40b388:	681b      	ldr	r3, [r3, #0]
  40b38a:	4605      	mov	r5, r0
  40b38c:	460c      	mov	r4, r1
  40b38e:	b113      	cbz	r3, 40b396 <__swsetup_r+0x12>
  40b390:	6b9a      	ldr	r2, [r3, #56]	; 0x38
  40b392:	2a00      	cmp	r2, #0
  40b394:	d036      	beq.n	40b404 <__swsetup_r+0x80>
  40b396:	89a2      	ldrh	r2, [r4, #12]
  40b398:	b293      	uxth	r3, r2
  40b39a:	0718      	lsls	r0, r3, #28
  40b39c:	d50c      	bpl.n	40b3b8 <__swsetup_r+0x34>
  40b39e:	6920      	ldr	r0, [r4, #16]
  40b3a0:	b1a8      	cbz	r0, 40b3ce <__swsetup_r+0x4a>
  40b3a2:	f013 0201 	ands.w	r2, r3, #1
  40b3a6:	d01e      	beq.n	40b3e6 <__swsetup_r+0x62>
  40b3a8:	6963      	ldr	r3, [r4, #20]
  40b3aa:	2200      	movs	r2, #0
  40b3ac:	425b      	negs	r3, r3
  40b3ae:	61a3      	str	r3, [r4, #24]
  40b3b0:	60a2      	str	r2, [r4, #8]
  40b3b2:	b1f0      	cbz	r0, 40b3f2 <__swsetup_r+0x6e>
  40b3b4:	2000      	movs	r0, #0
  40b3b6:	bd38      	pop	{r3, r4, r5, pc}
  40b3b8:	06d9      	lsls	r1, r3, #27
  40b3ba:	d53b      	bpl.n	40b434 <__swsetup_r+0xb0>
  40b3bc:	0758      	lsls	r0, r3, #29
  40b3be:	d425      	bmi.n	40b40c <__swsetup_r+0x88>
  40b3c0:	6920      	ldr	r0, [r4, #16]
  40b3c2:	f042 0308 	orr.w	r3, r2, #8
  40b3c6:	81a3      	strh	r3, [r4, #12]
  40b3c8:	b29b      	uxth	r3, r3
  40b3ca:	2800      	cmp	r0, #0
  40b3cc:	d1e9      	bne.n	40b3a2 <__swsetup_r+0x1e>
  40b3ce:	f403 7220 	and.w	r2, r3, #640	; 0x280
  40b3d2:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
  40b3d6:	d0e4      	beq.n	40b3a2 <__swsetup_r+0x1e>
  40b3d8:	4628      	mov	r0, r5
  40b3da:	4621      	mov	r1, r4
  40b3dc:	f7fb fcb8 	bl	406d50 <__smakebuf_r>
  40b3e0:	89a3      	ldrh	r3, [r4, #12]
  40b3e2:	6920      	ldr	r0, [r4, #16]
  40b3e4:	e7dd      	b.n	40b3a2 <__swsetup_r+0x1e>
  40b3e6:	0799      	lsls	r1, r3, #30
  40b3e8:	bf58      	it	pl
  40b3ea:	6962      	ldrpl	r2, [r4, #20]
  40b3ec:	60a2      	str	r2, [r4, #8]
  40b3ee:	2800      	cmp	r0, #0
  40b3f0:	d1e0      	bne.n	40b3b4 <__swsetup_r+0x30>
  40b3f2:	89a3      	ldrh	r3, [r4, #12]
  40b3f4:	061a      	lsls	r2, r3, #24
  40b3f6:	d5de      	bpl.n	40b3b6 <__swsetup_r+0x32>
  40b3f8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40b3fc:	81a3      	strh	r3, [r4, #12]
  40b3fe:	f04f 30ff 	mov.w	r0, #4294967295
  40b402:	bd38      	pop	{r3, r4, r5, pc}
  40b404:	4618      	mov	r0, r3
  40b406:	f7fb f945 	bl	406694 <__sinit>
  40b40a:	e7c4      	b.n	40b396 <__swsetup_r+0x12>
  40b40c:	6b21      	ldr	r1, [r4, #48]	; 0x30
  40b40e:	b149      	cbz	r1, 40b424 <__swsetup_r+0xa0>
  40b410:	f104 0340 	add.w	r3, r4, #64	; 0x40
  40b414:	4299      	cmp	r1, r3
  40b416:	d003      	beq.n	40b420 <__swsetup_r+0x9c>
  40b418:	4628      	mov	r0, r5
  40b41a:	f7fb f9bb 	bl	406794 <_free_r>
  40b41e:	89a2      	ldrh	r2, [r4, #12]
  40b420:	2300      	movs	r3, #0
  40b422:	6323      	str	r3, [r4, #48]	; 0x30
  40b424:	f022 0224 	bic.w	r2, r2, #36	; 0x24
  40b428:	2300      	movs	r3, #0
  40b42a:	6920      	ldr	r0, [r4, #16]
  40b42c:	6063      	str	r3, [r4, #4]
  40b42e:	b292      	uxth	r2, r2
  40b430:	6020      	str	r0, [r4, #0]
  40b432:	e7c6      	b.n	40b3c2 <__swsetup_r+0x3e>
  40b434:	f042 0240 	orr.w	r2, r2, #64	; 0x40
  40b438:	2309      	movs	r3, #9
  40b43a:	602b      	str	r3, [r5, #0]
  40b43c:	f04f 30ff 	mov.w	r0, #4294967295
  40b440:	81a2      	strh	r2, [r4, #12]
  40b442:	bd38      	pop	{r3, r4, r5, pc}
  40b444:	20000440 	.word	0x20000440

0040b448 <register_fini>:
  40b448:	4b02      	ldr	r3, [pc, #8]	; (40b454 <register_fini+0xc>)
  40b44a:	b113      	cbz	r3, 40b452 <register_fini+0xa>
  40b44c:	4802      	ldr	r0, [pc, #8]	; (40b458 <register_fini+0x10>)
  40b44e:	f000 b80d 	b.w	40b46c <atexit>
  40b452:	4770      	bx	lr
  40b454:	00000000 	.word	0x00000000
  40b458:	0040c45d 	.word	0x0040c45d

0040b45c <abort>:
  40b45c:	b508      	push	{r3, lr}
  40b45e:	2006      	movs	r0, #6
  40b460:	f001 fc10 	bl	40cc84 <raise>
  40b464:	2001      	movs	r0, #1
  40b466:	f7f5 ffc5 	bl	4013f4 <_exit>
  40b46a:	bf00      	nop

0040b46c <atexit>:
  40b46c:	4601      	mov	r1, r0
  40b46e:	2000      	movs	r0, #0
  40b470:	4602      	mov	r2, r0
  40b472:	4603      	mov	r3, r0
  40b474:	f001 bcde 	b.w	40ce34 <__register_exitproc>

0040b478 <_close_r>:
  40b478:	b538      	push	{r3, r4, r5, lr}
  40b47a:	4c07      	ldr	r4, [pc, #28]	; (40b498 <_close_r+0x20>)
  40b47c:	2300      	movs	r3, #0
  40b47e:	4605      	mov	r5, r0
  40b480:	4608      	mov	r0, r1
  40b482:	6023      	str	r3, [r4, #0]
  40b484:	f7f5 ffa8 	bl	4013d8 <_close>
  40b488:	1c43      	adds	r3, r0, #1
  40b48a:	d000      	beq.n	40b48e <_close_r+0x16>
  40b48c:	bd38      	pop	{r3, r4, r5, pc}
  40b48e:	6823      	ldr	r3, [r4, #0]
  40b490:	2b00      	cmp	r3, #0
  40b492:	d0fb      	beq.n	40b48c <_close_r+0x14>
  40b494:	602b      	str	r3, [r5, #0]
  40b496:	bd38      	pop	{r3, r4, r5, pc}
  40b498:	20000d6c 	.word	0x20000d6c

0040b49c <quorem>:
  40b49c:	6902      	ldr	r2, [r0, #16]
  40b49e:	690b      	ldr	r3, [r1, #16]
  40b4a0:	4293      	cmp	r3, r2
  40b4a2:	f300 808f 	bgt.w	40b5c4 <quorem+0x128>
  40b4a6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40b4aa:	f103 38ff 	add.w	r8, r3, #4294967295
  40b4ae:	f101 0714 	add.w	r7, r1, #20
  40b4b2:	f100 0b14 	add.w	fp, r0, #20
  40b4b6:	f857 2028 	ldr.w	r2, [r7, r8, lsl #2]
  40b4ba:	f85b 3028 	ldr.w	r3, [fp, r8, lsl #2]
  40b4be:	ea4f 0488 	mov.w	r4, r8, lsl #2
  40b4c2:	b083      	sub	sp, #12
  40b4c4:	3201      	adds	r2, #1
  40b4c6:	fbb3 f9f2 	udiv	r9, r3, r2
  40b4ca:	eb0b 0304 	add.w	r3, fp, r4
  40b4ce:	9400      	str	r4, [sp, #0]
  40b4d0:	eb07 0a04 	add.w	sl, r7, r4
  40b4d4:	9301      	str	r3, [sp, #4]
  40b4d6:	f1b9 0f00 	cmp.w	r9, #0
  40b4da:	d03b      	beq.n	40b554 <quorem+0xb8>
  40b4dc:	2600      	movs	r6, #0
  40b4de:	4632      	mov	r2, r6
  40b4e0:	46bc      	mov	ip, r7
  40b4e2:	46de      	mov	lr, fp
  40b4e4:	4634      	mov	r4, r6
  40b4e6:	f85c 6b04 	ldr.w	r6, [ip], #4
  40b4ea:	f8de 5000 	ldr.w	r5, [lr]
  40b4ee:	b2b3      	uxth	r3, r6
  40b4f0:	0c36      	lsrs	r6, r6, #16
  40b4f2:	fb03 4409 	mla	r4, r3, r9, r4
  40b4f6:	fb06 f609 	mul.w	r6, r6, r9
  40b4fa:	eb06 4614 	add.w	r6, r6, r4, lsr #16
  40b4fe:	b2a3      	uxth	r3, r4
  40b500:	1ad3      	subs	r3, r2, r3
  40b502:	b2b4      	uxth	r4, r6
  40b504:	fa13 f385 	uxtah	r3, r3, r5
  40b508:	ebc4 4415 	rsb	r4, r4, r5, lsr #16
  40b50c:	eb04 4423 	add.w	r4, r4, r3, asr #16
  40b510:	b29b      	uxth	r3, r3
  40b512:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
  40b516:	45e2      	cmp	sl, ip
  40b518:	ea4f 4224 	mov.w	r2, r4, asr #16
  40b51c:	f84e 3b04 	str.w	r3, [lr], #4
  40b520:	ea4f 4416 	mov.w	r4, r6, lsr #16
  40b524:	d2df      	bcs.n	40b4e6 <quorem+0x4a>
  40b526:	9b00      	ldr	r3, [sp, #0]
  40b528:	f85b 3003 	ldr.w	r3, [fp, r3]
  40b52c:	b993      	cbnz	r3, 40b554 <quorem+0xb8>
  40b52e:	9c01      	ldr	r4, [sp, #4]
  40b530:	1f23      	subs	r3, r4, #4
  40b532:	459b      	cmp	fp, r3
  40b534:	d20c      	bcs.n	40b550 <quorem+0xb4>
  40b536:	f854 3c04 	ldr.w	r3, [r4, #-4]
  40b53a:	b94b      	cbnz	r3, 40b550 <quorem+0xb4>
  40b53c:	f1a4 0308 	sub.w	r3, r4, #8
  40b540:	e002      	b.n	40b548 <quorem+0xac>
  40b542:	681a      	ldr	r2, [r3, #0]
  40b544:	3b04      	subs	r3, #4
  40b546:	b91a      	cbnz	r2, 40b550 <quorem+0xb4>
  40b548:	459b      	cmp	fp, r3
  40b54a:	f108 38ff 	add.w	r8, r8, #4294967295
  40b54e:	d3f8      	bcc.n	40b542 <quorem+0xa6>
  40b550:	f8c0 8010 	str.w	r8, [r0, #16]
  40b554:	4604      	mov	r4, r0
  40b556:	f001 fa3f 	bl	40c9d8 <__mcmp>
  40b55a:	2800      	cmp	r0, #0
  40b55c:	db2e      	blt.n	40b5bc <quorem+0x120>
  40b55e:	f109 0901 	add.w	r9, r9, #1
  40b562:	465d      	mov	r5, fp
  40b564:	2300      	movs	r3, #0
  40b566:	f857 1b04 	ldr.w	r1, [r7], #4
  40b56a:	6828      	ldr	r0, [r5, #0]
  40b56c:	b28a      	uxth	r2, r1
  40b56e:	1a9a      	subs	r2, r3, r2
  40b570:	0c09      	lsrs	r1, r1, #16
  40b572:	fa12 f280 	uxtah	r2, r2, r0
  40b576:	ebc1 4310 	rsb	r3, r1, r0, lsr #16
  40b57a:	eb03 4322 	add.w	r3, r3, r2, asr #16
  40b57e:	b291      	uxth	r1, r2
  40b580:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
  40b584:	45ba      	cmp	sl, r7
  40b586:	f845 1b04 	str.w	r1, [r5], #4
  40b58a:	ea4f 4323 	mov.w	r3, r3, asr #16
  40b58e:	d2ea      	bcs.n	40b566 <quorem+0xca>
  40b590:	f85b 2028 	ldr.w	r2, [fp, r8, lsl #2]
  40b594:	eb0b 0388 	add.w	r3, fp, r8, lsl #2
  40b598:	b982      	cbnz	r2, 40b5bc <quorem+0x120>
  40b59a:	1f1a      	subs	r2, r3, #4
  40b59c:	4593      	cmp	fp, r2
  40b59e:	d20b      	bcs.n	40b5b8 <quorem+0x11c>
  40b5a0:	f853 2c04 	ldr.w	r2, [r3, #-4]
  40b5a4:	b942      	cbnz	r2, 40b5b8 <quorem+0x11c>
  40b5a6:	3b08      	subs	r3, #8
  40b5a8:	e002      	b.n	40b5b0 <quorem+0x114>
  40b5aa:	681a      	ldr	r2, [r3, #0]
  40b5ac:	3b04      	subs	r3, #4
  40b5ae:	b91a      	cbnz	r2, 40b5b8 <quorem+0x11c>
  40b5b0:	459b      	cmp	fp, r3
  40b5b2:	f108 38ff 	add.w	r8, r8, #4294967295
  40b5b6:	d3f8      	bcc.n	40b5aa <quorem+0x10e>
  40b5b8:	f8c4 8010 	str.w	r8, [r4, #16]
  40b5bc:	4648      	mov	r0, r9
  40b5be:	b003      	add	sp, #12
  40b5c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40b5c4:	2000      	movs	r0, #0
  40b5c6:	4770      	bx	lr

0040b5c8 <_dtoa_r>:
  40b5c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40b5cc:	6c01      	ldr	r1, [r0, #64]	; 0x40
  40b5ce:	b097      	sub	sp, #92	; 0x5c
  40b5d0:	4604      	mov	r4, r0
  40b5d2:	9d23      	ldr	r5, [sp, #140]	; 0x8c
  40b5d4:	e9cd 2302 	strd	r2, r3, [sp, #8]
  40b5d8:	b141      	cbz	r1, 40b5ec <_dtoa_r+0x24>
  40b5da:	6c42      	ldr	r2, [r0, #68]	; 0x44
  40b5dc:	604a      	str	r2, [r1, #4]
  40b5de:	2301      	movs	r3, #1
  40b5e0:	4093      	lsls	r3, r2
  40b5e2:	608b      	str	r3, [r1, #8]
  40b5e4:	f001 f814 	bl	40c610 <_Bfree>
  40b5e8:	2300      	movs	r3, #0
  40b5ea:	6423      	str	r3, [r4, #64]	; 0x40
  40b5ec:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  40b5f0:	2b00      	cmp	r3, #0
  40b5f2:	4699      	mov	r9, r3
  40b5f4:	db36      	blt.n	40b664 <_dtoa_r+0x9c>
  40b5f6:	2300      	movs	r3, #0
  40b5f8:	602b      	str	r3, [r5, #0]
  40b5fa:	4ba5      	ldr	r3, [pc, #660]	; (40b890 <_dtoa_r+0x2c8>)
  40b5fc:	461a      	mov	r2, r3
  40b5fe:	ea09 0303 	and.w	r3, r9, r3
  40b602:	4293      	cmp	r3, r2
  40b604:	d017      	beq.n	40b636 <_dtoa_r+0x6e>
  40b606:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
  40b60a:	2200      	movs	r2, #0
  40b60c:	4630      	mov	r0, r6
  40b60e:	4639      	mov	r1, r7
  40b610:	2300      	movs	r3, #0
  40b612:	f7fa fe37 	bl	406284 <__aeabi_dcmpeq>
  40b616:	4680      	mov	r8, r0
  40b618:	2800      	cmp	r0, #0
  40b61a:	d02b      	beq.n	40b674 <_dtoa_r+0xac>
  40b61c:	9a22      	ldr	r2, [sp, #136]	; 0x88
  40b61e:	2301      	movs	r3, #1
  40b620:	6013      	str	r3, [r2, #0]
  40b622:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40b624:	2b00      	cmp	r3, #0
  40b626:	f000 80cb 	beq.w	40b7c0 <_dtoa_r+0x1f8>
  40b62a:	489a      	ldr	r0, [pc, #616]	; (40b894 <_dtoa_r+0x2cc>)
  40b62c:	6018      	str	r0, [r3, #0]
  40b62e:	3801      	subs	r0, #1
  40b630:	b017      	add	sp, #92	; 0x5c
  40b632:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40b636:	9a22      	ldr	r2, [sp, #136]	; 0x88
  40b638:	f242 730f 	movw	r3, #9999	; 0x270f
  40b63c:	6013      	str	r3, [r2, #0]
  40b63e:	9b02      	ldr	r3, [sp, #8]
  40b640:	2b00      	cmp	r3, #0
  40b642:	f000 80a6 	beq.w	40b792 <_dtoa_r+0x1ca>
  40b646:	4894      	ldr	r0, [pc, #592]	; (40b898 <_dtoa_r+0x2d0>)
  40b648:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40b64a:	2b00      	cmp	r3, #0
  40b64c:	d0f0      	beq.n	40b630 <_dtoa_r+0x68>
  40b64e:	78c3      	ldrb	r3, [r0, #3]
  40b650:	2b00      	cmp	r3, #0
  40b652:	f000 80b7 	beq.w	40b7c4 <_dtoa_r+0x1fc>
  40b656:	f100 0308 	add.w	r3, r0, #8
  40b65a:	9a24      	ldr	r2, [sp, #144]	; 0x90
  40b65c:	6013      	str	r3, [r2, #0]
  40b65e:	b017      	add	sp, #92	; 0x5c
  40b660:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40b664:	9a03      	ldr	r2, [sp, #12]
  40b666:	2301      	movs	r3, #1
  40b668:	f022 4900 	bic.w	r9, r2, #2147483648	; 0x80000000
  40b66c:	602b      	str	r3, [r5, #0]
  40b66e:	f8cd 900c 	str.w	r9, [sp, #12]
  40b672:	e7c2      	b.n	40b5fa <_dtoa_r+0x32>
  40b674:	aa15      	add	r2, sp, #84	; 0x54
  40b676:	ab14      	add	r3, sp, #80	; 0x50
  40b678:	e88d 000c 	stmia.w	sp, {r2, r3}
  40b67c:	4620      	mov	r0, r4
  40b67e:	4632      	mov	r2, r6
  40b680:	463b      	mov	r3, r7
  40b682:	f001 fa37 	bl	40caf4 <__d2b>
  40b686:	ea5f 5519 	movs.w	r5, r9, lsr #20
  40b68a:	4683      	mov	fp, r0
  40b68c:	f040 808a 	bne.w	40b7a4 <_dtoa_r+0x1dc>
  40b690:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
  40b694:	9d15      	ldr	r5, [sp, #84]	; 0x54
  40b696:	f46f 6382 	mvn.w	r3, #1040	; 0x410
  40b69a:	4445      	add	r5, r8
  40b69c:	429d      	cmp	r5, r3
  40b69e:	f2c0 8297 	blt.w	40bbd0 <_dtoa_r+0x608>
  40b6a2:	4a7e      	ldr	r2, [pc, #504]	; (40b89c <_dtoa_r+0x2d4>)
  40b6a4:	1b52      	subs	r2, r2, r5
  40b6a6:	fa09 f902 	lsl.w	r9, r9, r2
  40b6aa:	9a02      	ldr	r2, [sp, #8]
  40b6ac:	f205 4312 	addw	r3, r5, #1042	; 0x412
  40b6b0:	fa22 f003 	lsr.w	r0, r2, r3
  40b6b4:	ea49 0000 	orr.w	r0, r9, r0
  40b6b8:	f001 fd50 	bl	40d15c <__aeabi_ui2d>
  40b6bc:	2301      	movs	r3, #1
  40b6be:	3d01      	subs	r5, #1
  40b6c0:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
  40b6c4:	930d      	str	r3, [sp, #52]	; 0x34
  40b6c6:	2200      	movs	r2, #0
  40b6c8:	4b75      	ldr	r3, [pc, #468]	; (40b8a0 <_dtoa_r+0x2d8>)
  40b6ca:	f001 fc09 	bl	40cee0 <__aeabi_dsub>
  40b6ce:	a36a      	add	r3, pc, #424	; (adr r3, 40b878 <_dtoa_r+0x2b0>)
  40b6d0:	e9d3 2300 	ldrd	r2, r3, [r3]
  40b6d4:	f001 fdb8 	bl	40d248 <__aeabi_dmul>
  40b6d8:	a369      	add	r3, pc, #420	; (adr r3, 40b880 <_dtoa_r+0x2b8>)
  40b6da:	e9d3 2300 	ldrd	r2, r3, [r3]
  40b6de:	f001 fc01 	bl	40cee4 <__adddf3>
  40b6e2:	4606      	mov	r6, r0
  40b6e4:	4628      	mov	r0, r5
  40b6e6:	460f      	mov	r7, r1
  40b6e8:	f001 fd48 	bl	40d17c <__aeabi_i2d>
  40b6ec:	a366      	add	r3, pc, #408	; (adr r3, 40b888 <_dtoa_r+0x2c0>)
  40b6ee:	e9d3 2300 	ldrd	r2, r3, [r3]
  40b6f2:	f001 fda9 	bl	40d248 <__aeabi_dmul>
  40b6f6:	4602      	mov	r2, r0
  40b6f8:	460b      	mov	r3, r1
  40b6fa:	4630      	mov	r0, r6
  40b6fc:	4639      	mov	r1, r7
  40b6fe:	f001 fbf1 	bl	40cee4 <__adddf3>
  40b702:	4606      	mov	r6, r0
  40b704:	460f      	mov	r7, r1
  40b706:	f001 ffb1 	bl	40d66c <__aeabi_d2iz>
  40b70a:	4639      	mov	r1, r7
  40b70c:	9004      	str	r0, [sp, #16]
  40b70e:	2200      	movs	r2, #0
  40b710:	4630      	mov	r0, r6
  40b712:	2300      	movs	r3, #0
  40b714:	f7fa fdc0 	bl	406298 <__aeabi_dcmplt>
  40b718:	2800      	cmp	r0, #0
  40b71a:	f040 81a6 	bne.w	40ba6a <_dtoa_r+0x4a2>
  40b71e:	9b04      	ldr	r3, [sp, #16]
  40b720:	2b16      	cmp	r3, #22
  40b722:	f200 819f 	bhi.w	40ba64 <_dtoa_r+0x49c>
  40b726:	9a04      	ldr	r2, [sp, #16]
  40b728:	4b5e      	ldr	r3, [pc, #376]	; (40b8a4 <_dtoa_r+0x2dc>)
  40b72a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  40b72e:	e9d3 0100 	ldrd	r0, r1, [r3]
  40b732:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  40b736:	f7fa fdcd 	bl	4062d4 <__aeabi_dcmpgt>
  40b73a:	2800      	cmp	r0, #0
  40b73c:	f000 824e 	beq.w	40bbdc <_dtoa_r+0x614>
  40b740:	9b04      	ldr	r3, [sp, #16]
  40b742:	3b01      	subs	r3, #1
  40b744:	9304      	str	r3, [sp, #16]
  40b746:	2300      	movs	r3, #0
  40b748:	930b      	str	r3, [sp, #44]	; 0x2c
  40b74a:	ebc5 0508 	rsb	r5, r5, r8
  40b74e:	f1b5 0a01 	subs.w	sl, r5, #1
  40b752:	f100 81a1 	bmi.w	40ba98 <_dtoa_r+0x4d0>
  40b756:	2300      	movs	r3, #0
  40b758:	9305      	str	r3, [sp, #20]
  40b75a:	9b04      	ldr	r3, [sp, #16]
  40b75c:	2b00      	cmp	r3, #0
  40b75e:	f2c0 8192 	blt.w	40ba86 <_dtoa_r+0x4be>
  40b762:	449a      	add	sl, r3
  40b764:	930a      	str	r3, [sp, #40]	; 0x28
  40b766:	2300      	movs	r3, #0
  40b768:	9308      	str	r3, [sp, #32]
  40b76a:	9b20      	ldr	r3, [sp, #128]	; 0x80
  40b76c:	2b09      	cmp	r3, #9
  40b76e:	d82b      	bhi.n	40b7c8 <_dtoa_r+0x200>
  40b770:	2b05      	cmp	r3, #5
  40b772:	f340 8670 	ble.w	40c456 <_dtoa_r+0xe8e>
  40b776:	3b04      	subs	r3, #4
  40b778:	9320      	str	r3, [sp, #128]	; 0x80
  40b77a:	2500      	movs	r5, #0
  40b77c:	9b20      	ldr	r3, [sp, #128]	; 0x80
  40b77e:	3b02      	subs	r3, #2
  40b780:	2b03      	cmp	r3, #3
  40b782:	f200 864e 	bhi.w	40c422 <_dtoa_r+0xe5a>
  40b786:	e8df f013 	tbh	[pc, r3, lsl #1]
  40b78a:	03cc      	.short	0x03cc
  40b78c:	02b203be 	.word	0x02b203be
  40b790:	0663      	.short	0x0663
  40b792:	4b41      	ldr	r3, [pc, #260]	; (40b898 <_dtoa_r+0x2d0>)
  40b794:	4a44      	ldr	r2, [pc, #272]	; (40b8a8 <_dtoa_r+0x2e0>)
  40b796:	f3c9 0013 	ubfx	r0, r9, #0, #20
  40b79a:	2800      	cmp	r0, #0
  40b79c:	bf14      	ite	ne
  40b79e:	4618      	movne	r0, r3
  40b7a0:	4610      	moveq	r0, r2
  40b7a2:	e751      	b.n	40b648 <_dtoa_r+0x80>
  40b7a4:	f3c7 0313 	ubfx	r3, r7, #0, #20
  40b7a8:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
  40b7ac:	f8cd 8034 	str.w	r8, [sp, #52]	; 0x34
  40b7b0:	4630      	mov	r0, r6
  40b7b2:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
  40b7b6:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
  40b7ba:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
  40b7be:	e782      	b.n	40b6c6 <_dtoa_r+0xfe>
  40b7c0:	483a      	ldr	r0, [pc, #232]	; (40b8ac <_dtoa_r+0x2e4>)
  40b7c2:	e735      	b.n	40b630 <_dtoa_r+0x68>
  40b7c4:	1cc3      	adds	r3, r0, #3
  40b7c6:	e748      	b.n	40b65a <_dtoa_r+0x92>
  40b7c8:	2100      	movs	r1, #0
  40b7ca:	6461      	str	r1, [r4, #68]	; 0x44
  40b7cc:	4620      	mov	r0, r4
  40b7ce:	9120      	str	r1, [sp, #128]	; 0x80
  40b7d0:	f000 fef8 	bl	40c5c4 <_Balloc>
  40b7d4:	f04f 33ff 	mov.w	r3, #4294967295
  40b7d8:	9306      	str	r3, [sp, #24]
  40b7da:	9a20      	ldr	r2, [sp, #128]	; 0x80
  40b7dc:	930c      	str	r3, [sp, #48]	; 0x30
  40b7de:	2301      	movs	r3, #1
  40b7e0:	9007      	str	r0, [sp, #28]
  40b7e2:	9221      	str	r2, [sp, #132]	; 0x84
  40b7e4:	6420      	str	r0, [r4, #64]	; 0x40
  40b7e6:	9309      	str	r3, [sp, #36]	; 0x24
  40b7e8:	9b15      	ldr	r3, [sp, #84]	; 0x54
  40b7ea:	2b00      	cmp	r3, #0
  40b7ec:	f2c0 80d2 	blt.w	40b994 <_dtoa_r+0x3cc>
  40b7f0:	9a04      	ldr	r2, [sp, #16]
  40b7f2:	2a0e      	cmp	r2, #14
  40b7f4:	f300 80ce 	bgt.w	40b994 <_dtoa_r+0x3cc>
  40b7f8:	4b2a      	ldr	r3, [pc, #168]	; (40b8a4 <_dtoa_r+0x2dc>)
  40b7fa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  40b7fe:	e9d3 8900 	ldrd	r8, r9, [r3]
  40b802:	9b21      	ldr	r3, [sp, #132]	; 0x84
  40b804:	2b00      	cmp	r3, #0
  40b806:	f2c0 838f 	blt.w	40bf28 <_dtoa_r+0x960>
  40b80a:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
  40b80e:	4642      	mov	r2, r8
  40b810:	464b      	mov	r3, r9
  40b812:	4630      	mov	r0, r6
  40b814:	4639      	mov	r1, r7
  40b816:	f001 fe41 	bl	40d49c <__aeabi_ddiv>
  40b81a:	f001 ff27 	bl	40d66c <__aeabi_d2iz>
  40b81e:	4682      	mov	sl, r0
  40b820:	f001 fcac 	bl	40d17c <__aeabi_i2d>
  40b824:	4642      	mov	r2, r8
  40b826:	464b      	mov	r3, r9
  40b828:	f001 fd0e 	bl	40d248 <__aeabi_dmul>
  40b82c:	460b      	mov	r3, r1
  40b82e:	4602      	mov	r2, r0
  40b830:	4639      	mov	r1, r7
  40b832:	4630      	mov	r0, r6
  40b834:	f001 fb54 	bl	40cee0 <__aeabi_dsub>
  40b838:	9d07      	ldr	r5, [sp, #28]
  40b83a:	f10a 0330 	add.w	r3, sl, #48	; 0x30
  40b83e:	702b      	strb	r3, [r5, #0]
  40b840:	9b06      	ldr	r3, [sp, #24]
  40b842:	2b01      	cmp	r3, #1
  40b844:	4606      	mov	r6, r0
  40b846:	460f      	mov	r7, r1
  40b848:	f105 0501 	add.w	r5, r5, #1
  40b84c:	d062      	beq.n	40b914 <_dtoa_r+0x34c>
  40b84e:	2200      	movs	r2, #0
  40b850:	4b17      	ldr	r3, [pc, #92]	; (40b8b0 <_dtoa_r+0x2e8>)
  40b852:	f001 fcf9 	bl	40d248 <__aeabi_dmul>
  40b856:	2200      	movs	r2, #0
  40b858:	2300      	movs	r3, #0
  40b85a:	4606      	mov	r6, r0
  40b85c:	460f      	mov	r7, r1
  40b85e:	f7fa fd11 	bl	406284 <__aeabi_dcmpeq>
  40b862:	2800      	cmp	r0, #0
  40b864:	f040 8083 	bne.w	40b96e <_dtoa_r+0x3a6>
  40b868:	f8cd b008 	str.w	fp, [sp, #8]
  40b86c:	9405      	str	r4, [sp, #20]
  40b86e:	f8dd b01c 	ldr.w	fp, [sp, #28]
  40b872:	9c06      	ldr	r4, [sp, #24]
  40b874:	e029      	b.n	40b8ca <_dtoa_r+0x302>
  40b876:	bf00      	nop
  40b878:	636f4361 	.word	0x636f4361
  40b87c:	3fd287a7 	.word	0x3fd287a7
  40b880:	8b60c8b3 	.word	0x8b60c8b3
  40b884:	3fc68a28 	.word	0x3fc68a28
  40b888:	509f79fb 	.word	0x509f79fb
  40b88c:	3fd34413 	.word	0x3fd34413
  40b890:	7ff00000 	.word	0x7ff00000
  40b894:	0040fcdd 	.word	0x0040fcdd
  40b898:	0040ff14 	.word	0x0040ff14
  40b89c:	fffffc0e 	.word	0xfffffc0e
  40b8a0:	3ff80000 	.word	0x3ff80000
  40b8a4:	0040ff28 	.word	0x0040ff28
  40b8a8:	0040ff08 	.word	0x0040ff08
  40b8ac:	0040fcdc 	.word	0x0040fcdc
  40b8b0:	40240000 	.word	0x40240000
  40b8b4:	f001 fcc8 	bl	40d248 <__aeabi_dmul>
  40b8b8:	2200      	movs	r2, #0
  40b8ba:	2300      	movs	r3, #0
  40b8bc:	4606      	mov	r6, r0
  40b8be:	460f      	mov	r7, r1
  40b8c0:	f7fa fce0 	bl	406284 <__aeabi_dcmpeq>
  40b8c4:	2800      	cmp	r0, #0
  40b8c6:	f040 83de 	bne.w	40c086 <_dtoa_r+0xabe>
  40b8ca:	4642      	mov	r2, r8
  40b8cc:	464b      	mov	r3, r9
  40b8ce:	4630      	mov	r0, r6
  40b8d0:	4639      	mov	r1, r7
  40b8d2:	f001 fde3 	bl	40d49c <__aeabi_ddiv>
  40b8d6:	f001 fec9 	bl	40d66c <__aeabi_d2iz>
  40b8da:	4682      	mov	sl, r0
  40b8dc:	f001 fc4e 	bl	40d17c <__aeabi_i2d>
  40b8e0:	4642      	mov	r2, r8
  40b8e2:	464b      	mov	r3, r9
  40b8e4:	f001 fcb0 	bl	40d248 <__aeabi_dmul>
  40b8e8:	4602      	mov	r2, r0
  40b8ea:	460b      	mov	r3, r1
  40b8ec:	4630      	mov	r0, r6
  40b8ee:	4639      	mov	r1, r7
  40b8f0:	f001 faf6 	bl	40cee0 <__aeabi_dsub>
  40b8f4:	f10a 0e30 	add.w	lr, sl, #48	; 0x30
  40b8f8:	f805 eb01 	strb.w	lr, [r5], #1
  40b8fc:	ebcb 0e05 	rsb	lr, fp, r5
  40b900:	4574      	cmp	r4, lr
  40b902:	4606      	mov	r6, r0
  40b904:	460f      	mov	r7, r1
  40b906:	f04f 0200 	mov.w	r2, #0
  40b90a:	4bb5      	ldr	r3, [pc, #724]	; (40bbe0 <_dtoa_r+0x618>)
  40b90c:	d1d2      	bne.n	40b8b4 <_dtoa_r+0x2ec>
  40b90e:	f8dd b008 	ldr.w	fp, [sp, #8]
  40b912:	9c05      	ldr	r4, [sp, #20]
  40b914:	4632      	mov	r2, r6
  40b916:	463b      	mov	r3, r7
  40b918:	4630      	mov	r0, r6
  40b91a:	4639      	mov	r1, r7
  40b91c:	f001 fae2 	bl	40cee4 <__adddf3>
  40b920:	4606      	mov	r6, r0
  40b922:	460f      	mov	r7, r1
  40b924:	4640      	mov	r0, r8
  40b926:	4649      	mov	r1, r9
  40b928:	4632      	mov	r2, r6
  40b92a:	463b      	mov	r3, r7
  40b92c:	f7fa fcb4 	bl	406298 <__aeabi_dcmplt>
  40b930:	b948      	cbnz	r0, 40b946 <_dtoa_r+0x37e>
  40b932:	4640      	mov	r0, r8
  40b934:	4649      	mov	r1, r9
  40b936:	4632      	mov	r2, r6
  40b938:	463b      	mov	r3, r7
  40b93a:	f7fa fca3 	bl	406284 <__aeabi_dcmpeq>
  40b93e:	b1b0      	cbz	r0, 40b96e <_dtoa_r+0x3a6>
  40b940:	f01a 0f01 	tst.w	sl, #1
  40b944:	d013      	beq.n	40b96e <_dtoa_r+0x3a6>
  40b946:	f815 8c01 	ldrb.w	r8, [r5, #-1]
  40b94a:	9907      	ldr	r1, [sp, #28]
  40b94c:	1e6b      	subs	r3, r5, #1
  40b94e:	e004      	b.n	40b95a <_dtoa_r+0x392>
  40b950:	428b      	cmp	r3, r1
  40b952:	f000 8440 	beq.w	40c1d6 <_dtoa_r+0xc0e>
  40b956:	f813 8d01 	ldrb.w	r8, [r3, #-1]!
  40b95a:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
  40b95e:	f103 0501 	add.w	r5, r3, #1
  40b962:	461a      	mov	r2, r3
  40b964:	d0f4      	beq.n	40b950 <_dtoa_r+0x388>
  40b966:	f108 0301 	add.w	r3, r8, #1
  40b96a:	b2db      	uxtb	r3, r3
  40b96c:	7013      	strb	r3, [r2, #0]
  40b96e:	4620      	mov	r0, r4
  40b970:	4659      	mov	r1, fp
  40b972:	f000 fe4d 	bl	40c610 <_Bfree>
  40b976:	2200      	movs	r2, #0
  40b978:	9b04      	ldr	r3, [sp, #16]
  40b97a:	702a      	strb	r2, [r5, #0]
  40b97c:	9a22      	ldr	r2, [sp, #136]	; 0x88
  40b97e:	3301      	adds	r3, #1
  40b980:	6013      	str	r3, [r2, #0]
  40b982:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40b984:	2b00      	cmp	r3, #0
  40b986:	f000 8345 	beq.w	40c014 <_dtoa_r+0xa4c>
  40b98a:	9807      	ldr	r0, [sp, #28]
  40b98c:	601d      	str	r5, [r3, #0]
  40b98e:	b017      	add	sp, #92	; 0x5c
  40b990:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40b994:	9a09      	ldr	r2, [sp, #36]	; 0x24
  40b996:	2a00      	cmp	r2, #0
  40b998:	f000 8084 	beq.w	40baa4 <_dtoa_r+0x4dc>
  40b99c:	9a20      	ldr	r2, [sp, #128]	; 0x80
  40b99e:	2a01      	cmp	r2, #1
  40b9a0:	f340 8304 	ble.w	40bfac <_dtoa_r+0x9e4>
  40b9a4:	9b06      	ldr	r3, [sp, #24]
  40b9a6:	1e5f      	subs	r7, r3, #1
  40b9a8:	9b08      	ldr	r3, [sp, #32]
  40b9aa:	42bb      	cmp	r3, r7
  40b9ac:	f2c0 83a9 	blt.w	40c102 <_dtoa_r+0xb3a>
  40b9b0:	1bdf      	subs	r7, r3, r7
  40b9b2:	9b06      	ldr	r3, [sp, #24]
  40b9b4:	2b00      	cmp	r3, #0
  40b9b6:	f2c0 849c 	blt.w	40c2f2 <_dtoa_r+0xd2a>
  40b9ba:	9d05      	ldr	r5, [sp, #20]
  40b9bc:	9b06      	ldr	r3, [sp, #24]
  40b9be:	9a05      	ldr	r2, [sp, #20]
  40b9c0:	4620      	mov	r0, r4
  40b9c2:	441a      	add	r2, r3
  40b9c4:	2101      	movs	r1, #1
  40b9c6:	9205      	str	r2, [sp, #20]
  40b9c8:	449a      	add	sl, r3
  40b9ca:	f000 febb 	bl	40c744 <__i2b>
  40b9ce:	4606      	mov	r6, r0
  40b9d0:	b165      	cbz	r5, 40b9ec <_dtoa_r+0x424>
  40b9d2:	f1ba 0f00 	cmp.w	sl, #0
  40b9d6:	dd09      	ble.n	40b9ec <_dtoa_r+0x424>
  40b9d8:	45aa      	cmp	sl, r5
  40b9da:	9a05      	ldr	r2, [sp, #20]
  40b9dc:	4653      	mov	r3, sl
  40b9de:	bfa8      	it	ge
  40b9e0:	462b      	movge	r3, r5
  40b9e2:	1ad2      	subs	r2, r2, r3
  40b9e4:	9205      	str	r2, [sp, #20]
  40b9e6:	1aed      	subs	r5, r5, r3
  40b9e8:	ebc3 0a0a 	rsb	sl, r3, sl
  40b9ec:	9b08      	ldr	r3, [sp, #32]
  40b9ee:	2b00      	cmp	r3, #0
  40b9f0:	dd1a      	ble.n	40ba28 <_dtoa_r+0x460>
  40b9f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40b9f4:	2b00      	cmp	r3, #0
  40b9f6:	f000 837d 	beq.w	40c0f4 <_dtoa_r+0xb2c>
  40b9fa:	2f00      	cmp	r7, #0
  40b9fc:	dd10      	ble.n	40ba20 <_dtoa_r+0x458>
  40b9fe:	4631      	mov	r1, r6
  40ba00:	463a      	mov	r2, r7
  40ba02:	4620      	mov	r0, r4
  40ba04:	f000 ff42 	bl	40c88c <__pow5mult>
  40ba08:	4606      	mov	r6, r0
  40ba0a:	465a      	mov	r2, fp
  40ba0c:	4631      	mov	r1, r6
  40ba0e:	4620      	mov	r0, r4
  40ba10:	f000 fea2 	bl	40c758 <__multiply>
  40ba14:	4659      	mov	r1, fp
  40ba16:	4680      	mov	r8, r0
  40ba18:	4620      	mov	r0, r4
  40ba1a:	f000 fdf9 	bl	40c610 <_Bfree>
  40ba1e:	46c3      	mov	fp, r8
  40ba20:	9b08      	ldr	r3, [sp, #32]
  40ba22:	1bda      	subs	r2, r3, r7
  40ba24:	f040 82a2 	bne.w	40bf6c <_dtoa_r+0x9a4>
  40ba28:	4620      	mov	r0, r4
  40ba2a:	2101      	movs	r1, #1
  40ba2c:	f000 fe8a 	bl	40c744 <__i2b>
  40ba30:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40ba32:	2b00      	cmp	r3, #0
  40ba34:	4680      	mov	r8, r0
  40ba36:	dd39      	ble.n	40baac <_dtoa_r+0x4e4>
  40ba38:	4601      	mov	r1, r0
  40ba3a:	461a      	mov	r2, r3
  40ba3c:	4620      	mov	r0, r4
  40ba3e:	f000 ff25 	bl	40c88c <__pow5mult>
  40ba42:	9b20      	ldr	r3, [sp, #128]	; 0x80
  40ba44:	2b01      	cmp	r3, #1
  40ba46:	4680      	mov	r8, r0
  40ba48:	f340 8296 	ble.w	40bf78 <_dtoa_r+0x9b0>
  40ba4c:	f04f 0900 	mov.w	r9, #0
  40ba50:	f8d8 3010 	ldr.w	r3, [r8, #16]
  40ba54:	eb08 0383 	add.w	r3, r8, r3, lsl #2
  40ba58:	6918      	ldr	r0, [r3, #16]
  40ba5a:	f000 fe25 	bl	40c6a8 <__hi0bits>
  40ba5e:	f1c0 0020 	rsb	r0, r0, #32
  40ba62:	e02d      	b.n	40bac0 <_dtoa_r+0x4f8>
  40ba64:	2301      	movs	r3, #1
  40ba66:	930b      	str	r3, [sp, #44]	; 0x2c
  40ba68:	e66f      	b.n	40b74a <_dtoa_r+0x182>
  40ba6a:	9804      	ldr	r0, [sp, #16]
  40ba6c:	f001 fb86 	bl	40d17c <__aeabi_i2d>
  40ba70:	4632      	mov	r2, r6
  40ba72:	463b      	mov	r3, r7
  40ba74:	f7fa fc06 	bl	406284 <__aeabi_dcmpeq>
  40ba78:	2800      	cmp	r0, #0
  40ba7a:	f47f ae50 	bne.w	40b71e <_dtoa_r+0x156>
  40ba7e:	9b04      	ldr	r3, [sp, #16]
  40ba80:	3b01      	subs	r3, #1
  40ba82:	9304      	str	r3, [sp, #16]
  40ba84:	e64b      	b.n	40b71e <_dtoa_r+0x156>
  40ba86:	9a05      	ldr	r2, [sp, #20]
  40ba88:	9b04      	ldr	r3, [sp, #16]
  40ba8a:	1ad2      	subs	r2, r2, r3
  40ba8c:	425b      	negs	r3, r3
  40ba8e:	9308      	str	r3, [sp, #32]
  40ba90:	2300      	movs	r3, #0
  40ba92:	9205      	str	r2, [sp, #20]
  40ba94:	930a      	str	r3, [sp, #40]	; 0x28
  40ba96:	e668      	b.n	40b76a <_dtoa_r+0x1a2>
  40ba98:	f1ca 0300 	rsb	r3, sl, #0
  40ba9c:	9305      	str	r3, [sp, #20]
  40ba9e:	f04f 0a00 	mov.w	sl, #0
  40baa2:	e65a      	b.n	40b75a <_dtoa_r+0x192>
  40baa4:	9f08      	ldr	r7, [sp, #32]
  40baa6:	9d05      	ldr	r5, [sp, #20]
  40baa8:	9e09      	ldr	r6, [sp, #36]	; 0x24
  40baaa:	e791      	b.n	40b9d0 <_dtoa_r+0x408>
  40baac:	9b20      	ldr	r3, [sp, #128]	; 0x80
  40baae:	2b01      	cmp	r3, #1
  40bab0:	f340 82b3 	ble.w	40c01a <_dtoa_r+0xa52>
  40bab4:	f04f 0900 	mov.w	r9, #0
  40bab8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40baba:	2b00      	cmp	r3, #0
  40babc:	d1c8      	bne.n	40ba50 <_dtoa_r+0x488>
  40babe:	2001      	movs	r0, #1
  40bac0:	4450      	add	r0, sl
  40bac2:	f010 001f 	ands.w	r0, r0, #31
  40bac6:	f000 8081 	beq.w	40bbcc <_dtoa_r+0x604>
  40baca:	f1c0 0320 	rsb	r3, r0, #32
  40bace:	2b04      	cmp	r3, #4
  40bad0:	f340 84b8 	ble.w	40c444 <_dtoa_r+0xe7c>
  40bad4:	f1c0 001c 	rsb	r0, r0, #28
  40bad8:	9b05      	ldr	r3, [sp, #20]
  40bada:	4403      	add	r3, r0
  40badc:	9305      	str	r3, [sp, #20]
  40bade:	4405      	add	r5, r0
  40bae0:	4482      	add	sl, r0
  40bae2:	9b05      	ldr	r3, [sp, #20]
  40bae4:	2b00      	cmp	r3, #0
  40bae6:	dd05      	ble.n	40baf4 <_dtoa_r+0x52c>
  40bae8:	4659      	mov	r1, fp
  40baea:	461a      	mov	r2, r3
  40baec:	4620      	mov	r0, r4
  40baee:	f000 ff1d 	bl	40c92c <__lshift>
  40baf2:	4683      	mov	fp, r0
  40baf4:	f1ba 0f00 	cmp.w	sl, #0
  40baf8:	dd05      	ble.n	40bb06 <_dtoa_r+0x53e>
  40bafa:	4641      	mov	r1, r8
  40bafc:	4652      	mov	r2, sl
  40bafe:	4620      	mov	r0, r4
  40bb00:	f000 ff14 	bl	40c92c <__lshift>
  40bb04:	4680      	mov	r8, r0
  40bb06:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  40bb08:	2b00      	cmp	r3, #0
  40bb0a:	f040 8268 	bne.w	40bfde <_dtoa_r+0xa16>
  40bb0e:	9b06      	ldr	r3, [sp, #24]
  40bb10:	2b00      	cmp	r3, #0
  40bb12:	f340 8295 	ble.w	40c040 <_dtoa_r+0xa78>
  40bb16:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40bb18:	2b00      	cmp	r3, #0
  40bb1a:	d171      	bne.n	40bc00 <_dtoa_r+0x638>
  40bb1c:	f8dd 901c 	ldr.w	r9, [sp, #28]
  40bb20:	9f06      	ldr	r7, [sp, #24]
  40bb22:	464d      	mov	r5, r9
  40bb24:	e002      	b.n	40bb2c <_dtoa_r+0x564>
  40bb26:	f000 fd7d 	bl	40c624 <__multadd>
  40bb2a:	4683      	mov	fp, r0
  40bb2c:	4641      	mov	r1, r8
  40bb2e:	4658      	mov	r0, fp
  40bb30:	f7ff fcb4 	bl	40b49c <quorem>
  40bb34:	f100 0c30 	add.w	ip, r0, #48	; 0x30
  40bb38:	f805 cb01 	strb.w	ip, [r5], #1
  40bb3c:	ebc9 0305 	rsb	r3, r9, r5
  40bb40:	42bb      	cmp	r3, r7
  40bb42:	4620      	mov	r0, r4
  40bb44:	4659      	mov	r1, fp
  40bb46:	f04f 020a 	mov.w	r2, #10
  40bb4a:	f04f 0300 	mov.w	r3, #0
  40bb4e:	dbea      	blt.n	40bb26 <_dtoa_r+0x55e>
  40bb50:	9b07      	ldr	r3, [sp, #28]
  40bb52:	9a06      	ldr	r2, [sp, #24]
  40bb54:	2a01      	cmp	r2, #1
  40bb56:	bfac      	ite	ge
  40bb58:	189b      	addge	r3, r3, r2
  40bb5a:	3301      	addlt	r3, #1
  40bb5c:	461d      	mov	r5, r3
  40bb5e:	f04f 0a00 	mov.w	sl, #0
  40bb62:	4659      	mov	r1, fp
  40bb64:	2201      	movs	r2, #1
  40bb66:	4620      	mov	r0, r4
  40bb68:	f8cd c008 	str.w	ip, [sp, #8]
  40bb6c:	f000 fede 	bl	40c92c <__lshift>
  40bb70:	4641      	mov	r1, r8
  40bb72:	4683      	mov	fp, r0
  40bb74:	f000 ff30 	bl	40c9d8 <__mcmp>
  40bb78:	2800      	cmp	r0, #0
  40bb7a:	f8dd c008 	ldr.w	ip, [sp, #8]
  40bb7e:	f340 82f6 	ble.w	40c16e <_dtoa_r+0xba6>
  40bb82:	f815 2c01 	ldrb.w	r2, [r5, #-1]
  40bb86:	9907      	ldr	r1, [sp, #28]
  40bb88:	1e6b      	subs	r3, r5, #1
  40bb8a:	e004      	b.n	40bb96 <_dtoa_r+0x5ce>
  40bb8c:	428b      	cmp	r3, r1
  40bb8e:	f000 8273 	beq.w	40c078 <_dtoa_r+0xab0>
  40bb92:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
  40bb96:	2a39      	cmp	r2, #57	; 0x39
  40bb98:	f103 0501 	add.w	r5, r3, #1
  40bb9c:	d0f6      	beq.n	40bb8c <_dtoa_r+0x5c4>
  40bb9e:	3201      	adds	r2, #1
  40bba0:	701a      	strb	r2, [r3, #0]
  40bba2:	4641      	mov	r1, r8
  40bba4:	4620      	mov	r0, r4
  40bba6:	f000 fd33 	bl	40c610 <_Bfree>
  40bbaa:	2e00      	cmp	r6, #0
  40bbac:	f43f aedf 	beq.w	40b96e <_dtoa_r+0x3a6>
  40bbb0:	f1ba 0f00 	cmp.w	sl, #0
  40bbb4:	d005      	beq.n	40bbc2 <_dtoa_r+0x5fa>
  40bbb6:	45b2      	cmp	sl, r6
  40bbb8:	d003      	beq.n	40bbc2 <_dtoa_r+0x5fa>
  40bbba:	4651      	mov	r1, sl
  40bbbc:	4620      	mov	r0, r4
  40bbbe:	f000 fd27 	bl	40c610 <_Bfree>
  40bbc2:	4631      	mov	r1, r6
  40bbc4:	4620      	mov	r0, r4
  40bbc6:	f000 fd23 	bl	40c610 <_Bfree>
  40bbca:	e6d0      	b.n	40b96e <_dtoa_r+0x3a6>
  40bbcc:	201c      	movs	r0, #28
  40bbce:	e783      	b.n	40bad8 <_dtoa_r+0x510>
  40bbd0:	4b04      	ldr	r3, [pc, #16]	; (40bbe4 <_dtoa_r+0x61c>)
  40bbd2:	9a02      	ldr	r2, [sp, #8]
  40bbd4:	1b5b      	subs	r3, r3, r5
  40bbd6:	fa02 f003 	lsl.w	r0, r2, r3
  40bbda:	e56d      	b.n	40b6b8 <_dtoa_r+0xf0>
  40bbdc:	900b      	str	r0, [sp, #44]	; 0x2c
  40bbde:	e5b4      	b.n	40b74a <_dtoa_r+0x182>
  40bbe0:	40240000 	.word	0x40240000
  40bbe4:	fffffbee 	.word	0xfffffbee
  40bbe8:	4631      	mov	r1, r6
  40bbea:	2300      	movs	r3, #0
  40bbec:	4620      	mov	r0, r4
  40bbee:	220a      	movs	r2, #10
  40bbf0:	f000 fd18 	bl	40c624 <__multadd>
  40bbf4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  40bbf6:	2b00      	cmp	r3, #0
  40bbf8:	4606      	mov	r6, r0
  40bbfa:	f340 840c 	ble.w	40c416 <_dtoa_r+0xe4e>
  40bbfe:	9306      	str	r3, [sp, #24]
  40bc00:	2d00      	cmp	r5, #0
  40bc02:	dd05      	ble.n	40bc10 <_dtoa_r+0x648>
  40bc04:	4631      	mov	r1, r6
  40bc06:	462a      	mov	r2, r5
  40bc08:	4620      	mov	r0, r4
  40bc0a:	f000 fe8f 	bl	40c92c <__lshift>
  40bc0e:	4606      	mov	r6, r0
  40bc10:	f1b9 0f00 	cmp.w	r9, #0
  40bc14:	f040 82e9 	bne.w	40c1ea <_dtoa_r+0xc22>
  40bc18:	46b1      	mov	r9, r6
  40bc1a:	9b06      	ldr	r3, [sp, #24]
  40bc1c:	9a07      	ldr	r2, [sp, #28]
  40bc1e:	3b01      	subs	r3, #1
  40bc20:	18d3      	adds	r3, r2, r3
  40bc22:	9308      	str	r3, [sp, #32]
  40bc24:	9b02      	ldr	r3, [sp, #8]
  40bc26:	f003 0301 	and.w	r3, r3, #1
  40bc2a:	9309      	str	r3, [sp, #36]	; 0x24
  40bc2c:	4617      	mov	r7, r2
  40bc2e:	4641      	mov	r1, r8
  40bc30:	4658      	mov	r0, fp
  40bc32:	f7ff fc33 	bl	40b49c <quorem>
  40bc36:	4631      	mov	r1, r6
  40bc38:	4605      	mov	r5, r0
  40bc3a:	4658      	mov	r0, fp
  40bc3c:	f000 fecc 	bl	40c9d8 <__mcmp>
  40bc40:	464a      	mov	r2, r9
  40bc42:	4682      	mov	sl, r0
  40bc44:	4641      	mov	r1, r8
  40bc46:	4620      	mov	r0, r4
  40bc48:	f000 feea 	bl	40ca20 <__mdiff>
  40bc4c:	68c2      	ldr	r2, [r0, #12]
  40bc4e:	4603      	mov	r3, r0
  40bc50:	f105 0c30 	add.w	ip, r5, #48	; 0x30
  40bc54:	2a00      	cmp	r2, #0
  40bc56:	f040 81b8 	bne.w	40bfca <_dtoa_r+0xa02>
  40bc5a:	4619      	mov	r1, r3
  40bc5c:	4658      	mov	r0, fp
  40bc5e:	f8cd c018 	str.w	ip, [sp, #24]
  40bc62:	9305      	str	r3, [sp, #20]
  40bc64:	f000 feb8 	bl	40c9d8 <__mcmp>
  40bc68:	9b05      	ldr	r3, [sp, #20]
  40bc6a:	9002      	str	r0, [sp, #8]
  40bc6c:	4619      	mov	r1, r3
  40bc6e:	4620      	mov	r0, r4
  40bc70:	f000 fcce 	bl	40c610 <_Bfree>
  40bc74:	9a02      	ldr	r2, [sp, #8]
  40bc76:	f8dd c018 	ldr.w	ip, [sp, #24]
  40bc7a:	b92a      	cbnz	r2, 40bc88 <_dtoa_r+0x6c0>
  40bc7c:	9b20      	ldr	r3, [sp, #128]	; 0x80
  40bc7e:	b91b      	cbnz	r3, 40bc88 <_dtoa_r+0x6c0>
  40bc80:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40bc82:	2b00      	cmp	r3, #0
  40bc84:	f000 83a7 	beq.w	40c3d6 <_dtoa_r+0xe0e>
  40bc88:	f1ba 0f00 	cmp.w	sl, #0
  40bc8c:	f2c0 8251 	blt.w	40c132 <_dtoa_r+0xb6a>
  40bc90:	d105      	bne.n	40bc9e <_dtoa_r+0x6d6>
  40bc92:	9b20      	ldr	r3, [sp, #128]	; 0x80
  40bc94:	b91b      	cbnz	r3, 40bc9e <_dtoa_r+0x6d6>
  40bc96:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40bc98:	2b00      	cmp	r3, #0
  40bc9a:	f000 824a 	beq.w	40c132 <_dtoa_r+0xb6a>
  40bc9e:	2a00      	cmp	r2, #0
  40bca0:	f300 82b7 	bgt.w	40c212 <_dtoa_r+0xc4a>
  40bca4:	9b08      	ldr	r3, [sp, #32]
  40bca6:	f887 c000 	strb.w	ip, [r7]
  40bcaa:	f107 0a01 	add.w	sl, r7, #1
  40bcae:	429f      	cmp	r7, r3
  40bcb0:	4655      	mov	r5, sl
  40bcb2:	f000 82ba 	beq.w	40c22a <_dtoa_r+0xc62>
  40bcb6:	4659      	mov	r1, fp
  40bcb8:	220a      	movs	r2, #10
  40bcba:	2300      	movs	r3, #0
  40bcbc:	4620      	mov	r0, r4
  40bcbe:	f000 fcb1 	bl	40c624 <__multadd>
  40bcc2:	454e      	cmp	r6, r9
  40bcc4:	4683      	mov	fp, r0
  40bcc6:	4631      	mov	r1, r6
  40bcc8:	4620      	mov	r0, r4
  40bcca:	f04f 020a 	mov.w	r2, #10
  40bcce:	f04f 0300 	mov.w	r3, #0
  40bcd2:	f000 8174 	beq.w	40bfbe <_dtoa_r+0x9f6>
  40bcd6:	f000 fca5 	bl	40c624 <__multadd>
  40bcda:	4649      	mov	r1, r9
  40bcdc:	4606      	mov	r6, r0
  40bcde:	220a      	movs	r2, #10
  40bce0:	4620      	mov	r0, r4
  40bce2:	2300      	movs	r3, #0
  40bce4:	f000 fc9e 	bl	40c624 <__multadd>
  40bce8:	4657      	mov	r7, sl
  40bcea:	4681      	mov	r9, r0
  40bcec:	e79f      	b.n	40bc2e <_dtoa_r+0x666>
  40bcee:	2301      	movs	r3, #1
  40bcf0:	9309      	str	r3, [sp, #36]	; 0x24
  40bcf2:	9b21      	ldr	r3, [sp, #132]	; 0x84
  40bcf4:	2b00      	cmp	r3, #0
  40bcf6:	f340 8213 	ble.w	40c120 <_dtoa_r+0xb58>
  40bcfa:	461f      	mov	r7, r3
  40bcfc:	461e      	mov	r6, r3
  40bcfe:	930c      	str	r3, [sp, #48]	; 0x30
  40bd00:	9306      	str	r3, [sp, #24]
  40bd02:	2100      	movs	r1, #0
  40bd04:	2f17      	cmp	r7, #23
  40bd06:	6461      	str	r1, [r4, #68]	; 0x44
  40bd08:	d90a      	bls.n	40bd20 <_dtoa_r+0x758>
  40bd0a:	2201      	movs	r2, #1
  40bd0c:	2304      	movs	r3, #4
  40bd0e:	005b      	lsls	r3, r3, #1
  40bd10:	f103 0014 	add.w	r0, r3, #20
  40bd14:	4287      	cmp	r7, r0
  40bd16:	4611      	mov	r1, r2
  40bd18:	f102 0201 	add.w	r2, r2, #1
  40bd1c:	d2f7      	bcs.n	40bd0e <_dtoa_r+0x746>
  40bd1e:	6461      	str	r1, [r4, #68]	; 0x44
  40bd20:	4620      	mov	r0, r4
  40bd22:	f000 fc4f 	bl	40c5c4 <_Balloc>
  40bd26:	2e0e      	cmp	r6, #14
  40bd28:	9007      	str	r0, [sp, #28]
  40bd2a:	6420      	str	r0, [r4, #64]	; 0x40
  40bd2c:	f63f ad5c 	bhi.w	40b7e8 <_dtoa_r+0x220>
  40bd30:	2d00      	cmp	r5, #0
  40bd32:	f43f ad59 	beq.w	40b7e8 <_dtoa_r+0x220>
  40bd36:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  40bd3a:	9904      	ldr	r1, [sp, #16]
  40bd3c:	2900      	cmp	r1, #0
  40bd3e:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
  40bd42:	f340 8221 	ble.w	40c188 <_dtoa_r+0xbc0>
  40bd46:	4bb7      	ldr	r3, [pc, #732]	; (40c024 <_dtoa_r+0xa5c>)
  40bd48:	f001 020f 	and.w	r2, r1, #15
  40bd4c:	110d      	asrs	r5, r1, #4
  40bd4e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  40bd52:	06e9      	lsls	r1, r5, #27
  40bd54:	e9d3 6700 	ldrd	r6, r7, [r3]
  40bd58:	f140 81db 	bpl.w	40c112 <_dtoa_r+0xb4a>
  40bd5c:	4bb2      	ldr	r3, [pc, #712]	; (40c028 <_dtoa_r+0xa60>)
  40bd5e:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
  40bd62:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
  40bd66:	f001 fb99 	bl	40d49c <__aeabi_ddiv>
  40bd6a:	e9cd 0102 	strd	r0, r1, [sp, #8]
  40bd6e:	f005 050f 	and.w	r5, r5, #15
  40bd72:	f04f 0803 	mov.w	r8, #3
  40bd76:	b18d      	cbz	r5, 40bd9c <_dtoa_r+0x7d4>
  40bd78:	f8df 92ac 	ldr.w	r9, [pc, #684]	; 40c028 <_dtoa_r+0xa60>
  40bd7c:	4630      	mov	r0, r6
  40bd7e:	4639      	mov	r1, r7
  40bd80:	07ea      	lsls	r2, r5, #31
  40bd82:	d505      	bpl.n	40bd90 <_dtoa_r+0x7c8>
  40bd84:	e9d9 2300 	ldrd	r2, r3, [r9]
  40bd88:	f108 0801 	add.w	r8, r8, #1
  40bd8c:	f001 fa5c 	bl	40d248 <__aeabi_dmul>
  40bd90:	106d      	asrs	r5, r5, #1
  40bd92:	f109 0908 	add.w	r9, r9, #8
  40bd96:	d1f3      	bne.n	40bd80 <_dtoa_r+0x7b8>
  40bd98:	4606      	mov	r6, r0
  40bd9a:	460f      	mov	r7, r1
  40bd9c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  40bda0:	4632      	mov	r2, r6
  40bda2:	463b      	mov	r3, r7
  40bda4:	f001 fb7a 	bl	40d49c <__aeabi_ddiv>
  40bda8:	e9cd 0102 	strd	r0, r1, [sp, #8]
  40bdac:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  40bdae:	b143      	cbz	r3, 40bdc2 <_dtoa_r+0x7fa>
  40bdb0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  40bdb4:	2200      	movs	r2, #0
  40bdb6:	4b9d      	ldr	r3, [pc, #628]	; (40c02c <_dtoa_r+0xa64>)
  40bdb8:	f7fa fa6e 	bl	406298 <__aeabi_dcmplt>
  40bdbc:	2800      	cmp	r0, #0
  40bdbe:	f040 82ac 	bne.w	40c31a <_dtoa_r+0xd52>
  40bdc2:	4640      	mov	r0, r8
  40bdc4:	f001 f9da 	bl	40d17c <__aeabi_i2d>
  40bdc8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  40bdcc:	f001 fa3c 	bl	40d248 <__aeabi_dmul>
  40bdd0:	4b97      	ldr	r3, [pc, #604]	; (40c030 <_dtoa_r+0xa68>)
  40bdd2:	2200      	movs	r2, #0
  40bdd4:	f001 f886 	bl	40cee4 <__adddf3>
  40bdd8:	9b06      	ldr	r3, [sp, #24]
  40bdda:	4606      	mov	r6, r0
  40bddc:	f1a1 7750 	sub.w	r7, r1, #54525952	; 0x3400000
  40bde0:	2b00      	cmp	r3, #0
  40bde2:	f000 8162 	beq.w	40c0aa <_dtoa_r+0xae2>
  40bde6:	9b04      	ldr	r3, [sp, #16]
  40bde8:	f8dd 9018 	ldr.w	r9, [sp, #24]
  40bdec:	9312      	str	r3, [sp, #72]	; 0x48
  40bdee:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40bdf0:	2b00      	cmp	r3, #0
  40bdf2:	f000 8221 	beq.w	40c238 <_dtoa_r+0xc70>
  40bdf6:	4b8b      	ldr	r3, [pc, #556]	; (40c024 <_dtoa_r+0xa5c>)
  40bdf8:	498e      	ldr	r1, [pc, #568]	; (40c034 <_dtoa_r+0xa6c>)
  40bdfa:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
  40bdfe:	e953 2302 	ldrd	r2, r3, [r3, #-8]
  40be02:	2000      	movs	r0, #0
  40be04:	f001 fb4a 	bl	40d49c <__aeabi_ddiv>
  40be08:	4632      	mov	r2, r6
  40be0a:	463b      	mov	r3, r7
  40be0c:	f001 f868 	bl	40cee0 <__aeabi_dsub>
  40be10:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
  40be14:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
  40be18:	4639      	mov	r1, r7
  40be1a:	4630      	mov	r0, r6
  40be1c:	f001 fc26 	bl	40d66c <__aeabi_d2iz>
  40be20:	4605      	mov	r5, r0
  40be22:	f001 f9ab 	bl	40d17c <__aeabi_i2d>
  40be26:	3530      	adds	r5, #48	; 0x30
  40be28:	4602      	mov	r2, r0
  40be2a:	460b      	mov	r3, r1
  40be2c:	4630      	mov	r0, r6
  40be2e:	4639      	mov	r1, r7
  40be30:	f001 f856 	bl	40cee0 <__aeabi_dsub>
  40be34:	fa5f f885 	uxtb.w	r8, r5
  40be38:	9d07      	ldr	r5, [sp, #28]
  40be3a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
  40be3e:	f885 8000 	strb.w	r8, [r5]
  40be42:	4606      	mov	r6, r0
  40be44:	460f      	mov	r7, r1
  40be46:	3501      	adds	r5, #1
  40be48:	f7fa fa26 	bl	406298 <__aeabi_dcmplt>
  40be4c:	2800      	cmp	r0, #0
  40be4e:	f040 82b2 	bne.w	40c3b6 <_dtoa_r+0xdee>
  40be52:	4632      	mov	r2, r6
  40be54:	463b      	mov	r3, r7
  40be56:	2000      	movs	r0, #0
  40be58:	4974      	ldr	r1, [pc, #464]	; (40c02c <_dtoa_r+0xa64>)
  40be5a:	f001 f841 	bl	40cee0 <__aeabi_dsub>
  40be5e:	4602      	mov	r2, r0
  40be60:	460b      	mov	r3, r1
  40be62:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
  40be66:	f7fa fa35 	bl	4062d4 <__aeabi_dcmpgt>
  40be6a:	2800      	cmp	r0, #0
  40be6c:	f040 82ac 	bne.w	40c3c8 <_dtoa_r+0xe00>
  40be70:	f1b9 0f01 	cmp.w	r9, #1
  40be74:	f340 8138 	ble.w	40c0e8 <_dtoa_r+0xb20>
  40be78:	9b07      	ldr	r3, [sp, #28]
  40be7a:	f8cd a04c 	str.w	sl, [sp, #76]	; 0x4c
  40be7e:	f8cd b008 	str.w	fp, [sp, #8]
  40be82:	4499      	add	r9, r3
  40be84:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	; 0x40
  40be88:	46a0      	mov	r8, r4
  40be8a:	e00d      	b.n	40bea8 <_dtoa_r+0x8e0>
  40be8c:	2000      	movs	r0, #0
  40be8e:	4967      	ldr	r1, [pc, #412]	; (40c02c <_dtoa_r+0xa64>)
  40be90:	f001 f826 	bl	40cee0 <__aeabi_dsub>
  40be94:	4652      	mov	r2, sl
  40be96:	465b      	mov	r3, fp
  40be98:	f7fa f9fe 	bl	406298 <__aeabi_dcmplt>
  40be9c:	2800      	cmp	r0, #0
  40be9e:	f040 828e 	bne.w	40c3be <_dtoa_r+0xdf6>
  40bea2:	454d      	cmp	r5, r9
  40bea4:	f000 811b 	beq.w	40c0de <_dtoa_r+0xb16>
  40bea8:	4650      	mov	r0, sl
  40beaa:	4659      	mov	r1, fp
  40beac:	2200      	movs	r2, #0
  40beae:	4b62      	ldr	r3, [pc, #392]	; (40c038 <_dtoa_r+0xa70>)
  40beb0:	f001 f9ca 	bl	40d248 <__aeabi_dmul>
  40beb4:	2200      	movs	r2, #0
  40beb6:	4b60      	ldr	r3, [pc, #384]	; (40c038 <_dtoa_r+0xa70>)
  40beb8:	4682      	mov	sl, r0
  40beba:	468b      	mov	fp, r1
  40bebc:	4630      	mov	r0, r6
  40bebe:	4639      	mov	r1, r7
  40bec0:	f001 f9c2 	bl	40d248 <__aeabi_dmul>
  40bec4:	460f      	mov	r7, r1
  40bec6:	4606      	mov	r6, r0
  40bec8:	f001 fbd0 	bl	40d66c <__aeabi_d2iz>
  40becc:	4604      	mov	r4, r0
  40bece:	f001 f955 	bl	40d17c <__aeabi_i2d>
  40bed2:	4602      	mov	r2, r0
  40bed4:	460b      	mov	r3, r1
  40bed6:	4630      	mov	r0, r6
  40bed8:	4639      	mov	r1, r7
  40beda:	f001 f801 	bl	40cee0 <__aeabi_dsub>
  40bede:	3430      	adds	r4, #48	; 0x30
  40bee0:	b2e4      	uxtb	r4, r4
  40bee2:	4652      	mov	r2, sl
  40bee4:	465b      	mov	r3, fp
  40bee6:	f805 4b01 	strb.w	r4, [r5], #1
  40beea:	4606      	mov	r6, r0
  40beec:	460f      	mov	r7, r1
  40beee:	f7fa f9d3 	bl	406298 <__aeabi_dcmplt>
  40bef2:	4632      	mov	r2, r6
  40bef4:	463b      	mov	r3, r7
  40bef6:	2800      	cmp	r0, #0
  40bef8:	d0c8      	beq.n	40be8c <_dtoa_r+0x8c4>
  40befa:	9b12      	ldr	r3, [sp, #72]	; 0x48
  40befc:	f8dd b008 	ldr.w	fp, [sp, #8]
  40bf00:	9304      	str	r3, [sp, #16]
  40bf02:	4644      	mov	r4, r8
  40bf04:	e533      	b.n	40b96e <_dtoa_r+0x3a6>
  40bf06:	2300      	movs	r3, #0
  40bf08:	9309      	str	r3, [sp, #36]	; 0x24
  40bf0a:	9b21      	ldr	r3, [sp, #132]	; 0x84
  40bf0c:	9a04      	ldr	r2, [sp, #16]
  40bf0e:	4413      	add	r3, r2
  40bf10:	930c      	str	r3, [sp, #48]	; 0x30
  40bf12:	3301      	adds	r3, #1
  40bf14:	2b00      	cmp	r3, #0
  40bf16:	9306      	str	r3, [sp, #24]
  40bf18:	f340 8109 	ble.w	40c12e <_dtoa_r+0xb66>
  40bf1c:	9e06      	ldr	r6, [sp, #24]
  40bf1e:	4637      	mov	r7, r6
  40bf20:	e6ef      	b.n	40bd02 <_dtoa_r+0x73a>
  40bf22:	2300      	movs	r3, #0
  40bf24:	9309      	str	r3, [sp, #36]	; 0x24
  40bf26:	e6e4      	b.n	40bcf2 <_dtoa_r+0x72a>
  40bf28:	9b06      	ldr	r3, [sp, #24]
  40bf2a:	2b00      	cmp	r3, #0
  40bf2c:	f73f ac6d 	bgt.w	40b80a <_dtoa_r+0x242>
  40bf30:	f040 8262 	bne.w	40c3f8 <_dtoa_r+0xe30>
  40bf34:	4640      	mov	r0, r8
  40bf36:	2200      	movs	r2, #0
  40bf38:	4b40      	ldr	r3, [pc, #256]	; (40c03c <_dtoa_r+0xa74>)
  40bf3a:	4649      	mov	r1, r9
  40bf3c:	f001 f984 	bl	40d248 <__aeabi_dmul>
  40bf40:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  40bf44:	f7fa f9bc 	bl	4062c0 <__aeabi_dcmpge>
  40bf48:	f8dd 8018 	ldr.w	r8, [sp, #24]
  40bf4c:	4646      	mov	r6, r8
  40bf4e:	2800      	cmp	r0, #0
  40bf50:	f000 808a 	beq.w	40c068 <_dtoa_r+0xaa0>
  40bf54:	9b21      	ldr	r3, [sp, #132]	; 0x84
  40bf56:	9d07      	ldr	r5, [sp, #28]
  40bf58:	43db      	mvns	r3, r3
  40bf5a:	9304      	str	r3, [sp, #16]
  40bf5c:	4641      	mov	r1, r8
  40bf5e:	4620      	mov	r0, r4
  40bf60:	f000 fb56 	bl	40c610 <_Bfree>
  40bf64:	2e00      	cmp	r6, #0
  40bf66:	f47f ae2c 	bne.w	40bbc2 <_dtoa_r+0x5fa>
  40bf6a:	e500      	b.n	40b96e <_dtoa_r+0x3a6>
  40bf6c:	4659      	mov	r1, fp
  40bf6e:	4620      	mov	r0, r4
  40bf70:	f000 fc8c 	bl	40c88c <__pow5mult>
  40bf74:	4683      	mov	fp, r0
  40bf76:	e557      	b.n	40ba28 <_dtoa_r+0x460>
  40bf78:	9b02      	ldr	r3, [sp, #8]
  40bf7a:	2b00      	cmp	r3, #0
  40bf7c:	f47f ad66 	bne.w	40ba4c <_dtoa_r+0x484>
  40bf80:	9b03      	ldr	r3, [sp, #12]
  40bf82:	f3c3 0313 	ubfx	r3, r3, #0, #20
  40bf86:	2b00      	cmp	r3, #0
  40bf88:	f47f ad94 	bne.w	40bab4 <_dtoa_r+0x4ec>
  40bf8c:	9b03      	ldr	r3, [sp, #12]
  40bf8e:	f023 4700 	bic.w	r7, r3, #2147483648	; 0x80000000
  40bf92:	0d3f      	lsrs	r7, r7, #20
  40bf94:	053f      	lsls	r7, r7, #20
  40bf96:	2f00      	cmp	r7, #0
  40bf98:	f000 821a 	beq.w	40c3d0 <_dtoa_r+0xe08>
  40bf9c:	9b05      	ldr	r3, [sp, #20]
  40bf9e:	3301      	adds	r3, #1
  40bfa0:	9305      	str	r3, [sp, #20]
  40bfa2:	f10a 0a01 	add.w	sl, sl, #1
  40bfa6:	f04f 0901 	mov.w	r9, #1
  40bfaa:	e585      	b.n	40bab8 <_dtoa_r+0x4f0>
  40bfac:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  40bfae:	2a00      	cmp	r2, #0
  40bfb0:	f000 81a5 	beq.w	40c2fe <_dtoa_r+0xd36>
  40bfb4:	f203 4333 	addw	r3, r3, #1075	; 0x433
  40bfb8:	9f08      	ldr	r7, [sp, #32]
  40bfba:	9d05      	ldr	r5, [sp, #20]
  40bfbc:	e4ff      	b.n	40b9be <_dtoa_r+0x3f6>
  40bfbe:	f000 fb31 	bl	40c624 <__multadd>
  40bfc2:	4657      	mov	r7, sl
  40bfc4:	4606      	mov	r6, r0
  40bfc6:	4681      	mov	r9, r0
  40bfc8:	e631      	b.n	40bc2e <_dtoa_r+0x666>
  40bfca:	4601      	mov	r1, r0
  40bfcc:	4620      	mov	r0, r4
  40bfce:	f8cd c008 	str.w	ip, [sp, #8]
  40bfd2:	f000 fb1d 	bl	40c610 <_Bfree>
  40bfd6:	2201      	movs	r2, #1
  40bfd8:	f8dd c008 	ldr.w	ip, [sp, #8]
  40bfdc:	e654      	b.n	40bc88 <_dtoa_r+0x6c0>
  40bfde:	4658      	mov	r0, fp
  40bfe0:	4641      	mov	r1, r8
  40bfe2:	f000 fcf9 	bl	40c9d8 <__mcmp>
  40bfe6:	2800      	cmp	r0, #0
  40bfe8:	f6bf ad91 	bge.w	40bb0e <_dtoa_r+0x546>
  40bfec:	9f04      	ldr	r7, [sp, #16]
  40bfee:	4659      	mov	r1, fp
  40bff0:	2300      	movs	r3, #0
  40bff2:	4620      	mov	r0, r4
  40bff4:	220a      	movs	r2, #10
  40bff6:	3f01      	subs	r7, #1
  40bff8:	9704      	str	r7, [sp, #16]
  40bffa:	f000 fb13 	bl	40c624 <__multadd>
  40bffe:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40c000:	4683      	mov	fp, r0
  40c002:	2b00      	cmp	r3, #0
  40c004:	f47f adf0 	bne.w	40bbe8 <_dtoa_r+0x620>
  40c008:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  40c00a:	2b00      	cmp	r3, #0
  40c00c:	f340 81f8 	ble.w	40c400 <_dtoa_r+0xe38>
  40c010:	9306      	str	r3, [sp, #24]
  40c012:	e583      	b.n	40bb1c <_dtoa_r+0x554>
  40c014:	9807      	ldr	r0, [sp, #28]
  40c016:	f7ff bb0b 	b.w	40b630 <_dtoa_r+0x68>
  40c01a:	9b02      	ldr	r3, [sp, #8]
  40c01c:	2b00      	cmp	r3, #0
  40c01e:	f47f ad49 	bne.w	40bab4 <_dtoa_r+0x4ec>
  40c022:	e7ad      	b.n	40bf80 <_dtoa_r+0x9b8>
  40c024:	0040ff28 	.word	0x0040ff28
  40c028:	00410000 	.word	0x00410000
  40c02c:	3ff00000 	.word	0x3ff00000
  40c030:	401c0000 	.word	0x401c0000
  40c034:	3fe00000 	.word	0x3fe00000
  40c038:	40240000 	.word	0x40240000
  40c03c:	40140000 	.word	0x40140000
  40c040:	9b20      	ldr	r3, [sp, #128]	; 0x80
  40c042:	2b02      	cmp	r3, #2
  40c044:	f77f ad67 	ble.w	40bb16 <_dtoa_r+0x54e>
  40c048:	9b06      	ldr	r3, [sp, #24]
  40c04a:	2b00      	cmp	r3, #0
  40c04c:	d182      	bne.n	40bf54 <_dtoa_r+0x98c>
  40c04e:	4641      	mov	r1, r8
  40c050:	2205      	movs	r2, #5
  40c052:	4620      	mov	r0, r4
  40c054:	f000 fae6 	bl	40c624 <__multadd>
  40c058:	4680      	mov	r8, r0
  40c05a:	4641      	mov	r1, r8
  40c05c:	4658      	mov	r0, fp
  40c05e:	f000 fcbb 	bl	40c9d8 <__mcmp>
  40c062:	2800      	cmp	r0, #0
  40c064:	f77f af76 	ble.w	40bf54 <_dtoa_r+0x98c>
  40c068:	9a04      	ldr	r2, [sp, #16]
  40c06a:	9907      	ldr	r1, [sp, #28]
  40c06c:	2331      	movs	r3, #49	; 0x31
  40c06e:	3201      	adds	r2, #1
  40c070:	9204      	str	r2, [sp, #16]
  40c072:	700b      	strb	r3, [r1, #0]
  40c074:	1c4d      	adds	r5, r1, #1
  40c076:	e771      	b.n	40bf5c <_dtoa_r+0x994>
  40c078:	9a04      	ldr	r2, [sp, #16]
  40c07a:	3201      	adds	r2, #1
  40c07c:	9204      	str	r2, [sp, #16]
  40c07e:	9a07      	ldr	r2, [sp, #28]
  40c080:	2331      	movs	r3, #49	; 0x31
  40c082:	7013      	strb	r3, [r2, #0]
  40c084:	e58d      	b.n	40bba2 <_dtoa_r+0x5da>
  40c086:	f8dd b008 	ldr.w	fp, [sp, #8]
  40c08a:	9c05      	ldr	r4, [sp, #20]
  40c08c:	e46f      	b.n	40b96e <_dtoa_r+0x3a6>
  40c08e:	4640      	mov	r0, r8
  40c090:	f001 f874 	bl	40d17c <__aeabi_i2d>
  40c094:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  40c098:	f001 f8d6 	bl	40d248 <__aeabi_dmul>
  40c09c:	2200      	movs	r2, #0
  40c09e:	4bbc      	ldr	r3, [pc, #752]	; (40c390 <_dtoa_r+0xdc8>)
  40c0a0:	f000 ff20 	bl	40cee4 <__adddf3>
  40c0a4:	4606      	mov	r6, r0
  40c0a6:	f1a1 7750 	sub.w	r7, r1, #54525952	; 0x3400000
  40c0aa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  40c0ae:	2200      	movs	r2, #0
  40c0b0:	4bb8      	ldr	r3, [pc, #736]	; (40c394 <_dtoa_r+0xdcc>)
  40c0b2:	f000 ff15 	bl	40cee0 <__aeabi_dsub>
  40c0b6:	4632      	mov	r2, r6
  40c0b8:	463b      	mov	r3, r7
  40c0ba:	e9cd 0102 	strd	r0, r1, [sp, #8]
  40c0be:	f7fa f909 	bl	4062d4 <__aeabi_dcmpgt>
  40c0c2:	4680      	mov	r8, r0
  40c0c4:	2800      	cmp	r0, #0
  40c0c6:	f040 80b3 	bne.w	40c230 <_dtoa_r+0xc68>
  40c0ca:	4632      	mov	r2, r6
  40c0cc:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
  40c0d0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  40c0d4:	f7fa f8e0 	bl	406298 <__aeabi_dcmplt>
  40c0d8:	b130      	cbz	r0, 40c0e8 <_dtoa_r+0xb20>
  40c0da:	4646      	mov	r6, r8
  40c0dc:	e73a      	b.n	40bf54 <_dtoa_r+0x98c>
  40c0de:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
  40c0e2:	f8dd b008 	ldr.w	fp, [sp, #8]
  40c0e6:	4644      	mov	r4, r8
  40c0e8:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
  40c0ec:	e9cd 2302 	strd	r2, r3, [sp, #8]
  40c0f0:	f7ff bb7a 	b.w	40b7e8 <_dtoa_r+0x220>
  40c0f4:	4659      	mov	r1, fp
  40c0f6:	9a08      	ldr	r2, [sp, #32]
  40c0f8:	4620      	mov	r0, r4
  40c0fa:	f000 fbc7 	bl	40c88c <__pow5mult>
  40c0fe:	4683      	mov	fp, r0
  40c100:	e492      	b.n	40ba28 <_dtoa_r+0x460>
  40c102:	9b08      	ldr	r3, [sp, #32]
  40c104:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  40c106:	9708      	str	r7, [sp, #32]
  40c108:	1afb      	subs	r3, r7, r3
  40c10a:	441a      	add	r2, r3
  40c10c:	920a      	str	r2, [sp, #40]	; 0x28
  40c10e:	2700      	movs	r7, #0
  40c110:	e44f      	b.n	40b9b2 <_dtoa_r+0x3ea>
  40c112:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
  40c116:	f04f 0802 	mov.w	r8, #2
  40c11a:	e9cd 2302 	strd	r2, r3, [sp, #8]
  40c11e:	e62a      	b.n	40bd76 <_dtoa_r+0x7ae>
  40c120:	2601      	movs	r6, #1
  40c122:	9621      	str	r6, [sp, #132]	; 0x84
  40c124:	960c      	str	r6, [sp, #48]	; 0x30
  40c126:	9606      	str	r6, [sp, #24]
  40c128:	2100      	movs	r1, #0
  40c12a:	6461      	str	r1, [r4, #68]	; 0x44
  40c12c:	e5f8      	b.n	40bd20 <_dtoa_r+0x758>
  40c12e:	461e      	mov	r6, r3
  40c130:	e7fa      	b.n	40c128 <_dtoa_r+0xb60>
  40c132:	2a00      	cmp	r2, #0
  40c134:	dd15      	ble.n	40c162 <_dtoa_r+0xb9a>
  40c136:	4659      	mov	r1, fp
  40c138:	2201      	movs	r2, #1
  40c13a:	4620      	mov	r0, r4
  40c13c:	f8cd c008 	str.w	ip, [sp, #8]
  40c140:	f000 fbf4 	bl	40c92c <__lshift>
  40c144:	4641      	mov	r1, r8
  40c146:	4683      	mov	fp, r0
  40c148:	f000 fc46 	bl	40c9d8 <__mcmp>
  40c14c:	2800      	cmp	r0, #0
  40c14e:	f8dd c008 	ldr.w	ip, [sp, #8]
  40c152:	f340 814a 	ble.w	40c3ea <_dtoa_r+0xe22>
  40c156:	f1bc 0f39 	cmp.w	ip, #57	; 0x39
  40c15a:	f000 8106 	beq.w	40c36a <_dtoa_r+0xda2>
  40c15e:	f10c 0c01 	add.w	ip, ip, #1
  40c162:	46b2      	mov	sl, r6
  40c164:	f887 c000 	strb.w	ip, [r7]
  40c168:	1c7d      	adds	r5, r7, #1
  40c16a:	464e      	mov	r6, r9
  40c16c:	e519      	b.n	40bba2 <_dtoa_r+0x5da>
  40c16e:	d104      	bne.n	40c17a <_dtoa_r+0xbb2>
  40c170:	f01c 0f01 	tst.w	ip, #1
  40c174:	d001      	beq.n	40c17a <_dtoa_r+0xbb2>
  40c176:	e504      	b.n	40bb82 <_dtoa_r+0x5ba>
  40c178:	4615      	mov	r5, r2
  40c17a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
  40c17e:	2b30      	cmp	r3, #48	; 0x30
  40c180:	f105 32ff 	add.w	r2, r5, #4294967295
  40c184:	d0f8      	beq.n	40c178 <_dtoa_r+0xbb0>
  40c186:	e50c      	b.n	40bba2 <_dtoa_r+0x5da>
  40c188:	9b04      	ldr	r3, [sp, #16]
  40c18a:	425d      	negs	r5, r3
  40c18c:	2d00      	cmp	r5, #0
  40c18e:	f000 80bd 	beq.w	40c30c <_dtoa_r+0xd44>
  40c192:	4b81      	ldr	r3, [pc, #516]	; (40c398 <_dtoa_r+0xdd0>)
  40c194:	f005 020f 	and.w	r2, r5, #15
  40c198:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  40c19c:	e9d3 2300 	ldrd	r2, r3, [r3]
  40c1a0:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
  40c1a4:	f001 f850 	bl	40d248 <__aeabi_dmul>
  40c1a8:	112d      	asrs	r5, r5, #4
  40c1aa:	e9cd 0102 	strd	r0, r1, [sp, #8]
  40c1ae:	f000 812c 	beq.w	40c40a <_dtoa_r+0xe42>
  40c1b2:	4e7a      	ldr	r6, [pc, #488]	; (40c39c <_dtoa_r+0xdd4>)
  40c1b4:	f04f 0802 	mov.w	r8, #2
  40c1b8:	07eb      	lsls	r3, r5, #31
  40c1ba:	d505      	bpl.n	40c1c8 <_dtoa_r+0xc00>
  40c1bc:	e9d6 2300 	ldrd	r2, r3, [r6]
  40c1c0:	f108 0801 	add.w	r8, r8, #1
  40c1c4:	f001 f840 	bl	40d248 <__aeabi_dmul>
  40c1c8:	106d      	asrs	r5, r5, #1
  40c1ca:	f106 0608 	add.w	r6, r6, #8
  40c1ce:	d1f3      	bne.n	40c1b8 <_dtoa_r+0xbf0>
  40c1d0:	e9cd 0102 	strd	r0, r1, [sp, #8]
  40c1d4:	e5ea      	b.n	40bdac <_dtoa_r+0x7e4>
  40c1d6:	9a04      	ldr	r2, [sp, #16]
  40c1d8:	3201      	adds	r2, #1
  40c1da:	9204      	str	r2, [sp, #16]
  40c1dc:	9a07      	ldr	r2, [sp, #28]
  40c1de:	2330      	movs	r3, #48	; 0x30
  40c1e0:	7013      	strb	r3, [r2, #0]
  40c1e2:	2331      	movs	r3, #49	; 0x31
  40c1e4:	7013      	strb	r3, [r2, #0]
  40c1e6:	f7ff bbc2 	b.w	40b96e <_dtoa_r+0x3a6>
  40c1ea:	6871      	ldr	r1, [r6, #4]
  40c1ec:	4620      	mov	r0, r4
  40c1ee:	f000 f9e9 	bl	40c5c4 <_Balloc>
  40c1f2:	6933      	ldr	r3, [r6, #16]
  40c1f4:	1c9a      	adds	r2, r3, #2
  40c1f6:	4605      	mov	r5, r0
  40c1f8:	0092      	lsls	r2, r2, #2
  40c1fa:	f106 010c 	add.w	r1, r6, #12
  40c1fe:	300c      	adds	r0, #12
  40c200:	f7fb f934 	bl	40746c <memcpy>
  40c204:	4620      	mov	r0, r4
  40c206:	4629      	mov	r1, r5
  40c208:	2201      	movs	r2, #1
  40c20a:	f000 fb8f 	bl	40c92c <__lshift>
  40c20e:	4681      	mov	r9, r0
  40c210:	e503      	b.n	40bc1a <_dtoa_r+0x652>
  40c212:	f1bc 0f39 	cmp.w	ip, #57	; 0x39
  40c216:	f000 80a8 	beq.w	40c36a <_dtoa_r+0xda2>
  40c21a:	f10c 0c01 	add.w	ip, ip, #1
  40c21e:	46b2      	mov	sl, r6
  40c220:	f887 c000 	strb.w	ip, [r7]
  40c224:	1c7d      	adds	r5, r7, #1
  40c226:	464e      	mov	r6, r9
  40c228:	e4bb      	b.n	40bba2 <_dtoa_r+0x5da>
  40c22a:	46b2      	mov	sl, r6
  40c22c:	464e      	mov	r6, r9
  40c22e:	e498      	b.n	40bb62 <_dtoa_r+0x59a>
  40c230:	f04f 0800 	mov.w	r8, #0
  40c234:	4646      	mov	r6, r8
  40c236:	e717      	b.n	40c068 <_dtoa_r+0xaa0>
  40c238:	4957      	ldr	r1, [pc, #348]	; (40c398 <_dtoa_r+0xdd0>)
  40c23a:	f109 33ff 	add.w	r3, r9, #4294967295
  40c23e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
  40c242:	4632      	mov	r2, r6
  40c244:	9313      	str	r3, [sp, #76]	; 0x4c
  40c246:	e9d1 0100 	ldrd	r0, r1, [r1]
  40c24a:	463b      	mov	r3, r7
  40c24c:	f000 fffc 	bl	40d248 <__aeabi_dmul>
  40c250:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
  40c254:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
  40c258:	4639      	mov	r1, r7
  40c25a:	4630      	mov	r0, r6
  40c25c:	f001 fa06 	bl	40d66c <__aeabi_d2iz>
  40c260:	4605      	mov	r5, r0
  40c262:	f000 ff8b 	bl	40d17c <__aeabi_i2d>
  40c266:	4602      	mov	r2, r0
  40c268:	460b      	mov	r3, r1
  40c26a:	4630      	mov	r0, r6
  40c26c:	4639      	mov	r1, r7
  40c26e:	f000 fe37 	bl	40cee0 <__aeabi_dsub>
  40c272:	9a07      	ldr	r2, [sp, #28]
  40c274:	3530      	adds	r5, #48	; 0x30
  40c276:	f1b9 0f01 	cmp.w	r9, #1
  40c27a:	7015      	strb	r5, [r2, #0]
  40c27c:	4606      	mov	r6, r0
  40c27e:	460f      	mov	r7, r1
  40c280:	f102 0501 	add.w	r5, r2, #1
  40c284:	d023      	beq.n	40c2ce <_dtoa_r+0xd06>
  40c286:	9b07      	ldr	r3, [sp, #28]
  40c288:	f8cd a008 	str.w	sl, [sp, #8]
  40c28c:	444b      	add	r3, r9
  40c28e:	465e      	mov	r6, fp
  40c290:	469a      	mov	sl, r3
  40c292:	46ab      	mov	fp, r5
  40c294:	2200      	movs	r2, #0
  40c296:	4b42      	ldr	r3, [pc, #264]	; (40c3a0 <_dtoa_r+0xdd8>)
  40c298:	f000 ffd6 	bl	40d248 <__aeabi_dmul>
  40c29c:	4689      	mov	r9, r1
  40c29e:	4680      	mov	r8, r0
  40c2a0:	f001 f9e4 	bl	40d66c <__aeabi_d2iz>
  40c2a4:	4607      	mov	r7, r0
  40c2a6:	f000 ff69 	bl	40d17c <__aeabi_i2d>
  40c2aa:	3730      	adds	r7, #48	; 0x30
  40c2ac:	4602      	mov	r2, r0
  40c2ae:	460b      	mov	r3, r1
  40c2b0:	4640      	mov	r0, r8
  40c2b2:	4649      	mov	r1, r9
  40c2b4:	f000 fe14 	bl	40cee0 <__aeabi_dsub>
  40c2b8:	f80b 7b01 	strb.w	r7, [fp], #1
  40c2bc:	45d3      	cmp	fp, sl
  40c2be:	d1e9      	bne.n	40c294 <_dtoa_r+0xccc>
  40c2c0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  40c2c2:	f8dd a008 	ldr.w	sl, [sp, #8]
  40c2c6:	46b3      	mov	fp, r6
  40c2c8:	460f      	mov	r7, r1
  40c2ca:	4606      	mov	r6, r0
  40c2cc:	441d      	add	r5, r3
  40c2ce:	2200      	movs	r2, #0
  40c2d0:	4b34      	ldr	r3, [pc, #208]	; (40c3a4 <_dtoa_r+0xddc>)
  40c2d2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
  40c2d6:	f000 fe05 	bl	40cee4 <__adddf3>
  40c2da:	4632      	mov	r2, r6
  40c2dc:	463b      	mov	r3, r7
  40c2de:	f7f9 ffdb 	bl	406298 <__aeabi_dcmplt>
  40c2e2:	2800      	cmp	r0, #0
  40c2e4:	d047      	beq.n	40c376 <_dtoa_r+0xdae>
  40c2e6:	9b12      	ldr	r3, [sp, #72]	; 0x48
  40c2e8:	9304      	str	r3, [sp, #16]
  40c2ea:	f815 8c01 	ldrb.w	r8, [r5, #-1]
  40c2ee:	f7ff bb2c 	b.w	40b94a <_dtoa_r+0x382>
  40c2f2:	9b05      	ldr	r3, [sp, #20]
  40c2f4:	9a06      	ldr	r2, [sp, #24]
  40c2f6:	1a9d      	subs	r5, r3, r2
  40c2f8:	2300      	movs	r3, #0
  40c2fa:	f7ff bb60 	b.w	40b9be <_dtoa_r+0x3f6>
  40c2fe:	9b14      	ldr	r3, [sp, #80]	; 0x50
  40c300:	9f08      	ldr	r7, [sp, #32]
  40c302:	9d05      	ldr	r5, [sp, #20]
  40c304:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
  40c308:	f7ff bb59 	b.w	40b9be <_dtoa_r+0x3f6>
  40c30c:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
  40c310:	f04f 0802 	mov.w	r8, #2
  40c314:	e9cd 2302 	strd	r2, r3, [sp, #8]
  40c318:	e548      	b.n	40bdac <_dtoa_r+0x7e4>
  40c31a:	9b06      	ldr	r3, [sp, #24]
  40c31c:	2b00      	cmp	r3, #0
  40c31e:	f43f aeb6 	beq.w	40c08e <_dtoa_r+0xac6>
  40c322:	9d0c      	ldr	r5, [sp, #48]	; 0x30
  40c324:	2d00      	cmp	r5, #0
  40c326:	f77f aedf 	ble.w	40c0e8 <_dtoa_r+0xb20>
  40c32a:	2200      	movs	r2, #0
  40c32c:	4b1c      	ldr	r3, [pc, #112]	; (40c3a0 <_dtoa_r+0xdd8>)
  40c32e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  40c332:	f000 ff89 	bl	40d248 <__aeabi_dmul>
  40c336:	4606      	mov	r6, r0
  40c338:	460f      	mov	r7, r1
  40c33a:	f108 0001 	add.w	r0, r8, #1
  40c33e:	e9cd 6702 	strd	r6, r7, [sp, #8]
  40c342:	f000 ff1b 	bl	40d17c <__aeabi_i2d>
  40c346:	4602      	mov	r2, r0
  40c348:	460b      	mov	r3, r1
  40c34a:	4630      	mov	r0, r6
  40c34c:	4639      	mov	r1, r7
  40c34e:	f000 ff7b 	bl	40d248 <__aeabi_dmul>
  40c352:	4b0f      	ldr	r3, [pc, #60]	; (40c390 <_dtoa_r+0xdc8>)
  40c354:	2200      	movs	r2, #0
  40c356:	f000 fdc5 	bl	40cee4 <__adddf3>
  40c35a:	9b04      	ldr	r3, [sp, #16]
  40c35c:	3b01      	subs	r3, #1
  40c35e:	4606      	mov	r6, r0
  40c360:	f1a1 7750 	sub.w	r7, r1, #54525952	; 0x3400000
  40c364:	9312      	str	r3, [sp, #72]	; 0x48
  40c366:	46a9      	mov	r9, r5
  40c368:	e541      	b.n	40bdee <_dtoa_r+0x826>
  40c36a:	2239      	movs	r2, #57	; 0x39
  40c36c:	46b2      	mov	sl, r6
  40c36e:	703a      	strb	r2, [r7, #0]
  40c370:	464e      	mov	r6, r9
  40c372:	1c7d      	adds	r5, r7, #1
  40c374:	e407      	b.n	40bb86 <_dtoa_r+0x5be>
  40c376:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
  40c37a:	2000      	movs	r0, #0
  40c37c:	4909      	ldr	r1, [pc, #36]	; (40c3a4 <_dtoa_r+0xddc>)
  40c37e:	f000 fdaf 	bl	40cee0 <__aeabi_dsub>
  40c382:	4632      	mov	r2, r6
  40c384:	463b      	mov	r3, r7
  40c386:	f7f9 ffa5 	bl	4062d4 <__aeabi_dcmpgt>
  40c38a:	b970      	cbnz	r0, 40c3aa <_dtoa_r+0xde2>
  40c38c:	e6ac      	b.n	40c0e8 <_dtoa_r+0xb20>
  40c38e:	bf00      	nop
  40c390:	401c0000 	.word	0x401c0000
  40c394:	40140000 	.word	0x40140000
  40c398:	0040ff28 	.word	0x0040ff28
  40c39c:	00410000 	.word	0x00410000
  40c3a0:	40240000 	.word	0x40240000
  40c3a4:	3fe00000 	.word	0x3fe00000
  40c3a8:	4615      	mov	r5, r2
  40c3aa:	f815 3c01 	ldrb.w	r3, [r5, #-1]
  40c3ae:	2b30      	cmp	r3, #48	; 0x30
  40c3b0:	f105 32ff 	add.w	r2, r5, #4294967295
  40c3b4:	d0f8      	beq.n	40c3a8 <_dtoa_r+0xde0>
  40c3b6:	9b12      	ldr	r3, [sp, #72]	; 0x48
  40c3b8:	9304      	str	r3, [sp, #16]
  40c3ba:	f7ff bad8 	b.w	40b96e <_dtoa_r+0x3a6>
  40c3be:	4643      	mov	r3, r8
  40c3c0:	f8dd b008 	ldr.w	fp, [sp, #8]
  40c3c4:	46a0      	mov	r8, r4
  40c3c6:	461c      	mov	r4, r3
  40c3c8:	9b12      	ldr	r3, [sp, #72]	; 0x48
  40c3ca:	9304      	str	r3, [sp, #16]
  40c3cc:	f7ff babd 	b.w	40b94a <_dtoa_r+0x382>
  40c3d0:	46b9      	mov	r9, r7
  40c3d2:	f7ff bb71 	b.w	40bab8 <_dtoa_r+0x4f0>
  40c3d6:	f1bc 0f39 	cmp.w	ip, #57	; 0x39
  40c3da:	d0c6      	beq.n	40c36a <_dtoa_r+0xda2>
  40c3dc:	f1ba 0f00 	cmp.w	sl, #0
  40c3e0:	f77f aebf 	ble.w	40c162 <_dtoa_r+0xb9a>
  40c3e4:	f105 0c31 	add.w	ip, r5, #49	; 0x31
  40c3e8:	e6bb      	b.n	40c162 <_dtoa_r+0xb9a>
  40c3ea:	f47f aeba 	bne.w	40c162 <_dtoa_r+0xb9a>
  40c3ee:	f01c 0f01 	tst.w	ip, #1
  40c3f2:	f43f aeb6 	beq.w	40c162 <_dtoa_r+0xb9a>
  40c3f6:	e6ae      	b.n	40c156 <_dtoa_r+0xb8e>
  40c3f8:	f04f 0800 	mov.w	r8, #0
  40c3fc:	4646      	mov	r6, r8
  40c3fe:	e5a9      	b.n	40bf54 <_dtoa_r+0x98c>
  40c400:	9b20      	ldr	r3, [sp, #128]	; 0x80
  40c402:	2b02      	cmp	r3, #2
  40c404:	dc04      	bgt.n	40c410 <_dtoa_r+0xe48>
  40c406:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  40c408:	e602      	b.n	40c010 <_dtoa_r+0xa48>
  40c40a:	f04f 0802 	mov.w	r8, #2
  40c40e:	e4cd      	b.n	40bdac <_dtoa_r+0x7e4>
  40c410:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  40c412:	9306      	str	r3, [sp, #24]
  40c414:	e618      	b.n	40c048 <_dtoa_r+0xa80>
  40c416:	9b20      	ldr	r3, [sp, #128]	; 0x80
  40c418:	2b02      	cmp	r3, #2
  40c41a:	dcf9      	bgt.n	40c410 <_dtoa_r+0xe48>
  40c41c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  40c41e:	f7ff bbee 	b.w	40bbfe <_dtoa_r+0x636>
  40c422:	2500      	movs	r5, #0
  40c424:	6465      	str	r5, [r4, #68]	; 0x44
  40c426:	4629      	mov	r1, r5
  40c428:	4620      	mov	r0, r4
  40c42a:	f000 f8cb 	bl	40c5c4 <_Balloc>
  40c42e:	f04f 33ff 	mov.w	r3, #4294967295
  40c432:	9306      	str	r3, [sp, #24]
  40c434:	930c      	str	r3, [sp, #48]	; 0x30
  40c436:	2301      	movs	r3, #1
  40c438:	9007      	str	r0, [sp, #28]
  40c43a:	9521      	str	r5, [sp, #132]	; 0x84
  40c43c:	6420      	str	r0, [r4, #64]	; 0x40
  40c43e:	9309      	str	r3, [sp, #36]	; 0x24
  40c440:	f7ff b9d2 	b.w	40b7e8 <_dtoa_r+0x220>
  40c444:	f43f ab4d 	beq.w	40bae2 <_dtoa_r+0x51a>
  40c448:	f1c0 003c 	rsb	r0, r0, #60	; 0x3c
  40c44c:	f7ff bb44 	b.w	40bad8 <_dtoa_r+0x510>
  40c450:	2301      	movs	r3, #1
  40c452:	9309      	str	r3, [sp, #36]	; 0x24
  40c454:	e559      	b.n	40bf0a <_dtoa_r+0x942>
  40c456:	2501      	movs	r5, #1
  40c458:	f7ff b990 	b.w	40b77c <_dtoa_r+0x1b4>

0040c45c <__libc_fini_array>:
  40c45c:	b538      	push	{r3, r4, r5, lr}
  40c45e:	4b08      	ldr	r3, [pc, #32]	; (40c480 <__libc_fini_array+0x24>)
  40c460:	4d08      	ldr	r5, [pc, #32]	; (40c484 <__libc_fini_array+0x28>)
  40c462:	1aed      	subs	r5, r5, r3
  40c464:	10ac      	asrs	r4, r5, #2
  40c466:	bf18      	it	ne
  40c468:	18ed      	addne	r5, r5, r3
  40c46a:	d005      	beq.n	40c478 <__libc_fini_array+0x1c>
  40c46c:	3c01      	subs	r4, #1
  40c46e:	f855 3d04 	ldr.w	r3, [r5, #-4]!
  40c472:	4798      	blx	r3
  40c474:	2c00      	cmp	r4, #0
  40c476:	d1f9      	bne.n	40c46c <__libc_fini_array+0x10>
  40c478:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  40c47c:	f003 bdde 	b.w	41003c <_fini>
  40c480:	00410048 	.word	0x00410048
  40c484:	0041004c 	.word	0x0041004c

0040c488 <__fputwc>:
  40c488:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40c48c:	b082      	sub	sp, #8
  40c48e:	4607      	mov	r7, r0
  40c490:	460e      	mov	r6, r1
  40c492:	4614      	mov	r4, r2
  40c494:	f000 f878 	bl	40c588 <__locale_mb_cur_max>
  40c498:	2801      	cmp	r0, #1
  40c49a:	d041      	beq.n	40c520 <__fputwc+0x98>
  40c49c:	4638      	mov	r0, r7
  40c49e:	a901      	add	r1, sp, #4
  40c4a0:	4632      	mov	r2, r6
  40c4a2:	f104 035c 	add.w	r3, r4, #92	; 0x5c
  40c4a6:	f000 fc8d 	bl	40cdc4 <_wcrtomb_r>
  40c4aa:	f1b0 3fff 	cmp.w	r0, #4294967295
  40c4ae:	4680      	mov	r8, r0
  40c4b0:	d02f      	beq.n	40c512 <__fputwc+0x8a>
  40c4b2:	2800      	cmp	r0, #0
  40c4b4:	d03c      	beq.n	40c530 <__fputwc+0xa8>
  40c4b6:	f89d 1004 	ldrb.w	r1, [sp, #4]
  40c4ba:	2500      	movs	r5, #0
  40c4bc:	e009      	b.n	40c4d2 <__fputwc+0x4a>
  40c4be:	6823      	ldr	r3, [r4, #0]
  40c4c0:	7019      	strb	r1, [r3, #0]
  40c4c2:	6823      	ldr	r3, [r4, #0]
  40c4c4:	3301      	adds	r3, #1
  40c4c6:	6023      	str	r3, [r4, #0]
  40c4c8:	3501      	adds	r5, #1
  40c4ca:	45a8      	cmp	r8, r5
  40c4cc:	d930      	bls.n	40c530 <__fputwc+0xa8>
  40c4ce:	ab01      	add	r3, sp, #4
  40c4d0:	5d59      	ldrb	r1, [r3, r5]
  40c4d2:	68a3      	ldr	r3, [r4, #8]
  40c4d4:	3b01      	subs	r3, #1
  40c4d6:	2b00      	cmp	r3, #0
  40c4d8:	60a3      	str	r3, [r4, #8]
  40c4da:	daf0      	bge.n	40c4be <__fputwc+0x36>
  40c4dc:	69a2      	ldr	r2, [r4, #24]
  40c4de:	4293      	cmp	r3, r2
  40c4e0:	db07      	blt.n	40c4f2 <__fputwc+0x6a>
  40c4e2:	6823      	ldr	r3, [r4, #0]
  40c4e4:	7019      	strb	r1, [r3, #0]
  40c4e6:	6823      	ldr	r3, [r4, #0]
  40c4e8:	7819      	ldrb	r1, [r3, #0]
  40c4ea:	290a      	cmp	r1, #10
  40c4ec:	f103 0301 	add.w	r3, r3, #1
  40c4f0:	d1e9      	bne.n	40c4c6 <__fputwc+0x3e>
  40c4f2:	4638      	mov	r0, r7
  40c4f4:	4622      	mov	r2, r4
  40c4f6:	f7fe fedd 	bl	40b2b4 <__swbuf_r>
  40c4fa:	f1a0 30ff 	sub.w	r0, r0, #4294967295
  40c4fe:	fab0 f080 	clz	r0, r0
  40c502:	0940      	lsrs	r0, r0, #5
  40c504:	2800      	cmp	r0, #0
  40c506:	d0df      	beq.n	40c4c8 <__fputwc+0x40>
  40c508:	f04f 30ff 	mov.w	r0, #4294967295
  40c50c:	b002      	add	sp, #8
  40c50e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40c512:	89a3      	ldrh	r3, [r4, #12]
  40c514:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40c518:	81a3      	strh	r3, [r4, #12]
  40c51a:	b002      	add	sp, #8
  40c51c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40c520:	1e73      	subs	r3, r6, #1
  40c522:	2bfe      	cmp	r3, #254	; 0xfe
  40c524:	d8ba      	bhi.n	40c49c <__fputwc+0x14>
  40c526:	b2f1      	uxtb	r1, r6
  40c528:	4680      	mov	r8, r0
  40c52a:	f88d 1004 	strb.w	r1, [sp, #4]
  40c52e:	e7c4      	b.n	40c4ba <__fputwc+0x32>
  40c530:	4630      	mov	r0, r6
  40c532:	b002      	add	sp, #8
  40c534:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0040c538 <_fputwc_r>:
  40c538:	8993      	ldrh	r3, [r2, #12]
  40c53a:	f413 5f00 	tst.w	r3, #8192	; 0x2000
  40c53e:	d10b      	bne.n	40c558 <_fputwc_r+0x20>
  40c540:	b410      	push	{r4}
  40c542:	6e54      	ldr	r4, [r2, #100]	; 0x64
  40c544:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
  40c548:	f444 5400 	orr.w	r4, r4, #8192	; 0x2000
  40c54c:	6654      	str	r4, [r2, #100]	; 0x64
  40c54e:	8193      	strh	r3, [r2, #12]
  40c550:	f85d 4b04 	ldr.w	r4, [sp], #4
  40c554:	f7ff bf98 	b.w	40c488 <__fputwc>
  40c558:	f7ff bf96 	b.w	40c488 <__fputwc>

0040c55c <_isatty_r>:
  40c55c:	b538      	push	{r3, r4, r5, lr}
  40c55e:	4c07      	ldr	r4, [pc, #28]	; (40c57c <_isatty_r+0x20>)
  40c560:	2300      	movs	r3, #0
  40c562:	4605      	mov	r5, r0
  40c564:	4608      	mov	r0, r1
  40c566:	6023      	str	r3, [r4, #0]
  40c568:	f7f4 ff40 	bl	4013ec <_isatty>
  40c56c:	1c43      	adds	r3, r0, #1
  40c56e:	d000      	beq.n	40c572 <_isatty_r+0x16>
  40c570:	bd38      	pop	{r3, r4, r5, pc}
  40c572:	6823      	ldr	r3, [r4, #0]
  40c574:	2b00      	cmp	r3, #0
  40c576:	d0fb      	beq.n	40c570 <_isatty_r+0x14>
  40c578:	602b      	str	r3, [r5, #0]
  40c57a:	bd38      	pop	{r3, r4, r5, pc}
  40c57c:	20000d6c 	.word	0x20000d6c

0040c580 <__locale_charset>:
  40c580:	4800      	ldr	r0, [pc, #0]	; (40c584 <__locale_charset+0x4>)
  40c582:	4770      	bx	lr
  40c584:	2000088c 	.word	0x2000088c

0040c588 <__locale_mb_cur_max>:
  40c588:	4b01      	ldr	r3, [pc, #4]	; (40c590 <__locale_mb_cur_max+0x8>)
  40c58a:	6818      	ldr	r0, [r3, #0]
  40c58c:	4770      	bx	lr
  40c58e:	bf00      	nop
  40c590:	200008ac 	.word	0x200008ac

0040c594 <_localeconv_r>:
  40c594:	4800      	ldr	r0, [pc, #0]	; (40c598 <_localeconv_r+0x4>)
  40c596:	4770      	bx	lr
  40c598:	20000854 	.word	0x20000854

0040c59c <_lseek_r>:
  40c59c:	b570      	push	{r4, r5, r6, lr}
  40c59e:	4c08      	ldr	r4, [pc, #32]	; (40c5c0 <_lseek_r+0x24>)
  40c5a0:	4606      	mov	r6, r0
  40c5a2:	2500      	movs	r5, #0
  40c5a4:	4608      	mov	r0, r1
  40c5a6:	4611      	mov	r1, r2
  40c5a8:	461a      	mov	r2, r3
  40c5aa:	6025      	str	r5, [r4, #0]
  40c5ac:	f7f4 ff20 	bl	4013f0 <_lseek>
  40c5b0:	1c43      	adds	r3, r0, #1
  40c5b2:	d000      	beq.n	40c5b6 <_lseek_r+0x1a>
  40c5b4:	bd70      	pop	{r4, r5, r6, pc}
  40c5b6:	6823      	ldr	r3, [r4, #0]
  40c5b8:	2b00      	cmp	r3, #0
  40c5ba:	d0fb      	beq.n	40c5b4 <_lseek_r+0x18>
  40c5bc:	6033      	str	r3, [r6, #0]
  40c5be:	bd70      	pop	{r4, r5, r6, pc}
  40c5c0:	20000d6c 	.word	0x20000d6c

0040c5c4 <_Balloc>:
  40c5c4:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
  40c5c6:	b570      	push	{r4, r5, r6, lr}
  40c5c8:	4605      	mov	r5, r0
  40c5ca:	460c      	mov	r4, r1
  40c5cc:	b14b      	cbz	r3, 40c5e2 <_Balloc+0x1e>
  40c5ce:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
  40c5d2:	b180      	cbz	r0, 40c5f6 <_Balloc+0x32>
  40c5d4:	6802      	ldr	r2, [r0, #0]
  40c5d6:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
  40c5da:	2300      	movs	r3, #0
  40c5dc:	6103      	str	r3, [r0, #16]
  40c5de:	60c3      	str	r3, [r0, #12]
  40c5e0:	bd70      	pop	{r4, r5, r6, pc}
  40c5e2:	2104      	movs	r1, #4
  40c5e4:	2221      	movs	r2, #33	; 0x21
  40c5e6:	f7f9 fea5 	bl	406334 <_calloc_r>
  40c5ea:	64e8      	str	r0, [r5, #76]	; 0x4c
  40c5ec:	4603      	mov	r3, r0
  40c5ee:	2800      	cmp	r0, #0
  40c5f0:	d1ed      	bne.n	40c5ce <_Balloc+0xa>
  40c5f2:	2000      	movs	r0, #0
  40c5f4:	bd70      	pop	{r4, r5, r6, pc}
  40c5f6:	2101      	movs	r1, #1
  40c5f8:	fa01 f604 	lsl.w	r6, r1, r4
  40c5fc:	1d72      	adds	r2, r6, #5
  40c5fe:	4628      	mov	r0, r5
  40c600:	0092      	lsls	r2, r2, #2
  40c602:	f7f9 fe97 	bl	406334 <_calloc_r>
  40c606:	2800      	cmp	r0, #0
  40c608:	d0f3      	beq.n	40c5f2 <_Balloc+0x2e>
  40c60a:	6044      	str	r4, [r0, #4]
  40c60c:	6086      	str	r6, [r0, #8]
  40c60e:	e7e4      	b.n	40c5da <_Balloc+0x16>

0040c610 <_Bfree>:
  40c610:	b131      	cbz	r1, 40c620 <_Bfree+0x10>
  40c612:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
  40c614:	684a      	ldr	r2, [r1, #4]
  40c616:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
  40c61a:	6008      	str	r0, [r1, #0]
  40c61c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  40c620:	4770      	bx	lr
  40c622:	bf00      	nop

0040c624 <__multadd>:
  40c624:	b5f0      	push	{r4, r5, r6, r7, lr}
  40c626:	690c      	ldr	r4, [r1, #16]
  40c628:	b083      	sub	sp, #12
  40c62a:	460d      	mov	r5, r1
  40c62c:	4606      	mov	r6, r0
  40c62e:	f101 0e14 	add.w	lr, r1, #20
  40c632:	2700      	movs	r7, #0
  40c634:	f8de 1000 	ldr.w	r1, [lr]
  40c638:	b288      	uxth	r0, r1
  40c63a:	0c09      	lsrs	r1, r1, #16
  40c63c:	fb02 3300 	mla	r3, r2, r0, r3
  40c640:	fb02 f101 	mul.w	r1, r2, r1
  40c644:	eb01 4113 	add.w	r1, r1, r3, lsr #16
  40c648:	3701      	adds	r7, #1
  40c64a:	b29b      	uxth	r3, r3
  40c64c:	eb03 4301 	add.w	r3, r3, r1, lsl #16
  40c650:	42bc      	cmp	r4, r7
  40c652:	f84e 3b04 	str.w	r3, [lr], #4
  40c656:	ea4f 4311 	mov.w	r3, r1, lsr #16
  40c65a:	dceb      	bgt.n	40c634 <__multadd+0x10>
  40c65c:	b13b      	cbz	r3, 40c66e <__multadd+0x4a>
  40c65e:	68aa      	ldr	r2, [r5, #8]
  40c660:	4294      	cmp	r4, r2
  40c662:	da07      	bge.n	40c674 <__multadd+0x50>
  40c664:	eb05 0284 	add.w	r2, r5, r4, lsl #2
  40c668:	3401      	adds	r4, #1
  40c66a:	6153      	str	r3, [r2, #20]
  40c66c:	612c      	str	r4, [r5, #16]
  40c66e:	4628      	mov	r0, r5
  40c670:	b003      	add	sp, #12
  40c672:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40c674:	6869      	ldr	r1, [r5, #4]
  40c676:	9301      	str	r3, [sp, #4]
  40c678:	3101      	adds	r1, #1
  40c67a:	4630      	mov	r0, r6
  40c67c:	f7ff ffa2 	bl	40c5c4 <_Balloc>
  40c680:	692a      	ldr	r2, [r5, #16]
  40c682:	3202      	adds	r2, #2
  40c684:	f105 010c 	add.w	r1, r5, #12
  40c688:	4607      	mov	r7, r0
  40c68a:	0092      	lsls	r2, r2, #2
  40c68c:	300c      	adds	r0, #12
  40c68e:	f7fa feed 	bl	40746c <memcpy>
  40c692:	6cf2      	ldr	r2, [r6, #76]	; 0x4c
  40c694:	6869      	ldr	r1, [r5, #4]
  40c696:	9b01      	ldr	r3, [sp, #4]
  40c698:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
  40c69c:	6028      	str	r0, [r5, #0]
  40c69e:	f842 5021 	str.w	r5, [r2, r1, lsl #2]
  40c6a2:	463d      	mov	r5, r7
  40c6a4:	e7de      	b.n	40c664 <__multadd+0x40>
  40c6a6:	bf00      	nop

0040c6a8 <__hi0bits>:
  40c6a8:	0c03      	lsrs	r3, r0, #16
  40c6aa:	041b      	lsls	r3, r3, #16
  40c6ac:	b9b3      	cbnz	r3, 40c6dc <__hi0bits+0x34>
  40c6ae:	0400      	lsls	r0, r0, #16
  40c6b0:	2310      	movs	r3, #16
  40c6b2:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
  40c6b6:	bf04      	itt	eq
  40c6b8:	0200      	lsleq	r0, r0, #8
  40c6ba:	3308      	addeq	r3, #8
  40c6bc:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
  40c6c0:	bf04      	itt	eq
  40c6c2:	0100      	lsleq	r0, r0, #4
  40c6c4:	3304      	addeq	r3, #4
  40c6c6:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
  40c6ca:	bf04      	itt	eq
  40c6cc:	0080      	lsleq	r0, r0, #2
  40c6ce:	3302      	addeq	r3, #2
  40c6d0:	2800      	cmp	r0, #0
  40c6d2:	db07      	blt.n	40c6e4 <__hi0bits+0x3c>
  40c6d4:	0042      	lsls	r2, r0, #1
  40c6d6:	d403      	bmi.n	40c6e0 <__hi0bits+0x38>
  40c6d8:	2020      	movs	r0, #32
  40c6da:	4770      	bx	lr
  40c6dc:	2300      	movs	r3, #0
  40c6de:	e7e8      	b.n	40c6b2 <__hi0bits+0xa>
  40c6e0:	1c58      	adds	r0, r3, #1
  40c6e2:	4770      	bx	lr
  40c6e4:	4618      	mov	r0, r3
  40c6e6:	4770      	bx	lr

0040c6e8 <__lo0bits>:
  40c6e8:	6803      	ldr	r3, [r0, #0]
  40c6ea:	f013 0207 	ands.w	r2, r3, #7
  40c6ee:	d007      	beq.n	40c700 <__lo0bits+0x18>
  40c6f0:	07d9      	lsls	r1, r3, #31
  40c6f2:	d420      	bmi.n	40c736 <__lo0bits+0x4e>
  40c6f4:	079a      	lsls	r2, r3, #30
  40c6f6:	d420      	bmi.n	40c73a <__lo0bits+0x52>
  40c6f8:	089b      	lsrs	r3, r3, #2
  40c6fa:	6003      	str	r3, [r0, #0]
  40c6fc:	2002      	movs	r0, #2
  40c6fe:	4770      	bx	lr
  40c700:	b299      	uxth	r1, r3
  40c702:	b909      	cbnz	r1, 40c708 <__lo0bits+0x20>
  40c704:	0c1b      	lsrs	r3, r3, #16
  40c706:	2210      	movs	r2, #16
  40c708:	f013 0fff 	tst.w	r3, #255	; 0xff
  40c70c:	bf04      	itt	eq
  40c70e:	0a1b      	lsreq	r3, r3, #8
  40c710:	3208      	addeq	r2, #8
  40c712:	0719      	lsls	r1, r3, #28
  40c714:	bf04      	itt	eq
  40c716:	091b      	lsreq	r3, r3, #4
  40c718:	3204      	addeq	r2, #4
  40c71a:	0799      	lsls	r1, r3, #30
  40c71c:	bf04      	itt	eq
  40c71e:	089b      	lsreq	r3, r3, #2
  40c720:	3202      	addeq	r2, #2
  40c722:	07d9      	lsls	r1, r3, #31
  40c724:	d404      	bmi.n	40c730 <__lo0bits+0x48>
  40c726:	085b      	lsrs	r3, r3, #1
  40c728:	d101      	bne.n	40c72e <__lo0bits+0x46>
  40c72a:	2020      	movs	r0, #32
  40c72c:	4770      	bx	lr
  40c72e:	3201      	adds	r2, #1
  40c730:	6003      	str	r3, [r0, #0]
  40c732:	4610      	mov	r0, r2
  40c734:	4770      	bx	lr
  40c736:	2000      	movs	r0, #0
  40c738:	4770      	bx	lr
  40c73a:	085b      	lsrs	r3, r3, #1
  40c73c:	6003      	str	r3, [r0, #0]
  40c73e:	2001      	movs	r0, #1
  40c740:	4770      	bx	lr
  40c742:	bf00      	nop

0040c744 <__i2b>:
  40c744:	b510      	push	{r4, lr}
  40c746:	460c      	mov	r4, r1
  40c748:	2101      	movs	r1, #1
  40c74a:	f7ff ff3b 	bl	40c5c4 <_Balloc>
  40c74e:	2201      	movs	r2, #1
  40c750:	6144      	str	r4, [r0, #20]
  40c752:	6102      	str	r2, [r0, #16]
  40c754:	bd10      	pop	{r4, pc}
  40c756:	bf00      	nop

0040c758 <__multiply>:
  40c758:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40c75c:	690f      	ldr	r7, [r1, #16]
  40c75e:	6916      	ldr	r6, [r2, #16]
  40c760:	42b7      	cmp	r7, r6
  40c762:	b083      	sub	sp, #12
  40c764:	460d      	mov	r5, r1
  40c766:	4614      	mov	r4, r2
  40c768:	f2c0 808d 	blt.w	40c886 <__multiply+0x12e>
  40c76c:	4633      	mov	r3, r6
  40c76e:	463e      	mov	r6, r7
  40c770:	461f      	mov	r7, r3
  40c772:	68ab      	ldr	r3, [r5, #8]
  40c774:	6869      	ldr	r1, [r5, #4]
  40c776:	eb06 0807 	add.w	r8, r6, r7
  40c77a:	4598      	cmp	r8, r3
  40c77c:	bfc8      	it	gt
  40c77e:	3101      	addgt	r1, #1
  40c780:	f7ff ff20 	bl	40c5c4 <_Balloc>
  40c784:	f100 0c14 	add.w	ip, r0, #20
  40c788:	eb0c 0988 	add.w	r9, ip, r8, lsl #2
  40c78c:	45cc      	cmp	ip, r9
  40c78e:	9000      	str	r0, [sp, #0]
  40c790:	d205      	bcs.n	40c79e <__multiply+0x46>
  40c792:	4663      	mov	r3, ip
  40c794:	2100      	movs	r1, #0
  40c796:	f843 1b04 	str.w	r1, [r3], #4
  40c79a:	4599      	cmp	r9, r3
  40c79c:	d8fb      	bhi.n	40c796 <__multiply+0x3e>
  40c79e:	f104 0214 	add.w	r2, r4, #20
  40c7a2:	eb02 0a87 	add.w	sl, r2, r7, lsl #2
  40c7a6:	f105 0314 	add.w	r3, r5, #20
  40c7aa:	4552      	cmp	r2, sl
  40c7ac:	eb03 0e86 	add.w	lr, r3, r6, lsl #2
  40c7b0:	d254      	bcs.n	40c85c <__multiply+0x104>
  40c7b2:	f8cd 9004 	str.w	r9, [sp, #4]
  40c7b6:	4699      	mov	r9, r3
  40c7b8:	f852 3b04 	ldr.w	r3, [r2], #4
  40c7bc:	fa1f fb83 	uxth.w	fp, r3
  40c7c0:	f1bb 0f00 	cmp.w	fp, #0
  40c7c4:	d020      	beq.n	40c808 <__multiply+0xb0>
  40c7c6:	2000      	movs	r0, #0
  40c7c8:	464f      	mov	r7, r9
  40c7ca:	4666      	mov	r6, ip
  40c7cc:	4605      	mov	r5, r0
  40c7ce:	e000      	b.n	40c7d2 <__multiply+0x7a>
  40c7d0:	461e      	mov	r6, r3
  40c7d2:	f857 4b04 	ldr.w	r4, [r7], #4
  40c7d6:	6830      	ldr	r0, [r6, #0]
  40c7d8:	b2a1      	uxth	r1, r4
  40c7da:	b283      	uxth	r3, r0
  40c7dc:	fb0b 3101 	mla	r1, fp, r1, r3
  40c7e0:	0c24      	lsrs	r4, r4, #16
  40c7e2:	0c00      	lsrs	r0, r0, #16
  40c7e4:	194b      	adds	r3, r1, r5
  40c7e6:	fb0b 0004 	mla	r0, fp, r4, r0
  40c7ea:	eb00 4013 	add.w	r0, r0, r3, lsr #16
  40c7ee:	b299      	uxth	r1, r3
  40c7f0:	4633      	mov	r3, r6
  40c7f2:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
  40c7f6:	45be      	cmp	lr, r7
  40c7f8:	ea4f 4510 	mov.w	r5, r0, lsr #16
  40c7fc:	f843 1b04 	str.w	r1, [r3], #4
  40c800:	d8e6      	bhi.n	40c7d0 <__multiply+0x78>
  40c802:	6075      	str	r5, [r6, #4]
  40c804:	f852 3c04 	ldr.w	r3, [r2, #-4]
  40c808:	ea5f 4b13 	movs.w	fp, r3, lsr #16
  40c80c:	d020      	beq.n	40c850 <__multiply+0xf8>
  40c80e:	f8dc 3000 	ldr.w	r3, [ip]
  40c812:	4667      	mov	r7, ip
  40c814:	4618      	mov	r0, r3
  40c816:	464d      	mov	r5, r9
  40c818:	2100      	movs	r1, #0
  40c81a:	e000      	b.n	40c81e <__multiply+0xc6>
  40c81c:	4637      	mov	r7, r6
  40c81e:	882c      	ldrh	r4, [r5, #0]
  40c820:	0c00      	lsrs	r0, r0, #16
  40c822:	fb0b 0004 	mla	r0, fp, r4, r0
  40c826:	4401      	add	r1, r0
  40c828:	b29c      	uxth	r4, r3
  40c82a:	463e      	mov	r6, r7
  40c82c:	ea44 4301 	orr.w	r3, r4, r1, lsl #16
  40c830:	f846 3b04 	str.w	r3, [r6], #4
  40c834:	6878      	ldr	r0, [r7, #4]
  40c836:	f855 4b04 	ldr.w	r4, [r5], #4
  40c83a:	b283      	uxth	r3, r0
  40c83c:	0c24      	lsrs	r4, r4, #16
  40c83e:	fb0b 3404 	mla	r4, fp, r4, r3
  40c842:	eb04 4311 	add.w	r3, r4, r1, lsr #16
  40c846:	45ae      	cmp	lr, r5
  40c848:	ea4f 4113 	mov.w	r1, r3, lsr #16
  40c84c:	d8e6      	bhi.n	40c81c <__multiply+0xc4>
  40c84e:	607b      	str	r3, [r7, #4]
  40c850:	4592      	cmp	sl, r2
  40c852:	f10c 0c04 	add.w	ip, ip, #4
  40c856:	d8af      	bhi.n	40c7b8 <__multiply+0x60>
  40c858:	f8dd 9004 	ldr.w	r9, [sp, #4]
  40c85c:	f1b8 0f00 	cmp.w	r8, #0
  40c860:	dd0b      	ble.n	40c87a <__multiply+0x122>
  40c862:	f859 3c04 	ldr.w	r3, [r9, #-4]
  40c866:	f1a9 0904 	sub.w	r9, r9, #4
  40c86a:	b11b      	cbz	r3, 40c874 <__multiply+0x11c>
  40c86c:	e005      	b.n	40c87a <__multiply+0x122>
  40c86e:	f859 3d04 	ldr.w	r3, [r9, #-4]!
  40c872:	b913      	cbnz	r3, 40c87a <__multiply+0x122>
  40c874:	f1b8 0801 	subs.w	r8, r8, #1
  40c878:	d1f9      	bne.n	40c86e <__multiply+0x116>
  40c87a:	9800      	ldr	r0, [sp, #0]
  40c87c:	f8c0 8010 	str.w	r8, [r0, #16]
  40c880:	b003      	add	sp, #12
  40c882:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40c886:	4615      	mov	r5, r2
  40c888:	460c      	mov	r4, r1
  40c88a:	e772      	b.n	40c772 <__multiply+0x1a>

0040c88c <__pow5mult>:
  40c88c:	f012 0303 	ands.w	r3, r2, #3
  40c890:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40c894:	4614      	mov	r4, r2
  40c896:	4607      	mov	r7, r0
  40c898:	460e      	mov	r6, r1
  40c89a:	d12d      	bne.n	40c8f8 <__pow5mult+0x6c>
  40c89c:	10a4      	asrs	r4, r4, #2
  40c89e:	d01c      	beq.n	40c8da <__pow5mult+0x4e>
  40c8a0:	6cbd      	ldr	r5, [r7, #72]	; 0x48
  40c8a2:	b395      	cbz	r5, 40c90a <__pow5mult+0x7e>
  40c8a4:	07e3      	lsls	r3, r4, #31
  40c8a6:	f04f 0800 	mov.w	r8, #0
  40c8aa:	d406      	bmi.n	40c8ba <__pow5mult+0x2e>
  40c8ac:	1064      	asrs	r4, r4, #1
  40c8ae:	d014      	beq.n	40c8da <__pow5mult+0x4e>
  40c8b0:	6828      	ldr	r0, [r5, #0]
  40c8b2:	b1a8      	cbz	r0, 40c8e0 <__pow5mult+0x54>
  40c8b4:	4605      	mov	r5, r0
  40c8b6:	07e3      	lsls	r3, r4, #31
  40c8b8:	d5f8      	bpl.n	40c8ac <__pow5mult+0x20>
  40c8ba:	4638      	mov	r0, r7
  40c8bc:	4631      	mov	r1, r6
  40c8be:	462a      	mov	r2, r5
  40c8c0:	f7ff ff4a 	bl	40c758 <__multiply>
  40c8c4:	b1b6      	cbz	r6, 40c8f4 <__pow5mult+0x68>
  40c8c6:	6872      	ldr	r2, [r6, #4]
  40c8c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  40c8ca:	1064      	asrs	r4, r4, #1
  40c8cc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
  40c8d0:	6031      	str	r1, [r6, #0]
  40c8d2:	f843 6022 	str.w	r6, [r3, r2, lsl #2]
  40c8d6:	4606      	mov	r6, r0
  40c8d8:	d1ea      	bne.n	40c8b0 <__pow5mult+0x24>
  40c8da:	4630      	mov	r0, r6
  40c8dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40c8e0:	4629      	mov	r1, r5
  40c8e2:	462a      	mov	r2, r5
  40c8e4:	4638      	mov	r0, r7
  40c8e6:	f7ff ff37 	bl	40c758 <__multiply>
  40c8ea:	6028      	str	r0, [r5, #0]
  40c8ec:	f8c0 8000 	str.w	r8, [r0]
  40c8f0:	4605      	mov	r5, r0
  40c8f2:	e7e0      	b.n	40c8b6 <__pow5mult+0x2a>
  40c8f4:	4606      	mov	r6, r0
  40c8f6:	e7d9      	b.n	40c8ac <__pow5mult+0x20>
  40c8f8:	1e5a      	subs	r2, r3, #1
  40c8fa:	4d0b      	ldr	r5, [pc, #44]	; (40c928 <__pow5mult+0x9c>)
  40c8fc:	2300      	movs	r3, #0
  40c8fe:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
  40c902:	f7ff fe8f 	bl	40c624 <__multadd>
  40c906:	4606      	mov	r6, r0
  40c908:	e7c8      	b.n	40c89c <__pow5mult+0x10>
  40c90a:	2101      	movs	r1, #1
  40c90c:	4638      	mov	r0, r7
  40c90e:	f7ff fe59 	bl	40c5c4 <_Balloc>
  40c912:	f240 2171 	movw	r1, #625	; 0x271
  40c916:	2201      	movs	r2, #1
  40c918:	2300      	movs	r3, #0
  40c91a:	6141      	str	r1, [r0, #20]
  40c91c:	6102      	str	r2, [r0, #16]
  40c91e:	4605      	mov	r5, r0
  40c920:	64b8      	str	r0, [r7, #72]	; 0x48
  40c922:	6003      	str	r3, [r0, #0]
  40c924:	e7be      	b.n	40c8a4 <__pow5mult+0x18>
  40c926:	bf00      	nop
  40c928:	0040fff0 	.word	0x0040fff0

0040c92c <__lshift>:
  40c92c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  40c930:	690f      	ldr	r7, [r1, #16]
  40c932:	688b      	ldr	r3, [r1, #8]
  40c934:	ea4f 1962 	mov.w	r9, r2, asr #5
  40c938:	444f      	add	r7, r9
  40c93a:	1c7d      	adds	r5, r7, #1
  40c93c:	429d      	cmp	r5, r3
  40c93e:	460e      	mov	r6, r1
  40c940:	4614      	mov	r4, r2
  40c942:	6849      	ldr	r1, [r1, #4]
  40c944:	4680      	mov	r8, r0
  40c946:	dd04      	ble.n	40c952 <__lshift+0x26>
  40c948:	005b      	lsls	r3, r3, #1
  40c94a:	429d      	cmp	r5, r3
  40c94c:	f101 0101 	add.w	r1, r1, #1
  40c950:	dcfa      	bgt.n	40c948 <__lshift+0x1c>
  40c952:	4640      	mov	r0, r8
  40c954:	f7ff fe36 	bl	40c5c4 <_Balloc>
  40c958:	f1b9 0f00 	cmp.w	r9, #0
  40c95c:	f100 0114 	add.w	r1, r0, #20
  40c960:	dd09      	ble.n	40c976 <__lshift+0x4a>
  40c962:	2300      	movs	r3, #0
  40c964:	469e      	mov	lr, r3
  40c966:	460a      	mov	r2, r1
  40c968:	3301      	adds	r3, #1
  40c96a:	454b      	cmp	r3, r9
  40c96c:	f842 eb04 	str.w	lr, [r2], #4
  40c970:	d1fa      	bne.n	40c968 <__lshift+0x3c>
  40c972:	eb01 0183 	add.w	r1, r1, r3, lsl #2
  40c976:	6932      	ldr	r2, [r6, #16]
  40c978:	f106 0314 	add.w	r3, r6, #20
  40c97c:	f014 0c1f 	ands.w	ip, r4, #31
  40c980:	eb03 0e82 	add.w	lr, r3, r2, lsl #2
  40c984:	d01f      	beq.n	40c9c6 <__lshift+0x9a>
  40c986:	f1cc 0920 	rsb	r9, ip, #32
  40c98a:	2200      	movs	r2, #0
  40c98c:	681c      	ldr	r4, [r3, #0]
  40c98e:	fa04 f40c 	lsl.w	r4, r4, ip
  40c992:	4314      	orrs	r4, r2
  40c994:	468a      	mov	sl, r1
  40c996:	f841 4b04 	str.w	r4, [r1], #4
  40c99a:	f853 4b04 	ldr.w	r4, [r3], #4
  40c99e:	459e      	cmp	lr, r3
  40c9a0:	fa24 f209 	lsr.w	r2, r4, r9
  40c9a4:	d8f2      	bhi.n	40c98c <__lshift+0x60>
  40c9a6:	f8ca 2004 	str.w	r2, [sl, #4]
  40c9aa:	b102      	cbz	r2, 40c9ae <__lshift+0x82>
  40c9ac:	1cbd      	adds	r5, r7, #2
  40c9ae:	f8d8 304c 	ldr.w	r3, [r8, #76]	; 0x4c
  40c9b2:	6872      	ldr	r2, [r6, #4]
  40c9b4:	3d01      	subs	r5, #1
  40c9b6:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
  40c9ba:	6105      	str	r5, [r0, #16]
  40c9bc:	6031      	str	r1, [r6, #0]
  40c9be:	f843 6022 	str.w	r6, [r3, r2, lsl #2]
  40c9c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40c9c6:	3904      	subs	r1, #4
  40c9c8:	f853 2b04 	ldr.w	r2, [r3], #4
  40c9cc:	f841 2f04 	str.w	r2, [r1, #4]!
  40c9d0:	459e      	cmp	lr, r3
  40c9d2:	d8f9      	bhi.n	40c9c8 <__lshift+0x9c>
  40c9d4:	e7eb      	b.n	40c9ae <__lshift+0x82>
  40c9d6:	bf00      	nop

0040c9d8 <__mcmp>:
  40c9d8:	6902      	ldr	r2, [r0, #16]
  40c9da:	690b      	ldr	r3, [r1, #16]
  40c9dc:	1ad2      	subs	r2, r2, r3
  40c9de:	d113      	bne.n	40ca08 <__mcmp+0x30>
  40c9e0:	009b      	lsls	r3, r3, #2
  40c9e2:	3014      	adds	r0, #20
  40c9e4:	3114      	adds	r1, #20
  40c9e6:	4419      	add	r1, r3
  40c9e8:	b410      	push	{r4}
  40c9ea:	4403      	add	r3, r0
  40c9ec:	e001      	b.n	40c9f2 <__mcmp+0x1a>
  40c9ee:	4298      	cmp	r0, r3
  40c9f0:	d20c      	bcs.n	40ca0c <__mcmp+0x34>
  40c9f2:	f853 4d04 	ldr.w	r4, [r3, #-4]!
  40c9f6:	f851 2d04 	ldr.w	r2, [r1, #-4]!
  40c9fa:	4294      	cmp	r4, r2
  40c9fc:	d0f7      	beq.n	40c9ee <__mcmp+0x16>
  40c9fe:	d309      	bcc.n	40ca14 <__mcmp+0x3c>
  40ca00:	2001      	movs	r0, #1
  40ca02:	f85d 4b04 	ldr.w	r4, [sp], #4
  40ca06:	4770      	bx	lr
  40ca08:	4610      	mov	r0, r2
  40ca0a:	4770      	bx	lr
  40ca0c:	2000      	movs	r0, #0
  40ca0e:	f85d 4b04 	ldr.w	r4, [sp], #4
  40ca12:	4770      	bx	lr
  40ca14:	f04f 30ff 	mov.w	r0, #4294967295
  40ca18:	f85d 4b04 	ldr.w	r4, [sp], #4
  40ca1c:	4770      	bx	lr
  40ca1e:	bf00      	nop

0040ca20 <__mdiff>:
  40ca20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40ca24:	460e      	mov	r6, r1
  40ca26:	4605      	mov	r5, r0
  40ca28:	4611      	mov	r1, r2
  40ca2a:	4630      	mov	r0, r6
  40ca2c:	4614      	mov	r4, r2
  40ca2e:	f7ff ffd3 	bl	40c9d8 <__mcmp>
  40ca32:	1e07      	subs	r7, r0, #0
  40ca34:	d054      	beq.n	40cae0 <__mdiff+0xc0>
  40ca36:	db4d      	blt.n	40cad4 <__mdiff+0xb4>
  40ca38:	f04f 0800 	mov.w	r8, #0
  40ca3c:	6871      	ldr	r1, [r6, #4]
  40ca3e:	4628      	mov	r0, r5
  40ca40:	f7ff fdc0 	bl	40c5c4 <_Balloc>
  40ca44:	6937      	ldr	r7, [r6, #16]
  40ca46:	6923      	ldr	r3, [r4, #16]
  40ca48:	f8c0 800c 	str.w	r8, [r0, #12]
  40ca4c:	3614      	adds	r6, #20
  40ca4e:	f104 0214 	add.w	r2, r4, #20
  40ca52:	eb02 0c83 	add.w	ip, r2, r3, lsl #2
  40ca56:	f100 0514 	add.w	r5, r0, #20
  40ca5a:	eb06 0e87 	add.w	lr, r6, r7, lsl #2
  40ca5e:	2300      	movs	r3, #0
  40ca60:	f856 8b04 	ldr.w	r8, [r6], #4
  40ca64:	f852 4b04 	ldr.w	r4, [r2], #4
  40ca68:	fa13 f388 	uxtah	r3, r3, r8
  40ca6c:	b2a1      	uxth	r1, r4
  40ca6e:	0c24      	lsrs	r4, r4, #16
  40ca70:	1a59      	subs	r1, r3, r1
  40ca72:	ebc4 4318 	rsb	r3, r4, r8, lsr #16
  40ca76:	eb03 4321 	add.w	r3, r3, r1, asr #16
  40ca7a:	b289      	uxth	r1, r1
  40ca7c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
  40ca80:	4594      	cmp	ip, r2
  40ca82:	f845 1b04 	str.w	r1, [r5], #4
  40ca86:	ea4f 4323 	mov.w	r3, r3, asr #16
  40ca8a:	4634      	mov	r4, r6
  40ca8c:	d8e8      	bhi.n	40ca60 <__mdiff+0x40>
  40ca8e:	45b6      	cmp	lr, r6
  40ca90:	46ac      	mov	ip, r5
  40ca92:	d915      	bls.n	40cac0 <__mdiff+0xa0>
  40ca94:	f854 2b04 	ldr.w	r2, [r4], #4
  40ca98:	fa13 f182 	uxtah	r1, r3, r2
  40ca9c:	0c13      	lsrs	r3, r2, #16
  40ca9e:	eb03 4321 	add.w	r3, r3, r1, asr #16
  40caa2:	b289      	uxth	r1, r1
  40caa4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
  40caa8:	45a6      	cmp	lr, r4
  40caaa:	f845 1b04 	str.w	r1, [r5], #4
  40caae:	ea4f 4323 	mov.w	r3, r3, asr #16
  40cab2:	d8ef      	bhi.n	40ca94 <__mdiff+0x74>
  40cab4:	43f6      	mvns	r6, r6
  40cab6:	4476      	add	r6, lr
  40cab8:	f026 0503 	bic.w	r5, r6, #3
  40cabc:	3504      	adds	r5, #4
  40cabe:	4465      	add	r5, ip
  40cac0:	3d04      	subs	r5, #4
  40cac2:	b921      	cbnz	r1, 40cace <__mdiff+0xae>
  40cac4:	f855 3d04 	ldr.w	r3, [r5, #-4]!
  40cac8:	3f01      	subs	r7, #1
  40caca:	2b00      	cmp	r3, #0
  40cacc:	d0fa      	beq.n	40cac4 <__mdiff+0xa4>
  40cace:	6107      	str	r7, [r0, #16]
  40cad0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40cad4:	4633      	mov	r3, r6
  40cad6:	f04f 0801 	mov.w	r8, #1
  40cada:	4626      	mov	r6, r4
  40cadc:	461c      	mov	r4, r3
  40cade:	e7ad      	b.n	40ca3c <__mdiff+0x1c>
  40cae0:	4628      	mov	r0, r5
  40cae2:	4639      	mov	r1, r7
  40cae4:	f7ff fd6e 	bl	40c5c4 <_Balloc>
  40cae8:	2301      	movs	r3, #1
  40caea:	6147      	str	r7, [r0, #20]
  40caec:	6103      	str	r3, [r0, #16]
  40caee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40caf2:	bf00      	nop

0040caf4 <__d2b>:
  40caf4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40caf8:	b082      	sub	sp, #8
  40cafa:	2101      	movs	r1, #1
  40cafc:	461c      	mov	r4, r3
  40cafe:	f3c3 570a 	ubfx	r7, r3, #20, #11
  40cb02:	4615      	mov	r5, r2
  40cb04:	9e08      	ldr	r6, [sp, #32]
  40cb06:	f7ff fd5d 	bl	40c5c4 <_Balloc>
  40cb0a:	f3c4 0413 	ubfx	r4, r4, #0, #20
  40cb0e:	4680      	mov	r8, r0
  40cb10:	b10f      	cbz	r7, 40cb16 <__d2b+0x22>
  40cb12:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
  40cb16:	9401      	str	r4, [sp, #4]
  40cb18:	b31d      	cbz	r5, 40cb62 <__d2b+0x6e>
  40cb1a:	a802      	add	r0, sp, #8
  40cb1c:	f840 5d08 	str.w	r5, [r0, #-8]!
  40cb20:	f7ff fde2 	bl	40c6e8 <__lo0bits>
  40cb24:	2800      	cmp	r0, #0
  40cb26:	d134      	bne.n	40cb92 <__d2b+0x9e>
  40cb28:	e89d 000c 	ldmia.w	sp, {r2, r3}
  40cb2c:	f8c8 2014 	str.w	r2, [r8, #20]
  40cb30:	2b00      	cmp	r3, #0
  40cb32:	bf14      	ite	ne
  40cb34:	2402      	movne	r4, #2
  40cb36:	2401      	moveq	r4, #1
  40cb38:	f8c8 3018 	str.w	r3, [r8, #24]
  40cb3c:	f8c8 4010 	str.w	r4, [r8, #16]
  40cb40:	b9df      	cbnz	r7, 40cb7a <__d2b+0x86>
  40cb42:	eb08 0384 	add.w	r3, r8, r4, lsl #2
  40cb46:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
  40cb4a:	6030      	str	r0, [r6, #0]
  40cb4c:	6918      	ldr	r0, [r3, #16]
  40cb4e:	f7ff fdab 	bl	40c6a8 <__hi0bits>
  40cb52:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40cb54:	ebc0 1044 	rsb	r0, r0, r4, lsl #5
  40cb58:	6018      	str	r0, [r3, #0]
  40cb5a:	4640      	mov	r0, r8
  40cb5c:	b002      	add	sp, #8
  40cb5e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40cb62:	a801      	add	r0, sp, #4
  40cb64:	f7ff fdc0 	bl	40c6e8 <__lo0bits>
  40cb68:	2401      	movs	r4, #1
  40cb6a:	9b01      	ldr	r3, [sp, #4]
  40cb6c:	f8c8 3014 	str.w	r3, [r8, #20]
  40cb70:	3020      	adds	r0, #32
  40cb72:	f8c8 4010 	str.w	r4, [r8, #16]
  40cb76:	2f00      	cmp	r7, #0
  40cb78:	d0e3      	beq.n	40cb42 <__d2b+0x4e>
  40cb7a:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40cb7c:	f2a7 4733 	subw	r7, r7, #1075	; 0x433
  40cb80:	4407      	add	r7, r0
  40cb82:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
  40cb86:	6037      	str	r7, [r6, #0]
  40cb88:	6018      	str	r0, [r3, #0]
  40cb8a:	4640      	mov	r0, r8
  40cb8c:	b002      	add	sp, #8
  40cb8e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40cb92:	e89d 000c 	ldmia.w	sp, {r2, r3}
  40cb96:	f1c0 0120 	rsb	r1, r0, #32
  40cb9a:	fa03 f101 	lsl.w	r1, r3, r1
  40cb9e:	430a      	orrs	r2, r1
  40cba0:	40c3      	lsrs	r3, r0
  40cba2:	9301      	str	r3, [sp, #4]
  40cba4:	f8c8 2014 	str.w	r2, [r8, #20]
  40cba8:	e7c2      	b.n	40cb30 <__d2b+0x3c>
  40cbaa:	bf00      	nop

0040cbac <_read_r>:
  40cbac:	b570      	push	{r4, r5, r6, lr}
  40cbae:	4c08      	ldr	r4, [pc, #32]	; (40cbd0 <_read_r+0x24>)
  40cbb0:	4606      	mov	r6, r0
  40cbb2:	2500      	movs	r5, #0
  40cbb4:	4608      	mov	r0, r1
  40cbb6:	4611      	mov	r1, r2
  40cbb8:	461a      	mov	r2, r3
  40cbba:	6025      	str	r5, [r4, #0]
  40cbbc:	f7f3 fae6 	bl	40018c <_read>
  40cbc0:	1c43      	adds	r3, r0, #1
  40cbc2:	d000      	beq.n	40cbc6 <_read_r+0x1a>
  40cbc4:	bd70      	pop	{r4, r5, r6, pc}
  40cbc6:	6823      	ldr	r3, [r4, #0]
  40cbc8:	2b00      	cmp	r3, #0
  40cbca:	d0fb      	beq.n	40cbc4 <_read_r+0x18>
  40cbcc:	6033      	str	r3, [r6, #0]
  40cbce:	bd70      	pop	{r4, r5, r6, pc}
  40cbd0:	20000d6c 	.word	0x20000d6c

0040cbd4 <__fpclassifyd>:
  40cbd4:	b410      	push	{r4}
  40cbd6:	f031 4400 	bics.w	r4, r1, #2147483648	; 0x80000000
  40cbda:	d008      	beq.n	40cbee <__fpclassifyd+0x1a>
  40cbdc:	4b11      	ldr	r3, [pc, #68]	; (40cc24 <__fpclassifyd+0x50>)
  40cbde:	f5a1 1280 	sub.w	r2, r1, #1048576	; 0x100000
  40cbe2:	429a      	cmp	r2, r3
  40cbe4:	d808      	bhi.n	40cbf8 <__fpclassifyd+0x24>
  40cbe6:	2004      	movs	r0, #4
  40cbe8:	f85d 4b04 	ldr.w	r4, [sp], #4
  40cbec:	4770      	bx	lr
  40cbee:	b918      	cbnz	r0, 40cbf8 <__fpclassifyd+0x24>
  40cbf0:	2002      	movs	r0, #2
  40cbf2:	f85d 4b04 	ldr.w	r4, [sp], #4
  40cbf6:	4770      	bx	lr
  40cbf8:	f101 41ff 	add.w	r1, r1, #2139095040	; 0x7f800000
  40cbfc:	4b09      	ldr	r3, [pc, #36]	; (40cc24 <__fpclassifyd+0x50>)
  40cbfe:	f501 01e0 	add.w	r1, r1, #7340032	; 0x700000
  40cc02:	4299      	cmp	r1, r3
  40cc04:	d9ef      	bls.n	40cbe6 <__fpclassifyd+0x12>
  40cc06:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
  40cc0a:	d201      	bcs.n	40cc10 <__fpclassifyd+0x3c>
  40cc0c:	2003      	movs	r0, #3
  40cc0e:	e7eb      	b.n	40cbe8 <__fpclassifyd+0x14>
  40cc10:	4b05      	ldr	r3, [pc, #20]	; (40cc28 <__fpclassifyd+0x54>)
  40cc12:	429c      	cmp	r4, r3
  40cc14:	d001      	beq.n	40cc1a <__fpclassifyd+0x46>
  40cc16:	2000      	movs	r0, #0
  40cc18:	e7e6      	b.n	40cbe8 <__fpclassifyd+0x14>
  40cc1a:	fab0 f080 	clz	r0, r0
  40cc1e:	0940      	lsrs	r0, r0, #5
  40cc20:	e7e2      	b.n	40cbe8 <__fpclassifyd+0x14>
  40cc22:	bf00      	nop
  40cc24:	7fdfffff 	.word	0x7fdfffff
  40cc28:	7ff00000 	.word	0x7ff00000

0040cc2c <_raise_r>:
  40cc2c:	291f      	cmp	r1, #31
  40cc2e:	b538      	push	{r3, r4, r5, lr}
  40cc30:	d822      	bhi.n	40cc78 <_raise_r+0x4c>
  40cc32:	f8d0 22dc 	ldr.w	r2, [r0, #732]	; 0x2dc
  40cc36:	4605      	mov	r5, r0
  40cc38:	460c      	mov	r4, r1
  40cc3a:	b19a      	cbz	r2, 40cc64 <_raise_r+0x38>
  40cc3c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
  40cc40:	b183      	cbz	r3, 40cc64 <_raise_r+0x38>
  40cc42:	2b01      	cmp	r3, #1
  40cc44:	d00c      	beq.n	40cc60 <_raise_r+0x34>
  40cc46:	1c59      	adds	r1, r3, #1
  40cc48:	d006      	beq.n	40cc58 <_raise_r+0x2c>
  40cc4a:	2500      	movs	r5, #0
  40cc4c:	4620      	mov	r0, r4
  40cc4e:	f842 5024 	str.w	r5, [r2, r4, lsl #2]
  40cc52:	4798      	blx	r3
  40cc54:	4628      	mov	r0, r5
  40cc56:	bd38      	pop	{r3, r4, r5, pc}
  40cc58:	2316      	movs	r3, #22
  40cc5a:	6003      	str	r3, [r0, #0]
  40cc5c:	2001      	movs	r0, #1
  40cc5e:	bd38      	pop	{r3, r4, r5, pc}
  40cc60:	2000      	movs	r0, #0
  40cc62:	bd38      	pop	{r3, r4, r5, pc}
  40cc64:	4628      	mov	r0, r5
  40cc66:	f000 f829 	bl	40ccbc <_getpid_r>
  40cc6a:	4622      	mov	r2, r4
  40cc6c:	4601      	mov	r1, r0
  40cc6e:	4628      	mov	r0, r5
  40cc70:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  40cc74:	f000 b80e 	b.w	40cc94 <_kill_r>
  40cc78:	2316      	movs	r3, #22
  40cc7a:	6003      	str	r3, [r0, #0]
  40cc7c:	f04f 30ff 	mov.w	r0, #4294967295
  40cc80:	bd38      	pop	{r3, r4, r5, pc}
  40cc82:	bf00      	nop

0040cc84 <raise>:
  40cc84:	4b02      	ldr	r3, [pc, #8]	; (40cc90 <raise+0xc>)
  40cc86:	4601      	mov	r1, r0
  40cc88:	6818      	ldr	r0, [r3, #0]
  40cc8a:	f7ff bfcf 	b.w	40cc2c <_raise_r>
  40cc8e:	bf00      	nop
  40cc90:	20000440 	.word	0x20000440

0040cc94 <_kill_r>:
  40cc94:	b538      	push	{r3, r4, r5, lr}
  40cc96:	4c08      	ldr	r4, [pc, #32]	; (40ccb8 <_kill_r+0x24>)
  40cc98:	2300      	movs	r3, #0
  40cc9a:	4605      	mov	r5, r0
  40cc9c:	4608      	mov	r0, r1
  40cc9e:	4611      	mov	r1, r2
  40cca0:	6023      	str	r3, [r4, #0]
  40cca2:	f7f4 fbb1 	bl	401408 <_kill>
  40cca6:	1c43      	adds	r3, r0, #1
  40cca8:	d000      	beq.n	40ccac <_kill_r+0x18>
  40ccaa:	bd38      	pop	{r3, r4, r5, pc}
  40ccac:	6823      	ldr	r3, [r4, #0]
  40ccae:	2b00      	cmp	r3, #0
  40ccb0:	d0fb      	beq.n	40ccaa <_kill_r+0x16>
  40ccb2:	602b      	str	r3, [r5, #0]
  40ccb4:	bd38      	pop	{r3, r4, r5, pc}
  40ccb6:	bf00      	nop
  40ccb8:	20000d6c 	.word	0x20000d6c

0040ccbc <_getpid_r>:
  40ccbc:	f7f4 bba6 	b.w	40140c <_getpid>

0040ccc0 <__ssprint_r>:
  40ccc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40ccc4:	6893      	ldr	r3, [r2, #8]
  40ccc6:	f8d2 8000 	ldr.w	r8, [r2]
  40ccca:	b083      	sub	sp, #12
  40cccc:	4691      	mov	r9, r2
  40ccce:	2b00      	cmp	r3, #0
  40ccd0:	d072      	beq.n	40cdb8 <__ssprint_r+0xf8>
  40ccd2:	4607      	mov	r7, r0
  40ccd4:	f04f 0b00 	mov.w	fp, #0
  40ccd8:	6808      	ldr	r0, [r1, #0]
  40ccda:	688b      	ldr	r3, [r1, #8]
  40ccdc:	460d      	mov	r5, r1
  40ccde:	465c      	mov	r4, fp
  40cce0:	2c00      	cmp	r4, #0
  40cce2:	d045      	beq.n	40cd70 <__ssprint_r+0xb0>
  40cce4:	429c      	cmp	r4, r3
  40cce6:	461e      	mov	r6, r3
  40cce8:	469a      	mov	sl, r3
  40ccea:	d348      	bcc.n	40cd7e <__ssprint_r+0xbe>
  40ccec:	89ab      	ldrh	r3, [r5, #12]
  40ccee:	f413 6f90 	tst.w	r3, #1152	; 0x480
  40ccf2:	d02d      	beq.n	40cd50 <__ssprint_r+0x90>
  40ccf4:	696e      	ldr	r6, [r5, #20]
  40ccf6:	6929      	ldr	r1, [r5, #16]
  40ccf8:	eb06 0646 	add.w	r6, r6, r6, lsl #1
  40ccfc:	ebc1 0a00 	rsb	sl, r1, r0
  40cd00:	eb06 76d6 	add.w	r6, r6, r6, lsr #31
  40cd04:	1c60      	adds	r0, r4, #1
  40cd06:	1076      	asrs	r6, r6, #1
  40cd08:	4450      	add	r0, sl
  40cd0a:	4286      	cmp	r6, r0
  40cd0c:	4632      	mov	r2, r6
  40cd0e:	bf3c      	itt	cc
  40cd10:	4606      	movcc	r6, r0
  40cd12:	4632      	movcc	r2, r6
  40cd14:	055b      	lsls	r3, r3, #21
  40cd16:	d535      	bpl.n	40cd84 <__ssprint_r+0xc4>
  40cd18:	4611      	mov	r1, r2
  40cd1a:	4638      	mov	r0, r7
  40cd1c:	f7fa f898 	bl	406e50 <_malloc_r>
  40cd20:	2800      	cmp	r0, #0
  40cd22:	d039      	beq.n	40cd98 <__ssprint_r+0xd8>
  40cd24:	4652      	mov	r2, sl
  40cd26:	6929      	ldr	r1, [r5, #16]
  40cd28:	9001      	str	r0, [sp, #4]
  40cd2a:	f7fa fb9f 	bl	40746c <memcpy>
  40cd2e:	89aa      	ldrh	r2, [r5, #12]
  40cd30:	9b01      	ldr	r3, [sp, #4]
  40cd32:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
  40cd36:	f042 0280 	orr.w	r2, r2, #128	; 0x80
  40cd3a:	81aa      	strh	r2, [r5, #12]
  40cd3c:	ebca 0206 	rsb	r2, sl, r6
  40cd40:	eb03 000a 	add.w	r0, r3, sl
  40cd44:	616e      	str	r6, [r5, #20]
  40cd46:	612b      	str	r3, [r5, #16]
  40cd48:	6028      	str	r0, [r5, #0]
  40cd4a:	60aa      	str	r2, [r5, #8]
  40cd4c:	4626      	mov	r6, r4
  40cd4e:	46a2      	mov	sl, r4
  40cd50:	4652      	mov	r2, sl
  40cd52:	4659      	mov	r1, fp
  40cd54:	f7fa fc24 	bl	4075a0 <memmove>
  40cd58:	f8d9 2008 	ldr.w	r2, [r9, #8]
  40cd5c:	68ab      	ldr	r3, [r5, #8]
  40cd5e:	6828      	ldr	r0, [r5, #0]
  40cd60:	1b9b      	subs	r3, r3, r6
  40cd62:	4450      	add	r0, sl
  40cd64:	1b14      	subs	r4, r2, r4
  40cd66:	60ab      	str	r3, [r5, #8]
  40cd68:	6028      	str	r0, [r5, #0]
  40cd6a:	f8c9 4008 	str.w	r4, [r9, #8]
  40cd6e:	b31c      	cbz	r4, 40cdb8 <__ssprint_r+0xf8>
  40cd70:	f8d8 b000 	ldr.w	fp, [r8]
  40cd74:	f8d8 4004 	ldr.w	r4, [r8, #4]
  40cd78:	f108 0808 	add.w	r8, r8, #8
  40cd7c:	e7b0      	b.n	40cce0 <__ssprint_r+0x20>
  40cd7e:	4626      	mov	r6, r4
  40cd80:	46a2      	mov	sl, r4
  40cd82:	e7e5      	b.n	40cd50 <__ssprint_r+0x90>
  40cd84:	4638      	mov	r0, r7
  40cd86:	f7fa fcc9 	bl	40771c <_realloc_r>
  40cd8a:	4603      	mov	r3, r0
  40cd8c:	2800      	cmp	r0, #0
  40cd8e:	d1d5      	bne.n	40cd3c <__ssprint_r+0x7c>
  40cd90:	4638      	mov	r0, r7
  40cd92:	6929      	ldr	r1, [r5, #16]
  40cd94:	f7f9 fcfe 	bl	406794 <_free_r>
  40cd98:	230c      	movs	r3, #12
  40cd9a:	603b      	str	r3, [r7, #0]
  40cd9c:	89ab      	ldrh	r3, [r5, #12]
  40cd9e:	2200      	movs	r2, #0
  40cda0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40cda4:	f04f 30ff 	mov.w	r0, #4294967295
  40cda8:	81ab      	strh	r3, [r5, #12]
  40cdaa:	f8c9 2008 	str.w	r2, [r9, #8]
  40cdae:	f8c9 2004 	str.w	r2, [r9, #4]
  40cdb2:	b003      	add	sp, #12
  40cdb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40cdb8:	2000      	movs	r0, #0
  40cdba:	f8c9 0004 	str.w	r0, [r9, #4]
  40cdbe:	b003      	add	sp, #12
  40cdc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0040cdc4 <_wcrtomb_r>:
  40cdc4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40cdc8:	4605      	mov	r5, r0
  40cdca:	b086      	sub	sp, #24
  40cdcc:	461e      	mov	r6, r3
  40cdce:	460c      	mov	r4, r1
  40cdd0:	b1a1      	cbz	r1, 40cdfc <_wcrtomb_r+0x38>
  40cdd2:	4b10      	ldr	r3, [pc, #64]	; (40ce14 <_wcrtomb_r+0x50>)
  40cdd4:	4617      	mov	r7, r2
  40cdd6:	f8d3 8000 	ldr.w	r8, [r3]
  40cdda:	f7ff fbd1 	bl	40c580 <__locale_charset>
  40cdde:	9600      	str	r6, [sp, #0]
  40cde0:	4603      	mov	r3, r0
  40cde2:	4621      	mov	r1, r4
  40cde4:	463a      	mov	r2, r7
  40cde6:	4628      	mov	r0, r5
  40cde8:	47c0      	blx	r8
  40cdea:	1c43      	adds	r3, r0, #1
  40cdec:	d103      	bne.n	40cdf6 <_wcrtomb_r+0x32>
  40cdee:	2200      	movs	r2, #0
  40cdf0:	238a      	movs	r3, #138	; 0x8a
  40cdf2:	6032      	str	r2, [r6, #0]
  40cdf4:	602b      	str	r3, [r5, #0]
  40cdf6:	b006      	add	sp, #24
  40cdf8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40cdfc:	4b05      	ldr	r3, [pc, #20]	; (40ce14 <_wcrtomb_r+0x50>)
  40cdfe:	681f      	ldr	r7, [r3, #0]
  40ce00:	f7ff fbbe 	bl	40c580 <__locale_charset>
  40ce04:	9600      	str	r6, [sp, #0]
  40ce06:	4603      	mov	r3, r0
  40ce08:	4622      	mov	r2, r4
  40ce0a:	4628      	mov	r0, r5
  40ce0c:	a903      	add	r1, sp, #12
  40ce0e:	47b8      	blx	r7
  40ce10:	e7eb      	b.n	40cdea <_wcrtomb_r+0x26>
  40ce12:	bf00      	nop
  40ce14:	200008b0 	.word	0x200008b0

0040ce18 <__ascii_wctomb>:
  40ce18:	b121      	cbz	r1, 40ce24 <__ascii_wctomb+0xc>
  40ce1a:	2aff      	cmp	r2, #255	; 0xff
  40ce1c:	d804      	bhi.n	40ce28 <__ascii_wctomb+0x10>
  40ce1e:	700a      	strb	r2, [r1, #0]
  40ce20:	2001      	movs	r0, #1
  40ce22:	4770      	bx	lr
  40ce24:	4608      	mov	r0, r1
  40ce26:	4770      	bx	lr
  40ce28:	238a      	movs	r3, #138	; 0x8a
  40ce2a:	6003      	str	r3, [r0, #0]
  40ce2c:	f04f 30ff 	mov.w	r0, #4294967295
  40ce30:	4770      	bx	lr
  40ce32:	bf00      	nop

0040ce34 <__register_exitproc>:
  40ce34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  40ce38:	4c25      	ldr	r4, [pc, #148]	; (40ced0 <__register_exitproc+0x9c>)
  40ce3a:	6825      	ldr	r5, [r4, #0]
  40ce3c:	f8d5 4148 	ldr.w	r4, [r5, #328]	; 0x148
  40ce40:	4606      	mov	r6, r0
  40ce42:	4688      	mov	r8, r1
  40ce44:	4692      	mov	sl, r2
  40ce46:	4699      	mov	r9, r3
  40ce48:	b3cc      	cbz	r4, 40cebe <__register_exitproc+0x8a>
  40ce4a:	6860      	ldr	r0, [r4, #4]
  40ce4c:	281f      	cmp	r0, #31
  40ce4e:	dc18      	bgt.n	40ce82 <__register_exitproc+0x4e>
  40ce50:	1c43      	adds	r3, r0, #1
  40ce52:	b17e      	cbz	r6, 40ce74 <__register_exitproc+0x40>
  40ce54:	eb04 0580 	add.w	r5, r4, r0, lsl #2
  40ce58:	2101      	movs	r1, #1
  40ce5a:	f8c5 a088 	str.w	sl, [r5, #136]	; 0x88
  40ce5e:	f8d4 7188 	ldr.w	r7, [r4, #392]	; 0x188
  40ce62:	fa01 f200 	lsl.w	r2, r1, r0
  40ce66:	4317      	orrs	r7, r2
  40ce68:	2e02      	cmp	r6, #2
  40ce6a:	f8c4 7188 	str.w	r7, [r4, #392]	; 0x188
  40ce6e:	f8c5 9108 	str.w	r9, [r5, #264]	; 0x108
  40ce72:	d01e      	beq.n	40ceb2 <__register_exitproc+0x7e>
  40ce74:	3002      	adds	r0, #2
  40ce76:	6063      	str	r3, [r4, #4]
  40ce78:	f844 8020 	str.w	r8, [r4, r0, lsl #2]
  40ce7c:	2000      	movs	r0, #0
  40ce7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40ce82:	4b14      	ldr	r3, [pc, #80]	; (40ced4 <__register_exitproc+0xa0>)
  40ce84:	b303      	cbz	r3, 40cec8 <__register_exitproc+0x94>
  40ce86:	f44f 70c8 	mov.w	r0, #400	; 0x190
  40ce8a:	f7f9 ffd1 	bl	406e30 <malloc>
  40ce8e:	4604      	mov	r4, r0
  40ce90:	b1d0      	cbz	r0, 40cec8 <__register_exitproc+0x94>
  40ce92:	f8d5 3148 	ldr.w	r3, [r5, #328]	; 0x148
  40ce96:	2700      	movs	r7, #0
  40ce98:	e880 0088 	stmia.w	r0, {r3, r7}
  40ce9c:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
  40cea0:	4638      	mov	r0, r7
  40cea2:	2301      	movs	r3, #1
  40cea4:	f8c4 7188 	str.w	r7, [r4, #392]	; 0x188
  40cea8:	f8c4 718c 	str.w	r7, [r4, #396]	; 0x18c
  40ceac:	2e00      	cmp	r6, #0
  40ceae:	d0e1      	beq.n	40ce74 <__register_exitproc+0x40>
  40ceb0:	e7d0      	b.n	40ce54 <__register_exitproc+0x20>
  40ceb2:	f8d4 118c 	ldr.w	r1, [r4, #396]	; 0x18c
  40ceb6:	430a      	orrs	r2, r1
  40ceb8:	f8c4 218c 	str.w	r2, [r4, #396]	; 0x18c
  40cebc:	e7da      	b.n	40ce74 <__register_exitproc+0x40>
  40cebe:	f505 74a6 	add.w	r4, r5, #332	; 0x14c
  40cec2:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
  40cec6:	e7c0      	b.n	40ce4a <__register_exitproc+0x16>
  40cec8:	f04f 30ff 	mov.w	r0, #4294967295
  40cecc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40ced0:	0040fe64 	.word	0x0040fe64
  40ced4:	00406e31 	.word	0x00406e31

0040ced8 <__aeabi_drsub>:
  40ced8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
  40cedc:	e002      	b.n	40cee4 <__adddf3>
  40cede:	bf00      	nop

0040cee0 <__aeabi_dsub>:
  40cee0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0040cee4 <__adddf3>:
  40cee4:	b530      	push	{r4, r5, lr}
  40cee6:	ea4f 0441 	mov.w	r4, r1, lsl #1
  40ceea:	ea4f 0543 	mov.w	r5, r3, lsl #1
  40ceee:	ea94 0f05 	teq	r4, r5
  40cef2:	bf08      	it	eq
  40cef4:	ea90 0f02 	teqeq	r0, r2
  40cef8:	bf1f      	itttt	ne
  40cefa:	ea54 0c00 	orrsne.w	ip, r4, r0
  40cefe:	ea55 0c02 	orrsne.w	ip, r5, r2
  40cf02:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
  40cf06:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  40cf0a:	f000 80e2 	beq.w	40d0d2 <__adddf3+0x1ee>
  40cf0e:	ea4f 5454 	mov.w	r4, r4, lsr #21
  40cf12:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
  40cf16:	bfb8      	it	lt
  40cf18:	426d      	neglt	r5, r5
  40cf1a:	dd0c      	ble.n	40cf36 <__adddf3+0x52>
  40cf1c:	442c      	add	r4, r5
  40cf1e:	ea80 0202 	eor.w	r2, r0, r2
  40cf22:	ea81 0303 	eor.w	r3, r1, r3
  40cf26:	ea82 0000 	eor.w	r0, r2, r0
  40cf2a:	ea83 0101 	eor.w	r1, r3, r1
  40cf2e:	ea80 0202 	eor.w	r2, r0, r2
  40cf32:	ea81 0303 	eor.w	r3, r1, r3
  40cf36:	2d36      	cmp	r5, #54	; 0x36
  40cf38:	bf88      	it	hi
  40cf3a:	bd30      	pophi	{r4, r5, pc}
  40cf3c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  40cf40:	ea4f 3101 	mov.w	r1, r1, lsl #12
  40cf44:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
  40cf48:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
  40cf4c:	d002      	beq.n	40cf54 <__adddf3+0x70>
  40cf4e:	4240      	negs	r0, r0
  40cf50:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  40cf54:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
  40cf58:	ea4f 3303 	mov.w	r3, r3, lsl #12
  40cf5c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
  40cf60:	d002      	beq.n	40cf68 <__adddf3+0x84>
  40cf62:	4252      	negs	r2, r2
  40cf64:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
  40cf68:	ea94 0f05 	teq	r4, r5
  40cf6c:	f000 80a7 	beq.w	40d0be <__adddf3+0x1da>
  40cf70:	f1a4 0401 	sub.w	r4, r4, #1
  40cf74:	f1d5 0e20 	rsbs	lr, r5, #32
  40cf78:	db0d      	blt.n	40cf96 <__adddf3+0xb2>
  40cf7a:	fa02 fc0e 	lsl.w	ip, r2, lr
  40cf7e:	fa22 f205 	lsr.w	r2, r2, r5
  40cf82:	1880      	adds	r0, r0, r2
  40cf84:	f141 0100 	adc.w	r1, r1, #0
  40cf88:	fa03 f20e 	lsl.w	r2, r3, lr
  40cf8c:	1880      	adds	r0, r0, r2
  40cf8e:	fa43 f305 	asr.w	r3, r3, r5
  40cf92:	4159      	adcs	r1, r3
  40cf94:	e00e      	b.n	40cfb4 <__adddf3+0xd0>
  40cf96:	f1a5 0520 	sub.w	r5, r5, #32
  40cf9a:	f10e 0e20 	add.w	lr, lr, #32
  40cf9e:	2a01      	cmp	r2, #1
  40cfa0:	fa03 fc0e 	lsl.w	ip, r3, lr
  40cfa4:	bf28      	it	cs
  40cfa6:	f04c 0c02 	orrcs.w	ip, ip, #2
  40cfaa:	fa43 f305 	asr.w	r3, r3, r5
  40cfae:	18c0      	adds	r0, r0, r3
  40cfb0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
  40cfb4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  40cfb8:	d507      	bpl.n	40cfca <__adddf3+0xe6>
  40cfba:	f04f 0e00 	mov.w	lr, #0
  40cfbe:	f1dc 0c00 	rsbs	ip, ip, #0
  40cfc2:	eb7e 0000 	sbcs.w	r0, lr, r0
  40cfc6:	eb6e 0101 	sbc.w	r1, lr, r1
  40cfca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
  40cfce:	d31b      	bcc.n	40d008 <__adddf3+0x124>
  40cfd0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
  40cfd4:	d30c      	bcc.n	40cff0 <__adddf3+0x10c>
  40cfd6:	0849      	lsrs	r1, r1, #1
  40cfd8:	ea5f 0030 	movs.w	r0, r0, rrx
  40cfdc:	ea4f 0c3c 	mov.w	ip, ip, rrx
  40cfe0:	f104 0401 	add.w	r4, r4, #1
  40cfe4:	ea4f 5244 	mov.w	r2, r4, lsl #21
  40cfe8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
  40cfec:	f080 809a 	bcs.w	40d124 <__adddf3+0x240>
  40cff0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
  40cff4:	bf08      	it	eq
  40cff6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  40cffa:	f150 0000 	adcs.w	r0, r0, #0
  40cffe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  40d002:	ea41 0105 	orr.w	r1, r1, r5
  40d006:	bd30      	pop	{r4, r5, pc}
  40d008:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
  40d00c:	4140      	adcs	r0, r0
  40d00e:	eb41 0101 	adc.w	r1, r1, r1
  40d012:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  40d016:	f1a4 0401 	sub.w	r4, r4, #1
  40d01a:	d1e9      	bne.n	40cff0 <__adddf3+0x10c>
  40d01c:	f091 0f00 	teq	r1, #0
  40d020:	bf04      	itt	eq
  40d022:	4601      	moveq	r1, r0
  40d024:	2000      	moveq	r0, #0
  40d026:	fab1 f381 	clz	r3, r1
  40d02a:	bf08      	it	eq
  40d02c:	3320      	addeq	r3, #32
  40d02e:	f1a3 030b 	sub.w	r3, r3, #11
  40d032:	f1b3 0220 	subs.w	r2, r3, #32
  40d036:	da0c      	bge.n	40d052 <__adddf3+0x16e>
  40d038:	320c      	adds	r2, #12
  40d03a:	dd08      	ble.n	40d04e <__adddf3+0x16a>
  40d03c:	f102 0c14 	add.w	ip, r2, #20
  40d040:	f1c2 020c 	rsb	r2, r2, #12
  40d044:	fa01 f00c 	lsl.w	r0, r1, ip
  40d048:	fa21 f102 	lsr.w	r1, r1, r2
  40d04c:	e00c      	b.n	40d068 <__adddf3+0x184>
  40d04e:	f102 0214 	add.w	r2, r2, #20
  40d052:	bfd8      	it	le
  40d054:	f1c2 0c20 	rsble	ip, r2, #32
  40d058:	fa01 f102 	lsl.w	r1, r1, r2
  40d05c:	fa20 fc0c 	lsr.w	ip, r0, ip
  40d060:	bfdc      	itt	le
  40d062:	ea41 010c 	orrle.w	r1, r1, ip
  40d066:	4090      	lslle	r0, r2
  40d068:	1ae4      	subs	r4, r4, r3
  40d06a:	bfa2      	ittt	ge
  40d06c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
  40d070:	4329      	orrge	r1, r5
  40d072:	bd30      	popge	{r4, r5, pc}
  40d074:	ea6f 0404 	mvn.w	r4, r4
  40d078:	3c1f      	subs	r4, #31
  40d07a:	da1c      	bge.n	40d0b6 <__adddf3+0x1d2>
  40d07c:	340c      	adds	r4, #12
  40d07e:	dc0e      	bgt.n	40d09e <__adddf3+0x1ba>
  40d080:	f104 0414 	add.w	r4, r4, #20
  40d084:	f1c4 0220 	rsb	r2, r4, #32
  40d088:	fa20 f004 	lsr.w	r0, r0, r4
  40d08c:	fa01 f302 	lsl.w	r3, r1, r2
  40d090:	ea40 0003 	orr.w	r0, r0, r3
  40d094:	fa21 f304 	lsr.w	r3, r1, r4
  40d098:	ea45 0103 	orr.w	r1, r5, r3
  40d09c:	bd30      	pop	{r4, r5, pc}
  40d09e:	f1c4 040c 	rsb	r4, r4, #12
  40d0a2:	f1c4 0220 	rsb	r2, r4, #32
  40d0a6:	fa20 f002 	lsr.w	r0, r0, r2
  40d0aa:	fa01 f304 	lsl.w	r3, r1, r4
  40d0ae:	ea40 0003 	orr.w	r0, r0, r3
  40d0b2:	4629      	mov	r1, r5
  40d0b4:	bd30      	pop	{r4, r5, pc}
  40d0b6:	fa21 f004 	lsr.w	r0, r1, r4
  40d0ba:	4629      	mov	r1, r5
  40d0bc:	bd30      	pop	{r4, r5, pc}
  40d0be:	f094 0f00 	teq	r4, #0
  40d0c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
  40d0c6:	bf06      	itte	eq
  40d0c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
  40d0cc:	3401      	addeq	r4, #1
  40d0ce:	3d01      	subne	r5, #1
  40d0d0:	e74e      	b.n	40cf70 <__adddf3+0x8c>
  40d0d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  40d0d6:	bf18      	it	ne
  40d0d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  40d0dc:	d029      	beq.n	40d132 <__adddf3+0x24e>
  40d0de:	ea94 0f05 	teq	r4, r5
  40d0e2:	bf08      	it	eq
  40d0e4:	ea90 0f02 	teqeq	r0, r2
  40d0e8:	d005      	beq.n	40d0f6 <__adddf3+0x212>
  40d0ea:	ea54 0c00 	orrs.w	ip, r4, r0
  40d0ee:	bf04      	itt	eq
  40d0f0:	4619      	moveq	r1, r3
  40d0f2:	4610      	moveq	r0, r2
  40d0f4:	bd30      	pop	{r4, r5, pc}
  40d0f6:	ea91 0f03 	teq	r1, r3
  40d0fa:	bf1e      	ittt	ne
  40d0fc:	2100      	movne	r1, #0
  40d0fe:	2000      	movne	r0, #0
  40d100:	bd30      	popne	{r4, r5, pc}
  40d102:	ea5f 5c54 	movs.w	ip, r4, lsr #21
  40d106:	d105      	bne.n	40d114 <__adddf3+0x230>
  40d108:	0040      	lsls	r0, r0, #1
  40d10a:	4149      	adcs	r1, r1
  40d10c:	bf28      	it	cs
  40d10e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
  40d112:	bd30      	pop	{r4, r5, pc}
  40d114:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
  40d118:	bf3c      	itt	cc
  40d11a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
  40d11e:	bd30      	popcc	{r4, r5, pc}
  40d120:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  40d124:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
  40d128:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  40d12c:	f04f 0000 	mov.w	r0, #0
  40d130:	bd30      	pop	{r4, r5, pc}
  40d132:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  40d136:	bf1a      	itte	ne
  40d138:	4619      	movne	r1, r3
  40d13a:	4610      	movne	r0, r2
  40d13c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
  40d140:	bf1c      	itt	ne
  40d142:	460b      	movne	r3, r1
  40d144:	4602      	movne	r2, r0
  40d146:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  40d14a:	bf06      	itte	eq
  40d14c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
  40d150:	ea91 0f03 	teqeq	r1, r3
  40d154:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
  40d158:	bd30      	pop	{r4, r5, pc}
  40d15a:	bf00      	nop

0040d15c <__aeabi_ui2d>:
  40d15c:	f090 0f00 	teq	r0, #0
  40d160:	bf04      	itt	eq
  40d162:	2100      	moveq	r1, #0
  40d164:	4770      	bxeq	lr
  40d166:	b530      	push	{r4, r5, lr}
  40d168:	f44f 6480 	mov.w	r4, #1024	; 0x400
  40d16c:	f104 0432 	add.w	r4, r4, #50	; 0x32
  40d170:	f04f 0500 	mov.w	r5, #0
  40d174:	f04f 0100 	mov.w	r1, #0
  40d178:	e750      	b.n	40d01c <__adddf3+0x138>
  40d17a:	bf00      	nop

0040d17c <__aeabi_i2d>:
  40d17c:	f090 0f00 	teq	r0, #0
  40d180:	bf04      	itt	eq
  40d182:	2100      	moveq	r1, #0
  40d184:	4770      	bxeq	lr
  40d186:	b530      	push	{r4, r5, lr}
  40d188:	f44f 6480 	mov.w	r4, #1024	; 0x400
  40d18c:	f104 0432 	add.w	r4, r4, #50	; 0x32
  40d190:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
  40d194:	bf48      	it	mi
  40d196:	4240      	negmi	r0, r0
  40d198:	f04f 0100 	mov.w	r1, #0
  40d19c:	e73e      	b.n	40d01c <__adddf3+0x138>
  40d19e:	bf00      	nop

0040d1a0 <__aeabi_f2d>:
  40d1a0:	0042      	lsls	r2, r0, #1
  40d1a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
  40d1a6:	ea4f 0131 	mov.w	r1, r1, rrx
  40d1aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
  40d1ae:	bf1f      	itttt	ne
  40d1b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
  40d1b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  40d1b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
  40d1bc:	4770      	bxne	lr
  40d1be:	f092 0f00 	teq	r2, #0
  40d1c2:	bf14      	ite	ne
  40d1c4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  40d1c8:	4770      	bxeq	lr
  40d1ca:	b530      	push	{r4, r5, lr}
  40d1cc:	f44f 7460 	mov.w	r4, #896	; 0x380
  40d1d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  40d1d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  40d1d8:	e720      	b.n	40d01c <__adddf3+0x138>
  40d1da:	bf00      	nop

0040d1dc <__aeabi_ul2d>:
  40d1dc:	ea50 0201 	orrs.w	r2, r0, r1
  40d1e0:	bf08      	it	eq
  40d1e2:	4770      	bxeq	lr
  40d1e4:	b530      	push	{r4, r5, lr}
  40d1e6:	f04f 0500 	mov.w	r5, #0
  40d1ea:	e00a      	b.n	40d202 <__aeabi_l2d+0x16>

0040d1ec <__aeabi_l2d>:
  40d1ec:	ea50 0201 	orrs.w	r2, r0, r1
  40d1f0:	bf08      	it	eq
  40d1f2:	4770      	bxeq	lr
  40d1f4:	b530      	push	{r4, r5, lr}
  40d1f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
  40d1fa:	d502      	bpl.n	40d202 <__aeabi_l2d+0x16>
  40d1fc:	4240      	negs	r0, r0
  40d1fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  40d202:	f44f 6480 	mov.w	r4, #1024	; 0x400
  40d206:	f104 0432 	add.w	r4, r4, #50	; 0x32
  40d20a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
  40d20e:	f43f aedc 	beq.w	40cfca <__adddf3+0xe6>
  40d212:	f04f 0203 	mov.w	r2, #3
  40d216:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  40d21a:	bf18      	it	ne
  40d21c:	3203      	addne	r2, #3
  40d21e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  40d222:	bf18      	it	ne
  40d224:	3203      	addne	r2, #3
  40d226:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
  40d22a:	f1c2 0320 	rsb	r3, r2, #32
  40d22e:	fa00 fc03 	lsl.w	ip, r0, r3
  40d232:	fa20 f002 	lsr.w	r0, r0, r2
  40d236:	fa01 fe03 	lsl.w	lr, r1, r3
  40d23a:	ea40 000e 	orr.w	r0, r0, lr
  40d23e:	fa21 f102 	lsr.w	r1, r1, r2
  40d242:	4414      	add	r4, r2
  40d244:	e6c1      	b.n	40cfca <__adddf3+0xe6>
  40d246:	bf00      	nop

0040d248 <__aeabi_dmul>:
  40d248:	b570      	push	{r4, r5, r6, lr}
  40d24a:	f04f 0cff 	mov.w	ip, #255	; 0xff
  40d24e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  40d252:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  40d256:	bf1d      	ittte	ne
  40d258:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  40d25c:	ea94 0f0c 	teqne	r4, ip
  40d260:	ea95 0f0c 	teqne	r5, ip
  40d264:	f000 f8de 	bleq	40d424 <__aeabi_dmul+0x1dc>
  40d268:	442c      	add	r4, r5
  40d26a:	ea81 0603 	eor.w	r6, r1, r3
  40d26e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
  40d272:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
  40d276:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
  40d27a:	bf18      	it	ne
  40d27c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
  40d280:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  40d284:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  40d288:	d038      	beq.n	40d2fc <__aeabi_dmul+0xb4>
  40d28a:	fba0 ce02 	umull	ip, lr, r0, r2
  40d28e:	f04f 0500 	mov.w	r5, #0
  40d292:	fbe1 e502 	umlal	lr, r5, r1, r2
  40d296:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
  40d29a:	fbe0 e503 	umlal	lr, r5, r0, r3
  40d29e:	f04f 0600 	mov.w	r6, #0
  40d2a2:	fbe1 5603 	umlal	r5, r6, r1, r3
  40d2a6:	f09c 0f00 	teq	ip, #0
  40d2aa:	bf18      	it	ne
  40d2ac:	f04e 0e01 	orrne.w	lr, lr, #1
  40d2b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
  40d2b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
  40d2b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
  40d2bc:	d204      	bcs.n	40d2c8 <__aeabi_dmul+0x80>
  40d2be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
  40d2c2:	416d      	adcs	r5, r5
  40d2c4:	eb46 0606 	adc.w	r6, r6, r6
  40d2c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
  40d2cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
  40d2d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
  40d2d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
  40d2d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
  40d2dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  40d2e0:	bf88      	it	hi
  40d2e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  40d2e6:	d81e      	bhi.n	40d326 <__aeabi_dmul+0xde>
  40d2e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
  40d2ec:	bf08      	it	eq
  40d2ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
  40d2f2:	f150 0000 	adcs.w	r0, r0, #0
  40d2f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  40d2fa:	bd70      	pop	{r4, r5, r6, pc}
  40d2fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
  40d300:	ea46 0101 	orr.w	r1, r6, r1
  40d304:	ea40 0002 	orr.w	r0, r0, r2
  40d308:	ea81 0103 	eor.w	r1, r1, r3
  40d30c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
  40d310:	bfc2      	ittt	gt
  40d312:	ebd4 050c 	rsbsgt	r5, r4, ip
  40d316:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  40d31a:	bd70      	popgt	{r4, r5, r6, pc}
  40d31c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  40d320:	f04f 0e00 	mov.w	lr, #0
  40d324:	3c01      	subs	r4, #1
  40d326:	f300 80ab 	bgt.w	40d480 <__aeabi_dmul+0x238>
  40d32a:	f114 0f36 	cmn.w	r4, #54	; 0x36
  40d32e:	bfde      	ittt	le
  40d330:	2000      	movle	r0, #0
  40d332:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
  40d336:	bd70      	pople	{r4, r5, r6, pc}
  40d338:	f1c4 0400 	rsb	r4, r4, #0
  40d33c:	3c20      	subs	r4, #32
  40d33e:	da35      	bge.n	40d3ac <__aeabi_dmul+0x164>
  40d340:	340c      	adds	r4, #12
  40d342:	dc1b      	bgt.n	40d37c <__aeabi_dmul+0x134>
  40d344:	f104 0414 	add.w	r4, r4, #20
  40d348:	f1c4 0520 	rsb	r5, r4, #32
  40d34c:	fa00 f305 	lsl.w	r3, r0, r5
  40d350:	fa20 f004 	lsr.w	r0, r0, r4
  40d354:	fa01 f205 	lsl.w	r2, r1, r5
  40d358:	ea40 0002 	orr.w	r0, r0, r2
  40d35c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
  40d360:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  40d364:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  40d368:	fa21 f604 	lsr.w	r6, r1, r4
  40d36c:	eb42 0106 	adc.w	r1, r2, r6
  40d370:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  40d374:	bf08      	it	eq
  40d376:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  40d37a:	bd70      	pop	{r4, r5, r6, pc}
  40d37c:	f1c4 040c 	rsb	r4, r4, #12
  40d380:	f1c4 0520 	rsb	r5, r4, #32
  40d384:	fa00 f304 	lsl.w	r3, r0, r4
  40d388:	fa20 f005 	lsr.w	r0, r0, r5
  40d38c:	fa01 f204 	lsl.w	r2, r1, r4
  40d390:	ea40 0002 	orr.w	r0, r0, r2
  40d394:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  40d398:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  40d39c:	f141 0100 	adc.w	r1, r1, #0
  40d3a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  40d3a4:	bf08      	it	eq
  40d3a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  40d3aa:	bd70      	pop	{r4, r5, r6, pc}
  40d3ac:	f1c4 0520 	rsb	r5, r4, #32
  40d3b0:	fa00 f205 	lsl.w	r2, r0, r5
  40d3b4:	ea4e 0e02 	orr.w	lr, lr, r2
  40d3b8:	fa20 f304 	lsr.w	r3, r0, r4
  40d3bc:	fa01 f205 	lsl.w	r2, r1, r5
  40d3c0:	ea43 0302 	orr.w	r3, r3, r2
  40d3c4:	fa21 f004 	lsr.w	r0, r1, r4
  40d3c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  40d3cc:	fa21 f204 	lsr.w	r2, r1, r4
  40d3d0:	ea20 0002 	bic.w	r0, r0, r2
  40d3d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
  40d3d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  40d3dc:	bf08      	it	eq
  40d3de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  40d3e2:	bd70      	pop	{r4, r5, r6, pc}
  40d3e4:	f094 0f00 	teq	r4, #0
  40d3e8:	d10f      	bne.n	40d40a <__aeabi_dmul+0x1c2>
  40d3ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
  40d3ee:	0040      	lsls	r0, r0, #1
  40d3f0:	eb41 0101 	adc.w	r1, r1, r1
  40d3f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  40d3f8:	bf08      	it	eq
  40d3fa:	3c01      	subeq	r4, #1
  40d3fc:	d0f7      	beq.n	40d3ee <__aeabi_dmul+0x1a6>
  40d3fe:	ea41 0106 	orr.w	r1, r1, r6
  40d402:	f095 0f00 	teq	r5, #0
  40d406:	bf18      	it	ne
  40d408:	4770      	bxne	lr
  40d40a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
  40d40e:	0052      	lsls	r2, r2, #1
  40d410:	eb43 0303 	adc.w	r3, r3, r3
  40d414:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
  40d418:	bf08      	it	eq
  40d41a:	3d01      	subeq	r5, #1
  40d41c:	d0f7      	beq.n	40d40e <__aeabi_dmul+0x1c6>
  40d41e:	ea43 0306 	orr.w	r3, r3, r6
  40d422:	4770      	bx	lr
  40d424:	ea94 0f0c 	teq	r4, ip
  40d428:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  40d42c:	bf18      	it	ne
  40d42e:	ea95 0f0c 	teqne	r5, ip
  40d432:	d00c      	beq.n	40d44e <__aeabi_dmul+0x206>
  40d434:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  40d438:	bf18      	it	ne
  40d43a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  40d43e:	d1d1      	bne.n	40d3e4 <__aeabi_dmul+0x19c>
  40d440:	ea81 0103 	eor.w	r1, r1, r3
  40d444:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  40d448:	f04f 0000 	mov.w	r0, #0
  40d44c:	bd70      	pop	{r4, r5, r6, pc}
  40d44e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  40d452:	bf06      	itte	eq
  40d454:	4610      	moveq	r0, r2
  40d456:	4619      	moveq	r1, r3
  40d458:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  40d45c:	d019      	beq.n	40d492 <__aeabi_dmul+0x24a>
  40d45e:	ea94 0f0c 	teq	r4, ip
  40d462:	d102      	bne.n	40d46a <__aeabi_dmul+0x222>
  40d464:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
  40d468:	d113      	bne.n	40d492 <__aeabi_dmul+0x24a>
  40d46a:	ea95 0f0c 	teq	r5, ip
  40d46e:	d105      	bne.n	40d47c <__aeabi_dmul+0x234>
  40d470:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
  40d474:	bf1c      	itt	ne
  40d476:	4610      	movne	r0, r2
  40d478:	4619      	movne	r1, r3
  40d47a:	d10a      	bne.n	40d492 <__aeabi_dmul+0x24a>
  40d47c:	ea81 0103 	eor.w	r1, r1, r3
  40d480:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  40d484:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  40d488:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  40d48c:	f04f 0000 	mov.w	r0, #0
  40d490:	bd70      	pop	{r4, r5, r6, pc}
  40d492:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  40d496:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
  40d49a:	bd70      	pop	{r4, r5, r6, pc}

0040d49c <__aeabi_ddiv>:
  40d49c:	b570      	push	{r4, r5, r6, lr}
  40d49e:	f04f 0cff 	mov.w	ip, #255	; 0xff
  40d4a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  40d4a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  40d4aa:	bf1d      	ittte	ne
  40d4ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  40d4b0:	ea94 0f0c 	teqne	r4, ip
  40d4b4:	ea95 0f0c 	teqne	r5, ip
  40d4b8:	f000 f8a7 	bleq	40d60a <__aeabi_ddiv+0x16e>
  40d4bc:	eba4 0405 	sub.w	r4, r4, r5
  40d4c0:	ea81 0e03 	eor.w	lr, r1, r3
  40d4c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  40d4c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
  40d4cc:	f000 8088 	beq.w	40d5e0 <__aeabi_ddiv+0x144>
  40d4d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
  40d4d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
  40d4d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
  40d4dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
  40d4e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
  40d4e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
  40d4e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
  40d4ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
  40d4f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
  40d4f4:	429d      	cmp	r5, r3
  40d4f6:	bf08      	it	eq
  40d4f8:	4296      	cmpeq	r6, r2
  40d4fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
  40d4fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
  40d502:	d202      	bcs.n	40d50a <__aeabi_ddiv+0x6e>
  40d504:	085b      	lsrs	r3, r3, #1
  40d506:	ea4f 0232 	mov.w	r2, r2, rrx
  40d50a:	1ab6      	subs	r6, r6, r2
  40d50c:	eb65 0503 	sbc.w	r5, r5, r3
  40d510:	085b      	lsrs	r3, r3, #1
  40d512:	ea4f 0232 	mov.w	r2, r2, rrx
  40d516:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
  40d51a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
  40d51e:	ebb6 0e02 	subs.w	lr, r6, r2
  40d522:	eb75 0e03 	sbcs.w	lr, r5, r3
  40d526:	bf22      	ittt	cs
  40d528:	1ab6      	subcs	r6, r6, r2
  40d52a:	4675      	movcs	r5, lr
  40d52c:	ea40 000c 	orrcs.w	r0, r0, ip
  40d530:	085b      	lsrs	r3, r3, #1
  40d532:	ea4f 0232 	mov.w	r2, r2, rrx
  40d536:	ebb6 0e02 	subs.w	lr, r6, r2
  40d53a:	eb75 0e03 	sbcs.w	lr, r5, r3
  40d53e:	bf22      	ittt	cs
  40d540:	1ab6      	subcs	r6, r6, r2
  40d542:	4675      	movcs	r5, lr
  40d544:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
  40d548:	085b      	lsrs	r3, r3, #1
  40d54a:	ea4f 0232 	mov.w	r2, r2, rrx
  40d54e:	ebb6 0e02 	subs.w	lr, r6, r2
  40d552:	eb75 0e03 	sbcs.w	lr, r5, r3
  40d556:	bf22      	ittt	cs
  40d558:	1ab6      	subcs	r6, r6, r2
  40d55a:	4675      	movcs	r5, lr
  40d55c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
  40d560:	085b      	lsrs	r3, r3, #1
  40d562:	ea4f 0232 	mov.w	r2, r2, rrx
  40d566:	ebb6 0e02 	subs.w	lr, r6, r2
  40d56a:	eb75 0e03 	sbcs.w	lr, r5, r3
  40d56e:	bf22      	ittt	cs
  40d570:	1ab6      	subcs	r6, r6, r2
  40d572:	4675      	movcs	r5, lr
  40d574:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
  40d578:	ea55 0e06 	orrs.w	lr, r5, r6
  40d57c:	d018      	beq.n	40d5b0 <__aeabi_ddiv+0x114>
  40d57e:	ea4f 1505 	mov.w	r5, r5, lsl #4
  40d582:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
  40d586:	ea4f 1606 	mov.w	r6, r6, lsl #4
  40d58a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
  40d58e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
  40d592:	ea4f 02c2 	mov.w	r2, r2, lsl #3
  40d596:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
  40d59a:	d1c0      	bne.n	40d51e <__aeabi_ddiv+0x82>
  40d59c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  40d5a0:	d10b      	bne.n	40d5ba <__aeabi_ddiv+0x11e>
  40d5a2:	ea41 0100 	orr.w	r1, r1, r0
  40d5a6:	f04f 0000 	mov.w	r0, #0
  40d5aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
  40d5ae:	e7b6      	b.n	40d51e <__aeabi_ddiv+0x82>
  40d5b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  40d5b4:	bf04      	itt	eq
  40d5b6:	4301      	orreq	r1, r0
  40d5b8:	2000      	moveq	r0, #0
  40d5ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  40d5be:	bf88      	it	hi
  40d5c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  40d5c4:	f63f aeaf 	bhi.w	40d326 <__aeabi_dmul+0xde>
  40d5c8:	ebb5 0c03 	subs.w	ip, r5, r3
  40d5cc:	bf04      	itt	eq
  40d5ce:	ebb6 0c02 	subseq.w	ip, r6, r2
  40d5d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  40d5d6:	f150 0000 	adcs.w	r0, r0, #0
  40d5da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  40d5de:	bd70      	pop	{r4, r5, r6, pc}
  40d5e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
  40d5e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
  40d5e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
  40d5ec:	bfc2      	ittt	gt
  40d5ee:	ebd4 050c 	rsbsgt	r5, r4, ip
  40d5f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  40d5f6:	bd70      	popgt	{r4, r5, r6, pc}
  40d5f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  40d5fc:	f04f 0e00 	mov.w	lr, #0
  40d600:	3c01      	subs	r4, #1
  40d602:	e690      	b.n	40d326 <__aeabi_dmul+0xde>
  40d604:	ea45 0e06 	orr.w	lr, r5, r6
  40d608:	e68d      	b.n	40d326 <__aeabi_dmul+0xde>
  40d60a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  40d60e:	ea94 0f0c 	teq	r4, ip
  40d612:	bf08      	it	eq
  40d614:	ea95 0f0c 	teqeq	r5, ip
  40d618:	f43f af3b 	beq.w	40d492 <__aeabi_dmul+0x24a>
  40d61c:	ea94 0f0c 	teq	r4, ip
  40d620:	d10a      	bne.n	40d638 <__aeabi_ddiv+0x19c>
  40d622:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  40d626:	f47f af34 	bne.w	40d492 <__aeabi_dmul+0x24a>
  40d62a:	ea95 0f0c 	teq	r5, ip
  40d62e:	f47f af25 	bne.w	40d47c <__aeabi_dmul+0x234>
  40d632:	4610      	mov	r0, r2
  40d634:	4619      	mov	r1, r3
  40d636:	e72c      	b.n	40d492 <__aeabi_dmul+0x24a>
  40d638:	ea95 0f0c 	teq	r5, ip
  40d63c:	d106      	bne.n	40d64c <__aeabi_ddiv+0x1b0>
  40d63e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  40d642:	f43f aefd 	beq.w	40d440 <__aeabi_dmul+0x1f8>
  40d646:	4610      	mov	r0, r2
  40d648:	4619      	mov	r1, r3
  40d64a:	e722      	b.n	40d492 <__aeabi_dmul+0x24a>
  40d64c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  40d650:	bf18      	it	ne
  40d652:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  40d656:	f47f aec5 	bne.w	40d3e4 <__aeabi_dmul+0x19c>
  40d65a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
  40d65e:	f47f af0d 	bne.w	40d47c <__aeabi_dmul+0x234>
  40d662:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
  40d666:	f47f aeeb 	bne.w	40d440 <__aeabi_dmul+0x1f8>
  40d66a:	e712      	b.n	40d492 <__aeabi_dmul+0x24a>

0040d66c <__aeabi_d2iz>:
  40d66c:	ea4f 0241 	mov.w	r2, r1, lsl #1
  40d670:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
  40d674:	d215      	bcs.n	40d6a2 <__aeabi_d2iz+0x36>
  40d676:	d511      	bpl.n	40d69c <__aeabi_d2iz+0x30>
  40d678:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
  40d67c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
  40d680:	d912      	bls.n	40d6a8 <__aeabi_d2iz+0x3c>
  40d682:	ea4f 23c1 	mov.w	r3, r1, lsl #11
  40d686:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
  40d68a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
  40d68e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  40d692:	fa23 f002 	lsr.w	r0, r3, r2
  40d696:	bf18      	it	ne
  40d698:	4240      	negne	r0, r0
  40d69a:	4770      	bx	lr
  40d69c:	f04f 0000 	mov.w	r0, #0
  40d6a0:	4770      	bx	lr
  40d6a2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
  40d6a6:	d105      	bne.n	40d6b4 <__aeabi_d2iz+0x48>
  40d6a8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
  40d6ac:	bf08      	it	eq
  40d6ae:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
  40d6b2:	4770      	bx	lr
  40d6b4:	f04f 0000 	mov.w	r0, #0
  40d6b8:	4770      	bx	lr
  40d6ba:	bf00      	nop

0040d6bc <__aeabi_uldivmod>:
  40d6bc:	b953      	cbnz	r3, 40d6d4 <__aeabi_uldivmod+0x18>
  40d6be:	b94a      	cbnz	r2, 40d6d4 <__aeabi_uldivmod+0x18>
  40d6c0:	2900      	cmp	r1, #0
  40d6c2:	bf08      	it	eq
  40d6c4:	2800      	cmpeq	r0, #0
  40d6c6:	bf1c      	itt	ne
  40d6c8:	f04f 31ff 	movne.w	r1, #4294967295
  40d6cc:	f04f 30ff 	movne.w	r0, #4294967295
  40d6d0:	f000 b83c 	b.w	40d74c <__aeabi_idiv0>
  40d6d4:	b082      	sub	sp, #8
  40d6d6:	46ec      	mov	ip, sp
  40d6d8:	e92d 5000 	stmdb	sp!, {ip, lr}
  40d6dc:	f000 f81e 	bl	40d71c <__gnu_uldivmod_helper>
  40d6e0:	f8dd e004 	ldr.w	lr, [sp, #4]
  40d6e4:	b002      	add	sp, #8
  40d6e6:	bc0c      	pop	{r2, r3}
  40d6e8:	4770      	bx	lr
  40d6ea:	bf00      	nop

0040d6ec <__gnu_ldivmod_helper>:
  40d6ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40d6f0:	9c06      	ldr	r4, [sp, #24]
  40d6f2:	4615      	mov	r5, r2
  40d6f4:	4606      	mov	r6, r0
  40d6f6:	460f      	mov	r7, r1
  40d6f8:	4698      	mov	r8, r3
  40d6fa:	f000 f829 	bl	40d750 <__divdi3>
  40d6fe:	fb05 f301 	mul.w	r3, r5, r1
  40d702:	fb00 3808 	mla	r8, r0, r8, r3
  40d706:	fba5 2300 	umull	r2, r3, r5, r0
  40d70a:	1ab2      	subs	r2, r6, r2
  40d70c:	4443      	add	r3, r8
  40d70e:	eb67 0303 	sbc.w	r3, r7, r3
  40d712:	e9c4 2300 	strd	r2, r3, [r4]
  40d716:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40d71a:	bf00      	nop

0040d71c <__gnu_uldivmod_helper>:
  40d71c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40d720:	9c06      	ldr	r4, [sp, #24]
  40d722:	4690      	mov	r8, r2
  40d724:	4606      	mov	r6, r0
  40d726:	460f      	mov	r7, r1
  40d728:	461d      	mov	r5, r3
  40d72a:	f000 f95f 	bl	40d9ec <__udivdi3>
  40d72e:	fb00 f505 	mul.w	r5, r0, r5
  40d732:	fba0 2308 	umull	r2, r3, r0, r8
  40d736:	fb08 5501 	mla	r5, r8, r1, r5
  40d73a:	1ab2      	subs	r2, r6, r2
  40d73c:	442b      	add	r3, r5
  40d73e:	eb67 0303 	sbc.w	r3, r7, r3
  40d742:	e9c4 2300 	strd	r2, r3, [r4]
  40d746:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40d74a:	bf00      	nop

0040d74c <__aeabi_idiv0>:
  40d74c:	4770      	bx	lr
  40d74e:	bf00      	nop

0040d750 <__divdi3>:
  40d750:	2900      	cmp	r1, #0
  40d752:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  40d756:	f2c0 80a6 	blt.w	40d8a6 <__divdi3+0x156>
  40d75a:	2600      	movs	r6, #0
  40d75c:	2b00      	cmp	r3, #0
  40d75e:	f2c0 809c 	blt.w	40d89a <__divdi3+0x14a>
  40d762:	4688      	mov	r8, r1
  40d764:	4694      	mov	ip, r2
  40d766:	469e      	mov	lr, r3
  40d768:	4615      	mov	r5, r2
  40d76a:	4604      	mov	r4, r0
  40d76c:	460f      	mov	r7, r1
  40d76e:	2b00      	cmp	r3, #0
  40d770:	d13d      	bne.n	40d7ee <__divdi3+0x9e>
  40d772:	428a      	cmp	r2, r1
  40d774:	d959      	bls.n	40d82a <__divdi3+0xda>
  40d776:	fab2 f382 	clz	r3, r2
  40d77a:	b13b      	cbz	r3, 40d78c <__divdi3+0x3c>
  40d77c:	f1c3 0220 	rsb	r2, r3, #32
  40d780:	409f      	lsls	r7, r3
  40d782:	fa20 f202 	lsr.w	r2, r0, r2
  40d786:	409d      	lsls	r5, r3
  40d788:	4317      	orrs	r7, r2
  40d78a:	409c      	lsls	r4, r3
  40d78c:	0c29      	lsrs	r1, r5, #16
  40d78e:	0c22      	lsrs	r2, r4, #16
  40d790:	fbb7 fef1 	udiv	lr, r7, r1
  40d794:	b2a8      	uxth	r0, r5
  40d796:	fb01 771e 	mls	r7, r1, lr, r7
  40d79a:	ea42 4707 	orr.w	r7, r2, r7, lsl #16
  40d79e:	fb00 f30e 	mul.w	r3, r0, lr
  40d7a2:	42bb      	cmp	r3, r7
  40d7a4:	d90a      	bls.n	40d7bc <__divdi3+0x6c>
  40d7a6:	197f      	adds	r7, r7, r5
  40d7a8:	f10e 32ff 	add.w	r2, lr, #4294967295
  40d7ac:	f080 8105 	bcs.w	40d9ba <__divdi3+0x26a>
  40d7b0:	42bb      	cmp	r3, r7
  40d7b2:	f240 8102 	bls.w	40d9ba <__divdi3+0x26a>
  40d7b6:	f1ae 0e02 	sub.w	lr, lr, #2
  40d7ba:	442f      	add	r7, r5
  40d7bc:	1aff      	subs	r7, r7, r3
  40d7be:	b2a4      	uxth	r4, r4
  40d7c0:	fbb7 f3f1 	udiv	r3, r7, r1
  40d7c4:	fb01 7713 	mls	r7, r1, r3, r7
  40d7c8:	ea44 4707 	orr.w	r7, r4, r7, lsl #16
  40d7cc:	fb00 f003 	mul.w	r0, r0, r3
  40d7d0:	42b8      	cmp	r0, r7
  40d7d2:	d908      	bls.n	40d7e6 <__divdi3+0x96>
  40d7d4:	197f      	adds	r7, r7, r5
  40d7d6:	f103 32ff 	add.w	r2, r3, #4294967295
  40d7da:	f080 80f0 	bcs.w	40d9be <__divdi3+0x26e>
  40d7de:	42b8      	cmp	r0, r7
  40d7e0:	f240 80ed 	bls.w	40d9be <__divdi3+0x26e>
  40d7e4:	3b02      	subs	r3, #2
  40d7e6:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
  40d7ea:	2200      	movs	r2, #0
  40d7ec:	e003      	b.n	40d7f6 <__divdi3+0xa6>
  40d7ee:	428b      	cmp	r3, r1
  40d7f0:	d90f      	bls.n	40d812 <__divdi3+0xc2>
  40d7f2:	2200      	movs	r2, #0
  40d7f4:	4613      	mov	r3, r2
  40d7f6:	1c34      	adds	r4, r6, #0
  40d7f8:	bf18      	it	ne
  40d7fa:	2401      	movne	r4, #1
  40d7fc:	4260      	negs	r0, r4
  40d7fe:	f04f 0500 	mov.w	r5, #0
  40d802:	eb65 0145 	sbc.w	r1, r5, r5, lsl #1
  40d806:	4058      	eors	r0, r3
  40d808:	4051      	eors	r1, r2
  40d80a:	1900      	adds	r0, r0, r4
  40d80c:	4169      	adcs	r1, r5
  40d80e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  40d812:	fab3 f283 	clz	r2, r3
  40d816:	2a00      	cmp	r2, #0
  40d818:	f040 8086 	bne.w	40d928 <__divdi3+0x1d8>
  40d81c:	428b      	cmp	r3, r1
  40d81e:	d302      	bcc.n	40d826 <__divdi3+0xd6>
  40d820:	4584      	cmp	ip, r0
  40d822:	f200 80db 	bhi.w	40d9dc <__divdi3+0x28c>
  40d826:	2301      	movs	r3, #1
  40d828:	e7e5      	b.n	40d7f6 <__divdi3+0xa6>
  40d82a:	b912      	cbnz	r2, 40d832 <__divdi3+0xe2>
  40d82c:	2301      	movs	r3, #1
  40d82e:	fbb3 f5f2 	udiv	r5, r3, r2
  40d832:	fab5 f085 	clz	r0, r5
  40d836:	2800      	cmp	r0, #0
  40d838:	d13b      	bne.n	40d8b2 <__divdi3+0x162>
  40d83a:	1b78      	subs	r0, r7, r5
  40d83c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
  40d840:	fa1f fc85 	uxth.w	ip, r5
  40d844:	2201      	movs	r2, #1
  40d846:	fbb0 f8fe 	udiv	r8, r0, lr
  40d84a:	0c21      	lsrs	r1, r4, #16
  40d84c:	fb0e 0718 	mls	r7, lr, r8, r0
  40d850:	ea41 4707 	orr.w	r7, r1, r7, lsl #16
  40d854:	fb0c f308 	mul.w	r3, ip, r8
  40d858:	42bb      	cmp	r3, r7
  40d85a:	d907      	bls.n	40d86c <__divdi3+0x11c>
  40d85c:	197f      	adds	r7, r7, r5
  40d85e:	f108 31ff 	add.w	r1, r8, #4294967295
  40d862:	d202      	bcs.n	40d86a <__divdi3+0x11a>
  40d864:	42bb      	cmp	r3, r7
  40d866:	f200 80bd 	bhi.w	40d9e4 <__divdi3+0x294>
  40d86a:	4688      	mov	r8, r1
  40d86c:	1aff      	subs	r7, r7, r3
  40d86e:	b2a4      	uxth	r4, r4
  40d870:	fbb7 f3fe 	udiv	r3, r7, lr
  40d874:	fb0e 7713 	mls	r7, lr, r3, r7
  40d878:	ea44 4707 	orr.w	r7, r4, r7, lsl #16
  40d87c:	fb0c fc03 	mul.w	ip, ip, r3
  40d880:	45bc      	cmp	ip, r7
  40d882:	d907      	bls.n	40d894 <__divdi3+0x144>
  40d884:	197f      	adds	r7, r7, r5
  40d886:	f103 31ff 	add.w	r1, r3, #4294967295
  40d88a:	d202      	bcs.n	40d892 <__divdi3+0x142>
  40d88c:	45bc      	cmp	ip, r7
  40d88e:	f200 80a7 	bhi.w	40d9e0 <__divdi3+0x290>
  40d892:	460b      	mov	r3, r1
  40d894:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
  40d898:	e7ad      	b.n	40d7f6 <__divdi3+0xa6>
  40d89a:	4252      	negs	r2, r2
  40d89c:	ea6f 0606 	mvn.w	r6, r6
  40d8a0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
  40d8a4:	e75d      	b.n	40d762 <__divdi3+0x12>
  40d8a6:	4240      	negs	r0, r0
  40d8a8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  40d8ac:	f04f 36ff 	mov.w	r6, #4294967295
  40d8b0:	e754      	b.n	40d75c <__divdi3+0xc>
  40d8b2:	f1c0 0220 	rsb	r2, r0, #32
  40d8b6:	fa24 f102 	lsr.w	r1, r4, r2
  40d8ba:	fa07 f300 	lsl.w	r3, r7, r0
  40d8be:	4085      	lsls	r5, r0
  40d8c0:	ea4f 4e15 	mov.w	lr, r5, lsr #16
  40d8c4:	40d7      	lsrs	r7, r2
  40d8c6:	4319      	orrs	r1, r3
  40d8c8:	fbb7 f2fe 	udiv	r2, r7, lr
  40d8cc:	0c0b      	lsrs	r3, r1, #16
  40d8ce:	fb0e 7712 	mls	r7, lr, r2, r7
  40d8d2:	fa1f fc85 	uxth.w	ip, r5
  40d8d6:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
  40d8da:	fb0c f702 	mul.w	r7, ip, r2
  40d8de:	429f      	cmp	r7, r3
  40d8e0:	fa04 f400 	lsl.w	r4, r4, r0
  40d8e4:	d907      	bls.n	40d8f6 <__divdi3+0x1a6>
  40d8e6:	195b      	adds	r3, r3, r5
  40d8e8:	f102 30ff 	add.w	r0, r2, #4294967295
  40d8ec:	d274      	bcs.n	40d9d8 <__divdi3+0x288>
  40d8ee:	429f      	cmp	r7, r3
  40d8f0:	d972      	bls.n	40d9d8 <__divdi3+0x288>
  40d8f2:	3a02      	subs	r2, #2
  40d8f4:	442b      	add	r3, r5
  40d8f6:	1bdf      	subs	r7, r3, r7
  40d8f8:	b289      	uxth	r1, r1
  40d8fa:	fbb7 f8fe 	udiv	r8, r7, lr
  40d8fe:	fb0e 7318 	mls	r3, lr, r8, r7
  40d902:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
  40d906:	fb0c f708 	mul.w	r7, ip, r8
  40d90a:	429f      	cmp	r7, r3
  40d90c:	d908      	bls.n	40d920 <__divdi3+0x1d0>
  40d90e:	195b      	adds	r3, r3, r5
  40d910:	f108 31ff 	add.w	r1, r8, #4294967295
  40d914:	d25c      	bcs.n	40d9d0 <__divdi3+0x280>
  40d916:	429f      	cmp	r7, r3
  40d918:	d95a      	bls.n	40d9d0 <__divdi3+0x280>
  40d91a:	f1a8 0802 	sub.w	r8, r8, #2
  40d91e:	442b      	add	r3, r5
  40d920:	1bd8      	subs	r0, r3, r7
  40d922:	ea48 4202 	orr.w	r2, r8, r2, lsl #16
  40d926:	e78e      	b.n	40d846 <__divdi3+0xf6>
  40d928:	f1c2 0320 	rsb	r3, r2, #32
  40d92c:	fa2c f103 	lsr.w	r1, ip, r3
  40d930:	fa0e fe02 	lsl.w	lr, lr, r2
  40d934:	fa20 f703 	lsr.w	r7, r0, r3
  40d938:	ea41 0e0e 	orr.w	lr, r1, lr
  40d93c:	fa08 f002 	lsl.w	r0, r8, r2
  40d940:	fa28 f103 	lsr.w	r1, r8, r3
  40d944:	ea4f 451e 	mov.w	r5, lr, lsr #16
  40d948:	4338      	orrs	r0, r7
  40d94a:	fbb1 f8f5 	udiv	r8, r1, r5
  40d94e:	0c03      	lsrs	r3, r0, #16
  40d950:	fb05 1118 	mls	r1, r5, r8, r1
  40d954:	fa1f f78e 	uxth.w	r7, lr
  40d958:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
  40d95c:	fb07 f308 	mul.w	r3, r7, r8
  40d960:	428b      	cmp	r3, r1
  40d962:	fa0c fc02 	lsl.w	ip, ip, r2
  40d966:	d909      	bls.n	40d97c <__divdi3+0x22c>
  40d968:	eb11 010e 	adds.w	r1, r1, lr
  40d96c:	f108 39ff 	add.w	r9, r8, #4294967295
  40d970:	d230      	bcs.n	40d9d4 <__divdi3+0x284>
  40d972:	428b      	cmp	r3, r1
  40d974:	d92e      	bls.n	40d9d4 <__divdi3+0x284>
  40d976:	f1a8 0802 	sub.w	r8, r8, #2
  40d97a:	4471      	add	r1, lr
  40d97c:	1ac9      	subs	r1, r1, r3
  40d97e:	b280      	uxth	r0, r0
  40d980:	fbb1 f3f5 	udiv	r3, r1, r5
  40d984:	fb05 1113 	mls	r1, r5, r3, r1
  40d988:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
  40d98c:	fb07 f703 	mul.w	r7, r7, r3
  40d990:	428f      	cmp	r7, r1
  40d992:	d908      	bls.n	40d9a6 <__divdi3+0x256>
  40d994:	eb11 010e 	adds.w	r1, r1, lr
  40d998:	f103 30ff 	add.w	r0, r3, #4294967295
  40d99c:	d216      	bcs.n	40d9cc <__divdi3+0x27c>
  40d99e:	428f      	cmp	r7, r1
  40d9a0:	d914      	bls.n	40d9cc <__divdi3+0x27c>
  40d9a2:	3b02      	subs	r3, #2
  40d9a4:	4471      	add	r1, lr
  40d9a6:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
  40d9aa:	1bc9      	subs	r1, r1, r7
  40d9ac:	fba3 890c 	umull	r8, r9, r3, ip
  40d9b0:	4549      	cmp	r1, r9
  40d9b2:	d309      	bcc.n	40d9c8 <__divdi3+0x278>
  40d9b4:	d005      	beq.n	40d9c2 <__divdi3+0x272>
  40d9b6:	2200      	movs	r2, #0
  40d9b8:	e71d      	b.n	40d7f6 <__divdi3+0xa6>
  40d9ba:	4696      	mov	lr, r2
  40d9bc:	e6fe      	b.n	40d7bc <__divdi3+0x6c>
  40d9be:	4613      	mov	r3, r2
  40d9c0:	e711      	b.n	40d7e6 <__divdi3+0x96>
  40d9c2:	4094      	lsls	r4, r2
  40d9c4:	4544      	cmp	r4, r8
  40d9c6:	d2f6      	bcs.n	40d9b6 <__divdi3+0x266>
  40d9c8:	3b01      	subs	r3, #1
  40d9ca:	e7f4      	b.n	40d9b6 <__divdi3+0x266>
  40d9cc:	4603      	mov	r3, r0
  40d9ce:	e7ea      	b.n	40d9a6 <__divdi3+0x256>
  40d9d0:	4688      	mov	r8, r1
  40d9d2:	e7a5      	b.n	40d920 <__divdi3+0x1d0>
  40d9d4:	46c8      	mov	r8, r9
  40d9d6:	e7d1      	b.n	40d97c <__divdi3+0x22c>
  40d9d8:	4602      	mov	r2, r0
  40d9da:	e78c      	b.n	40d8f6 <__divdi3+0x1a6>
  40d9dc:	4613      	mov	r3, r2
  40d9de:	e70a      	b.n	40d7f6 <__divdi3+0xa6>
  40d9e0:	3b02      	subs	r3, #2
  40d9e2:	e757      	b.n	40d894 <__divdi3+0x144>
  40d9e4:	f1a8 0802 	sub.w	r8, r8, #2
  40d9e8:	442f      	add	r7, r5
  40d9ea:	e73f      	b.n	40d86c <__divdi3+0x11c>

0040d9ec <__udivdi3>:
  40d9ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40d9f0:	2b00      	cmp	r3, #0
  40d9f2:	d144      	bne.n	40da7e <__udivdi3+0x92>
  40d9f4:	428a      	cmp	r2, r1
  40d9f6:	4615      	mov	r5, r2
  40d9f8:	4604      	mov	r4, r0
  40d9fa:	d94f      	bls.n	40da9c <__udivdi3+0xb0>
  40d9fc:	fab2 f782 	clz	r7, r2
  40da00:	460e      	mov	r6, r1
  40da02:	b14f      	cbz	r7, 40da18 <__udivdi3+0x2c>
  40da04:	f1c7 0320 	rsb	r3, r7, #32
  40da08:	40b9      	lsls	r1, r7
  40da0a:	fa20 f603 	lsr.w	r6, r0, r3
  40da0e:	fa02 f507 	lsl.w	r5, r2, r7
  40da12:	430e      	orrs	r6, r1
  40da14:	fa00 f407 	lsl.w	r4, r0, r7
  40da18:	ea4f 4e15 	mov.w	lr, r5, lsr #16
  40da1c:	0c23      	lsrs	r3, r4, #16
  40da1e:	fbb6 f0fe 	udiv	r0, r6, lr
  40da22:	b2af      	uxth	r7, r5
  40da24:	fb0e 6110 	mls	r1, lr, r0, r6
  40da28:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
  40da2c:	fb07 f100 	mul.w	r1, r7, r0
  40da30:	4299      	cmp	r1, r3
  40da32:	d909      	bls.n	40da48 <__udivdi3+0x5c>
  40da34:	195b      	adds	r3, r3, r5
  40da36:	f100 32ff 	add.w	r2, r0, #4294967295
  40da3a:	f080 80ec 	bcs.w	40dc16 <__udivdi3+0x22a>
  40da3e:	4299      	cmp	r1, r3
  40da40:	f240 80e9 	bls.w	40dc16 <__udivdi3+0x22a>
  40da44:	3802      	subs	r0, #2
  40da46:	442b      	add	r3, r5
  40da48:	1a5a      	subs	r2, r3, r1
  40da4a:	b2a4      	uxth	r4, r4
  40da4c:	fbb2 f3fe 	udiv	r3, r2, lr
  40da50:	fb0e 2213 	mls	r2, lr, r3, r2
  40da54:	ea44 4202 	orr.w	r2, r4, r2, lsl #16
  40da58:	fb07 f703 	mul.w	r7, r7, r3
  40da5c:	4297      	cmp	r7, r2
  40da5e:	d908      	bls.n	40da72 <__udivdi3+0x86>
  40da60:	1952      	adds	r2, r2, r5
  40da62:	f103 31ff 	add.w	r1, r3, #4294967295
  40da66:	f080 80d8 	bcs.w	40dc1a <__udivdi3+0x22e>
  40da6a:	4297      	cmp	r7, r2
  40da6c:	f240 80d5 	bls.w	40dc1a <__udivdi3+0x22e>
  40da70:	3b02      	subs	r3, #2
  40da72:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
  40da76:	2600      	movs	r6, #0
  40da78:	4631      	mov	r1, r6
  40da7a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40da7e:	428b      	cmp	r3, r1
  40da80:	d847      	bhi.n	40db12 <__udivdi3+0x126>
  40da82:	fab3 f683 	clz	r6, r3
  40da86:	2e00      	cmp	r6, #0
  40da88:	d148      	bne.n	40db1c <__udivdi3+0x130>
  40da8a:	428b      	cmp	r3, r1
  40da8c:	d302      	bcc.n	40da94 <__udivdi3+0xa8>
  40da8e:	4282      	cmp	r2, r0
  40da90:	f200 80cd 	bhi.w	40dc2e <__udivdi3+0x242>
  40da94:	2001      	movs	r0, #1
  40da96:	4631      	mov	r1, r6
  40da98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40da9c:	b912      	cbnz	r2, 40daa4 <__udivdi3+0xb8>
  40da9e:	2501      	movs	r5, #1
  40daa0:	fbb5 f5f2 	udiv	r5, r5, r2
  40daa4:	fab5 f885 	clz	r8, r5
  40daa8:	f1b8 0f00 	cmp.w	r8, #0
  40daac:	d177      	bne.n	40db9e <__udivdi3+0x1b2>
  40daae:	1b4a      	subs	r2, r1, r5
  40dab0:	ea4f 4e15 	mov.w	lr, r5, lsr #16
  40dab4:	b2af      	uxth	r7, r5
  40dab6:	2601      	movs	r6, #1
  40dab8:	fbb2 f0fe 	udiv	r0, r2, lr
  40dabc:	0c23      	lsrs	r3, r4, #16
  40dabe:	fb0e 2110 	mls	r1, lr, r0, r2
  40dac2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
  40dac6:	fb07 f300 	mul.w	r3, r7, r0
  40daca:	428b      	cmp	r3, r1
  40dacc:	d907      	bls.n	40dade <__udivdi3+0xf2>
  40dace:	1949      	adds	r1, r1, r5
  40dad0:	f100 32ff 	add.w	r2, r0, #4294967295
  40dad4:	d202      	bcs.n	40dadc <__udivdi3+0xf0>
  40dad6:	428b      	cmp	r3, r1
  40dad8:	f200 80ba 	bhi.w	40dc50 <__udivdi3+0x264>
  40dadc:	4610      	mov	r0, r2
  40dade:	1ac9      	subs	r1, r1, r3
  40dae0:	b2a4      	uxth	r4, r4
  40dae2:	fbb1 f3fe 	udiv	r3, r1, lr
  40dae6:	fb0e 1113 	mls	r1, lr, r3, r1
  40daea:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
  40daee:	fb07 f703 	mul.w	r7, r7, r3
  40daf2:	42a7      	cmp	r7, r4
  40daf4:	d908      	bls.n	40db08 <__udivdi3+0x11c>
  40daf6:	1964      	adds	r4, r4, r5
  40daf8:	f103 32ff 	add.w	r2, r3, #4294967295
  40dafc:	f080 808f 	bcs.w	40dc1e <__udivdi3+0x232>
  40db00:	42a7      	cmp	r7, r4
  40db02:	f240 808c 	bls.w	40dc1e <__udivdi3+0x232>
  40db06:	3b02      	subs	r3, #2
  40db08:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
  40db0c:	4631      	mov	r1, r6
  40db0e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40db12:	2600      	movs	r6, #0
  40db14:	4630      	mov	r0, r6
  40db16:	4631      	mov	r1, r6
  40db18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40db1c:	f1c6 0420 	rsb	r4, r6, #32
  40db20:	fa22 f504 	lsr.w	r5, r2, r4
  40db24:	40b3      	lsls	r3, r6
  40db26:	432b      	orrs	r3, r5
  40db28:	fa20 fc04 	lsr.w	ip, r0, r4
  40db2c:	fa01 f706 	lsl.w	r7, r1, r6
  40db30:	fa21 f504 	lsr.w	r5, r1, r4
  40db34:	ea4f 4e13 	mov.w	lr, r3, lsr #16
  40db38:	ea4c 0707 	orr.w	r7, ip, r7
  40db3c:	fbb5 f8fe 	udiv	r8, r5, lr
  40db40:	0c39      	lsrs	r1, r7, #16
  40db42:	fb0e 5518 	mls	r5, lr, r8, r5
  40db46:	fa1f fc83 	uxth.w	ip, r3
  40db4a:	ea41 4505 	orr.w	r5, r1, r5, lsl #16
  40db4e:	fb0c f108 	mul.w	r1, ip, r8
  40db52:	42a9      	cmp	r1, r5
  40db54:	fa02 f206 	lsl.w	r2, r2, r6
  40db58:	d904      	bls.n	40db64 <__udivdi3+0x178>
  40db5a:	18ed      	adds	r5, r5, r3
  40db5c:	f108 34ff 	add.w	r4, r8, #4294967295
  40db60:	d367      	bcc.n	40dc32 <__udivdi3+0x246>
  40db62:	46a0      	mov	r8, r4
  40db64:	1a6d      	subs	r5, r5, r1
  40db66:	b2bf      	uxth	r7, r7
  40db68:	fbb5 f4fe 	udiv	r4, r5, lr
  40db6c:	fb0e 5514 	mls	r5, lr, r4, r5
  40db70:	ea47 4105 	orr.w	r1, r7, r5, lsl #16
  40db74:	fb0c fc04 	mul.w	ip, ip, r4
  40db78:	458c      	cmp	ip, r1
  40db7a:	d904      	bls.n	40db86 <__udivdi3+0x19a>
  40db7c:	18c9      	adds	r1, r1, r3
  40db7e:	f104 35ff 	add.w	r5, r4, #4294967295
  40db82:	d35c      	bcc.n	40dc3e <__udivdi3+0x252>
  40db84:	462c      	mov	r4, r5
  40db86:	ea44 4408 	orr.w	r4, r4, r8, lsl #16
  40db8a:	ebcc 0101 	rsb	r1, ip, r1
  40db8e:	fba4 2302 	umull	r2, r3, r4, r2
  40db92:	4299      	cmp	r1, r3
  40db94:	d348      	bcc.n	40dc28 <__udivdi3+0x23c>
  40db96:	d044      	beq.n	40dc22 <__udivdi3+0x236>
  40db98:	4620      	mov	r0, r4
  40db9a:	2600      	movs	r6, #0
  40db9c:	e76c      	b.n	40da78 <__udivdi3+0x8c>
  40db9e:	f1c8 0420 	rsb	r4, r8, #32
  40dba2:	fa01 f308 	lsl.w	r3, r1, r8
  40dba6:	fa05 f508 	lsl.w	r5, r5, r8
  40dbaa:	fa20 f704 	lsr.w	r7, r0, r4
  40dbae:	40e1      	lsrs	r1, r4
  40dbb0:	ea4f 4e15 	mov.w	lr, r5, lsr #16
  40dbb4:	431f      	orrs	r7, r3
  40dbb6:	fbb1 f6fe 	udiv	r6, r1, lr
  40dbba:	0c3a      	lsrs	r2, r7, #16
  40dbbc:	fb0e 1116 	mls	r1, lr, r6, r1
  40dbc0:	fa1f fc85 	uxth.w	ip, r5
  40dbc4:	ea42 4301 	orr.w	r3, r2, r1, lsl #16
  40dbc8:	fb0c f206 	mul.w	r2, ip, r6
  40dbcc:	429a      	cmp	r2, r3
  40dbce:	fa00 f408 	lsl.w	r4, r0, r8
  40dbd2:	d907      	bls.n	40dbe4 <__udivdi3+0x1f8>
  40dbd4:	195b      	adds	r3, r3, r5
  40dbd6:	f106 31ff 	add.w	r1, r6, #4294967295
  40dbda:	d237      	bcs.n	40dc4c <__udivdi3+0x260>
  40dbdc:	429a      	cmp	r2, r3
  40dbde:	d935      	bls.n	40dc4c <__udivdi3+0x260>
  40dbe0:	3e02      	subs	r6, #2
  40dbe2:	442b      	add	r3, r5
  40dbe4:	1a9b      	subs	r3, r3, r2
  40dbe6:	b2bf      	uxth	r7, r7
  40dbe8:	fbb3 f0fe 	udiv	r0, r3, lr
  40dbec:	fb0e 3310 	mls	r3, lr, r0, r3
  40dbf0:	ea47 4303 	orr.w	r3, r7, r3, lsl #16
  40dbf4:	fb0c f100 	mul.w	r1, ip, r0
  40dbf8:	4299      	cmp	r1, r3
  40dbfa:	d907      	bls.n	40dc0c <__udivdi3+0x220>
  40dbfc:	195b      	adds	r3, r3, r5
  40dbfe:	f100 32ff 	add.w	r2, r0, #4294967295
  40dc02:	d221      	bcs.n	40dc48 <__udivdi3+0x25c>
  40dc04:	4299      	cmp	r1, r3
  40dc06:	d91f      	bls.n	40dc48 <__udivdi3+0x25c>
  40dc08:	3802      	subs	r0, #2
  40dc0a:	442b      	add	r3, r5
  40dc0c:	1a5a      	subs	r2, r3, r1
  40dc0e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
  40dc12:	4667      	mov	r7, ip
  40dc14:	e750      	b.n	40dab8 <__udivdi3+0xcc>
  40dc16:	4610      	mov	r0, r2
  40dc18:	e716      	b.n	40da48 <__udivdi3+0x5c>
  40dc1a:	460b      	mov	r3, r1
  40dc1c:	e729      	b.n	40da72 <__udivdi3+0x86>
  40dc1e:	4613      	mov	r3, r2
  40dc20:	e772      	b.n	40db08 <__udivdi3+0x11c>
  40dc22:	40b0      	lsls	r0, r6
  40dc24:	4290      	cmp	r0, r2
  40dc26:	d2b7      	bcs.n	40db98 <__udivdi3+0x1ac>
  40dc28:	1e60      	subs	r0, r4, #1
  40dc2a:	2600      	movs	r6, #0
  40dc2c:	e724      	b.n	40da78 <__udivdi3+0x8c>
  40dc2e:	4630      	mov	r0, r6
  40dc30:	e722      	b.n	40da78 <__udivdi3+0x8c>
  40dc32:	42a9      	cmp	r1, r5
  40dc34:	d995      	bls.n	40db62 <__udivdi3+0x176>
  40dc36:	f1a8 0802 	sub.w	r8, r8, #2
  40dc3a:	441d      	add	r5, r3
  40dc3c:	e792      	b.n	40db64 <__udivdi3+0x178>
  40dc3e:	458c      	cmp	ip, r1
  40dc40:	d9a0      	bls.n	40db84 <__udivdi3+0x198>
  40dc42:	3c02      	subs	r4, #2
  40dc44:	4419      	add	r1, r3
  40dc46:	e79e      	b.n	40db86 <__udivdi3+0x19a>
  40dc48:	4610      	mov	r0, r2
  40dc4a:	e7df      	b.n	40dc0c <__udivdi3+0x220>
  40dc4c:	460e      	mov	r6, r1
  40dc4e:	e7c9      	b.n	40dbe4 <__udivdi3+0x1f8>
  40dc50:	3802      	subs	r0, #2
  40dc52:	4429      	add	r1, r5
  40dc54:	e743      	b.n	40dade <__udivdi3+0xf2>
  40dc56:	bf00      	nop

0040dc58 <OV7740_VGA_YUV422_20FPS>:
  40dc58:	000e 8012 05fe 0013 0211 0012 10d5 d40c     ................
  40dc68:	340d 0116 2517 a018 0319 f01a 891b 0322     .4...%........".
  40dc78:	1829 f82b 012c a031 f032 c433 b43a 3f36     ).+.,.1.2.3.:.6?
  40dc88:	6004 8027 0f3d 803e 403f 7f40 6a41 2942     .`'.=.>.?@@.AjB)
  40dc98:	e544 4145 0247 6449 a14a 704b 1a4c 504d     D.EAG.IdJ.KpL.MP
  40dca8:	134e 0064 8867 1a68 3814 3c24 3025 7226     N.d.g.h..8$<%0&r
  40dcb8:	9750 7e51 0052 0053 0020 2321 1438 00e9     P.Q~R.S. .!#8...
  40dcc8:	5556 ff57 ff58 ff59 045f 00ec ff13 7f80     VUW.X.Y._.......
  40dcd8:	3f81 3282 0183 1138 0085 0386 0187 0588     .?.2..8.........
  40dce8:	3089 308d 858f 3093 8595 3099 859b 089c     .0.0...0...0....
  40dcf8:	129d 239e 459f 55a0 64a1 72a2 7fa3 8ba4     ...#.E.U.d.r....
  40dd08:	95a5 a7a6 b5a7 cba8 dda9 ecaa 1aab 78ce     ...............x
  40dd18:	6ecf 0ad0 0cd1 84d2 90d3 1ed4 245a 1f5b     .n..........Z$[.
  40dd28:	885c 605d 6eac ffbe 00bf a031 f032 3f82     \.]`.n....1.2..?
  40dd38:	0012 3f36 0053 c433 891b 0322 0228 ffff     ..6?S.3...".(...

0040dd48 <OV7740_QQVGA_RGB888>:
  40dd48:	000e 8012 0013 0111 0012 10d5 120c 340d     ...............4
  40dd58:	2517 a018 0319 f01a 891b 0322 1829 f82b     .%........".).+.
  40dd68:	012c a031 f032 c433 b43a 3f36 6004 8027     ,.1.2.3.:.6?.`'.
  40dd78:	0f3d 803e 403f 7f40 6a41 2942 e544 4145     =.>.?@@.AjB)D.EA
  40dd88:	0247 6449 a14a 704b 1a4c 504d 134e 0064     G.IdJ.KpL.MPN.d.
  40dd98:	8867 1a68 3814 3c24 3025 7226 9750 7e51     g.h..8$<%0&rP.Q~
  40dda8:	0052 0053 0020 2321 1438 00e9 5556 ff57     R.S. .!#8...VUW.
  40ddb8:	ff58 ff59 045f 00ec ff13 7f80 3f81 3282     X.Y._........?.2
  40ddc8:	0183 1138 7084 0085 0386 0187 0588 3089     ..8..p.........0
  40ddd8:	308d 858f 3093 8595 3099 859b 089c 129d     .0...0...0......
  40dde8:	239e 459f 55a0 64a1 72a2 7fa3 8ba4 95a5     .#.E.U.d.r......
  40ddf8:	a7a6 b5a7 cba8 dda9 ecaa 1aab 78ce 6ecf     .............x.n
  40de08:	0ad0 0cd1 84d2 90d3 1ed4 245a 1f5b 885c     ..........Z$[.\.
  40de18:	605d 6eac ffbe 00bf 2831 3c32 3f82 0112     ]`.n....1(2<.?..
  40de28:	2f36 0483 0053 f433 8a1b 0322 0084 0084     6/..S.3...".....
  40de38:	0228 ffff                                   (...

0040de3c <OV7740_QVGA_YUV422_15FPS>:
  40de3c:	000e 8012 05fe 0013 0311 0012 10d5 d40c     ................
  40de4c:	340d 0116 2517 a018 0319 f01a 891b 0322     .4...%........".
  40de5c:	1829 f82b 012c a031 f032 c433 b43a 3f36     ).+.,.1.2.3.:.6?
  40de6c:	6004 8027 0f3d 803e 403f 7f40 6a41 2942     .`'.=.>.?@@.AjB)
  40de7c:	e544 4145 0247 6449 a14a 704b 1a4c 504d     D.EAG.IdJ.KpL.MP
  40de8c:	134e 0064 8867 1a68 3814 3c24 3025 7226     N.d.g.h..8$<%0&r
  40de9c:	9750 7e51 0052 0053 0020 2321 1438 00e9     P.Q~R.S. .!#8...
  40deac:	5556 ff57 ff58 ff59 045f 00ec ff13 7f80     VUW.X.Y._.......
  40debc:	3f81 3282 0183 1138 0085 0386 0187 0588     .?.2..8.........
  40decc:	3089 308d 858f 3093 8595 3099 859b 089c     .0.0...0...0....
  40dedc:	129d 239e 459f 55a0 64a1 72a2 7fa3 8ba4     ...#.E.U.d.r....
  40deec:	95a5 a7a6 b5a7 cba8 dda9 ecaa 1aab 78ce     ...............x
  40defc:	6ecf 0ad0 0cd1 84d2 90d3 1ed4 245a 1f5b     .n..........Z$[.
  40df0c:	885c 605d 6eac ffbe 00bf 5031 7832 3f82     \.]`.n....1P2x.?
  40df1c:	0012 3f36 0053 c433 891b 0322 0228 ffff     ..6?S.3...".(...

0040df2c <OV7740_QVGA_RGB888>:
  40df2c:	000e 8012 0013 0111 0012 10d5 120c 340d     ...............4
  40df3c:	2517 a018 0319 f01a 891b 0322 1829 f82b     .%........".).+.
  40df4c:	012c a031 f032 c433 b43a 3f36 6004 8027     ,.1.2.3.:.6?.`'.
  40df5c:	0f3d 803e 403f 7f40 6a41 2942 e544 4145     =.>.?@@.AjB)D.EA
  40df6c:	0247 6449 a14a 704b 1a4c 504d 134e 0064     G.IdJ.KpL.MPN.d.
  40df7c:	8867 1a68 3814 3c24 3025 7226 9750 7e51     g.h..8$<%0&rP.Q~
  40df8c:	0052 0053 0020 2321 1438 00e9 5556 ff57     R.S. .!#8...VUW.
  40df9c:	ff58 ff59 045f 00ec ff13 7f80 3f81 3282     X.Y._........?.2
  40dfac:	0183 1138 7084 0085 0386 0187 0588 3089     ..8..p.........0
  40dfbc:	308d 858f 3093 8595 3099 859b 089c 129d     .0...0...0......
  40dfcc:	239e 459f 55a0 64a1 72a2 7fa3 8ba4 95a5     .#.E.U.d.r......
  40dfdc:	a7a6 b5a7 cba8 dda9 ecaa 1aab 78ce 6ecf     .............x.n
  40dfec:	0ad0 0cd1 84d2 90d3 1ed4 245a 1f5b 885c     ..........Z$[.\.
  40dffc:	605d 6eac ffbe 00bf 5031 7832 3f82 0112     ]`.n....1P2x.?..
  40e00c:	2f36 0483 0053 f433 8a1b 0322 0084 0084     6/..S.3...".....
  40e01c:	0228 ffff                                   (...

0040e020 <OV7740_TEST_PATTERN>:
  40e020:	000e 8012 05fe 0013 0211 0012 10d5 d40c     ................
  40e030:	340d 0116 2517 a018 0319 f01a 891b 0322     .4...%........".
  40e040:	1829 f82b 012c a031 f032 c433 b43a 3f36     ).+.,.1.2.3.:.6?
  40e050:	6004 8027 0f3d 803e 403f 7f40 6a41 2942     .`'.=.>.?@@.AjB)
  40e060:	e544 4145 0247 6449 a14a 704b 1a4c 504d     D.EAG.IdJ.KpL.MP
  40e070:	134e 0064 8867 1a68 3814 3c24 3025 7226     N.d.g.h..8$<%0&r
  40e080:	9750 7e51 0052 0053 0020 2321 0738 0284     P.Q~R.S. .!#8...
  40e090:	1438 00e9 5556 ff57 ff58 ff59 045f 00ec     8...VUW.X.Y._...
  40e0a0:	ff13 7f80 3f81 3282 0183 1138 0085 0386     .....?.2..8.....
  40e0b0:	0187 0588 3089 308d 858f 3093 8595 3099     .....0.0...0...0
  40e0c0:	859b 089c 129d 239e 459f 55a0 64a1 72a2     .......#.E.U.d.r
  40e0d0:	7fa3 8ba4 95a5 a7a6 b5a7 cba8 dda9 ecaa     ................
  40e0e0:	1aab 78ce 6ecf 0ad0 0cd1 84d2 90d3 1ed4     ...x.n..........
  40e0f0:	245a 1f5b 885c 605d 6eac ffbe 00bf 5031     Z$[.\.]`.n....1P
  40e100:	7832 3f82 0012 3f36 0053 c433 891b 0322     2x.?..6?S.3...".
  40e110:	0228 ffff                                   (...

0040e114 <OV7740_QVGA_YUV422_20FPS>:
  40e114:	000e 8012 05fe 0013 0211 0012 10d5 d40c     ................
  40e124:	340d 0116 2517 a018 0319 f01a 891b 0322     .4...%........".
  40e134:	1829 f82b 012c a031 f032 c433 b43a 3f36     ).+.,.1.2.3.:.6?
  40e144:	6004 8027 0f3d 803e 403f 7f40 6a41 2942     .`'.=.>.?@@.AjB)
  40e154:	e544 4145 0247 6449 a14a 704b 1a4c 504d     D.EAG.IdJ.KpL.MP
  40e164:	134e 0064 8867 1a68 3814 3c24 3025 7226     N.d.g.h..8$<%0&r
  40e174:	9750 7e51 0052 0053 0020 2321 1438 00e9     P.Q~R.S. .!#8...
  40e184:	5556 ff57 ff58 ff59 045f 00ec ff13 7f80     VUW.X.Y._.......
  40e194:	3f81 3282 0183 1138 0085 0386 0187 0588     .?.2..8.........
  40e1a4:	3089 308d 858f 3093 8595 3099 859b 089c     .0.0...0...0....
  40e1b4:	129d 239e 459f 55a0 64a1 72a2 7fa3 8ba4     ...#.E.U.d.r....
  40e1c4:	95a5 a7a6 b5a7 cba8 dda9 ecaa 1aab 78ce     ...............x
  40e1d4:	6ecf 0ad0 0cd1 84d2 90d3 1ed4 245a 1f5b     .n..........Z$[.
  40e1e4:	885c 605d 6eac ffbe 00bf 5031 7832 3f82     \.]`.n....1P2x.?
  40e1f4:	0012 3f36 0053 c433 891b 0322 0228 ffff     ..6?S.3...".(...

0040e204 <OV7740_QVGA_YUV422_10FPS>:
  40e204:	000e 8012 05fe 0013 0511 0012 10d5 d40c     ................
  40e214:	340d 0116 2517 a018 0319 f01a 891b 0322     .4...%........".
  40e224:	1829 f82b 012c a031 f032 c433 b43a 3f36     ).+.,.1.2.3.:.6?
  40e234:	6004 8027 0f3d 803e 403f 7f40 6a41 2942     .`'.=.>.?@@.AjB)
  40e244:	e544 4145 0247 6449 a14a 704b 1a4c 504d     D.EAG.IdJ.KpL.MP
  40e254:	134e 0064 8867 1a68 3814 3c24 3025 7226     N.d.g.h..8$<%0&r
  40e264:	9750 7e51 0052 0053 0020 2321 1438 00e9     P.Q~R.S. .!#8...
  40e274:	5556 ff57 ff58 ff59 045f 00ec ff13 7f80     VUW.X.Y._.......
  40e284:	3f81 3282 0183 1138 0085 0386 0187 0588     .?.2..8.........
  40e294:	3089 308d 858f 3093 8595 3099 859b 089c     .0.0...0...0....
  40e2a4:	129d 239e 459f 55a0 64a1 72a2 7fa3 8ba4     ...#.E.U.d.r....
  40e2b4:	95a5 a7a6 b5a7 cba8 dda9 ecaa 1aab 78ce     ...............x
  40e2c4:	6ecf 0ad0 0cd1 84d2 90d3 1ed4 245a 1f5b     .n..........Z$[.
  40e2d4:	885c 605d 6eac ffbe 00bf 5031 7832 3f82     \.]`.n....1P2x.?
  40e2e4:	0012 3f36 0053 c433 891b 0322 0228 ffff     ..6?S.3...".(...

0040e2f4 <OV7740_QQVGA_YUV422>:
  40e2f4:	000e 8012 0013 0111 0012 10d5 540c 340d     .............T.4
  40e304:	0116 2517 a018 0319 f01a 891b 0322 1829     ...%........".).
  40e314:	f82b 012c a031 f032 c433 b43a 3f36 6004     +.,.1.2.3.:.6?.`
  40e324:	8027 0f3d 803e 403f 7f40 6a41 2942 e544     '.=.>.?@@.AjB)D.
  40e334:	4145 0247 6449 a14a 704b 1a4c 504d 134e     EAG.IdJ.KpL.MPN.
  40e344:	0064 8867 1a68 3814 3c24 3025 7226 9750     d.g.h..8$<%0&rP.
  40e354:	7e51 0052 0053 0020 2321 1438 00e9 5556     Q~R.S. .!#8...VU
  40e364:	ff57 ff58 ff59 045f 00ec ff13 7f80 3f81     W.X.Y._........?
  40e374:	3282 0183 1138 7084 0085 0386 0187 0588     .2..8..p........
  40e384:	3089 308d 858f 3093 8595 3099 859b 089c     .0.0...0...0....
  40e394:	129d 239e 459f 55a0 64a1 72a2 7fa3 8ba4     ...#.E.U.d.r....
  40e3a4:	95a5 a7a6 b5a7 cba8 dda9 ecaa 1aab 78ce     ...............x
  40e3b4:	6ecf 0ad0 0cd1 84d2 90d3 1ed4 245a 1f5b     .n..........Z$[.
  40e3c4:	885c 605d 6eac ffbe 00bf 2831 3c32 0034     \.]`.n....1(2<4.
  40e3d4:	3f82 0012 3f36 0053 0033 891b 0322 0228     .?..6?S.3...".(.
  40e3e4:	00d9 ffff                                   ....

0040e3e8 <OV7740_QVGA_YUV422_30FPS>:
  40e3e8:	000e 8012 05fe 0013 0111 0012 10d5 d40c     ................
  40e3f8:	340d 0116 2517 a018 0319 f01a 891b 0322     .4...%........".
  40e408:	1829 f82b 012c a031 f032 c433 b43a 3f36     ).+.,.1.2.3.:.6?
  40e418:	6004 8027 0f3d 803e 403f 7f40 6a41 2942     .`'.=.>.?@@.AjB)
  40e428:	e544 4145 0247 6449 a14a 704b 1a4c 504d     D.EAG.IdJ.KpL.MP
  40e438:	134e 0064 8867 1a68 3814 3c24 3025 7226     N.d.g.h..8$<%0&r
  40e448:	9750 7e51 0052 0053 0020 2321 1438 00e9     P.Q~R.S. .!#8...
  40e458:	5556 ff57 ff58 ff59 045f 00ec ff13 7f80     VUW.X.Y._.......
  40e468:	3f81 3282 0183 1138 0085 0386 0187 0588     .?.2..8.........
  40e478:	3089 308d 858f 3093 8595 3099 859b 089c     .0.0...0...0....
  40e488:	129d 239e 459f 55a0 64a1 72a2 7fa3 8ba4     ...#.E.U.d.r....
  40e498:	95a5 a7a6 b5a7 cba8 dda9 ecaa 1aab 78ce     ...............x
  40e4a8:	6ecf 0ad0 0cd1 84d2 90d3 1ed4 245a 1f5b     .n..........Z$[.
  40e4b8:	885c 605d 6eac ffbe 00bf 5031 7832 3f82     \.]`.n....1P2x.?
  40e4c8:	0012 3f36 0053 c433 891b 0322 0228 ffff     ..6?S.3...".(...

0040e4d8 <p_uc_charset10x14>:
	...
  40e4f4:	ccff ccff 0000 0000 0000 0000 0000 0000     ................
  40e504:	00f0 00f0 0000 0000 00f0 00f0 0000 0000     ................
  40e514:	c00c c00c fcff fcff c00c c00c fcff fcff     ................
  40e524:	c00c c00c 600c 701e 303f 3033 fcff fcff     .....`.p?030....
  40e534:	3033 f033 e039 c018 0060 0cf0 3cf0 f060     303.9...`....<`.
  40e544:	c003 000f 183c 3cf0 3cc0 1800 f03c f87f     ....<..<.<..<...
  40e554:	1cc3 8cc7 cccf ecdc 7878 3030 fc00 cc00     ........xx00....
  40e564:	0000 0000 0000 0044 00ec 00f8 0070 0000     ......D.....p...
	...
  40e57c:	c00f f03f 7878 1860 0cc0 0cc0 0000 0000     ..?.xx`.........
  40e58c:	0000 0000 0cc0 0cc0 1860 7878 f03f c00f     ........`.xx?...
  40e59c:	0000 0000 600c e00e c007 8003 f83f f83f     .....`......?.?.
  40e5ac:	8003 c007 e00e 600c 0003 0003 0003 0003     .......`........
  40e5bc:	f03f f03f 0003 0003 0003 0003 4400 ec00     ?.?..........D..
  40e5cc:	f800 7000 0000 0000 0000 0000 0000 0000     ...p............
  40e5dc:	0003 0003 0003 0003 0003 0003 0003 0003     ................
  40e5ec:	0003 0003 1800 3c00 3c00 1800 0000 0000     .......<.<......
	...
  40e604:	0000 0c00 3c00 f000 c003 000f 003c 00f0     .....<......<...
  40e614:	00c0 0000 f03f f87f fce0 ccc1 8cc3 0cc7     ....?...........
  40e624:	0cce 1cfc f87f f03f 0000 0000 0c30 0c70     ......?.....0.p.
  40e634:	fcff fcff 0c00 0c00 0000 0000 0c30 1c70     ............0.p.
  40e644:	3ce0 7cc0 ecc0 ccc1 8cc3 0ce7 0c7e 0c3c     .<.|........~.<.
  40e654:	3030 3870 1ce0 0cc0 0cc0 0cc3 0cc3 1ce3     00p8............
  40e664:	f87f f03c c003 c007 c00e c01c c038 c070     ..<.........8.p.
  40e674:	fcff fcff c000 c000 30fc 38fc 1ccc 0ccc     .........0.8....
  40e684:	0ccc 0ccc 0ccc 1cce f8c7 f0c3 f03f f87f     ............?...
  40e694:	1ce3 0cc3 0cc3 0cc3 0cc3 9ce3 f871 f030     ............q.0.
  40e6a4:	00c0 00c0 00c0 00c0 fcc3 fcc7 00ce 00dc     ................
  40e6b4:	00f8 00f0 f03c f87f 9ce7 0cc3 0cc3 0cc3     ....<...........
  40e6c4:	0cc3 9ce7 f87f f03c 003c 007e 0ce7 0cc3     ......<.<.~.....
  40e6d4:	1cc3 38c3 70c3 e0e7 c07f 803f 0000 0000     ...8.p....?.....
  40e6e4:	0000 6018 f03c f03c 6018 0000 0000 0000     ...`<.<..`......
  40e6f4:	0000 0000 0000 4418 ec3c f83c 7018 0000     .......D<.<..p..
  40e704:	0000 0000 0000 0003 8007 c00f e01c 7038     ..............8p
  40e714:	3870 1ce0 0cc0 0000 c00c c00c c00c c00c     p8..............
  40e724:	c00c c00c c00c c00c c00c c00c 0000 0cc0     ................
  40e734:	1ce0 3870 7038 e01c c00f 8007 0003 0000     ..p88p..........
  40e744:	0030 0070 00e0 00c0 ecc1 ecc3 00c3 00e6     0.p.............
  40e754:	007e 003c f030 f871 9ce3 0cc3 fcc3 fcc3     ~.<.0.q.........
  40e764:	0cc0 1ce0 f87f f03f fc3f fc7f c0e0 c0c0     ......?.?.......
  40e774:	c0c0 c0c0 c0c0 c0e0 fc7f fc3f fcff fcff     ..........?.....
  40e784:	0cc3 0cc3 0cc3 0cc3 0cc3 9ce7 f87f f03c     ..............<.
  40e794:	f03f f87f 1ce0 0cc0 0cc0 0cc0 0cc0 1ce0     ?...............
  40e7a4:	3870 3030 fcff fcff 0cc0 0cc0 0cc0 0cc0     p800............
  40e7b4:	0cc0 1ce0 f87f f03f fcff fcff 0cc3 0cc3     ......?.........
  40e7c4:	0cc3 0cc3 0cc3 0cc3 0cc0 0cc0 fcff fcff     ................
  40e7d4:	00c3 00c3 00c3 00c3 00c3 00c3 00c0 00c0     ................
  40e7e4:	f03f f87f 1ce0 0cc0 0cc0 0cc3 0cc3 1ce3     ?...............
  40e7f4:	f873 f033 fcff fcff 0003 0003 0003 0003     s.3.............
  40e804:	0003 0003 fcff fcff 0000 0000 0cc0 0cc0     ................
  40e814:	fcff fcff 0cc0 0cc0 0000 0000 3000 3800     .............0.8
  40e824:	1cc0 0cc0 0cc0 1cc0 f8ff f0ff 00c0 00c0     ................
  40e834:	fcff fcff 8007 8007 c00f e01c 7038 3870     ............8pp8
  40e844:	1ce0 0cc0 fcff fcff 0c00 0c00 0c00 0c00     ................
  40e854:	0c00 0c00 0c00 0c00 fcff fcff 0070 0038     ............p.8.
  40e864:	001f 001f 0038 0070 fcff fcff fcff fcff     ....8.p.........
  40e874:	001c 000e 0007 8003 c001 e000 fcff fcff     ................
  40e884:	f03f f87f 1ce0 0cc0 0cc0 0cc0 0cc0 1ce0     ?...............
  40e894:	f87f f03f fcff fcff 00c3 00c3 00c3 00c3     ..?.............
  40e8a4:	00c3 00e7 007e 003c f03f f87f 1ce0 0cc0     ....~.<.?.......
  40e8b4:	ccc0 ecc0 7cc0 38e0 fc7f ec3f fcff fcff     .....|.8..?.....
  40e8c4:	00c3 80c3 80c3 c0c3 c0c3 70e7 3c7e 1c3c     ...........p~<<.
  40e8d4:	183c 1c7e 0ce7 0cc3 0cc3 0cc3 0cc3 9cc3     <.~.............
  40e8e4:	f8e1 f060 00c0 00c0 00c0 00c0 fcff fcff     ..`.............
  40e8f4:	00c0 00c0 00c0 00c0 f0ff f8ff 1c00 0c00     ................
  40e904:	0c00 0c00 0c00 1c00 f8ff f0ff c0ff e0ff     ................
  40e914:	7000 3800 1c00 1c00 3800 7000 e0ff c0ff     .p.8.....8.p....
  40e924:	f0ff f8ff 1c00 3c00 f800 f800 3c00 1c00     .......<.....<..
  40e934:	f8ff f0ff 3cf0 7cf8 e01c c00f 8007 8007     .....<.|........
  40e944:	c00f e01c 7cf8 3cf0 00fc 00fe 0007 8003     .....|.<........
  40e954:	fc01 fc01 8003 0007 00fe 00fc 3cc0 7cc0     .............<.|
  40e964:	ecc0 ccc1 8cc3 0cc7 0cce 0cdc 0cf8 0cf0     ................
  40e974:	0000 0000 fcff fcff 0cc0 0cc0 0cc0 0000     ................
  40e984:	0000 0000 0030 0030 000c 000c 0003 0003     ....0.0.........
  40e994:	c000 c000 3000 3000 0000 0000 0cc0 0cc0     .....0.0........
  40e9a4:	0cc0 fcff fcff 0000 0000 0000 000c 001c     ................
  40e9b4:	0038 0070 00e0 00e0 0070 0038 001c 000c     8.p.....p.8.....
  40e9c4:	0c00 0c00 0c00 0c00 0c00 0c00 0c00 0c00     ................
  40e9d4:	0c00 0c00 0000 0000 00c0 00e0 0070 0038     ............p.8.
  40e9e4:	0018 0000 0000 0000 3000 7806 fc0e cc0c     .........0.x....
  40e9f4:	cc0c cc0c cc0c cc0e fc07 f803 fcff fcff     ................
  40ea04:	0c03 0c03 0c03 0c03 0c03 9c03 f801 f000     ................
  40ea14:	f003 f807 1c0e 0c0c 0c0c 0c0c 0c0c 1c0e     ................
  40ea24:	3807 3003 f000 f801 9c03 0c03 0c03 0c03     .8.0............
  40ea34:	0c03 0c03 fcff fcff f003 f807 dc0e cc0c     ................
  40ea44:	cc0c cc0c cc0c dc0e d807 9003 0000 0003     ................
  40ea54:	fc3f fc7f 00e3 00e3 0070 0030 0000 0000     ?.......p.0.....
  40ea64:	1803 9c07 cc0f cc0c cc0c cc0c cc0c dc0c     ................
  40ea74:	f80f f007 fcff fcff 0003 0003 0003 0003     ................
  40ea84:	8003 fc01 fc00 0000 0000 0000 0000 0000     ................
  40ea94:	fc1b fc1b 0000 0000 0000 0000 0000 3000     ...............0
  40eaa4:	3800 1c00 0c00 0c00 1c00 f8cf f0cf 0000     .8..............
  40eab4:	0000 fcff fcff e000 e001 f003 3807 1c0e     .............8..
  40eac4:	0c0c 0000 0000 0000 0cc0 0cc0 fcff fcff     ................
  40ead4:	0c00 0c00 0000 0000 fc0f fc0f 000e 0007     ................
  40eae4:	c003 c003 0007 000e fc0f fc0f fc0f fc0f     ................
  40eaf4:	0003 0007 000e 000c 000c 000e fc07 fc03     ................
  40eb04:	f003 f807 1c0e 0c0c 0c0c 0c0c 0c0c 1c0e     ................
  40eb14:	f807 f003 fc0f fc0f c00c c00c c00c c00c     ................
  40eb24:	c00c c00f 8007 0003 0003 8007 c00f c00c     ................
  40eb34:	c00c c00c c00c c00c fc0f fc0f fc0f fc0f     ................
  40eb44:	8003 0007 000e 000c 000c 000e 0007 0003     ................
  40eb54:	1803 9c07 cc0f cc0c cc0c cc0c cc0c fc0c     ................
  40eb64:	780e 3006 0000 000c 000c f0ff f8ff 1c0c     .x.0............
  40eb74:	1c0c 380c 300c 0000 f00f f80f 1c00 0c00     ...8.0..........
  40eb84:	0c00 0c00 0c00 1c00 f80f f00f c00f e00f     ................
  40eb94:	7000 3800 1c00 1c00 3800 7000 e00f c00f     .p.8.....8.p....
  40eba4:	f00f f80f 1c00 1c00 f800 f800 1c00 1c00     ................
  40ebb4:	f80f f00f 0c0c 1c0e 3807 f003 e001 e001     .........8......
  40ebc4:	f003 3807 1c0e 0c0c 000c 000e 0c07 9c03     ...8............
  40ebd4:	f801 f001 8003 0007 000e 000c 0c0c 1c0c     ................
  40ebe4:	3c0c 7c0c ec0c cc0d 8c0f 0c0f 0c0e 0c0c     .<.|............
  40ebf4:	0000 0003 8007 f03f f87c 1ce0 0cc0 0cc0     ......?.|.......
  40ec04:	0cc0 0000 0c03 0c03 fc3f fc7f 0ce3 0cc3     ........?.......
  40ec14:	0cc0 0ce0 0c70 0c30 0000 0cc0 0cc0 0cc0     ....p.0.........
  40ec24:	1ce0 f87c f03f 8007 0003 0000 00c0 00c0     ..|.?...........
  40ec34:	00c0 00c0 00c0 00c0 00c0 00c0 00c0 00c0     ................
  40ec44:	fcff fcff fcff fcff fcff fcff fcff fcff     ................
  40ec54:	fcff fcff 7845 7469 6e69 2067 6977 6874     ....Exiting with
  40ec64:	7320 6174 7574 2073 6425 0a2e 0000 0000      status %d......

0040ec74 <__func__.6361>:
  40ec74:	6176 696c 6164 6574 635f 6568 6b63 7573     validate_checksu
  40ec84:	006d 0000                                   m...

0040ec88 <__func__.6378>:
  40ec88:	6f70 7473 7270 636f 7365 5f73 0063 0000     postprocess_c...

0040ec98 <lo_offset>:
  40ec98:	f0ff 1fff f2ff ffff ffff 3fff f5f4 6fff     ...........?...o
  40eca8:	ffff ffff f1f0 2fff ffff ffff ffff 4f3f     ......./......?O
  40ecb8:	0fff f2f1 3fff f4ff f6f5 89f7 abff fcff     .....?..........
  40ecc8:	ffff 1f0f 4523 7ff6 ffff ffff fff8 aff9     ....#E..........
  40ecd8:	f1f0 2fff f3ff ffff 5f4f 8967 bffa cdff     .../....O_g.....
  40ece8:	f1f0 3ff2 56f4 ffff ffff 8f7f ff9a dfbc     ...?.V..........
  40ecf8:	1f0f fff2 3fff ffff fff4 6ff5 ffff ffff     .....?.....o....
  40ed08:	1f0f ff23 6f45 ffff fff7 9ff8 ffff ffff     ..#.Eo..........

0040ed18 <__func__.6277>:
  40ed18:	6572 656c 7361 5f65 6f6c 6b63 0000 0000     release_lock....

0040ed28 <__func__.6397>:
  40ed28:	6f70 7473 7270 636f 7365 0073 4157 4e52     postprocess.WARN
  40ed38:	4e49 3a47 2520 3a73 6425 203a 7325 203a     ING: %s:%d: %s: 
  40ed48:	7341 6573 7472 6f69 206e 2522 2273 6620     Assertion "%s" f
  40ed58:	6961 656c 2e64 090a 6973 3d67 7825 6f20     ailed...sig=%x o
  40ed68:	6666 6573 3d74 7825 6920 7864 253d 2078     ffset=%x idx=%x 
  40ed78:	6162 6573 253d 0a78 0000 0000 2e2e 732f     base=%x......./s
  40ed88:	6372 412f 4653 742f 6968 6472 6170 7472     rc/ASF/thirdpart
  40ed98:	2f79 627a 7261 632f 646f 3165 3832 632e     y/zbar/code128.c
  40eda8:	0000 0000 6162 6573 3c20 3820 0000 0000     ....base < 8....
  40edb8:	4157 4e52 4e49 3a47 2520 3a73 6425 203a     WARNING: %s:%d: 
  40edc8:	7325 203a 7341 6573 7472 6f69 206e 2522     %s: Assertion "%
  40edd8:	2273 6620 6961 656c 2e64 090a 6973 3d67     s" failed...sig=
  40ede8:	7825 6f20 6666 6573 3d74 7825 6220 7361     %x offset=%x bas
  40edf8:	3d65 7825 6920 7864 253d 0a78 0000 0000     e=%x idx=%x.....
  40ee08:	6469 2078 3d3c 3020 3578 0030 4157 4e52     idx <= 0x50.WARN
  40ee18:	4e49 3a47 2520 3a73 6425 203a 7325 203a     ING: %s:%d: %s: 
  40ee28:	7341 6573 7472 6f69 206e 2522 2273 6620     Assertion "%s" f
  40ee38:	6961 656c 2e64 090a 6f6c 6b63 253d 2064     ailed...lock=%d 
  40ee48:	6572 3d71 6425 000a 2e2e 732f 6372 412f     req=%d..../src/A
  40ee58:	4653 742f 6968 6472 6170 7472 2f79 627a     SF/thirdparty/zb
  40ee68:	7261 692f 636e 756c 6564 642f 6365 646f     ar/include/decod
  40ee78:	7265 682e 0000 0000 6364 646f 2d65 6c3e     er.h....dcode->l
  40ee88:	636f 206b 3d3d 7220 7165 0000 4157 4e52     ock == req..WARN
  40ee98:	4e49 3a47 2520 3a73 6425 203a 7325 203a     ING: %s:%d: %s: 
  40eea8:	7341 6573 7472 6f69 206e 2522 2273 6620     Assertion "%s" f
  40eeb8:	6961 656c 2e64 090a 6c61 6f6c 3d63 7825     ailed...alloc=%x
  40eec8:	6920 7864 253d 2078 3d63 3025 7832 2520      idx=%x c=%02x %
  40eed8:	0a73 0000 6364 646f 2d65 623e 6675 615f     s...dcode->buf_a
  40eee8:	6c6c 636f 3e20 6420 6f63 6564 3231 2d38     lloc > dcode128-
  40eef8:	633e 6168 6172 7463 7265 0000 4157 4e52     >character..WARN
  40ef08:	4e49 3a47 2520 3a73 6425 203a 7325 203a     ING: %s:%d: %s: 
  40ef18:	7341 6573 7472 6f69 206e 2522 2273 6620     Assertion "%s" f
  40ef28:	6961 656c 2e64 090a 6964 3d72 7825 6920     ailed...dir=%x i
  40ef38:	253d 2078 7573 3d6d 7825 6120 6363 253d     =%x sum=%x acc=%
  40ef48:	2078 7325 000a 0000 7573 206d 203c 3031     x %s....sum < 10
  40ef58:	0033 0000 6361 2063 203c 3031 0033 0000     3...acc < 103...
  40ef68:	4157 4e52 4e49 3a47 2520 3a73 6425 203a     WARNING: %s:%d: 
  40ef78:	7325 203a 7341 6573 7472 6f69 206e 2522     %s: Assertion "%
  40ef88:	2273 6620 6961 656c 2e64 090a 6964 3d72     s" failed...dir=
  40ef98:	7825 2520 0a73 0000 6364 646f 2d65 623e     %x %s...dcode->b
  40efa8:	6675 645b 6f63 6564 3231 2d38 633e 6168     uf[dcode128->cha
  40efb8:	6172 7463 7265 2d20 3120 205d 3d3d 5320     racter - 1] == S
  40efc8:	4f54 5f50 4552 0056 6364 646f 2d65 623e     TOP_REV.dcode->b
  40efd8:	6675 645b 6f63 6564 3231 2d38 633e 6168     uf[dcode128->cha
  40efe8:	6172 7463 7265 2d20 3120 205d 3d3d 5320     racter - 1] == S
  40eff8:	4f54 5f50 5746 0044 4157 4e52 4e49 3a47     TOP_FWD.WARNING:
  40f008:	2520 3a73 6425 203a 7325 203a 7341 6573      %s:%d: %s: Asse
  40f018:	7472 6f69 206e 2522 2273 6620 6961 656c     rtion "%s" faile
  40f028:	2e64 090a 7325 000a 6f63 6564 3e20 203d     d...%s..code >= 
  40f038:	5453 5241 5f54 2041 2626 6320 646f 2065     START_A && code 
  40f048:	3d3c 5320 4154 5452 435f 0000 4157 4e52     <= START_C..WARN
  40f058:	4e49 3a47 2520 3a73 6425 203a 7325 203a     ING: %s:%d: %s: 
  40f068:	7341 6573 7472 6f69 206e 2522 2273 6620     Assertion "%s" f
  40f078:	6961 656c 2e64 090a 3d69 7825 6a20 253d     ailed...i=%x j=%
  40f088:	2078 6f63 6564 253d 3230 2078 6863 7261     x code=%02x char
  40f098:	6573 3d74 7825 6320 7865 3d70 7825 2520     set=%x cexp=%x %
  40f0a8:	0a73 0000 2821 6f63 6564 2620 3020 3878     s...!(code & 0x8
  40f0b8:	2930 0000 6563 7078 0000 0000 4157 4e52     0)..cexp....WARN
  40f0c8:	4e49 3a47 2520 3a73 6425 203a 7325 203a     ING: %s:%d: %s: 
  40f0d8:	7341 6573 7472 6f69 206e 2522 2273 6620     Assertion "%s" f
  40f0e8:	6961 656c 2e64 090a 7473 7261 3d74 7825     ailed...start=%x
  40f0f8:	6520 646e 253d 2078 3d69 7825 6a20 253d      end=%x i=%x j=%
  40f108:	2078 7325 000a 0000 6364 646f 2d65 623e     x %s....dcode->b
  40f118:	6675 6a5b 205d 3d3c 2720 2739 0000 0000     uf[j] <= '9'....
  40f128:	6f63 6564 3c20 203d 0039 0000 6f63 6564     code <= 9...code
  40f138:	3e20 203d 4f43 4544 435f 2620 2026 6f63      >= CODE_C && co
  40f148:	6564 3c20 203d 4f43 4544 415f 0000 0000     de <= CODE_A....
  40f158:	4157 4e52 4e49 3a47 2520 3a73 6425 203a     WARNING: %s:%d: 
  40f168:	7325 203a 7341 6573 7472 6f69 206e 2522     %s: Assertion "%
  40f178:	2273 6620 6961 656c 2e64 090a 3d6a 3025     s" failed...j=%0
  40f188:	7832 2520 0a73 0000 206a 203c 6364 646f     2x %s...j < dcod
  40f198:	2d65 623e 6675 615f 6c6c 636f 0000 0000     e->buf_alloc....

0040f1a8 <__func__.6422>:
  40f1a8:	7a5f 6162 5f72 6564 6f63 6564 635f 646f     _zbar_decode_cod
  40f1b8:	3165 3832 0000 0000                         e128....

0040f1c0 <lo_base>:
  40f1c0:	0700 190c 3224 4740                         ....$2@G

0040f1c8 <characters>:
  40f1c8:	bf5c 2aa1 0cc5 2da4 0fe3 e45f e86b a769     \..*...-.._.k.i.
  40f1d8:	c1e7 1e51 d983 8400 c71f 330d b586 150e     ..Q........3....
  40f1e8:	1087 11da e536 3718 13cc 8939 1497 8a1b     ....6..7..9.....
  40f1f8:	bd3a 5ea2 8501 02b0 a5a3 162c bc88 a612     :..^......,.....
  40f208:	e661 6256 db19 a81a 1c32 cd8b a91d 20c3     a.Vb....2...... 
  40f218:	50c4 c05d c62b 532e 3160 c252 c834 5755     .P].+..S`1R.4.UW
  40f228:	ce3e c93b 546a 384f cb58 ca2f               >.;.jTO8X./.

0040f234 <__func__.6311>:
  40f234:	6564 6f63 6564 6c5f 006f 0000               decode_lo...

0040f240 <code39_characters>:
  40f240:	3130 3332 3534 3736 3938 4241 4443 4645     0123456789ABCDEF
  40f250:	4847 4a49 4c4b 4e4d 504f 5251 5453 5655     GHIJKLMNOPQRSTUV
  40f260:	5857 5a59 2e2d 2420 2b2f 2a25               WXYZ-. $/+%*

0040f26c <__func__.6277>:
  40f26c:	6572 656c 7361 5f65 6f6c 6b63 0000 0000     release_lock....

0040f27c <__func__.6342>:
  40f27c:	6f63 6564 3933 705f 736f 7074 6f72 6563     code39_postproce
  40f28c:	7373 0000                                   ss..

0040f290 <code39_hi>:
  40f290:	4280 c886 8e4a 12d0 d593 ff97 1bd9 ffff     .B..J...........
  40f2a0:	a05c 24e2 ffa5 ff27 2ae8 ffff ff2b ffff     \..$..'..*..+...
  40f2b0:	4157 4e52 4e49 3a47 2520 3a73 6425 203a     WARNING: %s:%d: 
  40f2c0:	7325 203a 7341 6573 7472 6f69 206e 2522     %s: Assertion "%
  40f2d0:	2273 6620 6961 656c 2e64 090a 6520 636e     s" failed... enc
  40f2e0:	253d 2078 3973 253d 0a78 0000 2e2e 732f     =%x s9=%x...../s
  40f2f0:	6372 412f 4653 742f 6968 6472 6170 7472     rc/ASF/thirdpart
  40f300:	2f79 627a 7261 632f 646f 3365 2e39 0063     y/zbar/code39.c.
  40f310:	6e65 2063 203c 7830 3032 0000 4157 4e52     enc < 0x20..WARN
  40f320:	4e49 3a47 2520 3a73 6425 203a 7325 203a     ING: %s:%d: %s: 
  40f330:	7341 6573 7472 6f69 206e 2522 2273 6620     Assertion "%s" f
  40f340:	6961 656c 2e64 090a 6920 7864 253d 2078     ailed... idx=%x 
  40f350:	6e65 3d63 7825 7320 3d39 7825 000a 0000     enc=%x s9=%x....
  40f360:	6469 2078 203c 7830 6332 0000 4157 4e52     idx < 0x2c..WARN
  40f370:	4e49 3a47 2520 3a73 6425 203a 7325 203a     ING: %s:%d: %s: 
  40f380:	7341 6573 7472 6f69 206e 2522 2273 6620     Assertion "%s" f
  40f390:	6961 656c 2e64 090a 3d69 3025 7832 2520     ailed...i=%02x %
  40f3a0:	0a73 0000 2069 203c 6364 646f 2d65 623e     s...i < dcode->b
  40f3b0:	6675 615f 6c6c 636f 0000 0000 4157 4e52     uf_alloc....WARN
  40f3c0:	4e49 3a47 2520 3a73 6425 203a 7325 203a     ING: %s:%d: %s: 
  40f3d0:	7341 6573 7472 6f69 206e 2522 2273 6620     Assertion "%s" f
  40f3e0:	6961 656c 2e64 090a 3d63 3025 7832 7320     ailed...c=%02x s
  40f3f0:	3d39 7825 000a 0000 2063 203c 7830 6332     9=%x....c < 0x2c
  40f400:	0000 0000                                   ....

0040f404 <code39_encodings>:
  40f404:	1a07 0d20 0310 1713 1622 231d 0d19 1c05     .. ....."..#....
  40f414:	0613 0725 2a0c 272a 0431 340e 0f00 1543     ..%..**'1..4..C.
  40f424:	4625 261c 0b49 4c08 0912 1952 582b 000f     %F.&I..L..R.+X..
  40f434:	0261 6411 1209 0670 8513 1624 298a 9128     a..d..p...$..)(.
  40f444:	1821 2b94 a219 2928 27a8 c12a 1b1f 26c4     !..+..().'*....&
  40f454:	d01c 1d23 1403 061e 1f1b 0a09 0c01 0211     ..#.............
  40f464:	1812 1821 040e 0121 240a 0b08 0530 420d     ..!...!..$..0..B
  40f474:	2416 0c48 6007 1003 1e81 8414 1525 2290     .$H..`......%.."
  40f484:	c017 1a20                                   .. .

0040f488 <__func__.6366>:
  40f488:	7a5f 6162 5f72 6564 6f63 6564 635f 646f     _zbar_decode_cod
  40f498:	3365 0039                                   e39.

0040f49c <__func__.6311>:
  40f49c:	6f63 6564 3933 645f 6365 646f 3965 0000     code39_decode9..

0040f4ac <__func__.6277>:
  40f4ac:	6572 656c 7361 5f65 6f6c 6b63 0000 0000     release_lock....

0040f4bc <all.6380>:
  40f4bc:	000d 0002 0005 0008 000c 0009 000a 000e     ................
  40f4cc:	0019 0022 0023 0026 0027 005d 0080 0040     ..".#.&.'.]...@.
  40f4dc:	0039 0000 0020 0000 7562 5b66 3025 7834     9... ...buf[%04x
  40f4ec:	3d5d 0000 7325 3025 7832 0000               ]=..%s%02x..

0040f4f8 <__func__.6186>:
  40f4f8:	6564 6f63 6564 0034                         decode4.

0040f500 <parity_decode>:
  40f500:	fff0 0fff 1fff f32f 4fff f87f f95f fff6     ....../..O.._...
  40f510:	6fff f59f f78f fff4 f23f fff1 ffff 0fff     .o......?.......

0040f520 <digits>:
  40f520:	1006 1304 0819 0511 1209 1507 0016 0314     ................
  40f530:	0118 1702 4157 4e52 4e49 3a47 2520 3a73     ....WARNING: %s:
  40f540:	6425 203a 7325 203a 7341 6573 7472 6f69     %d: %s: Assertio
  40f550:	206e 2522 2273 6620 6961 656c 2e64 090a     n "%s" failed...
  40f560:	6f63 6564 253d 3230 2078 3165 253d 2078     code=%02x e1=%x 
  40f570:	3265 253d 2078 3473 253d 2078 6f63 6f6c     e2=%x s4=%x colo
  40f580:	3d72 7825 000a 0000 2e2e 732f 6372 412f     r=%x....../src/A
  40f590:	4653 742f 6968 6472 6170 7472 2f79 627a     SF/thirdparty/zb
  40f5a0:	7261 652f 6e61 632e 0000 0000 6f63 6564     ar/ean.c....code
  40f5b0:	3c20 3020 3178 0034 4157 4e52 4e49 3a47      < 0x14.WARNING:
  40f5c0:	2520 3a73 6425 203a 7325 203a 7341 6573      %s:%d: %s: Asse
  40f5d0:	7472 6f69 206e 2522 2273 6620 6961 656c     rtion "%s" faile
  40f5e0:	2e64 090a 3d69 7825 6420 253d 2078 6863     d...i=%x d=%x ch
  40f5f0:	3d6b 7825 2520 0a73 0000 0000 2064 203c     k=%x %s.....d < 
  40f600:	3031 0000 4157 4e52 4e49 3a47 2520 3a73     10..WARNING: %s:
  40f610:	6425 203a 7325 203a 7341 6573 7472 6f69     %d: %s: Assertio
  40f620:	206e 2522 2273 6620 6961 656c 2e64 090a     n "%s" failed...
  40f630:	6863 3d6b 7825 6e20 253d 2078 7325 0000     chk=%x n=%x %s..
  40f640:	6863 206b 203c 3031 0000 0000 4157 4e52     chk < 10....WARN
  40f650:	4e49 3a47 2520 3a73 6425 203a 7325 203a     ING: %s:%d: %s: 
  40f660:	7341 6573 7472 6f69 206e 2522 2273 6620     Assertion "%s" f
  40f670:	6961 656c 2e64 090a 3d6e 7825 6420 253d     ailed...n=%x d=%
  40f680:	2078 6863 3d6b 7825 2520 0a73 0000 0000     x chk=%x %s.....
  40f690:	4157 4e52 4e49 3a47 2520 3a73 6425 203a     WARNING: %s:%d: 
  40f6a0:	7325 203a 7341 6573 7472 6f69 206e 2522     %s: Assertion "%
  40f6b0:	2273 6620 6961 656c 2e64 090a 3d77 7825     s" failed...w=%x
  40f6c0:	6420 253d 2078 6863 3d6b 7825 2520 0a73      d=%x chk=%x %s.
  40f6d0:	0000 0000                                   ....

0040f6d4 <__func__.6268>:
  40f6d4:	7369 6e62 3031 635f 6c61 5f63 6863 6365     isbn10_calc_chec
  40f6e4:	736b 6d75 0000 0000                         ksum....

0040f6ec <__func__.6257>:
  40f6ec:	6165 5f6e 6576 6972 7966 635f 6568 6b63     ean_verify_check
  40f6fc:	7573 006d                                   sum.

0040f700 <__func__.6282>:
  40f700:	7a5f 6162 5f72 6572 6366 746e 0000 0000     _zbar_refcnt....
  40f710:	2e2e 732f 6372 412f 4653 742f 6968 6472     ../src/ASF/third
  40f720:	6170 7472 2f79 627a 7261 692f 636e 756c     party/zbar/inclu
  40f730:	6564 722f 6665 6e63 2e74 0068 6372 3e20     de/refcnt.h.rc >
  40f740:	203d 0030 2e2e 732f 6372 412f 4653 742f     = 0.../src/ASF/t
  40f750:	6968 6472 6170 7472 2f79 627a 7261 692f     hirdparty/zbar/i
  40f760:	616d 6567 632e 0000 6d69 2d67 723e 6665     mage.c..img->ref
  40f770:	6e63 0074 7364 2d74 643e 7461 0061 0000     cnt.dst->data...
  40f780:	7325 252e 342e 2e73 697a 676d 0000 0000     %s.%.4s.zimg....
  40f790:	7325 252e 3830 786c 7a2e 6d69 0067 0000     %s.%08lx.zimg...
  40f7a0:	206e 203c 656c 206e 202d 0031 7325 203a     n < len - 1.%s: 
  40f7b0:	7564 706d 6e69 2067 2e25 7334 2528 3830     dumping %.4s(%08
  40f7c0:	786c 2029 6d69 6761 2065 6f74 2520 0a73     lx) image to %s.
  40f7d0:	0000 0000 0077 0000                         ....w...

0040f7d8 <__func__.6466>:
  40f7d8:	627a 7261 695f 616d 6567 665f 6572 5f65     zbar_image_free_
  40f7e8:	6164 6174 0000 0000                         data....

0040f7f0 <__func__.6940>:
  40f7f0:	7973 626d 6c6f 685f 6e61 6c64 7265 0000     symbol_handler..

0040f800 <__func__.6953>:
  40f800:	7564 706d 735f 6174 7374 0000 2e2e 732f     dump_stats..../s
  40f810:	6372 412f 4653 742f 6968 6472 6170 7472     rc/ASF/thirdpart
  40f820:	2f79 627a 7261 692f 676d 735f 6163 6e6e     y/zbar/img_scann
  40f830:	7265 632e 0000 0000 7973 2d6d 643e 7461     er.c....sym->dat
  40f840:	5f61 6c61 6f6c 0063 7973 2d6d 643e 7461     a_alloc.sym->dat
  40f850:	0061 0000 7369 6e63 3e2d 6572 7963 6c63     a...iscn->recycl
  40f860:	5b65 5d69 6e2e 7973 736d 0000 7321 6d79     e[i].nsyms..!sym
  40f870:	3e2d 7973 736d 0000 7974 6570 2120 203d     ->syms..type != 
  40f880:	425a 5241 515f 4352 444f 0045 7325 203a     ZBAR_QRCODE.%s: 
  40f890:	6170 7472 6169 206c 7973 626d 6c6f 4020     partial symbol @
  40f8a0:	2528 2c64 6425 0a29 0000 0000 7325 203a     (%d,%d).....%s: 
  40f8b0:	7564 2070 7973 626d 6c6f 4020 2528 2c64     dup symbol @(%d,
  40f8c0:	6425 3a29 6420 7075 2520 3a73 2520 322e     %d): dup %s: %.2
  40f8d0:	7330 000a 7325 203a 656e 2077 7973 626d     0s..%s: new symb
  40f8e0:	6c6f 4020 2528 2c64 6425 3a29 2520 3a73     ol @(%d,%d): %s:
  40f8f0:	2520 322e 7330 000a 7325 203a 7973 626d      %.20s..%s: symb
  40f900:	6c6f 7320 7465 2073 6c61 6f6c 6163 6574     ol sets allocate
  40f910:	2064 2020 203d 2d25 6434 000a 7325 203a     d   = %-4d..%s: 
  40f920:	2020 2020 6373 6e61 656e 2072 7973 736d         scanner syms
  40f930:	6920 206e 7375 2065 203d 2d25 6434 7209      in use = %-4d.r
  40f940:	6365 6379 656c 2064 3d20 2520 342d 0a64     ecycled  = %-4d.
  40f950:	0000 0000 7325 203a 2020 2020 6d69 6761     ....%s:     imag
  40f960:	2065 7973 736d 6920 206e 7375 2065 2020     e syms in use   
  40f970:	203d 2d25 6434 7209 6365 6379 656c 2064     = %-4d.recycled 
  40f980:	3d20 2520 342d 0a64 0000 0000 7325 203a      = %-4d.....%s: 
  40f990:	7973 626d 6c6f 2073 6c61 6f6c 6163 6574     symbols allocate
  40f9a0:	2064 2020 2020 2020 203d 2d25 6434 000a     d       = %-4d..
  40f9b0:	7325 203a 2020 2020 7220 6365 6379 656c     %s:      recycle
  40f9c0:	5b64 6425 205d 2020 2020 2020 3d20 2520     d[%d]        = %
  40f9d0:	342d 0a64 0000 0000 7863 2031 3d3c 7720     -4d.....cx1 <= w
  40f9e0:	0000 0000 7963 2031 3d3c 6820 0000 0000     ....cy1 <= h....
  40f9f0:	6f62 6472 7265 3c20 203d 0068 7325 203a     border <= h.%s: 
  40fa00:	6d69 5f67 2b78 203a 3025 6434 252c 3430     img_x+: %04d,%04
  40fa10:	2064 2540 0a70 0000 2070 3d3d 6420 7461     d @%p...p == dat
  40fa20:	2061 202b 2078 202b 2079 202a 6928 746e     a + x + y * (int
  40fa30:	7470 5f72 2974 0077 7325 203a 6d69 5f67     ptr_t)w.%s: img_
  40fa40:	2d78 203a 3025 6434 252c 3430 2064 2540     x-: %04d,%04d @%
  40fa50:	0a70 0000 6f62 6472 7265 3c20 203d 0077     p...border <= w.
  40fa60:	7325 203a 6d69 5f67 2b79 203a 3025 6434     %s: img_y+: %04d
  40fa70:	252c 3430 2064 2540 0a70 0000 7325 203a     ,%04d @%p...%s: 
  40fa80:	6d69 5f67 2d79 203a 3025 6434 252c 3430     img_y-: %04d,%04
  40fa90:	2064 2540 0a70 0000 6165 006e 6461 6f64     d @%p...ean.addo
  40faa0:	006e 0000                                   n...

0040faa4 <__func__.7009>:
  40faa4:	627a 7261 735f 6163 5f6e 6d69 6761 0065     zbar_scan_image.

0040fab4 <__func__.6903>:
  40fab4:	7a5f 6162 5f72 6d69 6761 5f65 6373 6e61     _zbar_image_scan
  40fac4:	656e 5f72 6c61 6f6c 5f63 7973 006d 0000     ner_alloc_sym...

0040fad4 <__func__.6517>:
  40fad4:	7a5f 6162 5f72 6572 6366 746e 0000 0000     _zbar_refcnt....

0040fae4 <__func__.6872>:
  40fae4:	7a5f 6162 5f72 6d69 6761 5f65 6373 6e61     _zbar_image_scan
  40faf4:	656e 5f72 6572 7963 6c63 5f65 7973 736d     ner_recycle_syms
  40fb04:	0000 0000                                   ....

0040fb08 <__func__.6149>:
  40fb08:	7a5f 6162 5f72 6572 6366 746e 0000 0000     _zbar_refcnt....

0040fb18 <hash.6254>:
  40fb18:	0100 1110 11ff 0c16 0605 ff08 0304 1207     ................
  40fb28:	ffff ffff ffff 02ff 00ff 0c12 1d0b 000a     ................
  40fb38:	4145 2d4e 0032 0000 4145 2d4e 0035 0000     EAN-2...EAN-5...
  40fb48:	4145 2d4e 0038 0000 5055 2d43 0045 0000     EAN-8...UPC-E...
  40fb58:	5349 4e42 312d 0030 5055 2d43 0041 0000     ISBN-10.UPC-A...
  40fb68:	4145 2d4e 3331 0000 5349 4e42 312d 0033     EAN-13..ISBN-13.
  40fb78:	4f43 504d 534f 5449 0045 0000 3249 352f     COMPOSITE...I2/5
  40fb88:	0000 0000 6144 6174 6142 0072 6144 6174     ....DataBar.Data
  40fb98:	6142 2d72 7845 0070 6f43 6164 6162 0072     Bar-Exp.Codabar.
  40fba8:	4f43 4544 332d 0039 4f43 4544 392d 0033     CODE-39.CODE-93.
  40fbb8:	4f43 4544 312d 3832 0000 0000 4450 3446     CODE-128....PDF4
  40fbc8:	3731 0000 5251 432d 646f 0065 4e55 4e4b     17..QR-Code.UNKN
  40fbd8:	574f 004e 4e45 4241 454c 0000 4441 5f44     OWN.ENABLE..ADD_
  40fbe8:	4843 4345 004b 0000 4d45 5449 435f 4548     CHECK...EMIT_CHE
  40fbf8:	4b43 0000 5341 4943 0049 0000 494d 5f4e     CK..ASCII...MIN_
  40fc08:	454c 004e 414d 5f58 454c 004e 4e55 4543     LEN.MAX_LEN.UNCE
  40fc18:	5452 4941 544e 0059 4f50 4953 4954 4e4f     RTAINTY.POSITION
  40fc28:	0000 0000 5f58 4544 534e 5449 0059 0000     ....X_DENSITY...
  40fc38:	5f59 4544 534e 5449 0059 0000 5347 0031     Y_DENSITY...GS1.
  40fc48:	4941 004d 5055 0000 4952 4847 0054 0000     AIM.UP..RIGHT...
  40fc58:	4f44 4e57 0000 0000 454c 5446 0000 0000     DOWN....LEFT....
  40fc68:	2e2e 732f 6372 412f 4653 742f 6968 6472     ../src/ASF/third
  40fc78:	6170 7472 2f79 627a 7261 732f 6d79 6f62     party/zbar/symbo
  40fc88:	2e6c 0063 3067 3e20 203d 2030 2626 6720     l.c.g0 >= 0 && g
  40fc98:	2031 3d3e 3020 0000 3f3c 6d78 006c 0000     1 >= 0..<?xml...
  40fca8:	733c 6d79 6f62 206c 7974 6570 273d 7325     <symbol type='%s
  40fcb8:	2027 7571 6c61 7469 3d79 2527 2764 6f20     ' quality='%d' o
  40fcc8:	6972 6e65 6174 6974 6e6f 273d 7325 0027     rientation='%s'.
  40fcd8:	2069 203e 0030 0000 206e 3d3c 6d20 7861     i > 0...n <= max
  40fce8:	656c 006e 6d20 646f 6669 6569 7372 273d     len. modifiers='
  40fcf8:	0000 0000 7325 0020 0027 0000 6320 6e6f     ....%s .'... con
  40fd08:	6966 7367 273d 0000 6320 756f 746e 273d     figs='.. count='
  40fd18:	6425 0027 3c3e 6164 6174 0000 6620 726f     %d'.><data.. for
  40fd28:	616d 3d74 6227 7361 3665 2734 6c20 6e65     mat='base64' len
  40fd38:	7467 3d68 2527 2764 0000 0000 5d5d 3c3e     gth='%d'....]]><
  40fd48:	642f 7461 3e61 2f3c 7973 626d 6c6f 003e     /data></symbol>.
  40fd58:	3c3e 5b21 4443 5441 5b41 0000               ><![CDATA[..

0040fd64 <__func__.6257>:
  40fd64:	7a5f 6162 5f72 6567 5f74 7973 626d 6c6f     _zbar_get_symbol
  40fd74:	685f 7361 0068 0000 564f 3737 3034 6920     _hash...OV7740 i
  40fd84:	616d 6567 7320 6e65 6f73 0a72 6163 7470     mage sensor.capt
  40fd94:	7275 2065 7865 6d61 6c70 0065 6c50 6165     ure example.Plea
  40fda4:	6573 5720 6961 2074 7564 6972 676e 0a20     se Wait during .
  40fdb4:	6e69 7469 6169 696c 617a 6974 6e6f 0000     initialization..
  40fdc4:	6c50 6165 6573 5020 6572 7373 6220 7475     Please Press but
  40fdd4:	6f74 0a6e 6f74 7320 6174 7472 7020 6f72     ton.to start pro
  40fde4:	6563 7373 6e69 0a67 6220 7261 6f63 6564     cessing. barcode
  40fdf4:	0073 0000 7250 7365 2073 7562 7474 6e6f     s...Press button
  40fe04:	740a 206f 7473 7261 2074 6564 6f63 6964     .to start decodi
  40fe14:	676e 0a20 7262 6861 0021 0000 202c 7566     ng .brah!..., fu
  40fe24:	636e 6974 6e6f 203a 0000 0000 7361 6573     nction: ....asse
  40fe34:	7472 6f69 206e 2522 2273 6620 6961 656c     rtion "%s" faile
  40fe44:	3a64 6620 6c69 2065 2522 2273 202c 696c     d: file "%s", li
  40fe54:	656e 2520 2564 2573 0a73 0000 0043 0000     ne %d%s%s...C...

0040fe64 <_global_impure_ptr>:
  40fe64:	0018 2000                                   ... 

0040fe68 <zeroes.6911>:
  40fe68:	3030 3030 3030 3030 3030 3030 3030 3030     0000000000000000

0040fe78 <blanks.6910>:
  40fe78:	2020 2020 2020 2020 2020 2020 2020 2020                     
  40fe88:	4e49 0046 6e69 0066 414e 004e 616e 006e     INF.inf.NAN.nan.
  40fe98:	3130 3332 3534 3736 3938 4241 4443 4645     0123456789ABCDEF
  40fea8:	0000 0000 3130 3332 3534 3736 3938 6261     ....0123456789ab
  40feb8:	6463 6665 0000 0000 6e28 6c75 296c 0000     cdef....(null)..

0040fec8 <zeroes.6869>:
  40fec8:	3030 3030 3030 3030 3030 3030 3030 3030     0000000000000000

0040fed8 <blanks.6868>:
  40fed8:	2020 2020 2020 2020 2020 2020 2020 2020                     

0040fee8 <zeroes.6926>:
  40fee8:	3030 3030 3030 3030 3030 3030 3030 3030     0000000000000000

0040fef8 <blanks.6925>:
  40fef8:	2020 2020 2020 2020 2020 2020 2020 2020                     
  40ff08:	6e49 6966 696e 7974 0000 0000 614e 004e     Infinity....NaN.
  40ff18:	4f50 4953 0058 0000 002e 0000 0000 0000     POSIX...........

0040ff28 <__mprec_tens>:
  40ff28:	0000 0000 0000 3ff0 0000 0000 0000 4024     .......?......$@
  40ff38:	0000 0000 0000 4059 0000 0000 4000 408f     ......Y@.....@.@
  40ff48:	0000 0000 8800 40c3 0000 0000 6a00 40f8     .......@.....j.@
  40ff58:	0000 0000 8480 412e 0000 0000 12d0 4163     .......A......cA
  40ff68:	0000 0000 d784 4197 0000 0000 cd65 41cd     .......A....e..A
  40ff78:	0000 2000 a05f 4202 0000 e800 4876 4237     ... _..B....vH7B
  40ff88:	0000 a200 1a94 426d 0000 e540 309c 42a2     ......mB..@..0.B
  40ff98:	0000 1e90 bcc4 42d6 0000 2634 6bf5 430c     .......B..4&.k.C
  40ffa8:	8000 37e0 c379 4341 a000 85d8 3457 4376     ...7y.AC....W4vC
  40ffb8:	c800 674e c16d 43ab 3d00 6091 58e4 43e1     ..Ngm..C.=.`.X.C
  40ffc8:	8c40 78b5 af1d 4415 ef50 d6e2 1ae4 444b     @..x...DP.....KD
  40ffd8:	d592 064d f0cf 4480 4af6 c7e1 2d02 44b5     ..M....D.J...-.D
  40ffe8:	9db4 79d9 7843 44ea                         ...yCx.D

0040fff0 <p05.5302>:
  40fff0:	0005 0000 0019 0000 007d 0000 0000 0000     ........}.......

00410000 <__mprec_bigtens>:
  410000:	8000 37e0 c379 4341 6e17 b505 b8b5 4693     ...7y.AC.n.....F
  410010:	f9f5 e93f 4f03 4d38 1d32 f930 7748 5a82     ..?..O8M2.0.Hw.Z
  410020:	bf3c 7f73 4fdd 7515                         <.s..O.u

00410028 <_init>:
  410028:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  41002a:	bf00      	nop
  41002c:	bcf8      	pop	{r3, r4, r5, r6, r7}
  41002e:	bc08      	pop	{r3}
  410030:	469e      	mov	lr, r3
  410032:	4770      	bx	lr

00410034 <__init_array_start>:
  410034:	0040b449 	.word	0x0040b449

00410038 <__frame_dummy_init_array_entry>:
  410038:	004000f1                                ..@.

0041003c <_fini>:
  41003c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  41003e:	bf00      	nop
  410040:	bcf8      	pop	{r3, r4, r5, r6, r7}
  410042:	bc08      	pop	{r3}
  410044:	469e      	mov	lr, r3
  410046:	4770      	bx	lr

00410048 <__fini_array_start>:
  410048:	004000cd 	.word	0x004000cd

Disassembly of section .relocate:

20000000 <portable_delay_cycles>:
RAMFUNC
void portable_delay_cycles(unsigned long n)
{
	UNUSED(n);

	__asm (
20000000:	f3bf 8f5f 	dmb	sy
20000004:	3801      	subs	r0, #1
20000006:	d1fb      	bne.n	20000000 <portable_delay_cycles>
20000008:	4770      	bx	lr
2000000a:	bf00      	nop

2000000c <SystemCoreClock>:
2000000c:	0900 003d                                   ..=.

20000010 <g_us_cap_rows>:
20000010:	00f0                                        ..

20000012 <g_us_cap_line>:
20000012:	0280 0000 0000                              ......

20000018 <impure_data>:
20000018:	0000 0000 0304 2000 036c 2000 03d4 2000     ....... l.. ... 
	...
2000004c:	fe60 0040 0000 0000 0000 0000 0000 0000     `.@.............
	...
200000c0:	0001 0000 0000 0000 330e abcd 1234 e66d     .........3..4.m.
200000d0:	deec 0005 000b 0000 0000 0000 0000 0000     ................
	...

20000440 <_impure_ptr>:
20000440:	0018 2000                                   ... 

20000444 <__malloc_av_>:
	...
2000044c:	0444 2000 0444 2000 044c 2000 044c 2000     D.. D.. L.. L.. 
2000045c:	0454 2000 0454 2000 045c 2000 045c 2000     T.. T.. \.. \.. 
2000046c:	0464 2000 0464 2000 046c 2000 046c 2000     d.. d.. l.. l.. 
2000047c:	0474 2000 0474 2000 047c 2000 047c 2000     t.. t.. |.. |.. 
2000048c:	0484 2000 0484 2000 048c 2000 048c 2000     ... ... ... ... 
2000049c:	0494 2000 0494 2000 049c 2000 049c 2000     ... ... ... ... 
200004ac:	04a4 2000 04a4 2000 04ac 2000 04ac 2000     ... ... ... ... 
200004bc:	04b4 2000 04b4 2000 04bc 2000 04bc 2000     ... ... ... ... 
200004cc:	04c4 2000 04c4 2000 04cc 2000 04cc 2000     ... ... ... ... 
200004dc:	04d4 2000 04d4 2000 04dc 2000 04dc 2000     ... ... ... ... 
200004ec:	04e4 2000 04e4 2000 04ec 2000 04ec 2000     ... ... ... ... 
200004fc:	04f4 2000 04f4 2000 04fc 2000 04fc 2000     ... ... ... ... 
2000050c:	0504 2000 0504 2000 050c 2000 050c 2000     ... ... ... ... 
2000051c:	0514 2000 0514 2000 051c 2000 051c 2000     ... ... ... ... 
2000052c:	0524 2000 0524 2000 052c 2000 052c 2000     $.. $.. ,.. ,.. 
2000053c:	0534 2000 0534 2000 053c 2000 053c 2000     4.. 4.. <.. <.. 
2000054c:	0544 2000 0544 2000 054c 2000 054c 2000     D.. D.. L.. L.. 
2000055c:	0554 2000 0554 2000 055c 2000 055c 2000     T.. T.. \.. \.. 
2000056c:	0564 2000 0564 2000 056c 2000 056c 2000     d.. d.. l.. l.. 
2000057c:	0574 2000 0574 2000 057c 2000 057c 2000     t.. t.. |.. |.. 
2000058c:	0584 2000 0584 2000 058c 2000 058c 2000     ... ... ... ... 
2000059c:	0594 2000 0594 2000 059c 2000 059c 2000     ... ... ... ... 
200005ac:	05a4 2000 05a4 2000 05ac 2000 05ac 2000     ... ... ... ... 
200005bc:	05b4 2000 05b4 2000 05bc 2000 05bc 2000     ... ... ... ... 
200005cc:	05c4 2000 05c4 2000 05cc 2000 05cc 2000     ... ... ... ... 
200005dc:	05d4 2000 05d4 2000 05dc 2000 05dc 2000     ... ... ... ... 
200005ec:	05e4 2000 05e4 2000 05ec 2000 05ec 2000     ... ... ... ... 
200005fc:	05f4 2000 05f4 2000 05fc 2000 05fc 2000     ... ... ... ... 
2000060c:	0604 2000 0604 2000 060c 2000 060c 2000     ... ... ... ... 
2000061c:	0614 2000 0614 2000 061c 2000 061c 2000     ... ... ... ... 
2000062c:	0624 2000 0624 2000 062c 2000 062c 2000     $.. $.. ,.. ,.. 
2000063c:	0634 2000 0634 2000 063c 2000 063c 2000     4.. 4.. <.. <.. 
2000064c:	0644 2000 0644 2000 064c 2000 064c 2000     D.. D.. L.. L.. 
2000065c:	0654 2000 0654 2000 065c 2000 065c 2000     T.. T.. \.. \.. 
2000066c:	0664 2000 0664 2000 066c 2000 066c 2000     d.. d.. l.. l.. 
2000067c:	0674 2000 0674 2000 067c 2000 067c 2000     t.. t.. |.. |.. 
2000068c:	0684 2000 0684 2000 068c 2000 068c 2000     ... ... ... ... 
2000069c:	0694 2000 0694 2000 069c 2000 069c 2000     ... ... ... ... 
200006ac:	06a4 2000 06a4 2000 06ac 2000 06ac 2000     ... ... ... ... 
200006bc:	06b4 2000 06b4 2000 06bc 2000 06bc 2000     ... ... ... ... 
200006cc:	06c4 2000 06c4 2000 06cc 2000 06cc 2000     ... ... ... ... 
200006dc:	06d4 2000 06d4 2000 06dc 2000 06dc 2000     ... ... ... ... 
200006ec:	06e4 2000 06e4 2000 06ec 2000 06ec 2000     ... ... ... ... 
200006fc:	06f4 2000 06f4 2000 06fc 2000 06fc 2000     ... ... ... ... 
2000070c:	0704 2000 0704 2000 070c 2000 070c 2000     ... ... ... ... 
2000071c:	0714 2000 0714 2000 071c 2000 071c 2000     ... ... ... ... 
2000072c:	0724 2000 0724 2000 072c 2000 072c 2000     $.. $.. ,.. ,.. 
2000073c:	0734 2000 0734 2000 073c 2000 073c 2000     4.. 4.. <.. <.. 
2000074c:	0744 2000 0744 2000 074c 2000 074c 2000     D.. D.. L.. L.. 
2000075c:	0754 2000 0754 2000 075c 2000 075c 2000     T.. T.. \.. \.. 
2000076c:	0764 2000 0764 2000 076c 2000 076c 2000     d.. d.. l.. l.. 
2000077c:	0774 2000 0774 2000 077c 2000 077c 2000     t.. t.. |.. |.. 
2000078c:	0784 2000 0784 2000 078c 2000 078c 2000     ... ... ... ... 
2000079c:	0794 2000 0794 2000 079c 2000 079c 2000     ... ... ... ... 
200007ac:	07a4 2000 07a4 2000 07ac 2000 07ac 2000     ... ... ... ... 
200007bc:	07b4 2000 07b4 2000 07bc 2000 07bc 2000     ... ... ... ... 
200007cc:	07c4 2000 07c4 2000 07cc 2000 07cc 2000     ... ... ... ... 
200007dc:	07d4 2000 07d4 2000 07dc 2000 07dc 2000     ... ... ... ... 
200007ec:	07e4 2000 07e4 2000 07ec 2000 07ec 2000     ... ... ... ... 
200007fc:	07f4 2000 07f4 2000 07fc 2000 07fc 2000     ... ... ... ... 
2000080c:	0804 2000 0804 2000 080c 2000 080c 2000     ... ... ... ... 
2000081c:	0814 2000 0814 2000 081c 2000 081c 2000     ... ... ... ... 
2000082c:	0824 2000 0824 2000 082c 2000 082c 2000     $.. $.. ,.. ,.. 
2000083c:	0834 2000 0834 2000 083c 2000 083c 2000     4.. 4.. <.. <.. 

2000084c <__malloc_trim_threshold>:
2000084c:	0000 0002                                   ....

20000850 <__malloc_sbrk_base>:
20000850:	ffff ffff                                   ....

20000854 <lconv>:
20000854:	ff20 0040 f8a8 0040 f8a8 0040 f8a8 0040      .@...@...@...@.
20000864:	f8a8 0040 f8a8 0040 f8a8 0040 f8a8 0040     ..@...@...@...@.
20000874:	f8a8 0040 f8a8 0040 ffff ffff ffff ffff     ..@...@.........
20000884:	ffff ffff ffff 0000                         ........

2000088c <lc_ctype_charset>:
2000088c:	5341 4943 0049 0000 0000 0000 0000 0000     ASCII...........
	...

200008ac <__mb_cur_max>:
200008ac:	0001 0000                                   ....

200008b0 <__wctomb>:
200008b0:	ce19 0040                                   ..@.
