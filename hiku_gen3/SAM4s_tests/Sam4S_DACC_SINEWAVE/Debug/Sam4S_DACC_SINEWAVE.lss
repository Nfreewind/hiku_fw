
Sam4S_DACC_SINEWAVE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000055a0  00400000  00400000  00008000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  004055a0  004055a0  0000d5a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     0000086c  20000000  004055a8  00010000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          000000e8  2000086c  00405e14  0001086c  2**2
                  ALLOC
  4 .stack        00003004  20000954  00405efc  0001086c  2**0
                  ALLOC
  5 .ARM.attributes 0000002a  00000000  00000000  0001086c  2**0
                  CONTENTS, READONLY
  6 .comment      0000005b  00000000  00000000  00010896  2**0
                  CONTENTS, READONLY
  7 .debug_info   00009f73  00000000  00000000  000108f1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001bd2  00000000  00000000  0001a864  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00003d9d  00000000  00000000  0001c436  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000938  00000000  00000000  000201d3  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000858  00000000  00000000  00020b0b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  00012f18  00000000  00000000  00021363  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00009f7b  00000000  00000000  0003427b  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    0005287d  00000000  00000000  0003e1f6  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  0000205c  00000000  00000000  00090a74  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <_sfixed>:
  400000:	20003958 	.word	0x20003958
  400004:	0040087d 	.word	0x0040087d
  400008:	00400879 	.word	0x00400879
  40000c:	00400879 	.word	0x00400879
  400010:	00400879 	.word	0x00400879
  400014:	00400879 	.word	0x00400879
  400018:	00400879 	.word	0x00400879
	...
  40002c:	00400879 	.word	0x00400879
  400030:	00400879 	.word	0x00400879
  400034:	00000000 	.word	0x00000000
  400038:	00400879 	.word	0x00400879
  40003c:	00400c2d 	.word	0x00400c2d
  400040:	00400879 	.word	0x00400879
  400044:	00400879 	.word	0x00400879
  400048:	00400879 	.word	0x00400879
  40004c:	00400879 	.word	0x00400879
  400050:	00400879 	.word	0x00400879
  400054:	00400879 	.word	0x00400879
  400058:	00400879 	.word	0x00400879
  40005c:	00400879 	.word	0x00400879
  400060:	00400879 	.word	0x00400879
  400064:	00400879 	.word	0x00400879
  400068:	00000000 	.word	0x00000000
  40006c:	00400675 	.word	0x00400675
  400070:	00400689 	.word	0x00400689
  400074:	0040069d 	.word	0x0040069d
  400078:	00400879 	.word	0x00400879
  40007c:	00400879 	.word	0x00400879
	...
  400088:	00400879 	.word	0x00400879
  40008c:	00400879 	.word	0x00400879
  400090:	00400879 	.word	0x00400879
  400094:	00400879 	.word	0x00400879
  400098:	00400879 	.word	0x00400879
  40009c:	00400879 	.word	0x00400879
  4000a0:	00400879 	.word	0x00400879
  4000a4:	00400879 	.word	0x00400879
  4000a8:	00400879 	.word	0x00400879
  4000ac:	00400879 	.word	0x00400879
  4000b0:	00400879 	.word	0x00400879
  4000b4:	00400879 	.word	0x00400879
  4000b8:	00400879 	.word	0x00400879
  4000bc:	00400879 	.word	0x00400879
  4000c0:	00400879 	.word	0x00400879
  4000c4:	00400879 	.word	0x00400879
  4000c8:	00400879 	.word	0x00400879

004000cc <__do_global_dtors_aux>:
  4000cc:	b510      	push	{r4, lr}
  4000ce:	4c05      	ldr	r4, [pc, #20]	; (4000e4 <__do_global_dtors_aux+0x18>)
  4000d0:	7823      	ldrb	r3, [r4, #0]
  4000d2:	b933      	cbnz	r3, 4000e2 <__do_global_dtors_aux+0x16>
  4000d4:	4b04      	ldr	r3, [pc, #16]	; (4000e8 <__do_global_dtors_aux+0x1c>)
  4000d6:	b113      	cbz	r3, 4000de <__do_global_dtors_aux+0x12>
  4000d8:	4804      	ldr	r0, [pc, #16]	; (4000ec <__do_global_dtors_aux+0x20>)
  4000da:	f3af 8000 	nop.w
  4000de:	2301      	movs	r3, #1
  4000e0:	7023      	strb	r3, [r4, #0]
  4000e2:	bd10      	pop	{r4, pc}
  4000e4:	2000086c 	.word	0x2000086c
  4000e8:	00000000 	.word	0x00000000
  4000ec:	004055a8 	.word	0x004055a8

004000f0 <frame_dummy>:
  4000f0:	4b08      	ldr	r3, [pc, #32]	; (400114 <frame_dummy+0x24>)
  4000f2:	b510      	push	{r4, lr}
  4000f4:	b11b      	cbz	r3, 4000fe <frame_dummy+0xe>
  4000f6:	4808      	ldr	r0, [pc, #32]	; (400118 <frame_dummy+0x28>)
  4000f8:	4908      	ldr	r1, [pc, #32]	; (40011c <frame_dummy+0x2c>)
  4000fa:	f3af 8000 	nop.w
  4000fe:	4808      	ldr	r0, [pc, #32]	; (400120 <frame_dummy+0x30>)
  400100:	6803      	ldr	r3, [r0, #0]
  400102:	b903      	cbnz	r3, 400106 <frame_dummy+0x16>
  400104:	bd10      	pop	{r4, pc}
  400106:	4b07      	ldr	r3, [pc, #28]	; (400124 <frame_dummy+0x34>)
  400108:	2b00      	cmp	r3, #0
  40010a:	d0fb      	beq.n	400104 <frame_dummy+0x14>
  40010c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  400110:	4718      	bx	r3
  400112:	bf00      	nop
  400114:	00000000 	.word	0x00000000
  400118:	004055a8 	.word	0x004055a8
  40011c:	20000870 	.word	0x20000870
  400120:	004055a8 	.word	0x004055a8
  400124:	00000000 	.word	0x00000000

00400128 <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
  400128:	b510      	push	{r4, lr}
	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
  40012a:	480e      	ldr	r0, [pc, #56]	; (400164 <sysclk_init+0x3c>)
  40012c:	4b0e      	ldr	r3, [pc, #56]	; (400168 <sysclk_init+0x40>)
  40012e:	4798      	blx	r3
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
  400130:	2000      	movs	r0, #0
  400132:	213e      	movs	r1, #62	; 0x3e
  400134:	4b0d      	ldr	r3, [pc, #52]	; (40016c <sysclk_init+0x44>)
  400136:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
  400138:	4c0d      	ldr	r4, [pc, #52]	; (400170 <sysclk_init+0x48>)
  40013a:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
  40013c:	2800      	cmp	r0, #0
  40013e:	d0fc      	beq.n	40013a <sysclk_init+0x12>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
  400140:	4b0c      	ldr	r3, [pc, #48]	; (400174 <sysclk_init+0x4c>)
  400142:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
  400144:	4a0c      	ldr	r2, [pc, #48]	; (400178 <sysclk_init+0x50>)
  400146:	4b0d      	ldr	r3, [pc, #52]	; (40017c <sysclk_init+0x54>)
  400148:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		return pmc_is_locked_pllack();
  40014a:	4c0d      	ldr	r4, [pc, #52]	; (400180 <sysclk_init+0x58>)
  40014c:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
  40014e:	2800      	cmp	r0, #0
  400150:	d0fc      	beq.n	40014c <sysclk_init+0x24>

		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
  400152:	2010      	movs	r0, #16
  400154:	4b0b      	ldr	r3, [pc, #44]	; (400184 <sysclk_init+0x5c>)
  400156:	4798      	blx	r3
		pmc_switch_mck_to_pllbck(CONFIG_SYSCLK_PRES);
	}
#endif

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
  400158:	4b0b      	ldr	r3, [pc, #44]	; (400188 <sysclk_init+0x60>)
  40015a:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
  40015c:	4801      	ldr	r0, [pc, #4]	; (400164 <sysclk_init+0x3c>)
  40015e:	4b02      	ldr	r3, [pc, #8]	; (400168 <sysclk_init+0x40>)
  400160:	4798      	blx	r3
  400162:	bd10      	pop	{r4, pc}
  400164:	07270e00 	.word	0x07270e00
  400168:	00400a41 	.word	0x00400a41
  40016c:	00400719 	.word	0x00400719
  400170:	0040076d 	.word	0x0040076d
  400174:	0040077d 	.word	0x0040077d
  400178:	20133f01 	.word	0x20133f01
  40017c:	400e0400 	.word	0x400e0400
  400180:	0040078d 	.word	0x0040078d
  400184:	004006b1 	.word	0x004006b1
  400188:	0040092d 	.word	0x0040092d

0040018c <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len)
{
	int nChars = 0;

	if (file != 0) {
  40018c:	b9a8      	cbnz	r0, 4001ba <_read+0x2e>
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
  40018e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  400192:	460c      	mov	r4, r1
  400194:	4690      	mov	r8, r2

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
  400196:	2a00      	cmp	r2, #0
  400198:	dd0a      	ble.n	4001b0 <_read+0x24>
  40019a:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
  40019c:	4e08      	ldr	r6, [pc, #32]	; (4001c0 <_read+0x34>)
  40019e:	4d09      	ldr	r5, [pc, #36]	; (4001c4 <_read+0x38>)
  4001a0:	6830      	ldr	r0, [r6, #0]
  4001a2:	4621      	mov	r1, r4
  4001a4:	682b      	ldr	r3, [r5, #0]
  4001a6:	4798      	blx	r3
		ptr++;
  4001a8:	3401      	adds	r4, #1

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
  4001aa:	42bc      	cmp	r4, r7
  4001ac:	d1f8      	bne.n	4001a0 <_read+0x14>
  4001ae:	e001      	b.n	4001b4 <_read+0x28>
  4001b0:	f04f 0800 	mov.w	r8, #0
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
	}
	return nChars;
  4001b4:	4640      	mov	r0, r8
  4001b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
_read (int file, char * ptr, int len)
{
	int nChars = 0;

	if (file != 0) {
		return -1;
  4001ba:	f04f 30ff 	mov.w	r0, #4294967295
  4001be:	4770      	bx	lr
  4001c0:	20000948 	.word	0x20000948
  4001c4:	20000940 	.word	0x20000940

004001c8 <_write>:
int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
  4001c8:	3801      	subs	r0, #1
  4001ca:	2802      	cmp	r0, #2
  4001cc:	d818      	bhi.n	400200 <_write+0x38>
int __attribute__((weak))
_write (int file, const char *ptr, int len);

int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
  4001ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4001d2:	460e      	mov	r6, r1
  4001d4:	4614      	mov	r4, r2

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
  4001d6:	b182      	cbz	r2, 4001fa <_write+0x32>
  4001d8:	460d      	mov	r5, r1
		if (ptr_put(stdio_base, *ptr++) < 0) {
  4001da:	f8df 8038 	ldr.w	r8, [pc, #56]	; 400214 <_write+0x4c>
  4001de:	4f0c      	ldr	r7, [pc, #48]	; (400210 <_write+0x48>)
  4001e0:	f8d8 0000 	ldr.w	r0, [r8]
  4001e4:	f815 1b01 	ldrb.w	r1, [r5], #1
  4001e8:	683b      	ldr	r3, [r7, #0]
  4001ea:	4798      	blx	r3
  4001ec:	2800      	cmp	r0, #0
  4001ee:	db0a      	blt.n	400206 <_write+0x3e>
  4001f0:	1ba8      	subs	r0, r5, r6

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
  4001f2:	3c01      	subs	r4, #1
  4001f4:	d1f4      	bne.n	4001e0 <_write+0x18>
  4001f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4001fa:	2000      	movs	r0, #0
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
		}
		++nChars;
	}
	return nChars;
  4001fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
_write (int file, const char *ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
  400200:	f04f 30ff 	mov.w	r0, #4294967295
			return -1;
		}
		++nChars;
	}
	return nChars;
}
  400204:	4770      	bx	lr
		return -1;
	}

	for (; len != 0; --len) {
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
  400206:	f04f 30ff 	mov.w	r0, #4294967295
		}
		++nChars;
	}
	return nChars;
}
  40020a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40020e:	bf00      	nop
  400210:	20000944 	.word	0x20000944
  400214:	20000948 	.word	0x20000948

00400218 <board_init>:
#include "conf_board.h"
#include "gpio.h"
#include "ioport.h"

void board_init(void)
{
  400218:	b510      	push	{r4, lr}
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
  40021a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  40021e:	4b0f      	ldr	r3, [pc, #60]	; (40025c <board_init+0x44>)
  400220:	605a      	str	r2, [r3, #4]
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
  400222:	200b      	movs	r0, #11
  400224:	4c0e      	ldr	r4, [pc, #56]	; (400260 <board_init+0x48>)
  400226:	47a0      	blx	r4
  400228:	200c      	movs	r0, #12
  40022a:	47a0      	blx	r4
  40022c:	200d      	movs	r0, #13
  40022e:	47a0      	blx	r4
	 * Here IOPORT must be initialized for others to use before setting up IO.
	 */
	ioport_init();

	/* Configure LED pins */
	gpio_configure_pin(LED0_GPIO, LED0_FLAGS);
  400230:	2013      	movs	r0, #19
  400232:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
  400236:	4c0b      	ldr	r4, [pc, #44]	; (400264 <board_init+0x4c>)
  400238:	47a0      	blx	r4
	gpio_configure_pin(LED1_GPIO, LED1_FLAGS);
  40023a:	2014      	movs	r0, #20
  40023c:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
  400240:	47a0      	blx	r4

	/* Configure Push Button pins */
	gpio_configure_pin(GPIO_PUSH_BUTTON_1, GPIO_PUSH_BUTTON_1_FLAGS);
  400242:	2023      	movs	r0, #35	; 0x23
  400244:	4908      	ldr	r1, [pc, #32]	; (400268 <board_init+0x50>)
  400246:	47a0      	blx	r4
	gpio_configure_pin(GPIO_PUSH_BUTTON_2, GPIO_PUSH_BUTTON_2_FLAGS);
  400248:	204c      	movs	r0, #76	; 0x4c
  40024a:	4908      	ldr	r1, [pc, #32]	; (40026c <board_init+0x54>)
  40024c:	47a0      	blx	r4

#ifdef CONF_BOARD_UART_CONSOLE
	/* Configure UART pins */
	gpio_configure_group(PINS_UART1_PIO, PINS_UART1, PINS_UART1_FLAGS);
  40024e:	4808      	ldr	r0, [pc, #32]	; (400270 <board_init+0x58>)
  400250:	210c      	movs	r1, #12
  400252:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
  400256:	4b07      	ldr	r3, [pc, #28]	; (400274 <board_init+0x5c>)
  400258:	4798      	blx	r3
  40025a:	bd10      	pop	{r4, pc}
  40025c:	400e1450 	.word	0x400e1450
  400260:	0040079d 	.word	0x0040079d
  400264:	0040040d 	.word	0x0040040d
  400268:	28000079 	.word	0x28000079
  40026c:	28000059 	.word	0x28000059
  400270:	400e1000 	.word	0x400e1000
  400274:	00400531 	.word	0x00400531

00400278 <dacc_reset>:
 *
 * \param p_dacc Pointer to a DACC instance. 
 */
void dacc_reset(Dacc *p_dacc)
{
	p_dacc->DACC_CR = DACC_CR_SWRST;
  400278:	2301      	movs	r3, #1
  40027a:	6003      	str	r3, [r0, #0]
  40027c:	4770      	bx	lr
  40027e:	bf00      	nop

00400280 <dacc_set_transfer_mode>:
 *
 * \return \ref DACC_RC_OK for OK.
 */
uint32_t dacc_set_transfer_mode(Dacc *p_dacc, uint32_t ul_mode)
{
	if (ul_mode) {
  400280:	b141      	cbz	r1, 400294 <dacc_set_transfer_mode+0x14>
#if (SAM3N) || (SAM4L) || (SAM4N)
		p_dacc->DACC_MR |= DACC_MR_WORD;
#elif (SAM4S) || (SAM4E)
		p_dacc->DACC_MR |= DACC_MR_ONE;
  400282:	6843      	ldr	r3, [r0, #4]
  400284:	f443 7380 	orr.w	r3, r3, #256	; 0x100
  400288:	6043      	str	r3, [r0, #4]
		p_dacc->DACC_MR |= DACC_MR_WORD_WORD;
  40028a:	6843      	ldr	r3, [r0, #4]
  40028c:	f043 0310 	orr.w	r3, r3, #16
  400290:	6043      	str	r3, [r0, #4]
  400292:	e007      	b.n	4002a4 <dacc_set_transfer_mode+0x24>
#endif
	} else {
#if (SAM3N) || (SAM4L) || (SAM4N)
		p_dacc->DACC_MR &= (~DACC_MR_WORD);
#elif (SAM4S) || (SAM4E)
		p_dacc->DACC_MR |= DACC_MR_ONE;
  400294:	6843      	ldr	r3, [r0, #4]
  400296:	f443 7380 	orr.w	r3, r3, #256	; 0x100
  40029a:	6043      	str	r3, [r0, #4]
		p_dacc->DACC_MR &= (~DACC_MR_WORD_WORD);
  40029c:	6843      	ldr	r3, [r0, #4]
  40029e:	f023 0310 	bic.w	r3, r3, #16
  4002a2:	6043      	str	r3, [r0, #4]
#else
		p_dacc->DACC_MR &= (~DACC_MR_WORD_WORD);
#endif
	}
	return DACC_RC_OK;
}
  4002a4:	2000      	movs	r0, #0
  4002a6:	4770      	bx	lr

004002a8 <dacc_get_interrupt_status>:
 *
 * \return The interrupt status.
 */
uint32_t dacc_get_interrupt_status(Dacc *p_dacc)
{
	return p_dacc->DACC_ISR;
  4002a8:	6b00      	ldr	r0, [r0, #48]	; 0x30
}
  4002aa:	4770      	bx	lr

004002ac <dacc_write_conversion_data>:
 * \param p_dacc Pointer to a DACC instance. 
 * \param ul_data The data to be transferred to analog value.
 */
void dacc_write_conversion_data(Dacc *p_dacc, uint32_t ul_data)
{
	p_dacc->DACC_CDR = ul_data;
  4002ac:	6201      	str	r1, [r0, #32]
  4002ae:	4770      	bx	lr

004002b0 <dacc_set_channel_selection>:
 *
 * \return \ref DACC_RC_OK if successful.
 */
uint32_t dacc_set_channel_selection(Dacc *p_dacc, uint32_t ul_channel)
{
	uint32_t mr = p_dacc->DACC_MR & (~DACC_MR_USER_SEL_Msk);
  4002b0:	6843      	ldr	r3, [r0, #4]
	if (ul_channel > MAX_CH_NB) {
  4002b2:	2901      	cmp	r1, #1
  4002b4:	d806      	bhi.n	4002c4 <dacc_set_channel_selection+0x14>
		return DACC_RC_INVALID_PARAM;
	}
	mr &= ~(DACC_MR_TAG);
  4002b6:	f423 1398 	bic.w	r3, r3, #1245184	; 0x130000
	mr |= ul_channel << DACC_MR_USER_SEL_Pos;
  4002ba:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
	p_dacc->DACC_MR = mr;
  4002be:	6041      	str	r1, [r0, #4]

	return DACC_RC_OK;
  4002c0:	2000      	movs	r0, #0
  4002c2:	4770      	bx	lr
 */
uint32_t dacc_set_channel_selection(Dacc *p_dacc, uint32_t ul_channel)
{
	uint32_t mr = p_dacc->DACC_MR & (~DACC_MR_USER_SEL_Msk);
	if (ul_channel > MAX_CH_NB) {
		return DACC_RC_INVALID_PARAM;
  4002c4:	2001      	movs	r0, #1
	mr &= ~(DACC_MR_TAG);
	mr |= ul_channel << DACC_MR_USER_SEL_Pos;
	p_dacc->DACC_MR = mr;

	return DACC_RC_OK;
}
  4002c6:	4770      	bx	lr

004002c8 <dacc_set_timing>:
 *
 * \return \ref DACC_RC_OK for OK.
 */
uint32_t dacc_set_timing(Dacc *p_dacc,
		uint32_t ul_refresh, uint32_t ul_maxs, uint32_t ul_startup)
{
  4002c8:	b410      	push	{r4}
	uint32_t mr = p_dacc->DACC_MR
  4002ca:	6844      	ldr	r4, [r0, #4]
  4002cc:	f024 547c 	bic.w	r4, r4, #1056964608	; 0x3f000000
  4002d0:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
	& (~(DACC_MR_REFRESH_Msk | DACC_MR_STARTUP_Msk));
	mr |= DACC_MR_REFRESH(ul_refresh);
  4002d4:	0209      	lsls	r1, r1, #8
  4002d6:	b289      	uxth	r1, r1
  4002d8:	430c      	orrs	r4, r1
	if (ul_maxs) {
  4002da:	b112      	cbz	r2, 4002e2 <dacc_set_timing+0x1a>
		mr |= DACC_MR_MAXS;
  4002dc:	f444 1400 	orr.w	r4, r4, #2097152	; 0x200000
  4002e0:	e001      	b.n	4002e6 <dacc_set_timing+0x1e>
		} else {
		mr &= ~DACC_MR_MAXS;
  4002e2:	f424 1400 	bic.w	r4, r4, #2097152	; 0x200000
	}
	mr |= (DACC_MR_STARTUP_Msk & ((ul_startup) << DACC_MR_STARTUP_Pos));
  4002e6:	061b      	lsls	r3, r3, #24
  4002e8:	f003 537c 	and.w	r3, r3, #1056964608	; 0x3f000000
  4002ec:	431c      	orrs	r4, r3

	p_dacc->DACC_MR = mr;
  4002ee:	6044      	str	r4, [r0, #4]
	return DACC_RC_OK;
}
  4002f0:	2000      	movs	r0, #0
  4002f2:	f85d 4b04 	ldr.w	r4, [sp], #4
  4002f6:	4770      	bx	lr

004002f8 <dacc_enable_channel>:
 *
 * \return \ref DACC_RC_OK for OK.
 */
uint32_t dacc_enable_channel(Dacc *p_dacc, uint32_t ul_channel)
{
	if (ul_channel > MAX_CH_NB)
  4002f8:	2901      	cmp	r1, #1
  4002fa:	d804      	bhi.n	400306 <dacc_enable_channel+0xe>
		return DACC_RC_INVALID_PARAM;

	p_dacc->DACC_CHER = DACC_CHER_CH0 << ul_channel;
  4002fc:	2301      	movs	r3, #1
  4002fe:	408b      	lsls	r3, r1
  400300:	6103      	str	r3, [r0, #16]
	return DACC_RC_OK;
  400302:	2000      	movs	r0, #0
  400304:	4770      	bx	lr
 * \return \ref DACC_RC_OK for OK.
 */
uint32_t dacc_enable_channel(Dacc *p_dacc, uint32_t ul_channel)
{
	if (ul_channel > MAX_CH_NB)
		return DACC_RC_INVALID_PARAM;
  400306:	2001      	movs	r0, #1

	p_dacc->DACC_CHER = DACC_CHER_CH0 << ul_channel;
	return DACC_RC_OK;
}
  400308:	4770      	bx	lr
  40030a:	bf00      	nop

0040030c <dacc_set_analog_control>:
 *
 * \return \ref DACC_RC_OK for OK.
 */
uint32_t dacc_set_analog_control(Dacc *p_dacc, uint32_t ul_analog_control)
{
	p_dacc->DACC_ACR = ul_analog_control;
  40030c:	f8c0 1094 	str.w	r1, [r0, #148]	; 0x94
	return DACC_RC_OK;
}
  400310:	2000      	movs	r0, #0
  400312:	4770      	bx	lr

00400314 <pio_set_peripheral>:
		const uint32_t ul_mask)
{
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
  400314:	6442      	str	r2, [r0, #68]	; 0x44

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	switch (ul_type) {
  400316:	f1b1 5fc0 	cmp.w	r1, #402653184	; 0x18000000
  40031a:	d02f      	beq.n	40037c <pio_set_peripheral+0x68>
  40031c:	d807      	bhi.n	40032e <pio_set_peripheral+0x1a>
  40031e:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
  400322:	d014      	beq.n	40034e <pio_set_peripheral+0x3a>
  400324:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
  400328:	d01e      	beq.n	400368 <pio_set_peripheral+0x54>
  40032a:	b939      	cbnz	r1, 40033c <pio_set_peripheral+0x28>
  40032c:	4770      	bx	lr
  40032e:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
  400332:	d037      	beq.n	4003a4 <pio_set_peripheral+0x90>
  400334:	d804      	bhi.n	400340 <pio_set_peripheral+0x2c>
  400336:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
  40033a:	d029      	beq.n	400390 <pio_set_peripheral+0x7c>
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
  40033c:	6042      	str	r2, [r0, #4]
  40033e:	4770      	bx	lr

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	switch (ul_type) {
  400340:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
  400344:	d02e      	beq.n	4003a4 <pio_set_peripheral+0x90>
  400346:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
  40034a:	d02b      	beq.n	4003a4 <pio_set_peripheral+0x90>
  40034c:	e7f6      	b.n	40033c <pio_set_peripheral+0x28>
 * \param ul_type PIO type.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_set_peripheral(Pio *p_pio, const pio_type_t ul_type,
		const uint32_t ul_mask)
{
  40034e:	b410      	push	{r4}
	p_pio->PIO_IDR = ul_mask;

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	switch (ul_type) {
	case PIO_PERIPH_A:
		ul_sr = p_pio->PIO_ABCDSR[0];
  400350:	6f01      	ldr	r1, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  400352:	6f04      	ldr	r4, [r0, #112]	; 0x70
  400354:	43d3      	mvns	r3, r2
  400356:	4021      	ands	r1, r4
  400358:	4019      	ands	r1, r3
  40035a:	6701      	str	r1, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  40035c:	6f41      	ldr	r1, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  40035e:	6f44      	ldr	r4, [r0, #116]	; 0x74
  400360:	4021      	ands	r1, r4
  400362:	400b      	ands	r3, r1
  400364:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  400366:	e01a      	b.n	40039e <pio_set_peripheral+0x8a>
	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABCDSR[0];
  400368:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  40036a:	4313      	orrs	r3, r2
  40036c:	6703      	str	r3, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  40036e:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  400370:	6f41      	ldr	r1, [r0, #116]	; 0x74
  400372:	400b      	ands	r3, r1
  400374:	ea23 0302 	bic.w	r3, r3, r2
  400378:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  40037a:	e7df      	b.n	40033c <pio_set_peripheral+0x28>
#if (!SAMG)
	case PIO_PERIPH_C:
		ul_sr = p_pio->PIO_ABCDSR[0];
  40037c:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  40037e:	6f01      	ldr	r1, [r0, #112]	; 0x70
  400380:	400b      	ands	r3, r1
  400382:	ea23 0302 	bic.w	r3, r3, r2
  400386:	6703      	str	r3, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  400388:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  40038a:	4313      	orrs	r3, r2
  40038c:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  40038e:	e7d5      	b.n	40033c <pio_set_peripheral+0x28>
	case PIO_PERIPH_D:
		ul_sr = p_pio->PIO_ABCDSR[0];
  400390:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  400392:	4313      	orrs	r3, r2
  400394:	6703      	str	r3, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  400396:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  400398:	4313      	orrs	r3, r2
  40039a:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  40039c:	e7ce      	b.n	40033c <pio_set_peripheral+0x28>
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
  40039e:	6042      	str	r2, [r0, #4]
}
  4003a0:	f85d 4b04 	ldr.w	r4, [sp], #4
  4003a4:	4770      	bx	lr
  4003a6:	bf00      	nop

004003a8 <pio_set_input>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
  4003a8:	6441      	str	r1, [r0, #68]	; 0x44
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  4003aa:	f012 0f01 	tst.w	r2, #1
		p_pio->PIO_PUER = ul_mask;
  4003ae:	bf14      	ite	ne
  4003b0:	6641      	strne	r1, [r0, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
  4003b2:	6601      	streq	r1, [r0, #96]	; 0x60
{
	pio_disable_interrupt(p_pio, ul_mask);
	pio_pull_up(p_pio, ul_mask, ul_attribute & PIO_PULLUP);

	/* Enable Input Filter if necessary */
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
  4003b4:	f012 0f0a 	tst.w	r2, #10
		p_pio->PIO_IFER = ul_mask;
  4003b8:	bf14      	ite	ne
  4003ba:	6201      	strne	r1, [r0, #32]
	} else {
		p_pio->PIO_IFDR = ul_mask;
  4003bc:	6241      	streq	r1, [r0, #36]	; 0x24
	}

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	/* Enable de-glitch or de-bounce if necessary */
	if (ul_attribute & PIO_DEGLITCH) {
  4003be:	f012 0f02 	tst.w	r2, #2
  4003c2:	d002      	beq.n	4003ca <pio_set_input+0x22>
		p_pio->PIO_IFSCDR = ul_mask;
  4003c4:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
  4003c8:	e004      	b.n	4003d4 <pio_set_input+0x2c>
	} else {
		if (ul_attribute & PIO_DEBOUNCE) {
  4003ca:	f012 0f08 	tst.w	r2, #8
			p_pio->PIO_IFSCER = ul_mask;
  4003ce:	bf18      	it	ne
  4003d0:	f8c0 1084 	strne.w	r1, [r0, #132]	; 0x84
#else
#error "Unsupported device"
#endif

	/* Configure pin as input */
	p_pio->PIO_ODR = ul_mask;
  4003d4:	6141      	str	r1, [r0, #20]
	p_pio->PIO_PER = ul_mask;
  4003d6:	6001      	str	r1, [r0, #0]
  4003d8:	4770      	bx	lr
  4003da:	bf00      	nop

004003dc <pio_set_output>:
 */
void pio_set_output(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_default_level,
		const uint32_t ul_multidrive_enable,
		const uint32_t ul_pull_up_enable)
{
  4003dc:	b410      	push	{r4}
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
  4003de:	6441      	str	r1, [r0, #68]	; 0x44
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  4003e0:	9c01      	ldr	r4, [sp, #4]
  4003e2:	b10c      	cbz	r4, 4003e8 <pio_set_output+0xc>
		p_pio->PIO_PUER = ul_mask;
  4003e4:	6641      	str	r1, [r0, #100]	; 0x64
  4003e6:	e000      	b.n	4003ea <pio_set_output+0xe>
	} else {
		p_pio->PIO_PUDR = ul_mask;
  4003e8:	6601      	str	r1, [r0, #96]	; 0x60
{
	pio_disable_interrupt(p_pio, ul_mask);
	pio_pull_up(p_pio, ul_mask, ul_pull_up_enable);

	/* Enable multi-drive if necessary */
	if (ul_multidrive_enable) {
  4003ea:	b10b      	cbz	r3, 4003f0 <pio_set_output+0x14>
		p_pio->PIO_MDER = ul_mask;
  4003ec:	6501      	str	r1, [r0, #80]	; 0x50
  4003ee:	e000      	b.n	4003f2 <pio_set_output+0x16>
	} else {
		p_pio->PIO_MDDR = ul_mask;
  4003f0:	6541      	str	r1, [r0, #84]	; 0x54
	}

	/* Set default value */
	if (ul_default_level) {
  4003f2:	b10a      	cbz	r2, 4003f8 <pio_set_output+0x1c>
		p_pio->PIO_SODR = ul_mask;
  4003f4:	6301      	str	r1, [r0, #48]	; 0x30
  4003f6:	e000      	b.n	4003fa <pio_set_output+0x1e>
	} else {
		p_pio->PIO_CODR = ul_mask;
  4003f8:	6341      	str	r1, [r0, #52]	; 0x34
	}

	/* Configure pin(s) as output(s) */
	p_pio->PIO_OER = ul_mask;
  4003fa:	6101      	str	r1, [r0, #16]
	p_pio->PIO_PER = ul_mask;
  4003fc:	6001      	str	r1, [r0, #0]
}
  4003fe:	f85d 4b04 	ldr.w	r4, [sp], #4
  400402:	4770      	bx	lr

00400404 <pio_get_interrupt_status>:
 *
 * \return The interrupt status mask value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
  400404:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
  400406:	4770      	bx	lr

00400408 <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
  400408:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
  40040a:	4770      	bx	lr

0040040c <pio_configure_pin>:
 * \param ul_flags Pins attributes.
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
  40040c:	b570      	push	{r4, r5, r6, lr}
  40040e:	b082      	sub	sp, #8
  400410:	460d      	mov	r5, r1
		p_pio = PIOC;
	} else {
		p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
	}
#else
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
  400412:	0943      	lsrs	r3, r0, #5
  400414:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  400418:	f203 7307 	addw	r3, r3, #1799	; 0x707
  40041c:	025c      	lsls	r4, r3, #9
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
	Pio *p_pio = pio_get_pin_group(ul_pin);

	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
  40041e:	f001 43f0 	and.w	r3, r1, #2013265920	; 0x78000000
  400422:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
  400426:	d047      	beq.n	4004b8 <pio_configure_pin+0xac>
  400428:	d809      	bhi.n	40043e <pio_configure_pin+0x32>
  40042a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
  40042e:	d021      	beq.n	400474 <pio_configure_pin+0x68>
  400430:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
  400434:	d02f      	beq.n	400496 <pio_configure_pin+0x8a>
  400436:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
  40043a:	d16f      	bne.n	40051c <pio_configure_pin+0x110>
  40043c:	e009      	b.n	400452 <pio_configure_pin+0x46>
  40043e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
  400442:	d055      	beq.n	4004f0 <pio_configure_pin+0xe4>
  400444:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
  400448:	d052      	beq.n	4004f0 <pio_configure_pin+0xe4>
  40044a:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
  40044e:	d044      	beq.n	4004da <pio_configure_pin+0xce>
  400450:	e064      	b.n	40051c <pio_configure_pin+0x110>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
  400452:	f000 001f 	and.w	r0, r0, #31
  400456:	2601      	movs	r6, #1
  400458:	4086      	lsls	r6, r0
  40045a:	4620      	mov	r0, r4
  40045c:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  400460:	4632      	mov	r2, r6
  400462:	4b30      	ldr	r3, [pc, #192]	; (400524 <pio_configure_pin+0x118>)
  400464:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  400466:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
  40046a:	bf14      	ite	ne
  40046c:	6666      	strne	r6, [r4, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
  40046e:	6626      	streq	r6, [r4, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
  400470:	2001      	movs	r0, #1
  400472:	e054      	b.n	40051e <pio_configure_pin+0x112>
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
				(ul_flags & PIO_PULLUP));
		break;
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, (1 << (ul_pin & 0x1F)));
  400474:	f000 001f 	and.w	r0, r0, #31
  400478:	2601      	movs	r6, #1
  40047a:	4086      	lsls	r6, r0
  40047c:	4620      	mov	r0, r4
  40047e:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  400482:	4632      	mov	r2, r6
  400484:	4b27      	ldr	r3, [pc, #156]	; (400524 <pio_configure_pin+0x118>)
  400486:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  400488:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
  40048c:	bf14      	ite	ne
  40048e:	6666      	strne	r6, [r4, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
  400490:	6626      	streq	r6, [r4, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
  400492:	2001      	movs	r0, #1
  400494:	e043      	b.n	40051e <pio_configure_pin+0x112>
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
				(ul_flags & PIO_PULLUP));
		break;
#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	case PIO_TYPE_PIO_PERIPH_C:
		pio_set_peripheral(p_pio, PIO_PERIPH_C, (1 << (ul_pin & 0x1F)));
  400496:	f000 001f 	and.w	r0, r0, #31
  40049a:	2601      	movs	r6, #1
  40049c:	4086      	lsls	r6, r0
  40049e:	4620      	mov	r0, r4
  4004a0:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  4004a4:	4632      	mov	r2, r6
  4004a6:	4b1f      	ldr	r3, [pc, #124]	; (400524 <pio_configure_pin+0x118>)
  4004a8:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  4004aa:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
  4004ae:	bf14      	ite	ne
  4004b0:	6666      	strne	r6, [r4, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
  4004b2:	6626      	streq	r6, [r4, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
  4004b4:	2001      	movs	r0, #1
  4004b6:	e032      	b.n	40051e <pio_configure_pin+0x112>
		pio_set_peripheral(p_pio, PIO_PERIPH_C, (1 << (ul_pin & 0x1F)));
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
				(ul_flags & PIO_PULLUP));
		break;
	case PIO_TYPE_PIO_PERIPH_D:
		pio_set_peripheral(p_pio, PIO_PERIPH_D, (1 << (ul_pin & 0x1F)));
  4004b8:	f000 001f 	and.w	r0, r0, #31
  4004bc:	2601      	movs	r6, #1
  4004be:	4086      	lsls	r6, r0
  4004c0:	4620      	mov	r0, r4
  4004c2:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
  4004c6:	4632      	mov	r2, r6
  4004c8:	4b16      	ldr	r3, [pc, #88]	; (400524 <pio_configure_pin+0x118>)
  4004ca:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  4004cc:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
  4004d0:	bf14      	ite	ne
  4004d2:	6666      	strne	r6, [r4, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
  4004d4:	6626      	streq	r6, [r4, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
  4004d6:	2001      	movs	r0, #1
  4004d8:	e021      	b.n	40051e <pio_configure_pin+0x112>
				(ul_flags & PIO_PULLUP));
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
  4004da:	f000 031f 	and.w	r3, r0, #31
  4004de:	2601      	movs	r6, #1
  4004e0:	4620      	mov	r0, r4
  4004e2:	fa06 f103 	lsl.w	r1, r6, r3
  4004e6:	462a      	mov	r2, r5
  4004e8:	4b0f      	ldr	r3, [pc, #60]	; (400528 <pio_configure_pin+0x11c>)
  4004ea:	4798      	blx	r3

	default:
		return 0;
	}

	return 1;
  4004ec:	4630      	mov	r0, r6
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;
  4004ee:	e016      	b.n	40051e <pio_configure_pin+0x112>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
  4004f0:	f000 031f 	and.w	r3, r0, #31
  4004f4:	2601      	movs	r6, #1
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
  4004f6:	f005 5260 	and.w	r2, r5, #939524096	; 0x38000000
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
  4004fa:	ea05 0106 	and.w	r1, r5, r6
  4004fe:	9100      	str	r1, [sp, #0]
  400500:	4620      	mov	r0, r4
  400502:	fa06 f103 	lsl.w	r1, r6, r3
  400506:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
  40050a:	bf14      	ite	ne
  40050c:	2200      	movne	r2, #0
  40050e:	2201      	moveq	r2, #1
  400510:	f3c5 0380 	ubfx	r3, r5, #2, #1
  400514:	4c05      	ldr	r4, [pc, #20]	; (40052c <pio_configure_pin+0x120>)
  400516:	47a0      	blx	r4

	default:
		return 0;
	}

	return 1;
  400518:	4630      	mov	r0, r6
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
		break;
  40051a:	e000      	b.n	40051e <pio_configure_pin+0x112>

	default:
		return 0;
  40051c:	2000      	movs	r0, #0
	}

	return 1;
}
  40051e:	b002      	add	sp, #8
  400520:	bd70      	pop	{r4, r5, r6, pc}
  400522:	bf00      	nop
  400524:	00400315 	.word	0x00400315
  400528:	004003a9 	.word	0x004003a9
  40052c:	004003dd 	.word	0x004003dd

00400530 <pio_configure_pin_group>:
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin_group(Pio *p_pio,
		uint32_t ul_mask, const uint32_t ul_flags)
{
  400530:	b570      	push	{r4, r5, r6, lr}
  400532:	b082      	sub	sp, #8
  400534:	4606      	mov	r6, r0
  400536:	460d      	mov	r5, r1
  400538:	4614      	mov	r4, r2
	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
  40053a:	f002 43f0 	and.w	r3, r2, #2013265920	; 0x78000000
  40053e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
  400542:	d038      	beq.n	4005b6 <pio_configure_pin_group+0x86>
  400544:	d809      	bhi.n	40055a <pio_configure_pin_group+0x2a>
  400546:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
  40054a:	d01c      	beq.n	400586 <pio_configure_pin_group+0x56>
  40054c:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
  400550:	d025      	beq.n	40059e <pio_configure_pin_group+0x6e>
  400552:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
  400556:	d150      	bne.n	4005fa <pio_configure_pin_group+0xca>
  400558:	e009      	b.n	40056e <pio_configure_pin_group+0x3e>
  40055a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
  40055e:	d03a      	beq.n	4005d6 <pio_configure_pin_group+0xa6>
  400560:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
  400564:	d037      	beq.n	4005d6 <pio_configure_pin_group+0xa6>
  400566:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
  40056a:	d030      	beq.n	4005ce <pio_configure_pin_group+0x9e>
  40056c:	e045      	b.n	4005fa <pio_configure_pin_group+0xca>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, ul_mask);
  40056e:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  400572:	462a      	mov	r2, r5
  400574:	4b22      	ldr	r3, [pc, #136]	; (400600 <pio_configure_pin_group+0xd0>)
  400576:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  400578:	f014 0f01 	tst.w	r4, #1
		p_pio->PIO_PUER = ul_mask;
  40057c:	bf14      	ite	ne
  40057e:	6675      	strne	r5, [r6, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
  400580:	6635      	streq	r5, [r6, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
  400582:	2001      	movs	r0, #1
  400584:	e03a      	b.n	4005fc <pio_configure_pin_group+0xcc>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, ul_mask);
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, ul_mask);
  400586:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  40058a:	462a      	mov	r2, r5
  40058c:	4b1c      	ldr	r3, [pc, #112]	; (400600 <pio_configure_pin_group+0xd0>)
  40058e:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  400590:	f014 0f01 	tst.w	r4, #1
		p_pio->PIO_PUER = ul_mask;
  400594:	bf14      	ite	ne
  400596:	6675      	strne	r5, [r6, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
  400598:	6635      	streq	r5, [r6, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
  40059a:	2001      	movs	r0, #1
  40059c:	e02e      	b.n	4005fc <pio_configure_pin_group+0xcc>
		pio_set_peripheral(p_pio, PIO_PERIPH_B, ul_mask);
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	case PIO_TYPE_PIO_PERIPH_C:
		pio_set_peripheral(p_pio, PIO_PERIPH_C, ul_mask);
  40059e:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  4005a2:	462a      	mov	r2, r5
  4005a4:	4b16      	ldr	r3, [pc, #88]	; (400600 <pio_configure_pin_group+0xd0>)
  4005a6:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  4005a8:	f014 0f01 	tst.w	r4, #1
		p_pio->PIO_PUER = ul_mask;
  4005ac:	bf14      	ite	ne
  4005ae:	6675      	strne	r5, [r6, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
  4005b0:	6635      	streq	r5, [r6, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
  4005b2:	2001      	movs	r0, #1
  4005b4:	e022      	b.n	4005fc <pio_configure_pin_group+0xcc>
	case PIO_TYPE_PIO_PERIPH_C:
		pio_set_peripheral(p_pio, PIO_PERIPH_C, ul_mask);
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
	case PIO_TYPE_PIO_PERIPH_D:
		pio_set_peripheral(p_pio, PIO_PERIPH_D, ul_mask);
  4005b6:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
  4005ba:	462a      	mov	r2, r5
  4005bc:	4b10      	ldr	r3, [pc, #64]	; (400600 <pio_configure_pin_group+0xd0>)
  4005be:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  4005c0:	f014 0f01 	tst.w	r4, #1
		p_pio->PIO_PUER = ul_mask;
  4005c4:	bf14      	ite	ne
  4005c6:	6675      	strne	r5, [r6, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
  4005c8:	6635      	streq	r5, [r6, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
  4005ca:	2001      	movs	r0, #1
  4005cc:	e016      	b.n	4005fc <pio_configure_pin_group+0xcc>
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, ul_mask, ul_flags);
  4005ce:	4b0d      	ldr	r3, [pc, #52]	; (400604 <pio_configure_pin_group+0xd4>)
  4005d0:	4798      	blx	r3

	default:
		return 0;
	}

	return 1;
  4005d2:	2001      	movs	r0, #1
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, ul_mask, ul_flags);
		break;
  4005d4:	e012      	b.n	4005fc <pio_configure_pin_group+0xcc>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask,
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
  4005d6:	f004 5260 	and.w	r2, r4, #939524096	; 0x38000000
		pio_set_input(p_pio, ul_mask, ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask,
  4005da:	f004 0301 	and.w	r3, r4, #1
  4005de:	9300      	str	r3, [sp, #0]
  4005e0:	4630      	mov	r0, r6
  4005e2:	4629      	mov	r1, r5
  4005e4:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
  4005e8:	bf14      	ite	ne
  4005ea:	2200      	movne	r2, #0
  4005ec:	2201      	moveq	r2, #1
  4005ee:	f3c4 0380 	ubfx	r3, r4, #2, #1
  4005f2:	4c05      	ldr	r4, [pc, #20]	; (400608 <pio_configure_pin_group+0xd8>)
  4005f4:	47a0      	blx	r4

	default:
		return 0;
	}

	return 1;
  4005f6:	2001      	movs	r0, #1
		pio_set_output(p_pio, ul_mask,
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
		break;
  4005f8:	e000      	b.n	4005fc <pio_configure_pin_group+0xcc>

	default:
		return 0;
  4005fa:	2000      	movs	r0, #0
	}

	return 1;
}
  4005fc:	b002      	add	sp, #8
  4005fe:	bd70      	pop	{r4, r5, r6, pc}
  400600:	00400315 	.word	0x00400315
  400604:	004003a9 	.word	0x004003a9
  400608:	004003dd 	.word	0x004003dd

0040060c <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
  40060c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  400610:	4681      	mov	r9, r0
  400612:	4688      	mov	r8, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
  400614:	4b12      	ldr	r3, [pc, #72]	; (400660 <pio_handler_process+0x54>)
  400616:	4798      	blx	r3
  400618:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
  40061a:	4648      	mov	r0, r9
  40061c:	4b11      	ldr	r3, [pc, #68]	; (400664 <pio_handler_process+0x58>)
  40061e:	4798      	blx	r3

	/* Check pending events */
	if (status != 0) {
  400620:	4005      	ands	r5, r0
  400622:	d013      	beq.n	40064c <pio_handler_process+0x40>
  400624:	4c10      	ldr	r4, [pc, #64]	; (400668 <pio_handler_process+0x5c>)
  400626:	f104 0660 	add.w	r6, r4, #96	; 0x60
		/* Find triggering source */
		i = 0;
		while (status != 0) {
			/* Source is configured on the same controller */
			if (gs_interrupt_sources[i].id == ul_id) {
  40062a:	6823      	ldr	r3, [r4, #0]
  40062c:	4543      	cmp	r3, r8
  40062e:	d108      	bne.n	400642 <pio_handler_process+0x36>
				/* Source has PIOs whose statuses have changed */
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  400630:	6861      	ldr	r1, [r4, #4]
  400632:	4229      	tst	r1, r5
  400634:	d005      	beq.n	400642 <pio_handler_process+0x36>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  400636:	68e3      	ldr	r3, [r4, #12]
  400638:	4640      	mov	r0, r8
  40063a:	4798      	blx	r3
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
  40063c:	6863      	ldr	r3, [r4, #4]
  40063e:	ea25 0503 	bic.w	r5, r5, r3
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
  400642:	42b4      	cmp	r4, r6
  400644:	d002      	beq.n	40064c <pio_handler_process+0x40>
  400646:	3410      	adds	r4, #16

	/* Check pending events */
	if (status != 0) {
		/* Find triggering source */
		i = 0;
		while (status != 0) {
  400648:	2d00      	cmp	r5, #0
  40064a:	d1ee      	bne.n	40062a <pio_handler_process+0x1e>
		}
	}

	/* Check capture events */
#if (SAM3S || SAM4S || SAM4E)
	if (pio_capture_enable_flag) {
  40064c:	4b07      	ldr	r3, [pc, #28]	; (40066c <pio_handler_process+0x60>)
  40064e:	681b      	ldr	r3, [r3, #0]
  400650:	b123      	cbz	r3, 40065c <pio_handler_process+0x50>
		if (pio_capture_handler) {
  400652:	4b07      	ldr	r3, [pc, #28]	; (400670 <pio_handler_process+0x64>)
  400654:	681b      	ldr	r3, [r3, #0]
  400656:	b10b      	cbz	r3, 40065c <pio_handler_process+0x50>
			pio_capture_handler(p_pio);
  400658:	4648      	mov	r0, r9
  40065a:	4798      	blx	r3
  40065c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  400660:	00400405 	.word	0x00400405
  400664:	00400409 	.word	0x00400409
  400668:	2000088c 	.word	0x2000088c
  40066c:	2000094c 	.word	0x2000094c
  400670:	20000888 	.word	0x20000888

00400674 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
  400674:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
  400676:	4802      	ldr	r0, [pc, #8]	; (400680 <PIOA_Handler+0xc>)
  400678:	210b      	movs	r1, #11
  40067a:	4b02      	ldr	r3, [pc, #8]	; (400684 <PIOA_Handler+0x10>)
  40067c:	4798      	blx	r3
  40067e:	bd08      	pop	{r3, pc}
  400680:	400e0e00 	.word	0x400e0e00
  400684:	0040060d 	.word	0x0040060d

00400688 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
  400688:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
  40068a:	4802      	ldr	r0, [pc, #8]	; (400694 <PIOB_Handler+0xc>)
  40068c:	210c      	movs	r1, #12
  40068e:	4b02      	ldr	r3, [pc, #8]	; (400698 <PIOB_Handler+0x10>)
  400690:	4798      	blx	r3
  400692:	bd08      	pop	{r3, pc}
  400694:	400e1000 	.word	0x400e1000
  400698:	0040060d 	.word	0x0040060d

0040069c <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
  40069c:	b508      	push	{r3, lr}
	pio_handler_process(PIOC, ID_PIOC);
  40069e:	4802      	ldr	r0, [pc, #8]	; (4006a8 <PIOC_Handler+0xc>)
  4006a0:	210d      	movs	r1, #13
  4006a2:	4b02      	ldr	r3, [pc, #8]	; (4006ac <PIOC_Handler+0x10>)
  4006a4:	4798      	blx	r3
  4006a6:	bd08      	pop	{r3, pc}
  4006a8:	400e1200 	.word	0x400e1200
  4006ac:	0040060d 	.word	0x0040060d

004006b0 <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
  4006b0:	4a18      	ldr	r2, [pc, #96]	; (400714 <pmc_switch_mck_to_pllack+0x64>)
  4006b2:	6b13      	ldr	r3, [r2, #48]	; 0x30
  4006b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  4006b8:	4318      	orrs	r0, r3
  4006ba:	6310      	str	r0, [r2, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  4006bc:	6e93      	ldr	r3, [r2, #104]	; 0x68
  4006be:	f013 0f08 	tst.w	r3, #8
  4006c2:	d003      	beq.n	4006cc <pmc_switch_mck_to_pllack+0x1c>
  4006c4:	e009      	b.n	4006da <pmc_switch_mck_to_pllack+0x2a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  4006c6:	3b01      	subs	r3, #1
  4006c8:	d103      	bne.n	4006d2 <pmc_switch_mck_to_pllack+0x22>
  4006ca:	e01e      	b.n	40070a <pmc_switch_mck_to_pllack+0x5a>
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  4006cc:	f44f 6300 	mov.w	r3, #2048	; 0x800
  4006d0:	4910      	ldr	r1, [pc, #64]	; (400714 <pmc_switch_mck_to_pllack+0x64>)
  4006d2:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  4006d4:	f012 0f08 	tst.w	r2, #8
  4006d8:	d0f5      	beq.n	4006c6 <pmc_switch_mck_to_pllack+0x16>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
  4006da:	4a0e      	ldr	r2, [pc, #56]	; (400714 <pmc_switch_mck_to_pllack+0x64>)
  4006dc:	6b13      	ldr	r3, [r2, #48]	; 0x30
  4006de:	f023 0303 	bic.w	r3, r3, #3
  4006e2:	f043 0302 	orr.w	r3, r3, #2
  4006e6:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  4006e8:	6e90      	ldr	r0, [r2, #104]	; 0x68
  4006ea:	f010 0008 	ands.w	r0, r0, #8
  4006ee:	d004      	beq.n	4006fa <pmc_switch_mck_to_pllack+0x4a>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	return 0;
  4006f0:	2000      	movs	r0, #0
  4006f2:	4770      	bx	lr
	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
  4006f4:	3b01      	subs	r3, #1
  4006f6:	d103      	bne.n	400700 <pmc_switch_mck_to_pllack+0x50>
  4006f8:	e009      	b.n	40070e <pmc_switch_mck_to_pllack+0x5e>
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  4006fa:	f44f 6300 	mov.w	r3, #2048	; 0x800
  4006fe:	4905      	ldr	r1, [pc, #20]	; (400714 <pmc_switch_mck_to_pllack+0x64>)
  400700:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  400702:	f012 0f08 	tst.w	r2, #8
  400706:	d0f5      	beq.n	4006f4 <pmc_switch_mck_to_pllack+0x44>
  400708:	4770      	bx	lr

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
			return 1;
  40070a:	2001      	movs	r0, #1
  40070c:	4770      	bx	lr
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
			return 1;
  40070e:	2001      	movs	r0, #1
		}
	}

	return 0;
}
  400710:	4770      	bx	lr
  400712:	bf00      	nop
  400714:	400e0400 	.word	0x400e0400

00400718 <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
  400718:	b138      	cbz	r0, 40072a <pmc_switch_mainck_to_xtal+0x12>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  40071a:	4911      	ldr	r1, [pc, #68]	; (400760 <pmc_switch_mainck_to_xtal+0x48>)
  40071c:	6a0b      	ldr	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  40071e:	4a11      	ldr	r2, [pc, #68]	; (400764 <pmc_switch_mainck_to_xtal+0x4c>)
  400720:	401a      	ands	r2, r3
  400722:	4b11      	ldr	r3, [pc, #68]	; (400768 <pmc_switch_mainck_to_xtal+0x50>)
  400724:	4313      	orrs	r3, r2
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  400726:	620b      	str	r3, [r1, #32]
  400728:	4770      	bx	lr
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  40072a:	4a0d      	ldr	r2, [pc, #52]	; (400760 <pmc_switch_mainck_to_xtal+0x48>)
  40072c:	6a13      	ldr	r3, [r2, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  40072e:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
  400732:	f023 0303 	bic.w	r3, r3, #3
  400736:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  40073a:	f043 0301 	orr.w	r3, r3, #1
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
  40073e:	0209      	lsls	r1, r1, #8
  400740:	b289      	uxth	r1, r1
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  400742:	430b      	orrs	r3, r1
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  400744:	6213      	str	r3, [r2, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  400746:	6e93      	ldr	r3, [r2, #104]	; 0x68
  400748:	f013 0f01 	tst.w	r3, #1
  40074c:	d0fb      	beq.n	400746 <pmc_switch_mainck_to_xtal+0x2e>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
  40074e:	4a04      	ldr	r2, [pc, #16]	; (400760 <pmc_switch_mainck_to_xtal+0x48>)
  400750:	6a13      	ldr	r3, [r2, #32]
  400752:	f043 739b 	orr.w	r3, r3, #20316160	; 0x1360000
  400756:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
  40075a:	6213      	str	r3, [r2, #32]
  40075c:	4770      	bx	lr
  40075e:	bf00      	nop
  400760:	400e0400 	.word	0x400e0400
  400764:	fec8fffc 	.word	0xfec8fffc
  400768:	01370002 	.word	0x01370002

0040076c <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
  40076c:	4b02      	ldr	r3, [pc, #8]	; (400778 <pmc_osc_is_ready_mainck+0xc>)
  40076e:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  400770:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
  400774:	4770      	bx	lr
  400776:	bf00      	nop
  400778:	400e0400 	.word	0x400e0400

0040077c <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
  40077c:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  400780:	4b01      	ldr	r3, [pc, #4]	; (400788 <pmc_disable_pllack+0xc>)
  400782:	629a      	str	r2, [r3, #40]	; 0x28
  400784:	4770      	bx	lr
  400786:	bf00      	nop
  400788:	400e0400 	.word	0x400e0400

0040078c <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
  40078c:	4b02      	ldr	r3, [pc, #8]	; (400798 <pmc_is_locked_pllack+0xc>)
  40078e:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  400790:	f000 0002 	and.w	r0, r0, #2
  400794:	4770      	bx	lr
  400796:	bf00      	nop
  400798:	400e0400 	.word	0x400e0400

0040079c <pmc_enable_periph_clk>:
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
  40079c:	2822      	cmp	r0, #34	; 0x22
  40079e:	d81e      	bhi.n	4007de <pmc_enable_periph_clk+0x42>
		return 1;
	}

	if (ul_id < 32) {
  4007a0:	281f      	cmp	r0, #31
  4007a2:	d80c      	bhi.n	4007be <pmc_enable_periph_clk+0x22>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
  4007a4:	4b11      	ldr	r3, [pc, #68]	; (4007ec <pmc_enable_periph_clk+0x50>)
  4007a6:	699a      	ldr	r2, [r3, #24]
  4007a8:	2301      	movs	r3, #1
  4007aa:	4083      	lsls	r3, r0
  4007ac:	401a      	ands	r2, r3
  4007ae:	4293      	cmp	r3, r2
  4007b0:	d017      	beq.n	4007e2 <pmc_enable_periph_clk+0x46>
			PMC->PMC_PCER0 = 1 << ul_id;
  4007b2:	2301      	movs	r3, #1
  4007b4:	4083      	lsls	r3, r0
  4007b6:	4a0d      	ldr	r2, [pc, #52]	; (4007ec <pmc_enable_periph_clk+0x50>)
  4007b8:	6113      	str	r3, [r2, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
  4007ba:	2000      	movs	r0, #0
  4007bc:	4770      	bx	lr
			PMC->PMC_PCER0 = 1 << ul_id;
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP || SAMG55 || SAMV71 || SAMV70 || SAME70 || SAMS70)
	} else {
		ul_id -= 32;
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
  4007be:	4b0b      	ldr	r3, [pc, #44]	; (4007ec <pmc_enable_periph_clk+0x50>)
  4007c0:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
			PMC->PMC_PCER0 = 1 << ul_id;
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP || SAMG55 || SAMV71 || SAMV70 || SAME70 || SAMS70)
	} else {
		ul_id -= 32;
  4007c4:	3820      	subs	r0, #32
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
  4007c6:	2301      	movs	r3, #1
  4007c8:	4083      	lsls	r3, r0
  4007ca:	401a      	ands	r2, r3
  4007cc:	4293      	cmp	r3, r2
  4007ce:	d00a      	beq.n	4007e6 <pmc_enable_periph_clk+0x4a>
			PMC->PMC_PCER1 = 1 << ul_id;
  4007d0:	2301      	movs	r3, #1
  4007d2:	4083      	lsls	r3, r0
  4007d4:	4a05      	ldr	r2, [pc, #20]	; (4007ec <pmc_enable_periph_clk+0x50>)
  4007d6:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
		}
#endif
	}

	return 0;
  4007da:	2000      	movs	r0, #0
  4007dc:	4770      	bx	lr
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
		return 1;
  4007de:	2001      	movs	r0, #1
  4007e0:	4770      	bx	lr
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
  4007e2:	2000      	movs	r0, #0
  4007e4:	4770      	bx	lr
  4007e6:	2000      	movs	r0, #0
}
  4007e8:	4770      	bx	lr
  4007ea:	bf00      	nop
  4007ec:	400e0400 	.word	0x400e0400

004007f0 <uart_init>:
 *
 * \retval 0 Success.
 * \retval 1 Bad baud rate generator value.
 */
uint32_t uart_init(Uart *p_uart, const sam_uart_opt_t *p_uart_opt)
{
  4007f0:	b410      	push	{r4}
	uint32_t cd = 0;

	/* Reset and disable receiver & transmitter */
	p_uart->UART_CR = UART_CR_RSTRX | UART_CR_RSTTX
  4007f2:	23ac      	movs	r3, #172	; 0xac
  4007f4:	6003      	str	r3, [r0, #0]
			| UART_CR_RXDIS | UART_CR_TXDIS;

	/* Check and configure baudrate */
	/* Asynchronous, no oversampling */
	cd = (p_uart_opt->ul_mck / p_uart_opt->ul_baudrate) / UART_MCK_DIV;
  4007f6:	680b      	ldr	r3, [r1, #0]
  4007f8:	684a      	ldr	r2, [r1, #4]
  4007fa:	fbb3 f3f2 	udiv	r3, r3, r2
  4007fe:	091b      	lsrs	r3, r3, #4
	if (cd < UART_MCK_DIV_MIN_FACTOR || cd > UART_MCK_DIV_MAX_FACTOR)
  400800:	1e5c      	subs	r4, r3, #1
  400802:	f64f 72fe 	movw	r2, #65534	; 0xfffe
  400806:	4294      	cmp	r4, r2
  400808:	d80a      	bhi.n	400820 <uart_init+0x30>
		return 1;

	p_uart->UART_BRGR = cd;
  40080a:	6203      	str	r3, [r0, #32]
	/* Configure mode */
	p_uart->UART_MR = p_uart_opt->ul_mode;
  40080c:	688b      	ldr	r3, [r1, #8]
  40080e:	6043      	str	r3, [r0, #4]

#if (!SAMV71 && !SAMV70 && !SAME70 && !SAMS70)
	/* Disable PDC channel */
	p_uart->UART_PTCR = UART_PTCR_RXTDIS | UART_PTCR_TXTDIS;
  400810:	f240 2302 	movw	r3, #514	; 0x202
  400814:	f8c0 3120 	str.w	r3, [r0, #288]	; 0x120
#endif

	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;
  400818:	2350      	movs	r3, #80	; 0x50
  40081a:	6003      	str	r3, [r0, #0]

	return 0;
  40081c:	2000      	movs	r0, #0
  40081e:	e000      	b.n	400822 <uart_init+0x32>

	/* Check and configure baudrate */
	/* Asynchronous, no oversampling */
	cd = (p_uart_opt->ul_mck / p_uart_opt->ul_baudrate) / UART_MCK_DIV;
	if (cd < UART_MCK_DIV_MIN_FACTOR || cd > UART_MCK_DIV_MAX_FACTOR)
		return 1;
  400820:	2001      	movs	r0, #1

	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;

	return 0;
}
  400822:	f85d 4b04 	ldr.w	r4, [sp], #4
  400826:	4770      	bx	lr

00400828 <uart_write>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
  400828:	6943      	ldr	r3, [r0, #20]
  40082a:	f013 0f02 	tst.w	r3, #2
		return 1;

	/* Send character */
	p_uart->UART_THR = uc_data;
  40082e:	bf1a      	itte	ne
  400830:	61c1      	strne	r1, [r0, #28]
	return 0;
  400832:	2000      	movne	r0, #0
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
		return 1;
  400834:	2001      	moveq	r0, #1

	/* Send character */
	p_uart->UART_THR = uc_data;
	return 0;
}
  400836:	4770      	bx	lr

00400838 <uart_read>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
  400838:	6943      	ldr	r3, [r0, #20]
  40083a:	f013 0f01 	tst.w	r3, #1
		return 1;

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
  40083e:	bf1d      	ittte	ne
  400840:	6983      	ldrne	r3, [r0, #24]
  400842:	700b      	strbne	r3, [r1, #0]
	return 0;
  400844:	2000      	movne	r0, #0
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
		return 1;
  400846:	2001      	moveq	r0, #1

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
	return 0;
}
  400848:	4770      	bx	lr
  40084a:	bf00      	nop

0040084c <usart_write>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
  40084c:	6943      	ldr	r3, [r0, #20]
  40084e:	f013 0f02 	tst.w	r3, #2
		return 1;
	}

	p_usart->US_THR = US_THR_TXCHR(c);
  400852:	bf1d      	ittte	ne
  400854:	f3c1 0108 	ubfxne	r1, r1, #0, #9
  400858:	61c1      	strne	r1, [r0, #28]
	return 0;
  40085a:	2000      	movne	r0, #0
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
		return 1;
  40085c:	2001      	moveq	r0, #1
	}

	p_usart->US_THR = US_THR_TXCHR(c);
	return 0;
}
  40085e:	4770      	bx	lr

00400860 <usart_read>:
 * \retval 0 on success.
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
  400860:	6943      	ldr	r3, [r0, #20]
  400862:	f013 0f01 	tst.w	r3, #1
  400866:	d005      	beq.n	400874 <usart_read+0x14>
		return 1;
	}

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
  400868:	6983      	ldr	r3, [r0, #24]
  40086a:	f3c3 0308 	ubfx	r3, r3, #0, #9
  40086e:	600b      	str	r3, [r1, #0]

	return 0;
  400870:	2000      	movs	r0, #0
  400872:	4770      	bx	lr
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
		return 1;
  400874:	2001      	movs	r0, #1

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;

	return 0;
}
  400876:	4770      	bx	lr

00400878 <Dummy_Handler>:
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
	while (1) {
	}
  400878:	e7fe      	b.n	400878 <Dummy_Handler>
  40087a:	bf00      	nop

0040087c <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
  40087c:	b508      	push	{r3, lr}

	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc > pDest) {
  40087e:	4b20      	ldr	r3, [pc, #128]	; (400900 <Reset_Handler+0x84>)
  400880:	4a20      	ldr	r2, [pc, #128]	; (400904 <Reset_Handler+0x88>)
  400882:	429a      	cmp	r2, r3
  400884:	d913      	bls.n	4008ae <Reset_Handler+0x32>
		for (; pDest < &_erelocate;) {
  400886:	4b20      	ldr	r3, [pc, #128]	; (400908 <Reset_Handler+0x8c>)
  400888:	4a1d      	ldr	r2, [pc, #116]	; (400900 <Reset_Handler+0x84>)
  40088a:	429a      	cmp	r2, r3
  40088c:	d21f      	bcs.n	4008ce <Reset_Handler+0x52>
  40088e:	4611      	mov	r1, r2
  400890:	3204      	adds	r2, #4
  400892:	3303      	adds	r3, #3
  400894:	1a9b      	subs	r3, r3, r2
  400896:	f023 0303 	bic.w	r3, r3, #3
  40089a:	3304      	adds	r3, #4
  40089c:	4a19      	ldr	r2, [pc, #100]	; (400904 <Reset_Handler+0x88>)
  40089e:	4413      	add	r3, r2
			*pDest++ = *pSrc++;
  4008a0:	f852 0b04 	ldr.w	r0, [r2], #4
  4008a4:	f841 0b04 	str.w	r0, [r1], #4
	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc > pDest) {
		for (; pDest < &_erelocate;) {
  4008a8:	429a      	cmp	r2, r3
  4008aa:	d1f9      	bne.n	4008a0 <Reset_Handler+0x24>
  4008ac:	e00f      	b.n	4008ce <Reset_Handler+0x52>
			*pDest++ = *pSrc++;
		}
	} else if (pSrc < pDest) {
  4008ae:	4b14      	ldr	r3, [pc, #80]	; (400900 <Reset_Handler+0x84>)
  4008b0:	4a14      	ldr	r2, [pc, #80]	; (400904 <Reset_Handler+0x88>)
  4008b2:	429a      	cmp	r2, r3
  4008b4:	d20b      	bcs.n	4008ce <Reset_Handler+0x52>
		uint32_t nb_bytes = (uint32_t)&_erelocate - (uint32_t)&_srelocate;
  4008b6:	4b14      	ldr	r3, [pc, #80]	; (400908 <Reset_Handler+0x8c>)
  4008b8:	4a11      	ldr	r2, [pc, #68]	; (400900 <Reset_Handler+0x84>)
  4008ba:	1a9a      	subs	r2, r3, r2
  4008bc:	4813      	ldr	r0, [pc, #76]	; (40090c <Reset_Handler+0x90>)
		pSrc = (uint32_t*)((uint32_t)pSrc + nb_bytes) - 1;
  4008be:	1881      	adds	r1, r0, r2
		pDest = (uint32_t*)((uint32_t)pDest + nb_bytes) - 1;
		for (;nb_bytes;nb_bytes -= 4) {
  4008c0:	b12a      	cbz	r2, 4008ce <Reset_Handler+0x52>
			*pDest-- = *pSrc--;
  4008c2:	f851 2904 	ldr.w	r2, [r1], #-4
  4008c6:	f843 2d04 	str.w	r2, [r3, #-4]!
		}
	} else if (pSrc < pDest) {
		uint32_t nb_bytes = (uint32_t)&_erelocate - (uint32_t)&_srelocate;
		pSrc = (uint32_t*)((uint32_t)pSrc + nb_bytes) - 1;
		pDest = (uint32_t*)((uint32_t)pDest + nb_bytes) - 1;
		for (;nb_bytes;nb_bytes -= 4) {
  4008ca:	4281      	cmp	r1, r0
  4008cc:	d1f9      	bne.n	4008c2 <Reset_Handler+0x46>

    No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
  4008ce:	bf00      	nop
		}
	}
	__NOP();

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
  4008d0:	4b0f      	ldr	r3, [pc, #60]	; (400910 <Reset_Handler+0x94>)
  4008d2:	4a10      	ldr	r2, [pc, #64]	; (400914 <Reset_Handler+0x98>)
  4008d4:	429a      	cmp	r2, r3
  4008d6:	d20b      	bcs.n	4008f0 <Reset_Handler+0x74>
  4008d8:	1d13      	adds	r3, r2, #4
  4008da:	4a0f      	ldr	r2, [pc, #60]	; (400918 <Reset_Handler+0x9c>)
  4008dc:	1ad2      	subs	r2, r2, r3
  4008de:	f022 0203 	bic.w	r2, r2, #3
  4008e2:	441a      	add	r2, r3
  4008e4:	3b04      	subs	r3, #4
		*pDest++ = 0;
  4008e6:	2100      	movs	r1, #0
  4008e8:	f843 1b04 	str.w	r1, [r3], #4
		}
	}
	__NOP();

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
  4008ec:	4293      	cmp	r3, r2
  4008ee:	d1fb      	bne.n	4008e8 <Reset_Handler+0x6c>
		*pDest++ = 0;
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) & _sfixed;
	SCB->VTOR = ((uint32_t) pSrc);
  4008f0:	4b0a      	ldr	r3, [pc, #40]	; (40091c <Reset_Handler+0xa0>)
  4008f2:	4a0b      	ldr	r2, [pc, #44]	; (400920 <Reset_Handler+0xa4>)
  4008f4:	609a      	str	r2, [r3, #8]

	/* Initialize the C library */
	__libc_init_array();
  4008f6:	4b0b      	ldr	r3, [pc, #44]	; (400924 <Reset_Handler+0xa8>)
  4008f8:	4798      	blx	r3

	/* Branch to main function */
	main();
  4008fa:	4b0b      	ldr	r3, [pc, #44]	; (400928 <Reset_Handler+0xac>)
  4008fc:	4798      	blx	r3

	/* Infinite loop */
	while (1);
  4008fe:	e7fe      	b.n	4008fe <Reset_Handler+0x82>
  400900:	20000000 	.word	0x20000000
  400904:	004055a8 	.word	0x004055a8
  400908:	2000086c 	.word	0x2000086c
  40090c:	004055a4 	.word	0x004055a4
  400910:	20000954 	.word	0x20000954
  400914:	2000086c 	.word	0x2000086c
  400918:	20000957 	.word	0x20000957
  40091c:	e000ed00 	.word	0xe000ed00
  400920:	00400000 	.word	0x00400000
  400924:	00400df5 	.word	0x00400df5
  400928:	00400ca9 	.word	0x00400ca9

0040092c <SystemCoreClockUpdate>:
 * \brief Get Core Clock Frequency.
 */
void SystemCoreClockUpdate( void )
{
	/* Determine clock frequency according to clock register values */
	switch ( PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk ) {
  40092c:	4b3d      	ldr	r3, [pc, #244]	; (400a24 <SystemCoreClockUpdate+0xf8>)
  40092e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  400930:	f003 0303 	and.w	r3, r3, #3
  400934:	2b03      	cmp	r3, #3
  400936:	d85d      	bhi.n	4009f4 <SystemCoreClockUpdate+0xc8>
  400938:	e8df f003 	tbb	[pc, r3]
  40093c:	2b2b0e02 	.word	0x2b2b0e02
	case PMC_MCKR_CSS_SLOW_CLK: /* Slow clock */
			if ( SUPC->SUPC_SR & SUPC_SR_OSCSEL ) {
  400940:	4b39      	ldr	r3, [pc, #228]	; (400a28 <SystemCoreClockUpdate+0xfc>)
  400942:	695b      	ldr	r3, [r3, #20]
  400944:	f013 0f80 	tst.w	r3, #128	; 0x80
				SystemCoreClock = CHIP_FREQ_XTAL_32K;
  400948:	bf14      	ite	ne
  40094a:	f44f 4200 	movne.w	r2, #32768	; 0x8000
			} else {
				SystemCoreClock = CHIP_FREQ_SLCK_RC;
  40094e:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
  400952:	4b36      	ldr	r3, [pc, #216]	; (400a2c <SystemCoreClockUpdate+0x100>)
  400954:	601a      	str	r2, [r3, #0]
  400956:	e04d      	b.n	4009f4 <SystemCoreClockUpdate+0xc8>
			}
		break;
		
	case PMC_MCKR_CSS_MAIN_CLK: /* Main clock */
		if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL ) {
  400958:	4b32      	ldr	r3, [pc, #200]	; (400a24 <SystemCoreClockUpdate+0xf8>)
  40095a:	6a1b      	ldr	r3, [r3, #32]
  40095c:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  400960:	d003      	beq.n	40096a <SystemCoreClockUpdate+0x3e>
			SystemCoreClock = CHIP_FREQ_XTAL;
  400962:	4a33      	ldr	r2, [pc, #204]	; (400a30 <SystemCoreClockUpdate+0x104>)
  400964:	4b31      	ldr	r3, [pc, #196]	; (400a2c <SystemCoreClockUpdate+0x100>)
  400966:	601a      	str	r2, [r3, #0]
  400968:	e044      	b.n	4009f4 <SystemCoreClockUpdate+0xc8>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  40096a:	4a32      	ldr	r2, [pc, #200]	; (400a34 <SystemCoreClockUpdate+0x108>)
  40096c:	4b2f      	ldr	r3, [pc, #188]	; (400a2c <SystemCoreClockUpdate+0x100>)
  40096e:	601a      	str	r2, [r3, #0]
			
			switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk ) {
  400970:	4b2c      	ldr	r3, [pc, #176]	; (400a24 <SystemCoreClockUpdate+0xf8>)
  400972:	6a1b      	ldr	r3, [r3, #32]
  400974:	f003 0370 	and.w	r3, r3, #112	; 0x70
  400978:	2b10      	cmp	r3, #16
  40097a:	d002      	beq.n	400982 <SystemCoreClockUpdate+0x56>
  40097c:	2b20      	cmp	r3, #32
  40097e:	d004      	beq.n	40098a <SystemCoreClockUpdate+0x5e>
  400980:	e038      	b.n	4009f4 <SystemCoreClockUpdate+0xc8>
			case CKGR_MOR_MOSCRCF_4_MHz:
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
			break;
			
			case CKGR_MOR_MOSCRCF_8_MHz:
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_8MHZ;
  400982:	4a2d      	ldr	r2, [pc, #180]	; (400a38 <SystemCoreClockUpdate+0x10c>)
  400984:	4b29      	ldr	r3, [pc, #164]	; (400a2c <SystemCoreClockUpdate+0x100>)
  400986:	601a      	str	r2, [r3, #0]
			break;
  400988:	e034      	b.n	4009f4 <SystemCoreClockUpdate+0xc8>
			
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_12MHZ;
  40098a:	4a29      	ldr	r2, [pc, #164]	; (400a30 <SystemCoreClockUpdate+0x104>)
  40098c:	4b27      	ldr	r3, [pc, #156]	; (400a2c <SystemCoreClockUpdate+0x100>)
  40098e:	601a      	str	r2, [r3, #0]
			break;
  400990:	e030      	b.n	4009f4 <SystemCoreClockUpdate+0xc8>
		}
		break;
		
	case PMC_MCKR_CSS_PLLA_CLK:	/* PLLA clock */
	case PMC_MCKR_CSS_PLLB_CLK:	/* PLLB clock */
			if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL ) {
  400992:	4b24      	ldr	r3, [pc, #144]	; (400a24 <SystemCoreClockUpdate+0xf8>)
  400994:	6a1b      	ldr	r3, [r3, #32]
  400996:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  40099a:	d003      	beq.n	4009a4 <SystemCoreClockUpdate+0x78>
				SystemCoreClock = CHIP_FREQ_XTAL;
  40099c:	4a24      	ldr	r2, [pc, #144]	; (400a30 <SystemCoreClockUpdate+0x104>)
  40099e:	4b23      	ldr	r3, [pc, #140]	; (400a2c <SystemCoreClockUpdate+0x100>)
  4009a0:	601a      	str	r2, [r3, #0]
  4009a2:	e012      	b.n	4009ca <SystemCoreClockUpdate+0x9e>
			} else {
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  4009a4:	4a23      	ldr	r2, [pc, #140]	; (400a34 <SystemCoreClockUpdate+0x108>)
  4009a6:	4b21      	ldr	r3, [pc, #132]	; (400a2c <SystemCoreClockUpdate+0x100>)
  4009a8:	601a      	str	r2, [r3, #0]
				
				switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk ) {
  4009aa:	4b1e      	ldr	r3, [pc, #120]	; (400a24 <SystemCoreClockUpdate+0xf8>)
  4009ac:	6a1b      	ldr	r3, [r3, #32]
  4009ae:	f003 0370 	and.w	r3, r3, #112	; 0x70
  4009b2:	2b10      	cmp	r3, #16
  4009b4:	d002      	beq.n	4009bc <SystemCoreClockUpdate+0x90>
  4009b6:	2b20      	cmp	r3, #32
  4009b8:	d004      	beq.n	4009c4 <SystemCoreClockUpdate+0x98>
  4009ba:	e006      	b.n	4009ca <SystemCoreClockUpdate+0x9e>
				case CKGR_MOR_MOSCRCF_4_MHz:
					SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
					break;
				
				case CKGR_MOR_MOSCRCF_8_MHz:
					SystemCoreClock = CHIP_FREQ_MAINCK_RC_8MHZ;
  4009bc:	4a1e      	ldr	r2, [pc, #120]	; (400a38 <SystemCoreClockUpdate+0x10c>)
  4009be:	4b1b      	ldr	r3, [pc, #108]	; (400a2c <SystemCoreClockUpdate+0x100>)
  4009c0:	601a      	str	r2, [r3, #0]
					break;
  4009c2:	e002      	b.n	4009ca <SystemCoreClockUpdate+0x9e>
				
				case CKGR_MOR_MOSCRCF_12_MHz:
					SystemCoreClock = CHIP_FREQ_MAINCK_RC_12MHZ;
  4009c4:	4a1a      	ldr	r2, [pc, #104]	; (400a30 <SystemCoreClockUpdate+0x104>)
  4009c6:	4b19      	ldr	r3, [pc, #100]	; (400a2c <SystemCoreClockUpdate+0x100>)
  4009c8:	601a      	str	r2, [r3, #0]
				default:
					break;
				}
			}
			
			if ( (uint32_t)(PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) ==
  4009ca:	4b16      	ldr	r3, [pc, #88]	; (400a24 <SystemCoreClockUpdate+0xf8>)
  4009cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4009ce:	f003 0303 	and.w	r3, r3, #3
  4009d2:	2b02      	cmp	r3, #2
					PMC_MCKR_CSS_PLLA_CLK ) {
				SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk)
  4009d4:	4a13      	ldr	r2, [pc, #76]	; (400a24 <SystemCoreClockUpdate+0xf8>)
  4009d6:	bf07      	ittee	eq
  4009d8:	6a93      	ldreq	r3, [r2, #40]	; 0x28
						>> CKGR_PLLAR_MULA_Pos) + 1U);
				SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk)
  4009da:	6a92      	ldreq	r2, [r2, #40]	; 0x28
						>> CKGR_PLLAR_DIVA_Pos));
			} else {
				SystemCoreClock *= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_MULB_Msk)
  4009dc:	6ad3      	ldrne	r3, [r2, #44]	; 0x2c
						>> CKGR_PLLBR_MULB_Pos) + 1U);
				SystemCoreClock /= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_DIVB_Msk)
  4009de:	6ad2      	ldrne	r2, [r2, #44]	; 0x2c
  4009e0:	4812      	ldr	r0, [pc, #72]	; (400a2c <SystemCoreClockUpdate+0x100>)
						>> CKGR_PLLAR_MULA_Pos) + 1U);
				SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk)
						>> CKGR_PLLAR_DIVA_Pos));
			} else {
				SystemCoreClock *= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_MULB_Msk)
						>> CKGR_PLLBR_MULB_Pos) + 1U);
  4009e2:	f3c3 410a 	ubfx	r1, r3, #16, #11
				SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk)
						>> CKGR_PLLAR_MULA_Pos) + 1U);
				SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk)
						>> CKGR_PLLAR_DIVA_Pos));
			} else {
				SystemCoreClock *= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_MULB_Msk)
  4009e6:	6803      	ldr	r3, [r0, #0]
  4009e8:	fb01 3303 	mla	r3, r1, r3, r3
						>> CKGR_PLLBR_MULB_Pos) + 1U);
				SystemCoreClock /= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_DIVB_Msk)
						>> CKGR_PLLBR_DIVB_Pos));
  4009ec:	b2d2      	uxtb	r2, r2
				SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk)
						>> CKGR_PLLAR_DIVA_Pos));
			} else {
				SystemCoreClock *= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_MULB_Msk)
						>> CKGR_PLLBR_MULB_Pos) + 1U);
				SystemCoreClock /= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_DIVB_Msk)
  4009ee:	fbb3 f3f2 	udiv	r3, r3, r2
  4009f2:	6003      	str	r3, [r0, #0]
		
	default:
		break;
	}

	if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 ) {
  4009f4:	4b0b      	ldr	r3, [pc, #44]	; (400a24 <SystemCoreClockUpdate+0xf8>)
  4009f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4009f8:	f003 0370 	and.w	r3, r3, #112	; 0x70
  4009fc:	2b70      	cmp	r3, #112	; 0x70
  4009fe:	d107      	bne.n	400a10 <SystemCoreClockUpdate+0xe4>
		SystemCoreClock /= 3U;
  400a00:	4a0a      	ldr	r2, [pc, #40]	; (400a2c <SystemCoreClockUpdate+0x100>)
  400a02:	6813      	ldr	r3, [r2, #0]
  400a04:	490d      	ldr	r1, [pc, #52]	; (400a3c <SystemCoreClockUpdate+0x110>)
  400a06:	fba1 1303 	umull	r1, r3, r1, r3
  400a0a:	085b      	lsrs	r3, r3, #1
  400a0c:	6013      	str	r3, [r2, #0]
  400a0e:	4770      	bx	lr
	} else {
		SystemCoreClock >>=
			((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  400a10:	4b04      	ldr	r3, [pc, #16]	; (400a24 <SystemCoreClockUpdate+0xf8>)
  400a12:	6b1a      	ldr	r2, [r3, #48]	; 0x30
	}

	if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 ) {
		SystemCoreClock /= 3U;
	} else {
		SystemCoreClock >>=
  400a14:	4905      	ldr	r1, [pc, #20]	; (400a2c <SystemCoreClockUpdate+0x100>)
			((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  400a16:	f3c2 1202 	ubfx	r2, r2, #4, #3
	}

	if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 ) {
		SystemCoreClock /= 3U;
	} else {
		SystemCoreClock >>=
  400a1a:	680b      	ldr	r3, [r1, #0]
  400a1c:	40d3      	lsrs	r3, r2
  400a1e:	600b      	str	r3, [r1, #0]
  400a20:	4770      	bx	lr
  400a22:	bf00      	nop
  400a24:	400e0400 	.word	0x400e0400
  400a28:	400e1410 	.word	0x400e1410
  400a2c:	20000000 	.word	0x20000000
  400a30:	00b71b00 	.word	0x00b71b00
  400a34:	003d0900 	.word	0x003d0900
  400a38:	007a1200 	.word	0x007a1200
  400a3c:	aaaaaaab 	.word	0xaaaaaaab

00400a40 <system_init_flash>:
				}
			}
		}
	}
#else
	if ( ul_clk < CHIP_FREQ_FWS_0 ) {
  400a40:	4b1a      	ldr	r3, [pc, #104]	; (400aac <system_init_flash+0x6c>)
  400a42:	4298      	cmp	r0, r3
  400a44:	d807      	bhi.n	400a56 <system_init_flash+0x16>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  400a46:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  400a4a:	4a19      	ldr	r2, [pc, #100]	; (400ab0 <system_init_flash+0x70>)
  400a4c:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  400a4e:	f502 7200 	add.w	r2, r2, #512	; 0x200
  400a52:	6013      	str	r3, [r2, #0]
  400a54:	4770      	bx	lr
	} else {
		if ( ul_clk < CHIP_FREQ_FWS_1 ) {
  400a56:	4b17      	ldr	r3, [pc, #92]	; (400ab4 <system_init_flash+0x74>)
  400a58:	4298      	cmp	r0, r3
  400a5a:	d806      	bhi.n	400a6a <system_init_flash+0x2a>
			EFC0->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  400a5c:	4b16      	ldr	r3, [pc, #88]	; (400ab8 <system_init_flash+0x78>)
  400a5e:	4a14      	ldr	r2, [pc, #80]	; (400ab0 <system_init_flash+0x70>)
  400a60:	6013      	str	r3, [r2, #0]
			EFC1->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  400a62:	f502 7200 	add.w	r2, r2, #512	; 0x200
  400a66:	6013      	str	r3, [r2, #0]
  400a68:	4770      	bx	lr
		} else {
			if ( ul_clk < CHIP_FREQ_FWS_2 ) {
  400a6a:	4b14      	ldr	r3, [pc, #80]	; (400abc <system_init_flash+0x7c>)
  400a6c:	4298      	cmp	r0, r3
  400a6e:	d806      	bhi.n	400a7e <system_init_flash+0x3e>
				EFC0->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  400a70:	4b13      	ldr	r3, [pc, #76]	; (400ac0 <system_init_flash+0x80>)
  400a72:	4a0f      	ldr	r2, [pc, #60]	; (400ab0 <system_init_flash+0x70>)
  400a74:	6013      	str	r3, [r2, #0]
				EFC1->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  400a76:	f502 7200 	add.w	r2, r2, #512	; 0x200
  400a7a:	6013      	str	r3, [r2, #0]
  400a7c:	4770      	bx	lr
			} else {
				if ( ul_clk < CHIP_FREQ_FWS_3 ) {
  400a7e:	4b11      	ldr	r3, [pc, #68]	; (400ac4 <system_init_flash+0x84>)
  400a80:	4298      	cmp	r0, r3
  400a82:	d806      	bhi.n	400a92 <system_init_flash+0x52>
					EFC0->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  400a84:	4b10      	ldr	r3, [pc, #64]	; (400ac8 <system_init_flash+0x88>)
  400a86:	4a0a      	ldr	r2, [pc, #40]	; (400ab0 <system_init_flash+0x70>)
  400a88:	6013      	str	r3, [r2, #0]
					EFC1->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  400a8a:	f502 7200 	add.w	r2, r2, #512	; 0x200
  400a8e:	6013      	str	r3, [r2, #0]
  400a90:	4770      	bx	lr
				} else {
					if ( ul_clk < CHIP_FREQ_FWS_4 ) {
  400a92:	4b0e      	ldr	r3, [pc, #56]	; (400acc <system_init_flash+0x8c>)
  400a94:	4298      	cmp	r0, r3
						EFC0->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
  400a96:	bf94      	ite	ls
  400a98:	f04f 2304 	movls.w	r3, #67109888	; 0x4000400
						EFC1->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
					} else {
						EFC0->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  400a9c:	4b0c      	ldrhi	r3, [pc, #48]	; (400ad0 <system_init_flash+0x90>)
  400a9e:	4a04      	ldr	r2, [pc, #16]	; (400ab0 <system_init_flash+0x70>)
  400aa0:	6013      	str	r3, [r2, #0]
						EFC1->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  400aa2:	f502 7200 	add.w	r2, r2, #512	; 0x200
  400aa6:	6013      	str	r3, [r2, #0]
  400aa8:	4770      	bx	lr
  400aaa:	bf00      	nop
  400aac:	01312cff 	.word	0x01312cff
  400ab0:	400e0a00 	.word	0x400e0a00
  400ab4:	026259ff 	.word	0x026259ff
  400ab8:	04000100 	.word	0x04000100
  400abc:	039386ff 	.word	0x039386ff
  400ac0:	04000200 	.word	0x04000200
  400ac4:	04c4b3ff 	.word	0x04c4b3ff
  400ac8:	04000300 	.word	0x04000300
  400acc:	05f5e0ff 	.word	0x05f5e0ff
  400ad0:	04000500 	.word	0x04000500

00400ad4 <_sbrk>:
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;

	if (heap == NULL) {
  400ad4:	4b09      	ldr	r3, [pc, #36]	; (400afc <_sbrk+0x28>)
  400ad6:	681b      	ldr	r3, [r3, #0]
  400ad8:	b913      	cbnz	r3, 400ae0 <_sbrk+0xc>
		heap = (unsigned char *)&_end;
  400ada:	4a09      	ldr	r2, [pc, #36]	; (400b00 <_sbrk+0x2c>)
  400adc:	4b07      	ldr	r3, [pc, #28]	; (400afc <_sbrk+0x28>)
  400ade:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
  400ae0:	4b06      	ldr	r3, [pc, #24]	; (400afc <_sbrk+0x28>)
  400ae2:	681b      	ldr	r3, [r3, #0]

	if (((int)prev_heap + incr) > ramend) {
  400ae4:	181a      	adds	r2, r3, r0
  400ae6:	4907      	ldr	r1, [pc, #28]	; (400b04 <_sbrk+0x30>)
  400ae8:	4291      	cmp	r1, r2
  400aea:	db04      	blt.n	400af6 <_sbrk+0x22>
		return (caddr_t) -1;	
	}

	heap += incr;
  400aec:	4610      	mov	r0, r2
  400aee:	4a03      	ldr	r2, [pc, #12]	; (400afc <_sbrk+0x28>)
  400af0:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap;
  400af2:	4618      	mov	r0, r3
  400af4:	4770      	bx	lr
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;

	if (((int)prev_heap + incr) > ramend) {
		return (caddr_t) -1;	
  400af6:	f04f 30ff 	mov.w	r0, #4294967295
	}

	heap += incr;

	return (caddr_t) prev_heap;
}
  400afa:	4770      	bx	lr
  400afc:	200008fc 	.word	0x200008fc
  400b00:	20003958 	.word	0x20003958
  400b04:	20027ffc 	.word	0x20027ffc

00400b08 <_close>:
}

extern int _close(int file)
{
	return -1;
}
  400b08:	f04f 30ff 	mov.w	r0, #4294967295
  400b0c:	4770      	bx	lr
  400b0e:	bf00      	nop

00400b10 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
  400b10:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  400b14:	604b      	str	r3, [r1, #4]

	return 0;
}
  400b16:	2000      	movs	r0, #0
  400b18:	4770      	bx	lr
  400b1a:	bf00      	nop

00400b1c <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
  400b1c:	2001      	movs	r0, #1
  400b1e:	4770      	bx	lr

00400b20 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
  400b20:	2000      	movs	r0, #0
  400b22:	4770      	bx	lr

00400b24 <usart_serial_getchar>:
 * \param p_usart   Base address of the USART instance.
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if p_usart, uint8_t *data)
{
  400b24:	b5f0      	push	{r4, r5, r6, r7, lr}
  400b26:	b083      	sub	sp, #12
  400b28:	4605      	mov	r5, r0
  400b2a:	460c      	mov	r4, r1
	uint32_t val = 0;
  400b2c:	2300      	movs	r3, #0
  400b2e:	9301      	str	r3, [sp, #4]
	if (UART == (Uart*)p_usart) {
		while (uart_read((Uart*)p_usart, data));
	}
#else
# ifdef UART0
	if (UART0 == (Uart*)p_usart) {
  400b30:	4b18      	ldr	r3, [pc, #96]	; (400b94 <usart_serial_getchar+0x70>)
  400b32:	4298      	cmp	r0, r3
  400b34:	d107      	bne.n	400b46 <usart_serial_getchar+0x22>
		while (uart_read((Uart*)p_usart, data));
  400b36:	461f      	mov	r7, r3
  400b38:	4e17      	ldr	r6, [pc, #92]	; (400b98 <usart_serial_getchar+0x74>)
  400b3a:	4638      	mov	r0, r7
  400b3c:	4621      	mov	r1, r4
  400b3e:	47b0      	blx	r6
  400b40:	2800      	cmp	r0, #0
  400b42:	d1fa      	bne.n	400b3a <usart_serial_getchar+0x16>
  400b44:	e017      	b.n	400b76 <usart_serial_getchar+0x52>
	}
# endif
# ifdef UART1
	if (UART1 == (Uart*)p_usart) {
  400b46:	4b15      	ldr	r3, [pc, #84]	; (400b9c <usart_serial_getchar+0x78>)
  400b48:	4298      	cmp	r0, r3
  400b4a:	d107      	bne.n	400b5c <usart_serial_getchar+0x38>
		while (uart_read((Uart*)p_usart, data));
  400b4c:	461e      	mov	r6, r3
  400b4e:	4d12      	ldr	r5, [pc, #72]	; (400b98 <usart_serial_getchar+0x74>)
  400b50:	4630      	mov	r0, r6
  400b52:	4621      	mov	r1, r4
  400b54:	47a8      	blx	r5
  400b56:	2800      	cmp	r0, #0
  400b58:	d1fa      	bne.n	400b50 <usart_serial_getchar+0x2c>
  400b5a:	e018      	b.n	400b8e <usart_serial_getchar+0x6a>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
  400b5c:	4b10      	ldr	r3, [pc, #64]	; (400ba0 <usart_serial_getchar+0x7c>)
  400b5e:	4298      	cmp	r0, r3
  400b60:	d109      	bne.n	400b76 <usart_serial_getchar+0x52>
		while (usart_read(p_usart, &val));
  400b62:	461e      	mov	r6, r3
  400b64:	4d0f      	ldr	r5, [pc, #60]	; (400ba4 <usart_serial_getchar+0x80>)
  400b66:	4630      	mov	r0, r6
  400b68:	a901      	add	r1, sp, #4
  400b6a:	47a8      	blx	r5
  400b6c:	2800      	cmp	r0, #0
  400b6e:	d1fa      	bne.n	400b66 <usart_serial_getchar+0x42>
		*data = (uint8_t)(val & 0xFF);
  400b70:	9b01      	ldr	r3, [sp, #4]
  400b72:	7023      	strb	r3, [r4, #0]
  400b74:	e00b      	b.n	400b8e <usart_serial_getchar+0x6a>
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
  400b76:	4b0c      	ldr	r3, [pc, #48]	; (400ba8 <usart_serial_getchar+0x84>)
  400b78:	429d      	cmp	r5, r3
  400b7a:	d108      	bne.n	400b8e <usart_serial_getchar+0x6a>
		while (usart_read(p_usart, &val));
  400b7c:	461e      	mov	r6, r3
  400b7e:	4d09      	ldr	r5, [pc, #36]	; (400ba4 <usart_serial_getchar+0x80>)
  400b80:	4630      	mov	r0, r6
  400b82:	a901      	add	r1, sp, #4
  400b84:	47a8      	blx	r5
  400b86:	2800      	cmp	r0, #0
  400b88:	d1fa      	bne.n	400b80 <usart_serial_getchar+0x5c>
		*data = (uint8_t)(val & 0xFF);
  400b8a:	9b01      	ldr	r3, [sp, #4]
  400b8c:	7023      	strb	r3, [r4, #0]
		*data = (uint8_t)(val & 0xFF);
	}
# endif
#endif /* ifdef USART */

}
  400b8e:	b003      	add	sp, #12
  400b90:	bdf0      	pop	{r4, r5, r6, r7, pc}
  400b92:	bf00      	nop
  400b94:	400e0600 	.word	0x400e0600
  400b98:	00400839 	.word	0x00400839
  400b9c:	400e0800 	.word	0x400e0800
  400ba0:	40024000 	.word	0x40024000
  400ba4:	00400861 	.word	0x00400861
  400ba8:	40028000 	.word	0x40028000

00400bac <usart_serial_putchar>:
 *   \retval 1  The character was written.
 *   \retval 0  The function timed out before the USART transmitter became
 * ready to send.
 */
static inline int usart_serial_putchar(usart_if p_usart, const uint8_t c)
{
  400bac:	b570      	push	{r4, r5, r6, lr}
  400bae:	460c      	mov	r4, r1
		while (uart_write((Uart*)p_usart, c)!=0);
		return 1;
	}
#else
# ifdef UART0
	if (UART0 == (Uart*)p_usart) {
  400bb0:	4b18      	ldr	r3, [pc, #96]	; (400c14 <usart_serial_putchar+0x68>)
  400bb2:	4298      	cmp	r0, r3
  400bb4:	d108      	bne.n	400bc8 <usart_serial_putchar+0x1c>
		while (uart_write((Uart*)p_usart, c)!=0);
  400bb6:	461e      	mov	r6, r3
  400bb8:	4d17      	ldr	r5, [pc, #92]	; (400c18 <usart_serial_putchar+0x6c>)
  400bba:	4630      	mov	r0, r6
  400bbc:	4621      	mov	r1, r4
  400bbe:	47a8      	blx	r5
  400bc0:	2800      	cmp	r0, #0
  400bc2:	d1fa      	bne.n	400bba <usart_serial_putchar+0xe>
		return 1;
  400bc4:	2001      	movs	r0, #1
  400bc6:	bd70      	pop	{r4, r5, r6, pc}
	}
# endif
# ifdef UART1
	if (UART1 == (Uart*)p_usart) {
  400bc8:	4b14      	ldr	r3, [pc, #80]	; (400c1c <usart_serial_putchar+0x70>)
  400bca:	4298      	cmp	r0, r3
  400bcc:	d108      	bne.n	400be0 <usart_serial_putchar+0x34>
		while (uart_write((Uart*)p_usart, c)!=0);
  400bce:	461e      	mov	r6, r3
  400bd0:	4d11      	ldr	r5, [pc, #68]	; (400c18 <usart_serial_putchar+0x6c>)
  400bd2:	4630      	mov	r0, r6
  400bd4:	4621      	mov	r1, r4
  400bd6:	47a8      	blx	r5
  400bd8:	2800      	cmp	r0, #0
  400bda:	d1fa      	bne.n	400bd2 <usart_serial_putchar+0x26>
		return 1;
  400bdc:	2001      	movs	r0, #1
  400bde:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
		return 1;
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
  400be0:	4b0f      	ldr	r3, [pc, #60]	; (400c20 <usart_serial_putchar+0x74>)
  400be2:	4298      	cmp	r0, r3
  400be4:	d108      	bne.n	400bf8 <usart_serial_putchar+0x4c>
		while (usart_write(p_usart, c)!=0);
  400be6:	461e      	mov	r6, r3
  400be8:	4d0e      	ldr	r5, [pc, #56]	; (400c24 <usart_serial_putchar+0x78>)
  400bea:	4630      	mov	r0, r6
  400bec:	4621      	mov	r1, r4
  400bee:	47a8      	blx	r5
  400bf0:	2800      	cmp	r0, #0
  400bf2:	d1fa      	bne.n	400bea <usart_serial_putchar+0x3e>
		return 1;
  400bf4:	2001      	movs	r0, #1
  400bf6:	bd70      	pop	{r4, r5, r6, pc}
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
  400bf8:	4b0b      	ldr	r3, [pc, #44]	; (400c28 <usart_serial_putchar+0x7c>)
  400bfa:	4298      	cmp	r0, r3
  400bfc:	d108      	bne.n	400c10 <usart_serial_putchar+0x64>
		while (usart_write(p_usart, c)!=0);
  400bfe:	461e      	mov	r6, r3
  400c00:	4d08      	ldr	r5, [pc, #32]	; (400c24 <usart_serial_putchar+0x78>)
  400c02:	4630      	mov	r0, r6
  400c04:	4621      	mov	r1, r4
  400c06:	47a8      	blx	r5
  400c08:	2800      	cmp	r0, #0
  400c0a:	d1fa      	bne.n	400c02 <usart_serial_putchar+0x56>
		return 1;
  400c0c:	2001      	movs	r0, #1
  400c0e:	bd70      	pop	{r4, r5, r6, pc}
		return 1;
	}
# endif
#endif /* ifdef USART */

	return 0;
  400c10:	2000      	movs	r0, #0
}
  400c12:	bd70      	pop	{r4, r5, r6, pc}
  400c14:	400e0600 	.word	0x400e0600
  400c18:	00400829 	.word	0x00400829
  400c1c:	400e0800 	.word	0x400e0800
  400c20:	40024000 	.word	0x40024000
  400c24:	0040084d 	.word	0x0040084d
  400c28:	40028000 	.word	0x40028000

00400c2c <SysTick_Handler>:

/**
 * \brief SysTick IRQ handler.
 */
void SysTick_Handler(void)
{
  400c2c:	b510      	push	{r4, lr}
	uint32_t status;
	uint32_t dac_val;
	
	status = dacc_get_interrupt_status(DACC_BASE);
  400c2e:	4816      	ldr	r0, [pc, #88]	; (400c88 <SysTick_Handler+0x5c>)
  400c30:	4b16      	ldr	r3, [pc, #88]	; (400c8c <SysTick_Handler+0x60>)
  400c32:	4798      	blx	r3

	if ((status & DACC_ISR_TXRDY) == DACC_ISR_TXRDY) {
  400c34:	f010 0f01 	tst.w	r0, #1
  400c38:	d025      	beq.n	400c86 <SysTick_Handler+0x5a>
		g_ul_index_sample++;
  400c3a:	4a15      	ldr	r2, [pc, #84]	; (400c90 <SysTick_Handler+0x64>)
  400c3c:	6813      	ldr	r3, [r2, #0]
  400c3e:	3301      	adds	r3, #1
  400c40:	6013      	str	r3, [r2, #0]

		if (g_ul_index_sample >= VOICESAMPLES) {
  400c42:	f640 322b 	movw	r2, #2859	; 0xb2b
  400c46:	4293      	cmp	r3, r2
  400c48:	d90b      	bls.n	400c62 <SysTick_Handler+0x36>
			g_ul_index_sample = 0;
  400c4a:	2300      	movs	r3, #0
  400c4c:	4a10      	ldr	r2, [pc, #64]	; (400c90 <SysTick_Handler+0x64>)
  400c4e:	6013      	str	r3, [r2, #0]
			g_once = 0;
  400c50:	4a10      	ldr	r2, [pc, #64]	; (400c94 <SysTick_Handler+0x68>)
  400c52:	6013      	str	r3, [r2, #0]
		}
				
		/*	Convert 16bit signed integer to 12bit unsigned -> ((uint16_t)(audsample + 32768))>>4;	*/
		dac_val = (gc_us_sine_data[g_ul_index_sample] + 0x8000) >> 4;
  400c54:	4a10      	ldr	r2, [pc, #64]	; (400c98 <SysTick_Handler+0x6c>)
  400c56:	f932 4013 	ldrsh.w	r4, [r2, r3, lsl #1]
  400c5a:	f504 4400 	add.w	r4, r4, #32768	; 0x8000
  400c5e:	1124      	asrs	r4, r4, #4
  400c60:	e00d      	b.n	400c7e <SysTick_Handler+0x52>
  400c62:	4a0d      	ldr	r2, [pc, #52]	; (400c98 <SysTick_Handler+0x6c>)
  400c64:	f932 1013 	ldrsh.w	r1, [r2, r3, lsl #1]
  400c68:	f501 4400 	add.w	r4, r1, #32768	; 0x8000
  400c6c:	1124      	asrs	r4, r4, #4
		
		/*	Print converted data for debug	*/
		if (g_once == 1){
  400c6e:	4b09      	ldr	r3, [pc, #36]	; (400c94 <SysTick_Handler+0x68>)
  400c70:	681b      	ldr	r3, [r3, #0]
  400c72:	2b01      	cmp	r3, #1
  400c74:	d103      	bne.n	400c7e <SysTick_Handler+0x52>
			printf("%i = %i\r\n", gc_us_sine_data[g_ul_index_sample], dac_val );
  400c76:	4809      	ldr	r0, [pc, #36]	; (400c9c <SysTick_Handler+0x70>)
  400c78:	4622      	mov	r2, r4
  400c7a:	4b09      	ldr	r3, [pc, #36]	; (400ca0 <SysTick_Handler+0x74>)
  400c7c:	4798      	blx	r3
		}		

		//***** 5. Write conversion data with dacc_write_conversion_data().
		dacc_write_conversion_data(DACC_BASE, dac_val);
  400c7e:	4802      	ldr	r0, [pc, #8]	; (400c88 <SysTick_Handler+0x5c>)
  400c80:	4621      	mov	r1, r4
  400c82:	4b08      	ldr	r3, [pc, #32]	; (400ca4 <SysTick_Handler+0x78>)
  400c84:	4798      	blx	r3
  400c86:	bd10      	pop	{r4, pc}
  400c88:	4003c000 	.word	0x4003c000
  400c8c:	004002a9 	.word	0x004002a9
  400c90:	20000904 	.word	0x20000904
  400c94:	20000004 	.word	0x20000004
  400c98:	00403e1c 	.word	0x00403e1c
  400c9c:	00405474 	.word	0x00405474
  400ca0:	00400e45 	.word	0x00400e45
  400ca4:	004002ad 	.word	0x004002ad

00400ca8 <main>:
 *  \brief DAC Sinewave application entry point.
 *
 *  \return Unused (ANSI-C compatibility).
 */
int main(void)
{
  400ca8:	b580      	push	{r7, lr}
  400caa:	b084      	sub	sp, #16
	uint8_t uc_key;
	uint32_t ul_freq, ul_amp;

	/* Initialize the system */
	sysclk_init();
  400cac:	4b33      	ldr	r3, [pc, #204]	; (400d7c <main+0xd4>)
  400cae:	4798      	blx	r3
	board_init();
  400cb0:	4b33      	ldr	r3, [pc, #204]	; (400d80 <main+0xd8>)
  400cb2:	4798      	blx	r3
  400cb4:	2008      	movs	r0, #8
  400cb6:	4c33      	ldr	r4, [pc, #204]	; (400d84 <main+0xdc>)
  400cb8:	47a0      	blx	r4
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
	stdio_base = (void *)usart;
  400cba:	4d33      	ldr	r5, [pc, #204]	; (400d88 <main+0xe0>)
  400cbc:	4b33      	ldr	r3, [pc, #204]	; (400d8c <main+0xe4>)
  400cbe:	601d      	str	r5, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
  400cc0:	4a33      	ldr	r2, [pc, #204]	; (400d90 <main+0xe8>)
  400cc2:	4b34      	ldr	r3, [pc, #208]	; (400d94 <main+0xec>)
  400cc4:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
  400cc6:	4a34      	ldr	r2, [pc, #208]	; (400d98 <main+0xf0>)
  400cc8:	4b34      	ldr	r3, [pc, #208]	; (400d9c <main+0xf4>)
  400cca:	601a      	str	r2, [r3, #0]
static inline void usart_serial_init(usart_if p_usart,
		usart_serial_options_t *opt)
{
#if ((!SAM4L) && (!SAMG55))
	sam_uart_opt_t uart_settings;
	uart_settings.ul_mck = sysclk_get_peripheral_hz();
  400ccc:	4b34      	ldr	r3, [pc, #208]	; (400da0 <main+0xf8>)
  400cce:	9301      	str	r3, [sp, #4]
	uart_settings.ul_baudrate = opt->baudrate;
  400cd0:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
  400cd4:	9302      	str	r3, [sp, #8]
	uart_settings.ul_mode = opt->paritytype;
  400cd6:	f44f 6300 	mov.w	r3, #2048	; 0x800
  400cda:	9303      	str	r3, [sp, #12]
  400cdc:	2009      	movs	r0, #9
  400cde:	47a0      	blx	r4
# endif
# ifdef UART1
	if (UART1 == (Uart*)p_usart) {
		sysclk_enable_peripheral_clock(ID_UART1);
		/* Configure UART */
		uart_init((Uart*)p_usart, &uart_settings);
  400ce0:	4628      	mov	r0, r5
  400ce2:	a901      	add	r1, sp, #4
  400ce4:	4b2f      	ldr	r3, [pc, #188]	; (400da4 <main+0xfc>)
  400ce6:	4798      	blx	r3
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
#  endif
#  if UC3 || SAM
	// For AVR32 and SAM GCC
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
  400ce8:	4e2f      	ldr	r6, [pc, #188]	; (400da8 <main+0x100>)
  400cea:	6833      	ldr	r3, [r6, #0]
  400cec:	6898      	ldr	r0, [r3, #8]
  400cee:	2100      	movs	r1, #0
  400cf0:	4d2e      	ldr	r5, [pc, #184]	; (400dac <main+0x104>)
  400cf2:	47a8      	blx	r5
	setbuf(stdin, NULL);
  400cf4:	6833      	ldr	r3, [r6, #0]
  400cf6:	6858      	ldr	r0, [r3, #4]
  400cf8:	2100      	movs	r1, #0
  400cfa:	47a8      	blx	r5

	/* Initialize debug console */
	configure_console();

	/* Output example information */
	puts(STRING_HEADER);
  400cfc:	482c      	ldr	r0, [pc, #176]	; (400db0 <main+0x108>)
  400cfe:	4e2d      	ldr	r6, [pc, #180]	; (400db4 <main+0x10c>)
  400d00:	47b0      	blx	r6
	printf("\r\n");
  400d02:	4f2d      	ldr	r7, [pc, #180]	; (400db8 <main+0x110>)
  400d04:	4638      	mov	r0, r7
  400d06:	4d2d      	ldr	r5, [pc, #180]	; (400dbc <main+0x114>)
  400d08:	47a8      	blx	r5
  400d0a:	201e      	movs	r0, #30
  400d0c:	47a0      	blx	r4

	//***** 1. DACC clock should be enabled before using it.
	sysclk_enable_peripheral_clock(DACC_ID);

	//***** 2. Reset DACC registers
	dacc_reset(DACC_BASE);
  400d0e:	4c2c      	ldr	r4, [pc, #176]	; (400dc0 <main+0x118>)
  400d10:	4620      	mov	r0, r4
  400d12:	4b2c      	ldr	r3, [pc, #176]	; (400dc4 <main+0x11c>)
  400d14:	4798      	blx	r3
	//***** 6X. Configure trigger with dacc_set_trigger() and dacc_disable_trigger().
	//dacc_set_trigger(DACC_BASE, DACC_MR_TRGEN_EN | DACC_MR_TRGSEL(0));    /* Set trigger to TC0_0 on 8/16 kHz. Need to verify vaulue. */

	//***** 7. Initialize timing, amplitude and frequency */
	/* Half word transfer mode */
	dacc_set_transfer_mode(DACC_BASE, 0);
  400d16:	4620      	mov	r0, r4
  400d18:	2100      	movs	r1, #0
  400d1a:	4b2b      	ldr	r3, [pc, #172]	; (400dc8 <main+0x120>)
  400d1c:	4798      	blx	r3

	//***** 4. Initialize DACC timing with dacc_set_timing() (different DAC peripheral may require different parameters).
	dacc_set_timing(DACC_BASE, 0x08, 0, 0x10);
  400d1e:	4620      	mov	r0, r4
  400d20:	2108      	movs	r1, #8
  400d22:	2200      	movs	r2, #0
  400d24:	2310      	movs	r3, #16
  400d26:	f8df c0c8 	ldr.w	ip, [pc, #200]	; 400df0 <main+0x148>
  400d2a:	47e0      	blx	ip

	//***** 11a. Disable TAG and select output channel DACC_CHANNEL */
	dacc_set_channel_selection(DACC_BASE, DACC_CHANNEL);
  400d2c:	4620      	mov	r0, r4
  400d2e:	2101      	movs	r1, #1
  400d30:	4b26      	ldr	r3, [pc, #152]	; (400dcc <main+0x124>)
  400d32:	4798      	blx	r3

	//***** 11b. Enable output channel DACC_CHANNEL */
	dacc_enable_channel(DACC_BASE, DACC_CHANNEL);
  400d34:	4620      	mov	r0, r4
  400d36:	2101      	movs	r1, #1
  400d38:	4b25      	ldr	r3, [pc, #148]	; (400dd0 <main+0x128>)
  400d3a:	4798      	blx	r3

	/* Set up analog current */
	dacc_set_analog_control(DACC_BASE, DACC_ANALOG_CONTROL);
  400d3c:	4620      	mov	r0, r4
  400d3e:	f44f 7185 	mov.w	r1, #266	; 0x10a
  400d42:	4b24      	ldr	r3, [pc, #144]	; (400dd4 <main+0x12c>)
  400d44:	4798      	blx	r3

	g_l_amplitude = 4095;//MAX_AMPLITUDE / 2;
  400d46:	f640 72ff 	movw	r2, #4095	; 0xfff
  400d4a:	4b23      	ldr	r3, [pc, #140]	; (400dd8 <main+0x130>)
  400d4c:	601a      	str	r2, [r3, #0]
	g_ul_frequency = DEFAULT_FREQUENCY;
  400d4e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
  400d52:	4b22      	ldr	r3, [pc, #136]	; (400ddc <main+0x134>)
  400d54:	601a      	str	r2, [r3, #0]
	printf("raw data (int16) = dac data (uint12)\r\n");
  400d56:	4822      	ldr	r0, [pc, #136]	; (400de0 <main+0x138>)
  400d58:	47a8      	blx	r5
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1) > SysTick_LOAD_RELOAD_Msk)  return (1);      /* Reload value impossible */

  SysTick->LOAD  = ticks - 1;                                  /* set reload register */
  400d5a:	4b22      	ldr	r3, [pc, #136]	; (400de4 <main+0x13c>)
  400d5c:	f645 52bf 	movw	r2, #23999	; 0x5dbf
  400d60:	605a      	str	r2, [r3, #4]
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  400d62:	21f0      	movs	r1, #240	; 0xf0
  400d64:	4a20      	ldr	r2, [pc, #128]	; (400de8 <main+0x140>)
  400d66:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
{
  if ((ticks - 1) > SysTick_LOAD_RELOAD_Msk)  return (1);      /* Reload value impossible */

  SysTick->LOAD  = ticks - 1;                                  /* set reload register */
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
  400d6a:	2200      	movs	r2, #0
  400d6c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
  400d6e:	2207      	movs	r2, #7
  400d70:	601a      	str	r2, [r3, #0]
/**
 * \brief Display main menu.
 */
static void display_menu(void)
{
	printf("\r\n");
  400d72:	4638      	mov	r0, r7
  400d74:	47a8      	blx	r5
	puts("======== Started DAC output ========\r");
  400d76:	481d      	ldr	r0, [pc, #116]	; (400dec <main+0x144>)
  400d78:	47b0      	blx	r6

	/* Main menu */
	display_menu();

	while (1) {
	}
  400d7a:	e7fe      	b.n	400d7a <main+0xd2>
  400d7c:	00400129 	.word	0x00400129
  400d80:	00400219 	.word	0x00400219
  400d84:	0040079d 	.word	0x0040079d
  400d88:	400e0800 	.word	0x400e0800
  400d8c:	20000948 	.word	0x20000948
  400d90:	00400bad 	.word	0x00400bad
  400d94:	20000944 	.word	0x20000944
  400d98:	00400b25 	.word	0x00400b25
  400d9c:	20000940 	.word	0x20000940
  400da0:	07270e00 	.word	0x07270e00
  400da4:	004007f1 	.word	0x004007f1
  400da8:	20000430 	.word	0x20000430
  400dac:	00400f75 	.word	0x00400f75
  400db0:	00405480 	.word	0x00405480
  400db4:	00400f65 	.word	0x00400f65
  400db8:	004054f8 	.word	0x004054f8
  400dbc:	00400e45 	.word	0x00400e45
  400dc0:	4003c000 	.word	0x4003c000
  400dc4:	00400279 	.word	0x00400279
  400dc8:	00400281 	.word	0x00400281
  400dcc:	004002b1 	.word	0x004002b1
  400dd0:	004002f9 	.word	0x004002f9
  400dd4:	0040030d 	.word	0x0040030d
  400dd8:	20000900 	.word	0x20000900
  400ddc:	20000908 	.word	0x20000908
  400de0:	004054d4 	.word	0x004054d4
  400de4:	e000e010 	.word	0xe000e010
  400de8:	e000ed00 	.word	0xe000ed00
  400dec:	004054fc 	.word	0x004054fc
  400df0:	004002c9 	.word	0x004002c9

00400df4 <__libc_init_array>:
  400df4:	b570      	push	{r4, r5, r6, lr}
  400df6:	4e0f      	ldr	r6, [pc, #60]	; (400e34 <__libc_init_array+0x40>)
  400df8:	4d0f      	ldr	r5, [pc, #60]	; (400e38 <__libc_init_array+0x44>)
  400dfa:	1b76      	subs	r6, r6, r5
  400dfc:	10b6      	asrs	r6, r6, #2
  400dfe:	bf18      	it	ne
  400e00:	2400      	movne	r4, #0
  400e02:	d005      	beq.n	400e10 <__libc_init_array+0x1c>
  400e04:	3401      	adds	r4, #1
  400e06:	f855 3b04 	ldr.w	r3, [r5], #4
  400e0a:	4798      	blx	r3
  400e0c:	42a6      	cmp	r6, r4
  400e0e:	d1f9      	bne.n	400e04 <__libc_init_array+0x10>
  400e10:	4e0a      	ldr	r6, [pc, #40]	; (400e3c <__libc_init_array+0x48>)
  400e12:	4d0b      	ldr	r5, [pc, #44]	; (400e40 <__libc_init_array+0x4c>)
  400e14:	1b76      	subs	r6, r6, r5
  400e16:	f004 fbb1 	bl	40557c <_init>
  400e1a:	10b6      	asrs	r6, r6, #2
  400e1c:	bf18      	it	ne
  400e1e:	2400      	movne	r4, #0
  400e20:	d006      	beq.n	400e30 <__libc_init_array+0x3c>
  400e22:	3401      	adds	r4, #1
  400e24:	f855 3b04 	ldr.w	r3, [r5], #4
  400e28:	4798      	blx	r3
  400e2a:	42a6      	cmp	r6, r4
  400e2c:	d1f9      	bne.n	400e22 <__libc_init_array+0x2e>
  400e2e:	bd70      	pop	{r4, r5, r6, pc}
  400e30:	bd70      	pop	{r4, r5, r6, pc}
  400e32:	bf00      	nop
  400e34:	00405588 	.word	0x00405588
  400e38:	00405588 	.word	0x00405588
  400e3c:	00405590 	.word	0x00405590
  400e40:	00405588 	.word	0x00405588

00400e44 <iprintf>:
  400e44:	b40f      	push	{r0, r1, r2, r3}
  400e46:	b500      	push	{lr}
  400e48:	4907      	ldr	r1, [pc, #28]	; (400e68 <iprintf+0x24>)
  400e4a:	b083      	sub	sp, #12
  400e4c:	ab04      	add	r3, sp, #16
  400e4e:	6808      	ldr	r0, [r1, #0]
  400e50:	f853 2b04 	ldr.w	r2, [r3], #4
  400e54:	6881      	ldr	r1, [r0, #8]
  400e56:	9301      	str	r3, [sp, #4]
  400e58:	f000 f97a 	bl	401150 <_vfiprintf_r>
  400e5c:	b003      	add	sp, #12
  400e5e:	f85d eb04 	ldr.w	lr, [sp], #4
  400e62:	b004      	add	sp, #16
  400e64:	4770      	bx	lr
  400e66:	bf00      	nop
  400e68:	20000430 	.word	0x20000430

00400e6c <memset>:
  400e6c:	b470      	push	{r4, r5, r6}
  400e6e:	0784      	lsls	r4, r0, #30
  400e70:	d046      	beq.n	400f00 <memset+0x94>
  400e72:	1e54      	subs	r4, r2, #1
  400e74:	2a00      	cmp	r2, #0
  400e76:	d041      	beq.n	400efc <memset+0x90>
  400e78:	b2cd      	uxtb	r5, r1
  400e7a:	4603      	mov	r3, r0
  400e7c:	e002      	b.n	400e84 <memset+0x18>
  400e7e:	1e62      	subs	r2, r4, #1
  400e80:	b3e4      	cbz	r4, 400efc <memset+0x90>
  400e82:	4614      	mov	r4, r2
  400e84:	f803 5b01 	strb.w	r5, [r3], #1
  400e88:	079a      	lsls	r2, r3, #30
  400e8a:	d1f8      	bne.n	400e7e <memset+0x12>
  400e8c:	2c03      	cmp	r4, #3
  400e8e:	d92e      	bls.n	400eee <memset+0x82>
  400e90:	b2cd      	uxtb	r5, r1
  400e92:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
  400e96:	2c0f      	cmp	r4, #15
  400e98:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
  400e9c:	d919      	bls.n	400ed2 <memset+0x66>
  400e9e:	f103 0210 	add.w	r2, r3, #16
  400ea2:	4626      	mov	r6, r4
  400ea4:	3e10      	subs	r6, #16
  400ea6:	2e0f      	cmp	r6, #15
  400ea8:	f842 5c10 	str.w	r5, [r2, #-16]
  400eac:	f842 5c0c 	str.w	r5, [r2, #-12]
  400eb0:	f842 5c08 	str.w	r5, [r2, #-8]
  400eb4:	f842 5c04 	str.w	r5, [r2, #-4]
  400eb8:	f102 0210 	add.w	r2, r2, #16
  400ebc:	d8f2      	bhi.n	400ea4 <memset+0x38>
  400ebe:	f1a4 0210 	sub.w	r2, r4, #16
  400ec2:	f022 020f 	bic.w	r2, r2, #15
  400ec6:	f004 040f 	and.w	r4, r4, #15
  400eca:	3210      	adds	r2, #16
  400ecc:	2c03      	cmp	r4, #3
  400ece:	4413      	add	r3, r2
  400ed0:	d90d      	bls.n	400eee <memset+0x82>
  400ed2:	461e      	mov	r6, r3
  400ed4:	4622      	mov	r2, r4
  400ed6:	3a04      	subs	r2, #4
  400ed8:	2a03      	cmp	r2, #3
  400eda:	f846 5b04 	str.w	r5, [r6], #4
  400ede:	d8fa      	bhi.n	400ed6 <memset+0x6a>
  400ee0:	1f22      	subs	r2, r4, #4
  400ee2:	f022 0203 	bic.w	r2, r2, #3
  400ee6:	3204      	adds	r2, #4
  400ee8:	4413      	add	r3, r2
  400eea:	f004 0403 	and.w	r4, r4, #3
  400eee:	b12c      	cbz	r4, 400efc <memset+0x90>
  400ef0:	b2c9      	uxtb	r1, r1
  400ef2:	441c      	add	r4, r3
  400ef4:	f803 1b01 	strb.w	r1, [r3], #1
  400ef8:	42a3      	cmp	r3, r4
  400efa:	d1fb      	bne.n	400ef4 <memset+0x88>
  400efc:	bc70      	pop	{r4, r5, r6}
  400efe:	4770      	bx	lr
  400f00:	4614      	mov	r4, r2
  400f02:	4603      	mov	r3, r0
  400f04:	e7c2      	b.n	400e8c <memset+0x20>
  400f06:	bf00      	nop

00400f08 <_puts_r>:
  400f08:	b5f0      	push	{r4, r5, r6, r7, lr}
  400f0a:	4604      	mov	r4, r0
  400f0c:	b089      	sub	sp, #36	; 0x24
  400f0e:	4608      	mov	r0, r1
  400f10:	460d      	mov	r5, r1
  400f12:	f000 f8b3 	bl	40107c <strlen>
  400f16:	68a3      	ldr	r3, [r4, #8]
  400f18:	4f11      	ldr	r7, [pc, #68]	; (400f60 <_puts_r+0x58>)
  400f1a:	899a      	ldrh	r2, [r3, #12]
  400f1c:	9504      	str	r5, [sp, #16]
  400f1e:	2102      	movs	r1, #2
  400f20:	f100 0e01 	add.w	lr, r0, #1
  400f24:	2601      	movs	r6, #1
  400f26:	ad04      	add	r5, sp, #16
  400f28:	9102      	str	r1, [sp, #8]
  400f2a:	0491      	lsls	r1, r2, #18
  400f2c:	9005      	str	r0, [sp, #20]
  400f2e:	f8cd e00c 	str.w	lr, [sp, #12]
  400f32:	9706      	str	r7, [sp, #24]
  400f34:	9607      	str	r6, [sp, #28]
  400f36:	9501      	str	r5, [sp, #4]
  400f38:	d406      	bmi.n	400f48 <_puts_r+0x40>
  400f3a:	6e59      	ldr	r1, [r3, #100]	; 0x64
  400f3c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
  400f40:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
  400f44:	819a      	strh	r2, [r3, #12]
  400f46:	6659      	str	r1, [r3, #100]	; 0x64
  400f48:	4620      	mov	r0, r4
  400f4a:	4619      	mov	r1, r3
  400f4c:	aa01      	add	r2, sp, #4
  400f4e:	f001 faa3 	bl	402498 <__sfvwrite_r>
  400f52:	2800      	cmp	r0, #0
  400f54:	bf14      	ite	ne
  400f56:	f04f 30ff 	movne.w	r0, #4294967295
  400f5a:	200a      	moveq	r0, #10
  400f5c:	b009      	add	sp, #36	; 0x24
  400f5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
  400f60:	0040547c 	.word	0x0040547c

00400f64 <puts>:
  400f64:	4b02      	ldr	r3, [pc, #8]	; (400f70 <puts+0xc>)
  400f66:	4601      	mov	r1, r0
  400f68:	6818      	ldr	r0, [r3, #0]
  400f6a:	f7ff bfcd 	b.w	400f08 <_puts_r>
  400f6e:	bf00      	nop
  400f70:	20000430 	.word	0x20000430

00400f74 <setbuf>:
  400f74:	2900      	cmp	r1, #0
  400f76:	bf0c      	ite	eq
  400f78:	2202      	moveq	r2, #2
  400f7a:	2200      	movne	r2, #0
  400f7c:	f44f 6380 	mov.w	r3, #1024	; 0x400
  400f80:	f000 b800 	b.w	400f84 <setvbuf>

00400f84 <setvbuf>:
  400f84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  400f88:	4c3a      	ldr	r4, [pc, #232]	; (401074 <setvbuf+0xf0>)
  400f8a:	6826      	ldr	r6, [r4, #0]
  400f8c:	460d      	mov	r5, r1
  400f8e:	4604      	mov	r4, r0
  400f90:	4690      	mov	r8, r2
  400f92:	461f      	mov	r7, r3
  400f94:	b116      	cbz	r6, 400f9c <setvbuf+0x18>
  400f96:	6bb3      	ldr	r3, [r6, #56]	; 0x38
  400f98:	2b00      	cmp	r3, #0
  400f9a:	d03c      	beq.n	401016 <setvbuf+0x92>
  400f9c:	f1b8 0f02 	cmp.w	r8, #2
  400fa0:	d82f      	bhi.n	401002 <setvbuf+0x7e>
  400fa2:	2f00      	cmp	r7, #0
  400fa4:	db2d      	blt.n	401002 <setvbuf+0x7e>
  400fa6:	4621      	mov	r1, r4
  400fa8:	4630      	mov	r0, r6
  400faa:	f001 f831 	bl	402010 <_fflush_r>
  400fae:	89a1      	ldrh	r1, [r4, #12]
  400fb0:	2300      	movs	r3, #0
  400fb2:	6063      	str	r3, [r4, #4]
  400fb4:	61a3      	str	r3, [r4, #24]
  400fb6:	060b      	lsls	r3, r1, #24
  400fb8:	d427      	bmi.n	40100a <setvbuf+0x86>
  400fba:	f021 0183 	bic.w	r1, r1, #131	; 0x83
  400fbe:	b289      	uxth	r1, r1
  400fc0:	f1b8 0f02 	cmp.w	r8, #2
  400fc4:	81a1      	strh	r1, [r4, #12]
  400fc6:	d02a      	beq.n	40101e <setvbuf+0x9a>
  400fc8:	2d00      	cmp	r5, #0
  400fca:	d036      	beq.n	40103a <setvbuf+0xb6>
  400fcc:	f1b8 0f01 	cmp.w	r8, #1
  400fd0:	d011      	beq.n	400ff6 <setvbuf+0x72>
  400fd2:	b289      	uxth	r1, r1
  400fd4:	f001 0008 	and.w	r0, r1, #8
  400fd8:	4b27      	ldr	r3, [pc, #156]	; (401078 <setvbuf+0xf4>)
  400fda:	63f3      	str	r3, [r6, #60]	; 0x3c
  400fdc:	b280      	uxth	r0, r0
  400fde:	6025      	str	r5, [r4, #0]
  400fe0:	6125      	str	r5, [r4, #16]
  400fe2:	6167      	str	r7, [r4, #20]
  400fe4:	b178      	cbz	r0, 401006 <setvbuf+0x82>
  400fe6:	f011 0f03 	tst.w	r1, #3
  400fea:	bf18      	it	ne
  400fec:	2700      	movne	r7, #0
  400fee:	60a7      	str	r7, [r4, #8]
  400ff0:	2000      	movs	r0, #0
  400ff2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  400ff6:	f041 0101 	orr.w	r1, r1, #1
  400ffa:	427b      	negs	r3, r7
  400ffc:	81a1      	strh	r1, [r4, #12]
  400ffe:	61a3      	str	r3, [r4, #24]
  401000:	e7e7      	b.n	400fd2 <setvbuf+0x4e>
  401002:	f04f 30ff 	mov.w	r0, #4294967295
  401006:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40100a:	6921      	ldr	r1, [r4, #16]
  40100c:	4630      	mov	r0, r6
  40100e:	f001 f96b 	bl	4022e8 <_free_r>
  401012:	89a1      	ldrh	r1, [r4, #12]
  401014:	e7d1      	b.n	400fba <setvbuf+0x36>
  401016:	4630      	mov	r0, r6
  401018:	f001 f88e 	bl	402138 <__sinit>
  40101c:	e7be      	b.n	400f9c <setvbuf+0x18>
  40101e:	2000      	movs	r0, #0
  401020:	f104 0343 	add.w	r3, r4, #67	; 0x43
  401024:	f041 0102 	orr.w	r1, r1, #2
  401028:	2500      	movs	r5, #0
  40102a:	2201      	movs	r2, #1
  40102c:	81a1      	strh	r1, [r4, #12]
  40102e:	60a5      	str	r5, [r4, #8]
  401030:	6023      	str	r3, [r4, #0]
  401032:	6123      	str	r3, [r4, #16]
  401034:	6162      	str	r2, [r4, #20]
  401036:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40103a:	2f00      	cmp	r7, #0
  40103c:	bf08      	it	eq
  40103e:	f44f 6780 	moveq.w	r7, #1024	; 0x400
  401042:	4638      	mov	r0, r7
  401044:	f001 fc58 	bl	4028f8 <malloc>
  401048:	4605      	mov	r5, r0
  40104a:	b128      	cbz	r0, 401058 <setvbuf+0xd4>
  40104c:	89a1      	ldrh	r1, [r4, #12]
  40104e:	f041 0180 	orr.w	r1, r1, #128	; 0x80
  401052:	b289      	uxth	r1, r1
  401054:	81a1      	strh	r1, [r4, #12]
  401056:	e7b9      	b.n	400fcc <setvbuf+0x48>
  401058:	f44f 6080 	mov.w	r0, #1024	; 0x400
  40105c:	f001 fc4c 	bl	4028f8 <malloc>
  401060:	4605      	mov	r5, r0
  401062:	b918      	cbnz	r0, 40106c <setvbuf+0xe8>
  401064:	89a1      	ldrh	r1, [r4, #12]
  401066:	f04f 30ff 	mov.w	r0, #4294967295
  40106a:	e7d9      	b.n	401020 <setvbuf+0x9c>
  40106c:	f44f 6780 	mov.w	r7, #1024	; 0x400
  401070:	e7ec      	b.n	40104c <setvbuf+0xc8>
  401072:	bf00      	nop
  401074:	20000430 	.word	0x20000430
  401078:	0040203d 	.word	0x0040203d

0040107c <strlen>:
  40107c:	f020 0103 	bic.w	r1, r0, #3
  401080:	f010 0003 	ands.w	r0, r0, #3
  401084:	f1c0 0000 	rsb	r0, r0, #0
  401088:	f851 3b04 	ldr.w	r3, [r1], #4
  40108c:	f100 0c04 	add.w	ip, r0, #4
  401090:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
  401094:	f06f 0200 	mvn.w	r2, #0
  401098:	bf1c      	itt	ne
  40109a:	fa22 f20c 	lsrne.w	r2, r2, ip
  40109e:	4313      	orrne	r3, r2
  4010a0:	f04f 0c01 	mov.w	ip, #1
  4010a4:	ea4c 2c0c 	orr.w	ip, ip, ip, lsl #8
  4010a8:	ea4c 4c0c 	orr.w	ip, ip, ip, lsl #16
  4010ac:	eba3 020c 	sub.w	r2, r3, ip
  4010b0:	ea22 0203 	bic.w	r2, r2, r3
  4010b4:	ea12 12cc 	ands.w	r2, r2, ip, lsl #7
  4010b8:	bf04      	itt	eq
  4010ba:	f851 3b04 	ldreq.w	r3, [r1], #4
  4010be:	3004      	addeq	r0, #4
  4010c0:	d0f4      	beq.n	4010ac <strlen+0x30>
  4010c2:	f1c2 0100 	rsb	r1, r2, #0
  4010c6:	ea02 0201 	and.w	r2, r2, r1
  4010ca:	fab2 f282 	clz	r2, r2
  4010ce:	f1c2 021f 	rsb	r2, r2, #31
  4010d2:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
  4010d6:	4770      	bx	lr

004010d8 <__sprint_r.part.0>:
  4010d8:	6e4b      	ldr	r3, [r1, #100]	; 0x64
  4010da:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  4010de:	049c      	lsls	r4, r3, #18
  4010e0:	460f      	mov	r7, r1
  4010e2:	4692      	mov	sl, r2
  4010e4:	d52b      	bpl.n	40113e <__sprint_r.part.0+0x66>
  4010e6:	6893      	ldr	r3, [r2, #8]
  4010e8:	6812      	ldr	r2, [r2, #0]
  4010ea:	b333      	cbz	r3, 40113a <__sprint_r.part.0+0x62>
  4010ec:	4680      	mov	r8, r0
  4010ee:	f102 0908 	add.w	r9, r2, #8
  4010f2:	e919 0060 	ldmdb	r9, {r5, r6}
  4010f6:	08b6      	lsrs	r6, r6, #2
  4010f8:	d017      	beq.n	40112a <__sprint_r.part.0+0x52>
  4010fa:	3d04      	subs	r5, #4
  4010fc:	2400      	movs	r4, #0
  4010fe:	e001      	b.n	401104 <__sprint_r.part.0+0x2c>
  401100:	42a6      	cmp	r6, r4
  401102:	d010      	beq.n	401126 <__sprint_r.part.0+0x4e>
  401104:	4640      	mov	r0, r8
  401106:	f855 1f04 	ldr.w	r1, [r5, #4]!
  40110a:	463a      	mov	r2, r7
  40110c:	f001 f88c 	bl	402228 <_fputwc_r>
  401110:	1c43      	adds	r3, r0, #1
  401112:	f104 0401 	add.w	r4, r4, #1
  401116:	d1f3      	bne.n	401100 <__sprint_r.part.0+0x28>
  401118:	2300      	movs	r3, #0
  40111a:	f8ca 3008 	str.w	r3, [sl, #8]
  40111e:	f8ca 3004 	str.w	r3, [sl, #4]
  401122:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  401126:	f8da 3008 	ldr.w	r3, [sl, #8]
  40112a:	eba3 0386 	sub.w	r3, r3, r6, lsl #2
  40112e:	f8ca 3008 	str.w	r3, [sl, #8]
  401132:	f109 0908 	add.w	r9, r9, #8
  401136:	2b00      	cmp	r3, #0
  401138:	d1db      	bne.n	4010f2 <__sprint_r.part.0+0x1a>
  40113a:	2000      	movs	r0, #0
  40113c:	e7ec      	b.n	401118 <__sprint_r.part.0+0x40>
  40113e:	f001 f9ab 	bl	402498 <__sfvwrite_r>
  401142:	2300      	movs	r3, #0
  401144:	f8ca 3008 	str.w	r3, [sl, #8]
  401148:	f8ca 3004 	str.w	r3, [sl, #4]
  40114c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00401150 <_vfiprintf_r>:
  401150:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  401154:	b0ab      	sub	sp, #172	; 0xac
  401156:	461c      	mov	r4, r3
  401158:	9100      	str	r1, [sp, #0]
  40115a:	4693      	mov	fp, r2
  40115c:	9304      	str	r3, [sp, #16]
  40115e:	9001      	str	r0, [sp, #4]
  401160:	b118      	cbz	r0, 40116a <_vfiprintf_r+0x1a>
  401162:	6b83      	ldr	r3, [r0, #56]	; 0x38
  401164:	2b00      	cmp	r3, #0
  401166:	f000 80e3 	beq.w	401330 <_vfiprintf_r+0x1e0>
  40116a:	9b00      	ldr	r3, [sp, #0]
  40116c:	8999      	ldrh	r1, [r3, #12]
  40116e:	b28a      	uxth	r2, r1
  401170:	0490      	lsls	r0, r2, #18
  401172:	d408      	bmi.n	401186 <_vfiprintf_r+0x36>
  401174:	4618      	mov	r0, r3
  401176:	6e5b      	ldr	r3, [r3, #100]	; 0x64
  401178:	f441 5200 	orr.w	r2, r1, #8192	; 0x2000
  40117c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  401180:	8182      	strh	r2, [r0, #12]
  401182:	6643      	str	r3, [r0, #100]	; 0x64
  401184:	b292      	uxth	r2, r2
  401186:	0711      	lsls	r1, r2, #28
  401188:	f140 80b2 	bpl.w	4012f0 <_vfiprintf_r+0x1a0>
  40118c:	9b00      	ldr	r3, [sp, #0]
  40118e:	691b      	ldr	r3, [r3, #16]
  401190:	2b00      	cmp	r3, #0
  401192:	f000 80ad 	beq.w	4012f0 <_vfiprintf_r+0x1a0>
  401196:	f002 021a 	and.w	r2, r2, #26
  40119a:	2a0a      	cmp	r2, #10
  40119c:	f000 80b4 	beq.w	401308 <_vfiprintf_r+0x1b8>
  4011a0:	2300      	movs	r3, #0
  4011a2:	f10d 0a68 	add.w	sl, sp, #104	; 0x68
  4011a6:	9309      	str	r3, [sp, #36]	; 0x24
  4011a8:	930f      	str	r3, [sp, #60]	; 0x3c
  4011aa:	930e      	str	r3, [sp, #56]	; 0x38
  4011ac:	9302      	str	r3, [sp, #8]
  4011ae:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
  4011b2:	4654      	mov	r4, sl
  4011b4:	f89b 3000 	ldrb.w	r3, [fp]
  4011b8:	2b00      	cmp	r3, #0
  4011ba:	f000 84a3 	beq.w	401b04 <_vfiprintf_r+0x9b4>
  4011be:	2b25      	cmp	r3, #37	; 0x25
  4011c0:	f000 84a0 	beq.w	401b04 <_vfiprintf_r+0x9b4>
  4011c4:	465a      	mov	r2, fp
  4011c6:	e001      	b.n	4011cc <_vfiprintf_r+0x7c>
  4011c8:	2b25      	cmp	r3, #37	; 0x25
  4011ca:	d003      	beq.n	4011d4 <_vfiprintf_r+0x84>
  4011cc:	f812 3f01 	ldrb.w	r3, [r2, #1]!
  4011d0:	2b00      	cmp	r3, #0
  4011d2:	d1f9      	bne.n	4011c8 <_vfiprintf_r+0x78>
  4011d4:	ebcb 0602 	rsb	r6, fp, r2
  4011d8:	4615      	mov	r5, r2
  4011da:	b196      	cbz	r6, 401202 <_vfiprintf_r+0xb2>
  4011dc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  4011de:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  4011e0:	f8c4 b000 	str.w	fp, [r4]
  4011e4:	3301      	adds	r3, #1
  4011e6:	4432      	add	r2, r6
  4011e8:	2b07      	cmp	r3, #7
  4011ea:	6066      	str	r6, [r4, #4]
  4011ec:	920f      	str	r2, [sp, #60]	; 0x3c
  4011ee:	930e      	str	r3, [sp, #56]	; 0x38
  4011f0:	dd79      	ble.n	4012e6 <_vfiprintf_r+0x196>
  4011f2:	2a00      	cmp	r2, #0
  4011f4:	f040 84af 	bne.w	401b56 <_vfiprintf_r+0xa06>
  4011f8:	9b02      	ldr	r3, [sp, #8]
  4011fa:	920e      	str	r2, [sp, #56]	; 0x38
  4011fc:	4433      	add	r3, r6
  4011fe:	4654      	mov	r4, sl
  401200:	9302      	str	r3, [sp, #8]
  401202:	782b      	ldrb	r3, [r5, #0]
  401204:	2b00      	cmp	r3, #0
  401206:	f000 8360 	beq.w	4018ca <_vfiprintf_r+0x77a>
  40120a:	2100      	movs	r1, #0
  40120c:	f04f 0300 	mov.w	r3, #0
  401210:	f04f 3cff 	mov.w	ip, #4294967295
  401214:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
  401218:	1c68      	adds	r0, r5, #1
  40121a:	786b      	ldrb	r3, [r5, #1]
  40121c:	4688      	mov	r8, r1
  40121e:	460d      	mov	r5, r1
  401220:	4666      	mov	r6, ip
  401222:	f100 0b01 	add.w	fp, r0, #1
  401226:	f1a3 0220 	sub.w	r2, r3, #32
  40122a:	2a58      	cmp	r2, #88	; 0x58
  40122c:	f200 82ab 	bhi.w	401786 <_vfiprintf_r+0x636>
  401230:	e8df f012 	tbh	[pc, r2, lsl #1]
  401234:	02a9029b 	.word	0x02a9029b
  401238:	02a302a9 	.word	0x02a302a9
  40123c:	02a902a9 	.word	0x02a902a9
  401240:	02a902a9 	.word	0x02a902a9
  401244:	02a902a9 	.word	0x02a902a9
  401248:	02620255 	.word	0x02620255
  40124c:	010d02a9 	.word	0x010d02a9
  401250:	02a9026e 	.word	0x02a9026e
  401254:	012f0129 	.word	0x012f0129
  401258:	012f012f 	.word	0x012f012f
  40125c:	012f012f 	.word	0x012f012f
  401260:	012f012f 	.word	0x012f012f
  401264:	012f012f 	.word	0x012f012f
  401268:	02a902a9 	.word	0x02a902a9
  40126c:	02a902a9 	.word	0x02a902a9
  401270:	02a902a9 	.word	0x02a902a9
  401274:	02a902a9 	.word	0x02a902a9
  401278:	02a902a9 	.word	0x02a902a9
  40127c:	02a9013d 	.word	0x02a9013d
  401280:	02a902a9 	.word	0x02a902a9
  401284:	02a902a9 	.word	0x02a902a9
  401288:	02a902a9 	.word	0x02a902a9
  40128c:	02a902a9 	.word	0x02a902a9
  401290:	017402a9 	.word	0x017402a9
  401294:	02a902a9 	.word	0x02a902a9
  401298:	02a902a9 	.word	0x02a902a9
  40129c:	018b02a9 	.word	0x018b02a9
  4012a0:	02a902a9 	.word	0x02a902a9
  4012a4:	02a901a3 	.word	0x02a901a3
  4012a8:	02a902a9 	.word	0x02a902a9
  4012ac:	02a902a9 	.word	0x02a902a9
  4012b0:	02a902a9 	.word	0x02a902a9
  4012b4:	02a902a9 	.word	0x02a902a9
  4012b8:	01c702a9 	.word	0x01c702a9
  4012bc:	02a901da 	.word	0x02a901da
  4012c0:	02a902a9 	.word	0x02a902a9
  4012c4:	01da0123 	.word	0x01da0123
  4012c8:	02a902a9 	.word	0x02a902a9
  4012cc:	02a9024c 	.word	0x02a9024c
  4012d0:	0113028a 	.word	0x0113028a
  4012d4:	020701f3 	.word	0x020701f3
  4012d8:	020d02a9 	.word	0x020d02a9
  4012dc:	008102a9 	.word	0x008102a9
  4012e0:	02a902a9 	.word	0x02a902a9
  4012e4:	0233      	.short	0x0233
  4012e6:	3408      	adds	r4, #8
  4012e8:	9b02      	ldr	r3, [sp, #8]
  4012ea:	4433      	add	r3, r6
  4012ec:	9302      	str	r3, [sp, #8]
  4012ee:	e788      	b.n	401202 <_vfiprintf_r+0xb2>
  4012f0:	9801      	ldr	r0, [sp, #4]
  4012f2:	9900      	ldr	r1, [sp, #0]
  4012f4:	f000 fd70 	bl	401dd8 <__swsetup_r>
  4012f8:	b9a8      	cbnz	r0, 401326 <_vfiprintf_r+0x1d6>
  4012fa:	9b00      	ldr	r3, [sp, #0]
  4012fc:	899a      	ldrh	r2, [r3, #12]
  4012fe:	f002 021a 	and.w	r2, r2, #26
  401302:	2a0a      	cmp	r2, #10
  401304:	f47f af4c 	bne.w	4011a0 <_vfiprintf_r+0x50>
  401308:	9b00      	ldr	r3, [sp, #0]
  40130a:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
  40130e:	2b00      	cmp	r3, #0
  401310:	f6ff af46 	blt.w	4011a0 <_vfiprintf_r+0x50>
  401314:	9801      	ldr	r0, [sp, #4]
  401316:	9900      	ldr	r1, [sp, #0]
  401318:	465a      	mov	r2, fp
  40131a:	4623      	mov	r3, r4
  40131c:	f000 fd20 	bl	401d60 <__sbprintf>
  401320:	b02b      	add	sp, #172	; 0xac
  401322:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  401326:	f04f 30ff 	mov.w	r0, #4294967295
  40132a:	b02b      	add	sp, #172	; 0xac
  40132c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  401330:	f000 ff02 	bl	402138 <__sinit>
  401334:	e719      	b.n	40116a <_vfiprintf_r+0x1a>
  401336:	f018 0f20 	tst.w	r8, #32
  40133a:	9503      	str	r5, [sp, #12]
  40133c:	46b4      	mov	ip, r6
  40133e:	f000 810c 	beq.w	40155a <_vfiprintf_r+0x40a>
  401342:	9b04      	ldr	r3, [sp, #16]
  401344:	3307      	adds	r3, #7
  401346:	f023 0307 	bic.w	r3, r3, #7
  40134a:	f103 0208 	add.w	r2, r3, #8
  40134e:	e9d3 6700 	ldrd	r6, r7, [r3]
  401352:	9204      	str	r2, [sp, #16]
  401354:	2301      	movs	r3, #1
  401356:	f04f 0200 	mov.w	r2, #0
  40135a:	f88d 202f 	strb.w	r2, [sp, #47]	; 0x2f
  40135e:	46e1      	mov	r9, ip
  401360:	2500      	movs	r5, #0
  401362:	f1bc 0f00 	cmp.w	ip, #0
  401366:	bfa8      	it	ge
  401368:	f028 0880 	bicge.w	r8, r8, #128	; 0x80
  40136c:	ea56 0207 	orrs.w	r2, r6, r7
  401370:	f040 80c4 	bne.w	4014fc <_vfiprintf_r+0x3ac>
  401374:	f1bc 0f00 	cmp.w	ip, #0
  401378:	f000 8381 	beq.w	401a7e <_vfiprintf_r+0x92e>
  40137c:	2b01      	cmp	r3, #1
  40137e:	f000 80c5 	beq.w	40150c <_vfiprintf_r+0x3bc>
  401382:	2b02      	cmp	r3, #2
  401384:	f000 8387 	beq.w	401a96 <_vfiprintf_r+0x946>
  401388:	4651      	mov	r1, sl
  40138a:	08f2      	lsrs	r2, r6, #3
  40138c:	ea42 7247 	orr.w	r2, r2, r7, lsl #29
  401390:	08f8      	lsrs	r0, r7, #3
  401392:	f006 0307 	and.w	r3, r6, #7
  401396:	4607      	mov	r7, r0
  401398:	4616      	mov	r6, r2
  40139a:	3330      	adds	r3, #48	; 0x30
  40139c:	ea56 0207 	orrs.w	r2, r6, r7
  4013a0:	f801 3d01 	strb.w	r3, [r1, #-1]!
  4013a4:	d1f1      	bne.n	40138a <_vfiprintf_r+0x23a>
  4013a6:	f018 0f01 	tst.w	r8, #1
  4013aa:	9107      	str	r1, [sp, #28]
  4013ac:	f040 83fc 	bne.w	401ba8 <_vfiprintf_r+0xa58>
  4013b0:	ebc1 090a 	rsb	r9, r1, sl
  4013b4:	45e1      	cmp	r9, ip
  4013b6:	464e      	mov	r6, r9
  4013b8:	bfb8      	it	lt
  4013ba:	4666      	movlt	r6, ip
  4013bc:	b105      	cbz	r5, 4013c0 <_vfiprintf_r+0x270>
  4013be:	3601      	adds	r6, #1
  4013c0:	f018 0302 	ands.w	r3, r8, #2
  4013c4:	9305      	str	r3, [sp, #20]
  4013c6:	bf18      	it	ne
  4013c8:	3602      	addne	r6, #2
  4013ca:	f018 0384 	ands.w	r3, r8, #132	; 0x84
  4013ce:	9306      	str	r3, [sp, #24]
  4013d0:	f040 81fa 	bne.w	4017c8 <_vfiprintf_r+0x678>
  4013d4:	9b03      	ldr	r3, [sp, #12]
  4013d6:	1b9d      	subs	r5, r3, r6
  4013d8:	2d00      	cmp	r5, #0
  4013da:	f340 81f5 	ble.w	4017c8 <_vfiprintf_r+0x678>
  4013de:	2d10      	cmp	r5, #16
  4013e0:	f340 848c 	ble.w	401cfc <_vfiprintf_r+0xbac>
  4013e4:	f8dd e038 	ldr.w	lr, [sp, #56]	; 0x38
  4013e8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  4013ea:	4fc6      	ldr	r7, [pc, #792]	; (401704 <_vfiprintf_r+0x5b4>)
  4013ec:	4620      	mov	r0, r4
  4013ee:	2310      	movs	r3, #16
  4013f0:	4664      	mov	r4, ip
  4013f2:	4671      	mov	r1, lr
  4013f4:	4684      	mov	ip, r0
  4013f6:	e007      	b.n	401408 <_vfiprintf_r+0x2b8>
  4013f8:	f101 0e02 	add.w	lr, r1, #2
  4013fc:	f10c 0c08 	add.w	ip, ip, #8
  401400:	4601      	mov	r1, r0
  401402:	3d10      	subs	r5, #16
  401404:	2d10      	cmp	r5, #16
  401406:	dd13      	ble.n	401430 <_vfiprintf_r+0x2e0>
  401408:	1c48      	adds	r0, r1, #1
  40140a:	3210      	adds	r2, #16
  40140c:	2807      	cmp	r0, #7
  40140e:	920f      	str	r2, [sp, #60]	; 0x3c
  401410:	f8cc 7000 	str.w	r7, [ip]
  401414:	f8cc 3004 	str.w	r3, [ip, #4]
  401418:	900e      	str	r0, [sp, #56]	; 0x38
  40141a:	dded      	ble.n	4013f8 <_vfiprintf_r+0x2a8>
  40141c:	2a00      	cmp	r2, #0
  40141e:	f040 81c3 	bne.w	4017a8 <_vfiprintf_r+0x658>
  401422:	3d10      	subs	r5, #16
  401424:	2d10      	cmp	r5, #16
  401426:	4611      	mov	r1, r2
  401428:	f04f 0e01 	mov.w	lr, #1
  40142c:	46d4      	mov	ip, sl
  40142e:	dceb      	bgt.n	401408 <_vfiprintf_r+0x2b8>
  401430:	4663      	mov	r3, ip
  401432:	4671      	mov	r1, lr
  401434:	46a4      	mov	ip, r4
  401436:	461c      	mov	r4, r3
  401438:	442a      	add	r2, r5
  40143a:	2907      	cmp	r1, #7
  40143c:	920f      	str	r2, [sp, #60]	; 0x3c
  40143e:	6027      	str	r7, [r4, #0]
  401440:	6065      	str	r5, [r4, #4]
  401442:	910e      	str	r1, [sp, #56]	; 0x38
  401444:	f300 8346 	bgt.w	401ad4 <_vfiprintf_r+0x984>
  401448:	3408      	adds	r4, #8
  40144a:	1c48      	adds	r0, r1, #1
  40144c:	e1bf      	b.n	4017ce <_vfiprintf_r+0x67e>
  40144e:	4658      	mov	r0, fp
  401450:	f048 0804 	orr.w	r8, r8, #4
  401454:	f89b 3000 	ldrb.w	r3, [fp]
  401458:	e6e3      	b.n	401222 <_vfiprintf_r+0xd2>
  40145a:	f018 0320 	ands.w	r3, r8, #32
  40145e:	9503      	str	r5, [sp, #12]
  401460:	46b4      	mov	ip, r6
  401462:	d062      	beq.n	40152a <_vfiprintf_r+0x3da>
  401464:	9b04      	ldr	r3, [sp, #16]
  401466:	3307      	adds	r3, #7
  401468:	f023 0307 	bic.w	r3, r3, #7
  40146c:	f103 0208 	add.w	r2, r3, #8
  401470:	e9d3 6700 	ldrd	r6, r7, [r3]
  401474:	9204      	str	r2, [sp, #16]
  401476:	2300      	movs	r3, #0
  401478:	e76d      	b.n	401356 <_vfiprintf_r+0x206>
  40147a:	f048 0840 	orr.w	r8, r8, #64	; 0x40
  40147e:	f89b 3000 	ldrb.w	r3, [fp]
  401482:	4658      	mov	r0, fp
  401484:	e6cd      	b.n	401222 <_vfiprintf_r+0xd2>
  401486:	f048 0880 	orr.w	r8, r8, #128	; 0x80
  40148a:	f89b 3000 	ldrb.w	r3, [fp]
  40148e:	4658      	mov	r0, fp
  401490:	e6c7      	b.n	401222 <_vfiprintf_r+0xd2>
  401492:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
  401496:	2500      	movs	r5, #0
  401498:	f81b 3b01 	ldrb.w	r3, [fp], #1
  40149c:	eb05 0585 	add.w	r5, r5, r5, lsl #2
  4014a0:	eb02 0545 	add.w	r5, r2, r5, lsl #1
  4014a4:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
  4014a8:	2a09      	cmp	r2, #9
  4014aa:	d9f5      	bls.n	401498 <_vfiprintf_r+0x348>
  4014ac:	e6bb      	b.n	401226 <_vfiprintf_r+0xd6>
  4014ae:	f048 0810 	orr.w	r8, r8, #16
  4014b2:	f018 0f20 	tst.w	r8, #32
  4014b6:	9503      	str	r5, [sp, #12]
  4014b8:	46b4      	mov	ip, r6
  4014ba:	f88d 102f 	strb.w	r1, [sp, #47]	; 0x2f
  4014be:	f000 809b 	beq.w	4015f8 <_vfiprintf_r+0x4a8>
  4014c2:	9904      	ldr	r1, [sp, #16]
  4014c4:	3107      	adds	r1, #7
  4014c6:	f021 0107 	bic.w	r1, r1, #7
  4014ca:	e9d1 2300 	ldrd	r2, r3, [r1]
  4014ce:	3108      	adds	r1, #8
  4014d0:	9104      	str	r1, [sp, #16]
  4014d2:	4616      	mov	r6, r2
  4014d4:	461f      	mov	r7, r3
  4014d6:	2a00      	cmp	r2, #0
  4014d8:	f173 0300 	sbcs.w	r3, r3, #0
  4014dc:	f2c0 83a6 	blt.w	401c2c <_vfiprintf_r+0xadc>
  4014e0:	f1bc 0f00 	cmp.w	ip, #0
  4014e4:	bfa8      	it	ge
  4014e6:	f028 0880 	bicge.w	r8, r8, #128	; 0x80
  4014ea:	ea56 0207 	orrs.w	r2, r6, r7
  4014ee:	f89d 502f 	ldrb.w	r5, [sp, #47]	; 0x2f
  4014f2:	46e1      	mov	r9, ip
  4014f4:	f04f 0301 	mov.w	r3, #1
  4014f8:	f43f af3c 	beq.w	401374 <_vfiprintf_r+0x224>
  4014fc:	2b01      	cmp	r3, #1
  4014fe:	f47f af40 	bne.w	401382 <_vfiprintf_r+0x232>
  401502:	2f00      	cmp	r7, #0
  401504:	bf08      	it	eq
  401506:	2e0a      	cmpeq	r6, #10
  401508:	f080 8334 	bcs.w	401b74 <_vfiprintf_r+0xa24>
  40150c:	ab2a      	add	r3, sp, #168	; 0xa8
  40150e:	3630      	adds	r6, #48	; 0x30
  401510:	f803 6d41 	strb.w	r6, [r3, #-65]!
  401514:	ebc3 090a 	rsb	r9, r3, sl
  401518:	9307      	str	r3, [sp, #28]
  40151a:	e74b      	b.n	4013b4 <_vfiprintf_r+0x264>
  40151c:	f048 0810 	orr.w	r8, r8, #16
  401520:	f018 0320 	ands.w	r3, r8, #32
  401524:	9503      	str	r5, [sp, #12]
  401526:	46b4      	mov	ip, r6
  401528:	d19c      	bne.n	401464 <_vfiprintf_r+0x314>
  40152a:	f018 0210 	ands.w	r2, r8, #16
  40152e:	f040 82f7 	bne.w	401b20 <_vfiprintf_r+0x9d0>
  401532:	f018 0340 	ands.w	r3, r8, #64	; 0x40
  401536:	f000 82f3 	beq.w	401b20 <_vfiprintf_r+0x9d0>
  40153a:	9904      	ldr	r1, [sp, #16]
  40153c:	4613      	mov	r3, r2
  40153e:	460a      	mov	r2, r1
  401540:	3204      	adds	r2, #4
  401542:	880e      	ldrh	r6, [r1, #0]
  401544:	9204      	str	r2, [sp, #16]
  401546:	2700      	movs	r7, #0
  401548:	e705      	b.n	401356 <_vfiprintf_r+0x206>
  40154a:	f048 0810 	orr.w	r8, r8, #16
  40154e:	f018 0f20 	tst.w	r8, #32
  401552:	9503      	str	r5, [sp, #12]
  401554:	46b4      	mov	ip, r6
  401556:	f47f aef4 	bne.w	401342 <_vfiprintf_r+0x1f2>
  40155a:	9a04      	ldr	r2, [sp, #16]
  40155c:	f018 0f10 	tst.w	r8, #16
  401560:	4613      	mov	r3, r2
  401562:	f040 82e4 	bne.w	401b2e <_vfiprintf_r+0x9de>
  401566:	f018 0f40 	tst.w	r8, #64	; 0x40
  40156a:	f000 82e0 	beq.w	401b2e <_vfiprintf_r+0x9de>
  40156e:	8816      	ldrh	r6, [r2, #0]
  401570:	3204      	adds	r2, #4
  401572:	2700      	movs	r7, #0
  401574:	2301      	movs	r3, #1
  401576:	9204      	str	r2, [sp, #16]
  401578:	e6ed      	b.n	401356 <_vfiprintf_r+0x206>
  40157a:	4a63      	ldr	r2, [pc, #396]	; (401708 <_vfiprintf_r+0x5b8>)
  40157c:	9503      	str	r5, [sp, #12]
  40157e:	f018 0f20 	tst.w	r8, #32
  401582:	46b4      	mov	ip, r6
  401584:	f88d 102f 	strb.w	r1, [sp, #47]	; 0x2f
  401588:	9209      	str	r2, [sp, #36]	; 0x24
  40158a:	f000 8090 	beq.w	4016ae <_vfiprintf_r+0x55e>
  40158e:	9a04      	ldr	r2, [sp, #16]
  401590:	3207      	adds	r2, #7
  401592:	f022 0207 	bic.w	r2, r2, #7
  401596:	e9d2 6700 	ldrd	r6, r7, [r2]
  40159a:	f102 0108 	add.w	r1, r2, #8
  40159e:	9104      	str	r1, [sp, #16]
  4015a0:	f018 0f01 	tst.w	r8, #1
  4015a4:	f000 8290 	beq.w	401ac8 <_vfiprintf_r+0x978>
  4015a8:	ea56 0207 	orrs.w	r2, r6, r7
  4015ac:	f000 828c 	beq.w	401ac8 <_vfiprintf_r+0x978>
  4015b0:	2230      	movs	r2, #48	; 0x30
  4015b2:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
  4015b6:	f048 0802 	orr.w	r8, r8, #2
  4015ba:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
  4015be:	2302      	movs	r3, #2
  4015c0:	e6c9      	b.n	401356 <_vfiprintf_r+0x206>
  4015c2:	9a04      	ldr	r2, [sp, #16]
  4015c4:	9503      	str	r5, [sp, #12]
  4015c6:	6813      	ldr	r3, [r2, #0]
  4015c8:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
  4015cc:	4613      	mov	r3, r2
  4015ce:	3304      	adds	r3, #4
  4015d0:	2601      	movs	r6, #1
  4015d2:	f04f 0100 	mov.w	r1, #0
  4015d6:	9304      	str	r3, [sp, #16]
  4015d8:	ab10      	add	r3, sp, #64	; 0x40
  4015da:	f88d 102f 	strb.w	r1, [sp, #47]	; 0x2f
  4015de:	46b1      	mov	r9, r6
  4015e0:	9307      	str	r3, [sp, #28]
  4015e2:	f04f 0c00 	mov.w	ip, #0
  4015e6:	e6eb      	b.n	4013c0 <_vfiprintf_r+0x270>
  4015e8:	f018 0f20 	tst.w	r8, #32
  4015ec:	9503      	str	r5, [sp, #12]
  4015ee:	46b4      	mov	ip, r6
  4015f0:	f88d 102f 	strb.w	r1, [sp, #47]	; 0x2f
  4015f4:	f47f af65 	bne.w	4014c2 <_vfiprintf_r+0x372>
  4015f8:	f018 0f10 	tst.w	r8, #16
  4015fc:	f040 82a2 	bne.w	401b44 <_vfiprintf_r+0x9f4>
  401600:	f018 0f40 	tst.w	r8, #64	; 0x40
  401604:	f000 829e 	beq.w	401b44 <_vfiprintf_r+0x9f4>
  401608:	9904      	ldr	r1, [sp, #16]
  40160a:	f9b1 6000 	ldrsh.w	r6, [r1]
  40160e:	3104      	adds	r1, #4
  401610:	17f7      	asrs	r7, r6, #31
  401612:	4632      	mov	r2, r6
  401614:	463b      	mov	r3, r7
  401616:	9104      	str	r1, [sp, #16]
  401618:	e75d      	b.n	4014d6 <_vfiprintf_r+0x386>
  40161a:	9904      	ldr	r1, [sp, #16]
  40161c:	9503      	str	r5, [sp, #12]
  40161e:	2330      	movs	r3, #48	; 0x30
  401620:	460a      	mov	r2, r1
  401622:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
  401626:	2378      	movs	r3, #120	; 0x78
  401628:	3204      	adds	r2, #4
  40162a:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
  40162e:	4b37      	ldr	r3, [pc, #220]	; (40170c <_vfiprintf_r+0x5bc>)
  401630:	9309      	str	r3, [sp, #36]	; 0x24
  401632:	46b4      	mov	ip, r6
  401634:	f048 0802 	orr.w	r8, r8, #2
  401638:	680e      	ldr	r6, [r1, #0]
  40163a:	9204      	str	r2, [sp, #16]
  40163c:	2700      	movs	r7, #0
  40163e:	2302      	movs	r3, #2
  401640:	e689      	b.n	401356 <_vfiprintf_r+0x206>
  401642:	f048 0820 	orr.w	r8, r8, #32
  401646:	f89b 3000 	ldrb.w	r3, [fp]
  40164a:	4658      	mov	r0, fp
  40164c:	e5e9      	b.n	401222 <_vfiprintf_r+0xd2>
  40164e:	9a04      	ldr	r2, [sp, #16]
  401650:	9503      	str	r5, [sp, #12]
  401652:	6813      	ldr	r3, [r2, #0]
  401654:	9307      	str	r3, [sp, #28]
  401656:	f04f 0100 	mov.w	r1, #0
  40165a:	46b4      	mov	ip, r6
  40165c:	f88d 102f 	strb.w	r1, [sp, #47]	; 0x2f
  401660:	1d16      	adds	r6, r2, #4
  401662:	2b00      	cmp	r3, #0
  401664:	f000 8350 	beq.w	401d08 <_vfiprintf_r+0xbb8>
  401668:	f1bc 0f00 	cmp.w	ip, #0
  40166c:	f2c0 832a 	blt.w	401cc4 <_vfiprintf_r+0xb74>
  401670:	9d07      	ldr	r5, [sp, #28]
  401672:	f8cd c010 	str.w	ip, [sp, #16]
  401676:	4662      	mov	r2, ip
  401678:	4628      	mov	r0, r5
  40167a:	2100      	movs	r1, #0
  40167c:	f001 fbd6 	bl	402e2c <memchr>
  401680:	f8dd c010 	ldr.w	ip, [sp, #16]
  401684:	2800      	cmp	r0, #0
  401686:	f000 8350 	beq.w	401d2a <_vfiprintf_r+0xbda>
  40168a:	ebc5 0900 	rsb	r9, r5, r0
  40168e:	9604      	str	r6, [sp, #16]
  401690:	f89d 502f 	ldrb.w	r5, [sp, #47]	; 0x2f
  401694:	f04f 0c00 	mov.w	ip, #0
  401698:	e68c      	b.n	4013b4 <_vfiprintf_r+0x264>
  40169a:	4a1c      	ldr	r2, [pc, #112]	; (40170c <_vfiprintf_r+0x5bc>)
  40169c:	9503      	str	r5, [sp, #12]
  40169e:	f018 0f20 	tst.w	r8, #32
  4016a2:	46b4      	mov	ip, r6
  4016a4:	9209      	str	r2, [sp, #36]	; 0x24
  4016a6:	f88d 102f 	strb.w	r1, [sp, #47]	; 0x2f
  4016aa:	f47f af70 	bne.w	40158e <_vfiprintf_r+0x43e>
  4016ae:	9904      	ldr	r1, [sp, #16]
  4016b0:	f018 0f10 	tst.w	r8, #16
  4016b4:	460a      	mov	r2, r1
  4016b6:	f040 8240 	bne.w	401b3a <_vfiprintf_r+0x9ea>
  4016ba:	f018 0f40 	tst.w	r8, #64	; 0x40
  4016be:	f000 823c 	beq.w	401b3a <_vfiprintf_r+0x9ea>
  4016c2:	3204      	adds	r2, #4
  4016c4:	880e      	ldrh	r6, [r1, #0]
  4016c6:	9204      	str	r2, [sp, #16]
  4016c8:	2700      	movs	r7, #0
  4016ca:	e769      	b.n	4015a0 <_vfiprintf_r+0x450>
  4016cc:	f89b 3000 	ldrb.w	r3, [fp]
  4016d0:	2b6c      	cmp	r3, #108	; 0x6c
  4016d2:	f000 82ea 	beq.w	401caa <_vfiprintf_r+0xb5a>
  4016d6:	f048 0810 	orr.w	r8, r8, #16
  4016da:	4658      	mov	r0, fp
  4016dc:	e5a1      	b.n	401222 <_vfiprintf_r+0xd2>
  4016de:	9a04      	ldr	r2, [sp, #16]
  4016e0:	6815      	ldr	r5, [r2, #0]
  4016e2:	4613      	mov	r3, r2
  4016e4:	2d00      	cmp	r5, #0
  4016e6:	f103 0304 	add.w	r3, r3, #4
  4016ea:	f2c0 82e6 	blt.w	401cba <_vfiprintf_r+0xb6a>
  4016ee:	9304      	str	r3, [sp, #16]
  4016f0:	f89b 3000 	ldrb.w	r3, [fp]
  4016f4:	4658      	mov	r0, fp
  4016f6:	e594      	b.n	401222 <_vfiprintf_r+0xd2>
  4016f8:	f89b 3000 	ldrb.w	r3, [fp]
  4016fc:	4658      	mov	r0, fp
  4016fe:	212b      	movs	r1, #43	; 0x2b
  401700:	e58f      	b.n	401222 <_vfiprintf_r+0xd2>
  401702:	bf00      	nop
  401704:	0040556c 	.word	0x0040556c
  401708:	0040553c 	.word	0x0040553c
  40170c:	00405550 	.word	0x00405550
  401710:	f89b 3000 	ldrb.w	r3, [fp]
  401714:	2b2a      	cmp	r3, #42	; 0x2a
  401716:	f10b 0001 	add.w	r0, fp, #1
  40171a:	f000 830f 	beq.w	401d3c <_vfiprintf_r+0xbec>
  40171e:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
  401722:	2a09      	cmp	r2, #9
  401724:	4683      	mov	fp, r0
  401726:	f04f 0600 	mov.w	r6, #0
  40172a:	f63f ad7c 	bhi.w	401226 <_vfiprintf_r+0xd6>
  40172e:	f81b 3b01 	ldrb.w	r3, [fp], #1
  401732:	eb06 0686 	add.w	r6, r6, r6, lsl #2
  401736:	eb02 0646 	add.w	r6, r2, r6, lsl #1
  40173a:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
  40173e:	2a09      	cmp	r2, #9
  401740:	d9f5      	bls.n	40172e <_vfiprintf_r+0x5de>
  401742:	ea46 76e6 	orr.w	r6, r6, r6, asr #31
  401746:	e56e      	b.n	401226 <_vfiprintf_r+0xd6>
  401748:	f018 0f20 	tst.w	r8, #32
  40174c:	f88d 102f 	strb.w	r1, [sp, #47]	; 0x2f
  401750:	f000 8283 	beq.w	401c5a <_vfiprintf_r+0xb0a>
  401754:	9a04      	ldr	r2, [sp, #16]
  401756:	9902      	ldr	r1, [sp, #8]
  401758:	6813      	ldr	r3, [r2, #0]
  40175a:	17cf      	asrs	r7, r1, #31
  40175c:	4608      	mov	r0, r1
  40175e:	3204      	adds	r2, #4
  401760:	4639      	mov	r1, r7
  401762:	9204      	str	r2, [sp, #16]
  401764:	e9c3 0100 	strd	r0, r1, [r3]
  401768:	e524      	b.n	4011b4 <_vfiprintf_r+0x64>
  40176a:	4658      	mov	r0, fp
  40176c:	f89b 3000 	ldrb.w	r3, [fp]
  401770:	2900      	cmp	r1, #0
  401772:	f47f ad56 	bne.w	401222 <_vfiprintf_r+0xd2>
  401776:	2120      	movs	r1, #32
  401778:	e553      	b.n	401222 <_vfiprintf_r+0xd2>
  40177a:	f048 0801 	orr.w	r8, r8, #1
  40177e:	4658      	mov	r0, fp
  401780:	f89b 3000 	ldrb.w	r3, [fp]
  401784:	e54d      	b.n	401222 <_vfiprintf_r+0xd2>
  401786:	9503      	str	r5, [sp, #12]
  401788:	f88d 102f 	strb.w	r1, [sp, #47]	; 0x2f
  40178c:	2b00      	cmp	r3, #0
  40178e:	f000 809c 	beq.w	4018ca <_vfiprintf_r+0x77a>
  401792:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
  401796:	f04f 0300 	mov.w	r3, #0
  40179a:	2601      	movs	r6, #1
  40179c:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
  4017a0:	ab10      	add	r3, sp, #64	; 0x40
  4017a2:	46b1      	mov	r9, r6
  4017a4:	9307      	str	r3, [sp, #28]
  4017a6:	e71c      	b.n	4015e2 <_vfiprintf_r+0x492>
  4017a8:	9801      	ldr	r0, [sp, #4]
  4017aa:	9900      	ldr	r1, [sp, #0]
  4017ac:	9308      	str	r3, [sp, #32]
  4017ae:	aa0d      	add	r2, sp, #52	; 0x34
  4017b0:	f7ff fc92 	bl	4010d8 <__sprint_r.part.0>
  4017b4:	2800      	cmp	r0, #0
  4017b6:	f040 808f 	bne.w	4018d8 <_vfiprintf_r+0x788>
  4017ba:	990e      	ldr	r1, [sp, #56]	; 0x38
  4017bc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  4017be:	9b08      	ldr	r3, [sp, #32]
  4017c0:	f101 0e01 	add.w	lr, r1, #1
  4017c4:	46d4      	mov	ip, sl
  4017c6:	e61c      	b.n	401402 <_vfiprintf_r+0x2b2>
  4017c8:	990e      	ldr	r1, [sp, #56]	; 0x38
  4017ca:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  4017cc:	1c48      	adds	r0, r1, #1
  4017ce:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
  4017d2:	b16b      	cbz	r3, 4017f0 <_vfiprintf_r+0x6a0>
  4017d4:	3201      	adds	r2, #1
  4017d6:	f10d 032f 	add.w	r3, sp, #47	; 0x2f
  4017da:	2101      	movs	r1, #1
  4017dc:	2807      	cmp	r0, #7
  4017de:	920f      	str	r2, [sp, #60]	; 0x3c
  4017e0:	900e      	str	r0, [sp, #56]	; 0x38
  4017e2:	6023      	str	r3, [r4, #0]
  4017e4:	6061      	str	r1, [r4, #4]
  4017e6:	f300 8134 	bgt.w	401a52 <_vfiprintf_r+0x902>
  4017ea:	4601      	mov	r1, r0
  4017ec:	3408      	adds	r4, #8
  4017ee:	3001      	adds	r0, #1
  4017f0:	9b05      	ldr	r3, [sp, #20]
  4017f2:	b163      	cbz	r3, 40180e <_vfiprintf_r+0x6be>
  4017f4:	3202      	adds	r2, #2
  4017f6:	a90c      	add	r1, sp, #48	; 0x30
  4017f8:	2302      	movs	r3, #2
  4017fa:	2807      	cmp	r0, #7
  4017fc:	920f      	str	r2, [sp, #60]	; 0x3c
  4017fe:	900e      	str	r0, [sp, #56]	; 0x38
  401800:	e884 000a 	stmia.w	r4, {r1, r3}
  401804:	f300 8134 	bgt.w	401a70 <_vfiprintf_r+0x920>
  401808:	4601      	mov	r1, r0
  40180a:	3408      	adds	r4, #8
  40180c:	3001      	adds	r0, #1
  40180e:	9b06      	ldr	r3, [sp, #24]
  401810:	2b80      	cmp	r3, #128	; 0x80
  401812:	f000 80d4 	beq.w	4019be <_vfiprintf_r+0x86e>
  401816:	ebc9 070c 	rsb	r7, r9, ip
  40181a:	2f00      	cmp	r7, #0
  40181c:	dd2b      	ble.n	401876 <_vfiprintf_r+0x726>
  40181e:	2f10      	cmp	r7, #16
  401820:	4daa      	ldr	r5, [pc, #680]	; (401acc <_vfiprintf_r+0x97c>)
  401822:	dd1f      	ble.n	401864 <_vfiprintf_r+0x714>
  401824:	46a6      	mov	lr, r4
  401826:	2310      	movs	r3, #16
  401828:	9c01      	ldr	r4, [sp, #4]
  40182a:	e007      	b.n	40183c <_vfiprintf_r+0x6ec>
  40182c:	f101 0c02 	add.w	ip, r1, #2
  401830:	f10e 0e08 	add.w	lr, lr, #8
  401834:	4601      	mov	r1, r0
  401836:	3f10      	subs	r7, #16
  401838:	2f10      	cmp	r7, #16
  40183a:	dd11      	ble.n	401860 <_vfiprintf_r+0x710>
  40183c:	1c48      	adds	r0, r1, #1
  40183e:	3210      	adds	r2, #16
  401840:	2807      	cmp	r0, #7
  401842:	920f      	str	r2, [sp, #60]	; 0x3c
  401844:	f8ce 5000 	str.w	r5, [lr]
  401848:	f8ce 3004 	str.w	r3, [lr, #4]
  40184c:	900e      	str	r0, [sp, #56]	; 0x38
  40184e:	dded      	ble.n	40182c <_vfiprintf_r+0x6dc>
  401850:	bb6a      	cbnz	r2, 4018ae <_vfiprintf_r+0x75e>
  401852:	3f10      	subs	r7, #16
  401854:	2f10      	cmp	r7, #16
  401856:	f04f 0c01 	mov.w	ip, #1
  40185a:	4611      	mov	r1, r2
  40185c:	46d6      	mov	lr, sl
  40185e:	dced      	bgt.n	40183c <_vfiprintf_r+0x6ec>
  401860:	4674      	mov	r4, lr
  401862:	4660      	mov	r0, ip
  401864:	443a      	add	r2, r7
  401866:	2807      	cmp	r0, #7
  401868:	920f      	str	r2, [sp, #60]	; 0x3c
  40186a:	e884 00a0 	stmia.w	r4, {r5, r7}
  40186e:	900e      	str	r0, [sp, #56]	; 0x38
  401870:	dc3b      	bgt.n	4018ea <_vfiprintf_r+0x79a>
  401872:	3408      	adds	r4, #8
  401874:	3001      	adds	r0, #1
  401876:	eb02 0309 	add.w	r3, r2, r9
  40187a:	9a07      	ldr	r2, [sp, #28]
  40187c:	930f      	str	r3, [sp, #60]	; 0x3c
  40187e:	2807      	cmp	r0, #7
  401880:	e884 0204 	stmia.w	r4, {r2, r9}
  401884:	900e      	str	r0, [sp, #56]	; 0x38
  401886:	dd3d      	ble.n	401904 <_vfiprintf_r+0x7b4>
  401888:	2b00      	cmp	r3, #0
  40188a:	f040 813e 	bne.w	401b0a <_vfiprintf_r+0x9ba>
  40188e:	f018 0f04 	tst.w	r8, #4
  401892:	930e      	str	r3, [sp, #56]	; 0x38
  401894:	f040 812f 	bne.w	401af6 <_vfiprintf_r+0x9a6>
  401898:	9b02      	ldr	r3, [sp, #8]
  40189a:	9a03      	ldr	r2, [sp, #12]
  40189c:	4296      	cmp	r6, r2
  40189e:	bfac      	ite	ge
  4018a0:	199b      	addge	r3, r3, r6
  4018a2:	189b      	addlt	r3, r3, r2
  4018a4:	9302      	str	r3, [sp, #8]
  4018a6:	2300      	movs	r3, #0
  4018a8:	930e      	str	r3, [sp, #56]	; 0x38
  4018aa:	4654      	mov	r4, sl
  4018ac:	e482      	b.n	4011b4 <_vfiprintf_r+0x64>
  4018ae:	4620      	mov	r0, r4
  4018b0:	9900      	ldr	r1, [sp, #0]
  4018b2:	9305      	str	r3, [sp, #20]
  4018b4:	aa0d      	add	r2, sp, #52	; 0x34
  4018b6:	f7ff fc0f 	bl	4010d8 <__sprint_r.part.0>
  4018ba:	b968      	cbnz	r0, 4018d8 <_vfiprintf_r+0x788>
  4018bc:	990e      	ldr	r1, [sp, #56]	; 0x38
  4018be:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  4018c0:	9b05      	ldr	r3, [sp, #20]
  4018c2:	f101 0c01 	add.w	ip, r1, #1
  4018c6:	46d6      	mov	lr, sl
  4018c8:	e7b5      	b.n	401836 <_vfiprintf_r+0x6e6>
  4018ca:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  4018cc:	b123      	cbz	r3, 4018d8 <_vfiprintf_r+0x788>
  4018ce:	9801      	ldr	r0, [sp, #4]
  4018d0:	9900      	ldr	r1, [sp, #0]
  4018d2:	aa0d      	add	r2, sp, #52	; 0x34
  4018d4:	f7ff fc00 	bl	4010d8 <__sprint_r.part.0>
  4018d8:	9b00      	ldr	r3, [sp, #0]
  4018da:	899b      	ldrh	r3, [r3, #12]
  4018dc:	065b      	lsls	r3, r3, #25
  4018de:	f53f ad22 	bmi.w	401326 <_vfiprintf_r+0x1d6>
  4018e2:	9802      	ldr	r0, [sp, #8]
  4018e4:	b02b      	add	sp, #172	; 0xac
  4018e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4018ea:	2a00      	cmp	r2, #0
  4018ec:	f040 8191 	bne.w	401c12 <_vfiprintf_r+0xac2>
  4018f0:	2201      	movs	r2, #1
  4018f2:	9907      	ldr	r1, [sp, #28]
  4018f4:	f8cd 906c 	str.w	r9, [sp, #108]	; 0x6c
  4018f8:	464b      	mov	r3, r9
  4018fa:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
  4018fe:	911a      	str	r1, [sp, #104]	; 0x68
  401900:	920e      	str	r2, [sp, #56]	; 0x38
  401902:	4654      	mov	r4, sl
  401904:	f104 0208 	add.w	r2, r4, #8
  401908:	f018 0f04 	tst.w	r8, #4
  40190c:	d039      	beq.n	401982 <_vfiprintf_r+0x832>
  40190e:	9903      	ldr	r1, [sp, #12]
  401910:	1b8d      	subs	r5, r1, r6
  401912:	2d00      	cmp	r5, #0
  401914:	dd35      	ble.n	401982 <_vfiprintf_r+0x832>
  401916:	2d10      	cmp	r5, #16
  401918:	f340 8202 	ble.w	401d20 <_vfiprintf_r+0xbd0>
  40191c:	980e      	ldr	r0, [sp, #56]	; 0x38
  40191e:	4f6c      	ldr	r7, [pc, #432]	; (401ad0 <_vfiprintf_r+0x980>)
  401920:	f8dd 8004 	ldr.w	r8, [sp, #4]
  401924:	f8dd 9000 	ldr.w	r9, [sp]
  401928:	2410      	movs	r4, #16
  40192a:	e006      	b.n	40193a <_vfiprintf_r+0x7ea>
  40192c:	f100 0e02 	add.w	lr, r0, #2
  401930:	3208      	adds	r2, #8
  401932:	4608      	mov	r0, r1
  401934:	3d10      	subs	r5, #16
  401936:	2d10      	cmp	r5, #16
  401938:	dd10      	ble.n	40195c <_vfiprintf_r+0x80c>
  40193a:	1c41      	adds	r1, r0, #1
  40193c:	3310      	adds	r3, #16
  40193e:	2907      	cmp	r1, #7
  401940:	930f      	str	r3, [sp, #60]	; 0x3c
  401942:	6017      	str	r7, [r2, #0]
  401944:	6054      	str	r4, [r2, #4]
  401946:	910e      	str	r1, [sp, #56]	; 0x38
  401948:	ddf0      	ble.n	40192c <_vfiprintf_r+0x7dc>
  40194a:	2b00      	cmp	r3, #0
  40194c:	d12a      	bne.n	4019a4 <_vfiprintf_r+0x854>
  40194e:	3d10      	subs	r5, #16
  401950:	2d10      	cmp	r5, #16
  401952:	f04f 0e01 	mov.w	lr, #1
  401956:	4618      	mov	r0, r3
  401958:	4652      	mov	r2, sl
  40195a:	dcee      	bgt.n	40193a <_vfiprintf_r+0x7ea>
  40195c:	442b      	add	r3, r5
  40195e:	f1be 0f07 	cmp.w	lr, #7
  401962:	930f      	str	r3, [sp, #60]	; 0x3c
  401964:	6017      	str	r7, [r2, #0]
  401966:	6055      	str	r5, [r2, #4]
  401968:	f8cd e038 	str.w	lr, [sp, #56]	; 0x38
  40196c:	dd09      	ble.n	401982 <_vfiprintf_r+0x832>
  40196e:	2b00      	cmp	r3, #0
  401970:	d092      	beq.n	401898 <_vfiprintf_r+0x748>
  401972:	9801      	ldr	r0, [sp, #4]
  401974:	9900      	ldr	r1, [sp, #0]
  401976:	aa0d      	add	r2, sp, #52	; 0x34
  401978:	f7ff fbae 	bl	4010d8 <__sprint_r.part.0>
  40197c:	2800      	cmp	r0, #0
  40197e:	d1ab      	bne.n	4018d8 <_vfiprintf_r+0x788>
  401980:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  401982:	9a02      	ldr	r2, [sp, #8]
  401984:	9903      	ldr	r1, [sp, #12]
  401986:	428e      	cmp	r6, r1
  401988:	bfac      	ite	ge
  40198a:	1992      	addge	r2, r2, r6
  40198c:	1852      	addlt	r2, r2, r1
  40198e:	9202      	str	r2, [sp, #8]
  401990:	2b00      	cmp	r3, #0
  401992:	d088      	beq.n	4018a6 <_vfiprintf_r+0x756>
  401994:	9801      	ldr	r0, [sp, #4]
  401996:	9900      	ldr	r1, [sp, #0]
  401998:	aa0d      	add	r2, sp, #52	; 0x34
  40199a:	f7ff fb9d 	bl	4010d8 <__sprint_r.part.0>
  40199e:	2800      	cmp	r0, #0
  4019a0:	d081      	beq.n	4018a6 <_vfiprintf_r+0x756>
  4019a2:	e799      	b.n	4018d8 <_vfiprintf_r+0x788>
  4019a4:	4640      	mov	r0, r8
  4019a6:	4649      	mov	r1, r9
  4019a8:	aa0d      	add	r2, sp, #52	; 0x34
  4019aa:	f7ff fb95 	bl	4010d8 <__sprint_r.part.0>
  4019ae:	2800      	cmp	r0, #0
  4019b0:	d192      	bne.n	4018d8 <_vfiprintf_r+0x788>
  4019b2:	980e      	ldr	r0, [sp, #56]	; 0x38
  4019b4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  4019b6:	f100 0e01 	add.w	lr, r0, #1
  4019ba:	4652      	mov	r2, sl
  4019bc:	e7ba      	b.n	401934 <_vfiprintf_r+0x7e4>
  4019be:	9b03      	ldr	r3, [sp, #12]
  4019c0:	1b9f      	subs	r7, r3, r6
  4019c2:	2f00      	cmp	r7, #0
  4019c4:	f77f af27 	ble.w	401816 <_vfiprintf_r+0x6c6>
  4019c8:	2f10      	cmp	r7, #16
  4019ca:	4d40      	ldr	r5, [pc, #256]	; (401acc <_vfiprintf_r+0x97c>)
  4019cc:	f340 81b4 	ble.w	401d38 <_vfiprintf_r+0xbe8>
  4019d0:	4620      	mov	r0, r4
  4019d2:	2310      	movs	r3, #16
  4019d4:	4664      	mov	r4, ip
  4019d6:	4684      	mov	ip, r0
  4019d8:	e007      	b.n	4019ea <_vfiprintf_r+0x89a>
  4019da:	f101 0e02 	add.w	lr, r1, #2
  4019de:	f10c 0c08 	add.w	ip, ip, #8
  4019e2:	4601      	mov	r1, r0
  4019e4:	3f10      	subs	r7, #16
  4019e6:	2f10      	cmp	r7, #16
  4019e8:	dd11      	ble.n	401a0e <_vfiprintf_r+0x8be>
  4019ea:	1c48      	adds	r0, r1, #1
  4019ec:	3210      	adds	r2, #16
  4019ee:	2807      	cmp	r0, #7
  4019f0:	920f      	str	r2, [sp, #60]	; 0x3c
  4019f2:	f8cc 5000 	str.w	r5, [ip]
  4019f6:	f8cc 3004 	str.w	r3, [ip, #4]
  4019fa:	900e      	str	r0, [sp, #56]	; 0x38
  4019fc:	dded      	ble.n	4019da <_vfiprintf_r+0x88a>
  4019fe:	b9c2      	cbnz	r2, 401a32 <_vfiprintf_r+0x8e2>
  401a00:	3f10      	subs	r7, #16
  401a02:	2f10      	cmp	r7, #16
  401a04:	f04f 0e01 	mov.w	lr, #1
  401a08:	4611      	mov	r1, r2
  401a0a:	46d4      	mov	ip, sl
  401a0c:	dced      	bgt.n	4019ea <_vfiprintf_r+0x89a>
  401a0e:	4663      	mov	r3, ip
  401a10:	46a4      	mov	ip, r4
  401a12:	461c      	mov	r4, r3
  401a14:	443a      	add	r2, r7
  401a16:	f1be 0f07 	cmp.w	lr, #7
  401a1a:	920f      	str	r2, [sp, #60]	; 0x3c
  401a1c:	e884 00a0 	stmia.w	r4, {r5, r7}
  401a20:	f8cd e038 	str.w	lr, [sp, #56]	; 0x38
  401a24:	f300 80ef 	bgt.w	401c06 <_vfiprintf_r+0xab6>
  401a28:	3408      	adds	r4, #8
  401a2a:	f10e 0001 	add.w	r0, lr, #1
  401a2e:	4671      	mov	r1, lr
  401a30:	e6f1      	b.n	401816 <_vfiprintf_r+0x6c6>
  401a32:	9801      	ldr	r0, [sp, #4]
  401a34:	9900      	ldr	r1, [sp, #0]
  401a36:	9305      	str	r3, [sp, #20]
  401a38:	aa0d      	add	r2, sp, #52	; 0x34
  401a3a:	f7ff fb4d 	bl	4010d8 <__sprint_r.part.0>
  401a3e:	2800      	cmp	r0, #0
  401a40:	f47f af4a 	bne.w	4018d8 <_vfiprintf_r+0x788>
  401a44:	990e      	ldr	r1, [sp, #56]	; 0x38
  401a46:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  401a48:	9b05      	ldr	r3, [sp, #20]
  401a4a:	f101 0e01 	add.w	lr, r1, #1
  401a4e:	46d4      	mov	ip, sl
  401a50:	e7c8      	b.n	4019e4 <_vfiprintf_r+0x894>
  401a52:	2a00      	cmp	r2, #0
  401a54:	f040 80c6 	bne.w	401be4 <_vfiprintf_r+0xa94>
  401a58:	9b05      	ldr	r3, [sp, #20]
  401a5a:	2b00      	cmp	r3, #0
  401a5c:	f000 8086 	beq.w	401b6c <_vfiprintf_r+0xa1c>
  401a60:	aa0c      	add	r2, sp, #48	; 0x30
  401a62:	2302      	movs	r3, #2
  401a64:	921a      	str	r2, [sp, #104]	; 0x68
  401a66:	4608      	mov	r0, r1
  401a68:	931b      	str	r3, [sp, #108]	; 0x6c
  401a6a:	461a      	mov	r2, r3
  401a6c:	4654      	mov	r4, sl
  401a6e:	e6cb      	b.n	401808 <_vfiprintf_r+0x6b8>
  401a70:	2a00      	cmp	r2, #0
  401a72:	f040 80a6 	bne.w	401bc2 <_vfiprintf_r+0xa72>
  401a76:	2001      	movs	r0, #1
  401a78:	4611      	mov	r1, r2
  401a7a:	4654      	mov	r4, sl
  401a7c:	e6c7      	b.n	40180e <_vfiprintf_r+0x6be>
  401a7e:	bb03      	cbnz	r3, 401ac2 <_vfiprintf_r+0x972>
  401a80:	f018 0f01 	tst.w	r8, #1
  401a84:	d01d      	beq.n	401ac2 <_vfiprintf_r+0x972>
  401a86:	ab2a      	add	r3, sp, #168	; 0xa8
  401a88:	2230      	movs	r2, #48	; 0x30
  401a8a:	f803 2d41 	strb.w	r2, [r3, #-65]!
  401a8e:	ebc3 090a 	rsb	r9, r3, sl
  401a92:	9307      	str	r3, [sp, #28]
  401a94:	e48e      	b.n	4013b4 <_vfiprintf_r+0x264>
  401a96:	9809      	ldr	r0, [sp, #36]	; 0x24
  401a98:	46d1      	mov	r9, sl
  401a9a:	0933      	lsrs	r3, r6, #4
  401a9c:	f006 010f 	and.w	r1, r6, #15
  401aa0:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
  401aa4:	093a      	lsrs	r2, r7, #4
  401aa6:	461e      	mov	r6, r3
  401aa8:	4617      	mov	r7, r2
  401aaa:	5c43      	ldrb	r3, [r0, r1]
  401aac:	f809 3d01 	strb.w	r3, [r9, #-1]!
  401ab0:	ea56 0307 	orrs.w	r3, r6, r7
  401ab4:	d1f1      	bne.n	401a9a <_vfiprintf_r+0x94a>
  401ab6:	464b      	mov	r3, r9
  401ab8:	f8cd 901c 	str.w	r9, [sp, #28]
  401abc:	ebc3 090a 	rsb	r9, r3, sl
  401ac0:	e478      	b.n	4013b4 <_vfiprintf_r+0x264>
  401ac2:	f8cd a01c 	str.w	sl, [sp, #28]
  401ac6:	e475      	b.n	4013b4 <_vfiprintf_r+0x264>
  401ac8:	2302      	movs	r3, #2
  401aca:	e444      	b.n	401356 <_vfiprintf_r+0x206>
  401acc:	0040552c 	.word	0x0040552c
  401ad0:	0040556c 	.word	0x0040556c
  401ad4:	2a00      	cmp	r2, #0
  401ad6:	f040 80d7 	bne.w	401c88 <_vfiprintf_r+0xb38>
  401ada:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
  401ade:	2b00      	cmp	r3, #0
  401ae0:	f000 80ae 	beq.w	401c40 <_vfiprintf_r+0xaf0>
  401ae4:	2301      	movs	r3, #1
  401ae6:	f10d 012f 	add.w	r1, sp, #47	; 0x2f
  401aea:	4618      	mov	r0, r3
  401aec:	931b      	str	r3, [sp, #108]	; 0x6c
  401aee:	461a      	mov	r2, r3
  401af0:	911a      	str	r1, [sp, #104]	; 0x68
  401af2:	4654      	mov	r4, sl
  401af4:	e679      	b.n	4017ea <_vfiprintf_r+0x69a>
  401af6:	9a03      	ldr	r2, [sp, #12]
  401af8:	1b95      	subs	r5, r2, r6
  401afa:	2d00      	cmp	r5, #0
  401afc:	4652      	mov	r2, sl
  401afe:	f73f af0a 	bgt.w	401916 <_vfiprintf_r+0x7c6>
  401b02:	e6c9      	b.n	401898 <_vfiprintf_r+0x748>
  401b04:	465d      	mov	r5, fp
  401b06:	f7ff bb7c 	b.w	401202 <_vfiprintf_r+0xb2>
  401b0a:	9801      	ldr	r0, [sp, #4]
  401b0c:	9900      	ldr	r1, [sp, #0]
  401b0e:	aa0d      	add	r2, sp, #52	; 0x34
  401b10:	f7ff fae2 	bl	4010d8 <__sprint_r.part.0>
  401b14:	2800      	cmp	r0, #0
  401b16:	f47f aedf 	bne.w	4018d8 <_vfiprintf_r+0x788>
  401b1a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  401b1c:	4652      	mov	r2, sl
  401b1e:	e6f3      	b.n	401908 <_vfiprintf_r+0x7b8>
  401b20:	9904      	ldr	r1, [sp, #16]
  401b22:	460a      	mov	r2, r1
  401b24:	3204      	adds	r2, #4
  401b26:	680e      	ldr	r6, [r1, #0]
  401b28:	9204      	str	r2, [sp, #16]
  401b2a:	2700      	movs	r7, #0
  401b2c:	e413      	b.n	401356 <_vfiprintf_r+0x206>
  401b2e:	3204      	adds	r2, #4
  401b30:	681e      	ldr	r6, [r3, #0]
  401b32:	9204      	str	r2, [sp, #16]
  401b34:	2301      	movs	r3, #1
  401b36:	2700      	movs	r7, #0
  401b38:	e40d      	b.n	401356 <_vfiprintf_r+0x206>
  401b3a:	6816      	ldr	r6, [r2, #0]
  401b3c:	3204      	adds	r2, #4
  401b3e:	9204      	str	r2, [sp, #16]
  401b40:	2700      	movs	r7, #0
  401b42:	e52d      	b.n	4015a0 <_vfiprintf_r+0x450>
  401b44:	9a04      	ldr	r2, [sp, #16]
  401b46:	6816      	ldr	r6, [r2, #0]
  401b48:	4613      	mov	r3, r2
  401b4a:	3304      	adds	r3, #4
  401b4c:	17f7      	asrs	r7, r6, #31
  401b4e:	9304      	str	r3, [sp, #16]
  401b50:	4632      	mov	r2, r6
  401b52:	463b      	mov	r3, r7
  401b54:	e4bf      	b.n	4014d6 <_vfiprintf_r+0x386>
  401b56:	9801      	ldr	r0, [sp, #4]
  401b58:	9900      	ldr	r1, [sp, #0]
  401b5a:	aa0d      	add	r2, sp, #52	; 0x34
  401b5c:	f7ff fabc 	bl	4010d8 <__sprint_r.part.0>
  401b60:	2800      	cmp	r0, #0
  401b62:	f47f aeb9 	bne.w	4018d8 <_vfiprintf_r+0x788>
  401b66:	4654      	mov	r4, sl
  401b68:	f7ff bbbe 	b.w	4012e8 <_vfiprintf_r+0x198>
  401b6c:	4608      	mov	r0, r1
  401b6e:	4654      	mov	r4, sl
  401b70:	4611      	mov	r1, r2
  401b72:	e64c      	b.n	40180e <_vfiprintf_r+0x6be>
  401b74:	46d1      	mov	r9, sl
  401b76:	f8cd c014 	str.w	ip, [sp, #20]
  401b7a:	4630      	mov	r0, r6
  401b7c:	4639      	mov	r1, r7
  401b7e:	220a      	movs	r2, #10
  401b80:	2300      	movs	r3, #0
  401b82:	f001 fe7d 	bl	403880 <__aeabi_uldivmod>
  401b86:	3230      	adds	r2, #48	; 0x30
  401b88:	4630      	mov	r0, r6
  401b8a:	4639      	mov	r1, r7
  401b8c:	f809 2d01 	strb.w	r2, [r9, #-1]!
  401b90:	2300      	movs	r3, #0
  401b92:	220a      	movs	r2, #10
  401b94:	f001 fe74 	bl	403880 <__aeabi_uldivmod>
  401b98:	4606      	mov	r6, r0
  401b9a:	460f      	mov	r7, r1
  401b9c:	ea56 0307 	orrs.w	r3, r6, r7
  401ba0:	d1eb      	bne.n	401b7a <_vfiprintf_r+0xa2a>
  401ba2:	f8dd c014 	ldr.w	ip, [sp, #20]
  401ba6:	e786      	b.n	401ab6 <_vfiprintf_r+0x966>
  401ba8:	2b30      	cmp	r3, #48	; 0x30
  401baa:	9b07      	ldr	r3, [sp, #28]
  401bac:	d086      	beq.n	401abc <_vfiprintf_r+0x96c>
  401bae:	3b01      	subs	r3, #1
  401bb0:	461a      	mov	r2, r3
  401bb2:	9307      	str	r3, [sp, #28]
  401bb4:	2330      	movs	r3, #48	; 0x30
  401bb6:	ebc2 090a 	rsb	r9, r2, sl
  401bba:	f801 3c01 	strb.w	r3, [r1, #-1]
  401bbe:	f7ff bbf9 	b.w	4013b4 <_vfiprintf_r+0x264>
  401bc2:	9801      	ldr	r0, [sp, #4]
  401bc4:	9900      	ldr	r1, [sp, #0]
  401bc6:	f8cd c014 	str.w	ip, [sp, #20]
  401bca:	aa0d      	add	r2, sp, #52	; 0x34
  401bcc:	f7ff fa84 	bl	4010d8 <__sprint_r.part.0>
  401bd0:	2800      	cmp	r0, #0
  401bd2:	f47f ae81 	bne.w	4018d8 <_vfiprintf_r+0x788>
  401bd6:	990e      	ldr	r1, [sp, #56]	; 0x38
  401bd8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  401bda:	f8dd c014 	ldr.w	ip, [sp, #20]
  401bde:	1c48      	adds	r0, r1, #1
  401be0:	4654      	mov	r4, sl
  401be2:	e614      	b.n	40180e <_vfiprintf_r+0x6be>
  401be4:	9801      	ldr	r0, [sp, #4]
  401be6:	9900      	ldr	r1, [sp, #0]
  401be8:	f8cd c020 	str.w	ip, [sp, #32]
  401bec:	aa0d      	add	r2, sp, #52	; 0x34
  401bee:	f7ff fa73 	bl	4010d8 <__sprint_r.part.0>
  401bf2:	2800      	cmp	r0, #0
  401bf4:	f47f ae70 	bne.w	4018d8 <_vfiprintf_r+0x788>
  401bf8:	990e      	ldr	r1, [sp, #56]	; 0x38
  401bfa:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  401bfc:	f8dd c020 	ldr.w	ip, [sp, #32]
  401c00:	1c48      	adds	r0, r1, #1
  401c02:	4654      	mov	r4, sl
  401c04:	e5f4      	b.n	4017f0 <_vfiprintf_r+0x6a0>
  401c06:	2a00      	cmp	r2, #0
  401c08:	d167      	bne.n	401cda <_vfiprintf_r+0xb8a>
  401c0a:	2001      	movs	r0, #1
  401c0c:	4611      	mov	r1, r2
  401c0e:	4654      	mov	r4, sl
  401c10:	e601      	b.n	401816 <_vfiprintf_r+0x6c6>
  401c12:	9801      	ldr	r0, [sp, #4]
  401c14:	9900      	ldr	r1, [sp, #0]
  401c16:	aa0d      	add	r2, sp, #52	; 0x34
  401c18:	f7ff fa5e 	bl	4010d8 <__sprint_r.part.0>
  401c1c:	2800      	cmp	r0, #0
  401c1e:	f47f ae5b 	bne.w	4018d8 <_vfiprintf_r+0x788>
  401c22:	980e      	ldr	r0, [sp, #56]	; 0x38
  401c24:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  401c26:	3001      	adds	r0, #1
  401c28:	4654      	mov	r4, sl
  401c2a:	e624      	b.n	401876 <_vfiprintf_r+0x726>
  401c2c:	252d      	movs	r5, #45	; 0x2d
  401c2e:	4276      	negs	r6, r6
  401c30:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
  401c34:	f88d 502f 	strb.w	r5, [sp, #47]	; 0x2f
  401c38:	46e1      	mov	r9, ip
  401c3a:	2301      	movs	r3, #1
  401c3c:	f7ff bb91 	b.w	401362 <_vfiprintf_r+0x212>
  401c40:	9b05      	ldr	r3, [sp, #20]
  401c42:	4611      	mov	r1, r2
  401c44:	2001      	movs	r0, #1
  401c46:	4654      	mov	r4, sl
  401c48:	2b00      	cmp	r3, #0
  401c4a:	f43f ade4 	beq.w	401816 <_vfiprintf_r+0x6c6>
  401c4e:	aa0c      	add	r2, sp, #48	; 0x30
  401c50:	2302      	movs	r3, #2
  401c52:	e88a 000c 	stmia.w	sl, {r2, r3}
  401c56:	461a      	mov	r2, r3
  401c58:	e5d6      	b.n	401808 <_vfiprintf_r+0x6b8>
  401c5a:	f018 0f10 	tst.w	r8, #16
  401c5e:	d10b      	bne.n	401c78 <_vfiprintf_r+0xb28>
  401c60:	f018 0f40 	tst.w	r8, #64	; 0x40
  401c64:	d008      	beq.n	401c78 <_vfiprintf_r+0xb28>
  401c66:	9a04      	ldr	r2, [sp, #16]
  401c68:	6813      	ldr	r3, [r2, #0]
  401c6a:	3204      	adds	r2, #4
  401c6c:	9204      	str	r2, [sp, #16]
  401c6e:	f8bd 2008 	ldrh.w	r2, [sp, #8]
  401c72:	801a      	strh	r2, [r3, #0]
  401c74:	f7ff ba9e 	b.w	4011b4 <_vfiprintf_r+0x64>
  401c78:	9a04      	ldr	r2, [sp, #16]
  401c7a:	6813      	ldr	r3, [r2, #0]
  401c7c:	3204      	adds	r2, #4
  401c7e:	9204      	str	r2, [sp, #16]
  401c80:	9a02      	ldr	r2, [sp, #8]
  401c82:	601a      	str	r2, [r3, #0]
  401c84:	f7ff ba96 	b.w	4011b4 <_vfiprintf_r+0x64>
  401c88:	9801      	ldr	r0, [sp, #4]
  401c8a:	9900      	ldr	r1, [sp, #0]
  401c8c:	f8cd c020 	str.w	ip, [sp, #32]
  401c90:	aa0d      	add	r2, sp, #52	; 0x34
  401c92:	f7ff fa21 	bl	4010d8 <__sprint_r.part.0>
  401c96:	2800      	cmp	r0, #0
  401c98:	f47f ae1e 	bne.w	4018d8 <_vfiprintf_r+0x788>
  401c9c:	990e      	ldr	r1, [sp, #56]	; 0x38
  401c9e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  401ca0:	f8dd c020 	ldr.w	ip, [sp, #32]
  401ca4:	1c48      	adds	r0, r1, #1
  401ca6:	4654      	mov	r4, sl
  401ca8:	e591      	b.n	4017ce <_vfiprintf_r+0x67e>
  401caa:	f048 0820 	orr.w	r8, r8, #32
  401cae:	f10b 0001 	add.w	r0, fp, #1
  401cb2:	f89b 3001 	ldrb.w	r3, [fp, #1]
  401cb6:	f7ff bab4 	b.w	401222 <_vfiprintf_r+0xd2>
  401cba:	426d      	negs	r5, r5
  401cbc:	9304      	str	r3, [sp, #16]
  401cbe:	4658      	mov	r0, fp
  401cc0:	f7ff bbc6 	b.w	401450 <_vfiprintf_r+0x300>
  401cc4:	9807      	ldr	r0, [sp, #28]
  401cc6:	9604      	str	r6, [sp, #16]
  401cc8:	f7ff f9d8 	bl	40107c <strlen>
  401ccc:	f89d 502f 	ldrb.w	r5, [sp, #47]	; 0x2f
  401cd0:	4681      	mov	r9, r0
  401cd2:	f04f 0c00 	mov.w	ip, #0
  401cd6:	f7ff bb6d 	b.w	4013b4 <_vfiprintf_r+0x264>
  401cda:	9801      	ldr	r0, [sp, #4]
  401cdc:	9900      	ldr	r1, [sp, #0]
  401cde:	f8cd c014 	str.w	ip, [sp, #20]
  401ce2:	aa0d      	add	r2, sp, #52	; 0x34
  401ce4:	f7ff f9f8 	bl	4010d8 <__sprint_r.part.0>
  401ce8:	2800      	cmp	r0, #0
  401cea:	f47f adf5 	bne.w	4018d8 <_vfiprintf_r+0x788>
  401cee:	990e      	ldr	r1, [sp, #56]	; 0x38
  401cf0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  401cf2:	f8dd c014 	ldr.w	ip, [sp, #20]
  401cf6:	1c48      	adds	r0, r1, #1
  401cf8:	4654      	mov	r4, sl
  401cfa:	e58c      	b.n	401816 <_vfiprintf_r+0x6c6>
  401cfc:	990e      	ldr	r1, [sp, #56]	; 0x38
  401cfe:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  401d00:	4f15      	ldr	r7, [pc, #84]	; (401d58 <_vfiprintf_r+0xc08>)
  401d02:	3101      	adds	r1, #1
  401d04:	f7ff bb98 	b.w	401438 <_vfiprintf_r+0x2e8>
  401d08:	f1bc 0f06 	cmp.w	ip, #6
  401d0c:	bf28      	it	cs
  401d0e:	f04f 0c06 	movcs.w	ip, #6
  401d12:	4b12      	ldr	r3, [pc, #72]	; (401d5c <_vfiprintf_r+0xc0c>)
  401d14:	9604      	str	r6, [sp, #16]
  401d16:	46e1      	mov	r9, ip
  401d18:	ea2c 76ec 	bic.w	r6, ip, ip, asr #31
  401d1c:	9307      	str	r3, [sp, #28]
  401d1e:	e460      	b.n	4015e2 <_vfiprintf_r+0x492>
  401d20:	990e      	ldr	r1, [sp, #56]	; 0x38
  401d22:	4f0d      	ldr	r7, [pc, #52]	; (401d58 <_vfiprintf_r+0xc08>)
  401d24:	f101 0e01 	add.w	lr, r1, #1
  401d28:	e618      	b.n	40195c <_vfiprintf_r+0x80c>
  401d2a:	46e1      	mov	r9, ip
  401d2c:	f89d 502f 	ldrb.w	r5, [sp, #47]	; 0x2f
  401d30:	9604      	str	r6, [sp, #16]
  401d32:	4684      	mov	ip, r0
  401d34:	f7ff bb3e 	b.w	4013b4 <_vfiprintf_r+0x264>
  401d38:	4686      	mov	lr, r0
  401d3a:	e66b      	b.n	401a14 <_vfiprintf_r+0x8c4>
  401d3c:	9a04      	ldr	r2, [sp, #16]
  401d3e:	f89b 3001 	ldrb.w	r3, [fp, #1]
  401d42:	6816      	ldr	r6, [r2, #0]
  401d44:	3204      	adds	r2, #4
  401d46:	2e00      	cmp	r6, #0
  401d48:	9204      	str	r2, [sp, #16]
  401d4a:	f6bf aa6a 	bge.w	401222 <_vfiprintf_r+0xd2>
  401d4e:	f04f 36ff 	mov.w	r6, #4294967295
  401d52:	f7ff ba66 	b.w	401222 <_vfiprintf_r+0xd2>
  401d56:	bf00      	nop
  401d58:	0040556c 	.word	0x0040556c
  401d5c:	00405564 	.word	0x00405564

00401d60 <__sbprintf>:
  401d60:	e92d 42f0 	stmdb	sp!, {r4, r5, r6, r7, r9, lr}
  401d64:	460c      	mov	r4, r1
  401d66:	f5ad 6d8d 	sub.w	sp, sp, #1128	; 0x468
  401d6a:	f8b1 e00c 	ldrh.w	lr, [r1, #12]
  401d6e:	69e7      	ldr	r7, [r4, #28]
  401d70:	6e49      	ldr	r1, [r1, #100]	; 0x64
  401d72:	f8b4 900e 	ldrh.w	r9, [r4, #14]
  401d76:	9119      	str	r1, [sp, #100]	; 0x64
  401d78:	ad1a      	add	r5, sp, #104	; 0x68
  401d7a:	f44f 6680 	mov.w	r6, #1024	; 0x400
  401d7e:	f02e 0e02 	bic.w	lr, lr, #2
  401d82:	f04f 0c00 	mov.w	ip, #0
  401d86:	9707      	str	r7, [sp, #28]
  401d88:	4669      	mov	r1, sp
  401d8a:	6a67      	ldr	r7, [r4, #36]	; 0x24
  401d8c:	9500      	str	r5, [sp, #0]
  401d8e:	9504      	str	r5, [sp, #16]
  401d90:	9602      	str	r6, [sp, #8]
  401d92:	9605      	str	r6, [sp, #20]
  401d94:	f8ad e00c 	strh.w	lr, [sp, #12]
  401d98:	f8ad 900e 	strh.w	r9, [sp, #14]
  401d9c:	9709      	str	r7, [sp, #36]	; 0x24
  401d9e:	f8cd c018 	str.w	ip, [sp, #24]
  401da2:	4606      	mov	r6, r0
  401da4:	f7ff f9d4 	bl	401150 <_vfiprintf_r>
  401da8:	1e05      	subs	r5, r0, #0
  401daa:	db07      	blt.n	401dbc <__sbprintf+0x5c>
  401dac:	4630      	mov	r0, r6
  401dae:	4669      	mov	r1, sp
  401db0:	f000 f92e 	bl	402010 <_fflush_r>
  401db4:	2800      	cmp	r0, #0
  401db6:	bf18      	it	ne
  401db8:	f04f 35ff 	movne.w	r5, #4294967295
  401dbc:	f8bd 300c 	ldrh.w	r3, [sp, #12]
  401dc0:	065b      	lsls	r3, r3, #25
  401dc2:	d503      	bpl.n	401dcc <__sbprintf+0x6c>
  401dc4:	89a3      	ldrh	r3, [r4, #12]
  401dc6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  401dca:	81a3      	strh	r3, [r4, #12]
  401dcc:	4628      	mov	r0, r5
  401dce:	f50d 6d8d 	add.w	sp, sp, #1128	; 0x468
  401dd2:	e8bd 82f0 	ldmia.w	sp!, {r4, r5, r6, r7, r9, pc}
  401dd6:	bf00      	nop

00401dd8 <__swsetup_r>:
  401dd8:	b538      	push	{r3, r4, r5, lr}
  401dda:	4b2f      	ldr	r3, [pc, #188]	; (401e98 <__swsetup_r+0xc0>)
  401ddc:	681b      	ldr	r3, [r3, #0]
  401dde:	4605      	mov	r5, r0
  401de0:	460c      	mov	r4, r1
  401de2:	b113      	cbz	r3, 401dea <__swsetup_r+0x12>
  401de4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
  401de6:	2a00      	cmp	r2, #0
  401de8:	d036      	beq.n	401e58 <__swsetup_r+0x80>
  401dea:	89a2      	ldrh	r2, [r4, #12]
  401dec:	b293      	uxth	r3, r2
  401dee:	0718      	lsls	r0, r3, #28
  401df0:	d50c      	bpl.n	401e0c <__swsetup_r+0x34>
  401df2:	6920      	ldr	r0, [r4, #16]
  401df4:	b1a8      	cbz	r0, 401e22 <__swsetup_r+0x4a>
  401df6:	f013 0201 	ands.w	r2, r3, #1
  401dfa:	d01e      	beq.n	401e3a <__swsetup_r+0x62>
  401dfc:	6963      	ldr	r3, [r4, #20]
  401dfe:	2200      	movs	r2, #0
  401e00:	425b      	negs	r3, r3
  401e02:	61a3      	str	r3, [r4, #24]
  401e04:	60a2      	str	r2, [r4, #8]
  401e06:	b1f0      	cbz	r0, 401e46 <__swsetup_r+0x6e>
  401e08:	2000      	movs	r0, #0
  401e0a:	bd38      	pop	{r3, r4, r5, pc}
  401e0c:	06d9      	lsls	r1, r3, #27
  401e0e:	d53b      	bpl.n	401e88 <__swsetup_r+0xb0>
  401e10:	0758      	lsls	r0, r3, #29
  401e12:	d425      	bmi.n	401e60 <__swsetup_r+0x88>
  401e14:	6920      	ldr	r0, [r4, #16]
  401e16:	f042 0308 	orr.w	r3, r2, #8
  401e1a:	81a3      	strh	r3, [r4, #12]
  401e1c:	b29b      	uxth	r3, r3
  401e1e:	2800      	cmp	r0, #0
  401e20:	d1e9      	bne.n	401df6 <__swsetup_r+0x1e>
  401e22:	f403 7220 	and.w	r2, r3, #640	; 0x280
  401e26:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
  401e2a:	d0e4      	beq.n	401df6 <__swsetup_r+0x1e>
  401e2c:	4628      	mov	r0, r5
  401e2e:	4621      	mov	r1, r4
  401e30:	f000 fcf2 	bl	402818 <__smakebuf_r>
  401e34:	89a3      	ldrh	r3, [r4, #12]
  401e36:	6920      	ldr	r0, [r4, #16]
  401e38:	e7dd      	b.n	401df6 <__swsetup_r+0x1e>
  401e3a:	0799      	lsls	r1, r3, #30
  401e3c:	bf58      	it	pl
  401e3e:	6962      	ldrpl	r2, [r4, #20]
  401e40:	60a2      	str	r2, [r4, #8]
  401e42:	2800      	cmp	r0, #0
  401e44:	d1e0      	bne.n	401e08 <__swsetup_r+0x30>
  401e46:	89a3      	ldrh	r3, [r4, #12]
  401e48:	061a      	lsls	r2, r3, #24
  401e4a:	d5de      	bpl.n	401e0a <__swsetup_r+0x32>
  401e4c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  401e50:	81a3      	strh	r3, [r4, #12]
  401e52:	f04f 30ff 	mov.w	r0, #4294967295
  401e56:	bd38      	pop	{r3, r4, r5, pc}
  401e58:	4618      	mov	r0, r3
  401e5a:	f000 f96d 	bl	402138 <__sinit>
  401e5e:	e7c4      	b.n	401dea <__swsetup_r+0x12>
  401e60:	6b21      	ldr	r1, [r4, #48]	; 0x30
  401e62:	b149      	cbz	r1, 401e78 <__swsetup_r+0xa0>
  401e64:	f104 0340 	add.w	r3, r4, #64	; 0x40
  401e68:	4299      	cmp	r1, r3
  401e6a:	d003      	beq.n	401e74 <__swsetup_r+0x9c>
  401e6c:	4628      	mov	r0, r5
  401e6e:	f000 fa3b 	bl	4022e8 <_free_r>
  401e72:	89a2      	ldrh	r2, [r4, #12]
  401e74:	2300      	movs	r3, #0
  401e76:	6323      	str	r3, [r4, #48]	; 0x30
  401e78:	f022 0224 	bic.w	r2, r2, #36	; 0x24
  401e7c:	2300      	movs	r3, #0
  401e7e:	6920      	ldr	r0, [r4, #16]
  401e80:	6063      	str	r3, [r4, #4]
  401e82:	b292      	uxth	r2, r2
  401e84:	6020      	str	r0, [r4, #0]
  401e86:	e7c6      	b.n	401e16 <__swsetup_r+0x3e>
  401e88:	f042 0240 	orr.w	r2, r2, #64	; 0x40
  401e8c:	2309      	movs	r3, #9
  401e8e:	602b      	str	r3, [r5, #0]
  401e90:	f04f 30ff 	mov.w	r0, #4294967295
  401e94:	81a2      	strh	r2, [r4, #12]
  401e96:	bd38      	pop	{r3, r4, r5, pc}
  401e98:	20000430 	.word	0x20000430

00401e9c <register_fini>:
  401e9c:	4b02      	ldr	r3, [pc, #8]	; (401ea8 <register_fini+0xc>)
  401e9e:	b113      	cbz	r3, 401ea6 <register_fini+0xa>
  401ea0:	4802      	ldr	r0, [pc, #8]	; (401eac <register_fini+0x10>)
  401ea2:	f000 b805 	b.w	401eb0 <atexit>
  401ea6:	4770      	bx	lr
  401ea8:	00000000 	.word	0x00000000
  401eac:	0040214d 	.word	0x0040214d

00401eb0 <atexit>:
  401eb0:	4601      	mov	r1, r0
  401eb2:	2000      	movs	r0, #0
  401eb4:	4602      	mov	r2, r0
  401eb6:	4603      	mov	r3, r0
  401eb8:	f001 bbee 	b.w	403698 <__register_exitproc>

00401ebc <__sflush_r>:
  401ebc:	898b      	ldrh	r3, [r1, #12]
  401ebe:	b29a      	uxth	r2, r3
  401ec0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  401ec4:	460d      	mov	r5, r1
  401ec6:	0711      	lsls	r1, r2, #28
  401ec8:	4680      	mov	r8, r0
  401eca:	d43c      	bmi.n	401f46 <__sflush_r+0x8a>
  401ecc:	686a      	ldr	r2, [r5, #4]
  401ece:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
  401ed2:	2a00      	cmp	r2, #0
  401ed4:	81ab      	strh	r3, [r5, #12]
  401ed6:	dd65      	ble.n	401fa4 <__sflush_r+0xe8>
  401ed8:	6aae      	ldr	r6, [r5, #40]	; 0x28
  401eda:	2e00      	cmp	r6, #0
  401edc:	d04b      	beq.n	401f76 <__sflush_r+0xba>
  401ede:	b29b      	uxth	r3, r3
  401ee0:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
  401ee4:	2100      	movs	r1, #0
  401ee6:	b292      	uxth	r2, r2
  401ee8:	f8d8 4000 	ldr.w	r4, [r8]
  401eec:	f8c8 1000 	str.w	r1, [r8]
  401ef0:	2a00      	cmp	r2, #0
  401ef2:	d05b      	beq.n	401fac <__sflush_r+0xf0>
  401ef4:	6d2a      	ldr	r2, [r5, #80]	; 0x50
  401ef6:	075f      	lsls	r7, r3, #29
  401ef8:	d505      	bpl.n	401f06 <__sflush_r+0x4a>
  401efa:	6869      	ldr	r1, [r5, #4]
  401efc:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  401efe:	1a52      	subs	r2, r2, r1
  401f00:	b10b      	cbz	r3, 401f06 <__sflush_r+0x4a>
  401f02:	6beb      	ldr	r3, [r5, #60]	; 0x3c
  401f04:	1ad2      	subs	r2, r2, r3
  401f06:	4640      	mov	r0, r8
  401f08:	69e9      	ldr	r1, [r5, #28]
  401f0a:	2300      	movs	r3, #0
  401f0c:	47b0      	blx	r6
  401f0e:	1c46      	adds	r6, r0, #1
  401f10:	d056      	beq.n	401fc0 <__sflush_r+0x104>
  401f12:	89ab      	ldrh	r3, [r5, #12]
  401f14:	692a      	ldr	r2, [r5, #16]
  401f16:	602a      	str	r2, [r5, #0]
  401f18:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  401f1c:	b29b      	uxth	r3, r3
  401f1e:	2200      	movs	r2, #0
  401f20:	606a      	str	r2, [r5, #4]
  401f22:	04da      	lsls	r2, r3, #19
  401f24:	81ab      	strh	r3, [r5, #12]
  401f26:	d43b      	bmi.n	401fa0 <__sflush_r+0xe4>
  401f28:	6b29      	ldr	r1, [r5, #48]	; 0x30
  401f2a:	f8c8 4000 	str.w	r4, [r8]
  401f2e:	b311      	cbz	r1, 401f76 <__sflush_r+0xba>
  401f30:	f105 0340 	add.w	r3, r5, #64	; 0x40
  401f34:	4299      	cmp	r1, r3
  401f36:	d002      	beq.n	401f3e <__sflush_r+0x82>
  401f38:	4640      	mov	r0, r8
  401f3a:	f000 f9d5 	bl	4022e8 <_free_r>
  401f3e:	2000      	movs	r0, #0
  401f40:	6328      	str	r0, [r5, #48]	; 0x30
  401f42:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  401f46:	692e      	ldr	r6, [r5, #16]
  401f48:	b1ae      	cbz	r6, 401f76 <__sflush_r+0xba>
  401f4a:	682c      	ldr	r4, [r5, #0]
  401f4c:	602e      	str	r6, [r5, #0]
  401f4e:	0791      	lsls	r1, r2, #30
  401f50:	bf0c      	ite	eq
  401f52:	696b      	ldreq	r3, [r5, #20]
  401f54:	2300      	movne	r3, #0
  401f56:	1ba4      	subs	r4, r4, r6
  401f58:	60ab      	str	r3, [r5, #8]
  401f5a:	e00a      	b.n	401f72 <__sflush_r+0xb6>
  401f5c:	4632      	mov	r2, r6
  401f5e:	4623      	mov	r3, r4
  401f60:	6a6f      	ldr	r7, [r5, #36]	; 0x24
  401f62:	69e9      	ldr	r1, [r5, #28]
  401f64:	4640      	mov	r0, r8
  401f66:	47b8      	blx	r7
  401f68:	2800      	cmp	r0, #0
  401f6a:	eba4 0400 	sub.w	r4, r4, r0
  401f6e:	4406      	add	r6, r0
  401f70:	dd04      	ble.n	401f7c <__sflush_r+0xc0>
  401f72:	2c00      	cmp	r4, #0
  401f74:	dcf2      	bgt.n	401f5c <__sflush_r+0xa0>
  401f76:	2000      	movs	r0, #0
  401f78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  401f7c:	89ab      	ldrh	r3, [r5, #12]
  401f7e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  401f82:	81ab      	strh	r3, [r5, #12]
  401f84:	f04f 30ff 	mov.w	r0, #4294967295
  401f88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  401f8c:	89ab      	ldrh	r3, [r5, #12]
  401f8e:	692a      	ldr	r2, [r5, #16]
  401f90:	6069      	str	r1, [r5, #4]
  401f92:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  401f96:	b29b      	uxth	r3, r3
  401f98:	81ab      	strh	r3, [r5, #12]
  401f9a:	04db      	lsls	r3, r3, #19
  401f9c:	602a      	str	r2, [r5, #0]
  401f9e:	d5c3      	bpl.n	401f28 <__sflush_r+0x6c>
  401fa0:	6528      	str	r0, [r5, #80]	; 0x50
  401fa2:	e7c1      	b.n	401f28 <__sflush_r+0x6c>
  401fa4:	6bea      	ldr	r2, [r5, #60]	; 0x3c
  401fa6:	2a00      	cmp	r2, #0
  401fa8:	dc96      	bgt.n	401ed8 <__sflush_r+0x1c>
  401faa:	e7e4      	b.n	401f76 <__sflush_r+0xba>
  401fac:	2301      	movs	r3, #1
  401fae:	4640      	mov	r0, r8
  401fb0:	69e9      	ldr	r1, [r5, #28]
  401fb2:	47b0      	blx	r6
  401fb4:	1c43      	adds	r3, r0, #1
  401fb6:	4602      	mov	r2, r0
  401fb8:	d019      	beq.n	401fee <__sflush_r+0x132>
  401fba:	89ab      	ldrh	r3, [r5, #12]
  401fbc:	6aae      	ldr	r6, [r5, #40]	; 0x28
  401fbe:	e79a      	b.n	401ef6 <__sflush_r+0x3a>
  401fc0:	f8d8 1000 	ldr.w	r1, [r8]
  401fc4:	2900      	cmp	r1, #0
  401fc6:	d0e1      	beq.n	401f8c <__sflush_r+0xd0>
  401fc8:	291d      	cmp	r1, #29
  401fca:	d007      	beq.n	401fdc <__sflush_r+0x120>
  401fcc:	2916      	cmp	r1, #22
  401fce:	d005      	beq.n	401fdc <__sflush_r+0x120>
  401fd0:	89ab      	ldrh	r3, [r5, #12]
  401fd2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  401fd6:	81ab      	strh	r3, [r5, #12]
  401fd8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  401fdc:	89ab      	ldrh	r3, [r5, #12]
  401fde:	692a      	ldr	r2, [r5, #16]
  401fe0:	602a      	str	r2, [r5, #0]
  401fe2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  401fe6:	2200      	movs	r2, #0
  401fe8:	81ab      	strh	r3, [r5, #12]
  401fea:	606a      	str	r2, [r5, #4]
  401fec:	e79c      	b.n	401f28 <__sflush_r+0x6c>
  401fee:	f8d8 3000 	ldr.w	r3, [r8]
  401ff2:	2b00      	cmp	r3, #0
  401ff4:	d0e1      	beq.n	401fba <__sflush_r+0xfe>
  401ff6:	2b1d      	cmp	r3, #29
  401ff8:	d007      	beq.n	40200a <__sflush_r+0x14e>
  401ffa:	2b16      	cmp	r3, #22
  401ffc:	d005      	beq.n	40200a <__sflush_r+0x14e>
  401ffe:	89ab      	ldrh	r3, [r5, #12]
  402000:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  402004:	81ab      	strh	r3, [r5, #12]
  402006:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40200a:	f8c8 4000 	str.w	r4, [r8]
  40200e:	e7b2      	b.n	401f76 <__sflush_r+0xba>

00402010 <_fflush_r>:
  402010:	b510      	push	{r4, lr}
  402012:	4604      	mov	r4, r0
  402014:	b082      	sub	sp, #8
  402016:	b108      	cbz	r0, 40201c <_fflush_r+0xc>
  402018:	6b83      	ldr	r3, [r0, #56]	; 0x38
  40201a:	b153      	cbz	r3, 402032 <_fflush_r+0x22>
  40201c:	f9b1 000c 	ldrsh.w	r0, [r1, #12]
  402020:	b908      	cbnz	r0, 402026 <_fflush_r+0x16>
  402022:	b002      	add	sp, #8
  402024:	bd10      	pop	{r4, pc}
  402026:	4620      	mov	r0, r4
  402028:	b002      	add	sp, #8
  40202a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  40202e:	f7ff bf45 	b.w	401ebc <__sflush_r>
  402032:	9101      	str	r1, [sp, #4]
  402034:	f000 f880 	bl	402138 <__sinit>
  402038:	9901      	ldr	r1, [sp, #4]
  40203a:	e7ef      	b.n	40201c <_fflush_r+0xc>

0040203c <_cleanup_r>:
  40203c:	4901      	ldr	r1, [pc, #4]	; (402044 <_cleanup_r+0x8>)
  40203e:	f000 bbb7 	b.w	4027b0 <_fwalk_reent>
  402042:	bf00      	nop
  402044:	00403761 	.word	0x00403761

00402048 <__sinit.part.1>:
  402048:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40204c:	4b35      	ldr	r3, [pc, #212]	; (402124 <__sinit.part.1+0xdc>)
  40204e:	6845      	ldr	r5, [r0, #4]
  402050:	63c3      	str	r3, [r0, #60]	; 0x3c
  402052:	2400      	movs	r4, #0
  402054:	4607      	mov	r7, r0
  402056:	f500 723b 	add.w	r2, r0, #748	; 0x2ec
  40205a:	2304      	movs	r3, #4
  40205c:	2103      	movs	r1, #3
  40205e:	f8c0 12e4 	str.w	r1, [r0, #740]	; 0x2e4
  402062:	f8c0 22e8 	str.w	r2, [r0, #744]	; 0x2e8
  402066:	f8c0 42e0 	str.w	r4, [r0, #736]	; 0x2e0
  40206a:	b083      	sub	sp, #12
  40206c:	602c      	str	r4, [r5, #0]
  40206e:	606c      	str	r4, [r5, #4]
  402070:	60ac      	str	r4, [r5, #8]
  402072:	666c      	str	r4, [r5, #100]	; 0x64
  402074:	81ec      	strh	r4, [r5, #14]
  402076:	612c      	str	r4, [r5, #16]
  402078:	616c      	str	r4, [r5, #20]
  40207a:	61ac      	str	r4, [r5, #24]
  40207c:	81ab      	strh	r3, [r5, #12]
  40207e:	4621      	mov	r1, r4
  402080:	f105 005c 	add.w	r0, r5, #92	; 0x5c
  402084:	2208      	movs	r2, #8
  402086:	f7fe fef1 	bl	400e6c <memset>
  40208a:	68be      	ldr	r6, [r7, #8]
  40208c:	f8df b098 	ldr.w	fp, [pc, #152]	; 402128 <__sinit.part.1+0xe0>
  402090:	f8df a098 	ldr.w	sl, [pc, #152]	; 40212c <__sinit.part.1+0xe4>
  402094:	f8df 9098 	ldr.w	r9, [pc, #152]	; 402130 <__sinit.part.1+0xe8>
  402098:	f8df 8098 	ldr.w	r8, [pc, #152]	; 402134 <__sinit.part.1+0xec>
  40209c:	f8c5 b020 	str.w	fp, [r5, #32]
  4020a0:	2301      	movs	r3, #1
  4020a2:	2209      	movs	r2, #9
  4020a4:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
  4020a8:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
  4020ac:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
  4020b0:	61ed      	str	r5, [r5, #28]
  4020b2:	4621      	mov	r1, r4
  4020b4:	81f3      	strh	r3, [r6, #14]
  4020b6:	81b2      	strh	r2, [r6, #12]
  4020b8:	f106 005c 	add.w	r0, r6, #92	; 0x5c
  4020bc:	6034      	str	r4, [r6, #0]
  4020be:	6074      	str	r4, [r6, #4]
  4020c0:	60b4      	str	r4, [r6, #8]
  4020c2:	6674      	str	r4, [r6, #100]	; 0x64
  4020c4:	6134      	str	r4, [r6, #16]
  4020c6:	6174      	str	r4, [r6, #20]
  4020c8:	61b4      	str	r4, [r6, #24]
  4020ca:	2208      	movs	r2, #8
  4020cc:	9301      	str	r3, [sp, #4]
  4020ce:	f7fe fecd 	bl	400e6c <memset>
  4020d2:	68fd      	ldr	r5, [r7, #12]
  4020d4:	61f6      	str	r6, [r6, #28]
  4020d6:	2012      	movs	r0, #18
  4020d8:	2202      	movs	r2, #2
  4020da:	f8c6 b020 	str.w	fp, [r6, #32]
  4020de:	f8c6 a024 	str.w	sl, [r6, #36]	; 0x24
  4020e2:	f8c6 9028 	str.w	r9, [r6, #40]	; 0x28
  4020e6:	f8c6 802c 	str.w	r8, [r6, #44]	; 0x2c
  4020ea:	4621      	mov	r1, r4
  4020ec:	81a8      	strh	r0, [r5, #12]
  4020ee:	81ea      	strh	r2, [r5, #14]
  4020f0:	602c      	str	r4, [r5, #0]
  4020f2:	606c      	str	r4, [r5, #4]
  4020f4:	60ac      	str	r4, [r5, #8]
  4020f6:	666c      	str	r4, [r5, #100]	; 0x64
  4020f8:	612c      	str	r4, [r5, #16]
  4020fa:	616c      	str	r4, [r5, #20]
  4020fc:	61ac      	str	r4, [r5, #24]
  4020fe:	f105 005c 	add.w	r0, r5, #92	; 0x5c
  402102:	2208      	movs	r2, #8
  402104:	f7fe feb2 	bl	400e6c <memset>
  402108:	9b01      	ldr	r3, [sp, #4]
  40210a:	61ed      	str	r5, [r5, #28]
  40210c:	f8c5 b020 	str.w	fp, [r5, #32]
  402110:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
  402114:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
  402118:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
  40211c:	63bb      	str	r3, [r7, #56]	; 0x38
  40211e:	b003      	add	sp, #12
  402120:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  402124:	0040203d 	.word	0x0040203d
  402128:	004034d5 	.word	0x004034d5
  40212c:	004034f9 	.word	0x004034f9
  402130:	00403531 	.word	0x00403531
  402134:	00403551 	.word	0x00403551

00402138 <__sinit>:
  402138:	6b83      	ldr	r3, [r0, #56]	; 0x38
  40213a:	b103      	cbz	r3, 40213e <__sinit+0x6>
  40213c:	4770      	bx	lr
  40213e:	f7ff bf83 	b.w	402048 <__sinit.part.1>
  402142:	bf00      	nop

00402144 <__sfp_lock_acquire>:
  402144:	4770      	bx	lr
  402146:	bf00      	nop

00402148 <__sfp_lock_release>:
  402148:	4770      	bx	lr
  40214a:	bf00      	nop

0040214c <__libc_fini_array>:
  40214c:	b538      	push	{r3, r4, r5, lr}
  40214e:	4b08      	ldr	r3, [pc, #32]	; (402170 <__libc_fini_array+0x24>)
  402150:	4d08      	ldr	r5, [pc, #32]	; (402174 <__libc_fini_array+0x28>)
  402152:	1aed      	subs	r5, r5, r3
  402154:	10ac      	asrs	r4, r5, #2
  402156:	bf18      	it	ne
  402158:	18ed      	addne	r5, r5, r3
  40215a:	d005      	beq.n	402168 <__libc_fini_array+0x1c>
  40215c:	3c01      	subs	r4, #1
  40215e:	f855 3d04 	ldr.w	r3, [r5, #-4]!
  402162:	4798      	blx	r3
  402164:	2c00      	cmp	r4, #0
  402166:	d1f9      	bne.n	40215c <__libc_fini_array+0x10>
  402168:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  40216c:	f003 ba10 	b.w	405590 <_fini>
  402170:	0040559c 	.word	0x0040559c
  402174:	004055a0 	.word	0x004055a0

00402178 <__fputwc>:
  402178:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40217c:	b082      	sub	sp, #8
  40217e:	4607      	mov	r7, r0
  402180:	460e      	mov	r6, r1
  402182:	4614      	mov	r4, r2
  402184:	f000 fb42 	bl	40280c <__locale_mb_cur_max>
  402188:	2801      	cmp	r0, #1
  40218a:	d041      	beq.n	402210 <__fputwc+0x98>
  40218c:	4638      	mov	r0, r7
  40218e:	a901      	add	r1, sp, #4
  402190:	4632      	mov	r2, r6
  402192:	f104 035c 	add.w	r3, r4, #92	; 0x5c
  402196:	f001 fa33 	bl	403600 <_wcrtomb_r>
  40219a:	f1b0 3fff 	cmp.w	r0, #4294967295
  40219e:	4680      	mov	r8, r0
  4021a0:	d02f      	beq.n	402202 <__fputwc+0x8a>
  4021a2:	2800      	cmp	r0, #0
  4021a4:	d03c      	beq.n	402220 <__fputwc+0xa8>
  4021a6:	f89d 1004 	ldrb.w	r1, [sp, #4]
  4021aa:	2500      	movs	r5, #0
  4021ac:	e009      	b.n	4021c2 <__fputwc+0x4a>
  4021ae:	6823      	ldr	r3, [r4, #0]
  4021b0:	7019      	strb	r1, [r3, #0]
  4021b2:	6823      	ldr	r3, [r4, #0]
  4021b4:	3301      	adds	r3, #1
  4021b6:	6023      	str	r3, [r4, #0]
  4021b8:	3501      	adds	r5, #1
  4021ba:	45a8      	cmp	r8, r5
  4021bc:	d930      	bls.n	402220 <__fputwc+0xa8>
  4021be:	ab01      	add	r3, sp, #4
  4021c0:	5d59      	ldrb	r1, [r3, r5]
  4021c2:	68a3      	ldr	r3, [r4, #8]
  4021c4:	3b01      	subs	r3, #1
  4021c6:	2b00      	cmp	r3, #0
  4021c8:	60a3      	str	r3, [r4, #8]
  4021ca:	daf0      	bge.n	4021ae <__fputwc+0x36>
  4021cc:	69a2      	ldr	r2, [r4, #24]
  4021ce:	4293      	cmp	r3, r2
  4021d0:	db07      	blt.n	4021e2 <__fputwc+0x6a>
  4021d2:	6823      	ldr	r3, [r4, #0]
  4021d4:	7019      	strb	r1, [r3, #0]
  4021d6:	6823      	ldr	r3, [r4, #0]
  4021d8:	7819      	ldrb	r1, [r3, #0]
  4021da:	290a      	cmp	r1, #10
  4021dc:	f103 0301 	add.w	r3, r3, #1
  4021e0:	d1e9      	bne.n	4021b6 <__fputwc+0x3e>
  4021e2:	4638      	mov	r0, r7
  4021e4:	4622      	mov	r2, r4
  4021e6:	f001 f9b7 	bl	403558 <__swbuf_r>
  4021ea:	f1a0 30ff 	sub.w	r0, r0, #4294967295
  4021ee:	fab0 f080 	clz	r0, r0
  4021f2:	0940      	lsrs	r0, r0, #5
  4021f4:	2800      	cmp	r0, #0
  4021f6:	d0df      	beq.n	4021b8 <__fputwc+0x40>
  4021f8:	f04f 30ff 	mov.w	r0, #4294967295
  4021fc:	b002      	add	sp, #8
  4021fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  402202:	89a3      	ldrh	r3, [r4, #12]
  402204:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  402208:	81a3      	strh	r3, [r4, #12]
  40220a:	b002      	add	sp, #8
  40220c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  402210:	1e73      	subs	r3, r6, #1
  402212:	2bfe      	cmp	r3, #254	; 0xfe
  402214:	d8ba      	bhi.n	40218c <__fputwc+0x14>
  402216:	b2f1      	uxtb	r1, r6
  402218:	4680      	mov	r8, r0
  40221a:	f88d 1004 	strb.w	r1, [sp, #4]
  40221e:	e7c4      	b.n	4021aa <__fputwc+0x32>
  402220:	4630      	mov	r0, r6
  402222:	b002      	add	sp, #8
  402224:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00402228 <_fputwc_r>:
  402228:	8993      	ldrh	r3, [r2, #12]
  40222a:	f413 5f00 	tst.w	r3, #8192	; 0x2000
  40222e:	d10b      	bne.n	402248 <_fputwc_r+0x20>
  402230:	b410      	push	{r4}
  402232:	6e54      	ldr	r4, [r2, #100]	; 0x64
  402234:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
  402238:	f444 5400 	orr.w	r4, r4, #8192	; 0x2000
  40223c:	6654      	str	r4, [r2, #100]	; 0x64
  40223e:	8193      	strh	r3, [r2, #12]
  402240:	f85d 4b04 	ldr.w	r4, [sp], #4
  402244:	f7ff bf98 	b.w	402178 <__fputwc>
  402248:	f7ff bf96 	b.w	402178 <__fputwc>

0040224c <_malloc_trim_r>:
  40224c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40224e:	4f23      	ldr	r7, [pc, #140]	; (4022dc <_malloc_trim_r+0x90>)
  402250:	460c      	mov	r4, r1
  402252:	4606      	mov	r6, r0
  402254:	f000 ff32 	bl	4030bc <__malloc_lock>
  402258:	68bb      	ldr	r3, [r7, #8]
  40225a:	685d      	ldr	r5, [r3, #4]
  40225c:	f025 0503 	bic.w	r5, r5, #3
  402260:	1b29      	subs	r1, r5, r4
  402262:	f601 71ef 	addw	r1, r1, #4079	; 0xfef
  402266:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
  40226a:	f021 010f 	bic.w	r1, r1, #15
  40226e:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
  402272:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
  402276:	db07      	blt.n	402288 <_malloc_trim_r+0x3c>
  402278:	4630      	mov	r0, r6
  40227a:	2100      	movs	r1, #0
  40227c:	f001 f918 	bl	4034b0 <_sbrk_r>
  402280:	68bb      	ldr	r3, [r7, #8]
  402282:	442b      	add	r3, r5
  402284:	4298      	cmp	r0, r3
  402286:	d004      	beq.n	402292 <_malloc_trim_r+0x46>
  402288:	4630      	mov	r0, r6
  40228a:	f000 ff19 	bl	4030c0 <__malloc_unlock>
  40228e:	2000      	movs	r0, #0
  402290:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  402292:	4630      	mov	r0, r6
  402294:	4261      	negs	r1, r4
  402296:	f001 f90b 	bl	4034b0 <_sbrk_r>
  40229a:	3001      	adds	r0, #1
  40229c:	d00d      	beq.n	4022ba <_malloc_trim_r+0x6e>
  40229e:	4b10      	ldr	r3, [pc, #64]	; (4022e0 <_malloc_trim_r+0x94>)
  4022a0:	68ba      	ldr	r2, [r7, #8]
  4022a2:	6819      	ldr	r1, [r3, #0]
  4022a4:	1b2d      	subs	r5, r5, r4
  4022a6:	f045 0501 	orr.w	r5, r5, #1
  4022aa:	4630      	mov	r0, r6
  4022ac:	1b09      	subs	r1, r1, r4
  4022ae:	6055      	str	r5, [r2, #4]
  4022b0:	6019      	str	r1, [r3, #0]
  4022b2:	f000 ff05 	bl	4030c0 <__malloc_unlock>
  4022b6:	2001      	movs	r0, #1
  4022b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4022ba:	4630      	mov	r0, r6
  4022bc:	2100      	movs	r1, #0
  4022be:	f001 f8f7 	bl	4034b0 <_sbrk_r>
  4022c2:	68ba      	ldr	r2, [r7, #8]
  4022c4:	1a83      	subs	r3, r0, r2
  4022c6:	2b0f      	cmp	r3, #15
  4022c8:	ddde      	ble.n	402288 <_malloc_trim_r+0x3c>
  4022ca:	4c06      	ldr	r4, [pc, #24]	; (4022e4 <_malloc_trim_r+0x98>)
  4022cc:	4904      	ldr	r1, [pc, #16]	; (4022e0 <_malloc_trim_r+0x94>)
  4022ce:	6824      	ldr	r4, [r4, #0]
  4022d0:	f043 0301 	orr.w	r3, r3, #1
  4022d4:	1b00      	subs	r0, r0, r4
  4022d6:	6053      	str	r3, [r2, #4]
  4022d8:	6008      	str	r0, [r1, #0]
  4022da:	e7d5      	b.n	402288 <_malloc_trim_r+0x3c>
  4022dc:	20000458 	.word	0x20000458
  4022e0:	20000918 	.word	0x20000918
  4022e4:	20000864 	.word	0x20000864

004022e8 <_free_r>:
  4022e8:	2900      	cmp	r1, #0
  4022ea:	d04e      	beq.n	40238a <_free_r+0xa2>
  4022ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4022f0:	460c      	mov	r4, r1
  4022f2:	4680      	mov	r8, r0
  4022f4:	f000 fee2 	bl	4030bc <__malloc_lock>
  4022f8:	f854 7c04 	ldr.w	r7, [r4, #-4]
  4022fc:	4962      	ldr	r1, [pc, #392]	; (402488 <_free_r+0x1a0>)
  4022fe:	f027 0201 	bic.w	r2, r7, #1
  402302:	f1a4 0508 	sub.w	r5, r4, #8
  402306:	18ab      	adds	r3, r5, r2
  402308:	688e      	ldr	r6, [r1, #8]
  40230a:	6858      	ldr	r0, [r3, #4]
  40230c:	429e      	cmp	r6, r3
  40230e:	f020 0003 	bic.w	r0, r0, #3
  402312:	d05a      	beq.n	4023ca <_free_r+0xe2>
  402314:	07fe      	lsls	r6, r7, #31
  402316:	6058      	str	r0, [r3, #4]
  402318:	d40b      	bmi.n	402332 <_free_r+0x4a>
  40231a:	f854 7c08 	ldr.w	r7, [r4, #-8]
  40231e:	1bed      	subs	r5, r5, r7
  402320:	f101 0e08 	add.w	lr, r1, #8
  402324:	68ac      	ldr	r4, [r5, #8]
  402326:	4574      	cmp	r4, lr
  402328:	443a      	add	r2, r7
  40232a:	d067      	beq.n	4023fc <_free_r+0x114>
  40232c:	68ef      	ldr	r7, [r5, #12]
  40232e:	60e7      	str	r7, [r4, #12]
  402330:	60bc      	str	r4, [r7, #8]
  402332:	181c      	adds	r4, r3, r0
  402334:	6864      	ldr	r4, [r4, #4]
  402336:	07e4      	lsls	r4, r4, #31
  402338:	d40c      	bmi.n	402354 <_free_r+0x6c>
  40233a:	4f54      	ldr	r7, [pc, #336]	; (40248c <_free_r+0x1a4>)
  40233c:	689c      	ldr	r4, [r3, #8]
  40233e:	42bc      	cmp	r4, r7
  402340:	4402      	add	r2, r0
  402342:	d07c      	beq.n	40243e <_free_r+0x156>
  402344:	68d8      	ldr	r0, [r3, #12]
  402346:	60e0      	str	r0, [r4, #12]
  402348:	f042 0301 	orr.w	r3, r2, #1
  40234c:	6084      	str	r4, [r0, #8]
  40234e:	606b      	str	r3, [r5, #4]
  402350:	50aa      	str	r2, [r5, r2]
  402352:	e003      	b.n	40235c <_free_r+0x74>
  402354:	f042 0301 	orr.w	r3, r2, #1
  402358:	606b      	str	r3, [r5, #4]
  40235a:	50aa      	str	r2, [r5, r2]
  40235c:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
  402360:	d214      	bcs.n	40238c <_free_r+0xa4>
  402362:	08d2      	lsrs	r2, r2, #3
  402364:	eb01 03c2 	add.w	r3, r1, r2, lsl #3
  402368:	6848      	ldr	r0, [r1, #4]
  40236a:	689f      	ldr	r7, [r3, #8]
  40236c:	60af      	str	r7, [r5, #8]
  40236e:	1092      	asrs	r2, r2, #2
  402370:	2401      	movs	r4, #1
  402372:	fa04 f202 	lsl.w	r2, r4, r2
  402376:	4310      	orrs	r0, r2
  402378:	60eb      	str	r3, [r5, #12]
  40237a:	6048      	str	r0, [r1, #4]
  40237c:	609d      	str	r5, [r3, #8]
  40237e:	60fd      	str	r5, [r7, #12]
  402380:	4640      	mov	r0, r8
  402382:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  402386:	f000 be9b 	b.w	4030c0 <__malloc_unlock>
  40238a:	4770      	bx	lr
  40238c:	0a53      	lsrs	r3, r2, #9
  40238e:	2b04      	cmp	r3, #4
  402390:	d847      	bhi.n	402422 <_free_r+0x13a>
  402392:	0993      	lsrs	r3, r2, #6
  402394:	f103 0438 	add.w	r4, r3, #56	; 0x38
  402398:	0060      	lsls	r0, r4, #1
  40239a:	eb01 0080 	add.w	r0, r1, r0, lsl #2
  40239e:	493a      	ldr	r1, [pc, #232]	; (402488 <_free_r+0x1a0>)
  4023a0:	6883      	ldr	r3, [r0, #8]
  4023a2:	4283      	cmp	r3, r0
  4023a4:	d043      	beq.n	40242e <_free_r+0x146>
  4023a6:	6859      	ldr	r1, [r3, #4]
  4023a8:	f021 0103 	bic.w	r1, r1, #3
  4023ac:	4291      	cmp	r1, r2
  4023ae:	d902      	bls.n	4023b6 <_free_r+0xce>
  4023b0:	689b      	ldr	r3, [r3, #8]
  4023b2:	4298      	cmp	r0, r3
  4023b4:	d1f7      	bne.n	4023a6 <_free_r+0xbe>
  4023b6:	68da      	ldr	r2, [r3, #12]
  4023b8:	60ea      	str	r2, [r5, #12]
  4023ba:	60ab      	str	r3, [r5, #8]
  4023bc:	4640      	mov	r0, r8
  4023be:	6095      	str	r5, [r2, #8]
  4023c0:	60dd      	str	r5, [r3, #12]
  4023c2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  4023c6:	f000 be7b 	b.w	4030c0 <__malloc_unlock>
  4023ca:	07ff      	lsls	r7, r7, #31
  4023cc:	4402      	add	r2, r0
  4023ce:	d407      	bmi.n	4023e0 <_free_r+0xf8>
  4023d0:	f854 3c08 	ldr.w	r3, [r4, #-8]
  4023d4:	1aed      	subs	r5, r5, r3
  4023d6:	441a      	add	r2, r3
  4023d8:	68a8      	ldr	r0, [r5, #8]
  4023da:	68eb      	ldr	r3, [r5, #12]
  4023dc:	60c3      	str	r3, [r0, #12]
  4023de:	6098      	str	r0, [r3, #8]
  4023e0:	4b2b      	ldr	r3, [pc, #172]	; (402490 <_free_r+0x1a8>)
  4023e2:	681b      	ldr	r3, [r3, #0]
  4023e4:	f042 0001 	orr.w	r0, r2, #1
  4023e8:	429a      	cmp	r2, r3
  4023ea:	6068      	str	r0, [r5, #4]
  4023ec:	608d      	str	r5, [r1, #8]
  4023ee:	d3c7      	bcc.n	402380 <_free_r+0x98>
  4023f0:	4b28      	ldr	r3, [pc, #160]	; (402494 <_free_r+0x1ac>)
  4023f2:	4640      	mov	r0, r8
  4023f4:	6819      	ldr	r1, [r3, #0]
  4023f6:	f7ff ff29 	bl	40224c <_malloc_trim_r>
  4023fa:	e7c1      	b.n	402380 <_free_r+0x98>
  4023fc:	1819      	adds	r1, r3, r0
  4023fe:	6849      	ldr	r1, [r1, #4]
  402400:	07c9      	lsls	r1, r1, #31
  402402:	d409      	bmi.n	402418 <_free_r+0x130>
  402404:	68d9      	ldr	r1, [r3, #12]
  402406:	689b      	ldr	r3, [r3, #8]
  402408:	4402      	add	r2, r0
  40240a:	f042 0001 	orr.w	r0, r2, #1
  40240e:	60d9      	str	r1, [r3, #12]
  402410:	608b      	str	r3, [r1, #8]
  402412:	6068      	str	r0, [r5, #4]
  402414:	50aa      	str	r2, [r5, r2]
  402416:	e7b3      	b.n	402380 <_free_r+0x98>
  402418:	f042 0301 	orr.w	r3, r2, #1
  40241c:	606b      	str	r3, [r5, #4]
  40241e:	50aa      	str	r2, [r5, r2]
  402420:	e7ae      	b.n	402380 <_free_r+0x98>
  402422:	2b14      	cmp	r3, #20
  402424:	d814      	bhi.n	402450 <_free_r+0x168>
  402426:	f103 045b 	add.w	r4, r3, #91	; 0x5b
  40242a:	0060      	lsls	r0, r4, #1
  40242c:	e7b5      	b.n	40239a <_free_r+0xb2>
  40242e:	684a      	ldr	r2, [r1, #4]
  402430:	10a4      	asrs	r4, r4, #2
  402432:	2001      	movs	r0, #1
  402434:	40a0      	lsls	r0, r4
  402436:	4302      	orrs	r2, r0
  402438:	604a      	str	r2, [r1, #4]
  40243a:	461a      	mov	r2, r3
  40243c:	e7bc      	b.n	4023b8 <_free_r+0xd0>
  40243e:	f042 0301 	orr.w	r3, r2, #1
  402442:	614d      	str	r5, [r1, #20]
  402444:	610d      	str	r5, [r1, #16]
  402446:	60ec      	str	r4, [r5, #12]
  402448:	60ac      	str	r4, [r5, #8]
  40244a:	606b      	str	r3, [r5, #4]
  40244c:	50aa      	str	r2, [r5, r2]
  40244e:	e797      	b.n	402380 <_free_r+0x98>
  402450:	2b54      	cmp	r3, #84	; 0x54
  402452:	d804      	bhi.n	40245e <_free_r+0x176>
  402454:	0b13      	lsrs	r3, r2, #12
  402456:	f103 046e 	add.w	r4, r3, #110	; 0x6e
  40245a:	0060      	lsls	r0, r4, #1
  40245c:	e79d      	b.n	40239a <_free_r+0xb2>
  40245e:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
  402462:	d804      	bhi.n	40246e <_free_r+0x186>
  402464:	0bd3      	lsrs	r3, r2, #15
  402466:	f103 0477 	add.w	r4, r3, #119	; 0x77
  40246a:	0060      	lsls	r0, r4, #1
  40246c:	e795      	b.n	40239a <_free_r+0xb2>
  40246e:	f240 5054 	movw	r0, #1364	; 0x554
  402472:	4283      	cmp	r3, r0
  402474:	d804      	bhi.n	402480 <_free_r+0x198>
  402476:	0c93      	lsrs	r3, r2, #18
  402478:	f103 047c 	add.w	r4, r3, #124	; 0x7c
  40247c:	0060      	lsls	r0, r4, #1
  40247e:	e78c      	b.n	40239a <_free_r+0xb2>
  402480:	20fc      	movs	r0, #252	; 0xfc
  402482:	247e      	movs	r4, #126	; 0x7e
  402484:	e789      	b.n	40239a <_free_r+0xb2>
  402486:	bf00      	nop
  402488:	20000458 	.word	0x20000458
  40248c:	20000460 	.word	0x20000460
  402490:	20000860 	.word	0x20000860
  402494:	20000914 	.word	0x20000914

00402498 <__sfvwrite_r>:
  402498:	6893      	ldr	r3, [r2, #8]
  40249a:	2b00      	cmp	r3, #0
  40249c:	d07a      	beq.n	402594 <__sfvwrite_r+0xfc>
  40249e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4024a2:	f8b1 e00c 	ldrh.w	lr, [r1, #12]
  4024a6:	f01e 0f08 	tst.w	lr, #8
  4024aa:	b083      	sub	sp, #12
  4024ac:	460c      	mov	r4, r1
  4024ae:	4681      	mov	r9, r0
  4024b0:	4616      	mov	r6, r2
  4024b2:	d026      	beq.n	402502 <__sfvwrite_r+0x6a>
  4024b4:	690b      	ldr	r3, [r1, #16]
  4024b6:	b323      	cbz	r3, 402502 <__sfvwrite_r+0x6a>
  4024b8:	f00e 0802 	and.w	r8, lr, #2
  4024bc:	fa1f f088 	uxth.w	r0, r8
  4024c0:	6835      	ldr	r5, [r6, #0]
  4024c2:	b370      	cbz	r0, 402522 <__sfvwrite_r+0x8a>
  4024c4:	f04f 0a00 	mov.w	sl, #0
  4024c8:	f8df b2e0 	ldr.w	fp, [pc, #736]	; 4027ac <__sfvwrite_r+0x314>
  4024cc:	46d0      	mov	r8, sl
  4024ce:	45d8      	cmp	r8, fp
  4024d0:	4643      	mov	r3, r8
  4024d2:	4652      	mov	r2, sl
  4024d4:	bf28      	it	cs
  4024d6:	465b      	movcs	r3, fp
  4024d8:	4648      	mov	r0, r9
  4024da:	f1b8 0f00 	cmp.w	r8, #0
  4024de:	d053      	beq.n	402588 <__sfvwrite_r+0xf0>
  4024e0:	69e1      	ldr	r1, [r4, #28]
  4024e2:	6a67      	ldr	r7, [r4, #36]	; 0x24
  4024e4:	47b8      	blx	r7
  4024e6:	2800      	cmp	r0, #0
  4024e8:	dd73      	ble.n	4025d2 <__sfvwrite_r+0x13a>
  4024ea:	68b3      	ldr	r3, [r6, #8]
  4024ec:	1a1b      	subs	r3, r3, r0
  4024ee:	4482      	add	sl, r0
  4024f0:	ebc0 0808 	rsb	r8, r0, r8
  4024f4:	60b3      	str	r3, [r6, #8]
  4024f6:	2b00      	cmp	r3, #0
  4024f8:	d1e9      	bne.n	4024ce <__sfvwrite_r+0x36>
  4024fa:	2000      	movs	r0, #0
  4024fc:	b003      	add	sp, #12
  4024fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  402502:	4648      	mov	r0, r9
  402504:	4621      	mov	r1, r4
  402506:	f7ff fc67 	bl	401dd8 <__swsetup_r>
  40250a:	2800      	cmp	r0, #0
  40250c:	f040 8145 	bne.w	40279a <__sfvwrite_r+0x302>
  402510:	f8b4 e00c 	ldrh.w	lr, [r4, #12]
  402514:	6835      	ldr	r5, [r6, #0]
  402516:	f00e 0802 	and.w	r8, lr, #2
  40251a:	fa1f f088 	uxth.w	r0, r8
  40251e:	2800      	cmp	r0, #0
  402520:	d1d0      	bne.n	4024c4 <__sfvwrite_r+0x2c>
  402522:	f01e 0b01 	ands.w	fp, lr, #1
  402526:	d15d      	bne.n	4025e4 <__sfvwrite_r+0x14c>
  402528:	46d8      	mov	r8, fp
  40252a:	f1b8 0f00 	cmp.w	r8, #0
  40252e:	d025      	beq.n	40257c <__sfvwrite_r+0xe4>
  402530:	f41e 7f00 	tst.w	lr, #512	; 0x200
  402534:	68a7      	ldr	r7, [r4, #8]
  402536:	d02f      	beq.n	402598 <__sfvwrite_r+0x100>
  402538:	45b8      	cmp	r8, r7
  40253a:	46ba      	mov	sl, r7
  40253c:	f0c0 80a9 	bcc.w	402692 <__sfvwrite_r+0x1fa>
  402540:	f41e 6f90 	tst.w	lr, #1152	; 0x480
  402544:	f040 80b6 	bne.w	4026b4 <__sfvwrite_r+0x21c>
  402548:	6820      	ldr	r0, [r4, #0]
  40254a:	4652      	mov	r2, sl
  40254c:	4659      	mov	r1, fp
  40254e:	f000 fd51 	bl	402ff4 <memmove>
  402552:	68a0      	ldr	r0, [r4, #8]
  402554:	6822      	ldr	r2, [r4, #0]
  402556:	1bc0      	subs	r0, r0, r7
  402558:	eb02 030a 	add.w	r3, r2, sl
  40255c:	60a0      	str	r0, [r4, #8]
  40255e:	6023      	str	r3, [r4, #0]
  402560:	4640      	mov	r0, r8
  402562:	68b3      	ldr	r3, [r6, #8]
  402564:	1a1b      	subs	r3, r3, r0
  402566:	4483      	add	fp, r0
  402568:	ebc0 0808 	rsb	r8, r0, r8
  40256c:	60b3      	str	r3, [r6, #8]
  40256e:	2b00      	cmp	r3, #0
  402570:	d0c3      	beq.n	4024fa <__sfvwrite_r+0x62>
  402572:	f8b4 e00c 	ldrh.w	lr, [r4, #12]
  402576:	f1b8 0f00 	cmp.w	r8, #0
  40257a:	d1d9      	bne.n	402530 <__sfvwrite_r+0x98>
  40257c:	f8d5 b000 	ldr.w	fp, [r5]
  402580:	f8d5 8004 	ldr.w	r8, [r5, #4]
  402584:	3508      	adds	r5, #8
  402586:	e7d0      	b.n	40252a <__sfvwrite_r+0x92>
  402588:	f8d5 a000 	ldr.w	sl, [r5]
  40258c:	f8d5 8004 	ldr.w	r8, [r5, #4]
  402590:	3508      	adds	r5, #8
  402592:	e79c      	b.n	4024ce <__sfvwrite_r+0x36>
  402594:	2000      	movs	r0, #0
  402596:	4770      	bx	lr
  402598:	6820      	ldr	r0, [r4, #0]
  40259a:	6923      	ldr	r3, [r4, #16]
  40259c:	4298      	cmp	r0, r3
  40259e:	d803      	bhi.n	4025a8 <__sfvwrite_r+0x110>
  4025a0:	6962      	ldr	r2, [r4, #20]
  4025a2:	4590      	cmp	r8, r2
  4025a4:	f080 80b9 	bcs.w	40271a <__sfvwrite_r+0x282>
  4025a8:	4547      	cmp	r7, r8
  4025aa:	bf28      	it	cs
  4025ac:	4647      	movcs	r7, r8
  4025ae:	463a      	mov	r2, r7
  4025b0:	4659      	mov	r1, fp
  4025b2:	f000 fd1f 	bl	402ff4 <memmove>
  4025b6:	68a3      	ldr	r3, [r4, #8]
  4025b8:	6822      	ldr	r2, [r4, #0]
  4025ba:	1bdb      	subs	r3, r3, r7
  4025bc:	443a      	add	r2, r7
  4025be:	60a3      	str	r3, [r4, #8]
  4025c0:	6022      	str	r2, [r4, #0]
  4025c2:	2b00      	cmp	r3, #0
  4025c4:	d14a      	bne.n	40265c <__sfvwrite_r+0x1c4>
  4025c6:	4648      	mov	r0, r9
  4025c8:	4621      	mov	r1, r4
  4025ca:	f7ff fd21 	bl	402010 <_fflush_r>
  4025ce:	2800      	cmp	r0, #0
  4025d0:	d044      	beq.n	40265c <__sfvwrite_r+0x1c4>
  4025d2:	89a3      	ldrh	r3, [r4, #12]
  4025d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  4025d8:	f04f 30ff 	mov.w	r0, #4294967295
  4025dc:	81a3      	strh	r3, [r4, #12]
  4025de:	b003      	add	sp, #12
  4025e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4025e4:	4680      	mov	r8, r0
  4025e6:	9000      	str	r0, [sp, #0]
  4025e8:	4683      	mov	fp, r0
  4025ea:	4682      	mov	sl, r0
  4025ec:	f1ba 0f00 	cmp.w	sl, #0
  4025f0:	d02c      	beq.n	40264c <__sfvwrite_r+0x1b4>
  4025f2:	9b00      	ldr	r3, [sp, #0]
  4025f4:	2b00      	cmp	r3, #0
  4025f6:	d050      	beq.n	40269a <__sfvwrite_r+0x202>
  4025f8:	6820      	ldr	r0, [r4, #0]
  4025fa:	6921      	ldr	r1, [r4, #16]
  4025fc:	f8d4 e008 	ldr.w	lr, [r4, #8]
  402600:	6962      	ldr	r2, [r4, #20]
  402602:	45d0      	cmp	r8, sl
  402604:	4643      	mov	r3, r8
  402606:	bf28      	it	cs
  402608:	4653      	movcs	r3, sl
  40260a:	4288      	cmp	r0, r1
  40260c:	461f      	mov	r7, r3
  40260e:	d904      	bls.n	40261a <__sfvwrite_r+0x182>
  402610:	eb0e 0c02 	add.w	ip, lr, r2
  402614:	4563      	cmp	r3, ip
  402616:	f300 8092 	bgt.w	40273e <__sfvwrite_r+0x2a6>
  40261a:	4293      	cmp	r3, r2
  40261c:	db20      	blt.n	402660 <__sfvwrite_r+0x1c8>
  40261e:	4613      	mov	r3, r2
  402620:	6a67      	ldr	r7, [r4, #36]	; 0x24
  402622:	69e1      	ldr	r1, [r4, #28]
  402624:	4648      	mov	r0, r9
  402626:	465a      	mov	r2, fp
  402628:	47b8      	blx	r7
  40262a:	1e07      	subs	r7, r0, #0
  40262c:	ddd1      	ble.n	4025d2 <__sfvwrite_r+0x13a>
  40262e:	ebb8 0807 	subs.w	r8, r8, r7
  402632:	d025      	beq.n	402680 <__sfvwrite_r+0x1e8>
  402634:	68b3      	ldr	r3, [r6, #8]
  402636:	1bdb      	subs	r3, r3, r7
  402638:	44bb      	add	fp, r7
  40263a:	ebc7 0a0a 	rsb	sl, r7, sl
  40263e:	60b3      	str	r3, [r6, #8]
  402640:	2b00      	cmp	r3, #0
  402642:	f43f af5a 	beq.w	4024fa <__sfvwrite_r+0x62>
  402646:	f1ba 0f00 	cmp.w	sl, #0
  40264a:	d1d2      	bne.n	4025f2 <__sfvwrite_r+0x15a>
  40264c:	2300      	movs	r3, #0
  40264e:	f8d5 b000 	ldr.w	fp, [r5]
  402652:	f8d5 a004 	ldr.w	sl, [r5, #4]
  402656:	9300      	str	r3, [sp, #0]
  402658:	3508      	adds	r5, #8
  40265a:	e7c7      	b.n	4025ec <__sfvwrite_r+0x154>
  40265c:	4638      	mov	r0, r7
  40265e:	e780      	b.n	402562 <__sfvwrite_r+0xca>
  402660:	461a      	mov	r2, r3
  402662:	4659      	mov	r1, fp
  402664:	9301      	str	r3, [sp, #4]
  402666:	f000 fcc5 	bl	402ff4 <memmove>
  40266a:	68a2      	ldr	r2, [r4, #8]
  40266c:	6821      	ldr	r1, [r4, #0]
  40266e:	9b01      	ldr	r3, [sp, #4]
  402670:	ebb8 0807 	subs.w	r8, r8, r7
  402674:	eba2 0203 	sub.w	r2, r2, r3
  402678:	440b      	add	r3, r1
  40267a:	60a2      	str	r2, [r4, #8]
  40267c:	6023      	str	r3, [r4, #0]
  40267e:	d1d9      	bne.n	402634 <__sfvwrite_r+0x19c>
  402680:	4648      	mov	r0, r9
  402682:	4621      	mov	r1, r4
  402684:	f7ff fcc4 	bl	402010 <_fflush_r>
  402688:	2800      	cmp	r0, #0
  40268a:	d1a2      	bne.n	4025d2 <__sfvwrite_r+0x13a>
  40268c:	f8cd 8000 	str.w	r8, [sp]
  402690:	e7d0      	b.n	402634 <__sfvwrite_r+0x19c>
  402692:	6820      	ldr	r0, [r4, #0]
  402694:	4647      	mov	r7, r8
  402696:	46c2      	mov	sl, r8
  402698:	e757      	b.n	40254a <__sfvwrite_r+0xb2>
  40269a:	4658      	mov	r0, fp
  40269c:	210a      	movs	r1, #10
  40269e:	4652      	mov	r2, sl
  4026a0:	f000 fbc4 	bl	402e2c <memchr>
  4026a4:	2800      	cmp	r0, #0
  4026a6:	d073      	beq.n	402790 <__sfvwrite_r+0x2f8>
  4026a8:	3001      	adds	r0, #1
  4026aa:	2301      	movs	r3, #1
  4026ac:	ebcb 0800 	rsb	r8, fp, r0
  4026b0:	9300      	str	r3, [sp, #0]
  4026b2:	e7a1      	b.n	4025f8 <__sfvwrite_r+0x160>
  4026b4:	6967      	ldr	r7, [r4, #20]
  4026b6:	6921      	ldr	r1, [r4, #16]
  4026b8:	6823      	ldr	r3, [r4, #0]
  4026ba:	eb07 0747 	add.w	r7, r7, r7, lsl #1
  4026be:	1a5b      	subs	r3, r3, r1
  4026c0:	eb07 77d7 	add.w	r7, r7, r7, lsr #31
  4026c4:	1c58      	adds	r0, r3, #1
  4026c6:	107f      	asrs	r7, r7, #1
  4026c8:	4440      	add	r0, r8
  4026ca:	4287      	cmp	r7, r0
  4026cc:	463a      	mov	r2, r7
  4026ce:	bf3c      	itt	cc
  4026d0:	4607      	movcc	r7, r0
  4026d2:	463a      	movcc	r2, r7
  4026d4:	f41e 6f80 	tst.w	lr, #1024	; 0x400
  4026d8:	9300      	str	r3, [sp, #0]
  4026da:	d046      	beq.n	40276a <__sfvwrite_r+0x2d2>
  4026dc:	4611      	mov	r1, r2
  4026de:	4648      	mov	r0, r9
  4026e0:	f000 f912 	bl	402908 <_malloc_r>
  4026e4:	9b00      	ldr	r3, [sp, #0]
  4026e6:	4682      	mov	sl, r0
  4026e8:	2800      	cmp	r0, #0
  4026ea:	d059      	beq.n	4027a0 <__sfvwrite_r+0x308>
  4026ec:	461a      	mov	r2, r3
  4026ee:	6921      	ldr	r1, [r4, #16]
  4026f0:	9300      	str	r3, [sp, #0]
  4026f2:	f000 fbe5 	bl	402ec0 <memcpy>
  4026f6:	89a2      	ldrh	r2, [r4, #12]
  4026f8:	9b00      	ldr	r3, [sp, #0]
  4026fa:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
  4026fe:	f042 0280 	orr.w	r2, r2, #128	; 0x80
  402702:	81a2      	strh	r2, [r4, #12]
  402704:	eb0a 0003 	add.w	r0, sl, r3
  402708:	1afb      	subs	r3, r7, r3
  40270a:	f8c4 a010 	str.w	sl, [r4, #16]
  40270e:	6167      	str	r7, [r4, #20]
  402710:	6020      	str	r0, [r4, #0]
  402712:	60a3      	str	r3, [r4, #8]
  402714:	4647      	mov	r7, r8
  402716:	46c2      	mov	sl, r8
  402718:	e717      	b.n	40254a <__sfvwrite_r+0xb2>
  40271a:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
  40271e:	4543      	cmp	r3, r8
  402720:	bf28      	it	cs
  402722:	4643      	movcs	r3, r8
  402724:	6a67      	ldr	r7, [r4, #36]	; 0x24
  402726:	fb93 f3f2 	sdiv	r3, r3, r2
  40272a:	4648      	mov	r0, r9
  40272c:	fb03 f302 	mul.w	r3, r3, r2
  402730:	69e1      	ldr	r1, [r4, #28]
  402732:	465a      	mov	r2, fp
  402734:	47b8      	blx	r7
  402736:	2800      	cmp	r0, #0
  402738:	f73f af13 	bgt.w	402562 <__sfvwrite_r+0xca>
  40273c:	e749      	b.n	4025d2 <__sfvwrite_r+0x13a>
  40273e:	4662      	mov	r2, ip
  402740:	4659      	mov	r1, fp
  402742:	f8cd c004 	str.w	ip, [sp, #4]
  402746:	f000 fc55 	bl	402ff4 <memmove>
  40274a:	6823      	ldr	r3, [r4, #0]
  40274c:	f8dd c004 	ldr.w	ip, [sp, #4]
  402750:	4463      	add	r3, ip
  402752:	6023      	str	r3, [r4, #0]
  402754:	4648      	mov	r0, r9
  402756:	4621      	mov	r1, r4
  402758:	f7ff fc5a 	bl	402010 <_fflush_r>
  40275c:	f8dd c004 	ldr.w	ip, [sp, #4]
  402760:	2800      	cmp	r0, #0
  402762:	f47f af36 	bne.w	4025d2 <__sfvwrite_r+0x13a>
  402766:	4667      	mov	r7, ip
  402768:	e761      	b.n	40262e <__sfvwrite_r+0x196>
  40276a:	4648      	mov	r0, r9
  40276c:	f000 fcaa 	bl	4030c4 <_realloc_r>
  402770:	9b00      	ldr	r3, [sp, #0]
  402772:	4682      	mov	sl, r0
  402774:	2800      	cmp	r0, #0
  402776:	d1c5      	bne.n	402704 <__sfvwrite_r+0x26c>
  402778:	4648      	mov	r0, r9
  40277a:	6921      	ldr	r1, [r4, #16]
  40277c:	f7ff fdb4 	bl	4022e8 <_free_r>
  402780:	89a3      	ldrh	r3, [r4, #12]
  402782:	220c      	movs	r2, #12
  402784:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  402788:	b29b      	uxth	r3, r3
  40278a:	f8c9 2000 	str.w	r2, [r9]
  40278e:	e721      	b.n	4025d4 <__sfvwrite_r+0x13c>
  402790:	2301      	movs	r3, #1
  402792:	f10a 0801 	add.w	r8, sl, #1
  402796:	9300      	str	r3, [sp, #0]
  402798:	e72e      	b.n	4025f8 <__sfvwrite_r+0x160>
  40279a:	f04f 30ff 	mov.w	r0, #4294967295
  40279e:	e6ad      	b.n	4024fc <__sfvwrite_r+0x64>
  4027a0:	230c      	movs	r3, #12
  4027a2:	f8c9 3000 	str.w	r3, [r9]
  4027a6:	89a3      	ldrh	r3, [r4, #12]
  4027a8:	e714      	b.n	4025d4 <__sfvwrite_r+0x13c>
  4027aa:	bf00      	nop
  4027ac:	7ffffc00 	.word	0x7ffffc00

004027b0 <_fwalk_reent>:
  4027b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  4027b4:	f510 7738 	adds.w	r7, r0, #736	; 0x2e0
  4027b8:	d01f      	beq.n	4027fa <_fwalk_reent+0x4a>
  4027ba:	4688      	mov	r8, r1
  4027bc:	4606      	mov	r6, r0
  4027be:	f04f 0900 	mov.w	r9, #0
  4027c2:	687d      	ldr	r5, [r7, #4]
  4027c4:	68bc      	ldr	r4, [r7, #8]
  4027c6:	3d01      	subs	r5, #1
  4027c8:	d411      	bmi.n	4027ee <_fwalk_reent+0x3e>
  4027ca:	89a3      	ldrh	r3, [r4, #12]
  4027cc:	2b01      	cmp	r3, #1
  4027ce:	f105 35ff 	add.w	r5, r5, #4294967295
  4027d2:	d908      	bls.n	4027e6 <_fwalk_reent+0x36>
  4027d4:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
  4027d8:	3301      	adds	r3, #1
  4027da:	4621      	mov	r1, r4
  4027dc:	4630      	mov	r0, r6
  4027de:	d002      	beq.n	4027e6 <_fwalk_reent+0x36>
  4027e0:	47c0      	blx	r8
  4027e2:	ea49 0900 	orr.w	r9, r9, r0
  4027e6:	1c6b      	adds	r3, r5, #1
  4027e8:	f104 0468 	add.w	r4, r4, #104	; 0x68
  4027ec:	d1ed      	bne.n	4027ca <_fwalk_reent+0x1a>
  4027ee:	683f      	ldr	r7, [r7, #0]
  4027f0:	2f00      	cmp	r7, #0
  4027f2:	d1e6      	bne.n	4027c2 <_fwalk_reent+0x12>
  4027f4:	4648      	mov	r0, r9
  4027f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  4027fa:	46b9      	mov	r9, r7
  4027fc:	4648      	mov	r0, r9
  4027fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  402802:	bf00      	nop

00402804 <__locale_charset>:
  402804:	4800      	ldr	r0, [pc, #0]	; (402808 <__locale_charset+0x4>)
  402806:	4770      	bx	lr
  402808:	20000434 	.word	0x20000434

0040280c <__locale_mb_cur_max>:
  40280c:	4b01      	ldr	r3, [pc, #4]	; (402814 <__locale_mb_cur_max+0x8>)
  40280e:	6818      	ldr	r0, [r3, #0]
  402810:	4770      	bx	lr
  402812:	bf00      	nop
  402814:	20000454 	.word	0x20000454

00402818 <__smakebuf_r>:
  402818:	898b      	ldrh	r3, [r1, #12]
  40281a:	b29a      	uxth	r2, r3
  40281c:	f012 0f02 	tst.w	r2, #2
  402820:	d13c      	bne.n	40289c <__smakebuf_r+0x84>
  402822:	b5f0      	push	{r4, r5, r6, r7, lr}
  402824:	460c      	mov	r4, r1
  402826:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  40282a:	2900      	cmp	r1, #0
  40282c:	b091      	sub	sp, #68	; 0x44
  40282e:	4605      	mov	r5, r0
  402830:	db19      	blt.n	402866 <__smakebuf_r+0x4e>
  402832:	aa01      	add	r2, sp, #4
  402834:	f000 ffd6 	bl	4037e4 <_fstat_r>
  402838:	2800      	cmp	r0, #0
  40283a:	db12      	blt.n	402862 <__smakebuf_r+0x4a>
  40283c:	9b02      	ldr	r3, [sp, #8]
  40283e:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
  402842:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
  402846:	f5a3 5700 	sub.w	r7, r3, #8192	; 0x2000
  40284a:	fab7 f787 	clz	r7, r7
  40284e:	ea4f 1757 	mov.w	r7, r7, lsr #5
  402852:	d02a      	beq.n	4028aa <__smakebuf_r+0x92>
  402854:	89a3      	ldrh	r3, [r4, #12]
  402856:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
  40285a:	81a3      	strh	r3, [r4, #12]
  40285c:	f44f 6680 	mov.w	r6, #1024	; 0x400
  402860:	e00b      	b.n	40287a <__smakebuf_r+0x62>
  402862:	89a3      	ldrh	r3, [r4, #12]
  402864:	b29a      	uxth	r2, r3
  402866:	f012 0f80 	tst.w	r2, #128	; 0x80
  40286a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
  40286e:	81a3      	strh	r3, [r4, #12]
  402870:	bf0c      	ite	eq
  402872:	f44f 6680 	moveq.w	r6, #1024	; 0x400
  402876:	2640      	movne	r6, #64	; 0x40
  402878:	2700      	movs	r7, #0
  40287a:	4628      	mov	r0, r5
  40287c:	4631      	mov	r1, r6
  40287e:	f000 f843 	bl	402908 <_malloc_r>
  402882:	89a3      	ldrh	r3, [r4, #12]
  402884:	b340      	cbz	r0, 4028d8 <__smakebuf_r+0xc0>
  402886:	4a1a      	ldr	r2, [pc, #104]	; (4028f0 <__smakebuf_r+0xd8>)
  402888:	63ea      	str	r2, [r5, #60]	; 0x3c
  40288a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  40288e:	81a3      	strh	r3, [r4, #12]
  402890:	6020      	str	r0, [r4, #0]
  402892:	6120      	str	r0, [r4, #16]
  402894:	6166      	str	r6, [r4, #20]
  402896:	b99f      	cbnz	r7, 4028c0 <__smakebuf_r+0xa8>
  402898:	b011      	add	sp, #68	; 0x44
  40289a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40289c:	f101 0343 	add.w	r3, r1, #67	; 0x43
  4028a0:	2201      	movs	r2, #1
  4028a2:	600b      	str	r3, [r1, #0]
  4028a4:	610b      	str	r3, [r1, #16]
  4028a6:	614a      	str	r2, [r1, #20]
  4028a8:	4770      	bx	lr
  4028aa:	4b12      	ldr	r3, [pc, #72]	; (4028f4 <__smakebuf_r+0xdc>)
  4028ac:	6aa2      	ldr	r2, [r4, #40]	; 0x28
  4028ae:	429a      	cmp	r2, r3
  4028b0:	d1d0      	bne.n	402854 <__smakebuf_r+0x3c>
  4028b2:	89a3      	ldrh	r3, [r4, #12]
  4028b4:	f44f 6680 	mov.w	r6, #1024	; 0x400
  4028b8:	4333      	orrs	r3, r6
  4028ba:	81a3      	strh	r3, [r4, #12]
  4028bc:	64e6      	str	r6, [r4, #76]	; 0x4c
  4028be:	e7dc      	b.n	40287a <__smakebuf_r+0x62>
  4028c0:	4628      	mov	r0, r5
  4028c2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  4028c6:	f000 ffa1 	bl	40380c <_isatty_r>
  4028ca:	2800      	cmp	r0, #0
  4028cc:	d0e4      	beq.n	402898 <__smakebuf_r+0x80>
  4028ce:	89a3      	ldrh	r3, [r4, #12]
  4028d0:	f043 0301 	orr.w	r3, r3, #1
  4028d4:	81a3      	strh	r3, [r4, #12]
  4028d6:	e7df      	b.n	402898 <__smakebuf_r+0x80>
  4028d8:	059a      	lsls	r2, r3, #22
  4028da:	d4dd      	bmi.n	402898 <__smakebuf_r+0x80>
  4028dc:	f104 0243 	add.w	r2, r4, #67	; 0x43
  4028e0:	f043 0302 	orr.w	r3, r3, #2
  4028e4:	2101      	movs	r1, #1
  4028e6:	81a3      	strh	r3, [r4, #12]
  4028e8:	6022      	str	r2, [r4, #0]
  4028ea:	6122      	str	r2, [r4, #16]
  4028ec:	6161      	str	r1, [r4, #20]
  4028ee:	e7d3      	b.n	402898 <__smakebuf_r+0x80>
  4028f0:	0040203d 	.word	0x0040203d
  4028f4:	00403531 	.word	0x00403531

004028f8 <malloc>:
  4028f8:	4b02      	ldr	r3, [pc, #8]	; (402904 <malloc+0xc>)
  4028fa:	4601      	mov	r1, r0
  4028fc:	6818      	ldr	r0, [r3, #0]
  4028fe:	f000 b803 	b.w	402908 <_malloc_r>
  402902:	bf00      	nop
  402904:	20000430 	.word	0x20000430

00402908 <_malloc_r>:
  402908:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40290c:	f101 050b 	add.w	r5, r1, #11
  402910:	2d16      	cmp	r5, #22
  402912:	b083      	sub	sp, #12
  402914:	4606      	mov	r6, r0
  402916:	d927      	bls.n	402968 <_malloc_r+0x60>
  402918:	f035 0507 	bics.w	r5, r5, #7
  40291c:	f100 80b6 	bmi.w	402a8c <_malloc_r+0x184>
  402920:	42a9      	cmp	r1, r5
  402922:	f200 80b3 	bhi.w	402a8c <_malloc_r+0x184>
  402926:	f000 fbc9 	bl	4030bc <__malloc_lock>
  40292a:	f5b5 7ffc 	cmp.w	r5, #504	; 0x1f8
  40292e:	d222      	bcs.n	402976 <_malloc_r+0x6e>
  402930:	4fc2      	ldr	r7, [pc, #776]	; (402c3c <_malloc_r+0x334>)
  402932:	08e8      	lsrs	r0, r5, #3
  402934:	eb07 03c0 	add.w	r3, r7, r0, lsl #3
  402938:	68dc      	ldr	r4, [r3, #12]
  40293a:	429c      	cmp	r4, r3
  40293c:	f000 81c8 	beq.w	402cd0 <_malloc_r+0x3c8>
  402940:	6863      	ldr	r3, [r4, #4]
  402942:	68e1      	ldr	r1, [r4, #12]
  402944:	68a5      	ldr	r5, [r4, #8]
  402946:	f023 0303 	bic.w	r3, r3, #3
  40294a:	4423      	add	r3, r4
  40294c:	4630      	mov	r0, r6
  40294e:	685a      	ldr	r2, [r3, #4]
  402950:	60e9      	str	r1, [r5, #12]
  402952:	f042 0201 	orr.w	r2, r2, #1
  402956:	608d      	str	r5, [r1, #8]
  402958:	605a      	str	r2, [r3, #4]
  40295a:	f000 fbb1 	bl	4030c0 <__malloc_unlock>
  40295e:	3408      	adds	r4, #8
  402960:	4620      	mov	r0, r4
  402962:	b003      	add	sp, #12
  402964:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  402968:	2910      	cmp	r1, #16
  40296a:	f200 808f 	bhi.w	402a8c <_malloc_r+0x184>
  40296e:	f000 fba5 	bl	4030bc <__malloc_lock>
  402972:	2510      	movs	r5, #16
  402974:	e7dc      	b.n	402930 <_malloc_r+0x28>
  402976:	0a68      	lsrs	r0, r5, #9
  402978:	f000 808f 	beq.w	402a9a <_malloc_r+0x192>
  40297c:	2804      	cmp	r0, #4
  40297e:	f200 8154 	bhi.w	402c2a <_malloc_r+0x322>
  402982:	09a8      	lsrs	r0, r5, #6
  402984:	3038      	adds	r0, #56	; 0x38
  402986:	0041      	lsls	r1, r0, #1
  402988:	4fac      	ldr	r7, [pc, #688]	; (402c3c <_malloc_r+0x334>)
  40298a:	eb07 0181 	add.w	r1, r7, r1, lsl #2
  40298e:	68cc      	ldr	r4, [r1, #12]
  402990:	42a1      	cmp	r1, r4
  402992:	d106      	bne.n	4029a2 <_malloc_r+0x9a>
  402994:	e00c      	b.n	4029b0 <_malloc_r+0xa8>
  402996:	2a00      	cmp	r2, #0
  402998:	f280 8082 	bge.w	402aa0 <_malloc_r+0x198>
  40299c:	68e4      	ldr	r4, [r4, #12]
  40299e:	42a1      	cmp	r1, r4
  4029a0:	d006      	beq.n	4029b0 <_malloc_r+0xa8>
  4029a2:	6863      	ldr	r3, [r4, #4]
  4029a4:	f023 0303 	bic.w	r3, r3, #3
  4029a8:	1b5a      	subs	r2, r3, r5
  4029aa:	2a0f      	cmp	r2, #15
  4029ac:	ddf3      	ble.n	402996 <_malloc_r+0x8e>
  4029ae:	3801      	subs	r0, #1
  4029b0:	3001      	adds	r0, #1
  4029b2:	49a2      	ldr	r1, [pc, #648]	; (402c3c <_malloc_r+0x334>)
  4029b4:	693c      	ldr	r4, [r7, #16]
  4029b6:	f101 0e08 	add.w	lr, r1, #8
  4029ba:	4574      	cmp	r4, lr
  4029bc:	f000 817d 	beq.w	402cba <_malloc_r+0x3b2>
  4029c0:	6863      	ldr	r3, [r4, #4]
  4029c2:	f023 0303 	bic.w	r3, r3, #3
  4029c6:	1b5a      	subs	r2, r3, r5
  4029c8:	2a0f      	cmp	r2, #15
  4029ca:	f300 8163 	bgt.w	402c94 <_malloc_r+0x38c>
  4029ce:	2a00      	cmp	r2, #0
  4029d0:	f8c1 e014 	str.w	lr, [r1, #20]
  4029d4:	f8c1 e010 	str.w	lr, [r1, #16]
  4029d8:	da73      	bge.n	402ac2 <_malloc_r+0x1ba>
  4029da:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  4029de:	f080 8139 	bcs.w	402c54 <_malloc_r+0x34c>
  4029e2:	08db      	lsrs	r3, r3, #3
  4029e4:	eb01 08c3 	add.w	r8, r1, r3, lsl #3
  4029e8:	ea4f 0ca3 	mov.w	ip, r3, asr #2
  4029ec:	684a      	ldr	r2, [r1, #4]
  4029ee:	f8d8 9008 	ldr.w	r9, [r8, #8]
  4029f2:	f8c4 9008 	str.w	r9, [r4, #8]
  4029f6:	2301      	movs	r3, #1
  4029f8:	fa03 f30c 	lsl.w	r3, r3, ip
  4029fc:	4313      	orrs	r3, r2
  4029fe:	f8c4 800c 	str.w	r8, [r4, #12]
  402a02:	604b      	str	r3, [r1, #4]
  402a04:	f8c8 4008 	str.w	r4, [r8, #8]
  402a08:	f8c9 400c 	str.w	r4, [r9, #12]
  402a0c:	1082      	asrs	r2, r0, #2
  402a0e:	2401      	movs	r4, #1
  402a10:	4094      	lsls	r4, r2
  402a12:	429c      	cmp	r4, r3
  402a14:	d862      	bhi.n	402adc <_malloc_r+0x1d4>
  402a16:	4223      	tst	r3, r4
  402a18:	d106      	bne.n	402a28 <_malloc_r+0x120>
  402a1a:	f020 0003 	bic.w	r0, r0, #3
  402a1e:	0064      	lsls	r4, r4, #1
  402a20:	4223      	tst	r3, r4
  402a22:	f100 0004 	add.w	r0, r0, #4
  402a26:	d0fa      	beq.n	402a1e <_malloc_r+0x116>
  402a28:	eb07 08c0 	add.w	r8, r7, r0, lsl #3
  402a2c:	46c4      	mov	ip, r8
  402a2e:	4681      	mov	r9, r0
  402a30:	f8dc 300c 	ldr.w	r3, [ip, #12]
  402a34:	459c      	cmp	ip, r3
  402a36:	d107      	bne.n	402a48 <_malloc_r+0x140>
  402a38:	e141      	b.n	402cbe <_malloc_r+0x3b6>
  402a3a:	2900      	cmp	r1, #0
  402a3c:	f280 8151 	bge.w	402ce2 <_malloc_r+0x3da>
  402a40:	68db      	ldr	r3, [r3, #12]
  402a42:	459c      	cmp	ip, r3
  402a44:	f000 813b 	beq.w	402cbe <_malloc_r+0x3b6>
  402a48:	685a      	ldr	r2, [r3, #4]
  402a4a:	f022 0203 	bic.w	r2, r2, #3
  402a4e:	1b51      	subs	r1, r2, r5
  402a50:	290f      	cmp	r1, #15
  402a52:	ddf2      	ble.n	402a3a <_malloc_r+0x132>
  402a54:	461c      	mov	r4, r3
  402a56:	f8d3 c00c 	ldr.w	ip, [r3, #12]
  402a5a:	f854 8f08 	ldr.w	r8, [r4, #8]!
  402a5e:	195a      	adds	r2, r3, r5
  402a60:	f045 0901 	orr.w	r9, r5, #1
  402a64:	f041 0501 	orr.w	r5, r1, #1
  402a68:	f8c3 9004 	str.w	r9, [r3, #4]
  402a6c:	4630      	mov	r0, r6
  402a6e:	f8c8 c00c 	str.w	ip, [r8, #12]
  402a72:	f8cc 8008 	str.w	r8, [ip, #8]
  402a76:	617a      	str	r2, [r7, #20]
  402a78:	613a      	str	r2, [r7, #16]
  402a7a:	f8c2 e00c 	str.w	lr, [r2, #12]
  402a7e:	f8c2 e008 	str.w	lr, [r2, #8]
  402a82:	6055      	str	r5, [r2, #4]
  402a84:	5051      	str	r1, [r2, r1]
  402a86:	f000 fb1b 	bl	4030c0 <__malloc_unlock>
  402a8a:	e769      	b.n	402960 <_malloc_r+0x58>
  402a8c:	2400      	movs	r4, #0
  402a8e:	230c      	movs	r3, #12
  402a90:	4620      	mov	r0, r4
  402a92:	6033      	str	r3, [r6, #0]
  402a94:	b003      	add	sp, #12
  402a96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  402a9a:	217e      	movs	r1, #126	; 0x7e
  402a9c:	203f      	movs	r0, #63	; 0x3f
  402a9e:	e773      	b.n	402988 <_malloc_r+0x80>
  402aa0:	4423      	add	r3, r4
  402aa2:	68e1      	ldr	r1, [r4, #12]
  402aa4:	685a      	ldr	r2, [r3, #4]
  402aa6:	68a5      	ldr	r5, [r4, #8]
  402aa8:	f042 0201 	orr.w	r2, r2, #1
  402aac:	60e9      	str	r1, [r5, #12]
  402aae:	4630      	mov	r0, r6
  402ab0:	608d      	str	r5, [r1, #8]
  402ab2:	605a      	str	r2, [r3, #4]
  402ab4:	f000 fb04 	bl	4030c0 <__malloc_unlock>
  402ab8:	3408      	adds	r4, #8
  402aba:	4620      	mov	r0, r4
  402abc:	b003      	add	sp, #12
  402abe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  402ac2:	4423      	add	r3, r4
  402ac4:	4630      	mov	r0, r6
  402ac6:	685a      	ldr	r2, [r3, #4]
  402ac8:	f042 0201 	orr.w	r2, r2, #1
  402acc:	605a      	str	r2, [r3, #4]
  402ace:	f000 faf7 	bl	4030c0 <__malloc_unlock>
  402ad2:	3408      	adds	r4, #8
  402ad4:	4620      	mov	r0, r4
  402ad6:	b003      	add	sp, #12
  402ad8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  402adc:	68bc      	ldr	r4, [r7, #8]
  402ade:	6863      	ldr	r3, [r4, #4]
  402ae0:	f023 0803 	bic.w	r8, r3, #3
  402ae4:	4545      	cmp	r5, r8
  402ae6:	d804      	bhi.n	402af2 <_malloc_r+0x1ea>
  402ae8:	ebc5 0308 	rsb	r3, r5, r8
  402aec:	2b0f      	cmp	r3, #15
  402aee:	f300 808c 	bgt.w	402c0a <_malloc_r+0x302>
  402af2:	4b53      	ldr	r3, [pc, #332]	; (402c40 <_malloc_r+0x338>)
  402af4:	f8df a158 	ldr.w	sl, [pc, #344]	; 402c50 <_malloc_r+0x348>
  402af8:	681a      	ldr	r2, [r3, #0]
  402afa:	f8da 3000 	ldr.w	r3, [sl]
  402afe:	3301      	adds	r3, #1
  402b00:	442a      	add	r2, r5
  402b02:	eb04 0b08 	add.w	fp, r4, r8
  402b06:	f000 8150 	beq.w	402daa <_malloc_r+0x4a2>
  402b0a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
  402b0e:	320f      	adds	r2, #15
  402b10:	f422 627f 	bic.w	r2, r2, #4080	; 0xff0
  402b14:	f022 020f 	bic.w	r2, r2, #15
  402b18:	4611      	mov	r1, r2
  402b1a:	4630      	mov	r0, r6
  402b1c:	9201      	str	r2, [sp, #4]
  402b1e:	f000 fcc7 	bl	4034b0 <_sbrk_r>
  402b22:	f1b0 3fff 	cmp.w	r0, #4294967295
  402b26:	4681      	mov	r9, r0
  402b28:	9a01      	ldr	r2, [sp, #4]
  402b2a:	f000 8147 	beq.w	402dbc <_malloc_r+0x4b4>
  402b2e:	4583      	cmp	fp, r0
  402b30:	f200 80ee 	bhi.w	402d10 <_malloc_r+0x408>
  402b34:	4b43      	ldr	r3, [pc, #268]	; (402c44 <_malloc_r+0x33c>)
  402b36:	6819      	ldr	r1, [r3, #0]
  402b38:	45cb      	cmp	fp, r9
  402b3a:	4411      	add	r1, r2
  402b3c:	6019      	str	r1, [r3, #0]
  402b3e:	f000 8142 	beq.w	402dc6 <_malloc_r+0x4be>
  402b42:	f8da 0000 	ldr.w	r0, [sl]
  402b46:	f8df e108 	ldr.w	lr, [pc, #264]	; 402c50 <_malloc_r+0x348>
  402b4a:	3001      	adds	r0, #1
  402b4c:	bf1b      	ittet	ne
  402b4e:	ebcb 0b09 	rsbne	fp, fp, r9
  402b52:	4459      	addne	r1, fp
  402b54:	f8ce 9000 	streq.w	r9, [lr]
  402b58:	6019      	strne	r1, [r3, #0]
  402b5a:	f019 0107 	ands.w	r1, r9, #7
  402b5e:	f000 8107 	beq.w	402d70 <_malloc_r+0x468>
  402b62:	f1c1 0008 	rsb	r0, r1, #8
  402b66:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
  402b6a:	4481      	add	r9, r0
  402b6c:	3108      	adds	r1, #8
  402b6e:	444a      	add	r2, r9
  402b70:	f3c2 020b 	ubfx	r2, r2, #0, #12
  402b74:	ebc2 0a01 	rsb	sl, r2, r1
  402b78:	4651      	mov	r1, sl
  402b7a:	4630      	mov	r0, r6
  402b7c:	9301      	str	r3, [sp, #4]
  402b7e:	f000 fc97 	bl	4034b0 <_sbrk_r>
  402b82:	1c43      	adds	r3, r0, #1
  402b84:	9b01      	ldr	r3, [sp, #4]
  402b86:	f000 812c 	beq.w	402de2 <_malloc_r+0x4da>
  402b8a:	ebc9 0200 	rsb	r2, r9, r0
  402b8e:	4452      	add	r2, sl
  402b90:	f042 0201 	orr.w	r2, r2, #1
  402b94:	6819      	ldr	r1, [r3, #0]
  402b96:	f8c7 9008 	str.w	r9, [r7, #8]
  402b9a:	4451      	add	r1, sl
  402b9c:	42bc      	cmp	r4, r7
  402b9e:	f8c9 2004 	str.w	r2, [r9, #4]
  402ba2:	6019      	str	r1, [r3, #0]
  402ba4:	f8df a09c 	ldr.w	sl, [pc, #156]	; 402c44 <_malloc_r+0x33c>
  402ba8:	d016      	beq.n	402bd8 <_malloc_r+0x2d0>
  402baa:	f1b8 0f0f 	cmp.w	r8, #15
  402bae:	f240 80ee 	bls.w	402d8e <_malloc_r+0x486>
  402bb2:	6862      	ldr	r2, [r4, #4]
  402bb4:	f1a8 030c 	sub.w	r3, r8, #12
  402bb8:	f023 0307 	bic.w	r3, r3, #7
  402bbc:	18e0      	adds	r0, r4, r3
  402bbe:	f002 0201 	and.w	r2, r2, #1
  402bc2:	f04f 0e05 	mov.w	lr, #5
  402bc6:	431a      	orrs	r2, r3
  402bc8:	2b0f      	cmp	r3, #15
  402bca:	6062      	str	r2, [r4, #4]
  402bcc:	f8c0 e004 	str.w	lr, [r0, #4]
  402bd0:	f8c0 e008 	str.w	lr, [r0, #8]
  402bd4:	f200 8109 	bhi.w	402dea <_malloc_r+0x4e2>
  402bd8:	4b1b      	ldr	r3, [pc, #108]	; (402c48 <_malloc_r+0x340>)
  402bda:	68bc      	ldr	r4, [r7, #8]
  402bdc:	681a      	ldr	r2, [r3, #0]
  402bde:	4291      	cmp	r1, r2
  402be0:	bf88      	it	hi
  402be2:	6019      	strhi	r1, [r3, #0]
  402be4:	4b19      	ldr	r3, [pc, #100]	; (402c4c <_malloc_r+0x344>)
  402be6:	681a      	ldr	r2, [r3, #0]
  402be8:	4291      	cmp	r1, r2
  402bea:	6862      	ldr	r2, [r4, #4]
  402bec:	bf88      	it	hi
  402bee:	6019      	strhi	r1, [r3, #0]
  402bf0:	f022 0203 	bic.w	r2, r2, #3
  402bf4:	4295      	cmp	r5, r2
  402bf6:	eba2 0305 	sub.w	r3, r2, r5
  402bfa:	d801      	bhi.n	402c00 <_malloc_r+0x2f8>
  402bfc:	2b0f      	cmp	r3, #15
  402bfe:	dc04      	bgt.n	402c0a <_malloc_r+0x302>
  402c00:	4630      	mov	r0, r6
  402c02:	f000 fa5d 	bl	4030c0 <__malloc_unlock>
  402c06:	2400      	movs	r4, #0
  402c08:	e6aa      	b.n	402960 <_malloc_r+0x58>
  402c0a:	1962      	adds	r2, r4, r5
  402c0c:	f043 0301 	orr.w	r3, r3, #1
  402c10:	f045 0501 	orr.w	r5, r5, #1
  402c14:	6065      	str	r5, [r4, #4]
  402c16:	4630      	mov	r0, r6
  402c18:	60ba      	str	r2, [r7, #8]
  402c1a:	6053      	str	r3, [r2, #4]
  402c1c:	f000 fa50 	bl	4030c0 <__malloc_unlock>
  402c20:	3408      	adds	r4, #8
  402c22:	4620      	mov	r0, r4
  402c24:	b003      	add	sp, #12
  402c26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  402c2a:	2814      	cmp	r0, #20
  402c2c:	d968      	bls.n	402d00 <_malloc_r+0x3f8>
  402c2e:	2854      	cmp	r0, #84	; 0x54
  402c30:	f200 8097 	bhi.w	402d62 <_malloc_r+0x45a>
  402c34:	0b28      	lsrs	r0, r5, #12
  402c36:	306e      	adds	r0, #110	; 0x6e
  402c38:	0041      	lsls	r1, r0, #1
  402c3a:	e6a5      	b.n	402988 <_malloc_r+0x80>
  402c3c:	20000458 	.word	0x20000458
  402c40:	20000914 	.word	0x20000914
  402c44:	20000918 	.word	0x20000918
  402c48:	20000910 	.word	0x20000910
  402c4c:	2000090c 	.word	0x2000090c
  402c50:	20000864 	.word	0x20000864
  402c54:	0a5a      	lsrs	r2, r3, #9
  402c56:	2a04      	cmp	r2, #4
  402c58:	d955      	bls.n	402d06 <_malloc_r+0x3fe>
  402c5a:	2a14      	cmp	r2, #20
  402c5c:	f200 80a7 	bhi.w	402dae <_malloc_r+0x4a6>
  402c60:	325b      	adds	r2, #91	; 0x5b
  402c62:	ea4f 0c42 	mov.w	ip, r2, lsl #1
  402c66:	eb07 0c8c 	add.w	ip, r7, ip, lsl #2
  402c6a:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 402e28 <_malloc_r+0x520>
  402c6e:	f8dc 1008 	ldr.w	r1, [ip, #8]
  402c72:	4561      	cmp	r1, ip
  402c74:	d07f      	beq.n	402d76 <_malloc_r+0x46e>
  402c76:	684a      	ldr	r2, [r1, #4]
  402c78:	f022 0203 	bic.w	r2, r2, #3
  402c7c:	4293      	cmp	r3, r2
  402c7e:	d202      	bcs.n	402c86 <_malloc_r+0x37e>
  402c80:	6889      	ldr	r1, [r1, #8]
  402c82:	458c      	cmp	ip, r1
  402c84:	d1f7      	bne.n	402c76 <_malloc_r+0x36e>
  402c86:	68ca      	ldr	r2, [r1, #12]
  402c88:	687b      	ldr	r3, [r7, #4]
  402c8a:	60e2      	str	r2, [r4, #12]
  402c8c:	60a1      	str	r1, [r4, #8]
  402c8e:	6094      	str	r4, [r2, #8]
  402c90:	60cc      	str	r4, [r1, #12]
  402c92:	e6bb      	b.n	402a0c <_malloc_r+0x104>
  402c94:	1963      	adds	r3, r4, r5
  402c96:	f042 0701 	orr.w	r7, r2, #1
  402c9a:	f045 0501 	orr.w	r5, r5, #1
  402c9e:	6065      	str	r5, [r4, #4]
  402ca0:	4630      	mov	r0, r6
  402ca2:	614b      	str	r3, [r1, #20]
  402ca4:	610b      	str	r3, [r1, #16]
  402ca6:	f8c3 e00c 	str.w	lr, [r3, #12]
  402caa:	f8c3 e008 	str.w	lr, [r3, #8]
  402cae:	605f      	str	r7, [r3, #4]
  402cb0:	509a      	str	r2, [r3, r2]
  402cb2:	3408      	adds	r4, #8
  402cb4:	f000 fa04 	bl	4030c0 <__malloc_unlock>
  402cb8:	e652      	b.n	402960 <_malloc_r+0x58>
  402cba:	684b      	ldr	r3, [r1, #4]
  402cbc:	e6a6      	b.n	402a0c <_malloc_r+0x104>
  402cbe:	f109 0901 	add.w	r9, r9, #1
  402cc2:	f019 0f03 	tst.w	r9, #3
  402cc6:	f10c 0c08 	add.w	ip, ip, #8
  402cca:	f47f aeb1 	bne.w	402a30 <_malloc_r+0x128>
  402cce:	e02c      	b.n	402d2a <_malloc_r+0x422>
  402cd0:	f104 0308 	add.w	r3, r4, #8
  402cd4:	6964      	ldr	r4, [r4, #20]
  402cd6:	42a3      	cmp	r3, r4
  402cd8:	bf08      	it	eq
  402cda:	3002      	addeq	r0, #2
  402cdc:	f43f ae69 	beq.w	4029b2 <_malloc_r+0xaa>
  402ce0:	e62e      	b.n	402940 <_malloc_r+0x38>
  402ce2:	441a      	add	r2, r3
  402ce4:	461c      	mov	r4, r3
  402ce6:	6851      	ldr	r1, [r2, #4]
  402ce8:	68db      	ldr	r3, [r3, #12]
  402cea:	f854 5f08 	ldr.w	r5, [r4, #8]!
  402cee:	f041 0101 	orr.w	r1, r1, #1
  402cf2:	6051      	str	r1, [r2, #4]
  402cf4:	4630      	mov	r0, r6
  402cf6:	60eb      	str	r3, [r5, #12]
  402cf8:	609d      	str	r5, [r3, #8]
  402cfa:	f000 f9e1 	bl	4030c0 <__malloc_unlock>
  402cfe:	e62f      	b.n	402960 <_malloc_r+0x58>
  402d00:	305b      	adds	r0, #91	; 0x5b
  402d02:	0041      	lsls	r1, r0, #1
  402d04:	e640      	b.n	402988 <_malloc_r+0x80>
  402d06:	099a      	lsrs	r2, r3, #6
  402d08:	3238      	adds	r2, #56	; 0x38
  402d0a:	ea4f 0c42 	mov.w	ip, r2, lsl #1
  402d0e:	e7aa      	b.n	402c66 <_malloc_r+0x35e>
  402d10:	42bc      	cmp	r4, r7
  402d12:	4b45      	ldr	r3, [pc, #276]	; (402e28 <_malloc_r+0x520>)
  402d14:	f43f af0e 	beq.w	402b34 <_malloc_r+0x22c>
  402d18:	689c      	ldr	r4, [r3, #8]
  402d1a:	6862      	ldr	r2, [r4, #4]
  402d1c:	f022 0203 	bic.w	r2, r2, #3
  402d20:	e768      	b.n	402bf4 <_malloc_r+0x2ec>
  402d22:	f8d8 8000 	ldr.w	r8, [r8]
  402d26:	4598      	cmp	r8, r3
  402d28:	d17c      	bne.n	402e24 <_malloc_r+0x51c>
  402d2a:	f010 0f03 	tst.w	r0, #3
  402d2e:	f1a8 0308 	sub.w	r3, r8, #8
  402d32:	f100 30ff 	add.w	r0, r0, #4294967295
  402d36:	d1f4      	bne.n	402d22 <_malloc_r+0x41a>
  402d38:	687b      	ldr	r3, [r7, #4]
  402d3a:	ea23 0304 	bic.w	r3, r3, r4
  402d3e:	607b      	str	r3, [r7, #4]
  402d40:	0064      	lsls	r4, r4, #1
  402d42:	429c      	cmp	r4, r3
  402d44:	f63f aeca 	bhi.w	402adc <_malloc_r+0x1d4>
  402d48:	2c00      	cmp	r4, #0
  402d4a:	f43f aec7 	beq.w	402adc <_malloc_r+0x1d4>
  402d4e:	4223      	tst	r3, r4
  402d50:	4648      	mov	r0, r9
  402d52:	f47f ae69 	bne.w	402a28 <_malloc_r+0x120>
  402d56:	0064      	lsls	r4, r4, #1
  402d58:	4223      	tst	r3, r4
  402d5a:	f100 0004 	add.w	r0, r0, #4
  402d5e:	d0fa      	beq.n	402d56 <_malloc_r+0x44e>
  402d60:	e662      	b.n	402a28 <_malloc_r+0x120>
  402d62:	f5b0 7faa 	cmp.w	r0, #340	; 0x154
  402d66:	d818      	bhi.n	402d9a <_malloc_r+0x492>
  402d68:	0be8      	lsrs	r0, r5, #15
  402d6a:	3077      	adds	r0, #119	; 0x77
  402d6c:	0041      	lsls	r1, r0, #1
  402d6e:	e60b      	b.n	402988 <_malloc_r+0x80>
  402d70:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  402d74:	e6fb      	b.n	402b6e <_malloc_r+0x266>
  402d76:	f8d8 3004 	ldr.w	r3, [r8, #4]
  402d7a:	1092      	asrs	r2, r2, #2
  402d7c:	f04f 0c01 	mov.w	ip, #1
  402d80:	fa0c f202 	lsl.w	r2, ip, r2
  402d84:	4313      	orrs	r3, r2
  402d86:	f8c8 3004 	str.w	r3, [r8, #4]
  402d8a:	460a      	mov	r2, r1
  402d8c:	e77d      	b.n	402c8a <_malloc_r+0x382>
  402d8e:	2301      	movs	r3, #1
  402d90:	f8c9 3004 	str.w	r3, [r9, #4]
  402d94:	464c      	mov	r4, r9
  402d96:	2200      	movs	r2, #0
  402d98:	e72c      	b.n	402bf4 <_malloc_r+0x2ec>
  402d9a:	f240 5354 	movw	r3, #1364	; 0x554
  402d9e:	4298      	cmp	r0, r3
  402da0:	d81c      	bhi.n	402ddc <_malloc_r+0x4d4>
  402da2:	0ca8      	lsrs	r0, r5, #18
  402da4:	307c      	adds	r0, #124	; 0x7c
  402da6:	0041      	lsls	r1, r0, #1
  402da8:	e5ee      	b.n	402988 <_malloc_r+0x80>
  402daa:	3210      	adds	r2, #16
  402dac:	e6b4      	b.n	402b18 <_malloc_r+0x210>
  402dae:	2a54      	cmp	r2, #84	; 0x54
  402db0:	d823      	bhi.n	402dfa <_malloc_r+0x4f2>
  402db2:	0b1a      	lsrs	r2, r3, #12
  402db4:	326e      	adds	r2, #110	; 0x6e
  402db6:	ea4f 0c42 	mov.w	ip, r2, lsl #1
  402dba:	e754      	b.n	402c66 <_malloc_r+0x35e>
  402dbc:	68bc      	ldr	r4, [r7, #8]
  402dbe:	6862      	ldr	r2, [r4, #4]
  402dc0:	f022 0203 	bic.w	r2, r2, #3
  402dc4:	e716      	b.n	402bf4 <_malloc_r+0x2ec>
  402dc6:	f3cb 000b 	ubfx	r0, fp, #0, #12
  402dca:	2800      	cmp	r0, #0
  402dcc:	f47f aeb9 	bne.w	402b42 <_malloc_r+0x23a>
  402dd0:	4442      	add	r2, r8
  402dd2:	68bb      	ldr	r3, [r7, #8]
  402dd4:	f042 0201 	orr.w	r2, r2, #1
  402dd8:	605a      	str	r2, [r3, #4]
  402dda:	e6fd      	b.n	402bd8 <_malloc_r+0x2d0>
  402ddc:	21fc      	movs	r1, #252	; 0xfc
  402dde:	207e      	movs	r0, #126	; 0x7e
  402de0:	e5d2      	b.n	402988 <_malloc_r+0x80>
  402de2:	2201      	movs	r2, #1
  402de4:	f04f 0a00 	mov.w	sl, #0
  402de8:	e6d4      	b.n	402b94 <_malloc_r+0x28c>
  402dea:	f104 0108 	add.w	r1, r4, #8
  402dee:	4630      	mov	r0, r6
  402df0:	f7ff fa7a 	bl	4022e8 <_free_r>
  402df4:	f8da 1000 	ldr.w	r1, [sl]
  402df8:	e6ee      	b.n	402bd8 <_malloc_r+0x2d0>
  402dfa:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  402dfe:	d804      	bhi.n	402e0a <_malloc_r+0x502>
  402e00:	0bda      	lsrs	r2, r3, #15
  402e02:	3277      	adds	r2, #119	; 0x77
  402e04:	ea4f 0c42 	mov.w	ip, r2, lsl #1
  402e08:	e72d      	b.n	402c66 <_malloc_r+0x35e>
  402e0a:	f240 5154 	movw	r1, #1364	; 0x554
  402e0e:	428a      	cmp	r2, r1
  402e10:	d804      	bhi.n	402e1c <_malloc_r+0x514>
  402e12:	0c9a      	lsrs	r2, r3, #18
  402e14:	327c      	adds	r2, #124	; 0x7c
  402e16:	ea4f 0c42 	mov.w	ip, r2, lsl #1
  402e1a:	e724      	b.n	402c66 <_malloc_r+0x35e>
  402e1c:	f04f 0cfc 	mov.w	ip, #252	; 0xfc
  402e20:	227e      	movs	r2, #126	; 0x7e
  402e22:	e720      	b.n	402c66 <_malloc_r+0x35e>
  402e24:	687b      	ldr	r3, [r7, #4]
  402e26:	e78b      	b.n	402d40 <_malloc_r+0x438>
  402e28:	20000458 	.word	0x20000458

00402e2c <memchr>:
  402e2c:	0783      	lsls	r3, r0, #30
  402e2e:	b470      	push	{r4, r5, r6}
  402e30:	b2c9      	uxtb	r1, r1
  402e32:	d040      	beq.n	402eb6 <memchr+0x8a>
  402e34:	1e54      	subs	r4, r2, #1
  402e36:	2a00      	cmp	r2, #0
  402e38:	d03f      	beq.n	402eba <memchr+0x8e>
  402e3a:	7803      	ldrb	r3, [r0, #0]
  402e3c:	428b      	cmp	r3, r1
  402e3e:	bf18      	it	ne
  402e40:	1c43      	addne	r3, r0, #1
  402e42:	d106      	bne.n	402e52 <memchr+0x26>
  402e44:	e01d      	b.n	402e82 <memchr+0x56>
  402e46:	b1f4      	cbz	r4, 402e86 <memchr+0x5a>
  402e48:	7802      	ldrb	r2, [r0, #0]
  402e4a:	428a      	cmp	r2, r1
  402e4c:	f104 34ff 	add.w	r4, r4, #4294967295
  402e50:	d017      	beq.n	402e82 <memchr+0x56>
  402e52:	f013 0f03 	tst.w	r3, #3
  402e56:	4618      	mov	r0, r3
  402e58:	f103 0301 	add.w	r3, r3, #1
  402e5c:	d1f3      	bne.n	402e46 <memchr+0x1a>
  402e5e:	2c03      	cmp	r4, #3
  402e60:	d814      	bhi.n	402e8c <memchr+0x60>
  402e62:	b184      	cbz	r4, 402e86 <memchr+0x5a>
  402e64:	7803      	ldrb	r3, [r0, #0]
  402e66:	428b      	cmp	r3, r1
  402e68:	d00b      	beq.n	402e82 <memchr+0x56>
  402e6a:	1905      	adds	r5, r0, r4
  402e6c:	1c43      	adds	r3, r0, #1
  402e6e:	e002      	b.n	402e76 <memchr+0x4a>
  402e70:	7802      	ldrb	r2, [r0, #0]
  402e72:	428a      	cmp	r2, r1
  402e74:	d005      	beq.n	402e82 <memchr+0x56>
  402e76:	42ab      	cmp	r3, r5
  402e78:	4618      	mov	r0, r3
  402e7a:	f103 0301 	add.w	r3, r3, #1
  402e7e:	d1f7      	bne.n	402e70 <memchr+0x44>
  402e80:	2000      	movs	r0, #0
  402e82:	bc70      	pop	{r4, r5, r6}
  402e84:	4770      	bx	lr
  402e86:	4620      	mov	r0, r4
  402e88:	bc70      	pop	{r4, r5, r6}
  402e8a:	4770      	bx	lr
  402e8c:	ea41 2601 	orr.w	r6, r1, r1, lsl #8
  402e90:	4602      	mov	r2, r0
  402e92:	ea46 4606 	orr.w	r6, r6, r6, lsl #16
  402e96:	4610      	mov	r0, r2
  402e98:	3204      	adds	r2, #4
  402e9a:	6803      	ldr	r3, [r0, #0]
  402e9c:	4073      	eors	r3, r6
  402e9e:	f1a3 3501 	sub.w	r5, r3, #16843009	; 0x1010101
  402ea2:	ea25 0303 	bic.w	r3, r5, r3
  402ea6:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
  402eaa:	d1da      	bne.n	402e62 <memchr+0x36>
  402eac:	3c04      	subs	r4, #4
  402eae:	2c03      	cmp	r4, #3
  402eb0:	4610      	mov	r0, r2
  402eb2:	d8f0      	bhi.n	402e96 <memchr+0x6a>
  402eb4:	e7d5      	b.n	402e62 <memchr+0x36>
  402eb6:	4614      	mov	r4, r2
  402eb8:	e7d1      	b.n	402e5e <memchr+0x32>
  402eba:	4610      	mov	r0, r2
  402ebc:	e7e1      	b.n	402e82 <memchr+0x56>
  402ebe:	bf00      	nop

00402ec0 <memcpy>:
  402ec0:	4684      	mov	ip, r0
  402ec2:	ea41 0300 	orr.w	r3, r1, r0
  402ec6:	f013 0303 	ands.w	r3, r3, #3
  402eca:	d16d      	bne.n	402fa8 <memcpy+0xe8>
  402ecc:	3a40      	subs	r2, #64	; 0x40
  402ece:	d341      	bcc.n	402f54 <memcpy+0x94>
  402ed0:	f851 3b04 	ldr.w	r3, [r1], #4
  402ed4:	f840 3b04 	str.w	r3, [r0], #4
  402ed8:	f851 3b04 	ldr.w	r3, [r1], #4
  402edc:	f840 3b04 	str.w	r3, [r0], #4
  402ee0:	f851 3b04 	ldr.w	r3, [r1], #4
  402ee4:	f840 3b04 	str.w	r3, [r0], #4
  402ee8:	f851 3b04 	ldr.w	r3, [r1], #4
  402eec:	f840 3b04 	str.w	r3, [r0], #4
  402ef0:	f851 3b04 	ldr.w	r3, [r1], #4
  402ef4:	f840 3b04 	str.w	r3, [r0], #4
  402ef8:	f851 3b04 	ldr.w	r3, [r1], #4
  402efc:	f840 3b04 	str.w	r3, [r0], #4
  402f00:	f851 3b04 	ldr.w	r3, [r1], #4
  402f04:	f840 3b04 	str.w	r3, [r0], #4
  402f08:	f851 3b04 	ldr.w	r3, [r1], #4
  402f0c:	f840 3b04 	str.w	r3, [r0], #4
  402f10:	f851 3b04 	ldr.w	r3, [r1], #4
  402f14:	f840 3b04 	str.w	r3, [r0], #4
  402f18:	f851 3b04 	ldr.w	r3, [r1], #4
  402f1c:	f840 3b04 	str.w	r3, [r0], #4
  402f20:	f851 3b04 	ldr.w	r3, [r1], #4
  402f24:	f840 3b04 	str.w	r3, [r0], #4
  402f28:	f851 3b04 	ldr.w	r3, [r1], #4
  402f2c:	f840 3b04 	str.w	r3, [r0], #4
  402f30:	f851 3b04 	ldr.w	r3, [r1], #4
  402f34:	f840 3b04 	str.w	r3, [r0], #4
  402f38:	f851 3b04 	ldr.w	r3, [r1], #4
  402f3c:	f840 3b04 	str.w	r3, [r0], #4
  402f40:	f851 3b04 	ldr.w	r3, [r1], #4
  402f44:	f840 3b04 	str.w	r3, [r0], #4
  402f48:	f851 3b04 	ldr.w	r3, [r1], #4
  402f4c:	f840 3b04 	str.w	r3, [r0], #4
  402f50:	3a40      	subs	r2, #64	; 0x40
  402f52:	d2bd      	bcs.n	402ed0 <memcpy+0x10>
  402f54:	3230      	adds	r2, #48	; 0x30
  402f56:	d311      	bcc.n	402f7c <memcpy+0xbc>
  402f58:	f851 3b04 	ldr.w	r3, [r1], #4
  402f5c:	f840 3b04 	str.w	r3, [r0], #4
  402f60:	f851 3b04 	ldr.w	r3, [r1], #4
  402f64:	f840 3b04 	str.w	r3, [r0], #4
  402f68:	f851 3b04 	ldr.w	r3, [r1], #4
  402f6c:	f840 3b04 	str.w	r3, [r0], #4
  402f70:	f851 3b04 	ldr.w	r3, [r1], #4
  402f74:	f840 3b04 	str.w	r3, [r0], #4
  402f78:	3a10      	subs	r2, #16
  402f7a:	d2ed      	bcs.n	402f58 <memcpy+0x98>
  402f7c:	320c      	adds	r2, #12
  402f7e:	d305      	bcc.n	402f8c <memcpy+0xcc>
  402f80:	f851 3b04 	ldr.w	r3, [r1], #4
  402f84:	f840 3b04 	str.w	r3, [r0], #4
  402f88:	3a04      	subs	r2, #4
  402f8a:	d2f9      	bcs.n	402f80 <memcpy+0xc0>
  402f8c:	3204      	adds	r2, #4
  402f8e:	d008      	beq.n	402fa2 <memcpy+0xe2>
  402f90:	07d2      	lsls	r2, r2, #31
  402f92:	bf1c      	itt	ne
  402f94:	f811 3b01 	ldrbne.w	r3, [r1], #1
  402f98:	f800 3b01 	strbne.w	r3, [r0], #1
  402f9c:	d301      	bcc.n	402fa2 <memcpy+0xe2>
  402f9e:	880b      	ldrh	r3, [r1, #0]
  402fa0:	8003      	strh	r3, [r0, #0]
  402fa2:	4660      	mov	r0, ip
  402fa4:	4770      	bx	lr
  402fa6:	bf00      	nop
  402fa8:	2a08      	cmp	r2, #8
  402faa:	d313      	bcc.n	402fd4 <memcpy+0x114>
  402fac:	078b      	lsls	r3, r1, #30
  402fae:	d08d      	beq.n	402ecc <memcpy+0xc>
  402fb0:	f010 0303 	ands.w	r3, r0, #3
  402fb4:	d08a      	beq.n	402ecc <memcpy+0xc>
  402fb6:	f1c3 0304 	rsb	r3, r3, #4
  402fba:	1ad2      	subs	r2, r2, r3
  402fbc:	07db      	lsls	r3, r3, #31
  402fbe:	bf1c      	itt	ne
  402fc0:	f811 3b01 	ldrbne.w	r3, [r1], #1
  402fc4:	f800 3b01 	strbne.w	r3, [r0], #1
  402fc8:	d380      	bcc.n	402ecc <memcpy+0xc>
  402fca:	f831 3b02 	ldrh.w	r3, [r1], #2
  402fce:	f820 3b02 	strh.w	r3, [r0], #2
  402fd2:	e77b      	b.n	402ecc <memcpy+0xc>
  402fd4:	3a04      	subs	r2, #4
  402fd6:	d3d9      	bcc.n	402f8c <memcpy+0xcc>
  402fd8:	3a01      	subs	r2, #1
  402fda:	f811 3b01 	ldrb.w	r3, [r1], #1
  402fde:	f800 3b01 	strb.w	r3, [r0], #1
  402fe2:	d2f9      	bcs.n	402fd8 <memcpy+0x118>
  402fe4:	780b      	ldrb	r3, [r1, #0]
  402fe6:	7003      	strb	r3, [r0, #0]
  402fe8:	784b      	ldrb	r3, [r1, #1]
  402fea:	7043      	strb	r3, [r0, #1]
  402fec:	788b      	ldrb	r3, [r1, #2]
  402fee:	7083      	strb	r3, [r0, #2]
  402ff0:	4660      	mov	r0, ip
  402ff2:	4770      	bx	lr

00402ff4 <memmove>:
  402ff4:	4288      	cmp	r0, r1
  402ff6:	b5f0      	push	{r4, r5, r6, r7, lr}
  402ff8:	d90d      	bls.n	403016 <memmove+0x22>
  402ffa:	188b      	adds	r3, r1, r2
  402ffc:	4298      	cmp	r0, r3
  402ffe:	d20a      	bcs.n	403016 <memmove+0x22>
  403000:	1881      	adds	r1, r0, r2
  403002:	2a00      	cmp	r2, #0
  403004:	d054      	beq.n	4030b0 <memmove+0xbc>
  403006:	1a9a      	subs	r2, r3, r2
  403008:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
  40300c:	f801 4d01 	strb.w	r4, [r1, #-1]!
  403010:	4293      	cmp	r3, r2
  403012:	d1f9      	bne.n	403008 <memmove+0x14>
  403014:	bdf0      	pop	{r4, r5, r6, r7, pc}
  403016:	2a0f      	cmp	r2, #15
  403018:	d948      	bls.n	4030ac <memmove+0xb8>
  40301a:	ea40 0301 	orr.w	r3, r0, r1
  40301e:	079b      	lsls	r3, r3, #30
  403020:	d147      	bne.n	4030b2 <memmove+0xbe>
  403022:	f100 0410 	add.w	r4, r0, #16
  403026:	f101 0310 	add.w	r3, r1, #16
  40302a:	4615      	mov	r5, r2
  40302c:	f853 6c10 	ldr.w	r6, [r3, #-16]
  403030:	f844 6c10 	str.w	r6, [r4, #-16]
  403034:	f853 6c0c 	ldr.w	r6, [r3, #-12]
  403038:	f844 6c0c 	str.w	r6, [r4, #-12]
  40303c:	f853 6c08 	ldr.w	r6, [r3, #-8]
  403040:	f844 6c08 	str.w	r6, [r4, #-8]
  403044:	3d10      	subs	r5, #16
  403046:	f853 6c04 	ldr.w	r6, [r3, #-4]
  40304a:	f844 6c04 	str.w	r6, [r4, #-4]
  40304e:	2d0f      	cmp	r5, #15
  403050:	f103 0310 	add.w	r3, r3, #16
  403054:	f104 0410 	add.w	r4, r4, #16
  403058:	d8e8      	bhi.n	40302c <memmove+0x38>
  40305a:	f1a2 0310 	sub.w	r3, r2, #16
  40305e:	f023 030f 	bic.w	r3, r3, #15
  403062:	f002 0e0f 	and.w	lr, r2, #15
  403066:	3310      	adds	r3, #16
  403068:	f1be 0f03 	cmp.w	lr, #3
  40306c:	4419      	add	r1, r3
  40306e:	4403      	add	r3, r0
  403070:	d921      	bls.n	4030b6 <memmove+0xc2>
  403072:	1f1e      	subs	r6, r3, #4
  403074:	460d      	mov	r5, r1
  403076:	4674      	mov	r4, lr
  403078:	3c04      	subs	r4, #4
  40307a:	f855 7b04 	ldr.w	r7, [r5], #4
  40307e:	f846 7f04 	str.w	r7, [r6, #4]!
  403082:	2c03      	cmp	r4, #3
  403084:	d8f8      	bhi.n	403078 <memmove+0x84>
  403086:	f1ae 0404 	sub.w	r4, lr, #4
  40308a:	f024 0403 	bic.w	r4, r4, #3
  40308e:	3404      	adds	r4, #4
  403090:	4423      	add	r3, r4
  403092:	4421      	add	r1, r4
  403094:	f002 0203 	and.w	r2, r2, #3
  403098:	b152      	cbz	r2, 4030b0 <memmove+0xbc>
  40309a:	3b01      	subs	r3, #1
  40309c:	440a      	add	r2, r1
  40309e:	f811 4b01 	ldrb.w	r4, [r1], #1
  4030a2:	f803 4f01 	strb.w	r4, [r3, #1]!
  4030a6:	4291      	cmp	r1, r2
  4030a8:	d1f9      	bne.n	40309e <memmove+0xaa>
  4030aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4030ac:	4603      	mov	r3, r0
  4030ae:	e7f3      	b.n	403098 <memmove+0xa4>
  4030b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4030b2:	4603      	mov	r3, r0
  4030b4:	e7f1      	b.n	40309a <memmove+0xa6>
  4030b6:	4672      	mov	r2, lr
  4030b8:	e7ee      	b.n	403098 <memmove+0xa4>
  4030ba:	bf00      	nop

004030bc <__malloc_lock>:
  4030bc:	4770      	bx	lr
  4030be:	bf00      	nop

004030c0 <__malloc_unlock>:
  4030c0:	4770      	bx	lr
  4030c2:	bf00      	nop

004030c4 <_realloc_r>:
  4030c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4030c8:	4617      	mov	r7, r2
  4030ca:	b083      	sub	sp, #12
  4030cc:	460e      	mov	r6, r1
  4030ce:	2900      	cmp	r1, #0
  4030d0:	f000 80e7 	beq.w	4032a2 <_realloc_r+0x1de>
  4030d4:	4681      	mov	r9, r0
  4030d6:	f107 050b 	add.w	r5, r7, #11
  4030da:	f7ff ffef 	bl	4030bc <__malloc_lock>
  4030de:	f856 3c04 	ldr.w	r3, [r6, #-4]
  4030e2:	2d16      	cmp	r5, #22
  4030e4:	f023 0403 	bic.w	r4, r3, #3
  4030e8:	f1a6 0808 	sub.w	r8, r6, #8
  4030ec:	d84c      	bhi.n	403188 <_realloc_r+0xc4>
  4030ee:	2210      	movs	r2, #16
  4030f0:	4615      	mov	r5, r2
  4030f2:	42af      	cmp	r7, r5
  4030f4:	d84d      	bhi.n	403192 <_realloc_r+0xce>
  4030f6:	4294      	cmp	r4, r2
  4030f8:	f280 8084 	bge.w	403204 <_realloc_r+0x140>
  4030fc:	f8df b3ac 	ldr.w	fp, [pc, #940]	; 4034ac <_realloc_r+0x3e8>
  403100:	f8db 0008 	ldr.w	r0, [fp, #8]
  403104:	eb08 0104 	add.w	r1, r8, r4
  403108:	4288      	cmp	r0, r1
  40310a:	f000 80d6 	beq.w	4032ba <_realloc_r+0x1f6>
  40310e:	6848      	ldr	r0, [r1, #4]
  403110:	f020 0e01 	bic.w	lr, r0, #1
  403114:	448e      	add	lr, r1
  403116:	f8de e004 	ldr.w	lr, [lr, #4]
  40311a:	f01e 0f01 	tst.w	lr, #1
  40311e:	d13f      	bne.n	4031a0 <_realloc_r+0xdc>
  403120:	f020 0003 	bic.w	r0, r0, #3
  403124:	4420      	add	r0, r4
  403126:	4290      	cmp	r0, r2
  403128:	f280 80c1 	bge.w	4032ae <_realloc_r+0x1ea>
  40312c:	07db      	lsls	r3, r3, #31
  40312e:	f100 808f 	bmi.w	403250 <_realloc_r+0x18c>
  403132:	f856 3c08 	ldr.w	r3, [r6, #-8]
  403136:	ebc3 0a08 	rsb	sl, r3, r8
  40313a:	f8da 3004 	ldr.w	r3, [sl, #4]
  40313e:	f023 0303 	bic.w	r3, r3, #3
  403142:	eb00 0e03 	add.w	lr, r0, r3
  403146:	4596      	cmp	lr, r2
  403148:	db34      	blt.n	4031b4 <_realloc_r+0xf0>
  40314a:	68cb      	ldr	r3, [r1, #12]
  40314c:	688a      	ldr	r2, [r1, #8]
  40314e:	4657      	mov	r7, sl
  403150:	60d3      	str	r3, [r2, #12]
  403152:	609a      	str	r2, [r3, #8]
  403154:	f857 1f08 	ldr.w	r1, [r7, #8]!
  403158:	f8da 300c 	ldr.w	r3, [sl, #12]
  40315c:	60cb      	str	r3, [r1, #12]
  40315e:	1f22      	subs	r2, r4, #4
  403160:	2a24      	cmp	r2, #36	; 0x24
  403162:	6099      	str	r1, [r3, #8]
  403164:	f200 8136 	bhi.w	4033d4 <_realloc_r+0x310>
  403168:	2a13      	cmp	r2, #19
  40316a:	f240 80fd 	bls.w	403368 <_realloc_r+0x2a4>
  40316e:	6833      	ldr	r3, [r6, #0]
  403170:	f8ca 3008 	str.w	r3, [sl, #8]
  403174:	6873      	ldr	r3, [r6, #4]
  403176:	f8ca 300c 	str.w	r3, [sl, #12]
  40317a:	2a1b      	cmp	r2, #27
  40317c:	f200 8140 	bhi.w	403400 <_realloc_r+0x33c>
  403180:	3608      	adds	r6, #8
  403182:	f10a 0310 	add.w	r3, sl, #16
  403186:	e0f0      	b.n	40336a <_realloc_r+0x2a6>
  403188:	f025 0507 	bic.w	r5, r5, #7
  40318c:	2d00      	cmp	r5, #0
  40318e:	462a      	mov	r2, r5
  403190:	daaf      	bge.n	4030f2 <_realloc_r+0x2e>
  403192:	230c      	movs	r3, #12
  403194:	2000      	movs	r0, #0
  403196:	f8c9 3000 	str.w	r3, [r9]
  40319a:	b003      	add	sp, #12
  40319c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4031a0:	07d9      	lsls	r1, r3, #31
  4031a2:	d455      	bmi.n	403250 <_realloc_r+0x18c>
  4031a4:	f856 3c08 	ldr.w	r3, [r6, #-8]
  4031a8:	ebc3 0a08 	rsb	sl, r3, r8
  4031ac:	f8da 3004 	ldr.w	r3, [sl, #4]
  4031b0:	f023 0303 	bic.w	r3, r3, #3
  4031b4:	4423      	add	r3, r4
  4031b6:	4293      	cmp	r3, r2
  4031b8:	db4a      	blt.n	403250 <_realloc_r+0x18c>
  4031ba:	4657      	mov	r7, sl
  4031bc:	f8da 100c 	ldr.w	r1, [sl, #12]
  4031c0:	f857 0f08 	ldr.w	r0, [r7, #8]!
  4031c4:	1f22      	subs	r2, r4, #4
  4031c6:	2a24      	cmp	r2, #36	; 0x24
  4031c8:	60c1      	str	r1, [r0, #12]
  4031ca:	6088      	str	r0, [r1, #8]
  4031cc:	f200 810e 	bhi.w	4033ec <_realloc_r+0x328>
  4031d0:	2a13      	cmp	r2, #19
  4031d2:	f240 8109 	bls.w	4033e8 <_realloc_r+0x324>
  4031d6:	6831      	ldr	r1, [r6, #0]
  4031d8:	f8ca 1008 	str.w	r1, [sl, #8]
  4031dc:	6871      	ldr	r1, [r6, #4]
  4031de:	f8ca 100c 	str.w	r1, [sl, #12]
  4031e2:	2a1b      	cmp	r2, #27
  4031e4:	f200 8121 	bhi.w	40342a <_realloc_r+0x366>
  4031e8:	3608      	adds	r6, #8
  4031ea:	f10a 0210 	add.w	r2, sl, #16
  4031ee:	6831      	ldr	r1, [r6, #0]
  4031f0:	6011      	str	r1, [r2, #0]
  4031f2:	6871      	ldr	r1, [r6, #4]
  4031f4:	6051      	str	r1, [r2, #4]
  4031f6:	68b1      	ldr	r1, [r6, #8]
  4031f8:	6091      	str	r1, [r2, #8]
  4031fa:	461c      	mov	r4, r3
  4031fc:	f8da 3004 	ldr.w	r3, [sl, #4]
  403200:	463e      	mov	r6, r7
  403202:	46d0      	mov	r8, sl
  403204:	1b62      	subs	r2, r4, r5
  403206:	2a0f      	cmp	r2, #15
  403208:	f003 0301 	and.w	r3, r3, #1
  40320c:	d80e      	bhi.n	40322c <_realloc_r+0x168>
  40320e:	4323      	orrs	r3, r4
  403210:	4444      	add	r4, r8
  403212:	f8c8 3004 	str.w	r3, [r8, #4]
  403216:	6863      	ldr	r3, [r4, #4]
  403218:	f043 0301 	orr.w	r3, r3, #1
  40321c:	6063      	str	r3, [r4, #4]
  40321e:	4648      	mov	r0, r9
  403220:	f7ff ff4e 	bl	4030c0 <__malloc_unlock>
  403224:	4630      	mov	r0, r6
  403226:	b003      	add	sp, #12
  403228:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40322c:	eb08 0105 	add.w	r1, r8, r5
  403230:	431d      	orrs	r5, r3
  403232:	f042 0301 	orr.w	r3, r2, #1
  403236:	440a      	add	r2, r1
  403238:	f8c8 5004 	str.w	r5, [r8, #4]
  40323c:	604b      	str	r3, [r1, #4]
  40323e:	6853      	ldr	r3, [r2, #4]
  403240:	f043 0301 	orr.w	r3, r3, #1
  403244:	3108      	adds	r1, #8
  403246:	6053      	str	r3, [r2, #4]
  403248:	4648      	mov	r0, r9
  40324a:	f7ff f84d 	bl	4022e8 <_free_r>
  40324e:	e7e6      	b.n	40321e <_realloc_r+0x15a>
  403250:	4639      	mov	r1, r7
  403252:	4648      	mov	r0, r9
  403254:	f7ff fb58 	bl	402908 <_malloc_r>
  403258:	4607      	mov	r7, r0
  40325a:	b1d8      	cbz	r0, 403294 <_realloc_r+0x1d0>
  40325c:	f856 3c04 	ldr.w	r3, [r6, #-4]
  403260:	f023 0201 	bic.w	r2, r3, #1
  403264:	4442      	add	r2, r8
  403266:	f1a0 0108 	sub.w	r1, r0, #8
  40326a:	4291      	cmp	r1, r2
  40326c:	f000 80ac 	beq.w	4033c8 <_realloc_r+0x304>
  403270:	1f22      	subs	r2, r4, #4
  403272:	2a24      	cmp	r2, #36	; 0x24
  403274:	f200 8099 	bhi.w	4033aa <_realloc_r+0x2e6>
  403278:	2a13      	cmp	r2, #19
  40327a:	d86a      	bhi.n	403352 <_realloc_r+0x28e>
  40327c:	4603      	mov	r3, r0
  40327e:	4632      	mov	r2, r6
  403280:	6811      	ldr	r1, [r2, #0]
  403282:	6019      	str	r1, [r3, #0]
  403284:	6851      	ldr	r1, [r2, #4]
  403286:	6059      	str	r1, [r3, #4]
  403288:	6892      	ldr	r2, [r2, #8]
  40328a:	609a      	str	r2, [r3, #8]
  40328c:	4631      	mov	r1, r6
  40328e:	4648      	mov	r0, r9
  403290:	f7ff f82a 	bl	4022e8 <_free_r>
  403294:	4648      	mov	r0, r9
  403296:	f7ff ff13 	bl	4030c0 <__malloc_unlock>
  40329a:	4638      	mov	r0, r7
  40329c:	b003      	add	sp, #12
  40329e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4032a2:	4611      	mov	r1, r2
  4032a4:	b003      	add	sp, #12
  4032a6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4032aa:	f7ff bb2d 	b.w	402908 <_malloc_r>
  4032ae:	68ca      	ldr	r2, [r1, #12]
  4032b0:	6889      	ldr	r1, [r1, #8]
  4032b2:	4604      	mov	r4, r0
  4032b4:	60ca      	str	r2, [r1, #12]
  4032b6:	6091      	str	r1, [r2, #8]
  4032b8:	e7a4      	b.n	403204 <_realloc_r+0x140>
  4032ba:	6841      	ldr	r1, [r0, #4]
  4032bc:	f021 0103 	bic.w	r1, r1, #3
  4032c0:	4421      	add	r1, r4
  4032c2:	f105 0010 	add.w	r0, r5, #16
  4032c6:	4281      	cmp	r1, r0
  4032c8:	da5b      	bge.n	403382 <_realloc_r+0x2be>
  4032ca:	07db      	lsls	r3, r3, #31
  4032cc:	d4c0      	bmi.n	403250 <_realloc_r+0x18c>
  4032ce:	f856 3c08 	ldr.w	r3, [r6, #-8]
  4032d2:	ebc3 0a08 	rsb	sl, r3, r8
  4032d6:	f8da 3004 	ldr.w	r3, [sl, #4]
  4032da:	f023 0303 	bic.w	r3, r3, #3
  4032de:	eb01 0c03 	add.w	ip, r1, r3
  4032e2:	4560      	cmp	r0, ip
  4032e4:	f73f af66 	bgt.w	4031b4 <_realloc_r+0xf0>
  4032e8:	4657      	mov	r7, sl
  4032ea:	f8da 300c 	ldr.w	r3, [sl, #12]
  4032ee:	f857 1f08 	ldr.w	r1, [r7, #8]!
  4032f2:	1f22      	subs	r2, r4, #4
  4032f4:	2a24      	cmp	r2, #36	; 0x24
  4032f6:	60cb      	str	r3, [r1, #12]
  4032f8:	6099      	str	r1, [r3, #8]
  4032fa:	f200 80b8 	bhi.w	40346e <_realloc_r+0x3aa>
  4032fe:	2a13      	cmp	r2, #19
  403300:	f240 80a9 	bls.w	403456 <_realloc_r+0x392>
  403304:	6833      	ldr	r3, [r6, #0]
  403306:	f8ca 3008 	str.w	r3, [sl, #8]
  40330a:	6873      	ldr	r3, [r6, #4]
  40330c:	f8ca 300c 	str.w	r3, [sl, #12]
  403310:	2a1b      	cmp	r2, #27
  403312:	f200 80b5 	bhi.w	403480 <_realloc_r+0x3bc>
  403316:	3608      	adds	r6, #8
  403318:	f10a 0310 	add.w	r3, sl, #16
  40331c:	6832      	ldr	r2, [r6, #0]
  40331e:	601a      	str	r2, [r3, #0]
  403320:	6872      	ldr	r2, [r6, #4]
  403322:	605a      	str	r2, [r3, #4]
  403324:	68b2      	ldr	r2, [r6, #8]
  403326:	609a      	str	r2, [r3, #8]
  403328:	eb0a 0205 	add.w	r2, sl, r5
  40332c:	ebc5 030c 	rsb	r3, r5, ip
  403330:	f043 0301 	orr.w	r3, r3, #1
  403334:	f8cb 2008 	str.w	r2, [fp, #8]
  403338:	6053      	str	r3, [r2, #4]
  40333a:	f8da 3004 	ldr.w	r3, [sl, #4]
  40333e:	f003 0301 	and.w	r3, r3, #1
  403342:	431d      	orrs	r5, r3
  403344:	4648      	mov	r0, r9
  403346:	f8ca 5004 	str.w	r5, [sl, #4]
  40334a:	f7ff feb9 	bl	4030c0 <__malloc_unlock>
  40334e:	4638      	mov	r0, r7
  403350:	e769      	b.n	403226 <_realloc_r+0x162>
  403352:	6833      	ldr	r3, [r6, #0]
  403354:	6003      	str	r3, [r0, #0]
  403356:	6873      	ldr	r3, [r6, #4]
  403358:	6043      	str	r3, [r0, #4]
  40335a:	2a1b      	cmp	r2, #27
  40335c:	d829      	bhi.n	4033b2 <_realloc_r+0x2ee>
  40335e:	f100 0308 	add.w	r3, r0, #8
  403362:	f106 0208 	add.w	r2, r6, #8
  403366:	e78b      	b.n	403280 <_realloc_r+0x1bc>
  403368:	463b      	mov	r3, r7
  40336a:	6832      	ldr	r2, [r6, #0]
  40336c:	601a      	str	r2, [r3, #0]
  40336e:	6872      	ldr	r2, [r6, #4]
  403370:	605a      	str	r2, [r3, #4]
  403372:	68b2      	ldr	r2, [r6, #8]
  403374:	609a      	str	r2, [r3, #8]
  403376:	463e      	mov	r6, r7
  403378:	4674      	mov	r4, lr
  40337a:	f8da 3004 	ldr.w	r3, [sl, #4]
  40337e:	46d0      	mov	r8, sl
  403380:	e740      	b.n	403204 <_realloc_r+0x140>
  403382:	eb08 0205 	add.w	r2, r8, r5
  403386:	1b4b      	subs	r3, r1, r5
  403388:	f043 0301 	orr.w	r3, r3, #1
  40338c:	f8cb 2008 	str.w	r2, [fp, #8]
  403390:	6053      	str	r3, [r2, #4]
  403392:	f856 3c04 	ldr.w	r3, [r6, #-4]
  403396:	f003 0301 	and.w	r3, r3, #1
  40339a:	431d      	orrs	r5, r3
  40339c:	4648      	mov	r0, r9
  40339e:	f846 5c04 	str.w	r5, [r6, #-4]
  4033a2:	f7ff fe8d 	bl	4030c0 <__malloc_unlock>
  4033a6:	4630      	mov	r0, r6
  4033a8:	e73d      	b.n	403226 <_realloc_r+0x162>
  4033aa:	4631      	mov	r1, r6
  4033ac:	f7ff fe22 	bl	402ff4 <memmove>
  4033b0:	e76c      	b.n	40328c <_realloc_r+0x1c8>
  4033b2:	68b3      	ldr	r3, [r6, #8]
  4033b4:	6083      	str	r3, [r0, #8]
  4033b6:	68f3      	ldr	r3, [r6, #12]
  4033b8:	60c3      	str	r3, [r0, #12]
  4033ba:	2a24      	cmp	r2, #36	; 0x24
  4033bc:	d02c      	beq.n	403418 <_realloc_r+0x354>
  4033be:	f100 0310 	add.w	r3, r0, #16
  4033c2:	f106 0210 	add.w	r2, r6, #16
  4033c6:	e75b      	b.n	403280 <_realloc_r+0x1bc>
  4033c8:	f850 2c04 	ldr.w	r2, [r0, #-4]
  4033cc:	f022 0203 	bic.w	r2, r2, #3
  4033d0:	4414      	add	r4, r2
  4033d2:	e717      	b.n	403204 <_realloc_r+0x140>
  4033d4:	4631      	mov	r1, r6
  4033d6:	4638      	mov	r0, r7
  4033d8:	4674      	mov	r4, lr
  4033da:	463e      	mov	r6, r7
  4033dc:	f7ff fe0a 	bl	402ff4 <memmove>
  4033e0:	46d0      	mov	r8, sl
  4033e2:	f8da 3004 	ldr.w	r3, [sl, #4]
  4033e6:	e70d      	b.n	403204 <_realloc_r+0x140>
  4033e8:	463a      	mov	r2, r7
  4033ea:	e700      	b.n	4031ee <_realloc_r+0x12a>
  4033ec:	4631      	mov	r1, r6
  4033ee:	4638      	mov	r0, r7
  4033f0:	461c      	mov	r4, r3
  4033f2:	463e      	mov	r6, r7
  4033f4:	f7ff fdfe 	bl	402ff4 <memmove>
  4033f8:	46d0      	mov	r8, sl
  4033fa:	f8da 3004 	ldr.w	r3, [sl, #4]
  4033fe:	e701      	b.n	403204 <_realloc_r+0x140>
  403400:	68b3      	ldr	r3, [r6, #8]
  403402:	f8ca 3010 	str.w	r3, [sl, #16]
  403406:	68f3      	ldr	r3, [r6, #12]
  403408:	f8ca 3014 	str.w	r3, [sl, #20]
  40340c:	2a24      	cmp	r2, #36	; 0x24
  40340e:	d018      	beq.n	403442 <_realloc_r+0x37e>
  403410:	3610      	adds	r6, #16
  403412:	f10a 0318 	add.w	r3, sl, #24
  403416:	e7a8      	b.n	40336a <_realloc_r+0x2a6>
  403418:	6933      	ldr	r3, [r6, #16]
  40341a:	6103      	str	r3, [r0, #16]
  40341c:	6973      	ldr	r3, [r6, #20]
  40341e:	6143      	str	r3, [r0, #20]
  403420:	f106 0218 	add.w	r2, r6, #24
  403424:	f100 0318 	add.w	r3, r0, #24
  403428:	e72a      	b.n	403280 <_realloc_r+0x1bc>
  40342a:	68b1      	ldr	r1, [r6, #8]
  40342c:	f8ca 1010 	str.w	r1, [sl, #16]
  403430:	68f1      	ldr	r1, [r6, #12]
  403432:	f8ca 1014 	str.w	r1, [sl, #20]
  403436:	2a24      	cmp	r2, #36	; 0x24
  403438:	d00f      	beq.n	40345a <_realloc_r+0x396>
  40343a:	3610      	adds	r6, #16
  40343c:	f10a 0218 	add.w	r2, sl, #24
  403440:	e6d5      	b.n	4031ee <_realloc_r+0x12a>
  403442:	6933      	ldr	r3, [r6, #16]
  403444:	f8ca 3018 	str.w	r3, [sl, #24]
  403448:	6973      	ldr	r3, [r6, #20]
  40344a:	f8ca 301c 	str.w	r3, [sl, #28]
  40344e:	3618      	adds	r6, #24
  403450:	f10a 0320 	add.w	r3, sl, #32
  403454:	e789      	b.n	40336a <_realloc_r+0x2a6>
  403456:	463b      	mov	r3, r7
  403458:	e760      	b.n	40331c <_realloc_r+0x258>
  40345a:	6932      	ldr	r2, [r6, #16]
  40345c:	f8ca 2018 	str.w	r2, [sl, #24]
  403460:	6972      	ldr	r2, [r6, #20]
  403462:	f8ca 201c 	str.w	r2, [sl, #28]
  403466:	3618      	adds	r6, #24
  403468:	f10a 0220 	add.w	r2, sl, #32
  40346c:	e6bf      	b.n	4031ee <_realloc_r+0x12a>
  40346e:	4631      	mov	r1, r6
  403470:	4638      	mov	r0, r7
  403472:	f8cd c004 	str.w	ip, [sp, #4]
  403476:	f7ff fdbd 	bl	402ff4 <memmove>
  40347a:	f8dd c004 	ldr.w	ip, [sp, #4]
  40347e:	e753      	b.n	403328 <_realloc_r+0x264>
  403480:	68b3      	ldr	r3, [r6, #8]
  403482:	f8ca 3010 	str.w	r3, [sl, #16]
  403486:	68f3      	ldr	r3, [r6, #12]
  403488:	f8ca 3014 	str.w	r3, [sl, #20]
  40348c:	2a24      	cmp	r2, #36	; 0x24
  40348e:	d003      	beq.n	403498 <_realloc_r+0x3d4>
  403490:	3610      	adds	r6, #16
  403492:	f10a 0318 	add.w	r3, sl, #24
  403496:	e741      	b.n	40331c <_realloc_r+0x258>
  403498:	6933      	ldr	r3, [r6, #16]
  40349a:	f8ca 3018 	str.w	r3, [sl, #24]
  40349e:	6973      	ldr	r3, [r6, #20]
  4034a0:	f8ca 301c 	str.w	r3, [sl, #28]
  4034a4:	3618      	adds	r6, #24
  4034a6:	f10a 0320 	add.w	r3, sl, #32
  4034aa:	e737      	b.n	40331c <_realloc_r+0x258>
  4034ac:	20000458 	.word	0x20000458

004034b0 <_sbrk_r>:
  4034b0:	b538      	push	{r3, r4, r5, lr}
  4034b2:	4c07      	ldr	r4, [pc, #28]	; (4034d0 <_sbrk_r+0x20>)
  4034b4:	2300      	movs	r3, #0
  4034b6:	4605      	mov	r5, r0
  4034b8:	4608      	mov	r0, r1
  4034ba:	6023      	str	r3, [r4, #0]
  4034bc:	f7fd fb0a 	bl	400ad4 <_sbrk>
  4034c0:	1c43      	adds	r3, r0, #1
  4034c2:	d000      	beq.n	4034c6 <_sbrk_r+0x16>
  4034c4:	bd38      	pop	{r3, r4, r5, pc}
  4034c6:	6823      	ldr	r3, [r4, #0]
  4034c8:	2b00      	cmp	r3, #0
  4034ca:	d0fb      	beq.n	4034c4 <_sbrk_r+0x14>
  4034cc:	602b      	str	r3, [r5, #0]
  4034ce:	bd38      	pop	{r3, r4, r5, pc}
  4034d0:	20000950 	.word	0x20000950

004034d4 <__sread>:
  4034d4:	b510      	push	{r4, lr}
  4034d6:	460c      	mov	r4, r1
  4034d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  4034dc:	f000 f9bc 	bl	403858 <_read_r>
  4034e0:	2800      	cmp	r0, #0
  4034e2:	db03      	blt.n	4034ec <__sread+0x18>
  4034e4:	6d23      	ldr	r3, [r4, #80]	; 0x50
  4034e6:	4403      	add	r3, r0
  4034e8:	6523      	str	r3, [r4, #80]	; 0x50
  4034ea:	bd10      	pop	{r4, pc}
  4034ec:	89a3      	ldrh	r3, [r4, #12]
  4034ee:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
  4034f2:	81a3      	strh	r3, [r4, #12]
  4034f4:	bd10      	pop	{r4, pc}
  4034f6:	bf00      	nop

004034f8 <__swrite>:
  4034f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4034fc:	4616      	mov	r6, r2
  4034fe:	898a      	ldrh	r2, [r1, #12]
  403500:	461d      	mov	r5, r3
  403502:	05d3      	lsls	r3, r2, #23
  403504:	460c      	mov	r4, r1
  403506:	4607      	mov	r7, r0
  403508:	d506      	bpl.n	403518 <__swrite+0x20>
  40350a:	2200      	movs	r2, #0
  40350c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  403510:	2302      	movs	r3, #2
  403512:	f000 f98d 	bl	403830 <_lseek_r>
  403516:	89a2      	ldrh	r2, [r4, #12]
  403518:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  40351c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
  403520:	81a2      	strh	r2, [r4, #12]
  403522:	4638      	mov	r0, r7
  403524:	4632      	mov	r2, r6
  403526:	462b      	mov	r3, r5
  403528:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  40352c:	f000 b8a0 	b.w	403670 <_write_r>

00403530 <__sseek>:
  403530:	b510      	push	{r4, lr}
  403532:	460c      	mov	r4, r1
  403534:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  403538:	f000 f97a 	bl	403830 <_lseek_r>
  40353c:	89a3      	ldrh	r3, [r4, #12]
  40353e:	1c42      	adds	r2, r0, #1
  403540:	bf0e      	itee	eq
  403542:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
  403546:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
  40354a:	6520      	strne	r0, [r4, #80]	; 0x50
  40354c:	81a3      	strh	r3, [r4, #12]
  40354e:	bd10      	pop	{r4, pc}

00403550 <__sclose>:
  403550:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  403554:	f000 b8f2 	b.w	40373c <_close_r>

00403558 <__swbuf_r>:
  403558:	b570      	push	{r4, r5, r6, lr}
  40355a:	460d      	mov	r5, r1
  40355c:	4614      	mov	r4, r2
  40355e:	4606      	mov	r6, r0
  403560:	b110      	cbz	r0, 403568 <__swbuf_r+0x10>
  403562:	6b83      	ldr	r3, [r0, #56]	; 0x38
  403564:	2b00      	cmp	r3, #0
  403566:	d048      	beq.n	4035fa <__swbuf_r+0xa2>
  403568:	89a2      	ldrh	r2, [r4, #12]
  40356a:	69a3      	ldr	r3, [r4, #24]
  40356c:	60a3      	str	r3, [r4, #8]
  40356e:	b291      	uxth	r1, r2
  403570:	0708      	lsls	r0, r1, #28
  403572:	d538      	bpl.n	4035e6 <__swbuf_r+0x8e>
  403574:	6923      	ldr	r3, [r4, #16]
  403576:	2b00      	cmp	r3, #0
  403578:	d035      	beq.n	4035e6 <__swbuf_r+0x8e>
  40357a:	0489      	lsls	r1, r1, #18
  40357c:	b2ed      	uxtb	r5, r5
  40357e:	d515      	bpl.n	4035ac <__swbuf_r+0x54>
  403580:	6822      	ldr	r2, [r4, #0]
  403582:	6961      	ldr	r1, [r4, #20]
  403584:	1ad3      	subs	r3, r2, r3
  403586:	428b      	cmp	r3, r1
  403588:	da1c      	bge.n	4035c4 <__swbuf_r+0x6c>
  40358a:	3301      	adds	r3, #1
  40358c:	68a1      	ldr	r1, [r4, #8]
  40358e:	1c50      	adds	r0, r2, #1
  403590:	3901      	subs	r1, #1
  403592:	60a1      	str	r1, [r4, #8]
  403594:	6020      	str	r0, [r4, #0]
  403596:	7015      	strb	r5, [r2, #0]
  403598:	6962      	ldr	r2, [r4, #20]
  40359a:	429a      	cmp	r2, r3
  40359c:	d01a      	beq.n	4035d4 <__swbuf_r+0x7c>
  40359e:	89a3      	ldrh	r3, [r4, #12]
  4035a0:	07db      	lsls	r3, r3, #31
  4035a2:	d501      	bpl.n	4035a8 <__swbuf_r+0x50>
  4035a4:	2d0a      	cmp	r5, #10
  4035a6:	d015      	beq.n	4035d4 <__swbuf_r+0x7c>
  4035a8:	4628      	mov	r0, r5
  4035aa:	bd70      	pop	{r4, r5, r6, pc}
  4035ac:	6e61      	ldr	r1, [r4, #100]	; 0x64
  4035ae:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
  4035b2:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
  4035b6:	81a2      	strh	r2, [r4, #12]
  4035b8:	6822      	ldr	r2, [r4, #0]
  4035ba:	6661      	str	r1, [r4, #100]	; 0x64
  4035bc:	6961      	ldr	r1, [r4, #20]
  4035be:	1ad3      	subs	r3, r2, r3
  4035c0:	428b      	cmp	r3, r1
  4035c2:	dbe2      	blt.n	40358a <__swbuf_r+0x32>
  4035c4:	4630      	mov	r0, r6
  4035c6:	4621      	mov	r1, r4
  4035c8:	f7fe fd22 	bl	402010 <_fflush_r>
  4035cc:	b940      	cbnz	r0, 4035e0 <__swbuf_r+0x88>
  4035ce:	6822      	ldr	r2, [r4, #0]
  4035d0:	2301      	movs	r3, #1
  4035d2:	e7db      	b.n	40358c <__swbuf_r+0x34>
  4035d4:	4630      	mov	r0, r6
  4035d6:	4621      	mov	r1, r4
  4035d8:	f7fe fd1a 	bl	402010 <_fflush_r>
  4035dc:	2800      	cmp	r0, #0
  4035de:	d0e3      	beq.n	4035a8 <__swbuf_r+0x50>
  4035e0:	f04f 30ff 	mov.w	r0, #4294967295
  4035e4:	bd70      	pop	{r4, r5, r6, pc}
  4035e6:	4630      	mov	r0, r6
  4035e8:	4621      	mov	r1, r4
  4035ea:	f7fe fbf5 	bl	401dd8 <__swsetup_r>
  4035ee:	2800      	cmp	r0, #0
  4035f0:	d1f6      	bne.n	4035e0 <__swbuf_r+0x88>
  4035f2:	89a2      	ldrh	r2, [r4, #12]
  4035f4:	6923      	ldr	r3, [r4, #16]
  4035f6:	b291      	uxth	r1, r2
  4035f8:	e7bf      	b.n	40357a <__swbuf_r+0x22>
  4035fa:	f7fe fd9d 	bl	402138 <__sinit>
  4035fe:	e7b3      	b.n	403568 <__swbuf_r+0x10>

00403600 <_wcrtomb_r>:
  403600:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  403604:	4605      	mov	r5, r0
  403606:	b086      	sub	sp, #24
  403608:	461e      	mov	r6, r3
  40360a:	460c      	mov	r4, r1
  40360c:	b1a1      	cbz	r1, 403638 <_wcrtomb_r+0x38>
  40360e:	4b10      	ldr	r3, [pc, #64]	; (403650 <_wcrtomb_r+0x50>)
  403610:	4617      	mov	r7, r2
  403612:	f8d3 8000 	ldr.w	r8, [r3]
  403616:	f7ff f8f5 	bl	402804 <__locale_charset>
  40361a:	9600      	str	r6, [sp, #0]
  40361c:	4603      	mov	r3, r0
  40361e:	4621      	mov	r1, r4
  403620:	463a      	mov	r2, r7
  403622:	4628      	mov	r0, r5
  403624:	47c0      	blx	r8
  403626:	1c43      	adds	r3, r0, #1
  403628:	d103      	bne.n	403632 <_wcrtomb_r+0x32>
  40362a:	2200      	movs	r2, #0
  40362c:	238a      	movs	r3, #138	; 0x8a
  40362e:	6032      	str	r2, [r6, #0]
  403630:	602b      	str	r3, [r5, #0]
  403632:	b006      	add	sp, #24
  403634:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  403638:	4b05      	ldr	r3, [pc, #20]	; (403650 <_wcrtomb_r+0x50>)
  40363a:	681f      	ldr	r7, [r3, #0]
  40363c:	f7ff f8e2 	bl	402804 <__locale_charset>
  403640:	9600      	str	r6, [sp, #0]
  403642:	4603      	mov	r3, r0
  403644:	4622      	mov	r2, r4
  403646:	4628      	mov	r0, r5
  403648:	a903      	add	r1, sp, #12
  40364a:	47b8      	blx	r7
  40364c:	e7eb      	b.n	403626 <_wcrtomb_r+0x26>
  40364e:	bf00      	nop
  403650:	20000868 	.word	0x20000868

00403654 <__ascii_wctomb>:
  403654:	b121      	cbz	r1, 403660 <__ascii_wctomb+0xc>
  403656:	2aff      	cmp	r2, #255	; 0xff
  403658:	d804      	bhi.n	403664 <__ascii_wctomb+0x10>
  40365a:	700a      	strb	r2, [r1, #0]
  40365c:	2001      	movs	r0, #1
  40365e:	4770      	bx	lr
  403660:	4608      	mov	r0, r1
  403662:	4770      	bx	lr
  403664:	238a      	movs	r3, #138	; 0x8a
  403666:	6003      	str	r3, [r0, #0]
  403668:	f04f 30ff 	mov.w	r0, #4294967295
  40366c:	4770      	bx	lr
  40366e:	bf00      	nop

00403670 <_write_r>:
  403670:	b570      	push	{r4, r5, r6, lr}
  403672:	4c08      	ldr	r4, [pc, #32]	; (403694 <_write_r+0x24>)
  403674:	4606      	mov	r6, r0
  403676:	2500      	movs	r5, #0
  403678:	4608      	mov	r0, r1
  40367a:	4611      	mov	r1, r2
  40367c:	461a      	mov	r2, r3
  40367e:	6025      	str	r5, [r4, #0]
  403680:	f7fc fda2 	bl	4001c8 <_write>
  403684:	1c43      	adds	r3, r0, #1
  403686:	d000      	beq.n	40368a <_write_r+0x1a>
  403688:	bd70      	pop	{r4, r5, r6, pc}
  40368a:	6823      	ldr	r3, [r4, #0]
  40368c:	2b00      	cmp	r3, #0
  40368e:	d0fb      	beq.n	403688 <_write_r+0x18>
  403690:	6033      	str	r3, [r6, #0]
  403692:	bd70      	pop	{r4, r5, r6, pc}
  403694:	20000950 	.word	0x20000950

00403698 <__register_exitproc>:
  403698:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  40369c:	4c25      	ldr	r4, [pc, #148]	; (403734 <__register_exitproc+0x9c>)
  40369e:	6825      	ldr	r5, [r4, #0]
  4036a0:	f8d5 4148 	ldr.w	r4, [r5, #328]	; 0x148
  4036a4:	4606      	mov	r6, r0
  4036a6:	4688      	mov	r8, r1
  4036a8:	4692      	mov	sl, r2
  4036aa:	4699      	mov	r9, r3
  4036ac:	b3cc      	cbz	r4, 403722 <__register_exitproc+0x8a>
  4036ae:	6860      	ldr	r0, [r4, #4]
  4036b0:	281f      	cmp	r0, #31
  4036b2:	dc18      	bgt.n	4036e6 <__register_exitproc+0x4e>
  4036b4:	1c43      	adds	r3, r0, #1
  4036b6:	b17e      	cbz	r6, 4036d8 <__register_exitproc+0x40>
  4036b8:	eb04 0580 	add.w	r5, r4, r0, lsl #2
  4036bc:	2101      	movs	r1, #1
  4036be:	f8c5 a088 	str.w	sl, [r5, #136]	; 0x88
  4036c2:	f8d4 7188 	ldr.w	r7, [r4, #392]	; 0x188
  4036c6:	fa01 f200 	lsl.w	r2, r1, r0
  4036ca:	4317      	orrs	r7, r2
  4036cc:	2e02      	cmp	r6, #2
  4036ce:	f8c4 7188 	str.w	r7, [r4, #392]	; 0x188
  4036d2:	f8c5 9108 	str.w	r9, [r5, #264]	; 0x108
  4036d6:	d01e      	beq.n	403716 <__register_exitproc+0x7e>
  4036d8:	3002      	adds	r0, #2
  4036da:	6063      	str	r3, [r4, #4]
  4036dc:	f844 8020 	str.w	r8, [r4, r0, lsl #2]
  4036e0:	2000      	movs	r0, #0
  4036e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4036e6:	4b14      	ldr	r3, [pc, #80]	; (403738 <__register_exitproc+0xa0>)
  4036e8:	b303      	cbz	r3, 40372c <__register_exitproc+0x94>
  4036ea:	f44f 70c8 	mov.w	r0, #400	; 0x190
  4036ee:	f7ff f903 	bl	4028f8 <malloc>
  4036f2:	4604      	mov	r4, r0
  4036f4:	b1d0      	cbz	r0, 40372c <__register_exitproc+0x94>
  4036f6:	f8d5 3148 	ldr.w	r3, [r5, #328]	; 0x148
  4036fa:	2700      	movs	r7, #0
  4036fc:	e880 0088 	stmia.w	r0, {r3, r7}
  403700:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
  403704:	4638      	mov	r0, r7
  403706:	2301      	movs	r3, #1
  403708:	f8c4 7188 	str.w	r7, [r4, #392]	; 0x188
  40370c:	f8c4 718c 	str.w	r7, [r4, #396]	; 0x18c
  403710:	2e00      	cmp	r6, #0
  403712:	d0e1      	beq.n	4036d8 <__register_exitproc+0x40>
  403714:	e7d0      	b.n	4036b8 <__register_exitproc+0x20>
  403716:	f8d4 118c 	ldr.w	r1, [r4, #396]	; 0x18c
  40371a:	430a      	orrs	r2, r1
  40371c:	f8c4 218c 	str.w	r2, [r4, #396]	; 0x18c
  403720:	e7da      	b.n	4036d8 <__register_exitproc+0x40>
  403722:	f505 74a6 	add.w	r4, r5, #332	; 0x14c
  403726:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
  40372a:	e7c0      	b.n	4036ae <__register_exitproc+0x16>
  40372c:	f04f 30ff 	mov.w	r0, #4294967295
  403730:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  403734:	00405528 	.word	0x00405528
  403738:	004028f9 	.word	0x004028f9

0040373c <_close_r>:
  40373c:	b538      	push	{r3, r4, r5, lr}
  40373e:	4c07      	ldr	r4, [pc, #28]	; (40375c <_close_r+0x20>)
  403740:	2300      	movs	r3, #0
  403742:	4605      	mov	r5, r0
  403744:	4608      	mov	r0, r1
  403746:	6023      	str	r3, [r4, #0]
  403748:	f7fd f9de 	bl	400b08 <_close>
  40374c:	1c43      	adds	r3, r0, #1
  40374e:	d000      	beq.n	403752 <_close_r+0x16>
  403750:	bd38      	pop	{r3, r4, r5, pc}
  403752:	6823      	ldr	r3, [r4, #0]
  403754:	2b00      	cmp	r3, #0
  403756:	d0fb      	beq.n	403750 <_close_r+0x14>
  403758:	602b      	str	r3, [r5, #0]
  40375a:	bd38      	pop	{r3, r4, r5, pc}
  40375c:	20000950 	.word	0x20000950

00403760 <_fclose_r>:
  403760:	2900      	cmp	r1, #0
  403762:	d03d      	beq.n	4037e0 <_fclose_r+0x80>
  403764:	b570      	push	{r4, r5, r6, lr}
  403766:	4605      	mov	r5, r0
  403768:	460c      	mov	r4, r1
  40376a:	b108      	cbz	r0, 403770 <_fclose_r+0x10>
  40376c:	6b83      	ldr	r3, [r0, #56]	; 0x38
  40376e:	b37b      	cbz	r3, 4037d0 <_fclose_r+0x70>
  403770:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  403774:	b90b      	cbnz	r3, 40377a <_fclose_r+0x1a>
  403776:	2000      	movs	r0, #0
  403778:	bd70      	pop	{r4, r5, r6, pc}
  40377a:	4628      	mov	r0, r5
  40377c:	4621      	mov	r1, r4
  40377e:	f7fe fb9d 	bl	401ebc <__sflush_r>
  403782:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  403784:	4606      	mov	r6, r0
  403786:	b133      	cbz	r3, 403796 <_fclose_r+0x36>
  403788:	4628      	mov	r0, r5
  40378a:	69e1      	ldr	r1, [r4, #28]
  40378c:	4798      	blx	r3
  40378e:	2800      	cmp	r0, #0
  403790:	bfb8      	it	lt
  403792:	f04f 36ff 	movlt.w	r6, #4294967295
  403796:	89a3      	ldrh	r3, [r4, #12]
  403798:	061b      	lsls	r3, r3, #24
  40379a:	d41c      	bmi.n	4037d6 <_fclose_r+0x76>
  40379c:	6b21      	ldr	r1, [r4, #48]	; 0x30
  40379e:	b141      	cbz	r1, 4037b2 <_fclose_r+0x52>
  4037a0:	f104 0340 	add.w	r3, r4, #64	; 0x40
  4037a4:	4299      	cmp	r1, r3
  4037a6:	d002      	beq.n	4037ae <_fclose_r+0x4e>
  4037a8:	4628      	mov	r0, r5
  4037aa:	f7fe fd9d 	bl	4022e8 <_free_r>
  4037ae:	2300      	movs	r3, #0
  4037b0:	6323      	str	r3, [r4, #48]	; 0x30
  4037b2:	6c61      	ldr	r1, [r4, #68]	; 0x44
  4037b4:	b121      	cbz	r1, 4037c0 <_fclose_r+0x60>
  4037b6:	4628      	mov	r0, r5
  4037b8:	f7fe fd96 	bl	4022e8 <_free_r>
  4037bc:	2300      	movs	r3, #0
  4037be:	6463      	str	r3, [r4, #68]	; 0x44
  4037c0:	f7fe fcc0 	bl	402144 <__sfp_lock_acquire>
  4037c4:	2300      	movs	r3, #0
  4037c6:	81a3      	strh	r3, [r4, #12]
  4037c8:	f7fe fcbe 	bl	402148 <__sfp_lock_release>
  4037cc:	4630      	mov	r0, r6
  4037ce:	bd70      	pop	{r4, r5, r6, pc}
  4037d0:	f7fe fcb2 	bl	402138 <__sinit>
  4037d4:	e7cc      	b.n	403770 <_fclose_r+0x10>
  4037d6:	4628      	mov	r0, r5
  4037d8:	6921      	ldr	r1, [r4, #16]
  4037da:	f7fe fd85 	bl	4022e8 <_free_r>
  4037de:	e7dd      	b.n	40379c <_fclose_r+0x3c>
  4037e0:	2000      	movs	r0, #0
  4037e2:	4770      	bx	lr

004037e4 <_fstat_r>:
  4037e4:	b538      	push	{r3, r4, r5, lr}
  4037e6:	4c08      	ldr	r4, [pc, #32]	; (403808 <_fstat_r+0x24>)
  4037e8:	2300      	movs	r3, #0
  4037ea:	4605      	mov	r5, r0
  4037ec:	4608      	mov	r0, r1
  4037ee:	4611      	mov	r1, r2
  4037f0:	6023      	str	r3, [r4, #0]
  4037f2:	f7fd f98d 	bl	400b10 <_fstat>
  4037f6:	1c43      	adds	r3, r0, #1
  4037f8:	d000      	beq.n	4037fc <_fstat_r+0x18>
  4037fa:	bd38      	pop	{r3, r4, r5, pc}
  4037fc:	6823      	ldr	r3, [r4, #0]
  4037fe:	2b00      	cmp	r3, #0
  403800:	d0fb      	beq.n	4037fa <_fstat_r+0x16>
  403802:	602b      	str	r3, [r5, #0]
  403804:	bd38      	pop	{r3, r4, r5, pc}
  403806:	bf00      	nop
  403808:	20000950 	.word	0x20000950

0040380c <_isatty_r>:
  40380c:	b538      	push	{r3, r4, r5, lr}
  40380e:	4c07      	ldr	r4, [pc, #28]	; (40382c <_isatty_r+0x20>)
  403810:	2300      	movs	r3, #0
  403812:	4605      	mov	r5, r0
  403814:	4608      	mov	r0, r1
  403816:	6023      	str	r3, [r4, #0]
  403818:	f7fd f980 	bl	400b1c <_isatty>
  40381c:	1c43      	adds	r3, r0, #1
  40381e:	d000      	beq.n	403822 <_isatty_r+0x16>
  403820:	bd38      	pop	{r3, r4, r5, pc}
  403822:	6823      	ldr	r3, [r4, #0]
  403824:	2b00      	cmp	r3, #0
  403826:	d0fb      	beq.n	403820 <_isatty_r+0x14>
  403828:	602b      	str	r3, [r5, #0]
  40382a:	bd38      	pop	{r3, r4, r5, pc}
  40382c:	20000950 	.word	0x20000950

00403830 <_lseek_r>:
  403830:	b570      	push	{r4, r5, r6, lr}
  403832:	4c08      	ldr	r4, [pc, #32]	; (403854 <_lseek_r+0x24>)
  403834:	4606      	mov	r6, r0
  403836:	2500      	movs	r5, #0
  403838:	4608      	mov	r0, r1
  40383a:	4611      	mov	r1, r2
  40383c:	461a      	mov	r2, r3
  40383e:	6025      	str	r5, [r4, #0]
  403840:	f7fd f96e 	bl	400b20 <_lseek>
  403844:	1c43      	adds	r3, r0, #1
  403846:	d000      	beq.n	40384a <_lseek_r+0x1a>
  403848:	bd70      	pop	{r4, r5, r6, pc}
  40384a:	6823      	ldr	r3, [r4, #0]
  40384c:	2b00      	cmp	r3, #0
  40384e:	d0fb      	beq.n	403848 <_lseek_r+0x18>
  403850:	6033      	str	r3, [r6, #0]
  403852:	bd70      	pop	{r4, r5, r6, pc}
  403854:	20000950 	.word	0x20000950

00403858 <_read_r>:
  403858:	b570      	push	{r4, r5, r6, lr}
  40385a:	4c08      	ldr	r4, [pc, #32]	; (40387c <_read_r+0x24>)
  40385c:	4606      	mov	r6, r0
  40385e:	2500      	movs	r5, #0
  403860:	4608      	mov	r0, r1
  403862:	4611      	mov	r1, r2
  403864:	461a      	mov	r2, r3
  403866:	6025      	str	r5, [r4, #0]
  403868:	f7fc fc90 	bl	40018c <_read>
  40386c:	1c43      	adds	r3, r0, #1
  40386e:	d000      	beq.n	403872 <_read_r+0x1a>
  403870:	bd70      	pop	{r4, r5, r6, pc}
  403872:	6823      	ldr	r3, [r4, #0]
  403874:	2b00      	cmp	r3, #0
  403876:	d0fb      	beq.n	403870 <_read_r+0x18>
  403878:	6033      	str	r3, [r6, #0]
  40387a:	bd70      	pop	{r4, r5, r6, pc}
  40387c:	20000950 	.word	0x20000950

00403880 <__aeabi_uldivmod>:
  403880:	b953      	cbnz	r3, 403898 <__aeabi_uldivmod+0x18>
  403882:	b94a      	cbnz	r2, 403898 <__aeabi_uldivmod+0x18>
  403884:	2900      	cmp	r1, #0
  403886:	bf08      	it	eq
  403888:	2800      	cmpeq	r0, #0
  40388a:	bf1c      	itt	ne
  40388c:	f04f 31ff 	movne.w	r1, #4294967295
  403890:	f04f 30ff 	movne.w	r0, #4294967295
  403894:	f000 b83c 	b.w	403910 <__aeabi_idiv0>
  403898:	b082      	sub	sp, #8
  40389a:	46ec      	mov	ip, sp
  40389c:	e92d 5000 	stmdb	sp!, {ip, lr}
  4038a0:	f000 f81e 	bl	4038e0 <__gnu_uldivmod_helper>
  4038a4:	f8dd e004 	ldr.w	lr, [sp, #4]
  4038a8:	b002      	add	sp, #8
  4038aa:	bc0c      	pop	{r2, r3}
  4038ac:	4770      	bx	lr
  4038ae:	bf00      	nop

004038b0 <__gnu_ldivmod_helper>:
  4038b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4038b4:	9c06      	ldr	r4, [sp, #24]
  4038b6:	4615      	mov	r5, r2
  4038b8:	4606      	mov	r6, r0
  4038ba:	460f      	mov	r7, r1
  4038bc:	4698      	mov	r8, r3
  4038be:	f000 f829 	bl	403914 <__divdi3>
  4038c2:	fb05 f301 	mul.w	r3, r5, r1
  4038c6:	fb00 3808 	mla	r8, r0, r8, r3
  4038ca:	fba5 2300 	umull	r2, r3, r5, r0
  4038ce:	1ab2      	subs	r2, r6, r2
  4038d0:	4443      	add	r3, r8
  4038d2:	eb67 0303 	sbc.w	r3, r7, r3
  4038d6:	e9c4 2300 	strd	r2, r3, [r4]
  4038da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4038de:	bf00      	nop

004038e0 <__gnu_uldivmod_helper>:
  4038e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4038e4:	9c06      	ldr	r4, [sp, #24]
  4038e6:	4690      	mov	r8, r2
  4038e8:	4606      	mov	r6, r0
  4038ea:	460f      	mov	r7, r1
  4038ec:	461d      	mov	r5, r3
  4038ee:	f000 f95f 	bl	403bb0 <__udivdi3>
  4038f2:	fb00 f505 	mul.w	r5, r0, r5
  4038f6:	fba0 2308 	umull	r2, r3, r0, r8
  4038fa:	fb08 5501 	mla	r5, r8, r1, r5
  4038fe:	1ab2      	subs	r2, r6, r2
  403900:	442b      	add	r3, r5
  403902:	eb67 0303 	sbc.w	r3, r7, r3
  403906:	e9c4 2300 	strd	r2, r3, [r4]
  40390a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40390e:	bf00      	nop

00403910 <__aeabi_idiv0>:
  403910:	4770      	bx	lr
  403912:	bf00      	nop

00403914 <__divdi3>:
  403914:	2900      	cmp	r1, #0
  403916:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  40391a:	f2c0 80a6 	blt.w	403a6a <__divdi3+0x156>
  40391e:	2600      	movs	r6, #0
  403920:	2b00      	cmp	r3, #0
  403922:	f2c0 809c 	blt.w	403a5e <__divdi3+0x14a>
  403926:	4688      	mov	r8, r1
  403928:	4694      	mov	ip, r2
  40392a:	469e      	mov	lr, r3
  40392c:	4615      	mov	r5, r2
  40392e:	4604      	mov	r4, r0
  403930:	460f      	mov	r7, r1
  403932:	2b00      	cmp	r3, #0
  403934:	d13d      	bne.n	4039b2 <__divdi3+0x9e>
  403936:	428a      	cmp	r2, r1
  403938:	d959      	bls.n	4039ee <__divdi3+0xda>
  40393a:	fab2 f382 	clz	r3, r2
  40393e:	b13b      	cbz	r3, 403950 <__divdi3+0x3c>
  403940:	f1c3 0220 	rsb	r2, r3, #32
  403944:	409f      	lsls	r7, r3
  403946:	fa20 f202 	lsr.w	r2, r0, r2
  40394a:	409d      	lsls	r5, r3
  40394c:	4317      	orrs	r7, r2
  40394e:	409c      	lsls	r4, r3
  403950:	0c29      	lsrs	r1, r5, #16
  403952:	0c22      	lsrs	r2, r4, #16
  403954:	fbb7 fef1 	udiv	lr, r7, r1
  403958:	b2a8      	uxth	r0, r5
  40395a:	fb01 771e 	mls	r7, r1, lr, r7
  40395e:	ea42 4707 	orr.w	r7, r2, r7, lsl #16
  403962:	fb00 f30e 	mul.w	r3, r0, lr
  403966:	42bb      	cmp	r3, r7
  403968:	d90a      	bls.n	403980 <__divdi3+0x6c>
  40396a:	197f      	adds	r7, r7, r5
  40396c:	f10e 32ff 	add.w	r2, lr, #4294967295
  403970:	f080 8105 	bcs.w	403b7e <__divdi3+0x26a>
  403974:	42bb      	cmp	r3, r7
  403976:	f240 8102 	bls.w	403b7e <__divdi3+0x26a>
  40397a:	f1ae 0e02 	sub.w	lr, lr, #2
  40397e:	442f      	add	r7, r5
  403980:	1aff      	subs	r7, r7, r3
  403982:	b2a4      	uxth	r4, r4
  403984:	fbb7 f3f1 	udiv	r3, r7, r1
  403988:	fb01 7713 	mls	r7, r1, r3, r7
  40398c:	ea44 4707 	orr.w	r7, r4, r7, lsl #16
  403990:	fb00 f003 	mul.w	r0, r0, r3
  403994:	42b8      	cmp	r0, r7
  403996:	d908      	bls.n	4039aa <__divdi3+0x96>
  403998:	197f      	adds	r7, r7, r5
  40399a:	f103 32ff 	add.w	r2, r3, #4294967295
  40399e:	f080 80f0 	bcs.w	403b82 <__divdi3+0x26e>
  4039a2:	42b8      	cmp	r0, r7
  4039a4:	f240 80ed 	bls.w	403b82 <__divdi3+0x26e>
  4039a8:	3b02      	subs	r3, #2
  4039aa:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
  4039ae:	2200      	movs	r2, #0
  4039b0:	e003      	b.n	4039ba <__divdi3+0xa6>
  4039b2:	428b      	cmp	r3, r1
  4039b4:	d90f      	bls.n	4039d6 <__divdi3+0xc2>
  4039b6:	2200      	movs	r2, #0
  4039b8:	4613      	mov	r3, r2
  4039ba:	1c34      	adds	r4, r6, #0
  4039bc:	bf18      	it	ne
  4039be:	2401      	movne	r4, #1
  4039c0:	4260      	negs	r0, r4
  4039c2:	f04f 0500 	mov.w	r5, #0
  4039c6:	eb65 0145 	sbc.w	r1, r5, r5, lsl #1
  4039ca:	4058      	eors	r0, r3
  4039cc:	4051      	eors	r1, r2
  4039ce:	1900      	adds	r0, r0, r4
  4039d0:	4169      	adcs	r1, r5
  4039d2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  4039d6:	fab3 f283 	clz	r2, r3
  4039da:	2a00      	cmp	r2, #0
  4039dc:	f040 8086 	bne.w	403aec <__divdi3+0x1d8>
  4039e0:	428b      	cmp	r3, r1
  4039e2:	d302      	bcc.n	4039ea <__divdi3+0xd6>
  4039e4:	4584      	cmp	ip, r0
  4039e6:	f200 80db 	bhi.w	403ba0 <__divdi3+0x28c>
  4039ea:	2301      	movs	r3, #1
  4039ec:	e7e5      	b.n	4039ba <__divdi3+0xa6>
  4039ee:	b912      	cbnz	r2, 4039f6 <__divdi3+0xe2>
  4039f0:	2301      	movs	r3, #1
  4039f2:	fbb3 f5f2 	udiv	r5, r3, r2
  4039f6:	fab5 f085 	clz	r0, r5
  4039fa:	2800      	cmp	r0, #0
  4039fc:	d13b      	bne.n	403a76 <__divdi3+0x162>
  4039fe:	1b78      	subs	r0, r7, r5
  403a00:	ea4f 4e15 	mov.w	lr, r5, lsr #16
  403a04:	fa1f fc85 	uxth.w	ip, r5
  403a08:	2201      	movs	r2, #1
  403a0a:	fbb0 f8fe 	udiv	r8, r0, lr
  403a0e:	0c21      	lsrs	r1, r4, #16
  403a10:	fb0e 0718 	mls	r7, lr, r8, r0
  403a14:	ea41 4707 	orr.w	r7, r1, r7, lsl #16
  403a18:	fb0c f308 	mul.w	r3, ip, r8
  403a1c:	42bb      	cmp	r3, r7
  403a1e:	d907      	bls.n	403a30 <__divdi3+0x11c>
  403a20:	197f      	adds	r7, r7, r5
  403a22:	f108 31ff 	add.w	r1, r8, #4294967295
  403a26:	d202      	bcs.n	403a2e <__divdi3+0x11a>
  403a28:	42bb      	cmp	r3, r7
  403a2a:	f200 80bd 	bhi.w	403ba8 <__divdi3+0x294>
  403a2e:	4688      	mov	r8, r1
  403a30:	1aff      	subs	r7, r7, r3
  403a32:	b2a4      	uxth	r4, r4
  403a34:	fbb7 f3fe 	udiv	r3, r7, lr
  403a38:	fb0e 7713 	mls	r7, lr, r3, r7
  403a3c:	ea44 4707 	orr.w	r7, r4, r7, lsl #16
  403a40:	fb0c fc03 	mul.w	ip, ip, r3
  403a44:	45bc      	cmp	ip, r7
  403a46:	d907      	bls.n	403a58 <__divdi3+0x144>
  403a48:	197f      	adds	r7, r7, r5
  403a4a:	f103 31ff 	add.w	r1, r3, #4294967295
  403a4e:	d202      	bcs.n	403a56 <__divdi3+0x142>
  403a50:	45bc      	cmp	ip, r7
  403a52:	f200 80a7 	bhi.w	403ba4 <__divdi3+0x290>
  403a56:	460b      	mov	r3, r1
  403a58:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
  403a5c:	e7ad      	b.n	4039ba <__divdi3+0xa6>
  403a5e:	4252      	negs	r2, r2
  403a60:	ea6f 0606 	mvn.w	r6, r6
  403a64:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
  403a68:	e75d      	b.n	403926 <__divdi3+0x12>
  403a6a:	4240      	negs	r0, r0
  403a6c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  403a70:	f04f 36ff 	mov.w	r6, #4294967295
  403a74:	e754      	b.n	403920 <__divdi3+0xc>
  403a76:	f1c0 0220 	rsb	r2, r0, #32
  403a7a:	fa24 f102 	lsr.w	r1, r4, r2
  403a7e:	fa07 f300 	lsl.w	r3, r7, r0
  403a82:	4085      	lsls	r5, r0
  403a84:	ea4f 4e15 	mov.w	lr, r5, lsr #16
  403a88:	40d7      	lsrs	r7, r2
  403a8a:	4319      	orrs	r1, r3
  403a8c:	fbb7 f2fe 	udiv	r2, r7, lr
  403a90:	0c0b      	lsrs	r3, r1, #16
  403a92:	fb0e 7712 	mls	r7, lr, r2, r7
  403a96:	fa1f fc85 	uxth.w	ip, r5
  403a9a:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
  403a9e:	fb0c f702 	mul.w	r7, ip, r2
  403aa2:	429f      	cmp	r7, r3
  403aa4:	fa04 f400 	lsl.w	r4, r4, r0
  403aa8:	d907      	bls.n	403aba <__divdi3+0x1a6>
  403aaa:	195b      	adds	r3, r3, r5
  403aac:	f102 30ff 	add.w	r0, r2, #4294967295
  403ab0:	d274      	bcs.n	403b9c <__divdi3+0x288>
  403ab2:	429f      	cmp	r7, r3
  403ab4:	d972      	bls.n	403b9c <__divdi3+0x288>
  403ab6:	3a02      	subs	r2, #2
  403ab8:	442b      	add	r3, r5
  403aba:	1bdf      	subs	r7, r3, r7
  403abc:	b289      	uxth	r1, r1
  403abe:	fbb7 f8fe 	udiv	r8, r7, lr
  403ac2:	fb0e 7318 	mls	r3, lr, r8, r7
  403ac6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
  403aca:	fb0c f708 	mul.w	r7, ip, r8
  403ace:	429f      	cmp	r7, r3
  403ad0:	d908      	bls.n	403ae4 <__divdi3+0x1d0>
  403ad2:	195b      	adds	r3, r3, r5
  403ad4:	f108 31ff 	add.w	r1, r8, #4294967295
  403ad8:	d25c      	bcs.n	403b94 <__divdi3+0x280>
  403ada:	429f      	cmp	r7, r3
  403adc:	d95a      	bls.n	403b94 <__divdi3+0x280>
  403ade:	f1a8 0802 	sub.w	r8, r8, #2
  403ae2:	442b      	add	r3, r5
  403ae4:	1bd8      	subs	r0, r3, r7
  403ae6:	ea48 4202 	orr.w	r2, r8, r2, lsl #16
  403aea:	e78e      	b.n	403a0a <__divdi3+0xf6>
  403aec:	f1c2 0320 	rsb	r3, r2, #32
  403af0:	fa2c f103 	lsr.w	r1, ip, r3
  403af4:	fa0e fe02 	lsl.w	lr, lr, r2
  403af8:	fa20 f703 	lsr.w	r7, r0, r3
  403afc:	ea41 0e0e 	orr.w	lr, r1, lr
  403b00:	fa08 f002 	lsl.w	r0, r8, r2
  403b04:	fa28 f103 	lsr.w	r1, r8, r3
  403b08:	ea4f 451e 	mov.w	r5, lr, lsr #16
  403b0c:	4338      	orrs	r0, r7
  403b0e:	fbb1 f8f5 	udiv	r8, r1, r5
  403b12:	0c03      	lsrs	r3, r0, #16
  403b14:	fb05 1118 	mls	r1, r5, r8, r1
  403b18:	fa1f f78e 	uxth.w	r7, lr
  403b1c:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
  403b20:	fb07 f308 	mul.w	r3, r7, r8
  403b24:	428b      	cmp	r3, r1
  403b26:	fa0c fc02 	lsl.w	ip, ip, r2
  403b2a:	d909      	bls.n	403b40 <__divdi3+0x22c>
  403b2c:	eb11 010e 	adds.w	r1, r1, lr
  403b30:	f108 39ff 	add.w	r9, r8, #4294967295
  403b34:	d230      	bcs.n	403b98 <__divdi3+0x284>
  403b36:	428b      	cmp	r3, r1
  403b38:	d92e      	bls.n	403b98 <__divdi3+0x284>
  403b3a:	f1a8 0802 	sub.w	r8, r8, #2
  403b3e:	4471      	add	r1, lr
  403b40:	1ac9      	subs	r1, r1, r3
  403b42:	b280      	uxth	r0, r0
  403b44:	fbb1 f3f5 	udiv	r3, r1, r5
  403b48:	fb05 1113 	mls	r1, r5, r3, r1
  403b4c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
  403b50:	fb07 f703 	mul.w	r7, r7, r3
  403b54:	428f      	cmp	r7, r1
  403b56:	d908      	bls.n	403b6a <__divdi3+0x256>
  403b58:	eb11 010e 	adds.w	r1, r1, lr
  403b5c:	f103 30ff 	add.w	r0, r3, #4294967295
  403b60:	d216      	bcs.n	403b90 <__divdi3+0x27c>
  403b62:	428f      	cmp	r7, r1
  403b64:	d914      	bls.n	403b90 <__divdi3+0x27c>
  403b66:	3b02      	subs	r3, #2
  403b68:	4471      	add	r1, lr
  403b6a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
  403b6e:	1bc9      	subs	r1, r1, r7
  403b70:	fba3 890c 	umull	r8, r9, r3, ip
  403b74:	4549      	cmp	r1, r9
  403b76:	d309      	bcc.n	403b8c <__divdi3+0x278>
  403b78:	d005      	beq.n	403b86 <__divdi3+0x272>
  403b7a:	2200      	movs	r2, #0
  403b7c:	e71d      	b.n	4039ba <__divdi3+0xa6>
  403b7e:	4696      	mov	lr, r2
  403b80:	e6fe      	b.n	403980 <__divdi3+0x6c>
  403b82:	4613      	mov	r3, r2
  403b84:	e711      	b.n	4039aa <__divdi3+0x96>
  403b86:	4094      	lsls	r4, r2
  403b88:	4544      	cmp	r4, r8
  403b8a:	d2f6      	bcs.n	403b7a <__divdi3+0x266>
  403b8c:	3b01      	subs	r3, #1
  403b8e:	e7f4      	b.n	403b7a <__divdi3+0x266>
  403b90:	4603      	mov	r3, r0
  403b92:	e7ea      	b.n	403b6a <__divdi3+0x256>
  403b94:	4688      	mov	r8, r1
  403b96:	e7a5      	b.n	403ae4 <__divdi3+0x1d0>
  403b98:	46c8      	mov	r8, r9
  403b9a:	e7d1      	b.n	403b40 <__divdi3+0x22c>
  403b9c:	4602      	mov	r2, r0
  403b9e:	e78c      	b.n	403aba <__divdi3+0x1a6>
  403ba0:	4613      	mov	r3, r2
  403ba2:	e70a      	b.n	4039ba <__divdi3+0xa6>
  403ba4:	3b02      	subs	r3, #2
  403ba6:	e757      	b.n	403a58 <__divdi3+0x144>
  403ba8:	f1a8 0802 	sub.w	r8, r8, #2
  403bac:	442f      	add	r7, r5
  403bae:	e73f      	b.n	403a30 <__divdi3+0x11c>

00403bb0 <__udivdi3>:
  403bb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  403bb4:	2b00      	cmp	r3, #0
  403bb6:	d144      	bne.n	403c42 <__udivdi3+0x92>
  403bb8:	428a      	cmp	r2, r1
  403bba:	4615      	mov	r5, r2
  403bbc:	4604      	mov	r4, r0
  403bbe:	d94f      	bls.n	403c60 <__udivdi3+0xb0>
  403bc0:	fab2 f782 	clz	r7, r2
  403bc4:	460e      	mov	r6, r1
  403bc6:	b14f      	cbz	r7, 403bdc <__udivdi3+0x2c>
  403bc8:	f1c7 0320 	rsb	r3, r7, #32
  403bcc:	40b9      	lsls	r1, r7
  403bce:	fa20 f603 	lsr.w	r6, r0, r3
  403bd2:	fa02 f507 	lsl.w	r5, r2, r7
  403bd6:	430e      	orrs	r6, r1
  403bd8:	fa00 f407 	lsl.w	r4, r0, r7
  403bdc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
  403be0:	0c23      	lsrs	r3, r4, #16
  403be2:	fbb6 f0fe 	udiv	r0, r6, lr
  403be6:	b2af      	uxth	r7, r5
  403be8:	fb0e 6110 	mls	r1, lr, r0, r6
  403bec:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
  403bf0:	fb07 f100 	mul.w	r1, r7, r0
  403bf4:	4299      	cmp	r1, r3
  403bf6:	d909      	bls.n	403c0c <__udivdi3+0x5c>
  403bf8:	195b      	adds	r3, r3, r5
  403bfa:	f100 32ff 	add.w	r2, r0, #4294967295
  403bfe:	f080 80ec 	bcs.w	403dda <__udivdi3+0x22a>
  403c02:	4299      	cmp	r1, r3
  403c04:	f240 80e9 	bls.w	403dda <__udivdi3+0x22a>
  403c08:	3802      	subs	r0, #2
  403c0a:	442b      	add	r3, r5
  403c0c:	1a5a      	subs	r2, r3, r1
  403c0e:	b2a4      	uxth	r4, r4
  403c10:	fbb2 f3fe 	udiv	r3, r2, lr
  403c14:	fb0e 2213 	mls	r2, lr, r3, r2
  403c18:	ea44 4202 	orr.w	r2, r4, r2, lsl #16
  403c1c:	fb07 f703 	mul.w	r7, r7, r3
  403c20:	4297      	cmp	r7, r2
  403c22:	d908      	bls.n	403c36 <__udivdi3+0x86>
  403c24:	1952      	adds	r2, r2, r5
  403c26:	f103 31ff 	add.w	r1, r3, #4294967295
  403c2a:	f080 80d8 	bcs.w	403dde <__udivdi3+0x22e>
  403c2e:	4297      	cmp	r7, r2
  403c30:	f240 80d5 	bls.w	403dde <__udivdi3+0x22e>
  403c34:	3b02      	subs	r3, #2
  403c36:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
  403c3a:	2600      	movs	r6, #0
  403c3c:	4631      	mov	r1, r6
  403c3e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  403c42:	428b      	cmp	r3, r1
  403c44:	d847      	bhi.n	403cd6 <__udivdi3+0x126>
  403c46:	fab3 f683 	clz	r6, r3
  403c4a:	2e00      	cmp	r6, #0
  403c4c:	d148      	bne.n	403ce0 <__udivdi3+0x130>
  403c4e:	428b      	cmp	r3, r1
  403c50:	d302      	bcc.n	403c58 <__udivdi3+0xa8>
  403c52:	4282      	cmp	r2, r0
  403c54:	f200 80cd 	bhi.w	403df2 <__udivdi3+0x242>
  403c58:	2001      	movs	r0, #1
  403c5a:	4631      	mov	r1, r6
  403c5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  403c60:	b912      	cbnz	r2, 403c68 <__udivdi3+0xb8>
  403c62:	2501      	movs	r5, #1
  403c64:	fbb5 f5f2 	udiv	r5, r5, r2
  403c68:	fab5 f885 	clz	r8, r5
  403c6c:	f1b8 0f00 	cmp.w	r8, #0
  403c70:	d177      	bne.n	403d62 <__udivdi3+0x1b2>
  403c72:	1b4a      	subs	r2, r1, r5
  403c74:	ea4f 4e15 	mov.w	lr, r5, lsr #16
  403c78:	b2af      	uxth	r7, r5
  403c7a:	2601      	movs	r6, #1
  403c7c:	fbb2 f0fe 	udiv	r0, r2, lr
  403c80:	0c23      	lsrs	r3, r4, #16
  403c82:	fb0e 2110 	mls	r1, lr, r0, r2
  403c86:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
  403c8a:	fb07 f300 	mul.w	r3, r7, r0
  403c8e:	428b      	cmp	r3, r1
  403c90:	d907      	bls.n	403ca2 <__udivdi3+0xf2>
  403c92:	1949      	adds	r1, r1, r5
  403c94:	f100 32ff 	add.w	r2, r0, #4294967295
  403c98:	d202      	bcs.n	403ca0 <__udivdi3+0xf0>
  403c9a:	428b      	cmp	r3, r1
  403c9c:	f200 80ba 	bhi.w	403e14 <__udivdi3+0x264>
  403ca0:	4610      	mov	r0, r2
  403ca2:	1ac9      	subs	r1, r1, r3
  403ca4:	b2a4      	uxth	r4, r4
  403ca6:	fbb1 f3fe 	udiv	r3, r1, lr
  403caa:	fb0e 1113 	mls	r1, lr, r3, r1
  403cae:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
  403cb2:	fb07 f703 	mul.w	r7, r7, r3
  403cb6:	42a7      	cmp	r7, r4
  403cb8:	d908      	bls.n	403ccc <__udivdi3+0x11c>
  403cba:	1964      	adds	r4, r4, r5
  403cbc:	f103 32ff 	add.w	r2, r3, #4294967295
  403cc0:	f080 808f 	bcs.w	403de2 <__udivdi3+0x232>
  403cc4:	42a7      	cmp	r7, r4
  403cc6:	f240 808c 	bls.w	403de2 <__udivdi3+0x232>
  403cca:	3b02      	subs	r3, #2
  403ccc:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
  403cd0:	4631      	mov	r1, r6
  403cd2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  403cd6:	2600      	movs	r6, #0
  403cd8:	4630      	mov	r0, r6
  403cda:	4631      	mov	r1, r6
  403cdc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  403ce0:	f1c6 0420 	rsb	r4, r6, #32
  403ce4:	fa22 f504 	lsr.w	r5, r2, r4
  403ce8:	40b3      	lsls	r3, r6
  403cea:	432b      	orrs	r3, r5
  403cec:	fa20 fc04 	lsr.w	ip, r0, r4
  403cf0:	fa01 f706 	lsl.w	r7, r1, r6
  403cf4:	fa21 f504 	lsr.w	r5, r1, r4
  403cf8:	ea4f 4e13 	mov.w	lr, r3, lsr #16
  403cfc:	ea4c 0707 	orr.w	r7, ip, r7
  403d00:	fbb5 f8fe 	udiv	r8, r5, lr
  403d04:	0c39      	lsrs	r1, r7, #16
  403d06:	fb0e 5518 	mls	r5, lr, r8, r5
  403d0a:	fa1f fc83 	uxth.w	ip, r3
  403d0e:	ea41 4505 	orr.w	r5, r1, r5, lsl #16
  403d12:	fb0c f108 	mul.w	r1, ip, r8
  403d16:	42a9      	cmp	r1, r5
  403d18:	fa02 f206 	lsl.w	r2, r2, r6
  403d1c:	d904      	bls.n	403d28 <__udivdi3+0x178>
  403d1e:	18ed      	adds	r5, r5, r3
  403d20:	f108 34ff 	add.w	r4, r8, #4294967295
  403d24:	d367      	bcc.n	403df6 <__udivdi3+0x246>
  403d26:	46a0      	mov	r8, r4
  403d28:	1a6d      	subs	r5, r5, r1
  403d2a:	b2bf      	uxth	r7, r7
  403d2c:	fbb5 f4fe 	udiv	r4, r5, lr
  403d30:	fb0e 5514 	mls	r5, lr, r4, r5
  403d34:	ea47 4105 	orr.w	r1, r7, r5, lsl #16
  403d38:	fb0c fc04 	mul.w	ip, ip, r4
  403d3c:	458c      	cmp	ip, r1
  403d3e:	d904      	bls.n	403d4a <__udivdi3+0x19a>
  403d40:	18c9      	adds	r1, r1, r3
  403d42:	f104 35ff 	add.w	r5, r4, #4294967295
  403d46:	d35c      	bcc.n	403e02 <__udivdi3+0x252>
  403d48:	462c      	mov	r4, r5
  403d4a:	ea44 4408 	orr.w	r4, r4, r8, lsl #16
  403d4e:	ebcc 0101 	rsb	r1, ip, r1
  403d52:	fba4 2302 	umull	r2, r3, r4, r2
  403d56:	4299      	cmp	r1, r3
  403d58:	d348      	bcc.n	403dec <__udivdi3+0x23c>
  403d5a:	d044      	beq.n	403de6 <__udivdi3+0x236>
  403d5c:	4620      	mov	r0, r4
  403d5e:	2600      	movs	r6, #0
  403d60:	e76c      	b.n	403c3c <__udivdi3+0x8c>
  403d62:	f1c8 0420 	rsb	r4, r8, #32
  403d66:	fa01 f308 	lsl.w	r3, r1, r8
  403d6a:	fa05 f508 	lsl.w	r5, r5, r8
  403d6e:	fa20 f704 	lsr.w	r7, r0, r4
  403d72:	40e1      	lsrs	r1, r4
  403d74:	ea4f 4e15 	mov.w	lr, r5, lsr #16
  403d78:	431f      	orrs	r7, r3
  403d7a:	fbb1 f6fe 	udiv	r6, r1, lr
  403d7e:	0c3a      	lsrs	r2, r7, #16
  403d80:	fb0e 1116 	mls	r1, lr, r6, r1
  403d84:	fa1f fc85 	uxth.w	ip, r5
  403d88:	ea42 4301 	orr.w	r3, r2, r1, lsl #16
  403d8c:	fb0c f206 	mul.w	r2, ip, r6
  403d90:	429a      	cmp	r2, r3
  403d92:	fa00 f408 	lsl.w	r4, r0, r8
  403d96:	d907      	bls.n	403da8 <__udivdi3+0x1f8>
  403d98:	195b      	adds	r3, r3, r5
  403d9a:	f106 31ff 	add.w	r1, r6, #4294967295
  403d9e:	d237      	bcs.n	403e10 <__udivdi3+0x260>
  403da0:	429a      	cmp	r2, r3
  403da2:	d935      	bls.n	403e10 <__udivdi3+0x260>
  403da4:	3e02      	subs	r6, #2
  403da6:	442b      	add	r3, r5
  403da8:	1a9b      	subs	r3, r3, r2
  403daa:	b2bf      	uxth	r7, r7
  403dac:	fbb3 f0fe 	udiv	r0, r3, lr
  403db0:	fb0e 3310 	mls	r3, lr, r0, r3
  403db4:	ea47 4303 	orr.w	r3, r7, r3, lsl #16
  403db8:	fb0c f100 	mul.w	r1, ip, r0
  403dbc:	4299      	cmp	r1, r3
  403dbe:	d907      	bls.n	403dd0 <__udivdi3+0x220>
  403dc0:	195b      	adds	r3, r3, r5
  403dc2:	f100 32ff 	add.w	r2, r0, #4294967295
  403dc6:	d221      	bcs.n	403e0c <__udivdi3+0x25c>
  403dc8:	4299      	cmp	r1, r3
  403dca:	d91f      	bls.n	403e0c <__udivdi3+0x25c>
  403dcc:	3802      	subs	r0, #2
  403dce:	442b      	add	r3, r5
  403dd0:	1a5a      	subs	r2, r3, r1
  403dd2:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
  403dd6:	4667      	mov	r7, ip
  403dd8:	e750      	b.n	403c7c <__udivdi3+0xcc>
  403dda:	4610      	mov	r0, r2
  403ddc:	e716      	b.n	403c0c <__udivdi3+0x5c>
  403dde:	460b      	mov	r3, r1
  403de0:	e729      	b.n	403c36 <__udivdi3+0x86>
  403de2:	4613      	mov	r3, r2
  403de4:	e772      	b.n	403ccc <__udivdi3+0x11c>
  403de6:	40b0      	lsls	r0, r6
  403de8:	4290      	cmp	r0, r2
  403dea:	d2b7      	bcs.n	403d5c <__udivdi3+0x1ac>
  403dec:	1e60      	subs	r0, r4, #1
  403dee:	2600      	movs	r6, #0
  403df0:	e724      	b.n	403c3c <__udivdi3+0x8c>
  403df2:	4630      	mov	r0, r6
  403df4:	e722      	b.n	403c3c <__udivdi3+0x8c>
  403df6:	42a9      	cmp	r1, r5
  403df8:	d995      	bls.n	403d26 <__udivdi3+0x176>
  403dfa:	f1a8 0802 	sub.w	r8, r8, #2
  403dfe:	441d      	add	r5, r3
  403e00:	e792      	b.n	403d28 <__udivdi3+0x178>
  403e02:	458c      	cmp	ip, r1
  403e04:	d9a0      	bls.n	403d48 <__udivdi3+0x198>
  403e06:	3c02      	subs	r4, #2
  403e08:	4419      	add	r1, r3
  403e0a:	e79e      	b.n	403d4a <__udivdi3+0x19a>
  403e0c:	4610      	mov	r0, r2
  403e0e:	e7df      	b.n	403dd0 <__udivdi3+0x220>
  403e10:	460e      	mov	r6, r1
  403e12:	e7c9      	b.n	403da8 <__udivdi3+0x1f8>
  403e14:	3802      	subs	r0, #2
  403e16:	4429      	add	r1, r5
  403e18:	e743      	b.n	403ca2 <__udivdi3+0xf2>
  403e1a:	bf00      	nop

00403e1c <gc_us_sine_data>:
  403e1c:	0004 0013 ffff 0001 fffa 0007 000b 0020     .............. .
  403e2c:	0039 0024 0019 000c ffe9 0006 fffc 001e     9.$.............
  403e3c:	0022 0018 001f 0019 002c 0013 004f 004b     ".......,...O.K.
  403e4c:	0019 002a 003a 0031 002c 0012 fffa 0014     ..*.:.1.,.......
  403e5c:	fff4 001b 0003 000b ffff ffc8 ffd3 ffe7     ................
  403e6c:	ffea fff3 ffe4 fff8 ffe1 ffd3 ffed ffc3     ................
  403e7c:	ffcc ffaa ffc8 ffb6 ffbb fff1 fff4 ffef     ................
  403e8c:	ffd4 ffeb ffde ffee fff9 fffd 0026 001e     ............&...
  403e9c:	0006 0014 ffcf ffbe ffd5 ffd8 fff7 fff7     ................
  403eac:	fffc fff7 000b ffee fff0 fff5 fff2 ffd9     ................
  403ebc:	ffd1 ffd9 ffec fff7 fff6 0010 000f 0017     ................
  403ecc:	0024 000c ffe6 fff3 fff4 000f 001d ffff     $...............
  403edc:	0008 0007 ffd1 ffeb 000f 001a 0028 ffe1     ............(...
  403eec:	0017 ffe8 ffd7 0032 ffd1 ffd1 fff6 ffd8     ......2.........
  403efc:	ffe7 ffe7 ffcc ffca fff3 000a fff8 0011     ................
  403f0c:	000e ffd7 fffb ffe2 fff4 0028 0010 0036     ..........(...6.
  403f1c:	004d 0019 fff2 0014 0021 003f 002b 0012     M.......!.?.+...
  403f2c:	000c fff7 0001 000b 0012 ffef ffef ffef     ................
  403f3c:	fff7 fffe fff7 fff6 ffe1 001b ffd7 ffdb     ................
  403f4c:	fff6 fff9 0010 0023 0039 0026 002d 0026     ......#.9.&.-.&.
  403f5c:	001f 0002 fffe fff0 fff1 fff9 ffeb fff5     ................
  403f6c:	0001 ffdb ffe2 000d 000a 0016 0002 fffe     ................
  403f7c:	0026 0024 0025 0031 fffe ffef fff0 0009     &.$.%.1.........
  403f8c:	ffd6 ffd4 ffc7 ffb6 ffd7 fff9 ffb8 fff3     ................
  403f9c:	0034 ffd6 0031 ffe2 ffc0 001e 0017 001d     4...1...........
  403fac:	0040 0023 0048 004c 0039 002d 001e 0043     @.#.H.L.9.-...C.
  403fbc:	0021 0027 fffc ffd1 0000 0025 ffe8 fff5     !.'.......%.....
  403fcc:	ffed 0029 0018 ffe0 0002 0036 0054 0021     ..).......6.T.!.
  403fdc:	0023 fff0 0029 003a 0014 001f ffbd ffdd     #...).:.........
  403fec:	0033 0013 0045 ffc9 ffb1 ffff ffcb fffe     3...E...........
  403ffc:	ffe2 fff8 0006 ffdc ffe3 ff7b ffde 0055     ..........{...U.
  40400c:	ffa1 005d fff9 ff9f 0072 fff7 0001 ffe5     ..].....r.......
  40401c:	ffca 001c 000a 000b ffe4 ff9c 0021 0000     ............!...
  40402c:	ffa2 ffb5 002b 001b ffff 0053 ff9f 0026     ....+.....S...&.
  40403c:	008d ffa4 fff7 ffc9 ffbc 0062 001c ffaf     ..........b.....
  40404c:	ffa1 ffce 0056 0021 0013 ff8c ffd2 0050     ....V.!.......P.
  40405c:	0008 0059 ffc2 ffdb 0023 ffe1 0061 0074     ..Y.....#...a.t.
  40406c:	ffa3 008f 0028 ffd6 0056 ffe8 ffce 0067     ....(...V.....g.
  40407c:	0059 ffbb 0034 ffaa 000d ff81 007e 0066     Y...4.......~.f.
  40408c:	ff64 003e ff8f ffba 014e 004a ff59 00ae     d.>.....N.J.Y...
  40409c:	ffe6 0059 007d febf ffef 00ce ff6f 00f1     ..Y.}.......o...
  4040ac:	ffb2 ff0e 00ff ff7f 0042 000d ff64 00b3     ........B...d...
  4040bc:	009a 0057 ffbc fec0 ff68 00e6 0120 0010     ..W.....h... ...
  4040cc:	fee8 001a 0094 000a 0090 ff09 0032 0105     ............2...
  4040dc:	ff3c 0097 ff7b ffac 0057 ff04 00df 002a     <...{...W.....*.
  4040ec:	ffd3 0119 ffba ff74 00b5 ffbd 005c 0065     ......t.....\.e.
  4040fc:	fed1 ff4f feee ff16 003a 003b ffbf ff1d     ..O.....:.;.....
  40410c:	fee3 0053 0005 00e4 ffd3 fe58 017f ffb4     ..S.......X.....
  40411c:	ffdd 00db fe5e 00e7 0088 ff95 007b ff64     ....^.......{.d.
  40412c:	ff44 ff37 018c fff5 feb1 0090 fe04 00c4     D.7.............
  40413c:	0134 ff3a 017d ff68 ffc0 ffa6 001a 00e1     4.:.}.h.........
  40414c:	fec7 fff7 0085 0002 00e9 ff11 fe75 00a3     ............u...
  40415c:	0039 0053 00d0 ff72 ff82 00eb ff0f ffaa     9.S...r.........
  40416c:	0018 ffe9 ff56 ffeb ff64 fff7 03cc ff0e     ....V...d.......
  40417c:	fe8a ff94 ff55 016f 008e 004d fe88 fe7a     ....U.o...M...z.
  40418c:	027a 000a fe85 ffeb fdec ffa5 0117 ff7d     z.............}.
  40419c:	fd96 0041 0102 ff06 01ca ff36 fe6d 0111     ..A.......6.m...
  4041ac:	ff7a 0207 00b0 fd07 fe67 fedd 01e3 01db     z.......g.......
  4041bc:	fe30 ff29 fe88 00dd 01bd 0052 0121 ff14     0.).......R.!...
  4041cc:	021c 0149 ff68 ffbc fec6 00a4 01e5 016f     ..I.h.........o.
  4041dc:	fe41 fc87 0032 fffc 004a 0339 0032 ff04     A...2...J.9.2...
  4041ec:	fec4 ffdd 01a6 0134 ff07 ff4c 00e1 00b5     ......4...L.....
  4041fc:	0067 fe2c ff6b 013b ff82 0138 00df fc93     g.,.k.;...8.....
  40420c:	ff49 0192 ff4c 0125 0120 fe39 0016 00a4     I...L.%. .9.....
  40421c:	fe6d feae 007f fe8c 00fc 0314 fed2 febf     m...............
  40422c:	fe6d 0070 024d 007b ffc7 ff9d fe59 ff75     m.p.M.{.....Y.u.
  40423c:	0166 ff6b 0098 00b5 fc8a 00f6 0187 fc2d     f.k...........-.
  40424c:	0195 0041 faee 0218 00d7 fdf8 0492 fffe     ..A.............
  40425c:	fe7f 02b2 0193 0269 0070 fdb7 ff0d 01b9     ......i.p.......
  40426c:	013d fe63 fd27 fc42 fee6 ff56 fbcd fc4e     =.c.'.B...V...N.
  40427c:	feac 0157 03ee 07f2 073e 0381 03a2 03b1     ..W.....>.......
  40428c:	03aa 0358 01c5 fe74 fa12 f748 f5ef f5b3     ..X...t...H.....
  40429c:	f806 f96b f95c fc83 0145 0c56 11df 0b0c     ..k.\...E.V.....
  4042ac:	095d 0b63 0f1b 0e53 082c f6a2 e340 ea09     ].c...S.,...@...
  4042bc:	f259 f2f5 fd12 f8a4 ee3e f81a fff6 0fcd     Y.......>.......
  4042cc:	1d97 111a 0ff1 159f 12ee 1450 f679 d1c2     ..........P.y...
  4042dc:	e6be fcab fb8f 080c fa23 df22 e4cf f28d     ........#.".....
  4042ec:	0524 1e33 232f 112b 0c97 16fc 1437 1737     $.3./#+.....7.7.
  4042fc:	f539 c665 e10f 00bb fe20 0e12 0a1d e584     9.e..... .......
  40430c:	de33 dc48 f487 244e 2359 1598 0fb4 0d2a     3.H...N$Y#....*.
  40431c:	1150 184f 1160 d805 c765 f47b fd67 026e     P.O.`...e.{.g.n.
  40432c:	1bf3 08ce e267 d92f db7e fc51 22b9 21ae     ....g./.~.Q..".!
  40433c:	153b 0f5c 1237 1125 1750 029c c67b d36e     ;.\.7.%.P...{.n.
  40434c:	00ce 00f9 0c4b 1fb6 011f db0e d6c9 db08     ....K...........
  40435c:	0099 25c3 229e 146d 1315 15e3 146d 172e     ...%."m.....m...
  40436c:	e70b be32 e8ae 0687 03a8 171e 1d30 f4cc     ..2.........0...
  40437c:	d8d2 d524 d8cd 0609 2924 21b1 1621 1916     ..$.....$).!!...
  40438c:	17f6 17e1 1398 d90e bdc0 eeaa 07ad 04b0     ................
  40439c:	1981 1ea2 f469 cf46 d053 e525 0788 21eb     ....i.F.S.%....!
  4043ac:	24e3 1985 19b5 1ce1 1ed7 06e8 c89a c4a9     .$..............
  4043bc:	f40f 02ba 07e6 203b 1e62 f353 c838 c98b     ......; b.S.8...
  4043cc:	ef74 0c4d 1a9e 246e 2118 1ddf 20c4 2337     t.M...n$.!... 7#
  4043dc:	f55a bb56 cd14 f7eb fe20 0778 22d0 207a     Z.V..... .x.."z 
  4043ec:	f3b1 c7ac d095 f16a 0089 12f1 2783 2920     ......j......' )
  4043fc:	2493 2bbe 2574 e5a1 b42b cf42 f363 f637     .$.+t%..+.B.c.7.
  40440c:	0650 29a3 27c7 f5e9 c938 d388 ed41 f6aa     P..).'..8...A...
  40441c:	0f3e 2beb 31a8 2e1d 3849 20c7 d18e aead     >..+.1..I8. ....
  40442c:	d249 ee14 f052 0be2 32ae 2974 ed4e c9e3     I...R....2t)N...
  40443c:	ddf8 ec42 f1e4 1096 3288 37e7 3a87 3c35     ..B......2.7.:5<
  40444c:	0428 baf3 b5ba d928 e73f f170 19d4 3707     (.....(.?.p....7
  40445c:	19dd e327 d6ac e5ae e702 f415 1b6e 37ca     ..'.........n..7
  40446c:	3d70 4640 2cae e099 b3c4 c43a dabb e112     p=@F.,....:.....
  40447c:	fc75 29d5 3087 0576 e215 e2b0 e5f7 e7ea     u..).0v.........
  40448c:	028f 28e5 3b6b 4843 410c 0277 c40b bd97     ...(k;CH.Aw.....
  40449c:	d0fc d71c e781 14c7 2f05 15d1 f4ae ef5c     ........./....\.
  4044ac:	ecc4 e3b1 f2ae 1adc 34e8 425b 4433 16c5     .........4[B3D..
  4044bc:	d892 c1d6 cd3a d460 ddaf 015b 2503 1d95     ....:.`...[..%..
  4044cc:	fcba f445 f41b e7d2 eba7 0f19 2ebc 3ec6     ..E............>
  4044dc:	4495 2236 e794 c91b cbb0 d206 d93c f572     .D6"........<.r.
  4044ec:	1b76 1d21 00fb f90e fbad ed8b e852 06ae     v.!.........R...
  4044fc:	2a53 3b8b 4138 264a f2ac d1ad cced d0b7     S*.;8AJ&........
  40450c:	d77f ef86 1038 1844 0526 fbaa fd70 f51e     ....8.D.&...p...
  40451c:	ef59 052d 2508 3af3 4191 2066 ee7e d771     Y.-..%.:.Af ~.q.
  40452c:	d4e8 d18d d4e9 f032 0e92 1007 0098 ff13     ......2.........
  40453c:	0189 f601 f203 0a7e 2827 3bbb 3d40 17e8     ......~.'(.;@=..
  40454c:	eb4f d92e d695 d236 d7b3 f361 0bd4 0a31     O.....6...a...1.
  40455c:	ffb6 01c5 0246 f7fd f864 1126 2b62 3ea4     ....F...d.&.b+.>
  40456c:	3758 09b2 e49e db8c d826 d0a0 db63 fa1e     X7......&...c...
  40457c:	0aef 031a fe96 060c 02c8 f6b4 ff5e 1b16     ............^...
  40458c:	3184 3eb8 2a76 fbbe e078 db9f d630 d11a     .1.>v*..x...0...
  40459c:	e2db ffa0 0748 ff07 01b2 08a4 0010 f772     ....H.........r.
  4045ac:	0900 24cc 38d9 399d 15df ef2e e03a da9f     ...$.8.9....:...
  4045bc:	d218 d47f edf5 03bc 0134 fcd8 067b 0892     ........4...{...
  4045cc:	fc1e fd2c 1604 2f2b 3dc4 2b64 0008 e6f3     ..,...+/.=d+....
  4045dc:	e032 d76a cf93 de8a f7c3 00d0 fe18 03c3     2.j.............
  4045ec:	0ba7 04ac fb81 09da 23e2 383f 378e 12f7     .........#?8.7..
  4045fc:	ef27 e388 de16 d2cb d509 eb27 fbfa fd0c     '.........'.....
  40460c:	ffdb 0aec 0b17 ffa4 03b6 1b3b 31aa 3b4d     ..........;..1M;
  40461c:	2095 f761 e633 e17c d689 d220 e3be f649     . a.3.|... ...I.
  40462c:	fa44 fcd0 0949 0d96 026b 0057 1589 2bb8     D...I...k.W....+
  40463c:	3994 2b5f 02cb e9c3 e34a dab3 d222 ddc9     .9_+....J..."...
  40464c:	ef61 f64f fb00 06b9 0e52 075d 0232 1271     a.O.....R.].2.q.
  40465c:	2787 3869 30ef 0640 e6f6 e6ef dea4 d555     .'i8.0@.......U.
  40466c:	dcf2 e9c8 faeb f7e7 01f8 117b 06b5 fac1     ..........{.....
  40467c:	1158 3002 3d06 35af 013f d732 d32a d8fc     X..0.=.5?.2.*...
  40468c:	df4f f563 0555 fd67 f44a f72e fb1b f95c     O.c.U.g.J.....\.
  40469c:	fd63 19d8 38e9 4a77 4643 ff52 b815 ba8b     c....8wJCFR.....
  4046ac:	d3a7 e350 06e7 1b84 04f9 ef87 f076 f1ab     ..P.........v...
  4046bc:	f290 019c 283d 488d 566e 3b0d db54 a10e     ....=(.HnV.;T...
  4046cc:	bc11 da9a f715 2510 2031 f275 e0ac e72e     .......%1 u.....
  4046dc:	ef06 fcbb 1792 3b6b 5273 544a 0f02 a784     ......k;sRJT....
  4046ec:	a274 d49c ed7a 1bf6 3753 008d d5db dcff     t...z...S7......
  4046fc:	e4bc f766 15e4 2d89 456a 5878 39bb c921     ..f....-jExX.9!.
  40470c:	8d79 c40c eca9 0cab 3c72 1aef d451 ceec     y.......r<..Q...
  40471c:	de84 f164 1436 28d1 3950 4e1b 4acb f4d9     ..d.6..(P9.N.J..
  40472c:	932b ac68 ea9d 0381 3615 3113 d6e3 c1ac     +.h......6.1....
  40473c:	dbee e915 1332 2f91 2ee2 4187 5019 0fa6     ....2../...A.P..
  40474c:	a09b a269 e77d febc 2b73 3b09 e4b8 b5ee     ..i.}...s+.;....
  40475c:	d649 e8f3 0cef 337f 321c 3708 4daf 1ed5     I......3.2.7.M..
  40476c:	a8ca 9bd9 e906 0136 256d 4481 e542 a664     ......6.m%.DB.d.
  40477c:	da45 ec23 07de 3a4f 2ffa 2c47 4b61 252e     E.#...O:./G,aK.%
  40478c:	b1e0 9fd8 ea95 ff8d 2187 3f81 e73c aa3b     .........!.?<.;.
  40479c:	d280 eb31 0ff6 3bc5 3100 2bc2 44e4 2062     ..1....;.1.+.Db 
  4047ac:	afbc a237 f1ef 0735 2414 3c5a dcb3 a345     ..7...5..$Z<..E.
  4047bc:	d815 ee82 1177 40be 2e0b 2852 463f 1837     ....w..@..R(?F7.
  4047cc:	a811 aa9c f93e 06c9 2c71 3402 cdfa a831     ....>...q,.4..1.
  4047dc:	dac6 f341 1bd3 3f3d 2d0b 2c0b 3fcf 0576     ..A...=?.-.,.?v.
  4047ec:	9e97 bb09 0530 0e68 31d3 2a39 b761 a511     ....0.h..19*a...
  4047fc:	e868 fbc5 28da 42be 248c 2c1d 3c81 e611     h....(.B.$.,.<..
  40480c:	980d d877 0e83 110f 3d35 08c4 9e9d c010     ..w.....5=......
  40481c:	efc8 064b 3a1c 35ae 205b 3952 276a bd3e     ..K..:.5[ R9j'>.
  40482c:	a47c f7c1 0e11 219b 3907 db63 9d3a d68c     |......!.9c.:...
  40483c:	f6d6 191f 3f88 28bc 251b 3e1b 0218 9ea7     .....?.(.%.>....
  40484c:	c4fd 0da9 1103 3303 1fce acae a704 f0fe     .......3........
  40485c:	06e8 2ee8 3df1 1e31 2d5e 2e77 c61b 9e6e     .....=1.^-w...n.
  40486c:	fc70 16f8 1c6b 38d0 da5f 98fd dbe0 fc8f     p...k..8_.......
  40487c:	1ab5 3f67 26c1 21bc 3942 f545 9cde d504     ..g?.&.!B9E.....
  40488c:	1772 14ae 3602 0f4b 9a7e b638 fa6c 0b27     r....6K.~.8.l.'.
  40489c:	3d52 38df 16a5 3205 1492 a3b2 ba56 18c0     R=.8...2....V...
  4048ac:	14fc 2c02 255a ae4d a4ac f51b 08bf 29e0     ...,Z%M........)
  4048bc:	3dc0 1fb2 28fa 231b ba28 a563 0914 1ea1     .=...(.#(.c.....
  4048cc:	2088 3423 ca0b 86b1 ebc2 13be 1ddd 447c     . #4..........|D
  4048dc:	24aa 1c2b 2877 c528 99fb 097f 2591 1eda     .$+.w((......%..
  4048ec:	2a75 d075 9d18 e0ad 0f36 20bf 3792 2b69     u*u.....6.. .7i+
  4048fc:	2843 1eaa c678 a083 fc4c 27b3 25f3 301c     C(..x...L..'.%.0
  40490c:	cecf 9134 e27e 10e1 24cb 4107 297a 2508     ..4.~....$.Az).%
  40491c:	1b5d b280 a13d 0f73 295d 287e 2869 bdd4     ]...=.s.])~(i(..
  40492c:	9a5e f42b 10d4 2099 3e4f 28fd 26f3 0fe2     ^.+.... O>.(.&..
  40493c:	a872 ae30 18ed 292e 294c 1480 b608 adaf     r.0....)L)......
  40494c:	f933 19c4 2b80 37c4 2ec7 2a8b e058 9010     3....+.7...*X...
  40495c:	d8d2 2a90 2b0f 3375 f4eb 96fe c6f6 1039     ...*.+u3......9.
  40496c:	1aae 3495 3481 26bc 1c85 c122 9671 fda5     ...4.4.&..".q...
  40497c:	319e 2ca8 1e65 c816 a932 e919 1808 2e25     .1.,e...2.....%.
  40498c:	35ed 2d27 2ac3 e0cc 8d6a d575 2ae8 2ee1     .5'-.*..j.u..*..
  40499c:	31de f5c8 990d c895 1855 1d7b 306f 3777     .1......U.{.o0w7
  4049ac:	2c06 07d9 aa0b a782 0cc5 31d1 30ec 0cc3     .,.........1.0..
  4049bc:	beea b961 f7b5 1e72 2e78 32bb 37dc 1948     ..a...r.x..2.7H.
  4049cc:	aa71 9955 03a0 2b86 3289 3274 c2a4 9795     q.U....+.2t2....
  4049dc:	f74d 2112 2669 36ef 3188 2005 c9e3 8fe8     M..!i&.6.1. ....
  4049ec:	e9ae 2f2e 2c1a 1bea e658 b812 e254 1bc3     .../.,..X...T...
  4049fc:	26c0 2eb7 3f0a 242b b28a 8e1e f765 2d8a     .&...?+$....e..-
  404a0c:	2e4f 3266 da4b 95bb ed43 31e1 2273 286d     O.f2K...C..1s"m(
  404a1c:	40d8 2498 ace5 8d84 fa84 2f66 24f6 1bf6     .@.$......f/.$..
  404a2c:	e60d ba2f efa9 24c3 231d 2c7b 4593 10a9     ../....$.#{,.E..
  404a3c:	9827 9cf3 0e1a 2c31 2de5 25eb beba a65a     '.....1,.-.%..Z.
  404a4c:	125a 372c 17f3 2a37 4b6a fadb 8679 b732     Z.,7..7*jK..y.2.
  404a5c:	1dd0 21e2 193d 137d d545 c9fd 121a 2b91     ...!=.}.E......+
  404a6c:	1be5 391a 3d47 c7fb 82a6 e56a 2a83 202d     ...9G=....j..*- 
  404a7c:	272b f1db a9af ea5e 3f5d 24c1 10ad 493a     +'....^.]?.$..:I
  404a8c:	243d 9213 9992 1aaf 28c7 0554 1551 ee8a     =$.......(T.Q...
  404a9c:	c597 07c3 3940 1b74 22c2 4115 da1d 8000     ....@9t..".A....
  404aac:	dec8 3308 1b41 122a fb57 b5b7 e1a0 42b7     ...3A.*.W......B
  404abc:	3081 07c2 3b22 2805 9185 94bf 2249 309f     .0..";.(....I".0
  404acc:	f983 0341 f417 ddb0 0bf4 3194 215e 2266     ..A........1^!f"
  404adc:	229c c06e 9841 f596 32de 1cff fc52 e250     ."n.A....2..R.P.
  404aec:	d5a8 019c 3000 25d5 1d74 386b ee6d 889e     .....0.%t.k8m...
  404afc:	c78d 2d6f 1d0d f961 ff7f f30a f713 14de     ..o-..a.........
  404b0c:	2346 2051 278b f455 a944 c890 1512 264d     F#Q .'U.D.....M&
  404b1c:	0afb ec47 d7e1 f843 2647 246c 132c 2c5a     ..G...C.G&l$,.Z,
  404b2c:	154a aca6 a81c 0dd6 292b fd50 f92e fc04     J.......+)P.....
  404b3c:	fa35 0ce4 2036 2027 20d1 029d bd53 c008     5...6 ' . ..S...
  404b4c:	00bb 2577 1770 eb44 d2b8 fd1c 2932 1f39     ..w%p.D.....2)9.
  404b5c:	0fd0 2a27 1dea b9cb a44a 0005 2779 0739     ..'*....J...y'9.
  404b6c:	fb4e f7ea f953 093f 1bd4 2239 21b0 0b42     N...S.?...9".!B.
  404b7c:	cb8e b90d eede 1bff 16cc 0039 e5b9 eeff     ..........9.....
  404b8c:	1767 2234 146c 1f51 1e9a d15c a7e1 e86d     g.4"l.Q...\...m.
  404b9c:	250f 136e f4ec f18d 02e6 13a1 12d1 1474     .%n...........t.
  404bac:	2428 14e6 ccaf b7b8 f1ff 1ddc 10ae f572     ($............r.
  404bbc:	eb50 fb90 16d9 1bf5 141d 1bbc 195e dba7     P...........^...
  404bcc:	b1c4 e2da 1d39 1349 f853 f47f 0159 0f65     ....9.I.S...Y.e.
  404bdc:	12a4 165b 1e8c 179b df37 b9e5 e01a 14ed     ..[.....7.......
  404bec:	1c38 fd0b e4d7 f4d3 1638 1bb9 1159 17d4     8.......8...Y...
  404bfc:	222e f288 b3ff cbe0 0d68 1d1c 0443 f31e     ."......h...C...
  404c0c:	fb70 0cfb 0ea7 1094 1a67 2091 fcd2 c45f     p.......g.. .._.
  404c1c:	c8fe fe50 1f5d 0d04 eb1b eacd 0c93 1b43     ..P.].........C.
  404c2c:	1053 0f33 2190 1519 d2bc b64d ea22 1deb     S.3..!....M."...
  404c3c:	128c f41c f24d 08f9 1271 08a5 0cc3 1eea     ....M...q.......
  404c4c:	1f1a ed4b bee6 d68a 094f 185f 05cc f06f     ..K.....O._...o.
  404c5c:	f2f2 0af1 15da 0ffb 1074 2030 121e d511     ........t.0 ....
  404c6c:	bae4 ea54 1dbe 1426 f0d8 ee5f 09fd 15c1     ..T...&..._.....
  404c7c:	0839 070d 1ce5 25ac f693 bfd8 ce92 075c     9......%......\.
  404c8c:	1fb4 0500 e91f f1e1 0bcc 1146 0900 0df1     ..........F.....
  404c9c:	20e8 210b edc9 bde7 d4a8 0d41 1c47 ffb0     . .!......A.G...
  404cac:	ed1d fa61 0e98 0c54 050d 1055 21bb 1ba8     ..a...T...U..!..
  404cbc:	eb4f c446 da80 0c6e 1b86 01ca eba5 f26f     O.F...n.......o.
  404ccc:	0676 0d8d 0c6a 0ff5 1b31 1ef5 faba c9ef     v...j...1.......
  404cdc:	ceea fe5c 1a4d 0abc f078 f29d 060e 0c7b     ..\.M...x.....{.
  404cec:	07b2 0b0f 163e 1e4c 08a3 db36 ce55 f052     ....>.L...6.U.R.
  404cfc:	15ad 149c f3de e4ab f94e 0e69 0d4f 0609     ........N.i.O...
  404d0c:	0b89 1d63 21ac fa39 cc1e d448 02b2 183e     ..c..!9...H...>.
  404d1c:	04c1 ef3b f45f 040a 0703 0373 0825 13e0     ..;._.....s.%...
  404d2c:	1ed1 15af f01d d480 e29b 03ef 10da 03b9     ................
  404d3c:	f036 ef21 fd09 079d 095e 0941 0fa3 1c3a     6.!.....^.A...:.
  404d4c:	1c83 fbe2 d740 db65 fef4 11df 04b9 ee9f     ....@.e.........
  404d5c:	ec5f fc59 06ff 068f 0542 0b7d 1a7c 248f     _.Y.....B.}.|..$
  404d6c:	0f41 e50c d4ba ecea 08d4 08df f57a ebdc     A...........z...
  404d7c:	f71b 02f2 0245 ffbd 06de 161b 24cb 22c7     ....E........$."
  404d8c:	043d e07d da48 f1af 0506 015a f491 f010     =.}.H.....Z.....
  404d9c:	f680 fcd9 ff9a 04fe 0d18 169c 22df 2719     .............".'
  404dac:	1117 e91f d448 e2d0 fc15 02a8 f6a8 efcf     ....H...........
  404dbc:	f8bc 0242 00fc fedc 0645 14af 2240 280f     ..B.....E...@".(
  404dcc:	1cbf febf dfa2 d6e3 e4fb f720 fe3d f973     .......... .=.s.
  404ddc:	f63f fbcc 0273 03a6 035a 07fe 13b2 204b     ?...s...Z.....K 
  404dec:	2618 1bcf ff36 df58 d325 df56 f21c fd5d     .&..6.X.%.V...].
  404dfc:	ff7b ffc4 0189 01f6 006a 00c0 04f6 0d2e     {.......j.......
  404e0c:	1775 1f33 1f72 1045 f2ca d841 d358 e372     u.3.r.E...A.X.r.
  404e1c:	f94e 04c5 0549 0426 0487 0317 fdcc facc     N...I.&.........
  404e2c:	0045 0d02 18ae 1e4b 1c22 0de0 f513 dd66     E.....K.".....f.
  404e3c:	d56a e1e2 f7d8 0612 07de 057b 0384 00d6     j.........{.....
  404e4c:	fb97 f6f1 fb23 082c 1648 1dce 1e47 169e     ....#.,.H...G...
  404e5c:	0383 ea5b d809 d8d5 eb04 ff53 0959 0969     ..[.......S.Y.i.
  404e6c:	05c0 0151 fca3 f858 f82c 001c 0d78 18fc     ..Q...X.,...x...
  404e7c:	1d87 1c1b 130f ffd5 e876 d931 db9b ecac     ........v.1.....
  404e8c:	ff9d 09bc 0a3b 06f3 0315 fdb5 f85c f694     ....;.......\...
  404e9c:	fcbc 091c 14f2 1b1c 1ac3 156a 0701 f148     ..........j...H.
  404eac:	de6a d9fe e754 fb96 0903 0b39 07a1 02ce     j...T.....9.....
  404ebc:	fe16 f96c f5d9 f785 00ea 0d6a 1741 1a8f     ..l.......j.A...
  404ecc:	178d 1037 012e ed34 debb de92 ecb4 fec5     ..7...4.........
  404edc:	099f 09b0 043c ff63 fbeb f89b f6c8 f9bf     ....<.c.........
  404eec:	029a 0e3a 167b 1817 1505 0fbf 0481 f2d9     ..:.{...........
  404efc:	e348 df11 e99c fb1a 06e6 08a9 0519 0182     H...............
  404f0c:	ff30 fbf3 f7bc f712 fdd4 0a07 144a 17e5     0...........J...
  404f1c:	1501 1066 09be fc32 eb1c e08c e4c7 f4a0     ..f...2.........
  404f2c:	0390 0919 06c4 030a 0041 fd06 f84a f4fd     ........A...J...
  404f3c:	f7fa 0189 0d12 13ff 14ee 11c6 0dc4 08fc     ................
  404f4c:	fe65 ef1e e51e e830 f571 022c 0639 0303     e.....0.q.,.9...
  404f5c:	ff80 fe7f fd45 fa23 f75d f8e7 ff98 08a3     ....E.#.].......
  404f6c:	0fb6 122d 112e 0e95 0be4 05e2 f948 ec37     ..-.........H.7.
  404f7c:	e776 ede2 f9b0 0181 029b 00de 003a 0076     v...........:.v.
  404f8c:	fec4 fad6 f826 fa71 015a 0984 0f8d 117b     ....&.q.Z.....{.
  404f9c:	1060 0d6d 0a18 0448 f98e ee76 ea55 ef5e     `.m...H...v.U.^.
  404fac:	f943 009b 01d4 00ca 0029 001e fe44 fa8b     C.......)...D...
  404fbc:	f7e9 fa4e 00e1 0802 0d2c 0ec7 0d6e 0b12     ..N.....,...n...
  404fcc:	091f 062a ff81 f5cf ee74 eee5 f5ad fd30     ..*.....t.....0.
  404fdc:	0043 ff71 feed ffb7 0011 fdf8 faf5 f9fb     C.q.............
  404fec:	fcac 0217 07f8 0c31 0d37 0be3 09c7 07b1     ......1.7.......
  404ffc:	0511 fefc f672 f09d f0e4 f616 fbb8 fee4     ....r...........
  40500c:	ff4e ff70 0013 ffab fdfa fb9a fb98 ff23     N.p...........#.
  40501c:	056d 0bb3 0db2 0c18 0a30 0926 0728 0151     m.......0.&.(.Q.
  40502c:	f907 f2a2 f177 f53e fa6e fdde fef6 ff75     ....w.>.n.....u.
  40503c:	ffc7 ff75 fe0b fbda fb14 fcff 019f 07c0     ..u.............
  40504c:	0bf5 0c00 0989 07a2 06ce 047e ff4c f98d     ..........~.L...
  40505c:	f6aa f799 fa93 fca9 fd0c fcfb fd7e fe7e     ............~.~.
  40506c:	fe06 fcea fc2a fcb5 fead 010e 0412 079e     ....*...........
  40507c:	0965 08ca 06b4 0528 04be 034c 006f fc9d     e.....(...L.o...
  40508c:	fa35 fa33 fbbf fcb9 fc1d fbab fcb2 fe24     5.3...........$.
  40509c:	fe73 fd48 fc32 fc85 fe6e 0054 01d0 03d0     s.H.2...n.T.....
  4050ac:	063a 0794 051c 01a7 0083 015e 026a 011a     :.........^.j...
  4050bc:	fe72 fd3a fe69 0045 00e3 ff1e fcbe fbeb     r.:.i.E.........
  4050cc:	fd61 ff2a ff7f fe5e fd60 fe65 000d 0111     a.*...^.`.e.....
  4050dc:	00f9 00de 01f3 0386 03ec 0322 0209 0172     .........."...r.
  4050ec:	0130 0065 ff1b feac ff6c ff9d ff65 fef0     0.e.....l...e...
  4050fc:	ff3e ffc2 ff6b febf fe47 fe57 ff0f fffd     >...k...G.W.....
  40510c:	0039 001f 0055 00ed 0151 0185 012c 00af     9...U...Q...,...
  40511c:	0058 0059 0081 0054 ffd2 ff5e ff77 ff82     X.Y...T...^.w...
  40512c:	ffca 000a 0028 002b ffcf ff74 ffa8 0017     ....(.+...t.....
  40513c:	003e 002a 0032 00c3 0130 014e 00b0 ffbc     >.*.2...0.N.....
  40514c:	ffb6 000e 0055 0022 ffa4 ff81 ffb4 0035     ....U.".......5.
  40515c:	000a ff90 ff68 0038 00d7 0096 0018 ff7d     ....h.8.......}.
  40516c:	ff72 ffd7 0049 0040 ffe9 ffca 0021 001f     r...I.@.....!...
  40517c:	0020 ff2e fe86 fed9 ffd6 0075 0046 ffa2      .........u.F...
  40518c:	fef8 ff23 ffb9 0090 0072 fffe ffe7 002c     ..#.....r.....,.
  40519c:	007b 00b0 0062 ff94 ff4f ff6b ffa3 ffbc     {...b...O.k.....
  4051ac:	ffc1 ffe0 0030 001c 0003 0014 fff6 ffcd     ....0...........
  4051bc:	ffe3 0002 0039 006b 0029 ffde ffec 0067     ....9.k.).....g.
  4051cc:	00bd 0031 ff3e ff3f 001c 00b5 0087 ff98     ..1.>.?.........
  4051dc:	ff69 004f 00c2 0071 ffed ffb8 fff0 0050     i.O...q.......P.
  4051ec:	0021 ffaa ff92 0009 0034 fff4 ffb6 ffa1     !.......4.......
  4051fc:	0033 0056 ffd7 ffd4 0031 0049 0014 ff86     3.V.....1.I.....
  40520c:	ff7c 000a 004d 0042 ffba ff82 ffbb ffda     |...M.B.........
  40521c:	ffb5 ff81 ffe0 001e 008a 00c5 003a ffed     ............:...
  40522c:	0006 ffc5 ffb8 ffa6 ffcd 0041 0042 ffd8     ..........A.B...
  40523c:	ff89 ff6c ffe8 001c ffce ff59 ff7e 0015     ..l.......Y.~...
  40524c:	006e 004c ffe5 ffba ffa8 ffdb 0001 ffff     n.L.............
  40525c:	ffa8 ffa0 ffce 0027 fffa ffc5 ffbb ffe1     ......'.........
  40526c:	0035 0012 fffc 000e fff9 ffef fff5 ffad     5...............
  40527c:	ffe0 0017 001a 0028 0029 0011 ffce ff8a     ......(.).......
  40528c:	ffb1 fff7 0033 003f 0014 ffad ffd8 002a     ....3.?.......*.
  40529c:	0058 001f ffaf ff84 fff9 005a 004a 0010     X.........Z.J...
  4052ac:	ffd5 ffc3 ffa3 ffc7 ffd1 0002 ffcc fff5     ................
  4052bc:	ff8b 000d 0003 0058 ff80 ffc3 fe01 fced     ......X.........
  4052cc:	0066 ffbe fe52 fc04 fd2f fdfb fd69 fdb5     f...R.../...i...
  4052dc:	001d 0314 0418 03d0 0225 0028 fe88 fe73     ........%.(...s.
  4052ec:	ff4e ffc4 ff1e ff58 00c7 0175 ffed ffcb     N.....X...u.....
  4052fc:	ffce 00de 0163 0195 0148 0066 fff8 ffa6     ....c...H.f.....
  40530c:	ffd8 ff62 ff48 ff70 0004 0031 00a3 0100     ..b.H.p...1.....
  40531c:	00f6 0053 ffec 0081 0130 00ca fff8 ffaa     ..S.....0.......
  40532c:	0083 00ac ffde ff42 ffa8 00be 0129 00e1     ......B.....)...
  40533c:	0040 0065 00ae 00a8 001e ffbf ffd9 0082     @.e.............
  40534c:	0092 0005 ffbb ffdf 001a 004d fffe ffd7     ..........M.....
  40535c:	004b 0096 0081 0036 000e ffe0 0017 0059     K.....6.......Y.
  40536c:	003c ffe0 ffcd fff5 0091 0082 000e ffd0     <...............
  40537c:	ff7a ffd6 0019 fffc ff1c fef9 ffac 0072     z.............r.
  40538c:	0067 ff9e ff5f ffb5 003e 004c fff5 ff4c     g..._...>.L...L.
  40539c:	ffe0 0094 0074 fff3 ffac ffd0 000c 0018     ....t...........
  4053ac:	ff89 ff87 fffb 0036 0061 0094 0050 000e     ......6.a...P...
  4053bc:	fff8 0056 00d3 007f ffd8 ff9d 0056 00fa     ..V.........V...
  4053cc:	00b0 ffe2 ff83 0068 011e 00e4 0011 0000     ......h.........
  4053dc:	0093 00de 008a ffc8 ffd1 002e 0016 ffc0     ................
  4053ec:	ffe4 0035 0072 001c ffcb fffd 008d 0047     ..5.r.........G.
  4053fc:	ff76 ff8f 000c 005d ffbf feff ff31 ffd4     v.....].....1...
  40540c:	000b ffa5 ff37 ffa0 005a 0047 ffb6 ff90     ....7...Z.G.....
  40541c:	ffd8 000e ffaf ffb5 ffec fff1 ffd7 ffa5     ................
  40542c:	ffe3 fffe fff1 ff87 ffa3 ffee 0043 ffe4     ............C...
  40543c:	ff64 ffb2 0011 0031 ffc2 ffcd ffe4 0009     d.....1.........
  40544c:	0012 0019 fff3 ffe1 ffd0 ffea 0016 000c     ................
  40545c:	ffb5 ff85 000a 005a 0004 ff70 ff80 002e     ......Z...p.....
  40546c:	0063 ffe1 ff92 ffc2 6925 3d20 2520 0d69     c.......%i = %i.
  40547c:	000a 0000 2d2d 4420 4341 5320 6e69 7765     ....-- DAC Sinew
  40548c:	7661 2065 7845 6d61 6c70 2065 2d2d 0a0d     ave Example --..
  40549c:	2d2d 5320 4d41 5334 452d 324b 2d20 0d2d     -- SAM4S-EK2 --.
  4054ac:	2d0a 202d 6f43 706d 6c69 6465 203a 614d     .-- Compiled: Ma
  4054bc:	2072 3432 3220 3130 2036 3631 323a 3a33     r 24 2016 16:23:
  4054cc:	3330 2d20 0d2d 0000 6172 2077 6164 6174     03 --...raw data
  4054dc:	2820 6e69 3174 2936 3d20 6420 6361 6420      (int16) = dac d
  4054ec:	7461 2061 7528 6e69 3174 2932 0a0d 0000     ata (uint12)....
  4054fc:	3d3d 3d3d 3d3d 3d3d 5320 6174 7472 6465     ======== Started
  40550c:	4420 4341 6f20 7475 7570 2074 3d3d 3d3d      DAC output ====
  40551c:	3d3d 3d3d 000d 0000 0043 0000               ====....C...

00405528 <_global_impure_ptr>:
  405528:	0008 2000                                   ... 

0040552c <zeroes.6869>:
  40552c:	3030 3030 3030 3030 3030 3030 3030 3030     0000000000000000
  40553c:	3130 3332 3534 3736 3938 4241 4443 4645     0123456789ABCDEF
  40554c:	0000 0000 3130 3332 3534 3736 3938 6261     ....0123456789ab
  40555c:	6463 6665 0000 0000 6e28 6c75 296c 0000     cdef....(null)..

0040556c <blanks.6868>:
  40556c:	2020 2020 2020 2020 2020 2020 2020 2020                     

0040557c <_init>:
  40557c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40557e:	bf00      	nop
  405580:	bcf8      	pop	{r3, r4, r5, r6, r7}
  405582:	bc08      	pop	{r3}
  405584:	469e      	mov	lr, r3
  405586:	4770      	bx	lr

00405588 <__init_array_start>:
  405588:	00401e9d 	.word	0x00401e9d

0040558c <__frame_dummy_init_array_entry>:
  40558c:	004000f1                                ..@.

00405590 <_fini>:
  405590:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  405592:	bf00      	nop
  405594:	bcf8      	pop	{r3, r4, r5, r6, r7}
  405596:	bc08      	pop	{r3}
  405598:	469e      	mov	lr, r3
  40559a:	4770      	bx	lr

0040559c <__fini_array_start>:
  40559c:	004000cd 	.word	0x004000cd
