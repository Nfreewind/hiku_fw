
hiku_decoder_standard.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00004810  00400000  00400000  00008000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  00404810  00404810  0000c810  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     00000884  20000000  00404818  00010000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          00012cf8  20000884  0040509c  00010884  2**2
                  ALLOC
  4 .stack        00003004  2001357c  00417d94  00010884  2**0
                  ALLOC
  5 .ARM.attributes 0000002a  00000000  00000000  00010884  2**0
                  CONTENTS, READONLY
  6 .comment      0000005b  00000000  00000000  000108ae  2**0
                  CONTENTS, READONLY
  7 .debug_info   0000beed  00000000  00000000  00010909  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000020ab  00000000  00000000  0001c7f6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0000489d  00000000  00000000  0001e8a1  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000a40  00000000  00000000  0002313e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000930  00000000  00000000  00023b7e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  0000512e  00000000  00000000  000244ae  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0000c2fc  00000000  00000000  000295dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00051ff5  00000000  00000000  000358d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00002254  00000000  00000000  000878d0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <_sfixed>:
  400000:	20016580 	.word	0x20016580
  400004:	00400c05 	.word	0x00400c05
  400008:	00400c01 	.word	0x00400c01
  40000c:	00400c01 	.word	0x00400c01
  400010:	00400c01 	.word	0x00400c01
  400014:	00400c01 	.word	0x00400c01
  400018:	00400c01 	.word	0x00400c01
	...
  40002c:	00400c01 	.word	0x00400c01
  400030:	00400c01 	.word	0x00400c01
  400034:	00000000 	.word	0x00000000
  400038:	00400c01 	.word	0x00400c01
  40003c:	00400c01 	.word	0x00400c01
  400040:	00400c01 	.word	0x00400c01
  400044:	00400c01 	.word	0x00400c01
  400048:	00400c01 	.word	0x00400c01
  40004c:	00400c01 	.word	0x00400c01
  400050:	00400c01 	.word	0x00400c01
  400054:	00400c01 	.word	0x00400c01
  400058:	00400c01 	.word	0x00400c01
  40005c:	00400c01 	.word	0x00400c01
  400060:	00400c01 	.word	0x00400c01
  400064:	00400c01 	.word	0x00400c01
  400068:	00000000 	.word	0x00000000
  40006c:	004007c5 	.word	0x004007c5
  400070:	004007d9 	.word	0x004007d9
  400074:	004007ed 	.word	0x004007ed
  400078:	00400c01 	.word	0x00400c01
  40007c:	00400c01 	.word	0x00400c01
	...
  400088:	00400c01 	.word	0x00400c01
  40008c:	00400c01 	.word	0x00400c01
  400090:	00400c01 	.word	0x00400c01
  400094:	00400c01 	.word	0x00400c01
  400098:	00400c01 	.word	0x00400c01
  40009c:	00400c01 	.word	0x00400c01
  4000a0:	00400c01 	.word	0x00400c01
  4000a4:	00400c01 	.word	0x00400c01
  4000a8:	00400c01 	.word	0x00400c01
  4000ac:	00400c01 	.word	0x00400c01
  4000b0:	00400c01 	.word	0x00400c01
  4000b4:	00400c01 	.word	0x00400c01
  4000b8:	00400c01 	.word	0x00400c01
  4000bc:	00400c01 	.word	0x00400c01
  4000c0:	00400c01 	.word	0x00400c01
  4000c4:	00400c01 	.word	0x00400c01
  4000c8:	00400c01 	.word	0x00400c01

004000cc <__do_global_dtors_aux>:
  4000cc:	b510      	push	{r4, lr}
  4000ce:	4c05      	ldr	r4, [pc, #20]	; (4000e4 <__do_global_dtors_aux+0x18>)
  4000d0:	7823      	ldrb	r3, [r4, #0]
  4000d2:	b933      	cbnz	r3, 4000e2 <__do_global_dtors_aux+0x16>
  4000d4:	4b04      	ldr	r3, [pc, #16]	; (4000e8 <__do_global_dtors_aux+0x1c>)
  4000d6:	b113      	cbz	r3, 4000de <__do_global_dtors_aux+0x12>
  4000d8:	4804      	ldr	r0, [pc, #16]	; (4000ec <__do_global_dtors_aux+0x20>)
  4000da:	f3af 8000 	nop.w
  4000de:	2301      	movs	r3, #1
  4000e0:	7023      	strb	r3, [r4, #0]
  4000e2:	bd10      	pop	{r4, pc}
  4000e4:	20000884 	.word	0x20000884
  4000e8:	00000000 	.word	0x00000000
  4000ec:	00404818 	.word	0x00404818

004000f0 <frame_dummy>:
  4000f0:	4b08      	ldr	r3, [pc, #32]	; (400114 <frame_dummy+0x24>)
  4000f2:	b510      	push	{r4, lr}
  4000f4:	b11b      	cbz	r3, 4000fe <frame_dummy+0xe>
  4000f6:	4808      	ldr	r0, [pc, #32]	; (400118 <frame_dummy+0x28>)
  4000f8:	4908      	ldr	r1, [pc, #32]	; (40011c <frame_dummy+0x2c>)
  4000fa:	f3af 8000 	nop.w
  4000fe:	4808      	ldr	r0, [pc, #32]	; (400120 <frame_dummy+0x30>)
  400100:	6803      	ldr	r3, [r0, #0]
  400102:	b903      	cbnz	r3, 400106 <frame_dummy+0x16>
  400104:	bd10      	pop	{r4, pc}
  400106:	4b07      	ldr	r3, [pc, #28]	; (400124 <frame_dummy+0x34>)
  400108:	2b00      	cmp	r3, #0
  40010a:	d0fb      	beq.n	400104 <frame_dummy+0x14>
  40010c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  400110:	4718      	bx	r3
  400112:	bf00      	nop
  400114:	00000000 	.word	0x00000000
  400118:	00404818 	.word	0x00404818
  40011c:	20000888 	.word	0x20000888
  400120:	00404818 	.word	0x00404818
  400124:	00000000 	.word	0x00000000

00400128 <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
  400128:	b510      	push	{r4, lr}
	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
  40012a:	480e      	ldr	r0, [pc, #56]	; (400164 <sysclk_init+0x3c>)
  40012c:	4b0e      	ldr	r3, [pc, #56]	; (400168 <sysclk_init+0x40>)
  40012e:	4798      	blx	r3
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
  400130:	2000      	movs	r0, #0
  400132:	213e      	movs	r1, #62	; 0x3e
  400134:	4b0d      	ldr	r3, [pc, #52]	; (40016c <sysclk_init+0x44>)
  400136:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
  400138:	4c0d      	ldr	r4, [pc, #52]	; (400170 <sysclk_init+0x48>)
  40013a:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
  40013c:	2800      	cmp	r0, #0
  40013e:	d0fc      	beq.n	40013a <sysclk_init+0x12>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
  400140:	4b0c      	ldr	r3, [pc, #48]	; (400174 <sysclk_init+0x4c>)
  400142:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
  400144:	4a0c      	ldr	r2, [pc, #48]	; (400178 <sysclk_init+0x50>)
  400146:	4b0d      	ldr	r3, [pc, #52]	; (40017c <sysclk_init+0x54>)
  400148:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		return pmc_is_locked_pllack();
  40014a:	4c0d      	ldr	r4, [pc, #52]	; (400180 <sysclk_init+0x58>)
  40014c:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
  40014e:	2800      	cmp	r0, #0
  400150:	d0fc      	beq.n	40014c <sysclk_init+0x24>

		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
  400152:	2010      	movs	r0, #16
  400154:	4b0b      	ldr	r3, [pc, #44]	; (400184 <sysclk_init+0x5c>)
  400156:	4798      	blx	r3
		pmc_switch_mck_to_pllbck(CONFIG_SYSCLK_PRES);
	}
#endif

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
  400158:	4b0b      	ldr	r3, [pc, #44]	; (400188 <sysclk_init+0x60>)
  40015a:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
  40015c:	4801      	ldr	r0, [pc, #4]	; (400164 <sysclk_init+0x3c>)
  40015e:	4b02      	ldr	r3, [pc, #8]	; (400168 <sysclk_init+0x40>)
  400160:	4798      	blx	r3
  400162:	bd10      	pop	{r4, pc}
  400164:	07270e00 	.word	0x07270e00
  400168:	00400dc9 	.word	0x00400dc9
  40016c:	00400869 	.word	0x00400869
  400170:	004008bd 	.word	0x004008bd
  400174:	004008cd 	.word	0x004008cd
  400178:	20133f01 	.word	0x20133f01
  40017c:	400e0400 	.word	0x400e0400
  400180:	004008dd 	.word	0x004008dd
  400184:	00400801 	.word	0x00400801
  400188:	00400cb5 	.word	0x00400cb5

0040018c <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len)
{
	int nChars = 0;

	if (file != 0) {
  40018c:	b9a8      	cbnz	r0, 4001ba <_read+0x2e>
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
  40018e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  400192:	460c      	mov	r4, r1
  400194:	4690      	mov	r8, r2

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
  400196:	2a00      	cmp	r2, #0
  400198:	dd0a      	ble.n	4001b0 <_read+0x24>
  40019a:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
  40019c:	4e08      	ldr	r6, [pc, #32]	; (4001c0 <_read+0x34>)
  40019e:	4d09      	ldr	r5, [pc, #36]	; (4001c4 <_read+0x38>)
  4001a0:	6830      	ldr	r0, [r6, #0]
  4001a2:	4621      	mov	r1, r4
  4001a4:	682b      	ldr	r3, [r5, #0]
  4001a6:	4798      	blx	r3
		ptr++;
  4001a8:	3401      	adds	r4, #1

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
  4001aa:	42bc      	cmp	r4, r7
  4001ac:	d1f8      	bne.n	4001a0 <_read+0x14>
  4001ae:	e001      	b.n	4001b4 <_read+0x28>
  4001b0:	f04f 0800 	mov.w	r8, #0
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
	}
	return nChars;
  4001b4:	4640      	mov	r0, r8
  4001b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
_read (int file, char * ptr, int len)
{
	int nChars = 0;

	if (file != 0) {
		return -1;
  4001ba:	f04f 30ff 	mov.w	r0, #4294967295
  4001be:	4770      	bx	lr
  4001c0:	20000964 	.word	0x20000964
  4001c4:	2000095c 	.word	0x2000095c

004001c8 <_write>:
int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
  4001c8:	3801      	subs	r0, #1
  4001ca:	2802      	cmp	r0, #2
  4001cc:	d818      	bhi.n	400200 <_write+0x38>
int __attribute__((weak))
_write (int file, const char *ptr, int len);

int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
  4001ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4001d2:	460e      	mov	r6, r1
  4001d4:	4614      	mov	r4, r2

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
  4001d6:	b182      	cbz	r2, 4001fa <_write+0x32>
  4001d8:	460d      	mov	r5, r1
		if (ptr_put(stdio_base, *ptr++) < 0) {
  4001da:	f8df 8038 	ldr.w	r8, [pc, #56]	; 400214 <_write+0x4c>
  4001de:	4f0c      	ldr	r7, [pc, #48]	; (400210 <_write+0x48>)
  4001e0:	f8d8 0000 	ldr.w	r0, [r8]
  4001e4:	f815 1b01 	ldrb.w	r1, [r5], #1
  4001e8:	683b      	ldr	r3, [r7, #0]
  4001ea:	4798      	blx	r3
  4001ec:	2800      	cmp	r0, #0
  4001ee:	db0a      	blt.n	400206 <_write+0x3e>
  4001f0:	1ba8      	subs	r0, r5, r6

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
  4001f2:	3c01      	subs	r4, #1
  4001f4:	d1f4      	bne.n	4001e0 <_write+0x18>
  4001f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4001fa:	2000      	movs	r0, #0
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
		}
		++nChars;
	}
	return nChars;
  4001fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
_write (int file, const char *ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
  400200:	f04f 30ff 	mov.w	r0, #4294967295
			return -1;
		}
		++nChars;
	}
	return nChars;
}
  400204:	4770      	bx	lr
		return -1;
	}

	for (; len != 0; --len) {
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
  400206:	f04f 30ff 	mov.w	r0, #4294967295
		}
		++nChars;
	}
	return nChars;
}
  40020a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40020e:	bf00      	nop
  400210:	20000960 	.word	0x20000960
  400214:	20000964 	.word	0x20000964

00400218 <board_init>:
 * \addtogroup sam4s_xplained_pro_group
 * @{
 */

void board_init(void)
{
  400218:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	wdt_disable(WDT);
  40021a:	4844      	ldr	r0, [pc, #272]	; (40032c <board_init+0x114>)
  40021c:	4b44      	ldr	r3, [pc, #272]	; (400330 <board_init+0x118>)
  40021e:	4798      	blx	r3
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
  400220:	200b      	movs	r0, #11
  400222:	4c44      	ldr	r4, [pc, #272]	; (400334 <board_init+0x11c>)
  400224:	47a0      	blx	r4
  400226:	200c      	movs	r0, #12
  400228:	47a0      	blx	r4
  40022a:	200d      	movs	r0, #13
  40022c:	47a0      	blx	r4
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  40022e:	4b42      	ldr	r3, [pc, #264]	; (400338 <board_init+0x120>)
  400230:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
  400234:	631a      	str	r2, [r3, #48]	; 0x30
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  400236:	611a      	str	r2, [r3, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  400238:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  40023c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
  400240:	611a      	str	r2, [r3, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  400242:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  400246:	635a      	str	r2, [r3, #52]	; 0x34
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  400248:	4c3c      	ldr	r4, [pc, #240]	; (40033c <board_init+0x124>)
  40024a:	2604      	movs	r6, #4
  40024c:	6166      	str	r6, [r4, #20]
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40024e:	f8c4 60a0 	str.w	r6, [r4, #160]	; 0xa0
		ioport_port_mask_t mask, ioport_mode_t mode)
{
	Pio *base = arch_ioport_port_to_base(port);

	if (mode & IOPORT_MODE_PULLUP) {
		base->PIO_PUER = mask;
  400252:	6666      	str	r6, [r4, #100]	; 0x64

#if defined(IOPORT_MODE_PULLDOWN)
	if (mode & IOPORT_MODE_PULLDOWN) {
		base->PIO_PPDER = mask;
	} else {
		base->PIO_PPDDR = mask;
  400254:	f8c4 6090 	str.w	r6, [r4, #144]	; 0x90
#endif

	if (mode & IOPORT_MODE_OPEN_DRAIN) {
		base->PIO_MDER = mask;
	} else {
		base->PIO_MDDR = mask;
  400258:	6566      	str	r6, [r4, #84]	; 0x54
	}

	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
		base->PIO_IFER = mask;
	} else {
		base->PIO_IFDR = mask;
  40025a:	6266      	str	r6, [r4, #36]	; 0x24
#endif
	} else {
#if SAM3U || SAM3XA
		base->PIO_SCIFSR = mask;
#else
		base->PIO_IFSCDR = mask;
  40025c:	f8c4 6080 	str.w	r6, [r4, #128]	; 0x80
	}
#else
	if (mode & IOPORT_MODE_MUX_BIT0) {
		base->PIO_ABCDSR[0] |= mask;
	} else {
		base->PIO_ABCDSR[0] &= ~mask;
  400260:	6f22      	ldr	r2, [r4, #112]	; 0x70
  400262:	f022 0204 	bic.w	r2, r2, #4
  400266:	6722      	str	r2, [r4, #112]	; 0x70
	}

	if (mode & IOPORT_MODE_MUX_BIT1) {
		base->PIO_ABCDSR[1] |= mask;
	} else {
		base->PIO_ABCDSR[1] &= ~mask;
  400268:	6f62      	ldr	r2, [r4, #116]	; 0x74
  40026a:	f022 0204 	bic.w	r2, r2, #4
  40026e:	6762      	str	r2, [r4, #116]	; 0x74
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  400270:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
  400274:	631a      	str	r2, [r3, #48]	; 0x30
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  400276:	611a      	str	r2, [r3, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  400278:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  40027c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
  400280:	6322      	str	r2, [r4, #48]	; 0x30
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  400282:	6122      	str	r2, [r4, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  400284:	f8c4 20a0 	str.w	r2, [r4, #160]	; 0xa0
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  400288:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
  40028c:	631a      	str	r2, [r3, #48]	; 0x30
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  40028e:	611a      	str	r2, [r3, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  400290:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	ioport_set_pin_level(IO1_LED3_PIN, !IO1_LED3_ACTIVE);
	ioport_set_pin_dir(IO1_LED3_PIN, IOPORT_DIR_OUTPUT);

#ifdef CONF_BOARD_UART_CONSOLE
	/* Configure UART pins */
	gpio_configure_group(PINS_UART1_PIO, PINS_UART1, PINS_UART1_FLAGS);
  400294:	482a      	ldr	r0, [pc, #168]	; (400340 <board_init+0x128>)
  400296:	210c      	movs	r1, #12
  400298:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
  40029c:	4b29      	ldr	r3, [pc, #164]	; (400344 <board_init+0x12c>)
  40029e:	4798      	blx	r3
#endif

#ifdef CONF_BOARD_TWI0
	gpio_configure_pin(TWI0_DATA_GPIO, TWI0_DATA_FLAGS);
  4002a0:	4f29      	ldr	r7, [pc, #164]	; (400348 <board_init+0x130>)
  4002a2:	2003      	movs	r0, #3
  4002a4:	4639      	mov	r1, r7
  4002a6:	4d29      	ldr	r5, [pc, #164]	; (40034c <board_init+0x134>)
  4002a8:	47a8      	blx	r5
	gpio_configure_pin(TWI0_CLK_GPIO, TWI0_CLK_FLAGS);
  4002aa:	4630      	mov	r0, r6
  4002ac:	4639      	mov	r1, r7
  4002ae:	47a8      	blx	r5
#endif

	/* Configure SPI pins */
#ifdef CONF_BOARD_SPI
	gpio_configure_pin(SPI_MISO_GPIO, SPI_MISO_FLAGS);
  4002b0:	200c      	movs	r0, #12
  4002b2:	4639      	mov	r1, r7
  4002b4:	47a8      	blx	r5
	gpio_configure_pin(SPI_MOSI_GPIO, SPI_MOSI_FLAGS);
  4002b6:	200d      	movs	r0, #13
  4002b8:	4639      	mov	r1, r7
  4002ba:	47a8      	blx	r5
	gpio_configure_pin(SPI_SPCK_GPIO, SPI_SPCK_FLAGS);
  4002bc:	200e      	movs	r0, #14
  4002be:	4639      	mov	r1, r7
  4002c0:	47a8      	blx	r5
	 * Depending on the application requirements, the default PIN may not be available.
	 * Hence a different PIN should be selected using the CONF_BOARD_SPI_NPCS_GPIO and
	 * CONF_BOARD_SPI_NPCS_FLAGS macros.
	 */
#ifdef CONF_BOARD_SPI_NPCS0
	gpio_configure_pin(SPI_NPCS0_GPIO, SPI_NPCS0_FLAGS);
  4002c2:	200b      	movs	r0, #11
  4002c4:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  4002c8:	47a8      	blx	r5
		ioport_port_mask_t mask, ioport_mode_t mode)
{
	Pio *base = arch_ioport_port_to_base(port);

	if (mode & IOPORT_MODE_PULLUP) {
		base->PIO_PUER = mask;
  4002ca:	6666      	str	r6, [r4, #100]	; 0x64

#if defined(IOPORT_MODE_PULLDOWN)
	if (mode & IOPORT_MODE_PULLDOWN) {
		base->PIO_PPDER = mask;
	} else {
		base->PIO_PPDDR = mask;
  4002cc:	f8c4 6090 	str.w	r6, [r4, #144]	; 0x90
#endif

	if (mode & IOPORT_MODE_OPEN_DRAIN) {
		base->PIO_MDER = mask;
	} else {
		base->PIO_MDDR = mask;
  4002d0:	6566      	str	r6, [r4, #84]	; 0x54
	}

	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
		base->PIO_IFER = mask;
	} else {
		base->PIO_IFDR = mask;
  4002d2:	6266      	str	r6, [r4, #36]	; 0x24
#endif
	} else {
#if SAM3U || SAM3XA
		base->PIO_SCIFSR = mask;
#else
		base->PIO_IFSCDR = mask;
  4002d4:	f8c4 6080 	str.w	r6, [r4, #128]	; 0x80
	}
#else
	if (mode & IOPORT_MODE_MUX_BIT0) {
		base->PIO_ABCDSR[0] |= mask;
	} else {
		base->PIO_ABCDSR[0] &= ~mask;
  4002d8:	6f23      	ldr	r3, [r4, #112]	; 0x70
  4002da:	f023 0304 	bic.w	r3, r3, #4
  4002de:	6723      	str	r3, [r4, #112]	; 0x70
	}

	if (mode & IOPORT_MODE_MUX_BIT1) {
		base->PIO_ABCDSR[1] |= mask;
	} else {
		base->PIO_ABCDSR[1] &= ~mask;
  4002e0:	6f63      	ldr	r3, [r4, #116]	; 0x74
  4002e2:	f023 0304 	bic.w	r3, r3, #4
  4002e6:	6763      	str	r3, [r4, #116]	; 0x74


	//gpio_configure_pin(OV_SW_OVT_GPIO, OV_SW_OVT_FLAGS);
	//gpio_configure_pin(OV_RST_GPIO, OV_RST_FLAGS);
	//gpio_configure_pin(OV_FSIN_GPIO, OV_FSIN_FLAGS);
	gpio_configure_pin(PIO_PA16_IDX, (PIO_INPUT | PIO_DEFAULT | PIO_IT_RISE_EDGE) );
  4002e8:	4c19      	ldr	r4, [pc, #100]	; (400350 <board_init+0x138>)
  4002ea:	2010      	movs	r0, #16
  4002ec:	4621      	mov	r1, r4
  4002ee:	47a8      	blx	r5
	gpio_configure_pin(PIO_PA15_IDX, (PIO_INPUT | PIO_DEFAULT | PIO_IT_RISE_EDGE) );
  4002f0:	200f      	movs	r0, #15
  4002f2:	4621      	mov	r1, r4
  4002f4:	47a8      	blx	r5
	gpio_configure_pin(PIO_PA24_IDX, (PIO_INPUT | PIO_PULLUP) );
  4002f6:	3c6f      	subs	r4, #111	; 0x6f
  4002f8:	2018      	movs	r0, #24
  4002fa:	4621      	mov	r1, r4
  4002fc:	47a8      	blx	r5
	gpio_configure_pin(PIO_PA25_IDX, (PIO_INPUT | PIO_PULLUP) );
  4002fe:	2019      	movs	r0, #25
  400300:	4621      	mov	r1, r4
  400302:	47a8      	blx	r5
	gpio_configure_pin(PIO_PA26_IDX, (PIO_INPUT | PIO_PULLUP) );
  400304:	201a      	movs	r0, #26
  400306:	4621      	mov	r1, r4
  400308:	47a8      	blx	r5
	gpio_configure_pin(PIO_PA27_IDX, (PIO_INPUT | PIO_PULLUP) );
  40030a:	201b      	movs	r0, #27
  40030c:	4621      	mov	r1, r4
  40030e:	47a8      	blx	r5
	gpio_configure_pin(PIO_PA28_IDX, (PIO_INPUT | PIO_PULLUP) );
  400310:	201c      	movs	r0, #28
  400312:	4621      	mov	r1, r4
  400314:	47a8      	blx	r5
	gpio_configure_pin(PIO_PA29_IDX, (PIO_INPUT | PIO_PULLUP) );
  400316:	201d      	movs	r0, #29
  400318:	4621      	mov	r1, r4
  40031a:	47a8      	blx	r5
	gpio_configure_pin(PIO_PA30_IDX, (PIO_INPUT | PIO_PULLUP) );
  40031c:	201e      	movs	r0, #30
  40031e:	4621      	mov	r1, r4
  400320:	47a8      	blx	r5
	gpio_configure_pin(PIO_PA31_IDX, (PIO_INPUT | PIO_PULLUP) );
  400322:	201f      	movs	r0, #31
  400324:	4621      	mov	r1, r4
  400326:	47a8      	blx	r5
  400328:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40032a:	bf00      	nop
  40032c:	400e1450 	.word	0x400e1450
  400330:	00400bf9 	.word	0x00400bf9
  400334:	004008ed 	.word	0x004008ed
  400338:	400e1200 	.word	0x400e1200
  40033c:	400e0e00 	.word	0x400e0e00
  400340:	400e1000 	.word	0x400e1000
  400344:	004005e1 	.word	0x004005e1
  400348:	08000001 	.word	0x08000001
  40034c:	004004bd 	.word	0x004004bd
  400350:	28000070 	.word	0x28000070

00400354 <pdc_rx_init>:
		pdc_packet_t *p_next_packet)
{
	/* Validate inputs. */
	Assert(p_pdc);
	
	if (p_packet) {
  400354:	460b      	mov	r3, r1
  400356:	b119      	cbz	r1, 400360 <pdc_rx_init+0xc>
		p_pdc->PERIPH_RPR = p_packet->ul_addr;
  400358:	6809      	ldr	r1, [r1, #0]
  40035a:	6001      	str	r1, [r0, #0]
		p_pdc->PERIPH_RCR = p_packet->ul_size;
  40035c:	685b      	ldr	r3, [r3, #4]
  40035e:	6043      	str	r3, [r0, #4]
	}
	if (p_next_packet) {
  400360:	b11a      	cbz	r2, 40036a <pdc_rx_init+0x16>
		p_pdc->PERIPH_RNPR = p_next_packet->ul_addr;
  400362:	6813      	ldr	r3, [r2, #0]
  400364:	6103      	str	r3, [r0, #16]
		p_pdc->PERIPH_RNCR = p_next_packet->ul_size;
  400366:	6853      	ldr	r3, [r2, #4]
  400368:	6143      	str	r3, [r0, #20]
  40036a:	4770      	bx	lr

0040036c <pdc_enable_transfer>:
{
	/* Validate inputs. */
	Assert(p_pdc);
	
	p_pdc->PERIPH_PTCR =
			ul_controls & (PERIPH_PTCR_RXTEN | PERIPH_PTCR_TXTEN);
  40036c:	f021 01fe 	bic.w	r1, r1, #254	; 0xfe
  400370:	05c9      	lsls	r1, r1, #23
  400372:	0dc9      	lsrs	r1, r1, #23
		uint32_t ul_controls)
{
	/* Validate inputs. */
	Assert(p_pdc);
	
	p_pdc->PERIPH_PTCR =
  400374:	6201      	str	r1, [r0, #32]
  400376:	4770      	bx	lr

00400378 <pdc_disable_transfer>:
{
	/* Validate inputs. */
	Assert(p_pdc);
	
	p_pdc->PERIPH_PTCR =
			ul_controls & (PERIPH_PTCR_RXTDIS | PERIPH_PTCR_TXTDIS);
  400378:	f421 71fe 	bic.w	r1, r1, #508	; 0x1fc
  40037c:	f021 0101 	bic.w	r1, r1, #1
  400380:	0589      	lsls	r1, r1, #22
  400382:	0d89      	lsrs	r1, r1, #22
		uint32_t ul_controls)
{
	/* Validate inputs. */
	Assert(p_pdc);
	
	p_pdc->PERIPH_PTCR =
  400384:	6201      	str	r1, [r0, #32]
  400386:	4770      	bx	lr

00400388 <pio_set_peripheral>:
		const uint32_t ul_mask)
{
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
  400388:	6442      	str	r2, [r0, #68]	; 0x44

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	switch (ul_type) {
  40038a:	f1b1 5fc0 	cmp.w	r1, #402653184	; 0x18000000
  40038e:	d02f      	beq.n	4003f0 <pio_set_peripheral+0x68>
  400390:	d807      	bhi.n	4003a2 <pio_set_peripheral+0x1a>
  400392:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
  400396:	d014      	beq.n	4003c2 <pio_set_peripheral+0x3a>
  400398:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
  40039c:	d01e      	beq.n	4003dc <pio_set_peripheral+0x54>
  40039e:	b939      	cbnz	r1, 4003b0 <pio_set_peripheral+0x28>
  4003a0:	4770      	bx	lr
  4003a2:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
  4003a6:	d037      	beq.n	400418 <pio_set_peripheral+0x90>
  4003a8:	d804      	bhi.n	4003b4 <pio_set_peripheral+0x2c>
  4003aa:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
  4003ae:	d029      	beq.n	400404 <pio_set_peripheral+0x7c>
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
  4003b0:	6042      	str	r2, [r0, #4]
  4003b2:	4770      	bx	lr

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	switch (ul_type) {
  4003b4:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
  4003b8:	d02e      	beq.n	400418 <pio_set_peripheral+0x90>
  4003ba:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
  4003be:	d02b      	beq.n	400418 <pio_set_peripheral+0x90>
  4003c0:	e7f6      	b.n	4003b0 <pio_set_peripheral+0x28>
 * \param ul_type PIO type.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_set_peripheral(Pio *p_pio, const pio_type_t ul_type,
		const uint32_t ul_mask)
{
  4003c2:	b410      	push	{r4}
	p_pio->PIO_IDR = ul_mask;

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	switch (ul_type) {
	case PIO_PERIPH_A:
		ul_sr = p_pio->PIO_ABCDSR[0];
  4003c4:	6f01      	ldr	r1, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  4003c6:	6f04      	ldr	r4, [r0, #112]	; 0x70
  4003c8:	43d3      	mvns	r3, r2
  4003ca:	4021      	ands	r1, r4
  4003cc:	4019      	ands	r1, r3
  4003ce:	6701      	str	r1, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  4003d0:	6f41      	ldr	r1, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  4003d2:	6f44      	ldr	r4, [r0, #116]	; 0x74
  4003d4:	4021      	ands	r1, r4
  4003d6:	400b      	ands	r3, r1
  4003d8:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  4003da:	e01a      	b.n	400412 <pio_set_peripheral+0x8a>
	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABCDSR[0];
  4003dc:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  4003de:	4313      	orrs	r3, r2
  4003e0:	6703      	str	r3, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  4003e2:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  4003e4:	6f41      	ldr	r1, [r0, #116]	; 0x74
  4003e6:	400b      	ands	r3, r1
  4003e8:	ea23 0302 	bic.w	r3, r3, r2
  4003ec:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  4003ee:	e7df      	b.n	4003b0 <pio_set_peripheral+0x28>
#if (!SAMG)
	case PIO_PERIPH_C:
		ul_sr = p_pio->PIO_ABCDSR[0];
  4003f0:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  4003f2:	6f01      	ldr	r1, [r0, #112]	; 0x70
  4003f4:	400b      	ands	r3, r1
  4003f6:	ea23 0302 	bic.w	r3, r3, r2
  4003fa:	6703      	str	r3, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  4003fc:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  4003fe:	4313      	orrs	r3, r2
  400400:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  400402:	e7d5      	b.n	4003b0 <pio_set_peripheral+0x28>
	case PIO_PERIPH_D:
		ul_sr = p_pio->PIO_ABCDSR[0];
  400404:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  400406:	4313      	orrs	r3, r2
  400408:	6703      	str	r3, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  40040a:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  40040c:	4313      	orrs	r3, r2
  40040e:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  400410:	e7ce      	b.n	4003b0 <pio_set_peripheral+0x28>
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
  400412:	6042      	str	r2, [r0, #4]
}
  400414:	f85d 4b04 	ldr.w	r4, [sp], #4
  400418:	4770      	bx	lr
  40041a:	bf00      	nop

0040041c <pio_set_input>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
  40041c:	6441      	str	r1, [r0, #68]	; 0x44
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  40041e:	f012 0f01 	tst.w	r2, #1
		p_pio->PIO_PUER = ul_mask;
  400422:	bf14      	ite	ne
  400424:	6641      	strne	r1, [r0, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
  400426:	6601      	streq	r1, [r0, #96]	; 0x60
{
	pio_disable_interrupt(p_pio, ul_mask);
	pio_pull_up(p_pio, ul_mask, ul_attribute & PIO_PULLUP);

	/* Enable Input Filter if necessary */
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
  400428:	f012 0f0a 	tst.w	r2, #10
		p_pio->PIO_IFER = ul_mask;
  40042c:	bf14      	ite	ne
  40042e:	6201      	strne	r1, [r0, #32]
	} else {
		p_pio->PIO_IFDR = ul_mask;
  400430:	6241      	streq	r1, [r0, #36]	; 0x24
	}

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	/* Enable de-glitch or de-bounce if necessary */
	if (ul_attribute & PIO_DEGLITCH) {
  400432:	f012 0f02 	tst.w	r2, #2
  400436:	d002      	beq.n	40043e <pio_set_input+0x22>
		p_pio->PIO_IFSCDR = ul_mask;
  400438:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
  40043c:	e004      	b.n	400448 <pio_set_input+0x2c>
	} else {
		if (ul_attribute & PIO_DEBOUNCE) {
  40043e:	f012 0f08 	tst.w	r2, #8
			p_pio->PIO_IFSCER = ul_mask;
  400442:	bf18      	it	ne
  400444:	f8c0 1084 	strne.w	r1, [r0, #132]	; 0x84
#else
#error "Unsupported device"
#endif

	/* Configure pin as input */
	p_pio->PIO_ODR = ul_mask;
  400448:	6141      	str	r1, [r0, #20]
	p_pio->PIO_PER = ul_mask;
  40044a:	6001      	str	r1, [r0, #0]
  40044c:	4770      	bx	lr
  40044e:	bf00      	nop

00400450 <pio_set_output>:
 */
void pio_set_output(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_default_level,
		const uint32_t ul_multidrive_enable,
		const uint32_t ul_pull_up_enable)
{
  400450:	b410      	push	{r4}
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
  400452:	6441      	str	r1, [r0, #68]	; 0x44
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  400454:	9c01      	ldr	r4, [sp, #4]
  400456:	b10c      	cbz	r4, 40045c <pio_set_output+0xc>
		p_pio->PIO_PUER = ul_mask;
  400458:	6641      	str	r1, [r0, #100]	; 0x64
  40045a:	e000      	b.n	40045e <pio_set_output+0xe>
	} else {
		p_pio->PIO_PUDR = ul_mask;
  40045c:	6601      	str	r1, [r0, #96]	; 0x60
{
	pio_disable_interrupt(p_pio, ul_mask);
	pio_pull_up(p_pio, ul_mask, ul_pull_up_enable);

	/* Enable multi-drive if necessary */
	if (ul_multidrive_enable) {
  40045e:	b10b      	cbz	r3, 400464 <pio_set_output+0x14>
		p_pio->PIO_MDER = ul_mask;
  400460:	6501      	str	r1, [r0, #80]	; 0x50
  400462:	e000      	b.n	400466 <pio_set_output+0x16>
	} else {
		p_pio->PIO_MDDR = ul_mask;
  400464:	6541      	str	r1, [r0, #84]	; 0x54
	}

	/* Set default value */
	if (ul_default_level) {
  400466:	b10a      	cbz	r2, 40046c <pio_set_output+0x1c>
		p_pio->PIO_SODR = ul_mask;
  400468:	6301      	str	r1, [r0, #48]	; 0x30
  40046a:	e000      	b.n	40046e <pio_set_output+0x1e>
	} else {
		p_pio->PIO_CODR = ul_mask;
  40046c:	6341      	str	r1, [r0, #52]	; 0x34
	}

	/* Configure pin(s) as output(s) */
	p_pio->PIO_OER = ul_mask;
  40046e:	6101      	str	r1, [r0, #16]
	p_pio->PIO_PER = ul_mask;
  400470:	6001      	str	r1, [r0, #0]
}
  400472:	f85d 4b04 	ldr.w	r4, [sp], #4
  400476:	4770      	bx	lr

00400478 <pio_configure_interrupt>:
 */
void pio_configure_interrupt(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_attr)
{
	/* Configure additional interrupt mode registers. */
	if (ul_attr & PIO_IT_AIME) {
  400478:	f012 0f10 	tst.w	r2, #16
  40047c:	d010      	beq.n	4004a0 <pio_configure_interrupt+0x28>
		/* Enable additional interrupt mode. */
		p_pio->PIO_AIMER = ul_mask;
  40047e:	f8c0 10b0 	str.w	r1, [r0, #176]	; 0xb0

		/* If bit field of the selected pin is 1, set as
		   Rising Edge/High level detection event. */
		if (ul_attr & PIO_IT_RE_OR_HL) {
  400482:	f012 0f20 	tst.w	r2, #32
			/* Rising Edge or High Level */
			p_pio->PIO_REHLSR = ul_mask;
  400486:	bf14      	ite	ne
  400488:	f8c0 10d4 	strne.w	r1, [r0, #212]	; 0xd4
		} else {
			/* Falling Edge or Low Level */
			p_pio->PIO_FELLSR = ul_mask;
  40048c:	f8c0 10d0 	streq.w	r1, [r0, #208]	; 0xd0
		}

		/* If bit field of the selected pin is 1, set as
		   edge detection source. */
		if (ul_attr & PIO_IT_EDGE) {
  400490:	f012 0f40 	tst.w	r2, #64	; 0x40
			/* Edge select */
			p_pio->PIO_ESR = ul_mask;
  400494:	bf14      	ite	ne
  400496:	f8c0 10c0 	strne.w	r1, [r0, #192]	; 0xc0
		} else {
			/* Level select */
			p_pio->PIO_LSR = ul_mask;
  40049a:	f8c0 10c4 	streq.w	r1, [r0, #196]	; 0xc4
  40049e:	4770      	bx	lr
		}
	} else {
		/* Disable additional interrupt mode. */
		p_pio->PIO_AIMDR = ul_mask;
  4004a0:	f8c0 10b4 	str.w	r1, [r0, #180]	; 0xb4
  4004a4:	4770      	bx	lr
  4004a6:	bf00      	nop

004004a8 <pio_enable_interrupt>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_enable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_ISR;
  4004a8:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
	p_pio->PIO_IER = ul_mask;
  4004aa:	6401      	str	r1, [r0, #64]	; 0x40
  4004ac:	4770      	bx	lr
  4004ae:	bf00      	nop

004004b0 <pio_disable_interrupt>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
  4004b0:	6441      	str	r1, [r0, #68]	; 0x44
  4004b2:	4770      	bx	lr

004004b4 <pio_get_interrupt_status>:
 *
 * \return The interrupt status mask value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
  4004b4:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
  4004b6:	4770      	bx	lr

004004b8 <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
  4004b8:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
  4004ba:	4770      	bx	lr

004004bc <pio_configure_pin>:
 * \param ul_flags Pins attributes.
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
  4004bc:	b570      	push	{r4, r5, r6, lr}
  4004be:	b082      	sub	sp, #8
  4004c0:	460d      	mov	r5, r1
		p_pio = PIOC;
	} else {
		p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
	}
#else
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
  4004c2:	0943      	lsrs	r3, r0, #5
  4004c4:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  4004c8:	f203 7307 	addw	r3, r3, #1799	; 0x707
  4004cc:	025c      	lsls	r4, r3, #9
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
	Pio *p_pio = pio_get_pin_group(ul_pin);

	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
  4004ce:	f001 43f0 	and.w	r3, r1, #2013265920	; 0x78000000
  4004d2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
  4004d6:	d047      	beq.n	400568 <pio_configure_pin+0xac>
  4004d8:	d809      	bhi.n	4004ee <pio_configure_pin+0x32>
  4004da:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
  4004de:	d021      	beq.n	400524 <pio_configure_pin+0x68>
  4004e0:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
  4004e4:	d02f      	beq.n	400546 <pio_configure_pin+0x8a>
  4004e6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
  4004ea:	d16f      	bne.n	4005cc <pio_configure_pin+0x110>
  4004ec:	e009      	b.n	400502 <pio_configure_pin+0x46>
  4004ee:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
  4004f2:	d055      	beq.n	4005a0 <pio_configure_pin+0xe4>
  4004f4:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
  4004f8:	d052      	beq.n	4005a0 <pio_configure_pin+0xe4>
  4004fa:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
  4004fe:	d044      	beq.n	40058a <pio_configure_pin+0xce>
  400500:	e064      	b.n	4005cc <pio_configure_pin+0x110>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
  400502:	f000 001f 	and.w	r0, r0, #31
  400506:	2601      	movs	r6, #1
  400508:	4086      	lsls	r6, r0
  40050a:	4620      	mov	r0, r4
  40050c:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  400510:	4632      	mov	r2, r6
  400512:	4b30      	ldr	r3, [pc, #192]	; (4005d4 <pio_configure_pin+0x118>)
  400514:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  400516:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
  40051a:	bf14      	ite	ne
  40051c:	6666      	strne	r6, [r4, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
  40051e:	6626      	streq	r6, [r4, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
  400520:	2001      	movs	r0, #1
  400522:	e054      	b.n	4005ce <pio_configure_pin+0x112>
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
				(ul_flags & PIO_PULLUP));
		break;
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, (1 << (ul_pin & 0x1F)));
  400524:	f000 001f 	and.w	r0, r0, #31
  400528:	2601      	movs	r6, #1
  40052a:	4086      	lsls	r6, r0
  40052c:	4620      	mov	r0, r4
  40052e:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  400532:	4632      	mov	r2, r6
  400534:	4b27      	ldr	r3, [pc, #156]	; (4005d4 <pio_configure_pin+0x118>)
  400536:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  400538:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
  40053c:	bf14      	ite	ne
  40053e:	6666      	strne	r6, [r4, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
  400540:	6626      	streq	r6, [r4, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
  400542:	2001      	movs	r0, #1
  400544:	e043      	b.n	4005ce <pio_configure_pin+0x112>
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
				(ul_flags & PIO_PULLUP));
		break;
#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	case PIO_TYPE_PIO_PERIPH_C:
		pio_set_peripheral(p_pio, PIO_PERIPH_C, (1 << (ul_pin & 0x1F)));
  400546:	f000 001f 	and.w	r0, r0, #31
  40054a:	2601      	movs	r6, #1
  40054c:	4086      	lsls	r6, r0
  40054e:	4620      	mov	r0, r4
  400550:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  400554:	4632      	mov	r2, r6
  400556:	4b1f      	ldr	r3, [pc, #124]	; (4005d4 <pio_configure_pin+0x118>)
  400558:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  40055a:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
  40055e:	bf14      	ite	ne
  400560:	6666      	strne	r6, [r4, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
  400562:	6626      	streq	r6, [r4, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
  400564:	2001      	movs	r0, #1
  400566:	e032      	b.n	4005ce <pio_configure_pin+0x112>
		pio_set_peripheral(p_pio, PIO_PERIPH_C, (1 << (ul_pin & 0x1F)));
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
				(ul_flags & PIO_PULLUP));
		break;
	case PIO_TYPE_PIO_PERIPH_D:
		pio_set_peripheral(p_pio, PIO_PERIPH_D, (1 << (ul_pin & 0x1F)));
  400568:	f000 001f 	and.w	r0, r0, #31
  40056c:	2601      	movs	r6, #1
  40056e:	4086      	lsls	r6, r0
  400570:	4620      	mov	r0, r4
  400572:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
  400576:	4632      	mov	r2, r6
  400578:	4b16      	ldr	r3, [pc, #88]	; (4005d4 <pio_configure_pin+0x118>)
  40057a:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  40057c:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
  400580:	bf14      	ite	ne
  400582:	6666      	strne	r6, [r4, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
  400584:	6626      	streq	r6, [r4, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
  400586:	2001      	movs	r0, #1
  400588:	e021      	b.n	4005ce <pio_configure_pin+0x112>
				(ul_flags & PIO_PULLUP));
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
  40058a:	f000 031f 	and.w	r3, r0, #31
  40058e:	2601      	movs	r6, #1
  400590:	4620      	mov	r0, r4
  400592:	fa06 f103 	lsl.w	r1, r6, r3
  400596:	462a      	mov	r2, r5
  400598:	4b0f      	ldr	r3, [pc, #60]	; (4005d8 <pio_configure_pin+0x11c>)
  40059a:	4798      	blx	r3

	default:
		return 0;
	}

	return 1;
  40059c:	4630      	mov	r0, r6
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;
  40059e:	e016      	b.n	4005ce <pio_configure_pin+0x112>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
  4005a0:	f000 031f 	and.w	r3, r0, #31
  4005a4:	2601      	movs	r6, #1
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
  4005a6:	f005 5260 	and.w	r2, r5, #939524096	; 0x38000000
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
  4005aa:	ea05 0106 	and.w	r1, r5, r6
  4005ae:	9100      	str	r1, [sp, #0]
  4005b0:	4620      	mov	r0, r4
  4005b2:	fa06 f103 	lsl.w	r1, r6, r3
  4005b6:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
  4005ba:	bf14      	ite	ne
  4005bc:	2200      	movne	r2, #0
  4005be:	2201      	moveq	r2, #1
  4005c0:	f3c5 0380 	ubfx	r3, r5, #2, #1
  4005c4:	4c05      	ldr	r4, [pc, #20]	; (4005dc <pio_configure_pin+0x120>)
  4005c6:	47a0      	blx	r4

	default:
		return 0;
	}

	return 1;
  4005c8:	4630      	mov	r0, r6
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
		break;
  4005ca:	e000      	b.n	4005ce <pio_configure_pin+0x112>

	default:
		return 0;
  4005cc:	2000      	movs	r0, #0
	}

	return 1;
}
  4005ce:	b002      	add	sp, #8
  4005d0:	bd70      	pop	{r4, r5, r6, pc}
  4005d2:	bf00      	nop
  4005d4:	00400389 	.word	0x00400389
  4005d8:	0040041d 	.word	0x0040041d
  4005dc:	00400451 	.word	0x00400451

004005e0 <pio_configure_pin_group>:
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin_group(Pio *p_pio,
		uint32_t ul_mask, const uint32_t ul_flags)
{
  4005e0:	b570      	push	{r4, r5, r6, lr}
  4005e2:	b082      	sub	sp, #8
  4005e4:	4606      	mov	r6, r0
  4005e6:	460d      	mov	r5, r1
  4005e8:	4614      	mov	r4, r2
	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
  4005ea:	f002 43f0 	and.w	r3, r2, #2013265920	; 0x78000000
  4005ee:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
  4005f2:	d038      	beq.n	400666 <pio_configure_pin_group+0x86>
  4005f4:	d809      	bhi.n	40060a <pio_configure_pin_group+0x2a>
  4005f6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
  4005fa:	d01c      	beq.n	400636 <pio_configure_pin_group+0x56>
  4005fc:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
  400600:	d025      	beq.n	40064e <pio_configure_pin_group+0x6e>
  400602:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
  400606:	d150      	bne.n	4006aa <pio_configure_pin_group+0xca>
  400608:	e009      	b.n	40061e <pio_configure_pin_group+0x3e>
  40060a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
  40060e:	d03a      	beq.n	400686 <pio_configure_pin_group+0xa6>
  400610:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
  400614:	d037      	beq.n	400686 <pio_configure_pin_group+0xa6>
  400616:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
  40061a:	d030      	beq.n	40067e <pio_configure_pin_group+0x9e>
  40061c:	e045      	b.n	4006aa <pio_configure_pin_group+0xca>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, ul_mask);
  40061e:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  400622:	462a      	mov	r2, r5
  400624:	4b22      	ldr	r3, [pc, #136]	; (4006b0 <pio_configure_pin_group+0xd0>)
  400626:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  400628:	f014 0f01 	tst.w	r4, #1
		p_pio->PIO_PUER = ul_mask;
  40062c:	bf14      	ite	ne
  40062e:	6675      	strne	r5, [r6, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
  400630:	6635      	streq	r5, [r6, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
  400632:	2001      	movs	r0, #1
  400634:	e03a      	b.n	4006ac <pio_configure_pin_group+0xcc>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, ul_mask);
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, ul_mask);
  400636:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  40063a:	462a      	mov	r2, r5
  40063c:	4b1c      	ldr	r3, [pc, #112]	; (4006b0 <pio_configure_pin_group+0xd0>)
  40063e:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  400640:	f014 0f01 	tst.w	r4, #1
		p_pio->PIO_PUER = ul_mask;
  400644:	bf14      	ite	ne
  400646:	6675      	strne	r5, [r6, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
  400648:	6635      	streq	r5, [r6, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
  40064a:	2001      	movs	r0, #1
  40064c:	e02e      	b.n	4006ac <pio_configure_pin_group+0xcc>
		pio_set_peripheral(p_pio, PIO_PERIPH_B, ul_mask);
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	case PIO_TYPE_PIO_PERIPH_C:
		pio_set_peripheral(p_pio, PIO_PERIPH_C, ul_mask);
  40064e:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  400652:	462a      	mov	r2, r5
  400654:	4b16      	ldr	r3, [pc, #88]	; (4006b0 <pio_configure_pin_group+0xd0>)
  400656:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  400658:	f014 0f01 	tst.w	r4, #1
		p_pio->PIO_PUER = ul_mask;
  40065c:	bf14      	ite	ne
  40065e:	6675      	strne	r5, [r6, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
  400660:	6635      	streq	r5, [r6, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
  400662:	2001      	movs	r0, #1
  400664:	e022      	b.n	4006ac <pio_configure_pin_group+0xcc>
	case PIO_TYPE_PIO_PERIPH_C:
		pio_set_peripheral(p_pio, PIO_PERIPH_C, ul_mask);
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
	case PIO_TYPE_PIO_PERIPH_D:
		pio_set_peripheral(p_pio, PIO_PERIPH_D, ul_mask);
  400666:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
  40066a:	462a      	mov	r2, r5
  40066c:	4b10      	ldr	r3, [pc, #64]	; (4006b0 <pio_configure_pin_group+0xd0>)
  40066e:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  400670:	f014 0f01 	tst.w	r4, #1
		p_pio->PIO_PUER = ul_mask;
  400674:	bf14      	ite	ne
  400676:	6675      	strne	r5, [r6, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
  400678:	6635      	streq	r5, [r6, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
  40067a:	2001      	movs	r0, #1
  40067c:	e016      	b.n	4006ac <pio_configure_pin_group+0xcc>
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, ul_mask, ul_flags);
  40067e:	4b0d      	ldr	r3, [pc, #52]	; (4006b4 <pio_configure_pin_group+0xd4>)
  400680:	4798      	blx	r3

	default:
		return 0;
	}

	return 1;
  400682:	2001      	movs	r0, #1
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, ul_mask, ul_flags);
		break;
  400684:	e012      	b.n	4006ac <pio_configure_pin_group+0xcc>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask,
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
  400686:	f004 5260 	and.w	r2, r4, #939524096	; 0x38000000
		pio_set_input(p_pio, ul_mask, ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask,
  40068a:	f004 0301 	and.w	r3, r4, #1
  40068e:	9300      	str	r3, [sp, #0]
  400690:	4630      	mov	r0, r6
  400692:	4629      	mov	r1, r5
  400694:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
  400698:	bf14      	ite	ne
  40069a:	2200      	movne	r2, #0
  40069c:	2201      	moveq	r2, #1
  40069e:	f3c4 0380 	ubfx	r3, r4, #2, #1
  4006a2:	4c05      	ldr	r4, [pc, #20]	; (4006b8 <pio_configure_pin_group+0xd8>)
  4006a4:	47a0      	blx	r4

	default:
		return 0;
	}

	return 1;
  4006a6:	2001      	movs	r0, #1
		pio_set_output(p_pio, ul_mask,
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
		break;
  4006a8:	e000      	b.n	4006ac <pio_configure_pin_group+0xcc>

	default:
		return 0;
  4006aa:	2000      	movs	r0, #0
	}

	return 1;
}
  4006ac:	b002      	add	sp, #8
  4006ae:	bd70      	pop	{r4, r5, r6, pc}
  4006b0:	00400389 	.word	0x00400389
  4006b4:	0040041d 	.word	0x0040041d
  4006b8:	00400451 	.word	0x00400451

004006bc <pio_capture_enable>:
 *
 * \param p_pio Pointer to a PIO instance.
 */
void pio_capture_enable(Pio *p_pio)
{
	p_pio->PIO_PCMR |= PIO_PCMR_PCEN;
  4006bc:	f8d0 3150 	ldr.w	r3, [r0, #336]	; 0x150
  4006c0:	f043 0301 	orr.w	r3, r3, #1
  4006c4:	f8c0 3150 	str.w	r3, [r0, #336]	; 0x150
	pio_capture_enable_flag = true;
  4006c8:	2201      	movs	r2, #1
  4006ca:	4b01      	ldr	r3, [pc, #4]	; (4006d0 <pio_capture_enable+0x14>)
  4006cc:	601a      	str	r2, [r3, #0]
  4006ce:	4770      	bx	lr
  4006d0:	20000968 	.word	0x20000968

004006d4 <pio_capture_disable>:
 *
 * \param p_pio Pointer to a PIO instance.
 */
void pio_capture_disable(Pio *p_pio)
{
	p_pio->PIO_PCMR &= (~PIO_PCMR_PCEN);
  4006d4:	f8d0 3150 	ldr.w	r3, [r0, #336]	; 0x150
  4006d8:	f023 0301 	bic.w	r3, r3, #1
  4006dc:	f8c0 3150 	str.w	r3, [r0, #336]	; 0x150
	pio_capture_enable_flag = false;
  4006e0:	2200      	movs	r2, #0
  4006e2:	4b01      	ldr	r3, [pc, #4]	; (4006e8 <pio_capture_disable+0x14>)
  4006e4:	601a      	str	r2, [r3, #0]
  4006e6:	4770      	bx	lr
  4006e8:	20000968 	.word	0x20000968

004006ec <pio_capture_enable_interrupt>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_capture_enable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_PCISR;
  4006ec:	f8d0 3160 	ldr.w	r3, [r0, #352]	; 0x160
	p_pio->PIO_PCIER = ul_mask;
  4006f0:	f8c0 1154 	str.w	r1, [r0, #340]	; 0x154
  4006f4:	4770      	bx	lr
  4006f6:	bf00      	nop

004006f8 <pio_capture_disable_interrupt>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_capture_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_PCIDR = ul_mask;
  4006f8:	f8c0 1158 	str.w	r1, [r0, #344]	; 0x158
  4006fc:	4770      	bx	lr
  4006fe:	bf00      	nop

00400700 <pio_capture_get_interrupt_status>:
 *
 * \return The interrupt status mask value.
 */
uint32_t pio_capture_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_PCISR;
  400700:	f8d0 0160 	ldr.w	r0, [r0, #352]	; 0x160
}
  400704:	4770      	bx	lr
  400706:	bf00      	nop

00400708 <pio_capture_get_pdc_base>:
 */
Pdc *pio_capture_get_pdc_base(const Pio *p_pio)
{
	UNUSED(p_pio); /* Stop warning */
	return PDC_PIOA;
}
  400708:	4800      	ldr	r0, [pc, #0]	; (40070c <pio_capture_get_pdc_base+0x4>)
  40070a:	4770      	bx	lr
  40070c:	400e0f68 	.word	0x400e0f68

00400710 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
  400710:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  400714:	4681      	mov	r9, r0
  400716:	4688      	mov	r8, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
  400718:	4b12      	ldr	r3, [pc, #72]	; (400764 <pio_handler_process+0x54>)
  40071a:	4798      	blx	r3
  40071c:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
  40071e:	4648      	mov	r0, r9
  400720:	4b11      	ldr	r3, [pc, #68]	; (400768 <pio_handler_process+0x58>)
  400722:	4798      	blx	r3

	/* Check pending events */
	if (status != 0) {
  400724:	4005      	ands	r5, r0
  400726:	d013      	beq.n	400750 <pio_handler_process+0x40>
  400728:	4c10      	ldr	r4, [pc, #64]	; (40076c <pio_handler_process+0x5c>)
  40072a:	f104 0660 	add.w	r6, r4, #96	; 0x60
		/* Find triggering source */
		i = 0;
		while (status != 0) {
			/* Source is configured on the same controller */
			if (gs_interrupt_sources[i].id == ul_id) {
  40072e:	6823      	ldr	r3, [r4, #0]
  400730:	4543      	cmp	r3, r8
  400732:	d108      	bne.n	400746 <pio_handler_process+0x36>
				/* Source has PIOs whose statuses have changed */
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  400734:	6861      	ldr	r1, [r4, #4]
  400736:	4229      	tst	r1, r5
  400738:	d005      	beq.n	400746 <pio_handler_process+0x36>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  40073a:	68e3      	ldr	r3, [r4, #12]
  40073c:	4640      	mov	r0, r8
  40073e:	4798      	blx	r3
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
  400740:	6863      	ldr	r3, [r4, #4]
  400742:	ea25 0503 	bic.w	r5, r5, r3
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
  400746:	42b4      	cmp	r4, r6
  400748:	d002      	beq.n	400750 <pio_handler_process+0x40>
  40074a:	3410      	adds	r4, #16

	/* Check pending events */
	if (status != 0) {
		/* Find triggering source */
		i = 0;
		while (status != 0) {
  40074c:	2d00      	cmp	r5, #0
  40074e:	d1ee      	bne.n	40072e <pio_handler_process+0x1e>
		}
	}

	/* Check capture events */
#if (SAM3S || SAM4S || SAM4E)
	if (pio_capture_enable_flag) {
  400750:	4b07      	ldr	r3, [pc, #28]	; (400770 <pio_handler_process+0x60>)
  400752:	681b      	ldr	r3, [r3, #0]
  400754:	b123      	cbz	r3, 400760 <pio_handler_process+0x50>
		if (pio_capture_handler) {
  400756:	4b07      	ldr	r3, [pc, #28]	; (400774 <pio_handler_process+0x64>)
  400758:	681b      	ldr	r3, [r3, #0]
  40075a:	b10b      	cbz	r3, 400760 <pio_handler_process+0x50>
			pio_capture_handler(p_pio);
  40075c:	4648      	mov	r0, r9
  40075e:	4798      	blx	r3
  400760:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  400764:	004004b5 	.word	0x004004b5
  400768:	004004b9 	.word	0x004004b9
  40076c:	200008a8 	.word	0x200008a8
  400770:	20000968 	.word	0x20000968
  400774:	200008a4 	.word	0x200008a4

00400778 <pio_handler_set>:
 *
 * \return 0 if successful, 1 if the maximum number of sources has been defined.
 */
uint32_t pio_handler_set(Pio *p_pio, uint32_t ul_id, uint32_t ul_mask,
		uint32_t ul_attr, void (*p_handler) (uint32_t, uint32_t))
{
  400778:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct s_interrupt_source *pSource;

	if (gs_ul_nb_sources >= MAX_INTERRUPT_SOURCES)
  40077a:	4c0c      	ldr	r4, [pc, #48]	; (4007ac <pio_handler_set+0x34>)
  40077c:	6824      	ldr	r4, [r4, #0]
  40077e:	2c06      	cmp	r4, #6
  400780:	d811      	bhi.n	4007a6 <pio_handler_set+0x2e>
  400782:	4615      	mov	r5, r2
		return 1;

	/* Define new source */
	pSource = &(gs_interrupt_sources[gs_ul_nb_sources]);
	pSource->id = ul_id;
  400784:	4f0a      	ldr	r7, [pc, #40]	; (4007b0 <pio_handler_set+0x38>)
  400786:	0122      	lsls	r2, r4, #4
  400788:	18be      	adds	r6, r7, r2
  40078a:	50b9      	str	r1, [r7, r2]
	pSource->mask = ul_mask;
  40078c:	6075      	str	r5, [r6, #4]
	pSource->attr = ul_attr;
  40078e:	60b3      	str	r3, [r6, #8]
	pSource->handler = p_handler;
  400790:	9a06      	ldr	r2, [sp, #24]
  400792:	60f2      	str	r2, [r6, #12]
	gs_ul_nb_sources++;
  400794:	3401      	adds	r4, #1
  400796:	4a05      	ldr	r2, [pc, #20]	; (4007ac <pio_handler_set+0x34>)
  400798:	6014      	str	r4, [r2, #0]

	/* Configure interrupt mode */
	pio_configure_interrupt(p_pio, ul_mask, ul_attr);
  40079a:	4629      	mov	r1, r5
  40079c:	461a      	mov	r2, r3
  40079e:	4b05      	ldr	r3, [pc, #20]	; (4007b4 <pio_handler_set+0x3c>)
  4007a0:	4798      	blx	r3

	return 0;
  4007a2:	2000      	movs	r0, #0
  4007a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		uint32_t ul_attr, void (*p_handler) (uint32_t, uint32_t))
{
	struct s_interrupt_source *pSource;

	if (gs_ul_nb_sources >= MAX_INTERRUPT_SOURCES)
		return 1;
  4007a6:	2001      	movs	r0, #1

	/* Configure interrupt mode */
	pio_configure_interrupt(p_pio, ul_mask, ul_attr);

	return 0;
}
  4007a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4007aa:	bf00      	nop
  4007ac:	200008a0 	.word	0x200008a0
  4007b0:	200008a8 	.word	0x200008a8
  4007b4:	00400479 	.word	0x00400479

004007b8 <pio_capture_handler_set>:
 * \param p_handler Interrupt handler function pointer.
 *
 */
void pio_capture_handler_set(void (*p_handler)(Pio *))
{
	pio_capture_handler = p_handler;
  4007b8:	4b01      	ldr	r3, [pc, #4]	; (4007c0 <pio_capture_handler_set+0x8>)
  4007ba:	6018      	str	r0, [r3, #0]
  4007bc:	4770      	bx	lr
  4007be:	bf00      	nop
  4007c0:	200008a4 	.word	0x200008a4

004007c4 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
  4007c4:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
  4007c6:	4802      	ldr	r0, [pc, #8]	; (4007d0 <PIOA_Handler+0xc>)
  4007c8:	210b      	movs	r1, #11
  4007ca:	4b02      	ldr	r3, [pc, #8]	; (4007d4 <PIOA_Handler+0x10>)
  4007cc:	4798      	blx	r3
  4007ce:	bd08      	pop	{r3, pc}
  4007d0:	400e0e00 	.word	0x400e0e00
  4007d4:	00400711 	.word	0x00400711

004007d8 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
  4007d8:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
  4007da:	4802      	ldr	r0, [pc, #8]	; (4007e4 <PIOB_Handler+0xc>)
  4007dc:	210c      	movs	r1, #12
  4007de:	4b02      	ldr	r3, [pc, #8]	; (4007e8 <PIOB_Handler+0x10>)
  4007e0:	4798      	blx	r3
  4007e2:	bd08      	pop	{r3, pc}
  4007e4:	400e1000 	.word	0x400e1000
  4007e8:	00400711 	.word	0x00400711

004007ec <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
  4007ec:	b508      	push	{r3, lr}
	pio_handler_process(PIOC, ID_PIOC);
  4007ee:	4802      	ldr	r0, [pc, #8]	; (4007f8 <PIOC_Handler+0xc>)
  4007f0:	210d      	movs	r1, #13
  4007f2:	4b02      	ldr	r3, [pc, #8]	; (4007fc <PIOC_Handler+0x10>)
  4007f4:	4798      	blx	r3
  4007f6:	bd08      	pop	{r3, pc}
  4007f8:	400e1200 	.word	0x400e1200
  4007fc:	00400711 	.word	0x00400711

00400800 <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
  400800:	4a18      	ldr	r2, [pc, #96]	; (400864 <pmc_switch_mck_to_pllack+0x64>)
  400802:	6b13      	ldr	r3, [r2, #48]	; 0x30
  400804:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  400808:	4318      	orrs	r0, r3
  40080a:	6310      	str	r0, [r2, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  40080c:	6e93      	ldr	r3, [r2, #104]	; 0x68
  40080e:	f013 0f08 	tst.w	r3, #8
  400812:	d003      	beq.n	40081c <pmc_switch_mck_to_pllack+0x1c>
  400814:	e009      	b.n	40082a <pmc_switch_mck_to_pllack+0x2a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  400816:	3b01      	subs	r3, #1
  400818:	d103      	bne.n	400822 <pmc_switch_mck_to_pllack+0x22>
  40081a:	e01e      	b.n	40085a <pmc_switch_mck_to_pllack+0x5a>
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  40081c:	f44f 6300 	mov.w	r3, #2048	; 0x800
  400820:	4910      	ldr	r1, [pc, #64]	; (400864 <pmc_switch_mck_to_pllack+0x64>)
  400822:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  400824:	f012 0f08 	tst.w	r2, #8
  400828:	d0f5      	beq.n	400816 <pmc_switch_mck_to_pllack+0x16>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
  40082a:	4a0e      	ldr	r2, [pc, #56]	; (400864 <pmc_switch_mck_to_pllack+0x64>)
  40082c:	6b13      	ldr	r3, [r2, #48]	; 0x30
  40082e:	f023 0303 	bic.w	r3, r3, #3
  400832:	f043 0302 	orr.w	r3, r3, #2
  400836:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  400838:	6e90      	ldr	r0, [r2, #104]	; 0x68
  40083a:	f010 0008 	ands.w	r0, r0, #8
  40083e:	d004      	beq.n	40084a <pmc_switch_mck_to_pllack+0x4a>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	return 0;
  400840:	2000      	movs	r0, #0
  400842:	4770      	bx	lr
	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
  400844:	3b01      	subs	r3, #1
  400846:	d103      	bne.n	400850 <pmc_switch_mck_to_pllack+0x50>
  400848:	e009      	b.n	40085e <pmc_switch_mck_to_pllack+0x5e>
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  40084a:	f44f 6300 	mov.w	r3, #2048	; 0x800
  40084e:	4905      	ldr	r1, [pc, #20]	; (400864 <pmc_switch_mck_to_pllack+0x64>)
  400850:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  400852:	f012 0f08 	tst.w	r2, #8
  400856:	d0f5      	beq.n	400844 <pmc_switch_mck_to_pllack+0x44>
  400858:	4770      	bx	lr

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
			return 1;
  40085a:	2001      	movs	r0, #1
  40085c:	4770      	bx	lr
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
			return 1;
  40085e:	2001      	movs	r0, #1
		}
	}

	return 0;
}
  400860:	4770      	bx	lr
  400862:	bf00      	nop
  400864:	400e0400 	.word	0x400e0400

00400868 <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
  400868:	b138      	cbz	r0, 40087a <pmc_switch_mainck_to_xtal+0x12>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  40086a:	4911      	ldr	r1, [pc, #68]	; (4008b0 <pmc_switch_mainck_to_xtal+0x48>)
  40086c:	6a0b      	ldr	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  40086e:	4a11      	ldr	r2, [pc, #68]	; (4008b4 <pmc_switch_mainck_to_xtal+0x4c>)
  400870:	401a      	ands	r2, r3
  400872:	4b11      	ldr	r3, [pc, #68]	; (4008b8 <pmc_switch_mainck_to_xtal+0x50>)
  400874:	4313      	orrs	r3, r2
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  400876:	620b      	str	r3, [r1, #32]
  400878:	4770      	bx	lr
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  40087a:	4a0d      	ldr	r2, [pc, #52]	; (4008b0 <pmc_switch_mainck_to_xtal+0x48>)
  40087c:	6a13      	ldr	r3, [r2, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  40087e:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
  400882:	f023 0303 	bic.w	r3, r3, #3
  400886:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  40088a:	f043 0301 	orr.w	r3, r3, #1
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
  40088e:	0209      	lsls	r1, r1, #8
  400890:	b289      	uxth	r1, r1
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  400892:	430b      	orrs	r3, r1
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  400894:	6213      	str	r3, [r2, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  400896:	6e93      	ldr	r3, [r2, #104]	; 0x68
  400898:	f013 0f01 	tst.w	r3, #1
  40089c:	d0fb      	beq.n	400896 <pmc_switch_mainck_to_xtal+0x2e>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
  40089e:	4a04      	ldr	r2, [pc, #16]	; (4008b0 <pmc_switch_mainck_to_xtal+0x48>)
  4008a0:	6a13      	ldr	r3, [r2, #32]
  4008a2:	f043 739b 	orr.w	r3, r3, #20316160	; 0x1360000
  4008a6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
  4008aa:	6213      	str	r3, [r2, #32]
  4008ac:	4770      	bx	lr
  4008ae:	bf00      	nop
  4008b0:	400e0400 	.word	0x400e0400
  4008b4:	fec8fffc 	.word	0xfec8fffc
  4008b8:	01370002 	.word	0x01370002

004008bc <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
  4008bc:	4b02      	ldr	r3, [pc, #8]	; (4008c8 <pmc_osc_is_ready_mainck+0xc>)
  4008be:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  4008c0:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
  4008c4:	4770      	bx	lr
  4008c6:	bf00      	nop
  4008c8:	400e0400 	.word	0x400e0400

004008cc <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
  4008cc:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  4008d0:	4b01      	ldr	r3, [pc, #4]	; (4008d8 <pmc_disable_pllack+0xc>)
  4008d2:	629a      	str	r2, [r3, #40]	; 0x28
  4008d4:	4770      	bx	lr
  4008d6:	bf00      	nop
  4008d8:	400e0400 	.word	0x400e0400

004008dc <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
  4008dc:	4b02      	ldr	r3, [pc, #8]	; (4008e8 <pmc_is_locked_pllack+0xc>)
  4008de:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  4008e0:	f000 0002 	and.w	r0, r0, #2
  4008e4:	4770      	bx	lr
  4008e6:	bf00      	nop
  4008e8:	400e0400 	.word	0x400e0400

004008ec <pmc_enable_periph_clk>:
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
  4008ec:	2822      	cmp	r0, #34	; 0x22
  4008ee:	d81e      	bhi.n	40092e <pmc_enable_periph_clk+0x42>
		return 1;
	}

	if (ul_id < 32) {
  4008f0:	281f      	cmp	r0, #31
  4008f2:	d80c      	bhi.n	40090e <pmc_enable_periph_clk+0x22>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
  4008f4:	4b11      	ldr	r3, [pc, #68]	; (40093c <pmc_enable_periph_clk+0x50>)
  4008f6:	699a      	ldr	r2, [r3, #24]
  4008f8:	2301      	movs	r3, #1
  4008fa:	4083      	lsls	r3, r0
  4008fc:	401a      	ands	r2, r3
  4008fe:	4293      	cmp	r3, r2
  400900:	d017      	beq.n	400932 <pmc_enable_periph_clk+0x46>
			PMC->PMC_PCER0 = 1 << ul_id;
  400902:	2301      	movs	r3, #1
  400904:	4083      	lsls	r3, r0
  400906:	4a0d      	ldr	r2, [pc, #52]	; (40093c <pmc_enable_periph_clk+0x50>)
  400908:	6113      	str	r3, [r2, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
  40090a:	2000      	movs	r0, #0
  40090c:	4770      	bx	lr
			PMC->PMC_PCER0 = 1 << ul_id;
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP || SAMG55 || SAMV71 || SAMV70 || SAME70 || SAMS70)
	} else {
		ul_id -= 32;
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
  40090e:	4b0b      	ldr	r3, [pc, #44]	; (40093c <pmc_enable_periph_clk+0x50>)
  400910:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
			PMC->PMC_PCER0 = 1 << ul_id;
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP || SAMG55 || SAMV71 || SAMV70 || SAME70 || SAMS70)
	} else {
		ul_id -= 32;
  400914:	3820      	subs	r0, #32
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
  400916:	2301      	movs	r3, #1
  400918:	4083      	lsls	r3, r0
  40091a:	401a      	ands	r2, r3
  40091c:	4293      	cmp	r3, r2
  40091e:	d00a      	beq.n	400936 <pmc_enable_periph_clk+0x4a>
			PMC->PMC_PCER1 = 1 << ul_id;
  400920:	2301      	movs	r3, #1
  400922:	4083      	lsls	r3, r0
  400924:	4a05      	ldr	r2, [pc, #20]	; (40093c <pmc_enable_periph_clk+0x50>)
  400926:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
		}
#endif
	}

	return 0;
  40092a:	2000      	movs	r0, #0
  40092c:	4770      	bx	lr
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
		return 1;
  40092e:	2001      	movs	r0, #1
  400930:	4770      	bx	lr
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
  400932:	2000      	movs	r0, #0
  400934:	4770      	bx	lr
  400936:	2000      	movs	r0, #0
}
  400938:	4770      	bx	lr
  40093a:	bf00      	nop
  40093c:	400e0400 	.word	0x400e0400

00400940 <twi_set_speed>:
uint32_t twi_set_speed(Twi *p_twi, uint32_t ul_speed, uint32_t ul_mck)
{
	uint32_t ckdiv = 0;
	uint32_t c_lh_div;

	if (ul_speed > I2C_FAST_MODE_SPEED) {
  400940:	4b0f      	ldr	r3, [pc, #60]	; (400980 <twi_set_speed+0x40>)
  400942:	4299      	cmp	r1, r3
  400944:	d819      	bhi.n	40097a <twi_set_speed+0x3a>
		return FAIL;
	}

	c_lh_div = ul_mck / (ul_speed * TWI_CLK_DIVIDER) - TWI_CLK_CALC_ARGU;
  400946:	0049      	lsls	r1, r1, #1
  400948:	fbb2 f2f1 	udiv	r2, r2, r1
  40094c:	3a04      	subs	r2, #4

	/* cldiv must fit in 8 bits, ckdiv must fit in 3 bits */
	while ((c_lh_div > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
  40094e:	2aff      	cmp	r2, #255	; 0xff
  400950:	d907      	bls.n	400962 <twi_set_speed+0x22>
  400952:	2300      	movs	r3, #0
		/* Increase clock divider */
		ckdiv++;
  400954:	3301      	adds	r3, #1
		/* Divide cldiv value */
		c_lh_div /= TWI_CLK_DIVIDER;
  400956:	0852      	lsrs	r2, r2, #1
	}

	c_lh_div = ul_mck / (ul_speed * TWI_CLK_DIVIDER) - TWI_CLK_CALC_ARGU;

	/* cldiv must fit in 8 bits, ckdiv must fit in 3 bits */
	while ((c_lh_div > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
  400958:	2aff      	cmp	r2, #255	; 0xff
  40095a:	d903      	bls.n	400964 <twi_set_speed+0x24>
  40095c:	2b07      	cmp	r3, #7
  40095e:	d1f9      	bne.n	400954 <twi_set_speed+0x14>
  400960:	e000      	b.n	400964 <twi_set_speed+0x24>
 * \retval PASS New speed setting is accepted.
 * \retval FAIL New speed setting is rejected.
 */
uint32_t twi_set_speed(Twi *p_twi, uint32_t ul_speed, uint32_t ul_mck)
{
	uint32_t ckdiv = 0;
  400962:	2300      	movs	r3, #0
		c_lh_div /= TWI_CLK_DIVIDER;
	}

	/* set clock waveform generator register */
	p_twi->TWI_CWGR =
			TWI_CWGR_CLDIV(c_lh_div) | TWI_CWGR_CHDIV(c_lh_div) |
  400964:	0211      	lsls	r1, r2, #8
  400966:	b289      	uxth	r1, r1
			TWI_CWGR_CKDIV(ckdiv);
  400968:	041b      	lsls	r3, r3, #16
  40096a:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
  40096e:	430b      	orrs	r3, r1
		c_lh_div /= TWI_CLK_DIVIDER;
	}

	/* set clock waveform generator register */
	p_twi->TWI_CWGR =
			TWI_CWGR_CLDIV(c_lh_div) | TWI_CWGR_CHDIV(c_lh_div) |
  400970:	b2d2      	uxtb	r2, r2
  400972:	431a      	orrs	r2, r3
		/* Divide cldiv value */
		c_lh_div /= TWI_CLK_DIVIDER;
	}

	/* set clock waveform generator register */
	p_twi->TWI_CWGR =
  400974:	6102      	str	r2, [r0, #16]
			TWI_CWGR_CLDIV(c_lh_div) | TWI_CWGR_CHDIV(c_lh_div) |
			TWI_CWGR_CKDIV(ckdiv);

	return PASS;
  400976:	2000      	movs	r0, #0
  400978:	4770      	bx	lr
{
	uint32_t ckdiv = 0;
	uint32_t c_lh_div;

	if (ul_speed > I2C_FAST_MODE_SPEED) {
		return FAIL;
  40097a:	2001      	movs	r0, #1
	p_twi->TWI_CWGR =
			TWI_CWGR_CLDIV(c_lh_div) | TWI_CWGR_CHDIV(c_lh_div) |
			TWI_CWGR_CKDIV(ckdiv);

	return PASS;
}
  40097c:	4770      	bx	lr
  40097e:	bf00      	nop
  400980:	00061a80 	.word	0x00061a80

00400984 <twi_master_init>:
 * \param p_opt Options for initializing the TWI module (see \ref twi_options_t).
 *
 * \return TWI_SUCCESS if initialization is complete, error code otherwise.
 */
uint32_t twi_master_init(Twi *p_twi, const twi_options_t *p_opt)
{
  400984:	b538      	push	{r3, r4, r5, lr}
  400986:	4604      	mov	r4, r0
  400988:	460d      	mov	r5, r1
	uint32_t status = TWI_SUCCESS;

	/* Disable TWI interrupts */
	p_twi->TWI_IDR = ~0UL;
  40098a:	f04f 33ff 	mov.w	r3, #4294967295
  40098e:	6283      	str	r3, [r0, #40]	; 0x28

	/* Dummy read in status register */
	p_twi->TWI_SR;
  400990:	6a03      	ldr	r3, [r0, #32]
 * \param p_twi Pointer to a TWI instance.
 */
void twi_reset(Twi *p_twi)
{
	/* Set SWRST bit to reset TWI peripheral */
	p_twi->TWI_CR = TWI_CR_SWRST;
  400992:	2380      	movs	r3, #128	; 0x80
  400994:	6003      	str	r3, [r0, #0]
	p_twi->TWI_RHR;
  400996:	6b03      	ldr	r3, [r0, #48]	; 0x30
 * \param p_twi Pointer to a TWI instance.
 */
void twi_enable_master_mode(Twi *p_twi)
{
	/* Set Master Disable bit and Slave Disable bit */
	p_twi->TWI_CR = TWI_CR_MSDIS;
  400998:	2308      	movs	r3, #8
  40099a:	6003      	str	r3, [r0, #0]
	p_twi->TWI_CR = TWI_CR_SVDIS;
  40099c:	2320      	movs	r3, #32
  40099e:	6003      	str	r3, [r0, #0]

	/* Set Master Enable bit */
	p_twi->TWI_CR = TWI_CR_MSEN;
  4009a0:	2304      	movs	r3, #4
  4009a2:	6003      	str	r3, [r0, #0]
	twi_reset(p_twi);

	twi_enable_master_mode(p_twi);

	/* Select the speed */
	if (twi_set_speed(p_twi, p_opt->speed, p_opt->master_clk) == FAIL) {
  4009a4:	6849      	ldr	r1, [r1, #4]
  4009a6:	682a      	ldr	r2, [r5, #0]
  4009a8:	4b05      	ldr	r3, [pc, #20]	; (4009c0 <twi_master_init+0x3c>)
  4009aa:	4798      	blx	r3
  4009ac:	2801      	cmp	r0, #1
  4009ae:	bf14      	ite	ne
  4009b0:	2000      	movne	r0, #0
  4009b2:	2001      	moveq	r0, #1
		/* The desired speed setting is rejected */
		status = TWI_INVALID_ARGUMENT;
	}

	if (p_opt->smbus == 1) {
  4009b4:	7a6b      	ldrb	r3, [r5, #9]
  4009b6:	2b01      	cmp	r3, #1
		p_twi->TWI_CR = TWI_CR_QUICK;
  4009b8:	bf04      	itt	eq
  4009ba:	2340      	moveq	r3, #64	; 0x40
  4009bc:	6023      	streq	r3, [r4, #0]
	}

	return status;
}
  4009be:	bd38      	pop	{r3, r4, r5, pc}
  4009c0:	00400941 	.word	0x00400941

004009c4 <twi_master_read>:
 * \param p_packet Packet information and data (see \ref twi_packet_t).
 *
 * \return TWI_SUCCESS if all bytes were read, error code otherwise.
 */
uint32_t twi_master_read(Twi *p_twi, twi_packet_t *p_packet)
{
  4009c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint32_t status;
	uint32_t cnt = p_packet->length;
  4009c8:	68ca      	ldr	r2, [r1, #12]
	uint8_t *buffer = p_packet->buffer;
  4009ca:	688d      	ldr	r5, [r1, #8]
	uint8_t stop_sent = 0;
	uint32_t timeout = TWI_TIMEOUT;;
	
	/* Check argument */
	if (cnt == 0) {
  4009cc:	2a00      	cmp	r2, #0
  4009ce:	d048      	beq.n	400a62 <twi_master_read+0x9e>
		return TWI_INVALID_ARGUMENT;
	}

	/* Set read mode, slave address and 3 internal address byte lengths */
	p_twi->TWI_MMR = 0;
  4009d0:	2600      	movs	r6, #0
  4009d2:	6046      	str	r6, [r0, #4]
	p_twi->TWI_MMR = TWI_MMR_MREAD | TWI_MMR_DADR(p_packet->chip) |
			((p_packet->addr_length << TWI_MMR_IADRSZ_Pos) &
  4009d4:	684b      	ldr	r3, [r1, #4]
  4009d6:	021b      	lsls	r3, r3, #8
  4009d8:	f403 7340 	and.w	r3, r3, #768	; 0x300
  4009dc:	f443 5480 	orr.w	r4, r3, #4096	; 0x1000
		return TWI_INVALID_ARGUMENT;
	}

	/* Set read mode, slave address and 3 internal address byte lengths */
	p_twi->TWI_MMR = 0;
	p_twi->TWI_MMR = TWI_MMR_MREAD | TWI_MMR_DADR(p_packet->chip) |
  4009e0:	7c0b      	ldrb	r3, [r1, #16]
  4009e2:	041b      	lsls	r3, r3, #16
  4009e4:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
  4009e8:	4323      	orrs	r3, r4
  4009ea:	6043      	str	r3, [r0, #4]
			((p_packet->addr_length << TWI_MMR_IADRSZ_Pos) &
			TWI_MMR_IADRSZ_Msk);

	/* Set internal address for remote chip */
	p_twi->TWI_IADR = 0;
  4009ec:	60c6      	str	r6, [r0, #12]
	p_twi->TWI_IADR = twi_mk_addr(p_packet->addr, p_packet->addr_length);
  4009ee:	684c      	ldr	r4, [r1, #4]
 */
static uint32_t twi_mk_addr(const uint8_t *addr, int len)
{
	uint32_t val;

	if (len == 0)
  4009f0:	b15c      	cbz	r4, 400a0a <twi_master_read+0x46>
		return 0;

	val = addr[0];
  4009f2:	780b      	ldrb	r3, [r1, #0]
	if (len > 1) {
  4009f4:	2c01      	cmp	r4, #1
		val <<= 8;
		val |= addr[1];
  4009f6:	bfc4      	itt	gt
  4009f8:	784e      	ldrbgt	r6, [r1, #1]
  4009fa:	ea46 2303 	orrgt.w	r3, r6, r3, lsl #8
	}
	if (len > 2) {
  4009fe:	2c02      	cmp	r4, #2
  400a00:	dd04      	ble.n	400a0c <twi_master_read+0x48>
		val <<= 8;
		val |= addr[2];
  400a02:	7889      	ldrb	r1, [r1, #2]
  400a04:	ea41 2303 	orr.w	r3, r1, r3, lsl #8
  400a08:	e000      	b.n	400a0c <twi_master_read+0x48>
static uint32_t twi_mk_addr(const uint8_t *addr, int len)
{
	uint32_t val;

	if (len == 0)
		return 0;
  400a0a:	2300      	movs	r3, #0
			((p_packet->addr_length << TWI_MMR_IADRSZ_Pos) &
			TWI_MMR_IADRSZ_Msk);

	/* Set internal address for remote chip */
	p_twi->TWI_IADR = 0;
	p_twi->TWI_IADR = twi_mk_addr(p_packet->addr, p_packet->addr_length);
  400a0c:	60c3      	str	r3, [r0, #12]

	/* Send a START condition */
	if (cnt == 1) {
  400a0e:	2a01      	cmp	r2, #1
  400a10:	d103      	bne.n	400a1a <twi_master_read+0x56>
		p_twi->TWI_CR = TWI_CR_START | TWI_CR_STOP;
  400a12:	2303      	movs	r3, #3
  400a14:	6003      	str	r3, [r0, #0]
		stop_sent = 1;
  400a16:	2701      	movs	r7, #1
  400a18:	e02f      	b.n	400a7a <twi_master_read+0xb6>
	} else {
		p_twi->TWI_CR = TWI_CR_START;
  400a1a:	2301      	movs	r3, #1
  400a1c:	6003      	str	r3, [r0, #0]
		stop_sent = 0;
  400a1e:	2700      	movs	r7, #0
  400a20:	e02b      	b.n	400a7a <twi_master_read+0xb6>
		if (cnt == 1  && !stop_sent) {
			p_twi->TWI_CR = TWI_CR_STOP;
			stop_sent = 1;
		}

		if (!(status & TWI_SR_RXRDY)) {
  400a22:	4621      	mov	r1, r4
		p_twi->TWI_CR = TWI_CR_START;
		stop_sent = 0;
	}

	while (cnt > 0) {
		status = p_twi->TWI_SR;
  400a24:	6a03      	ldr	r3, [r0, #32]
		if (status & TWI_SR_NACK) {
  400a26:	f413 7f80 	tst.w	r3, #256	; 0x100
  400a2a:	d11d      	bne.n	400a68 <twi_master_read+0xa4>
			return TWI_RECEIVE_NACK;
		}

		if (!timeout--) {
  400a2c:	1e4c      	subs	r4, r1, #1
  400a2e:	b1f1      	cbz	r1, 400a6e <twi_master_read+0xaa>
			return TWI_ERROR_TIMEOUT;
		}
				
		/* Last byte ? */
		if (cnt == 1  && !stop_sent) {
  400a30:	2a01      	cmp	r2, #1
  400a32:	d104      	bne.n	400a3e <twi_master_read+0x7a>
  400a34:	bb77      	cbnz	r7, 400a94 <twi_master_read+0xd0>
			p_twi->TWI_CR = TWI_CR_STOP;
  400a36:	f8c0 8000 	str.w	r8, [r0]
			stop_sent = 1;
  400a3a:	4667      	mov	r7, ip
  400a3c:	e02a      	b.n	400a94 <twi_master_read+0xd0>
		}

		if (!(status & TWI_SR_RXRDY)) {
  400a3e:	f013 0f02 	tst.w	r3, #2
  400a42:	d005      	beq.n	400a50 <twi_master_read+0x8c>
			continue;
		}
		*buffer++ = p_twi->TWI_RHR;
  400a44:	6b03      	ldr	r3, [r0, #48]	; 0x30
  400a46:	702b      	strb	r3, [r5, #0]

		cnt--;
  400a48:	3a01      	subs	r2, #1
		}

		if (!(status & TWI_SR_RXRDY)) {
			continue;
		}
		*buffer++ = p_twi->TWI_RHR;
  400a4a:	3501      	adds	r5, #1

		cnt--;
		timeout = TWI_TIMEOUT;
  400a4c:	4631      	mov	r1, r6
  400a4e:	e000      	b.n	400a52 <twi_master_read+0x8e>
  400a50:	4621      	mov	r1, r4
	} else {
		p_twi->TWI_CR = TWI_CR_START;
		stop_sent = 0;
	}

	while (cnt > 0) {
  400a52:	2a00      	cmp	r2, #0
  400a54:	d1e6      	bne.n	400a24 <twi_master_read+0x60>

		cnt--;
		timeout = TWI_TIMEOUT;
	}

	while (!(p_twi->TWI_SR & TWI_SR_TXCOMP)) {
  400a56:	6a03      	ldr	r3, [r0, #32]
  400a58:	f013 0f01 	tst.w	r3, #1
  400a5c:	d0fb      	beq.n	400a56 <twi_master_read+0x92>
	}

	p_twi->TWI_SR;
  400a5e:	6a03      	ldr	r3, [r0, #32]

	return TWI_SUCCESS;
  400a60:	e01c      	b.n	400a9c <twi_master_read+0xd8>
	uint8_t stop_sent = 0;
	uint32_t timeout = TWI_TIMEOUT;;
	
	/* Check argument */
	if (cnt == 0) {
		return TWI_INVALID_ARGUMENT;
  400a62:	f04f 0e01 	mov.w	lr, #1
  400a66:	e019      	b.n	400a9c <twi_master_read+0xd8>
	}

	while (cnt > 0) {
		status = p_twi->TWI_SR;
		if (status & TWI_SR_NACK) {
			return TWI_RECEIVE_NACK;
  400a68:	f04f 0e05 	mov.w	lr, #5
  400a6c:	e016      	b.n	400a9c <twi_master_read+0xd8>
		}

		if (!timeout--) {
			return TWI_ERROR_TIMEOUT;
  400a6e:	f04f 0e09 	mov.w	lr, #9
  400a72:	e013      	b.n	400a9c <twi_master_read+0xd8>
	}

	while (cnt > 0) {
		status = p_twi->TWI_SR;
		if (status & TWI_SR_NACK) {
			return TWI_RECEIVE_NACK;
  400a74:	f04f 0e05 	mov.w	lr, #5
  400a78:	e010      	b.n	400a9c <twi_master_read+0xd8>
		p_twi->TWI_CR = TWI_CR_START;
		stop_sent = 0;
	}

	while (cnt > 0) {
		status = p_twi->TWI_SR;
  400a7a:	6a03      	ldr	r3, [r0, #32]
		if (status & TWI_SR_NACK) {
  400a7c:	f413 7e80 	ands.w	lr, r3, #256	; 0x100
  400a80:	d1f8      	bne.n	400a74 <twi_master_read+0xb0>
  400a82:	f643 2497 	movw	r4, #14999	; 0x3a97
			continue;
		}
		*buffer++ = p_twi->TWI_RHR;

		cnt--;
		timeout = TWI_TIMEOUT;
  400a86:	f643 2698 	movw	r6, #15000	; 0x3a98
			return TWI_ERROR_TIMEOUT;
		}
				
		/* Last byte ? */
		if (cnt == 1  && !stop_sent) {
			p_twi->TWI_CR = TWI_CR_STOP;
  400a8a:	f04f 0802 	mov.w	r8, #2
			stop_sent = 1;
  400a8e:	f04f 0c01 	mov.w	ip, #1
  400a92:	e7cd      	b.n	400a30 <twi_master_read+0x6c>
		}

		if (!(status & TWI_SR_RXRDY)) {
  400a94:	f013 0f02 	tst.w	r3, #2
  400a98:	d0c3      	beq.n	400a22 <twi_master_read+0x5e>
  400a9a:	e7d3      	b.n	400a44 <twi_master_read+0x80>
	}

	p_twi->TWI_SR;

	return TWI_SUCCESS;
}
  400a9c:	4670      	mov	r0, lr
  400a9e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  400aa2:	bf00      	nop

00400aa4 <twi_master_write>:
 * \param p_packet Packet information and data (see \ref twi_packet_t).
 *
 * \return TWI_SUCCESS if all bytes were written, error code otherwise.
 */
uint32_t twi_master_write(Twi *p_twi, twi_packet_t *p_packet)
{
  400aa4:	4603      	mov	r3, r0
	uint32_t status;
	uint32_t cnt = p_packet->length;
  400aa6:	68ca      	ldr	r2, [r1, #12]
	uint8_t *buffer = p_packet->buffer;
  400aa8:	6888      	ldr	r0, [r1, #8]

	/* Check argument */
	if (cnt == 0) {
  400aaa:	2a00      	cmp	r2, #0
  400aac:	d040      	beq.n	400b30 <twi_master_write+0x8c>
 * \param p_packet Packet information and data (see \ref twi_packet_t).
 *
 * \return TWI_SUCCESS if all bytes were written, error code otherwise.
 */
uint32_t twi_master_write(Twi *p_twi, twi_packet_t *p_packet)
{
  400aae:	b470      	push	{r4, r5, r6}
	if (cnt == 0) {
		return TWI_INVALID_ARGUMENT;
	}

	/* Set write mode, slave address and 3 internal address byte lengths */
	p_twi->TWI_MMR = 0;
  400ab0:	2600      	movs	r6, #0
  400ab2:	605e      	str	r6, [r3, #4]
	p_twi->TWI_MMR = TWI_MMR_DADR(p_packet->chip) |
  400ab4:	7c0c      	ldrb	r4, [r1, #16]
  400ab6:	0424      	lsls	r4, r4, #16
  400ab8:	f404 05fe 	and.w	r5, r4, #8323072	; 0x7f0000
			((p_packet->addr_length << TWI_MMR_IADRSZ_Pos) &
  400abc:	684c      	ldr	r4, [r1, #4]
  400abe:	0224      	lsls	r4, r4, #8
  400ac0:	f404 7440 	and.w	r4, r4, #768	; 0x300
		return TWI_INVALID_ARGUMENT;
	}

	/* Set write mode, slave address and 3 internal address byte lengths */
	p_twi->TWI_MMR = 0;
	p_twi->TWI_MMR = TWI_MMR_DADR(p_packet->chip) |
  400ac4:	432c      	orrs	r4, r5
  400ac6:	605c      	str	r4, [r3, #4]
			((p_packet->addr_length << TWI_MMR_IADRSZ_Pos) &
			TWI_MMR_IADRSZ_Msk);

	/* Set internal address for remote chip */
	p_twi->TWI_IADR = 0;
  400ac8:	60de      	str	r6, [r3, #12]
	p_twi->TWI_IADR = twi_mk_addr(p_packet->addr, p_packet->addr_length);
  400aca:	684d      	ldr	r5, [r1, #4]
 */
static uint32_t twi_mk_addr(const uint8_t *addr, int len)
{
	uint32_t val;

	if (len == 0)
  400acc:	b15d      	cbz	r5, 400ae6 <twi_master_write+0x42>
		return 0;

	val = addr[0];
  400ace:	780c      	ldrb	r4, [r1, #0]
	if (len > 1) {
  400ad0:	2d01      	cmp	r5, #1
		val <<= 8;
		val |= addr[1];
  400ad2:	bfc4      	itt	gt
  400ad4:	784e      	ldrbgt	r6, [r1, #1]
  400ad6:	ea46 2404 	orrgt.w	r4, r6, r4, lsl #8
	}
	if (len > 2) {
  400ada:	2d02      	cmp	r5, #2
  400adc:	dd04      	ble.n	400ae8 <twi_master_write+0x44>
		val <<= 8;
		val |= addr[2];
  400ade:	7889      	ldrb	r1, [r1, #2]
  400ae0:	ea41 2404 	orr.w	r4, r1, r4, lsl #8
  400ae4:	e000      	b.n	400ae8 <twi_master_write+0x44>
static uint32_t twi_mk_addr(const uint8_t *addr, int len)
{
	uint32_t val;

	if (len == 0)
		return 0;
  400ae6:	2400      	movs	r4, #0
			((p_packet->addr_length << TWI_MMR_IADRSZ_Pos) &
			TWI_MMR_IADRSZ_Msk);

	/* Set internal address for remote chip */
	p_twi->TWI_IADR = 0;
	p_twi->TWI_IADR = twi_mk_addr(p_packet->addr, p_packet->addr_length);
  400ae8:	60dc      	str	r4, [r3, #12]
  400aea:	e00b      	b.n	400b04 <twi_master_write+0x60>

	/* Send all bytes */
	while (cnt > 0) {
		status = p_twi->TWI_SR;
  400aec:	6a19      	ldr	r1, [r3, #32]
		if (status & TWI_SR_NACK) {
  400aee:	f411 7f80 	tst.w	r1, #256	; 0x100
  400af2:	d11f      	bne.n	400b34 <twi_master_write+0x90>
			return TWI_RECEIVE_NACK;
		}

		if (!(status & TWI_SR_TXRDY)) {
  400af4:	f011 0f04 	tst.w	r1, #4
  400af8:	d0f8      	beq.n	400aec <twi_master_write+0x48>
			continue;
		}
		p_twi->TWI_THR = *buffer++;
  400afa:	f810 1b01 	ldrb.w	r1, [r0], #1
  400afe:	6359      	str	r1, [r3, #52]	; 0x34
	/* Set internal address for remote chip */
	p_twi->TWI_IADR = 0;
	p_twi->TWI_IADR = twi_mk_addr(p_packet->addr, p_packet->addr_length);

	/* Send all bytes */
	while (cnt > 0) {
  400b00:	3a01      	subs	r2, #1
  400b02:	d007      	beq.n	400b14 <twi_master_write+0x70>
		status = p_twi->TWI_SR;
  400b04:	6a19      	ldr	r1, [r3, #32]
		if (status & TWI_SR_NACK) {
  400b06:	f411 7f80 	tst.w	r1, #256	; 0x100
  400b0a:	d115      	bne.n	400b38 <twi_master_write+0x94>
			return TWI_RECEIVE_NACK;
		}

		if (!(status & TWI_SR_TXRDY)) {
  400b0c:	f011 0f04 	tst.w	r1, #4
  400b10:	d0ec      	beq.n	400aec <twi_master_write+0x48>
  400b12:	e7f2      	b.n	400afa <twi_master_write+0x56>

		cnt--;
	}

	while (1) {
		status = p_twi->TWI_SR;
  400b14:	6a1a      	ldr	r2, [r3, #32]
		if (status & TWI_SR_NACK) {
  400b16:	f412 7080 	ands.w	r0, r2, #256	; 0x100
  400b1a:	d10f      	bne.n	400b3c <twi_master_write+0x98>
			return TWI_RECEIVE_NACK;
		}

		if (status & TWI_SR_TXRDY) {
  400b1c:	f012 0f04 	tst.w	r2, #4
  400b20:	d0f8      	beq.n	400b14 <twi_master_write+0x70>
			break;
		}
	}

	p_twi->TWI_CR = TWI_CR_STOP;
  400b22:	2202      	movs	r2, #2
  400b24:	601a      	str	r2, [r3, #0]

	while (!(p_twi->TWI_SR & TWI_SR_TXCOMP)) {
  400b26:	6a1a      	ldr	r2, [r3, #32]
  400b28:	f012 0f01 	tst.w	r2, #1
  400b2c:	d0fb      	beq.n	400b26 <twi_master_write+0x82>
  400b2e:	e006      	b.n	400b3e <twi_master_write+0x9a>
	uint32_t cnt = p_packet->length;
	uint8_t *buffer = p_packet->buffer;

	/* Check argument */
	if (cnt == 0) {
		return TWI_INVALID_ARGUMENT;
  400b30:	2001      	movs	r0, #1

	while (!(p_twi->TWI_SR & TWI_SR_TXCOMP)) {
	}

	return TWI_SUCCESS;
}
  400b32:	4770      	bx	lr

	/* Send all bytes */
	while (cnt > 0) {
		status = p_twi->TWI_SR;
		if (status & TWI_SR_NACK) {
			return TWI_RECEIVE_NACK;
  400b34:	2005      	movs	r0, #5
  400b36:	e002      	b.n	400b3e <twi_master_write+0x9a>
  400b38:	2005      	movs	r0, #5
  400b3a:	e000      	b.n	400b3e <twi_master_write+0x9a>
	}

	while (1) {
		status = p_twi->TWI_SR;
		if (status & TWI_SR_NACK) {
			return TWI_RECEIVE_NACK;
  400b3c:	2005      	movs	r0, #5

	while (!(p_twi->TWI_SR & TWI_SR_TXCOMP)) {
	}

	return TWI_SUCCESS;
}
  400b3e:	bc70      	pop	{r4, r5, r6}
  400b40:	4770      	bx	lr
  400b42:	bf00      	nop

00400b44 <twi_probe>:
 * \param uc_slave_addr Address of the remote chip to search for.
 *
 * \return TWI_SUCCESS if a chip was found, error code otherwise.
 */
uint32_t twi_probe(Twi *p_twi, uint8_t uc_slave_addr)
{
  400b44:	b500      	push	{lr}
  400b46:	b087      	sub	sp, #28
	twi_packet_t packet;
	uint8_t data = 0;
  400b48:	2300      	movs	r3, #0
  400b4a:	aa06      	add	r2, sp, #24
  400b4c:	f802 3d15 	strb.w	r3, [r2, #-21]!

	/* Data to send */
	packet.buffer = &data;
  400b50:	9203      	str	r2, [sp, #12]
	/* Data length */
	packet.length = 1;
  400b52:	2201      	movs	r2, #1
  400b54:	9204      	str	r2, [sp, #16]
	/* Slave chip address */
	packet.chip = (uint32_t) uc_slave_addr;
  400b56:	f88d 1014 	strb.w	r1, [sp, #20]
	/* Internal chip address */
	packet.addr[0] = 0;
  400b5a:	f88d 3004 	strb.w	r3, [sp, #4]
	/* Address length */
	packet.addr_length = 0;
  400b5e:	9302      	str	r3, [sp, #8]

	/* Perform a master write access */
	return (twi_master_write(p_twi, &packet));
  400b60:	a901      	add	r1, sp, #4
  400b62:	4b02      	ldr	r3, [pc, #8]	; (400b6c <twi_probe+0x28>)
  400b64:	4798      	blx	r3
}
  400b66:	b007      	add	sp, #28
  400b68:	f85d fb04 	ldr.w	pc, [sp], #4
  400b6c:	00400aa5 	.word	0x00400aa5

00400b70 <uart_init>:
 *
 * \retval 0 Success.
 * \retval 1 Bad baud rate generator value.
 */
uint32_t uart_init(Uart *p_uart, const sam_uart_opt_t *p_uart_opt)
{
  400b70:	b410      	push	{r4}
	uint32_t cd = 0;

	/* Reset and disable receiver & transmitter */
	p_uart->UART_CR = UART_CR_RSTRX | UART_CR_RSTTX
  400b72:	23ac      	movs	r3, #172	; 0xac
  400b74:	6003      	str	r3, [r0, #0]
			| UART_CR_RXDIS | UART_CR_TXDIS;

	/* Check and configure baudrate */
	/* Asynchronous, no oversampling */
	cd = (p_uart_opt->ul_mck / p_uart_opt->ul_baudrate) / UART_MCK_DIV;
  400b76:	680b      	ldr	r3, [r1, #0]
  400b78:	684a      	ldr	r2, [r1, #4]
  400b7a:	fbb3 f3f2 	udiv	r3, r3, r2
  400b7e:	091b      	lsrs	r3, r3, #4
	if (cd < UART_MCK_DIV_MIN_FACTOR || cd > UART_MCK_DIV_MAX_FACTOR)
  400b80:	1e5c      	subs	r4, r3, #1
  400b82:	f64f 72fe 	movw	r2, #65534	; 0xfffe
  400b86:	4294      	cmp	r4, r2
  400b88:	d80a      	bhi.n	400ba0 <uart_init+0x30>
		return 1;

	p_uart->UART_BRGR = cd;
  400b8a:	6203      	str	r3, [r0, #32]
	/* Configure mode */
	p_uart->UART_MR = p_uart_opt->ul_mode;
  400b8c:	688b      	ldr	r3, [r1, #8]
  400b8e:	6043      	str	r3, [r0, #4]

#if (!SAMV71 && !SAMV70 && !SAME70 && !SAMS70)
	/* Disable PDC channel */
	p_uart->UART_PTCR = UART_PTCR_RXTDIS | UART_PTCR_TXTDIS;
  400b90:	f240 2302 	movw	r3, #514	; 0x202
  400b94:	f8c0 3120 	str.w	r3, [r0, #288]	; 0x120
#endif

	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;
  400b98:	2350      	movs	r3, #80	; 0x50
  400b9a:	6003      	str	r3, [r0, #0]

	return 0;
  400b9c:	2000      	movs	r0, #0
  400b9e:	e000      	b.n	400ba2 <uart_init+0x32>

	/* Check and configure baudrate */
	/* Asynchronous, no oversampling */
	cd = (p_uart_opt->ul_mck / p_uart_opt->ul_baudrate) / UART_MCK_DIV;
	if (cd < UART_MCK_DIV_MIN_FACTOR || cd > UART_MCK_DIV_MAX_FACTOR)
		return 1;
  400ba0:	2001      	movs	r0, #1

	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;

	return 0;
}
  400ba2:	f85d 4b04 	ldr.w	r4, [sp], #4
  400ba6:	4770      	bx	lr

00400ba8 <uart_write>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
  400ba8:	6943      	ldr	r3, [r0, #20]
  400baa:	f013 0f02 	tst.w	r3, #2
		return 1;

	/* Send character */
	p_uart->UART_THR = uc_data;
  400bae:	bf1a      	itte	ne
  400bb0:	61c1      	strne	r1, [r0, #28]
	return 0;
  400bb2:	2000      	movne	r0, #0
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
		return 1;
  400bb4:	2001      	moveq	r0, #1

	/* Send character */
	p_uart->UART_THR = uc_data;
	return 0;
}
  400bb6:	4770      	bx	lr

00400bb8 <uart_read>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
  400bb8:	6943      	ldr	r3, [r0, #20]
  400bba:	f013 0f01 	tst.w	r3, #1
		return 1;

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
  400bbe:	bf1d      	ittte	ne
  400bc0:	6983      	ldrne	r3, [r0, #24]
  400bc2:	700b      	strbne	r3, [r1, #0]
	return 0;
  400bc4:	2000      	movne	r0, #0
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
		return 1;
  400bc6:	2001      	moveq	r0, #1

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
	return 0;
}
  400bc8:	4770      	bx	lr
  400bca:	bf00      	nop

00400bcc <usart_write>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
  400bcc:	6943      	ldr	r3, [r0, #20]
  400bce:	f013 0f02 	tst.w	r3, #2
		return 1;
	}

	p_usart->US_THR = US_THR_TXCHR(c);
  400bd2:	bf1d      	ittte	ne
  400bd4:	f3c1 0108 	ubfxne	r1, r1, #0, #9
  400bd8:	61c1      	strne	r1, [r0, #28]
	return 0;
  400bda:	2000      	movne	r0, #0
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
		return 1;
  400bdc:	2001      	moveq	r0, #1
	}

	p_usart->US_THR = US_THR_TXCHR(c);
	return 0;
}
  400bde:	4770      	bx	lr

00400be0 <usart_read>:
 * \retval 0 on success.
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
  400be0:	6943      	ldr	r3, [r0, #20]
  400be2:	f013 0f01 	tst.w	r3, #1
  400be6:	d005      	beq.n	400bf4 <usart_read+0x14>
		return 1;
	}

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
  400be8:	6983      	ldr	r3, [r0, #24]
  400bea:	f3c3 0308 	ubfx	r3, r3, #0, #9
  400bee:	600b      	str	r3, [r1, #0]

	return 0;
  400bf0:	2000      	movs	r0, #0
  400bf2:	4770      	bx	lr
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
		return 1;
  400bf4:	2001      	movs	r0, #1

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;

	return 0;
}
  400bf6:	4770      	bx	lr

00400bf8 <wdt_disable>:
/**
 * \brief Disable the watchdog timer.
 */
void wdt_disable(Wdt *p_wdt)
{
	p_wdt->WDT_MR = WDT_MR_WDDIS;
  400bf8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  400bfc:	6043      	str	r3, [r0, #4]
  400bfe:	4770      	bx	lr

00400c00 <Dummy_Handler>:
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
	while (1) {
	}
  400c00:	e7fe      	b.n	400c00 <Dummy_Handler>
  400c02:	bf00      	nop

00400c04 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
  400c04:	b508      	push	{r3, lr}

	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc > pDest) {
  400c06:	4b20      	ldr	r3, [pc, #128]	; (400c88 <Reset_Handler+0x84>)
  400c08:	4a20      	ldr	r2, [pc, #128]	; (400c8c <Reset_Handler+0x88>)
  400c0a:	429a      	cmp	r2, r3
  400c0c:	d913      	bls.n	400c36 <Reset_Handler+0x32>
		for (; pDest < &_erelocate;) {
  400c0e:	4b20      	ldr	r3, [pc, #128]	; (400c90 <Reset_Handler+0x8c>)
  400c10:	4a1d      	ldr	r2, [pc, #116]	; (400c88 <Reset_Handler+0x84>)
  400c12:	429a      	cmp	r2, r3
  400c14:	d21f      	bcs.n	400c56 <Reset_Handler+0x52>
  400c16:	4611      	mov	r1, r2
  400c18:	3204      	adds	r2, #4
  400c1a:	3303      	adds	r3, #3
  400c1c:	1a9b      	subs	r3, r3, r2
  400c1e:	f023 0303 	bic.w	r3, r3, #3
  400c22:	3304      	adds	r3, #4
  400c24:	4a19      	ldr	r2, [pc, #100]	; (400c8c <Reset_Handler+0x88>)
  400c26:	4413      	add	r3, r2
			*pDest++ = *pSrc++;
  400c28:	f852 0b04 	ldr.w	r0, [r2], #4
  400c2c:	f841 0b04 	str.w	r0, [r1], #4
	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc > pDest) {
		for (; pDest < &_erelocate;) {
  400c30:	429a      	cmp	r2, r3
  400c32:	d1f9      	bne.n	400c28 <Reset_Handler+0x24>
  400c34:	e00f      	b.n	400c56 <Reset_Handler+0x52>
			*pDest++ = *pSrc++;
		}
	} else if (pSrc < pDest) {
  400c36:	4b14      	ldr	r3, [pc, #80]	; (400c88 <Reset_Handler+0x84>)
  400c38:	4a14      	ldr	r2, [pc, #80]	; (400c8c <Reset_Handler+0x88>)
  400c3a:	429a      	cmp	r2, r3
  400c3c:	d20b      	bcs.n	400c56 <Reset_Handler+0x52>
		uint32_t nb_bytes = (uint32_t)&_erelocate - (uint32_t)&_srelocate;
  400c3e:	4b14      	ldr	r3, [pc, #80]	; (400c90 <Reset_Handler+0x8c>)
  400c40:	4a11      	ldr	r2, [pc, #68]	; (400c88 <Reset_Handler+0x84>)
  400c42:	1a9a      	subs	r2, r3, r2
  400c44:	4813      	ldr	r0, [pc, #76]	; (400c94 <Reset_Handler+0x90>)
		pSrc = (uint32_t*)((uint32_t)pSrc + nb_bytes) - 1;
  400c46:	1881      	adds	r1, r0, r2
		pDest = (uint32_t*)((uint32_t)pDest + nb_bytes) - 1;
		for (;nb_bytes;nb_bytes -= 4) {
  400c48:	b12a      	cbz	r2, 400c56 <Reset_Handler+0x52>
			*pDest-- = *pSrc--;
  400c4a:	f851 2904 	ldr.w	r2, [r1], #-4
  400c4e:	f843 2d04 	str.w	r2, [r3, #-4]!
		}
	} else if (pSrc < pDest) {
		uint32_t nb_bytes = (uint32_t)&_erelocate - (uint32_t)&_srelocate;
		pSrc = (uint32_t*)((uint32_t)pSrc + nb_bytes) - 1;
		pDest = (uint32_t*)((uint32_t)pDest + nb_bytes) - 1;
		for (;nb_bytes;nb_bytes -= 4) {
  400c52:	4281      	cmp	r1, r0
  400c54:	d1f9      	bne.n	400c4a <Reset_Handler+0x46>

    No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
  400c56:	bf00      	nop
		}
	}
	__NOP();

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
  400c58:	4b0f      	ldr	r3, [pc, #60]	; (400c98 <Reset_Handler+0x94>)
  400c5a:	4a10      	ldr	r2, [pc, #64]	; (400c9c <Reset_Handler+0x98>)
  400c5c:	429a      	cmp	r2, r3
  400c5e:	d20b      	bcs.n	400c78 <Reset_Handler+0x74>
  400c60:	1d13      	adds	r3, r2, #4
  400c62:	4a0f      	ldr	r2, [pc, #60]	; (400ca0 <Reset_Handler+0x9c>)
  400c64:	1ad2      	subs	r2, r2, r3
  400c66:	f022 0203 	bic.w	r2, r2, #3
  400c6a:	441a      	add	r2, r3
  400c6c:	3b04      	subs	r3, #4
		*pDest++ = 0;
  400c6e:	2100      	movs	r1, #0
  400c70:	f843 1b04 	str.w	r1, [r3], #4
		}
	}
	__NOP();

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
  400c74:	4293      	cmp	r3, r2
  400c76:	d1fb      	bne.n	400c70 <Reset_Handler+0x6c>
		*pDest++ = 0;
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) & _sfixed;
	SCB->VTOR = ((uint32_t) pSrc);
  400c78:	4b0a      	ldr	r3, [pc, #40]	; (400ca4 <Reset_Handler+0xa0>)
  400c7a:	4a0b      	ldr	r2, [pc, #44]	; (400ca8 <Reset_Handler+0xa4>)
  400c7c:	609a      	str	r2, [r3, #8]

	/* Initialize the C library */
	__libc_init_array();
  400c7e:	4b0b      	ldr	r3, [pc, #44]	; (400cac <Reset_Handler+0xa8>)
  400c80:	4798      	blx	r3

	/* Branch to main function */
	main();
  400c82:	4b0b      	ldr	r3, [pc, #44]	; (400cb0 <Reset_Handler+0xac>)
  400c84:	4798      	blx	r3

	/* Infinite loop */
	while (1);
  400c86:	e7fe      	b.n	400c86 <Reset_Handler+0x82>
  400c88:	20000000 	.word	0x20000000
  400c8c:	00404818 	.word	0x00404818
  400c90:	20000884 	.word	0x20000884
  400c94:	00404814 	.word	0x00404814
  400c98:	2001357c 	.word	0x2001357c
  400c9c:	20000884 	.word	0x20000884
  400ca0:	2001357f 	.word	0x2001357f
  400ca4:	e000ed00 	.word	0xe000ed00
  400ca8:	00400000 	.word	0x00400000
  400cac:	00401569 	.word	0x00401569
  400cb0:	00401181 	.word	0x00401181

00400cb4 <SystemCoreClockUpdate>:
 * \brief Get Core Clock Frequency.
 */
void SystemCoreClockUpdate( void )
{
	/* Determine clock frequency according to clock register values */
	switch ( PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk ) {
  400cb4:	4b3d      	ldr	r3, [pc, #244]	; (400dac <SystemCoreClockUpdate+0xf8>)
  400cb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  400cb8:	f003 0303 	and.w	r3, r3, #3
  400cbc:	2b03      	cmp	r3, #3
  400cbe:	d85d      	bhi.n	400d7c <SystemCoreClockUpdate+0xc8>
  400cc0:	e8df f003 	tbb	[pc, r3]
  400cc4:	2b2b0e02 	.word	0x2b2b0e02
	case PMC_MCKR_CSS_SLOW_CLK: /* Slow clock */
			if ( SUPC->SUPC_SR & SUPC_SR_OSCSEL ) {
  400cc8:	4b39      	ldr	r3, [pc, #228]	; (400db0 <SystemCoreClockUpdate+0xfc>)
  400cca:	695b      	ldr	r3, [r3, #20]
  400ccc:	f013 0f80 	tst.w	r3, #128	; 0x80
				SystemCoreClock = CHIP_FREQ_XTAL_32K;
  400cd0:	bf14      	ite	ne
  400cd2:	f44f 4200 	movne.w	r2, #32768	; 0x8000
			} else {
				SystemCoreClock = CHIP_FREQ_SLCK_RC;
  400cd6:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
  400cda:	4b36      	ldr	r3, [pc, #216]	; (400db4 <SystemCoreClockUpdate+0x100>)
  400cdc:	601a      	str	r2, [r3, #0]
  400cde:	e04d      	b.n	400d7c <SystemCoreClockUpdate+0xc8>
			}
		break;
		
	case PMC_MCKR_CSS_MAIN_CLK: /* Main clock */
		if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL ) {
  400ce0:	4b32      	ldr	r3, [pc, #200]	; (400dac <SystemCoreClockUpdate+0xf8>)
  400ce2:	6a1b      	ldr	r3, [r3, #32]
  400ce4:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  400ce8:	d003      	beq.n	400cf2 <SystemCoreClockUpdate+0x3e>
			SystemCoreClock = CHIP_FREQ_XTAL;
  400cea:	4a33      	ldr	r2, [pc, #204]	; (400db8 <SystemCoreClockUpdate+0x104>)
  400cec:	4b31      	ldr	r3, [pc, #196]	; (400db4 <SystemCoreClockUpdate+0x100>)
  400cee:	601a      	str	r2, [r3, #0]
  400cf0:	e044      	b.n	400d7c <SystemCoreClockUpdate+0xc8>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  400cf2:	4a32      	ldr	r2, [pc, #200]	; (400dbc <SystemCoreClockUpdate+0x108>)
  400cf4:	4b2f      	ldr	r3, [pc, #188]	; (400db4 <SystemCoreClockUpdate+0x100>)
  400cf6:	601a      	str	r2, [r3, #0]
			
			switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk ) {
  400cf8:	4b2c      	ldr	r3, [pc, #176]	; (400dac <SystemCoreClockUpdate+0xf8>)
  400cfa:	6a1b      	ldr	r3, [r3, #32]
  400cfc:	f003 0370 	and.w	r3, r3, #112	; 0x70
  400d00:	2b10      	cmp	r3, #16
  400d02:	d002      	beq.n	400d0a <SystemCoreClockUpdate+0x56>
  400d04:	2b20      	cmp	r3, #32
  400d06:	d004      	beq.n	400d12 <SystemCoreClockUpdate+0x5e>
  400d08:	e038      	b.n	400d7c <SystemCoreClockUpdate+0xc8>
			case CKGR_MOR_MOSCRCF_4_MHz:
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
			break;
			
			case CKGR_MOR_MOSCRCF_8_MHz:
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_8MHZ;
  400d0a:	4a2d      	ldr	r2, [pc, #180]	; (400dc0 <SystemCoreClockUpdate+0x10c>)
  400d0c:	4b29      	ldr	r3, [pc, #164]	; (400db4 <SystemCoreClockUpdate+0x100>)
  400d0e:	601a      	str	r2, [r3, #0]
			break;
  400d10:	e034      	b.n	400d7c <SystemCoreClockUpdate+0xc8>
			
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_12MHZ;
  400d12:	4a29      	ldr	r2, [pc, #164]	; (400db8 <SystemCoreClockUpdate+0x104>)
  400d14:	4b27      	ldr	r3, [pc, #156]	; (400db4 <SystemCoreClockUpdate+0x100>)
  400d16:	601a      	str	r2, [r3, #0]
			break;
  400d18:	e030      	b.n	400d7c <SystemCoreClockUpdate+0xc8>
		}
		break;
		
	case PMC_MCKR_CSS_PLLA_CLK:	/* PLLA clock */
	case PMC_MCKR_CSS_PLLB_CLK:	/* PLLB clock */
			if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL ) {
  400d1a:	4b24      	ldr	r3, [pc, #144]	; (400dac <SystemCoreClockUpdate+0xf8>)
  400d1c:	6a1b      	ldr	r3, [r3, #32]
  400d1e:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  400d22:	d003      	beq.n	400d2c <SystemCoreClockUpdate+0x78>
				SystemCoreClock = CHIP_FREQ_XTAL;
  400d24:	4a24      	ldr	r2, [pc, #144]	; (400db8 <SystemCoreClockUpdate+0x104>)
  400d26:	4b23      	ldr	r3, [pc, #140]	; (400db4 <SystemCoreClockUpdate+0x100>)
  400d28:	601a      	str	r2, [r3, #0]
  400d2a:	e012      	b.n	400d52 <SystemCoreClockUpdate+0x9e>
			} else {
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  400d2c:	4a23      	ldr	r2, [pc, #140]	; (400dbc <SystemCoreClockUpdate+0x108>)
  400d2e:	4b21      	ldr	r3, [pc, #132]	; (400db4 <SystemCoreClockUpdate+0x100>)
  400d30:	601a      	str	r2, [r3, #0]
				
				switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk ) {
  400d32:	4b1e      	ldr	r3, [pc, #120]	; (400dac <SystemCoreClockUpdate+0xf8>)
  400d34:	6a1b      	ldr	r3, [r3, #32]
  400d36:	f003 0370 	and.w	r3, r3, #112	; 0x70
  400d3a:	2b10      	cmp	r3, #16
  400d3c:	d002      	beq.n	400d44 <SystemCoreClockUpdate+0x90>
  400d3e:	2b20      	cmp	r3, #32
  400d40:	d004      	beq.n	400d4c <SystemCoreClockUpdate+0x98>
  400d42:	e006      	b.n	400d52 <SystemCoreClockUpdate+0x9e>
				case CKGR_MOR_MOSCRCF_4_MHz:
					SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
					break;
				
				case CKGR_MOR_MOSCRCF_8_MHz:
					SystemCoreClock = CHIP_FREQ_MAINCK_RC_8MHZ;
  400d44:	4a1e      	ldr	r2, [pc, #120]	; (400dc0 <SystemCoreClockUpdate+0x10c>)
  400d46:	4b1b      	ldr	r3, [pc, #108]	; (400db4 <SystemCoreClockUpdate+0x100>)
  400d48:	601a      	str	r2, [r3, #0]
					break;
  400d4a:	e002      	b.n	400d52 <SystemCoreClockUpdate+0x9e>
				
				case CKGR_MOR_MOSCRCF_12_MHz:
					SystemCoreClock = CHIP_FREQ_MAINCK_RC_12MHZ;
  400d4c:	4a1a      	ldr	r2, [pc, #104]	; (400db8 <SystemCoreClockUpdate+0x104>)
  400d4e:	4b19      	ldr	r3, [pc, #100]	; (400db4 <SystemCoreClockUpdate+0x100>)
  400d50:	601a      	str	r2, [r3, #0]
				default:
					break;
				}
			}
			
			if ( (uint32_t)(PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) ==
  400d52:	4b16      	ldr	r3, [pc, #88]	; (400dac <SystemCoreClockUpdate+0xf8>)
  400d54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  400d56:	f003 0303 	and.w	r3, r3, #3
  400d5a:	2b02      	cmp	r3, #2
					PMC_MCKR_CSS_PLLA_CLK ) {
				SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk)
  400d5c:	4a13      	ldr	r2, [pc, #76]	; (400dac <SystemCoreClockUpdate+0xf8>)
  400d5e:	bf07      	ittee	eq
  400d60:	6a93      	ldreq	r3, [r2, #40]	; 0x28
						>> CKGR_PLLAR_MULA_Pos) + 1U);
				SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk)
  400d62:	6a92      	ldreq	r2, [r2, #40]	; 0x28
						>> CKGR_PLLAR_DIVA_Pos));
			} else {
				SystemCoreClock *= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_MULB_Msk)
  400d64:	6ad3      	ldrne	r3, [r2, #44]	; 0x2c
						>> CKGR_PLLBR_MULB_Pos) + 1U);
				SystemCoreClock /= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_DIVB_Msk)
  400d66:	6ad2      	ldrne	r2, [r2, #44]	; 0x2c
  400d68:	4812      	ldr	r0, [pc, #72]	; (400db4 <SystemCoreClockUpdate+0x100>)
						>> CKGR_PLLAR_MULA_Pos) + 1U);
				SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk)
						>> CKGR_PLLAR_DIVA_Pos));
			} else {
				SystemCoreClock *= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_MULB_Msk)
						>> CKGR_PLLBR_MULB_Pos) + 1U);
  400d6a:	f3c3 410a 	ubfx	r1, r3, #16, #11
				SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk)
						>> CKGR_PLLAR_MULA_Pos) + 1U);
				SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk)
						>> CKGR_PLLAR_DIVA_Pos));
			} else {
				SystemCoreClock *= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_MULB_Msk)
  400d6e:	6803      	ldr	r3, [r0, #0]
  400d70:	fb01 3303 	mla	r3, r1, r3, r3
						>> CKGR_PLLBR_MULB_Pos) + 1U);
				SystemCoreClock /= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_DIVB_Msk)
						>> CKGR_PLLBR_DIVB_Pos));
  400d74:	b2d2      	uxtb	r2, r2
				SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk)
						>> CKGR_PLLAR_DIVA_Pos));
			} else {
				SystemCoreClock *= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_MULB_Msk)
						>> CKGR_PLLBR_MULB_Pos) + 1U);
				SystemCoreClock /= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_DIVB_Msk)
  400d76:	fbb3 f3f2 	udiv	r3, r3, r2
  400d7a:	6003      	str	r3, [r0, #0]
		
	default:
		break;
	}

	if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 ) {
  400d7c:	4b0b      	ldr	r3, [pc, #44]	; (400dac <SystemCoreClockUpdate+0xf8>)
  400d7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  400d80:	f003 0370 	and.w	r3, r3, #112	; 0x70
  400d84:	2b70      	cmp	r3, #112	; 0x70
  400d86:	d107      	bne.n	400d98 <SystemCoreClockUpdate+0xe4>
		SystemCoreClock /= 3U;
  400d88:	4a0a      	ldr	r2, [pc, #40]	; (400db4 <SystemCoreClockUpdate+0x100>)
  400d8a:	6813      	ldr	r3, [r2, #0]
  400d8c:	490d      	ldr	r1, [pc, #52]	; (400dc4 <SystemCoreClockUpdate+0x110>)
  400d8e:	fba1 1303 	umull	r1, r3, r1, r3
  400d92:	085b      	lsrs	r3, r3, #1
  400d94:	6013      	str	r3, [r2, #0]
  400d96:	4770      	bx	lr
	} else {
		SystemCoreClock >>=
			((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  400d98:	4b04      	ldr	r3, [pc, #16]	; (400dac <SystemCoreClockUpdate+0xf8>)
  400d9a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
	}

	if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 ) {
		SystemCoreClock /= 3U;
	} else {
		SystemCoreClock >>=
  400d9c:	4905      	ldr	r1, [pc, #20]	; (400db4 <SystemCoreClockUpdate+0x100>)
			((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  400d9e:	f3c2 1202 	ubfx	r2, r2, #4, #3
	}

	if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 ) {
		SystemCoreClock /= 3U;
	} else {
		SystemCoreClock >>=
  400da2:	680b      	ldr	r3, [r1, #0]
  400da4:	40d3      	lsrs	r3, r2
  400da6:	600b      	str	r3, [r1, #0]
  400da8:	4770      	bx	lr
  400daa:	bf00      	nop
  400dac:	400e0400 	.word	0x400e0400
  400db0:	400e1410 	.word	0x400e1410
  400db4:	2000000c 	.word	0x2000000c
  400db8:	00b71b00 	.word	0x00b71b00
  400dbc:	003d0900 	.word	0x003d0900
  400dc0:	007a1200 	.word	0x007a1200
  400dc4:	aaaaaaab 	.word	0xaaaaaaab

00400dc8 <system_init_flash>:
				}
			}
		}
	}
#else
	if ( ul_clk < CHIP_FREQ_FWS_0 ) {
  400dc8:	4b1a      	ldr	r3, [pc, #104]	; (400e34 <system_init_flash+0x6c>)
  400dca:	4298      	cmp	r0, r3
  400dcc:	d807      	bhi.n	400dde <system_init_flash+0x16>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  400dce:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  400dd2:	4a19      	ldr	r2, [pc, #100]	; (400e38 <system_init_flash+0x70>)
  400dd4:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  400dd6:	f502 7200 	add.w	r2, r2, #512	; 0x200
  400dda:	6013      	str	r3, [r2, #0]
  400ddc:	4770      	bx	lr
	} else {
		if ( ul_clk < CHIP_FREQ_FWS_1 ) {
  400dde:	4b17      	ldr	r3, [pc, #92]	; (400e3c <system_init_flash+0x74>)
  400de0:	4298      	cmp	r0, r3
  400de2:	d806      	bhi.n	400df2 <system_init_flash+0x2a>
			EFC0->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  400de4:	4b16      	ldr	r3, [pc, #88]	; (400e40 <system_init_flash+0x78>)
  400de6:	4a14      	ldr	r2, [pc, #80]	; (400e38 <system_init_flash+0x70>)
  400de8:	6013      	str	r3, [r2, #0]
			EFC1->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  400dea:	f502 7200 	add.w	r2, r2, #512	; 0x200
  400dee:	6013      	str	r3, [r2, #0]
  400df0:	4770      	bx	lr
		} else {
			if ( ul_clk < CHIP_FREQ_FWS_2 ) {
  400df2:	4b14      	ldr	r3, [pc, #80]	; (400e44 <system_init_flash+0x7c>)
  400df4:	4298      	cmp	r0, r3
  400df6:	d806      	bhi.n	400e06 <system_init_flash+0x3e>
				EFC0->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  400df8:	4b13      	ldr	r3, [pc, #76]	; (400e48 <system_init_flash+0x80>)
  400dfa:	4a0f      	ldr	r2, [pc, #60]	; (400e38 <system_init_flash+0x70>)
  400dfc:	6013      	str	r3, [r2, #0]
				EFC1->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  400dfe:	f502 7200 	add.w	r2, r2, #512	; 0x200
  400e02:	6013      	str	r3, [r2, #0]
  400e04:	4770      	bx	lr
			} else {
				if ( ul_clk < CHIP_FREQ_FWS_3 ) {
  400e06:	4b11      	ldr	r3, [pc, #68]	; (400e4c <system_init_flash+0x84>)
  400e08:	4298      	cmp	r0, r3
  400e0a:	d806      	bhi.n	400e1a <system_init_flash+0x52>
					EFC0->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  400e0c:	4b10      	ldr	r3, [pc, #64]	; (400e50 <system_init_flash+0x88>)
  400e0e:	4a0a      	ldr	r2, [pc, #40]	; (400e38 <system_init_flash+0x70>)
  400e10:	6013      	str	r3, [r2, #0]
					EFC1->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  400e12:	f502 7200 	add.w	r2, r2, #512	; 0x200
  400e16:	6013      	str	r3, [r2, #0]
  400e18:	4770      	bx	lr
				} else {
					if ( ul_clk < CHIP_FREQ_FWS_4 ) {
  400e1a:	4b0e      	ldr	r3, [pc, #56]	; (400e54 <system_init_flash+0x8c>)
  400e1c:	4298      	cmp	r0, r3
						EFC0->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
  400e1e:	bf94      	ite	ls
  400e20:	f04f 2304 	movls.w	r3, #67109888	; 0x4000400
						EFC1->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
					} else {
						EFC0->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  400e24:	4b0c      	ldrhi	r3, [pc, #48]	; (400e58 <system_init_flash+0x90>)
  400e26:	4a04      	ldr	r2, [pc, #16]	; (400e38 <system_init_flash+0x70>)
  400e28:	6013      	str	r3, [r2, #0]
						EFC1->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  400e2a:	f502 7200 	add.w	r2, r2, #512	; 0x200
  400e2e:	6013      	str	r3, [r2, #0]
  400e30:	4770      	bx	lr
  400e32:	bf00      	nop
  400e34:	01312cff 	.word	0x01312cff
  400e38:	400e0a00 	.word	0x400e0a00
  400e3c:	026259ff 	.word	0x026259ff
  400e40:	04000100 	.word	0x04000100
  400e44:	039386ff 	.word	0x039386ff
  400e48:	04000200 	.word	0x04000200
  400e4c:	04c4b3ff 	.word	0x04c4b3ff
  400e50:	04000300 	.word	0x04000300
  400e54:	05f5e0ff 	.word	0x05f5e0ff
  400e58:	04000500 	.word	0x04000500

00400e5c <_sbrk>:
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;

	if (heap == NULL) {
  400e5c:	4b09      	ldr	r3, [pc, #36]	; (400e84 <_sbrk+0x28>)
  400e5e:	681b      	ldr	r3, [r3, #0]
  400e60:	b913      	cbnz	r3, 400e68 <_sbrk+0xc>
		heap = (unsigned char *)&_end;
  400e62:	4a09      	ldr	r2, [pc, #36]	; (400e88 <_sbrk+0x2c>)
  400e64:	4b07      	ldr	r3, [pc, #28]	; (400e84 <_sbrk+0x28>)
  400e66:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
  400e68:	4b06      	ldr	r3, [pc, #24]	; (400e84 <_sbrk+0x28>)
  400e6a:	681b      	ldr	r3, [r3, #0]

	if (((int)prev_heap + incr) > ramend) {
  400e6c:	181a      	adds	r2, r3, r0
  400e6e:	4907      	ldr	r1, [pc, #28]	; (400e8c <_sbrk+0x30>)
  400e70:	4291      	cmp	r1, r2
  400e72:	db04      	blt.n	400e7e <_sbrk+0x22>
		return (caddr_t) -1;	
	}

	heap += incr;
  400e74:	4610      	mov	r0, r2
  400e76:	4a03      	ldr	r2, [pc, #12]	; (400e84 <_sbrk+0x28>)
  400e78:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap;
  400e7a:	4618      	mov	r0, r3
  400e7c:	4770      	bx	lr
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;

	if (((int)prev_heap + incr) > ramend) {
		return (caddr_t) -1;	
  400e7e:	f04f 30ff 	mov.w	r0, #4294967295
	}

	heap += incr;

	return (caddr_t) prev_heap;
}
  400e82:	4770      	bx	lr
  400e84:	20000918 	.word	0x20000918
  400e88:	20016580 	.word	0x20016580
  400e8c:	20027ffc 	.word	0x20027ffc

00400e90 <_close>:
}

extern int _close(int file)
{
	return -1;
}
  400e90:	f04f 30ff 	mov.w	r0, #4294967295
  400e94:	4770      	bx	lr
  400e96:	bf00      	nop

00400e98 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
  400e98:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  400e9c:	604b      	str	r3, [r1, #4]

	return 0;
}
  400e9e:	2000      	movs	r0, #0
  400ea0:	4770      	bx	lr
  400ea2:	bf00      	nop

00400ea4 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
  400ea4:	2001      	movs	r0, #1
  400ea6:	4770      	bx	lr

00400ea8 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
  400ea8:	2000      	movs	r0, #0
  400eaa:	4770      	bx	lr

00400eac <vsync_handler>:
static void vsync_handler(uint32_t ul_id, uint32_t ul_mask)
{
	unused(ul_id);
	unused(ul_mask);

	g_ul_vsync_flag = true;
  400eac:	2201      	movs	r2, #1
  400eae:	4b01      	ldr	r3, [pc, #4]	; (400eb4 <vsync_handler+0x8>)
  400eb0:	601a      	str	r2, [r3, #0]
  400eb2:	4770      	bx	lr
  400eb4:	20000920 	.word	0x20000920

00400eb8 <PIOA_Capture_Handler>:
}

static volatile uint32_t g_ul_capture_done_flag = false;

static void PIOA_Capture_Handler(void)
{
  400eb8:	b510      	push	{r4, lr}
	uint32_t status;
	status = pio_capture_get_interrupt_status(PIOA);
  400eba:	4840      	ldr	r0, [pc, #256]	; (400fbc <PIOA_Capture_Handler+0x104>)
  400ebc:	4b40      	ldr	r3, [pc, #256]	; (400fc0 <PIOA_Capture_Handler+0x108>)
  400ebe:	4798      	blx	r3

	if ((status & PIO_PCIER_RXBUFF) == PIO_PCIER_RXBUFF) {
  400ec0:	f010 0f08 	tst.w	r0, #8
  400ec4:	d079      	beq.n	400fba <PIOA_Capture_Handler+0x102>

		//printf("\r\ni\r\n");

		if (g_pingpong_status == 0){
  400ec6:	4b3f      	ldr	r3, [pc, #252]	; (400fc4 <PIOA_Capture_Handler+0x10c>)
  400ec8:	781b      	ldrb	r3, [r3, #0]
  400eca:	2b00      	cmp	r3, #0
  400ecc:	d13a      	bne.n	400f44 <PIOA_Capture_Handler+0x8c>
			if (!g_begin_process_flag){
  400ece:	4b3e      	ldr	r3, [pc, #248]	; (400fc8 <PIOA_Capture_Handler+0x110>)
  400ed0:	781b      	ldrb	r3, [r3, #0]
  400ed2:	b9f3      	cbnz	r3, 400f12 <PIOA_Capture_Handler+0x5a>
				g_p_process = &cap_dest_buf_A[0];
  400ed4:	4a3d      	ldr	r2, [pc, #244]	; (400fcc <PIOA_Capture_Handler+0x114>)
  400ed6:	4b3e      	ldr	r3, [pc, #248]	; (400fd0 <PIOA_Capture_Handler+0x118>)
  400ed8:	601a      	str	r2, [r3, #0]
				g_p_capture = &cap_dest_buf_B[0];
  400eda:	4b3e      	ldr	r3, [pc, #248]	; (400fd4 <PIOA_Capture_Handler+0x11c>)
  400edc:	4a3e      	ldr	r2, [pc, #248]	; (400fd8 <PIOA_Capture_Handler+0x120>)
  400ede:	6013      	str	r3, [r2, #0]

				//set DMA to point to other buffer
				g_pdc_piodc_packet.ul_addr = g_p_capture;
  400ee0:	493e      	ldr	r1, [pc, #248]	; (400fdc <PIOA_Capture_Handler+0x124>)
  400ee2:	600b      	str	r3, [r1, #0]
				g_pdc_piodc_packet.ul_size = (g_us_cap_line*g_us_cap_rows)>>2;	
  400ee4:	4b3e      	ldr	r3, [pc, #248]	; (400fe0 <PIOA_Capture_Handler+0x128>)
  400ee6:	881a      	ldrh	r2, [r3, #0]
  400ee8:	4b3e      	ldr	r3, [pc, #248]	; (400fe4 <PIOA_Capture_Handler+0x12c>)
  400eea:	881b      	ldrh	r3, [r3, #0]
  400eec:	fb03 f302 	mul.w	r3, r3, r2
  400ef0:	109b      	asrs	r3, r3, #2
  400ef2:	604b      	str	r3, [r1, #4]
				pdc_rx_init(g_p_piodc_pdc, &g_pdc_piodc_packet, NULL);
  400ef4:	4c3c      	ldr	r4, [pc, #240]	; (400fe8 <PIOA_Capture_Handler+0x130>)
  400ef6:	6820      	ldr	r0, [r4, #0]
  400ef8:	2200      	movs	r2, #0
  400efa:	4b3c      	ldr	r3, [pc, #240]	; (400fec <PIOA_Capture_Handler+0x134>)
  400efc:	4798      	blx	r3
				pdc_enable_transfer(g_p_piodc_pdc, PERIPH_PTCR_RXTEN);
  400efe:	6820      	ldr	r0, [r4, #0]
  400f00:	2101      	movs	r1, #1
  400f02:	4b3b      	ldr	r3, [pc, #236]	; (400ff0 <PIOA_Capture_Handler+0x138>)
  400f04:	4798      	blx	r3

				g_pingpong_status = 1;
  400f06:	2301      	movs	r3, #1
  400f08:	4a2e      	ldr	r2, [pc, #184]	; (400fc4 <PIOA_Capture_Handler+0x10c>)
  400f0a:	7013      	strb	r3, [r2, #0]
				g_begin_process_flag = true;
  400f0c:	4a2e      	ldr	r2, [pc, #184]	; (400fc8 <PIOA_Capture_Handler+0x110>)
  400f0e:	7013      	strb	r3, [r2, #0]
  400f10:	bd10      	pop	{r4, pc}
			} else {
				//g_p_capture = &cap_dest_buf_A[0];

				//set DMA to point to other buffer
				g_pdc_piodc_packet.ul_addr = g_p_capture;
  400f12:	4932      	ldr	r1, [pc, #200]	; (400fdc <PIOA_Capture_Handler+0x124>)
  400f14:	4b30      	ldr	r3, [pc, #192]	; (400fd8 <PIOA_Capture_Handler+0x120>)
  400f16:	681b      	ldr	r3, [r3, #0]
  400f18:	600b      	str	r3, [r1, #0]
				g_pdc_piodc_packet.ul_size = (g_us_cap_line*g_us_cap_rows)>>2;	
  400f1a:	4b31      	ldr	r3, [pc, #196]	; (400fe0 <PIOA_Capture_Handler+0x128>)
  400f1c:	881a      	ldrh	r2, [r3, #0]
  400f1e:	4b31      	ldr	r3, [pc, #196]	; (400fe4 <PIOA_Capture_Handler+0x12c>)
  400f20:	881b      	ldrh	r3, [r3, #0]
  400f22:	fb03 f302 	mul.w	r3, r3, r2
  400f26:	109b      	asrs	r3, r3, #2
  400f28:	604b      	str	r3, [r1, #4]
				pdc_rx_init(g_p_piodc_pdc, &g_pdc_piodc_packet, NULL);
  400f2a:	4c2f      	ldr	r4, [pc, #188]	; (400fe8 <PIOA_Capture_Handler+0x130>)
  400f2c:	6820      	ldr	r0, [r4, #0]
  400f2e:	2200      	movs	r2, #0
  400f30:	4b2e      	ldr	r3, [pc, #184]	; (400fec <PIOA_Capture_Handler+0x134>)
  400f32:	4798      	blx	r3
				pdc_enable_transfer(g_p_piodc_pdc, PERIPH_PTCR_RXTEN);
  400f34:	6820      	ldr	r0, [r4, #0]
  400f36:	2101      	movs	r1, #1
  400f38:	4b2d      	ldr	r3, [pc, #180]	; (400ff0 <PIOA_Capture_Handler+0x138>)
  400f3a:	4798      	blx	r3

				g_pingpong_status = 0;
  400f3c:	2200      	movs	r2, #0
  400f3e:	4b21      	ldr	r3, [pc, #132]	; (400fc4 <PIOA_Capture_Handler+0x10c>)
  400f40:	701a      	strb	r2, [r3, #0]
  400f42:	bd10      	pop	{r4, pc}
			}

		} else {
			if (!g_begin_process_flag){
  400f44:	4b20      	ldr	r3, [pc, #128]	; (400fc8 <PIOA_Capture_Handler+0x110>)
  400f46:	781b      	ldrb	r3, [r3, #0]
  400f48:	b9fb      	cbnz	r3, 400f8a <PIOA_Capture_Handler+0xd2>

				g_p_process = &cap_dest_buf_B[0];
  400f4a:	4a22      	ldr	r2, [pc, #136]	; (400fd4 <PIOA_Capture_Handler+0x11c>)
  400f4c:	4b20      	ldr	r3, [pc, #128]	; (400fd0 <PIOA_Capture_Handler+0x118>)
  400f4e:	601a      	str	r2, [r3, #0]
				g_p_capture = &cap_dest_buf_A[0];
  400f50:	4b1e      	ldr	r3, [pc, #120]	; (400fcc <PIOA_Capture_Handler+0x114>)
  400f52:	4a21      	ldr	r2, [pc, #132]	; (400fd8 <PIOA_Capture_Handler+0x120>)
  400f54:	6013      	str	r3, [r2, #0]

				//set DMA to point to other buffer
				g_pdc_piodc_packet.ul_addr = g_p_capture;
  400f56:	4921      	ldr	r1, [pc, #132]	; (400fdc <PIOA_Capture_Handler+0x124>)
  400f58:	600b      	str	r3, [r1, #0]
				g_pdc_piodc_packet.ul_size = (g_us_cap_line*g_us_cap_rows)>>2;	
  400f5a:	4b21      	ldr	r3, [pc, #132]	; (400fe0 <PIOA_Capture_Handler+0x128>)
  400f5c:	881a      	ldrh	r2, [r3, #0]
  400f5e:	4b21      	ldr	r3, [pc, #132]	; (400fe4 <PIOA_Capture_Handler+0x12c>)
  400f60:	881b      	ldrh	r3, [r3, #0]
  400f62:	fb03 f302 	mul.w	r3, r3, r2
  400f66:	109b      	asrs	r3, r3, #2
  400f68:	604b      	str	r3, [r1, #4]
				pdc_rx_init(g_p_piodc_pdc, &g_pdc_piodc_packet, NULL);
  400f6a:	4c1f      	ldr	r4, [pc, #124]	; (400fe8 <PIOA_Capture_Handler+0x130>)
  400f6c:	6820      	ldr	r0, [r4, #0]
  400f6e:	2200      	movs	r2, #0
  400f70:	4b1e      	ldr	r3, [pc, #120]	; (400fec <PIOA_Capture_Handler+0x134>)
  400f72:	4798      	blx	r3
				pdc_enable_transfer(g_p_piodc_pdc, PERIPH_PTCR_RXTEN);
  400f74:	6820      	ldr	r0, [r4, #0]
  400f76:	2101      	movs	r1, #1
  400f78:	4b1d      	ldr	r3, [pc, #116]	; (400ff0 <PIOA_Capture_Handler+0x138>)
  400f7a:	4798      	blx	r3

				g_pingpong_status = 0;
  400f7c:	2200      	movs	r2, #0
  400f7e:	4b11      	ldr	r3, [pc, #68]	; (400fc4 <PIOA_Capture_Handler+0x10c>)
  400f80:	701a      	strb	r2, [r3, #0]
				g_begin_process_flag = true;
  400f82:	2201      	movs	r2, #1
  400f84:	4b10      	ldr	r3, [pc, #64]	; (400fc8 <PIOA_Capture_Handler+0x110>)
  400f86:	701a      	strb	r2, [r3, #0]
  400f88:	bd10      	pop	{r4, pc}

			} else {
				//g_p_capture = &cap_dest_buf_B[0];

				//set DMA to point to other buffer
				g_pdc_piodc_packet.ul_addr = g_p_capture;
  400f8a:	4914      	ldr	r1, [pc, #80]	; (400fdc <PIOA_Capture_Handler+0x124>)
  400f8c:	4b12      	ldr	r3, [pc, #72]	; (400fd8 <PIOA_Capture_Handler+0x120>)
  400f8e:	681b      	ldr	r3, [r3, #0]
  400f90:	600b      	str	r3, [r1, #0]
				g_pdc_piodc_packet.ul_size = (g_us_cap_line*g_us_cap_rows)>>2;	
  400f92:	4b13      	ldr	r3, [pc, #76]	; (400fe0 <PIOA_Capture_Handler+0x128>)
  400f94:	881a      	ldrh	r2, [r3, #0]
  400f96:	4b13      	ldr	r3, [pc, #76]	; (400fe4 <PIOA_Capture_Handler+0x12c>)
  400f98:	881b      	ldrh	r3, [r3, #0]
  400f9a:	fb03 f302 	mul.w	r3, r3, r2
  400f9e:	109b      	asrs	r3, r3, #2
  400fa0:	604b      	str	r3, [r1, #4]
				pdc_rx_init(g_p_piodc_pdc, &g_pdc_piodc_packet, NULL);
  400fa2:	4c11      	ldr	r4, [pc, #68]	; (400fe8 <PIOA_Capture_Handler+0x130>)
  400fa4:	6820      	ldr	r0, [r4, #0]
  400fa6:	2200      	movs	r2, #0
  400fa8:	4b10      	ldr	r3, [pc, #64]	; (400fec <PIOA_Capture_Handler+0x134>)
  400faa:	4798      	blx	r3
				pdc_enable_transfer(g_p_piodc_pdc, PERIPH_PTCR_RXTEN);
  400fac:	6820      	ldr	r0, [r4, #0]
  400fae:	2101      	movs	r1, #1
  400fb0:	4b0f      	ldr	r3, [pc, #60]	; (400ff0 <PIOA_Capture_Handler+0x138>)
  400fb2:	4798      	blx	r3

				g_pingpong_status = 1;
  400fb4:	2201      	movs	r2, #1
  400fb6:	4b03      	ldr	r3, [pc, #12]	; (400fc4 <PIOA_Capture_Handler+0x10c>)
  400fb8:	701a      	strb	r2, [r3, #0]
  400fba:	bd10      	pop	{r4, pc}
  400fbc:	400e0e00 	.word	0x400e0e00
  400fc0:	00400701 	.word	0x00400701
  400fc4:	20000924 	.word	0x20000924
  400fc8:	2000091c 	.word	0x2000091c
  400fcc:	20009f6c 	.word	0x20009f6c
  400fd0:	20000010 	.word	0x20000010
  400fd4:	2000096c 	.word	0x2000096c
  400fd8:	2000001c 	.word	0x2000001c
  400fdc:	2001356c 	.word	0x2001356c
  400fe0:	20000016 	.word	0x20000016
  400fe4:	20000014 	.word	0x20000014
  400fe8:	20013574 	.word	0x20013574
  400fec:	00400355 	.word	0x00400355
  400ff0:	0040036d 	.word	0x0040036d

00400ff4 <usart_serial_getchar>:
 * \param p_usart   Base address of the USART instance.
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if p_usart, uint8_t *data)
{
  400ff4:	b5f0      	push	{r4, r5, r6, r7, lr}
  400ff6:	b083      	sub	sp, #12
  400ff8:	4605      	mov	r5, r0
  400ffa:	460c      	mov	r4, r1
	uint32_t val = 0;
  400ffc:	2300      	movs	r3, #0
  400ffe:	9301      	str	r3, [sp, #4]
	if (UART == (Uart*)p_usart) {
		while (uart_read((Uart*)p_usart, data));
	}
#else
# ifdef UART0
	if (UART0 == (Uart*)p_usart) {
  401000:	4b18      	ldr	r3, [pc, #96]	; (401064 <usart_serial_getchar+0x70>)
  401002:	4298      	cmp	r0, r3
  401004:	d107      	bne.n	401016 <usart_serial_getchar+0x22>
		while (uart_read((Uart*)p_usart, data));
  401006:	461f      	mov	r7, r3
  401008:	4e17      	ldr	r6, [pc, #92]	; (401068 <usart_serial_getchar+0x74>)
  40100a:	4638      	mov	r0, r7
  40100c:	4621      	mov	r1, r4
  40100e:	47b0      	blx	r6
  401010:	2800      	cmp	r0, #0
  401012:	d1fa      	bne.n	40100a <usart_serial_getchar+0x16>
  401014:	e017      	b.n	401046 <usart_serial_getchar+0x52>
	}
# endif
# ifdef UART1
	if (UART1 == (Uart*)p_usart) {
  401016:	4b15      	ldr	r3, [pc, #84]	; (40106c <usart_serial_getchar+0x78>)
  401018:	4298      	cmp	r0, r3
  40101a:	d107      	bne.n	40102c <usart_serial_getchar+0x38>
		while (uart_read((Uart*)p_usart, data));
  40101c:	461e      	mov	r6, r3
  40101e:	4d12      	ldr	r5, [pc, #72]	; (401068 <usart_serial_getchar+0x74>)
  401020:	4630      	mov	r0, r6
  401022:	4621      	mov	r1, r4
  401024:	47a8      	blx	r5
  401026:	2800      	cmp	r0, #0
  401028:	d1fa      	bne.n	401020 <usart_serial_getchar+0x2c>
  40102a:	e018      	b.n	40105e <usart_serial_getchar+0x6a>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
  40102c:	4b10      	ldr	r3, [pc, #64]	; (401070 <usart_serial_getchar+0x7c>)
  40102e:	4298      	cmp	r0, r3
  401030:	d109      	bne.n	401046 <usart_serial_getchar+0x52>
		while (usart_read(p_usart, &val));
  401032:	461e      	mov	r6, r3
  401034:	4d0f      	ldr	r5, [pc, #60]	; (401074 <usart_serial_getchar+0x80>)
  401036:	4630      	mov	r0, r6
  401038:	a901      	add	r1, sp, #4
  40103a:	47a8      	blx	r5
  40103c:	2800      	cmp	r0, #0
  40103e:	d1fa      	bne.n	401036 <usart_serial_getchar+0x42>
		*data = (uint8_t)(val & 0xFF);
  401040:	9b01      	ldr	r3, [sp, #4]
  401042:	7023      	strb	r3, [r4, #0]
  401044:	e00b      	b.n	40105e <usart_serial_getchar+0x6a>
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
  401046:	4b0c      	ldr	r3, [pc, #48]	; (401078 <usart_serial_getchar+0x84>)
  401048:	429d      	cmp	r5, r3
  40104a:	d108      	bne.n	40105e <usart_serial_getchar+0x6a>
		while (usart_read(p_usart, &val));
  40104c:	461e      	mov	r6, r3
  40104e:	4d09      	ldr	r5, [pc, #36]	; (401074 <usart_serial_getchar+0x80>)
  401050:	4630      	mov	r0, r6
  401052:	a901      	add	r1, sp, #4
  401054:	47a8      	blx	r5
  401056:	2800      	cmp	r0, #0
  401058:	d1fa      	bne.n	401050 <usart_serial_getchar+0x5c>
		*data = (uint8_t)(val & 0xFF);
  40105a:	9b01      	ldr	r3, [sp, #4]
  40105c:	7023      	strb	r3, [r4, #0]
		*data = (uint8_t)(val & 0xFF);
	}
# endif
#endif /* ifdef USART */

}
  40105e:	b003      	add	sp, #12
  401060:	bdf0      	pop	{r4, r5, r6, r7, pc}
  401062:	bf00      	nop
  401064:	400e0600 	.word	0x400e0600
  401068:	00400bb9 	.word	0x00400bb9
  40106c:	400e0800 	.word	0x400e0800
  401070:	40024000 	.word	0x40024000
  401074:	00400be1 	.word	0x00400be1
  401078:	40028000 	.word	0x40028000

0040107c <usart_serial_putchar>:
 *   \retval 1  The character was written.
 *   \retval 0  The function timed out before the USART transmitter became
 * ready to send.
 */
static inline int usart_serial_putchar(usart_if p_usart, const uint8_t c)
{
  40107c:	b570      	push	{r4, r5, r6, lr}
  40107e:	460c      	mov	r4, r1
		while (uart_write((Uart*)p_usart, c)!=0);
		return 1;
	}
#else
# ifdef UART0
	if (UART0 == (Uart*)p_usart) {
  401080:	4b18      	ldr	r3, [pc, #96]	; (4010e4 <usart_serial_putchar+0x68>)
  401082:	4298      	cmp	r0, r3
  401084:	d108      	bne.n	401098 <usart_serial_putchar+0x1c>
		while (uart_write((Uart*)p_usart, c)!=0);
  401086:	461e      	mov	r6, r3
  401088:	4d17      	ldr	r5, [pc, #92]	; (4010e8 <usart_serial_putchar+0x6c>)
  40108a:	4630      	mov	r0, r6
  40108c:	4621      	mov	r1, r4
  40108e:	47a8      	blx	r5
  401090:	2800      	cmp	r0, #0
  401092:	d1fa      	bne.n	40108a <usart_serial_putchar+0xe>
		return 1;
  401094:	2001      	movs	r0, #1
  401096:	bd70      	pop	{r4, r5, r6, pc}
	}
# endif
# ifdef UART1
	if (UART1 == (Uart*)p_usart) {
  401098:	4b14      	ldr	r3, [pc, #80]	; (4010ec <usart_serial_putchar+0x70>)
  40109a:	4298      	cmp	r0, r3
  40109c:	d108      	bne.n	4010b0 <usart_serial_putchar+0x34>
		while (uart_write((Uart*)p_usart, c)!=0);
  40109e:	461e      	mov	r6, r3
  4010a0:	4d11      	ldr	r5, [pc, #68]	; (4010e8 <usart_serial_putchar+0x6c>)
  4010a2:	4630      	mov	r0, r6
  4010a4:	4621      	mov	r1, r4
  4010a6:	47a8      	blx	r5
  4010a8:	2800      	cmp	r0, #0
  4010aa:	d1fa      	bne.n	4010a2 <usart_serial_putchar+0x26>
		return 1;
  4010ac:	2001      	movs	r0, #1
  4010ae:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
		return 1;
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
  4010b0:	4b0f      	ldr	r3, [pc, #60]	; (4010f0 <usart_serial_putchar+0x74>)
  4010b2:	4298      	cmp	r0, r3
  4010b4:	d108      	bne.n	4010c8 <usart_serial_putchar+0x4c>
		while (usart_write(p_usart, c)!=0);
  4010b6:	461e      	mov	r6, r3
  4010b8:	4d0e      	ldr	r5, [pc, #56]	; (4010f4 <usart_serial_putchar+0x78>)
  4010ba:	4630      	mov	r0, r6
  4010bc:	4621      	mov	r1, r4
  4010be:	47a8      	blx	r5
  4010c0:	2800      	cmp	r0, #0
  4010c2:	d1fa      	bne.n	4010ba <usart_serial_putchar+0x3e>
		return 1;
  4010c4:	2001      	movs	r0, #1
  4010c6:	bd70      	pop	{r4, r5, r6, pc}
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
  4010c8:	4b0b      	ldr	r3, [pc, #44]	; (4010f8 <usart_serial_putchar+0x7c>)
  4010ca:	4298      	cmp	r0, r3
  4010cc:	d108      	bne.n	4010e0 <usart_serial_putchar+0x64>
		while (usart_write(p_usart, c)!=0);
  4010ce:	461e      	mov	r6, r3
  4010d0:	4d08      	ldr	r5, [pc, #32]	; (4010f4 <usart_serial_putchar+0x78>)
  4010d2:	4630      	mov	r0, r6
  4010d4:	4621      	mov	r1, r4
  4010d6:	47a8      	blx	r5
  4010d8:	2800      	cmp	r0, #0
  4010da:	d1fa      	bne.n	4010d2 <usart_serial_putchar+0x56>
		return 1;
  4010dc:	2001      	movs	r0, #1
  4010de:	bd70      	pop	{r4, r5, r6, pc}
		return 1;
	}
# endif
#endif /* ifdef USART */

	return 0;
  4010e0:	2000      	movs	r0, #0
}
  4010e2:	bd70      	pop	{r4, r5, r6, pc}
  4010e4:	400e0600 	.word	0x400e0600
  4010e8:	00400ba9 	.word	0x00400ba9
  4010ec:	400e0800 	.word	0x400e0800
  4010f0:	40024000 	.word	0x40024000
  4010f4:	00400bcd 	.word	0x00400bcd
  4010f8:	40028000 	.word	0x40028000

004010fc <cmos_write_regs>:
const cmos_reg *p_cmos_conf = SM2010_QVGA_CONF;


		
uint32_t cmos_write_regs(Twi* const p_twi, const cmos_reg *p_reg_list)
{
  4010fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  401100:	b086      	sub	sp, #24
  401102:	460c      	mov	r4, r1
	uint32_t ul_err;
	uint32_t ul_size = 0;
	twi_packet_t twi_packet_regs;
	cmos_reg *p_next = (cmos_reg *)p_reg_list;
	
	printf("Writing regs\r\n");
  401104:	4817      	ldr	r0, [pc, #92]	; (401164 <cmos_write_regs+0x68>)
  401106:	4b18      	ldr	r3, [pc, #96]	; (401168 <cmos_write_regs+0x6c>)
  401108:	4798      	blx	r3
  40110a:	3401      	adds	r4, #1
			twi_packet_regs.addr_length = 1;
			twi_packet_regs.chip = 0x6e;
			twi_packet_regs.length = 1;
			twi_packet_regs.buffer = &(p_next->val);

			ul_err = twi_master_write(TWI0, &twi_packet_regs);
  40110c:	f8df 806c 	ldr.w	r8, [pc, #108]	; 40117c <cmos_write_regs+0x80>
  401110:	4f16      	ldr	r7, [pc, #88]	; (40116c <cmos_write_regs+0x70>)
			delay_ms(5);
  401112:	4e17      	ldr	r6, [pc, #92]	; (401170 <cmos_write_regs+0x74>)
	twi_packet_t twi_packet_regs;
	cmos_reg *p_next = (cmos_reg *)p_reg_list;
	
	printf("Writing regs\r\n");

	while (!((p_next->reg == 0xff) && (p_next->val == 0xff))) {
  401114:	e017      	b.n	401146 <cmos_write_regs+0x4a>
		//if (p_next->reg == 0xFD) {
		//	delay_ms(5);
		//} else {
			twi_packet_regs.addr[0] = p_next->reg;
  401116:	f88d 3004 	strb.w	r3, [sp, #4]
			twi_packet_regs.addr_length = 1;
  40111a:	2301      	movs	r3, #1
  40111c:	9302      	str	r3, [sp, #8]
			twi_packet_regs.chip = 0x6e;
  40111e:	216e      	movs	r1, #110	; 0x6e
  401120:	f88d 1014 	strb.w	r1, [sp, #20]
			twi_packet_regs.length = 1;
  401124:	9304      	str	r3, [sp, #16]
			twi_packet_regs.buffer = &(p_next->val);
  401126:	9203      	str	r2, [sp, #12]

			ul_err = twi_master_write(TWI0, &twi_packet_regs);
  401128:	4640      	mov	r0, r8
  40112a:	a901      	add	r1, sp, #4
  40112c:	47b8      	blx	r7
  40112e:	4605      	mov	r5, r0
			delay_ms(5);
  401130:	f24a 706a 	movw	r0, #42858	; 0xa76a
  401134:	47b0      	blx	r6
  401136:	3402      	adds	r4, #2
			//printf("[%x]: %x\r\n", twi_packet_regs.addr[0], p_next->val);
			ul_size++;

			if (ul_err == TWI_BUSY) {
  401138:	2d08      	cmp	r5, #8
  40113a:	d104      	bne.n	401146 <cmos_write_regs+0x4a>
				printf("error writing TWI\r\n");
  40113c:	480d      	ldr	r0, [pc, #52]	; (401174 <cmos_write_regs+0x78>)
  40113e:	4b0a      	ldr	r3, [pc, #40]	; (401168 <cmos_write_regs+0x6c>)
  401140:	4798      	blx	r3
				return ul_err;
  401142:	2008      	movs	r0, #8
  401144:	e00b      	b.n	40115e <cmos_write_regs+0x62>
  401146:	4622      	mov	r2, r4
	twi_packet_t twi_packet_regs;
	cmos_reg *p_next = (cmos_reg *)p_reg_list;
	
	printf("Writing regs\r\n");

	while (!((p_next->reg == 0xff) && (p_next->val == 0xff))) {
  401148:	f814 3c01 	ldrb.w	r3, [r4, #-1]
  40114c:	2bff      	cmp	r3, #255	; 0xff
  40114e:	d1e2      	bne.n	401116 <cmos_write_regs+0x1a>
  401150:	7821      	ldrb	r1, [r4, #0]
  401152:	29ff      	cmp	r1, #255	; 0xff
  401154:	d1df      	bne.n	401116 <cmos_write_regs+0x1a>
			}
		//}

		p_next++;
	}
	printf("Done writing\r\n");
  401156:	4808      	ldr	r0, [pc, #32]	; (401178 <cmos_write_regs+0x7c>)
  401158:	4b03      	ldr	r3, [pc, #12]	; (401168 <cmos_write_regs+0x6c>)
  40115a:	4798      	blx	r3
	return 0;
  40115c:	2000      	movs	r0, #0
}
  40115e:	b006      	add	sp, #24
  401160:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  401164:	0040462c 	.word	0x0040462c
  401168:	004015b9 	.word	0x004015b9
  40116c:	00400aa5 	.word	0x00400aa5
  401170:	20000001 	.word	0x20000001
  401174:	0040463c 	.word	0x0040463c
  401178:	00404650 	.word	0x00404650
  40117c:	40018000 	.word	0x40018000

00401180 <main>:
}



int main(void)
{
  401180:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  401184:	b08e      	sub	sp, #56	; 0x38
	//tstrWifiInitParam param;
	int8_t ret;

	/* Initialize the board. */
	sysclk_init();
  401186:	4b34      	ldr	r3, [pc, #208]	; (401258 <main+0xd8>)
  401188:	4798      	blx	r3
	board_init();
  40118a:	4b34      	ldr	r3, [pc, #208]	; (40125c <main+0xdc>)
  40118c:	4798      	blx	r3
  40118e:	2009      	movs	r0, #9
  401190:	4c33      	ldr	r4, [pc, #204]	; (401260 <main+0xe0>)
  401192:	47a0      	blx	r4
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
	stdio_base = (void *)usart;
  401194:	4e33      	ldr	r6, [pc, #204]	; (401264 <main+0xe4>)
  401196:	4b34      	ldr	r3, [pc, #208]	; (401268 <main+0xe8>)
  401198:	601e      	str	r6, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
  40119a:	4a34      	ldr	r2, [pc, #208]	; (40126c <main+0xec>)
  40119c:	4b34      	ldr	r3, [pc, #208]	; (401270 <main+0xf0>)
  40119e:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
  4011a0:	4a34      	ldr	r2, [pc, #208]	; (401274 <main+0xf4>)
  4011a2:	4b35      	ldr	r3, [pc, #212]	; (401278 <main+0xf8>)
  4011a4:	601a      	str	r2, [r3, #0]
static inline void usart_serial_init(usart_if p_usart,
		usart_serial_options_t *opt)
{
#if ((!SAM4L) && (!SAMG55))
	sam_uart_opt_t uart_settings;
	uart_settings.ul_mck = sysclk_get_peripheral_hz();
  4011a6:	4d35      	ldr	r5, [pc, #212]	; (40127c <main+0xfc>)
  4011a8:	9502      	str	r5, [sp, #8]
	uart_settings.ul_baudrate = opt->baudrate;
  4011aa:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
  4011ae:	9303      	str	r3, [sp, #12]
	uart_settings.ul_mode = opt->paritytype;
  4011b0:	f44f 6300 	mov.w	r3, #2048	; 0x800
  4011b4:	9304      	str	r3, [sp, #16]
  4011b6:	2009      	movs	r0, #9
  4011b8:	47a0      	blx	r4
# endif
# ifdef UART1
	if (UART1 == (Uart*)p_usart) {
		sysclk_enable_peripheral_clock(ID_UART1);
		/* Configure UART */
		uart_init((Uart*)p_usart, &uart_settings);
  4011ba:	4630      	mov	r0, r6
  4011bc:	a902      	add	r1, sp, #8
  4011be:	4b30      	ldr	r3, [pc, #192]	; (401280 <main+0x100>)
  4011c0:	4798      	blx	r3
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
#  endif
#  if UC3 || SAM
	// For AVR32 and SAM GCC
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
  4011c2:	4f30      	ldr	r7, [pc, #192]	; (401284 <main+0x104>)
  4011c4:	683b      	ldr	r3, [r7, #0]
  4011c6:	6898      	ldr	r0, [r3, #8]
  4011c8:	2100      	movs	r1, #0
  4011ca:	4e2f      	ldr	r6, [pc, #188]	; (401288 <main+0x108>)
  4011cc:	47b0      	blx	r6
	setbuf(stdin, NULL);
  4011ce:	683b      	ldr	r3, [r7, #0]
  4011d0:	6858      	ldr	r0, [r3, #4]
  4011d2:	2100      	movs	r1, #0
  4011d4:	47b0      	blx	r6

	/* Initialize the UART console. */
	configure_console();
	printf(STRING_HEADER);
  4011d6:	482d      	ldr	r0, [pc, #180]	; (40128c <main+0x10c>)
  4011d8:	4b2d      	ldr	r3, [pc, #180]	; (401290 <main+0x110>)
  4011da:	4798      	blx	r3
	//ioport_set_pin_level( IOPORT_CREATE_PIN(PIOC, 24), 1);
		
	/*--------------- Initialize the TWI ---------------	*/
	twi_options_t opt;
	/* Enable TWI peripheral */
	pmc_enable_periph_clk(ID_TWI0);
  4011dc:	2013      	movs	r0, #19
  4011de:	47a0      	blx	r4

	/* Init TWI peripheral */
	opt.master_clk = sysclk_get_cpu_hz();
  4011e0:	950b      	str	r5, [sp, #44]	; 0x2c
	opt.speed  = (400000UL);
  4011e2:	4b2c      	ldr	r3, [pc, #176]	; (401294 <main+0x114>)
  4011e4:	930c      	str	r3, [sp, #48]	; 0x30
	opt.chip = 0x6e;
  4011e6:	246e      	movs	r4, #110	; 0x6e
  4011e8:	f88d 4034 	strb.w	r4, [sp, #52]	; 0x34
	twi_master_init(TWI0, &opt);
  4011ec:	4d2a      	ldr	r5, [pc, #168]	; (401298 <main+0x118>)
  4011ee:	4628      	mov	r0, r5
  4011f0:	a90b      	add	r1, sp, #44	; 0x2c
  4011f2:	4b2a      	ldr	r3, [pc, #168]	; (40129c <main+0x11c>)
  4011f4:	4798      	blx	r3

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
  4011f6:	4b2a      	ldr	r3, [pc, #168]	; (4012a0 <main+0x120>)
  4011f8:	f44f 2200 	mov.w	r2, #524288	; 0x80000
  4011fc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
  401200:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
  401204:	2100      	movs	r1, #0
  401206:	f883 1313 	strb.w	r1, [r3, #787]	; 0x313
    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
/*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  40120a:	601a      	str	r2, [r3, #0]
	NVIC_DisableIRQ(TWI0_IRQn);
	NVIC_ClearPendingIRQ(TWI0_IRQn);
	NVIC_SetPriority(TWI0_IRQn, 0);
	NVIC_EnableIRQ(TWI0_IRQn);

	if (twi_probe(TWI0, 0x6e) == TWI_SUCCESS) {
  40120c:	4628      	mov	r0, r5
  40120e:	4621      	mov	r1, r4
  401210:	4b24      	ldr	r3, [pc, #144]	; (4012a4 <main+0x124>)
  401212:	4798      	blx	r3
  401214:	b918      	cbnz	r0, 40121e <main+0x9e>
		printf("cmos sensor found\r\n");
  401216:	4824      	ldr	r0, [pc, #144]	; (4012a8 <main+0x128>)
  401218:	4b1d      	ldr	r3, [pc, #116]	; (401290 <main+0x110>)
  40121a:	4798      	blx	r3
  40121c:	e002      	b.n	401224 <main+0xa4>
	} else {
		printf("not found\r\n");
  40121e:	4823      	ldr	r0, [pc, #140]	; (4012ac <main+0x12c>)
  401220:	4b1b      	ldr	r3, [pc, #108]	; (401290 <main+0x110>)
  401222:	4798      	blx	r3
	twi_packet_t twi_cmos_packet;
	uint8_t cmos_reg_buf;
	uint32_t cmos_read_status;
	uint32_t i;
	
	twi_cmos_packet.addr_length = 1;
  401224:	2301      	movs	r3, #1
  401226:	9307      	str	r3, [sp, #28]
	twi_cmos_packet.chip = 0x6e;
  401228:	226e      	movs	r2, #110	; 0x6e
  40122a:	f88d 2028 	strb.w	r2, [sp, #40]	; 0x28
	twi_cmos_packet.length = 1;
  40122e:	9309      	str	r3, [sp, #36]	; 0x24
	twi_cmos_packet.buffer = &cmos_reg_buf;
  401230:	f10d 0317 	add.w	r3, sp, #23
  401234:	9308      	str	r3, [sp, #32]
	
	for (i = 0; i <= 0xfd; i++){
  401236:	2400      	movs	r4, #0
		twi_cmos_packet.addr[0] = i;
		cmos_read_status = twi_master_read(TWI0, &twi_cmos_packet);
  401238:	4f17      	ldr	r7, [pc, #92]	; (401298 <main+0x118>)
  40123a:	4e1d      	ldr	r6, [pc, #116]	; (4012b0 <main+0x130>)
		
		if (cmos_read_status == TWI_SUCCESS){
			printf("[%x]: %x\r\n", i, cmos_reg_buf);
		} else {
			printf("%x = NA\r\n", i);
  40123c:	4d1d      	ldr	r5, [pc, #116]	; (4012b4 <main+0x134>)
	twi_cmos_packet.chip = 0x6e;
	twi_cmos_packet.length = 1;
	twi_cmos_packet.buffer = &cmos_reg_buf;
	
	for (i = 0; i <= 0xfd; i++){
		twi_cmos_packet.addr[0] = i;
  40123e:	a90e      	add	r1, sp, #56	; 0x38
  401240:	f801 4d20 	strb.w	r4, [r1, #-32]!
		cmos_read_status = twi_master_read(TWI0, &twi_cmos_packet);
  401244:	4638      	mov	r0, r7
  401246:	47b0      	blx	r6
		
		if (cmos_read_status == TWI_SUCCESS){
  401248:	bbc0      	cbnz	r0, 4012bc <main+0x13c>
			printf("[%x]: %x\r\n", i, cmos_reg_buf);
  40124a:	481b      	ldr	r0, [pc, #108]	; (4012b8 <main+0x138>)
  40124c:	4621      	mov	r1, r4
  40124e:	f89d 2017 	ldrb.w	r2, [sp, #23]
  401252:	4b0f      	ldr	r3, [pc, #60]	; (401290 <main+0x110>)
  401254:	4798      	blx	r3
  401256:	e035      	b.n	4012c4 <main+0x144>
  401258:	00400129 	.word	0x00400129
  40125c:	00400219 	.word	0x00400219
  401260:	004008ed 	.word	0x004008ed
  401264:	400e0800 	.word	0x400e0800
  401268:	20000964 	.word	0x20000964
  40126c:	0040107d 	.word	0x0040107d
  401270:	20000960 	.word	0x20000960
  401274:	00400ff5 	.word	0x00400ff5
  401278:	2000095c 	.word	0x2000095c
  40127c:	07270e00 	.word	0x07270e00
  401280:	00400b71 	.word	0x00400b71
  401284:	20000448 	.word	0x20000448
  401288:	0040167d 	.word	0x0040167d
  40128c:	00404660 	.word	0x00404660
  401290:	004015b9 	.word	0x004015b9
  401294:	00061a80 	.word	0x00061a80
  401298:	40018000 	.word	0x40018000
  40129c:	00400985 	.word	0x00400985
  4012a0:	e000e100 	.word	0xe000e100
  4012a4:	00400b45 	.word	0x00400b45
  4012a8:	004046b8 	.word	0x004046b8
  4012ac:	004046cc 	.word	0x004046cc
  4012b0:	004009c5 	.word	0x004009c5
  4012b4:	004046e4 	.word	0x004046e4
  4012b8:	004046d8 	.word	0x004046d8
		} else {
			printf("%x = NA\r\n", i);
  4012bc:	4628      	mov	r0, r5
  4012be:	4621      	mov	r1, r4
  4012c0:	4b7b      	ldr	r3, [pc, #492]	; (4014b0 <main+0x330>)
  4012c2:	4798      	blx	r3
		}		
		delay_ms(5);
  4012c4:	f24a 706a 	movw	r0, #42858	; 0xa76a
  4012c8:	4b7a      	ldr	r3, [pc, #488]	; (4014b4 <main+0x334>)
  4012ca:	4798      	blx	r3
	twi_cmos_packet.addr_length = 1;
	twi_cmos_packet.chip = 0x6e;
	twi_cmos_packet.length = 1;
	twi_cmos_packet.buffer = &cmos_reg_buf;
	
	for (i = 0; i <= 0xfd; i++){
  4012cc:	3401      	adds	r4, #1
  4012ce:	2cfe      	cmp	r4, #254	; 0xfe
  4012d0:	d1b5      	bne.n	40123e <main+0xbe>
		} else {
			printf("%x = NA\r\n", i);
		}		
		delay_ms(5);
	}
	uint8_t cmos_val = 0x02;
  4012d2:	2302      	movs	r3, #2
  4012d4:	f88d 3016 	strb.w	r3, [sp, #22]
	twi_cmos_packet.addr[0] = 0x09;	
  4012d8:	2309      	movs	r3, #9
  4012da:	f88d 3018 	strb.w	r3, [sp, #24]
	twi_cmos_packet.buffer = &cmos_val;
  4012de:	f10d 0316 	add.w	r3, sp, #22
  4012e2:	9308      	str	r3, [sp, #32]
	twi_master_write(TWI0, &twi_cmos_packet);
  4012e4:	4d74      	ldr	r5, [pc, #464]	; (4014b8 <main+0x338>)
  4012e6:	4628      	mov	r0, r5
  4012e8:	a906      	add	r1, sp, #24
  4012ea:	4b74      	ldr	r3, [pc, #464]	; (4014bc <main+0x33c>)
  4012ec:	4798      	blx	r3
	delay_ms(5);
  4012ee:	f24a 706a 	movw	r0, #42858	; 0xa76a
  4012f2:	4c70      	ldr	r4, [pc, #448]	; (4014b4 <main+0x334>)
  4012f4:	47a0      	blx	r4
	
	cmos_read_status = twi_master_read(TWI0, &twi_cmos_packet);
  4012f6:	4628      	mov	r0, r5
  4012f8:	a906      	add	r1, sp, #24
  4012fa:	4b71      	ldr	r3, [pc, #452]	; (4014c0 <main+0x340>)
  4012fc:	4798      	blx	r3
	printf("read value [%x]: %x\r\n", twi_cmos_packet.addr[0], cmos_val);
  4012fe:	4871      	ldr	r0, [pc, #452]	; (4014c4 <main+0x344>)
  401300:	f89d 1018 	ldrb.w	r1, [sp, #24]
  401304:	f89d 2016 	ldrb.w	r2, [sp, #22]
  401308:	4b69      	ldr	r3, [pc, #420]	; (4014b0 <main+0x330>)
  40130a:	4798      	blx	r3
	delay_ms(50);
  40130c:	486e      	ldr	r0, [pc, #440]	; (4014c8 <main+0x348>)
  40130e:	47a0      	blx	r4
	
	// set to YUV422 QVGA mode
	cmos_write_regs( TWI0, p_cmos_conf );
  401310:	4628      	mov	r0, r5
  401312:	4b6e      	ldr	r3, [pc, #440]	; (4014cc <main+0x34c>)
  401314:	6819      	ldr	r1, [r3, #0]
  401316:	4b6e      	ldr	r3, [pc, #440]	; (4014d0 <main+0x350>)
  401318:	4798      	blx	r3
	//PMC->PMC_SCER = PMC_SCER_PCK0;
	//while (!(PMC->PMC_SCSR & PMC_SCSR_PCK0)) {
	//}


	delay_ms(3000);
  40131a:	486e      	ldr	r0, [pc, #440]	; (4014d4 <main+0x354>)
  40131c:	47a0      	blx	r4
}

static void init_vsync_interrupts(void)
{
	/* Initialize PIO interrupt handler, see PIO definition in conf_board.h */
	pio_handler_set(PIOA, ID_PIOA, PIO_PA15, PIO_DEFAULT, vsync_handler);
  40131e:	4c6e      	ldr	r4, [pc, #440]	; (4014d8 <main+0x358>)
  401320:	4b6e      	ldr	r3, [pc, #440]	; (4014dc <main+0x35c>)
  401322:	9300      	str	r3, [sp, #0]
  401324:	4620      	mov	r0, r4
  401326:	210b      	movs	r1, #11
  401328:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  40132c:	2300      	movs	r3, #0
  40132e:	4d6c      	ldr	r5, [pc, #432]	; (4014e0 <main+0x360>)
  401330:	47a8      	blx	r5
  401332:	f44f 6200 	mov.w	r2, #2048	; 0x800
  401336:	4b6b      	ldr	r3, [pc, #428]	; (4014e4 <main+0x364>)
  401338:	601a      	str	r2, [r3, #0]
}

static void pio_capture_init(Pio *p_pio, uint32_t ul_id)
{
	/* Enable peripheral clock */
	pmc_enable_periph_clk(ul_id);
  40133a:	200b      	movs	r0, #11
  40133c:	4b6a      	ldr	r3, [pc, #424]	; (4014e8 <main+0x368>)
  40133e:	4798      	blx	r3

	/* Disable pio capture so that DSIZE,ALWYS,HALFS and FRSTS can be changed */
	p_pio->PIO_PCMR &= ~((uint32_t)PIO_PCMR_PCEN);
  401340:	f8d4 3150 	ldr.w	r3, [r4, #336]	; 0x150
  401344:	f023 0301 	bic.w	r3, r3, #1
  401348:	f8c4 3150 	str.w	r3, [r4, #336]	; 0x150

	/* Disable rxbuff interrupt */
	p_pio->PIO_PCIDR |= PIO_PCIDR_RXBUFF;
  40134c:	f8d4 3158 	ldr.w	r3, [r4, #344]	; 0x158
  401350:	f043 0308 	orr.w	r3, r3, #8
  401354:	f8c4 3158 	str.w	r3, [r4, #344]	; 0x158

	/* 32bit width*/
	p_pio->PIO_PCMR &= ~((uint32_t)PIO_PCMR_DSIZE_Msk);
  401358:	f8d4 3150 	ldr.w	r3, [r4, #336]	; 0x150
  40135c:	f023 0330 	bic.w	r3, r3, #48	; 0x30
  401360:	f8c4 3150 	str.w	r3, [r4, #336]	; 0x150
	p_pio->PIO_PCMR |= PIO_PCMR_DSIZE_WORD;
  401364:	f8d4 3150 	ldr.w	r3, [r4, #336]	; 0x150
  401368:	f043 0320 	orr.w	r3, r3, #32
  40136c:	f8c4 3150 	str.w	r3, [r4, #336]	; 0x150

	/* Only HSYNC and VSYNC enabled */
	p_pio->PIO_PCMR &= ~((uint32_t)PIO_PCMR_ALWYS);	//set ALWYS = 0
  401370:	f8d4 3150 	ldr.w	r3, [r4, #336]	; 0x150
  401374:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  401378:	f8c4 3150 	str.w	r3, [r4, #336]	; 0x150
	p_pio->PIO_PCMR &= ~((uint32_t)PIO_PCMR_HALFS);
  40137c:	f8d4 3150 	ldr.w	r3, [r4, #336]	; 0x150
  401380:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
  401384:	f8c4 3150 	str.w	r3, [r4, #336]	; 0x150

	//#if !defined(DEFAULT_MODE_COLORED)
	/* Samples only data with even index */
	p_pio->PIO_PCMR |= PIO_PCMR_HALFS;				//set HALFS = 1
  401388:	f8d4 3150 	ldr.w	r3, [r4, #336]	; 0x150
  40138c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
  401390:	f8c4 3150 	str.w	r3, [r4, #336]	; 0x150
	p_pio->PIO_PCMR &= ~((uint32_t)PIO_PCMR_FRSTS);	//set FRSTS = 0
  401394:	f8d4 3150 	ldr.w	r3, [r4, #336]	; 0x150
  401398:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  40139c:	f8c4 3150 	str.w	r3, [r4, #336]	; 0x150
	init_vsync_interrupts();

	pio_capture_init(PIOA, ID_PIOA);
		
	// enable vsync interrupt
	pio_enable_interrupt(PIOA, PIO_PA15);
  4013a0:	4620      	mov	r0, r4
  4013a2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
  4013a6:	4b51      	ldr	r3, [pc, #324]	; (4014ec <main+0x36c>)
  4013a8:	4798      	blx	r3
	while (!g_ul_vsync_flag) {
  4013aa:	4b51      	ldr	r3, [pc, #324]	; (4014f0 <main+0x370>)
  4013ac:	681a      	ldr	r2, [r3, #0]
  4013ae:	2a00      	cmp	r2, #0
  4013b0:	d0fc      	beq.n	4013ac <main+0x22c>
	}
	printf("disabling vsync\r\n");
  4013b2:	4850      	ldr	r0, [pc, #320]	; (4014f4 <main+0x374>)
  4013b4:	4d3e      	ldr	r5, [pc, #248]	; (4014b0 <main+0x330>)
  4013b6:	47a8      	blx	r5
	pio_disable_interrupt(PIOA, PIO_PA15);
  4013b8:	4c47      	ldr	r4, [pc, #284]	; (4014d8 <main+0x358>)
  4013ba:	4620      	mov	r0, r4
  4013bc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
  4013c0:	4b4d      	ldr	r3, [pc, #308]	; (4014f8 <main+0x378>)
  4013c2:	4798      	blx	r3
	
	pio_capture_enable(PIOA);
  4013c4:	4620      	mov	r0, r4
  4013c6:	4b4d      	ldr	r3, [pc, #308]	; (4014fc <main+0x37c>)
  4013c8:	4798      	blx	r3
	
	//	============================================
	//	Configure the DMA (PDC) for PIODC transfer
	//	============================================	
    /* Get pointer to DACC PDC register base */
    g_p_piodc_pdc = pio_capture_get_pdc_base(PIOA);
  4013ca:	4620      	mov	r0, r4
  4013cc:	4b4c      	ldr	r3, [pc, #304]	; (401500 <main+0x380>)
  4013ce:	4798      	blx	r3
  4013d0:	4e4c      	ldr	r6, [pc, #304]	; (401504 <main+0x384>)
  4013d2:	6030      	str	r0, [r6, #0]
    /* Initialize PDC data packet for transfer */
    g_pdc_piodc_packet.ul_addr = g_p_capture;
  4013d4:	494c      	ldr	r1, [pc, #304]	; (401508 <main+0x388>)
  4013d6:	4b4d      	ldr	r3, [pc, #308]	; (40150c <main+0x38c>)
  4013d8:	681b      	ldr	r3, [r3, #0]
  4013da:	600b      	str	r3, [r1, #0]
    g_pdc_piodc_packet.ul_size = (g_us_cap_line*g_us_cap_rows)>>2;	// divide by 4 because piodc samples 4 clk edges to form 32bit word
  4013dc:	4b4c      	ldr	r3, [pc, #304]	; (401510 <main+0x390>)
  4013de:	881a      	ldrh	r2, [r3, #0]
  4013e0:	4b4c      	ldr	r3, [pc, #304]	; (401514 <main+0x394>)
  4013e2:	881b      	ldrh	r3, [r3, #0]
  4013e4:	fb03 f302 	mul.w	r3, r3, r2
  4013e8:	109b      	asrs	r3, r3, #2
  4013ea:	604b      	str	r3, [r1, #4]
    /* Configure PDC for data receive */
    pdc_rx_init(g_p_piodc_pdc, &g_pdc_piodc_packet, NULL);
  4013ec:	2200      	movs	r2, #0
  4013ee:	4b4a      	ldr	r3, [pc, #296]	; (401518 <main+0x398>)
  4013f0:	4798      	blx	r3
    /* Enable PDC transfers */
    pdc_enable_transfer(g_p_piodc_pdc, PERIPH_PTCR_RXTEN);
  4013f2:	6830      	ldr	r0, [r6, #0]
  4013f4:	2101      	movs	r1, #1
  4013f6:	4b49      	ldr	r3, [pc, #292]	; (40151c <main+0x39c>)
  4013f8:	4798      	blx	r3

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
  4013fa:	4b3a      	ldr	r3, [pc, #232]	; (4014e4 <main+0x364>)
  4013fc:	f44f 6200 	mov.w	r2, #2048	; 0x800
  401400:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
  401404:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
  401408:	2100      	movs	r1, #0
  40140a:	f883 130b 	strb.w	r1, [r3, #779]	; 0x30b
    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
/*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  40140e:	601a      	str	r2, [r3, #0]
	//	============================================	
	NVIC_DisableIRQ(PIOA_IRQn);
	NVIC_ClearPendingIRQ(PIOA_IRQn);
	NVIC_SetPriority(PIOA_IRQn, 0);
	NVIC_EnableIRQ(PIOA_IRQn);
	pio_capture_enable_interrupt(PIOA, PIO_PCIER_RXBUFF);	
  401410:	4620      	mov	r0, r4
  401412:	2108      	movs	r1, #8
  401414:	4b42      	ldr	r3, [pc, #264]	; (401520 <main+0x3a0>)
  401416:	4798      	blx	r3
	pio_capture_handler_set(PIOA_Capture_Handler);
  401418:	4842      	ldr	r0, [pc, #264]	; (401524 <main+0x3a4>)
  40141a:	4b43      	ldr	r3, [pc, #268]	; (401528 <main+0x3a8>)
  40141c:	4798      	blx	r3
	

	printf("entering forever loop\r\n");
  40141e:	4843      	ldr	r0, [pc, #268]	; (40152c <main+0x3ac>)
  401420:	47a8      	blx	r5
	
	uint32_t ul_cursor;

	printf("busy waiting\r\n");
  401422:	4843      	ldr	r0, [pc, #268]	; (401530 <main+0x3b0>)
  401424:	47a8      	blx	r5
			g_process_count++;

			//process 
			printf("\r\nProcess #%d\r\n", g_process_count);
			printf("PingPongStatus: %d\r\n", g_pingpong_status);
			printf("address %x", &g_p_process[0]);
  401426:	4c43      	ldr	r4, [pc, #268]	; (401534 <main+0x3b4>)
			for (ul_cursor = (IMAGE_SEGMENT_PIXELS); ul_cursor != 0; ul_cursor -= 1, g_p_process += 1) {
				printf("%#02x,", *g_p_process);
  401428:	4f43      	ldr	r7, [pc, #268]	; (401538 <main+0x3b8>)
		}

		if (g_process_count >= IMAGE_SEGMENT){
			

			pdc_disable_transfer(PIOA, PERIPH_PTCR_RXTDIS);
  40142a:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 4014d8 <main+0x358>
	printf("busy waiting\r\n");


	while (1){

		if (g_begin_process_flag){
  40142e:	f8df 9134 	ldr.w	r9, [pc, #308]	; 401564 <main+0x3e4>
			g_process_count++;
  401432:	f8df 812c 	ldr.w	r8, [pc, #300]	; 401560 <main+0x3e0>
	printf("busy waiting\r\n");


	while (1){

		if (g_begin_process_flag){
  401436:	f899 3000 	ldrb.w	r3, [r9]
  40143a:	b30b      	cbz	r3, 401480 <main+0x300>
			g_process_count++;
  40143c:	f898 1000 	ldrb.w	r1, [r8]
  401440:	3101      	adds	r1, #1
  401442:	b2c9      	uxtb	r1, r1
  401444:	f888 1000 	strb.w	r1, [r8]

			//process 
			printf("\r\nProcess #%d\r\n", g_process_count);
  401448:	483c      	ldr	r0, [pc, #240]	; (40153c <main+0x3bc>)
  40144a:	4d19      	ldr	r5, [pc, #100]	; (4014b0 <main+0x330>)
  40144c:	47a8      	blx	r5
			printf("PingPongStatus: %d\r\n", g_pingpong_status);
  40144e:	483c      	ldr	r0, [pc, #240]	; (401540 <main+0x3c0>)
  401450:	4b3c      	ldr	r3, [pc, #240]	; (401544 <main+0x3c4>)
  401452:	7819      	ldrb	r1, [r3, #0]
  401454:	47a8      	blx	r5
			printf("address %x", &g_p_process[0]);
  401456:	483c      	ldr	r0, [pc, #240]	; (401548 <main+0x3c8>)
  401458:	6821      	ldr	r1, [r4, #0]
  40145a:	47a8      	blx	r5
  40145c:	f44f 4516 	mov.w	r5, #38400	; 0x9600
			for (ul_cursor = (IMAGE_SEGMENT_PIXELS); ul_cursor != 0; ul_cursor -= 1, g_p_process += 1) {
				printf("%#02x,", *g_p_process);
  401460:	4e13      	ldr	r6, [pc, #76]	; (4014b0 <main+0x330>)
  401462:	6823      	ldr	r3, [r4, #0]
  401464:	7819      	ldrb	r1, [r3, #0]
  401466:	4638      	mov	r0, r7
  401468:	47b0      	blx	r6

			//process 
			printf("\r\nProcess #%d\r\n", g_process_count);
			printf("PingPongStatus: %d\r\n", g_pingpong_status);
			printf("address %x", &g_p_process[0]);
			for (ul_cursor = (IMAGE_SEGMENT_PIXELS); ul_cursor != 0; ul_cursor -= 1, g_p_process += 1) {
  40146a:	6823      	ldr	r3, [r4, #0]
  40146c:	3301      	adds	r3, #1
  40146e:	6023      	str	r3, [r4, #0]
  401470:	3d01      	subs	r5, #1
  401472:	d1f6      	bne.n	401462 <main+0x2e2>
				printf("%#02x,", *g_p_process);
			}
			printf("done\r\n");
  401474:	4835      	ldr	r0, [pc, #212]	; (40154c <main+0x3cc>)
  401476:	4b0e      	ldr	r3, [pc, #56]	; (4014b0 <main+0x330>)
  401478:	4798      	blx	r3

			g_begin_process_flag = false;
  40147a:	2300      	movs	r3, #0
  40147c:	f889 3000 	strb.w	r3, [r9]
		}

		if (g_process_count >= IMAGE_SEGMENT){
  401480:	f898 3000 	ldrb.w	r3, [r8]
  401484:	2b01      	cmp	r3, #1
  401486:	d9d6      	bls.n	401436 <main+0x2b6>
			

			pdc_disable_transfer(PIOA, PERIPH_PTCR_RXTDIS);
  401488:	4650      	mov	r0, sl
  40148a:	2102      	movs	r1, #2
  40148c:	4b30      	ldr	r3, [pc, #192]	; (401550 <main+0x3d0>)
  40148e:	4798      	blx	r3

			pio_capture_disable(PIOA);
  401490:	4650      	mov	r0, sl
  401492:	4b30      	ldr	r3, [pc, #192]	; (401554 <main+0x3d4>)
  401494:	4798      	blx	r3

			pio_capture_disable_interrupt(PIOA, PIO_PCIER_RXBUFF);
  401496:	4650      	mov	r0, sl
  401498:	2108      	movs	r1, #8
  40149a:	4b2f      	ldr	r3, [pc, #188]	; (401558 <main+0x3d8>)
  40149c:	4798      	blx	r3
			
			printf("\rFinished\r\n");
  40149e:	482f      	ldr	r0, [pc, #188]	; (40155c <main+0x3dc>)
  4014a0:	4b03      	ldr	r3, [pc, #12]	; (4014b0 <main+0x330>)
  4014a2:	4798      	blx	r3

			g_process_count = 0;
  4014a4:	2300      	movs	r3, #0
  4014a6:	4a2e      	ldr	r2, [pc, #184]	; (401560 <main+0x3e0>)
  4014a8:	7013      	strb	r3, [r2, #0]
			g_begin_process_flag = false;
  4014aa:	4a2e      	ldr	r2, [pc, #184]	; (401564 <main+0x3e4>)
  4014ac:	7013      	strb	r3, [r2, #0]
  4014ae:	e7be      	b.n	40142e <main+0x2ae>
  4014b0:	004015b9 	.word	0x004015b9
  4014b4:	20000001 	.word	0x20000001
  4014b8:	40018000 	.word	0x40018000
  4014bc:	00400aa5 	.word	0x00400aa5
  4014c0:	004009c5 	.word	0x004009c5
  4014c4:	004046f0 	.word	0x004046f0
  4014c8:	00068a1c 	.word	0x00068a1c
  4014cc:	20000018 	.word	0x20000018
  4014d0:	004010fd 	.word	0x004010fd
  4014d4:	01885e6e 	.word	0x01885e6e
  4014d8:	400e0e00 	.word	0x400e0e00
  4014dc:	00400ead 	.word	0x00400ead
  4014e0:	00400779 	.word	0x00400779
  4014e4:	e000e100 	.word	0xe000e100
  4014e8:	004008ed 	.word	0x004008ed
  4014ec:	004004a9 	.word	0x004004a9
  4014f0:	20000920 	.word	0x20000920
  4014f4:	00404708 	.word	0x00404708
  4014f8:	004004b1 	.word	0x004004b1
  4014fc:	004006bd 	.word	0x004006bd
  401500:	00400709 	.word	0x00400709
  401504:	20013574 	.word	0x20013574
  401508:	2001356c 	.word	0x2001356c
  40150c:	2000001c 	.word	0x2000001c
  401510:	20000016 	.word	0x20000016
  401514:	20000014 	.word	0x20000014
  401518:	00400355 	.word	0x00400355
  40151c:	0040036d 	.word	0x0040036d
  401520:	004006ed 	.word	0x004006ed
  401524:	00400eb9 	.word	0x00400eb9
  401528:	004007b9 	.word	0x004007b9
  40152c:	0040471c 	.word	0x0040471c
  401530:	00404734 	.word	0x00404734
  401534:	20000010 	.word	0x20000010
  401538:	00404778 	.word	0x00404778
  40153c:	00404744 	.word	0x00404744
  401540:	00404754 	.word	0x00404754
  401544:	20000924 	.word	0x20000924
  401548:	0040476c 	.word	0x0040476c
  40154c:	00404780 	.word	0x00404780
  401550:	00400379 	.word	0x00400379
  401554:	004006d5 	.word	0x004006d5
  401558:	004006f9 	.word	0x004006f9
  40155c:	00404788 	.word	0x00404788
  401560:	20000925 	.word	0x20000925
  401564:	2000091c 	.word	0x2000091c

00401568 <__libc_init_array>:
  401568:	b570      	push	{r4, r5, r6, lr}
  40156a:	4e0f      	ldr	r6, [pc, #60]	; (4015a8 <__libc_init_array+0x40>)
  40156c:	4d0f      	ldr	r5, [pc, #60]	; (4015ac <__libc_init_array+0x44>)
  40156e:	1b76      	subs	r6, r6, r5
  401570:	10b6      	asrs	r6, r6, #2
  401572:	bf18      	it	ne
  401574:	2400      	movne	r4, #0
  401576:	d005      	beq.n	401584 <__libc_init_array+0x1c>
  401578:	3401      	adds	r4, #1
  40157a:	f855 3b04 	ldr.w	r3, [r5], #4
  40157e:	4798      	blx	r3
  401580:	42a6      	cmp	r6, r4
  401582:	d1f9      	bne.n	401578 <__libc_init_array+0x10>
  401584:	4e0a      	ldr	r6, [pc, #40]	; (4015b0 <__libc_init_array+0x48>)
  401586:	4d0b      	ldr	r5, [pc, #44]	; (4015b4 <__libc_init_array+0x4c>)
  401588:	1b76      	subs	r6, r6, r5
  40158a:	f003 f92f 	bl	4047ec <_init>
  40158e:	10b6      	asrs	r6, r6, #2
  401590:	bf18      	it	ne
  401592:	2400      	movne	r4, #0
  401594:	d006      	beq.n	4015a4 <__libc_init_array+0x3c>
  401596:	3401      	adds	r4, #1
  401598:	f855 3b04 	ldr.w	r3, [r5], #4
  40159c:	4798      	blx	r3
  40159e:	42a6      	cmp	r6, r4
  4015a0:	d1f9      	bne.n	401596 <__libc_init_array+0x2e>
  4015a2:	bd70      	pop	{r4, r5, r6, pc}
  4015a4:	bd70      	pop	{r4, r5, r6, pc}
  4015a6:	bf00      	nop
  4015a8:	004047f8 	.word	0x004047f8
  4015ac:	004047f8 	.word	0x004047f8
  4015b0:	00404800 	.word	0x00404800
  4015b4:	004047f8 	.word	0x004047f8

004015b8 <iprintf>:
  4015b8:	b40f      	push	{r0, r1, r2, r3}
  4015ba:	b500      	push	{lr}
  4015bc:	4907      	ldr	r1, [pc, #28]	; (4015dc <iprintf+0x24>)
  4015be:	b083      	sub	sp, #12
  4015c0:	ab04      	add	r3, sp, #16
  4015c2:	6808      	ldr	r0, [r1, #0]
  4015c4:	f853 2b04 	ldr.w	r2, [r3], #4
  4015c8:	6881      	ldr	r1, [r0, #8]
  4015ca:	9301      	str	r3, [sp, #4]
  4015cc:	f000 f916 	bl	4017fc <_vfiprintf_r>
  4015d0:	b003      	add	sp, #12
  4015d2:	f85d eb04 	ldr.w	lr, [sp], #4
  4015d6:	b004      	add	sp, #16
  4015d8:	4770      	bx	lr
  4015da:	bf00      	nop
  4015dc:	20000448 	.word	0x20000448

004015e0 <memset>:
  4015e0:	b470      	push	{r4, r5, r6}
  4015e2:	0784      	lsls	r4, r0, #30
  4015e4:	d046      	beq.n	401674 <memset+0x94>
  4015e6:	1e54      	subs	r4, r2, #1
  4015e8:	2a00      	cmp	r2, #0
  4015ea:	d041      	beq.n	401670 <memset+0x90>
  4015ec:	b2cd      	uxtb	r5, r1
  4015ee:	4603      	mov	r3, r0
  4015f0:	e002      	b.n	4015f8 <memset+0x18>
  4015f2:	1e62      	subs	r2, r4, #1
  4015f4:	b3e4      	cbz	r4, 401670 <memset+0x90>
  4015f6:	4614      	mov	r4, r2
  4015f8:	f803 5b01 	strb.w	r5, [r3], #1
  4015fc:	079a      	lsls	r2, r3, #30
  4015fe:	d1f8      	bne.n	4015f2 <memset+0x12>
  401600:	2c03      	cmp	r4, #3
  401602:	d92e      	bls.n	401662 <memset+0x82>
  401604:	b2cd      	uxtb	r5, r1
  401606:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
  40160a:	2c0f      	cmp	r4, #15
  40160c:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
  401610:	d919      	bls.n	401646 <memset+0x66>
  401612:	f103 0210 	add.w	r2, r3, #16
  401616:	4626      	mov	r6, r4
  401618:	3e10      	subs	r6, #16
  40161a:	2e0f      	cmp	r6, #15
  40161c:	f842 5c10 	str.w	r5, [r2, #-16]
  401620:	f842 5c0c 	str.w	r5, [r2, #-12]
  401624:	f842 5c08 	str.w	r5, [r2, #-8]
  401628:	f842 5c04 	str.w	r5, [r2, #-4]
  40162c:	f102 0210 	add.w	r2, r2, #16
  401630:	d8f2      	bhi.n	401618 <memset+0x38>
  401632:	f1a4 0210 	sub.w	r2, r4, #16
  401636:	f022 020f 	bic.w	r2, r2, #15
  40163a:	f004 040f 	and.w	r4, r4, #15
  40163e:	3210      	adds	r2, #16
  401640:	2c03      	cmp	r4, #3
  401642:	4413      	add	r3, r2
  401644:	d90d      	bls.n	401662 <memset+0x82>
  401646:	461e      	mov	r6, r3
  401648:	4622      	mov	r2, r4
  40164a:	3a04      	subs	r2, #4
  40164c:	2a03      	cmp	r2, #3
  40164e:	f846 5b04 	str.w	r5, [r6], #4
  401652:	d8fa      	bhi.n	40164a <memset+0x6a>
  401654:	1f22      	subs	r2, r4, #4
  401656:	f022 0203 	bic.w	r2, r2, #3
  40165a:	3204      	adds	r2, #4
  40165c:	4413      	add	r3, r2
  40165e:	f004 0403 	and.w	r4, r4, #3
  401662:	b12c      	cbz	r4, 401670 <memset+0x90>
  401664:	b2c9      	uxtb	r1, r1
  401666:	441c      	add	r4, r3
  401668:	f803 1b01 	strb.w	r1, [r3], #1
  40166c:	42a3      	cmp	r3, r4
  40166e:	d1fb      	bne.n	401668 <memset+0x88>
  401670:	bc70      	pop	{r4, r5, r6}
  401672:	4770      	bx	lr
  401674:	4614      	mov	r4, r2
  401676:	4603      	mov	r3, r0
  401678:	e7c2      	b.n	401600 <memset+0x20>
  40167a:	bf00      	nop

0040167c <setbuf>:
  40167c:	2900      	cmp	r1, #0
  40167e:	bf0c      	ite	eq
  401680:	2202      	moveq	r2, #2
  401682:	2200      	movne	r2, #0
  401684:	f44f 6380 	mov.w	r3, #1024	; 0x400
  401688:	f000 b800 	b.w	40168c <setvbuf>

0040168c <setvbuf>:
  40168c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  401690:	4c3a      	ldr	r4, [pc, #232]	; (40177c <setvbuf+0xf0>)
  401692:	6826      	ldr	r6, [r4, #0]
  401694:	460d      	mov	r5, r1
  401696:	4604      	mov	r4, r0
  401698:	4690      	mov	r8, r2
  40169a:	461f      	mov	r7, r3
  40169c:	b116      	cbz	r6, 4016a4 <setvbuf+0x18>
  40169e:	6bb3      	ldr	r3, [r6, #56]	; 0x38
  4016a0:	2b00      	cmp	r3, #0
  4016a2:	d03c      	beq.n	40171e <setvbuf+0x92>
  4016a4:	f1b8 0f02 	cmp.w	r8, #2
  4016a8:	d82f      	bhi.n	40170a <setvbuf+0x7e>
  4016aa:	2f00      	cmp	r7, #0
  4016ac:	db2d      	blt.n	40170a <setvbuf+0x7e>
  4016ae:	4621      	mov	r1, r4
  4016b0:	4630      	mov	r0, r6
  4016b2:	f001 f803 	bl	4026bc <_fflush_r>
  4016b6:	89a1      	ldrh	r1, [r4, #12]
  4016b8:	2300      	movs	r3, #0
  4016ba:	6063      	str	r3, [r4, #4]
  4016bc:	61a3      	str	r3, [r4, #24]
  4016be:	060b      	lsls	r3, r1, #24
  4016c0:	d427      	bmi.n	401712 <setvbuf+0x86>
  4016c2:	f021 0183 	bic.w	r1, r1, #131	; 0x83
  4016c6:	b289      	uxth	r1, r1
  4016c8:	f1b8 0f02 	cmp.w	r8, #2
  4016cc:	81a1      	strh	r1, [r4, #12]
  4016ce:	d02a      	beq.n	401726 <setvbuf+0x9a>
  4016d0:	2d00      	cmp	r5, #0
  4016d2:	d036      	beq.n	401742 <setvbuf+0xb6>
  4016d4:	f1b8 0f01 	cmp.w	r8, #1
  4016d8:	d011      	beq.n	4016fe <setvbuf+0x72>
  4016da:	b289      	uxth	r1, r1
  4016dc:	f001 0008 	and.w	r0, r1, #8
  4016e0:	4b27      	ldr	r3, [pc, #156]	; (401780 <setvbuf+0xf4>)
  4016e2:	63f3      	str	r3, [r6, #60]	; 0x3c
  4016e4:	b280      	uxth	r0, r0
  4016e6:	6025      	str	r5, [r4, #0]
  4016e8:	6125      	str	r5, [r4, #16]
  4016ea:	6167      	str	r7, [r4, #20]
  4016ec:	b178      	cbz	r0, 40170e <setvbuf+0x82>
  4016ee:	f011 0f03 	tst.w	r1, #3
  4016f2:	bf18      	it	ne
  4016f4:	2700      	movne	r7, #0
  4016f6:	60a7      	str	r7, [r4, #8]
  4016f8:	2000      	movs	r0, #0
  4016fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4016fe:	f041 0101 	orr.w	r1, r1, #1
  401702:	427b      	negs	r3, r7
  401704:	81a1      	strh	r1, [r4, #12]
  401706:	61a3      	str	r3, [r4, #24]
  401708:	e7e7      	b.n	4016da <setvbuf+0x4e>
  40170a:	f04f 30ff 	mov.w	r0, #4294967295
  40170e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  401712:	6921      	ldr	r1, [r4, #16]
  401714:	4630      	mov	r0, r6
  401716:	f001 f93d 	bl	402994 <_free_r>
  40171a:	89a1      	ldrh	r1, [r4, #12]
  40171c:	e7d1      	b.n	4016c2 <setvbuf+0x36>
  40171e:	4630      	mov	r0, r6
  401720:	f001 f860 	bl	4027e4 <__sinit>
  401724:	e7be      	b.n	4016a4 <setvbuf+0x18>
  401726:	2000      	movs	r0, #0
  401728:	f104 0343 	add.w	r3, r4, #67	; 0x43
  40172c:	f041 0102 	orr.w	r1, r1, #2
  401730:	2500      	movs	r5, #0
  401732:	2201      	movs	r2, #1
  401734:	81a1      	strh	r1, [r4, #12]
  401736:	60a5      	str	r5, [r4, #8]
  401738:	6023      	str	r3, [r4, #0]
  40173a:	6123      	str	r3, [r4, #16]
  40173c:	6162      	str	r2, [r4, #20]
  40173e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  401742:	2f00      	cmp	r7, #0
  401744:	bf08      	it	eq
  401746:	f44f 6780 	moveq.w	r7, #1024	; 0x400
  40174a:	4638      	mov	r0, r7
  40174c:	f001 fc2a 	bl	402fa4 <malloc>
  401750:	4605      	mov	r5, r0
  401752:	b128      	cbz	r0, 401760 <setvbuf+0xd4>
  401754:	89a1      	ldrh	r1, [r4, #12]
  401756:	f041 0180 	orr.w	r1, r1, #128	; 0x80
  40175a:	b289      	uxth	r1, r1
  40175c:	81a1      	strh	r1, [r4, #12]
  40175e:	e7b9      	b.n	4016d4 <setvbuf+0x48>
  401760:	f44f 6080 	mov.w	r0, #1024	; 0x400
  401764:	f001 fc1e 	bl	402fa4 <malloc>
  401768:	4605      	mov	r5, r0
  40176a:	b918      	cbnz	r0, 401774 <setvbuf+0xe8>
  40176c:	89a1      	ldrh	r1, [r4, #12]
  40176e:	f04f 30ff 	mov.w	r0, #4294967295
  401772:	e7d9      	b.n	401728 <setvbuf+0x9c>
  401774:	f44f 6780 	mov.w	r7, #1024	; 0x400
  401778:	e7ec      	b.n	401754 <setvbuf+0xc8>
  40177a:	bf00      	nop
  40177c:	20000448 	.word	0x20000448
  401780:	004026e9 	.word	0x004026e9

00401784 <__sprint_r.part.0>:
  401784:	6e4b      	ldr	r3, [r1, #100]	; 0x64
  401786:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  40178a:	049c      	lsls	r4, r3, #18
  40178c:	460f      	mov	r7, r1
  40178e:	4692      	mov	sl, r2
  401790:	d52b      	bpl.n	4017ea <__sprint_r.part.0+0x66>
  401792:	6893      	ldr	r3, [r2, #8]
  401794:	6812      	ldr	r2, [r2, #0]
  401796:	b333      	cbz	r3, 4017e6 <__sprint_r.part.0+0x62>
  401798:	4680      	mov	r8, r0
  40179a:	f102 0908 	add.w	r9, r2, #8
  40179e:	e919 0060 	ldmdb	r9, {r5, r6}
  4017a2:	08b6      	lsrs	r6, r6, #2
  4017a4:	d017      	beq.n	4017d6 <__sprint_r.part.0+0x52>
  4017a6:	3d04      	subs	r5, #4
  4017a8:	2400      	movs	r4, #0
  4017aa:	e001      	b.n	4017b0 <__sprint_r.part.0+0x2c>
  4017ac:	42a6      	cmp	r6, r4
  4017ae:	d010      	beq.n	4017d2 <__sprint_r.part.0+0x4e>
  4017b0:	4640      	mov	r0, r8
  4017b2:	f855 1f04 	ldr.w	r1, [r5, #4]!
  4017b6:	463a      	mov	r2, r7
  4017b8:	f001 f88c 	bl	4028d4 <_fputwc_r>
  4017bc:	1c43      	adds	r3, r0, #1
  4017be:	f104 0401 	add.w	r4, r4, #1
  4017c2:	d1f3      	bne.n	4017ac <__sprint_r.part.0+0x28>
  4017c4:	2300      	movs	r3, #0
  4017c6:	f8ca 3008 	str.w	r3, [sl, #8]
  4017ca:	f8ca 3004 	str.w	r3, [sl, #4]
  4017ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4017d2:	f8da 3008 	ldr.w	r3, [sl, #8]
  4017d6:	eba3 0386 	sub.w	r3, r3, r6, lsl #2
  4017da:	f8ca 3008 	str.w	r3, [sl, #8]
  4017de:	f109 0908 	add.w	r9, r9, #8
  4017e2:	2b00      	cmp	r3, #0
  4017e4:	d1db      	bne.n	40179e <__sprint_r.part.0+0x1a>
  4017e6:	2000      	movs	r0, #0
  4017e8:	e7ec      	b.n	4017c4 <__sprint_r.part.0+0x40>
  4017ea:	f001 f9ab 	bl	402b44 <__sfvwrite_r>
  4017ee:	2300      	movs	r3, #0
  4017f0:	f8ca 3008 	str.w	r3, [sl, #8]
  4017f4:	f8ca 3004 	str.w	r3, [sl, #4]
  4017f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

004017fc <_vfiprintf_r>:
  4017fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  401800:	b0ab      	sub	sp, #172	; 0xac
  401802:	461c      	mov	r4, r3
  401804:	9100      	str	r1, [sp, #0]
  401806:	4693      	mov	fp, r2
  401808:	9304      	str	r3, [sp, #16]
  40180a:	9001      	str	r0, [sp, #4]
  40180c:	b118      	cbz	r0, 401816 <_vfiprintf_r+0x1a>
  40180e:	6b83      	ldr	r3, [r0, #56]	; 0x38
  401810:	2b00      	cmp	r3, #0
  401812:	f000 80e3 	beq.w	4019dc <_vfiprintf_r+0x1e0>
  401816:	9b00      	ldr	r3, [sp, #0]
  401818:	8999      	ldrh	r1, [r3, #12]
  40181a:	b28a      	uxth	r2, r1
  40181c:	0490      	lsls	r0, r2, #18
  40181e:	d408      	bmi.n	401832 <_vfiprintf_r+0x36>
  401820:	4618      	mov	r0, r3
  401822:	6e5b      	ldr	r3, [r3, #100]	; 0x64
  401824:	f441 5200 	orr.w	r2, r1, #8192	; 0x2000
  401828:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  40182c:	8182      	strh	r2, [r0, #12]
  40182e:	6643      	str	r3, [r0, #100]	; 0x64
  401830:	b292      	uxth	r2, r2
  401832:	0711      	lsls	r1, r2, #28
  401834:	f140 80b2 	bpl.w	40199c <_vfiprintf_r+0x1a0>
  401838:	9b00      	ldr	r3, [sp, #0]
  40183a:	691b      	ldr	r3, [r3, #16]
  40183c:	2b00      	cmp	r3, #0
  40183e:	f000 80ad 	beq.w	40199c <_vfiprintf_r+0x1a0>
  401842:	f002 021a 	and.w	r2, r2, #26
  401846:	2a0a      	cmp	r2, #10
  401848:	f000 80b4 	beq.w	4019b4 <_vfiprintf_r+0x1b8>
  40184c:	2300      	movs	r3, #0
  40184e:	f10d 0a68 	add.w	sl, sp, #104	; 0x68
  401852:	9309      	str	r3, [sp, #36]	; 0x24
  401854:	930f      	str	r3, [sp, #60]	; 0x3c
  401856:	930e      	str	r3, [sp, #56]	; 0x38
  401858:	9302      	str	r3, [sp, #8]
  40185a:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
  40185e:	4654      	mov	r4, sl
  401860:	f89b 3000 	ldrb.w	r3, [fp]
  401864:	2b00      	cmp	r3, #0
  401866:	f000 84a3 	beq.w	4021b0 <_vfiprintf_r+0x9b4>
  40186a:	2b25      	cmp	r3, #37	; 0x25
  40186c:	f000 84a0 	beq.w	4021b0 <_vfiprintf_r+0x9b4>
  401870:	465a      	mov	r2, fp
  401872:	e001      	b.n	401878 <_vfiprintf_r+0x7c>
  401874:	2b25      	cmp	r3, #37	; 0x25
  401876:	d003      	beq.n	401880 <_vfiprintf_r+0x84>
  401878:	f812 3f01 	ldrb.w	r3, [r2, #1]!
  40187c:	2b00      	cmp	r3, #0
  40187e:	d1f9      	bne.n	401874 <_vfiprintf_r+0x78>
  401880:	ebcb 0602 	rsb	r6, fp, r2
  401884:	4615      	mov	r5, r2
  401886:	b196      	cbz	r6, 4018ae <_vfiprintf_r+0xb2>
  401888:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  40188a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  40188c:	f8c4 b000 	str.w	fp, [r4]
  401890:	3301      	adds	r3, #1
  401892:	4432      	add	r2, r6
  401894:	2b07      	cmp	r3, #7
  401896:	6066      	str	r6, [r4, #4]
  401898:	920f      	str	r2, [sp, #60]	; 0x3c
  40189a:	930e      	str	r3, [sp, #56]	; 0x38
  40189c:	dd79      	ble.n	401992 <_vfiprintf_r+0x196>
  40189e:	2a00      	cmp	r2, #0
  4018a0:	f040 84af 	bne.w	402202 <_vfiprintf_r+0xa06>
  4018a4:	9b02      	ldr	r3, [sp, #8]
  4018a6:	920e      	str	r2, [sp, #56]	; 0x38
  4018a8:	4433      	add	r3, r6
  4018aa:	4654      	mov	r4, sl
  4018ac:	9302      	str	r3, [sp, #8]
  4018ae:	782b      	ldrb	r3, [r5, #0]
  4018b0:	2b00      	cmp	r3, #0
  4018b2:	f000 8360 	beq.w	401f76 <_vfiprintf_r+0x77a>
  4018b6:	2100      	movs	r1, #0
  4018b8:	f04f 0300 	mov.w	r3, #0
  4018bc:	f04f 3cff 	mov.w	ip, #4294967295
  4018c0:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
  4018c4:	1c68      	adds	r0, r5, #1
  4018c6:	786b      	ldrb	r3, [r5, #1]
  4018c8:	4688      	mov	r8, r1
  4018ca:	460d      	mov	r5, r1
  4018cc:	4666      	mov	r6, ip
  4018ce:	f100 0b01 	add.w	fp, r0, #1
  4018d2:	f1a3 0220 	sub.w	r2, r3, #32
  4018d6:	2a58      	cmp	r2, #88	; 0x58
  4018d8:	f200 82ab 	bhi.w	401e32 <_vfiprintf_r+0x636>
  4018dc:	e8df f012 	tbh	[pc, r2, lsl #1]
  4018e0:	02a9029b 	.word	0x02a9029b
  4018e4:	02a302a9 	.word	0x02a302a9
  4018e8:	02a902a9 	.word	0x02a902a9
  4018ec:	02a902a9 	.word	0x02a902a9
  4018f0:	02a902a9 	.word	0x02a902a9
  4018f4:	02620255 	.word	0x02620255
  4018f8:	010d02a9 	.word	0x010d02a9
  4018fc:	02a9026e 	.word	0x02a9026e
  401900:	012f0129 	.word	0x012f0129
  401904:	012f012f 	.word	0x012f012f
  401908:	012f012f 	.word	0x012f012f
  40190c:	012f012f 	.word	0x012f012f
  401910:	012f012f 	.word	0x012f012f
  401914:	02a902a9 	.word	0x02a902a9
  401918:	02a902a9 	.word	0x02a902a9
  40191c:	02a902a9 	.word	0x02a902a9
  401920:	02a902a9 	.word	0x02a902a9
  401924:	02a902a9 	.word	0x02a902a9
  401928:	02a9013d 	.word	0x02a9013d
  40192c:	02a902a9 	.word	0x02a902a9
  401930:	02a902a9 	.word	0x02a902a9
  401934:	02a902a9 	.word	0x02a902a9
  401938:	02a902a9 	.word	0x02a902a9
  40193c:	017402a9 	.word	0x017402a9
  401940:	02a902a9 	.word	0x02a902a9
  401944:	02a902a9 	.word	0x02a902a9
  401948:	018b02a9 	.word	0x018b02a9
  40194c:	02a902a9 	.word	0x02a902a9
  401950:	02a901a3 	.word	0x02a901a3
  401954:	02a902a9 	.word	0x02a902a9
  401958:	02a902a9 	.word	0x02a902a9
  40195c:	02a902a9 	.word	0x02a902a9
  401960:	02a902a9 	.word	0x02a902a9
  401964:	01c702a9 	.word	0x01c702a9
  401968:	02a901da 	.word	0x02a901da
  40196c:	02a902a9 	.word	0x02a902a9
  401970:	01da0123 	.word	0x01da0123
  401974:	02a902a9 	.word	0x02a902a9
  401978:	02a9024c 	.word	0x02a9024c
  40197c:	0113028a 	.word	0x0113028a
  401980:	020701f3 	.word	0x020701f3
  401984:	020d02a9 	.word	0x020d02a9
  401988:	008102a9 	.word	0x008102a9
  40198c:	02a902a9 	.word	0x02a902a9
  401990:	0233      	.short	0x0233
  401992:	3408      	adds	r4, #8
  401994:	9b02      	ldr	r3, [sp, #8]
  401996:	4433      	add	r3, r6
  401998:	9302      	str	r3, [sp, #8]
  40199a:	e788      	b.n	4018ae <_vfiprintf_r+0xb2>
  40199c:	9801      	ldr	r0, [sp, #4]
  40199e:	9900      	ldr	r1, [sp, #0]
  4019a0:	f000 fd70 	bl	402484 <__swsetup_r>
  4019a4:	b9a8      	cbnz	r0, 4019d2 <_vfiprintf_r+0x1d6>
  4019a6:	9b00      	ldr	r3, [sp, #0]
  4019a8:	899a      	ldrh	r2, [r3, #12]
  4019aa:	f002 021a 	and.w	r2, r2, #26
  4019ae:	2a0a      	cmp	r2, #10
  4019b0:	f47f af4c 	bne.w	40184c <_vfiprintf_r+0x50>
  4019b4:	9b00      	ldr	r3, [sp, #0]
  4019b6:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
  4019ba:	2b00      	cmp	r3, #0
  4019bc:	f6ff af46 	blt.w	40184c <_vfiprintf_r+0x50>
  4019c0:	9801      	ldr	r0, [sp, #4]
  4019c2:	9900      	ldr	r1, [sp, #0]
  4019c4:	465a      	mov	r2, fp
  4019c6:	4623      	mov	r3, r4
  4019c8:	f000 fd20 	bl	40240c <__sbprintf>
  4019cc:	b02b      	add	sp, #172	; 0xac
  4019ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4019d2:	f04f 30ff 	mov.w	r0, #4294967295
  4019d6:	b02b      	add	sp, #172	; 0xac
  4019d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4019dc:	f000 ff02 	bl	4027e4 <__sinit>
  4019e0:	e719      	b.n	401816 <_vfiprintf_r+0x1a>
  4019e2:	f018 0f20 	tst.w	r8, #32
  4019e6:	9503      	str	r5, [sp, #12]
  4019e8:	46b4      	mov	ip, r6
  4019ea:	f000 810c 	beq.w	401c06 <_vfiprintf_r+0x40a>
  4019ee:	9b04      	ldr	r3, [sp, #16]
  4019f0:	3307      	adds	r3, #7
  4019f2:	f023 0307 	bic.w	r3, r3, #7
  4019f6:	f103 0208 	add.w	r2, r3, #8
  4019fa:	e9d3 6700 	ldrd	r6, r7, [r3]
  4019fe:	9204      	str	r2, [sp, #16]
  401a00:	2301      	movs	r3, #1
  401a02:	f04f 0200 	mov.w	r2, #0
  401a06:	f88d 202f 	strb.w	r2, [sp, #47]	; 0x2f
  401a0a:	46e1      	mov	r9, ip
  401a0c:	2500      	movs	r5, #0
  401a0e:	f1bc 0f00 	cmp.w	ip, #0
  401a12:	bfa8      	it	ge
  401a14:	f028 0880 	bicge.w	r8, r8, #128	; 0x80
  401a18:	ea56 0207 	orrs.w	r2, r6, r7
  401a1c:	f040 80c4 	bne.w	401ba8 <_vfiprintf_r+0x3ac>
  401a20:	f1bc 0f00 	cmp.w	ip, #0
  401a24:	f000 8381 	beq.w	40212a <_vfiprintf_r+0x92e>
  401a28:	2b01      	cmp	r3, #1
  401a2a:	f000 80c5 	beq.w	401bb8 <_vfiprintf_r+0x3bc>
  401a2e:	2b02      	cmp	r3, #2
  401a30:	f000 8387 	beq.w	402142 <_vfiprintf_r+0x946>
  401a34:	4651      	mov	r1, sl
  401a36:	08f2      	lsrs	r2, r6, #3
  401a38:	ea42 7247 	orr.w	r2, r2, r7, lsl #29
  401a3c:	08f8      	lsrs	r0, r7, #3
  401a3e:	f006 0307 	and.w	r3, r6, #7
  401a42:	4607      	mov	r7, r0
  401a44:	4616      	mov	r6, r2
  401a46:	3330      	adds	r3, #48	; 0x30
  401a48:	ea56 0207 	orrs.w	r2, r6, r7
  401a4c:	f801 3d01 	strb.w	r3, [r1, #-1]!
  401a50:	d1f1      	bne.n	401a36 <_vfiprintf_r+0x23a>
  401a52:	f018 0f01 	tst.w	r8, #1
  401a56:	9107      	str	r1, [sp, #28]
  401a58:	f040 83fc 	bne.w	402254 <_vfiprintf_r+0xa58>
  401a5c:	ebc1 090a 	rsb	r9, r1, sl
  401a60:	45e1      	cmp	r9, ip
  401a62:	464e      	mov	r6, r9
  401a64:	bfb8      	it	lt
  401a66:	4666      	movlt	r6, ip
  401a68:	b105      	cbz	r5, 401a6c <_vfiprintf_r+0x270>
  401a6a:	3601      	adds	r6, #1
  401a6c:	f018 0302 	ands.w	r3, r8, #2
  401a70:	9305      	str	r3, [sp, #20]
  401a72:	bf18      	it	ne
  401a74:	3602      	addne	r6, #2
  401a76:	f018 0384 	ands.w	r3, r8, #132	; 0x84
  401a7a:	9306      	str	r3, [sp, #24]
  401a7c:	f040 81fa 	bne.w	401e74 <_vfiprintf_r+0x678>
  401a80:	9b03      	ldr	r3, [sp, #12]
  401a82:	1b9d      	subs	r5, r3, r6
  401a84:	2d00      	cmp	r5, #0
  401a86:	f340 81f5 	ble.w	401e74 <_vfiprintf_r+0x678>
  401a8a:	2d10      	cmp	r5, #16
  401a8c:	f340 848c 	ble.w	4023a8 <_vfiprintf_r+0xbac>
  401a90:	f8dd e038 	ldr.w	lr, [sp, #56]	; 0x38
  401a94:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  401a96:	4fc6      	ldr	r7, [pc, #792]	; (401db0 <_vfiprintf_r+0x5b4>)
  401a98:	4620      	mov	r0, r4
  401a9a:	2310      	movs	r3, #16
  401a9c:	4664      	mov	r4, ip
  401a9e:	4671      	mov	r1, lr
  401aa0:	4684      	mov	ip, r0
  401aa2:	e007      	b.n	401ab4 <_vfiprintf_r+0x2b8>
  401aa4:	f101 0e02 	add.w	lr, r1, #2
  401aa8:	f10c 0c08 	add.w	ip, ip, #8
  401aac:	4601      	mov	r1, r0
  401aae:	3d10      	subs	r5, #16
  401ab0:	2d10      	cmp	r5, #16
  401ab2:	dd13      	ble.n	401adc <_vfiprintf_r+0x2e0>
  401ab4:	1c48      	adds	r0, r1, #1
  401ab6:	3210      	adds	r2, #16
  401ab8:	2807      	cmp	r0, #7
  401aba:	920f      	str	r2, [sp, #60]	; 0x3c
  401abc:	f8cc 7000 	str.w	r7, [ip]
  401ac0:	f8cc 3004 	str.w	r3, [ip, #4]
  401ac4:	900e      	str	r0, [sp, #56]	; 0x38
  401ac6:	dded      	ble.n	401aa4 <_vfiprintf_r+0x2a8>
  401ac8:	2a00      	cmp	r2, #0
  401aca:	f040 81c3 	bne.w	401e54 <_vfiprintf_r+0x658>
  401ace:	3d10      	subs	r5, #16
  401ad0:	2d10      	cmp	r5, #16
  401ad2:	4611      	mov	r1, r2
  401ad4:	f04f 0e01 	mov.w	lr, #1
  401ad8:	46d4      	mov	ip, sl
  401ada:	dceb      	bgt.n	401ab4 <_vfiprintf_r+0x2b8>
  401adc:	4663      	mov	r3, ip
  401ade:	4671      	mov	r1, lr
  401ae0:	46a4      	mov	ip, r4
  401ae2:	461c      	mov	r4, r3
  401ae4:	442a      	add	r2, r5
  401ae6:	2907      	cmp	r1, #7
  401ae8:	920f      	str	r2, [sp, #60]	; 0x3c
  401aea:	6027      	str	r7, [r4, #0]
  401aec:	6065      	str	r5, [r4, #4]
  401aee:	910e      	str	r1, [sp, #56]	; 0x38
  401af0:	f300 8346 	bgt.w	402180 <_vfiprintf_r+0x984>
  401af4:	3408      	adds	r4, #8
  401af6:	1c48      	adds	r0, r1, #1
  401af8:	e1bf      	b.n	401e7a <_vfiprintf_r+0x67e>
  401afa:	4658      	mov	r0, fp
  401afc:	f048 0804 	orr.w	r8, r8, #4
  401b00:	f89b 3000 	ldrb.w	r3, [fp]
  401b04:	e6e3      	b.n	4018ce <_vfiprintf_r+0xd2>
  401b06:	f018 0320 	ands.w	r3, r8, #32
  401b0a:	9503      	str	r5, [sp, #12]
  401b0c:	46b4      	mov	ip, r6
  401b0e:	d062      	beq.n	401bd6 <_vfiprintf_r+0x3da>
  401b10:	9b04      	ldr	r3, [sp, #16]
  401b12:	3307      	adds	r3, #7
  401b14:	f023 0307 	bic.w	r3, r3, #7
  401b18:	f103 0208 	add.w	r2, r3, #8
  401b1c:	e9d3 6700 	ldrd	r6, r7, [r3]
  401b20:	9204      	str	r2, [sp, #16]
  401b22:	2300      	movs	r3, #0
  401b24:	e76d      	b.n	401a02 <_vfiprintf_r+0x206>
  401b26:	f048 0840 	orr.w	r8, r8, #64	; 0x40
  401b2a:	f89b 3000 	ldrb.w	r3, [fp]
  401b2e:	4658      	mov	r0, fp
  401b30:	e6cd      	b.n	4018ce <_vfiprintf_r+0xd2>
  401b32:	f048 0880 	orr.w	r8, r8, #128	; 0x80
  401b36:	f89b 3000 	ldrb.w	r3, [fp]
  401b3a:	4658      	mov	r0, fp
  401b3c:	e6c7      	b.n	4018ce <_vfiprintf_r+0xd2>
  401b3e:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
  401b42:	2500      	movs	r5, #0
  401b44:	f81b 3b01 	ldrb.w	r3, [fp], #1
  401b48:	eb05 0585 	add.w	r5, r5, r5, lsl #2
  401b4c:	eb02 0545 	add.w	r5, r2, r5, lsl #1
  401b50:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
  401b54:	2a09      	cmp	r2, #9
  401b56:	d9f5      	bls.n	401b44 <_vfiprintf_r+0x348>
  401b58:	e6bb      	b.n	4018d2 <_vfiprintf_r+0xd6>
  401b5a:	f048 0810 	orr.w	r8, r8, #16
  401b5e:	f018 0f20 	tst.w	r8, #32
  401b62:	9503      	str	r5, [sp, #12]
  401b64:	46b4      	mov	ip, r6
  401b66:	f88d 102f 	strb.w	r1, [sp, #47]	; 0x2f
  401b6a:	f000 809b 	beq.w	401ca4 <_vfiprintf_r+0x4a8>
  401b6e:	9904      	ldr	r1, [sp, #16]
  401b70:	3107      	adds	r1, #7
  401b72:	f021 0107 	bic.w	r1, r1, #7
  401b76:	e9d1 2300 	ldrd	r2, r3, [r1]
  401b7a:	3108      	adds	r1, #8
  401b7c:	9104      	str	r1, [sp, #16]
  401b7e:	4616      	mov	r6, r2
  401b80:	461f      	mov	r7, r3
  401b82:	2a00      	cmp	r2, #0
  401b84:	f173 0300 	sbcs.w	r3, r3, #0
  401b88:	f2c0 83a6 	blt.w	4022d8 <_vfiprintf_r+0xadc>
  401b8c:	f1bc 0f00 	cmp.w	ip, #0
  401b90:	bfa8      	it	ge
  401b92:	f028 0880 	bicge.w	r8, r8, #128	; 0x80
  401b96:	ea56 0207 	orrs.w	r2, r6, r7
  401b9a:	f89d 502f 	ldrb.w	r5, [sp, #47]	; 0x2f
  401b9e:	46e1      	mov	r9, ip
  401ba0:	f04f 0301 	mov.w	r3, #1
  401ba4:	f43f af3c 	beq.w	401a20 <_vfiprintf_r+0x224>
  401ba8:	2b01      	cmp	r3, #1
  401baa:	f47f af40 	bne.w	401a2e <_vfiprintf_r+0x232>
  401bae:	2f00      	cmp	r7, #0
  401bb0:	bf08      	it	eq
  401bb2:	2e0a      	cmpeq	r6, #10
  401bb4:	f080 8334 	bcs.w	402220 <_vfiprintf_r+0xa24>
  401bb8:	ab2a      	add	r3, sp, #168	; 0xa8
  401bba:	3630      	adds	r6, #48	; 0x30
  401bbc:	f803 6d41 	strb.w	r6, [r3, #-65]!
  401bc0:	ebc3 090a 	rsb	r9, r3, sl
  401bc4:	9307      	str	r3, [sp, #28]
  401bc6:	e74b      	b.n	401a60 <_vfiprintf_r+0x264>
  401bc8:	f048 0810 	orr.w	r8, r8, #16
  401bcc:	f018 0320 	ands.w	r3, r8, #32
  401bd0:	9503      	str	r5, [sp, #12]
  401bd2:	46b4      	mov	ip, r6
  401bd4:	d19c      	bne.n	401b10 <_vfiprintf_r+0x314>
  401bd6:	f018 0210 	ands.w	r2, r8, #16
  401bda:	f040 82f7 	bne.w	4021cc <_vfiprintf_r+0x9d0>
  401bde:	f018 0340 	ands.w	r3, r8, #64	; 0x40
  401be2:	f000 82f3 	beq.w	4021cc <_vfiprintf_r+0x9d0>
  401be6:	9904      	ldr	r1, [sp, #16]
  401be8:	4613      	mov	r3, r2
  401bea:	460a      	mov	r2, r1
  401bec:	3204      	adds	r2, #4
  401bee:	880e      	ldrh	r6, [r1, #0]
  401bf0:	9204      	str	r2, [sp, #16]
  401bf2:	2700      	movs	r7, #0
  401bf4:	e705      	b.n	401a02 <_vfiprintf_r+0x206>
  401bf6:	f048 0810 	orr.w	r8, r8, #16
  401bfa:	f018 0f20 	tst.w	r8, #32
  401bfe:	9503      	str	r5, [sp, #12]
  401c00:	46b4      	mov	ip, r6
  401c02:	f47f aef4 	bne.w	4019ee <_vfiprintf_r+0x1f2>
  401c06:	9a04      	ldr	r2, [sp, #16]
  401c08:	f018 0f10 	tst.w	r8, #16
  401c0c:	4613      	mov	r3, r2
  401c0e:	f040 82e4 	bne.w	4021da <_vfiprintf_r+0x9de>
  401c12:	f018 0f40 	tst.w	r8, #64	; 0x40
  401c16:	f000 82e0 	beq.w	4021da <_vfiprintf_r+0x9de>
  401c1a:	8816      	ldrh	r6, [r2, #0]
  401c1c:	3204      	adds	r2, #4
  401c1e:	2700      	movs	r7, #0
  401c20:	2301      	movs	r3, #1
  401c22:	9204      	str	r2, [sp, #16]
  401c24:	e6ed      	b.n	401a02 <_vfiprintf_r+0x206>
  401c26:	4a63      	ldr	r2, [pc, #396]	; (401db4 <_vfiprintf_r+0x5b8>)
  401c28:	9503      	str	r5, [sp, #12]
  401c2a:	f018 0f20 	tst.w	r8, #32
  401c2e:	46b4      	mov	ip, r6
  401c30:	f88d 102f 	strb.w	r1, [sp, #47]	; 0x2f
  401c34:	9209      	str	r2, [sp, #36]	; 0x24
  401c36:	f000 8090 	beq.w	401d5a <_vfiprintf_r+0x55e>
  401c3a:	9a04      	ldr	r2, [sp, #16]
  401c3c:	3207      	adds	r2, #7
  401c3e:	f022 0207 	bic.w	r2, r2, #7
  401c42:	e9d2 6700 	ldrd	r6, r7, [r2]
  401c46:	f102 0108 	add.w	r1, r2, #8
  401c4a:	9104      	str	r1, [sp, #16]
  401c4c:	f018 0f01 	tst.w	r8, #1
  401c50:	f000 8290 	beq.w	402174 <_vfiprintf_r+0x978>
  401c54:	ea56 0207 	orrs.w	r2, r6, r7
  401c58:	f000 828c 	beq.w	402174 <_vfiprintf_r+0x978>
  401c5c:	2230      	movs	r2, #48	; 0x30
  401c5e:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
  401c62:	f048 0802 	orr.w	r8, r8, #2
  401c66:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
  401c6a:	2302      	movs	r3, #2
  401c6c:	e6c9      	b.n	401a02 <_vfiprintf_r+0x206>
  401c6e:	9a04      	ldr	r2, [sp, #16]
  401c70:	9503      	str	r5, [sp, #12]
  401c72:	6813      	ldr	r3, [r2, #0]
  401c74:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
  401c78:	4613      	mov	r3, r2
  401c7a:	3304      	adds	r3, #4
  401c7c:	2601      	movs	r6, #1
  401c7e:	f04f 0100 	mov.w	r1, #0
  401c82:	9304      	str	r3, [sp, #16]
  401c84:	ab10      	add	r3, sp, #64	; 0x40
  401c86:	f88d 102f 	strb.w	r1, [sp, #47]	; 0x2f
  401c8a:	46b1      	mov	r9, r6
  401c8c:	9307      	str	r3, [sp, #28]
  401c8e:	f04f 0c00 	mov.w	ip, #0
  401c92:	e6eb      	b.n	401a6c <_vfiprintf_r+0x270>
  401c94:	f018 0f20 	tst.w	r8, #32
  401c98:	9503      	str	r5, [sp, #12]
  401c9a:	46b4      	mov	ip, r6
  401c9c:	f88d 102f 	strb.w	r1, [sp, #47]	; 0x2f
  401ca0:	f47f af65 	bne.w	401b6e <_vfiprintf_r+0x372>
  401ca4:	f018 0f10 	tst.w	r8, #16
  401ca8:	f040 82a2 	bne.w	4021f0 <_vfiprintf_r+0x9f4>
  401cac:	f018 0f40 	tst.w	r8, #64	; 0x40
  401cb0:	f000 829e 	beq.w	4021f0 <_vfiprintf_r+0x9f4>
  401cb4:	9904      	ldr	r1, [sp, #16]
  401cb6:	f9b1 6000 	ldrsh.w	r6, [r1]
  401cba:	3104      	adds	r1, #4
  401cbc:	17f7      	asrs	r7, r6, #31
  401cbe:	4632      	mov	r2, r6
  401cc0:	463b      	mov	r3, r7
  401cc2:	9104      	str	r1, [sp, #16]
  401cc4:	e75d      	b.n	401b82 <_vfiprintf_r+0x386>
  401cc6:	9904      	ldr	r1, [sp, #16]
  401cc8:	9503      	str	r5, [sp, #12]
  401cca:	2330      	movs	r3, #48	; 0x30
  401ccc:	460a      	mov	r2, r1
  401cce:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
  401cd2:	2378      	movs	r3, #120	; 0x78
  401cd4:	3204      	adds	r2, #4
  401cd6:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
  401cda:	4b37      	ldr	r3, [pc, #220]	; (401db8 <_vfiprintf_r+0x5bc>)
  401cdc:	9309      	str	r3, [sp, #36]	; 0x24
  401cde:	46b4      	mov	ip, r6
  401ce0:	f048 0802 	orr.w	r8, r8, #2
  401ce4:	680e      	ldr	r6, [r1, #0]
  401ce6:	9204      	str	r2, [sp, #16]
  401ce8:	2700      	movs	r7, #0
  401cea:	2302      	movs	r3, #2
  401cec:	e689      	b.n	401a02 <_vfiprintf_r+0x206>
  401cee:	f048 0820 	orr.w	r8, r8, #32
  401cf2:	f89b 3000 	ldrb.w	r3, [fp]
  401cf6:	4658      	mov	r0, fp
  401cf8:	e5e9      	b.n	4018ce <_vfiprintf_r+0xd2>
  401cfa:	9a04      	ldr	r2, [sp, #16]
  401cfc:	9503      	str	r5, [sp, #12]
  401cfe:	6813      	ldr	r3, [r2, #0]
  401d00:	9307      	str	r3, [sp, #28]
  401d02:	f04f 0100 	mov.w	r1, #0
  401d06:	46b4      	mov	ip, r6
  401d08:	f88d 102f 	strb.w	r1, [sp, #47]	; 0x2f
  401d0c:	1d16      	adds	r6, r2, #4
  401d0e:	2b00      	cmp	r3, #0
  401d10:	f000 8350 	beq.w	4023b4 <_vfiprintf_r+0xbb8>
  401d14:	f1bc 0f00 	cmp.w	ip, #0
  401d18:	f2c0 832a 	blt.w	402370 <_vfiprintf_r+0xb74>
  401d1c:	9d07      	ldr	r5, [sp, #28]
  401d1e:	f8cd c010 	str.w	ip, [sp, #16]
  401d22:	4662      	mov	r2, ip
  401d24:	4628      	mov	r0, r5
  401d26:	2100      	movs	r1, #0
  401d28:	f001 fbd6 	bl	4034d8 <memchr>
  401d2c:	f8dd c010 	ldr.w	ip, [sp, #16]
  401d30:	2800      	cmp	r0, #0
  401d32:	f000 8350 	beq.w	4023d6 <_vfiprintf_r+0xbda>
  401d36:	ebc5 0900 	rsb	r9, r5, r0
  401d3a:	9604      	str	r6, [sp, #16]
  401d3c:	f89d 502f 	ldrb.w	r5, [sp, #47]	; 0x2f
  401d40:	f04f 0c00 	mov.w	ip, #0
  401d44:	e68c      	b.n	401a60 <_vfiprintf_r+0x264>
  401d46:	4a1c      	ldr	r2, [pc, #112]	; (401db8 <_vfiprintf_r+0x5bc>)
  401d48:	9503      	str	r5, [sp, #12]
  401d4a:	f018 0f20 	tst.w	r8, #32
  401d4e:	46b4      	mov	ip, r6
  401d50:	9209      	str	r2, [sp, #36]	; 0x24
  401d52:	f88d 102f 	strb.w	r1, [sp, #47]	; 0x2f
  401d56:	f47f af70 	bne.w	401c3a <_vfiprintf_r+0x43e>
  401d5a:	9904      	ldr	r1, [sp, #16]
  401d5c:	f018 0f10 	tst.w	r8, #16
  401d60:	460a      	mov	r2, r1
  401d62:	f040 8240 	bne.w	4021e6 <_vfiprintf_r+0x9ea>
  401d66:	f018 0f40 	tst.w	r8, #64	; 0x40
  401d6a:	f000 823c 	beq.w	4021e6 <_vfiprintf_r+0x9ea>
  401d6e:	3204      	adds	r2, #4
  401d70:	880e      	ldrh	r6, [r1, #0]
  401d72:	9204      	str	r2, [sp, #16]
  401d74:	2700      	movs	r7, #0
  401d76:	e769      	b.n	401c4c <_vfiprintf_r+0x450>
  401d78:	f89b 3000 	ldrb.w	r3, [fp]
  401d7c:	2b6c      	cmp	r3, #108	; 0x6c
  401d7e:	f000 82ea 	beq.w	402356 <_vfiprintf_r+0xb5a>
  401d82:	f048 0810 	orr.w	r8, r8, #16
  401d86:	4658      	mov	r0, fp
  401d88:	e5a1      	b.n	4018ce <_vfiprintf_r+0xd2>
  401d8a:	9a04      	ldr	r2, [sp, #16]
  401d8c:	6815      	ldr	r5, [r2, #0]
  401d8e:	4613      	mov	r3, r2
  401d90:	2d00      	cmp	r5, #0
  401d92:	f103 0304 	add.w	r3, r3, #4
  401d96:	f2c0 82e6 	blt.w	402366 <_vfiprintf_r+0xb6a>
  401d9a:	9304      	str	r3, [sp, #16]
  401d9c:	f89b 3000 	ldrb.w	r3, [fp]
  401da0:	4658      	mov	r0, fp
  401da2:	e594      	b.n	4018ce <_vfiprintf_r+0xd2>
  401da4:	f89b 3000 	ldrb.w	r3, [fp]
  401da8:	4658      	mov	r0, fp
  401daa:	212b      	movs	r1, #43	; 0x2b
  401dac:	e58f      	b.n	4018ce <_vfiprintf_r+0xd2>
  401dae:	bf00      	nop
  401db0:	004047dc 	.word	0x004047dc
  401db4:	004047ac 	.word	0x004047ac
  401db8:	004047c0 	.word	0x004047c0
  401dbc:	f89b 3000 	ldrb.w	r3, [fp]
  401dc0:	2b2a      	cmp	r3, #42	; 0x2a
  401dc2:	f10b 0001 	add.w	r0, fp, #1
  401dc6:	f000 830f 	beq.w	4023e8 <_vfiprintf_r+0xbec>
  401dca:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
  401dce:	2a09      	cmp	r2, #9
  401dd0:	4683      	mov	fp, r0
  401dd2:	f04f 0600 	mov.w	r6, #0
  401dd6:	f63f ad7c 	bhi.w	4018d2 <_vfiprintf_r+0xd6>
  401dda:	f81b 3b01 	ldrb.w	r3, [fp], #1
  401dde:	eb06 0686 	add.w	r6, r6, r6, lsl #2
  401de2:	eb02 0646 	add.w	r6, r2, r6, lsl #1
  401de6:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
  401dea:	2a09      	cmp	r2, #9
  401dec:	d9f5      	bls.n	401dda <_vfiprintf_r+0x5de>
  401dee:	ea46 76e6 	orr.w	r6, r6, r6, asr #31
  401df2:	e56e      	b.n	4018d2 <_vfiprintf_r+0xd6>
  401df4:	f018 0f20 	tst.w	r8, #32
  401df8:	f88d 102f 	strb.w	r1, [sp, #47]	; 0x2f
  401dfc:	f000 8283 	beq.w	402306 <_vfiprintf_r+0xb0a>
  401e00:	9a04      	ldr	r2, [sp, #16]
  401e02:	9902      	ldr	r1, [sp, #8]
  401e04:	6813      	ldr	r3, [r2, #0]
  401e06:	17cf      	asrs	r7, r1, #31
  401e08:	4608      	mov	r0, r1
  401e0a:	3204      	adds	r2, #4
  401e0c:	4639      	mov	r1, r7
  401e0e:	9204      	str	r2, [sp, #16]
  401e10:	e9c3 0100 	strd	r0, r1, [r3]
  401e14:	e524      	b.n	401860 <_vfiprintf_r+0x64>
  401e16:	4658      	mov	r0, fp
  401e18:	f89b 3000 	ldrb.w	r3, [fp]
  401e1c:	2900      	cmp	r1, #0
  401e1e:	f47f ad56 	bne.w	4018ce <_vfiprintf_r+0xd2>
  401e22:	2120      	movs	r1, #32
  401e24:	e553      	b.n	4018ce <_vfiprintf_r+0xd2>
  401e26:	f048 0801 	orr.w	r8, r8, #1
  401e2a:	4658      	mov	r0, fp
  401e2c:	f89b 3000 	ldrb.w	r3, [fp]
  401e30:	e54d      	b.n	4018ce <_vfiprintf_r+0xd2>
  401e32:	9503      	str	r5, [sp, #12]
  401e34:	f88d 102f 	strb.w	r1, [sp, #47]	; 0x2f
  401e38:	2b00      	cmp	r3, #0
  401e3a:	f000 809c 	beq.w	401f76 <_vfiprintf_r+0x77a>
  401e3e:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
  401e42:	f04f 0300 	mov.w	r3, #0
  401e46:	2601      	movs	r6, #1
  401e48:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
  401e4c:	ab10      	add	r3, sp, #64	; 0x40
  401e4e:	46b1      	mov	r9, r6
  401e50:	9307      	str	r3, [sp, #28]
  401e52:	e71c      	b.n	401c8e <_vfiprintf_r+0x492>
  401e54:	9801      	ldr	r0, [sp, #4]
  401e56:	9900      	ldr	r1, [sp, #0]
  401e58:	9308      	str	r3, [sp, #32]
  401e5a:	aa0d      	add	r2, sp, #52	; 0x34
  401e5c:	f7ff fc92 	bl	401784 <__sprint_r.part.0>
  401e60:	2800      	cmp	r0, #0
  401e62:	f040 808f 	bne.w	401f84 <_vfiprintf_r+0x788>
  401e66:	990e      	ldr	r1, [sp, #56]	; 0x38
  401e68:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  401e6a:	9b08      	ldr	r3, [sp, #32]
  401e6c:	f101 0e01 	add.w	lr, r1, #1
  401e70:	46d4      	mov	ip, sl
  401e72:	e61c      	b.n	401aae <_vfiprintf_r+0x2b2>
  401e74:	990e      	ldr	r1, [sp, #56]	; 0x38
  401e76:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  401e78:	1c48      	adds	r0, r1, #1
  401e7a:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
  401e7e:	b16b      	cbz	r3, 401e9c <_vfiprintf_r+0x6a0>
  401e80:	3201      	adds	r2, #1
  401e82:	f10d 032f 	add.w	r3, sp, #47	; 0x2f
  401e86:	2101      	movs	r1, #1
  401e88:	2807      	cmp	r0, #7
  401e8a:	920f      	str	r2, [sp, #60]	; 0x3c
  401e8c:	900e      	str	r0, [sp, #56]	; 0x38
  401e8e:	6023      	str	r3, [r4, #0]
  401e90:	6061      	str	r1, [r4, #4]
  401e92:	f300 8134 	bgt.w	4020fe <_vfiprintf_r+0x902>
  401e96:	4601      	mov	r1, r0
  401e98:	3408      	adds	r4, #8
  401e9a:	3001      	adds	r0, #1
  401e9c:	9b05      	ldr	r3, [sp, #20]
  401e9e:	b163      	cbz	r3, 401eba <_vfiprintf_r+0x6be>
  401ea0:	3202      	adds	r2, #2
  401ea2:	a90c      	add	r1, sp, #48	; 0x30
  401ea4:	2302      	movs	r3, #2
  401ea6:	2807      	cmp	r0, #7
  401ea8:	920f      	str	r2, [sp, #60]	; 0x3c
  401eaa:	900e      	str	r0, [sp, #56]	; 0x38
  401eac:	e884 000a 	stmia.w	r4, {r1, r3}
  401eb0:	f300 8134 	bgt.w	40211c <_vfiprintf_r+0x920>
  401eb4:	4601      	mov	r1, r0
  401eb6:	3408      	adds	r4, #8
  401eb8:	3001      	adds	r0, #1
  401eba:	9b06      	ldr	r3, [sp, #24]
  401ebc:	2b80      	cmp	r3, #128	; 0x80
  401ebe:	f000 80d4 	beq.w	40206a <_vfiprintf_r+0x86e>
  401ec2:	ebc9 070c 	rsb	r7, r9, ip
  401ec6:	2f00      	cmp	r7, #0
  401ec8:	dd2b      	ble.n	401f22 <_vfiprintf_r+0x726>
  401eca:	2f10      	cmp	r7, #16
  401ecc:	4daa      	ldr	r5, [pc, #680]	; (402178 <_vfiprintf_r+0x97c>)
  401ece:	dd1f      	ble.n	401f10 <_vfiprintf_r+0x714>
  401ed0:	46a6      	mov	lr, r4
  401ed2:	2310      	movs	r3, #16
  401ed4:	9c01      	ldr	r4, [sp, #4]
  401ed6:	e007      	b.n	401ee8 <_vfiprintf_r+0x6ec>
  401ed8:	f101 0c02 	add.w	ip, r1, #2
  401edc:	f10e 0e08 	add.w	lr, lr, #8
  401ee0:	4601      	mov	r1, r0
  401ee2:	3f10      	subs	r7, #16
  401ee4:	2f10      	cmp	r7, #16
  401ee6:	dd11      	ble.n	401f0c <_vfiprintf_r+0x710>
  401ee8:	1c48      	adds	r0, r1, #1
  401eea:	3210      	adds	r2, #16
  401eec:	2807      	cmp	r0, #7
  401eee:	920f      	str	r2, [sp, #60]	; 0x3c
  401ef0:	f8ce 5000 	str.w	r5, [lr]
  401ef4:	f8ce 3004 	str.w	r3, [lr, #4]
  401ef8:	900e      	str	r0, [sp, #56]	; 0x38
  401efa:	dded      	ble.n	401ed8 <_vfiprintf_r+0x6dc>
  401efc:	bb6a      	cbnz	r2, 401f5a <_vfiprintf_r+0x75e>
  401efe:	3f10      	subs	r7, #16
  401f00:	2f10      	cmp	r7, #16
  401f02:	f04f 0c01 	mov.w	ip, #1
  401f06:	4611      	mov	r1, r2
  401f08:	46d6      	mov	lr, sl
  401f0a:	dced      	bgt.n	401ee8 <_vfiprintf_r+0x6ec>
  401f0c:	4674      	mov	r4, lr
  401f0e:	4660      	mov	r0, ip
  401f10:	443a      	add	r2, r7
  401f12:	2807      	cmp	r0, #7
  401f14:	920f      	str	r2, [sp, #60]	; 0x3c
  401f16:	e884 00a0 	stmia.w	r4, {r5, r7}
  401f1a:	900e      	str	r0, [sp, #56]	; 0x38
  401f1c:	dc3b      	bgt.n	401f96 <_vfiprintf_r+0x79a>
  401f1e:	3408      	adds	r4, #8
  401f20:	3001      	adds	r0, #1
  401f22:	eb02 0309 	add.w	r3, r2, r9
  401f26:	9a07      	ldr	r2, [sp, #28]
  401f28:	930f      	str	r3, [sp, #60]	; 0x3c
  401f2a:	2807      	cmp	r0, #7
  401f2c:	e884 0204 	stmia.w	r4, {r2, r9}
  401f30:	900e      	str	r0, [sp, #56]	; 0x38
  401f32:	dd3d      	ble.n	401fb0 <_vfiprintf_r+0x7b4>
  401f34:	2b00      	cmp	r3, #0
  401f36:	f040 813e 	bne.w	4021b6 <_vfiprintf_r+0x9ba>
  401f3a:	f018 0f04 	tst.w	r8, #4
  401f3e:	930e      	str	r3, [sp, #56]	; 0x38
  401f40:	f040 812f 	bne.w	4021a2 <_vfiprintf_r+0x9a6>
  401f44:	9b02      	ldr	r3, [sp, #8]
  401f46:	9a03      	ldr	r2, [sp, #12]
  401f48:	4296      	cmp	r6, r2
  401f4a:	bfac      	ite	ge
  401f4c:	199b      	addge	r3, r3, r6
  401f4e:	189b      	addlt	r3, r3, r2
  401f50:	9302      	str	r3, [sp, #8]
  401f52:	2300      	movs	r3, #0
  401f54:	930e      	str	r3, [sp, #56]	; 0x38
  401f56:	4654      	mov	r4, sl
  401f58:	e482      	b.n	401860 <_vfiprintf_r+0x64>
  401f5a:	4620      	mov	r0, r4
  401f5c:	9900      	ldr	r1, [sp, #0]
  401f5e:	9305      	str	r3, [sp, #20]
  401f60:	aa0d      	add	r2, sp, #52	; 0x34
  401f62:	f7ff fc0f 	bl	401784 <__sprint_r.part.0>
  401f66:	b968      	cbnz	r0, 401f84 <_vfiprintf_r+0x788>
  401f68:	990e      	ldr	r1, [sp, #56]	; 0x38
  401f6a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  401f6c:	9b05      	ldr	r3, [sp, #20]
  401f6e:	f101 0c01 	add.w	ip, r1, #1
  401f72:	46d6      	mov	lr, sl
  401f74:	e7b5      	b.n	401ee2 <_vfiprintf_r+0x6e6>
  401f76:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  401f78:	b123      	cbz	r3, 401f84 <_vfiprintf_r+0x788>
  401f7a:	9801      	ldr	r0, [sp, #4]
  401f7c:	9900      	ldr	r1, [sp, #0]
  401f7e:	aa0d      	add	r2, sp, #52	; 0x34
  401f80:	f7ff fc00 	bl	401784 <__sprint_r.part.0>
  401f84:	9b00      	ldr	r3, [sp, #0]
  401f86:	899b      	ldrh	r3, [r3, #12]
  401f88:	065b      	lsls	r3, r3, #25
  401f8a:	f53f ad22 	bmi.w	4019d2 <_vfiprintf_r+0x1d6>
  401f8e:	9802      	ldr	r0, [sp, #8]
  401f90:	b02b      	add	sp, #172	; 0xac
  401f92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  401f96:	2a00      	cmp	r2, #0
  401f98:	f040 8191 	bne.w	4022be <_vfiprintf_r+0xac2>
  401f9c:	2201      	movs	r2, #1
  401f9e:	9907      	ldr	r1, [sp, #28]
  401fa0:	f8cd 906c 	str.w	r9, [sp, #108]	; 0x6c
  401fa4:	464b      	mov	r3, r9
  401fa6:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
  401faa:	911a      	str	r1, [sp, #104]	; 0x68
  401fac:	920e      	str	r2, [sp, #56]	; 0x38
  401fae:	4654      	mov	r4, sl
  401fb0:	f104 0208 	add.w	r2, r4, #8
  401fb4:	f018 0f04 	tst.w	r8, #4
  401fb8:	d039      	beq.n	40202e <_vfiprintf_r+0x832>
  401fba:	9903      	ldr	r1, [sp, #12]
  401fbc:	1b8d      	subs	r5, r1, r6
  401fbe:	2d00      	cmp	r5, #0
  401fc0:	dd35      	ble.n	40202e <_vfiprintf_r+0x832>
  401fc2:	2d10      	cmp	r5, #16
  401fc4:	f340 8202 	ble.w	4023cc <_vfiprintf_r+0xbd0>
  401fc8:	980e      	ldr	r0, [sp, #56]	; 0x38
  401fca:	4f6c      	ldr	r7, [pc, #432]	; (40217c <_vfiprintf_r+0x980>)
  401fcc:	f8dd 8004 	ldr.w	r8, [sp, #4]
  401fd0:	f8dd 9000 	ldr.w	r9, [sp]
  401fd4:	2410      	movs	r4, #16
  401fd6:	e006      	b.n	401fe6 <_vfiprintf_r+0x7ea>
  401fd8:	f100 0e02 	add.w	lr, r0, #2
  401fdc:	3208      	adds	r2, #8
  401fde:	4608      	mov	r0, r1
  401fe0:	3d10      	subs	r5, #16
  401fe2:	2d10      	cmp	r5, #16
  401fe4:	dd10      	ble.n	402008 <_vfiprintf_r+0x80c>
  401fe6:	1c41      	adds	r1, r0, #1
  401fe8:	3310      	adds	r3, #16
  401fea:	2907      	cmp	r1, #7
  401fec:	930f      	str	r3, [sp, #60]	; 0x3c
  401fee:	6017      	str	r7, [r2, #0]
  401ff0:	6054      	str	r4, [r2, #4]
  401ff2:	910e      	str	r1, [sp, #56]	; 0x38
  401ff4:	ddf0      	ble.n	401fd8 <_vfiprintf_r+0x7dc>
  401ff6:	2b00      	cmp	r3, #0
  401ff8:	d12a      	bne.n	402050 <_vfiprintf_r+0x854>
  401ffa:	3d10      	subs	r5, #16
  401ffc:	2d10      	cmp	r5, #16
  401ffe:	f04f 0e01 	mov.w	lr, #1
  402002:	4618      	mov	r0, r3
  402004:	4652      	mov	r2, sl
  402006:	dcee      	bgt.n	401fe6 <_vfiprintf_r+0x7ea>
  402008:	442b      	add	r3, r5
  40200a:	f1be 0f07 	cmp.w	lr, #7
  40200e:	930f      	str	r3, [sp, #60]	; 0x3c
  402010:	6017      	str	r7, [r2, #0]
  402012:	6055      	str	r5, [r2, #4]
  402014:	f8cd e038 	str.w	lr, [sp, #56]	; 0x38
  402018:	dd09      	ble.n	40202e <_vfiprintf_r+0x832>
  40201a:	2b00      	cmp	r3, #0
  40201c:	d092      	beq.n	401f44 <_vfiprintf_r+0x748>
  40201e:	9801      	ldr	r0, [sp, #4]
  402020:	9900      	ldr	r1, [sp, #0]
  402022:	aa0d      	add	r2, sp, #52	; 0x34
  402024:	f7ff fbae 	bl	401784 <__sprint_r.part.0>
  402028:	2800      	cmp	r0, #0
  40202a:	d1ab      	bne.n	401f84 <_vfiprintf_r+0x788>
  40202c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  40202e:	9a02      	ldr	r2, [sp, #8]
  402030:	9903      	ldr	r1, [sp, #12]
  402032:	428e      	cmp	r6, r1
  402034:	bfac      	ite	ge
  402036:	1992      	addge	r2, r2, r6
  402038:	1852      	addlt	r2, r2, r1
  40203a:	9202      	str	r2, [sp, #8]
  40203c:	2b00      	cmp	r3, #0
  40203e:	d088      	beq.n	401f52 <_vfiprintf_r+0x756>
  402040:	9801      	ldr	r0, [sp, #4]
  402042:	9900      	ldr	r1, [sp, #0]
  402044:	aa0d      	add	r2, sp, #52	; 0x34
  402046:	f7ff fb9d 	bl	401784 <__sprint_r.part.0>
  40204a:	2800      	cmp	r0, #0
  40204c:	d081      	beq.n	401f52 <_vfiprintf_r+0x756>
  40204e:	e799      	b.n	401f84 <_vfiprintf_r+0x788>
  402050:	4640      	mov	r0, r8
  402052:	4649      	mov	r1, r9
  402054:	aa0d      	add	r2, sp, #52	; 0x34
  402056:	f7ff fb95 	bl	401784 <__sprint_r.part.0>
  40205a:	2800      	cmp	r0, #0
  40205c:	d192      	bne.n	401f84 <_vfiprintf_r+0x788>
  40205e:	980e      	ldr	r0, [sp, #56]	; 0x38
  402060:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  402062:	f100 0e01 	add.w	lr, r0, #1
  402066:	4652      	mov	r2, sl
  402068:	e7ba      	b.n	401fe0 <_vfiprintf_r+0x7e4>
  40206a:	9b03      	ldr	r3, [sp, #12]
  40206c:	1b9f      	subs	r7, r3, r6
  40206e:	2f00      	cmp	r7, #0
  402070:	f77f af27 	ble.w	401ec2 <_vfiprintf_r+0x6c6>
  402074:	2f10      	cmp	r7, #16
  402076:	4d40      	ldr	r5, [pc, #256]	; (402178 <_vfiprintf_r+0x97c>)
  402078:	f340 81b4 	ble.w	4023e4 <_vfiprintf_r+0xbe8>
  40207c:	4620      	mov	r0, r4
  40207e:	2310      	movs	r3, #16
  402080:	4664      	mov	r4, ip
  402082:	4684      	mov	ip, r0
  402084:	e007      	b.n	402096 <_vfiprintf_r+0x89a>
  402086:	f101 0e02 	add.w	lr, r1, #2
  40208a:	f10c 0c08 	add.w	ip, ip, #8
  40208e:	4601      	mov	r1, r0
  402090:	3f10      	subs	r7, #16
  402092:	2f10      	cmp	r7, #16
  402094:	dd11      	ble.n	4020ba <_vfiprintf_r+0x8be>
  402096:	1c48      	adds	r0, r1, #1
  402098:	3210      	adds	r2, #16
  40209a:	2807      	cmp	r0, #7
  40209c:	920f      	str	r2, [sp, #60]	; 0x3c
  40209e:	f8cc 5000 	str.w	r5, [ip]
  4020a2:	f8cc 3004 	str.w	r3, [ip, #4]
  4020a6:	900e      	str	r0, [sp, #56]	; 0x38
  4020a8:	dded      	ble.n	402086 <_vfiprintf_r+0x88a>
  4020aa:	b9c2      	cbnz	r2, 4020de <_vfiprintf_r+0x8e2>
  4020ac:	3f10      	subs	r7, #16
  4020ae:	2f10      	cmp	r7, #16
  4020b0:	f04f 0e01 	mov.w	lr, #1
  4020b4:	4611      	mov	r1, r2
  4020b6:	46d4      	mov	ip, sl
  4020b8:	dced      	bgt.n	402096 <_vfiprintf_r+0x89a>
  4020ba:	4663      	mov	r3, ip
  4020bc:	46a4      	mov	ip, r4
  4020be:	461c      	mov	r4, r3
  4020c0:	443a      	add	r2, r7
  4020c2:	f1be 0f07 	cmp.w	lr, #7
  4020c6:	920f      	str	r2, [sp, #60]	; 0x3c
  4020c8:	e884 00a0 	stmia.w	r4, {r5, r7}
  4020cc:	f8cd e038 	str.w	lr, [sp, #56]	; 0x38
  4020d0:	f300 80ef 	bgt.w	4022b2 <_vfiprintf_r+0xab6>
  4020d4:	3408      	adds	r4, #8
  4020d6:	f10e 0001 	add.w	r0, lr, #1
  4020da:	4671      	mov	r1, lr
  4020dc:	e6f1      	b.n	401ec2 <_vfiprintf_r+0x6c6>
  4020de:	9801      	ldr	r0, [sp, #4]
  4020e0:	9900      	ldr	r1, [sp, #0]
  4020e2:	9305      	str	r3, [sp, #20]
  4020e4:	aa0d      	add	r2, sp, #52	; 0x34
  4020e6:	f7ff fb4d 	bl	401784 <__sprint_r.part.0>
  4020ea:	2800      	cmp	r0, #0
  4020ec:	f47f af4a 	bne.w	401f84 <_vfiprintf_r+0x788>
  4020f0:	990e      	ldr	r1, [sp, #56]	; 0x38
  4020f2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  4020f4:	9b05      	ldr	r3, [sp, #20]
  4020f6:	f101 0e01 	add.w	lr, r1, #1
  4020fa:	46d4      	mov	ip, sl
  4020fc:	e7c8      	b.n	402090 <_vfiprintf_r+0x894>
  4020fe:	2a00      	cmp	r2, #0
  402100:	f040 80c6 	bne.w	402290 <_vfiprintf_r+0xa94>
  402104:	9b05      	ldr	r3, [sp, #20]
  402106:	2b00      	cmp	r3, #0
  402108:	f000 8086 	beq.w	402218 <_vfiprintf_r+0xa1c>
  40210c:	aa0c      	add	r2, sp, #48	; 0x30
  40210e:	2302      	movs	r3, #2
  402110:	921a      	str	r2, [sp, #104]	; 0x68
  402112:	4608      	mov	r0, r1
  402114:	931b      	str	r3, [sp, #108]	; 0x6c
  402116:	461a      	mov	r2, r3
  402118:	4654      	mov	r4, sl
  40211a:	e6cb      	b.n	401eb4 <_vfiprintf_r+0x6b8>
  40211c:	2a00      	cmp	r2, #0
  40211e:	f040 80a6 	bne.w	40226e <_vfiprintf_r+0xa72>
  402122:	2001      	movs	r0, #1
  402124:	4611      	mov	r1, r2
  402126:	4654      	mov	r4, sl
  402128:	e6c7      	b.n	401eba <_vfiprintf_r+0x6be>
  40212a:	bb03      	cbnz	r3, 40216e <_vfiprintf_r+0x972>
  40212c:	f018 0f01 	tst.w	r8, #1
  402130:	d01d      	beq.n	40216e <_vfiprintf_r+0x972>
  402132:	ab2a      	add	r3, sp, #168	; 0xa8
  402134:	2230      	movs	r2, #48	; 0x30
  402136:	f803 2d41 	strb.w	r2, [r3, #-65]!
  40213a:	ebc3 090a 	rsb	r9, r3, sl
  40213e:	9307      	str	r3, [sp, #28]
  402140:	e48e      	b.n	401a60 <_vfiprintf_r+0x264>
  402142:	9809      	ldr	r0, [sp, #36]	; 0x24
  402144:	46d1      	mov	r9, sl
  402146:	0933      	lsrs	r3, r6, #4
  402148:	f006 010f 	and.w	r1, r6, #15
  40214c:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
  402150:	093a      	lsrs	r2, r7, #4
  402152:	461e      	mov	r6, r3
  402154:	4617      	mov	r7, r2
  402156:	5c43      	ldrb	r3, [r0, r1]
  402158:	f809 3d01 	strb.w	r3, [r9, #-1]!
  40215c:	ea56 0307 	orrs.w	r3, r6, r7
  402160:	d1f1      	bne.n	402146 <_vfiprintf_r+0x94a>
  402162:	464b      	mov	r3, r9
  402164:	f8cd 901c 	str.w	r9, [sp, #28]
  402168:	ebc3 090a 	rsb	r9, r3, sl
  40216c:	e478      	b.n	401a60 <_vfiprintf_r+0x264>
  40216e:	f8cd a01c 	str.w	sl, [sp, #28]
  402172:	e475      	b.n	401a60 <_vfiprintf_r+0x264>
  402174:	2302      	movs	r3, #2
  402176:	e444      	b.n	401a02 <_vfiprintf_r+0x206>
  402178:	0040479c 	.word	0x0040479c
  40217c:	004047dc 	.word	0x004047dc
  402180:	2a00      	cmp	r2, #0
  402182:	f040 80d7 	bne.w	402334 <_vfiprintf_r+0xb38>
  402186:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
  40218a:	2b00      	cmp	r3, #0
  40218c:	f000 80ae 	beq.w	4022ec <_vfiprintf_r+0xaf0>
  402190:	2301      	movs	r3, #1
  402192:	f10d 012f 	add.w	r1, sp, #47	; 0x2f
  402196:	4618      	mov	r0, r3
  402198:	931b      	str	r3, [sp, #108]	; 0x6c
  40219a:	461a      	mov	r2, r3
  40219c:	911a      	str	r1, [sp, #104]	; 0x68
  40219e:	4654      	mov	r4, sl
  4021a0:	e679      	b.n	401e96 <_vfiprintf_r+0x69a>
  4021a2:	9a03      	ldr	r2, [sp, #12]
  4021a4:	1b95      	subs	r5, r2, r6
  4021a6:	2d00      	cmp	r5, #0
  4021a8:	4652      	mov	r2, sl
  4021aa:	f73f af0a 	bgt.w	401fc2 <_vfiprintf_r+0x7c6>
  4021ae:	e6c9      	b.n	401f44 <_vfiprintf_r+0x748>
  4021b0:	465d      	mov	r5, fp
  4021b2:	f7ff bb7c 	b.w	4018ae <_vfiprintf_r+0xb2>
  4021b6:	9801      	ldr	r0, [sp, #4]
  4021b8:	9900      	ldr	r1, [sp, #0]
  4021ba:	aa0d      	add	r2, sp, #52	; 0x34
  4021bc:	f7ff fae2 	bl	401784 <__sprint_r.part.0>
  4021c0:	2800      	cmp	r0, #0
  4021c2:	f47f aedf 	bne.w	401f84 <_vfiprintf_r+0x788>
  4021c6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  4021c8:	4652      	mov	r2, sl
  4021ca:	e6f3      	b.n	401fb4 <_vfiprintf_r+0x7b8>
  4021cc:	9904      	ldr	r1, [sp, #16]
  4021ce:	460a      	mov	r2, r1
  4021d0:	3204      	adds	r2, #4
  4021d2:	680e      	ldr	r6, [r1, #0]
  4021d4:	9204      	str	r2, [sp, #16]
  4021d6:	2700      	movs	r7, #0
  4021d8:	e413      	b.n	401a02 <_vfiprintf_r+0x206>
  4021da:	3204      	adds	r2, #4
  4021dc:	681e      	ldr	r6, [r3, #0]
  4021de:	9204      	str	r2, [sp, #16]
  4021e0:	2301      	movs	r3, #1
  4021e2:	2700      	movs	r7, #0
  4021e4:	e40d      	b.n	401a02 <_vfiprintf_r+0x206>
  4021e6:	6816      	ldr	r6, [r2, #0]
  4021e8:	3204      	adds	r2, #4
  4021ea:	9204      	str	r2, [sp, #16]
  4021ec:	2700      	movs	r7, #0
  4021ee:	e52d      	b.n	401c4c <_vfiprintf_r+0x450>
  4021f0:	9a04      	ldr	r2, [sp, #16]
  4021f2:	6816      	ldr	r6, [r2, #0]
  4021f4:	4613      	mov	r3, r2
  4021f6:	3304      	adds	r3, #4
  4021f8:	17f7      	asrs	r7, r6, #31
  4021fa:	9304      	str	r3, [sp, #16]
  4021fc:	4632      	mov	r2, r6
  4021fe:	463b      	mov	r3, r7
  402200:	e4bf      	b.n	401b82 <_vfiprintf_r+0x386>
  402202:	9801      	ldr	r0, [sp, #4]
  402204:	9900      	ldr	r1, [sp, #0]
  402206:	aa0d      	add	r2, sp, #52	; 0x34
  402208:	f7ff fabc 	bl	401784 <__sprint_r.part.0>
  40220c:	2800      	cmp	r0, #0
  40220e:	f47f aeb9 	bne.w	401f84 <_vfiprintf_r+0x788>
  402212:	4654      	mov	r4, sl
  402214:	f7ff bbbe 	b.w	401994 <_vfiprintf_r+0x198>
  402218:	4608      	mov	r0, r1
  40221a:	4654      	mov	r4, sl
  40221c:	4611      	mov	r1, r2
  40221e:	e64c      	b.n	401eba <_vfiprintf_r+0x6be>
  402220:	46d1      	mov	r9, sl
  402222:	f8cd c014 	str.w	ip, [sp, #20]
  402226:	4630      	mov	r0, r6
  402228:	4639      	mov	r1, r7
  40222a:	220a      	movs	r2, #10
  40222c:	2300      	movs	r3, #0
  40222e:	f001 feab 	bl	403f88 <__aeabi_uldivmod>
  402232:	3230      	adds	r2, #48	; 0x30
  402234:	4630      	mov	r0, r6
  402236:	4639      	mov	r1, r7
  402238:	f809 2d01 	strb.w	r2, [r9, #-1]!
  40223c:	2300      	movs	r3, #0
  40223e:	220a      	movs	r2, #10
  402240:	f001 fea2 	bl	403f88 <__aeabi_uldivmod>
  402244:	4606      	mov	r6, r0
  402246:	460f      	mov	r7, r1
  402248:	ea56 0307 	orrs.w	r3, r6, r7
  40224c:	d1eb      	bne.n	402226 <_vfiprintf_r+0xa2a>
  40224e:	f8dd c014 	ldr.w	ip, [sp, #20]
  402252:	e786      	b.n	402162 <_vfiprintf_r+0x966>
  402254:	2b30      	cmp	r3, #48	; 0x30
  402256:	9b07      	ldr	r3, [sp, #28]
  402258:	d086      	beq.n	402168 <_vfiprintf_r+0x96c>
  40225a:	3b01      	subs	r3, #1
  40225c:	461a      	mov	r2, r3
  40225e:	9307      	str	r3, [sp, #28]
  402260:	2330      	movs	r3, #48	; 0x30
  402262:	ebc2 090a 	rsb	r9, r2, sl
  402266:	f801 3c01 	strb.w	r3, [r1, #-1]
  40226a:	f7ff bbf9 	b.w	401a60 <_vfiprintf_r+0x264>
  40226e:	9801      	ldr	r0, [sp, #4]
  402270:	9900      	ldr	r1, [sp, #0]
  402272:	f8cd c014 	str.w	ip, [sp, #20]
  402276:	aa0d      	add	r2, sp, #52	; 0x34
  402278:	f7ff fa84 	bl	401784 <__sprint_r.part.0>
  40227c:	2800      	cmp	r0, #0
  40227e:	f47f ae81 	bne.w	401f84 <_vfiprintf_r+0x788>
  402282:	990e      	ldr	r1, [sp, #56]	; 0x38
  402284:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  402286:	f8dd c014 	ldr.w	ip, [sp, #20]
  40228a:	1c48      	adds	r0, r1, #1
  40228c:	4654      	mov	r4, sl
  40228e:	e614      	b.n	401eba <_vfiprintf_r+0x6be>
  402290:	9801      	ldr	r0, [sp, #4]
  402292:	9900      	ldr	r1, [sp, #0]
  402294:	f8cd c020 	str.w	ip, [sp, #32]
  402298:	aa0d      	add	r2, sp, #52	; 0x34
  40229a:	f7ff fa73 	bl	401784 <__sprint_r.part.0>
  40229e:	2800      	cmp	r0, #0
  4022a0:	f47f ae70 	bne.w	401f84 <_vfiprintf_r+0x788>
  4022a4:	990e      	ldr	r1, [sp, #56]	; 0x38
  4022a6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  4022a8:	f8dd c020 	ldr.w	ip, [sp, #32]
  4022ac:	1c48      	adds	r0, r1, #1
  4022ae:	4654      	mov	r4, sl
  4022b0:	e5f4      	b.n	401e9c <_vfiprintf_r+0x6a0>
  4022b2:	2a00      	cmp	r2, #0
  4022b4:	d167      	bne.n	402386 <_vfiprintf_r+0xb8a>
  4022b6:	2001      	movs	r0, #1
  4022b8:	4611      	mov	r1, r2
  4022ba:	4654      	mov	r4, sl
  4022bc:	e601      	b.n	401ec2 <_vfiprintf_r+0x6c6>
  4022be:	9801      	ldr	r0, [sp, #4]
  4022c0:	9900      	ldr	r1, [sp, #0]
  4022c2:	aa0d      	add	r2, sp, #52	; 0x34
  4022c4:	f7ff fa5e 	bl	401784 <__sprint_r.part.0>
  4022c8:	2800      	cmp	r0, #0
  4022ca:	f47f ae5b 	bne.w	401f84 <_vfiprintf_r+0x788>
  4022ce:	980e      	ldr	r0, [sp, #56]	; 0x38
  4022d0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  4022d2:	3001      	adds	r0, #1
  4022d4:	4654      	mov	r4, sl
  4022d6:	e624      	b.n	401f22 <_vfiprintf_r+0x726>
  4022d8:	252d      	movs	r5, #45	; 0x2d
  4022da:	4276      	negs	r6, r6
  4022dc:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
  4022e0:	f88d 502f 	strb.w	r5, [sp, #47]	; 0x2f
  4022e4:	46e1      	mov	r9, ip
  4022e6:	2301      	movs	r3, #1
  4022e8:	f7ff bb91 	b.w	401a0e <_vfiprintf_r+0x212>
  4022ec:	9b05      	ldr	r3, [sp, #20]
  4022ee:	4611      	mov	r1, r2
  4022f0:	2001      	movs	r0, #1
  4022f2:	4654      	mov	r4, sl
  4022f4:	2b00      	cmp	r3, #0
  4022f6:	f43f ade4 	beq.w	401ec2 <_vfiprintf_r+0x6c6>
  4022fa:	aa0c      	add	r2, sp, #48	; 0x30
  4022fc:	2302      	movs	r3, #2
  4022fe:	e88a 000c 	stmia.w	sl, {r2, r3}
  402302:	461a      	mov	r2, r3
  402304:	e5d6      	b.n	401eb4 <_vfiprintf_r+0x6b8>
  402306:	f018 0f10 	tst.w	r8, #16
  40230a:	d10b      	bne.n	402324 <_vfiprintf_r+0xb28>
  40230c:	f018 0f40 	tst.w	r8, #64	; 0x40
  402310:	d008      	beq.n	402324 <_vfiprintf_r+0xb28>
  402312:	9a04      	ldr	r2, [sp, #16]
  402314:	6813      	ldr	r3, [r2, #0]
  402316:	3204      	adds	r2, #4
  402318:	9204      	str	r2, [sp, #16]
  40231a:	f8bd 2008 	ldrh.w	r2, [sp, #8]
  40231e:	801a      	strh	r2, [r3, #0]
  402320:	f7ff ba9e 	b.w	401860 <_vfiprintf_r+0x64>
  402324:	9a04      	ldr	r2, [sp, #16]
  402326:	6813      	ldr	r3, [r2, #0]
  402328:	3204      	adds	r2, #4
  40232a:	9204      	str	r2, [sp, #16]
  40232c:	9a02      	ldr	r2, [sp, #8]
  40232e:	601a      	str	r2, [r3, #0]
  402330:	f7ff ba96 	b.w	401860 <_vfiprintf_r+0x64>
  402334:	9801      	ldr	r0, [sp, #4]
  402336:	9900      	ldr	r1, [sp, #0]
  402338:	f8cd c020 	str.w	ip, [sp, #32]
  40233c:	aa0d      	add	r2, sp, #52	; 0x34
  40233e:	f7ff fa21 	bl	401784 <__sprint_r.part.0>
  402342:	2800      	cmp	r0, #0
  402344:	f47f ae1e 	bne.w	401f84 <_vfiprintf_r+0x788>
  402348:	990e      	ldr	r1, [sp, #56]	; 0x38
  40234a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  40234c:	f8dd c020 	ldr.w	ip, [sp, #32]
  402350:	1c48      	adds	r0, r1, #1
  402352:	4654      	mov	r4, sl
  402354:	e591      	b.n	401e7a <_vfiprintf_r+0x67e>
  402356:	f048 0820 	orr.w	r8, r8, #32
  40235a:	f10b 0001 	add.w	r0, fp, #1
  40235e:	f89b 3001 	ldrb.w	r3, [fp, #1]
  402362:	f7ff bab4 	b.w	4018ce <_vfiprintf_r+0xd2>
  402366:	426d      	negs	r5, r5
  402368:	9304      	str	r3, [sp, #16]
  40236a:	4658      	mov	r0, fp
  40236c:	f7ff bbc6 	b.w	401afc <_vfiprintf_r+0x300>
  402370:	9807      	ldr	r0, [sp, #28]
  402372:	9604      	str	r6, [sp, #16]
  402374:	f001 fc46 	bl	403c04 <strlen>
  402378:	f89d 502f 	ldrb.w	r5, [sp, #47]	; 0x2f
  40237c:	4681      	mov	r9, r0
  40237e:	f04f 0c00 	mov.w	ip, #0
  402382:	f7ff bb6d 	b.w	401a60 <_vfiprintf_r+0x264>
  402386:	9801      	ldr	r0, [sp, #4]
  402388:	9900      	ldr	r1, [sp, #0]
  40238a:	f8cd c014 	str.w	ip, [sp, #20]
  40238e:	aa0d      	add	r2, sp, #52	; 0x34
  402390:	f7ff f9f8 	bl	401784 <__sprint_r.part.0>
  402394:	2800      	cmp	r0, #0
  402396:	f47f adf5 	bne.w	401f84 <_vfiprintf_r+0x788>
  40239a:	990e      	ldr	r1, [sp, #56]	; 0x38
  40239c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  40239e:	f8dd c014 	ldr.w	ip, [sp, #20]
  4023a2:	1c48      	adds	r0, r1, #1
  4023a4:	4654      	mov	r4, sl
  4023a6:	e58c      	b.n	401ec2 <_vfiprintf_r+0x6c6>
  4023a8:	990e      	ldr	r1, [sp, #56]	; 0x38
  4023aa:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  4023ac:	4f15      	ldr	r7, [pc, #84]	; (402404 <_vfiprintf_r+0xc08>)
  4023ae:	3101      	adds	r1, #1
  4023b0:	f7ff bb98 	b.w	401ae4 <_vfiprintf_r+0x2e8>
  4023b4:	f1bc 0f06 	cmp.w	ip, #6
  4023b8:	bf28      	it	cs
  4023ba:	f04f 0c06 	movcs.w	ip, #6
  4023be:	4b12      	ldr	r3, [pc, #72]	; (402408 <_vfiprintf_r+0xc0c>)
  4023c0:	9604      	str	r6, [sp, #16]
  4023c2:	46e1      	mov	r9, ip
  4023c4:	ea2c 76ec 	bic.w	r6, ip, ip, asr #31
  4023c8:	9307      	str	r3, [sp, #28]
  4023ca:	e460      	b.n	401c8e <_vfiprintf_r+0x492>
  4023cc:	990e      	ldr	r1, [sp, #56]	; 0x38
  4023ce:	4f0d      	ldr	r7, [pc, #52]	; (402404 <_vfiprintf_r+0xc08>)
  4023d0:	f101 0e01 	add.w	lr, r1, #1
  4023d4:	e618      	b.n	402008 <_vfiprintf_r+0x80c>
  4023d6:	46e1      	mov	r9, ip
  4023d8:	f89d 502f 	ldrb.w	r5, [sp, #47]	; 0x2f
  4023dc:	9604      	str	r6, [sp, #16]
  4023de:	4684      	mov	ip, r0
  4023e0:	f7ff bb3e 	b.w	401a60 <_vfiprintf_r+0x264>
  4023e4:	4686      	mov	lr, r0
  4023e6:	e66b      	b.n	4020c0 <_vfiprintf_r+0x8c4>
  4023e8:	9a04      	ldr	r2, [sp, #16]
  4023ea:	f89b 3001 	ldrb.w	r3, [fp, #1]
  4023ee:	6816      	ldr	r6, [r2, #0]
  4023f0:	3204      	adds	r2, #4
  4023f2:	2e00      	cmp	r6, #0
  4023f4:	9204      	str	r2, [sp, #16]
  4023f6:	f6bf aa6a 	bge.w	4018ce <_vfiprintf_r+0xd2>
  4023fa:	f04f 36ff 	mov.w	r6, #4294967295
  4023fe:	f7ff ba66 	b.w	4018ce <_vfiprintf_r+0xd2>
  402402:	bf00      	nop
  402404:	004047dc 	.word	0x004047dc
  402408:	004047d4 	.word	0x004047d4

0040240c <__sbprintf>:
  40240c:	e92d 42f0 	stmdb	sp!, {r4, r5, r6, r7, r9, lr}
  402410:	460c      	mov	r4, r1
  402412:	f5ad 6d8d 	sub.w	sp, sp, #1128	; 0x468
  402416:	f8b1 e00c 	ldrh.w	lr, [r1, #12]
  40241a:	69e7      	ldr	r7, [r4, #28]
  40241c:	6e49      	ldr	r1, [r1, #100]	; 0x64
  40241e:	f8b4 900e 	ldrh.w	r9, [r4, #14]
  402422:	9119      	str	r1, [sp, #100]	; 0x64
  402424:	ad1a      	add	r5, sp, #104	; 0x68
  402426:	f44f 6680 	mov.w	r6, #1024	; 0x400
  40242a:	f02e 0e02 	bic.w	lr, lr, #2
  40242e:	f04f 0c00 	mov.w	ip, #0
  402432:	9707      	str	r7, [sp, #28]
  402434:	4669      	mov	r1, sp
  402436:	6a67      	ldr	r7, [r4, #36]	; 0x24
  402438:	9500      	str	r5, [sp, #0]
  40243a:	9504      	str	r5, [sp, #16]
  40243c:	9602      	str	r6, [sp, #8]
  40243e:	9605      	str	r6, [sp, #20]
  402440:	f8ad e00c 	strh.w	lr, [sp, #12]
  402444:	f8ad 900e 	strh.w	r9, [sp, #14]
  402448:	9709      	str	r7, [sp, #36]	; 0x24
  40244a:	f8cd c018 	str.w	ip, [sp, #24]
  40244e:	4606      	mov	r6, r0
  402450:	f7ff f9d4 	bl	4017fc <_vfiprintf_r>
  402454:	1e05      	subs	r5, r0, #0
  402456:	db07      	blt.n	402468 <__sbprintf+0x5c>
  402458:	4630      	mov	r0, r6
  40245a:	4669      	mov	r1, sp
  40245c:	f000 f92e 	bl	4026bc <_fflush_r>
  402460:	2800      	cmp	r0, #0
  402462:	bf18      	it	ne
  402464:	f04f 35ff 	movne.w	r5, #4294967295
  402468:	f8bd 300c 	ldrh.w	r3, [sp, #12]
  40246c:	065b      	lsls	r3, r3, #25
  40246e:	d503      	bpl.n	402478 <__sbprintf+0x6c>
  402470:	89a3      	ldrh	r3, [r4, #12]
  402472:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  402476:	81a3      	strh	r3, [r4, #12]
  402478:	4628      	mov	r0, r5
  40247a:	f50d 6d8d 	add.w	sp, sp, #1128	; 0x468
  40247e:	e8bd 82f0 	ldmia.w	sp!, {r4, r5, r6, r7, r9, pc}
  402482:	bf00      	nop

00402484 <__swsetup_r>:
  402484:	b538      	push	{r3, r4, r5, lr}
  402486:	4b2f      	ldr	r3, [pc, #188]	; (402544 <__swsetup_r+0xc0>)
  402488:	681b      	ldr	r3, [r3, #0]
  40248a:	4605      	mov	r5, r0
  40248c:	460c      	mov	r4, r1
  40248e:	b113      	cbz	r3, 402496 <__swsetup_r+0x12>
  402490:	6b9a      	ldr	r2, [r3, #56]	; 0x38
  402492:	2a00      	cmp	r2, #0
  402494:	d036      	beq.n	402504 <__swsetup_r+0x80>
  402496:	89a2      	ldrh	r2, [r4, #12]
  402498:	b293      	uxth	r3, r2
  40249a:	0718      	lsls	r0, r3, #28
  40249c:	d50c      	bpl.n	4024b8 <__swsetup_r+0x34>
  40249e:	6920      	ldr	r0, [r4, #16]
  4024a0:	b1a8      	cbz	r0, 4024ce <__swsetup_r+0x4a>
  4024a2:	f013 0201 	ands.w	r2, r3, #1
  4024a6:	d01e      	beq.n	4024e6 <__swsetup_r+0x62>
  4024a8:	6963      	ldr	r3, [r4, #20]
  4024aa:	2200      	movs	r2, #0
  4024ac:	425b      	negs	r3, r3
  4024ae:	61a3      	str	r3, [r4, #24]
  4024b0:	60a2      	str	r2, [r4, #8]
  4024b2:	b1f0      	cbz	r0, 4024f2 <__swsetup_r+0x6e>
  4024b4:	2000      	movs	r0, #0
  4024b6:	bd38      	pop	{r3, r4, r5, pc}
  4024b8:	06d9      	lsls	r1, r3, #27
  4024ba:	d53b      	bpl.n	402534 <__swsetup_r+0xb0>
  4024bc:	0758      	lsls	r0, r3, #29
  4024be:	d425      	bmi.n	40250c <__swsetup_r+0x88>
  4024c0:	6920      	ldr	r0, [r4, #16]
  4024c2:	f042 0308 	orr.w	r3, r2, #8
  4024c6:	81a3      	strh	r3, [r4, #12]
  4024c8:	b29b      	uxth	r3, r3
  4024ca:	2800      	cmp	r0, #0
  4024cc:	d1e9      	bne.n	4024a2 <__swsetup_r+0x1e>
  4024ce:	f403 7220 	and.w	r2, r3, #640	; 0x280
  4024d2:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
  4024d6:	d0e4      	beq.n	4024a2 <__swsetup_r+0x1e>
  4024d8:	4628      	mov	r0, r5
  4024da:	4621      	mov	r1, r4
  4024dc:	f000 fcf2 	bl	402ec4 <__smakebuf_r>
  4024e0:	89a3      	ldrh	r3, [r4, #12]
  4024e2:	6920      	ldr	r0, [r4, #16]
  4024e4:	e7dd      	b.n	4024a2 <__swsetup_r+0x1e>
  4024e6:	0799      	lsls	r1, r3, #30
  4024e8:	bf58      	it	pl
  4024ea:	6962      	ldrpl	r2, [r4, #20]
  4024ec:	60a2      	str	r2, [r4, #8]
  4024ee:	2800      	cmp	r0, #0
  4024f0:	d1e0      	bne.n	4024b4 <__swsetup_r+0x30>
  4024f2:	89a3      	ldrh	r3, [r4, #12]
  4024f4:	061a      	lsls	r2, r3, #24
  4024f6:	d5de      	bpl.n	4024b6 <__swsetup_r+0x32>
  4024f8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  4024fc:	81a3      	strh	r3, [r4, #12]
  4024fe:	f04f 30ff 	mov.w	r0, #4294967295
  402502:	bd38      	pop	{r3, r4, r5, pc}
  402504:	4618      	mov	r0, r3
  402506:	f000 f96d 	bl	4027e4 <__sinit>
  40250a:	e7c4      	b.n	402496 <__swsetup_r+0x12>
  40250c:	6b21      	ldr	r1, [r4, #48]	; 0x30
  40250e:	b149      	cbz	r1, 402524 <__swsetup_r+0xa0>
  402510:	f104 0340 	add.w	r3, r4, #64	; 0x40
  402514:	4299      	cmp	r1, r3
  402516:	d003      	beq.n	402520 <__swsetup_r+0x9c>
  402518:	4628      	mov	r0, r5
  40251a:	f000 fa3b 	bl	402994 <_free_r>
  40251e:	89a2      	ldrh	r2, [r4, #12]
  402520:	2300      	movs	r3, #0
  402522:	6323      	str	r3, [r4, #48]	; 0x30
  402524:	f022 0224 	bic.w	r2, r2, #36	; 0x24
  402528:	2300      	movs	r3, #0
  40252a:	6920      	ldr	r0, [r4, #16]
  40252c:	6063      	str	r3, [r4, #4]
  40252e:	b292      	uxth	r2, r2
  402530:	6020      	str	r0, [r4, #0]
  402532:	e7c6      	b.n	4024c2 <__swsetup_r+0x3e>
  402534:	f042 0240 	orr.w	r2, r2, #64	; 0x40
  402538:	2309      	movs	r3, #9
  40253a:	602b      	str	r3, [r5, #0]
  40253c:	f04f 30ff 	mov.w	r0, #4294967295
  402540:	81a2      	strh	r2, [r4, #12]
  402542:	bd38      	pop	{r3, r4, r5, pc}
  402544:	20000448 	.word	0x20000448

00402548 <register_fini>:
  402548:	4b02      	ldr	r3, [pc, #8]	; (402554 <register_fini+0xc>)
  40254a:	b113      	cbz	r3, 402552 <register_fini+0xa>
  40254c:	4802      	ldr	r0, [pc, #8]	; (402558 <register_fini+0x10>)
  40254e:	f000 b805 	b.w	40255c <atexit>
  402552:	4770      	bx	lr
  402554:	00000000 	.word	0x00000000
  402558:	004027f9 	.word	0x004027f9

0040255c <atexit>:
  40255c:	4601      	mov	r1, r0
  40255e:	2000      	movs	r0, #0
  402560:	4602      	mov	r2, r0
  402562:	4603      	mov	r3, r0
  402564:	f001 bc1c 	b.w	403da0 <__register_exitproc>

00402568 <__sflush_r>:
  402568:	898b      	ldrh	r3, [r1, #12]
  40256a:	b29a      	uxth	r2, r3
  40256c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  402570:	460d      	mov	r5, r1
  402572:	0711      	lsls	r1, r2, #28
  402574:	4680      	mov	r8, r0
  402576:	d43c      	bmi.n	4025f2 <__sflush_r+0x8a>
  402578:	686a      	ldr	r2, [r5, #4]
  40257a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
  40257e:	2a00      	cmp	r2, #0
  402580:	81ab      	strh	r3, [r5, #12]
  402582:	dd65      	ble.n	402650 <__sflush_r+0xe8>
  402584:	6aae      	ldr	r6, [r5, #40]	; 0x28
  402586:	2e00      	cmp	r6, #0
  402588:	d04b      	beq.n	402622 <__sflush_r+0xba>
  40258a:	b29b      	uxth	r3, r3
  40258c:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
  402590:	2100      	movs	r1, #0
  402592:	b292      	uxth	r2, r2
  402594:	f8d8 4000 	ldr.w	r4, [r8]
  402598:	f8c8 1000 	str.w	r1, [r8]
  40259c:	2a00      	cmp	r2, #0
  40259e:	d05b      	beq.n	402658 <__sflush_r+0xf0>
  4025a0:	6d2a      	ldr	r2, [r5, #80]	; 0x50
  4025a2:	075f      	lsls	r7, r3, #29
  4025a4:	d505      	bpl.n	4025b2 <__sflush_r+0x4a>
  4025a6:	6869      	ldr	r1, [r5, #4]
  4025a8:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  4025aa:	1a52      	subs	r2, r2, r1
  4025ac:	b10b      	cbz	r3, 4025b2 <__sflush_r+0x4a>
  4025ae:	6beb      	ldr	r3, [r5, #60]	; 0x3c
  4025b0:	1ad2      	subs	r2, r2, r3
  4025b2:	4640      	mov	r0, r8
  4025b4:	69e9      	ldr	r1, [r5, #28]
  4025b6:	2300      	movs	r3, #0
  4025b8:	47b0      	blx	r6
  4025ba:	1c46      	adds	r6, r0, #1
  4025bc:	d056      	beq.n	40266c <__sflush_r+0x104>
  4025be:	89ab      	ldrh	r3, [r5, #12]
  4025c0:	692a      	ldr	r2, [r5, #16]
  4025c2:	602a      	str	r2, [r5, #0]
  4025c4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  4025c8:	b29b      	uxth	r3, r3
  4025ca:	2200      	movs	r2, #0
  4025cc:	606a      	str	r2, [r5, #4]
  4025ce:	04da      	lsls	r2, r3, #19
  4025d0:	81ab      	strh	r3, [r5, #12]
  4025d2:	d43b      	bmi.n	40264c <__sflush_r+0xe4>
  4025d4:	6b29      	ldr	r1, [r5, #48]	; 0x30
  4025d6:	f8c8 4000 	str.w	r4, [r8]
  4025da:	b311      	cbz	r1, 402622 <__sflush_r+0xba>
  4025dc:	f105 0340 	add.w	r3, r5, #64	; 0x40
  4025e0:	4299      	cmp	r1, r3
  4025e2:	d002      	beq.n	4025ea <__sflush_r+0x82>
  4025e4:	4640      	mov	r0, r8
  4025e6:	f000 f9d5 	bl	402994 <_free_r>
  4025ea:	2000      	movs	r0, #0
  4025ec:	6328      	str	r0, [r5, #48]	; 0x30
  4025ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4025f2:	692e      	ldr	r6, [r5, #16]
  4025f4:	b1ae      	cbz	r6, 402622 <__sflush_r+0xba>
  4025f6:	682c      	ldr	r4, [r5, #0]
  4025f8:	602e      	str	r6, [r5, #0]
  4025fa:	0791      	lsls	r1, r2, #30
  4025fc:	bf0c      	ite	eq
  4025fe:	696b      	ldreq	r3, [r5, #20]
  402600:	2300      	movne	r3, #0
  402602:	1ba4      	subs	r4, r4, r6
  402604:	60ab      	str	r3, [r5, #8]
  402606:	e00a      	b.n	40261e <__sflush_r+0xb6>
  402608:	4632      	mov	r2, r6
  40260a:	4623      	mov	r3, r4
  40260c:	6a6f      	ldr	r7, [r5, #36]	; 0x24
  40260e:	69e9      	ldr	r1, [r5, #28]
  402610:	4640      	mov	r0, r8
  402612:	47b8      	blx	r7
  402614:	2800      	cmp	r0, #0
  402616:	eba4 0400 	sub.w	r4, r4, r0
  40261a:	4406      	add	r6, r0
  40261c:	dd04      	ble.n	402628 <__sflush_r+0xc0>
  40261e:	2c00      	cmp	r4, #0
  402620:	dcf2      	bgt.n	402608 <__sflush_r+0xa0>
  402622:	2000      	movs	r0, #0
  402624:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  402628:	89ab      	ldrh	r3, [r5, #12]
  40262a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40262e:	81ab      	strh	r3, [r5, #12]
  402630:	f04f 30ff 	mov.w	r0, #4294967295
  402634:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  402638:	89ab      	ldrh	r3, [r5, #12]
  40263a:	692a      	ldr	r2, [r5, #16]
  40263c:	6069      	str	r1, [r5, #4]
  40263e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  402642:	b29b      	uxth	r3, r3
  402644:	81ab      	strh	r3, [r5, #12]
  402646:	04db      	lsls	r3, r3, #19
  402648:	602a      	str	r2, [r5, #0]
  40264a:	d5c3      	bpl.n	4025d4 <__sflush_r+0x6c>
  40264c:	6528      	str	r0, [r5, #80]	; 0x50
  40264e:	e7c1      	b.n	4025d4 <__sflush_r+0x6c>
  402650:	6bea      	ldr	r2, [r5, #60]	; 0x3c
  402652:	2a00      	cmp	r2, #0
  402654:	dc96      	bgt.n	402584 <__sflush_r+0x1c>
  402656:	e7e4      	b.n	402622 <__sflush_r+0xba>
  402658:	2301      	movs	r3, #1
  40265a:	4640      	mov	r0, r8
  40265c:	69e9      	ldr	r1, [r5, #28]
  40265e:	47b0      	blx	r6
  402660:	1c43      	adds	r3, r0, #1
  402662:	4602      	mov	r2, r0
  402664:	d019      	beq.n	40269a <__sflush_r+0x132>
  402666:	89ab      	ldrh	r3, [r5, #12]
  402668:	6aae      	ldr	r6, [r5, #40]	; 0x28
  40266a:	e79a      	b.n	4025a2 <__sflush_r+0x3a>
  40266c:	f8d8 1000 	ldr.w	r1, [r8]
  402670:	2900      	cmp	r1, #0
  402672:	d0e1      	beq.n	402638 <__sflush_r+0xd0>
  402674:	291d      	cmp	r1, #29
  402676:	d007      	beq.n	402688 <__sflush_r+0x120>
  402678:	2916      	cmp	r1, #22
  40267a:	d005      	beq.n	402688 <__sflush_r+0x120>
  40267c:	89ab      	ldrh	r3, [r5, #12]
  40267e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  402682:	81ab      	strh	r3, [r5, #12]
  402684:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  402688:	89ab      	ldrh	r3, [r5, #12]
  40268a:	692a      	ldr	r2, [r5, #16]
  40268c:	602a      	str	r2, [r5, #0]
  40268e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  402692:	2200      	movs	r2, #0
  402694:	81ab      	strh	r3, [r5, #12]
  402696:	606a      	str	r2, [r5, #4]
  402698:	e79c      	b.n	4025d4 <__sflush_r+0x6c>
  40269a:	f8d8 3000 	ldr.w	r3, [r8]
  40269e:	2b00      	cmp	r3, #0
  4026a0:	d0e1      	beq.n	402666 <__sflush_r+0xfe>
  4026a2:	2b1d      	cmp	r3, #29
  4026a4:	d007      	beq.n	4026b6 <__sflush_r+0x14e>
  4026a6:	2b16      	cmp	r3, #22
  4026a8:	d005      	beq.n	4026b6 <__sflush_r+0x14e>
  4026aa:	89ab      	ldrh	r3, [r5, #12]
  4026ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  4026b0:	81ab      	strh	r3, [r5, #12]
  4026b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4026b6:	f8c8 4000 	str.w	r4, [r8]
  4026ba:	e7b2      	b.n	402622 <__sflush_r+0xba>

004026bc <_fflush_r>:
  4026bc:	b510      	push	{r4, lr}
  4026be:	4604      	mov	r4, r0
  4026c0:	b082      	sub	sp, #8
  4026c2:	b108      	cbz	r0, 4026c8 <_fflush_r+0xc>
  4026c4:	6b83      	ldr	r3, [r0, #56]	; 0x38
  4026c6:	b153      	cbz	r3, 4026de <_fflush_r+0x22>
  4026c8:	f9b1 000c 	ldrsh.w	r0, [r1, #12]
  4026cc:	b908      	cbnz	r0, 4026d2 <_fflush_r+0x16>
  4026ce:	b002      	add	sp, #8
  4026d0:	bd10      	pop	{r4, pc}
  4026d2:	4620      	mov	r0, r4
  4026d4:	b002      	add	sp, #8
  4026d6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  4026da:	f7ff bf45 	b.w	402568 <__sflush_r>
  4026de:	9101      	str	r1, [sp, #4]
  4026e0:	f000 f880 	bl	4027e4 <__sinit>
  4026e4:	9901      	ldr	r1, [sp, #4]
  4026e6:	e7ef      	b.n	4026c8 <_fflush_r+0xc>

004026e8 <_cleanup_r>:
  4026e8:	4901      	ldr	r1, [pc, #4]	; (4026f0 <_cleanup_r+0x8>)
  4026ea:	f000 bbb7 	b.w	402e5c <_fwalk_reent>
  4026ee:	bf00      	nop
  4026f0:	00403e69 	.word	0x00403e69

004026f4 <__sinit.part.1>:
  4026f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4026f8:	4b35      	ldr	r3, [pc, #212]	; (4027d0 <__sinit.part.1+0xdc>)
  4026fa:	6845      	ldr	r5, [r0, #4]
  4026fc:	63c3      	str	r3, [r0, #60]	; 0x3c
  4026fe:	2400      	movs	r4, #0
  402700:	4607      	mov	r7, r0
  402702:	f500 723b 	add.w	r2, r0, #748	; 0x2ec
  402706:	2304      	movs	r3, #4
  402708:	2103      	movs	r1, #3
  40270a:	f8c0 12e4 	str.w	r1, [r0, #740]	; 0x2e4
  40270e:	f8c0 22e8 	str.w	r2, [r0, #744]	; 0x2e8
  402712:	f8c0 42e0 	str.w	r4, [r0, #736]	; 0x2e0
  402716:	b083      	sub	sp, #12
  402718:	602c      	str	r4, [r5, #0]
  40271a:	606c      	str	r4, [r5, #4]
  40271c:	60ac      	str	r4, [r5, #8]
  40271e:	666c      	str	r4, [r5, #100]	; 0x64
  402720:	81ec      	strh	r4, [r5, #14]
  402722:	612c      	str	r4, [r5, #16]
  402724:	616c      	str	r4, [r5, #20]
  402726:	61ac      	str	r4, [r5, #24]
  402728:	81ab      	strh	r3, [r5, #12]
  40272a:	4621      	mov	r1, r4
  40272c:	f105 005c 	add.w	r0, r5, #92	; 0x5c
  402730:	2208      	movs	r2, #8
  402732:	f7fe ff55 	bl	4015e0 <memset>
  402736:	68be      	ldr	r6, [r7, #8]
  402738:	f8df b098 	ldr.w	fp, [pc, #152]	; 4027d4 <__sinit.part.1+0xe0>
  40273c:	f8df a098 	ldr.w	sl, [pc, #152]	; 4027d8 <__sinit.part.1+0xe4>
  402740:	f8df 9098 	ldr.w	r9, [pc, #152]	; 4027dc <__sinit.part.1+0xe8>
  402744:	f8df 8098 	ldr.w	r8, [pc, #152]	; 4027e0 <__sinit.part.1+0xec>
  402748:	f8c5 b020 	str.w	fp, [r5, #32]
  40274c:	2301      	movs	r3, #1
  40274e:	2209      	movs	r2, #9
  402750:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
  402754:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
  402758:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
  40275c:	61ed      	str	r5, [r5, #28]
  40275e:	4621      	mov	r1, r4
  402760:	81f3      	strh	r3, [r6, #14]
  402762:	81b2      	strh	r2, [r6, #12]
  402764:	f106 005c 	add.w	r0, r6, #92	; 0x5c
  402768:	6034      	str	r4, [r6, #0]
  40276a:	6074      	str	r4, [r6, #4]
  40276c:	60b4      	str	r4, [r6, #8]
  40276e:	6674      	str	r4, [r6, #100]	; 0x64
  402770:	6134      	str	r4, [r6, #16]
  402772:	6174      	str	r4, [r6, #20]
  402774:	61b4      	str	r4, [r6, #24]
  402776:	2208      	movs	r2, #8
  402778:	9301      	str	r3, [sp, #4]
  40277a:	f7fe ff31 	bl	4015e0 <memset>
  40277e:	68fd      	ldr	r5, [r7, #12]
  402780:	61f6      	str	r6, [r6, #28]
  402782:	2012      	movs	r0, #18
  402784:	2202      	movs	r2, #2
  402786:	f8c6 b020 	str.w	fp, [r6, #32]
  40278a:	f8c6 a024 	str.w	sl, [r6, #36]	; 0x24
  40278e:	f8c6 9028 	str.w	r9, [r6, #40]	; 0x28
  402792:	f8c6 802c 	str.w	r8, [r6, #44]	; 0x2c
  402796:	4621      	mov	r1, r4
  402798:	81a8      	strh	r0, [r5, #12]
  40279a:	81ea      	strh	r2, [r5, #14]
  40279c:	602c      	str	r4, [r5, #0]
  40279e:	606c      	str	r4, [r5, #4]
  4027a0:	60ac      	str	r4, [r5, #8]
  4027a2:	666c      	str	r4, [r5, #100]	; 0x64
  4027a4:	612c      	str	r4, [r5, #16]
  4027a6:	616c      	str	r4, [r5, #20]
  4027a8:	61ac      	str	r4, [r5, #24]
  4027aa:	f105 005c 	add.w	r0, r5, #92	; 0x5c
  4027ae:	2208      	movs	r2, #8
  4027b0:	f7fe ff16 	bl	4015e0 <memset>
  4027b4:	9b01      	ldr	r3, [sp, #4]
  4027b6:	61ed      	str	r5, [r5, #28]
  4027b8:	f8c5 b020 	str.w	fp, [r5, #32]
  4027bc:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
  4027c0:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
  4027c4:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
  4027c8:	63bb      	str	r3, [r7, #56]	; 0x38
  4027ca:	b003      	add	sp, #12
  4027cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4027d0:	004026e9 	.word	0x004026e9
  4027d4:	00403b81 	.word	0x00403b81
  4027d8:	00403ba5 	.word	0x00403ba5
  4027dc:	00403bdd 	.word	0x00403bdd
  4027e0:	00403bfd 	.word	0x00403bfd

004027e4 <__sinit>:
  4027e4:	6b83      	ldr	r3, [r0, #56]	; 0x38
  4027e6:	b103      	cbz	r3, 4027ea <__sinit+0x6>
  4027e8:	4770      	bx	lr
  4027ea:	f7ff bf83 	b.w	4026f4 <__sinit.part.1>
  4027ee:	bf00      	nop

004027f0 <__sfp_lock_acquire>:
  4027f0:	4770      	bx	lr
  4027f2:	bf00      	nop

004027f4 <__sfp_lock_release>:
  4027f4:	4770      	bx	lr
  4027f6:	bf00      	nop

004027f8 <__libc_fini_array>:
  4027f8:	b538      	push	{r3, r4, r5, lr}
  4027fa:	4b08      	ldr	r3, [pc, #32]	; (40281c <__libc_fini_array+0x24>)
  4027fc:	4d08      	ldr	r5, [pc, #32]	; (402820 <__libc_fini_array+0x28>)
  4027fe:	1aed      	subs	r5, r5, r3
  402800:	10ac      	asrs	r4, r5, #2
  402802:	bf18      	it	ne
  402804:	18ed      	addne	r5, r5, r3
  402806:	d005      	beq.n	402814 <__libc_fini_array+0x1c>
  402808:	3c01      	subs	r4, #1
  40280a:	f855 3d04 	ldr.w	r3, [r5, #-4]!
  40280e:	4798      	blx	r3
  402810:	2c00      	cmp	r4, #0
  402812:	d1f9      	bne.n	402808 <__libc_fini_array+0x10>
  402814:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  402818:	f001 bff2 	b.w	404800 <_fini>
  40281c:	0040480c 	.word	0x0040480c
  402820:	00404810 	.word	0x00404810

00402824 <__fputwc>:
  402824:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  402828:	b082      	sub	sp, #8
  40282a:	4607      	mov	r7, r0
  40282c:	460e      	mov	r6, r1
  40282e:	4614      	mov	r4, r2
  402830:	f000 fb42 	bl	402eb8 <__locale_mb_cur_max>
  402834:	2801      	cmp	r0, #1
  402836:	d041      	beq.n	4028bc <__fputwc+0x98>
  402838:	4638      	mov	r0, r7
  40283a:	a901      	add	r1, sp, #4
  40283c:	4632      	mov	r2, r6
  40283e:	f104 035c 	add.w	r3, r4, #92	; 0x5c
  402842:	f001 fa61 	bl	403d08 <_wcrtomb_r>
  402846:	f1b0 3fff 	cmp.w	r0, #4294967295
  40284a:	4680      	mov	r8, r0
  40284c:	d02f      	beq.n	4028ae <__fputwc+0x8a>
  40284e:	2800      	cmp	r0, #0
  402850:	d03c      	beq.n	4028cc <__fputwc+0xa8>
  402852:	f89d 1004 	ldrb.w	r1, [sp, #4]
  402856:	2500      	movs	r5, #0
  402858:	e009      	b.n	40286e <__fputwc+0x4a>
  40285a:	6823      	ldr	r3, [r4, #0]
  40285c:	7019      	strb	r1, [r3, #0]
  40285e:	6823      	ldr	r3, [r4, #0]
  402860:	3301      	adds	r3, #1
  402862:	6023      	str	r3, [r4, #0]
  402864:	3501      	adds	r5, #1
  402866:	45a8      	cmp	r8, r5
  402868:	d930      	bls.n	4028cc <__fputwc+0xa8>
  40286a:	ab01      	add	r3, sp, #4
  40286c:	5d59      	ldrb	r1, [r3, r5]
  40286e:	68a3      	ldr	r3, [r4, #8]
  402870:	3b01      	subs	r3, #1
  402872:	2b00      	cmp	r3, #0
  402874:	60a3      	str	r3, [r4, #8]
  402876:	daf0      	bge.n	40285a <__fputwc+0x36>
  402878:	69a2      	ldr	r2, [r4, #24]
  40287a:	4293      	cmp	r3, r2
  40287c:	db07      	blt.n	40288e <__fputwc+0x6a>
  40287e:	6823      	ldr	r3, [r4, #0]
  402880:	7019      	strb	r1, [r3, #0]
  402882:	6823      	ldr	r3, [r4, #0]
  402884:	7819      	ldrb	r1, [r3, #0]
  402886:	290a      	cmp	r1, #10
  402888:	f103 0301 	add.w	r3, r3, #1
  40288c:	d1e9      	bne.n	402862 <__fputwc+0x3e>
  40288e:	4638      	mov	r0, r7
  402890:	4622      	mov	r2, r4
  402892:	f001 f9e5 	bl	403c60 <__swbuf_r>
  402896:	f1a0 30ff 	sub.w	r0, r0, #4294967295
  40289a:	fab0 f080 	clz	r0, r0
  40289e:	0940      	lsrs	r0, r0, #5
  4028a0:	2800      	cmp	r0, #0
  4028a2:	d0df      	beq.n	402864 <__fputwc+0x40>
  4028a4:	f04f 30ff 	mov.w	r0, #4294967295
  4028a8:	b002      	add	sp, #8
  4028aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4028ae:	89a3      	ldrh	r3, [r4, #12]
  4028b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  4028b4:	81a3      	strh	r3, [r4, #12]
  4028b6:	b002      	add	sp, #8
  4028b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4028bc:	1e73      	subs	r3, r6, #1
  4028be:	2bfe      	cmp	r3, #254	; 0xfe
  4028c0:	d8ba      	bhi.n	402838 <__fputwc+0x14>
  4028c2:	b2f1      	uxtb	r1, r6
  4028c4:	4680      	mov	r8, r0
  4028c6:	f88d 1004 	strb.w	r1, [sp, #4]
  4028ca:	e7c4      	b.n	402856 <__fputwc+0x32>
  4028cc:	4630      	mov	r0, r6
  4028ce:	b002      	add	sp, #8
  4028d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

004028d4 <_fputwc_r>:
  4028d4:	8993      	ldrh	r3, [r2, #12]
  4028d6:	f413 5f00 	tst.w	r3, #8192	; 0x2000
  4028da:	d10b      	bne.n	4028f4 <_fputwc_r+0x20>
  4028dc:	b410      	push	{r4}
  4028de:	6e54      	ldr	r4, [r2, #100]	; 0x64
  4028e0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
  4028e4:	f444 5400 	orr.w	r4, r4, #8192	; 0x2000
  4028e8:	6654      	str	r4, [r2, #100]	; 0x64
  4028ea:	8193      	strh	r3, [r2, #12]
  4028ec:	f85d 4b04 	ldr.w	r4, [sp], #4
  4028f0:	f7ff bf98 	b.w	402824 <__fputwc>
  4028f4:	f7ff bf96 	b.w	402824 <__fputwc>

004028f8 <_malloc_trim_r>:
  4028f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4028fa:	4f23      	ldr	r7, [pc, #140]	; (402988 <_malloc_trim_r+0x90>)
  4028fc:	460c      	mov	r4, r1
  4028fe:	4606      	mov	r6, r0
  402900:	f000 ff32 	bl	403768 <__malloc_lock>
  402904:	68bb      	ldr	r3, [r7, #8]
  402906:	685d      	ldr	r5, [r3, #4]
  402908:	f025 0503 	bic.w	r5, r5, #3
  40290c:	1b29      	subs	r1, r5, r4
  40290e:	f601 71ef 	addw	r1, r1, #4079	; 0xfef
  402912:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
  402916:	f021 010f 	bic.w	r1, r1, #15
  40291a:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
  40291e:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
  402922:	db07      	blt.n	402934 <_malloc_trim_r+0x3c>
  402924:	4630      	mov	r0, r6
  402926:	2100      	movs	r1, #0
  402928:	f001 f918 	bl	403b5c <_sbrk_r>
  40292c:	68bb      	ldr	r3, [r7, #8]
  40292e:	442b      	add	r3, r5
  402930:	4298      	cmp	r0, r3
  402932:	d004      	beq.n	40293e <_malloc_trim_r+0x46>
  402934:	4630      	mov	r0, r6
  402936:	f000 ff19 	bl	40376c <__malloc_unlock>
  40293a:	2000      	movs	r0, #0
  40293c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40293e:	4630      	mov	r0, r6
  402940:	4261      	negs	r1, r4
  402942:	f001 f90b 	bl	403b5c <_sbrk_r>
  402946:	3001      	adds	r0, #1
  402948:	d00d      	beq.n	402966 <_malloc_trim_r+0x6e>
  40294a:	4b10      	ldr	r3, [pc, #64]	; (40298c <_malloc_trim_r+0x94>)
  40294c:	68ba      	ldr	r2, [r7, #8]
  40294e:	6819      	ldr	r1, [r3, #0]
  402950:	1b2d      	subs	r5, r5, r4
  402952:	f045 0501 	orr.w	r5, r5, #1
  402956:	4630      	mov	r0, r6
  402958:	1b09      	subs	r1, r1, r4
  40295a:	6055      	str	r5, [r2, #4]
  40295c:	6019      	str	r1, [r3, #0]
  40295e:	f000 ff05 	bl	40376c <__malloc_unlock>
  402962:	2001      	movs	r0, #1
  402964:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  402966:	4630      	mov	r0, r6
  402968:	2100      	movs	r1, #0
  40296a:	f001 f8f7 	bl	403b5c <_sbrk_r>
  40296e:	68ba      	ldr	r2, [r7, #8]
  402970:	1a83      	subs	r3, r0, r2
  402972:	2b0f      	cmp	r3, #15
  402974:	ddde      	ble.n	402934 <_malloc_trim_r+0x3c>
  402976:	4c06      	ldr	r4, [pc, #24]	; (402990 <_malloc_trim_r+0x98>)
  402978:	4904      	ldr	r1, [pc, #16]	; (40298c <_malloc_trim_r+0x94>)
  40297a:	6824      	ldr	r4, [r4, #0]
  40297c:	f043 0301 	orr.w	r3, r3, #1
  402980:	1b00      	subs	r0, r0, r4
  402982:	6053      	str	r3, [r2, #4]
  402984:	6008      	str	r0, [r1, #0]
  402986:	e7d5      	b.n	402934 <_malloc_trim_r+0x3c>
  402988:	20000470 	.word	0x20000470
  40298c:	20000934 	.word	0x20000934
  402990:	2000087c 	.word	0x2000087c

00402994 <_free_r>:
  402994:	2900      	cmp	r1, #0
  402996:	d04e      	beq.n	402a36 <_free_r+0xa2>
  402998:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40299c:	460c      	mov	r4, r1
  40299e:	4680      	mov	r8, r0
  4029a0:	f000 fee2 	bl	403768 <__malloc_lock>
  4029a4:	f854 7c04 	ldr.w	r7, [r4, #-4]
  4029a8:	4962      	ldr	r1, [pc, #392]	; (402b34 <_free_r+0x1a0>)
  4029aa:	f027 0201 	bic.w	r2, r7, #1
  4029ae:	f1a4 0508 	sub.w	r5, r4, #8
  4029b2:	18ab      	adds	r3, r5, r2
  4029b4:	688e      	ldr	r6, [r1, #8]
  4029b6:	6858      	ldr	r0, [r3, #4]
  4029b8:	429e      	cmp	r6, r3
  4029ba:	f020 0003 	bic.w	r0, r0, #3
  4029be:	d05a      	beq.n	402a76 <_free_r+0xe2>
  4029c0:	07fe      	lsls	r6, r7, #31
  4029c2:	6058      	str	r0, [r3, #4]
  4029c4:	d40b      	bmi.n	4029de <_free_r+0x4a>
  4029c6:	f854 7c08 	ldr.w	r7, [r4, #-8]
  4029ca:	1bed      	subs	r5, r5, r7
  4029cc:	f101 0e08 	add.w	lr, r1, #8
  4029d0:	68ac      	ldr	r4, [r5, #8]
  4029d2:	4574      	cmp	r4, lr
  4029d4:	443a      	add	r2, r7
  4029d6:	d067      	beq.n	402aa8 <_free_r+0x114>
  4029d8:	68ef      	ldr	r7, [r5, #12]
  4029da:	60e7      	str	r7, [r4, #12]
  4029dc:	60bc      	str	r4, [r7, #8]
  4029de:	181c      	adds	r4, r3, r0
  4029e0:	6864      	ldr	r4, [r4, #4]
  4029e2:	07e4      	lsls	r4, r4, #31
  4029e4:	d40c      	bmi.n	402a00 <_free_r+0x6c>
  4029e6:	4f54      	ldr	r7, [pc, #336]	; (402b38 <_free_r+0x1a4>)
  4029e8:	689c      	ldr	r4, [r3, #8]
  4029ea:	42bc      	cmp	r4, r7
  4029ec:	4402      	add	r2, r0
  4029ee:	d07c      	beq.n	402aea <_free_r+0x156>
  4029f0:	68d8      	ldr	r0, [r3, #12]
  4029f2:	60e0      	str	r0, [r4, #12]
  4029f4:	f042 0301 	orr.w	r3, r2, #1
  4029f8:	6084      	str	r4, [r0, #8]
  4029fa:	606b      	str	r3, [r5, #4]
  4029fc:	50aa      	str	r2, [r5, r2]
  4029fe:	e003      	b.n	402a08 <_free_r+0x74>
  402a00:	f042 0301 	orr.w	r3, r2, #1
  402a04:	606b      	str	r3, [r5, #4]
  402a06:	50aa      	str	r2, [r5, r2]
  402a08:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
  402a0c:	d214      	bcs.n	402a38 <_free_r+0xa4>
  402a0e:	08d2      	lsrs	r2, r2, #3
  402a10:	eb01 03c2 	add.w	r3, r1, r2, lsl #3
  402a14:	6848      	ldr	r0, [r1, #4]
  402a16:	689f      	ldr	r7, [r3, #8]
  402a18:	60af      	str	r7, [r5, #8]
  402a1a:	1092      	asrs	r2, r2, #2
  402a1c:	2401      	movs	r4, #1
  402a1e:	fa04 f202 	lsl.w	r2, r4, r2
  402a22:	4310      	orrs	r0, r2
  402a24:	60eb      	str	r3, [r5, #12]
  402a26:	6048      	str	r0, [r1, #4]
  402a28:	609d      	str	r5, [r3, #8]
  402a2a:	60fd      	str	r5, [r7, #12]
  402a2c:	4640      	mov	r0, r8
  402a2e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  402a32:	f000 be9b 	b.w	40376c <__malloc_unlock>
  402a36:	4770      	bx	lr
  402a38:	0a53      	lsrs	r3, r2, #9
  402a3a:	2b04      	cmp	r3, #4
  402a3c:	d847      	bhi.n	402ace <_free_r+0x13a>
  402a3e:	0993      	lsrs	r3, r2, #6
  402a40:	f103 0438 	add.w	r4, r3, #56	; 0x38
  402a44:	0060      	lsls	r0, r4, #1
  402a46:	eb01 0080 	add.w	r0, r1, r0, lsl #2
  402a4a:	493a      	ldr	r1, [pc, #232]	; (402b34 <_free_r+0x1a0>)
  402a4c:	6883      	ldr	r3, [r0, #8]
  402a4e:	4283      	cmp	r3, r0
  402a50:	d043      	beq.n	402ada <_free_r+0x146>
  402a52:	6859      	ldr	r1, [r3, #4]
  402a54:	f021 0103 	bic.w	r1, r1, #3
  402a58:	4291      	cmp	r1, r2
  402a5a:	d902      	bls.n	402a62 <_free_r+0xce>
  402a5c:	689b      	ldr	r3, [r3, #8]
  402a5e:	4298      	cmp	r0, r3
  402a60:	d1f7      	bne.n	402a52 <_free_r+0xbe>
  402a62:	68da      	ldr	r2, [r3, #12]
  402a64:	60ea      	str	r2, [r5, #12]
  402a66:	60ab      	str	r3, [r5, #8]
  402a68:	4640      	mov	r0, r8
  402a6a:	6095      	str	r5, [r2, #8]
  402a6c:	60dd      	str	r5, [r3, #12]
  402a6e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  402a72:	f000 be7b 	b.w	40376c <__malloc_unlock>
  402a76:	07ff      	lsls	r7, r7, #31
  402a78:	4402      	add	r2, r0
  402a7a:	d407      	bmi.n	402a8c <_free_r+0xf8>
  402a7c:	f854 3c08 	ldr.w	r3, [r4, #-8]
  402a80:	1aed      	subs	r5, r5, r3
  402a82:	441a      	add	r2, r3
  402a84:	68a8      	ldr	r0, [r5, #8]
  402a86:	68eb      	ldr	r3, [r5, #12]
  402a88:	60c3      	str	r3, [r0, #12]
  402a8a:	6098      	str	r0, [r3, #8]
  402a8c:	4b2b      	ldr	r3, [pc, #172]	; (402b3c <_free_r+0x1a8>)
  402a8e:	681b      	ldr	r3, [r3, #0]
  402a90:	f042 0001 	orr.w	r0, r2, #1
  402a94:	429a      	cmp	r2, r3
  402a96:	6068      	str	r0, [r5, #4]
  402a98:	608d      	str	r5, [r1, #8]
  402a9a:	d3c7      	bcc.n	402a2c <_free_r+0x98>
  402a9c:	4b28      	ldr	r3, [pc, #160]	; (402b40 <_free_r+0x1ac>)
  402a9e:	4640      	mov	r0, r8
  402aa0:	6819      	ldr	r1, [r3, #0]
  402aa2:	f7ff ff29 	bl	4028f8 <_malloc_trim_r>
  402aa6:	e7c1      	b.n	402a2c <_free_r+0x98>
  402aa8:	1819      	adds	r1, r3, r0
  402aaa:	6849      	ldr	r1, [r1, #4]
  402aac:	07c9      	lsls	r1, r1, #31
  402aae:	d409      	bmi.n	402ac4 <_free_r+0x130>
  402ab0:	68d9      	ldr	r1, [r3, #12]
  402ab2:	689b      	ldr	r3, [r3, #8]
  402ab4:	4402      	add	r2, r0
  402ab6:	f042 0001 	orr.w	r0, r2, #1
  402aba:	60d9      	str	r1, [r3, #12]
  402abc:	608b      	str	r3, [r1, #8]
  402abe:	6068      	str	r0, [r5, #4]
  402ac0:	50aa      	str	r2, [r5, r2]
  402ac2:	e7b3      	b.n	402a2c <_free_r+0x98>
  402ac4:	f042 0301 	orr.w	r3, r2, #1
  402ac8:	606b      	str	r3, [r5, #4]
  402aca:	50aa      	str	r2, [r5, r2]
  402acc:	e7ae      	b.n	402a2c <_free_r+0x98>
  402ace:	2b14      	cmp	r3, #20
  402ad0:	d814      	bhi.n	402afc <_free_r+0x168>
  402ad2:	f103 045b 	add.w	r4, r3, #91	; 0x5b
  402ad6:	0060      	lsls	r0, r4, #1
  402ad8:	e7b5      	b.n	402a46 <_free_r+0xb2>
  402ada:	684a      	ldr	r2, [r1, #4]
  402adc:	10a4      	asrs	r4, r4, #2
  402ade:	2001      	movs	r0, #1
  402ae0:	40a0      	lsls	r0, r4
  402ae2:	4302      	orrs	r2, r0
  402ae4:	604a      	str	r2, [r1, #4]
  402ae6:	461a      	mov	r2, r3
  402ae8:	e7bc      	b.n	402a64 <_free_r+0xd0>
  402aea:	f042 0301 	orr.w	r3, r2, #1
  402aee:	614d      	str	r5, [r1, #20]
  402af0:	610d      	str	r5, [r1, #16]
  402af2:	60ec      	str	r4, [r5, #12]
  402af4:	60ac      	str	r4, [r5, #8]
  402af6:	606b      	str	r3, [r5, #4]
  402af8:	50aa      	str	r2, [r5, r2]
  402afa:	e797      	b.n	402a2c <_free_r+0x98>
  402afc:	2b54      	cmp	r3, #84	; 0x54
  402afe:	d804      	bhi.n	402b0a <_free_r+0x176>
  402b00:	0b13      	lsrs	r3, r2, #12
  402b02:	f103 046e 	add.w	r4, r3, #110	; 0x6e
  402b06:	0060      	lsls	r0, r4, #1
  402b08:	e79d      	b.n	402a46 <_free_r+0xb2>
  402b0a:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
  402b0e:	d804      	bhi.n	402b1a <_free_r+0x186>
  402b10:	0bd3      	lsrs	r3, r2, #15
  402b12:	f103 0477 	add.w	r4, r3, #119	; 0x77
  402b16:	0060      	lsls	r0, r4, #1
  402b18:	e795      	b.n	402a46 <_free_r+0xb2>
  402b1a:	f240 5054 	movw	r0, #1364	; 0x554
  402b1e:	4283      	cmp	r3, r0
  402b20:	d804      	bhi.n	402b2c <_free_r+0x198>
  402b22:	0c93      	lsrs	r3, r2, #18
  402b24:	f103 047c 	add.w	r4, r3, #124	; 0x7c
  402b28:	0060      	lsls	r0, r4, #1
  402b2a:	e78c      	b.n	402a46 <_free_r+0xb2>
  402b2c:	20fc      	movs	r0, #252	; 0xfc
  402b2e:	247e      	movs	r4, #126	; 0x7e
  402b30:	e789      	b.n	402a46 <_free_r+0xb2>
  402b32:	bf00      	nop
  402b34:	20000470 	.word	0x20000470
  402b38:	20000478 	.word	0x20000478
  402b3c:	20000878 	.word	0x20000878
  402b40:	20000930 	.word	0x20000930

00402b44 <__sfvwrite_r>:
  402b44:	6893      	ldr	r3, [r2, #8]
  402b46:	2b00      	cmp	r3, #0
  402b48:	d07a      	beq.n	402c40 <__sfvwrite_r+0xfc>
  402b4a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  402b4e:	f8b1 e00c 	ldrh.w	lr, [r1, #12]
  402b52:	f01e 0f08 	tst.w	lr, #8
  402b56:	b083      	sub	sp, #12
  402b58:	460c      	mov	r4, r1
  402b5a:	4681      	mov	r9, r0
  402b5c:	4616      	mov	r6, r2
  402b5e:	d026      	beq.n	402bae <__sfvwrite_r+0x6a>
  402b60:	690b      	ldr	r3, [r1, #16]
  402b62:	b323      	cbz	r3, 402bae <__sfvwrite_r+0x6a>
  402b64:	f00e 0802 	and.w	r8, lr, #2
  402b68:	fa1f f088 	uxth.w	r0, r8
  402b6c:	6835      	ldr	r5, [r6, #0]
  402b6e:	b370      	cbz	r0, 402bce <__sfvwrite_r+0x8a>
  402b70:	f04f 0a00 	mov.w	sl, #0
  402b74:	f8df b2e0 	ldr.w	fp, [pc, #736]	; 402e58 <__sfvwrite_r+0x314>
  402b78:	46d0      	mov	r8, sl
  402b7a:	45d8      	cmp	r8, fp
  402b7c:	4643      	mov	r3, r8
  402b7e:	4652      	mov	r2, sl
  402b80:	bf28      	it	cs
  402b82:	465b      	movcs	r3, fp
  402b84:	4648      	mov	r0, r9
  402b86:	f1b8 0f00 	cmp.w	r8, #0
  402b8a:	d053      	beq.n	402c34 <__sfvwrite_r+0xf0>
  402b8c:	69e1      	ldr	r1, [r4, #28]
  402b8e:	6a67      	ldr	r7, [r4, #36]	; 0x24
  402b90:	47b8      	blx	r7
  402b92:	2800      	cmp	r0, #0
  402b94:	dd73      	ble.n	402c7e <__sfvwrite_r+0x13a>
  402b96:	68b3      	ldr	r3, [r6, #8]
  402b98:	1a1b      	subs	r3, r3, r0
  402b9a:	4482      	add	sl, r0
  402b9c:	ebc0 0808 	rsb	r8, r0, r8
  402ba0:	60b3      	str	r3, [r6, #8]
  402ba2:	2b00      	cmp	r3, #0
  402ba4:	d1e9      	bne.n	402b7a <__sfvwrite_r+0x36>
  402ba6:	2000      	movs	r0, #0
  402ba8:	b003      	add	sp, #12
  402baa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  402bae:	4648      	mov	r0, r9
  402bb0:	4621      	mov	r1, r4
  402bb2:	f7ff fc67 	bl	402484 <__swsetup_r>
  402bb6:	2800      	cmp	r0, #0
  402bb8:	f040 8145 	bne.w	402e46 <__sfvwrite_r+0x302>
  402bbc:	f8b4 e00c 	ldrh.w	lr, [r4, #12]
  402bc0:	6835      	ldr	r5, [r6, #0]
  402bc2:	f00e 0802 	and.w	r8, lr, #2
  402bc6:	fa1f f088 	uxth.w	r0, r8
  402bca:	2800      	cmp	r0, #0
  402bcc:	d1d0      	bne.n	402b70 <__sfvwrite_r+0x2c>
  402bce:	f01e 0b01 	ands.w	fp, lr, #1
  402bd2:	d15d      	bne.n	402c90 <__sfvwrite_r+0x14c>
  402bd4:	46d8      	mov	r8, fp
  402bd6:	f1b8 0f00 	cmp.w	r8, #0
  402bda:	d025      	beq.n	402c28 <__sfvwrite_r+0xe4>
  402bdc:	f41e 7f00 	tst.w	lr, #512	; 0x200
  402be0:	68a7      	ldr	r7, [r4, #8]
  402be2:	d02f      	beq.n	402c44 <__sfvwrite_r+0x100>
  402be4:	45b8      	cmp	r8, r7
  402be6:	46ba      	mov	sl, r7
  402be8:	f0c0 80a9 	bcc.w	402d3e <__sfvwrite_r+0x1fa>
  402bec:	f41e 6f90 	tst.w	lr, #1152	; 0x480
  402bf0:	f040 80b6 	bne.w	402d60 <__sfvwrite_r+0x21c>
  402bf4:	6820      	ldr	r0, [r4, #0]
  402bf6:	4652      	mov	r2, sl
  402bf8:	4659      	mov	r1, fp
  402bfa:	f000 fd51 	bl	4036a0 <memmove>
  402bfe:	68a0      	ldr	r0, [r4, #8]
  402c00:	6822      	ldr	r2, [r4, #0]
  402c02:	1bc0      	subs	r0, r0, r7
  402c04:	eb02 030a 	add.w	r3, r2, sl
  402c08:	60a0      	str	r0, [r4, #8]
  402c0a:	6023      	str	r3, [r4, #0]
  402c0c:	4640      	mov	r0, r8
  402c0e:	68b3      	ldr	r3, [r6, #8]
  402c10:	1a1b      	subs	r3, r3, r0
  402c12:	4483      	add	fp, r0
  402c14:	ebc0 0808 	rsb	r8, r0, r8
  402c18:	60b3      	str	r3, [r6, #8]
  402c1a:	2b00      	cmp	r3, #0
  402c1c:	d0c3      	beq.n	402ba6 <__sfvwrite_r+0x62>
  402c1e:	f8b4 e00c 	ldrh.w	lr, [r4, #12]
  402c22:	f1b8 0f00 	cmp.w	r8, #0
  402c26:	d1d9      	bne.n	402bdc <__sfvwrite_r+0x98>
  402c28:	f8d5 b000 	ldr.w	fp, [r5]
  402c2c:	f8d5 8004 	ldr.w	r8, [r5, #4]
  402c30:	3508      	adds	r5, #8
  402c32:	e7d0      	b.n	402bd6 <__sfvwrite_r+0x92>
  402c34:	f8d5 a000 	ldr.w	sl, [r5]
  402c38:	f8d5 8004 	ldr.w	r8, [r5, #4]
  402c3c:	3508      	adds	r5, #8
  402c3e:	e79c      	b.n	402b7a <__sfvwrite_r+0x36>
  402c40:	2000      	movs	r0, #0
  402c42:	4770      	bx	lr
  402c44:	6820      	ldr	r0, [r4, #0]
  402c46:	6923      	ldr	r3, [r4, #16]
  402c48:	4298      	cmp	r0, r3
  402c4a:	d803      	bhi.n	402c54 <__sfvwrite_r+0x110>
  402c4c:	6962      	ldr	r2, [r4, #20]
  402c4e:	4590      	cmp	r8, r2
  402c50:	f080 80b9 	bcs.w	402dc6 <__sfvwrite_r+0x282>
  402c54:	4547      	cmp	r7, r8
  402c56:	bf28      	it	cs
  402c58:	4647      	movcs	r7, r8
  402c5a:	463a      	mov	r2, r7
  402c5c:	4659      	mov	r1, fp
  402c5e:	f000 fd1f 	bl	4036a0 <memmove>
  402c62:	68a3      	ldr	r3, [r4, #8]
  402c64:	6822      	ldr	r2, [r4, #0]
  402c66:	1bdb      	subs	r3, r3, r7
  402c68:	443a      	add	r2, r7
  402c6a:	60a3      	str	r3, [r4, #8]
  402c6c:	6022      	str	r2, [r4, #0]
  402c6e:	2b00      	cmp	r3, #0
  402c70:	d14a      	bne.n	402d08 <__sfvwrite_r+0x1c4>
  402c72:	4648      	mov	r0, r9
  402c74:	4621      	mov	r1, r4
  402c76:	f7ff fd21 	bl	4026bc <_fflush_r>
  402c7a:	2800      	cmp	r0, #0
  402c7c:	d044      	beq.n	402d08 <__sfvwrite_r+0x1c4>
  402c7e:	89a3      	ldrh	r3, [r4, #12]
  402c80:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  402c84:	f04f 30ff 	mov.w	r0, #4294967295
  402c88:	81a3      	strh	r3, [r4, #12]
  402c8a:	b003      	add	sp, #12
  402c8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  402c90:	4680      	mov	r8, r0
  402c92:	9000      	str	r0, [sp, #0]
  402c94:	4683      	mov	fp, r0
  402c96:	4682      	mov	sl, r0
  402c98:	f1ba 0f00 	cmp.w	sl, #0
  402c9c:	d02c      	beq.n	402cf8 <__sfvwrite_r+0x1b4>
  402c9e:	9b00      	ldr	r3, [sp, #0]
  402ca0:	2b00      	cmp	r3, #0
  402ca2:	d050      	beq.n	402d46 <__sfvwrite_r+0x202>
  402ca4:	6820      	ldr	r0, [r4, #0]
  402ca6:	6921      	ldr	r1, [r4, #16]
  402ca8:	f8d4 e008 	ldr.w	lr, [r4, #8]
  402cac:	6962      	ldr	r2, [r4, #20]
  402cae:	45d0      	cmp	r8, sl
  402cb0:	4643      	mov	r3, r8
  402cb2:	bf28      	it	cs
  402cb4:	4653      	movcs	r3, sl
  402cb6:	4288      	cmp	r0, r1
  402cb8:	461f      	mov	r7, r3
  402cba:	d904      	bls.n	402cc6 <__sfvwrite_r+0x182>
  402cbc:	eb0e 0c02 	add.w	ip, lr, r2
  402cc0:	4563      	cmp	r3, ip
  402cc2:	f300 8092 	bgt.w	402dea <__sfvwrite_r+0x2a6>
  402cc6:	4293      	cmp	r3, r2
  402cc8:	db20      	blt.n	402d0c <__sfvwrite_r+0x1c8>
  402cca:	4613      	mov	r3, r2
  402ccc:	6a67      	ldr	r7, [r4, #36]	; 0x24
  402cce:	69e1      	ldr	r1, [r4, #28]
  402cd0:	4648      	mov	r0, r9
  402cd2:	465a      	mov	r2, fp
  402cd4:	47b8      	blx	r7
  402cd6:	1e07      	subs	r7, r0, #0
  402cd8:	ddd1      	ble.n	402c7e <__sfvwrite_r+0x13a>
  402cda:	ebb8 0807 	subs.w	r8, r8, r7
  402cde:	d025      	beq.n	402d2c <__sfvwrite_r+0x1e8>
  402ce0:	68b3      	ldr	r3, [r6, #8]
  402ce2:	1bdb      	subs	r3, r3, r7
  402ce4:	44bb      	add	fp, r7
  402ce6:	ebc7 0a0a 	rsb	sl, r7, sl
  402cea:	60b3      	str	r3, [r6, #8]
  402cec:	2b00      	cmp	r3, #0
  402cee:	f43f af5a 	beq.w	402ba6 <__sfvwrite_r+0x62>
  402cf2:	f1ba 0f00 	cmp.w	sl, #0
  402cf6:	d1d2      	bne.n	402c9e <__sfvwrite_r+0x15a>
  402cf8:	2300      	movs	r3, #0
  402cfa:	f8d5 b000 	ldr.w	fp, [r5]
  402cfe:	f8d5 a004 	ldr.w	sl, [r5, #4]
  402d02:	9300      	str	r3, [sp, #0]
  402d04:	3508      	adds	r5, #8
  402d06:	e7c7      	b.n	402c98 <__sfvwrite_r+0x154>
  402d08:	4638      	mov	r0, r7
  402d0a:	e780      	b.n	402c0e <__sfvwrite_r+0xca>
  402d0c:	461a      	mov	r2, r3
  402d0e:	4659      	mov	r1, fp
  402d10:	9301      	str	r3, [sp, #4]
  402d12:	f000 fcc5 	bl	4036a0 <memmove>
  402d16:	68a2      	ldr	r2, [r4, #8]
  402d18:	6821      	ldr	r1, [r4, #0]
  402d1a:	9b01      	ldr	r3, [sp, #4]
  402d1c:	ebb8 0807 	subs.w	r8, r8, r7
  402d20:	eba2 0203 	sub.w	r2, r2, r3
  402d24:	440b      	add	r3, r1
  402d26:	60a2      	str	r2, [r4, #8]
  402d28:	6023      	str	r3, [r4, #0]
  402d2a:	d1d9      	bne.n	402ce0 <__sfvwrite_r+0x19c>
  402d2c:	4648      	mov	r0, r9
  402d2e:	4621      	mov	r1, r4
  402d30:	f7ff fcc4 	bl	4026bc <_fflush_r>
  402d34:	2800      	cmp	r0, #0
  402d36:	d1a2      	bne.n	402c7e <__sfvwrite_r+0x13a>
  402d38:	f8cd 8000 	str.w	r8, [sp]
  402d3c:	e7d0      	b.n	402ce0 <__sfvwrite_r+0x19c>
  402d3e:	6820      	ldr	r0, [r4, #0]
  402d40:	4647      	mov	r7, r8
  402d42:	46c2      	mov	sl, r8
  402d44:	e757      	b.n	402bf6 <__sfvwrite_r+0xb2>
  402d46:	4658      	mov	r0, fp
  402d48:	210a      	movs	r1, #10
  402d4a:	4652      	mov	r2, sl
  402d4c:	f000 fbc4 	bl	4034d8 <memchr>
  402d50:	2800      	cmp	r0, #0
  402d52:	d073      	beq.n	402e3c <__sfvwrite_r+0x2f8>
  402d54:	3001      	adds	r0, #1
  402d56:	2301      	movs	r3, #1
  402d58:	ebcb 0800 	rsb	r8, fp, r0
  402d5c:	9300      	str	r3, [sp, #0]
  402d5e:	e7a1      	b.n	402ca4 <__sfvwrite_r+0x160>
  402d60:	6967      	ldr	r7, [r4, #20]
  402d62:	6921      	ldr	r1, [r4, #16]
  402d64:	6823      	ldr	r3, [r4, #0]
  402d66:	eb07 0747 	add.w	r7, r7, r7, lsl #1
  402d6a:	1a5b      	subs	r3, r3, r1
  402d6c:	eb07 77d7 	add.w	r7, r7, r7, lsr #31
  402d70:	1c58      	adds	r0, r3, #1
  402d72:	107f      	asrs	r7, r7, #1
  402d74:	4440      	add	r0, r8
  402d76:	4287      	cmp	r7, r0
  402d78:	463a      	mov	r2, r7
  402d7a:	bf3c      	itt	cc
  402d7c:	4607      	movcc	r7, r0
  402d7e:	463a      	movcc	r2, r7
  402d80:	f41e 6f80 	tst.w	lr, #1024	; 0x400
  402d84:	9300      	str	r3, [sp, #0]
  402d86:	d046      	beq.n	402e16 <__sfvwrite_r+0x2d2>
  402d88:	4611      	mov	r1, r2
  402d8a:	4648      	mov	r0, r9
  402d8c:	f000 f912 	bl	402fb4 <_malloc_r>
  402d90:	9b00      	ldr	r3, [sp, #0]
  402d92:	4682      	mov	sl, r0
  402d94:	2800      	cmp	r0, #0
  402d96:	d059      	beq.n	402e4c <__sfvwrite_r+0x308>
  402d98:	461a      	mov	r2, r3
  402d9a:	6921      	ldr	r1, [r4, #16]
  402d9c:	9300      	str	r3, [sp, #0]
  402d9e:	f000 fbe5 	bl	40356c <memcpy>
  402da2:	89a2      	ldrh	r2, [r4, #12]
  402da4:	9b00      	ldr	r3, [sp, #0]
  402da6:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
  402daa:	f042 0280 	orr.w	r2, r2, #128	; 0x80
  402dae:	81a2      	strh	r2, [r4, #12]
  402db0:	eb0a 0003 	add.w	r0, sl, r3
  402db4:	1afb      	subs	r3, r7, r3
  402db6:	f8c4 a010 	str.w	sl, [r4, #16]
  402dba:	6167      	str	r7, [r4, #20]
  402dbc:	6020      	str	r0, [r4, #0]
  402dbe:	60a3      	str	r3, [r4, #8]
  402dc0:	4647      	mov	r7, r8
  402dc2:	46c2      	mov	sl, r8
  402dc4:	e717      	b.n	402bf6 <__sfvwrite_r+0xb2>
  402dc6:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
  402dca:	4543      	cmp	r3, r8
  402dcc:	bf28      	it	cs
  402dce:	4643      	movcs	r3, r8
  402dd0:	6a67      	ldr	r7, [r4, #36]	; 0x24
  402dd2:	fb93 f3f2 	sdiv	r3, r3, r2
  402dd6:	4648      	mov	r0, r9
  402dd8:	fb03 f302 	mul.w	r3, r3, r2
  402ddc:	69e1      	ldr	r1, [r4, #28]
  402dde:	465a      	mov	r2, fp
  402de0:	47b8      	blx	r7
  402de2:	2800      	cmp	r0, #0
  402de4:	f73f af13 	bgt.w	402c0e <__sfvwrite_r+0xca>
  402de8:	e749      	b.n	402c7e <__sfvwrite_r+0x13a>
  402dea:	4662      	mov	r2, ip
  402dec:	4659      	mov	r1, fp
  402dee:	f8cd c004 	str.w	ip, [sp, #4]
  402df2:	f000 fc55 	bl	4036a0 <memmove>
  402df6:	6823      	ldr	r3, [r4, #0]
  402df8:	f8dd c004 	ldr.w	ip, [sp, #4]
  402dfc:	4463      	add	r3, ip
  402dfe:	6023      	str	r3, [r4, #0]
  402e00:	4648      	mov	r0, r9
  402e02:	4621      	mov	r1, r4
  402e04:	f7ff fc5a 	bl	4026bc <_fflush_r>
  402e08:	f8dd c004 	ldr.w	ip, [sp, #4]
  402e0c:	2800      	cmp	r0, #0
  402e0e:	f47f af36 	bne.w	402c7e <__sfvwrite_r+0x13a>
  402e12:	4667      	mov	r7, ip
  402e14:	e761      	b.n	402cda <__sfvwrite_r+0x196>
  402e16:	4648      	mov	r0, r9
  402e18:	f000 fcaa 	bl	403770 <_realloc_r>
  402e1c:	9b00      	ldr	r3, [sp, #0]
  402e1e:	4682      	mov	sl, r0
  402e20:	2800      	cmp	r0, #0
  402e22:	d1c5      	bne.n	402db0 <__sfvwrite_r+0x26c>
  402e24:	4648      	mov	r0, r9
  402e26:	6921      	ldr	r1, [r4, #16]
  402e28:	f7ff fdb4 	bl	402994 <_free_r>
  402e2c:	89a3      	ldrh	r3, [r4, #12]
  402e2e:	220c      	movs	r2, #12
  402e30:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  402e34:	b29b      	uxth	r3, r3
  402e36:	f8c9 2000 	str.w	r2, [r9]
  402e3a:	e721      	b.n	402c80 <__sfvwrite_r+0x13c>
  402e3c:	2301      	movs	r3, #1
  402e3e:	f10a 0801 	add.w	r8, sl, #1
  402e42:	9300      	str	r3, [sp, #0]
  402e44:	e72e      	b.n	402ca4 <__sfvwrite_r+0x160>
  402e46:	f04f 30ff 	mov.w	r0, #4294967295
  402e4a:	e6ad      	b.n	402ba8 <__sfvwrite_r+0x64>
  402e4c:	230c      	movs	r3, #12
  402e4e:	f8c9 3000 	str.w	r3, [r9]
  402e52:	89a3      	ldrh	r3, [r4, #12]
  402e54:	e714      	b.n	402c80 <__sfvwrite_r+0x13c>
  402e56:	bf00      	nop
  402e58:	7ffffc00 	.word	0x7ffffc00

00402e5c <_fwalk_reent>:
  402e5c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  402e60:	f510 7738 	adds.w	r7, r0, #736	; 0x2e0
  402e64:	d01f      	beq.n	402ea6 <_fwalk_reent+0x4a>
  402e66:	4688      	mov	r8, r1
  402e68:	4606      	mov	r6, r0
  402e6a:	f04f 0900 	mov.w	r9, #0
  402e6e:	687d      	ldr	r5, [r7, #4]
  402e70:	68bc      	ldr	r4, [r7, #8]
  402e72:	3d01      	subs	r5, #1
  402e74:	d411      	bmi.n	402e9a <_fwalk_reent+0x3e>
  402e76:	89a3      	ldrh	r3, [r4, #12]
  402e78:	2b01      	cmp	r3, #1
  402e7a:	f105 35ff 	add.w	r5, r5, #4294967295
  402e7e:	d908      	bls.n	402e92 <_fwalk_reent+0x36>
  402e80:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
  402e84:	3301      	adds	r3, #1
  402e86:	4621      	mov	r1, r4
  402e88:	4630      	mov	r0, r6
  402e8a:	d002      	beq.n	402e92 <_fwalk_reent+0x36>
  402e8c:	47c0      	blx	r8
  402e8e:	ea49 0900 	orr.w	r9, r9, r0
  402e92:	1c6b      	adds	r3, r5, #1
  402e94:	f104 0468 	add.w	r4, r4, #104	; 0x68
  402e98:	d1ed      	bne.n	402e76 <_fwalk_reent+0x1a>
  402e9a:	683f      	ldr	r7, [r7, #0]
  402e9c:	2f00      	cmp	r7, #0
  402e9e:	d1e6      	bne.n	402e6e <_fwalk_reent+0x12>
  402ea0:	4648      	mov	r0, r9
  402ea2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  402ea6:	46b9      	mov	r9, r7
  402ea8:	4648      	mov	r0, r9
  402eaa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  402eae:	bf00      	nop

00402eb0 <__locale_charset>:
  402eb0:	4800      	ldr	r0, [pc, #0]	; (402eb4 <__locale_charset+0x4>)
  402eb2:	4770      	bx	lr
  402eb4:	2000044c 	.word	0x2000044c

00402eb8 <__locale_mb_cur_max>:
  402eb8:	4b01      	ldr	r3, [pc, #4]	; (402ec0 <__locale_mb_cur_max+0x8>)
  402eba:	6818      	ldr	r0, [r3, #0]
  402ebc:	4770      	bx	lr
  402ebe:	bf00      	nop
  402ec0:	2000046c 	.word	0x2000046c

00402ec4 <__smakebuf_r>:
  402ec4:	898b      	ldrh	r3, [r1, #12]
  402ec6:	b29a      	uxth	r2, r3
  402ec8:	f012 0f02 	tst.w	r2, #2
  402ecc:	d13c      	bne.n	402f48 <__smakebuf_r+0x84>
  402ece:	b5f0      	push	{r4, r5, r6, r7, lr}
  402ed0:	460c      	mov	r4, r1
  402ed2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  402ed6:	2900      	cmp	r1, #0
  402ed8:	b091      	sub	sp, #68	; 0x44
  402eda:	4605      	mov	r5, r0
  402edc:	db19      	blt.n	402f12 <__smakebuf_r+0x4e>
  402ede:	aa01      	add	r2, sp, #4
  402ee0:	f001 f804 	bl	403eec <_fstat_r>
  402ee4:	2800      	cmp	r0, #0
  402ee6:	db12      	blt.n	402f0e <__smakebuf_r+0x4a>
  402ee8:	9b02      	ldr	r3, [sp, #8]
  402eea:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
  402eee:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
  402ef2:	f5a3 5700 	sub.w	r7, r3, #8192	; 0x2000
  402ef6:	fab7 f787 	clz	r7, r7
  402efa:	ea4f 1757 	mov.w	r7, r7, lsr #5
  402efe:	d02a      	beq.n	402f56 <__smakebuf_r+0x92>
  402f00:	89a3      	ldrh	r3, [r4, #12]
  402f02:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
  402f06:	81a3      	strh	r3, [r4, #12]
  402f08:	f44f 6680 	mov.w	r6, #1024	; 0x400
  402f0c:	e00b      	b.n	402f26 <__smakebuf_r+0x62>
  402f0e:	89a3      	ldrh	r3, [r4, #12]
  402f10:	b29a      	uxth	r2, r3
  402f12:	f012 0f80 	tst.w	r2, #128	; 0x80
  402f16:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
  402f1a:	81a3      	strh	r3, [r4, #12]
  402f1c:	bf0c      	ite	eq
  402f1e:	f44f 6680 	moveq.w	r6, #1024	; 0x400
  402f22:	2640      	movne	r6, #64	; 0x40
  402f24:	2700      	movs	r7, #0
  402f26:	4628      	mov	r0, r5
  402f28:	4631      	mov	r1, r6
  402f2a:	f000 f843 	bl	402fb4 <_malloc_r>
  402f2e:	89a3      	ldrh	r3, [r4, #12]
  402f30:	b340      	cbz	r0, 402f84 <__smakebuf_r+0xc0>
  402f32:	4a1a      	ldr	r2, [pc, #104]	; (402f9c <__smakebuf_r+0xd8>)
  402f34:	63ea      	str	r2, [r5, #60]	; 0x3c
  402f36:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  402f3a:	81a3      	strh	r3, [r4, #12]
  402f3c:	6020      	str	r0, [r4, #0]
  402f3e:	6120      	str	r0, [r4, #16]
  402f40:	6166      	str	r6, [r4, #20]
  402f42:	b99f      	cbnz	r7, 402f6c <__smakebuf_r+0xa8>
  402f44:	b011      	add	sp, #68	; 0x44
  402f46:	bdf0      	pop	{r4, r5, r6, r7, pc}
  402f48:	f101 0343 	add.w	r3, r1, #67	; 0x43
  402f4c:	2201      	movs	r2, #1
  402f4e:	600b      	str	r3, [r1, #0]
  402f50:	610b      	str	r3, [r1, #16]
  402f52:	614a      	str	r2, [r1, #20]
  402f54:	4770      	bx	lr
  402f56:	4b12      	ldr	r3, [pc, #72]	; (402fa0 <__smakebuf_r+0xdc>)
  402f58:	6aa2      	ldr	r2, [r4, #40]	; 0x28
  402f5a:	429a      	cmp	r2, r3
  402f5c:	d1d0      	bne.n	402f00 <__smakebuf_r+0x3c>
  402f5e:	89a3      	ldrh	r3, [r4, #12]
  402f60:	f44f 6680 	mov.w	r6, #1024	; 0x400
  402f64:	4333      	orrs	r3, r6
  402f66:	81a3      	strh	r3, [r4, #12]
  402f68:	64e6      	str	r6, [r4, #76]	; 0x4c
  402f6a:	e7dc      	b.n	402f26 <__smakebuf_r+0x62>
  402f6c:	4628      	mov	r0, r5
  402f6e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  402f72:	f000 ffcf 	bl	403f14 <_isatty_r>
  402f76:	2800      	cmp	r0, #0
  402f78:	d0e4      	beq.n	402f44 <__smakebuf_r+0x80>
  402f7a:	89a3      	ldrh	r3, [r4, #12]
  402f7c:	f043 0301 	orr.w	r3, r3, #1
  402f80:	81a3      	strh	r3, [r4, #12]
  402f82:	e7df      	b.n	402f44 <__smakebuf_r+0x80>
  402f84:	059a      	lsls	r2, r3, #22
  402f86:	d4dd      	bmi.n	402f44 <__smakebuf_r+0x80>
  402f88:	f104 0243 	add.w	r2, r4, #67	; 0x43
  402f8c:	f043 0302 	orr.w	r3, r3, #2
  402f90:	2101      	movs	r1, #1
  402f92:	81a3      	strh	r3, [r4, #12]
  402f94:	6022      	str	r2, [r4, #0]
  402f96:	6122      	str	r2, [r4, #16]
  402f98:	6161      	str	r1, [r4, #20]
  402f9a:	e7d3      	b.n	402f44 <__smakebuf_r+0x80>
  402f9c:	004026e9 	.word	0x004026e9
  402fa0:	00403bdd 	.word	0x00403bdd

00402fa4 <malloc>:
  402fa4:	4b02      	ldr	r3, [pc, #8]	; (402fb0 <malloc+0xc>)
  402fa6:	4601      	mov	r1, r0
  402fa8:	6818      	ldr	r0, [r3, #0]
  402faa:	f000 b803 	b.w	402fb4 <_malloc_r>
  402fae:	bf00      	nop
  402fb0:	20000448 	.word	0x20000448

00402fb4 <_malloc_r>:
  402fb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  402fb8:	f101 050b 	add.w	r5, r1, #11
  402fbc:	2d16      	cmp	r5, #22
  402fbe:	b083      	sub	sp, #12
  402fc0:	4606      	mov	r6, r0
  402fc2:	d927      	bls.n	403014 <_malloc_r+0x60>
  402fc4:	f035 0507 	bics.w	r5, r5, #7
  402fc8:	f100 80b6 	bmi.w	403138 <_malloc_r+0x184>
  402fcc:	42a9      	cmp	r1, r5
  402fce:	f200 80b3 	bhi.w	403138 <_malloc_r+0x184>
  402fd2:	f000 fbc9 	bl	403768 <__malloc_lock>
  402fd6:	f5b5 7ffc 	cmp.w	r5, #504	; 0x1f8
  402fda:	d222      	bcs.n	403022 <_malloc_r+0x6e>
  402fdc:	4fc2      	ldr	r7, [pc, #776]	; (4032e8 <_malloc_r+0x334>)
  402fde:	08e8      	lsrs	r0, r5, #3
  402fe0:	eb07 03c0 	add.w	r3, r7, r0, lsl #3
  402fe4:	68dc      	ldr	r4, [r3, #12]
  402fe6:	429c      	cmp	r4, r3
  402fe8:	f000 81c8 	beq.w	40337c <_malloc_r+0x3c8>
  402fec:	6863      	ldr	r3, [r4, #4]
  402fee:	68e1      	ldr	r1, [r4, #12]
  402ff0:	68a5      	ldr	r5, [r4, #8]
  402ff2:	f023 0303 	bic.w	r3, r3, #3
  402ff6:	4423      	add	r3, r4
  402ff8:	4630      	mov	r0, r6
  402ffa:	685a      	ldr	r2, [r3, #4]
  402ffc:	60e9      	str	r1, [r5, #12]
  402ffe:	f042 0201 	orr.w	r2, r2, #1
  403002:	608d      	str	r5, [r1, #8]
  403004:	605a      	str	r2, [r3, #4]
  403006:	f000 fbb1 	bl	40376c <__malloc_unlock>
  40300a:	3408      	adds	r4, #8
  40300c:	4620      	mov	r0, r4
  40300e:	b003      	add	sp, #12
  403010:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403014:	2910      	cmp	r1, #16
  403016:	f200 808f 	bhi.w	403138 <_malloc_r+0x184>
  40301a:	f000 fba5 	bl	403768 <__malloc_lock>
  40301e:	2510      	movs	r5, #16
  403020:	e7dc      	b.n	402fdc <_malloc_r+0x28>
  403022:	0a68      	lsrs	r0, r5, #9
  403024:	f000 808f 	beq.w	403146 <_malloc_r+0x192>
  403028:	2804      	cmp	r0, #4
  40302a:	f200 8154 	bhi.w	4032d6 <_malloc_r+0x322>
  40302e:	09a8      	lsrs	r0, r5, #6
  403030:	3038      	adds	r0, #56	; 0x38
  403032:	0041      	lsls	r1, r0, #1
  403034:	4fac      	ldr	r7, [pc, #688]	; (4032e8 <_malloc_r+0x334>)
  403036:	eb07 0181 	add.w	r1, r7, r1, lsl #2
  40303a:	68cc      	ldr	r4, [r1, #12]
  40303c:	42a1      	cmp	r1, r4
  40303e:	d106      	bne.n	40304e <_malloc_r+0x9a>
  403040:	e00c      	b.n	40305c <_malloc_r+0xa8>
  403042:	2a00      	cmp	r2, #0
  403044:	f280 8082 	bge.w	40314c <_malloc_r+0x198>
  403048:	68e4      	ldr	r4, [r4, #12]
  40304a:	42a1      	cmp	r1, r4
  40304c:	d006      	beq.n	40305c <_malloc_r+0xa8>
  40304e:	6863      	ldr	r3, [r4, #4]
  403050:	f023 0303 	bic.w	r3, r3, #3
  403054:	1b5a      	subs	r2, r3, r5
  403056:	2a0f      	cmp	r2, #15
  403058:	ddf3      	ble.n	403042 <_malloc_r+0x8e>
  40305a:	3801      	subs	r0, #1
  40305c:	3001      	adds	r0, #1
  40305e:	49a2      	ldr	r1, [pc, #648]	; (4032e8 <_malloc_r+0x334>)
  403060:	693c      	ldr	r4, [r7, #16]
  403062:	f101 0e08 	add.w	lr, r1, #8
  403066:	4574      	cmp	r4, lr
  403068:	f000 817d 	beq.w	403366 <_malloc_r+0x3b2>
  40306c:	6863      	ldr	r3, [r4, #4]
  40306e:	f023 0303 	bic.w	r3, r3, #3
  403072:	1b5a      	subs	r2, r3, r5
  403074:	2a0f      	cmp	r2, #15
  403076:	f300 8163 	bgt.w	403340 <_malloc_r+0x38c>
  40307a:	2a00      	cmp	r2, #0
  40307c:	f8c1 e014 	str.w	lr, [r1, #20]
  403080:	f8c1 e010 	str.w	lr, [r1, #16]
  403084:	da73      	bge.n	40316e <_malloc_r+0x1ba>
  403086:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  40308a:	f080 8139 	bcs.w	403300 <_malloc_r+0x34c>
  40308e:	08db      	lsrs	r3, r3, #3
  403090:	eb01 08c3 	add.w	r8, r1, r3, lsl #3
  403094:	ea4f 0ca3 	mov.w	ip, r3, asr #2
  403098:	684a      	ldr	r2, [r1, #4]
  40309a:	f8d8 9008 	ldr.w	r9, [r8, #8]
  40309e:	f8c4 9008 	str.w	r9, [r4, #8]
  4030a2:	2301      	movs	r3, #1
  4030a4:	fa03 f30c 	lsl.w	r3, r3, ip
  4030a8:	4313      	orrs	r3, r2
  4030aa:	f8c4 800c 	str.w	r8, [r4, #12]
  4030ae:	604b      	str	r3, [r1, #4]
  4030b0:	f8c8 4008 	str.w	r4, [r8, #8]
  4030b4:	f8c9 400c 	str.w	r4, [r9, #12]
  4030b8:	1082      	asrs	r2, r0, #2
  4030ba:	2401      	movs	r4, #1
  4030bc:	4094      	lsls	r4, r2
  4030be:	429c      	cmp	r4, r3
  4030c0:	d862      	bhi.n	403188 <_malloc_r+0x1d4>
  4030c2:	4223      	tst	r3, r4
  4030c4:	d106      	bne.n	4030d4 <_malloc_r+0x120>
  4030c6:	f020 0003 	bic.w	r0, r0, #3
  4030ca:	0064      	lsls	r4, r4, #1
  4030cc:	4223      	tst	r3, r4
  4030ce:	f100 0004 	add.w	r0, r0, #4
  4030d2:	d0fa      	beq.n	4030ca <_malloc_r+0x116>
  4030d4:	eb07 08c0 	add.w	r8, r7, r0, lsl #3
  4030d8:	46c4      	mov	ip, r8
  4030da:	4681      	mov	r9, r0
  4030dc:	f8dc 300c 	ldr.w	r3, [ip, #12]
  4030e0:	459c      	cmp	ip, r3
  4030e2:	d107      	bne.n	4030f4 <_malloc_r+0x140>
  4030e4:	e141      	b.n	40336a <_malloc_r+0x3b6>
  4030e6:	2900      	cmp	r1, #0
  4030e8:	f280 8151 	bge.w	40338e <_malloc_r+0x3da>
  4030ec:	68db      	ldr	r3, [r3, #12]
  4030ee:	459c      	cmp	ip, r3
  4030f0:	f000 813b 	beq.w	40336a <_malloc_r+0x3b6>
  4030f4:	685a      	ldr	r2, [r3, #4]
  4030f6:	f022 0203 	bic.w	r2, r2, #3
  4030fa:	1b51      	subs	r1, r2, r5
  4030fc:	290f      	cmp	r1, #15
  4030fe:	ddf2      	ble.n	4030e6 <_malloc_r+0x132>
  403100:	461c      	mov	r4, r3
  403102:	f8d3 c00c 	ldr.w	ip, [r3, #12]
  403106:	f854 8f08 	ldr.w	r8, [r4, #8]!
  40310a:	195a      	adds	r2, r3, r5
  40310c:	f045 0901 	orr.w	r9, r5, #1
  403110:	f041 0501 	orr.w	r5, r1, #1
  403114:	f8c3 9004 	str.w	r9, [r3, #4]
  403118:	4630      	mov	r0, r6
  40311a:	f8c8 c00c 	str.w	ip, [r8, #12]
  40311e:	f8cc 8008 	str.w	r8, [ip, #8]
  403122:	617a      	str	r2, [r7, #20]
  403124:	613a      	str	r2, [r7, #16]
  403126:	f8c2 e00c 	str.w	lr, [r2, #12]
  40312a:	f8c2 e008 	str.w	lr, [r2, #8]
  40312e:	6055      	str	r5, [r2, #4]
  403130:	5051      	str	r1, [r2, r1]
  403132:	f000 fb1b 	bl	40376c <__malloc_unlock>
  403136:	e769      	b.n	40300c <_malloc_r+0x58>
  403138:	2400      	movs	r4, #0
  40313a:	230c      	movs	r3, #12
  40313c:	4620      	mov	r0, r4
  40313e:	6033      	str	r3, [r6, #0]
  403140:	b003      	add	sp, #12
  403142:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403146:	217e      	movs	r1, #126	; 0x7e
  403148:	203f      	movs	r0, #63	; 0x3f
  40314a:	e773      	b.n	403034 <_malloc_r+0x80>
  40314c:	4423      	add	r3, r4
  40314e:	68e1      	ldr	r1, [r4, #12]
  403150:	685a      	ldr	r2, [r3, #4]
  403152:	68a5      	ldr	r5, [r4, #8]
  403154:	f042 0201 	orr.w	r2, r2, #1
  403158:	60e9      	str	r1, [r5, #12]
  40315a:	4630      	mov	r0, r6
  40315c:	608d      	str	r5, [r1, #8]
  40315e:	605a      	str	r2, [r3, #4]
  403160:	f000 fb04 	bl	40376c <__malloc_unlock>
  403164:	3408      	adds	r4, #8
  403166:	4620      	mov	r0, r4
  403168:	b003      	add	sp, #12
  40316a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40316e:	4423      	add	r3, r4
  403170:	4630      	mov	r0, r6
  403172:	685a      	ldr	r2, [r3, #4]
  403174:	f042 0201 	orr.w	r2, r2, #1
  403178:	605a      	str	r2, [r3, #4]
  40317a:	f000 faf7 	bl	40376c <__malloc_unlock>
  40317e:	3408      	adds	r4, #8
  403180:	4620      	mov	r0, r4
  403182:	b003      	add	sp, #12
  403184:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403188:	68bc      	ldr	r4, [r7, #8]
  40318a:	6863      	ldr	r3, [r4, #4]
  40318c:	f023 0803 	bic.w	r8, r3, #3
  403190:	4545      	cmp	r5, r8
  403192:	d804      	bhi.n	40319e <_malloc_r+0x1ea>
  403194:	ebc5 0308 	rsb	r3, r5, r8
  403198:	2b0f      	cmp	r3, #15
  40319a:	f300 808c 	bgt.w	4032b6 <_malloc_r+0x302>
  40319e:	4b53      	ldr	r3, [pc, #332]	; (4032ec <_malloc_r+0x338>)
  4031a0:	f8df a158 	ldr.w	sl, [pc, #344]	; 4032fc <_malloc_r+0x348>
  4031a4:	681a      	ldr	r2, [r3, #0]
  4031a6:	f8da 3000 	ldr.w	r3, [sl]
  4031aa:	3301      	adds	r3, #1
  4031ac:	442a      	add	r2, r5
  4031ae:	eb04 0b08 	add.w	fp, r4, r8
  4031b2:	f000 8150 	beq.w	403456 <_malloc_r+0x4a2>
  4031b6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
  4031ba:	320f      	adds	r2, #15
  4031bc:	f422 627f 	bic.w	r2, r2, #4080	; 0xff0
  4031c0:	f022 020f 	bic.w	r2, r2, #15
  4031c4:	4611      	mov	r1, r2
  4031c6:	4630      	mov	r0, r6
  4031c8:	9201      	str	r2, [sp, #4]
  4031ca:	f000 fcc7 	bl	403b5c <_sbrk_r>
  4031ce:	f1b0 3fff 	cmp.w	r0, #4294967295
  4031d2:	4681      	mov	r9, r0
  4031d4:	9a01      	ldr	r2, [sp, #4]
  4031d6:	f000 8147 	beq.w	403468 <_malloc_r+0x4b4>
  4031da:	4583      	cmp	fp, r0
  4031dc:	f200 80ee 	bhi.w	4033bc <_malloc_r+0x408>
  4031e0:	4b43      	ldr	r3, [pc, #268]	; (4032f0 <_malloc_r+0x33c>)
  4031e2:	6819      	ldr	r1, [r3, #0]
  4031e4:	45cb      	cmp	fp, r9
  4031e6:	4411      	add	r1, r2
  4031e8:	6019      	str	r1, [r3, #0]
  4031ea:	f000 8142 	beq.w	403472 <_malloc_r+0x4be>
  4031ee:	f8da 0000 	ldr.w	r0, [sl]
  4031f2:	f8df e108 	ldr.w	lr, [pc, #264]	; 4032fc <_malloc_r+0x348>
  4031f6:	3001      	adds	r0, #1
  4031f8:	bf1b      	ittet	ne
  4031fa:	ebcb 0b09 	rsbne	fp, fp, r9
  4031fe:	4459      	addne	r1, fp
  403200:	f8ce 9000 	streq.w	r9, [lr]
  403204:	6019      	strne	r1, [r3, #0]
  403206:	f019 0107 	ands.w	r1, r9, #7
  40320a:	f000 8107 	beq.w	40341c <_malloc_r+0x468>
  40320e:	f1c1 0008 	rsb	r0, r1, #8
  403212:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
  403216:	4481      	add	r9, r0
  403218:	3108      	adds	r1, #8
  40321a:	444a      	add	r2, r9
  40321c:	f3c2 020b 	ubfx	r2, r2, #0, #12
  403220:	ebc2 0a01 	rsb	sl, r2, r1
  403224:	4651      	mov	r1, sl
  403226:	4630      	mov	r0, r6
  403228:	9301      	str	r3, [sp, #4]
  40322a:	f000 fc97 	bl	403b5c <_sbrk_r>
  40322e:	1c43      	adds	r3, r0, #1
  403230:	9b01      	ldr	r3, [sp, #4]
  403232:	f000 812c 	beq.w	40348e <_malloc_r+0x4da>
  403236:	ebc9 0200 	rsb	r2, r9, r0
  40323a:	4452      	add	r2, sl
  40323c:	f042 0201 	orr.w	r2, r2, #1
  403240:	6819      	ldr	r1, [r3, #0]
  403242:	f8c7 9008 	str.w	r9, [r7, #8]
  403246:	4451      	add	r1, sl
  403248:	42bc      	cmp	r4, r7
  40324a:	f8c9 2004 	str.w	r2, [r9, #4]
  40324e:	6019      	str	r1, [r3, #0]
  403250:	f8df a09c 	ldr.w	sl, [pc, #156]	; 4032f0 <_malloc_r+0x33c>
  403254:	d016      	beq.n	403284 <_malloc_r+0x2d0>
  403256:	f1b8 0f0f 	cmp.w	r8, #15
  40325a:	f240 80ee 	bls.w	40343a <_malloc_r+0x486>
  40325e:	6862      	ldr	r2, [r4, #4]
  403260:	f1a8 030c 	sub.w	r3, r8, #12
  403264:	f023 0307 	bic.w	r3, r3, #7
  403268:	18e0      	adds	r0, r4, r3
  40326a:	f002 0201 	and.w	r2, r2, #1
  40326e:	f04f 0e05 	mov.w	lr, #5
  403272:	431a      	orrs	r2, r3
  403274:	2b0f      	cmp	r3, #15
  403276:	6062      	str	r2, [r4, #4]
  403278:	f8c0 e004 	str.w	lr, [r0, #4]
  40327c:	f8c0 e008 	str.w	lr, [r0, #8]
  403280:	f200 8109 	bhi.w	403496 <_malloc_r+0x4e2>
  403284:	4b1b      	ldr	r3, [pc, #108]	; (4032f4 <_malloc_r+0x340>)
  403286:	68bc      	ldr	r4, [r7, #8]
  403288:	681a      	ldr	r2, [r3, #0]
  40328a:	4291      	cmp	r1, r2
  40328c:	bf88      	it	hi
  40328e:	6019      	strhi	r1, [r3, #0]
  403290:	4b19      	ldr	r3, [pc, #100]	; (4032f8 <_malloc_r+0x344>)
  403292:	681a      	ldr	r2, [r3, #0]
  403294:	4291      	cmp	r1, r2
  403296:	6862      	ldr	r2, [r4, #4]
  403298:	bf88      	it	hi
  40329a:	6019      	strhi	r1, [r3, #0]
  40329c:	f022 0203 	bic.w	r2, r2, #3
  4032a0:	4295      	cmp	r5, r2
  4032a2:	eba2 0305 	sub.w	r3, r2, r5
  4032a6:	d801      	bhi.n	4032ac <_malloc_r+0x2f8>
  4032a8:	2b0f      	cmp	r3, #15
  4032aa:	dc04      	bgt.n	4032b6 <_malloc_r+0x302>
  4032ac:	4630      	mov	r0, r6
  4032ae:	f000 fa5d 	bl	40376c <__malloc_unlock>
  4032b2:	2400      	movs	r4, #0
  4032b4:	e6aa      	b.n	40300c <_malloc_r+0x58>
  4032b6:	1962      	adds	r2, r4, r5
  4032b8:	f043 0301 	orr.w	r3, r3, #1
  4032bc:	f045 0501 	orr.w	r5, r5, #1
  4032c0:	6065      	str	r5, [r4, #4]
  4032c2:	4630      	mov	r0, r6
  4032c4:	60ba      	str	r2, [r7, #8]
  4032c6:	6053      	str	r3, [r2, #4]
  4032c8:	f000 fa50 	bl	40376c <__malloc_unlock>
  4032cc:	3408      	adds	r4, #8
  4032ce:	4620      	mov	r0, r4
  4032d0:	b003      	add	sp, #12
  4032d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4032d6:	2814      	cmp	r0, #20
  4032d8:	d968      	bls.n	4033ac <_malloc_r+0x3f8>
  4032da:	2854      	cmp	r0, #84	; 0x54
  4032dc:	f200 8097 	bhi.w	40340e <_malloc_r+0x45a>
  4032e0:	0b28      	lsrs	r0, r5, #12
  4032e2:	306e      	adds	r0, #110	; 0x6e
  4032e4:	0041      	lsls	r1, r0, #1
  4032e6:	e6a5      	b.n	403034 <_malloc_r+0x80>
  4032e8:	20000470 	.word	0x20000470
  4032ec:	20000930 	.word	0x20000930
  4032f0:	20000934 	.word	0x20000934
  4032f4:	2000092c 	.word	0x2000092c
  4032f8:	20000928 	.word	0x20000928
  4032fc:	2000087c 	.word	0x2000087c
  403300:	0a5a      	lsrs	r2, r3, #9
  403302:	2a04      	cmp	r2, #4
  403304:	d955      	bls.n	4033b2 <_malloc_r+0x3fe>
  403306:	2a14      	cmp	r2, #20
  403308:	f200 80a7 	bhi.w	40345a <_malloc_r+0x4a6>
  40330c:	325b      	adds	r2, #91	; 0x5b
  40330e:	ea4f 0c42 	mov.w	ip, r2, lsl #1
  403312:	eb07 0c8c 	add.w	ip, r7, ip, lsl #2
  403316:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 4034d4 <_malloc_r+0x520>
  40331a:	f8dc 1008 	ldr.w	r1, [ip, #8]
  40331e:	4561      	cmp	r1, ip
  403320:	d07f      	beq.n	403422 <_malloc_r+0x46e>
  403322:	684a      	ldr	r2, [r1, #4]
  403324:	f022 0203 	bic.w	r2, r2, #3
  403328:	4293      	cmp	r3, r2
  40332a:	d202      	bcs.n	403332 <_malloc_r+0x37e>
  40332c:	6889      	ldr	r1, [r1, #8]
  40332e:	458c      	cmp	ip, r1
  403330:	d1f7      	bne.n	403322 <_malloc_r+0x36e>
  403332:	68ca      	ldr	r2, [r1, #12]
  403334:	687b      	ldr	r3, [r7, #4]
  403336:	60e2      	str	r2, [r4, #12]
  403338:	60a1      	str	r1, [r4, #8]
  40333a:	6094      	str	r4, [r2, #8]
  40333c:	60cc      	str	r4, [r1, #12]
  40333e:	e6bb      	b.n	4030b8 <_malloc_r+0x104>
  403340:	1963      	adds	r3, r4, r5
  403342:	f042 0701 	orr.w	r7, r2, #1
  403346:	f045 0501 	orr.w	r5, r5, #1
  40334a:	6065      	str	r5, [r4, #4]
  40334c:	4630      	mov	r0, r6
  40334e:	614b      	str	r3, [r1, #20]
  403350:	610b      	str	r3, [r1, #16]
  403352:	f8c3 e00c 	str.w	lr, [r3, #12]
  403356:	f8c3 e008 	str.w	lr, [r3, #8]
  40335a:	605f      	str	r7, [r3, #4]
  40335c:	509a      	str	r2, [r3, r2]
  40335e:	3408      	adds	r4, #8
  403360:	f000 fa04 	bl	40376c <__malloc_unlock>
  403364:	e652      	b.n	40300c <_malloc_r+0x58>
  403366:	684b      	ldr	r3, [r1, #4]
  403368:	e6a6      	b.n	4030b8 <_malloc_r+0x104>
  40336a:	f109 0901 	add.w	r9, r9, #1
  40336e:	f019 0f03 	tst.w	r9, #3
  403372:	f10c 0c08 	add.w	ip, ip, #8
  403376:	f47f aeb1 	bne.w	4030dc <_malloc_r+0x128>
  40337a:	e02c      	b.n	4033d6 <_malloc_r+0x422>
  40337c:	f104 0308 	add.w	r3, r4, #8
  403380:	6964      	ldr	r4, [r4, #20]
  403382:	42a3      	cmp	r3, r4
  403384:	bf08      	it	eq
  403386:	3002      	addeq	r0, #2
  403388:	f43f ae69 	beq.w	40305e <_malloc_r+0xaa>
  40338c:	e62e      	b.n	402fec <_malloc_r+0x38>
  40338e:	441a      	add	r2, r3
  403390:	461c      	mov	r4, r3
  403392:	6851      	ldr	r1, [r2, #4]
  403394:	68db      	ldr	r3, [r3, #12]
  403396:	f854 5f08 	ldr.w	r5, [r4, #8]!
  40339a:	f041 0101 	orr.w	r1, r1, #1
  40339e:	6051      	str	r1, [r2, #4]
  4033a0:	4630      	mov	r0, r6
  4033a2:	60eb      	str	r3, [r5, #12]
  4033a4:	609d      	str	r5, [r3, #8]
  4033a6:	f000 f9e1 	bl	40376c <__malloc_unlock>
  4033aa:	e62f      	b.n	40300c <_malloc_r+0x58>
  4033ac:	305b      	adds	r0, #91	; 0x5b
  4033ae:	0041      	lsls	r1, r0, #1
  4033b0:	e640      	b.n	403034 <_malloc_r+0x80>
  4033b2:	099a      	lsrs	r2, r3, #6
  4033b4:	3238      	adds	r2, #56	; 0x38
  4033b6:	ea4f 0c42 	mov.w	ip, r2, lsl #1
  4033ba:	e7aa      	b.n	403312 <_malloc_r+0x35e>
  4033bc:	42bc      	cmp	r4, r7
  4033be:	4b45      	ldr	r3, [pc, #276]	; (4034d4 <_malloc_r+0x520>)
  4033c0:	f43f af0e 	beq.w	4031e0 <_malloc_r+0x22c>
  4033c4:	689c      	ldr	r4, [r3, #8]
  4033c6:	6862      	ldr	r2, [r4, #4]
  4033c8:	f022 0203 	bic.w	r2, r2, #3
  4033cc:	e768      	b.n	4032a0 <_malloc_r+0x2ec>
  4033ce:	f8d8 8000 	ldr.w	r8, [r8]
  4033d2:	4598      	cmp	r8, r3
  4033d4:	d17c      	bne.n	4034d0 <_malloc_r+0x51c>
  4033d6:	f010 0f03 	tst.w	r0, #3
  4033da:	f1a8 0308 	sub.w	r3, r8, #8
  4033de:	f100 30ff 	add.w	r0, r0, #4294967295
  4033e2:	d1f4      	bne.n	4033ce <_malloc_r+0x41a>
  4033e4:	687b      	ldr	r3, [r7, #4]
  4033e6:	ea23 0304 	bic.w	r3, r3, r4
  4033ea:	607b      	str	r3, [r7, #4]
  4033ec:	0064      	lsls	r4, r4, #1
  4033ee:	429c      	cmp	r4, r3
  4033f0:	f63f aeca 	bhi.w	403188 <_malloc_r+0x1d4>
  4033f4:	2c00      	cmp	r4, #0
  4033f6:	f43f aec7 	beq.w	403188 <_malloc_r+0x1d4>
  4033fa:	4223      	tst	r3, r4
  4033fc:	4648      	mov	r0, r9
  4033fe:	f47f ae69 	bne.w	4030d4 <_malloc_r+0x120>
  403402:	0064      	lsls	r4, r4, #1
  403404:	4223      	tst	r3, r4
  403406:	f100 0004 	add.w	r0, r0, #4
  40340a:	d0fa      	beq.n	403402 <_malloc_r+0x44e>
  40340c:	e662      	b.n	4030d4 <_malloc_r+0x120>
  40340e:	f5b0 7faa 	cmp.w	r0, #340	; 0x154
  403412:	d818      	bhi.n	403446 <_malloc_r+0x492>
  403414:	0be8      	lsrs	r0, r5, #15
  403416:	3077      	adds	r0, #119	; 0x77
  403418:	0041      	lsls	r1, r0, #1
  40341a:	e60b      	b.n	403034 <_malloc_r+0x80>
  40341c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  403420:	e6fb      	b.n	40321a <_malloc_r+0x266>
  403422:	f8d8 3004 	ldr.w	r3, [r8, #4]
  403426:	1092      	asrs	r2, r2, #2
  403428:	f04f 0c01 	mov.w	ip, #1
  40342c:	fa0c f202 	lsl.w	r2, ip, r2
  403430:	4313      	orrs	r3, r2
  403432:	f8c8 3004 	str.w	r3, [r8, #4]
  403436:	460a      	mov	r2, r1
  403438:	e77d      	b.n	403336 <_malloc_r+0x382>
  40343a:	2301      	movs	r3, #1
  40343c:	f8c9 3004 	str.w	r3, [r9, #4]
  403440:	464c      	mov	r4, r9
  403442:	2200      	movs	r2, #0
  403444:	e72c      	b.n	4032a0 <_malloc_r+0x2ec>
  403446:	f240 5354 	movw	r3, #1364	; 0x554
  40344a:	4298      	cmp	r0, r3
  40344c:	d81c      	bhi.n	403488 <_malloc_r+0x4d4>
  40344e:	0ca8      	lsrs	r0, r5, #18
  403450:	307c      	adds	r0, #124	; 0x7c
  403452:	0041      	lsls	r1, r0, #1
  403454:	e5ee      	b.n	403034 <_malloc_r+0x80>
  403456:	3210      	adds	r2, #16
  403458:	e6b4      	b.n	4031c4 <_malloc_r+0x210>
  40345a:	2a54      	cmp	r2, #84	; 0x54
  40345c:	d823      	bhi.n	4034a6 <_malloc_r+0x4f2>
  40345e:	0b1a      	lsrs	r2, r3, #12
  403460:	326e      	adds	r2, #110	; 0x6e
  403462:	ea4f 0c42 	mov.w	ip, r2, lsl #1
  403466:	e754      	b.n	403312 <_malloc_r+0x35e>
  403468:	68bc      	ldr	r4, [r7, #8]
  40346a:	6862      	ldr	r2, [r4, #4]
  40346c:	f022 0203 	bic.w	r2, r2, #3
  403470:	e716      	b.n	4032a0 <_malloc_r+0x2ec>
  403472:	f3cb 000b 	ubfx	r0, fp, #0, #12
  403476:	2800      	cmp	r0, #0
  403478:	f47f aeb9 	bne.w	4031ee <_malloc_r+0x23a>
  40347c:	4442      	add	r2, r8
  40347e:	68bb      	ldr	r3, [r7, #8]
  403480:	f042 0201 	orr.w	r2, r2, #1
  403484:	605a      	str	r2, [r3, #4]
  403486:	e6fd      	b.n	403284 <_malloc_r+0x2d0>
  403488:	21fc      	movs	r1, #252	; 0xfc
  40348a:	207e      	movs	r0, #126	; 0x7e
  40348c:	e5d2      	b.n	403034 <_malloc_r+0x80>
  40348e:	2201      	movs	r2, #1
  403490:	f04f 0a00 	mov.w	sl, #0
  403494:	e6d4      	b.n	403240 <_malloc_r+0x28c>
  403496:	f104 0108 	add.w	r1, r4, #8
  40349a:	4630      	mov	r0, r6
  40349c:	f7ff fa7a 	bl	402994 <_free_r>
  4034a0:	f8da 1000 	ldr.w	r1, [sl]
  4034a4:	e6ee      	b.n	403284 <_malloc_r+0x2d0>
  4034a6:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  4034aa:	d804      	bhi.n	4034b6 <_malloc_r+0x502>
  4034ac:	0bda      	lsrs	r2, r3, #15
  4034ae:	3277      	adds	r2, #119	; 0x77
  4034b0:	ea4f 0c42 	mov.w	ip, r2, lsl #1
  4034b4:	e72d      	b.n	403312 <_malloc_r+0x35e>
  4034b6:	f240 5154 	movw	r1, #1364	; 0x554
  4034ba:	428a      	cmp	r2, r1
  4034bc:	d804      	bhi.n	4034c8 <_malloc_r+0x514>
  4034be:	0c9a      	lsrs	r2, r3, #18
  4034c0:	327c      	adds	r2, #124	; 0x7c
  4034c2:	ea4f 0c42 	mov.w	ip, r2, lsl #1
  4034c6:	e724      	b.n	403312 <_malloc_r+0x35e>
  4034c8:	f04f 0cfc 	mov.w	ip, #252	; 0xfc
  4034cc:	227e      	movs	r2, #126	; 0x7e
  4034ce:	e720      	b.n	403312 <_malloc_r+0x35e>
  4034d0:	687b      	ldr	r3, [r7, #4]
  4034d2:	e78b      	b.n	4033ec <_malloc_r+0x438>
  4034d4:	20000470 	.word	0x20000470

004034d8 <memchr>:
  4034d8:	0783      	lsls	r3, r0, #30
  4034da:	b470      	push	{r4, r5, r6}
  4034dc:	b2c9      	uxtb	r1, r1
  4034de:	d040      	beq.n	403562 <memchr+0x8a>
  4034e0:	1e54      	subs	r4, r2, #1
  4034e2:	2a00      	cmp	r2, #0
  4034e4:	d03f      	beq.n	403566 <memchr+0x8e>
  4034e6:	7803      	ldrb	r3, [r0, #0]
  4034e8:	428b      	cmp	r3, r1
  4034ea:	bf18      	it	ne
  4034ec:	1c43      	addne	r3, r0, #1
  4034ee:	d106      	bne.n	4034fe <memchr+0x26>
  4034f0:	e01d      	b.n	40352e <memchr+0x56>
  4034f2:	b1f4      	cbz	r4, 403532 <memchr+0x5a>
  4034f4:	7802      	ldrb	r2, [r0, #0]
  4034f6:	428a      	cmp	r2, r1
  4034f8:	f104 34ff 	add.w	r4, r4, #4294967295
  4034fc:	d017      	beq.n	40352e <memchr+0x56>
  4034fe:	f013 0f03 	tst.w	r3, #3
  403502:	4618      	mov	r0, r3
  403504:	f103 0301 	add.w	r3, r3, #1
  403508:	d1f3      	bne.n	4034f2 <memchr+0x1a>
  40350a:	2c03      	cmp	r4, #3
  40350c:	d814      	bhi.n	403538 <memchr+0x60>
  40350e:	b184      	cbz	r4, 403532 <memchr+0x5a>
  403510:	7803      	ldrb	r3, [r0, #0]
  403512:	428b      	cmp	r3, r1
  403514:	d00b      	beq.n	40352e <memchr+0x56>
  403516:	1905      	adds	r5, r0, r4
  403518:	1c43      	adds	r3, r0, #1
  40351a:	e002      	b.n	403522 <memchr+0x4a>
  40351c:	7802      	ldrb	r2, [r0, #0]
  40351e:	428a      	cmp	r2, r1
  403520:	d005      	beq.n	40352e <memchr+0x56>
  403522:	42ab      	cmp	r3, r5
  403524:	4618      	mov	r0, r3
  403526:	f103 0301 	add.w	r3, r3, #1
  40352a:	d1f7      	bne.n	40351c <memchr+0x44>
  40352c:	2000      	movs	r0, #0
  40352e:	bc70      	pop	{r4, r5, r6}
  403530:	4770      	bx	lr
  403532:	4620      	mov	r0, r4
  403534:	bc70      	pop	{r4, r5, r6}
  403536:	4770      	bx	lr
  403538:	ea41 2601 	orr.w	r6, r1, r1, lsl #8
  40353c:	4602      	mov	r2, r0
  40353e:	ea46 4606 	orr.w	r6, r6, r6, lsl #16
  403542:	4610      	mov	r0, r2
  403544:	3204      	adds	r2, #4
  403546:	6803      	ldr	r3, [r0, #0]
  403548:	4073      	eors	r3, r6
  40354a:	f1a3 3501 	sub.w	r5, r3, #16843009	; 0x1010101
  40354e:	ea25 0303 	bic.w	r3, r5, r3
  403552:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
  403556:	d1da      	bne.n	40350e <memchr+0x36>
  403558:	3c04      	subs	r4, #4
  40355a:	2c03      	cmp	r4, #3
  40355c:	4610      	mov	r0, r2
  40355e:	d8f0      	bhi.n	403542 <memchr+0x6a>
  403560:	e7d5      	b.n	40350e <memchr+0x36>
  403562:	4614      	mov	r4, r2
  403564:	e7d1      	b.n	40350a <memchr+0x32>
  403566:	4610      	mov	r0, r2
  403568:	e7e1      	b.n	40352e <memchr+0x56>
  40356a:	bf00      	nop

0040356c <memcpy>:
  40356c:	4684      	mov	ip, r0
  40356e:	ea41 0300 	orr.w	r3, r1, r0
  403572:	f013 0303 	ands.w	r3, r3, #3
  403576:	d16d      	bne.n	403654 <memcpy+0xe8>
  403578:	3a40      	subs	r2, #64	; 0x40
  40357a:	d341      	bcc.n	403600 <memcpy+0x94>
  40357c:	f851 3b04 	ldr.w	r3, [r1], #4
  403580:	f840 3b04 	str.w	r3, [r0], #4
  403584:	f851 3b04 	ldr.w	r3, [r1], #4
  403588:	f840 3b04 	str.w	r3, [r0], #4
  40358c:	f851 3b04 	ldr.w	r3, [r1], #4
  403590:	f840 3b04 	str.w	r3, [r0], #4
  403594:	f851 3b04 	ldr.w	r3, [r1], #4
  403598:	f840 3b04 	str.w	r3, [r0], #4
  40359c:	f851 3b04 	ldr.w	r3, [r1], #4
  4035a0:	f840 3b04 	str.w	r3, [r0], #4
  4035a4:	f851 3b04 	ldr.w	r3, [r1], #4
  4035a8:	f840 3b04 	str.w	r3, [r0], #4
  4035ac:	f851 3b04 	ldr.w	r3, [r1], #4
  4035b0:	f840 3b04 	str.w	r3, [r0], #4
  4035b4:	f851 3b04 	ldr.w	r3, [r1], #4
  4035b8:	f840 3b04 	str.w	r3, [r0], #4
  4035bc:	f851 3b04 	ldr.w	r3, [r1], #4
  4035c0:	f840 3b04 	str.w	r3, [r0], #4
  4035c4:	f851 3b04 	ldr.w	r3, [r1], #4
  4035c8:	f840 3b04 	str.w	r3, [r0], #4
  4035cc:	f851 3b04 	ldr.w	r3, [r1], #4
  4035d0:	f840 3b04 	str.w	r3, [r0], #4
  4035d4:	f851 3b04 	ldr.w	r3, [r1], #4
  4035d8:	f840 3b04 	str.w	r3, [r0], #4
  4035dc:	f851 3b04 	ldr.w	r3, [r1], #4
  4035e0:	f840 3b04 	str.w	r3, [r0], #4
  4035e4:	f851 3b04 	ldr.w	r3, [r1], #4
  4035e8:	f840 3b04 	str.w	r3, [r0], #4
  4035ec:	f851 3b04 	ldr.w	r3, [r1], #4
  4035f0:	f840 3b04 	str.w	r3, [r0], #4
  4035f4:	f851 3b04 	ldr.w	r3, [r1], #4
  4035f8:	f840 3b04 	str.w	r3, [r0], #4
  4035fc:	3a40      	subs	r2, #64	; 0x40
  4035fe:	d2bd      	bcs.n	40357c <memcpy+0x10>
  403600:	3230      	adds	r2, #48	; 0x30
  403602:	d311      	bcc.n	403628 <memcpy+0xbc>
  403604:	f851 3b04 	ldr.w	r3, [r1], #4
  403608:	f840 3b04 	str.w	r3, [r0], #4
  40360c:	f851 3b04 	ldr.w	r3, [r1], #4
  403610:	f840 3b04 	str.w	r3, [r0], #4
  403614:	f851 3b04 	ldr.w	r3, [r1], #4
  403618:	f840 3b04 	str.w	r3, [r0], #4
  40361c:	f851 3b04 	ldr.w	r3, [r1], #4
  403620:	f840 3b04 	str.w	r3, [r0], #4
  403624:	3a10      	subs	r2, #16
  403626:	d2ed      	bcs.n	403604 <memcpy+0x98>
  403628:	320c      	adds	r2, #12
  40362a:	d305      	bcc.n	403638 <memcpy+0xcc>
  40362c:	f851 3b04 	ldr.w	r3, [r1], #4
  403630:	f840 3b04 	str.w	r3, [r0], #4
  403634:	3a04      	subs	r2, #4
  403636:	d2f9      	bcs.n	40362c <memcpy+0xc0>
  403638:	3204      	adds	r2, #4
  40363a:	d008      	beq.n	40364e <memcpy+0xe2>
  40363c:	07d2      	lsls	r2, r2, #31
  40363e:	bf1c      	itt	ne
  403640:	f811 3b01 	ldrbne.w	r3, [r1], #1
  403644:	f800 3b01 	strbne.w	r3, [r0], #1
  403648:	d301      	bcc.n	40364e <memcpy+0xe2>
  40364a:	880b      	ldrh	r3, [r1, #0]
  40364c:	8003      	strh	r3, [r0, #0]
  40364e:	4660      	mov	r0, ip
  403650:	4770      	bx	lr
  403652:	bf00      	nop
  403654:	2a08      	cmp	r2, #8
  403656:	d313      	bcc.n	403680 <memcpy+0x114>
  403658:	078b      	lsls	r3, r1, #30
  40365a:	d08d      	beq.n	403578 <memcpy+0xc>
  40365c:	f010 0303 	ands.w	r3, r0, #3
  403660:	d08a      	beq.n	403578 <memcpy+0xc>
  403662:	f1c3 0304 	rsb	r3, r3, #4
  403666:	1ad2      	subs	r2, r2, r3
  403668:	07db      	lsls	r3, r3, #31
  40366a:	bf1c      	itt	ne
  40366c:	f811 3b01 	ldrbne.w	r3, [r1], #1
  403670:	f800 3b01 	strbne.w	r3, [r0], #1
  403674:	d380      	bcc.n	403578 <memcpy+0xc>
  403676:	f831 3b02 	ldrh.w	r3, [r1], #2
  40367a:	f820 3b02 	strh.w	r3, [r0], #2
  40367e:	e77b      	b.n	403578 <memcpy+0xc>
  403680:	3a04      	subs	r2, #4
  403682:	d3d9      	bcc.n	403638 <memcpy+0xcc>
  403684:	3a01      	subs	r2, #1
  403686:	f811 3b01 	ldrb.w	r3, [r1], #1
  40368a:	f800 3b01 	strb.w	r3, [r0], #1
  40368e:	d2f9      	bcs.n	403684 <memcpy+0x118>
  403690:	780b      	ldrb	r3, [r1, #0]
  403692:	7003      	strb	r3, [r0, #0]
  403694:	784b      	ldrb	r3, [r1, #1]
  403696:	7043      	strb	r3, [r0, #1]
  403698:	788b      	ldrb	r3, [r1, #2]
  40369a:	7083      	strb	r3, [r0, #2]
  40369c:	4660      	mov	r0, ip
  40369e:	4770      	bx	lr

004036a0 <memmove>:
  4036a0:	4288      	cmp	r0, r1
  4036a2:	b5f0      	push	{r4, r5, r6, r7, lr}
  4036a4:	d90d      	bls.n	4036c2 <memmove+0x22>
  4036a6:	188b      	adds	r3, r1, r2
  4036a8:	4298      	cmp	r0, r3
  4036aa:	d20a      	bcs.n	4036c2 <memmove+0x22>
  4036ac:	1881      	adds	r1, r0, r2
  4036ae:	2a00      	cmp	r2, #0
  4036b0:	d054      	beq.n	40375c <memmove+0xbc>
  4036b2:	1a9a      	subs	r2, r3, r2
  4036b4:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
  4036b8:	f801 4d01 	strb.w	r4, [r1, #-1]!
  4036bc:	4293      	cmp	r3, r2
  4036be:	d1f9      	bne.n	4036b4 <memmove+0x14>
  4036c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4036c2:	2a0f      	cmp	r2, #15
  4036c4:	d948      	bls.n	403758 <memmove+0xb8>
  4036c6:	ea40 0301 	orr.w	r3, r0, r1
  4036ca:	079b      	lsls	r3, r3, #30
  4036cc:	d147      	bne.n	40375e <memmove+0xbe>
  4036ce:	f100 0410 	add.w	r4, r0, #16
  4036d2:	f101 0310 	add.w	r3, r1, #16
  4036d6:	4615      	mov	r5, r2
  4036d8:	f853 6c10 	ldr.w	r6, [r3, #-16]
  4036dc:	f844 6c10 	str.w	r6, [r4, #-16]
  4036e0:	f853 6c0c 	ldr.w	r6, [r3, #-12]
  4036e4:	f844 6c0c 	str.w	r6, [r4, #-12]
  4036e8:	f853 6c08 	ldr.w	r6, [r3, #-8]
  4036ec:	f844 6c08 	str.w	r6, [r4, #-8]
  4036f0:	3d10      	subs	r5, #16
  4036f2:	f853 6c04 	ldr.w	r6, [r3, #-4]
  4036f6:	f844 6c04 	str.w	r6, [r4, #-4]
  4036fa:	2d0f      	cmp	r5, #15
  4036fc:	f103 0310 	add.w	r3, r3, #16
  403700:	f104 0410 	add.w	r4, r4, #16
  403704:	d8e8      	bhi.n	4036d8 <memmove+0x38>
  403706:	f1a2 0310 	sub.w	r3, r2, #16
  40370a:	f023 030f 	bic.w	r3, r3, #15
  40370e:	f002 0e0f 	and.w	lr, r2, #15
  403712:	3310      	adds	r3, #16
  403714:	f1be 0f03 	cmp.w	lr, #3
  403718:	4419      	add	r1, r3
  40371a:	4403      	add	r3, r0
  40371c:	d921      	bls.n	403762 <memmove+0xc2>
  40371e:	1f1e      	subs	r6, r3, #4
  403720:	460d      	mov	r5, r1
  403722:	4674      	mov	r4, lr
  403724:	3c04      	subs	r4, #4
  403726:	f855 7b04 	ldr.w	r7, [r5], #4
  40372a:	f846 7f04 	str.w	r7, [r6, #4]!
  40372e:	2c03      	cmp	r4, #3
  403730:	d8f8      	bhi.n	403724 <memmove+0x84>
  403732:	f1ae 0404 	sub.w	r4, lr, #4
  403736:	f024 0403 	bic.w	r4, r4, #3
  40373a:	3404      	adds	r4, #4
  40373c:	4423      	add	r3, r4
  40373e:	4421      	add	r1, r4
  403740:	f002 0203 	and.w	r2, r2, #3
  403744:	b152      	cbz	r2, 40375c <memmove+0xbc>
  403746:	3b01      	subs	r3, #1
  403748:	440a      	add	r2, r1
  40374a:	f811 4b01 	ldrb.w	r4, [r1], #1
  40374e:	f803 4f01 	strb.w	r4, [r3, #1]!
  403752:	4291      	cmp	r1, r2
  403754:	d1f9      	bne.n	40374a <memmove+0xaa>
  403756:	bdf0      	pop	{r4, r5, r6, r7, pc}
  403758:	4603      	mov	r3, r0
  40375a:	e7f3      	b.n	403744 <memmove+0xa4>
  40375c:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40375e:	4603      	mov	r3, r0
  403760:	e7f1      	b.n	403746 <memmove+0xa6>
  403762:	4672      	mov	r2, lr
  403764:	e7ee      	b.n	403744 <memmove+0xa4>
  403766:	bf00      	nop

00403768 <__malloc_lock>:
  403768:	4770      	bx	lr
  40376a:	bf00      	nop

0040376c <__malloc_unlock>:
  40376c:	4770      	bx	lr
  40376e:	bf00      	nop

00403770 <_realloc_r>:
  403770:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  403774:	4617      	mov	r7, r2
  403776:	b083      	sub	sp, #12
  403778:	460e      	mov	r6, r1
  40377a:	2900      	cmp	r1, #0
  40377c:	f000 80e7 	beq.w	40394e <_realloc_r+0x1de>
  403780:	4681      	mov	r9, r0
  403782:	f107 050b 	add.w	r5, r7, #11
  403786:	f7ff ffef 	bl	403768 <__malloc_lock>
  40378a:	f856 3c04 	ldr.w	r3, [r6, #-4]
  40378e:	2d16      	cmp	r5, #22
  403790:	f023 0403 	bic.w	r4, r3, #3
  403794:	f1a6 0808 	sub.w	r8, r6, #8
  403798:	d84c      	bhi.n	403834 <_realloc_r+0xc4>
  40379a:	2210      	movs	r2, #16
  40379c:	4615      	mov	r5, r2
  40379e:	42af      	cmp	r7, r5
  4037a0:	d84d      	bhi.n	40383e <_realloc_r+0xce>
  4037a2:	4294      	cmp	r4, r2
  4037a4:	f280 8084 	bge.w	4038b0 <_realloc_r+0x140>
  4037a8:	f8df b3ac 	ldr.w	fp, [pc, #940]	; 403b58 <_realloc_r+0x3e8>
  4037ac:	f8db 0008 	ldr.w	r0, [fp, #8]
  4037b0:	eb08 0104 	add.w	r1, r8, r4
  4037b4:	4288      	cmp	r0, r1
  4037b6:	f000 80d6 	beq.w	403966 <_realloc_r+0x1f6>
  4037ba:	6848      	ldr	r0, [r1, #4]
  4037bc:	f020 0e01 	bic.w	lr, r0, #1
  4037c0:	448e      	add	lr, r1
  4037c2:	f8de e004 	ldr.w	lr, [lr, #4]
  4037c6:	f01e 0f01 	tst.w	lr, #1
  4037ca:	d13f      	bne.n	40384c <_realloc_r+0xdc>
  4037cc:	f020 0003 	bic.w	r0, r0, #3
  4037d0:	4420      	add	r0, r4
  4037d2:	4290      	cmp	r0, r2
  4037d4:	f280 80c1 	bge.w	40395a <_realloc_r+0x1ea>
  4037d8:	07db      	lsls	r3, r3, #31
  4037da:	f100 808f 	bmi.w	4038fc <_realloc_r+0x18c>
  4037de:	f856 3c08 	ldr.w	r3, [r6, #-8]
  4037e2:	ebc3 0a08 	rsb	sl, r3, r8
  4037e6:	f8da 3004 	ldr.w	r3, [sl, #4]
  4037ea:	f023 0303 	bic.w	r3, r3, #3
  4037ee:	eb00 0e03 	add.w	lr, r0, r3
  4037f2:	4596      	cmp	lr, r2
  4037f4:	db34      	blt.n	403860 <_realloc_r+0xf0>
  4037f6:	68cb      	ldr	r3, [r1, #12]
  4037f8:	688a      	ldr	r2, [r1, #8]
  4037fa:	4657      	mov	r7, sl
  4037fc:	60d3      	str	r3, [r2, #12]
  4037fe:	609a      	str	r2, [r3, #8]
  403800:	f857 1f08 	ldr.w	r1, [r7, #8]!
  403804:	f8da 300c 	ldr.w	r3, [sl, #12]
  403808:	60cb      	str	r3, [r1, #12]
  40380a:	1f22      	subs	r2, r4, #4
  40380c:	2a24      	cmp	r2, #36	; 0x24
  40380e:	6099      	str	r1, [r3, #8]
  403810:	f200 8136 	bhi.w	403a80 <_realloc_r+0x310>
  403814:	2a13      	cmp	r2, #19
  403816:	f240 80fd 	bls.w	403a14 <_realloc_r+0x2a4>
  40381a:	6833      	ldr	r3, [r6, #0]
  40381c:	f8ca 3008 	str.w	r3, [sl, #8]
  403820:	6873      	ldr	r3, [r6, #4]
  403822:	f8ca 300c 	str.w	r3, [sl, #12]
  403826:	2a1b      	cmp	r2, #27
  403828:	f200 8140 	bhi.w	403aac <_realloc_r+0x33c>
  40382c:	3608      	adds	r6, #8
  40382e:	f10a 0310 	add.w	r3, sl, #16
  403832:	e0f0      	b.n	403a16 <_realloc_r+0x2a6>
  403834:	f025 0507 	bic.w	r5, r5, #7
  403838:	2d00      	cmp	r5, #0
  40383a:	462a      	mov	r2, r5
  40383c:	daaf      	bge.n	40379e <_realloc_r+0x2e>
  40383e:	230c      	movs	r3, #12
  403840:	2000      	movs	r0, #0
  403842:	f8c9 3000 	str.w	r3, [r9]
  403846:	b003      	add	sp, #12
  403848:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40384c:	07d9      	lsls	r1, r3, #31
  40384e:	d455      	bmi.n	4038fc <_realloc_r+0x18c>
  403850:	f856 3c08 	ldr.w	r3, [r6, #-8]
  403854:	ebc3 0a08 	rsb	sl, r3, r8
  403858:	f8da 3004 	ldr.w	r3, [sl, #4]
  40385c:	f023 0303 	bic.w	r3, r3, #3
  403860:	4423      	add	r3, r4
  403862:	4293      	cmp	r3, r2
  403864:	db4a      	blt.n	4038fc <_realloc_r+0x18c>
  403866:	4657      	mov	r7, sl
  403868:	f8da 100c 	ldr.w	r1, [sl, #12]
  40386c:	f857 0f08 	ldr.w	r0, [r7, #8]!
  403870:	1f22      	subs	r2, r4, #4
  403872:	2a24      	cmp	r2, #36	; 0x24
  403874:	60c1      	str	r1, [r0, #12]
  403876:	6088      	str	r0, [r1, #8]
  403878:	f200 810e 	bhi.w	403a98 <_realloc_r+0x328>
  40387c:	2a13      	cmp	r2, #19
  40387e:	f240 8109 	bls.w	403a94 <_realloc_r+0x324>
  403882:	6831      	ldr	r1, [r6, #0]
  403884:	f8ca 1008 	str.w	r1, [sl, #8]
  403888:	6871      	ldr	r1, [r6, #4]
  40388a:	f8ca 100c 	str.w	r1, [sl, #12]
  40388e:	2a1b      	cmp	r2, #27
  403890:	f200 8121 	bhi.w	403ad6 <_realloc_r+0x366>
  403894:	3608      	adds	r6, #8
  403896:	f10a 0210 	add.w	r2, sl, #16
  40389a:	6831      	ldr	r1, [r6, #0]
  40389c:	6011      	str	r1, [r2, #0]
  40389e:	6871      	ldr	r1, [r6, #4]
  4038a0:	6051      	str	r1, [r2, #4]
  4038a2:	68b1      	ldr	r1, [r6, #8]
  4038a4:	6091      	str	r1, [r2, #8]
  4038a6:	461c      	mov	r4, r3
  4038a8:	f8da 3004 	ldr.w	r3, [sl, #4]
  4038ac:	463e      	mov	r6, r7
  4038ae:	46d0      	mov	r8, sl
  4038b0:	1b62      	subs	r2, r4, r5
  4038b2:	2a0f      	cmp	r2, #15
  4038b4:	f003 0301 	and.w	r3, r3, #1
  4038b8:	d80e      	bhi.n	4038d8 <_realloc_r+0x168>
  4038ba:	4323      	orrs	r3, r4
  4038bc:	4444      	add	r4, r8
  4038be:	f8c8 3004 	str.w	r3, [r8, #4]
  4038c2:	6863      	ldr	r3, [r4, #4]
  4038c4:	f043 0301 	orr.w	r3, r3, #1
  4038c8:	6063      	str	r3, [r4, #4]
  4038ca:	4648      	mov	r0, r9
  4038cc:	f7ff ff4e 	bl	40376c <__malloc_unlock>
  4038d0:	4630      	mov	r0, r6
  4038d2:	b003      	add	sp, #12
  4038d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4038d8:	eb08 0105 	add.w	r1, r8, r5
  4038dc:	431d      	orrs	r5, r3
  4038de:	f042 0301 	orr.w	r3, r2, #1
  4038e2:	440a      	add	r2, r1
  4038e4:	f8c8 5004 	str.w	r5, [r8, #4]
  4038e8:	604b      	str	r3, [r1, #4]
  4038ea:	6853      	ldr	r3, [r2, #4]
  4038ec:	f043 0301 	orr.w	r3, r3, #1
  4038f0:	3108      	adds	r1, #8
  4038f2:	6053      	str	r3, [r2, #4]
  4038f4:	4648      	mov	r0, r9
  4038f6:	f7ff f84d 	bl	402994 <_free_r>
  4038fa:	e7e6      	b.n	4038ca <_realloc_r+0x15a>
  4038fc:	4639      	mov	r1, r7
  4038fe:	4648      	mov	r0, r9
  403900:	f7ff fb58 	bl	402fb4 <_malloc_r>
  403904:	4607      	mov	r7, r0
  403906:	b1d8      	cbz	r0, 403940 <_realloc_r+0x1d0>
  403908:	f856 3c04 	ldr.w	r3, [r6, #-4]
  40390c:	f023 0201 	bic.w	r2, r3, #1
  403910:	4442      	add	r2, r8
  403912:	f1a0 0108 	sub.w	r1, r0, #8
  403916:	4291      	cmp	r1, r2
  403918:	f000 80ac 	beq.w	403a74 <_realloc_r+0x304>
  40391c:	1f22      	subs	r2, r4, #4
  40391e:	2a24      	cmp	r2, #36	; 0x24
  403920:	f200 8099 	bhi.w	403a56 <_realloc_r+0x2e6>
  403924:	2a13      	cmp	r2, #19
  403926:	d86a      	bhi.n	4039fe <_realloc_r+0x28e>
  403928:	4603      	mov	r3, r0
  40392a:	4632      	mov	r2, r6
  40392c:	6811      	ldr	r1, [r2, #0]
  40392e:	6019      	str	r1, [r3, #0]
  403930:	6851      	ldr	r1, [r2, #4]
  403932:	6059      	str	r1, [r3, #4]
  403934:	6892      	ldr	r2, [r2, #8]
  403936:	609a      	str	r2, [r3, #8]
  403938:	4631      	mov	r1, r6
  40393a:	4648      	mov	r0, r9
  40393c:	f7ff f82a 	bl	402994 <_free_r>
  403940:	4648      	mov	r0, r9
  403942:	f7ff ff13 	bl	40376c <__malloc_unlock>
  403946:	4638      	mov	r0, r7
  403948:	b003      	add	sp, #12
  40394a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40394e:	4611      	mov	r1, r2
  403950:	b003      	add	sp, #12
  403952:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  403956:	f7ff bb2d 	b.w	402fb4 <_malloc_r>
  40395a:	68ca      	ldr	r2, [r1, #12]
  40395c:	6889      	ldr	r1, [r1, #8]
  40395e:	4604      	mov	r4, r0
  403960:	60ca      	str	r2, [r1, #12]
  403962:	6091      	str	r1, [r2, #8]
  403964:	e7a4      	b.n	4038b0 <_realloc_r+0x140>
  403966:	6841      	ldr	r1, [r0, #4]
  403968:	f021 0103 	bic.w	r1, r1, #3
  40396c:	4421      	add	r1, r4
  40396e:	f105 0010 	add.w	r0, r5, #16
  403972:	4281      	cmp	r1, r0
  403974:	da5b      	bge.n	403a2e <_realloc_r+0x2be>
  403976:	07db      	lsls	r3, r3, #31
  403978:	d4c0      	bmi.n	4038fc <_realloc_r+0x18c>
  40397a:	f856 3c08 	ldr.w	r3, [r6, #-8]
  40397e:	ebc3 0a08 	rsb	sl, r3, r8
  403982:	f8da 3004 	ldr.w	r3, [sl, #4]
  403986:	f023 0303 	bic.w	r3, r3, #3
  40398a:	eb01 0c03 	add.w	ip, r1, r3
  40398e:	4560      	cmp	r0, ip
  403990:	f73f af66 	bgt.w	403860 <_realloc_r+0xf0>
  403994:	4657      	mov	r7, sl
  403996:	f8da 300c 	ldr.w	r3, [sl, #12]
  40399a:	f857 1f08 	ldr.w	r1, [r7, #8]!
  40399e:	1f22      	subs	r2, r4, #4
  4039a0:	2a24      	cmp	r2, #36	; 0x24
  4039a2:	60cb      	str	r3, [r1, #12]
  4039a4:	6099      	str	r1, [r3, #8]
  4039a6:	f200 80b8 	bhi.w	403b1a <_realloc_r+0x3aa>
  4039aa:	2a13      	cmp	r2, #19
  4039ac:	f240 80a9 	bls.w	403b02 <_realloc_r+0x392>
  4039b0:	6833      	ldr	r3, [r6, #0]
  4039b2:	f8ca 3008 	str.w	r3, [sl, #8]
  4039b6:	6873      	ldr	r3, [r6, #4]
  4039b8:	f8ca 300c 	str.w	r3, [sl, #12]
  4039bc:	2a1b      	cmp	r2, #27
  4039be:	f200 80b5 	bhi.w	403b2c <_realloc_r+0x3bc>
  4039c2:	3608      	adds	r6, #8
  4039c4:	f10a 0310 	add.w	r3, sl, #16
  4039c8:	6832      	ldr	r2, [r6, #0]
  4039ca:	601a      	str	r2, [r3, #0]
  4039cc:	6872      	ldr	r2, [r6, #4]
  4039ce:	605a      	str	r2, [r3, #4]
  4039d0:	68b2      	ldr	r2, [r6, #8]
  4039d2:	609a      	str	r2, [r3, #8]
  4039d4:	eb0a 0205 	add.w	r2, sl, r5
  4039d8:	ebc5 030c 	rsb	r3, r5, ip
  4039dc:	f043 0301 	orr.w	r3, r3, #1
  4039e0:	f8cb 2008 	str.w	r2, [fp, #8]
  4039e4:	6053      	str	r3, [r2, #4]
  4039e6:	f8da 3004 	ldr.w	r3, [sl, #4]
  4039ea:	f003 0301 	and.w	r3, r3, #1
  4039ee:	431d      	orrs	r5, r3
  4039f0:	4648      	mov	r0, r9
  4039f2:	f8ca 5004 	str.w	r5, [sl, #4]
  4039f6:	f7ff feb9 	bl	40376c <__malloc_unlock>
  4039fa:	4638      	mov	r0, r7
  4039fc:	e769      	b.n	4038d2 <_realloc_r+0x162>
  4039fe:	6833      	ldr	r3, [r6, #0]
  403a00:	6003      	str	r3, [r0, #0]
  403a02:	6873      	ldr	r3, [r6, #4]
  403a04:	6043      	str	r3, [r0, #4]
  403a06:	2a1b      	cmp	r2, #27
  403a08:	d829      	bhi.n	403a5e <_realloc_r+0x2ee>
  403a0a:	f100 0308 	add.w	r3, r0, #8
  403a0e:	f106 0208 	add.w	r2, r6, #8
  403a12:	e78b      	b.n	40392c <_realloc_r+0x1bc>
  403a14:	463b      	mov	r3, r7
  403a16:	6832      	ldr	r2, [r6, #0]
  403a18:	601a      	str	r2, [r3, #0]
  403a1a:	6872      	ldr	r2, [r6, #4]
  403a1c:	605a      	str	r2, [r3, #4]
  403a1e:	68b2      	ldr	r2, [r6, #8]
  403a20:	609a      	str	r2, [r3, #8]
  403a22:	463e      	mov	r6, r7
  403a24:	4674      	mov	r4, lr
  403a26:	f8da 3004 	ldr.w	r3, [sl, #4]
  403a2a:	46d0      	mov	r8, sl
  403a2c:	e740      	b.n	4038b0 <_realloc_r+0x140>
  403a2e:	eb08 0205 	add.w	r2, r8, r5
  403a32:	1b4b      	subs	r3, r1, r5
  403a34:	f043 0301 	orr.w	r3, r3, #1
  403a38:	f8cb 2008 	str.w	r2, [fp, #8]
  403a3c:	6053      	str	r3, [r2, #4]
  403a3e:	f856 3c04 	ldr.w	r3, [r6, #-4]
  403a42:	f003 0301 	and.w	r3, r3, #1
  403a46:	431d      	orrs	r5, r3
  403a48:	4648      	mov	r0, r9
  403a4a:	f846 5c04 	str.w	r5, [r6, #-4]
  403a4e:	f7ff fe8d 	bl	40376c <__malloc_unlock>
  403a52:	4630      	mov	r0, r6
  403a54:	e73d      	b.n	4038d2 <_realloc_r+0x162>
  403a56:	4631      	mov	r1, r6
  403a58:	f7ff fe22 	bl	4036a0 <memmove>
  403a5c:	e76c      	b.n	403938 <_realloc_r+0x1c8>
  403a5e:	68b3      	ldr	r3, [r6, #8]
  403a60:	6083      	str	r3, [r0, #8]
  403a62:	68f3      	ldr	r3, [r6, #12]
  403a64:	60c3      	str	r3, [r0, #12]
  403a66:	2a24      	cmp	r2, #36	; 0x24
  403a68:	d02c      	beq.n	403ac4 <_realloc_r+0x354>
  403a6a:	f100 0310 	add.w	r3, r0, #16
  403a6e:	f106 0210 	add.w	r2, r6, #16
  403a72:	e75b      	b.n	40392c <_realloc_r+0x1bc>
  403a74:	f850 2c04 	ldr.w	r2, [r0, #-4]
  403a78:	f022 0203 	bic.w	r2, r2, #3
  403a7c:	4414      	add	r4, r2
  403a7e:	e717      	b.n	4038b0 <_realloc_r+0x140>
  403a80:	4631      	mov	r1, r6
  403a82:	4638      	mov	r0, r7
  403a84:	4674      	mov	r4, lr
  403a86:	463e      	mov	r6, r7
  403a88:	f7ff fe0a 	bl	4036a0 <memmove>
  403a8c:	46d0      	mov	r8, sl
  403a8e:	f8da 3004 	ldr.w	r3, [sl, #4]
  403a92:	e70d      	b.n	4038b0 <_realloc_r+0x140>
  403a94:	463a      	mov	r2, r7
  403a96:	e700      	b.n	40389a <_realloc_r+0x12a>
  403a98:	4631      	mov	r1, r6
  403a9a:	4638      	mov	r0, r7
  403a9c:	461c      	mov	r4, r3
  403a9e:	463e      	mov	r6, r7
  403aa0:	f7ff fdfe 	bl	4036a0 <memmove>
  403aa4:	46d0      	mov	r8, sl
  403aa6:	f8da 3004 	ldr.w	r3, [sl, #4]
  403aaa:	e701      	b.n	4038b0 <_realloc_r+0x140>
  403aac:	68b3      	ldr	r3, [r6, #8]
  403aae:	f8ca 3010 	str.w	r3, [sl, #16]
  403ab2:	68f3      	ldr	r3, [r6, #12]
  403ab4:	f8ca 3014 	str.w	r3, [sl, #20]
  403ab8:	2a24      	cmp	r2, #36	; 0x24
  403aba:	d018      	beq.n	403aee <_realloc_r+0x37e>
  403abc:	3610      	adds	r6, #16
  403abe:	f10a 0318 	add.w	r3, sl, #24
  403ac2:	e7a8      	b.n	403a16 <_realloc_r+0x2a6>
  403ac4:	6933      	ldr	r3, [r6, #16]
  403ac6:	6103      	str	r3, [r0, #16]
  403ac8:	6973      	ldr	r3, [r6, #20]
  403aca:	6143      	str	r3, [r0, #20]
  403acc:	f106 0218 	add.w	r2, r6, #24
  403ad0:	f100 0318 	add.w	r3, r0, #24
  403ad4:	e72a      	b.n	40392c <_realloc_r+0x1bc>
  403ad6:	68b1      	ldr	r1, [r6, #8]
  403ad8:	f8ca 1010 	str.w	r1, [sl, #16]
  403adc:	68f1      	ldr	r1, [r6, #12]
  403ade:	f8ca 1014 	str.w	r1, [sl, #20]
  403ae2:	2a24      	cmp	r2, #36	; 0x24
  403ae4:	d00f      	beq.n	403b06 <_realloc_r+0x396>
  403ae6:	3610      	adds	r6, #16
  403ae8:	f10a 0218 	add.w	r2, sl, #24
  403aec:	e6d5      	b.n	40389a <_realloc_r+0x12a>
  403aee:	6933      	ldr	r3, [r6, #16]
  403af0:	f8ca 3018 	str.w	r3, [sl, #24]
  403af4:	6973      	ldr	r3, [r6, #20]
  403af6:	f8ca 301c 	str.w	r3, [sl, #28]
  403afa:	3618      	adds	r6, #24
  403afc:	f10a 0320 	add.w	r3, sl, #32
  403b00:	e789      	b.n	403a16 <_realloc_r+0x2a6>
  403b02:	463b      	mov	r3, r7
  403b04:	e760      	b.n	4039c8 <_realloc_r+0x258>
  403b06:	6932      	ldr	r2, [r6, #16]
  403b08:	f8ca 2018 	str.w	r2, [sl, #24]
  403b0c:	6972      	ldr	r2, [r6, #20]
  403b0e:	f8ca 201c 	str.w	r2, [sl, #28]
  403b12:	3618      	adds	r6, #24
  403b14:	f10a 0220 	add.w	r2, sl, #32
  403b18:	e6bf      	b.n	40389a <_realloc_r+0x12a>
  403b1a:	4631      	mov	r1, r6
  403b1c:	4638      	mov	r0, r7
  403b1e:	f8cd c004 	str.w	ip, [sp, #4]
  403b22:	f7ff fdbd 	bl	4036a0 <memmove>
  403b26:	f8dd c004 	ldr.w	ip, [sp, #4]
  403b2a:	e753      	b.n	4039d4 <_realloc_r+0x264>
  403b2c:	68b3      	ldr	r3, [r6, #8]
  403b2e:	f8ca 3010 	str.w	r3, [sl, #16]
  403b32:	68f3      	ldr	r3, [r6, #12]
  403b34:	f8ca 3014 	str.w	r3, [sl, #20]
  403b38:	2a24      	cmp	r2, #36	; 0x24
  403b3a:	d003      	beq.n	403b44 <_realloc_r+0x3d4>
  403b3c:	3610      	adds	r6, #16
  403b3e:	f10a 0318 	add.w	r3, sl, #24
  403b42:	e741      	b.n	4039c8 <_realloc_r+0x258>
  403b44:	6933      	ldr	r3, [r6, #16]
  403b46:	f8ca 3018 	str.w	r3, [sl, #24]
  403b4a:	6973      	ldr	r3, [r6, #20]
  403b4c:	f8ca 301c 	str.w	r3, [sl, #28]
  403b50:	3618      	adds	r6, #24
  403b52:	f10a 0320 	add.w	r3, sl, #32
  403b56:	e737      	b.n	4039c8 <_realloc_r+0x258>
  403b58:	20000470 	.word	0x20000470

00403b5c <_sbrk_r>:
  403b5c:	b538      	push	{r3, r4, r5, lr}
  403b5e:	4c07      	ldr	r4, [pc, #28]	; (403b7c <_sbrk_r+0x20>)
  403b60:	2300      	movs	r3, #0
  403b62:	4605      	mov	r5, r0
  403b64:	4608      	mov	r0, r1
  403b66:	6023      	str	r3, [r4, #0]
  403b68:	f7fd f978 	bl	400e5c <_sbrk>
  403b6c:	1c43      	adds	r3, r0, #1
  403b6e:	d000      	beq.n	403b72 <_sbrk_r+0x16>
  403b70:	bd38      	pop	{r3, r4, r5, pc}
  403b72:	6823      	ldr	r3, [r4, #0]
  403b74:	2b00      	cmp	r3, #0
  403b76:	d0fb      	beq.n	403b70 <_sbrk_r+0x14>
  403b78:	602b      	str	r3, [r5, #0]
  403b7a:	bd38      	pop	{r3, r4, r5, pc}
  403b7c:	20013578 	.word	0x20013578

00403b80 <__sread>:
  403b80:	b510      	push	{r4, lr}
  403b82:	460c      	mov	r4, r1
  403b84:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  403b88:	f000 f9ea 	bl	403f60 <_read_r>
  403b8c:	2800      	cmp	r0, #0
  403b8e:	db03      	blt.n	403b98 <__sread+0x18>
  403b90:	6d23      	ldr	r3, [r4, #80]	; 0x50
  403b92:	4403      	add	r3, r0
  403b94:	6523      	str	r3, [r4, #80]	; 0x50
  403b96:	bd10      	pop	{r4, pc}
  403b98:	89a3      	ldrh	r3, [r4, #12]
  403b9a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
  403b9e:	81a3      	strh	r3, [r4, #12]
  403ba0:	bd10      	pop	{r4, pc}
  403ba2:	bf00      	nop

00403ba4 <__swrite>:
  403ba4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  403ba8:	4616      	mov	r6, r2
  403baa:	898a      	ldrh	r2, [r1, #12]
  403bac:	461d      	mov	r5, r3
  403bae:	05d3      	lsls	r3, r2, #23
  403bb0:	460c      	mov	r4, r1
  403bb2:	4607      	mov	r7, r0
  403bb4:	d506      	bpl.n	403bc4 <__swrite+0x20>
  403bb6:	2200      	movs	r2, #0
  403bb8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  403bbc:	2302      	movs	r3, #2
  403bbe:	f000 f9bb 	bl	403f38 <_lseek_r>
  403bc2:	89a2      	ldrh	r2, [r4, #12]
  403bc4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  403bc8:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
  403bcc:	81a2      	strh	r2, [r4, #12]
  403bce:	4638      	mov	r0, r7
  403bd0:	4632      	mov	r2, r6
  403bd2:	462b      	mov	r3, r5
  403bd4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  403bd8:	f000 b8ce 	b.w	403d78 <_write_r>

00403bdc <__sseek>:
  403bdc:	b510      	push	{r4, lr}
  403bde:	460c      	mov	r4, r1
  403be0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  403be4:	f000 f9a8 	bl	403f38 <_lseek_r>
  403be8:	89a3      	ldrh	r3, [r4, #12]
  403bea:	1c42      	adds	r2, r0, #1
  403bec:	bf0e      	itee	eq
  403bee:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
  403bf2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
  403bf6:	6520      	strne	r0, [r4, #80]	; 0x50
  403bf8:	81a3      	strh	r3, [r4, #12]
  403bfa:	bd10      	pop	{r4, pc}

00403bfc <__sclose>:
  403bfc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  403c00:	f000 b920 	b.w	403e44 <_close_r>

00403c04 <strlen>:
  403c04:	f020 0103 	bic.w	r1, r0, #3
  403c08:	f010 0003 	ands.w	r0, r0, #3
  403c0c:	f1c0 0000 	rsb	r0, r0, #0
  403c10:	f851 3b04 	ldr.w	r3, [r1], #4
  403c14:	f100 0c04 	add.w	ip, r0, #4
  403c18:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
  403c1c:	f06f 0200 	mvn.w	r2, #0
  403c20:	bf1c      	itt	ne
  403c22:	fa22 f20c 	lsrne.w	r2, r2, ip
  403c26:	4313      	orrne	r3, r2
  403c28:	f04f 0c01 	mov.w	ip, #1
  403c2c:	ea4c 2c0c 	orr.w	ip, ip, ip, lsl #8
  403c30:	ea4c 4c0c 	orr.w	ip, ip, ip, lsl #16
  403c34:	eba3 020c 	sub.w	r2, r3, ip
  403c38:	ea22 0203 	bic.w	r2, r2, r3
  403c3c:	ea12 12cc 	ands.w	r2, r2, ip, lsl #7
  403c40:	bf04      	itt	eq
  403c42:	f851 3b04 	ldreq.w	r3, [r1], #4
  403c46:	3004      	addeq	r0, #4
  403c48:	d0f4      	beq.n	403c34 <strlen+0x30>
  403c4a:	f1c2 0100 	rsb	r1, r2, #0
  403c4e:	ea02 0201 	and.w	r2, r2, r1
  403c52:	fab2 f282 	clz	r2, r2
  403c56:	f1c2 021f 	rsb	r2, r2, #31
  403c5a:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
  403c5e:	4770      	bx	lr

00403c60 <__swbuf_r>:
  403c60:	b570      	push	{r4, r5, r6, lr}
  403c62:	460d      	mov	r5, r1
  403c64:	4614      	mov	r4, r2
  403c66:	4606      	mov	r6, r0
  403c68:	b110      	cbz	r0, 403c70 <__swbuf_r+0x10>
  403c6a:	6b83      	ldr	r3, [r0, #56]	; 0x38
  403c6c:	2b00      	cmp	r3, #0
  403c6e:	d048      	beq.n	403d02 <__swbuf_r+0xa2>
  403c70:	89a2      	ldrh	r2, [r4, #12]
  403c72:	69a3      	ldr	r3, [r4, #24]
  403c74:	60a3      	str	r3, [r4, #8]
  403c76:	b291      	uxth	r1, r2
  403c78:	0708      	lsls	r0, r1, #28
  403c7a:	d538      	bpl.n	403cee <__swbuf_r+0x8e>
  403c7c:	6923      	ldr	r3, [r4, #16]
  403c7e:	2b00      	cmp	r3, #0
  403c80:	d035      	beq.n	403cee <__swbuf_r+0x8e>
  403c82:	0489      	lsls	r1, r1, #18
  403c84:	b2ed      	uxtb	r5, r5
  403c86:	d515      	bpl.n	403cb4 <__swbuf_r+0x54>
  403c88:	6822      	ldr	r2, [r4, #0]
  403c8a:	6961      	ldr	r1, [r4, #20]
  403c8c:	1ad3      	subs	r3, r2, r3
  403c8e:	428b      	cmp	r3, r1
  403c90:	da1c      	bge.n	403ccc <__swbuf_r+0x6c>
  403c92:	3301      	adds	r3, #1
  403c94:	68a1      	ldr	r1, [r4, #8]
  403c96:	1c50      	adds	r0, r2, #1
  403c98:	3901      	subs	r1, #1
  403c9a:	60a1      	str	r1, [r4, #8]
  403c9c:	6020      	str	r0, [r4, #0]
  403c9e:	7015      	strb	r5, [r2, #0]
  403ca0:	6962      	ldr	r2, [r4, #20]
  403ca2:	429a      	cmp	r2, r3
  403ca4:	d01a      	beq.n	403cdc <__swbuf_r+0x7c>
  403ca6:	89a3      	ldrh	r3, [r4, #12]
  403ca8:	07db      	lsls	r3, r3, #31
  403caa:	d501      	bpl.n	403cb0 <__swbuf_r+0x50>
  403cac:	2d0a      	cmp	r5, #10
  403cae:	d015      	beq.n	403cdc <__swbuf_r+0x7c>
  403cb0:	4628      	mov	r0, r5
  403cb2:	bd70      	pop	{r4, r5, r6, pc}
  403cb4:	6e61      	ldr	r1, [r4, #100]	; 0x64
  403cb6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
  403cba:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
  403cbe:	81a2      	strh	r2, [r4, #12]
  403cc0:	6822      	ldr	r2, [r4, #0]
  403cc2:	6661      	str	r1, [r4, #100]	; 0x64
  403cc4:	6961      	ldr	r1, [r4, #20]
  403cc6:	1ad3      	subs	r3, r2, r3
  403cc8:	428b      	cmp	r3, r1
  403cca:	dbe2      	blt.n	403c92 <__swbuf_r+0x32>
  403ccc:	4630      	mov	r0, r6
  403cce:	4621      	mov	r1, r4
  403cd0:	f7fe fcf4 	bl	4026bc <_fflush_r>
  403cd4:	b940      	cbnz	r0, 403ce8 <__swbuf_r+0x88>
  403cd6:	6822      	ldr	r2, [r4, #0]
  403cd8:	2301      	movs	r3, #1
  403cda:	e7db      	b.n	403c94 <__swbuf_r+0x34>
  403cdc:	4630      	mov	r0, r6
  403cde:	4621      	mov	r1, r4
  403ce0:	f7fe fcec 	bl	4026bc <_fflush_r>
  403ce4:	2800      	cmp	r0, #0
  403ce6:	d0e3      	beq.n	403cb0 <__swbuf_r+0x50>
  403ce8:	f04f 30ff 	mov.w	r0, #4294967295
  403cec:	bd70      	pop	{r4, r5, r6, pc}
  403cee:	4630      	mov	r0, r6
  403cf0:	4621      	mov	r1, r4
  403cf2:	f7fe fbc7 	bl	402484 <__swsetup_r>
  403cf6:	2800      	cmp	r0, #0
  403cf8:	d1f6      	bne.n	403ce8 <__swbuf_r+0x88>
  403cfa:	89a2      	ldrh	r2, [r4, #12]
  403cfc:	6923      	ldr	r3, [r4, #16]
  403cfe:	b291      	uxth	r1, r2
  403d00:	e7bf      	b.n	403c82 <__swbuf_r+0x22>
  403d02:	f7fe fd6f 	bl	4027e4 <__sinit>
  403d06:	e7b3      	b.n	403c70 <__swbuf_r+0x10>

00403d08 <_wcrtomb_r>:
  403d08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  403d0c:	4605      	mov	r5, r0
  403d0e:	b086      	sub	sp, #24
  403d10:	461e      	mov	r6, r3
  403d12:	460c      	mov	r4, r1
  403d14:	b1a1      	cbz	r1, 403d40 <_wcrtomb_r+0x38>
  403d16:	4b10      	ldr	r3, [pc, #64]	; (403d58 <_wcrtomb_r+0x50>)
  403d18:	4617      	mov	r7, r2
  403d1a:	f8d3 8000 	ldr.w	r8, [r3]
  403d1e:	f7ff f8c7 	bl	402eb0 <__locale_charset>
  403d22:	9600      	str	r6, [sp, #0]
  403d24:	4603      	mov	r3, r0
  403d26:	4621      	mov	r1, r4
  403d28:	463a      	mov	r2, r7
  403d2a:	4628      	mov	r0, r5
  403d2c:	47c0      	blx	r8
  403d2e:	1c43      	adds	r3, r0, #1
  403d30:	d103      	bne.n	403d3a <_wcrtomb_r+0x32>
  403d32:	2200      	movs	r2, #0
  403d34:	238a      	movs	r3, #138	; 0x8a
  403d36:	6032      	str	r2, [r6, #0]
  403d38:	602b      	str	r3, [r5, #0]
  403d3a:	b006      	add	sp, #24
  403d3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  403d40:	4b05      	ldr	r3, [pc, #20]	; (403d58 <_wcrtomb_r+0x50>)
  403d42:	681f      	ldr	r7, [r3, #0]
  403d44:	f7ff f8b4 	bl	402eb0 <__locale_charset>
  403d48:	9600      	str	r6, [sp, #0]
  403d4a:	4603      	mov	r3, r0
  403d4c:	4622      	mov	r2, r4
  403d4e:	4628      	mov	r0, r5
  403d50:	a903      	add	r1, sp, #12
  403d52:	47b8      	blx	r7
  403d54:	e7eb      	b.n	403d2e <_wcrtomb_r+0x26>
  403d56:	bf00      	nop
  403d58:	20000880 	.word	0x20000880

00403d5c <__ascii_wctomb>:
  403d5c:	b121      	cbz	r1, 403d68 <__ascii_wctomb+0xc>
  403d5e:	2aff      	cmp	r2, #255	; 0xff
  403d60:	d804      	bhi.n	403d6c <__ascii_wctomb+0x10>
  403d62:	700a      	strb	r2, [r1, #0]
  403d64:	2001      	movs	r0, #1
  403d66:	4770      	bx	lr
  403d68:	4608      	mov	r0, r1
  403d6a:	4770      	bx	lr
  403d6c:	238a      	movs	r3, #138	; 0x8a
  403d6e:	6003      	str	r3, [r0, #0]
  403d70:	f04f 30ff 	mov.w	r0, #4294967295
  403d74:	4770      	bx	lr
  403d76:	bf00      	nop

00403d78 <_write_r>:
  403d78:	b570      	push	{r4, r5, r6, lr}
  403d7a:	4c08      	ldr	r4, [pc, #32]	; (403d9c <_write_r+0x24>)
  403d7c:	4606      	mov	r6, r0
  403d7e:	2500      	movs	r5, #0
  403d80:	4608      	mov	r0, r1
  403d82:	4611      	mov	r1, r2
  403d84:	461a      	mov	r2, r3
  403d86:	6025      	str	r5, [r4, #0]
  403d88:	f7fc fa1e 	bl	4001c8 <_write>
  403d8c:	1c43      	adds	r3, r0, #1
  403d8e:	d000      	beq.n	403d92 <_write_r+0x1a>
  403d90:	bd70      	pop	{r4, r5, r6, pc}
  403d92:	6823      	ldr	r3, [r4, #0]
  403d94:	2b00      	cmp	r3, #0
  403d96:	d0fb      	beq.n	403d90 <_write_r+0x18>
  403d98:	6033      	str	r3, [r6, #0]
  403d9a:	bd70      	pop	{r4, r5, r6, pc}
  403d9c:	20013578 	.word	0x20013578

00403da0 <__register_exitproc>:
  403da0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  403da4:	4c25      	ldr	r4, [pc, #148]	; (403e3c <__register_exitproc+0x9c>)
  403da6:	6825      	ldr	r5, [r4, #0]
  403da8:	f8d5 4148 	ldr.w	r4, [r5, #328]	; 0x148
  403dac:	4606      	mov	r6, r0
  403dae:	4688      	mov	r8, r1
  403db0:	4692      	mov	sl, r2
  403db2:	4699      	mov	r9, r3
  403db4:	b3cc      	cbz	r4, 403e2a <__register_exitproc+0x8a>
  403db6:	6860      	ldr	r0, [r4, #4]
  403db8:	281f      	cmp	r0, #31
  403dba:	dc18      	bgt.n	403dee <__register_exitproc+0x4e>
  403dbc:	1c43      	adds	r3, r0, #1
  403dbe:	b17e      	cbz	r6, 403de0 <__register_exitproc+0x40>
  403dc0:	eb04 0580 	add.w	r5, r4, r0, lsl #2
  403dc4:	2101      	movs	r1, #1
  403dc6:	f8c5 a088 	str.w	sl, [r5, #136]	; 0x88
  403dca:	f8d4 7188 	ldr.w	r7, [r4, #392]	; 0x188
  403dce:	fa01 f200 	lsl.w	r2, r1, r0
  403dd2:	4317      	orrs	r7, r2
  403dd4:	2e02      	cmp	r6, #2
  403dd6:	f8c4 7188 	str.w	r7, [r4, #392]	; 0x188
  403dda:	f8c5 9108 	str.w	r9, [r5, #264]	; 0x108
  403dde:	d01e      	beq.n	403e1e <__register_exitproc+0x7e>
  403de0:	3002      	adds	r0, #2
  403de2:	6063      	str	r3, [r4, #4]
  403de4:	f844 8020 	str.w	r8, [r4, r0, lsl #2]
  403de8:	2000      	movs	r0, #0
  403dea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  403dee:	4b14      	ldr	r3, [pc, #80]	; (403e40 <__register_exitproc+0xa0>)
  403df0:	b303      	cbz	r3, 403e34 <__register_exitproc+0x94>
  403df2:	f44f 70c8 	mov.w	r0, #400	; 0x190
  403df6:	f7ff f8d5 	bl	402fa4 <malloc>
  403dfa:	4604      	mov	r4, r0
  403dfc:	b1d0      	cbz	r0, 403e34 <__register_exitproc+0x94>
  403dfe:	f8d5 3148 	ldr.w	r3, [r5, #328]	; 0x148
  403e02:	2700      	movs	r7, #0
  403e04:	e880 0088 	stmia.w	r0, {r3, r7}
  403e08:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
  403e0c:	4638      	mov	r0, r7
  403e0e:	2301      	movs	r3, #1
  403e10:	f8c4 7188 	str.w	r7, [r4, #392]	; 0x188
  403e14:	f8c4 718c 	str.w	r7, [r4, #396]	; 0x18c
  403e18:	2e00      	cmp	r6, #0
  403e1a:	d0e1      	beq.n	403de0 <__register_exitproc+0x40>
  403e1c:	e7d0      	b.n	403dc0 <__register_exitproc+0x20>
  403e1e:	f8d4 118c 	ldr.w	r1, [r4, #396]	; 0x18c
  403e22:	430a      	orrs	r2, r1
  403e24:	f8c4 218c 	str.w	r2, [r4, #396]	; 0x18c
  403e28:	e7da      	b.n	403de0 <__register_exitproc+0x40>
  403e2a:	f505 74a6 	add.w	r4, r5, #332	; 0x14c
  403e2e:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
  403e32:	e7c0      	b.n	403db6 <__register_exitproc+0x16>
  403e34:	f04f 30ff 	mov.w	r0, #4294967295
  403e38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  403e3c:	00404798 	.word	0x00404798
  403e40:	00402fa5 	.word	0x00402fa5

00403e44 <_close_r>:
  403e44:	b538      	push	{r3, r4, r5, lr}
  403e46:	4c07      	ldr	r4, [pc, #28]	; (403e64 <_close_r+0x20>)
  403e48:	2300      	movs	r3, #0
  403e4a:	4605      	mov	r5, r0
  403e4c:	4608      	mov	r0, r1
  403e4e:	6023      	str	r3, [r4, #0]
  403e50:	f7fd f81e 	bl	400e90 <_close>
  403e54:	1c43      	adds	r3, r0, #1
  403e56:	d000      	beq.n	403e5a <_close_r+0x16>
  403e58:	bd38      	pop	{r3, r4, r5, pc}
  403e5a:	6823      	ldr	r3, [r4, #0]
  403e5c:	2b00      	cmp	r3, #0
  403e5e:	d0fb      	beq.n	403e58 <_close_r+0x14>
  403e60:	602b      	str	r3, [r5, #0]
  403e62:	bd38      	pop	{r3, r4, r5, pc}
  403e64:	20013578 	.word	0x20013578

00403e68 <_fclose_r>:
  403e68:	2900      	cmp	r1, #0
  403e6a:	d03d      	beq.n	403ee8 <_fclose_r+0x80>
  403e6c:	b570      	push	{r4, r5, r6, lr}
  403e6e:	4605      	mov	r5, r0
  403e70:	460c      	mov	r4, r1
  403e72:	b108      	cbz	r0, 403e78 <_fclose_r+0x10>
  403e74:	6b83      	ldr	r3, [r0, #56]	; 0x38
  403e76:	b37b      	cbz	r3, 403ed8 <_fclose_r+0x70>
  403e78:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  403e7c:	b90b      	cbnz	r3, 403e82 <_fclose_r+0x1a>
  403e7e:	2000      	movs	r0, #0
  403e80:	bd70      	pop	{r4, r5, r6, pc}
  403e82:	4628      	mov	r0, r5
  403e84:	4621      	mov	r1, r4
  403e86:	f7fe fb6f 	bl	402568 <__sflush_r>
  403e8a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  403e8c:	4606      	mov	r6, r0
  403e8e:	b133      	cbz	r3, 403e9e <_fclose_r+0x36>
  403e90:	4628      	mov	r0, r5
  403e92:	69e1      	ldr	r1, [r4, #28]
  403e94:	4798      	blx	r3
  403e96:	2800      	cmp	r0, #0
  403e98:	bfb8      	it	lt
  403e9a:	f04f 36ff 	movlt.w	r6, #4294967295
  403e9e:	89a3      	ldrh	r3, [r4, #12]
  403ea0:	061b      	lsls	r3, r3, #24
  403ea2:	d41c      	bmi.n	403ede <_fclose_r+0x76>
  403ea4:	6b21      	ldr	r1, [r4, #48]	; 0x30
  403ea6:	b141      	cbz	r1, 403eba <_fclose_r+0x52>
  403ea8:	f104 0340 	add.w	r3, r4, #64	; 0x40
  403eac:	4299      	cmp	r1, r3
  403eae:	d002      	beq.n	403eb6 <_fclose_r+0x4e>
  403eb0:	4628      	mov	r0, r5
  403eb2:	f7fe fd6f 	bl	402994 <_free_r>
  403eb6:	2300      	movs	r3, #0
  403eb8:	6323      	str	r3, [r4, #48]	; 0x30
  403eba:	6c61      	ldr	r1, [r4, #68]	; 0x44
  403ebc:	b121      	cbz	r1, 403ec8 <_fclose_r+0x60>
  403ebe:	4628      	mov	r0, r5
  403ec0:	f7fe fd68 	bl	402994 <_free_r>
  403ec4:	2300      	movs	r3, #0
  403ec6:	6463      	str	r3, [r4, #68]	; 0x44
  403ec8:	f7fe fc92 	bl	4027f0 <__sfp_lock_acquire>
  403ecc:	2300      	movs	r3, #0
  403ece:	81a3      	strh	r3, [r4, #12]
  403ed0:	f7fe fc90 	bl	4027f4 <__sfp_lock_release>
  403ed4:	4630      	mov	r0, r6
  403ed6:	bd70      	pop	{r4, r5, r6, pc}
  403ed8:	f7fe fc84 	bl	4027e4 <__sinit>
  403edc:	e7cc      	b.n	403e78 <_fclose_r+0x10>
  403ede:	4628      	mov	r0, r5
  403ee0:	6921      	ldr	r1, [r4, #16]
  403ee2:	f7fe fd57 	bl	402994 <_free_r>
  403ee6:	e7dd      	b.n	403ea4 <_fclose_r+0x3c>
  403ee8:	2000      	movs	r0, #0
  403eea:	4770      	bx	lr

00403eec <_fstat_r>:
  403eec:	b538      	push	{r3, r4, r5, lr}
  403eee:	4c08      	ldr	r4, [pc, #32]	; (403f10 <_fstat_r+0x24>)
  403ef0:	2300      	movs	r3, #0
  403ef2:	4605      	mov	r5, r0
  403ef4:	4608      	mov	r0, r1
  403ef6:	4611      	mov	r1, r2
  403ef8:	6023      	str	r3, [r4, #0]
  403efa:	f7fc ffcd 	bl	400e98 <_fstat>
  403efe:	1c43      	adds	r3, r0, #1
  403f00:	d000      	beq.n	403f04 <_fstat_r+0x18>
  403f02:	bd38      	pop	{r3, r4, r5, pc}
  403f04:	6823      	ldr	r3, [r4, #0]
  403f06:	2b00      	cmp	r3, #0
  403f08:	d0fb      	beq.n	403f02 <_fstat_r+0x16>
  403f0a:	602b      	str	r3, [r5, #0]
  403f0c:	bd38      	pop	{r3, r4, r5, pc}
  403f0e:	bf00      	nop
  403f10:	20013578 	.word	0x20013578

00403f14 <_isatty_r>:
  403f14:	b538      	push	{r3, r4, r5, lr}
  403f16:	4c07      	ldr	r4, [pc, #28]	; (403f34 <_isatty_r+0x20>)
  403f18:	2300      	movs	r3, #0
  403f1a:	4605      	mov	r5, r0
  403f1c:	4608      	mov	r0, r1
  403f1e:	6023      	str	r3, [r4, #0]
  403f20:	f7fc ffc0 	bl	400ea4 <_isatty>
  403f24:	1c43      	adds	r3, r0, #1
  403f26:	d000      	beq.n	403f2a <_isatty_r+0x16>
  403f28:	bd38      	pop	{r3, r4, r5, pc}
  403f2a:	6823      	ldr	r3, [r4, #0]
  403f2c:	2b00      	cmp	r3, #0
  403f2e:	d0fb      	beq.n	403f28 <_isatty_r+0x14>
  403f30:	602b      	str	r3, [r5, #0]
  403f32:	bd38      	pop	{r3, r4, r5, pc}
  403f34:	20013578 	.word	0x20013578

00403f38 <_lseek_r>:
  403f38:	b570      	push	{r4, r5, r6, lr}
  403f3a:	4c08      	ldr	r4, [pc, #32]	; (403f5c <_lseek_r+0x24>)
  403f3c:	4606      	mov	r6, r0
  403f3e:	2500      	movs	r5, #0
  403f40:	4608      	mov	r0, r1
  403f42:	4611      	mov	r1, r2
  403f44:	461a      	mov	r2, r3
  403f46:	6025      	str	r5, [r4, #0]
  403f48:	f7fc ffae 	bl	400ea8 <_lseek>
  403f4c:	1c43      	adds	r3, r0, #1
  403f4e:	d000      	beq.n	403f52 <_lseek_r+0x1a>
  403f50:	bd70      	pop	{r4, r5, r6, pc}
  403f52:	6823      	ldr	r3, [r4, #0]
  403f54:	2b00      	cmp	r3, #0
  403f56:	d0fb      	beq.n	403f50 <_lseek_r+0x18>
  403f58:	6033      	str	r3, [r6, #0]
  403f5a:	bd70      	pop	{r4, r5, r6, pc}
  403f5c:	20013578 	.word	0x20013578

00403f60 <_read_r>:
  403f60:	b570      	push	{r4, r5, r6, lr}
  403f62:	4c08      	ldr	r4, [pc, #32]	; (403f84 <_read_r+0x24>)
  403f64:	4606      	mov	r6, r0
  403f66:	2500      	movs	r5, #0
  403f68:	4608      	mov	r0, r1
  403f6a:	4611      	mov	r1, r2
  403f6c:	461a      	mov	r2, r3
  403f6e:	6025      	str	r5, [r4, #0]
  403f70:	f7fc f90c 	bl	40018c <_read>
  403f74:	1c43      	adds	r3, r0, #1
  403f76:	d000      	beq.n	403f7a <_read_r+0x1a>
  403f78:	bd70      	pop	{r4, r5, r6, pc}
  403f7a:	6823      	ldr	r3, [r4, #0]
  403f7c:	2b00      	cmp	r3, #0
  403f7e:	d0fb      	beq.n	403f78 <_read_r+0x18>
  403f80:	6033      	str	r3, [r6, #0]
  403f82:	bd70      	pop	{r4, r5, r6, pc}
  403f84:	20013578 	.word	0x20013578

00403f88 <__aeabi_uldivmod>:
  403f88:	b953      	cbnz	r3, 403fa0 <__aeabi_uldivmod+0x18>
  403f8a:	b94a      	cbnz	r2, 403fa0 <__aeabi_uldivmod+0x18>
  403f8c:	2900      	cmp	r1, #0
  403f8e:	bf08      	it	eq
  403f90:	2800      	cmpeq	r0, #0
  403f92:	bf1c      	itt	ne
  403f94:	f04f 31ff 	movne.w	r1, #4294967295
  403f98:	f04f 30ff 	movne.w	r0, #4294967295
  403f9c:	f000 b83c 	b.w	404018 <__aeabi_idiv0>
  403fa0:	b082      	sub	sp, #8
  403fa2:	46ec      	mov	ip, sp
  403fa4:	e92d 5000 	stmdb	sp!, {ip, lr}
  403fa8:	f000 f81e 	bl	403fe8 <__gnu_uldivmod_helper>
  403fac:	f8dd e004 	ldr.w	lr, [sp, #4]
  403fb0:	b002      	add	sp, #8
  403fb2:	bc0c      	pop	{r2, r3}
  403fb4:	4770      	bx	lr
  403fb6:	bf00      	nop

00403fb8 <__gnu_ldivmod_helper>:
  403fb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  403fbc:	9c06      	ldr	r4, [sp, #24]
  403fbe:	4615      	mov	r5, r2
  403fc0:	4606      	mov	r6, r0
  403fc2:	460f      	mov	r7, r1
  403fc4:	4698      	mov	r8, r3
  403fc6:	f000 f829 	bl	40401c <__divdi3>
  403fca:	fb05 f301 	mul.w	r3, r5, r1
  403fce:	fb00 3808 	mla	r8, r0, r8, r3
  403fd2:	fba5 2300 	umull	r2, r3, r5, r0
  403fd6:	1ab2      	subs	r2, r6, r2
  403fd8:	4443      	add	r3, r8
  403fda:	eb67 0303 	sbc.w	r3, r7, r3
  403fde:	e9c4 2300 	strd	r2, r3, [r4]
  403fe2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  403fe6:	bf00      	nop

00403fe8 <__gnu_uldivmod_helper>:
  403fe8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  403fec:	9c06      	ldr	r4, [sp, #24]
  403fee:	4690      	mov	r8, r2
  403ff0:	4606      	mov	r6, r0
  403ff2:	460f      	mov	r7, r1
  403ff4:	461d      	mov	r5, r3
  403ff6:	f000 f95f 	bl	4042b8 <__udivdi3>
  403ffa:	fb00 f505 	mul.w	r5, r0, r5
  403ffe:	fba0 2308 	umull	r2, r3, r0, r8
  404002:	fb08 5501 	mla	r5, r8, r1, r5
  404006:	1ab2      	subs	r2, r6, r2
  404008:	442b      	add	r3, r5
  40400a:	eb67 0303 	sbc.w	r3, r7, r3
  40400e:	e9c4 2300 	strd	r2, r3, [r4]
  404012:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  404016:	bf00      	nop

00404018 <__aeabi_idiv0>:
  404018:	4770      	bx	lr
  40401a:	bf00      	nop

0040401c <__divdi3>:
  40401c:	2900      	cmp	r1, #0
  40401e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  404022:	f2c0 80a6 	blt.w	404172 <__divdi3+0x156>
  404026:	2600      	movs	r6, #0
  404028:	2b00      	cmp	r3, #0
  40402a:	f2c0 809c 	blt.w	404166 <__divdi3+0x14a>
  40402e:	4688      	mov	r8, r1
  404030:	4694      	mov	ip, r2
  404032:	469e      	mov	lr, r3
  404034:	4615      	mov	r5, r2
  404036:	4604      	mov	r4, r0
  404038:	460f      	mov	r7, r1
  40403a:	2b00      	cmp	r3, #0
  40403c:	d13d      	bne.n	4040ba <__divdi3+0x9e>
  40403e:	428a      	cmp	r2, r1
  404040:	d959      	bls.n	4040f6 <__divdi3+0xda>
  404042:	fab2 f382 	clz	r3, r2
  404046:	b13b      	cbz	r3, 404058 <__divdi3+0x3c>
  404048:	f1c3 0220 	rsb	r2, r3, #32
  40404c:	409f      	lsls	r7, r3
  40404e:	fa20 f202 	lsr.w	r2, r0, r2
  404052:	409d      	lsls	r5, r3
  404054:	4317      	orrs	r7, r2
  404056:	409c      	lsls	r4, r3
  404058:	0c29      	lsrs	r1, r5, #16
  40405a:	0c22      	lsrs	r2, r4, #16
  40405c:	fbb7 fef1 	udiv	lr, r7, r1
  404060:	b2a8      	uxth	r0, r5
  404062:	fb01 771e 	mls	r7, r1, lr, r7
  404066:	ea42 4707 	orr.w	r7, r2, r7, lsl #16
  40406a:	fb00 f30e 	mul.w	r3, r0, lr
  40406e:	42bb      	cmp	r3, r7
  404070:	d90a      	bls.n	404088 <__divdi3+0x6c>
  404072:	197f      	adds	r7, r7, r5
  404074:	f10e 32ff 	add.w	r2, lr, #4294967295
  404078:	f080 8105 	bcs.w	404286 <__divdi3+0x26a>
  40407c:	42bb      	cmp	r3, r7
  40407e:	f240 8102 	bls.w	404286 <__divdi3+0x26a>
  404082:	f1ae 0e02 	sub.w	lr, lr, #2
  404086:	442f      	add	r7, r5
  404088:	1aff      	subs	r7, r7, r3
  40408a:	b2a4      	uxth	r4, r4
  40408c:	fbb7 f3f1 	udiv	r3, r7, r1
  404090:	fb01 7713 	mls	r7, r1, r3, r7
  404094:	ea44 4707 	orr.w	r7, r4, r7, lsl #16
  404098:	fb00 f003 	mul.w	r0, r0, r3
  40409c:	42b8      	cmp	r0, r7
  40409e:	d908      	bls.n	4040b2 <__divdi3+0x96>
  4040a0:	197f      	adds	r7, r7, r5
  4040a2:	f103 32ff 	add.w	r2, r3, #4294967295
  4040a6:	f080 80f0 	bcs.w	40428a <__divdi3+0x26e>
  4040aa:	42b8      	cmp	r0, r7
  4040ac:	f240 80ed 	bls.w	40428a <__divdi3+0x26e>
  4040b0:	3b02      	subs	r3, #2
  4040b2:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
  4040b6:	2200      	movs	r2, #0
  4040b8:	e003      	b.n	4040c2 <__divdi3+0xa6>
  4040ba:	428b      	cmp	r3, r1
  4040bc:	d90f      	bls.n	4040de <__divdi3+0xc2>
  4040be:	2200      	movs	r2, #0
  4040c0:	4613      	mov	r3, r2
  4040c2:	1c34      	adds	r4, r6, #0
  4040c4:	bf18      	it	ne
  4040c6:	2401      	movne	r4, #1
  4040c8:	4260      	negs	r0, r4
  4040ca:	f04f 0500 	mov.w	r5, #0
  4040ce:	eb65 0145 	sbc.w	r1, r5, r5, lsl #1
  4040d2:	4058      	eors	r0, r3
  4040d4:	4051      	eors	r1, r2
  4040d6:	1900      	adds	r0, r0, r4
  4040d8:	4169      	adcs	r1, r5
  4040da:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  4040de:	fab3 f283 	clz	r2, r3
  4040e2:	2a00      	cmp	r2, #0
  4040e4:	f040 8086 	bne.w	4041f4 <__divdi3+0x1d8>
  4040e8:	428b      	cmp	r3, r1
  4040ea:	d302      	bcc.n	4040f2 <__divdi3+0xd6>
  4040ec:	4584      	cmp	ip, r0
  4040ee:	f200 80db 	bhi.w	4042a8 <__divdi3+0x28c>
  4040f2:	2301      	movs	r3, #1
  4040f4:	e7e5      	b.n	4040c2 <__divdi3+0xa6>
  4040f6:	b912      	cbnz	r2, 4040fe <__divdi3+0xe2>
  4040f8:	2301      	movs	r3, #1
  4040fa:	fbb3 f5f2 	udiv	r5, r3, r2
  4040fe:	fab5 f085 	clz	r0, r5
  404102:	2800      	cmp	r0, #0
  404104:	d13b      	bne.n	40417e <__divdi3+0x162>
  404106:	1b78      	subs	r0, r7, r5
  404108:	ea4f 4e15 	mov.w	lr, r5, lsr #16
  40410c:	fa1f fc85 	uxth.w	ip, r5
  404110:	2201      	movs	r2, #1
  404112:	fbb0 f8fe 	udiv	r8, r0, lr
  404116:	0c21      	lsrs	r1, r4, #16
  404118:	fb0e 0718 	mls	r7, lr, r8, r0
  40411c:	ea41 4707 	orr.w	r7, r1, r7, lsl #16
  404120:	fb0c f308 	mul.w	r3, ip, r8
  404124:	42bb      	cmp	r3, r7
  404126:	d907      	bls.n	404138 <__divdi3+0x11c>
  404128:	197f      	adds	r7, r7, r5
  40412a:	f108 31ff 	add.w	r1, r8, #4294967295
  40412e:	d202      	bcs.n	404136 <__divdi3+0x11a>
  404130:	42bb      	cmp	r3, r7
  404132:	f200 80bd 	bhi.w	4042b0 <__divdi3+0x294>
  404136:	4688      	mov	r8, r1
  404138:	1aff      	subs	r7, r7, r3
  40413a:	b2a4      	uxth	r4, r4
  40413c:	fbb7 f3fe 	udiv	r3, r7, lr
  404140:	fb0e 7713 	mls	r7, lr, r3, r7
  404144:	ea44 4707 	orr.w	r7, r4, r7, lsl #16
  404148:	fb0c fc03 	mul.w	ip, ip, r3
  40414c:	45bc      	cmp	ip, r7
  40414e:	d907      	bls.n	404160 <__divdi3+0x144>
  404150:	197f      	adds	r7, r7, r5
  404152:	f103 31ff 	add.w	r1, r3, #4294967295
  404156:	d202      	bcs.n	40415e <__divdi3+0x142>
  404158:	45bc      	cmp	ip, r7
  40415a:	f200 80a7 	bhi.w	4042ac <__divdi3+0x290>
  40415e:	460b      	mov	r3, r1
  404160:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
  404164:	e7ad      	b.n	4040c2 <__divdi3+0xa6>
  404166:	4252      	negs	r2, r2
  404168:	ea6f 0606 	mvn.w	r6, r6
  40416c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
  404170:	e75d      	b.n	40402e <__divdi3+0x12>
  404172:	4240      	negs	r0, r0
  404174:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  404178:	f04f 36ff 	mov.w	r6, #4294967295
  40417c:	e754      	b.n	404028 <__divdi3+0xc>
  40417e:	f1c0 0220 	rsb	r2, r0, #32
  404182:	fa24 f102 	lsr.w	r1, r4, r2
  404186:	fa07 f300 	lsl.w	r3, r7, r0
  40418a:	4085      	lsls	r5, r0
  40418c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
  404190:	40d7      	lsrs	r7, r2
  404192:	4319      	orrs	r1, r3
  404194:	fbb7 f2fe 	udiv	r2, r7, lr
  404198:	0c0b      	lsrs	r3, r1, #16
  40419a:	fb0e 7712 	mls	r7, lr, r2, r7
  40419e:	fa1f fc85 	uxth.w	ip, r5
  4041a2:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
  4041a6:	fb0c f702 	mul.w	r7, ip, r2
  4041aa:	429f      	cmp	r7, r3
  4041ac:	fa04 f400 	lsl.w	r4, r4, r0
  4041b0:	d907      	bls.n	4041c2 <__divdi3+0x1a6>
  4041b2:	195b      	adds	r3, r3, r5
  4041b4:	f102 30ff 	add.w	r0, r2, #4294967295
  4041b8:	d274      	bcs.n	4042a4 <__divdi3+0x288>
  4041ba:	429f      	cmp	r7, r3
  4041bc:	d972      	bls.n	4042a4 <__divdi3+0x288>
  4041be:	3a02      	subs	r2, #2
  4041c0:	442b      	add	r3, r5
  4041c2:	1bdf      	subs	r7, r3, r7
  4041c4:	b289      	uxth	r1, r1
  4041c6:	fbb7 f8fe 	udiv	r8, r7, lr
  4041ca:	fb0e 7318 	mls	r3, lr, r8, r7
  4041ce:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
  4041d2:	fb0c f708 	mul.w	r7, ip, r8
  4041d6:	429f      	cmp	r7, r3
  4041d8:	d908      	bls.n	4041ec <__divdi3+0x1d0>
  4041da:	195b      	adds	r3, r3, r5
  4041dc:	f108 31ff 	add.w	r1, r8, #4294967295
  4041e0:	d25c      	bcs.n	40429c <__divdi3+0x280>
  4041e2:	429f      	cmp	r7, r3
  4041e4:	d95a      	bls.n	40429c <__divdi3+0x280>
  4041e6:	f1a8 0802 	sub.w	r8, r8, #2
  4041ea:	442b      	add	r3, r5
  4041ec:	1bd8      	subs	r0, r3, r7
  4041ee:	ea48 4202 	orr.w	r2, r8, r2, lsl #16
  4041f2:	e78e      	b.n	404112 <__divdi3+0xf6>
  4041f4:	f1c2 0320 	rsb	r3, r2, #32
  4041f8:	fa2c f103 	lsr.w	r1, ip, r3
  4041fc:	fa0e fe02 	lsl.w	lr, lr, r2
  404200:	fa20 f703 	lsr.w	r7, r0, r3
  404204:	ea41 0e0e 	orr.w	lr, r1, lr
  404208:	fa08 f002 	lsl.w	r0, r8, r2
  40420c:	fa28 f103 	lsr.w	r1, r8, r3
  404210:	ea4f 451e 	mov.w	r5, lr, lsr #16
  404214:	4338      	orrs	r0, r7
  404216:	fbb1 f8f5 	udiv	r8, r1, r5
  40421a:	0c03      	lsrs	r3, r0, #16
  40421c:	fb05 1118 	mls	r1, r5, r8, r1
  404220:	fa1f f78e 	uxth.w	r7, lr
  404224:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
  404228:	fb07 f308 	mul.w	r3, r7, r8
  40422c:	428b      	cmp	r3, r1
  40422e:	fa0c fc02 	lsl.w	ip, ip, r2
  404232:	d909      	bls.n	404248 <__divdi3+0x22c>
  404234:	eb11 010e 	adds.w	r1, r1, lr
  404238:	f108 39ff 	add.w	r9, r8, #4294967295
  40423c:	d230      	bcs.n	4042a0 <__divdi3+0x284>
  40423e:	428b      	cmp	r3, r1
  404240:	d92e      	bls.n	4042a0 <__divdi3+0x284>
  404242:	f1a8 0802 	sub.w	r8, r8, #2
  404246:	4471      	add	r1, lr
  404248:	1ac9      	subs	r1, r1, r3
  40424a:	b280      	uxth	r0, r0
  40424c:	fbb1 f3f5 	udiv	r3, r1, r5
  404250:	fb05 1113 	mls	r1, r5, r3, r1
  404254:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
  404258:	fb07 f703 	mul.w	r7, r7, r3
  40425c:	428f      	cmp	r7, r1
  40425e:	d908      	bls.n	404272 <__divdi3+0x256>
  404260:	eb11 010e 	adds.w	r1, r1, lr
  404264:	f103 30ff 	add.w	r0, r3, #4294967295
  404268:	d216      	bcs.n	404298 <__divdi3+0x27c>
  40426a:	428f      	cmp	r7, r1
  40426c:	d914      	bls.n	404298 <__divdi3+0x27c>
  40426e:	3b02      	subs	r3, #2
  404270:	4471      	add	r1, lr
  404272:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
  404276:	1bc9      	subs	r1, r1, r7
  404278:	fba3 890c 	umull	r8, r9, r3, ip
  40427c:	4549      	cmp	r1, r9
  40427e:	d309      	bcc.n	404294 <__divdi3+0x278>
  404280:	d005      	beq.n	40428e <__divdi3+0x272>
  404282:	2200      	movs	r2, #0
  404284:	e71d      	b.n	4040c2 <__divdi3+0xa6>
  404286:	4696      	mov	lr, r2
  404288:	e6fe      	b.n	404088 <__divdi3+0x6c>
  40428a:	4613      	mov	r3, r2
  40428c:	e711      	b.n	4040b2 <__divdi3+0x96>
  40428e:	4094      	lsls	r4, r2
  404290:	4544      	cmp	r4, r8
  404292:	d2f6      	bcs.n	404282 <__divdi3+0x266>
  404294:	3b01      	subs	r3, #1
  404296:	e7f4      	b.n	404282 <__divdi3+0x266>
  404298:	4603      	mov	r3, r0
  40429a:	e7ea      	b.n	404272 <__divdi3+0x256>
  40429c:	4688      	mov	r8, r1
  40429e:	e7a5      	b.n	4041ec <__divdi3+0x1d0>
  4042a0:	46c8      	mov	r8, r9
  4042a2:	e7d1      	b.n	404248 <__divdi3+0x22c>
  4042a4:	4602      	mov	r2, r0
  4042a6:	e78c      	b.n	4041c2 <__divdi3+0x1a6>
  4042a8:	4613      	mov	r3, r2
  4042aa:	e70a      	b.n	4040c2 <__divdi3+0xa6>
  4042ac:	3b02      	subs	r3, #2
  4042ae:	e757      	b.n	404160 <__divdi3+0x144>
  4042b0:	f1a8 0802 	sub.w	r8, r8, #2
  4042b4:	442f      	add	r7, r5
  4042b6:	e73f      	b.n	404138 <__divdi3+0x11c>

004042b8 <__udivdi3>:
  4042b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4042bc:	2b00      	cmp	r3, #0
  4042be:	d144      	bne.n	40434a <__udivdi3+0x92>
  4042c0:	428a      	cmp	r2, r1
  4042c2:	4615      	mov	r5, r2
  4042c4:	4604      	mov	r4, r0
  4042c6:	d94f      	bls.n	404368 <__udivdi3+0xb0>
  4042c8:	fab2 f782 	clz	r7, r2
  4042cc:	460e      	mov	r6, r1
  4042ce:	b14f      	cbz	r7, 4042e4 <__udivdi3+0x2c>
  4042d0:	f1c7 0320 	rsb	r3, r7, #32
  4042d4:	40b9      	lsls	r1, r7
  4042d6:	fa20 f603 	lsr.w	r6, r0, r3
  4042da:	fa02 f507 	lsl.w	r5, r2, r7
  4042de:	430e      	orrs	r6, r1
  4042e0:	fa00 f407 	lsl.w	r4, r0, r7
  4042e4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
  4042e8:	0c23      	lsrs	r3, r4, #16
  4042ea:	fbb6 f0fe 	udiv	r0, r6, lr
  4042ee:	b2af      	uxth	r7, r5
  4042f0:	fb0e 6110 	mls	r1, lr, r0, r6
  4042f4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
  4042f8:	fb07 f100 	mul.w	r1, r7, r0
  4042fc:	4299      	cmp	r1, r3
  4042fe:	d909      	bls.n	404314 <__udivdi3+0x5c>
  404300:	195b      	adds	r3, r3, r5
  404302:	f100 32ff 	add.w	r2, r0, #4294967295
  404306:	f080 80ec 	bcs.w	4044e2 <__udivdi3+0x22a>
  40430a:	4299      	cmp	r1, r3
  40430c:	f240 80e9 	bls.w	4044e2 <__udivdi3+0x22a>
  404310:	3802      	subs	r0, #2
  404312:	442b      	add	r3, r5
  404314:	1a5a      	subs	r2, r3, r1
  404316:	b2a4      	uxth	r4, r4
  404318:	fbb2 f3fe 	udiv	r3, r2, lr
  40431c:	fb0e 2213 	mls	r2, lr, r3, r2
  404320:	ea44 4202 	orr.w	r2, r4, r2, lsl #16
  404324:	fb07 f703 	mul.w	r7, r7, r3
  404328:	4297      	cmp	r7, r2
  40432a:	d908      	bls.n	40433e <__udivdi3+0x86>
  40432c:	1952      	adds	r2, r2, r5
  40432e:	f103 31ff 	add.w	r1, r3, #4294967295
  404332:	f080 80d8 	bcs.w	4044e6 <__udivdi3+0x22e>
  404336:	4297      	cmp	r7, r2
  404338:	f240 80d5 	bls.w	4044e6 <__udivdi3+0x22e>
  40433c:	3b02      	subs	r3, #2
  40433e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
  404342:	2600      	movs	r6, #0
  404344:	4631      	mov	r1, r6
  404346:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40434a:	428b      	cmp	r3, r1
  40434c:	d847      	bhi.n	4043de <__udivdi3+0x126>
  40434e:	fab3 f683 	clz	r6, r3
  404352:	2e00      	cmp	r6, #0
  404354:	d148      	bne.n	4043e8 <__udivdi3+0x130>
  404356:	428b      	cmp	r3, r1
  404358:	d302      	bcc.n	404360 <__udivdi3+0xa8>
  40435a:	4282      	cmp	r2, r0
  40435c:	f200 80cd 	bhi.w	4044fa <__udivdi3+0x242>
  404360:	2001      	movs	r0, #1
  404362:	4631      	mov	r1, r6
  404364:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  404368:	b912      	cbnz	r2, 404370 <__udivdi3+0xb8>
  40436a:	2501      	movs	r5, #1
  40436c:	fbb5 f5f2 	udiv	r5, r5, r2
  404370:	fab5 f885 	clz	r8, r5
  404374:	f1b8 0f00 	cmp.w	r8, #0
  404378:	d177      	bne.n	40446a <__udivdi3+0x1b2>
  40437a:	1b4a      	subs	r2, r1, r5
  40437c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
  404380:	b2af      	uxth	r7, r5
  404382:	2601      	movs	r6, #1
  404384:	fbb2 f0fe 	udiv	r0, r2, lr
  404388:	0c23      	lsrs	r3, r4, #16
  40438a:	fb0e 2110 	mls	r1, lr, r0, r2
  40438e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
  404392:	fb07 f300 	mul.w	r3, r7, r0
  404396:	428b      	cmp	r3, r1
  404398:	d907      	bls.n	4043aa <__udivdi3+0xf2>
  40439a:	1949      	adds	r1, r1, r5
  40439c:	f100 32ff 	add.w	r2, r0, #4294967295
  4043a0:	d202      	bcs.n	4043a8 <__udivdi3+0xf0>
  4043a2:	428b      	cmp	r3, r1
  4043a4:	f200 80ba 	bhi.w	40451c <__udivdi3+0x264>
  4043a8:	4610      	mov	r0, r2
  4043aa:	1ac9      	subs	r1, r1, r3
  4043ac:	b2a4      	uxth	r4, r4
  4043ae:	fbb1 f3fe 	udiv	r3, r1, lr
  4043b2:	fb0e 1113 	mls	r1, lr, r3, r1
  4043b6:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
  4043ba:	fb07 f703 	mul.w	r7, r7, r3
  4043be:	42a7      	cmp	r7, r4
  4043c0:	d908      	bls.n	4043d4 <__udivdi3+0x11c>
  4043c2:	1964      	adds	r4, r4, r5
  4043c4:	f103 32ff 	add.w	r2, r3, #4294967295
  4043c8:	f080 808f 	bcs.w	4044ea <__udivdi3+0x232>
  4043cc:	42a7      	cmp	r7, r4
  4043ce:	f240 808c 	bls.w	4044ea <__udivdi3+0x232>
  4043d2:	3b02      	subs	r3, #2
  4043d4:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
  4043d8:	4631      	mov	r1, r6
  4043da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4043de:	2600      	movs	r6, #0
  4043e0:	4630      	mov	r0, r6
  4043e2:	4631      	mov	r1, r6
  4043e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4043e8:	f1c6 0420 	rsb	r4, r6, #32
  4043ec:	fa22 f504 	lsr.w	r5, r2, r4
  4043f0:	40b3      	lsls	r3, r6
  4043f2:	432b      	orrs	r3, r5
  4043f4:	fa20 fc04 	lsr.w	ip, r0, r4
  4043f8:	fa01 f706 	lsl.w	r7, r1, r6
  4043fc:	fa21 f504 	lsr.w	r5, r1, r4
  404400:	ea4f 4e13 	mov.w	lr, r3, lsr #16
  404404:	ea4c 0707 	orr.w	r7, ip, r7
  404408:	fbb5 f8fe 	udiv	r8, r5, lr
  40440c:	0c39      	lsrs	r1, r7, #16
  40440e:	fb0e 5518 	mls	r5, lr, r8, r5
  404412:	fa1f fc83 	uxth.w	ip, r3
  404416:	ea41 4505 	orr.w	r5, r1, r5, lsl #16
  40441a:	fb0c f108 	mul.w	r1, ip, r8
  40441e:	42a9      	cmp	r1, r5
  404420:	fa02 f206 	lsl.w	r2, r2, r6
  404424:	d904      	bls.n	404430 <__udivdi3+0x178>
  404426:	18ed      	adds	r5, r5, r3
  404428:	f108 34ff 	add.w	r4, r8, #4294967295
  40442c:	d367      	bcc.n	4044fe <__udivdi3+0x246>
  40442e:	46a0      	mov	r8, r4
  404430:	1a6d      	subs	r5, r5, r1
  404432:	b2bf      	uxth	r7, r7
  404434:	fbb5 f4fe 	udiv	r4, r5, lr
  404438:	fb0e 5514 	mls	r5, lr, r4, r5
  40443c:	ea47 4105 	orr.w	r1, r7, r5, lsl #16
  404440:	fb0c fc04 	mul.w	ip, ip, r4
  404444:	458c      	cmp	ip, r1
  404446:	d904      	bls.n	404452 <__udivdi3+0x19a>
  404448:	18c9      	adds	r1, r1, r3
  40444a:	f104 35ff 	add.w	r5, r4, #4294967295
  40444e:	d35c      	bcc.n	40450a <__udivdi3+0x252>
  404450:	462c      	mov	r4, r5
  404452:	ea44 4408 	orr.w	r4, r4, r8, lsl #16
  404456:	ebcc 0101 	rsb	r1, ip, r1
  40445a:	fba4 2302 	umull	r2, r3, r4, r2
  40445e:	4299      	cmp	r1, r3
  404460:	d348      	bcc.n	4044f4 <__udivdi3+0x23c>
  404462:	d044      	beq.n	4044ee <__udivdi3+0x236>
  404464:	4620      	mov	r0, r4
  404466:	2600      	movs	r6, #0
  404468:	e76c      	b.n	404344 <__udivdi3+0x8c>
  40446a:	f1c8 0420 	rsb	r4, r8, #32
  40446e:	fa01 f308 	lsl.w	r3, r1, r8
  404472:	fa05 f508 	lsl.w	r5, r5, r8
  404476:	fa20 f704 	lsr.w	r7, r0, r4
  40447a:	40e1      	lsrs	r1, r4
  40447c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
  404480:	431f      	orrs	r7, r3
  404482:	fbb1 f6fe 	udiv	r6, r1, lr
  404486:	0c3a      	lsrs	r2, r7, #16
  404488:	fb0e 1116 	mls	r1, lr, r6, r1
  40448c:	fa1f fc85 	uxth.w	ip, r5
  404490:	ea42 4301 	orr.w	r3, r2, r1, lsl #16
  404494:	fb0c f206 	mul.w	r2, ip, r6
  404498:	429a      	cmp	r2, r3
  40449a:	fa00 f408 	lsl.w	r4, r0, r8
  40449e:	d907      	bls.n	4044b0 <__udivdi3+0x1f8>
  4044a0:	195b      	adds	r3, r3, r5
  4044a2:	f106 31ff 	add.w	r1, r6, #4294967295
  4044a6:	d237      	bcs.n	404518 <__udivdi3+0x260>
  4044a8:	429a      	cmp	r2, r3
  4044aa:	d935      	bls.n	404518 <__udivdi3+0x260>
  4044ac:	3e02      	subs	r6, #2
  4044ae:	442b      	add	r3, r5
  4044b0:	1a9b      	subs	r3, r3, r2
  4044b2:	b2bf      	uxth	r7, r7
  4044b4:	fbb3 f0fe 	udiv	r0, r3, lr
  4044b8:	fb0e 3310 	mls	r3, lr, r0, r3
  4044bc:	ea47 4303 	orr.w	r3, r7, r3, lsl #16
  4044c0:	fb0c f100 	mul.w	r1, ip, r0
  4044c4:	4299      	cmp	r1, r3
  4044c6:	d907      	bls.n	4044d8 <__udivdi3+0x220>
  4044c8:	195b      	adds	r3, r3, r5
  4044ca:	f100 32ff 	add.w	r2, r0, #4294967295
  4044ce:	d221      	bcs.n	404514 <__udivdi3+0x25c>
  4044d0:	4299      	cmp	r1, r3
  4044d2:	d91f      	bls.n	404514 <__udivdi3+0x25c>
  4044d4:	3802      	subs	r0, #2
  4044d6:	442b      	add	r3, r5
  4044d8:	1a5a      	subs	r2, r3, r1
  4044da:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
  4044de:	4667      	mov	r7, ip
  4044e0:	e750      	b.n	404384 <__udivdi3+0xcc>
  4044e2:	4610      	mov	r0, r2
  4044e4:	e716      	b.n	404314 <__udivdi3+0x5c>
  4044e6:	460b      	mov	r3, r1
  4044e8:	e729      	b.n	40433e <__udivdi3+0x86>
  4044ea:	4613      	mov	r3, r2
  4044ec:	e772      	b.n	4043d4 <__udivdi3+0x11c>
  4044ee:	40b0      	lsls	r0, r6
  4044f0:	4290      	cmp	r0, r2
  4044f2:	d2b7      	bcs.n	404464 <__udivdi3+0x1ac>
  4044f4:	1e60      	subs	r0, r4, #1
  4044f6:	2600      	movs	r6, #0
  4044f8:	e724      	b.n	404344 <__udivdi3+0x8c>
  4044fa:	4630      	mov	r0, r6
  4044fc:	e722      	b.n	404344 <__udivdi3+0x8c>
  4044fe:	42a9      	cmp	r1, r5
  404500:	d995      	bls.n	40442e <__udivdi3+0x176>
  404502:	f1a8 0802 	sub.w	r8, r8, #2
  404506:	441d      	add	r5, r3
  404508:	e792      	b.n	404430 <__udivdi3+0x178>
  40450a:	458c      	cmp	ip, r1
  40450c:	d9a0      	bls.n	404450 <__udivdi3+0x198>
  40450e:	3c02      	subs	r4, #2
  404510:	4419      	add	r1, r3
  404512:	e79e      	b.n	404452 <__udivdi3+0x19a>
  404514:	4610      	mov	r0, r2
  404516:	e7df      	b.n	4044d8 <__udivdi3+0x220>
  404518:	460e      	mov	r6, r1
  40451a:	e7c9      	b.n	4044b0 <__udivdi3+0x1f8>
  40451c:	3802      	subs	r0, #2
  40451e:	4429      	add	r1, r5
  404520:	e743      	b.n	4043aa <__udivdi3+0xf2>
  404522:	bf00      	nop

00404524 <SM2010_QVGA_CONF>:
  404524:	8012 0209 0215 1012 201e 0013 1401 2102     ......... .....!
  404534:	028c 648d 1887 0713 8011 202b 4092 999d     ...d......+ .@..
  404544:	30eb 20bb 21f5 3ce1 0316 f62f 2033 0834     .0. .!.<../.3 4.
  404554:	5035 4a65 5066 0536 f637 4638 f69b 469c     5PeJfP6.7.8F...F
  404564:	01bc f6bd 46be 1482 2383 239a 6f70 3f72     .....F...#.#por?
  404574:	3f73 2774 9077 1e7a 307b 1a84 2085 0289     s?t'w.z.{0... ..
  404584:	648a 3086 a696 0c97 1898 5580 7024 8025     .d.0.......U$p%.
  404594:	0069 0a94 201f 2022 2026 4056 d361 4879     i.... " & V@a.yH
  4045a4:	603b 203c 8039 b03f 8039 5840 5441 4e42     ;`< 9.?.9.@XATBN
  4045b4:	4443 3e44 3945 3546 3147 2e48 2b49 294b     CDD>E9F5G1H.I+K)
  4045c4:	274c 234e 204f 1e50 0551 1052 0b53 1554     L'N#O P.Q.R.S.T.
  4045d4:	8757 7258 5f59 7e5a 1f5b 0e5c 955d 2860     W.XrY_Z~[.\.].`(
  4045e4:	e0b0 c0b1 b0b2 88b3 016a 6623 03a0 e006     ........j.#f....
  4045f4:	31a1 0ba2 26a3 05a4 25a5 06a6 80a7 80a8     .1...&...%......
  404604:	20a9 20aa 20ab 3cac f0ad 18c8 20c9 17ca     . . . .<..... ..
  404614:	1fcb 00af 18c5 00c6 20c7 80ae 40cc 58cd     ......... ...@.X
  404624:	4cee 078e 798f ffff 7257 7469 6e69 2067     .L...y..Writing 
  404634:	6572 7367 0a0d 0000 7265 6f72 2072 7277     regs....error wr
  404644:	7469 6e69 2067 5754 0d49 000a 6f44 656e     iting TWI...Done
  404654:	7720 6972 6974 676e 0a0d 0000 2d2d 5320      writing....-- S
  404664:	324d 3130 2030 7845 6d61 6c70 2065 2d2d     M2010 Example --
  404674:	0a0d 2d2d 5320 4d41 5334 585f 4c50 4941     ..-- SAM4S_XPLAI
  404684:	454e 5f44 5250 204f 2d2d 0a0d 2d2d 4320     NED_PRO --..-- C
  404694:	6d6f 6970 656c 3a64 4a20 6e75 3120 2037     ompiled: Jun 17 
  4046a4:	3032 3631 3120 3a31 3535 333a 2037 2d2d     2016 11:55:37 --
  4046b4:	0a0d 0000 6d63 736f 7320 6e65 6f73 2072     ....cmos sensor 
  4046c4:	6f66 6e75 0d64 000a 6f6e 2074 6f66 6e75     found...not foun
  4046d4:	0d64 000a 255b 5d78 203a 7825 0a0d 0000     d...[%x]: %x....
  4046e4:	7825 3d20 4e20 0d41 000a 0000 6572 6461     %x = NA.....read
  4046f4:	7620 6c61 6575 5b20 7825 3a5d 2520 0d78      value [%x]: %x.
  404704:	000a 0000 6964 6173 6c62 6e69 2067 7376     ....disabling vs
  404714:	6e79 0d63 000a 0000 6e65 6574 6972 676e     ync.....entering
  404724:	6620 726f 7665 7265 6c20 6f6f 0d70 000a      forever loop...
  404734:	7562 7973 7720 6961 6974 676e 0a0d 0000     busy waiting....
  404744:	0a0d 7250 636f 7365 2073 2523 0d64 000a     ..Process #%d...
  404754:	6950 676e 6f50 676e 7453 7461 7375 203a     PingPongStatus: 
  404764:	6425 0a0d 0000 0000 6461 7264 7365 2073     %d......address 
  404774:	7825 0000 2325 3230 2c78 0000 6f64 656e     %x..%#02x,..done
  404784:	0a0d 0000 460d 6e69 7369 6568 0d64 000a     .....Finished...
  404794:	0043 0000                                   C...

00404798 <_global_impure_ptr>:
  404798:	0020 2000                                    .. 

0040479c <zeroes.6869>:
  40479c:	3030 3030 3030 3030 3030 3030 3030 3030     0000000000000000
  4047ac:	3130 3332 3534 3736 3938 4241 4443 4645     0123456789ABCDEF
  4047bc:	0000 0000 3130 3332 3534 3736 3938 6261     ....0123456789ab
  4047cc:	6463 6665 0000 0000 6e28 6c75 296c 0000     cdef....(null)..

004047dc <blanks.6868>:
  4047dc:	2020 2020 2020 2020 2020 2020 2020 2020                     

004047ec <_init>:
  4047ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4047ee:	bf00      	nop
  4047f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
  4047f2:	bc08      	pop	{r3}
  4047f4:	469e      	mov	lr, r3
  4047f6:	4770      	bx	lr

004047f8 <__init_array_start>:
  4047f8:	00402549 	.word	0x00402549

004047fc <__frame_dummy_init_array_entry>:
  4047fc:	004000f1                                ..@.

00404800 <_fini>:
  404800:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  404802:	bf00      	nop
  404804:	bcf8      	pop	{r3, r4, r5, r6, r7}
  404806:	bc08      	pop	{r3}
  404808:	469e      	mov	lr, r3
  40480a:	4770      	bx	lr

0040480c <__fini_array_start>:
  40480c:	004000cd 	.word	0x004000cd

Disassembly of section .relocate:

20000000 <portable_delay_cycles>:
RAMFUNC
void portable_delay_cycles(unsigned long n)
{
	UNUSED(n);

	__asm (
20000000:	f3bf 8f5f 	dmb	sy
20000004:	3801      	subs	r0, #1
20000006:	d1fb      	bne.n	20000000 <portable_delay_cycles>
20000008:	4770      	bx	lr
2000000a:	bf00      	nop

2000000c <SystemCoreClock>:
2000000c:	0900 003d                                   ..=.

20000010 <g_p_process>:
20000010:	096c 2000                                   l.. 

20000014 <g_us_cap_rows>:
20000014:	0078                                        x.

20000016 <g_us_cap_line>:
20000016:	0140                                        @.

20000018 <p_cmos_conf>:
20000018:	4524 0040                                   $E@.

2000001c <g_p_capture>:
2000001c:	9f6c 2000                                   l.. 

20000020 <impure_data>:
20000020:	0000 0000 030c 2000 0374 2000 03dc 2000     ....... t.. ... 
	...
20000054:	4794 0040 0000 0000 0000 0000 0000 0000     .G@.............
	...
200000c8:	0001 0000 0000 0000 330e abcd 1234 e66d     .........3..4.m.
200000d8:	deec 0005 000b 0000 0000 0000 0000 0000     ................
	...

20000448 <_impure_ptr>:
20000448:	0020 2000                                    .. 

2000044c <lc_ctype_charset>:
2000044c:	5341 4943 0049 0000 0000 0000 0000 0000     ASCII...........
	...

2000046c <__mb_cur_max>:
2000046c:	0001 0000                                   ....

20000470 <__malloc_av_>:
	...
20000478:	0470 2000 0470 2000 0478 2000 0478 2000     p.. p.. x.. x.. 
20000488:	0480 2000 0480 2000 0488 2000 0488 2000     ... ... ... ... 
20000498:	0490 2000 0490 2000 0498 2000 0498 2000     ... ... ... ... 
200004a8:	04a0 2000 04a0 2000 04a8 2000 04a8 2000     ... ... ... ... 
200004b8:	04b0 2000 04b0 2000 04b8 2000 04b8 2000     ... ... ... ... 
200004c8:	04c0 2000 04c0 2000 04c8 2000 04c8 2000     ... ... ... ... 
200004d8:	04d0 2000 04d0 2000 04d8 2000 04d8 2000     ... ... ... ... 
200004e8:	04e0 2000 04e0 2000 04e8 2000 04e8 2000     ... ... ... ... 
200004f8:	04f0 2000 04f0 2000 04f8 2000 04f8 2000     ... ... ... ... 
20000508:	0500 2000 0500 2000 0508 2000 0508 2000     ... ... ... ... 
20000518:	0510 2000 0510 2000 0518 2000 0518 2000     ... ... ... ... 
20000528:	0520 2000 0520 2000 0528 2000 0528 2000      ..  .. (.. (.. 
20000538:	0530 2000 0530 2000 0538 2000 0538 2000     0.. 0.. 8.. 8.. 
20000548:	0540 2000 0540 2000 0548 2000 0548 2000     @.. @.. H.. H.. 
20000558:	0550 2000 0550 2000 0558 2000 0558 2000     P.. P.. X.. X.. 
20000568:	0560 2000 0560 2000 0568 2000 0568 2000     `.. `.. h.. h.. 
20000578:	0570 2000 0570 2000 0578 2000 0578 2000     p.. p.. x.. x.. 
20000588:	0580 2000 0580 2000 0588 2000 0588 2000     ... ... ... ... 
20000598:	0590 2000 0590 2000 0598 2000 0598 2000     ... ... ... ... 
200005a8:	05a0 2000 05a0 2000 05a8 2000 05a8 2000     ... ... ... ... 
200005b8:	05b0 2000 05b0 2000 05b8 2000 05b8 2000     ... ... ... ... 
200005c8:	05c0 2000 05c0 2000 05c8 2000 05c8 2000     ... ... ... ... 
200005d8:	05d0 2000 05d0 2000 05d8 2000 05d8 2000     ... ... ... ... 
200005e8:	05e0 2000 05e0 2000 05e8 2000 05e8 2000     ... ... ... ... 
200005f8:	05f0 2000 05f0 2000 05f8 2000 05f8 2000     ... ... ... ... 
20000608:	0600 2000 0600 2000 0608 2000 0608 2000     ... ... ... ... 
20000618:	0610 2000 0610 2000 0618 2000 0618 2000     ... ... ... ... 
20000628:	0620 2000 0620 2000 0628 2000 0628 2000      ..  .. (.. (.. 
20000638:	0630 2000 0630 2000 0638 2000 0638 2000     0.. 0.. 8.. 8.. 
20000648:	0640 2000 0640 2000 0648 2000 0648 2000     @.. @.. H.. H.. 
20000658:	0650 2000 0650 2000 0658 2000 0658 2000     P.. P.. X.. X.. 
20000668:	0660 2000 0660 2000 0668 2000 0668 2000     `.. `.. h.. h.. 
20000678:	0670 2000 0670 2000 0678 2000 0678 2000     p.. p.. x.. x.. 
20000688:	0680 2000 0680 2000 0688 2000 0688 2000     ... ... ... ... 
20000698:	0690 2000 0690 2000 0698 2000 0698 2000     ... ... ... ... 
200006a8:	06a0 2000 06a0 2000 06a8 2000 06a8 2000     ... ... ... ... 
200006b8:	06b0 2000 06b0 2000 06b8 2000 06b8 2000     ... ... ... ... 
200006c8:	06c0 2000 06c0 2000 06c8 2000 06c8 2000     ... ... ... ... 
200006d8:	06d0 2000 06d0 2000 06d8 2000 06d8 2000     ... ... ... ... 
200006e8:	06e0 2000 06e0 2000 06e8 2000 06e8 2000     ... ... ... ... 
200006f8:	06f0 2000 06f0 2000 06f8 2000 06f8 2000     ... ... ... ... 
20000708:	0700 2000 0700 2000 0708 2000 0708 2000     ... ... ... ... 
20000718:	0710 2000 0710 2000 0718 2000 0718 2000     ... ... ... ... 
20000728:	0720 2000 0720 2000 0728 2000 0728 2000      ..  .. (.. (.. 
20000738:	0730 2000 0730 2000 0738 2000 0738 2000     0.. 0.. 8.. 8.. 
20000748:	0740 2000 0740 2000 0748 2000 0748 2000     @.. @.. H.. H.. 
20000758:	0750 2000 0750 2000 0758 2000 0758 2000     P.. P.. X.. X.. 
20000768:	0760 2000 0760 2000 0768 2000 0768 2000     `.. `.. h.. h.. 
20000778:	0770 2000 0770 2000 0778 2000 0778 2000     p.. p.. x.. x.. 
20000788:	0780 2000 0780 2000 0788 2000 0788 2000     ... ... ... ... 
20000798:	0790 2000 0790 2000 0798 2000 0798 2000     ... ... ... ... 
200007a8:	07a0 2000 07a0 2000 07a8 2000 07a8 2000     ... ... ... ... 
200007b8:	07b0 2000 07b0 2000 07b8 2000 07b8 2000     ... ... ... ... 
200007c8:	07c0 2000 07c0 2000 07c8 2000 07c8 2000     ... ... ... ... 
200007d8:	07d0 2000 07d0 2000 07d8 2000 07d8 2000     ... ... ... ... 
200007e8:	07e0 2000 07e0 2000 07e8 2000 07e8 2000     ... ... ... ... 
200007f8:	07f0 2000 07f0 2000 07f8 2000 07f8 2000     ... ... ... ... 
20000808:	0800 2000 0800 2000 0808 2000 0808 2000     ... ... ... ... 
20000818:	0810 2000 0810 2000 0818 2000 0818 2000     ... ... ... ... 
20000828:	0820 2000 0820 2000 0828 2000 0828 2000      ..  .. (.. (.. 
20000838:	0830 2000 0830 2000 0838 2000 0838 2000     0.. 0.. 8.. 8.. 
20000848:	0840 2000 0840 2000 0848 2000 0848 2000     @.. @.. H.. H.. 
20000858:	0850 2000 0850 2000 0858 2000 0858 2000     P.. P.. X.. X.. 
20000868:	0860 2000 0860 2000 0868 2000 0868 2000     `.. `.. h.. h.. 

20000878 <__malloc_trim_threshold>:
20000878:	0000 0002                                   ....

2000087c <__malloc_sbrk_base>:
2000087c:	ffff ffff                                   ....

20000880 <__wctomb>:
20000880:	3d5d 0040                                   ]=@.
