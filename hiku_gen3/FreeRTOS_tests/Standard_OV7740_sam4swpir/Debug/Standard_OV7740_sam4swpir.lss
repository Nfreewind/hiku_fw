
Standard_OV7740_sam4swpir.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000044b0  00400000  00400000  00008000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000440  20000000  004044b0  00010000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  2 .bss          0000a5b8  20000440  004048f0  00010440  2**2
                  ALLOC
  3 .stack        00003000  2000a9f8  0040eea8  00010440  2**0
                  ALLOC
  4 .ARM.attributes 0000002a  00000000  00000000  00010440  2**0
                  CONTENTS, READONLY
  5 .comment      0000005b  00000000  00000000  0001046a  2**0
                  CONTENTS, READONLY
  6 .debug_info   0001124d  00000000  00000000  000104c5  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002bca  00000000  00000000  00021712  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    0000abff  00000000  00000000  000242dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000c38  00000000  00000000  0002eedb  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000c40  00000000  00000000  0002fb13  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  00014fac  00000000  00000000  00030753  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000dfbb  00000000  00000000  000456ff  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0005ef76  00000000  00000000  000536ba  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00002024  00000000  00000000  000b2630  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <_sfixed>:
  400000:	2000d9f8 	.word	0x2000d9f8
  400004:	004010d5 	.word	0x004010d5
  400008:	004010d1 	.word	0x004010d1
  40000c:	004010d1 	.word	0x004010d1
  400010:	004010d1 	.word	0x004010d1
  400014:	004010d1 	.word	0x004010d1
  400018:	004010d1 	.word	0x004010d1
	...
  40002c:	004013dd 	.word	0x004013dd
  400030:	004010d1 	.word	0x004010d1
  400034:	00000000 	.word	0x00000000
  400038:	004014b5 	.word	0x004014b5
  40003c:	004014f9 	.word	0x004014f9
  400040:	004010d1 	.word	0x004010d1
  400044:	004010d1 	.word	0x004010d1
  400048:	004010d1 	.word	0x004010d1
  40004c:	004010d1 	.word	0x004010d1
  400050:	004010d1 	.word	0x004010d1
  400054:	004010d1 	.word	0x004010d1
  400058:	004010d1 	.word	0x004010d1
  40005c:	00000000 	.word	0x00000000
  400060:	004010d1 	.word	0x004010d1
  400064:	004010d1 	.word	0x004010d1
  400068:	00000000 	.word	0x00000000
  40006c:	00400d1d 	.word	0x00400d1d
  400070:	00400d31 	.word	0x00400d31
  400074:	00400d45 	.word	0x00400d45
  400078:	004010d1 	.word	0x004010d1
  40007c:	004010d1 	.word	0x004010d1
	...
  400088:	004010d1 	.word	0x004010d1
  40008c:	004010d1 	.word	0x004010d1
  400090:	004010d1 	.word	0x004010d1
  400094:	004010d1 	.word	0x004010d1
  400098:	004010d1 	.word	0x004010d1
  40009c:	004010d1 	.word	0x004010d1
  4000a0:	004010d1 	.word	0x004010d1
  4000a4:	004010d1 	.word	0x004010d1
  4000a8:	004010d1 	.word	0x004010d1
  4000ac:	004010d1 	.word	0x004010d1
  4000b0:	004010d1 	.word	0x004010d1
  4000b4:	004010d1 	.word	0x004010d1
  4000b8:	004010d1 	.word	0x004010d1
  4000bc:	004010d1 	.word	0x004010d1
  4000c0:	004010d1 	.word	0x004010d1
  4000c4:	004010d1 	.word	0x004010d1
  4000c8:	004010d1 	.word	0x004010d1

004000cc <__do_global_dtors_aux>:
  4000cc:	b510      	push	{r4, lr}
  4000ce:	4c05      	ldr	r4, [pc, #20]	; (4000e4 <__do_global_dtors_aux+0x18>)
  4000d0:	7823      	ldrb	r3, [r4, #0]
  4000d2:	b933      	cbnz	r3, 4000e2 <__do_global_dtors_aux+0x16>
  4000d4:	4b04      	ldr	r3, [pc, #16]	; (4000e8 <__do_global_dtors_aux+0x1c>)
  4000d6:	b113      	cbz	r3, 4000de <__do_global_dtors_aux+0x12>
  4000d8:	4804      	ldr	r0, [pc, #16]	; (4000ec <__do_global_dtors_aux+0x20>)
  4000da:	f3af 8000 	nop.w
  4000de:	2301      	movs	r3, #1
  4000e0:	7023      	strb	r3, [r4, #0]
  4000e2:	bd10      	pop	{r4, pc}
  4000e4:	20000440 	.word	0x20000440
  4000e8:	00000000 	.word	0x00000000
  4000ec:	004044b0 	.word	0x004044b0

004000f0 <frame_dummy>:
  4000f0:	4b08      	ldr	r3, [pc, #32]	; (400114 <frame_dummy+0x24>)
  4000f2:	b510      	push	{r4, lr}
  4000f4:	b11b      	cbz	r3, 4000fe <frame_dummy+0xe>
  4000f6:	4808      	ldr	r0, [pc, #32]	; (400118 <frame_dummy+0x28>)
  4000f8:	4908      	ldr	r1, [pc, #32]	; (40011c <frame_dummy+0x2c>)
  4000fa:	f3af 8000 	nop.w
  4000fe:	4808      	ldr	r0, [pc, #32]	; (400120 <frame_dummy+0x30>)
  400100:	6803      	ldr	r3, [r0, #0]
  400102:	b903      	cbnz	r3, 400106 <frame_dummy+0x16>
  400104:	bd10      	pop	{r4, pc}
  400106:	4b07      	ldr	r3, [pc, #28]	; (400124 <frame_dummy+0x34>)
  400108:	2b00      	cmp	r3, #0
  40010a:	d0fb      	beq.n	400104 <frame_dummy+0x14>
  40010c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  400110:	4718      	bx	r3
  400112:	bf00      	nop
  400114:	00000000 	.word	0x00000000
  400118:	004044b0 	.word	0x004044b0
  40011c:	20000444 	.word	0x20000444
  400120:	004044b0 	.word	0x004044b0
  400124:	00000000 	.word	0x00000000

00400128 <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
  400128:	b510      	push	{r4, lr}
	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
  40012a:	480e      	ldr	r0, [pc, #56]	; (400164 <sysclk_init+0x3c>)
  40012c:	4b0e      	ldr	r3, [pc, #56]	; (400168 <sysclk_init+0x40>)
  40012e:	4798      	blx	r3
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
  400130:	2000      	movs	r0, #0
  400132:	213e      	movs	r1, #62	; 0x3e
  400134:	4b0d      	ldr	r3, [pc, #52]	; (40016c <sysclk_init+0x44>)
  400136:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
  400138:	4c0d      	ldr	r4, [pc, #52]	; (400170 <sysclk_init+0x48>)
  40013a:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
  40013c:	2800      	cmp	r0, #0
  40013e:	d0fc      	beq.n	40013a <sysclk_init+0x12>

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
	} else {
		pmc_disable_pllbck();
  400140:	4b0c      	ldr	r3, [pc, #48]	; (400174 <sysclk_init+0x4c>)
  400142:	4798      	blx	r3
		PMC->CKGR_PLLBR = p_cfg->ctrl;
  400144:	4a0c      	ldr	r2, [pc, #48]	; (400178 <sysclk_init+0x50>)
  400146:	4b0d      	ldr	r3, [pc, #52]	; (40017c <sysclk_init+0x54>)
  400148:	62da      	str	r2, [r3, #44]	; 0x2c
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		return pmc_is_locked_pllack();
	} else {
		return pmc_is_locked_pllbck();
  40014a:	4c0d      	ldr	r4, [pc, #52]	; (400180 <sysclk_init+0x58>)
  40014c:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
  40014e:	2800      	cmp	r0, #0
  400150:	d0fc      	beq.n	40014c <sysclk_init+0x24>

		pll_enable_source(CONFIG_PLL1_SOURCE);
		pll_config_defaults(&pllcfg, 1);
		pll_enable(&pllcfg, 1);
		pll_wait_for_lock(1);
		pmc_switch_mck_to_pllbck(CONFIG_SYSCLK_PRES);
  400152:	2010      	movs	r0, #16
  400154:	4b0b      	ldr	r3, [pc, #44]	; (400184 <sysclk_init+0x5c>)
  400156:	4798      	blx	r3
	}
#endif

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
  400158:	4b0b      	ldr	r3, [pc, #44]	; (400188 <sysclk_init+0x60>)
  40015a:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
  40015c:	4801      	ldr	r0, [pc, #4]	; (400164 <sysclk_init+0x3c>)
  40015e:	4b02      	ldr	r3, [pc, #8]	; (400168 <sysclk_init+0x40>)
  400160:	4798      	blx	r3
  400162:	bd10      	pop	{r4, pc}
  400164:	07270e00 	.word	0x07270e00
  400168:	00401299 	.word	0x00401299
  40016c:	00400dbd 	.word	0x00400dbd
  400170:	00400e11 	.word	0x00400e11
  400174:	00400e5d 	.word	0x00400e5d
  400178:	00133f01 	.word	0x00133f01
  40017c:	400e0400 	.word	0x400e0400
  400180:	00400e69 	.word	0x00400e69
  400184:	00400d59 	.word	0x00400d59
  400188:	00401185 	.word	0x00401185

0040018c <board_init>:
#include "board.h"
#include "conf_board.h"
#include "gpio.h"

void board_init(void)
{
  40018c:	b570      	push	{r4, r5, r6, lr}
	/* Disable the watchdog */
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	WDT->WDT_MR = WDT_MR_WDDIS;
  40018e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  400192:	4b67      	ldr	r3, [pc, #412]	; (400330 <board_init+0x1a4>)
  400194:	605a      	str	r2, [r3, #4]
#endif

	/* Configure LED pins */
	gpio_configure_pin(LED0_GPIO, LED0_FLAGS);
  400196:	204c      	movs	r0, #76	; 0x4c
  400198:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
  40019c:	4c65      	ldr	r4, [pc, #404]	; (400334 <board_init+0x1a8>)
  40019e:	47a0      	blx	r4

	/* Configure Push Button pins */
	gpio_configure_pin(GPIO_PUSH_BUTTON_1, GPIO_PUSH_BUTTON_1_FLAGS);
  4001a0:	2002      	movs	r0, #2
  4001a2:	4965      	ldr	r1, [pc, #404]	; (400338 <board_init+0x1ac>)
  4001a4:	47a0      	blx	r4
	gpio_configure_group(PINS_UART_PIO, PINS_UART, PINS_UART_FLAGS);
#endif

	/* Configure TWI pins */
#ifdef CONF_BOARD_TWI0
	gpio_configure_pin(TWI0_DATA_GPIO, TWI0_DATA_FLAGS);
  4001a6:	2003      	movs	r0, #3
  4001a8:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  4001ac:	47a0      	blx	r4
	gpio_configure_pin(TWI0_CLK_GPIO, TWI0_CLK_FLAGS);
  4001ae:	2004      	movs	r0, #4
  4001b0:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  4001b4:	47a0      	blx	r4
	gpio_configure_pin(SPI_NPCS0_GPIO, SPI_NPCS0_FLAGS);
#endif

	/* Configure PCK0 pins */
#ifdef CONF_BOARD_PCK0
	gpio_configure_pin(PIN_PCK0, PIN_PCK0_FLAGS);
  4001b6:	202d      	movs	r0, #45	; 0x2d
  4001b8:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  4001bc:	47a0      	blx	r4
	gpio_configure_pin(USB_VBUS_GPIO, USB_VBUS_FLAGS);
#endif

	/* Configure LCD EBI pins */
#ifdef CONF_BOARD_ILI9325
	gpio_configure_pin(PIN_EBI_DATA_BUS_D0, PIN_EBI_DATA_BUS_FLAGS);
  4001be:	4d5f      	ldr	r5, [pc, #380]	; (40033c <board_init+0x1b0>)
  4001c0:	2040      	movs	r0, #64	; 0x40
  4001c2:	4629      	mov	r1, r5
  4001c4:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_DATA_BUS_D1, PIN_EBI_DATA_BUS_FLAGS);
  4001c6:	2041      	movs	r0, #65	; 0x41
  4001c8:	4629      	mov	r1, r5
  4001ca:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_DATA_BUS_D2, PIN_EBI_DATA_BUS_FLAGS);
  4001cc:	2042      	movs	r0, #66	; 0x42
  4001ce:	4629      	mov	r1, r5
  4001d0:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_DATA_BUS_D3, PIN_EBI_DATA_BUS_FLAGS);
  4001d2:	2043      	movs	r0, #67	; 0x43
  4001d4:	4629      	mov	r1, r5
  4001d6:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_DATA_BUS_D4, PIN_EBI_DATA_BUS_FLAGS);
  4001d8:	2044      	movs	r0, #68	; 0x44
  4001da:	4629      	mov	r1, r5
  4001dc:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_DATA_BUS_D5, PIN_EBI_DATA_BUS_FLAGS);
  4001de:	2045      	movs	r0, #69	; 0x45
  4001e0:	4629      	mov	r1, r5
  4001e2:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_DATA_BUS_D6, PIN_EBI_DATA_BUS_FLAGS);
  4001e4:	2046      	movs	r0, #70	; 0x46
  4001e6:	4629      	mov	r1, r5
  4001e8:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_DATA_BUS_D7, PIN_EBI_DATA_BUS_FLAGS);
  4001ea:	2047      	movs	r0, #71	; 0x47
  4001ec:	4629      	mov	r1, r5
  4001ee:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_NRD, PIN_EBI_NRD_FLAGS);
  4001f0:	204b      	movs	r0, #75	; 0x4b
  4001f2:	4629      	mov	r1, r5
  4001f4:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_NWE, PIN_EBI_NWE_FLAGS);
  4001f6:	2048      	movs	r0, #72	; 0x48
  4001f8:	4629      	mov	r1, r5
  4001fa:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_NCS2, PIN_EBI_NCS2_FLAGS);
  4001fc:	4e50      	ldr	r6, [pc, #320]	; (400340 <board_init+0x1b4>)
  4001fe:	2016      	movs	r0, #22
  400200:	4631      	mov	r1, r6
  400202:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_LCD_RS, PIN_EBI_LCD_RS_FLAGS);
  400204:	2053      	movs	r0, #83	; 0x53
  400206:	4629      	mov	r1, r5
  400208:	47a0      	blx	r4
#endif

	/* Configure Backlight control pin */
#ifdef CONF_BOARD_AAT3155
	gpio_configure_pin(BOARD_AAT31XX_SET_GPIO, BOARD_AAT31XX_SET_FLAGS);
  40020a:	204d      	movs	r0, #77	; 0x4d
  40020c:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
  400210:	47a0      	blx	r4
#endif

	/* Configure SRAM pins */
#ifdef CONF_BOARD_SRAM
	gpio_configure_pin(PIN_EBI_DATA_BUS_D0, PIN_EBI_DATA_BUS_FLAGS);
  400212:	2040      	movs	r0, #64	; 0x40
  400214:	4629      	mov	r1, r5
  400216:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_DATA_BUS_D1, PIN_EBI_DATA_BUS_FLAGS);
  400218:	2041      	movs	r0, #65	; 0x41
  40021a:	4629      	mov	r1, r5
  40021c:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_DATA_BUS_D2, PIN_EBI_DATA_BUS_FLAGS);
  40021e:	2042      	movs	r0, #66	; 0x42
  400220:	4629      	mov	r1, r5
  400222:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_DATA_BUS_D3, PIN_EBI_DATA_BUS_FLAGS);
  400224:	2043      	movs	r0, #67	; 0x43
  400226:	4629      	mov	r1, r5
  400228:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_DATA_BUS_D4, PIN_EBI_DATA_BUS_FLAGS);
  40022a:	2044      	movs	r0, #68	; 0x44
  40022c:	4629      	mov	r1, r5
  40022e:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_DATA_BUS_D5, PIN_EBI_DATA_BUS_FLAGS);
  400230:	2045      	movs	r0, #69	; 0x45
  400232:	4629      	mov	r1, r5
  400234:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_DATA_BUS_D6, PIN_EBI_DATA_BUS_FLAGS);
  400236:	2046      	movs	r0, #70	; 0x46
  400238:	4629      	mov	r1, r5
  40023a:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_DATA_BUS_D7, PIN_EBI_DATA_BUS_FLAGS);
  40023c:	2047      	movs	r0, #71	; 0x47
  40023e:	4629      	mov	r1, r5
  400240:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_NRD, PIN_EBI_NRD_FLAGS);
  400242:	204b      	movs	r0, #75	; 0x4b
  400244:	4629      	mov	r1, r5
  400246:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_NWE, PIN_EBI_NWE_FLAGS);
  400248:	2048      	movs	r0, #72	; 0x48
  40024a:	4629      	mov	r1, r5
  40024c:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_NCS0, PIN_EBI_NCS0_FLAGS);
  40024e:	204e      	movs	r0, #78	; 0x4e
  400250:	4629      	mov	r1, r5
  400252:	47a0      	blx	r4
	gpio_configure_pin(SRAM_VCC_GPIO, SRAM_VCC_FLAGS);
  400254:	2049      	movs	r0, #73	; 0x49
  400256:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
  40025a:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_ADDR_BUS_A0, PIN_EBI_ADDR_BUS_FLAG1);
  40025c:	2052      	movs	r0, #82	; 0x52
  40025e:	4629      	mov	r1, r5
  400260:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_ADDR_BUS_A1, PIN_EBI_ADDR_BUS_FLAG1);
  400262:	2053      	movs	r0, #83	; 0x53
  400264:	4629      	mov	r1, r5
  400266:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_ADDR_BUS_A2, PIN_EBI_ADDR_BUS_FLAG1);
  400268:	2054      	movs	r0, #84	; 0x54
  40026a:	4629      	mov	r1, r5
  40026c:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_ADDR_BUS_A3, PIN_EBI_ADDR_BUS_FLAG1);
  40026e:	2055      	movs	r0, #85	; 0x55
  400270:	4629      	mov	r1, r5
  400272:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_ADDR_BUS_A4, PIN_EBI_ADDR_BUS_FLAG1);
  400274:	2056      	movs	r0, #86	; 0x56
  400276:	4629      	mov	r1, r5
  400278:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_ADDR_BUS_A5, PIN_EBI_ADDR_BUS_FLAG1);
  40027a:	2057      	movs	r0, #87	; 0x57
  40027c:	4629      	mov	r1, r5
  40027e:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_ADDR_BUS_A6, PIN_EBI_ADDR_BUS_FLAG1);
  400280:	2058      	movs	r0, #88	; 0x58
  400282:	4629      	mov	r1, r5
  400284:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_ADDR_BUS_A7, PIN_EBI_ADDR_BUS_FLAG1);
  400286:	2059      	movs	r0, #89	; 0x59
  400288:	4629      	mov	r1, r5
  40028a:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_ADDR_BUS_A8, PIN_EBI_ADDR_BUS_FLAG1);
  40028c:	205a      	movs	r0, #90	; 0x5a
  40028e:	4629      	mov	r1, r5
  400290:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_ADDR_BUS_A9, PIN_EBI_ADDR_BUS_FLAG1);
  400292:	205b      	movs	r0, #91	; 0x5b
  400294:	4629      	mov	r1, r5
  400296:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_ADDR_BUS_A10, PIN_EBI_ADDR_BUS_FLAG1);
  400298:	205c      	movs	r0, #92	; 0x5c
  40029a:	4629      	mov	r1, r5
  40029c:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_ADDR_BUS_A11, PIN_EBI_ADDR_BUS_FLAG1);
  40029e:	205d      	movs	r0, #93	; 0x5d
  4002a0:	4629      	mov	r1, r5
  4002a2:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_ADDR_BUS_A12, PIN_EBI_ADDR_BUS_FLAG1);
  4002a4:	205e      	movs	r0, #94	; 0x5e
  4002a6:	4629      	mov	r1, r5
  4002a8:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_ADDR_BUS_A13, PIN_EBI_ADDR_BUS_FLAG1);
  4002aa:	205f      	movs	r0, #95	; 0x5f
  4002ac:	4629      	mov	r1, r5
  4002ae:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_ADDR_BUS_A14, PIN_EBI_ADDR_BUS_FLAG2);
  4002b0:	2012      	movs	r0, #18
  4002b2:	4631      	mov	r1, r6
  4002b4:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_ADDR_BUS_A15, PIN_EBI_ADDR_BUS_FLAG2);
  4002b6:	2013      	movs	r0, #19
  4002b8:	4631      	mov	r1, r6
  4002ba:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_ADDR_BUS_A16, PIN_EBI_ADDR_BUS_FLAG2);
  4002bc:	2014      	movs	r0, #20
  4002be:	4631      	mov	r1, r6
  4002c0:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_ADDR_BUS_A17, PIN_EBI_ADDR_BUS_FLAG2);
  4002c2:	2000      	movs	r0, #0
  4002c4:	4631      	mov	r1, r6
  4002c6:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_ADDR_BUS_A18, PIN_EBI_ADDR_BUS_FLAG2);
  4002c8:	2001      	movs	r0, #1
  4002ca:	4631      	mov	r1, r6
  4002cc:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_ADDR_BUS_A19, PIN_EBI_ADDR_BUS_FLAG1);
  4002ce:	2050      	movs	r0, #80	; 0x50
  4002d0:	4629      	mov	r1, r5
  4002d2:	47a0      	blx	r4
#endif

	/* Configure Image sensor pins */
#ifdef CONF_BOARD_OV7740_IMAGE_SENSOR
	gpio_configure_pin(OV_SW_OVT_GPIO, OV_SW_OVT_FLAGS);
  4002d4:	204a      	movs	r0, #74	; 0x4a
  4002d6:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
  4002da:	47a0      	blx	r4
	gpio_configure_pin(OV_RST_GPIO, OV_RST_FLAGS);
  4002dc:	204f      	movs	r0, #79	; 0x4f
  4002de:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
  4002e2:	47a0      	blx	r4
	gpio_configure_pin(OV_FSIN_GPIO, OV_FSIN_FLAGS);
  4002e4:	2015      	movs	r0, #21
  4002e6:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
  4002ea:	47a0      	blx	r4
	gpio_configure_pin(OV_HSYNC_GPIO, OV_HSYNC_FLAGS);
  4002ec:	2010      	movs	r0, #16
  4002ee:	2171      	movs	r1, #113	; 0x71
  4002f0:	47a0      	blx	r4
	gpio_configure_pin(OV_VSYNC_GPIO, OV_VSYNC_FLAGS);
  4002f2:	200f      	movs	r0, #15
  4002f4:	2171      	movs	r1, #113	; 0x71
  4002f6:	47a0      	blx	r4
	gpio_configure_pin(OV_DATA_BUS_D2, OV_DATA_BUS_FLAGS);
  4002f8:	f105 5500 	add.w	r5, r5, #536870912	; 0x20000000
  4002fc:	2018      	movs	r0, #24
  4002fe:	4629      	mov	r1, r5
  400300:	47a0      	blx	r4
	gpio_configure_pin(OV_DATA_BUS_D3, OV_DATA_BUS_FLAGS);
  400302:	2019      	movs	r0, #25
  400304:	4629      	mov	r1, r5
  400306:	47a0      	blx	r4
	gpio_configure_pin(OV_DATA_BUS_D4, OV_DATA_BUS_FLAGS);
  400308:	201a      	movs	r0, #26
  40030a:	4629      	mov	r1, r5
  40030c:	47a0      	blx	r4
	gpio_configure_pin(OV_DATA_BUS_D5, OV_DATA_BUS_FLAGS);
  40030e:	201b      	movs	r0, #27
  400310:	4629      	mov	r1, r5
  400312:	47a0      	blx	r4
	gpio_configure_pin(OV_DATA_BUS_D6, OV_DATA_BUS_FLAGS);
  400314:	201c      	movs	r0, #28
  400316:	4629      	mov	r1, r5
  400318:	47a0      	blx	r4
	gpio_configure_pin(OV_DATA_BUS_D7, OV_DATA_BUS_FLAGS);
  40031a:	201d      	movs	r0, #29
  40031c:	4629      	mov	r1, r5
  40031e:	47a0      	blx	r4
	gpio_configure_pin(OV_DATA_BUS_D8, OV_DATA_BUS_FLAGS);
  400320:	201e      	movs	r0, #30
  400322:	4629      	mov	r1, r5
  400324:	47a0      	blx	r4
	gpio_configure_pin(OV_DATA_BUS_D9, OV_DATA_BUS_FLAGS);
  400326:	201f      	movs	r0, #31
  400328:	4629      	mov	r1, r5
  40032a:	47a0      	blx	r4
  40032c:	bd70      	pop	{r4, r5, r6, pc}
  40032e:	bf00      	nop
  400330:	400e1450 	.word	0x400e1450
  400334:	00400b51 	.word	0x00400b51
  400338:	28000079 	.word	0x28000079
  40033c:	08000001 	.word	0x08000001
  400340:	18000001 	.word	0x18000001

00400344 <ov_power>:
 * \param on_off 1 to turn on OV7740 sensor and 0 to turn off.
 * \param p_pio Pointer to the PIO instance which control OV7740 sensor power.
 * \param ul_mask Bitmask of OV7740 sensor power pin.
 */
void ov_power(uint32_t ul_on_off, Pio* const p_pio, const uint32_t ul_mask)
{
  400344:	b508      	push	{r3, lr}
	if (ul_on_off) {
  400346:	b120      	cbz	r0, 400352 <ov_power+0xe>
		pio_clear(p_pio, ul_mask);
  400348:	4608      	mov	r0, r1
  40034a:	4611      	mov	r1, r2
  40034c:	4b03      	ldr	r3, [pc, #12]	; (40035c <ov_power+0x18>)
  40034e:	4798      	blx	r3
  400350:	bd08      	pop	{r3, pc}
	} else {
		pio_set(p_pio, ul_mask);
  400352:	4608      	mov	r0, r1
  400354:	4611      	mov	r1, r2
  400356:	4b02      	ldr	r3, [pc, #8]	; (400360 <ov_power+0x1c>)
  400358:	4798      	blx	r3
  40035a:	bd08      	pop	{r3, pc}
  40035c:	004009cd 	.word	0x004009cd
  400360:	004009c9 	.word	0x004009c9

00400364 <ov_read_reg>:
 * \param p_twi TWI interface.
 * \param p_packet TWI packet.
 * \return 0 on success, TWID_ERROR_BUSY otherwise.
 */
uint32_t ov_read_reg(Twi* const p_twi, twi_packet_t* const p_packet)
{
  400364:	b508      	push	{r3, lr}
	uint32_t ul_status;

	ul_status = twi_master_read(p_twi, p_packet);
  400366:	4b01      	ldr	r3, [pc, #4]	; (40036c <ov_read_reg+0x8>)
  400368:	4798      	blx	r3

	return ul_status;
}
  40036a:	bd08      	pop	{r3, pc}
  40036c:	00400f51 	.word	0x00400f51

00400370 <ov_write_reg>:
 * \param p_twi TWI interface.
 * \param p_packet TWI packet.
 * \return 0 on success, TWID_ERROR_BUSY otherwise.
 */
uint32_t ov_write_reg(Twi* const p_twi, twi_packet_t* const p_packet)
{
  400370:	b508      	push	{r3, lr}
	uint32_t ul_status;

	ul_status = twi_master_write(p_twi, p_packet);
  400372:	4b01      	ldr	r3, [pc, #4]	; (400378 <ov_write_reg+0x8>)
  400374:	4798      	blx	r3

	return ul_status;
}
  400376:	bd08      	pop	{r3, pc}
  400378:	00401031 	.word	0x00401031

0040037c <ov_write_regs>:
 * \param p_twi TWI interface.
 * \param p_reg_list Register list to be written.
 * \return 0 on success, TWID_ERROR_BUSY otherwise.
 */
uint32_t ov_write_regs(Twi* const p_twi, const ov_reg *p_reg_list)
{
  40037c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  400380:	b086      	sub	sp, #24
  400382:	4607      	mov	r7, r0
  400384:	1c4c      	adds	r4, r1, #1
			(p_next->val == OV_VAL_TERM))) {
		if (p_next->reg == 0xFE) {
			delay_ms(5);
		} else {
			twi_packet_regs.addr[0] = p_next->reg;
			twi_packet_regs.addr_length = 1;
  400386:	2501      	movs	r5, #1
			twi_packet_regs.chip = OV_I2C_SENSOR_ADDRESS;
			twi_packet_regs.length = 1;
			twi_packet_regs.buffer = &(p_next->val);

			ul_err = ov_write_reg(p_twi, &twi_packet_regs);
  400388:	4e12      	ldr	r6, [pc, #72]	; (4003d4 <ov_write_regs+0x58>)
	ov_reg *p_next = (ov_reg *)p_reg_list;

	while (!((p_next->reg == OV_REG_TERM) &&
			(p_next->val == OV_VAL_TERM))) {
		if (p_next->reg == 0xFE) {
			delay_ms(5);
  40038a:	f8df 804c 	ldr.w	r8, [pc, #76]	; 4003d8 <ov_write_regs+0x5c>
	uint32_t ul_err;
	uint32_t ul_size = 0;
	twi_packet_t twi_packet_regs;
	ov_reg *p_next = (ov_reg *)p_reg_list;

	while (!((p_next->reg == OV_REG_TERM) &&
  40038e:	e013      	b.n	4003b8 <ov_write_regs+0x3c>
			(p_next->val == OV_VAL_TERM))) {
		if (p_next->reg == 0xFE) {
  400390:	2bfe      	cmp	r3, #254	; 0xfe
  400392:	d103      	bne.n	40039c <ov_write_regs+0x20>
			delay_ms(5);
  400394:	f24a 706a 	movw	r0, #42858	; 0xa76a
  400398:	47c0      	blx	r8
  40039a:	e00c      	b.n	4003b6 <ov_write_regs+0x3a>
		} else {
			twi_packet_regs.addr[0] = p_next->reg;
  40039c:	f88d 3004 	strb.w	r3, [sp, #4]
			twi_packet_regs.addr_length = 1;
  4003a0:	9502      	str	r5, [sp, #8]
			twi_packet_regs.chip = OV_I2C_SENSOR_ADDRESS;
  4003a2:	2321      	movs	r3, #33	; 0x21
  4003a4:	f88d 3014 	strb.w	r3, [sp, #20]
			twi_packet_regs.length = 1;
  4003a8:	9504      	str	r5, [sp, #16]
			twi_packet_regs.buffer = &(p_next->val);
  4003aa:	9203      	str	r2, [sp, #12]

			ul_err = ov_write_reg(p_twi, &twi_packet_regs);
  4003ac:	4638      	mov	r0, r7
  4003ae:	a901      	add	r1, sp, #4
  4003b0:	47b0      	blx	r6
			ul_size++;

			if (ul_err == TWI_BUSY) {
  4003b2:	2808      	cmp	r0, #8
  4003b4:	d00a      	beq.n	4003cc <ov_write_regs+0x50>
  4003b6:	3402      	adds	r4, #2
  4003b8:	4622      	mov	r2, r4
	uint32_t ul_err;
	uint32_t ul_size = 0;
	twi_packet_t twi_packet_regs;
	ov_reg *p_next = (ov_reg *)p_reg_list;

	while (!((p_next->reg == OV_REG_TERM) &&
  4003ba:	f814 3c01 	ldrb.w	r3, [r4, #-1]
  4003be:	2bff      	cmp	r3, #255	; 0xff
  4003c0:	d1e6      	bne.n	400390 <ov_write_regs+0x14>
  4003c2:	7821      	ldrb	r1, [r4, #0]
  4003c4:	29ff      	cmp	r1, #255	; 0xff
  4003c6:	d1e9      	bne.n	40039c <ov_write_regs+0x20>
			}
		}

		p_next++;
	}
	return 0;
  4003c8:	2000      	movs	r0, #0
  4003ca:	e000      	b.n	4003ce <ov_write_regs+0x52>

			ul_err = ov_write_reg(p_twi, &twi_packet_regs);
			ul_size++;

			if (ul_err == TWI_BUSY) {
				return ul_err;
  4003cc:	2008      	movs	r0, #8
		}

		p_next++;
	}
	return 0;
}
  4003ce:	b006      	add	sp, #24
  4003d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4003d4:	00400371 	.word	0x00400371
  4003d8:	20000001 	.word	0x20000001

004003dc <ov_init>:
 *
 * \param p_twi TWI interface.
 * \return 0 on success, 1 otherwise.
 */
uint32_t ov_init(Twi* const p_twi)
{
  4003dc:	b5f0      	push	{r4, r5, r6, r7, lr}
  4003de:	b08d      	sub	sp, #52	; 0x34
  4003e0:	4607      	mov	r7, r0
 */
static uint32_t ov_id(Twi* const p_twi)
{
	twi_packet_t packet_pid;
	twi_packet_t packet_ver;
	uint32_t ul_id = 0;
  4003e2:	2300      	movs	r3, #0
  4003e4:	9300      	str	r3, [sp, #0]
	uint32_t ul_ver = 0;
  4003e6:	9301      	str	r3, [sp, #4]

	/* OV_PID */
	packet_pid.chip = OV_I2C_SENSOR_ADDRESS;
  4003e8:	2621      	movs	r6, #33	; 0x21
  4003ea:	f88d 6018 	strb.w	r6, [sp, #24]
	packet_pid.addr[0] = OV7740_PIDH;
  4003ee:	230a      	movs	r3, #10
  4003f0:	f88d 3008 	strb.w	r3, [sp, #8]
	packet_pid.addr_length = 1;
  4003f4:	2401      	movs	r4, #1
  4003f6:	9403      	str	r4, [sp, #12]
	packet_pid.buffer = &ul_id;
  4003f8:	f8cd d010 	str.w	sp, [sp, #16]
	packet_pid.length = 1;
  4003fc:	9405      	str	r4, [sp, #20]

	ov_read_reg(p_twi, &packet_pid);
  4003fe:	a902      	add	r1, sp, #8
  400400:	4d3a      	ldr	r5, [pc, #232]	; (4004ec <ov_init+0x110>)
  400402:	47a8      	blx	r5

	/* OV_VER */
	packet_ver.chip = OV_I2C_SENSOR_ADDRESS;
  400404:	f88d 602c 	strb.w	r6, [sp, #44]	; 0x2c
	packet_ver.addr[0] = OV7740_PIDL;
  400408:	230b      	movs	r3, #11
  40040a:	f88d 301c 	strb.w	r3, [sp, #28]
	packet_ver.addr_length = 1;
  40040e:	9408      	str	r4, [sp, #32]
	packet_ver.buffer = &ul_ver;
  400410:	ab01      	add	r3, sp, #4
  400412:	9309      	str	r3, [sp, #36]	; 0x24
	packet_ver.length = 1;
  400414:	940a      	str	r4, [sp, #40]	; 0x28

	ov_read_reg(p_twi, &packet_ver);
  400416:	4638      	mov	r0, r7
  400418:	a907      	add	r1, sp, #28
  40041a:	47a8      	blx	r5
	return ((uint32_t)(ul_id << 8) | ul_ver);
  40041c:	9b01      	ldr	r3, [sp, #4]
  40041e:	9a00      	ldr	r2, [sp, #0]
  400420:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
{
	uint32_t ul_id = 0;

	ul_id = ov_id( p_twi );

	if (((ul_id >> 8)&0xff)  == OV7740_PIDH_DEFAULT) {
  400424:	f3c3 2307 	ubfx	r3, r3, #8, #8
  400428:	2b77      	cmp	r3, #119	; 0x77
  40042a:	d135      	bne.n	400498 <ov_init+0xbc>
 * \return 0 if the sensor is present, 1 otherwise.
 */
static uint32_t ov_manufacturer(Twi* const p_twi)
{
	twi_packet_t twi_packet;
	uint32_t ul_midh = 0;
  40042c:	2300      	movs	r3, #0
  40042e:	9301      	str	r3, [sp, #4]
	uint32_t ul_midl = 0;
  400430:	9302      	str	r3, [sp, #8]

	/* OV_MIDH */
	twi_packet.addr[0] = OV7740_MIDH;
  400432:	231c      	movs	r3, #28
  400434:	f88d 301c 	strb.w	r3, [sp, #28]
	twi_packet.addr_length = 1;
  400438:	9408      	str	r4, [sp, #32]
	twi_packet.chip = OV_I2C_SENSOR_ADDRESS;
  40043a:	f88d 602c 	strb.w	r6, [sp, #44]	; 0x2c
	twi_packet.buffer = &ul_midh;
  40043e:	ab01      	add	r3, sp, #4
  400440:	9309      	str	r3, [sp, #36]	; 0x24
	twi_packet.length = 1;
  400442:	940a      	str	r4, [sp, #40]	; 0x28

	ov_read_reg(p_twi, &twi_packet);
  400444:	4638      	mov	r0, r7
  400446:	a907      	add	r1, sp, #28
  400448:	47a8      	blx	r5

	/* OV_MIDL */
	twi_packet.addr[0] = OV7740_MIDL;
  40044a:	231d      	movs	r3, #29
  40044c:	f88d 301c 	strb.w	r3, [sp, #28]
	twi_packet.addr_length = 1;
  400450:	9408      	str	r4, [sp, #32]
	twi_packet.chip = OV_I2C_SENSOR_ADDRESS;
  400452:	f88d 602c 	strb.w	r6, [sp, #44]	; 0x2c
	twi_packet.buffer = &ul_midl;
  400456:	ab02      	add	r3, sp, #8
  400458:	9309      	str	r3, [sp, #36]	; 0x24
	twi_packet.length = 1;
  40045a:	940a      	str	r4, [sp, #40]	; 0x28

	ov_read_reg(p_twi, &twi_packet);
  40045c:	4638      	mov	r0, r7
  40045e:	a907      	add	r1, sp, #28
  400460:	47a8      	blx	r5

	if ((ul_midh == OV7740_MIDH_DEFAULT) && (ul_midl == OV7740_MIDL_DEFAULT)) {
  400462:	9b01      	ldr	r3, [sp, #4]
  400464:	2b7f      	cmp	r3, #127	; 0x7f
  400466:	d13e      	bne.n	4004e6 <ov_init+0x10a>
  400468:	9b02      	ldr	r3, [sp, #8]
  40046a:	2ba2      	cmp	r3, #162	; 0xa2
  40046c:	d13b      	bne.n	4004e6 <ov_init+0x10a>
  40046e:	e015      	b.n	40049c <ov_init+0xc0>
	if (ul_value != ul_entervalue) {
		return 1;
	}

	/* return old value */
	twi_packet.buffer = &ul_oldvalue;
  400470:	ab01      	add	r3, sp, #4
  400472:	9309      	str	r3, [sp, #36]	; 0x24
	ov_write_reg(p_twi, &twi_packet);
  400474:	4638      	mov	r0, r7
  400476:	a907      	add	r1, sp, #28
  400478:	4b1d      	ldr	r3, [pc, #116]	; (4004f0 <ov_init+0x114>)
  40047a:	4798      	blx	r3

	twi_packet.buffer = &ul_value;
  40047c:	f8cd d024 	str.w	sp, [sp, #36]	; 0x24
	ov_read_reg(p_twi, &twi_packet);
  400480:	4638      	mov	r0, r7
  400482:	a907      	add	r1, sp, #28
  400484:	4b19      	ldr	r3, [pc, #100]	; (4004ec <ov_init+0x110>)
  400486:	4798      	blx	r3

	if (ul_value != ul_oldvalue) {
  400488:	9801      	ldr	r0, [sp, #4]
  40048a:	9b00      	ldr	r3, [sp, #0]
  40048c:	1a18      	subs	r0, r3, r0
  40048e:	bf18      	it	ne
  400490:	2001      	movne	r0, #1
  400492:	e029      	b.n	4004e8 <ov_init+0x10c>

	twi_packet.buffer = &ul_value;
	ov_read_reg(p_twi, &twi_packet);

	if (ul_value != ul_entervalue) {
		return 1;
  400494:	2001      	movs	r0, #1
  400496:	e027      	b.n	4004e8 <ov_init+0x10c>
				return 0;
			}
		}
	}

	return 1;
  400498:	2001      	movs	r0, #1
  40049a:	e025      	b.n	4004e8 <ov_init+0x10c>
 * \return 0 on success, 1 otherwise.
 */
static uint32_t ov_test_write(Twi* const p_twi)
{
	twi_packet_t twi_packet;
	uint32_t ul_value = 0;
  40049c:	2300      	movs	r3, #0
  40049e:	9300      	str	r3, [sp, #0]
	uint32_t ul_oldvalue = 0;
  4004a0:	9301      	str	r3, [sp, #4]
	uint32_t ul_entervalue = 0;
  4004a2:	9302      	str	r3, [sp, #8]

	/* OV_BLUE_GAIN */
	twi_packet.addr[0] = 0x01;
  4004a4:	2301      	movs	r3, #1
  4004a6:	f88d 301c 	strb.w	r3, [sp, #28]
	twi_packet.addr_length = 1;
  4004aa:	9308      	str	r3, [sp, #32]
	twi_packet.chip = OV_I2C_SENSOR_ADDRESS;
  4004ac:	2221      	movs	r2, #33	; 0x21
  4004ae:	f88d 202c 	strb.w	r2, [sp, #44]	; 0x2c
	twi_packet.length = 1;
  4004b2:	930a      	str	r3, [sp, #40]	; 0x28

	twi_packet.buffer = &ul_oldvalue;
  4004b4:	ab01      	add	r3, sp, #4
  4004b6:	9309      	str	r3, [sp, #36]	; 0x24
	ov_read_reg(p_twi, &twi_packet);
  4004b8:	4638      	mov	r0, r7
  4004ba:	a907      	add	r1, sp, #28
  4004bc:	4c0b      	ldr	r4, [pc, #44]	; (4004ec <ov_init+0x110>)
  4004be:	47a0      	blx	r4

	ul_entervalue = 0xAD;
  4004c0:	ab0c      	add	r3, sp, #48	; 0x30
  4004c2:	22ad      	movs	r2, #173	; 0xad
  4004c4:	f843 2d28 	str.w	r2, [r3, #-40]!
	twi_packet.buffer = &ul_entervalue;
  4004c8:	9309      	str	r3, [sp, #36]	; 0x24
	ov_write_reg(p_twi, &twi_packet);
  4004ca:	4638      	mov	r0, r7
  4004cc:	a907      	add	r1, sp, #28
  4004ce:	4b08      	ldr	r3, [pc, #32]	; (4004f0 <ov_init+0x114>)
  4004d0:	4798      	blx	r3

	twi_packet.buffer = &ul_value;
  4004d2:	f8cd d024 	str.w	sp, [sp, #36]	; 0x24
	ov_read_reg(p_twi, &twi_packet);
  4004d6:	4638      	mov	r0, r7
  4004d8:	a907      	add	r1, sp, #28
  4004da:	47a0      	blx	r4

	if (ul_value != ul_entervalue) {
  4004dc:	9b02      	ldr	r3, [sp, #8]
  4004de:	9a00      	ldr	r2, [sp, #0]
  4004e0:	429a      	cmp	r2, r3
  4004e2:	d1d7      	bne.n	400494 <ov_init+0xb8>
  4004e4:	e7c4      	b.n	400470 <ov_init+0x94>
				return 0;
			}
		}
	}

	return 1;
  4004e6:	2001      	movs	r0, #1
}
  4004e8:	b00d      	add	sp, #52	; 0x34
  4004ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4004ec:	00400365 	.word	0x00400365
  4004f0:	00400371 	.word	0x00400371

004004f4 <ov_configure>:
 * \param p_twi TWI interface.
 * \param format Specific format to configure.
 * \return 0 on success, 1 otherwise.
 */
uint32_t ov_configure(Twi* const p_twi, const e_ov7740_format format)
{
  4004f4:	b508      	push	{r3, lr}
	const ov_reg *p_regs_conf = NULL;

	/* Common register initialization */
	switch (format) {
  4004f6:	2908      	cmp	r1, #8
  4004f8:	d814      	bhi.n	400524 <ov_configure+0x30>
  4004fa:	e8df f001 	tbb	[pc, r1]
  4004fe:	0515      	.short	0x0515
  400500:	0b090717 	.word	0x0b090717
  400504:	0f0d      	.short	0x0f0d
  400506:	11          	.byte	0x11
  400507:	00          	.byte	0x00
	case QVGA_YUV422_10FPS:
		p_regs_conf = OV7740_QVGA_YUV422_10FPS;
		break;

	case QVGA_YUV422_15FPS:
		p_regs_conf = OV7740_QVGA_YUV422_15FPS;
  400508:	490b      	ldr	r1, [pc, #44]	; (400538 <ov_configure+0x44>)
  40050a:	e010      	b.n	40052e <ov_configure+0x3a>
	case QVGA_YUV422_20FPS:
		p_regs_conf = OV7740_QVGA_YUV422_20FPS;
		break;

	case QVGA_YUV422_30FPS:
		p_regs_conf = OV7740_QVGA_YUV422_30FPS;
  40050c:	490b      	ldr	r1, [pc, #44]	; (40053c <ov_configure+0x48>)
		break;
  40050e:	e00e      	b.n	40052e <ov_configure+0x3a>

	case QVGA_RGB888:
		p_regs_conf = OV7740_QVGA_RGB888;
  400510:	490b      	ldr	r1, [pc, #44]	; (400540 <ov_configure+0x4c>)
		break;
  400512:	e00c      	b.n	40052e <ov_configure+0x3a>

	case QQVGA_YUV422:
		p_regs_conf = OV7740_QQVGA_YUV422;
  400514:	490b      	ldr	r1, [pc, #44]	; (400544 <ov_configure+0x50>)
		break;
  400516:	e00a      	b.n	40052e <ov_configure+0x3a>

	case QQVGA_RGB888:
		p_regs_conf = OV7740_QQVGA_RGB888;
  400518:	490b      	ldr	r1, [pc, #44]	; (400548 <ov_configure+0x54>)
		break;
  40051a:	e008      	b.n	40052e <ov_configure+0x3a>

	case TEST_PATTERN:
		p_regs_conf = OV7740_TEST_PATTERN;
  40051c:	490b      	ldr	r1, [pc, #44]	; (40054c <ov_configure+0x58>)
		break;
  40051e:	e006      	b.n	40052e <ov_configure+0x3a>

	case VGA_YUV422_20FPS:
		p_regs_conf = OV7740_VGA_YUV422_20FPS;
  400520:	490b      	ldr	r1, [pc, #44]	; (400550 <ov_configure+0x5c>)
		break;
  400522:	e004      	b.n	40052e <ov_configure+0x3a>
	if (p_regs_conf != NULL) {
		ov_write_regs( p_twi, p_regs_conf );
		return 0;
	}

	return 1;
  400524:	2001      	movs	r0, #1
  400526:	bd08      	pop	{r3, pc}
	const ov_reg *p_regs_conf = NULL;

	/* Common register initialization */
	switch (format) {
	case QVGA_YUV422_10FPS:
		p_regs_conf = OV7740_QVGA_YUV422_10FPS;
  400528:	490a      	ldr	r1, [pc, #40]	; (400554 <ov_configure+0x60>)
  40052a:	e000      	b.n	40052e <ov_configure+0x3a>
	case QVGA_YUV422_15FPS:
		p_regs_conf = OV7740_QVGA_YUV422_15FPS;
		break;

	case QVGA_YUV422_20FPS:
		p_regs_conf = OV7740_QVGA_YUV422_20FPS;
  40052c:	490a      	ldr	r1, [pc, #40]	; (400558 <ov_configure+0x64>)
	default:
		break;
	}

	if (p_regs_conf != NULL) {
		ov_write_regs( p_twi, p_regs_conf );
  40052e:	4b0b      	ldr	r3, [pc, #44]	; (40055c <ov_configure+0x68>)
  400530:	4798      	blx	r3
		return 0;
  400532:	2000      	movs	r0, #0
	}

	return 1;
}
  400534:	bd08      	pop	{r3, pc}
  400536:	bf00      	nop
  400538:	004035c0 	.word	0x004035c0
  40053c:	00403b6c 	.word	0x00403b6c
  400540:	004036b0 	.word	0x004036b0
  400544:	00403a78 	.word	0x00403a78
  400548:	004034cc 	.word	0x004034cc
  40054c:	004037a4 	.word	0x004037a4
  400550:	004033dc 	.word	0x004033dc
  400554:	00403988 	.word	0x00403988
  400558:	00403898 	.word	0x00403898
  40055c:	0040037d 	.word	0x0040037d

00400560 <aat31xx_set_backlight>:
 * \param ul_level backlight level.
 *
 * \note pin BOARD_AAT31XX_SET_GPIO must be configured before calling aat31xx_set_backlight.
 */
void aat31xx_set_backlight(uint32_t ul_level)
{
  400560:	b470      	push	{r4, r5, r6}
  400562:	b083      	sub	sp, #12
	volatile uint32_t ul_delay;
	uint32_t i;

#ifdef CONF_BOARD_AAT3155
	ul_level = AAT31XX_MAX_BACKLIGHT_LEVEL - ul_level + 1;
  400564:	f1c0 0011 	rsb	r0, r0, #17
#ifdef CONF_BOARD_AAT3193
	ul_level = AAT31XX_MAX_BACKLIGHT_LEVEL - ul_level + 1;
#endif

	/* Ensure valid level */
	ul_level = (ul_level > AAT31XX_MAX_BACKLIGHT_LEVEL) ? AAT31XX_MAX_BACKLIGHT_LEVEL : ul_level;
  400568:	2810      	cmp	r0, #16
  40056a:	bf28      	it	cs
  40056c:	2010      	movcs	r0, #16
	ul_level = (ul_level < AAT31XX_MIN_BACKLIGHT_LEVEL) ? AAT31XX_MIN_BACKLIGHT_LEVEL : ul_level;
  40056e:	2800      	cmp	r0, #0
  400570:	bf08      	it	eq
  400572:	2001      	moveq	r0, #1
 * \param ul_level backlight level.
 *
 * \note pin BOARD_AAT31XX_SET_GPIO must be configured before calling aat31xx_set_backlight.
 */
void aat31xx_set_backlight(uint32_t ul_level)
{
  400574:	2100      	movs	r1, #0
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  400576:	4e10      	ldr	r6, [pc, #64]	; (4005b8 <aat31xx_set_backlight+0x58>)
  400578:	f44f 5500 	mov.w	r5, #8192	; 0x2000
	ul_level = (ul_level < AAT31XX_MIN_BACKLIGHT_LEVEL) ? AAT31XX_MIN_BACKLIGHT_LEVEL : ul_level;

	/* Set new backlight level */
	for (i = 0; i < ul_level; i++) {
		ioport_set_pin_level(BOARD_AAT31XX_SET_GPIO, IOPORT_PIN_LEVEL_LOW);
		ul_delay = DELAY_PULSE;
  40057c:	2418      	movs	r4, #24
  40057e:	6375      	str	r5, [r6, #52]	; 0x34
  400580:	9401      	str	r4, [sp, #4]
		while (ul_delay--) {
  400582:	9b01      	ldr	r3, [sp, #4]
  400584:	1e5a      	subs	r2, r3, #1
  400586:	9201      	str	r2, [sp, #4]
  400588:	2b00      	cmp	r3, #0
  40058a:	d1fa      	bne.n	400582 <aat31xx_set_backlight+0x22>
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  40058c:	6335      	str	r5, [r6, #48]	; 0x30
		}

		ioport_set_pin_level(BOARD_AAT31XX_SET_GPIO, IOPORT_PIN_LEVEL_HIGH);

		ul_delay = DELAY_PULSE;
  40058e:	9401      	str	r4, [sp, #4]
		while (ul_delay--) {
  400590:	9b01      	ldr	r3, [sp, #4]
  400592:	1e5a      	subs	r2, r3, #1
  400594:	9201      	str	r2, [sp, #4]
  400596:	2b00      	cmp	r3, #0
  400598:	d1fa      	bne.n	400590 <aat31xx_set_backlight+0x30>
	/* Ensure valid level */
	ul_level = (ul_level > AAT31XX_MAX_BACKLIGHT_LEVEL) ? AAT31XX_MAX_BACKLIGHT_LEVEL : ul_level;
	ul_level = (ul_level < AAT31XX_MIN_BACKLIGHT_LEVEL) ? AAT31XX_MIN_BACKLIGHT_LEVEL : ul_level;

	/* Set new backlight level */
	for (i = 0; i < ul_level; i++) {
  40059a:	3101      	adds	r1, #1
  40059c:	4281      	cmp	r1, r0
  40059e:	d3ee      	bcc.n	40057e <aat31xx_set_backlight+0x1e>
		ul_delay = DELAY_PULSE;
		while (ul_delay--) {
		}
	}

	ul_delay = DELAY_ENABLE;
  4005a0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
  4005a4:	9301      	str	r3, [sp, #4]
	while (ul_delay--) {
  4005a6:	9b01      	ldr	r3, [sp, #4]
  4005a8:	1e5a      	subs	r2, r3, #1
  4005aa:	9201      	str	r2, [sp, #4]
  4005ac:	2b00      	cmp	r3, #0
  4005ae:	d1fa      	bne.n	4005a6 <aat31xx_set_backlight+0x46>
	}
}
  4005b0:	b003      	add	sp, #12
  4005b2:	bc70      	pop	{r4, r5, r6}
  4005b4:	4770      	bx	lr
  4005b6:	bf00      	nop
  4005b8:	400e1200 	.word	0x400e1200

004005bc <aat31xx_disable_backlight>:

/**
 * \brief Switch off backlight.
 */
void aat31xx_disable_backlight(void)
{
  4005bc:	b082      	sub	sp, #8
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  4005be:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  4005c2:	4b06      	ldr	r3, [pc, #24]	; (4005dc <aat31xx_disable_backlight+0x20>)
  4005c4:	635a      	str	r2, [r3, #52]	; 0x34
	volatile uint32_t ul_delay;

	ioport_set_pin_level(BOARD_AAT31XX_SET_GPIO, IOPORT_PIN_LEVEL_LOW);

	ul_delay = DELAY_DISABLE;
  4005c6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
  4005ca:	9301      	str	r3, [sp, #4]
	while (ul_delay--) {
  4005cc:	9b01      	ldr	r3, [sp, #4]
  4005ce:	1e5a      	subs	r2, r3, #1
  4005d0:	9201      	str	r2, [sp, #4]
  4005d2:	2b00      	cmp	r3, #0
  4005d4:	d1fa      	bne.n	4005cc <aat31xx_disable_backlight+0x10>
	}
}
  4005d6:	b002      	add	sp, #8
  4005d8:	4770      	bx	lr
  4005da:	bf00      	nop
  4005dc:	400e1200 	.word	0x400e1200

004005e0 <ili9325_write_ram>:
 *
 * \param ul_color 24-bits RGB color.
 */
static void ili9325_write_ram(ili9325_color_t ul_color)
{
	LCD_WD((ul_color >> 16) & 0xFF);
  4005e0:	f3c0 4207 	ubfx	r2, r0, #16, #8
	{
		*((volatile uint8_t *)(BOARD_ILI9325_ADDR)) = lcd_index; /* ILI9325 index register address */
	}
	static inline void LCD_WD(uint8_t lcd_data)
	{
		*((volatile uint8_t *)((BOARD_ILI9325_ADDR) | (BOARD_ILI9325_RS))) = lcd_data;
  4005e4:	4b03      	ldr	r3, [pc, #12]	; (4005f4 <ili9325_write_ram+0x14>)
  4005e6:	701a      	strb	r2, [r3, #0]
	LCD_WD((ul_color >> 8) & 0xFF);
  4005e8:	f3c0 2207 	ubfx	r2, r0, #8, #8
  4005ec:	701a      	strb	r2, [r3, #0]
	LCD_WD(ul_color & 0xFF);
  4005ee:	b2c0      	uxtb	r0, r0
  4005f0:	7018      	strb	r0, [r3, #0]
  4005f2:	4770      	bx	lr
  4005f4:	62000002 	.word	0x62000002

004005f8 <ili9325_write_register>:

/* Define EBI access for ILI9325 8-bit System Interface.*/
#if defined(BOARD_ILI9325_ADDR) && defined (BOARD_ILI9325_RS)
	static inline void LCD_IR(uint8_t lcd_index)
	{
		*((volatile uint8_t *)(BOARD_ILI9325_ADDR)) = lcd_index; /* ILI9325 index register address */
  4005f8:	f04f 43c4 	mov.w	r3, #1644167168	; 0x62000000
  4005fc:	2200      	movs	r2, #0
  4005fe:	701a      	strb	r2, [r3, #0]
  400600:	7018      	strb	r0, [r3, #0]
 */
static void ili9325_write_register(uint8_t uc_reg, uint16_t us_data)
{
	LCD_IR(0);
	LCD_IR(uc_reg);
	LCD_WD((us_data >> 8) & 0xFF);
  400602:	0a0a      	lsrs	r2, r1, #8
	}
	static inline void LCD_WD(uint8_t lcd_data)
	{
		*((volatile uint8_t *)((BOARD_ILI9325_ADDR) | (BOARD_ILI9325_RS))) = lcd_data;
  400604:	3302      	adds	r3, #2
  400606:	701a      	strb	r2, [r3, #0]
	LCD_WD(us_data & 0xFF);
  400608:	b2c9      	uxtb	r1, r1
  40060a:	7019      	strb	r1, [r3, #0]
  40060c:	4770      	bx	lr
  40060e:	bf00      	nop

00400610 <ili9325_delay>:

/**
 * \brief Delay function.
 */
static void ili9325_delay(uint32_t ul_ms)
{
  400610:	b082      	sub	sp, #8
	volatile uint32_t i;

	for(i = 0; i < ul_ms; i++) {
  400612:	2300      	movs	r3, #0
  400614:	9301      	str	r3, [sp, #4]
  400616:	9b01      	ldr	r3, [sp, #4]
  400618:	4298      	cmp	r0, r3
  40061a:	d911      	bls.n	400640 <ili9325_delay+0x30>
		for(i = 0; i < 100000; i++) {
  40061c:	2100      	movs	r1, #0
  40061e:	4a09      	ldr	r2, [pc, #36]	; (400644 <ili9325_delay+0x34>)
  400620:	9101      	str	r1, [sp, #4]
  400622:	9b01      	ldr	r3, [sp, #4]
  400624:	4293      	cmp	r3, r2
  400626:	d805      	bhi.n	400634 <ili9325_delay+0x24>
  400628:	9b01      	ldr	r3, [sp, #4]
  40062a:	3301      	adds	r3, #1
  40062c:	9301      	str	r3, [sp, #4]
  40062e:	9b01      	ldr	r3, [sp, #4]
  400630:	4293      	cmp	r3, r2
  400632:	d9f9      	bls.n	400628 <ili9325_delay+0x18>
 */
static void ili9325_delay(uint32_t ul_ms)
{
	volatile uint32_t i;

	for(i = 0; i < ul_ms; i++) {
  400634:	9b01      	ldr	r3, [sp, #4]
  400636:	3301      	adds	r3, #1
  400638:	9301      	str	r3, [sp, #4]
  40063a:	9b01      	ldr	r3, [sp, #4]
  40063c:	4283      	cmp	r3, r0
  40063e:	d3ef      	bcc.n	400620 <ili9325_delay+0x10>
		for(i = 0; i < 100000; i++) {
		}
	}
}
  400640:	b002      	add	sp, #8
  400642:	4770      	bx	lr
  400644:	0001869f 	.word	0x0001869f

00400648 <ili9325_display_on>:

/**
 * \brief Turn on the LCD.
 */
void ili9325_display_on(void)
{
  400648:	b508      	push	{r3, lr}
	ili9325_write_register(ILI9325_DISP_CTRL1,
  40064a:	2007      	movs	r0, #7
  40064c:	f240 1133 	movw	r1, #307	; 0x133
  400650:	4b01      	ldr	r3, [pc, #4]	; (400658 <ili9325_display_on+0x10>)
  400652:	4798      	blx	r3
  400654:	bd08      	pop	{r3, pc}
  400656:	bf00      	nop
  400658:	004005f9 	.word	0x004005f9

0040065c <ili9325_set_foreground_color>:
 * \brief Set foreground color.
 *
 * \param ul_color foreground color.
 */
void ili9325_set_foreground_color(ili9325_color_t ul_color)
{
  40065c:	4a04      	ldr	r2, [pc, #16]	; (400670 <ili9325_set_foreground_color+0x14>)
  40065e:	1f13      	subs	r3, r2, #4
  400660:	f502 726f 	add.w	r2, r2, #956	; 0x3bc
	uint32_t i;

	/* Fill the cache with selected color */
	for (i = 0; i < LCD_DATA_CACHE_SIZE; ++i) {
		g_ul_pixel_cache[i] = ul_color;
  400664:	f843 0f04 	str.w	r0, [r3, #4]!
void ili9325_set_foreground_color(ili9325_color_t ul_color)
{
	uint32_t i;

	/* Fill the cache with selected color */
	for (i = 0; i < LCD_DATA_CACHE_SIZE; ++i) {
  400668:	4293      	cmp	r3, r2
  40066a:	d1fb      	bne.n	400664 <ili9325_set_foreground_color+0x8>
		g_ul_pixel_cache[i] = ul_color;
	}
}
  40066c:	4770      	bx	lr
  40066e:	bf00      	nop
  400670:	2000045c 	.word	0x2000045c

00400674 <ili9325_set_window>:
 * \param ul_width The width of the window.
 * \param ul_height The height of the window.
 */
void ili9325_set_window(uint32_t ul_x, uint32_t ul_y, uint32_t ul_width,
		uint32_t ul_height)
{
  400674:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  400678:	460f      	mov	r7, r1
  40067a:	4615      	mov	r5, r2
  40067c:	461c      	mov	r4, r3
	Assert(ul_y <= 0x13f);
	Assert(ul_width <= (0xF0 - ul_x));
	Assert(ul_height <= (0x140 - ul_y));

	/* Set Horizontal Address Start Position */
	ili9325_write_register(ILI9325_HORIZONTAL_ADDR_START, (uint16_t)ul_x);
  40067e:	fa1f f880 	uxth.w	r8, r0
  400682:	2050      	movs	r0, #80	; 0x50
  400684:	4641      	mov	r1, r8
  400686:	4e09      	ldr	r6, [pc, #36]	; (4006ac <ili9325_set_window+0x38>)
  400688:	47b0      	blx	r6
  40068a:	1e69      	subs	r1, r5, #1

	/* Set Horizontal Address End Position */
	ili9325_write_register(ILI9325_HORIZONTAL_ADDR_END, (uint16_t)(ul_x + ul_width - 1));
  40068c:	4441      	add	r1, r8
  40068e:	2051      	movs	r0, #81	; 0x51
  400690:	b289      	uxth	r1, r1
  400692:	47b0      	blx	r6

	/* Set Vertical Address Start Position */
	ili9325_write_register(ILI9325_VERTICAL_ADDR_START, (uint16_t)ul_y);
  400694:	b2bd      	uxth	r5, r7
  400696:	2052      	movs	r0, #82	; 0x52
  400698:	4629      	mov	r1, r5
  40069a:	47b0      	blx	r6
  40069c:	1e61      	subs	r1, r4, #1

	/* Set Vertical Address End Position */
	ili9325_write_register(ILI9325_VERTICAL_ADDR_END, (uint16_t)(ul_y + ul_height - 1));
  40069e:	4429      	add	r1, r5
  4006a0:	2053      	movs	r0, #83	; 0x53
  4006a2:	b289      	uxth	r1, r1
  4006a4:	47b0      	blx	r6
  4006a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4006aa:	bf00      	nop
  4006ac:	004005f9 	.word	0x004005f9

004006b0 <ili9325_set_cursor_position>:
 *
 * \param us_x X coordinate of upper-left corner on LCD.
 * \param us_y Y coordinate of upper-left corner on LCD.
 */
void ili9325_set_cursor_position(uint16_t us_x, uint16_t us_y)
{
  4006b0:	b538      	push	{r3, r4, r5, lr}
  4006b2:	4603      	mov	r3, r0
  4006b4:	460d      	mov	r5, r1
	/* GRAM Horizontal/Vertical Address Set (R20h, R21h) */
	ili9325_write_register(ILI9325_HORIZONTAL_GRAM_ADDR_SET, us_x); /* column */
  4006b6:	2020      	movs	r0, #32
  4006b8:	4619      	mov	r1, r3
  4006ba:	4c03      	ldr	r4, [pc, #12]	; (4006c8 <ili9325_set_cursor_position+0x18>)
  4006bc:	47a0      	blx	r4
	ili9325_write_register(ILI9325_VERTICAL_GRAM_ADDR_SET, us_y); /* row */
  4006be:	2021      	movs	r0, #33	; 0x21
  4006c0:	4629      	mov	r1, r5
  4006c2:	47a0      	blx	r4
  4006c4:	bd38      	pop	{r3, r4, r5, pc}
  4006c6:	bf00      	nop
  4006c8:	004005f9 	.word	0x004005f9

004006cc <ili9325_init>:

/* Define EBI access for ILI9325 8-bit System Interface.*/
#if defined(BOARD_ILI9325_ADDR) && defined (BOARD_ILI9325_RS)
	static inline void LCD_IR(uint8_t lcd_index)
	{
		*((volatile uint8_t *)(BOARD_ILI9325_ADDR)) = lcd_index; /* ILI9325 index register address */
  4006cc:	f04f 43c4 	mov.w	r3, #1644167168	; 0x62000000
  4006d0:	2200      	movs	r2, #0
  4006d2:	701a      	strb	r2, [r3, #0]
  4006d4:	701a      	strb	r2, [r3, #0]
	{
		*((volatile uint8_t *)((BOARD_ILI9325_ADDR) | (BOARD_ILI9325_RS))) = lcd_data;
	}
	static inline uint8_t LCD_RD(void)
	{
		return *((volatile uint8_t *)((BOARD_ILI9325_ADDR) | (BOARD_ILI9325_RS)));
  4006d6:	4a5f      	ldr	r2, [pc, #380]	; (400854 <ili9325_init+0x188>)
  4006d8:	7811      	ldrb	r1, [r2, #0]
  4006da:	7813      	ldrb	r3, [r2, #0]
static uint16_t ili9325_lcd_get_16(void)
{
	uint16_t us_value;

	us_value = LCD_RD();
	us_value = (us_value << 8) | LCD_RD();
  4006dc:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
uint32_t ili9325_init(struct ili9325_opt_t *p_opt)
{
	/* Check ILI9325 chipid */
	uint16_t chipid = ili9325_read_register(ILI9325_DEVICE_CODE_REG); /* Driver Code Read (R00h) */

	if (chipid != ILI9325_DEVICE_CODE) {
  4006e0:	b21b      	sxth	r3, r3
  4006e2:	4a5d      	ldr	r2, [pc, #372]	; (400858 <ili9325_init+0x18c>)
  4006e4:	4293      	cmp	r3, r2
  4006e6:	f040 80b3 	bne.w	400850 <ili9325_init+0x184>
 * \param p_opt pointer to ILI9325 option structure.
 *
 * \return 0 if initialization succeeds, otherwise fails.
 */
uint32_t ili9325_init(struct ili9325_opt_t *p_opt)
{
  4006ea:	b570      	push	{r4, r5, r6, lr}
  4006ec:	4605      	mov	r5, r0
	if (chipid != ILI9325_DEVICE_CODE) {
		return 1;
	}

	/* Turn off LCD */
	ili9325_write_register(ILI9325_DISP_CTRL1, ILI9325_DISP_CTRL1_GON |
  4006ee:	2007      	movs	r0, #7
  4006f0:	2133      	movs	r1, #51	; 0x33
  4006f2:	4c5a      	ldr	r4, [pc, #360]	; (40085c <ili9325_init+0x190>)
  4006f4:	47a0      	blx	r4
			ILI9325_DISP_CTRL1_DTE | ILI9325_DISP_CTRL1_D(0x03));

	/* Start initial sequence */
	/* Disable sleep and standby mode*/
	ili9325_write_register(ILI9325_POWER_CTRL1, 0x0000);
  4006f6:	2010      	movs	r0, #16
  4006f8:	2100      	movs	r1, #0
  4006fa:	47a0      	blx	r4
	/* Start internal OSC */
	ili9325_write_register(ILI9325_START_OSC_CTRL, ILI9325_START_OSC_CTRL_EN);
  4006fc:	2000      	movs	r0, #0
  4006fe:	2101      	movs	r1, #1
  400700:	47a0      	blx	r4
	/* Set SS bit and direction output from S720 to S1 */
	ili9325_write_register(ILI9325_DRIVER_OUTPUT_CTRL1, ILI9325_DRIVER_OUTPUT_CTRL1_SS);
  400702:	2001      	movs	r0, #1
  400704:	f44f 7180 	mov.w	r1, #256	; 0x100
  400708:	47a0      	blx	r4
	/* Set 1 line inversion */
	ili9325_write_register(ILI9325_LCD_DRIVING_CTRL, ILI9325_LCD_DRIVING_CTRL_BIT10 |
  40070a:	2002      	movs	r0, #2
  40070c:	f44f 61e0 	mov.w	r1, #1792	; 0x700
  400710:	47a0      	blx	r4
			ILI9325_LCD_DRIVING_CTRL_EOR | ILI9325_LCD_DRIVING_CTRL_BC0);
	/* Disable resizing feature */
	ili9325_write_register(ILI9325_RESIZE_CTRL, 0x0000);
  400712:	2004      	movs	r0, #4
  400714:	2100      	movs	r1, #0
  400716:	47a0      	blx	r4
	/* Set the back porch and front porch */
	ili9325_write_register(ILI9325_DISP_CTRL2, ILI9325_DISP_CTRL2_BP(0x07) |
  400718:	2008      	movs	r0, #8
  40071a:	f240 2107 	movw	r1, #519	; 0x207
  40071e:	47a0      	blx	r4
			ILI9325_DISP_CTRL2_FP(0x02));
	/* Set non-display area refresh cycle ISC[3:0] */
	ili9325_write_register(ILI9325_DISP_CTRL3, 0x0000);
  400720:	2009      	movs	r0, #9
  400722:	2100      	movs	r1, #0
  400724:	47a0      	blx	r4
	/* Disable FMARK function */
	ili9325_write_register(ILI9325_DISP_CTRL4, 0x0000);
  400726:	200a      	movs	r0, #10
  400728:	2100      	movs	r1, #0
  40072a:	47a0      	blx	r4
	/* 18-bit RGB interface and writing display data by the system interface */
	ili9325_write_register(ILI9325_RGB_DISP_INTERFACE_CTRL1, 0x0000);
  40072c:	200c      	movs	r0, #12
  40072e:	2100      	movs	r1, #0
  400730:	47a0      	blx	r4
	/* Set the output position of frame cycle */
	ili9325_write_register(ILI9325_FRAME_MAKER_POS, 0x0000);
  400732:	200d      	movs	r0, #13
  400734:	2100      	movs	r1, #0
  400736:	47a0      	blx	r4
	/* RGB interface polarity */
	ili9325_write_register(ILI9325_RGB_DISP_INTERFACE_CTRL2, 0x0000);
  400738:	200f      	movs	r0, #15
  40073a:	2100      	movs	r1, #0
  40073c:	47a0      	blx	r4

	/* Power on sequence */
	/* Disable sleep and standby mode */
	ili9325_write_register(ILI9325_POWER_CTRL1, 0x0000);
  40073e:	2010      	movs	r0, #16
  400740:	2100      	movs	r1, #0
  400742:	47a0      	blx	r4
	/* Selects the operating frequency of the step-up circuit 1,2 and Sets the ratio factor of Vci */
	ili9325_write_register(ILI9325_POWER_CTRL2, 0x0000);
  400744:	2011      	movs	r0, #17
  400746:	2100      	movs	r1, #0
  400748:	47a0      	blx	r4
	/* Set VREG1OUT voltage */
	ili9325_write_register(ILI9325_POWER_CTRL3, 0x0000);
  40074a:	2012      	movs	r0, #18
  40074c:	2100      	movs	r1, #0
  40074e:	47a0      	blx	r4
	/* Set VCOM amplitude */
	ili9325_write_register(ILI9325_POWER_CTRL4, 0x0000);
  400750:	2013      	movs	r0, #19
  400752:	2100      	movs	r1, #0
  400754:	47a0      	blx	r4
	ili9325_delay(200);
  400756:	20c8      	movs	r0, #200	; 0xc8
  400758:	4e41      	ldr	r6, [pc, #260]	; (400860 <ili9325_init+0x194>)
  40075a:	47b0      	blx	r6

	/* Enable power supply and source driver */
	/* Adjusts the constant current and Sets the factor used in the step-up circuits.*/
	ili9325_write_register(ILI9325_POWER_CTRL1, ILI9325_POWER_CTRL1_SAP |
  40075c:	2010      	movs	r0, #16
  40075e:	f241 2190 	movw	r1, #4752	; 0x1290
  400762:	47a0      	blx	r4
			ILI9325_POWER_CTRL1_BT(0x02) | ILI9325_POWER_CTRL1_APE | ILI9325_POWER_CTRL1_AP(0x01));
	/* Select the operating frequency of the step-up circuit 1,2 and Sets the ratio factor of Vci */
	ili9325_write_register(ILI9325_POWER_CTRL2, ILI9325_POWER_CTRL2_DC1(0x02) |
  400764:	2011      	movs	r0, #17
  400766:	f240 2127 	movw	r1, #551	; 0x227
  40076a:	47a0      	blx	r4
			ILI9325_POWER_CTRL2_DC0(0x02) | ILI9325_POWER_CTRL2_VC(0x07));
	ili9325_delay(50);
  40076c:	2032      	movs	r0, #50	; 0x32
  40076e:	47b0      	blx	r6
	/* Internal reference voltage= Vci */
	ili9325_write_register(ILI9325_POWER_CTRL3, ILI9325_POWER_CTRL3_PON |
  400770:	2012      	movs	r0, #18
  400772:	211b      	movs	r1, #27
  400774:	47a0      	blx	r4
			ILI9325_POWER_CTRL3_VRH(0x0B));
	ili9325_delay(50);
  400776:	2032      	movs	r0, #50	; 0x32
  400778:	47b0      	blx	r6
	/* Set VDV[4:0] for VCOM amplitude */
	ili9325_write_register(ILI9325_POWER_CTRL4, ILI9325_POWER_CTRL4_VDV(0x11));
  40077a:	2013      	movs	r0, #19
  40077c:	f44f 5188 	mov.w	r1, #4352	; 0x1100
  400780:	47a0      	blx	r4
	/* Set VCM[5:0] for VCOMH */
	ili9325_write_register(ILI9325_POWER_CTRL7, ILI9325_POWER_CTRL7_VCM(0x19));
  400782:	2029      	movs	r0, #41	; 0x29
  400784:	2119      	movs	r1, #25
  400786:	47a0      	blx	r4
	/* Set Frame Rate */
	ili9325_write_register(ILI9325_FRAME_RATE_AND_COLOR_CTRL,
  400788:	202b      	movs	r0, #43	; 0x2b
  40078a:	210d      	movs	r1, #13
  40078c:	47a0      	blx	r4
			ILI9325_FRAME_RATE_AND_COLOR_CTRL_FRS(0x0D));
	ili9325_delay(50);
  40078e:	2032      	movs	r0, #50	; 0x32
  400790:	47b0      	blx	r6

	/* Adjust the Gamma Curve */
	ili9325_write_register(ILI9325_GAMMA_CTRL1, 0x0000);
  400792:	2030      	movs	r0, #48	; 0x30
  400794:	2100      	movs	r1, #0
  400796:	47a0      	blx	r4
	ili9325_write_register(ILI9325_GAMMA_CTRL2, ILI9325_GAMMA_CTRL2_KP3(0x02) |
  400798:	2031      	movs	r0, #49	; 0x31
  40079a:	f44f 7101 	mov.w	r1, #516	; 0x204
  40079e:	47a0      	blx	r4
			ILI9325_GAMMA_CTRL2_KP2(0x04));
	ili9325_write_register(ILI9325_GAMMA_CTRL3, ILI9325_GAMMA_CTRL3_KP5(0x02) |
  4007a0:	2032      	movs	r0, #50	; 0x32
  4007a2:	f44f 7100 	mov.w	r1, #512	; 0x200
  4007a6:	47a0      	blx	r4
			ILI9325_GAMMA_CTRL3_KP4(0x00));
	ili9325_write_register(ILI9325_GAMMA_CTRL4, ILI9325_GAMMA_CTRL4_RP1(0x00) |
  4007a8:	2035      	movs	r0, #53	; 0x35
  4007aa:	2107      	movs	r1, #7
  4007ac:	47a0      	blx	r4
			ILI9325_GAMMA_CTRL4_RP0(0x07));
	ili9325_write_register(ILI9325_GAMMA_CTRL5, ILI9325_GAMMA_CTRL5_VRP1(0x14) |
  4007ae:	2036      	movs	r0, #54	; 0x36
  4007b0:	f241 4104 	movw	r1, #5124	; 0x1404
  4007b4:	47a0      	blx	r4
			ILI9325_GAMMA_CTRL5_VRP0(0x04));
	ili9325_write_register(ILI9325_GAMMA_CTRL6, ILI9325_GAMMA_CTRL6_KN1(0x07) |
  4007b6:	2037      	movs	r0, #55	; 0x37
  4007b8:	f240 7105 	movw	r1, #1797	; 0x705
  4007bc:	47a0      	blx	r4
			ILI9325_GAMMA_CTRL6_KN0(0x05));
	ili9325_write_register(ILI9325_GAMMA_CTRL7, ILI9325_GAMMA_CTRL7_KN3(0x03) |
  4007be:	2038      	movs	r0, #56	; 0x38
  4007c0:	f240 3105 	movw	r1, #773	; 0x305
  4007c4:	47a0      	blx	r4
			ILI9325_GAMMA_CTRL7_KN2(0x05));
	ili9325_write_register(ILI9325_GAMMA_CTRL8, ILI9325_GAMMA_CTRL8_KN5(0x07) |
  4007c6:	2039      	movs	r0, #57	; 0x39
  4007c8:	f240 7107 	movw	r1, #1799	; 0x707
  4007cc:	47a0      	blx	r4
			ILI9325_GAMMA_CTRL8_KN4(0x07));
	ili9325_write_register(ILI9325_GAMMA_CTRL9, ILI9325_GAMMA_CTRL9_RN1(0x07) |
  4007ce:	203c      	movs	r0, #60	; 0x3c
  4007d0:	f240 7101 	movw	r1, #1793	; 0x701
  4007d4:	47a0      	blx	r4
			ILI9325_GAMMA_CTRL9_RN0(0x01));
	ili9325_write_register(ILI9325_GAMMA_CTRL10, ILI9325_GAMMA_CTRL10_VRN1(0x00) |
  4007d6:	203d      	movs	r0, #61	; 0x3d
  4007d8:	210e      	movs	r1, #14
  4007da:	47a0      	blx	r4
			ILI9325_GAMMA_CTRL10_VRN0(0x0E));
	/* Use the high speed write mode (HWM=1) */
	/* When TRI = 1, data are transferred to the internal RAM in 8-bit x 3 transfers mode via the 8-bit interface. */
	/* DFM Set the mode of transferring data to the internal RAM when TRI = 1. */
	/* I/D[1:0] = 11 Horizontal : increment Vertical : increment, AM=0:Horizontal */
	ili9325_write_register(ILI9325_ENTRY_MODE, ILI9325_ENTRY_MODE_TRI |
  4007dc:	2003      	movs	r0, #3
  4007de:	f24d 0110 	movw	r1, #53264	; 0xd010
  4007e2:	47a0      	blx	r4
			ILI9325_ENTRY_MODE_DFM | ILI9325_ENTRY_MODE_ID(0x01) |ILI9325_ENTRY_MODE_BGR);
	/* Sets the number of lines to drive the LCD at an interval of 8 lines. */
	/* The scan direction is from G320 to G1 */
	ili9325_write_register(ILI9325_DRIVER_OUTPUT_CTRL2, ILI9325_DRIVER_OUTPUT_CTRL2_GS |
  4007e4:	2060      	movs	r0, #96	; 0x60
  4007e6:	f44f 4127 	mov.w	r1, #42752	; 0xa700
  4007ea:	47a0      	blx	r4
			ILI9325_DRIVER_OUTPUT_CTRL2_NL(0x27));

	/* Vertical Scrolling */
	/* Disable scrolling and enable the grayscale inversion */
	ili9325_write_register(ILI9325_BASE_IMG_DISP_CTRL, ILI9325_BASE_IMG_DISP_CTRL_REV);
  4007ec:	2061      	movs	r0, #97	; 0x61
  4007ee:	2101      	movs	r1, #1
  4007f0:	47a0      	blx	r4
	ili9325_write_register(ILI9325_VERTICAL_SCROLL_CTRL, 0x0000);
  4007f2:	206a      	movs	r0, #106	; 0x6a
  4007f4:	2100      	movs	r1, #0
  4007f6:	47a0      	blx	r4

	/* Disable Partial Display */
	ili9325_write_register(ILI9325_PARTIAL_IMG1_DISP_POS, 0x0000);
  4007f8:	2080      	movs	r0, #128	; 0x80
  4007fa:	2100      	movs	r1, #0
  4007fc:	47a0      	blx	r4
	ili9325_write_register(ILI9325_PARTIAL_IMG1_AREA_START_LINE, 0x0000);
  4007fe:	2081      	movs	r0, #129	; 0x81
  400800:	2100      	movs	r1, #0
  400802:	47a0      	blx	r4
	ili9325_write_register(ILI9325_PARTIAL_IMG1_AREA_END_LINE, 0x0000);
  400804:	2082      	movs	r0, #130	; 0x82
  400806:	2100      	movs	r1, #0
  400808:	47a0      	blx	r4
	ili9325_write_register(ILI9325_PARTIAL_IMG2_DISP_POS, 0x0000);
  40080a:	2083      	movs	r0, #131	; 0x83
  40080c:	2100      	movs	r1, #0
  40080e:	47a0      	blx	r4
	ili9325_write_register(ILI9325_PARTIAL_IMG2_AREA_START_LINE, 0x0000);
  400810:	2084      	movs	r0, #132	; 0x84
  400812:	2100      	movs	r1, #0
  400814:	47a0      	blx	r4
	ili9325_write_register(ILI9325_PARTIAL_IMG2_AREA_END_LINE, 0x0000);
  400816:	2085      	movs	r0, #133	; 0x85
  400818:	2100      	movs	r1, #0
  40081a:	47a0      	blx	r4

	/* Panel Control */
	ili9325_write_register(ILI9325_PANEL_INTERFACE_CTRL1,
  40081c:	2090      	movs	r0, #144	; 0x90
  40081e:	2110      	movs	r1, #16
  400820:	47a0      	blx	r4
			ILI9325_PANEL_INTERFACE_CTRL1_RTNI(0x10));
	ili9325_write_register(ILI9325_PANEL_INTERFACE_CTRL2,
  400822:	2092      	movs	r0, #146	; 0x92
  400824:	f44f 61c0 	mov.w	r1, #1536	; 0x600
  400828:	47a0      	blx	r4
			ILI9325_PANEL_INTERFACE_CTRL2_NOWI(0x06));
	ili9325_write_register(ILI9325_PANEL_INTERFACE_CTRL4,
  40082a:	2095      	movs	r0, #149	; 0x95
  40082c:	f44f 7188 	mov.w	r1, #272	; 0x110
  400830:	47a0      	blx	r4
			ILI9325_PANEL_INTERFACE_CTRL4_DIVE(0x01) |
			ILI9325_PANEL_INTERFACE_CTRL4_RTNE(0x10));

	ili9325_set_window(0, 0,p_opt->ul_width,p_opt->ul_height);
  400832:	2000      	movs	r0, #0
  400834:	4601      	mov	r1, r0
  400836:	682a      	ldr	r2, [r5, #0]
  400838:	686b      	ldr	r3, [r5, #4]
  40083a:	4c0a      	ldr	r4, [pc, #40]	; (400864 <ili9325_init+0x198>)
  40083c:	47a0      	blx	r4
	ili9325_set_foreground_color(p_opt->foreground_color);
  40083e:	68a8      	ldr	r0, [r5, #8]
  400840:	4b09      	ldr	r3, [pc, #36]	; (400868 <ili9325_init+0x19c>)
  400842:	4798      	blx	r3
	ili9325_set_cursor_position(0, 0);
  400844:	2000      	movs	r0, #0
  400846:	4601      	mov	r1, r0
  400848:	4b08      	ldr	r3, [pc, #32]	; (40086c <ili9325_init+0x1a0>)
  40084a:	4798      	blx	r3
	return 0;
  40084c:	2000      	movs	r0, #0
  40084e:	bd70      	pop	{r4, r5, r6, pc}
{
	/* Check ILI9325 chipid */
	uint16_t chipid = ili9325_read_register(ILI9325_DEVICE_CODE_REG); /* Driver Code Read (R00h) */

	if (chipid != ILI9325_DEVICE_CODE) {
		return 1;
  400850:	2001      	movs	r0, #1
  400852:	4770      	bx	lr
  400854:	62000002 	.word	0x62000002
  400858:	ffff9325 	.word	0xffff9325
  40085c:	004005f9 	.word	0x004005f9
  400860:	00400611 	.word	0x00400611
  400864:	00400675 	.word	0x00400675
  400868:	0040065d 	.word	0x0040065d
  40086c:	004006b1 	.word	0x004006b1

00400870 <ili9325_fill>:
 * \brief Fill the LCD buffer with the specified color.
 *
 * \param ul_color fill color.
 */
void ili9325_fill(ili9325_color_t ul_color)
{
  400870:	b570      	push	{r4, r5, r6, lr}
  400872:	4606      	mov	r6, r0
	uint32_t dw;

	ili9325_set_cursor_position(0, 0);
  400874:	2000      	movs	r0, #0
  400876:	4601      	mov	r1, r0
  400878:	4b07      	ldr	r3, [pc, #28]	; (400898 <ili9325_fill+0x28>)
  40087a:	4798      	blx	r3

/* Define EBI access for ILI9325 8-bit System Interface.*/
#if defined(BOARD_ILI9325_ADDR) && defined (BOARD_ILI9325_RS)
	static inline void LCD_IR(uint8_t lcd_index)
	{
		*((volatile uint8_t *)(BOARD_ILI9325_ADDR)) = lcd_index; /* ILI9325 index register address */
  40087c:	f04f 43c4 	mov.w	r3, #1644167168	; 0x62000000
  400880:	2200      	movs	r2, #0
  400882:	701a      	strb	r2, [r3, #0]
  400884:	2222      	movs	r2, #34	; 0x22
  400886:	701a      	strb	r2, [r3, #0]
  400888:	f44f 3496 	mov.w	r4, #76800	; 0x12c00
	ili9325_write_ram_prepare();

	for (dw = ILI9325_LCD_WIDTH * ILI9325_LCD_HEIGHT; dw > 0; dw--) {
		ili9325_write_ram(ul_color);
  40088c:	4d03      	ldr	r5, [pc, #12]	; (40089c <ili9325_fill+0x2c>)
  40088e:	4630      	mov	r0, r6
  400890:	47a8      	blx	r5
	uint32_t dw;

	ili9325_set_cursor_position(0, 0);
	ili9325_write_ram_prepare();

	for (dw = ILI9325_LCD_WIDTH * ILI9325_LCD_HEIGHT; dw > 0; dw--) {
  400892:	3c01      	subs	r4, #1
  400894:	d1fb      	bne.n	40088e <ili9325_fill+0x1e>
		ili9325_write_ram(ul_color);
	}
}
  400896:	bd70      	pop	{r4, r5, r6, pc}
  400898:	004006b1 	.word	0x004006b1
  40089c:	004005e1 	.word	0x004005e1

004008a0 <ili9325_draw_pixel>:
 *
 * \return 0 if succeeds, otherwise fails.
 */
uint32_t ili9325_draw_pixel(uint32_t ul_x, uint32_t ul_y)
{
	if ((ul_x >= ILI9325_LCD_WIDTH) || (ul_y >= ILI9325_LCD_HEIGHT)) {
  4008a0:	28ef      	cmp	r0, #239	; 0xef
  4008a2:	d813      	bhi.n	4008cc <ili9325_draw_pixel+0x2c>
  4008a4:	f5b1 7fa0 	cmp.w	r1, #320	; 0x140
  4008a8:	d212      	bcs.n	4008d0 <ili9325_draw_pixel+0x30>
 * \param ul_y Y coordinate of pixel.
 *
 * \return 0 if succeeds, otherwise fails.
 */
uint32_t ili9325_draw_pixel(uint32_t ul_x, uint32_t ul_y)
{
  4008aa:	b510      	push	{r4, lr}
	if ((ul_x >= ILI9325_LCD_WIDTH) || (ul_y >= ILI9325_LCD_HEIGHT)) {
		return 1;
	}

	/* Set cursor */
	ili9325_set_cursor_position(ul_x, ul_y);
  4008ac:	b280      	uxth	r0, r0
  4008ae:	b289      	uxth	r1, r1
  4008b0:	4b08      	ldr	r3, [pc, #32]	; (4008d4 <ili9325_draw_pixel+0x34>)
  4008b2:	4798      	blx	r3
  4008b4:	f04f 43c4 	mov.w	r3, #1644167168	; 0x62000000
  4008b8:	2400      	movs	r4, #0
  4008ba:	701c      	strb	r4, [r3, #0]
  4008bc:	2222      	movs	r2, #34	; 0x22
  4008be:	701a      	strb	r2, [r3, #0]

	/* Prepare to write in GRAM */
	ili9325_write_ram_prepare();
	ili9325_write_ram(*g_ul_pixel_cache);
  4008c0:	4b05      	ldr	r3, [pc, #20]	; (4008d8 <ili9325_draw_pixel+0x38>)
  4008c2:	6818      	ldr	r0, [r3, #0]
  4008c4:	4b05      	ldr	r3, [pc, #20]	; (4008dc <ili9325_draw_pixel+0x3c>)
  4008c6:	4798      	blx	r3
	return 0;
  4008c8:	4620      	mov	r0, r4
  4008ca:	bd10      	pop	{r4, pc}
 * \return 0 if succeeds, otherwise fails.
 */
uint32_t ili9325_draw_pixel(uint32_t ul_x, uint32_t ul_y)
{
	if ((ul_x >= ILI9325_LCD_WIDTH) || (ul_y >= ILI9325_LCD_HEIGHT)) {
		return 1;
  4008cc:	2001      	movs	r0, #1
  4008ce:	4770      	bx	lr
  4008d0:	2001      	movs	r0, #1
  4008d2:	4770      	bx	lr
  4008d4:	004006b1 	.word	0x004006b1
  4008d8:	2000045c 	.word	0x2000045c
  4008dc:	004005e1 	.word	0x004005e1

004008e0 <ili9325_draw_string>:
 * \param ul_x X coordinate of string top-left corner.
 * \param ul_y Y coordinate of string top-left corner.
 * \param p_str String to display.
 */
void ili9325_draw_string(uint32_t ul_x, uint32_t ul_y, const uint8_t *p_str)
{
  4008e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4008e4:	b085      	sub	sp, #20
  4008e6:	9003      	str	r0, [sp, #12]
  4008e8:	9202      	str	r2, [sp, #8]
	uint32_t xorg = ul_x;

	while (*p_str != 0) {
  4008ea:	7813      	ldrb	r3, [r2, #0]
  4008ec:	2b00      	cmp	r3, #0
  4008ee:	d046      	beq.n	40097e <ili9325_draw_string+0x9e>
  4008f0:	468b      	mov	fp, r1
  4008f2:	9001      	str	r0, [sp, #4]
		offset1 = offset0 + 1;

		/* Draw pixel on screen depending on the corresponding bit value from the charset */
		for (row = 0; row < 8; row++) {
			if ((p_uc_charset10x14[offset0] >> (7 - row)) & 0x1) {
				ili9325_draw_pixel(ul_x + col, ul_y + row);
  4008f4:	f8df 9090 	ldr.w	r9, [pc, #144]	; 400988 <ili9325_draw_string+0xa8>
{
	uint32_t xorg = ul_x;

	while (*p_str != 0) {
		/* If newline, jump to the next line (font height + 2) */
		if (*p_str == '\n') {
  4008f8:	2b0a      	cmp	r3, #10
  4008fa:	d104      	bne.n	400906 <ili9325_draw_string+0x26>
			ul_y += gfont.height + 2;
  4008fc:	f10b 0b10 	add.w	fp, fp, #16
			ul_x = xorg;
  400900:	9b03      	ldr	r3, [sp, #12]
  400902:	9301      	str	r3, [sp, #4]
  400904:	e035      	b.n	400972 <ili9325_draw_string+0x92>
	uint32_t row, col;
	uint32_t offset, offset0, offset1;

	/* Compute offset according of the specified ASCII character */
	/* Note: the first 32 characters of the ASCII table are not handled */
	offset = ((uint32_t)uc_c - 0x20) * 20;
  400906:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  40090a:	4e1e      	ldr	r6, [pc, #120]	; (400984 <ili9325_draw_string+0xa4>)
  40090c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
  400910:	f2a3 267f 	subw	r6, r3, #639	; 0x27f
  400914:	9a01      	ldr	r2, [sp, #4]
  400916:	4613      	mov	r3, r2
  400918:	330a      	adds	r3, #10
  40091a:	9300      	str	r3, [sp, #0]
  40091c:	4690      	mov	r8, r2
  40091e:	2407      	movs	r4, #7
  400920:	4637      	mov	r7, r6
  400922:	eb0b 0a04 	add.w	sl, fp, r4
  400926:	463d      	mov	r5, r7
		offset0 = offset + col * 2;
		offset1 = offset0 + 1;

		/* Draw pixel on screen depending on the corresponding bit value from the charset */
		for (row = 0; row < 8; row++) {
			if ((p_uc_charset10x14[offset0] >> (7 - row)) & 0x1) {
  400928:	f816 3c01 	ldrb.w	r3, [r6, #-1]
  40092c:	4123      	asrs	r3, r4
  40092e:	f013 0f01 	tst.w	r3, #1
  400932:	d003      	beq.n	40093c <ili9325_draw_string+0x5c>
				ili9325_draw_pixel(ul_x + col, ul_y + row);
  400934:	4640      	mov	r0, r8
  400936:	ebc4 010a 	rsb	r1, r4, sl
  40093a:	47c8      	blx	r9
  40093c:	3c01      	subs	r4, #1
		/* Compute the first and second byte offset of a column */
		offset0 = offset + col * 2;
		offset1 = offset0 + 1;

		/* Draw pixel on screen depending on the corresponding bit value from the charset */
		for (row = 0; row < 8; row++) {
  40093e:	f1b4 3fff 	cmp.w	r4, #4294967295
  400942:	d1f0      	bne.n	400926 <ili9325_draw_string+0x46>
  400944:	2407      	movs	r4, #7
  400946:	f10b 070f 	add.w	r7, fp, #15
				ili9325_draw_pixel(ul_x + col, ul_y + row);
			}
		}

		for (row = 0; row < 6; row++) {
			if ((p_uc_charset10x14[offset1] >> (7 - row)) & 0x1) {
  40094a:	782b      	ldrb	r3, [r5, #0]
  40094c:	4123      	asrs	r3, r4
  40094e:	f013 0f01 	tst.w	r3, #1
  400952:	d002      	beq.n	40095a <ili9325_draw_string+0x7a>
				ili9325_draw_pixel(ul_x + col, ul_y + row + 8);
  400954:	4640      	mov	r0, r8
  400956:	1b39      	subs	r1, r7, r4
  400958:	47c8      	blx	r9
  40095a:	3c01      	subs	r4, #1
			if ((p_uc_charset10x14[offset0] >> (7 - row)) & 0x1) {
				ili9325_draw_pixel(ul_x + col, ul_y + row);
			}
		}

		for (row = 0; row < 6; row++) {
  40095c:	2c01      	cmp	r4, #1
  40095e:	d1f4      	bne.n	40094a <ili9325_draw_string+0x6a>
  400960:	3602      	adds	r6, #2
  400962:	f108 0801 	add.w	r8, r8, #1

	/* Compute offset according of the specified ASCII character */
	/* Note: the first 32 characters of the ASCII table are not handled */
	offset = ((uint32_t)uc_c - 0x20) * 20;

	for (col = 0; col < 10; col++) {
  400966:	9b00      	ldr	r3, [sp, #0]
  400968:	4598      	cmp	r8, r3
  40096a:	d1d8      	bne.n	40091e <ili9325_draw_string+0x3e>
			ul_y += gfont.height + 2;
			ul_x = xorg;
		} else {
			/* Draw the character and place cursor right after (font width + 2) */
			ili9325_draw_char(ul_x, ul_y, *p_str);
			ul_x += gfont.width + 2;
  40096c:	9b01      	ldr	r3, [sp, #4]
  40096e:	330c      	adds	r3, #12
  400970:	9301      	str	r3, [sp, #4]
 */
void ili9325_draw_string(uint32_t ul_x, uint32_t ul_y, const uint8_t *p_str)
{
	uint32_t xorg = ul_x;

	while (*p_str != 0) {
  400972:	9a02      	ldr	r2, [sp, #8]
  400974:	f812 3f01 	ldrb.w	r3, [r2, #1]!
  400978:	9202      	str	r2, [sp, #8]
  40097a:	2b00      	cmp	r3, #0
  40097c:	d1bc      	bne.n	4008f8 <ili9325_draw_string+0x18>
			ili9325_draw_char(ul_x, ul_y, *p_str);
			ul_x += gfont.width + 2;
		}
		p_str++;
	}
}
  40097e:	b005      	add	sp, #20
  400980:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  400984:	00403c5c 	.word	0x00403c5c
  400988:	004008a1 	.word	0x004008a1

0040098c <smc_set_setup_timing>:
 * \param ul_setup_timing Setup timing for NWE, NCS, NRD.
 */
void smc_set_setup_timing(Smc *p_smc, uint32_t ul_cs,
		uint32_t ul_setup_timing)
{
	p_smc->SMC_CS_NUMBER[ul_cs].SMC_SETUP = ul_setup_timing;
  40098c:	0109      	lsls	r1, r1, #4
  40098e:	5042      	str	r2, [r0, r1]
  400990:	4770      	bx	lr
  400992:	bf00      	nop

00400994 <smc_set_pulse_timing>:
 * \param ul_pulse_timing Pulse timing for NWE,NCS,NRD.
 */
void smc_set_pulse_timing(Smc *p_smc, uint32_t ul_cs,
		uint32_t ul_pulse_timing)
{
	p_smc->SMC_CS_NUMBER[ul_cs].SMC_PULSE = ul_pulse_timing;
  400994:	eb00 1101 	add.w	r1, r0, r1, lsl #4
  400998:	604a      	str	r2, [r1, #4]
  40099a:	4770      	bx	lr

0040099c <smc_set_cycle_timing>:
 * \param ul_cycle_timing Cycle timing for NWE and NRD.
 */
void smc_set_cycle_timing(Smc *p_smc, uint32_t ul_cs,
		uint32_t ul_cycle_timing)
{
	p_smc->SMC_CS_NUMBER[ul_cs].SMC_CYCLE = ul_cycle_timing;
  40099c:	eb00 1101 	add.w	r1, r0, r1, lsl #4
  4009a0:	608a      	str	r2, [r1, #8]
  4009a2:	4770      	bx	lr

004009a4 <smc_set_mode>:
 * \param ul_cs Chip select number to be set.
 * \param ul_mode SMC mode.
 */
void smc_set_mode(Smc *p_smc, uint32_t ul_cs, uint32_t ul_mode)
{
	p_smc->SMC_CS_NUMBER[ul_cs].SMC_MODE = ul_mode;
  4009a4:	eb00 1101 	add.w	r1, r0, r1, lsl #4
  4009a8:	60ca      	str	r2, [r1, #12]
  4009aa:	4770      	bx	lr

004009ac <pio_set_debounce_filter>:
void pio_set_debounce_filter(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_cut_off)
{
#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	/* Set Debouncing, 0 bit field no effect */
	p_pio->PIO_IFSCER = ul_mask;
  4009ac:	f8c0 1084 	str.w	r1, [r0, #132]	; 0x84
	/*
	 * The debouncing filter can filter a pulse of less than 1/2 Period of a
	 * programmable Divided Slow Clock:
	 * Tdiv_slclk = ((DIV+1)*2).Tslow_clock
	 */
	p_pio->PIO_SCDR = PIO_SCDR_DIV((FREQ_SLOW_CLOCK_EXT /
  4009b0:	0052      	lsls	r2, r2, #1
  4009b2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  4009b6:	fbb3 f2f2 	udiv	r2, r3, r2
  4009ba:	3a01      	subs	r2, #1
  4009bc:	f3c2 020d 	ubfx	r2, r2, #0, #14
  4009c0:	f8c0 208c 	str.w	r2, [r0, #140]	; 0x8c
  4009c4:	4770      	bx	lr
  4009c6:	bf00      	nop

004009c8 <pio_set>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_set(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_SODR = ul_mask;
  4009c8:	6301      	str	r1, [r0, #48]	; 0x30
  4009ca:	4770      	bx	lr

004009cc <pio_clear>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_clear(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_CODR = ul_mask;
  4009cc:	6341      	str	r1, [r0, #52]	; 0x34
  4009ce:	4770      	bx	lr

004009d0 <pio_set_peripheral>:
		const uint32_t ul_mask)
{
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
  4009d0:	6442      	str	r2, [r0, #68]	; 0x44

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	switch (ul_type) {
  4009d2:	f1b1 5fc0 	cmp.w	r1, #402653184	; 0x18000000
  4009d6:	d02f      	beq.n	400a38 <pio_set_peripheral+0x68>
  4009d8:	d807      	bhi.n	4009ea <pio_set_peripheral+0x1a>
  4009da:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
  4009de:	d014      	beq.n	400a0a <pio_set_peripheral+0x3a>
  4009e0:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
  4009e4:	d01e      	beq.n	400a24 <pio_set_peripheral+0x54>
  4009e6:	b939      	cbnz	r1, 4009f8 <pio_set_peripheral+0x28>
  4009e8:	4770      	bx	lr
  4009ea:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
  4009ee:	d037      	beq.n	400a60 <pio_set_peripheral+0x90>
  4009f0:	d804      	bhi.n	4009fc <pio_set_peripheral+0x2c>
  4009f2:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
  4009f6:	d029      	beq.n	400a4c <pio_set_peripheral+0x7c>
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
  4009f8:	6042      	str	r2, [r0, #4]
  4009fa:	4770      	bx	lr

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	switch (ul_type) {
  4009fc:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
  400a00:	d02e      	beq.n	400a60 <pio_set_peripheral+0x90>
  400a02:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
  400a06:	d02b      	beq.n	400a60 <pio_set_peripheral+0x90>
  400a08:	e7f6      	b.n	4009f8 <pio_set_peripheral+0x28>
 * \param ul_type PIO type.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_set_peripheral(Pio *p_pio, const pio_type_t ul_type,
		const uint32_t ul_mask)
{
  400a0a:	b410      	push	{r4}
	p_pio->PIO_IDR = ul_mask;

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	switch (ul_type) {
	case PIO_PERIPH_A:
		ul_sr = p_pio->PIO_ABCDSR[0];
  400a0c:	6f01      	ldr	r1, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  400a0e:	6f04      	ldr	r4, [r0, #112]	; 0x70
  400a10:	43d3      	mvns	r3, r2
  400a12:	4021      	ands	r1, r4
  400a14:	4019      	ands	r1, r3
  400a16:	6701      	str	r1, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  400a18:	6f41      	ldr	r1, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  400a1a:	6f44      	ldr	r4, [r0, #116]	; 0x74
  400a1c:	4021      	ands	r1, r4
  400a1e:	400b      	ands	r3, r1
  400a20:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  400a22:	e01a      	b.n	400a5a <pio_set_peripheral+0x8a>
	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABCDSR[0];
  400a24:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  400a26:	4313      	orrs	r3, r2
  400a28:	6703      	str	r3, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  400a2a:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  400a2c:	6f41      	ldr	r1, [r0, #116]	; 0x74
  400a2e:	400b      	ands	r3, r1
  400a30:	ea23 0302 	bic.w	r3, r3, r2
  400a34:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  400a36:	e7df      	b.n	4009f8 <pio_set_peripheral+0x28>
#if (!SAMG)
	case PIO_PERIPH_C:
		ul_sr = p_pio->PIO_ABCDSR[0];
  400a38:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  400a3a:	6f01      	ldr	r1, [r0, #112]	; 0x70
  400a3c:	400b      	ands	r3, r1
  400a3e:	ea23 0302 	bic.w	r3, r3, r2
  400a42:	6703      	str	r3, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  400a44:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  400a46:	4313      	orrs	r3, r2
  400a48:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  400a4a:	e7d5      	b.n	4009f8 <pio_set_peripheral+0x28>
	case PIO_PERIPH_D:
		ul_sr = p_pio->PIO_ABCDSR[0];
  400a4c:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  400a4e:	4313      	orrs	r3, r2
  400a50:	6703      	str	r3, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  400a52:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  400a54:	4313      	orrs	r3, r2
  400a56:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  400a58:	e7ce      	b.n	4009f8 <pio_set_peripheral+0x28>
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
  400a5a:	6042      	str	r2, [r0, #4]
}
  400a5c:	f85d 4b04 	ldr.w	r4, [sp], #4
  400a60:	4770      	bx	lr
  400a62:	bf00      	nop

00400a64 <pio_set_input>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
  400a64:	6441      	str	r1, [r0, #68]	; 0x44
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  400a66:	f012 0f01 	tst.w	r2, #1
		p_pio->PIO_PUER = ul_mask;
  400a6a:	bf14      	ite	ne
  400a6c:	6641      	strne	r1, [r0, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
  400a6e:	6601      	streq	r1, [r0, #96]	; 0x60
{
	pio_disable_interrupt(p_pio, ul_mask);
	pio_pull_up(p_pio, ul_mask, ul_attribute & PIO_PULLUP);

	/* Enable Input Filter if necessary */
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
  400a70:	f012 0f0a 	tst.w	r2, #10
		p_pio->PIO_IFER = ul_mask;
  400a74:	bf14      	ite	ne
  400a76:	6201      	strne	r1, [r0, #32]
	} else {
		p_pio->PIO_IFDR = ul_mask;
  400a78:	6241      	streq	r1, [r0, #36]	; 0x24
	}

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	/* Enable de-glitch or de-bounce if necessary */
	if (ul_attribute & PIO_DEGLITCH) {
  400a7a:	f012 0f02 	tst.w	r2, #2
  400a7e:	d002      	beq.n	400a86 <pio_set_input+0x22>
		p_pio->PIO_IFSCDR = ul_mask;
  400a80:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
  400a84:	e004      	b.n	400a90 <pio_set_input+0x2c>
	} else {
		if (ul_attribute & PIO_DEBOUNCE) {
  400a86:	f012 0f08 	tst.w	r2, #8
			p_pio->PIO_IFSCER = ul_mask;
  400a8a:	bf18      	it	ne
  400a8c:	f8c0 1084 	strne.w	r1, [r0, #132]	; 0x84
#else
#error "Unsupported device"
#endif

	/* Configure pin as input */
	p_pio->PIO_ODR = ul_mask;
  400a90:	6141      	str	r1, [r0, #20]
	p_pio->PIO_PER = ul_mask;
  400a92:	6001      	str	r1, [r0, #0]
  400a94:	4770      	bx	lr
  400a96:	bf00      	nop

00400a98 <pio_set_output>:
 */
void pio_set_output(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_default_level,
		const uint32_t ul_multidrive_enable,
		const uint32_t ul_pull_up_enable)
{
  400a98:	b410      	push	{r4}
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
  400a9a:	6441      	str	r1, [r0, #68]	; 0x44
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  400a9c:	9c01      	ldr	r4, [sp, #4]
  400a9e:	b10c      	cbz	r4, 400aa4 <pio_set_output+0xc>
		p_pio->PIO_PUER = ul_mask;
  400aa0:	6641      	str	r1, [r0, #100]	; 0x64
  400aa2:	e000      	b.n	400aa6 <pio_set_output+0xe>
	} else {
		p_pio->PIO_PUDR = ul_mask;
  400aa4:	6601      	str	r1, [r0, #96]	; 0x60
{
	pio_disable_interrupt(p_pio, ul_mask);
	pio_pull_up(p_pio, ul_mask, ul_pull_up_enable);

	/* Enable multi-drive if necessary */
	if (ul_multidrive_enable) {
  400aa6:	b10b      	cbz	r3, 400aac <pio_set_output+0x14>
		p_pio->PIO_MDER = ul_mask;
  400aa8:	6501      	str	r1, [r0, #80]	; 0x50
  400aaa:	e000      	b.n	400aae <pio_set_output+0x16>
	} else {
		p_pio->PIO_MDDR = ul_mask;
  400aac:	6541      	str	r1, [r0, #84]	; 0x54
	}

	/* Set default value */
	if (ul_default_level) {
  400aae:	b10a      	cbz	r2, 400ab4 <pio_set_output+0x1c>
		p_pio->PIO_SODR = ul_mask;
  400ab0:	6301      	str	r1, [r0, #48]	; 0x30
  400ab2:	e000      	b.n	400ab6 <pio_set_output+0x1e>
	} else {
		p_pio->PIO_CODR = ul_mask;
  400ab4:	6341      	str	r1, [r0, #52]	; 0x34
	}

	/* Configure pin(s) as output(s) */
	p_pio->PIO_OER = ul_mask;
  400ab6:	6101      	str	r1, [r0, #16]
	p_pio->PIO_PER = ul_mask;
  400ab8:	6001      	str	r1, [r0, #0]
}
  400aba:	f85d 4b04 	ldr.w	r4, [sp], #4
  400abe:	4770      	bx	lr

00400ac0 <pio_configure_interrupt>:
 */
void pio_configure_interrupt(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_attr)
{
	/* Configure additional interrupt mode registers. */
	if (ul_attr & PIO_IT_AIME) {
  400ac0:	f012 0f10 	tst.w	r2, #16
  400ac4:	d010      	beq.n	400ae8 <pio_configure_interrupt+0x28>
		/* Enable additional interrupt mode. */
		p_pio->PIO_AIMER = ul_mask;
  400ac6:	f8c0 10b0 	str.w	r1, [r0, #176]	; 0xb0

		/* If bit field of the selected pin is 1, set as
		   Rising Edge/High level detection event. */
		if (ul_attr & PIO_IT_RE_OR_HL) {
  400aca:	f012 0f20 	tst.w	r2, #32
			/* Rising Edge or High Level */
			p_pio->PIO_REHLSR = ul_mask;
  400ace:	bf14      	ite	ne
  400ad0:	f8c0 10d4 	strne.w	r1, [r0, #212]	; 0xd4
		} else {
			/* Falling Edge or Low Level */
			p_pio->PIO_FELLSR = ul_mask;
  400ad4:	f8c0 10d0 	streq.w	r1, [r0, #208]	; 0xd0
		}

		/* If bit field of the selected pin is 1, set as
		   edge detection source. */
		if (ul_attr & PIO_IT_EDGE) {
  400ad8:	f012 0f40 	tst.w	r2, #64	; 0x40
			/* Edge select */
			p_pio->PIO_ESR = ul_mask;
  400adc:	bf14      	ite	ne
  400ade:	f8c0 10c0 	strne.w	r1, [r0, #192]	; 0xc0
		} else {
			/* Level select */
			p_pio->PIO_LSR = ul_mask;
  400ae2:	f8c0 10c4 	streq.w	r1, [r0, #196]	; 0xc4
  400ae6:	4770      	bx	lr
		}
	} else {
		/* Disable additional interrupt mode. */
		p_pio->PIO_AIMDR = ul_mask;
  400ae8:	f8c0 10b4 	str.w	r1, [r0, #180]	; 0xb4
  400aec:	4770      	bx	lr
  400aee:	bf00      	nop

00400af0 <pio_enable_interrupt>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_enable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_ISR;
  400af0:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
	p_pio->PIO_IER = ul_mask;
  400af2:	6401      	str	r1, [r0, #64]	; 0x40
  400af4:	4770      	bx	lr
  400af6:	bf00      	nop

00400af8 <pio_get_interrupt_status>:
 *
 * \return The interrupt status mask value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
  400af8:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
  400afa:	4770      	bx	lr

00400afc <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
  400afc:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
  400afe:	4770      	bx	lr

00400b00 <pio_set_pin_high>:
		p_pio = PIOC;
	} else {
		p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
	}
#else
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
  400b00:	0943      	lsrs	r3, r0, #5
  400b02:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  400b06:	f203 7307 	addw	r3, r3, #1799	; 0x707
  400b0a:	025b      	lsls	r3, r3, #9
void pio_set_pin_high(uint32_t ul_pin)
{
	Pio *p_pio = pio_get_pin_group(ul_pin);

	/* Value to be driven on the I/O line: 1. */
	p_pio->PIO_SODR = 1 << (ul_pin & 0x1F);
  400b0c:	f000 001f 	and.w	r0, r0, #31
  400b10:	2201      	movs	r2, #1
  400b12:	4082      	lsls	r2, r0
  400b14:	631a      	str	r2, [r3, #48]	; 0x30
  400b16:	4770      	bx	lr

00400b18 <pio_set_pin_low>:
		p_pio = PIOC;
	} else {
		p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
	}
#else
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
  400b18:	0943      	lsrs	r3, r0, #5
  400b1a:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  400b1e:	f203 7307 	addw	r3, r3, #1799	; 0x707
  400b22:	025b      	lsls	r3, r3, #9
void pio_set_pin_low(uint32_t ul_pin)
{
	Pio *p_pio = pio_get_pin_group(ul_pin);

	/* Value to be driven on the I/O line: 0. */
	p_pio->PIO_CODR = 1 << (ul_pin & 0x1F);
  400b24:	f000 001f 	and.w	r0, r0, #31
  400b28:	2201      	movs	r2, #1
  400b2a:	4082      	lsls	r2, r0
  400b2c:	635a      	str	r2, [r3, #52]	; 0x34
  400b2e:	4770      	bx	lr

00400b30 <pio_toggle_pin>:
		p_pio = PIOC;
	} else {
		p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
	}
#else
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
  400b30:	0943      	lsrs	r3, r0, #5
  400b32:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  400b36:	f203 7307 	addw	r3, r3, #1799	; 0x707
  400b3a:	025b      	lsls	r3, r3, #9
 */
void pio_toggle_pin(uint32_t ul_pin)
{
	Pio *p_pio = pio_get_pin_group(ul_pin);

	if (p_pio->PIO_ODSR & (1 << (ul_pin & 0x1F))) {
  400b3c:	6b99      	ldr	r1, [r3, #56]	; 0x38
  400b3e:	f000 001f 	and.w	r0, r0, #31
  400b42:	2201      	movs	r2, #1
  400b44:	4082      	lsls	r2, r0
  400b46:	420a      	tst	r2, r1
		/* Value to be driven on the I/O line: 0. */
		p_pio->PIO_CODR = 1 << (ul_pin & 0x1F);
  400b48:	bf14      	ite	ne
  400b4a:	635a      	strne	r2, [r3, #52]	; 0x34
	} else {
		/* Value to be driven on the I/O line: 1. */
		p_pio->PIO_SODR = 1 << (ul_pin & 0x1F);
  400b4c:	631a      	streq	r2, [r3, #48]	; 0x30
  400b4e:	4770      	bx	lr

00400b50 <pio_configure_pin>:
 * \param ul_flags Pins attributes.
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
  400b50:	b570      	push	{r4, r5, r6, lr}
  400b52:	b082      	sub	sp, #8
  400b54:	460d      	mov	r5, r1
		p_pio = PIOC;
	} else {
		p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
	}
#else
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
  400b56:	0943      	lsrs	r3, r0, #5
  400b58:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  400b5c:	f203 7307 	addw	r3, r3, #1799	; 0x707
  400b60:	025c      	lsls	r4, r3, #9
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
	Pio *p_pio = pio_get_pin_group(ul_pin);

	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
  400b62:	f001 43f0 	and.w	r3, r1, #2013265920	; 0x78000000
  400b66:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
  400b6a:	d047      	beq.n	400bfc <pio_configure_pin+0xac>
  400b6c:	d809      	bhi.n	400b82 <pio_configure_pin+0x32>
  400b6e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
  400b72:	d021      	beq.n	400bb8 <pio_configure_pin+0x68>
  400b74:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
  400b78:	d02f      	beq.n	400bda <pio_configure_pin+0x8a>
  400b7a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
  400b7e:	d16f      	bne.n	400c60 <pio_configure_pin+0x110>
  400b80:	e009      	b.n	400b96 <pio_configure_pin+0x46>
  400b82:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
  400b86:	d055      	beq.n	400c34 <pio_configure_pin+0xe4>
  400b88:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
  400b8c:	d052      	beq.n	400c34 <pio_configure_pin+0xe4>
  400b8e:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
  400b92:	d044      	beq.n	400c1e <pio_configure_pin+0xce>
  400b94:	e064      	b.n	400c60 <pio_configure_pin+0x110>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
  400b96:	f000 001f 	and.w	r0, r0, #31
  400b9a:	2601      	movs	r6, #1
  400b9c:	4086      	lsls	r6, r0
  400b9e:	4620      	mov	r0, r4
  400ba0:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  400ba4:	4632      	mov	r2, r6
  400ba6:	4b30      	ldr	r3, [pc, #192]	; (400c68 <pio_configure_pin+0x118>)
  400ba8:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  400baa:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
  400bae:	bf14      	ite	ne
  400bb0:	6666      	strne	r6, [r4, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
  400bb2:	6626      	streq	r6, [r4, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
  400bb4:	2001      	movs	r0, #1
  400bb6:	e054      	b.n	400c62 <pio_configure_pin+0x112>
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
				(ul_flags & PIO_PULLUP));
		break;
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, (1 << (ul_pin & 0x1F)));
  400bb8:	f000 001f 	and.w	r0, r0, #31
  400bbc:	2601      	movs	r6, #1
  400bbe:	4086      	lsls	r6, r0
  400bc0:	4620      	mov	r0, r4
  400bc2:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  400bc6:	4632      	mov	r2, r6
  400bc8:	4b27      	ldr	r3, [pc, #156]	; (400c68 <pio_configure_pin+0x118>)
  400bca:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  400bcc:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
  400bd0:	bf14      	ite	ne
  400bd2:	6666      	strne	r6, [r4, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
  400bd4:	6626      	streq	r6, [r4, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
  400bd6:	2001      	movs	r0, #1
  400bd8:	e043      	b.n	400c62 <pio_configure_pin+0x112>
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
				(ul_flags & PIO_PULLUP));
		break;
#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	case PIO_TYPE_PIO_PERIPH_C:
		pio_set_peripheral(p_pio, PIO_PERIPH_C, (1 << (ul_pin & 0x1F)));
  400bda:	f000 001f 	and.w	r0, r0, #31
  400bde:	2601      	movs	r6, #1
  400be0:	4086      	lsls	r6, r0
  400be2:	4620      	mov	r0, r4
  400be4:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  400be8:	4632      	mov	r2, r6
  400bea:	4b1f      	ldr	r3, [pc, #124]	; (400c68 <pio_configure_pin+0x118>)
  400bec:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  400bee:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
  400bf2:	bf14      	ite	ne
  400bf4:	6666      	strne	r6, [r4, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
  400bf6:	6626      	streq	r6, [r4, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
  400bf8:	2001      	movs	r0, #1
  400bfa:	e032      	b.n	400c62 <pio_configure_pin+0x112>
		pio_set_peripheral(p_pio, PIO_PERIPH_C, (1 << (ul_pin & 0x1F)));
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
				(ul_flags & PIO_PULLUP));
		break;
	case PIO_TYPE_PIO_PERIPH_D:
		pio_set_peripheral(p_pio, PIO_PERIPH_D, (1 << (ul_pin & 0x1F)));
  400bfc:	f000 001f 	and.w	r0, r0, #31
  400c00:	2601      	movs	r6, #1
  400c02:	4086      	lsls	r6, r0
  400c04:	4620      	mov	r0, r4
  400c06:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
  400c0a:	4632      	mov	r2, r6
  400c0c:	4b16      	ldr	r3, [pc, #88]	; (400c68 <pio_configure_pin+0x118>)
  400c0e:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  400c10:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
  400c14:	bf14      	ite	ne
  400c16:	6666      	strne	r6, [r4, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
  400c18:	6626      	streq	r6, [r4, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
  400c1a:	2001      	movs	r0, #1
  400c1c:	e021      	b.n	400c62 <pio_configure_pin+0x112>
				(ul_flags & PIO_PULLUP));
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
  400c1e:	f000 031f 	and.w	r3, r0, #31
  400c22:	2601      	movs	r6, #1
  400c24:	4620      	mov	r0, r4
  400c26:	fa06 f103 	lsl.w	r1, r6, r3
  400c2a:	462a      	mov	r2, r5
  400c2c:	4b0f      	ldr	r3, [pc, #60]	; (400c6c <pio_configure_pin+0x11c>)
  400c2e:	4798      	blx	r3

	default:
		return 0;
	}

	return 1;
  400c30:	4630      	mov	r0, r6
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;
  400c32:	e016      	b.n	400c62 <pio_configure_pin+0x112>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
  400c34:	f000 031f 	and.w	r3, r0, #31
  400c38:	2601      	movs	r6, #1
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
  400c3a:	f005 5260 	and.w	r2, r5, #939524096	; 0x38000000
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
  400c3e:	ea05 0106 	and.w	r1, r5, r6
  400c42:	9100      	str	r1, [sp, #0]
  400c44:	4620      	mov	r0, r4
  400c46:	fa06 f103 	lsl.w	r1, r6, r3
  400c4a:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
  400c4e:	bf14      	ite	ne
  400c50:	2200      	movne	r2, #0
  400c52:	2201      	moveq	r2, #1
  400c54:	f3c5 0380 	ubfx	r3, r5, #2, #1
  400c58:	4c05      	ldr	r4, [pc, #20]	; (400c70 <pio_configure_pin+0x120>)
  400c5a:	47a0      	blx	r4

	default:
		return 0;
	}

	return 1;
  400c5c:	4630      	mov	r0, r6
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
		break;
  400c5e:	e000      	b.n	400c62 <pio_configure_pin+0x112>

	default:
		return 0;
  400c60:	2000      	movs	r0, #0
	}

	return 1;
}
  400c62:	b002      	add	sp, #8
  400c64:	bd70      	pop	{r4, r5, r6, pc}
  400c66:	bf00      	nop
  400c68:	004009d1 	.word	0x004009d1
  400c6c:	00400a65 	.word	0x00400a65
  400c70:	00400a99 	.word	0x00400a99

00400c74 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
  400c74:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  400c78:	4681      	mov	r9, r0
  400c7a:	4688      	mov	r8, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
  400c7c:	4b12      	ldr	r3, [pc, #72]	; (400cc8 <pio_handler_process+0x54>)
  400c7e:	4798      	blx	r3
  400c80:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
  400c82:	4648      	mov	r0, r9
  400c84:	4b11      	ldr	r3, [pc, #68]	; (400ccc <pio_handler_process+0x58>)
  400c86:	4798      	blx	r3

	/* Check pending events */
	if (status != 0) {
  400c88:	4005      	ands	r5, r0
  400c8a:	d013      	beq.n	400cb4 <pio_handler_process+0x40>
  400c8c:	4c10      	ldr	r4, [pc, #64]	; (400cd0 <pio_handler_process+0x5c>)
  400c8e:	f104 0660 	add.w	r6, r4, #96	; 0x60
		/* Find triggering source */
		i = 0;
		while (status != 0) {
			/* Source is configured on the same controller */
			if (gs_interrupt_sources[i].id == ul_id) {
  400c92:	6823      	ldr	r3, [r4, #0]
  400c94:	4543      	cmp	r3, r8
  400c96:	d108      	bne.n	400caa <pio_handler_process+0x36>
				/* Source has PIOs whose statuses have changed */
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  400c98:	6861      	ldr	r1, [r4, #4]
  400c9a:	4229      	tst	r1, r5
  400c9c:	d005      	beq.n	400caa <pio_handler_process+0x36>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  400c9e:	68e3      	ldr	r3, [r4, #12]
  400ca0:	4640      	mov	r0, r8
  400ca2:	4798      	blx	r3
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
  400ca4:	6863      	ldr	r3, [r4, #4]
  400ca6:	ea25 0503 	bic.w	r5, r5, r3
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
  400caa:	42b4      	cmp	r4, r6
  400cac:	d002      	beq.n	400cb4 <pio_handler_process+0x40>
  400cae:	3410      	adds	r4, #16

	/* Check pending events */
	if (status != 0) {
		/* Find triggering source */
		i = 0;
		while (status != 0) {
  400cb0:	2d00      	cmp	r5, #0
  400cb2:	d1ee      	bne.n	400c92 <pio_handler_process+0x1e>
		}
	}

	/* Check capture events */
#if (SAM3S || SAM4S || SAM4E)
	if (pio_capture_enable_flag) {
  400cb4:	4b07      	ldr	r3, [pc, #28]	; (400cd4 <pio_handler_process+0x60>)
  400cb6:	681b      	ldr	r3, [r3, #0]
  400cb8:	b123      	cbz	r3, 400cc4 <pio_handler_process+0x50>
		if (pio_capture_handler) {
  400cba:	4b07      	ldr	r3, [pc, #28]	; (400cd8 <pio_handler_process+0x64>)
  400cbc:	681b      	ldr	r3, [r3, #0]
  400cbe:	b10b      	cbz	r3, 400cc4 <pio_handler_process+0x50>
			pio_capture_handler(p_pio);
  400cc0:	4648      	mov	r0, r9
  400cc2:	4798      	blx	r3
  400cc4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  400cc8:	00400af9 	.word	0x00400af9
  400ccc:	00400afd 	.word	0x00400afd
  400cd0:	20000824 	.word	0x20000824
  400cd4:	2000a9f4 	.word	0x2000a9f4
  400cd8:	20000820 	.word	0x20000820

00400cdc <pio_handler_set>:
 *
 * \return 0 if successful, 1 if the maximum number of sources has been defined.
 */
uint32_t pio_handler_set(Pio *p_pio, uint32_t ul_id, uint32_t ul_mask,
		uint32_t ul_attr, void (*p_handler) (uint32_t, uint32_t))
{
  400cdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct s_interrupt_source *pSource;

	if (gs_ul_nb_sources >= MAX_INTERRUPT_SOURCES)
  400cde:	4c0c      	ldr	r4, [pc, #48]	; (400d10 <pio_handler_set+0x34>)
  400ce0:	6824      	ldr	r4, [r4, #0]
  400ce2:	2c06      	cmp	r4, #6
  400ce4:	d811      	bhi.n	400d0a <pio_handler_set+0x2e>
  400ce6:	4615      	mov	r5, r2
		return 1;

	/* Define new source */
	pSource = &(gs_interrupt_sources[gs_ul_nb_sources]);
	pSource->id = ul_id;
  400ce8:	4f0a      	ldr	r7, [pc, #40]	; (400d14 <pio_handler_set+0x38>)
  400cea:	0122      	lsls	r2, r4, #4
  400cec:	18be      	adds	r6, r7, r2
  400cee:	50b9      	str	r1, [r7, r2]
	pSource->mask = ul_mask;
  400cf0:	6075      	str	r5, [r6, #4]
	pSource->attr = ul_attr;
  400cf2:	60b3      	str	r3, [r6, #8]
	pSource->handler = p_handler;
  400cf4:	9a06      	ldr	r2, [sp, #24]
  400cf6:	60f2      	str	r2, [r6, #12]
	gs_ul_nb_sources++;
  400cf8:	3401      	adds	r4, #1
  400cfa:	4a05      	ldr	r2, [pc, #20]	; (400d10 <pio_handler_set+0x34>)
  400cfc:	6014      	str	r4, [r2, #0]

	/* Configure interrupt mode */
	pio_configure_interrupt(p_pio, ul_mask, ul_attr);
  400cfe:	4629      	mov	r1, r5
  400d00:	461a      	mov	r2, r3
  400d02:	4b05      	ldr	r3, [pc, #20]	; (400d18 <pio_handler_set+0x3c>)
  400d04:	4798      	blx	r3

	return 0;
  400d06:	2000      	movs	r0, #0
  400d08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		uint32_t ul_attr, void (*p_handler) (uint32_t, uint32_t))
{
	struct s_interrupt_source *pSource;

	if (gs_ul_nb_sources >= MAX_INTERRUPT_SOURCES)
		return 1;
  400d0a:	2001      	movs	r0, #1

	/* Configure interrupt mode */
	pio_configure_interrupt(p_pio, ul_mask, ul_attr);

	return 0;
}
  400d0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  400d0e:	bf00      	nop
  400d10:	2000081c 	.word	0x2000081c
  400d14:	20000824 	.word	0x20000824
  400d18:	00400ac1 	.word	0x00400ac1

00400d1c <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
  400d1c:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
  400d1e:	4802      	ldr	r0, [pc, #8]	; (400d28 <PIOA_Handler+0xc>)
  400d20:	210b      	movs	r1, #11
  400d22:	4b02      	ldr	r3, [pc, #8]	; (400d2c <PIOA_Handler+0x10>)
  400d24:	4798      	blx	r3
  400d26:	bd08      	pop	{r3, pc}
  400d28:	400e0e00 	.word	0x400e0e00
  400d2c:	00400c75 	.word	0x00400c75

00400d30 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
  400d30:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
  400d32:	4802      	ldr	r0, [pc, #8]	; (400d3c <PIOB_Handler+0xc>)
  400d34:	210c      	movs	r1, #12
  400d36:	4b02      	ldr	r3, [pc, #8]	; (400d40 <PIOB_Handler+0x10>)
  400d38:	4798      	blx	r3
  400d3a:	bd08      	pop	{r3, pc}
  400d3c:	400e1000 	.word	0x400e1000
  400d40:	00400c75 	.word	0x00400c75

00400d44 <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
  400d44:	b508      	push	{r3, lr}
	pio_handler_process(PIOC, ID_PIOC);
  400d46:	4802      	ldr	r0, [pc, #8]	; (400d50 <PIOC_Handler+0xc>)
  400d48:	210d      	movs	r1, #13
  400d4a:	4b02      	ldr	r3, [pc, #8]	; (400d54 <PIOC_Handler+0x10>)
  400d4c:	4798      	blx	r3
  400d4e:	bd08      	pop	{r3, pc}
  400d50:	400e1200 	.word	0x400e1200
  400d54:	00400c75 	.word	0x00400c75

00400d58 <pmc_switch_mck_to_pllbck>:
 */
uint32_t pmc_switch_mck_to_pllbck(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
  400d58:	4a17      	ldr	r2, [pc, #92]	; (400db8 <pmc_switch_mck_to_pllbck+0x60>)
  400d5a:	6b13      	ldr	r3, [r2, #48]	; 0x30
  400d5c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  400d60:	4318      	orrs	r0, r3
  400d62:	6310      	str	r0, [r2, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  400d64:	6e93      	ldr	r3, [r2, #104]	; 0x68
  400d66:	f013 0f08 	tst.w	r3, #8
  400d6a:	d003      	beq.n	400d74 <pmc_switch_mck_to_pllbck+0x1c>
  400d6c:	e009      	b.n	400d82 <pmc_switch_mck_to_pllbck+0x2a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  400d6e:	3b01      	subs	r3, #1
  400d70:	d103      	bne.n	400d7a <pmc_switch_mck_to_pllbck+0x22>
  400d72:	e01c      	b.n	400dae <pmc_switch_mck_to_pllbck+0x56>
uint32_t pmc_switch_mck_to_pllbck(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  400d74:	f44f 6300 	mov.w	r3, #2048	; 0x800
  400d78:	490f      	ldr	r1, [pc, #60]	; (400db8 <pmc_switch_mck_to_pllbck+0x60>)
  400d7a:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  400d7c:	f012 0f08 	tst.w	r2, #8
  400d80:	d0f5      	beq.n	400d6e <pmc_switch_mck_to_pllbck+0x16>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
  400d82:	4b0d      	ldr	r3, [pc, #52]	; (400db8 <pmc_switch_mck_to_pllbck+0x60>)
  400d84:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  400d86:	f042 0203 	orr.w	r2, r2, #3
  400d8a:	631a      	str	r2, [r3, #48]	; 0x30
			PMC_MCKR_CSS_PLLB_CLK;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  400d8c:	6e98      	ldr	r0, [r3, #104]	; 0x68
  400d8e:	f010 0008 	ands.w	r0, r0, #8
  400d92:	d004      	beq.n	400d9e <pmc_switch_mck_to_pllbck+0x46>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	return 0;
  400d94:	2000      	movs	r0, #0
  400d96:	4770      	bx	lr

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLB_CLK;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
  400d98:	3b01      	subs	r3, #1
  400d9a:	d103      	bne.n	400da4 <pmc_switch_mck_to_pllbck+0x4c>
  400d9c:	e009      	b.n	400db2 <pmc_switch_mck_to_pllbck+0x5a>
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLB_CLK;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  400d9e:	f44f 6300 	mov.w	r3, #2048	; 0x800
  400da2:	4905      	ldr	r1, [pc, #20]	; (400db8 <pmc_switch_mck_to_pllbck+0x60>)
  400da4:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  400da6:	f012 0f08 	tst.w	r2, #8
  400daa:	d0f5      	beq.n	400d98 <pmc_switch_mck_to_pllbck+0x40>
  400dac:	4770      	bx	lr

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
			return 1;
  400dae:	2001      	movs	r0, #1
  400db0:	4770      	bx	lr
	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLB_CLK;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
			return 1;
  400db2:	2001      	movs	r0, #1
		}
	}

	return 0;
}
  400db4:	4770      	bx	lr
  400db6:	bf00      	nop
  400db8:	400e0400 	.word	0x400e0400

00400dbc <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
  400dbc:	b138      	cbz	r0, 400dce <pmc_switch_mainck_to_xtal+0x12>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  400dbe:	4911      	ldr	r1, [pc, #68]	; (400e04 <pmc_switch_mainck_to_xtal+0x48>)
  400dc0:	6a0b      	ldr	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  400dc2:	4a11      	ldr	r2, [pc, #68]	; (400e08 <pmc_switch_mainck_to_xtal+0x4c>)
  400dc4:	401a      	ands	r2, r3
  400dc6:	4b11      	ldr	r3, [pc, #68]	; (400e0c <pmc_switch_mainck_to_xtal+0x50>)
  400dc8:	4313      	orrs	r3, r2
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  400dca:	620b      	str	r3, [r1, #32]
  400dcc:	4770      	bx	lr
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  400dce:	4a0d      	ldr	r2, [pc, #52]	; (400e04 <pmc_switch_mainck_to_xtal+0x48>)
  400dd0:	6a13      	ldr	r3, [r2, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  400dd2:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
  400dd6:	f023 0303 	bic.w	r3, r3, #3
  400dda:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  400dde:	f043 0301 	orr.w	r3, r3, #1
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
  400de2:	0209      	lsls	r1, r1, #8
  400de4:	b289      	uxth	r1, r1
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  400de6:	430b      	orrs	r3, r1
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  400de8:	6213      	str	r3, [r2, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  400dea:	6e93      	ldr	r3, [r2, #104]	; 0x68
  400dec:	f013 0f01 	tst.w	r3, #1
  400df0:	d0fb      	beq.n	400dea <pmc_switch_mainck_to_xtal+0x2e>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
  400df2:	4a04      	ldr	r2, [pc, #16]	; (400e04 <pmc_switch_mainck_to_xtal+0x48>)
  400df4:	6a13      	ldr	r3, [r2, #32]
  400df6:	f043 739b 	orr.w	r3, r3, #20316160	; 0x1360000
  400dfa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
  400dfe:	6213      	str	r3, [r2, #32]
  400e00:	4770      	bx	lr
  400e02:	bf00      	nop
  400e04:	400e0400 	.word	0x400e0400
  400e08:	fec8fffc 	.word	0xfec8fffc
  400e0c:	01370002 	.word	0x01370002

00400e10 <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
  400e10:	4b02      	ldr	r3, [pc, #8]	; (400e1c <pmc_osc_is_ready_mainck+0xc>)
  400e12:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  400e14:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
  400e18:	4770      	bx	lr
  400e1a:	bf00      	nop
  400e1c:	400e0400 	.word	0x400e0400

00400e20 <pmc_enable_pllack>:
 * \param mula PLLA multiplier.
 * \param pllacount PLLA counter.
 * \param diva Divider.
 */
void pmc_enable_pllack(uint32_t mula, uint32_t pllacount, uint32_t diva)
{
  400e20:	b410      	push	{r4}
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
  400e22:	4c0c      	ldr	r4, [pc, #48]	; (400e54 <pmc_enable_pllack+0x34>)
  400e24:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
  400e28:	62a3      	str	r3, [r4, #40]	; 0x28
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_PLLAEN(diva) |
			CKGR_PLLAR_PLLACOUNT(pllacount) | CKGR_PLLAR_MULA(mula);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_DIVA(diva) |
			CKGR_PLLAR_PLLACOUNT(pllacount) | CKGR_PLLAR_MULA(mula);
  400e2a:	4b0b      	ldr	r3, [pc, #44]	; (400e58 <pmc_enable_pllack+0x38>)
  400e2c:	ea03 4000 	and.w	r0, r3, r0, lsl #16
  400e30:	f040 5000 	orr.w	r0, r0, #536870912	; 0x20000000

#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_PLLAEN(diva) |
			CKGR_PLLAR_PLLACOUNT(pllacount) | CKGR_PLLAR_MULA(mula);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_DIVA(diva) |
  400e34:	b2d2      	uxtb	r2, r2
  400e36:	4302      	orrs	r2, r0
			CKGR_PLLAR_PLLACOUNT(pllacount) | CKGR_PLLAR_MULA(mula);
  400e38:	0209      	lsls	r1, r1, #8
  400e3a:	f401 517c 	and.w	r1, r1, #16128	; 0x3f00
  400e3e:	430a      	orrs	r2, r1

#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_PLLAEN(diva) |
			CKGR_PLLAR_PLLACOUNT(pllacount) | CKGR_PLLAR_MULA(mula);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_DIVA(diva) |
  400e40:	62a2      	str	r2, [r4, #40]	; 0x28
			CKGR_PLLAR_PLLACOUNT(pllacount) | CKGR_PLLAR_MULA(mula);
#endif
	while ((PMC->PMC_SR & PMC_SR_LOCKA) == 0);
  400e42:	4622      	mov	r2, r4
  400e44:	6e93      	ldr	r3, [r2, #104]	; 0x68
  400e46:	f013 0f02 	tst.w	r3, #2
  400e4a:	d0fb      	beq.n	400e44 <pmc_enable_pllack+0x24>
}
  400e4c:	f85d 4b04 	ldr.w	r4, [sp], #4
  400e50:	4770      	bx	lr
  400e52:	bf00      	nop
  400e54:	400e0400 	.word	0x400e0400
  400e58:	07ff0000 	.word	0x07ff0000

00400e5c <pmc_disable_pllbck>:
/**
 * \brief Disable PLLB clock.
 */
void pmc_disable_pllbck(void)
{
	PMC->CKGR_PLLBR = CKGR_PLLBR_MULB(0);
  400e5c:	2200      	movs	r2, #0
  400e5e:	4b01      	ldr	r3, [pc, #4]	; (400e64 <pmc_disable_pllbck+0x8>)
  400e60:	62da      	str	r2, [r3, #44]	; 0x2c
  400e62:	4770      	bx	lr
  400e64:	400e0400 	.word	0x400e0400

00400e68 <pmc_is_locked_pllbck>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllbck(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKB);
  400e68:	4b02      	ldr	r3, [pc, #8]	; (400e74 <pmc_is_locked_pllbck+0xc>)
  400e6a:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  400e6c:	f000 0004 	and.w	r0, r0, #4
  400e70:	4770      	bx	lr
  400e72:	bf00      	nop
  400e74:	400e0400 	.word	0x400e0400

00400e78 <pmc_enable_periph_clk>:
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
  400e78:	2822      	cmp	r0, #34	; 0x22
  400e7a:	d81e      	bhi.n	400eba <pmc_enable_periph_clk+0x42>
		return 1;
	}

	if (ul_id < 32) {
  400e7c:	281f      	cmp	r0, #31
  400e7e:	d80c      	bhi.n	400e9a <pmc_enable_periph_clk+0x22>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
  400e80:	4b11      	ldr	r3, [pc, #68]	; (400ec8 <pmc_enable_periph_clk+0x50>)
  400e82:	699a      	ldr	r2, [r3, #24]
  400e84:	2301      	movs	r3, #1
  400e86:	4083      	lsls	r3, r0
  400e88:	401a      	ands	r2, r3
  400e8a:	4293      	cmp	r3, r2
  400e8c:	d017      	beq.n	400ebe <pmc_enable_periph_clk+0x46>
			PMC->PMC_PCER0 = 1 << ul_id;
  400e8e:	2301      	movs	r3, #1
  400e90:	4083      	lsls	r3, r0
  400e92:	4a0d      	ldr	r2, [pc, #52]	; (400ec8 <pmc_enable_periph_clk+0x50>)
  400e94:	6113      	str	r3, [r2, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
  400e96:	2000      	movs	r0, #0
  400e98:	4770      	bx	lr
			PMC->PMC_PCER0 = 1 << ul_id;
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP || SAMG55 || SAMV71 || SAMV70 || SAME70 || SAMS70)
	} else {
		ul_id -= 32;
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
  400e9a:	4b0b      	ldr	r3, [pc, #44]	; (400ec8 <pmc_enable_periph_clk+0x50>)
  400e9c:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
			PMC->PMC_PCER0 = 1 << ul_id;
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP || SAMG55 || SAMV71 || SAMV70 || SAME70 || SAMS70)
	} else {
		ul_id -= 32;
  400ea0:	3820      	subs	r0, #32
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
  400ea2:	2301      	movs	r3, #1
  400ea4:	4083      	lsls	r3, r0
  400ea6:	401a      	ands	r2, r3
  400ea8:	4293      	cmp	r3, r2
  400eaa:	d00a      	beq.n	400ec2 <pmc_enable_periph_clk+0x4a>
			PMC->PMC_PCER1 = 1 << ul_id;
  400eac:	2301      	movs	r3, #1
  400eae:	4083      	lsls	r3, r0
  400eb0:	4a05      	ldr	r2, [pc, #20]	; (400ec8 <pmc_enable_periph_clk+0x50>)
  400eb2:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
		}
#endif
	}

	return 0;
  400eb6:	2000      	movs	r0, #0
  400eb8:	4770      	bx	lr
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
		return 1;
  400eba:	2001      	movs	r0, #1
  400ebc:	4770      	bx	lr
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
  400ebe:	2000      	movs	r0, #0
  400ec0:	4770      	bx	lr
  400ec2:	2000      	movs	r0, #0
}
  400ec4:	4770      	bx	lr
  400ec6:	bf00      	nop
  400ec8:	400e0400 	.word	0x400e0400

00400ecc <twi_set_speed>:
uint32_t twi_set_speed(Twi *p_twi, uint32_t ul_speed, uint32_t ul_mck)
{
	uint32_t ckdiv = 0;
	uint32_t c_lh_div;

	if (ul_speed > I2C_FAST_MODE_SPEED) {
  400ecc:	4b0f      	ldr	r3, [pc, #60]	; (400f0c <twi_set_speed+0x40>)
  400ece:	4299      	cmp	r1, r3
  400ed0:	d819      	bhi.n	400f06 <twi_set_speed+0x3a>
		return FAIL;
	}

	c_lh_div = ul_mck / (ul_speed * TWI_CLK_DIVIDER) - TWI_CLK_CALC_ARGU;
  400ed2:	0049      	lsls	r1, r1, #1
  400ed4:	fbb2 f2f1 	udiv	r2, r2, r1
  400ed8:	3a04      	subs	r2, #4

	/* cldiv must fit in 8 bits, ckdiv must fit in 3 bits */
	while ((c_lh_div > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
  400eda:	2aff      	cmp	r2, #255	; 0xff
  400edc:	d907      	bls.n	400eee <twi_set_speed+0x22>
  400ede:	2300      	movs	r3, #0
		/* Increase clock divider */
		ckdiv++;
  400ee0:	3301      	adds	r3, #1
		/* Divide cldiv value */
		c_lh_div /= TWI_CLK_DIVIDER;
  400ee2:	0852      	lsrs	r2, r2, #1
	}

	c_lh_div = ul_mck / (ul_speed * TWI_CLK_DIVIDER) - TWI_CLK_CALC_ARGU;

	/* cldiv must fit in 8 bits, ckdiv must fit in 3 bits */
	while ((c_lh_div > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
  400ee4:	2aff      	cmp	r2, #255	; 0xff
  400ee6:	d903      	bls.n	400ef0 <twi_set_speed+0x24>
  400ee8:	2b07      	cmp	r3, #7
  400eea:	d1f9      	bne.n	400ee0 <twi_set_speed+0x14>
  400eec:	e000      	b.n	400ef0 <twi_set_speed+0x24>
 * \retval PASS New speed setting is accepted.
 * \retval FAIL New speed setting is rejected.
 */
uint32_t twi_set_speed(Twi *p_twi, uint32_t ul_speed, uint32_t ul_mck)
{
	uint32_t ckdiv = 0;
  400eee:	2300      	movs	r3, #0
		c_lh_div /= TWI_CLK_DIVIDER;
	}

	/* set clock waveform generator register */
	p_twi->TWI_CWGR =
			TWI_CWGR_CLDIV(c_lh_div) | TWI_CWGR_CHDIV(c_lh_div) |
  400ef0:	0211      	lsls	r1, r2, #8
  400ef2:	b289      	uxth	r1, r1
			TWI_CWGR_CKDIV(ckdiv);
  400ef4:	041b      	lsls	r3, r3, #16
  400ef6:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
  400efa:	430b      	orrs	r3, r1
		c_lh_div /= TWI_CLK_DIVIDER;
	}

	/* set clock waveform generator register */
	p_twi->TWI_CWGR =
			TWI_CWGR_CLDIV(c_lh_div) | TWI_CWGR_CHDIV(c_lh_div) |
  400efc:	b2d2      	uxtb	r2, r2
  400efe:	431a      	orrs	r2, r3
		/* Divide cldiv value */
		c_lh_div /= TWI_CLK_DIVIDER;
	}

	/* set clock waveform generator register */
	p_twi->TWI_CWGR =
  400f00:	6102      	str	r2, [r0, #16]
			TWI_CWGR_CLDIV(c_lh_div) | TWI_CWGR_CHDIV(c_lh_div) |
			TWI_CWGR_CKDIV(ckdiv);

	return PASS;
  400f02:	2000      	movs	r0, #0
  400f04:	4770      	bx	lr
{
	uint32_t ckdiv = 0;
	uint32_t c_lh_div;

	if (ul_speed > I2C_FAST_MODE_SPEED) {
		return FAIL;
  400f06:	2001      	movs	r0, #1
	p_twi->TWI_CWGR =
			TWI_CWGR_CLDIV(c_lh_div) | TWI_CWGR_CHDIV(c_lh_div) |
			TWI_CWGR_CKDIV(ckdiv);

	return PASS;
}
  400f08:	4770      	bx	lr
  400f0a:	bf00      	nop
  400f0c:	00061a80 	.word	0x00061a80

00400f10 <twi_master_init>:
 * \param p_opt Options for initializing the TWI module (see \ref twi_options_t).
 *
 * \return TWI_SUCCESS if initialization is complete, error code otherwise.
 */
uint32_t twi_master_init(Twi *p_twi, const twi_options_t *p_opt)
{
  400f10:	b538      	push	{r3, r4, r5, lr}
  400f12:	4604      	mov	r4, r0
  400f14:	460d      	mov	r5, r1
	uint32_t status = TWI_SUCCESS;

	/* Disable TWI interrupts */
	p_twi->TWI_IDR = ~0UL;
  400f16:	f04f 33ff 	mov.w	r3, #4294967295
  400f1a:	6283      	str	r3, [r0, #40]	; 0x28

	/* Dummy read in status register */
	p_twi->TWI_SR;
  400f1c:	6a03      	ldr	r3, [r0, #32]
 * \param p_twi Pointer to a TWI instance.
 */
void twi_reset(Twi *p_twi)
{
	/* Set SWRST bit to reset TWI peripheral */
	p_twi->TWI_CR = TWI_CR_SWRST;
  400f1e:	2380      	movs	r3, #128	; 0x80
  400f20:	6003      	str	r3, [r0, #0]
	p_twi->TWI_RHR;
  400f22:	6b03      	ldr	r3, [r0, #48]	; 0x30
 * \param p_twi Pointer to a TWI instance.
 */
void twi_enable_master_mode(Twi *p_twi)
{
	/* Set Master Disable bit and Slave Disable bit */
	p_twi->TWI_CR = TWI_CR_MSDIS;
  400f24:	2308      	movs	r3, #8
  400f26:	6003      	str	r3, [r0, #0]
	p_twi->TWI_CR = TWI_CR_SVDIS;
  400f28:	2320      	movs	r3, #32
  400f2a:	6003      	str	r3, [r0, #0]

	/* Set Master Enable bit */
	p_twi->TWI_CR = TWI_CR_MSEN;
  400f2c:	2304      	movs	r3, #4
  400f2e:	6003      	str	r3, [r0, #0]
	twi_reset(p_twi);

	twi_enable_master_mode(p_twi);

	/* Select the speed */
	if (twi_set_speed(p_twi, p_opt->speed, p_opt->master_clk) == FAIL) {
  400f30:	6849      	ldr	r1, [r1, #4]
  400f32:	682a      	ldr	r2, [r5, #0]
  400f34:	4b05      	ldr	r3, [pc, #20]	; (400f4c <twi_master_init+0x3c>)
  400f36:	4798      	blx	r3
  400f38:	2801      	cmp	r0, #1
  400f3a:	bf14      	ite	ne
  400f3c:	2000      	movne	r0, #0
  400f3e:	2001      	moveq	r0, #1
		/* The desired speed setting is rejected */
		status = TWI_INVALID_ARGUMENT;
	}

	if (p_opt->smbus == 1) {
  400f40:	7a6b      	ldrb	r3, [r5, #9]
  400f42:	2b01      	cmp	r3, #1
		p_twi->TWI_CR = TWI_CR_QUICK;
  400f44:	bf04      	itt	eq
  400f46:	2340      	moveq	r3, #64	; 0x40
  400f48:	6023      	streq	r3, [r4, #0]
	}

	return status;
}
  400f4a:	bd38      	pop	{r3, r4, r5, pc}
  400f4c:	00400ecd 	.word	0x00400ecd

00400f50 <twi_master_read>:
 * \param p_packet Packet information and data (see \ref twi_packet_t).
 *
 * \return TWI_SUCCESS if all bytes were read, error code otherwise.
 */
uint32_t twi_master_read(Twi *p_twi, twi_packet_t *p_packet)
{
  400f50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint32_t status;
	uint32_t cnt = p_packet->length;
  400f54:	68ca      	ldr	r2, [r1, #12]
	uint8_t *buffer = p_packet->buffer;
  400f56:	688d      	ldr	r5, [r1, #8]
	uint8_t stop_sent = 0;
	uint32_t timeout = TWI_TIMEOUT;;
	
	/* Check argument */
	if (cnt == 0) {
  400f58:	2a00      	cmp	r2, #0
  400f5a:	d048      	beq.n	400fee <twi_master_read+0x9e>
		return TWI_INVALID_ARGUMENT;
	}

	/* Set read mode, slave address and 3 internal address byte lengths */
	p_twi->TWI_MMR = 0;
  400f5c:	2600      	movs	r6, #0
  400f5e:	6046      	str	r6, [r0, #4]
	p_twi->TWI_MMR = TWI_MMR_MREAD | TWI_MMR_DADR(p_packet->chip) |
			((p_packet->addr_length << TWI_MMR_IADRSZ_Pos) &
  400f60:	684b      	ldr	r3, [r1, #4]
  400f62:	021b      	lsls	r3, r3, #8
  400f64:	f403 7340 	and.w	r3, r3, #768	; 0x300
  400f68:	f443 5480 	orr.w	r4, r3, #4096	; 0x1000
		return TWI_INVALID_ARGUMENT;
	}

	/* Set read mode, slave address and 3 internal address byte lengths */
	p_twi->TWI_MMR = 0;
	p_twi->TWI_MMR = TWI_MMR_MREAD | TWI_MMR_DADR(p_packet->chip) |
  400f6c:	7c0b      	ldrb	r3, [r1, #16]
  400f6e:	041b      	lsls	r3, r3, #16
  400f70:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
  400f74:	4323      	orrs	r3, r4
  400f76:	6043      	str	r3, [r0, #4]
			((p_packet->addr_length << TWI_MMR_IADRSZ_Pos) &
			TWI_MMR_IADRSZ_Msk);

	/* Set internal address for remote chip */
	p_twi->TWI_IADR = 0;
  400f78:	60c6      	str	r6, [r0, #12]
	p_twi->TWI_IADR = twi_mk_addr(p_packet->addr, p_packet->addr_length);
  400f7a:	684c      	ldr	r4, [r1, #4]
 */
static uint32_t twi_mk_addr(const uint8_t *addr, int len)
{
	uint32_t val;

	if (len == 0)
  400f7c:	b15c      	cbz	r4, 400f96 <twi_master_read+0x46>
		return 0;

	val = addr[0];
  400f7e:	780b      	ldrb	r3, [r1, #0]
	if (len > 1) {
  400f80:	2c01      	cmp	r4, #1
		val <<= 8;
		val |= addr[1];
  400f82:	bfc4      	itt	gt
  400f84:	784e      	ldrbgt	r6, [r1, #1]
  400f86:	ea46 2303 	orrgt.w	r3, r6, r3, lsl #8
	}
	if (len > 2) {
  400f8a:	2c02      	cmp	r4, #2
  400f8c:	dd04      	ble.n	400f98 <twi_master_read+0x48>
		val <<= 8;
		val |= addr[2];
  400f8e:	7889      	ldrb	r1, [r1, #2]
  400f90:	ea41 2303 	orr.w	r3, r1, r3, lsl #8
  400f94:	e000      	b.n	400f98 <twi_master_read+0x48>
static uint32_t twi_mk_addr(const uint8_t *addr, int len)
{
	uint32_t val;

	if (len == 0)
		return 0;
  400f96:	2300      	movs	r3, #0
			((p_packet->addr_length << TWI_MMR_IADRSZ_Pos) &
			TWI_MMR_IADRSZ_Msk);

	/* Set internal address for remote chip */
	p_twi->TWI_IADR = 0;
	p_twi->TWI_IADR = twi_mk_addr(p_packet->addr, p_packet->addr_length);
  400f98:	60c3      	str	r3, [r0, #12]

	/* Send a START condition */
	if (cnt == 1) {
  400f9a:	2a01      	cmp	r2, #1
  400f9c:	d103      	bne.n	400fa6 <twi_master_read+0x56>
		p_twi->TWI_CR = TWI_CR_START | TWI_CR_STOP;
  400f9e:	2303      	movs	r3, #3
  400fa0:	6003      	str	r3, [r0, #0]
		stop_sent = 1;
  400fa2:	2701      	movs	r7, #1
  400fa4:	e02f      	b.n	401006 <twi_master_read+0xb6>
	} else {
		p_twi->TWI_CR = TWI_CR_START;
  400fa6:	2301      	movs	r3, #1
  400fa8:	6003      	str	r3, [r0, #0]
		stop_sent = 0;
  400faa:	2700      	movs	r7, #0
  400fac:	e02b      	b.n	401006 <twi_master_read+0xb6>
		if (cnt == 1  && !stop_sent) {
			p_twi->TWI_CR = TWI_CR_STOP;
			stop_sent = 1;
		}

		if (!(status & TWI_SR_RXRDY)) {
  400fae:	4621      	mov	r1, r4
		p_twi->TWI_CR = TWI_CR_START;
		stop_sent = 0;
	}

	while (cnt > 0) {
		status = p_twi->TWI_SR;
  400fb0:	6a03      	ldr	r3, [r0, #32]
		if (status & TWI_SR_NACK) {
  400fb2:	f413 7f80 	tst.w	r3, #256	; 0x100
  400fb6:	d11d      	bne.n	400ff4 <twi_master_read+0xa4>
			return TWI_RECEIVE_NACK;
		}

		if (!timeout--) {
  400fb8:	1e4c      	subs	r4, r1, #1
  400fba:	b1f1      	cbz	r1, 400ffa <twi_master_read+0xaa>
			return TWI_ERROR_TIMEOUT;
		}
				
		/* Last byte ? */
		if (cnt == 1  && !stop_sent) {
  400fbc:	2a01      	cmp	r2, #1
  400fbe:	d104      	bne.n	400fca <twi_master_read+0x7a>
  400fc0:	bb77      	cbnz	r7, 401020 <twi_master_read+0xd0>
			p_twi->TWI_CR = TWI_CR_STOP;
  400fc2:	f8c0 8000 	str.w	r8, [r0]
			stop_sent = 1;
  400fc6:	4667      	mov	r7, ip
  400fc8:	e02a      	b.n	401020 <twi_master_read+0xd0>
		}

		if (!(status & TWI_SR_RXRDY)) {
  400fca:	f013 0f02 	tst.w	r3, #2
  400fce:	d005      	beq.n	400fdc <twi_master_read+0x8c>
			continue;
		}
		*buffer++ = p_twi->TWI_RHR;
  400fd0:	6b03      	ldr	r3, [r0, #48]	; 0x30
  400fd2:	702b      	strb	r3, [r5, #0]

		cnt--;
  400fd4:	3a01      	subs	r2, #1
		}

		if (!(status & TWI_SR_RXRDY)) {
			continue;
		}
		*buffer++ = p_twi->TWI_RHR;
  400fd6:	3501      	adds	r5, #1

		cnt--;
		timeout = TWI_TIMEOUT;
  400fd8:	4631      	mov	r1, r6
  400fda:	e000      	b.n	400fde <twi_master_read+0x8e>
  400fdc:	4621      	mov	r1, r4
	} else {
		p_twi->TWI_CR = TWI_CR_START;
		stop_sent = 0;
	}

	while (cnt > 0) {
  400fde:	2a00      	cmp	r2, #0
  400fe0:	d1e6      	bne.n	400fb0 <twi_master_read+0x60>

		cnt--;
		timeout = TWI_TIMEOUT;
	}

	while (!(p_twi->TWI_SR & TWI_SR_TXCOMP)) {
  400fe2:	6a03      	ldr	r3, [r0, #32]
  400fe4:	f013 0f01 	tst.w	r3, #1
  400fe8:	d0fb      	beq.n	400fe2 <twi_master_read+0x92>
	}

	p_twi->TWI_SR;
  400fea:	6a03      	ldr	r3, [r0, #32]

	return TWI_SUCCESS;
  400fec:	e01c      	b.n	401028 <twi_master_read+0xd8>
	uint8_t stop_sent = 0;
	uint32_t timeout = TWI_TIMEOUT;;
	
	/* Check argument */
	if (cnt == 0) {
		return TWI_INVALID_ARGUMENT;
  400fee:	f04f 0e01 	mov.w	lr, #1
  400ff2:	e019      	b.n	401028 <twi_master_read+0xd8>
	}

	while (cnt > 0) {
		status = p_twi->TWI_SR;
		if (status & TWI_SR_NACK) {
			return TWI_RECEIVE_NACK;
  400ff4:	f04f 0e05 	mov.w	lr, #5
  400ff8:	e016      	b.n	401028 <twi_master_read+0xd8>
		}

		if (!timeout--) {
			return TWI_ERROR_TIMEOUT;
  400ffa:	f04f 0e09 	mov.w	lr, #9
  400ffe:	e013      	b.n	401028 <twi_master_read+0xd8>
	}

	while (cnt > 0) {
		status = p_twi->TWI_SR;
		if (status & TWI_SR_NACK) {
			return TWI_RECEIVE_NACK;
  401000:	f04f 0e05 	mov.w	lr, #5
  401004:	e010      	b.n	401028 <twi_master_read+0xd8>
		p_twi->TWI_CR = TWI_CR_START;
		stop_sent = 0;
	}

	while (cnt > 0) {
		status = p_twi->TWI_SR;
  401006:	6a03      	ldr	r3, [r0, #32]
		if (status & TWI_SR_NACK) {
  401008:	f413 7e80 	ands.w	lr, r3, #256	; 0x100
  40100c:	d1f8      	bne.n	401000 <twi_master_read+0xb0>
  40100e:	f643 2497 	movw	r4, #14999	; 0x3a97
			continue;
		}
		*buffer++ = p_twi->TWI_RHR;

		cnt--;
		timeout = TWI_TIMEOUT;
  401012:	f643 2698 	movw	r6, #15000	; 0x3a98
			return TWI_ERROR_TIMEOUT;
		}
				
		/* Last byte ? */
		if (cnt == 1  && !stop_sent) {
			p_twi->TWI_CR = TWI_CR_STOP;
  401016:	f04f 0802 	mov.w	r8, #2
			stop_sent = 1;
  40101a:	f04f 0c01 	mov.w	ip, #1
  40101e:	e7cd      	b.n	400fbc <twi_master_read+0x6c>
		}

		if (!(status & TWI_SR_RXRDY)) {
  401020:	f013 0f02 	tst.w	r3, #2
  401024:	d0c3      	beq.n	400fae <twi_master_read+0x5e>
  401026:	e7d3      	b.n	400fd0 <twi_master_read+0x80>
	}

	p_twi->TWI_SR;

	return TWI_SUCCESS;
}
  401028:	4670      	mov	r0, lr
  40102a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40102e:	bf00      	nop

00401030 <twi_master_write>:
 * \param p_packet Packet information and data (see \ref twi_packet_t).
 *
 * \return TWI_SUCCESS if all bytes were written, error code otherwise.
 */
uint32_t twi_master_write(Twi *p_twi, twi_packet_t *p_packet)
{
  401030:	4603      	mov	r3, r0
	uint32_t status;
	uint32_t cnt = p_packet->length;
  401032:	68ca      	ldr	r2, [r1, #12]
	uint8_t *buffer = p_packet->buffer;
  401034:	6888      	ldr	r0, [r1, #8]

	/* Check argument */
	if (cnt == 0) {
  401036:	2a00      	cmp	r2, #0
  401038:	d040      	beq.n	4010bc <twi_master_write+0x8c>
 * \param p_packet Packet information and data (see \ref twi_packet_t).
 *
 * \return TWI_SUCCESS if all bytes were written, error code otherwise.
 */
uint32_t twi_master_write(Twi *p_twi, twi_packet_t *p_packet)
{
  40103a:	b470      	push	{r4, r5, r6}
	if (cnt == 0) {
		return TWI_INVALID_ARGUMENT;
	}

	/* Set write mode, slave address and 3 internal address byte lengths */
	p_twi->TWI_MMR = 0;
  40103c:	2600      	movs	r6, #0
  40103e:	605e      	str	r6, [r3, #4]
	p_twi->TWI_MMR = TWI_MMR_DADR(p_packet->chip) |
  401040:	7c0c      	ldrb	r4, [r1, #16]
  401042:	0424      	lsls	r4, r4, #16
  401044:	f404 05fe 	and.w	r5, r4, #8323072	; 0x7f0000
			((p_packet->addr_length << TWI_MMR_IADRSZ_Pos) &
  401048:	684c      	ldr	r4, [r1, #4]
  40104a:	0224      	lsls	r4, r4, #8
  40104c:	f404 7440 	and.w	r4, r4, #768	; 0x300
		return TWI_INVALID_ARGUMENT;
	}

	/* Set write mode, slave address and 3 internal address byte lengths */
	p_twi->TWI_MMR = 0;
	p_twi->TWI_MMR = TWI_MMR_DADR(p_packet->chip) |
  401050:	432c      	orrs	r4, r5
  401052:	605c      	str	r4, [r3, #4]
			((p_packet->addr_length << TWI_MMR_IADRSZ_Pos) &
			TWI_MMR_IADRSZ_Msk);

	/* Set internal address for remote chip */
	p_twi->TWI_IADR = 0;
  401054:	60de      	str	r6, [r3, #12]
	p_twi->TWI_IADR = twi_mk_addr(p_packet->addr, p_packet->addr_length);
  401056:	684d      	ldr	r5, [r1, #4]
 */
static uint32_t twi_mk_addr(const uint8_t *addr, int len)
{
	uint32_t val;

	if (len == 0)
  401058:	b15d      	cbz	r5, 401072 <twi_master_write+0x42>
		return 0;

	val = addr[0];
  40105a:	780c      	ldrb	r4, [r1, #0]
	if (len > 1) {
  40105c:	2d01      	cmp	r5, #1
		val <<= 8;
		val |= addr[1];
  40105e:	bfc4      	itt	gt
  401060:	784e      	ldrbgt	r6, [r1, #1]
  401062:	ea46 2404 	orrgt.w	r4, r6, r4, lsl #8
	}
	if (len > 2) {
  401066:	2d02      	cmp	r5, #2
  401068:	dd04      	ble.n	401074 <twi_master_write+0x44>
		val <<= 8;
		val |= addr[2];
  40106a:	7889      	ldrb	r1, [r1, #2]
  40106c:	ea41 2404 	orr.w	r4, r1, r4, lsl #8
  401070:	e000      	b.n	401074 <twi_master_write+0x44>
static uint32_t twi_mk_addr(const uint8_t *addr, int len)
{
	uint32_t val;

	if (len == 0)
		return 0;
  401072:	2400      	movs	r4, #0
			((p_packet->addr_length << TWI_MMR_IADRSZ_Pos) &
			TWI_MMR_IADRSZ_Msk);

	/* Set internal address for remote chip */
	p_twi->TWI_IADR = 0;
	p_twi->TWI_IADR = twi_mk_addr(p_packet->addr, p_packet->addr_length);
  401074:	60dc      	str	r4, [r3, #12]
  401076:	e00b      	b.n	401090 <twi_master_write+0x60>

	/* Send all bytes */
	while (cnt > 0) {
		status = p_twi->TWI_SR;
  401078:	6a19      	ldr	r1, [r3, #32]
		if (status & TWI_SR_NACK) {
  40107a:	f411 7f80 	tst.w	r1, #256	; 0x100
  40107e:	d11f      	bne.n	4010c0 <twi_master_write+0x90>
			return TWI_RECEIVE_NACK;
		}

		if (!(status & TWI_SR_TXRDY)) {
  401080:	f011 0f04 	tst.w	r1, #4
  401084:	d0f8      	beq.n	401078 <twi_master_write+0x48>
			continue;
		}
		p_twi->TWI_THR = *buffer++;
  401086:	f810 1b01 	ldrb.w	r1, [r0], #1
  40108a:	6359      	str	r1, [r3, #52]	; 0x34
	/* Set internal address for remote chip */
	p_twi->TWI_IADR = 0;
	p_twi->TWI_IADR = twi_mk_addr(p_packet->addr, p_packet->addr_length);

	/* Send all bytes */
	while (cnt > 0) {
  40108c:	3a01      	subs	r2, #1
  40108e:	d007      	beq.n	4010a0 <twi_master_write+0x70>
		status = p_twi->TWI_SR;
  401090:	6a19      	ldr	r1, [r3, #32]
		if (status & TWI_SR_NACK) {
  401092:	f411 7f80 	tst.w	r1, #256	; 0x100
  401096:	d115      	bne.n	4010c4 <twi_master_write+0x94>
			return TWI_RECEIVE_NACK;
		}

		if (!(status & TWI_SR_TXRDY)) {
  401098:	f011 0f04 	tst.w	r1, #4
  40109c:	d0ec      	beq.n	401078 <twi_master_write+0x48>
  40109e:	e7f2      	b.n	401086 <twi_master_write+0x56>

		cnt--;
	}

	while (1) {
		status = p_twi->TWI_SR;
  4010a0:	6a1a      	ldr	r2, [r3, #32]
		if (status & TWI_SR_NACK) {
  4010a2:	f412 7080 	ands.w	r0, r2, #256	; 0x100
  4010a6:	d10f      	bne.n	4010c8 <twi_master_write+0x98>
			return TWI_RECEIVE_NACK;
		}

		if (status & TWI_SR_TXRDY) {
  4010a8:	f012 0f04 	tst.w	r2, #4
  4010ac:	d0f8      	beq.n	4010a0 <twi_master_write+0x70>
			break;
		}
	}

	p_twi->TWI_CR = TWI_CR_STOP;
  4010ae:	2202      	movs	r2, #2
  4010b0:	601a      	str	r2, [r3, #0]

	while (!(p_twi->TWI_SR & TWI_SR_TXCOMP)) {
  4010b2:	6a1a      	ldr	r2, [r3, #32]
  4010b4:	f012 0f01 	tst.w	r2, #1
  4010b8:	d0fb      	beq.n	4010b2 <twi_master_write+0x82>
  4010ba:	e006      	b.n	4010ca <twi_master_write+0x9a>
	uint32_t cnt = p_packet->length;
	uint8_t *buffer = p_packet->buffer;

	/* Check argument */
	if (cnt == 0) {
		return TWI_INVALID_ARGUMENT;
  4010bc:	2001      	movs	r0, #1

	while (!(p_twi->TWI_SR & TWI_SR_TXCOMP)) {
	}

	return TWI_SUCCESS;
}
  4010be:	4770      	bx	lr

	/* Send all bytes */
	while (cnt > 0) {
		status = p_twi->TWI_SR;
		if (status & TWI_SR_NACK) {
			return TWI_RECEIVE_NACK;
  4010c0:	2005      	movs	r0, #5
  4010c2:	e002      	b.n	4010ca <twi_master_write+0x9a>
  4010c4:	2005      	movs	r0, #5
  4010c6:	e000      	b.n	4010ca <twi_master_write+0x9a>
	}

	while (1) {
		status = p_twi->TWI_SR;
		if (status & TWI_SR_NACK) {
			return TWI_RECEIVE_NACK;
  4010c8:	2005      	movs	r0, #5

	while (!(p_twi->TWI_SR & TWI_SR_TXCOMP)) {
	}

	return TWI_SUCCESS;
}
  4010ca:	bc70      	pop	{r4, r5, r6}
  4010cc:	4770      	bx	lr
  4010ce:	bf00      	nop

004010d0 <Dummy_Handler>:
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
	while (1) {
	}
  4010d0:	e7fe      	b.n	4010d0 <Dummy_Handler>
  4010d2:	bf00      	nop

004010d4 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
  4010d4:	b508      	push	{r3, lr}

	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc > pDest) {
  4010d6:	4b20      	ldr	r3, [pc, #128]	; (401158 <Reset_Handler+0x84>)
  4010d8:	4a20      	ldr	r2, [pc, #128]	; (40115c <Reset_Handler+0x88>)
  4010da:	429a      	cmp	r2, r3
  4010dc:	d913      	bls.n	401106 <Reset_Handler+0x32>
		for (; pDest < &_erelocate;) {
  4010de:	4b20      	ldr	r3, [pc, #128]	; (401160 <Reset_Handler+0x8c>)
  4010e0:	4a1d      	ldr	r2, [pc, #116]	; (401158 <Reset_Handler+0x84>)
  4010e2:	429a      	cmp	r2, r3
  4010e4:	d21f      	bcs.n	401126 <Reset_Handler+0x52>
  4010e6:	4611      	mov	r1, r2
  4010e8:	3204      	adds	r2, #4
  4010ea:	3303      	adds	r3, #3
  4010ec:	1a9b      	subs	r3, r3, r2
  4010ee:	f023 0303 	bic.w	r3, r3, #3
  4010f2:	3304      	adds	r3, #4
  4010f4:	4a19      	ldr	r2, [pc, #100]	; (40115c <Reset_Handler+0x88>)
  4010f6:	4413      	add	r3, r2
			*pDest++ = *pSrc++;
  4010f8:	f852 0b04 	ldr.w	r0, [r2], #4
  4010fc:	f841 0b04 	str.w	r0, [r1], #4
	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc > pDest) {
		for (; pDest < &_erelocate;) {
  401100:	429a      	cmp	r2, r3
  401102:	d1f9      	bne.n	4010f8 <Reset_Handler+0x24>
  401104:	e00f      	b.n	401126 <Reset_Handler+0x52>
			*pDest++ = *pSrc++;
		}
	} else if (pSrc < pDest) {
  401106:	4b14      	ldr	r3, [pc, #80]	; (401158 <Reset_Handler+0x84>)
  401108:	4a14      	ldr	r2, [pc, #80]	; (40115c <Reset_Handler+0x88>)
  40110a:	429a      	cmp	r2, r3
  40110c:	d20b      	bcs.n	401126 <Reset_Handler+0x52>
		uint32_t nb_bytes = (uint32_t)&_erelocate - (uint32_t)&_srelocate;
  40110e:	4b14      	ldr	r3, [pc, #80]	; (401160 <Reset_Handler+0x8c>)
  401110:	4a11      	ldr	r2, [pc, #68]	; (401158 <Reset_Handler+0x84>)
  401112:	1a9a      	subs	r2, r3, r2
  401114:	4813      	ldr	r0, [pc, #76]	; (401164 <Reset_Handler+0x90>)
		pSrc = (uint32_t*)((uint32_t)pSrc + nb_bytes) - 1;
  401116:	1881      	adds	r1, r0, r2
		pDest = (uint32_t*)((uint32_t)pDest + nb_bytes) - 1;
		for (;nb_bytes;nb_bytes -= 4) {
  401118:	b12a      	cbz	r2, 401126 <Reset_Handler+0x52>
			*pDest-- = *pSrc--;
  40111a:	f851 2904 	ldr.w	r2, [r1], #-4
  40111e:	f843 2d04 	str.w	r2, [r3, #-4]!
		}
	} else if (pSrc < pDest) {
		uint32_t nb_bytes = (uint32_t)&_erelocate - (uint32_t)&_srelocate;
		pSrc = (uint32_t*)((uint32_t)pSrc + nb_bytes) - 1;
		pDest = (uint32_t*)((uint32_t)pDest + nb_bytes) - 1;
		for (;nb_bytes;nb_bytes -= 4) {
  401122:	4281      	cmp	r1, r0
  401124:	d1f9      	bne.n	40111a <Reset_Handler+0x46>

    No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
  401126:	bf00      	nop
		}
	}
	__NOP();

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
  401128:	4b0f      	ldr	r3, [pc, #60]	; (401168 <Reset_Handler+0x94>)
  40112a:	4a10      	ldr	r2, [pc, #64]	; (40116c <Reset_Handler+0x98>)
  40112c:	429a      	cmp	r2, r3
  40112e:	d20b      	bcs.n	401148 <Reset_Handler+0x74>
  401130:	1d13      	adds	r3, r2, #4
  401132:	4a0f      	ldr	r2, [pc, #60]	; (401170 <Reset_Handler+0x9c>)
  401134:	1ad2      	subs	r2, r2, r3
  401136:	f022 0203 	bic.w	r2, r2, #3
  40113a:	441a      	add	r2, r3
  40113c:	3b04      	subs	r3, #4
		*pDest++ = 0;
  40113e:	2100      	movs	r1, #0
  401140:	f843 1b04 	str.w	r1, [r3], #4
		}
	}
	__NOP();

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
  401144:	4293      	cmp	r3, r2
  401146:	d1fb      	bne.n	401140 <Reset_Handler+0x6c>
		*pDest++ = 0;
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) & _sfixed;
	SCB->VTOR = ((uint32_t) pSrc);
  401148:	4b0a      	ldr	r3, [pc, #40]	; (401174 <Reset_Handler+0xa0>)
  40114a:	4a0b      	ldr	r2, [pc, #44]	; (401178 <Reset_Handler+0xa4>)
  40114c:	609a      	str	r2, [r3, #8]

	/* Initialize the C library */
	__libc_init_array();
  40114e:	4b0b      	ldr	r3, [pc, #44]	; (40117c <Reset_Handler+0xa8>)
  401150:	4798      	blx	r3

	/* Branch to main function */
	main();
  401152:	4b0b      	ldr	r3, [pc, #44]	; (401180 <Reset_Handler+0xac>)
  401154:	4798      	blx	r3

	/* Infinite loop */
	while (1);
  401156:	e7fe      	b.n	401156 <Reset_Handler+0x82>
  401158:	20000000 	.word	0x20000000
  40115c:	004044b0 	.word	0x004044b0
  401160:	20000440 	.word	0x20000440
  401164:	004044ac 	.word	0x004044ac
  401168:	2000a9f8 	.word	0x2000a9f8
  40116c:	20000440 	.word	0x20000440
  401170:	2000a9fb 	.word	0x2000a9fb
  401174:	e000ed00 	.word	0xe000ed00
  401178:	00400000 	.word	0x00400000
  40117c:	004030cd 	.word	0x004030cd
  401180:	00402dcd 	.word	0x00402dcd

00401184 <SystemCoreClockUpdate>:
 * \brief Get Core Clock Frequency.
 */
void SystemCoreClockUpdate( void )
{
	/* Determine clock frequency according to clock register values */
	switch ( PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk ) {
  401184:	4b3d      	ldr	r3, [pc, #244]	; (40127c <SystemCoreClockUpdate+0xf8>)
  401186:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  401188:	f003 0303 	and.w	r3, r3, #3
  40118c:	2b03      	cmp	r3, #3
  40118e:	d85d      	bhi.n	40124c <SystemCoreClockUpdate+0xc8>
  401190:	e8df f003 	tbb	[pc, r3]
  401194:	2b2b0e02 	.word	0x2b2b0e02
	case PMC_MCKR_CSS_SLOW_CLK: /* Slow clock */
			if ( SUPC->SUPC_SR & SUPC_SR_OSCSEL ) {
  401198:	4b39      	ldr	r3, [pc, #228]	; (401280 <SystemCoreClockUpdate+0xfc>)
  40119a:	695b      	ldr	r3, [r3, #20]
  40119c:	f013 0f80 	tst.w	r3, #128	; 0x80
				SystemCoreClock = CHIP_FREQ_XTAL_32K;
  4011a0:	bf14      	ite	ne
  4011a2:	f44f 4200 	movne.w	r2, #32768	; 0x8000
			} else {
				SystemCoreClock = CHIP_FREQ_SLCK_RC;
  4011a6:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
  4011aa:	4b36      	ldr	r3, [pc, #216]	; (401284 <SystemCoreClockUpdate+0x100>)
  4011ac:	601a      	str	r2, [r3, #0]
  4011ae:	e04d      	b.n	40124c <SystemCoreClockUpdate+0xc8>
			}
		break;
		
	case PMC_MCKR_CSS_MAIN_CLK: /* Main clock */
		if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL ) {
  4011b0:	4b32      	ldr	r3, [pc, #200]	; (40127c <SystemCoreClockUpdate+0xf8>)
  4011b2:	6a1b      	ldr	r3, [r3, #32]
  4011b4:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  4011b8:	d003      	beq.n	4011c2 <SystemCoreClockUpdate+0x3e>
			SystemCoreClock = CHIP_FREQ_XTAL;
  4011ba:	4a33      	ldr	r2, [pc, #204]	; (401288 <SystemCoreClockUpdate+0x104>)
  4011bc:	4b31      	ldr	r3, [pc, #196]	; (401284 <SystemCoreClockUpdate+0x100>)
  4011be:	601a      	str	r2, [r3, #0]
  4011c0:	e044      	b.n	40124c <SystemCoreClockUpdate+0xc8>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  4011c2:	4a32      	ldr	r2, [pc, #200]	; (40128c <SystemCoreClockUpdate+0x108>)
  4011c4:	4b2f      	ldr	r3, [pc, #188]	; (401284 <SystemCoreClockUpdate+0x100>)
  4011c6:	601a      	str	r2, [r3, #0]
			
			switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk ) {
  4011c8:	4b2c      	ldr	r3, [pc, #176]	; (40127c <SystemCoreClockUpdate+0xf8>)
  4011ca:	6a1b      	ldr	r3, [r3, #32]
  4011cc:	f003 0370 	and.w	r3, r3, #112	; 0x70
  4011d0:	2b10      	cmp	r3, #16
  4011d2:	d002      	beq.n	4011da <SystemCoreClockUpdate+0x56>
  4011d4:	2b20      	cmp	r3, #32
  4011d6:	d004      	beq.n	4011e2 <SystemCoreClockUpdate+0x5e>
  4011d8:	e038      	b.n	40124c <SystemCoreClockUpdate+0xc8>
			case CKGR_MOR_MOSCRCF_4_MHz:
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
			break;
			
			case CKGR_MOR_MOSCRCF_8_MHz:
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_8MHZ;
  4011da:	4a2d      	ldr	r2, [pc, #180]	; (401290 <SystemCoreClockUpdate+0x10c>)
  4011dc:	4b29      	ldr	r3, [pc, #164]	; (401284 <SystemCoreClockUpdate+0x100>)
  4011de:	601a      	str	r2, [r3, #0]
			break;
  4011e0:	e034      	b.n	40124c <SystemCoreClockUpdate+0xc8>
			
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_12MHZ;
  4011e2:	4a29      	ldr	r2, [pc, #164]	; (401288 <SystemCoreClockUpdate+0x104>)
  4011e4:	4b27      	ldr	r3, [pc, #156]	; (401284 <SystemCoreClockUpdate+0x100>)
  4011e6:	601a      	str	r2, [r3, #0]
			break;
  4011e8:	e030      	b.n	40124c <SystemCoreClockUpdate+0xc8>
		}
		break;
		
	case PMC_MCKR_CSS_PLLA_CLK:	/* PLLA clock */
	case PMC_MCKR_CSS_PLLB_CLK:	/* PLLB clock */
			if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL ) {
  4011ea:	4b24      	ldr	r3, [pc, #144]	; (40127c <SystemCoreClockUpdate+0xf8>)
  4011ec:	6a1b      	ldr	r3, [r3, #32]
  4011ee:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  4011f2:	d003      	beq.n	4011fc <SystemCoreClockUpdate+0x78>
				SystemCoreClock = CHIP_FREQ_XTAL;
  4011f4:	4a24      	ldr	r2, [pc, #144]	; (401288 <SystemCoreClockUpdate+0x104>)
  4011f6:	4b23      	ldr	r3, [pc, #140]	; (401284 <SystemCoreClockUpdate+0x100>)
  4011f8:	601a      	str	r2, [r3, #0]
  4011fa:	e012      	b.n	401222 <SystemCoreClockUpdate+0x9e>
			} else {
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  4011fc:	4a23      	ldr	r2, [pc, #140]	; (40128c <SystemCoreClockUpdate+0x108>)
  4011fe:	4b21      	ldr	r3, [pc, #132]	; (401284 <SystemCoreClockUpdate+0x100>)
  401200:	601a      	str	r2, [r3, #0]
				
				switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk ) {
  401202:	4b1e      	ldr	r3, [pc, #120]	; (40127c <SystemCoreClockUpdate+0xf8>)
  401204:	6a1b      	ldr	r3, [r3, #32]
  401206:	f003 0370 	and.w	r3, r3, #112	; 0x70
  40120a:	2b10      	cmp	r3, #16
  40120c:	d002      	beq.n	401214 <SystemCoreClockUpdate+0x90>
  40120e:	2b20      	cmp	r3, #32
  401210:	d004      	beq.n	40121c <SystemCoreClockUpdate+0x98>
  401212:	e006      	b.n	401222 <SystemCoreClockUpdate+0x9e>
				case CKGR_MOR_MOSCRCF_4_MHz:
					SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
					break;
				
				case CKGR_MOR_MOSCRCF_8_MHz:
					SystemCoreClock = CHIP_FREQ_MAINCK_RC_8MHZ;
  401214:	4a1e      	ldr	r2, [pc, #120]	; (401290 <SystemCoreClockUpdate+0x10c>)
  401216:	4b1b      	ldr	r3, [pc, #108]	; (401284 <SystemCoreClockUpdate+0x100>)
  401218:	601a      	str	r2, [r3, #0]
					break;
  40121a:	e002      	b.n	401222 <SystemCoreClockUpdate+0x9e>
				
				case CKGR_MOR_MOSCRCF_12_MHz:
					SystemCoreClock = CHIP_FREQ_MAINCK_RC_12MHZ;
  40121c:	4a1a      	ldr	r2, [pc, #104]	; (401288 <SystemCoreClockUpdate+0x104>)
  40121e:	4b19      	ldr	r3, [pc, #100]	; (401284 <SystemCoreClockUpdate+0x100>)
  401220:	601a      	str	r2, [r3, #0]
				default:
					break;
				}
			}
			
			if ( (uint32_t)(PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) ==
  401222:	4b16      	ldr	r3, [pc, #88]	; (40127c <SystemCoreClockUpdate+0xf8>)
  401224:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  401226:	f003 0303 	and.w	r3, r3, #3
  40122a:	2b02      	cmp	r3, #2
					PMC_MCKR_CSS_PLLA_CLK ) {
				SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk)
  40122c:	4a13      	ldr	r2, [pc, #76]	; (40127c <SystemCoreClockUpdate+0xf8>)
  40122e:	bf07      	ittee	eq
  401230:	6a93      	ldreq	r3, [r2, #40]	; 0x28
						>> CKGR_PLLAR_MULA_Pos) + 1U);
				SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk)
  401232:	6a92      	ldreq	r2, [r2, #40]	; 0x28
						>> CKGR_PLLAR_DIVA_Pos));
			} else {
				SystemCoreClock *= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_MULB_Msk)
  401234:	6ad3      	ldrne	r3, [r2, #44]	; 0x2c
						>> CKGR_PLLBR_MULB_Pos) + 1U);
				SystemCoreClock /= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_DIVB_Msk)
  401236:	6ad2      	ldrne	r2, [r2, #44]	; 0x2c
  401238:	4812      	ldr	r0, [pc, #72]	; (401284 <SystemCoreClockUpdate+0x100>)
						>> CKGR_PLLAR_MULA_Pos) + 1U);
				SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk)
						>> CKGR_PLLAR_DIVA_Pos));
			} else {
				SystemCoreClock *= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_MULB_Msk)
						>> CKGR_PLLBR_MULB_Pos) + 1U);
  40123a:	f3c3 410a 	ubfx	r1, r3, #16, #11
				SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk)
						>> CKGR_PLLAR_MULA_Pos) + 1U);
				SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk)
						>> CKGR_PLLAR_DIVA_Pos));
			} else {
				SystemCoreClock *= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_MULB_Msk)
  40123e:	6803      	ldr	r3, [r0, #0]
  401240:	fb01 3303 	mla	r3, r1, r3, r3
						>> CKGR_PLLBR_MULB_Pos) + 1U);
				SystemCoreClock /= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_DIVB_Msk)
						>> CKGR_PLLBR_DIVB_Pos));
  401244:	b2d2      	uxtb	r2, r2
				SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk)
						>> CKGR_PLLAR_DIVA_Pos));
			} else {
				SystemCoreClock *= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_MULB_Msk)
						>> CKGR_PLLBR_MULB_Pos) + 1U);
				SystemCoreClock /= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_DIVB_Msk)
  401246:	fbb3 f3f2 	udiv	r3, r3, r2
  40124a:	6003      	str	r3, [r0, #0]
		
	default:
		break;
	}

	if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 ) {
  40124c:	4b0b      	ldr	r3, [pc, #44]	; (40127c <SystemCoreClockUpdate+0xf8>)
  40124e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  401250:	f003 0370 	and.w	r3, r3, #112	; 0x70
  401254:	2b70      	cmp	r3, #112	; 0x70
  401256:	d107      	bne.n	401268 <SystemCoreClockUpdate+0xe4>
		SystemCoreClock /= 3U;
  401258:	4a0a      	ldr	r2, [pc, #40]	; (401284 <SystemCoreClockUpdate+0x100>)
  40125a:	6813      	ldr	r3, [r2, #0]
  40125c:	490d      	ldr	r1, [pc, #52]	; (401294 <SystemCoreClockUpdate+0x110>)
  40125e:	fba1 1303 	umull	r1, r3, r1, r3
  401262:	085b      	lsrs	r3, r3, #1
  401264:	6013      	str	r3, [r2, #0]
  401266:	4770      	bx	lr
	} else {
		SystemCoreClock >>=
			((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  401268:	4b04      	ldr	r3, [pc, #16]	; (40127c <SystemCoreClockUpdate+0xf8>)
  40126a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
	}

	if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 ) {
		SystemCoreClock /= 3U;
	} else {
		SystemCoreClock >>=
  40126c:	4905      	ldr	r1, [pc, #20]	; (401284 <SystemCoreClockUpdate+0x100>)
			((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  40126e:	f3c2 1202 	ubfx	r2, r2, #4, #3
	}

	if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 ) {
		SystemCoreClock /= 3U;
	} else {
		SystemCoreClock >>=
  401272:	680b      	ldr	r3, [r1, #0]
  401274:	40d3      	lsrs	r3, r2
  401276:	600b      	str	r3, [r1, #0]
  401278:	4770      	bx	lr
  40127a:	bf00      	nop
  40127c:	400e0400 	.word	0x400e0400
  401280:	400e1410 	.word	0x400e1410
  401284:	2000000c 	.word	0x2000000c
  401288:	00b71b00 	.word	0x00b71b00
  40128c:	003d0900 	.word	0x003d0900
  401290:	007a1200 	.word	0x007a1200
  401294:	aaaaaaab 	.word	0xaaaaaaab

00401298 <system_init_flash>:
 */
void system_init_flash( uint32_t ul_clk )
{
  /* Set FWS for embedded Flash access according to operating frequency */
#if !defined(ID_EFC1)
	if ( ul_clk < CHIP_FREQ_FWS_0 ) {
  401298:	4b12      	ldr	r3, [pc, #72]	; (4012e4 <system_init_flash+0x4c>)
  40129a:	4298      	cmp	r0, r3
  40129c:	d804      	bhi.n	4012a8 <system_init_flash+0x10>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  40129e:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  4012a2:	4b11      	ldr	r3, [pc, #68]	; (4012e8 <system_init_flash+0x50>)
  4012a4:	601a      	str	r2, [r3, #0]
  4012a6:	4770      	bx	lr
	} else {
		if ( ul_clk < CHIP_FREQ_FWS_1 ) {
  4012a8:	4b10      	ldr	r3, [pc, #64]	; (4012ec <system_init_flash+0x54>)
  4012aa:	4298      	cmp	r0, r3
  4012ac:	d803      	bhi.n	4012b6 <system_init_flash+0x1e>
			EFC0->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  4012ae:	4a10      	ldr	r2, [pc, #64]	; (4012f0 <system_init_flash+0x58>)
  4012b0:	4b0d      	ldr	r3, [pc, #52]	; (4012e8 <system_init_flash+0x50>)
  4012b2:	601a      	str	r2, [r3, #0]
  4012b4:	4770      	bx	lr
		} else {
			if ( ul_clk < CHIP_FREQ_FWS_2 ) {
  4012b6:	4b0f      	ldr	r3, [pc, #60]	; (4012f4 <system_init_flash+0x5c>)
  4012b8:	4298      	cmp	r0, r3
  4012ba:	d803      	bhi.n	4012c4 <system_init_flash+0x2c>
				EFC0->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  4012bc:	4a0e      	ldr	r2, [pc, #56]	; (4012f8 <system_init_flash+0x60>)
  4012be:	4b0a      	ldr	r3, [pc, #40]	; (4012e8 <system_init_flash+0x50>)
  4012c0:	601a      	str	r2, [r3, #0]
  4012c2:	4770      	bx	lr
			} else {
				if ( ul_clk < CHIP_FREQ_FWS_3 ) {
  4012c4:	4b0d      	ldr	r3, [pc, #52]	; (4012fc <system_init_flash+0x64>)
  4012c6:	4298      	cmp	r0, r3
  4012c8:	d803      	bhi.n	4012d2 <system_init_flash+0x3a>
					EFC0->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  4012ca:	4a0d      	ldr	r2, [pc, #52]	; (401300 <system_init_flash+0x68>)
  4012cc:	4b06      	ldr	r3, [pc, #24]	; (4012e8 <system_init_flash+0x50>)
  4012ce:	601a      	str	r2, [r3, #0]
  4012d0:	4770      	bx	lr
				} else {
					if ( ul_clk < CHIP_FREQ_FWS_4 ) {
  4012d2:	4b0c      	ldr	r3, [pc, #48]	; (401304 <system_init_flash+0x6c>)
  4012d4:	4298      	cmp	r0, r3
					EFC0->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
  4012d6:	bf94      	ite	ls
  4012d8:	f04f 2204 	movls.w	r2, #67109888	; 0x4000400
					} else {
					EFC0->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  4012dc:	4a0a      	ldrhi	r2, [pc, #40]	; (401308 <system_init_flash+0x70>)
  4012de:	4b02      	ldr	r3, [pc, #8]	; (4012e8 <system_init_flash+0x50>)
  4012e0:	601a      	str	r2, [r3, #0]
  4012e2:	4770      	bx	lr
  4012e4:	01312cff 	.word	0x01312cff
  4012e8:	400e0a00 	.word	0x400e0a00
  4012ec:	026259ff 	.word	0x026259ff
  4012f0:	04000100 	.word	0x04000100
  4012f4:	039386ff 	.word	0x039386ff
  4012f8:	04000200 	.word	0x04000200
  4012fc:	04c4b3ff 	.word	0x04c4b3ff
  401300:	04000300 	.word	0x04000300
  401304:	05f5e0ff 	.word	0x05f5e0ff
  401308:	04000500 	.word	0x04000500

0040130c <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
  40130c:	f100 0308 	add.w	r3, r0, #8
  401310:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
  401312:	f04f 32ff 	mov.w	r2, #4294967295
  401316:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
  401318:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
  40131a:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
  40131c:	2300      	movs	r3, #0
  40131e:	6003      	str	r3, [r0, #0]
  401320:	4770      	bx	lr
  401322:	bf00      	nop

00401324 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
  401324:	2300      	movs	r3, #0
  401326:	6103      	str	r3, [r0, #16]
  401328:	4770      	bx	lr
  40132a:	bf00      	nop

0040132c <vListInsertEnd>:
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
  40132c:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
  40132e:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
  401330:	689a      	ldr	r2, [r3, #8]
  401332:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
  401334:	689a      	ldr	r2, [r3, #8]
  401336:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
  401338:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
  40133a:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
  40133c:	6803      	ldr	r3, [r0, #0]
  40133e:	3301      	adds	r3, #1
  401340:	6003      	str	r3, [r0, #0]
  401342:	4770      	bx	lr

00401344 <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
  401344:	b430      	push	{r4, r5}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
  401346:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
  401348:	f1b5 3fff 	cmp.w	r5, #4294967295
  40134c:	d101      	bne.n	401352 <vListInsert+0xe>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
  40134e:	6902      	ldr	r2, [r0, #16]
  401350:	e007      	b.n	401362 <vListInsert+0x1e>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
  401352:	f100 0208 	add.w	r2, r0, #8
  401356:	e000      	b.n	40135a <vListInsert+0x16>
  401358:	461a      	mov	r2, r3
  40135a:	6853      	ldr	r3, [r2, #4]
  40135c:	681c      	ldr	r4, [r3, #0]
  40135e:	42a5      	cmp	r5, r4
  401360:	d2fa      	bcs.n	401358 <vListInsert+0x14>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
  401362:	6853      	ldr	r3, [r2, #4]
  401364:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
  401366:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
  401368:	608a      	str	r2, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
  40136a:	6051      	str	r1, [r2, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
  40136c:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
  40136e:	6803      	ldr	r3, [r0, #0]
  401370:	3301      	adds	r3, #1
  401372:	6003      	str	r3, [r0, #0]
}
  401374:	bc30      	pop	{r4, r5}
  401376:	4770      	bx	lr

00401378 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
  401378:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
  40137a:	6842      	ldr	r2, [r0, #4]
  40137c:	6881      	ldr	r1, [r0, #8]
  40137e:	6091      	str	r1, [r2, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
  401380:	6882      	ldr	r2, [r0, #8]
  401382:	6841      	ldr	r1, [r0, #4]
  401384:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
  401386:	685a      	ldr	r2, [r3, #4]
  401388:	4282      	cmp	r2, r0
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
  40138a:	bf04      	itt	eq
  40138c:	6892      	ldreq	r2, [r2, #8]
  40138e:	605a      	streq	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
  401390:	2200      	movs	r2, #0
  401392:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
  401394:	6818      	ldr	r0, [r3, #0]
  401396:	3801      	subs	r0, #1
  401398:	6018      	str	r0, [r3, #0]

	return pxList->uxNumberOfItems;
}
  40139a:	4770      	bx	lr

0040139c <prvPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
  40139c:	4806      	ldr	r0, [pc, #24]	; (4013b8 <prvPortStartFirstTask+0x1c>)
  40139e:	6800      	ldr	r0, [r0, #0]
  4013a0:	6800      	ldr	r0, [r0, #0]
  4013a2:	f380 8808 	msr	MSP, r0
  4013a6:	b662      	cpsie	i
  4013a8:	b661      	cpsie	f
  4013aa:	f3bf 8f4f 	dsb	sy
  4013ae:	f3bf 8f6f 	isb	sy
  4013b2:	df00      	svc	0
  4013b4:	bf00      	nop
  4013b6:	0000      	.short	0x0000
  4013b8:	e000ed08 	.word	0xe000ed08

004013bc <pxPortInitialiseStack>:
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
  4013bc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
  4013c0:	f840 3c04 	str.w	r3, [r0, #-4]
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
  4013c4:	f840 1c08 	str.w	r1, [r0, #-8]
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
  4013c8:	4b03      	ldr	r3, [pc, #12]	; (4013d8 <pxPortInitialiseStack+0x1c>)
  4013ca:	f840 3c0c 	str.w	r3, [r0, #-12]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
  4013ce:	f840 2c20 	str.w	r2, [r0, #-32]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */

	return pxTopOfStack;
}
  4013d2:	3840      	subs	r0, #64	; 0x40
  4013d4:	4770      	bx	lr
  4013d6:	bf00      	nop
  4013d8:	00401429 	.word	0x00401429

004013dc <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
  4013dc:	4b07      	ldr	r3, [pc, #28]	; (4013fc <pxCurrentTCBConst2>)
  4013de:	6819      	ldr	r1, [r3, #0]
  4013e0:	6808      	ldr	r0, [r1, #0]
  4013e2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
  4013e6:	f380 8809 	msr	PSP, r0
  4013ea:	f3bf 8f6f 	isb	sy
  4013ee:	f04f 0000 	mov.w	r0, #0
  4013f2:	f380 8811 	msr	BASEPRI, r0
  4013f6:	f04e 0e0d 	orr.w	lr, lr, #13
  4013fa:	4770      	bx	lr

004013fc <pxCurrentTCBConst2>:
  4013fc:	2000a954 	.word	0x2000a954

00401400 <vPortYield>:
/*-----------------------------------------------------------*/

void vPortYield( void )
{
	/* Set a PendSV to request a context switch. */
	portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
  401400:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  401404:	4b03      	ldr	r3, [pc, #12]	; (401414 <vPortYield+0x14>)
  401406:	601a      	str	r2, [r3, #0]

	/* Barriers are normally not required but do ensure the code is completely
	within the specified behaviour for the architecture. */
	__asm volatile( "dsb" );
  401408:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
  40140c:	f3bf 8f6f 	isb	sy
  401410:	4770      	bx	lr
  401412:	bf00      	nop
  401414:	e000ed04 	.word	0xe000ed04

00401418 <ulPortSetInterruptMask>:
}
/*-----------------------------------------------------------*/

__attribute__(( naked )) uint32_t ulPortSetInterruptMask( void )
{
	__asm volatile														\
  401418:	f3ef 8011 	mrs	r0, BASEPRI
  40141c:	f04f 01a0 	mov.w	r1, #160	; 0xa0
  401420:	f381 8811 	msr	BASEPRI, r1
  401424:	4770      	bx	lr
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return 0;
}
  401426:	2000      	movs	r0, #0

00401428 <prvTaskExitError>:
	return pxTopOfStack;
}
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
  401428:	b508      	push	{r3, lr}
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
  40142a:	4b05      	ldr	r3, [pc, #20]	; (401440 <prvTaskExitError+0x18>)
  40142c:	681b      	ldr	r3, [r3, #0]
  40142e:	f1b3 3fff 	cmp.w	r3, #4294967295
  401432:	d002      	beq.n	40143a <prvTaskExitError+0x12>
  401434:	4b03      	ldr	r3, [pc, #12]	; (401444 <prvTaskExitError+0x1c>)
  401436:	4798      	blx	r3
  401438:	e7fe      	b.n	401438 <prvTaskExitError+0x10>
	portDISABLE_INTERRUPTS();
  40143a:	4b02      	ldr	r3, [pc, #8]	; (401444 <prvTaskExitError+0x1c>)
  40143c:	4798      	blx	r3
	for( ;; );
  40143e:	e7fe      	b.n	40143e <prvTaskExitError+0x16>
  401440:	20000010 	.word	0x20000010
  401444:	00401419 	.word	0x00401419

00401448 <vPortEnterCritical>:
	__asm volatile( "isb" );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
  401448:	b508      	push	{r3, lr}
	portDISABLE_INTERRUPTS();
  40144a:	4b0a      	ldr	r3, [pc, #40]	; (401474 <vPortEnterCritical+0x2c>)
  40144c:	4798      	blx	r3
	uxCriticalNesting++;
  40144e:	4a0a      	ldr	r2, [pc, #40]	; (401478 <vPortEnterCritical+0x30>)
  401450:	6813      	ldr	r3, [r2, #0]
  401452:	3301      	adds	r3, #1
  401454:	6013      	str	r3, [r2, #0]
	__asm volatile( "dsb" );
  401456:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
  40145a:	f3bf 8f6f 	isb	sy
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API 
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
  40145e:	2b01      	cmp	r3, #1
  401460:	d107      	bne.n	401472 <vPortEnterCritical+0x2a>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
  401462:	4b06      	ldr	r3, [pc, #24]	; (40147c <vPortEnterCritical+0x34>)
  401464:	681b      	ldr	r3, [r3, #0]
  401466:	f013 0fff 	tst.w	r3, #255	; 0xff
  40146a:	d002      	beq.n	401472 <vPortEnterCritical+0x2a>
  40146c:	4b01      	ldr	r3, [pc, #4]	; (401474 <vPortEnterCritical+0x2c>)
  40146e:	4798      	blx	r3
  401470:	e7fe      	b.n	401470 <vPortEnterCritical+0x28>
  401472:	bd08      	pop	{r3, pc}
  401474:	00401419 	.word	0x00401419
  401478:	20000010 	.word	0x20000010
  40147c:	e000ed04 	.word	0xe000ed04

00401480 <vPortClearInterruptMask>:
}
/*-----------------------------------------------------------*/

__attribute__(( naked )) void vPortClearInterruptMask( uint32_t ulNewMaskValue )
{
	__asm volatile													\
  401480:	f380 8811 	msr	BASEPRI, r0
  401484:	4770      	bx	lr
  401486:	bf00      	nop

00401488 <vPortExitCritical>:
	}
}
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
  401488:	b508      	push	{r3, lr}
	configASSERT( uxCriticalNesting );
  40148a:	4b07      	ldr	r3, [pc, #28]	; (4014a8 <vPortExitCritical+0x20>)
  40148c:	681b      	ldr	r3, [r3, #0]
  40148e:	b913      	cbnz	r3, 401496 <vPortExitCritical+0xe>
  401490:	4b06      	ldr	r3, [pc, #24]	; (4014ac <vPortExitCritical+0x24>)
  401492:	4798      	blx	r3
  401494:	e7fe      	b.n	401494 <vPortExitCritical+0xc>
	uxCriticalNesting--;
  401496:	3b01      	subs	r3, #1
  401498:	4a03      	ldr	r2, [pc, #12]	; (4014a8 <vPortExitCritical+0x20>)
  40149a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
  40149c:	b913      	cbnz	r3, 4014a4 <vPortExitCritical+0x1c>
	{
		portENABLE_INTERRUPTS();
  40149e:	2000      	movs	r0, #0
  4014a0:	4b03      	ldr	r3, [pc, #12]	; (4014b0 <vPortExitCritical+0x28>)
  4014a2:	4798      	blx	r3
  4014a4:	bd08      	pop	{r3, pc}
  4014a6:	bf00      	nop
  4014a8:	20000010 	.word	0x20000010
  4014ac:	00401419 	.word	0x00401419
  4014b0:	00401481 	.word	0x00401481

004014b4 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
  4014b4:	f3ef 8009 	mrs	r0, PSP
  4014b8:	f3bf 8f6f 	isb	sy
  4014bc:	4b0d      	ldr	r3, [pc, #52]	; (4014f4 <pxCurrentTCBConst>)
  4014be:	681a      	ldr	r2, [r3, #0]
  4014c0:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
  4014c4:	6010      	str	r0, [r2, #0]
  4014c6:	e92d 4008 	stmdb	sp!, {r3, lr}
  4014ca:	f04f 00a0 	mov.w	r0, #160	; 0xa0
  4014ce:	f380 8811 	msr	BASEPRI, r0
  4014d2:	f001 f827 	bl	402524 <vTaskSwitchContext>
  4014d6:	f04f 0000 	mov.w	r0, #0
  4014da:	f380 8811 	msr	BASEPRI, r0
  4014de:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  4014e2:	6819      	ldr	r1, [r3, #0]
  4014e4:	6808      	ldr	r0, [r1, #0]
  4014e6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
  4014ea:	f380 8809 	msr	PSP, r0
  4014ee:	f3bf 8f6f 	isb	sy
  4014f2:	4770      	bx	lr

004014f4 <pxCurrentTCBConst>:
  4014f4:	2000a954 	.word	0x2000a954

004014f8 <SysTick_Handler>:
	);
}
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
  4014f8:	b508      	push	{r3, lr}
	/* The SysTick runs at the lowest interrupt priority, so when this interrupt
	executes all interrupts must be unmasked.  There is therefore no need to
	save and then restore the interrupt mask value as its value is already
	known. */
	( void ) portSET_INTERRUPT_MASK_FROM_ISR();
  4014fa:	4b06      	ldr	r3, [pc, #24]	; (401514 <SysTick_Handler+0x1c>)
  4014fc:	4798      	blx	r3
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
  4014fe:	4b06      	ldr	r3, [pc, #24]	; (401518 <SysTick_Handler+0x20>)
  401500:	4798      	blx	r3
  401502:	b118      	cbz	r0, 40150c <SysTick_Handler+0x14>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
  401504:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  401508:	4b04      	ldr	r3, [pc, #16]	; (40151c <SysTick_Handler+0x24>)
  40150a:	601a      	str	r2, [r3, #0]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( 0 );
  40150c:	2000      	movs	r0, #0
  40150e:	4b04      	ldr	r3, [pc, #16]	; (401520 <SysTick_Handler+0x28>)
  401510:	4798      	blx	r3
  401512:	bd08      	pop	{r3, pc}
  401514:	00401419 	.word	0x00401419
  401518:	004021e5 	.word	0x004021e5
  40151c:	e000ed04 	.word	0xe000ed04
  401520:	00401481 	.word	0x00401481

00401524 <vPortSetupTimerInterrupt>:
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
  401524:	4b06      	ldr	r3, [pc, #24]	; (401540 <vPortSetupTimerInterrupt+0x1c>)
  401526:	681b      	ldr	r3, [r3, #0]
  401528:	4a06      	ldr	r2, [pc, #24]	; (401544 <vPortSetupTimerInterrupt+0x20>)
  40152a:	fba2 2303 	umull	r2, r3, r2, r3
  40152e:	099b      	lsrs	r3, r3, #6
  401530:	3b01      	subs	r3, #1
  401532:	4a05      	ldr	r2, [pc, #20]	; (401548 <vPortSetupTimerInterrupt+0x24>)
  401534:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
  401536:	2207      	movs	r2, #7
  401538:	4b04      	ldr	r3, [pc, #16]	; (40154c <vPortSetupTimerInterrupt+0x28>)
  40153a:	601a      	str	r2, [r3, #0]
  40153c:	4770      	bx	lr
  40153e:	bf00      	nop
  401540:	2000000c 	.word	0x2000000c
  401544:	10624dd3 	.word	0x10624dd3
  401548:	e000e014 	.word	0xe000e014
  40154c:	e000e010 	.word	0xe000e010

00401550 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
  401550:	b500      	push	{lr}
  401552:	b083      	sub	sp, #12
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
  401554:	4b22      	ldr	r3, [pc, #136]	; (4015e0 <xPortStartScheduler+0x90>)
  401556:	781a      	ldrb	r2, [r3, #0]
  401558:	b2d2      	uxtb	r2, r2
  40155a:	9201      	str	r2, [sp, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
  40155c:	22ff      	movs	r2, #255	; 0xff
  40155e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
  401560:	781b      	ldrb	r3, [r3, #0]
  401562:	b2db      	uxtb	r3, r3
  401564:	f88d 3003 	strb.w	r3, [sp, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
  401568:	f89d 3003 	ldrb.w	r3, [sp, #3]
  40156c:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
  401570:	4a1c      	ldr	r2, [pc, #112]	; (4015e4 <xPortStartScheduler+0x94>)
  401572:	7013      	strb	r3, [r2, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
  401574:	2207      	movs	r2, #7
  401576:	4b1c      	ldr	r3, [pc, #112]	; (4015e8 <xPortStartScheduler+0x98>)
  401578:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
  40157a:	f89d 3003 	ldrb.w	r3, [sp, #3]
  40157e:	f013 0f80 	tst.w	r3, #128	; 0x80
  401582:	d010      	beq.n	4015a6 <xPortStartScheduler+0x56>
  401584:	2206      	movs	r2, #6
  401586:	e000      	b.n	40158a <xPortStartScheduler+0x3a>
  401588:	460a      	mov	r2, r1
		{
			ulMaxPRIGROUPValue--;
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
  40158a:	f89d 3003 	ldrb.w	r3, [sp, #3]
  40158e:	005b      	lsls	r3, r3, #1
  401590:	b2db      	uxtb	r3, r3
  401592:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
  401596:	f89d 3003 	ldrb.w	r3, [sp, #3]
  40159a:	1e51      	subs	r1, r2, #1
  40159c:	f013 0f80 	tst.w	r3, #128	; 0x80
  4015a0:	d1f2      	bne.n	401588 <xPortStartScheduler+0x38>
  4015a2:	4b11      	ldr	r3, [pc, #68]	; (4015e8 <xPortStartScheduler+0x98>)
  4015a4:	601a      	str	r2, [r3, #0]
		}

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
  4015a6:	4a10      	ldr	r2, [pc, #64]	; (4015e8 <xPortStartScheduler+0x98>)
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
		}

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
  4015a8:	6813      	ldr	r3, [r2, #0]
  4015aa:	021b      	lsls	r3, r3, #8
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
  4015ac:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  4015b0:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
  4015b2:	9b01      	ldr	r3, [sp, #4]
  4015b4:	b2db      	uxtb	r3, r3
  4015b6:	4a0a      	ldr	r2, [pc, #40]	; (4015e0 <xPortStartScheduler+0x90>)
  4015b8:	7013      	strb	r3, [r2, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
  4015ba:	4b0c      	ldr	r3, [pc, #48]	; (4015ec <xPortStartScheduler+0x9c>)
  4015bc:	681a      	ldr	r2, [r3, #0]
  4015be:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
  4015c2:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
  4015c4:	681a      	ldr	r2, [r3, #0]
  4015c6:	f042 4270 	orr.w	r2, r2, #4026531840	; 0xf0000000
  4015ca:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
  4015cc:	4b08      	ldr	r3, [pc, #32]	; (4015f0 <xPortStartScheduler+0xa0>)
  4015ce:	4798      	blx	r3

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
  4015d0:	2200      	movs	r2, #0
  4015d2:	4b08      	ldr	r3, [pc, #32]	; (4015f4 <xPortStartScheduler+0xa4>)
  4015d4:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
  4015d6:	4b08      	ldr	r3, [pc, #32]	; (4015f8 <xPortStartScheduler+0xa8>)
  4015d8:	4798      	blx	r3

	/* Should never get here as the tasks will now be executing!  Call the task
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS. */
	prvTaskExitError();
  4015da:	4b08      	ldr	r3, [pc, #32]	; (4015fc <xPortStartScheduler+0xac>)
  4015dc:	4798      	blx	r3
  4015de:	bf00      	nop
  4015e0:	e000e400 	.word	0xe000e400
  4015e4:	20000894 	.word	0x20000894
  4015e8:	20000898 	.word	0x20000898
  4015ec:	e000ed20 	.word	0xe000ed20
  4015f0:	00401525 	.word	0x00401525
  4015f4:	20000010 	.word	0x20000010
  4015f8:	0040139d 	.word	0x0040139d
  4015fc:	00401429 	.word	0x00401429

00401600 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
  401600:	b508      	push	{r3, lr}
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) );
  401602:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
  401606:	2b0f      	cmp	r3, #15
  401608:	d909      	bls.n	40161e <vPortValidateInterruptPriority+0x1e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
  40160a:	4a0b      	ldr	r2, [pc, #44]	; (401638 <vPortValidateInterruptPriority+0x38>)
  40160c:	5c9b      	ldrb	r3, [r3, r2]
  40160e:	b2db      	uxtb	r3, r3
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
  401610:	4a0a      	ldr	r2, [pc, #40]	; (40163c <vPortValidateInterruptPriority+0x3c>)
  401612:	7812      	ldrb	r2, [r2, #0]
  401614:	429a      	cmp	r2, r3
  401616:	d902      	bls.n	40161e <vPortValidateInterruptPriority+0x1e>
  401618:	4b09      	ldr	r3, [pc, #36]	; (401640 <vPortValidateInterruptPriority+0x40>)
  40161a:	4798      	blx	r3
  40161c:	e7fe      	b.n	40161c <vPortValidateInterruptPriority+0x1c>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredicable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
  40161e:	4b09      	ldr	r3, [pc, #36]	; (401644 <vPortValidateInterruptPriority+0x44>)
  401620:	681b      	ldr	r3, [r3, #0]
  401622:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  401626:	4a08      	ldr	r2, [pc, #32]	; (401648 <vPortValidateInterruptPriority+0x48>)
  401628:	6812      	ldr	r2, [r2, #0]
  40162a:	4293      	cmp	r3, r2
  40162c:	d902      	bls.n	401634 <vPortValidateInterruptPriority+0x34>
  40162e:	4b04      	ldr	r3, [pc, #16]	; (401640 <vPortValidateInterruptPriority+0x40>)
  401630:	4798      	blx	r3
  401632:	e7fe      	b.n	401632 <vPortValidateInterruptPriority+0x32>
  401634:	bd08      	pop	{r3, pc}
  401636:	bf00      	nop
  401638:	e000e3f0 	.word	0xe000e3f0
  40163c:	20000894 	.word	0x20000894
  401640:	00401419 	.word	0x00401419
  401644:	e000ed0c 	.word	0xe000ed0c
  401648:	20000898 	.word	0x20000898

0040164c <prvInsertBlockIntoFreeList>:
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
  40164c:	4a13      	ldr	r2, [pc, #76]	; (40169c <prvInsertBlockIntoFreeList+0x50>)
  40164e:	e000      	b.n	401652 <prvInsertBlockIntoFreeList+0x6>
  401650:	461a      	mov	r2, r3
  401652:	6813      	ldr	r3, [r2, #0]
  401654:	4283      	cmp	r3, r0
  401656:	d3fb      	bcc.n	401650 <prvInsertBlockIntoFreeList+0x4>
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
  401658:	b430      	push	{r4, r5}
  40165a:	4611      	mov	r1, r2
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
  40165c:	6854      	ldr	r4, [r2, #4]
  40165e:	1915      	adds	r5, r2, r4
  401660:	4285      	cmp	r5, r0
  401662:	d103      	bne.n	40166c <prvInsertBlockIntoFreeList+0x20>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
  401664:	6868      	ldr	r0, [r5, #4]
  401666:	4404      	add	r4, r0
  401668:	6054      	str	r4, [r2, #4]
  40166a:	4610      	mov	r0, r2
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
  40166c:	6842      	ldr	r2, [r0, #4]
  40166e:	1884      	adds	r4, r0, r2
  401670:	429c      	cmp	r4, r3
  401672:	d10c      	bne.n	40168e <prvInsertBlockIntoFreeList+0x42>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
  401674:	4b0a      	ldr	r3, [pc, #40]	; (4016a0 <prvInsertBlockIntoFreeList+0x54>)
  401676:	681b      	ldr	r3, [r3, #0]
  401678:	429c      	cmp	r4, r3
  40167a:	d006      	beq.n	40168a <prvInsertBlockIntoFreeList+0x3e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
  40167c:	6863      	ldr	r3, [r4, #4]
  40167e:	441a      	add	r2, r3
  401680:	6042      	str	r2, [r0, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
  401682:	680b      	ldr	r3, [r1, #0]
  401684:	681b      	ldr	r3, [r3, #0]
  401686:	6003      	str	r3, [r0, #0]
  401688:	e002      	b.n	401690 <prvInsertBlockIntoFreeList+0x44>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
  40168a:	6004      	str	r4, [r0, #0]
  40168c:	e000      	b.n	401690 <prvInsertBlockIntoFreeList+0x44>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
  40168e:	6003      	str	r3, [r0, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
  401690:	4281      	cmp	r1, r0
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
  401692:	bf18      	it	ne
  401694:	6008      	strne	r0, [r1, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
  401696:	bc30      	pop	{r4, r5}
  401698:	4770      	bx	lr
  40169a:	bf00      	nop
  40169c:	200008a4 	.word	0x200008a4
  4016a0:	200008a0 	.word	0x200008a0

004016a4 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
  4016a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4016a6:	4604      	mov	r4, r0
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;

	vTaskSuspendAll();
  4016a8:	4b41      	ldr	r3, [pc, #260]	; (4017b0 <pvPortMalloc+0x10c>)
  4016aa:	4798      	blx	r3
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
  4016ac:	4b41      	ldr	r3, [pc, #260]	; (4017b4 <pvPortMalloc+0x110>)
  4016ae:	681b      	ldr	r3, [r3, #0]
  4016b0:	bb23      	cbnz	r3, 4016fc <pvPortMalloc+0x58>
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
  4016b2:	4a41      	ldr	r2, [pc, #260]	; (4017b8 <pvPortMalloc+0x114>)

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
  4016b4:	f012 0f07 	tst.w	r2, #7
  4016b8:	d007      	beq.n	4016ca <pvPortMalloc+0x26>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
  4016ba:	1dd1      	adds	r1, r2, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
  4016bc:	f021 0107 	bic.w	r1, r1, #7
  4016c0:	f502 4320 	add.w	r3, r2, #40960	; 0xa000
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
  4016c4:	1a5b      	subs	r3, r3, r1
	uxAddress = ( size_t ) ucHeap;

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
  4016c6:	460a      	mov	r2, r1
  4016c8:	e001      	b.n	4016ce <pvPortMalloc+0x2a>
static void prvHeapInit( void )
{
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
  4016ca:	f44f 4320 	mov.w	r3, #40960	; 0xa000

	pucAlignedHeap = ( uint8_t * ) uxAddress;

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
  4016ce:	483b      	ldr	r0, [pc, #236]	; (4017bc <pvPortMalloc+0x118>)
  4016d0:	6002      	str	r2, [r0, #0]
	xStart.xBlockSize = ( size_t ) 0;
  4016d2:	2100      	movs	r1, #0
  4016d4:	6041      	str	r1, [r0, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
  4016d6:	4413      	add	r3, r2
	uxAddress -= xHeapStructSize;
  4016d8:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
  4016da:	f023 0307 	bic.w	r3, r3, #7
	pxEnd = ( void * ) uxAddress;
  4016de:	4835      	ldr	r0, [pc, #212]	; (4017b4 <pvPortMalloc+0x110>)
  4016e0:	6003      	str	r3, [r0, #0]
	pxEnd->xBlockSize = 0;
  4016e2:	6059      	str	r1, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
  4016e4:	6019      	str	r1, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
  4016e6:	1a99      	subs	r1, r3, r2
  4016e8:	6051      	str	r1, [r2, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
  4016ea:	6013      	str	r3, [r2, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
  4016ec:	4b34      	ldr	r3, [pc, #208]	; (4017c0 <pvPortMalloc+0x11c>)
  4016ee:	6019      	str	r1, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
  4016f0:	4b34      	ldr	r3, [pc, #208]	; (4017c4 <pvPortMalloc+0x120>)
  4016f2:	6019      	str	r1, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
  4016f4:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
  4016f8:	4b33      	ldr	r3, [pc, #204]	; (4017c8 <pvPortMalloc+0x124>)
  4016fa:	601a      	str	r2, [r3, #0]

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
  4016fc:	4b32      	ldr	r3, [pc, #200]	; (4017c8 <pvPortMalloc+0x124>)
  4016fe:	681e      	ldr	r6, [r3, #0]
  401700:	4234      	tst	r4, r6
  401702:	d14c      	bne.n	40179e <pvPortMalloc+0xfa>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
  401704:	2c00      	cmp	r4, #0
  401706:	d04d      	beq.n	4017a4 <pvPortMalloc+0x100>
			{
				xWantedSize += xHeapStructSize;
  401708:	f104 0308 	add.w	r3, r4, #8

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
  40170c:	f013 0f07 	tst.w	r3, #7
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
  401710:	bf1c      	itt	ne
  401712:	f023 0307 	bicne.w	r3, r3, #7
  401716:	3308      	addne	r3, #8
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
  401718:	2b00      	cmp	r3, #0
  40171a:	d040      	beq.n	40179e <pvPortMalloc+0xfa>
  40171c:	4a29      	ldr	r2, [pc, #164]	; (4017c4 <pvPortMalloc+0x120>)
  40171e:	6817      	ldr	r7, [r2, #0]
  401720:	42bb      	cmp	r3, r7
  401722:	d83c      	bhi.n	40179e <pvPortMalloc+0xfa>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
				pxBlock = xStart.pxNextFreeBlock;
  401724:	4a25      	ldr	r2, [pc, #148]	; (4017bc <pvPortMalloc+0x118>)
  401726:	6814      	ldr	r4, [r2, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
  401728:	e001      	b.n	40172e <pvPortMalloc+0x8a>
  40172a:	4622      	mov	r2, r4
				{
					pxPreviousBlock = pxBlock;
					pxBlock = pxBlock->pxNextFreeBlock;
  40172c:	460c      	mov	r4, r1
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
				pxBlock = xStart.pxNextFreeBlock;
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
  40172e:	6861      	ldr	r1, [r4, #4]
  401730:	428b      	cmp	r3, r1
  401732:	d902      	bls.n	40173a <pvPortMalloc+0x96>
  401734:	6821      	ldr	r1, [r4, #0]
  401736:	2900      	cmp	r1, #0
  401738:	d1f7      	bne.n	40172a <pvPortMalloc+0x86>
					pxBlock = pxBlock->pxNextFreeBlock;
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
  40173a:	491e      	ldr	r1, [pc, #120]	; (4017b4 <pvPortMalloc+0x110>)
  40173c:	6809      	ldr	r1, [r1, #0]
  40173e:	428c      	cmp	r4, r1
  401740:	d02d      	beq.n	40179e <pvPortMalloc+0xfa>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
  401742:	6815      	ldr	r5, [r2, #0]
  401744:	3508      	adds	r5, #8

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
  401746:	6821      	ldr	r1, [r4, #0]
  401748:	6011      	str	r1, [r2, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
  40174a:	6862      	ldr	r2, [r4, #4]
  40174c:	1ad2      	subs	r2, r2, r3
  40174e:	2a10      	cmp	r2, #16
  401750:	d90a      	bls.n	401768 <pvPortMalloc+0xc4>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
  401752:	18e0      	adds	r0, r4, r3
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
  401754:	f010 0f07 	tst.w	r0, #7
  401758:	d002      	beq.n	401760 <pvPortMalloc+0xbc>
  40175a:	4b1c      	ldr	r3, [pc, #112]	; (4017cc <pvPortMalloc+0x128>)
  40175c:	4798      	blx	r3
  40175e:	e7fe      	b.n	40175e <pvPortMalloc+0xba>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
  401760:	6042      	str	r2, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
  401762:	6063      	str	r3, [r4, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
  401764:	4b1a      	ldr	r3, [pc, #104]	; (4017d0 <pvPortMalloc+0x12c>)
  401766:	4798      	blx	r3
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
  401768:	6862      	ldr	r2, [r4, #4]
  40176a:	1abb      	subs	r3, r7, r2
  40176c:	4915      	ldr	r1, [pc, #84]	; (4017c4 <pvPortMalloc+0x120>)
  40176e:	600b      	str	r3, [r1, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
  401770:	4913      	ldr	r1, [pc, #76]	; (4017c0 <pvPortMalloc+0x11c>)
  401772:	6809      	ldr	r1, [r1, #0]
  401774:	428b      	cmp	r3, r1
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
  401776:	bf3c      	itt	cc
  401778:	4911      	ldrcc	r1, [pc, #68]	; (4017c0 <pvPortMalloc+0x11c>)
  40177a:	600b      	strcc	r3, [r1, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
  40177c:	4316      	orrs	r6, r2
  40177e:	6066      	str	r6, [r4, #4]
					pxBlock->pxNextFreeBlock = NULL;
  401780:	2300      	movs	r3, #0
  401782:	6023      	str	r3, [r4, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
  401784:	4b13      	ldr	r3, [pc, #76]	; (4017d4 <pvPortMalloc+0x130>)
  401786:	4798      	blx	r3

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
  401788:	b91d      	cbnz	r5, 401792 <pvPortMalloc+0xee>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
  40178a:	4b13      	ldr	r3, [pc, #76]	; (4017d8 <pvPortMalloc+0x134>)
  40178c:	4798      	blx	r3
  40178e:	2500      	movs	r5, #0
  401790:	e00b      	b.n	4017aa <pvPortMalloc+0x106>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( uint32_t ) pvReturn ) & portBYTE_ALIGNMENT_MASK ) == 0 );
  401792:	f015 0f07 	tst.w	r5, #7
  401796:	d008      	beq.n	4017aa <pvPortMalloc+0x106>
  401798:	4b0c      	ldr	r3, [pc, #48]	; (4017cc <pvPortMalloc+0x128>)
  40179a:	4798      	blx	r3
  40179c:	e7fe      	b.n	40179c <pvPortMalloc+0xf8>
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
  40179e:	4b0d      	ldr	r3, [pc, #52]	; (4017d4 <pvPortMalloc+0x130>)
  4017a0:	4798      	blx	r3
  4017a2:	e7f2      	b.n	40178a <pvPortMalloc+0xe6>
  4017a4:	4b0b      	ldr	r3, [pc, #44]	; (4017d4 <pvPortMalloc+0x130>)
  4017a6:	4798      	blx	r3
  4017a8:	e7ef      	b.n	40178a <pvPortMalloc+0xe6>
	}
	#endif

	configASSERT( ( ( ( uint32_t ) pvReturn ) & portBYTE_ALIGNMENT_MASK ) == 0 );
	return pvReturn;
}
  4017aa:	4628      	mov	r0, r5
  4017ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4017ae:	bf00      	nop
  4017b0:	004021c9 	.word	0x004021c9
  4017b4:	200008a0 	.word	0x200008a0
  4017b8:	200008ac 	.word	0x200008ac
  4017bc:	200008a4 	.word	0x200008a4
  4017c0:	2000a8b0 	.word	0x2000a8b0
  4017c4:	2000089c 	.word	0x2000089c
  4017c8:	2000a8ac 	.word	0x2000a8ac
  4017cc:	00401419 	.word	0x00401419
  4017d0:	0040164d 	.word	0x0040164d
  4017d4:	00402321 	.word	0x00402321
  4017d8:	00402db1 	.word	0x00402db1

004017dc <vPortFree>:
void vPortFree( void *pv )
{
uint8_t *puc = ( uint8_t * ) pv;
BlockLink_t *pxLink;

	if( pv != NULL )
  4017dc:	b318      	cbz	r0, 401826 <vPortFree+0x4a>
	return pvReturn;
}
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
  4017de:	b510      	push	{r4, lr}
  4017e0:	4604      	mov	r4, r0

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
  4017e2:	f850 3c04 	ldr.w	r3, [r0, #-4]
  4017e6:	4a10      	ldr	r2, [pc, #64]	; (401828 <vPortFree+0x4c>)
  4017e8:	6812      	ldr	r2, [r2, #0]
  4017ea:	421a      	tst	r2, r3
  4017ec:	d102      	bne.n	4017f4 <vPortFree+0x18>
  4017ee:	4b0f      	ldr	r3, [pc, #60]	; (40182c <vPortFree+0x50>)
  4017f0:	4798      	blx	r3
  4017f2:	e7fe      	b.n	4017f2 <vPortFree+0x16>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
  4017f4:	f850 1c08 	ldr.w	r1, [r0, #-8]
  4017f8:	b111      	cbz	r1, 401800 <vPortFree+0x24>
  4017fa:	4b0c      	ldr	r3, [pc, #48]	; (40182c <vPortFree+0x50>)
  4017fc:	4798      	blx	r3
  4017fe:	e7fe      	b.n	4017fe <vPortFree+0x22>
		{
			if( pxLink->pxNextFreeBlock == NULL )
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
  401800:	ea23 0302 	bic.w	r3, r3, r2
  401804:	f840 3c04 	str.w	r3, [r0, #-4]

				vTaskSuspendAll();
  401808:	4b09      	ldr	r3, [pc, #36]	; (401830 <vPortFree+0x54>)
  40180a:	4798      	blx	r3
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
  40180c:	4a09      	ldr	r2, [pc, #36]	; (401834 <vPortFree+0x58>)
  40180e:	6811      	ldr	r1, [r2, #0]
  401810:	f854 3c04 	ldr.w	r3, [r4, #-4]
  401814:	440b      	add	r3, r1
  401816:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
  401818:	f1a4 0008 	sub.w	r0, r4, #8
  40181c:	4b06      	ldr	r3, [pc, #24]	; (401838 <vPortFree+0x5c>)
  40181e:	4798      	blx	r3
				}
				( void ) xTaskResumeAll();
  401820:	4b06      	ldr	r3, [pc, #24]	; (40183c <vPortFree+0x60>)
  401822:	4798      	blx	r3
  401824:	bd10      	pop	{r4, pc}
  401826:	4770      	bx	lr
  401828:	2000a8ac 	.word	0x2000a8ac
  40182c:	00401419 	.word	0x00401419
  401830:	004021c9 	.word	0x004021c9
  401834:	2000089c 	.word	0x2000089c
  401838:	0040164d 	.word	0x0040164d
  40183c:	00402321 	.word	0x00402321

00401840 <prvCopyDataToQueue>:

#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
  401840:	b538      	push	{r3, r4, r5, lr}
  401842:	4604      	mov	r4, r0
  401844:	4615      	mov	r5, r2
BaseType_t xReturn = pdFALSE;

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
  401846:	6c02      	ldr	r2, [r0, #64]	; 0x40
  401848:	b94a      	cbnz	r2, 40185e <prvCopyDataToQueue+0x1e>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
  40184a:	6803      	ldr	r3, [r0, #0]
#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
BaseType_t xReturn = pdFALSE;
  40184c:	2000      	movs	r0, #0

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
  40184e:	2b00      	cmp	r3, #0
  401850:	d130      	bne.n	4018b4 <prvCopyDataToQueue+0x74>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
  401852:	6860      	ldr	r0, [r4, #4]
  401854:	4b19      	ldr	r3, [pc, #100]	; (4018bc <prvCopyDataToQueue+0x7c>)
  401856:	4798      	blx	r3
				pxQueue->pxMutexHolder = NULL;
  401858:	2300      	movs	r3, #0
  40185a:	6063      	str	r3, [r4, #4]
  40185c:	e02a      	b.n	4018b4 <prvCopyDataToQueue+0x74>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
  40185e:	b96d      	cbnz	r5, 40187c <prvCopyDataToQueue+0x3c>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
  401860:	6880      	ldr	r0, [r0, #8]
  401862:	4b17      	ldr	r3, [pc, #92]	; (4018c0 <prvCopyDataToQueue+0x80>)
  401864:	4798      	blx	r3
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
  401866:	68a2      	ldr	r2, [r4, #8]
  401868:	6c23      	ldr	r3, [r4, #64]	; 0x40
  40186a:	4413      	add	r3, r2
  40186c:	60a3      	str	r3, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
  40186e:	6862      	ldr	r2, [r4, #4]
  401870:	4293      	cmp	r3, r2
  401872:	d31a      	bcc.n	4018aa <prvCopyDataToQueue+0x6a>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
  401874:	6823      	ldr	r3, [r4, #0]
  401876:	60a3      	str	r3, [r4, #8]
#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
BaseType_t xReturn = pdFALSE;
  401878:	2000      	movs	r0, #0
  40187a:	e01b      	b.n	4018b4 <prvCopyDataToQueue+0x74>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  40187c:	68c0      	ldr	r0, [r0, #12]
  40187e:	4b10      	ldr	r3, [pc, #64]	; (4018c0 <prvCopyDataToQueue+0x80>)
  401880:	4798      	blx	r3
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
  401882:	6c23      	ldr	r3, [r4, #64]	; 0x40
  401884:	425b      	negs	r3, r3
  401886:	68e2      	ldr	r2, [r4, #12]
  401888:	441a      	add	r2, r3
  40188a:	60e2      	str	r2, [r4, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
  40188c:	6821      	ldr	r1, [r4, #0]
  40188e:	428a      	cmp	r2, r1
  401890:	d202      	bcs.n	401898 <prvCopyDataToQueue+0x58>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
  401892:	6862      	ldr	r2, [r4, #4]
  401894:	4413      	add	r3, r2
  401896:	60e3      	str	r3, [r4, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
  401898:	2d02      	cmp	r5, #2
  40189a:	d108      	bne.n	4018ae <prvCopyDataToQueue+0x6e>
		{
			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
  40189c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  40189e:	b143      	cbz	r3, 4018b2 <prvCopyDataToQueue+0x72>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--( pxQueue->uxMessagesWaiting );
  4018a0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  4018a2:	3b01      	subs	r3, #1
  4018a4:	63a3      	str	r3, [r4, #56]	; 0x38
#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
BaseType_t xReturn = pdFALSE;
  4018a6:	2000      	movs	r0, #0
  4018a8:	e004      	b.n	4018b4 <prvCopyDataToQueue+0x74>
  4018aa:	2000      	movs	r0, #0
  4018ac:	e002      	b.n	4018b4 <prvCopyDataToQueue+0x74>
  4018ae:	2000      	movs	r0, #0
  4018b0:	e000      	b.n	4018b4 <prvCopyDataToQueue+0x74>
  4018b2:	2000      	movs	r0, #0
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	++( pxQueue->uxMessagesWaiting );
  4018b4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  4018b6:	3301      	adds	r3, #1
  4018b8:	63a3      	str	r3, [r4, #56]	; 0x38

	return xReturn;
}
  4018ba:	bd38      	pop	{r3, r4, r5, pc}
  4018bc:	004028c9 	.word	0x004028c9
  4018c0:	0040311d 	.word	0x0040311d

004018c4 <prvNotifyQueueSetContainer>:
/*-----------------------------------------------------------*/

#if ( configUSE_QUEUE_SETS == 1 )

	static BaseType_t prvNotifyQueueSetContainer( const Queue_t * const pxQueue, const BaseType_t xCopyPosition )
	{
  4018c4:	b530      	push	{r4, r5, lr}
  4018c6:	b083      	sub	sp, #12
  4018c8:	9001      	str	r0, [sp, #4]
	Queue_t *pxQueueSetContainer = pxQueue->pxQueueSetContainer;
  4018ca:	6cc4      	ldr	r4, [r0, #76]	; 0x4c
	BaseType_t xReturn = pdFALSE;

		/* This function must be called form a critical section. */

		configASSERT( pxQueueSetContainer );
  4018cc:	b914      	cbnz	r4, 4018d4 <prvNotifyQueueSetContainer+0x10>
  4018ce:	4b14      	ldr	r3, [pc, #80]	; (401920 <prvNotifyQueueSetContainer+0x5c>)
  4018d0:	4798      	blx	r3
  4018d2:	e7fe      	b.n	4018d2 <prvNotifyQueueSetContainer+0xe>
  4018d4:	460a      	mov	r2, r1
		configASSERT( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength );
  4018d6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
  4018d8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  4018da:	4299      	cmp	r1, r3
  4018dc:	d302      	bcc.n	4018e4 <prvNotifyQueueSetContainer+0x20>
  4018de:	4b10      	ldr	r3, [pc, #64]	; (401920 <prvNotifyQueueSetContainer+0x5c>)
  4018e0:	4798      	blx	r3
  4018e2:	e7fe      	b.n	4018e2 <prvNotifyQueueSetContainer+0x1e>

		if( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength )
  4018e4:	6ba1      	ldr	r1, [r4, #56]	; 0x38
  4018e6:	428b      	cmp	r3, r1
  4018e8:	d916      	bls.n	401918 <prvNotifyQueueSetContainer+0x54>
		{
			traceQUEUE_SEND( pxQueueSetContainer );

			/* The data copied is the handle of the queue that contains data. */
			xReturn = prvCopyDataToQueue( pxQueueSetContainer, &pxQueue, xCopyPosition );
  4018ea:	4620      	mov	r0, r4
  4018ec:	a901      	add	r1, sp, #4
  4018ee:	4b0d      	ldr	r3, [pc, #52]	; (401924 <prvNotifyQueueSetContainer+0x60>)
  4018f0:	4798      	blx	r3
  4018f2:	4605      	mov	r5, r0

			if( pxQueueSetContainer->xTxLock == queueUNLOCKED )
  4018f4:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  4018f6:	f1b3 3fff 	cmp.w	r3, #4294967295
  4018fa:	d109      	bne.n	401910 <prvNotifyQueueSetContainer+0x4c>
			{
				if( listLIST_IS_EMPTY( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) == pdFALSE )
  4018fc:	6a63      	ldr	r3, [r4, #36]	; 0x24
  4018fe:	b163      	cbz	r3, 40191a <prvNotifyQueueSetContainer+0x56>
				{
					if( xTaskRemoveFromEventList( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) != pdFALSE )
  401900:	f104 0024 	add.w	r0, r4, #36	; 0x24
  401904:	4b08      	ldr	r3, [pc, #32]	; (401928 <prvNotifyQueueSetContainer+0x64>)
  401906:	4798      	blx	r3
  401908:	2800      	cmp	r0, #0
					{
						/* The task waiting has a higher priority. */
						xReturn = pdTRUE;
  40190a:	bf18      	it	ne
  40190c:	2501      	movne	r5, #1
  40190e:	e004      	b.n	40191a <prvNotifyQueueSetContainer+0x56>
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else
			{
				( pxQueueSetContainer->xTxLock )++;
  401910:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  401912:	3301      	adds	r3, #1
  401914:	64a3      	str	r3, [r4, #72]	; 0x48
  401916:	e000      	b.n	40191a <prvNotifyQueueSetContainer+0x56>
#if ( configUSE_QUEUE_SETS == 1 )

	static BaseType_t prvNotifyQueueSetContainer( const Queue_t * const pxQueue, const BaseType_t xCopyPosition )
	{
	Queue_t *pxQueueSetContainer = pxQueue->pxQueueSetContainer;
	BaseType_t xReturn = pdFALSE;
  401918:	2500      	movs	r5, #0
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
	}
  40191a:	4628      	mov	r0, r5
  40191c:	b003      	add	sp, #12
  40191e:	bd30      	pop	{r4, r5, pc}
  401920:	00401419 	.word	0x00401419
  401924:	00401841 	.word	0x00401841
  401928:	004026d1 	.word	0x004026d1

0040192c <prvCopyDataFromQueue>:
}
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
  40192c:	6c02      	ldr	r2, [r0, #64]	; 0x40
  40192e:	b172      	cbz	r2, 40194e <prvCopyDataFromQueue+0x22>
	return xReturn;
}
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
  401930:	b510      	push	{r4, lr}
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
  401932:	68c3      	ldr	r3, [r0, #12]
  401934:	4413      	add	r3, r2
  401936:	60c3      	str	r3, [r0, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
  401938:	6844      	ldr	r4, [r0, #4]
  40193a:	42a3      	cmp	r3, r4
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
  40193c:	bf24      	itt	cs
  40193e:	6803      	ldrcs	r3, [r0, #0]
  401940:	60c3      	strcs	r3, [r0, #12]
  401942:	4603      	mov	r3, r0
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
  401944:	4608      	mov	r0, r1
  401946:	68d9      	ldr	r1, [r3, #12]
  401948:	4b01      	ldr	r3, [pc, #4]	; (401950 <prvCopyDataFromQueue+0x24>)
  40194a:	4798      	blx	r3
  40194c:	bd10      	pop	{r4, pc}
  40194e:	4770      	bx	lr
  401950:	0040311d 	.word	0x0040311d

00401954 <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
  401954:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  401956:	4604      	mov	r4, r0

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
  401958:	4b20      	ldr	r3, [pc, #128]	; (4019dc <prvUnlockQueue+0x88>)
  40195a:	4798      	blx	r3
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
  40195c:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  40195e:	2b00      	cmp	r3, #0
  401960:	dd18      	ble.n	401994 <prvUnlockQueue+0x40>
			blocked waiting for data to become available? */
			#if ( configUSE_QUEUE_SETS == 1 )
			{
				if( pxQueue->pxQueueSetContainer != NULL )
				{
					if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) == pdTRUE )
  401962:	4d1f      	ldr	r5, [pc, #124]	; (4019e0 <prvUnlockQueue+0x8c>)
					{
						/* The queue is a member of a queue set, and posting to
						the queue set caused a higher priority task to unblock.
						A context switch is required. */
						vTaskMissedYield();
  401964:	4f1f      	ldr	r7, [pc, #124]	; (4019e4 <prvUnlockQueue+0x90>)
				{
					/* Tasks that are removed from the event list will get added to
					the pending ready list as the scheduler is still suspended. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  401966:	4e20      	ldr	r6, [pc, #128]	; (4019e8 <prvUnlockQueue+0x94>)
		{
			/* Data was posted while the queue was locked.  Are any tasks
			blocked waiting for data to become available? */
			#if ( configUSE_QUEUE_SETS == 1 )
			{
				if( pxQueue->pxQueueSetContainer != NULL )
  401968:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
  40196a:	b133      	cbz	r3, 40197a <prvUnlockQueue+0x26>
				{
					if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) == pdTRUE )
  40196c:	4620      	mov	r0, r4
  40196e:	2100      	movs	r1, #0
  401970:	47a8      	blx	r5
  401972:	2801      	cmp	r0, #1
  401974:	d108      	bne.n	401988 <prvUnlockQueue+0x34>
					{
						/* The queue is a member of a queue set, and posting to
						the queue set caused a higher priority task to unblock.
						A context switch is required. */
						vTaskMissedYield();
  401976:	47b8      	blx	r7
  401978:	e006      	b.n	401988 <prvUnlockQueue+0x34>
				}
				else
				{
					/* Tasks that are removed from the event list will get added to
					the pending ready list as the scheduler is still suspended. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  40197a:	6a63      	ldr	r3, [r4, #36]	; 0x24
  40197c:	b153      	cbz	r3, 401994 <prvUnlockQueue+0x40>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  40197e:	f104 0024 	add.w	r0, r4, #36	; 0x24
  401982:	47b0      	blx	r6
  401984:	b100      	cbz	r0, 401988 <prvUnlockQueue+0x34>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							vTaskMissedYield();
  401986:	47b8      	blx	r7
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--( pxQueue->xTxLock );
  401988:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  40198a:	3b01      	subs	r3, #1
  40198c:	64a3      	str	r3, [r4, #72]	; 0x48
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
  40198e:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  401990:	2b00      	cmp	r3, #0
  401992:	dce9      	bgt.n	401968 <prvUnlockQueue+0x14>
			#endif /* configUSE_QUEUE_SETS */

			--( pxQueue->xTxLock );
		}

		pxQueue->xTxLock = queueUNLOCKED;
  401994:	f04f 33ff 	mov.w	r3, #4294967295
  401998:	64a3      	str	r3, [r4, #72]	; 0x48
	}
	taskEXIT_CRITICAL();
  40199a:	4b14      	ldr	r3, [pc, #80]	; (4019ec <prvUnlockQueue+0x98>)
  40199c:	4798      	blx	r3

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
  40199e:	4b0f      	ldr	r3, [pc, #60]	; (4019dc <prvUnlockQueue+0x88>)
  4019a0:	4798      	blx	r3
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
  4019a2:	6c63      	ldr	r3, [r4, #68]	; 0x44
  4019a4:	2b00      	cmp	r3, #0
  4019a6:	dd13      	ble.n	4019d0 <prvUnlockQueue+0x7c>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
  4019a8:	6923      	ldr	r3, [r4, #16]
  4019aa:	b91b      	cbnz	r3, 4019b4 <prvUnlockQueue+0x60>
  4019ac:	e010      	b.n	4019d0 <prvUnlockQueue+0x7c>
  4019ae:	6923      	ldr	r3, [r4, #16]
  4019b0:	b923      	cbnz	r3, 4019bc <prvUnlockQueue+0x68>
  4019b2:	e00d      	b.n	4019d0 <prvUnlockQueue+0x7c>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
  4019b4:	f104 0610 	add.w	r6, r4, #16
  4019b8:	4d0b      	ldr	r5, [pc, #44]	; (4019e8 <prvUnlockQueue+0x94>)
				{
					vTaskMissedYield();
  4019ba:	4f0a      	ldr	r7, [pc, #40]	; (4019e4 <prvUnlockQueue+0x90>)
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
  4019bc:	4630      	mov	r0, r6
  4019be:	47a8      	blx	r5
  4019c0:	b100      	cbz	r0, 4019c4 <prvUnlockQueue+0x70>
				{
					vTaskMissedYield();
  4019c2:	47b8      	blx	r7
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--( pxQueue->xRxLock );
  4019c4:	6c63      	ldr	r3, [r4, #68]	; 0x44
  4019c6:	3b01      	subs	r3, #1
  4019c8:	6463      	str	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
  4019ca:	6c63      	ldr	r3, [r4, #68]	; 0x44
  4019cc:	2b00      	cmp	r3, #0
  4019ce:	dcee      	bgt.n	4019ae <prvUnlockQueue+0x5a>
			{
				break;
			}
		}

		pxQueue->xRxLock = queueUNLOCKED;
  4019d0:	f04f 33ff 	mov.w	r3, #4294967295
  4019d4:	6463      	str	r3, [r4, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
  4019d6:	4b05      	ldr	r3, [pc, #20]	; (4019ec <prvUnlockQueue+0x98>)
  4019d8:	4798      	blx	r3
  4019da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4019dc:	00401449 	.word	0x00401449
  4019e0:	004018c5 	.word	0x004018c5
  4019e4:	004027f5 	.word	0x004027f5
  4019e8:	004026d1 	.word	0x004026d1
  4019ec:	00401489 	.word	0x00401489

004019f0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
  4019f0:	b538      	push	{r3, r4, r5, lr}
Queue_t * const pxQueue = ( Queue_t * ) xQueue;

	configASSERT( pxQueue );
  4019f2:	b910      	cbnz	r0, 4019fa <xQueueGenericReset+0xa>
  4019f4:	4b17      	ldr	r3, [pc, #92]	; (401a54 <xQueueGenericReset+0x64>)
  4019f6:	4798      	blx	r3
  4019f8:	e7fe      	b.n	4019f8 <xQueueGenericReset+0x8>
  4019fa:	460d      	mov	r5, r1
  4019fc:	4604      	mov	r4, r0

	taskENTER_CRITICAL();
  4019fe:	4b16      	ldr	r3, [pc, #88]	; (401a58 <xQueueGenericReset+0x68>)
  401a00:	4798      	blx	r3
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
  401a02:	6822      	ldr	r2, [r4, #0]
  401a04:	6c21      	ldr	r1, [r4, #64]	; 0x40
  401a06:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  401a08:	fb03 f301 	mul.w	r3, r3, r1
  401a0c:	18d0      	adds	r0, r2, r3
  401a0e:	6060      	str	r0, [r4, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
  401a10:	2000      	movs	r0, #0
  401a12:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
  401a14:	60a2      	str	r2, [r4, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
  401a16:	1a5b      	subs	r3, r3, r1
  401a18:	4413      	add	r3, r2
  401a1a:	60e3      	str	r3, [r4, #12]
		pxQueue->xRxLock = queueUNLOCKED;
  401a1c:	f04f 33ff 	mov.w	r3, #4294967295
  401a20:	6463      	str	r3, [r4, #68]	; 0x44
		pxQueue->xTxLock = queueUNLOCKED;
  401a22:	64a3      	str	r3, [r4, #72]	; 0x48

		if( xNewQueue == pdFALSE )
  401a24:	b955      	cbnz	r5, 401a3c <xQueueGenericReset+0x4c>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
  401a26:	6923      	ldr	r3, [r4, #16]
  401a28:	b17b      	cbz	r3, 401a4a <xQueueGenericReset+0x5a>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
  401a2a:	f104 0010 	add.w	r0, r4, #16
  401a2e:	4b0b      	ldr	r3, [pc, #44]	; (401a5c <xQueueGenericReset+0x6c>)
  401a30:	4798      	blx	r3
  401a32:	2801      	cmp	r0, #1
  401a34:	d109      	bne.n	401a4a <xQueueGenericReset+0x5a>
				{
					queueYIELD_IF_USING_PREEMPTION();
  401a36:	4b0a      	ldr	r3, [pc, #40]	; (401a60 <xQueueGenericReset+0x70>)
  401a38:	4798      	blx	r3
  401a3a:	e006      	b.n	401a4a <xQueueGenericReset+0x5a>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
  401a3c:	f104 0010 	add.w	r0, r4, #16
  401a40:	4d08      	ldr	r5, [pc, #32]	; (401a64 <xQueueGenericReset+0x74>)
  401a42:	47a8      	blx	r5
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
  401a44:	f104 0024 	add.w	r0, r4, #36	; 0x24
  401a48:	47a8      	blx	r5
		}
	}
	taskEXIT_CRITICAL();
  401a4a:	4b07      	ldr	r3, [pc, #28]	; (401a68 <xQueueGenericReset+0x78>)
  401a4c:	4798      	blx	r3

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
}
  401a4e:	2001      	movs	r0, #1
  401a50:	bd38      	pop	{r3, r4, r5, pc}
  401a52:	bf00      	nop
  401a54:	00401419 	.word	0x00401419
  401a58:	00401449 	.word	0x00401449
  401a5c:	004026d1 	.word	0x004026d1
  401a60:	00401401 	.word	0x00401401
  401a64:	0040130d 	.word	0x0040130d
  401a68:	00401489 	.word	0x00401489

00401a6c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
{
  401a6c:	b570      	push	{r4, r5, r6, lr}

	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
  401a6e:	b910      	cbnz	r0, 401a76 <xQueueGenericCreate+0xa>
  401a70:	4b13      	ldr	r3, [pc, #76]	; (401ac0 <xQueueGenericCreate+0x54>)
  401a72:	4798      	blx	r3
  401a74:	e7fe      	b.n	401a74 <xQueueGenericCreate+0x8>
  401a76:	460d      	mov	r5, r1
  401a78:	4606      	mov	r6, r0

	if( uxItemSize == ( UBaseType_t ) 0 )
  401a7a:	b181      	cbz	r1, 401a9e <xQueueGenericCreate+0x32>
	}
	else
	{
		/* The queue is one byte longer than asked for to make wrap checking
		easier/faster. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ) + ( size_t ) 1; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  401a7c:	fb01 f000 	mul.w	r0, r1, r0
	}

	/* Allocate the new queue structure and storage area. */
	pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
  401a80:	3051      	adds	r0, #81	; 0x51
  401a82:	4b10      	ldr	r3, [pc, #64]	; (401ac4 <xQueueGenericCreate+0x58>)
  401a84:	4798      	blx	r3

	if( pxNewQueue != NULL )
  401a86:	4604      	mov	r4, r0
  401a88:	b910      	cbnz	r0, 401a90 <xQueueGenericCreate+0x24>
  401a8a:	e005      	b.n	401a98 <xQueueGenericCreate+0x2c>
		{
			/* No RAM was allocated for the queue storage area, but PC head
			cannot be set to NULL because NULL is used as a key to say the queue
			is used as a mutex.  Therefore just set pcHead to point to the queue
			as a benign value that is known to be within the memory map. */
			pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
  401a8c:	6024      	str	r4, [r4, #0]
  401a8e:	e00d      	b.n	401aac <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pxNewQueue->pcHead = ( ( int8_t * ) pxNewQueue ) + sizeof( Queue_t );
  401a90:	f100 0350 	add.w	r3, r0, #80	; 0x50
  401a94:	6003      	str	r3, [r0, #0]
  401a96:	e009      	b.n	401aac <xQueueGenericCreate+0x40>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
  401a98:	4b09      	ldr	r3, [pc, #36]	; (401ac0 <xQueueGenericCreate+0x54>)
  401a9a:	4798      	blx	r3
  401a9c:	e7fe      	b.n	401a9c <xQueueGenericCreate+0x30>
		easier/faster. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ) + ( size_t ) 1; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
	}

	/* Allocate the new queue structure and storage area. */
	pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
  401a9e:	2050      	movs	r0, #80	; 0x50
  401aa0:	4b08      	ldr	r3, [pc, #32]	; (401ac4 <xQueueGenericCreate+0x58>)
  401aa2:	4798      	blx	r3

	if( pxNewQueue != NULL )
  401aa4:	4604      	mov	r4, r0
  401aa6:	2800      	cmp	r0, #0
  401aa8:	d1f0      	bne.n	401a8c <xQueueGenericCreate+0x20>
  401aaa:	e7f5      	b.n	401a98 <xQueueGenericCreate+0x2c>
			pxNewQueue->pcHead = ( ( int8_t * ) pxNewQueue ) + sizeof( Queue_t );
		}

		/* Initialise the queue members as described above where the queue type
		is defined. */
		pxNewQueue->uxLength = uxQueueLength;
  401aac:	63e6      	str	r6, [r4, #60]	; 0x3c
		pxNewQueue->uxItemSize = uxItemSize;
  401aae:	6425      	str	r5, [r4, #64]	; 0x40
		( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
  401ab0:	4620      	mov	r0, r4
  401ab2:	2101      	movs	r1, #1
  401ab4:	4b04      	ldr	r3, [pc, #16]	; (401ac8 <xQueueGenericCreate+0x5c>)
  401ab6:	4798      	blx	r3
		}
		#endif /* configUSE_TRACE_FACILITY */

		#if( configUSE_QUEUE_SETS == 1 )
		{
			pxNewQueue->pxQueueSetContainer = NULL;
  401ab8:	2300      	movs	r3, #0
  401aba:	64e3      	str	r3, [r4, #76]	; 0x4c
	}

	configASSERT( xReturn );

	return xReturn;
}
  401abc:	4620      	mov	r0, r4
  401abe:	bd70      	pop	{r4, r5, r6, pc}
  401ac0:	00401419 	.word	0x00401419
  401ac4:	004016a5 	.word	0x004016a5
  401ac8:	004019f1 	.word	0x004019f1

00401acc <xQueueGenericSend>:

#endif /* configUSE_COUNTING_SEMAPHORES */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
  401acc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  401ad0:	b085      	sub	sp, #20
  401ad2:	9100      	str	r1, [sp, #0]
  401ad4:	9201      	str	r2, [sp, #4]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;

	configASSERT( pxQueue );
  401ad6:	b910      	cbnz	r0, 401ade <xQueueGenericSend+0x12>
  401ad8:	4b4b      	ldr	r3, [pc, #300]	; (401c08 <xQueueGenericSend+0x13c>)
  401ada:	4798      	blx	r3
  401adc:	e7fe      	b.n	401adc <xQueueGenericSend+0x10>
  401ade:	461d      	mov	r5, r3
  401ae0:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
  401ae2:	9b00      	ldr	r3, [sp, #0]
  401ae4:	b923      	cbnz	r3, 401af0 <xQueueGenericSend+0x24>
  401ae6:	6c03      	ldr	r3, [r0, #64]	; 0x40
  401ae8:	b113      	cbz	r3, 401af0 <xQueueGenericSend+0x24>
  401aea:	4b47      	ldr	r3, [pc, #284]	; (401c08 <xQueueGenericSend+0x13c>)
  401aec:	4798      	blx	r3
  401aee:	e7fe      	b.n	401aee <xQueueGenericSend+0x22>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
  401af0:	2d02      	cmp	r5, #2
  401af2:	d105      	bne.n	401b00 <xQueueGenericSend+0x34>
  401af4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  401af6:	2b01      	cmp	r3, #1
  401af8:	d002      	beq.n	401b00 <xQueueGenericSend+0x34>
  401afa:	4b43      	ldr	r3, [pc, #268]	; (401c08 <xQueueGenericSend+0x13c>)
  401afc:	4798      	blx	r3
  401afe:	e7fe      	b.n	401afe <xQueueGenericSend+0x32>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
  401b00:	4b42      	ldr	r3, [pc, #264]	; (401c0c <xQueueGenericSend+0x140>)
  401b02:	4798      	blx	r3
  401b04:	b920      	cbnz	r0, 401b10 <xQueueGenericSend+0x44>
  401b06:	9b01      	ldr	r3, [sp, #4]
  401b08:	b12b      	cbz	r3, 401b16 <xQueueGenericSend+0x4a>
  401b0a:	4b3f      	ldr	r3, [pc, #252]	; (401c08 <xQueueGenericSend+0x13c>)
  401b0c:	4798      	blx	r3
  401b0e:	e7fe      	b.n	401b0e <xQueueGenericSend+0x42>
  401b10:	f04f 0800 	mov.w	r8, #0
  401b14:	e001      	b.n	401b1a <xQueueGenericSend+0x4e>
  401b16:	f04f 0800 	mov.w	r8, #0
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
  401b1a:	4f3d      	ldr	r7, [pc, #244]	; (401c10 <xQueueGenericSend+0x144>)
				}
				else if( xEntryTimeSet == pdFALSE )
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
  401b1c:	f8df 911c 	ldr.w	r9, [pc, #284]	; 401c3c <xQueueGenericSend+0x170>
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
  401b20:	4e3c      	ldr	r6, [pc, #240]	; (401c14 <xQueueGenericSend+0x148>)
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
  401b22:	47b8      	blx	r7
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
  401b24:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  401b26:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  401b28:	429a      	cmp	r2, r3
  401b2a:	d301      	bcc.n	401b30 <xQueueGenericSend+0x64>
  401b2c:	2d02      	cmp	r5, #2
  401b2e:	d121      	bne.n	401b74 <xQueueGenericSend+0xa8>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
  401b30:	4620      	mov	r0, r4
  401b32:	9900      	ldr	r1, [sp, #0]
  401b34:	462a      	mov	r2, r5
  401b36:	4b38      	ldr	r3, [pc, #224]	; (401c18 <xQueueGenericSend+0x14c>)
  401b38:	4798      	blx	r3

				#if ( configUSE_QUEUE_SETS == 1 )
				{
					if( pxQueue->pxQueueSetContainer != NULL )
  401b3a:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
  401b3c:	b143      	cbz	r3, 401b50 <xQueueGenericSend+0x84>
					{
						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) == pdTRUE )
  401b3e:	4620      	mov	r0, r4
  401b40:	4629      	mov	r1, r5
  401b42:	4b36      	ldr	r3, [pc, #216]	; (401c1c <xQueueGenericSend+0x150>)
  401b44:	4798      	blx	r3
  401b46:	2801      	cmp	r0, #1
  401b48:	d110      	bne.n	401b6c <xQueueGenericSend+0xa0>
						{
							/* The queue is a member of a queue set, and posting
							to the queue set caused a higher priority task to
							unblock. A context switch is required. */
							queueYIELD_IF_USING_PREEMPTION();
  401b4a:	4b35      	ldr	r3, [pc, #212]	; (401c20 <xQueueGenericSend+0x154>)
  401b4c:	4798      	blx	r3
  401b4e:	e00d      	b.n	401b6c <xQueueGenericSend+0xa0>
					}
					else
					{
						/* If there was a task waiting for data to arrive on the
						queue then unblock it now. */
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  401b50:	6a63      	ldr	r3, [r4, #36]	; 0x24
  401b52:	b143      	cbz	r3, 401b66 <xQueueGenericSend+0x9a>
						{
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) == pdTRUE )
  401b54:	f104 0024 	add.w	r0, r4, #36	; 0x24
  401b58:	4b32      	ldr	r3, [pc, #200]	; (401c24 <xQueueGenericSend+0x158>)
  401b5a:	4798      	blx	r3
  401b5c:	2801      	cmp	r0, #1
  401b5e:	d105      	bne.n	401b6c <xQueueGenericSend+0xa0>
							{
								/* The unblocked task has a priority higher than
								our own so yield immediately.  Yes it is ok to
								do this from within the critical section - the
								kernel takes care of that. */
								queueYIELD_IF_USING_PREEMPTION();
  401b60:	4b2f      	ldr	r3, [pc, #188]	; (401c20 <xQueueGenericSend+0x154>)
  401b62:	4798      	blx	r3
  401b64:	e002      	b.n	401b6c <xQueueGenericSend+0xa0>
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
						}
						else if( xYieldRequired != pdFALSE )
  401b66:	b108      	cbz	r0, 401b6c <xQueueGenericSend+0xa0>
						{
							/* This path is a special case that will only get
							executed if the task was holding multiple mutexes
							and the mutexes were given back in an order that is
							different to that in which they were taken. */
							queueYIELD_IF_USING_PREEMPTION();
  401b68:	4b2d      	ldr	r3, [pc, #180]	; (401c20 <xQueueGenericSend+0x154>)
  401b6a:	4798      	blx	r3
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
  401b6c:	4b29      	ldr	r3, [pc, #164]	; (401c14 <xQueueGenericSend+0x148>)
  401b6e:	4798      	blx	r3
				return pdPASS;
  401b70:	2001      	movs	r0, #1
  401b72:	e045      	b.n	401c00 <xQueueGenericSend+0x134>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
  401b74:	9b01      	ldr	r3, [sp, #4]
  401b76:	b91b      	cbnz	r3, 401b80 <xQueueGenericSend+0xb4>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
  401b78:	4b26      	ldr	r3, [pc, #152]	; (401c14 <xQueueGenericSend+0x148>)
  401b7a:	4798      	blx	r3

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
  401b7c:	2000      	movs	r0, #0
  401b7e:	e03f      	b.n	401c00 <xQueueGenericSend+0x134>
				}
				else if( xEntryTimeSet == pdFALSE )
  401b80:	f1b8 0f00 	cmp.w	r8, #0
  401b84:	d103      	bne.n	401b8e <xQueueGenericSend+0xc2>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
  401b86:	a802      	add	r0, sp, #8
  401b88:	47c8      	blx	r9
					xEntryTimeSet = pdTRUE;
  401b8a:	f04f 0801 	mov.w	r8, #1
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
  401b8e:	47b0      	blx	r6

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
  401b90:	4b25      	ldr	r3, [pc, #148]	; (401c28 <xQueueGenericSend+0x15c>)
  401b92:	4798      	blx	r3
		prvLockQueue( pxQueue );
  401b94:	47b8      	blx	r7
  401b96:	6c63      	ldr	r3, [r4, #68]	; 0x44
  401b98:	f1b3 3fff 	cmp.w	r3, #4294967295
  401b9c:	bf04      	itt	eq
  401b9e:	2300      	moveq	r3, #0
  401ba0:	6463      	streq	r3, [r4, #68]	; 0x44
  401ba2:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  401ba4:	f1b3 3fff 	cmp.w	r3, #4294967295
  401ba8:	bf04      	itt	eq
  401baa:	2300      	moveq	r3, #0
  401bac:	64a3      	streq	r3, [r4, #72]	; 0x48
  401bae:	47b0      	blx	r6

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
  401bb0:	a802      	add	r0, sp, #8
  401bb2:	a901      	add	r1, sp, #4
  401bb4:	4b1d      	ldr	r3, [pc, #116]	; (401c2c <xQueueGenericSend+0x160>)
  401bb6:	4798      	blx	r3
  401bb8:	b9e0      	cbnz	r0, 401bf4 <xQueueGenericSend+0x128>

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
  401bba:	47b8      	blx	r7
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
  401bbc:	f8d4 b038 	ldr.w	fp, [r4, #56]	; 0x38
  401bc0:	f8d4 a03c 	ldr.w	sl, [r4, #60]	; 0x3c
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
  401bc4:	47b0      	blx	r6
		prvLockQueue( pxQueue );

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
  401bc6:	45d3      	cmp	fp, sl
  401bc8:	d10e      	bne.n	401be8 <xQueueGenericSend+0x11c>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
  401bca:	f104 0010 	add.w	r0, r4, #16
  401bce:	9901      	ldr	r1, [sp, #4]
  401bd0:	4b17      	ldr	r3, [pc, #92]	; (401c30 <xQueueGenericSend+0x164>)
  401bd2:	4798      	blx	r3
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible	that interrupts occurring now
				remove this task from the event	list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
  401bd4:	4620      	mov	r0, r4
  401bd6:	4b17      	ldr	r3, [pc, #92]	; (401c34 <xQueueGenericSend+0x168>)
  401bd8:	4798      	blx	r3
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
  401bda:	4b17      	ldr	r3, [pc, #92]	; (401c38 <xQueueGenericSend+0x16c>)
  401bdc:	4798      	blx	r3
  401bde:	2800      	cmp	r0, #0
  401be0:	d19f      	bne.n	401b22 <xQueueGenericSend+0x56>
				{
					portYIELD_WITHIN_API();
  401be2:	4b0f      	ldr	r3, [pc, #60]	; (401c20 <xQueueGenericSend+0x154>)
  401be4:	4798      	blx	r3
  401be6:	e79c      	b.n	401b22 <xQueueGenericSend+0x56>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
  401be8:	4620      	mov	r0, r4
  401bea:	4b12      	ldr	r3, [pc, #72]	; (401c34 <xQueueGenericSend+0x168>)
  401bec:	4798      	blx	r3
				( void ) xTaskResumeAll();
  401bee:	4b12      	ldr	r3, [pc, #72]	; (401c38 <xQueueGenericSend+0x16c>)
  401bf0:	4798      	blx	r3
  401bf2:	e796      	b.n	401b22 <xQueueGenericSend+0x56>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
  401bf4:	4620      	mov	r0, r4
  401bf6:	4b0f      	ldr	r3, [pc, #60]	; (401c34 <xQueueGenericSend+0x168>)
  401bf8:	4798      	blx	r3
			( void ) xTaskResumeAll();
  401bfa:	4b0f      	ldr	r3, [pc, #60]	; (401c38 <xQueueGenericSend+0x16c>)
  401bfc:	4798      	blx	r3

			/* Return to the original privilege level before exiting the
			function. */
			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
  401bfe:	2000      	movs	r0, #0
		}
	}
}
  401c00:	b005      	add	sp, #20
  401c02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  401c06:	bf00      	nop
  401c08:	00401419 	.word	0x00401419
  401c0c:	00402801 	.word	0x00402801
  401c10:	00401449 	.word	0x00401449
  401c14:	00401489 	.word	0x00401489
  401c18:	00401841 	.word	0x00401841
  401c1c:	004018c5 	.word	0x004018c5
  401c20:	00401401 	.word	0x00401401
  401c24:	004026d1 	.word	0x004026d1
  401c28:	004021c9 	.word	0x004021c9
  401c2c:	0040277d 	.word	0x0040277d
  401c30:	004025e5 	.word	0x004025e5
  401c34:	00401955 	.word	0x00401955
  401c38:	00402321 	.word	0x00402321
  401c3c:	00402759 	.word	0x00402759

00401c40 <xQueueGenericSendFromISR>:

#endif /* configUSE_ALTERNATIVE_API */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
  401c40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;

	configASSERT( pxQueue );
  401c44:	b910      	cbnz	r0, 401c4c <xQueueGenericSendFromISR+0xc>
  401c46:	4b2d      	ldr	r3, [pc, #180]	; (401cfc <xQueueGenericSendFromISR+0xbc>)
  401c48:	4798      	blx	r3
  401c4a:	e7fe      	b.n	401c4a <xQueueGenericSendFromISR+0xa>
  401c4c:	4688      	mov	r8, r1
  401c4e:	4615      	mov	r5, r2
  401c50:	461e      	mov	r6, r3
  401c52:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
  401c54:	b921      	cbnz	r1, 401c60 <xQueueGenericSendFromISR+0x20>
  401c56:	6c03      	ldr	r3, [r0, #64]	; 0x40
  401c58:	b113      	cbz	r3, 401c60 <xQueueGenericSendFromISR+0x20>
  401c5a:	4b28      	ldr	r3, [pc, #160]	; (401cfc <xQueueGenericSendFromISR+0xbc>)
  401c5c:	4798      	blx	r3
  401c5e:	e7fe      	b.n	401c5e <xQueueGenericSendFromISR+0x1e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
  401c60:	2e02      	cmp	r6, #2
  401c62:	d13b      	bne.n	401cdc <xQueueGenericSendFromISR+0x9c>
  401c64:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  401c66:	2b01      	cmp	r3, #1
  401c68:	d031      	beq.n	401cce <xQueueGenericSendFromISR+0x8e>
  401c6a:	4b24      	ldr	r3, [pc, #144]	; (401cfc <xQueueGenericSendFromISR+0xbc>)
  401c6c:	4798      	blx	r3
  401c6e:	e7fe      	b.n	401c6e <xQueueGenericSendFromISR+0x2e>
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
  401c70:	4620      	mov	r0, r4
  401c72:	4641      	mov	r1, r8
  401c74:	4632      	mov	r2, r6
  401c76:	4b22      	ldr	r3, [pc, #136]	; (401d00 <xQueueGenericSendFromISR+0xc0>)
  401c78:	4798      	blx	r3

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( pxQueue->xTxLock == queueUNLOCKED )
  401c7a:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  401c7c:	f1b3 3fff 	cmp.w	r3, #4294967295
  401c80:	d116      	bne.n	401cb0 <xQueueGenericSendFromISR+0x70>
			{
				#if ( configUSE_QUEUE_SETS == 1 )
				{
					if( pxQueue->pxQueueSetContainer != NULL )
  401c82:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
  401c84:	b14b      	cbz	r3, 401c9a <xQueueGenericSendFromISR+0x5a>
					{
						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) == pdTRUE )
  401c86:	4620      	mov	r0, r4
  401c88:	4631      	mov	r1, r6
  401c8a:	4b1e      	ldr	r3, [pc, #120]	; (401d04 <xQueueGenericSendFromISR+0xc4>)
  401c8c:	4798      	blx	r3
  401c8e:	2801      	cmp	r0, #1
  401c90:	d113      	bne.n	401cba <xQueueGenericSendFromISR+0x7a>
						{
							/* The queue is a member of a queue set, and posting
							to the queue set caused a higher priority task to
							unblock.  A context switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
  401c92:	b1a5      	cbz	r5, 401cbe <xQueueGenericSendFromISR+0x7e>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
  401c94:	2401      	movs	r4, #1
  401c96:	602c      	str	r4, [r5, #0]
  401c98:	e02a      	b.n	401cf0 <xQueueGenericSendFromISR+0xb0>
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else
					{
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  401c9a:	6a63      	ldr	r3, [r4, #36]	; 0x24
  401c9c:	b18b      	cbz	r3, 401cc2 <xQueueGenericSendFromISR+0x82>
						{
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  401c9e:	f104 0024 	add.w	r0, r4, #36	; 0x24
  401ca2:	4b19      	ldr	r3, [pc, #100]	; (401d08 <xQueueGenericSendFromISR+0xc8>)
  401ca4:	4798      	blx	r3
  401ca6:	b170      	cbz	r0, 401cc6 <xQueueGenericSendFromISR+0x86>
							{
								/* The task waiting has a higher priority so
								record that a context switch is required. */
								if( pxHigherPriorityTaskWoken != NULL )
  401ca8:	b17d      	cbz	r5, 401cca <xQueueGenericSendFromISR+0x8a>
								{
									*pxHigherPriorityTaskWoken = pdTRUE;
  401caa:	2401      	movs	r4, #1
  401cac:	602c      	str	r4, [r5, #0]
  401cae:	e01f      	b.n	401cf0 <xQueueGenericSendFromISR+0xb0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				++( pxQueue->xTxLock );
  401cb0:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  401cb2:	3301      	adds	r3, #1
  401cb4:	64a3      	str	r3, [r4, #72]	; 0x48
			}

			xReturn = pdPASS;
  401cb6:	2401      	movs	r4, #1
  401cb8:	e01a      	b.n	401cf0 <xQueueGenericSendFromISR+0xb0>
  401cba:	2401      	movs	r4, #1
  401cbc:	e018      	b.n	401cf0 <xQueueGenericSendFromISR+0xb0>
  401cbe:	2401      	movs	r4, #1
  401cc0:	e016      	b.n	401cf0 <xQueueGenericSendFromISR+0xb0>
  401cc2:	2401      	movs	r4, #1
  401cc4:	e014      	b.n	401cf0 <xQueueGenericSendFromISR+0xb0>
  401cc6:	2401      	movs	r4, #1
  401cc8:	e012      	b.n	401cf0 <xQueueGenericSendFromISR+0xb0>
  401cca:	2401      	movs	r4, #1
  401ccc:	e010      	b.n	401cf0 <xQueueGenericSendFromISR+0xb0>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
  401cce:	4b0f      	ldr	r3, [pc, #60]	; (401d0c <xQueueGenericSendFromISR+0xcc>)
  401cd0:	4798      	blx	r3
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
  401cd2:	4b0a      	ldr	r3, [pc, #40]	; (401cfc <xQueueGenericSendFromISR+0xbc>)
  401cd4:	4798      	blx	r3
  401cd6:	4607      	mov	r7, r0
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
  401cd8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  401cda:	e7c9      	b.n	401c70 <xQueueGenericSendFromISR+0x30>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
  401cdc:	4b0b      	ldr	r3, [pc, #44]	; (401d0c <xQueueGenericSendFromISR+0xcc>)
  401cde:	4798      	blx	r3
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
  401ce0:	4b06      	ldr	r3, [pc, #24]	; (401cfc <xQueueGenericSendFromISR+0xbc>)
  401ce2:	4798      	blx	r3
  401ce4:	4607      	mov	r7, r0
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
  401ce6:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  401ce8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  401cea:	429a      	cmp	r2, r3
  401cec:	d3c0      	bcc.n	401c70 <xQueueGenericSendFromISR+0x30>
			xReturn = pdPASS;
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
  401cee:	2400      	movs	r4, #0
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
  401cf0:	4638      	mov	r0, r7
  401cf2:	4b07      	ldr	r3, [pc, #28]	; (401d10 <xQueueGenericSendFromISR+0xd0>)
  401cf4:	4798      	blx	r3

	return xReturn;
}
  401cf6:	4620      	mov	r0, r4
  401cf8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  401cfc:	00401419 	.word	0x00401419
  401d00:	00401841 	.word	0x00401841
  401d04:	004018c5 	.word	0x004018c5
  401d08:	004026d1 	.word	0x004026d1
  401d0c:	00401601 	.word	0x00401601
  401d10:	00401481 	.word	0x00401481

00401d14 <xQueueGenericReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait, const BaseType_t xJustPeeking )
{
  401d14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  401d18:	b085      	sub	sp, #20
  401d1a:	9201      	str	r2, [sp, #4]
BaseType_t xEntryTimeSet = pdFALSE;
TimeOut_t xTimeOut;
int8_t *pcOriginalReadPosition;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;

	configASSERT( pxQueue );
  401d1c:	b910      	cbnz	r0, 401d24 <xQueueGenericReceive+0x10>
  401d1e:	4b49      	ldr	r3, [pc, #292]	; (401e44 <xQueueGenericReceive+0x130>)
  401d20:	4798      	blx	r3
  401d22:	e7fe      	b.n	401d22 <xQueueGenericReceive+0xe>
  401d24:	4688      	mov	r8, r1
  401d26:	4699      	mov	r9, r3
  401d28:	4604      	mov	r4, r0
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
  401d2a:	b921      	cbnz	r1, 401d36 <xQueueGenericReceive+0x22>
  401d2c:	6c03      	ldr	r3, [r0, #64]	; 0x40
  401d2e:	b113      	cbz	r3, 401d36 <xQueueGenericReceive+0x22>
  401d30:	4b44      	ldr	r3, [pc, #272]	; (401e44 <xQueueGenericReceive+0x130>)
  401d32:	4798      	blx	r3
  401d34:	e7fe      	b.n	401d34 <xQueueGenericReceive+0x20>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
  401d36:	4b44      	ldr	r3, [pc, #272]	; (401e48 <xQueueGenericReceive+0x134>)
  401d38:	4798      	blx	r3
  401d3a:	b920      	cbnz	r0, 401d46 <xQueueGenericReceive+0x32>
  401d3c:	9b01      	ldr	r3, [sp, #4]
  401d3e:	b123      	cbz	r3, 401d4a <xQueueGenericReceive+0x36>
  401d40:	4b40      	ldr	r3, [pc, #256]	; (401e44 <xQueueGenericReceive+0x130>)
  401d42:	4798      	blx	r3
  401d44:	e7fe      	b.n	401d44 <xQueueGenericReceive+0x30>
  401d46:	2700      	movs	r7, #0
  401d48:	e000      	b.n	401d4c <xQueueGenericReceive+0x38>
  401d4a:	2700      	movs	r7, #0
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
  401d4c:	4e3f      	ldr	r6, [pc, #252]	; (401e4c <xQueueGenericReceive+0x138>)
				}
				else if( xEntryTimeSet == pdFALSE )
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
  401d4e:	f8df a12c 	ldr.w	sl, [pc, #300]	; 401e7c <xQueueGenericReceive+0x168>
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
  401d52:	4d3f      	ldr	r5, [pc, #252]	; (401e50 <xQueueGenericReceive+0x13c>)
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
  401d54:	47b0      	blx	r6
		{
			/* Is there data in the queue now?  To be running the calling task
			must be	the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
  401d56:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  401d58:	b343      	cbz	r3, 401dac <xQueueGenericReceive+0x98>
			{
				/* Remember the read position in case the queue is only being
				peeked. */
				pcOriginalReadPosition = pxQueue->u.pcReadFrom;
  401d5a:	68e5      	ldr	r5, [r4, #12]

				prvCopyDataFromQueue( pxQueue, pvBuffer );
  401d5c:	4620      	mov	r0, r4
  401d5e:	4641      	mov	r1, r8
  401d60:	4b3c      	ldr	r3, [pc, #240]	; (401e54 <xQueueGenericReceive+0x140>)
  401d62:	4798      	blx	r3

				if( xJustPeeking == pdFALSE )
  401d64:	f1b9 0f00 	cmp.w	r9, #0
  401d68:	d112      	bne.n	401d90 <xQueueGenericReceive+0x7c>
				{
					traceQUEUE_RECEIVE( pxQueue );

					/* Actually removing data, not just peeking. */
					--( pxQueue->uxMessagesWaiting );
  401d6a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  401d6c:	3b01      	subs	r3, #1
  401d6e:	63a3      	str	r3, [r4, #56]	; 0x38

					#if ( configUSE_MUTEXES == 1 )
					{
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
  401d70:	6823      	ldr	r3, [r4, #0]
  401d72:	b913      	cbnz	r3, 401d7a <xQueueGenericReceive+0x66>
						{
							/* Record the information required to implement
							priority inheritance should it become necessary. */
							pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
  401d74:	4b38      	ldr	r3, [pc, #224]	; (401e58 <xQueueGenericReceive+0x144>)
  401d76:	4798      	blx	r3
  401d78:	6060      	str	r0, [r4, #4]
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configUSE_MUTEXES */

					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
  401d7a:	6923      	ldr	r3, [r4, #16]
  401d7c:	b193      	cbz	r3, 401da4 <xQueueGenericReceive+0x90>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
  401d7e:	f104 0010 	add.w	r0, r4, #16
  401d82:	4b36      	ldr	r3, [pc, #216]	; (401e5c <xQueueGenericReceive+0x148>)
  401d84:	4798      	blx	r3
  401d86:	2801      	cmp	r0, #1
  401d88:	d10c      	bne.n	401da4 <xQueueGenericReceive+0x90>
						{
							queueYIELD_IF_USING_PREEMPTION();
  401d8a:	4b35      	ldr	r3, [pc, #212]	; (401e60 <xQueueGenericReceive+0x14c>)
  401d8c:	4798      	blx	r3
  401d8e:	e009      	b.n	401da4 <xQueueGenericReceive+0x90>
				{
					traceQUEUE_PEEK( pxQueue );

					/* The data is not being removed, so reset the read
					pointer. */
					pxQueue->u.pcReadFrom = pcOriginalReadPosition;
  401d90:	60e5      	str	r5, [r4, #12]

					/* The data is being left in the queue, so see if there are
					any other tasks waiting for the data. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  401d92:	6a63      	ldr	r3, [r4, #36]	; 0x24
  401d94:	b133      	cbz	r3, 401da4 <xQueueGenericReceive+0x90>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  401d96:	f104 0024 	add.w	r0, r4, #36	; 0x24
  401d9a:	4b30      	ldr	r3, [pc, #192]	; (401e5c <xQueueGenericReceive+0x148>)
  401d9c:	4798      	blx	r3
  401d9e:	b108      	cbz	r0, 401da4 <xQueueGenericReceive+0x90>
						{
							/* The task waiting has a higher priority than this task. */
							queueYIELD_IF_USING_PREEMPTION();
  401da0:	4b2f      	ldr	r3, [pc, #188]	; (401e60 <xQueueGenericReceive+0x14c>)
  401da2:	4798      	blx	r3
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				taskEXIT_CRITICAL();
  401da4:	4b2a      	ldr	r3, [pc, #168]	; (401e50 <xQueueGenericReceive+0x13c>)
  401da6:	4798      	blx	r3
				return pdPASS;
  401da8:	2001      	movs	r0, #1
  401daa:	e048      	b.n	401e3e <xQueueGenericReceive+0x12a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
  401dac:	9b01      	ldr	r3, [sp, #4]
  401dae:	b91b      	cbnz	r3, 401db8 <xQueueGenericReceive+0xa4>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
  401db0:	4b27      	ldr	r3, [pc, #156]	; (401e50 <xQueueGenericReceive+0x13c>)
  401db2:	4798      	blx	r3
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
  401db4:	2000      	movs	r0, #0
  401db6:	e042      	b.n	401e3e <xQueueGenericReceive+0x12a>
				}
				else if( xEntryTimeSet == pdFALSE )
  401db8:	b917      	cbnz	r7, 401dc0 <xQueueGenericReceive+0xac>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
  401dba:	a802      	add	r0, sp, #8
  401dbc:	47d0      	blx	sl
					xEntryTimeSet = pdTRUE;
  401dbe:	2701      	movs	r7, #1
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
  401dc0:	47a8      	blx	r5

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
  401dc2:	4b28      	ldr	r3, [pc, #160]	; (401e64 <xQueueGenericReceive+0x150>)
  401dc4:	4798      	blx	r3
		prvLockQueue( pxQueue );
  401dc6:	47b0      	blx	r6
  401dc8:	6c63      	ldr	r3, [r4, #68]	; 0x44
  401dca:	f1b3 3fff 	cmp.w	r3, #4294967295
  401dce:	bf04      	itt	eq
  401dd0:	2300      	moveq	r3, #0
  401dd2:	6463      	streq	r3, [r4, #68]	; 0x44
  401dd4:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  401dd6:	f1b3 3fff 	cmp.w	r3, #4294967295
  401dda:	bf04      	itt	eq
  401ddc:	2300      	moveq	r3, #0
  401dde:	64a3      	streq	r3, [r4, #72]	; 0x48
  401de0:	47a8      	blx	r5

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
  401de2:	a802      	add	r0, sp, #8
  401de4:	a901      	add	r1, sp, #4
  401de6:	4b20      	ldr	r3, [pc, #128]	; (401e68 <xQueueGenericReceive+0x154>)
  401de8:	4798      	blx	r3
  401dea:	bb10      	cbnz	r0, 401e32 <xQueueGenericReceive+0x11e>

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
  401dec:	47b0      	blx	r6
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
  401dee:	f8d4 b038 	ldr.w	fp, [r4, #56]	; 0x38
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
  401df2:	47a8      	blx	r5
		prvLockQueue( pxQueue );

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
		{
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
  401df4:	f1bb 0f00 	cmp.w	fp, #0
  401df8:	d115      	bne.n	401e26 <xQueueGenericReceive+0x112>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
  401dfa:	6823      	ldr	r3, [r4, #0]
  401dfc:	b923      	cbnz	r3, 401e08 <xQueueGenericReceive+0xf4>
					{
						taskENTER_CRITICAL();
  401dfe:	47b0      	blx	r6
						{
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
  401e00:	6860      	ldr	r0, [r4, #4]
  401e02:	4b1a      	ldr	r3, [pc, #104]	; (401e6c <xQueueGenericReceive+0x158>)
  401e04:	4798      	blx	r3
						}
						taskEXIT_CRITICAL();
  401e06:	47a8      	blx	r5
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
  401e08:	f104 0024 	add.w	r0, r4, #36	; 0x24
  401e0c:	9901      	ldr	r1, [sp, #4]
  401e0e:	4b18      	ldr	r3, [pc, #96]	; (401e70 <xQueueGenericReceive+0x15c>)
  401e10:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
  401e12:	4620      	mov	r0, r4
  401e14:	4b17      	ldr	r3, [pc, #92]	; (401e74 <xQueueGenericReceive+0x160>)
  401e16:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
  401e18:	4b17      	ldr	r3, [pc, #92]	; (401e78 <xQueueGenericReceive+0x164>)
  401e1a:	4798      	blx	r3
  401e1c:	2800      	cmp	r0, #0
  401e1e:	d199      	bne.n	401d54 <xQueueGenericReceive+0x40>
				{
					portYIELD_WITHIN_API();
  401e20:	4b0f      	ldr	r3, [pc, #60]	; (401e60 <xQueueGenericReceive+0x14c>)
  401e22:	4798      	blx	r3
  401e24:	e796      	b.n	401d54 <xQueueGenericReceive+0x40>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
  401e26:	4620      	mov	r0, r4
  401e28:	4b12      	ldr	r3, [pc, #72]	; (401e74 <xQueueGenericReceive+0x160>)
  401e2a:	4798      	blx	r3
				( void ) xTaskResumeAll();
  401e2c:	4b12      	ldr	r3, [pc, #72]	; (401e78 <xQueueGenericReceive+0x164>)
  401e2e:	4798      	blx	r3
  401e30:	e790      	b.n	401d54 <xQueueGenericReceive+0x40>
			}
		}
		else
		{
			prvUnlockQueue( pxQueue );
  401e32:	4620      	mov	r0, r4
  401e34:	4b0f      	ldr	r3, [pc, #60]	; (401e74 <xQueueGenericReceive+0x160>)
  401e36:	4798      	blx	r3
			( void ) xTaskResumeAll();
  401e38:	4b0f      	ldr	r3, [pc, #60]	; (401e78 <xQueueGenericReceive+0x164>)
  401e3a:	4798      	blx	r3
			traceQUEUE_RECEIVE_FAILED( pxQueue );
			return errQUEUE_EMPTY;
  401e3c:	2000      	movs	r0, #0
		}
	}
}
  401e3e:	b005      	add	sp, #20
  401e40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  401e44:	00401419 	.word	0x00401419
  401e48:	00402801 	.word	0x00402801
  401e4c:	00401449 	.word	0x00401449
  401e50:	00401489 	.word	0x00401489
  401e54:	0040192d 	.word	0x0040192d
  401e58:	0040296d 	.word	0x0040296d
  401e5c:	004026d1 	.word	0x004026d1
  401e60:	00401401 	.word	0x00401401
  401e64:	004021c9 	.word	0x004021c9
  401e68:	0040277d 	.word	0x0040277d
  401e6c:	00402821 	.word	0x00402821
  401e70:	004025e5 	.word	0x004025e5
  401e74:	00401955 	.word	0x00401955
  401e78:	00402321 	.word	0x00402321
  401e7c:	00402759 	.word	0x00402759

00401e80 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
  401e80:	b570      	push	{r4, r5, r6, lr}
  401e82:	4604      	mov	r4, r0
  401e84:	460e      	mov	r6, r1
  401e86:	4615      	mov	r5, r2
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
  401e88:	4b0d      	ldr	r3, [pc, #52]	; (401ec0 <vQueueWaitForMessageRestricted+0x40>)
  401e8a:	4798      	blx	r3
  401e8c:	6c63      	ldr	r3, [r4, #68]	; 0x44
  401e8e:	f1b3 3fff 	cmp.w	r3, #4294967295
  401e92:	bf04      	itt	eq
  401e94:	2300      	moveq	r3, #0
  401e96:	6463      	streq	r3, [r4, #68]	; 0x44
  401e98:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  401e9a:	f1b3 3fff 	cmp.w	r3, #4294967295
  401e9e:	bf04      	itt	eq
  401ea0:	2300      	moveq	r3, #0
  401ea2:	64a3      	streq	r3, [r4, #72]	; 0x48
  401ea4:	4b07      	ldr	r3, [pc, #28]	; (401ec4 <vQueueWaitForMessageRestricted+0x44>)
  401ea6:	4798      	blx	r3
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
  401ea8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  401eaa:	b92b      	cbnz	r3, 401eb8 <vQueueWaitForMessageRestricted+0x38>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
  401eac:	f104 0024 	add.w	r0, r4, #36	; 0x24
  401eb0:	4631      	mov	r1, r6
  401eb2:	462a      	mov	r2, r5
  401eb4:	4b04      	ldr	r3, [pc, #16]	; (401ec8 <vQueueWaitForMessageRestricted+0x48>)
  401eb6:	4798      	blx	r3
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
  401eb8:	4620      	mov	r0, r4
  401eba:	4b04      	ldr	r3, [pc, #16]	; (401ecc <vQueueWaitForMessageRestricted+0x4c>)
  401ebc:	4798      	blx	r3
  401ebe:	bd70      	pop	{r4, r5, r6, pc}
  401ec0:	00401449 	.word	0x00401449
  401ec4:	00401489 	.word	0x00401489
  401ec8:	0040265d 	.word	0x0040265d
  401ecc:	00401955 	.word	0x00401955

00401ed0 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
  401ed0:	4b08      	ldr	r3, [pc, #32]	; (401ef4 <prvResetNextTaskUnblockTime+0x24>)
  401ed2:	681b      	ldr	r3, [r3, #0]
  401ed4:	681b      	ldr	r3, [r3, #0]
  401ed6:	b923      	cbnz	r3, 401ee2 <prvResetNextTaskUnblockTime+0x12>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
  401ed8:	f04f 32ff 	mov.w	r2, #4294967295
  401edc:	4b06      	ldr	r3, [pc, #24]	; (401ef8 <prvResetNextTaskUnblockTime+0x28>)
  401ede:	601a      	str	r2, [r3, #0]
  401ee0:	4770      	bx	lr
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
  401ee2:	4b04      	ldr	r3, [pc, #16]	; (401ef4 <prvResetNextTaskUnblockTime+0x24>)
  401ee4:	681b      	ldr	r3, [r3, #0]
  401ee6:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xGenericListItem ) );
  401ee8:	68db      	ldr	r3, [r3, #12]
  401eea:	685a      	ldr	r2, [r3, #4]
  401eec:	4b02      	ldr	r3, [pc, #8]	; (401ef8 <prvResetNextTaskUnblockTime+0x28>)
  401eee:	601a      	str	r2, [r3, #0]
  401ef0:	4770      	bx	lr
  401ef2:	bf00      	nop
  401ef4:	2000a8b8 	.word	0x2000a8b8
  401ef8:	2000a958 	.word	0x2000a958

00401efc <prvAddCurrentTaskToDelayedList>:
	#endif /* vTaskDelete */
}
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( const TickType_t xTimeToWake )
{
  401efc:	b510      	push	{r4, lr}
  401efe:	4604      	mov	r4, r0
	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
  401f00:	4b0e      	ldr	r3, [pc, #56]	; (401f3c <prvAddCurrentTaskToDelayedList+0x40>)
  401f02:	681b      	ldr	r3, [r3, #0]
  401f04:	6058      	str	r0, [r3, #4]

	if( xTimeToWake < xTickCount )
  401f06:	4b0e      	ldr	r3, [pc, #56]	; (401f40 <prvAddCurrentTaskToDelayedList+0x44>)
  401f08:	681b      	ldr	r3, [r3, #0]
  401f0a:	4298      	cmp	r0, r3
  401f0c:	d207      	bcs.n	401f1e <prvAddCurrentTaskToDelayedList+0x22>
	{
		/* Wake time has overflowed.  Place this item in the overflow list. */
		vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
  401f0e:	4b0d      	ldr	r3, [pc, #52]	; (401f44 <prvAddCurrentTaskToDelayedList+0x48>)
  401f10:	6818      	ldr	r0, [r3, #0]
  401f12:	4b0a      	ldr	r3, [pc, #40]	; (401f3c <prvAddCurrentTaskToDelayedList+0x40>)
  401f14:	6819      	ldr	r1, [r3, #0]
  401f16:	3104      	adds	r1, #4
  401f18:	4b0b      	ldr	r3, [pc, #44]	; (401f48 <prvAddCurrentTaskToDelayedList+0x4c>)
  401f1a:	4798      	blx	r3
  401f1c:	bd10      	pop	{r4, pc}
	}
	else
	{
		/* The wake time has not overflowed, so the current block list is used. */
		vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
  401f1e:	4b0b      	ldr	r3, [pc, #44]	; (401f4c <prvAddCurrentTaskToDelayedList+0x50>)
  401f20:	6818      	ldr	r0, [r3, #0]
  401f22:	4b06      	ldr	r3, [pc, #24]	; (401f3c <prvAddCurrentTaskToDelayedList+0x40>)
  401f24:	6819      	ldr	r1, [r3, #0]
  401f26:	3104      	adds	r1, #4
  401f28:	4b07      	ldr	r3, [pc, #28]	; (401f48 <prvAddCurrentTaskToDelayedList+0x4c>)
  401f2a:	4798      	blx	r3

		/* If the task entering the blocked state was placed at the head of the
		list of blocked tasks then xNextTaskUnblockTime needs to be updated
		too. */
		if( xTimeToWake < xNextTaskUnblockTime )
  401f2c:	4b08      	ldr	r3, [pc, #32]	; (401f50 <prvAddCurrentTaskToDelayedList+0x54>)
  401f2e:	681b      	ldr	r3, [r3, #0]
  401f30:	429c      	cmp	r4, r3
		{
			xNextTaskUnblockTime = xTimeToWake;
  401f32:	bf3c      	itt	cc
  401f34:	4b06      	ldrcc	r3, [pc, #24]	; (401f50 <prvAddCurrentTaskToDelayedList+0x54>)
  401f36:	601c      	strcc	r4, [r3, #0]
  401f38:	bd10      	pop	{r4, pc}
  401f3a:	bf00      	nop
  401f3c:	2000a954 	.word	0x2000a954
  401f40:	2000a960 	.word	0x2000a960
  401f44:	2000a964 	.word	0x2000a964
  401f48:	00401345 	.word	0x00401345
  401f4c:	2000a8b8 	.word	0x2000a8b8
  401f50:	2000a958 	.word	0x2000a958

00401f54 <xTaskGenericCreate>:

#endif
/*-----------------------------------------------------------*/

BaseType_t xTaskGenericCreate( TaskFunction_t pxTaskCode, const char * const pcName, const uint16_t usStackDepth, void * const pvParameters, UBaseType_t uxPriority, TaskHandle_t * const pxCreatedTask, StackType_t * const puxStackBuffer, const MemoryRegion_t * const xRegions ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
  401f54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  401f58:	b083      	sub	sp, #12
  401f5a:	9301      	str	r3, [sp, #4]
  401f5c:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  401f5e:	f8dd a034 	ldr.w	sl, [sp, #52]	; 0x34
  401f62:	9d0e      	ldr	r5, [sp, #56]	; 0x38
BaseType_t xReturn;
TCB_t * pxNewTCB;
StackType_t *pxTopOfStack;

	configASSERT( pxTaskCode );
  401f64:	9000      	str	r0, [sp, #0]
  401f66:	b910      	cbnz	r0, 401f6e <xTaskGenericCreate+0x1a>
  401f68:	4b62      	ldr	r3, [pc, #392]	; (4020f4 <xTaskGenericCreate+0x1a0>)
  401f6a:	4798      	blx	r3
  401f6c:	e7fe      	b.n	401f6c <xTaskGenericCreate+0x18>
  401f6e:	460e      	mov	r6, r1
  401f70:	4690      	mov	r8, r2
	configASSERT( ( ( uxPriority & ( UBaseType_t ) ( ~portPRIVILEGE_BIT ) ) < ( UBaseType_t ) configMAX_PRIORITIES ) );
  401f72:	2f04      	cmp	r7, #4
  401f74:	d902      	bls.n	401f7c <xTaskGenericCreate+0x28>
  401f76:	4b5f      	ldr	r3, [pc, #380]	; (4020f4 <xTaskGenericCreate+0x1a0>)
  401f78:	4798      	blx	r3
  401f7a:	e7fe      	b.n	401f7a <xTaskGenericCreate+0x26>
	#else /* portSTACK_GROWTH */
	{
	StackType_t *pxStack;

		/* Allocate space for the stack used by the task being created. */
		pxStack = ( StackType_t * ) pvPortMallocAligned( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ), puxStackBuffer ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  401f7c:	b935      	cbnz	r5, 401f8c <xTaskGenericCreate+0x38>
  401f7e:	0090      	lsls	r0, r2, #2
  401f80:	4b5d      	ldr	r3, [pc, #372]	; (4020f8 <xTaskGenericCreate+0x1a4>)
  401f82:	4798      	blx	r3

		if( pxStack != NULL )
  401f84:	4605      	mov	r5, r0
  401f86:	2800      	cmp	r0, #0
  401f88:	f000 80ae 	beq.w	4020e8 <xTaskGenericCreate+0x194>
		{
			/* Allocate space for the TCB.  Where the memory comes from depends
			on the implementation of the port malloc function. */
			pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
  401f8c:	2050      	movs	r0, #80	; 0x50
  401f8e:	4b5a      	ldr	r3, [pc, #360]	; (4020f8 <xTaskGenericCreate+0x1a4>)
  401f90:	4798      	blx	r3

			if( pxNewTCB != NULL )
  401f92:	4604      	mov	r4, r0
  401f94:	b1a8      	cbz	r0, 401fc2 <xTaskGenericCreate+0x6e>
			{
				/* Store the stack location in the TCB. */
				pxNewTCB->pxStack = pxStack;
  401f96:	6305      	str	r5, [r0, #48]	; 0x30
	{
		/* Avoid dependency on memset() if it is not required. */
		#if( ( configCHECK_FOR_STACK_OVERFLOW > 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )
		{
			/* Just to help debugging. */
			( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) usStackDepth * sizeof( StackType_t ) );
  401f98:	4628      	mov	r0, r5
  401f9a:	21a5      	movs	r1, #165	; 0xa5
  401f9c:	ea4f 0288 	mov.w	r2, r8, lsl #2
  401fa0:	4b56      	ldr	r3, [pc, #344]	; (4020fc <xTaskGenericCreate+0x1a8>)
  401fa2:	4798      	blx	r3
		stack grows from high memory to low (as per the 80x86) or vice versa.
		portSTACK_GROWTH is used to make the result positive or negative as
		required by the port. */
		#if( portSTACK_GROWTH < 0 )
		{
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( uint16_t ) 1 );
  401fa4:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
  401fa8:	f108 38ff 	add.w	r8, r8, #4294967295
  401fac:	6b23      	ldr	r3, [r4, #48]	; 0x30
  401fae:	eb03 0888 	add.w	r8, r3, r8, lsl #2
			pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
  401fb2:	f028 0507 	bic.w	r5, r8, #7
UBaseType_t x;

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
	{
		pxTCB->pcTaskName[ x ] = pcName[ x ];
  401fb6:	7833      	ldrb	r3, [r6, #0]
  401fb8:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
  401fbc:	7833      	ldrb	r3, [r6, #0]
  401fbe:	b923      	cbnz	r3, 401fca <xTaskGenericCreate+0x76>
  401fc0:	e00f      	b.n	401fe2 <xTaskGenericCreate+0x8e>
			}
			else
			{
				/* The stack cannot be used as the TCB was not created.  Free it
				again. */
				vPortFree( pxStack );
  401fc2:	4628      	mov	r0, r5
  401fc4:	4b4e      	ldr	r3, [pc, #312]	; (402100 <xTaskGenericCreate+0x1ac>)
  401fc6:	4798      	blx	r3
  401fc8:	e08e      	b.n	4020e8 <xTaskGenericCreate+0x194>
  401fca:	4633      	mov	r3, r6
  401fcc:	f104 0234 	add.w	r2, r4, #52	; 0x34
  401fd0:	3609      	adds	r6, #9
UBaseType_t x;

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
	{
		pxTCB->pcTaskName[ x ] = pcName[ x ];
  401fd2:	f813 1f01 	ldrb.w	r1, [r3, #1]!
  401fd6:	f802 1f01 	strb.w	r1, [r2, #1]!

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
  401fda:	7819      	ldrb	r1, [r3, #0]
  401fdc:	b109      	cbz	r1, 401fe2 <xTaskGenericCreate+0x8e>
static void prvInitialiseTCBVariables( TCB_t * const pxTCB, const char * const pcName, UBaseType_t uxPriority, const MemoryRegion_t * const xRegions, const uint16_t usStackDepth ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
UBaseType_t x;

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
  401fde:	42b3      	cmp	r3, r6
  401fe0:	d1f7      	bne.n	401fd2 <xTaskGenericCreate+0x7e>
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
  401fe2:	f04f 0800 	mov.w	r8, #0
  401fe6:	f884 803d 	strb.w	r8, [r4, #61]	; 0x3d
  401fea:	463e      	mov	r6, r7
  401fec:	2f04      	cmp	r7, #4
  401fee:	bf28      	it	cs
  401ff0:	2604      	movcs	r6, #4
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxTCB->uxPriority = uxPriority;
  401ff2:	62e6      	str	r6, [r4, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxTCB->uxBasePriority = uxPriority;
  401ff4:	6426      	str	r6, [r4, #64]	; 0x40
		pxTCB->uxMutexesHeld = 0;
  401ff6:	f8c4 8044 	str.w	r8, [r4, #68]	; 0x44
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
  401ffa:	f104 0904 	add.w	r9, r4, #4
  401ffe:	4648      	mov	r0, r9
  402000:	f8df b148 	ldr.w	fp, [pc, #328]	; 40214c <xTaskGenericCreate+0x1f8>
  402004:	47d8      	blx	fp
	vListInitialiseItem( &( pxTCB->xEventListItem ) );
  402006:	f104 0018 	add.w	r0, r4, #24
  40200a:	47d8      	blx	fp

	/* Set the pxTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );
  40200c:	6124      	str	r4, [r4, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  40200e:	f1c6 0605 	rsb	r6, r6, #5
  402012:	61a6      	str	r6, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
  402014:	6264      	str	r4, [r4, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxTCB->ulNotifiedValue = 0;
  402016:	f8c4 8048 	str.w	r8, [r4, #72]	; 0x48
		pxTCB->eNotifyState = eNotWaitingNotification;
  40201a:	f884 804c 	strb.w	r8, [r4, #76]	; 0x4c
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
		}
		#else /* portUSING_MPU_WRAPPERS */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
  40201e:	4628      	mov	r0, r5
  402020:	9900      	ldr	r1, [sp, #0]
  402022:	9a01      	ldr	r2, [sp, #4]
  402024:	4b37      	ldr	r3, [pc, #220]	; (402104 <xTaskGenericCreate+0x1b0>)
  402026:	4798      	blx	r3
  402028:	6020      	str	r0, [r4, #0]
		}
		#endif /* portUSING_MPU_WRAPPERS */

		if( ( void * ) pxCreatedTask != NULL )
  40202a:	f1ba 0f00 	cmp.w	sl, #0
  40202e:	d001      	beq.n	402034 <xTaskGenericCreate+0xe0>
		{
			/* Pass the TCB out - in an anonymous way.  The calling function/
			task can use this as a handle to delete the task later if
			required.*/
			*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
  402030:	f8ca 4000 	str.w	r4, [sl]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Ensure interrupts don't access the task lists while they are being
		updated. */
		taskENTER_CRITICAL();
  402034:	4b34      	ldr	r3, [pc, #208]	; (402108 <xTaskGenericCreate+0x1b4>)
  402036:	4798      	blx	r3
		{
			uxCurrentNumberOfTasks++;
  402038:	4a34      	ldr	r2, [pc, #208]	; (40210c <xTaskGenericCreate+0x1b8>)
  40203a:	6813      	ldr	r3, [r2, #0]
  40203c:	3301      	adds	r3, #1
  40203e:	6013      	str	r3, [r2, #0]
			if( pxCurrentTCB == NULL )
  402040:	4b33      	ldr	r3, [pc, #204]	; (402110 <xTaskGenericCreate+0x1bc>)
  402042:	681b      	ldr	r3, [r3, #0]
  402044:	bb0b      	cbnz	r3, 40208a <xTaskGenericCreate+0x136>
			{
				/* There are no other tasks, or all the other tasks are in
				the suspended state - make this the current task. */
				pxCurrentTCB =  pxNewTCB;
  402046:	4b32      	ldr	r3, [pc, #200]	; (402110 <xTaskGenericCreate+0x1bc>)
  402048:	601c      	str	r4, [r3, #0]

				if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
  40204a:	6813      	ldr	r3, [r2, #0]
  40204c:	2b01      	cmp	r3, #1
  40204e:	d126      	bne.n	40209e <xTaskGenericCreate+0x14a>
  402050:	4d30      	ldr	r5, [pc, #192]	; (402114 <xTaskGenericCreate+0x1c0>)
  402052:	f105 0864 	add.w	r8, r5, #100	; 0x64
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
  402056:	4e30      	ldr	r6, [pc, #192]	; (402118 <xTaskGenericCreate+0x1c4>)
  402058:	4628      	mov	r0, r5
  40205a:	47b0      	blx	r6
  40205c:	3514      	adds	r5, #20

static void prvInitialiseTaskLists( void )
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
  40205e:	4545      	cmp	r5, r8
  402060:	d1fa      	bne.n	402058 <xTaskGenericCreate+0x104>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
	}

	vListInitialise( &xDelayedTaskList1 );
  402062:	f8df 80ec 	ldr.w	r8, [pc, #236]	; 402150 <xTaskGenericCreate+0x1fc>
  402066:	4640      	mov	r0, r8
  402068:	4d2b      	ldr	r5, [pc, #172]	; (402118 <xTaskGenericCreate+0x1c4>)
  40206a:	47a8      	blx	r5
	vListInitialise( &xDelayedTaskList2 );
  40206c:	4e2b      	ldr	r6, [pc, #172]	; (40211c <xTaskGenericCreate+0x1c8>)
  40206e:	4630      	mov	r0, r6
  402070:	47a8      	blx	r5
	vListInitialise( &xPendingReadyList );
  402072:	482b      	ldr	r0, [pc, #172]	; (402120 <xTaskGenericCreate+0x1cc>)
  402074:	47a8      	blx	r5

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
  402076:	482b      	ldr	r0, [pc, #172]	; (402124 <xTaskGenericCreate+0x1d0>)
  402078:	47a8      	blx	r5
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
  40207a:	482b      	ldr	r0, [pc, #172]	; (402128 <xTaskGenericCreate+0x1d4>)
  40207c:	47a8      	blx	r5
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
  40207e:	4b2b      	ldr	r3, [pc, #172]	; (40212c <xTaskGenericCreate+0x1d8>)
  402080:	f8c3 8000 	str.w	r8, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
  402084:	4b2a      	ldr	r3, [pc, #168]	; (402130 <xTaskGenericCreate+0x1dc>)
  402086:	601e      	str	r6, [r3, #0]
  402088:	e009      	b.n	40209e <xTaskGenericCreate+0x14a>
			else
			{
				/* If the scheduler is not already running, make this task the
				current task if it is the highest priority task to be created
				so far. */
				if( xSchedulerRunning == pdFALSE )
  40208a:	4b2a      	ldr	r3, [pc, #168]	; (402134 <xTaskGenericCreate+0x1e0>)
  40208c:	681b      	ldr	r3, [r3, #0]
  40208e:	b933      	cbnz	r3, 40209e <xTaskGenericCreate+0x14a>
				{
					if( pxCurrentTCB->uxPriority <= uxPriority )
  402090:	4b1f      	ldr	r3, [pc, #124]	; (402110 <xTaskGenericCreate+0x1bc>)
  402092:	681b      	ldr	r3, [r3, #0]
  402094:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  402096:	429f      	cmp	r7, r3
					{
						pxCurrentTCB = pxNewTCB;
  402098:	bf24      	itt	cs
  40209a:	4b1d      	ldrcs	r3, [pc, #116]	; (402110 <xTaskGenericCreate+0x1bc>)
  40209c:	601c      	strcs	r4, [r3, #0]
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}

			uxTaskNumber++;
  40209e:	4a26      	ldr	r2, [pc, #152]	; (402138 <xTaskGenericCreate+0x1e4>)
  4020a0:	6813      	ldr	r3, [r2, #0]
  4020a2:	3301      	adds	r3, #1
  4020a4:	6013      	str	r3, [r2, #0]
				pxNewTCB->uxTCBNumber = uxTaskNumber;
			}
			#endif /* configUSE_TRACE_FACILITY */
			traceTASK_CREATE( pxNewTCB );

			prvAddTaskToReadyList( pxNewTCB );
  4020a6:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  4020a8:	4924      	ldr	r1, [pc, #144]	; (40213c <xTaskGenericCreate+0x1e8>)
  4020aa:	680b      	ldr	r3, [r1, #0]
  4020ac:	2201      	movs	r2, #1
  4020ae:	4082      	lsls	r2, r0
  4020b0:	4313      	orrs	r3, r2
  4020b2:	600b      	str	r3, [r1, #0]
  4020b4:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  4020b8:	4b16      	ldr	r3, [pc, #88]	; (402114 <xTaskGenericCreate+0x1c0>)
  4020ba:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  4020be:	4649      	mov	r1, r9
  4020c0:	4b1f      	ldr	r3, [pc, #124]	; (402140 <xTaskGenericCreate+0x1ec>)
  4020c2:	4798      	blx	r3

			xReturn = pdPASS;
			portSETUP_TCB( pxNewTCB );
		}
		taskEXIT_CRITICAL();
  4020c4:	4b1f      	ldr	r3, [pc, #124]	; (402144 <xTaskGenericCreate+0x1f0>)
  4020c6:	4798      	blx	r3
		traceTASK_CREATE_FAILED();
	}

	if( xReturn == pdPASS )
	{
		if( xSchedulerRunning != pdFALSE )
  4020c8:	4b1a      	ldr	r3, [pc, #104]	; (402134 <xTaskGenericCreate+0x1e0>)
  4020ca:	681b      	ldr	r3, [r3, #0]
  4020cc:	b143      	cbz	r3, 4020e0 <xTaskGenericCreate+0x18c>
		{
			/* If the created task is of a higher priority than the current task
			then it should run now. */
			if( pxCurrentTCB->uxPriority < uxPriority )
  4020ce:	4b10      	ldr	r3, [pc, #64]	; (402110 <xTaskGenericCreate+0x1bc>)
  4020d0:	681b      	ldr	r3, [r3, #0]
  4020d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  4020d4:	429f      	cmp	r7, r3
  4020d6:	d905      	bls.n	4020e4 <xTaskGenericCreate+0x190>
			{
				taskYIELD_IF_USING_PREEMPTION();
  4020d8:	4b1b      	ldr	r3, [pc, #108]	; (402148 <xTaskGenericCreate+0x1f4>)
  4020da:	4798      	blx	r3
			#endif /* configUSE_TRACE_FACILITY */
			traceTASK_CREATE( pxNewTCB );

			prvAddTaskToReadyList( pxNewTCB );

			xReturn = pdPASS;
  4020dc:	2001      	movs	r0, #1
  4020de:	e005      	b.n	4020ec <xTaskGenericCreate+0x198>
  4020e0:	2001      	movs	r0, #1
  4020e2:	e003      	b.n	4020ec <xTaskGenericCreate+0x198>
  4020e4:	2001      	movs	r0, #1
  4020e6:	e001      	b.n	4020ec <xTaskGenericCreate+0x198>
		}
		taskEXIT_CRITICAL();
	}
	else
	{
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
  4020e8:	f04f 30ff 	mov.w	r0, #4294967295
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xReturn;
}
  4020ec:	b003      	add	sp, #12
  4020ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4020f2:	bf00      	nop
  4020f4:	00401419 	.word	0x00401419
  4020f8:	004016a5 	.word	0x004016a5
  4020fc:	00403251 	.word	0x00403251
  402100:	004017dd 	.word	0x004017dd
  402104:	004013bd 	.word	0x004013bd
  402108:	00401449 	.word	0x00401449
  40210c:	2000a980 	.word	0x2000a980
  402110:	2000a954 	.word	0x2000a954
  402114:	2000a8dc 	.word	0x2000a8dc
  402118:	0040130d 	.word	0x0040130d
  40211c:	2000a984 	.word	0x2000a984
  402120:	2000a968 	.word	0x2000a968
  402124:	2000a940 	.word	0x2000a940
  402128:	2000a998 	.word	0x2000a998
  40212c:	2000a8b8 	.word	0x2000a8b8
  402130:	2000a964 	.word	0x2000a964
  402134:	2000a8bc 	.word	0x2000a8bc
  402138:	2000a97c 	.word	0x2000a97c
  40213c:	2000a9ac 	.word	0x2000a9ac
  402140:	0040132d 	.word	0x0040132d
  402144:	00401489 	.word	0x00401489
  402148:	00401401 	.word	0x00401401
  40214c:	00401325 	.word	0x00401325
  402150:	2000a8c4 	.word	0x2000a8c4

00402154 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
  402154:	b510      	push	{r4, lr}
  402156:	b084      	sub	sp, #16
		xReturn = xTaskCreate( prvIdleTask, "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), &xIdleTaskHandle ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */
	}
	#else
	{
		/* Create the idle task without storing its handle. */
		xReturn = xTaskCreate( prvIdleTask, "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), NULL );  /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */
  402158:	2300      	movs	r3, #0
  40215a:	9300      	str	r3, [sp, #0]
  40215c:	9301      	str	r3, [sp, #4]
  40215e:	9302      	str	r3, [sp, #8]
  402160:	9303      	str	r3, [sp, #12]
  402162:	4810      	ldr	r0, [pc, #64]	; (4021a4 <vTaskStartScheduler+0x50>)
  402164:	4910      	ldr	r1, [pc, #64]	; (4021a8 <vTaskStartScheduler+0x54>)
  402166:	2282      	movs	r2, #130	; 0x82
  402168:	4c10      	ldr	r4, [pc, #64]	; (4021ac <vTaskStartScheduler+0x58>)
  40216a:	47a0      	blx	r4
	}
	#endif /* INCLUDE_xTaskGetIdleTaskHandle */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
  40216c:	2801      	cmp	r0, #1
  40216e:	d112      	bne.n	402196 <vTaskStartScheduler+0x42>
		{
			xReturn = xTimerCreateTimerTask();
  402170:	4b0f      	ldr	r3, [pc, #60]	; (4021b0 <vTaskStartScheduler+0x5c>)
  402172:	4798      	blx	r3
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
  402174:	2801      	cmp	r0, #1
  402176:	d10e      	bne.n	402196 <vTaskStartScheduler+0x42>
		/* Interrupts are turned off here, to ensure a tick does not occur
		before or during the call to xPortStartScheduler().  The stacks of
		the created tasks contain a status word with interrupts switched on
		so interrupts will automatically get re-enabled when the first task
		starts to run. */
		portDISABLE_INTERRUPTS();
  402178:	4b0e      	ldr	r3, [pc, #56]	; (4021b4 <vTaskStartScheduler+0x60>)
  40217a:	4798      	blx	r3
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
  40217c:	f04f 32ff 	mov.w	r2, #4294967295
  402180:	4b0d      	ldr	r3, [pc, #52]	; (4021b8 <vTaskStartScheduler+0x64>)
  402182:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
  402184:	2201      	movs	r2, #1
  402186:	4b0d      	ldr	r3, [pc, #52]	; (4021bc <vTaskStartScheduler+0x68>)
  402188:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
  40218a:	2200      	movs	r2, #0
  40218c:	4b0c      	ldr	r3, [pc, #48]	; (4021c0 <vTaskStartScheduler+0x6c>)
  40218e:	601a      	str	r2, [r3, #0]
		the run time counter time base. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
  402190:	4b0c      	ldr	r3, [pc, #48]	; (4021c4 <vTaskStartScheduler+0x70>)
  402192:	4798      	blx	r3
  402194:	e003      	b.n	40219e <vTaskStartScheduler+0x4a>
	else
	{
		/* This line will only be reached if the kernel could not be started,
		because there was not enough FreeRTOS heap to create the idle task
		or the timer task. */
		configASSERT( xReturn );
  402196:	b910      	cbnz	r0, 40219e <vTaskStartScheduler+0x4a>
  402198:	4b06      	ldr	r3, [pc, #24]	; (4021b4 <vTaskStartScheduler+0x60>)
  40219a:	4798      	blx	r3
  40219c:	e7fe      	b.n	40219c <vTaskStartScheduler+0x48>
	}
}
  40219e:	b004      	add	sp, #16
  4021a0:	bd10      	pop	{r4, pc}
  4021a2:	bf00      	nop
  4021a4:	00402499 	.word	0x00402499
  4021a8:	004043dc 	.word	0x004043dc
  4021ac:	00401f55 	.word	0x00401f55
  4021b0:	00402a3d 	.word	0x00402a3d
  4021b4:	00401419 	.word	0x00401419
  4021b8:	2000a958 	.word	0x2000a958
  4021bc:	2000a8bc 	.word	0x2000a8bc
  4021c0:	2000a960 	.word	0x2000a960
  4021c4:	00401551 	.word	0x00401551

004021c8 <vTaskSuspendAll>:
{
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
  4021c8:	4a02      	ldr	r2, [pc, #8]	; (4021d4 <vTaskSuspendAll+0xc>)
  4021ca:	6813      	ldr	r3, [r2, #0]
  4021cc:	3301      	adds	r3, #1
  4021ce:	6013      	str	r3, [r2, #0]
  4021d0:	4770      	bx	lr
  4021d2:	bf00      	nop
  4021d4:	2000a95c 	.word	0x2000a95c

004021d8 <xTaskGetTickCount>:
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
  4021d8:	4b01      	ldr	r3, [pc, #4]	; (4021e0 <xTaskGetTickCount+0x8>)
  4021da:	6818      	ldr	r0, [r3, #0]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
}
  4021dc:	4770      	bx	lr
  4021de:	bf00      	nop
  4021e0:	2000a960 	.word	0x2000a960

004021e4 <xTaskIncrementTick>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
  4021e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
  4021e8:	4b3d      	ldr	r3, [pc, #244]	; (4022e0 <xTaskIncrementTick+0xfc>)
  4021ea:	681b      	ldr	r3, [r3, #0]
  4021ec:	2b00      	cmp	r3, #0
  4021ee:	d167      	bne.n	4022c0 <xTaskIncrementTick+0xdc>
	{
		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		++xTickCount;
  4021f0:	4b3c      	ldr	r3, [pc, #240]	; (4022e4 <xTaskIncrementTick+0x100>)
  4021f2:	681a      	ldr	r2, [r3, #0]
  4021f4:	3201      	adds	r2, #1
  4021f6:	601a      	str	r2, [r3, #0]

		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
  4021f8:	681e      	ldr	r6, [r3, #0]

			if( xConstTickCount == ( TickType_t ) 0U )
  4021fa:	b996      	cbnz	r6, 402222 <xTaskIncrementTick+0x3e>
			{
				taskSWITCH_DELAYED_LISTS();
  4021fc:	4b3a      	ldr	r3, [pc, #232]	; (4022e8 <xTaskIncrementTick+0x104>)
  4021fe:	681b      	ldr	r3, [r3, #0]
  402200:	681b      	ldr	r3, [r3, #0]
  402202:	b113      	cbz	r3, 40220a <xTaskIncrementTick+0x26>
  402204:	4b39      	ldr	r3, [pc, #228]	; (4022ec <xTaskIncrementTick+0x108>)
  402206:	4798      	blx	r3
  402208:	e7fe      	b.n	402208 <xTaskIncrementTick+0x24>
  40220a:	4a37      	ldr	r2, [pc, #220]	; (4022e8 <xTaskIncrementTick+0x104>)
  40220c:	6811      	ldr	r1, [r2, #0]
  40220e:	4b38      	ldr	r3, [pc, #224]	; (4022f0 <xTaskIncrementTick+0x10c>)
  402210:	6818      	ldr	r0, [r3, #0]
  402212:	6010      	str	r0, [r2, #0]
  402214:	6019      	str	r1, [r3, #0]
  402216:	4a37      	ldr	r2, [pc, #220]	; (4022f4 <xTaskIncrementTick+0x110>)
  402218:	6813      	ldr	r3, [r2, #0]
  40221a:	3301      	adds	r3, #1
  40221c:	6013      	str	r3, [r2, #0]
  40221e:	4b36      	ldr	r3, [pc, #216]	; (4022f8 <xTaskIncrementTick+0x114>)
  402220:	4798      	blx	r3

			/* See if this tick has made a timeout expire.  Tasks are stored in
			the	queue in the order of their wake time - meaning once one task
			has been found whose block time has not expired there is no need to
			look any further down the list. */
			if( xConstTickCount >= xNextTaskUnblockTime )
  402222:	4b36      	ldr	r3, [pc, #216]	; (4022fc <xTaskIncrementTick+0x118>)
  402224:	681b      	ldr	r3, [r3, #0]
  402226:	429e      	cmp	r6, r3
  402228:	d201      	bcs.n	40222e <xTaskIncrementTick+0x4a>

BaseType_t xTaskIncrementTick( void )
{
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
  40222a:	2400      	movs	r4, #0
  40222c:	e037      	b.n	40229e <xTaskIncrementTick+0xba>
  40222e:	2400      	movs	r4, #0
			look any further down the list. */
			if( xConstTickCount >= xNextTaskUnblockTime )
			{
				for( ;; )
				{
					if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
  402230:	f8df 90b4 	ldr.w	r9, [pc, #180]	; 4022e8 <xTaskIncrementTick+0x104>
						{
							mtCOVERAGE_TEST_MARKER();
						}

						/* It is time to remove the item from the Blocked state. */
						( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
  402234:	f8df 80e4 	ldr.w	r8, [pc, #228]	; 40231c <xTaskIncrementTick+0x138>
							mtCOVERAGE_TEST_MARKER();
						}

						/* Place the unblocked task into the appropriate ready
						list. */
						prvAddTaskToReadyList( pxTCB );
  402238:	4f31      	ldr	r7, [pc, #196]	; (402300 <xTaskIncrementTick+0x11c>)
			look any further down the list. */
			if( xConstTickCount >= xNextTaskUnblockTime )
			{
				for( ;; )
				{
					if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
  40223a:	f8d9 3000 	ldr.w	r3, [r9]
  40223e:	681b      	ldr	r3, [r3, #0]
  402240:	b923      	cbnz	r3, 40224c <xTaskIncrementTick+0x68>
						/* The delayed list is empty.  Set xNextTaskUnblockTime
						to the maximum possible value so it is extremely
						unlikely that the
						if( xTickCount >= xNextTaskUnblockTime ) test will pass
						next time through. */
						xNextTaskUnblockTime = portMAX_DELAY;
  402242:	f04f 32ff 	mov.w	r2, #4294967295
  402246:	4b2d      	ldr	r3, [pc, #180]	; (4022fc <xTaskIncrementTick+0x118>)
  402248:	601a      	str	r2, [r3, #0]
						break;
  40224a:	e028      	b.n	40229e <xTaskIncrementTick+0xba>
					{
						/* The delayed list is not empty, get the value of the
						item at the head of the delayed list.  This is the time
						at which the task at the head of the delayed list must
						be removed from the Blocked state. */
						pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
  40224c:	f8d9 3000 	ldr.w	r3, [r9]
  402250:	68db      	ldr	r3, [r3, #12]
  402252:	68dd      	ldr	r5, [r3, #12]
						xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
  402254:	686b      	ldr	r3, [r5, #4]

						if( xConstTickCount < xItemValue )
  402256:	429e      	cmp	r6, r3
  402258:	d202      	bcs.n	402260 <xTaskIncrementTick+0x7c>
							/* It is not time to unblock this item yet, but the
							item value is the time at which the task at the head
							of the blocked list must be removed from the Blocked
							state -	so record the item value in
							xNextTaskUnblockTime. */
							xNextTaskUnblockTime = xItemValue;
  40225a:	4a28      	ldr	r2, [pc, #160]	; (4022fc <xTaskIncrementTick+0x118>)
  40225c:	6013      	str	r3, [r2, #0]
							break;
  40225e:	e01e      	b.n	40229e <xTaskIncrementTick+0xba>
						{
							mtCOVERAGE_TEST_MARKER();
						}

						/* It is time to remove the item from the Blocked state. */
						( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
  402260:	f105 0a04 	add.w	sl, r5, #4
  402264:	4650      	mov	r0, sl
  402266:	47c0      	blx	r8

						/* Is the task waiting on an event also?  If so remove
						it from the event list. */
						if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
  402268:	6aab      	ldr	r3, [r5, #40]	; 0x28
  40226a:	b113      	cbz	r3, 402272 <xTaskIncrementTick+0x8e>
						{
							( void ) uxListRemove( &( pxTCB->xEventListItem ) );
  40226c:	f105 0018 	add.w	r0, r5, #24
  402270:	47c0      	blx	r8
							mtCOVERAGE_TEST_MARKER();
						}

						/* Place the unblocked task into the appropriate ready
						list. */
						prvAddTaskToReadyList( pxTCB );
  402272:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
  402274:	683b      	ldr	r3, [r7, #0]
  402276:	2201      	movs	r2, #1
  402278:	4082      	lsls	r2, r0
  40227a:	4313      	orrs	r3, r2
  40227c:	603b      	str	r3, [r7, #0]
  40227e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  402282:	4b20      	ldr	r3, [pc, #128]	; (402304 <xTaskIncrementTick+0x120>)
  402284:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  402288:	4651      	mov	r1, sl
  40228a:	4b1f      	ldr	r3, [pc, #124]	; (402308 <xTaskIncrementTick+0x124>)
  40228c:	4798      	blx	r3
						{
							/* Preemption is on, but a context switch should
							only be performed if the unblocked task has a
							priority that is equal to or higher than the
							currently executing task. */
							if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
  40228e:	4b1f      	ldr	r3, [pc, #124]	; (40230c <xTaskIncrementTick+0x128>)
  402290:	681b      	ldr	r3, [r3, #0]
  402292:	6aea      	ldr	r2, [r5, #44]	; 0x2c
  402294:	6adb      	ldr	r3, [r3, #44]	; 0x2c
							{
								xSwitchRequired = pdTRUE;
  402296:	429a      	cmp	r2, r3
  402298:	bf28      	it	cs
  40229a:	2401      	movcs	r4, #1
  40229c:	e7cd      	b.n	40223a <xTaskIncrementTick+0x56>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
  40229e:	4b1b      	ldr	r3, [pc, #108]	; (40230c <xTaskIncrementTick+0x128>)
  4022a0:	681b      	ldr	r3, [r3, #0]
  4022a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  4022a4:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  4022a8:	4a16      	ldr	r2, [pc, #88]	; (402304 <xTaskIncrementTick+0x120>)
  4022aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
			{
				xSwitchRequired = pdTRUE;
  4022ae:	2b02      	cmp	r3, #2
  4022b0:	bf28      	it	cs
  4022b2:	2401      	movcs	r4, #1

		#if ( configUSE_TICK_HOOK == 1 )
		{
			/* Guard against the tick hook being called when the pended tick
			count is being unwound (when the scheduler is being unlocked). */
			if( uxPendedTicks == ( UBaseType_t ) 0U )
  4022b4:	4b16      	ldr	r3, [pc, #88]	; (402310 <xTaskIncrementTick+0x12c>)
  4022b6:	681b      	ldr	r3, [r3, #0]
  4022b8:	b94b      	cbnz	r3, 4022ce <xTaskIncrementTick+0xea>
			{
				vApplicationTickHook();
  4022ba:	4b16      	ldr	r3, [pc, #88]	; (402314 <xTaskIncrementTick+0x130>)
  4022bc:	4798      	blx	r3
  4022be:	e006      	b.n	4022ce <xTaskIncrementTick+0xea>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
  4022c0:	4a13      	ldr	r2, [pc, #76]	; (402310 <xTaskIncrementTick+0x12c>)
  4022c2:	6813      	ldr	r3, [r2, #0]
  4022c4:	3301      	adds	r3, #1
  4022c6:	6013      	str	r3, [r2, #0]

		/* The tick hook gets called at regular intervals, even if the
		scheduler is locked. */
		#if ( configUSE_TICK_HOOK == 1 )
		{
			vApplicationTickHook();
  4022c8:	4b12      	ldr	r3, [pc, #72]	; (402314 <xTaskIncrementTick+0x130>)
  4022ca:	4798      	blx	r3

BaseType_t xTaskIncrementTick( void )
{
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
  4022cc:	2400      	movs	r4, #0
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
  4022ce:	4b12      	ldr	r3, [pc, #72]	; (402318 <xTaskIncrementTick+0x134>)
  4022d0:	681b      	ldr	r3, [r3, #0]
		{
			xSwitchRequired = pdTRUE;
  4022d2:	2b00      	cmp	r3, #0
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
}
  4022d4:	bf0c      	ite	eq
  4022d6:	4620      	moveq	r0, r4
  4022d8:	2001      	movne	r0, #1
  4022da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4022de:	bf00      	nop
  4022e0:	2000a95c 	.word	0x2000a95c
  4022e4:	2000a960 	.word	0x2000a960
  4022e8:	2000a8b8 	.word	0x2000a8b8
  4022ec:	00401419 	.word	0x00401419
  4022f0:	2000a964 	.word	0x2000a964
  4022f4:	2000a8b4 	.word	0x2000a8b4
  4022f8:	00401ed1 	.word	0x00401ed1
  4022fc:	2000a958 	.word	0x2000a958
  402300:	2000a9ac 	.word	0x2000a9ac
  402304:	2000a8dc 	.word	0x2000a8dc
  402308:	0040132d 	.word	0x0040132d
  40230c:	2000a954 	.word	0x2000a954
  402310:	2000a8d8 	.word	0x2000a8d8
  402314:	00402dc9 	.word	0x00402dc9
  402318:	2000a9b0 	.word	0x2000a9b0
  40231c:	00401379 	.word	0x00401379

00402320 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
  402320:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
TCB_t *pxTCB;
BaseType_t xAlreadyYielded = pdFALSE;

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
  402324:	4b2f      	ldr	r3, [pc, #188]	; (4023e4 <xTaskResumeAll+0xc4>)
  402326:	681b      	ldr	r3, [r3, #0]
  402328:	b913      	cbnz	r3, 402330 <xTaskResumeAll+0x10>
  40232a:	4b2f      	ldr	r3, [pc, #188]	; (4023e8 <xTaskResumeAll+0xc8>)
  40232c:	4798      	blx	r3
  40232e:	e7fe      	b.n	40232e <xTaskResumeAll+0xe>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
  402330:	4b2e      	ldr	r3, [pc, #184]	; (4023ec <xTaskResumeAll+0xcc>)
  402332:	4798      	blx	r3
	{
		--uxSchedulerSuspended;
  402334:	4b2b      	ldr	r3, [pc, #172]	; (4023e4 <xTaskResumeAll+0xc4>)
  402336:	681a      	ldr	r2, [r3, #0]
  402338:	3a01      	subs	r2, #1
  40233a:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
  40233c:	681b      	ldr	r3, [r3, #0]
  40233e:	2b00      	cmp	r3, #0
  402340:	d147      	bne.n	4023d2 <xTaskResumeAll+0xb2>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
  402342:	4b2b      	ldr	r3, [pc, #172]	; (4023f0 <xTaskResumeAll+0xd0>)
  402344:	681b      	ldr	r3, [r3, #0]
  402346:	bb0b      	cbnz	r3, 40238c <xTaskResumeAll+0x6c>
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
TCB_t *pxTCB;
BaseType_t xAlreadyYielded = pdFALSE;
  402348:	2400      	movs	r4, #0
  40234a:	e045      	b.n	4023d8 <xTaskResumeAll+0xb8>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
  40234c:	68fb      	ldr	r3, [r7, #12]
  40234e:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
  402350:	f104 0018 	add.w	r0, r4, #24
  402354:	47b0      	blx	r6
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
  402356:	f104 0804 	add.w	r8, r4, #4
  40235a:	4640      	mov	r0, r8
  40235c:	47b0      	blx	r6
					prvAddTaskToReadyList( pxTCB );
  40235e:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  402360:	682b      	ldr	r3, [r5, #0]
  402362:	2201      	movs	r2, #1
  402364:	4082      	lsls	r2, r0
  402366:	4313      	orrs	r3, r2
  402368:	602b      	str	r3, [r5, #0]
  40236a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  40236e:	eb09 0080 	add.w	r0, r9, r0, lsl #2
  402372:	4641      	mov	r1, r8
  402374:	4b1f      	ldr	r3, [pc, #124]	; (4023f4 <xTaskResumeAll+0xd4>)
  402376:	4798      	blx	r3

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
  402378:	4b1f      	ldr	r3, [pc, #124]	; (4023f8 <xTaskResumeAll+0xd8>)
  40237a:	681b      	ldr	r3, [r3, #0]
  40237c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  40237e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  402380:	429a      	cmp	r2, r3
  402382:	d308      	bcc.n	402396 <xTaskResumeAll+0x76>
					{
						xYieldPending = pdTRUE;
  402384:	2201      	movs	r2, #1
  402386:	4b1d      	ldr	r3, [pc, #116]	; (4023fc <xTaskResumeAll+0xdc>)
  402388:	601a      	str	r2, [r3, #0]
  40238a:	e004      	b.n	402396 <xTaskResumeAll+0x76>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
  40238c:	4f1c      	ldr	r7, [pc, #112]	; (402400 <xTaskResumeAll+0xe0>)
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
  40238e:	4e1d      	ldr	r6, [pc, #116]	; (402404 <xTaskResumeAll+0xe4>)
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
					prvAddTaskToReadyList( pxTCB );
  402390:	4d1d      	ldr	r5, [pc, #116]	; (402408 <xTaskResumeAll+0xe8>)
  402392:	f8df 9088 	ldr.w	r9, [pc, #136]	; 40241c <xTaskResumeAll+0xfc>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
  402396:	683b      	ldr	r3, [r7, #0]
  402398:	2b00      	cmp	r3, #0
  40239a:	d1d7      	bne.n	40234c <xTaskResumeAll+0x2c>

				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				if( uxPendedTicks > ( UBaseType_t ) 0U )
  40239c:	4b1b      	ldr	r3, [pc, #108]	; (40240c <xTaskResumeAll+0xec>)
  40239e:	681b      	ldr	r3, [r3, #0]
  4023a0:	b17b      	cbz	r3, 4023c2 <xTaskResumeAll+0xa2>
				{
					while( uxPendedTicks > ( UBaseType_t ) 0U )
  4023a2:	4b1a      	ldr	r3, [pc, #104]	; (40240c <xTaskResumeAll+0xec>)
  4023a4:	681b      	ldr	r3, [r3, #0]
  4023a6:	b163      	cbz	r3, 4023c2 <xTaskResumeAll+0xa2>
					{
						if( xTaskIncrementTick() != pdFALSE )
  4023a8:	4e19      	ldr	r6, [pc, #100]	; (402410 <xTaskResumeAll+0xf0>)
						{
							xYieldPending = pdTRUE;
  4023aa:	4d14      	ldr	r5, [pc, #80]	; (4023fc <xTaskResumeAll+0xdc>)
						}
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
						--uxPendedTicks;
  4023ac:	4c17      	ldr	r4, [pc, #92]	; (40240c <xTaskResumeAll+0xec>)
				time. */
				if( uxPendedTicks > ( UBaseType_t ) 0U )
				{
					while( uxPendedTicks > ( UBaseType_t ) 0U )
					{
						if( xTaskIncrementTick() != pdFALSE )
  4023ae:	47b0      	blx	r6
  4023b0:	b108      	cbz	r0, 4023b6 <xTaskResumeAll+0x96>
						{
							xYieldPending = pdTRUE;
  4023b2:	2301      	movs	r3, #1
  4023b4:	602b      	str	r3, [r5, #0]
						}
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
						--uxPendedTicks;
  4023b6:	6823      	ldr	r3, [r4, #0]
  4023b8:	3b01      	subs	r3, #1
  4023ba:	6023      	str	r3, [r4, #0]
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				if( uxPendedTicks > ( UBaseType_t ) 0U )
				{
					while( uxPendedTicks > ( UBaseType_t ) 0U )
  4023bc:	6823      	ldr	r3, [r4, #0]
  4023be:	2b00      	cmp	r3, #0
  4023c0:	d1f5      	bne.n	4023ae <xTaskResumeAll+0x8e>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				if( xYieldPending == pdTRUE )
  4023c2:	4b0e      	ldr	r3, [pc, #56]	; (4023fc <xTaskResumeAll+0xdc>)
  4023c4:	681b      	ldr	r3, [r3, #0]
  4023c6:	2b01      	cmp	r3, #1
  4023c8:	d105      	bne.n	4023d6 <xTaskResumeAll+0xb6>
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
  4023ca:	4b12      	ldr	r3, [pc, #72]	; (402414 <xTaskResumeAll+0xf4>)
  4023cc:	4798      	blx	r3

				if( xYieldPending == pdTRUE )
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
  4023ce:	2401      	movs	r4, #1
  4023d0:	e002      	b.n	4023d8 <xTaskResumeAll+0xb8>
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
TCB_t *pxTCB;
BaseType_t xAlreadyYielded = pdFALSE;
  4023d2:	2400      	movs	r4, #0
  4023d4:	e000      	b.n	4023d8 <xTaskResumeAll+0xb8>
  4023d6:	2400      	movs	r4, #0
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
  4023d8:	4b0f      	ldr	r3, [pc, #60]	; (402418 <xTaskResumeAll+0xf8>)
  4023da:	4798      	blx	r3

	return xAlreadyYielded;
}
  4023dc:	4620      	mov	r0, r4
  4023de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  4023e2:	bf00      	nop
  4023e4:	2000a95c 	.word	0x2000a95c
  4023e8:	00401419 	.word	0x00401419
  4023ec:	00401449 	.word	0x00401449
  4023f0:	2000a980 	.word	0x2000a980
  4023f4:	0040132d 	.word	0x0040132d
  4023f8:	2000a954 	.word	0x2000a954
  4023fc:	2000a9b0 	.word	0x2000a9b0
  402400:	2000a968 	.word	0x2000a968
  402404:	00401379 	.word	0x00401379
  402408:	2000a9ac 	.word	0x2000a9ac
  40240c:	2000a8d8 	.word	0x2000a8d8
  402410:	004021e5 	.word	0x004021e5
  402414:	00401401 	.word	0x00401401
  402418:	00401489 	.word	0x00401489
  40241c:	2000a8dc 	.word	0x2000a8dc

00402420 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
  402420:	b510      	push	{r4, lr}
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded = pdFALSE;


		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
  402422:	b308      	cbz	r0, 402468 <vTaskDelay+0x48>
  402424:	4604      	mov	r4, r0
		{
			configASSERT( uxSchedulerSuspended == 0 );
  402426:	4b12      	ldr	r3, [pc, #72]	; (402470 <vTaskDelay+0x50>)
  402428:	681b      	ldr	r3, [r3, #0]
  40242a:	b113      	cbz	r3, 402432 <vTaskDelay+0x12>
  40242c:	4b11      	ldr	r3, [pc, #68]	; (402474 <vTaskDelay+0x54>)
  40242e:	4798      	blx	r3
  402430:	e7fe      	b.n	402430 <vTaskDelay+0x10>
			vTaskSuspendAll();
  402432:	4b11      	ldr	r3, [pc, #68]	; (402478 <vTaskDelay+0x58>)
  402434:	4798      	blx	r3
				This task cannot be in an event list as it is the currently
				executing task. */

				/* Calculate the time to wake - this may overflow but this is
				not a problem. */
				xTimeToWake = xTickCount + xTicksToDelay;
  402436:	4b11      	ldr	r3, [pc, #68]	; (40247c <vTaskDelay+0x5c>)
  402438:	681b      	ldr	r3, [r3, #0]
  40243a:	441c      	add	r4, r3

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
  40243c:	4b10      	ldr	r3, [pc, #64]	; (402480 <vTaskDelay+0x60>)
  40243e:	6818      	ldr	r0, [r3, #0]
  402440:	3004      	adds	r0, #4
  402442:	4b10      	ldr	r3, [pc, #64]	; (402484 <vTaskDelay+0x64>)
  402444:	4798      	blx	r3
  402446:	b948      	cbnz	r0, 40245c <vTaskDelay+0x3c>
				{
					/* The current task must be in a ready list, so there is
					no need to check, and the port reset macro can be called
					directly. */
					portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
  402448:	4b0d      	ldr	r3, [pc, #52]	; (402480 <vTaskDelay+0x60>)
  40244a:	681a      	ldr	r2, [r3, #0]
  40244c:	490e      	ldr	r1, [pc, #56]	; (402488 <vTaskDelay+0x68>)
  40244e:	680b      	ldr	r3, [r1, #0]
  402450:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
  402452:	2201      	movs	r2, #1
  402454:	4082      	lsls	r2, r0
  402456:	ea23 0302 	bic.w	r3, r3, r2
  40245a:	600b      	str	r3, [r1, #0]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				prvAddCurrentTaskToDelayedList( xTimeToWake );
  40245c:	4620      	mov	r0, r4
  40245e:	4b0b      	ldr	r3, [pc, #44]	; (40248c <vTaskDelay+0x6c>)
  402460:	4798      	blx	r3
			}
			xAlreadyYielded = xTaskResumeAll();
  402462:	4b0b      	ldr	r3, [pc, #44]	; (402490 <vTaskDelay+0x70>)
  402464:	4798      	blx	r3
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
  402466:	b908      	cbnz	r0, 40246c <vTaskDelay+0x4c>
		{
			portYIELD_WITHIN_API();
  402468:	4b0a      	ldr	r3, [pc, #40]	; (402494 <vTaskDelay+0x74>)
  40246a:	4798      	blx	r3
  40246c:	bd10      	pop	{r4, pc}
  40246e:	bf00      	nop
  402470:	2000a95c 	.word	0x2000a95c
  402474:	00401419 	.word	0x00401419
  402478:	004021c9 	.word	0x004021c9
  40247c:	2000a960 	.word	0x2000a960
  402480:	2000a954 	.word	0x2000a954
  402484:	00401379 	.word	0x00401379
  402488:	2000a9ac 	.word	0x2000a9ac
  40248c:	00401efd 	.word	0x00401efd
  402490:	00402321 	.word	0x00402321
  402494:	00401401 	.word	0x00401401

00402498 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
  402498:	b580      	push	{r7, lr}
	{
		BaseType_t xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxTasksDeleted > ( UBaseType_t ) 0U )
  40249a:	4d16      	ldr	r5, [pc, #88]	; (4024f4 <prvIdleTask+0x5c>)
		{
			vTaskSuspendAll();
  40249c:	f8df 807c 	ldr.w	r8, [pc, #124]	; 40251c <prvIdleTask+0x84>
			{
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
  4024a0:	4e15      	ldr	r6, [pc, #84]	; (4024f8 <prvIdleTask+0x60>)
			}
			( void ) xTaskResumeAll();
  4024a2:	4f16      	ldr	r7, [pc, #88]	; (4024fc <prvIdleTask+0x64>)
  4024a4:	e019      	b.n	4024da <prvIdleTask+0x42>

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxTasksDeleted > ( UBaseType_t ) 0U )
		{
			vTaskSuspendAll();
  4024a6:	47c0      	blx	r8
			{
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
  4024a8:	6834      	ldr	r4, [r6, #0]
			}
			( void ) xTaskResumeAll();
  4024aa:	47b8      	blx	r7

			if( xListIsEmpty == pdFALSE )
  4024ac:	b1ac      	cbz	r4, 4024da <prvIdleTask+0x42>
			{
				TCB_t *pxTCB;

				taskENTER_CRITICAL();
  4024ae:	4b14      	ldr	r3, [pc, #80]	; (402500 <prvIdleTask+0x68>)
  4024b0:	4798      	blx	r3
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
  4024b2:	68f3      	ldr	r3, [r6, #12]
  4024b4:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
  4024b6:	1d20      	adds	r0, r4, #4
  4024b8:	4b12      	ldr	r3, [pc, #72]	; (402504 <prvIdleTask+0x6c>)
  4024ba:	4798      	blx	r3
					--uxCurrentNumberOfTasks;
  4024bc:	4a12      	ldr	r2, [pc, #72]	; (402508 <prvIdleTask+0x70>)
  4024be:	6813      	ldr	r3, [r2, #0]
  4024c0:	3b01      	subs	r3, #1
  4024c2:	6013      	str	r3, [r2, #0]
					--uxTasksDeleted;
  4024c4:	682b      	ldr	r3, [r5, #0]
  4024c6:	3b01      	subs	r3, #1
  4024c8:	602b      	str	r3, [r5, #0]
				}
				taskEXIT_CRITICAL();
  4024ca:	4b10      	ldr	r3, [pc, #64]	; (40250c <prvIdleTask+0x74>)
  4024cc:	4798      	blx	r3
				vPortFreeAligned( pxTCB->pxStack );
			}
		}
		#else
		{
			vPortFreeAligned( pxTCB->pxStack );
  4024ce:	6b20      	ldr	r0, [r4, #48]	; 0x30
  4024d0:	f8df 904c 	ldr.w	r9, [pc, #76]	; 402520 <prvIdleTask+0x88>
  4024d4:	47c8      	blx	r9
		}
		#endif

		vPortFree( pxTCB );
  4024d6:	4620      	mov	r0, r4
  4024d8:	47c8      	blx	r9
	{
		BaseType_t xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxTasksDeleted > ( UBaseType_t ) 0U )
  4024da:	682b      	ldr	r3, [r5, #0]
  4024dc:	2b00      	cmp	r3, #0
  4024de:	d1e2      	bne.n	4024a6 <prvIdleTask+0xe>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
  4024e0:	4b0b      	ldr	r3, [pc, #44]	; (402510 <prvIdleTask+0x78>)
  4024e2:	681b      	ldr	r3, [r3, #0]
  4024e4:	2b01      	cmp	r3, #1
  4024e6:	d901      	bls.n	4024ec <prvIdleTask+0x54>
			{
				taskYIELD();
  4024e8:	4b0a      	ldr	r3, [pc, #40]	; (402514 <prvIdleTask+0x7c>)
  4024ea:	4798      	blx	r3
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
  4024ec:	4b0a      	ldr	r3, [pc, #40]	; (402518 <prvIdleTask+0x80>)
  4024ee:	4798      	blx	r3
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_TICKLESS_IDLE */
	}
  4024f0:	e7f3      	b.n	4024da <prvIdleTask+0x42>
  4024f2:	bf00      	nop
  4024f4:	2000a8c0 	.word	0x2000a8c0
  4024f8:	2000a940 	.word	0x2000a940
  4024fc:	00402321 	.word	0x00402321
  402500:	00401449 	.word	0x00401449
  402504:	00401379 	.word	0x00401379
  402508:	2000a980 	.word	0x2000a980
  40250c:	00401489 	.word	0x00401489
  402510:	2000a8dc 	.word	0x2000a8dc
  402514:	00401401 	.word	0x00401401
  402518:	00402dc5 	.word	0x00402dc5
  40251c:	004021c9 	.word	0x004021c9
  402520:	004017dd 	.word	0x004017dd

00402524 <vTaskSwitchContext>:
#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
  402524:	4b28      	ldr	r3, [pc, #160]	; (4025c8 <vTaskSwitchContext+0xa4>)
  402526:	681b      	ldr	r3, [r3, #0]
  402528:	b11b      	cbz	r3, 402532 <vTaskSwitchContext+0xe>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
  40252a:	2201      	movs	r2, #1
  40252c:	4b27      	ldr	r3, [pc, #156]	; (4025cc <vTaskSwitchContext+0xa8>)
  40252e:	601a      	str	r2, [r3, #0]
  402530:	4770      	bx	lr

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
  402532:	b510      	push	{r4, lr}
		switch. */
		xYieldPending = pdTRUE;
	}
	else
	{
		xYieldPending = pdFALSE;
  402534:	2200      	movs	r2, #0
  402536:	4b25      	ldr	r3, [pc, #148]	; (4025cc <vTaskSwitchContext+0xa8>)
  402538:	601a      	str	r2, [r3, #0]
				ulTaskSwitchedInTime = ulTotalRunTime;
		}
		#endif /* configGENERATE_RUN_TIME_STATS */

		/* Check for stack overflow, if configured. */
		taskCHECK_FOR_STACK_OVERFLOW();
  40253a:	4b25      	ldr	r3, [pc, #148]	; (4025d0 <vTaskSwitchContext+0xac>)
  40253c:	681b      	ldr	r3, [r3, #0]
  40253e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  402540:	681a      	ldr	r2, [r3, #0]
  402542:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
  402546:	d10b      	bne.n	402560 <vTaskSwitchContext+0x3c>
  402548:	685a      	ldr	r2, [r3, #4]
  40254a:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
  40254e:	d107      	bne.n	402560 <vTaskSwitchContext+0x3c>
  402550:	689a      	ldr	r2, [r3, #8]
  402552:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
  402556:	d103      	bne.n	402560 <vTaskSwitchContext+0x3c>
  402558:	68db      	ldr	r3, [r3, #12]
  40255a:	f1b3 3fa5 	cmp.w	r3, #2779096485	; 0xa5a5a5a5
  40255e:	d005      	beq.n	40256c <vTaskSwitchContext+0x48>
  402560:	4b1b      	ldr	r3, [pc, #108]	; (4025d0 <vTaskSwitchContext+0xac>)
  402562:	6818      	ldr	r0, [r3, #0]
  402564:	6819      	ldr	r1, [r3, #0]
  402566:	3134      	adds	r1, #52	; 0x34
  402568:	4b1a      	ldr	r3, [pc, #104]	; (4025d4 <vTaskSwitchContext+0xb0>)
  40256a:	4798      	blx	r3

		/* Select a new task to run using either the generic C or port
		optimised asm code. */
		taskSELECT_HIGHEST_PRIORITY_TASK();
  40256c:	4b1a      	ldr	r3, [pc, #104]	; (4025d8 <vTaskSwitchContext+0xb4>)
  40256e:	681b      	ldr	r3, [r3, #0]
	/* Generic helper function. */
	__attribute__( ( always_inline ) ) static inline uint8_t ucPortCountLeadingZeros( uint32_t ulBitmap )
	{
	uint8_t ucReturn;

		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) );
  402570:	fab3 f383 	clz	r3, r3
  402574:	b2db      	uxtb	r3, r3
  402576:	f1c3 031f 	rsb	r3, r3, #31
  40257a:	eb03 0183 	add.w	r1, r3, r3, lsl #2
  40257e:	4a17      	ldr	r2, [pc, #92]	; (4025dc <vTaskSwitchContext+0xb8>)
  402580:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
  402584:	b912      	cbnz	r2, 40258c <vTaskSwitchContext+0x68>
  402586:	4b16      	ldr	r3, [pc, #88]	; (4025e0 <vTaskSwitchContext+0xbc>)
  402588:	4798      	blx	r3
  40258a:	e7fe      	b.n	40258a <vTaskSwitchContext+0x66>
  40258c:	4a13      	ldr	r2, [pc, #76]	; (4025dc <vTaskSwitchContext+0xb8>)
  40258e:	0099      	lsls	r1, r3, #2
  402590:	18c8      	adds	r0, r1, r3
  402592:	eb02 0080 	add.w	r0, r2, r0, lsl #2
  402596:	6844      	ldr	r4, [r0, #4]
  402598:	6864      	ldr	r4, [r4, #4]
  40259a:	6044      	str	r4, [r0, #4]
  40259c:	4602      	mov	r2, r0
  40259e:	3208      	adds	r2, #8
  4025a0:	4294      	cmp	r4, r2
  4025a2:	d106      	bne.n	4025b2 <vTaskSwitchContext+0x8e>
  4025a4:	6860      	ldr	r0, [r4, #4]
  4025a6:	eb03 0183 	add.w	r1, r3, r3, lsl #2
  4025aa:	4a0c      	ldr	r2, [pc, #48]	; (4025dc <vTaskSwitchContext+0xb8>)
  4025ac:	eb02 0281 	add.w	r2, r2, r1, lsl #2
  4025b0:	6050      	str	r0, [r2, #4]
  4025b2:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  4025b6:	4a09      	ldr	r2, [pc, #36]	; (4025dc <vTaskSwitchContext+0xb8>)
  4025b8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
  4025bc:	685b      	ldr	r3, [r3, #4]
  4025be:	68da      	ldr	r2, [r3, #12]
  4025c0:	4b03      	ldr	r3, [pc, #12]	; (4025d0 <vTaskSwitchContext+0xac>)
  4025c2:	601a      	str	r2, [r3, #0]
  4025c4:	bd10      	pop	{r4, pc}
  4025c6:	bf00      	nop
  4025c8:	2000a95c 	.word	0x2000a95c
  4025cc:	2000a9b0 	.word	0x2000a9b0
  4025d0:	2000a954 	.word	0x2000a954
  4025d4:	00402db5 	.word	0x00402db5
  4025d8:	2000a9ac 	.word	0x2000a9ac
  4025dc:	2000a8dc 	.word	0x2000a8dc
  4025e0:	00401419 	.word	0x00401419

004025e4 <vTaskPlaceOnEventList>:
	}
}
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
  4025e4:	b538      	push	{r3, r4, r5, lr}
TickType_t xTimeToWake;

	configASSERT( pxEventList );
  4025e6:	b910      	cbnz	r0, 4025ee <vTaskPlaceOnEventList+0xa>
  4025e8:	4b13      	ldr	r3, [pc, #76]	; (402638 <vTaskPlaceOnEventList+0x54>)
  4025ea:	4798      	blx	r3
  4025ec:	e7fe      	b.n	4025ec <vTaskPlaceOnEventList+0x8>
  4025ee:	460c      	mov	r4, r1

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
  4025f0:	4d12      	ldr	r5, [pc, #72]	; (40263c <vTaskPlaceOnEventList+0x58>)
  4025f2:	6829      	ldr	r1, [r5, #0]
  4025f4:	3118      	adds	r1, #24
  4025f6:	4b12      	ldr	r3, [pc, #72]	; (402640 <vTaskPlaceOnEventList+0x5c>)
  4025f8:	4798      	blx	r3

	/* The task must be removed from from the ready list before it is added to
	the blocked list as the same list item is used for both lists.  Exclusive
	access to the ready lists guaranteed because the scheduler is locked. */
	if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
  4025fa:	6828      	ldr	r0, [r5, #0]
  4025fc:	3004      	adds	r0, #4
  4025fe:	4b11      	ldr	r3, [pc, #68]	; (402644 <vTaskPlaceOnEventList+0x60>)
  402600:	4798      	blx	r3
  402602:	b940      	cbnz	r0, 402616 <vTaskPlaceOnEventList+0x32>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
  402604:	682a      	ldr	r2, [r5, #0]
  402606:	4910      	ldr	r1, [pc, #64]	; (402648 <vTaskPlaceOnEventList+0x64>)
  402608:	680b      	ldr	r3, [r1, #0]
  40260a:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
  40260c:	2201      	movs	r2, #1
  40260e:	4082      	lsls	r2, r0
  402610:	ea23 0302 	bic.w	r3, r3, r2
  402614:	600b      	str	r3, [r1, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( xTicksToWait == portMAX_DELAY )
  402616:	f1b4 3fff 	cmp.w	r4, #4294967295
  40261a:	d106      	bne.n	40262a <vTaskPlaceOnEventList+0x46>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure the task is not woken by a timing event.  It will
			block indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xGenericListItem ) );
  40261c:	4b07      	ldr	r3, [pc, #28]	; (40263c <vTaskPlaceOnEventList+0x58>)
  40261e:	6819      	ldr	r1, [r3, #0]
  402620:	480a      	ldr	r0, [pc, #40]	; (40264c <vTaskPlaceOnEventList+0x68>)
  402622:	3104      	adds	r1, #4
  402624:	4b0a      	ldr	r3, [pc, #40]	; (402650 <vTaskPlaceOnEventList+0x6c>)
  402626:	4798      	blx	r3
  402628:	bd38      	pop	{r3, r4, r5, pc}
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			scheduler will handle it. */
			xTimeToWake = xTickCount + xTicksToWait;
  40262a:	4b0a      	ldr	r3, [pc, #40]	; (402654 <vTaskPlaceOnEventList+0x70>)
  40262c:	6818      	ldr	r0, [r3, #0]
			prvAddCurrentTaskToDelayedList( xTimeToWake );
  40262e:	4420      	add	r0, r4
  402630:	4b09      	ldr	r3, [pc, #36]	; (402658 <vTaskPlaceOnEventList+0x74>)
  402632:	4798      	blx	r3
  402634:	bd38      	pop	{r3, r4, r5, pc}
  402636:	bf00      	nop
  402638:	00401419 	.word	0x00401419
  40263c:	2000a954 	.word	0x2000a954
  402640:	00401345 	.word	0x00401345
  402644:	00401379 	.word	0x00401379
  402648:	2000a9ac 	.word	0x2000a9ac
  40264c:	2000a998 	.word	0x2000a998
  402650:	0040132d 	.word	0x0040132d
  402654:	2000a960 	.word	0x2000a960
  402658:	00401efd 	.word	0x00401efd

0040265c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if configUSE_TIMERS == 1

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, const TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
  40265c:	b570      	push	{r4, r5, r6, lr}
	TickType_t xTimeToWake;

		configASSERT( pxEventList );
  40265e:	b910      	cbnz	r0, 402666 <vTaskPlaceOnEventListRestricted+0xa>
  402660:	4b13      	ldr	r3, [pc, #76]	; (4026b0 <vTaskPlaceOnEventListRestricted+0x54>)
  402662:	4798      	blx	r3
  402664:	e7fe      	b.n	402664 <vTaskPlaceOnEventListRestricted+0x8>
  402666:	460d      	mov	r5, r1
  402668:	4616      	mov	r6, r2

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
  40266a:	4c12      	ldr	r4, [pc, #72]	; (4026b4 <vTaskPlaceOnEventListRestricted+0x58>)
  40266c:	6821      	ldr	r1, [r4, #0]
  40266e:	3118      	adds	r1, #24
  402670:	4b11      	ldr	r3, [pc, #68]	; (4026b8 <vTaskPlaceOnEventListRestricted+0x5c>)
  402672:	4798      	blx	r3

		/* We must remove this task from the ready list before adding it to the
		blocked list as the same list item is used for both lists.  This
		function is called with the scheduler locked so interrupts will not
		access the lists at the same time. */
		if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
  402674:	6820      	ldr	r0, [r4, #0]
  402676:	3004      	adds	r0, #4
  402678:	4b10      	ldr	r3, [pc, #64]	; (4026bc <vTaskPlaceOnEventListRestricted+0x60>)
  40267a:	4798      	blx	r3
  40267c:	b940      	cbnz	r0, 402690 <vTaskPlaceOnEventListRestricted+0x34>
		{
			/* The current task must be in a ready list, so there is no need to
			check, and the port reset macro can be called directly. */
			portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
  40267e:	6822      	ldr	r2, [r4, #0]
  402680:	490f      	ldr	r1, [pc, #60]	; (4026c0 <vTaskPlaceOnEventListRestricted+0x64>)
  402682:	680b      	ldr	r3, [r1, #0]
  402684:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
  402686:	2201      	movs	r2, #1
  402688:	4082      	lsls	r2, r0
  40268a:	ea23 0302 	bic.w	r3, r3, r2
  40268e:	600b      	str	r3, [r1, #0]
		Ready state when the event it is waiting indefinitely for occurs).
		Blocking indefinitely is useful when using tickless idle mode as when
		all tasks are blocked indefinitely all timers can be turned off. */
		#if( INCLUDE_vTaskSuspend == 1 )
		{
			if( xWaitIndefinitely == pdTRUE )
  402690:	2e01      	cmp	r6, #1
  402692:	d106      	bne.n	4026a2 <vTaskPlaceOnEventListRestricted+0x46>
			{
				/* Add the task to the suspended task list instead of a delayed
				task list to ensure the task is not woken by a timing event.  It
				will block indefinitely. */
				vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xGenericListItem ) );
  402694:	4b07      	ldr	r3, [pc, #28]	; (4026b4 <vTaskPlaceOnEventListRestricted+0x58>)
  402696:	6819      	ldr	r1, [r3, #0]
  402698:	480a      	ldr	r0, [pc, #40]	; (4026c4 <vTaskPlaceOnEventListRestricted+0x68>)
  40269a:	3104      	adds	r1, #4
  40269c:	4b06      	ldr	r3, [pc, #24]	; (4026b8 <vTaskPlaceOnEventListRestricted+0x5c>)
  40269e:	4798      	blx	r3
  4026a0:	bd70      	pop	{r4, r5, r6, pc}
			else
			{
				/* Calculate the time at which the task should be woken if the
				event does not occur.  This may overflow but this doesn't
				matter. */
				xTimeToWake = xTickCount + xTicksToWait;
  4026a2:	4b09      	ldr	r3, [pc, #36]	; (4026c8 <vTaskPlaceOnEventListRestricted+0x6c>)
  4026a4:	6818      	ldr	r0, [r3, #0]
				traceTASK_DELAY_UNTIL();
				prvAddCurrentTaskToDelayedList( xTimeToWake );
  4026a6:	4428      	add	r0, r5
  4026a8:	4b08      	ldr	r3, [pc, #32]	; (4026cc <vTaskPlaceOnEventListRestricted+0x70>)
  4026aa:	4798      	blx	r3
  4026ac:	bd70      	pop	{r4, r5, r6, pc}
  4026ae:	bf00      	nop
  4026b0:	00401419 	.word	0x00401419
  4026b4:	2000a954 	.word	0x2000a954
  4026b8:	0040132d 	.word	0x0040132d
  4026bc:	00401379 	.word	0x00401379
  4026c0:	2000a9ac 	.word	0x2000a9ac
  4026c4:	2000a998 	.word	0x2000a998
  4026c8:	2000a960 	.word	0x2000a960
  4026cc:	00401efd 	.word	0x00401efd

004026d0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
  4026d0:	b538      	push	{r3, r4, r5, lr}
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
  4026d2:	68c3      	ldr	r3, [r0, #12]
  4026d4:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
  4026d6:	b914      	cbnz	r4, 4026de <xTaskRemoveFromEventList+0xe>
  4026d8:	4b16      	ldr	r3, [pc, #88]	; (402734 <xTaskRemoveFromEventList+0x64>)
  4026da:	4798      	blx	r3
  4026dc:	e7fe      	b.n	4026dc <xTaskRemoveFromEventList+0xc>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
  4026de:	f104 0518 	add.w	r5, r4, #24
  4026e2:	4628      	mov	r0, r5
  4026e4:	4b14      	ldr	r3, [pc, #80]	; (402738 <xTaskRemoveFromEventList+0x68>)
  4026e6:	4798      	blx	r3

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
  4026e8:	4b14      	ldr	r3, [pc, #80]	; (40273c <xTaskRemoveFromEventList+0x6c>)
  4026ea:	681b      	ldr	r3, [r3, #0]
  4026ec:	b99b      	cbnz	r3, 402716 <xTaskRemoveFromEventList+0x46>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xGenericListItem ) );
  4026ee:	1d25      	adds	r5, r4, #4
  4026f0:	4628      	mov	r0, r5
  4026f2:	4b11      	ldr	r3, [pc, #68]	; (402738 <xTaskRemoveFromEventList+0x68>)
  4026f4:	4798      	blx	r3
		prvAddTaskToReadyList( pxUnblockedTCB );
  4026f6:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  4026f8:	4911      	ldr	r1, [pc, #68]	; (402740 <xTaskRemoveFromEventList+0x70>)
  4026fa:	680b      	ldr	r3, [r1, #0]
  4026fc:	2201      	movs	r2, #1
  4026fe:	4082      	lsls	r2, r0
  402700:	4313      	orrs	r3, r2
  402702:	600b      	str	r3, [r1, #0]
  402704:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  402708:	4b0e      	ldr	r3, [pc, #56]	; (402744 <xTaskRemoveFromEventList+0x74>)
  40270a:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  40270e:	4629      	mov	r1, r5
  402710:	4b0d      	ldr	r3, [pc, #52]	; (402748 <xTaskRemoveFromEventList+0x78>)
  402712:	4798      	blx	r3
  402714:	e003      	b.n	40271e <xTaskRemoveFromEventList+0x4e>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
  402716:	480d      	ldr	r0, [pc, #52]	; (40274c <xTaskRemoveFromEventList+0x7c>)
  402718:	4629      	mov	r1, r5
  40271a:	4b0b      	ldr	r3, [pc, #44]	; (402748 <xTaskRemoveFromEventList+0x78>)
  40271c:	4798      	blx	r3
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
  40271e:	4b0c      	ldr	r3, [pc, #48]	; (402750 <xTaskRemoveFromEventList+0x80>)
  402720:	681b      	ldr	r3, [r3, #0]
  402722:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  402724:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  402726:	429a      	cmp	r2, r3
		it should force a context switch now. */
		xReturn = pdTRUE;

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
  402728:	bf83      	ittte	hi
  40272a:	2001      	movhi	r0, #1
  40272c:	4b09      	ldrhi	r3, [pc, #36]	; (402754 <xTaskRemoveFromEventList+0x84>)
  40272e:	6018      	strhi	r0, [r3, #0]
	}
	else
	{
		xReturn = pdFALSE;
  402730:	2000      	movls	r0, #0
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
}
  402732:	bd38      	pop	{r3, r4, r5, pc}
  402734:	00401419 	.word	0x00401419
  402738:	00401379 	.word	0x00401379
  40273c:	2000a95c 	.word	0x2000a95c
  402740:	2000a9ac 	.word	0x2000a9ac
  402744:	2000a8dc 	.word	0x2000a8dc
  402748:	0040132d 	.word	0x0040132d
  40274c:	2000a968 	.word	0x2000a968
  402750:	2000a954 	.word	0x2000a954
  402754:	2000a9b0 	.word	0x2000a9b0

00402758 <vTaskSetTimeOutState>:
	return xReturn;
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
  402758:	b508      	push	{r3, lr}
	configASSERT( pxTimeOut );
  40275a:	b910      	cbnz	r0, 402762 <vTaskSetTimeOutState+0xa>
  40275c:	4b04      	ldr	r3, [pc, #16]	; (402770 <vTaskSetTimeOutState+0x18>)
  40275e:	4798      	blx	r3
  402760:	e7fe      	b.n	402760 <vTaskSetTimeOutState+0x8>
	pxTimeOut->xOverflowCount = xNumOfOverflows;
  402762:	4a04      	ldr	r2, [pc, #16]	; (402774 <vTaskSetTimeOutState+0x1c>)
  402764:	6812      	ldr	r2, [r2, #0]
  402766:	6002      	str	r2, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
  402768:	4a03      	ldr	r2, [pc, #12]	; (402778 <vTaskSetTimeOutState+0x20>)
  40276a:	6812      	ldr	r2, [r2, #0]
  40276c:	6042      	str	r2, [r0, #4]
  40276e:	bd08      	pop	{r3, pc}
  402770:	00401419 	.word	0x00401419
  402774:	2000a8b4 	.word	0x2000a8b4
  402778:	2000a960 	.word	0x2000a960

0040277c <xTaskCheckForTimeOut>:
}
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
  40277c:	b538      	push	{r3, r4, r5, lr}
BaseType_t xReturn;

	configASSERT( pxTimeOut );
  40277e:	b910      	cbnz	r0, 402786 <xTaskCheckForTimeOut+0xa>
  402780:	4b16      	ldr	r3, [pc, #88]	; (4027dc <xTaskCheckForTimeOut+0x60>)
  402782:	4798      	blx	r3
  402784:	e7fe      	b.n	402784 <xTaskCheckForTimeOut+0x8>
  402786:	460d      	mov	r5, r1
  402788:	4604      	mov	r4, r0
	configASSERT( pxTicksToWait );
  40278a:	b911      	cbnz	r1, 402792 <xTaskCheckForTimeOut+0x16>
  40278c:	4b13      	ldr	r3, [pc, #76]	; (4027dc <xTaskCheckForTimeOut+0x60>)
  40278e:	4798      	blx	r3
  402790:	e7fe      	b.n	402790 <xTaskCheckForTimeOut+0x14>

	taskENTER_CRITICAL();
  402792:	4b13      	ldr	r3, [pc, #76]	; (4027e0 <xTaskCheckForTimeOut+0x64>)
  402794:	4798      	blx	r3
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
  402796:	4b13      	ldr	r3, [pc, #76]	; (4027e4 <xTaskCheckForTimeOut+0x68>)
  402798:	6819      	ldr	r1, [r3, #0]

		#if ( INCLUDE_vTaskSuspend == 1 )
			/* If INCLUDE_vTaskSuspend is set to 1 and the block time specified is
			the maximum block time then the task should block indefinitely, and
			therefore never time out. */
			if( *pxTicksToWait == portMAX_DELAY )
  40279a:	682b      	ldr	r3, [r5, #0]
  40279c:	f1b3 3fff 	cmp.w	r3, #4294967295
  4027a0:	d013      	beq.n	4027ca <xTaskCheckForTimeOut+0x4e>
				xReturn = pdFALSE;
			}
			else /* We are not blocking indefinitely, perform the checks below. */
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
  4027a2:	4a11      	ldr	r2, [pc, #68]	; (4027e8 <xTaskCheckForTimeOut+0x6c>)
  4027a4:	6812      	ldr	r2, [r2, #0]
  4027a6:	6820      	ldr	r0, [r4, #0]
  4027a8:	4290      	cmp	r0, r2
  4027aa:	d002      	beq.n	4027b2 <xTaskCheckForTimeOut+0x36>
  4027ac:	6862      	ldr	r2, [r4, #4]
  4027ae:	4291      	cmp	r1, r2
  4027b0:	d20d      	bcs.n	4027ce <xTaskCheckForTimeOut+0x52>
			was called, but has also overflowed since vTaskSetTimeOut() was called.
			It must have wrapped all the way around and gone past us again. This
			passed since vTaskSetTimeout() was called. */
			xReturn = pdTRUE;
		}
		else if( ( xConstTickCount - pxTimeOut->xTimeOnEntering ) < *pxTicksToWait )
  4027b2:	6862      	ldr	r2, [r4, #4]
  4027b4:	1a88      	subs	r0, r1, r2
  4027b6:	4283      	cmp	r3, r0
  4027b8:	d90b      	bls.n	4027d2 <xTaskCheckForTimeOut+0x56>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= ( xConstTickCount -  pxTimeOut->xTimeOnEntering );
  4027ba:	1a52      	subs	r2, r2, r1
  4027bc:	4413      	add	r3, r2
  4027be:	602b      	str	r3, [r5, #0]
			vTaskSetTimeOutState( pxTimeOut );
  4027c0:	4620      	mov	r0, r4
  4027c2:	4b0a      	ldr	r3, [pc, #40]	; (4027ec <xTaskCheckForTimeOut+0x70>)
  4027c4:	4798      	blx	r3
			xReturn = pdFALSE;
  4027c6:	2400      	movs	r4, #0
  4027c8:	e004      	b.n	4027d4 <xTaskCheckForTimeOut+0x58>
			/* If INCLUDE_vTaskSuspend is set to 1 and the block time specified is
			the maximum block time then the task should block indefinitely, and
			therefore never time out. */
			if( *pxTicksToWait == portMAX_DELAY )
			{
				xReturn = pdFALSE;
  4027ca:	2400      	movs	r4, #0
  4027cc:	e002      	b.n	4027d4 <xTaskCheckForTimeOut+0x58>
		{
			/* The tick count is greater than the time at which vTaskSetTimeout()
			was called, but has also overflowed since vTaskSetTimeOut() was called.
			It must have wrapped all the way around and gone past us again. This
			passed since vTaskSetTimeout() was called. */
			xReturn = pdTRUE;
  4027ce:	2401      	movs	r4, #1
  4027d0:	e000      	b.n	4027d4 <xTaskCheckForTimeOut+0x58>
			vTaskSetTimeOutState( pxTimeOut );
			xReturn = pdFALSE;
		}
		else
		{
			xReturn = pdTRUE;
  4027d2:	2401      	movs	r4, #1
		}
	}
	taskEXIT_CRITICAL();
  4027d4:	4b06      	ldr	r3, [pc, #24]	; (4027f0 <xTaskCheckForTimeOut+0x74>)
  4027d6:	4798      	blx	r3

	return xReturn;
}
  4027d8:	4620      	mov	r0, r4
  4027da:	bd38      	pop	{r3, r4, r5, pc}
  4027dc:	00401419 	.word	0x00401419
  4027e0:	00401449 	.word	0x00401449
  4027e4:	2000a960 	.word	0x2000a960
  4027e8:	2000a8b4 	.word	0x2000a8b4
  4027ec:	00402759 	.word	0x00402759
  4027f0:	00401489 	.word	0x00401489

004027f4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
	xYieldPending = pdTRUE;
  4027f4:	2201      	movs	r2, #1
  4027f6:	4b01      	ldr	r3, [pc, #4]	; (4027fc <vTaskMissedYield+0x8>)
  4027f8:	601a      	str	r2, [r3, #0]
  4027fa:	4770      	bx	lr
  4027fc:	2000a9b0 	.word	0x2000a9b0

00402800 <xTaskGetSchedulerState>:

	BaseType_t xTaskGetSchedulerState( void )
	{
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
  402800:	4b05      	ldr	r3, [pc, #20]	; (402818 <xTaskGetSchedulerState+0x18>)
  402802:	681b      	ldr	r3, [r3, #0]
  402804:	b133      	cbz	r3, 402814 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
  402806:	4b05      	ldr	r3, [pc, #20]	; (40281c <xTaskGetSchedulerState+0x1c>)
  402808:	681b      	ldr	r3, [r3, #0]
			{
				xReturn = taskSCHEDULER_RUNNING;
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
  40280a:	2b00      	cmp	r3, #0
  40280c:	bf0c      	ite	eq
  40280e:	2002      	moveq	r0, #2
  402810:	2000      	movne	r0, #0
  402812:	4770      	bx	lr
	{
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
  402814:	2001      	movs	r0, #1
				xReturn = taskSCHEDULER_SUSPENDED;
			}
		}

		return xReturn;
	}
  402816:	4770      	bx	lr
  402818:	2000a8bc 	.word	0x2000a8bc
  40281c:	2000a95c 	.word	0x2000a95c

00402820 <vTaskPriorityInherit>:
	{
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL. */
		if( pxMutexHolder != NULL )
  402820:	2800      	cmp	r0, #0
  402822:	d045      	beq.n	4028b0 <vTaskPriorityInherit+0x90>
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
  402824:	b538      	push	{r3, r4, r5, lr}
  402826:	4603      	mov	r3, r0
		if( pxMutexHolder != NULL )
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
  402828:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
  40282a:	4922      	ldr	r1, [pc, #136]	; (4028b4 <vTaskPriorityInherit+0x94>)
  40282c:	6809      	ldr	r1, [r1, #0]
  40282e:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
  402830:	428a      	cmp	r2, r1
  402832:	d23c      	bcs.n	4028ae <vTaskPriorityInherit+0x8e>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not	being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
  402834:	6981      	ldr	r1, [r0, #24]
  402836:	2900      	cmp	r1, #0
  402838:	db05      	blt.n	402846 <vTaskPriorityInherit+0x26>
				{
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  40283a:	491e      	ldr	r1, [pc, #120]	; (4028b4 <vTaskPriorityInherit+0x94>)
  40283c:	6809      	ldr	r1, [r1, #0]
  40283e:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
  402840:	f1c1 0105 	rsb	r1, r1, #5
  402844:	6181      	str	r1, [r0, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xGenericListItem ) ) != pdFALSE )
  402846:	eb02 0282 	add.w	r2, r2, r2, lsl #2
  40284a:	491b      	ldr	r1, [pc, #108]	; (4028b8 <vTaskPriorityInherit+0x98>)
  40284c:	eb01 0282 	add.w	r2, r1, r2, lsl #2
  402850:	6959      	ldr	r1, [r3, #20]
  402852:	4291      	cmp	r1, r2
  402854:	d127      	bne.n	4028a6 <vTaskPriorityInherit+0x86>
  402856:	461c      	mov	r4, r3
				{
					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
  402858:	1d1d      	adds	r5, r3, #4
  40285a:	4628      	mov	r0, r5
  40285c:	4b17      	ldr	r3, [pc, #92]	; (4028bc <vTaskPriorityInherit+0x9c>)
  40285e:	4798      	blx	r3
  402860:	b970      	cbnz	r0, 402880 <vTaskPriorityInherit+0x60>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
  402862:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  402864:	eb03 0183 	add.w	r1, r3, r3, lsl #2
  402868:	4a13      	ldr	r2, [pc, #76]	; (4028b8 <vTaskPriorityInherit+0x98>)
  40286a:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
  40286e:	b93a      	cbnz	r2, 402880 <vTaskPriorityInherit+0x60>
  402870:	4813      	ldr	r0, [pc, #76]	; (4028c0 <vTaskPriorityInherit+0xa0>)
  402872:	6802      	ldr	r2, [r0, #0]
  402874:	2101      	movs	r1, #1
  402876:	fa01 f303 	lsl.w	r3, r1, r3
  40287a:	ea22 0303 	bic.w	r3, r2, r3
  40287e:	6003      	str	r3, [r0, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
  402880:	4b0c      	ldr	r3, [pc, #48]	; (4028b4 <vTaskPriorityInherit+0x94>)
  402882:	681b      	ldr	r3, [r3, #0]
  402884:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
  402886:	62e0      	str	r0, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
  402888:	490d      	ldr	r1, [pc, #52]	; (4028c0 <vTaskPriorityInherit+0xa0>)
  40288a:	680a      	ldr	r2, [r1, #0]
  40288c:	2301      	movs	r3, #1
  40288e:	4083      	lsls	r3, r0
  402890:	4313      	orrs	r3, r2
  402892:	600b      	str	r3, [r1, #0]
  402894:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  402898:	4b07      	ldr	r3, [pc, #28]	; (4028b8 <vTaskPriorityInherit+0x98>)
  40289a:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  40289e:	4629      	mov	r1, r5
  4028a0:	4b08      	ldr	r3, [pc, #32]	; (4028c4 <vTaskPriorityInherit+0xa4>)
  4028a2:	4798      	blx	r3
  4028a4:	bd38      	pop	{r3, r4, r5, pc}
				}
				else
				{
					/* Just inherit the priority. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
  4028a6:	4a03      	ldr	r2, [pc, #12]	; (4028b4 <vTaskPriorityInherit+0x94>)
  4028a8:	6812      	ldr	r2, [r2, #0]
  4028aa:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
  4028ac:	62da      	str	r2, [r3, #44]	; 0x2c
  4028ae:	bd38      	pop	{r3, r4, r5, pc}
  4028b0:	4770      	bx	lr
  4028b2:	bf00      	nop
  4028b4:	2000a954 	.word	0x2000a954
  4028b8:	2000a8dc 	.word	0x2000a8dc
  4028bc:	00401379 	.word	0x00401379
  4028c0:	2000a9ac 	.word	0x2000a9ac
  4028c4:	0040132d 	.word	0x0040132d

004028c8 <xTaskPriorityDisinherit>:
	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
	BaseType_t xReturn = pdFALSE;

		if( pxMutexHolder != NULL )
  4028c8:	2800      	cmp	r0, #0
  4028ca:	d03d      	beq.n	402948 <xTaskPriorityDisinherit+0x80>
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
  4028cc:	b538      	push	{r3, r4, r5, lr}
  4028ce:	4604      	mov	r4, r0
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
  4028d0:	4b20      	ldr	r3, [pc, #128]	; (402954 <xTaskPriorityDisinherit+0x8c>)
  4028d2:	681b      	ldr	r3, [r3, #0]
  4028d4:	4298      	cmp	r0, r3
  4028d6:	d002      	beq.n	4028de <xTaskPriorityDisinherit+0x16>
  4028d8:	4b1f      	ldr	r3, [pc, #124]	; (402958 <xTaskPriorityDisinherit+0x90>)
  4028da:	4798      	blx	r3
  4028dc:	e7fe      	b.n	4028dc <xTaskPriorityDisinherit+0x14>

			configASSERT( pxTCB->uxMutexesHeld );
  4028de:	6c43      	ldr	r3, [r0, #68]	; 0x44
  4028e0:	b913      	cbnz	r3, 4028e8 <xTaskPriorityDisinherit+0x20>
  4028e2:	4b1d      	ldr	r3, [pc, #116]	; (402958 <xTaskPriorityDisinherit+0x90>)
  4028e4:	4798      	blx	r3
  4028e6:	e7fe      	b.n	4028e6 <xTaskPriorityDisinherit+0x1e>
			( pxTCB->uxMutexesHeld )--;
  4028e8:	3b01      	subs	r3, #1
  4028ea:	6443      	str	r3, [r0, #68]	; 0x44

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
  4028ec:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
  4028ee:	6c02      	ldr	r2, [r0, #64]	; 0x40
  4028f0:	4291      	cmp	r1, r2
  4028f2:	d02b      	beq.n	40294c <xTaskPriorityDisinherit+0x84>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
  4028f4:	bb63      	cbnz	r3, 402950 <xTaskPriorityDisinherit+0x88>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding	task then it must be the running state task.  Remove
					the	holding task from the ready	list. */
					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
  4028f6:	1d05      	adds	r5, r0, #4
  4028f8:	4628      	mov	r0, r5
  4028fa:	4b18      	ldr	r3, [pc, #96]	; (40295c <xTaskPriorityDisinherit+0x94>)
  4028fc:	4798      	blx	r3
  4028fe:	b968      	cbnz	r0, 40291c <xTaskPriorityDisinherit+0x54>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
  402900:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
  402902:	eb01 0281 	add.w	r2, r1, r1, lsl #2
  402906:	4b16      	ldr	r3, [pc, #88]	; (402960 <xTaskPriorityDisinherit+0x98>)
  402908:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  40290c:	b933      	cbnz	r3, 40291c <xTaskPriorityDisinherit+0x54>
  40290e:	4815      	ldr	r0, [pc, #84]	; (402964 <xTaskPriorityDisinherit+0x9c>)
  402910:	6803      	ldr	r3, [r0, #0]
  402912:	2201      	movs	r2, #1
  402914:	408a      	lsls	r2, r1
  402916:	ea23 0302 	bic.w	r3, r3, r2
  40291a:	6003      	str	r3, [r0, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
  40291c:	6c20      	ldr	r0, [r4, #64]	; 0x40
  40291e:	62e0      	str	r0, [r4, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  402920:	f1c0 0305 	rsb	r3, r0, #5
  402924:	61a3      	str	r3, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
  402926:	4a0f      	ldr	r2, [pc, #60]	; (402964 <xTaskPriorityDisinherit+0x9c>)
  402928:	6813      	ldr	r3, [r2, #0]
  40292a:	2401      	movs	r4, #1
  40292c:	fa04 f100 	lsl.w	r1, r4, r0
  402930:	430b      	orrs	r3, r1
  402932:	6013      	str	r3, [r2, #0]
  402934:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  402938:	4b09      	ldr	r3, [pc, #36]	; (402960 <xTaskPriorityDisinherit+0x98>)
  40293a:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  40293e:	4629      	mov	r1, r5
  402940:	4b09      	ldr	r3, [pc, #36]	; (402968 <xTaskPriorityDisinherit+0xa0>)
  402942:	4798      	blx	r3
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
  402944:	4620      	mov	r0, r4
  402946:	bd38      	pop	{r3, r4, r5, pc}
#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
	BaseType_t xReturn = pdFALSE;
  402948:	2000      	movs	r0, #0
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
	}
  40294a:	4770      	bx	lr
#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
	BaseType_t xReturn = pdFALSE;
  40294c:	2000      	movs	r0, #0
  40294e:	bd38      	pop	{r3, r4, r5, pc}
  402950:	2000      	movs	r0, #0
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
	}
  402952:	bd38      	pop	{r3, r4, r5, pc}
  402954:	2000a954 	.word	0x2000a954
  402958:	00401419 	.word	0x00401419
  40295c:	00401379 	.word	0x00401379
  402960:	2000a8dc 	.word	0x2000a8dc
  402964:	2000a9ac 	.word	0x2000a9ac
  402968:	0040132d 	.word	0x0040132d

0040296c <pvTaskIncrementMutexHeldCount>:

	void *pvTaskIncrementMutexHeldCount( void )
	{
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
  40296c:	4b05      	ldr	r3, [pc, #20]	; (402984 <pvTaskIncrementMutexHeldCount+0x18>)
  40296e:	681b      	ldr	r3, [r3, #0]
  402970:	b123      	cbz	r3, 40297c <pvTaskIncrementMutexHeldCount+0x10>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
  402972:	4b04      	ldr	r3, [pc, #16]	; (402984 <pvTaskIncrementMutexHeldCount+0x18>)
  402974:	681a      	ldr	r2, [r3, #0]
  402976:	6c53      	ldr	r3, [r2, #68]	; 0x44
  402978:	3301      	adds	r3, #1
  40297a:	6453      	str	r3, [r2, #68]	; 0x44
		}

		return pxCurrentTCB;
  40297c:	4b01      	ldr	r3, [pc, #4]	; (402984 <pvTaskIncrementMutexHeldCount+0x18>)
  40297e:	6818      	ldr	r0, [r3, #0]
	}
  402980:	4770      	bx	lr
  402982:	bf00      	nop
  402984:	2000a954 	.word	0x2000a954

00402988 <prvInsertTimerInActiveList>:
	return xTimeNow;
}
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
  402988:	b510      	push	{r4, lr}
  40298a:	4604      	mov	r4, r0
BaseType_t xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
  40298c:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
  40298e:	6120      	str	r0, [r4, #16]

	if( xNextExpiryTime <= xTimeNow )
  402990:	4291      	cmp	r1, r2
  402992:	d80a      	bhi.n	4029aa <prvInsertTimerInActiveList+0x22>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( xTimeNow - xCommandTime ) >= pxTimer->xTimerPeriodInTicks )
  402994:	1ad2      	subs	r2, r2, r3
  402996:	6983      	ldr	r3, [r0, #24]
  402998:	429a      	cmp	r2, r3
  40299a:	d211      	bcs.n	4029c0 <prvInsertTimerInActiveList+0x38>
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
  40299c:	4b0a      	ldr	r3, [pc, #40]	; (4029c8 <prvInsertTimerInActiveList+0x40>)
  40299e:	6818      	ldr	r0, [r3, #0]
  4029a0:	1d21      	adds	r1, r4, #4
  4029a2:	4b0a      	ldr	r3, [pc, #40]	; (4029cc <prvInsertTimerInActiveList+0x44>)
  4029a4:	4798      	blx	r3
}
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
BaseType_t xProcessTimerNow = pdFALSE;
  4029a6:	2000      	movs	r0, #0
  4029a8:	bd10      	pop	{r4, pc}
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
  4029aa:	429a      	cmp	r2, r3
  4029ac:	d201      	bcs.n	4029b2 <prvInsertTimerInActiveList+0x2a>
  4029ae:	4299      	cmp	r1, r3
  4029b0:	d208      	bcs.n	4029c4 <prvInsertTimerInActiveList+0x3c>
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
  4029b2:	4b07      	ldr	r3, [pc, #28]	; (4029d0 <prvInsertTimerInActiveList+0x48>)
  4029b4:	6818      	ldr	r0, [r3, #0]
  4029b6:	1d21      	adds	r1, r4, #4
  4029b8:	4b04      	ldr	r3, [pc, #16]	; (4029cc <prvInsertTimerInActiveList+0x44>)
  4029ba:	4798      	blx	r3
}
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
BaseType_t xProcessTimerNow = pdFALSE;
  4029bc:	2000      	movs	r0, #0
  4029be:	bd10      	pop	{r4, pc}
		timer was issued, and the time the command was processed? */
		if( ( xTimeNow - xCommandTime ) >= pxTimer->xTimerPeriodInTicks )
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
  4029c0:	2001      	movs	r0, #1
  4029c2:	bd10      	pop	{r4, pc}
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
  4029c4:	2001      	movs	r0, #1
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
		}
	}

	return xProcessTimerNow;
}
  4029c6:	bd10      	pop	{r4, pc}
  4029c8:	2000a9e4 	.word	0x2000a9e4
  4029cc:	00401345 	.word	0x00401345
  4029d0:	2000a9b4 	.word	0x2000a9b4

004029d4 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
  4029d4:	b570      	push	{r4, r5, r6, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
  4029d6:	4b0f      	ldr	r3, [pc, #60]	; (402a14 <prvCheckForValidListAndQueue+0x40>)
  4029d8:	4798      	blx	r3
	{
		if( xTimerQueue == NULL )
  4029da:	4b0f      	ldr	r3, [pc, #60]	; (402a18 <prvCheckForValidListAndQueue+0x44>)
  4029dc:	681b      	ldr	r3, [r3, #0]
  4029de:	b9ab      	cbnz	r3, 402a0c <prvCheckForValidListAndQueue+0x38>
		{
			vListInitialise( &xActiveTimerList1 );
  4029e0:	4d0e      	ldr	r5, [pc, #56]	; (402a1c <prvCheckForValidListAndQueue+0x48>)
  4029e2:	4628      	mov	r0, r5
  4029e4:	4e0e      	ldr	r6, [pc, #56]	; (402a20 <prvCheckForValidListAndQueue+0x4c>)
  4029e6:	47b0      	blx	r6
			vListInitialise( &xActiveTimerList2 );
  4029e8:	4c0e      	ldr	r4, [pc, #56]	; (402a24 <prvCheckForValidListAndQueue+0x50>)
  4029ea:	4620      	mov	r0, r4
  4029ec:	47b0      	blx	r6
			pxCurrentTimerList = &xActiveTimerList1;
  4029ee:	4b0e      	ldr	r3, [pc, #56]	; (402a28 <prvCheckForValidListAndQueue+0x54>)
  4029f0:	601d      	str	r5, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
  4029f2:	4b0e      	ldr	r3, [pc, #56]	; (402a2c <prvCheckForValidListAndQueue+0x58>)
  4029f4:	601c      	str	r4, [r3, #0]
			xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
  4029f6:	2005      	movs	r0, #5
  4029f8:	2110      	movs	r1, #16
  4029fa:	2200      	movs	r2, #0
  4029fc:	4b0c      	ldr	r3, [pc, #48]	; (402a30 <prvCheckForValidListAndQueue+0x5c>)
  4029fe:	4798      	blx	r3
  402a00:	4b05      	ldr	r3, [pc, #20]	; (402a18 <prvCheckForValidListAndQueue+0x44>)
  402a02:	6018      	str	r0, [r3, #0]
			configASSERT( xTimerQueue );
  402a04:	b910      	cbnz	r0, 402a0c <prvCheckForValidListAndQueue+0x38>
  402a06:	4b0b      	ldr	r3, [pc, #44]	; (402a34 <prvCheckForValidListAndQueue+0x60>)
  402a08:	4798      	blx	r3
  402a0a:	e7fe      	b.n	402a0a <prvCheckForValidListAndQueue+0x36>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
  402a0c:	4b0a      	ldr	r3, [pc, #40]	; (402a38 <prvCheckForValidListAndQueue+0x64>)
  402a0e:	4798      	blx	r3
  402a10:	bd70      	pop	{r4, r5, r6, pc}
  402a12:	bf00      	nop
  402a14:	00401449 	.word	0x00401449
  402a18:	2000a9e0 	.word	0x2000a9e0
  402a1c:	2000a9b8 	.word	0x2000a9b8
  402a20:	0040130d 	.word	0x0040130d
  402a24:	2000a9cc 	.word	0x2000a9cc
  402a28:	2000a9b4 	.word	0x2000a9b4
  402a2c:	2000a9e4 	.word	0x2000a9e4
  402a30:	00401a6d 	.word	0x00401a6d
  402a34:	00401419 	.word	0x00401419
  402a38:	00401489 	.word	0x00401489

00402a3c <xTimerCreateTimerTask>:
static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty ) PRIVILEGED_FUNCTION;

/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
  402a3c:	b510      	push	{r4, lr}
  402a3e:	b084      	sub	sp, #16

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
  402a40:	4b0b      	ldr	r3, [pc, #44]	; (402a70 <xTimerCreateTimerTask+0x34>)
  402a42:	4798      	blx	r3

	if( xTimerQueue != NULL )
  402a44:	4b0b      	ldr	r3, [pc, #44]	; (402a74 <xTimerCreateTimerTask+0x38>)
  402a46:	681b      	ldr	r3, [r3, #0]
  402a48:	b163      	cbz	r3, 402a64 <xTimerCreateTimerTask+0x28>
			xReturn = xTaskCreate( prvTimerTask, "Tmr Svc", ( uint16_t ) configTIMER_TASK_STACK_DEPTH, NULL, ( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT, &xTimerTaskHandle );
		}
		#else
		{
			/* Create the timer task without storing its handle. */
			xReturn = xTaskCreate( prvTimerTask, "Tmr Svc", ( uint16_t ) configTIMER_TASK_STACK_DEPTH, NULL, ( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT, NULL);
  402a4a:	2302      	movs	r3, #2
  402a4c:	9300      	str	r3, [sp, #0]
  402a4e:	2300      	movs	r3, #0
  402a50:	9301      	str	r3, [sp, #4]
  402a52:	9302      	str	r3, [sp, #8]
  402a54:	9303      	str	r3, [sp, #12]
  402a56:	4808      	ldr	r0, [pc, #32]	; (402a78 <xTimerCreateTimerTask+0x3c>)
  402a58:	4908      	ldr	r1, [pc, #32]	; (402a7c <xTimerCreateTimerTask+0x40>)
  402a5a:	f44f 7282 	mov.w	r2, #260	; 0x104
  402a5e:	4c08      	ldr	r4, [pc, #32]	; (402a80 <xTimerCreateTimerTask+0x44>)
  402a60:	47a0      	blx	r4
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
  402a62:	b910      	cbnz	r0, 402a6a <xTimerCreateTimerTask+0x2e>
  402a64:	4b07      	ldr	r3, [pc, #28]	; (402a84 <xTimerCreateTimerTask+0x48>)
  402a66:	4798      	blx	r3
  402a68:	e7fe      	b.n	402a68 <xTimerCreateTimerTask+0x2c>
	return xReturn;
}
  402a6a:	b004      	add	sp, #16
  402a6c:	bd10      	pop	{r4, pc}
  402a6e:	bf00      	nop
  402a70:	004029d5 	.word	0x004029d5
  402a74:	2000a9e0 	.word	0x2000a9e0
  402a78:	00402b99 	.word	0x00402b99
  402a7c:	004043e4 	.word	0x004043e4
  402a80:	00401f55 	.word	0x00401f55
  402a84:	00401419 	.word	0x00401419

00402a88 <xTimerGenericCommand>:
	return ( TimerHandle_t ) pxNewTimer;
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
  402a88:	b510      	push	{r4, lr}
  402a8a:	b084      	sub	sp, #16
BaseType_t xReturn = pdFAIL;
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
  402a8c:	b910      	cbnz	r0, 402a94 <xTimerGenericCommand+0xc>
  402a8e:	4b11      	ldr	r3, [pc, #68]	; (402ad4 <xTimerGenericCommand+0x4c>)
  402a90:	4798      	blx	r3
  402a92:	e7fe      	b.n	402a92 <xTimerGenericCommand+0xa>
  402a94:	4604      	mov	r4, r0

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
  402a96:	4810      	ldr	r0, [pc, #64]	; (402ad8 <xTimerGenericCommand+0x50>)
  402a98:	6800      	ldr	r0, [r0, #0]
  402a9a:	b1c0      	cbz	r0, 402ace <xTimerGenericCommand+0x46>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
  402a9c:	9100      	str	r1, [sp, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
  402a9e:	9201      	str	r2, [sp, #4]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
  402aa0:	9402      	str	r4, [sp, #8]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
  402aa2:	2905      	cmp	r1, #5
  402aa4:	dc0d      	bgt.n	402ac2 <xTimerGenericCommand+0x3a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
  402aa6:	4b0d      	ldr	r3, [pc, #52]	; (402adc <xTimerGenericCommand+0x54>)
  402aa8:	4798      	blx	r3
  402aaa:	2802      	cmp	r0, #2
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
  402aac:	4b0a      	ldr	r3, [pc, #40]	; (402ad8 <xTimerGenericCommand+0x50>)
  402aae:	6818      	ldr	r0, [r3, #0]
  402ab0:	4669      	mov	r1, sp
  402ab2:	bf07      	ittee	eq
  402ab4:	9a06      	ldreq	r2, [sp, #24]
  402ab6:	2300      	moveq	r3, #0
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
  402ab8:	2200      	movne	r2, #0
  402aba:	4613      	movne	r3, r2
  402abc:	4c08      	ldr	r4, [pc, #32]	; (402ae0 <xTimerGenericCommand+0x58>)
  402abe:	47a0      	blx	r4
  402ac0:	e006      	b.n	402ad0 <xTimerGenericCommand+0x48>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
  402ac2:	4669      	mov	r1, sp
  402ac4:	461a      	mov	r2, r3
  402ac6:	2300      	movs	r3, #0
  402ac8:	4c06      	ldr	r4, [pc, #24]	; (402ae4 <xTimerGenericCommand+0x5c>)
  402aca:	47a0      	blx	r4
  402acc:	e000      	b.n	402ad0 <xTimerGenericCommand+0x48>
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
BaseType_t xReturn = pdFAIL;
  402ace:	2000      	movs	r0, #0
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
}
  402ad0:	b004      	add	sp, #16
  402ad2:	bd10      	pop	{r4, pc}
  402ad4:	00401419 	.word	0x00401419
  402ad8:	2000a9e0 	.word	0x2000a9e0
  402adc:	00402801 	.word	0x00402801
  402ae0:	00401acd 	.word	0x00401acd
  402ae4:	00401c41 	.word	0x00401c41

00402ae8 <prvSampleTimeNow>:
	return xNextExpireTime;
}
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
  402ae8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  402aec:	b082      	sub	sp, #8
  402aee:	4680      	mov	r8, r0
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
  402af0:	4b21      	ldr	r3, [pc, #132]	; (402b78 <prvSampleTimeNow+0x90>)
  402af2:	4798      	blx	r3
  402af4:	4607      	mov	r7, r0

	if( xTimeNow < xLastTime )
  402af6:	4b21      	ldr	r3, [pc, #132]	; (402b7c <prvSampleTimeNow+0x94>)
  402af8:	681b      	ldr	r3, [r3, #0]
  402afa:	4298      	cmp	r0, r3
  402afc:	d233      	bcs.n	402b66 <prvSampleTimeNow+0x7e>
  402afe:	e023      	b.n	402b48 <prvSampleTimeNow+0x60>
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
  402b00:	68db      	ldr	r3, [r3, #12]
  402b02:	f8d3 a000 	ldr.w	sl, [r3]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
  402b06:	68dc      	ldr	r4, [r3, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
  402b08:	f104 0904 	add.w	r9, r4, #4
  402b0c:	4648      	mov	r0, r9
  402b0e:	47b0      	blx	r6
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
  402b10:	6a63      	ldr	r3, [r4, #36]	; 0x24
  402b12:	4620      	mov	r0, r4
  402b14:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
  402b16:	69e3      	ldr	r3, [r4, #28]
  402b18:	2b01      	cmp	r3, #1
  402b1a:	d117      	bne.n	402b4c <prvSampleTimeNow+0x64>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
  402b1c:	69a3      	ldr	r3, [r4, #24]
  402b1e:	4453      	add	r3, sl
			if( xReloadTime > xNextExpireTime )
  402b20:	4553      	cmp	r3, sl
  402b22:	d906      	bls.n	402b32 <prvSampleTimeNow+0x4a>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
  402b24:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
  402b26:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
  402b28:	6828      	ldr	r0, [r5, #0]
  402b2a:	4649      	mov	r1, r9
  402b2c:	4b14      	ldr	r3, [pc, #80]	; (402b80 <prvSampleTimeNow+0x98>)
  402b2e:	4798      	blx	r3
  402b30:	e00c      	b.n	402b4c <prvSampleTimeNow+0x64>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
  402b32:	2300      	movs	r3, #0
  402b34:	9300      	str	r3, [sp, #0]
  402b36:	4620      	mov	r0, r4
  402b38:	4619      	mov	r1, r3
  402b3a:	4652      	mov	r2, sl
  402b3c:	4c11      	ldr	r4, [pc, #68]	; (402b84 <prvSampleTimeNow+0x9c>)
  402b3e:	47a0      	blx	r4
				configASSERT( xResult );
  402b40:	b920      	cbnz	r0, 402b4c <prvSampleTimeNow+0x64>
  402b42:	4b11      	ldr	r3, [pc, #68]	; (402b88 <prvSampleTimeNow+0xa0>)
  402b44:	4798      	blx	r3
  402b46:	e7fe      	b.n	402b46 <prvSampleTimeNow+0x5e>

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
  402b48:	4d10      	ldr	r5, [pc, #64]	; (402b8c <prvSampleTimeNow+0xa4>)
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
  402b4a:	4e11      	ldr	r6, [pc, #68]	; (402b90 <prvSampleTimeNow+0xa8>)

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
  402b4c:	682b      	ldr	r3, [r5, #0]
  402b4e:	681a      	ldr	r2, [r3, #0]
  402b50:	2a00      	cmp	r2, #0
  402b52:	d1d5      	bne.n	402b00 <prvSampleTimeNow+0x18>
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
	pxCurrentTimerList = pxOverflowTimerList;
  402b54:	4a0f      	ldr	r2, [pc, #60]	; (402b94 <prvSampleTimeNow+0xac>)
  402b56:	6810      	ldr	r0, [r2, #0]
  402b58:	490c      	ldr	r1, [pc, #48]	; (402b8c <prvSampleTimeNow+0xa4>)
  402b5a:	6008      	str	r0, [r1, #0]
	pxOverflowTimerList = pxTemp;
  402b5c:	6013      	str	r3, [r2, #0]
	xTimeNow = xTaskGetTickCount();

	if( xTimeNow < xLastTime )
	{
		prvSwitchTimerLists();
		*pxTimerListsWereSwitched = pdTRUE;
  402b5e:	2301      	movs	r3, #1
  402b60:	f8c8 3000 	str.w	r3, [r8]
  402b64:	e002      	b.n	402b6c <prvSampleTimeNow+0x84>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
  402b66:	2300      	movs	r3, #0
  402b68:	f8c8 3000 	str.w	r3, [r8]
	}

	xLastTime = xTimeNow;
  402b6c:	4b03      	ldr	r3, [pc, #12]	; (402b7c <prvSampleTimeNow+0x94>)
  402b6e:	601f      	str	r7, [r3, #0]

	return xTimeNow;
}
  402b70:	4638      	mov	r0, r7
  402b72:	b002      	add	sp, #8
  402b74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  402b78:	004021d9 	.word	0x004021d9
  402b7c:	2000a9e8 	.word	0x2000a9e8
  402b80:	00401345 	.word	0x00401345
  402b84:	00402a89 	.word	0x00402a89
  402b88:	00401419 	.word	0x00401419
  402b8c:	2000a9b4 	.word	0x2000a9b4
  402b90:	00401379 	.word	0x00401379
  402b94:	2000a9e4 	.word	0x2000a9e4

00402b98 <prvTimerTask>:
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
}
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
  402b98:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  402b9c:	b089      	sub	sp, #36	; 0x24
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
  402b9e:	4f59      	ldr	r7, [pc, #356]	; (402d04 <prvTimerTask+0x16c>)
					/* The current timer list is empty - is the overflow list
					also empty? */
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
				}

				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
  402ba0:	4c59      	ldr	r4, [pc, #356]	; (402d08 <prvTimerTask+0x170>)
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
  402ba2:	4d5a      	ldr	r5, [pc, #360]	; (402d0c <prvTimerTask+0x174>)
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
  402ba4:	683b      	ldr	r3, [r7, #0]
	if( *pxListWasEmpty == pdFALSE )
  402ba6:	681a      	ldr	r2, [r3, #0]
  402ba8:	b15a      	cbz	r2, 402bc2 <prvTimerTask+0x2a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
  402baa:	68db      	ldr	r3, [r3, #12]
  402bac:	f8d3 8000 	ldr.w	r8, [r3]
static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
  402bb0:	4b57      	ldr	r3, [pc, #348]	; (402d10 <prvTimerTask+0x178>)
  402bb2:	4798      	blx	r3
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
  402bb4:	a804      	add	r0, sp, #16
  402bb6:	4b57      	ldr	r3, [pc, #348]	; (402d14 <prvTimerTask+0x17c>)
  402bb8:	4798      	blx	r3
  402bba:	4606      	mov	r6, r0
		if( xTimerListsWereSwitched == pdFALSE )
  402bbc:	9b04      	ldr	r3, [sp, #16]
  402bbe:	b14b      	cbz	r3, 402bd4 <prvTimerTask+0x3c>
  402bc0:	e049      	b.n	402c56 <prvTimerTask+0xbe>
static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
  402bc2:	4b53      	ldr	r3, [pc, #332]	; (402d10 <prvTimerTask+0x178>)
  402bc4:	4798      	blx	r3
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
  402bc6:	a804      	add	r0, sp, #16
  402bc8:	4b52      	ldr	r3, [pc, #328]	; (402d14 <prvTimerTask+0x17c>)
  402bca:	4798      	blx	r3
  402bcc:	4606      	mov	r6, r0
		if( xTimerListsWereSwitched == pdFALSE )
  402bce:	9b04      	ldr	r3, [sp, #16]
  402bd0:	b363      	cbz	r3, 402c2c <prvTimerTask+0x94>
  402bd2:	e040      	b.n	402c56 <prvTimerTask+0xbe>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
  402bd4:	4580      	cmp	r8, r0
  402bd6:	bf88      	it	hi
  402bd8:	2200      	movhi	r2, #0
  402bda:	d830      	bhi.n	402c3e <prvTimerTask+0xa6>
			{
				( void ) xTaskResumeAll();
  402bdc:	4b4e      	ldr	r3, [pc, #312]	; (402d18 <prvTimerTask+0x180>)
  402bde:	4798      	blx	r3
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
  402be0:	683b      	ldr	r3, [r7, #0]
  402be2:	68db      	ldr	r3, [r3, #12]
  402be4:	f8d3 900c 	ldr.w	r9, [r3, #12]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
  402be8:	f109 0004 	add.w	r0, r9, #4
  402bec:	4b4b      	ldr	r3, [pc, #300]	; (402d1c <prvTimerTask+0x184>)
  402bee:	4798      	blx	r3
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
  402bf0:	f8d9 301c 	ldr.w	r3, [r9, #28]
  402bf4:	2b01      	cmp	r3, #1
  402bf6:	d114      	bne.n	402c22 <prvTimerTask+0x8a>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) == pdTRUE )
  402bf8:	f8d9 1018 	ldr.w	r1, [r9, #24]
  402bfc:	4648      	mov	r0, r9
  402bfe:	4441      	add	r1, r8
  402c00:	4632      	mov	r2, r6
  402c02:	4643      	mov	r3, r8
  402c04:	4e46      	ldr	r6, [pc, #280]	; (402d20 <prvTimerTask+0x188>)
  402c06:	47b0      	blx	r6
  402c08:	2801      	cmp	r0, #1
  402c0a:	d10a      	bne.n	402c22 <prvTimerTask+0x8a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
  402c0c:	2300      	movs	r3, #0
  402c0e:	9300      	str	r3, [sp, #0]
  402c10:	4648      	mov	r0, r9
  402c12:	4619      	mov	r1, r3
  402c14:	4642      	mov	r2, r8
  402c16:	4e43      	ldr	r6, [pc, #268]	; (402d24 <prvTimerTask+0x18c>)
  402c18:	47b0      	blx	r6
			configASSERT( xResult );
  402c1a:	b910      	cbnz	r0, 402c22 <prvTimerTask+0x8a>
  402c1c:	4b42      	ldr	r3, [pc, #264]	; (402d28 <prvTimerTask+0x190>)
  402c1e:	4798      	blx	r3
  402c20:	e7fe      	b.n	402c20 <prvTimerTask+0x88>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
  402c22:	f8d9 3024 	ldr.w	r3, [r9, #36]	; 0x24
  402c26:	4648      	mov	r0, r9
  402c28:	4798      	blx	r3
  402c2a:	e062      	b.n	402cf2 <prvTimerTask+0x15a>
				case when the current timer list is empty. */
				if( xListWasEmpty != pdFALSE )
				{
					/* The current timer list is empty - is the overflow list
					also empty? */
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
  402c2c:	4b3f      	ldr	r3, [pc, #252]	; (402d2c <prvTimerTask+0x194>)
  402c2e:	681b      	ldr	r3, [r3, #0]
  402c30:	681a      	ldr	r2, [r3, #0]
  402c32:	fab2 f282 	clz	r2, r2
  402c36:	0952      	lsrs	r2, r2, #5
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
  402c38:	f04f 0800 	mov.w	r8, #0
  402c3c:	e7ff      	b.n	402c3e <prvTimerTask+0xa6>
					/* The current timer list is empty - is the overflow list
					also empty? */
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
				}

				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
  402c3e:	6820      	ldr	r0, [r4, #0]
  402c40:	ebc6 0108 	rsb	r1, r6, r8
  402c44:	4b3a      	ldr	r3, [pc, #232]	; (402d30 <prvTimerTask+0x198>)
  402c46:	4798      	blx	r3

				if( xTaskResumeAll() == pdFALSE )
  402c48:	4b33      	ldr	r3, [pc, #204]	; (402d18 <prvTimerTask+0x180>)
  402c4a:	4798      	blx	r3
  402c4c:	2800      	cmp	r0, #0
  402c4e:	d150      	bne.n	402cf2 <prvTimerTask+0x15a>
				{
					/* Yield to wait for either a command to arrive, or the
					block time to expire.  If a command arrived between the
					critical section being exited and this yield then the yield
					will not cause the task to block. */
					portYIELD_WITHIN_API();
  402c50:	4b38      	ldr	r3, [pc, #224]	; (402d34 <prvTimerTask+0x19c>)
  402c52:	4798      	blx	r3
  402c54:	e04d      	b.n	402cf2 <prvTimerTask+0x15a>
				}
			}
		}
		else
		{
			( void ) xTaskResumeAll();
  402c56:	4b30      	ldr	r3, [pc, #192]	; (402d18 <prvTimerTask+0x180>)
  402c58:	4798      	blx	r3
  402c5a:	e04a      	b.n	402cf2 <prvTimerTask+0x15a>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
  402c5c:	9b04      	ldr	r3, [sp, #16]
  402c5e:	2b00      	cmp	r3, #0
  402c60:	da06      	bge.n	402c70 <prvTimerTask+0xd8>
				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
  402c62:	9806      	ldr	r0, [sp, #24]
  402c64:	9907      	ldr	r1, [sp, #28]
  402c66:	9b05      	ldr	r3, [sp, #20]
  402c68:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
  402c6a:	9b04      	ldr	r3, [sp, #16]
  402c6c:	2b00      	cmp	r3, #0
  402c6e:	db40      	blt.n	402cf2 <prvTimerTask+0x15a>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
  402c70:	9e06      	ldr	r6, [sp, #24]

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
  402c72:	6973      	ldr	r3, [r6, #20]
  402c74:	b113      	cbz	r3, 402c7c <prvTimerTask+0xe4>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
  402c76:	1d30      	adds	r0, r6, #4
  402c78:	4b28      	ldr	r3, [pc, #160]	; (402d1c <prvTimerTask+0x184>)
  402c7a:	4798      	blx	r3
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
  402c7c:	a803      	add	r0, sp, #12
  402c7e:	4b25      	ldr	r3, [pc, #148]	; (402d14 <prvTimerTask+0x17c>)
  402c80:	4798      	blx	r3
  402c82:	4686      	mov	lr, r0

			switch( xMessage.xMessageID )
  402c84:	9a04      	ldr	r2, [sp, #16]
  402c86:	2a09      	cmp	r2, #9
  402c88:	d833      	bhi.n	402cf2 <prvTimerTask+0x15a>
  402c8a:	e8df f002 	tbb	[pc, r2]
  402c8e:	0505      	.short	0x0505
  402c90:	2f223205 	.word	0x2f223205
  402c94:	22320505 	.word	0x22320505
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) == pdTRUE )
  402c98:	9b05      	ldr	r3, [sp, #20]
  402c9a:	69b1      	ldr	r1, [r6, #24]
  402c9c:	4630      	mov	r0, r6
  402c9e:	4419      	add	r1, r3
  402ca0:	4672      	mov	r2, lr
  402ca2:	f8df c07c 	ldr.w	ip, [pc, #124]	; 402d20 <prvTimerTask+0x188>
  402ca6:	47e0      	blx	ip
  402ca8:	2801      	cmp	r0, #1
  402caa:	d122      	bne.n	402cf2 <prvTimerTask+0x15a>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
  402cac:	6a73      	ldr	r3, [r6, #36]	; 0x24
  402cae:	4630      	mov	r0, r6
  402cb0:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
  402cb2:	69f3      	ldr	r3, [r6, #28]
  402cb4:	2b01      	cmp	r3, #1
  402cb6:	d11c      	bne.n	402cf2 <prvTimerTask+0x15a>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
  402cb8:	69b2      	ldr	r2, [r6, #24]
  402cba:	2300      	movs	r3, #0
  402cbc:	9300      	str	r3, [sp, #0]
  402cbe:	4630      	mov	r0, r6
  402cc0:	4619      	mov	r1, r3
  402cc2:	9e05      	ldr	r6, [sp, #20]
  402cc4:	4432      	add	r2, r6
  402cc6:	4e17      	ldr	r6, [pc, #92]	; (402d24 <prvTimerTask+0x18c>)
  402cc8:	47b0      	blx	r6
							configASSERT( xResult );
  402cca:	b990      	cbnz	r0, 402cf2 <prvTimerTask+0x15a>
  402ccc:	4b16      	ldr	r3, [pc, #88]	; (402d28 <prvTimerTask+0x190>)
  402cce:	4798      	blx	r3
  402cd0:	e7fe      	b.n	402cd0 <prvTimerTask+0x138>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
  402cd2:	9905      	ldr	r1, [sp, #20]
  402cd4:	61b1      	str	r1, [r6, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
  402cd6:	b911      	cbnz	r1, 402cde <prvTimerTask+0x146>
  402cd8:	4b13      	ldr	r3, [pc, #76]	; (402d28 <prvTimerTask+0x190>)
  402cda:	4798      	blx	r3
  402cdc:	e7fe      	b.n	402cdc <prvTimerTask+0x144>
					longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot be
					zero the next expiry time can only be in the future, meaning
					(unlike for the xTimerStart() case above) there is no fail case
					that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
  402cde:	4630      	mov	r0, r6
  402ce0:	4471      	add	r1, lr
  402ce2:	4672      	mov	r2, lr
  402ce4:	4673      	mov	r3, lr
  402ce6:	4e0e      	ldr	r6, [pc, #56]	; (402d20 <prvTimerTask+0x188>)
  402ce8:	47b0      	blx	r6
  402cea:	e002      	b.n	402cf2 <prvTimerTask+0x15a>
					break;

				case tmrCOMMAND_DELETE :
					/* The timer has already been removed from the active list,
					just free up the memory. */
					vPortFree( pxTimer );
  402cec:	4630      	mov	r0, r6
  402cee:	4b12      	ldr	r3, [pc, #72]	; (402d38 <prvTimerTask+0x1a0>)
  402cf0:	4798      	blx	r3
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
  402cf2:	6820      	ldr	r0, [r4, #0]
  402cf4:	a904      	add	r1, sp, #16
  402cf6:	2200      	movs	r2, #0
  402cf8:	4613      	mov	r3, r2
  402cfa:	47a8      	blx	r5
  402cfc:	2800      	cmp	r0, #0
  402cfe:	d1ad      	bne.n	402c5c <prvTimerTask+0xc4>
  402d00:	e750      	b.n	402ba4 <prvTimerTask+0xc>
  402d02:	bf00      	nop
  402d04:	2000a9b4 	.word	0x2000a9b4
  402d08:	2000a9e0 	.word	0x2000a9e0
  402d0c:	00401d15 	.word	0x00401d15
  402d10:	004021c9 	.word	0x004021c9
  402d14:	00402ae9 	.word	0x00402ae9
  402d18:	00402321 	.word	0x00402321
  402d1c:	00401379 	.word	0x00401379
  402d20:	00402989 	.word	0x00402989
  402d24:	00402a89 	.word	0x00402a89
  402d28:	00401419 	.word	0x00401419
  402d2c:	2000a9e4 	.word	0x2000a9e4
  402d30:	00401e81 	.word	0x00401e81
  402d34:	00401401 	.word	0x00401401
  402d38:	004017dd 	.word	0x004017dd

00402d3c <vsync_handler>:
static void vsync_handler(uint32_t ul_id, uint32_t ul_mask)
{
	unused(ul_id);
	unused(ul_mask);
	
	g_ul_vsync_flag = true;
  402d3c:	2201      	movs	r2, #1
  402d3e:	4b01      	ldr	r3, [pc, #4]	; (402d44 <vsync_handler+0x8>)
  402d40:	601a      	str	r2, [r3, #0]
  402d42:	4770      	bx	lr
  402d44:	2000a9f0 	.word	0x2000a9f0

00402d48 <button_handler>:
static void button_handler(uint32_t ul_id, uint32_t ul_mask)
{
	unused(ul_id);
	unused(ul_mask);

	g_ul_push_button_trigger = true;
  402d48:	2201      	movs	r2, #1
  402d4a:	4b01      	ldr	r3, [pc, #4]	; (402d50 <button_handler+0x8>)
  402d4c:	601a      	str	r2, [r3, #0]
  402d4e:	4770      	bx	lr
  402d50:	2000a9ec 	.word	0x2000a9ec

00402d54 <task_lcdscreen>:
		vTaskDelay(1000);
	}
}

static void task_lcdscreen(void *pvParameters)
{
  402d54:	b580      	push	{r7, lr}
	UNUSED(pvParameters);
	for (;;) {
		ili9325_fill(COLOR_VIOLET);
  402d56:	4f09      	ldr	r7, [pc, #36]	; (402d7c <task_lcdscreen+0x28>)
  402d58:	4e09      	ldr	r6, [pc, #36]	; (402d80 <task_lcdscreen+0x2c>)
		ili9325_draw_string(0, 20, (uint8_t *)"FreeRTOS");
  402d5a:	4d0a      	ldr	r5, [pc, #40]	; (402d84 <task_lcdscreen+0x30>)

static void task_lcdscreen(void *pvParameters)
{
	UNUSED(pvParameters);
	for (;;) {
		ili9325_fill(COLOR_VIOLET);
  402d5c:	4638      	mov	r0, r7
  402d5e:	47b0      	blx	r6
		ili9325_draw_string(0, 20, (uint8_t *)"FreeRTOS");
  402d60:	2000      	movs	r0, #0
  402d62:	2114      	movs	r1, #20
  402d64:	462a      	mov	r2, r5
  402d66:	4c08      	ldr	r4, [pc, #32]	; (402d88 <task_lcdscreen+0x34>)
  402d68:	47a0      	blx	r4
		ili9325_draw_string(0, 80, (uint8_t *)"DEMO");
  402d6a:	2000      	movs	r0, #0
  402d6c:	2150      	movs	r1, #80	; 0x50
  402d6e:	4a07      	ldr	r2, [pc, #28]	; (402d8c <task_lcdscreen+0x38>)
  402d70:	47a0      	blx	r4
		vTaskDelay(2000);
  402d72:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
  402d76:	4b06      	ldr	r3, [pc, #24]	; (402d90 <task_lcdscreen+0x3c>)
  402d78:	4798      	blx	r3
	}
  402d7a:	e7ef      	b.n	402d5c <task_lcdscreen+0x8>
  402d7c:	00ee82ee 	.word	0x00ee82ee
  402d80:	00400871 	.word	0x00400871
  402d84:	004043ec 	.word	0x004043ec
  402d88:	004008e1 	.word	0x004008e1
  402d8c:	004043f8 	.word	0x004043f8
  402d90:	00402421 	.word	0x00402421

00402d94 <task_led>:
 * \brief This task, when activated, make LED blink at a fixed rate
 */


static void task_led(void *pvParameters)
{
  402d94:	b508      	push	{r3, lr}
	UNUSED(pvParameters);
	for (;;) {
		LED_Toggle(LED0_GPIO);
  402d96:	264c      	movs	r6, #76	; 0x4c
  402d98:	4d03      	ldr	r5, [pc, #12]	; (402da8 <task_led+0x14>)
		vTaskDelay(1000);
  402d9a:	4c04      	ldr	r4, [pc, #16]	; (402dac <task_led+0x18>)

static void task_led(void *pvParameters)
{
	UNUSED(pvParameters);
	for (;;) {
		LED_Toggle(LED0_GPIO);
  402d9c:	4630      	mov	r0, r6
  402d9e:	47a8      	blx	r5
		vTaskDelay(1000);
  402da0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
  402da4:	47a0      	blx	r4
	}
  402da6:	e7f9      	b.n	402d9c <task_led+0x8>
  402da8:	00400b31 	.word	0x00400b31
  402dac:	00402421 	.word	0x00402421

00402db0 <vApplicationMallocFailedHook>:
	heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
	FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
	to query the size of free heap space that remains (although it does not
	provide information on how the remaining heap might be fragmented). */
//	taskDISABLE_INTERRUPTS();
	for( ;; );
  402db0:	e7fe      	b.n	402db0 <vApplicationMallocFailedHook>
  402db2:	bf00      	nop

00402db4 <vApplicationStackOverflowHook>:
/**
 * \brief Called if stack overflow during execution
 */
extern void vApplicationStackOverflowHook(xTaskHandle *pxTask,
		signed char *pcTaskName)
{
  402db4:	b508      	push	{r3, lr}
	//printf("stack overflow %x %s\r\n", pxTask, (portCHAR *)pcTaskName);
	/* If the parameters have been corrupted then inspect pxCurrentTCB to
	 * identify which task has overflowed its stack.
	 */
	LED_On(LED0_GPIO);
  402db6:	204c      	movs	r0, #76	; 0x4c
  402db8:	4b01      	ldr	r3, [pc, #4]	; (402dc0 <vApplicationStackOverflowHook+0xc>)
  402dba:	4798      	blx	r3
	for (;;) {
	}
  402dbc:	e7fe      	b.n	402dbc <vApplicationStackOverflowHook+0x8>
  402dbe:	bf00      	nop
  402dc0:	00400b19 	.word	0x00400b19

00402dc4 <vApplicationIdleHook>:

/**
 * \brief This function is called by FreeRTOS idle task
 */
extern void vApplicationIdleHook(void)
{
  402dc4:	4770      	bx	lr
  402dc6:	bf00      	nop

00402dc8 <vApplicationTickHook>:

/**
 * \brief This function is called by FreeRTOS each tick
 */
extern void vApplicationTickHook(void)
{
  402dc8:	4770      	bx	lr
  402dca:	bf00      	nop

00402dcc <main>:
 * \brief Application entry point for image sensor capture example.
 *
 * \return Unused (ANSI-C compatibility).
 */
int main(void)
{
  402dcc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  402dd0:	b089      	sub	sp, #36	; 0x24
	sysclk_init();
  402dd2:	4b8a      	ldr	r3, [pc, #552]	; (402ffc <main+0x230>)
  402dd4:	4798      	blx	r3
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07);               /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  402dd6:	4a8a      	ldr	r2, [pc, #552]	; (403000 <main+0x234>)
  402dd8:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk);             /* clear bits to change               */
  402dda:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
  402dde:	041b      	lsls	r3, r3, #16
  402de0:	0c1b      	lsrs	r3, r3, #16
  reg_value  =  (reg_value                                 |
  402de2:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  402de6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
                ((uint32_t)0x5FA << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8));                                     /* Insert write key and priorty group */
  SCB->AIRCR =  reg_value;
  402dea:	60d3      	str	r3, [r2, #12]
	NVIC_SetPriorityGrouping( 0 );
	board_init();
  402dec:	4b85      	ldr	r3, [pc, #532]	; (403004 <main+0x238>)
  402dee:	4798      	blx	r3

	/* OV7740 send image sensor data at 24 Mhz. For best performances, PCK0
	 * which will capture OV7740 data, has to work at 24Mhz. It's easier and
	 * optimum to use one PLL for core (PLLB) and one other for PCK0 (PLLA).
	 */
	pmc_enable_pllack(7, 0x1, 1); /* PLLA work at 96 Mhz */
  402df0:	2007      	movs	r0, #7
  402df2:	2101      	movs	r1, #1
  402df4:	460a      	mov	r2, r1
  402df6:	4b84      	ldr	r3, [pc, #528]	; (403008 <main+0x23c>)
  402df8:	4798      	blx	r3
static void display_init(void)
{
	struct ili9325_opt_t ili9325_display_opt;

	/* Enable peripheral clock */
	pmc_enable_periph_clk( ID_SMC );
  402dfa:	200a      	movs	r0, #10
  402dfc:	4e83      	ldr	r6, [pc, #524]	; (40300c <main+0x240>)
  402dfe:	47b0      	blx	r6

	/* Configure SMC interface for LCD */
	smc_set_setup_timing(SMC, ILI9325_LCD_CS, SMC_SETUP_NWE_SETUP(2)
  402e00:	4c83      	ldr	r4, [pc, #524]	; (403010 <main+0x244>)
  402e02:	4620      	mov	r0, r4
  402e04:	2102      	movs	r1, #2
  402e06:	f04f 3202 	mov.w	r2, #33686018	; 0x2020202
  402e0a:	f8df a2b0 	ldr.w	sl, [pc, #688]	; 4030bc <main+0x2f0>
  402e0e:	47d0      	blx	sl
			| SMC_SETUP_NCS_WR_SETUP(2)
			| SMC_SETUP_NRD_SETUP(2)
			| SMC_SETUP_NCS_RD_SETUP(2));

	smc_set_pulse_timing(SMC, ILI9325_LCD_CS, SMC_PULSE_NWE_PULSE(4)
  402e10:	4620      	mov	r0, r4
  402e12:	2102      	movs	r1, #2
  402e14:	4a7f      	ldr	r2, [pc, #508]	; (403014 <main+0x248>)
  402e16:	f8df 92a8 	ldr.w	r9, [pc, #680]	; 4030c0 <main+0x2f4>
  402e1a:	47c8      	blx	r9
			| SMC_PULSE_NCS_WR_PULSE(4)
			| SMC_PULSE_NRD_PULSE(10)
			| SMC_PULSE_NCS_RD_PULSE(10));

	smc_set_cycle_timing(SMC, ILI9325_LCD_CS, SMC_CYCLE_NWE_CYCLE(10)
  402e1c:	4620      	mov	r0, r4
  402e1e:	2102      	movs	r1, #2
  402e20:	4a7d      	ldr	r2, [pc, #500]	; (403018 <main+0x24c>)
  402e22:	f8df 82a0 	ldr.w	r8, [pc, #672]	; 4030c4 <main+0x2f8>
  402e26:	47c0      	blx	r8
			| SMC_CYCLE_NRD_CYCLE(22));

	smc_set_mode(SMC, ILI9325_LCD_CS, SMC_MODE_READ_MODE
  402e28:	4620      	mov	r0, r4
  402e2a:	2102      	movs	r1, #2
  402e2c:	2203      	movs	r2, #3
  402e2e:	4f7b      	ldr	r7, [pc, #492]	; (40301c <main+0x250>)
  402e30:	47b8      	blx	r7
			| SMC_MODE_WRITE_MODE);

	/* Initialize display parameter */
	ili9325_display_opt.ul_width = ILI9325_LCD_WIDTH;
  402e32:	23f0      	movs	r3, #240	; 0xf0
  402e34:	9304      	str	r3, [sp, #16]
	ili9325_display_opt.ul_height = ILI9325_LCD_HEIGHT;
  402e36:	f44f 73a0 	mov.w	r3, #320	; 0x140
  402e3a:	9305      	str	r3, [sp, #20]
	ili9325_display_opt.foreground_color = COLOR_BLACK;
  402e3c:	2500      	movs	r5, #0
  402e3e:	9506      	str	r5, [sp, #24]
	ili9325_display_opt.background_color = COLOR_WHITE;
  402e40:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
  402e44:	9307      	str	r3, [sp, #28]

	/* Switch off backlight */
	aat31xx_disable_backlight();
  402e46:	4b76      	ldr	r3, [pc, #472]	; (403020 <main+0x254>)
  402e48:	4798      	blx	r3

	/* Initialize LCD */
	ili9325_init(&ili9325_display_opt);
  402e4a:	a804      	add	r0, sp, #16
  402e4c:	4b75      	ldr	r3, [pc, #468]	; (403024 <main+0x258>)
  402e4e:	4798      	blx	r3

	/* Set backlight level */
	aat31xx_set_backlight(AAT31XX_MAX_BACKLIGHT_LEVEL);
  402e50:	2010      	movs	r0, #16
  402e52:	4b75      	ldr	r3, [pc, #468]	; (403028 <main+0x25c>)
  402e54:	4798      	blx	r3

	/* Turn on LCD */
	ili9325_display_on();
  402e56:	4b75      	ldr	r3, [pc, #468]	; (40302c <main+0x260>)
  402e58:	4798      	blx	r3

	/* LCD display initialization */
	display_init();

	/* LCD display information */
	ili9325_fill(COLOR_TURQUOISE);
  402e5a:	4875      	ldr	r0, [pc, #468]	; (403030 <main+0x264>)
  402e5c:	4b75      	ldr	r3, [pc, #468]	; (403034 <main+0x268>)
  402e5e:	4798      	blx	r3
	ili9325_draw_string(0, 20,
  402e60:	4628      	mov	r0, r5
  402e62:	2114      	movs	r1, #20
  402e64:	4a74      	ldr	r2, [pc, #464]	; (403038 <main+0x26c>)
  402e66:	f8df b224 	ldr.w	fp, [pc, #548]	; 40308c <main+0x2c0>
  402e6a:	47d8      	blx	fp
			(uint8_t *)"OV7740 image sensor\ncapture example");
	ili9325_draw_string(0, 80,
  402e6c:	4628      	mov	r0, r5
  402e6e:	2150      	movs	r1, #80	; 0x50
  402e70:	4a72      	ldr	r2, [pc, #456]	; (40303c <main+0x270>)
  402e72:	47d8      	blx	fp
 * \brief Configure SMC interface for SRAM.
 */
static void board_configure_sram( void )
{
	/* Enable peripheral clock */
	pmc_enable_periph_clk( ID_SMC );
  402e74:	200a      	movs	r0, #10
  402e76:	47b0      	blx	r6

	/* Configure SMC interface for SRAM */
	smc_set_setup_timing(SMC, SRAM_CS, SMC_SETUP_NWE_SETUP(2)
  402e78:	4620      	mov	r0, r4
  402e7a:	4629      	mov	r1, r5
  402e7c:	4a70      	ldr	r2, [pc, #448]	; (403040 <main+0x274>)
  402e7e:	47d0      	blx	sl
			| SMC_SETUP_NCS_WR_SETUP(0)
			| SMC_SETUP_NRD_SETUP(3)
			| SMC_SETUP_NCS_RD_SETUP(0));

	smc_set_pulse_timing(SMC, SRAM_CS, SMC_PULSE_NWE_PULSE(4)
  402e80:	4620      	mov	r0, r4
  402e82:	4629      	mov	r1, r5
  402e84:	4a6f      	ldr	r2, [pc, #444]	; (403044 <main+0x278>)
  402e86:	47c8      	blx	r9
			| SMC_PULSE_NCS_WR_PULSE(5)
			| SMC_PULSE_NRD_PULSE(4)
			| SMC_PULSE_NCS_RD_PULSE(6));

	smc_set_cycle_timing(SMC, SRAM_CS, SMC_CYCLE_NWE_CYCLE(6)
  402e88:	4620      	mov	r0, r4
  402e8a:	4629      	mov	r1, r5
  402e8c:	4a6e      	ldr	r2, [pc, #440]	; (403048 <main+0x27c>)
  402e8e:	47c0      	blx	r8
			| SMC_CYCLE_NRD_CYCLE(7));

	smc_set_mode(SMC, SRAM_CS, SMC_MODE_READ_MODE
  402e90:	4620      	mov	r0, r4
  402e92:	4629      	mov	r1, r5
  402e94:	2203      	movs	r2, #3
  402e96:	47b8      	blx	r7
 * \brief Configure push button and initialize button_handler interrupt.
 */
static void configure_button(void)
{
	/* Configure PIO clock. */
	pmc_enable_periph_clk(PUSH_BUTTON_ID);
  402e98:	200b      	movs	r0, #11
  402e9a:	47b0      	blx	r6

	/* Adjust PIO debounce filter using a 10 Hz filter. */
	pio_set_debounce_filter(PUSH_BUTTON_PIO, PUSH_BUTTON_PIN_MSK, 10);
  402e9c:	f504 6460 	add.w	r4, r4, #3584	; 0xe00
  402ea0:	4620      	mov	r0, r4
  402ea2:	2104      	movs	r1, #4
  402ea4:	220a      	movs	r2, #10
  402ea6:	4b69      	ldr	r3, [pc, #420]	; (40304c <main+0x280>)
  402ea8:	4798      	blx	r3

	/* Initialize PIO interrupt handler, see PIO definition in conf_board.h
	**/
	pio_handler_set(PUSH_BUTTON_PIO, PUSH_BUTTON_ID, PUSH_BUTTON_PIN_MSK,
  402eaa:	4b69      	ldr	r3, [pc, #420]	; (403050 <main+0x284>)
  402eac:	9300      	str	r3, [sp, #0]
  402eae:	4620      	mov	r0, r4
  402eb0:	210b      	movs	r1, #11
  402eb2:	2204      	movs	r2, #4
  402eb4:	2379      	movs	r3, #121	; 0x79
  402eb6:	f8df 8210 	ldr.w	r8, [pc, #528]	; 4030c8 <main+0x2fc>
  402eba:	47c0      	blx	r8
    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
/*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  402ebc:	4d65      	ldr	r5, [pc, #404]	; (403054 <main+0x288>)
  402ebe:	f44f 6700 	mov.w	r7, #2048	; 0x800
  402ec2:	602f      	str	r7, [r5, #0]

	/* Enable PIO controller IRQs. */
	NVIC_EnableIRQ((IRQn_Type)PUSH_BUTTON_ID);

	/* Enable PIO interrupt lines. */
	pio_enable_interrupt(PUSH_BUTTON_PIO, PUSH_BUTTON_PIN_MSK);
  402ec4:	4620      	mov	r0, r4
  402ec6:	2104      	movs	r1, #4
  402ec8:	4b63      	ldr	r3, [pc, #396]	; (403058 <main+0x28c>)
  402eca:	4798      	blx	r3
 */
static void init_vsync_interrupts(void)
{
	/* Initialize PIO interrupt handler, see PIO definition in conf_board.h
	**/
	pio_handler_set(OV7740_VSYNC_PIO, OV7740_VSYNC_ID, OV7740_VSYNC_MASK,
  402ecc:	4b63      	ldr	r3, [pc, #396]	; (40305c <main+0x290>)
  402ece:	9300      	str	r3, [sp, #0]
  402ed0:	4620      	mov	r0, r4
  402ed2:	210b      	movs	r1, #11
  402ed4:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  402ed8:	2301      	movs	r3, #1
  402eda:	47c0      	blx	r8
  402edc:	602f      	str	r7, [r5, #0]
 * \param ul_id Corresponding PIO ID.
 */
static void pio_capture_init(Pio *p_pio, uint32_t ul_id)
{
	/* Enable periphral clock */
	pmc_enable_periph_clk(ul_id);
  402ede:	200b      	movs	r0, #11
  402ee0:	47b0      	blx	r6

	/* Disable pio capture */
	p_pio->PIO_PCMR &= ~((uint32_t)PIO_PCMR_PCEN);
  402ee2:	f8d4 3150 	ldr.w	r3, [r4, #336]	; 0x150
  402ee6:	f023 0301 	bic.w	r3, r3, #1
  402eea:	f8c4 3150 	str.w	r3, [r4, #336]	; 0x150

	/* Disable rxbuff interrupt */
	p_pio->PIO_PCIDR |= PIO_PCIDR_RXBUFF;
  402eee:	f8d4 3158 	ldr.w	r3, [r4, #344]	; 0x158
  402ef2:	f043 0308 	orr.w	r3, r3, #8
  402ef6:	f8c4 3158 	str.w	r3, [r4, #344]	; 0x158

	/* 32bit width*/
	p_pio->PIO_PCMR &= ~((uint32_t)PIO_PCMR_DSIZE_Msk);
  402efa:	f8d4 3150 	ldr.w	r3, [r4, #336]	; 0x150
  402efe:	f023 0330 	bic.w	r3, r3, #48	; 0x30
  402f02:	f8c4 3150 	str.w	r3, [r4, #336]	; 0x150
	p_pio->PIO_PCMR |= PIO_PCMR_DSIZE_WORD;
  402f06:	f8d4 3150 	ldr.w	r3, [r4, #336]	; 0x150
  402f0a:	f043 0320 	orr.w	r3, r3, #32
  402f0e:	f8c4 3150 	str.w	r3, [r4, #336]	; 0x150

	/* Only HSYNC and VSYNC enabled */
	p_pio->PIO_PCMR &= ~((uint32_t)PIO_PCMR_ALWYS);
  402f12:	f8d4 3150 	ldr.w	r3, [r4, #336]	; 0x150
  402f16:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  402f1a:	f8c4 3150 	str.w	r3, [r4, #336]	; 0x150
	p_pio->PIO_PCMR &= ~((uint32_t)PIO_PCMR_HALFS);
  402f1e:	f8d4 3150 	ldr.w	r3, [r4, #336]	; 0x150
  402f22:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
  402f26:	f8c4 3150 	str.w	r3, [r4, #336]	; 0x150

	/* Init PIO capture*/
	pio_capture_init(OV_DATA_BUS_PIO, OV_DATA_BUS_ID);

	/* Turn on ov7740 image sensor using power pin */
	ov_power(true, OV_POWER_PIO, OV_POWER_MASK);
  402f2a:	2001      	movs	r0, #1
  402f2c:	494c      	ldr	r1, [pc, #304]	; (403060 <main+0x294>)
  402f2e:	f44f 6280 	mov.w	r2, #1024	; 0x400
  402f32:	4b4c      	ldr	r3, [pc, #304]	; (403064 <main+0x298>)
  402f34:	4798      	blx	r3

	/* Init PCK0 to work at 24 Mhz */
	/* 96/4=24 Mhz */
	PMC->PMC_PCK[0] = (PMC_PCK_PRES_CLK_4 | PMC_PCK_CSS_PLLA_CLK);
  402f36:	4b4c      	ldr	r3, [pc, #304]	; (403068 <main+0x29c>)
  402f38:	2222      	movs	r2, #34	; 0x22
  402f3a:	641a      	str	r2, [r3, #64]	; 0x40
	PMC->PMC_SCER = PMC_SCER_PCK0;
  402f3c:	f44f 7280 	mov.w	r2, #256	; 0x100
  402f40:	601a      	str	r2, [r3, #0]
	while (!(PMC->PMC_SCSR & PMC_SCSR_PCK0)) {
  402f42:	461a      	mov	r2, r3
  402f44:	6893      	ldr	r3, [r2, #8]
  402f46:	f413 7f80 	tst.w	r3, #256	; 0x100
  402f4a:	d0fb      	beq.n	402f44 <main+0x178>
	}

	/* Enable TWI peripheral */
	pmc_enable_periph_clk(ID_BOARD_TWI);
  402f4c:	2013      	movs	r0, #19
  402f4e:	4b2f      	ldr	r3, [pc, #188]	; (40300c <main+0x240>)
  402f50:	4798      	blx	r3

	/* Init TWI peripheral */
	opt.master_clk = sysclk_get_cpu_hz();
  402f52:	4b46      	ldr	r3, [pc, #280]	; (40306c <main+0x2a0>)
  402f54:	9304      	str	r3, [sp, #16]
	opt.speed      = TWI_CLK;
  402f56:	4b46      	ldr	r3, [pc, #280]	; (403070 <main+0x2a4>)
  402f58:	9305      	str	r3, [sp, #20]
	twi_master_init(BOARD_TWI, &opt);
  402f5a:	4846      	ldr	r0, [pc, #280]	; (403074 <main+0x2a8>)
  402f5c:	a904      	add	r1, sp, #16
  402f5e:	4b46      	ldr	r3, [pc, #280]	; (403078 <main+0x2ac>)
  402f60:	4798      	blx	r3

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
  402f62:	4b3c      	ldr	r3, [pc, #240]	; (403054 <main+0x288>)
  402f64:	f44f 2200 	mov.w	r2, #524288	; 0x80000
  402f68:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
  402f6c:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
  402f70:	2100      	movs	r1, #0
  402f72:	f883 1313 	strb.w	r1, [r3, #787]	; 0x313
    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
/*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  402f76:	601a      	str	r2, [r3, #0]
	NVIC_ClearPendingIRQ(BOARD_TWI_IRQn);
	NVIC_SetPriority(BOARD_TWI_IRQn, 0);
	NVIC_EnableIRQ(BOARD_TWI_IRQn);

	/* ov7740 Initialization */
	while (ov_init(BOARD_TWI) == 1) {
  402f78:	4d3e      	ldr	r5, [pc, #248]	; (403074 <main+0x2a8>)
  402f7a:	4c40      	ldr	r4, [pc, #256]	; (40307c <main+0x2b0>)
  402f7c:	4628      	mov	r0, r5
  402f7e:	47a0      	blx	r4
  402f80:	2801      	cmp	r0, #1
  402f82:	d0fb      	beq.n	402f7c <main+0x1b0>
	}

	/* ov7740 configuration */
	ov_configure(BOARD_TWI, QVGA_YUV422_20FPS);
  402f84:	483b      	ldr	r0, [pc, #236]	; (403074 <main+0x2a8>)
  402f86:	2102      	movs	r1, #2
  402f88:	4b3d      	ldr	r3, [pc, #244]	; (403080 <main+0x2b4>)
  402f8a:	4798      	blx	r3

	/* Wait 3 seconds to let the image sensor to adapt to environment */
	delay_ms(3000);
  402f8c:	483d      	ldr	r0, [pc, #244]	; (403084 <main+0x2b8>)
  402f8e:	4c3e      	ldr	r4, [pc, #248]	; (403088 <main+0x2bc>)
  402f90:	47a0      	blx	r4

	/* OV7740 image sensor initialization*/
	capture_init();

	/* LCD display information*/
	ili9325_fill(COLOR_TURQUOISE);
  402f92:	4827      	ldr	r0, [pc, #156]	; (403030 <main+0x264>)
  402f94:	4b27      	ldr	r3, [pc, #156]	; (403034 <main+0x268>)
  402f96:	4798      	blx	r3
	ili9325_draw_string(0, 20,
  402f98:	2000      	movs	r0, #0
  402f9a:	2114      	movs	r1, #20
  402f9c:	4a26      	ldr	r2, [pc, #152]	; (403038 <main+0x26c>)
  402f9e:	4d3b      	ldr	r5, [pc, #236]	; (40308c <main+0x2c0>)
  402fa0:	47a8      	blx	r5
			(uint8_t *)"OV7740 image sensor\ncapture example");
	ili9325_draw_string(0, 80,
  402fa2:	2000      	movs	r0, #0
  402fa4:	2150      	movs	r1, #80	; 0x50
  402fa6:	4a3a      	ldr	r2, [pc, #232]	; (403090 <main+0x2c4>)
  402fa8:	47a8      	blx	r5
			(uint8_t *)"Please Press button\nto take and display\na picture");

	LED_On(LED0_GPIO);
  402faa:	204c      	movs	r0, #76	; 0x4c
  402fac:	4d39      	ldr	r5, [pc, #228]	; (403094 <main+0x2c8>)
  402fae:	47a8      	blx	r5
	delay_ms(2000);
  402fb0:	4839      	ldr	r0, [pc, #228]	; (403098 <main+0x2cc>)
  402fb2:	47a0      	blx	r4
	LED_Off(LED0_GPIO);
  402fb4:	204c      	movs	r0, #76	; 0x4c
  402fb6:	4b39      	ldr	r3, [pc, #228]	; (40309c <main+0x2d0>)
  402fb8:	4798      	blx	r3
	delay_ms(1000);
  402fba:	4839      	ldr	r0, [pc, #228]	; (4030a0 <main+0x2d4>)
  402fbc:	47a0      	blx	r4
	LED_On(LED0_GPIO);
  402fbe:	204c      	movs	r0, #76	; 0x4c
  402fc0:	47a8      	blx	r5
	}*/

//~~~~~~~ FreeRTOS specific init ~~~~~~~~~~~~~~~~~~~

	/* Create task to make led blink */
	if (xTaskCreate(task_led, "Led", TASK_LED_STACK_SIZE, NULL,
  402fc2:	2400      	movs	r4, #0
  402fc4:	9400      	str	r4, [sp, #0]
  402fc6:	9401      	str	r4, [sp, #4]
  402fc8:	9402      	str	r4, [sp, #8]
  402fca:	9403      	str	r4, [sp, #12]
  402fcc:	4835      	ldr	r0, [pc, #212]	; (4030a4 <main+0x2d8>)
  402fce:	4936      	ldr	r1, [pc, #216]	; (4030a8 <main+0x2dc>)
  402fd0:	f44f 7280 	mov.w	r2, #256	; 0x100
  402fd4:	4623      	mov	r3, r4
  402fd6:	4d35      	ldr	r5, [pc, #212]	; (4030ac <main+0x2e0>)
  402fd8:	47a8      	blx	r5
	TASK_LED_STACK_PRIORITY, NULL) != pdPASS) {
		//printf("Failed to create test led task\r\n");
	}

	/* Create task to make led blink */
	if (xTaskCreate(task_lcdscreen, "LCD", TASK_LED_STACK_SIZE, NULL,
  402fda:	9400      	str	r4, [sp, #0]
  402fdc:	9401      	str	r4, [sp, #4]
  402fde:	9402      	str	r4, [sp, #8]
  402fe0:	9403      	str	r4, [sp, #12]
  402fe2:	4833      	ldr	r0, [pc, #204]	; (4030b0 <main+0x2e4>)
  402fe4:	4933      	ldr	r1, [pc, #204]	; (4030b4 <main+0x2e8>)
  402fe6:	f44f 7280 	mov.w	r2, #256	; 0x100
  402fea:	4623      	mov	r3, r4
  402fec:	47a8      	blx	r5
	//if (xTaskCreate(task_display, "Display", TASK_MONITOR_STACK_SIZE, NULL,
	//TASK_LED_STACK_PRIORITY, NULL) != pdPASS) {
		//printf("Failed to create test led task\r\n");
	//}

	vTaskStartScheduler();
  402fee:	4b32      	ldr	r3, [pc, #200]	; (4030b8 <main+0x2ec>)
  402ff0:	4798      	blx	r3
	
	/* Will only get here if there was insufficient memory to create the idle task. */
	return 0;	
	
	
}
  402ff2:	4620      	mov	r0, r4
  402ff4:	b009      	add	sp, #36	; 0x24
  402ff6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  402ffa:	bf00      	nop
  402ffc:	00400129 	.word	0x00400129
  403000:	e000ed00 	.word	0xe000ed00
  403004:	0040018d 	.word	0x0040018d
  403008:	00400e21 	.word	0x00400e21
  40300c:	00400e79 	.word	0x00400e79
  403010:	400e0000 	.word	0x400e0000
  403014:	0a0a0404 	.word	0x0a0a0404
  403018:	0016000a 	.word	0x0016000a
  40301c:	004009a5 	.word	0x004009a5
  403020:	004005bd 	.word	0x004005bd
  403024:	004006cd 	.word	0x004006cd
  403028:	00400561 	.word	0x00400561
  40302c:	00400649 	.word	0x00400649
  403030:	0040e0d0 	.word	0x0040e0d0
  403034:	00400871 	.word	0x00400871
  403038:	00404400 	.word	0x00404400
  40303c:	00404424 	.word	0x00404424
  403040:	00030002 	.word	0x00030002
  403044:	06040504 	.word	0x06040504
  403048:	00070006 	.word	0x00070006
  40304c:	004009ad 	.word	0x004009ad
  403050:	00402d49 	.word	0x00402d49
  403054:	e000e100 	.word	0xe000e100
  403058:	00400af1 	.word	0x00400af1
  40305c:	00402d3d 	.word	0x00402d3d
  403060:	400e1200 	.word	0x400e1200
  403064:	00400345 	.word	0x00400345
  403068:	400e0400 	.word	0x400e0400
  40306c:	07270e00 	.word	0x07270e00
  403070:	00061a80 	.word	0x00061a80
  403074:	40018000 	.word	0x40018000
  403078:	00400f11 	.word	0x00400f11
  40307c:	004003dd 	.word	0x004003dd
  403080:	004004f5 	.word	0x004004f5
  403084:	01885e6e 	.word	0x01885e6e
  403088:	20000001 	.word	0x20000001
  40308c:	004008e1 	.word	0x004008e1
  403090:	00404448 	.word	0x00404448
  403094:	00400b19 	.word	0x00400b19
  403098:	0105944a 	.word	0x0105944a
  40309c:	00400b01 	.word	0x00400b01
  4030a0:	0082ca25 	.word	0x0082ca25
  4030a4:	00402d95 	.word	0x00402d95
  4030a8:	0040447c 	.word	0x0040447c
  4030ac:	00401f55 	.word	0x00401f55
  4030b0:	00402d55 	.word	0x00402d55
  4030b4:	00404480 	.word	0x00404480
  4030b8:	00402155 	.word	0x00402155
  4030bc:	0040098d 	.word	0x0040098d
  4030c0:	00400995 	.word	0x00400995
  4030c4:	0040099d 	.word	0x0040099d
  4030c8:	00400cdd 	.word	0x00400cdd

004030cc <__libc_init_array>:
  4030cc:	b570      	push	{r4, r5, r6, lr}
  4030ce:	4e0f      	ldr	r6, [pc, #60]	; (40310c <__libc_init_array+0x40>)
  4030d0:	4d0f      	ldr	r5, [pc, #60]	; (403110 <__libc_init_array+0x44>)
  4030d2:	1b76      	subs	r6, r6, r5
  4030d4:	10b6      	asrs	r6, r6, #2
  4030d6:	bf18      	it	ne
  4030d8:	2400      	movne	r4, #0
  4030da:	d005      	beq.n	4030e8 <__libc_init_array+0x1c>
  4030dc:	3401      	adds	r4, #1
  4030de:	f855 3b04 	ldr.w	r3, [r5], #4
  4030e2:	4798      	blx	r3
  4030e4:	42a6      	cmp	r6, r4
  4030e6:	d1f9      	bne.n	4030dc <__libc_init_array+0x10>
  4030e8:	4e0a      	ldr	r6, [pc, #40]	; (403114 <__libc_init_array+0x48>)
  4030ea:	4d0b      	ldr	r5, [pc, #44]	; (403118 <__libc_init_array+0x4c>)
  4030ec:	1b76      	subs	r6, r6, r5
  4030ee:	f001 f9cd 	bl	40448c <_init>
  4030f2:	10b6      	asrs	r6, r6, #2
  4030f4:	bf18      	it	ne
  4030f6:	2400      	movne	r4, #0
  4030f8:	d006      	beq.n	403108 <__libc_init_array+0x3c>
  4030fa:	3401      	adds	r4, #1
  4030fc:	f855 3b04 	ldr.w	r3, [r5], #4
  403100:	4798      	blx	r3
  403102:	42a6      	cmp	r6, r4
  403104:	d1f9      	bne.n	4030fa <__libc_init_array+0x2e>
  403106:	bd70      	pop	{r4, r5, r6, pc}
  403108:	bd70      	pop	{r4, r5, r6, pc}
  40310a:	bf00      	nop
  40310c:	00404498 	.word	0x00404498
  403110:	00404498 	.word	0x00404498
  403114:	004044a0 	.word	0x004044a0
  403118:	00404498 	.word	0x00404498

0040311c <memcpy>:
  40311c:	4684      	mov	ip, r0
  40311e:	ea41 0300 	orr.w	r3, r1, r0
  403122:	f013 0303 	ands.w	r3, r3, #3
  403126:	d16d      	bne.n	403204 <memcpy+0xe8>
  403128:	3a40      	subs	r2, #64	; 0x40
  40312a:	d341      	bcc.n	4031b0 <memcpy+0x94>
  40312c:	f851 3b04 	ldr.w	r3, [r1], #4
  403130:	f840 3b04 	str.w	r3, [r0], #4
  403134:	f851 3b04 	ldr.w	r3, [r1], #4
  403138:	f840 3b04 	str.w	r3, [r0], #4
  40313c:	f851 3b04 	ldr.w	r3, [r1], #4
  403140:	f840 3b04 	str.w	r3, [r0], #4
  403144:	f851 3b04 	ldr.w	r3, [r1], #4
  403148:	f840 3b04 	str.w	r3, [r0], #4
  40314c:	f851 3b04 	ldr.w	r3, [r1], #4
  403150:	f840 3b04 	str.w	r3, [r0], #4
  403154:	f851 3b04 	ldr.w	r3, [r1], #4
  403158:	f840 3b04 	str.w	r3, [r0], #4
  40315c:	f851 3b04 	ldr.w	r3, [r1], #4
  403160:	f840 3b04 	str.w	r3, [r0], #4
  403164:	f851 3b04 	ldr.w	r3, [r1], #4
  403168:	f840 3b04 	str.w	r3, [r0], #4
  40316c:	f851 3b04 	ldr.w	r3, [r1], #4
  403170:	f840 3b04 	str.w	r3, [r0], #4
  403174:	f851 3b04 	ldr.w	r3, [r1], #4
  403178:	f840 3b04 	str.w	r3, [r0], #4
  40317c:	f851 3b04 	ldr.w	r3, [r1], #4
  403180:	f840 3b04 	str.w	r3, [r0], #4
  403184:	f851 3b04 	ldr.w	r3, [r1], #4
  403188:	f840 3b04 	str.w	r3, [r0], #4
  40318c:	f851 3b04 	ldr.w	r3, [r1], #4
  403190:	f840 3b04 	str.w	r3, [r0], #4
  403194:	f851 3b04 	ldr.w	r3, [r1], #4
  403198:	f840 3b04 	str.w	r3, [r0], #4
  40319c:	f851 3b04 	ldr.w	r3, [r1], #4
  4031a0:	f840 3b04 	str.w	r3, [r0], #4
  4031a4:	f851 3b04 	ldr.w	r3, [r1], #4
  4031a8:	f840 3b04 	str.w	r3, [r0], #4
  4031ac:	3a40      	subs	r2, #64	; 0x40
  4031ae:	d2bd      	bcs.n	40312c <memcpy+0x10>
  4031b0:	3230      	adds	r2, #48	; 0x30
  4031b2:	d311      	bcc.n	4031d8 <memcpy+0xbc>
  4031b4:	f851 3b04 	ldr.w	r3, [r1], #4
  4031b8:	f840 3b04 	str.w	r3, [r0], #4
  4031bc:	f851 3b04 	ldr.w	r3, [r1], #4
  4031c0:	f840 3b04 	str.w	r3, [r0], #4
  4031c4:	f851 3b04 	ldr.w	r3, [r1], #4
  4031c8:	f840 3b04 	str.w	r3, [r0], #4
  4031cc:	f851 3b04 	ldr.w	r3, [r1], #4
  4031d0:	f840 3b04 	str.w	r3, [r0], #4
  4031d4:	3a10      	subs	r2, #16
  4031d6:	d2ed      	bcs.n	4031b4 <memcpy+0x98>
  4031d8:	320c      	adds	r2, #12
  4031da:	d305      	bcc.n	4031e8 <memcpy+0xcc>
  4031dc:	f851 3b04 	ldr.w	r3, [r1], #4
  4031e0:	f840 3b04 	str.w	r3, [r0], #4
  4031e4:	3a04      	subs	r2, #4
  4031e6:	d2f9      	bcs.n	4031dc <memcpy+0xc0>
  4031e8:	3204      	adds	r2, #4
  4031ea:	d008      	beq.n	4031fe <memcpy+0xe2>
  4031ec:	07d2      	lsls	r2, r2, #31
  4031ee:	bf1c      	itt	ne
  4031f0:	f811 3b01 	ldrbne.w	r3, [r1], #1
  4031f4:	f800 3b01 	strbne.w	r3, [r0], #1
  4031f8:	d301      	bcc.n	4031fe <memcpy+0xe2>
  4031fa:	880b      	ldrh	r3, [r1, #0]
  4031fc:	8003      	strh	r3, [r0, #0]
  4031fe:	4660      	mov	r0, ip
  403200:	4770      	bx	lr
  403202:	bf00      	nop
  403204:	2a08      	cmp	r2, #8
  403206:	d313      	bcc.n	403230 <memcpy+0x114>
  403208:	078b      	lsls	r3, r1, #30
  40320a:	d08d      	beq.n	403128 <memcpy+0xc>
  40320c:	f010 0303 	ands.w	r3, r0, #3
  403210:	d08a      	beq.n	403128 <memcpy+0xc>
  403212:	f1c3 0304 	rsb	r3, r3, #4
  403216:	1ad2      	subs	r2, r2, r3
  403218:	07db      	lsls	r3, r3, #31
  40321a:	bf1c      	itt	ne
  40321c:	f811 3b01 	ldrbne.w	r3, [r1], #1
  403220:	f800 3b01 	strbne.w	r3, [r0], #1
  403224:	d380      	bcc.n	403128 <memcpy+0xc>
  403226:	f831 3b02 	ldrh.w	r3, [r1], #2
  40322a:	f820 3b02 	strh.w	r3, [r0], #2
  40322e:	e77b      	b.n	403128 <memcpy+0xc>
  403230:	3a04      	subs	r2, #4
  403232:	d3d9      	bcc.n	4031e8 <memcpy+0xcc>
  403234:	3a01      	subs	r2, #1
  403236:	f811 3b01 	ldrb.w	r3, [r1], #1
  40323a:	f800 3b01 	strb.w	r3, [r0], #1
  40323e:	d2f9      	bcs.n	403234 <memcpy+0x118>
  403240:	780b      	ldrb	r3, [r1, #0]
  403242:	7003      	strb	r3, [r0, #0]
  403244:	784b      	ldrb	r3, [r1, #1]
  403246:	7043      	strb	r3, [r0, #1]
  403248:	788b      	ldrb	r3, [r1, #2]
  40324a:	7083      	strb	r3, [r0, #2]
  40324c:	4660      	mov	r0, ip
  40324e:	4770      	bx	lr

00403250 <memset>:
  403250:	b470      	push	{r4, r5, r6}
  403252:	0784      	lsls	r4, r0, #30
  403254:	d046      	beq.n	4032e4 <memset+0x94>
  403256:	1e54      	subs	r4, r2, #1
  403258:	2a00      	cmp	r2, #0
  40325a:	d041      	beq.n	4032e0 <memset+0x90>
  40325c:	b2cd      	uxtb	r5, r1
  40325e:	4603      	mov	r3, r0
  403260:	e002      	b.n	403268 <memset+0x18>
  403262:	1e62      	subs	r2, r4, #1
  403264:	b3e4      	cbz	r4, 4032e0 <memset+0x90>
  403266:	4614      	mov	r4, r2
  403268:	f803 5b01 	strb.w	r5, [r3], #1
  40326c:	079a      	lsls	r2, r3, #30
  40326e:	d1f8      	bne.n	403262 <memset+0x12>
  403270:	2c03      	cmp	r4, #3
  403272:	d92e      	bls.n	4032d2 <memset+0x82>
  403274:	b2cd      	uxtb	r5, r1
  403276:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
  40327a:	2c0f      	cmp	r4, #15
  40327c:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
  403280:	d919      	bls.n	4032b6 <memset+0x66>
  403282:	f103 0210 	add.w	r2, r3, #16
  403286:	4626      	mov	r6, r4
  403288:	3e10      	subs	r6, #16
  40328a:	2e0f      	cmp	r6, #15
  40328c:	f842 5c10 	str.w	r5, [r2, #-16]
  403290:	f842 5c0c 	str.w	r5, [r2, #-12]
  403294:	f842 5c08 	str.w	r5, [r2, #-8]
  403298:	f842 5c04 	str.w	r5, [r2, #-4]
  40329c:	f102 0210 	add.w	r2, r2, #16
  4032a0:	d8f2      	bhi.n	403288 <memset+0x38>
  4032a2:	f1a4 0210 	sub.w	r2, r4, #16
  4032a6:	f022 020f 	bic.w	r2, r2, #15
  4032aa:	f004 040f 	and.w	r4, r4, #15
  4032ae:	3210      	adds	r2, #16
  4032b0:	2c03      	cmp	r4, #3
  4032b2:	4413      	add	r3, r2
  4032b4:	d90d      	bls.n	4032d2 <memset+0x82>
  4032b6:	461e      	mov	r6, r3
  4032b8:	4622      	mov	r2, r4
  4032ba:	3a04      	subs	r2, #4
  4032bc:	2a03      	cmp	r2, #3
  4032be:	f846 5b04 	str.w	r5, [r6], #4
  4032c2:	d8fa      	bhi.n	4032ba <memset+0x6a>
  4032c4:	1f22      	subs	r2, r4, #4
  4032c6:	f022 0203 	bic.w	r2, r2, #3
  4032ca:	3204      	adds	r2, #4
  4032cc:	4413      	add	r3, r2
  4032ce:	f004 0403 	and.w	r4, r4, #3
  4032d2:	b12c      	cbz	r4, 4032e0 <memset+0x90>
  4032d4:	b2c9      	uxtb	r1, r1
  4032d6:	441c      	add	r4, r3
  4032d8:	f803 1b01 	strb.w	r1, [r3], #1
  4032dc:	42a3      	cmp	r3, r4
  4032de:	d1fb      	bne.n	4032d8 <memset+0x88>
  4032e0:	bc70      	pop	{r4, r5, r6}
  4032e2:	4770      	bx	lr
  4032e4:	4614      	mov	r4, r2
  4032e6:	4603      	mov	r3, r0
  4032e8:	e7c2      	b.n	403270 <memset+0x20>
  4032ea:	bf00      	nop

004032ec <register_fini>:
  4032ec:	4b02      	ldr	r3, [pc, #8]	; (4032f8 <register_fini+0xc>)
  4032ee:	b113      	cbz	r3, 4032f6 <register_fini+0xa>
  4032f0:	4802      	ldr	r0, [pc, #8]	; (4032fc <register_fini+0x10>)
  4032f2:	f000 b805 	b.w	403300 <atexit>
  4032f6:	4770      	bx	lr
  4032f8:	00000000 	.word	0x00000000
  4032fc:	0040330d 	.word	0x0040330d

00403300 <atexit>:
  403300:	4601      	mov	r1, r0
  403302:	2000      	movs	r0, #0
  403304:	4602      	mov	r2, r0
  403306:	4603      	mov	r3, r0
  403308:	f000 b816 	b.w	403338 <__register_exitproc>

0040330c <__libc_fini_array>:
  40330c:	b538      	push	{r3, r4, r5, lr}
  40330e:	4b08      	ldr	r3, [pc, #32]	; (403330 <__libc_fini_array+0x24>)
  403310:	4d08      	ldr	r5, [pc, #32]	; (403334 <__libc_fini_array+0x28>)
  403312:	1aed      	subs	r5, r5, r3
  403314:	10ac      	asrs	r4, r5, #2
  403316:	bf18      	it	ne
  403318:	18ed      	addne	r5, r5, r3
  40331a:	d005      	beq.n	403328 <__libc_fini_array+0x1c>
  40331c:	3c01      	subs	r4, #1
  40331e:	f855 3d04 	ldr.w	r3, [r5, #-4]!
  403322:	4798      	blx	r3
  403324:	2c00      	cmp	r4, #0
  403326:	d1f9      	bne.n	40331c <__libc_fini_array+0x10>
  403328:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  40332c:	f001 b8b8 	b.w	4044a0 <_fini>
  403330:	004044ac 	.word	0x004044ac
  403334:	004044b0 	.word	0x004044b0

00403338 <__register_exitproc>:
  403338:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  40333c:	4c25      	ldr	r4, [pc, #148]	; (4033d4 <__register_exitproc+0x9c>)
  40333e:	6825      	ldr	r5, [r4, #0]
  403340:	f8d5 4148 	ldr.w	r4, [r5, #328]	; 0x148
  403344:	4606      	mov	r6, r0
  403346:	4688      	mov	r8, r1
  403348:	4692      	mov	sl, r2
  40334a:	4699      	mov	r9, r3
  40334c:	b3cc      	cbz	r4, 4033c2 <__register_exitproc+0x8a>
  40334e:	6860      	ldr	r0, [r4, #4]
  403350:	281f      	cmp	r0, #31
  403352:	dc18      	bgt.n	403386 <__register_exitproc+0x4e>
  403354:	1c43      	adds	r3, r0, #1
  403356:	b17e      	cbz	r6, 403378 <__register_exitproc+0x40>
  403358:	eb04 0580 	add.w	r5, r4, r0, lsl #2
  40335c:	2101      	movs	r1, #1
  40335e:	f8c5 a088 	str.w	sl, [r5, #136]	; 0x88
  403362:	f8d4 7188 	ldr.w	r7, [r4, #392]	; 0x188
  403366:	fa01 f200 	lsl.w	r2, r1, r0
  40336a:	4317      	orrs	r7, r2
  40336c:	2e02      	cmp	r6, #2
  40336e:	f8c4 7188 	str.w	r7, [r4, #392]	; 0x188
  403372:	f8c5 9108 	str.w	r9, [r5, #264]	; 0x108
  403376:	d01e      	beq.n	4033b6 <__register_exitproc+0x7e>
  403378:	3002      	adds	r0, #2
  40337a:	6063      	str	r3, [r4, #4]
  40337c:	f844 8020 	str.w	r8, [r4, r0, lsl #2]
  403380:	2000      	movs	r0, #0
  403382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  403386:	4b14      	ldr	r3, [pc, #80]	; (4033d8 <__register_exitproc+0xa0>)
  403388:	b303      	cbz	r3, 4033cc <__register_exitproc+0x94>
  40338a:	f44f 70c8 	mov.w	r0, #400	; 0x190
  40338e:	f3af 8000 	nop.w
  403392:	4604      	mov	r4, r0
  403394:	b1d0      	cbz	r0, 4033cc <__register_exitproc+0x94>
  403396:	f8d5 3148 	ldr.w	r3, [r5, #328]	; 0x148
  40339a:	2700      	movs	r7, #0
  40339c:	e880 0088 	stmia.w	r0, {r3, r7}
  4033a0:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
  4033a4:	4638      	mov	r0, r7
  4033a6:	2301      	movs	r3, #1
  4033a8:	f8c4 7188 	str.w	r7, [r4, #392]	; 0x188
  4033ac:	f8c4 718c 	str.w	r7, [r4, #396]	; 0x18c
  4033b0:	2e00      	cmp	r6, #0
  4033b2:	d0e1      	beq.n	403378 <__register_exitproc+0x40>
  4033b4:	e7d0      	b.n	403358 <__register_exitproc+0x20>
  4033b6:	f8d4 118c 	ldr.w	r1, [r4, #396]	; 0x18c
  4033ba:	430a      	orrs	r2, r1
  4033bc:	f8c4 218c 	str.w	r2, [r4, #396]	; 0x18c
  4033c0:	e7da      	b.n	403378 <__register_exitproc+0x40>
  4033c2:	f505 74a6 	add.w	r4, r5, #332	; 0x14c
  4033c6:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
  4033ca:	e7c0      	b.n	40334e <__register_exitproc+0x16>
  4033cc:	f04f 30ff 	mov.w	r0, #4294967295
  4033d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4033d4:	00404488 	.word	0x00404488
  4033d8:	00000000 	.word	0x00000000

004033dc <OV7740_VGA_YUV422_20FPS>:
  4033dc:	8012000e 001305fe 00120211 d40c10d5     ................
  4033ec:	0116340d a0182517 f01a0319 0322891b     .4...%........".
  4033fc:	f82b1829 a031012c c433f032 3f36b43a     ).+.,.1.2.3.:.6?
  40340c:	80276004 803e0f3d 7f40403f 29426a41     .`'.=.>.?@@.AjB)
  40341c:	4145e544 64490247 704ba14a 504d1a4c     D.EAG.IdJ.KpL.MP
  40342c:	0064134e 1a688867 3c243814 72263025     N.d.g.h..8$<%0&r
  40343c:	7e519750 00530052 23210020 00e91438     P.Q~R.S. .!#8...
  40344c:	ff575556 ff59ff58 00ec045f 7f80ff13     VUW.X.Y._.......
  40345c:	32823f81 11380183 03860085 05880187     .?.2..8.........
  40346c:	308d3089 3093858f 30998595 089c859b     .0.0...0...0....
  40347c:	239e129d 55a0459f 72a264a1 8ba47fa3     ...#.E.U.d.r....
  40348c:	a7a695a5 cba8b5a7 ecaadda9 78ce1aab     ...............x
  40349c:	0ad06ecf 84d20cd1 1ed490d3 1f5b245a     .n..........Z$[.
  4034ac:	605d885c ffbe6eac a03100bf 3f82f032     \.]`.n....1.2..?
  4034bc:	3f360012 c4330053 0322891b ffff0228     ..6?S.3...".(...

004034cc <OV7740_QQVGA_RGB888>:
  4034cc:	8012000e 01110013 10d50012 340d120c     ...............4
  4034dc:	a0182517 f01a0319 0322891b f82b1829     .%........".).+.
  4034ec:	a031012c c433f032 3f36b43a 80276004     ,.1.2.3.:.6?.`'.
  4034fc:	803e0f3d 7f40403f 29426a41 4145e544     =.>.?@@.AjB)D.EA
  40350c:	64490247 704ba14a 504d1a4c 0064134e     G.IdJ.KpL.MPN.d.
  40351c:	1a688867 3c243814 72263025 7e519750     g.h..8$<%0&rP.Q~
  40352c:	00530052 23210020 00e91438 ff575556     R.S. .!#8...VUW.
  40353c:	ff59ff58 00ec045f 7f80ff13 32823f81     X.Y._........?.2
  40354c:	11380183 00857084 01870386 30890588     ..8..p.........0
  40355c:	858f308d 85953093 859b3099 129d089c     .0...0...0......
  40356c:	459f239e 64a155a0 7fa372a2 95a58ba4     .#.E.U.d.r......
  40357c:	b5a7a7a6 dda9cba8 1aabecaa 6ecf78ce     .............x.n
  40358c:	0cd10ad0 90d384d2 245a1ed4 885c1f5b     ..........Z$[.\.
  40359c:	6eac605d 00bfffbe 3c322831 01123f82     ]`.n....1(2<.?..
  4035ac:	04832f36 f4330053 03228a1b 00840084     6/..S.3...".....
  4035bc:	ffff0228                                (...

004035c0 <OV7740_QVGA_YUV422_15FPS>:
  4035c0:	8012000e 001305fe 00120311 d40c10d5     ................
  4035d0:	0116340d a0182517 f01a0319 0322891b     .4...%........".
  4035e0:	f82b1829 a031012c c433f032 3f36b43a     ).+.,.1.2.3.:.6?
  4035f0:	80276004 803e0f3d 7f40403f 29426a41     .`'.=.>.?@@.AjB)
  403600:	4145e544 64490247 704ba14a 504d1a4c     D.EAG.IdJ.KpL.MP
  403610:	0064134e 1a688867 3c243814 72263025     N.d.g.h..8$<%0&r
  403620:	7e519750 00530052 23210020 00e91438     P.Q~R.S. .!#8...
  403630:	ff575556 ff59ff58 00ec045f 7f80ff13     VUW.X.Y._.......
  403640:	32823f81 11380183 03860085 05880187     .?.2..8.........
  403650:	308d3089 3093858f 30998595 089c859b     .0.0...0...0....
  403660:	239e129d 55a0459f 72a264a1 8ba47fa3     ...#.E.U.d.r....
  403670:	a7a695a5 cba8b5a7 ecaadda9 78ce1aab     ...............x
  403680:	0ad06ecf 84d20cd1 1ed490d3 1f5b245a     .n..........Z$[.
  403690:	605d885c ffbe6eac 503100bf 3f827832     \.]`.n....1P2x.?
  4036a0:	3f360012 c4330053 0322891b ffff0228     ..6?S.3...".(...

004036b0 <OV7740_QVGA_RGB888>:
  4036b0:	8012000e 01110013 10d50012 340d120c     ...............4
  4036c0:	a0182517 f01a0319 0322891b f82b1829     .%........".).+.
  4036d0:	a031012c c433f032 3f36b43a 80276004     ,.1.2.3.:.6?.`'.
  4036e0:	803e0f3d 7f40403f 29426a41 4145e544     =.>.?@@.AjB)D.EA
  4036f0:	64490247 704ba14a 504d1a4c 0064134e     G.IdJ.KpL.MPN.d.
  403700:	1a688867 3c243814 72263025 7e519750     g.h..8$<%0&rP.Q~
  403710:	00530052 23210020 00e91438 ff575556     R.S. .!#8...VUW.
  403720:	ff59ff58 00ec045f 7f80ff13 32823f81     X.Y._........?.2
  403730:	11380183 00857084 01870386 30890588     ..8..p.........0
  403740:	858f308d 85953093 859b3099 129d089c     .0...0...0......
  403750:	459f239e 64a155a0 7fa372a2 95a58ba4     .#.E.U.d.r......
  403760:	b5a7a7a6 dda9cba8 1aabecaa 6ecf78ce     .............x.n
  403770:	0cd10ad0 90d384d2 245a1ed4 885c1f5b     ..........Z$[.\.
  403780:	6eac605d 00bfffbe 78325031 01123f82     ]`.n....1P2x.?..
  403790:	04832f36 f4330053 03228a1b 00840084     6/..S.3...".....
  4037a0:	ffff0228                                (...

004037a4 <OV7740_TEST_PATTERN>:
  4037a4:	8012000e 001305fe 00120211 d40c10d5     ................
  4037b4:	0116340d a0182517 f01a0319 0322891b     .4...%........".
  4037c4:	f82b1829 a031012c c433f032 3f36b43a     ).+.,.1.2.3.:.6?
  4037d4:	80276004 803e0f3d 7f40403f 29426a41     .`'.=.>.?@@.AjB)
  4037e4:	4145e544 64490247 704ba14a 504d1a4c     D.EAG.IdJ.KpL.MP
  4037f4:	0064134e 1a688867 3c243814 72263025     N.d.g.h..8$<%0&r
  403804:	7e519750 00530052 23210020 02840738     P.Q~R.S. .!#8...
  403814:	00e91438 ff575556 ff59ff58 00ec045f     8...VUW.X.Y._...
  403824:	7f80ff13 32823f81 11380183 03860085     .....?.2..8.....
  403834:	05880187 308d3089 3093858f 30998595     .....0.0...0...0
  403844:	089c859b 239e129d 55a0459f 72a264a1     .......#.E.U.d.r
  403854:	8ba47fa3 a7a695a5 cba8b5a7 ecaadda9     ................
  403864:	78ce1aab 0ad06ecf 84d20cd1 1ed490d3     ...x.n..........
  403874:	1f5b245a 605d885c ffbe6eac 503100bf     Z$[.\.]`.n....1P
  403884:	3f827832 3f360012 c4330053 0322891b     2x.?..6?S.3...".
  403894:	ffff0228                                (...

00403898 <OV7740_QVGA_YUV422_20FPS>:
  403898:	8012000e 001305fe 00120211 d40c10d5     ................
  4038a8:	0116340d a0182517 f01a0319 0322891b     .4...%........".
  4038b8:	f82b1829 a031012c c433f032 3f36b43a     ).+.,.1.2.3.:.6?
  4038c8:	80276004 803e0f3d 7f40403f 29426a41     .`'.=.>.?@@.AjB)
  4038d8:	4145e544 64490247 704ba14a 504d1a4c     D.EAG.IdJ.KpL.MP
  4038e8:	0064134e 1a688867 3c243814 72263025     N.d.g.h..8$<%0&r
  4038f8:	7e519750 00530052 23210020 00e91438     P.Q~R.S. .!#8...
  403908:	ff575556 ff59ff58 00ec045f 7f80ff13     VUW.X.Y._.......
  403918:	32823f81 11380183 03860085 05880187     .?.2..8.........
  403928:	308d3089 3093858f 30998595 089c859b     .0.0...0...0....
  403938:	239e129d 55a0459f 72a264a1 8ba47fa3     ...#.E.U.d.r....
  403948:	a7a695a5 cba8b5a7 ecaadda9 78ce1aab     ...............x
  403958:	0ad06ecf 84d20cd1 1ed490d3 1f5b245a     .n..........Z$[.
  403968:	605d885c ffbe6eac 503100bf 3f827832     \.]`.n....1P2x.?
  403978:	3f360012 c4330053 0322891b ffff0228     ..6?S.3...".(...

00403988 <OV7740_QVGA_YUV422_10FPS>:
  403988:	8012000e 001305fe 00120511 d40c10d5     ................
  403998:	0116340d a0182517 f01a0319 0322891b     .4...%........".
  4039a8:	f82b1829 a031012c c433f032 3f36b43a     ).+.,.1.2.3.:.6?
  4039b8:	80276004 803e0f3d 7f40403f 29426a41     .`'.=.>.?@@.AjB)
  4039c8:	4145e544 64490247 704ba14a 504d1a4c     D.EAG.IdJ.KpL.MP
  4039d8:	0064134e 1a688867 3c243814 72263025     N.d.g.h..8$<%0&r
  4039e8:	7e519750 00530052 23210020 00e91438     P.Q~R.S. .!#8...
  4039f8:	ff575556 ff59ff58 00ec045f 7f80ff13     VUW.X.Y._.......
  403a08:	32823f81 11380183 03860085 05880187     .?.2..8.........
  403a18:	308d3089 3093858f 30998595 089c859b     .0.0...0...0....
  403a28:	239e129d 55a0459f 72a264a1 8ba47fa3     ...#.E.U.d.r....
  403a38:	a7a695a5 cba8b5a7 ecaadda9 78ce1aab     ...............x
  403a48:	0ad06ecf 84d20cd1 1ed490d3 1f5b245a     .n..........Z$[.
  403a58:	605d885c ffbe6eac 503100bf 3f827832     \.]`.n....1P2x.?
  403a68:	3f360012 c4330053 0322891b ffff0228     ..6?S.3...".(...

00403a78 <OV7740_QQVGA_YUV422>:
  403a78:	8012000e 01110013 10d50012 340d540c     .............T.4
  403a88:	25170116 0319a018 891bf01a 18290322     ...%........".).
  403a98:	012cf82b f032a031 b43ac433 60043f36     +.,.1.2.3.:.6?.`
  403aa8:	0f3d8027 403f803e 6a417f40 e5442942     '.=.>.?@@.AjB)D.
  403ab8:	02474145 a14a6449 1a4c704b 134e504d     EAG.IdJ.KpL.MPN.
  403ac8:	88670064 38141a68 30253c24 97507226     d.g.h..8$<%0&rP.
  403ad8:	00527e51 00200053 14382321 555600e9     Q~R.S. .!#8...VU
  403ae8:	ff58ff57 045fff59 ff1300ec 3f817f80     W.X.Y._........?
  403af8:	01833282 70841138 03860085 05880187     .2..8..p........
  403b08:	308d3089 3093858f 30998595 089c859b     .0.0...0...0....
  403b18:	239e129d 55a0459f 72a264a1 8ba47fa3     ...#.E.U.d.r....
  403b28:	a7a695a5 cba8b5a7 ecaadda9 78ce1aab     ...............x
  403b38:	0ad06ecf 84d20cd1 1ed490d3 1f5b245a     .n..........Z$[.
  403b48:	605d885c ffbe6eac 283100bf 00343c32     \.]`.n....1(2<4.
  403b58:	00123f82 00533f36 891b0033 02280322     .?..6?S.3...".(.
  403b68:	ffff00d9                                ....

00403b6c <OV7740_QVGA_YUV422_30FPS>:
  403b6c:	8012000e 001305fe 00120111 d40c10d5     ................
  403b7c:	0116340d a0182517 f01a0319 0322891b     .4...%........".
  403b8c:	f82b1829 a031012c c433f032 3f36b43a     ).+.,.1.2.3.:.6?
  403b9c:	80276004 803e0f3d 7f40403f 29426a41     .`'.=.>.?@@.AjB)
  403bac:	4145e544 64490247 704ba14a 504d1a4c     D.EAG.IdJ.KpL.MP
  403bbc:	0064134e 1a688867 3c243814 72263025     N.d.g.h..8$<%0&r
  403bcc:	7e519750 00530052 23210020 00e91438     P.Q~R.S. .!#8...
  403bdc:	ff575556 ff59ff58 00ec045f 7f80ff13     VUW.X.Y._.......
  403bec:	32823f81 11380183 03860085 05880187     .?.2..8.........
  403bfc:	308d3089 3093858f 30998595 089c859b     .0.0...0...0....
  403c0c:	239e129d 55a0459f 72a264a1 8ba47fa3     ...#.E.U.d.r....
  403c1c:	a7a695a5 cba8b5a7 ecaadda9 78ce1aab     ...............x
  403c2c:	0ad06ecf 84d20cd1 1ed490d3 1f5b245a     .n..........Z$[.
  403c3c:	605d885c ffbe6eac 503100bf 3f827832     \.]`.n....1P2x.?
  403c4c:	3f360012 c4330053 0322891b ffff0228     ..6?S.3...".(...

00403c5c <p_uc_charset10x14>:
	...
  403c78:	ccffccff 00000000 00000000 00000000     ................
  403c88:	00f000f0 00000000 00f000f0 00000000     ................
  403c98:	c00cc00c fcfffcff c00cc00c fcfffcff     ................
  403ca8:	c00cc00c 701e600c 3033303f fcfffcff     .....`.p?030....
  403cb8:	f0333033 c018e039 0cf00060 f0603cf0     303.9...`....<`.
  403cc8:	000fc003 3cf0183c 18003cc0 f87ff03c     ....<..<.<..<...
  403cd8:	8cc71cc3 ecdccccf 30307878 cc00fc00     ........xx00....
  403ce8:	00000000 00440000 00f800ec 00000070     ......D.....p...
	...
  403d00:	f03fc00f 18607878 0cc00cc0 00000000     ..?.xx`.........
  403d10:	00000000 0cc00cc0 78781860 c00ff03f     ........`.xx?...
  403d20:	00000000 e00e600c 8003c007 f83ff83f     .....`......?.?.
  403d30:	c0078003 600ce00e 00030003 00030003     .......`........
  403d40:	f03ff03f 00030003 00030003 ec004400     ?.?..........D..
  403d50:	7000f800 00000000 00000000 00000000     ...p............
  403d60:	00030003 00030003 00030003 00030003     ................
  403d70:	00030003 3c001800 18003c00 00000000     .......<.<......
	...
  403d88:	0c000000 f0003c00 000fc003 00f0003c     .....<......<...
  403d98:	000000c0 f87ff03f ccc1fce0 0cc78cc3     ....?...........
  403da8:	1cfc0cce f03ff87f 00000000 0c700c30     ......?.....0.p.
  403db8:	fcfffcff 0c000c00 00000000 1c700c30     ............0.p.
  403dc8:	7cc03ce0 ccc1ecc0 0ce78cc3 0c3c0c7e     .<.|........~.<.
  403dd8:	38703030 0cc01ce0 0cc30cc0 1ce30cc3     00p8............
  403de8:	f03cf87f c007c003 c01cc00e c070c038     ..<.........8.p.
  403df8:	fcfffcff c000c000 38fc30fc 0ccc1ccc     .........0.8....
  403e08:	0ccc0ccc 1cce0ccc f0c3f8c7 f87ff03f     ............?...
  403e18:	0cc31ce3 0cc30cc3 9ce30cc3 f030f871     ............q.0.
  403e28:	00c000c0 00c000c0 fcc7fcc3 00dc00ce     ................
  403e38:	00f000f8 f87ff03c 0cc39ce7 0cc30cc3     ....<...........
  403e48:	9ce70cc3 f03cf87f 007e003c 0cc30ce7     ......<.<.~.....
  403e58:	38c31cc3 e0e770c3 803fc07f 00000000     ...8.p....?.....
  403e68:	60180000 f03cf03c 00006018 00000000     ...`<.<..`......
  403e78:	00000000 44180000 f83cec3c 00007018     .......D<.<..p..
  403e88:	00000000 00030000 c00f8007 7038e01c     ..............8p
  403e98:	1ce03870 00000cc0 c00cc00c c00cc00c     p8..............
  403ea8:	c00cc00c c00cc00c c00cc00c 0cc00000     ................
  403eb8:	38701ce0 e01c7038 8007c00f 00000003     ..p88p..........
  403ec8:	00700030 00c000e0 ecc3ecc1 00e600c3     0.p.............
  403ed8:	003c007e f871f030 0cc39ce3 fcc3fcc3     ~.<.0.q.........
  403ee8:	1ce00cc0 f03ff87f fc7ffc3f c0c0c0e0     ......?.?.......
  403ef8:	c0c0c0c0 c0e0c0c0 fc3ffc7f fcfffcff     ..........?.....
  403f08:	0cc30cc3 0cc30cc3 9ce70cc3 f03cf87f     ..............<.
  403f18:	f87ff03f 0cc01ce0 0cc00cc0 1ce00cc0     ?...............
  403f28:	30303870 fcfffcff 0cc00cc0 0cc00cc0     p800............
  403f38:	1ce00cc0 f03ff87f fcfffcff 0cc30cc3     ......?.........
  403f48:	0cc30cc3 0cc30cc3 0cc00cc0 fcfffcff     ................
  403f58:	00c300c3 00c300c3 00c300c3 00c000c0     ................
  403f68:	f87ff03f 0cc01ce0 0cc30cc0 1ce30cc3     ?...............
  403f78:	f033f873 fcfffcff 00030003 00030003     s.3.............
  403f88:	00030003 fcfffcff 00000000 0cc00cc0     ................
  403f98:	fcfffcff 0cc00cc0 00000000 38003000     .............0.8
  403fa8:	0cc01cc0 1cc00cc0 f0fff8ff 00c000c0     ................
  403fb8:	fcfffcff 80078007 e01cc00f 38707038     ............8pp8
  403fc8:	0cc01ce0 fcfffcff 0c000c00 0c000c00     ................
  403fd8:	0c000c00 0c000c00 fcfffcff 00380070     ............p.8.
  403fe8:	001f001f 00700038 fcfffcff fcfffcff     ....8.p.........
  403ff8:	000e001c 80030007 e000c001 fcfffcff     ................
  404008:	f87ff03f 0cc01ce0 0cc00cc0 1ce00cc0     ?...............
  404018:	f03ff87f fcfffcff 00c300c3 00c300c3     ..?.............
  404028:	00e700c3 003c007e f87ff03f 0cc01ce0     ....~.<.?.......
  404038:	ecc0ccc0 38e07cc0 ec3ffc7f fcfffcff     .....|.8..?.....
  404048:	80c300c3 c0c380c3 70e7c0c3 1c3c3c7e     ...........p~<<.
  404058:	1c7e183c 0cc30ce7 0cc30cc3 9cc30cc3     <.~.............
  404068:	f060f8e1 00c000c0 00c000c0 fcfffcff     ..`.............
  404078:	00c000c0 00c000c0 f8fff0ff 0c001c00     ................
  404088:	0c000c00 1c000c00 f0fff8ff e0ffc0ff     ................
  404098:	38007000 1c001c00 70003800 c0ffe0ff     .p.8.....8.p....
  4040a8:	f8fff0ff 3c001c00 f800f800 1c003c00     .......<.....<..
  4040b8:	f0fff8ff 7cf83cf0 c00fe01c 80078007     .....<.|........
  4040c8:	e01cc00f 3cf07cf8 00fe00fc 80030007     .....|.<........
  4040d8:	fc01fc01 00078003 00fc00fe 7cc03cc0     .............<.|
  4040e8:	ccc1ecc0 0cc78cc3 0cdc0cce 0cf00cf8     ................
  4040f8:	00000000 fcfffcff 0cc00cc0 00000cc0     ................
  404108:	00000000 00300030 000c000c 00030003     ....0.0.........
  404118:	c000c000 30003000 00000000 0cc00cc0     .....0.0........
  404128:	fcff0cc0 0000fcff 00000000 001c000c     ................
  404138:	00700038 00e000e0 00380070 000c001c     8.p.....p.8.....
  404148:	0c000c00 0c000c00 0c000c00 0c000c00     ................
  404158:	0c000c00 00000000 00e000c0 00380070     ............p.8.
  404168:	00000018 00000000 78063000 cc0cfc0e     .........0.x....
  404178:	cc0ccc0c cc0ecc0c f803fc07 fcfffcff     ................
  404188:	0c030c03 0c030c03 9c030c03 f000f801     ................
  404198:	f807f003 0c0c1c0e 0c0c0c0c 1c0e0c0c     ................
  4041a8:	30033807 f801f000 0c039c03 0c030c03     .8.0............
  4041b8:	0c030c03 fcfffcff f807f003 cc0cdc0e     ................
  4041c8:	cc0ccc0c dc0ecc0c 9003d807 00030000     ................
  4041d8:	fc7ffc3f 00e300e3 00300070 00000000     ?.......p.0.....
  4041e8:	9c071803 cc0ccc0f cc0ccc0c dc0ccc0c     ................
  4041f8:	f007f80f fcfffcff 00030003 00030003     ................
  404208:	fc018003 0000fc00 00000000 00000000     ................
  404218:	fc1bfc1b 00000000 00000000 30000000     ...............0
  404228:	1c003800 0c000c00 f8cf1c00 0000f0cf     .8..............
  404238:	fcff0000 e000fcff f003e001 1c0e3807     .............8..
  404248:	00000c0c 00000000 0cc00cc0 fcfffcff     ................
  404258:	0c000c00 00000000 fc0ffc0f 0007000e     ................
  404268:	c003c003 000e0007 fc0ffc0f fc0ffc0f     ................
  404278:	00070003 000c000e 000e000c fc03fc07     ................
  404288:	f807f003 0c0c1c0e 0c0c0c0c 1c0e0c0c     ................
  404298:	f003f807 fc0ffc0f c00cc00c c00cc00c     ................
  4042a8:	c00fc00c 00038007 80070003 c00cc00f     ................
  4042b8:	c00cc00c c00cc00c fc0ffc0f fc0ffc0f     ................
  4042c8:	00078003 000c000e 000e000c 00030007     ................
  4042d8:	9c071803 cc0ccc0f cc0ccc0c fc0ccc0c     ................
  4042e8:	3006780e 000c0000 f0ff000c 1c0cf8ff     .x.0............
  4042f8:	380c1c0c 0000300c f80ff00f 0c001c00     ...8.0..........
  404308:	0c000c00 1c000c00 f00ff80f e00fc00f     ................
  404318:	38007000 1c001c00 70003800 c00fe00f     .p.8.....8.p....
  404328:	f80ff00f 1c001c00 f800f800 1c001c00     ................
  404338:	f00ff80f 1c0e0c0c f0033807 e001e001     .........8......
  404348:	3807f003 0c0c1c0e 000e000c 9c030c07     ...8............
  404358:	f001f801 00078003 000c000e 1c0c0c0c     ................
  404368:	7c0c3c0c cc0dec0c 0c0f8c0f 0c0c0c0e     .<.|............
  404378:	00030000 f03f8007 1ce0f87c 0cc00cc0     ......?.|.......
  404388:	00000cc0 0c030c03 fc7ffc3f 0cc30ce3     ........?.......
  404398:	0ce00cc0 0c300c70 0cc00000 0cc00cc0     ....p.0.........
  4043a8:	f87c1ce0 8007f03f 00000003 00c000c0     ..|.?...........
  4043b8:	00c000c0 00c000c0 00c000c0 00c000c0     ................
  4043c8:	fcfffcff fcfffcff fcfffcff fcfffcff     ................
  4043d8:	fcfffcff 454c4449 00000000 20726d54     ....IDLE....Tmr 
  4043e8:	00637653 65657246 534f5452 00000000     Svc.FreeRTOS....
  4043f8:	4f4d4544 00000000 3737564f 69203034     DEMO....OV7740 i
  404408:	6567616d 6e657320 0a726f73 74706163     mage sensor.capt
  404418:	20657275 6d617865 00656c70 61656c50     ure example.Plea
  404428:	57206573 20746961 69727564 0a20676e     se Wait during .
  404438:	74696e69 696c6169 6974617a 00006e6f     initialization..
  404448:	61656c50 50206573 73736572 74756220     Please Press but
  404458:	0a6e6f74 74206f74 20656b61 20646e61     ton.to take and 
  404468:	70736964 0a79616c 69702061 72757463     display.a pictur
  404478:	00000065 0064654c 0044434c 00000043     e...Led.LCD.C...

00404488 <_global_impure_ptr>:
  404488:	20000018                                ... 

0040448c <_init>:
  40448c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40448e:	bf00      	nop
  404490:	bcf8      	pop	{r3, r4, r5, r6, r7}
  404492:	bc08      	pop	{r3}
  404494:	469e      	mov	lr, r3
  404496:	4770      	bx	lr

00404498 <__init_array_start>:
  404498:	004032ed 	.word	0x004032ed

0040449c <__frame_dummy_init_array_entry>:
  40449c:	004000f1                                ..@.

004044a0 <_fini>:
  4044a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4044a2:	bf00      	nop
  4044a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
  4044a6:	bc08      	pop	{r3}
  4044a8:	469e      	mov	lr, r3
  4044aa:	4770      	bx	lr

004044ac <__fini_array_start>:
  4044ac:	004000cd 	.word	0x004000cd

Disassembly of section .relocate:

20000000 <portable_delay_cycles>:
RAMFUNC
void portable_delay_cycles(unsigned long n)
{
	UNUSED(n);

	__asm (
20000000:	f3bf 8f5f 	dmb	sy
20000004:	3801      	subs	r0, #1
20000006:	d1fb      	bne.n	20000000 <portable_delay_cycles>
20000008:	4770      	bx	lr
2000000a:	bf00      	nop

2000000c <SystemCoreClock>:
2000000c:	0900 003d                                   ..=.

20000010 <uxCriticalNesting>:
20000010:	aaaa aaaa 0000 0000                         ........

20000018 <impure_data>:
20000018:	0000 0000 0304 2000 036c 2000 03d4 2000     ....... l.. ... 
	...
2000004c:	4484 0040 0000 0000 0000 0000 0000 0000     .D@.............
	...
200000c0:	0001 0000 0000 0000 330e abcd 1234 e66d     .........3..4.m.
200000d0:	deec 0005 000b 0000 0000 0000 0000 0000     ................
	...
