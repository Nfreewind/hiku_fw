
Standard_OV7740_sam4swpir.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00011dc4  00400000  00400000  00008000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  00411dc4  00411dc4  00019dc4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     000008b4  20000000  00411dcc  00020000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          0000a628  200008b4  00412680  000208b4  2**2
                  ALLOC
  4 .stack        00003004  2000aedc  0041cca8  000208b4  2**0
                  ALLOC
  5 .ARM.attributes 0000002a  00000000  00000000  000208b4  2**0
                  CONTENTS, READONLY
  6 .comment      0000005b  00000000  00000000  000208de  2**0
                  CONTENTS, READONLY
  7 .debug_info   0002190a  00000000  00000000  00020939  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00005130  00000000  00000000  00042243  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00017e62  00000000  00000000  00047373  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00001128  00000000  00000000  0005f1d5  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000018c8  00000000  00000000  000602fd  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  000185c7  00000000  00000000  00061bc5  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00013d47  00000000  00000000  0007a18c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    0006406f  00000000  00000000  0008ded3  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00003f54  00000000  00000000  000f1f44  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <_sfixed>:
  400000:	2000dee0 	.word	0x2000dee0
  400004:	004011bd 	.word	0x004011bd
  400008:	004011b9 	.word	0x004011b9
  40000c:	004011b9 	.word	0x004011b9
  400010:	004011b9 	.word	0x004011b9
  400014:	004011b9 	.word	0x004011b9
  400018:	004011b9 	.word	0x004011b9
	...
  40002c:	00401535 	.word	0x00401535
  400030:	004011b9 	.word	0x004011b9
  400034:	00000000 	.word	0x00000000
  400038:	0040160d 	.word	0x0040160d
  40003c:	00401651 	.word	0x00401651
  400040:	004011b9 	.word	0x004011b9
  400044:	004011b9 	.word	0x004011b9
  400048:	004011b9 	.word	0x004011b9
  40004c:	004011b9 	.word	0x004011b9
  400050:	004011b9 	.word	0x004011b9
  400054:	004011b9 	.word	0x004011b9
  400058:	004011b9 	.word	0x004011b9
  40005c:	00000000 	.word	0x00000000
  400060:	004011b9 	.word	0x004011b9
  400064:	004011b9 	.word	0x004011b9
  400068:	00000000 	.word	0x00000000
  40006c:	00400e05 	.word	0x00400e05
  400070:	00400e19 	.word	0x00400e19
  400074:	00400e2d 	.word	0x00400e2d
  400078:	004011b9 	.word	0x004011b9
  40007c:	004011b9 	.word	0x004011b9
	...
  400088:	004011b9 	.word	0x004011b9
  40008c:	004011b9 	.word	0x004011b9
  400090:	004011b9 	.word	0x004011b9
  400094:	004011b9 	.word	0x004011b9
  400098:	004011b9 	.word	0x004011b9
  40009c:	004011b9 	.word	0x004011b9
  4000a0:	004011b9 	.word	0x004011b9
  4000a4:	004011b9 	.word	0x004011b9
  4000a8:	004011b9 	.word	0x004011b9
  4000ac:	004011b9 	.word	0x004011b9
  4000b0:	004011b9 	.word	0x004011b9
  4000b4:	004011b9 	.word	0x004011b9
  4000b8:	004011b9 	.word	0x004011b9
  4000bc:	004011b9 	.word	0x004011b9
  4000c0:	004011b9 	.word	0x004011b9
  4000c4:	004011b9 	.word	0x004011b9
  4000c8:	004011b9 	.word	0x004011b9

004000cc <__do_global_dtors_aux>:
  4000cc:	b510      	push	{r4, lr}
  4000ce:	4c05      	ldr	r4, [pc, #20]	; (4000e4 <__do_global_dtors_aux+0x18>)
  4000d0:	7823      	ldrb	r3, [r4, #0]
  4000d2:	b933      	cbnz	r3, 4000e2 <__do_global_dtors_aux+0x16>
  4000d4:	4b04      	ldr	r3, [pc, #16]	; (4000e8 <__do_global_dtors_aux+0x1c>)
  4000d6:	b113      	cbz	r3, 4000de <__do_global_dtors_aux+0x12>
  4000d8:	4804      	ldr	r0, [pc, #16]	; (4000ec <__do_global_dtors_aux+0x20>)
  4000da:	f3af 8000 	nop.w
  4000de:	2301      	movs	r3, #1
  4000e0:	7023      	strb	r3, [r4, #0]
  4000e2:	bd10      	pop	{r4, pc}
  4000e4:	200008b4 	.word	0x200008b4
  4000e8:	00000000 	.word	0x00000000
  4000ec:	00411dcc 	.word	0x00411dcc

004000f0 <frame_dummy>:
  4000f0:	4b08      	ldr	r3, [pc, #32]	; (400114 <frame_dummy+0x24>)
  4000f2:	b510      	push	{r4, lr}
  4000f4:	b11b      	cbz	r3, 4000fe <frame_dummy+0xe>
  4000f6:	4808      	ldr	r0, [pc, #32]	; (400118 <frame_dummy+0x28>)
  4000f8:	4908      	ldr	r1, [pc, #32]	; (40011c <frame_dummy+0x2c>)
  4000fa:	f3af 8000 	nop.w
  4000fe:	4808      	ldr	r0, [pc, #32]	; (400120 <frame_dummy+0x30>)
  400100:	6803      	ldr	r3, [r0, #0]
  400102:	b903      	cbnz	r3, 400106 <frame_dummy+0x16>
  400104:	bd10      	pop	{r4, pc}
  400106:	4b07      	ldr	r3, [pc, #28]	; (400124 <frame_dummy+0x34>)
  400108:	2b00      	cmp	r3, #0
  40010a:	d0fb      	beq.n	400104 <frame_dummy+0x14>
  40010c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  400110:	4718      	bx	r3
  400112:	bf00      	nop
  400114:	00000000 	.word	0x00000000
  400118:	00411dcc 	.word	0x00411dcc
  40011c:	200008b8 	.word	0x200008b8
  400120:	00411dcc 	.word	0x00411dcc
  400124:	00000000 	.word	0x00000000

00400128 <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
  400128:	b510      	push	{r4, lr}
	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
  40012a:	480e      	ldr	r0, [pc, #56]	; (400164 <sysclk_init+0x3c>)
  40012c:	4b0e      	ldr	r3, [pc, #56]	; (400168 <sysclk_init+0x40>)
  40012e:	4798      	blx	r3
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
  400130:	2000      	movs	r0, #0
  400132:	213e      	movs	r1, #62	; 0x3e
  400134:	4b0d      	ldr	r3, [pc, #52]	; (40016c <sysclk_init+0x44>)
  400136:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
  400138:	4c0d      	ldr	r4, [pc, #52]	; (400170 <sysclk_init+0x48>)
  40013a:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
  40013c:	2800      	cmp	r0, #0
  40013e:	d0fc      	beq.n	40013a <sysclk_init+0x12>

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
	} else {
		pmc_disable_pllbck();
  400140:	4b0c      	ldr	r3, [pc, #48]	; (400174 <sysclk_init+0x4c>)
  400142:	4798      	blx	r3
		PMC->CKGR_PLLBR = p_cfg->ctrl;
  400144:	4a0c      	ldr	r2, [pc, #48]	; (400178 <sysclk_init+0x50>)
  400146:	4b0d      	ldr	r3, [pc, #52]	; (40017c <sysclk_init+0x54>)
  400148:	62da      	str	r2, [r3, #44]	; 0x2c
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		return pmc_is_locked_pllack();
	} else {
		return pmc_is_locked_pllbck();
  40014a:	4c0d      	ldr	r4, [pc, #52]	; (400180 <sysclk_init+0x58>)
  40014c:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
  40014e:	2800      	cmp	r0, #0
  400150:	d0fc      	beq.n	40014c <sysclk_init+0x24>

		pll_enable_source(CONFIG_PLL1_SOURCE);
		pll_config_defaults(&pllcfg, 1);
		pll_enable(&pllcfg, 1);
		pll_wait_for_lock(1);
		pmc_switch_mck_to_pllbck(CONFIG_SYSCLK_PRES);
  400152:	2010      	movs	r0, #16
  400154:	4b0b      	ldr	r3, [pc, #44]	; (400184 <sysclk_init+0x5c>)
  400156:	4798      	blx	r3
	}
#endif

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
  400158:	4b0b      	ldr	r3, [pc, #44]	; (400188 <sysclk_init+0x60>)
  40015a:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
  40015c:	4801      	ldr	r0, [pc, #4]	; (400164 <sysclk_init+0x3c>)
  40015e:	4b02      	ldr	r3, [pc, #8]	; (400168 <sysclk_init+0x40>)
  400160:	4798      	blx	r3
  400162:	bd10      	pop	{r4, pc}
  400164:	07270e00 	.word	0x07270e00
  400168:	00401381 	.word	0x00401381
  40016c:	00400ea5 	.word	0x00400ea5
  400170:	00400ef9 	.word	0x00400ef9
  400174:	00400f45 	.word	0x00400f45
  400178:	00133f01 	.word	0x00133f01
  40017c:	400e0400 	.word	0x400e0400
  400180:	00400f51 	.word	0x00400f51
  400184:	00400e41 	.word	0x00400e41
  400188:	0040126d 	.word	0x0040126d

0040018c <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len)
{
	int nChars = 0;

	if (file != 0) {
  40018c:	b9a8      	cbnz	r0, 4001ba <_read+0x2e>
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
  40018e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  400192:	460c      	mov	r4, r1
  400194:	4690      	mov	r8, r2

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
  400196:	2a00      	cmp	r2, #0
  400198:	dd0a      	ble.n	4001b0 <_read+0x24>
  40019a:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
  40019c:	4e08      	ldr	r6, [pc, #32]	; (4001c0 <_read+0x34>)
  40019e:	4d09      	ldr	r5, [pc, #36]	; (4001c4 <_read+0x38>)
  4001a0:	6830      	ldr	r0, [r6, #0]
  4001a2:	4621      	mov	r1, r4
  4001a4:	682b      	ldr	r3, [r5, #0]
  4001a6:	4798      	blx	r3
		ptr++;
  4001a8:	3401      	adds	r4, #1

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
  4001aa:	42bc      	cmp	r4, r7
  4001ac:	d1f8      	bne.n	4001a0 <_read+0x14>
  4001ae:	e001      	b.n	4001b4 <_read+0x28>
  4001b0:	f04f 0800 	mov.w	r8, #0
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
	}
	return nChars;
  4001b4:	4640      	mov	r0, r8
  4001b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
_read (int file, char * ptr, int len)
{
	int nChars = 0;

	if (file != 0) {
		return -1;
  4001ba:	f04f 30ff 	mov.w	r0, #4294967295
  4001be:	4770      	bx	lr
  4001c0:	2000aec4 	.word	0x2000aec4
  4001c4:	2000aebc 	.word	0x2000aebc

004001c8 <_write>:
int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
  4001c8:	3801      	subs	r0, #1
  4001ca:	2802      	cmp	r0, #2
  4001cc:	d818      	bhi.n	400200 <_write+0x38>
int __attribute__((weak))
_write (int file, const char *ptr, int len);

int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
  4001ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4001d2:	460e      	mov	r6, r1
  4001d4:	4614      	mov	r4, r2

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
  4001d6:	b182      	cbz	r2, 4001fa <_write+0x32>
  4001d8:	460d      	mov	r5, r1
		if (ptr_put(stdio_base, *ptr++) < 0) {
  4001da:	f8df 8038 	ldr.w	r8, [pc, #56]	; 400214 <_write+0x4c>
  4001de:	4f0c      	ldr	r7, [pc, #48]	; (400210 <_write+0x48>)
  4001e0:	f8d8 0000 	ldr.w	r0, [r8]
  4001e4:	f815 1b01 	ldrb.w	r1, [r5], #1
  4001e8:	683b      	ldr	r3, [r7, #0]
  4001ea:	4798      	blx	r3
  4001ec:	2800      	cmp	r0, #0
  4001ee:	db0a      	blt.n	400206 <_write+0x3e>
  4001f0:	1ba8      	subs	r0, r5, r6

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
  4001f2:	3c01      	subs	r4, #1
  4001f4:	d1f4      	bne.n	4001e0 <_write+0x18>
  4001f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4001fa:	2000      	movs	r0, #0
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
		}
		++nChars;
	}
	return nChars;
  4001fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
_write (int file, const char *ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
  400200:	f04f 30ff 	mov.w	r0, #4294967295
			return -1;
		}
		++nChars;
	}
	return nChars;
}
  400204:	4770      	bx	lr
		return -1;
	}

	for (; len != 0; --len) {
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
  400206:	f04f 30ff 	mov.w	r0, #4294967295
		}
		++nChars;
	}
	return nChars;
}
  40020a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40020e:	bf00      	nop
  400210:	2000aec0 	.word	0x2000aec0
  400214:	2000aec4 	.word	0x2000aec4

00400218 <board_init>:
#include "board.h"
#include "conf_board.h"
#include "gpio.h"

void board_init(void)
{
  400218:	b570      	push	{r4, r5, r6, lr}
	/* Disable the watchdog */
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	WDT->WDT_MR = WDT_MR_WDDIS;
  40021a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  40021e:	4b67      	ldr	r3, [pc, #412]	; (4003bc <board_init+0x1a4>)
  400220:	605a      	str	r2, [r3, #4]
#endif

	/* Configure LED pins */
	gpio_configure_pin(LED0_GPIO, LED0_FLAGS);
  400222:	204c      	movs	r0, #76	; 0x4c
  400224:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
  400228:	4c65      	ldr	r4, [pc, #404]	; (4003c0 <board_init+0x1a8>)
  40022a:	47a0      	blx	r4

	/* Configure Push Button pins */
	gpio_configure_pin(GPIO_PUSH_BUTTON_1, GPIO_PUSH_BUTTON_1_FLAGS);
  40022c:	2002      	movs	r0, #2
  40022e:	4965      	ldr	r1, [pc, #404]	; (4003c4 <board_init+0x1ac>)
  400230:	47a0      	blx	r4
	gpio_configure_group(PINS_UART_PIO, PINS_UART, PINS_UART_FLAGS);
#endif

	/* Configure TWI pins */
#ifdef CONF_BOARD_TWI0
	gpio_configure_pin(TWI0_DATA_GPIO, TWI0_DATA_FLAGS);
  400232:	2003      	movs	r0, #3
  400234:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  400238:	47a0      	blx	r4
	gpio_configure_pin(TWI0_CLK_GPIO, TWI0_CLK_FLAGS);
  40023a:	2004      	movs	r0, #4
  40023c:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  400240:	47a0      	blx	r4
	gpio_configure_pin(SPI_NPCS0_GPIO, SPI_NPCS0_FLAGS);
#endif

	/* Configure PCK0 pins */
#ifdef CONF_BOARD_PCK0
	gpio_configure_pin(PIN_PCK0, PIN_PCK0_FLAGS);
  400242:	202d      	movs	r0, #45	; 0x2d
  400244:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  400248:	47a0      	blx	r4
	gpio_configure_pin(USB_VBUS_GPIO, USB_VBUS_FLAGS);
#endif

	/* Configure LCD EBI pins */
#ifdef CONF_BOARD_ILI9325
	gpio_configure_pin(PIN_EBI_DATA_BUS_D0, PIN_EBI_DATA_BUS_FLAGS);
  40024a:	4d5f      	ldr	r5, [pc, #380]	; (4003c8 <board_init+0x1b0>)
  40024c:	2040      	movs	r0, #64	; 0x40
  40024e:	4629      	mov	r1, r5
  400250:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_DATA_BUS_D1, PIN_EBI_DATA_BUS_FLAGS);
  400252:	2041      	movs	r0, #65	; 0x41
  400254:	4629      	mov	r1, r5
  400256:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_DATA_BUS_D2, PIN_EBI_DATA_BUS_FLAGS);
  400258:	2042      	movs	r0, #66	; 0x42
  40025a:	4629      	mov	r1, r5
  40025c:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_DATA_BUS_D3, PIN_EBI_DATA_BUS_FLAGS);
  40025e:	2043      	movs	r0, #67	; 0x43
  400260:	4629      	mov	r1, r5
  400262:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_DATA_BUS_D4, PIN_EBI_DATA_BUS_FLAGS);
  400264:	2044      	movs	r0, #68	; 0x44
  400266:	4629      	mov	r1, r5
  400268:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_DATA_BUS_D5, PIN_EBI_DATA_BUS_FLAGS);
  40026a:	2045      	movs	r0, #69	; 0x45
  40026c:	4629      	mov	r1, r5
  40026e:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_DATA_BUS_D6, PIN_EBI_DATA_BUS_FLAGS);
  400270:	2046      	movs	r0, #70	; 0x46
  400272:	4629      	mov	r1, r5
  400274:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_DATA_BUS_D7, PIN_EBI_DATA_BUS_FLAGS);
  400276:	2047      	movs	r0, #71	; 0x47
  400278:	4629      	mov	r1, r5
  40027a:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_NRD, PIN_EBI_NRD_FLAGS);
  40027c:	204b      	movs	r0, #75	; 0x4b
  40027e:	4629      	mov	r1, r5
  400280:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_NWE, PIN_EBI_NWE_FLAGS);
  400282:	2048      	movs	r0, #72	; 0x48
  400284:	4629      	mov	r1, r5
  400286:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_NCS2, PIN_EBI_NCS2_FLAGS);
  400288:	4e50      	ldr	r6, [pc, #320]	; (4003cc <board_init+0x1b4>)
  40028a:	2016      	movs	r0, #22
  40028c:	4631      	mov	r1, r6
  40028e:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_LCD_RS, PIN_EBI_LCD_RS_FLAGS);
  400290:	2053      	movs	r0, #83	; 0x53
  400292:	4629      	mov	r1, r5
  400294:	47a0      	blx	r4
#endif

	/* Configure Backlight control pin */
#ifdef CONF_BOARD_AAT3155
	gpio_configure_pin(BOARD_AAT31XX_SET_GPIO, BOARD_AAT31XX_SET_FLAGS);
  400296:	204d      	movs	r0, #77	; 0x4d
  400298:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
  40029c:	47a0      	blx	r4
#endif

	/* Configure SRAM pins */
#ifdef CONF_BOARD_SRAM
	gpio_configure_pin(PIN_EBI_DATA_BUS_D0, PIN_EBI_DATA_BUS_FLAGS);
  40029e:	2040      	movs	r0, #64	; 0x40
  4002a0:	4629      	mov	r1, r5
  4002a2:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_DATA_BUS_D1, PIN_EBI_DATA_BUS_FLAGS);
  4002a4:	2041      	movs	r0, #65	; 0x41
  4002a6:	4629      	mov	r1, r5
  4002a8:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_DATA_BUS_D2, PIN_EBI_DATA_BUS_FLAGS);
  4002aa:	2042      	movs	r0, #66	; 0x42
  4002ac:	4629      	mov	r1, r5
  4002ae:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_DATA_BUS_D3, PIN_EBI_DATA_BUS_FLAGS);
  4002b0:	2043      	movs	r0, #67	; 0x43
  4002b2:	4629      	mov	r1, r5
  4002b4:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_DATA_BUS_D4, PIN_EBI_DATA_BUS_FLAGS);
  4002b6:	2044      	movs	r0, #68	; 0x44
  4002b8:	4629      	mov	r1, r5
  4002ba:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_DATA_BUS_D5, PIN_EBI_DATA_BUS_FLAGS);
  4002bc:	2045      	movs	r0, #69	; 0x45
  4002be:	4629      	mov	r1, r5
  4002c0:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_DATA_BUS_D6, PIN_EBI_DATA_BUS_FLAGS);
  4002c2:	2046      	movs	r0, #70	; 0x46
  4002c4:	4629      	mov	r1, r5
  4002c6:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_DATA_BUS_D7, PIN_EBI_DATA_BUS_FLAGS);
  4002c8:	2047      	movs	r0, #71	; 0x47
  4002ca:	4629      	mov	r1, r5
  4002cc:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_NRD, PIN_EBI_NRD_FLAGS);
  4002ce:	204b      	movs	r0, #75	; 0x4b
  4002d0:	4629      	mov	r1, r5
  4002d2:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_NWE, PIN_EBI_NWE_FLAGS);
  4002d4:	2048      	movs	r0, #72	; 0x48
  4002d6:	4629      	mov	r1, r5
  4002d8:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_NCS0, PIN_EBI_NCS0_FLAGS);
  4002da:	204e      	movs	r0, #78	; 0x4e
  4002dc:	4629      	mov	r1, r5
  4002de:	47a0      	blx	r4
	gpio_configure_pin(SRAM_VCC_GPIO, SRAM_VCC_FLAGS);
  4002e0:	2049      	movs	r0, #73	; 0x49
  4002e2:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
  4002e6:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_ADDR_BUS_A0, PIN_EBI_ADDR_BUS_FLAG1);
  4002e8:	2052      	movs	r0, #82	; 0x52
  4002ea:	4629      	mov	r1, r5
  4002ec:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_ADDR_BUS_A1, PIN_EBI_ADDR_BUS_FLAG1);
  4002ee:	2053      	movs	r0, #83	; 0x53
  4002f0:	4629      	mov	r1, r5
  4002f2:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_ADDR_BUS_A2, PIN_EBI_ADDR_BUS_FLAG1);
  4002f4:	2054      	movs	r0, #84	; 0x54
  4002f6:	4629      	mov	r1, r5
  4002f8:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_ADDR_BUS_A3, PIN_EBI_ADDR_BUS_FLAG1);
  4002fa:	2055      	movs	r0, #85	; 0x55
  4002fc:	4629      	mov	r1, r5
  4002fe:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_ADDR_BUS_A4, PIN_EBI_ADDR_BUS_FLAG1);
  400300:	2056      	movs	r0, #86	; 0x56
  400302:	4629      	mov	r1, r5
  400304:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_ADDR_BUS_A5, PIN_EBI_ADDR_BUS_FLAG1);
  400306:	2057      	movs	r0, #87	; 0x57
  400308:	4629      	mov	r1, r5
  40030a:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_ADDR_BUS_A6, PIN_EBI_ADDR_BUS_FLAG1);
  40030c:	2058      	movs	r0, #88	; 0x58
  40030e:	4629      	mov	r1, r5
  400310:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_ADDR_BUS_A7, PIN_EBI_ADDR_BUS_FLAG1);
  400312:	2059      	movs	r0, #89	; 0x59
  400314:	4629      	mov	r1, r5
  400316:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_ADDR_BUS_A8, PIN_EBI_ADDR_BUS_FLAG1);
  400318:	205a      	movs	r0, #90	; 0x5a
  40031a:	4629      	mov	r1, r5
  40031c:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_ADDR_BUS_A9, PIN_EBI_ADDR_BUS_FLAG1);
  40031e:	205b      	movs	r0, #91	; 0x5b
  400320:	4629      	mov	r1, r5
  400322:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_ADDR_BUS_A10, PIN_EBI_ADDR_BUS_FLAG1);
  400324:	205c      	movs	r0, #92	; 0x5c
  400326:	4629      	mov	r1, r5
  400328:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_ADDR_BUS_A11, PIN_EBI_ADDR_BUS_FLAG1);
  40032a:	205d      	movs	r0, #93	; 0x5d
  40032c:	4629      	mov	r1, r5
  40032e:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_ADDR_BUS_A12, PIN_EBI_ADDR_BUS_FLAG1);
  400330:	205e      	movs	r0, #94	; 0x5e
  400332:	4629      	mov	r1, r5
  400334:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_ADDR_BUS_A13, PIN_EBI_ADDR_BUS_FLAG1);
  400336:	205f      	movs	r0, #95	; 0x5f
  400338:	4629      	mov	r1, r5
  40033a:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_ADDR_BUS_A14, PIN_EBI_ADDR_BUS_FLAG2);
  40033c:	2012      	movs	r0, #18
  40033e:	4631      	mov	r1, r6
  400340:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_ADDR_BUS_A15, PIN_EBI_ADDR_BUS_FLAG2);
  400342:	2013      	movs	r0, #19
  400344:	4631      	mov	r1, r6
  400346:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_ADDR_BUS_A16, PIN_EBI_ADDR_BUS_FLAG2);
  400348:	2014      	movs	r0, #20
  40034a:	4631      	mov	r1, r6
  40034c:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_ADDR_BUS_A17, PIN_EBI_ADDR_BUS_FLAG2);
  40034e:	2000      	movs	r0, #0
  400350:	4631      	mov	r1, r6
  400352:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_ADDR_BUS_A18, PIN_EBI_ADDR_BUS_FLAG2);
  400354:	2001      	movs	r0, #1
  400356:	4631      	mov	r1, r6
  400358:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_ADDR_BUS_A19, PIN_EBI_ADDR_BUS_FLAG1);
  40035a:	2050      	movs	r0, #80	; 0x50
  40035c:	4629      	mov	r1, r5
  40035e:	47a0      	blx	r4
#endif

	/* Configure Image sensor pins */
#ifdef CONF_BOARD_OV7740_IMAGE_SENSOR
	gpio_configure_pin(OV_SW_OVT_GPIO, OV_SW_OVT_FLAGS);
  400360:	204a      	movs	r0, #74	; 0x4a
  400362:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
  400366:	47a0      	blx	r4
	gpio_configure_pin(OV_RST_GPIO, OV_RST_FLAGS);
  400368:	204f      	movs	r0, #79	; 0x4f
  40036a:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
  40036e:	47a0      	blx	r4
	gpio_configure_pin(OV_FSIN_GPIO, OV_FSIN_FLAGS);
  400370:	2015      	movs	r0, #21
  400372:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
  400376:	47a0      	blx	r4
	gpio_configure_pin(OV_HSYNC_GPIO, OV_HSYNC_FLAGS);
  400378:	2010      	movs	r0, #16
  40037a:	2171      	movs	r1, #113	; 0x71
  40037c:	47a0      	blx	r4
	gpio_configure_pin(OV_VSYNC_GPIO, OV_VSYNC_FLAGS);
  40037e:	200f      	movs	r0, #15
  400380:	2171      	movs	r1, #113	; 0x71
  400382:	47a0      	blx	r4
	gpio_configure_pin(OV_DATA_BUS_D2, OV_DATA_BUS_FLAGS);
  400384:	f105 5500 	add.w	r5, r5, #536870912	; 0x20000000
  400388:	2018      	movs	r0, #24
  40038a:	4629      	mov	r1, r5
  40038c:	47a0      	blx	r4
	gpio_configure_pin(OV_DATA_BUS_D3, OV_DATA_BUS_FLAGS);
  40038e:	2019      	movs	r0, #25
  400390:	4629      	mov	r1, r5
  400392:	47a0      	blx	r4
	gpio_configure_pin(OV_DATA_BUS_D4, OV_DATA_BUS_FLAGS);
  400394:	201a      	movs	r0, #26
  400396:	4629      	mov	r1, r5
  400398:	47a0      	blx	r4
	gpio_configure_pin(OV_DATA_BUS_D5, OV_DATA_BUS_FLAGS);
  40039a:	201b      	movs	r0, #27
  40039c:	4629      	mov	r1, r5
  40039e:	47a0      	blx	r4
	gpio_configure_pin(OV_DATA_BUS_D6, OV_DATA_BUS_FLAGS);
  4003a0:	201c      	movs	r0, #28
  4003a2:	4629      	mov	r1, r5
  4003a4:	47a0      	blx	r4
	gpio_configure_pin(OV_DATA_BUS_D7, OV_DATA_BUS_FLAGS);
  4003a6:	201d      	movs	r0, #29
  4003a8:	4629      	mov	r1, r5
  4003aa:	47a0      	blx	r4
	gpio_configure_pin(OV_DATA_BUS_D8, OV_DATA_BUS_FLAGS);
  4003ac:	201e      	movs	r0, #30
  4003ae:	4629      	mov	r1, r5
  4003b0:	47a0      	blx	r4
	gpio_configure_pin(OV_DATA_BUS_D9, OV_DATA_BUS_FLAGS);
  4003b2:	201f      	movs	r0, #31
  4003b4:	4629      	mov	r1, r5
  4003b6:	47a0      	blx	r4
  4003b8:	bd70      	pop	{r4, r5, r6, pc}
  4003ba:	bf00      	nop
  4003bc:	400e1450 	.word	0x400e1450
  4003c0:	00400c09 	.word	0x00400c09
  4003c4:	28000079 	.word	0x28000079
  4003c8:	08000001 	.word	0x08000001
  4003cc:	18000001 	.word	0x18000001

004003d0 <ov_power>:
 * \param on_off 1 to turn on OV7740 sensor and 0 to turn off.
 * \param p_pio Pointer to the PIO instance which control OV7740 sensor power.
 * \param ul_mask Bitmask of OV7740 sensor power pin.
 */
void ov_power(uint32_t ul_on_off, Pio* const p_pio, const uint32_t ul_mask)
{
  4003d0:	b508      	push	{r3, lr}
	if (ul_on_off) {
  4003d2:	b120      	cbz	r0, 4003de <ov_power+0xe>
		pio_clear(p_pio, ul_mask);
  4003d4:	4608      	mov	r0, r1
  4003d6:	4611      	mov	r1, r2
  4003d8:	4b03      	ldr	r3, [pc, #12]	; (4003e8 <ov_power+0x18>)
  4003da:	4798      	blx	r3
  4003dc:	bd08      	pop	{r3, pc}
	} else {
		pio_set(p_pio, ul_mask);
  4003de:	4608      	mov	r0, r1
  4003e0:	4611      	mov	r1, r2
  4003e2:	4b02      	ldr	r3, [pc, #8]	; (4003ec <ov_power+0x1c>)
  4003e4:	4798      	blx	r3
  4003e6:	bd08      	pop	{r3, pc}
  4003e8:	00400a81 	.word	0x00400a81
  4003ec:	00400a7d 	.word	0x00400a7d

004003f0 <ov_read_reg>:
 * \param p_twi TWI interface.
 * \param p_packet TWI packet.
 * \return 0 on success, TWID_ERROR_BUSY otherwise.
 */
uint32_t ov_read_reg(Twi* const p_twi, twi_packet_t* const p_packet)
{
  4003f0:	b508      	push	{r3, lr}
	uint32_t ul_status;

	ul_status = twi_master_read(p_twi, p_packet);
  4003f2:	4b01      	ldr	r3, [pc, #4]	; (4003f8 <ov_read_reg+0x8>)
  4003f4:	4798      	blx	r3

	return ul_status;
}
  4003f6:	bd08      	pop	{r3, pc}
  4003f8:	00401039 	.word	0x00401039

004003fc <ov_write_reg>:
 * \param p_twi TWI interface.
 * \param p_packet TWI packet.
 * \return 0 on success, TWID_ERROR_BUSY otherwise.
 */
uint32_t ov_write_reg(Twi* const p_twi, twi_packet_t* const p_packet)
{
  4003fc:	b508      	push	{r3, lr}
	uint32_t ul_status;

	ul_status = twi_master_write(p_twi, p_packet);
  4003fe:	4b01      	ldr	r3, [pc, #4]	; (400404 <ov_write_reg+0x8>)
  400400:	4798      	blx	r3

	return ul_status;
}
  400402:	bd08      	pop	{r3, pc}
  400404:	00401119 	.word	0x00401119

00400408 <ov_write_regs>:
 * \param p_twi TWI interface.
 * \param p_reg_list Register list to be written.
 * \return 0 on success, TWID_ERROR_BUSY otherwise.
 */
uint32_t ov_write_regs(Twi* const p_twi, const ov_reg *p_reg_list)
{
  400408:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40040c:	b086      	sub	sp, #24
  40040e:	4607      	mov	r7, r0
  400410:	1c4c      	adds	r4, r1, #1
			(p_next->val == OV_VAL_TERM))) {
		if (p_next->reg == 0xFE) {
			delay_ms(5);
		} else {
			twi_packet_regs.addr[0] = p_next->reg;
			twi_packet_regs.addr_length = 1;
  400412:	2501      	movs	r5, #1
			twi_packet_regs.chip = OV_I2C_SENSOR_ADDRESS;
			twi_packet_regs.length = 1;
			twi_packet_regs.buffer = &(p_next->val);

			ul_err = ov_write_reg(p_twi, &twi_packet_regs);
  400414:	4e12      	ldr	r6, [pc, #72]	; (400460 <ov_write_regs+0x58>)
	ov_reg *p_next = (ov_reg *)p_reg_list;

	while (!((p_next->reg == OV_REG_TERM) &&
			(p_next->val == OV_VAL_TERM))) {
		if (p_next->reg == 0xFE) {
			delay_ms(5);
  400416:	f8df 804c 	ldr.w	r8, [pc, #76]	; 400464 <ov_write_regs+0x5c>
	uint32_t ul_err;
	uint32_t ul_size = 0;
	twi_packet_t twi_packet_regs;
	ov_reg *p_next = (ov_reg *)p_reg_list;

	while (!((p_next->reg == OV_REG_TERM) &&
  40041a:	e013      	b.n	400444 <ov_write_regs+0x3c>
			(p_next->val == OV_VAL_TERM))) {
		if (p_next->reg == 0xFE) {
  40041c:	2bfe      	cmp	r3, #254	; 0xfe
  40041e:	d103      	bne.n	400428 <ov_write_regs+0x20>
			delay_ms(5);
  400420:	f24a 706a 	movw	r0, #42858	; 0xa76a
  400424:	47c0      	blx	r8
  400426:	e00c      	b.n	400442 <ov_write_regs+0x3a>
		} else {
			twi_packet_regs.addr[0] = p_next->reg;
  400428:	f88d 3004 	strb.w	r3, [sp, #4]
			twi_packet_regs.addr_length = 1;
  40042c:	9502      	str	r5, [sp, #8]
			twi_packet_regs.chip = OV_I2C_SENSOR_ADDRESS;
  40042e:	2321      	movs	r3, #33	; 0x21
  400430:	f88d 3014 	strb.w	r3, [sp, #20]
			twi_packet_regs.length = 1;
  400434:	9504      	str	r5, [sp, #16]
			twi_packet_regs.buffer = &(p_next->val);
  400436:	9203      	str	r2, [sp, #12]

			ul_err = ov_write_reg(p_twi, &twi_packet_regs);
  400438:	4638      	mov	r0, r7
  40043a:	a901      	add	r1, sp, #4
  40043c:	47b0      	blx	r6
			ul_size++;

			if (ul_err == TWI_BUSY) {
  40043e:	2808      	cmp	r0, #8
  400440:	d00a      	beq.n	400458 <ov_write_regs+0x50>
  400442:	3402      	adds	r4, #2
  400444:	4622      	mov	r2, r4
	uint32_t ul_err;
	uint32_t ul_size = 0;
	twi_packet_t twi_packet_regs;
	ov_reg *p_next = (ov_reg *)p_reg_list;

	while (!((p_next->reg == OV_REG_TERM) &&
  400446:	f814 3c01 	ldrb.w	r3, [r4, #-1]
  40044a:	2bff      	cmp	r3, #255	; 0xff
  40044c:	d1e6      	bne.n	40041c <ov_write_regs+0x14>
  40044e:	7821      	ldrb	r1, [r4, #0]
  400450:	29ff      	cmp	r1, #255	; 0xff
  400452:	d1e9      	bne.n	400428 <ov_write_regs+0x20>
			}
		}

		p_next++;
	}
	return 0;
  400454:	2000      	movs	r0, #0
  400456:	e000      	b.n	40045a <ov_write_regs+0x52>

			ul_err = ov_write_reg(p_twi, &twi_packet_regs);
			ul_size++;

			if (ul_err == TWI_BUSY) {
				return ul_err;
  400458:	2008      	movs	r0, #8
		}

		p_next++;
	}
	return 0;
}
  40045a:	b006      	add	sp, #24
  40045c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  400460:	004003fd 	.word	0x004003fd
  400464:	20000001 	.word	0x20000001

00400468 <ov_init>:
 *
 * \param p_twi TWI interface.
 * \return 0 on success, 1 otherwise.
 */
uint32_t ov_init(Twi* const p_twi)
{
  400468:	b5f0      	push	{r4, r5, r6, r7, lr}
  40046a:	b08d      	sub	sp, #52	; 0x34
  40046c:	4607      	mov	r7, r0
 */
static uint32_t ov_id(Twi* const p_twi)
{
	twi_packet_t packet_pid;
	twi_packet_t packet_ver;
	uint32_t ul_id = 0;
  40046e:	2300      	movs	r3, #0
  400470:	9300      	str	r3, [sp, #0]
	uint32_t ul_ver = 0;
  400472:	9301      	str	r3, [sp, #4]

	/* OV_PID */
	packet_pid.chip = OV_I2C_SENSOR_ADDRESS;
  400474:	2621      	movs	r6, #33	; 0x21
  400476:	f88d 6018 	strb.w	r6, [sp, #24]
	packet_pid.addr[0] = OV7740_PIDH;
  40047a:	230a      	movs	r3, #10
  40047c:	f88d 3008 	strb.w	r3, [sp, #8]
	packet_pid.addr_length = 1;
  400480:	2401      	movs	r4, #1
  400482:	9403      	str	r4, [sp, #12]
	packet_pid.buffer = &ul_id;
  400484:	f8cd d010 	str.w	sp, [sp, #16]
	packet_pid.length = 1;
  400488:	9405      	str	r4, [sp, #20]

	ov_read_reg(p_twi, &packet_pid);
  40048a:	a902      	add	r1, sp, #8
  40048c:	4d3a      	ldr	r5, [pc, #232]	; (400578 <ov_init+0x110>)
  40048e:	47a8      	blx	r5

	/* OV_VER */
	packet_ver.chip = OV_I2C_SENSOR_ADDRESS;
  400490:	f88d 602c 	strb.w	r6, [sp, #44]	; 0x2c
	packet_ver.addr[0] = OV7740_PIDL;
  400494:	230b      	movs	r3, #11
  400496:	f88d 301c 	strb.w	r3, [sp, #28]
	packet_ver.addr_length = 1;
  40049a:	9408      	str	r4, [sp, #32]
	packet_ver.buffer = &ul_ver;
  40049c:	ab01      	add	r3, sp, #4
  40049e:	9309      	str	r3, [sp, #36]	; 0x24
	packet_ver.length = 1;
  4004a0:	940a      	str	r4, [sp, #40]	; 0x28

	ov_read_reg(p_twi, &packet_ver);
  4004a2:	4638      	mov	r0, r7
  4004a4:	a907      	add	r1, sp, #28
  4004a6:	47a8      	blx	r5
	return ((uint32_t)(ul_id << 8) | ul_ver);
  4004a8:	9b01      	ldr	r3, [sp, #4]
  4004aa:	9a00      	ldr	r2, [sp, #0]
  4004ac:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
{
	uint32_t ul_id = 0;

	ul_id = ov_id( p_twi );

	if (((ul_id >> 8)&0xff)  == OV7740_PIDH_DEFAULT) {
  4004b0:	f3c3 2307 	ubfx	r3, r3, #8, #8
  4004b4:	2b77      	cmp	r3, #119	; 0x77
  4004b6:	d135      	bne.n	400524 <ov_init+0xbc>
 * \return 0 if the sensor is present, 1 otherwise.
 */
static uint32_t ov_manufacturer(Twi* const p_twi)
{
	twi_packet_t twi_packet;
	uint32_t ul_midh = 0;
  4004b8:	2300      	movs	r3, #0
  4004ba:	9301      	str	r3, [sp, #4]
	uint32_t ul_midl = 0;
  4004bc:	9302      	str	r3, [sp, #8]

	/* OV_MIDH */
	twi_packet.addr[0] = OV7740_MIDH;
  4004be:	231c      	movs	r3, #28
  4004c0:	f88d 301c 	strb.w	r3, [sp, #28]
	twi_packet.addr_length = 1;
  4004c4:	9408      	str	r4, [sp, #32]
	twi_packet.chip = OV_I2C_SENSOR_ADDRESS;
  4004c6:	f88d 602c 	strb.w	r6, [sp, #44]	; 0x2c
	twi_packet.buffer = &ul_midh;
  4004ca:	ab01      	add	r3, sp, #4
  4004cc:	9309      	str	r3, [sp, #36]	; 0x24
	twi_packet.length = 1;
  4004ce:	940a      	str	r4, [sp, #40]	; 0x28

	ov_read_reg(p_twi, &twi_packet);
  4004d0:	4638      	mov	r0, r7
  4004d2:	a907      	add	r1, sp, #28
  4004d4:	47a8      	blx	r5

	/* OV_MIDL */
	twi_packet.addr[0] = OV7740_MIDL;
  4004d6:	231d      	movs	r3, #29
  4004d8:	f88d 301c 	strb.w	r3, [sp, #28]
	twi_packet.addr_length = 1;
  4004dc:	9408      	str	r4, [sp, #32]
	twi_packet.chip = OV_I2C_SENSOR_ADDRESS;
  4004de:	f88d 602c 	strb.w	r6, [sp, #44]	; 0x2c
	twi_packet.buffer = &ul_midl;
  4004e2:	ab02      	add	r3, sp, #8
  4004e4:	9309      	str	r3, [sp, #36]	; 0x24
	twi_packet.length = 1;
  4004e6:	940a      	str	r4, [sp, #40]	; 0x28

	ov_read_reg(p_twi, &twi_packet);
  4004e8:	4638      	mov	r0, r7
  4004ea:	a907      	add	r1, sp, #28
  4004ec:	47a8      	blx	r5

	if ((ul_midh == OV7740_MIDH_DEFAULT) && (ul_midl == OV7740_MIDL_DEFAULT)) {
  4004ee:	9b01      	ldr	r3, [sp, #4]
  4004f0:	2b7f      	cmp	r3, #127	; 0x7f
  4004f2:	d13e      	bne.n	400572 <ov_init+0x10a>
  4004f4:	9b02      	ldr	r3, [sp, #8]
  4004f6:	2ba2      	cmp	r3, #162	; 0xa2
  4004f8:	d13b      	bne.n	400572 <ov_init+0x10a>
  4004fa:	e015      	b.n	400528 <ov_init+0xc0>
	if (ul_value != ul_entervalue) {
		return 1;
	}

	/* return old value */
	twi_packet.buffer = &ul_oldvalue;
  4004fc:	ab01      	add	r3, sp, #4
  4004fe:	9309      	str	r3, [sp, #36]	; 0x24
	ov_write_reg(p_twi, &twi_packet);
  400500:	4638      	mov	r0, r7
  400502:	a907      	add	r1, sp, #28
  400504:	4b1d      	ldr	r3, [pc, #116]	; (40057c <ov_init+0x114>)
  400506:	4798      	blx	r3

	twi_packet.buffer = &ul_value;
  400508:	f8cd d024 	str.w	sp, [sp, #36]	; 0x24
	ov_read_reg(p_twi, &twi_packet);
  40050c:	4638      	mov	r0, r7
  40050e:	a907      	add	r1, sp, #28
  400510:	4b19      	ldr	r3, [pc, #100]	; (400578 <ov_init+0x110>)
  400512:	4798      	blx	r3

	if (ul_value != ul_oldvalue) {
  400514:	9801      	ldr	r0, [sp, #4]
  400516:	9b00      	ldr	r3, [sp, #0]
  400518:	1a18      	subs	r0, r3, r0
  40051a:	bf18      	it	ne
  40051c:	2001      	movne	r0, #1
  40051e:	e029      	b.n	400574 <ov_init+0x10c>

	twi_packet.buffer = &ul_value;
	ov_read_reg(p_twi, &twi_packet);

	if (ul_value != ul_entervalue) {
		return 1;
  400520:	2001      	movs	r0, #1
  400522:	e027      	b.n	400574 <ov_init+0x10c>
				return 0;
			}
		}
	}

	return 1;
  400524:	2001      	movs	r0, #1
  400526:	e025      	b.n	400574 <ov_init+0x10c>
 * \return 0 on success, 1 otherwise.
 */
static uint32_t ov_test_write(Twi* const p_twi)
{
	twi_packet_t twi_packet;
	uint32_t ul_value = 0;
  400528:	2300      	movs	r3, #0
  40052a:	9300      	str	r3, [sp, #0]
	uint32_t ul_oldvalue = 0;
  40052c:	9301      	str	r3, [sp, #4]
	uint32_t ul_entervalue = 0;
  40052e:	9302      	str	r3, [sp, #8]

	/* OV_BLUE_GAIN */
	twi_packet.addr[0] = 0x01;
  400530:	2301      	movs	r3, #1
  400532:	f88d 301c 	strb.w	r3, [sp, #28]
	twi_packet.addr_length = 1;
  400536:	9308      	str	r3, [sp, #32]
	twi_packet.chip = OV_I2C_SENSOR_ADDRESS;
  400538:	2221      	movs	r2, #33	; 0x21
  40053a:	f88d 202c 	strb.w	r2, [sp, #44]	; 0x2c
	twi_packet.length = 1;
  40053e:	930a      	str	r3, [sp, #40]	; 0x28

	twi_packet.buffer = &ul_oldvalue;
  400540:	ab01      	add	r3, sp, #4
  400542:	9309      	str	r3, [sp, #36]	; 0x24
	ov_read_reg(p_twi, &twi_packet);
  400544:	4638      	mov	r0, r7
  400546:	a907      	add	r1, sp, #28
  400548:	4c0b      	ldr	r4, [pc, #44]	; (400578 <ov_init+0x110>)
  40054a:	47a0      	blx	r4

	ul_entervalue = 0xAD;
  40054c:	ab0c      	add	r3, sp, #48	; 0x30
  40054e:	22ad      	movs	r2, #173	; 0xad
  400550:	f843 2d28 	str.w	r2, [r3, #-40]!
	twi_packet.buffer = &ul_entervalue;
  400554:	9309      	str	r3, [sp, #36]	; 0x24
	ov_write_reg(p_twi, &twi_packet);
  400556:	4638      	mov	r0, r7
  400558:	a907      	add	r1, sp, #28
  40055a:	4b08      	ldr	r3, [pc, #32]	; (40057c <ov_init+0x114>)
  40055c:	4798      	blx	r3

	twi_packet.buffer = &ul_value;
  40055e:	f8cd d024 	str.w	sp, [sp, #36]	; 0x24
	ov_read_reg(p_twi, &twi_packet);
  400562:	4638      	mov	r0, r7
  400564:	a907      	add	r1, sp, #28
  400566:	47a0      	blx	r4

	if (ul_value != ul_entervalue) {
  400568:	9b02      	ldr	r3, [sp, #8]
  40056a:	9a00      	ldr	r2, [sp, #0]
  40056c:	429a      	cmp	r2, r3
  40056e:	d1d7      	bne.n	400520 <ov_init+0xb8>
  400570:	e7c4      	b.n	4004fc <ov_init+0x94>
				return 0;
			}
		}
	}

	return 1;
  400572:	2001      	movs	r0, #1
}
  400574:	b00d      	add	sp, #52	; 0x34
  400576:	bdf0      	pop	{r4, r5, r6, r7, pc}
  400578:	004003f1 	.word	0x004003f1
  40057c:	004003fd 	.word	0x004003fd

00400580 <ov_configure>:
 * \param p_twi TWI interface.
 * \param format Specific format to configure.
 * \return 0 on success, 1 otherwise.
 */
uint32_t ov_configure(Twi* const p_twi, const e_ov7740_format format)
{
  400580:	b508      	push	{r3, lr}
	const ov_reg *p_regs_conf = NULL;

	/* Common register initialization */
	switch (format) {
  400582:	2908      	cmp	r1, #8
  400584:	d814      	bhi.n	4005b0 <ov_configure+0x30>
  400586:	e8df f001 	tbb	[pc, r1]
  40058a:	0515      	.short	0x0515
  40058c:	0b090717 	.word	0x0b090717
  400590:	0f0d      	.short	0x0f0d
  400592:	11          	.byte	0x11
  400593:	00          	.byte	0x00
	case QVGA_YUV422_10FPS:
		p_regs_conf = OV7740_QVGA_YUV422_10FPS;
		break;

	case QVGA_YUV422_15FPS:
		p_regs_conf = OV7740_QVGA_YUV422_15FPS;
  400594:	490b      	ldr	r1, [pc, #44]	; (4005c4 <ov_configure+0x44>)
  400596:	e010      	b.n	4005ba <ov_configure+0x3a>
	case QVGA_YUV422_20FPS:
		p_regs_conf = OV7740_QVGA_YUV422_20FPS;
		break;

	case QVGA_YUV422_30FPS:
		p_regs_conf = OV7740_QVGA_YUV422_30FPS;
  400598:	490b      	ldr	r1, [pc, #44]	; (4005c8 <ov_configure+0x48>)
		break;
  40059a:	e00e      	b.n	4005ba <ov_configure+0x3a>

	case QVGA_RGB888:
		p_regs_conf = OV7740_QVGA_RGB888;
  40059c:	490b      	ldr	r1, [pc, #44]	; (4005cc <ov_configure+0x4c>)
		break;
  40059e:	e00c      	b.n	4005ba <ov_configure+0x3a>

	case QQVGA_YUV422:
		p_regs_conf = OV7740_QQVGA_YUV422;
  4005a0:	490b      	ldr	r1, [pc, #44]	; (4005d0 <ov_configure+0x50>)
		break;
  4005a2:	e00a      	b.n	4005ba <ov_configure+0x3a>

	case QQVGA_RGB888:
		p_regs_conf = OV7740_QQVGA_RGB888;
  4005a4:	490b      	ldr	r1, [pc, #44]	; (4005d4 <ov_configure+0x54>)
		break;
  4005a6:	e008      	b.n	4005ba <ov_configure+0x3a>

	case TEST_PATTERN:
		p_regs_conf = OV7740_TEST_PATTERN;
  4005a8:	490b      	ldr	r1, [pc, #44]	; (4005d8 <ov_configure+0x58>)
		break;
  4005aa:	e006      	b.n	4005ba <ov_configure+0x3a>

	case VGA_YUV422_20FPS:
		p_regs_conf = OV7740_VGA_YUV422_20FPS;
  4005ac:	490b      	ldr	r1, [pc, #44]	; (4005dc <ov_configure+0x5c>)
		break;
  4005ae:	e004      	b.n	4005ba <ov_configure+0x3a>
	if (p_regs_conf != NULL) {
		ov_write_regs( p_twi, p_regs_conf );
		return 0;
	}

	return 1;
  4005b0:	2001      	movs	r0, #1
  4005b2:	bd08      	pop	{r3, pc}
	const ov_reg *p_regs_conf = NULL;

	/* Common register initialization */
	switch (format) {
	case QVGA_YUV422_10FPS:
		p_regs_conf = OV7740_QVGA_YUV422_10FPS;
  4005b4:	490a      	ldr	r1, [pc, #40]	; (4005e0 <ov_configure+0x60>)
  4005b6:	e000      	b.n	4005ba <ov_configure+0x3a>
	case QVGA_YUV422_15FPS:
		p_regs_conf = OV7740_QVGA_YUV422_15FPS;
		break;

	case QVGA_YUV422_20FPS:
		p_regs_conf = OV7740_QVGA_YUV422_20FPS;
  4005b8:	490a      	ldr	r1, [pc, #40]	; (4005e4 <ov_configure+0x64>)
	default:
		break;
	}

	if (p_regs_conf != NULL) {
		ov_write_regs( p_twi, p_regs_conf );
  4005ba:	4b0b      	ldr	r3, [pc, #44]	; (4005e8 <ov_configure+0x68>)
  4005bc:	4798      	blx	r3
		return 0;
  4005be:	2000      	movs	r0, #0
	}

	return 1;
}
  4005c0:	bd08      	pop	{r3, pc}
  4005c2:	bf00      	nop
  4005c4:	0040fb54 	.word	0x0040fb54
  4005c8:	00410100 	.word	0x00410100
  4005cc:	0040fc44 	.word	0x0040fc44
  4005d0:	0041000c 	.word	0x0041000c
  4005d4:	0040fa60 	.word	0x0040fa60
  4005d8:	0040fd38 	.word	0x0040fd38
  4005dc:	0040f970 	.word	0x0040f970
  4005e0:	0040ff1c 	.word	0x0040ff1c
  4005e4:	0040fe2c 	.word	0x0040fe2c
  4005e8:	00400409 	.word	0x00400409

004005ec <aat31xx_set_backlight>:
 * \param ul_level backlight level.
 *
 * \note pin BOARD_AAT31XX_SET_GPIO must be configured before calling aat31xx_set_backlight.
 */
void aat31xx_set_backlight(uint32_t ul_level)
{
  4005ec:	b470      	push	{r4, r5, r6}
  4005ee:	b083      	sub	sp, #12
	volatile uint32_t ul_delay;
	uint32_t i;

#ifdef CONF_BOARD_AAT3155
	ul_level = AAT31XX_MAX_BACKLIGHT_LEVEL - ul_level + 1;
  4005f0:	f1c0 0011 	rsb	r0, r0, #17
#ifdef CONF_BOARD_AAT3193
	ul_level = AAT31XX_MAX_BACKLIGHT_LEVEL - ul_level + 1;
#endif

	/* Ensure valid level */
	ul_level = (ul_level > AAT31XX_MAX_BACKLIGHT_LEVEL) ? AAT31XX_MAX_BACKLIGHT_LEVEL : ul_level;
  4005f4:	2810      	cmp	r0, #16
  4005f6:	bf28      	it	cs
  4005f8:	2010      	movcs	r0, #16
	ul_level = (ul_level < AAT31XX_MIN_BACKLIGHT_LEVEL) ? AAT31XX_MIN_BACKLIGHT_LEVEL : ul_level;
  4005fa:	2800      	cmp	r0, #0
  4005fc:	bf08      	it	eq
  4005fe:	2001      	moveq	r0, #1
 * \param ul_level backlight level.
 *
 * \note pin BOARD_AAT31XX_SET_GPIO must be configured before calling aat31xx_set_backlight.
 */
void aat31xx_set_backlight(uint32_t ul_level)
{
  400600:	2100      	movs	r1, #0
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  400602:	4e10      	ldr	r6, [pc, #64]	; (400644 <aat31xx_set_backlight+0x58>)
  400604:	f44f 5500 	mov.w	r5, #8192	; 0x2000
	ul_level = (ul_level < AAT31XX_MIN_BACKLIGHT_LEVEL) ? AAT31XX_MIN_BACKLIGHT_LEVEL : ul_level;

	/* Set new backlight level */
	for (i = 0; i < ul_level; i++) {
		ioport_set_pin_level(BOARD_AAT31XX_SET_GPIO, IOPORT_PIN_LEVEL_LOW);
		ul_delay = DELAY_PULSE;
  400608:	2418      	movs	r4, #24
  40060a:	6375      	str	r5, [r6, #52]	; 0x34
  40060c:	9401      	str	r4, [sp, #4]
		while (ul_delay--) {
  40060e:	9b01      	ldr	r3, [sp, #4]
  400610:	1e5a      	subs	r2, r3, #1
  400612:	9201      	str	r2, [sp, #4]
  400614:	2b00      	cmp	r3, #0
  400616:	d1fa      	bne.n	40060e <aat31xx_set_backlight+0x22>
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  400618:	6335      	str	r5, [r6, #48]	; 0x30
		}

		ioport_set_pin_level(BOARD_AAT31XX_SET_GPIO, IOPORT_PIN_LEVEL_HIGH);

		ul_delay = DELAY_PULSE;
  40061a:	9401      	str	r4, [sp, #4]
		while (ul_delay--) {
  40061c:	9b01      	ldr	r3, [sp, #4]
  40061e:	1e5a      	subs	r2, r3, #1
  400620:	9201      	str	r2, [sp, #4]
  400622:	2b00      	cmp	r3, #0
  400624:	d1fa      	bne.n	40061c <aat31xx_set_backlight+0x30>
	/* Ensure valid level */
	ul_level = (ul_level > AAT31XX_MAX_BACKLIGHT_LEVEL) ? AAT31XX_MAX_BACKLIGHT_LEVEL : ul_level;
	ul_level = (ul_level < AAT31XX_MIN_BACKLIGHT_LEVEL) ? AAT31XX_MIN_BACKLIGHT_LEVEL : ul_level;

	/* Set new backlight level */
	for (i = 0; i < ul_level; i++) {
  400626:	3101      	adds	r1, #1
  400628:	4281      	cmp	r1, r0
  40062a:	d3ee      	bcc.n	40060a <aat31xx_set_backlight+0x1e>
		ul_delay = DELAY_PULSE;
		while (ul_delay--) {
		}
	}

	ul_delay = DELAY_ENABLE;
  40062c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
  400630:	9301      	str	r3, [sp, #4]
	while (ul_delay--) {
  400632:	9b01      	ldr	r3, [sp, #4]
  400634:	1e5a      	subs	r2, r3, #1
  400636:	9201      	str	r2, [sp, #4]
  400638:	2b00      	cmp	r3, #0
  40063a:	d1fa      	bne.n	400632 <aat31xx_set_backlight+0x46>
	}
}
  40063c:	b003      	add	sp, #12
  40063e:	bc70      	pop	{r4, r5, r6}
  400640:	4770      	bx	lr
  400642:	bf00      	nop
  400644:	400e1200 	.word	0x400e1200

00400648 <aat31xx_disable_backlight>:

/**
 * \brief Switch off backlight.
 */
void aat31xx_disable_backlight(void)
{
  400648:	b082      	sub	sp, #8
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  40064a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  40064e:	4b06      	ldr	r3, [pc, #24]	; (400668 <aat31xx_disable_backlight+0x20>)
  400650:	635a      	str	r2, [r3, #52]	; 0x34
	volatile uint32_t ul_delay;

	ioport_set_pin_level(BOARD_AAT31XX_SET_GPIO, IOPORT_PIN_LEVEL_LOW);

	ul_delay = DELAY_DISABLE;
  400652:	f44f 3300 	mov.w	r3, #131072	; 0x20000
  400656:	9301      	str	r3, [sp, #4]
	while (ul_delay--) {
  400658:	9b01      	ldr	r3, [sp, #4]
  40065a:	1e5a      	subs	r2, r3, #1
  40065c:	9201      	str	r2, [sp, #4]
  40065e:	2b00      	cmp	r3, #0
  400660:	d1fa      	bne.n	400658 <aat31xx_disable_backlight+0x10>
	}
}
  400662:	b002      	add	sp, #8
  400664:	4770      	bx	lr
  400666:	bf00      	nop
  400668:	400e1200 	.word	0x400e1200

0040066c <ili9325_write_ram>:
 *
 * \param ul_color 24-bits RGB color.
 */
static void ili9325_write_ram(ili9325_color_t ul_color)
{
	LCD_WD((ul_color >> 16) & 0xFF);
  40066c:	f3c0 4207 	ubfx	r2, r0, #16, #8
	{
		*((volatile uint8_t *)(BOARD_ILI9325_ADDR)) = lcd_index; /* ILI9325 index register address */
	}
	static inline void LCD_WD(uint8_t lcd_data)
	{
		*((volatile uint8_t *)((BOARD_ILI9325_ADDR) | (BOARD_ILI9325_RS))) = lcd_data;
  400670:	4b03      	ldr	r3, [pc, #12]	; (400680 <ili9325_write_ram+0x14>)
  400672:	701a      	strb	r2, [r3, #0]
	LCD_WD((ul_color >> 8) & 0xFF);
  400674:	f3c0 2207 	ubfx	r2, r0, #8, #8
  400678:	701a      	strb	r2, [r3, #0]
	LCD_WD(ul_color & 0xFF);
  40067a:	b2c0      	uxtb	r0, r0
  40067c:	7018      	strb	r0, [r3, #0]
  40067e:	4770      	bx	lr
  400680:	62000002 	.word	0x62000002

00400684 <ili9325_write_register>:

/* Define EBI access for ILI9325 8-bit System Interface.*/
#if defined(BOARD_ILI9325_ADDR) && defined (BOARD_ILI9325_RS)
	static inline void LCD_IR(uint8_t lcd_index)
	{
		*((volatile uint8_t *)(BOARD_ILI9325_ADDR)) = lcd_index; /* ILI9325 index register address */
  400684:	f04f 43c4 	mov.w	r3, #1644167168	; 0x62000000
  400688:	2200      	movs	r2, #0
  40068a:	701a      	strb	r2, [r3, #0]
  40068c:	7018      	strb	r0, [r3, #0]
 */
static void ili9325_write_register(uint8_t uc_reg, uint16_t us_data)
{
	LCD_IR(0);
	LCD_IR(uc_reg);
	LCD_WD((us_data >> 8) & 0xFF);
  40068e:	0a0a      	lsrs	r2, r1, #8
	}
	static inline void LCD_WD(uint8_t lcd_data)
	{
		*((volatile uint8_t *)((BOARD_ILI9325_ADDR) | (BOARD_ILI9325_RS))) = lcd_data;
  400690:	3302      	adds	r3, #2
  400692:	701a      	strb	r2, [r3, #0]
	LCD_WD(us_data & 0xFF);
  400694:	b2c9      	uxtb	r1, r1
  400696:	7019      	strb	r1, [r3, #0]
  400698:	4770      	bx	lr
  40069a:	bf00      	nop

0040069c <ili9325_delay>:

/**
 * \brief Delay function.
 */
static void ili9325_delay(uint32_t ul_ms)
{
  40069c:	b082      	sub	sp, #8
	volatile uint32_t i;

	for(i = 0; i < ul_ms; i++) {
  40069e:	2300      	movs	r3, #0
  4006a0:	9301      	str	r3, [sp, #4]
  4006a2:	9b01      	ldr	r3, [sp, #4]
  4006a4:	4298      	cmp	r0, r3
  4006a6:	d911      	bls.n	4006cc <ili9325_delay+0x30>
		for(i = 0; i < 100000; i++) {
  4006a8:	2100      	movs	r1, #0
  4006aa:	4a09      	ldr	r2, [pc, #36]	; (4006d0 <ili9325_delay+0x34>)
  4006ac:	9101      	str	r1, [sp, #4]
  4006ae:	9b01      	ldr	r3, [sp, #4]
  4006b0:	4293      	cmp	r3, r2
  4006b2:	d805      	bhi.n	4006c0 <ili9325_delay+0x24>
  4006b4:	9b01      	ldr	r3, [sp, #4]
  4006b6:	3301      	adds	r3, #1
  4006b8:	9301      	str	r3, [sp, #4]
  4006ba:	9b01      	ldr	r3, [sp, #4]
  4006bc:	4293      	cmp	r3, r2
  4006be:	d9f9      	bls.n	4006b4 <ili9325_delay+0x18>
 */
static void ili9325_delay(uint32_t ul_ms)
{
	volatile uint32_t i;

	for(i = 0; i < ul_ms; i++) {
  4006c0:	9b01      	ldr	r3, [sp, #4]
  4006c2:	3301      	adds	r3, #1
  4006c4:	9301      	str	r3, [sp, #4]
  4006c6:	9b01      	ldr	r3, [sp, #4]
  4006c8:	4283      	cmp	r3, r0
  4006ca:	d3ef      	bcc.n	4006ac <ili9325_delay+0x10>
		for(i = 0; i < 100000; i++) {
		}
	}
}
  4006cc:	b002      	add	sp, #8
  4006ce:	4770      	bx	lr
  4006d0:	0001869f 	.word	0x0001869f

004006d4 <ili9325_display_on>:

/**
 * \brief Turn on the LCD.
 */
void ili9325_display_on(void)
{
  4006d4:	b508      	push	{r3, lr}
	ili9325_write_register(ILI9325_DISP_CTRL1,
  4006d6:	2007      	movs	r0, #7
  4006d8:	f240 1133 	movw	r1, #307	; 0x133
  4006dc:	4b01      	ldr	r3, [pc, #4]	; (4006e4 <ili9325_display_on+0x10>)
  4006de:	4798      	blx	r3
  4006e0:	bd08      	pop	{r3, pc}
  4006e2:	bf00      	nop
  4006e4:	00400685 	.word	0x00400685

004006e8 <ili9325_set_foreground_color>:
 * \brief Set foreground color.
 *
 * \param ul_color foreground color.
 */
void ili9325_set_foreground_color(ili9325_color_t ul_color)
{
  4006e8:	4a04      	ldr	r2, [pc, #16]	; (4006fc <ili9325_set_foreground_color+0x14>)
  4006ea:	1f13      	subs	r3, r2, #4
  4006ec:	f502 726f 	add.w	r2, r2, #956	; 0x3bc
	uint32_t i;

	/* Fill the cache with selected color */
	for (i = 0; i < LCD_DATA_CACHE_SIZE; ++i) {
		g_ul_pixel_cache[i] = ul_color;
  4006f0:	f843 0f04 	str.w	r0, [r3, #4]!
void ili9325_set_foreground_color(ili9325_color_t ul_color)
{
	uint32_t i;

	/* Fill the cache with selected color */
	for (i = 0; i < LCD_DATA_CACHE_SIZE; ++i) {
  4006f4:	4293      	cmp	r3, r2
  4006f6:	d1fb      	bne.n	4006f0 <ili9325_set_foreground_color+0x8>
		g_ul_pixel_cache[i] = ul_color;
	}
}
  4006f8:	4770      	bx	lr
  4006fa:	bf00      	nop
  4006fc:	200008d0 	.word	0x200008d0

00400700 <ili9325_set_window>:
 * \param ul_width The width of the window.
 * \param ul_height The height of the window.
 */
void ili9325_set_window(uint32_t ul_x, uint32_t ul_y, uint32_t ul_width,
		uint32_t ul_height)
{
  400700:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  400704:	460f      	mov	r7, r1
  400706:	4615      	mov	r5, r2
  400708:	461c      	mov	r4, r3
	Assert(ul_y <= 0x13f);
	Assert(ul_width <= (0xF0 - ul_x));
	Assert(ul_height <= (0x140 - ul_y));

	/* Set Horizontal Address Start Position */
	ili9325_write_register(ILI9325_HORIZONTAL_ADDR_START, (uint16_t)ul_x);
  40070a:	fa1f f880 	uxth.w	r8, r0
  40070e:	2050      	movs	r0, #80	; 0x50
  400710:	4641      	mov	r1, r8
  400712:	4e09      	ldr	r6, [pc, #36]	; (400738 <ili9325_set_window+0x38>)
  400714:	47b0      	blx	r6
  400716:	1e69      	subs	r1, r5, #1

	/* Set Horizontal Address End Position */
	ili9325_write_register(ILI9325_HORIZONTAL_ADDR_END, (uint16_t)(ul_x + ul_width - 1));
  400718:	4441      	add	r1, r8
  40071a:	2051      	movs	r0, #81	; 0x51
  40071c:	b289      	uxth	r1, r1
  40071e:	47b0      	blx	r6

	/* Set Vertical Address Start Position */
	ili9325_write_register(ILI9325_VERTICAL_ADDR_START, (uint16_t)ul_y);
  400720:	b2bd      	uxth	r5, r7
  400722:	2052      	movs	r0, #82	; 0x52
  400724:	4629      	mov	r1, r5
  400726:	47b0      	blx	r6
  400728:	1e61      	subs	r1, r4, #1

	/* Set Vertical Address End Position */
	ili9325_write_register(ILI9325_VERTICAL_ADDR_END, (uint16_t)(ul_y + ul_height - 1));
  40072a:	4429      	add	r1, r5
  40072c:	2053      	movs	r0, #83	; 0x53
  40072e:	b289      	uxth	r1, r1
  400730:	47b0      	blx	r6
  400732:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  400736:	bf00      	nop
  400738:	00400685 	.word	0x00400685

0040073c <ili9325_set_cursor_position>:
 *
 * \param us_x X coordinate of upper-left corner on LCD.
 * \param us_y Y coordinate of upper-left corner on LCD.
 */
void ili9325_set_cursor_position(uint16_t us_x, uint16_t us_y)
{
  40073c:	b538      	push	{r3, r4, r5, lr}
  40073e:	4603      	mov	r3, r0
  400740:	460d      	mov	r5, r1
	/* GRAM Horizontal/Vertical Address Set (R20h, R21h) */
	ili9325_write_register(ILI9325_HORIZONTAL_GRAM_ADDR_SET, us_x); /* column */
  400742:	2020      	movs	r0, #32
  400744:	4619      	mov	r1, r3
  400746:	4c03      	ldr	r4, [pc, #12]	; (400754 <ili9325_set_cursor_position+0x18>)
  400748:	47a0      	blx	r4
	ili9325_write_register(ILI9325_VERTICAL_GRAM_ADDR_SET, us_y); /* row */
  40074a:	2021      	movs	r0, #33	; 0x21
  40074c:	4629      	mov	r1, r5
  40074e:	47a0      	blx	r4
  400750:	bd38      	pop	{r3, r4, r5, pc}
  400752:	bf00      	nop
  400754:	00400685 	.word	0x00400685

00400758 <ili9325_init>:

/* Define EBI access for ILI9325 8-bit System Interface.*/
#if defined(BOARD_ILI9325_ADDR) && defined (BOARD_ILI9325_RS)
	static inline void LCD_IR(uint8_t lcd_index)
	{
		*((volatile uint8_t *)(BOARD_ILI9325_ADDR)) = lcd_index; /* ILI9325 index register address */
  400758:	f04f 43c4 	mov.w	r3, #1644167168	; 0x62000000
  40075c:	2200      	movs	r2, #0
  40075e:	701a      	strb	r2, [r3, #0]
  400760:	701a      	strb	r2, [r3, #0]
	{
		*((volatile uint8_t *)((BOARD_ILI9325_ADDR) | (BOARD_ILI9325_RS))) = lcd_data;
	}
	static inline uint8_t LCD_RD(void)
	{
		return *((volatile uint8_t *)((BOARD_ILI9325_ADDR) | (BOARD_ILI9325_RS)));
  400762:	4a5f      	ldr	r2, [pc, #380]	; (4008e0 <ili9325_init+0x188>)
  400764:	7811      	ldrb	r1, [r2, #0]
  400766:	7813      	ldrb	r3, [r2, #0]
static uint16_t ili9325_lcd_get_16(void)
{
	uint16_t us_value;

	us_value = LCD_RD();
	us_value = (us_value << 8) | LCD_RD();
  400768:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
uint32_t ili9325_init(struct ili9325_opt_t *p_opt)
{
	/* Check ILI9325 chipid */
	uint16_t chipid = ili9325_read_register(ILI9325_DEVICE_CODE_REG); /* Driver Code Read (R00h) */

	if (chipid != ILI9325_DEVICE_CODE) {
  40076c:	b21b      	sxth	r3, r3
  40076e:	4a5d      	ldr	r2, [pc, #372]	; (4008e4 <ili9325_init+0x18c>)
  400770:	4293      	cmp	r3, r2
  400772:	f040 80b3 	bne.w	4008dc <ili9325_init+0x184>
 * \param p_opt pointer to ILI9325 option structure.
 *
 * \return 0 if initialization succeeds, otherwise fails.
 */
uint32_t ili9325_init(struct ili9325_opt_t *p_opt)
{
  400776:	b570      	push	{r4, r5, r6, lr}
  400778:	4605      	mov	r5, r0
	if (chipid != ILI9325_DEVICE_CODE) {
		return 1;
	}

	/* Turn off LCD */
	ili9325_write_register(ILI9325_DISP_CTRL1, ILI9325_DISP_CTRL1_GON |
  40077a:	2007      	movs	r0, #7
  40077c:	2133      	movs	r1, #51	; 0x33
  40077e:	4c5a      	ldr	r4, [pc, #360]	; (4008e8 <ili9325_init+0x190>)
  400780:	47a0      	blx	r4
			ILI9325_DISP_CTRL1_DTE | ILI9325_DISP_CTRL1_D(0x03));

	/* Start initial sequence */
	/* Disable sleep and standby mode*/
	ili9325_write_register(ILI9325_POWER_CTRL1, 0x0000);
  400782:	2010      	movs	r0, #16
  400784:	2100      	movs	r1, #0
  400786:	47a0      	blx	r4
	/* Start internal OSC */
	ili9325_write_register(ILI9325_START_OSC_CTRL, ILI9325_START_OSC_CTRL_EN);
  400788:	2000      	movs	r0, #0
  40078a:	2101      	movs	r1, #1
  40078c:	47a0      	blx	r4
	/* Set SS bit and direction output from S720 to S1 */
	ili9325_write_register(ILI9325_DRIVER_OUTPUT_CTRL1, ILI9325_DRIVER_OUTPUT_CTRL1_SS);
  40078e:	2001      	movs	r0, #1
  400790:	f44f 7180 	mov.w	r1, #256	; 0x100
  400794:	47a0      	blx	r4
	/* Set 1 line inversion */
	ili9325_write_register(ILI9325_LCD_DRIVING_CTRL, ILI9325_LCD_DRIVING_CTRL_BIT10 |
  400796:	2002      	movs	r0, #2
  400798:	f44f 61e0 	mov.w	r1, #1792	; 0x700
  40079c:	47a0      	blx	r4
			ILI9325_LCD_DRIVING_CTRL_EOR | ILI9325_LCD_DRIVING_CTRL_BC0);
	/* Disable resizing feature */
	ili9325_write_register(ILI9325_RESIZE_CTRL, 0x0000);
  40079e:	2004      	movs	r0, #4
  4007a0:	2100      	movs	r1, #0
  4007a2:	47a0      	blx	r4
	/* Set the back porch and front porch */
	ili9325_write_register(ILI9325_DISP_CTRL2, ILI9325_DISP_CTRL2_BP(0x07) |
  4007a4:	2008      	movs	r0, #8
  4007a6:	f240 2107 	movw	r1, #519	; 0x207
  4007aa:	47a0      	blx	r4
			ILI9325_DISP_CTRL2_FP(0x02));
	/* Set non-display area refresh cycle ISC[3:0] */
	ili9325_write_register(ILI9325_DISP_CTRL3, 0x0000);
  4007ac:	2009      	movs	r0, #9
  4007ae:	2100      	movs	r1, #0
  4007b0:	47a0      	blx	r4
	/* Disable FMARK function */
	ili9325_write_register(ILI9325_DISP_CTRL4, 0x0000);
  4007b2:	200a      	movs	r0, #10
  4007b4:	2100      	movs	r1, #0
  4007b6:	47a0      	blx	r4
	/* 18-bit RGB interface and writing display data by the system interface */
	ili9325_write_register(ILI9325_RGB_DISP_INTERFACE_CTRL1, 0x0000);
  4007b8:	200c      	movs	r0, #12
  4007ba:	2100      	movs	r1, #0
  4007bc:	47a0      	blx	r4
	/* Set the output position of frame cycle */
	ili9325_write_register(ILI9325_FRAME_MAKER_POS, 0x0000);
  4007be:	200d      	movs	r0, #13
  4007c0:	2100      	movs	r1, #0
  4007c2:	47a0      	blx	r4
	/* RGB interface polarity */
	ili9325_write_register(ILI9325_RGB_DISP_INTERFACE_CTRL2, 0x0000);
  4007c4:	200f      	movs	r0, #15
  4007c6:	2100      	movs	r1, #0
  4007c8:	47a0      	blx	r4

	/* Power on sequence */
	/* Disable sleep and standby mode */
	ili9325_write_register(ILI9325_POWER_CTRL1, 0x0000);
  4007ca:	2010      	movs	r0, #16
  4007cc:	2100      	movs	r1, #0
  4007ce:	47a0      	blx	r4
	/* Selects the operating frequency of the step-up circuit 1,2 and Sets the ratio factor of Vci */
	ili9325_write_register(ILI9325_POWER_CTRL2, 0x0000);
  4007d0:	2011      	movs	r0, #17
  4007d2:	2100      	movs	r1, #0
  4007d4:	47a0      	blx	r4
	/* Set VREG1OUT voltage */
	ili9325_write_register(ILI9325_POWER_CTRL3, 0x0000);
  4007d6:	2012      	movs	r0, #18
  4007d8:	2100      	movs	r1, #0
  4007da:	47a0      	blx	r4
	/* Set VCOM amplitude */
	ili9325_write_register(ILI9325_POWER_CTRL4, 0x0000);
  4007dc:	2013      	movs	r0, #19
  4007de:	2100      	movs	r1, #0
  4007e0:	47a0      	blx	r4
	ili9325_delay(200);
  4007e2:	20c8      	movs	r0, #200	; 0xc8
  4007e4:	4e41      	ldr	r6, [pc, #260]	; (4008ec <ili9325_init+0x194>)
  4007e6:	47b0      	blx	r6

	/* Enable power supply and source driver */
	/* Adjusts the constant current and Sets the factor used in the step-up circuits.*/
	ili9325_write_register(ILI9325_POWER_CTRL1, ILI9325_POWER_CTRL1_SAP |
  4007e8:	2010      	movs	r0, #16
  4007ea:	f241 2190 	movw	r1, #4752	; 0x1290
  4007ee:	47a0      	blx	r4
			ILI9325_POWER_CTRL1_BT(0x02) | ILI9325_POWER_CTRL1_APE | ILI9325_POWER_CTRL1_AP(0x01));
	/* Select the operating frequency of the step-up circuit 1,2 and Sets the ratio factor of Vci */
	ili9325_write_register(ILI9325_POWER_CTRL2, ILI9325_POWER_CTRL2_DC1(0x02) |
  4007f0:	2011      	movs	r0, #17
  4007f2:	f240 2127 	movw	r1, #551	; 0x227
  4007f6:	47a0      	blx	r4
			ILI9325_POWER_CTRL2_DC0(0x02) | ILI9325_POWER_CTRL2_VC(0x07));
	ili9325_delay(50);
  4007f8:	2032      	movs	r0, #50	; 0x32
  4007fa:	47b0      	blx	r6
	/* Internal reference voltage= Vci */
	ili9325_write_register(ILI9325_POWER_CTRL3, ILI9325_POWER_CTRL3_PON |
  4007fc:	2012      	movs	r0, #18
  4007fe:	211b      	movs	r1, #27
  400800:	47a0      	blx	r4
			ILI9325_POWER_CTRL3_VRH(0x0B));
	ili9325_delay(50);
  400802:	2032      	movs	r0, #50	; 0x32
  400804:	47b0      	blx	r6
	/* Set VDV[4:0] for VCOM amplitude */
	ili9325_write_register(ILI9325_POWER_CTRL4, ILI9325_POWER_CTRL4_VDV(0x11));
  400806:	2013      	movs	r0, #19
  400808:	f44f 5188 	mov.w	r1, #4352	; 0x1100
  40080c:	47a0      	blx	r4
	/* Set VCM[5:0] for VCOMH */
	ili9325_write_register(ILI9325_POWER_CTRL7, ILI9325_POWER_CTRL7_VCM(0x19));
  40080e:	2029      	movs	r0, #41	; 0x29
  400810:	2119      	movs	r1, #25
  400812:	47a0      	blx	r4
	/* Set Frame Rate */
	ili9325_write_register(ILI9325_FRAME_RATE_AND_COLOR_CTRL,
  400814:	202b      	movs	r0, #43	; 0x2b
  400816:	210d      	movs	r1, #13
  400818:	47a0      	blx	r4
			ILI9325_FRAME_RATE_AND_COLOR_CTRL_FRS(0x0D));
	ili9325_delay(50);
  40081a:	2032      	movs	r0, #50	; 0x32
  40081c:	47b0      	blx	r6

	/* Adjust the Gamma Curve */
	ili9325_write_register(ILI9325_GAMMA_CTRL1, 0x0000);
  40081e:	2030      	movs	r0, #48	; 0x30
  400820:	2100      	movs	r1, #0
  400822:	47a0      	blx	r4
	ili9325_write_register(ILI9325_GAMMA_CTRL2, ILI9325_GAMMA_CTRL2_KP3(0x02) |
  400824:	2031      	movs	r0, #49	; 0x31
  400826:	f44f 7101 	mov.w	r1, #516	; 0x204
  40082a:	47a0      	blx	r4
			ILI9325_GAMMA_CTRL2_KP2(0x04));
	ili9325_write_register(ILI9325_GAMMA_CTRL3, ILI9325_GAMMA_CTRL3_KP5(0x02) |
  40082c:	2032      	movs	r0, #50	; 0x32
  40082e:	f44f 7100 	mov.w	r1, #512	; 0x200
  400832:	47a0      	blx	r4
			ILI9325_GAMMA_CTRL3_KP4(0x00));
	ili9325_write_register(ILI9325_GAMMA_CTRL4, ILI9325_GAMMA_CTRL4_RP1(0x00) |
  400834:	2035      	movs	r0, #53	; 0x35
  400836:	2107      	movs	r1, #7
  400838:	47a0      	blx	r4
			ILI9325_GAMMA_CTRL4_RP0(0x07));
	ili9325_write_register(ILI9325_GAMMA_CTRL5, ILI9325_GAMMA_CTRL5_VRP1(0x14) |
  40083a:	2036      	movs	r0, #54	; 0x36
  40083c:	f241 4104 	movw	r1, #5124	; 0x1404
  400840:	47a0      	blx	r4
			ILI9325_GAMMA_CTRL5_VRP0(0x04));
	ili9325_write_register(ILI9325_GAMMA_CTRL6, ILI9325_GAMMA_CTRL6_KN1(0x07) |
  400842:	2037      	movs	r0, #55	; 0x37
  400844:	f240 7105 	movw	r1, #1797	; 0x705
  400848:	47a0      	blx	r4
			ILI9325_GAMMA_CTRL6_KN0(0x05));
	ili9325_write_register(ILI9325_GAMMA_CTRL7, ILI9325_GAMMA_CTRL7_KN3(0x03) |
  40084a:	2038      	movs	r0, #56	; 0x38
  40084c:	f240 3105 	movw	r1, #773	; 0x305
  400850:	47a0      	blx	r4
			ILI9325_GAMMA_CTRL7_KN2(0x05));
	ili9325_write_register(ILI9325_GAMMA_CTRL8, ILI9325_GAMMA_CTRL8_KN5(0x07) |
  400852:	2039      	movs	r0, #57	; 0x39
  400854:	f240 7107 	movw	r1, #1799	; 0x707
  400858:	47a0      	blx	r4
			ILI9325_GAMMA_CTRL8_KN4(0x07));
	ili9325_write_register(ILI9325_GAMMA_CTRL9, ILI9325_GAMMA_CTRL9_RN1(0x07) |
  40085a:	203c      	movs	r0, #60	; 0x3c
  40085c:	f240 7101 	movw	r1, #1793	; 0x701
  400860:	47a0      	blx	r4
			ILI9325_GAMMA_CTRL9_RN0(0x01));
	ili9325_write_register(ILI9325_GAMMA_CTRL10, ILI9325_GAMMA_CTRL10_VRN1(0x00) |
  400862:	203d      	movs	r0, #61	; 0x3d
  400864:	210e      	movs	r1, #14
  400866:	47a0      	blx	r4
			ILI9325_GAMMA_CTRL10_VRN0(0x0E));
	/* Use the high speed write mode (HWM=1) */
	/* When TRI = 1, data are transferred to the internal RAM in 8-bit x 3 transfers mode via the 8-bit interface. */
	/* DFM Set the mode of transferring data to the internal RAM when TRI = 1. */
	/* I/D[1:0] = 11 Horizontal : increment Vertical : increment, AM=0:Horizontal */
	ili9325_write_register(ILI9325_ENTRY_MODE, ILI9325_ENTRY_MODE_TRI |
  400868:	2003      	movs	r0, #3
  40086a:	f24d 0110 	movw	r1, #53264	; 0xd010
  40086e:	47a0      	blx	r4
			ILI9325_ENTRY_MODE_DFM | ILI9325_ENTRY_MODE_ID(0x01) |ILI9325_ENTRY_MODE_BGR);
	/* Sets the number of lines to drive the LCD at an interval of 8 lines. */
	/* The scan direction is from G320 to G1 */
	ili9325_write_register(ILI9325_DRIVER_OUTPUT_CTRL2, ILI9325_DRIVER_OUTPUT_CTRL2_GS |
  400870:	2060      	movs	r0, #96	; 0x60
  400872:	f44f 4127 	mov.w	r1, #42752	; 0xa700
  400876:	47a0      	blx	r4
			ILI9325_DRIVER_OUTPUT_CTRL2_NL(0x27));

	/* Vertical Scrolling */
	/* Disable scrolling and enable the grayscale inversion */
	ili9325_write_register(ILI9325_BASE_IMG_DISP_CTRL, ILI9325_BASE_IMG_DISP_CTRL_REV);
  400878:	2061      	movs	r0, #97	; 0x61
  40087a:	2101      	movs	r1, #1
  40087c:	47a0      	blx	r4
	ili9325_write_register(ILI9325_VERTICAL_SCROLL_CTRL, 0x0000);
  40087e:	206a      	movs	r0, #106	; 0x6a
  400880:	2100      	movs	r1, #0
  400882:	47a0      	blx	r4

	/* Disable Partial Display */
	ili9325_write_register(ILI9325_PARTIAL_IMG1_DISP_POS, 0x0000);
  400884:	2080      	movs	r0, #128	; 0x80
  400886:	2100      	movs	r1, #0
  400888:	47a0      	blx	r4
	ili9325_write_register(ILI9325_PARTIAL_IMG1_AREA_START_LINE, 0x0000);
  40088a:	2081      	movs	r0, #129	; 0x81
  40088c:	2100      	movs	r1, #0
  40088e:	47a0      	blx	r4
	ili9325_write_register(ILI9325_PARTIAL_IMG1_AREA_END_LINE, 0x0000);
  400890:	2082      	movs	r0, #130	; 0x82
  400892:	2100      	movs	r1, #0
  400894:	47a0      	blx	r4
	ili9325_write_register(ILI9325_PARTIAL_IMG2_DISP_POS, 0x0000);
  400896:	2083      	movs	r0, #131	; 0x83
  400898:	2100      	movs	r1, #0
  40089a:	47a0      	blx	r4
	ili9325_write_register(ILI9325_PARTIAL_IMG2_AREA_START_LINE, 0x0000);
  40089c:	2084      	movs	r0, #132	; 0x84
  40089e:	2100      	movs	r1, #0
  4008a0:	47a0      	blx	r4
	ili9325_write_register(ILI9325_PARTIAL_IMG2_AREA_END_LINE, 0x0000);
  4008a2:	2085      	movs	r0, #133	; 0x85
  4008a4:	2100      	movs	r1, #0
  4008a6:	47a0      	blx	r4

	/* Panel Control */
	ili9325_write_register(ILI9325_PANEL_INTERFACE_CTRL1,
  4008a8:	2090      	movs	r0, #144	; 0x90
  4008aa:	2110      	movs	r1, #16
  4008ac:	47a0      	blx	r4
			ILI9325_PANEL_INTERFACE_CTRL1_RTNI(0x10));
	ili9325_write_register(ILI9325_PANEL_INTERFACE_CTRL2,
  4008ae:	2092      	movs	r0, #146	; 0x92
  4008b0:	f44f 61c0 	mov.w	r1, #1536	; 0x600
  4008b4:	47a0      	blx	r4
			ILI9325_PANEL_INTERFACE_CTRL2_NOWI(0x06));
	ili9325_write_register(ILI9325_PANEL_INTERFACE_CTRL4,
  4008b6:	2095      	movs	r0, #149	; 0x95
  4008b8:	f44f 7188 	mov.w	r1, #272	; 0x110
  4008bc:	47a0      	blx	r4
			ILI9325_PANEL_INTERFACE_CTRL4_DIVE(0x01) |
			ILI9325_PANEL_INTERFACE_CTRL4_RTNE(0x10));

	ili9325_set_window(0, 0,p_opt->ul_width,p_opt->ul_height);
  4008be:	2000      	movs	r0, #0
  4008c0:	4601      	mov	r1, r0
  4008c2:	682a      	ldr	r2, [r5, #0]
  4008c4:	686b      	ldr	r3, [r5, #4]
  4008c6:	4c0a      	ldr	r4, [pc, #40]	; (4008f0 <ili9325_init+0x198>)
  4008c8:	47a0      	blx	r4
	ili9325_set_foreground_color(p_opt->foreground_color);
  4008ca:	68a8      	ldr	r0, [r5, #8]
  4008cc:	4b09      	ldr	r3, [pc, #36]	; (4008f4 <ili9325_init+0x19c>)
  4008ce:	4798      	blx	r3
	ili9325_set_cursor_position(0, 0);
  4008d0:	2000      	movs	r0, #0
  4008d2:	4601      	mov	r1, r0
  4008d4:	4b08      	ldr	r3, [pc, #32]	; (4008f8 <ili9325_init+0x1a0>)
  4008d6:	4798      	blx	r3
	return 0;
  4008d8:	2000      	movs	r0, #0
  4008da:	bd70      	pop	{r4, r5, r6, pc}
{
	/* Check ILI9325 chipid */
	uint16_t chipid = ili9325_read_register(ILI9325_DEVICE_CODE_REG); /* Driver Code Read (R00h) */

	if (chipid != ILI9325_DEVICE_CODE) {
		return 1;
  4008dc:	2001      	movs	r0, #1
  4008de:	4770      	bx	lr
  4008e0:	62000002 	.word	0x62000002
  4008e4:	ffff9325 	.word	0xffff9325
  4008e8:	00400685 	.word	0x00400685
  4008ec:	0040069d 	.word	0x0040069d
  4008f0:	00400701 	.word	0x00400701
  4008f4:	004006e9 	.word	0x004006e9
  4008f8:	0040073d 	.word	0x0040073d

004008fc <ili9325_fill>:
 * \brief Fill the LCD buffer with the specified color.
 *
 * \param ul_color fill color.
 */
void ili9325_fill(ili9325_color_t ul_color)
{
  4008fc:	b570      	push	{r4, r5, r6, lr}
  4008fe:	4606      	mov	r6, r0
	uint32_t dw;

	ili9325_set_cursor_position(0, 0);
  400900:	2000      	movs	r0, #0
  400902:	4601      	mov	r1, r0
  400904:	4b07      	ldr	r3, [pc, #28]	; (400924 <ili9325_fill+0x28>)
  400906:	4798      	blx	r3

/* Define EBI access for ILI9325 8-bit System Interface.*/
#if defined(BOARD_ILI9325_ADDR) && defined (BOARD_ILI9325_RS)
	static inline void LCD_IR(uint8_t lcd_index)
	{
		*((volatile uint8_t *)(BOARD_ILI9325_ADDR)) = lcd_index; /* ILI9325 index register address */
  400908:	f04f 43c4 	mov.w	r3, #1644167168	; 0x62000000
  40090c:	2200      	movs	r2, #0
  40090e:	701a      	strb	r2, [r3, #0]
  400910:	2222      	movs	r2, #34	; 0x22
  400912:	701a      	strb	r2, [r3, #0]
  400914:	f44f 3496 	mov.w	r4, #76800	; 0x12c00
	ili9325_write_ram_prepare();

	for (dw = ILI9325_LCD_WIDTH * ILI9325_LCD_HEIGHT; dw > 0; dw--) {
		ili9325_write_ram(ul_color);
  400918:	4d03      	ldr	r5, [pc, #12]	; (400928 <ili9325_fill+0x2c>)
  40091a:	4630      	mov	r0, r6
  40091c:	47a8      	blx	r5
	uint32_t dw;

	ili9325_set_cursor_position(0, 0);
	ili9325_write_ram_prepare();

	for (dw = ILI9325_LCD_WIDTH * ILI9325_LCD_HEIGHT; dw > 0; dw--) {
  40091e:	3c01      	subs	r4, #1
  400920:	d1fb      	bne.n	40091a <ili9325_fill+0x1e>
		ili9325_write_ram(ul_color);
	}
}
  400922:	bd70      	pop	{r4, r5, r6, pc}
  400924:	0040073d 	.word	0x0040073d
  400928:	0040066d 	.word	0x0040066d

0040092c <ili9325_draw_pixel>:
 *
 * \return 0 if succeeds, otherwise fails.
 */
uint32_t ili9325_draw_pixel(uint32_t ul_x, uint32_t ul_y)
{
	if ((ul_x >= ILI9325_LCD_WIDTH) || (ul_y >= ILI9325_LCD_HEIGHT)) {
  40092c:	28ef      	cmp	r0, #239	; 0xef
  40092e:	d813      	bhi.n	400958 <ili9325_draw_pixel+0x2c>
  400930:	f5b1 7fa0 	cmp.w	r1, #320	; 0x140
  400934:	d212      	bcs.n	40095c <ili9325_draw_pixel+0x30>
 * \param ul_y Y coordinate of pixel.
 *
 * \return 0 if succeeds, otherwise fails.
 */
uint32_t ili9325_draw_pixel(uint32_t ul_x, uint32_t ul_y)
{
  400936:	b510      	push	{r4, lr}
	if ((ul_x >= ILI9325_LCD_WIDTH) || (ul_y >= ILI9325_LCD_HEIGHT)) {
		return 1;
	}

	/* Set cursor */
	ili9325_set_cursor_position(ul_x, ul_y);
  400938:	b280      	uxth	r0, r0
  40093a:	b289      	uxth	r1, r1
  40093c:	4b08      	ldr	r3, [pc, #32]	; (400960 <ili9325_draw_pixel+0x34>)
  40093e:	4798      	blx	r3
  400940:	f04f 43c4 	mov.w	r3, #1644167168	; 0x62000000
  400944:	2400      	movs	r4, #0
  400946:	701c      	strb	r4, [r3, #0]
  400948:	2222      	movs	r2, #34	; 0x22
  40094a:	701a      	strb	r2, [r3, #0]

	/* Prepare to write in GRAM */
	ili9325_write_ram_prepare();
	ili9325_write_ram(*g_ul_pixel_cache);
  40094c:	4b05      	ldr	r3, [pc, #20]	; (400964 <ili9325_draw_pixel+0x38>)
  40094e:	6818      	ldr	r0, [r3, #0]
  400950:	4b05      	ldr	r3, [pc, #20]	; (400968 <ili9325_draw_pixel+0x3c>)
  400952:	4798      	blx	r3
	return 0;
  400954:	4620      	mov	r0, r4
  400956:	bd10      	pop	{r4, pc}
 * \return 0 if succeeds, otherwise fails.
 */
uint32_t ili9325_draw_pixel(uint32_t ul_x, uint32_t ul_y)
{
	if ((ul_x >= ILI9325_LCD_WIDTH) || (ul_y >= ILI9325_LCD_HEIGHT)) {
		return 1;
  400958:	2001      	movs	r0, #1
  40095a:	4770      	bx	lr
  40095c:	2001      	movs	r0, #1
  40095e:	4770      	bx	lr
  400960:	0040073d 	.word	0x0040073d
  400964:	200008d0 	.word	0x200008d0
  400968:	0040066d 	.word	0x0040066d

0040096c <ili9325_draw_prepare>:
 * \param ul_width The width of the window.
 * \param ul_height The height of the window.
 */
void ili9325_draw_prepare(uint32_t ul_x, uint32_t ul_y, uint32_t ul_width,
		uint32_t ul_height)
{
  40096c:	b570      	push	{r4, r5, r6, lr}
  40096e:	4605      	mov	r5, r0
  400970:	460c      	mov	r4, r1
	/* Determine the refresh window area */
	ili9325_set_window(ul_x, ul_y, ul_width, ul_height);
  400972:	4e06      	ldr	r6, [pc, #24]	; (40098c <ili9325_draw_prepare+0x20>)
  400974:	47b0      	blx	r6

	/* Set cursor */
	ili9325_set_cursor_position(ul_x, ul_y);
  400976:	b2a8      	uxth	r0, r5
  400978:	b2a1      	uxth	r1, r4
  40097a:	4b05      	ldr	r3, [pc, #20]	; (400990 <ili9325_draw_prepare+0x24>)
  40097c:	4798      	blx	r3
  40097e:	f04f 43c4 	mov.w	r3, #1644167168	; 0x62000000
  400982:	2200      	movs	r2, #0
  400984:	701a      	strb	r2, [r3, #0]
  400986:	2222      	movs	r2, #34	; 0x22
  400988:	701a      	strb	r2, [r3, #0]
  40098a:	bd70      	pop	{r4, r5, r6, pc}
  40098c:	00400701 	.word	0x00400701
  400990:	0040073d 	.word	0x0040073d

00400994 <ili9325_draw_string>:
 * \param ul_x X coordinate of string top-left corner.
 * \param ul_y Y coordinate of string top-left corner.
 * \param p_str String to display.
 */
void ili9325_draw_string(uint32_t ul_x, uint32_t ul_y, const uint8_t *p_str)
{
  400994:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  400998:	b085      	sub	sp, #20
  40099a:	9003      	str	r0, [sp, #12]
  40099c:	9202      	str	r2, [sp, #8]
	uint32_t xorg = ul_x;

	while (*p_str != 0) {
  40099e:	7813      	ldrb	r3, [r2, #0]
  4009a0:	2b00      	cmp	r3, #0
  4009a2:	d046      	beq.n	400a32 <ili9325_draw_string+0x9e>
  4009a4:	468b      	mov	fp, r1
  4009a6:	9001      	str	r0, [sp, #4]
		offset1 = offset0 + 1;

		/* Draw pixel on screen depending on the corresponding bit value from the charset */
		for (row = 0; row < 8; row++) {
			if ((p_uc_charset10x14[offset0] >> (7 - row)) & 0x1) {
				ili9325_draw_pixel(ul_x + col, ul_y + row);
  4009a8:	f8df 9090 	ldr.w	r9, [pc, #144]	; 400a3c <ili9325_draw_string+0xa8>
{
	uint32_t xorg = ul_x;

	while (*p_str != 0) {
		/* If newline, jump to the next line (font height + 2) */
		if (*p_str == '\n') {
  4009ac:	2b0a      	cmp	r3, #10
  4009ae:	d104      	bne.n	4009ba <ili9325_draw_string+0x26>
			ul_y += gfont.height + 2;
  4009b0:	f10b 0b10 	add.w	fp, fp, #16
			ul_x = xorg;
  4009b4:	9b03      	ldr	r3, [sp, #12]
  4009b6:	9301      	str	r3, [sp, #4]
  4009b8:	e035      	b.n	400a26 <ili9325_draw_string+0x92>
	uint32_t row, col;
	uint32_t offset, offset0, offset1;

	/* Compute offset according of the specified ASCII character */
	/* Note: the first 32 characters of the ASCII table are not handled */
	offset = ((uint32_t)uc_c - 0x20) * 20;
  4009ba:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  4009be:	4e1e      	ldr	r6, [pc, #120]	; (400a38 <ili9325_draw_string+0xa4>)
  4009c0:	eb06 0383 	add.w	r3, r6, r3, lsl #2
  4009c4:	f2a3 267f 	subw	r6, r3, #639	; 0x27f
  4009c8:	9a01      	ldr	r2, [sp, #4]
  4009ca:	4613      	mov	r3, r2
  4009cc:	330a      	adds	r3, #10
  4009ce:	9300      	str	r3, [sp, #0]
  4009d0:	4690      	mov	r8, r2
  4009d2:	2407      	movs	r4, #7
  4009d4:	4637      	mov	r7, r6
  4009d6:	eb0b 0a04 	add.w	sl, fp, r4
  4009da:	463d      	mov	r5, r7
		offset0 = offset + col * 2;
		offset1 = offset0 + 1;

		/* Draw pixel on screen depending on the corresponding bit value from the charset */
		for (row = 0; row < 8; row++) {
			if ((p_uc_charset10x14[offset0] >> (7 - row)) & 0x1) {
  4009dc:	f816 3c01 	ldrb.w	r3, [r6, #-1]
  4009e0:	4123      	asrs	r3, r4
  4009e2:	f013 0f01 	tst.w	r3, #1
  4009e6:	d003      	beq.n	4009f0 <ili9325_draw_string+0x5c>
				ili9325_draw_pixel(ul_x + col, ul_y + row);
  4009e8:	4640      	mov	r0, r8
  4009ea:	ebc4 010a 	rsb	r1, r4, sl
  4009ee:	47c8      	blx	r9
  4009f0:	3c01      	subs	r4, #1
		/* Compute the first and second byte offset of a column */
		offset0 = offset + col * 2;
		offset1 = offset0 + 1;

		/* Draw pixel on screen depending on the corresponding bit value from the charset */
		for (row = 0; row < 8; row++) {
  4009f2:	f1b4 3fff 	cmp.w	r4, #4294967295
  4009f6:	d1f0      	bne.n	4009da <ili9325_draw_string+0x46>
  4009f8:	2407      	movs	r4, #7
  4009fa:	f10b 070f 	add.w	r7, fp, #15
				ili9325_draw_pixel(ul_x + col, ul_y + row);
			}
		}

		for (row = 0; row < 6; row++) {
			if ((p_uc_charset10x14[offset1] >> (7 - row)) & 0x1) {
  4009fe:	782b      	ldrb	r3, [r5, #0]
  400a00:	4123      	asrs	r3, r4
  400a02:	f013 0f01 	tst.w	r3, #1
  400a06:	d002      	beq.n	400a0e <ili9325_draw_string+0x7a>
				ili9325_draw_pixel(ul_x + col, ul_y + row + 8);
  400a08:	4640      	mov	r0, r8
  400a0a:	1b39      	subs	r1, r7, r4
  400a0c:	47c8      	blx	r9
  400a0e:	3c01      	subs	r4, #1
			if ((p_uc_charset10x14[offset0] >> (7 - row)) & 0x1) {
				ili9325_draw_pixel(ul_x + col, ul_y + row);
			}
		}

		for (row = 0; row < 6; row++) {
  400a10:	2c01      	cmp	r4, #1
  400a12:	d1f4      	bne.n	4009fe <ili9325_draw_string+0x6a>
  400a14:	3602      	adds	r6, #2
  400a16:	f108 0801 	add.w	r8, r8, #1

	/* Compute offset according of the specified ASCII character */
	/* Note: the first 32 characters of the ASCII table are not handled */
	offset = ((uint32_t)uc_c - 0x20) * 20;

	for (col = 0; col < 10; col++) {
  400a1a:	9b00      	ldr	r3, [sp, #0]
  400a1c:	4598      	cmp	r8, r3
  400a1e:	d1d8      	bne.n	4009d2 <ili9325_draw_string+0x3e>
			ul_y += gfont.height + 2;
			ul_x = xorg;
		} else {
			/* Draw the character and place cursor right after (font width + 2) */
			ili9325_draw_char(ul_x, ul_y, *p_str);
			ul_x += gfont.width + 2;
  400a20:	9b01      	ldr	r3, [sp, #4]
  400a22:	330c      	adds	r3, #12
  400a24:	9301      	str	r3, [sp, #4]
 */
void ili9325_draw_string(uint32_t ul_x, uint32_t ul_y, const uint8_t *p_str)
{
	uint32_t xorg = ul_x;

	while (*p_str != 0) {
  400a26:	9a02      	ldr	r2, [sp, #8]
  400a28:	f812 3f01 	ldrb.w	r3, [r2, #1]!
  400a2c:	9202      	str	r2, [sp, #8]
  400a2e:	2b00      	cmp	r3, #0
  400a30:	d1bc      	bne.n	4009ac <ili9325_draw_string+0x18>
			ili9325_draw_char(ul_x, ul_y, *p_str);
			ul_x += gfont.width + 2;
		}
		p_str++;
	}
}
  400a32:	b005      	add	sp, #20
  400a34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  400a38:	004101f0 	.word	0x004101f0
  400a3c:	0040092d 	.word	0x0040092d

00400a40 <smc_set_setup_timing>:
 * \param ul_setup_timing Setup timing for NWE, NCS, NRD.
 */
void smc_set_setup_timing(Smc *p_smc, uint32_t ul_cs,
		uint32_t ul_setup_timing)
{
	p_smc->SMC_CS_NUMBER[ul_cs].SMC_SETUP = ul_setup_timing;
  400a40:	0109      	lsls	r1, r1, #4
  400a42:	5042      	str	r2, [r0, r1]
  400a44:	4770      	bx	lr
  400a46:	bf00      	nop

00400a48 <smc_set_pulse_timing>:
 * \param ul_pulse_timing Pulse timing for NWE,NCS,NRD.
 */
void smc_set_pulse_timing(Smc *p_smc, uint32_t ul_cs,
		uint32_t ul_pulse_timing)
{
	p_smc->SMC_CS_NUMBER[ul_cs].SMC_PULSE = ul_pulse_timing;
  400a48:	eb00 1101 	add.w	r1, r0, r1, lsl #4
  400a4c:	604a      	str	r2, [r1, #4]
  400a4e:	4770      	bx	lr

00400a50 <smc_set_cycle_timing>:
 * \param ul_cycle_timing Cycle timing for NWE and NRD.
 */
void smc_set_cycle_timing(Smc *p_smc, uint32_t ul_cs,
		uint32_t ul_cycle_timing)
{
	p_smc->SMC_CS_NUMBER[ul_cs].SMC_CYCLE = ul_cycle_timing;
  400a50:	eb00 1101 	add.w	r1, r0, r1, lsl #4
  400a54:	608a      	str	r2, [r1, #8]
  400a56:	4770      	bx	lr

00400a58 <smc_set_mode>:
 * \param ul_cs Chip select number to be set.
 * \param ul_mode SMC mode.
 */
void smc_set_mode(Smc *p_smc, uint32_t ul_cs, uint32_t ul_mode)
{
	p_smc->SMC_CS_NUMBER[ul_cs].SMC_MODE = ul_mode;
  400a58:	eb00 1101 	add.w	r1, r0, r1, lsl #4
  400a5c:	60ca      	str	r2, [r1, #12]
  400a5e:	4770      	bx	lr

00400a60 <pio_set_debounce_filter>:
void pio_set_debounce_filter(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_cut_off)
{
#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	/* Set Debouncing, 0 bit field no effect */
	p_pio->PIO_IFSCER = ul_mask;
  400a60:	f8c0 1084 	str.w	r1, [r0, #132]	; 0x84
	/*
	 * The debouncing filter can filter a pulse of less than 1/2 Period of a
	 * programmable Divided Slow Clock:
	 * Tdiv_slclk = ((DIV+1)*2).Tslow_clock
	 */
	p_pio->PIO_SCDR = PIO_SCDR_DIV((FREQ_SLOW_CLOCK_EXT /
  400a64:	0052      	lsls	r2, r2, #1
  400a66:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  400a6a:	fbb3 f2f2 	udiv	r2, r3, r2
  400a6e:	3a01      	subs	r2, #1
  400a70:	f3c2 020d 	ubfx	r2, r2, #0, #14
  400a74:	f8c0 208c 	str.w	r2, [r0, #140]	; 0x8c
  400a78:	4770      	bx	lr
  400a7a:	bf00      	nop

00400a7c <pio_set>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_set(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_SODR = ul_mask;
  400a7c:	6301      	str	r1, [r0, #48]	; 0x30
  400a7e:	4770      	bx	lr

00400a80 <pio_clear>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_clear(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_CODR = ul_mask;
  400a80:	6341      	str	r1, [r0, #52]	; 0x34
  400a82:	4770      	bx	lr

00400a84 <pio_set_peripheral>:
		const uint32_t ul_mask)
{
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
  400a84:	6442      	str	r2, [r0, #68]	; 0x44

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	switch (ul_type) {
  400a86:	f1b1 5fc0 	cmp.w	r1, #402653184	; 0x18000000
  400a8a:	d02f      	beq.n	400aec <pio_set_peripheral+0x68>
  400a8c:	d807      	bhi.n	400a9e <pio_set_peripheral+0x1a>
  400a8e:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
  400a92:	d014      	beq.n	400abe <pio_set_peripheral+0x3a>
  400a94:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
  400a98:	d01e      	beq.n	400ad8 <pio_set_peripheral+0x54>
  400a9a:	b939      	cbnz	r1, 400aac <pio_set_peripheral+0x28>
  400a9c:	4770      	bx	lr
  400a9e:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
  400aa2:	d037      	beq.n	400b14 <pio_set_peripheral+0x90>
  400aa4:	d804      	bhi.n	400ab0 <pio_set_peripheral+0x2c>
  400aa6:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
  400aaa:	d029      	beq.n	400b00 <pio_set_peripheral+0x7c>
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
  400aac:	6042      	str	r2, [r0, #4]
  400aae:	4770      	bx	lr

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	switch (ul_type) {
  400ab0:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
  400ab4:	d02e      	beq.n	400b14 <pio_set_peripheral+0x90>
  400ab6:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
  400aba:	d02b      	beq.n	400b14 <pio_set_peripheral+0x90>
  400abc:	e7f6      	b.n	400aac <pio_set_peripheral+0x28>
 * \param ul_type PIO type.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_set_peripheral(Pio *p_pio, const pio_type_t ul_type,
		const uint32_t ul_mask)
{
  400abe:	b410      	push	{r4}
	p_pio->PIO_IDR = ul_mask;

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	switch (ul_type) {
	case PIO_PERIPH_A:
		ul_sr = p_pio->PIO_ABCDSR[0];
  400ac0:	6f01      	ldr	r1, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  400ac2:	6f04      	ldr	r4, [r0, #112]	; 0x70
  400ac4:	43d3      	mvns	r3, r2
  400ac6:	4021      	ands	r1, r4
  400ac8:	4019      	ands	r1, r3
  400aca:	6701      	str	r1, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  400acc:	6f41      	ldr	r1, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  400ace:	6f44      	ldr	r4, [r0, #116]	; 0x74
  400ad0:	4021      	ands	r1, r4
  400ad2:	400b      	ands	r3, r1
  400ad4:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  400ad6:	e01a      	b.n	400b0e <pio_set_peripheral+0x8a>
	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABCDSR[0];
  400ad8:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  400ada:	4313      	orrs	r3, r2
  400adc:	6703      	str	r3, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  400ade:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  400ae0:	6f41      	ldr	r1, [r0, #116]	; 0x74
  400ae2:	400b      	ands	r3, r1
  400ae4:	ea23 0302 	bic.w	r3, r3, r2
  400ae8:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  400aea:	e7df      	b.n	400aac <pio_set_peripheral+0x28>
#if (!SAMG)
	case PIO_PERIPH_C:
		ul_sr = p_pio->PIO_ABCDSR[0];
  400aec:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  400aee:	6f01      	ldr	r1, [r0, #112]	; 0x70
  400af0:	400b      	ands	r3, r1
  400af2:	ea23 0302 	bic.w	r3, r3, r2
  400af6:	6703      	str	r3, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  400af8:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  400afa:	4313      	orrs	r3, r2
  400afc:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  400afe:	e7d5      	b.n	400aac <pio_set_peripheral+0x28>
	case PIO_PERIPH_D:
		ul_sr = p_pio->PIO_ABCDSR[0];
  400b00:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  400b02:	4313      	orrs	r3, r2
  400b04:	6703      	str	r3, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  400b06:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  400b08:	4313      	orrs	r3, r2
  400b0a:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  400b0c:	e7ce      	b.n	400aac <pio_set_peripheral+0x28>
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
  400b0e:	6042      	str	r2, [r0, #4]
}
  400b10:	f85d 4b04 	ldr.w	r4, [sp], #4
  400b14:	4770      	bx	lr
  400b16:	bf00      	nop

00400b18 <pio_set_input>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
  400b18:	6441      	str	r1, [r0, #68]	; 0x44
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  400b1a:	f012 0f01 	tst.w	r2, #1
		p_pio->PIO_PUER = ul_mask;
  400b1e:	bf14      	ite	ne
  400b20:	6641      	strne	r1, [r0, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
  400b22:	6601      	streq	r1, [r0, #96]	; 0x60
{
	pio_disable_interrupt(p_pio, ul_mask);
	pio_pull_up(p_pio, ul_mask, ul_attribute & PIO_PULLUP);

	/* Enable Input Filter if necessary */
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
  400b24:	f012 0f0a 	tst.w	r2, #10
		p_pio->PIO_IFER = ul_mask;
  400b28:	bf14      	ite	ne
  400b2a:	6201      	strne	r1, [r0, #32]
	} else {
		p_pio->PIO_IFDR = ul_mask;
  400b2c:	6241      	streq	r1, [r0, #36]	; 0x24
	}

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	/* Enable de-glitch or de-bounce if necessary */
	if (ul_attribute & PIO_DEGLITCH) {
  400b2e:	f012 0f02 	tst.w	r2, #2
  400b32:	d002      	beq.n	400b3a <pio_set_input+0x22>
		p_pio->PIO_IFSCDR = ul_mask;
  400b34:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
  400b38:	e004      	b.n	400b44 <pio_set_input+0x2c>
	} else {
		if (ul_attribute & PIO_DEBOUNCE) {
  400b3a:	f012 0f08 	tst.w	r2, #8
			p_pio->PIO_IFSCER = ul_mask;
  400b3e:	bf18      	it	ne
  400b40:	f8c0 1084 	strne.w	r1, [r0, #132]	; 0x84
#else
#error "Unsupported device"
#endif

	/* Configure pin as input */
	p_pio->PIO_ODR = ul_mask;
  400b44:	6141      	str	r1, [r0, #20]
	p_pio->PIO_PER = ul_mask;
  400b46:	6001      	str	r1, [r0, #0]
  400b48:	4770      	bx	lr
  400b4a:	bf00      	nop

00400b4c <pio_set_output>:
 */
void pio_set_output(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_default_level,
		const uint32_t ul_multidrive_enable,
		const uint32_t ul_pull_up_enable)
{
  400b4c:	b410      	push	{r4}
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
  400b4e:	6441      	str	r1, [r0, #68]	; 0x44
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  400b50:	9c01      	ldr	r4, [sp, #4]
  400b52:	b10c      	cbz	r4, 400b58 <pio_set_output+0xc>
		p_pio->PIO_PUER = ul_mask;
  400b54:	6641      	str	r1, [r0, #100]	; 0x64
  400b56:	e000      	b.n	400b5a <pio_set_output+0xe>
	} else {
		p_pio->PIO_PUDR = ul_mask;
  400b58:	6601      	str	r1, [r0, #96]	; 0x60
{
	pio_disable_interrupt(p_pio, ul_mask);
	pio_pull_up(p_pio, ul_mask, ul_pull_up_enable);

	/* Enable multi-drive if necessary */
	if (ul_multidrive_enable) {
  400b5a:	b10b      	cbz	r3, 400b60 <pio_set_output+0x14>
		p_pio->PIO_MDER = ul_mask;
  400b5c:	6501      	str	r1, [r0, #80]	; 0x50
  400b5e:	e000      	b.n	400b62 <pio_set_output+0x16>
	} else {
		p_pio->PIO_MDDR = ul_mask;
  400b60:	6541      	str	r1, [r0, #84]	; 0x54
	}

	/* Set default value */
	if (ul_default_level) {
  400b62:	b10a      	cbz	r2, 400b68 <pio_set_output+0x1c>
		p_pio->PIO_SODR = ul_mask;
  400b64:	6301      	str	r1, [r0, #48]	; 0x30
  400b66:	e000      	b.n	400b6a <pio_set_output+0x1e>
	} else {
		p_pio->PIO_CODR = ul_mask;
  400b68:	6341      	str	r1, [r0, #52]	; 0x34
	}

	/* Configure pin(s) as output(s) */
	p_pio->PIO_OER = ul_mask;
  400b6a:	6101      	str	r1, [r0, #16]
	p_pio->PIO_PER = ul_mask;
  400b6c:	6001      	str	r1, [r0, #0]
}
  400b6e:	f85d 4b04 	ldr.w	r4, [sp], #4
  400b72:	4770      	bx	lr

00400b74 <pio_configure_interrupt>:
 */
void pio_configure_interrupt(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_attr)
{
	/* Configure additional interrupt mode registers. */
	if (ul_attr & PIO_IT_AIME) {
  400b74:	f012 0f10 	tst.w	r2, #16
  400b78:	d010      	beq.n	400b9c <pio_configure_interrupt+0x28>
		/* Enable additional interrupt mode. */
		p_pio->PIO_AIMER = ul_mask;
  400b7a:	f8c0 10b0 	str.w	r1, [r0, #176]	; 0xb0

		/* If bit field of the selected pin is 1, set as
		   Rising Edge/High level detection event. */
		if (ul_attr & PIO_IT_RE_OR_HL) {
  400b7e:	f012 0f20 	tst.w	r2, #32
			/* Rising Edge or High Level */
			p_pio->PIO_REHLSR = ul_mask;
  400b82:	bf14      	ite	ne
  400b84:	f8c0 10d4 	strne.w	r1, [r0, #212]	; 0xd4
		} else {
			/* Falling Edge or Low Level */
			p_pio->PIO_FELLSR = ul_mask;
  400b88:	f8c0 10d0 	streq.w	r1, [r0, #208]	; 0xd0
		}

		/* If bit field of the selected pin is 1, set as
		   edge detection source. */
		if (ul_attr & PIO_IT_EDGE) {
  400b8c:	f012 0f40 	tst.w	r2, #64	; 0x40
			/* Edge select */
			p_pio->PIO_ESR = ul_mask;
  400b90:	bf14      	ite	ne
  400b92:	f8c0 10c0 	strne.w	r1, [r0, #192]	; 0xc0
		} else {
			/* Level select */
			p_pio->PIO_LSR = ul_mask;
  400b96:	f8c0 10c4 	streq.w	r1, [r0, #196]	; 0xc4
  400b9a:	4770      	bx	lr
		}
	} else {
		/* Disable additional interrupt mode. */
		p_pio->PIO_AIMDR = ul_mask;
  400b9c:	f8c0 10b4 	str.w	r1, [r0, #180]	; 0xb4
  400ba0:	4770      	bx	lr
  400ba2:	bf00      	nop

00400ba4 <pio_enable_interrupt>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_enable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_ISR;
  400ba4:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
	p_pio->PIO_IER = ul_mask;
  400ba6:	6401      	str	r1, [r0, #64]	; 0x40
  400ba8:	4770      	bx	lr
  400baa:	bf00      	nop

00400bac <pio_disable_interrupt>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
  400bac:	6441      	str	r1, [r0, #68]	; 0x44
  400bae:	4770      	bx	lr

00400bb0 <pio_get_interrupt_status>:
 *
 * \return The interrupt status mask value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
  400bb0:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
  400bb2:	4770      	bx	lr

00400bb4 <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
  400bb4:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
  400bb6:	4770      	bx	lr

00400bb8 <pio_set_pin_high>:
		p_pio = PIOC;
	} else {
		p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
	}
#else
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
  400bb8:	0943      	lsrs	r3, r0, #5
  400bba:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  400bbe:	f203 7307 	addw	r3, r3, #1799	; 0x707
  400bc2:	025b      	lsls	r3, r3, #9
void pio_set_pin_high(uint32_t ul_pin)
{
	Pio *p_pio = pio_get_pin_group(ul_pin);

	/* Value to be driven on the I/O line: 1. */
	p_pio->PIO_SODR = 1 << (ul_pin & 0x1F);
  400bc4:	f000 001f 	and.w	r0, r0, #31
  400bc8:	2201      	movs	r2, #1
  400bca:	4082      	lsls	r2, r0
  400bcc:	631a      	str	r2, [r3, #48]	; 0x30
  400bce:	4770      	bx	lr

00400bd0 <pio_set_pin_low>:
		p_pio = PIOC;
	} else {
		p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
	}
#else
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
  400bd0:	0943      	lsrs	r3, r0, #5
  400bd2:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  400bd6:	f203 7307 	addw	r3, r3, #1799	; 0x707
  400bda:	025b      	lsls	r3, r3, #9
void pio_set_pin_low(uint32_t ul_pin)
{
	Pio *p_pio = pio_get_pin_group(ul_pin);

	/* Value to be driven on the I/O line: 0. */
	p_pio->PIO_CODR = 1 << (ul_pin & 0x1F);
  400bdc:	f000 001f 	and.w	r0, r0, #31
  400be0:	2201      	movs	r2, #1
  400be2:	4082      	lsls	r2, r0
  400be4:	635a      	str	r2, [r3, #52]	; 0x34
  400be6:	4770      	bx	lr

00400be8 <pio_toggle_pin>:
		p_pio = PIOC;
	} else {
		p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
	}
#else
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
  400be8:	0943      	lsrs	r3, r0, #5
  400bea:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  400bee:	f203 7307 	addw	r3, r3, #1799	; 0x707
  400bf2:	025b      	lsls	r3, r3, #9
 */
void pio_toggle_pin(uint32_t ul_pin)
{
	Pio *p_pio = pio_get_pin_group(ul_pin);

	if (p_pio->PIO_ODSR & (1 << (ul_pin & 0x1F))) {
  400bf4:	6b99      	ldr	r1, [r3, #56]	; 0x38
  400bf6:	f000 001f 	and.w	r0, r0, #31
  400bfa:	2201      	movs	r2, #1
  400bfc:	4082      	lsls	r2, r0
  400bfe:	420a      	tst	r2, r1
		/* Value to be driven on the I/O line: 0. */
		p_pio->PIO_CODR = 1 << (ul_pin & 0x1F);
  400c00:	bf14      	ite	ne
  400c02:	635a      	strne	r2, [r3, #52]	; 0x34
	} else {
		/* Value to be driven on the I/O line: 1. */
		p_pio->PIO_SODR = 1 << (ul_pin & 0x1F);
  400c04:	631a      	streq	r2, [r3, #48]	; 0x30
  400c06:	4770      	bx	lr

00400c08 <pio_configure_pin>:
 * \param ul_flags Pins attributes.
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
  400c08:	b570      	push	{r4, r5, r6, lr}
  400c0a:	b082      	sub	sp, #8
  400c0c:	460d      	mov	r5, r1
		p_pio = PIOC;
	} else {
		p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
	}
#else
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
  400c0e:	0943      	lsrs	r3, r0, #5
  400c10:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  400c14:	f203 7307 	addw	r3, r3, #1799	; 0x707
  400c18:	025c      	lsls	r4, r3, #9
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
	Pio *p_pio = pio_get_pin_group(ul_pin);

	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
  400c1a:	f001 43f0 	and.w	r3, r1, #2013265920	; 0x78000000
  400c1e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
  400c22:	d047      	beq.n	400cb4 <pio_configure_pin+0xac>
  400c24:	d809      	bhi.n	400c3a <pio_configure_pin+0x32>
  400c26:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
  400c2a:	d021      	beq.n	400c70 <pio_configure_pin+0x68>
  400c2c:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
  400c30:	d02f      	beq.n	400c92 <pio_configure_pin+0x8a>
  400c32:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
  400c36:	d16f      	bne.n	400d18 <pio_configure_pin+0x110>
  400c38:	e009      	b.n	400c4e <pio_configure_pin+0x46>
  400c3a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
  400c3e:	d055      	beq.n	400cec <pio_configure_pin+0xe4>
  400c40:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
  400c44:	d052      	beq.n	400cec <pio_configure_pin+0xe4>
  400c46:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
  400c4a:	d044      	beq.n	400cd6 <pio_configure_pin+0xce>
  400c4c:	e064      	b.n	400d18 <pio_configure_pin+0x110>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
  400c4e:	f000 001f 	and.w	r0, r0, #31
  400c52:	2601      	movs	r6, #1
  400c54:	4086      	lsls	r6, r0
  400c56:	4620      	mov	r0, r4
  400c58:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  400c5c:	4632      	mov	r2, r6
  400c5e:	4b30      	ldr	r3, [pc, #192]	; (400d20 <pio_configure_pin+0x118>)
  400c60:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  400c62:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
  400c66:	bf14      	ite	ne
  400c68:	6666      	strne	r6, [r4, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
  400c6a:	6626      	streq	r6, [r4, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
  400c6c:	2001      	movs	r0, #1
  400c6e:	e054      	b.n	400d1a <pio_configure_pin+0x112>
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
				(ul_flags & PIO_PULLUP));
		break;
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, (1 << (ul_pin & 0x1F)));
  400c70:	f000 001f 	and.w	r0, r0, #31
  400c74:	2601      	movs	r6, #1
  400c76:	4086      	lsls	r6, r0
  400c78:	4620      	mov	r0, r4
  400c7a:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  400c7e:	4632      	mov	r2, r6
  400c80:	4b27      	ldr	r3, [pc, #156]	; (400d20 <pio_configure_pin+0x118>)
  400c82:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  400c84:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
  400c88:	bf14      	ite	ne
  400c8a:	6666      	strne	r6, [r4, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
  400c8c:	6626      	streq	r6, [r4, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
  400c8e:	2001      	movs	r0, #1
  400c90:	e043      	b.n	400d1a <pio_configure_pin+0x112>
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
				(ul_flags & PIO_PULLUP));
		break;
#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	case PIO_TYPE_PIO_PERIPH_C:
		pio_set_peripheral(p_pio, PIO_PERIPH_C, (1 << (ul_pin & 0x1F)));
  400c92:	f000 001f 	and.w	r0, r0, #31
  400c96:	2601      	movs	r6, #1
  400c98:	4086      	lsls	r6, r0
  400c9a:	4620      	mov	r0, r4
  400c9c:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  400ca0:	4632      	mov	r2, r6
  400ca2:	4b1f      	ldr	r3, [pc, #124]	; (400d20 <pio_configure_pin+0x118>)
  400ca4:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  400ca6:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
  400caa:	bf14      	ite	ne
  400cac:	6666      	strne	r6, [r4, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
  400cae:	6626      	streq	r6, [r4, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
  400cb0:	2001      	movs	r0, #1
  400cb2:	e032      	b.n	400d1a <pio_configure_pin+0x112>
		pio_set_peripheral(p_pio, PIO_PERIPH_C, (1 << (ul_pin & 0x1F)));
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
				(ul_flags & PIO_PULLUP));
		break;
	case PIO_TYPE_PIO_PERIPH_D:
		pio_set_peripheral(p_pio, PIO_PERIPH_D, (1 << (ul_pin & 0x1F)));
  400cb4:	f000 001f 	and.w	r0, r0, #31
  400cb8:	2601      	movs	r6, #1
  400cba:	4086      	lsls	r6, r0
  400cbc:	4620      	mov	r0, r4
  400cbe:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
  400cc2:	4632      	mov	r2, r6
  400cc4:	4b16      	ldr	r3, [pc, #88]	; (400d20 <pio_configure_pin+0x118>)
  400cc6:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  400cc8:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
  400ccc:	bf14      	ite	ne
  400cce:	6666      	strne	r6, [r4, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
  400cd0:	6626      	streq	r6, [r4, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
  400cd2:	2001      	movs	r0, #1
  400cd4:	e021      	b.n	400d1a <pio_configure_pin+0x112>
				(ul_flags & PIO_PULLUP));
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
  400cd6:	f000 031f 	and.w	r3, r0, #31
  400cda:	2601      	movs	r6, #1
  400cdc:	4620      	mov	r0, r4
  400cde:	fa06 f103 	lsl.w	r1, r6, r3
  400ce2:	462a      	mov	r2, r5
  400ce4:	4b0f      	ldr	r3, [pc, #60]	; (400d24 <pio_configure_pin+0x11c>)
  400ce6:	4798      	blx	r3

	default:
		return 0;
	}

	return 1;
  400ce8:	4630      	mov	r0, r6
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;
  400cea:	e016      	b.n	400d1a <pio_configure_pin+0x112>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
  400cec:	f000 031f 	and.w	r3, r0, #31
  400cf0:	2601      	movs	r6, #1
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
  400cf2:	f005 5260 	and.w	r2, r5, #939524096	; 0x38000000
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
  400cf6:	ea05 0106 	and.w	r1, r5, r6
  400cfa:	9100      	str	r1, [sp, #0]
  400cfc:	4620      	mov	r0, r4
  400cfe:	fa06 f103 	lsl.w	r1, r6, r3
  400d02:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
  400d06:	bf14      	ite	ne
  400d08:	2200      	movne	r2, #0
  400d0a:	2201      	moveq	r2, #1
  400d0c:	f3c5 0380 	ubfx	r3, r5, #2, #1
  400d10:	4c05      	ldr	r4, [pc, #20]	; (400d28 <pio_configure_pin+0x120>)
  400d12:	47a0      	blx	r4

	default:
		return 0;
	}

	return 1;
  400d14:	4630      	mov	r0, r6
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
		break;
  400d16:	e000      	b.n	400d1a <pio_configure_pin+0x112>

	default:
		return 0;
  400d18:	2000      	movs	r0, #0
	}

	return 1;
}
  400d1a:	b002      	add	sp, #8
  400d1c:	bd70      	pop	{r4, r5, r6, pc}
  400d1e:	bf00      	nop
  400d20:	00400a85 	.word	0x00400a85
  400d24:	00400b19 	.word	0x00400b19
  400d28:	00400b4d 	.word	0x00400b4d

00400d2c <pio_capture_enable>:
 *
 * \param p_pio Pointer to a PIO instance.
 */
void pio_capture_enable(Pio *p_pio)
{
	p_pio->PIO_PCMR |= PIO_PCMR_PCEN;
  400d2c:	f8d0 3150 	ldr.w	r3, [r0, #336]	; 0x150
  400d30:	f043 0301 	orr.w	r3, r3, #1
  400d34:	f8c0 3150 	str.w	r3, [r0, #336]	; 0x150
	pio_capture_enable_flag = true;
  400d38:	2201      	movs	r2, #1
  400d3a:	4b01      	ldr	r3, [pc, #4]	; (400d40 <pio_capture_enable+0x14>)
  400d3c:	601a      	str	r2, [r3, #0]
  400d3e:	4770      	bx	lr
  400d40:	2000aec8 	.word	0x2000aec8

00400d44 <pio_capture_disable>:
 *
 * \param p_pio Pointer to a PIO instance.
 */
void pio_capture_disable(Pio *p_pio)
{
	p_pio->PIO_PCMR &= (~PIO_PCMR_PCEN);
  400d44:	f8d0 3150 	ldr.w	r3, [r0, #336]	; 0x150
  400d48:	f023 0301 	bic.w	r3, r3, #1
  400d4c:	f8c0 3150 	str.w	r3, [r0, #336]	; 0x150
	pio_capture_enable_flag = false;
  400d50:	2200      	movs	r2, #0
  400d52:	4b01      	ldr	r3, [pc, #4]	; (400d58 <pio_capture_disable+0x14>)
  400d54:	601a      	str	r2, [r3, #0]
  400d56:	4770      	bx	lr
  400d58:	2000aec8 	.word	0x2000aec8

00400d5c <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
  400d5c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  400d60:	4681      	mov	r9, r0
  400d62:	4688      	mov	r8, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
  400d64:	4b12      	ldr	r3, [pc, #72]	; (400db0 <pio_handler_process+0x54>)
  400d66:	4798      	blx	r3
  400d68:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
  400d6a:	4648      	mov	r0, r9
  400d6c:	4b11      	ldr	r3, [pc, #68]	; (400db4 <pio_handler_process+0x58>)
  400d6e:	4798      	blx	r3

	/* Check pending events */
	if (status != 0) {
  400d70:	4005      	ands	r5, r0
  400d72:	d013      	beq.n	400d9c <pio_handler_process+0x40>
  400d74:	4c10      	ldr	r4, [pc, #64]	; (400db8 <pio_handler_process+0x5c>)
  400d76:	f104 0660 	add.w	r6, r4, #96	; 0x60
		/* Find triggering source */
		i = 0;
		while (status != 0) {
			/* Source is configured on the same controller */
			if (gs_interrupt_sources[i].id == ul_id) {
  400d7a:	6823      	ldr	r3, [r4, #0]
  400d7c:	4543      	cmp	r3, r8
  400d7e:	d108      	bne.n	400d92 <pio_handler_process+0x36>
				/* Source has PIOs whose statuses have changed */
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  400d80:	6861      	ldr	r1, [r4, #4]
  400d82:	4229      	tst	r1, r5
  400d84:	d005      	beq.n	400d92 <pio_handler_process+0x36>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  400d86:	68e3      	ldr	r3, [r4, #12]
  400d88:	4640      	mov	r0, r8
  400d8a:	4798      	blx	r3
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
  400d8c:	6863      	ldr	r3, [r4, #4]
  400d8e:	ea25 0503 	bic.w	r5, r5, r3
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
  400d92:	42b4      	cmp	r4, r6
  400d94:	d002      	beq.n	400d9c <pio_handler_process+0x40>
  400d96:	3410      	adds	r4, #16

	/* Check pending events */
	if (status != 0) {
		/* Find triggering source */
		i = 0;
		while (status != 0) {
  400d98:	2d00      	cmp	r5, #0
  400d9a:	d1ee      	bne.n	400d7a <pio_handler_process+0x1e>
		}
	}

	/* Check capture events */
#if (SAM3S || SAM4S || SAM4E)
	if (pio_capture_enable_flag) {
  400d9c:	4b07      	ldr	r3, [pc, #28]	; (400dbc <pio_handler_process+0x60>)
  400d9e:	681b      	ldr	r3, [r3, #0]
  400da0:	b123      	cbz	r3, 400dac <pio_handler_process+0x50>
		if (pio_capture_handler) {
  400da2:	4b07      	ldr	r3, [pc, #28]	; (400dc0 <pio_handler_process+0x64>)
  400da4:	681b      	ldr	r3, [r3, #0]
  400da6:	b10b      	cbz	r3, 400dac <pio_handler_process+0x50>
			pio_capture_handler(p_pio);
  400da8:	4648      	mov	r0, r9
  400daa:	4798      	blx	r3
  400dac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  400db0:	00400bb1 	.word	0x00400bb1
  400db4:	00400bb5 	.word	0x00400bb5
  400db8:	20000c98 	.word	0x20000c98
  400dbc:	2000aec8 	.word	0x2000aec8
  400dc0:	20000c94 	.word	0x20000c94

00400dc4 <pio_handler_set>:
 *
 * \return 0 if successful, 1 if the maximum number of sources has been defined.
 */
uint32_t pio_handler_set(Pio *p_pio, uint32_t ul_id, uint32_t ul_mask,
		uint32_t ul_attr, void (*p_handler) (uint32_t, uint32_t))
{
  400dc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct s_interrupt_source *pSource;

	if (gs_ul_nb_sources >= MAX_INTERRUPT_SOURCES)
  400dc6:	4c0c      	ldr	r4, [pc, #48]	; (400df8 <pio_handler_set+0x34>)
  400dc8:	6824      	ldr	r4, [r4, #0]
  400dca:	2c06      	cmp	r4, #6
  400dcc:	d811      	bhi.n	400df2 <pio_handler_set+0x2e>
  400dce:	4615      	mov	r5, r2
		return 1;

	/* Define new source */
	pSource = &(gs_interrupt_sources[gs_ul_nb_sources]);
	pSource->id = ul_id;
  400dd0:	4f0a      	ldr	r7, [pc, #40]	; (400dfc <pio_handler_set+0x38>)
  400dd2:	0122      	lsls	r2, r4, #4
  400dd4:	18be      	adds	r6, r7, r2
  400dd6:	50b9      	str	r1, [r7, r2]
	pSource->mask = ul_mask;
  400dd8:	6075      	str	r5, [r6, #4]
	pSource->attr = ul_attr;
  400dda:	60b3      	str	r3, [r6, #8]
	pSource->handler = p_handler;
  400ddc:	9a06      	ldr	r2, [sp, #24]
  400dde:	60f2      	str	r2, [r6, #12]
	gs_ul_nb_sources++;
  400de0:	3401      	adds	r4, #1
  400de2:	4a05      	ldr	r2, [pc, #20]	; (400df8 <pio_handler_set+0x34>)
  400de4:	6014      	str	r4, [r2, #0]

	/* Configure interrupt mode */
	pio_configure_interrupt(p_pio, ul_mask, ul_attr);
  400de6:	4629      	mov	r1, r5
  400de8:	461a      	mov	r2, r3
  400dea:	4b05      	ldr	r3, [pc, #20]	; (400e00 <pio_handler_set+0x3c>)
  400dec:	4798      	blx	r3

	return 0;
  400dee:	2000      	movs	r0, #0
  400df0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		uint32_t ul_attr, void (*p_handler) (uint32_t, uint32_t))
{
	struct s_interrupt_source *pSource;

	if (gs_ul_nb_sources >= MAX_INTERRUPT_SOURCES)
		return 1;
  400df2:	2001      	movs	r0, #1

	/* Configure interrupt mode */
	pio_configure_interrupt(p_pio, ul_mask, ul_attr);

	return 0;
}
  400df4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  400df6:	bf00      	nop
  400df8:	20000c90 	.word	0x20000c90
  400dfc:	20000c98 	.word	0x20000c98
  400e00:	00400b75 	.word	0x00400b75

00400e04 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
  400e04:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
  400e06:	4802      	ldr	r0, [pc, #8]	; (400e10 <PIOA_Handler+0xc>)
  400e08:	210b      	movs	r1, #11
  400e0a:	4b02      	ldr	r3, [pc, #8]	; (400e14 <PIOA_Handler+0x10>)
  400e0c:	4798      	blx	r3
  400e0e:	bd08      	pop	{r3, pc}
  400e10:	400e0e00 	.word	0x400e0e00
  400e14:	00400d5d 	.word	0x00400d5d

00400e18 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
  400e18:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
  400e1a:	4802      	ldr	r0, [pc, #8]	; (400e24 <PIOB_Handler+0xc>)
  400e1c:	210c      	movs	r1, #12
  400e1e:	4b02      	ldr	r3, [pc, #8]	; (400e28 <PIOB_Handler+0x10>)
  400e20:	4798      	blx	r3
  400e22:	bd08      	pop	{r3, pc}
  400e24:	400e1000 	.word	0x400e1000
  400e28:	00400d5d 	.word	0x00400d5d

00400e2c <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
  400e2c:	b508      	push	{r3, lr}
	pio_handler_process(PIOC, ID_PIOC);
  400e2e:	4802      	ldr	r0, [pc, #8]	; (400e38 <PIOC_Handler+0xc>)
  400e30:	210d      	movs	r1, #13
  400e32:	4b02      	ldr	r3, [pc, #8]	; (400e3c <PIOC_Handler+0x10>)
  400e34:	4798      	blx	r3
  400e36:	bd08      	pop	{r3, pc}
  400e38:	400e1200 	.word	0x400e1200
  400e3c:	00400d5d 	.word	0x00400d5d

00400e40 <pmc_switch_mck_to_pllbck>:
 */
uint32_t pmc_switch_mck_to_pllbck(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
  400e40:	4a17      	ldr	r2, [pc, #92]	; (400ea0 <pmc_switch_mck_to_pllbck+0x60>)
  400e42:	6b13      	ldr	r3, [r2, #48]	; 0x30
  400e44:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  400e48:	4318      	orrs	r0, r3
  400e4a:	6310      	str	r0, [r2, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  400e4c:	6e93      	ldr	r3, [r2, #104]	; 0x68
  400e4e:	f013 0f08 	tst.w	r3, #8
  400e52:	d003      	beq.n	400e5c <pmc_switch_mck_to_pllbck+0x1c>
  400e54:	e009      	b.n	400e6a <pmc_switch_mck_to_pllbck+0x2a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  400e56:	3b01      	subs	r3, #1
  400e58:	d103      	bne.n	400e62 <pmc_switch_mck_to_pllbck+0x22>
  400e5a:	e01c      	b.n	400e96 <pmc_switch_mck_to_pllbck+0x56>
uint32_t pmc_switch_mck_to_pllbck(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  400e5c:	f44f 6300 	mov.w	r3, #2048	; 0x800
  400e60:	490f      	ldr	r1, [pc, #60]	; (400ea0 <pmc_switch_mck_to_pllbck+0x60>)
  400e62:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  400e64:	f012 0f08 	tst.w	r2, #8
  400e68:	d0f5      	beq.n	400e56 <pmc_switch_mck_to_pllbck+0x16>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
  400e6a:	4b0d      	ldr	r3, [pc, #52]	; (400ea0 <pmc_switch_mck_to_pllbck+0x60>)
  400e6c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  400e6e:	f042 0203 	orr.w	r2, r2, #3
  400e72:	631a      	str	r2, [r3, #48]	; 0x30
			PMC_MCKR_CSS_PLLB_CLK;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  400e74:	6e98      	ldr	r0, [r3, #104]	; 0x68
  400e76:	f010 0008 	ands.w	r0, r0, #8
  400e7a:	d004      	beq.n	400e86 <pmc_switch_mck_to_pllbck+0x46>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	return 0;
  400e7c:	2000      	movs	r0, #0
  400e7e:	4770      	bx	lr

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLB_CLK;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
  400e80:	3b01      	subs	r3, #1
  400e82:	d103      	bne.n	400e8c <pmc_switch_mck_to_pllbck+0x4c>
  400e84:	e009      	b.n	400e9a <pmc_switch_mck_to_pllbck+0x5a>
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLB_CLK;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  400e86:	f44f 6300 	mov.w	r3, #2048	; 0x800
  400e8a:	4905      	ldr	r1, [pc, #20]	; (400ea0 <pmc_switch_mck_to_pllbck+0x60>)
  400e8c:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  400e8e:	f012 0f08 	tst.w	r2, #8
  400e92:	d0f5      	beq.n	400e80 <pmc_switch_mck_to_pllbck+0x40>
  400e94:	4770      	bx	lr

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
			return 1;
  400e96:	2001      	movs	r0, #1
  400e98:	4770      	bx	lr
	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLB_CLK;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
			return 1;
  400e9a:	2001      	movs	r0, #1
		}
	}

	return 0;
}
  400e9c:	4770      	bx	lr
  400e9e:	bf00      	nop
  400ea0:	400e0400 	.word	0x400e0400

00400ea4 <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
  400ea4:	b138      	cbz	r0, 400eb6 <pmc_switch_mainck_to_xtal+0x12>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  400ea6:	4911      	ldr	r1, [pc, #68]	; (400eec <pmc_switch_mainck_to_xtal+0x48>)
  400ea8:	6a0b      	ldr	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  400eaa:	4a11      	ldr	r2, [pc, #68]	; (400ef0 <pmc_switch_mainck_to_xtal+0x4c>)
  400eac:	401a      	ands	r2, r3
  400eae:	4b11      	ldr	r3, [pc, #68]	; (400ef4 <pmc_switch_mainck_to_xtal+0x50>)
  400eb0:	4313      	orrs	r3, r2
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  400eb2:	620b      	str	r3, [r1, #32]
  400eb4:	4770      	bx	lr
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  400eb6:	4a0d      	ldr	r2, [pc, #52]	; (400eec <pmc_switch_mainck_to_xtal+0x48>)
  400eb8:	6a13      	ldr	r3, [r2, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  400eba:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
  400ebe:	f023 0303 	bic.w	r3, r3, #3
  400ec2:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  400ec6:	f043 0301 	orr.w	r3, r3, #1
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
  400eca:	0209      	lsls	r1, r1, #8
  400ecc:	b289      	uxth	r1, r1
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  400ece:	430b      	orrs	r3, r1
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  400ed0:	6213      	str	r3, [r2, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  400ed2:	6e93      	ldr	r3, [r2, #104]	; 0x68
  400ed4:	f013 0f01 	tst.w	r3, #1
  400ed8:	d0fb      	beq.n	400ed2 <pmc_switch_mainck_to_xtal+0x2e>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
  400eda:	4a04      	ldr	r2, [pc, #16]	; (400eec <pmc_switch_mainck_to_xtal+0x48>)
  400edc:	6a13      	ldr	r3, [r2, #32]
  400ede:	f043 739b 	orr.w	r3, r3, #20316160	; 0x1360000
  400ee2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
  400ee6:	6213      	str	r3, [r2, #32]
  400ee8:	4770      	bx	lr
  400eea:	bf00      	nop
  400eec:	400e0400 	.word	0x400e0400
  400ef0:	fec8fffc 	.word	0xfec8fffc
  400ef4:	01370002 	.word	0x01370002

00400ef8 <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
  400ef8:	4b02      	ldr	r3, [pc, #8]	; (400f04 <pmc_osc_is_ready_mainck+0xc>)
  400efa:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  400efc:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
  400f00:	4770      	bx	lr
  400f02:	bf00      	nop
  400f04:	400e0400 	.word	0x400e0400

00400f08 <pmc_enable_pllack>:
 * \param mula PLLA multiplier.
 * \param pllacount PLLA counter.
 * \param diva Divider.
 */
void pmc_enable_pllack(uint32_t mula, uint32_t pllacount, uint32_t diva)
{
  400f08:	b410      	push	{r4}
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
  400f0a:	4c0c      	ldr	r4, [pc, #48]	; (400f3c <pmc_enable_pllack+0x34>)
  400f0c:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
  400f10:	62a3      	str	r3, [r4, #40]	; 0x28
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_PLLAEN(diva) |
			CKGR_PLLAR_PLLACOUNT(pllacount) | CKGR_PLLAR_MULA(mula);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_DIVA(diva) |
			CKGR_PLLAR_PLLACOUNT(pllacount) | CKGR_PLLAR_MULA(mula);
  400f12:	4b0b      	ldr	r3, [pc, #44]	; (400f40 <pmc_enable_pllack+0x38>)
  400f14:	ea03 4000 	and.w	r0, r3, r0, lsl #16
  400f18:	f040 5000 	orr.w	r0, r0, #536870912	; 0x20000000

#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_PLLAEN(diva) |
			CKGR_PLLAR_PLLACOUNT(pllacount) | CKGR_PLLAR_MULA(mula);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_DIVA(diva) |
  400f1c:	b2d2      	uxtb	r2, r2
  400f1e:	4302      	orrs	r2, r0
			CKGR_PLLAR_PLLACOUNT(pllacount) | CKGR_PLLAR_MULA(mula);
  400f20:	0209      	lsls	r1, r1, #8
  400f22:	f401 517c 	and.w	r1, r1, #16128	; 0x3f00
  400f26:	430a      	orrs	r2, r1

#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_PLLAEN(diva) |
			CKGR_PLLAR_PLLACOUNT(pllacount) | CKGR_PLLAR_MULA(mula);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_DIVA(diva) |
  400f28:	62a2      	str	r2, [r4, #40]	; 0x28
			CKGR_PLLAR_PLLACOUNT(pllacount) | CKGR_PLLAR_MULA(mula);
#endif
	while ((PMC->PMC_SR & PMC_SR_LOCKA) == 0);
  400f2a:	4622      	mov	r2, r4
  400f2c:	6e93      	ldr	r3, [r2, #104]	; 0x68
  400f2e:	f013 0f02 	tst.w	r3, #2
  400f32:	d0fb      	beq.n	400f2c <pmc_enable_pllack+0x24>
}
  400f34:	f85d 4b04 	ldr.w	r4, [sp], #4
  400f38:	4770      	bx	lr
  400f3a:	bf00      	nop
  400f3c:	400e0400 	.word	0x400e0400
  400f40:	07ff0000 	.word	0x07ff0000

00400f44 <pmc_disable_pllbck>:
/**
 * \brief Disable PLLB clock.
 */
void pmc_disable_pllbck(void)
{
	PMC->CKGR_PLLBR = CKGR_PLLBR_MULB(0);
  400f44:	2200      	movs	r2, #0
  400f46:	4b01      	ldr	r3, [pc, #4]	; (400f4c <pmc_disable_pllbck+0x8>)
  400f48:	62da      	str	r2, [r3, #44]	; 0x2c
  400f4a:	4770      	bx	lr
  400f4c:	400e0400 	.word	0x400e0400

00400f50 <pmc_is_locked_pllbck>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllbck(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKB);
  400f50:	4b02      	ldr	r3, [pc, #8]	; (400f5c <pmc_is_locked_pllbck+0xc>)
  400f52:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  400f54:	f000 0004 	and.w	r0, r0, #4
  400f58:	4770      	bx	lr
  400f5a:	bf00      	nop
  400f5c:	400e0400 	.word	0x400e0400

00400f60 <pmc_enable_periph_clk>:
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
  400f60:	2822      	cmp	r0, #34	; 0x22
  400f62:	d81e      	bhi.n	400fa2 <pmc_enable_periph_clk+0x42>
		return 1;
	}

	if (ul_id < 32) {
  400f64:	281f      	cmp	r0, #31
  400f66:	d80c      	bhi.n	400f82 <pmc_enable_periph_clk+0x22>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
  400f68:	4b11      	ldr	r3, [pc, #68]	; (400fb0 <pmc_enable_periph_clk+0x50>)
  400f6a:	699a      	ldr	r2, [r3, #24]
  400f6c:	2301      	movs	r3, #1
  400f6e:	4083      	lsls	r3, r0
  400f70:	401a      	ands	r2, r3
  400f72:	4293      	cmp	r3, r2
  400f74:	d017      	beq.n	400fa6 <pmc_enable_periph_clk+0x46>
			PMC->PMC_PCER0 = 1 << ul_id;
  400f76:	2301      	movs	r3, #1
  400f78:	4083      	lsls	r3, r0
  400f7a:	4a0d      	ldr	r2, [pc, #52]	; (400fb0 <pmc_enable_periph_clk+0x50>)
  400f7c:	6113      	str	r3, [r2, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
  400f7e:	2000      	movs	r0, #0
  400f80:	4770      	bx	lr
			PMC->PMC_PCER0 = 1 << ul_id;
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP || SAMG55 || SAMV71 || SAMV70 || SAME70 || SAMS70)
	} else {
		ul_id -= 32;
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
  400f82:	4b0b      	ldr	r3, [pc, #44]	; (400fb0 <pmc_enable_periph_clk+0x50>)
  400f84:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
			PMC->PMC_PCER0 = 1 << ul_id;
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP || SAMG55 || SAMV71 || SAMV70 || SAME70 || SAMS70)
	} else {
		ul_id -= 32;
  400f88:	3820      	subs	r0, #32
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
  400f8a:	2301      	movs	r3, #1
  400f8c:	4083      	lsls	r3, r0
  400f8e:	401a      	ands	r2, r3
  400f90:	4293      	cmp	r3, r2
  400f92:	d00a      	beq.n	400faa <pmc_enable_periph_clk+0x4a>
			PMC->PMC_PCER1 = 1 << ul_id;
  400f94:	2301      	movs	r3, #1
  400f96:	4083      	lsls	r3, r0
  400f98:	4a05      	ldr	r2, [pc, #20]	; (400fb0 <pmc_enable_periph_clk+0x50>)
  400f9a:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
		}
#endif
	}

	return 0;
  400f9e:	2000      	movs	r0, #0
  400fa0:	4770      	bx	lr
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
		return 1;
  400fa2:	2001      	movs	r0, #1
  400fa4:	4770      	bx	lr
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
  400fa6:	2000      	movs	r0, #0
  400fa8:	4770      	bx	lr
  400faa:	2000      	movs	r0, #0
}
  400fac:	4770      	bx	lr
  400fae:	bf00      	nop
  400fb0:	400e0400 	.word	0x400e0400

00400fb4 <twi_set_speed>:
uint32_t twi_set_speed(Twi *p_twi, uint32_t ul_speed, uint32_t ul_mck)
{
	uint32_t ckdiv = 0;
	uint32_t c_lh_div;

	if (ul_speed > I2C_FAST_MODE_SPEED) {
  400fb4:	4b0f      	ldr	r3, [pc, #60]	; (400ff4 <twi_set_speed+0x40>)
  400fb6:	4299      	cmp	r1, r3
  400fb8:	d819      	bhi.n	400fee <twi_set_speed+0x3a>
		return FAIL;
	}

	c_lh_div = ul_mck / (ul_speed * TWI_CLK_DIVIDER) - TWI_CLK_CALC_ARGU;
  400fba:	0049      	lsls	r1, r1, #1
  400fbc:	fbb2 f2f1 	udiv	r2, r2, r1
  400fc0:	3a04      	subs	r2, #4

	/* cldiv must fit in 8 bits, ckdiv must fit in 3 bits */
	while ((c_lh_div > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
  400fc2:	2aff      	cmp	r2, #255	; 0xff
  400fc4:	d907      	bls.n	400fd6 <twi_set_speed+0x22>
  400fc6:	2300      	movs	r3, #0
		/* Increase clock divider */
		ckdiv++;
  400fc8:	3301      	adds	r3, #1
		/* Divide cldiv value */
		c_lh_div /= TWI_CLK_DIVIDER;
  400fca:	0852      	lsrs	r2, r2, #1
	}

	c_lh_div = ul_mck / (ul_speed * TWI_CLK_DIVIDER) - TWI_CLK_CALC_ARGU;

	/* cldiv must fit in 8 bits, ckdiv must fit in 3 bits */
	while ((c_lh_div > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
  400fcc:	2aff      	cmp	r2, #255	; 0xff
  400fce:	d903      	bls.n	400fd8 <twi_set_speed+0x24>
  400fd0:	2b07      	cmp	r3, #7
  400fd2:	d1f9      	bne.n	400fc8 <twi_set_speed+0x14>
  400fd4:	e000      	b.n	400fd8 <twi_set_speed+0x24>
 * \retval PASS New speed setting is accepted.
 * \retval FAIL New speed setting is rejected.
 */
uint32_t twi_set_speed(Twi *p_twi, uint32_t ul_speed, uint32_t ul_mck)
{
	uint32_t ckdiv = 0;
  400fd6:	2300      	movs	r3, #0
		c_lh_div /= TWI_CLK_DIVIDER;
	}

	/* set clock waveform generator register */
	p_twi->TWI_CWGR =
			TWI_CWGR_CLDIV(c_lh_div) | TWI_CWGR_CHDIV(c_lh_div) |
  400fd8:	0211      	lsls	r1, r2, #8
  400fda:	b289      	uxth	r1, r1
			TWI_CWGR_CKDIV(ckdiv);
  400fdc:	041b      	lsls	r3, r3, #16
  400fde:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
  400fe2:	430b      	orrs	r3, r1
		c_lh_div /= TWI_CLK_DIVIDER;
	}

	/* set clock waveform generator register */
	p_twi->TWI_CWGR =
			TWI_CWGR_CLDIV(c_lh_div) | TWI_CWGR_CHDIV(c_lh_div) |
  400fe4:	b2d2      	uxtb	r2, r2
  400fe6:	431a      	orrs	r2, r3
		/* Divide cldiv value */
		c_lh_div /= TWI_CLK_DIVIDER;
	}

	/* set clock waveform generator register */
	p_twi->TWI_CWGR =
  400fe8:	6102      	str	r2, [r0, #16]
			TWI_CWGR_CLDIV(c_lh_div) | TWI_CWGR_CHDIV(c_lh_div) |
			TWI_CWGR_CKDIV(ckdiv);

	return PASS;
  400fea:	2000      	movs	r0, #0
  400fec:	4770      	bx	lr
{
	uint32_t ckdiv = 0;
	uint32_t c_lh_div;

	if (ul_speed > I2C_FAST_MODE_SPEED) {
		return FAIL;
  400fee:	2001      	movs	r0, #1
	p_twi->TWI_CWGR =
			TWI_CWGR_CLDIV(c_lh_div) | TWI_CWGR_CHDIV(c_lh_div) |
			TWI_CWGR_CKDIV(ckdiv);

	return PASS;
}
  400ff0:	4770      	bx	lr
  400ff2:	bf00      	nop
  400ff4:	00061a80 	.word	0x00061a80

00400ff8 <twi_master_init>:
 * \param p_opt Options for initializing the TWI module (see \ref twi_options_t).
 *
 * \return TWI_SUCCESS if initialization is complete, error code otherwise.
 */
uint32_t twi_master_init(Twi *p_twi, const twi_options_t *p_opt)
{
  400ff8:	b538      	push	{r3, r4, r5, lr}
  400ffa:	4604      	mov	r4, r0
  400ffc:	460d      	mov	r5, r1
	uint32_t status = TWI_SUCCESS;

	/* Disable TWI interrupts */
	p_twi->TWI_IDR = ~0UL;
  400ffe:	f04f 33ff 	mov.w	r3, #4294967295
  401002:	6283      	str	r3, [r0, #40]	; 0x28

	/* Dummy read in status register */
	p_twi->TWI_SR;
  401004:	6a03      	ldr	r3, [r0, #32]
 * \param p_twi Pointer to a TWI instance.
 */
void twi_reset(Twi *p_twi)
{
	/* Set SWRST bit to reset TWI peripheral */
	p_twi->TWI_CR = TWI_CR_SWRST;
  401006:	2380      	movs	r3, #128	; 0x80
  401008:	6003      	str	r3, [r0, #0]
	p_twi->TWI_RHR;
  40100a:	6b03      	ldr	r3, [r0, #48]	; 0x30
 * \param p_twi Pointer to a TWI instance.
 */
void twi_enable_master_mode(Twi *p_twi)
{
	/* Set Master Disable bit and Slave Disable bit */
	p_twi->TWI_CR = TWI_CR_MSDIS;
  40100c:	2308      	movs	r3, #8
  40100e:	6003      	str	r3, [r0, #0]
	p_twi->TWI_CR = TWI_CR_SVDIS;
  401010:	2320      	movs	r3, #32
  401012:	6003      	str	r3, [r0, #0]

	/* Set Master Enable bit */
	p_twi->TWI_CR = TWI_CR_MSEN;
  401014:	2304      	movs	r3, #4
  401016:	6003      	str	r3, [r0, #0]
	twi_reset(p_twi);

	twi_enable_master_mode(p_twi);

	/* Select the speed */
	if (twi_set_speed(p_twi, p_opt->speed, p_opt->master_clk) == FAIL) {
  401018:	6849      	ldr	r1, [r1, #4]
  40101a:	682a      	ldr	r2, [r5, #0]
  40101c:	4b05      	ldr	r3, [pc, #20]	; (401034 <twi_master_init+0x3c>)
  40101e:	4798      	blx	r3
  401020:	2801      	cmp	r0, #1
  401022:	bf14      	ite	ne
  401024:	2000      	movne	r0, #0
  401026:	2001      	moveq	r0, #1
		/* The desired speed setting is rejected */
		status = TWI_INVALID_ARGUMENT;
	}

	if (p_opt->smbus == 1) {
  401028:	7a6b      	ldrb	r3, [r5, #9]
  40102a:	2b01      	cmp	r3, #1
		p_twi->TWI_CR = TWI_CR_QUICK;
  40102c:	bf04      	itt	eq
  40102e:	2340      	moveq	r3, #64	; 0x40
  401030:	6023      	streq	r3, [r4, #0]
	}

	return status;
}
  401032:	bd38      	pop	{r3, r4, r5, pc}
  401034:	00400fb5 	.word	0x00400fb5

00401038 <twi_master_read>:
 * \param p_packet Packet information and data (see \ref twi_packet_t).
 *
 * \return TWI_SUCCESS if all bytes were read, error code otherwise.
 */
uint32_t twi_master_read(Twi *p_twi, twi_packet_t *p_packet)
{
  401038:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint32_t status;
	uint32_t cnt = p_packet->length;
  40103c:	68ca      	ldr	r2, [r1, #12]
	uint8_t *buffer = p_packet->buffer;
  40103e:	688d      	ldr	r5, [r1, #8]
	uint8_t stop_sent = 0;
	uint32_t timeout = TWI_TIMEOUT;;
	
	/* Check argument */
	if (cnt == 0) {
  401040:	2a00      	cmp	r2, #0
  401042:	d048      	beq.n	4010d6 <twi_master_read+0x9e>
		return TWI_INVALID_ARGUMENT;
	}

	/* Set read mode, slave address and 3 internal address byte lengths */
	p_twi->TWI_MMR = 0;
  401044:	2600      	movs	r6, #0
  401046:	6046      	str	r6, [r0, #4]
	p_twi->TWI_MMR = TWI_MMR_MREAD | TWI_MMR_DADR(p_packet->chip) |
			((p_packet->addr_length << TWI_MMR_IADRSZ_Pos) &
  401048:	684b      	ldr	r3, [r1, #4]
  40104a:	021b      	lsls	r3, r3, #8
  40104c:	f403 7340 	and.w	r3, r3, #768	; 0x300
  401050:	f443 5480 	orr.w	r4, r3, #4096	; 0x1000
		return TWI_INVALID_ARGUMENT;
	}

	/* Set read mode, slave address and 3 internal address byte lengths */
	p_twi->TWI_MMR = 0;
	p_twi->TWI_MMR = TWI_MMR_MREAD | TWI_MMR_DADR(p_packet->chip) |
  401054:	7c0b      	ldrb	r3, [r1, #16]
  401056:	041b      	lsls	r3, r3, #16
  401058:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
  40105c:	4323      	orrs	r3, r4
  40105e:	6043      	str	r3, [r0, #4]
			((p_packet->addr_length << TWI_MMR_IADRSZ_Pos) &
			TWI_MMR_IADRSZ_Msk);

	/* Set internal address for remote chip */
	p_twi->TWI_IADR = 0;
  401060:	60c6      	str	r6, [r0, #12]
	p_twi->TWI_IADR = twi_mk_addr(p_packet->addr, p_packet->addr_length);
  401062:	684c      	ldr	r4, [r1, #4]
 */
static uint32_t twi_mk_addr(const uint8_t *addr, int len)
{
	uint32_t val;

	if (len == 0)
  401064:	b15c      	cbz	r4, 40107e <twi_master_read+0x46>
		return 0;

	val = addr[0];
  401066:	780b      	ldrb	r3, [r1, #0]
	if (len > 1) {
  401068:	2c01      	cmp	r4, #1
		val <<= 8;
		val |= addr[1];
  40106a:	bfc4      	itt	gt
  40106c:	784e      	ldrbgt	r6, [r1, #1]
  40106e:	ea46 2303 	orrgt.w	r3, r6, r3, lsl #8
	}
	if (len > 2) {
  401072:	2c02      	cmp	r4, #2
  401074:	dd04      	ble.n	401080 <twi_master_read+0x48>
		val <<= 8;
		val |= addr[2];
  401076:	7889      	ldrb	r1, [r1, #2]
  401078:	ea41 2303 	orr.w	r3, r1, r3, lsl #8
  40107c:	e000      	b.n	401080 <twi_master_read+0x48>
static uint32_t twi_mk_addr(const uint8_t *addr, int len)
{
	uint32_t val;

	if (len == 0)
		return 0;
  40107e:	2300      	movs	r3, #0
			((p_packet->addr_length << TWI_MMR_IADRSZ_Pos) &
			TWI_MMR_IADRSZ_Msk);

	/* Set internal address for remote chip */
	p_twi->TWI_IADR = 0;
	p_twi->TWI_IADR = twi_mk_addr(p_packet->addr, p_packet->addr_length);
  401080:	60c3      	str	r3, [r0, #12]

	/* Send a START condition */
	if (cnt == 1) {
  401082:	2a01      	cmp	r2, #1
  401084:	d103      	bne.n	40108e <twi_master_read+0x56>
		p_twi->TWI_CR = TWI_CR_START | TWI_CR_STOP;
  401086:	2303      	movs	r3, #3
  401088:	6003      	str	r3, [r0, #0]
		stop_sent = 1;
  40108a:	2701      	movs	r7, #1
  40108c:	e02f      	b.n	4010ee <twi_master_read+0xb6>
	} else {
		p_twi->TWI_CR = TWI_CR_START;
  40108e:	2301      	movs	r3, #1
  401090:	6003      	str	r3, [r0, #0]
		stop_sent = 0;
  401092:	2700      	movs	r7, #0
  401094:	e02b      	b.n	4010ee <twi_master_read+0xb6>
		if (cnt == 1  && !stop_sent) {
			p_twi->TWI_CR = TWI_CR_STOP;
			stop_sent = 1;
		}

		if (!(status & TWI_SR_RXRDY)) {
  401096:	4621      	mov	r1, r4
		p_twi->TWI_CR = TWI_CR_START;
		stop_sent = 0;
	}

	while (cnt > 0) {
		status = p_twi->TWI_SR;
  401098:	6a03      	ldr	r3, [r0, #32]
		if (status & TWI_SR_NACK) {
  40109a:	f413 7f80 	tst.w	r3, #256	; 0x100
  40109e:	d11d      	bne.n	4010dc <twi_master_read+0xa4>
			return TWI_RECEIVE_NACK;
		}

		if (!timeout--) {
  4010a0:	1e4c      	subs	r4, r1, #1
  4010a2:	b1f1      	cbz	r1, 4010e2 <twi_master_read+0xaa>
			return TWI_ERROR_TIMEOUT;
		}
				
		/* Last byte ? */
		if (cnt == 1  && !stop_sent) {
  4010a4:	2a01      	cmp	r2, #1
  4010a6:	d104      	bne.n	4010b2 <twi_master_read+0x7a>
  4010a8:	bb77      	cbnz	r7, 401108 <twi_master_read+0xd0>
			p_twi->TWI_CR = TWI_CR_STOP;
  4010aa:	f8c0 8000 	str.w	r8, [r0]
			stop_sent = 1;
  4010ae:	4667      	mov	r7, ip
  4010b0:	e02a      	b.n	401108 <twi_master_read+0xd0>
		}

		if (!(status & TWI_SR_RXRDY)) {
  4010b2:	f013 0f02 	tst.w	r3, #2
  4010b6:	d005      	beq.n	4010c4 <twi_master_read+0x8c>
			continue;
		}
		*buffer++ = p_twi->TWI_RHR;
  4010b8:	6b03      	ldr	r3, [r0, #48]	; 0x30
  4010ba:	702b      	strb	r3, [r5, #0]

		cnt--;
  4010bc:	3a01      	subs	r2, #1
		}

		if (!(status & TWI_SR_RXRDY)) {
			continue;
		}
		*buffer++ = p_twi->TWI_RHR;
  4010be:	3501      	adds	r5, #1

		cnt--;
		timeout = TWI_TIMEOUT;
  4010c0:	4631      	mov	r1, r6
  4010c2:	e000      	b.n	4010c6 <twi_master_read+0x8e>
  4010c4:	4621      	mov	r1, r4
	} else {
		p_twi->TWI_CR = TWI_CR_START;
		stop_sent = 0;
	}

	while (cnt > 0) {
  4010c6:	2a00      	cmp	r2, #0
  4010c8:	d1e6      	bne.n	401098 <twi_master_read+0x60>

		cnt--;
		timeout = TWI_TIMEOUT;
	}

	while (!(p_twi->TWI_SR & TWI_SR_TXCOMP)) {
  4010ca:	6a03      	ldr	r3, [r0, #32]
  4010cc:	f013 0f01 	tst.w	r3, #1
  4010d0:	d0fb      	beq.n	4010ca <twi_master_read+0x92>
	}

	p_twi->TWI_SR;
  4010d2:	6a03      	ldr	r3, [r0, #32]

	return TWI_SUCCESS;
  4010d4:	e01c      	b.n	401110 <twi_master_read+0xd8>
	uint8_t stop_sent = 0;
	uint32_t timeout = TWI_TIMEOUT;;
	
	/* Check argument */
	if (cnt == 0) {
		return TWI_INVALID_ARGUMENT;
  4010d6:	f04f 0e01 	mov.w	lr, #1
  4010da:	e019      	b.n	401110 <twi_master_read+0xd8>
	}

	while (cnt > 0) {
		status = p_twi->TWI_SR;
		if (status & TWI_SR_NACK) {
			return TWI_RECEIVE_NACK;
  4010dc:	f04f 0e05 	mov.w	lr, #5
  4010e0:	e016      	b.n	401110 <twi_master_read+0xd8>
		}

		if (!timeout--) {
			return TWI_ERROR_TIMEOUT;
  4010e2:	f04f 0e09 	mov.w	lr, #9
  4010e6:	e013      	b.n	401110 <twi_master_read+0xd8>
	}

	while (cnt > 0) {
		status = p_twi->TWI_SR;
		if (status & TWI_SR_NACK) {
			return TWI_RECEIVE_NACK;
  4010e8:	f04f 0e05 	mov.w	lr, #5
  4010ec:	e010      	b.n	401110 <twi_master_read+0xd8>
		p_twi->TWI_CR = TWI_CR_START;
		stop_sent = 0;
	}

	while (cnt > 0) {
		status = p_twi->TWI_SR;
  4010ee:	6a03      	ldr	r3, [r0, #32]
		if (status & TWI_SR_NACK) {
  4010f0:	f413 7e80 	ands.w	lr, r3, #256	; 0x100
  4010f4:	d1f8      	bne.n	4010e8 <twi_master_read+0xb0>
  4010f6:	f643 2497 	movw	r4, #14999	; 0x3a97
			continue;
		}
		*buffer++ = p_twi->TWI_RHR;

		cnt--;
		timeout = TWI_TIMEOUT;
  4010fa:	f643 2698 	movw	r6, #15000	; 0x3a98
			return TWI_ERROR_TIMEOUT;
		}
				
		/* Last byte ? */
		if (cnt == 1  && !stop_sent) {
			p_twi->TWI_CR = TWI_CR_STOP;
  4010fe:	f04f 0802 	mov.w	r8, #2
			stop_sent = 1;
  401102:	f04f 0c01 	mov.w	ip, #1
  401106:	e7cd      	b.n	4010a4 <twi_master_read+0x6c>
		}

		if (!(status & TWI_SR_RXRDY)) {
  401108:	f013 0f02 	tst.w	r3, #2
  40110c:	d0c3      	beq.n	401096 <twi_master_read+0x5e>
  40110e:	e7d3      	b.n	4010b8 <twi_master_read+0x80>
	}

	p_twi->TWI_SR;

	return TWI_SUCCESS;
}
  401110:	4670      	mov	r0, lr
  401112:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  401116:	bf00      	nop

00401118 <twi_master_write>:
 * \param p_packet Packet information and data (see \ref twi_packet_t).
 *
 * \return TWI_SUCCESS if all bytes were written, error code otherwise.
 */
uint32_t twi_master_write(Twi *p_twi, twi_packet_t *p_packet)
{
  401118:	4603      	mov	r3, r0
	uint32_t status;
	uint32_t cnt = p_packet->length;
  40111a:	68ca      	ldr	r2, [r1, #12]
	uint8_t *buffer = p_packet->buffer;
  40111c:	6888      	ldr	r0, [r1, #8]

	/* Check argument */
	if (cnt == 0) {
  40111e:	2a00      	cmp	r2, #0
  401120:	d040      	beq.n	4011a4 <twi_master_write+0x8c>
 * \param p_packet Packet information and data (see \ref twi_packet_t).
 *
 * \return TWI_SUCCESS if all bytes were written, error code otherwise.
 */
uint32_t twi_master_write(Twi *p_twi, twi_packet_t *p_packet)
{
  401122:	b470      	push	{r4, r5, r6}
	if (cnt == 0) {
		return TWI_INVALID_ARGUMENT;
	}

	/* Set write mode, slave address and 3 internal address byte lengths */
	p_twi->TWI_MMR = 0;
  401124:	2600      	movs	r6, #0
  401126:	605e      	str	r6, [r3, #4]
	p_twi->TWI_MMR = TWI_MMR_DADR(p_packet->chip) |
  401128:	7c0c      	ldrb	r4, [r1, #16]
  40112a:	0424      	lsls	r4, r4, #16
  40112c:	f404 05fe 	and.w	r5, r4, #8323072	; 0x7f0000
			((p_packet->addr_length << TWI_MMR_IADRSZ_Pos) &
  401130:	684c      	ldr	r4, [r1, #4]
  401132:	0224      	lsls	r4, r4, #8
  401134:	f404 7440 	and.w	r4, r4, #768	; 0x300
		return TWI_INVALID_ARGUMENT;
	}

	/* Set write mode, slave address and 3 internal address byte lengths */
	p_twi->TWI_MMR = 0;
	p_twi->TWI_MMR = TWI_MMR_DADR(p_packet->chip) |
  401138:	432c      	orrs	r4, r5
  40113a:	605c      	str	r4, [r3, #4]
			((p_packet->addr_length << TWI_MMR_IADRSZ_Pos) &
			TWI_MMR_IADRSZ_Msk);

	/* Set internal address for remote chip */
	p_twi->TWI_IADR = 0;
  40113c:	60de      	str	r6, [r3, #12]
	p_twi->TWI_IADR = twi_mk_addr(p_packet->addr, p_packet->addr_length);
  40113e:	684d      	ldr	r5, [r1, #4]
 */
static uint32_t twi_mk_addr(const uint8_t *addr, int len)
{
	uint32_t val;

	if (len == 0)
  401140:	b15d      	cbz	r5, 40115a <twi_master_write+0x42>
		return 0;

	val = addr[0];
  401142:	780c      	ldrb	r4, [r1, #0]
	if (len > 1) {
  401144:	2d01      	cmp	r5, #1
		val <<= 8;
		val |= addr[1];
  401146:	bfc4      	itt	gt
  401148:	784e      	ldrbgt	r6, [r1, #1]
  40114a:	ea46 2404 	orrgt.w	r4, r6, r4, lsl #8
	}
	if (len > 2) {
  40114e:	2d02      	cmp	r5, #2
  401150:	dd04      	ble.n	40115c <twi_master_write+0x44>
		val <<= 8;
		val |= addr[2];
  401152:	7889      	ldrb	r1, [r1, #2]
  401154:	ea41 2404 	orr.w	r4, r1, r4, lsl #8
  401158:	e000      	b.n	40115c <twi_master_write+0x44>
static uint32_t twi_mk_addr(const uint8_t *addr, int len)
{
	uint32_t val;

	if (len == 0)
		return 0;
  40115a:	2400      	movs	r4, #0
			((p_packet->addr_length << TWI_MMR_IADRSZ_Pos) &
			TWI_MMR_IADRSZ_Msk);

	/* Set internal address for remote chip */
	p_twi->TWI_IADR = 0;
	p_twi->TWI_IADR = twi_mk_addr(p_packet->addr, p_packet->addr_length);
  40115c:	60dc      	str	r4, [r3, #12]
  40115e:	e00b      	b.n	401178 <twi_master_write+0x60>

	/* Send all bytes */
	while (cnt > 0) {
		status = p_twi->TWI_SR;
  401160:	6a19      	ldr	r1, [r3, #32]
		if (status & TWI_SR_NACK) {
  401162:	f411 7f80 	tst.w	r1, #256	; 0x100
  401166:	d11f      	bne.n	4011a8 <twi_master_write+0x90>
			return TWI_RECEIVE_NACK;
		}

		if (!(status & TWI_SR_TXRDY)) {
  401168:	f011 0f04 	tst.w	r1, #4
  40116c:	d0f8      	beq.n	401160 <twi_master_write+0x48>
			continue;
		}
		p_twi->TWI_THR = *buffer++;
  40116e:	f810 1b01 	ldrb.w	r1, [r0], #1
  401172:	6359      	str	r1, [r3, #52]	; 0x34
	/* Set internal address for remote chip */
	p_twi->TWI_IADR = 0;
	p_twi->TWI_IADR = twi_mk_addr(p_packet->addr, p_packet->addr_length);

	/* Send all bytes */
	while (cnt > 0) {
  401174:	3a01      	subs	r2, #1
  401176:	d007      	beq.n	401188 <twi_master_write+0x70>
		status = p_twi->TWI_SR;
  401178:	6a19      	ldr	r1, [r3, #32]
		if (status & TWI_SR_NACK) {
  40117a:	f411 7f80 	tst.w	r1, #256	; 0x100
  40117e:	d115      	bne.n	4011ac <twi_master_write+0x94>
			return TWI_RECEIVE_NACK;
		}

		if (!(status & TWI_SR_TXRDY)) {
  401180:	f011 0f04 	tst.w	r1, #4
  401184:	d0ec      	beq.n	401160 <twi_master_write+0x48>
  401186:	e7f2      	b.n	40116e <twi_master_write+0x56>

		cnt--;
	}

	while (1) {
		status = p_twi->TWI_SR;
  401188:	6a1a      	ldr	r2, [r3, #32]
		if (status & TWI_SR_NACK) {
  40118a:	f412 7080 	ands.w	r0, r2, #256	; 0x100
  40118e:	d10f      	bne.n	4011b0 <twi_master_write+0x98>
			return TWI_RECEIVE_NACK;
		}

		if (status & TWI_SR_TXRDY) {
  401190:	f012 0f04 	tst.w	r2, #4
  401194:	d0f8      	beq.n	401188 <twi_master_write+0x70>
			break;
		}
	}

	p_twi->TWI_CR = TWI_CR_STOP;
  401196:	2202      	movs	r2, #2
  401198:	601a      	str	r2, [r3, #0]

	while (!(p_twi->TWI_SR & TWI_SR_TXCOMP)) {
  40119a:	6a1a      	ldr	r2, [r3, #32]
  40119c:	f012 0f01 	tst.w	r2, #1
  4011a0:	d0fb      	beq.n	40119a <twi_master_write+0x82>
  4011a2:	e006      	b.n	4011b2 <twi_master_write+0x9a>
	uint32_t cnt = p_packet->length;
	uint8_t *buffer = p_packet->buffer;

	/* Check argument */
	if (cnt == 0) {
		return TWI_INVALID_ARGUMENT;
  4011a4:	2001      	movs	r0, #1

	while (!(p_twi->TWI_SR & TWI_SR_TXCOMP)) {
	}

	return TWI_SUCCESS;
}
  4011a6:	4770      	bx	lr

	/* Send all bytes */
	while (cnt > 0) {
		status = p_twi->TWI_SR;
		if (status & TWI_SR_NACK) {
			return TWI_RECEIVE_NACK;
  4011a8:	2005      	movs	r0, #5
  4011aa:	e002      	b.n	4011b2 <twi_master_write+0x9a>
  4011ac:	2005      	movs	r0, #5
  4011ae:	e000      	b.n	4011b2 <twi_master_write+0x9a>
	}

	while (1) {
		status = p_twi->TWI_SR;
		if (status & TWI_SR_NACK) {
			return TWI_RECEIVE_NACK;
  4011b0:	2005      	movs	r0, #5

	while (!(p_twi->TWI_SR & TWI_SR_TXCOMP)) {
	}

	return TWI_SUCCESS;
}
  4011b2:	bc70      	pop	{r4, r5, r6}
  4011b4:	4770      	bx	lr
  4011b6:	bf00      	nop

004011b8 <Dummy_Handler>:
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
	while (1) {
	}
  4011b8:	e7fe      	b.n	4011b8 <Dummy_Handler>
  4011ba:	bf00      	nop

004011bc <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
  4011bc:	b508      	push	{r3, lr}

	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc > pDest) {
  4011be:	4b20      	ldr	r3, [pc, #128]	; (401240 <Reset_Handler+0x84>)
  4011c0:	4a20      	ldr	r2, [pc, #128]	; (401244 <Reset_Handler+0x88>)
  4011c2:	429a      	cmp	r2, r3
  4011c4:	d913      	bls.n	4011ee <Reset_Handler+0x32>
		for (; pDest < &_erelocate;) {
  4011c6:	4b20      	ldr	r3, [pc, #128]	; (401248 <Reset_Handler+0x8c>)
  4011c8:	4a1d      	ldr	r2, [pc, #116]	; (401240 <Reset_Handler+0x84>)
  4011ca:	429a      	cmp	r2, r3
  4011cc:	d21f      	bcs.n	40120e <Reset_Handler+0x52>
  4011ce:	4611      	mov	r1, r2
  4011d0:	3204      	adds	r2, #4
  4011d2:	3303      	adds	r3, #3
  4011d4:	1a9b      	subs	r3, r3, r2
  4011d6:	f023 0303 	bic.w	r3, r3, #3
  4011da:	3304      	adds	r3, #4
  4011dc:	4a19      	ldr	r2, [pc, #100]	; (401244 <Reset_Handler+0x88>)
  4011de:	4413      	add	r3, r2
			*pDest++ = *pSrc++;
  4011e0:	f852 0b04 	ldr.w	r0, [r2], #4
  4011e4:	f841 0b04 	str.w	r0, [r1], #4
	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc > pDest) {
		for (; pDest < &_erelocate;) {
  4011e8:	429a      	cmp	r2, r3
  4011ea:	d1f9      	bne.n	4011e0 <Reset_Handler+0x24>
  4011ec:	e00f      	b.n	40120e <Reset_Handler+0x52>
			*pDest++ = *pSrc++;
		}
	} else if (pSrc < pDest) {
  4011ee:	4b14      	ldr	r3, [pc, #80]	; (401240 <Reset_Handler+0x84>)
  4011f0:	4a14      	ldr	r2, [pc, #80]	; (401244 <Reset_Handler+0x88>)
  4011f2:	429a      	cmp	r2, r3
  4011f4:	d20b      	bcs.n	40120e <Reset_Handler+0x52>
		uint32_t nb_bytes = (uint32_t)&_erelocate - (uint32_t)&_srelocate;
  4011f6:	4b14      	ldr	r3, [pc, #80]	; (401248 <Reset_Handler+0x8c>)
  4011f8:	4a11      	ldr	r2, [pc, #68]	; (401240 <Reset_Handler+0x84>)
  4011fa:	1a9a      	subs	r2, r3, r2
  4011fc:	4813      	ldr	r0, [pc, #76]	; (40124c <Reset_Handler+0x90>)
		pSrc = (uint32_t*)((uint32_t)pSrc + nb_bytes) - 1;
  4011fe:	1881      	adds	r1, r0, r2
		pDest = (uint32_t*)((uint32_t)pDest + nb_bytes) - 1;
		for (;nb_bytes;nb_bytes -= 4) {
  401200:	b12a      	cbz	r2, 40120e <Reset_Handler+0x52>
			*pDest-- = *pSrc--;
  401202:	f851 2904 	ldr.w	r2, [r1], #-4
  401206:	f843 2d04 	str.w	r2, [r3, #-4]!
		}
	} else if (pSrc < pDest) {
		uint32_t nb_bytes = (uint32_t)&_erelocate - (uint32_t)&_srelocate;
		pSrc = (uint32_t*)((uint32_t)pSrc + nb_bytes) - 1;
		pDest = (uint32_t*)((uint32_t)pDest + nb_bytes) - 1;
		for (;nb_bytes;nb_bytes -= 4) {
  40120a:	4281      	cmp	r1, r0
  40120c:	d1f9      	bne.n	401202 <Reset_Handler+0x46>

    No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
  40120e:	bf00      	nop
		}
	}
	__NOP();

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
  401210:	4b0f      	ldr	r3, [pc, #60]	; (401250 <Reset_Handler+0x94>)
  401212:	4a10      	ldr	r2, [pc, #64]	; (401254 <Reset_Handler+0x98>)
  401214:	429a      	cmp	r2, r3
  401216:	d20b      	bcs.n	401230 <Reset_Handler+0x74>
  401218:	1d13      	adds	r3, r2, #4
  40121a:	4a0f      	ldr	r2, [pc, #60]	; (401258 <Reset_Handler+0x9c>)
  40121c:	1ad2      	subs	r2, r2, r3
  40121e:	f022 0203 	bic.w	r2, r2, #3
  401222:	441a      	add	r2, r3
  401224:	3b04      	subs	r3, #4
		*pDest++ = 0;
  401226:	2100      	movs	r1, #0
  401228:	f843 1b04 	str.w	r1, [r3], #4
		}
	}
	__NOP();

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
  40122c:	4293      	cmp	r3, r2
  40122e:	d1fb      	bne.n	401228 <Reset_Handler+0x6c>
		*pDest++ = 0;
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) & _sfixed;
	SCB->VTOR = ((uint32_t) pSrc);
  401230:	4b0a      	ldr	r3, [pc, #40]	; (40125c <Reset_Handler+0xa0>)
  401232:	4a0b      	ldr	r2, [pc, #44]	; (401260 <Reset_Handler+0xa4>)
  401234:	609a      	str	r2, [r3, #8]

	/* Initialize the C library */
	__libc_init_array();
  401236:	4b0b      	ldr	r3, [pc, #44]	; (401264 <Reset_Handler+0xa8>)
  401238:	4798      	blx	r3

	/* Branch to main function */
	main();
  40123a:	4b0b      	ldr	r3, [pc, #44]	; (401268 <Reset_Handler+0xac>)
  40123c:	4798      	blx	r3

	/* Infinite loop */
	while (1);
  40123e:	e7fe      	b.n	40123e <Reset_Handler+0x82>
  401240:	20000000 	.word	0x20000000
  401244:	00411dcc 	.word	0x00411dcc
  401248:	200008b4 	.word	0x200008b4
  40124c:	00411dc8 	.word	0x00411dc8
  401250:	2000aedc 	.word	0x2000aedc
  401254:	200008b4 	.word	0x200008b4
  401258:	2000aedf 	.word	0x2000aedf
  40125c:	e000ed00 	.word	0xe000ed00
  401260:	00400000 	.word	0x00400000
  401264:	004089b1 	.word	0x004089b1
  401268:	00407bdd 	.word	0x00407bdd

0040126c <SystemCoreClockUpdate>:
 * \brief Get Core Clock Frequency.
 */
void SystemCoreClockUpdate( void )
{
	/* Determine clock frequency according to clock register values */
	switch ( PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk ) {
  40126c:	4b3d      	ldr	r3, [pc, #244]	; (401364 <SystemCoreClockUpdate+0xf8>)
  40126e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  401270:	f003 0303 	and.w	r3, r3, #3
  401274:	2b03      	cmp	r3, #3
  401276:	d85d      	bhi.n	401334 <SystemCoreClockUpdate+0xc8>
  401278:	e8df f003 	tbb	[pc, r3]
  40127c:	2b2b0e02 	.word	0x2b2b0e02
	case PMC_MCKR_CSS_SLOW_CLK: /* Slow clock */
			if ( SUPC->SUPC_SR & SUPC_SR_OSCSEL ) {
  401280:	4b39      	ldr	r3, [pc, #228]	; (401368 <SystemCoreClockUpdate+0xfc>)
  401282:	695b      	ldr	r3, [r3, #20]
  401284:	f013 0f80 	tst.w	r3, #128	; 0x80
				SystemCoreClock = CHIP_FREQ_XTAL_32K;
  401288:	bf14      	ite	ne
  40128a:	f44f 4200 	movne.w	r2, #32768	; 0x8000
			} else {
				SystemCoreClock = CHIP_FREQ_SLCK_RC;
  40128e:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
  401292:	4b36      	ldr	r3, [pc, #216]	; (40136c <SystemCoreClockUpdate+0x100>)
  401294:	601a      	str	r2, [r3, #0]
  401296:	e04d      	b.n	401334 <SystemCoreClockUpdate+0xc8>
			}
		break;
		
	case PMC_MCKR_CSS_MAIN_CLK: /* Main clock */
		if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL ) {
  401298:	4b32      	ldr	r3, [pc, #200]	; (401364 <SystemCoreClockUpdate+0xf8>)
  40129a:	6a1b      	ldr	r3, [r3, #32]
  40129c:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  4012a0:	d003      	beq.n	4012aa <SystemCoreClockUpdate+0x3e>
			SystemCoreClock = CHIP_FREQ_XTAL;
  4012a2:	4a33      	ldr	r2, [pc, #204]	; (401370 <SystemCoreClockUpdate+0x104>)
  4012a4:	4b31      	ldr	r3, [pc, #196]	; (40136c <SystemCoreClockUpdate+0x100>)
  4012a6:	601a      	str	r2, [r3, #0]
  4012a8:	e044      	b.n	401334 <SystemCoreClockUpdate+0xc8>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  4012aa:	4a32      	ldr	r2, [pc, #200]	; (401374 <SystemCoreClockUpdate+0x108>)
  4012ac:	4b2f      	ldr	r3, [pc, #188]	; (40136c <SystemCoreClockUpdate+0x100>)
  4012ae:	601a      	str	r2, [r3, #0]
			
			switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk ) {
  4012b0:	4b2c      	ldr	r3, [pc, #176]	; (401364 <SystemCoreClockUpdate+0xf8>)
  4012b2:	6a1b      	ldr	r3, [r3, #32]
  4012b4:	f003 0370 	and.w	r3, r3, #112	; 0x70
  4012b8:	2b10      	cmp	r3, #16
  4012ba:	d002      	beq.n	4012c2 <SystemCoreClockUpdate+0x56>
  4012bc:	2b20      	cmp	r3, #32
  4012be:	d004      	beq.n	4012ca <SystemCoreClockUpdate+0x5e>
  4012c0:	e038      	b.n	401334 <SystemCoreClockUpdate+0xc8>
			case CKGR_MOR_MOSCRCF_4_MHz:
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
			break;
			
			case CKGR_MOR_MOSCRCF_8_MHz:
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_8MHZ;
  4012c2:	4a2d      	ldr	r2, [pc, #180]	; (401378 <SystemCoreClockUpdate+0x10c>)
  4012c4:	4b29      	ldr	r3, [pc, #164]	; (40136c <SystemCoreClockUpdate+0x100>)
  4012c6:	601a      	str	r2, [r3, #0]
			break;
  4012c8:	e034      	b.n	401334 <SystemCoreClockUpdate+0xc8>
			
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_12MHZ;
  4012ca:	4a29      	ldr	r2, [pc, #164]	; (401370 <SystemCoreClockUpdate+0x104>)
  4012cc:	4b27      	ldr	r3, [pc, #156]	; (40136c <SystemCoreClockUpdate+0x100>)
  4012ce:	601a      	str	r2, [r3, #0]
			break;
  4012d0:	e030      	b.n	401334 <SystemCoreClockUpdate+0xc8>
		}
		break;
		
	case PMC_MCKR_CSS_PLLA_CLK:	/* PLLA clock */
	case PMC_MCKR_CSS_PLLB_CLK:	/* PLLB clock */
			if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL ) {
  4012d2:	4b24      	ldr	r3, [pc, #144]	; (401364 <SystemCoreClockUpdate+0xf8>)
  4012d4:	6a1b      	ldr	r3, [r3, #32]
  4012d6:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  4012da:	d003      	beq.n	4012e4 <SystemCoreClockUpdate+0x78>
				SystemCoreClock = CHIP_FREQ_XTAL;
  4012dc:	4a24      	ldr	r2, [pc, #144]	; (401370 <SystemCoreClockUpdate+0x104>)
  4012de:	4b23      	ldr	r3, [pc, #140]	; (40136c <SystemCoreClockUpdate+0x100>)
  4012e0:	601a      	str	r2, [r3, #0]
  4012e2:	e012      	b.n	40130a <SystemCoreClockUpdate+0x9e>
			} else {
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  4012e4:	4a23      	ldr	r2, [pc, #140]	; (401374 <SystemCoreClockUpdate+0x108>)
  4012e6:	4b21      	ldr	r3, [pc, #132]	; (40136c <SystemCoreClockUpdate+0x100>)
  4012e8:	601a      	str	r2, [r3, #0]
				
				switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk ) {
  4012ea:	4b1e      	ldr	r3, [pc, #120]	; (401364 <SystemCoreClockUpdate+0xf8>)
  4012ec:	6a1b      	ldr	r3, [r3, #32]
  4012ee:	f003 0370 	and.w	r3, r3, #112	; 0x70
  4012f2:	2b10      	cmp	r3, #16
  4012f4:	d002      	beq.n	4012fc <SystemCoreClockUpdate+0x90>
  4012f6:	2b20      	cmp	r3, #32
  4012f8:	d004      	beq.n	401304 <SystemCoreClockUpdate+0x98>
  4012fa:	e006      	b.n	40130a <SystemCoreClockUpdate+0x9e>
				case CKGR_MOR_MOSCRCF_4_MHz:
					SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
					break;
				
				case CKGR_MOR_MOSCRCF_8_MHz:
					SystemCoreClock = CHIP_FREQ_MAINCK_RC_8MHZ;
  4012fc:	4a1e      	ldr	r2, [pc, #120]	; (401378 <SystemCoreClockUpdate+0x10c>)
  4012fe:	4b1b      	ldr	r3, [pc, #108]	; (40136c <SystemCoreClockUpdate+0x100>)
  401300:	601a      	str	r2, [r3, #0]
					break;
  401302:	e002      	b.n	40130a <SystemCoreClockUpdate+0x9e>
				
				case CKGR_MOR_MOSCRCF_12_MHz:
					SystemCoreClock = CHIP_FREQ_MAINCK_RC_12MHZ;
  401304:	4a1a      	ldr	r2, [pc, #104]	; (401370 <SystemCoreClockUpdate+0x104>)
  401306:	4b19      	ldr	r3, [pc, #100]	; (40136c <SystemCoreClockUpdate+0x100>)
  401308:	601a      	str	r2, [r3, #0]
				default:
					break;
				}
			}
			
			if ( (uint32_t)(PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) ==
  40130a:	4b16      	ldr	r3, [pc, #88]	; (401364 <SystemCoreClockUpdate+0xf8>)
  40130c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  40130e:	f003 0303 	and.w	r3, r3, #3
  401312:	2b02      	cmp	r3, #2
					PMC_MCKR_CSS_PLLA_CLK ) {
				SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk)
  401314:	4a13      	ldr	r2, [pc, #76]	; (401364 <SystemCoreClockUpdate+0xf8>)
  401316:	bf07      	ittee	eq
  401318:	6a93      	ldreq	r3, [r2, #40]	; 0x28
						>> CKGR_PLLAR_MULA_Pos) + 1U);
				SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk)
  40131a:	6a92      	ldreq	r2, [r2, #40]	; 0x28
						>> CKGR_PLLAR_DIVA_Pos));
			} else {
				SystemCoreClock *= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_MULB_Msk)
  40131c:	6ad3      	ldrne	r3, [r2, #44]	; 0x2c
						>> CKGR_PLLBR_MULB_Pos) + 1U);
				SystemCoreClock /= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_DIVB_Msk)
  40131e:	6ad2      	ldrne	r2, [r2, #44]	; 0x2c
  401320:	4812      	ldr	r0, [pc, #72]	; (40136c <SystemCoreClockUpdate+0x100>)
						>> CKGR_PLLAR_MULA_Pos) + 1U);
				SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk)
						>> CKGR_PLLAR_DIVA_Pos));
			} else {
				SystemCoreClock *= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_MULB_Msk)
						>> CKGR_PLLBR_MULB_Pos) + 1U);
  401322:	f3c3 410a 	ubfx	r1, r3, #16, #11
				SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk)
						>> CKGR_PLLAR_MULA_Pos) + 1U);
				SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk)
						>> CKGR_PLLAR_DIVA_Pos));
			} else {
				SystemCoreClock *= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_MULB_Msk)
  401326:	6803      	ldr	r3, [r0, #0]
  401328:	fb01 3303 	mla	r3, r1, r3, r3
						>> CKGR_PLLBR_MULB_Pos) + 1U);
				SystemCoreClock /= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_DIVB_Msk)
						>> CKGR_PLLBR_DIVB_Pos));
  40132c:	b2d2      	uxtb	r2, r2
				SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk)
						>> CKGR_PLLAR_DIVA_Pos));
			} else {
				SystemCoreClock *= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_MULB_Msk)
						>> CKGR_PLLBR_MULB_Pos) + 1U);
				SystemCoreClock /= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_DIVB_Msk)
  40132e:	fbb3 f3f2 	udiv	r3, r3, r2
  401332:	6003      	str	r3, [r0, #0]
		
	default:
		break;
	}

	if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 ) {
  401334:	4b0b      	ldr	r3, [pc, #44]	; (401364 <SystemCoreClockUpdate+0xf8>)
  401336:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  401338:	f003 0370 	and.w	r3, r3, #112	; 0x70
  40133c:	2b70      	cmp	r3, #112	; 0x70
  40133e:	d107      	bne.n	401350 <SystemCoreClockUpdate+0xe4>
		SystemCoreClock /= 3U;
  401340:	4a0a      	ldr	r2, [pc, #40]	; (40136c <SystemCoreClockUpdate+0x100>)
  401342:	6813      	ldr	r3, [r2, #0]
  401344:	490d      	ldr	r1, [pc, #52]	; (40137c <SystemCoreClockUpdate+0x110>)
  401346:	fba1 1303 	umull	r1, r3, r1, r3
  40134a:	085b      	lsrs	r3, r3, #1
  40134c:	6013      	str	r3, [r2, #0]
  40134e:	4770      	bx	lr
	} else {
		SystemCoreClock >>=
			((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  401350:	4b04      	ldr	r3, [pc, #16]	; (401364 <SystemCoreClockUpdate+0xf8>)
  401352:	6b1a      	ldr	r2, [r3, #48]	; 0x30
	}

	if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 ) {
		SystemCoreClock /= 3U;
	} else {
		SystemCoreClock >>=
  401354:	4905      	ldr	r1, [pc, #20]	; (40136c <SystemCoreClockUpdate+0x100>)
			((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  401356:	f3c2 1202 	ubfx	r2, r2, #4, #3
	}

	if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 ) {
		SystemCoreClock /= 3U;
	} else {
		SystemCoreClock >>=
  40135a:	680b      	ldr	r3, [r1, #0]
  40135c:	40d3      	lsrs	r3, r2
  40135e:	600b      	str	r3, [r1, #0]
  401360:	4770      	bx	lr
  401362:	bf00      	nop
  401364:	400e0400 	.word	0x400e0400
  401368:	400e1410 	.word	0x400e1410
  40136c:	2000000c 	.word	0x2000000c
  401370:	00b71b00 	.word	0x00b71b00
  401374:	003d0900 	.word	0x003d0900
  401378:	007a1200 	.word	0x007a1200
  40137c:	aaaaaaab 	.word	0xaaaaaaab

00401380 <system_init_flash>:
 */
void system_init_flash( uint32_t ul_clk )
{
  /* Set FWS for embedded Flash access according to operating frequency */
#if !defined(ID_EFC1)
	if ( ul_clk < CHIP_FREQ_FWS_0 ) {
  401380:	4b12      	ldr	r3, [pc, #72]	; (4013cc <system_init_flash+0x4c>)
  401382:	4298      	cmp	r0, r3
  401384:	d804      	bhi.n	401390 <system_init_flash+0x10>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  401386:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  40138a:	4b11      	ldr	r3, [pc, #68]	; (4013d0 <system_init_flash+0x50>)
  40138c:	601a      	str	r2, [r3, #0]
  40138e:	4770      	bx	lr
	} else {
		if ( ul_clk < CHIP_FREQ_FWS_1 ) {
  401390:	4b10      	ldr	r3, [pc, #64]	; (4013d4 <system_init_flash+0x54>)
  401392:	4298      	cmp	r0, r3
  401394:	d803      	bhi.n	40139e <system_init_flash+0x1e>
			EFC0->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  401396:	4a10      	ldr	r2, [pc, #64]	; (4013d8 <system_init_flash+0x58>)
  401398:	4b0d      	ldr	r3, [pc, #52]	; (4013d0 <system_init_flash+0x50>)
  40139a:	601a      	str	r2, [r3, #0]
  40139c:	4770      	bx	lr
		} else {
			if ( ul_clk < CHIP_FREQ_FWS_2 ) {
  40139e:	4b0f      	ldr	r3, [pc, #60]	; (4013dc <system_init_flash+0x5c>)
  4013a0:	4298      	cmp	r0, r3
  4013a2:	d803      	bhi.n	4013ac <system_init_flash+0x2c>
				EFC0->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  4013a4:	4a0e      	ldr	r2, [pc, #56]	; (4013e0 <system_init_flash+0x60>)
  4013a6:	4b0a      	ldr	r3, [pc, #40]	; (4013d0 <system_init_flash+0x50>)
  4013a8:	601a      	str	r2, [r3, #0]
  4013aa:	4770      	bx	lr
			} else {
				if ( ul_clk < CHIP_FREQ_FWS_3 ) {
  4013ac:	4b0d      	ldr	r3, [pc, #52]	; (4013e4 <system_init_flash+0x64>)
  4013ae:	4298      	cmp	r0, r3
  4013b0:	d803      	bhi.n	4013ba <system_init_flash+0x3a>
					EFC0->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  4013b2:	4a0d      	ldr	r2, [pc, #52]	; (4013e8 <system_init_flash+0x68>)
  4013b4:	4b06      	ldr	r3, [pc, #24]	; (4013d0 <system_init_flash+0x50>)
  4013b6:	601a      	str	r2, [r3, #0]
  4013b8:	4770      	bx	lr
				} else {
					if ( ul_clk < CHIP_FREQ_FWS_4 ) {
  4013ba:	4b0c      	ldr	r3, [pc, #48]	; (4013ec <system_init_flash+0x6c>)
  4013bc:	4298      	cmp	r0, r3
					EFC0->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
  4013be:	bf94      	ite	ls
  4013c0:	f04f 2204 	movls.w	r2, #67109888	; 0x4000400
					} else {
					EFC0->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  4013c4:	4a0a      	ldrhi	r2, [pc, #40]	; (4013f0 <system_init_flash+0x70>)
  4013c6:	4b02      	ldr	r3, [pc, #8]	; (4013d0 <system_init_flash+0x50>)
  4013c8:	601a      	str	r2, [r3, #0]
  4013ca:	4770      	bx	lr
  4013cc:	01312cff 	.word	0x01312cff
  4013d0:	400e0a00 	.word	0x400e0a00
  4013d4:	026259ff 	.word	0x026259ff
  4013d8:	04000100 	.word	0x04000100
  4013dc:	039386ff 	.word	0x039386ff
  4013e0:	04000200 	.word	0x04000200
  4013e4:	04c4b3ff 	.word	0x04c4b3ff
  4013e8:	04000300 	.word	0x04000300
  4013ec:	05f5e0ff 	.word	0x05f5e0ff
  4013f0:	04000500 	.word	0x04000500

004013f4 <_sbrk>:
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;

	if (heap == NULL) {
  4013f4:	4b09      	ldr	r3, [pc, #36]	; (40141c <_sbrk+0x28>)
  4013f6:	681b      	ldr	r3, [r3, #0]
  4013f8:	b913      	cbnz	r3, 401400 <_sbrk+0xc>
		heap = (unsigned char *)&_end;
  4013fa:	4a09      	ldr	r2, [pc, #36]	; (401420 <_sbrk+0x2c>)
  4013fc:	4b07      	ldr	r3, [pc, #28]	; (40141c <_sbrk+0x28>)
  4013fe:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
  401400:	4b06      	ldr	r3, [pc, #24]	; (40141c <_sbrk+0x28>)
  401402:	681b      	ldr	r3, [r3, #0]

	if (((int)prev_heap + incr) > ramend) {
  401404:	181a      	adds	r2, r3, r0
  401406:	4907      	ldr	r1, [pc, #28]	; (401424 <_sbrk+0x30>)
  401408:	4291      	cmp	r1, r2
  40140a:	db04      	blt.n	401416 <_sbrk+0x22>
		return (caddr_t) -1;	
	}

	heap += incr;
  40140c:	4610      	mov	r0, r2
  40140e:	4a03      	ldr	r2, [pc, #12]	; (40141c <_sbrk+0x28>)
  401410:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap;
  401412:	4618      	mov	r0, r3
  401414:	4770      	bx	lr
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;

	if (((int)prev_heap + incr) > ramend) {
		return (caddr_t) -1;	
  401416:	f04f 30ff 	mov.w	r0, #4294967295
	}

	heap += incr;

	return (caddr_t) prev_heap;
}
  40141a:	4770      	bx	lr
  40141c:	20000d08 	.word	0x20000d08
  401420:	2000dee0 	.word	0x2000dee0
  401424:	2001fffc 	.word	0x2001fffc

00401428 <_close>:
}

extern int _close(int file)
{
	return -1;
}
  401428:	f04f 30ff 	mov.w	r0, #4294967295
  40142c:	4770      	bx	lr
  40142e:	bf00      	nop

00401430 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
  401430:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  401434:	604b      	str	r3, [r1, #4]

	return 0;
}
  401436:	2000      	movs	r0, #0
  401438:	4770      	bx	lr
  40143a:	bf00      	nop

0040143c <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
  40143c:	2001      	movs	r0, #1
  40143e:	4770      	bx	lr

00401440 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
  401440:	2000      	movs	r0, #0
  401442:	4770      	bx	lr

00401444 <_exit>:

extern void _exit(int status)
{
  401444:	b508      	push	{r3, lr}
  401446:	4601      	mov	r1, r0
	printf("Exiting with status %d.\n", status);
  401448:	4801      	ldr	r0, [pc, #4]	; (401450 <_exit+0xc>)
  40144a:	4b02      	ldr	r3, [pc, #8]	; (401454 <_exit+0x10>)
  40144c:	4798      	blx	r3

	for (;;);
  40144e:	e7fe      	b.n	40144e <_exit+0xa>
  401450:	00410970 	.word	0x00410970
  401454:	00408a01 	.word	0x00408a01

00401458 <_kill>:
}

extern void _kill(int pid, int sig)
{
  401458:	4770      	bx	lr
  40145a:	bf00      	nop

0040145c <_getpid>:
}

extern int _getpid(void)
{
	return -1;
}
  40145c:	f04f 30ff 	mov.w	r0, #4294967295
  401460:	4770      	bx	lr
  401462:	bf00      	nop

00401464 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
  401464:	f100 0308 	add.w	r3, r0, #8
  401468:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
  40146a:	f04f 32ff 	mov.w	r2, #4294967295
  40146e:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
  401470:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
  401472:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
  401474:	2300      	movs	r3, #0
  401476:	6003      	str	r3, [r0, #0]
  401478:	4770      	bx	lr
  40147a:	bf00      	nop

0040147c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
  40147c:	2300      	movs	r3, #0
  40147e:	6103      	str	r3, [r0, #16]
  401480:	4770      	bx	lr
  401482:	bf00      	nop

00401484 <vListInsertEnd>:
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
  401484:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
  401486:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
  401488:	689a      	ldr	r2, [r3, #8]
  40148a:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
  40148c:	689a      	ldr	r2, [r3, #8]
  40148e:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
  401490:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
  401492:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
  401494:	6803      	ldr	r3, [r0, #0]
  401496:	3301      	adds	r3, #1
  401498:	6003      	str	r3, [r0, #0]
  40149a:	4770      	bx	lr

0040149c <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
  40149c:	b430      	push	{r4, r5}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
  40149e:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
  4014a0:	f1b5 3fff 	cmp.w	r5, #4294967295
  4014a4:	d101      	bne.n	4014aa <vListInsert+0xe>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
  4014a6:	6902      	ldr	r2, [r0, #16]
  4014a8:	e007      	b.n	4014ba <vListInsert+0x1e>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
  4014aa:	f100 0208 	add.w	r2, r0, #8
  4014ae:	e000      	b.n	4014b2 <vListInsert+0x16>
  4014b0:	461a      	mov	r2, r3
  4014b2:	6853      	ldr	r3, [r2, #4]
  4014b4:	681c      	ldr	r4, [r3, #0]
  4014b6:	42a5      	cmp	r5, r4
  4014b8:	d2fa      	bcs.n	4014b0 <vListInsert+0x14>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
  4014ba:	6853      	ldr	r3, [r2, #4]
  4014bc:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
  4014be:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
  4014c0:	608a      	str	r2, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
  4014c2:	6051      	str	r1, [r2, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
  4014c4:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
  4014c6:	6803      	ldr	r3, [r0, #0]
  4014c8:	3301      	adds	r3, #1
  4014ca:	6003      	str	r3, [r0, #0]
}
  4014cc:	bc30      	pop	{r4, r5}
  4014ce:	4770      	bx	lr

004014d0 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
  4014d0:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
  4014d2:	6842      	ldr	r2, [r0, #4]
  4014d4:	6881      	ldr	r1, [r0, #8]
  4014d6:	6091      	str	r1, [r2, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
  4014d8:	6882      	ldr	r2, [r0, #8]
  4014da:	6841      	ldr	r1, [r0, #4]
  4014dc:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
  4014de:	685a      	ldr	r2, [r3, #4]
  4014e0:	4282      	cmp	r2, r0
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
  4014e2:	bf04      	itt	eq
  4014e4:	6892      	ldreq	r2, [r2, #8]
  4014e6:	605a      	streq	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
  4014e8:	2200      	movs	r2, #0
  4014ea:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
  4014ec:	6818      	ldr	r0, [r3, #0]
  4014ee:	3801      	subs	r0, #1
  4014f0:	6018      	str	r0, [r3, #0]

	return pxList->uxNumberOfItems;
}
  4014f2:	4770      	bx	lr

004014f4 <prvPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
  4014f4:	4806      	ldr	r0, [pc, #24]	; (401510 <prvPortStartFirstTask+0x1c>)
  4014f6:	6800      	ldr	r0, [r0, #0]
  4014f8:	6800      	ldr	r0, [r0, #0]
  4014fa:	f380 8808 	msr	MSP, r0
  4014fe:	b662      	cpsie	i
  401500:	b661      	cpsie	f
  401502:	f3bf 8f4f 	dsb	sy
  401506:	f3bf 8f6f 	isb	sy
  40150a:	df00      	svc	0
  40150c:	bf00      	nop
  40150e:	0000      	.short	0x0000
  401510:	e000ed08 	.word	0xe000ed08

00401514 <pxPortInitialiseStack>:
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
  401514:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
  401518:	f840 3c04 	str.w	r3, [r0, #-4]
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
  40151c:	f840 1c08 	str.w	r1, [r0, #-8]
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
  401520:	4b03      	ldr	r3, [pc, #12]	; (401530 <pxPortInitialiseStack+0x1c>)
  401522:	f840 3c0c 	str.w	r3, [r0, #-12]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
  401526:	f840 2c20 	str.w	r2, [r0, #-32]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */

	return pxTopOfStack;
}
  40152a:	3840      	subs	r0, #64	; 0x40
  40152c:	4770      	bx	lr
  40152e:	bf00      	nop
  401530:	00401581 	.word	0x00401581

00401534 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
  401534:	4b07      	ldr	r3, [pc, #28]	; (401554 <pxCurrentTCBConst2>)
  401536:	6819      	ldr	r1, [r3, #0]
  401538:	6808      	ldr	r0, [r1, #0]
  40153a:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
  40153e:	f380 8809 	msr	PSP, r0
  401542:	f3bf 8f6f 	isb	sy
  401546:	f04f 0000 	mov.w	r0, #0
  40154a:	f380 8811 	msr	BASEPRI, r0
  40154e:	f04e 0e0d 	orr.w	lr, lr, #13
  401552:	4770      	bx	lr

00401554 <pxCurrentTCBConst2>:
  401554:	2000adcc 	.word	0x2000adcc

00401558 <vPortYield>:
/*-----------------------------------------------------------*/

void vPortYield( void )
{
	/* Set a PendSV to request a context switch. */
	portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
  401558:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  40155c:	4b03      	ldr	r3, [pc, #12]	; (40156c <vPortYield+0x14>)
  40155e:	601a      	str	r2, [r3, #0]

	/* Barriers are normally not required but do ensure the code is completely
	within the specified behaviour for the architecture. */
	__asm volatile( "dsb" );
  401560:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
  401564:	f3bf 8f6f 	isb	sy
  401568:	4770      	bx	lr
  40156a:	bf00      	nop
  40156c:	e000ed04 	.word	0xe000ed04

00401570 <ulPortSetInterruptMask>:
}
/*-----------------------------------------------------------*/

__attribute__(( naked )) uint32_t ulPortSetInterruptMask( void )
{
	__asm volatile														\
  401570:	f3ef 8011 	mrs	r0, BASEPRI
  401574:	f04f 01a0 	mov.w	r1, #160	; 0xa0
  401578:	f381 8811 	msr	BASEPRI, r1
  40157c:	4770      	bx	lr
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return 0;
}
  40157e:	2000      	movs	r0, #0

00401580 <prvTaskExitError>:
	return pxTopOfStack;
}
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
  401580:	b508      	push	{r3, lr}
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
  401582:	4b05      	ldr	r3, [pc, #20]	; (401598 <prvTaskExitError+0x18>)
  401584:	681b      	ldr	r3, [r3, #0]
  401586:	f1b3 3fff 	cmp.w	r3, #4294967295
  40158a:	d002      	beq.n	401592 <prvTaskExitError+0x12>
  40158c:	4b03      	ldr	r3, [pc, #12]	; (40159c <prvTaskExitError+0x1c>)
  40158e:	4798      	blx	r3
  401590:	e7fe      	b.n	401590 <prvTaskExitError+0x10>
	portDISABLE_INTERRUPTS();
  401592:	4b02      	ldr	r3, [pc, #8]	; (40159c <prvTaskExitError+0x1c>)
  401594:	4798      	blx	r3
	for( ;; );
  401596:	e7fe      	b.n	401596 <prvTaskExitError+0x16>
  401598:	20000010 	.word	0x20000010
  40159c:	00401571 	.word	0x00401571

004015a0 <vPortEnterCritical>:
	__asm volatile( "isb" );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
  4015a0:	b508      	push	{r3, lr}
	portDISABLE_INTERRUPTS();
  4015a2:	4b0a      	ldr	r3, [pc, #40]	; (4015cc <vPortEnterCritical+0x2c>)
  4015a4:	4798      	blx	r3
	uxCriticalNesting++;
  4015a6:	4a0a      	ldr	r2, [pc, #40]	; (4015d0 <vPortEnterCritical+0x30>)
  4015a8:	6813      	ldr	r3, [r2, #0]
  4015aa:	3301      	adds	r3, #1
  4015ac:	6013      	str	r3, [r2, #0]
	__asm volatile( "dsb" );
  4015ae:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
  4015b2:	f3bf 8f6f 	isb	sy
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API 
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
  4015b6:	2b01      	cmp	r3, #1
  4015b8:	d107      	bne.n	4015ca <vPortEnterCritical+0x2a>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
  4015ba:	4b06      	ldr	r3, [pc, #24]	; (4015d4 <vPortEnterCritical+0x34>)
  4015bc:	681b      	ldr	r3, [r3, #0]
  4015be:	f013 0fff 	tst.w	r3, #255	; 0xff
  4015c2:	d002      	beq.n	4015ca <vPortEnterCritical+0x2a>
  4015c4:	4b01      	ldr	r3, [pc, #4]	; (4015cc <vPortEnterCritical+0x2c>)
  4015c6:	4798      	blx	r3
  4015c8:	e7fe      	b.n	4015c8 <vPortEnterCritical+0x28>
  4015ca:	bd08      	pop	{r3, pc}
  4015cc:	00401571 	.word	0x00401571
  4015d0:	20000010 	.word	0x20000010
  4015d4:	e000ed04 	.word	0xe000ed04

004015d8 <vPortClearInterruptMask>:
}
/*-----------------------------------------------------------*/

__attribute__(( naked )) void vPortClearInterruptMask( uint32_t ulNewMaskValue )
{
	__asm volatile													\
  4015d8:	f380 8811 	msr	BASEPRI, r0
  4015dc:	4770      	bx	lr
  4015de:	bf00      	nop

004015e0 <vPortExitCritical>:
	}
}
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
  4015e0:	b508      	push	{r3, lr}
	configASSERT( uxCriticalNesting );
  4015e2:	4b07      	ldr	r3, [pc, #28]	; (401600 <vPortExitCritical+0x20>)
  4015e4:	681b      	ldr	r3, [r3, #0]
  4015e6:	b913      	cbnz	r3, 4015ee <vPortExitCritical+0xe>
  4015e8:	4b06      	ldr	r3, [pc, #24]	; (401604 <vPortExitCritical+0x24>)
  4015ea:	4798      	blx	r3
  4015ec:	e7fe      	b.n	4015ec <vPortExitCritical+0xc>
	uxCriticalNesting--;
  4015ee:	3b01      	subs	r3, #1
  4015f0:	4a03      	ldr	r2, [pc, #12]	; (401600 <vPortExitCritical+0x20>)
  4015f2:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
  4015f4:	b913      	cbnz	r3, 4015fc <vPortExitCritical+0x1c>
	{
		portENABLE_INTERRUPTS();
  4015f6:	2000      	movs	r0, #0
  4015f8:	4b03      	ldr	r3, [pc, #12]	; (401608 <vPortExitCritical+0x28>)
  4015fa:	4798      	blx	r3
  4015fc:	bd08      	pop	{r3, pc}
  4015fe:	bf00      	nop
  401600:	20000010 	.word	0x20000010
  401604:	00401571 	.word	0x00401571
  401608:	004015d9 	.word	0x004015d9

0040160c <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
  40160c:	f3ef 8009 	mrs	r0, PSP
  401610:	f3bf 8f6f 	isb	sy
  401614:	4b0d      	ldr	r3, [pc, #52]	; (40164c <pxCurrentTCBConst>)
  401616:	681a      	ldr	r2, [r3, #0]
  401618:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
  40161c:	6010      	str	r0, [r2, #0]
  40161e:	e92d 4008 	stmdb	sp!, {r3, lr}
  401622:	f04f 00a0 	mov.w	r0, #160	; 0xa0
  401626:	f380 8811 	msr	BASEPRI, r0
  40162a:	f001 f893 	bl	402754 <vTaskSwitchContext>
  40162e:	f04f 0000 	mov.w	r0, #0
  401632:	f380 8811 	msr	BASEPRI, r0
  401636:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  40163a:	6819      	ldr	r1, [r3, #0]
  40163c:	6808      	ldr	r0, [r1, #0]
  40163e:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
  401642:	f380 8809 	msr	PSP, r0
  401646:	f3bf 8f6f 	isb	sy
  40164a:	4770      	bx	lr

0040164c <pxCurrentTCBConst>:
  40164c:	2000adcc 	.word	0x2000adcc

00401650 <SysTick_Handler>:
	);
}
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
  401650:	b508      	push	{r3, lr}
	/* The SysTick runs at the lowest interrupt priority, so when this interrupt
	executes all interrupts must be unmasked.  There is therefore no need to
	save and then restore the interrupt mask value as its value is already
	known. */
	( void ) portSET_INTERRUPT_MASK_FROM_ISR();
  401652:	4b06      	ldr	r3, [pc, #24]	; (40166c <SysTick_Handler+0x1c>)
  401654:	4798      	blx	r3
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
  401656:	4b06      	ldr	r3, [pc, #24]	; (401670 <SysTick_Handler+0x20>)
  401658:	4798      	blx	r3
  40165a:	b118      	cbz	r0, 401664 <SysTick_Handler+0x14>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
  40165c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  401660:	4b04      	ldr	r3, [pc, #16]	; (401674 <SysTick_Handler+0x24>)
  401662:	601a      	str	r2, [r3, #0]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( 0 );
  401664:	2000      	movs	r0, #0
  401666:	4b04      	ldr	r3, [pc, #16]	; (401678 <SysTick_Handler+0x28>)
  401668:	4798      	blx	r3
  40166a:	bd08      	pop	{r3, pc}
  40166c:	00401571 	.word	0x00401571
  401670:	00402415 	.word	0x00402415
  401674:	e000ed04 	.word	0xe000ed04
  401678:	004015d9 	.word	0x004015d9

0040167c <vPortSetupTimerInterrupt>:
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
  40167c:	4b06      	ldr	r3, [pc, #24]	; (401698 <vPortSetupTimerInterrupt+0x1c>)
  40167e:	681b      	ldr	r3, [r3, #0]
  401680:	4a06      	ldr	r2, [pc, #24]	; (40169c <vPortSetupTimerInterrupt+0x20>)
  401682:	fba2 2303 	umull	r2, r3, r2, r3
  401686:	099b      	lsrs	r3, r3, #6
  401688:	3b01      	subs	r3, #1
  40168a:	4a05      	ldr	r2, [pc, #20]	; (4016a0 <vPortSetupTimerInterrupt+0x24>)
  40168c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
  40168e:	2207      	movs	r2, #7
  401690:	4b04      	ldr	r3, [pc, #16]	; (4016a4 <vPortSetupTimerInterrupt+0x28>)
  401692:	601a      	str	r2, [r3, #0]
  401694:	4770      	bx	lr
  401696:	bf00      	nop
  401698:	2000000c 	.word	0x2000000c
  40169c:	10624dd3 	.word	0x10624dd3
  4016a0:	e000e014 	.word	0xe000e014
  4016a4:	e000e010 	.word	0xe000e010

004016a8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
  4016a8:	b500      	push	{lr}
  4016aa:	b083      	sub	sp, #12
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
  4016ac:	4b22      	ldr	r3, [pc, #136]	; (401738 <xPortStartScheduler+0x90>)
  4016ae:	781a      	ldrb	r2, [r3, #0]
  4016b0:	b2d2      	uxtb	r2, r2
  4016b2:	9201      	str	r2, [sp, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
  4016b4:	22ff      	movs	r2, #255	; 0xff
  4016b6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
  4016b8:	781b      	ldrb	r3, [r3, #0]
  4016ba:	b2db      	uxtb	r3, r3
  4016bc:	f88d 3003 	strb.w	r3, [sp, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
  4016c0:	f89d 3003 	ldrb.w	r3, [sp, #3]
  4016c4:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
  4016c8:	4a1c      	ldr	r2, [pc, #112]	; (40173c <xPortStartScheduler+0x94>)
  4016ca:	7013      	strb	r3, [r2, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
  4016cc:	2207      	movs	r2, #7
  4016ce:	4b1c      	ldr	r3, [pc, #112]	; (401740 <xPortStartScheduler+0x98>)
  4016d0:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
  4016d2:	f89d 3003 	ldrb.w	r3, [sp, #3]
  4016d6:	f013 0f80 	tst.w	r3, #128	; 0x80
  4016da:	d010      	beq.n	4016fe <xPortStartScheduler+0x56>
  4016dc:	2206      	movs	r2, #6
  4016de:	e000      	b.n	4016e2 <xPortStartScheduler+0x3a>
  4016e0:	460a      	mov	r2, r1
		{
			ulMaxPRIGROUPValue--;
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
  4016e2:	f89d 3003 	ldrb.w	r3, [sp, #3]
  4016e6:	005b      	lsls	r3, r3, #1
  4016e8:	b2db      	uxtb	r3, r3
  4016ea:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
  4016ee:	f89d 3003 	ldrb.w	r3, [sp, #3]
  4016f2:	1e51      	subs	r1, r2, #1
  4016f4:	f013 0f80 	tst.w	r3, #128	; 0x80
  4016f8:	d1f2      	bne.n	4016e0 <xPortStartScheduler+0x38>
  4016fa:	4b11      	ldr	r3, [pc, #68]	; (401740 <xPortStartScheduler+0x98>)
  4016fc:	601a      	str	r2, [r3, #0]
		}

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
  4016fe:	4a10      	ldr	r2, [pc, #64]	; (401740 <xPortStartScheduler+0x98>)
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
		}

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
  401700:	6813      	ldr	r3, [r2, #0]
  401702:	021b      	lsls	r3, r3, #8
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
  401704:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  401708:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
  40170a:	9b01      	ldr	r3, [sp, #4]
  40170c:	b2db      	uxtb	r3, r3
  40170e:	4a0a      	ldr	r2, [pc, #40]	; (401738 <xPortStartScheduler+0x90>)
  401710:	7013      	strb	r3, [r2, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
  401712:	4b0c      	ldr	r3, [pc, #48]	; (401744 <xPortStartScheduler+0x9c>)
  401714:	681a      	ldr	r2, [r3, #0]
  401716:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
  40171a:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
  40171c:	681a      	ldr	r2, [r3, #0]
  40171e:	f042 4270 	orr.w	r2, r2, #4026531840	; 0xf0000000
  401722:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
  401724:	4b08      	ldr	r3, [pc, #32]	; (401748 <xPortStartScheduler+0xa0>)
  401726:	4798      	blx	r3

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
  401728:	2200      	movs	r2, #0
  40172a:	4b08      	ldr	r3, [pc, #32]	; (40174c <xPortStartScheduler+0xa4>)
  40172c:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
  40172e:	4b08      	ldr	r3, [pc, #32]	; (401750 <xPortStartScheduler+0xa8>)
  401730:	4798      	blx	r3

	/* Should never get here as the tasks will now be executing!  Call the task
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS. */
	prvTaskExitError();
  401732:	4b08      	ldr	r3, [pc, #32]	; (401754 <xPortStartScheduler+0xac>)
  401734:	4798      	blx	r3
  401736:	bf00      	nop
  401738:	e000e400 	.word	0xe000e400
  40173c:	20000d0c 	.word	0x20000d0c
  401740:	20000d10 	.word	0x20000d10
  401744:	e000ed20 	.word	0xe000ed20
  401748:	0040167d 	.word	0x0040167d
  40174c:	20000010 	.word	0x20000010
  401750:	004014f5 	.word	0x004014f5
  401754:	00401581 	.word	0x00401581

00401758 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
  401758:	b508      	push	{r3, lr}
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) );
  40175a:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
  40175e:	2b0f      	cmp	r3, #15
  401760:	d909      	bls.n	401776 <vPortValidateInterruptPriority+0x1e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
  401762:	4a0b      	ldr	r2, [pc, #44]	; (401790 <vPortValidateInterruptPriority+0x38>)
  401764:	5c9b      	ldrb	r3, [r3, r2]
  401766:	b2db      	uxtb	r3, r3
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
  401768:	4a0a      	ldr	r2, [pc, #40]	; (401794 <vPortValidateInterruptPriority+0x3c>)
  40176a:	7812      	ldrb	r2, [r2, #0]
  40176c:	429a      	cmp	r2, r3
  40176e:	d902      	bls.n	401776 <vPortValidateInterruptPriority+0x1e>
  401770:	4b09      	ldr	r3, [pc, #36]	; (401798 <vPortValidateInterruptPriority+0x40>)
  401772:	4798      	blx	r3
  401774:	e7fe      	b.n	401774 <vPortValidateInterruptPriority+0x1c>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredicable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
  401776:	4b09      	ldr	r3, [pc, #36]	; (40179c <vPortValidateInterruptPriority+0x44>)
  401778:	681b      	ldr	r3, [r3, #0]
  40177a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  40177e:	4a08      	ldr	r2, [pc, #32]	; (4017a0 <vPortValidateInterruptPriority+0x48>)
  401780:	6812      	ldr	r2, [r2, #0]
  401782:	4293      	cmp	r3, r2
  401784:	d902      	bls.n	40178c <vPortValidateInterruptPriority+0x34>
  401786:	4b04      	ldr	r3, [pc, #16]	; (401798 <vPortValidateInterruptPriority+0x40>)
  401788:	4798      	blx	r3
  40178a:	e7fe      	b.n	40178a <vPortValidateInterruptPriority+0x32>
  40178c:	bd08      	pop	{r3, pc}
  40178e:	bf00      	nop
  401790:	e000e3f0 	.word	0xe000e3f0
  401794:	20000d0c 	.word	0x20000d0c
  401798:	00401571 	.word	0x00401571
  40179c:	e000ed0c 	.word	0xe000ed0c
  4017a0:	20000d10 	.word	0x20000d10

004017a4 <prvInsertBlockIntoFreeList>:
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
  4017a4:	4a13      	ldr	r2, [pc, #76]	; (4017f4 <prvInsertBlockIntoFreeList+0x50>)
  4017a6:	e000      	b.n	4017aa <prvInsertBlockIntoFreeList+0x6>
  4017a8:	461a      	mov	r2, r3
  4017aa:	6813      	ldr	r3, [r2, #0]
  4017ac:	4283      	cmp	r3, r0
  4017ae:	d3fb      	bcc.n	4017a8 <prvInsertBlockIntoFreeList+0x4>
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
  4017b0:	b430      	push	{r4, r5}
  4017b2:	4611      	mov	r1, r2
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
  4017b4:	6854      	ldr	r4, [r2, #4]
  4017b6:	1915      	adds	r5, r2, r4
  4017b8:	4285      	cmp	r5, r0
  4017ba:	d103      	bne.n	4017c4 <prvInsertBlockIntoFreeList+0x20>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
  4017bc:	6868      	ldr	r0, [r5, #4]
  4017be:	4404      	add	r4, r0
  4017c0:	6054      	str	r4, [r2, #4]
  4017c2:	4610      	mov	r0, r2
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
  4017c4:	6842      	ldr	r2, [r0, #4]
  4017c6:	1884      	adds	r4, r0, r2
  4017c8:	429c      	cmp	r4, r3
  4017ca:	d10c      	bne.n	4017e6 <prvInsertBlockIntoFreeList+0x42>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
  4017cc:	4b0a      	ldr	r3, [pc, #40]	; (4017f8 <prvInsertBlockIntoFreeList+0x54>)
  4017ce:	681b      	ldr	r3, [r3, #0]
  4017d0:	429c      	cmp	r4, r3
  4017d2:	d006      	beq.n	4017e2 <prvInsertBlockIntoFreeList+0x3e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
  4017d4:	6863      	ldr	r3, [r4, #4]
  4017d6:	441a      	add	r2, r3
  4017d8:	6042      	str	r2, [r0, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
  4017da:	680b      	ldr	r3, [r1, #0]
  4017dc:	681b      	ldr	r3, [r3, #0]
  4017de:	6003      	str	r3, [r0, #0]
  4017e0:	e002      	b.n	4017e8 <prvInsertBlockIntoFreeList+0x44>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
  4017e2:	6004      	str	r4, [r0, #0]
  4017e4:	e000      	b.n	4017e8 <prvInsertBlockIntoFreeList+0x44>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
  4017e6:	6003      	str	r3, [r0, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
  4017e8:	4281      	cmp	r1, r0
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
  4017ea:	bf18      	it	ne
  4017ec:	6008      	strne	r0, [r1, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
  4017ee:	bc30      	pop	{r4, r5}
  4017f0:	4770      	bx	lr
  4017f2:	bf00      	nop
  4017f4:	20000d1c 	.word	0x20000d1c
  4017f8:	20000d18 	.word	0x20000d18

004017fc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
  4017fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4017fe:	4604      	mov	r4, r0
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;

	vTaskSuspendAll();
  401800:	4b41      	ldr	r3, [pc, #260]	; (401908 <pvPortMalloc+0x10c>)
  401802:	4798      	blx	r3
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
  401804:	4b41      	ldr	r3, [pc, #260]	; (40190c <pvPortMalloc+0x110>)
  401806:	681b      	ldr	r3, [r3, #0]
  401808:	bb23      	cbnz	r3, 401854 <pvPortMalloc+0x58>
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
  40180a:	4a41      	ldr	r2, [pc, #260]	; (401910 <pvPortMalloc+0x114>)

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
  40180c:	f012 0f07 	tst.w	r2, #7
  401810:	d007      	beq.n	401822 <pvPortMalloc+0x26>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
  401812:	1dd1      	adds	r1, r2, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
  401814:	f021 0107 	bic.w	r1, r1, #7
  401818:	f502 4320 	add.w	r3, r2, #40960	; 0xa000
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
  40181c:	1a5b      	subs	r3, r3, r1
	uxAddress = ( size_t ) ucHeap;

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
  40181e:	460a      	mov	r2, r1
  401820:	e001      	b.n	401826 <pvPortMalloc+0x2a>
static void prvHeapInit( void )
{
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
  401822:	f44f 4320 	mov.w	r3, #40960	; 0xa000

	pucAlignedHeap = ( uint8_t * ) uxAddress;

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
  401826:	483b      	ldr	r0, [pc, #236]	; (401914 <pvPortMalloc+0x118>)
  401828:	6002      	str	r2, [r0, #0]
	xStart.xBlockSize = ( size_t ) 0;
  40182a:	2100      	movs	r1, #0
  40182c:	6041      	str	r1, [r0, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
  40182e:	4413      	add	r3, r2
	uxAddress -= xHeapStructSize;
  401830:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
  401832:	f023 0307 	bic.w	r3, r3, #7
	pxEnd = ( void * ) uxAddress;
  401836:	4835      	ldr	r0, [pc, #212]	; (40190c <pvPortMalloc+0x110>)
  401838:	6003      	str	r3, [r0, #0]
	pxEnd->xBlockSize = 0;
  40183a:	6059      	str	r1, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
  40183c:	6019      	str	r1, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
  40183e:	1a99      	subs	r1, r3, r2
  401840:	6051      	str	r1, [r2, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
  401842:	6013      	str	r3, [r2, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
  401844:	4b34      	ldr	r3, [pc, #208]	; (401918 <pvPortMalloc+0x11c>)
  401846:	6019      	str	r1, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
  401848:	4b34      	ldr	r3, [pc, #208]	; (40191c <pvPortMalloc+0x120>)
  40184a:	6019      	str	r1, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
  40184c:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
  401850:	4b33      	ldr	r3, [pc, #204]	; (401920 <pvPortMalloc+0x124>)
  401852:	601a      	str	r2, [r3, #0]

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
  401854:	4b32      	ldr	r3, [pc, #200]	; (401920 <pvPortMalloc+0x124>)
  401856:	681e      	ldr	r6, [r3, #0]
  401858:	4234      	tst	r4, r6
  40185a:	d14c      	bne.n	4018f6 <pvPortMalloc+0xfa>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
  40185c:	2c00      	cmp	r4, #0
  40185e:	d04d      	beq.n	4018fc <pvPortMalloc+0x100>
			{
				xWantedSize += xHeapStructSize;
  401860:	f104 0308 	add.w	r3, r4, #8

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
  401864:	f013 0f07 	tst.w	r3, #7
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
  401868:	bf1c      	itt	ne
  40186a:	f023 0307 	bicne.w	r3, r3, #7
  40186e:	3308      	addne	r3, #8
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
  401870:	2b00      	cmp	r3, #0
  401872:	d040      	beq.n	4018f6 <pvPortMalloc+0xfa>
  401874:	4a29      	ldr	r2, [pc, #164]	; (40191c <pvPortMalloc+0x120>)
  401876:	6817      	ldr	r7, [r2, #0]
  401878:	42bb      	cmp	r3, r7
  40187a:	d83c      	bhi.n	4018f6 <pvPortMalloc+0xfa>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
				pxBlock = xStart.pxNextFreeBlock;
  40187c:	4a25      	ldr	r2, [pc, #148]	; (401914 <pvPortMalloc+0x118>)
  40187e:	6814      	ldr	r4, [r2, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
  401880:	e001      	b.n	401886 <pvPortMalloc+0x8a>
  401882:	4622      	mov	r2, r4
				{
					pxPreviousBlock = pxBlock;
					pxBlock = pxBlock->pxNextFreeBlock;
  401884:	460c      	mov	r4, r1
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
				pxBlock = xStart.pxNextFreeBlock;
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
  401886:	6861      	ldr	r1, [r4, #4]
  401888:	428b      	cmp	r3, r1
  40188a:	d902      	bls.n	401892 <pvPortMalloc+0x96>
  40188c:	6821      	ldr	r1, [r4, #0]
  40188e:	2900      	cmp	r1, #0
  401890:	d1f7      	bne.n	401882 <pvPortMalloc+0x86>
					pxBlock = pxBlock->pxNextFreeBlock;
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
  401892:	491e      	ldr	r1, [pc, #120]	; (40190c <pvPortMalloc+0x110>)
  401894:	6809      	ldr	r1, [r1, #0]
  401896:	428c      	cmp	r4, r1
  401898:	d02d      	beq.n	4018f6 <pvPortMalloc+0xfa>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
  40189a:	6815      	ldr	r5, [r2, #0]
  40189c:	3508      	adds	r5, #8

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
  40189e:	6821      	ldr	r1, [r4, #0]
  4018a0:	6011      	str	r1, [r2, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
  4018a2:	6862      	ldr	r2, [r4, #4]
  4018a4:	1ad2      	subs	r2, r2, r3
  4018a6:	2a10      	cmp	r2, #16
  4018a8:	d90a      	bls.n	4018c0 <pvPortMalloc+0xc4>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
  4018aa:	18e0      	adds	r0, r4, r3
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
  4018ac:	f010 0f07 	tst.w	r0, #7
  4018b0:	d002      	beq.n	4018b8 <pvPortMalloc+0xbc>
  4018b2:	4b1c      	ldr	r3, [pc, #112]	; (401924 <pvPortMalloc+0x128>)
  4018b4:	4798      	blx	r3
  4018b6:	e7fe      	b.n	4018b6 <pvPortMalloc+0xba>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
  4018b8:	6042      	str	r2, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
  4018ba:	6063      	str	r3, [r4, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
  4018bc:	4b1a      	ldr	r3, [pc, #104]	; (401928 <pvPortMalloc+0x12c>)
  4018be:	4798      	blx	r3
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
  4018c0:	6862      	ldr	r2, [r4, #4]
  4018c2:	1abb      	subs	r3, r7, r2
  4018c4:	4915      	ldr	r1, [pc, #84]	; (40191c <pvPortMalloc+0x120>)
  4018c6:	600b      	str	r3, [r1, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
  4018c8:	4913      	ldr	r1, [pc, #76]	; (401918 <pvPortMalloc+0x11c>)
  4018ca:	6809      	ldr	r1, [r1, #0]
  4018cc:	428b      	cmp	r3, r1
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
  4018ce:	bf3c      	itt	cc
  4018d0:	4911      	ldrcc	r1, [pc, #68]	; (401918 <pvPortMalloc+0x11c>)
  4018d2:	600b      	strcc	r3, [r1, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
  4018d4:	4316      	orrs	r6, r2
  4018d6:	6066      	str	r6, [r4, #4]
					pxBlock->pxNextFreeBlock = NULL;
  4018d8:	2300      	movs	r3, #0
  4018da:	6023      	str	r3, [r4, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
  4018dc:	4b13      	ldr	r3, [pc, #76]	; (40192c <pvPortMalloc+0x130>)
  4018de:	4798      	blx	r3

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
  4018e0:	b91d      	cbnz	r5, 4018ea <pvPortMalloc+0xee>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
  4018e2:	4b13      	ldr	r3, [pc, #76]	; (401930 <pvPortMalloc+0x134>)
  4018e4:	4798      	blx	r3
  4018e6:	2500      	movs	r5, #0
  4018e8:	e00b      	b.n	401902 <pvPortMalloc+0x106>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( uint32_t ) pvReturn ) & portBYTE_ALIGNMENT_MASK ) == 0 );
  4018ea:	f015 0f07 	tst.w	r5, #7
  4018ee:	d008      	beq.n	401902 <pvPortMalloc+0x106>
  4018f0:	4b0c      	ldr	r3, [pc, #48]	; (401924 <pvPortMalloc+0x128>)
  4018f2:	4798      	blx	r3
  4018f4:	e7fe      	b.n	4018f4 <pvPortMalloc+0xf8>
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
  4018f6:	4b0d      	ldr	r3, [pc, #52]	; (40192c <pvPortMalloc+0x130>)
  4018f8:	4798      	blx	r3
  4018fa:	e7f2      	b.n	4018e2 <pvPortMalloc+0xe6>
  4018fc:	4b0b      	ldr	r3, [pc, #44]	; (40192c <pvPortMalloc+0x130>)
  4018fe:	4798      	blx	r3
  401900:	e7ef      	b.n	4018e2 <pvPortMalloc+0xe6>
	}
	#endif

	configASSERT( ( ( ( uint32_t ) pvReturn ) & portBYTE_ALIGNMENT_MASK ) == 0 );
	return pvReturn;
}
  401902:	4628      	mov	r0, r5
  401904:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  401906:	bf00      	nop
  401908:	004023f9 	.word	0x004023f9
  40190c:	20000d18 	.word	0x20000d18
  401910:	20000d24 	.word	0x20000d24
  401914:	20000d1c 	.word	0x20000d1c
  401918:	2000ad28 	.word	0x2000ad28
  40191c:	20000d14 	.word	0x20000d14
  401920:	2000ad24 	.word	0x2000ad24
  401924:	00401571 	.word	0x00401571
  401928:	004017a5 	.word	0x004017a5
  40192c:	00402551 	.word	0x00402551
  401930:	00407bc1 	.word	0x00407bc1

00401934 <pvPortCalloc>:
/*-----------------------------------------------------------*/

/*custom fcn for calloc - not included with FreeRTOS by default*/
void *pvPortCalloc(size_t count, size_t size)
{
  401934:	b538      	push	{r3, r4, r5, lr}
	void *p;

	// allocate 'count' objects of size 'size'
	p = pvPortMalloc(count * size);
  401936:	fb01 f500 	mul.w	r5, r1, r0
  40193a:	4628      	mov	r0, r5
  40193c:	4b04      	ldr	r3, [pc, #16]	; (401950 <pvPortCalloc+0x1c>)
  40193e:	4798      	blx	r3
	if (p) {
  401940:	4604      	mov	r4, r0
  401942:	b118      	cbz	r0, 40194c <pvPortCalloc+0x18>
		// zero the memory 
		memset(p, 0, count * size);
  401944:	2100      	movs	r1, #0
  401946:	462a      	mov	r2, r5
  401948:	4b02      	ldr	r3, [pc, #8]	; (401954 <pvPortCalloc+0x20>)
  40194a:	4798      	blx	r3
	}
	return p;
}
  40194c:	4620      	mov	r0, r4
  40194e:	bd38      	pop	{r3, r4, r5, pc}
  401950:	004017fd 	.word	0x004017fd
  401954:	00409321 	.word	0x00409321

00401958 <vPortFree>:
void vPortFree( void *pv )
{
uint8_t *puc = ( uint8_t * ) pv;
BlockLink_t *pxLink;

	if( pv != NULL )
  401958:	b318      	cbz	r0, 4019a2 <vPortFree+0x4a>

/*-----------------------------------------------------------*/


void vPortFree( void *pv )
{
  40195a:	b510      	push	{r4, lr}
  40195c:	4604      	mov	r4, r0

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
  40195e:	f850 3c04 	ldr.w	r3, [r0, #-4]
  401962:	4a10      	ldr	r2, [pc, #64]	; (4019a4 <vPortFree+0x4c>)
  401964:	6812      	ldr	r2, [r2, #0]
  401966:	421a      	tst	r2, r3
  401968:	d102      	bne.n	401970 <vPortFree+0x18>
  40196a:	4b0f      	ldr	r3, [pc, #60]	; (4019a8 <vPortFree+0x50>)
  40196c:	4798      	blx	r3
  40196e:	e7fe      	b.n	40196e <vPortFree+0x16>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
  401970:	f850 1c08 	ldr.w	r1, [r0, #-8]
  401974:	b111      	cbz	r1, 40197c <vPortFree+0x24>
  401976:	4b0c      	ldr	r3, [pc, #48]	; (4019a8 <vPortFree+0x50>)
  401978:	4798      	blx	r3
  40197a:	e7fe      	b.n	40197a <vPortFree+0x22>
		{
			if( pxLink->pxNextFreeBlock == NULL )
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
  40197c:	ea23 0302 	bic.w	r3, r3, r2
  401980:	f840 3c04 	str.w	r3, [r0, #-4]

				vTaskSuspendAll();
  401984:	4b09      	ldr	r3, [pc, #36]	; (4019ac <vPortFree+0x54>)
  401986:	4798      	blx	r3
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
  401988:	4a09      	ldr	r2, [pc, #36]	; (4019b0 <vPortFree+0x58>)
  40198a:	6811      	ldr	r1, [r2, #0]
  40198c:	f854 3c04 	ldr.w	r3, [r4, #-4]
  401990:	440b      	add	r3, r1
  401992:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
  401994:	f1a4 0008 	sub.w	r0, r4, #8
  401998:	4b06      	ldr	r3, [pc, #24]	; (4019b4 <vPortFree+0x5c>)
  40199a:	4798      	blx	r3
				}
				( void ) xTaskResumeAll();
  40199c:	4b06      	ldr	r3, [pc, #24]	; (4019b8 <vPortFree+0x60>)
  40199e:	4798      	blx	r3
  4019a0:	bd10      	pop	{r4, pc}
  4019a2:	4770      	bx	lr
  4019a4:	2000ad24 	.word	0x2000ad24
  4019a8:	00401571 	.word	0x00401571
  4019ac:	004023f9 	.word	0x004023f9
  4019b0:	20000d14 	.word	0x20000d14
  4019b4:	004017a5 	.word	0x004017a5
  4019b8:	00402551 	.word	0x00402551

004019bc <prvCopyDataToQueue>:

#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
  4019bc:	b538      	push	{r3, r4, r5, lr}
  4019be:	4604      	mov	r4, r0
  4019c0:	4615      	mov	r5, r2
BaseType_t xReturn = pdFALSE;

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
  4019c2:	6c02      	ldr	r2, [r0, #64]	; 0x40
  4019c4:	b94a      	cbnz	r2, 4019da <prvCopyDataToQueue+0x1e>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
  4019c6:	6803      	ldr	r3, [r0, #0]
#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
BaseType_t xReturn = pdFALSE;
  4019c8:	2000      	movs	r0, #0

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
  4019ca:	2b00      	cmp	r3, #0
  4019cc:	d130      	bne.n	401a30 <prvCopyDataToQueue+0x74>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
  4019ce:	6860      	ldr	r0, [r4, #4]
  4019d0:	4b19      	ldr	r3, [pc, #100]	; (401a38 <prvCopyDataToQueue+0x7c>)
  4019d2:	4798      	blx	r3
				pxQueue->pxMutexHolder = NULL;
  4019d4:	2300      	movs	r3, #0
  4019d6:	6063      	str	r3, [r4, #4]
  4019d8:	e02a      	b.n	401a30 <prvCopyDataToQueue+0x74>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
  4019da:	b96d      	cbnz	r5, 4019f8 <prvCopyDataToQueue+0x3c>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
  4019dc:	6880      	ldr	r0, [r0, #8]
  4019de:	4b17      	ldr	r3, [pc, #92]	; (401a3c <prvCopyDataToQueue+0x80>)
  4019e0:	4798      	blx	r3
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
  4019e2:	68a2      	ldr	r2, [r4, #8]
  4019e4:	6c23      	ldr	r3, [r4, #64]	; 0x40
  4019e6:	4413      	add	r3, r2
  4019e8:	60a3      	str	r3, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
  4019ea:	6862      	ldr	r2, [r4, #4]
  4019ec:	4293      	cmp	r3, r2
  4019ee:	d31a      	bcc.n	401a26 <prvCopyDataToQueue+0x6a>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
  4019f0:	6823      	ldr	r3, [r4, #0]
  4019f2:	60a3      	str	r3, [r4, #8]
#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
BaseType_t xReturn = pdFALSE;
  4019f4:	2000      	movs	r0, #0
  4019f6:	e01b      	b.n	401a30 <prvCopyDataToQueue+0x74>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  4019f8:	68c0      	ldr	r0, [r0, #12]
  4019fa:	4b10      	ldr	r3, [pc, #64]	; (401a3c <prvCopyDataToQueue+0x80>)
  4019fc:	4798      	blx	r3
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
  4019fe:	6c23      	ldr	r3, [r4, #64]	; 0x40
  401a00:	425b      	negs	r3, r3
  401a02:	68e2      	ldr	r2, [r4, #12]
  401a04:	441a      	add	r2, r3
  401a06:	60e2      	str	r2, [r4, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
  401a08:	6821      	ldr	r1, [r4, #0]
  401a0a:	428a      	cmp	r2, r1
  401a0c:	d202      	bcs.n	401a14 <prvCopyDataToQueue+0x58>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
  401a0e:	6862      	ldr	r2, [r4, #4]
  401a10:	4413      	add	r3, r2
  401a12:	60e3      	str	r3, [r4, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
  401a14:	2d02      	cmp	r5, #2
  401a16:	d108      	bne.n	401a2a <prvCopyDataToQueue+0x6e>
		{
			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
  401a18:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  401a1a:	b143      	cbz	r3, 401a2e <prvCopyDataToQueue+0x72>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--( pxQueue->uxMessagesWaiting );
  401a1c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  401a1e:	3b01      	subs	r3, #1
  401a20:	63a3      	str	r3, [r4, #56]	; 0x38
#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
BaseType_t xReturn = pdFALSE;
  401a22:	2000      	movs	r0, #0
  401a24:	e004      	b.n	401a30 <prvCopyDataToQueue+0x74>
  401a26:	2000      	movs	r0, #0
  401a28:	e002      	b.n	401a30 <prvCopyDataToQueue+0x74>
  401a2a:	2000      	movs	r0, #0
  401a2c:	e000      	b.n	401a30 <prvCopyDataToQueue+0x74>
  401a2e:	2000      	movs	r0, #0
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	++( pxQueue->uxMessagesWaiting );
  401a30:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  401a32:	3301      	adds	r3, #1
  401a34:	63a3      	str	r3, [r4, #56]	; 0x38

	return xReturn;
}
  401a36:	bd38      	pop	{r3, r4, r5, pc}
  401a38:	00402af9 	.word	0x00402af9
  401a3c:	00409125 	.word	0x00409125

00401a40 <prvNotifyQueueSetContainer>:
/*-----------------------------------------------------------*/

#if ( configUSE_QUEUE_SETS == 1 )

	static BaseType_t prvNotifyQueueSetContainer( const Queue_t * const pxQueue, const BaseType_t xCopyPosition )
	{
  401a40:	b530      	push	{r4, r5, lr}
  401a42:	b083      	sub	sp, #12
  401a44:	9001      	str	r0, [sp, #4]
	Queue_t *pxQueueSetContainer = pxQueue->pxQueueSetContainer;
  401a46:	6cc4      	ldr	r4, [r0, #76]	; 0x4c
	BaseType_t xReturn = pdFALSE;

		/* This function must be called form a critical section. */

		configASSERT( pxQueueSetContainer );
  401a48:	b914      	cbnz	r4, 401a50 <prvNotifyQueueSetContainer+0x10>
  401a4a:	4b14      	ldr	r3, [pc, #80]	; (401a9c <prvNotifyQueueSetContainer+0x5c>)
  401a4c:	4798      	blx	r3
  401a4e:	e7fe      	b.n	401a4e <prvNotifyQueueSetContainer+0xe>
  401a50:	460a      	mov	r2, r1
		configASSERT( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength );
  401a52:	6ba1      	ldr	r1, [r4, #56]	; 0x38
  401a54:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  401a56:	4299      	cmp	r1, r3
  401a58:	d302      	bcc.n	401a60 <prvNotifyQueueSetContainer+0x20>
  401a5a:	4b10      	ldr	r3, [pc, #64]	; (401a9c <prvNotifyQueueSetContainer+0x5c>)
  401a5c:	4798      	blx	r3
  401a5e:	e7fe      	b.n	401a5e <prvNotifyQueueSetContainer+0x1e>

		if( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength )
  401a60:	6ba1      	ldr	r1, [r4, #56]	; 0x38
  401a62:	428b      	cmp	r3, r1
  401a64:	d916      	bls.n	401a94 <prvNotifyQueueSetContainer+0x54>
		{
			traceQUEUE_SEND( pxQueueSetContainer );

			/* The data copied is the handle of the queue that contains data. */
			xReturn = prvCopyDataToQueue( pxQueueSetContainer, &pxQueue, xCopyPosition );
  401a66:	4620      	mov	r0, r4
  401a68:	a901      	add	r1, sp, #4
  401a6a:	4b0d      	ldr	r3, [pc, #52]	; (401aa0 <prvNotifyQueueSetContainer+0x60>)
  401a6c:	4798      	blx	r3
  401a6e:	4605      	mov	r5, r0

			if( pxQueueSetContainer->xTxLock == queueUNLOCKED )
  401a70:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  401a72:	f1b3 3fff 	cmp.w	r3, #4294967295
  401a76:	d109      	bne.n	401a8c <prvNotifyQueueSetContainer+0x4c>
			{
				if( listLIST_IS_EMPTY( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) == pdFALSE )
  401a78:	6a63      	ldr	r3, [r4, #36]	; 0x24
  401a7a:	b163      	cbz	r3, 401a96 <prvNotifyQueueSetContainer+0x56>
				{
					if( xTaskRemoveFromEventList( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) != pdFALSE )
  401a7c:	f104 0024 	add.w	r0, r4, #36	; 0x24
  401a80:	4b08      	ldr	r3, [pc, #32]	; (401aa4 <prvNotifyQueueSetContainer+0x64>)
  401a82:	4798      	blx	r3
  401a84:	2800      	cmp	r0, #0
					{
						/* The task waiting has a higher priority. */
						xReturn = pdTRUE;
  401a86:	bf18      	it	ne
  401a88:	2501      	movne	r5, #1
  401a8a:	e004      	b.n	401a96 <prvNotifyQueueSetContainer+0x56>
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else
			{
				( pxQueueSetContainer->xTxLock )++;
  401a8c:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  401a8e:	3301      	adds	r3, #1
  401a90:	64a3      	str	r3, [r4, #72]	; 0x48
  401a92:	e000      	b.n	401a96 <prvNotifyQueueSetContainer+0x56>
#if ( configUSE_QUEUE_SETS == 1 )

	static BaseType_t prvNotifyQueueSetContainer( const Queue_t * const pxQueue, const BaseType_t xCopyPosition )
	{
	Queue_t *pxQueueSetContainer = pxQueue->pxQueueSetContainer;
	BaseType_t xReturn = pdFALSE;
  401a94:	2500      	movs	r5, #0
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
	}
  401a96:	4628      	mov	r0, r5
  401a98:	b003      	add	sp, #12
  401a9a:	bd30      	pop	{r4, r5, pc}
  401a9c:	00401571 	.word	0x00401571
  401aa0:	004019bd 	.word	0x004019bd
  401aa4:	00402901 	.word	0x00402901

00401aa8 <prvCopyDataFromQueue>:
}
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
  401aa8:	6c02      	ldr	r2, [r0, #64]	; 0x40
  401aaa:	b172      	cbz	r2, 401aca <prvCopyDataFromQueue+0x22>
	return xReturn;
}
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
  401aac:	b510      	push	{r4, lr}
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
  401aae:	68c3      	ldr	r3, [r0, #12]
  401ab0:	4413      	add	r3, r2
  401ab2:	60c3      	str	r3, [r0, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
  401ab4:	6844      	ldr	r4, [r0, #4]
  401ab6:	42a3      	cmp	r3, r4
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
  401ab8:	bf24      	itt	cs
  401aba:	6803      	ldrcs	r3, [r0, #0]
  401abc:	60c3      	strcs	r3, [r0, #12]
  401abe:	4603      	mov	r3, r0
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
  401ac0:	4608      	mov	r0, r1
  401ac2:	68d9      	ldr	r1, [r3, #12]
  401ac4:	4b01      	ldr	r3, [pc, #4]	; (401acc <prvCopyDataFromQueue+0x24>)
  401ac6:	4798      	blx	r3
  401ac8:	bd10      	pop	{r4, pc}
  401aca:	4770      	bx	lr
  401acc:	00409125 	.word	0x00409125

00401ad0 <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
  401ad0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  401ad2:	4604      	mov	r4, r0

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
  401ad4:	4b20      	ldr	r3, [pc, #128]	; (401b58 <prvUnlockQueue+0x88>)
  401ad6:	4798      	blx	r3
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
  401ad8:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  401ada:	2b00      	cmp	r3, #0
  401adc:	dd18      	ble.n	401b10 <prvUnlockQueue+0x40>
			blocked waiting for data to become available? */
			#if ( configUSE_QUEUE_SETS == 1 )
			{
				if( pxQueue->pxQueueSetContainer != NULL )
				{
					if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) == pdTRUE )
  401ade:	4d1f      	ldr	r5, [pc, #124]	; (401b5c <prvUnlockQueue+0x8c>)
					{
						/* The queue is a member of a queue set, and posting to
						the queue set caused a higher priority task to unblock.
						A context switch is required. */
						vTaskMissedYield();
  401ae0:	4f1f      	ldr	r7, [pc, #124]	; (401b60 <prvUnlockQueue+0x90>)
				{
					/* Tasks that are removed from the event list will get added to
					the pending ready list as the scheduler is still suspended. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  401ae2:	4e20      	ldr	r6, [pc, #128]	; (401b64 <prvUnlockQueue+0x94>)
		{
			/* Data was posted while the queue was locked.  Are any tasks
			blocked waiting for data to become available? */
			#if ( configUSE_QUEUE_SETS == 1 )
			{
				if( pxQueue->pxQueueSetContainer != NULL )
  401ae4:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
  401ae6:	b133      	cbz	r3, 401af6 <prvUnlockQueue+0x26>
				{
					if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) == pdTRUE )
  401ae8:	4620      	mov	r0, r4
  401aea:	2100      	movs	r1, #0
  401aec:	47a8      	blx	r5
  401aee:	2801      	cmp	r0, #1
  401af0:	d108      	bne.n	401b04 <prvUnlockQueue+0x34>
					{
						/* The queue is a member of a queue set, and posting to
						the queue set caused a higher priority task to unblock.
						A context switch is required. */
						vTaskMissedYield();
  401af2:	47b8      	blx	r7
  401af4:	e006      	b.n	401b04 <prvUnlockQueue+0x34>
				}
				else
				{
					/* Tasks that are removed from the event list will get added to
					the pending ready list as the scheduler is still suspended. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  401af6:	6a63      	ldr	r3, [r4, #36]	; 0x24
  401af8:	b153      	cbz	r3, 401b10 <prvUnlockQueue+0x40>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  401afa:	f104 0024 	add.w	r0, r4, #36	; 0x24
  401afe:	47b0      	blx	r6
  401b00:	b100      	cbz	r0, 401b04 <prvUnlockQueue+0x34>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							vTaskMissedYield();
  401b02:	47b8      	blx	r7
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--( pxQueue->xTxLock );
  401b04:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  401b06:	3b01      	subs	r3, #1
  401b08:	64a3      	str	r3, [r4, #72]	; 0x48
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
  401b0a:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  401b0c:	2b00      	cmp	r3, #0
  401b0e:	dce9      	bgt.n	401ae4 <prvUnlockQueue+0x14>
			#endif /* configUSE_QUEUE_SETS */

			--( pxQueue->xTxLock );
		}

		pxQueue->xTxLock = queueUNLOCKED;
  401b10:	f04f 33ff 	mov.w	r3, #4294967295
  401b14:	64a3      	str	r3, [r4, #72]	; 0x48
	}
	taskEXIT_CRITICAL();
  401b16:	4b14      	ldr	r3, [pc, #80]	; (401b68 <prvUnlockQueue+0x98>)
  401b18:	4798      	blx	r3

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
  401b1a:	4b0f      	ldr	r3, [pc, #60]	; (401b58 <prvUnlockQueue+0x88>)
  401b1c:	4798      	blx	r3
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
  401b1e:	6c63      	ldr	r3, [r4, #68]	; 0x44
  401b20:	2b00      	cmp	r3, #0
  401b22:	dd13      	ble.n	401b4c <prvUnlockQueue+0x7c>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
  401b24:	6923      	ldr	r3, [r4, #16]
  401b26:	b91b      	cbnz	r3, 401b30 <prvUnlockQueue+0x60>
  401b28:	e010      	b.n	401b4c <prvUnlockQueue+0x7c>
  401b2a:	6923      	ldr	r3, [r4, #16]
  401b2c:	b923      	cbnz	r3, 401b38 <prvUnlockQueue+0x68>
  401b2e:	e00d      	b.n	401b4c <prvUnlockQueue+0x7c>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
  401b30:	f104 0610 	add.w	r6, r4, #16
  401b34:	4d0b      	ldr	r5, [pc, #44]	; (401b64 <prvUnlockQueue+0x94>)
				{
					vTaskMissedYield();
  401b36:	4f0a      	ldr	r7, [pc, #40]	; (401b60 <prvUnlockQueue+0x90>)
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
  401b38:	4630      	mov	r0, r6
  401b3a:	47a8      	blx	r5
  401b3c:	b100      	cbz	r0, 401b40 <prvUnlockQueue+0x70>
				{
					vTaskMissedYield();
  401b3e:	47b8      	blx	r7
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--( pxQueue->xRxLock );
  401b40:	6c63      	ldr	r3, [r4, #68]	; 0x44
  401b42:	3b01      	subs	r3, #1
  401b44:	6463      	str	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
  401b46:	6c63      	ldr	r3, [r4, #68]	; 0x44
  401b48:	2b00      	cmp	r3, #0
  401b4a:	dcee      	bgt.n	401b2a <prvUnlockQueue+0x5a>
			{
				break;
			}
		}

		pxQueue->xRxLock = queueUNLOCKED;
  401b4c:	f04f 33ff 	mov.w	r3, #4294967295
  401b50:	6463      	str	r3, [r4, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
  401b52:	4b05      	ldr	r3, [pc, #20]	; (401b68 <prvUnlockQueue+0x98>)
  401b54:	4798      	blx	r3
  401b56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  401b58:	004015a1 	.word	0x004015a1
  401b5c:	00401a41 	.word	0x00401a41
  401b60:	00402a25 	.word	0x00402a25
  401b64:	00402901 	.word	0x00402901
  401b68:	004015e1 	.word	0x004015e1

00401b6c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
  401b6c:	b538      	push	{r3, r4, r5, lr}
Queue_t * const pxQueue = ( Queue_t * ) xQueue;

	configASSERT( pxQueue );
  401b6e:	b910      	cbnz	r0, 401b76 <xQueueGenericReset+0xa>
  401b70:	4b17      	ldr	r3, [pc, #92]	; (401bd0 <xQueueGenericReset+0x64>)
  401b72:	4798      	blx	r3
  401b74:	e7fe      	b.n	401b74 <xQueueGenericReset+0x8>
  401b76:	460d      	mov	r5, r1
  401b78:	4604      	mov	r4, r0

	taskENTER_CRITICAL();
  401b7a:	4b16      	ldr	r3, [pc, #88]	; (401bd4 <xQueueGenericReset+0x68>)
  401b7c:	4798      	blx	r3
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
  401b7e:	6822      	ldr	r2, [r4, #0]
  401b80:	6c21      	ldr	r1, [r4, #64]	; 0x40
  401b82:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  401b84:	fb03 f301 	mul.w	r3, r3, r1
  401b88:	18d0      	adds	r0, r2, r3
  401b8a:	6060      	str	r0, [r4, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
  401b8c:	2000      	movs	r0, #0
  401b8e:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
  401b90:	60a2      	str	r2, [r4, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
  401b92:	1a5b      	subs	r3, r3, r1
  401b94:	4413      	add	r3, r2
  401b96:	60e3      	str	r3, [r4, #12]
		pxQueue->xRxLock = queueUNLOCKED;
  401b98:	f04f 33ff 	mov.w	r3, #4294967295
  401b9c:	6463      	str	r3, [r4, #68]	; 0x44
		pxQueue->xTxLock = queueUNLOCKED;
  401b9e:	64a3      	str	r3, [r4, #72]	; 0x48

		if( xNewQueue == pdFALSE )
  401ba0:	b955      	cbnz	r5, 401bb8 <xQueueGenericReset+0x4c>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
  401ba2:	6923      	ldr	r3, [r4, #16]
  401ba4:	b17b      	cbz	r3, 401bc6 <xQueueGenericReset+0x5a>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
  401ba6:	f104 0010 	add.w	r0, r4, #16
  401baa:	4b0b      	ldr	r3, [pc, #44]	; (401bd8 <xQueueGenericReset+0x6c>)
  401bac:	4798      	blx	r3
  401bae:	2801      	cmp	r0, #1
  401bb0:	d109      	bne.n	401bc6 <xQueueGenericReset+0x5a>
				{
					queueYIELD_IF_USING_PREEMPTION();
  401bb2:	4b0a      	ldr	r3, [pc, #40]	; (401bdc <xQueueGenericReset+0x70>)
  401bb4:	4798      	blx	r3
  401bb6:	e006      	b.n	401bc6 <xQueueGenericReset+0x5a>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
  401bb8:	f104 0010 	add.w	r0, r4, #16
  401bbc:	4d08      	ldr	r5, [pc, #32]	; (401be0 <xQueueGenericReset+0x74>)
  401bbe:	47a8      	blx	r5
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
  401bc0:	f104 0024 	add.w	r0, r4, #36	; 0x24
  401bc4:	47a8      	blx	r5
		}
	}
	taskEXIT_CRITICAL();
  401bc6:	4b07      	ldr	r3, [pc, #28]	; (401be4 <xQueueGenericReset+0x78>)
  401bc8:	4798      	blx	r3

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
}
  401bca:	2001      	movs	r0, #1
  401bcc:	bd38      	pop	{r3, r4, r5, pc}
  401bce:	bf00      	nop
  401bd0:	00401571 	.word	0x00401571
  401bd4:	004015a1 	.word	0x004015a1
  401bd8:	00402901 	.word	0x00402901
  401bdc:	00401559 	.word	0x00401559
  401be0:	00401465 	.word	0x00401465
  401be4:	004015e1 	.word	0x004015e1

00401be8 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
{
  401be8:	b570      	push	{r4, r5, r6, lr}

	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
  401bea:	b910      	cbnz	r0, 401bf2 <xQueueGenericCreate+0xa>
  401bec:	4b13      	ldr	r3, [pc, #76]	; (401c3c <xQueueGenericCreate+0x54>)
  401bee:	4798      	blx	r3
  401bf0:	e7fe      	b.n	401bf0 <xQueueGenericCreate+0x8>
  401bf2:	460d      	mov	r5, r1
  401bf4:	4606      	mov	r6, r0

	if( uxItemSize == ( UBaseType_t ) 0 )
  401bf6:	b181      	cbz	r1, 401c1a <xQueueGenericCreate+0x32>
	}
	else
	{
		/* The queue is one byte longer than asked for to make wrap checking
		easier/faster. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ) + ( size_t ) 1; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  401bf8:	fb01 f000 	mul.w	r0, r1, r0
	}

	/* Allocate the new queue structure and storage area. */
	pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
  401bfc:	3051      	adds	r0, #81	; 0x51
  401bfe:	4b10      	ldr	r3, [pc, #64]	; (401c40 <xQueueGenericCreate+0x58>)
  401c00:	4798      	blx	r3

	if( pxNewQueue != NULL )
  401c02:	4604      	mov	r4, r0
  401c04:	b910      	cbnz	r0, 401c0c <xQueueGenericCreate+0x24>
  401c06:	e005      	b.n	401c14 <xQueueGenericCreate+0x2c>
		{
			/* No RAM was allocated for the queue storage area, but PC head
			cannot be set to NULL because NULL is used as a key to say the queue
			is used as a mutex.  Therefore just set pcHead to point to the queue
			as a benign value that is known to be within the memory map. */
			pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
  401c08:	6024      	str	r4, [r4, #0]
  401c0a:	e00d      	b.n	401c28 <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pxNewQueue->pcHead = ( ( int8_t * ) pxNewQueue ) + sizeof( Queue_t );
  401c0c:	f100 0350 	add.w	r3, r0, #80	; 0x50
  401c10:	6003      	str	r3, [r0, #0]
  401c12:	e009      	b.n	401c28 <xQueueGenericCreate+0x40>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
  401c14:	4b09      	ldr	r3, [pc, #36]	; (401c3c <xQueueGenericCreate+0x54>)
  401c16:	4798      	blx	r3
  401c18:	e7fe      	b.n	401c18 <xQueueGenericCreate+0x30>
		easier/faster. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ) + ( size_t ) 1; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
	}

	/* Allocate the new queue structure and storage area. */
	pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
  401c1a:	2050      	movs	r0, #80	; 0x50
  401c1c:	4b08      	ldr	r3, [pc, #32]	; (401c40 <xQueueGenericCreate+0x58>)
  401c1e:	4798      	blx	r3

	if( pxNewQueue != NULL )
  401c20:	4604      	mov	r4, r0
  401c22:	2800      	cmp	r0, #0
  401c24:	d1f0      	bne.n	401c08 <xQueueGenericCreate+0x20>
  401c26:	e7f5      	b.n	401c14 <xQueueGenericCreate+0x2c>
			pxNewQueue->pcHead = ( ( int8_t * ) pxNewQueue ) + sizeof( Queue_t );
		}

		/* Initialise the queue members as described above where the queue type
		is defined. */
		pxNewQueue->uxLength = uxQueueLength;
  401c28:	63e6      	str	r6, [r4, #60]	; 0x3c
		pxNewQueue->uxItemSize = uxItemSize;
  401c2a:	6425      	str	r5, [r4, #64]	; 0x40
		( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
  401c2c:	4620      	mov	r0, r4
  401c2e:	2101      	movs	r1, #1
  401c30:	4b04      	ldr	r3, [pc, #16]	; (401c44 <xQueueGenericCreate+0x5c>)
  401c32:	4798      	blx	r3
		}
		#endif /* configUSE_TRACE_FACILITY */

		#if( configUSE_QUEUE_SETS == 1 )
		{
			pxNewQueue->pxQueueSetContainer = NULL;
  401c34:	2300      	movs	r3, #0
  401c36:	64e3      	str	r3, [r4, #76]	; 0x4c
	}

	configASSERT( xReturn );

	return xReturn;
}
  401c38:	4620      	mov	r0, r4
  401c3a:	bd70      	pop	{r4, r5, r6, pc}
  401c3c:	00401571 	.word	0x00401571
  401c40:	004017fd 	.word	0x004017fd
  401c44:	00401b6d 	.word	0x00401b6d

00401c48 <xQueueGenericSend>:

#endif /* configUSE_COUNTING_SEMAPHORES */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
  401c48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  401c4c:	b085      	sub	sp, #20
  401c4e:	9100      	str	r1, [sp, #0]
  401c50:	9201      	str	r2, [sp, #4]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;

	configASSERT( pxQueue );
  401c52:	b910      	cbnz	r0, 401c5a <xQueueGenericSend+0x12>
  401c54:	4b4b      	ldr	r3, [pc, #300]	; (401d84 <xQueueGenericSend+0x13c>)
  401c56:	4798      	blx	r3
  401c58:	e7fe      	b.n	401c58 <xQueueGenericSend+0x10>
  401c5a:	461d      	mov	r5, r3
  401c5c:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
  401c5e:	9b00      	ldr	r3, [sp, #0]
  401c60:	b923      	cbnz	r3, 401c6c <xQueueGenericSend+0x24>
  401c62:	6c03      	ldr	r3, [r0, #64]	; 0x40
  401c64:	b113      	cbz	r3, 401c6c <xQueueGenericSend+0x24>
  401c66:	4b47      	ldr	r3, [pc, #284]	; (401d84 <xQueueGenericSend+0x13c>)
  401c68:	4798      	blx	r3
  401c6a:	e7fe      	b.n	401c6a <xQueueGenericSend+0x22>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
  401c6c:	2d02      	cmp	r5, #2
  401c6e:	d105      	bne.n	401c7c <xQueueGenericSend+0x34>
  401c70:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  401c72:	2b01      	cmp	r3, #1
  401c74:	d002      	beq.n	401c7c <xQueueGenericSend+0x34>
  401c76:	4b43      	ldr	r3, [pc, #268]	; (401d84 <xQueueGenericSend+0x13c>)
  401c78:	4798      	blx	r3
  401c7a:	e7fe      	b.n	401c7a <xQueueGenericSend+0x32>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
  401c7c:	4b42      	ldr	r3, [pc, #264]	; (401d88 <xQueueGenericSend+0x140>)
  401c7e:	4798      	blx	r3
  401c80:	b920      	cbnz	r0, 401c8c <xQueueGenericSend+0x44>
  401c82:	9b01      	ldr	r3, [sp, #4]
  401c84:	b12b      	cbz	r3, 401c92 <xQueueGenericSend+0x4a>
  401c86:	4b3f      	ldr	r3, [pc, #252]	; (401d84 <xQueueGenericSend+0x13c>)
  401c88:	4798      	blx	r3
  401c8a:	e7fe      	b.n	401c8a <xQueueGenericSend+0x42>
  401c8c:	f04f 0800 	mov.w	r8, #0
  401c90:	e001      	b.n	401c96 <xQueueGenericSend+0x4e>
  401c92:	f04f 0800 	mov.w	r8, #0
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
  401c96:	4f3d      	ldr	r7, [pc, #244]	; (401d8c <xQueueGenericSend+0x144>)
				}
				else if( xEntryTimeSet == pdFALSE )
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
  401c98:	f8df 911c 	ldr.w	r9, [pc, #284]	; 401db8 <xQueueGenericSend+0x170>
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
  401c9c:	4e3c      	ldr	r6, [pc, #240]	; (401d90 <xQueueGenericSend+0x148>)
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
  401c9e:	47b8      	blx	r7
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
  401ca0:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  401ca2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  401ca4:	429a      	cmp	r2, r3
  401ca6:	d301      	bcc.n	401cac <xQueueGenericSend+0x64>
  401ca8:	2d02      	cmp	r5, #2
  401caa:	d121      	bne.n	401cf0 <xQueueGenericSend+0xa8>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
  401cac:	4620      	mov	r0, r4
  401cae:	9900      	ldr	r1, [sp, #0]
  401cb0:	462a      	mov	r2, r5
  401cb2:	4b38      	ldr	r3, [pc, #224]	; (401d94 <xQueueGenericSend+0x14c>)
  401cb4:	4798      	blx	r3

				#if ( configUSE_QUEUE_SETS == 1 )
				{
					if( pxQueue->pxQueueSetContainer != NULL )
  401cb6:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
  401cb8:	b143      	cbz	r3, 401ccc <xQueueGenericSend+0x84>
					{
						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) == pdTRUE )
  401cba:	4620      	mov	r0, r4
  401cbc:	4629      	mov	r1, r5
  401cbe:	4b36      	ldr	r3, [pc, #216]	; (401d98 <xQueueGenericSend+0x150>)
  401cc0:	4798      	blx	r3
  401cc2:	2801      	cmp	r0, #1
  401cc4:	d110      	bne.n	401ce8 <xQueueGenericSend+0xa0>
						{
							/* The queue is a member of a queue set, and posting
							to the queue set caused a higher priority task to
							unblock. A context switch is required. */
							queueYIELD_IF_USING_PREEMPTION();
  401cc6:	4b35      	ldr	r3, [pc, #212]	; (401d9c <xQueueGenericSend+0x154>)
  401cc8:	4798      	blx	r3
  401cca:	e00d      	b.n	401ce8 <xQueueGenericSend+0xa0>
					}
					else
					{
						/* If there was a task waiting for data to arrive on the
						queue then unblock it now. */
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  401ccc:	6a63      	ldr	r3, [r4, #36]	; 0x24
  401cce:	b143      	cbz	r3, 401ce2 <xQueueGenericSend+0x9a>
						{
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) == pdTRUE )
  401cd0:	f104 0024 	add.w	r0, r4, #36	; 0x24
  401cd4:	4b32      	ldr	r3, [pc, #200]	; (401da0 <xQueueGenericSend+0x158>)
  401cd6:	4798      	blx	r3
  401cd8:	2801      	cmp	r0, #1
  401cda:	d105      	bne.n	401ce8 <xQueueGenericSend+0xa0>
							{
								/* The unblocked task has a priority higher than
								our own so yield immediately.  Yes it is ok to
								do this from within the critical section - the
								kernel takes care of that. */
								queueYIELD_IF_USING_PREEMPTION();
  401cdc:	4b2f      	ldr	r3, [pc, #188]	; (401d9c <xQueueGenericSend+0x154>)
  401cde:	4798      	blx	r3
  401ce0:	e002      	b.n	401ce8 <xQueueGenericSend+0xa0>
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
						}
						else if( xYieldRequired != pdFALSE )
  401ce2:	b108      	cbz	r0, 401ce8 <xQueueGenericSend+0xa0>
						{
							/* This path is a special case that will only get
							executed if the task was holding multiple mutexes
							and the mutexes were given back in an order that is
							different to that in which they were taken. */
							queueYIELD_IF_USING_PREEMPTION();
  401ce4:	4b2d      	ldr	r3, [pc, #180]	; (401d9c <xQueueGenericSend+0x154>)
  401ce6:	4798      	blx	r3
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
  401ce8:	4b29      	ldr	r3, [pc, #164]	; (401d90 <xQueueGenericSend+0x148>)
  401cea:	4798      	blx	r3
				return pdPASS;
  401cec:	2001      	movs	r0, #1
  401cee:	e045      	b.n	401d7c <xQueueGenericSend+0x134>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
  401cf0:	9b01      	ldr	r3, [sp, #4]
  401cf2:	b91b      	cbnz	r3, 401cfc <xQueueGenericSend+0xb4>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
  401cf4:	4b26      	ldr	r3, [pc, #152]	; (401d90 <xQueueGenericSend+0x148>)
  401cf6:	4798      	blx	r3

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
  401cf8:	2000      	movs	r0, #0
  401cfa:	e03f      	b.n	401d7c <xQueueGenericSend+0x134>
				}
				else if( xEntryTimeSet == pdFALSE )
  401cfc:	f1b8 0f00 	cmp.w	r8, #0
  401d00:	d103      	bne.n	401d0a <xQueueGenericSend+0xc2>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
  401d02:	a802      	add	r0, sp, #8
  401d04:	47c8      	blx	r9
					xEntryTimeSet = pdTRUE;
  401d06:	f04f 0801 	mov.w	r8, #1
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
  401d0a:	47b0      	blx	r6

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
  401d0c:	4b25      	ldr	r3, [pc, #148]	; (401da4 <xQueueGenericSend+0x15c>)
  401d0e:	4798      	blx	r3
		prvLockQueue( pxQueue );
  401d10:	47b8      	blx	r7
  401d12:	6c63      	ldr	r3, [r4, #68]	; 0x44
  401d14:	f1b3 3fff 	cmp.w	r3, #4294967295
  401d18:	bf04      	itt	eq
  401d1a:	2300      	moveq	r3, #0
  401d1c:	6463      	streq	r3, [r4, #68]	; 0x44
  401d1e:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  401d20:	f1b3 3fff 	cmp.w	r3, #4294967295
  401d24:	bf04      	itt	eq
  401d26:	2300      	moveq	r3, #0
  401d28:	64a3      	streq	r3, [r4, #72]	; 0x48
  401d2a:	47b0      	blx	r6

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
  401d2c:	a802      	add	r0, sp, #8
  401d2e:	a901      	add	r1, sp, #4
  401d30:	4b1d      	ldr	r3, [pc, #116]	; (401da8 <xQueueGenericSend+0x160>)
  401d32:	4798      	blx	r3
  401d34:	b9e0      	cbnz	r0, 401d70 <xQueueGenericSend+0x128>

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
  401d36:	47b8      	blx	r7
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
  401d38:	f8d4 b038 	ldr.w	fp, [r4, #56]	; 0x38
  401d3c:	f8d4 a03c 	ldr.w	sl, [r4, #60]	; 0x3c
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
  401d40:	47b0      	blx	r6
		prvLockQueue( pxQueue );

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
  401d42:	45d3      	cmp	fp, sl
  401d44:	d10e      	bne.n	401d64 <xQueueGenericSend+0x11c>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
  401d46:	f104 0010 	add.w	r0, r4, #16
  401d4a:	9901      	ldr	r1, [sp, #4]
  401d4c:	4b17      	ldr	r3, [pc, #92]	; (401dac <xQueueGenericSend+0x164>)
  401d4e:	4798      	blx	r3
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible	that interrupts occurring now
				remove this task from the event	list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
  401d50:	4620      	mov	r0, r4
  401d52:	4b17      	ldr	r3, [pc, #92]	; (401db0 <xQueueGenericSend+0x168>)
  401d54:	4798      	blx	r3
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
  401d56:	4b17      	ldr	r3, [pc, #92]	; (401db4 <xQueueGenericSend+0x16c>)
  401d58:	4798      	blx	r3
  401d5a:	2800      	cmp	r0, #0
  401d5c:	d19f      	bne.n	401c9e <xQueueGenericSend+0x56>
				{
					portYIELD_WITHIN_API();
  401d5e:	4b0f      	ldr	r3, [pc, #60]	; (401d9c <xQueueGenericSend+0x154>)
  401d60:	4798      	blx	r3
  401d62:	e79c      	b.n	401c9e <xQueueGenericSend+0x56>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
  401d64:	4620      	mov	r0, r4
  401d66:	4b12      	ldr	r3, [pc, #72]	; (401db0 <xQueueGenericSend+0x168>)
  401d68:	4798      	blx	r3
				( void ) xTaskResumeAll();
  401d6a:	4b12      	ldr	r3, [pc, #72]	; (401db4 <xQueueGenericSend+0x16c>)
  401d6c:	4798      	blx	r3
  401d6e:	e796      	b.n	401c9e <xQueueGenericSend+0x56>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
  401d70:	4620      	mov	r0, r4
  401d72:	4b0f      	ldr	r3, [pc, #60]	; (401db0 <xQueueGenericSend+0x168>)
  401d74:	4798      	blx	r3
			( void ) xTaskResumeAll();
  401d76:	4b0f      	ldr	r3, [pc, #60]	; (401db4 <xQueueGenericSend+0x16c>)
  401d78:	4798      	blx	r3

			/* Return to the original privilege level before exiting the
			function. */
			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
  401d7a:	2000      	movs	r0, #0
		}
	}
}
  401d7c:	b005      	add	sp, #20
  401d7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  401d82:	bf00      	nop
  401d84:	00401571 	.word	0x00401571
  401d88:	00402a31 	.word	0x00402a31
  401d8c:	004015a1 	.word	0x004015a1
  401d90:	004015e1 	.word	0x004015e1
  401d94:	004019bd 	.word	0x004019bd
  401d98:	00401a41 	.word	0x00401a41
  401d9c:	00401559 	.word	0x00401559
  401da0:	00402901 	.word	0x00402901
  401da4:	004023f9 	.word	0x004023f9
  401da8:	004029ad 	.word	0x004029ad
  401dac:	00402815 	.word	0x00402815
  401db0:	00401ad1 	.word	0x00401ad1
  401db4:	00402551 	.word	0x00402551
  401db8:	00402989 	.word	0x00402989

00401dbc <xQueueGenericSendFromISR>:

#endif /* configUSE_ALTERNATIVE_API */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
  401dbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;

	configASSERT( pxQueue );
  401dc0:	b910      	cbnz	r0, 401dc8 <xQueueGenericSendFromISR+0xc>
  401dc2:	4b2d      	ldr	r3, [pc, #180]	; (401e78 <xQueueGenericSendFromISR+0xbc>)
  401dc4:	4798      	blx	r3
  401dc6:	e7fe      	b.n	401dc6 <xQueueGenericSendFromISR+0xa>
  401dc8:	4688      	mov	r8, r1
  401dca:	4615      	mov	r5, r2
  401dcc:	461e      	mov	r6, r3
  401dce:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
  401dd0:	b921      	cbnz	r1, 401ddc <xQueueGenericSendFromISR+0x20>
  401dd2:	6c03      	ldr	r3, [r0, #64]	; 0x40
  401dd4:	b113      	cbz	r3, 401ddc <xQueueGenericSendFromISR+0x20>
  401dd6:	4b28      	ldr	r3, [pc, #160]	; (401e78 <xQueueGenericSendFromISR+0xbc>)
  401dd8:	4798      	blx	r3
  401dda:	e7fe      	b.n	401dda <xQueueGenericSendFromISR+0x1e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
  401ddc:	2e02      	cmp	r6, #2
  401dde:	d13b      	bne.n	401e58 <xQueueGenericSendFromISR+0x9c>
  401de0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  401de2:	2b01      	cmp	r3, #1
  401de4:	d031      	beq.n	401e4a <xQueueGenericSendFromISR+0x8e>
  401de6:	4b24      	ldr	r3, [pc, #144]	; (401e78 <xQueueGenericSendFromISR+0xbc>)
  401de8:	4798      	blx	r3
  401dea:	e7fe      	b.n	401dea <xQueueGenericSendFromISR+0x2e>
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
  401dec:	4620      	mov	r0, r4
  401dee:	4641      	mov	r1, r8
  401df0:	4632      	mov	r2, r6
  401df2:	4b22      	ldr	r3, [pc, #136]	; (401e7c <xQueueGenericSendFromISR+0xc0>)
  401df4:	4798      	blx	r3

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( pxQueue->xTxLock == queueUNLOCKED )
  401df6:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  401df8:	f1b3 3fff 	cmp.w	r3, #4294967295
  401dfc:	d116      	bne.n	401e2c <xQueueGenericSendFromISR+0x70>
			{
				#if ( configUSE_QUEUE_SETS == 1 )
				{
					if( pxQueue->pxQueueSetContainer != NULL )
  401dfe:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
  401e00:	b14b      	cbz	r3, 401e16 <xQueueGenericSendFromISR+0x5a>
					{
						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) == pdTRUE )
  401e02:	4620      	mov	r0, r4
  401e04:	4631      	mov	r1, r6
  401e06:	4b1e      	ldr	r3, [pc, #120]	; (401e80 <xQueueGenericSendFromISR+0xc4>)
  401e08:	4798      	blx	r3
  401e0a:	2801      	cmp	r0, #1
  401e0c:	d113      	bne.n	401e36 <xQueueGenericSendFromISR+0x7a>
						{
							/* The queue is a member of a queue set, and posting
							to the queue set caused a higher priority task to
							unblock.  A context switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
  401e0e:	b1a5      	cbz	r5, 401e3a <xQueueGenericSendFromISR+0x7e>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
  401e10:	2401      	movs	r4, #1
  401e12:	602c      	str	r4, [r5, #0]
  401e14:	e02a      	b.n	401e6c <xQueueGenericSendFromISR+0xb0>
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else
					{
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  401e16:	6a63      	ldr	r3, [r4, #36]	; 0x24
  401e18:	b18b      	cbz	r3, 401e3e <xQueueGenericSendFromISR+0x82>
						{
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  401e1a:	f104 0024 	add.w	r0, r4, #36	; 0x24
  401e1e:	4b19      	ldr	r3, [pc, #100]	; (401e84 <xQueueGenericSendFromISR+0xc8>)
  401e20:	4798      	blx	r3
  401e22:	b170      	cbz	r0, 401e42 <xQueueGenericSendFromISR+0x86>
							{
								/* The task waiting has a higher priority so
								record that a context switch is required. */
								if( pxHigherPriorityTaskWoken != NULL )
  401e24:	b17d      	cbz	r5, 401e46 <xQueueGenericSendFromISR+0x8a>
								{
									*pxHigherPriorityTaskWoken = pdTRUE;
  401e26:	2401      	movs	r4, #1
  401e28:	602c      	str	r4, [r5, #0]
  401e2a:	e01f      	b.n	401e6c <xQueueGenericSendFromISR+0xb0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				++( pxQueue->xTxLock );
  401e2c:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  401e2e:	3301      	adds	r3, #1
  401e30:	64a3      	str	r3, [r4, #72]	; 0x48
			}

			xReturn = pdPASS;
  401e32:	2401      	movs	r4, #1
  401e34:	e01a      	b.n	401e6c <xQueueGenericSendFromISR+0xb0>
  401e36:	2401      	movs	r4, #1
  401e38:	e018      	b.n	401e6c <xQueueGenericSendFromISR+0xb0>
  401e3a:	2401      	movs	r4, #1
  401e3c:	e016      	b.n	401e6c <xQueueGenericSendFromISR+0xb0>
  401e3e:	2401      	movs	r4, #1
  401e40:	e014      	b.n	401e6c <xQueueGenericSendFromISR+0xb0>
  401e42:	2401      	movs	r4, #1
  401e44:	e012      	b.n	401e6c <xQueueGenericSendFromISR+0xb0>
  401e46:	2401      	movs	r4, #1
  401e48:	e010      	b.n	401e6c <xQueueGenericSendFromISR+0xb0>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
  401e4a:	4b0f      	ldr	r3, [pc, #60]	; (401e88 <xQueueGenericSendFromISR+0xcc>)
  401e4c:	4798      	blx	r3
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
  401e4e:	4b0a      	ldr	r3, [pc, #40]	; (401e78 <xQueueGenericSendFromISR+0xbc>)
  401e50:	4798      	blx	r3
  401e52:	4607      	mov	r7, r0
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
  401e54:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  401e56:	e7c9      	b.n	401dec <xQueueGenericSendFromISR+0x30>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
  401e58:	4b0b      	ldr	r3, [pc, #44]	; (401e88 <xQueueGenericSendFromISR+0xcc>)
  401e5a:	4798      	blx	r3
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
  401e5c:	4b06      	ldr	r3, [pc, #24]	; (401e78 <xQueueGenericSendFromISR+0xbc>)
  401e5e:	4798      	blx	r3
  401e60:	4607      	mov	r7, r0
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
  401e62:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  401e64:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  401e66:	429a      	cmp	r2, r3
  401e68:	d3c0      	bcc.n	401dec <xQueueGenericSendFromISR+0x30>
			xReturn = pdPASS;
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
  401e6a:	2400      	movs	r4, #0
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
  401e6c:	4638      	mov	r0, r7
  401e6e:	4b07      	ldr	r3, [pc, #28]	; (401e8c <xQueueGenericSendFromISR+0xd0>)
  401e70:	4798      	blx	r3

	return xReturn;
}
  401e72:	4620      	mov	r0, r4
  401e74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  401e78:	00401571 	.word	0x00401571
  401e7c:	004019bd 	.word	0x004019bd
  401e80:	00401a41 	.word	0x00401a41
  401e84:	00402901 	.word	0x00402901
  401e88:	00401759 	.word	0x00401759
  401e8c:	004015d9 	.word	0x004015d9

00401e90 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
  401e90:	b570      	push	{r4, r5, r6, lr}
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
  401e92:	b910      	cbnz	r0, 401e9a <xQueueGiveFromISR+0xa>
  401e94:	4b26      	ldr	r3, [pc, #152]	; (401f30 <xQueueGiveFromISR+0xa0>)
  401e96:	4798      	blx	r3
  401e98:	e7fe      	b.n	401e98 <xQueueGiveFromISR+0x8>
  401e9a:	460d      	mov	r5, r1
  401e9c:	4604      	mov	r4, r0

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
  401e9e:	6c03      	ldr	r3, [r0, #64]	; 0x40
  401ea0:	b113      	cbz	r3, 401ea8 <xQueueGiveFromISR+0x18>
  401ea2:	4b23      	ldr	r3, [pc, #140]	; (401f30 <xQueueGiveFromISR+0xa0>)
  401ea4:	4798      	blx	r3
  401ea6:	e7fe      	b.n	401ea6 <xQueueGiveFromISR+0x16>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
  401ea8:	6803      	ldr	r3, [r0, #0]
  401eaa:	b923      	cbnz	r3, 401eb6 <xQueueGiveFromISR+0x26>
  401eac:	6843      	ldr	r3, [r0, #4]
  401eae:	b113      	cbz	r3, 401eb6 <xQueueGiveFromISR+0x26>
  401eb0:	4b1f      	ldr	r3, [pc, #124]	; (401f30 <xQueueGiveFromISR+0xa0>)
  401eb2:	4798      	blx	r3
  401eb4:	e7fe      	b.n	401eb4 <xQueueGiveFromISR+0x24>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
  401eb6:	4b1f      	ldr	r3, [pc, #124]	; (401f34 <xQueueGiveFromISR+0xa4>)
  401eb8:	4798      	blx	r3

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
  401eba:	4b1d      	ldr	r3, [pc, #116]	; (401f30 <xQueueGiveFromISR+0xa0>)
  401ebc:	4798      	blx	r3
  401ebe:	4606      	mov	r6, r0
	{
		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
  401ec0:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  401ec2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  401ec4:	429a      	cmp	r2, r3
  401ec6:	d222      	bcs.n	401f0e <xQueueGiveFromISR+0x7e>
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			++( pxQueue->uxMessagesWaiting );
  401ec8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  401eca:	3301      	adds	r3, #1
  401ecc:	63a3      	str	r3, [r4, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( pxQueue->xTxLock == queueUNLOCKED )
  401ece:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  401ed0:	f1b3 3fff 	cmp.w	r3, #4294967295
  401ed4:	d116      	bne.n	401f04 <xQueueGiveFromISR+0x74>
			{
				#if ( configUSE_QUEUE_SETS == 1 )
				{
					if( pxQueue->pxQueueSetContainer != NULL )
  401ed6:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
  401ed8:	b14b      	cbz	r3, 401eee <xQueueGiveFromISR+0x5e>
					{
						if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) == pdTRUE )
  401eda:	4620      	mov	r0, r4
  401edc:	2100      	movs	r1, #0
  401ede:	4b16      	ldr	r3, [pc, #88]	; (401f38 <xQueueGiveFromISR+0xa8>)
  401ee0:	4798      	blx	r3
  401ee2:	2801      	cmp	r0, #1
  401ee4:	d115      	bne.n	401f12 <xQueueGiveFromISR+0x82>
						{
							/* The semaphore is a member of a queue set, and
							posting	to the queue set caused a higher priority
							task to	unblock.  A context switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
  401ee6:	b1b5      	cbz	r5, 401f16 <xQueueGiveFromISR+0x86>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
  401ee8:	2401      	movs	r4, #1
  401eea:	602c      	str	r4, [r5, #0]
  401eec:	e01a      	b.n	401f24 <xQueueGiveFromISR+0x94>
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else
					{
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  401eee:	6a63      	ldr	r3, [r4, #36]	; 0x24
  401ef0:	b19b      	cbz	r3, 401f1a <xQueueGiveFromISR+0x8a>
						{
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  401ef2:	f104 0024 	add.w	r0, r4, #36	; 0x24
  401ef6:	4b11      	ldr	r3, [pc, #68]	; (401f3c <xQueueGiveFromISR+0xac>)
  401ef8:	4798      	blx	r3
  401efa:	b180      	cbz	r0, 401f1e <xQueueGiveFromISR+0x8e>
							{
								/* The task waiting has a higher priority so
								record that a context switch is required. */
								if( pxHigherPriorityTaskWoken != NULL )
  401efc:	b18d      	cbz	r5, 401f22 <xQueueGiveFromISR+0x92>
								{
									*pxHigherPriorityTaskWoken = pdTRUE;
  401efe:	2401      	movs	r4, #1
  401f00:	602c      	str	r4, [r5, #0]
  401f02:	e00f      	b.n	401f24 <xQueueGiveFromISR+0x94>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				++( pxQueue->xTxLock );
  401f04:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  401f06:	3301      	adds	r3, #1
  401f08:	64a3      	str	r3, [r4, #72]	; 0x48
			}

			xReturn = pdPASS;
  401f0a:	2401      	movs	r4, #1
  401f0c:	e00a      	b.n	401f24 <xQueueGiveFromISR+0x94>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
  401f0e:	2400      	movs	r4, #0
  401f10:	e008      	b.n	401f24 <xQueueGiveFromISR+0x94>
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				++( pxQueue->xTxLock );
			}

			xReturn = pdPASS;
  401f12:	2401      	movs	r4, #1
  401f14:	e006      	b.n	401f24 <xQueueGiveFromISR+0x94>
  401f16:	2401      	movs	r4, #1
  401f18:	e004      	b.n	401f24 <xQueueGiveFromISR+0x94>
  401f1a:	2401      	movs	r4, #1
  401f1c:	e002      	b.n	401f24 <xQueueGiveFromISR+0x94>
  401f1e:	2401      	movs	r4, #1
  401f20:	e000      	b.n	401f24 <xQueueGiveFromISR+0x94>
  401f22:	2401      	movs	r4, #1
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
  401f24:	4630      	mov	r0, r6
  401f26:	4b06      	ldr	r3, [pc, #24]	; (401f40 <xQueueGiveFromISR+0xb0>)
  401f28:	4798      	blx	r3

	return xReturn;
}
  401f2a:	4620      	mov	r0, r4
  401f2c:	bd70      	pop	{r4, r5, r6, pc}
  401f2e:	bf00      	nop
  401f30:	00401571 	.word	0x00401571
  401f34:	00401759 	.word	0x00401759
  401f38:	00401a41 	.word	0x00401a41
  401f3c:	00402901 	.word	0x00402901
  401f40:	004015d9 	.word	0x004015d9

00401f44 <xQueueGenericReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait, const BaseType_t xJustPeeking )
{
  401f44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  401f48:	b085      	sub	sp, #20
  401f4a:	9201      	str	r2, [sp, #4]
BaseType_t xEntryTimeSet = pdFALSE;
TimeOut_t xTimeOut;
int8_t *pcOriginalReadPosition;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;

	configASSERT( pxQueue );
  401f4c:	b910      	cbnz	r0, 401f54 <xQueueGenericReceive+0x10>
  401f4e:	4b49      	ldr	r3, [pc, #292]	; (402074 <xQueueGenericReceive+0x130>)
  401f50:	4798      	blx	r3
  401f52:	e7fe      	b.n	401f52 <xQueueGenericReceive+0xe>
  401f54:	4688      	mov	r8, r1
  401f56:	4699      	mov	r9, r3
  401f58:	4604      	mov	r4, r0
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
  401f5a:	b921      	cbnz	r1, 401f66 <xQueueGenericReceive+0x22>
  401f5c:	6c03      	ldr	r3, [r0, #64]	; 0x40
  401f5e:	b113      	cbz	r3, 401f66 <xQueueGenericReceive+0x22>
  401f60:	4b44      	ldr	r3, [pc, #272]	; (402074 <xQueueGenericReceive+0x130>)
  401f62:	4798      	blx	r3
  401f64:	e7fe      	b.n	401f64 <xQueueGenericReceive+0x20>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
  401f66:	4b44      	ldr	r3, [pc, #272]	; (402078 <xQueueGenericReceive+0x134>)
  401f68:	4798      	blx	r3
  401f6a:	b920      	cbnz	r0, 401f76 <xQueueGenericReceive+0x32>
  401f6c:	9b01      	ldr	r3, [sp, #4]
  401f6e:	b123      	cbz	r3, 401f7a <xQueueGenericReceive+0x36>
  401f70:	4b40      	ldr	r3, [pc, #256]	; (402074 <xQueueGenericReceive+0x130>)
  401f72:	4798      	blx	r3
  401f74:	e7fe      	b.n	401f74 <xQueueGenericReceive+0x30>
  401f76:	2700      	movs	r7, #0
  401f78:	e000      	b.n	401f7c <xQueueGenericReceive+0x38>
  401f7a:	2700      	movs	r7, #0
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
  401f7c:	4e3f      	ldr	r6, [pc, #252]	; (40207c <xQueueGenericReceive+0x138>)
				}
				else if( xEntryTimeSet == pdFALSE )
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
  401f7e:	f8df a12c 	ldr.w	sl, [pc, #300]	; 4020ac <xQueueGenericReceive+0x168>
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
  401f82:	4d3f      	ldr	r5, [pc, #252]	; (402080 <xQueueGenericReceive+0x13c>)
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
  401f84:	47b0      	blx	r6
		{
			/* Is there data in the queue now?  To be running the calling task
			must be	the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
  401f86:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  401f88:	b343      	cbz	r3, 401fdc <xQueueGenericReceive+0x98>
			{
				/* Remember the read position in case the queue is only being
				peeked. */
				pcOriginalReadPosition = pxQueue->u.pcReadFrom;
  401f8a:	68e5      	ldr	r5, [r4, #12]

				prvCopyDataFromQueue( pxQueue, pvBuffer );
  401f8c:	4620      	mov	r0, r4
  401f8e:	4641      	mov	r1, r8
  401f90:	4b3c      	ldr	r3, [pc, #240]	; (402084 <xQueueGenericReceive+0x140>)
  401f92:	4798      	blx	r3

				if( xJustPeeking == pdFALSE )
  401f94:	f1b9 0f00 	cmp.w	r9, #0
  401f98:	d112      	bne.n	401fc0 <xQueueGenericReceive+0x7c>
				{
					traceQUEUE_RECEIVE( pxQueue );

					/* Actually removing data, not just peeking. */
					--( pxQueue->uxMessagesWaiting );
  401f9a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  401f9c:	3b01      	subs	r3, #1
  401f9e:	63a3      	str	r3, [r4, #56]	; 0x38

					#if ( configUSE_MUTEXES == 1 )
					{
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
  401fa0:	6823      	ldr	r3, [r4, #0]
  401fa2:	b913      	cbnz	r3, 401faa <xQueueGenericReceive+0x66>
						{
							/* Record the information required to implement
							priority inheritance should it become necessary. */
							pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
  401fa4:	4b38      	ldr	r3, [pc, #224]	; (402088 <xQueueGenericReceive+0x144>)
  401fa6:	4798      	blx	r3
  401fa8:	6060      	str	r0, [r4, #4]
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configUSE_MUTEXES */

					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
  401faa:	6923      	ldr	r3, [r4, #16]
  401fac:	b193      	cbz	r3, 401fd4 <xQueueGenericReceive+0x90>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
  401fae:	f104 0010 	add.w	r0, r4, #16
  401fb2:	4b36      	ldr	r3, [pc, #216]	; (40208c <xQueueGenericReceive+0x148>)
  401fb4:	4798      	blx	r3
  401fb6:	2801      	cmp	r0, #1
  401fb8:	d10c      	bne.n	401fd4 <xQueueGenericReceive+0x90>
						{
							queueYIELD_IF_USING_PREEMPTION();
  401fba:	4b35      	ldr	r3, [pc, #212]	; (402090 <xQueueGenericReceive+0x14c>)
  401fbc:	4798      	blx	r3
  401fbe:	e009      	b.n	401fd4 <xQueueGenericReceive+0x90>
				{
					traceQUEUE_PEEK( pxQueue );

					/* The data is not being removed, so reset the read
					pointer. */
					pxQueue->u.pcReadFrom = pcOriginalReadPosition;
  401fc0:	60e5      	str	r5, [r4, #12]

					/* The data is being left in the queue, so see if there are
					any other tasks waiting for the data. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  401fc2:	6a63      	ldr	r3, [r4, #36]	; 0x24
  401fc4:	b133      	cbz	r3, 401fd4 <xQueueGenericReceive+0x90>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  401fc6:	f104 0024 	add.w	r0, r4, #36	; 0x24
  401fca:	4b30      	ldr	r3, [pc, #192]	; (40208c <xQueueGenericReceive+0x148>)
  401fcc:	4798      	blx	r3
  401fce:	b108      	cbz	r0, 401fd4 <xQueueGenericReceive+0x90>
						{
							/* The task waiting has a higher priority than this task. */
							queueYIELD_IF_USING_PREEMPTION();
  401fd0:	4b2f      	ldr	r3, [pc, #188]	; (402090 <xQueueGenericReceive+0x14c>)
  401fd2:	4798      	blx	r3
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				taskEXIT_CRITICAL();
  401fd4:	4b2a      	ldr	r3, [pc, #168]	; (402080 <xQueueGenericReceive+0x13c>)
  401fd6:	4798      	blx	r3
				return pdPASS;
  401fd8:	2001      	movs	r0, #1
  401fda:	e048      	b.n	40206e <xQueueGenericReceive+0x12a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
  401fdc:	9b01      	ldr	r3, [sp, #4]
  401fde:	b91b      	cbnz	r3, 401fe8 <xQueueGenericReceive+0xa4>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
  401fe0:	4b27      	ldr	r3, [pc, #156]	; (402080 <xQueueGenericReceive+0x13c>)
  401fe2:	4798      	blx	r3
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
  401fe4:	2000      	movs	r0, #0
  401fe6:	e042      	b.n	40206e <xQueueGenericReceive+0x12a>
				}
				else if( xEntryTimeSet == pdFALSE )
  401fe8:	b917      	cbnz	r7, 401ff0 <xQueueGenericReceive+0xac>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
  401fea:	a802      	add	r0, sp, #8
  401fec:	47d0      	blx	sl
					xEntryTimeSet = pdTRUE;
  401fee:	2701      	movs	r7, #1
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
  401ff0:	47a8      	blx	r5

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
  401ff2:	4b28      	ldr	r3, [pc, #160]	; (402094 <xQueueGenericReceive+0x150>)
  401ff4:	4798      	blx	r3
		prvLockQueue( pxQueue );
  401ff6:	47b0      	blx	r6
  401ff8:	6c63      	ldr	r3, [r4, #68]	; 0x44
  401ffa:	f1b3 3fff 	cmp.w	r3, #4294967295
  401ffe:	bf04      	itt	eq
  402000:	2300      	moveq	r3, #0
  402002:	6463      	streq	r3, [r4, #68]	; 0x44
  402004:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  402006:	f1b3 3fff 	cmp.w	r3, #4294967295
  40200a:	bf04      	itt	eq
  40200c:	2300      	moveq	r3, #0
  40200e:	64a3      	streq	r3, [r4, #72]	; 0x48
  402010:	47a8      	blx	r5

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
  402012:	a802      	add	r0, sp, #8
  402014:	a901      	add	r1, sp, #4
  402016:	4b20      	ldr	r3, [pc, #128]	; (402098 <xQueueGenericReceive+0x154>)
  402018:	4798      	blx	r3
  40201a:	bb10      	cbnz	r0, 402062 <xQueueGenericReceive+0x11e>

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
  40201c:	47b0      	blx	r6
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
  40201e:	f8d4 b038 	ldr.w	fp, [r4, #56]	; 0x38
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
  402022:	47a8      	blx	r5
		prvLockQueue( pxQueue );

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
		{
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
  402024:	f1bb 0f00 	cmp.w	fp, #0
  402028:	d115      	bne.n	402056 <xQueueGenericReceive+0x112>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
  40202a:	6823      	ldr	r3, [r4, #0]
  40202c:	b923      	cbnz	r3, 402038 <xQueueGenericReceive+0xf4>
					{
						taskENTER_CRITICAL();
  40202e:	47b0      	blx	r6
						{
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
  402030:	6860      	ldr	r0, [r4, #4]
  402032:	4b1a      	ldr	r3, [pc, #104]	; (40209c <xQueueGenericReceive+0x158>)
  402034:	4798      	blx	r3
						}
						taskEXIT_CRITICAL();
  402036:	47a8      	blx	r5
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
  402038:	f104 0024 	add.w	r0, r4, #36	; 0x24
  40203c:	9901      	ldr	r1, [sp, #4]
  40203e:	4b18      	ldr	r3, [pc, #96]	; (4020a0 <xQueueGenericReceive+0x15c>)
  402040:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
  402042:	4620      	mov	r0, r4
  402044:	4b17      	ldr	r3, [pc, #92]	; (4020a4 <xQueueGenericReceive+0x160>)
  402046:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
  402048:	4b17      	ldr	r3, [pc, #92]	; (4020a8 <xQueueGenericReceive+0x164>)
  40204a:	4798      	blx	r3
  40204c:	2800      	cmp	r0, #0
  40204e:	d199      	bne.n	401f84 <xQueueGenericReceive+0x40>
				{
					portYIELD_WITHIN_API();
  402050:	4b0f      	ldr	r3, [pc, #60]	; (402090 <xQueueGenericReceive+0x14c>)
  402052:	4798      	blx	r3
  402054:	e796      	b.n	401f84 <xQueueGenericReceive+0x40>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
  402056:	4620      	mov	r0, r4
  402058:	4b12      	ldr	r3, [pc, #72]	; (4020a4 <xQueueGenericReceive+0x160>)
  40205a:	4798      	blx	r3
				( void ) xTaskResumeAll();
  40205c:	4b12      	ldr	r3, [pc, #72]	; (4020a8 <xQueueGenericReceive+0x164>)
  40205e:	4798      	blx	r3
  402060:	e790      	b.n	401f84 <xQueueGenericReceive+0x40>
			}
		}
		else
		{
			prvUnlockQueue( pxQueue );
  402062:	4620      	mov	r0, r4
  402064:	4b0f      	ldr	r3, [pc, #60]	; (4020a4 <xQueueGenericReceive+0x160>)
  402066:	4798      	blx	r3
			( void ) xTaskResumeAll();
  402068:	4b0f      	ldr	r3, [pc, #60]	; (4020a8 <xQueueGenericReceive+0x164>)
  40206a:	4798      	blx	r3
			traceQUEUE_RECEIVE_FAILED( pxQueue );
			return errQUEUE_EMPTY;
  40206c:	2000      	movs	r0, #0
		}
	}
}
  40206e:	b005      	add	sp, #20
  402070:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  402074:	00401571 	.word	0x00401571
  402078:	00402a31 	.word	0x00402a31
  40207c:	004015a1 	.word	0x004015a1
  402080:	004015e1 	.word	0x004015e1
  402084:	00401aa9 	.word	0x00401aa9
  402088:	00402b9d 	.word	0x00402b9d
  40208c:	00402901 	.word	0x00402901
  402090:	00401559 	.word	0x00401559
  402094:	004023f9 	.word	0x004023f9
  402098:	004029ad 	.word	0x004029ad
  40209c:	00402a51 	.word	0x00402a51
  4020a0:	00402815 	.word	0x00402815
  4020a4:	00401ad1 	.word	0x00401ad1
  4020a8:	00402551 	.word	0x00402551
  4020ac:	00402989 	.word	0x00402989

004020b0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
  4020b0:	b570      	push	{r4, r5, r6, lr}
  4020b2:	4604      	mov	r4, r0
  4020b4:	460e      	mov	r6, r1
  4020b6:	4615      	mov	r5, r2
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
  4020b8:	4b0d      	ldr	r3, [pc, #52]	; (4020f0 <vQueueWaitForMessageRestricted+0x40>)
  4020ba:	4798      	blx	r3
  4020bc:	6c63      	ldr	r3, [r4, #68]	; 0x44
  4020be:	f1b3 3fff 	cmp.w	r3, #4294967295
  4020c2:	bf04      	itt	eq
  4020c4:	2300      	moveq	r3, #0
  4020c6:	6463      	streq	r3, [r4, #68]	; 0x44
  4020c8:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  4020ca:	f1b3 3fff 	cmp.w	r3, #4294967295
  4020ce:	bf04      	itt	eq
  4020d0:	2300      	moveq	r3, #0
  4020d2:	64a3      	streq	r3, [r4, #72]	; 0x48
  4020d4:	4b07      	ldr	r3, [pc, #28]	; (4020f4 <vQueueWaitForMessageRestricted+0x44>)
  4020d6:	4798      	blx	r3
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
  4020d8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  4020da:	b92b      	cbnz	r3, 4020e8 <vQueueWaitForMessageRestricted+0x38>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
  4020dc:	f104 0024 	add.w	r0, r4, #36	; 0x24
  4020e0:	4631      	mov	r1, r6
  4020e2:	462a      	mov	r2, r5
  4020e4:	4b04      	ldr	r3, [pc, #16]	; (4020f8 <vQueueWaitForMessageRestricted+0x48>)
  4020e6:	4798      	blx	r3
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
  4020e8:	4620      	mov	r0, r4
  4020ea:	4b04      	ldr	r3, [pc, #16]	; (4020fc <vQueueWaitForMessageRestricted+0x4c>)
  4020ec:	4798      	blx	r3
  4020ee:	bd70      	pop	{r4, r5, r6, pc}
  4020f0:	004015a1 	.word	0x004015a1
  4020f4:	004015e1 	.word	0x004015e1
  4020f8:	0040288d 	.word	0x0040288d
  4020fc:	00401ad1 	.word	0x00401ad1

00402100 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
  402100:	4b08      	ldr	r3, [pc, #32]	; (402124 <prvResetNextTaskUnblockTime+0x24>)
  402102:	681b      	ldr	r3, [r3, #0]
  402104:	681b      	ldr	r3, [r3, #0]
  402106:	b923      	cbnz	r3, 402112 <prvResetNextTaskUnblockTime+0x12>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
  402108:	f04f 32ff 	mov.w	r2, #4294967295
  40210c:	4b06      	ldr	r3, [pc, #24]	; (402128 <prvResetNextTaskUnblockTime+0x28>)
  40210e:	601a      	str	r2, [r3, #0]
  402110:	4770      	bx	lr
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
  402112:	4b04      	ldr	r3, [pc, #16]	; (402124 <prvResetNextTaskUnblockTime+0x24>)
  402114:	681b      	ldr	r3, [r3, #0]
  402116:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xGenericListItem ) );
  402118:	68db      	ldr	r3, [r3, #12]
  40211a:	685a      	ldr	r2, [r3, #4]
  40211c:	4b02      	ldr	r3, [pc, #8]	; (402128 <prvResetNextTaskUnblockTime+0x28>)
  40211e:	601a      	str	r2, [r3, #0]
  402120:	4770      	bx	lr
  402122:	bf00      	nop
  402124:	2000ad30 	.word	0x2000ad30
  402128:	2000add0 	.word	0x2000add0

0040212c <prvAddCurrentTaskToDelayedList>:
	#endif /* vTaskDelete */
}
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( const TickType_t xTimeToWake )
{
  40212c:	b510      	push	{r4, lr}
  40212e:	4604      	mov	r4, r0
	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
  402130:	4b0e      	ldr	r3, [pc, #56]	; (40216c <prvAddCurrentTaskToDelayedList+0x40>)
  402132:	681b      	ldr	r3, [r3, #0]
  402134:	6058      	str	r0, [r3, #4]

	if( xTimeToWake < xTickCount )
  402136:	4b0e      	ldr	r3, [pc, #56]	; (402170 <prvAddCurrentTaskToDelayedList+0x44>)
  402138:	681b      	ldr	r3, [r3, #0]
  40213a:	4298      	cmp	r0, r3
  40213c:	d207      	bcs.n	40214e <prvAddCurrentTaskToDelayedList+0x22>
	{
		/* Wake time has overflowed.  Place this item in the overflow list. */
		vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
  40213e:	4b0d      	ldr	r3, [pc, #52]	; (402174 <prvAddCurrentTaskToDelayedList+0x48>)
  402140:	6818      	ldr	r0, [r3, #0]
  402142:	4b0a      	ldr	r3, [pc, #40]	; (40216c <prvAddCurrentTaskToDelayedList+0x40>)
  402144:	6819      	ldr	r1, [r3, #0]
  402146:	3104      	adds	r1, #4
  402148:	4b0b      	ldr	r3, [pc, #44]	; (402178 <prvAddCurrentTaskToDelayedList+0x4c>)
  40214a:	4798      	blx	r3
  40214c:	bd10      	pop	{r4, pc}
	}
	else
	{
		/* The wake time has not overflowed, so the current block list is used. */
		vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
  40214e:	4b0b      	ldr	r3, [pc, #44]	; (40217c <prvAddCurrentTaskToDelayedList+0x50>)
  402150:	6818      	ldr	r0, [r3, #0]
  402152:	4b06      	ldr	r3, [pc, #24]	; (40216c <prvAddCurrentTaskToDelayedList+0x40>)
  402154:	6819      	ldr	r1, [r3, #0]
  402156:	3104      	adds	r1, #4
  402158:	4b07      	ldr	r3, [pc, #28]	; (402178 <prvAddCurrentTaskToDelayedList+0x4c>)
  40215a:	4798      	blx	r3

		/* If the task entering the blocked state was placed at the head of the
		list of blocked tasks then xNextTaskUnblockTime needs to be updated
		too. */
		if( xTimeToWake < xNextTaskUnblockTime )
  40215c:	4b08      	ldr	r3, [pc, #32]	; (402180 <prvAddCurrentTaskToDelayedList+0x54>)
  40215e:	681b      	ldr	r3, [r3, #0]
  402160:	429c      	cmp	r4, r3
		{
			xNextTaskUnblockTime = xTimeToWake;
  402162:	bf3c      	itt	cc
  402164:	4b06      	ldrcc	r3, [pc, #24]	; (402180 <prvAddCurrentTaskToDelayedList+0x54>)
  402166:	601c      	strcc	r4, [r3, #0]
  402168:	bd10      	pop	{r4, pc}
  40216a:	bf00      	nop
  40216c:	2000adcc 	.word	0x2000adcc
  402170:	2000add8 	.word	0x2000add8
  402174:	2000addc 	.word	0x2000addc
  402178:	0040149d 	.word	0x0040149d
  40217c:	2000ad30 	.word	0x2000ad30
  402180:	2000add0 	.word	0x2000add0

00402184 <xTaskGenericCreate>:

#endif
/*-----------------------------------------------------------*/

BaseType_t xTaskGenericCreate( TaskFunction_t pxTaskCode, const char * const pcName, const uint16_t usStackDepth, void * const pvParameters, UBaseType_t uxPriority, TaskHandle_t * const pxCreatedTask, StackType_t * const puxStackBuffer, const MemoryRegion_t * const xRegions ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
  402184:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  402188:	b083      	sub	sp, #12
  40218a:	9301      	str	r3, [sp, #4]
  40218c:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  40218e:	f8dd a034 	ldr.w	sl, [sp, #52]	; 0x34
  402192:	9d0e      	ldr	r5, [sp, #56]	; 0x38
BaseType_t xReturn;
TCB_t * pxNewTCB;
StackType_t *pxTopOfStack;

	configASSERT( pxTaskCode );
  402194:	9000      	str	r0, [sp, #0]
  402196:	b910      	cbnz	r0, 40219e <xTaskGenericCreate+0x1a>
  402198:	4b62      	ldr	r3, [pc, #392]	; (402324 <xTaskGenericCreate+0x1a0>)
  40219a:	4798      	blx	r3
  40219c:	e7fe      	b.n	40219c <xTaskGenericCreate+0x18>
  40219e:	460e      	mov	r6, r1
  4021a0:	4690      	mov	r8, r2
	configASSERT( ( ( uxPriority & ( UBaseType_t ) ( ~portPRIVILEGE_BIT ) ) < ( UBaseType_t ) configMAX_PRIORITIES ) );
  4021a2:	2f04      	cmp	r7, #4
  4021a4:	d902      	bls.n	4021ac <xTaskGenericCreate+0x28>
  4021a6:	4b5f      	ldr	r3, [pc, #380]	; (402324 <xTaskGenericCreate+0x1a0>)
  4021a8:	4798      	blx	r3
  4021aa:	e7fe      	b.n	4021aa <xTaskGenericCreate+0x26>
	#else /* portSTACK_GROWTH */
	{
	StackType_t *pxStack;

		/* Allocate space for the stack used by the task being created. */
		pxStack = ( StackType_t * ) pvPortMallocAligned( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ), puxStackBuffer ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  4021ac:	b935      	cbnz	r5, 4021bc <xTaskGenericCreate+0x38>
  4021ae:	0090      	lsls	r0, r2, #2
  4021b0:	4b5d      	ldr	r3, [pc, #372]	; (402328 <xTaskGenericCreate+0x1a4>)
  4021b2:	4798      	blx	r3

		if( pxStack != NULL )
  4021b4:	4605      	mov	r5, r0
  4021b6:	2800      	cmp	r0, #0
  4021b8:	f000 80ae 	beq.w	402318 <xTaskGenericCreate+0x194>
		{
			/* Allocate space for the TCB.  Where the memory comes from depends
			on the implementation of the port malloc function. */
			pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
  4021bc:	2050      	movs	r0, #80	; 0x50
  4021be:	4b5a      	ldr	r3, [pc, #360]	; (402328 <xTaskGenericCreate+0x1a4>)
  4021c0:	4798      	blx	r3

			if( pxNewTCB != NULL )
  4021c2:	4604      	mov	r4, r0
  4021c4:	b1a8      	cbz	r0, 4021f2 <xTaskGenericCreate+0x6e>
			{
				/* Store the stack location in the TCB. */
				pxNewTCB->pxStack = pxStack;
  4021c6:	6305      	str	r5, [r0, #48]	; 0x30
	{
		/* Avoid dependency on memset() if it is not required. */
		#if( ( configCHECK_FOR_STACK_OVERFLOW > 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )
		{
			/* Just to help debugging. */
			( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) usStackDepth * sizeof( StackType_t ) );
  4021c8:	4628      	mov	r0, r5
  4021ca:	21a5      	movs	r1, #165	; 0xa5
  4021cc:	ea4f 0288 	mov.w	r2, r8, lsl #2
  4021d0:	4b56      	ldr	r3, [pc, #344]	; (40232c <xTaskGenericCreate+0x1a8>)
  4021d2:	4798      	blx	r3
		stack grows from high memory to low (as per the 80x86) or vice versa.
		portSTACK_GROWTH is used to make the result positive or negative as
		required by the port. */
		#if( portSTACK_GROWTH < 0 )
		{
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( uint16_t ) 1 );
  4021d4:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
  4021d8:	f108 38ff 	add.w	r8, r8, #4294967295
  4021dc:	6b23      	ldr	r3, [r4, #48]	; 0x30
  4021de:	eb03 0888 	add.w	r8, r3, r8, lsl #2
			pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
  4021e2:	f028 0507 	bic.w	r5, r8, #7
UBaseType_t x;

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
	{
		pxTCB->pcTaskName[ x ] = pcName[ x ];
  4021e6:	7833      	ldrb	r3, [r6, #0]
  4021e8:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
  4021ec:	7833      	ldrb	r3, [r6, #0]
  4021ee:	b923      	cbnz	r3, 4021fa <xTaskGenericCreate+0x76>
  4021f0:	e00f      	b.n	402212 <xTaskGenericCreate+0x8e>
			}
			else
			{
				/* The stack cannot be used as the TCB was not created.  Free it
				again. */
				vPortFree( pxStack );
  4021f2:	4628      	mov	r0, r5
  4021f4:	4b4e      	ldr	r3, [pc, #312]	; (402330 <xTaskGenericCreate+0x1ac>)
  4021f6:	4798      	blx	r3
  4021f8:	e08e      	b.n	402318 <xTaskGenericCreate+0x194>
  4021fa:	4633      	mov	r3, r6
  4021fc:	f104 0234 	add.w	r2, r4, #52	; 0x34
  402200:	3609      	adds	r6, #9
UBaseType_t x;

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
	{
		pxTCB->pcTaskName[ x ] = pcName[ x ];
  402202:	f813 1f01 	ldrb.w	r1, [r3, #1]!
  402206:	f802 1f01 	strb.w	r1, [r2, #1]!

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
  40220a:	7819      	ldrb	r1, [r3, #0]
  40220c:	b109      	cbz	r1, 402212 <xTaskGenericCreate+0x8e>
static void prvInitialiseTCBVariables( TCB_t * const pxTCB, const char * const pcName, UBaseType_t uxPriority, const MemoryRegion_t * const xRegions, const uint16_t usStackDepth ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
UBaseType_t x;

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
  40220e:	42b3      	cmp	r3, r6
  402210:	d1f7      	bne.n	402202 <xTaskGenericCreate+0x7e>
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
  402212:	f04f 0800 	mov.w	r8, #0
  402216:	f884 803d 	strb.w	r8, [r4, #61]	; 0x3d
  40221a:	463e      	mov	r6, r7
  40221c:	2f04      	cmp	r7, #4
  40221e:	bf28      	it	cs
  402220:	2604      	movcs	r6, #4
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxTCB->uxPriority = uxPriority;
  402222:	62e6      	str	r6, [r4, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxTCB->uxBasePriority = uxPriority;
  402224:	6426      	str	r6, [r4, #64]	; 0x40
		pxTCB->uxMutexesHeld = 0;
  402226:	f8c4 8044 	str.w	r8, [r4, #68]	; 0x44
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
  40222a:	f104 0904 	add.w	r9, r4, #4
  40222e:	4648      	mov	r0, r9
  402230:	f8df b148 	ldr.w	fp, [pc, #328]	; 40237c <xTaskGenericCreate+0x1f8>
  402234:	47d8      	blx	fp
	vListInitialiseItem( &( pxTCB->xEventListItem ) );
  402236:	f104 0018 	add.w	r0, r4, #24
  40223a:	47d8      	blx	fp

	/* Set the pxTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );
  40223c:	6124      	str	r4, [r4, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  40223e:	f1c6 0605 	rsb	r6, r6, #5
  402242:	61a6      	str	r6, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
  402244:	6264      	str	r4, [r4, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxTCB->ulNotifiedValue = 0;
  402246:	f8c4 8048 	str.w	r8, [r4, #72]	; 0x48
		pxTCB->eNotifyState = eNotWaitingNotification;
  40224a:	f884 804c 	strb.w	r8, [r4, #76]	; 0x4c
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
		}
		#else /* portUSING_MPU_WRAPPERS */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
  40224e:	4628      	mov	r0, r5
  402250:	9900      	ldr	r1, [sp, #0]
  402252:	9a01      	ldr	r2, [sp, #4]
  402254:	4b37      	ldr	r3, [pc, #220]	; (402334 <xTaskGenericCreate+0x1b0>)
  402256:	4798      	blx	r3
  402258:	6020      	str	r0, [r4, #0]
		}
		#endif /* portUSING_MPU_WRAPPERS */

		if( ( void * ) pxCreatedTask != NULL )
  40225a:	f1ba 0f00 	cmp.w	sl, #0
  40225e:	d001      	beq.n	402264 <xTaskGenericCreate+0xe0>
		{
			/* Pass the TCB out - in an anonymous way.  The calling function/
			task can use this as a handle to delete the task later if
			required.*/
			*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
  402260:	f8ca 4000 	str.w	r4, [sl]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Ensure interrupts don't access the task lists while they are being
		updated. */
		taskENTER_CRITICAL();
  402264:	4b34      	ldr	r3, [pc, #208]	; (402338 <xTaskGenericCreate+0x1b4>)
  402266:	4798      	blx	r3
		{
			uxCurrentNumberOfTasks++;
  402268:	4a34      	ldr	r2, [pc, #208]	; (40233c <xTaskGenericCreate+0x1b8>)
  40226a:	6813      	ldr	r3, [r2, #0]
  40226c:	3301      	adds	r3, #1
  40226e:	6013      	str	r3, [r2, #0]
			if( pxCurrentTCB == NULL )
  402270:	4b33      	ldr	r3, [pc, #204]	; (402340 <xTaskGenericCreate+0x1bc>)
  402272:	681b      	ldr	r3, [r3, #0]
  402274:	bb0b      	cbnz	r3, 4022ba <xTaskGenericCreate+0x136>
			{
				/* There are no other tasks, or all the other tasks are in
				the suspended state - make this the current task. */
				pxCurrentTCB =  pxNewTCB;
  402276:	4b32      	ldr	r3, [pc, #200]	; (402340 <xTaskGenericCreate+0x1bc>)
  402278:	601c      	str	r4, [r3, #0]

				if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
  40227a:	6813      	ldr	r3, [r2, #0]
  40227c:	2b01      	cmp	r3, #1
  40227e:	d126      	bne.n	4022ce <xTaskGenericCreate+0x14a>
  402280:	4d30      	ldr	r5, [pc, #192]	; (402344 <xTaskGenericCreate+0x1c0>)
  402282:	f105 0864 	add.w	r8, r5, #100	; 0x64
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
  402286:	4e30      	ldr	r6, [pc, #192]	; (402348 <xTaskGenericCreate+0x1c4>)
  402288:	4628      	mov	r0, r5
  40228a:	47b0      	blx	r6
  40228c:	3514      	adds	r5, #20

static void prvInitialiseTaskLists( void )
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
  40228e:	4545      	cmp	r5, r8
  402290:	d1fa      	bne.n	402288 <xTaskGenericCreate+0x104>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
	}

	vListInitialise( &xDelayedTaskList1 );
  402292:	f8df 80ec 	ldr.w	r8, [pc, #236]	; 402380 <xTaskGenericCreate+0x1fc>
  402296:	4640      	mov	r0, r8
  402298:	4d2b      	ldr	r5, [pc, #172]	; (402348 <xTaskGenericCreate+0x1c4>)
  40229a:	47a8      	blx	r5
	vListInitialise( &xDelayedTaskList2 );
  40229c:	4e2b      	ldr	r6, [pc, #172]	; (40234c <xTaskGenericCreate+0x1c8>)
  40229e:	4630      	mov	r0, r6
  4022a0:	47a8      	blx	r5
	vListInitialise( &xPendingReadyList );
  4022a2:	482b      	ldr	r0, [pc, #172]	; (402350 <xTaskGenericCreate+0x1cc>)
  4022a4:	47a8      	blx	r5

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
  4022a6:	482b      	ldr	r0, [pc, #172]	; (402354 <xTaskGenericCreate+0x1d0>)
  4022a8:	47a8      	blx	r5
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
  4022aa:	482b      	ldr	r0, [pc, #172]	; (402358 <xTaskGenericCreate+0x1d4>)
  4022ac:	47a8      	blx	r5
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
  4022ae:	4b2b      	ldr	r3, [pc, #172]	; (40235c <xTaskGenericCreate+0x1d8>)
  4022b0:	f8c3 8000 	str.w	r8, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
  4022b4:	4b2a      	ldr	r3, [pc, #168]	; (402360 <xTaskGenericCreate+0x1dc>)
  4022b6:	601e      	str	r6, [r3, #0]
  4022b8:	e009      	b.n	4022ce <xTaskGenericCreate+0x14a>
			else
			{
				/* If the scheduler is not already running, make this task the
				current task if it is the highest priority task to be created
				so far. */
				if( xSchedulerRunning == pdFALSE )
  4022ba:	4b2a      	ldr	r3, [pc, #168]	; (402364 <xTaskGenericCreate+0x1e0>)
  4022bc:	681b      	ldr	r3, [r3, #0]
  4022be:	b933      	cbnz	r3, 4022ce <xTaskGenericCreate+0x14a>
				{
					if( pxCurrentTCB->uxPriority <= uxPriority )
  4022c0:	4b1f      	ldr	r3, [pc, #124]	; (402340 <xTaskGenericCreate+0x1bc>)
  4022c2:	681b      	ldr	r3, [r3, #0]
  4022c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  4022c6:	429f      	cmp	r7, r3
					{
						pxCurrentTCB = pxNewTCB;
  4022c8:	bf24      	itt	cs
  4022ca:	4b1d      	ldrcs	r3, [pc, #116]	; (402340 <xTaskGenericCreate+0x1bc>)
  4022cc:	601c      	strcs	r4, [r3, #0]
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}

			uxTaskNumber++;
  4022ce:	4a26      	ldr	r2, [pc, #152]	; (402368 <xTaskGenericCreate+0x1e4>)
  4022d0:	6813      	ldr	r3, [r2, #0]
  4022d2:	3301      	adds	r3, #1
  4022d4:	6013      	str	r3, [r2, #0]
				pxNewTCB->uxTCBNumber = uxTaskNumber;
			}
			#endif /* configUSE_TRACE_FACILITY */
			traceTASK_CREATE( pxNewTCB );

			prvAddTaskToReadyList( pxNewTCB );
  4022d6:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  4022d8:	4924      	ldr	r1, [pc, #144]	; (40236c <xTaskGenericCreate+0x1e8>)
  4022da:	680b      	ldr	r3, [r1, #0]
  4022dc:	2201      	movs	r2, #1
  4022de:	4082      	lsls	r2, r0
  4022e0:	4313      	orrs	r3, r2
  4022e2:	600b      	str	r3, [r1, #0]
  4022e4:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  4022e8:	4b16      	ldr	r3, [pc, #88]	; (402344 <xTaskGenericCreate+0x1c0>)
  4022ea:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  4022ee:	4649      	mov	r1, r9
  4022f0:	4b1f      	ldr	r3, [pc, #124]	; (402370 <xTaskGenericCreate+0x1ec>)
  4022f2:	4798      	blx	r3

			xReturn = pdPASS;
			portSETUP_TCB( pxNewTCB );
		}
		taskEXIT_CRITICAL();
  4022f4:	4b1f      	ldr	r3, [pc, #124]	; (402374 <xTaskGenericCreate+0x1f0>)
  4022f6:	4798      	blx	r3
		traceTASK_CREATE_FAILED();
	}

	if( xReturn == pdPASS )
	{
		if( xSchedulerRunning != pdFALSE )
  4022f8:	4b1a      	ldr	r3, [pc, #104]	; (402364 <xTaskGenericCreate+0x1e0>)
  4022fa:	681b      	ldr	r3, [r3, #0]
  4022fc:	b143      	cbz	r3, 402310 <xTaskGenericCreate+0x18c>
		{
			/* If the created task is of a higher priority than the current task
			then it should run now. */
			if( pxCurrentTCB->uxPriority < uxPriority )
  4022fe:	4b10      	ldr	r3, [pc, #64]	; (402340 <xTaskGenericCreate+0x1bc>)
  402300:	681b      	ldr	r3, [r3, #0]
  402302:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  402304:	429f      	cmp	r7, r3
  402306:	d905      	bls.n	402314 <xTaskGenericCreate+0x190>
			{
				taskYIELD_IF_USING_PREEMPTION();
  402308:	4b1b      	ldr	r3, [pc, #108]	; (402378 <xTaskGenericCreate+0x1f4>)
  40230a:	4798      	blx	r3
			#endif /* configUSE_TRACE_FACILITY */
			traceTASK_CREATE( pxNewTCB );

			prvAddTaskToReadyList( pxNewTCB );

			xReturn = pdPASS;
  40230c:	2001      	movs	r0, #1
  40230e:	e005      	b.n	40231c <xTaskGenericCreate+0x198>
  402310:	2001      	movs	r0, #1
  402312:	e003      	b.n	40231c <xTaskGenericCreate+0x198>
  402314:	2001      	movs	r0, #1
  402316:	e001      	b.n	40231c <xTaskGenericCreate+0x198>
		}
		taskEXIT_CRITICAL();
	}
	else
	{
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
  402318:	f04f 30ff 	mov.w	r0, #4294967295
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xReturn;
}
  40231c:	b003      	add	sp, #12
  40231e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  402322:	bf00      	nop
  402324:	00401571 	.word	0x00401571
  402328:	004017fd 	.word	0x004017fd
  40232c:	00409321 	.word	0x00409321
  402330:	00401959 	.word	0x00401959
  402334:	00401515 	.word	0x00401515
  402338:	004015a1 	.word	0x004015a1
  40233c:	2000adf8 	.word	0x2000adf8
  402340:	2000adcc 	.word	0x2000adcc
  402344:	2000ad54 	.word	0x2000ad54
  402348:	00401465 	.word	0x00401465
  40234c:	2000adfc 	.word	0x2000adfc
  402350:	2000ade0 	.word	0x2000ade0
  402354:	2000adb8 	.word	0x2000adb8
  402358:	2000ae10 	.word	0x2000ae10
  40235c:	2000ad30 	.word	0x2000ad30
  402360:	2000addc 	.word	0x2000addc
  402364:	2000ad34 	.word	0x2000ad34
  402368:	2000adf4 	.word	0x2000adf4
  40236c:	2000ae24 	.word	0x2000ae24
  402370:	00401485 	.word	0x00401485
  402374:	004015e1 	.word	0x004015e1
  402378:	00401559 	.word	0x00401559
  40237c:	0040147d 	.word	0x0040147d
  402380:	2000ad3c 	.word	0x2000ad3c

00402384 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
  402384:	b510      	push	{r4, lr}
  402386:	b084      	sub	sp, #16
		xReturn = xTaskCreate( prvIdleTask, "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), &xIdleTaskHandle ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */
	}
	#else
	{
		/* Create the idle task without storing its handle. */
		xReturn = xTaskCreate( prvIdleTask, "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), NULL );  /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */
  402388:	2300      	movs	r3, #0
  40238a:	9300      	str	r3, [sp, #0]
  40238c:	9301      	str	r3, [sp, #4]
  40238e:	9302      	str	r3, [sp, #8]
  402390:	9303      	str	r3, [sp, #12]
  402392:	4810      	ldr	r0, [pc, #64]	; (4023d4 <vTaskStartScheduler+0x50>)
  402394:	4910      	ldr	r1, [pc, #64]	; (4023d8 <vTaskStartScheduler+0x54>)
  402396:	2282      	movs	r2, #130	; 0x82
  402398:	4c10      	ldr	r4, [pc, #64]	; (4023dc <vTaskStartScheduler+0x58>)
  40239a:	47a0      	blx	r4
	}
	#endif /* INCLUDE_xTaskGetIdleTaskHandle */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
  40239c:	2801      	cmp	r0, #1
  40239e:	d112      	bne.n	4023c6 <vTaskStartScheduler+0x42>
		{
			xReturn = xTimerCreateTimerTask();
  4023a0:	4b0f      	ldr	r3, [pc, #60]	; (4023e0 <vTaskStartScheduler+0x5c>)
  4023a2:	4798      	blx	r3
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
  4023a4:	2801      	cmp	r0, #1
  4023a6:	d10e      	bne.n	4023c6 <vTaskStartScheduler+0x42>
		/* Interrupts are turned off here, to ensure a tick does not occur
		before or during the call to xPortStartScheduler().  The stacks of
		the created tasks contain a status word with interrupts switched on
		so interrupts will automatically get re-enabled when the first task
		starts to run. */
		portDISABLE_INTERRUPTS();
  4023a8:	4b0e      	ldr	r3, [pc, #56]	; (4023e4 <vTaskStartScheduler+0x60>)
  4023aa:	4798      	blx	r3
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
  4023ac:	f04f 32ff 	mov.w	r2, #4294967295
  4023b0:	4b0d      	ldr	r3, [pc, #52]	; (4023e8 <vTaskStartScheduler+0x64>)
  4023b2:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
  4023b4:	2201      	movs	r2, #1
  4023b6:	4b0d      	ldr	r3, [pc, #52]	; (4023ec <vTaskStartScheduler+0x68>)
  4023b8:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
  4023ba:	2200      	movs	r2, #0
  4023bc:	4b0c      	ldr	r3, [pc, #48]	; (4023f0 <vTaskStartScheduler+0x6c>)
  4023be:	601a      	str	r2, [r3, #0]
		the run time counter time base. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
  4023c0:	4b0c      	ldr	r3, [pc, #48]	; (4023f4 <vTaskStartScheduler+0x70>)
  4023c2:	4798      	blx	r3
  4023c4:	e003      	b.n	4023ce <vTaskStartScheduler+0x4a>
	else
	{
		/* This line will only be reached if the kernel could not be started,
		because there was not enough FreeRTOS heap to create the idle task
		or the timer task. */
		configASSERT( xReturn );
  4023c6:	b910      	cbnz	r0, 4023ce <vTaskStartScheduler+0x4a>
  4023c8:	4b06      	ldr	r3, [pc, #24]	; (4023e4 <vTaskStartScheduler+0x60>)
  4023ca:	4798      	blx	r3
  4023cc:	e7fe      	b.n	4023cc <vTaskStartScheduler+0x48>
	}
}
  4023ce:	b004      	add	sp, #16
  4023d0:	bd10      	pop	{r4, pc}
  4023d2:	bf00      	nop
  4023d4:	004026c9 	.word	0x004026c9
  4023d8:	0041098c 	.word	0x0041098c
  4023dc:	00402185 	.word	0x00402185
  4023e0:	00402c6d 	.word	0x00402c6d
  4023e4:	00401571 	.word	0x00401571
  4023e8:	2000add0 	.word	0x2000add0
  4023ec:	2000ad34 	.word	0x2000ad34
  4023f0:	2000add8 	.word	0x2000add8
  4023f4:	004016a9 	.word	0x004016a9

004023f8 <vTaskSuspendAll>:
{
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
  4023f8:	4a02      	ldr	r2, [pc, #8]	; (402404 <vTaskSuspendAll+0xc>)
  4023fa:	6813      	ldr	r3, [r2, #0]
  4023fc:	3301      	adds	r3, #1
  4023fe:	6013      	str	r3, [r2, #0]
  402400:	4770      	bx	lr
  402402:	bf00      	nop
  402404:	2000add4 	.word	0x2000add4

00402408 <xTaskGetTickCount>:
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
  402408:	4b01      	ldr	r3, [pc, #4]	; (402410 <xTaskGetTickCount+0x8>)
  40240a:	6818      	ldr	r0, [r3, #0]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
}
  40240c:	4770      	bx	lr
  40240e:	bf00      	nop
  402410:	2000add8 	.word	0x2000add8

00402414 <xTaskIncrementTick>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
  402414:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
  402418:	4b3d      	ldr	r3, [pc, #244]	; (402510 <xTaskIncrementTick+0xfc>)
  40241a:	681b      	ldr	r3, [r3, #0]
  40241c:	2b00      	cmp	r3, #0
  40241e:	d167      	bne.n	4024f0 <xTaskIncrementTick+0xdc>
	{
		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		++xTickCount;
  402420:	4b3c      	ldr	r3, [pc, #240]	; (402514 <xTaskIncrementTick+0x100>)
  402422:	681a      	ldr	r2, [r3, #0]
  402424:	3201      	adds	r2, #1
  402426:	601a      	str	r2, [r3, #0]

		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
  402428:	681e      	ldr	r6, [r3, #0]

			if( xConstTickCount == ( TickType_t ) 0U )
  40242a:	b996      	cbnz	r6, 402452 <xTaskIncrementTick+0x3e>
			{
				taskSWITCH_DELAYED_LISTS();
  40242c:	4b3a      	ldr	r3, [pc, #232]	; (402518 <xTaskIncrementTick+0x104>)
  40242e:	681b      	ldr	r3, [r3, #0]
  402430:	681b      	ldr	r3, [r3, #0]
  402432:	b113      	cbz	r3, 40243a <xTaskIncrementTick+0x26>
  402434:	4b39      	ldr	r3, [pc, #228]	; (40251c <xTaskIncrementTick+0x108>)
  402436:	4798      	blx	r3
  402438:	e7fe      	b.n	402438 <xTaskIncrementTick+0x24>
  40243a:	4a37      	ldr	r2, [pc, #220]	; (402518 <xTaskIncrementTick+0x104>)
  40243c:	6811      	ldr	r1, [r2, #0]
  40243e:	4b38      	ldr	r3, [pc, #224]	; (402520 <xTaskIncrementTick+0x10c>)
  402440:	6818      	ldr	r0, [r3, #0]
  402442:	6010      	str	r0, [r2, #0]
  402444:	6019      	str	r1, [r3, #0]
  402446:	4a37      	ldr	r2, [pc, #220]	; (402524 <xTaskIncrementTick+0x110>)
  402448:	6813      	ldr	r3, [r2, #0]
  40244a:	3301      	adds	r3, #1
  40244c:	6013      	str	r3, [r2, #0]
  40244e:	4b36      	ldr	r3, [pc, #216]	; (402528 <xTaskIncrementTick+0x114>)
  402450:	4798      	blx	r3

			/* See if this tick has made a timeout expire.  Tasks are stored in
			the	queue in the order of their wake time - meaning once one task
			has been found whose block time has not expired there is no need to
			look any further down the list. */
			if( xConstTickCount >= xNextTaskUnblockTime )
  402452:	4b36      	ldr	r3, [pc, #216]	; (40252c <xTaskIncrementTick+0x118>)
  402454:	681b      	ldr	r3, [r3, #0]
  402456:	429e      	cmp	r6, r3
  402458:	d201      	bcs.n	40245e <xTaskIncrementTick+0x4a>

BaseType_t xTaskIncrementTick( void )
{
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
  40245a:	2400      	movs	r4, #0
  40245c:	e037      	b.n	4024ce <xTaskIncrementTick+0xba>
  40245e:	2400      	movs	r4, #0
			look any further down the list. */
			if( xConstTickCount >= xNextTaskUnblockTime )
			{
				for( ;; )
				{
					if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
  402460:	f8df 90b4 	ldr.w	r9, [pc, #180]	; 402518 <xTaskIncrementTick+0x104>
						{
							mtCOVERAGE_TEST_MARKER();
						}

						/* It is time to remove the item from the Blocked state. */
						( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
  402464:	f8df 80e4 	ldr.w	r8, [pc, #228]	; 40254c <xTaskIncrementTick+0x138>
							mtCOVERAGE_TEST_MARKER();
						}

						/* Place the unblocked task into the appropriate ready
						list. */
						prvAddTaskToReadyList( pxTCB );
  402468:	4f31      	ldr	r7, [pc, #196]	; (402530 <xTaskIncrementTick+0x11c>)
			look any further down the list. */
			if( xConstTickCount >= xNextTaskUnblockTime )
			{
				for( ;; )
				{
					if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
  40246a:	f8d9 3000 	ldr.w	r3, [r9]
  40246e:	681b      	ldr	r3, [r3, #0]
  402470:	b923      	cbnz	r3, 40247c <xTaskIncrementTick+0x68>
						/* The delayed list is empty.  Set xNextTaskUnblockTime
						to the maximum possible value so it is extremely
						unlikely that the
						if( xTickCount >= xNextTaskUnblockTime ) test will pass
						next time through. */
						xNextTaskUnblockTime = portMAX_DELAY;
  402472:	f04f 32ff 	mov.w	r2, #4294967295
  402476:	4b2d      	ldr	r3, [pc, #180]	; (40252c <xTaskIncrementTick+0x118>)
  402478:	601a      	str	r2, [r3, #0]
						break;
  40247a:	e028      	b.n	4024ce <xTaskIncrementTick+0xba>
					{
						/* The delayed list is not empty, get the value of the
						item at the head of the delayed list.  This is the time
						at which the task at the head of the delayed list must
						be removed from the Blocked state. */
						pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
  40247c:	f8d9 3000 	ldr.w	r3, [r9]
  402480:	68db      	ldr	r3, [r3, #12]
  402482:	68dd      	ldr	r5, [r3, #12]
						xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
  402484:	686b      	ldr	r3, [r5, #4]

						if( xConstTickCount < xItemValue )
  402486:	429e      	cmp	r6, r3
  402488:	d202      	bcs.n	402490 <xTaskIncrementTick+0x7c>
							/* It is not time to unblock this item yet, but the
							item value is the time at which the task at the head
							of the blocked list must be removed from the Blocked
							state -	so record the item value in
							xNextTaskUnblockTime. */
							xNextTaskUnblockTime = xItemValue;
  40248a:	4a28      	ldr	r2, [pc, #160]	; (40252c <xTaskIncrementTick+0x118>)
  40248c:	6013      	str	r3, [r2, #0]
							break;
  40248e:	e01e      	b.n	4024ce <xTaskIncrementTick+0xba>
						{
							mtCOVERAGE_TEST_MARKER();
						}

						/* It is time to remove the item from the Blocked state. */
						( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
  402490:	f105 0a04 	add.w	sl, r5, #4
  402494:	4650      	mov	r0, sl
  402496:	47c0      	blx	r8

						/* Is the task waiting on an event also?  If so remove
						it from the event list. */
						if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
  402498:	6aab      	ldr	r3, [r5, #40]	; 0x28
  40249a:	b113      	cbz	r3, 4024a2 <xTaskIncrementTick+0x8e>
						{
							( void ) uxListRemove( &( pxTCB->xEventListItem ) );
  40249c:	f105 0018 	add.w	r0, r5, #24
  4024a0:	47c0      	blx	r8
							mtCOVERAGE_TEST_MARKER();
						}

						/* Place the unblocked task into the appropriate ready
						list. */
						prvAddTaskToReadyList( pxTCB );
  4024a2:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
  4024a4:	683b      	ldr	r3, [r7, #0]
  4024a6:	2201      	movs	r2, #1
  4024a8:	4082      	lsls	r2, r0
  4024aa:	4313      	orrs	r3, r2
  4024ac:	603b      	str	r3, [r7, #0]
  4024ae:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  4024b2:	4b20      	ldr	r3, [pc, #128]	; (402534 <xTaskIncrementTick+0x120>)
  4024b4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  4024b8:	4651      	mov	r1, sl
  4024ba:	4b1f      	ldr	r3, [pc, #124]	; (402538 <xTaskIncrementTick+0x124>)
  4024bc:	4798      	blx	r3
						{
							/* Preemption is on, but a context switch should
							only be performed if the unblocked task has a
							priority that is equal to or higher than the
							currently executing task. */
							if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
  4024be:	4b1f      	ldr	r3, [pc, #124]	; (40253c <xTaskIncrementTick+0x128>)
  4024c0:	681b      	ldr	r3, [r3, #0]
  4024c2:	6aea      	ldr	r2, [r5, #44]	; 0x2c
  4024c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
							{
								xSwitchRequired = pdTRUE;
  4024c6:	429a      	cmp	r2, r3
  4024c8:	bf28      	it	cs
  4024ca:	2401      	movcs	r4, #1
  4024cc:	e7cd      	b.n	40246a <xTaskIncrementTick+0x56>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
  4024ce:	4b1b      	ldr	r3, [pc, #108]	; (40253c <xTaskIncrementTick+0x128>)
  4024d0:	681b      	ldr	r3, [r3, #0]
  4024d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  4024d4:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  4024d8:	4a16      	ldr	r2, [pc, #88]	; (402534 <xTaskIncrementTick+0x120>)
  4024da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
			{
				xSwitchRequired = pdTRUE;
  4024de:	2b02      	cmp	r3, #2
  4024e0:	bf28      	it	cs
  4024e2:	2401      	movcs	r4, #1

		#if ( configUSE_TICK_HOOK == 1 )
		{
			/* Guard against the tick hook being called when the pended tick
			count is being unwound (when the scheduler is being unlocked). */
			if( uxPendedTicks == ( UBaseType_t ) 0U )
  4024e4:	4b16      	ldr	r3, [pc, #88]	; (402540 <xTaskIncrementTick+0x12c>)
  4024e6:	681b      	ldr	r3, [r3, #0]
  4024e8:	b94b      	cbnz	r3, 4024fe <xTaskIncrementTick+0xea>
			{
				vApplicationTickHook();
  4024ea:	4b16      	ldr	r3, [pc, #88]	; (402544 <xTaskIncrementTick+0x130>)
  4024ec:	4798      	blx	r3
  4024ee:	e006      	b.n	4024fe <xTaskIncrementTick+0xea>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
  4024f0:	4a13      	ldr	r2, [pc, #76]	; (402540 <xTaskIncrementTick+0x12c>)
  4024f2:	6813      	ldr	r3, [r2, #0]
  4024f4:	3301      	adds	r3, #1
  4024f6:	6013      	str	r3, [r2, #0]

		/* The tick hook gets called at regular intervals, even if the
		scheduler is locked. */
		#if ( configUSE_TICK_HOOK == 1 )
		{
			vApplicationTickHook();
  4024f8:	4b12      	ldr	r3, [pc, #72]	; (402544 <xTaskIncrementTick+0x130>)
  4024fa:	4798      	blx	r3

BaseType_t xTaskIncrementTick( void )
{
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
  4024fc:	2400      	movs	r4, #0
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
  4024fe:	4b12      	ldr	r3, [pc, #72]	; (402548 <xTaskIncrementTick+0x134>)
  402500:	681b      	ldr	r3, [r3, #0]
		{
			xSwitchRequired = pdTRUE;
  402502:	2b00      	cmp	r3, #0
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
}
  402504:	bf0c      	ite	eq
  402506:	4620      	moveq	r0, r4
  402508:	2001      	movne	r0, #1
  40250a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40250e:	bf00      	nop
  402510:	2000add4 	.word	0x2000add4
  402514:	2000add8 	.word	0x2000add8
  402518:	2000ad30 	.word	0x2000ad30
  40251c:	00401571 	.word	0x00401571
  402520:	2000addc 	.word	0x2000addc
  402524:	2000ad2c 	.word	0x2000ad2c
  402528:	00402101 	.word	0x00402101
  40252c:	2000add0 	.word	0x2000add0
  402530:	2000ae24 	.word	0x2000ae24
  402534:	2000ad54 	.word	0x2000ad54
  402538:	00401485 	.word	0x00401485
  40253c:	2000adcc 	.word	0x2000adcc
  402540:	2000ad50 	.word	0x2000ad50
  402544:	00407bd9 	.word	0x00407bd9
  402548:	2000ae28 	.word	0x2000ae28
  40254c:	004014d1 	.word	0x004014d1

00402550 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
  402550:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
TCB_t *pxTCB;
BaseType_t xAlreadyYielded = pdFALSE;

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
  402554:	4b2f      	ldr	r3, [pc, #188]	; (402614 <xTaskResumeAll+0xc4>)
  402556:	681b      	ldr	r3, [r3, #0]
  402558:	b913      	cbnz	r3, 402560 <xTaskResumeAll+0x10>
  40255a:	4b2f      	ldr	r3, [pc, #188]	; (402618 <xTaskResumeAll+0xc8>)
  40255c:	4798      	blx	r3
  40255e:	e7fe      	b.n	40255e <xTaskResumeAll+0xe>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
  402560:	4b2e      	ldr	r3, [pc, #184]	; (40261c <xTaskResumeAll+0xcc>)
  402562:	4798      	blx	r3
	{
		--uxSchedulerSuspended;
  402564:	4b2b      	ldr	r3, [pc, #172]	; (402614 <xTaskResumeAll+0xc4>)
  402566:	681a      	ldr	r2, [r3, #0]
  402568:	3a01      	subs	r2, #1
  40256a:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
  40256c:	681b      	ldr	r3, [r3, #0]
  40256e:	2b00      	cmp	r3, #0
  402570:	d147      	bne.n	402602 <xTaskResumeAll+0xb2>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
  402572:	4b2b      	ldr	r3, [pc, #172]	; (402620 <xTaskResumeAll+0xd0>)
  402574:	681b      	ldr	r3, [r3, #0]
  402576:	bb0b      	cbnz	r3, 4025bc <xTaskResumeAll+0x6c>
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
TCB_t *pxTCB;
BaseType_t xAlreadyYielded = pdFALSE;
  402578:	2400      	movs	r4, #0
  40257a:	e045      	b.n	402608 <xTaskResumeAll+0xb8>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
  40257c:	68fb      	ldr	r3, [r7, #12]
  40257e:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
  402580:	f104 0018 	add.w	r0, r4, #24
  402584:	47b0      	blx	r6
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
  402586:	f104 0804 	add.w	r8, r4, #4
  40258a:	4640      	mov	r0, r8
  40258c:	47b0      	blx	r6
					prvAddTaskToReadyList( pxTCB );
  40258e:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  402590:	682b      	ldr	r3, [r5, #0]
  402592:	2201      	movs	r2, #1
  402594:	4082      	lsls	r2, r0
  402596:	4313      	orrs	r3, r2
  402598:	602b      	str	r3, [r5, #0]
  40259a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  40259e:	eb09 0080 	add.w	r0, r9, r0, lsl #2
  4025a2:	4641      	mov	r1, r8
  4025a4:	4b1f      	ldr	r3, [pc, #124]	; (402624 <xTaskResumeAll+0xd4>)
  4025a6:	4798      	blx	r3

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
  4025a8:	4b1f      	ldr	r3, [pc, #124]	; (402628 <xTaskResumeAll+0xd8>)
  4025aa:	681b      	ldr	r3, [r3, #0]
  4025ac:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  4025ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  4025b0:	429a      	cmp	r2, r3
  4025b2:	d308      	bcc.n	4025c6 <xTaskResumeAll+0x76>
					{
						xYieldPending = pdTRUE;
  4025b4:	2201      	movs	r2, #1
  4025b6:	4b1d      	ldr	r3, [pc, #116]	; (40262c <xTaskResumeAll+0xdc>)
  4025b8:	601a      	str	r2, [r3, #0]
  4025ba:	e004      	b.n	4025c6 <xTaskResumeAll+0x76>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
  4025bc:	4f1c      	ldr	r7, [pc, #112]	; (402630 <xTaskResumeAll+0xe0>)
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
  4025be:	4e1d      	ldr	r6, [pc, #116]	; (402634 <xTaskResumeAll+0xe4>)
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
					prvAddTaskToReadyList( pxTCB );
  4025c0:	4d1d      	ldr	r5, [pc, #116]	; (402638 <xTaskResumeAll+0xe8>)
  4025c2:	f8df 9088 	ldr.w	r9, [pc, #136]	; 40264c <xTaskResumeAll+0xfc>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
  4025c6:	683b      	ldr	r3, [r7, #0]
  4025c8:	2b00      	cmp	r3, #0
  4025ca:	d1d7      	bne.n	40257c <xTaskResumeAll+0x2c>

				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				if( uxPendedTicks > ( UBaseType_t ) 0U )
  4025cc:	4b1b      	ldr	r3, [pc, #108]	; (40263c <xTaskResumeAll+0xec>)
  4025ce:	681b      	ldr	r3, [r3, #0]
  4025d0:	b17b      	cbz	r3, 4025f2 <xTaskResumeAll+0xa2>
				{
					while( uxPendedTicks > ( UBaseType_t ) 0U )
  4025d2:	4b1a      	ldr	r3, [pc, #104]	; (40263c <xTaskResumeAll+0xec>)
  4025d4:	681b      	ldr	r3, [r3, #0]
  4025d6:	b163      	cbz	r3, 4025f2 <xTaskResumeAll+0xa2>
					{
						if( xTaskIncrementTick() != pdFALSE )
  4025d8:	4e19      	ldr	r6, [pc, #100]	; (402640 <xTaskResumeAll+0xf0>)
						{
							xYieldPending = pdTRUE;
  4025da:	4d14      	ldr	r5, [pc, #80]	; (40262c <xTaskResumeAll+0xdc>)
						}
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
						--uxPendedTicks;
  4025dc:	4c17      	ldr	r4, [pc, #92]	; (40263c <xTaskResumeAll+0xec>)
				time. */
				if( uxPendedTicks > ( UBaseType_t ) 0U )
				{
					while( uxPendedTicks > ( UBaseType_t ) 0U )
					{
						if( xTaskIncrementTick() != pdFALSE )
  4025de:	47b0      	blx	r6
  4025e0:	b108      	cbz	r0, 4025e6 <xTaskResumeAll+0x96>
						{
							xYieldPending = pdTRUE;
  4025e2:	2301      	movs	r3, #1
  4025e4:	602b      	str	r3, [r5, #0]
						}
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
						--uxPendedTicks;
  4025e6:	6823      	ldr	r3, [r4, #0]
  4025e8:	3b01      	subs	r3, #1
  4025ea:	6023      	str	r3, [r4, #0]
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				if( uxPendedTicks > ( UBaseType_t ) 0U )
				{
					while( uxPendedTicks > ( UBaseType_t ) 0U )
  4025ec:	6823      	ldr	r3, [r4, #0]
  4025ee:	2b00      	cmp	r3, #0
  4025f0:	d1f5      	bne.n	4025de <xTaskResumeAll+0x8e>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				if( xYieldPending == pdTRUE )
  4025f2:	4b0e      	ldr	r3, [pc, #56]	; (40262c <xTaskResumeAll+0xdc>)
  4025f4:	681b      	ldr	r3, [r3, #0]
  4025f6:	2b01      	cmp	r3, #1
  4025f8:	d105      	bne.n	402606 <xTaskResumeAll+0xb6>
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
  4025fa:	4b12      	ldr	r3, [pc, #72]	; (402644 <xTaskResumeAll+0xf4>)
  4025fc:	4798      	blx	r3

				if( xYieldPending == pdTRUE )
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
  4025fe:	2401      	movs	r4, #1
  402600:	e002      	b.n	402608 <xTaskResumeAll+0xb8>
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
TCB_t *pxTCB;
BaseType_t xAlreadyYielded = pdFALSE;
  402602:	2400      	movs	r4, #0
  402604:	e000      	b.n	402608 <xTaskResumeAll+0xb8>
  402606:	2400      	movs	r4, #0
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
  402608:	4b0f      	ldr	r3, [pc, #60]	; (402648 <xTaskResumeAll+0xf8>)
  40260a:	4798      	blx	r3

	return xAlreadyYielded;
}
  40260c:	4620      	mov	r0, r4
  40260e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  402612:	bf00      	nop
  402614:	2000add4 	.word	0x2000add4
  402618:	00401571 	.word	0x00401571
  40261c:	004015a1 	.word	0x004015a1
  402620:	2000adf8 	.word	0x2000adf8
  402624:	00401485 	.word	0x00401485
  402628:	2000adcc 	.word	0x2000adcc
  40262c:	2000ae28 	.word	0x2000ae28
  402630:	2000ade0 	.word	0x2000ade0
  402634:	004014d1 	.word	0x004014d1
  402638:	2000ae24 	.word	0x2000ae24
  40263c:	2000ad50 	.word	0x2000ad50
  402640:	00402415 	.word	0x00402415
  402644:	00401559 	.word	0x00401559
  402648:	004015e1 	.word	0x004015e1
  40264c:	2000ad54 	.word	0x2000ad54

00402650 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
  402650:	b510      	push	{r4, lr}
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded = pdFALSE;


		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
  402652:	b308      	cbz	r0, 402698 <vTaskDelay+0x48>
  402654:	4604      	mov	r4, r0
		{
			configASSERT( uxSchedulerSuspended == 0 );
  402656:	4b12      	ldr	r3, [pc, #72]	; (4026a0 <vTaskDelay+0x50>)
  402658:	681b      	ldr	r3, [r3, #0]
  40265a:	b113      	cbz	r3, 402662 <vTaskDelay+0x12>
  40265c:	4b11      	ldr	r3, [pc, #68]	; (4026a4 <vTaskDelay+0x54>)
  40265e:	4798      	blx	r3
  402660:	e7fe      	b.n	402660 <vTaskDelay+0x10>
			vTaskSuspendAll();
  402662:	4b11      	ldr	r3, [pc, #68]	; (4026a8 <vTaskDelay+0x58>)
  402664:	4798      	blx	r3
				This task cannot be in an event list as it is the currently
				executing task. */

				/* Calculate the time to wake - this may overflow but this is
				not a problem. */
				xTimeToWake = xTickCount + xTicksToDelay;
  402666:	4b11      	ldr	r3, [pc, #68]	; (4026ac <vTaskDelay+0x5c>)
  402668:	681b      	ldr	r3, [r3, #0]
  40266a:	441c      	add	r4, r3

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
  40266c:	4b10      	ldr	r3, [pc, #64]	; (4026b0 <vTaskDelay+0x60>)
  40266e:	6818      	ldr	r0, [r3, #0]
  402670:	3004      	adds	r0, #4
  402672:	4b10      	ldr	r3, [pc, #64]	; (4026b4 <vTaskDelay+0x64>)
  402674:	4798      	blx	r3
  402676:	b948      	cbnz	r0, 40268c <vTaskDelay+0x3c>
				{
					/* The current task must be in a ready list, so there is
					no need to check, and the port reset macro can be called
					directly. */
					portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
  402678:	4b0d      	ldr	r3, [pc, #52]	; (4026b0 <vTaskDelay+0x60>)
  40267a:	681a      	ldr	r2, [r3, #0]
  40267c:	490e      	ldr	r1, [pc, #56]	; (4026b8 <vTaskDelay+0x68>)
  40267e:	680b      	ldr	r3, [r1, #0]
  402680:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
  402682:	2201      	movs	r2, #1
  402684:	4082      	lsls	r2, r0
  402686:	ea23 0302 	bic.w	r3, r3, r2
  40268a:	600b      	str	r3, [r1, #0]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				prvAddCurrentTaskToDelayedList( xTimeToWake );
  40268c:	4620      	mov	r0, r4
  40268e:	4b0b      	ldr	r3, [pc, #44]	; (4026bc <vTaskDelay+0x6c>)
  402690:	4798      	blx	r3
			}
			xAlreadyYielded = xTaskResumeAll();
  402692:	4b0b      	ldr	r3, [pc, #44]	; (4026c0 <vTaskDelay+0x70>)
  402694:	4798      	blx	r3
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
  402696:	b908      	cbnz	r0, 40269c <vTaskDelay+0x4c>
		{
			portYIELD_WITHIN_API();
  402698:	4b0a      	ldr	r3, [pc, #40]	; (4026c4 <vTaskDelay+0x74>)
  40269a:	4798      	blx	r3
  40269c:	bd10      	pop	{r4, pc}
  40269e:	bf00      	nop
  4026a0:	2000add4 	.word	0x2000add4
  4026a4:	00401571 	.word	0x00401571
  4026a8:	004023f9 	.word	0x004023f9
  4026ac:	2000add8 	.word	0x2000add8
  4026b0:	2000adcc 	.word	0x2000adcc
  4026b4:	004014d1 	.word	0x004014d1
  4026b8:	2000ae24 	.word	0x2000ae24
  4026bc:	0040212d 	.word	0x0040212d
  4026c0:	00402551 	.word	0x00402551
  4026c4:	00401559 	.word	0x00401559

004026c8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
  4026c8:	b580      	push	{r7, lr}
	{
		BaseType_t xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxTasksDeleted > ( UBaseType_t ) 0U )
  4026ca:	4d16      	ldr	r5, [pc, #88]	; (402724 <prvIdleTask+0x5c>)
		{
			vTaskSuspendAll();
  4026cc:	f8df 807c 	ldr.w	r8, [pc, #124]	; 40274c <prvIdleTask+0x84>
			{
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
  4026d0:	4e15      	ldr	r6, [pc, #84]	; (402728 <prvIdleTask+0x60>)
			}
			( void ) xTaskResumeAll();
  4026d2:	4f16      	ldr	r7, [pc, #88]	; (40272c <prvIdleTask+0x64>)
  4026d4:	e019      	b.n	40270a <prvIdleTask+0x42>

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxTasksDeleted > ( UBaseType_t ) 0U )
		{
			vTaskSuspendAll();
  4026d6:	47c0      	blx	r8
			{
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
  4026d8:	6834      	ldr	r4, [r6, #0]
			}
			( void ) xTaskResumeAll();
  4026da:	47b8      	blx	r7

			if( xListIsEmpty == pdFALSE )
  4026dc:	b1ac      	cbz	r4, 40270a <prvIdleTask+0x42>
			{
				TCB_t *pxTCB;

				taskENTER_CRITICAL();
  4026de:	4b14      	ldr	r3, [pc, #80]	; (402730 <prvIdleTask+0x68>)
  4026e0:	4798      	blx	r3
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
  4026e2:	68f3      	ldr	r3, [r6, #12]
  4026e4:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
  4026e6:	1d20      	adds	r0, r4, #4
  4026e8:	4b12      	ldr	r3, [pc, #72]	; (402734 <prvIdleTask+0x6c>)
  4026ea:	4798      	blx	r3
					--uxCurrentNumberOfTasks;
  4026ec:	4a12      	ldr	r2, [pc, #72]	; (402738 <prvIdleTask+0x70>)
  4026ee:	6813      	ldr	r3, [r2, #0]
  4026f0:	3b01      	subs	r3, #1
  4026f2:	6013      	str	r3, [r2, #0]
					--uxTasksDeleted;
  4026f4:	682b      	ldr	r3, [r5, #0]
  4026f6:	3b01      	subs	r3, #1
  4026f8:	602b      	str	r3, [r5, #0]
				}
				taskEXIT_CRITICAL();
  4026fa:	4b10      	ldr	r3, [pc, #64]	; (40273c <prvIdleTask+0x74>)
  4026fc:	4798      	blx	r3
				vPortFreeAligned( pxTCB->pxStack );
			}
		}
		#else
		{
			vPortFreeAligned( pxTCB->pxStack );
  4026fe:	6b20      	ldr	r0, [r4, #48]	; 0x30
  402700:	f8df 904c 	ldr.w	r9, [pc, #76]	; 402750 <prvIdleTask+0x88>
  402704:	47c8      	blx	r9
		}
		#endif

		vPortFree( pxTCB );
  402706:	4620      	mov	r0, r4
  402708:	47c8      	blx	r9
	{
		BaseType_t xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxTasksDeleted > ( UBaseType_t ) 0U )
  40270a:	682b      	ldr	r3, [r5, #0]
  40270c:	2b00      	cmp	r3, #0
  40270e:	d1e2      	bne.n	4026d6 <prvIdleTask+0xe>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
  402710:	4b0b      	ldr	r3, [pc, #44]	; (402740 <prvIdleTask+0x78>)
  402712:	681b      	ldr	r3, [r3, #0]
  402714:	2b01      	cmp	r3, #1
  402716:	d901      	bls.n	40271c <prvIdleTask+0x54>
			{
				taskYIELD();
  402718:	4b0a      	ldr	r3, [pc, #40]	; (402744 <prvIdleTask+0x7c>)
  40271a:	4798      	blx	r3
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
  40271c:	4b0a      	ldr	r3, [pc, #40]	; (402748 <prvIdleTask+0x80>)
  40271e:	4798      	blx	r3
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_TICKLESS_IDLE */
	}
  402720:	e7f3      	b.n	40270a <prvIdleTask+0x42>
  402722:	bf00      	nop
  402724:	2000ad38 	.word	0x2000ad38
  402728:	2000adb8 	.word	0x2000adb8
  40272c:	00402551 	.word	0x00402551
  402730:	004015a1 	.word	0x004015a1
  402734:	004014d1 	.word	0x004014d1
  402738:	2000adf8 	.word	0x2000adf8
  40273c:	004015e1 	.word	0x004015e1
  402740:	2000ad54 	.word	0x2000ad54
  402744:	00401559 	.word	0x00401559
  402748:	00407bd5 	.word	0x00407bd5
  40274c:	004023f9 	.word	0x004023f9
  402750:	00401959 	.word	0x00401959

00402754 <vTaskSwitchContext>:
#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
  402754:	4b28      	ldr	r3, [pc, #160]	; (4027f8 <vTaskSwitchContext+0xa4>)
  402756:	681b      	ldr	r3, [r3, #0]
  402758:	b11b      	cbz	r3, 402762 <vTaskSwitchContext+0xe>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
  40275a:	2201      	movs	r2, #1
  40275c:	4b27      	ldr	r3, [pc, #156]	; (4027fc <vTaskSwitchContext+0xa8>)
  40275e:	601a      	str	r2, [r3, #0]
  402760:	4770      	bx	lr

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
  402762:	b510      	push	{r4, lr}
		switch. */
		xYieldPending = pdTRUE;
	}
	else
	{
		xYieldPending = pdFALSE;
  402764:	2200      	movs	r2, #0
  402766:	4b25      	ldr	r3, [pc, #148]	; (4027fc <vTaskSwitchContext+0xa8>)
  402768:	601a      	str	r2, [r3, #0]
				ulTaskSwitchedInTime = ulTotalRunTime;
		}
		#endif /* configGENERATE_RUN_TIME_STATS */

		/* Check for stack overflow, if configured. */
		taskCHECK_FOR_STACK_OVERFLOW();
  40276a:	4b25      	ldr	r3, [pc, #148]	; (402800 <vTaskSwitchContext+0xac>)
  40276c:	681b      	ldr	r3, [r3, #0]
  40276e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  402770:	681a      	ldr	r2, [r3, #0]
  402772:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
  402776:	d10b      	bne.n	402790 <vTaskSwitchContext+0x3c>
  402778:	685a      	ldr	r2, [r3, #4]
  40277a:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
  40277e:	d107      	bne.n	402790 <vTaskSwitchContext+0x3c>
  402780:	689a      	ldr	r2, [r3, #8]
  402782:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
  402786:	d103      	bne.n	402790 <vTaskSwitchContext+0x3c>
  402788:	68db      	ldr	r3, [r3, #12]
  40278a:	f1b3 3fa5 	cmp.w	r3, #2779096485	; 0xa5a5a5a5
  40278e:	d005      	beq.n	40279c <vTaskSwitchContext+0x48>
  402790:	4b1b      	ldr	r3, [pc, #108]	; (402800 <vTaskSwitchContext+0xac>)
  402792:	6818      	ldr	r0, [r3, #0]
  402794:	6819      	ldr	r1, [r3, #0]
  402796:	3134      	adds	r1, #52	; 0x34
  402798:	4b1a      	ldr	r3, [pc, #104]	; (402804 <vTaskSwitchContext+0xb0>)
  40279a:	4798      	blx	r3

		/* Select a new task to run using either the generic C or port
		optimised asm code. */
		taskSELECT_HIGHEST_PRIORITY_TASK();
  40279c:	4b1a      	ldr	r3, [pc, #104]	; (402808 <vTaskSwitchContext+0xb4>)
  40279e:	681b      	ldr	r3, [r3, #0]
	/* Generic helper function. */
	__attribute__( ( always_inline ) ) static inline uint8_t ucPortCountLeadingZeros( uint32_t ulBitmap )
	{
	uint8_t ucReturn;

		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) );
  4027a0:	fab3 f383 	clz	r3, r3
  4027a4:	b2db      	uxtb	r3, r3
  4027a6:	f1c3 031f 	rsb	r3, r3, #31
  4027aa:	eb03 0183 	add.w	r1, r3, r3, lsl #2
  4027ae:	4a17      	ldr	r2, [pc, #92]	; (40280c <vTaskSwitchContext+0xb8>)
  4027b0:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
  4027b4:	b912      	cbnz	r2, 4027bc <vTaskSwitchContext+0x68>
  4027b6:	4b16      	ldr	r3, [pc, #88]	; (402810 <vTaskSwitchContext+0xbc>)
  4027b8:	4798      	blx	r3
  4027ba:	e7fe      	b.n	4027ba <vTaskSwitchContext+0x66>
  4027bc:	4a13      	ldr	r2, [pc, #76]	; (40280c <vTaskSwitchContext+0xb8>)
  4027be:	0099      	lsls	r1, r3, #2
  4027c0:	18c8      	adds	r0, r1, r3
  4027c2:	eb02 0080 	add.w	r0, r2, r0, lsl #2
  4027c6:	6844      	ldr	r4, [r0, #4]
  4027c8:	6864      	ldr	r4, [r4, #4]
  4027ca:	6044      	str	r4, [r0, #4]
  4027cc:	4602      	mov	r2, r0
  4027ce:	3208      	adds	r2, #8
  4027d0:	4294      	cmp	r4, r2
  4027d2:	d106      	bne.n	4027e2 <vTaskSwitchContext+0x8e>
  4027d4:	6860      	ldr	r0, [r4, #4]
  4027d6:	eb03 0183 	add.w	r1, r3, r3, lsl #2
  4027da:	4a0c      	ldr	r2, [pc, #48]	; (40280c <vTaskSwitchContext+0xb8>)
  4027dc:	eb02 0281 	add.w	r2, r2, r1, lsl #2
  4027e0:	6050      	str	r0, [r2, #4]
  4027e2:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  4027e6:	4a09      	ldr	r2, [pc, #36]	; (40280c <vTaskSwitchContext+0xb8>)
  4027e8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
  4027ec:	685b      	ldr	r3, [r3, #4]
  4027ee:	68da      	ldr	r2, [r3, #12]
  4027f0:	4b03      	ldr	r3, [pc, #12]	; (402800 <vTaskSwitchContext+0xac>)
  4027f2:	601a      	str	r2, [r3, #0]
  4027f4:	bd10      	pop	{r4, pc}
  4027f6:	bf00      	nop
  4027f8:	2000add4 	.word	0x2000add4
  4027fc:	2000ae28 	.word	0x2000ae28
  402800:	2000adcc 	.word	0x2000adcc
  402804:	00407bc5 	.word	0x00407bc5
  402808:	2000ae24 	.word	0x2000ae24
  40280c:	2000ad54 	.word	0x2000ad54
  402810:	00401571 	.word	0x00401571

00402814 <vTaskPlaceOnEventList>:
	}
}
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
  402814:	b538      	push	{r3, r4, r5, lr}
TickType_t xTimeToWake;

	configASSERT( pxEventList );
  402816:	b910      	cbnz	r0, 40281e <vTaskPlaceOnEventList+0xa>
  402818:	4b13      	ldr	r3, [pc, #76]	; (402868 <vTaskPlaceOnEventList+0x54>)
  40281a:	4798      	blx	r3
  40281c:	e7fe      	b.n	40281c <vTaskPlaceOnEventList+0x8>
  40281e:	460c      	mov	r4, r1

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
  402820:	4d12      	ldr	r5, [pc, #72]	; (40286c <vTaskPlaceOnEventList+0x58>)
  402822:	6829      	ldr	r1, [r5, #0]
  402824:	3118      	adds	r1, #24
  402826:	4b12      	ldr	r3, [pc, #72]	; (402870 <vTaskPlaceOnEventList+0x5c>)
  402828:	4798      	blx	r3

	/* The task must be removed from from the ready list before it is added to
	the blocked list as the same list item is used for both lists.  Exclusive
	access to the ready lists guaranteed because the scheduler is locked. */
	if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
  40282a:	6828      	ldr	r0, [r5, #0]
  40282c:	3004      	adds	r0, #4
  40282e:	4b11      	ldr	r3, [pc, #68]	; (402874 <vTaskPlaceOnEventList+0x60>)
  402830:	4798      	blx	r3
  402832:	b940      	cbnz	r0, 402846 <vTaskPlaceOnEventList+0x32>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
  402834:	682a      	ldr	r2, [r5, #0]
  402836:	4910      	ldr	r1, [pc, #64]	; (402878 <vTaskPlaceOnEventList+0x64>)
  402838:	680b      	ldr	r3, [r1, #0]
  40283a:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
  40283c:	2201      	movs	r2, #1
  40283e:	4082      	lsls	r2, r0
  402840:	ea23 0302 	bic.w	r3, r3, r2
  402844:	600b      	str	r3, [r1, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( xTicksToWait == portMAX_DELAY )
  402846:	f1b4 3fff 	cmp.w	r4, #4294967295
  40284a:	d106      	bne.n	40285a <vTaskPlaceOnEventList+0x46>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure the task is not woken by a timing event.  It will
			block indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xGenericListItem ) );
  40284c:	4b07      	ldr	r3, [pc, #28]	; (40286c <vTaskPlaceOnEventList+0x58>)
  40284e:	6819      	ldr	r1, [r3, #0]
  402850:	480a      	ldr	r0, [pc, #40]	; (40287c <vTaskPlaceOnEventList+0x68>)
  402852:	3104      	adds	r1, #4
  402854:	4b0a      	ldr	r3, [pc, #40]	; (402880 <vTaskPlaceOnEventList+0x6c>)
  402856:	4798      	blx	r3
  402858:	bd38      	pop	{r3, r4, r5, pc}
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			scheduler will handle it. */
			xTimeToWake = xTickCount + xTicksToWait;
  40285a:	4b0a      	ldr	r3, [pc, #40]	; (402884 <vTaskPlaceOnEventList+0x70>)
  40285c:	6818      	ldr	r0, [r3, #0]
			prvAddCurrentTaskToDelayedList( xTimeToWake );
  40285e:	4420      	add	r0, r4
  402860:	4b09      	ldr	r3, [pc, #36]	; (402888 <vTaskPlaceOnEventList+0x74>)
  402862:	4798      	blx	r3
  402864:	bd38      	pop	{r3, r4, r5, pc}
  402866:	bf00      	nop
  402868:	00401571 	.word	0x00401571
  40286c:	2000adcc 	.word	0x2000adcc
  402870:	0040149d 	.word	0x0040149d
  402874:	004014d1 	.word	0x004014d1
  402878:	2000ae24 	.word	0x2000ae24
  40287c:	2000ae10 	.word	0x2000ae10
  402880:	00401485 	.word	0x00401485
  402884:	2000add8 	.word	0x2000add8
  402888:	0040212d 	.word	0x0040212d

0040288c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if configUSE_TIMERS == 1

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, const TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
  40288c:	b570      	push	{r4, r5, r6, lr}
	TickType_t xTimeToWake;

		configASSERT( pxEventList );
  40288e:	b910      	cbnz	r0, 402896 <vTaskPlaceOnEventListRestricted+0xa>
  402890:	4b13      	ldr	r3, [pc, #76]	; (4028e0 <vTaskPlaceOnEventListRestricted+0x54>)
  402892:	4798      	blx	r3
  402894:	e7fe      	b.n	402894 <vTaskPlaceOnEventListRestricted+0x8>
  402896:	460d      	mov	r5, r1
  402898:	4616      	mov	r6, r2

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
  40289a:	4c12      	ldr	r4, [pc, #72]	; (4028e4 <vTaskPlaceOnEventListRestricted+0x58>)
  40289c:	6821      	ldr	r1, [r4, #0]
  40289e:	3118      	adds	r1, #24
  4028a0:	4b11      	ldr	r3, [pc, #68]	; (4028e8 <vTaskPlaceOnEventListRestricted+0x5c>)
  4028a2:	4798      	blx	r3

		/* We must remove this task from the ready list before adding it to the
		blocked list as the same list item is used for both lists.  This
		function is called with the scheduler locked so interrupts will not
		access the lists at the same time. */
		if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
  4028a4:	6820      	ldr	r0, [r4, #0]
  4028a6:	3004      	adds	r0, #4
  4028a8:	4b10      	ldr	r3, [pc, #64]	; (4028ec <vTaskPlaceOnEventListRestricted+0x60>)
  4028aa:	4798      	blx	r3
  4028ac:	b940      	cbnz	r0, 4028c0 <vTaskPlaceOnEventListRestricted+0x34>
		{
			/* The current task must be in a ready list, so there is no need to
			check, and the port reset macro can be called directly. */
			portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
  4028ae:	6822      	ldr	r2, [r4, #0]
  4028b0:	490f      	ldr	r1, [pc, #60]	; (4028f0 <vTaskPlaceOnEventListRestricted+0x64>)
  4028b2:	680b      	ldr	r3, [r1, #0]
  4028b4:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
  4028b6:	2201      	movs	r2, #1
  4028b8:	4082      	lsls	r2, r0
  4028ba:	ea23 0302 	bic.w	r3, r3, r2
  4028be:	600b      	str	r3, [r1, #0]
		Ready state when the event it is waiting indefinitely for occurs).
		Blocking indefinitely is useful when using tickless idle mode as when
		all tasks are blocked indefinitely all timers can be turned off. */
		#if( INCLUDE_vTaskSuspend == 1 )
		{
			if( xWaitIndefinitely == pdTRUE )
  4028c0:	2e01      	cmp	r6, #1
  4028c2:	d106      	bne.n	4028d2 <vTaskPlaceOnEventListRestricted+0x46>
			{
				/* Add the task to the suspended task list instead of a delayed
				task list to ensure the task is not woken by a timing event.  It
				will block indefinitely. */
				vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xGenericListItem ) );
  4028c4:	4b07      	ldr	r3, [pc, #28]	; (4028e4 <vTaskPlaceOnEventListRestricted+0x58>)
  4028c6:	6819      	ldr	r1, [r3, #0]
  4028c8:	480a      	ldr	r0, [pc, #40]	; (4028f4 <vTaskPlaceOnEventListRestricted+0x68>)
  4028ca:	3104      	adds	r1, #4
  4028cc:	4b06      	ldr	r3, [pc, #24]	; (4028e8 <vTaskPlaceOnEventListRestricted+0x5c>)
  4028ce:	4798      	blx	r3
  4028d0:	bd70      	pop	{r4, r5, r6, pc}
			else
			{
				/* Calculate the time at which the task should be woken if the
				event does not occur.  This may overflow but this doesn't
				matter. */
				xTimeToWake = xTickCount + xTicksToWait;
  4028d2:	4b09      	ldr	r3, [pc, #36]	; (4028f8 <vTaskPlaceOnEventListRestricted+0x6c>)
  4028d4:	6818      	ldr	r0, [r3, #0]
				traceTASK_DELAY_UNTIL();
				prvAddCurrentTaskToDelayedList( xTimeToWake );
  4028d6:	4428      	add	r0, r5
  4028d8:	4b08      	ldr	r3, [pc, #32]	; (4028fc <vTaskPlaceOnEventListRestricted+0x70>)
  4028da:	4798      	blx	r3
  4028dc:	bd70      	pop	{r4, r5, r6, pc}
  4028de:	bf00      	nop
  4028e0:	00401571 	.word	0x00401571
  4028e4:	2000adcc 	.word	0x2000adcc
  4028e8:	00401485 	.word	0x00401485
  4028ec:	004014d1 	.word	0x004014d1
  4028f0:	2000ae24 	.word	0x2000ae24
  4028f4:	2000ae10 	.word	0x2000ae10
  4028f8:	2000add8 	.word	0x2000add8
  4028fc:	0040212d 	.word	0x0040212d

00402900 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
  402900:	b538      	push	{r3, r4, r5, lr}
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
  402902:	68c3      	ldr	r3, [r0, #12]
  402904:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
  402906:	b914      	cbnz	r4, 40290e <xTaskRemoveFromEventList+0xe>
  402908:	4b16      	ldr	r3, [pc, #88]	; (402964 <xTaskRemoveFromEventList+0x64>)
  40290a:	4798      	blx	r3
  40290c:	e7fe      	b.n	40290c <xTaskRemoveFromEventList+0xc>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
  40290e:	f104 0518 	add.w	r5, r4, #24
  402912:	4628      	mov	r0, r5
  402914:	4b14      	ldr	r3, [pc, #80]	; (402968 <xTaskRemoveFromEventList+0x68>)
  402916:	4798      	blx	r3

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
  402918:	4b14      	ldr	r3, [pc, #80]	; (40296c <xTaskRemoveFromEventList+0x6c>)
  40291a:	681b      	ldr	r3, [r3, #0]
  40291c:	b99b      	cbnz	r3, 402946 <xTaskRemoveFromEventList+0x46>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xGenericListItem ) );
  40291e:	1d25      	adds	r5, r4, #4
  402920:	4628      	mov	r0, r5
  402922:	4b11      	ldr	r3, [pc, #68]	; (402968 <xTaskRemoveFromEventList+0x68>)
  402924:	4798      	blx	r3
		prvAddTaskToReadyList( pxUnblockedTCB );
  402926:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  402928:	4911      	ldr	r1, [pc, #68]	; (402970 <xTaskRemoveFromEventList+0x70>)
  40292a:	680b      	ldr	r3, [r1, #0]
  40292c:	2201      	movs	r2, #1
  40292e:	4082      	lsls	r2, r0
  402930:	4313      	orrs	r3, r2
  402932:	600b      	str	r3, [r1, #0]
  402934:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  402938:	4b0e      	ldr	r3, [pc, #56]	; (402974 <xTaskRemoveFromEventList+0x74>)
  40293a:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  40293e:	4629      	mov	r1, r5
  402940:	4b0d      	ldr	r3, [pc, #52]	; (402978 <xTaskRemoveFromEventList+0x78>)
  402942:	4798      	blx	r3
  402944:	e003      	b.n	40294e <xTaskRemoveFromEventList+0x4e>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
  402946:	480d      	ldr	r0, [pc, #52]	; (40297c <xTaskRemoveFromEventList+0x7c>)
  402948:	4629      	mov	r1, r5
  40294a:	4b0b      	ldr	r3, [pc, #44]	; (402978 <xTaskRemoveFromEventList+0x78>)
  40294c:	4798      	blx	r3
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
  40294e:	4b0c      	ldr	r3, [pc, #48]	; (402980 <xTaskRemoveFromEventList+0x80>)
  402950:	681b      	ldr	r3, [r3, #0]
  402952:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  402954:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  402956:	429a      	cmp	r2, r3
		it should force a context switch now. */
		xReturn = pdTRUE;

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
  402958:	bf83      	ittte	hi
  40295a:	2001      	movhi	r0, #1
  40295c:	4b09      	ldrhi	r3, [pc, #36]	; (402984 <xTaskRemoveFromEventList+0x84>)
  40295e:	6018      	strhi	r0, [r3, #0]
	}
	else
	{
		xReturn = pdFALSE;
  402960:	2000      	movls	r0, #0
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
}
  402962:	bd38      	pop	{r3, r4, r5, pc}
  402964:	00401571 	.word	0x00401571
  402968:	004014d1 	.word	0x004014d1
  40296c:	2000add4 	.word	0x2000add4
  402970:	2000ae24 	.word	0x2000ae24
  402974:	2000ad54 	.word	0x2000ad54
  402978:	00401485 	.word	0x00401485
  40297c:	2000ade0 	.word	0x2000ade0
  402980:	2000adcc 	.word	0x2000adcc
  402984:	2000ae28 	.word	0x2000ae28

00402988 <vTaskSetTimeOutState>:
	return xReturn;
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
  402988:	b508      	push	{r3, lr}
	configASSERT( pxTimeOut );
  40298a:	b910      	cbnz	r0, 402992 <vTaskSetTimeOutState+0xa>
  40298c:	4b04      	ldr	r3, [pc, #16]	; (4029a0 <vTaskSetTimeOutState+0x18>)
  40298e:	4798      	blx	r3
  402990:	e7fe      	b.n	402990 <vTaskSetTimeOutState+0x8>
	pxTimeOut->xOverflowCount = xNumOfOverflows;
  402992:	4a04      	ldr	r2, [pc, #16]	; (4029a4 <vTaskSetTimeOutState+0x1c>)
  402994:	6812      	ldr	r2, [r2, #0]
  402996:	6002      	str	r2, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
  402998:	4a03      	ldr	r2, [pc, #12]	; (4029a8 <vTaskSetTimeOutState+0x20>)
  40299a:	6812      	ldr	r2, [r2, #0]
  40299c:	6042      	str	r2, [r0, #4]
  40299e:	bd08      	pop	{r3, pc}
  4029a0:	00401571 	.word	0x00401571
  4029a4:	2000ad2c 	.word	0x2000ad2c
  4029a8:	2000add8 	.word	0x2000add8

004029ac <xTaskCheckForTimeOut>:
}
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
  4029ac:	b538      	push	{r3, r4, r5, lr}
BaseType_t xReturn;

	configASSERT( pxTimeOut );
  4029ae:	b910      	cbnz	r0, 4029b6 <xTaskCheckForTimeOut+0xa>
  4029b0:	4b16      	ldr	r3, [pc, #88]	; (402a0c <xTaskCheckForTimeOut+0x60>)
  4029b2:	4798      	blx	r3
  4029b4:	e7fe      	b.n	4029b4 <xTaskCheckForTimeOut+0x8>
  4029b6:	460d      	mov	r5, r1
  4029b8:	4604      	mov	r4, r0
	configASSERT( pxTicksToWait );
  4029ba:	b911      	cbnz	r1, 4029c2 <xTaskCheckForTimeOut+0x16>
  4029bc:	4b13      	ldr	r3, [pc, #76]	; (402a0c <xTaskCheckForTimeOut+0x60>)
  4029be:	4798      	blx	r3
  4029c0:	e7fe      	b.n	4029c0 <xTaskCheckForTimeOut+0x14>

	taskENTER_CRITICAL();
  4029c2:	4b13      	ldr	r3, [pc, #76]	; (402a10 <xTaskCheckForTimeOut+0x64>)
  4029c4:	4798      	blx	r3
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
  4029c6:	4b13      	ldr	r3, [pc, #76]	; (402a14 <xTaskCheckForTimeOut+0x68>)
  4029c8:	6819      	ldr	r1, [r3, #0]

		#if ( INCLUDE_vTaskSuspend == 1 )
			/* If INCLUDE_vTaskSuspend is set to 1 and the block time specified is
			the maximum block time then the task should block indefinitely, and
			therefore never time out. */
			if( *pxTicksToWait == portMAX_DELAY )
  4029ca:	682b      	ldr	r3, [r5, #0]
  4029cc:	f1b3 3fff 	cmp.w	r3, #4294967295
  4029d0:	d013      	beq.n	4029fa <xTaskCheckForTimeOut+0x4e>
				xReturn = pdFALSE;
			}
			else /* We are not blocking indefinitely, perform the checks below. */
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
  4029d2:	4a11      	ldr	r2, [pc, #68]	; (402a18 <xTaskCheckForTimeOut+0x6c>)
  4029d4:	6812      	ldr	r2, [r2, #0]
  4029d6:	6820      	ldr	r0, [r4, #0]
  4029d8:	4290      	cmp	r0, r2
  4029da:	d002      	beq.n	4029e2 <xTaskCheckForTimeOut+0x36>
  4029dc:	6862      	ldr	r2, [r4, #4]
  4029de:	4291      	cmp	r1, r2
  4029e0:	d20d      	bcs.n	4029fe <xTaskCheckForTimeOut+0x52>
			was called, but has also overflowed since vTaskSetTimeOut() was called.
			It must have wrapped all the way around and gone past us again. This
			passed since vTaskSetTimeout() was called. */
			xReturn = pdTRUE;
		}
		else if( ( xConstTickCount - pxTimeOut->xTimeOnEntering ) < *pxTicksToWait )
  4029e2:	6862      	ldr	r2, [r4, #4]
  4029e4:	1a88      	subs	r0, r1, r2
  4029e6:	4283      	cmp	r3, r0
  4029e8:	d90b      	bls.n	402a02 <xTaskCheckForTimeOut+0x56>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= ( xConstTickCount -  pxTimeOut->xTimeOnEntering );
  4029ea:	1a52      	subs	r2, r2, r1
  4029ec:	4413      	add	r3, r2
  4029ee:	602b      	str	r3, [r5, #0]
			vTaskSetTimeOutState( pxTimeOut );
  4029f0:	4620      	mov	r0, r4
  4029f2:	4b0a      	ldr	r3, [pc, #40]	; (402a1c <xTaskCheckForTimeOut+0x70>)
  4029f4:	4798      	blx	r3
			xReturn = pdFALSE;
  4029f6:	2400      	movs	r4, #0
  4029f8:	e004      	b.n	402a04 <xTaskCheckForTimeOut+0x58>
			/* If INCLUDE_vTaskSuspend is set to 1 and the block time specified is
			the maximum block time then the task should block indefinitely, and
			therefore never time out. */
			if( *pxTicksToWait == portMAX_DELAY )
			{
				xReturn = pdFALSE;
  4029fa:	2400      	movs	r4, #0
  4029fc:	e002      	b.n	402a04 <xTaskCheckForTimeOut+0x58>
		{
			/* The tick count is greater than the time at which vTaskSetTimeout()
			was called, but has also overflowed since vTaskSetTimeOut() was called.
			It must have wrapped all the way around and gone past us again. This
			passed since vTaskSetTimeout() was called. */
			xReturn = pdTRUE;
  4029fe:	2401      	movs	r4, #1
  402a00:	e000      	b.n	402a04 <xTaskCheckForTimeOut+0x58>
			vTaskSetTimeOutState( pxTimeOut );
			xReturn = pdFALSE;
		}
		else
		{
			xReturn = pdTRUE;
  402a02:	2401      	movs	r4, #1
		}
	}
	taskEXIT_CRITICAL();
  402a04:	4b06      	ldr	r3, [pc, #24]	; (402a20 <xTaskCheckForTimeOut+0x74>)
  402a06:	4798      	blx	r3

	return xReturn;
}
  402a08:	4620      	mov	r0, r4
  402a0a:	bd38      	pop	{r3, r4, r5, pc}
  402a0c:	00401571 	.word	0x00401571
  402a10:	004015a1 	.word	0x004015a1
  402a14:	2000add8 	.word	0x2000add8
  402a18:	2000ad2c 	.word	0x2000ad2c
  402a1c:	00402989 	.word	0x00402989
  402a20:	004015e1 	.word	0x004015e1

00402a24 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
	xYieldPending = pdTRUE;
  402a24:	2201      	movs	r2, #1
  402a26:	4b01      	ldr	r3, [pc, #4]	; (402a2c <vTaskMissedYield+0x8>)
  402a28:	601a      	str	r2, [r3, #0]
  402a2a:	4770      	bx	lr
  402a2c:	2000ae28 	.word	0x2000ae28

00402a30 <xTaskGetSchedulerState>:

	BaseType_t xTaskGetSchedulerState( void )
	{
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
  402a30:	4b05      	ldr	r3, [pc, #20]	; (402a48 <xTaskGetSchedulerState+0x18>)
  402a32:	681b      	ldr	r3, [r3, #0]
  402a34:	b133      	cbz	r3, 402a44 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
  402a36:	4b05      	ldr	r3, [pc, #20]	; (402a4c <xTaskGetSchedulerState+0x1c>)
  402a38:	681b      	ldr	r3, [r3, #0]
			{
				xReturn = taskSCHEDULER_RUNNING;
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
  402a3a:	2b00      	cmp	r3, #0
  402a3c:	bf0c      	ite	eq
  402a3e:	2002      	moveq	r0, #2
  402a40:	2000      	movne	r0, #0
  402a42:	4770      	bx	lr
	{
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
  402a44:	2001      	movs	r0, #1
				xReturn = taskSCHEDULER_SUSPENDED;
			}
		}

		return xReturn;
	}
  402a46:	4770      	bx	lr
  402a48:	2000ad34 	.word	0x2000ad34
  402a4c:	2000add4 	.word	0x2000add4

00402a50 <vTaskPriorityInherit>:
	{
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL. */
		if( pxMutexHolder != NULL )
  402a50:	2800      	cmp	r0, #0
  402a52:	d045      	beq.n	402ae0 <vTaskPriorityInherit+0x90>
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
  402a54:	b538      	push	{r3, r4, r5, lr}
  402a56:	4603      	mov	r3, r0
		if( pxMutexHolder != NULL )
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
  402a58:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
  402a5a:	4922      	ldr	r1, [pc, #136]	; (402ae4 <vTaskPriorityInherit+0x94>)
  402a5c:	6809      	ldr	r1, [r1, #0]
  402a5e:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
  402a60:	428a      	cmp	r2, r1
  402a62:	d23c      	bcs.n	402ade <vTaskPriorityInherit+0x8e>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not	being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
  402a64:	6981      	ldr	r1, [r0, #24]
  402a66:	2900      	cmp	r1, #0
  402a68:	db05      	blt.n	402a76 <vTaskPriorityInherit+0x26>
				{
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  402a6a:	491e      	ldr	r1, [pc, #120]	; (402ae4 <vTaskPriorityInherit+0x94>)
  402a6c:	6809      	ldr	r1, [r1, #0]
  402a6e:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
  402a70:	f1c1 0105 	rsb	r1, r1, #5
  402a74:	6181      	str	r1, [r0, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xGenericListItem ) ) != pdFALSE )
  402a76:	eb02 0282 	add.w	r2, r2, r2, lsl #2
  402a7a:	491b      	ldr	r1, [pc, #108]	; (402ae8 <vTaskPriorityInherit+0x98>)
  402a7c:	eb01 0282 	add.w	r2, r1, r2, lsl #2
  402a80:	6959      	ldr	r1, [r3, #20]
  402a82:	4291      	cmp	r1, r2
  402a84:	d127      	bne.n	402ad6 <vTaskPriorityInherit+0x86>
  402a86:	461c      	mov	r4, r3
				{
					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
  402a88:	1d1d      	adds	r5, r3, #4
  402a8a:	4628      	mov	r0, r5
  402a8c:	4b17      	ldr	r3, [pc, #92]	; (402aec <vTaskPriorityInherit+0x9c>)
  402a8e:	4798      	blx	r3
  402a90:	b970      	cbnz	r0, 402ab0 <vTaskPriorityInherit+0x60>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
  402a92:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  402a94:	eb03 0183 	add.w	r1, r3, r3, lsl #2
  402a98:	4a13      	ldr	r2, [pc, #76]	; (402ae8 <vTaskPriorityInherit+0x98>)
  402a9a:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
  402a9e:	b93a      	cbnz	r2, 402ab0 <vTaskPriorityInherit+0x60>
  402aa0:	4813      	ldr	r0, [pc, #76]	; (402af0 <vTaskPriorityInherit+0xa0>)
  402aa2:	6802      	ldr	r2, [r0, #0]
  402aa4:	2101      	movs	r1, #1
  402aa6:	fa01 f303 	lsl.w	r3, r1, r3
  402aaa:	ea22 0303 	bic.w	r3, r2, r3
  402aae:	6003      	str	r3, [r0, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
  402ab0:	4b0c      	ldr	r3, [pc, #48]	; (402ae4 <vTaskPriorityInherit+0x94>)
  402ab2:	681b      	ldr	r3, [r3, #0]
  402ab4:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
  402ab6:	62e0      	str	r0, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
  402ab8:	490d      	ldr	r1, [pc, #52]	; (402af0 <vTaskPriorityInherit+0xa0>)
  402aba:	680a      	ldr	r2, [r1, #0]
  402abc:	2301      	movs	r3, #1
  402abe:	4083      	lsls	r3, r0
  402ac0:	4313      	orrs	r3, r2
  402ac2:	600b      	str	r3, [r1, #0]
  402ac4:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  402ac8:	4b07      	ldr	r3, [pc, #28]	; (402ae8 <vTaskPriorityInherit+0x98>)
  402aca:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  402ace:	4629      	mov	r1, r5
  402ad0:	4b08      	ldr	r3, [pc, #32]	; (402af4 <vTaskPriorityInherit+0xa4>)
  402ad2:	4798      	blx	r3
  402ad4:	bd38      	pop	{r3, r4, r5, pc}
				}
				else
				{
					/* Just inherit the priority. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
  402ad6:	4a03      	ldr	r2, [pc, #12]	; (402ae4 <vTaskPriorityInherit+0x94>)
  402ad8:	6812      	ldr	r2, [r2, #0]
  402ada:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
  402adc:	62da      	str	r2, [r3, #44]	; 0x2c
  402ade:	bd38      	pop	{r3, r4, r5, pc}
  402ae0:	4770      	bx	lr
  402ae2:	bf00      	nop
  402ae4:	2000adcc 	.word	0x2000adcc
  402ae8:	2000ad54 	.word	0x2000ad54
  402aec:	004014d1 	.word	0x004014d1
  402af0:	2000ae24 	.word	0x2000ae24
  402af4:	00401485 	.word	0x00401485

00402af8 <xTaskPriorityDisinherit>:
	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
	BaseType_t xReturn = pdFALSE;

		if( pxMutexHolder != NULL )
  402af8:	2800      	cmp	r0, #0
  402afa:	d03d      	beq.n	402b78 <xTaskPriorityDisinherit+0x80>
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
  402afc:	b538      	push	{r3, r4, r5, lr}
  402afe:	4604      	mov	r4, r0
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
  402b00:	4b20      	ldr	r3, [pc, #128]	; (402b84 <xTaskPriorityDisinherit+0x8c>)
  402b02:	681b      	ldr	r3, [r3, #0]
  402b04:	4298      	cmp	r0, r3
  402b06:	d002      	beq.n	402b0e <xTaskPriorityDisinherit+0x16>
  402b08:	4b1f      	ldr	r3, [pc, #124]	; (402b88 <xTaskPriorityDisinherit+0x90>)
  402b0a:	4798      	blx	r3
  402b0c:	e7fe      	b.n	402b0c <xTaskPriorityDisinherit+0x14>

			configASSERT( pxTCB->uxMutexesHeld );
  402b0e:	6c43      	ldr	r3, [r0, #68]	; 0x44
  402b10:	b913      	cbnz	r3, 402b18 <xTaskPriorityDisinherit+0x20>
  402b12:	4b1d      	ldr	r3, [pc, #116]	; (402b88 <xTaskPriorityDisinherit+0x90>)
  402b14:	4798      	blx	r3
  402b16:	e7fe      	b.n	402b16 <xTaskPriorityDisinherit+0x1e>
			( pxTCB->uxMutexesHeld )--;
  402b18:	3b01      	subs	r3, #1
  402b1a:	6443      	str	r3, [r0, #68]	; 0x44

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
  402b1c:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
  402b1e:	6c02      	ldr	r2, [r0, #64]	; 0x40
  402b20:	4291      	cmp	r1, r2
  402b22:	d02b      	beq.n	402b7c <xTaskPriorityDisinherit+0x84>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
  402b24:	bb63      	cbnz	r3, 402b80 <xTaskPriorityDisinherit+0x88>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding	task then it must be the running state task.  Remove
					the	holding task from the ready	list. */
					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
  402b26:	1d05      	adds	r5, r0, #4
  402b28:	4628      	mov	r0, r5
  402b2a:	4b18      	ldr	r3, [pc, #96]	; (402b8c <xTaskPriorityDisinherit+0x94>)
  402b2c:	4798      	blx	r3
  402b2e:	b968      	cbnz	r0, 402b4c <xTaskPriorityDisinherit+0x54>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
  402b30:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
  402b32:	eb01 0281 	add.w	r2, r1, r1, lsl #2
  402b36:	4b16      	ldr	r3, [pc, #88]	; (402b90 <xTaskPriorityDisinherit+0x98>)
  402b38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  402b3c:	b933      	cbnz	r3, 402b4c <xTaskPriorityDisinherit+0x54>
  402b3e:	4815      	ldr	r0, [pc, #84]	; (402b94 <xTaskPriorityDisinherit+0x9c>)
  402b40:	6803      	ldr	r3, [r0, #0]
  402b42:	2201      	movs	r2, #1
  402b44:	408a      	lsls	r2, r1
  402b46:	ea23 0302 	bic.w	r3, r3, r2
  402b4a:	6003      	str	r3, [r0, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
  402b4c:	6c20      	ldr	r0, [r4, #64]	; 0x40
  402b4e:	62e0      	str	r0, [r4, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  402b50:	f1c0 0305 	rsb	r3, r0, #5
  402b54:	61a3      	str	r3, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
  402b56:	4a0f      	ldr	r2, [pc, #60]	; (402b94 <xTaskPriorityDisinherit+0x9c>)
  402b58:	6813      	ldr	r3, [r2, #0]
  402b5a:	2401      	movs	r4, #1
  402b5c:	fa04 f100 	lsl.w	r1, r4, r0
  402b60:	430b      	orrs	r3, r1
  402b62:	6013      	str	r3, [r2, #0]
  402b64:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  402b68:	4b09      	ldr	r3, [pc, #36]	; (402b90 <xTaskPriorityDisinherit+0x98>)
  402b6a:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  402b6e:	4629      	mov	r1, r5
  402b70:	4b09      	ldr	r3, [pc, #36]	; (402b98 <xTaskPriorityDisinherit+0xa0>)
  402b72:	4798      	blx	r3
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
  402b74:	4620      	mov	r0, r4
  402b76:	bd38      	pop	{r3, r4, r5, pc}
#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
	BaseType_t xReturn = pdFALSE;
  402b78:	2000      	movs	r0, #0
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
	}
  402b7a:	4770      	bx	lr
#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
	BaseType_t xReturn = pdFALSE;
  402b7c:	2000      	movs	r0, #0
  402b7e:	bd38      	pop	{r3, r4, r5, pc}
  402b80:	2000      	movs	r0, #0
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
	}
  402b82:	bd38      	pop	{r3, r4, r5, pc}
  402b84:	2000adcc 	.word	0x2000adcc
  402b88:	00401571 	.word	0x00401571
  402b8c:	004014d1 	.word	0x004014d1
  402b90:	2000ad54 	.word	0x2000ad54
  402b94:	2000ae24 	.word	0x2000ae24
  402b98:	00401485 	.word	0x00401485

00402b9c <pvTaskIncrementMutexHeldCount>:

	void *pvTaskIncrementMutexHeldCount( void )
	{
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
  402b9c:	4b05      	ldr	r3, [pc, #20]	; (402bb4 <pvTaskIncrementMutexHeldCount+0x18>)
  402b9e:	681b      	ldr	r3, [r3, #0]
  402ba0:	b123      	cbz	r3, 402bac <pvTaskIncrementMutexHeldCount+0x10>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
  402ba2:	4b04      	ldr	r3, [pc, #16]	; (402bb4 <pvTaskIncrementMutexHeldCount+0x18>)
  402ba4:	681a      	ldr	r2, [r3, #0]
  402ba6:	6c53      	ldr	r3, [r2, #68]	; 0x44
  402ba8:	3301      	adds	r3, #1
  402baa:	6453      	str	r3, [r2, #68]	; 0x44
		}

		return pxCurrentTCB;
  402bac:	4b01      	ldr	r3, [pc, #4]	; (402bb4 <pvTaskIncrementMutexHeldCount+0x18>)
  402bae:	6818      	ldr	r0, [r3, #0]
	}
  402bb0:	4770      	bx	lr
  402bb2:	bf00      	nop
  402bb4:	2000adcc 	.word	0x2000adcc

00402bb8 <prvInsertTimerInActiveList>:
	return xTimeNow;
}
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
  402bb8:	b510      	push	{r4, lr}
  402bba:	4604      	mov	r4, r0
BaseType_t xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
  402bbc:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
  402bbe:	6120      	str	r0, [r4, #16]

	if( xNextExpiryTime <= xTimeNow )
  402bc0:	4291      	cmp	r1, r2
  402bc2:	d80a      	bhi.n	402bda <prvInsertTimerInActiveList+0x22>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( xTimeNow - xCommandTime ) >= pxTimer->xTimerPeriodInTicks )
  402bc4:	1ad2      	subs	r2, r2, r3
  402bc6:	6983      	ldr	r3, [r0, #24]
  402bc8:	429a      	cmp	r2, r3
  402bca:	d211      	bcs.n	402bf0 <prvInsertTimerInActiveList+0x38>
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
  402bcc:	4b0a      	ldr	r3, [pc, #40]	; (402bf8 <prvInsertTimerInActiveList+0x40>)
  402bce:	6818      	ldr	r0, [r3, #0]
  402bd0:	1d21      	adds	r1, r4, #4
  402bd2:	4b0a      	ldr	r3, [pc, #40]	; (402bfc <prvInsertTimerInActiveList+0x44>)
  402bd4:	4798      	blx	r3
}
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
BaseType_t xProcessTimerNow = pdFALSE;
  402bd6:	2000      	movs	r0, #0
  402bd8:	bd10      	pop	{r4, pc}
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
  402bda:	429a      	cmp	r2, r3
  402bdc:	d201      	bcs.n	402be2 <prvInsertTimerInActiveList+0x2a>
  402bde:	4299      	cmp	r1, r3
  402be0:	d208      	bcs.n	402bf4 <prvInsertTimerInActiveList+0x3c>
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
  402be2:	4b07      	ldr	r3, [pc, #28]	; (402c00 <prvInsertTimerInActiveList+0x48>)
  402be4:	6818      	ldr	r0, [r3, #0]
  402be6:	1d21      	adds	r1, r4, #4
  402be8:	4b04      	ldr	r3, [pc, #16]	; (402bfc <prvInsertTimerInActiveList+0x44>)
  402bea:	4798      	blx	r3
}
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
BaseType_t xProcessTimerNow = pdFALSE;
  402bec:	2000      	movs	r0, #0
  402bee:	bd10      	pop	{r4, pc}
		timer was issued, and the time the command was processed? */
		if( ( xTimeNow - xCommandTime ) >= pxTimer->xTimerPeriodInTicks )
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
  402bf0:	2001      	movs	r0, #1
  402bf2:	bd10      	pop	{r4, pc}
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
  402bf4:	2001      	movs	r0, #1
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
		}
	}

	return xProcessTimerNow;
}
  402bf6:	bd10      	pop	{r4, pc}
  402bf8:	2000ae60 	.word	0x2000ae60
  402bfc:	0040149d 	.word	0x0040149d
  402c00:	2000ae2c 	.word	0x2000ae2c

00402c04 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
  402c04:	b570      	push	{r4, r5, r6, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
  402c06:	4b0f      	ldr	r3, [pc, #60]	; (402c44 <prvCheckForValidListAndQueue+0x40>)
  402c08:	4798      	blx	r3
	{
		if( xTimerQueue == NULL )
  402c0a:	4b0f      	ldr	r3, [pc, #60]	; (402c48 <prvCheckForValidListAndQueue+0x44>)
  402c0c:	681b      	ldr	r3, [r3, #0]
  402c0e:	b9ab      	cbnz	r3, 402c3c <prvCheckForValidListAndQueue+0x38>
		{
			vListInitialise( &xActiveTimerList1 );
  402c10:	4d0e      	ldr	r5, [pc, #56]	; (402c4c <prvCheckForValidListAndQueue+0x48>)
  402c12:	4628      	mov	r0, r5
  402c14:	4e0e      	ldr	r6, [pc, #56]	; (402c50 <prvCheckForValidListAndQueue+0x4c>)
  402c16:	47b0      	blx	r6
			vListInitialise( &xActiveTimerList2 );
  402c18:	4c0e      	ldr	r4, [pc, #56]	; (402c54 <prvCheckForValidListAndQueue+0x50>)
  402c1a:	4620      	mov	r0, r4
  402c1c:	47b0      	blx	r6
			pxCurrentTimerList = &xActiveTimerList1;
  402c1e:	4b0e      	ldr	r3, [pc, #56]	; (402c58 <prvCheckForValidListAndQueue+0x54>)
  402c20:	601d      	str	r5, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
  402c22:	4b0e      	ldr	r3, [pc, #56]	; (402c5c <prvCheckForValidListAndQueue+0x58>)
  402c24:	601c      	str	r4, [r3, #0]
			xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
  402c26:	2005      	movs	r0, #5
  402c28:	2110      	movs	r1, #16
  402c2a:	2200      	movs	r2, #0
  402c2c:	4b0c      	ldr	r3, [pc, #48]	; (402c60 <prvCheckForValidListAndQueue+0x5c>)
  402c2e:	4798      	blx	r3
  402c30:	4b05      	ldr	r3, [pc, #20]	; (402c48 <prvCheckForValidListAndQueue+0x44>)
  402c32:	6018      	str	r0, [r3, #0]
			configASSERT( xTimerQueue );
  402c34:	b910      	cbnz	r0, 402c3c <prvCheckForValidListAndQueue+0x38>
  402c36:	4b0b      	ldr	r3, [pc, #44]	; (402c64 <prvCheckForValidListAndQueue+0x60>)
  402c38:	4798      	blx	r3
  402c3a:	e7fe      	b.n	402c3a <prvCheckForValidListAndQueue+0x36>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
  402c3c:	4b0a      	ldr	r3, [pc, #40]	; (402c68 <prvCheckForValidListAndQueue+0x64>)
  402c3e:	4798      	blx	r3
  402c40:	bd70      	pop	{r4, r5, r6, pc}
  402c42:	bf00      	nop
  402c44:	004015a1 	.word	0x004015a1
  402c48:	2000ae5c 	.word	0x2000ae5c
  402c4c:	2000ae30 	.word	0x2000ae30
  402c50:	00401465 	.word	0x00401465
  402c54:	2000ae44 	.word	0x2000ae44
  402c58:	2000ae2c 	.word	0x2000ae2c
  402c5c:	2000ae60 	.word	0x2000ae60
  402c60:	00401be9 	.word	0x00401be9
  402c64:	00401571 	.word	0x00401571
  402c68:	004015e1 	.word	0x004015e1

00402c6c <xTimerCreateTimerTask>:
static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty ) PRIVILEGED_FUNCTION;

/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
  402c6c:	b510      	push	{r4, lr}
  402c6e:	b084      	sub	sp, #16

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
  402c70:	4b0b      	ldr	r3, [pc, #44]	; (402ca0 <xTimerCreateTimerTask+0x34>)
  402c72:	4798      	blx	r3

	if( xTimerQueue != NULL )
  402c74:	4b0b      	ldr	r3, [pc, #44]	; (402ca4 <xTimerCreateTimerTask+0x38>)
  402c76:	681b      	ldr	r3, [r3, #0]
  402c78:	b163      	cbz	r3, 402c94 <xTimerCreateTimerTask+0x28>
			xReturn = xTaskCreate( prvTimerTask, "Tmr Svc", ( uint16_t ) configTIMER_TASK_STACK_DEPTH, NULL, ( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT, &xTimerTaskHandle );
		}
		#else
		{
			/* Create the timer task without storing its handle. */
			xReturn = xTaskCreate( prvTimerTask, "Tmr Svc", ( uint16_t ) configTIMER_TASK_STACK_DEPTH, NULL, ( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT, NULL);
  402c7a:	2302      	movs	r3, #2
  402c7c:	9300      	str	r3, [sp, #0]
  402c7e:	2300      	movs	r3, #0
  402c80:	9301      	str	r3, [sp, #4]
  402c82:	9302      	str	r3, [sp, #8]
  402c84:	9303      	str	r3, [sp, #12]
  402c86:	4808      	ldr	r0, [pc, #32]	; (402ca8 <xTimerCreateTimerTask+0x3c>)
  402c88:	4908      	ldr	r1, [pc, #32]	; (402cac <xTimerCreateTimerTask+0x40>)
  402c8a:	f44f 7282 	mov.w	r2, #260	; 0x104
  402c8e:	4c08      	ldr	r4, [pc, #32]	; (402cb0 <xTimerCreateTimerTask+0x44>)
  402c90:	47a0      	blx	r4
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
  402c92:	b910      	cbnz	r0, 402c9a <xTimerCreateTimerTask+0x2e>
  402c94:	4b07      	ldr	r3, [pc, #28]	; (402cb4 <xTimerCreateTimerTask+0x48>)
  402c96:	4798      	blx	r3
  402c98:	e7fe      	b.n	402c98 <xTimerCreateTimerTask+0x2c>
	return xReturn;
}
  402c9a:	b004      	add	sp, #16
  402c9c:	bd10      	pop	{r4, pc}
  402c9e:	bf00      	nop
  402ca0:	00402c05 	.word	0x00402c05
  402ca4:	2000ae5c 	.word	0x2000ae5c
  402ca8:	00402dc9 	.word	0x00402dc9
  402cac:	00410994 	.word	0x00410994
  402cb0:	00402185 	.word	0x00402185
  402cb4:	00401571 	.word	0x00401571

00402cb8 <xTimerGenericCommand>:
	return ( TimerHandle_t ) pxNewTimer;
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
  402cb8:	b510      	push	{r4, lr}
  402cba:	b084      	sub	sp, #16
BaseType_t xReturn = pdFAIL;
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
  402cbc:	b910      	cbnz	r0, 402cc4 <xTimerGenericCommand+0xc>
  402cbe:	4b11      	ldr	r3, [pc, #68]	; (402d04 <xTimerGenericCommand+0x4c>)
  402cc0:	4798      	blx	r3
  402cc2:	e7fe      	b.n	402cc2 <xTimerGenericCommand+0xa>
  402cc4:	4604      	mov	r4, r0

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
  402cc6:	4810      	ldr	r0, [pc, #64]	; (402d08 <xTimerGenericCommand+0x50>)
  402cc8:	6800      	ldr	r0, [r0, #0]
  402cca:	b1c0      	cbz	r0, 402cfe <xTimerGenericCommand+0x46>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
  402ccc:	9100      	str	r1, [sp, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
  402cce:	9201      	str	r2, [sp, #4]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
  402cd0:	9402      	str	r4, [sp, #8]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
  402cd2:	2905      	cmp	r1, #5
  402cd4:	dc0d      	bgt.n	402cf2 <xTimerGenericCommand+0x3a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
  402cd6:	4b0d      	ldr	r3, [pc, #52]	; (402d0c <xTimerGenericCommand+0x54>)
  402cd8:	4798      	blx	r3
  402cda:	2802      	cmp	r0, #2
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
  402cdc:	4b0a      	ldr	r3, [pc, #40]	; (402d08 <xTimerGenericCommand+0x50>)
  402cde:	6818      	ldr	r0, [r3, #0]
  402ce0:	4669      	mov	r1, sp
  402ce2:	bf07      	ittee	eq
  402ce4:	9a06      	ldreq	r2, [sp, #24]
  402ce6:	2300      	moveq	r3, #0
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
  402ce8:	2200      	movne	r2, #0
  402cea:	4613      	movne	r3, r2
  402cec:	4c08      	ldr	r4, [pc, #32]	; (402d10 <xTimerGenericCommand+0x58>)
  402cee:	47a0      	blx	r4
  402cf0:	e006      	b.n	402d00 <xTimerGenericCommand+0x48>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
  402cf2:	4669      	mov	r1, sp
  402cf4:	461a      	mov	r2, r3
  402cf6:	2300      	movs	r3, #0
  402cf8:	4c06      	ldr	r4, [pc, #24]	; (402d14 <xTimerGenericCommand+0x5c>)
  402cfa:	47a0      	blx	r4
  402cfc:	e000      	b.n	402d00 <xTimerGenericCommand+0x48>
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
BaseType_t xReturn = pdFAIL;
  402cfe:	2000      	movs	r0, #0
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
}
  402d00:	b004      	add	sp, #16
  402d02:	bd10      	pop	{r4, pc}
  402d04:	00401571 	.word	0x00401571
  402d08:	2000ae5c 	.word	0x2000ae5c
  402d0c:	00402a31 	.word	0x00402a31
  402d10:	00401c49 	.word	0x00401c49
  402d14:	00401dbd 	.word	0x00401dbd

00402d18 <prvSampleTimeNow>:
	return xNextExpireTime;
}
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
  402d18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  402d1c:	b082      	sub	sp, #8
  402d1e:	4680      	mov	r8, r0
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
  402d20:	4b21      	ldr	r3, [pc, #132]	; (402da8 <prvSampleTimeNow+0x90>)
  402d22:	4798      	blx	r3
  402d24:	4607      	mov	r7, r0

	if( xTimeNow < xLastTime )
  402d26:	4b21      	ldr	r3, [pc, #132]	; (402dac <prvSampleTimeNow+0x94>)
  402d28:	681b      	ldr	r3, [r3, #0]
  402d2a:	4298      	cmp	r0, r3
  402d2c:	d233      	bcs.n	402d96 <prvSampleTimeNow+0x7e>
  402d2e:	e023      	b.n	402d78 <prvSampleTimeNow+0x60>
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
  402d30:	68db      	ldr	r3, [r3, #12]
  402d32:	f8d3 a000 	ldr.w	sl, [r3]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
  402d36:	68dc      	ldr	r4, [r3, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
  402d38:	f104 0904 	add.w	r9, r4, #4
  402d3c:	4648      	mov	r0, r9
  402d3e:	47b0      	blx	r6
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
  402d40:	6a63      	ldr	r3, [r4, #36]	; 0x24
  402d42:	4620      	mov	r0, r4
  402d44:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
  402d46:	69e3      	ldr	r3, [r4, #28]
  402d48:	2b01      	cmp	r3, #1
  402d4a:	d117      	bne.n	402d7c <prvSampleTimeNow+0x64>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
  402d4c:	69a3      	ldr	r3, [r4, #24]
  402d4e:	4453      	add	r3, sl
			if( xReloadTime > xNextExpireTime )
  402d50:	4553      	cmp	r3, sl
  402d52:	d906      	bls.n	402d62 <prvSampleTimeNow+0x4a>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
  402d54:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
  402d56:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
  402d58:	6828      	ldr	r0, [r5, #0]
  402d5a:	4649      	mov	r1, r9
  402d5c:	4b14      	ldr	r3, [pc, #80]	; (402db0 <prvSampleTimeNow+0x98>)
  402d5e:	4798      	blx	r3
  402d60:	e00c      	b.n	402d7c <prvSampleTimeNow+0x64>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
  402d62:	2300      	movs	r3, #0
  402d64:	9300      	str	r3, [sp, #0]
  402d66:	4620      	mov	r0, r4
  402d68:	4619      	mov	r1, r3
  402d6a:	4652      	mov	r2, sl
  402d6c:	4c11      	ldr	r4, [pc, #68]	; (402db4 <prvSampleTimeNow+0x9c>)
  402d6e:	47a0      	blx	r4
				configASSERT( xResult );
  402d70:	b920      	cbnz	r0, 402d7c <prvSampleTimeNow+0x64>
  402d72:	4b11      	ldr	r3, [pc, #68]	; (402db8 <prvSampleTimeNow+0xa0>)
  402d74:	4798      	blx	r3
  402d76:	e7fe      	b.n	402d76 <prvSampleTimeNow+0x5e>

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
  402d78:	4d10      	ldr	r5, [pc, #64]	; (402dbc <prvSampleTimeNow+0xa4>)
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
  402d7a:	4e11      	ldr	r6, [pc, #68]	; (402dc0 <prvSampleTimeNow+0xa8>)

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
  402d7c:	682b      	ldr	r3, [r5, #0]
  402d7e:	681a      	ldr	r2, [r3, #0]
  402d80:	2a00      	cmp	r2, #0
  402d82:	d1d5      	bne.n	402d30 <prvSampleTimeNow+0x18>
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
	pxCurrentTimerList = pxOverflowTimerList;
  402d84:	4a0f      	ldr	r2, [pc, #60]	; (402dc4 <prvSampleTimeNow+0xac>)
  402d86:	6810      	ldr	r0, [r2, #0]
  402d88:	490c      	ldr	r1, [pc, #48]	; (402dbc <prvSampleTimeNow+0xa4>)
  402d8a:	6008      	str	r0, [r1, #0]
	pxOverflowTimerList = pxTemp;
  402d8c:	6013      	str	r3, [r2, #0]
	xTimeNow = xTaskGetTickCount();

	if( xTimeNow < xLastTime )
	{
		prvSwitchTimerLists();
		*pxTimerListsWereSwitched = pdTRUE;
  402d8e:	2301      	movs	r3, #1
  402d90:	f8c8 3000 	str.w	r3, [r8]
  402d94:	e002      	b.n	402d9c <prvSampleTimeNow+0x84>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
  402d96:	2300      	movs	r3, #0
  402d98:	f8c8 3000 	str.w	r3, [r8]
	}

	xLastTime = xTimeNow;
  402d9c:	4b03      	ldr	r3, [pc, #12]	; (402dac <prvSampleTimeNow+0x94>)
  402d9e:	601f      	str	r7, [r3, #0]

	return xTimeNow;
}
  402da0:	4638      	mov	r0, r7
  402da2:	b002      	add	sp, #8
  402da4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  402da8:	00402409 	.word	0x00402409
  402dac:	2000ae58 	.word	0x2000ae58
  402db0:	0040149d 	.word	0x0040149d
  402db4:	00402cb9 	.word	0x00402cb9
  402db8:	00401571 	.word	0x00401571
  402dbc:	2000ae2c 	.word	0x2000ae2c
  402dc0:	004014d1 	.word	0x004014d1
  402dc4:	2000ae60 	.word	0x2000ae60

00402dc8 <prvTimerTask>:
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
}
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
  402dc8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  402dcc:	b089      	sub	sp, #36	; 0x24
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
  402dce:	4f59      	ldr	r7, [pc, #356]	; (402f34 <prvTimerTask+0x16c>)
					/* The current timer list is empty - is the overflow list
					also empty? */
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
				}

				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
  402dd0:	4c59      	ldr	r4, [pc, #356]	; (402f38 <prvTimerTask+0x170>)
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
  402dd2:	4d5a      	ldr	r5, [pc, #360]	; (402f3c <prvTimerTask+0x174>)
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
  402dd4:	683b      	ldr	r3, [r7, #0]
	if( *pxListWasEmpty == pdFALSE )
  402dd6:	681a      	ldr	r2, [r3, #0]
  402dd8:	b15a      	cbz	r2, 402df2 <prvTimerTask+0x2a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
  402dda:	68db      	ldr	r3, [r3, #12]
  402ddc:	f8d3 8000 	ldr.w	r8, [r3]
static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
  402de0:	4b57      	ldr	r3, [pc, #348]	; (402f40 <prvTimerTask+0x178>)
  402de2:	4798      	blx	r3
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
  402de4:	a804      	add	r0, sp, #16
  402de6:	4b57      	ldr	r3, [pc, #348]	; (402f44 <prvTimerTask+0x17c>)
  402de8:	4798      	blx	r3
  402dea:	4606      	mov	r6, r0
		if( xTimerListsWereSwitched == pdFALSE )
  402dec:	9b04      	ldr	r3, [sp, #16]
  402dee:	b14b      	cbz	r3, 402e04 <prvTimerTask+0x3c>
  402df0:	e049      	b.n	402e86 <prvTimerTask+0xbe>
static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
  402df2:	4b53      	ldr	r3, [pc, #332]	; (402f40 <prvTimerTask+0x178>)
  402df4:	4798      	blx	r3
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
  402df6:	a804      	add	r0, sp, #16
  402df8:	4b52      	ldr	r3, [pc, #328]	; (402f44 <prvTimerTask+0x17c>)
  402dfa:	4798      	blx	r3
  402dfc:	4606      	mov	r6, r0
		if( xTimerListsWereSwitched == pdFALSE )
  402dfe:	9b04      	ldr	r3, [sp, #16]
  402e00:	b363      	cbz	r3, 402e5c <prvTimerTask+0x94>
  402e02:	e040      	b.n	402e86 <prvTimerTask+0xbe>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
  402e04:	4580      	cmp	r8, r0
  402e06:	bf88      	it	hi
  402e08:	2200      	movhi	r2, #0
  402e0a:	d830      	bhi.n	402e6e <prvTimerTask+0xa6>
			{
				( void ) xTaskResumeAll();
  402e0c:	4b4e      	ldr	r3, [pc, #312]	; (402f48 <prvTimerTask+0x180>)
  402e0e:	4798      	blx	r3
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
  402e10:	683b      	ldr	r3, [r7, #0]
  402e12:	68db      	ldr	r3, [r3, #12]
  402e14:	f8d3 900c 	ldr.w	r9, [r3, #12]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
  402e18:	f109 0004 	add.w	r0, r9, #4
  402e1c:	4b4b      	ldr	r3, [pc, #300]	; (402f4c <prvTimerTask+0x184>)
  402e1e:	4798      	blx	r3
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
  402e20:	f8d9 301c 	ldr.w	r3, [r9, #28]
  402e24:	2b01      	cmp	r3, #1
  402e26:	d114      	bne.n	402e52 <prvTimerTask+0x8a>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) == pdTRUE )
  402e28:	f8d9 1018 	ldr.w	r1, [r9, #24]
  402e2c:	4648      	mov	r0, r9
  402e2e:	4441      	add	r1, r8
  402e30:	4632      	mov	r2, r6
  402e32:	4643      	mov	r3, r8
  402e34:	4e46      	ldr	r6, [pc, #280]	; (402f50 <prvTimerTask+0x188>)
  402e36:	47b0      	blx	r6
  402e38:	2801      	cmp	r0, #1
  402e3a:	d10a      	bne.n	402e52 <prvTimerTask+0x8a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
  402e3c:	2300      	movs	r3, #0
  402e3e:	9300      	str	r3, [sp, #0]
  402e40:	4648      	mov	r0, r9
  402e42:	4619      	mov	r1, r3
  402e44:	4642      	mov	r2, r8
  402e46:	4e43      	ldr	r6, [pc, #268]	; (402f54 <prvTimerTask+0x18c>)
  402e48:	47b0      	blx	r6
			configASSERT( xResult );
  402e4a:	b910      	cbnz	r0, 402e52 <prvTimerTask+0x8a>
  402e4c:	4b42      	ldr	r3, [pc, #264]	; (402f58 <prvTimerTask+0x190>)
  402e4e:	4798      	blx	r3
  402e50:	e7fe      	b.n	402e50 <prvTimerTask+0x88>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
  402e52:	f8d9 3024 	ldr.w	r3, [r9, #36]	; 0x24
  402e56:	4648      	mov	r0, r9
  402e58:	4798      	blx	r3
  402e5a:	e062      	b.n	402f22 <prvTimerTask+0x15a>
				case when the current timer list is empty. */
				if( xListWasEmpty != pdFALSE )
				{
					/* The current timer list is empty - is the overflow list
					also empty? */
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
  402e5c:	4b3f      	ldr	r3, [pc, #252]	; (402f5c <prvTimerTask+0x194>)
  402e5e:	681b      	ldr	r3, [r3, #0]
  402e60:	681a      	ldr	r2, [r3, #0]
  402e62:	fab2 f282 	clz	r2, r2
  402e66:	0952      	lsrs	r2, r2, #5
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
  402e68:	f04f 0800 	mov.w	r8, #0
  402e6c:	e7ff      	b.n	402e6e <prvTimerTask+0xa6>
					/* The current timer list is empty - is the overflow list
					also empty? */
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
				}

				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
  402e6e:	6820      	ldr	r0, [r4, #0]
  402e70:	ebc6 0108 	rsb	r1, r6, r8
  402e74:	4b3a      	ldr	r3, [pc, #232]	; (402f60 <prvTimerTask+0x198>)
  402e76:	4798      	blx	r3

				if( xTaskResumeAll() == pdFALSE )
  402e78:	4b33      	ldr	r3, [pc, #204]	; (402f48 <prvTimerTask+0x180>)
  402e7a:	4798      	blx	r3
  402e7c:	2800      	cmp	r0, #0
  402e7e:	d150      	bne.n	402f22 <prvTimerTask+0x15a>
				{
					/* Yield to wait for either a command to arrive, or the
					block time to expire.  If a command arrived between the
					critical section being exited and this yield then the yield
					will not cause the task to block. */
					portYIELD_WITHIN_API();
  402e80:	4b38      	ldr	r3, [pc, #224]	; (402f64 <prvTimerTask+0x19c>)
  402e82:	4798      	blx	r3
  402e84:	e04d      	b.n	402f22 <prvTimerTask+0x15a>
				}
			}
		}
		else
		{
			( void ) xTaskResumeAll();
  402e86:	4b30      	ldr	r3, [pc, #192]	; (402f48 <prvTimerTask+0x180>)
  402e88:	4798      	blx	r3
  402e8a:	e04a      	b.n	402f22 <prvTimerTask+0x15a>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
  402e8c:	9b04      	ldr	r3, [sp, #16]
  402e8e:	2b00      	cmp	r3, #0
  402e90:	da06      	bge.n	402ea0 <prvTimerTask+0xd8>
				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
  402e92:	9806      	ldr	r0, [sp, #24]
  402e94:	9907      	ldr	r1, [sp, #28]
  402e96:	9b05      	ldr	r3, [sp, #20]
  402e98:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
  402e9a:	9b04      	ldr	r3, [sp, #16]
  402e9c:	2b00      	cmp	r3, #0
  402e9e:	db40      	blt.n	402f22 <prvTimerTask+0x15a>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
  402ea0:	9e06      	ldr	r6, [sp, #24]

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
  402ea2:	6973      	ldr	r3, [r6, #20]
  402ea4:	b113      	cbz	r3, 402eac <prvTimerTask+0xe4>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
  402ea6:	1d30      	adds	r0, r6, #4
  402ea8:	4b28      	ldr	r3, [pc, #160]	; (402f4c <prvTimerTask+0x184>)
  402eaa:	4798      	blx	r3
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
  402eac:	a803      	add	r0, sp, #12
  402eae:	4b25      	ldr	r3, [pc, #148]	; (402f44 <prvTimerTask+0x17c>)
  402eb0:	4798      	blx	r3
  402eb2:	4686      	mov	lr, r0

			switch( xMessage.xMessageID )
  402eb4:	9a04      	ldr	r2, [sp, #16]
  402eb6:	2a09      	cmp	r2, #9
  402eb8:	d833      	bhi.n	402f22 <prvTimerTask+0x15a>
  402eba:	e8df f002 	tbb	[pc, r2]
  402ebe:	0505      	.short	0x0505
  402ec0:	2f223205 	.word	0x2f223205
  402ec4:	22320505 	.word	0x22320505
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) == pdTRUE )
  402ec8:	9b05      	ldr	r3, [sp, #20]
  402eca:	69b1      	ldr	r1, [r6, #24]
  402ecc:	4630      	mov	r0, r6
  402ece:	4419      	add	r1, r3
  402ed0:	4672      	mov	r2, lr
  402ed2:	f8df c07c 	ldr.w	ip, [pc, #124]	; 402f50 <prvTimerTask+0x188>
  402ed6:	47e0      	blx	ip
  402ed8:	2801      	cmp	r0, #1
  402eda:	d122      	bne.n	402f22 <prvTimerTask+0x15a>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
  402edc:	6a73      	ldr	r3, [r6, #36]	; 0x24
  402ede:	4630      	mov	r0, r6
  402ee0:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
  402ee2:	69f3      	ldr	r3, [r6, #28]
  402ee4:	2b01      	cmp	r3, #1
  402ee6:	d11c      	bne.n	402f22 <prvTimerTask+0x15a>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
  402ee8:	69b2      	ldr	r2, [r6, #24]
  402eea:	2300      	movs	r3, #0
  402eec:	9300      	str	r3, [sp, #0]
  402eee:	4630      	mov	r0, r6
  402ef0:	4619      	mov	r1, r3
  402ef2:	9e05      	ldr	r6, [sp, #20]
  402ef4:	4432      	add	r2, r6
  402ef6:	4e17      	ldr	r6, [pc, #92]	; (402f54 <prvTimerTask+0x18c>)
  402ef8:	47b0      	blx	r6
							configASSERT( xResult );
  402efa:	b990      	cbnz	r0, 402f22 <prvTimerTask+0x15a>
  402efc:	4b16      	ldr	r3, [pc, #88]	; (402f58 <prvTimerTask+0x190>)
  402efe:	4798      	blx	r3
  402f00:	e7fe      	b.n	402f00 <prvTimerTask+0x138>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
  402f02:	9905      	ldr	r1, [sp, #20]
  402f04:	61b1      	str	r1, [r6, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
  402f06:	b911      	cbnz	r1, 402f0e <prvTimerTask+0x146>
  402f08:	4b13      	ldr	r3, [pc, #76]	; (402f58 <prvTimerTask+0x190>)
  402f0a:	4798      	blx	r3
  402f0c:	e7fe      	b.n	402f0c <prvTimerTask+0x144>
					longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot be
					zero the next expiry time can only be in the future, meaning
					(unlike for the xTimerStart() case above) there is no fail case
					that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
  402f0e:	4630      	mov	r0, r6
  402f10:	4471      	add	r1, lr
  402f12:	4672      	mov	r2, lr
  402f14:	4673      	mov	r3, lr
  402f16:	4e0e      	ldr	r6, [pc, #56]	; (402f50 <prvTimerTask+0x188>)
  402f18:	47b0      	blx	r6
  402f1a:	e002      	b.n	402f22 <prvTimerTask+0x15a>
					break;

				case tmrCOMMAND_DELETE :
					/* The timer has already been removed from the active list,
					just free up the memory. */
					vPortFree( pxTimer );
  402f1c:	4630      	mov	r0, r6
  402f1e:	4b12      	ldr	r3, [pc, #72]	; (402f68 <prvTimerTask+0x1a0>)
  402f20:	4798      	blx	r3
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
  402f22:	6820      	ldr	r0, [r4, #0]
  402f24:	a904      	add	r1, sp, #16
  402f26:	2200      	movs	r2, #0
  402f28:	4613      	mov	r3, r2
  402f2a:	47a8      	blx	r5
  402f2c:	2800      	cmp	r0, #0
  402f2e:	d1ad      	bne.n	402e8c <prvTimerTask+0xc4>
  402f30:	e750      	b.n	402dd4 <prvTimerTask+0xc>
  402f32:	bf00      	nop
  402f34:	2000ae2c 	.word	0x2000ae2c
  402f38:	2000ae5c 	.word	0x2000ae5c
  402f3c:	00401f45 	.word	0x00401f45
  402f40:	004023f9 	.word	0x004023f9
  402f44:	00402d19 	.word	0x00402d19
  402f48:	00402551 	.word	0x00402551
  402f4c:	004014d1 	.word	0x004014d1
  402f50:	00402bb9 	.word	0x00402bb9
  402f54:	00402cb9 	.word	0x00402cb9
  402f58:	00401571 	.word	0x00401571
  402f5c:	2000ae60 	.word	0x2000ae60
  402f60:	004020b1 	.word	0x004020b1
  402f64:	00401559 	.word	0x00401559
  402f68:	00401959 	.word	0x00401959

00402f6c <_zbar_decode_code128>:
    dcode->code128.character = j;
    return(0);
}

zbar_symbol_type_t _zbar_decode_code128 (zbar_decoder_t *dcode)
{
  402f6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  402f70:	b08d      	sub	sp, #52	; 0x34

/* retrieve i-th previous element width */
static inline unsigned get_width (const zbar_decoder_t *dcode,
                                  unsigned char offset)
{
    return(dcode->w[(dcode->idx - offset) & (DECODE_WINDOW - 1)]);
  402f72:	7801      	ldrb	r1, [r0, #0]
  402f74:	f001 050f 	and.w	r5, r1, #15
  402f78:	eb00 0585 	add.w	r5, r0, r5, lsl #2
  402f7c:	686a      	ldr	r2, [r5, #4]
  402f7e:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
  402f82:	441a      	add	r2, r3
  402f84:	1f8b      	subs	r3, r1, #6
  402f86:	f003 030f 	and.w	r3, r3, #15
  402f8a:	eb00 0383 	add.w	r3, r0, r3, lsl #2
    code128_decoder_t *dcode128 = &dcode->code128;
    signed char c;

    /* update latest character width */
    dcode128->s6 -= get_width(dcode, 6);
    dcode128->s6 += get_width(dcode, 0);
  402f8e:	685b      	ldr	r3, [r3, #4]
  402f90:	1ad2      	subs	r2, r2, r3
  402f92:	f8c0 2108 	str.w	r2, [r0, #264]	; 0x108

    if((dcode128->character < 0)
  402f96:	f8b0 3104 	ldrh.w	r3, [r0, #260]	; 0x104
  402f9a:	f343 130b 	sbfx	r3, r3, #4, #12
  402f9e:	2b00      	cmp	r3, #0
  402fa0:	da02      	bge.n	402fa8 <_zbar_decode_code128+0x3c>
  402fa2:	f001 0301 	and.w	r3, r1, #1
  402fa6:	e016      	b.n	402fd6 <_zbar_decode_code128+0x6a>
       ? get_color(dcode) != ZBAR_SPACE
       : (/* process every 6th element of active symbol */
          ++dcode128->element != 6 ||
  402fa8:	f890 4104 	ldrb.w	r4, [r0, #260]	; 0x104
  402fac:	f3c4 0342 	ubfx	r3, r4, #1, #3
  402fb0:	3301      	adds	r3, #1
  402fb2:	f003 0307 	and.w	r3, r3, #7
  402fb6:	f363 0443 	bfi	r4, r3, #1, #3
  402fba:	f880 4104 	strb.w	r4, [r0, #260]	; 0x104
  402fbe:	2b06      	cmp	r3, #6
  402fc0:	d108      	bne.n	402fd4 <_zbar_decode_code128+0x68>
          /* decode color based on direction */
          get_color(dcode) != dcode128->direction))
  402fc2:	b2e3      	uxtb	r3, r4
    dcode128->s6 += get_width(dcode, 0);

    if((dcode128->character < 0)
       ? get_color(dcode) != ZBAR_SPACE
       : (/* process every 6th element of active symbol */
          ++dcode128->element != 6 ||
  402fc4:	f003 0301 	and.w	r3, r3, #1
  402fc8:	f001 0401 	and.w	r4, r1, #1
  402fcc:	1b1b      	subs	r3, r3, r4
  402fce:	bf18      	it	ne
  402fd0:	2301      	movne	r3, #1
  402fd2:	e000      	b.n	402fd6 <_zbar_decode_code128+0x6a>
  402fd4:	2301      	movs	r3, #1

    /* update latest character width */
    dcode128->s6 -= get_width(dcode, 6);
    dcode128->s6 += get_width(dcode, 0);

    if((dcode128->character < 0)
  402fd6:	2b00      	cmp	r3, #0
  402fd8:	f040 8740 	bne.w	403e5c <_zbar_decode_code128+0xef0>
  402fdc:	4604      	mov	r4, r0
       : (/* process every 6th element of active symbol */
          ++dcode128->element != 6 ||
          /* decode color based on direction */
          get_color(dcode) != dcode128->direction))
        return(0);
    dcode128->element = 0;
  402fde:	f890 3104 	ldrb.w	r3, [r0, #260]	; 0x104
  402fe2:	f36f 0343 	bfc	r3, #1, #3
  402fe6:	f880 3104 	strb.w	r3, [r0, #260]	; 0x104

    /* build edge signature of character */
    unsigned s = dcode->code128.s6;

    dbprintf(2, " s=%d", s);
    if(s < 5)
  402fea:	2a04      	cmp	r2, #4
  402fec:	f240 87b1 	bls.w	403f52 <_zbar_decode_code128+0xfe6>
    sig = (get_color(dcode) == ZBAR_BAR)
        ? ((decode_e(get_width(dcode, 0) + get_width(dcode, 1), s, 11) << 12) |
           (decode_e(get_width(dcode, 1) + get_width(dcode, 2), s, 11) << 8) |
           (decode_e(get_width(dcode, 2) + get_width(dcode, 3), s, 11) << 4) |
           (decode_e(get_width(dcode, 3) + get_width(dcode, 4), s, 11)))
        : ((decode_e(get_width(dcode, 5) + get_width(dcode, 4), s, 11) << 12) |
  402ff0:	f011 0f01 	tst.w	r1, #1
  402ff4:	d058      	beq.n	4030a8 <_zbar_decode_code128+0x13c>
  402ff6:	1e4b      	subs	r3, r1, #1
  402ff8:	f003 030f 	and.w	r3, r3, #15
  402ffc:	eb00 0383 	add.w	r3, r0, r3, lsl #2
  403000:	6858      	ldr	r0, [r3, #4]
    dbprintf(2, " s=%d", s);
    if(s < 5)
        return(-1);
    /* calculate similar edge measurements */
    sig = (get_color(dcode) == ZBAR_BAR)
        ? ((decode_e(get_width(dcode, 0) + get_width(dcode, 1), s, 11) << 12) |
  403002:	686b      	ldr	r3, [r5, #4]
  403004:	18c5      	adds	r5, r0, r3
{
    /* result is encoded number of units - 2
     * (for use as zero based index)
     * or -1 if invalid
     */
    unsigned char E = ((e * n * 2 + 1) / s - 3) / 2;
  403006:	2316      	movs	r3, #22
  403008:	fb03 f305 	mul.w	r3, r3, r5
  40300c:	3301      	adds	r3, #1
  40300e:	fbb3 f3f2 	udiv	r3, r3, r2
  403012:	3b03      	subs	r3, #3
    return((E >= n - 3) ? -1 : E);
  403014:	f3c3 0347 	ubfx	r3, r3, #1, #8
  403018:	2b07      	cmp	r3, #7
  40301a:	bf88      	it	hi
  40301c:	f04f 33ff 	movhi.w	r3, #4294967295

/* retrieve i-th previous element width */
static inline unsigned get_width (const zbar_decoder_t *dcode,
                                  unsigned char offset)
{
    return(dcode->w[(dcode->idx - offset) & (DECODE_WINDOW - 1)]);
  403020:	1e8d      	subs	r5, r1, #2
  403022:	f005 050f 	and.w	r5, r5, #15
  403026:	eb04 0585 	add.w	r5, r4, r5, lsl #2
  40302a:	686e      	ldr	r6, [r5, #4]
           (decode_e(get_width(dcode, 1) + get_width(dcode, 2), s, 11) << 8) |
  40302c:	4430      	add	r0, r6
{
    /* result is encoded number of units - 2
     * (for use as zero based index)
     * or -1 if invalid
     */
    unsigned char E = ((e * n * 2 + 1) / s - 3) / 2;
  40302e:	2516      	movs	r5, #22
  403030:	fb05 f000 	mul.w	r0, r5, r0
  403034:	3001      	adds	r0, #1
  403036:	fbb0 f0f2 	udiv	r0, r0, r2
  40303a:	3803      	subs	r0, #3
    return((E >= n - 3) ? -1 : E);
  40303c:	f3c0 0047 	ubfx	r0, r0, #1, #8
  403040:	2807      	cmp	r0, #7
  403042:	bf88      	it	hi
  403044:	f04f 30ff 	movhi.w	r0, #4294967295
  403048:	0200      	lsls	r0, r0, #8
    dbprintf(2, " s=%d", s);
    if(s < 5)
        return(-1);
    /* calculate similar edge measurements */
    sig = (get_color(dcode) == ZBAR_BAR)
        ? ((decode_e(get_width(dcode, 0) + get_width(dcode, 1), s, 11) << 12) |
  40304a:	ea40 3303 	orr.w	r3, r0, r3, lsl #12

/* retrieve i-th previous element width */
static inline unsigned get_width (const zbar_decoder_t *dcode,
                                  unsigned char offset)
{
    return(dcode->w[(dcode->idx - offset) & (DECODE_WINDOW - 1)]);
  40304e:	1ec8      	subs	r0, r1, #3
  403050:	f000 000f 	and.w	r0, r0, #15
  403054:	eb04 0080 	add.w	r0, r4, r0, lsl #2
  403058:	6840      	ldr	r0, [r0, #4]
           (decode_e(get_width(dcode, 1) + get_width(dcode, 2), s, 11) << 8) |
           (decode_e(get_width(dcode, 2) + get_width(dcode, 3), s, 11) << 4) |
  40305a:	1985      	adds	r5, r0, r6
{
    /* result is encoded number of units - 2
     * (for use as zero based index)
     * or -1 if invalid
     */
    unsigned char E = ((e * n * 2 + 1) / s - 3) / 2;
  40305c:	2616      	movs	r6, #22
  40305e:	fb06 f505 	mul.w	r5, r6, r5
  403062:	3501      	adds	r5, #1
  403064:	fbb5 f5f2 	udiv	r5, r5, r2
  403068:	3d03      	subs	r5, #3
    return((E >= n - 3) ? -1 : E);
  40306a:	f3c5 0547 	ubfx	r5, r5, #1, #8
  40306e:	2d07      	cmp	r5, #7
  403070:	bf88      	it	hi
  403072:	f04f 35ff 	movhi.w	r5, #4294967295
    if(s < 5)
        return(-1);
    /* calculate similar edge measurements */
    sig = (get_color(dcode) == ZBAR_BAR)
        ? ((decode_e(get_width(dcode, 0) + get_width(dcode, 1), s, 11) << 12) |
           (decode_e(get_width(dcode, 1) + get_width(dcode, 2), s, 11) << 8) |
  403076:	ea43 1505 	orr.w	r5, r3, r5, lsl #4

/* retrieve i-th previous element width */
static inline unsigned get_width (const zbar_decoder_t *dcode,
                                  unsigned char offset)
{
    return(dcode->w[(dcode->idx - offset) & (DECODE_WINDOW - 1)]);
  40307a:	3904      	subs	r1, #4
  40307c:	f001 010f 	and.w	r1, r1, #15
  403080:	eb04 0181 	add.w	r1, r4, r1, lsl #2
           (decode_e(get_width(dcode, 2) + get_width(dcode, 3), s, 11) << 4) |
           (decode_e(get_width(dcode, 3) + get_width(dcode, 4), s, 11)))
  403084:	6849      	ldr	r1, [r1, #4]
  403086:	4408      	add	r0, r1
{
    /* result is encoded number of units - 2
     * (for use as zero based index)
     * or -1 if invalid
     */
    unsigned char E = ((e * n * 2 + 1) / s - 3) / 2;
  403088:	4631      	mov	r1, r6
  40308a:	fb01 f100 	mul.w	r1, r1, r0
  40308e:	3101      	adds	r1, #1
  403090:	fbb1 f1f2 	udiv	r1, r1, r2
  403094:	3903      	subs	r1, #3
    return((E >= n - 3) ? -1 : E);
  403096:	f3c1 0147 	ubfx	r1, r1, #1, #8
  40309a:	2907      	cmp	r1, #7
  40309c:	bf88      	it	hi
  40309e:	f04f 31ff 	movhi.w	r1, #4294967295
        : ((decode_e(get_width(dcode, 5) + get_width(dcode, 4), s, 11) << 12) |
  4030a2:	ea45 0301 	orr.w	r3, r5, r1
  4030a6:	e05b      	b.n	403160 <_zbar_decode_code128+0x1f4>

/* retrieve i-th previous element width */
static inline unsigned get_width (const zbar_decoder_t *dcode,
                                  unsigned char offset)
{
    return(dcode->w[(dcode->idx - offset) & (DECODE_WINDOW - 1)]);
  4030a8:	1f0b      	subs	r3, r1, #4
  4030aa:	f003 030f 	and.w	r3, r3, #15
  4030ae:	eb00 0383 	add.w	r3, r0, r3, lsl #2
  4030b2:	6858      	ldr	r0, [r3, #4]
  4030b4:	1f4b      	subs	r3, r1, #5
  4030b6:	f003 030f 	and.w	r3, r3, #15
  4030ba:	eb04 0383 	add.w	r3, r4, r3, lsl #2
  4030be:	685b      	ldr	r3, [r3, #4]
  4030c0:	18c5      	adds	r5, r0, r3
{
    /* result is encoded number of units - 2
     * (for use as zero based index)
     * or -1 if invalid
     */
    unsigned char E = ((e * n * 2 + 1) / s - 3) / 2;
  4030c2:	2316      	movs	r3, #22
  4030c4:	fb03 f305 	mul.w	r3, r3, r5
  4030c8:	3301      	adds	r3, #1
  4030ca:	fbb3 f3f2 	udiv	r3, r3, r2
  4030ce:	3b03      	subs	r3, #3
    return((E >= n - 3) ? -1 : E);
  4030d0:	f3c3 0347 	ubfx	r3, r3, #1, #8
  4030d4:	2b07      	cmp	r3, #7
  4030d6:	bf88      	it	hi
  4030d8:	f04f 33ff 	movhi.w	r3, #4294967295

/* retrieve i-th previous element width */
static inline unsigned get_width (const zbar_decoder_t *dcode,
                                  unsigned char offset)
{
    return(dcode->w[(dcode->idx - offset) & (DECODE_WINDOW - 1)]);
  4030dc:	1ecd      	subs	r5, r1, #3
  4030de:	f005 050f 	and.w	r5, r5, #15
  4030e2:	eb04 0585 	add.w	r5, r4, r5, lsl #2
  4030e6:	686e      	ldr	r6, [r5, #4]
           (decode_e(get_width(dcode, 4) + get_width(dcode, 3), s, 11) << 8) |
  4030e8:	4430      	add	r0, r6
{
    /* result is encoded number of units - 2
     * (for use as zero based index)
     * or -1 if invalid
     */
    unsigned char E = ((e * n * 2 + 1) / s - 3) / 2;
  4030ea:	2516      	movs	r5, #22
  4030ec:	fb05 f000 	mul.w	r0, r5, r0
  4030f0:	3001      	adds	r0, #1
  4030f2:	fbb0 f0f2 	udiv	r0, r0, r2
  4030f6:	3803      	subs	r0, #3
    return((E >= n - 3) ? -1 : E);
  4030f8:	f3c0 0047 	ubfx	r0, r0, #1, #8
  4030fc:	2807      	cmp	r0, #7
  4030fe:	bf88      	it	hi
  403100:	f04f 30ff 	movhi.w	r0, #4294967295
  403104:	0200      	lsls	r0, r0, #8
    sig = (get_color(dcode) == ZBAR_BAR)
        ? ((decode_e(get_width(dcode, 0) + get_width(dcode, 1), s, 11) << 12) |
           (decode_e(get_width(dcode, 1) + get_width(dcode, 2), s, 11) << 8) |
           (decode_e(get_width(dcode, 2) + get_width(dcode, 3), s, 11) << 4) |
           (decode_e(get_width(dcode, 3) + get_width(dcode, 4), s, 11)))
        : ((decode_e(get_width(dcode, 5) + get_width(dcode, 4), s, 11) << 12) |
  403106:	ea40 3003 	orr.w	r0, r0, r3, lsl #12

/* retrieve i-th previous element width */
static inline unsigned get_width (const zbar_decoder_t *dcode,
                                  unsigned char offset)
{
    return(dcode->w[(dcode->idx - offset) & (DECODE_WINDOW - 1)]);
  40310a:	1e8b      	subs	r3, r1, #2
  40310c:	f003 030f 	and.w	r3, r3, #15
  403110:	eb04 0383 	add.w	r3, r4, r3, lsl #2
  403114:	685d      	ldr	r5, [r3, #4]
           (decode_e(get_width(dcode, 4) + get_width(dcode, 3), s, 11) << 8) |
           (decode_e(get_width(dcode, 3) + get_width(dcode, 2), s, 11) << 4) |
  403116:	442e      	add	r6, r5
{
    /* result is encoded number of units - 2
     * (for use as zero based index)
     * or -1 if invalid
     */
    unsigned char E = ((e * n * 2 + 1) / s - 3) / 2;
  403118:	2316      	movs	r3, #22
  40311a:	fb03 f306 	mul.w	r3, r3, r6
  40311e:	3301      	adds	r3, #1
  403120:	fbb3 f3f2 	udiv	r3, r3, r2
  403124:	3b03      	subs	r3, #3
    return((E >= n - 3) ? -1 : E);
  403126:	f3c3 0347 	ubfx	r3, r3, #1, #8
  40312a:	2b07      	cmp	r3, #7
  40312c:	bf88      	it	hi
  40312e:	f04f 33ff 	movhi.w	r3, #4294967295
        ? ((decode_e(get_width(dcode, 0) + get_width(dcode, 1), s, 11) << 12) |
           (decode_e(get_width(dcode, 1) + get_width(dcode, 2), s, 11) << 8) |
           (decode_e(get_width(dcode, 2) + get_width(dcode, 3), s, 11) << 4) |
           (decode_e(get_width(dcode, 3) + get_width(dcode, 4), s, 11)))
        : ((decode_e(get_width(dcode, 5) + get_width(dcode, 4), s, 11) << 12) |
           (decode_e(get_width(dcode, 4) + get_width(dcode, 3), s, 11) << 8) |
  403132:	ea40 1303 	orr.w	r3, r0, r3, lsl #4

/* retrieve i-th previous element width */
static inline unsigned get_width (const zbar_decoder_t *dcode,
                                  unsigned char offset)
{
    return(dcode->w[(dcode->idx - offset) & (DECODE_WINDOW - 1)]);
  403136:	3901      	subs	r1, #1
  403138:	f001 010f 	and.w	r1, r1, #15
  40313c:	eb04 0181 	add.w	r1, r4, r1, lsl #2
           (decode_e(get_width(dcode, 3) + get_width(dcode, 2), s, 11) << 4) |
           (decode_e(get_width(dcode, 2) + get_width(dcode, 1), s, 11)));
  403140:	6849      	ldr	r1, [r1, #4]
  403142:	440d      	add	r5, r1
{
    /* result is encoded number of units - 2
     * (for use as zero based index)
     * or -1 if invalid
     */
    unsigned char E = ((e * n * 2 + 1) / s - 3) / 2;
  403144:	2116      	movs	r1, #22
  403146:	fb01 f105 	mul.w	r1, r1, r5
  40314a:	3101      	adds	r1, #1
  40314c:	fbb1 f1f2 	udiv	r1, r1, r2
  403150:	3903      	subs	r1, #3
    return((E >= n - 3) ? -1 : E);
  403152:	f3c1 0147 	ubfx	r1, r1, #1, #8
  403156:	2907      	cmp	r1, #7
  403158:	bf88      	it	hi
  40315a:	f04f 31ff 	movhi.w	r1, #4294967295
    sig = (get_color(dcode) == ZBAR_BAR)
        ? ((decode_e(get_width(dcode, 0) + get_width(dcode, 1), s, 11) << 12) |
           (decode_e(get_width(dcode, 1) + get_width(dcode, 2), s, 11) << 8) |
           (decode_e(get_width(dcode, 2) + get_width(dcode, 3), s, 11) << 4) |
           (decode_e(get_width(dcode, 3) + get_width(dcode, 4), s, 11)))
        : ((decode_e(get_width(dcode, 5) + get_width(dcode, 4), s, 11) << 12) |
  40315e:	430b      	orrs	r3, r1
           (decode_e(get_width(dcode, 4) + get_width(dcode, 3), s, 11) << 8) |
           (decode_e(get_width(dcode, 3) + get_width(dcode, 2), s, 11) << 4) |
           (decode_e(get_width(dcode, 2) + get_width(dcode, 1), s, 11)));
    if(sig < 0)
  403160:	2b00      	cmp	r3, #0
  403162:	f2c0 86f6 	blt.w	403f52 <_zbar_decode_code128+0xfe6>
        return(-1);
    dbprintf(2, " sig=%04x", sig);
    /* lookup edge signature */
    c = (sig & 0x4444) ? decode_hi(sig) : decode_lo(sig);
  403166:	f244 4144 	movw	r1, #17476	; 0x4444
  40316a:	420b      	tst	r3, r1
  40316c:	d076      	beq.n	40325c <_zbar_decode_code128+0x2f0>
    return(c);
}

static inline signed char decode_hi (int sig)
{
    unsigned char rev = (sig & 0x4400) != 0;
  40316e:	f413 4f88 	tst.w	r3, #17408	; 0x4400
  403172:	bf14      	ite	ne
  403174:	2001      	movne	r0, #1
  403176:	2000      	moveq	r0, #0
    unsigned char idx, c;
    if(rev)
  403178:	2800      	cmp	r0, #0
  40317a:	f000 867d 	beq.w	403e78 <_zbar_decode_code128+0xf0c>
        sig = (((sig >> 12) & 0x000f) |
               ((sig >>  4) & 0x00f0) |
  40317e:	111d      	asrs	r5, r3, #4
  403180:	f005 05f0 	and.w	r5, r5, #240	; 0xf0
static inline signed char decode_hi (int sig)
{
    unsigned char rev = (sig & 0x4400) != 0;
    unsigned char idx, c;
    if(rev)
        sig = (((sig >> 12) & 0x000f) |
  403184:	f3c3 3103 	ubfx	r1, r3, #12, #4
  403188:	430d      	orrs	r5, r1
               ((sig >>  4) & 0x00f0) |
               ((sig <<  4) & 0x0f00) |
  40318a:	0119      	lsls	r1, r3, #4
  40318c:	f401 6170 	and.w	r1, r1, #3840	; 0xf00
{
    unsigned char rev = (sig & 0x4400) != 0;
    unsigned char idx, c;
    if(rev)
        sig = (((sig >> 12) & 0x000f) |
               ((sig >>  4) & 0x00f0) |
  403190:	4329      	orrs	r1, r5
               ((sig <<  4) & 0x0f00) |
               ((sig << 12) & 0xf000));
  403192:	031b      	lsls	r3, r3, #12
  403194:	b29b      	uxth	r3, r3
static inline signed char decode_hi (int sig)
{
    unsigned char rev = (sig & 0x4400) != 0;
    unsigned char idx, c;
    if(rev)
        sig = (((sig >> 12) & 0x000f) |
  403196:	430b      	orrs	r3, r1
               ((sig >>  4) & 0x00f0) |
               ((sig <<  4) & 0x0f00) |
               ((sig << 12) & 0xf000));
    dbprintf(2, " rev=%x", rev != 0);

    switch(sig) {
  403198:	f240 3141 	movw	r1, #833	; 0x341
  40319c:	428b      	cmp	r3, r1
  40319e:	d03e      	beq.n	40321e <_zbar_decode_code128+0x2b2>
  4031a0:	dc14      	bgt.n	4031cc <_zbar_decode_code128+0x260>
  4031a2:	2b34      	cmp	r3, #52	; 0x34
  4031a4:	d033      	beq.n	40320e <_zbar_decode_code128+0x2a2>
  4031a6:	dc04      	bgt.n	4031b2 <_zbar_decode_code128+0x246>
  4031a8:	2b14      	cmp	r3, #20
  4031aa:	d046      	beq.n	40323a <_zbar_decode_code128+0x2ce>
  4031ac:	2b25      	cmp	r3, #37	; 0x25
  4031ae:	d049      	beq.n	403244 <_zbar_decode_code128+0x2d8>
  4031b0:	e100      	b.n	4033b4 <_zbar_decode_code128+0x448>
  4031b2:	f240 1143 	movw	r1, #323	; 0x143
  4031b6:	428b      	cmp	r3, r1
  4031b8:	d02d      	beq.n	403216 <_zbar_decode_code128+0x2aa>
  4031ba:	f240 2143 	movw	r1, #579	; 0x243
  4031be:	428b      	cmp	r3, r1
  4031c0:	d02b      	beq.n	40321a <_zbar_decode_code128+0x2ae>
  4031c2:	f5b3 7f9a 	cmp.w	r3, #308	; 0x134
  4031c6:	f040 80f5 	bne.w	4033b4 <_zbar_decode_code128+0x448>
  4031ca:	e022      	b.n	403212 <_zbar_decode_code128+0x2a6>
  4031cc:	f241 1134 	movw	r1, #4404	; 0x1134
  4031d0:	428b      	cmp	r3, r1
  4031d2:	d02c      	beq.n	40322e <_zbar_decode_code128+0x2c2>
  4031d4:	dc0d      	bgt.n	4031f2 <_zbar_decode_code128+0x286>
  4031d6:	f241 0124 	movw	r1, #4132	; 0x1024
  4031da:	428b      	cmp	r3, r1
  4031dc:	d023      	beq.n	403226 <_zbar_decode_code128+0x2ba>
  4031de:	f241 1114 	movw	r1, #4372	; 0x1114
  4031e2:	428b      	cmp	r3, r1
  4031e4:	d021      	beq.n	40322a <_zbar_decode_code128+0x2be>
  4031e6:	f240 3152 	movw	r1, #850	; 0x352
  4031ea:	428b      	cmp	r3, r1
  4031ec:	f040 80e2 	bne.w	4033b4 <_zbar_decode_code128+0x448>
  4031f0:	e017      	b.n	403222 <_zbar_decode_code128+0x2b6>
  4031f2:	f241 2143 	movw	r1, #4675	; 0x1243
  4031f6:	428b      	cmp	r3, r1
  4031f8:	d01d      	beq.n	403236 <_zbar_decode_code128+0x2ca>
  4031fa:	f241 4141 	movw	r1, #5185	; 0x1441
  4031fe:	428b      	cmp	r3, r1
  403200:	d024      	beq.n	40324c <_zbar_decode_code128+0x2e0>
  403202:	f241 2142 	movw	r1, #4674	; 0x1242
  403206:	428b      	cmp	r3, r1
  403208:	f040 80d4 	bne.w	4033b4 <_zbar_decode_code128+0x448>
  40320c:	e011      	b.n	403232 <_zbar_decode_code128+0x2c6>
    case 0x0014: idx = 0x0; break;
    case 0x0025: idx = 0x1; break;
    case 0x0034: idx = 0x2; break;
  40320e:	2302      	movs	r3, #2
  403210:	e016      	b.n	403240 <_zbar_decode_code128+0x2d4>
    case 0x0134: idx = 0x3; break;
  403212:	2303      	movs	r3, #3
  403214:	e014      	b.n	403240 <_zbar_decode_code128+0x2d4>
    case 0x0143: idx = 0x4; break;
  403216:	2304      	movs	r3, #4
  403218:	e012      	b.n	403240 <_zbar_decode_code128+0x2d4>
    case 0x0243: idx = 0x5; break;
  40321a:	2305      	movs	r3, #5
  40321c:	e010      	b.n	403240 <_zbar_decode_code128+0x2d4>
    case 0x0341: idx = 0x6; break;
  40321e:	2306      	movs	r3, #6
  403220:	e00e      	b.n	403240 <_zbar_decode_code128+0x2d4>
    case 0x0352: idx = 0x7; break;
  403222:	2307      	movs	r3, #7
  403224:	e00c      	b.n	403240 <_zbar_decode_code128+0x2d4>
    case 0x1024: idx = 0x8; break;
  403226:	2308      	movs	r3, #8
  403228:	e00a      	b.n	403240 <_zbar_decode_code128+0x2d4>
    case 0x1114: idx = 0x9; break;
  40322a:	2309      	movs	r3, #9
  40322c:	e008      	b.n	403240 <_zbar_decode_code128+0x2d4>
    case 0x1134: idx = 0xa; break;
  40322e:	230a      	movs	r3, #10
  403230:	e006      	b.n	403240 <_zbar_decode_code128+0x2d4>
    case 0x1242: idx = 0xb; break;
  403232:	230b      	movs	r3, #11
  403234:	e004      	b.n	403240 <_zbar_decode_code128+0x2d4>
    case 0x1243: idx = 0xc; break;
  403236:	230c      	movs	r3, #12
  403238:	e002      	b.n	403240 <_zbar_decode_code128+0x2d4>
               ((sig <<  4) & 0x0f00) |
               ((sig << 12) & 0xf000));
    dbprintf(2, " rev=%x", rev != 0);

    switch(sig) {
    case 0x0014: idx = 0x0; break;
  40323a:	2300      	movs	r3, #0
  40323c:	e000      	b.n	403240 <_zbar_decode_code128+0x2d4>
  40323e:	2300      	movs	r3, #0
    case 0x1242: idx = 0xb; break;
    case 0x1243: idx = 0xc; break;
    case 0x1441: idx = 0xd; rev = 0; break;
    default: return(-1);
    }
    if(rev)
  403240:	b908      	cbnz	r0, 403246 <_zbar_decode_code128+0x2da>
  403242:	e006      	b.n	403252 <_zbar_decode_code128+0x2e6>
               ((sig << 12) & 0xf000));
    dbprintf(2, " rev=%x", rev != 0);

    switch(sig) {
    case 0x0014: idx = 0x0; break;
    case 0x0025: idx = 0x1; break;
  403244:	2301      	movs	r3, #1
    case 0x1243: idx = 0xc; break;
    case 0x1441: idx = 0xd; rev = 0; break;
    default: return(-1);
    }
    if(rev)
        idx += 0xe;
  403246:	330e      	adds	r3, #14
  403248:	b2db      	uxtb	r3, r3
  40324a:	e002      	b.n	403252 <_zbar_decode_code128+0x2e6>
    case 0x1024: idx = 0x8; break;
    case 0x1114: idx = 0x9; break;
    case 0x1134: idx = 0xa; break;
    case 0x1242: idx = 0xb; break;
    case 0x1243: idx = 0xc; break;
    case 0x1441: idx = 0xd; rev = 0; break;
  40324c:	230d      	movs	r3, #13
  40324e:	e000      	b.n	403252 <_zbar_decode_code128+0x2e6>
  403250:	230d      	movs	r3, #13
    default: return(-1);
    }
    if(rev)
        idx += 0xe;
    c = characters[0x51 + idx];
  403252:	49b5      	ldr	r1, [pc, #724]	; (403528 <_zbar_decode_code128+0x5bc>)
  403254:	440b      	add	r3, r1
    dbprintf(2, " %02x => %02x", idx, c);
    return(c);
  403256:	f893 1051 	ldrb.w	r1, [r3, #81]	; 0x51
  40325a:	e04c      	b.n	4032f6 <_zbar_decode_code128+0x38a>
};

static inline signed char decode_lo (int sig)
{
    unsigned char offset = (((sig >> 1) & 0x01) |
                            ((sig >> 3) & 0x06) |
  40325c:	10d8      	asrs	r0, r3, #3
    0xf7, 0xff, 0xf8, 0x9f, 0xff, 0xff, 0xff, 0xff,     /* 33 */
};

static inline signed char decode_lo (int sig)
{
    unsigned char offset = (((sig >> 1) & 0x01) |
  40325e:	f000 0006 	and.w	r0, r0, #6
  403262:	f3c3 0140 	ubfx	r1, r3, #1, #1
  403266:	4308      	orrs	r0, r1
                            ((sig >> 3) & 0x06) |
                            ((sig >> 5) & 0x18) |
  403268:	1159      	asrs	r1, r3, #5
    0xf7, 0xff, 0xf8, 0x9f, 0xff, 0xff, 0xff, 0xff,     /* 33 */
};

static inline signed char decode_lo (int sig)
{
    unsigned char offset = (((sig >> 1) & 0x01) |
  40326a:	f001 0118 	and.w	r1, r1, #24
  40326e:	4301      	orrs	r1, r0
                            ((sig >> 3) & 0x06) |
                            ((sig >> 5) & 0x18) |
                            ((sig >> 7) & 0x60));
  403270:	11d8      	asrs	r0, r3, #7
    0xf7, 0xff, 0xf8, 0x9f, 0xff, 0xff, 0xff, 0xff,     /* 33 */
};

static inline signed char decode_lo (int sig)
{
    unsigned char offset = (((sig >> 1) & 0x01) |
  403272:	f000 0060 	and.w	r0, r0, #96	; 0x60
                            ((sig >> 3) & 0x06) |
                            ((sig >> 5) & 0x18) |
                            ((sig >> 7) & 0x60));
    unsigned char idx = lo_offset[offset];
  403276:	ea41 0700 	orr.w	r7, r1, r0
  40327a:	49ac      	ldr	r1, [pc, #688]	; (40352c <_zbar_decode_code128+0x5c0>)
  40327c:	5dcd      	ldrb	r5, [r1, r7]
    unsigned char base, c;

    if(sig & 1)
  40327e:	f013 0f01 	tst.w	r3, #1
        idx &= 0xf;
  403282:	bf14      	ite	ne
  403284:	f005 050f 	andne.w	r5, r5, #15
    else
        idx >>= 4;
  403288:	092d      	lsreq	r5, r5, #4
    if(idx == 0xf)
  40328a:	2d0f      	cmp	r5, #15
  40328c:	f000 8656 	beq.w	403f3c <_zbar_decode_code128+0xfd0>
        return(-1);

    base = (sig >> 11) | ((sig >> 9) & 1);
  403290:	f3c3 2640 	ubfx	r6, r3, #9, #1
  403294:	ea46 26e3 	orr.w	r6, r6, r3, asr #11
  403298:	b2f1      	uxtb	r1, r6
    zassert(base < 8, -1, "sig=%x offset=%x idx=%x base=%x\n",
  40329a:	2907      	cmp	r1, #7
  40329c:	d911      	bls.n	4032c2 <_zbar_decode_code128+0x356>
  40329e:	4aa4      	ldr	r2, [pc, #656]	; (403530 <_zbar_decode_code128+0x5c4>)
  4032a0:	6812      	ldr	r2, [r2, #0]
  4032a2:	68d0      	ldr	r0, [r2, #12]
  4032a4:	4aa3      	ldr	r2, [pc, #652]	; (403534 <_zbar_decode_code128+0x5c8>)
  4032a6:	9200      	str	r2, [sp, #0]
  4032a8:	4aa3      	ldr	r2, [pc, #652]	; (403538 <_zbar_decode_code128+0x5cc>)
  4032aa:	9201      	str	r2, [sp, #4]
  4032ac:	9302      	str	r3, [sp, #8]
  4032ae:	9703      	str	r7, [sp, #12]
  4032b0:	9504      	str	r5, [sp, #16]
  4032b2:	9105      	str	r1, [sp, #20]
  4032b4:	49a1      	ldr	r1, [pc, #644]	; (40353c <_zbar_decode_code128+0x5d0>)
  4032b6:	4aa2      	ldr	r2, [pc, #648]	; (403540 <_zbar_decode_code128+0x5d4>)
  4032b8:	2386      	movs	r3, #134	; 0x86
  4032ba:	4da2      	ldr	r5, [pc, #648]	; (403544 <_zbar_decode_code128+0x5d8>)
  4032bc:	47a8      	blx	r5
  4032be:	f000 be3d 	b.w	403f3c <_zbar_decode_code128+0xfd0>
            sig, offset, idx, base);
    idx += lo_base[base];
  4032c2:	48a1      	ldr	r0, [pc, #644]	; (403548 <_zbar_decode_code128+0x5dc>)
  4032c4:	5c40      	ldrb	r0, [r0, r1]
  4032c6:	4405      	add	r5, r0
  4032c8:	b2ed      	uxtb	r5, r5

    zassert(idx <= 0x50, -1, "sig=%x offset=%x base=%x idx=%x\n",
  4032ca:	2d50      	cmp	r5, #80	; 0x50
  4032cc:	d911      	bls.n	4032f2 <_zbar_decode_code128+0x386>
  4032ce:	4a98      	ldr	r2, [pc, #608]	; (403530 <_zbar_decode_code128+0x5c4>)
  4032d0:	6812      	ldr	r2, [r2, #0]
  4032d2:	68d0      	ldr	r0, [r2, #12]
  4032d4:	4a97      	ldr	r2, [pc, #604]	; (403534 <_zbar_decode_code128+0x5c8>)
  4032d6:	9200      	str	r2, [sp, #0]
  4032d8:	4a9c      	ldr	r2, [pc, #624]	; (40354c <_zbar_decode_code128+0x5e0>)
  4032da:	9201      	str	r2, [sp, #4]
  4032dc:	9302      	str	r3, [sp, #8]
  4032de:	9703      	str	r7, [sp, #12]
  4032e0:	9104      	str	r1, [sp, #16]
  4032e2:	9505      	str	r5, [sp, #20]
  4032e4:	499a      	ldr	r1, [pc, #616]	; (403550 <_zbar_decode_code128+0x5e4>)
  4032e6:	4a96      	ldr	r2, [pc, #600]	; (403540 <_zbar_decode_code128+0x5d4>)
  4032e8:	238a      	movs	r3, #138	; 0x8a
  4032ea:	4d96      	ldr	r5, [pc, #600]	; (403544 <_zbar_decode_code128+0x5d8>)
  4032ec:	47a8      	blx	r5
  4032ee:	f000 be25 	b.w	403f3c <_zbar_decode_code128+0xfd0>
            sig, offset, base, idx);
    c = characters[idx];
  4032f2:	4b8d      	ldr	r3, [pc, #564]	; (403528 <_zbar_decode_code128+0x5bc>)
    dbprintf(2, " %02x(%x(%02x)/%x(%02x)) => %02x",
             idx, base, lo_base[base], offset, lo_offset[offset],
             (unsigned char)c);
    return(c);
  4032f4:	5d59      	ldrb	r1, [r3, r5]
    if(sig < 0)
        return(-1);
    dbprintf(2, " sig=%04x", sig);
    /* lookup edge signature */
    c = (sig & 0x4444) ? decode_hi(sig) : decode_lo(sig);
    if(c == -1)
  4032f6:	b24b      	sxtb	r3, r1
  4032f8:	f1b3 3fff 	cmp.w	r3, #4294967295
  4032fc:	f000 8629 	beq.w	403f52 <_zbar_decode_code128+0xfe6>
};

/* return current element color */
static inline char get_color (const zbar_decoder_t *dcode)
{
    return(dcode->idx & 1);
  403300:	7823      	ldrb	r3, [r4, #0]
        return(-1);

    /* character validation */
    bars = (get_color(dcode) == ZBAR_BAR)
        ? (get_width(dcode, 0) + get_width(dcode, 2) + get_width(dcode, 4))
        : (get_width(dcode, 1) + get_width(dcode, 3) + get_width(dcode, 5));
  403302:	f013 0f01 	tst.w	r3, #1
  403306:	d013      	beq.n	403330 <_zbar_decode_code128+0x3c4>

/* retrieve i-th previous element width */
static inline unsigned get_width (const zbar_decoder_t *dcode,
                                  unsigned char offset)
{
    return(dcode->w[(dcode->idx - offset) & (DECODE_WINDOW - 1)]);
  403308:	1e98      	subs	r0, r3, #2
  40330a:	f000 000f 	and.w	r0, r0, #15
  40330e:	eb04 0080 	add.w	r0, r4, r0, lsl #2
  403312:	1f1d      	subs	r5, r3, #4
  403314:	f005 050f 	and.w	r5, r5, #15
  403318:	eb04 0585 	add.w	r5, r4, r5, lsl #2
  40331c:	6846      	ldr	r6, [r0, #4]
  40331e:	6868      	ldr	r0, [r5, #4]
  403320:	4430      	add	r0, r6
  403322:	f003 030f 	and.w	r3, r3, #15
  403326:	eb04 0383 	add.w	r3, r4, r3, lsl #2
  40332a:	685b      	ldr	r3, [r3, #4]
  40332c:	4418      	add	r0, r3
  40332e:	e013      	b.n	403358 <_zbar_decode_code128+0x3ec>
  403330:	1edd      	subs	r5, r3, #3
  403332:	f005 050f 	and.w	r5, r5, #15
  403336:	eb04 0585 	add.w	r5, r4, r5, lsl #2
  40333a:	1e58      	subs	r0, r3, #1
  40333c:	f000 000f 	and.w	r0, r0, #15
  403340:	eb04 0080 	add.w	r0, r4, r0, lsl #2
  403344:	686d      	ldr	r5, [r5, #4]
  403346:	6840      	ldr	r0, [r0, #4]
  403348:	4428      	add	r0, r5
  40334a:	3b05      	subs	r3, #5
  40334c:	f003 030f 	and.w	r3, r3, #15
  403350:	eb04 0383 	add.w	r3, r4, r3, lsl #2
  403354:	685b      	ldr	r3, [r3, #4]
  403356:	4418      	add	r0, r3
    bars = bars * 11 * 4 / s;
  403358:	232c      	movs	r3, #44	; 0x2c
  40335a:	fb03 f300 	mul.w	r3, r3, r0
  40335e:	fbb3 f2f2 	udiv	r2, r3, r2
    return(c);
}

static inline unsigned char calc_check (unsigned char c)
{
    if(!(c & 0x80))
  403362:	f011 0f80 	tst.w	r1, #128	; 0x80
  403366:	d016      	beq.n	403396 <_zbar_decode_code128+0x42a>
        return(0x18);
    c &= 0x7f;
  403368:	f001 037f 	and.w	r3, r1, #127	; 0x7f
    if(c < 0x3d)
  40336c:	2b3c      	cmp	r3, #60	; 0x3c
  40336e:	d806      	bhi.n	40337e <_zbar_decode_code128+0x412>
        return((c < 0x30 && c != 0x17) ? 0x10 : 0x20);
  403370:	2b2f      	cmp	r3, #47	; 0x2f
  403372:	d812      	bhi.n	40339a <_zbar_decode_code128+0x42e>
  403374:	2b17      	cmp	r3, #23
  403376:	bf0c      	ite	eq
  403378:	2320      	moveq	r3, #32
  40337a:	2310      	movne	r3, #16
  40337c:	e00e      	b.n	40339c <_zbar_decode_code128+0x430>
    if(c < 0x50)
  40337e:	2b4f      	cmp	r3, #79	; 0x4f
  403380:	d804      	bhi.n	40338c <_zbar_decode_code128+0x420>
        return((c == 0x4d) ? 0x20 : 0x10);
  403382:	2b4d      	cmp	r3, #77	; 0x4d
  403384:	bf0c      	ite	eq
  403386:	2320      	moveq	r3, #32
  403388:	2310      	movne	r3, #16
  40338a:	e007      	b.n	40339c <_zbar_decode_code128+0x430>
    return((c < 0x67) ? 0x20 : 0x10);
  40338c:	2b67      	cmp	r3, #103	; 0x67
  40338e:	bf34      	ite	cc
  403390:	2320      	movcc	r3, #32
  403392:	2310      	movcs	r3, #16
  403394:	e002      	b.n	40339c <_zbar_decode_code128+0x430>
}

static inline unsigned char calc_check (unsigned char c)
{
    if(!(c & 0x80))
        return(0x18);
  403396:	2318      	movs	r3, #24
  403398:	e000      	b.n	40339c <_zbar_decode_code128+0x430>
    c &= 0x7f;
    if(c < 0x3d)
        return((c < 0x30 && c != 0x17) ? 0x10 : 0x20);
  40339a:	2320      	movs	r3, #32
        ? (get_width(dcode, 0) + get_width(dcode, 2) + get_width(dcode, 4))
        : (get_width(dcode, 1) + get_width(dcode, 3) + get_width(dcode, 5));
    bars = bars * 11 * 4 / s;
    chk = calc_check(c);
    dbprintf(2, " bars=%d chk=%d", bars, chk);
    if(chk - 7 > bars || bars > chk + 7)
  40339c:	b25b      	sxtb	r3, r3
  40339e:	1fd8      	subs	r0, r3, #7
  4033a0:	4282      	cmp	r2, r0
  4033a2:	f0c0 85d6 	bcc.w	403f52 <_zbar_decode_code128+0xfe6>
  4033a6:	3307      	adds	r3, #7
  4033a8:	429a      	cmp	r2, r3
  4033aa:	f200 85d2 	bhi.w	403f52 <_zbar_decode_code128+0xfe6>
        return(-1);

    return(c & 0x7f);
  4033ae:	f001 067f 	and.w	r6, r1, #127	; 0x7f
  4033b2:	e002      	b.n	4033ba <_zbar_decode_code128+0x44e>
        return(-1);
    dbprintf(2, " sig=%04x", sig);
    /* lookup edge signature */
    c = (sig & 0x4444) ? decode_hi(sig) : decode_lo(sig);
    if(c == -1)
        return(-1);
  4033b4:	26ff      	movs	r6, #255	; 0xff
  4033b6:	e000      	b.n	4033ba <_zbar_decode_code128+0x44e>
  4033b8:	26ff      	movs	r6, #255	; 0xff
    dbprintf(2, "      code128[%c%02d+%x]:",
             (dcode128->direction) ? '<' : '>',
             dcode128->character, dcode128->element);

    c = decode6(dcode);
    if(dcode128->character < 0) {
  4033ba:	f8b4 3104 	ldrh.w	r3, [r4, #260]	; 0x104
  4033be:	f343 130b 	sbfx	r3, r3, #4, #12
  4033c2:	b29d      	uxth	r5, r3
  4033c4:	b21b      	sxth	r3, r3
  4033c6:	2b00      	cmp	r3, #0
  4033c8:	da35      	bge.n	403436 <_zbar_decode_code128+0x4ca>
        unsigned qz;
        dbprintf(2, " c=%02x", c);
        if(c < START_A || c > STOP_REV || c == STOP_FWD) {
  4033ca:	b2f2      	uxtb	r2, r6
  4033cc:	f1a2 0367 	sub.w	r3, r2, #103	; 0x67
  4033d0:	b2db      	uxtb	r3, r3
  4033d2:	2b04      	cmp	r3, #4
  4033d4:	f200 8544 	bhi.w	403e60 <_zbar_decode_code128+0xef4>
  4033d8:	b273      	sxtb	r3, r6
  4033da:	2b6a      	cmp	r3, #106	; 0x6a
  4033dc:	f000 8542 	beq.w	403e64 <_zbar_decode_code128+0xef8>
  4033e0:	7823      	ldrb	r3, [r4, #0]
  4033e2:	3b06      	subs	r3, #6
  4033e4:	f003 030f 	and.w	r3, r3, #15
  4033e8:	eb04 0383 	add.w	r3, r4, r3, lsl #2
  4033ec:	685b      	ldr	r3, [r3, #4]
            dbprintf(2, " [invalid]\n");
            return(0);
        }
        qz = get_width(dcode, 6);
        if(qz && qz < (dcode128->s6 * 3) / 4) {
  4033ee:	b13b      	cbz	r3, 403400 <_zbar_decode_code128+0x494>
  4033f0:	f8d4 1108 	ldr.w	r1, [r4, #264]	; 0x108
  4033f4:	eb01 0141 	add.w	r1, r1, r1, lsl #1
  4033f8:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
  4033fc:	f0c0 8534 	bcc.w	403e68 <_zbar_decode_code128+0xefc>
            dbprintf(2, " [invalid qz %d]\n", qz);
            return(0);
        }
        /* decoded valid start/stop */
        /* initialize state */
        dcode128->character = 1;
  403400:	f8b4 3104 	ldrh.w	r3, [r4, #260]	; 0x104
  403404:	2101      	movs	r1, #1
  403406:	f361 130f 	bfi	r3, r1, #4, #12
  40340a:	f8a4 3104 	strh.w	r3, [r4, #260]	; 0x104
        if(c == STOP_REV) {
  40340e:	b271      	sxtb	r1, r6
  403410:	296b      	cmp	r1, #107	; 0x6b
            dcode128->direction = ZBAR_BAR;
  403412:	f894 3104 	ldrb.w	r3, [r4, #260]	; 0x104
            dcode128->element = 7;
  403416:	bf0c      	ite	eq
  403418:	f043 030f 	orreq.w	r3, r3, #15
        }
        else
            dcode128->direction = ZBAR_SPACE;
  40341c:	f36f 0300 	bfcne	r3, #0, #1
  403420:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
        dcode128->start = c;
  403424:	f884 2106 	strb.w	r2, [r4, #262]	; 0x106
        dcode128->width = dcode128->s6;
  403428:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
  40342c:	f8c4 310c 	str.w	r3, [r4, #268]	; 0x10c
        dbprintf(2, " dir=%x [valid start]\n", dcode128->direction);
        return(0);
  403430:	2000      	movs	r0, #0
  403432:	f000 bdf0 	b.w	404016 <_zbar_decode_code128+0x10aa>
    }
    else if(c < 0 || size_buf(dcode, dcode128->character + 1)) {
  403436:	f016 0f80 	tst.w	r6, #128	; 0x80
  40343a:	d11d      	bne.n	403478 <_zbar_decode_code128+0x50c>
  40343c:	b22d      	sxth	r5, r5
  40343e:	3501      	adds	r5, #1
/* ensure output buffer has sufficient allocation for request */
static inline char size_buf (zbar_decoder_t *dcode,
                             unsigned len)
{
    unsigned char *buf;
    if(len <= BUFFER_MIN)
  403440:	2d20      	cmp	r5, #32
  403442:	f240 858e 	bls.w	403f62 <_zbar_decode_code128+0xff6>
        return(0);
    if(len < dcode->buf_alloc)
  403446:	6d63      	ldr	r3, [r4, #84]	; 0x54
  403448:	429d      	cmp	r5, r3
  40344a:	f0c0 858a 	bcc.w	403f62 <_zbar_decode_code128+0xff6>
        /* FIXME size reduction heuristic? */
        return(0);
    if(len > BUFFER_MAX)
  40344e:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
  403452:	d811      	bhi.n	403478 <_zbar_decode_code128+0x50c>
        return(1);
    if(len < dcode->buf_alloc + BUFFER_INCR) {
  403454:	3310      	adds	r3, #16
  403456:	429d      	cmp	r5, r3
  403458:	d205      	bcs.n	403466 <_zbar_decode_code128+0x4fa>
  40345a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
  40345e:	bf28      	it	cs
  403460:	f44f 7380 	movcs.w	r3, #256	; 0x100
  403464:	461d      	mov	r5, r3
        len = dcode->buf_alloc + BUFFER_INCR;
        if(len > BUFFER_MAX)
            len = BUFFER_MAX;
    }
    buf = realloc(dcode->buf, len);
  403466:	6de0      	ldr	r0, [r4, #92]	; 0x5c
  403468:	4629      	mov	r1, r5
  40346a:	4b3a      	ldr	r3, [pc, #232]	; (403554 <_zbar_decode_code128+0x5e8>)
  40346c:	4798      	blx	r3
    if(!buf)
  40346e:	b118      	cbz	r0, 403478 <_zbar_decode_code128+0x50c>
        return(1);
    dcode->buf = buf;
  403470:	65e0      	str	r0, [r4, #92]	; 0x5c
    dcode->buf_alloc = len;
  403472:	6565      	str	r5, [r4, #84]	; 0x54
  403474:	f000 bd75 	b.w	403f62 <_zbar_decode_code128+0xff6>
        dbprintf(1, (c < 0) ? " [aborted]\n" : " [overflow]\n");
        if(dcode128->character > 1)
  403478:	f8b4 3104 	ldrh.w	r3, [r4, #260]	; 0x104
  40347c:	f343 130b 	sbfx	r3, r3, #4, #12
  403480:	2b01      	cmp	r3, #1
  403482:	dd17      	ble.n	4034b4 <_zbar_decode_code128+0x548>

/* check and release shared state lock */
static inline char release_lock (zbar_decoder_t *dcode,
                                 zbar_symbol_type_t req)
{
    zassert(dcode->lock == req, 1, "lock=%d req=%d\n",
  403484:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
  403488:	2b80      	cmp	r3, #128	; 0x80
  40348a:	d010      	beq.n	4034ae <_zbar_decode_code128+0x542>
  40348c:	4a28      	ldr	r2, [pc, #160]	; (403530 <_zbar_decode_code128+0x5c4>)
  40348e:	6812      	ldr	r2, [r2, #0]
  403490:	68d0      	ldr	r0, [r2, #12]
  403492:	4a31      	ldr	r2, [pc, #196]	; (403558 <_zbar_decode_code128+0x5ec>)
  403494:	9200      	str	r2, [sp, #0]
  403496:	4a31      	ldr	r2, [pc, #196]	; (40355c <_zbar_decode_code128+0x5f0>)
  403498:	9201      	str	r2, [sp, #4]
  40349a:	9302      	str	r3, [sp, #8]
  40349c:	2380      	movs	r3, #128	; 0x80
  40349e:	9303      	str	r3, [sp, #12]
  4034a0:	492f      	ldr	r1, [pc, #188]	; (403560 <_zbar_decode_code128+0x5f4>)
  4034a2:	4a30      	ldr	r2, [pc, #192]	; (403564 <_zbar_decode_code128+0x5f8>)
  4034a4:	f240 1307 	movw	r3, #263	; 0x107
  4034a8:	4d26      	ldr	r5, [pc, #152]	; (403544 <_zbar_decode_code128+0x5d8>)
  4034aa:	47a8      	blx	r5
  4034ac:	e002      	b.n	4034b4 <_zbar_decode_code128+0x548>
            dcode->lock, req);
    dcode->lock = 0;
  4034ae:	2300      	movs	r3, #0
  4034b0:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
            release_lock(dcode, ZBAR_CODE128);
        dcode128->character = -1;
  4034b4:	f8b4 3104 	ldrh.w	r3, [r4, #260]	; 0x104
  4034b8:	f04f 32ff 	mov.w	r2, #4294967295
  4034bc:	f362 130f 	bfi	r3, r2, #4, #12
  4034c0:	f8a4 3104 	strh.w	r3, [r4, #260]	; 0x104
        return(0);
  4034c4:	2000      	movs	r0, #0
  4034c6:	f000 bda6 	b.w	404016 <_zbar_decode_code128+0x10aa>
    }
    else {
        unsigned dw;
        if(dcode128->width > dcode128->s6)
            dw = dcode128->width - dcode128->s6;
  4034ca:	1a99      	subs	r1, r3, r2
  4034cc:	e000      	b.n	4034d0 <_zbar_decode_code128+0x564>
        else
            dw = dcode128->s6 - dcode128->width;
  4034ce:	1ad1      	subs	r1, r2, r3
        dw *= 4;
        if(dw > dcode128->width) {
  4034d0:	ebb3 0f81 	cmp.w	r3, r1, lsl #2
  4034d4:	d248      	bcs.n	403568 <_zbar_decode_code128+0x5fc>
            dbprintf(1, " [width var]\n");
            if(dcode128->character > 1)
  4034d6:	f8b4 3104 	ldrh.w	r3, [r4, #260]	; 0x104
  4034da:	f343 130b 	sbfx	r3, r3, #4, #12
  4034de:	2b01      	cmp	r3, #1
  4034e0:	dd17      	ble.n	403512 <_zbar_decode_code128+0x5a6>

/* check and release shared state lock */
static inline char release_lock (zbar_decoder_t *dcode,
                                 zbar_symbol_type_t req)
{
    zassert(dcode->lock == req, 1, "lock=%d req=%d\n",
  4034e2:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
  4034e6:	2b80      	cmp	r3, #128	; 0x80
  4034e8:	d010      	beq.n	40350c <_zbar_decode_code128+0x5a0>
  4034ea:	4a11      	ldr	r2, [pc, #68]	; (403530 <_zbar_decode_code128+0x5c4>)
  4034ec:	6812      	ldr	r2, [r2, #0]
  4034ee:	68d0      	ldr	r0, [r2, #12]
  4034f0:	4a19      	ldr	r2, [pc, #100]	; (403558 <_zbar_decode_code128+0x5ec>)
  4034f2:	9200      	str	r2, [sp, #0]
  4034f4:	4a19      	ldr	r2, [pc, #100]	; (40355c <_zbar_decode_code128+0x5f0>)
  4034f6:	9201      	str	r2, [sp, #4]
  4034f8:	9302      	str	r3, [sp, #8]
  4034fa:	2380      	movs	r3, #128	; 0x80
  4034fc:	9303      	str	r3, [sp, #12]
  4034fe:	4918      	ldr	r1, [pc, #96]	; (403560 <_zbar_decode_code128+0x5f4>)
  403500:	4a18      	ldr	r2, [pc, #96]	; (403564 <_zbar_decode_code128+0x5f8>)
  403502:	f240 1307 	movw	r3, #263	; 0x107
  403506:	4d0f      	ldr	r5, [pc, #60]	; (403544 <_zbar_decode_code128+0x5d8>)
  403508:	47a8      	blx	r5
  40350a:	e002      	b.n	403512 <_zbar_decode_code128+0x5a6>
            dcode->lock, req);
    dcode->lock = 0;
  40350c:	2300      	movs	r3, #0
  40350e:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
                release_lock(dcode, ZBAR_CODE128);
            dcode128->character = -1;
  403512:	f8b4 3104 	ldrh.w	r3, [r4, #260]	; 0x104
  403516:	f04f 32ff 	mov.w	r2, #4294967295
  40351a:	f362 130f 	bfi	r3, r2, #4, #12
  40351e:	f8a4 3104 	strh.w	r3, [r4, #260]	; 0x104
            return(0);
  403522:	2000      	movs	r0, #0
  403524:	f000 bd77 	b.w	404016 <_zbar_decode_code128+0x10aa>
  403528:	00410ef0 	.word	0x00410ef0
  40352c:	004109c0 	.word	0x004109c0
  403530:	20000440 	.word	0x20000440
  403534:	00410f5c 	.word	0x00410f5c
  403538:	00410ad4 	.word	0x00410ad4
  40353c:	00410a5c 	.word	0x00410a5c
  403540:	00410aac 	.word	0x00410aac
  403544:	004083a9 	.word	0x004083a9
  403548:	00410ee8 	.word	0x00410ee8
  40354c:	00410b30 	.word	0x00410b30
  403550:	00410ae0 	.word	0x00410ae0
  403554:	004093c5 	.word	0x004093c5
  403558:	00410a40 	.word	0x00410a40
  40355c:	00410ba8 	.word	0x00410ba8
  403560:	00410b3c 	.word	0x00410b3c
  403564:	00410b78 	.word	0x00410b78
        }
    }
    dcode128->width = dcode128->s6;
  403568:	f8c4 210c 	str.w	r2, [r4, #268]	; 0x10c

    zassert(dcode->buf_alloc > dcode128->character, 0,
  40356c:	6d67      	ldr	r7, [r4, #84]	; 0x54
  40356e:	f8b4 5104 	ldrh.w	r5, [r4, #260]	; 0x104
  403572:	f345 150b 	sbfx	r5, r5, #4, #12
  403576:	b22b      	sxth	r3, r5
  403578:	429f      	cmp	r7, r3
  40357a:	d81b      	bhi.n	4035b4 <_zbar_decode_code128+0x648>
  40357c:	4bac      	ldr	r3, [pc, #688]	; (403830 <_zbar_decode_code128+0x8c4>)
  40357e:	681b      	ldr	r3, [r3, #0]
  403580:	f8d3 800c 	ldr.w	r8, [r3, #12]
  403584:	6de0      	ldr	r0, [r4, #92]	; 0x5c
  403586:	4639      	mov	r1, r7
  403588:	4baa      	ldr	r3, [pc, #680]	; (403834 <_zbar_decode_code128+0x8c8>)
  40358a:	4798      	blx	r3
  40358c:	4baa      	ldr	r3, [pc, #680]	; (403838 <_zbar_decode_code128+0x8cc>)
  40358e:	9300      	str	r3, [sp, #0]
  403590:	4baa      	ldr	r3, [pc, #680]	; (40383c <_zbar_decode_code128+0x8d0>)
  403592:	9301      	str	r3, [sp, #4]
  403594:	9702      	str	r7, [sp, #8]
  403596:	b22d      	sxth	r5, r5
  403598:	9503      	str	r5, [sp, #12]
  40359a:	b271      	sxtb	r1, r6
  40359c:	9104      	str	r1, [sp, #16]
  40359e:	9005      	str	r0, [sp, #20]
  4035a0:	4640      	mov	r0, r8
  4035a2:	49a7      	ldr	r1, [pc, #668]	; (403840 <_zbar_decode_code128+0x8d4>)
  4035a4:	4aa7      	ldr	r2, [pc, #668]	; (403844 <_zbar_decode_code128+0x8d8>)
  4035a6:	f44f 7304 	mov.w	r3, #528	; 0x210
  4035aa:	4ca7      	ldr	r4, [pc, #668]	; (403848 <_zbar_decode_code128+0x8dc>)
  4035ac:	47a0      	blx	r4
  4035ae:	2000      	movs	r0, #0
  4035b0:	f000 bd31 	b.w	404016 <_zbar_decode_code128+0x10aa>
            "alloc=%x idx=%x c=%02x %s\n",
            dcode->buf_alloc, dcode128->character, c,
            _zbar_decoder_buf_dump(dcode->buf, dcode->buf_alloc));

    if(dcode128->character == 1) {
  4035b4:	f8b4 3104 	ldrh.w	r3, [r4, #260]	; 0x104
  4035b8:	f023 030f 	bic.w	r3, r3, #15
  4035bc:	b29b      	uxth	r3, r3
  4035be:	2b10      	cmp	r3, #16
  4035c0:	d10b      	bne.n	4035da <_zbar_decode_code128+0x66e>

/* acquire shared state lock */
static inline char acquire_lock (zbar_decoder_t *dcode,
                                 zbar_symbol_type_t req)
{
    if(dcode->lock) {
  4035c2:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
  4035c6:	2b00      	cmp	r3, #0
  4035c8:	f040 84d4 	bne.w	403f74 <_zbar_decode_code128+0x1008>
        dbprintf(2, " [locked %d]\n", dcode->lock);
        return(1);
    }
    dcode->lock = req;
  4035cc:	2380      	movs	r3, #128	; 0x80
  4035ce:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
        /* lock shared resources */
        if(acquire_lock(dcode, ZBAR_CODE128)) {
            dcode128->character = -1;
            return(0);
        }
        dcode->buf[0] = dcode128->start;
  4035d2:	6de3      	ldr	r3, [r4, #92]	; 0x5c
  4035d4:	f894 2106 	ldrb.w	r2, [r4, #262]	; 0x106
  4035d8:	701a      	strb	r2, [r3, #0]
    }

    dcode->buf[dcode128->character++] = c;
  4035da:	6de0      	ldr	r0, [r4, #92]	; 0x5c
  4035dc:	f8b4 3104 	ldrh.w	r3, [r4, #260]	; 0x104
  4035e0:	f343 120b 	sbfx	r2, r3, #4, #12
  4035e4:	f3c2 010b 	ubfx	r1, r2, #0, #12
  4035e8:	3101      	adds	r1, #1
  4035ea:	f361 130f 	bfi	r3, r1, #4, #12
  4035ee:	f8a4 3104 	strh.w	r3, [r4, #260]	; 0x104
  4035f2:	b2f3      	uxtb	r3, r6
  4035f4:	b212      	sxth	r2, r2
  4035f6:	5483      	strb	r3, [r0, r2]

    if(dcode128->character > 2 &&
  4035f8:	f8b4 1104 	ldrh.w	r1, [r4, #260]	; 0x104
  4035fc:	f341 110b 	sbfx	r1, r1, #4, #12
  403600:	b20a      	sxth	r2, r1
  403602:	2a02      	cmp	r2, #2
  403604:	f340 8432 	ble.w	403e6c <_zbar_decode_code128+0xf00>
       ((dcode128->direction)
        ? c >= START_A && c <= START_C
  403608:	f894 2104 	ldrb.w	r2, [r4, #260]	; 0x104
        dcode->buf[0] = dcode128->start;
    }

    dcode->buf[dcode128->character++] = c;

    if(dcode128->character > 2 &&
  40360c:	f012 0201 	ands.w	r2, r2, #1
  403610:	d006      	beq.n	403620 <_zbar_decode_code128+0x6b4>
       ((dcode128->direction)
        ? c >= START_A && c <= START_C
  403612:	3b67      	subs	r3, #103	; 0x67
        dcode->buf[0] = dcode128->start;
    }

    dcode->buf[dcode128->character++] = c;

    if(dcode128->character > 2 &&
  403614:	b2db      	uxtb	r3, r3
  403616:	2b02      	cmp	r3, #2
  403618:	d908      	bls.n	40362c <_zbar_decode_code128+0x6c0>
            release_lock(dcode, ZBAR_CODE128);
        return(sym);
    }

    dbprintf(2, "\n");
    return(0);
  40361a:	2000      	movs	r0, #0
  40361c:	f000 bcfb 	b.w	404016 <_zbar_decode_code128+0x10aa>
        dcode->buf[0] = dcode128->start;
    }

    dcode->buf[dcode128->character++] = c;

    if(dcode128->character > 2 &&
  403620:	b276      	sxtb	r6, r6
  403622:	2e6a      	cmp	r6, #106	; 0x6a
  403624:	d005      	beq.n	403632 <_zbar_decode_code128+0x6c6>
            release_lock(dcode, ZBAR_CODE128);
        return(sym);
    }

    dbprintf(2, "\n");
    return(0);
  403626:	2000      	movs	r0, #0
  403628:	f000 bcf5 	b.w	404016 <_zbar_decode_code128+0x10aa>
    code128_decoder_t *dcode128 = &dcode->code128;
    if(dcode128->character < 3)
        return(1);

    /* add in irregularly weighted start character */
    idx = (dcode128->direction) ? dcode128->character - 1 : 0;
  40362c:	b20b      	sxth	r3, r1
  40362e:	3b01      	subs	r3, #1
  403630:	e000      	b.n	403634 <_zbar_decode_code128+0x6c8>
  403632:	2300      	movs	r3, #0
    sum = dcode->buf[idx];
  403634:	6de0      	ldr	r0, [r4, #92]	; 0x5c
  403636:	5cc6      	ldrb	r6, [r0, r3]
    if(sum >= 103)
  403638:	2e66      	cmp	r6, #102	; 0x66
  40363a:	f240 84a5 	bls.w	403f88 <_zbar_decode_code128+0x101c>
        sum -= 103;
  40363e:	3e67      	subs	r6, #103	; 0x67

    /* calculate sum in reverse to avoid multiply operations */
    for(i = dcode128->character - 3; i; i--) {
  403640:	fa0f fc81 	sxth.w	ip, r1
  403644:	f1bc 0703 	subs.w	r7, ip, #3
  403648:	d05c      	beq.n	403704 <_zbar_decode_code128+0x798>
        zassert(sum < 103, -1, "dir=%x i=%x sum=%x acc=%x %s\n",
  40364a:	2e66      	cmp	r6, #102	; 0x66
  40364c:	d920      	bls.n	403690 <_zbar_decode_code128+0x724>
  40364e:	e002      	b.n	403656 <_zbar_decode_code128+0x6ea>
  403650:	2e66      	cmp	r6, #102	; 0x66
  403652:	d923      	bls.n	40369c <_zbar_decode_code128+0x730>
  403654:	e000      	b.n	403658 <_zbar_decode_code128+0x6ec>
    return(c & 0x7f);
}

static inline unsigned char validate_checksum (zbar_decoder_t *dcode)
{
    unsigned idx, sum, i, acc = 0;
  403656:	2500      	movs	r5, #0
    if(sum >= 103)
        sum -= 103;

    /* calculate sum in reverse to avoid multiply operations */
    for(i = dcode128->character - 3; i; i--) {
        zassert(sum < 103, -1, "dir=%x i=%x sum=%x acc=%x %s\n",
  403658:	4b75      	ldr	r3, [pc, #468]	; (403830 <_zbar_decode_code128+0x8c4>)
  40365a:	681b      	ldr	r3, [r3, #0]
  40365c:	f8d3 900c 	ldr.w	r9, [r3, #12]
  403660:	f894 8104 	ldrb.w	r8, [r4, #260]	; 0x104
  403664:	f008 0801 	and.w	r8, r8, #1
  403668:	b209      	sxth	r1, r1
  40366a:	4b72      	ldr	r3, [pc, #456]	; (403834 <_zbar_decode_code128+0x8c8>)
  40366c:	4798      	blx	r3
  40366e:	4b77      	ldr	r3, [pc, #476]	; (40384c <_zbar_decode_code128+0x8e0>)
  403670:	9300      	str	r3, [sp, #0]
  403672:	4b77      	ldr	r3, [pc, #476]	; (403850 <_zbar_decode_code128+0x8e4>)
  403674:	9301      	str	r3, [sp, #4]
  403676:	f8cd 8008 	str.w	r8, [sp, #8]
  40367a:	9703      	str	r7, [sp, #12]
  40367c:	9604      	str	r6, [sp, #16]
  40367e:	9505      	str	r5, [sp, #20]
  403680:	9006      	str	r0, [sp, #24]
  403682:	4648      	mov	r0, r9
  403684:	4973      	ldr	r1, [pc, #460]	; (403854 <_zbar_decode_code128+0x8e8>)
  403686:	4a6f      	ldr	r2, [pc, #444]	; (403844 <_zbar_decode_code128+0x8d8>)
  403688:	23ff      	movs	r3, #255	; 0xff
  40368a:	4d6f      	ldr	r5, [pc, #444]	; (403848 <_zbar_decode_code128+0x8dc>)
  40368c:	47a8      	blx	r5
  40368e:	e39b      	b.n	403dc8 <_zbar_decode_code128+0xe5c>
  403690:	b20b      	sxth	r3, r1
  403692:	3b01      	subs	r3, #1
  403694:	1bdb      	subs	r3, r3, r7
    return(c & 0x7f);
}

static inline unsigned char validate_checksum (zbar_decoder_t *dcode)
{
    unsigned idx, sum, i, acc = 0;
  403696:	3f01      	subs	r7, #1
  403698:	2500      	movs	r5, #0
  40369a:	e001      	b.n	4036a0 <_zbar_decode_code128+0x734>
  40369c:	3f01      	subs	r7, #1
  40369e:	3301      	adds	r3, #1
  4036a0:	f107 0801 	add.w	r8, r7, #1
    /* calculate sum in reverse to avoid multiply operations */
    for(i = dcode128->character - 3; i; i--) {
        zassert(sum < 103, -1, "dir=%x i=%x sum=%x acc=%x %s\n",
                dcode128->direction, i, sum, acc,
                _zbar_decoder_buf_dump(dcode->buf, dcode128->character));
        idx = (dcode128->direction) ? dcode128->character - 1 - i : i;
  4036a4:	2a00      	cmp	r2, #0
  4036a6:	bf14      	ite	ne
  4036a8:	469e      	movne	lr, r3
  4036aa:	46c6      	moveq	lr, r8
        acc += dcode->buf[idx];
  4036ac:	f810 e00e 	ldrb.w	lr, [r0, lr]
  4036b0:	4475      	add	r5, lr
        if(acc >= 103)
  4036b2:	2d66      	cmp	r5, #102	; 0x66
  4036b4:	d91f      	bls.n	4036f6 <_zbar_decode_code128+0x78a>
            acc -= 103;
  4036b6:	3d67      	subs	r5, #103	; 0x67
        zassert(acc < 103, -1, "dir=%x i=%x sum=%x acc=%x %s\n",
  4036b8:	2d66      	cmp	r5, #102	; 0x66
  4036ba:	d91c      	bls.n	4036f6 <_zbar_decode_code128+0x78a>
  4036bc:	4b5c      	ldr	r3, [pc, #368]	; (403830 <_zbar_decode_code128+0x8c4>)
  4036be:	681b      	ldr	r3, [r3, #0]
  4036c0:	f8d3 900c 	ldr.w	r9, [r3, #12]
  4036c4:	f894 7104 	ldrb.w	r7, [r4, #260]	; 0x104
  4036c8:	f007 0701 	and.w	r7, r7, #1
  4036cc:	b209      	sxth	r1, r1
  4036ce:	4b59      	ldr	r3, [pc, #356]	; (403834 <_zbar_decode_code128+0x8c8>)
  4036d0:	4798      	blx	r3
  4036d2:	4b5e      	ldr	r3, [pc, #376]	; (40384c <_zbar_decode_code128+0x8e0>)
  4036d4:	9300      	str	r3, [sp, #0]
  4036d6:	4b60      	ldr	r3, [pc, #384]	; (403858 <_zbar_decode_code128+0x8ec>)
  4036d8:	9301      	str	r3, [sp, #4]
  4036da:	9702      	str	r7, [sp, #8]
  4036dc:	f8cd 800c 	str.w	r8, [sp, #12]
  4036e0:	9604      	str	r6, [sp, #16]
  4036e2:	9505      	str	r5, [sp, #20]
  4036e4:	9006      	str	r0, [sp, #24]
  4036e6:	4648      	mov	r0, r9
  4036e8:	495a      	ldr	r1, [pc, #360]	; (403854 <_zbar_decode_code128+0x8e8>)
  4036ea:	4a56      	ldr	r2, [pc, #344]	; (403844 <_zbar_decode_code128+0x8d8>)
  4036ec:	f44f 7383 	mov.w	r3, #262	; 0x106
  4036f0:	4d55      	ldr	r5, [pc, #340]	; (403848 <_zbar_decode_code128+0x8dc>)
  4036f2:	47a8      	blx	r5
  4036f4:	e368      	b.n	403dc8 <_zbar_decode_code128+0xe5c>
                dcode128->direction, i, sum, acc,
                _zbar_decoder_buf_dump(dcode->buf, dcode128->character));
        sum += acc;
  4036f6:	442e      	add	r6, r5
        if(sum >= 103)
  4036f8:	2e66      	cmp	r6, #102	; 0x66
  4036fa:	f240 844d 	bls.w	403f98 <_zbar_decode_code128+0x102c>
            sum -= 103;
  4036fe:	3e67      	subs	r6, #103	; 0x67
    sum = dcode->buf[idx];
    if(sum >= 103)
        sum -= 103;

    /* calculate sum in reverse to avoid multiply operations */
    for(i = dcode128->character - 3; i; i--) {
  403700:	2f00      	cmp	r7, #0
  403702:	d1a5      	bne.n	403650 <_zbar_decode_code128+0x6e4>
        if(sum >= 103)
            sum -= 103;
    }

    /* and compare to check character */
    idx = (dcode128->direction) ? 1 : dcode128->character - 2;
  403704:	b912      	cbnz	r2, 40370c <_zbar_decode_code128+0x7a0>
  403706:	f1ac 0c02 	sub.w	ip, ip, #2
  40370a:	e001      	b.n	403710 <_zbar_decode_code128+0x7a4>
  40370c:	f04f 0c01 	mov.w	ip, #1
    check = dcode->buf[idx];
    dbprintf(2, " chk=%02x(%02x)", sum, check);
    err = (sum != check);
  403710:	f810 300c 	ldrb.w	r3, [r0, ip]
       ((dcode128->direction)
        ? c >= START_A && c <= START_C
        : c == STOP_FWD)) {
        /* FIXME STOP_FWD should check extra bar (and QZ!) */
        zbar_symbol_type_t sym = ZBAR_CODE128;
        if(validate_checksum(dcode) || postprocess(dcode))
  403714:	42b3      	cmp	r3, r6
  403716:	f040 846c 	bne.w	403ff2 <_zbar_decode_code128+0x1086>
{
    unsigned i, j, cexp;
    unsigned char code = 0, charset;
    code128_decoder_t *dcode128 = &dcode->code128;
    dbprintf(2, "\n    postproc len=%d", dcode128->character);
    dcode->modifiers = 0;
  40371a:	2300      	movs	r3, #0
  40371c:	64a3      	str	r3, [r4, #72]	; 0x48
    dcode->direction = 1 - 2 * dcode128->direction;
  40371e:	f894 2104 	ldrb.w	r2, [r4, #260]	; 0x104
  403722:	f002 0501 	and.w	r5, r2, #1
  403726:	006b      	lsls	r3, r5, #1
  403728:	f1c3 0301 	rsb	r3, r3, #1
  40372c:	64e3      	str	r3, [r4, #76]	; 0x4c
    if(dcode128->direction) {
  40372e:	f012 0f01 	tst.w	r2, #1
  403732:	d03e      	beq.n	4037b2 <_zbar_decode_code128+0x846>
        /* reverse buffer */
        dbprintf(2, " (rev)");
        for(i = 0; i < dcode128->character / 2; i++) {
  403734:	f8b4 3104 	ldrh.w	r3, [r4, #260]	; 0x104
  403738:	f343 130b 	sbfx	r3, r3, #4, #12
  40373c:	b299      	uxth	r1, r3
  40373e:	b21b      	sxth	r3, r3
  403740:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
  403744:	085b      	lsrs	r3, r3, #1
  403746:	d015      	beq.n	403774 <_zbar_decode_code128+0x808>
  403748:	2200      	movs	r2, #0
            unsigned j = dcode128->character - 1 - i;
  40374a:	b20b      	sxth	r3, r1
  40374c:	3b01      	subs	r3, #1
  40374e:	1a9b      	subs	r3, r3, r2
            code = dcode->buf[i];
  403750:	6de1      	ldr	r1, [r4, #92]	; 0x5c
  403752:	5c88      	ldrb	r0, [r1, r2]
            dcode->buf[i] = dcode->buf[j];
  403754:	5ccd      	ldrb	r5, [r1, r3]
  403756:	548d      	strb	r5, [r1, r2]
            dcode->buf[j] = code;
  403758:	6de1      	ldr	r1, [r4, #92]	; 0x5c
  40375a:	54c8      	strb	r0, [r1, r3]
    dcode->modifiers = 0;
    dcode->direction = 1 - 2 * dcode128->direction;
    if(dcode128->direction) {
        /* reverse buffer */
        dbprintf(2, " (rev)");
        for(i = 0; i < dcode128->character / 2; i++) {
  40375c:	3201      	adds	r2, #1
  40375e:	f8b4 3104 	ldrh.w	r3, [r4, #260]	; 0x104
  403762:	f343 130b 	sbfx	r3, r3, #4, #12
  403766:	b299      	uxth	r1, r3
  403768:	b21b      	sxth	r3, r3
  40376a:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
  40376e:	ebb2 0f63 	cmp.w	r2, r3, asr #1
  403772:	d3ea      	bcc.n	40374a <_zbar_decode_code128+0x7de>
            unsigned j = dcode128->character - 1 - i;
            code = dcode->buf[i];
            dcode->buf[i] = dcode->buf[j];
            dcode->buf[j] = code;
        }
        zassert(dcode->buf[dcode128->character - 1] == STOP_REV, 1,
  403774:	6de0      	ldr	r0, [r4, #92]	; 0x5c
  403776:	fa00 f381 	sxtah	r3, r0, r1
  40377a:	f813 3c01 	ldrb.w	r3, [r3, #-1]
  40377e:	2b6b      	cmp	r3, #107	; 0x6b
  403780:	d036      	beq.n	4037f0 <_zbar_decode_code128+0x884>
  403782:	4b2b      	ldr	r3, [pc, #172]	; (403830 <_zbar_decode_code128+0x8c4>)
  403784:	681b      	ldr	r3, [r3, #0]
  403786:	68de      	ldr	r6, [r3, #12]
  403788:	f894 5104 	ldrb.w	r5, [r4, #260]	; 0x104
  40378c:	f005 0501 	and.w	r5, r5, #1
  403790:	b209      	sxth	r1, r1
  403792:	4b28      	ldr	r3, [pc, #160]	; (403834 <_zbar_decode_code128+0x8c8>)
  403794:	4798      	blx	r3
  403796:	4b31      	ldr	r3, [pc, #196]	; (40385c <_zbar_decode_code128+0x8f0>)
  403798:	9300      	str	r3, [sp, #0]
  40379a:	4b31      	ldr	r3, [pc, #196]	; (403860 <_zbar_decode_code128+0x8f4>)
  40379c:	9301      	str	r3, [sp, #4]
  40379e:	9502      	str	r5, [sp, #8]
  4037a0:	9003      	str	r0, [sp, #12]
  4037a2:	4630      	mov	r0, r6
  4037a4:	492f      	ldr	r1, [pc, #188]	; (403864 <_zbar_decode_code128+0x8f8>)
  4037a6:	4a27      	ldr	r2, [pc, #156]	; (403844 <_zbar_decode_code128+0x8d8>)
  4037a8:	f240 135b 	movw	r3, #347	; 0x15b
  4037ac:	4d26      	ldr	r5, [pc, #152]	; (403848 <_zbar_decode_code128+0x8dc>)
  4037ae:	47a8      	blx	r5
  4037b0:	e30a      	b.n	403dc8 <_zbar_decode_code128+0xe5c>
                "dir=%x %s\n", dcode128->direction,
                _zbar_decoder_buf_dump(dcode->buf, dcode->code128.character));
    }
    else
        zassert(dcode->buf[dcode128->character - 1] == STOP_FWD, 1,
  4037b2:	6de0      	ldr	r0, [r4, #92]	; 0x5c
  4037b4:	f8b4 1104 	ldrh.w	r1, [r4, #260]	; 0x104
  4037b8:	f341 110b 	sbfx	r1, r1, #4, #12
  4037bc:	fa00 f381 	sxtah	r3, r0, r1
  4037c0:	f813 3c01 	ldrb.w	r3, [r3, #-1]
  4037c4:	2b6a      	cmp	r3, #106	; 0x6a
  4037c6:	d013      	beq.n	4037f0 <_zbar_decode_code128+0x884>
  4037c8:	4b19      	ldr	r3, [pc, #100]	; (403830 <_zbar_decode_code128+0x8c4>)
  4037ca:	681b      	ldr	r3, [r3, #0]
  4037cc:	68de      	ldr	r6, [r3, #12]
  4037ce:	b209      	sxth	r1, r1
  4037d0:	4b18      	ldr	r3, [pc, #96]	; (403834 <_zbar_decode_code128+0x8c8>)
  4037d2:	4798      	blx	r3
  4037d4:	4b21      	ldr	r3, [pc, #132]	; (40385c <_zbar_decode_code128+0x8f0>)
  4037d6:	9300      	str	r3, [sp, #0]
  4037d8:	4b23      	ldr	r3, [pc, #140]	; (403868 <_zbar_decode_code128+0x8fc>)
  4037da:	9301      	str	r3, [sp, #4]
  4037dc:	9502      	str	r5, [sp, #8]
  4037de:	9003      	str	r0, [sp, #12]
  4037e0:	4630      	mov	r0, r6
  4037e2:	4920      	ldr	r1, [pc, #128]	; (403864 <_zbar_decode_code128+0x8f8>)
  4037e4:	4a17      	ldr	r2, [pc, #92]	; (403844 <_zbar_decode_code128+0x8d8>)
  4037e6:	f44f 73b0 	mov.w	r3, #352	; 0x160
  4037ea:	4d17      	ldr	r5, [pc, #92]	; (403848 <_zbar_decode_code128+0x8dc>)
  4037ec:	47a8      	blx	r5
  4037ee:	e2eb      	b.n	403dc8 <_zbar_decode_code128+0xe5c>
                "dir=%x %s\n", dcode128->direction,
                _zbar_decoder_buf_dump(dcode->buf, dcode->code128.character));

    code = dcode->buf[0];
  4037f0:	6de0      	ldr	r0, [r4, #92]	; 0x5c
  4037f2:	7803      	ldrb	r3, [r0, #0]
  4037f4:	930a      	str	r3, [sp, #40]	; 0x28
    zassert(code >= START_A && code <= START_C, 1, "%s\n",
  4037f6:	f1a3 0967 	sub.w	r9, r3, #103	; 0x67
  4037fa:	fa5f f989 	uxtb.w	r9, r9
  4037fe:	f1b9 0f02 	cmp.w	r9, #2
  403802:	d937      	bls.n	403874 <_zbar_decode_code128+0x908>
  403804:	4b0a      	ldr	r3, [pc, #40]	; (403830 <_zbar_decode_code128+0x8c4>)
  403806:	681b      	ldr	r3, [r3, #0]
  403808:	68dd      	ldr	r5, [r3, #12]
  40380a:	f8b4 1104 	ldrh.w	r1, [r4, #260]	; 0x104
  40380e:	f341 110b 	sbfx	r1, r1, #4, #12
  403812:	4b08      	ldr	r3, [pc, #32]	; (403834 <_zbar_decode_code128+0x8c8>)
  403814:	4798      	blx	r3
  403816:	4b11      	ldr	r3, [pc, #68]	; (40385c <_zbar_decode_code128+0x8f0>)
  403818:	9300      	str	r3, [sp, #0]
  40381a:	4b14      	ldr	r3, [pc, #80]	; (40386c <_zbar_decode_code128+0x900>)
  40381c:	9301      	str	r3, [sp, #4]
  40381e:	9002      	str	r0, [sp, #8]
  403820:	4628      	mov	r0, r5
  403822:	4913      	ldr	r1, [pc, #76]	; (403870 <_zbar_decode_code128+0x904>)
  403824:	4a07      	ldr	r2, [pc, #28]	; (403844 <_zbar_decode_code128+0x8d8>)
  403826:	f44f 73b2 	mov.w	r3, #356	; 0x164
  40382a:	4d07      	ldr	r5, [pc, #28]	; (403848 <_zbar_decode_code128+0x8dc>)
  40382c:	47a8      	blx	r5
  40382e:	e2cb      	b.n	403dc8 <_zbar_decode_code128+0xe5c>
  403830:	20000440 	.word	0x20000440
  403834:	00404c05 	.word	0x00404c05
  403838:	00410ed0 	.word	0x00410ed0
  40383c:	00410c04 	.word	0x00410c04
  403840:	00410bbc 	.word	0x00410bbc
  403844:	00410aac 	.word	0x00410aac
  403848:	004083a9 	.word	0x004083a9
  40384c:	0041099c 	.word	0x0041099c
  403850:	00410c78 	.word	0x00410c78
  403854:	00410c2c 	.word	0x00410c2c
  403858:	00410c84 	.word	0x00410c84
  40385c:	00410a50 	.word	0x00410a50
  403860:	00410cc8 	.word	0x00410cc8
  403864:	00410c90 	.word	0x00410c90
  403868:	00410cf8 	.word	0x00410cf8
  40386c:	00410d58 	.word	0x00410d58
  403870:	00410d28 	.word	0x00410d28
            _zbar_decoder_buf_dump(dcode->buf, dcode->code128.character));

    charset = code - START_A;
    cexp = (code == START_C) ? 1 : 0;
  403874:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  403876:	2b69      	cmp	r3, #105	; 0x69
  403878:	bf14      	ite	ne
  40387a:	2300      	movne	r3, #0
  40387c:	2301      	moveq	r3, #1
  40387e:	9309      	str	r3, [sp, #36]	; 0x24
    dbprintf(2, " start=%c", 'A' + charset);

    for(i = 1, j = 0; i < dcode128->character - 2; i++) {
  403880:	f8b4 3104 	ldrh.w	r3, [r4, #260]	; 0x104
  403884:	f343 130b 	sbfx	r3, r3, #4, #12
  403888:	b299      	uxth	r1, r3
  40388a:	b21b      	sxth	r3, r3
  40388c:	3b02      	subs	r3, #2
  40388e:	2b01      	cmp	r3, #1
  403890:	f240 8196 	bls.w	403bc0 <_zbar_decode_code128+0xc54>
        unsigned char code = dcode->buf[i];
  403894:	f890 8001 	ldrb.w	r8, [r0, #1]
        zassert(!(code & 0x80), 1,
  403898:	f018 0f80 	tst.w	r8, #128	; 0x80
  40389c:	d10a      	bne.n	4038b4 <_zbar_decode_code128+0x948>
  40389e:	f04f 0b00 	mov.w	fp, #0
  4038a2:	2701      	movs	r7, #1
  4038a4:	e025      	b.n	4038f2 <_zbar_decode_code128+0x986>
    charset = code - START_A;
    cexp = (code == START_C) ? 1 : 0;
    dbprintf(2, " start=%c", 'A' + charset);

    for(i = 1, j = 0; i < dcode128->character - 2; i++) {
        unsigned char code = dcode->buf[i];
  4038a6:	6de0      	ldr	r0, [r4, #92]	; 0x5c
  4038a8:	f810 8007 	ldrb.w	r8, [r0, r7]
        zassert(!(code & 0x80), 1,
  4038ac:	f018 0f80 	tst.w	r8, #128	; 0x80
  4038b0:	d01f      	beq.n	4038f2 <_zbar_decode_code128+0x986>
  4038b2:	e002      	b.n	4038ba <_zbar_decode_code128+0x94e>

    charset = code - START_A;
    cexp = (code == START_C) ? 1 : 0;
    dbprintf(2, " start=%c", 'A' + charset);

    for(i = 1, j = 0; i < dcode128->character - 2; i++) {
  4038b4:	f04f 0b00 	mov.w	fp, #0
  4038b8:	2701      	movs	r7, #1
        unsigned char code = dcode->buf[i];
        zassert(!(code & 0x80), 1,
  4038ba:	4b93      	ldr	r3, [pc, #588]	; (403b08 <_zbar_decode_code128+0xb9c>)
  4038bc:	681b      	ldr	r3, [r3, #0]
  4038be:	68de      	ldr	r6, [r3, #12]
  4038c0:	b209      	sxth	r1, r1
  4038c2:	4b92      	ldr	r3, [pc, #584]	; (403b0c <_zbar_decode_code128+0xba0>)
  4038c4:	4798      	blx	r3
  4038c6:	4b92      	ldr	r3, [pc, #584]	; (403b10 <_zbar_decode_code128+0xba4>)
  4038c8:	9300      	str	r3, [sp, #0]
  4038ca:	4b92      	ldr	r3, [pc, #584]	; (403b14 <_zbar_decode_code128+0xba8>)
  4038cc:	9301      	str	r3, [sp, #4]
  4038ce:	9702      	str	r7, [sp, #8]
  4038d0:	f8cd b00c 	str.w	fp, [sp, #12]
  4038d4:	f8cd 8010 	str.w	r8, [sp, #16]
  4038d8:	f8cd 9014 	str.w	r9, [sp, #20]
  4038dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
  4038de:	9306      	str	r3, [sp, #24]
  4038e0:	9007      	str	r0, [sp, #28]
  4038e2:	4630      	mov	r0, r6
  4038e4:	498c      	ldr	r1, [pc, #560]	; (403b18 <_zbar_decode_code128+0xbac>)
  4038e6:	4a8d      	ldr	r2, [pc, #564]	; (403b1c <_zbar_decode_code128+0xbb0>)
  4038e8:	f240 136f 	movw	r3, #367	; 0x16f
  4038ec:	4d8c      	ldr	r5, [pc, #560]	; (403b20 <_zbar_decode_code128+0xbb4>)
  4038ee:	47a8      	blx	r5
  4038f0:	e26a      	b.n	403dc8 <_zbar_decode_code128+0xe5c>
                "i=%x j=%x code=%02x charset=%x cexp=%x %s\n",
                i, j, code, charset, cexp,
                _zbar_decoder_buf_dump(dcode->buf, dcode->code128.character));

        if((charset & 0x2) && (code < 100))
  4038f2:	f019 0f02 	tst.w	r9, #2
  4038f6:	f000 8354 	beq.w	403fa2 <_zbar_decode_code128+0x1036>
  4038fa:	f1b8 0f63 	cmp.w	r8, #99	; 0x63
  4038fe:	f240 8153 	bls.w	403ba8 <_zbar_decode_code128+0xc3c>
  403902:	e353      	b.n	403fac <_zbar_decode_code128+0x1040>
            /* defer character set C for expansion */
            continue;
        else if(code < 0x60) {
            /* convert character set B to ASCII */
            code = code + 0x20;
  403904:	f108 0320 	add.w	r3, r8, #32
  403908:	b2db      	uxtb	r3, r3
            if((!charset || (charset == 0x81)) && (code >= 0x60))
  40390a:	f1b9 0f00 	cmp.w	r9, #0
  40390e:	f000 8357 	beq.w	403fc0 <_zbar_decode_code128+0x1054>
  403912:	f1b9 0f81 	cmp.w	r9, #129	; 0x81
  403916:	d103      	bne.n	403920 <_zbar_decode_code128+0x9b4>
  403918:	e35b      	b.n	403fd2 <_zbar_decode_code128+0x1066>
                /* convert character set A to ASCII */
                code -= 0x60;
  40391a:	f1a8 0340 	sub.w	r3, r8, #64	; 0x40
  40391e:	b2db      	uxtb	r3, r3
            dcode->buf[j++] = code;
  403920:	f10b 0201 	add.w	r2, fp, #1
  403924:	f800 300b 	strb.w	r3, [r0, fp]
            if(charset & 0x80)
  403928:	f019 0f80 	tst.w	r9, #128	; 0x80
  40392c:	f000 813b 	beq.w	403ba6 <_zbar_decode_code128+0xc3a>
                charset &= 0x7f;
  403930:	f009 097f 	and.w	r9, r9, #127	; 0x7f
  403934:	4693      	mov	fp, r2
  403936:	e137      	b.n	403ba8 <_zbar_decode_code128+0xc3c>
        else {
            dbprintf(2, " %02x", code);
            if(charset & 0x2) {
                unsigned delta;
                /* expand character set C to ASCII */
                zassert(cexp, 1, "i=%x j=%x code=%02x charset=%x cexp=%x %s\n",
  403938:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40393a:	b9db      	cbnz	r3, 403974 <_zbar_decode_code128+0xa08>
  40393c:	4b72      	ldr	r3, [pc, #456]	; (403b08 <_zbar_decode_code128+0xb9c>)
  40393e:	681b      	ldr	r3, [r3, #0]
  403940:	68dd      	ldr	r5, [r3, #12]
  403942:	b209      	sxth	r1, r1
  403944:	4b71      	ldr	r3, [pc, #452]	; (403b0c <_zbar_decode_code128+0xba0>)
  403946:	4798      	blx	r3
  403948:	4b71      	ldr	r3, [pc, #452]	; (403b10 <_zbar_decode_code128+0xba4>)
  40394a:	9300      	str	r3, [sp, #0]
  40394c:	4b75      	ldr	r3, [pc, #468]	; (403b24 <_zbar_decode_code128+0xbb8>)
  40394e:	9301      	str	r3, [sp, #4]
  403950:	9702      	str	r7, [sp, #8]
  403952:	f8cd b00c 	str.w	fp, [sp, #12]
  403956:	f8cd 8010 	str.w	r8, [sp, #16]
  40395a:	f8cd 9014 	str.w	r9, [sp, #20]
  40395e:	2300      	movs	r3, #0
  403960:	9306      	str	r3, [sp, #24]
  403962:	9007      	str	r0, [sp, #28]
  403964:	4628      	mov	r0, r5
  403966:	496c      	ldr	r1, [pc, #432]	; (403b18 <_zbar_decode_code128+0xbac>)
  403968:	4a6c      	ldr	r2, [pc, #432]	; (403b1c <_zbar_decode_code128+0xbb0>)
  40396a:	f44f 73c3 	mov.w	r3, #390	; 0x186
  40396e:	4d6c      	ldr	r5, [pc, #432]	; (403b20 <_zbar_decode_code128+0xbb4>)
  403970:	47a8      	blx	r5
  403972:	e229      	b.n	403dc8 <_zbar_decode_code128+0xe5c>
                                      unsigned dst)
{
    unsigned i, j;

    /* expand buffer to accomodate 2x set C characters (2 digits per-char) */
    unsigned delta = end - start;
  403974:	9b09      	ldr	r3, [sp, #36]	; 0x24
  403976:	ebc3 0a07 	rsb	sl, r3, r7
    unsigned newlen = dcode->code128.character + delta;
  40397a:	fa0a f581 	sxtah	r5, sl, r1
/* ensure output buffer has sufficient allocation for request */
static inline char size_buf (zbar_decoder_t *dcode,
                             unsigned len)
{
    unsigned char *buf;
    if(len <= BUFFER_MIN)
  40397e:	2d20      	cmp	r5, #32
  403980:	d915      	bls.n	4039ae <_zbar_decode_code128+0xa42>
        return(0);
    if(len < dcode->buf_alloc)
  403982:	6d66      	ldr	r6, [r4, #84]	; 0x54
  403984:	42b5      	cmp	r5, r6
  403986:	d312      	bcc.n	4039ae <_zbar_decode_code128+0xa42>
        /* FIXME size reduction heuristic? */
        return(0);
    if(len > BUFFER_MAX)
  403988:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
  40398c:	d80f      	bhi.n	4039ae <_zbar_decode_code128+0xa42>
        return(1);
    if(len < dcode->buf_alloc + BUFFER_INCR) {
  40398e:	3610      	adds	r6, #16
  403990:	42b5      	cmp	r5, r6
  403992:	d205      	bcs.n	4039a0 <_zbar_decode_code128+0xa34>
  403994:	f5b6 7f80 	cmp.w	r6, #256	; 0x100
  403998:	bf28      	it	cs
  40399a:	f44f 7680 	movcs.w	r6, #256	; 0x100
  40399e:	e000      	b.n	4039a2 <_zbar_decode_code128+0xa36>
  4039a0:	462e      	mov	r6, r5
        len = dcode->buf_alloc + BUFFER_INCR;
        if(len > BUFFER_MAX)
            len = BUFFER_MAX;
    }
    buf = realloc(dcode->buf, len);
  4039a2:	4631      	mov	r1, r6
  4039a4:	4b60      	ldr	r3, [pc, #384]	; (403b28 <_zbar_decode_code128+0xbbc>)
  4039a6:	4798      	blx	r3
    if(!buf)
  4039a8:	b108      	cbz	r0, 4039ae <_zbar_decode_code128+0xa42>
        return(1);
    dcode->buf = buf;
  4039aa:	65e0      	str	r0, [r4, #92]	; 0x5c
    dcode->buf_alloc = len;
  4039ac:	6566      	str	r6, [r4, #84]	; 0x54
    size_buf(dcode, newlen);

    /* relocate unprocessed data to end of buffer */
    memmove(dcode->buf + start + delta, dcode->buf + start,
  4039ae:	6de1      	ldr	r1, [r4, #92]	; 0x5c
            dcode->code128.character - start);
  4039b0:	f8b4 2104 	ldrh.w	r2, [r4, #260]	; 0x104
    unsigned delta = end - start;
    unsigned newlen = dcode->code128.character + delta;
    size_buf(dcode, newlen);

    /* relocate unprocessed data to end of buffer */
    memmove(dcode->buf + start + delta, dcode->buf + start,
  4039b4:	f342 120b 	sbfx	r2, r2, #4, #12
  4039b8:	19c8      	adds	r0, r1, r7
  4039ba:	9e09      	ldr	r6, [sp, #36]	; 0x24
  4039bc:	4431      	add	r1, r6
  4039be:	1b92      	subs	r2, r2, r6
  4039c0:	4b5a      	ldr	r3, [pc, #360]	; (403b2c <_zbar_decode_code128+0xbc0>)
  4039c2:	4798      	blx	r3
            dcode->code128.character - start);
    dcode->code128.character = newlen;
  4039c4:	f8b4 3104 	ldrh.w	r3, [r4, #260]	; 0x104
  4039c8:	f365 130f 	bfi	r3, r5, #4, #12
  4039cc:	f8a4 3104 	strh.w	r3, [r4, #260]	; 0x104

    for(i = 0, j = dst; i < delta; i++, j += 2) {
  4039d0:	f1ba 0f00 	cmp.w	sl, #0
  4039d4:	d06d      	beq.n	403ab2 <_zbar_decode_code128+0xb46>
  4039d6:	465d      	mov	r5, fp
  4039d8:	2600      	movs	r6, #0
        /* convert each set C character into two ASCII digits */
        unsigned char code = dcode->buf[start + delta + i];
  4039da:	6de2      	ldr	r2, [r4, #92]	; 0x5c
  4039dc:	19d3      	adds	r3, r2, r7
  4039de:	5d9b      	ldrb	r3, [r3, r6]
        dcode->buf[j] = '0';
  4039e0:	f04f 0130 	mov.w	r1, #48	; 0x30
  4039e4:	5551      	strb	r1, [r2, r5]
        if(code >= 50) {
  4039e6:	2b31      	cmp	r3, #49	; 0x31
  4039e8:	d905      	bls.n	4039f6 <_zbar_decode_code128+0xa8a>
            code -= 50;
  4039ea:	3b32      	subs	r3, #50	; 0x32
  4039ec:	b2db      	uxtb	r3, r3
            dcode->buf[j] += 5;
  4039ee:	6de1      	ldr	r1, [r4, #92]	; 0x5c
  4039f0:	5d4a      	ldrb	r2, [r1, r5]
  4039f2:	3205      	adds	r2, #5
  4039f4:	554a      	strb	r2, [r1, r5]
        }
        if(code >= 30) {
  4039f6:	2b1d      	cmp	r3, #29
  4039f8:	d905      	bls.n	403a06 <_zbar_decode_code128+0xa9a>
            code -= 30;
  4039fa:	3b1e      	subs	r3, #30
  4039fc:	b2db      	uxtb	r3, r3
            dcode->buf[j] += 3;
  4039fe:	6de1      	ldr	r1, [r4, #92]	; 0x5c
  403a00:	5d4a      	ldrb	r2, [r1, r5]
  403a02:	3203      	adds	r2, #3
  403a04:	554a      	strb	r2, [r1, r5]
        }
        if(code >= 20) {
  403a06:	2b13      	cmp	r3, #19
  403a08:	d905      	bls.n	403a16 <_zbar_decode_code128+0xaaa>
            code -= 20;
  403a0a:	3b14      	subs	r3, #20
  403a0c:	b2db      	uxtb	r3, r3
            dcode->buf[j] += 2;
  403a0e:	6de1      	ldr	r1, [r4, #92]	; 0x5c
  403a10:	5d4a      	ldrb	r2, [r1, r5]
  403a12:	3202      	adds	r2, #2
  403a14:	554a      	strb	r2, [r1, r5]
        }
        if(code >= 10) {
  403a16:	2b09      	cmp	r3, #9
  403a18:	f240 82df 	bls.w	403fda <_zbar_decode_code128+0x106e>
            code -= 10;
  403a1c:	3b0a      	subs	r3, #10
  403a1e:	b2db      	uxtb	r3, r3
            dcode->buf[j] += 1;
  403a20:	6de1      	ldr	r1, [r4, #92]	; 0x5c
  403a22:	5d4a      	ldrb	r2, [r1, r5]
  403a24:	3201      	adds	r2, #1
  403a26:	554a      	strb	r2, [r1, r5]
        }
        zassert(dcode->buf[j] <= '9', delta,
  403a28:	6de0      	ldr	r0, [r4, #92]	; 0x5c
  403a2a:	5d42      	ldrb	r2, [r0, r5]
  403a2c:	2a39      	cmp	r2, #57	; 0x39
  403a2e:	d91b      	bls.n	403a68 <_zbar_decode_code128+0xafc>
  403a30:	4b35      	ldr	r3, [pc, #212]	; (403b08 <_zbar_decode_code128+0xb9c>)
  403a32:	681b      	ldr	r3, [r3, #0]
  403a34:	68db      	ldr	r3, [r3, #12]
  403a36:	930b      	str	r3, [sp, #44]	; 0x2c
  403a38:	f8b4 1104 	ldrh.w	r1, [r4, #260]	; 0x104
  403a3c:	f341 110b 	sbfx	r1, r1, #4, #12
  403a40:	4b32      	ldr	r3, [pc, #200]	; (403b0c <_zbar_decode_code128+0xba0>)
  403a42:	4798      	blx	r3
  403a44:	4b3a      	ldr	r3, [pc, #232]	; (403b30 <_zbar_decode_code128+0xbc4>)
  403a46:	9300      	str	r3, [sp, #0]
  403a48:	4b3a      	ldr	r3, [pc, #232]	; (403b34 <_zbar_decode_code128+0xbc8>)
  403a4a:	9301      	str	r3, [sp, #4]
  403a4c:	9a09      	ldr	r2, [sp, #36]	; 0x24
  403a4e:	9202      	str	r2, [sp, #8]
  403a50:	9703      	str	r7, [sp, #12]
  403a52:	9604      	str	r6, [sp, #16]
  403a54:	9505      	str	r5, [sp, #20]
  403a56:	9006      	str	r0, [sp, #24]
  403a58:	980b      	ldr	r0, [sp, #44]	; 0x2c
  403a5a:	4937      	ldr	r1, [pc, #220]	; (403b38 <_zbar_decode_code128+0xbcc>)
  403a5c:	4a2f      	ldr	r2, [pc, #188]	; (403b1c <_zbar_decode_code128+0xbb0>)
  403a5e:	f44f 739f 	mov.w	r3, #318	; 0x13e
  403a62:	4d2f      	ldr	r5, [pc, #188]	; (403b20 <_zbar_decode_code128+0xbb4>)
  403a64:	47a8      	blx	r5
  403a66:	e024      	b.n	403ab2 <_zbar_decode_code128+0xb46>
                "start=%x end=%x i=%x j=%x %s\n", start, end, i, j,
                _zbar_decoder_buf_dump(dcode->buf, dcode->code128.character));
        zassert(code <= 9, delta,
  403a68:	2b09      	cmp	r3, #9
  403a6a:	d91b      	bls.n	403aa4 <_zbar_decode_code128+0xb38>
  403a6c:	4b26      	ldr	r3, [pc, #152]	; (403b08 <_zbar_decode_code128+0xb9c>)
  403a6e:	681b      	ldr	r3, [r3, #0]
  403a70:	68db      	ldr	r3, [r3, #12]
  403a72:	930b      	str	r3, [sp, #44]	; 0x2c
  403a74:	f8b4 1104 	ldrh.w	r1, [r4, #260]	; 0x104
  403a78:	f341 110b 	sbfx	r1, r1, #4, #12
  403a7c:	4b23      	ldr	r3, [pc, #140]	; (403b0c <_zbar_decode_code128+0xba0>)
  403a7e:	4798      	blx	r3
  403a80:	4b2b      	ldr	r3, [pc, #172]	; (403b30 <_zbar_decode_code128+0xbc4>)
  403a82:	9300      	str	r3, [sp, #0]
  403a84:	4b2d      	ldr	r3, [pc, #180]	; (403b3c <_zbar_decode_code128+0xbd0>)
  403a86:	9301      	str	r3, [sp, #4]
  403a88:	9a09      	ldr	r2, [sp, #36]	; 0x24
  403a8a:	9202      	str	r2, [sp, #8]
  403a8c:	9703      	str	r7, [sp, #12]
  403a8e:	9604      	str	r6, [sp, #16]
  403a90:	9505      	str	r5, [sp, #20]
  403a92:	9006      	str	r0, [sp, #24]
  403a94:	980b      	ldr	r0, [sp, #44]	; 0x2c
  403a96:	4928      	ldr	r1, [pc, #160]	; (403b38 <_zbar_decode_code128+0xbcc>)
  403a98:	4a20      	ldr	r2, [pc, #128]	; (403b1c <_zbar_decode_code128+0xbb0>)
  403a9a:	f240 1341 	movw	r3, #321	; 0x141
  403a9e:	4d20      	ldr	r5, [pc, #128]	; (403b20 <_zbar_decode_code128+0xbb4>)
  403aa0:	47a8      	blx	r5
  403aa2:	e006      	b.n	403ab2 <_zbar_decode_code128+0xb46>
                "start=%x end=%x i=%x j=%x %s\n", start, end, i, j,
                _zbar_decoder_buf_dump(dcode->buf, dcode->code128.character));
        dcode->buf[j + 1] = '0' + code;
  403aa4:	4428      	add	r0, r5
  403aa6:	3330      	adds	r3, #48	; 0x30
  403aa8:	7043      	strb	r3, [r0, #1]
    /* relocate unprocessed data to end of buffer */
    memmove(dcode->buf + start + delta, dcode->buf + start,
            dcode->code128.character - start);
    dcode->code128.character = newlen;

    for(i = 0, j = dst; i < delta; i++, j += 2) {
  403aaa:	3601      	adds	r6, #1
  403aac:	3502      	adds	r5, #2
  403aae:	4556      	cmp	r6, sl
  403ab0:	d193      	bne.n	4039da <_zbar_decode_code128+0xa6e>
                zassert(cexp, 1, "i=%x j=%x code=%02x charset=%x cexp=%x %s\n",
                        i, j, code, charset, cexp,
                        _zbar_decoder_buf_dump(dcode->buf,
                                                dcode->code128.character));
                delta = postprocess_c(dcode, cexp, i, j);
                i += delta;
  403ab2:	4457      	add	r7, sl
                j += delta * 2;
  403ab4:	eb0b 0b4a 	add.w	fp, fp, sl, lsl #1
                cexp = 0;
  403ab8:	2300      	movs	r3, #0
  403aba:	9309      	str	r3, [sp, #36]	; 0x24
            }
            if(code < CODE_C) {
  403abc:	f1b8 0f62 	cmp.w	r8, #98	; 0x62
  403ac0:	d803      	bhi.n	403aca <_zbar_decode_code128+0xb5e>
                if(code == SHIFT)
  403ac2:	d16a      	bne.n	403b9a <_zbar_decode_code128+0xc2e>
                    charset |= 0x80;
  403ac4:	f049 0980 	orr.w	r9, r9, #128	; 0x80
  403ac8:	e067      	b.n	403b9a <_zbar_decode_code128+0xc2e>
                }
                else if(code == FNC3) {
                    /* FIXME FNC3 - initialize */
                }
            }
            else if(code == FNC1) {
  403aca:	f1b8 0f66 	cmp.w	r8, #102	; 0x66
  403ace:	d137      	bne.n	403b40 <_zbar_decode_code128+0xbd4>
                /* FNC1 - Code 128 subsets or ASCII 0x1d */
                if(i == 1)
  403ad0:	2f01      	cmp	r7, #1
  403ad2:	d104      	bne.n	403ade <_zbar_decode_code128+0xb72>
                    dcode->modifiers |= MOD(ZBAR_MOD_GS1);
  403ad4:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  403ad6:	f043 0301 	orr.w	r3, r3, #1
  403ada:	64a3      	str	r3, [r4, #72]	; 0x48
  403adc:	e05d      	b.n	403b9a <_zbar_decode_code128+0xc2e>
                else if(i == 2)
  403ade:	2f02      	cmp	r7, #2
  403ae0:	d104      	bne.n	403aec <_zbar_decode_code128+0xb80>
                    dcode->modifiers |= MOD(ZBAR_MOD_AIM);
  403ae2:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  403ae4:	f043 0302 	orr.w	r3, r3, #2
  403ae8:	64a3      	str	r3, [r4, #72]	; 0x48
  403aea:	e056      	b.n	403b9a <_zbar_decode_code128+0xc2e>
                else if(i < dcode->code128.character - 3)
  403aec:	f8b4 3104 	ldrh.w	r3, [r4, #260]	; 0x104
  403af0:	f343 130b 	sbfx	r3, r3, #4, #12
  403af4:	3b03      	subs	r3, #3
  403af6:	429f      	cmp	r7, r3
  403af8:	d24f      	bcs.n	403b9a <_zbar_decode_code128+0xc2e>
                    dcode->buf[j++] = 0x1d;
  403afa:	6de3      	ldr	r3, [r4, #92]	; 0x5c
  403afc:	221d      	movs	r2, #29
  403afe:	f803 200b 	strb.w	r2, [r3, fp]
  403b02:	f10b 0b01 	add.w	fp, fp, #1
  403b06:	e048      	b.n	403b9a <_zbar_decode_code128+0xc2e>
  403b08:	20000440 	.word	0x20000440
  403b0c:	00404c05 	.word	0x00404c05
  403b10:	00410a50 	.word	0x00410a50
  403b14:	00410dd4 	.word	0x00410dd4
  403b18:	00410d7c 	.word	0x00410d7c
  403b1c:	00410aac 	.word	0x00410aac
  403b20:	004083a9 	.word	0x004083a9
  403b24:	00410de4 	.word	0x00410de4
  403b28:	004093c5 	.word	0x004093c5
  403b2c:	00409259 	.word	0x00409259
  403b30:	004109b0 	.word	0x004109b0
  403b34:	00410e38 	.word	0x00410e38
  403b38:	00410dec 	.word	0x00410dec
  403b3c:	00410e50 	.word	0x00410e50
                /*else drop trailing FNC1 */
            }
            else if(code >= START_A) {
  403b40:	f1b8 0f66 	cmp.w	r8, #102	; 0x66
  403b44:	f200 8140 	bhi.w	403dc8 <_zbar_decode_code128+0xe5c>
                dbprintf(1, " [truncated]\n");
                return(1);
            }
            else {
                unsigned char newset = CODE_A - code;
  403b48:	f1c8 0365 	rsb	r3, r8, #101	; 0x65
  403b4c:	b2db      	uxtb	r3, r3
                zassert(code >= CODE_C && code <= CODE_A, 1,
  403b4e:	f1a8 0263 	sub.w	r2, r8, #99	; 0x63
  403b52:	b2d2      	uxtb	r2, r2
  403b54:	2a02      	cmp	r2, #2
  403b56:	d91f      	bls.n	403b98 <_zbar_decode_code128+0xc2c>
  403b58:	4baa      	ldr	r3, [pc, #680]	; (403e04 <_zbar_decode_code128+0xe98>)
  403b5a:	681b      	ldr	r3, [r3, #0]
  403b5c:	68dd      	ldr	r5, [r3, #12]
  403b5e:	f8b4 1104 	ldrh.w	r1, [r4, #260]	; 0x104
  403b62:	6de0      	ldr	r0, [r4, #92]	; 0x5c
  403b64:	f341 110b 	sbfx	r1, r1, #4, #12
  403b68:	4ba7      	ldr	r3, [pc, #668]	; (403e08 <_zbar_decode_code128+0xe9c>)
  403b6a:	4798      	blx	r3
  403b6c:	4ba7      	ldr	r3, [pc, #668]	; (403e0c <_zbar_decode_code128+0xea0>)
  403b6e:	9300      	str	r3, [sp, #0]
  403b70:	4ba7      	ldr	r3, [pc, #668]	; (403e10 <_zbar_decode_code128+0xea4>)
  403b72:	9301      	str	r3, [sp, #4]
  403b74:	9702      	str	r7, [sp, #8]
  403b76:	f8cd b00c 	str.w	fp, [sp, #12]
  403b7a:	f8cd 8010 	str.w	r8, [sp, #16]
  403b7e:	f8cd 9014 	str.w	r9, [sp, #20]
  403b82:	9b09      	ldr	r3, [sp, #36]	; 0x24
  403b84:	9306      	str	r3, [sp, #24]
  403b86:	9007      	str	r0, [sp, #28]
  403b88:	4628      	mov	r0, r5
  403b8a:	49a2      	ldr	r1, [pc, #648]	; (403e14 <_zbar_decode_code128+0xea8>)
  403b8c:	4aa2      	ldr	r2, [pc, #648]	; (403e18 <_zbar_decode_code128+0xeac>)
  403b8e:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
  403b92:	4da2      	ldr	r5, [pc, #648]	; (403e1c <_zbar_decode_code128+0xeb0>)
  403b94:	47a8      	blx	r5
  403b96:	e117      	b.n	403dc8 <_zbar_decode_code128+0xe5c>
  403b98:	4699      	mov	r9, r3
                    charset = newset;
                else {
                    /* FIXME FNC4 - extended ASCII */
                }
            }
            if(charset & 0x2)
  403b9a:	f019 0f02 	tst.w	r9, #2
  403b9e:	d003      	beq.n	403ba8 <_zbar_decode_code128+0xc3c>
                cexp = i + 1;
  403ba0:	1c7b      	adds	r3, r7, #1
  403ba2:	9309      	str	r3, [sp, #36]	; 0x24
  403ba4:	e000      	b.n	403ba8 <_zbar_decode_code128+0xc3c>
            /* convert character set B to ASCII */
            code = code + 0x20;
            if((!charset || (charset == 0x81)) && (code >= 0x60))
                /* convert character set A to ASCII */
                code -= 0x60;
            dcode->buf[j++] = code;
  403ba6:	4693      	mov	fp, r2

    charset = code - START_A;
    cexp = (code == START_C) ? 1 : 0;
    dbprintf(2, " start=%c", 'A' + charset);

    for(i = 1, j = 0; i < dcode128->character - 2; i++) {
  403ba8:	3701      	adds	r7, #1
  403baa:	f8b4 3104 	ldrh.w	r3, [r4, #260]	; 0x104
  403bae:	f343 130b 	sbfx	r3, r3, #4, #12
  403bb2:	b299      	uxth	r1, r3
  403bb4:	b21b      	sxth	r3, r3
  403bb6:	3b02      	subs	r3, #2
  403bb8:	429f      	cmp	r7, r3
  403bba:	f4ff ae74 	bcc.w	4038a6 <_zbar_decode_code128+0x93a>
  403bbe:	e002      	b.n	403bc6 <_zbar_decode_code128+0xc5a>
  403bc0:	f04f 0b00 	mov.w	fp, #0
  403bc4:	2701      	movs	r7, #1
            }
            if(charset & 0x2)
                cexp = i + 1;
        }
    }
    if(charset & 0x2) {
  403bc6:	f019 0f02 	tst.w	r9, #2
  403bca:	f000 80c5 	beq.w	403d58 <_zbar_decode_code128+0xdec>
        zassert(cexp, 1, "i=%x j=%x code=%02x charset=%x cexp=%x %s\n",
  403bce:	9b09      	ldr	r3, [sp, #36]	; 0x24
  403bd0:	b9e3      	cbnz	r3, 403c0c <_zbar_decode_code128+0xca0>
  403bd2:	4b8c      	ldr	r3, [pc, #560]	; (403e04 <_zbar_decode_code128+0xe98>)
  403bd4:	681b      	ldr	r3, [r3, #0]
  403bd6:	68dd      	ldr	r5, [r3, #12]
  403bd8:	6de0      	ldr	r0, [r4, #92]	; 0x5c
  403bda:	b209      	sxth	r1, r1
  403bdc:	4b8a      	ldr	r3, [pc, #552]	; (403e08 <_zbar_decode_code128+0xe9c>)
  403bde:	4798      	blx	r3
  403be0:	4b8a      	ldr	r3, [pc, #552]	; (403e0c <_zbar_decode_code128+0xea0>)
  403be2:	9300      	str	r3, [sp, #0]
  403be4:	4b8e      	ldr	r3, [pc, #568]	; (403e20 <_zbar_decode_code128+0xeb4>)
  403be6:	9301      	str	r3, [sp, #4]
  403be8:	9702      	str	r7, [sp, #8]
  403bea:	f8cd b00c 	str.w	fp, [sp, #12]
  403bee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  403bf0:	9304      	str	r3, [sp, #16]
  403bf2:	f8cd 9014 	str.w	r9, [sp, #20]
  403bf6:	2300      	movs	r3, #0
  403bf8:	9306      	str	r3, [sp, #24]
  403bfa:	9007      	str	r0, [sp, #28]
  403bfc:	4628      	mov	r0, r5
  403bfe:	4985      	ldr	r1, [pc, #532]	; (403e14 <_zbar_decode_code128+0xea8>)
  403c00:	4a85      	ldr	r2, [pc, #532]	; (403e18 <_zbar_decode_code128+0xeac>)
  403c02:	f240 13b9 	movw	r3, #441	; 0x1b9
  403c06:	4d85      	ldr	r5, [pc, #532]	; (403e1c <_zbar_decode_code128+0xeb0>)
  403c08:	47a8      	blx	r5
  403c0a:	e0dd      	b.n	403dc8 <_zbar_decode_code128+0xe5c>
                                      unsigned dst)
{
    unsigned i, j;

    /* expand buffer to accomodate 2x set C characters (2 digits per-char) */
    unsigned delta = end - start;
  403c0c:	9b09      	ldr	r3, [sp, #36]	; 0x24
  403c0e:	1afe      	subs	r6, r7, r3
    unsigned newlen = dcode->code128.character + delta;
  403c10:	fa06 f881 	sxtah	r8, r6, r1
/* ensure output buffer has sufficient allocation for request */
static inline char size_buf (zbar_decoder_t *dcode,
                             unsigned len)
{
    unsigned char *buf;
    if(len <= BUFFER_MIN)
  403c14:	f1b8 0f20 	cmp.w	r8, #32
  403c18:	d917      	bls.n	403c4a <_zbar_decode_code128+0xcde>
        return(0);
    if(len < dcode->buf_alloc)
  403c1a:	6d63      	ldr	r3, [r4, #84]	; 0x54
  403c1c:	4598      	cmp	r8, r3
  403c1e:	d314      	bcc.n	403c4a <_zbar_decode_code128+0xcde>
        /* FIXME size reduction heuristic? */
        return(0);
    if(len > BUFFER_MAX)
  403c20:	f5b8 7f80 	cmp.w	r8, #256	; 0x100
  403c24:	d811      	bhi.n	403c4a <_zbar_decode_code128+0xcde>
        return(1);
    if(len < dcode->buf_alloc + BUFFER_INCR) {
  403c26:	3310      	adds	r3, #16
  403c28:	4598      	cmp	r8, r3
  403c2a:	d206      	bcs.n	403c3a <_zbar_decode_code128+0xcce>
  403c2c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
  403c30:	bf28      	it	cs
  403c32:	f44f 7380 	movcs.w	r3, #256	; 0x100
  403c36:	461d      	mov	r5, r3
  403c38:	e000      	b.n	403c3c <_zbar_decode_code128+0xcd0>
  403c3a:	4645      	mov	r5, r8
        len = dcode->buf_alloc + BUFFER_INCR;
        if(len > BUFFER_MAX)
            len = BUFFER_MAX;
    }
    buf = realloc(dcode->buf, len);
  403c3c:	6de0      	ldr	r0, [r4, #92]	; 0x5c
  403c3e:	4629      	mov	r1, r5
  403c40:	4b78      	ldr	r3, [pc, #480]	; (403e24 <_zbar_decode_code128+0xeb8>)
  403c42:	4798      	blx	r3
    if(!buf)
  403c44:	b108      	cbz	r0, 403c4a <_zbar_decode_code128+0xcde>
        return(1);
    dcode->buf = buf;
  403c46:	65e0      	str	r0, [r4, #92]	; 0x5c
    dcode->buf_alloc = len;
  403c48:	6565      	str	r5, [r4, #84]	; 0x54
    size_buf(dcode, newlen);

    /* relocate unprocessed data to end of buffer */
    memmove(dcode->buf + start + delta, dcode->buf + start,
  403c4a:	6de1      	ldr	r1, [r4, #92]	; 0x5c
            dcode->code128.character - start);
  403c4c:	f8b4 2104 	ldrh.w	r2, [r4, #260]	; 0x104
    unsigned delta = end - start;
    unsigned newlen = dcode->code128.character + delta;
    size_buf(dcode, newlen);

    /* relocate unprocessed data to end of buffer */
    memmove(dcode->buf + start + delta, dcode->buf + start,
  403c50:	f342 120b 	sbfx	r2, r2, #4, #12
  403c54:	19c8      	adds	r0, r1, r7
  403c56:	9d09      	ldr	r5, [sp, #36]	; 0x24
  403c58:	4429      	add	r1, r5
  403c5a:	1b52      	subs	r2, r2, r5
  403c5c:	4b72      	ldr	r3, [pc, #456]	; (403e28 <_zbar_decode_code128+0xebc>)
  403c5e:	4798      	blx	r3
            dcode->code128.character - start);
    dcode->code128.character = newlen;
  403c60:	f8b4 3104 	ldrh.w	r3, [r4, #260]	; 0x104
  403c64:	f368 130f 	bfi	r3, r8, #4, #12
  403c68:	f8a4 3104 	strh.w	r3, [r4, #260]	; 0x104

    for(i = 0, j = dst; i < delta; i++, j += 2) {
  403c6c:	2e00      	cmp	r6, #0
  403c6e:	d071      	beq.n	403d54 <_zbar_decode_code128+0xde8>
  403c70:	465d      	mov	r5, fp
  403c72:	f04f 0800 	mov.w	r8, #0
        /* convert each set C character into two ASCII digits */
        unsigned char code = dcode->buf[start + delta + i];
        dcode->buf[j] = '0';
  403c76:	2130      	movs	r1, #48	; 0x30
            dcode->code128.character - start);
    dcode->code128.character = newlen;

    for(i = 0, j = dst; i < delta; i++, j += 2) {
        /* convert each set C character into two ASCII digits */
        unsigned char code = dcode->buf[start + delta + i];
  403c78:	6de2      	ldr	r2, [r4, #92]	; 0x5c
  403c7a:	19d3      	adds	r3, r2, r7
  403c7c:	f813 3008 	ldrb.w	r3, [r3, r8]
        dcode->buf[j] = '0';
  403c80:	5551      	strb	r1, [r2, r5]
        if(code >= 50) {
  403c82:	2b31      	cmp	r3, #49	; 0x31
  403c84:	d905      	bls.n	403c92 <_zbar_decode_code128+0xd26>
            code -= 50;
  403c86:	3b32      	subs	r3, #50	; 0x32
  403c88:	b2db      	uxtb	r3, r3
            dcode->buf[j] += 5;
  403c8a:	6de0      	ldr	r0, [r4, #92]	; 0x5c
  403c8c:	5d42      	ldrb	r2, [r0, r5]
  403c8e:	3205      	adds	r2, #5
  403c90:	5542      	strb	r2, [r0, r5]
        }
        if(code >= 30) {
  403c92:	2b1d      	cmp	r3, #29
  403c94:	d905      	bls.n	403ca2 <_zbar_decode_code128+0xd36>
            code -= 30;
  403c96:	3b1e      	subs	r3, #30
  403c98:	b2db      	uxtb	r3, r3
            dcode->buf[j] += 3;
  403c9a:	6de0      	ldr	r0, [r4, #92]	; 0x5c
  403c9c:	5d42      	ldrb	r2, [r0, r5]
  403c9e:	3203      	adds	r2, #3
  403ca0:	5542      	strb	r2, [r0, r5]
        }
        if(code >= 20) {
  403ca2:	2b13      	cmp	r3, #19
  403ca4:	d905      	bls.n	403cb2 <_zbar_decode_code128+0xd46>
            code -= 20;
  403ca6:	3b14      	subs	r3, #20
  403ca8:	b2db      	uxtb	r3, r3
            dcode->buf[j] += 2;
  403caa:	6de0      	ldr	r0, [r4, #92]	; 0x5c
  403cac:	5d42      	ldrb	r2, [r0, r5]
  403cae:	3202      	adds	r2, #2
  403cb0:	5542      	strb	r2, [r0, r5]
        }
        if(code >= 10) {
  403cb2:	2b09      	cmp	r3, #9
  403cb4:	f240 8197 	bls.w	403fe6 <_zbar_decode_code128+0x107a>
            code -= 10;
  403cb8:	3b0a      	subs	r3, #10
  403cba:	b2db      	uxtb	r3, r3
            dcode->buf[j] += 1;
  403cbc:	6de0      	ldr	r0, [r4, #92]	; 0x5c
  403cbe:	5d42      	ldrb	r2, [r0, r5]
  403cc0:	3201      	adds	r2, #1
  403cc2:	5542      	strb	r2, [r0, r5]
        }
        zassert(dcode->buf[j] <= '9', delta,
  403cc4:	6de0      	ldr	r0, [r4, #92]	; 0x5c
  403cc6:	5d42      	ldrb	r2, [r0, r5]
  403cc8:	2a39      	cmp	r2, #57	; 0x39
  403cca:	d91c      	bls.n	403d06 <_zbar_decode_code128+0xd9a>
  403ccc:	4b4d      	ldr	r3, [pc, #308]	; (403e04 <_zbar_decode_code128+0xe98>)
  403cce:	681b      	ldr	r3, [r3, #0]
  403cd0:	f8d3 900c 	ldr.w	r9, [r3, #12]
  403cd4:	f8b4 1104 	ldrh.w	r1, [r4, #260]	; 0x104
  403cd8:	f341 110b 	sbfx	r1, r1, #4, #12
  403cdc:	4b4a      	ldr	r3, [pc, #296]	; (403e08 <_zbar_decode_code128+0xe9c>)
  403cde:	4798      	blx	r3
  403ce0:	4b52      	ldr	r3, [pc, #328]	; (403e2c <_zbar_decode_code128+0xec0>)
  403ce2:	9300      	str	r3, [sp, #0]
  403ce4:	4b52      	ldr	r3, [pc, #328]	; (403e30 <_zbar_decode_code128+0xec4>)
  403ce6:	9301      	str	r3, [sp, #4]
  403ce8:	9b09      	ldr	r3, [sp, #36]	; 0x24
  403cea:	9302      	str	r3, [sp, #8]
  403cec:	9703      	str	r7, [sp, #12]
  403cee:	f8cd 8010 	str.w	r8, [sp, #16]
  403cf2:	9505      	str	r5, [sp, #20]
  403cf4:	9006      	str	r0, [sp, #24]
  403cf6:	4648      	mov	r0, r9
  403cf8:	494e      	ldr	r1, [pc, #312]	; (403e34 <_zbar_decode_code128+0xec8>)
  403cfa:	4a47      	ldr	r2, [pc, #284]	; (403e18 <_zbar_decode_code128+0xeac>)
  403cfc:	f44f 739f 	mov.w	r3, #318	; 0x13e
  403d00:	4d46      	ldr	r5, [pc, #280]	; (403e1c <_zbar_decode_code128+0xeb0>)
  403d02:	47a8      	blx	r5
  403d04:	e026      	b.n	403d54 <_zbar_decode_code128+0xde8>
                "start=%x end=%x i=%x j=%x %s\n", start, end, i, j,
                _zbar_decoder_buf_dump(dcode->buf, dcode->code128.character));
        zassert(code <= 9, delta,
  403d06:	2b09      	cmp	r3, #9
  403d08:	d91c      	bls.n	403d44 <_zbar_decode_code128+0xdd8>
  403d0a:	4b3e      	ldr	r3, [pc, #248]	; (403e04 <_zbar_decode_code128+0xe98>)
  403d0c:	681b      	ldr	r3, [r3, #0]
  403d0e:	f8d3 900c 	ldr.w	r9, [r3, #12]
  403d12:	f8b4 1104 	ldrh.w	r1, [r4, #260]	; 0x104
  403d16:	f341 110b 	sbfx	r1, r1, #4, #12
  403d1a:	4b3b      	ldr	r3, [pc, #236]	; (403e08 <_zbar_decode_code128+0xe9c>)
  403d1c:	4798      	blx	r3
  403d1e:	4b43      	ldr	r3, [pc, #268]	; (403e2c <_zbar_decode_code128+0xec0>)
  403d20:	9300      	str	r3, [sp, #0]
  403d22:	4b45      	ldr	r3, [pc, #276]	; (403e38 <_zbar_decode_code128+0xecc>)
  403d24:	9301      	str	r3, [sp, #4]
  403d26:	9b09      	ldr	r3, [sp, #36]	; 0x24
  403d28:	9302      	str	r3, [sp, #8]
  403d2a:	9703      	str	r7, [sp, #12]
  403d2c:	f8cd 8010 	str.w	r8, [sp, #16]
  403d30:	9505      	str	r5, [sp, #20]
  403d32:	9006      	str	r0, [sp, #24]
  403d34:	4648      	mov	r0, r9
  403d36:	493f      	ldr	r1, [pc, #252]	; (403e34 <_zbar_decode_code128+0xec8>)
  403d38:	4a37      	ldr	r2, [pc, #220]	; (403e18 <_zbar_decode_code128+0xeac>)
  403d3a:	f240 1341 	movw	r3, #321	; 0x141
  403d3e:	4d37      	ldr	r5, [pc, #220]	; (403e1c <_zbar_decode_code128+0xeb0>)
  403d40:	47a8      	blx	r5
  403d42:	e007      	b.n	403d54 <_zbar_decode_code128+0xde8>
                "start=%x end=%x i=%x j=%x %s\n", start, end, i, j,
                _zbar_decoder_buf_dump(dcode->buf, dcode->code128.character));
        dcode->buf[j + 1] = '0' + code;
  403d44:	4428      	add	r0, r5
  403d46:	3330      	adds	r3, #48	; 0x30
  403d48:	7043      	strb	r3, [r0, #1]
    /* relocate unprocessed data to end of buffer */
    memmove(dcode->buf + start + delta, dcode->buf + start,
            dcode->code128.character - start);
    dcode->code128.character = newlen;

    for(i = 0, j = dst; i < delta; i++, j += 2) {
  403d4a:	f108 0801 	add.w	r8, r8, #1
  403d4e:	3502      	adds	r5, #2
  403d50:	45b0      	cmp	r8, r6
  403d52:	d191      	bne.n	403c78 <_zbar_decode_code128+0xd0c>
    if(charset & 0x2) {
        zassert(cexp, 1, "i=%x j=%x code=%02x charset=%x cexp=%x %s\n",
                i, j, code, charset, cexp,
                _zbar_decoder_buf_dump(dcode->buf,
                                        dcode->code128.character));
        j += postprocess_c(dcode, cexp, i, j) * 2;
  403d54:	eb0b 0b46 	add.w	fp, fp, r6, lsl #1
    }
    zassert(j < dcode->buf_alloc, 1, "j=%02x %s\n", j,
  403d58:	6d63      	ldr	r3, [r4, #84]	; 0x54
  403d5a:	455b      	cmp	r3, fp
  403d5c:	d818      	bhi.n	403d90 <_zbar_decode_code128+0xe24>
  403d5e:	4b29      	ldr	r3, [pc, #164]	; (403e04 <_zbar_decode_code128+0xe98>)
  403d60:	681b      	ldr	r3, [r3, #0]
  403d62:	68dd      	ldr	r5, [r3, #12]
  403d64:	f8b4 1104 	ldrh.w	r1, [r4, #260]	; 0x104
  403d68:	6de0      	ldr	r0, [r4, #92]	; 0x5c
  403d6a:	f341 110b 	sbfx	r1, r1, #4, #12
  403d6e:	4b26      	ldr	r3, [pc, #152]	; (403e08 <_zbar_decode_code128+0xe9c>)
  403d70:	4798      	blx	r3
  403d72:	4b26      	ldr	r3, [pc, #152]	; (403e0c <_zbar_decode_code128+0xea0>)
  403d74:	9300      	str	r3, [sp, #0]
  403d76:	4b31      	ldr	r3, [pc, #196]	; (403e3c <_zbar_decode_code128+0xed0>)
  403d78:	9301      	str	r3, [sp, #4]
  403d7a:	f8cd b008 	str.w	fp, [sp, #8]
  403d7e:	9003      	str	r0, [sp, #12]
  403d80:	4628      	mov	r0, r5
  403d82:	492f      	ldr	r1, [pc, #188]	; (403e40 <_zbar_decode_code128+0xed4>)
  403d84:	4a24      	ldr	r2, [pc, #144]	; (403e18 <_zbar_decode_code128+0xeac>)
  403d86:	f240 13bd 	movw	r3, #445	; 0x1bd
  403d8a:	4d24      	ldr	r5, [pc, #144]	; (403e1c <_zbar_decode_code128+0xeb0>)
  403d8c:	47a8      	blx	r5
  403d8e:	e01b      	b.n	403dc8 <_zbar_decode_code128+0xe5c>
            _zbar_decoder_buf_dump(dcode->buf, dcode->code128.character));
    dcode->buflen = j;
  403d90:	f8c4 b058 	str.w	fp, [r4, #88]	; 0x58
    dcode->buf[j] = '\0';
  403d94:	6de3      	ldr	r3, [r4, #92]	; 0x5c
  403d96:	2200      	movs	r2, #0
  403d98:	f803 200b 	strb.w	r2, [r3, fp]
    dcode->code128.character = j;
  403d9c:	f8b4 3104 	ldrh.w	r3, [r4, #260]	; 0x104
  403da0:	f36b 130f 	bfi	r3, fp, #4, #12
  403da4:	f8a4 3104 	strh.w	r3, [r4, #260]	; 0x104
        : c == STOP_FWD)) {
        /* FIXME STOP_FWD should check extra bar (and QZ!) */
        zbar_symbol_type_t sym = ZBAR_CODE128;
        if(validate_checksum(dcode) || postprocess(dcode))
            sym = ZBAR_NONE;
        else if(dcode128->character < CFG(*dcode128, ZBAR_CFG_MIN_LEN) ||
  403da8:	f343 130b 	sbfx	r3, r3, #4, #12
  403dac:	f8d4 2114 	ldr.w	r2, [r4, #276]	; 0x114
  403db0:	4293      	cmp	r3, r2
  403db2:	f2c0 811e 	blt.w	403ff2 <_zbar_decode_code128+0x1086>
                (CFG(*dcode128, ZBAR_CFG_MAX_LEN) > 0 &&
  403db6:	f8d4 2118 	ldr.w	r2, [r4, #280]	; 0x118
        : c == STOP_FWD)) {
        /* FIXME STOP_FWD should check extra bar (and QZ!) */
        zbar_symbol_type_t sym = ZBAR_CODE128;
        if(validate_checksum(dcode) || postprocess(dcode))
            sym = ZBAR_NONE;
        else if(dcode128->character < CFG(*dcode128, ZBAR_CFG_MIN_LEN) ||
  403dba:	2a00      	cmp	r2, #0
  403dbc:	f340 8122 	ble.w	404004 <_zbar_decode_code128+0x1098>
                (CFG(*dcode128, ZBAR_CFG_MAX_LEN) > 0 &&
  403dc0:	4293      	cmp	r3, r2
  403dc2:	f300 8116 	bgt.w	403ff2 <_zbar_decode_code128+0x1086>
  403dc6:	e11d      	b.n	404004 <_zbar_decode_code128+0x1098>
            dbprintf(2, " [invalid len]\n");
            sym = ZBAR_NONE;
        }
        else
            dbprintf(2, " [valid end]\n");
        dcode128->character = -1;
  403dc8:	f8b4 3104 	ldrh.w	r3, [r4, #260]	; 0x104
  403dcc:	f04f 32ff 	mov.w	r2, #4294967295
  403dd0:	f362 130f 	bfi	r3, r2, #4, #12
  403dd4:	f8a4 3104 	strh.w	r3, [r4, #260]	; 0x104

/* check and release shared state lock */
static inline char release_lock (zbar_decoder_t *dcode,
                                 zbar_symbol_type_t req)
{
    zassert(dcode->lock == req, 1, "lock=%d req=%d\n",
  403dd8:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
  403ddc:	2b80      	cmp	r3, #128	; 0x80
  403dde:	d039      	beq.n	403e54 <_zbar_decode_code128+0xee8>
  403de0:	4a08      	ldr	r2, [pc, #32]	; (403e04 <_zbar_decode_code128+0xe98>)
  403de2:	6812      	ldr	r2, [r2, #0]
  403de4:	4917      	ldr	r1, [pc, #92]	; (403e44 <_zbar_decode_code128+0xed8>)
  403de6:	9100      	str	r1, [sp, #0]
  403de8:	4917      	ldr	r1, [pc, #92]	; (403e48 <_zbar_decode_code128+0xedc>)
  403dea:	9101      	str	r1, [sp, #4]
  403dec:	9302      	str	r3, [sp, #8]
  403dee:	2380      	movs	r3, #128	; 0x80
  403df0:	9303      	str	r3, [sp, #12]
  403df2:	68d0      	ldr	r0, [r2, #12]
  403df4:	4915      	ldr	r1, [pc, #84]	; (403e4c <_zbar_decode_code128+0xee0>)
  403df6:	4a16      	ldr	r2, [pc, #88]	; (403e50 <_zbar_decode_code128+0xee4>)
  403df8:	f240 1307 	movw	r3, #263	; 0x107
  403dfc:	4c07      	ldr	r4, [pc, #28]	; (403e1c <_zbar_decode_code128+0xeb0>)
  403dfe:	47a0      	blx	r4
        if(!sym)
            release_lock(dcode, ZBAR_CODE128);
        return(sym);
  403e00:	2000      	movs	r0, #0
  403e02:	e108      	b.n	404016 <_zbar_decode_code128+0x10aa>
  403e04:	20000440 	.word	0x20000440
  403e08:	00404c05 	.word	0x00404c05
  403e0c:	00410a50 	.word	0x00410a50
  403e10:	00410e5c 	.word	0x00410e5c
  403e14:	00410d7c 	.word	0x00410d7c
  403e18:	00410aac 	.word	0x00410aac
  403e1c:	004083a9 	.word	0x004083a9
  403e20:	00410de4 	.word	0x00410de4
  403e24:	004093c5 	.word	0x004093c5
  403e28:	00409259 	.word	0x00409259
  403e2c:	004109b0 	.word	0x004109b0
  403e30:	00410e38 	.word	0x00410e38
  403e34:	00410dec 	.word	0x00410dec
  403e38:	00410e50 	.word	0x00410e50
  403e3c:	00410eb8 	.word	0x00410eb8
  403e40:	00410e80 	.word	0x00410e80
  403e44:	00410a40 	.word	0x00410a40
  403e48:	00410ba8 	.word	0x00410ba8
  403e4c:	00410b3c 	.word	0x00410b3c
  403e50:	00410b78 	.word	0x00410b78
            dcode->lock, req);
    dcode->lock = 0;
  403e54:	2000      	movs	r0, #0
  403e56:	f8a4 0046 	strh.w	r0, [r4, #70]	; 0x46
  403e5a:	e0dc      	b.n	404016 <_zbar_decode_code128+0x10aa>
       ? get_color(dcode) != ZBAR_SPACE
       : (/* process every 6th element of active symbol */
          ++dcode128->element != 6 ||
          /* decode color based on direction */
          get_color(dcode) != dcode128->direction))
        return(0);
  403e5c:	2000      	movs	r0, #0
  403e5e:	e0da      	b.n	404016 <_zbar_decode_code128+0x10aa>
    if(dcode128->character < 0) {
        unsigned qz;
        dbprintf(2, " c=%02x", c);
        if(c < START_A || c > STOP_REV || c == STOP_FWD) {
            dbprintf(2, " [invalid]\n");
            return(0);
  403e60:	2000      	movs	r0, #0
  403e62:	e0d8      	b.n	404016 <_zbar_decode_code128+0x10aa>
  403e64:	2000      	movs	r0, #0
  403e66:	e0d6      	b.n	404016 <_zbar_decode_code128+0x10aa>
        }
        qz = get_width(dcode, 6);
        if(qz && qz < (dcode128->s6 * 3) / 4) {
            dbprintf(2, " [invalid qz %d]\n", qz);
            return(0);
  403e68:	2000      	movs	r0, #0
  403e6a:	e0d4      	b.n	404016 <_zbar_decode_code128+0x10aa>
            release_lock(dcode, ZBAR_CODE128);
        return(sym);
    }

    dbprintf(2, "\n");
    return(0);
  403e6c:	2000      	movs	r0, #0
  403e6e:	e0d2      	b.n	404016 <_zbar_decode_code128+0x10aa>
    if(dcode128->character < 0) {
        unsigned qz;
        dbprintf(2, " c=%02x", c);
        if(c < START_A || c > STOP_REV || c == STOP_FWD) {
            dbprintf(2, " [invalid]\n");
            return(0);
  403e70:	2000      	movs	r0, #0
  403e72:	e0d0      	b.n	404016 <_zbar_decode_code128+0x10aa>
  403e74:	2000      	movs	r0, #0
  403e76:	e0ce      	b.n	404016 <_zbar_decode_code128+0x10aa>
               ((sig >>  4) & 0x00f0) |
               ((sig <<  4) & 0x0f00) |
               ((sig << 12) & 0xf000));
    dbprintf(2, " rev=%x", rev != 0);

    switch(sig) {
  403e78:	f240 3141 	movw	r1, #833	; 0x341
  403e7c:	428b      	cmp	r3, r1
  403e7e:	d04b      	beq.n	403f18 <_zbar_decode_code128+0xfac>
  403e80:	dc16      	bgt.n	403eb0 <_zbar_decode_code128+0xf44>
  403e82:	2b34      	cmp	r3, #52	; 0x34
  403e84:	d054      	beq.n	403f30 <_zbar_decode_code128+0xfc4>
  403e86:	dc06      	bgt.n	403e96 <_zbar_decode_code128+0xf2a>
  403e88:	2b14      	cmp	r3, #20
  403e8a:	f43f a9d8 	beq.w	40323e <_zbar_decode_code128+0x2d2>
  403e8e:	2b25      	cmp	r3, #37	; 0x25
  403e90:	d051      	beq.n	403f36 <_zbar_decode_code128+0xfca>
  403e92:	f7ff ba91 	b.w	4033b8 <_zbar_decode_code128+0x44c>
  403e96:	f240 1143 	movw	r1, #323	; 0x143
  403e9a:	428b      	cmp	r3, r1
  403e9c:	d042      	beq.n	403f24 <_zbar_decode_code128+0xfb8>
  403e9e:	f240 2143 	movw	r1, #579	; 0x243
  403ea2:	428b      	cmp	r3, r1
  403ea4:	d03b      	beq.n	403f1e <_zbar_decode_code128+0xfb2>
  403ea6:	f5b3 7f9a 	cmp.w	r3, #308	; 0x134
  403eaa:	f47f aa85 	bne.w	4033b8 <_zbar_decode_code128+0x44c>
  403eae:	e03c      	b.n	403f2a <_zbar_decode_code128+0xfbe>
  403eb0:	f241 1134 	movw	r1, #4404	; 0x1134
  403eb4:	428b      	cmp	r3, r1
  403eb6:	d023      	beq.n	403f00 <_zbar_decode_code128+0xf94>
  403eb8:	dc0d      	bgt.n	403ed6 <_zbar_decode_code128+0xf6a>
  403eba:	f241 0124 	movw	r1, #4132	; 0x1024
  403ebe:	428b      	cmp	r3, r1
  403ec0:	d024      	beq.n	403f0c <_zbar_decode_code128+0xfa0>
  403ec2:	f241 1114 	movw	r1, #4372	; 0x1114
  403ec6:	428b      	cmp	r3, r1
  403ec8:	d01d      	beq.n	403f06 <_zbar_decode_code128+0xf9a>
  403eca:	f240 3152 	movw	r1, #850	; 0x352
  403ece:	428b      	cmp	r3, r1
  403ed0:	f47f aa72 	bne.w	4033b8 <_zbar_decode_code128+0x44c>
  403ed4:	e01d      	b.n	403f12 <_zbar_decode_code128+0xfa6>
  403ed6:	f241 2143 	movw	r1, #4675	; 0x1243
  403eda:	428b      	cmp	r3, r1
  403edc:	d00a      	beq.n	403ef4 <_zbar_decode_code128+0xf88>
  403ede:	f241 4141 	movw	r1, #5185	; 0x1441
  403ee2:	428b      	cmp	r3, r1
  403ee4:	f43f a9b4 	beq.w	403250 <_zbar_decode_code128+0x2e4>
  403ee8:	f241 2142 	movw	r1, #4674	; 0x1242
  403eec:	428b      	cmp	r3, r1
  403eee:	f47f aa63 	bne.w	4033b8 <_zbar_decode_code128+0x44c>
  403ef2:	e002      	b.n	403efa <_zbar_decode_code128+0xf8e>
    case 0x0352: idx = 0x7; break;
    case 0x1024: idx = 0x8; break;
    case 0x1114: idx = 0x9; break;
    case 0x1134: idx = 0xa; break;
    case 0x1242: idx = 0xb; break;
    case 0x1243: idx = 0xc; break;
  403ef4:	230c      	movs	r3, #12
  403ef6:	f7ff b9a3 	b.w	403240 <_zbar_decode_code128+0x2d4>
    case 0x0341: idx = 0x6; break;
    case 0x0352: idx = 0x7; break;
    case 0x1024: idx = 0x8; break;
    case 0x1114: idx = 0x9; break;
    case 0x1134: idx = 0xa; break;
    case 0x1242: idx = 0xb; break;
  403efa:	230b      	movs	r3, #11
  403efc:	f7ff b9a0 	b.w	403240 <_zbar_decode_code128+0x2d4>
    case 0x0243: idx = 0x5; break;
    case 0x0341: idx = 0x6; break;
    case 0x0352: idx = 0x7; break;
    case 0x1024: idx = 0x8; break;
    case 0x1114: idx = 0x9; break;
    case 0x1134: idx = 0xa; break;
  403f00:	230a      	movs	r3, #10
  403f02:	f7ff b99d 	b.w	403240 <_zbar_decode_code128+0x2d4>
    case 0x0143: idx = 0x4; break;
    case 0x0243: idx = 0x5; break;
    case 0x0341: idx = 0x6; break;
    case 0x0352: idx = 0x7; break;
    case 0x1024: idx = 0x8; break;
    case 0x1114: idx = 0x9; break;
  403f06:	2309      	movs	r3, #9
  403f08:	f7ff b99a 	b.w	403240 <_zbar_decode_code128+0x2d4>
    case 0x0134: idx = 0x3; break;
    case 0x0143: idx = 0x4; break;
    case 0x0243: idx = 0x5; break;
    case 0x0341: idx = 0x6; break;
    case 0x0352: idx = 0x7; break;
    case 0x1024: idx = 0x8; break;
  403f0c:	2308      	movs	r3, #8
  403f0e:	f7ff b997 	b.w	403240 <_zbar_decode_code128+0x2d4>
    case 0x0034: idx = 0x2; break;
    case 0x0134: idx = 0x3; break;
    case 0x0143: idx = 0x4; break;
    case 0x0243: idx = 0x5; break;
    case 0x0341: idx = 0x6; break;
    case 0x0352: idx = 0x7; break;
  403f12:	2307      	movs	r3, #7
  403f14:	f7ff b994 	b.w	403240 <_zbar_decode_code128+0x2d4>
    case 0x0025: idx = 0x1; break;
    case 0x0034: idx = 0x2; break;
    case 0x0134: idx = 0x3; break;
    case 0x0143: idx = 0x4; break;
    case 0x0243: idx = 0x5; break;
    case 0x0341: idx = 0x6; break;
  403f18:	2306      	movs	r3, #6
  403f1a:	f7ff b991 	b.w	403240 <_zbar_decode_code128+0x2d4>
    case 0x0014: idx = 0x0; break;
    case 0x0025: idx = 0x1; break;
    case 0x0034: idx = 0x2; break;
    case 0x0134: idx = 0x3; break;
    case 0x0143: idx = 0x4; break;
    case 0x0243: idx = 0x5; break;
  403f1e:	2305      	movs	r3, #5
  403f20:	f7ff b98e 	b.w	403240 <_zbar_decode_code128+0x2d4>
    switch(sig) {
    case 0x0014: idx = 0x0; break;
    case 0x0025: idx = 0x1; break;
    case 0x0034: idx = 0x2; break;
    case 0x0134: idx = 0x3; break;
    case 0x0143: idx = 0x4; break;
  403f24:	2304      	movs	r3, #4
  403f26:	f7ff b98b 	b.w	403240 <_zbar_decode_code128+0x2d4>

    switch(sig) {
    case 0x0014: idx = 0x0; break;
    case 0x0025: idx = 0x1; break;
    case 0x0034: idx = 0x2; break;
    case 0x0134: idx = 0x3; break;
  403f2a:	2303      	movs	r3, #3
  403f2c:	f7ff b988 	b.w	403240 <_zbar_decode_code128+0x2d4>
    dbprintf(2, " rev=%x", rev != 0);

    switch(sig) {
    case 0x0014: idx = 0x0; break;
    case 0x0025: idx = 0x1; break;
    case 0x0034: idx = 0x2; break;
  403f30:	2302      	movs	r3, #2
  403f32:	f7ff b985 	b.w	403240 <_zbar_decode_code128+0x2d4>
               ((sig << 12) & 0xf000));
    dbprintf(2, " rev=%x", rev != 0);

    switch(sig) {
    case 0x0014: idx = 0x0; break;
    case 0x0025: idx = 0x1; break;
  403f36:	2301      	movs	r3, #1
  403f38:	f7ff b982 	b.w	403240 <_zbar_decode_code128+0x2d4>
    dbprintf(2, "      code128[%c%02d+%x]:",
             (dcode128->direction) ? '<' : '>',
             dcode128->character, dcode128->element);

    c = decode6(dcode);
    if(dcode128->character < 0) {
  403f3c:	f8b4 3104 	ldrh.w	r3, [r4, #260]	; 0x104
  403f40:	f343 130b 	sbfx	r3, r3, #4, #12
  403f44:	b29d      	uxth	r5, r3
  403f46:	b21b      	sxth	r3, r3
  403f48:	2b00      	cmp	r3, #0
  403f4a:	db91      	blt.n	403e70 <_zbar_decode_code128+0xf04>
        return(-1);
    dbprintf(2, " sig=%04x", sig);
    /* lookup edge signature */
    c = (sig & 0x4444) ? decode_hi(sig) : decode_lo(sig);
    if(c == -1)
        return(-1);
  403f4c:	26ff      	movs	r6, #255	; 0xff
  403f4e:	f7ff ba72 	b.w	403436 <_zbar_decode_code128+0x4ca>
    dbprintf(2, "      code128[%c%02d+%x]:",
             (dcode128->direction) ? '<' : '>',
             dcode128->character, dcode128->element);

    c = decode6(dcode);
    if(dcode128->character < 0) {
  403f52:	f8b4 3104 	ldrh.w	r3, [r4, #260]	; 0x104
  403f56:	f343 130b 	sbfx	r3, r3, #4, #12
  403f5a:	2b00      	cmp	r3, #0
  403f5c:	f6bf aa8c 	bge.w	403478 <_zbar_decode_code128+0x50c>
  403f60:	e788      	b.n	403e74 <_zbar_decode_code128+0xf08>
        dcode128->character = -1;
        return(0);
    }
    else {
        unsigned dw;
        if(dcode128->width > dcode128->s6)
  403f62:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
  403f66:	f8d4 2108 	ldr.w	r2, [r4, #264]	; 0x108
  403f6a:	4293      	cmp	r3, r2
  403f6c:	f63f aaad 	bhi.w	4034ca <_zbar_decode_code128+0x55e>
  403f70:	f7ff baad 	b.w	4034ce <_zbar_decode_code128+0x562>
            _zbar_decoder_buf_dump(dcode->buf, dcode->buf_alloc));

    if(dcode128->character == 1) {
        /* lock shared resources */
        if(acquire_lock(dcode, ZBAR_CODE128)) {
            dcode128->character = -1;
  403f74:	f8b4 3104 	ldrh.w	r3, [r4, #260]	; 0x104
  403f78:	f04f 32ff 	mov.w	r2, #4294967295
  403f7c:	f362 130f 	bfi	r3, r2, #4, #12
  403f80:	f8a4 3104 	strh.w	r3, [r4, #260]	; 0x104
            return(0);
  403f84:	2000      	movs	r0, #0
  403f86:	e046      	b.n	404016 <_zbar_decode_code128+0x10aa>
    sum = dcode->buf[idx];
    if(sum >= 103)
        sum -= 103;

    /* calculate sum in reverse to avoid multiply operations */
    for(i = dcode128->character - 3; i; i--) {
  403f88:	fa0f fc81 	sxth.w	ip, r1
  403f8c:	f1bc 0703 	subs.w	r7, ip, #3
  403f90:	f47f ab7e 	bne.w	403690 <_zbar_decode_code128+0x724>
  403f94:	f7ff bbb6 	b.w	403704 <_zbar_decode_code128+0x798>
  403f98:	2f00      	cmp	r7, #0
  403f9a:	f47f ab7f 	bne.w	40369c <_zbar_decode_code128+0x730>
  403f9e:	f7ff bbb1 	b.w	403704 <_zbar_decode_code128+0x798>
                _zbar_decoder_buf_dump(dcode->buf, dcode->code128.character));

        if((charset & 0x2) && (code < 100))
            /* defer character set C for expansion */
            continue;
        else if(code < 0x60) {
  403fa2:	f1b8 0f5f 	cmp.w	r8, #95	; 0x5f
  403fa6:	f67f acad 	bls.w	403904 <_zbar_decode_code128+0x998>
  403faa:	e587      	b.n	403abc <_zbar_decode_code128+0xb50>
  403fac:	f1b8 0f5f 	cmp.w	r8, #95	; 0x5f
  403fb0:	f67f aca8 	bls.w	403904 <_zbar_decode_code128+0x998>
  403fb4:	e4c0      	b.n	403938 <_zbar_decode_code128+0x9cc>
            /* convert character set B to ASCII */
            code = code + 0x20;
            if((!charset || (charset == 0x81)) && (code >= 0x60))
                /* convert character set A to ASCII */
                code -= 0x60;
            dcode->buf[j++] = code;
  403fb6:	f800 300b 	strb.w	r3, [r0, fp]
  403fba:	f10b 0b01 	add.w	fp, fp, #1
  403fbe:	e5f3      	b.n	403ba8 <_zbar_decode_code128+0xc3c>
            /* defer character set C for expansion */
            continue;
        else if(code < 0x60) {
            /* convert character set B to ASCII */
            code = code + 0x20;
            if((!charset || (charset == 0x81)) && (code >= 0x60))
  403fc0:	2b5f      	cmp	r3, #95	; 0x5f
  403fc2:	f63f acaa 	bhi.w	40391a <_zbar_decode_code128+0x9ae>
  403fc6:	e7f6      	b.n	403fb6 <_zbar_decode_code128+0x104a>
                /* convert character set A to ASCII */
                code -= 0x60;
            dcode->buf[j++] = code;
  403fc8:	f10b 0201 	add.w	r2, fp, #1
  403fcc:	f800 300b 	strb.w	r3, [r0, fp]
  403fd0:	e4ae      	b.n	403930 <_zbar_decode_code128+0x9c4>
            /* defer character set C for expansion */
            continue;
        else if(code < 0x60) {
            /* convert character set B to ASCII */
            code = code + 0x20;
            if((!charset || (charset == 0x81)) && (code >= 0x60))
  403fd2:	2b5f      	cmp	r3, #95	; 0x5f
  403fd4:	f63f aca1 	bhi.w	40391a <_zbar_decode_code128+0x9ae>
  403fd8:	e7f6      	b.n	403fc8 <_zbar_decode_code128+0x105c>
        }
        if(code >= 10) {
            code -= 10;
            dcode->buf[j] += 1;
        }
        zassert(dcode->buf[j] <= '9', delta,
  403fda:	6de0      	ldr	r0, [r4, #92]	; 0x5c
  403fdc:	5d42      	ldrb	r2, [r0, r5]
  403fde:	2a39      	cmp	r2, #57	; 0x39
  403fe0:	f67f ad60 	bls.w	403aa4 <_zbar_decode_code128+0xb38>
  403fe4:	e524      	b.n	403a30 <_zbar_decode_code128+0xac4>
  403fe6:	6de0      	ldr	r0, [r4, #92]	; 0x5c
  403fe8:	5d42      	ldrb	r2, [r0, r5]
  403fea:	2a39      	cmp	r2, #57	; 0x39
  403fec:	f67f aeaa 	bls.w	403d44 <_zbar_decode_code128+0xdd8>
  403ff0:	e66c      	b.n	403ccc <_zbar_decode_code128+0xd60>
            dbprintf(2, " [invalid len]\n");
            sym = ZBAR_NONE;
        }
        else
            dbprintf(2, " [valid end]\n");
        dcode128->character = -1;
  403ff2:	f8b4 3104 	ldrh.w	r3, [r4, #260]	; 0x104
  403ff6:	f04f 32ff 	mov.w	r2, #4294967295
  403ffa:	f362 130f 	bfi	r3, r2, #4, #12
  403ffe:	f8a4 3104 	strh.w	r3, [r4, #260]	; 0x104
  404002:	e6e9      	b.n	403dd8 <_zbar_decode_code128+0xe6c>
  404004:	f8b4 3104 	ldrh.w	r3, [r4, #260]	; 0x104
  404008:	f04f 32ff 	mov.w	r2, #4294967295
  40400c:	f362 130f 	bfi	r3, r2, #4, #12
  404010:	f8a4 3104 	strh.w	r3, [r4, #260]	; 0x104
  404014:	2080      	movs	r0, #128	; 0x80
        return(sym);
    }

    dbprintf(2, "\n");
    return(0);
}
  404016:	b00d      	add	sp, #52	; 0x34
  404018:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0040401c <_zbar_decode_code39>:
    w *= 4;
    return(ref - dref <= w && w <= ref + dref);
}

zbar_symbol_type_t _zbar_decode_code39 (zbar_decoder_t *dcode)
{
  40401c:	b5f0      	push	{r4, r5, r6, r7, lr}
  40401e:	b087      	sub	sp, #28
  404020:	4604      	mov	r4, r0

/* retrieve i-th previous element width */
static inline unsigned get_width (const zbar_decoder_t *dcode,
                                  unsigned char offset)
{
    return(dcode->w[(dcode->idx - offset) & (DECODE_WINDOW - 1)]);
  404022:	7807      	ldrb	r7, [r0, #0]
  404024:	4638      	mov	r0, r7
  404026:	f007 030f 	and.w	r3, r7, #15
  40402a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
  40402e:	685d      	ldr	r5, [r3, #4]
  404030:	f8d4 20f0 	ldr.w	r2, [r4, #240]	; 0xf0
  404034:	442a      	add	r2, r5
  404036:	f1a7 0309 	sub.w	r3, r7, #9
  40403a:	f003 030f 	and.w	r3, r3, #15
  40403e:	eb04 0383 	add.w	r3, r4, r3, lsl #2
    code39_decoder_t *dcode39 = &dcode->code39;

    /* update latest character width */
    dcode39->s9 -= get_width(dcode, 9);
    dcode39->s9 += get_width(dcode, 0);
  404042:	685b      	ldr	r3, [r3, #4]
  404044:	1ad2      	subs	r2, r2, r3
  404046:	f8c4 20f0 	str.w	r2, [r4, #240]	; 0xf0

    if(dcode39->character < 0) {
  40404a:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
  40404e:	f343 1e4b 	sbfx	lr, r3, #5, #12
  404052:	fa0f f38e 	sxth.w	r3, lr
  404056:	2b00      	cmp	r3, #0
  404058:	f280 80e2 	bge.w	404220 <_zbar_decode_code39+0x204>
        if(get_color(dcode) != ZBAR_BAR)
  40405c:	f017 0f01 	tst.w	r7, #1
  404060:	f000 836d 	beq.w	40473e <_zbar_decode_code39+0x722>

static inline signed char code39_decode9 (zbar_decoder_t *dcode)
{
    code39_decoder_t *dcode39 = &dcode->code39;

    if(dcode39->s9 < 9)
  404064:	2a08      	cmp	r2, #8
  404066:	f240 836e 	bls.w	404746 <_zbar_decode_code39+0x72a>
  40406a:	2600      	movs	r6, #0
  40406c:	4631      	mov	r1, r6
  40406e:	1bbb      	subs	r3, r7, r6
  404070:	f003 030f 	and.w	r3, r3, #15
  404074:	eb04 0383 	add.w	r3, r4, r3, lsl #2
{
    /* result is encoded number of units - 2
     * (for use as zero based index)
     * or -1 if invalid
     */
    unsigned char E = ((e * n * 2 + 1) / s - 3) / 2;
  404078:	685b      	ldr	r3, [r3, #4]
  40407a:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
  40407e:	011b      	lsls	r3, r3, #4
  404080:	3301      	adds	r3, #1
  404082:	fbb3 f3f2 	udiv	r3, r3, r2
  404086:	3b03      	subs	r3, #3
    return((E >= n - 3) ? -1 : E);
  404088:	f3c3 0347 	ubfx	r3, r3, #1, #8
  40408c:	2b44      	cmp	r3, #68	; 0x44
  40408e:	f200 835a 	bhi.w	404746 <_zbar_decode_code39+0x72a>

static inline unsigned char code39_decode1 (unsigned char enc,
                                            unsigned e,
                                            unsigned s)
{
    unsigned char E = decode_e(e, s, 72);
  404092:	b2db      	uxtb	r3, r3
    if(E > 18)
  404094:	2b12      	cmp	r3, #18
  404096:	f200 80bb 	bhi.w	404210 <_zbar_decode_code39+0x1f4>
        return(0xff);
    enc <<= 1;
  40409a:	0049      	lsls	r1, r1, #1
  40409c:	b2c9      	uxtb	r1, r1
    if(E > 6) {
  40409e:	2b06      	cmp	r3, #6
        enc |= 1;
  4040a0:	bf88      	it	hi
  4040a2:	f041 0101 	orrhi.w	r1, r1, #1

    /* threshold bar width ratios */
    unsigned char i, enc = 0;
    for(i = 0; i < 5; i++) {
        enc = code39_decode1(enc, get_width(dcode, i), dcode39->s9);
        if(enc == 0xff)
  4040a6:	29ff      	cmp	r1, #255	; 0xff
  4040a8:	f000 834d 	beq.w	404746 <_zbar_decode_code39+0x72a>
  4040ac:	1c75      	adds	r5, r6, #1
  4040ae:	b2ed      	uxtb	r5, r5
  4040b0:	3601      	adds	r6, #1
    if(dcode39->s9 < 9)
        return(-1);

    /* threshold bar width ratios */
    unsigned char i, enc = 0;
    for(i = 0; i < 5; i++) {
  4040b2:	2e05      	cmp	r6, #5
  4040b4:	d1db      	bne.n	40406e <_zbar_decode_code39+0x52>
        enc = code39_decode1(enc, get_width(dcode, i), dcode39->s9);
        if(enc == 0xff)
            return(-1);
    }
    zassert(enc < 0x20, -1, " enc=%x s9=%x\n", enc, dcode39->s9);
  4040b6:	291f      	cmp	r1, #31
  4040b8:	d90e      	bls.n	4040d8 <_zbar_decode_code39+0xbc>
  4040ba:	4bb4      	ldr	r3, [pc, #720]	; (40438c <_zbar_decode_code39+0x370>)
  4040bc:	681b      	ldr	r3, [r3, #0]
  4040be:	48b4      	ldr	r0, [pc, #720]	; (404390 <_zbar_decode_code39+0x374>)
  4040c0:	9000      	str	r0, [sp, #0]
  4040c2:	48b4      	ldr	r0, [pc, #720]	; (404394 <_zbar_decode_code39+0x378>)
  4040c4:	9001      	str	r0, [sp, #4]
  4040c6:	9102      	str	r1, [sp, #8]
  4040c8:	9203      	str	r2, [sp, #12]
  4040ca:	68d8      	ldr	r0, [r3, #12]
  4040cc:	49b2      	ldr	r1, [pc, #712]	; (404398 <_zbar_decode_code39+0x37c>)
  4040ce:	4ab3      	ldr	r2, [pc, #716]	; (40439c <_zbar_decode_code39+0x380>)
  4040d0:	23a0      	movs	r3, #160	; 0xa0
  4040d2:	4cb3      	ldr	r4, [pc, #716]	; (4043a0 <_zbar_decode_code39+0x384>)
  4040d4:	47a0      	blx	r4
  4040d6:	e336      	b.n	404746 <_zbar_decode_code39+0x72a>

    /* lookup first 5 encoded widths for coarse decode */
    unsigned char idx = code39_hi[enc];
  4040d8:	4bb2      	ldr	r3, [pc, #712]	; (4043a4 <_zbar_decode_code39+0x388>)
  4040da:	5c5e      	ldrb	r6, [r3, r1]
    if(idx == 0xff)
  4040dc:	2eff      	cmp	r6, #255	; 0xff
  4040de:	f000 8332 	beq.w	404746 <_zbar_decode_code39+0x72a>
        return(-1);

    /* encode remaining widths (NB first encoded width is lost) */
    for(; i < 9; i++) {
  4040e2:	2d08      	cmp	r5, #8
  4040e4:	d822      	bhi.n	40412c <_zbar_decode_code39+0x110>

/* retrieve i-th previous element width */
static inline unsigned get_width (const zbar_decoder_t *dcode,
                                  unsigned char offset)
{
    return(dcode->w[(dcode->idx - offset) & (DECODE_WINDOW - 1)]);
  4040e6:	1b43      	subs	r3, r0, r5
  4040e8:	f003 030f 	and.w	r3, r3, #15
  4040ec:	eb04 0383 	add.w	r3, r4, r3, lsl #2
{
    /* result is encoded number of units - 2
     * (for use as zero based index)
     * or -1 if invalid
     */
    unsigned char E = ((e * n * 2 + 1) / s - 3) / 2;
  4040f0:	685b      	ldr	r3, [r3, #4]
  4040f2:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
  4040f6:	011b      	lsls	r3, r3, #4
  4040f8:	3301      	adds	r3, #1
  4040fa:	fbb3 f3f2 	udiv	r3, r3, r2
  4040fe:	3b03      	subs	r3, #3
    return((E >= n - 3) ? -1 : E);
  404100:	f3c3 0347 	ubfx	r3, r3, #1, #8
  404104:	2b44      	cmp	r3, #68	; 0x44
  404106:	f200 831e 	bhi.w	404746 <_zbar_decode_code39+0x72a>

static inline unsigned char code39_decode1 (unsigned char enc,
                                            unsigned e,
                                            unsigned s)
{
    unsigned char E = decode_e(e, s, 72);
  40410a:	b2db      	uxtb	r3, r3
    if(E > 18)
  40410c:	2b12      	cmp	r3, #18
  40410e:	f200 8081 	bhi.w	404214 <_zbar_decode_code39+0x1f8>
        return(0xff);
    enc <<= 1;
  404112:	0049      	lsls	r1, r1, #1
  404114:	b2c9      	uxtb	r1, r1
    if(E > 6) {
  404116:	2b06      	cmp	r3, #6
        enc |= 1;
  404118:	bf88      	it	hi
  40411a:	f041 0101 	orrhi.w	r1, r1, #1
        return(-1);

    /* encode remaining widths (NB first encoded width is lost) */
    for(; i < 9; i++) {
        enc = code39_decode1(enc, get_width(dcode, i), dcode39->s9);
        if(enc == 0xff)
  40411e:	29ff      	cmp	r1, #255	; 0xff
  404120:	f000 8311 	beq.w	404746 <_zbar_decode_code39+0x72a>
    unsigned char idx = code39_hi[enc];
    if(idx == 0xff)
        return(-1);

    /* encode remaining widths (NB first encoded width is lost) */
    for(; i < 9; i++) {
  404124:	3501      	adds	r5, #1
  404126:	b2ed      	uxtb	r5, r5
  404128:	2d09      	cmp	r5, #9
  40412a:	d1dc      	bne.n	4040e6 <_zbar_decode_code39+0xca>
        enc = code39_decode1(enc, get_width(dcode, i), dcode39->s9);
        if(enc == 0xff)
            return(-1);
    }

    if((idx & 0xc0) == 0x80)
  40412c:	f006 03c0 	and.w	r3, r6, #192	; 0xc0
  404130:	2b80      	cmp	r3, #128	; 0x80
  404132:	d105      	bne.n	404140 <_zbar_decode_code39+0x124>
        idx = (idx & 0x3f) + ((enc >> 3) & 1);
  404134:	f006 063f 	and.w	r6, r6, #63	; 0x3f
  404138:	f3c1 03c0 	ubfx	r3, r1, #3, #1
  40413c:	441e      	add	r6, r3
  40413e:	e00d      	b.n	40415c <_zbar_decode_code39+0x140>
    else if((idx & 0xc0) == 0xc0)
  404140:	2bc0      	cmp	r3, #192	; 0xc0
  404142:	d105      	bne.n	404150 <_zbar_decode_code39+0x134>
        idx = (idx & 0x3f) + ((enc >> 2) & 1);
  404144:	f006 063f 	and.w	r6, r6, #63	; 0x3f
  404148:	f3c1 0380 	ubfx	r3, r1, #2, #1
  40414c:	441e      	add	r6, r3
  40414e:	e005      	b.n	40415c <_zbar_decode_code39+0x140>
    else if(idx & 0xc0)
  404150:	b123      	cbz	r3, 40415c <_zbar_decode_code39+0x140>
        idx = (idx & 0x3f) + ((enc >> 2) & 3);
  404152:	f006 063f 	and.w	r6, r6, #63	; 0x3f
  404156:	f3c1 0381 	ubfx	r3, r1, #2, #2
  40415a:	441e      	add	r6, r3
    zassert(idx < 0x2c, -1, " idx=%x enc=%x s9=%x\n", idx, enc, dcode39->s9);
  40415c:	2e2b      	cmp	r6, #43	; 0x2b
  40415e:	d90f      	bls.n	404180 <_zbar_decode_code39+0x164>
  404160:	4b8a      	ldr	r3, [pc, #552]	; (40438c <_zbar_decode_code39+0x370>)
  404162:	681b      	ldr	r3, [r3, #0]
  404164:	488a      	ldr	r0, [pc, #552]	; (404390 <_zbar_decode_code39+0x374>)
  404166:	9000      	str	r0, [sp, #0]
  404168:	488f      	ldr	r0, [pc, #572]	; (4043a8 <_zbar_decode_code39+0x38c>)
  40416a:	9001      	str	r0, [sp, #4]
  40416c:	9602      	str	r6, [sp, #8]
  40416e:	9103      	str	r1, [sp, #12]
  404170:	9204      	str	r2, [sp, #16]
  404172:	68d8      	ldr	r0, [r3, #12]
  404174:	498d      	ldr	r1, [pc, #564]	; (4043ac <_zbar_decode_code39+0x390>)
  404176:	4a89      	ldr	r2, [pc, #548]	; (40439c <_zbar_decode_code39+0x380>)
  404178:	23b4      	movs	r3, #180	; 0xb4
  40417a:	4c89      	ldr	r4, [pc, #548]	; (4043a0 <_zbar_decode_code39+0x384>)
  40417c:	47a0      	blx	r4
  40417e:	e2e2      	b.n	404746 <_zbar_decode_code39+0x72a>

    const char39_t *c = &code39_encodings[idx];
  404180:	4633      	mov	r3, r6
    dbprintf(2, " i=%02x chk=%02x c=%02x/%02x", idx, c->chk, c->fwd, c->rev);
    if(enc != c->chk)
  404182:	eb06 0646 	add.w	r6, r6, r6, lsl #1
  404186:	488a      	ldr	r0, [pc, #552]	; (4043b0 <_zbar_decode_code39+0x394>)
  404188:	5d80      	ldrb	r0, [r0, r6]
  40418a:	4288      	cmp	r0, r1
  40418c:	f040 82db 	bne.w	404746 <_zbar_decode_code39+0x72a>
        return(-1);

    dcode39->width = dcode39->s9;
  404190:	f8c4 20f4 	str.w	r2, [r4, #244]	; 0xf4
    return((dcode39->direction) ? c->rev : c->fwd);
  404194:	f894 20ec 	ldrb.w	r2, [r4, #236]	; 0xec
  404198:	f012 0f01 	tst.w	r2, #1
  40419c:	d004      	beq.n	4041a8 <_zbar_decode_code39+0x18c>
  40419e:	4633      	mov	r3, r6
  4041a0:	4a83      	ldr	r2, [pc, #524]	; (4043b0 <_zbar_decode_code39+0x394>)
  4041a2:	4413      	add	r3, r2
  4041a4:	785b      	ldrb	r3, [r3, #1]
  4041a6:	e004      	b.n	4041b2 <_zbar_decode_code39+0x196>
  4041a8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
  4041ac:	4a80      	ldr	r2, [pc, #512]	; (4043b0 <_zbar_decode_code39+0x394>)
  4041ae:	4413      	add	r3, r2
  4041b0:	789b      	ldrb	r3, [r3, #2]
{
    code39_decoder_t *dcode39 = &dcode->code39;
    dbprintf(2, " s=%d ", dcode39->s9);

    signed char c = code39_decode9(dcode);
    if(c != 0x19 && c != 0x2b) {
  4041b2:	b25a      	sxtb	r2, r3
  4041b4:	2a19      	cmp	r2, #25
  4041b6:	d001      	beq.n	4041bc <_zbar_decode_code39+0x1a0>
  4041b8:	2a2b      	cmp	r2, #43	; 0x2b
  4041ba:	d12d      	bne.n	404218 <_zbar_decode_code39+0x1fc>
        dbprintf(2, "\n");
        return(ZBAR_NONE);
    }
    dcode39->direction ^= (c == 0x19);
  4041bc:	b25b      	sxtb	r3, r3
  4041be:	f894 20ec 	ldrb.w	r2, [r4, #236]	; 0xec
  4041c2:	f3c2 0100 	ubfx	r1, r2, #0, #1
  4041c6:	2b19      	cmp	r3, #25
  4041c8:	bf14      	ite	ne
  4041ca:	460b      	movne	r3, r1
  4041cc:	f081 0301 	eoreq.w	r3, r1, #1
  4041d0:	f363 0200 	bfi	r2, r3, #0, #1
  4041d4:	f884 20ec 	strb.w	r2, [r4, #236]	; 0xec

/* retrieve i-th previous element width */
static inline unsigned get_width (const zbar_decoder_t *dcode,
                                  unsigned char offset)
{
    return(dcode->w[(dcode->idx - offset) & (DECODE_WINDOW - 1)]);
  4041d8:	7823      	ldrb	r3, [r4, #0]
  4041da:	3b09      	subs	r3, #9
  4041dc:	f003 030f 	and.w	r3, r3, #15
  4041e0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
  4041e4:	685b      	ldr	r3, [r3, #4]

    /* check leading quiet zone - spec is 10x */
    unsigned quiet = get_width(dcode, 9);
    if(quiet && quiet < dcode39->s9 / 2) {
  4041e6:	b123      	cbz	r3, 4041f2 <_zbar_decode_code39+0x1d6>
  4041e8:	f8d4 20f0 	ldr.w	r2, [r4, #240]	; 0xf0
  4041ec:	ebb3 0f52 	cmp.w	r3, r2, lsr #1
  4041f0:	d314      	bcc.n	40421c <_zbar_decode_code39+0x200>
        dbprintf(2, " [invalid quiet]\n");
        return(ZBAR_NONE);
    }

    dcode39->element = 9;
  4041f2:	f894 30ec 	ldrb.w	r3, [r4, #236]	; 0xec
  4041f6:	2209      	movs	r2, #9
  4041f8:	f362 0344 	bfi	r3, r2, #1, #4
  4041fc:	f884 30ec 	strb.w	r3, [r4, #236]	; 0xec
    dcode39->character = 0;
  404200:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
  404204:	f36f 1350 	bfc	r3, #5, #12
  404208:	f8c4 30ec 	str.w	r3, [r4, #236]	; 0xec
    dbprintf(1, " dir=%x [valid start]\n", dcode39->direction);
    return(ZBAR_PARTIAL);
  40420c:	2001      	movs	r0, #1
  40420e:	e2dc      	b.n	4047ca <_zbar_decode_code39+0x7ae>
    dbprintf(2, " s=%d ", dcode39->s9);

    signed char c = code39_decode9(dcode);
    if(c != 0x19 && c != 0x2b) {
        dbprintf(2, "\n");
        return(ZBAR_NONE);
  404210:	2000      	movs	r0, #0
  404212:	e2da      	b.n	4047ca <_zbar_decode_code39+0x7ae>
  404214:	2000      	movs	r0, #0
  404216:	e2d8      	b.n	4047ca <_zbar_decode_code39+0x7ae>
  404218:	2000      	movs	r0, #0
  40421a:	e2d6      	b.n	4047ca <_zbar_decode_code39+0x7ae>

    /* check leading quiet zone - spec is 10x */
    unsigned quiet = get_width(dcode, 9);
    if(quiet && quiet < dcode39->s9 / 2) {
        dbprintf(2, " [invalid quiet]\n");
        return(ZBAR_NONE);
  40421c:	2000      	movs	r0, #0

    if(dcode39->character < 0) {
        if(get_color(dcode) != ZBAR_BAR)
            return(ZBAR_NONE);
        dbprintf(2, "      code39:");
        return(code39_decode_start(dcode));
  40421e:	e2d4      	b.n	4047ca <_zbar_decode_code39+0x7ae>
    }

    if(++dcode39->element < 9)
  404220:	f894 10ec 	ldrb.w	r1, [r4, #236]	; 0xec
  404224:	f3c1 0343 	ubfx	r3, r1, #1, #4
  404228:	3301      	adds	r3, #1
  40422a:	f003 030f 	and.w	r3, r3, #15
  40422e:	f363 0144 	bfi	r1, r3, #1, #4
  404232:	f884 10ec 	strb.w	r1, [r4, #236]	; 0xec
  404236:	2b08      	cmp	r3, #8
  404238:	f340 8283 	ble.w	404742 <_zbar_decode_code39+0x726>

    dbprintf(2, "      code39[%c%02d+%x]",
             (dcode39->direction) ? '<' : '>',
             dcode39->character, dcode39->element);

    if(dcode39->element == 10) {
  40423c:	b2ce      	uxtb	r6, r1
  40423e:	f006 031e 	and.w	r3, r6, #30
  404242:	2b14      	cmp	r3, #20
  404244:	f040 8104 	bne.w	404450 <_zbar_decode_code39+0x434>
        unsigned space = get_width(dcode, 0);
        if(dcode39->character &&
  404248:	f8d4 20ec 	ldr.w	r2, [r4, #236]	; 0xec
  40424c:	4b59      	ldr	r3, [pc, #356]	; (4043b4 <_zbar_decode_code39+0x398>)
  40424e:	4013      	ands	r3, r2
  404250:	2b00      	cmp	r3, #0
  404252:	f000 8283 	beq.w	40475c <_zbar_decode_code39+0x740>
           dcode->buf[dcode39->character - 1] == 0x2b) {  /* STOP */
  404256:	6de3      	ldr	r3, [r4, #92]	; 0x5c
  404258:	fa03 f38e 	sxtah	r3, r3, lr
             (dcode39->direction) ? '<' : '>',
             dcode39->character, dcode39->element);

    if(dcode39->element == 10) {
        unsigned space = get_width(dcode, 0);
        if(dcode39->character &&
  40425c:	f813 3c01 	ldrb.w	r3, [r3, #-1]
  404260:	2b2b      	cmp	r3, #43	; 0x2b
  404262:	f040 8282 	bne.w	40476a <_zbar_decode_code39+0x74e>
           dcode->buf[dcode39->character - 1] == 0x2b) {  /* STOP */
            /* trim STOP character */
            dcode39->character--;
  404266:	f60e 73ff 	addw	r3, lr, #4095	; 0xfff
  40426a:	f343 030b 	sbfx	r3, r3, #0, #12
  40426e:	b29b      	uxth	r3, r3
  404270:	f363 1250 	bfi	r2, r3, #5, #12
  404274:	f8c4 20ec 	str.w	r2, [r4, #236]	; 0xec
            zbar_symbol_type_t sym = ZBAR_NONE;

            /* trailing quiet zone check */
            if(space && space < dcode39->width / 2)
  404278:	b12d      	cbz	r5, 404286 <_zbar_decode_code39+0x26a>
  40427a:	f8d4 20f4 	ldr.w	r2, [r4, #244]	; 0xf4
  40427e:	ebb5 0f52 	cmp.w	r5, r2, lsr #1
  404282:	f0c0 8262 	bcc.w	40474a <_zbar_decode_code39+0x72e>
                dbprintf(2, " [invalid qz]\n");
            else if(dcode39->character < CFG(*dcode39, ZBAR_CFG_MIN_LEN) ||
  404286:	b21b      	sxth	r3, r3
  404288:	f8d4 20fc 	ldr.w	r2, [r4, #252]	; 0xfc
  40428c:	4293      	cmp	r3, r2
  40428e:	f2c0 825c 	blt.w	40474a <_zbar_decode_code39+0x72e>
                    (CFG(*dcode39, ZBAR_CFG_MAX_LEN) > 0 &&
  404292:	f8d4 2100 	ldr.w	r2, [r4, #256]	; 0x100
            zbar_symbol_type_t sym = ZBAR_NONE;

            /* trailing quiet zone check */
            if(space && space < dcode39->width / 2)
                dbprintf(2, " [invalid qz]\n");
            else if(dcode39->character < CFG(*dcode39, ZBAR_CFG_MIN_LEN) ||
  404296:	2a00      	cmp	r2, #0
  404298:	dd02      	ble.n	4042a0 <_zbar_decode_code39+0x284>
                    (CFG(*dcode39, ZBAR_CFG_MAX_LEN) > 0 &&
  40429a:	4293      	cmp	r3, r2
  40429c:	f300 8255 	bgt.w	40474a <_zbar_decode_code39+0x72e>
}

static inline int code39_postprocess (zbar_decoder_t *dcode)
{
    code39_decoder_t *dcode39 = &dcode->code39;
    dcode->direction = 1 - 2 * dcode39->direction;
  4042a0:	f894 20ec 	ldrb.w	r2, [r4, #236]	; 0xec
  4042a4:	f002 0301 	and.w	r3, r2, #1
  4042a8:	005b      	lsls	r3, r3, #1
  4042aa:	f1c3 0301 	rsb	r3, r3, #1
  4042ae:	64e3      	str	r3, [r4, #76]	; 0x4c
    int i;
    if(dcode39->direction) {
  4042b0:	f012 0f01 	tst.w	r2, #1
  4042b4:	d01d      	beq.n	4042f2 <_zbar_decode_code39+0x2d6>
        /* reverse buffer */
        dbprintf(2, " (rev)");
        for(i = 0; i < dcode39->character / 2; i++) {
  4042b6:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
  4042ba:	f343 134b 	sbfx	r3, r3, #5, #12
  4042be:	b29a      	uxth	r2, r3
  4042c0:	b21b      	sxth	r3, r3
  4042c2:	2b01      	cmp	r3, #1
  4042c4:	dd15      	ble.n	4042f2 <_zbar_decode_code39+0x2d6>
  4042c6:	2100      	movs	r1, #0
            unsigned j = dcode39->character - 1 - i;
  4042c8:	b213      	sxth	r3, r2
  4042ca:	3b01      	subs	r3, #1
  4042cc:	1a5b      	subs	r3, r3, r1
            char code = dcode->buf[i];
  4042ce:	6de2      	ldr	r2, [r4, #92]	; 0x5c
  4042d0:	5c50      	ldrb	r0, [r2, r1]
            dcode->buf[i] = dcode->buf[j];
  4042d2:	5cd5      	ldrb	r5, [r2, r3]
  4042d4:	5455      	strb	r5, [r2, r1]
            dcode->buf[j] = code;
  4042d6:	6de2      	ldr	r2, [r4, #92]	; 0x5c
  4042d8:	54d0      	strb	r0, [r2, r3]
    dcode->direction = 1 - 2 * dcode39->direction;
    int i;
    if(dcode39->direction) {
        /* reverse buffer */
        dbprintf(2, " (rev)");
        for(i = 0; i < dcode39->character / 2; i++) {
  4042da:	3101      	adds	r1, #1
  4042dc:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
  4042e0:	f343 134b 	sbfx	r3, r3, #5, #12
  4042e4:	b29a      	uxth	r2, r3
  4042e6:	b21b      	sxth	r3, r3
  4042e8:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
  4042ec:	ebb1 0f63 	cmp.w	r1, r3, asr #1
  4042f0:	dbea      	blt.n	4042c8 <_zbar_decode_code39+0x2ac>
            char code = dcode->buf[i];
            dcode->buf[i] = dcode->buf[j];
            dcode->buf[j] = code;
        }
    }
    for(i = 0; i < dcode39->character; i++)
  4042f2:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
  4042f6:	f343 134b 	sbfx	r3, r3, #5, #12
  4042fa:	b299      	uxth	r1, r3
  4042fc:	b21b      	sxth	r3, r3
  4042fe:	2b00      	cmp	r3, #0
  404300:	dd14      	ble.n	40432c <_zbar_decode_code39+0x310>
  404302:	2500      	movs	r5, #0
        dcode->buf[i] = ((dcode->buf[i] < 0x2b)
  404304:	263f      	movs	r6, #63	; 0x3f
  404306:	482c      	ldr	r0, [pc, #176]	; (4043b8 <_zbar_decode_code39+0x39c>)
  404308:	6de3      	ldr	r3, [r4, #92]	; 0x5c
  40430a:	195a      	adds	r2, r3, r5
  40430c:	5d5b      	ldrb	r3, [r3, r5]
  40430e:	2b2a      	cmp	r3, #42	; 0x2a
  404310:	bf94      	ite	ls
  404312:	5cc3      	ldrbls	r3, [r0, r3]
  404314:	4633      	movhi	r3, r6
  404316:	7013      	strb	r3, [r2, #0]
            char code = dcode->buf[i];
            dcode->buf[i] = dcode->buf[j];
            dcode->buf[j] = code;
        }
    }
    for(i = 0; i < dcode39->character; i++)
  404318:	3501      	adds	r5, #1
  40431a:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
  40431e:	f343 134b 	sbfx	r3, r3, #5, #12
  404322:	b299      	uxth	r1, r3
  404324:	b21b      	sxth	r3, r3
  404326:	429d      	cmp	r5, r3
  404328:	dbee      	blt.n	404308 <_zbar_decode_code39+0x2ec>
  40432a:	e000      	b.n	40432e <_zbar_decode_code39+0x312>
  40432c:	2500      	movs	r5, #0
        dcode->buf[i] = ((dcode->buf[i] < 0x2b)
                         ? code39_characters[(unsigned)dcode->buf[i]]
                         : '?');
    zassert(i < dcode->buf_alloc, -1, "i=%02x %s\n", i,
  40432e:	6d63      	ldr	r3, [r4, #84]	; 0x54
  404330:	429d      	cmp	r5, r3
  404332:	d31b      	bcc.n	40436c <_zbar_decode_code39+0x350>
  404334:	4b15      	ldr	r3, [pc, #84]	; (40438c <_zbar_decode_code39+0x370>)
  404336:	681b      	ldr	r3, [r3, #0]
  404338:	68de      	ldr	r6, [r3, #12]
  40433a:	6de0      	ldr	r0, [r4, #92]	; 0x5c
  40433c:	b209      	sxth	r1, r1
  40433e:	4b1f      	ldr	r3, [pc, #124]	; (4043bc <_zbar_decode_code39+0x3a0>)
  404340:	4798      	blx	r3
  404342:	4b1f      	ldr	r3, [pc, #124]	; (4043c0 <_zbar_decode_code39+0x3a4>)
  404344:	9300      	str	r3, [sp, #0]
  404346:	4b1f      	ldr	r3, [pc, #124]	; (4043c4 <_zbar_decode_code39+0x3a8>)
  404348:	9301      	str	r3, [sp, #4]
  40434a:	9502      	str	r5, [sp, #8]
  40434c:	9003      	str	r0, [sp, #12]
  40434e:	4630      	mov	r0, r6
  404350:	491d      	ldr	r1, [pc, #116]	; (4043c8 <_zbar_decode_code39+0x3ac>)
  404352:	4a12      	ldr	r2, [pc, #72]	; (40439c <_zbar_decode_code39+0x380>)
  404354:	23ec      	movs	r3, #236	; 0xec
  404356:	4d12      	ldr	r5, [pc, #72]	; (4043a0 <_zbar_decode_code39+0x384>)
  404358:	47a8      	blx	r5
            else if(!code39_postprocess(dcode)) {
                /* FIXME checksum */
                dbprintf(2, " [valid end]\n");
                sym = ZBAR_CODE39;
            }
            dcode39->character = -1;
  40435a:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
  40435e:	f04f 32ff 	mov.w	r2, #4294967295
  404362:	f362 1350 	bfi	r3, r2, #5, #12
  404366:	f8c4 30ec 	str.w	r3, [r4, #236]	; 0xec
  40436a:	e02f      	b.n	4043cc <_zbar_decode_code39+0x3b0>
        dcode->buf[i] = ((dcode->buf[i] < 0x2b)
                         ? code39_characters[(unsigned)dcode->buf[i]]
                         : '?');
    zassert(i < dcode->buf_alloc, -1, "i=%02x %s\n", i,
            _zbar_decoder_buf_dump(dcode->buf, dcode39->character));
    dcode->buflen = i;
  40436c:	65a5      	str	r5, [r4, #88]	; 0x58
    dcode->buf[i] = '\0';
  40436e:	6de2      	ldr	r2, [r4, #92]	; 0x5c
  404370:	2300      	movs	r3, #0
  404372:	5553      	strb	r3, [r2, r5]
    dcode->modifiers = 0;
  404374:	64a3      	str	r3, [r4, #72]	; 0x48
            else if(!code39_postprocess(dcode)) {
                /* FIXME checksum */
                dbprintf(2, " [valid end]\n");
                sym = ZBAR_CODE39;
            }
            dcode39->character = -1;
  404376:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
  40437a:	f04f 32ff 	mov.w	r2, #4294967295
  40437e:	f362 1350 	bfi	r3, r2, #5, #12
  404382:	f8c4 30ec 	str.w	r3, [r4, #236]	; 0xec
                     dcode39->character > CFG(*dcode39, ZBAR_CFG_MAX_LEN)))
                dbprintf(2, " [invalid len]\n");
            else if(!code39_postprocess(dcode)) {
                /* FIXME checksum */
                dbprintf(2, " [valid end]\n");
                sym = ZBAR_CODE39;
  404386:	2027      	movs	r0, #39	; 0x27
  404388:	e21f      	b.n	4047ca <_zbar_decode_code39+0x7ae>
  40438a:	bf00      	nop
  40438c:	20000440 	.word	0x20000440
  404390:	004111c4 	.word	0x004111c4
  404394:	00411038 	.word	0x00411038
  404398:	00410fd8 	.word	0x00410fd8
  40439c:	00411014 	.word	0x00411014
  4043a0:	004083a9 	.word	0x004083a9
  4043a4:	00410fb8 	.word	0x00410fb8
  4043a8:	00411088 	.word	0x00411088
  4043ac:	00411044 	.word	0x00411044
  4043b0:	0041112c 	.word	0x0041112c
  4043b4:	0001ffe0 	.word	0x0001ffe0
  4043b8:	00410f68 	.word	0x00410f68
  4043bc:	00404c05 	.word	0x00404c05
  4043c0:	00410fa4 	.word	0x00410fa4
  4043c4:	004110cc 	.word	0x004110cc
  4043c8:	00411094 	.word	0x00411094

/* check and release shared state lock */
static inline char release_lock (zbar_decoder_t *dcode,
                                 zbar_symbol_type_t req)
{
    zassert(dcode->lock == req, 1, "lock=%d req=%d\n",
  4043cc:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
  4043d0:	2b27      	cmp	r3, #39	; 0x27
  4043d2:	d011      	beq.n	4043f8 <_zbar_decode_code39+0x3dc>
  4043d4:	4ab1      	ldr	r2, [pc, #708]	; (40469c <_zbar_decode_code39+0x680>)
  4043d6:	6812      	ldr	r2, [r2, #0]
  4043d8:	68d0      	ldr	r0, [r2, #12]
  4043da:	4ab1      	ldr	r2, [pc, #708]	; (4046a0 <_zbar_decode_code39+0x684>)
  4043dc:	9200      	str	r2, [sp, #0]
  4043de:	4ab1      	ldr	r2, [pc, #708]	; (4046a4 <_zbar_decode_code39+0x688>)
  4043e0:	9201      	str	r2, [sp, #4]
  4043e2:	9302      	str	r3, [sp, #8]
  4043e4:	2327      	movs	r3, #39	; 0x27
  4043e6:	9303      	str	r3, [sp, #12]
  4043e8:	49af      	ldr	r1, [pc, #700]	; (4046a8 <_zbar_decode_code39+0x68c>)
  4043ea:	4ab0      	ldr	r2, [pc, #704]	; (4046ac <_zbar_decode_code39+0x690>)
  4043ec:	f240 1307 	movw	r3, #263	; 0x107
  4043f0:	4caf      	ldr	r4, [pc, #700]	; (4046b0 <_zbar_decode_code39+0x694>)
  4043f2:	47a0      	blx	r4
            }
            dcode39->character = -1;
            if(!sym)
                release_lock(dcode, ZBAR_CODE39);
            return(sym);
  4043f4:	2000      	movs	r0, #0
  4043f6:	e1e8      	b.n	4047ca <_zbar_decode_code39+0x7ae>
            dcode->lock, req);
    dcode->lock = 0;
  4043f8:	2000      	movs	r0, #0
  4043fa:	f8a4 0046 	strh.w	r0, [r4, #70]	; 0x46
  4043fe:	e1e4      	b.n	4047ca <_zbar_decode_code39+0x7ae>

/* check and release shared state lock */
static inline char release_lock (zbar_decoder_t *dcode,
                                 zbar_symbol_type_t req)
{
    zassert(dcode->lock == req, 1, "lock=%d req=%d\n",
  404400:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
  404404:	2b27      	cmp	r3, #39	; 0x27
  404406:	d010      	beq.n	40442a <_zbar_decode_code39+0x40e>
  404408:	4aa4      	ldr	r2, [pc, #656]	; (40469c <_zbar_decode_code39+0x680>)
  40440a:	6812      	ldr	r2, [r2, #0]
  40440c:	68d0      	ldr	r0, [r2, #12]
  40440e:	4aa4      	ldr	r2, [pc, #656]	; (4046a0 <_zbar_decode_code39+0x684>)
  404410:	9200      	str	r2, [sp, #0]
  404412:	4aa4      	ldr	r2, [pc, #656]	; (4046a4 <_zbar_decode_code39+0x688>)
  404414:	9201      	str	r2, [sp, #4]
  404416:	9302      	str	r3, [sp, #8]
  404418:	2327      	movs	r3, #39	; 0x27
  40441a:	9303      	str	r3, [sp, #12]
  40441c:	49a2      	ldr	r1, [pc, #648]	; (4046a8 <_zbar_decode_code39+0x68c>)
  40441e:	4aa3      	ldr	r2, [pc, #652]	; (4046ac <_zbar_decode_code39+0x690>)
  404420:	f240 1307 	movw	r3, #263	; 0x107
  404424:	4da2      	ldr	r5, [pc, #648]	; (4046b0 <_zbar_decode_code39+0x694>)
  404426:	47a8      	blx	r5
  404428:	e002      	b.n	404430 <_zbar_decode_code39+0x414>
            dcode->lock, req);
    dcode->lock = 0;
  40442a:	2300      	movs	r3, #0
  40442c:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
        if(space > dcode39->width / 2) {
            /* inter-character space check failure */
            dbprintf(2, " ics>%d [invalid ics]", dcode39->width);
            if(dcode39->character)
                release_lock(dcode, ZBAR_CODE39);
            dcode39->character = -1;
  404430:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
  404434:	f04f 32ff 	mov.w	r2, #4294967295
  404438:	f362 1350 	bfi	r3, r2, #5, #12
  40443c:	f8c4 30ec 	str.w	r3, [r4, #236]	; 0xec
        }
        dcode39->element = 0;
  404440:	f894 30ec 	ldrb.w	r3, [r4, #236]	; 0xec
  404444:	f36f 0344 	bfc	r3, #1, #4
  404448:	f884 30ec 	strb.w	r3, [r4, #236]	; 0xec
        dbprintf(2, "\n");
        return(ZBAR_NONE);
  40444c:	2000      	movs	r0, #0
  40444e:	e1bc      	b.n	4047ca <_zbar_decode_code39+0x7ae>
    }

    dbprintf(2, " s=%d ", dcode39->s9);
    if(!check_width(dcode39->width, dcode39->s9)) {
  404450:	f8d4 30f4 	ldr.w	r3, [r4, #244]	; 0xf4
static inline int
check_width (unsigned ref,
             unsigned w)
{
    unsigned dref = ref;
    ref *= 4;
  404454:	009d      	lsls	r5, r3, #2
    w *= 4;
  404456:	0091      	lsls	r1, r2, #2
    return(ref - dref <= w && w <= ref + dref);
  404458:	ebc3 0e05 	rsb	lr, r3, r5
  40445c:	4571      	cmp	r1, lr
  40445e:	f0c0 818b 	bcc.w	404778 <_zbar_decode_code39+0x75c>
  404462:	442b      	add	r3, r5
  404464:	4299      	cmp	r1, r3
  404466:	f240 818f 	bls.w	404788 <_zbar_decode_code39+0x76c>
  40446a:	e185      	b.n	404778 <_zbar_decode_code39+0x75c>

/* check and release shared state lock */
static inline char release_lock (zbar_decoder_t *dcode,
                                 zbar_symbol_type_t req)
{
    zassert(dcode->lock == req, 1, "lock=%d req=%d\n",
  40446c:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
  404470:	2b27      	cmp	r3, #39	; 0x27
  404472:	d010      	beq.n	404496 <_zbar_decode_code39+0x47a>
  404474:	4a89      	ldr	r2, [pc, #548]	; (40469c <_zbar_decode_code39+0x680>)
  404476:	6812      	ldr	r2, [r2, #0]
  404478:	68d0      	ldr	r0, [r2, #12]
  40447a:	4a89      	ldr	r2, [pc, #548]	; (4046a0 <_zbar_decode_code39+0x684>)
  40447c:	9200      	str	r2, [sp, #0]
  40447e:	4a89      	ldr	r2, [pc, #548]	; (4046a4 <_zbar_decode_code39+0x688>)
  404480:	9201      	str	r2, [sp, #4]
  404482:	9302      	str	r3, [sp, #8]
  404484:	2327      	movs	r3, #39	; 0x27
  404486:	9303      	str	r3, [sp, #12]
  404488:	4987      	ldr	r1, [pc, #540]	; (4046a8 <_zbar_decode_code39+0x68c>)
  40448a:	4a88      	ldr	r2, [pc, #544]	; (4046ac <_zbar_decode_code39+0x690>)
  40448c:	f240 1307 	movw	r3, #263	; 0x107
  404490:	4d87      	ldr	r5, [pc, #540]	; (4046b0 <_zbar_decode_code39+0x694>)
  404492:	47a8      	blx	r5
  404494:	e002      	b.n	40449c <_zbar_decode_code39+0x480>
            dcode->lock, req);
    dcode->lock = 0;
  404496:	2300      	movs	r3, #0
  404498:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
    dbprintf(2, " s=%d ", dcode39->s9);
    if(!check_width(dcode39->width, dcode39->s9)) {
        dbprintf(2, " [width]\n");
        if(dcode39->character)
            release_lock(dcode, ZBAR_CODE39);
        dcode39->character = -1;
  40449c:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
  4044a0:	f04f 32ff 	mov.w	r2, #4294967295
  4044a4:	f362 1350 	bfi	r3, r2, #5, #12
  4044a8:	f8c4 30ec 	str.w	r3, [r4, #236]	; 0xec
        return(ZBAR_NONE);
  4044ac:	2000      	movs	r0, #0
  4044ae:	e18c      	b.n	4047ca <_zbar_decode_code39+0x7ae>

static inline signed char code39_decode9 (zbar_decoder_t *dcode)
{
    code39_decoder_t *dcode39 = &dcode->code39;

    if(dcode39->s9 < 9)
  4044b0:	f04f 0e00 	mov.w	lr, #0
  4044b4:	4675      	mov	r5, lr
  4044b6:	ebce 0307 	rsb	r3, lr, r7

/* retrieve i-th previous element width */
static inline unsigned get_width (const zbar_decoder_t *dcode,
                                  unsigned char offset)
{
    return(dcode->w[(dcode->idx - offset) & (DECODE_WINDOW - 1)]);
  4044ba:	f003 030f 	and.w	r3, r3, #15
  4044be:	eb04 0383 	add.w	r3, r4, r3, lsl #2
{
    /* result is encoded number of units - 2
     * (for use as zero based index)
     * or -1 if invalid
     */
    unsigned char E = ((e * n * 2 + 1) / s - 3) / 2;
  4044c2:	685b      	ldr	r3, [r3, #4]
  4044c4:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
  4044c8:	011b      	lsls	r3, r3, #4
  4044ca:	3301      	adds	r3, #1
  4044cc:	fbb3 f3f2 	udiv	r3, r3, r2
  4044d0:	3b03      	subs	r3, #3
    return((E >= n - 3) ? -1 : E);
  4044d2:	f3c3 0347 	ubfx	r3, r3, #1, #8
  4044d6:	2b44      	cmp	r3, #68	; 0x44
  4044d8:	f200 8159 	bhi.w	40478e <_zbar_decode_code39+0x772>

static inline unsigned char code39_decode1 (unsigned char enc,
                                            unsigned e,
                                            unsigned s)
{
    unsigned char E = decode_e(e, s, 72);
  4044dc:	b2db      	uxtb	r3, r3
    if(E > 18)
  4044de:	2b12      	cmp	r3, #18
  4044e0:	f200 816b 	bhi.w	4047ba <_zbar_decode_code39+0x79e>
        return(0xff);
    enc <<= 1;
  4044e4:	006d      	lsls	r5, r5, #1
  4044e6:	b2ed      	uxtb	r5, r5
    if(E > 6) {
  4044e8:	2b06      	cmp	r3, #6
        enc |= 1;
  4044ea:	bf88      	it	hi
  4044ec:	f045 0501 	orrhi.w	r5, r5, #1

    /* threshold bar width ratios */
    unsigned char i, enc = 0;
    for(i = 0; i < 5; i++) {
        enc = code39_decode1(enc, get_width(dcode, i), dcode39->s9);
        if(enc == 0xff)
  4044f0:	2dff      	cmp	r5, #255	; 0xff
  4044f2:	f000 814c 	beq.w	40478e <_zbar_decode_code39+0x772>
  4044f6:	f10e 0101 	add.w	r1, lr, #1
  4044fa:	b2c9      	uxtb	r1, r1
  4044fc:	f10e 0e01 	add.w	lr, lr, #1
    if(dcode39->s9 < 9)
        return(-1);

    /* threshold bar width ratios */
    unsigned char i, enc = 0;
    for(i = 0; i < 5; i++) {
  404500:	f1be 0f05 	cmp.w	lr, #5
  404504:	d1d7      	bne.n	4044b6 <_zbar_decode_code39+0x49a>
  404506:	468e      	mov	lr, r1
        enc = code39_decode1(enc, get_width(dcode, i), dcode39->s9);
        if(enc == 0xff)
            return(-1);
    }
    zassert(enc < 0x20, -1, " enc=%x s9=%x\n", enc, dcode39->s9);
  404508:	2d1f      	cmp	r5, #31
  40450a:	d90e      	bls.n	40452a <_zbar_decode_code39+0x50e>
  40450c:	4b63      	ldr	r3, [pc, #396]	; (40469c <_zbar_decode_code39+0x680>)
  40450e:	681b      	ldr	r3, [r3, #0]
  404510:	68d8      	ldr	r0, [r3, #12]
  404512:	4b68      	ldr	r3, [pc, #416]	; (4046b4 <_zbar_decode_code39+0x698>)
  404514:	9300      	str	r3, [sp, #0]
  404516:	4b68      	ldr	r3, [pc, #416]	; (4046b8 <_zbar_decode_code39+0x69c>)
  404518:	9301      	str	r3, [sp, #4]
  40451a:	9502      	str	r5, [sp, #8]
  40451c:	9203      	str	r2, [sp, #12]
  40451e:	4967      	ldr	r1, [pc, #412]	; (4046bc <_zbar_decode_code39+0x6a0>)
  404520:	4a67      	ldr	r2, [pc, #412]	; (4046c0 <_zbar_decode_code39+0x6a4>)
  404522:	23a0      	movs	r3, #160	; 0xa0
  404524:	4d62      	ldr	r5, [pc, #392]	; (4046b0 <_zbar_decode_code39+0x694>)
  404526:	47a8      	blx	r5
  404528:	e131      	b.n	40478e <_zbar_decode_code39+0x772>

    /* lookup first 5 encoded widths for coarse decode */
    unsigned char idx = code39_hi[enc];
  40452a:	4b66      	ldr	r3, [pc, #408]	; (4046c4 <_zbar_decode_code39+0x6a8>)
  40452c:	5d5f      	ldrb	r7, [r3, r5]
    if(idx == 0xff)
  40452e:	2fff      	cmp	r7, #255	; 0xff
  404530:	f000 812d 	beq.w	40478e <_zbar_decode_code39+0x772>
        return(-1);

    /* encode remaining widths (NB first encoded width is lost) */
    for(; i < 9; i++) {
  404534:	2908      	cmp	r1, #8
  404536:	d822      	bhi.n	40457e <_zbar_decode_code39+0x562>

/* retrieve i-th previous element width */
static inline unsigned get_width (const zbar_decoder_t *dcode,
                                  unsigned char offset)
{
    return(dcode->w[(dcode->idx - offset) & (DECODE_WINDOW - 1)]);
  404538:	1a43      	subs	r3, r0, r1
  40453a:	f003 030f 	and.w	r3, r3, #15
  40453e:	eb04 0383 	add.w	r3, r4, r3, lsl #2
{
    /* result is encoded number of units - 2
     * (for use as zero based index)
     * or -1 if invalid
     */
    unsigned char E = ((e * n * 2 + 1) / s - 3) / 2;
  404542:	685b      	ldr	r3, [r3, #4]
  404544:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
  404548:	011b      	lsls	r3, r3, #4
  40454a:	3301      	adds	r3, #1
  40454c:	fbb3 f3f2 	udiv	r3, r3, r2
  404550:	3b03      	subs	r3, #3
    return((E >= n - 3) ? -1 : E);
  404552:	f3c3 0347 	ubfx	r3, r3, #1, #8
  404556:	2b44      	cmp	r3, #68	; 0x44
  404558:	f200 8119 	bhi.w	40478e <_zbar_decode_code39+0x772>

static inline unsigned char code39_decode1 (unsigned char enc,
                                            unsigned e,
                                            unsigned s)
{
    unsigned char E = decode_e(e, s, 72);
  40455c:	b2db      	uxtb	r3, r3
    if(E > 18)
  40455e:	2b12      	cmp	r3, #18
  404560:	f200 812b 	bhi.w	4047ba <_zbar_decode_code39+0x79e>
        return(0xff);
    enc <<= 1;
  404564:	006d      	lsls	r5, r5, #1
  404566:	b2ed      	uxtb	r5, r5
    if(E > 6) {
  404568:	2b06      	cmp	r3, #6
        enc |= 1;
  40456a:	bf88      	it	hi
  40456c:	f045 0501 	orrhi.w	r5, r5, #1
        return(-1);

    /* encode remaining widths (NB first encoded width is lost) */
    for(; i < 9; i++) {
        enc = code39_decode1(enc, get_width(dcode, i), dcode39->s9);
        if(enc == 0xff)
  404570:	2dff      	cmp	r5, #255	; 0xff
  404572:	f000 810c 	beq.w	40478e <_zbar_decode_code39+0x772>
    unsigned char idx = code39_hi[enc];
    if(idx == 0xff)
        return(-1);

    /* encode remaining widths (NB first encoded width is lost) */
    for(; i < 9; i++) {
  404576:	3101      	adds	r1, #1
  404578:	b2c9      	uxtb	r1, r1
  40457a:	2909      	cmp	r1, #9
  40457c:	d1dc      	bne.n	404538 <_zbar_decode_code39+0x51c>
        enc = code39_decode1(enc, get_width(dcode, i), dcode39->s9);
        if(enc == 0xff)
            return(-1);
    }

    if((idx & 0xc0) == 0x80)
  40457e:	f007 03c0 	and.w	r3, r7, #192	; 0xc0
  404582:	2b80      	cmp	r3, #128	; 0x80
  404584:	d105      	bne.n	404592 <_zbar_decode_code39+0x576>
        idx = (idx & 0x3f) + ((enc >> 3) & 1);
  404586:	f007 073f 	and.w	r7, r7, #63	; 0x3f
  40458a:	f3c5 03c0 	ubfx	r3, r5, #3, #1
  40458e:	441f      	add	r7, r3
  404590:	e00d      	b.n	4045ae <_zbar_decode_code39+0x592>
    else if((idx & 0xc0) == 0xc0)
  404592:	2bc0      	cmp	r3, #192	; 0xc0
  404594:	d105      	bne.n	4045a2 <_zbar_decode_code39+0x586>
        idx = (idx & 0x3f) + ((enc >> 2) & 1);
  404596:	f007 073f 	and.w	r7, r7, #63	; 0x3f
  40459a:	f3c5 0380 	ubfx	r3, r5, #2, #1
  40459e:	441f      	add	r7, r3
  4045a0:	e005      	b.n	4045ae <_zbar_decode_code39+0x592>
    else if(idx & 0xc0)
  4045a2:	b123      	cbz	r3, 4045ae <_zbar_decode_code39+0x592>
        idx = (idx & 0x3f) + ((enc >> 2) & 3);
  4045a4:	f007 073f 	and.w	r7, r7, #63	; 0x3f
  4045a8:	f3c5 0381 	ubfx	r3, r5, #2, #2
  4045ac:	441f      	add	r7, r3
    zassert(idx < 0x2c, -1, " idx=%x enc=%x s9=%x\n", idx, enc, dcode39->s9);
  4045ae:	2f2b      	cmp	r7, #43	; 0x2b
  4045b0:	d90f      	bls.n	4045d2 <_zbar_decode_code39+0x5b6>
  4045b2:	4b3a      	ldr	r3, [pc, #232]	; (40469c <_zbar_decode_code39+0x680>)
  4045b4:	681b      	ldr	r3, [r3, #0]
  4045b6:	493f      	ldr	r1, [pc, #252]	; (4046b4 <_zbar_decode_code39+0x698>)
  4045b8:	9100      	str	r1, [sp, #0]
  4045ba:	4943      	ldr	r1, [pc, #268]	; (4046c8 <_zbar_decode_code39+0x6ac>)
  4045bc:	9101      	str	r1, [sp, #4]
  4045be:	9702      	str	r7, [sp, #8]
  4045c0:	9503      	str	r5, [sp, #12]
  4045c2:	9204      	str	r2, [sp, #16]
  4045c4:	68d8      	ldr	r0, [r3, #12]
  4045c6:	4941      	ldr	r1, [pc, #260]	; (4046cc <_zbar_decode_code39+0x6b0>)
  4045c8:	4a3d      	ldr	r2, [pc, #244]	; (4046c0 <_zbar_decode_code39+0x6a4>)
  4045ca:	23b4      	movs	r3, #180	; 0xb4
  4045cc:	4d38      	ldr	r5, [pc, #224]	; (4046b0 <_zbar_decode_code39+0x694>)
  4045ce:	47a8      	blx	r5
  4045d0:	e0dd      	b.n	40478e <_zbar_decode_code39+0x772>

    const char39_t *c = &code39_encodings[idx];
  4045d2:	463b      	mov	r3, r7
    dbprintf(2, " i=%02x chk=%02x c=%02x/%02x", idx, c->chk, c->fwd, c->rev);
    if(enc != c->chk)
  4045d4:	eb07 0747 	add.w	r7, r7, r7, lsl #1
  4045d8:	493d      	ldr	r1, [pc, #244]	; (4046d0 <_zbar_decode_code39+0x6b4>)
  4045da:	5dc9      	ldrb	r1, [r1, r7]
  4045dc:	42a9      	cmp	r1, r5
  4045de:	f040 80d6 	bne.w	40478e <_zbar_decode_code39+0x772>
        return(-1);

    dcode39->width = dcode39->s9;
  4045e2:	f8c4 20f4 	str.w	r2, [r4, #244]	; 0xf4
    return((dcode39->direction) ? c->rev : c->fwd);
  4045e6:	f016 0f01 	tst.w	r6, #1
  4045ea:	d004      	beq.n	4045f6 <_zbar_decode_code39+0x5da>
  4045ec:	463b      	mov	r3, r7
  4045ee:	4a38      	ldr	r2, [pc, #224]	; (4046d0 <_zbar_decode_code39+0x6b4>)
  4045f0:	4413      	add	r3, r2
  4045f2:	785e      	ldrb	r6, [r3, #1]
  4045f4:	e004      	b.n	404600 <_zbar_decode_code39+0x5e4>
  4045f6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
  4045fa:	4a35      	ldr	r2, [pc, #212]	; (4046d0 <_zbar_decode_code39+0x6b4>)
  4045fc:	4413      	add	r3, r2
  4045fe:	789e      	ldrb	r6, [r3, #2]

    signed char c = code39_decode9(dcode);
    dbprintf(2, " c=%d", c);

    /* lock shared resources */
    if(!dcode39->character && acquire_lock(dcode, ZBAR_CODE39)) {
  404600:	f8d4 20ec 	ldr.w	r2, [r4, #236]	; 0xec
  404604:	4b33      	ldr	r3, [pc, #204]	; (4046d4 <_zbar_decode_code39+0x6b8>)
  404606:	4013      	ands	r3, r2
  404608:	b97b      	cbnz	r3, 40462a <_zbar_decode_code39+0x60e>
  40460a:	e002      	b.n	404612 <_zbar_decode_code39+0x5f6>
  40460c:	26ff      	movs	r6, #255	; 0xff
  40460e:	e000      	b.n	404612 <_zbar_decode_code39+0x5f6>
  404610:	26ff      	movs	r6, #255	; 0xff

/* acquire shared state lock */
static inline char acquire_lock (zbar_decoder_t *dcode,
                                 zbar_symbol_type_t req)
{
    if(dcode->lock) {
  404612:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
  404616:	2b00      	cmp	r3, #0
  404618:	f040 80c1 	bne.w	40479e <_zbar_decode_code39+0x782>
        dbprintf(2, " [locked %d]\n", dcode->lock);
        return(1);
    }
    dcode->lock = req;
  40461c:	2327      	movs	r3, #39	; 0x27
  40461e:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
        dcode39->character = -1;
        return(ZBAR_PARTIAL);
    }

    if(c < 0 || size_buf(dcode, dcode39->character + 1)) {
  404622:	f016 0f80 	tst.w	r6, #128	; 0x80
  404626:	d003      	beq.n	404630 <_zbar_decode_code39+0x614>
  404628:	e058      	b.n	4046dc <_zbar_decode_code39+0x6c0>
  40462a:	f016 0f80 	tst.w	r6, #128	; 0x80
  40462e:	d11f      	bne.n	404670 <_zbar_decode_code39+0x654>
  404630:	f8d4 50ec 	ldr.w	r5, [r4, #236]	; 0xec
  404634:	f345 154b 	sbfx	r5, r5, #5, #12
  404638:	3501      	adds	r5, #1
/* ensure output buffer has sufficient allocation for request */
static inline char size_buf (zbar_decoder_t *dcode,
                             unsigned len)
{
    unsigned char *buf;
    if(len <= BUFFER_MIN)
  40463a:	2d20      	cmp	r5, #32
  40463c:	f240 80b9 	bls.w	4047b2 <_zbar_decode_code39+0x796>
        return(0);
    if(len < dcode->buf_alloc)
  404640:	6d63      	ldr	r3, [r4, #84]	; 0x54
  404642:	42ab      	cmp	r3, r5
  404644:	f200 80b5 	bhi.w	4047b2 <_zbar_decode_code39+0x796>
        /* FIXME size reduction heuristic? */
        return(0);
    if(len > BUFFER_MAX)
  404648:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
  40464c:	d810      	bhi.n	404670 <_zbar_decode_code39+0x654>
        return(1);
    if(len < dcode->buf_alloc + BUFFER_INCR) {
  40464e:	3310      	adds	r3, #16
  404650:	429d      	cmp	r5, r3
  404652:	d205      	bcs.n	404660 <_zbar_decode_code39+0x644>
  404654:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
  404658:	bf28      	it	cs
  40465a:	f44f 7380 	movcs.w	r3, #256	; 0x100
  40465e:	461d      	mov	r5, r3
        len = dcode->buf_alloc + BUFFER_INCR;
        if(len > BUFFER_MAX)
            len = BUFFER_MAX;
    }
    buf = realloc(dcode->buf, len);
  404660:	6de0      	ldr	r0, [r4, #92]	; 0x5c
  404662:	4629      	mov	r1, r5
  404664:	4b1c      	ldr	r3, [pc, #112]	; (4046d8 <_zbar_decode_code39+0x6bc>)
  404666:	4798      	blx	r3
    if(!buf)
  404668:	b110      	cbz	r0, 404670 <_zbar_decode_code39+0x654>
        return(1);
    dcode->buf = buf;
  40466a:	65e0      	str	r0, [r4, #92]	; 0x5c
    dcode->buf_alloc = len;
  40466c:	6565      	str	r5, [r4, #84]	; 0x54
  40466e:	e0a0      	b.n	4047b2 <_zbar_decode_code39+0x796>

/* check and release shared state lock */
static inline char release_lock (zbar_decoder_t *dcode,
                                 zbar_symbol_type_t req)
{
    zassert(dcode->lock == req, 1, "lock=%d req=%d\n",
  404670:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
  404674:	2b27      	cmp	r3, #39	; 0x27
  404676:	d031      	beq.n	4046dc <_zbar_decode_code39+0x6c0>
  404678:	4a08      	ldr	r2, [pc, #32]	; (40469c <_zbar_decode_code39+0x680>)
  40467a:	6812      	ldr	r2, [r2, #0]
  40467c:	68d0      	ldr	r0, [r2, #12]
  40467e:	4a08      	ldr	r2, [pc, #32]	; (4046a0 <_zbar_decode_code39+0x684>)
  404680:	9200      	str	r2, [sp, #0]
  404682:	4a08      	ldr	r2, [pc, #32]	; (4046a4 <_zbar_decode_code39+0x688>)
  404684:	9201      	str	r2, [sp, #4]
  404686:	9302      	str	r3, [sp, #8]
  404688:	2327      	movs	r3, #39	; 0x27
  40468a:	9303      	str	r3, [sp, #12]
  40468c:	4906      	ldr	r1, [pc, #24]	; (4046a8 <_zbar_decode_code39+0x68c>)
  40468e:	4a07      	ldr	r2, [pc, #28]	; (4046ac <_zbar_decode_code39+0x690>)
  404690:	f240 1307 	movw	r3, #263	; 0x107
  404694:	4d06      	ldr	r5, [pc, #24]	; (4046b0 <_zbar_decode_code39+0x694>)
  404696:	47a8      	blx	r5
  404698:	e023      	b.n	4046e2 <_zbar_decode_code39+0x6c6>
  40469a:	bf00      	nop
  40469c:	20000440 	.word	0x20000440
  4046a0:	00410f94 	.word	0x00410f94
  4046a4:	00410ba8 	.word	0x00410ba8
  4046a8:	00410b3c 	.word	0x00410b3c
  4046ac:	00410b78 	.word	0x00410b78
  4046b0:	004083a9 	.word	0x004083a9
  4046b4:	004111c4 	.word	0x004111c4
  4046b8:	00411038 	.word	0x00411038
  4046bc:	00410fd8 	.word	0x00410fd8
  4046c0:	00411014 	.word	0x00411014
  4046c4:	00410fb8 	.word	0x00410fb8
  4046c8:	00411088 	.word	0x00411088
  4046cc:	00411044 	.word	0x00411044
  4046d0:	0041112c 	.word	0x0041112c
  4046d4:	0001ffe0 	.word	0x0001ffe0
  4046d8:	004093c5 	.word	0x004093c5
            dcode->lock, req);
    dcode->lock = 0;
  4046dc:	2300      	movs	r3, #0
  4046de:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
        dbprintf(1, (c < 0) ? " [aborted]\n" : " [overflow]\n");
        release_lock(dcode, ZBAR_CODE39);
        dcode39->character = -1;
  4046e2:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
  4046e6:	f04f 32ff 	mov.w	r2, #4294967295
  4046ea:	f362 1350 	bfi	r3, r2, #5, #12
  4046ee:	f8c4 30ec 	str.w	r3, [r4, #236]	; 0xec
        return(ZBAR_NONE);
  4046f2:	2000      	movs	r0, #0
  4046f4:	e069      	b.n	4047ca <_zbar_decode_code39+0x7ae>
    }
    else {
        zassert(c < 0x2c, ZBAR_NONE, "c=%02x s9=%x\n", c, dcode39->s9);
  4046f6:	4b36      	ldr	r3, [pc, #216]	; (4047d0 <_zbar_decode_code39+0x7b4>)
  4046f8:	681b      	ldr	r3, [r3, #0]
  4046fa:	68d8      	ldr	r0, [r3, #12]
  4046fc:	4b35      	ldr	r3, [pc, #212]	; (4047d4 <_zbar_decode_code39+0x7b8>)
  4046fe:	9300      	str	r3, [sp, #0]
  404700:	4b35      	ldr	r3, [pc, #212]	; (4047d8 <_zbar_decode_code39+0x7bc>)
  404702:	9301      	str	r3, [sp, #4]
  404704:	b276      	sxtb	r6, r6
  404706:	9602      	str	r6, [sp, #8]
  404708:	f8d4 30f0 	ldr.w	r3, [r4, #240]	; 0xf0
  40470c:	9303      	str	r3, [sp, #12]
  40470e:	4933      	ldr	r1, [pc, #204]	; (4047dc <_zbar_decode_code39+0x7c0>)
  404710:	4a33      	ldr	r2, [pc, #204]	; (4047e0 <_zbar_decode_code39+0x7c4>)
  404712:	f240 1351 	movw	r3, #337	; 0x151
  404716:	4c33      	ldr	r4, [pc, #204]	; (4047e4 <_zbar_decode_code39+0x7c8>)
  404718:	47a0      	blx	r4
  40471a:	2000      	movs	r0, #0
  40471c:	e055      	b.n	4047ca <_zbar_decode_code39+0x7ae>
        dbprintf(2, "\n");
    }

    dcode->buf[dcode39->character++] = c;
  40471e:	6de0      	ldr	r0, [r4, #92]	; 0x5c
  404720:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
  404724:	f343 124b 	sbfx	r2, r3, #5, #12
  404728:	f3c2 010b 	ubfx	r1, r2, #0, #12
  40472c:	3101      	adds	r1, #1
  40472e:	f361 1350 	bfi	r3, r1, #5, #12
  404732:	f8c4 30ec 	str.w	r3, [r4, #236]	; 0xec
  404736:	b212      	sxth	r2, r2
  404738:	5486      	strb	r6, [r0, r2]

    return(ZBAR_NONE);
  40473a:	2000      	movs	r0, #0
  40473c:	e045      	b.n	4047ca <_zbar_decode_code39+0x7ae>
    dcode39->s9 -= get_width(dcode, 9);
    dcode39->s9 += get_width(dcode, 0);

    if(dcode39->character < 0) {
        if(get_color(dcode) != ZBAR_BAR)
            return(ZBAR_NONE);
  40473e:	2000      	movs	r0, #0
  404740:	e043      	b.n	4047ca <_zbar_decode_code39+0x7ae>
        dbprintf(2, "      code39:");
        return(code39_decode_start(dcode));
    }

    if(++dcode39->element < 9)
        return(ZBAR_NONE);
  404742:	2000      	movs	r0, #0
  404744:	e041      	b.n	4047ca <_zbar_decode_code39+0x7ae>
    dbprintf(2, " s=%d ", dcode39->s9);

    signed char c = code39_decode9(dcode);
    if(c != 0x19 && c != 0x2b) {
        dbprintf(2, "\n");
        return(ZBAR_NONE);
  404746:	2000      	movs	r0, #0
  404748:	e03f      	b.n	4047ca <_zbar_decode_code39+0x7ae>
            else if(!code39_postprocess(dcode)) {
                /* FIXME checksum */
                dbprintf(2, " [valid end]\n");
                sym = ZBAR_CODE39;
            }
            dcode39->character = -1;
  40474a:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
  40474e:	f04f 32ff 	mov.w	r2, #4294967295
  404752:	f362 1350 	bfi	r3, r2, #5, #12
  404756:	f8c4 30ec 	str.w	r3, [r4, #236]	; 0xec
  40475a:	e637      	b.n	4043cc <_zbar_decode_code39+0x3b0>
            if(!sym)
                release_lock(dcode, ZBAR_CODE39);
            return(sym);
        }
        if(space > dcode39->width / 2) {
  40475c:	f8d4 30f4 	ldr.w	r3, [r4, #244]	; 0xf4
  404760:	ebb5 0f53 	cmp.w	r5, r3, lsr #1
  404764:	f63f ae64 	bhi.w	404430 <_zbar_decode_code39+0x414>
  404768:	e66a      	b.n	404440 <_zbar_decode_code39+0x424>
  40476a:	f8d4 30f4 	ldr.w	r3, [r4, #244]	; 0xf4
  40476e:	ebb5 0f53 	cmp.w	r5, r3, lsr #1
  404772:	f63f ae45 	bhi.w	404400 <_zbar_decode_code39+0x3e4>
  404776:	e663      	b.n	404440 <_zbar_decode_code39+0x424>
    }

    dbprintf(2, " s=%d ", dcode39->s9);
    if(!check_width(dcode39->width, dcode39->s9)) {
        dbprintf(2, " [width]\n");
        if(dcode39->character)
  404778:	f8d4 20ec 	ldr.w	r2, [r4, #236]	; 0xec
  40477c:	4b1a      	ldr	r3, [pc, #104]	; (4047e8 <_zbar_decode_code39+0x7cc>)
  40477e:	4013      	ands	r3, r2
  404780:	2b00      	cmp	r3, #0
  404782:	f43f ae8b 	beq.w	40449c <_zbar_decode_code39+0x480>
  404786:	e671      	b.n	40446c <_zbar_decode_code39+0x450>

static inline signed char code39_decode9 (zbar_decoder_t *dcode)
{
    code39_decoder_t *dcode39 = &dcode->code39;

    if(dcode39->s9 < 9)
  404788:	2a08      	cmp	r2, #8
  40478a:	f63f ae91 	bhi.w	4044b0 <_zbar_decode_code39+0x494>

    signed char c = code39_decode9(dcode);
    dbprintf(2, " c=%d", c);

    /* lock shared resources */
    if(!dcode39->character && acquire_lock(dcode, ZBAR_CODE39)) {
  40478e:	f8d4 20ec 	ldr.w	r2, [r4, #236]	; 0xec
  404792:	4b15      	ldr	r3, [pc, #84]	; (4047e8 <_zbar_decode_code39+0x7cc>)
  404794:	4013      	ands	r3, r2
  404796:	2b00      	cmp	r3, #0
  404798:	f43f af38 	beq.w	40460c <_zbar_decode_code39+0x5f0>
  40479c:	e768      	b.n	404670 <_zbar_decode_code39+0x654>
        dcode39->character = -1;
  40479e:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
  4047a2:	f04f 32ff 	mov.w	r2, #4294967295
  4047a6:	f362 1350 	bfi	r3, r2, #5, #12
  4047aa:	f8c4 30ec 	str.w	r3, [r4, #236]	; 0xec
        return(ZBAR_PARTIAL);
  4047ae:	2001      	movs	r0, #1
  4047b0:	e00b      	b.n	4047ca <_zbar_decode_code39+0x7ae>
        release_lock(dcode, ZBAR_CODE39);
        dcode39->character = -1;
        return(ZBAR_NONE);
    }
    else {
        zassert(c < 0x2c, ZBAR_NONE, "c=%02x s9=%x\n", c, dcode39->s9);
  4047b2:	b273      	sxtb	r3, r6
  4047b4:	2b2b      	cmp	r3, #43	; 0x2b
  4047b6:	ddb2      	ble.n	40471e <_zbar_decode_code39+0x702>
  4047b8:	e79d      	b.n	4046f6 <_zbar_decode_code39+0x6da>

    signed char c = code39_decode9(dcode);
    dbprintf(2, " c=%d", c);

    /* lock shared resources */
    if(!dcode39->character && acquire_lock(dcode, ZBAR_CODE39)) {
  4047ba:	f8d4 20ec 	ldr.w	r2, [r4, #236]	; 0xec
  4047be:	4b0a      	ldr	r3, [pc, #40]	; (4047e8 <_zbar_decode_code39+0x7cc>)
  4047c0:	4013      	ands	r3, r2
  4047c2:	2b00      	cmp	r3, #0
  4047c4:	f43f af24 	beq.w	404610 <_zbar_decode_code39+0x5f4>
  4047c8:	e752      	b.n	404670 <_zbar_decode_code39+0x654>
    }

    dcode->buf[dcode39->character++] = c;

    return(ZBAR_NONE);
}
  4047ca:	b007      	add	sp, #28
  4047cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4047ce:	bf00      	nop
  4047d0:	20000440 	.word	0x20000440
  4047d4:	004111b0 	.word	0x004111b0
  4047d8:	00411120 	.word	0x00411120
  4047dc:	004110e4 	.word	0x004110e4
  4047e0:	00411014 	.word	0x00411014
  4047e4:	004083a9 	.word	0x004083a9
  4047e8:	0001ffe0 	.word	0x0001ffe0

004047ec <zbar_decoder_destroy>:
    zbar_decoder_reset(dcode);
    return(dcode);
}

void zbar_decoder_destroy (zbar_decoder_t *dcode)
{
  4047ec:	b510      	push	{r4, lr}
  4047ee:	4604      	mov	r4, r0
#ifdef ENABLE_DATABAR
    if(dcode->databar.segs)
        vPortFree(dcode->databar.segs);
#endif
    if(dcode->buf)
  4047f0:	6dc0      	ldr	r0, [r0, #92]	; 0x5c
  4047f2:	b108      	cbz	r0, 4047f8 <zbar_decoder_destroy+0xc>
        vPortFree(dcode->buf);
  4047f4:	4b02      	ldr	r3, [pc, #8]	; (404800 <zbar_decoder_destroy+0x14>)
  4047f6:	4798      	blx	r3
    vPortFree(dcode);
  4047f8:	4620      	mov	r0, r4
  4047fa:	4b01      	ldr	r3, [pc, #4]	; (404800 <zbar_decoder_destroy+0x14>)
  4047fc:	4798      	blx	r3
  4047fe:	bd10      	pop	{r4, pc}
  404800:	00401959 	.word	0x00401959

00404804 <zbar_decoder_reset>:
}

void zbar_decoder_reset (zbar_decoder_t *dcode)
{
  404804:	b510      	push	{r4, lr}
  404806:	4604      	mov	r4, r0
    memset(dcode, 0, (long)&dcode->buf_alloc - (long)dcode);
  404808:	2100      	movs	r1, #0
  40480a:	2254      	movs	r2, #84	; 0x54
  40480c:	4b1a      	ldr	r3, [pc, #104]	; (404878 <zbar_decoder_reset+0x74>)
  40480e:	4798      	blx	r3
} ean_decoder_t;

/* reset EAN/UPC pass specific state */
static inline void ean_new_scan (ean_decoder_t *ean)
{
    ean->pass[0].state = ean->pass[1].state = -1;
  404810:	23ff      	movs	r3, #255	; 0xff
  404812:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
  404816:	f884 3068 	strb.w	r3, [r4, #104]	; 0x68
    ean->pass[2].state = ean->pass[3].state = -1;
  40481a:	f884 3098 	strb.w	r3, [r4, #152]	; 0x98
  40481e:	f884 3088 	strb.w	r3, [r4, #136]	; 0x88
    ean->s4 = 0;
  404822:	2300      	movs	r3, #0
  404824:	f8c4 30b0 	str.w	r3, [r4, #176]	; 0xb0

/* reset all EAN/UPC state */
static inline void ean_reset (ean_decoder_t *ean)
{
    ean_new_scan(ean);
    ean->left = ean->right = ZBAR_NONE;
  404828:	f8a4 30aa 	strh.w	r3, [r4, #170]	; 0xaa
  40482c:	f8a4 30a8 	strh.w	r3, [r4, #168]	; 0xa8
} code39_decoder_t;

/* reset Code 39 specific state */
static inline void code39_reset (code39_decoder_t *dcode39)
{
    dcode39->direction = 0;
  404830:	f894 20ec 	ldrb.w	r2, [r4, #236]	; 0xec
    dcode39->element = 0;
  404834:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
  404838:	f363 0244 	bfi	r2, r3, #1, #4
  40483c:	f884 20ec 	strb.w	r2, [r4, #236]	; 0xec
    dcode39->character = -1;
  404840:	f8d4 20ec 	ldr.w	r2, [r4, #236]	; 0xec
  404844:	f04f 31ff 	mov.w	r1, #4294967295
  404848:	f361 1250 	bfi	r2, r1, #5, #12
  40484c:	f8c4 20ec 	str.w	r2, [r4, #236]	; 0xec
    dcode39->s9 = 0;
  404850:	f8c4 30f0 	str.w	r3, [r4, #240]	; 0xf0
} code128_decoder_t;

/* reset Code 128 specific state */
static inline void code128_reset (code128_decoder_t *dcode128)
{
    dcode128->direction = 0;
  404854:	f894 2104 	ldrb.w	r2, [r4, #260]	; 0x104
    dcode128->element = 0;
  404858:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
  40485c:	f363 0243 	bfi	r2, r3, #1, #3
  404860:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
    dcode128->character = -1;
  404864:	f8b4 2104 	ldrh.w	r2, [r4, #260]	; 0x104
  404868:	f361 120f 	bfi	r2, r1, #4, #12
  40486c:	f8a4 2104 	strh.w	r2, [r4, #260]	; 0x104
    dcode128->s6 = 0;
  404870:	f8c4 3108 	str.w	r3, [r4, #264]	; 0x108
  404874:	bd10      	pop	{r4, pc}
  404876:	bf00      	nop
  404878:	00409321 	.word	0x00409321

0040487c <zbar_decoder_create>:
#endif
#include "debug.h"
#include "decoder.h"

zbar_decoder_t *zbar_decoder_create ()
{
  40487c:	b510      	push	{r4, lr}
    zbar_decoder_t *dcode = pvPortCalloc(1, sizeof(zbar_decoder_t));
  40487e:	2001      	movs	r0, #1
  404880:	f44f 718e 	mov.w	r1, #284	; 0x11c
  404884:	4b11      	ldr	r3, [pc, #68]	; (4048cc <zbar_decoder_create+0x50>)
  404886:	4798      	blx	r3
  404888:	4604      	mov	r4, r0
    dcode->buf_alloc = BUFFER_MIN;
  40488a:	2020      	movs	r0, #32
  40488c:	6560      	str	r0, [r4, #84]	; 0x54
    dcode->buf = pvPortMalloc(dcode->buf_alloc);
  40488e:	4b10      	ldr	r3, [pc, #64]	; (4048d0 <zbar_decoder_create+0x54>)
  404890:	4798      	blx	r3
  404892:	65e0      	str	r0, [r4, #92]	; 0x5c

    /* initialize default configs */
#ifdef ENABLE_EAN
    dcode->ean.enable = 1;
  404894:	2301      	movs	r3, #1
  404896:	f884 30ca 	strb.w	r3, [r4, #202]	; 0xca
    dcode->ean.ean13_config = ((1 << ZBAR_CFG_ENABLE) |
  40489a:	2205      	movs	r2, #5
  40489c:	f8c4 20cc 	str.w	r2, [r4, #204]	; 0xcc
                               (1 << ZBAR_CFG_EMIT_CHECK));
    dcode->ean.ean8_config = ((1 << ZBAR_CFG_ENABLE) |
  4048a0:	f8c4 20d0 	str.w	r2, [r4, #208]	; 0xd0
                              (1 << ZBAR_CFG_EMIT_CHECK));
    dcode->ean.upca_config = 1 << ZBAR_CFG_EMIT_CHECK;
  4048a4:	2204      	movs	r2, #4
  4048a6:	f8c4 20d4 	str.w	r2, [r4, #212]	; 0xd4
    dcode->ean.upce_config = 1 << ZBAR_CFG_EMIT_CHECK;
  4048aa:	f8c4 20d8 	str.w	r2, [r4, #216]	; 0xd8
    dcode->ean.isbn10_config = 1 << ZBAR_CFG_EMIT_CHECK;
  4048ae:	f8c4 20dc 	str.w	r2, [r4, #220]	; 0xdc
    dcode->ean.isbn13_config = 1 << ZBAR_CFG_EMIT_CHECK;
  4048b2:	f8c4 20e0 	str.w	r2, [r4, #224]	; 0xe0
#ifdef ENABLE_CODABAR
    dcode->codabar.config = 1 << ZBAR_CFG_ENABLE;
    CFG(dcode->codabar, ZBAR_CFG_MIN_LEN) = 4;
#endif
#ifdef ENABLE_CODE39
    dcode->code39.config = 1 << ZBAR_CFG_ENABLE;
  4048b6:	f8c4 30f8 	str.w	r3, [r4, #248]	; 0xf8
    CFG(dcode->code39, ZBAR_CFG_MIN_LEN) = 1;
  4048ba:	f8c4 30fc 	str.w	r3, [r4, #252]	; 0xfc
#endif
#ifdef ENABLE_CODE93
    dcode->code93.config = 1 << ZBAR_CFG_ENABLE;
#endif
#ifdef ENABLE_CODE128
    dcode->code128.config = 1 << ZBAR_CFG_ENABLE;
  4048be:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
#endif
#ifdef ENABLE_QRCODE
    dcode->qrf.config = 1 << ZBAR_CFG_ENABLE;
#endif

    zbar_decoder_reset(dcode);
  4048c2:	4620      	mov	r0, r4
  4048c4:	4b03      	ldr	r3, [pc, #12]	; (4048d4 <zbar_decoder_create+0x58>)
  4048c6:	4798      	blx	r3
    return(dcode);
}
  4048c8:	4620      	mov	r0, r4
  4048ca:	bd10      	pop	{r4, pc}
  4048cc:	00401935 	.word	0x00401935
  4048d0:	004017fd 	.word	0x004017fd
  4048d4:	00404805 	.word	0x00404805

004048d8 <zbar_decoder_new_scan>:
    qr_finder_reset(&dcode->qrf);
#endif
}

void zbar_decoder_new_scan (zbar_decoder_t *dcode)
{
  4048d8:	b510      	push	{r4, lr}
  4048da:	4604      	mov	r4, r0
    /* soft reset decoder */
    memset(dcode->w, 0, sizeof(dcode->w));
  4048dc:	3004      	adds	r0, #4
  4048de:	2100      	movs	r1, #0
  4048e0:	2240      	movs	r2, #64	; 0x40
  4048e2:	4b1a      	ldr	r3, [pc, #104]	; (40494c <zbar_decoder_new_scan+0x74>)
  4048e4:	4798      	blx	r3
    dcode->lock = 0;
  4048e6:	2300      	movs	r3, #0
  4048e8:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
    dcode->idx = 0;
  4048ec:	7023      	strb	r3, [r4, #0]
    dcode->s6 = 0;
  4048ee:	6523      	str	r3, [r4, #80]	; 0x50
} ean_decoder_t;

/* reset EAN/UPC pass specific state */
static inline void ean_new_scan (ean_decoder_t *ean)
{
    ean->pass[0].state = ean->pass[1].state = -1;
  4048f0:	22ff      	movs	r2, #255	; 0xff
  4048f2:	f884 2078 	strb.w	r2, [r4, #120]	; 0x78
  4048f6:	f884 2068 	strb.w	r2, [r4, #104]	; 0x68
    ean->pass[2].state = ean->pass[3].state = -1;
  4048fa:	f884 2098 	strb.w	r2, [r4, #152]	; 0x98
  4048fe:	f884 2088 	strb.w	r2, [r4, #136]	; 0x88
    ean->s4 = 0;
  404902:	f8c4 30b0 	str.w	r3, [r4, #176]	; 0xb0
} code39_decoder_t;

/* reset Code 39 specific state */
static inline void code39_reset (code39_decoder_t *dcode39)
{
    dcode39->direction = 0;
  404906:	f894 20ec 	ldrb.w	r2, [r4, #236]	; 0xec
    dcode39->element = 0;
  40490a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
  40490e:	f363 0244 	bfi	r2, r3, #1, #4
  404912:	f884 20ec 	strb.w	r2, [r4, #236]	; 0xec
    dcode39->character = -1;
  404916:	f8d4 20ec 	ldr.w	r2, [r4, #236]	; 0xec
  40491a:	f04f 31ff 	mov.w	r1, #4294967295
  40491e:	f361 1250 	bfi	r2, r1, #5, #12
  404922:	f8c4 20ec 	str.w	r2, [r4, #236]	; 0xec
    dcode39->s9 = 0;
  404926:	f8c4 30f0 	str.w	r3, [r4, #240]	; 0xf0
} code128_decoder_t;

/* reset Code 128 specific state */
static inline void code128_reset (code128_decoder_t *dcode128)
{
    dcode128->direction = 0;
  40492a:	f894 2104 	ldrb.w	r2, [r4, #260]	; 0x104
    dcode128->element = 0;
  40492e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
  404932:	f363 0243 	bfi	r2, r3, #1, #3
  404936:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
    dcode128->character = -1;
  40493a:	f8b4 2104 	ldrh.w	r2, [r4, #260]	; 0x104
  40493e:	f361 120f 	bfi	r2, r1, #4, #12
  404942:	f8a4 2104 	strh.w	r2, [r4, #260]	; 0x104
    dcode128->s6 = 0;
  404946:	f8c4 3108 	str.w	r3, [r4, #264]	; 0x108
  40494a:	bd10      	pop	{r4, pc}
  40494c:	00409321 	.word	0x00409321

00404950 <zbar_decoder_get_data>:
}

const char *zbar_decoder_get_data (const zbar_decoder_t *dcode)
{
    return((char*)dcode->buf);
}
  404950:	6dc0      	ldr	r0, [r0, #92]	; 0x5c
  404952:	4770      	bx	lr

00404954 <zbar_decoder_get_data_length>:

unsigned int zbar_decoder_get_data_length (const zbar_decoder_t *dcode)
{
    return(dcode->buflen);
}
  404954:	6d80      	ldr	r0, [r0, #88]	; 0x58
  404956:	4770      	bx	lr

00404958 <zbar_decoder_get_direction>:

int zbar_decoder_get_direction (const zbar_decoder_t *dcode)
{
    return(dcode->direction);
}
  404958:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
  40495a:	4770      	bx	lr

0040495c <zbar_decoder_set_handler>:

zbar_decoder_handler_t *
zbar_decoder_set_handler (zbar_decoder_t *dcode,
                          zbar_decoder_handler_t *handler)
{
  40495c:	4603      	mov	r3, r0
    zbar_decoder_handler_t *result = dcode->handler;
  40495e:	6e40      	ldr	r0, [r0, #100]	; 0x64
    dcode->handler = handler;
  404960:	6659      	str	r1, [r3, #100]	; 0x64
    return(result);
}
  404962:	4770      	bx	lr

00404964 <zbar_decoder_set_userdata>:

void zbar_decoder_set_userdata (zbar_decoder_t *dcode,
                                void *userdata)
{
    dcode->userdata = userdata;
  404964:	6601      	str	r1, [r0, #96]	; 0x60
  404966:	4770      	bx	lr

00404968 <zbar_decoder_get_userdata>:
}

void *zbar_decoder_get_userdata (const zbar_decoder_t *dcode)
{
    return(dcode->userdata);
}
  404968:	6e00      	ldr	r0, [r0, #96]	; 0x60
  40496a:	4770      	bx	lr

0040496c <zbar_decoder_get_type>:

zbar_symbol_type_t zbar_decoder_get_type (const zbar_decoder_t *dcode)
{
    return(dcode->type);
}
  40496c:	f8b0 0044 	ldrh.w	r0, [r0, #68]	; 0x44
  404970:	4770      	bx	lr
  404972:	bf00      	nop

00404974 <zbar_decoder_get_modifiers>:

unsigned int zbar_decoder_get_modifiers (const zbar_decoder_t *dcode)
{
    return(dcode->modifiers);
}
  404974:	6c80      	ldr	r0, [r0, #72]	; 0x48
  404976:	4770      	bx	lr

00404978 <zbar_decode_width>:

zbar_symbol_type_t zbar_decode_width (zbar_decoder_t *dcode,
                                      unsigned w)
{
  404978:	b570      	push	{r4, r5, r6, lr}
  40497a:	b084      	sub	sp, #16
  40497c:	4604      	mov	r4, r0
    zbar_symbol_type_t tmp, sym = ZBAR_NONE;

    dcode->w[dcode->idx & (DECODE_WINDOW - 1)] = w;
  40497e:	7803      	ldrb	r3, [r0, #0]
  404980:	f003 020f 	and.w	r2, r3, #15
  404984:	eb00 0282 	add.w	r2, r0, r2, lsl #2
  404988:	6051      	str	r1, [r2, #4]

/* retrieve i-th previous element width */
static inline unsigned get_width (const zbar_decoder_t *dcode,
                                  unsigned char offset)
{
    return(dcode->w[(dcode->idx - offset) & (DECODE_WINDOW - 1)]);
  40498a:	1e5a      	subs	r2, r3, #1
  40498c:	f002 020f 	and.w	r2, r2, #15
  404990:	eb00 0282 	add.w	r2, r0, r2, lsl #2
  404994:	6851      	ldr	r1, [r2, #4]
  404996:	6d02      	ldr	r2, [r0, #80]	; 0x50
  404998:	440a      	add	r2, r1
  40499a:	3b07      	subs	r3, #7
  40499c:	f003 030f 	and.w	r3, r3, #15
  4049a0:	eb00 0383 	add.w	r3, r0, r3, lsl #2
    dbprintf(1, "    decode[%x]: w=%d (%g)\n", dcode->idx, w, (w / 32.));

    /* update shared character width */
    dcode->s6 -= get_width(dcode, 7);
    dcode->s6 += get_width(dcode, 1);
  4049a4:	685b      	ldr	r3, [r3, #4]
  4049a6:	1ad2      	subs	r2, r2, r3
  4049a8:	6502      	str	r2, [r0, #80]	; 0x50
    if(TEST_CFG(dcode->qrf.config, ZBAR_CFG_ENABLE) &&
       (tmp = _zbar_find_qr(dcode)) > ZBAR_PARTIAL)
        sym = tmp;
#endif
#ifdef ENABLE_EAN
    if((dcode->ean.enable) &&
  4049aa:	f990 30ca 	ldrsb.w	r3, [r0, #202]	; 0xca
  4049ae:	b11b      	cbz	r3, 4049b8 <zbar_decode_width+0x40>
  4049b0:	4b21      	ldr	r3, [pc, #132]	; (404a38 <zbar_decode_width+0xc0>)
  4049b2:	4798      	blx	r3
  4049b4:	4605      	mov	r5, r0
  4049b6:	e000      	b.n	4049ba <zbar_decode_width+0x42>
}

zbar_symbol_type_t zbar_decode_width (zbar_decoder_t *dcode,
                                      unsigned w)
{
    zbar_symbol_type_t tmp, sym = ZBAR_NONE;
  4049b8:	2500      	movs	r5, #0
    if((dcode->ean.enable) &&
       (tmp = _zbar_decode_ean(dcode)))
        sym = tmp;
#endif
#ifdef ENABLE_CODE39
    if(TEST_CFG(dcode->code39.config, ZBAR_CFG_ENABLE) &&
  4049ba:	f8d4 30f8 	ldr.w	r3, [r4, #248]	; 0xf8
  4049be:	f013 0f01 	tst.w	r3, #1
  4049c2:	d005      	beq.n	4049d0 <zbar_decode_width+0x58>
  4049c4:	4620      	mov	r0, r4
  4049c6:	4b1d      	ldr	r3, [pc, #116]	; (404a3c <zbar_decode_width+0xc4>)
  4049c8:	4798      	blx	r3
       (tmp = _zbar_decode_code39(dcode)) > ZBAR_PARTIAL)
        sym = tmp;
  4049ca:	2801      	cmp	r0, #1
  4049cc:	bf88      	it	hi
  4049ce:	4605      	movhi	r5, r0
    if(TEST_CFG(dcode->code93.config, ZBAR_CFG_ENABLE) &&
       (tmp = _zbar_decode_code93(dcode)) > ZBAR_PARTIAL)
        sym = tmp;
#endif
#ifdef ENABLE_CODE128
    if(TEST_CFG(dcode->code128.config, ZBAR_CFG_ENABLE) &&
  4049d0:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
  4049d4:	f013 0f01 	tst.w	r3, #1
  4049d8:	d005      	beq.n	4049e6 <zbar_decode_width+0x6e>
  4049da:	4620      	mov	r0, r4
  4049dc:	4b18      	ldr	r3, [pc, #96]	; (404a40 <zbar_decode_width+0xc8>)
  4049de:	4798      	blx	r3
       (tmp = _zbar_decode_code128(dcode)) > ZBAR_PARTIAL)
        sym = tmp;
  4049e0:	2801      	cmp	r0, #1
  4049e2:	bf88      	it	hi
  4049e4:	4605      	movhi	r5, r0
    if(TEST_CFG(dcode->pdf417.config, ZBAR_CFG_ENABLE) &&
       (tmp = _zbar_decode_pdf417(dcode)) > ZBAR_PARTIAL)
        sym = tmp;
#endif

    dcode->idx++;
  4049e6:	7823      	ldrb	r3, [r4, #0]
  4049e8:	3301      	adds	r3, #1
  4049ea:	7023      	strb	r3, [r4, #0]
    dcode->type = sym;
  4049ec:	f8a4 5044 	strh.w	r5, [r4, #68]	; 0x44
    if(sym) {
  4049f0:	b1fd      	cbz	r5, 404a32 <zbar_decode_width+0xba>
        if(dcode->lock && sym > ZBAR_PARTIAL && sym != ZBAR_QRCODE)
  4049f2:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
  4049f6:	b1c3      	cbz	r3, 404a2a <zbar_decode_width+0xb2>
  4049f8:	2d01      	cmp	r5, #1
  4049fa:	d916      	bls.n	404a2a <zbar_decode_width+0xb2>
  4049fc:	2d40      	cmp	r5, #64	; 0x40
  4049fe:	d014      	beq.n	404a2a <zbar_decode_width+0xb2>

/* check and release shared state lock */
static inline char release_lock (zbar_decoder_t *dcode,
                                 zbar_symbol_type_t req)
{
    zassert(dcode->lock == req, 1, "lock=%d req=%d\n",
  404a00:	429d      	cmp	r5, r3
  404a02:	d00f      	beq.n	404a24 <zbar_decode_width+0xac>
  404a04:	4a0f      	ldr	r2, [pc, #60]	; (404a44 <zbar_decode_width+0xcc>)
  404a06:	6812      	ldr	r2, [r2, #0]
  404a08:	68d0      	ldr	r0, [r2, #12]
  404a0a:	4a0f      	ldr	r2, [pc, #60]	; (404a48 <zbar_decode_width+0xd0>)
  404a0c:	9200      	str	r2, [sp, #0]
  404a0e:	4a0f      	ldr	r2, [pc, #60]	; (404a4c <zbar_decode_width+0xd4>)
  404a10:	9201      	str	r2, [sp, #4]
  404a12:	9302      	str	r3, [sp, #8]
  404a14:	9503      	str	r5, [sp, #12]
  404a16:	490e      	ldr	r1, [pc, #56]	; (404a50 <zbar_decode_width+0xd8>)
  404a18:	4a0e      	ldr	r2, [pc, #56]	; (404a54 <zbar_decode_width+0xdc>)
  404a1a:	f240 1307 	movw	r3, #263	; 0x107
  404a1e:	4e0e      	ldr	r6, [pc, #56]	; (404a58 <zbar_decode_width+0xe0>)
  404a20:	47b0      	blx	r6
  404a22:	e002      	b.n	404a2a <zbar_decode_width+0xb2>
            dcode->lock, req);
    dcode->lock = 0;
  404a24:	2300      	movs	r3, #0
  404a26:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
            release_lock(dcode, sym);
        if(dcode->handler)
  404a2a:	6e63      	ldr	r3, [r4, #100]	; 0x64
  404a2c:	b10b      	cbz	r3, 404a32 <zbar_decode_width+0xba>
            dcode->handler(dcode);
  404a2e:	4620      	mov	r0, r4
  404a30:	4798      	blx	r3
    }
    return(sym);
}
  404a32:	4628      	mov	r0, r5
  404a34:	b004      	add	sp, #16
  404a36:	bd70      	pop	{r4, r5, r6, pc}
  404a38:	00404cb1 	.word	0x00404cb1
  404a3c:	0040401d 	.word	0x0040401d
  404a40:	00402f6d 	.word	0x00402f6d
  404a44:	20000440 	.word	0x20000440
  404a48:	004111d4 	.word	0x004111d4
  404a4c:	00410ba8 	.word	0x00410ba8
  404a50:	00410b3c 	.word	0x00410b3c
  404a54:	00410b78 	.word	0x00410b78
  404a58:	004083a9 	.word	0x004083a9

00404a5c <zbar_decoder_get_configs>:
static inline const unsigned int*
decoder_get_configp (const zbar_decoder_t *dcode,
                     zbar_symbol_type_t sym)
{
    const unsigned int *config;
    switch(sym) {
  404a5c:	290a      	cmp	r1, #10
  404a5e:	d024      	beq.n	404aaa <zbar_decoder_get_configs+0x4e>
  404a60:	d80a      	bhi.n	404a78 <zbar_decoder_get_configs+0x1c>
  404a62:	2905      	cmp	r1, #5
  404a64:	d019      	beq.n	404a9a <zbar_decoder_get_configs+0x3e>
  404a66:	d802      	bhi.n	404a6e <zbar_decoder_get_configs+0x12>
  404a68:	2902      	cmp	r1, #2
  404a6a:	d014      	beq.n	404a96 <zbar_decoder_get_configs+0x3a>
  404a6c:	e026      	b.n	404abc <zbar_decoder_get_configs+0x60>
  404a6e:	2908      	cmp	r1, #8
  404a70:	d015      	beq.n	404a9e <zbar_decoder_get_configs+0x42>
  404a72:	2909      	cmp	r1, #9
  404a74:	d017      	beq.n	404aa6 <zbar_decoder_get_configs+0x4a>
  404a76:	e021      	b.n	404abc <zbar_decoder_get_configs+0x60>
  404a78:	290e      	cmp	r1, #14
  404a7a:	d018      	beq.n	404aae <zbar_decoder_get_configs+0x52>
  404a7c:	d804      	bhi.n	404a88 <zbar_decoder_get_configs+0x2c>
  404a7e:	290c      	cmp	r1, #12
  404a80:	d00f      	beq.n	404aa2 <zbar_decoder_get_configs+0x46>
  404a82:	290d      	cmp	r1, #13
  404a84:	d005      	beq.n	404a92 <zbar_decoder_get_configs+0x36>
  404a86:	e019      	b.n	404abc <zbar_decoder_get_configs+0x60>
  404a88:	2927      	cmp	r1, #39	; 0x27
  404a8a:	d012      	beq.n	404ab2 <zbar_decoder_get_configs+0x56>
  404a8c:	2980      	cmp	r1, #128	; 0x80
  404a8e:	d012      	beq.n	404ab6 <zbar_decoder_get_configs+0x5a>
  404a90:	e014      	b.n	404abc <zbar_decoder_get_configs+0x60>
#ifdef ENABLE_EAN
    case ZBAR_EAN13:
        config = &dcode->ean.ean13_config;
  404a92:	30cc      	adds	r0, #204	; 0xcc
  404a94:	e013      	b.n	404abe <zbar_decoder_get_configs+0x62>
        break;

    case ZBAR_EAN2:
        config = &dcode->ean.ean2_config;
  404a96:	30e8      	adds	r0, #232	; 0xe8
  404a98:	e011      	b.n	404abe <zbar_decoder_get_configs+0x62>
        break;

    case ZBAR_EAN5:
        config = &dcode->ean.ean5_config;
  404a9a:	30e4      	adds	r0, #228	; 0xe4
  404a9c:	e00f      	b.n	404abe <zbar_decoder_get_configs+0x62>
        break;

    case ZBAR_EAN8:
        config = &dcode->ean.ean8_config;
  404a9e:	30d0      	adds	r0, #208	; 0xd0
  404aa0:	e00d      	b.n	404abe <zbar_decoder_get_configs+0x62>
        break;

    case ZBAR_UPCA:
        config = &dcode->ean.upca_config;
  404aa2:	30d4      	adds	r0, #212	; 0xd4
  404aa4:	e00b      	b.n	404abe <zbar_decoder_get_configs+0x62>
        break;

    case ZBAR_UPCE:
        config = &dcode->ean.upce_config;
  404aa6:	30d8      	adds	r0, #216	; 0xd8
  404aa8:	e009      	b.n	404abe <zbar_decoder_get_configs+0x62>
        break;

    case ZBAR_ISBN10:
        config = &dcode->ean.isbn10_config;
  404aaa:	30dc      	adds	r0, #220	; 0xdc
  404aac:	e007      	b.n	404abe <zbar_decoder_get_configs+0x62>
        break;

    case ZBAR_ISBN13:
        config = &dcode->ean.isbn13_config;
  404aae:	30e0      	adds	r0, #224	; 0xe0
  404ab0:	e005      	b.n	404abe <zbar_decoder_get_configs+0x62>
        break;
#endif

#ifdef ENABLE_CODE39
    case ZBAR_CODE39:
        config = &dcode->code39.config;
  404ab2:	30f8      	adds	r0, #248	; 0xf8
  404ab4:	e003      	b.n	404abe <zbar_decoder_get_configs+0x62>
        break;
#endif

#ifdef ENABLE_CODE128
    case ZBAR_CODE128:
        config = &dcode->code128.config;
  404ab6:	f500 7088 	add.w	r0, r0, #272	; 0x110
  404aba:	e000      	b.n	404abe <zbar_decoder_get_configs+0x62>
        config = &dcode->qrf.config;
        break;
#endif

    default:
        config = NULL;
  404abc:	2000      	movs	r0, #0

unsigned int zbar_decoder_get_configs (const zbar_decoder_t *dcode,
                                       zbar_symbol_type_t sym)
{
    const unsigned *config = decoder_get_configp(dcode, sym);
    if(!config)
  404abe:	b108      	cbz	r0, 404ac4 <zbar_decoder_get_configs+0x68>
        return(0);
    return(*config);
  404ac0:	6800      	ldr	r0, [r0, #0]
  404ac2:	4770      	bx	lr
unsigned int zbar_decoder_get_configs (const zbar_decoder_t *dcode,
                                       zbar_symbol_type_t sym)
{
    const unsigned *config = decoder_get_configp(dcode, sym);
    if(!config)
        return(0);
  404ac4:	2000      	movs	r0, #0
    return(*config);
}
  404ac6:	4770      	bx	lr

00404ac8 <zbar_decoder_set_config>:

int zbar_decoder_set_config (zbar_decoder_t *dcode,
                             zbar_symbol_type_t sym,
                             zbar_config_t cfg,
                             int val)
{
  404ac8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if(sym == ZBAR_NONE) {
  404aca:	b979      	cbnz	r1, 404aec <zbar_decoder_set_config+0x24>
  404acc:	461e      	mov	r6, r3
  404ace:	4615      	mov	r5, r2
  404ad0:	4607      	mov	r7, r0
  404ad2:	210d      	movs	r1, #13
  404ad4:	4c4a      	ldr	r4, [pc, #296]	; (404c00 <zbar_decoder_set_config+0x138>)
	    ZBAR_CODE39, ZBAR_CODE93, ZBAR_CODE128, ZBAR_QRCODE, 
	    ZBAR_PDF417, 0
        };
        const zbar_symbol_type_t *symp;
        for(symp = all; *symp; symp++)
            zbar_decoder_set_config(dcode, *symp, cfg, val);
  404ad6:	4638      	mov	r0, r7
  404ad8:	462a      	mov	r2, r5
  404ada:	4633      	mov	r3, r6
  404adc:	f7ff fff4 	bl	404ac8 <zbar_decoder_set_config>
            ZBAR_I25, ZBAR_DATABAR, ZBAR_DATABAR_EXP, ZBAR_CODABAR,
	    ZBAR_CODE39, ZBAR_CODE93, ZBAR_CODE128, ZBAR_QRCODE, 
	    ZBAR_PDF417, 0
        };
        const zbar_symbol_type_t *symp;
        for(symp = all; *symp; symp++)
  404ae0:	f834 1f02 	ldrh.w	r1, [r4, #2]!
  404ae4:	2900      	cmp	r1, #0
  404ae6:	d1f6      	bne.n	404ad6 <zbar_decoder_set_config+0xe>
            zbar_decoder_set_config(dcode, *symp, cfg, val);
        return(0);
  404ae8:	2000      	movs	r0, #0
  404aea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  404aec:	460c      	mov	r4, r1
    }

    if(cfg >= 0 && cfg < ZBAR_CFG_NUM)
  404aee:	2a03      	cmp	r2, #3
  404af0:	d864      	bhi.n	404bbc <zbar_decoder_set_config+0xf4>
static inline const unsigned int*
decoder_get_configp (const zbar_decoder_t *dcode,
                     zbar_symbol_type_t sym)
{
    const unsigned int *config;
    switch(sym) {
  404af2:	290a      	cmp	r1, #10
  404af4:	d02a      	beq.n	404b4c <zbar_decoder_set_config+0x84>
  404af6:	d80a      	bhi.n	404b0e <zbar_decoder_set_config+0x46>
  404af8:	2905      	cmp	r1, #5
  404afa:	d01b      	beq.n	404b34 <zbar_decoder_set_config+0x6c>
  404afc:	d802      	bhi.n	404b04 <zbar_decoder_set_config+0x3c>
  404afe:	2902      	cmp	r1, #2
  404b00:	d015      	beq.n	404b2e <zbar_decoder_set_config+0x66>
  404b02:	e070      	b.n	404be6 <zbar_decoder_set_config+0x11e>
  404b04:	2908      	cmp	r1, #8
  404b06:	d018      	beq.n	404b3a <zbar_decoder_set_config+0x72>
  404b08:	2909      	cmp	r1, #9
  404b0a:	d01c      	beq.n	404b46 <zbar_decoder_set_config+0x7e>
  404b0c:	e06b      	b.n	404be6 <zbar_decoder_set_config+0x11e>
  404b0e:	290e      	cmp	r1, #14
  404b10:	d01f      	beq.n	404b52 <zbar_decoder_set_config+0x8a>
  404b12:	d804      	bhi.n	404b1e <zbar_decoder_set_config+0x56>
  404b14:	290c      	cmp	r1, #12
  404b16:	d013      	beq.n	404b40 <zbar_decoder_set_config+0x78>
  404b18:	290d      	cmp	r1, #13
  404b1a:	d005      	beq.n	404b28 <zbar_decoder_set_config+0x60>
  404b1c:	e063      	b.n	404be6 <zbar_decoder_set_config+0x11e>
  404b1e:	2927      	cmp	r1, #39	; 0x27
  404b20:	d01a      	beq.n	404b58 <zbar_decoder_set_config+0x90>
  404b22:	2980      	cmp	r1, #128	; 0x80
  404b24:	d01b      	beq.n	404b5e <zbar_decoder_set_config+0x96>
  404b26:	e05e      	b.n	404be6 <zbar_decoder_set_config+0x11e>
#ifdef ENABLE_EAN
    case ZBAR_EAN13:
        config = &dcode->ean.ean13_config;
  404b28:	f100 01cc 	add.w	r1, r0, #204	; 0xcc
  404b2c:	e065      	b.n	404bfa <zbar_decoder_set_config+0x132>
        break;

    case ZBAR_EAN2:
        config = &dcode->ean.ean2_config;
  404b2e:	f100 01e8 	add.w	r1, r0, #232	; 0xe8
  404b32:	e062      	b.n	404bfa <zbar_decoder_set_config+0x132>
        break;

    case ZBAR_EAN5:
        config = &dcode->ean.ean5_config;
  404b34:	f100 01e4 	add.w	r1, r0, #228	; 0xe4
  404b38:	e05f      	b.n	404bfa <zbar_decoder_set_config+0x132>
        break;

    case ZBAR_EAN8:
        config = &dcode->ean.ean8_config;
  404b3a:	f100 01d0 	add.w	r1, r0, #208	; 0xd0
  404b3e:	e05c      	b.n	404bfa <zbar_decoder_set_config+0x132>
        break;

    case ZBAR_UPCA:
        config = &dcode->ean.upca_config;
  404b40:	f100 01d4 	add.w	r1, r0, #212	; 0xd4
  404b44:	e059      	b.n	404bfa <zbar_decoder_set_config+0x132>
        break;

    case ZBAR_UPCE:
        config = &dcode->ean.upce_config;
  404b46:	f100 01d8 	add.w	r1, r0, #216	; 0xd8
  404b4a:	e056      	b.n	404bfa <zbar_decoder_set_config+0x132>
        break;

    case ZBAR_ISBN10:
        config = &dcode->ean.isbn10_config;
  404b4c:	f100 01dc 	add.w	r1, r0, #220	; 0xdc
  404b50:	e053      	b.n	404bfa <zbar_decoder_set_config+0x132>
        break;

    case ZBAR_ISBN13:
        config = &dcode->ean.isbn13_config;
  404b52:	f100 01e0 	add.w	r1, r0, #224	; 0xe0
  404b56:	e050      	b.n	404bfa <zbar_decoder_set_config+0x132>
        break;
#endif

#ifdef ENABLE_CODE39
    case ZBAR_CODE39:
        config = &dcode->code39.config;
  404b58:	f100 01f8 	add.w	r1, r0, #248	; 0xf8
  404b5c:	e04d      	b.n	404bfa <zbar_decoder_set_config+0x132>
        break;
#endif

#ifdef ENABLE_CODE128
    case ZBAR_CODE128:
        config = &dcode->code128.config;
  404b5e:	f500 7188 	add.w	r1, r0, #272	; 0x110
  404b62:	e04a      	b.n	404bfa <zbar_decoder_set_config+0x132>
{
    unsigned *config = (void*)decoder_get_configp(dcode, sym);
    if(!config || cfg >= ZBAR_CFG_NUM)
        return(1);

    if(!val)
  404b64:	b93b      	cbnz	r3, 404b76 <zbar_decoder_set_config+0xae>
        *config &= ~(1 << cfg);
  404b66:	2301      	movs	r3, #1
  404b68:	fa03 f202 	lsl.w	r2, r3, r2
  404b6c:	680b      	ldr	r3, [r1, #0]
  404b6e:	ea23 0302 	bic.w	r3, r3, r2
  404b72:	600b      	str	r3, [r1, #0]
  404b74:	e005      	b.n	404b82 <zbar_decoder_set_config+0xba>
    else if(val == 1)
  404b76:	2b01      	cmp	r3, #1
  404b78:	d137      	bne.n	404bea <zbar_decoder_set_config+0x122>
        *config |= (1 << cfg);
  404b7a:	4093      	lsls	r3, r2
  404b7c:	680a      	ldr	r2, [r1, #0]
  404b7e:	4313      	orrs	r3, r2
  404b80:	600b      	str	r3, [r1, #0]
    else
        return(1);

#ifdef ENABLE_EAN
    dcode->ean.enable = TEST_CFG(dcode->ean.ean13_config |
  404b82:	f8d0 20e8 	ldr.w	r2, [r0, #232]	; 0xe8
  404b86:	f8d0 30cc 	ldr.w	r3, [r0, #204]	; 0xcc
  404b8a:	431a      	orrs	r2, r3
  404b8c:	f8d0 30e4 	ldr.w	r3, [r0, #228]	; 0xe4
  404b90:	431a      	orrs	r2, r3
  404b92:	f8d0 30d0 	ldr.w	r3, [r0, #208]	; 0xd0
  404b96:	431a      	orrs	r2, r3
  404b98:	f8d0 30d4 	ldr.w	r3, [r0, #212]	; 0xd4
  404b9c:	431a      	orrs	r2, r3
  404b9e:	f8d0 30d8 	ldr.w	r3, [r0, #216]	; 0xd8
  404ba2:	431a      	orrs	r2, r3
  404ba4:	f8d0 30dc 	ldr.w	r3, [r0, #220]	; 0xdc
  404ba8:	431a      	orrs	r2, r3
  404baa:	f8d0 30e0 	ldr.w	r3, [r0, #224]	; 0xe0
  404bae:	4313      	orrs	r3, r2
  404bb0:	f003 0301 	and.w	r3, r3, #1
  404bb4:	f880 30ca 	strb.w	r3, [r0, #202]	; 0xca
                                 dcode->ean.isbn10_config |
                                 dcode->ean.isbn13_config,
                                 ZBAR_CFG_ENABLE);
#endif

    return(0);
  404bb8:	2000      	movs	r0, #0
  404bba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return(0);
    }

    if(cfg >= 0 && cfg < ZBAR_CFG_NUM)
        return(decoder_set_config_bool(dcode, sym, cfg, val));
    else if(cfg >= ZBAR_CFG_MIN_LEN && cfg <= ZBAR_CFG_MAX_LEN)
  404bbc:	f1a2 0120 	sub.w	r1, r2, #32
  404bc0:	b289      	uxth	r1, r1
  404bc2:	2901      	cmp	r1, #1
  404bc4:	d813      	bhi.n	404bee <zbar_decoder_set_config+0x126>
static inline int decoder_set_config_int (zbar_decoder_t *dcode,
                                          zbar_symbol_type_t sym,
                                          zbar_config_t cfg,
                                          int val)
{
    switch(sym) {
  404bc6:	2c27      	cmp	r4, #39	; 0x27
  404bc8:	d002      	beq.n	404bd0 <zbar_decoder_set_config+0x108>
  404bca:	2c80      	cmp	r4, #128	; 0x80
  404bcc:	d005      	beq.n	404bda <zbar_decoder_set_config+0x112>
  404bce:	e010      	b.n	404bf2 <zbar_decoder_set_config+0x12a>
        CFG(dcode->codabar, cfg) = val;
        break;
#endif
#ifdef ENABLE_CODE39
    case ZBAR_CODE39:
        CFG(dcode->code39, cfg) = val;
  404bd0:	eb00 0282 	add.w	r2, r0, r2, lsl #2
  404bd4:	67d3      	str	r3, [r2, #124]	; 0x7c
#endif

    default:
        return(1);
    }
    return(0);
  404bd6:	2000      	movs	r0, #0
  404bd8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        CFG(dcode->code93, cfg) = val;
        break;
#endif
#ifdef ENABLE_CODE128
    case ZBAR_CODE128:
        CFG(dcode->code128, cfg) = val;
  404bda:	eb00 0282 	add.w	r2, r0, r2, lsl #2
  404bde:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
#endif

    default:
        return(1);
    }
    return(0);
  404be2:	2000      	movs	r0, #0
  404be4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                                           zbar_config_t cfg,
                                           int val)
{
    unsigned *config = (void*)decoder_get_configp(dcode, sym);
    if(!config || cfg >= ZBAR_CFG_NUM)
        return(1);
  404be6:	2001      	movs	r0, #1
  404be8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(!val)
        *config &= ~(1 << cfg);
    else if(val == 1)
        *config |= (1 << cfg);
    else
        return(1);
  404bea:	2001      	movs	r0, #1
  404bec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(cfg >= 0 && cfg < ZBAR_CFG_NUM)
        return(decoder_set_config_bool(dcode, sym, cfg, val));
    else if(cfg >= ZBAR_CFG_MIN_LEN && cfg <= ZBAR_CFG_MAX_LEN)
        return(decoder_set_config_int(dcode, sym, cfg, val));
    else
        return(1);
  404bee:	2001      	movs	r0, #1
  404bf0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        CFG(dcode->pdf417, cfg) = val;
        break;
#endif

    default:
        return(1);
  404bf2:	2001      	movs	r0, #1
  404bf4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                                           zbar_config_t cfg,
                                           int val)
{
    unsigned *config = (void*)decoder_get_configp(dcode, sym);
    if(!config || cfg >= ZBAR_CFG_NUM)
        return(1);
  404bf6:	2001      	movs	r0, #1
  404bf8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                                           zbar_symbol_type_t sym,
                                           zbar_config_t cfg,
                                           int val)
{
    unsigned *config = (void*)decoder_get_configp(dcode, sym);
    if(!config || cfg >= ZBAR_CFG_NUM)
  404bfa:	2900      	cmp	r1, #0
  404bfc:	d1b2      	bne.n	404b64 <zbar_decoder_set_config+0x9c>
  404bfe:	e7fa      	b.n	404bf6 <zbar_decoder_set_config+0x12e>
  404c00:	004111fc 	.word	0x004111fc

00404c04 <_zbar_decoder_buf_dump>:
static char *decoder_dump = NULL;
static unsigned decoder_dumplen = 0;

const char *_zbar_decoder_buf_dump (unsigned char *buf,
                                    unsigned int buflen)
{
  404c04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  404c08:	b082      	sub	sp, #8
  404c0a:	4606      	mov	r6, r0
  404c0c:	460f      	mov	r7, r1
    int dumplen = (buflen * 3) + 12;
  404c0e:	eb01 0441 	add.w	r4, r1, r1, lsl #1
  404c12:	340c      	adds	r4, #12
    char *p;
    int i;

    if(!decoder_dump || dumplen > decoder_dumplen) {
  404c14:	4b1d      	ldr	r3, [pc, #116]	; (404c8c <_zbar_decoder_buf_dump+0x88>)
  404c16:	6818      	ldr	r0, [r3, #0]
  404c18:	b128      	cbz	r0, 404c26 <_zbar_decoder_buf_dump+0x22>
  404c1a:	4b1d      	ldr	r3, [pc, #116]	; (404c90 <_zbar_decoder_buf_dump+0x8c>)
  404c1c:	681b      	ldr	r3, [r3, #0]
  404c1e:	429c      	cmp	r4, r3
  404c20:	d908      	bls.n	404c34 <_zbar_decoder_buf_dump+0x30>
        if(decoder_dump)
            vPortFree(decoder_dump);
  404c22:	4b1c      	ldr	r3, [pc, #112]	; (404c94 <_zbar_decoder_buf_dump+0x90>)
  404c24:	4798      	blx	r3
        decoder_dump = pvPortMalloc(dumplen);
  404c26:	4620      	mov	r0, r4
  404c28:	4b1b      	ldr	r3, [pc, #108]	; (404c98 <_zbar_decoder_buf_dump+0x94>)
  404c2a:	4798      	blx	r3
  404c2c:	4b17      	ldr	r3, [pc, #92]	; (404c8c <_zbar_decoder_buf_dump+0x88>)
  404c2e:	6018      	str	r0, [r3, #0]
        decoder_dumplen = dumplen;
  404c30:	4b17      	ldr	r3, [pc, #92]	; (404c90 <_zbar_decoder_buf_dump+0x8c>)
  404c32:	601c      	str	r4, [r3, #0]
    }
    p = decoder_dump +
        snprintf(decoder_dump, 12, "buf[%04x]=",
  404c34:	4b15      	ldr	r3, [pc, #84]	; (404c8c <_zbar_decoder_buf_dump+0x88>)
  404c36:	681d      	ldr	r5, [r3, #0]
  404c38:	4628      	mov	r0, r5
  404c3a:	210c      	movs	r1, #12
  404c3c:	4a17      	ldr	r2, [pc, #92]	; (404c9c <_zbar_decoder_buf_dump+0x98>)
  404c3e:	f64f 73ff 	movw	r3, #65535	; 0xffff
  404c42:	42bb      	cmp	r3, r7
  404c44:	bf28      	it	cs
  404c46:	463b      	movcs	r3, r7
  404c48:	4c15      	ldr	r4, [pc, #84]	; (404ca0 <_zbar_decoder_buf_dump+0x9c>)
  404c4a:	47a0      	blx	r4
        if(decoder_dump)
            vPortFree(decoder_dump);
        decoder_dump = pvPortMalloc(dumplen);
        decoder_dumplen = dumplen;
    }
    p = decoder_dump +
  404c4c:	4405      	add	r5, r0
        snprintf(decoder_dump, 12, "buf[%04x]=",
                 (buflen > 0xffff) ? 0xffff : buflen);
    for(i = 0; i < buflen; i++)
  404c4e:	b1c7      	cbz	r7, 404c82 <_zbar_decoder_buf_dump+0x7e>
  404c50:	3e01      	subs	r6, #1
  404c52:	2400      	movs	r4, #0
        p += snprintf(p, 4, "%s%02x", (i) ? " " : "",  buf[i]);
  404c54:	4b13      	ldr	r3, [pc, #76]	; (404ca4 <_zbar_decoder_buf_dump+0xa0>)
  404c56:	f8df 9050 	ldr.w	r9, [pc, #80]	; 404ca8 <_zbar_decoder_buf_dump+0xa4>
  404c5a:	f8df 8044 	ldr.w	r8, [pc, #68]	; 404ca0 <_zbar_decoder_buf_dump+0x9c>
  404c5e:	f8df a04c 	ldr.w	sl, [pc, #76]	; 404cac <_zbar_decoder_buf_dump+0xa8>
  404c62:	e003      	b.n	404c6c <_zbar_decoder_buf_dump+0x68>
  404c64:	4b0f      	ldr	r3, [pc, #60]	; (404ca4 <_zbar_decoder_buf_dump+0xa0>)
  404c66:	2c00      	cmp	r4, #0
  404c68:	bf18      	it	ne
  404c6a:	4653      	movne	r3, sl
  404c6c:	f816 2f01 	ldrb.w	r2, [r6, #1]!
  404c70:	9200      	str	r2, [sp, #0]
  404c72:	4628      	mov	r0, r5
  404c74:	2104      	movs	r1, #4
  404c76:	464a      	mov	r2, r9
  404c78:	47c0      	blx	r8
  404c7a:	4405      	add	r5, r0
        decoder_dumplen = dumplen;
    }
    p = decoder_dump +
        snprintf(decoder_dump, 12, "buf[%04x]=",
                 (buflen > 0xffff) ? 0xffff : buflen);
    for(i = 0; i < buflen; i++)
  404c7c:	3401      	adds	r4, #1
  404c7e:	42bc      	cmp	r4, r7
  404c80:	d1f0      	bne.n	404c64 <_zbar_decoder_buf_dump+0x60>
        p += snprintf(p, 4, "%s%02x", (i) ? " " : "",  buf[i]);
    return(decoder_dump);
}
  404c82:	4b02      	ldr	r3, [pc, #8]	; (404c8c <_zbar_decoder_buf_dump+0x88>)
  404c84:	6818      	ldr	r0, [r3, #0]
  404c86:	b002      	add	sp, #8
  404c88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  404c8c:	2000ae68 	.word	0x2000ae68
  404c90:	2000ae64 	.word	0x2000ae64
  404c94:	00401959 	.word	0x00401959
  404c98:	004017fd 	.word	0x004017fd
  404c9c:	004111e8 	.word	0x004111e8
  404ca0:	004097e5 	.word	0x004097e5
  404ca4:	00411600 	.word	0x00411600
  404ca8:	004111f4 	.word	0x004111f4
  404cac:	004111e4 	.word	0x004111e4

00404cb0 <_zbar_decode_ean>:
    dcode->modifiers = 0;
    dbprintf(2, " base=%d j=%d (%s)", base, j, dcode->buf);
}

zbar_symbol_type_t _zbar_decode_ean (zbar_decoder_t *dcode)
{
  404cb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  404cb4:	b091      	sub	sp, #68	; 0x44
  404cb6:	4681      	mov	r9, r0
    /* process upto 4 separate passes */
    zbar_symbol_type_t sym = ZBAR_NONE;
    unsigned char pass_idx = dcode->idx & 3;
  404cb8:	7803      	ldrb	r3, [r0, #0]
  404cba:	f003 0203 	and.w	r2, r3, #3
  404cbe:	920a      	str	r2, [sp, #40]	; 0x28

/* retrieve i-th previous element width */
static inline unsigned get_width (const zbar_decoder_t *dcode,
                                  unsigned char offset)
{
    return(dcode->w[(dcode->idx - offset) & (DECODE_WINDOW - 1)]);
  404cc0:	f003 020f 	and.w	r2, r3, #15
  404cc4:	eb00 0282 	add.w	r2, r0, r2, lsl #2
  404cc8:	6851      	ldr	r1, [r2, #4]
  404cca:	f8d0 20b0 	ldr.w	r2, [r0, #176]	; 0xb0
  404cce:	440a      	add	r2, r1
  404cd0:	3b04      	subs	r3, #4
  404cd2:	f003 030f 	and.w	r3, r3, #15
  404cd6:	eb00 0383 	add.w	r3, r0, r3, lsl #2
    unsigned char i;

    /* update latest character width */
    dcode->ean.s4 -= get_width(dcode, 4);
    dcode->ean.s4 += get_width(dcode, 0);
  404cda:	685b      	ldr	r3, [r3, #4]
  404cdc:	1ad2      	subs	r2, r2, r3
  404cde:	f8c0 20b0 	str.w	r2, [r0, #176]	; 0xb0
  404ce2:	4682      	mov	sl, r0
  404ce4:	f04f 0800 	mov.w	r8, #0
}

zbar_symbol_type_t _zbar_decode_ean (zbar_decoder_t *dcode)
{
    /* process upto 4 separate passes */
    zbar_symbol_type_t sym = ZBAR_NONE;
  404ce8:	46c3      	mov	fp, r8
    /* update latest character width */
    dcode->ean.s4 -= get_width(dcode, 4);
    dcode->ean.s4 += get_width(dcode, 0);

    for(i = 0; i < 4; i++) {
        ean_pass_t *pass = &dcode->ean.pass[i];
  404cea:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
  404cee:	4654      	mov	r4, sl
        if(pass->state >= 0 ||
  404cf0:	f89a 2068 	ldrb.w	r2, [sl, #104]	; 0x68
  404cf4:	f012 0f80 	tst.w	r2, #128	; 0x80
  404cf8:	d005      	beq.n	404d06 <_zbar_decode_ean+0x56>
  404cfa:	fa5f f388 	uxtb.w	r3, r8
  404cfe:	990a      	ldr	r1, [sp, #40]	; 0x28
  404d00:	428b      	cmp	r3, r1
  404d02:	f040 87c0 	bne.w	405c86 <_zbar_decode_ean+0xfd6>
/* update state for one of 4 parallel passes */
static inline zbar_symbol_type_t decode_pass (zbar_decoder_t *dcode,
                                              ean_pass_t *pass)
{
    unsigned char idx, fwd;
    pass->state++;
  404d06:	b2d2      	uxtb	r2, r2
  404d08:	1c51      	adds	r1, r2, #1
  404d0a:	b2c9      	uxtb	r1, r1
  404d0c:	b2ce      	uxtb	r6, r1
  404d0e:	f884 6068 	strb.w	r6, [r4, #104]	; 0x68
    idx = pass->state & STATE_IDX;
  404d12:	f001 053f 	and.w	r5, r1, #63	; 0x3f
};

/* return current element color */
static inline char get_color (const zbar_decoder_t *dcode)
{
    return(dcode->idx & 1);
  404d16:	f899 3000 	ldrb.w	r3, [r9]
    fwd = pass->state & 1;

    if(get_color(dcode) == ZBAR_SPACE) {
  404d1a:	f013 0c01 	ands.w	ip, r3, #1
  404d1e:	f040 828b 	bne.w	405238 <_zbar_decode_ean+0x588>
        if(pass->state & STATE_ADDON) {
  404d22:	f011 0f40 	tst.w	r1, #64	; 0x40
  404d26:	f000 80b9 	beq.w	404e9c <_zbar_decode_ean+0x1ec>
            dbprintf(2, " i=%d", idx);
            if(idx == 0x09 || idx == 0x21) {
  404d2a:	2d09      	cmp	r5, #9
  404d2c:	d002      	beq.n	404d34 <_zbar_decode_ean+0x84>
  404d2e:	2d21      	cmp	r5, #33	; 0x21
  404d30:	f040 80a9 	bne.w	404e86 <_zbar_decode_ean+0x1d6>

/* retrieve i-th previous element width */
static inline unsigned get_width (const zbar_decoder_t *dcode,
                                  unsigned char offset)
{
    return(dcode->w[(dcode->idx - offset) & (DECODE_WINDOW - 1)]);
  404d34:	f003 000f 	and.w	r0, r3, #15
  404d38:	eb09 0080 	add.w	r0, r9, r0, lsl #2
  404d3c:	6840      	ldr	r0, [r0, #4]
  404d3e:	900b      	str	r0, [sp, #44]	; 0x2c
  404d40:	1e58      	subs	r0, r3, #1
  404d42:	f1a3 0e05 	sub.w	lr, r3, #5
static inline unsigned calc_s (const zbar_decoder_t *dcode,
                               unsigned char offset,
                               unsigned char n)
{
    /* FIXME check that this gets unrolled for constant n */
    unsigned s = 0;
  404d46:	2700      	movs	r7, #0

/* retrieve i-th previous element width */
static inline unsigned get_width (const zbar_decoder_t *dcode,
                                  unsigned char offset)
{
    return(dcode->w[(dcode->idx - offset) & (DECODE_WINDOW - 1)]);
  404d48:	f000 060f 	and.w	r6, r0, #15
  404d4c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
                               unsigned char n)
{
    /* FIXME check that this gets unrolled for constant n */
    unsigned s = 0;
    while(n--)
        s += get_width(dcode, offset++);
  404d50:	6876      	ldr	r6, [r6, #4]
  404d52:	4437      	add	r7, r6
  404d54:	3801      	subs	r0, #1
                               unsigned char offset,
                               unsigned char n)
{
    /* FIXME check that this gets unrolled for constant n */
    unsigned s = 0;
    while(n--)
  404d56:	4570      	cmp	r0, lr
  404d58:	d1f6      	bne.n	404d48 <_zbar_decode_ean+0x98>
                unsigned qz = get_width(dcode, 0);
                unsigned s = calc_s(dcode, 1, 4);
                zbar_symbol_type_t part = !qz || (qz >= s * 3 / 4);
  404d5a:	980b      	ldr	r0, [sp, #44]	; 0x2c
  404d5c:	b128      	cbz	r0, 404d6a <_zbar_decode_ean+0xba>
  404d5e:	eb07 0747 	add.w	r7, r7, r7, lsl #1
                if(part && idx == 0x09)
  404d62:	ebb0 0f97 	cmp.w	r0, r7, lsr #2
  404d66:	f0c0 8084 	bcc.w	404e72 <_zbar_decode_ean+0x1c2>
  404d6a:	2d09      	cmp	r5, #9
  404d6c:	d11f      	bne.n	404dae <_zbar_decode_ean+0xfe>
}

static inline char ean_part_end2 (ean_decoder_t *ean,
                                  ean_pass_t *pass)
{
    if(!TEST_CFG(ean->ean2_config, ZBAR_CFG_ENABLE))
  404d6e:	f8d9 00e8 	ldr.w	r0, [r9, #232]	; 0xe8
  404d72:	f010 0f01 	tst.w	r0, #1
  404d76:	f000 8086 	beq.w	404e86 <_zbar_decode_ean+0x1d6>
        return(ZBAR_NONE);

    /* extract parity bits */
    unsigned char par = ((pass->raw[1] & 0x10) >> 3 |
  404d7a:	f894 6071 	ldrb.w	r6, [r4, #113]	; 0x71
                         (pass->raw[2] & 0x10) >> 4);
  404d7e:	f894 0072 	ldrb.w	r0, [r4, #114]	; 0x72
  404d82:	f3c0 1e00 	ubfx	lr, r0, #4, #1
{
    if(!TEST_CFG(ean->ean2_config, ZBAR_CFG_ENABLE))
        return(ZBAR_NONE);

    /* extract parity bits */
    unsigned char par = ((pass->raw[1] & 0x10) >> 3 |
  404d86:	f006 0710 	and.w	r7, r6, #16
  404d8a:	b2ff      	uxtb	r7, r7
                         (pass->raw[2] & 0x10) >> 4);
    /* calculate "checksum" */
    unsigned char chk = ~((pass->raw[1] & 0xf) * 10 +
  404d8c:	f006 060f 	and.w	r6, r6, #15
  404d90:	eb06 0686 	add.w	r6, r6, r6, lsl #2
  404d94:	f000 000f 	and.w	r0, r0, #15
  404d98:	eb00 0046 	add.w	r0, r0, r6, lsl #1
  404d9c:	43c0      	mvns	r0, r0
                          (pass->raw[2] & 0xf)) & 0x3;
    dbprintf(2, " par=%x chk=%x", par, chk);
    if(par != chk)
  404d9e:	ea4e 07e7 	orr.w	r7, lr, r7, asr #3
  404da2:	f000 0003 	and.w	r0, r0, #3
  404da6:	4287      	cmp	r7, r0
  404da8:	d16d      	bne.n	404e86 <_zbar_decode_ean+0x1d6>
            if(idx == 0x09 || idx == 0x21) {
                unsigned qz = get_width(dcode, 0);
                unsigned s = calc_s(dcode, 1, 4);
                zbar_symbol_type_t part = !qz || (qz >= s * 3 / 4);
                if(part && idx == 0x09)
                    part = ean_part_end2(&dcode->ean, pass);
  404daa:	2002      	movs	r0, #2
  404dac:	e064      	b.n	404e78 <_zbar_decode_ean+0x1c8>
}

static inline char ean_part_end5 (ean_decoder_t *ean,
                                  ean_pass_t *pass)
{
    if(!TEST_CFG(ean->ean5_config, ZBAR_CFG_ENABLE))
  404dae:	f8d9 00e4 	ldr.w	r0, [r9, #228]	; 0xe4
  404db2:	f010 0f01 	tst.w	r0, #1
  404db6:	d059      	beq.n	404e6c <_zbar_decode_ean+0x1bc>
        return(ZBAR_NONE);

    /* extract parity bits */
    unsigned char par = ((pass->raw[1] & 0x10) |
  404db8:	f894 e071 	ldrb.w	lr, [r4, #113]	; 0x71
                         (pass->raw[2] & 0x10) >> 1 |
  404dbc:	f894 0072 	ldrb.w	r0, [r4, #114]	; 0x72
  404dc0:	4607      	mov	r7, r0
                         (pass->raw[3] & 0x10) >> 2 |
  404dc2:	f894 6073 	ldrb.w	r6, [r4, #115]	; 0x73
  404dc6:	960b      	str	r6, [sp, #44]	; 0x2c
                         (pass->raw[4] & 0x10) >> 3 |
  404dc8:	f894 6074 	ldrb.w	r6, [r4, #116]	; 0x74
  404dcc:	4630      	mov	r0, r6
                         (pass->raw[5] & 0x10) >> 4);
  404dce:	f894 6075 	ldrb.w	r6, [r4, #117]	; 0x75
  404dd2:	960c      	str	r6, [sp, #48]	; 0x30
    if(!TEST_CFG(ean->ean5_config, ZBAR_CFG_ENABLE))
        return(ZBAR_NONE);

    /* extract parity bits */
    unsigned char par = ((pass->raw[1] & 0x10) |
                         (pass->raw[2] & 0x10) >> 1 |
  404dd4:	970d      	str	r7, [sp, #52]	; 0x34
  404dd6:	f007 0610 	and.w	r6, r7, #16
  404dda:	b2f6      	uxtb	r6, r6
  404ddc:	4637      	mov	r7, r6
                         (pass->raw[3] & 0x10) >> 2 |
  404dde:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
  404de0:	f006 0610 	and.w	r6, r6, #16
  404de4:	b2f6      	uxtb	r6, r6
  404de6:	10b6      	asrs	r6, r6, #2
  404de8:	ea46 0667 	orr.w	r6, r6, r7, asr #1
{
    if(!TEST_CFG(ean->ean5_config, ZBAR_CFG_ENABLE))
        return(ZBAR_NONE);

    /* extract parity bits */
    unsigned char par = ((pass->raw[1] & 0x10) |
  404dec:	f00e 0710 	and.w	r7, lr, #16
  404df0:	433e      	orrs	r6, r7
                         (pass->raw[2] & 0x10) >> 1 |
                         (pass->raw[3] & 0x10) >> 2 |
                         (pass->raw[4] & 0x10) >> 3 |
  404df2:	900e      	str	r0, [sp, #56]	; 0x38
  404df4:	f000 0710 	and.w	r7, r0, #16
  404df8:	b2ff      	uxtb	r7, r7
{
    if(!TEST_CFG(ean->ean5_config, ZBAR_CFG_ENABLE))
        return(ZBAR_NONE);

    /* extract parity bits */
    unsigned char par = ((pass->raw[1] & 0x10) |
  404dfa:	ea46 06e7 	orr.w	r6, r6, r7, asr #3
                         (pass->raw[2] & 0x10) >> 1 |
                         (pass->raw[3] & 0x10) >> 2 |
                         (pass->raw[4] & 0x10) >> 3 |
                         (pass->raw[5] & 0x10) >> 4);
  404dfe:	980c      	ldr	r0, [sp, #48]	; 0x30
  404e00:	f3c0 1700 	ubfx	r7, r0, #4, #1
{
    if(!TEST_CFG(ean->ean5_config, ZBAR_CFG_ENABLE))
        return(ZBAR_NONE);

    /* extract parity bits */
    unsigned char par = ((pass->raw[1] & 0x10) |
  404e04:	433e      	orrs	r6, r7
                         (pass->raw[2] & 0x10) >> 1 |
                         (pass->raw[3] & 0x10) >> 2 |
                         (pass->raw[4] & 0x10) >> 3 |
                         (pass->raw[5] & 0x10) >> 4);
    /* calculate checksum */
    unsigned char chk = (((pass->raw[1] & 0x0f) +
  404e06:	f00e 0e0f 	and.w	lr, lr, #15
                          (pass->raw[2] & 0x0f) * 3 +
  404e0a:	980d      	ldr	r0, [sp, #52]	; 0x34
  404e0c:	f000 000f 	and.w	r0, r0, #15
  404e10:	eb00 0040 	add.w	r0, r0, r0, lsl #1
                         (pass->raw[2] & 0x10) >> 1 |
                         (pass->raw[3] & 0x10) >> 2 |
                         (pass->raw[4] & 0x10) >> 3 |
                         (pass->raw[5] & 0x10) >> 4);
    /* calculate checksum */
    unsigned char chk = (((pass->raw[1] & 0x0f) +
  404e14:	4470      	add	r0, lr
                          (pass->raw[2] & 0x0f) * 3 +
                          (pass->raw[3] & 0x0f) +
  404e16:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
  404e18:	f007 070f 	and.w	r7, r7, #15
                         (pass->raw[3] & 0x10) >> 2 |
                         (pass->raw[4] & 0x10) >> 3 |
                         (pass->raw[5] & 0x10) >> 4);
    /* calculate checksum */
    unsigned char chk = (((pass->raw[1] & 0x0f) +
                          (pass->raw[2] & 0x0f) * 3 +
  404e1c:	4438      	add	r0, r7
                          (pass->raw[3] & 0x0f) +
                          (pass->raw[4] & 0x0f) * 3 +
  404e1e:	9f0e      	ldr	r7, [sp, #56]	; 0x38
  404e20:	f007 070f 	and.w	r7, r7, #15
  404e24:	eb07 0747 	add.w	r7, r7, r7, lsl #1
                         (pass->raw[4] & 0x10) >> 3 |
                         (pass->raw[5] & 0x10) >> 4);
    /* calculate checksum */
    unsigned char chk = (((pass->raw[1] & 0x0f) +
                          (pass->raw[2] & 0x0f) * 3 +
                          (pass->raw[3] & 0x0f) +
  404e28:	4407      	add	r7, r0
                          (pass->raw[4] & 0x0f) * 3 +
                          (pass->raw[5] & 0x0f)) * 3) % 10;
  404e2a:	980c      	ldr	r0, [sp, #48]	; 0x30
  404e2c:	f000 000f 	and.w	r0, r0, #15
                         (pass->raw[5] & 0x10) >> 4);
    /* calculate checksum */
    unsigned char chk = (((pass->raw[1] & 0x0f) +
                          (pass->raw[2] & 0x0f) * 3 +
                          (pass->raw[3] & 0x0f) +
                          (pass->raw[4] & 0x0f) * 3 +
  404e30:	4438      	add	r0, r7
                          (pass->raw[5] & 0x0f)) * 3) % 10;
  404e32:	eb00 0040 	add.w	r0, r0, r0, lsl #1
  404e36:	4fc3      	ldr	r7, [pc, #780]	; (405144 <_zbar_decode_ean+0x494>)
  404e38:	fb87 7e00 	smull	r7, lr, r7, r0
  404e3c:	17c7      	asrs	r7, r0, #31
  404e3e:	ebc7 07ae 	rsb	r7, r7, lr, asr #2
  404e42:	eb07 0787 	add.w	r7, r7, r7, lsl #2
  404e46:	eba0 0047 	sub.w	r0, r0, r7, lsl #1
                         (pass->raw[2] & 0x10) >> 1 |
                         (pass->raw[3] & 0x10) >> 2 |
                         (pass->raw[4] & 0x10) >> 3 |
                         (pass->raw[5] & 0x10) >> 4);
    /* calculate checksum */
    unsigned char chk = (((pass->raw[1] & 0x0f) +
  404e4a:	b2c0      	uxtb	r0, r0
                          (pass->raw[2] & 0x0f) * 3 +
                          (pass->raw[3] & 0x0f) +
                          (pass->raw[4] & 0x0f) * 3 +
                          (pass->raw[5] & 0x0f)) * 3) % 10;

    unsigned char parchk = parity_decode[par >> 1];
  404e4c:	0877      	lsrs	r7, r6, #1
  404e4e:	f8df e2f8 	ldr.w	lr, [pc, #760]	; 405148 <_zbar_decode_ean+0x498>
  404e52:	f81e 7007 	ldrb.w	r7, [lr, r7]
    if(par & 1)
  404e56:	f016 0f01 	tst.w	r6, #1
        parchk >>= 4;
  404e5a:	bf18      	it	ne
  404e5c:	093f      	lsrne	r7, r7, #4
    parchk &= 0xf;
    dbprintf(2, " par=%x(%d) chk=%d", par, parchk, chk);
    if(parchk != chk)
  404e5e:	f007 070f 	and.w	r7, r7, #15
    dbprintf(1, "decode5=%x%x%x%x%x\n",
             pass->raw[1] & 0xf, pass->raw[2] & 0xf,
             pass->raw[3] & 0xf, pass->raw[4] & 0xf,
             pass->raw[5] & 0xf);

    return(ZBAR_EAN5);
  404e62:	42b8      	cmp	r0, r7
  404e64:	bf14      	ite	ne
  404e66:	4660      	movne	r0, ip
  404e68:	2005      	moveq	r0, #5
  404e6a:	e000      	b.n	404e6e <_zbar_decode_ean+0x1be>

static inline char ean_part_end5 (ean_decoder_t *ean,
                                  ean_pass_t *pass)
{
    if(!TEST_CFG(ean->ean5_config, ZBAR_CFG_ENABLE))
        return(ZBAR_NONE);
  404e6c:	4660      	mov	r0, ip
                unsigned s = calc_s(dcode, 1, 4);
                zbar_symbol_type_t part = !qz || (qz >= s * 3 / 4);
                if(part && idx == 0x09)
                    part = ean_part_end2(&dcode->ean, pass);
                else if(part)
                    part = ean_part_end5(&dcode->ean, pass);
  404e6e:	b280      	uxth	r0, r0

                if(part || idx == 0x21) {
  404e70:	b910      	cbnz	r0, 404e78 <_zbar_decode_ean+0x1c8>
  404e72:	2d21      	cmp	r5, #33	; 0x21
  404e74:	d107      	bne.n	404e86 <_zbar_decode_ean+0x1d6>
  404e76:	2000      	movs	r0, #0
                    dcode->ean.direction = 0;
  404e78:	2300      	movs	r3, #0
  404e7a:	f8c9 30ac 	str.w	r3, [r9, #172]	; 0xac
                    pass->state = -1;
  404e7e:	23ff      	movs	r3, #255	; 0xff
  404e80:	f884 3068 	strb.w	r3, [r4, #104]	; 0x68
  404e84:	e366      	b.n	405554 <_zbar_decode_ean+0x8a4>
                    return(part);
                }
            }
            if((idx & 7) == 1) {
  404e86:	f001 0107 	and.w	r1, r1, #7
  404e8a:	2901      	cmp	r1, #1
  404e8c:	f040 81d4 	bne.w	405238 <_zbar_decode_ean+0x588>
                dbprintf(2, " +");
                pass->state += 2;
  404e90:	3203      	adds	r2, #3
  404e92:	f884 2068 	strb.w	r2, [r4, #104]	; 0x68
                idx += 2;
  404e96:	3502      	adds	r5, #2
  404e98:	b2ed      	uxtb	r5, r5
  404e9a:	e1cd      	b.n	405238 <_zbar_decode_ean+0x588>
                                              ean_pass_t *pass)
{
    unsigned char idx, fwd;
    pass->state++;
    idx = pass->state & STATE_IDX;
    fwd = pass->state & 1;
  404e9c:	f001 0e01 	and.w	lr, r1, #1
                dbprintf(2, " +");
                pass->state += 2;
                idx += 2;
            }
        }
        else if((idx == 0x10 || idx == 0x11) &&
  404ea0:	f1a5 0210 	sub.w	r2, r5, #16
  404ea4:	b2d2      	uxtb	r2, r2
  404ea6:	2a01      	cmp	r2, #1
  404ea8:	f200 80b7 	bhi.w	40501a <_zbar_decode_ean+0x36a>
                TEST_CFG(dcode->ean.ean8_config, ZBAR_CFG_ENABLE) &&
  404eac:	f8d9 20d0 	ldr.w	r2, [r9, #208]	; 0xd0
                dbprintf(2, " +");
                pass->state += 2;
                idx += 2;
            }
        }
        else if((idx == 0x10 || idx == 0x11) &&
  404eb0:	f012 0f01 	tst.w	r2, #1
  404eb4:	f000 80b1 	beq.w	40501a <_zbar_decode_ean+0x36a>
                                   unsigned char fwd)
{
    signed char code, i;

    /* reference width from previous character */
    unsigned s = calc_s(dcode, 4 + fwd, 4);
  404eb8:	f10e 0204 	add.w	r2, lr, #4
  404ebc:	b2d2      	uxtb	r2, r2
  404ebe:	f10e 0008 	add.w	r0, lr, #8
  404ec2:	b2c0      	uxtb	r0, r0
static inline unsigned calc_s (const zbar_decoder_t *dcode,
                               unsigned char offset,
                               unsigned char n)
{
    /* FIXME check that this gets unrolled for constant n */
    unsigned s = 0;
  404ec4:	2100      	movs	r1, #0

/* retrieve i-th previous element width */
static inline unsigned get_width (const zbar_decoder_t *dcode,
                                  unsigned char offset)
{
    return(dcode->w[(dcode->idx - offset) & (DECODE_WINDOW - 1)]);
  404ec6:	940b      	str	r4, [sp, #44]	; 0x2c
  404ec8:	461c      	mov	r4, r3
  404eca:	460f      	mov	r7, r1
                               unsigned char n)
{
    /* FIXME check that this gets unrolled for constant n */
    unsigned s = 0;
    while(n--)
        s += get_width(dcode, offset++);
  404ecc:	1c51      	adds	r1, r2, #1
  404ece:	b2c9      	uxtb	r1, r1

/* retrieve i-th previous element width */
static inline unsigned get_width (const zbar_decoder_t *dcode,
                                  unsigned char offset)
{
    return(dcode->w[(dcode->idx - offset) & (DECODE_WINDOW - 1)]);
  404ed0:	940c      	str	r4, [sp, #48]	; 0x30
  404ed2:	1a9a      	subs	r2, r3, r2
  404ed4:	f002 020f 	and.w	r2, r2, #15
  404ed8:	eb09 0282 	add.w	r2, r9, r2, lsl #2
                               unsigned char n)
{
    /* FIXME check that this gets unrolled for constant n */
    unsigned s = 0;
    while(n--)
        s += get_width(dcode, offset++);
  404edc:	6852      	ldr	r2, [r2, #4]
  404ede:	4417      	add	r7, r2
  404ee0:	460a      	mov	r2, r1
                               unsigned char offset,
                               unsigned char n)
{
    /* FIXME check that this gets unrolled for constant n */
    unsigned s = 0;
    while(n--)
  404ee2:	4281      	cmp	r1, r0
  404ee4:	d1f2      	bne.n	404ecc <_zbar_decode_ean+0x21c>
  404ee6:	970d      	str	r7, [sp, #52]	; 0x34
  404ee8:	9c0b      	ldr	r4, [sp, #44]	; 0x2c

/* retrieve i-th previous element width */
static inline unsigned get_width (const zbar_decoder_t *dcode,
                                  unsigned char offset)
{
    return(dcode->w[(dcode->idx - offset) & (DECODE_WINDOW - 1)]);
  404eea:	f003 020f 	and.w	r2, r3, #15
  404eee:	eb09 0282 	add.w	r2, r9, r2, lsl #2
  404ef2:	6852      	ldr	r2, [r2, #4]

    /* check quiet zone */
    unsigned qz = get_width(dcode, 0);
    if(!fwd && qz && qz <= s * 3 / 4) {
  404ef4:	f1be 0f00 	cmp.w	lr, #0
  404ef8:	d10a      	bne.n	404f10 <_zbar_decode_ean+0x260>
  404efa:	b19a      	cbz	r2, 404f24 <_zbar_decode_ean+0x274>
  404efc:	eb07 0147 	add.w	r1, r7, r7, lsl #1
  404f00:	ebb2 0f91 	cmp.w	r2, r1, lsr #2
  404f04:	f240 8089 	bls.w	40501a <_zbar_decode_ean+0x36a>
        return(-1);
    }

    dbprintf(2, " (");
    code = 0;
    for(i = 1 - fwd; i < 3 + fwd; i++) {
  404f08:	2203      	movs	r2, #3
  404f0a:	920e      	str	r2, [sp, #56]	; 0x38
  404f0c:	2001      	movs	r0, #1
  404f0e:	e00c      	b.n	404f2a <_zbar_decode_ean+0x27a>
  404f10:	f08e 0001 	eor.w	r0, lr, #1
  404f14:	f10e 0203 	add.w	r2, lr, #3
  404f18:	4611      	mov	r1, r2
  404f1a:	920e      	str	r2, [sp, #56]	; 0x38
  404f1c:	b242      	sxtb	r2, r0
  404f1e:	428a      	cmp	r2, r1
  404f20:	db03      	blt.n	404f2a <_zbar_decode_ean+0x27a>
  404f22:	e034      	b.n	404f8e <_zbar_decode_ean+0x2de>
  404f24:	2203      	movs	r2, #3
  404f26:	920e      	str	r2, [sp, #56]	; 0x38
  404f28:	2001      	movs	r0, #1
  404f2a:	2700      	movs	r7, #0
  404f2c:	960f      	str	r6, [sp, #60]	; 0x3c
  404f2e:	930b      	str	r3, [sp, #44]	; 0x2c
  404f30:	4601      	mov	r1, r0
  404f32:	9e0c      	ldr	r6, [sp, #48]	; 0x30
  404f34:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  404f36:	940c      	str	r4, [sp, #48]	; 0x30
  404f38:	9c0e      	ldr	r4, [sp, #56]	; 0x38
        unsigned e = get_width(dcode, i) + get_width(dcode, i + 1);
  404f3a:	b2ca      	uxtb	r2, r1
  404f3c:	1c51      	adds	r1, r2, #1
  404f3e:	b2c9      	uxtb	r1, r1
  404f40:	1a70      	subs	r0, r6, r1
  404f42:	f000 000f 	and.w	r0, r0, #15
  404f46:	eb09 0080 	add.w	r0, r9, r0, lsl #2
  404f4a:	1ab2      	subs	r2, r6, r2
  404f4c:	f002 020f 	and.w	r2, r2, #15
  404f50:	eb09 0282 	add.w	r2, r9, r2, lsl #2
  404f54:	6840      	ldr	r0, [r0, #4]
  404f56:	6852      	ldr	r2, [r2, #4]
  404f58:	4402      	add	r2, r0
{
    /* result is encoded number of units - 2
     * (for use as zero based index)
     * or -1 if invalid
     */
    unsigned char E = ((e * n * 2 + 1) / s - 3) / 2;
  404f5a:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
  404f5e:	0052      	lsls	r2, r2, #1
  404f60:	3201      	adds	r2, #1
  404f62:	fbb2 f2f3 	udiv	r2, r2, r3
  404f66:	3a03      	subs	r2, #3
    return((E >= n - 3) ? -1 : E);
  404f68:	f3c2 0247 	ubfx	r2, r2, #1, #8
  404f6c:	2a03      	cmp	r2, #3
  404f6e:	d84f      	bhi.n	405010 <_zbar_decode_ean+0x360>
        dbprintf(2, " %d", e);
        code = (code << 2) | decode_e(e, s, 7);
  404f70:	00bf      	lsls	r7, r7, #2
  404f72:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
  404f76:	4317      	orrs	r7, r2
        if(code < 0) {
  404f78:	f017 0f80 	tst.w	r7, #128	; 0x80
  404f7c:	d14b      	bne.n	405016 <_zbar_decode_ean+0x366>
  404f7e:	b2c9      	uxtb	r1, r1
        return(-1);
    }

    dbprintf(2, " (");
    code = 0;
    for(i = 1 - fwd; i < 3 + fwd; i++) {
  404f80:	b24a      	sxtb	r2, r1
  404f82:	42a2      	cmp	r2, r4
  404f84:	dbd9      	blt.n	404f3a <_zbar_decode_ean+0x28a>
  404f86:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
  404f88:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  404f8a:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  404f8c:	e000      	b.n	404f90 <_zbar_decode_ean+0x2e0>
        dbprintf(2, " [invalid quiet]");
        return(-1);
    }

    dbprintf(2, " (");
    code = 0;
  404f8e:	2700      	movs	r7, #0
                pass->state += 2;
                idx += 2;
            }
        }
        else if((idx == 0x10 || idx == 0x11) &&
                TEST_CFG(dcode->ean.ean8_config, ZBAR_CFG_ENABLE) &&
  404f90:	2f00      	cmp	r7, #0
  404f92:	d142      	bne.n	40501a <_zbar_decode_ean+0x36a>

static inline zbar_symbol_type_t ean_part_end4 (ean_pass_t *pass,
                                                unsigned char fwd)
{
    /* extract parity bits */
    unsigned char par = ((pass->raw[1] & 0x10) >> 1 |
  404f94:	f894 5071 	ldrb.w	r5, [r4, #113]	; 0x71
                         (pass->raw[2] & 0x10) >> 2 |
  404f98:	f894 1072 	ldrb.w	r1, [r4, #114]	; 0x72
                         (pass->raw[3] & 0x10) >> 3 |
  404f9c:	f894 0073 	ldrb.w	r0, [r4, #115]	; 0x73
                         (pass->raw[4] & 0x10) >> 4);
  404fa0:	f894 7074 	ldrb.w	r7, [r4, #116]	; 0x74
static inline zbar_symbol_type_t ean_part_end4 (ean_pass_t *pass,
                                                unsigned char fwd)
{
    /* extract parity bits */
    unsigned char par = ((pass->raw[1] & 0x10) >> 1 |
                         (pass->raw[2] & 0x10) >> 2 |
  404fa4:	f001 0310 	and.w	r3, r1, #16
  404fa8:	b2da      	uxtb	r2, r3

static inline zbar_symbol_type_t ean_part_end4 (ean_pass_t *pass,
                                                unsigned char fwd)
{
    /* extract parity bits */
    unsigned char par = ((pass->raw[1] & 0x10) >> 1 |
  404faa:	f005 0310 	and.w	r3, r5, #16
  404fae:	b2db      	uxtb	r3, r3
  404fb0:	105b      	asrs	r3, r3, #1
  404fb2:	ea43 03a2 	orr.w	r3, r3, r2, asr #2
                         (pass->raw[2] & 0x10) >> 2 |
                         (pass->raw[3] & 0x10) >> 3 |
  404fb6:	f000 0210 	and.w	r2, r0, #16
  404fba:	b2d2      	uxtb	r2, r2

static inline zbar_symbol_type_t ean_part_end4 (ean_pass_t *pass,
                                                unsigned char fwd)
{
    /* extract parity bits */
    unsigned char par = ((pass->raw[1] & 0x10) >> 1 |
  404fbc:	ea43 03e2 	orr.w	r3, r3, r2, asr #3
                         (pass->raw[2] & 0x10) >> 2 |
                         (pass->raw[3] & 0x10) >> 3 |
                         (pass->raw[4] & 0x10) >> 4);
  404fc0:	f3c7 1200 	ubfx	r2, r7, #4, #1

    dbprintf(2, " par=%x", par);
    if(par && par != 0xf)
  404fc4:	4313      	orrs	r3, r2
  404fc6:	d001      	beq.n	404fcc <_zbar_decode_ean+0x31c>
  404fc8:	2b0f      	cmp	r3, #15
  404fca:	d11c      	bne.n	405006 <_zbar_decode_ean+0x356>
        /* invalid parity combination */
        return(ZBAR_NONE);

    if(!par == fwd) {
  404fcc:	fab3 f383 	clz	r3, r3
  404fd0:	095b      	lsrs	r3, r3, #5
  404fd2:	4573      	cmp	r3, lr
  404fd4:	d10b      	bne.n	404fee <_zbar_decode_ean+0x33e>
        /* reverse sampled digits */
        unsigned char tmp = pass->raw[1];
        pass->state |= STATE_REV;
  404fd6:	f066 067f 	orn	r6, r6, #127	; 0x7f
  404fda:	f884 6068 	strb.w	r6, [r4, #104]	; 0x68
        pass->raw[1] = pass->raw[4];
  404fde:	f884 7071 	strb.w	r7, [r4, #113]	; 0x71
        pass->raw[4] = tmp;
  404fe2:	f884 5074 	strb.w	r5, [r4, #116]	; 0x74
        tmp = pass->raw[2];
        pass->raw[2] = pass->raw[3];
  404fe6:	f884 0072 	strb.w	r0, [r4, #114]	; 0x72
        pass->raw[3] = tmp;
  404fea:	f884 1073 	strb.w	r1, [r4, #115]	; 0x73
    dbprintf(1, "decode4=%x%x%x%x\n",
             pass->raw[1] & 0xf, pass->raw[2] & 0xf,
             pass->raw[3] & 0xf, pass->raw[4] & 0xf);
    if(!par)
        return(ZBAR_EAN8 | EAN_RIGHT);
    return(ZBAR_EAN8 | EAN_LEFT);
  404fee:	2b00      	cmp	r3, #0
                TEST_CFG(dcode->ean.ean8_config, ZBAR_CFG_ENABLE) &&
                !aux_end(dcode, fwd)) {
            dbprintf(2, " fwd=%x", fwd);
            zbar_symbol_type_t part = ean_part_end4(pass, fwd);
            if(part)
                dcode->ean.direction = (pass->state & STATE_REV) != 0;
  404ff0:	f994 3068 	ldrsb.w	r3, [r4, #104]	; 0x68
  404ff4:	ea4f 73d3 	mov.w	r3, r3, lsr #31
  404ff8:	f8c9 30ac 	str.w	r3, [r9, #172]	; 0xac
  404ffc:	f241 0008 	movw	r0, #4104	; 0x1008
  405000:	bf08      	it	eq
  405002:	2008      	moveq	r0, #8
  405004:	e000      	b.n	405008 <_zbar_decode_ean+0x358>
                         (pass->raw[4] & 0x10) >> 4);

    dbprintf(2, " par=%x", par);
    if(par && par != 0xf)
        /* invalid parity combination */
        return(ZBAR_NONE);
  405006:	2000      	movs	r0, #0
                !aux_end(dcode, fwd)) {
            dbprintf(2, " fwd=%x", fwd);
            zbar_symbol_type_t part = ean_part_end4(pass, fwd);
            if(part)
                dcode->ean.direction = (pass->state & STATE_REV) != 0;
            pass->state = -1;
  405008:	23ff      	movs	r3, #255	; 0xff
  40500a:	f884 3068 	strb.w	r3, [r4, #104]	; 0x68
  40500e:	e2a1      	b.n	405554 <_zbar_decode_ean+0x8a4>
  405010:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  405012:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  405014:	e001      	b.n	40501a <_zbar_decode_ean+0x36a>
  405016:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  405018:	9c0c      	ldr	r4, [sp, #48]	; 0x30
            return(part);
        }
	else if((idx == 0x18 || idx == 0x19)) {
  40501a:	f1a5 0218 	sub.w	r2, r5, #24
  40501e:	b2d2      	uxtb	r2, r2
  405020:	2a01      	cmp	r2, #1
  405022:	f200 8109 	bhi.w	405238 <_zbar_decode_ean+0x588>
                                   unsigned char fwd)
{
    signed char code, i;

    /* reference width from previous character */
    unsigned s = calc_s(dcode, 4 + fwd, 4);
  405026:	f10e 0204 	add.w	r2, lr, #4
  40502a:	b2d2      	uxtb	r2, r2
  40502c:	f10e 0008 	add.w	r0, lr, #8
  405030:	b2c0      	uxtb	r0, r0
static inline unsigned calc_s (const zbar_decoder_t *dcode,
                               unsigned char offset,
                               unsigned char n)
{
    /* FIXME check that this gets unrolled for constant n */
    unsigned s = 0;
  405032:	2600      	movs	r6, #0

/* retrieve i-th previous element width */
static inline unsigned get_width (const zbar_decoder_t *dcode,
                                  unsigned char offset)
{
    return(dcode->w[(dcode->idx - offset) & (DECODE_WINDOW - 1)]);
  405034:	461f      	mov	r7, r3
                               unsigned char n)
{
    /* FIXME check that this gets unrolled for constant n */
    unsigned s = 0;
    while(n--)
        s += get_width(dcode, offset++);
  405036:	1c51      	adds	r1, r2, #1
  405038:	b2c9      	uxtb	r1, r1

/* retrieve i-th previous element width */
static inline unsigned get_width (const zbar_decoder_t *dcode,
                                  unsigned char offset)
{
    return(dcode->w[(dcode->idx - offset) & (DECODE_WINDOW - 1)]);
  40503a:	463d      	mov	r5, r7
  40503c:	1a9a      	subs	r2, r3, r2
  40503e:	f002 020f 	and.w	r2, r2, #15
  405042:	eb09 0282 	add.w	r2, r9, r2, lsl #2
                               unsigned char n)
{
    /* FIXME check that this gets unrolled for constant n */
    unsigned s = 0;
    while(n--)
        s += get_width(dcode, offset++);
  405046:	6852      	ldr	r2, [r2, #4]
  405048:	4416      	add	r6, r2
  40504a:	460a      	mov	r2, r1
                               unsigned char offset,
                               unsigned char n)
{
    /* FIXME check that this gets unrolled for constant n */
    unsigned s = 0;
    while(n--)
  40504c:	4281      	cmp	r1, r0
  40504e:	d1f2      	bne.n	405036 <_zbar_decode_ean+0x386>

/* retrieve i-th previous element width */
static inline unsigned get_width (const zbar_decoder_t *dcode,
                                  unsigned char offset)
{
    return(dcode->w[(dcode->idx - offset) & (DECODE_WINDOW - 1)]);
  405050:	f003 030f 	and.w	r3, r3, #15
  405054:	eb09 0383 	add.w	r3, r9, r3, lsl #2
  405058:	685b      	ldr	r3, [r3, #4]

    /* check quiet zone */
    unsigned qz = get_width(dcode, 0);
    if(!fwd && qz && qz <= s * 3 / 4) {
  40505a:	f1be 0f00 	cmp.w	lr, #0
  40505e:	d109      	bne.n	405074 <_zbar_decode_ean+0x3c4>
  405060:	b183      	cbz	r3, 405084 <_zbar_decode_ean+0x3d4>
  405062:	eb06 0246 	add.w	r2, r6, r6, lsl #1
  405066:	ebb3 0f92 	cmp.w	r3, r2, lsr #2
  40506a:	f240 80de 	bls.w	40522a <_zbar_decode_ean+0x57a>
        return(-1);
    }

    dbprintf(2, " (");
    code = 0;
    for(i = 1 - fwd; i < 3 + fwd; i++) {
  40506e:	2703      	movs	r7, #3
  405070:	2101      	movs	r1, #1
  405072:	e009      	b.n	405088 <_zbar_decode_ean+0x3d8>
  405074:	f08e 0101 	eor.w	r1, lr, #1
  405078:	f10e 0703 	add.w	r7, lr, #3
  40507c:	b24b      	sxtb	r3, r1
  40507e:	42bb      	cmp	r3, r7
  405080:	db02      	blt.n	405088 <_zbar_decode_ean+0x3d8>
  405082:	e02e      	b.n	4050e2 <_zbar_decode_ean+0x432>
  405084:	2703      	movs	r7, #3
  405086:	2101      	movs	r1, #1
  405088:	2000      	movs	r0, #0
  40508a:	460a      	mov	r2, r1
        unsigned e = get_width(dcode, i) + get_width(dcode, i + 1);
  40508c:	b2d3      	uxtb	r3, r2
  40508e:	1c5a      	adds	r2, r3, #1
  405090:	b2d2      	uxtb	r2, r2
  405092:	ebc2 0c05 	rsb	ip, r2, r5
  405096:	f00c 0c0f 	and.w	ip, ip, #15
  40509a:	eb09 0c8c 	add.w	ip, r9, ip, lsl #2
  40509e:	1ae9      	subs	r1, r5, r3
  4050a0:	f001 010f 	and.w	r1, r1, #15
  4050a4:	eb09 0181 	add.w	r1, r9, r1, lsl #2
  4050a8:	f8dc c004 	ldr.w	ip, [ip, #4]
  4050ac:	684b      	ldr	r3, [r1, #4]
  4050ae:	4463      	add	r3, ip
{
    /* result is encoded number of units - 2
     * (for use as zero based index)
     * or -1 if invalid
     */
    unsigned char E = ((e * n * 2 + 1) / s - 3) / 2;
  4050b0:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
  4050b4:	005b      	lsls	r3, r3, #1
  4050b6:	3301      	adds	r3, #1
  4050b8:	fbb3 f3f6 	udiv	r3, r3, r6
  4050bc:	3b03      	subs	r3, #3
    return((E >= n - 3) ? -1 : E);
  4050be:	f3c3 0347 	ubfx	r3, r3, #1, #8
  4050c2:	2b03      	cmp	r3, #3
  4050c4:	f200 85f7 	bhi.w	405cb6 <_zbar_decode_ean+0x1006>
        dbprintf(2, " %d", e);
        code = (code << 2) | decode_e(e, s, 7);
  4050c8:	0080      	lsls	r0, r0, #2
  4050ca:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
  4050ce:	4318      	orrs	r0, r3
        if(code < 0) {
  4050d0:	f010 0f80 	tst.w	r0, #128	; 0x80
  4050d4:	f040 80ab 	bne.w	40522e <_zbar_decode_ean+0x57e>
  4050d8:	b2d2      	uxtb	r2, r2
        return(-1);
    }

    dbprintf(2, " (");
    code = 0;
    for(i = 1 - fwd; i < 3 + fwd; i++) {
  4050da:	b253      	sxtb	r3, r2
  4050dc:	42bb      	cmp	r3, r7
  4050de:	dbd5      	blt.n	40508c <_zbar_decode_ean+0x3dc>
  4050e0:	e000      	b.n	4050e4 <_zbar_decode_ean+0x434>
        dbprintf(2, " [invalid quiet]");
        return(-1);
    }

    dbprintf(2, " (");
    code = 0;
  4050e2:	2000      	movs	r0, #0
            return(part);
        }
	else if((idx == 0x18 || idx == 0x19)) {
	  zbar_symbol_type_t part = ZBAR_NONE;
	  dbprintf(2, " fwd=%x", fwd);
	  if(!aux_end(dcode, fwd) && pass->raw[5] != 0xff)
  4050e4:	2800      	cmp	r0, #0
  4050e6:	f040 85e6 	bne.w	405cb6 <_zbar_decode_ean+0x1006>
  4050ea:	f894 3075 	ldrb.w	r3, [r4, #117]	; 0x75
  4050ee:	2bff      	cmp	r3, #255	; 0xff
  4050f0:	f000 85e1 	beq.w	405cb6 <_zbar_decode_ean+0x1006>
static inline zbar_symbol_type_t ean_part_end7 (ean_decoder_t *ean,
                                                ean_pass_t *pass,
                                                unsigned char fwd)
{
    /* calculate parity index */
    unsigned char par = ((fwd)
  4050f4:	f1be 0f00 	cmp.w	lr, #0
  4050f8:	d028      	beq.n	40514c <_zbar_decode_ean+0x49c>
                         ? ((pass->raw[1] & 0x10) << 1 |
  4050fa:	f894 1071 	ldrb.w	r1, [r4, #113]	; 0x71
  4050fe:	f001 0110 	and.w	r1, r1, #16
  405102:	b2c9      	uxtb	r1, r1
                            (pass->raw[2] & 0x10) |
                            (pass->raw[3] & 0x10) >> 1 |
  405104:	f894 2073 	ldrb.w	r2, [r4, #115]	; 0x73
  405108:	f002 0210 	and.w	r2, r2, #16
  40510c:	b2d2      	uxtb	r2, r2
  40510e:	1052      	asrs	r2, r2, #1
  405110:	ea42 0141 	orr.w	r1, r2, r1, lsl #1
static inline zbar_symbol_type_t ean_part_end7 (ean_decoder_t *ean,
                                                ean_pass_t *pass,
                                                unsigned char fwd)
{
    /* calculate parity index */
    unsigned char par = ((fwd)
  405114:	f894 2072 	ldrb.w	r2, [r4, #114]	; 0x72
  405118:	f002 0210 	and.w	r2, r2, #16
  40511c:	430a      	orrs	r2, r1
                         ? ((pass->raw[1] & 0x10) << 1 |
                            (pass->raw[2] & 0x10) |
                            (pass->raw[3] & 0x10) >> 1 |
                            (pass->raw[4] & 0x10) >> 2 |
  40511e:	f894 1074 	ldrb.w	r1, [r4, #116]	; 0x74
  405122:	f001 0110 	and.w	r1, r1, #16
  405126:	b2c9      	uxtb	r1, r1
static inline zbar_symbol_type_t ean_part_end7 (ean_decoder_t *ean,
                                                ean_pass_t *pass,
                                                unsigned char fwd)
{
    /* calculate parity index */
    unsigned char par = ((fwd)
  405128:	ea42 02a1 	orr.w	r2, r2, r1, asr #2
                         ? ((pass->raw[1] & 0x10) << 1 |
                            (pass->raw[2] & 0x10) |
                            (pass->raw[3] & 0x10) >> 1 |
                            (pass->raw[4] & 0x10) >> 2 |
                            (pass->raw[5] & 0x10) >> 3 |
  40512c:	f003 0310 	and.w	r3, r3, #16
  405130:	b2db      	uxtb	r3, r3
static inline zbar_symbol_type_t ean_part_end7 (ean_decoder_t *ean,
                                                ean_pass_t *pass,
                                                unsigned char fwd)
{
    /* calculate parity index */
    unsigned char par = ((fwd)
  405132:	ea42 03e3 	orr.w	r3, r2, r3, asr #3
                         ? ((pass->raw[1] & 0x10) << 1 |
                            (pass->raw[2] & 0x10) |
                            (pass->raw[3] & 0x10) >> 1 |
                            (pass->raw[4] & 0x10) >> 2 |
                            (pass->raw[5] & 0x10) >> 3 |
                            (pass->raw[6] & 0x10) >> 4)
  405136:	f894 2076 	ldrb.w	r2, [r4, #118]	; 0x76
  40513a:	f3c2 1200 	ubfx	r2, r2, #4, #1
static inline zbar_symbol_type_t ean_part_end7 (ean_decoder_t *ean,
                                                ean_pass_t *pass,
                                                unsigned char fwd)
{
    /* calculate parity index */
    unsigned char par = ((fwd)
  40513e:	4313      	orrs	r3, r2
  405140:	e027      	b.n	405192 <_zbar_decode_ean+0x4e2>
  405142:	bf00      	nop
  405144:	66666667 	.word	0x66666667
  405148:	00411228 	.word	0x00411228
                            (pass->raw[2] & 0x10) |
                            (pass->raw[3] & 0x10) >> 1 |
                            (pass->raw[4] & 0x10) >> 2 |
                            (pass->raw[5] & 0x10) >> 3 |
                            (pass->raw[6] & 0x10) >> 4)
                         : ((pass->raw[1] & 0x10) >> 4 |
  40514c:	f894 2071 	ldrb.w	r2, [r4, #113]	; 0x71
  405150:	f3c2 1200 	ubfx	r2, r2, #4, #1
                            (pass->raw[2] & 0x10) >> 3 |
  405154:	f894 1072 	ldrb.w	r1, [r4, #114]	; 0x72
  405158:	f001 0110 	and.w	r1, r1, #16
  40515c:	b2c9      	uxtb	r1, r1
static inline zbar_symbol_type_t ean_part_end7 (ean_decoder_t *ean,
                                                ean_pass_t *pass,
                                                unsigned char fwd)
{
    /* calculate parity index */
    unsigned char par = ((fwd)
  40515e:	ea42 02e1 	orr.w	r2, r2, r1, asr #3
  405162:	f003 0310 	and.w	r3, r3, #16
  405166:	4313      	orrs	r3, r2
                            (pass->raw[4] & 0x10) >> 2 |
                            (pass->raw[5] & 0x10) >> 3 |
                            (pass->raw[6] & 0x10) >> 4)
                         : ((pass->raw[1] & 0x10) >> 4 |
                            (pass->raw[2] & 0x10) >> 3 |
                            (pass->raw[3] & 0x10) >> 2 |
  405168:	f894 2073 	ldrb.w	r2, [r4, #115]	; 0x73
  40516c:	f002 0210 	and.w	r2, r2, #16
  405170:	b2d2      	uxtb	r2, r2
  405172:	ea43 03a2 	orr.w	r3, r3, r2, asr #2
                            (pass->raw[4] & 0x10) >> 1 |
  405176:	f894 2074 	ldrb.w	r2, [r4, #116]	; 0x74
  40517a:	f002 0210 	and.w	r2, r2, #16
  40517e:	b2d2      	uxtb	r2, r2
static inline zbar_symbol_type_t ean_part_end7 (ean_decoder_t *ean,
                                                ean_pass_t *pass,
                                                unsigned char fwd)
{
    /* calculate parity index */
    unsigned char par = ((fwd)
  405180:	ea43 0362 	orr.w	r3, r3, r2, asr #1
                         : ((pass->raw[1] & 0x10) >> 4 |
                            (pass->raw[2] & 0x10) >> 3 |
                            (pass->raw[3] & 0x10) >> 2 |
                            (pass->raw[4] & 0x10) >> 1 |
                            (pass->raw[5] & 0x10) |
                            (pass->raw[6] & 0x10) << 1));
  405184:	f894 2076 	ldrb.w	r2, [r4, #118]	; 0x76
  405188:	f002 0210 	and.w	r2, r2, #16
  40518c:	b2d2      	uxtb	r2, r2
static inline zbar_symbol_type_t ean_part_end7 (ean_decoder_t *ean,
                                                ean_pass_t *pass,
                                                unsigned char fwd)
{
    /* calculate parity index */
    unsigned char par = ((fwd)
  40518e:	ea43 0342 	orr.w	r3, r3, r2, lsl #1
                            (pass->raw[4] & 0x10) >> 1 |
                            (pass->raw[5] & 0x10) |
                            (pass->raw[6] & 0x10) << 1));

    /* lookup parity combination */
    pass->raw[0] = parity_decode[par >> 1];
  405192:	085a      	lsrs	r2, r3, #1
  405194:	49ca      	ldr	r1, [pc, #808]	; (4054c0 <_zbar_decode_ean+0x810>)
  405196:	5c8a      	ldrb	r2, [r1, r2]
    if(par & 1)
  405198:	f013 0f01 	tst.w	r3, #1
        pass->raw[0] >>= 4;
  40519c:	bf18      	it	ne
  40519e:	0912      	lsrne	r2, r2, #4
  4051a0:	f884 2070 	strb.w	r2, [r4, #112]	; 0x70
    pass->raw[0] &= 0xf;
  4051a4:	f894 2070 	ldrb.w	r2, [r4, #112]	; 0x70
  4051a8:	f002 020f 	and.w	r2, r2, #15
  4051ac:	f884 2070 	strb.w	r2, [r4, #112]	; 0x70
    dbprintf(2, " par=%02x(%x)", par, pass->raw[0]);

    if(pass->raw[0] == 0xf)
  4051b0:	2a0f      	cmp	r2, #15
  4051b2:	f000 8580 	beq.w	405cb6 <_zbar_decode_ean+0x1006>
        /* invalid parity combination */
        return(ZBAR_NONE);

    if(!par == fwd) {
  4051b6:	fab3 f283 	clz	r2, r3
  4051ba:	0952      	lsrs	r2, r2, #5
  4051bc:	4572      	cmp	r2, lr
  4051be:	d11d      	bne.n	4051fc <_zbar_decode_ean+0x54c>
        unsigned char i;
        pass->state |= STATE_REV;
  4051c0:	f894 1068 	ldrb.w	r1, [r4, #104]	; 0x68
  4051c4:	f061 017f 	orn	r1, r1, #127	; 0x7f
  4051c8:	f884 1068 	strb.w	r1, [r4, #104]	; 0x68
        /* reverse sampled digits */
        for(i = 1; i < 4; i++) {
            unsigned char tmp = pass->raw[i];
  4051cc:	f894 1071 	ldrb.w	r1, [r4, #113]	; 0x71
            pass->raw[i] = pass->raw[7 - i];
  4051d0:	f894 0076 	ldrb.w	r0, [r4, #118]	; 0x76
  4051d4:	f884 0071 	strb.w	r0, [r4, #113]	; 0x71
            pass->raw[7 - i] = tmp;
  4051d8:	f884 1076 	strb.w	r1, [r4, #118]	; 0x76
    if(!par == fwd) {
        unsigned char i;
        pass->state |= STATE_REV;
        /* reverse sampled digits */
        for(i = 1; i < 4; i++) {
            unsigned char tmp = pass->raw[i];
  4051dc:	f894 1072 	ldrb.w	r1, [r4, #114]	; 0x72
            pass->raw[i] = pass->raw[7 - i];
  4051e0:	f894 0075 	ldrb.w	r0, [r4, #117]	; 0x75
  4051e4:	f884 0072 	strb.w	r0, [r4, #114]	; 0x72
            pass->raw[7 - i] = tmp;
  4051e8:	f884 1075 	strb.w	r1, [r4, #117]	; 0x75
    if(!par == fwd) {
        unsigned char i;
        pass->state |= STATE_REV;
        /* reverse sampled digits */
        for(i = 1; i < 4; i++) {
            unsigned char tmp = pass->raw[i];
  4051ec:	f894 1073 	ldrb.w	r1, [r4, #115]	; 0x73
            pass->raw[i] = pass->raw[7 - i];
  4051f0:	f894 0074 	ldrb.w	r0, [r4, #116]	; 0x74
  4051f4:	f884 0073 	strb.w	r0, [r4, #115]	; 0x73
            pass->raw[7 - i] = tmp;
  4051f8:	f884 1074 	strb.w	r1, [r4, #116]	; 0x74
             pass->raw[0] & 0xf, pass->raw[1] & 0xf,
             pass->raw[2] & 0xf, pass->raw[3] & 0xf,
             pass->raw[4] & 0xf, pass->raw[5] & 0xf,
             pass->raw[6] & 0xf, par);

    if(TEST_CFG(ean->ean13_config, ZBAR_CFG_ENABLE)) {
  4051fc:	f8d9 10cc 	ldr.w	r1, [r9, #204]	; 0xcc
  405200:	f011 0f01 	tst.w	r1, #1
  405204:	d008      	beq.n	405218 <_zbar_decode_ean+0x568>
        if(!par)
  405206:	2a00      	cmp	r2, #0
  405208:	f040 8546 	bne.w	405c98 <_zbar_decode_ean+0xfe8>
            return(ZBAR_EAN13 | EAN_RIGHT);
        if(par & 0x20)
  40520c:	f013 0f20 	tst.w	r3, #32
  405210:	f040 8545 	bne.w	405c9e <_zbar_decode_ean+0xfee>
  405214:	f000 bdbe 	b.w	405d94 <_zbar_decode_ean+0x10e4>
            return(ZBAR_EAN13 | EAN_LEFT);
    }
    if(par && !(par & 0x20))
  405218:	2b00      	cmp	r3, #0
  40521a:	f000 854c 	beq.w	405cb6 <_zbar_decode_ean+0x1006>
  40521e:	f013 0f20 	tst.w	r3, #32
  405222:	f000 853e 	beq.w	405ca2 <_zbar_decode_ean+0xff2>
  405226:	f000 bd46 	b.w	405cb6 <_zbar_decode_ean+0x1006>
                dcode->ean.direction = (pass->state & STATE_REV) != 0;
            pass->state = -1;
            return(part);
        }
	else if((idx == 0x18 || idx == 0x19)) {
	  zbar_symbol_type_t part = ZBAR_NONE;
  40522a:	2000      	movs	r0, #0
  40522c:	e000      	b.n	405230 <_zbar_decode_ean+0x580>
  40522e:	2000      	movs	r0, #0
	  dbprintf(2, " fwd=%x", fwd);
	  if(!aux_end(dcode, fwd) && pass->raw[5] != 0xff)
	    part = ean_part_end7(&dcode->ean, pass, fwd);
	  if(part)
	    dcode->ean.direction = (pass->state & STATE_REV) != 0;
	  pass->state = -1;
  405230:	23ff      	movs	r3, #255	; 0xff
  405232:	f884 3068 	strb.w	r3, [r4, #104]	; 0x68
  405236:	e18d      	b.n	405554 <_zbar_decode_ean+0x8a4>
	  return(part);
        }
    }

    if(pass->state & STATE_ADDON)
  405238:	f894 1068 	ldrb.w	r1, [r4, #104]	; 0x68
  40523c:	f011 0f40 	tst.w	r1, #64	; 0x40
        idx >>= 1;
  405240:	bf18      	it	ne
  405242:	086d      	lsrne	r5, r5, #1

    if(!(idx & 0x03) && idx <= 0x14) {
  405244:	f015 0f03 	tst.w	r5, #3
  405248:	f040 851d 	bne.w	405c86 <_zbar_decode_ean+0xfd6>
  40524c:	2d14      	cmp	r5, #20
  40524e:	f200 851a 	bhi.w	405c86 <_zbar_decode_ean+0xfd6>
        signed char code = -1;
        unsigned w = pass->width;
  405252:	6ee6      	ldr	r6, [r4, #108]	; 0x6c
        if(!dcode->ean.s4)
  405254:	f8d9 20b0 	ldr.w	r2, [r9, #176]	; 0xb0
  405258:	2a00      	cmp	r2, #0
  40525a:	f000 8514 	beq.w	405c86 <_zbar_decode_ean+0xfd6>
            return(0);
        /* validate guard bars before decoding first char of symbol */
        if(!pass->state) {
  40525e:	2900      	cmp	r1, #0
  405260:	f040 8084 	bne.w	40536c <_zbar_decode_ean+0x6bc>

/* retrieve i-th previous element width */
static inline unsigned get_width (const zbar_decoder_t *dcode,
                                  unsigned char offset)
{
    return(dcode->w[(dcode->idx - offset) & (DECODE_WINDOW - 1)]);
  405264:	1f58      	subs	r0, r3, #5
  405266:	f000 000f 	and.w	r0, r0, #15
  40526a:	eb09 0080 	add.w	r0, r9, r0, lsl #2
  40526e:	6847      	ldr	r7, [r0, #4]
  405270:	1f98      	subs	r0, r3, #6
  405272:	f000 000f 	and.w	r0, r0, #15
  405276:	eb09 0080 	add.w	r0, r9, r0, lsl #2
  40527a:	6845      	ldr	r5, [r0, #4]
 * using current 4 as possible character
 */
static inline signed char aux_start (zbar_decoder_t *dcode)
{
    /* FIXME NB add-on has no guard in reverse */
    unsigned e1, e2 = get_width(dcode, 5) + get_width(dcode, 6);
  40527c:	19e8      	adds	r0, r5, r7
    unsigned char E1;
    if(dcode->ean.s4 < 6)
  40527e:	2a05      	cmp	r2, #5
  405280:	f240 8524 	bls.w	405ccc <_zbar_decode_ean+0x101c>
{
    /* result is encoded number of units - 2
     * (for use as zero based index)
     * or -1 if invalid
     */
    unsigned char E = ((e * n * 2 + 1) / s - 3) / 2;
  405284:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
  405288:	0040      	lsls	r0, r0, #1
  40528a:	3001      	adds	r0, #1
  40528c:	fbb0 f0f2 	udiv	r0, r0, r2
  405290:	3803      	subs	r0, #3
    return((E >= n - 3) ? -1 : E);
  405292:	f3c0 0047 	ubfx	r0, r0, #1, #8
  405296:	2803      	cmp	r0, #3
  405298:	d862      	bhi.n	405360 <_zbar_decode_ean+0x6b0>
        return(-1);

    if(decode_e(e2, dcode->ean.s4, 7)) {
  40529a:	2800      	cmp	r0, #0
  40529c:	f040 8516 	bne.w	405ccc <_zbar_decode_ean+0x101c>

/* retrieve i-th previous element width */
static inline unsigned get_width (const zbar_decoder_t *dcode,
                                  unsigned char offset)
{
    return(dcode->w[(dcode->idx - offset) & (DECODE_WINDOW - 1)]);
  4052a0:	1f18      	subs	r0, r3, #4
  4052a2:	f000 000f 	and.w	r0, r0, #15
  4052a6:	eb09 0080 	add.w	r0, r9, r0, lsl #2
        dbprintf(2, " [invalid any]");
        return(-1);
    }

    e1 = get_width(dcode, 4) + get_width(dcode, 5);
  4052aa:	6840      	ldr	r0, [r0, #4]
  4052ac:	4438      	add	r0, r7
{
    /* result is encoded number of units - 2
     * (for use as zero based index)
     * or -1 if invalid
     */
    unsigned char E = ((e * n * 2 + 1) / s - 3) / 2;
  4052ae:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
  4052b2:	0040      	lsls	r0, r0, #1
  4052b4:	3001      	adds	r0, #1
  4052b6:	fbb0 f0f2 	udiv	r0, r0, r2
  4052ba:	3803      	subs	r0, #3
    return((E >= n - 3) ? -1 : E);
  4052bc:	f3c0 0047 	ubfx	r0, r0, #1, #8
  4052c0:	2803      	cmp	r0, #3
  4052c2:	f200 856a 	bhi.w	405d9a <_zbar_decode_ean+0x10ea>
    E1 = decode_e(e1, dcode->ean.s4, 7);
  4052c6:	b2c0      	uxtb	r0, r0

    if(get_color(dcode) == ZBAR_BAR) {
  4052c8:	f1bc 0f00 	cmp.w	ip, #0
  4052cc:	d018      	beq.n	405300 <_zbar_decode_ean+0x650>
  4052ce:	e000      	b.n	4052d2 <_zbar_decode_ean+0x622>
        dbprintf(2, " [invalid any]");
        return(-1);
    }

    e1 = get_width(dcode, 4) + get_width(dcode, 5);
    E1 = decode_e(e1, dcode->ean.s4, 7);
  4052d0:	20ff      	movs	r0, #255	; 0xff

/* retrieve i-th previous element width */
static inline unsigned get_width (const zbar_decoder_t *dcode,
                                  unsigned char offset)
{
    return(dcode->w[(dcode->idx - offset) & (DECODE_WINDOW - 1)]);
  4052d2:	1fdd      	subs	r5, r3, #7
  4052d4:	f005 050f 	and.w	r5, r5, #15
  4052d8:	eb09 0585 	add.w	r5, r9, r5, lsl #2
  4052dc:	686d      	ldr	r5, [r5, #4]

    if(get_color(dcode) == ZBAR_BAR) {
        /* check for quiet-zone */
        unsigned qz = get_width(dcode, 7);
        if(!qz || qz > dcode->ean.s4 * 3 / 4) {
  4052de:	b12d      	cbz	r5, 4052ec <_zbar_decode_ean+0x63c>
  4052e0:	eb02 0742 	add.w	r7, r2, r2, lsl #1
  4052e4:	ebb5 0f97 	cmp.w	r5, r7, lsr #2
  4052e8:	f240 84f0 	bls.w	405ccc <_zbar_decode_ean+0x101c>
            if(!E1) {
  4052ec:	2800      	cmp	r0, #0
  4052ee:	f000 84e5 	beq.w	405cbc <_zbar_decode_ean+0x100c>
                dbprintf(2, " [valid normal]");
                return(0); /* normal symbol start */
            }
            else if(E1 == 1) {
  4052f2:	2801      	cmp	r0, #1
                dbprintf(2, " [valid add-on]");
                return(STATE_ADDON); /* add-on symbol start */
  4052f4:	bf08      	it	eq
  4052f6:	2140      	moveq	r1, #64	; 0x40
        if(!qz || qz > dcode->ean.s4 * 3 / 4) {
            if(!E1) {
                dbprintf(2, " [valid normal]");
                return(0); /* normal symbol start */
            }
            else if(E1 == 1) {
  4052f8:	f000 84e0 	beq.w	405cbc <_zbar_decode_ean+0x100c>
  4052fc:	f000 bce6 	b.w	405ccc <_zbar_decode_ean+0x101c>
        }
        dbprintf(2, " [invalid start]");
        return(-1);
    }

    if(!E1) {
  405300:	2800      	cmp	r0, #0
  405302:	f040 84e3 	bne.w	405ccc <_zbar_decode_ean+0x101c>
  405306:	1fd8      	subs	r0, r3, #7
  405308:	f000 000f 	and.w	r0, r0, #15
  40530c:	eb09 0080 	add.w	r0, r9, r0, lsl #2
  405310:	6847      	ldr	r7, [r0, #4]
  405312:	f1a3 0008 	sub.w	r0, r3, #8
  405316:	f000 000f 	and.w	r0, r0, #15
  40531a:	eb09 0080 	add.w	r0, r9, r0, lsl #2
        /* attempting decode from SPACE => validate center guard */
        unsigned e3 = get_width(dcode, 6) + get_width(dcode, 7);
        unsigned e4 = get_width(dcode, 7) + get_width(dcode, 8);
  40531e:	6840      	ldr	r0, [r0, #4]
  405320:	4438      	add	r0, r7
        return(-1);
    }

    if(!E1) {
        /* attempting decode from SPACE => validate center guard */
        unsigned e3 = get_width(dcode, 6) + get_width(dcode, 7);
  405322:	443d      	add	r5, r7
{
    /* result is encoded number of units - 2
     * (for use as zero based index)
     * or -1 if invalid
     */
    unsigned char E = ((e * n * 2 + 1) / s - 3) / 2;
  405324:	ebc5 05c5 	rsb	r5, r5, r5, lsl #3
  405328:	006d      	lsls	r5, r5, #1
  40532a:	3501      	adds	r5, #1
  40532c:	fbb5 f5f2 	udiv	r5, r5, r2
  405330:	3d03      	subs	r5, #3
    return((E >= n - 3) ? -1 : E);
  405332:	f3c5 0547 	ubfx	r5, r5, #1, #8
  405336:	2d03      	cmp	r5, #3
  405338:	d812      	bhi.n	405360 <_zbar_decode_ean+0x6b0>
        unsigned e4 = get_width(dcode, 7) + get_width(dcode, 8);
        if(!decode_e(e3, dcode->ean.s4, 7) &&
  40533a:	2d00      	cmp	r5, #0
  40533c:	f040 84c6 	bne.w	405ccc <_zbar_decode_ean+0x101c>
{
    /* result is encoded number of units - 2
     * (for use as zero based index)
     * or -1 if invalid
     */
    unsigned char E = ((e * n * 2 + 1) / s - 3) / 2;
  405340:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
  405344:	0040      	lsls	r0, r0, #1
  405346:	3001      	adds	r0, #1
  405348:	fbb0 f0f2 	udiv	r0, r0, r2
  40534c:	3803      	subs	r0, #3
    return((E >= n - 3) ? -1 : E);
  40534e:	f3c0 0047 	ubfx	r0, r0, #1, #8
  405352:	2803      	cmp	r0, #3
  405354:	d804      	bhi.n	405360 <_zbar_decode_ean+0x6b0>
  405356:	2800      	cmp	r0, #0
  405358:	f000 84b0 	beq.w	405cbc <_zbar_decode_ean+0x100c>
  40535c:	f000 bcb6 	b.w	405ccc <_zbar_decode_ean+0x101c>
        unsigned w = pass->width;
        if(!dcode->ean.s4)
            return(0);
        /* validate guard bars before decoding first char of symbol */
        if(!pass->state) {
            pass->state = aux_start(dcode);
  405360:	23ff      	movs	r3, #255	; 0xff
  405362:	f884 3068 	strb.w	r3, [r4, #104]	; 0x68
            pass->width = dcode->ean.s4;
  405366:	66e2      	str	r2, [r4, #108]	; 0x6c
  405368:	f000 bc8d 	b.w	405c86 <_zbar_decode_ean+0xfd6>

static inline int check_width (unsigned w0,
                               unsigned w1)
{
    unsigned dw0 = w0;
    w0 *= 8;
  40536c:	00f1      	lsls	r1, r6, #3
    w1 *= 8;
  40536e:	00d0      	lsls	r0, r2, #3
    return(w0 - dw0 <= w1 && w1 <= w0 + dw0);
  405370:	1b8f      	subs	r7, r1, r6
  405372:	42b8      	cmp	r0, r7
  405374:	f0c0 84c0 	bcc.w	405cf8 <_zbar_decode_ean+0x1048>
  405378:	4431      	add	r1, r6
  40537a:	4288      	cmp	r0, r1
  40537c:	f240 84ab 	bls.w	405cd6 <_zbar_decode_ean+0x1026>
  405380:	f000 bcba 	b.w	405cf8 <_zbar_decode_ean+0x1048>
        if(!pass->state) {
            pass->state = aux_start(dcode);
            pass->width = dcode->ean.s4;
            if(pass->state < 0)
                return(0);
            idx = pass->state & STATE_IDX;
  405384:	2500      	movs	r5, #0
    signed char code;

    /* calculate similar edge measurements */
    unsigned e1 = ((get_color(dcode) == ZBAR_BAR)
                   ? get_width(dcode, 0) + get_width(dcode, 1)
                   : get_width(dcode, 2) + get_width(dcode, 3));
  405386:	f1bc 0f00 	cmp.w	ip, #0
  40538a:	d00d      	beq.n	4053a8 <_zbar_decode_ean+0x6f8>

/* retrieve i-th previous element width */
static inline unsigned get_width (const zbar_decoder_t *dcode,
                                  unsigned char offset)
{
    return(dcode->w[(dcode->idx - offset) & (DECODE_WINDOW - 1)]);
  40538c:	1e59      	subs	r1, r3, #1
  40538e:	f001 010f 	and.w	r1, r1, #15
  405392:	eb09 0181 	add.w	r1, r9, r1, lsl #2
  405396:	f003 000f 	and.w	r0, r3, #15
  40539a:	eb09 0080 	add.w	r0, r9, r0, lsl #2
  40539e:	684e      	ldr	r6, [r1, #4]
  4053a0:	6841      	ldr	r1, [r0, #4]
  4053a2:	eb06 0e01 	add.w	lr, r6, r1
  4053a6:	e00d      	b.n	4053c4 <_zbar_decode_ean+0x714>
  4053a8:	1ed8      	subs	r0, r3, #3
  4053aa:	f000 000f 	and.w	r0, r0, #15
  4053ae:	eb09 0080 	add.w	r0, r9, r0, lsl #2
  4053b2:	1e99      	subs	r1, r3, #2
  4053b4:	f001 010f 	and.w	r1, r1, #15
  4053b8:	eb09 0181 	add.w	r1, r9, r1, lsl #2
  4053bc:	6840      	ldr	r0, [r0, #4]
  4053be:	6849      	ldr	r1, [r1, #4]
  4053c0:	eb00 0e01 	add.w	lr, r0, r1
  4053c4:	1e59      	subs	r1, r3, #1
  4053c6:	f001 010f 	and.w	r1, r1, #15
  4053ca:	eb09 0181 	add.w	r1, r9, r1, lsl #2
  4053ce:	684f      	ldr	r7, [r1, #4]
  4053d0:	1e99      	subs	r1, r3, #2
  4053d2:	f001 010f 	and.w	r1, r1, #15
  4053d6:	eb09 0181 	add.w	r1, r9, r1, lsl #2
  4053da:	6849      	ldr	r1, [r1, #4]
  4053dc:	910b      	str	r1, [sp, #44]	; 0x2c
    unsigned e2 = get_width(dcode, 1) + get_width(dcode, 2);
  4053de:	19c8      	adds	r0, r1, r7
  4053e0:	900c      	str	r0, [sp, #48]	; 0x30
    dbprintf(2, "\n        e1=%d e2=%d", e1, e2);

    if(dcode->ean.s4 < 6)
  4053e2:	2a05      	cmp	r2, #5
  4053e4:	f240 8488 	bls.w	405cf8 <_zbar_decode_ean+0x1048>
{
    /* result is encoded number of units - 2
     * (for use as zero based index)
     * or -1 if invalid
     */
    unsigned char E = ((e * n * 2 + 1) / s - 3) / 2;
  4053e8:	ebce 01ce 	rsb	r1, lr, lr, lsl #3
  4053ec:	0049      	lsls	r1, r1, #1
  4053ee:	3101      	adds	r1, #1
  4053f0:	fbb1 f1f2 	udiv	r1, r1, r2
  4053f4:	3903      	subs	r1, #3
    return((E >= n - 3) ? -1 : E);
  4053f6:	f3c1 0147 	ubfx	r1, r1, #1, #8
  4053fa:	2903      	cmp	r1, #3
  4053fc:	bf88      	it	hi
  4053fe:	f04f 31ff 	movhi.w	r1, #4294967295
{
    /* result is encoded number of units - 2
     * (for use as zero based index)
     * or -1 if invalid
     */
    unsigned char E = ((e * n * 2 + 1) / s - 3) / 2;
  405402:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
  405406:	0040      	lsls	r0, r0, #1
  405408:	3001      	adds	r0, #1
  40540a:	fbb0 f0f2 	udiv	r0, r0, r2
  40540e:	3803      	subs	r0, #3
    return((E >= n - 3) ? -1 : E);
  405410:	f3c0 0047 	ubfx	r0, r0, #1, #8
  405414:	2803      	cmp	r0, #3
  405416:	d861      	bhi.n	4054dc <_zbar_decode_ean+0x82c>
        return(-1);

    /* create compacted encoding for direct lookup */
    code = ((decode_e(e1, dcode->ean.s4, 7) << 2) |
  405418:	ea40 0181 	orr.w	r1, r0, r1, lsl #2
  40541c:	b2c9      	uxtb	r1, r1
             decode_e(e2, dcode->ean.s4, 7));
    if(code < 0)
  40541e:	f011 0f80 	tst.w	r1, #128	; 0x80
  405422:	f040 8469 	bne.w	405cf8 <_zbar_decode_ean+0x1048>
       E1E2 == 34 (0110)
       E1E2 == 43 (1001)
       E1E2 == 33 (0101)
       E1E2 == 44 (1010)
     */
    if((1 << code) & 0x0660) {
  405426:	b248      	sxtb	r0, r1
  405428:	4606      	mov	r6, r0
  40542a:	f44f 60cc 	mov.w	r0, #1632	; 0x660
  40542e:	4130      	asrs	r0, r6
  405430:	f010 0f01 	tst.w	r0, #1
  405434:	f000 845b 	beq.w	405cee <_zbar_decode_ean+0x103e>
        unsigned char mid, alt;
        /* use sum of bar widths */
        unsigned d2 = ((get_color(dcode) == ZBAR_BAR)
                       ? get_width(dcode, 0) + get_width(dcode, 2)
                       : get_width(dcode, 1) + get_width(dcode, 3));
  405438:	f1bc 0f00 	cmp.w	ip, #0
  40543c:	d008      	beq.n	405450 <_zbar_decode_ean+0x7a0>

/* retrieve i-th previous element width */
static inline unsigned get_width (const zbar_decoder_t *dcode,
                                  unsigned char offset)
{
    return(dcode->w[(dcode->idx - offset) & (DECODE_WINDOW - 1)]);
  40543e:	f003 030f 	and.w	r3, r3, #15
  405442:	eb09 0383 	add.w	r3, r9, r3, lsl #2
  405446:	685b      	ldr	r3, [r3, #4]
  405448:	980b      	ldr	r0, [sp, #44]	; 0x2c
  40544a:	4418      	add	r0, r3
  40544c:	4607      	mov	r7, r0
  40544e:	e006      	b.n	40545e <_zbar_decode_ean+0x7ae>
  405450:	3b03      	subs	r3, #3
  405452:	f003 030f 	and.w	r3, r3, #15
  405456:	eb09 0383 	add.w	r3, r9, r3, lsl #2
  40545a:	685b      	ldr	r3, [r3, #4]
  40545c:	441f      	add	r7, r3
        d2 *= 7;
  40545e:	ebc7 07c7 	rsb	r7, r7, r7, lsl #3
        mid = (((1 << code) & 0x0420)
                             ? 3     /* E1E2 in 33,44 */
  405462:	f44f 6384 	mov.w	r3, #1056	; 0x420
  405466:	4133      	asrs	r3, r6
  405468:	f003 0301 	and.w	r3, r3, #1
        /* use sum of bar widths */
        unsigned d2 = ((get_color(dcode) == ZBAR_BAR)
                       ? get_width(dcode, 0) + get_width(dcode, 2)
                       : get_width(dcode, 1) + get_width(dcode, 3));
        d2 *= 7;
        mid = (((1 << code) & 0x0420)
  40546c:	2b00      	cmp	r3, #0
  40546e:	bf14      	ite	ne
  405470:	2303      	movne	r3, #3
  405472:	2304      	moveq	r3, #4
                             ? 3     /* E1E2 in 33,44 */
                             : 4);   /* E1E2 in 34,43 */
        alt = d2 > (mid * dcode->ean.s4);
  405474:	fb02 f303 	mul.w	r3, r2, r3
        if(alt)
  405478:	429f      	cmp	r7, r3
  40547a:	f240 8438 	bls.w	405cee <_zbar_decode_ean+0x103e>
            code = ((code >> 1) & 3) | 0x10; /* compress code space */
  40547e:	f3c1 0141 	ubfx	r1, r1, #1, #2
  405482:	f041 0110 	orr.w	r1, r1, #16
        if(w)
            code = decode4(dcode);
        else
            dbprintf(2, " [bad width]");

        if((code < 0 && idx != 0x10) || 
  405486:	f011 0f80 	tst.w	r1, #128	; 0x80
  40548a:	f000 8438 	beq.w	405cfe <_zbar_decode_ean+0x104e>
  40548e:	e026      	b.n	4054de <_zbar_decode_ean+0x82e>
        if(alt)
            code = ((code >> 1) & 3) | 0x10; /* compress code space */
        dbprintf(2, " (d2=%d(%d) alt=%d)", d2, mid * dcode->ean.s4, alt);
    }
    dbprintf(2, " char=%02x", digits[(unsigned char)code]);
    zassert(code < 0x14, -1, "code=%02x e1=%x e2=%x s4=%x color=%x\n",
  405490:	4b0c      	ldr	r3, [pc, #48]	; (4054c4 <_zbar_decode_ean+0x814>)
  405492:	681b      	ldr	r3, [r3, #0]
  405494:	68d8      	ldr	r0, [r3, #12]
  405496:	4b0c      	ldr	r3, [pc, #48]	; (4054c8 <_zbar_decode_ean+0x818>)
  405498:	9300      	str	r3, [sp, #0]
  40549a:	4b0c      	ldr	r3, [pc, #48]	; (4054cc <_zbar_decode_ean+0x81c>)
  40549c:	9301      	str	r3, [sp, #4]
  40549e:	b249      	sxtb	r1, r1
  4054a0:	9102      	str	r1, [sp, #8]
  4054a2:	f8cd e00c 	str.w	lr, [sp, #12]
  4054a6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  4054a8:	9304      	str	r3, [sp, #16]
  4054aa:	9205      	str	r2, [sp, #20]
  4054ac:	f8cd c018 	str.w	ip, [sp, #24]
  4054b0:	4907      	ldr	r1, [pc, #28]	; (4054d0 <_zbar_decode_ean+0x820>)
  4054b2:	4a08      	ldr	r2, [pc, #32]	; (4054d4 <_zbar_decode_ean+0x824>)
  4054b4:	f240 1301 	movw	r3, #257	; 0x101
  4054b8:	4e07      	ldr	r6, [pc, #28]	; (4054d8 <_zbar_decode_ean+0x828>)
  4054ba:	47b0      	blx	r6
  4054bc:	f000 bc1c 	b.w	405cf8 <_zbar_decode_ean+0x1048>
  4054c0:	00411228 	.word	0x00411228
  4054c4:	20000440 	.word	0x20000440
  4054c8:	00411220 	.word	0x00411220
  4054cc:	004112d4 	.word	0x004112d4
  4054d0:	0041125c 	.word	0x0041125c
  4054d4:	004112b0 	.word	0x004112b0
  4054d8:	004083a9 	.word	0x004083a9

    /* create compacted encoding for direct lookup */
    code = ((decode_e(e1, dcode->ean.s4, 7) << 2) |
             decode_e(e2, dcode->ean.s4, 7));
    if(code < 0)
        return(-1);
  4054dc:	21ff      	movs	r1, #255	; 0xff
        if(w)
            code = decode4(dcode);
        else
            dbprintf(2, " [bad width]");

        if((code < 0 && idx != 0x10) || 
  4054de:	2d10      	cmp	r5, #16
  4054e0:	d122      	bne.n	405528 <_zbar_decode_ean+0x878>
           (idx > 0 && (pass->state & STATE_ADDON) && aux_mid(dcode)))
  4054e2:	f894 3068 	ldrb.w	r3, [r4, #104]	; 0x68
  4054e6:	f013 0f40 	tst.w	r3, #64	; 0x40
  4054ea:	d021      	beq.n	405530 <_zbar_decode_ean+0x880>
  4054ec:	f899 3000 	ldrb.w	r3, [r9]
  4054f0:	1f58      	subs	r0, r3, #5
  4054f2:	f000 000f 	and.w	r0, r0, #15
  4054f6:	eb09 0080 	add.w	r0, r9, r0, lsl #2
  4054fa:	1f1a      	subs	r2, r3, #4
  4054fc:	f002 020f 	and.w	r2, r2, #15
  405500:	eb09 0282 	add.w	r2, r9, r2, lsl #2

/* check addon delimiter using current 4 as character
 */
static inline signed char aux_mid (zbar_decoder_t *dcode)
{
    unsigned e = get_width(dcode, 4) + get_width(dcode, 5);
  405504:	6840      	ldr	r0, [r0, #4]
  405506:	6853      	ldr	r3, [r2, #4]
  405508:	4403      	add	r3, r0
{
    /* result is encoded number of units - 2
     * (for use as zero based index)
     * or -1 if invalid
     */
    unsigned char E = ((e * n * 2 + 1) / s - 3) / 2;
  40550a:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
  40550e:	005b      	lsls	r3, r3, #1
  405510:	3301      	adds	r3, #1
  405512:	f8d9 20b0 	ldr.w	r2, [r9, #176]	; 0xb0
  405516:	fbb3 f3f2 	udiv	r3, r3, r2
  40551a:	3b03      	subs	r3, #3
    return((E >= n - 3) ? -1 : E);
  40551c:	f3c3 0347 	ubfx	r3, r3, #1, #8
  405520:	2b03      	cmp	r3, #3
  405522:	d801      	bhi.n	405528 <_zbar_decode_ean+0x878>
            code = decode4(dcode);
        else
            dbprintf(2, " [bad width]");

        if((code < 0 && idx != 0x10) || 
           (idx > 0 && (pass->state & STATE_ADDON) && aux_mid(dcode)))
  405524:	b25b      	sxtb	r3, r3
  405526:	b11b      	cbz	r3, 405530 <_zbar_decode_ean+0x880>
            pass->state = -1;
  405528:	23ff      	movs	r3, #255	; 0xff
  40552a:	f884 3068 	strb.w	r3, [r4, #104]	; 0x68
  40552e:	e3aa      	b.n	405c86 <_zbar_decode_ean+0xfd6>
        else if(code < 0)
  405530:	f011 0f80 	tst.w	r1, #128	; 0x80
  405534:	d003      	beq.n	40553e <_zbar_decode_ean+0x88e>
            pass->raw[5] = 0xff;
  405536:	23ff      	movs	r3, #255	; 0xff
  405538:	f884 3075 	strb.w	r3, [r4, #117]	; 0x75
  40553c:	e3a3      	b.n	405c86 <_zbar_decode_ean+0xfd6>
        else {
            dbprintf(2, "\n        raw[%x]=%02x =>", idx >> 2,
                     digits[(unsigned char)code]);
            pass->raw[(idx >> 2) + 1] = digits[(unsigned char)code];
  40553e:	9b09      	ldr	r3, [sp, #36]	; 0x24
  405540:	eb09 1303 	add.w	r3, r9, r3, lsl #4
  405544:	eb03 0595 	add.w	r5, r3, r5, lsr #2
  405548:	b2c9      	uxtb	r1, r1
  40554a:	4bbf      	ldr	r3, [pc, #764]	; (405848 <_zbar_decode_ean+0xb98>)
  40554c:	5c5b      	ldrb	r3, [r3, r1]
  40554e:	f885 3071 	strb.w	r3, [r5, #113]	; 0x71
  405552:	e398      	b.n	405c86 <_zbar_decode_ean+0xfd6>
        {
            zbar_symbol_type_t part;
            dbprintf(2, "      ean[%x/%x]: idx=%x st=%d s=%d",
                     i, pass_idx, dcode->idx, pass->state, dcode->ean.s4);
            part = decode_pass(dcode, pass);
            if(part) {
  405554:	2800      	cmp	r0, #0
  405556:	f000 8396 	beq.w	405c86 <_zbar_decode_ean+0xfd6>
    /* copy raw data into holding buffer */
    /* if same partial is not consistent, reset others */
    dbprintf(2, " integrate part=%x (%s)", part, dsprintbuf(ean));
    signed char i, j;

    if((ean->left && ((part & ZBAR_SYMBOL) != ean->left)) ||
  40555a:	f8b9 30a8 	ldrh.w	r3, [r9, #168]	; 0xa8
  40555e:	b113      	cbz	r3, 405566 <_zbar_decode_ean+0x8b6>
  405560:	b2c2      	uxtb	r2, r0
  405562:	429a      	cmp	r2, r3
  405564:	d105      	bne.n	405572 <_zbar_decode_ean+0x8c2>
       (ean->right && ((part & ZBAR_SYMBOL) != ean->right))) {
  405566:	f8b9 30aa 	ldrh.w	r3, [r9, #170]	; 0xaa
    /* copy raw data into holding buffer */
    /* if same partial is not consistent, reset others */
    dbprintf(2, " integrate part=%x (%s)", part, dsprintbuf(ean));
    signed char i, j;

    if((ean->left && ((part & ZBAR_SYMBOL) != ean->left)) ||
  40556a:	b13b      	cbz	r3, 40557c <_zbar_decode_ean+0x8cc>
       (ean->right && ((part & ZBAR_SYMBOL) != ean->right))) {
  40556c:	b2c2      	uxtb	r2, r0
  40556e:	429a      	cmp	r2, r3
  405570:	d004      	beq.n	40557c <_zbar_decode_ean+0x8cc>
        /* partial mismatch - reset collected parts */
        dbprintf(2, " rst(type %x %x)", ean->left, ean->right);
        ean->left = ean->right = ZBAR_NONE;
  405572:	2300      	movs	r3, #0
  405574:	f8a9 30aa 	strh.w	r3, [r9, #170]	; 0xaa
  405578:	f8a9 30a8 	strh.w	r3, [r9, #168]	; 0xa8
    }

    if((ean->left || ean->right) &&
  40557c:	f8d9 30a8 	ldr.w	r3, [r9, #168]	; 0xa8
  405580:	b163      	cbz	r3, 40559c <_zbar_decode_ean+0x8ec>
       !check_width(ean->width, pass->width)) {
  405582:	f8d9 30b4 	ldr.w	r3, [r9, #180]	; 0xb4

static inline int check_width (unsigned w0,
                               unsigned w1)
{
    unsigned dw0 = w0;
    w0 *= 8;
  405586:	00d9      	lsls	r1, r3, #3
    w1 *= 8;
  405588:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
  40558a:	00d2      	lsls	r2, r2, #3
    return(w0 - dw0 <= w1 && w1 <= w0 + dw0);
  40558c:	1acd      	subs	r5, r1, r3
  40558e:	42aa      	cmp	r2, r5
  405590:	f0c0 83ba 	bcc.w	405d08 <_zbar_decode_ean+0x1058>
  405594:	440b      	add	r3, r1
  405596:	429a      	cmp	r2, r3
  405598:	f200 83b6 	bhi.w	405d08 <_zbar_decode_ean+0x1058>
      dbprintf(2, " rst(width %d)", pass->width);
      ean->left = ean->right = ZBAR_NONE;
    }


    if(part & EAN_RIGHT) {
  40559c:	f400 5380 	and.w	r3, r0, #4096	; 0x1000
  4055a0:	b29b      	uxth	r3, r3
  4055a2:	b393      	cbz	r3, 40560a <_zbar_decode_ean+0x95a>
        part &= ZBAR_SYMBOL;
  4055a4:	b2c0      	uxtb	r0, r0
        j = part - 1;
  4055a6:	1e45      	subs	r5, r0, #1
  4055a8:	b2ed      	uxtb	r5, r5
        for(i = part >> 1; i; i--, j--) {
  4055aa:	0842      	lsrs	r2, r0, #1
  4055ac:	f002 03ff 	and.w	r3, r2, #255	; 0xff
  4055b0:	b322      	cbz	r2, 4055fc <_zbar_decode_ean+0x94c>
  4055b2:	1aad      	subs	r5, r5, r2
            unsigned char digit = pass->raw[i] & 0xf;
  4055b4:	9a09      	ldr	r2, [sp, #36]	; 0x24
  4055b6:	eb09 1602 	add.w	r6, r9, r2, lsl #4
            if(ean->right && ean->buf[j] != digit) {
                /* partial mismatch - reset collected parts */
                dbprintf(2, " rst(right)");
                ean->left = ean->right = ZBAR_NONE;
  4055ba:	2700      	movs	r7, #0
  4055bc:	b2d9      	uxtb	r1, r3
  4055be:	194a      	adds	r2, r1, r5
  4055c0:	b2d2      	uxtb	r2, r2

    if(part & EAN_RIGHT) {
        part &= ZBAR_SYMBOL;
        j = part - 1;
        for(i = part >> 1; i; i--, j--) {
            unsigned char digit = pass->raw[i] & 0xf;
  4055c2:	fa46 f383 	sxtab	r3, r6, r3
  4055c6:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
  4055ca:	f003 030f 	and.w	r3, r3, #15
            if(ean->right && ean->buf[j] != digit) {
  4055ce:	f8b9 e0aa 	ldrh.w	lr, [r9, #170]	; 0xaa
  4055d2:	f1be 0f00 	cmp.w	lr, #0
  4055d6:	d009      	beq.n	4055ec <_zbar_decode_ean+0x93c>
  4055d8:	fa49 fe82 	sxtab	lr, r9, r2
  4055dc:	f99e e0b8 	ldrsb.w	lr, [lr, #184]	; 0xb8
  4055e0:	459e      	cmp	lr, r3
                /* partial mismatch - reset collected parts */
                dbprintf(2, " rst(right)");
                ean->left = ean->right = ZBAR_NONE;
  4055e2:	bf1c      	itt	ne
  4055e4:	f8a9 70aa 	strhne.w	r7, [r9, #170]	; 0xaa
  4055e8:	f8a9 70a8 	strhne.w	r7, [r9, #168]	; 0xa8
            }
            ean->buf[j] = digit;
  4055ec:	fa49 f282 	sxtab	r2, r9, r2
  4055f0:	f882 30b8 	strb.w	r3, [r2, #184]	; 0xb8
  4055f4:	1e4b      	subs	r3, r1, #1


    if(part & EAN_RIGHT) {
        part &= ZBAR_SYMBOL;
        j = part - 1;
        for(i = part >> 1; i; i--, j--) {
  4055f6:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
  4055fa:	d1df      	bne.n	4055bc <_zbar_decode_ean+0x90c>
                dbprintf(2, " rst(right)");
                ean->left = ean->right = ZBAR_NONE;
            }
            ean->buf[j] = digit;
        }
        ean->right = part;
  4055fc:	f8a9 00aa 	strh.w	r0, [r9, #170]	; 0xaa
        part &= ean->left;  /* FIXME!? */
  405600:	f8b9 b0a8 	ldrh.w	fp, [r9, #168]	; 0xa8
  405604:	ea00 0b0b 	and.w	fp, r0, fp
  405608:	e0bd      	b.n	405786 <_zbar_decode_ean+0xad6>
    }
    else if(part == ZBAR_EAN13 || part == ZBAR_EAN8) /* EAN_LEFT */ {
  40560a:	280d      	cmp	r0, #13
  40560c:	f000 8382 	beq.w	405d14 <_zbar_decode_ean+0x1064>
  405610:	2808      	cmp	r0, #8
  405612:	d129      	bne.n	405668 <_zbar_decode_ean+0x9b8>
  405614:	e37e      	b.n	405d14 <_zbar_decode_ean+0x1064>
  405616:	b2cb      	uxtb	r3, r1
  405618:	1aea      	subs	r2, r5, r3
  40561a:	b2d2      	uxtb	r2, r2
  40561c:	1afb      	subs	r3, r7, r3
        j = (part - 1) >> 1;
        for(i = part >> 1; j >= 0; i--, j--) {
            unsigned char digit = pass->raw[i] & 0xf;
  40561e:	fa46 f383 	sxtab	r3, r6, r3
  405622:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
  405626:	f003 030f 	and.w	r3, r3, #15
            if(ean->left && ean->buf[j] != digit) {
  40562a:	f8b9 c0a8 	ldrh.w	ip, [r9, #168]	; 0xa8
  40562e:	f1bc 0f00 	cmp.w	ip, #0
  405632:	d009      	beq.n	405648 <_zbar_decode_ean+0x998>
  405634:	fa49 fc82 	sxtab	ip, r9, r2
  405638:	f99c c0b8 	ldrsb.w	ip, [ip, #184]	; 0xb8
  40563c:	459c      	cmp	ip, r3
                /* partial mismatch - reset collected parts */
                dbprintf(2, " rst(left)");
                ean->left = ean->right = ZBAR_NONE;
  40563e:	bf1c      	itt	ne
  405640:	f8a9 e0aa 	strhne.w	lr, [r9, #170]	; 0xaa
  405644:	f8a9 e0a8 	strhne.w	lr, [r9, #168]	; 0xa8
            }
            ean->buf[j] = digit;
  405648:	fa49 f282 	sxtab	r2, r9, r2
  40564c:	f882 30b8 	strb.w	r3, [r2, #184]	; 0xb8
  405650:	3101      	adds	r1, #1
  405652:	1a6b      	subs	r3, r5, r1
        ean->right = part;
        part &= ean->left;  /* FIXME!? */
    }
    else if(part == ZBAR_EAN13 || part == ZBAR_EAN8) /* EAN_LEFT */ {
        j = (part - 1) >> 1;
        for(i = part >> 1; j >= 0; i--, j--) {
  405654:	f013 0f80 	tst.w	r3, #128	; 0x80
  405658:	d0dd      	beq.n	405616 <_zbar_decode_ean+0x966>
                dbprintf(2, " rst(left)");
                ean->left = ean->right = ZBAR_NONE;
            }
            ean->buf[j] = digit;
        }
        ean->left = part;
  40565a:	f8a9 00a8 	strh.w	r0, [r9, #168]	; 0xa8
        part &= ean->right;  /* FIXME!? */
  40565e:	f8b9 b0aa 	ldrh.w	fp, [r9, #170]	; 0xaa
  405662:	ea00 0b0b 	and.w	fp, r0, fp
  405666:	e08e      	b.n	405786 <_zbar_decode_ean+0xad6>
    }
    else if(part != ZBAR_UPCE) /* add-ons */ {
  405668:	2809      	cmp	r0, #9
  40566a:	d017      	beq.n	40569c <_zbar_decode_ean+0x9ec>
        for(i = part; i > 0; i--)
  40566c:	b2c3      	uxtb	r3, r0
  40566e:	b25a      	sxtb	r2, r3
  405670:	2a00      	cmp	r2, #0
  405672:	dd10      	ble.n	405696 <_zbar_decode_ean+0x9e6>
            ean->buf[i - 1] = pass->raw[i] & 0xf;
  405674:	9a09      	ldr	r2, [sp, #36]	; 0x24
  405676:	eb09 1502 	add.w	r5, r9, r2, lsl #4
  40567a:	b25a      	sxtb	r2, r3
  40567c:	eb09 0102 	add.w	r1, r9, r2
  405680:	442a      	add	r2, r5
  405682:	f892 2070 	ldrb.w	r2, [r2, #112]	; 0x70
  405686:	f002 020f 	and.w	r2, r2, #15
  40568a:	f881 20b7 	strb.w	r2, [r1, #183]	; 0xb7
  40568e:	3b01      	subs	r3, #1
        }
        ean->left = part;
        part &= ean->right;  /* FIXME!? */
    }
    else if(part != ZBAR_UPCE) /* add-ons */ {
        for(i = part; i > 0; i--)
  405690:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
  405694:	d1f1      	bne.n	40567a <_zbar_decode_ean+0x9ca>
            ean->buf[i - 1] = pass->raw[i] & 0xf;
        ean->left = part;
  405696:	f8a9 00a8 	strh.w	r0, [r9, #168]	; 0xa8
  40569a:	e345      	b.n	405d28 <_zbar_decode_ean+0x1078>
                                    ean_pass_t *pass)
{
    int i = 0;
    unsigned char decode;
    /* parity encoded digit is checksum */
    ean->buf[12] = pass->raw[i++];
  40569c:	f894 3070 	ldrb.w	r3, [r4, #112]	; 0x70
  4056a0:	f889 30c4 	strb.w	r3, [r9, #196]	; 0xc4

    decode = pass->raw[6] & 0xf;
  4056a4:	f894 3076 	ldrb.w	r3, [r4, #118]	; 0x76
  4056a8:	f003 030f 	and.w	r3, r3, #15
    ean->buf[0] = 0;
  4056ac:	2200      	movs	r2, #0
  4056ae:	f889 20b8 	strb.w	r2, [r9, #184]	; 0xb8
    ean->buf[1] = 0;
  4056b2:	f889 20b9 	strb.w	r2, [r9, #185]	; 0xb9
    ean->buf[2] = pass->raw[i++] & 0xf;
  4056b6:	f894 2071 	ldrb.w	r2, [r4, #113]	; 0x71
  4056ba:	f002 020f 	and.w	r2, r2, #15
  4056be:	f889 20ba 	strb.w	r2, [r9, #186]	; 0xba
    ean->buf[3] = pass->raw[i++] & 0xf;
  4056c2:	f894 2072 	ldrb.w	r2, [r4, #114]	; 0x72
  4056c6:	f002 020f 	and.w	r2, r2, #15
  4056ca:	f889 20bb 	strb.w	r2, [r9, #187]	; 0xbb
    ean->buf[4] = (decode < 3) ? decode : pass->raw[i++] & 0xf;
  4056ce:	2b02      	cmp	r3, #2
  4056d0:	d802      	bhi.n	4056d8 <_zbar_decode_ean+0xa28>
  4056d2:	b2d9      	uxtb	r1, r3

    decode = pass->raw[6] & 0xf;
    ean->buf[0] = 0;
    ean->buf[1] = 0;
    ean->buf[2] = pass->raw[i++] & 0xf;
    ean->buf[3] = pass->raw[i++] & 0xf;
  4056d4:	2203      	movs	r2, #3
  4056d6:	e004      	b.n	4056e2 <_zbar_decode_ean+0xa32>
    ean->buf[4] = (decode < 3) ? decode : pass->raw[i++] & 0xf;
  4056d8:	f894 1073 	ldrb.w	r1, [r4, #115]	; 0x73
  4056dc:	f001 010f 	and.w	r1, r1, #15
  4056e0:	2204      	movs	r2, #4
  4056e2:	f889 10bc 	strb.w	r1, [r9, #188]	; 0xbc
    ean->buf[5] = (decode < 4) ? 0 : pass->raw[i++] & 0xf;
  4056e6:	2b03      	cmp	r3, #3
  4056e8:	d909      	bls.n	4056fe <_zbar_decode_ean+0xa4e>
  4056ea:	9909      	ldr	r1, [sp, #36]	; 0x24
  4056ec:	eb09 1101 	add.w	r1, r9, r1, lsl #4
  4056f0:	4411      	add	r1, r2
  4056f2:	f891 1070 	ldrb.w	r1, [r1, #112]	; 0x70
  4056f6:	f001 010f 	and.w	r1, r1, #15
  4056fa:	3201      	adds	r2, #1
  4056fc:	e000      	b.n	405700 <_zbar_decode_ean+0xa50>
  4056fe:	2100      	movs	r1, #0
  405700:	f889 10bd 	strb.w	r1, [r9, #189]	; 0xbd
    ean->buf[6] = (decode < 5) ? 0 : pass->raw[i++] & 0xf;
  405704:	2b04      	cmp	r3, #4
  405706:	d909      	bls.n	40571c <_zbar_decode_ean+0xa6c>
  405708:	9909      	ldr	r1, [sp, #36]	; 0x24
  40570a:	eb09 1101 	add.w	r1, r9, r1, lsl #4
  40570e:	4411      	add	r1, r2
  405710:	f891 1070 	ldrb.w	r1, [r1, #112]	; 0x70
  405714:	f001 010f 	and.w	r1, r1, #15
  405718:	3201      	adds	r2, #1
  40571a:	e000      	b.n	40571e <_zbar_decode_ean+0xa6e>
  40571c:	2100      	movs	r1, #0
  40571e:	f889 10be 	strb.w	r1, [r9, #190]	; 0xbe
    ean->buf[7] = 0;
  405722:	2100      	movs	r1, #0
  405724:	f889 10bf 	strb.w	r1, [r9, #191]	; 0xbf
    ean->buf[8] = 0;
  405728:	f889 10c0 	strb.w	r1, [r9, #192]	; 0xc0
    ean->buf[9] = (decode < 3) ? pass->raw[i++] & 0xf : 0;
  40572c:	2b02      	cmp	r3, #2
  40572e:	d809      	bhi.n	405744 <_zbar_decode_ean+0xa94>
  405730:	9909      	ldr	r1, [sp, #36]	; 0x24
  405732:	eb09 1101 	add.w	r1, r9, r1, lsl #4
  405736:	4411      	add	r1, r2
  405738:	f891 1070 	ldrb.w	r1, [r1, #112]	; 0x70
  40573c:	f001 010f 	and.w	r1, r1, #15
  405740:	3201      	adds	r2, #1
  405742:	e000      	b.n	405746 <_zbar_decode_ean+0xa96>
  405744:	2100      	movs	r1, #0
  405746:	f889 10c1 	strb.w	r1, [r9, #193]	; 0xc1
    ean->buf[10] = (decode < 4) ? pass->raw[i++] & 0xf : 0;
  40574a:	2b03      	cmp	r3, #3
  40574c:	d809      	bhi.n	405762 <_zbar_decode_ean+0xab2>
  40574e:	9909      	ldr	r1, [sp, #36]	; 0x24
  405750:	eb09 1101 	add.w	r1, r9, r1, lsl #4
  405754:	4411      	add	r1, r2
  405756:	f891 1070 	ldrb.w	r1, [r1, #112]	; 0x70
  40575a:	f001 010f 	and.w	r1, r1, #15
  40575e:	3201      	adds	r2, #1
  405760:	e000      	b.n	405764 <_zbar_decode_ean+0xab4>
  405762:	2100      	movs	r1, #0
  405764:	f889 10c2 	strb.w	r1, [r9, #194]	; 0xc2
    ean->buf[11] = (decode < 5) ? pass->raw[i] & 0xf : decode;
  405768:	2b04      	cmp	r3, #4
  40576a:	d808      	bhi.n	40577e <_zbar_decode_ean+0xace>
  40576c:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40576e:	eb09 1303 	add.w	r3, r9, r3, lsl #4
  405772:	4413      	add	r3, r2
  405774:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
  405778:	f003 030f 	and.w	r3, r3, #15
  40577c:	e000      	b.n	405780 <_zbar_decode_ean+0xad0>
  40577e:	b2db      	uxtb	r3, r3
  405780:	f889 30c3 	strb.w	r3, [r9, #195]	; 0xc3
  405784:	e2d0      	b.n	405d28 <_zbar_decode_ean+0x1078>
        ean->left = part;
    }
    else
        ean_expand_upce(ean, pass);

    ean->width = pass->width;
  405786:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
  405788:	f8c9 30b4 	str.w	r3, [r9, #180]	; 0xb4

    if(!part)
  40578c:	f1bb 0f00 	cmp.w	fp, #0
  405790:	f000 8171 	beq.w	405a76 <_zbar_decode_ean+0xdc6>
        part = ZBAR_PARTIAL;

    if(((part == ZBAR_EAN13 ||
  405794:	f02b 0304 	bic.w	r3, fp, #4
  405798:	b29b      	uxth	r3, r3
  40579a:	2b09      	cmp	r3, #9
  40579c:	f040 82d6 	bne.w	405d4c <_zbar_decode_ean+0x109c>
  4057a0:	e2c7      	b.n	405d32 <_zbar_decode_ean+0x1082>
                                               int n)
{
    unsigned char chk = 0;
    unsigned char i, d;
    for(i = 0; i < n; i++) {
        unsigned char d = ean->buf[i];
  4057a2:	eb09 0203 	add.w	r2, r9, r3
  4057a6:	f892 60b8 	ldrb.w	r6, [r2, #184]	; 0xb8
        zassert(d < 10, -1, "i=%x d=%x chk=%x %s\n", i, d, chk,
  4057aa:	2e09      	cmp	r6, #9
  4057ac:	d91b      	bls.n	4057e6 <_zbar_decode_ean+0xb36>
  4057ae:	e002      	b.n	4057b6 <_zbar_decode_ean+0xb06>
                                               int n)
{
    unsigned char chk = 0;
    unsigned char i, d;
    for(i = 0; i < n; i++) {
        unsigned char d = ean->buf[i];
  4057b0:	462e      	mov	r6, r5
        zassert(d < 10, -1, "i=%x d=%x chk=%x %s\n", i, d, chk,
  4057b2:	2500      	movs	r5, #0
static inline signed char ean_verify_checksum (ean_decoder_t *ean,
                                               int n)
{
    unsigned char chk = 0;
    unsigned char i, d;
    for(i = 0; i < n; i++) {
  4057b4:	462f      	mov	r7, r5
        unsigned char d = ean->buf[i];
        zassert(d < 10, -1, "i=%x d=%x chk=%x %s\n", i, d, chk,
  4057b6:	4b25      	ldr	r3, [pc, #148]	; (40584c <_zbar_decode_ean+0xb9c>)
  4057b8:	681b      	ldr	r3, [r3, #0]
  4057ba:	68dc      	ldr	r4, [r3, #12]
  4057bc:	f109 00b8 	add.w	r0, r9, #184	; 0xb8
  4057c0:	2112      	movs	r1, #18
  4057c2:	4b23      	ldr	r3, [pc, #140]	; (405850 <_zbar_decode_ean+0xba0>)
  4057c4:	4798      	blx	r3
  4057c6:	4b23      	ldr	r3, [pc, #140]	; (405854 <_zbar_decode_ean+0xba4>)
  4057c8:	9300      	str	r3, [sp, #0]
  4057ca:	4b23      	ldr	r3, [pc, #140]	; (405858 <_zbar_decode_ean+0xba8>)
  4057cc:	9301      	str	r3, [sp, #4]
  4057ce:	9702      	str	r7, [sp, #8]
  4057d0:	9603      	str	r6, [sp, #12]
  4057d2:	9504      	str	r5, [sp, #16]
  4057d4:	9005      	str	r0, [sp, #20]
  4057d6:	4620      	mov	r0, r4
  4057d8:	4920      	ldr	r1, [pc, #128]	; (40585c <_zbar_decode_ean+0xbac>)
  4057da:	4a21      	ldr	r2, [pc, #132]	; (405860 <_zbar_decode_ean+0xbb0>)
  4057dc:	f240 230a 	movw	r3, #522	; 0x20a
  4057e0:	4c20      	ldr	r4, [pc, #128]	; (405864 <_zbar_decode_ean+0xbb4>)
  4057e2:	47a0      	blx	r4
  4057e4:	e0e1      	b.n	4059aa <_zbar_decode_ean+0xcfa>
                _zbar_decoder_buf_dump((void*)ean->buf, 18));
        chk += d;
  4057e6:	4435      	add	r5, r6
  4057e8:	b2ed      	uxtb	r5, r5
        if((i ^ n) & 1) {
  4057ea:	f013 0f01 	tst.w	r3, #1
  4057ee:	d007      	beq.n	405800 <_zbar_decode_ean+0xb50>
            chk += d << 1;
  4057f0:	eb05 0546 	add.w	r5, r5, r6, lsl #1
  4057f4:	f005 05ff 	and.w	r5, r5, #255	; 0xff
            if(chk >= 20)
  4057f8:	2d13      	cmp	r5, #19
                chk -= 20;
  4057fa:	bf84      	itt	hi
  4057fc:	3d14      	subhi	r5, #20
  4057fe:	b2ed      	uxtbhi	r5, r5
        }
        if(chk >= 10)
  405800:	2d09      	cmp	r5, #9
            chk -= 10;
  405802:	bf84      	itt	hi
  405804:	3d0a      	subhi	r5, #10
  405806:	b2ed      	uxtbhi	r5, r5
static inline signed char ean_verify_checksum (ean_decoder_t *ean,
                                               int n)
{
    unsigned char chk = 0;
    unsigned char i, d;
    for(i = 0; i < n; i++) {
  405808:	3301      	adds	r3, #1
  40580a:	b2db      	uxtb	r3, r3
  40580c:	461f      	mov	r7, r3
  40580e:	2b0b      	cmp	r3, #11
  405810:	ddc7      	ble.n	4057a2 <_zbar_decode_ean+0xaf2>
                chk -= 20;
        }
        if(chk >= 10)
            chk -= 10;
    }
    zassert(chk < 10, -1, "chk=%x n=%x %s", chk, n,
  405812:	2d09      	cmp	r5, #9
  405814:	d92c      	bls.n	405870 <_zbar_decode_ean+0xbc0>
  405816:	4b0d      	ldr	r3, [pc, #52]	; (40584c <_zbar_decode_ean+0xb9c>)
  405818:	681b      	ldr	r3, [r3, #0]
  40581a:	68dc      	ldr	r4, [r3, #12]
  40581c:	f109 00b8 	add.w	r0, r9, #184	; 0xb8
  405820:	2112      	movs	r1, #18
  405822:	4b0b      	ldr	r3, [pc, #44]	; (405850 <_zbar_decode_ean+0xba0>)
  405824:	4798      	blx	r3
  405826:	4b0b      	ldr	r3, [pc, #44]	; (405854 <_zbar_decode_ean+0xba4>)
  405828:	9300      	str	r3, [sp, #0]
  40582a:	4b0f      	ldr	r3, [pc, #60]	; (405868 <_zbar_decode_ean+0xbb8>)
  40582c:	9301      	str	r3, [sp, #4]
  40582e:	9502      	str	r5, [sp, #8]
  405830:	230c      	movs	r3, #12
  405832:	9303      	str	r3, [sp, #12]
  405834:	9004      	str	r0, [sp, #16]
  405836:	4620      	mov	r0, r4
  405838:	490c      	ldr	r1, [pc, #48]	; (40586c <_zbar_decode_ean+0xbbc>)
  40583a:	4a09      	ldr	r2, [pc, #36]	; (405860 <_zbar_decode_ean+0xbb0>)
  40583c:	f240 2315 	movw	r3, #533	; 0x215
  405840:	4c08      	ldr	r4, [pc, #32]	; (405864 <_zbar_decode_ean+0xbb4>)
  405842:	47a0      	blx	r4
  405844:	e0b1      	b.n	4059aa <_zbar_decode_ean+0xcfa>
  405846:	bf00      	nop
  405848:	00411248 	.word	0x00411248
  40584c:	20000440 	.word	0x20000440
  405850:	00404c05 	.word	0x00404c05
  405854:	00411414 	.word	0x00411414
  405858:	00411324 	.word	0x00411324
  40585c:	004112e0 	.word	0x004112e0
  405860:	004112b0 	.word	0x004112b0
  405864:	004083a9 	.word	0x004083a9
  405868:	00411368 	.word	0x00411368
  40586c:	0041132c 	.word	0x0041132c
            _zbar_decoder_buf_dump((void*)ean->buf, 18));
    if(chk)
  405870:	b115      	cbz	r5, 405878 <_zbar_decode_ean+0xbc8>
        chk = 10 - chk;
  405872:	f1c5 050a 	rsb	r5, r5, #10
  405876:	b2ed      	uxtb	r5, r5
    d = ean->buf[n];
  405878:	f899 60c4 	ldrb.w	r6, [r9, #196]	; 0xc4
    zassert(d < 10, -1, "n=%x d=%x chk=%x %s\n", n, d, chk,
  40587c:	2e09      	cmp	r6, #9
  40587e:	d918      	bls.n	4058b2 <_zbar_decode_ean+0xc02>
  405880:	4baf      	ldr	r3, [pc, #700]	; (405b40 <_zbar_decode_ean+0xe90>)
  405882:	681b      	ldr	r3, [r3, #0]
  405884:	68dc      	ldr	r4, [r3, #12]
  405886:	f109 00b8 	add.w	r0, r9, #184	; 0xb8
  40588a:	2112      	movs	r1, #18
  40588c:	4bad      	ldr	r3, [pc, #692]	; (405b44 <_zbar_decode_ean+0xe94>)
  40588e:	4798      	blx	r3
  405890:	4bad      	ldr	r3, [pc, #692]	; (405b48 <_zbar_decode_ean+0xe98>)
  405892:	9300      	str	r3, [sp, #0]
  405894:	4bad      	ldr	r3, [pc, #692]	; (405b4c <_zbar_decode_ean+0xe9c>)
  405896:	9301      	str	r3, [sp, #4]
  405898:	230c      	movs	r3, #12
  40589a:	9302      	str	r3, [sp, #8]
  40589c:	9603      	str	r6, [sp, #12]
  40589e:	9504      	str	r5, [sp, #16]
  4058a0:	9005      	str	r0, [sp, #20]
  4058a2:	4620      	mov	r0, r4
  4058a4:	49aa      	ldr	r1, [pc, #680]	; (405b50 <_zbar_decode_ean+0xea0>)
  4058a6:	4aab      	ldr	r2, [pc, #684]	; (405b54 <_zbar_decode_ean+0xea4>)
  4058a8:	f240 231a 	movw	r3, #538	; 0x21a
  4058ac:	4caa      	ldr	r4, [pc, #680]	; (405b58 <_zbar_decode_ean+0xea8>)
  4058ae:	47a0      	blx	r4
  4058b0:	e07b      	b.n	4059aa <_zbar_decode_ean+0xcfa>

    if(!part)
        part = ZBAR_PARTIAL;

    if(((part == ZBAR_EAN13 ||
         part == ZBAR_UPCE) && ean_verify_checksum(ean, 12)) ||
  4058b2:	42ae      	cmp	r6, r5
  4058b4:	f000 8280 	beq.w	405db8 <_zbar_decode_ean+0x1108>
  4058b8:	e077      	b.n	4059aa <_zbar_decode_ean+0xcfa>
                                               int n)
{
    unsigned char chk = 0;
    unsigned char i, d;
    for(i = 0; i < n; i++) {
        unsigned char d = ean->buf[i];
  4058ba:	eb09 0203 	add.w	r2, r9, r3
  4058be:	f892 50b8 	ldrb.w	r5, [r2, #184]	; 0xb8
        zassert(d < 10, -1, "i=%x d=%x chk=%x %s\n", i, d, chk,
  4058c2:	2d09      	cmp	r5, #9
  4058c4:	d91c      	bls.n	405900 <_zbar_decode_ean+0xc50>
  4058c6:	e001      	b.n	4058cc <_zbar_decode_ean+0xc1c>
  4058c8:	2400      	movs	r4, #0
static inline signed char ean_verify_checksum (ean_decoder_t *ean,
                                               int n)
{
    unsigned char chk = 0;
    unsigned char i, d;
    for(i = 0; i < n; i++) {
  4058ca:	4626      	mov	r6, r4
        unsigned char d = ean->buf[i];
        zassert(d < 10, -1, "i=%x d=%x chk=%x %s\n", i, d, chk,
  4058cc:	4b9c      	ldr	r3, [pc, #624]	; (405b40 <_zbar_decode_ean+0xe90>)
  4058ce:	681b      	ldr	r3, [r3, #0]
  4058d0:	68df      	ldr	r7, [r3, #12]
  4058d2:	f109 00b8 	add.w	r0, r9, #184	; 0xb8
  4058d6:	2112      	movs	r1, #18
  4058d8:	4b9a      	ldr	r3, [pc, #616]	; (405b44 <_zbar_decode_ean+0xe94>)
  4058da:	4798      	blx	r3
  4058dc:	4b9a      	ldr	r3, [pc, #616]	; (405b48 <_zbar_decode_ean+0xe98>)
  4058de:	9300      	str	r3, [sp, #0]
  4058e0:	4b9a      	ldr	r3, [pc, #616]	; (405b4c <_zbar_decode_ean+0xe9c>)
  4058e2:	9301      	str	r3, [sp, #4]
  4058e4:	9602      	str	r6, [sp, #8]
  4058e6:	9503      	str	r5, [sp, #12]
  4058e8:	9404      	str	r4, [sp, #16]
  4058ea:	9005      	str	r0, [sp, #20]
  4058ec:	4638      	mov	r0, r7
  4058ee:	499b      	ldr	r1, [pc, #620]	; (405b5c <_zbar_decode_ean+0xeac>)
  4058f0:	4a98      	ldr	r2, [pc, #608]	; (405b54 <_zbar_decode_ean+0xea4>)
  4058f2:	f240 230a 	movw	r3, #522	; 0x20a
  4058f6:	4c98      	ldr	r4, [pc, #608]	; (405b58 <_zbar_decode_ean+0xea8>)
  4058f8:	47a0      	blx	r4
  4058fa:	e056      	b.n	4059aa <_zbar_decode_ean+0xcfa>
static inline signed char ean_verify_checksum (ean_decoder_t *ean,
                                               int n)
{
    unsigned char chk = 0;
    unsigned char i, d;
    for(i = 0; i < n; i++) {
  4058fc:	2300      	movs	r3, #0
  4058fe:	461c      	mov	r4, r3
        unsigned char d = ean->buf[i];
        zassert(d < 10, -1, "i=%x d=%x chk=%x %s\n", i, d, chk,
                _zbar_decoder_buf_dump((void*)ean->buf, 18));
        chk += d;
  405900:	442c      	add	r4, r5
  405902:	b2e4      	uxtb	r4, r4
        if((i ^ n) & 1) {
  405904:	f013 0f01 	tst.w	r3, #1
  405908:	d106      	bne.n	405918 <_zbar_decode_ean+0xc68>
            chk += d << 1;
  40590a:	eb04 0445 	add.w	r4, r4, r5, lsl #1
  40590e:	b2e4      	uxtb	r4, r4
            if(chk >= 20)
  405910:	2c13      	cmp	r4, #19
                chk -= 20;
  405912:	bf84      	itt	hi
  405914:	3c14      	subhi	r4, #20
  405916:	b2e4      	uxtbhi	r4, r4
        }
        if(chk >= 10)
  405918:	2c09      	cmp	r4, #9
            chk -= 10;
  40591a:	bf84      	itt	hi
  40591c:	3c0a      	subhi	r4, #10
  40591e:	b2e4      	uxtbhi	r4, r4
static inline signed char ean_verify_checksum (ean_decoder_t *ean,
                                               int n)
{
    unsigned char chk = 0;
    unsigned char i, d;
    for(i = 0; i < n; i++) {
  405920:	3301      	adds	r3, #1
  405922:	b2db      	uxtb	r3, r3
  405924:	461e      	mov	r6, r3
  405926:	2b06      	cmp	r3, #6
  405928:	ddc7      	ble.n	4058ba <_zbar_decode_ean+0xc0a>
                chk -= 20;
        }
        if(chk >= 10)
            chk -= 10;
    }
    zassert(chk < 10, -1, "chk=%x n=%x %s", chk, n,
  40592a:	2c09      	cmp	r4, #9
  40592c:	d917      	bls.n	40595e <_zbar_decode_ean+0xcae>
  40592e:	4b84      	ldr	r3, [pc, #528]	; (405b40 <_zbar_decode_ean+0xe90>)
  405930:	681b      	ldr	r3, [r3, #0]
  405932:	68dd      	ldr	r5, [r3, #12]
  405934:	f109 00b8 	add.w	r0, r9, #184	; 0xb8
  405938:	2112      	movs	r1, #18
  40593a:	4b82      	ldr	r3, [pc, #520]	; (405b44 <_zbar_decode_ean+0xe94>)
  40593c:	4798      	blx	r3
  40593e:	4b82      	ldr	r3, [pc, #520]	; (405b48 <_zbar_decode_ean+0xe98>)
  405940:	9300      	str	r3, [sp, #0]
  405942:	4b87      	ldr	r3, [pc, #540]	; (405b60 <_zbar_decode_ean+0xeb0>)
  405944:	9301      	str	r3, [sp, #4]
  405946:	9402      	str	r4, [sp, #8]
  405948:	2307      	movs	r3, #7
  40594a:	9303      	str	r3, [sp, #12]
  40594c:	9004      	str	r0, [sp, #16]
  40594e:	4628      	mov	r0, r5
  405950:	4984      	ldr	r1, [pc, #528]	; (405b64 <_zbar_decode_ean+0xeb4>)
  405952:	4a80      	ldr	r2, [pc, #512]	; (405b54 <_zbar_decode_ean+0xea4>)
  405954:	f240 2315 	movw	r3, #533	; 0x215
  405958:	4c7f      	ldr	r4, [pc, #508]	; (405b58 <_zbar_decode_ean+0xea8>)
  40595a:	47a0      	blx	r4
  40595c:	e025      	b.n	4059aa <_zbar_decode_ean+0xcfa>
            _zbar_decoder_buf_dump((void*)ean->buf, 18));
    if(chk)
  40595e:	b114      	cbz	r4, 405966 <_zbar_decode_ean+0xcb6>
        chk = 10 - chk;
  405960:	f1c4 040a 	rsb	r4, r4, #10
  405964:	b2e4      	uxtb	r4, r4
    d = ean->buf[n];
  405966:	f899 50bf 	ldrb.w	r5, [r9, #191]	; 0xbf
    zassert(d < 10, -1, "n=%x d=%x chk=%x %s\n", n, d, chk,
  40596a:	2d09      	cmp	r5, #9
  40596c:	d918      	bls.n	4059a0 <_zbar_decode_ean+0xcf0>
  40596e:	4b74      	ldr	r3, [pc, #464]	; (405b40 <_zbar_decode_ean+0xe90>)
  405970:	681b      	ldr	r3, [r3, #0]
  405972:	68de      	ldr	r6, [r3, #12]
  405974:	f109 00b8 	add.w	r0, r9, #184	; 0xb8
  405978:	2112      	movs	r1, #18
  40597a:	4b72      	ldr	r3, [pc, #456]	; (405b44 <_zbar_decode_ean+0xe94>)
  40597c:	4798      	blx	r3
  40597e:	4b72      	ldr	r3, [pc, #456]	; (405b48 <_zbar_decode_ean+0xe98>)
  405980:	9300      	str	r3, [sp, #0]
  405982:	4b72      	ldr	r3, [pc, #456]	; (405b4c <_zbar_decode_ean+0xe9c>)
  405984:	9301      	str	r3, [sp, #4]
  405986:	2307      	movs	r3, #7
  405988:	9302      	str	r3, [sp, #8]
  40598a:	9503      	str	r5, [sp, #12]
  40598c:	9404      	str	r4, [sp, #16]
  40598e:	9005      	str	r0, [sp, #20]
  405990:	4630      	mov	r0, r6
  405992:	496f      	ldr	r1, [pc, #444]	; (405b50 <_zbar_decode_ean+0xea0>)
  405994:	4a6f      	ldr	r2, [pc, #444]	; (405b54 <_zbar_decode_ean+0xea4>)
  405996:	f240 231a 	movw	r3, #538	; 0x21a
  40599a:	4c6f      	ldr	r4, [pc, #444]	; (405b58 <_zbar_decode_ean+0xea8>)
  40599c:	47a0      	blx	r4
  40599e:	e004      	b.n	4059aa <_zbar_decode_ean+0xcfa>
    if(!part)
        part = ZBAR_PARTIAL;

    if(((part == ZBAR_EAN13 ||
         part == ZBAR_UPCE) && ean_verify_checksum(ean, 12)) ||
       (part == ZBAR_EAN8 && ean_verify_checksum(ean, 7))) {
  4059a0:	42a5      	cmp	r5, r4
  4059a2:	bf08      	it	eq
  4059a4:	f04f 0b08 	moveq.w	fp, #8
  4059a8:	d067      	beq.n	405a7a <_zbar_decode_ean+0xdca>
        /* invalid checksum */
        if(ean->right)
  4059aa:	f8b9 30aa 	ldrh.w	r3, [r9, #170]	; 0xaa
  4059ae:	2b00      	cmp	r3, #0
  4059b0:	f000 81d1 	beq.w	405d56 <_zbar_decode_ean+0x10a6>
	  ean->left = ZBAR_NONE;
  4059b4:	f04f 0b00 	mov.w	fp, #0
  4059b8:	f8a9 b0a8 	strh.w	fp, [r9, #168]	; 0xa8
  4059bc:	e05d      	b.n	405a7a <_zbar_decode_ean+0xdca>
        else
	  ean->right = ZBAR_NONE;
        part = ZBAR_NONE;
    }

    if(part == ZBAR_EAN13) {
  4059be:	f1bb 0f0d 	cmp.w	fp, #13
  4059c2:	d127      	bne.n	405a14 <_zbar_decode_ean+0xd64>
        /* special case EAN-13 subsets */
        if(!ean->buf[0] && TEST_CFG(ean->upca_config, ZBAR_CFG_ENABLE))
  4059c4:	f999 30b8 	ldrsb.w	r3, [r9, #184]	; 0xb8
  4059c8:	b92b      	cbnz	r3, 4059d6 <_zbar_decode_ean+0xd26>
  4059ca:	f8d9 30d4 	ldr.w	r3, [r9, #212]	; 0xd4
  4059ce:	f013 0f01 	tst.w	r3, #1
  4059d2:	f040 81c3 	bne.w	405d5c <_zbar_decode_ean+0x10ac>
            part = ZBAR_UPCA;
        else if(ean->buf[0] == 9 && ean->buf[1] == 7) {
  4059d6:	f9b9 20b8 	ldrsh.w	r2, [r9, #184]	; 0xb8
  4059da:	f240 7309 	movw	r3, #1801	; 0x709
  4059de:	429a      	cmp	r2, r3
  4059e0:	d14f      	bne.n	405a82 <_zbar_decode_ean+0xdd2>
            /* ISBN-10 has priority over ISBN-13(?) */
            if(ean->buf[2] == 8 &&
  4059e2:	f899 30ba 	ldrb.w	r3, [r9, #186]	; 0xba
  4059e6:	b25a      	sxtb	r2, r3
  4059e8:	2a08      	cmp	r2, #8
  4059ea:	d106      	bne.n	4059fa <_zbar_decode_ean+0xd4a>
               TEST_CFG(ean->isbn10_config, ZBAR_CFG_ENABLE))
  4059ec:	f8d9 30dc 	ldr.w	r3, [r9, #220]	; 0xdc
        /* special case EAN-13 subsets */
        if(!ean->buf[0] && TEST_CFG(ean->upca_config, ZBAR_CFG_ENABLE))
            part = ZBAR_UPCA;
        else if(ean->buf[0] == 9 && ean->buf[1] == 7) {
            /* ISBN-10 has priority over ISBN-13(?) */
            if(ean->buf[2] == 8 &&
  4059f0:	f013 0f01 	tst.w	r3, #1
  4059f4:	f040 81b5 	bne.w	405d62 <_zbar_decode_ean+0x10b2>
  4059f8:	e003      	b.n	405a02 <_zbar_decode_ean+0xd52>
               TEST_CFG(ean->isbn10_config, ZBAR_CFG_ENABLE))
                part = ZBAR_ISBN10;
            else if((ean->buf[2] == 8 || ean->buf[2] == 9) &&
  4059fa:	3b08      	subs	r3, #8
  4059fc:	b2db      	uxtb	r3, r3
  4059fe:	2b01      	cmp	r3, #1
  405a00:	d83f      	bhi.n	405a82 <_zbar_decode_ean+0xdd2>
               TEST_CFG(ean->isbn13_config, ZBAR_CFG_ENABLE))
  405a02:	f8d9 30e0 	ldr.w	r3, [r9, #224]	; 0xe0
  405a06:	f003 0301 	and.w	r3, r3, #1
                part = ZBAR_ISBN13;
  405a0a:	2b00      	cmp	r3, #0
  405a0c:	bf18      	it	ne
  405a0e:	f04f 0b0e 	movne.w	fp, #14
  405a12:	e036      	b.n	405a82 <_zbar_decode_ean+0xdd2>
        }
    }
    else if(part == ZBAR_UPCE) {
  405a14:	f1bb 0f09 	cmp.w	fp, #9
  405a18:	d12f      	bne.n	405a7a <_zbar_decode_ean+0xdca>
        if(TEST_CFG(ean->upce_config, ZBAR_CFG_ENABLE)) {
  405a1a:	f8d9 30d8 	ldr.w	r3, [r9, #216]	; 0xd8
  405a1e:	f013 0f01 	tst.w	r3, #1
  405a22:	d019      	beq.n	405a58 <_zbar_decode_ean+0xda8>
            /* UPC-E was decompressed for checksum verification,
             * but user requested compressed result
             */
            ean->buf[0] = ean->buf[1] = 0;
  405a24:	2300      	movs	r3, #0
  405a26:	f889 30b9 	strb.w	r3, [r9, #185]	; 0xb9
  405a2a:	f889 30b8 	strb.w	r3, [r9, #184]	; 0xb8
  405a2e:	f10a 0170 	add.w	r1, sl, #112	; 0x70
  405a32:	f109 02b9 	add.w	r2, r9, #185	; 0xb9
  405a36:	f109 00bf 	add.w	r0, r9, #191	; 0xbf
            for(i = 2; i < 8; i++)
                ean->buf[i] = pass->raw[i - 1] & 0xf;
  405a3a:	f811 3f01 	ldrb.w	r3, [r1, #1]!
  405a3e:	f003 030f 	and.w	r3, r3, #15
  405a42:	f802 3f01 	strb.w	r3, [r2, #1]!
        if(TEST_CFG(ean->upce_config, ZBAR_CFG_ENABLE)) {
            /* UPC-E was decompressed for checksum verification,
             * but user requested compressed result
             */
            ean->buf[0] = ean->buf[1] = 0;
            for(i = 2; i < 8; i++)
  405a46:	4282      	cmp	r2, r0
  405a48:	d1f7      	bne.n	405a3a <_zbar_decode_ean+0xd8a>
                ean->buf[i] = pass->raw[i - 1] & 0xf;
            ean->buf[i] = pass->raw[0] & 0xf;
  405a4a:	f894 3070 	ldrb.w	r3, [r4, #112]	; 0x70
  405a4e:	f003 030f 	and.w	r3, r3, #15
  405a52:	f889 30c0 	strb.w	r3, [r9, #192]	; 0xc0
  405a56:	e014      	b.n	405a82 <_zbar_decode_ean+0xdd2>
        }
        else if(TEST_CFG(ean->upca_config, ZBAR_CFG_ENABLE))
  405a58:	f8d9 30d4 	ldr.w	r3, [r9, #212]	; 0xd4
  405a5c:	f013 0f01 	tst.w	r3, #1
  405a60:	f040 8182 	bne.w	405d68 <_zbar_decode_ean+0x10b8>
            /* UPC-E reported as UPC-A has priority over EAN-13 */
            part = ZBAR_UPCA;
        else if(TEST_CFG(ean->ean13_config, ZBAR_CFG_ENABLE))
  405a64:	f8d9 30cc 	ldr.w	r3, [r9, #204]	; 0xcc
  405a68:	f013 0f01 	tst.w	r3, #1
  405a6c:	f040 817f 	bne.w	405d6e <_zbar_decode_ean+0x10be>
            dbprintf(2, "      ean[%x/%x]: idx=%x st=%d s=%d",
                     i, pass_idx, dcode->idx, pass->state, dcode->ean.s4);
            part = decode_pass(dcode, pass);
            if(part) {
                /* update accumulated data from new partial decode */
                sym = integrate_partial(&dcode->ean, pass, part);
  405a70:	f04f 0b00 	mov.w	fp, #0
  405a74:	e107      	b.n	405c86 <_zbar_decode_ean+0xfd6>
        ean_expand_upce(ean, pass);

    ean->width = pass->width;

    if(!part)
        part = ZBAR_PARTIAL;
  405a76:	f04f 0b01 	mov.w	fp, #1
                     i, pass_idx, dcode->idx, pass->state, dcode->ean.s4);
            part = decode_pass(dcode, pass);
            if(part) {
                /* update accumulated data from new partial decode */
                sym = integrate_partial(&dcode->ean, pass, part);
                if(sym) {
  405a7a:	f1bb 0f00 	cmp.w	fp, #0
  405a7e:	f000 8102 	beq.w	405c86 <_zbar_decode_ean+0xfd6>
                    /* this pass valid => _reset_ all passes */
                    dbprintf(2, " sym=%x", sym);
                    dcode->ean.pass[0].state = dcode->ean.pass[1].state = -1;
  405a82:	23ff      	movs	r3, #255	; 0xff
  405a84:	f889 3078 	strb.w	r3, [r9, #120]	; 0x78
  405a88:	f889 3068 	strb.w	r3, [r9, #104]	; 0x68
                    dcode->ean.pass[2].state = dcode->ean.pass[3].state = -1;
  405a8c:	f889 3098 	strb.w	r3, [r9, #152]	; 0x98
  405a90:	f889 3088 	strb.w	r3, [r9, #136]	; 0x88
                    if(sym > ZBAR_PARTIAL) {
  405a94:	f1bb 0f01 	cmp.w	fp, #1
  405a98:	f240 80f5 	bls.w	405c86 <_zbar_decode_ean+0xfd6>

/* acquire shared state lock */
static inline char acquire_lock (zbar_decoder_t *dcode,
                                 zbar_symbol_type_t req)
{
    if(dcode->lock) {
  405a9c:	f8b9 3046 	ldrh.w	r3, [r9, #70]	; 0x46
  405aa0:	2b00      	cmp	r3, #0
  405aa2:	f040 80ee 	bne.w	405c82 <_zbar_decode_ean+0xfd2>
        dbprintf(2, " [locked %d]\n", dcode->lock);
        return(1);
    }
    dcode->lock = req;
  405aa6:	f8a9 b046 	strh.w	fp, [r9, #70]	; 0x46
{
    ean_decoder_t *ean = &dcode->ean;
    zbar_symbol_type_t base = sym;
    int i = 0, j = 0;
    if(base > ZBAR_PARTIAL) {
        if(base == ZBAR_UPCA)
  405aaa:	f1bb 0f0c 	cmp.w	fp, #12
  405aae:	d033      	beq.n	405b18 <_zbar_decode_ean+0xe68>
            i = 1;
        else if(base == ZBAR_UPCE) {
  405ab0:	f1bb 0f09 	cmp.w	fp, #9
  405ab4:	d023      	beq.n	405afe <_zbar_decode_ean+0xe4e>
            i = 1;
            base--;
        }
        else if(base == ZBAR_ISBN13)
  405ab6:	f1bb 0f0e 	cmp.w	fp, #14
  405aba:	d039      	beq.n	405b30 <_zbar_decode_ean+0xe80>
            base = ZBAR_EAN13;
        else if(base == ZBAR_ISBN10)
  405abc:	f1bb 0f0a 	cmp.w	fp, #10
  405ac0:	f040 8158 	bne.w	405d74 <_zbar_decode_ean+0x10c4>
  405ac4:	e057      	b.n	405b76 <_zbar_decode_ean+0xec6>
}

static inline unsigned ean_get_config (ean_decoder_t *ean,
                                       zbar_symbol_type_t sym)
{
    switch(sym) {
  405ac6:	f1ab 0302 	sub.w	r3, fp, #2
  405aca:	2b0c      	cmp	r3, #12
  405acc:	d84c      	bhi.n	405b68 <_zbar_decode_ean+0xeb8>
  405ace:	e8df f003 	tbb	[pc, r3]
  405ad2:	4b07      	.short	0x4b07
  405ad4:	4b4b0c4b 	.word	0x4b4b0c4b
  405ad8:	4b1e1911 	.word	0x4b1e1911
  405adc:	2a25      	.short	0x2a25
  405ade:	31          	.byte	0x31
  405adf:	00          	.byte	0x00
    case ZBAR_EAN2:   return(ean->ean2_config);
  405ae0:	f8d9 10e8 	ldr.w	r1, [r9, #232]	; 0xe8
  405ae4:	465b      	mov	r3, fp
static inline void postprocess (zbar_decoder_t *dcode,
                                zbar_symbol_type_t sym)
{
    ean_decoder_t *ean = &dcode->ean;
    zbar_symbol_type_t base = sym;
    int i = 0, j = 0;
  405ae6:	2200      	movs	r2, #0
  405ae8:	e15e      	b.n	405da8 <_zbar_decode_ean+0x10f8>
    case ZBAR_EAN5:   return(ean->ean5_config);
  405aea:	f8d9 10e4 	ldr.w	r1, [r9, #228]	; 0xe4
  405aee:	465b      	mov	r3, fp
  405af0:	2200      	movs	r2, #0
  405af2:	e159      	b.n	405da8 <_zbar_decode_ean+0x10f8>
    case ZBAR_EAN8:   return(ean->ean8_config);
  405af4:	f8d9 10d0 	ldr.w	r1, [r9, #208]	; 0xd0
  405af8:	465b      	mov	r3, fp
  405afa:	2200      	movs	r2, #0
  405afc:	e154      	b.n	405da8 <_zbar_decode_ean+0x10f8>
    if(base > ZBAR_PARTIAL) {
        if(base == ZBAR_UPCA)
            i = 1;
        else if(base == ZBAR_UPCE) {
            i = 1;
  405afe:	2201      	movs	r2, #1
            base--;
  405b00:	2308      	movs	r3, #8
  405b02:	e001      	b.n	405b08 <_zbar_decode_ean+0xe58>
}

static inline unsigned ean_get_config (ean_decoder_t *ean,
                                       zbar_symbol_type_t sym)
{
    switch(sym) {
  405b04:	465b      	mov	r3, fp
static inline void postprocess (zbar_decoder_t *dcode,
                                zbar_symbol_type_t sym)
{
    ean_decoder_t *ean = &dcode->ean;
    zbar_symbol_type_t base = sym;
    int i = 0, j = 0;
  405b06:	2200      	movs	r2, #0
    case ZBAR_EAN2:   return(ean->ean2_config);
    case ZBAR_EAN5:   return(ean->ean5_config);
    case ZBAR_EAN8:   return(ean->ean8_config);
    case ZBAR_UPCE:   return(ean->upce_config);
  405b08:	f8d9 10d8 	ldr.w	r1, [r9, #216]	; 0xd8
  405b0c:	e02f      	b.n	405b6e <_zbar_decode_ean+0xebe>
    case ZBAR_ISBN10: return(ean->isbn10_config);
  405b0e:	f8d9 10dc 	ldr.w	r1, [r9, #220]	; 0xdc
  405b12:	465b      	mov	r3, fp
  405b14:	2200      	movs	r2, #0
  405b16:	e147      	b.n	405da8 <_zbar_decode_ean+0x10f8>
    if(base > ZBAR_PARTIAL) {
        if(base == ZBAR_UPCA)
            i = 1;
  405b18:	2201      	movs	r2, #1
  405b1a:	e000      	b.n	405b1e <_zbar_decode_ean+0xe6e>
static inline void postprocess (zbar_decoder_t *dcode,
                                zbar_symbol_type_t sym)
{
    ean_decoder_t *ean = &dcode->ean;
    zbar_symbol_type_t base = sym;
    int i = 0, j = 0;
  405b1c:	2200      	movs	r2, #0
    case ZBAR_UPCA:   return(ean->upca_config);
  405b1e:	f8d9 10d4 	ldr.w	r1, [r9, #212]	; 0xd4
  405b22:	230c      	movs	r3, #12
  405b24:	e140      	b.n	405da8 <_zbar_decode_ean+0x10f8>
    case ZBAR_EAN13:  return(ean->ean13_config);
  405b26:	f8d9 10cc 	ldr.w	r1, [r9, #204]	; 0xcc
  405b2a:	465b      	mov	r3, fp
  405b2c:	2200      	movs	r2, #0
  405b2e:	e13b      	b.n	405da8 <_zbar_decode_ean+0x10f8>
        else if(base == ZBAR_UPCE) {
            i = 1;
            base--;
        }
        else if(base == ZBAR_ISBN13)
            base = ZBAR_EAN13;
  405b30:	230d      	movs	r3, #13
  405b32:	e000      	b.n	405b36 <_zbar_decode_ean+0xe86>
}

static inline unsigned ean_get_config (ean_decoder_t *ean,
                                       zbar_symbol_type_t sym)
{
    switch(sym) {
  405b34:	465b      	mov	r3, fp
    case ZBAR_EAN8:   return(ean->ean8_config);
    case ZBAR_UPCE:   return(ean->upce_config);
    case ZBAR_ISBN10: return(ean->isbn10_config);
    case ZBAR_UPCA:   return(ean->upca_config);
    case ZBAR_EAN13:  return(ean->ean13_config);
    case ZBAR_ISBN13: return(ean->isbn13_config);
  405b36:	f8d9 10e0 	ldr.w	r1, [r9, #224]	; 0xe0
  405b3a:	2200      	movs	r2, #0
  405b3c:	e017      	b.n	405b6e <_zbar_decode_ean+0xebe>
  405b3e:	bf00      	nop
  405b40:	20000440 	.word	0x20000440
  405b44:	00404c05 	.word	0x00404c05
  405b48:	00411414 	.word	0x00411414
  405b4c:	00411324 	.word	0x00411324
  405b50:	00411374 	.word	0x00411374
  405b54:	004112b0 	.word	0x004112b0
  405b58:	004083a9 	.word	0x004083a9
  405b5c:	004112e0 	.word	0x004112e0
  405b60:	00411368 	.word	0x00411368
  405b64:	0041132c 	.word	0x0041132c
}

static inline unsigned ean_get_config (ean_decoder_t *ean,
                                       zbar_symbol_type_t sym)
{
    switch(sym) {
  405b68:	465b      	mov	r3, fp
static inline void postprocess (zbar_decoder_t *dcode,
                                zbar_symbol_type_t sym)
{
    ean_decoder_t *ean = &dcode->ean;
    zbar_symbol_type_t base = sym;
    int i = 0, j = 0;
  405b6a:	2200      	movs	r2, #0
    case ZBAR_UPCE:   return(ean->upce_config);
    case ZBAR_ISBN10: return(ean->isbn10_config);
    case ZBAR_UPCA:   return(ean->upca_config);
    case ZBAR_EAN13:  return(ean->ean13_config);
    case ZBAR_ISBN13: return(ean->isbn13_config);
    default:          return(0);
  405b6c:	4611      	mov	r1, r2
            base = ZBAR_EAN13;
        else if(base == ZBAR_ISBN10)
            i = 3;

        if(base == ZBAR_ISBN10 ||
           (base > ZBAR_EAN5 &&
  405b6e:	f011 0f04 	tst.w	r1, #4
  405b72:	d104      	bne.n	405b7e <_zbar_decode_ean+0xece>
  405b74:	e001      	b.n	405b7a <_zbar_decode_ean+0xeca>
/* copy result to output buffer */
static inline void postprocess (zbar_decoder_t *dcode,
                                zbar_symbol_type_t sym)
{
    ean_decoder_t *ean = &dcode->ean;
    zbar_symbol_type_t base = sym;
  405b76:	465b      	mov	r3, fp
            base--;
        }
        else if(base == ZBAR_ISBN13)
            base = ZBAR_EAN13;
        else if(base == ZBAR_ISBN10)
            i = 3;
  405b78:	2203      	movs	r2, #3

        if(base == ZBAR_ISBN10 ||
           (base > ZBAR_EAN5 &&
            !TEST_CFG(ean_get_config(ean, sym), ZBAR_CFG_EMIT_CHECK)))
            base--;
  405b7a:	3b01      	subs	r3, #1
  405b7c:	b29b      	uxth	r3, r3

        for(; j < base && ean->buf[i] >= 0; i++, j++)
  405b7e:	461c      	mov	r4, r3
  405b80:	2b00      	cmp	r3, #0
  405b82:	dd69      	ble.n	405c58 <_zbar_decode_ean+0xfa8>
  405b84:	eb09 0302 	add.w	r3, r9, r2
  405b88:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
  405b8c:	f013 0f80 	tst.w	r3, #128	; 0x80
  405b90:	d164      	bne.n	405c5c <_zbar_decode_ean+0xfac>
  405b92:	32b8      	adds	r2, #184	; 0xb8
  405b94:	eb09 0002 	add.w	r0, r9, r2
  405b98:	2200      	movs	r2, #0
            dcode->buf[j] = ean->buf[i] + '0';
  405b9a:	f8d9 105c 	ldr.w	r1, [r9, #92]	; 0x5c
  405b9e:	3330      	adds	r3, #48	; 0x30
  405ba0:	548b      	strb	r3, [r1, r2]
        if(base == ZBAR_ISBN10 ||
           (base > ZBAR_EAN5 &&
            !TEST_CFG(ean_get_config(ean, sym), ZBAR_CFG_EMIT_CHECK)))
            base--;

        for(; j < base && ean->buf[i] >= 0; i++, j++)
  405ba2:	3201      	adds	r2, #1
  405ba4:	4294      	cmp	r4, r2
  405ba6:	d006      	beq.n	405bb6 <_zbar_decode_ean+0xf06>
  405ba8:	f810 3f01 	ldrb.w	r3, [r0, #1]!
  405bac:	f013 0f80 	tst.w	r3, #128	; 0x80
  405bb0:	d0f3      	beq.n	405b9a <_zbar_decode_ean+0xeea>
  405bb2:	4613      	mov	r3, r2
  405bb4:	e000      	b.n	405bb8 <_zbar_decode_ean+0xf08>
  405bb6:	4613      	mov	r3, r2
            dcode->buf[j] = ean->buf[i] + '0';

        if(sym == ZBAR_ISBN10 && j == 9 &&
  405bb8:	f1bb 0f0a 	cmp.w	fp, #10
  405bbc:	d151      	bne.n	405c62 <_zbar_decode_ean+0xfb2>
  405bbe:	2b09      	cmp	r3, #9
  405bc0:	d14f      	bne.n	405c62 <_zbar_decode_ean+0xfb2>
  405bc2:	f8d9 20dc 	ldr.w	r2, [r9, #220]	; 0xdc
  405bc6:	f012 0f04 	tst.w	r2, #4
  405bca:	d049      	beq.n	405c60 <_zbar_decode_ean+0xfb0>
           TEST_CFG(ean->isbn10_config, ZBAR_CFG_EMIT_CHECK))
            /* recalculate ISBN-10 check digit */
            dcode->buf[j++] = isbn10_calc_checksum(ean);
  405bcc:	f8d9 705c 	ldr.w	r7, [r9, #92]	; 0x5c
static inline unsigned char isbn10_calc_checksum (ean_decoder_t *ean)
{
    unsigned int chk = 0;
    unsigned char w;
    for(w = 10; w > 1; w--) {
        unsigned char d = ean->buf[13 - w];
  405bd0:	f899 40bb 	ldrb.w	r4, [r9, #187]	; 0xbb
        zassert(d < 10, '?', "w=%x d=%x chk=%x %s\n", w, d, chk,
  405bd4:	2c09      	cmp	r4, #9
  405bd6:	f240 80d4 	bls.w	405d82 <_zbar_decode_ean+0x10d2>
  405bda:	e005      	b.n	405be8 <_zbar_decode_ean+0xf38>
static inline unsigned char isbn10_calc_checksum (ean_decoder_t *ean)
{
    unsigned int chk = 0;
    unsigned char w;
    for(w = 10; w > 1; w--) {
        unsigned char d = ean->buf[13 - w];
  405bdc:	461e      	mov	r6, r3
  405bde:	f812 4f01 	ldrb.w	r4, [r2, #1]!
        zassert(d < 10, '?', "w=%x d=%x chk=%x %s\n", w, d, chk,
  405be2:	2c09      	cmp	r4, #9
  405be4:	d91c      	bls.n	405c20 <_zbar_decode_ean+0xf70>
  405be6:	e001      	b.n	405bec <_zbar_decode_ean+0xf3c>
    return(0);
}

static inline unsigned char isbn10_calc_checksum (ean_decoder_t *ean)
{
    unsigned int chk = 0;
  405be8:	2500      	movs	r5, #0
    unsigned char w;
    for(w = 10; w > 1; w--) {
        unsigned char d = ean->buf[13 - w];
  405bea:	260a      	movs	r6, #10
        zassert(d < 10, '?', "w=%x d=%x chk=%x %s\n", w, d, chk,
  405bec:	4b77      	ldr	r3, [pc, #476]	; (405dcc <_zbar_decode_ean+0x111c>)
  405bee:	681b      	ldr	r3, [r3, #0]
  405bf0:	68db      	ldr	r3, [r3, #12]
  405bf2:	9309      	str	r3, [sp, #36]	; 0x24
  405bf4:	f109 00b8 	add.w	r0, r9, #184	; 0xb8
  405bf8:	2112      	movs	r1, #18
  405bfa:	4b75      	ldr	r3, [pc, #468]	; (405dd0 <_zbar_decode_ean+0x1120>)
  405bfc:	4798      	blx	r3
  405bfe:	4b75      	ldr	r3, [pc, #468]	; (405dd4 <_zbar_decode_ean+0x1124>)
  405c00:	9300      	str	r3, [sp, #0]
  405c02:	4b75      	ldr	r3, [pc, #468]	; (405dd8 <_zbar_decode_ean+0x1128>)
  405c04:	9301      	str	r3, [sp, #4]
  405c06:	9602      	str	r6, [sp, #8]
  405c08:	9403      	str	r4, [sp, #12]
  405c0a:	9504      	str	r5, [sp, #16]
  405c0c:	9005      	str	r0, [sp, #20]
  405c0e:	9809      	ldr	r0, [sp, #36]	; 0x24
  405c10:	4972      	ldr	r1, [pc, #456]	; (405ddc <_zbar_decode_ean+0x112c>)
  405c12:	4a73      	ldr	r2, [pc, #460]	; (405de0 <_zbar_decode_ean+0x1130>)
  405c14:	f240 232a 	movw	r3, #554	; 0x22a
  405c18:	4c72      	ldr	r4, [pc, #456]	; (405de4 <_zbar_decode_ean+0x1134>)
  405c1a:	47a0      	blx	r4
  405c1c:	233f      	movs	r3, #63	; 0x3f
  405c1e:	e018      	b.n	405c52 <_zbar_decode_ean+0xfa2>
                _zbar_decoder_buf_dump((void*)ean->buf, 18));
        chk += d * w;
  405c20:	fb04 5503 	mla	r5, r4, r3, r5
  405c24:	3b01      	subs	r3, #1

static inline unsigned char isbn10_calc_checksum (ean_decoder_t *ean)
{
    unsigned int chk = 0;
    unsigned char w;
    for(w = 10; w > 1; w--) {
  405c26:	428a      	cmp	r2, r1
  405c28:	d1d8      	bne.n	405bdc <_zbar_decode_ean+0xf2c>
        unsigned char d = ean->buf[13 - w];
        zassert(d < 10, '?', "w=%x d=%x chk=%x %s\n", w, d, chk,
                _zbar_decoder_buf_dump((void*)ean->buf, 18));
        chk += d * w;
    }
    chk = chk % 11;
  405c2a:	4b6f      	ldr	r3, [pc, #444]	; (405de8 <_zbar_decode_ean+0x1138>)
  405c2c:	fba3 2305 	umull	r2, r3, r3, r5
  405c30:	08db      	lsrs	r3, r3, #3
  405c32:	eb03 0283 	add.w	r2, r3, r3, lsl #2
  405c36:	eb03 0342 	add.w	r3, r3, r2, lsl #1
    if(!chk)
  405c3a:	1aeb      	subs	r3, r5, r3
  405c3c:	d006      	beq.n	405c4c <_zbar_decode_ean+0xf9c>
        return('0');
    chk = 11 - chk;
  405c3e:	f1c3 030b 	rsb	r3, r3, #11
    if(chk < 10)
  405c42:	2b09      	cmp	r3, #9
  405c44:	d804      	bhi.n	405c50 <_zbar_decode_ean+0xfa0>
        return(chk + '0');
  405c46:	3330      	adds	r3, #48	; 0x30
  405c48:	b2db      	uxtb	r3, r3
  405c4a:	e002      	b.n	405c52 <_zbar_decode_ean+0xfa2>
                _zbar_decoder_buf_dump((void*)ean->buf, 18));
        chk += d * w;
    }
    chk = chk % 11;
    if(!chk)
        return('0');
  405c4c:	2330      	movs	r3, #48	; 0x30
  405c4e:	e000      	b.n	405c52 <_zbar_decode_ean+0xfa2>
    chk = 11 - chk;
    if(chk < 10)
        return(chk + '0');
    return('X');
  405c50:	2358      	movs	r3, #88	; 0x58
            dcode->buf[j] = ean->buf[i] + '0';

        if(sym == ZBAR_ISBN10 && j == 9 &&
           TEST_CFG(ean->isbn10_config, ZBAR_CFG_EMIT_CHECK))
            /* recalculate ISBN-10 check digit */
            dcode->buf[j++] = isbn10_calc_checksum(ean);
  405c52:	727b      	strb	r3, [r7, #9]
  405c54:	220a      	movs	r2, #10
  405c56:	e004      	b.n	405c62 <_zbar_decode_ean+0xfb2>
        if(base == ZBAR_ISBN10 ||
           (base > ZBAR_EAN5 &&
            !TEST_CFG(ean_get_config(ean, sym), ZBAR_CFG_EMIT_CHECK)))
            base--;

        for(; j < base && ean->buf[i] >= 0; i++, j++)
  405c58:	2200      	movs	r2, #0
  405c5a:	e002      	b.n	405c62 <_zbar_decode_ean+0xfb2>
  405c5c:	2200      	movs	r2, #0
  405c5e:	e000      	b.n	405c62 <_zbar_decode_ean+0xfb2>
            dcode->buf[j] = ean->buf[i] + '0';

        if(sym == ZBAR_ISBN10 && j == 9 &&
  405c60:	461a      	mov	r2, r3
           TEST_CFG(ean->isbn10_config, ZBAR_CFG_EMIT_CHECK))
            /* recalculate ISBN-10 check digit */
            dcode->buf[j++] = isbn10_calc_checksum(ean);
    }
    dcode->buflen = j;
  405c62:	f8c9 2058 	str.w	r2, [r9, #88]	; 0x58
    dcode->buf[j] = '\0';
  405c66:	f8d9 305c 	ldr.w	r3, [r9, #92]	; 0x5c
  405c6a:	2100      	movs	r1, #0
  405c6c:	5499      	strb	r1, [r3, r2]
    dcode->direction = 1 - 2 * ean->direction;
  405c6e:	f8d9 30ac 	ldr.w	r3, [r9, #172]	; 0xac
  405c72:	005b      	lsls	r3, r3, #1
  405c74:	f1c3 0301 	rsb	r3, r3, #1
  405c78:	f8c9 304c 	str.w	r3, [r9, #76]	; 0x4c
    dcode->modifiers = 0;
  405c7c:	f8c9 1048 	str.w	r1, [r9, #72]	; 0x48
  405c80:	e001      	b.n	405c86 <_zbar_decode_ean+0xfd6>
                    if(sym > ZBAR_PARTIAL) {
                        if(!acquire_lock(dcode, sym))
                            postprocess(dcode, sym);
                        else {
                            dbprintf(1, " [locked %d]", dcode->lock);
                            sym = ZBAR_PARTIAL;
  405c82:	f04f 0b01 	mov.w	fp, #1
  405c86:	f108 0801 	add.w	r8, r8, #1
  405c8a:	f10a 0a10 	add.w	sl, sl, #16

    /* update latest character width */
    dcode->ean.s4 -= get_width(dcode, 4);
    dcode->ean.s4 += get_width(dcode, 0);

    for(i = 0; i < 4; i++) {
  405c8e:	f1b8 0f04 	cmp.w	r8, #4
  405c92:	f47f a82a 	bne.w	404cea <_zbar_decode_ean+0x3a>
  405c96:	e094      	b.n	405dc2 <_zbar_decode_ean+0x1112>
             pass->raw[4] & 0xf, pass->raw[5] & 0xf,
             pass->raw[6] & 0xf, par);

    if(TEST_CFG(ean->ean13_config, ZBAR_CFG_ENABLE)) {
        if(!par)
            return(ZBAR_EAN13 | EAN_RIGHT);
  405c98:	f241 000d 	movw	r0, #4109	; 0x100d
  405c9c:	e004      	b.n	405ca8 <_zbar_decode_ean+0xff8>
        if(par & 0x20)
            return(ZBAR_EAN13 | EAN_LEFT);
  405c9e:	200d      	movs	r0, #13
  405ca0:	e002      	b.n	405ca8 <_zbar_decode_ean+0xff8>
    }
    if(par && !(par & 0x20))
        return(ZBAR_UPCE);
  405ca2:	2009      	movs	r0, #9
  405ca4:	e000      	b.n	405ca8 <_zbar_decode_ean+0xff8>
  405ca6:	2009      	movs	r0, #9
	  zbar_symbol_type_t part = ZBAR_NONE;
	  dbprintf(2, " fwd=%x", fwd);
	  if(!aux_end(dcode, fwd) && pass->raw[5] != 0xff)
	    part = ean_part_end7(&dcode->ean, pass, fwd);
	  if(part)
	    dcode->ean.direction = (pass->state & STATE_REV) != 0;
  405ca8:	f994 3068 	ldrsb.w	r3, [r4, #104]	; 0x68
  405cac:	0fdb      	lsrs	r3, r3, #31
  405cae:	f8c9 30ac 	str.w	r3, [r9, #172]	; 0xac
  405cb2:	f7ff babd 	b.w	405230 <_zbar_decode_ean+0x580>
                dcode->ean.direction = (pass->state & STATE_REV) != 0;
            pass->state = -1;
            return(part);
        }
	else if((idx == 0x18 || idx == 0x19)) {
	  zbar_symbol_type_t part = ZBAR_NONE;
  405cb6:	2000      	movs	r0, #0
  405cb8:	f7ff baba 	b.w	405230 <_zbar_decode_ean+0x580>
        unsigned w = pass->width;
        if(!dcode->ean.s4)
            return(0);
        /* validate guard bars before decoding first char of symbol */
        if(!pass->state) {
            pass->state = aux_start(dcode);
  405cbc:	f884 1068 	strb.w	r1, [r4, #104]	; 0x68
            pass->width = dcode->ean.s4;
  405cc0:	66e2      	str	r2, [r4, #108]	; 0x6c
            w = check_width(w, dcode->ean.s4);
            if(w)
                pass->width = (pass->width + dcode->ean.s4 * 3) / 4;
        }

        if(w)
  405cc2:	2e00      	cmp	r6, #0
  405cc4:	f47f ab5e 	bne.w	405384 <_zbar_decode_ean+0x6d4>
        if(!pass->state) {
            pass->state = aux_start(dcode);
            pass->width = dcode->ean.s4;
            if(pass->state < 0)
                return(0);
            idx = pass->state & STATE_IDX;
  405cc8:	2500      	movs	r5, #0
  405cca:	e015      	b.n	405cf8 <_zbar_decode_ean+0x1048>
        unsigned w = pass->width;
        if(!dcode->ean.s4)
            return(0);
        /* validate guard bars before decoding first char of symbol */
        if(!pass->state) {
            pass->state = aux_start(dcode);
  405ccc:	23ff      	movs	r3, #255	; 0xff
  405cce:	f884 3068 	strb.w	r3, [r4, #104]	; 0x68
            pass->width = dcode->ean.s4;
  405cd2:	66e2      	str	r2, [r4, #108]	; 0x6c
  405cd4:	e7d7      	b.n	405c86 <_zbar_decode_ean+0xfd6>
            idx = pass->state & STATE_IDX;
        }
        else {
            w = check_width(w, dcode->ean.s4);
            if(w)
                pass->width = (pass->width + dcode->ean.s4 * 3) / 4;
  405cd6:	eb02 0142 	add.w	r1, r2, r2, lsl #1
  405cda:	4431      	add	r1, r6
  405cdc:	0889      	lsrs	r1, r1, #2
  405cde:	66e1      	str	r1, [r4, #108]	; 0x6c
  405ce0:	f7ff bb51 	b.w	405386 <_zbar_decode_ean+0x6d6>
        if(w)
            code = decode4(dcode);
        else
            dbprintf(2, " [bad width]");

        if((code < 0 && idx != 0x10) || 
  405ce4:	2d00      	cmp	r5, #0
  405ce6:	f43f ac2a 	beq.w	40553e <_zbar_decode_ean+0x88e>
  405cea:	f7ff bbfa 	b.w	4054e2 <_zbar_decode_ean+0x832>
        if(alt)
            code = ((code >> 1) & 3) | 0x10; /* compress code space */
        dbprintf(2, " (d2=%d(%d) alt=%d)", d2, mid * dcode->ean.s4, alt);
    }
    dbprintf(2, " char=%02x", digits[(unsigned char)code]);
    zassert(code < 0x14, -1, "code=%02x e1=%x e2=%x s4=%x color=%x\n",
  405cee:	b24b      	sxtb	r3, r1
  405cf0:	2b13      	cmp	r3, #19
  405cf2:	ddf7      	ble.n	405ce4 <_zbar_decode_ean+0x1034>
  405cf4:	f7ff bbcc 	b.w	405490 <_zbar_decode_ean+0x7e0>
        /* use sum of bar widths */
        unsigned d2 = ((get_color(dcode) == ZBAR_BAR)
                       ? get_width(dcode, 0) + get_width(dcode, 2)
                       : get_width(dcode, 1) + get_width(dcode, 3));
        d2 *= 7;
        mid = (((1 << code) & 0x0420)
  405cf8:	21ff      	movs	r1, #255	; 0xff
  405cfa:	f7ff bbf0 	b.w	4054de <_zbar_decode_ean+0x82e>
        if(w)
            code = decode4(dcode);
        else
            dbprintf(2, " [bad width]");

        if((code < 0 && idx != 0x10) || 
  405cfe:	2d00      	cmp	r5, #0
  405d00:	f43f ac1d 	beq.w	40553e <_zbar_decode_ean+0x88e>
  405d04:	f7ff bbed 	b.w	4054e2 <_zbar_decode_ean+0x832>
    }

    if((ean->left || ean->right) &&
       !check_width(ean->width, pass->width)) {
      dbprintf(2, " rst(width %d)", pass->width);
      ean->left = ean->right = ZBAR_NONE;
  405d08:	2300      	movs	r3, #0
  405d0a:	f8a9 30aa 	strh.w	r3, [r9, #170]	; 0xaa
  405d0e:	f8a9 30a8 	strh.w	r3, [r9, #168]	; 0xa8
  405d12:	e443      	b.n	40559c <_zbar_decode_ean+0x8ec>
        }
        ean->right = part;
        part &= ean->left;  /* FIXME!? */
    }
    else if(part == ZBAR_EAN13 || part == ZBAR_EAN8) /* EAN_LEFT */ {
        j = (part - 1) >> 1;
  405d14:	1e45      	subs	r5, r0, #1
        for(i = part >> 1; j >= 0; i--, j--) {
  405d16:	0847      	lsrs	r7, r0, #1
  405d18:	2100      	movs	r1, #0
  405d1a:	f3c5 0547 	ubfx	r5, r5, #1, #8
            unsigned char digit = pass->raw[i] & 0xf;
  405d1e:	9b09      	ldr	r3, [sp, #36]	; 0x24
  405d20:	eb09 1603 	add.w	r6, r9, r3, lsl #4
            if(ean->left && ean->buf[j] != digit) {
                /* partial mismatch - reset collected parts */
                dbprintf(2, " rst(left)");
                ean->left = ean->right = ZBAR_NONE;
  405d24:	468e      	mov	lr, r1
  405d26:	e476      	b.n	405616 <_zbar_decode_ean+0x966>
        ean->left = part;
    }
    else
        ean_expand_upce(ean, pass);

    ean->width = pass->width;
  405d28:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
  405d2a:	f8c9 30b4 	str.w	r3, [r9, #180]	; 0xb4
  405d2e:	4683      	mov	fp, r0
  405d30:	e530      	b.n	405794 <_zbar_decode_ean+0xae4>
                                               int n)
{
    unsigned char chk = 0;
    unsigned char i, d;
    for(i = 0; i < n; i++) {
        unsigned char d = ean->buf[i];
  405d32:	f899 50b8 	ldrb.w	r5, [r9, #184]	; 0xb8
        zassert(d < 10, -1, "i=%x d=%x chk=%x %s\n", i, d, chk,
  405d36:	2d09      	cmp	r5, #9
  405d38:	f63f ad3a 	bhi.w	4057b0 <_zbar_decode_ean+0xb00>
  405d3c:	2300      	movs	r3, #0
  405d3e:	e563      	b.n	405808 <_zbar_decode_ean+0xb58>
                                               int n)
{
    unsigned char chk = 0;
    unsigned char i, d;
    for(i = 0; i < n; i++) {
        unsigned char d = ean->buf[i];
  405d40:	f899 50b8 	ldrb.w	r5, [r9, #184]	; 0xb8
        zassert(d < 10, -1, "i=%x d=%x chk=%x %s\n", i, d, chk,
  405d44:	2d09      	cmp	r5, #9
  405d46:	f67f add9 	bls.w	4058fc <_zbar_decode_ean+0xc4c>
  405d4a:	e5bd      	b.n	4058c8 <_zbar_decode_ean+0xc18>

    if(!part)
        part = ZBAR_PARTIAL;

    if(((part == ZBAR_EAN13 ||
         part == ZBAR_UPCE) && ean_verify_checksum(ean, 12)) ||
  405d4c:	f1bb 0f08 	cmp.w	fp, #8
  405d50:	f47f ae35 	bne.w	4059be <_zbar_decode_ean+0xd0e>
  405d54:	e7f4      	b.n	405d40 <_zbar_decode_ean+0x1090>
        /* invalid checksum */
        if(ean->right)
	  ean->left = ZBAR_NONE;
        else
	  ean->right = ZBAR_NONE;
        part = ZBAR_NONE;
  405d56:	f04f 0b00 	mov.w	fp, #0
  405d5a:	e68e      	b.n	405a7a <_zbar_decode_ean+0xdca>
    }

    if(part == ZBAR_EAN13) {
        /* special case EAN-13 subsets */
        if(!ean->buf[0] && TEST_CFG(ean->upca_config, ZBAR_CFG_ENABLE))
            part = ZBAR_UPCA;
  405d5c:	f04f 0b0c 	mov.w	fp, #12
  405d60:	e68f      	b.n	405a82 <_zbar_decode_ean+0xdd2>
        else if(ean->buf[0] == 9 && ean->buf[1] == 7) {
            /* ISBN-10 has priority over ISBN-13(?) */
            if(ean->buf[2] == 8 &&
               TEST_CFG(ean->isbn10_config, ZBAR_CFG_ENABLE))
                part = ZBAR_ISBN10;
  405d62:	f04f 0b0a 	mov.w	fp, #10
  405d66:	e68c      	b.n	405a82 <_zbar_decode_ean+0xdd2>
                ean->buf[i] = pass->raw[i - 1] & 0xf;
            ean->buf[i] = pass->raw[0] & 0xf;
        }
        else if(TEST_CFG(ean->upca_config, ZBAR_CFG_ENABLE))
            /* UPC-E reported as UPC-A has priority over EAN-13 */
            part = ZBAR_UPCA;
  405d68:	f04f 0b0c 	mov.w	fp, #12
  405d6c:	e689      	b.n	405a82 <_zbar_decode_ean+0xdd2>
        else if(TEST_CFG(ean->ean13_config, ZBAR_CFG_ENABLE))
            part = ZBAR_EAN13;
  405d6e:	f04f 0b0d 	mov.w	fp, #13
  405d72:	e686      	b.n	405a82 <_zbar_decode_ean+0xdd2>
        else if(base == ZBAR_ISBN13)
            base = ZBAR_EAN13;
        else if(base == ZBAR_ISBN10)
            i = 3;

        if(base == ZBAR_ISBN10 ||
  405d74:	f1bb 0f05 	cmp.w	fp, #5
  405d78:	f63f aea5 	bhi.w	405ac6 <_zbar_decode_ean+0xe16>
  405d7c:	465b      	mov	r3, fp
static inline void postprocess (zbar_decoder_t *dcode,
                                zbar_symbol_type_t sym)
{
    ean_decoder_t *ean = &dcode->ean;
    zbar_symbol_type_t base = sym;
    int i = 0, j = 0;
  405d7e:	2200      	movs	r2, #0
  405d80:	e6fd      	b.n	405b7e <_zbar_decode_ean+0xece>
    unsigned char w;
    for(w = 10; w > 1; w--) {
        unsigned char d = ean->buf[13 - w];
        zassert(d < 10, '?', "w=%x d=%x chk=%x %s\n", w, d, chk,
                _zbar_decoder_buf_dump((void*)ean->buf, 18));
        chk += d * w;
  405d82:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  405d86:	0065      	lsls	r5, r4, #1
  405d88:	f109 02bb 	add.w	r2, r9, #187	; 0xbb
  405d8c:	f109 01c3 	add.w	r1, r9, #195	; 0xc3
  405d90:	2309      	movs	r3, #9
  405d92:	e723      	b.n	405bdc <_zbar_decode_ean+0xf2c>
        if(!par)
            return(ZBAR_EAN13 | EAN_RIGHT);
        if(par & 0x20)
            return(ZBAR_EAN13 | EAN_LEFT);
    }
    if(par && !(par & 0x20))
  405d94:	2b00      	cmp	r3, #0
  405d96:	d186      	bne.n	405ca6 <_zbar_decode_ean+0xff6>
  405d98:	e78d      	b.n	405cb6 <_zbar_decode_ean+0x1006>
    }

    e1 = get_width(dcode, 4) + get_width(dcode, 5);
    E1 = decode_e(e1, dcode->ean.s4, 7);

    if(get_color(dcode) == ZBAR_BAR) {
  405d9a:	f1bc 0f00 	cmp.w	ip, #0
  405d9e:	d095      	beq.n	405ccc <_zbar_decode_ean+0x101c>
  405da0:	f7ff ba96 	b.w	4052d0 <_zbar_decode_ean+0x620>
        if(base == ZBAR_ISBN10 ||
           (base > ZBAR_EAN5 &&
            !TEST_CFG(ean_get_config(ean, sym), ZBAR_CFG_EMIT_CHECK)))
            base--;

        for(; j < base && ean->buf[i] >= 0; i++, j++)
  405da4:	461c      	mov	r4, r3
  405da6:	e6ed      	b.n	405b84 <_zbar_decode_ean+0xed4>
            base = ZBAR_EAN13;
        else if(base == ZBAR_ISBN10)
            i = 3;

        if(base == ZBAR_ISBN10 ||
           (base > ZBAR_EAN5 &&
  405da8:	f011 0f04 	tst.w	r1, #4
  405dac:	f43f aee5 	beq.w	405b7a <_zbar_decode_ean+0xeca>
  405db0:	e7f8      	b.n	405da4 <_zbar_decode_ean+0x10f4>
                                               int n)
{
    unsigned char chk = 0;
    unsigned char i, d;
    for(i = 0; i < n; i++) {
        unsigned char d = ean->buf[i];
  405db2:	f899 50b8 	ldrb.w	r5, [r9, #184]	; 0xb8
  405db6:	e5a1      	b.n	4058fc <_zbar_decode_ean+0xc4c>

    if(!part)
        part = ZBAR_PARTIAL;

    if(((part == ZBAR_EAN13 ||
         part == ZBAR_UPCE) && ean_verify_checksum(ean, 12)) ||
  405db8:	f1bb 0f08 	cmp.w	fp, #8
  405dbc:	f47f adff 	bne.w	4059be <_zbar_decode_ean+0xd0e>
  405dc0:	e7f7      	b.n	405db2 <_zbar_decode_ean+0x1102>
            }
            dbprintf(2, "\n");
        }
    }
    return(sym);
}
  405dc2:	4658      	mov	r0, fp
  405dc4:	b011      	add	sp, #68	; 0x44
  405dc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  405dca:	bf00      	nop
  405dcc:	20000440 	.word	0x20000440
  405dd0:	00404c05 	.word	0x00404c05
  405dd4:	004113fc 	.word	0x004113fc
  405dd8:	00411324 	.word	0x00411324
  405ddc:	004113b8 	.word	0x004113b8
  405de0:	004112b0 	.word	0x004112b0
  405de4:	004083a9 	.word	0x004083a9
  405de8:	ba2e8ba3 	.word	0xba2e8ba3

00405dec <zbar_image_create>:
#include "error.h"
#include "image.h"
#include "refcnt.h"

zbar_image_t *zbar_image_create ()
{
  405dec:	b510      	push	{r4, lr}
    zbar_image_t *img = pvPortCalloc(1, sizeof(zbar_image_t));
  405dee:	2001      	movs	r0, #1
  405df0:	2144      	movs	r1, #68	; 0x44
  405df2:	4b0a      	ldr	r3, [pc, #40]	; (405e1c <zbar_image_create+0x30>)
  405df4:	4798      	blx	r3
  405df6:	4604      	mov	r4, r0
    _zbar_refcnt_init();
  405df8:	4b09      	ldr	r3, [pc, #36]	; (405e20 <zbar_image_create+0x34>)
  405dfa:	4798      	blx	r3
typedef int refcnt_t;

static inline int _zbar_refcnt (refcnt_t *cnt,
                                int delta)
{
    int rc = (*cnt += delta);
  405dfc:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  405dfe:	3301      	adds	r3, #1
  405e00:	62e3      	str	r3, [r4, #44]	; 0x2c
    assert(rc >= 0);
  405e02:	2b00      	cmp	r3, #0
  405e04:	da05      	bge.n	405e12 <zbar_image_create+0x26>
  405e06:	4807      	ldr	r0, [pc, #28]	; (405e24 <zbar_image_create+0x38>)
  405e08:	2157      	movs	r1, #87	; 0x57
  405e0a:	4a07      	ldr	r2, [pc, #28]	; (405e28 <zbar_image_create+0x3c>)
  405e0c:	4b07      	ldr	r3, [pc, #28]	; (405e2c <zbar_image_create+0x40>)
  405e0e:	4c08      	ldr	r4, [pc, #32]	; (405e30 <zbar_image_create+0x44>)
  405e10:	47a0      	blx	r4
    _zbar_image_refcnt(img, 1);
    img->srcidx = -1;
  405e12:	f04f 33ff 	mov.w	r3, #4294967295
  405e16:	6363      	str	r3, [r4, #52]	; 0x34
    return(img);
}
  405e18:	4620      	mov	r0, r4
  405e1a:	bd10      	pop	{r4, pc}
  405e1c:	00401935 	.word	0x00401935
  405e20:	0040718d 	.word	0x0040718d
  405e24:	00411438 	.word	0x00411438
  405e28:	00411428 	.word	0x00411428
  405e2c:	00411464 	.word	0x00411464
  405e30:	00408031 	.word	0x00408031

00405e34 <zbar_image_free_data>:
    img->crop_h = h;
}

inline void zbar_image_free_data (zbar_image_t *img)
{
    if(!img)
  405e34:	2800      	cmp	r0, #0
  405e36:	d02a      	beq.n	405e8e <zbar_image_free_data+0x5a>
    img->crop_y = y;
    img->crop_h = h;
}

inline void zbar_image_free_data (zbar_image_t *img)
{
  405e38:	b538      	push	{r3, r4, r5, lr}
  405e3a:	4604      	mov	r4, r0
    if(!img)
        return;
    if(img->src) {
  405e3c:	6b03      	ldr	r3, [r0, #48]	; 0x30
  405e3e:	b1c3      	cbz	r3, 405e72 <zbar_image_free_data+0x3e>
        zbar_image_t *newimg;
        /* replace video image w/new copy */
        assert(img->refcnt); /* FIXME needs lock */
  405e40:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  405e42:	b92b      	cbnz	r3, 405e50 <zbar_image_free_data+0x1c>
  405e44:	4812      	ldr	r0, [pc, #72]	; (405e90 <zbar_image_free_data+0x5c>)
  405e46:	219a      	movs	r1, #154	; 0x9a
  405e48:	4a12      	ldr	r2, [pc, #72]	; (405e94 <zbar_image_free_data+0x60>)
  405e4a:	4b13      	ldr	r3, [pc, #76]	; (405e98 <zbar_image_free_data+0x64>)
  405e4c:	4c13      	ldr	r4, [pc, #76]	; (405e9c <zbar_image_free_data+0x68>)
  405e4e:	47a0      	blx	r4
        newimg = zbar_image_create();
  405e50:	4b13      	ldr	r3, [pc, #76]	; (405ea0 <zbar_image_free_data+0x6c>)
  405e52:	4798      	blx	r3
  405e54:	4605      	mov	r5, r0
        memcpy(newimg, img, sizeof(zbar_image_t));
  405e56:	4621      	mov	r1, r4
  405e58:	2244      	movs	r2, #68	; 0x44
  405e5a:	4b12      	ldr	r3, [pc, #72]	; (405ea4 <zbar_image_free_data+0x70>)
  405e5c:	4798      	blx	r3
        /* recycle video image */
        newimg->cleanup(newimg);
  405e5e:	6aab      	ldr	r3, [r5, #40]	; 0x28
  405e60:	4628      	mov	r0, r5
  405e62:	4798      	blx	r3
        /* detach old image from src */
        img->cleanup = NULL;
  405e64:	2300      	movs	r3, #0
  405e66:	62a3      	str	r3, [r4, #40]	; 0x28
        img->src = NULL;
  405e68:	6323      	str	r3, [r4, #48]	; 0x30
        img->srcidx = -1;
  405e6a:	f04f 33ff 	mov.w	r3, #4294967295
  405e6e:	6363      	str	r3, [r4, #52]	; 0x34
  405e70:	e00a      	b.n	405e88 <zbar_image_free_data+0x54>
    }
    else if(img->cleanup && img->data) {
  405e72:	6a83      	ldr	r3, [r0, #40]	; 0x28
  405e74:	b143      	cbz	r3, 405e88 <zbar_image_free_data+0x54>
  405e76:	68c0      	ldr	r0, [r0, #12]
  405e78:	b130      	cbz	r0, 405e88 <zbar_image_free_data+0x54>
        if(img->cleanup != zbar_image_free_data) {
  405e7a:	4a0b      	ldr	r2, [pc, #44]	; (405ea8 <zbar_image_free_data+0x74>)
  405e7c:	4293      	cmp	r3, r2
            /* using function address to detect this case is a bad idea;
             * windows link libraries add an extra layer of indirection...
             * this works around that problem (bug #2796277)
             */
            zbar_image_cleanup_handler_t *cleanup = img->cleanup;
            img->cleanup = zbar_image_free_data;
  405e7e:	bf1a      	itte	ne
  405e80:	62a2      	strne	r2, [r4, #40]	; 0x28
            cleanup(img);
  405e82:	4620      	movne	r0, r4
        }
        else
            vPortFree((void*)img->data);
  405e84:	4b09      	ldreq	r3, [pc, #36]	; (405eac <zbar_image_free_data+0x78>)
  405e86:	4798      	blx	r3
    }
    img->data = NULL;
  405e88:	2300      	movs	r3, #0
  405e8a:	60e3      	str	r3, [r4, #12]
  405e8c:	bd38      	pop	{r3, r4, r5, pc}
  405e8e:	4770      	bx	lr
  405e90:	0041146c 	.word	0x0041146c
  405e94:	00411500 	.word	0x00411500
  405e98:	00411490 	.word	0x00411490
  405e9c:	00408031 	.word	0x00408031
  405ea0:	00405ded 	.word	0x00405ded
  405ea4:	00409125 	.word	0x00409125
  405ea8:	00405e35 	.word	0x00405e35
  405eac:	00401959 	.word	0x00401959

00405eb0 <zbar_image_set_format>:
}

void zbar_image_set_format (zbar_image_t *img,
                            unsigned long fmt)
{
    img->format = fmt;
  405eb0:	6001      	str	r1, [r0, #0]
  405eb2:	4770      	bx	lr

00405eb4 <zbar_image_set_size>:

void zbar_image_set_size (zbar_image_t *img,
                          unsigned w,
                          unsigned h)
{
    img->crop_x = img->crop_y = 0;
  405eb4:	2300      	movs	r3, #0
  405eb6:	6183      	str	r3, [r0, #24]
  405eb8:	6143      	str	r3, [r0, #20]
    img->width = img->crop_w = w;
  405eba:	61c1      	str	r1, [r0, #28]
  405ebc:	6041      	str	r1, [r0, #4]
    img->height = img->crop_h = h;
  405ebe:	6202      	str	r2, [r0, #32]
  405ec0:	6082      	str	r2, [r0, #8]
  405ec2:	4770      	bx	lr

00405ec4 <zbar_image_set_data>:

void zbar_image_set_data (zbar_image_t *img,
                          const void *data,
                          unsigned long len,
                          zbar_image_cleanup_handler_t *cleanup)
{
  405ec4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  405ec8:	4688      	mov	r8, r1
  405eca:	4617      	mov	r7, r2
  405ecc:	461e      	mov	r6, r3
    img->crop_h = h;
}

inline void zbar_image_free_data (zbar_image_t *img)
{
    if(!img)
  405ece:	4604      	mov	r4, r0
  405ed0:	b320      	cbz	r0, 405f1c <zbar_image_set_data+0x58>
        return;
    if(img->src) {
  405ed2:	6b03      	ldr	r3, [r0, #48]	; 0x30
  405ed4:	b1bb      	cbz	r3, 405f06 <zbar_image_set_data+0x42>
        zbar_image_t *newimg;
        /* replace video image w/new copy */
        assert(img->refcnt); /* FIXME needs lock */
  405ed6:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  405ed8:	b92b      	cbnz	r3, 405ee6 <zbar_image_set_data+0x22>
  405eda:	4813      	ldr	r0, [pc, #76]	; (405f28 <zbar_image_set_data+0x64>)
  405edc:	219a      	movs	r1, #154	; 0x9a
  405ede:	4a13      	ldr	r2, [pc, #76]	; (405f2c <zbar_image_set_data+0x68>)
  405ee0:	4b13      	ldr	r3, [pc, #76]	; (405f30 <zbar_image_set_data+0x6c>)
  405ee2:	4c14      	ldr	r4, [pc, #80]	; (405f34 <zbar_image_set_data+0x70>)
  405ee4:	47a0      	blx	r4
        newimg = zbar_image_create();
  405ee6:	4b14      	ldr	r3, [pc, #80]	; (405f38 <zbar_image_set_data+0x74>)
  405ee8:	4798      	blx	r3
  405eea:	4605      	mov	r5, r0
        memcpy(newimg, img, sizeof(zbar_image_t));
  405eec:	4621      	mov	r1, r4
  405eee:	2244      	movs	r2, #68	; 0x44
  405ef0:	4b12      	ldr	r3, [pc, #72]	; (405f3c <zbar_image_set_data+0x78>)
  405ef2:	4798      	blx	r3
        /* recycle video image */
        newimg->cleanup(newimg);
  405ef4:	6aab      	ldr	r3, [r5, #40]	; 0x28
  405ef6:	4628      	mov	r0, r5
  405ef8:	4798      	blx	r3
        /* detach old image from src */
        img->cleanup = NULL;
        img->src = NULL;
  405efa:	2300      	movs	r3, #0
  405efc:	6323      	str	r3, [r4, #48]	; 0x30
        img->srcidx = -1;
  405efe:	f04f 33ff 	mov.w	r3, #4294967295
  405f02:	6363      	str	r3, [r4, #52]	; 0x34
  405f04:	e00a      	b.n	405f1c <zbar_image_set_data+0x58>
    }
    else if(img->cleanup && img->data) {
  405f06:	6a83      	ldr	r3, [r0, #40]	; 0x28
  405f08:	b143      	cbz	r3, 405f1c <zbar_image_set_data+0x58>
  405f0a:	68c0      	ldr	r0, [r0, #12]
  405f0c:	b130      	cbz	r0, 405f1c <zbar_image_set_data+0x58>
        if(img->cleanup != zbar_image_free_data) {
  405f0e:	4a0c      	ldr	r2, [pc, #48]	; (405f40 <zbar_image_set_data+0x7c>)
  405f10:	4293      	cmp	r3, r2
            /* using function address to detect this case is a bad idea;
             * windows link libraries add an extra layer of indirection...
             * this works around that problem (bug #2796277)
             */
            zbar_image_cleanup_handler_t *cleanup = img->cleanup;
            img->cleanup = zbar_image_free_data;
  405f12:	bf1a      	itte	ne
  405f14:	62a2      	strne	r2, [r4, #40]	; 0x28
            cleanup(img);
  405f16:	4620      	movne	r0, r4
        }
        else
            vPortFree((void*)img->data);
  405f18:	4b0a      	ldreq	r3, [pc, #40]	; (405f44 <zbar_image_set_data+0x80>)
  405f1a:	4798      	blx	r3
                          const void *data,
                          unsigned long len,
                          zbar_image_cleanup_handler_t *cleanup)
{
    zbar_image_free_data(img);
    img->data = data;
  405f1c:	f8c4 800c 	str.w	r8, [r4, #12]
    img->datalen = len;
  405f20:	6127      	str	r7, [r4, #16]
    img->cleanup = cleanup;
  405f22:	62a6      	str	r6, [r4, #40]	; 0x28
  405f24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  405f28:	0041146c 	.word	0x0041146c
  405f2c:	00411500 	.word	0x00411500
  405f30:	00411490 	.word	0x00411490
  405f34:	00408031 	.word	0x00408031
  405f38:	00405ded 	.word	0x00405ded
  405f3c:	00409125 	.word	0x00409125
  405f40:	00405e35 	.word	0x00405e35
  405f44:	00401959 	.word	0x00401959

00405f48 <zbar_image_first_symbol>:
    img->syms = (zbar_symbol_set_t*)syms;
}

const zbar_symbol_t *zbar_image_first_symbol (const zbar_image_t *img)
{
    return((img->syms) ? img->syms->head : NULL);
  405f48:	6c03      	ldr	r3, [r0, #64]	; 0x40
  405f4a:	b10b      	cbz	r3, 405f50 <zbar_image_first_symbol+0x8>
  405f4c:	6898      	ldr	r0, [r3, #8]
  405f4e:	4770      	bx	lr
  405f50:	2000      	movs	r0, #0
}
  405f52:	4770      	bx	lr

00405f54 <_zbar_image_scanner_recycle_syms>:

void _zbar_image_scanner_recycle_syms (zbar_image_scanner_t *iscn,
                                       zbar_symbol_t *sym)
{
    zbar_symbol_t *next = NULL;
    for(; sym; sym = next) {
  405f54:	2900      	cmp	r1, #0
  405f56:	d072      	beq.n	40603e <_zbar_image_scanner_recycle_syms+0xea>
#endif
};

void _zbar_image_scanner_recycle_syms (zbar_image_scanner_t *iscn,
                                       zbar_symbol_t *sym)
{
  405f58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  405f5c:	4607      	mov	r7, r0
  405f5e:	460c      	mov	r4, r1
        if(sym->refcnt && _zbar_refcnt(&sym->refcnt, -1)) {
            /* unlink referenced symbol */
            /* FIXME handle outstanding component refs (currently unsupported)
             */
            assert(sym->data_alloc);
            sym->next = NULL;
  405f60:	2600      	movs	r6, #0
            for(i = 0; i < RECYCLE_BUCKETS; i++)
                if(sym->data_alloc < 1 << (i * 2))
                    break;
            if(i == RECYCLE_BUCKETS) {
                assert(sym->data);
                vPortFree(sym->data);
  405f62:	f8df 9104 	ldr.w	r9, [pc, #260]	; 406068 <_zbar_image_scanner_recycle_syms+0x114>
                sym->data = NULL;
                sym->data_alloc = 0;
                i = 0;
  405f66:	46b0      	mov	r8, r6
void _zbar_image_scanner_recycle_syms (zbar_image_scanner_t *iscn,
                                       zbar_symbol_t *sym)
{
    zbar_symbol_t *next = NULL;
    for(; sym; sym = next) {
        next = sym->next;
  405f68:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
        if(sym->refcnt && _zbar_refcnt(&sym->refcnt, -1)) {
  405f6a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  405f6c:	b1a3      	cbz	r3, 405f98 <_zbar_image_scanner_recycle_syms+0x44>
typedef int refcnt_t;

static inline int _zbar_refcnt (refcnt_t *cnt,
                                int delta)
{
    int rc = (*cnt += delta);
  405f6e:	3b01      	subs	r3, #1
  405f70:	62a3      	str	r3, [r4, #40]	; 0x28
    assert(rc >= 0);
  405f72:	2b00      	cmp	r3, #0
  405f74:	da05      	bge.n	405f82 <_zbar_image_scanner_recycle_syms+0x2e>
  405f76:	4832      	ldr	r0, [pc, #200]	; (406040 <_zbar_image_scanner_recycle_syms+0xec>)
  405f78:	2157      	movs	r1, #87	; 0x57
  405f7a:	4a32      	ldr	r2, [pc, #200]	; (406044 <_zbar_image_scanner_recycle_syms+0xf0>)
  405f7c:	4b32      	ldr	r3, [pc, #200]	; (406048 <_zbar_image_scanner_recycle_syms+0xf4>)
  405f7e:	4c33      	ldr	r4, [pc, #204]	; (40604c <_zbar_image_scanner_recycle_syms+0xf8>)
  405f80:	47a0      	blx	r4
  405f82:	b14b      	cbz	r3, 405f98 <_zbar_image_scanner_recycle_syms+0x44>
            /* unlink referenced symbol */
            /* FIXME handle outstanding component refs (currently unsupported)
             */
            assert(sym->data_alloc);
  405f84:	68e3      	ldr	r3, [r4, #12]
  405f86:	b92b      	cbnz	r3, 405f94 <_zbar_image_scanner_recycle_syms+0x40>
  405f88:	4831      	ldr	r0, [pc, #196]	; (406050 <_zbar_image_scanner_recycle_syms+0xfc>)
  405f8a:	2185      	movs	r1, #133	; 0x85
  405f8c:	4a31      	ldr	r2, [pc, #196]	; (406054 <_zbar_image_scanner_recycle_syms+0x100>)
  405f8e:	4b32      	ldr	r3, [pc, #200]	; (406058 <_zbar_image_scanner_recycle_syms+0x104>)
  405f90:	4c2e      	ldr	r4, [pc, #184]	; (40604c <_zbar_image_scanner_recycle_syms+0xf8>)
  405f92:	47a0      	blx	r4
            sym->next = NULL;
  405f94:	62e6      	str	r6, [r4, #44]	; 0x2c
  405f96:	e049      	b.n	40602c <_zbar_image_scanner_recycle_syms+0xd8>
        }
        else {
            int i;
            recycle_bucket_t *bucket;
            /* recycle unreferenced symbol */
            if(!sym->data_alloc) {
  405f98:	68e2      	ldr	r2, [r4, #12]
  405f9a:	2a00      	cmp	r2, #0
  405f9c:	d14b      	bne.n	406036 <_zbar_image_scanner_recycle_syms+0xe2>
                sym->data = NULL;
  405f9e:	6166      	str	r6, [r4, #20]
                sym->datalen = 0;
  405fa0:	6126      	str	r6, [r4, #16]
            }
            if(sym->syms) {
  405fa2:	6b21      	ldr	r1, [r4, #48]	; 0x30
  405fa4:	b1e1      	cbz	r1, 405fe0 <_zbar_image_scanner_recycle_syms+0x8c>
typedef int refcnt_t;

static inline int _zbar_refcnt (refcnt_t *cnt,
                                int delta)
{
    int rc = (*cnt += delta);
  405fa6:	680b      	ldr	r3, [r1, #0]
  405fa8:	3b01      	subs	r3, #1
  405faa:	600b      	str	r3, [r1, #0]
    assert(rc >= 0);
  405fac:	2b00      	cmp	r3, #0
  405fae:	da05      	bge.n	405fbc <_zbar_image_scanner_recycle_syms+0x68>
  405fb0:	4823      	ldr	r0, [pc, #140]	; (406040 <_zbar_image_scanner_recycle_syms+0xec>)
  405fb2:	2157      	movs	r1, #87	; 0x57
  405fb4:	4a23      	ldr	r2, [pc, #140]	; (406044 <_zbar_image_scanner_recycle_syms+0xf0>)
  405fb6:	4b24      	ldr	r3, [pc, #144]	; (406048 <_zbar_image_scanner_recycle_syms+0xf4>)
  405fb8:	4c24      	ldr	r4, [pc, #144]	; (40604c <_zbar_image_scanner_recycle_syms+0xf8>)
  405fba:	47a0      	blx	r4
                if(_zbar_refcnt(&sym->syms->refcnt, -1))
  405fbc:	b12b      	cbz	r3, 405fca <_zbar_image_scanner_recycle_syms+0x76>
                    assert(0);
  405fbe:	4824      	ldr	r0, [pc, #144]	; (406050 <_zbar_image_scanner_recycle_syms+0xfc>)
  405fc0:	2192      	movs	r1, #146	; 0x92
  405fc2:	4a24      	ldr	r2, [pc, #144]	; (406054 <_zbar_image_scanner_recycle_syms+0x100>)
  405fc4:	4b25      	ldr	r3, [pc, #148]	; (40605c <_zbar_image_scanner_recycle_syms+0x108>)
  405fc6:	4c21      	ldr	r4, [pc, #132]	; (40604c <_zbar_image_scanner_recycle_syms+0xf8>)
  405fc8:	47a0      	blx	r4
                _zbar_image_scanner_recycle_syms(iscn, sym->syms->head);
  405fca:	6b23      	ldr	r3, [r4, #48]	; 0x30
  405fcc:	4638      	mov	r0, r7
  405fce:	6899      	ldr	r1, [r3, #8]
  405fd0:	f7ff ffc0 	bl	405f54 <_zbar_image_scanner_recycle_syms>
                sym->syms->head = NULL;
  405fd4:	6b23      	ldr	r3, [r4, #48]	; 0x30
  405fd6:	609e      	str	r6, [r3, #8]
                _zbar_symbol_set_free(sym->syms);
  405fd8:	6b20      	ldr	r0, [r4, #48]	; 0x30
  405fda:	4b21      	ldr	r3, [pc, #132]	; (406060 <_zbar_image_scanner_recycle_syms+0x10c>)
  405fdc:	4798      	blx	r3
                sym->syms = NULL;
  405fde:	6326      	str	r6, [r4, #48]	; 0x30
            }
            for(i = 0; i < RECYCLE_BUCKETS; i++)
                if(sym->data_alloc < 1 << (i * 2))
  405fe0:	68e2      	ldr	r2, [r4, #12]
  405fe2:	b92a      	cbnz	r2, 405ff0 <_zbar_image_scanner_recycle_syms+0x9c>
  405fe4:	e019      	b.n	40601a <_zbar_image_scanner_recycle_syms+0xc6>
  405fe6:	0059      	lsls	r1, r3, #1
  405fe8:	fa32 f101 	lsrs.w	r1, r2, r1
  405fec:	d102      	bne.n	405ff4 <_zbar_image_scanner_recycle_syms+0xa0>
  405fee:	e005      	b.n	405ffc <_zbar_image_scanner_recycle_syms+0xa8>
                _zbar_image_scanner_recycle_syms(iscn, sym->syms->head);
                sym->syms->head = NULL;
                _zbar_symbol_set_free(sym->syms);
                sym->syms = NULL;
            }
            for(i = 0; i < RECYCLE_BUCKETS; i++)
  405ff0:	2301      	movs	r3, #1
  405ff2:	e7f8      	b.n	405fe6 <_zbar_image_scanner_recycle_syms+0x92>
  405ff4:	3301      	adds	r3, #1
  405ff6:	2b05      	cmp	r3, #5
  405ff8:	d1f5      	bne.n	405fe6 <_zbar_image_scanner_recycle_syms+0x92>
  405ffa:	e001      	b.n	406000 <_zbar_image_scanner_recycle_syms+0xac>
                if(sym->data_alloc < 1 << (i * 2))
                    break;
            if(i == RECYCLE_BUCKETS) {
  405ffc:	2b05      	cmp	r3, #5
  405ffe:	d10d      	bne.n	40601c <_zbar_image_scanner_recycle_syms+0xc8>
                assert(sym->data);
  406000:	6960      	ldr	r0, [r4, #20]
  406002:	b928      	cbnz	r0, 406010 <_zbar_image_scanner_recycle_syms+0xbc>
  406004:	4812      	ldr	r0, [pc, #72]	; (406050 <_zbar_image_scanner_recycle_syms+0xfc>)
  406006:	219c      	movs	r1, #156	; 0x9c
  406008:	4a12      	ldr	r2, [pc, #72]	; (406054 <_zbar_image_scanner_recycle_syms+0x100>)
  40600a:	4b16      	ldr	r3, [pc, #88]	; (406064 <_zbar_image_scanner_recycle_syms+0x110>)
  40600c:	4c0f      	ldr	r4, [pc, #60]	; (40604c <_zbar_image_scanner_recycle_syms+0xf8>)
  40600e:	47a0      	blx	r4
                vPortFree(sym->data);
  406010:	47c8      	blx	r9
                sym->data = NULL;
  406012:	6166      	str	r6, [r4, #20]
                sym->data_alloc = 0;
  406014:	60e6      	str	r6, [r4, #12]
                i = 0;
  406016:	4643      	mov	r3, r8
  406018:	e000      	b.n	40601c <_zbar_image_scanner_recycle_syms+0xc8>
                _zbar_image_scanner_recycle_syms(iscn, sym->syms->head);
                sym->syms->head = NULL;
                _zbar_symbol_set_free(sym->syms);
                sym->syms = NULL;
            }
            for(i = 0; i < RECYCLE_BUCKETS; i++)
  40601a:	4633      	mov	r3, r6
  40601c:	eb07 03c3 	add.w	r3, r7, r3, lsl #3
                sym->data_alloc = 0;
                i = 0;
            }
            bucket = &iscn->recycle[i];
            /* FIXME cap bucket fill */
            bucket->nsyms++;
  406020:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  406022:	3201      	adds	r2, #1
  406024:	631a      	str	r2, [r3, #48]	; 0x30
            sym->next = bucket->head;
  406026:	6b5a      	ldr	r2, [r3, #52]	; 0x34
  406028:	62e2      	str	r2, [r4, #44]	; 0x2c
            bucket->head = sym;
  40602a:	635c      	str	r4, [r3, #52]	; 0x34
  40602c:	462c      	mov	r4, r5

void _zbar_image_scanner_recycle_syms (zbar_image_scanner_t *iscn,
                                       zbar_symbol_t *sym)
{
    zbar_symbol_t *next = NULL;
    for(; sym; sym = next) {
  40602e:	2d00      	cmp	r5, #0
  406030:	d19a      	bne.n	405f68 <_zbar_image_scanner_recycle_syms+0x14>
  406032:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
            /* recycle unreferenced symbol */
            if(!sym->data_alloc) {
                sym->data = NULL;
                sym->datalen = 0;
            }
            if(sym->syms) {
  406036:	6b21      	ldr	r1, [r4, #48]	; 0x30
  406038:	2900      	cmp	r1, #0
  40603a:	d1b4      	bne.n	405fa6 <_zbar_image_scanner_recycle_syms+0x52>
  40603c:	e7d8      	b.n	405ff0 <_zbar_image_scanner_recycle_syms+0x9c>
  40603e:	4770      	bx	lr
  406040:	00411438 	.word	0x00411438
  406044:	004117fc 	.word	0x004117fc
  406048:	00411464 	.word	0x00411464
  40604c:	00408031 	.word	0x00408031
  406050:	00411564 	.word	0x00411564
  406054:	0041180c 	.word	0x0041180c
  406058:	00411590 	.word	0x00411590
  40605c:	004119fc 	.word	0x004119fc
  406060:	004076fd 	.word	0x004076fd
  406064:	004115a0 	.word	0x004115a0
  406068:	00401959 	.word	0x00401959

0040606c <_zbar_image_scanner_add_sym>:
        sym->cache_count = 0;
}

void _zbar_image_scanner_add_sym(zbar_image_scanner_t *iscn,
                                 zbar_symbol_t *sym)
{
  40606c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  406070:	4607      	mov	r7, r0
  406072:	460d      	mov	r5, r1
}

static inline void cache_sym (zbar_image_scanner_t *iscn,
                              zbar_symbol_t *sym)
{
    if(iscn->enable_cache) {
  406074:	6d83      	ldr	r3, [r0, #88]	; 0x58
  406076:	2b00      	cmp	r3, #0
  406078:	f000 80be 	beq.w	4061f8 <_zbar_image_scanner_add_sym+0x18c>

static inline zbar_symbol_t *cache_lookup (zbar_image_scanner_t *iscn,
                                           zbar_symbol_t *sym)
{
    /* search for matching entry in cache */
    zbar_symbol_t **entry = &iscn->cache;
  40607c:	f100 065c 	add.w	r6, r0, #92	; 0x5c
    while(*entry) {
        if((*entry)->type == sym->type &&
           (*entry)->datalen == sym->datalen &&
           !memcmp((*entry)->data, sym->data, sym->datalen))
  406080:	f8df a21c 	ldr.w	sl, [pc, #540]	; 4062a0 <_zbar_image_scanner_add_sym+0x234>
            break;
        if((sym->time - (*entry)->time) > CACHE_TIMEOUT) {
            /* recycle stale cache entry */
            zbar_symbol_t *next = (*entry)->next;
            (*entry)->next = NULL;
  406084:	f04f 0900 	mov.w	r9, #0
            _zbar_image_scanner_recycle_syms(iscn, *entry);
  406088:	f8df 8218 	ldr.w	r8, [pc, #536]	; 4062a4 <_zbar_image_scanner_add_sym+0x238>
  40608c:	e01f      	b.n	4060ce <_zbar_image_scanner_add_sym+0x62>
                                           zbar_symbol_t *sym)
{
    /* search for matching entry in cache */
    zbar_symbol_t **entry = &iscn->cache;
    while(*entry) {
        if((*entry)->type == sym->type &&
  40608e:	8822      	ldrh	r2, [r4, #0]
  406090:	882b      	ldrh	r3, [r5, #0]
  406092:	429a      	cmp	r2, r3
  406094:	d109      	bne.n	4060aa <_zbar_image_scanner_add_sym+0x3e>
           (*entry)->datalen == sym->datalen &&
  406096:	6922      	ldr	r2, [r4, #16]
                                           zbar_symbol_t *sym)
{
    /* search for matching entry in cache */
    zbar_symbol_t **entry = &iscn->cache;
    while(*entry) {
        if((*entry)->type == sym->type &&
  406098:	692b      	ldr	r3, [r5, #16]
  40609a:	429a      	cmp	r2, r3
  40609c:	d105      	bne.n	4060aa <_zbar_image_scanner_add_sym+0x3e>
           (*entry)->datalen == sym->datalen &&
           !memcmp((*entry)->data, sym->data, sym->datalen))
  40609e:	6960      	ldr	r0, [r4, #20]
  4060a0:	6969      	ldr	r1, [r5, #20]
  4060a2:	47d0      	blx	sl
{
    /* search for matching entry in cache */
    zbar_symbol_t **entry = &iscn->cache;
    while(*entry) {
        if((*entry)->type == sym->type &&
           (*entry)->datalen == sym->datalen &&
  4060a4:	2800      	cmp	r0, #0
  4060a6:	f000 808d 	beq.w	4061c4 <_zbar_image_scanner_add_sym+0x158>
           !memcmp((*entry)->data, sym->data, sym->datalen))
            break;
        if((sym->time - (*entry)->time) > CACHE_TIMEOUT) {
  4060aa:	6b6b      	ldr	r3, [r5, #52]	; 0x34
  4060ac:	6b62      	ldr	r2, [r4, #52]	; 0x34
  4060ae:	1a9b      	subs	r3, r3, r2
  4060b0:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
  4060b4:	d909      	bls.n	4060ca <_zbar_image_scanner_add_sym+0x5e>
            /* recycle stale cache entry */
            zbar_symbol_t *next = (*entry)->next;
  4060b6:	f8d4 b02c 	ldr.w	fp, [r4, #44]	; 0x2c
            (*entry)->next = NULL;
  4060ba:	f8c4 902c 	str.w	r9, [r4, #44]	; 0x2c
            _zbar_image_scanner_recycle_syms(iscn, *entry);
  4060be:	4638      	mov	r0, r7
  4060c0:	6831      	ldr	r1, [r6, #0]
  4060c2:	47c0      	blx	r8
            *entry = next;
  4060c4:	f8c6 b000 	str.w	fp, [r6]
  4060c8:	e001      	b.n	4060ce <_zbar_image_scanner_add_sym+0x62>
        }
        else
            entry = &(*entry)->next;
  4060ca:	f104 062c 	add.w	r6, r4, #44	; 0x2c
static inline zbar_symbol_t *cache_lookup (zbar_image_scanner_t *iscn,
                                           zbar_symbol_t *sym)
{
    /* search for matching entry in cache */
    zbar_symbol_t **entry = &iscn->cache;
    while(*entry) {
  4060ce:	6834      	ldr	r4, [r6, #0]
  4060d0:	2c00      	cmp	r4, #0
  4060d2:	d1dc      	bne.n	40608e <_zbar_image_scanner_add_sym+0x22>
  4060d4:	e0b1      	b.n	40623a <_zbar_image_scanner_add_sym+0x1ce>
                               int datalen)
{
    /* recycle old or alloc new symbol */
    zbar_symbol_t *sym = NULL;
    int i;
    for(i = 0; i < RECYCLE_BUCKETS - 1; i++)
  4060d6:	2301      	movs	r3, #1
  4060d8:	e002      	b.n	4060e0 <_zbar_image_scanner_add_sym+0x74>
  4060da:	2302      	movs	r3, #2
  4060dc:	e000      	b.n	4060e0 <_zbar_image_scanner_add_sym+0x74>
  4060de:	2303      	movs	r3, #3
        if(datalen <= 1 << (i * 2))
            break;

    for(; i > 0; i--)
  4060e0:	2b00      	cmp	r3, #0
  4060e2:	dd26      	ble.n	406132 <_zbar_image_scanner_add_sym+0xc6>
        if((sym = iscn->recycle[i].head)) {
  4060e4:	eb07 02c3 	add.w	r2, r7, r3, lsl #3
  4060e8:	6b54      	ldr	r4, [r2, #52]	; 0x34
  4060ea:	eb07 02c3 	add.w	r2, r7, r3, lsl #3
  4060ee:	b164      	cbz	r4, 40610a <_zbar_image_scanner_add_sym+0x9e>
  4060f0:	e002      	b.n	4060f8 <_zbar_image_scanner_add_sym+0x8c>
  4060f2:	3a08      	subs	r2, #8
  4060f4:	6b54      	ldr	r4, [r2, #52]	; 0x34
  4060f6:	b144      	cbz	r4, 40610a <_zbar_image_scanner_add_sym+0x9e>
  4060f8:	eb07 0183 	add.w	r1, r7, r3, lsl #2
            STAT(sym_recycle[i]);
  4060fc:	f8d1 20d8 	ldr.w	r2, [r1, #216]	; 0xd8
  406100:	3201      	adds	r2, #1
  406102:	f8c1 20d8 	str.w	r2, [r1, #216]	; 0xd8
            break;
        }

    if(sym) {
  406106:	b91c      	cbnz	r4, 406110 <_zbar_image_scanner_add_sym+0xa4>
  406108:	e013      	b.n	406132 <_zbar_image_scanner_add_sym+0xc6>
    int i;
    for(i = 0; i < RECYCLE_BUCKETS - 1; i++)
        if(datalen <= 1 << (i * 2))
            break;

    for(; i > 0; i--)
  40610a:	3b01      	subs	r3, #1
  40610c:	d1f1      	bne.n	4060f2 <_zbar_image_scanner_add_sym+0x86>
  40610e:	e010      	b.n	406132 <_zbar_image_scanner_add_sym+0xc6>
            STAT(sym_recycle[i]);
            break;
        }

    if(sym) {
        iscn->recycle[i].head = sym->next;
  406110:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  406112:	eb07 03c3 	add.w	r3, r7, r3, lsl #3
  406116:	635a      	str	r2, [r3, #52]	; 0x34
        sym->next = NULL;
  406118:	2200      	movs	r2, #0
  40611a:	62e2      	str	r2, [r4, #44]	; 0x2c
        assert(iscn->recycle[i].nsyms);
  40611c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  40611e:	b92a      	cbnz	r2, 40612c <_zbar_image_scanner_add_sym+0xc0>
  406120:	4852      	ldr	r0, [pc, #328]	; (40626c <_zbar_image_scanner_add_sym+0x200>)
  406122:	21e8      	movs	r1, #232	; 0xe8
  406124:	4a52      	ldr	r2, [pc, #328]	; (406270 <_zbar_image_scanner_add_sym+0x204>)
  406126:	4b53      	ldr	r3, [pc, #332]	; (406274 <_zbar_image_scanner_add_sym+0x208>)
  406128:	4c53      	ldr	r4, [pc, #332]	; (406278 <_zbar_image_scanner_add_sym+0x20c>)
  40612a:	47a0      	blx	r4
        iscn->recycle[i].nsyms--;
  40612c:	3a01      	subs	r2, #1
  40612e:	631a      	str	r2, [r3, #48]	; 0x30
  406130:	e009      	b.n	406146 <_zbar_image_scanner_add_sym+0xda>
    }
    else {
        sym = pvPortCalloc(1, sizeof(zbar_symbol_t));
  406132:	2001      	movs	r0, #1
  406134:	2140      	movs	r1, #64	; 0x40
  406136:	4b51      	ldr	r3, [pc, #324]	; (40627c <_zbar_image_scanner_add_sym+0x210>)
  406138:	4798      	blx	r3
  40613a:	4604      	mov	r4, r0
        STAT(sym_new);
  40613c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
  406140:	3301      	adds	r3, #1
  406142:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    }

    /* init new symbol */
    sym->type = type;
  406146:	f8a4 8000 	strh.w	r8, [r4]
    sym->quality = 1;
  40614a:	2301      	movs	r3, #1
  40614c:	63e3      	str	r3, [r4, #60]	; 0x3c
    sym->npts = 0;
  40614e:	2300      	movs	r3, #0
  406150:	61e3      	str	r3, [r4, #28]
    sym->orient = ZBAR_ORIENT_UNKNOWN;
  406152:	22ff      	movs	r2, #255	; 0xff
  406154:	f884 2024 	strb.w	r2, [r4, #36]	; 0x24
    sym->cache_count = 0;
  406158:	63a3      	str	r3, [r4, #56]	; 0x38
    sym->time = iscn->time;
  40615a:	693b      	ldr	r3, [r7, #16]
  40615c:	6363      	str	r3, [r4, #52]	; 0x34
    assert(!sym->syms);
  40615e:	6b23      	ldr	r3, [r4, #48]	; 0x30
  406160:	b12b      	cbz	r3, 40616e <_zbar_image_scanner_add_sym+0x102>
  406162:	4842      	ldr	r0, [pc, #264]	; (40626c <_zbar_image_scanner_add_sym+0x200>)
  406164:	21f7      	movs	r1, #247	; 0xf7
  406166:	4a42      	ldr	r2, [pc, #264]	; (406270 <_zbar_image_scanner_add_sym+0x204>)
  406168:	4b45      	ldr	r3, [pc, #276]	; (406280 <_zbar_image_scanner_add_sym+0x214>)
  40616a:	4c43      	ldr	r4, [pc, #268]	; (406278 <_zbar_image_scanner_add_sym+0x20c>)
  40616c:	47a0      	blx	r4

    if(datalen > 0) {
  40616e:	2e00      	cmp	r6, #0
  406170:	dd0e      	ble.n	406190 <_zbar_image_scanner_add_sym+0x124>
        sym->datalen = datalen - 1;
  406172:	1e73      	subs	r3, r6, #1
  406174:	6123      	str	r3, [r4, #16]
        if(sym->data_alloc < datalen) {
  406176:	68e3      	ldr	r3, [r4, #12]
  406178:	429e      	cmp	r6, r3
  40617a:	d911      	bls.n	4061a0 <_zbar_image_scanner_add_sym+0x134>
            if(sym->data)
  40617c:	6960      	ldr	r0, [r4, #20]
  40617e:	b108      	cbz	r0, 406184 <_zbar_image_scanner_add_sym+0x118>
                vPortFree(sym->data);
  406180:	4b40      	ldr	r3, [pc, #256]	; (406284 <_zbar_image_scanner_add_sym+0x218>)
  406182:	4798      	blx	r3
            sym->data_alloc = datalen;
  406184:	60e6      	str	r6, [r4, #12]
            sym->data = pvPortMalloc(datalen);
  406186:	4630      	mov	r0, r6
  406188:	4b3f      	ldr	r3, [pc, #252]	; (406288 <_zbar_image_scanner_add_sym+0x21c>)
  40618a:	4798      	blx	r3
  40618c:	6160      	str	r0, [r4, #20]
  40618e:	e007      	b.n	4061a0 <_zbar_image_scanner_add_sym+0x134>
        }
    }
    else {
        if(sym->data)
  406190:	6960      	ldr	r0, [r4, #20]
  406192:	b108      	cbz	r0, 406198 <_zbar_image_scanner_add_sym+0x12c>
            vPortFree(sym->data);
  406194:	4b3b      	ldr	r3, [pc, #236]	; (406284 <_zbar_image_scanner_add_sym+0x218>)
  406196:	4798      	blx	r3
        sym->data = NULL;
  406198:	2300      	movs	r3, #0
  40619a:	6163      	str	r3, [r4, #20]
        sym->datalen = sym->data_alloc = 0;
  40619c:	60e3      	str	r3, [r4, #12]
  40619e:	6123      	str	r3, [r4, #16]
        zbar_symbol_t *entry = cache_lookup(iscn, sym);
        if(!entry) {
            /* FIXME reuse sym */
            entry = _zbar_image_scanner_alloc_sym(iscn, sym->type,
                                                  sym->datalen + 1);
            entry->configs = sym->configs;
  4061a0:	686b      	ldr	r3, [r5, #4]
  4061a2:	6063      	str	r3, [r4, #4]
            entry->modifiers = sym->modifiers;
  4061a4:	68ab      	ldr	r3, [r5, #8]
  4061a6:	60a3      	str	r3, [r4, #8]
            memcpy(entry->data, sym->data, sym->datalen);
  4061a8:	6960      	ldr	r0, [r4, #20]
  4061aa:	6969      	ldr	r1, [r5, #20]
  4061ac:	692a      	ldr	r2, [r5, #16]
  4061ae:	4b37      	ldr	r3, [pc, #220]	; (40628c <_zbar_image_scanner_add_sym+0x220>)
  4061b0:	4798      	blx	r3
            entry->time = sym->time - CACHE_HYSTERESIS;
  4061b2:	6b6b      	ldr	r3, [r5, #52]	; 0x34
  4061b4:	f5a3 63fa 	sub.w	r3, r3, #2000	; 0x7d0
  4061b8:	6363      	str	r3, [r4, #52]	; 0x34
            entry->cache_count = 0;
  4061ba:	2300      	movs	r3, #0
  4061bc:	63a3      	str	r3, [r4, #56]	; 0x38
            /* add to cache */
            entry->next = iscn->cache;
  4061be:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
  4061c0:	62e3      	str	r3, [r4, #44]	; 0x2c
            iscn->cache = entry;
  4061c2:	65fc      	str	r4, [r7, #92]	; 0x5c
        }

        /* consistency check and hysteresis */
        age = sym->time - entry->time;
  4061c4:	6b6a      	ldr	r2, [r5, #52]	; 0x34
  4061c6:	6b63      	ldr	r3, [r4, #52]	; 0x34
  4061c8:	1ad3      	subs	r3, r2, r3
        entry->time = sym->time;
  4061ca:	6362      	str	r2, [r4, #52]	; 0x34
        near_thresh = (age < CACHE_PROXIMITY);
        far_thresh = (age >= CACHE_HYSTERESIS);
        dup = (entry->cache_count >= 0);
  4061cc:	6ba2      	ldr	r2, [r4, #56]	; 0x38
        if((!dup && !near_thresh) || far_thresh) {
  4061ce:	2a00      	cmp	r2, #0
  4061d0:	da45      	bge.n	40625e <_zbar_image_scanner_add_sym+0x1f2>
  4061d2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
  4061d6:	d308      	bcc.n	4061ea <_zbar_image_scanner_add_sym+0x17e>
            int type = sym->type;
            int h = _zbar_get_symbol_hash(type);
  4061d8:	8828      	ldrh	r0, [r5, #0]
  4061da:	4b2d      	ldr	r3, [pc, #180]	; (406290 <_zbar_image_scanner_add_sym+0x224>)
  4061dc:	4798      	blx	r3
            entry->cache_count = -iscn->sym_configs[0][h];
  4061de:	301c      	adds	r0, #28
  4061e0:	f857 3020 	ldr.w	r3, [r7, r0, lsl #2]
  4061e4:	425b      	negs	r3, r3
  4061e6:	63a3      	str	r3, [r4, #56]	; 0x38
  4061e8:	e001      	b.n	4061ee <_zbar_image_scanner_add_sym+0x182>
        }
        else if(dup || near_thresh)
            entry->cache_count++;
  4061ea:	3201      	adds	r2, #1
  4061ec:	63a2      	str	r2, [r4, #56]	; 0x38

        sym->cache_count = entry->cache_count;
  4061ee:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  4061f0:	63aa      	str	r2, [r5, #56]	; 0x38
                                 zbar_symbol_t *sym)
{
    zbar_symbol_set_t *syms;
    cache_sym(iscn, sym);

    syms = iscn->syms;
  4061f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    if(sym->cache_count || !syms->tail) {
  4061f4:	b92a      	cbnz	r2, 406202 <_zbar_image_scanner_add_sym+0x196>
  4061f6:	e002      	b.n	4061fe <_zbar_image_scanner_add_sym+0x192>
            entry->cache_count++;

        sym->cache_count = entry->cache_count;
    }
    else
        sym->cache_count = 0;
  4061f8:	2300      	movs	r3, #0
  4061fa:	638b      	str	r3, [r1, #56]	; 0x38
                                 zbar_symbol_t *sym)
{
    zbar_symbol_set_t *syms;
    cache_sym(iscn, sym);

    syms = iscn->syms;
  4061fc:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    if(sym->cache_count || !syms->tail) {
  4061fe:	68da      	ldr	r2, [r3, #12]
  406200:	b91a      	cbnz	r2, 40620a <_zbar_image_scanner_add_sym+0x19e>
        sym->next = syms->head;
  406202:	689a      	ldr	r2, [r3, #8]
  406204:	62ea      	str	r2, [r5, #44]	; 0x2c
        syms->head = sym;
  406206:	609d      	str	r5, [r3, #8]
  406208:	e003      	b.n	406212 <_zbar_image_scanner_add_sym+0x1a6>
    }
    else {
        sym->next = syms->tail->next;
  40620a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
  40620c:	62ea      	str	r2, [r5, #44]	; 0x2c
        syms->tail->next = sym;
  40620e:	68da      	ldr	r2, [r3, #12]
  406210:	62d5      	str	r5, [r2, #44]	; 0x2c
    }

    if(!sym->cache_count)
  406212:	6baa      	ldr	r2, [r5, #56]	; 0x38
  406214:	b91a      	cbnz	r2, 40621e <_zbar_image_scanner_add_sym+0x1b2>
        syms->nsyms++;
  406216:	685a      	ldr	r2, [r3, #4]
  406218:	3201      	adds	r2, #1
  40621a:	605a      	str	r2, [r3, #4]
  40621c:	e002      	b.n	406224 <_zbar_image_scanner_add_sym+0x1b8>
    else if(!syms->tail)
  40621e:	68da      	ldr	r2, [r3, #12]
  406220:	b902      	cbnz	r2, 406224 <_zbar_image_scanner_add_sym+0x1b8>
        syms->tail = sym;
  406222:	60dd      	str	r5, [r3, #12]
typedef int refcnt_t;

static inline int _zbar_refcnt (refcnt_t *cnt,
                                int delta)
{
    int rc = (*cnt += delta);
  406224:	6aab      	ldr	r3, [r5, #40]	; 0x28
  406226:	3301      	adds	r3, #1
  406228:	62ab      	str	r3, [r5, #40]	; 0x28
    assert(rc >= 0);
  40622a:	2b00      	cmp	r3, #0
  40622c:	da1b      	bge.n	406266 <_zbar_image_scanner_add_sym+0x1fa>
  40622e:	4819      	ldr	r0, [pc, #100]	; (406294 <_zbar_image_scanner_add_sym+0x228>)
  406230:	2157      	movs	r1, #87	; 0x57
  406232:	4a19      	ldr	r2, [pc, #100]	; (406298 <_zbar_image_scanner_add_sym+0x22c>)
  406234:	4b19      	ldr	r3, [pc, #100]	; (40629c <_zbar_image_scanner_add_sym+0x230>)
  406236:	4c10      	ldr	r4, [pc, #64]	; (406278 <_zbar_image_scanner_add_sym+0x20c>)
  406238:	47a0      	blx	r4
    if(iscn->enable_cache) {
        uint32_t age, near_thresh, far_thresh, dup;
        zbar_symbol_t *entry = cache_lookup(iscn, sym);
        if(!entry) {
            /* FIXME reuse sym */
            entry = _zbar_image_scanner_alloc_sym(iscn, sym->type,
  40623a:	f8b5 8000 	ldrh.w	r8, [r5]
                                                  sym->datalen + 1);
  40623e:	692e      	ldr	r6, [r5, #16]
  406240:	3601      	adds	r6, #1
{
    /* recycle old or alloc new symbol */
    zbar_symbol_t *sym = NULL;
    int i;
    for(i = 0; i < RECYCLE_BUCKETS - 1; i++)
        if(datalen <= 1 << (i * 2))
  406242:	2e01      	cmp	r6, #1
  406244:	f77f af75 	ble.w	406132 <_zbar_image_scanner_add_sym+0xc6>
  406248:	2e04      	cmp	r6, #4
  40624a:	f77f af44 	ble.w	4060d6 <_zbar_image_scanner_add_sym+0x6a>
  40624e:	2e10      	cmp	r6, #16
  406250:	f77f af43 	ble.w	4060da <_zbar_image_scanner_add_sym+0x6e>
  406254:	2e40      	cmp	r6, #64	; 0x40
  406256:	f77f af42 	ble.w	4060de <_zbar_image_scanner_add_sym+0x72>
                               int datalen)
{
    /* recycle old or alloc new symbol */
    zbar_symbol_t *sym = NULL;
    int i;
    for(i = 0; i < RECYCLE_BUCKETS - 1; i++)
  40625a:	2304      	movs	r3, #4
  40625c:	e742      	b.n	4060e4 <_zbar_image_scanner_add_sym+0x78>
        age = sym->time - entry->time;
        entry->time = sym->time;
        near_thresh = (age < CACHE_PROXIMITY);
        far_thresh = (age >= CACHE_HYSTERESIS);
        dup = (entry->cache_count >= 0);
        if((!dup && !near_thresh) || far_thresh) {
  40625e:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
  406262:	d2b9      	bcs.n	4061d8 <_zbar_image_scanner_add_sym+0x16c>
  406264:	e7c1      	b.n	4061ea <_zbar_image_scanner_add_sym+0x17e>
  406266:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40626a:	bf00      	nop
  40626c:	00411564 	.word	0x00411564
  406270:	00411544 	.word	0x00411544
  406274:	004115ac 	.word	0x004115ac
  406278:	00408031 	.word	0x00408031
  40627c:	00401935 	.word	0x00401935
  406280:	004115c4 	.word	0x004115c4
  406284:	00401959 	.word	0x00401959
  406288:	004017fd 	.word	0x004017fd
  40628c:	00409125 	.word	0x00409125
  406290:	004075b1 	.word	0x004075b1
  406294:	00411438 	.word	0x00411438
  406298:	004117fc 	.word	0x004117fc
  40629c:	00411464 	.word	0x00411464
  4062a0:	004090c1 	.word	0x004090c1
  4062a4:	00405f55 	.word	0x00405f55

004062a8 <symbol_handler>:
    _zbar_qr_found_line(iscn->qr, vert, line);
}
#endif

static void symbol_handler (zbar_decoder_t *dcode)
{
  4062a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4062ac:	b087      	sub	sp, #28
  4062ae:	4680      	mov	r8, r0
    zbar_image_scanner_t *iscn = zbar_decoder_get_userdata(dcode);
  4062b0:	4b7a      	ldr	r3, [pc, #488]	; (40649c <symbol_handler+0x1f4>)
  4062b2:	4798      	blx	r3
  4062b4:	4607      	mov	r7, r0
    zbar_symbol_type_t type = zbar_decoder_get_type(dcode);
  4062b6:	4640      	mov	r0, r8
  4062b8:	4b79      	ldr	r3, [pc, #484]	; (4064a0 <symbol_handler+0x1f8>)
  4062ba:	4798      	blx	r3
  4062bc:	4605      	mov	r5, r0
    if(type == ZBAR_QRCODE) {
        qr_handler(iscn);
        return;
    }
#else
    assert(type != ZBAR_QRCODE);
  4062be:	2840      	cmp	r0, #64	; 0x40
  4062c0:	d106      	bne.n	4062d0 <symbol_handler+0x28>
  4062c2:	4878      	ldr	r0, [pc, #480]	; (4064a4 <symbol_handler+0x1fc>)
  4062c4:	f44f 71cc 	mov.w	r1, #408	; 0x198
  4062c8:	4a77      	ldr	r2, [pc, #476]	; (4064a8 <symbol_handler+0x200>)
  4062ca:	4b78      	ldr	r3, [pc, #480]	; (4064ac <symbol_handler+0x204>)
  4062cc:	4c78      	ldr	r4, [pc, #480]	; (4064b0 <symbol_handler+0x208>)
  4062ce:	47a0      	blx	r4
#endif

    if(TEST_CFG(iscn, ZBAR_CFG_POSITION)) {
  4062d0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
  4062d2:	f013 0f01 	tst.w	r3, #1
  4062d6:	d014      	beq.n	406302 <symbol_handler+0x5a>
        /* tmp position fixup */
        int w = zbar_scanner_get_width(iscn->scn);
  4062d8:	6838      	ldr	r0, [r7, #0]
  4062da:	4b76      	ldr	r3, [pc, #472]	; (4064b4 <symbol_handler+0x20c>)
  4062dc:	4798      	blx	r3
  4062de:	4601      	mov	r1, r0
        int u = iscn->umin + iscn->du * zbar_scanner_get_edge(iscn->scn, w, 0);
  4062e0:	6a7c      	ldr	r4, [r7, #36]	; 0x24
  4062e2:	6a3e      	ldr	r6, [r7, #32]
  4062e4:	6838      	ldr	r0, [r7, #0]
  4062e6:	2200      	movs	r2, #0
  4062e8:	4b73      	ldr	r3, [pc, #460]	; (4064b8 <symbol_handler+0x210>)
  4062ea:	4798      	blx	r3
  4062ec:	fb06 4900 	mla	r9, r6, r0, r4
        if(iscn->dx) {
  4062f0:	69bb      	ldr	r3, [r7, #24]
  4062f2:	b113      	cbz	r3, 4062fa <symbol_handler+0x52>
            x = u;
            y = iscn->v;
  4062f4:	f8d7 a028 	ldr.w	sl, [r7, #40]	; 0x28
  4062f8:	e006      	b.n	406308 <symbol_handler+0x60>
        }
        else {
            x = iscn->v;
            y = u;
  4062fa:	46ca      	mov	sl, r9
        if(iscn->dx) {
            x = u;
            y = iscn->v;
        }
        else {
            x = iscn->v;
  4062fc:	f8d7 9028 	ldr.w	r9, [r7, #40]	; 0x28
  406300:	e002      	b.n	406308 <symbol_handler+0x60>

static void symbol_handler (zbar_decoder_t *dcode)
{
    zbar_image_scanner_t *iscn = zbar_decoder_get_userdata(dcode);
    zbar_symbol_type_t type = zbar_decoder_get_type(dcode);
    int x = 0, y = 0, dir;
  406302:	f04f 0a00 	mov.w	sl, #0
  406306:	46d1      	mov	r9, sl
            y = u;
        }
    }

    /* FIXME debug flag to save/display all PARTIALs */
    if(type <= ZBAR_PARTIAL) {
  406308:	2d01      	cmp	r5, #1
  40630a:	d80f      	bhi.n	40632c <symbol_handler+0x84>
        zprintf(256, "partial symbol @(%d,%d)\n", x, y);
  40630c:	4b6b      	ldr	r3, [pc, #428]	; (4064bc <symbol_handler+0x214>)
  40630e:	681b      	ldr	r3, [r3, #0]
  406310:	2bff      	cmp	r3, #255	; 0xff
  406312:	f340 8149 	ble.w	4065a8 <symbol_handler+0x300>
  406316:	4b6a      	ldr	r3, [pc, #424]	; (4064c0 <symbol_handler+0x218>)
  406318:	681b      	ldr	r3, [r3, #0]
  40631a:	68d8      	ldr	r0, [r3, #12]
  40631c:	f8cd a000 	str.w	sl, [sp]
  406320:	4968      	ldr	r1, [pc, #416]	; (4064c4 <symbol_handler+0x21c>)
  406322:	4a61      	ldr	r2, [pc, #388]	; (4064a8 <symbol_handler+0x200>)
  406324:	464b      	mov	r3, r9
  406326:	4c68      	ldr	r4, [pc, #416]	; (4064c8 <symbol_handler+0x220>)
  406328:	47a0      	blx	r4
  40632a:	e13d      	b.n	4065a8 <symbol_handler+0x300>
        return;
    }

    data = zbar_decoder_get_data(dcode);
  40632c:	4640      	mov	r0, r8
  40632e:	4b67      	ldr	r3, [pc, #412]	; (4064cc <symbol_handler+0x224>)
  406330:	4798      	blx	r3
  406332:	9005      	str	r0, [sp, #20]
    datalen = zbar_decoder_get_data_length(dcode);
  406334:	4640      	mov	r0, r8
  406336:	4b66      	ldr	r3, [pc, #408]	; (4064d0 <symbol_handler+0x228>)
  406338:	4798      	blx	r3
  40633a:	4606      	mov	r6, r0

    /* FIXME need better symbol matching */
    for(sym = iscn->syms->head; sym; sym = sym->next)
  40633c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  40633e:	689c      	ldr	r4, [r3, #8]
  406340:	2c00      	cmp	r4, #0
  406342:	d043      	beq.n	4063cc <symbol_handler+0x124>
        if(sym->type == type &&
           sym->datalen == datalen &&
           !memcmp(sym->data, data, datalen)) {
  406344:	f8df b1b0 	ldr.w	fp, [pc, #432]	; 4064f8 <symbol_handler+0x250>
    data = zbar_decoder_get_data(dcode);
    datalen = zbar_decoder_get_data_length(dcode);

    /* FIXME need better symbol matching */
    for(sym = iscn->syms->head; sym; sym = sym->next)
        if(sym->type == type &&
  406348:	8823      	ldrh	r3, [r4, #0]
  40634a:	42ab      	cmp	r3, r5
  40634c:	d13b      	bne.n	4063c6 <symbol_handler+0x11e>
  40634e:	6923      	ldr	r3, [r4, #16]
  406350:	42b3      	cmp	r3, r6
  406352:	d138      	bne.n	4063c6 <symbol_handler+0x11e>
           sym->datalen == datalen &&
           !memcmp(sym->data, data, datalen)) {
  406354:	6960      	ldr	r0, [r4, #20]
  406356:	9905      	ldr	r1, [sp, #20]
  406358:	4632      	mov	r2, r6
  40635a:	47d8      	blx	fp
    datalen = zbar_decoder_get_data_length(dcode);

    /* FIXME need better symbol matching */
    for(sym = iscn->syms->head; sym; sym = sym->next)
        if(sym->type == type &&
           sym->datalen == datalen &&
  40635c:	2800      	cmp	r0, #0
  40635e:	d132      	bne.n	4063c6 <symbol_handler+0x11e>
           !memcmp(sym->data, data, datalen)) {
            sym->quality++;
  406360:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  406362:	3301      	adds	r3, #1
  406364:	63e3      	str	r3, [r4, #60]	; 0x3c
            zprintf(224, "dup symbol @(%d,%d): dup %s: %.20s\n",
  406366:	4b55      	ldr	r3, [pc, #340]	; (4064bc <symbol_handler+0x214>)
  406368:	681b      	ldr	r3, [r3, #0]
  40636a:	2bdf      	cmp	r3, #223	; 0xdf
  40636c:	dd10      	ble.n	406390 <symbol_handler+0xe8>
  40636e:	4b54      	ldr	r3, [pc, #336]	; (4064c0 <symbol_handler+0x218>)
  406370:	681b      	ldr	r3, [r3, #0]
  406372:	68de      	ldr	r6, [r3, #12]
  406374:	4628      	mov	r0, r5
  406376:	4b57      	ldr	r3, [pc, #348]	; (4064d4 <symbol_handler+0x22c>)
  406378:	4798      	blx	r3
  40637a:	f8cd a000 	str.w	sl, [sp]
  40637e:	9001      	str	r0, [sp, #4]
  406380:	9b05      	ldr	r3, [sp, #20]
  406382:	9302      	str	r3, [sp, #8]
  406384:	4630      	mov	r0, r6
  406386:	4954      	ldr	r1, [pc, #336]	; (4064d8 <symbol_handler+0x230>)
  406388:	4a47      	ldr	r2, [pc, #284]	; (4064a8 <symbol_handler+0x200>)
  40638a:	464b      	mov	r3, r9
  40638c:	4d4e      	ldr	r5, [pc, #312]	; (4064c8 <symbol_handler+0x220>)
  40638e:	47a8      	blx	r5
                    x, y, zbar_get_symbol_name(type), data);
            if(TEST_CFG(iscn, ZBAR_CFG_POSITION))
  406390:	6e3b      	ldr	r3, [r7, #96]	; 0x60
  406392:	f013 0f01 	tst.w	r3, #1
  406396:	f000 8107 	beq.w	4065a8 <symbol_handler+0x300>

static inline void sym_add_point (zbar_symbol_t *sym,
                                  int x,
                                  int y)
{
    int i = sym->npts;
  40639a:	69e5      	ldr	r5, [r4, #28]
    if(++sym->npts >= sym->pts_alloc)
  40639c:	1c6b      	adds	r3, r5, #1
  40639e:	61e3      	str	r3, [r4, #28]
  4063a0:	69a1      	ldr	r1, [r4, #24]
  4063a2:	428b      	cmp	r3, r1
  4063a4:	d306      	bcc.n	4063b4 <symbol_handler+0x10c>
        sym->pts = realloc(sym->pts, ++sym->pts_alloc * sizeof(point_t));
  4063a6:	3101      	adds	r1, #1
  4063a8:	61a1      	str	r1, [r4, #24]
  4063aa:	6a20      	ldr	r0, [r4, #32]
  4063ac:	00c9      	lsls	r1, r1, #3
  4063ae:	4b4b      	ldr	r3, [pc, #300]	; (4064dc <symbol_handler+0x234>)
  4063b0:	4798      	blx	r3
  4063b2:	6220      	str	r0, [r4, #32]
    sym->pts[i].x = x;
  4063b4:	6a23      	ldr	r3, [r4, #32]
  4063b6:	f843 9035 	str.w	r9, [r3, r5, lsl #3]
    sym->pts[i].y = y;
  4063ba:	6a23      	ldr	r3, [r4, #32]
  4063bc:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
  4063c0:	f8c3 a004 	str.w	sl, [r3, #4]
  4063c4:	e0f0      	b.n	4065a8 <symbol_handler+0x300>

    data = zbar_decoder_get_data(dcode);
    datalen = zbar_decoder_get_data_length(dcode);

    /* FIXME need better symbol matching */
    for(sym = iscn->syms->head; sym; sym = sym->next)
  4063c6:	6ae4      	ldr	r4, [r4, #44]	; 0x2c
  4063c8:	2c00      	cmp	r4, #0
  4063ca:	d1bd      	bne.n	406348 <symbol_handler+0xa0>
                /* FIXME should be polygon */
                sym_add_point(sym, x, y);
            return;
        }

    sym = _zbar_image_scanner_alloc_sym(iscn, type, datalen + 1);
  4063cc:	3601      	adds	r6, #1
{
    /* recycle old or alloc new symbol */
    zbar_symbol_t *sym = NULL;
    int i;
    for(i = 0; i < RECYCLE_BUCKETS - 1; i++)
        if(datalen <= 1 << (i * 2))
  4063ce:	2e01      	cmp	r6, #1
  4063d0:	dd36      	ble.n	406440 <symbol_handler+0x198>
  4063d2:	2e04      	cmp	r6, #4
  4063d4:	dd06      	ble.n	4063e4 <symbol_handler+0x13c>
  4063d6:	2e10      	cmp	r6, #16
  4063d8:	dd06      	ble.n	4063e8 <symbol_handler+0x140>
  4063da:	2e40      	cmp	r6, #64	; 0x40
                               int datalen)
{
    /* recycle old or alloc new symbol */
    zbar_symbol_t *sym = NULL;
    int i;
    for(i = 0; i < RECYCLE_BUCKETS - 1; i++)
  4063dc:	bfd8      	it	le
  4063de:	2303      	movle	r3, #3
        if(datalen <= 1 << (i * 2))
  4063e0:	dd03      	ble.n	4063ea <symbol_handler+0x142>
  4063e2:	e005      	b.n	4063f0 <symbol_handler+0x148>
                               int datalen)
{
    /* recycle old or alloc new symbol */
    zbar_symbol_t *sym = NULL;
    int i;
    for(i = 0; i < RECYCLE_BUCKETS - 1; i++)
  4063e4:	2301      	movs	r3, #1
  4063e6:	e000      	b.n	4063ea <symbol_handler+0x142>
  4063e8:	2302      	movs	r3, #2
        if(datalen <= 1 << (i * 2))
            break;

    for(; i > 0; i--)
  4063ea:	2b00      	cmp	r3, #0
  4063ec:	dc01      	bgt.n	4063f2 <symbol_handler+0x14a>
  4063ee:	e027      	b.n	406440 <symbol_handler+0x198>
                               int datalen)
{
    /* recycle old or alloc new symbol */
    zbar_symbol_t *sym = NULL;
    int i;
    for(i = 0; i < RECYCLE_BUCKETS - 1; i++)
  4063f0:	2304      	movs	r3, #4
        if(datalen <= 1 << (i * 2))
            break;

    for(; i > 0; i--)
        if((sym = iscn->recycle[i].head)) {
  4063f2:	eb07 02c3 	add.w	r2, r7, r3, lsl #3
  4063f6:	6b54      	ldr	r4, [r2, #52]	; 0x34
  4063f8:	eb07 02c3 	add.w	r2, r7, r3, lsl #3
  4063fc:	b164      	cbz	r4, 406418 <symbol_handler+0x170>
  4063fe:	e002      	b.n	406406 <symbol_handler+0x15e>
  406400:	3a08      	subs	r2, #8
  406402:	6b54      	ldr	r4, [r2, #52]	; 0x34
  406404:	b144      	cbz	r4, 406418 <symbol_handler+0x170>
  406406:	eb07 0183 	add.w	r1, r7, r3, lsl #2
            STAT(sym_recycle[i]);
  40640a:	f8d1 20d8 	ldr.w	r2, [r1, #216]	; 0xd8
  40640e:	3201      	adds	r2, #1
  406410:	f8c1 20d8 	str.w	r2, [r1, #216]	; 0xd8
            break;
        }

    if(sym) {
  406414:	b91c      	cbnz	r4, 40641e <symbol_handler+0x176>
  406416:	e013      	b.n	406440 <symbol_handler+0x198>
    int i;
    for(i = 0; i < RECYCLE_BUCKETS - 1; i++)
        if(datalen <= 1 << (i * 2))
            break;

    for(; i > 0; i--)
  406418:	3b01      	subs	r3, #1
  40641a:	d1f1      	bne.n	406400 <symbol_handler+0x158>
  40641c:	e010      	b.n	406440 <symbol_handler+0x198>
            STAT(sym_recycle[i]);
            break;
        }

    if(sym) {
        iscn->recycle[i].head = sym->next;
  40641e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  406420:	eb07 03c3 	add.w	r3, r7, r3, lsl #3
  406424:	635a      	str	r2, [r3, #52]	; 0x34
        sym->next = NULL;
  406426:	2200      	movs	r2, #0
  406428:	62e2      	str	r2, [r4, #44]	; 0x2c
        assert(iscn->recycle[i].nsyms);
  40642a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  40642c:	b92a      	cbnz	r2, 40643a <symbol_handler+0x192>
  40642e:	481d      	ldr	r0, [pc, #116]	; (4064a4 <symbol_handler+0x1fc>)
  406430:	21e8      	movs	r1, #232	; 0xe8
  406432:	4a2b      	ldr	r2, [pc, #172]	; (4064e0 <symbol_handler+0x238>)
  406434:	4b2b      	ldr	r3, [pc, #172]	; (4064e4 <symbol_handler+0x23c>)
  406436:	4c1e      	ldr	r4, [pc, #120]	; (4064b0 <symbol_handler+0x208>)
  406438:	47a0      	blx	r4
        iscn->recycle[i].nsyms--;
  40643a:	3a01      	subs	r2, #1
  40643c:	631a      	str	r2, [r3, #48]	; 0x30
  40643e:	e009      	b.n	406454 <symbol_handler+0x1ac>
    }
    else {
        sym = pvPortCalloc(1, sizeof(zbar_symbol_t));
  406440:	2001      	movs	r0, #1
  406442:	2140      	movs	r1, #64	; 0x40
  406444:	4b28      	ldr	r3, [pc, #160]	; (4064e8 <symbol_handler+0x240>)
  406446:	4798      	blx	r3
  406448:	4604      	mov	r4, r0
        STAT(sym_new);
  40644a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
  40644e:	3301      	adds	r3, #1
  406450:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    }

    /* init new symbol */
    sym->type = type;
  406454:	8025      	strh	r5, [r4, #0]
    sym->quality = 1;
  406456:	2301      	movs	r3, #1
  406458:	63e3      	str	r3, [r4, #60]	; 0x3c
    sym->npts = 0;
  40645a:	2300      	movs	r3, #0
  40645c:	61e3      	str	r3, [r4, #28]
    sym->orient = ZBAR_ORIENT_UNKNOWN;
  40645e:	22ff      	movs	r2, #255	; 0xff
  406460:	f884 2024 	strb.w	r2, [r4, #36]	; 0x24
    sym->cache_count = 0;
  406464:	63a3      	str	r3, [r4, #56]	; 0x38
    sym->time = iscn->time;
  406466:	693b      	ldr	r3, [r7, #16]
  406468:	6363      	str	r3, [r4, #52]	; 0x34
    assert(!sym->syms);
  40646a:	6b23      	ldr	r3, [r4, #48]	; 0x30
  40646c:	b12b      	cbz	r3, 40647a <symbol_handler+0x1d2>
  40646e:	480d      	ldr	r0, [pc, #52]	; (4064a4 <symbol_handler+0x1fc>)
  406470:	21f7      	movs	r1, #247	; 0xf7
  406472:	4a1b      	ldr	r2, [pc, #108]	; (4064e0 <symbol_handler+0x238>)
  406474:	4b1d      	ldr	r3, [pc, #116]	; (4064ec <symbol_handler+0x244>)
  406476:	4c0e      	ldr	r4, [pc, #56]	; (4064b0 <symbol_handler+0x208>)
  406478:	47a0      	blx	r4

    if(datalen > 0) {
  40647a:	2e00      	cmp	r6, #0
  40647c:	dd3e      	ble.n	4064fc <symbol_handler+0x254>
        sym->datalen = datalen - 1;
  40647e:	1e73      	subs	r3, r6, #1
  406480:	6123      	str	r3, [r4, #16]
        if(sym->data_alloc < datalen) {
  406482:	68e3      	ldr	r3, [r4, #12]
  406484:	429e      	cmp	r6, r3
  406486:	d941      	bls.n	40650c <symbol_handler+0x264>
            if(sym->data)
  406488:	6960      	ldr	r0, [r4, #20]
  40648a:	b108      	cbz	r0, 406490 <symbol_handler+0x1e8>
                vPortFree(sym->data);
  40648c:	4b18      	ldr	r3, [pc, #96]	; (4064f0 <symbol_handler+0x248>)
  40648e:	4798      	blx	r3
            sym->data_alloc = datalen;
  406490:	60e6      	str	r6, [r4, #12]
            sym->data = pvPortMalloc(datalen);
  406492:	4630      	mov	r0, r6
  406494:	4b17      	ldr	r3, [pc, #92]	; (4064f4 <symbol_handler+0x24c>)
  406496:	4798      	blx	r3
  406498:	6160      	str	r0, [r4, #20]
  40649a:	e037      	b.n	40650c <symbol_handler+0x264>
  40649c:	00404969 	.word	0x00404969
  4064a0:	0040496d 	.word	0x0040496d
  4064a4:	00411564 	.word	0x00411564
  4064a8:	00411518 	.word	0x00411518
  4064ac:	004115d0 	.word	0x004115d0
  4064b0:	00408031 	.word	0x00408031
  4064b4:	004071e9 	.word	0x004071e9
  4064b8:	004071ed 	.word	0x004071ed
  4064bc:	2000ae6c 	.word	0x2000ae6c
  4064c0:	20000440 	.word	0x20000440
  4064c4:	004115e4 	.word	0x004115e4
  4064c8:	004083a9 	.word	0x004083a9
  4064cc:	00404951 	.word	0x00404951
  4064d0:	00404955 	.word	0x00404955
  4064d4:	0040748d 	.word	0x0040748d
  4064d8:	00411604 	.word	0x00411604
  4064dc:	004093c5 	.word	0x004093c5
  4064e0:	00411544 	.word	0x00411544
  4064e4:	004115ac 	.word	0x004115ac
  4064e8:	00401935 	.word	0x00401935
  4064ec:	004115c4 	.word	0x004115c4
  4064f0:	00401959 	.word	0x00401959
  4064f4:	004017fd 	.word	0x004017fd
  4064f8:	004090c1 	.word	0x004090c1
        }
    }
    else {
        if(sym->data)
  4064fc:	6960      	ldr	r0, [r4, #20]
  4064fe:	b108      	cbz	r0, 406504 <symbol_handler+0x25c>
            vPortFree(sym->data);
  406500:	4b2b      	ldr	r3, [pc, #172]	; (4065b0 <symbol_handler+0x308>)
  406502:	4798      	blx	r3
        sym->data = NULL;
  406504:	2300      	movs	r3, #0
  406506:	6163      	str	r3, [r4, #20]
        sym->datalen = sym->data_alloc = 0;
  406508:	60e3      	str	r3, [r4, #12]
  40650a:	6123      	str	r3, [r4, #16]
                sym_add_point(sym, x, y);
            return;
        }

    sym = _zbar_image_scanner_alloc_sym(iscn, type, datalen + 1);
    sym->configs = zbar_decoder_get_configs(dcode, type);
  40650c:	4640      	mov	r0, r8
  40650e:	4629      	mov	r1, r5
  406510:	4b28      	ldr	r3, [pc, #160]	; (4065b4 <symbol_handler+0x30c>)
  406512:	4798      	blx	r3
  406514:	6060      	str	r0, [r4, #4]
    sym->modifiers = zbar_decoder_get_modifiers(dcode);
  406516:	4640      	mov	r0, r8
  406518:	4b27      	ldr	r3, [pc, #156]	; (4065b8 <symbol_handler+0x310>)
  40651a:	4798      	blx	r3
  40651c:	60a0      	str	r0, [r4, #8]
    /* FIXME grab decoder buffer */
    memcpy(sym->data, data, datalen + 1);
  40651e:	6960      	ldr	r0, [r4, #20]
  406520:	9905      	ldr	r1, [sp, #20]
  406522:	4632      	mov	r2, r6
  406524:	4b25      	ldr	r3, [pc, #148]	; (4065bc <symbol_handler+0x314>)
  406526:	4798      	blx	r3

    /* initialize first point */
    if(TEST_CFG(iscn, ZBAR_CFG_POSITION)) {
  406528:	6e3b      	ldr	r3, [r7, #96]	; 0x60
  40652a:	f013 0f01 	tst.w	r3, #1
  40652e:	d029      	beq.n	406584 <symbol_handler+0x2dc>
        zprintf(192, "new symbol @(%d,%d): %s: %.20s\n",
  406530:	4b23      	ldr	r3, [pc, #140]	; (4065c0 <symbol_handler+0x318>)
  406532:	681b      	ldr	r3, [r3, #0]
  406534:	2bbf      	cmp	r3, #191	; 0xbf
  406536:	dd10      	ble.n	40655a <symbol_handler+0x2b2>
  406538:	4b22      	ldr	r3, [pc, #136]	; (4065c4 <symbol_handler+0x31c>)
  40653a:	681b      	ldr	r3, [r3, #0]
  40653c:	68de      	ldr	r6, [r3, #12]
  40653e:	4628      	mov	r0, r5
  406540:	4b21      	ldr	r3, [pc, #132]	; (4065c8 <symbol_handler+0x320>)
  406542:	4798      	blx	r3
  406544:	f8cd a000 	str.w	sl, [sp]
  406548:	9001      	str	r0, [sp, #4]
  40654a:	9b05      	ldr	r3, [sp, #20]
  40654c:	9302      	str	r3, [sp, #8]
  40654e:	4630      	mov	r0, r6
  406550:	491e      	ldr	r1, [pc, #120]	; (4065cc <symbol_handler+0x324>)
  406552:	4a1f      	ldr	r2, [pc, #124]	; (4065d0 <symbol_handler+0x328>)
  406554:	464b      	mov	r3, r9
  406556:	4d1f      	ldr	r5, [pc, #124]	; (4065d4 <symbol_handler+0x32c>)
  406558:	47a8      	blx	r5

static inline void sym_add_point (zbar_symbol_t *sym,
                                  int x,
                                  int y)
{
    int i = sym->npts;
  40655a:	69e5      	ldr	r5, [r4, #28]
    if(++sym->npts >= sym->pts_alloc)
  40655c:	1c6a      	adds	r2, r5, #1
  40655e:	61e2      	str	r2, [r4, #28]
  406560:	69a3      	ldr	r3, [r4, #24]
  406562:	429a      	cmp	r2, r3
  406564:	d306      	bcc.n	406574 <symbol_handler+0x2cc>
        sym->pts = realloc(sym->pts, ++sym->pts_alloc * sizeof(point_t));
  406566:	1c59      	adds	r1, r3, #1
  406568:	61a1      	str	r1, [r4, #24]
  40656a:	6a20      	ldr	r0, [r4, #32]
  40656c:	00c9      	lsls	r1, r1, #3
  40656e:	4b1a      	ldr	r3, [pc, #104]	; (4065d8 <symbol_handler+0x330>)
  406570:	4798      	blx	r3
  406572:	6220      	str	r0, [r4, #32]
    sym->pts[i].x = x;
  406574:	6a23      	ldr	r3, [r4, #32]
  406576:	f843 9035 	str.w	r9, [r3, r5, lsl #3]
    sym->pts[i].y = y;
  40657a:	6a23      	ldr	r3, [r4, #32]
  40657c:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
  406580:	f8c3 a004 	str.w	sl, [r3, #4]
                x, y, zbar_get_symbol_name(type), data);
        sym_add_point(sym, x, y);
    }

    dir = zbar_decoder_get_direction(dcode);
  406584:	4640      	mov	r0, r8
  406586:	4b15      	ldr	r3, [pc, #84]	; (4065dc <symbol_handler+0x334>)
  406588:	4798      	blx	r3
    if(dir)
  40658a:	b148      	cbz	r0, 4065a0 <symbol_handler+0x2f8>
        sym->orient = (iscn->dy != 0) + ((iscn->du ^ dir) & 2);
  40658c:	6a3b      	ldr	r3, [r7, #32]
  40658e:	4043      	eors	r3, r0
  406590:	f003 0302 	and.w	r3, r3, #2
  406594:	69fa      	ldr	r2, [r7, #28]
  406596:	2a00      	cmp	r2, #0
  406598:	bf18      	it	ne
  40659a:	3301      	addne	r3, #1
  40659c:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24

    _zbar_image_scanner_add_sym(iscn, sym);
  4065a0:	4638      	mov	r0, r7
  4065a2:	4621      	mov	r1, r4
  4065a4:	4b0e      	ldr	r3, [pc, #56]	; (4065e0 <symbol_handler+0x338>)
  4065a6:	4798      	blx	r3
}
  4065a8:	b007      	add	sp, #28
  4065aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4065ae:	bf00      	nop
  4065b0:	00401959 	.word	0x00401959
  4065b4:	00404a5d 	.word	0x00404a5d
  4065b8:	00404975 	.word	0x00404975
  4065bc:	00409125 	.word	0x00409125
  4065c0:	2000ae6c 	.word	0x2000ae6c
  4065c4:	20000440 	.word	0x20000440
  4065c8:	0040748d 	.word	0x0040748d
  4065cc:	0041162c 	.word	0x0041162c
  4065d0:	00411518 	.word	0x00411518
  4065d4:	004083a9 	.word	0x004083a9
  4065d8:	004093c5 	.word	0x004093c5
  4065dc:	00404959 	.word	0x00404959
  4065e0:	0040606d 	.word	0x0040606d

004065e4 <zbar_image_scanner_destroy>:
                i, iscn->stat_sym_recycle[i]);
}
#endif

void zbar_image_scanner_destroy (zbar_image_scanner_t *iscn)
{
  4065e4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  4065e8:	b083      	sub	sp, #12
  4065ea:	4607      	mov	r7, r0

#ifndef NO_STATS
static inline void dump_stats (const zbar_image_scanner_t *iscn)
{
    int i;
    zprintf(1, "symbol sets allocated   = %-4d\n", iscn->stat_syms_new);
  4065ec:	4b3e      	ldr	r3, [pc, #248]	; (4066e8 <zbar_image_scanner_destroy+0x104>)
  4065ee:	681b      	ldr	r3, [r3, #0]
  4065f0:	2b00      	cmp	r3, #0
  4065f2:	dd32      	ble.n	40665a <zbar_image_scanner_destroy+0x76>
  4065f4:	4b3d      	ldr	r3, [pc, #244]	; (4066ec <zbar_image_scanner_destroy+0x108>)
  4065f6:	681b      	ldr	r3, [r3, #0]
  4065f8:	68d8      	ldr	r0, [r3, #12]
  4065fa:	493d      	ldr	r1, [pc, #244]	; (4066f0 <zbar_image_scanner_destroy+0x10c>)
  4065fc:	4a3d      	ldr	r2, [pc, #244]	; (4066f4 <zbar_image_scanner_destroy+0x110>)
  4065fe:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
  406602:	4c3d      	ldr	r4, [pc, #244]	; (4066f8 <zbar_image_scanner_destroy+0x114>)
  406604:	47a0      	blx	r4
    zprintf(1, "    scanner syms in use = %-4d\trecycled  = %-4d\n",
  406606:	4b38      	ldr	r3, [pc, #224]	; (4066e8 <zbar_image_scanner_destroy+0x104>)
  406608:	681b      	ldr	r3, [r3, #0]
  40660a:	2b00      	cmp	r3, #0
  40660c:	dd25      	ble.n	40665a <zbar_image_scanner_destroy+0x76>
  40660e:	4b37      	ldr	r3, [pc, #220]	; (4066ec <zbar_image_scanner_destroy+0x108>)
  406610:	681b      	ldr	r3, [r3, #0]
  406612:	68d8      	ldr	r0, [r3, #12]
  406614:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
  406618:	9300      	str	r3, [sp, #0]
  40661a:	4938      	ldr	r1, [pc, #224]	; (4066fc <zbar_image_scanner_destroy+0x118>)
  40661c:	4a35      	ldr	r2, [pc, #212]	; (4066f4 <zbar_image_scanner_destroy+0x110>)
  40661e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
  406622:	47a0      	blx	r4
            iscn->stat_iscn_syms_inuse, iscn->stat_iscn_syms_recycle);
    zprintf(1, "    image syms in use   = %-4d\trecycled  = %-4d\n",
  406624:	4b30      	ldr	r3, [pc, #192]	; (4066e8 <zbar_image_scanner_destroy+0x104>)
  406626:	681b      	ldr	r3, [r3, #0]
  406628:	2b00      	cmp	r3, #0
  40662a:	dd16      	ble.n	40665a <zbar_image_scanner_destroy+0x76>
  40662c:	4b2f      	ldr	r3, [pc, #188]	; (4066ec <zbar_image_scanner_destroy+0x108>)
  40662e:	681b      	ldr	r3, [r3, #0]
  406630:	68d8      	ldr	r0, [r3, #12]
  406632:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
  406636:	9300      	str	r3, [sp, #0]
  406638:	4931      	ldr	r1, [pc, #196]	; (406700 <zbar_image_scanner_destroy+0x11c>)
  40663a:	4a2e      	ldr	r2, [pc, #184]	; (4066f4 <zbar_image_scanner_destroy+0x110>)
  40663c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
  406640:	47a0      	blx	r4
            iscn->stat_img_syms_inuse, iscn->stat_img_syms_recycle);
    zprintf(1, "symbols allocated       = %-4d\n", iscn->stat_sym_new);
  406642:	4b29      	ldr	r3, [pc, #164]	; (4066e8 <zbar_image_scanner_destroy+0x104>)
  406644:	681b      	ldr	r3, [r3, #0]
  406646:	2b00      	cmp	r3, #0
  406648:	dd07      	ble.n	40665a <zbar_image_scanner_destroy+0x76>
  40664a:	4b28      	ldr	r3, [pc, #160]	; (4066ec <zbar_image_scanner_destroy+0x108>)
  40664c:	681b      	ldr	r3, [r3, #0]
  40664e:	68d8      	ldr	r0, [r3, #12]
  406650:	492c      	ldr	r1, [pc, #176]	; (406704 <zbar_image_scanner_destroy+0x120>)
  406652:	4a28      	ldr	r2, [pc, #160]	; (4066f4 <zbar_image_scanner_destroy+0x110>)
  406654:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
  406658:	47a0      	blx	r4
  40665a:	f107 05d8 	add.w	r5, r7, #216	; 0xd8
                i, iscn->stat_sym_recycle[i]);
}
#endif

void zbar_image_scanner_destroy (zbar_image_scanner_t *iscn)
{
  40665e:	2400      	movs	r4, #0
            iscn->stat_iscn_syms_inuse, iscn->stat_iscn_syms_recycle);
    zprintf(1, "    image syms in use   = %-4d\trecycled  = %-4d\n",
            iscn->stat_img_syms_inuse, iscn->stat_img_syms_recycle);
    zprintf(1, "symbols allocated       = %-4d\n", iscn->stat_sym_new);
    for(i = 0; i < RECYCLE_BUCKETS; i++)
        zprintf(1, "     recycled[%d]        = %-4d\n",
  406660:	4e21      	ldr	r6, [pc, #132]	; (4066e8 <zbar_image_scanner_destroy+0x104>)
  406662:	f8df 9088 	ldr.w	r9, [pc, #136]	; 4066ec <zbar_image_scanner_destroy+0x108>
  406666:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 406720 <zbar_image_scanner_destroy+0x13c>
  40666a:	6833      	ldr	r3, [r6, #0]
  40666c:	2b00      	cmp	r3, #0
  40666e:	dd0a      	ble.n	406686 <zbar_image_scanner_destroy+0xa2>
  406670:	f8d9 3000 	ldr.w	r3, [r9]
  406674:	68d8      	ldr	r0, [r3, #12]
  406676:	682b      	ldr	r3, [r5, #0]
  406678:	9300      	str	r3, [sp, #0]
  40667a:	4641      	mov	r1, r8
  40667c:	4a1d      	ldr	r2, [pc, #116]	; (4066f4 <zbar_image_scanner_destroy+0x110>)
  40667e:	4623      	mov	r3, r4
  406680:	f8df c074 	ldr.w	ip, [pc, #116]	; 4066f8 <zbar_image_scanner_destroy+0x114>
  406684:	47e0      	blx	ip
    zprintf(1, "    scanner syms in use = %-4d\trecycled  = %-4d\n",
            iscn->stat_iscn_syms_inuse, iscn->stat_iscn_syms_recycle);
    zprintf(1, "    image syms in use   = %-4d\trecycled  = %-4d\n",
            iscn->stat_img_syms_inuse, iscn->stat_img_syms_recycle);
    zprintf(1, "symbols allocated       = %-4d\n", iscn->stat_sym_new);
    for(i = 0; i < RECYCLE_BUCKETS; i++)
  406686:	3401      	adds	r4, #1
  406688:	3504      	adds	r5, #4
  40668a:	2c05      	cmp	r4, #5
  40668c:	d1ed      	bne.n	40666a <zbar_image_scanner_destroy+0x86>

void zbar_image_scanner_destroy (zbar_image_scanner_t *iscn)
{
    int i;
    dump_stats(iscn);
    if(iscn->syms) {
  40668e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
  406690:	b150      	cbz	r0, 4066a8 <zbar_image_scanner_destroy+0xc4>
        if(iscn->syms->refcnt)
  406692:	6803      	ldr	r3, [r0, #0]
  406694:	b123      	cbz	r3, 4066a0 <zbar_image_scanner_destroy+0xbc>
            zbar_symbol_set_ref(iscn->syms, -1);
  406696:	f04f 31ff 	mov.w	r1, #4294967295
  40669a:	4b1b      	ldr	r3, [pc, #108]	; (406708 <zbar_image_scanner_destroy+0x124>)
  40669c:	4798      	blx	r3
  40669e:	e001      	b.n	4066a4 <zbar_image_scanner_destroy+0xc0>
        else
            _zbar_symbol_set_free(iscn->syms);
  4066a0:	4b1a      	ldr	r3, [pc, #104]	; (40670c <zbar_image_scanner_destroy+0x128>)
  4066a2:	4798      	blx	r3
        iscn->syms = NULL;
  4066a4:	2300      	movs	r3, #0
  4066a6:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    if(iscn->scn)
  4066a8:	6838      	ldr	r0, [r7, #0]
  4066aa:	b108      	cbz	r0, 4066b0 <zbar_image_scanner_destroy+0xcc>
        zbar_scanner_destroy(iscn->scn);
  4066ac:	4b18      	ldr	r3, [pc, #96]	; (406710 <zbar_image_scanner_destroy+0x12c>)
  4066ae:	4798      	blx	r3
    iscn->scn = NULL;
  4066b0:	2300      	movs	r3, #0
  4066b2:	603b      	str	r3, [r7, #0]
    if(iscn->dcode)
  4066b4:	6878      	ldr	r0, [r7, #4]
  4066b6:	b108      	cbz	r0, 4066bc <zbar_image_scanner_destroy+0xd8>
        zbar_decoder_destroy(iscn->dcode);
  4066b8:	4b16      	ldr	r3, [pc, #88]	; (406714 <zbar_image_scanner_destroy+0x130>)
  4066ba:	4798      	blx	r3
    iscn->dcode = NULL;
  4066bc:	2300      	movs	r3, #0
  4066be:	607b      	str	r3, [r7, #4]
  4066c0:	463e      	mov	r6, r7
  4066c2:	f107 0828 	add.w	r8, r7, #40	; 0x28
    for(i = 0; i < RECYCLE_BUCKETS; i++) {
        zbar_symbol_t *sym, *next;
        for(sym = iscn->recycle[i].head; sym; sym = next) {
            next = sym->next;
            _zbar_symbol_free(sym);
  4066c6:	4d14      	ldr	r5, [pc, #80]	; (406718 <zbar_image_scanner_destroy+0x134>)
    if(iscn->dcode)
        zbar_decoder_destroy(iscn->dcode);
    iscn->dcode = NULL;
    for(i = 0; i < RECYCLE_BUCKETS; i++) {
        zbar_symbol_t *sym, *next;
        for(sym = iscn->recycle[i].head; sym; sym = next) {
  4066c8:	6b70      	ldr	r0, [r6, #52]	; 0x34
  4066ca:	b120      	cbz	r0, 4066d6 <zbar_image_scanner_destroy+0xf2>
            next = sym->next;
  4066cc:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
            _zbar_symbol_free(sym);
  4066ce:	47a8      	blx	r5
    if(iscn->dcode)
        zbar_decoder_destroy(iscn->dcode);
    iscn->dcode = NULL;
    for(i = 0; i < RECYCLE_BUCKETS; i++) {
        zbar_symbol_t *sym, *next;
        for(sym = iscn->recycle[i].head; sym; sym = next) {
  4066d0:	4620      	mov	r0, r4
  4066d2:	2c00      	cmp	r4, #0
  4066d4:	d1fa      	bne.n	4066cc <zbar_image_scanner_destroy+0xe8>
  4066d6:	3608      	adds	r6, #8
        zbar_scanner_destroy(iscn->scn);
    iscn->scn = NULL;
    if(iscn->dcode)
        zbar_decoder_destroy(iscn->dcode);
    iscn->dcode = NULL;
    for(i = 0; i < RECYCLE_BUCKETS; i++) {
  4066d8:	4546      	cmp	r6, r8
  4066da:	d1f5      	bne.n	4066c8 <zbar_image_scanner_destroy+0xe4>
    if(iscn->qr) {
        _zbar_qr_destroy(iscn->qr);
        iscn->qr = NULL;
    }
#endif
    vPortFree(iscn);
  4066dc:	4638      	mov	r0, r7
  4066de:	4b0f      	ldr	r3, [pc, #60]	; (40671c <zbar_image_scanner_destroy+0x138>)
  4066e0:	4798      	blx	r3
}
  4066e2:	b003      	add	sp, #12
  4066e4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  4066e8:	2000ae6c 	.word	0x2000ae6c
  4066ec:	20000440 	.word	0x20000440
  4066f0:	00411650 	.word	0x00411650
  4066f4:	00411538 	.word	0x00411538
  4066f8:	004083a9 	.word	0x004083a9
  4066fc:	00411674 	.word	0x00411674
  406700:	004116ac 	.word	0x004116ac
  406704:	004116e4 	.word	0x004116e4
  406708:	00407641 	.word	0x00407641
  40670c:	004076fd 	.word	0x004076fd
  406710:	00407191 	.word	0x00407191
  406714:	004047ed 	.word	0x004047ed
  406718:	004076c5 	.word	0x004076c5
  40671c:	00401959 	.word	0x00401959
  406720:	00411708 	.word	0x00411708

00406724 <zbar_image_scanner_create>:

    _zbar_image_scanner_add_sym(iscn, sym);
}

zbar_image_scanner_t *zbar_image_scanner_create ()
{
  406724:	b570      	push	{r4, r5, r6, lr}
    zbar_image_scanner_t *iscn = pvPortCalloc(1, sizeof(zbar_image_scanner_t));
  406726:	2001      	movs	r0, #1
  406728:	21ec      	movs	r1, #236	; 0xec
  40672a:	4b28      	ldr	r3, [pc, #160]	; (4067cc <zbar_image_scanner_create+0xa8>)
  40672c:	4798      	blx	r3
    if(!iscn)
  40672e:	2800      	cmp	r0, #0
  406730:	d049      	beq.n	4067c6 <zbar_image_scanner_create+0xa2>
  406732:	4604      	mov	r4, r0
        return(NULL);
    iscn->dcode = zbar_decoder_create();
  406734:	4b26      	ldr	r3, [pc, #152]	; (4067d0 <zbar_image_scanner_create+0xac>)
  406736:	4798      	blx	r3
  406738:	6060      	str	r0, [r4, #4]
    iscn->scn = zbar_scanner_create(iscn->dcode);
  40673a:	4b26      	ldr	r3, [pc, #152]	; (4067d4 <zbar_image_scanner_create+0xb0>)
  40673c:	4798      	blx	r3
  40673e:	6020      	str	r0, [r4, #0]
    if(!iscn->dcode || !iscn->scn) {
  406740:	6863      	ldr	r3, [r4, #4]
  406742:	b103      	cbz	r3, 406746 <zbar_image_scanner_create+0x22>
  406744:	b920      	cbnz	r0, 406750 <zbar_image_scanner_create+0x2c>
        zbar_image_scanner_destroy(iscn);
  406746:	4620      	mov	r0, r4
  406748:	4b23      	ldr	r3, [pc, #140]	; (4067d8 <zbar_image_scanner_create+0xb4>)
  40674a:	4798      	blx	r3
        return(NULL);
  40674c:	2000      	movs	r0, #0
  40674e:	bd70      	pop	{r4, r5, r6, pc}
    }
    zbar_decoder_set_userdata(iscn->dcode, iscn);
  406750:	4618      	mov	r0, r3
  406752:	4621      	mov	r1, r4
  406754:	4b21      	ldr	r3, [pc, #132]	; (4067dc <zbar_image_scanner_create+0xb8>)
  406756:	4798      	blx	r3
    zbar_decoder_set_handler(iscn->dcode, symbol_handler);
  406758:	6860      	ldr	r0, [r4, #4]
  40675a:	4921      	ldr	r1, [pc, #132]	; (4067e0 <zbar_image_scanner_create+0xbc>)
  40675c:	4b21      	ldr	r3, [pc, #132]	; (4067e4 <zbar_image_scanner_create+0xc0>)
  40675e:	4798      	blx	r3
#ifdef ENABLE_QRCODE
    iscn->qr = _zbar_qr_create();
#endif

    /* apply default configuration */
    CFG(iscn, ZBAR_CFG_X_DENSITY) = 1;
  406760:	2301      	movs	r3, #1
  406762:	66a3      	str	r3, [r4, #104]	; 0x68
    CFG(iscn, ZBAR_CFG_Y_DENSITY) = 1;
  406764:	66e3      	str	r3, [r4, #108]	; 0x6c
    cfg -= ZBAR_CFG_POSITION;

    if(!val)
        iscn->config &= ~(1 << cfg);
    else if(val == 1)
        iscn->config |= (1 << cfg);
  406766:	6e23      	ldr	r3, [r4, #96]	; 0x60
  406768:	f043 0301 	orr.w	r3, r3, #1
  40676c:	6623      	str	r3, [r4, #96]	; 0x60
  40676e:	f104 036c 	add.w	r3, r4, #108	; 0x6c
  406772:	f104 01bc 	add.w	r1, r4, #188	; 0xbc
            i = _zbar_get_symbol_hash(sym);
            iscn->sym_configs[c][i] = val;
        }
        else
            for(i = 0; i < NUM_SYMS; i++)
                iscn->sym_configs[c][i] = val;
  406776:	2202      	movs	r2, #2
  406778:	f843 2f04 	str.w	r2, [r3, #4]!
        if(sym > ZBAR_PARTIAL) {
            i = _zbar_get_symbol_hash(sym);
            iscn->sym_configs[c][i] = val;
        }
        else
            for(i = 0; i < NUM_SYMS; i++)
  40677c:	428b      	cmp	r3, r1
  40677e:	d1fb      	bne.n	406778 <zbar_image_scanner_create+0x54>
        int c, i;
        if(cfg > ZBAR_CFG_UNCERTAINTY)
            return(1);
        c = cfg - ZBAR_CFG_UNCERTAINTY;
        if(sym > ZBAR_PARTIAL) {
            i = _zbar_get_symbol_hash(sym);
  406780:	2040      	movs	r0, #64	; 0x40
  406782:	4d19      	ldr	r5, [pc, #100]	; (4067e8 <zbar_image_scanner_create+0xc4>)
  406784:	47a8      	blx	r5
            iscn->sym_configs[c][i] = val;
  406786:	301c      	adds	r0, #28
  406788:	2600      	movs	r6, #0
  40678a:	f844 6020 	str.w	r6, [r4, r0, lsl #2]
        int c, i;
        if(cfg > ZBAR_CFG_UNCERTAINTY)
            return(1);
        c = cfg - ZBAR_CFG_UNCERTAINTY;
        if(sym > ZBAR_PARTIAL) {
            i = _zbar_get_symbol_hash(sym);
  40678e:	2080      	movs	r0, #128	; 0x80
  406790:	47a8      	blx	r5
            iscn->sym_configs[c][i] = val;
  406792:	301c      	adds	r0, #28
  406794:	f844 6020 	str.w	r6, [r4, r0, lsl #2]
        int c, i;
        if(cfg > ZBAR_CFG_UNCERTAINTY)
            return(1);
        c = cfg - ZBAR_CFG_UNCERTAINTY;
        if(sym > ZBAR_PARTIAL) {
            i = _zbar_get_symbol_hash(sym);
  406798:	205d      	movs	r0, #93	; 0x5d
  40679a:	47a8      	blx	r5
            iscn->sym_configs[c][i] = val;
  40679c:	301c      	adds	r0, #28
  40679e:	f844 6020 	str.w	r6, [r4, r0, lsl #2]
        int c, i;
        if(cfg > ZBAR_CFG_UNCERTAINTY)
            return(1);
        c = cfg - ZBAR_CFG_UNCERTAINTY;
        if(sym > ZBAR_PARTIAL) {
            i = _zbar_get_symbol_hash(sym);
  4067a2:	2027      	movs	r0, #39	; 0x27
  4067a4:	47a8      	blx	r5
            iscn->sym_configs[c][i] = val;
  4067a6:	301c      	adds	r0, #28
  4067a8:	f844 6020 	str.w	r6, [r4, r0, lsl #2]
        int c, i;
        if(cfg > ZBAR_CFG_UNCERTAINTY)
            return(1);
        c = cfg - ZBAR_CFG_UNCERTAINTY;
        if(sym > ZBAR_PARTIAL) {
            i = _zbar_get_symbol_hash(sym);
  4067ac:	2026      	movs	r0, #38	; 0x26
  4067ae:	47a8      	blx	r5
            iscn->sym_configs[c][i] = val;
  4067b0:	301c      	adds	r0, #28
  4067b2:	2301      	movs	r3, #1
  4067b4:	f844 3020 	str.w	r3, [r4, r0, lsl #2]
        int c, i;
        if(cfg > ZBAR_CFG_UNCERTAINTY)
            return(1);
        c = cfg - ZBAR_CFG_UNCERTAINTY;
        if(sym > ZBAR_PARTIAL) {
            i = _zbar_get_symbol_hash(sym);
  4067b8:	200f      	movs	r0, #15
  4067ba:	47a8      	blx	r5
            iscn->sym_configs[c][i] = val;
  4067bc:	301c      	adds	r0, #28
  4067be:	f844 6020 	str.w	r6, [r4, r0, lsl #2]
    zbar_image_scanner_set_config(iscn, ZBAR_CODE128, ZBAR_CFG_UNCERTAINTY, 0);
    zbar_image_scanner_set_config(iscn, ZBAR_CODE93, ZBAR_CFG_UNCERTAINTY, 0);
    zbar_image_scanner_set_config(iscn, ZBAR_CODE39, ZBAR_CFG_UNCERTAINTY, 0);
    zbar_image_scanner_set_config(iscn, ZBAR_CODABAR, ZBAR_CFG_UNCERTAINTY, 1);
    zbar_image_scanner_set_config(iscn, ZBAR_COMPOSITE, ZBAR_CFG_UNCERTAINTY, 0);
    return(iscn);
  4067c2:	4620      	mov	r0, r4
  4067c4:	bd70      	pop	{r4, r5, r6, pc}

zbar_image_scanner_t *zbar_image_scanner_create ()
{
    zbar_image_scanner_t *iscn = pvPortCalloc(1, sizeof(zbar_image_scanner_t));
    if(!iscn)
        return(NULL);
  4067c6:	2000      	movs	r0, #0
    zbar_image_scanner_set_config(iscn, ZBAR_CODE93, ZBAR_CFG_UNCERTAINTY, 0);
    zbar_image_scanner_set_config(iscn, ZBAR_CODE39, ZBAR_CFG_UNCERTAINTY, 0);
    zbar_image_scanner_set_config(iscn, ZBAR_CODABAR, ZBAR_CFG_UNCERTAINTY, 1);
    zbar_image_scanner_set_config(iscn, ZBAR_COMPOSITE, ZBAR_CFG_UNCERTAINTY, 0);
    return(iscn);
}
  4067c8:	bd70      	pop	{r4, r5, r6, pc}
  4067ca:	bf00      	nop
  4067cc:	00401935 	.word	0x00401935
  4067d0:	0040487d 	.word	0x0040487d
  4067d4:	004071c5 	.word	0x004071c5
  4067d8:	004065e5 	.word	0x004065e5
  4067dc:	00404965 	.word	0x00404965
  4067e0:	004062a9 	.word	0x004062a9
  4067e4:	0040495d 	.word	0x0040495d
  4067e8:	004075b1 	.word	0x004075b1

004067ec <zbar_image_scanner_set_config>:

int zbar_image_scanner_set_config (zbar_image_scanner_t *iscn,
                                   zbar_symbol_type_t sym,
                                   zbar_config_t cfg,
                                   int val)
{
  4067ec:	b570      	push	{r4, r5, r6, lr}
  4067ee:	4606      	mov	r6, r0
  4067f0:	461d      	mov	r5, r3
    if((sym == 0 || sym == ZBAR_COMPOSITE) && cfg == ZBAR_CFG_ENABLE) {
  4067f2:	460b      	mov	r3, r1
  4067f4:	b111      	cbz	r1, 4067fc <zbar_image_scanner_set_config+0x10>
  4067f6:	290f      	cmp	r1, #15
  4067f8:	d106      	bne.n	406808 <zbar_image_scanner_set_config+0x1c>
  4067fa:	e062      	b.n	4068c2 <zbar_image_scanner_set_config+0xd6>
  4067fc:	b922      	cbnz	r2, 406808 <zbar_image_scanner_set_config+0x1c>
        iscn->ean_config = !!val;
  4067fe:	1c29      	adds	r1, r5, #0
  406800:	bf18      	it	ne
  406802:	2101      	movne	r1, #1
  406804:	6641      	str	r1, [r0, #100]	; 0x64
  406806:	e001      	b.n	40680c <zbar_image_scanner_set_config+0x20>
        if(sym)
            return(0);
    }

    if(cfg < ZBAR_CFG_UNCERTAINTY)
  406808:	2a3f      	cmp	r2, #63	; 0x3f
  40680a:	d805      	bhi.n	406818 <zbar_image_scanner_set_config+0x2c>
        return(zbar_decoder_set_config(iscn->dcode, sym, cfg, val));
  40680c:	6870      	ldr	r0, [r6, #4]
  40680e:	4619      	mov	r1, r3
  406810:	462b      	mov	r3, r5
  406812:	4c2d      	ldr	r4, [pc, #180]	; (4068c8 <zbar_image_scanner_set_config+0xdc>)
  406814:	47a0      	blx	r4
  406816:	bd70      	pop	{r4, r5, r6, pc}

    if(cfg < ZBAR_CFG_POSITION) {
  406818:	2a7f      	cmp	r2, #127	; 0x7f
  40681a:	d821      	bhi.n	406860 <zbar_image_scanner_set_config+0x74>
        int c, i;
        if(cfg > ZBAR_CFG_UNCERTAINTY)
  40681c:	2a40      	cmp	r2, #64	; 0x40
  40681e:	d842      	bhi.n	4068a6 <zbar_image_scanner_set_config+0xba>
            return(1);
        c = cfg - ZBAR_CFG_UNCERTAINTY;
  406820:	f1a2 0440 	sub.w	r4, r2, #64	; 0x40
        if(sym > ZBAR_PARTIAL) {
  406824:	2b01      	cmp	r3, #1
  406826:	d90c      	bls.n	406842 <zbar_image_scanner_set_config+0x56>
            i = _zbar_get_symbol_hash(sym);
  406828:	4618      	mov	r0, r3
  40682a:	4b28      	ldr	r3, [pc, #160]	; (4068cc <zbar_image_scanner_set_config+0xe0>)
  40682c:	4798      	blx	r3
            iscn->sym_configs[c][i] = val;
  40682e:	eb04 0284 	add.w	r2, r4, r4, lsl #2
  406832:	eb00 0082 	add.w	r0, r0, r2, lsl #2
  406836:	f100 021c 	add.w	r2, r0, #28
  40683a:	f846 5022 	str.w	r5, [r6, r2, lsl #2]
        }
        else
            for(i = 0; i < NUM_SYMS; i++)
                iscn->sym_configs[c][i] = val;
        return(0);
  40683e:	2000      	movs	r0, #0
  406840:	bd70      	pop	{r4, r5, r6, pc}
  406842:	eb04 0284 	add.w	r2, r4, r4, lsl #2
  406846:	0112      	lsls	r2, r2, #4
  406848:	f102 036c 	add.w	r3, r2, #108	; 0x6c
  40684c:	4433      	add	r3, r6
  40684e:	f102 00bc 	add.w	r0, r2, #188	; 0xbc
  406852:	4430      	add	r0, r6
            i = _zbar_get_symbol_hash(sym);
            iscn->sym_configs[c][i] = val;
        }
        else
            for(i = 0; i < NUM_SYMS; i++)
                iscn->sym_configs[c][i] = val;
  406854:	f843 5f04 	str.w	r5, [r3, #4]!
        if(sym > ZBAR_PARTIAL) {
            i = _zbar_get_symbol_hash(sym);
            iscn->sym_configs[c][i] = val;
        }
        else
            for(i = 0; i < NUM_SYMS; i++)
  406858:	4283      	cmp	r3, r0
  40685a:	d1fb      	bne.n	406854 <zbar_image_scanner_set_config+0x68>
                iscn->sym_configs[c][i] = val;
        return(0);
  40685c:	2000      	movs	r0, #0
  40685e:	bd70      	pop	{r4, r5, r6, pc}
    }

    if(sym > ZBAR_PARTIAL)
  406860:	2b01      	cmp	r3, #1
  406862:	d822      	bhi.n	4068aa <zbar_image_scanner_set_config+0xbe>
        return(1);

    if(cfg >= ZBAR_CFG_X_DENSITY && cfg <= ZBAR_CFG_Y_DENSITY) {
  406864:	f5a2 7380 	sub.w	r3, r2, #256	; 0x100
  406868:	b29b      	uxth	r3, r3
  40686a:	2b01      	cmp	r3, #1
  40686c:	d804      	bhi.n	406878 <zbar_image_scanner_set_config+0x8c>
        CFG(iscn, cfg) = val;
  40686e:	3ae6      	subs	r2, #230	; 0xe6
  406870:	f846 5022 	str.w	r5, [r6, r2, lsl #2]
        return(0);
  406874:	2000      	movs	r0, #0
  406876:	bd70      	pop	{r4, r5, r6, pc}
    }

    if(cfg > ZBAR_CFG_POSITION)
  406878:	2a80      	cmp	r2, #128	; 0x80
  40687a:	d818      	bhi.n	4068ae <zbar_image_scanner_set_config+0xc2>
        return(1);
    cfg -= ZBAR_CFG_POSITION;
  40687c:	3a80      	subs	r2, #128	; 0x80
  40687e:	b292      	uxth	r2, r2

    if(!val)
  406880:	b945      	cbnz	r5, 406894 <zbar_image_scanner_set_config+0xa8>
        iscn->config &= ~(1 << cfg);
  406882:	2301      	movs	r3, #1
  406884:	fa03 f202 	lsl.w	r2, r3, r2
  406888:	6e33      	ldr	r3, [r6, #96]	; 0x60
  40688a:	ea23 0302 	bic.w	r3, r3, r2
  40688e:	6633      	str	r3, [r6, #96]	; 0x60
    else if(val == 1)
        iscn->config |= (1 << cfg);
    else
        return(1);

    return(0);
  406890:	2000      	movs	r0, #0
  406892:	bd70      	pop	{r4, r5, r6, pc}
        return(1);
    cfg -= ZBAR_CFG_POSITION;

    if(!val)
        iscn->config &= ~(1 << cfg);
    else if(val == 1)
  406894:	2d01      	cmp	r5, #1
  406896:	d10c      	bne.n	4068b2 <zbar_image_scanner_set_config+0xc6>
        iscn->config |= (1 << cfg);
  406898:	2301      	movs	r3, #1
  40689a:	4093      	lsls	r3, r2
  40689c:	6e32      	ldr	r2, [r6, #96]	; 0x60
  40689e:	4313      	orrs	r3, r2
  4068a0:	6633      	str	r3, [r6, #96]	; 0x60
    else
        return(1);

    return(0);
  4068a2:	2000      	movs	r0, #0
  4068a4:	bd70      	pop	{r4, r5, r6, pc}
        return(zbar_decoder_set_config(iscn->dcode, sym, cfg, val));

    if(cfg < ZBAR_CFG_POSITION) {
        int c, i;
        if(cfg > ZBAR_CFG_UNCERTAINTY)
            return(1);
  4068a6:	2001      	movs	r0, #1
  4068a8:	bd70      	pop	{r4, r5, r6, pc}
                iscn->sym_configs[c][i] = val;
        return(0);
    }

    if(sym > ZBAR_PARTIAL)
        return(1);
  4068aa:	2001      	movs	r0, #1
  4068ac:	bd70      	pop	{r4, r5, r6, pc}
        CFG(iscn, cfg) = val;
        return(0);
    }

    if(cfg > ZBAR_CFG_POSITION)
        return(1);
  4068ae:	2001      	movs	r0, #1
  4068b0:	bd70      	pop	{r4, r5, r6, pc}
    if(!val)
        iscn->config &= ~(1 << cfg);
    else if(val == 1)
        iscn->config |= (1 << cfg);
    else
        return(1);
  4068b2:	2001      	movs	r0, #1
  4068b4:	bd70      	pop	{r4, r5, r6, pc}
                                   zbar_symbol_type_t sym,
                                   zbar_config_t cfg,
                                   int val)
{
    if((sym == 0 || sym == ZBAR_COMPOSITE) && cfg == ZBAR_CFG_ENABLE) {
        iscn->ean_config = !!val;
  4068b6:	3500      	adds	r5, #0
  4068b8:	bf18      	it	ne
  4068ba:	2501      	movne	r5, #1
  4068bc:	6675      	str	r5, [r6, #100]	; 0x64
        if(sym)
            return(0);
  4068be:	2000      	movs	r0, #0
  4068c0:	bd70      	pop	{r4, r5, r6, pc}
int zbar_image_scanner_set_config (zbar_image_scanner_t *iscn,
                                   zbar_symbol_type_t sym,
                                   zbar_config_t cfg,
                                   int val)
{
    if((sym == 0 || sym == ZBAR_COMPOSITE) && cfg == ZBAR_CFG_ENABLE) {
  4068c2:	2a00      	cmp	r2, #0
  4068c4:	d0f7      	beq.n	4068b6 <zbar_image_scanner_set_config+0xca>
  4068c6:	e79f      	b.n	406808 <zbar_image_scanner_set_config+0x1c>
  4068c8:	00404ac9 	.word	0x00404ac9
  4068cc:	004075b1 	.word	0x004075b1

004068d0 <zbar_scan_image>:
        p += (dx) + ((uintptr_t)(dy) * w);       \
    } while(0);

int zbar_scan_image (zbar_image_scanner_t *iscn,
                     zbar_image_t *img)
{
  4068d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4068d4:	b093      	sub	sp, #76	; 0x4c
    zbar_symbol_set_t *syms;
    const uint8_t *data;
    zbar_scanner_t *scn = iscn->scn;
  4068d6:	6803      	ldr	r3, [r0, #0]
  4068d8:	9302      	str	r3, [sp, #8]
    int density;

    /* timestamp image
     * FIXME prefer video timestamp
     */
    iscn->time = 0;//_zbar_timer_now();
  4068da:	2300      	movs	r3, #0
  4068dc:	6103      	str	r3, [r0, #16]
#ifdef ENABLE_QRCODE
    _zbar_qr_reset(iscn->qr);
#endif

    /* image must be in grayscale format */
    if(img->format != fourcc('Y','8','0','0') &&
  4068de:	680b      	ldr	r3, [r1, #0]
  4068e0:	4a8a      	ldr	r2, [pc, #552]	; (406b0c <zbar_scan_image+0x23c>)
  4068e2:	4293      	cmp	r3, r2
  4068e4:	d003      	beq.n	4068ee <zbar_scan_image+0x1e>
  4068e6:	4a8a      	ldr	r2, [pc, #552]	; (406b10 <zbar_scan_image+0x240>)
  4068e8:	4293      	cmp	r3, r2
  4068ea:	f040 83fd 	bne.w	4070e8 <zbar_scan_image+0x818>
  4068ee:	9106      	str	r1, [sp, #24]
  4068f0:	4683      	mov	fp, r0
       img->format != fourcc('G','R','E','Y'))
        return(-1);
    iscn->img = img;
  4068f2:	f8cb 1014 	str.w	r1, [fp, #20]
}

inline void zbar_image_scanner_recycle_image (zbar_image_scanner_t *iscn,
                                              zbar_image_t *img)
{
    zbar_symbol_set_t *syms = iscn->syms;
  4068f6:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
    if(syms && syms->refcnt) {
  4068f8:	b1d4      	cbz	r4, 406930 <zbar_scan_image+0x60>
  4068fa:	6823      	ldr	r3, [r4, #0]
  4068fc:	b1c3      	cbz	r3, 406930 <zbar_scan_image+0x60>
typedef int refcnt_t;

static inline int _zbar_refcnt (refcnt_t *cnt,
                                int delta)
{
    int rc = (*cnt += delta);
  4068fe:	3b01      	subs	r3, #1
  406900:	6023      	str	r3, [r4, #0]
    assert(rc >= 0);
  406902:	2b00      	cmp	r3, #0
  406904:	da05      	bge.n	406912 <zbar_scan_image+0x42>
  406906:	4883      	ldr	r0, [pc, #524]	; (406b14 <zbar_scan_image+0x244>)
  406908:	2157      	movs	r1, #87	; 0x57
  40690a:	4a83      	ldr	r2, [pc, #524]	; (406b18 <zbar_scan_image+0x248>)
  40690c:	4b83      	ldr	r3, [pc, #524]	; (406b1c <zbar_scan_image+0x24c>)
  40690e:	4c84      	ldr	r4, [pc, #528]	; (406b20 <zbar_scan_image+0x250>)
  406910:	47a0      	blx	r4
}

static inline int recycle_syms (zbar_image_scanner_t *iscn,
                                zbar_symbol_set_t *syms)
{
    if(_zbar_refcnt(&syms->refcnt, -1))
  406912:	2b00      	cmp	r3, #0
  406914:	f040 83eb 	bne.w	4070ee <zbar_scan_image+0x81e>
        return(1);

    _zbar_image_scanner_recycle_syms(iscn, syms->head);
  406918:	68a1      	ldr	r1, [r4, #8]
  40691a:	4b82      	ldr	r3, [pc, #520]	; (406b24 <zbar_scan_image+0x254>)
  40691c:	4798      	blx	r3
    syms->head = syms->tail = NULL;
  40691e:	2300      	movs	r3, #0
  406920:	60e3      	str	r3, [r4, #12]
  406922:	60a3      	str	r3, [r4, #8]
    syms->nsyms = 0;
  406924:	6063      	str	r3, [r4, #4]
        if(recycle_syms(iscn, syms)) {
            STAT(iscn_syms_inuse);
            iscn->syms = NULL;
        }
        else
            STAT(iscn_syms_recycle);
  406926:	f8db 30c8 	ldr.w	r3, [fp, #200]	; 0xc8
  40692a:	3301      	adds	r3, #1
  40692c:	f8cb 30c8 	str.w	r3, [fp, #200]	; 0xc8
    }

    syms = img->syms;
  406930:	9906      	ldr	r1, [sp, #24]
  406932:	6c0b      	ldr	r3, [r1, #64]	; 0x40
  406934:	461a      	mov	r2, r3
  406936:	930f      	str	r3, [sp, #60]	; 0x3c
    img->syms = NULL;
  406938:	2300      	movs	r3, #0
  40693a:	640b      	str	r3, [r1, #64]	; 0x40
    if(syms && recycle_syms(iscn, syms))
  40693c:	b332      	cbz	r2, 40698c <zbar_scan_image+0xbc>
typedef int refcnt_t;

static inline int _zbar_refcnt (refcnt_t *cnt,
                                int delta)
{
    int rc = (*cnt += delta);
  40693e:	6813      	ldr	r3, [r2, #0]
  406940:	3b01      	subs	r3, #1
  406942:	6013      	str	r3, [r2, #0]
    assert(rc >= 0);
  406944:	2b00      	cmp	r3, #0
  406946:	da05      	bge.n	406954 <zbar_scan_image+0x84>
  406948:	4872      	ldr	r0, [pc, #456]	; (406b14 <zbar_scan_image+0x244>)
  40694a:	2157      	movs	r1, #87	; 0x57
  40694c:	4a72      	ldr	r2, [pc, #456]	; (406b18 <zbar_scan_image+0x248>)
  40694e:	4b73      	ldr	r3, [pc, #460]	; (406b1c <zbar_scan_image+0x24c>)
  406950:	4c73      	ldr	r4, [pc, #460]	; (406b20 <zbar_scan_image+0x250>)
  406952:	47a0      	blx	r4
}

static inline int recycle_syms (zbar_image_scanner_t *iscn,
                                zbar_symbol_set_t *syms)
{
    if(_zbar_refcnt(&syms->refcnt, -1))
  406954:	2b00      	cmp	r3, #0
  406956:	f040 83d2 	bne.w	4070fe <zbar_scan_image+0x82e>
        return(1);

    _zbar_image_scanner_recycle_syms(iscn, syms->head);
  40695a:	4658      	mov	r0, fp
  40695c:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
  40695e:	68a1      	ldr	r1, [r4, #8]
  406960:	4b70      	ldr	r3, [pc, #448]	; (406b24 <zbar_scan_image+0x254>)
  406962:	4798      	blx	r3
    syms->head = syms->tail = NULL;
  406964:	2300      	movs	r3, #0
  406966:	60e3      	str	r3, [r4, #12]
  406968:	4620      	mov	r0, r4
  40696a:	60a3      	str	r3, [r4, #8]
    syms->nsyms = 0;
  40696c:	6063      	str	r3, [r4, #4]
    syms = img->syms;
    img->syms = NULL;
    if(syms && recycle_syms(iscn, syms))
        STAT(img_syms_inuse);
    else if(syms) {
        STAT(img_syms_recycle);
  40696e:	f8db 30d0 	ldr.w	r3, [fp, #208]	; 0xd0
  406972:	3301      	adds	r3, #1
  406974:	f8cb 30d0 	str.w	r3, [fp, #208]	; 0xd0

        /* select one set to resurrect, destroy the other */
        if(iscn->syms)
  406978:	f8db 302c 	ldr.w	r3, [fp, #44]	; 0x2c
  40697c:	b113      	cbz	r3, 406984 <zbar_scan_image+0xb4>
            _zbar_symbol_set_free(syms);
  40697e:	4b6a      	ldr	r3, [pc, #424]	; (406b28 <zbar_scan_image+0x258>)
  406980:	4798      	blx	r3
  406982:	e003      	b.n	40698c <zbar_scan_image+0xbc>
        else
            iscn->syms = syms;
  406984:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  406986:	f8cb 302c 	str.w	r3, [fp, #44]	; 0x2c
  40698a:	e011      	b.n	4069b0 <zbar_scan_image+0xe0>
        return(-1);
    iscn->img = img;

    /* recycle previous scanner and image results */
    zbar_image_scanner_recycle_image(iscn, img);
    syms = iscn->syms;
  40698c:	f8db 302c 	ldr.w	r3, [fp, #44]	; 0x2c
  406990:	930f      	str	r3, [sp, #60]	; 0x3c
    if(!syms) {
  406992:	b96b      	cbnz	r3, 4069b0 <zbar_scan_image+0xe0>
        syms = iscn->syms = _zbar_symbol_set_create();
  406994:	4b65      	ldr	r3, [pc, #404]	; (406b2c <zbar_scan_image+0x25c>)
  406996:	4798      	blx	r3
  406998:	900f      	str	r0, [sp, #60]	; 0x3c
  40699a:	f8cb 002c 	str.w	r0, [fp, #44]	; 0x2c
        STAT(syms_new);
  40699e:	f8db 30c0 	ldr.w	r3, [fp, #192]	; 0xc0
  4069a2:	3301      	adds	r3, #1
  4069a4:	f8cb 30c0 	str.w	r3, [fp, #192]	; 0xc0
        zbar_symbol_set_ref(syms, 1);
  4069a8:	2101      	movs	r1, #1
  4069aa:	4b61      	ldr	r3, [pc, #388]	; (406b30 <zbar_scan_image+0x260>)
  4069ac:	4798      	blx	r3
  4069ae:	e003      	b.n	4069b8 <zbar_scan_image+0xe8>
    }
    else
        zbar_symbol_set_ref(syms, 2);
  4069b0:	980f      	ldr	r0, [sp, #60]	; 0x3c
  4069b2:	2102      	movs	r1, #2
  4069b4:	4b5e      	ldr	r3, [pc, #376]	; (406b30 <zbar_scan_image+0x260>)
  4069b6:	4798      	blx	r3
    img->syms = syms;
  4069b8:	9a06      	ldr	r2, [sp, #24]
  4069ba:	4613      	mov	r3, r2
  4069bc:	990f      	ldr	r1, [sp, #60]	; 0x3c
  4069be:	6411      	str	r1, [r2, #64]	; 0x40

    w = img->width;
  4069c0:	6856      	ldr	r6, [r2, #4]
    h = img->height;
  4069c2:	6894      	ldr	r4, [r2, #8]
    cx1 = img->crop_x + img->crop_w;
  4069c4:	69d2      	ldr	r2, [r2, #28]
  4069c6:	695b      	ldr	r3, [r3, #20]
  4069c8:	eb02 0a03 	add.w	sl, r2, r3
    assert(cx1 <= w);
  4069cc:	4556      	cmp	r6, sl
  4069ce:	d206      	bcs.n	4069de <zbar_scan_image+0x10e>
  4069d0:	4858      	ldr	r0, [pc, #352]	; (406b34 <zbar_scan_image+0x264>)
  4069d2:	f240 21ab 	movw	r1, #683	; 0x2ab
  4069d6:	4a58      	ldr	r2, [pc, #352]	; (406b38 <zbar_scan_image+0x268>)
  4069d8:	4b58      	ldr	r3, [pc, #352]	; (406b3c <zbar_scan_image+0x26c>)
  4069da:	4c51      	ldr	r4, [pc, #324]	; (406b20 <zbar_scan_image+0x250>)
  4069dc:	47a0      	blx	r4
    cy1 = img->crop_y + img->crop_h;
  4069de:	9906      	ldr	r1, [sp, #24]
  4069e0:	6a0a      	ldr	r2, [r1, #32]
  4069e2:	698b      	ldr	r3, [r1, #24]
  4069e4:	18d3      	adds	r3, r2, r3
  4069e6:	9308      	str	r3, [sp, #32]
    assert(cy1 <= h);
  4069e8:	429c      	cmp	r4, r3
  4069ea:	d206      	bcs.n	4069fa <zbar_scan_image+0x12a>
  4069ec:	4851      	ldr	r0, [pc, #324]	; (406b34 <zbar_scan_image+0x264>)
  4069ee:	f240 21ad 	movw	r1, #685	; 0x2ad
  4069f2:	4a51      	ldr	r2, [pc, #324]	; (406b38 <zbar_scan_image+0x268>)
  4069f4:	4b52      	ldr	r3, [pc, #328]	; (406b40 <zbar_scan_image+0x270>)
  4069f6:	4c4a      	ldr	r4, [pc, #296]	; (406b20 <zbar_scan_image+0x250>)
  4069f8:	47a0      	blx	r4
    data = img->data;
  4069fa:	9d06      	ldr	r5, [sp, #24]
  4069fc:	68eb      	ldr	r3, [r5, #12]
  4069fe:	9303      	str	r3, [sp, #12]

    //zbar_image_write_png(img, "debug.png");
    //svg_open("debug.svg", 0, 0, w, h);
    //svg_image("debug.png", w, h);

    zbar_scanner_new_scan(scn);
  406a00:	9802      	ldr	r0, [sp, #8]
  406a02:	4b50      	ldr	r3, [pc, #320]	; (406b44 <zbar_scan_image+0x274>)
  406a04:	4798      	blx	r3

    density = CFG(iscn, ZBAR_CFG_Y_DENSITY);
  406a06:	f8db 206c 	ldr.w	r2, [fp, #108]	; 0x6c
    if(density > 0) {
  406a0a:	2a00      	cmp	r2, #0
  406a0c:	f340 8114 	ble.w	406c38 <zbar_scan_image+0x368>
        const uint8_t *p = data;
        int x = 0, y = 0;

        int border = (((img->crop_h - 1) % density) + 1) / 2;
  406a10:	6a28      	ldr	r0, [r5, #32]
  406a12:	1e41      	subs	r1, r0, #1
  406a14:	fbb1 f3f2 	udiv	r3, r1, r2
  406a18:	fb02 1313 	mls	r3, r2, r3, r1
  406a1c:	1c59      	adds	r1, r3, #1
        if(border > img->crop_h / 2)
  406a1e:	0840      	lsrs	r0, r0, #1
  406a20:	0849      	lsrs	r1, r1, #1
            border = img->crop_h / 2;
        border += img->crop_y;
  406a22:	69ab      	ldr	r3, [r5, #24]
  406a24:	4281      	cmp	r1, r0
  406a26:	bf94      	ite	ls
  406a28:	185b      	addls	r3, r3, r1
  406a2a:	181b      	addhi	r3, r3, r0
  406a2c:	9307      	str	r3, [sp, #28]
        assert(border <= h);
  406a2e:	429c      	cmp	r4, r3
  406a30:	d206      	bcs.n	406a40 <zbar_scan_image+0x170>
  406a32:	4840      	ldr	r0, [pc, #256]	; (406b34 <zbar_scan_image+0x264>)
  406a34:	f240 21bf 	movw	r1, #703	; 0x2bf
  406a38:	4a3f      	ldr	r2, [pc, #252]	; (406b38 <zbar_scan_image+0x268>)
  406a3a:	4b43      	ldr	r3, [pc, #268]	; (406b48 <zbar_scan_image+0x278>)
  406a3c:	4c38      	ldr	r4, [pc, #224]	; (406b20 <zbar_scan_image+0x250>)
  406a3e:	47a0      	blx	r4
        //svg_group_start("scanner", 0, 1, 1, 0, 0);
        iscn->dy = 0;
  406a40:	2100      	movs	r1, #0
  406a42:	f8cb 101c 	str.w	r1, [fp, #28]

        movedelta(img->crop_x, border);
  406a46:	9906      	ldr	r1, [sp, #24]
  406a48:	694c      	ldr	r4, [r1, #20]
  406a4a:	fb06 4103 	mla	r1, r6, r3, r4
  406a4e:	9803      	ldr	r0, [sp, #12]
  406a50:	1841      	adds	r1, r0, r1
  406a52:	9110      	str	r1, [sp, #64]	; 0x40
        iscn->v = y;
  406a54:	f8cb 3028 	str.w	r3, [fp, #40]	; 0x28

        while(y < cy1) {
  406a58:	9808      	ldr	r0, [sp, #32]
  406a5a:	4298      	cmp	r0, r3
  406a5c:	f240 80ec 	bls.w	406c38 <zbar_scan_image+0x368>
            }
            ASSERT_POS;
            quiet_border(iscn);
            //svg_path_end();

            movedelta(-1, density);
  406a60:	fb06 f102 	mul.w	r1, r6, r2
  406a64:	1e48      	subs	r0, r1, #1
  406a66:	9009      	str	r0, [sp, #36]	; 0x24
            }
            ASSERT_POS;
            quiet_border(iscn);
            //svg_path_end();

            movedelta(1, density);
  406a68:	1c48      	adds	r0, r1, #1
  406a6a:	900b      	str	r0, [sp, #44]	; 0x2c
  406a6c:	0050      	lsls	r0, r2, #1
  406a6e:	fb06 f500 	mul.w	r5, r6, r0
  406a72:	950c      	str	r5, [sp, #48]	; 0x30
  406a74:	18d1      	adds	r1, r2, r3
  406a76:	fb01 f506 	mul.w	r5, r1, r6
  406a7a:	9504      	str	r5, [sp, #16]
  406a7c:	900d      	str	r0, [sp, #52]	; 0x34
  406a7e:	9105      	str	r1, [sp, #20]
  406a80:	fb06 f303 	mul.w	r3, r6, r3
  406a84:	1b5b      	subs	r3, r3, r5
  406a86:	930a      	str	r3, [sp, #40]	; 0x28
  406a88:	900e      	str	r0, [sp, #56]	; 0x38
            iscn->dx = iscn->du = 1;
            iscn->umin = cx0;
            while(x < cx1) {
                uint8_t d = *p;
                movedelta(1, 0);
                zbar_scan_y(scn, d);
  406a8a:	4f30      	ldr	r7, [pc, #192]	; (406b4c <zbar_scan_image+0x27c>)
  406a8c:	9611      	str	r6, [sp, #68]	; 0x44
  406a8e:	4656      	mov	r6, sl
  406a90:	f8dd 9040 	ldr.w	r9, [sp, #64]	; 0x40

        movedelta(img->crop_x, border);
        iscn->v = y;

        while(y < cy1) {
            int cx0 = img->crop_x;;
  406a94:	9b06      	ldr	r3, [sp, #24]
  406a96:	f8d3 8014 	ldr.w	r8, [r3, #20]
            zprintf(128, "img_x+: %04d,%04d @%p\n", x, y, p);
  406a9a:	4b2d      	ldr	r3, [pc, #180]	; (406b50 <zbar_scan_image+0x280>)
  406a9c:	681b      	ldr	r3, [r3, #0]
  406a9e:	2b7f      	cmp	r3, #127	; 0x7f
  406aa0:	dd0b      	ble.n	406aba <zbar_scan_image+0x1ea>
  406aa2:	4b2c      	ldr	r3, [pc, #176]	; (406b54 <zbar_scan_image+0x284>)
  406aa4:	681b      	ldr	r3, [r3, #0]
  406aa6:	68d8      	ldr	r0, [r3, #12]
  406aa8:	9b07      	ldr	r3, [sp, #28]
  406aaa:	9300      	str	r3, [sp, #0]
  406aac:	f8cd 9004 	str.w	r9, [sp, #4]
  406ab0:	4929      	ldr	r1, [pc, #164]	; (406b58 <zbar_scan_image+0x288>)
  406ab2:	4a21      	ldr	r2, [pc, #132]	; (406b38 <zbar_scan_image+0x268>)
  406ab4:	4623      	mov	r3, r4
  406ab6:	4d29      	ldr	r5, [pc, #164]	; (406b5c <zbar_scan_image+0x28c>)
  406ab8:	47a8      	blx	r5
            //svg_path_start("vedge", 1. / 32, 0, y + 0.5);
            iscn->dx = iscn->du = 1;
  406aba:	2301      	movs	r3, #1
  406abc:	f8cb 3020 	str.w	r3, [fp, #32]
  406ac0:	f8cb 3018 	str.w	r3, [fp, #24]
            iscn->umin = cx0;
  406ac4:	f8cb 8024 	str.w	r8, [fp, #36]	; 0x24
            while(x < cx1) {
  406ac8:	4625      	mov	r5, r4
  406aca:	42a6      	cmp	r6, r4
  406acc:	d90e      	bls.n	406aec <zbar_scan_image+0x21c>
  406ace:	464c      	mov	r4, r9
  406ad0:	ebc9 0a05 	rsb	sl, r9, r5
                uint8_t d = *p;
                movedelta(1, 0);
                zbar_scan_y(scn, d);
  406ad4:	9802      	ldr	r0, [sp, #8]
  406ad6:	f814 1b01 	ldrb.w	r1, [r4], #1
  406ada:	47b8      	blx	r7
  406adc:	eb04 030a 	add.w	r3, r4, sl
            int cx0 = img->crop_x;;
            zprintf(128, "img_x+: %04d,%04d @%p\n", x, y, p);
            //svg_path_start("vedge", 1. / 32, 0, y + 0.5);
            iscn->dx = iscn->du = 1;
            iscn->umin = cx0;
            while(x < cx1) {
  406ae0:	429e      	cmp	r6, r3
  406ae2:	d8f7      	bhi.n	406ad4 <zbar_scan_image+0x204>
  406ae4:	4634      	mov	r4, r6
  406ae6:	1b75      	subs	r5, r6, r5
  406ae8:	44a9      	add	r9, r5
  406aea:	4635      	mov	r5, r6
  406aec:	9b04      	ldr	r3, [sp, #16]
  406aee:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  406af0:	4413      	add	r3, r2
                uint8_t d = *p;
                movedelta(1, 0);
                zbar_scan_y(scn, d);
            }
            ASSERT_POS;
  406af2:	441d      	add	r5, r3
  406af4:	9b03      	ldr	r3, [sp, #12]
  406af6:	441d      	add	r5, r3
  406af8:	454d      	cmp	r5, r9
  406afa:	d033      	beq.n	406b64 <zbar_scan_image+0x294>
  406afc:	480d      	ldr	r0, [pc, #52]	; (406b34 <zbar_scan_image+0x264>)
  406afe:	f240 21d1 	movw	r1, #721	; 0x2d1
  406b02:	4a0d      	ldr	r2, [pc, #52]	; (406b38 <zbar_scan_image+0x268>)
  406b04:	4b16      	ldr	r3, [pc, #88]	; (406b60 <zbar_scan_image+0x290>)
  406b06:	4c06      	ldr	r4, [pc, #24]	; (406b20 <zbar_scan_image+0x250>)
  406b08:	47a0      	blx	r4
  406b0a:	bf00      	nop
  406b0c:	30303859 	.word	0x30303859
  406b10:	59455247 	.word	0x59455247
  406b14:	00411438 	.word	0x00411438
  406b18:	004117fc 	.word	0x004117fc
  406b1c:	00411464 	.word	0x00411464
  406b20:	00408031 	.word	0x00408031
  406b24:	00405f55 	.word	0x00405f55
  406b28:	004076fd 	.word	0x004076fd
  406b2c:	00407609 	.word	0x00407609
  406b30:	00407641 	.word	0x00407641
  406b34:	00411564 	.word	0x00411564
  406b38:	00411528 	.word	0x00411528
  406b3c:	00411730 	.word	0x00411730
  406b40:	0041173c 	.word	0x0041173c
  406b44:	0040726d 	.word	0x0040726d
  406b48:	00411748 	.word	0x00411748
  406b4c:	00407301 	.word	0x00407301
  406b50:	2000ae6c 	.word	0x2000ae6c
  406b54:	20000440 	.word	0x20000440
  406b58:	00411754 	.word	0x00411754
  406b5c:	004083a9 	.word	0x004083a9
  406b60:	00411770 	.word	0x00411770
}

static inline void quiet_border (zbar_image_scanner_t *iscn)
{
    /* flush scanner pipeline */
    zbar_scanner_t *scn = iscn->scn;
  406b64:	f8db 9000 	ldr.w	r9, [fp]
    zbar_scanner_flush(scn);
  406b68:	4648      	mov	r0, r9
  406b6a:	f8df a2dc 	ldr.w	sl, [pc, #732]	; 406e48 <zbar_scan_image+0x578>
  406b6e:	47d0      	blx	sl
    zbar_scanner_flush(scn);
  406b70:	4648      	mov	r0, r9
  406b72:	47d0      	blx	sl
    zbar_scanner_new_scan(scn);
  406b74:	4648      	mov	r0, r9
  406b76:	4ba8      	ldr	r3, [pc, #672]	; (406e18 <zbar_scan_image+0x548>)
  406b78:	4798      	blx	r3
            }
            ASSERT_POS;
            quiet_border(iscn);
            //svg_path_end();

            movedelta(-1, density);
  406b7a:	3c01      	subs	r4, #1
  406b7c:	9b05      	ldr	r3, [sp, #20]
  406b7e:	461a      	mov	r2, r3
  406b80:	9909      	ldr	r1, [sp, #36]	; 0x24
  406b82:	440d      	add	r5, r1
            iscn->v = y;
  406b84:	f8cb 3028 	str.w	r3, [fp, #40]	; 0x28
            if(y >= cy1)
  406b88:	9908      	ldr	r1, [sp, #32]
  406b8a:	4299      	cmp	r1, r3
  406b8c:	d952      	bls.n	406c34 <zbar_scan_image+0x364>
                break;

            zprintf(128, "img_x-: %04d,%04d @%p\n", x, y, p);
  406b8e:	4ba3      	ldr	r3, [pc, #652]	; (406e1c <zbar_scan_image+0x54c>)
  406b90:	681b      	ldr	r3, [r3, #0]
  406b92:	2b7f      	cmp	r3, #127	; 0x7f
  406b94:	dd0a      	ble.n	406bac <zbar_scan_image+0x2dc>
  406b96:	4ba2      	ldr	r3, [pc, #648]	; (406e20 <zbar_scan_image+0x550>)
  406b98:	681b      	ldr	r3, [r3, #0]
  406b9a:	68d8      	ldr	r0, [r3, #12]
  406b9c:	9200      	str	r2, [sp, #0]
  406b9e:	9501      	str	r5, [sp, #4]
  406ba0:	49a0      	ldr	r1, [pc, #640]	; (406e24 <zbar_scan_image+0x554>)
  406ba2:	4aa1      	ldr	r2, [pc, #644]	; (406e28 <zbar_scan_image+0x558>)
  406ba4:	4623      	mov	r3, r4
  406ba6:	f8df c2a4 	ldr.w	ip, [pc, #676]	; 406e4c <zbar_scan_image+0x57c>
  406baa:	47e0      	blx	ip
            //svg_path_start("vedge", -1. / 32, w, y + 0.5);
            iscn->dx = iscn->du = -1;
  406bac:	f04f 33ff 	mov.w	r3, #4294967295
  406bb0:	f8cb 3020 	str.w	r3, [fp, #32]
  406bb4:	f8cb 3018 	str.w	r3, [fp, #24]
            iscn->umin = cx1;
  406bb8:	f8cb 6024 	str.w	r6, [fp, #36]	; 0x24
            while(x >= cx0) {
  406bbc:	45a0      	cmp	r8, r4
  406bbe:	dc08      	bgt.n	406bd2 <zbar_scan_image+0x302>
  406bc0:	46a9      	mov	r9, r5
                uint8_t d = *p;
  406bc2:	f819 1901 	ldrb.w	r1, [r9], #-1
                movedelta(-1, 0);
  406bc6:	3c01      	subs	r4, #1
  406bc8:	464d      	mov	r5, r9
                zbar_scan_y(scn, d);
  406bca:	9802      	ldr	r0, [sp, #8]
  406bcc:	47b8      	blx	r7

            zprintf(128, "img_x-: %04d,%04d @%p\n", x, y, p);
            //svg_path_start("vedge", -1. / 32, w, y + 0.5);
            iscn->dx = iscn->du = -1;
            iscn->umin = cx1;
            while(x >= cx0) {
  406bce:	45a0      	cmp	r8, r4
  406bd0:	ddf7      	ble.n	406bc2 <zbar_scan_image+0x2f2>
                uint8_t d = *p;
                movedelta(-1, 0);
                zbar_scan_y(scn, d);
            }
            ASSERT_POS;
  406bd2:	9b04      	ldr	r3, [sp, #16]
  406bd4:	eb04 0903 	add.w	r9, r4, r3
  406bd8:	9b03      	ldr	r3, [sp, #12]
  406bda:	4499      	add	r9, r3
  406bdc:	45a9      	cmp	r9, r5
  406bde:	d006      	beq.n	406bee <zbar_scan_image+0x31e>
  406be0:	4892      	ldr	r0, [pc, #584]	; (406e2c <zbar_scan_image+0x55c>)
  406be2:	f240 21e3 	movw	r1, #739	; 0x2e3
  406be6:	4a90      	ldr	r2, [pc, #576]	; (406e28 <zbar_scan_image+0x558>)
  406be8:	4b91      	ldr	r3, [pc, #580]	; (406e30 <zbar_scan_image+0x560>)
  406bea:	4c92      	ldr	r4, [pc, #584]	; (406e34 <zbar_scan_image+0x564>)
  406bec:	47a0      	blx	r4
}

static inline void quiet_border (zbar_image_scanner_t *iscn)
{
    /* flush scanner pipeline */
    zbar_scanner_t *scn = iscn->scn;
  406bee:	f8db 5000 	ldr.w	r5, [fp]
    zbar_scanner_flush(scn);
  406bf2:	4628      	mov	r0, r5
  406bf4:	f8df 8250 	ldr.w	r8, [pc, #592]	; 406e48 <zbar_scan_image+0x578>
  406bf8:	47c0      	blx	r8
    zbar_scanner_flush(scn);
  406bfa:	4628      	mov	r0, r5
  406bfc:	47c0      	blx	r8
    zbar_scanner_new_scan(scn);
  406bfe:	4628      	mov	r0, r5
  406c00:	4b85      	ldr	r3, [pc, #532]	; (406e18 <zbar_scan_image+0x548>)
  406c02:	4798      	blx	r3
            }
            ASSERT_POS;
            quiet_border(iscn);
            //svg_path_end();

            movedelta(1, density);
  406c04:	3401      	adds	r4, #1
  406c06:	9b07      	ldr	r3, [sp, #28]
  406c08:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  406c0a:	4413      	add	r3, r2
  406c0c:	9307      	str	r3, [sp, #28]
  406c0e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  406c10:	4491      	add	r9, r2
            iscn->v = y;
  406c12:	f8cb 3028 	str.w	r3, [fp, #40]	; 0x28
  406c16:	9a04      	ldr	r2, [sp, #16]
  406c18:	990c      	ldr	r1, [sp, #48]	; 0x30
  406c1a:	440a      	add	r2, r1
  406c1c:	9204      	str	r2, [sp, #16]
  406c1e:	9a05      	ldr	r2, [sp, #20]
  406c20:	990d      	ldr	r1, [sp, #52]	; 0x34
  406c22:	440a      	add	r2, r1
  406c24:	9205      	str	r2, [sp, #20]
        iscn->dy = 0;

        movedelta(img->crop_x, border);
        iscn->v = y;

        while(y < cy1) {
  406c26:	9a08      	ldr	r2, [sp, #32]
  406c28:	429a      	cmp	r2, r3
  406c2a:	f63f af33 	bhi.w	406a94 <zbar_scan_image+0x1c4>
  406c2e:	46b2      	mov	sl, r6
  406c30:	9e11      	ldr	r6, [sp, #68]	; 0x44
  406c32:	e001      	b.n	406c38 <zbar_scan_image+0x368>
  406c34:	46b2      	mov	sl, r6
  406c36:	9e11      	ldr	r6, [sp, #68]	; 0x44
            movedelta(1, density);
            iscn->v = y;
        }
        //svg_group_end();
    }
    iscn->dx = 0;
  406c38:	2300      	movs	r3, #0
  406c3a:	f8cb 3018 	str.w	r3, [fp, #24]

    density = CFG(iscn, ZBAR_CFG_X_DENSITY);
  406c3e:	f8db 3068 	ldr.w	r3, [fp, #104]	; 0x68
  406c42:	930c      	str	r3, [sp, #48]	; 0x30
    if(density > 0) {
  406c44:	461c      	mov	r4, r3
  406c46:	2b00      	cmp	r3, #0
  406c48:	f340 80cf 	ble.w	406dea <zbar_scan_image+0x51a>
        const uint8_t *p = data;
        int x = 0, y = 0;

        int border = (((img->crop_w - 1) % density) + 1) / 2;
  406c4c:	9d06      	ldr	r5, [sp, #24]
  406c4e:	69ea      	ldr	r2, [r5, #28]
  406c50:	9307      	str	r3, [sp, #28]
  406c52:	1e51      	subs	r1, r2, #1
  406c54:	fbb1 f3f3 	udiv	r3, r1, r3
  406c58:	fb04 1313 	mls	r3, r4, r3, r1
  406c5c:	3301      	adds	r3, #1
        if(border > img->crop_w / 2)
  406c5e:	0851      	lsrs	r1, r2, #1
  406c60:	085b      	lsrs	r3, r3, #1
            border = img->crop_w / 2;
        border += img->crop_x;
  406c62:	696a      	ldr	r2, [r5, #20]
  406c64:	428b      	cmp	r3, r1
  406c66:	bf94      	ite	ls
  406c68:	18d3      	addls	r3, r2, r3
  406c6a:	1853      	addhi	r3, r2, r1
  406c6c:	9305      	str	r3, [sp, #20]
        assert(border <= w);
  406c6e:	429e      	cmp	r6, r3
  406c70:	d206      	bcs.n	406c80 <zbar_scan_image+0x3b0>
  406c72:	486e      	ldr	r0, [pc, #440]	; (406e2c <zbar_scan_image+0x55c>)
  406c74:	f240 21f7 	movw	r1, #759	; 0x2f7
  406c78:	4a6b      	ldr	r2, [pc, #428]	; (406e28 <zbar_scan_image+0x558>)
  406c7a:	4b6f      	ldr	r3, [pc, #444]	; (406e38 <zbar_scan_image+0x568>)
  406c7c:	4c6d      	ldr	r4, [pc, #436]	; (406e34 <zbar_scan_image+0x564>)
  406c7e:	47a0      	blx	r4
        //svg_group_start("scanner", 90, 1, -1, 0, 0);
        movedelta(border, img->crop_y);
  406c80:	9a06      	ldr	r2, [sp, #24]
  406c82:	6994      	ldr	r4, [r2, #24]
  406c84:	fb06 3904 	mla	r9, r6, r4, r3
  406c88:	9a03      	ldr	r2, [sp, #12]
  406c8a:	4491      	add	r9, r2
        iscn->v = x;
  406c8c:	f8cb 3028 	str.w	r3, [fp, #40]	; 0x28

        while(x < cx1) {
  406c90:	459a      	cmp	sl, r3
  406c92:	f240 80aa 	bls.w	406dea <zbar_scan_image+0x51a>
  406c96:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  406c98:	0051      	lsls	r1, r2, #1
  406c9a:	910a      	str	r1, [sp, #40]	; 0x28
  406c9c:	18d3      	adds	r3, r2, r3
  406c9e:	9304      	str	r3, [sp, #16]
  406ca0:	910b      	str	r1, [sp, #44]	; 0x2c
            iscn->dy = iscn->du = 1;
            iscn->umin = cy0;
            while(y < cy1) {
                uint8_t d = *p;
                movedelta(0, 1);
                zbar_scan_y(scn, d);
  406ca2:	4f66      	ldr	r7, [pc, #408]	; (406e3c <zbar_scan_image+0x56c>)
  406ca4:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
  406ca8:	9d08      	ldr	r5, [sp, #32]
        //svg_group_start("scanner", 90, 1, -1, 0, 0);
        movedelta(border, img->crop_y);
        iscn->v = x;

        while(x < cx1) {
            int cy0 = img->crop_y;
  406caa:	9b06      	ldr	r3, [sp, #24]
  406cac:	f8d3 8018 	ldr.w	r8, [r3, #24]
            zprintf(128, "img_y+: %04d,%04d @%p\n", x, y, p);
  406cb0:	4b5a      	ldr	r3, [pc, #360]	; (406e1c <zbar_scan_image+0x54c>)
  406cb2:	681b      	ldr	r3, [r3, #0]
  406cb4:	2b7f      	cmp	r3, #127	; 0x7f
  406cb6:	dd0b      	ble.n	406cd0 <zbar_scan_image+0x400>
  406cb8:	4b59      	ldr	r3, [pc, #356]	; (406e20 <zbar_scan_image+0x550>)
  406cba:	681b      	ldr	r3, [r3, #0]
  406cbc:	68d8      	ldr	r0, [r3, #12]
  406cbe:	9400      	str	r4, [sp, #0]
  406cc0:	f8cd 9004 	str.w	r9, [sp, #4]
  406cc4:	495e      	ldr	r1, [pc, #376]	; (406e40 <zbar_scan_image+0x570>)
  406cc6:	4a58      	ldr	r2, [pc, #352]	; (406e28 <zbar_scan_image+0x558>)
  406cc8:	9b05      	ldr	r3, [sp, #20]
  406cca:	f8df c180 	ldr.w	ip, [pc, #384]	; 406e4c <zbar_scan_image+0x57c>
  406cce:	47e0      	blx	ip
            //svg_path_start("vedge", 1. / 32, 0, x + 0.5);
            iscn->dy = iscn->du = 1;
  406cd0:	2301      	movs	r3, #1
  406cd2:	f8cb 3020 	str.w	r3, [fp, #32]
  406cd6:	f8cb 301c 	str.w	r3, [fp, #28]
            iscn->umin = cy0;
  406cda:	f8cb 8024 	str.w	r8, [fp, #36]	; 0x24
            while(y < cy1) {
  406cde:	9408      	str	r4, [sp, #32]
  406ce0:	42a5      	cmp	r5, r4
  406ce2:	d90d      	bls.n	406d00 <zbar_scan_image+0x430>
  406ce4:	46ca      	mov	sl, r9
                uint8_t d = *p;
  406ce6:	f89a 1000 	ldrb.w	r1, [sl]
                movedelta(0, 1);
  406cea:	3401      	adds	r4, #1
  406cec:	44b2      	add	sl, r6
                zbar_scan_y(scn, d);
  406cee:	9802      	ldr	r0, [sp, #8]
  406cf0:	47b8      	blx	r7
            int cy0 = img->crop_y;
            zprintf(128, "img_y+: %04d,%04d @%p\n", x, y, p);
            //svg_path_start("vedge", 1. / 32, 0, x + 0.5);
            iscn->dy = iscn->du = 1;
            iscn->umin = cy0;
            while(y < cy1) {
  406cf2:	42a5      	cmp	r5, r4
  406cf4:	d8f7      	bhi.n	406ce6 <zbar_scan_image+0x416>
  406cf6:	462c      	mov	r4, r5
  406cf8:	9b08      	ldr	r3, [sp, #32]
  406cfa:	1aeb      	subs	r3, r5, r3
  406cfc:	fb06 9903 	mla	r9, r6, r3, r9
                uint8_t d = *p;
                movedelta(0, 1);
                zbar_scan_y(scn, d);
            }
            ASSERT_POS;
  406d00:	9b05      	ldr	r3, [sp, #20]
  406d02:	9308      	str	r3, [sp, #32]
  406d04:	fb06 3a04 	mla	sl, r6, r4, r3
  406d08:	9b03      	ldr	r3, [sp, #12]
  406d0a:	449a      	add	sl, r3
  406d0c:	45ca      	cmp	sl, r9
  406d0e:	d006      	beq.n	406d1e <zbar_scan_image+0x44e>
  406d10:	4846      	ldr	r0, [pc, #280]	; (406e2c <zbar_scan_image+0x55c>)
  406d12:	f240 3107 	movw	r1, #775	; 0x307
  406d16:	4a44      	ldr	r2, [pc, #272]	; (406e28 <zbar_scan_image+0x558>)
  406d18:	4b45      	ldr	r3, [pc, #276]	; (406e30 <zbar_scan_image+0x560>)
  406d1a:	4c46      	ldr	r4, [pc, #280]	; (406e34 <zbar_scan_image+0x564>)
  406d1c:	47a0      	blx	r4
}

static inline void quiet_border (zbar_image_scanner_t *iscn)
{
    /* flush scanner pipeline */
    zbar_scanner_t *scn = iscn->scn;
  406d1e:	f8db 3000 	ldr.w	r3, [fp]
    zbar_scanner_flush(scn);
  406d22:	9305      	str	r3, [sp, #20]
  406d24:	4618      	mov	r0, r3
  406d26:	f8df 9120 	ldr.w	r9, [pc, #288]	; 406e48 <zbar_scan_image+0x578>
  406d2a:	47c8      	blx	r9
    zbar_scanner_flush(scn);
  406d2c:	9805      	ldr	r0, [sp, #20]
  406d2e:	47c8      	blx	r9
    zbar_scanner_new_scan(scn);
  406d30:	9805      	ldr	r0, [sp, #20]
  406d32:	4b39      	ldr	r3, [pc, #228]	; (406e18 <zbar_scan_image+0x548>)
  406d34:	4798      	blx	r3
            }
            ASSERT_POS;
            quiet_border(iscn);
            //svg_path_end();

            movedelta(density, -1);
  406d36:	9804      	ldr	r0, [sp, #16]
  406d38:	4603      	mov	r3, r0
  406d3a:	3c01      	subs	r4, #1
  406d3c:	9907      	ldr	r1, [sp, #28]
  406d3e:	1b8a      	subs	r2, r1, r6
  406d40:	4492      	add	sl, r2
            iscn->v = x;
  406d42:	f8cb 0028 	str.w	r0, [fp, #40]	; 0x28
            if(x >= cx1)
  406d46:	9909      	ldr	r1, [sp, #36]	; 0x24
  406d48:	4281      	cmp	r1, r0
  406d4a:	d94e      	bls.n	406dea <zbar_scan_image+0x51a>
                break;

            zprintf(128, "img_y-: %04d,%04d @%p\n", x, y, p);
  406d4c:	4a33      	ldr	r2, [pc, #204]	; (406e1c <zbar_scan_image+0x54c>)
  406d4e:	6812      	ldr	r2, [r2, #0]
  406d50:	2a7f      	cmp	r2, #127	; 0x7f
  406d52:	dd0a      	ble.n	406d6a <zbar_scan_image+0x49a>
  406d54:	4a32      	ldr	r2, [pc, #200]	; (406e20 <zbar_scan_image+0x550>)
  406d56:	6812      	ldr	r2, [r2, #0]
  406d58:	68d0      	ldr	r0, [r2, #12]
  406d5a:	9400      	str	r4, [sp, #0]
  406d5c:	f8cd a004 	str.w	sl, [sp, #4]
  406d60:	4938      	ldr	r1, [pc, #224]	; (406e44 <zbar_scan_image+0x574>)
  406d62:	4a31      	ldr	r2, [pc, #196]	; (406e28 <zbar_scan_image+0x558>)
  406d64:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 406e4c <zbar_scan_image+0x57c>
  406d68:	47e0      	blx	ip
            //svg_path_start("vedge", -1. / 32, h, x + 0.5);
            iscn->dy = iscn->du = -1;
  406d6a:	f04f 33ff 	mov.w	r3, #4294967295
  406d6e:	f8cb 3020 	str.w	r3, [fp, #32]
  406d72:	f8cb 301c 	str.w	r3, [fp, #28]
            iscn->umin = cy1;
  406d76:	f8cb 5024 	str.w	r5, [fp, #36]	; 0x24
            while(y >= cy0) {
  406d7a:	45a0      	cmp	r8, r4
  406d7c:	dc08      	bgt.n	406d90 <zbar_scan_image+0x4c0>
                uint8_t d = *p;
  406d7e:	f89a 1000 	ldrb.w	r1, [sl]
                movedelta(0, -1);
  406d82:	3c01      	subs	r4, #1
  406d84:	ebc6 0a0a 	rsb	sl, r6, sl
                zbar_scan_y(scn, d);
  406d88:	9802      	ldr	r0, [sp, #8]
  406d8a:	47b8      	blx	r7

            zprintf(128, "img_y-: %04d,%04d @%p\n", x, y, p);
            //svg_path_start("vedge", -1. / 32, h, x + 0.5);
            iscn->dy = iscn->du = -1;
            iscn->umin = cy1;
            while(y >= cy0) {
  406d8c:	45a0      	cmp	r8, r4
  406d8e:	ddf6      	ble.n	406d7e <zbar_scan_image+0x4ae>
                uint8_t d = *p;
                movedelta(0, -1);
                zbar_scan_y(scn, d);
            }
            ASSERT_POS;
  406d90:	9b04      	ldr	r3, [sp, #16]
  406d92:	fb06 3904 	mla	r9, r6, r4, r3
  406d96:	9b03      	ldr	r3, [sp, #12]
  406d98:	eb03 0809 	add.w	r8, r3, r9
  406d9c:	45d0      	cmp	r8, sl
  406d9e:	d006      	beq.n	406dae <zbar_scan_image+0x4de>
  406da0:	4822      	ldr	r0, [pc, #136]	; (406e2c <zbar_scan_image+0x55c>)
  406da2:	f240 3119 	movw	r1, #793	; 0x319
  406da6:	4a20      	ldr	r2, [pc, #128]	; (406e28 <zbar_scan_image+0x558>)
  406da8:	4b21      	ldr	r3, [pc, #132]	; (406e30 <zbar_scan_image+0x560>)
  406daa:	4c22      	ldr	r4, [pc, #136]	; (406e34 <zbar_scan_image+0x564>)
  406dac:	47a0      	blx	r4
}

static inline void quiet_border (zbar_image_scanner_t *iscn)
{
    /* flush scanner pipeline */
    zbar_scanner_t *scn = iscn->scn;
  406dae:	f8db 9000 	ldr.w	r9, [fp]
    zbar_scanner_flush(scn);
  406db2:	4648      	mov	r0, r9
  406db4:	f8df a090 	ldr.w	sl, [pc, #144]	; 406e48 <zbar_scan_image+0x578>
  406db8:	47d0      	blx	sl
    zbar_scanner_flush(scn);
  406dba:	4648      	mov	r0, r9
  406dbc:	47d0      	blx	sl
    zbar_scanner_new_scan(scn);
  406dbe:	4648      	mov	r0, r9
  406dc0:	4b15      	ldr	r3, [pc, #84]	; (406e18 <zbar_scan_image+0x548>)
  406dc2:	4798      	blx	r3
  406dc4:	9b08      	ldr	r3, [sp, #32]
  406dc6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  406dc8:	4413      	add	r3, r2
  406dca:	9305      	str	r3, [sp, #20]
            }
            ASSERT_POS;
            quiet_border(iscn);
            //svg_path_end();

            movedelta(density, 1);
  406dcc:	3401      	adds	r4, #1
  406dce:	9a07      	ldr	r2, [sp, #28]
  406dd0:	eb02 0906 	add.w	r9, r2, r6
  406dd4:	44c1      	add	r9, r8
            iscn->v = x;
  406dd6:	f8cb 3028 	str.w	r3, [fp, #40]	; 0x28
  406dda:	9a04      	ldr	r2, [sp, #16]
  406ddc:	990a      	ldr	r1, [sp, #40]	; 0x28
  406dde:	440a      	add	r2, r1
  406de0:	9204      	str	r2, [sp, #16]
        assert(border <= w);
        //svg_group_start("scanner", 90, 1, -1, 0, 0);
        movedelta(border, img->crop_y);
        iscn->v = x;

        while(x < cx1) {
  406de2:	9a09      	ldr	r2, [sp, #36]	; 0x24
  406de4:	429a      	cmp	r2, r3
  406de6:	f63f af60 	bhi.w	406caa <zbar_scan_image+0x3da>
            movedelta(density, 1);
            iscn->v = x;
        }
        //svg_group_end();
    }
    iscn->dy = 0;
  406dea:	2300      	movs	r3, #0
  406dec:	f8cb 301c 	str.w	r3, [fp, #28]
    iscn->img = NULL;
  406df0:	f8cb 3014 	str.w	r3, [fp, #20]
    _zbar_qr_decode(iscn->qr, iscn, img);
#endif

    /* FIXME tmp hack to filter bad EAN results */
    /* FIXME tmp hack to merge simple case EAN add-ons */
    char filter = (!iscn->enable_cache &&
  406df4:	f8db 3058 	ldr.w	r3, [fp, #88]	; 0x58
  406df8:	b95b      	cbnz	r3, 406e12 <zbar_scan_image+0x542>
  406dfa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  406dfc:	2b01      	cmp	r3, #1
  406dfe:	d027      	beq.n	406e50 <zbar_scan_image+0x580>
                   (density == 1 || CFG(iscn, ZBAR_CFG_Y_DENSITY) == 1));
  406e00:	f8db 306c 	ldr.w	r3, [fp, #108]	; 0x6c
  406e04:	2b01      	cmp	r3, #1
  406e06:	bf14      	ite	ne
  406e08:	f04f 0900 	movne.w	r9, #0
  406e0c:	f04f 0901 	moveq.w	r9, #1
  406e10:	e020      	b.n	406e54 <zbar_scan_image+0x584>
    _zbar_qr_decode(iscn->qr, iscn, img);
#endif

    /* FIXME tmp hack to filter bad EAN results */
    /* FIXME tmp hack to merge simple case EAN add-ons */
    char filter = (!iscn->enable_cache &&
  406e12:	f04f 0900 	mov.w	r9, #0
  406e16:	e01d      	b.n	406e54 <zbar_scan_image+0x584>
  406e18:	0040726d 	.word	0x0040726d
  406e1c:	2000ae6c 	.word	0x2000ae6c
  406e20:	20000440 	.word	0x20000440
  406e24:	00411790 	.word	0x00411790
  406e28:	00411528 	.word	0x00411528
  406e2c:	00411564 	.word	0x00411564
  406e30:	00411770 	.word	0x00411770
  406e34:	00408031 	.word	0x00408031
  406e38:	004117ac 	.word	0x004117ac
  406e3c:	00407301 	.word	0x00407301
  406e40:	004117b8 	.word	0x004117b8
  406e44:	004117d4 	.word	0x004117d4
  406e48:	00407211 	.word	0x00407211
  406e4c:	004083a9 	.word	0x004083a9
  406e50:	f04f 0901 	mov.w	r9, #1
                   (density == 1 || CFG(iscn, ZBAR_CFG_Y_DENSITY) == 1));
    int nean = 0, naddon = 0;
    if(syms->nsyms) {
  406e54:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  406e56:	685b      	ldr	r3, [r3, #4]
  406e58:	2b00      	cmp	r3, #0
  406e5a:	f000 8142 	beq.w	4070e2 <zbar_scan_image+0x812>
        zbar_symbol_t **symp;
        for(symp = &syms->head; *symp; ) {
  406e5e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  406e60:	3308      	adds	r3, #8
  406e62:	9304      	str	r3, [sp, #16]
  406e64:	461e      	mov	r6, r3

    /* FIXME tmp hack to filter bad EAN results */
    /* FIXME tmp hack to merge simple case EAN add-ons */
    char filter = (!iscn->enable_cache &&
                   (density == 1 || CFG(iscn, ZBAR_CFG_Y_DENSITY) == 1));
    int nean = 0, naddon = 0;
  406e66:	2300      	movs	r3, #0
  406e68:	9303      	str	r3, [sp, #12]
  406e6a:	9302      	str	r3, [sp, #8]

                    /* recycle */
                    *symp = sym->next;
                    syms->nsyms--;
                    sym->next = NULL;
                    _zbar_image_scanner_recycle_syms(iscn, sym);
  406e6c:	f8df a2e8 	ldr.w	sl, [pc, #744]	; 407158 <zbar_scan_image+0x888>
    char filter = (!iscn->enable_cache &&
                   (density == 1 || CFG(iscn, ZBAR_CFG_Y_DENSITY) == 1));
    int nean = 0, naddon = 0;
    if(syms->nsyms) {
        zbar_symbol_t **symp;
        for(symp = &syms->head; *symp; ) {
  406e70:	e05e      	b.n	406f30 <zbar_scan_image+0x660>
            zbar_symbol_t *sym = *symp;
            if(sym->cache_count <= 0 &&
  406e72:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  406e74:	2b00      	cmp	r3, #0
  406e76:	dc59      	bgt.n	406f2c <zbar_scan_image+0x65c>
               ((sym->type < ZBAR_COMPOSITE && sym->type > ZBAR_PARTIAL) ||
  406e78:	8823      	ldrh	r3, [r4, #0]
  406e7a:	1e9a      	subs	r2, r3, #2
    int nean = 0, naddon = 0;
    if(syms->nsyms) {
        zbar_symbol_t **symp;
        for(symp = &syms->head; *symp; ) {
            zbar_symbol_t *sym = *symp;
            if(sym->cache_count <= 0 &&
  406e7c:	b292      	uxth	r2, r2
  406e7e:	2a0c      	cmp	r2, #12
  406e80:	d907      	bls.n	406e92 <zbar_scan_image+0x5c2>
               ((sym->type < ZBAR_COMPOSITE && sym->type > ZBAR_PARTIAL) ||
  406e82:	f1a3 0222 	sub.w	r2, r3, #34	; 0x22
  406e86:	b292      	uxth	r2, r2
  406e88:	2a01      	cmp	r2, #1
  406e8a:	d905      	bls.n	406e98 <zbar_scan_image+0x5c8>
                sym->type == ZBAR_DATABAR ||
                sym->type == ZBAR_DATABAR_EXP ||
  406e8c:	2b26      	cmp	r3, #38	; 0x26
  406e8e:	d14d      	bne.n	406f2c <zbar_scan_image+0x65c>
  406e90:	e16b      	b.n	40716a <zbar_scan_image+0x89a>
                sym->type == ZBAR_CODABAR))
            {
	        if((sym->type == ZBAR_CODABAR || filter) && sym->quality < 4) {
  406e92:	2b26      	cmp	r3, #38	; 0x26
  406e94:	f000 8139 	beq.w	40710a <zbar_scan_image+0x83a>
  406e98:	f019 0fff 	tst.w	r9, #255	; 0xff
  406e9c:	d039      	beq.n	406f12 <zbar_scan_image+0x642>
  406e9e:	6be2      	ldr	r2, [r4, #60]	; 0x3c
  406ea0:	2a03      	cmp	r2, #3
  406ea2:	dc36      	bgt.n	406f12 <zbar_scan_image+0x642>
                    if(iscn->enable_cache) {
  406ea4:	f8db 3058 	ldr.w	r3, [fp, #88]	; 0x58
  406ea8:	b33b      	cbz	r3, 406efa <zbar_scan_image+0x62a>

static inline zbar_symbol_t *cache_lookup (zbar_image_scanner_t *iscn,
                                           zbar_symbol_t *sym)
{
    /* search for matching entry in cache */
    zbar_symbol_t **entry = &iscn->cache;
  406eaa:	f10b 075c 	add.w	r7, fp, #92	; 0x5c
  406eae:	e020      	b.n	406ef2 <zbar_scan_image+0x622>
    while(*entry) {
        if((*entry)->type == sym->type &&
  406eb0:	882a      	ldrh	r2, [r5, #0]
  406eb2:	8823      	ldrh	r3, [r4, #0]
  406eb4:	429a      	cmp	r2, r3
  406eb6:	d10a      	bne.n	406ece <zbar_scan_image+0x5fe>
           (*entry)->datalen == sym->datalen &&
  406eb8:	692a      	ldr	r2, [r5, #16]
                                           zbar_symbol_t *sym)
{
    /* search for matching entry in cache */
    zbar_symbol_t **entry = &iscn->cache;
    while(*entry) {
        if((*entry)->type == sym->type &&
  406eba:	6923      	ldr	r3, [r4, #16]
  406ebc:	429a      	cmp	r2, r3
  406ebe:	d106      	bne.n	406ece <zbar_scan_image+0x5fe>
           (*entry)->datalen == sym->datalen &&
           !memcmp((*entry)->data, sym->data, sym->datalen))
  406ec0:	6968      	ldr	r0, [r5, #20]
  406ec2:	6961      	ldr	r1, [r4, #20]
  406ec4:	4b95      	ldr	r3, [pc, #596]	; (40711c <zbar_scan_image+0x84c>)
  406ec6:	4798      	blx	r3
{
    /* search for matching entry in cache */
    zbar_symbol_t **entry = &iscn->cache;
    while(*entry) {
        if((*entry)->type == sym->type &&
           (*entry)->datalen == sym->datalen &&
  406ec8:	2800      	cmp	r0, #0
  406eca:	f000 8123 	beq.w	407114 <zbar_scan_image+0x844>
           !memcmp((*entry)->data, sym->data, sym->datalen))
            break;
        if((sym->time - (*entry)->time) > CACHE_TIMEOUT) {
  406ece:	6b63      	ldr	r3, [r4, #52]	; 0x34
  406ed0:	6b6a      	ldr	r2, [r5, #52]	; 0x34
  406ed2:	1a9b      	subs	r3, r3, r2
  406ed4:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
  406ed8:	d909      	bls.n	406eee <zbar_scan_image+0x61e>
            /* recycle stale cache entry */
            zbar_symbol_t *next = (*entry)->next;
  406eda:	f8d5 802c 	ldr.w	r8, [r5, #44]	; 0x2c
            (*entry)->next = NULL;
  406ede:	2300      	movs	r3, #0
  406ee0:	62eb      	str	r3, [r5, #44]	; 0x2c
            _zbar_image_scanner_recycle_syms(iscn, *entry);
  406ee2:	4658      	mov	r0, fp
  406ee4:	6839      	ldr	r1, [r7, #0]
  406ee6:	47d0      	blx	sl
            *entry = next;
  406ee8:	f8c7 8000 	str.w	r8, [r7]
  406eec:	e001      	b.n	406ef2 <zbar_scan_image+0x622>
        }
        else
            entry = &(*entry)->next;
  406eee:	f105 072c 	add.w	r7, r5, #44	; 0x2c
static inline zbar_symbol_t *cache_lookup (zbar_image_scanner_t *iscn,
                                           zbar_symbol_t *sym)
{
    /* search for matching entry in cache */
    zbar_symbol_t **entry = &iscn->cache;
    while(*entry) {
  406ef2:	683d      	ldr	r5, [r7, #0]
  406ef4:	2d00      	cmp	r5, #0
  406ef6:	d1db      	bne.n	406eb0 <zbar_scan_image+0x5e0>
  406ef8:	e130      	b.n	40715c <zbar_scan_image+0x88c>
                        else
                            assert(0);
                    }

                    /* recycle */
                    *symp = sym->next;
  406efa:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  406efc:	6033      	str	r3, [r6, #0]
                    syms->nsyms--;
  406efe:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  406f00:	6853      	ldr	r3, [r2, #4]
  406f02:	3b01      	subs	r3, #1
  406f04:	6053      	str	r3, [r2, #4]
                    sym->next = NULL;
  406f06:	2300      	movs	r3, #0
  406f08:	62e3      	str	r3, [r4, #44]	; 0x2c
                    _zbar_image_scanner_recycle_syms(iscn, sym);
  406f0a:	4658      	mov	r0, fp
  406f0c:	4621      	mov	r1, r4
  406f0e:	47d0      	blx	sl
                    continue;
  406f10:	e00e      	b.n	406f30 <zbar_scan_image+0x660>
                }
                else if(sym->type < ZBAR_COMPOSITE &&
  406f12:	2b0e      	cmp	r3, #14
  406f14:	d80a      	bhi.n	406f2c <zbar_scan_image+0x65c>
  406f16:	2b0a      	cmp	r3, #10
  406f18:	d008      	beq.n	406f2c <zbar_scan_image+0x65c>
                        sym->type != ZBAR_ISBN10)
                {
                    if(sym->type > ZBAR_EAN5)
  406f1a:	2b05      	cmp	r3, #5
  406f1c:	d903      	bls.n	406f26 <zbar_scan_image+0x656>
                        nean++;
  406f1e:	9b02      	ldr	r3, [sp, #8]
  406f20:	3301      	adds	r3, #1
  406f22:	9302      	str	r3, [sp, #8]
  406f24:	e002      	b.n	406f2c <zbar_scan_image+0x65c>
                    else
                        naddon++;
  406f26:	9b03      	ldr	r3, [sp, #12]
  406f28:	3301      	adds	r3, #1
  406f2a:	9303      	str	r3, [sp, #12]
                }
            }
            symp = &sym->next;
  406f2c:	f104 062c 	add.w	r6, r4, #44	; 0x2c
    char filter = (!iscn->enable_cache &&
                   (density == 1 || CFG(iscn, ZBAR_CFG_Y_DENSITY) == 1));
    int nean = 0, naddon = 0;
    if(syms->nsyms) {
        zbar_symbol_t **symp;
        for(symp = &syms->head; *symp; ) {
  406f30:	6834      	ldr	r4, [r6, #0]
  406f32:	2c00      	cmp	r4, #0
  406f34:	d19d      	bne.n	406e72 <zbar_scan_image+0x5a2>
                }
            }
            symp = &sym->next;
        }

        if(nean == 1 && naddon == 1 && iscn->ean_config) {
  406f36:	9b02      	ldr	r3, [sp, #8]
  406f38:	2b01      	cmp	r3, #1
  406f3a:	f040 80c8 	bne.w	4070ce <zbar_scan_image+0x7fe>
  406f3e:	9b03      	ldr	r3, [sp, #12]
  406f40:	2b01      	cmp	r3, #1
  406f42:	f040 80c4 	bne.w	4070ce <zbar_scan_image+0x7fe>
  406f46:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  406f4a:	b9b3      	cbnz	r3, 406f7a <zbar_scan_image+0x6aa>
  406f4c:	e0bf      	b.n	4070ce <zbar_scan_image+0x7fe>
            /* create container symbol for composite result */
            zbar_symbol_t *ean = NULL, *addon = NULL;
            for(symp = &syms->head; *symp; ) {
                zbar_symbol_t *sym = *symp;
                if(sym->type < ZBAR_COMPOSITE && sym->type > ZBAR_PARTIAL) {
  406f4e:	881a      	ldrh	r2, [r3, #0]
  406f50:	3a02      	subs	r2, #2
  406f52:	b292      	uxth	r2, r2
  406f54:	2a0c      	cmp	r2, #12
  406f56:	d80d      	bhi.n	406f74 <zbar_scan_image+0x6a4>
                    /* move to composite */
                    *symp = sym->next;
  406f58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  406f5a:	6002      	str	r2, [r0, #0]
                    syms->nsyms--;
  406f5c:	6862      	ldr	r2, [r4, #4]
  406f5e:	3a01      	subs	r2, #1
  406f60:	6062      	str	r2, [r4, #4]
                    sym->next = NULL;
  406f62:	62d9      	str	r1, [r3, #44]	; 0x2c
                    if(sym->type <= ZBAR_EAN5)
  406f64:	881a      	ldrh	r2, [r3, #0]
                        addon = sym;
                    else
                        ean = sym;
  406f66:	2a05      	cmp	r2, #5
  406f68:	bf88      	it	hi
  406f6a:	461d      	movhi	r5, r3
  406f6c:	2a05      	cmp	r2, #5
  406f6e:	bf98      	it	ls
  406f70:	461e      	movls	r6, r3
  406f72:	e007      	b.n	406f84 <zbar_scan_image+0x6b4>
                }
                else
                    symp = &sym->next;
  406f74:	f103 002c 	add.w	r0, r3, #44	; 0x2c
  406f78:	e004      	b.n	406f84 <zbar_scan_image+0x6b4>
  406f7a:	2600      	movs	r6, #0
  406f7c:	4635      	mov	r5, r6
                zbar_symbol_t *sym = *symp;
                if(sym->type < ZBAR_COMPOSITE && sym->type > ZBAR_PARTIAL) {
                    /* move to composite */
                    *symp = sym->next;
                    syms->nsyms--;
                    sym->next = NULL;
  406f7e:	4631      	mov	r1, r6
  406f80:	9804      	ldr	r0, [sp, #16]
  406f82:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
        }

        if(nean == 1 && naddon == 1 && iscn->ean_config) {
            /* create container symbol for composite result */
            zbar_symbol_t *ean = NULL, *addon = NULL;
            for(symp = &syms->head; *symp; ) {
  406f84:	6803      	ldr	r3, [r0, #0]
  406f86:	2b00      	cmp	r3, #0
  406f88:	d1e1      	bne.n	406f4e <zbar_scan_image+0x67e>
                        ean = sym;
                }
                else
                    symp = &sym->next;
            }
            assert(ean);
  406f8a:	b935      	cbnz	r5, 406f9a <zbar_scan_image+0x6ca>
  406f8c:	4864      	ldr	r0, [pc, #400]	; (407120 <zbar_scan_image+0x850>)
  406f8e:	f240 3167 	movw	r1, #871	; 0x367
  406f92:	4a64      	ldr	r2, [pc, #400]	; (407124 <zbar_scan_image+0x854>)
  406f94:	4b64      	ldr	r3, [pc, #400]	; (407128 <zbar_scan_image+0x858>)
  406f96:	4c65      	ldr	r4, [pc, #404]	; (40712c <zbar_scan_image+0x85c>)
  406f98:	47a0      	blx	r4
            assert(addon);
  406f9a:	b936      	cbnz	r6, 406faa <zbar_scan_image+0x6da>
  406f9c:	4860      	ldr	r0, [pc, #384]	; (407120 <zbar_scan_image+0x850>)
  406f9e:	f44f 715a 	mov.w	r1, #872	; 0x368
  406fa2:	4a60      	ldr	r2, [pc, #384]	; (407124 <zbar_scan_image+0x854>)
  406fa4:	4b62      	ldr	r3, [pc, #392]	; (407130 <zbar_scan_image+0x860>)
  406fa6:	4c61      	ldr	r4, [pc, #388]	; (40712c <zbar_scan_image+0x85c>)
  406fa8:	47a0      	blx	r4

            int datalen = ean->datalen + addon->datalen + 1;
  406faa:	692f      	ldr	r7, [r5, #16]
  406fac:	6933      	ldr	r3, [r6, #16]
  406fae:	443b      	add	r3, r7
  406fb0:	1c5f      	adds	r7, r3, #1
{
    /* recycle old or alloc new symbol */
    zbar_symbol_t *sym = NULL;
    int i;
    for(i = 0; i < RECYCLE_BUCKETS - 1; i++)
        if(datalen <= 1 << (i * 2))
  406fb2:	2f01      	cmp	r7, #1
  406fb4:	dd36      	ble.n	407024 <zbar_scan_image+0x754>
  406fb6:	2f04      	cmp	r7, #4
  406fb8:	dd06      	ble.n	406fc8 <zbar_scan_image+0x6f8>
  406fba:	2f10      	cmp	r7, #16
  406fbc:	dd06      	ble.n	406fcc <zbar_scan_image+0x6fc>
  406fbe:	2f40      	cmp	r7, #64	; 0x40
                               int datalen)
{
    /* recycle old or alloc new symbol */
    zbar_symbol_t *sym = NULL;
    int i;
    for(i = 0; i < RECYCLE_BUCKETS - 1; i++)
  406fc0:	bfd8      	it	le
  406fc2:	2303      	movle	r3, #3
        if(datalen <= 1 << (i * 2))
  406fc4:	dd03      	ble.n	406fce <zbar_scan_image+0x6fe>
  406fc6:	e005      	b.n	406fd4 <zbar_scan_image+0x704>
                               int datalen)
{
    /* recycle old or alloc new symbol */
    zbar_symbol_t *sym = NULL;
    int i;
    for(i = 0; i < RECYCLE_BUCKETS - 1; i++)
  406fc8:	2301      	movs	r3, #1
  406fca:	e000      	b.n	406fce <zbar_scan_image+0x6fe>
  406fcc:	2302      	movs	r3, #2
        if(datalen <= 1 << (i * 2))
            break;

    for(; i > 0; i--)
  406fce:	2b00      	cmp	r3, #0
  406fd0:	dd28      	ble.n	407024 <zbar_scan_image+0x754>
  406fd2:	e000      	b.n	406fd6 <zbar_scan_image+0x706>
                               int datalen)
{
    /* recycle old or alloc new symbol */
    zbar_symbol_t *sym = NULL;
    int i;
    for(i = 0; i < RECYCLE_BUCKETS - 1; i++)
  406fd4:	2304      	movs	r3, #4
        if(datalen <= 1 << (i * 2))
            break;

    for(; i > 0; i--)
        if((sym = iscn->recycle[i].head)) {
  406fd6:	eb0b 02c3 	add.w	r2, fp, r3, lsl #3
  406fda:	6b54      	ldr	r4, [r2, #52]	; 0x34
  406fdc:	eb0b 02c3 	add.w	r2, fp, r3, lsl #3
  406fe0:	b164      	cbz	r4, 406ffc <zbar_scan_image+0x72c>
  406fe2:	e002      	b.n	406fea <zbar_scan_image+0x71a>
  406fe4:	3a08      	subs	r2, #8
  406fe6:	6b54      	ldr	r4, [r2, #52]	; 0x34
  406fe8:	b144      	cbz	r4, 406ffc <zbar_scan_image+0x72c>
  406fea:	eb0b 0183 	add.w	r1, fp, r3, lsl #2
            STAT(sym_recycle[i]);
  406fee:	f8d1 20d8 	ldr.w	r2, [r1, #216]	; 0xd8
  406ff2:	3201      	adds	r2, #1
  406ff4:	f8c1 20d8 	str.w	r2, [r1, #216]	; 0xd8
            break;
        }

    if(sym) {
  406ff8:	b91c      	cbnz	r4, 407002 <zbar_scan_image+0x732>
  406ffa:	e013      	b.n	407024 <zbar_scan_image+0x754>
    int i;
    for(i = 0; i < RECYCLE_BUCKETS - 1; i++)
        if(datalen <= 1 << (i * 2))
            break;

    for(; i > 0; i--)
  406ffc:	3b01      	subs	r3, #1
  406ffe:	d1f1      	bne.n	406fe4 <zbar_scan_image+0x714>
  407000:	e010      	b.n	407024 <zbar_scan_image+0x754>
            STAT(sym_recycle[i]);
            break;
        }

    if(sym) {
        iscn->recycle[i].head = sym->next;
  407002:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  407004:	eb0b 03c3 	add.w	r3, fp, r3, lsl #3
  407008:	635a      	str	r2, [r3, #52]	; 0x34
        sym->next = NULL;
  40700a:	2200      	movs	r2, #0
  40700c:	62e2      	str	r2, [r4, #44]	; 0x2c
        assert(iscn->recycle[i].nsyms);
  40700e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  407010:	b92a      	cbnz	r2, 40701e <zbar_scan_image+0x74e>
  407012:	4843      	ldr	r0, [pc, #268]	; (407120 <zbar_scan_image+0x850>)
  407014:	21e8      	movs	r1, #232	; 0xe8
  407016:	4a47      	ldr	r2, [pc, #284]	; (407134 <zbar_scan_image+0x864>)
  407018:	4b47      	ldr	r3, [pc, #284]	; (407138 <zbar_scan_image+0x868>)
  40701a:	4c44      	ldr	r4, [pc, #272]	; (40712c <zbar_scan_image+0x85c>)
  40701c:	47a0      	blx	r4
        iscn->recycle[i].nsyms--;
  40701e:	3a01      	subs	r2, #1
  407020:	631a      	str	r2, [r3, #48]	; 0x30
  407022:	e009      	b.n	407038 <zbar_scan_image+0x768>
    }
    else {
        sym = pvPortCalloc(1, sizeof(zbar_symbol_t));
  407024:	2001      	movs	r0, #1
  407026:	2140      	movs	r1, #64	; 0x40
  407028:	4b44      	ldr	r3, [pc, #272]	; (40713c <zbar_scan_image+0x86c>)
  40702a:	4798      	blx	r3
  40702c:	4604      	mov	r4, r0
        STAT(sym_new);
  40702e:	f8db 30d4 	ldr.w	r3, [fp, #212]	; 0xd4
  407032:	3301      	adds	r3, #1
  407034:	f8cb 30d4 	str.w	r3, [fp, #212]	; 0xd4
    }

    /* init new symbol */
    sym->type = type;
  407038:	230f      	movs	r3, #15
  40703a:	8023      	strh	r3, [r4, #0]
    sym->quality = 1;
  40703c:	2301      	movs	r3, #1
  40703e:	63e3      	str	r3, [r4, #60]	; 0x3c
    sym->npts = 0;
  407040:	2300      	movs	r3, #0
  407042:	61e3      	str	r3, [r4, #28]
    sym->orient = ZBAR_ORIENT_UNKNOWN;
  407044:	22ff      	movs	r2, #255	; 0xff
  407046:	f884 2024 	strb.w	r2, [r4, #36]	; 0x24
    sym->cache_count = 0;
  40704a:	63a3      	str	r3, [r4, #56]	; 0x38
    sym->time = iscn->time;
  40704c:	f8db 3010 	ldr.w	r3, [fp, #16]
  407050:	6363      	str	r3, [r4, #52]	; 0x34
    assert(!sym->syms);
  407052:	6b23      	ldr	r3, [r4, #48]	; 0x30
  407054:	b12b      	cbz	r3, 407062 <zbar_scan_image+0x792>
  407056:	4832      	ldr	r0, [pc, #200]	; (407120 <zbar_scan_image+0x850>)
  407058:	21f7      	movs	r1, #247	; 0xf7
  40705a:	4a36      	ldr	r2, [pc, #216]	; (407134 <zbar_scan_image+0x864>)
  40705c:	4b38      	ldr	r3, [pc, #224]	; (407140 <zbar_scan_image+0x870>)
  40705e:	4c33      	ldr	r4, [pc, #204]	; (40712c <zbar_scan_image+0x85c>)
  407060:	47a0      	blx	r4

    if(datalen > 0) {
  407062:	2f00      	cmp	r7, #0
  407064:	dd0e      	ble.n	407084 <zbar_scan_image+0x7b4>
        sym->datalen = datalen - 1;
  407066:	1e7b      	subs	r3, r7, #1
  407068:	6123      	str	r3, [r4, #16]
        if(sym->data_alloc < datalen) {
  40706a:	68e3      	ldr	r3, [r4, #12]
  40706c:	429f      	cmp	r7, r3
  40706e:	d911      	bls.n	407094 <zbar_scan_image+0x7c4>
            if(sym->data)
  407070:	6960      	ldr	r0, [r4, #20]
  407072:	b108      	cbz	r0, 407078 <zbar_scan_image+0x7a8>
                vPortFree(sym->data);
  407074:	4b33      	ldr	r3, [pc, #204]	; (407144 <zbar_scan_image+0x874>)
  407076:	4798      	blx	r3
            sym->data_alloc = datalen;
  407078:	60e7      	str	r7, [r4, #12]
            sym->data = pvPortMalloc(datalen);
  40707a:	4638      	mov	r0, r7
  40707c:	4b32      	ldr	r3, [pc, #200]	; (407148 <zbar_scan_image+0x878>)
  40707e:	4798      	blx	r3
  407080:	6160      	str	r0, [r4, #20]
  407082:	e007      	b.n	407094 <zbar_scan_image+0x7c4>
        }
    }
    else {
        if(sym->data)
  407084:	6960      	ldr	r0, [r4, #20]
  407086:	b108      	cbz	r0, 40708c <zbar_scan_image+0x7bc>
            vPortFree(sym->data);
  407088:	4b2e      	ldr	r3, [pc, #184]	; (407144 <zbar_scan_image+0x874>)
  40708a:	4798      	blx	r3
        sym->data = NULL;
  40708c:	2300      	movs	r3, #0
  40708e:	6163      	str	r3, [r4, #20]
        sym->datalen = sym->data_alloc = 0;
  407090:	60e3      	str	r3, [r4, #12]
  407092:	6123      	str	r3, [r4, #16]
            assert(addon);

            int datalen = ean->datalen + addon->datalen + 1;
            zbar_symbol_t *ean_sym =
                _zbar_image_scanner_alloc_sym(iscn, ZBAR_COMPOSITE, datalen);
            ean_sym->orient = ean->orient;
  407094:	f895 3024 	ldrb.w	r3, [r5, #36]	; 0x24
  407098:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
            ean_sym->syms = _zbar_symbol_set_create();
  40709c:	4b2b      	ldr	r3, [pc, #172]	; (40714c <zbar_scan_image+0x87c>)
  40709e:	4798      	blx	r3
  4070a0:	6320      	str	r0, [r4, #48]	; 0x30
            memcpy(ean_sym->data, ean->data, ean->datalen);
  4070a2:	6960      	ldr	r0, [r4, #20]
  4070a4:	6969      	ldr	r1, [r5, #20]
  4070a6:	692a      	ldr	r2, [r5, #16]
  4070a8:	4f29      	ldr	r7, [pc, #164]	; (407150 <zbar_scan_image+0x880>)
  4070aa:	47b8      	blx	r7
            memcpy(ean_sym->data + ean->datalen,
  4070ac:	6960      	ldr	r0, [r4, #20]
  4070ae:	692b      	ldr	r3, [r5, #16]
  4070b0:	6932      	ldr	r2, [r6, #16]
  4070b2:	4418      	add	r0, r3
  4070b4:	6971      	ldr	r1, [r6, #20]
  4070b6:	3201      	adds	r2, #1
  4070b8:	47b8      	blx	r7
                   addon->data, addon->datalen + 1);
            ean_sym->syms->head = ean;
  4070ba:	6b23      	ldr	r3, [r4, #48]	; 0x30
  4070bc:	609d      	str	r5, [r3, #8]
            ean->next = addon;
  4070be:	62ee      	str	r6, [r5, #44]	; 0x2c
            ean_sym->syms->nsyms = 2;
  4070c0:	6b23      	ldr	r3, [r4, #48]	; 0x30
  4070c2:	2202      	movs	r2, #2
  4070c4:	605a      	str	r2, [r3, #4]
            _zbar_image_scanner_add_sym(iscn, ean_sym);
  4070c6:	4658      	mov	r0, fp
  4070c8:	4621      	mov	r1, r4
  4070ca:	4b22      	ldr	r3, [pc, #136]	; (407154 <zbar_scan_image+0x884>)
  4070cc:	4798      	blx	r3
        }
    }

    if(syms->nsyms && iscn->handler)
  4070ce:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  4070d0:	685b      	ldr	r3, [r3, #4]
  4070d2:	b133      	cbz	r3, 4070e2 <zbar_scan_image+0x812>
  4070d4:	f8db 300c 	ldr.w	r3, [fp, #12]
  4070d8:	b11b      	cbz	r3, 4070e2 <zbar_scan_image+0x812>
        iscn->handler(img, iscn->userdata);
  4070da:	9806      	ldr	r0, [sp, #24]
  4070dc:	f8db 1008 	ldr.w	r1, [fp, #8]
  4070e0:	4798      	blx	r3

    //svg_close();
    return(syms->nsyms);
  4070e2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  4070e4:	6858      	ldr	r0, [r3, #4]
  4070e6:	e045      	b.n	407174 <zbar_scan_image+0x8a4>
#endif

    /* image must be in grayscale format */
    if(img->format != fourcc('Y','8','0','0') &&
       img->format != fourcc('G','R','E','Y'))
        return(-1);
  4070e8:	f04f 30ff 	mov.w	r0, #4294967295
  4070ec:	e042      	b.n	407174 <zbar_scan_image+0x8a4>
                                              zbar_image_t *img)
{
    zbar_symbol_set_t *syms = iscn->syms;
    if(syms && syms->refcnt) {
        if(recycle_syms(iscn, syms)) {
            STAT(iscn_syms_inuse);
  4070ee:	f8d0 30c4 	ldr.w	r3, [r0, #196]	; 0xc4
  4070f2:	3301      	adds	r3, #1
  4070f4:	f8c0 30c4 	str.w	r3, [r0, #196]	; 0xc4
            iscn->syms = NULL;
  4070f8:	2300      	movs	r3, #0
  4070fa:	62c3      	str	r3, [r0, #44]	; 0x2c
  4070fc:	e418      	b.n	406930 <zbar_scan_image+0x60>
    }

    syms = img->syms;
    img->syms = NULL;
    if(syms && recycle_syms(iscn, syms))
        STAT(img_syms_inuse);
  4070fe:	f8db 30cc 	ldr.w	r3, [fp, #204]	; 0xcc
  407102:	3301      	adds	r3, #1
  407104:	f8cb 30cc 	str.w	r3, [fp, #204]	; 0xcc
  407108:	e440      	b.n	40698c <zbar_scan_image+0xbc>
               ((sym->type < ZBAR_COMPOSITE && sym->type > ZBAR_PARTIAL) ||
                sym->type == ZBAR_DATABAR ||
                sym->type == ZBAR_DATABAR_EXP ||
                sym->type == ZBAR_CODABAR))
            {
	        if((sym->type == ZBAR_CODABAR || filter) && sym->quality < 4) {
  40710a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  40710c:	2b03      	cmp	r3, #3
  40710e:	f77f aec9 	ble.w	406ea4 <zbar_scan_image+0x5d4>
  407112:	e70b      	b.n	406f2c <zbar_scan_image+0x65c>
                    if(iscn->enable_cache) {
                        /* revert cache update */
                        zbar_symbol_t *entry = cache_lookup(iscn, sym);
                        if(entry)
                            entry->cache_count--;
  407114:	6bab      	ldr	r3, [r5, #56]	; 0x38
  407116:	3b01      	subs	r3, #1
  407118:	63ab      	str	r3, [r5, #56]	; 0x38
  40711a:	e6ee      	b.n	406efa <zbar_scan_image+0x62a>
  40711c:	004090c1 	.word	0x004090c1
  407120:	00411564 	.word	0x00411564
  407124:	00411528 	.word	0x00411528
  407128:	004117f0 	.word	0x004117f0
  40712c:	00408031 	.word	0x00408031
  407130:	004117f4 	.word	0x004117f4
  407134:	00411544 	.word	0x00411544
  407138:	004115ac 	.word	0x004115ac
  40713c:	00401935 	.word	0x00401935
  407140:	004115c4 	.word	0x004115c4
  407144:	00401959 	.word	0x00401959
  407148:	004017fd 	.word	0x004017fd
  40714c:	00407609 	.word	0x00407609
  407150:	00409125 	.word	0x00409125
  407154:	0040606d 	.word	0x0040606d
  407158:	00405f55 	.word	0x00405f55
                        else
                            assert(0);
  40715c:	4807      	ldr	r0, [pc, #28]	; (40717c <zbar_scan_image+0x8ac>)
  40715e:	f240 313f 	movw	r1, #831	; 0x33f
  407162:	4a07      	ldr	r2, [pc, #28]	; (407180 <zbar_scan_image+0x8b0>)
  407164:	4b07      	ldr	r3, [pc, #28]	; (407184 <zbar_scan_image+0x8b4>)
  407166:	4c08      	ldr	r4, [pc, #32]	; (407188 <zbar_scan_image+0x8b8>)
  407168:	47a0      	blx	r4
               ((sym->type < ZBAR_COMPOSITE && sym->type > ZBAR_PARTIAL) ||
                sym->type == ZBAR_DATABAR ||
                sym->type == ZBAR_DATABAR_EXP ||
                sym->type == ZBAR_CODABAR))
            {
	        if((sym->type == ZBAR_CODABAR || filter) && sym->quality < 4) {
  40716a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  40716c:	2b03      	cmp	r3, #3
  40716e:	f77f ae99 	ble.w	406ea4 <zbar_scan_image+0x5d4>
  407172:	e6db      	b.n	406f2c <zbar_scan_image+0x65c>
    if(syms->nsyms && iscn->handler)
        iscn->handler(img, iscn->userdata);

    //svg_close();
    return(syms->nsyms);
}
  407174:	b013      	add	sp, #76	; 0x4c
  407176:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40717a:	bf00      	nop
  40717c:	00411564 	.word	0x00411564
  407180:	00411528 	.word	0x00411528
  407184:	004119fc 	.word	0x004119fc
  407188:	00408031 	.word	0x00408031

0040718c <_zbar_refcnt_init>:


#else

void _zbar_refcnt_init ()
{
  40718c:	4770      	bx	lr
  40718e:	bf00      	nop

00407190 <zbar_scanner_destroy>:
    zbar_scanner_reset(scn);
    return(scn);
}

void zbar_scanner_destroy (zbar_scanner_t *scn)
{
  407190:	b508      	push	{r3, lr}
    vPortFree(scn);
  407192:	4b01      	ldr	r3, [pc, #4]	; (407198 <zbar_scanner_destroy+0x8>)
  407194:	4798      	blx	r3
  407196:	bd08      	pop	{r3, pc}
  407198:	00401959 	.word	0x00401959

0040719c <zbar_scanner_reset>:
}

zbar_symbol_type_t zbar_scanner_reset (zbar_scanner_t *scn)
{
  40719c:	b510      	push	{r4, lr}
  40719e:	4604      	mov	r4, r0
    memset(&scn->x, 0, sizeof(zbar_scanner_t) - offsetof(zbar_scanner_t, x));
  4071a0:	3008      	adds	r0, #8
  4071a2:	2100      	movs	r1, #0
  4071a4:	2228      	movs	r2, #40	; 0x28
  4071a6:	4b05      	ldr	r3, [pc, #20]	; (4071bc <zbar_scanner_reset+0x20>)
  4071a8:	4798      	blx	r3
    scn->y1_thresh = scn->y1_min_thresh;
  4071aa:	6863      	ldr	r3, [r4, #4]
  4071ac:	6223      	str	r3, [r4, #32]
    if(scn->decoder)
  4071ae:	6820      	ldr	r0, [r4, #0]
  4071b0:	b108      	cbz	r0, 4071b6 <zbar_scanner_reset+0x1a>
        zbar_decoder_reset(scn->decoder);
  4071b2:	4b03      	ldr	r3, [pc, #12]	; (4071c0 <zbar_scanner_reset+0x24>)
  4071b4:	4798      	blx	r3
    return(ZBAR_NONE);
}
  4071b6:	2000      	movs	r0, #0
  4071b8:	bd10      	pop	{r4, pc}
  4071ba:	bf00      	nop
  4071bc:	00409321 	.word	0x00409321
  4071c0:	00404805 	.word	0x00404805

004071c4 <zbar_scanner_create>:
    unsigned last_edge;     /* interpolated position of last located edge */
    unsigned width;         /* last element width */
};

zbar_scanner_t *zbar_scanner_create (zbar_decoder_t *dcode)
{
  4071c4:	b538      	push	{r3, r4, r5, lr}
  4071c6:	4605      	mov	r5, r0
    zbar_scanner_t *scn = pvPortMalloc(sizeof(zbar_scanner_t));
  4071c8:	2030      	movs	r0, #48	; 0x30
  4071ca:	4b05      	ldr	r3, [pc, #20]	; (4071e0 <zbar_scanner_create+0x1c>)
  4071cc:	4798      	blx	r3
  4071ce:	4604      	mov	r4, r0
    scn->decoder = dcode;
  4071d0:	6005      	str	r5, [r0, #0]
    scn->y1_min_thresh = ZBAR_SCANNER_THRESH_MIN;
  4071d2:	2304      	movs	r3, #4
  4071d4:	6043      	str	r3, [r0, #4]
    zbar_scanner_reset(scn);
  4071d6:	4b03      	ldr	r3, [pc, #12]	; (4071e4 <zbar_scanner_create+0x20>)
  4071d8:	4798      	blx	r3
    return(scn);
}
  4071da:	4620      	mov	r0, r4
  4071dc:	bd38      	pop	{r3, r4, r5, pc}
  4071de:	bf00      	nop
  4071e0:	004017fd 	.word	0x004017fd
  4071e4:	0040719d 	.word	0x0040719d

004071e8 <zbar_scanner_get_width>:
}

unsigned zbar_scanner_get_width (const zbar_scanner_t *scn)
{
    return(scn->width);
}
  4071e8:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
  4071ea:	4770      	bx	lr

004071ec <zbar_scanner_get_edge>:

unsigned zbar_scanner_get_edge (const zbar_scanner_t *scn,
                                unsigned offset,
                                int prec)
{
  4071ec:	6a80      	ldr	r0, [r0, #40]	; 0x28
  4071ee:	3830      	subs	r0, #48	; 0x30
    unsigned edge = scn->last_edge - offset - (1 << ZBAR_FIXED) - ROUND;
  4071f0:	1a41      	subs	r1, r0, r1
    prec = ZBAR_FIXED - prec;
  4071f2:	f1c2 0205 	rsb	r2, r2, #5
    if(prec > 0)
  4071f6:	2a00      	cmp	r2, #0
  4071f8:	dd02      	ble.n	407200 <zbar_scanner_get_edge+0x14>
        return(edge >> prec);
  4071fa:	fa21 f002 	lsr.w	r0, r1, r2
  4071fe:	4770      	bx	lr
    else if(!prec)
  407200:	b11a      	cbz	r2, 40720a <zbar_scanner_get_edge+0x1e>
        return(edge);
    else
        return(edge << -prec);
  407202:	4252      	negs	r2, r2
  407204:	fa01 f002 	lsl.w	r0, r1, r2
  407208:	4770      	bx	lr
    unsigned edge = scn->last_edge - offset - (1 << ZBAR_FIXED) - ROUND;
    prec = ZBAR_FIXED - prec;
    if(prec > 0)
        return(edge >> prec);
    else if(!prec)
        return(edge);
  40720a:	4608      	mov	r0, r1
    else
        return(edge << -prec);
}
  40720c:	4770      	bx	lr
  40720e:	bf00      	nop

00407210 <zbar_scanner_flush>:
        return(zbar_decode_width(scn->decoder, scn->width));
    return(ZBAR_PARTIAL);
}

inline zbar_symbol_type_t zbar_scanner_flush (zbar_scanner_t *scn)
{
  407210:	b538      	push	{r3, r4, r5, lr}
    unsigned x;
    if(!scn->y1_sign)
  407212:	69c3      	ldr	r3, [r0, #28]
  407214:	b323      	cbz	r3, 407260 <zbar_scanner_flush+0x50>
  407216:	4604      	mov	r4, r0
        return(ZBAR_NONE);

    x = (scn->x << ZBAR_FIXED) + ROUND;
  407218:	6885      	ldr	r5, [r0, #8]
  40721a:	016d      	lsls	r5, r5, #5
  40721c:	3510      	adds	r5, #16

    if(scn->cur_edge != x || scn->y1_sign > 0) {
  40721e:	6a42      	ldr	r2, [r0, #36]	; 0x24
  407220:	42aa      	cmp	r2, r5
  407222:	d101      	bne.n	407228 <zbar_scanner_flush+0x18>
  407224:	2b00      	cmp	r3, #0
  407226:	dd12      	ble.n	40724e <zbar_scanner_flush+0x3e>
static inline zbar_symbol_type_t process_edge (zbar_scanner_t *scn,
                                               int y1)
{
    if(!scn->y1_sign)
        scn->last_edge = scn->cur_edge = (1 << ZBAR_FIXED) + ROUND;
    else if(!scn->last_edge)
  407228:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  40722a:	b903      	cbnz	r3, 40722e <zbar_scanner_flush+0x1e>
        scn->last_edge = scn->cur_edge;
  40722c:	62a2      	str	r2, [r4, #40]	; 0x28

    scn->width = scn->cur_edge - scn->last_edge;
  40722e:	6a63      	ldr	r3, [r4, #36]	; 0x24
  407230:	6aa1      	ldr	r1, [r4, #40]	; 0x28
  407232:	1a59      	subs	r1, r3, r1
  407234:	62e1      	str	r1, [r4, #44]	; 0x2c
    dbprintf(1, " sgn=%d cur=%d.%d w=%d (%s)\n",
             scn->y1_sign, scn->cur_edge >> ZBAR_FIXED,
             scn->cur_edge & ((1 << ZBAR_FIXED) - 1), scn->width,
             ((y1 > 0) ? "SPACE" : "BAR"));
    scn->last_edge = scn->cur_edge;
  407236:	62a3      	str	r3, [r4, #40]	; 0x28
#if DEBUG_SVG > 1
    svg_path_moveto(SVG_ABS, scn->last_edge - (1 << ZBAR_FIXED) - ROUND, 0);
#endif

    /* pass to decoder */
    if(scn->decoder)
  407238:	6820      	ldr	r0, [r4, #0]
  40723a:	b110      	cbz	r0, 407242 <zbar_scanner_flush+0x32>
        return(zbar_decode_width(scn->decoder, scn->width));
  40723c:	4b0a      	ldr	r3, [pc, #40]	; (407268 <zbar_scanner_flush+0x58>)
  40723e:	4798      	blx	r3
  407240:	e000      	b.n	407244 <zbar_scanner_flush+0x34>
    return(ZBAR_PARTIAL);
  407242:	2001      	movs	r0, #1
    x = (scn->x << ZBAR_FIXED) + ROUND;

    if(scn->cur_edge != x || scn->y1_sign > 0) {
        zbar_symbol_type_t edge = process_edge(scn, -scn->y1_sign);
        dbprintf(1, "flush0:");
        scn->cur_edge = x;
  407244:	6265      	str	r5, [r4, #36]	; 0x24
        scn->y1_sign = -scn->y1_sign;
  407246:	69e3      	ldr	r3, [r4, #28]
  407248:	425b      	negs	r3, r3
  40724a:	61e3      	str	r3, [r4, #28]
        return(edge);
  40724c:	bd38      	pop	{r3, r4, r5, pc}
    }

    scn->y1_sign = scn->width = 0;
  40724e:	2300      	movs	r3, #0
  407250:	62c3      	str	r3, [r0, #44]	; 0x2c
  407252:	61c3      	str	r3, [r0, #28]
    if(scn->decoder)
  407254:	6800      	ldr	r0, [r0, #0]
  407256:	b128      	cbz	r0, 407264 <zbar_scanner_flush+0x54>
        return(zbar_decode_width(scn->decoder, 0));
  407258:	4619      	mov	r1, r3
  40725a:	4b03      	ldr	r3, [pc, #12]	; (407268 <zbar_scanner_flush+0x58>)
  40725c:	4798      	blx	r3
  40725e:	bd38      	pop	{r3, r4, r5, pc}

inline zbar_symbol_type_t zbar_scanner_flush (zbar_scanner_t *scn)
{
    unsigned x;
    if(!scn->y1_sign)
        return(ZBAR_NONE);
  407260:	2000      	movs	r0, #0
  407262:	bd38      	pop	{r3, r4, r5, pc}
    }

    scn->y1_sign = scn->width = 0;
    if(scn->decoder)
        return(zbar_decode_width(scn->decoder, 0));
    return(ZBAR_PARTIAL);
  407264:	2001      	movs	r0, #1
}
  407266:	bd38      	pop	{r3, r4, r5, pc}
  407268:	00404979 	.word	0x00404979

0040726c <zbar_scanner_new_scan>:

zbar_symbol_type_t zbar_scanner_new_scan (zbar_scanner_t *scn)
{
  40726c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  407270:	4604      	mov	r4, r0
    zbar_symbol_type_t edge = ZBAR_NONE;
  407272:	f04f 0900 	mov.w	r9, #0
#endif

    /* pass to decoder */
    if(scn->decoder)
        return(zbar_decode_width(scn->decoder, scn->width));
    return(ZBAR_PARTIAL);
  407276:	f04f 0801 	mov.w	r8, #1
    svg_path_moveto(SVG_ABS, scn->last_edge - (1 << ZBAR_FIXED) - ROUND, 0);
#endif

    /* pass to decoder */
    if(scn->decoder)
        return(zbar_decode_width(scn->decoder, scn->width));
  40727a:	4e1e      	ldr	r6, [pc, #120]	; (4072f4 <zbar_scanner_new_scan+0x88>)
        scn->cur_edge = x;
        scn->y1_sign = -scn->y1_sign;
        return(edge);
    }

    scn->y1_sign = scn->width = 0;
  40727c:	464f      	mov	r7, r9
}

zbar_symbol_type_t zbar_scanner_new_scan (zbar_scanner_t *scn)
{
    zbar_symbol_type_t edge = ZBAR_NONE;
    while(scn->y1_sign) {
  40727e:	e026      	b.n	4072ce <zbar_scanner_new_scan+0x62>
{
    unsigned x;
    if(!scn->y1_sign)
        return(ZBAR_NONE);

    x = (scn->x << ZBAR_FIXED) + ROUND;
  407280:	68a5      	ldr	r5, [r4, #8]
  407282:	016d      	lsls	r5, r5, #5
  407284:	3510      	adds	r5, #16

    if(scn->cur_edge != x || scn->y1_sign > 0) {
  407286:	6a62      	ldr	r2, [r4, #36]	; 0x24
  407288:	4295      	cmp	r5, r2
  40728a:	d101      	bne.n	407290 <zbar_scanner_new_scan+0x24>
  40728c:	2b00      	cmp	r3, #0
  40728e:	dd11      	ble.n	4072b4 <zbar_scanner_new_scan+0x48>
static inline zbar_symbol_type_t process_edge (zbar_scanner_t *scn,
                                               int y1)
{
    if(!scn->y1_sign)
        scn->last_edge = scn->cur_edge = (1 << ZBAR_FIXED) + ROUND;
    else if(!scn->last_edge)
  407290:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  407292:	b903      	cbnz	r3, 407296 <zbar_scanner_new_scan+0x2a>
        scn->last_edge = scn->cur_edge;
  407294:	62a2      	str	r2, [r4, #40]	; 0x28

    scn->width = scn->cur_edge - scn->last_edge;
  407296:	6a63      	ldr	r3, [r4, #36]	; 0x24
  407298:	6aa1      	ldr	r1, [r4, #40]	; 0x28
  40729a:	1a59      	subs	r1, r3, r1
  40729c:	62e1      	str	r1, [r4, #44]	; 0x2c
    dbprintf(1, " sgn=%d cur=%d.%d w=%d (%s)\n",
             scn->y1_sign, scn->cur_edge >> ZBAR_FIXED,
             scn->cur_edge & ((1 << ZBAR_FIXED) - 1), scn->width,
             ((y1 > 0) ? "SPACE" : "BAR"));
    scn->last_edge = scn->cur_edge;
  40729e:	62a3      	str	r3, [r4, #40]	; 0x28
#if DEBUG_SVG > 1
    svg_path_moveto(SVG_ABS, scn->last_edge - (1 << ZBAR_FIXED) - ROUND, 0);
#endif

    /* pass to decoder */
    if(scn->decoder)
  4072a0:	6820      	ldr	r0, [r4, #0]
  4072a2:	b108      	cbz	r0, 4072a8 <zbar_scanner_new_scan+0x3c>
        return(zbar_decode_width(scn->decoder, scn->width));
  4072a4:	47b0      	blx	r6
  4072a6:	e000      	b.n	4072aa <zbar_scanner_new_scan+0x3e>
    return(ZBAR_PARTIAL);
  4072a8:	4640      	mov	r0, r8
    x = (scn->x << ZBAR_FIXED) + ROUND;

    if(scn->cur_edge != x || scn->y1_sign > 0) {
        zbar_symbol_type_t edge = process_edge(scn, -scn->y1_sign);
        dbprintf(1, "flush0:");
        scn->cur_edge = x;
  4072aa:	6265      	str	r5, [r4, #36]	; 0x24
        scn->y1_sign = -scn->y1_sign;
  4072ac:	69e3      	ldr	r3, [r4, #28]
  4072ae:	425b      	negs	r3, r3
  4072b0:	61e3      	str	r3, [r4, #28]
  4072b2:	e007      	b.n	4072c4 <zbar_scanner_new_scan+0x58>
        return(edge);
    }

    scn->y1_sign = scn->width = 0;
  4072b4:	62e7      	str	r7, [r4, #44]	; 0x2c
  4072b6:	61e7      	str	r7, [r4, #28]
    if(scn->decoder)
  4072b8:	6820      	ldr	r0, [r4, #0]
  4072ba:	b110      	cbz	r0, 4072c2 <zbar_scanner_new_scan+0x56>
        return(zbar_decode_width(scn->decoder, 0));
  4072bc:	4639      	mov	r1, r7
  4072be:	47b0      	blx	r6
  4072c0:	e000      	b.n	4072c4 <zbar_scanner_new_scan+0x58>
    return(ZBAR_PARTIAL);
  4072c2:	4640      	mov	r0, r8
  4072c4:	4548      	cmp	r0, r9
  4072c6:	bf38      	it	cc
  4072c8:	4648      	movcc	r0, r9
  4072ca:	fa1f f980 	uxth.w	r9, r0
}

zbar_symbol_type_t zbar_scanner_new_scan (zbar_scanner_t *scn)
{
    zbar_symbol_type_t edge = ZBAR_NONE;
    while(scn->y1_sign) {
  4072ce:	69e3      	ldr	r3, [r4, #28]
  4072d0:	2b00      	cmp	r3, #0
  4072d2:	d1d5      	bne.n	407280 <zbar_scanner_new_scan+0x14>
        if(tmp < 0 || tmp > edge)
            edge = tmp;
    }

    /* reset scanner and associated decoder */
    memset(&scn->x, 0, sizeof(zbar_scanner_t) - offsetof(zbar_scanner_t, x));
  4072d4:	f104 0008 	add.w	r0, r4, #8
  4072d8:	2100      	movs	r1, #0
  4072da:	2228      	movs	r2, #40	; 0x28
  4072dc:	4b06      	ldr	r3, [pc, #24]	; (4072f8 <zbar_scanner_new_scan+0x8c>)
  4072de:	4798      	blx	r3
    scn->y1_thresh = scn->y1_min_thresh;
  4072e0:	6863      	ldr	r3, [r4, #4]
  4072e2:	6223      	str	r3, [r4, #32]
    if(scn->decoder)
  4072e4:	6820      	ldr	r0, [r4, #0]
  4072e6:	b108      	cbz	r0, 4072ec <zbar_scanner_new_scan+0x80>
        zbar_decoder_new_scan(scn->decoder);
  4072e8:	4b04      	ldr	r3, [pc, #16]	; (4072fc <zbar_scanner_new_scan+0x90>)
  4072ea:	4798      	blx	r3
    return(edge);
}
  4072ec:	4648      	mov	r0, r9
  4072ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  4072f2:	bf00      	nop
  4072f4:	00404979 	.word	0x00404979
  4072f8:	00409321 	.word	0x00409321
  4072fc:	004048d9 	.word	0x004048d9

00407300 <zbar_scan_y>:

zbar_symbol_type_t zbar_scan_y (zbar_scanner_t *scn,
                                int y)
{
  407300:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  407304:	4605      	mov	r5, r0
    /* FIXME calc and clip to max y range... */
    /* retrieve short value history */
    register int x = scn->x;
  407306:	6886      	ldr	r6, [r0, #8]
    register int y0_1 = scn->y0[(x - 1) & 3];
  407308:	1e73      	subs	r3, r6, #1
  40730a:	f003 0303 	and.w	r3, r3, #3
  40730e:	eb00 0383 	add.w	r3, r0, r3, lsl #2
  407312:	68da      	ldr	r2, [r3, #12]
    register int y0_0 = y0_1;
    register int y0_2, y0_3, y1_1, y2_1, y2_2;
    zbar_symbol_type_t edge;
    if(x) {
  407314:	b166      	cbz	r6, 407330 <zbar_scan_y+0x30>
        /* update weighted moving average */
        y0_0 += ((int)((y - y0_1) * EWMA_WEIGHT)) >> ZBAR_FIXED;
  407316:	1a89      	subs	r1, r1, r2
  407318:	eb01 0181 	add.w	r1, r1, r1, lsl #2
  40731c:	eb01 0181 	add.w	r1, r1, r1, lsl #2
  407320:	eb02 1161 	add.w	r1, r2, r1, asr #5
        scn->y0[x & 3] = y0_0;
  407324:	f006 0303 	and.w	r3, r6, #3
  407328:	eb00 0383 	add.w	r3, r0, r3, lsl #2
  40732c:	60d9      	str	r1, [r3, #12]
  40732e:	e004      	b.n	40733a <zbar_scan_y+0x3a>
    }
    else
        y0_0 = y0_1 = scn->y0[0] = scn->y0[1] = scn->y0[2] = scn->y0[3] = y;
  407330:	6181      	str	r1, [r0, #24]
  407332:	6141      	str	r1, [r0, #20]
  407334:	6101      	str	r1, [r0, #16]
  407336:	60c1      	str	r1, [r0, #12]
  407338:	460a      	mov	r2, r1
    y0_2 = scn->y0[(x - 2) & 3];
  40733a:	1eb3      	subs	r3, r6, #2
  40733c:	f003 0303 	and.w	r3, r3, #3
  407340:	eb05 0383 	add.w	r3, r5, r3, lsl #2
  407344:	68dc      	ldr	r4, [r3, #12]
    y0_3 = scn->y0[(x - 3) & 3];
  407346:	1ef3      	subs	r3, r6, #3
  407348:	f003 0303 	and.w	r3, r3, #3
  40734c:	eb05 0383 	add.w	r3, r5, r3, lsl #2
  407350:	68d8      	ldr	r0, [r3, #12]
    /* 1st differential @ x-1 */
    y1_1 = y0_1 - y0_2;
  407352:	1b13      	subs	r3, r2, r4
    {
        register int y1_2 = y0_2 - y0_3;
  407354:	1a27      	subs	r7, r4, r0
        if((abs(y1_1) < abs(y1_2)) &&
  407356:	ea83 7ce3 	eor.w	ip, r3, r3, asr #31
  40735a:	ebac 7ce3 	sub.w	ip, ip, r3, asr #31
  40735e:	ea87 7ee7 	eor.w	lr, r7, r7, asr #31
  407362:	ebae 7ee7 	sub.w	lr, lr, r7, asr #31
  407366:	45f4      	cmp	ip, lr
  407368:	da09      	bge.n	40737e <zbar_scan_y+0x7e>
  40736a:	ea4f 7ed3 	mov.w	lr, r3, lsr #31
  40736e:	ea6f 0c07 	mvn.w	ip, r7
  407372:	ea4f 7cdc 	mov.w	ip, ip, lsr #31
    else
        y0_0 = y0_1 = scn->y0[0] = scn->y0[1] = scn->y0[2] = scn->y0[3] = y;
    y0_2 = scn->y0[(x - 2) & 3];
    y0_3 = scn->y0[(x - 3) & 3];
    /* 1st differential @ x-1 */
    y1_1 = y0_1 - y0_2;
  407376:	45e6      	cmp	lr, ip
  407378:	bf08      	it	eq
  40737a:	461f      	moveq	r7, r3
  40737c:	e000      	b.n	407380 <zbar_scan_y+0x80>
  40737e:	461f      	mov	r7, r3
           ((y1_1 >= 0) == (y1_2 >= 0)))
            y1_1 = y1_2;
    }

    /* 2nd differentials @ x-1 & x-2 */
    y2_1 = y0_0 - (y0_1 * 2) + y0_2;
  407380:	eba1 0142 	sub.w	r1, r1, r2, lsl #1
    y2_2 = y0_1 - (y0_2 * 2) + y0_3;
  407384:	1b1b      	subs	r3, r3, r4
  407386:	eb03 0900 	add.w	r9, r3, r0
    dbprintf(1, "scan: x=%d y=%d y0=%d y1=%d y2=%d",
             x, y, y0_1, y1_1, y2_1);

    edge = ZBAR_NONE;
    /* 2nd zero-crossing is 1st local min/max - could be edge */
    if((!y2_1 ||
  40738a:	190c      	adds	r4, r1, r4
  40738c:	d009      	beq.n	4073a2 <zbar_scan_y+0xa2>
  40738e:	2c00      	cmp	r4, #0
  407390:	dd04      	ble.n	40739c <zbar_scan_y+0x9c>
  407392:	f1b9 0f00 	cmp.w	r9, #0
  407396:	db04      	blt.n	4073a2 <zbar_scan_y+0xa2>
    y2_2 = y0_1 - (y0_2 * 2) + y0_3;

    dbprintf(1, "scan: x=%d y=%d y0=%d y1=%d y2=%d",
             x, y, y0_1, y1_1, y2_1);

    edge = ZBAR_NONE;
  407398:	2000      	movs	r0, #0
  40739a:	e070      	b.n	40747e <zbar_scan_y+0x17e>
    /* 2nd zero-crossing is 1st local min/max - could be edge */
    if((!y2_1 ||
  40739c:	f1b9 0f00 	cmp.w	r9, #0
  4073a0:	dd5f      	ble.n	407462 <zbar_scan_y+0x162>
}

static inline unsigned calc_thresh (zbar_scanner_t *scn)
{
    /* threshold 1st to improve noise rejection */
    unsigned dx, thresh = scn->y1_thresh;
  4073a2:	6a28      	ldr	r0, [r5, #32]
    unsigned long t;
    if((thresh <= scn->y1_min_thresh) || !scn->width) {
  4073a4:	6869      	ldr	r1, [r5, #4]
  4073a6:	4288      	cmp	r0, r1
  4073a8:	d915      	bls.n	4073d6 <zbar_scan_y+0xd6>
  4073aa:	f8d5 e02c 	ldr.w	lr, [r5, #44]	; 0x2c
  4073ae:	f1be 0f00 	cmp.w	lr, #0
  4073b2:	d010      	beq.n	4073d6 <zbar_scan_y+0xd6>
        dbprintf(1, " tmin=%d", scn->y1_min_thresh);
        return(scn->y1_min_thresh);
    }
    /* slowly return threshold to min */
    dx = (scn->x << ZBAR_FIXED) - scn->last_edge;
  4073b4:	6aab      	ldr	r3, [r5, #40]	; 0x28
  4073b6:	68aa      	ldr	r2, [r5, #8]
  4073b8:	ebc3 1242 	rsb	r2, r3, r2, lsl #5
    t = thresh * dx;
  4073bc:	fb00 f202 	mul.w	r2, r0, r2
    t /= scn->width;
  4073c0:	fbb2 f3fe 	udiv	r3, r2, lr
    t /= ZBAR_SCANNER_THRESH_FADE;
  4073c4:	08db      	lsrs	r3, r3, #3
    dbprintf(1, " thr=%d t=%ld x=%d last=%d.%d (%d)",
             thresh, t, scn->x, scn->last_edge >> ZBAR_FIXED,
             scn->last_edge & ((1 << ZBAR_FIXED) - 1), dx);
    if(thresh > t) {
  4073c6:	4298      	cmp	r0, r3
  4073c8:	d902      	bls.n	4073d0 <zbar_scan_y+0xd0>
        thresh -= t;
  4073ca:	1ac3      	subs	r3, r0, r3
        if(thresh > scn->y1_min_thresh)
  4073cc:	4299      	cmp	r1, r3
  4073ce:	d301      	bcc.n	4073d4 <zbar_scan_y+0xd4>
            return(thresh);
    }
    scn->y1_thresh = scn->y1_min_thresh;
  4073d0:	6229      	str	r1, [r5, #32]
  4073d2:	e000      	b.n	4073d6 <zbar_scan_y+0xd6>
             thresh, t, scn->x, scn->last_edge >> ZBAR_FIXED,
             scn->last_edge & ((1 << ZBAR_FIXED) - 1), dx);
    if(thresh > t) {
        thresh -= t;
        if(thresh > scn->y1_min_thresh)
            return(thresh);
  4073d4:	4619      	mov	r1, r3

    edge = ZBAR_NONE;
    /* 2nd zero-crossing is 1st local min/max - could be edge */
    if((!y2_1 ||
        ((y2_1 > 0) ? y2_2 < 0 : y2_2 > 0)) &&
       (calc_thresh(scn) <= abs(y1_1)))
  4073d6:	ea87 78e7 	eor.w	r8, r7, r7, asr #31
  4073da:	eba8 78e7 	sub.w	r8, r8, r7, asr #31
             x, y, y0_1, y1_1, y2_1);

    edge = ZBAR_NONE;
    /* 2nd zero-crossing is 1st local min/max - could be edge */
    if((!y2_1 ||
        ((y2_1 > 0) ? y2_2 < 0 : y2_2 > 0)) &&
  4073de:	4588      	cmp	r8, r1
  4073e0:	d341      	bcc.n	407466 <zbar_scan_y+0x166>
       (calc_thresh(scn) <= abs(y1_1)))
    {
        /* check for 1st sign change */
        char y1_rev = (scn->y1_sign > 0) ? y1_1 < 0 : y1_1 > 0;
  4073e2:	69e9      	ldr	r1, [r5, #28]
  4073e4:	2900      	cmp	r1, #0
  4073e6:	dd01      	ble.n	4073ec <zbar_scan_y+0xec>
  4073e8:	0ffa      	lsrs	r2, r7, #31
  4073ea:	e003      	b.n	4073f4 <zbar_scan_y+0xf4>
  4073ec:	2f00      	cmp	r7, #0
  4073ee:	bfd4      	ite	le
  4073f0:	2200      	movle	r2, #0
  4073f2:	2201      	movgt	r2, #1
        if(y1_rev)
  4073f4:	2a00      	cmp	r2, #0
  4073f6:	d038      	beq.n	40746a <zbar_scan_y+0x16a>
}

static inline zbar_symbol_type_t process_edge (zbar_scanner_t *scn,
                                               int y1)
{
    if(!scn->y1_sign)
  4073f8:	b919      	cbnz	r1, 407402 <zbar_scan_y+0x102>
        scn->last_edge = scn->cur_edge = (1 << ZBAR_FIXED) + ROUND;
  4073fa:	2330      	movs	r3, #48	; 0x30
  4073fc:	626b      	str	r3, [r5, #36]	; 0x24
  4073fe:	62ab      	str	r3, [r5, #40]	; 0x28
  407400:	e003      	b.n	40740a <zbar_scan_y+0x10a>
    else if(!scn->last_edge)
  407402:	6aab      	ldr	r3, [r5, #40]	; 0x28
  407404:	b90b      	cbnz	r3, 40740a <zbar_scan_y+0x10a>
        scn->last_edge = scn->cur_edge;
  407406:	6a6b      	ldr	r3, [r5, #36]	; 0x24
  407408:	62ab      	str	r3, [r5, #40]	; 0x28

    scn->width = scn->cur_edge - scn->last_edge;
  40740a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
  40740c:	6aa9      	ldr	r1, [r5, #40]	; 0x28
  40740e:	1a59      	subs	r1, r3, r1
  407410:	62e9      	str	r1, [r5, #44]	; 0x2c
    dbprintf(1, " sgn=%d cur=%d.%d w=%d (%s)\n",
             scn->y1_sign, scn->cur_edge >> ZBAR_FIXED,
             scn->cur_edge & ((1 << ZBAR_FIXED) - 1), scn->width,
             ((y1 > 0) ? "SPACE" : "BAR"));
    scn->last_edge = scn->cur_edge;
  407412:	62ab      	str	r3, [r5, #40]	; 0x28
#if DEBUG_SVG > 1
    svg_path_moveto(SVG_ABS, scn->last_edge - (1 << ZBAR_FIXED) - ROUND, 0);
#endif

    /* pass to decoder */
    if(scn->decoder)
  407414:	6828      	ldr	r0, [r5, #0]
  407416:	b380      	cbz	r0, 40747a <zbar_scan_y+0x17a>
        return(zbar_decode_width(scn->decoder, scn->width));
  407418:	4b1b      	ldr	r3, [pc, #108]	; (407488 <zbar_scan_y+0x188>)
  40741a:	4798      	blx	r3
  40741c:	e000      	b.n	407420 <zbar_scan_y+0x120>
    y2_2 = y0_1 - (y0_2 * 2) + y0_3;

    dbprintf(1, "scan: x=%d y=%d y0=%d y1=%d y2=%d",
             x, y, y0_1, y1_1, y2_1);

    edge = ZBAR_NONE;
  40741e:	2000      	movs	r0, #0
            /* intensity change reversal - finalize previous edge */
            edge = process_edge(scn, y1_1);

        if(y1_rev || (abs(scn->y1_sign) < abs(y1_1))) {
            int d;
            scn->y1_sign = y1_1;
  407420:	61ef      	str	r7, [r5, #28]

            /* adaptive thresholding */
            /* start at multiple of new min/max */
            scn->y1_thresh = (abs(y1_1) * THRESH_INIT + ROUND) >> ZBAR_FIXED;
  407422:	ebc8 03c8 	rsb	r3, r8, r8, lsl #3
  407426:	005b      	lsls	r3, r3, #1
  407428:	3310      	adds	r3, #16
  40742a:	095b      	lsrs	r3, r3, #5
  40742c:	622b      	str	r3, [r5, #32]
            dbprintf(1, "\tthr=%d", scn->y1_thresh);
            if(scn->y1_thresh < scn->y1_min_thresh)
  40742e:	686a      	ldr	r2, [r5, #4]
  407430:	4293      	cmp	r3, r2
                scn->y1_thresh = scn->y1_min_thresh;
  407432:	bf38      	it	cc
  407434:	622a      	strcc	r2, [r5, #32]

            /* update current edge */
            d = y2_1 - y2_2;
            scn->cur_edge = 1 << ZBAR_FIXED;
            if(!d)
  407436:	ebb4 0309 	subs.w	r3, r4, r9
  40743a:	d102      	bne.n	407442 <zbar_scan_y+0x142>
                scn->cur_edge >>= 1;
  40743c:	2310      	movs	r3, #16
  40743e:	626b      	str	r3, [r5, #36]	; 0x24
  407440:	e00a      	b.n	407458 <zbar_scan_y+0x158>
            else if(y2_1)
  407442:	b914      	cbnz	r4, 40744a <zbar_scan_y+0x14a>
            if(scn->y1_thresh < scn->y1_min_thresh)
                scn->y1_thresh = scn->y1_min_thresh;

            /* update current edge */
            d = y2_1 - y2_2;
            scn->cur_edge = 1 << ZBAR_FIXED;
  407444:	2320      	movs	r3, #32
  407446:	626b      	str	r3, [r5, #36]	; 0x24
  407448:	e006      	b.n	407458 <zbar_scan_y+0x158>
            if(!d)
                scn->cur_edge >>= 1;
            else if(y2_1)
                /* interpolate zero crossing */
                scn->cur_edge -= ((y2_1 << ZBAR_FIXED) + 1) / d;
  40744a:	0161      	lsls	r1, r4, #5
  40744c:	3101      	adds	r1, #1
  40744e:	fb91 f3f3 	sdiv	r3, r1, r3
  407452:	f1c3 0320 	rsb	r3, r3, #32
  407456:	626b      	str	r3, [r5, #36]	; 0x24
            scn->cur_edge += x << ZBAR_FIXED;
  407458:	6a6b      	ldr	r3, [r5, #36]	; 0x24
  40745a:	eb03 1346 	add.w	r3, r3, r6, lsl #5
  40745e:	626b      	str	r3, [r5, #36]	; 0x24
            dbprintf(1, "\n");
  407460:	e00d      	b.n	40747e <zbar_scan_y+0x17e>
    y2_2 = y0_1 - (y0_2 * 2) + y0_3;

    dbprintf(1, "scan: x=%d y=%d y0=%d y1=%d y2=%d",
             x, y, y0_1, y1_1, y2_1);

    edge = ZBAR_NONE;
  407462:	2000      	movs	r0, #0
  407464:	e00b      	b.n	40747e <zbar_scan_y+0x17e>
  407466:	2000      	movs	r0, #0
  407468:	e009      	b.n	40747e <zbar_scan_y+0x17e>
        char y1_rev = (scn->y1_sign > 0) ? y1_1 < 0 : y1_1 > 0;
        if(y1_rev)
            /* intensity change reversal - finalize previous edge */
            edge = process_edge(scn, y1_1);

        if(y1_rev || (abs(scn->y1_sign) < abs(y1_1))) {
  40746a:	ea81 73e1 	eor.w	r3, r1, r1, asr #31
  40746e:	eba3 73e1 	sub.w	r3, r3, r1, asr #31
  407472:	4598      	cmp	r8, r3
  407474:	dcd3      	bgt.n	40741e <zbar_scan_y+0x11e>
    y2_2 = y0_1 - (y0_2 * 2) + y0_3;

    dbprintf(1, "scan: x=%d y=%d y0=%d y1=%d y2=%d",
             x, y, y0_1, y1_1, y2_1);

    edge = ZBAR_NONE;
  407476:	2000      	movs	r0, #0
  407478:	e001      	b.n	40747e <zbar_scan_y+0x17e>
#endif

    /* pass to decoder */
    if(scn->decoder)
        return(zbar_decode_width(scn->decoder, scn->width));
    return(ZBAR_PARTIAL);
  40747a:	2001      	movs	r0, #1
  40747c:	e7d0      	b.n	407420 <zbar_scan_y+0x120>
    }
    else
        dbprintf(1, "\n");
    /* FIXME add fall-thru pass to decoder after heuristic "idle" period
       (eg, 6-8 * last width) */
    scn->x = x + 1;
  40747e:	3601      	adds	r6, #1
  407480:	60ae      	str	r6, [r5, #8]
    return(edge);
}
  407482:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  407486:	bf00      	nop
  407488:	00404979 	.word	0x00404979

0040748c <zbar_get_symbol_name>:

#include <FreeRTOS.h>

const char *zbar_get_symbol_name (zbar_symbol_type_t sym)
{
    switch(sym & ZBAR_SYMBOL) {
  40748c:	b2c0      	uxtb	r0, r0
  40748e:	3802      	subs	r0, #2
  407490:	287e      	cmp	r0, #126	; 0x7e
  407492:	d863      	bhi.n	40755c <zbar_get_symbol_name+0xd0>
  407494:	e8df f000 	tbb	[pc, r0]
  407498:	40626264 	.word	0x40626264
  40749c:	44426262 	.word	0x44426262
  4074a0:	4a486246 	.word	0x4a486246
  4074a4:	62624e4c 	.word	0x62624e4c
  4074a8:	62626262 	.word	0x62626262
  4074ac:	50626262 	.word	0x50626262
  4074b0:	62626262 	.word	0x62626262
  4074b4:	62626262 	.word	0x62626262
  4074b8:	62625452 	.word	0x62625452
  4074bc:	62625856 	.word	0x62625856
  4074c0:	62626262 	.word	0x62626262
  4074c4:	62626262 	.word	0x62626262
  4074c8:	62626262 	.word	0x62626262
  4074cc:	5e626262 	.word	0x5e626262
  4074d0:	62626262 	.word	0x62626262
  4074d4:	62606262 	.word	0x62606262
  4074d8:	62626262 	.word	0x62626262
  4074dc:	62626262 	.word	0x62626262
  4074e0:	62626262 	.word	0x62626262
  4074e4:	62626262 	.word	0x62626262
  4074e8:	62626262 	.word	0x62626262
  4074ec:	62626262 	.word	0x62626262
  4074f0:	5a626262 	.word	0x5a626262
  4074f4:	62626262 	.word	0x62626262
  4074f8:	62626262 	.word	0x62626262
  4074fc:	62626262 	.word	0x62626262
  407500:	62626262 	.word	0x62626262
  407504:	62626262 	.word	0x62626262
  407508:	62626262 	.word	0x62626262
  40750c:	62626262 	.word	0x62626262
  407510:	62626262 	.word	0x62626262
  407514:	6262      	.short	0x6262
  407516:	5c          	.byte	0x5c
  407517:	00          	.byte	0x00
    case ZBAR_EAN2: return("EAN-2");
    case ZBAR_EAN5: return("EAN-5");
  407518:	4812      	ldr	r0, [pc, #72]	; (407564 <zbar_get_symbol_name+0xd8>)
  40751a:	4770      	bx	lr
    case ZBAR_EAN8: return("EAN-8");
  40751c:	4812      	ldr	r0, [pc, #72]	; (407568 <zbar_get_symbol_name+0xdc>)
  40751e:	4770      	bx	lr
    case ZBAR_UPCE: return("UPC-E");
  407520:	4812      	ldr	r0, [pc, #72]	; (40756c <zbar_get_symbol_name+0xe0>)
  407522:	4770      	bx	lr
    case ZBAR_ISBN10: return("ISBN-10");
  407524:	4812      	ldr	r0, [pc, #72]	; (407570 <zbar_get_symbol_name+0xe4>)
  407526:	4770      	bx	lr
    case ZBAR_UPCA: return("UPC-A");
  407528:	4812      	ldr	r0, [pc, #72]	; (407574 <zbar_get_symbol_name+0xe8>)
  40752a:	4770      	bx	lr
    case ZBAR_EAN13: return("EAN-13");
  40752c:	4812      	ldr	r0, [pc, #72]	; (407578 <zbar_get_symbol_name+0xec>)
  40752e:	4770      	bx	lr
    case ZBAR_ISBN13: return("ISBN-13");
  407530:	4812      	ldr	r0, [pc, #72]	; (40757c <zbar_get_symbol_name+0xf0>)
  407532:	4770      	bx	lr
    case ZBAR_COMPOSITE: return("COMPOSITE");
  407534:	4812      	ldr	r0, [pc, #72]	; (407580 <zbar_get_symbol_name+0xf4>)
  407536:	4770      	bx	lr
    case ZBAR_I25: return("I2/5");
  407538:	4812      	ldr	r0, [pc, #72]	; (407584 <zbar_get_symbol_name+0xf8>)
  40753a:	4770      	bx	lr
    case ZBAR_DATABAR: return("DataBar");
  40753c:	4812      	ldr	r0, [pc, #72]	; (407588 <zbar_get_symbol_name+0xfc>)
  40753e:	4770      	bx	lr
    case ZBAR_DATABAR_EXP: return("DataBar-Exp");
  407540:	4812      	ldr	r0, [pc, #72]	; (40758c <zbar_get_symbol_name+0x100>)
  407542:	4770      	bx	lr
    case ZBAR_CODABAR: return("Codabar");
  407544:	4812      	ldr	r0, [pc, #72]	; (407590 <zbar_get_symbol_name+0x104>)
  407546:	4770      	bx	lr
    case ZBAR_CODE39: return("CODE-39");
  407548:	4812      	ldr	r0, [pc, #72]	; (407594 <zbar_get_symbol_name+0x108>)
  40754a:	4770      	bx	lr
    case ZBAR_CODE93: return("CODE-93");
  40754c:	4812      	ldr	r0, [pc, #72]	; (407598 <zbar_get_symbol_name+0x10c>)
  40754e:	4770      	bx	lr
    case ZBAR_CODE128: return("CODE-128");
  407550:	4812      	ldr	r0, [pc, #72]	; (40759c <zbar_get_symbol_name+0x110>)
  407552:	4770      	bx	lr
    case ZBAR_PDF417: return("PDF417");
  407554:	4812      	ldr	r0, [pc, #72]	; (4075a0 <zbar_get_symbol_name+0x114>)
  407556:	4770      	bx	lr
    case ZBAR_QRCODE: return("QR-Code");
  407558:	4812      	ldr	r0, [pc, #72]	; (4075a4 <zbar_get_symbol_name+0x118>)
  40755a:	4770      	bx	lr
    default: return("UNKNOWN");
  40755c:	4812      	ldr	r0, [pc, #72]	; (4075a8 <zbar_get_symbol_name+0x11c>)
  40755e:	4770      	bx	lr
#include <FreeRTOS.h>

const char *zbar_get_symbol_name (zbar_symbol_type_t sym)
{
    switch(sym & ZBAR_SYMBOL) {
    case ZBAR_EAN2: return("EAN-2");
  407560:	4812      	ldr	r0, [pc, #72]	; (4075ac <zbar_get_symbol_name+0x120>)
    case ZBAR_CODE128: return("CODE-128");
    case ZBAR_PDF417: return("PDF417");
    case ZBAR_QRCODE: return("QR-Code");
    default: return("UNKNOWN");
    }
}
  407562:	4770      	bx	lr
  407564:	00411860 	.word	0x00411860
  407568:	00411868 	.word	0x00411868
  40756c:	00411870 	.word	0x00411870
  407570:	00411878 	.word	0x00411878
  407574:	00411880 	.word	0x00411880
  407578:	00411888 	.word	0x00411888
  40757c:	00411890 	.word	0x00411890
  407580:	00411898 	.word	0x00411898
  407584:	004118a4 	.word	0x004118a4
  407588:	004118ac 	.word	0x004118ac
  40758c:	004118b4 	.word	0x004118b4
  407590:	004118c0 	.word	0x004118c0
  407594:	004118c8 	.word	0x004118c8
  407598:	004118d0 	.word	0x004118d0
  40759c:	004118d8 	.word	0x004118d8
  4075a0:	004118e4 	.word	0x004118e4
  4075a4:	004118ec 	.word	0x004118ec
  4075a8:	004118f4 	.word	0x004118f4
  4075ac:	00411858 	.word	0x00411858

004075b0 <_zbar_get_symbol_hash>:
    default: return("UNKNOWN");
    }
}

int _zbar_get_symbol_hash (zbar_symbol_type_t sym)
{
  4075b0:	b510      	push	{r4, lr}
        0x00, 0x01, 0x10, 0x11,   -1, 0x11, 0x16, 0x0c,
	0x05, 0x06, 0x08,   -1, 0x04, 0x03, 0x07, 0x12,
	  -1,   -1,   -1,   -1,   -1,   -1,   -1, 0x02,
	  -1, 0x00, 0x12, 0x0c, 0x0b, 0x1d, 0x0a, 0x00,
     };
    int g0 = hash[sym & 0x1f];
  4075b2:	4a0b      	ldr	r2, [pc, #44]	; (4075e0 <_zbar_get_symbol_hash+0x30>)
  4075b4:	f000 031f 	and.w	r3, r0, #31
  4075b8:	56d1      	ldrsb	r1, [r2, r3]
    int g1 = hash[~(sym >> 4) & 0x1f];
  4075ba:	ea6f 1010 	mvn.w	r0, r0, lsr #4
  4075be:	f000 001f 	and.w	r0, r0, #31
  4075c2:	5613      	ldrsb	r3, [r2, r0]
    assert(g0 >= 0 && g1 >= 0);
  4075c4:	2900      	cmp	r1, #0
  4075c6:	db01      	blt.n	4075cc <_zbar_get_symbol_hash+0x1c>
  4075c8:	2b00      	cmp	r3, #0
  4075ca:	da05      	bge.n	4075d8 <_zbar_get_symbol_hash+0x28>
  4075cc:	4805      	ldr	r0, [pc, #20]	; (4075e4 <_zbar_get_symbol_hash+0x34>)
  4075ce:	216f      	movs	r1, #111	; 0x6f
  4075d0:	4a05      	ldr	r2, [pc, #20]	; (4075e8 <_zbar_get_symbol_hash+0x38>)
  4075d2:	4b06      	ldr	r3, [pc, #24]	; (4075ec <_zbar_get_symbol_hash+0x3c>)
  4075d4:	4c06      	ldr	r4, [pc, #24]	; (4075f0 <_zbar_get_symbol_hash+0x40>)
  4075d6:	47a0      	blx	r4
    if(g0 < 0 || g1 < 0)
        return(0);
    return((g0 + g1) & 0x1f);
  4075d8:	18c8      	adds	r0, r1, r3
}
  4075da:	f000 001f 	and.w	r0, r0, #31
  4075de:	bd10      	pop	{r4, pc}
  4075e0:	00411a84 	.word	0x00411a84
  4075e4:	00411988 	.word	0x00411988
  4075e8:	00411840 	.word	0x00411840
  4075ec:	004119ac 	.word	0x004119ac
  4075f0:	00408031 	.word	0x00408031

004075f4 <zbar_symbol_get_type>:
}

zbar_symbol_type_t zbar_symbol_get_type (const zbar_symbol_t *sym)
{
    return(sym->type);
}
  4075f4:	8800      	ldrh	r0, [r0, #0]
  4075f6:	4770      	bx	lr

004075f8 <zbar_symbol_get_data>:
}

const char *zbar_symbol_get_data (const zbar_symbol_t *sym)
{
    return(sym->data);
}
  4075f8:	6940      	ldr	r0, [r0, #20]
  4075fa:	4770      	bx	lr

004075fc <zbar_symbol_next>:
    return(sym->orient);
}

const zbar_symbol_t *zbar_symbol_next (const zbar_symbol_t *sym)
{
    return((sym) ? sym->next : NULL);
  4075fc:	b108      	cbz	r0, 407602 <zbar_symbol_next+0x6>
  4075fe:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
  407600:	4770      	bx	lr
  407602:	2000      	movs	r0, #0
}
  407604:	4770      	bx	lr
  407606:	bf00      	nop

00407608 <_zbar_symbol_set_create>:
    return(*buf);
}


zbar_symbol_set_t *_zbar_symbol_set_create ()
{
  407608:	b510      	push	{r4, lr}
    zbar_symbol_set_t *syms = pvPortCalloc(1, sizeof(*syms));
  40760a:	2001      	movs	r0, #1
  40760c:	2110      	movs	r1, #16
  40760e:	4b07      	ldr	r3, [pc, #28]	; (40762c <_zbar_symbol_set_create+0x24>)
  407610:	4798      	blx	r3
typedef int refcnt_t;

static inline int _zbar_refcnt (refcnt_t *cnt,
                                int delta)
{
    int rc = (*cnt += delta);
  407612:	6803      	ldr	r3, [r0, #0]
  407614:	3301      	adds	r3, #1
  407616:	6003      	str	r3, [r0, #0]
    assert(rc >= 0);
  407618:	2b00      	cmp	r3, #0
  40761a:	da05      	bge.n	407628 <_zbar_symbol_set_create+0x20>
  40761c:	4804      	ldr	r0, [pc, #16]	; (407630 <_zbar_symbol_set_create+0x28>)
  40761e:	2157      	movs	r1, #87	; 0x57
  407620:	4a04      	ldr	r2, [pc, #16]	; (407634 <_zbar_symbol_set_create+0x2c>)
  407622:	4b05      	ldr	r3, [pc, #20]	; (407638 <_zbar_symbol_set_create+0x30>)
  407624:	4c05      	ldr	r4, [pc, #20]	; (40763c <_zbar_symbol_set_create+0x34>)
  407626:	47a0      	blx	r4
    _zbar_refcnt(&syms->refcnt, 1);
    return(syms);
}
  407628:	bd10      	pop	{r4, pc}
  40762a:	bf00      	nop
  40762c:	00401935 	.word	0x00401935
  407630:	00411438 	.word	0x00411438
  407634:	00411830 	.word	0x00411830
  407638:	00411464 	.word	0x00411464
  40763c:	00408031 	.word	0x00408031

00407640 <zbar_symbol_set_ref>:
    vPortFree(syms);
}

void zbar_symbol_set_ref (const zbar_symbol_set_t *syms,
                          int delta)
{
  407640:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  407642:	4605      	mov	r5, r0
typedef int refcnt_t;

static inline int _zbar_refcnt (refcnt_t *cnt,
                                int delta)
{
    int rc = (*cnt += delta);
  407644:	6803      	ldr	r3, [r0, #0]
  407646:	440b      	add	r3, r1
  407648:	6003      	str	r3, [r0, #0]
    assert(rc >= 0);
  40764a:	2b00      	cmp	r3, #0
  40764c:	da05      	bge.n	40765a <zbar_symbol_set_ref+0x1a>
  40764e:	4817      	ldr	r0, [pc, #92]	; (4076ac <zbar_symbol_set_ref+0x6c>)
  407650:	2157      	movs	r1, #87	; 0x57
  407652:	4a17      	ldr	r2, [pc, #92]	; (4076b0 <zbar_symbol_set_ref+0x70>)
  407654:	4b17      	ldr	r3, [pc, #92]	; (4076b4 <zbar_symbol_set_ref+0x74>)
  407656:	4c18      	ldr	r4, [pc, #96]	; (4076b8 <zbar_symbol_set_ref+0x78>)
  407658:	47a0      	blx	r4
    zbar_symbol_set_t *ncsyms = (zbar_symbol_set_t*)syms;
    if(!_zbar_refcnt(&ncsyms->refcnt, delta) && delta <= 0)
  40765a:	bb2b      	cbnz	r3, 4076a8 <zbar_symbol_set_ref+0x68>
  40765c:	2900      	cmp	r1, #0
  40765e:	dc23      	bgt.n	4076a8 <zbar_symbol_set_ref+0x68>
}

inline void _zbar_symbol_set_free (zbar_symbol_set_t *syms)
{
    zbar_symbol_t *sym, *next;
    for(sym = syms->head; sym; sym = next) {
  407660:	6880      	ldr	r0, [r0, #8]
  407662:	b1e0      	cbz	r0, 40769e <zbar_symbol_set_ref+0x5e>
        next = sym->next;
  407664:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
        sym->next = NULL;
  407666:	62c3      	str	r3, [r0, #44]	; 0x2c
typedef int refcnt_t;

static inline int _zbar_refcnt (refcnt_t *cnt,
                                int delta)
{
    int rc = (*cnt += delta);
  407668:	6a83      	ldr	r3, [r0, #40]	; 0x28
  40766a:	3b01      	subs	r3, #1
  40766c:	6283      	str	r3, [r0, #40]	; 0x28
    assert(rc >= 0);
  40766e:	2b00      	cmp	r3, #0
  407670:	db0a      	blt.n	407688 <zbar_symbol_set_ref+0x48>

static inline void _zbar_symbol_refcnt (zbar_symbol_t *sym,
                                        int delta)
{
    if(!_zbar_refcnt(&sym->refcnt, delta) && delta <= 0)
        _zbar_symbol_free(sym);
  407672:	4f12      	ldr	r7, [pc, #72]	; (4076bc <zbar_symbol_set_ref+0x7c>)
  407674:	2600      	movs	r6, #0
  407676:	e00e      	b.n	407696 <zbar_symbol_set_ref+0x56>

inline void _zbar_symbol_set_free (zbar_symbol_set_t *syms)
{
    zbar_symbol_t *sym, *next;
    for(sym = syms->head; sym; sym = next) {
        next = sym->next;
  407678:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
        sym->next = NULL;
  40767a:	62e6      	str	r6, [r4, #44]	; 0x2c
typedef int refcnt_t;

static inline int _zbar_refcnt (refcnt_t *cnt,
                                int delta)
{
    int rc = (*cnt += delta);
  40767c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  40767e:	3b01      	subs	r3, #1
  407680:	62a3      	str	r3, [r4, #40]	; 0x28
  407682:	4620      	mov	r0, r4
    assert(rc >= 0);
  407684:	2b00      	cmp	r3, #0
  407686:	da05      	bge.n	407694 <zbar_symbol_set_ref+0x54>
  407688:	4808      	ldr	r0, [pc, #32]	; (4076ac <zbar_symbol_set_ref+0x6c>)
  40768a:	2157      	movs	r1, #87	; 0x57
  40768c:	4a08      	ldr	r2, [pc, #32]	; (4076b0 <zbar_symbol_set_ref+0x70>)
  40768e:	4b09      	ldr	r3, [pc, #36]	; (4076b4 <zbar_symbol_set_ref+0x74>)
  407690:	4c09      	ldr	r4, [pc, #36]	; (4076b8 <zbar_symbol_set_ref+0x78>)
  407692:	47a0      	blx	r4

inline void _zbar_symbol_set_free (zbar_symbol_set_t *syms)
{
    zbar_symbol_t *sym, *next;
    for(sym = syms->head; sym; sym = next) {
        next = sym->next;
  407694:	4614      	mov	r4, r2
}

static inline void _zbar_symbol_refcnt (zbar_symbol_t *sym,
                                        int delta)
{
    if(!_zbar_refcnt(&sym->refcnt, delta) && delta <= 0)
  407696:	b903      	cbnz	r3, 40769a <zbar_symbol_set_ref+0x5a>
        _zbar_symbol_free(sym);
  407698:	47b8      	blx	r7
}

inline void _zbar_symbol_set_free (zbar_symbol_set_t *syms)
{
    zbar_symbol_t *sym, *next;
    for(sym = syms->head; sym; sym = next) {
  40769a:	2c00      	cmp	r4, #0
  40769c:	d1ec      	bne.n	407678 <zbar_symbol_set_ref+0x38>
        next = sym->next;
        sym->next = NULL;
        _zbar_symbol_refcnt(sym, -1);
    }
    syms->head = NULL;
  40769e:	2300      	movs	r3, #0
  4076a0:	60ab      	str	r3, [r5, #8]
    vPortFree(syms);
  4076a2:	4628      	mov	r0, r5
  4076a4:	4b06      	ldr	r3, [pc, #24]	; (4076c0 <zbar_symbol_set_ref+0x80>)
  4076a6:	4798      	blx	r3
  4076a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4076aa:	bf00      	nop
  4076ac:	00411438 	.word	0x00411438
  4076b0:	00411830 	.word	0x00411830
  4076b4:	00411464 	.word	0x00411464
  4076b8:	00408031 	.word	0x00408031
  4076bc:	004076c5 	.word	0x004076c5
  4076c0:	00401959 	.word	0x00401959

004076c4 <_zbar_symbol_free>:
        return(0);
    return((g0 + g1) & 0x1f);
}

void _zbar_symbol_free (zbar_symbol_t *sym)
{
  4076c4:	b510      	push	{r4, lr}
  4076c6:	4604      	mov	r4, r0
    if(sym->syms) {
  4076c8:	6b00      	ldr	r0, [r0, #48]	; 0x30
  4076ca:	b128      	cbz	r0, 4076d8 <_zbar_symbol_free+0x14>
        zbar_symbol_set_ref(sym->syms, -1);
  4076cc:	f04f 31ff 	mov.w	r1, #4294967295
  4076d0:	4b08      	ldr	r3, [pc, #32]	; (4076f4 <_zbar_symbol_free+0x30>)
  4076d2:	4798      	blx	r3
        sym->syms = NULL;
  4076d4:	2300      	movs	r3, #0
  4076d6:	6323      	str	r3, [r4, #48]	; 0x30
    }
    if(sym->pts)
  4076d8:	6a20      	ldr	r0, [r4, #32]
  4076da:	b108      	cbz	r0, 4076e0 <_zbar_symbol_free+0x1c>
        vPortFree(sym->pts);
  4076dc:	4b06      	ldr	r3, [pc, #24]	; (4076f8 <_zbar_symbol_free+0x34>)
  4076de:	4798      	blx	r3
    if(sym->data_alloc && sym->data)
  4076e0:	68e3      	ldr	r3, [r4, #12]
  4076e2:	b11b      	cbz	r3, 4076ec <_zbar_symbol_free+0x28>
  4076e4:	6960      	ldr	r0, [r4, #20]
  4076e6:	b108      	cbz	r0, 4076ec <_zbar_symbol_free+0x28>
        vPortFree(sym->data);
  4076e8:	4b03      	ldr	r3, [pc, #12]	; (4076f8 <_zbar_symbol_free+0x34>)
  4076ea:	4798      	blx	r3
    vPortFree(sym);
  4076ec:	4620      	mov	r0, r4
  4076ee:	4b02      	ldr	r3, [pc, #8]	; (4076f8 <_zbar_symbol_free+0x34>)
  4076f0:	4798      	blx	r3
  4076f2:	bd10      	pop	{r4, pc}
  4076f4:	00407641 	.word	0x00407641
  4076f8:	00401959 	.word	0x00401959

004076fc <_zbar_symbol_set_free>:
    _zbar_refcnt(&syms->refcnt, 1);
    return(syms);
}

inline void _zbar_symbol_set_free (zbar_symbol_set_t *syms)
{
  4076fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4076fe:	4606      	mov	r6, r0
    zbar_symbol_t *sym, *next;
    for(sym = syms->head; sym; sym = next) {
  407700:	6880      	ldr	r0, [r0, #8]
  407702:	b1e8      	cbz	r0, 407740 <_zbar_symbol_set_free+0x44>
        next = sym->next;
  407704:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
        sym->next = NULL;
  407706:	2300      	movs	r3, #0
  407708:	62c3      	str	r3, [r0, #44]	; 0x2c
typedef int refcnt_t;

static inline int _zbar_refcnt (refcnt_t *cnt,
                                int delta)
{
    int rc = (*cnt += delta);
  40770a:	6a83      	ldr	r3, [r0, #40]	; 0x28
  40770c:	3b01      	subs	r3, #1
  40770e:	6283      	str	r3, [r0, #40]	; 0x28
    assert(rc >= 0);
  407710:	2b00      	cmp	r3, #0
  407712:	db0a      	blt.n	40772a <_zbar_symbol_set_free+0x2e>
  407714:	4f0d      	ldr	r7, [pc, #52]	; (40774c <_zbar_symbol_set_free+0x50>)
  407716:	2500      	movs	r5, #0
  407718:	e00e      	b.n	407738 <_zbar_symbol_set_free+0x3c>

inline void _zbar_symbol_set_free (zbar_symbol_set_t *syms)
{
    zbar_symbol_t *sym, *next;
    for(sym = syms->head; sym; sym = next) {
        next = sym->next;
  40771a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
        sym->next = NULL;
  40771c:	62e5      	str	r5, [r4, #44]	; 0x2c
typedef int refcnt_t;

static inline int _zbar_refcnt (refcnt_t *cnt,
                                int delta)
{
    int rc = (*cnt += delta);
  40771e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  407720:	3b01      	subs	r3, #1
  407722:	62a3      	str	r3, [r4, #40]	; 0x28
  407724:	4620      	mov	r0, r4
    assert(rc >= 0);
  407726:	2b00      	cmp	r3, #0
  407728:	da05      	bge.n	407736 <_zbar_symbol_set_free+0x3a>
  40772a:	4809      	ldr	r0, [pc, #36]	; (407750 <_zbar_symbol_set_free+0x54>)
  40772c:	2157      	movs	r1, #87	; 0x57
  40772e:	4a09      	ldr	r2, [pc, #36]	; (407754 <_zbar_symbol_set_free+0x58>)
  407730:	4b09      	ldr	r3, [pc, #36]	; (407758 <_zbar_symbol_set_free+0x5c>)
  407732:	4c0a      	ldr	r4, [pc, #40]	; (40775c <_zbar_symbol_set_free+0x60>)
  407734:	47a0      	blx	r4

inline void _zbar_symbol_set_free (zbar_symbol_set_t *syms)
{
    zbar_symbol_t *sym, *next;
    for(sym = syms->head; sym; sym = next) {
        next = sym->next;
  407736:	4614      	mov	r4, r2
}

static inline void _zbar_symbol_refcnt (zbar_symbol_t *sym,
                                        int delta)
{
    if(!_zbar_refcnt(&sym->refcnt, delta) && delta <= 0)
  407738:	b903      	cbnz	r3, 40773c <_zbar_symbol_set_free+0x40>
        _zbar_symbol_free(sym);
  40773a:	47b8      	blx	r7
}

inline void _zbar_symbol_set_free (zbar_symbol_set_t *syms)
{
    zbar_symbol_t *sym, *next;
    for(sym = syms->head; sym; sym = next) {
  40773c:	2c00      	cmp	r4, #0
  40773e:	d1ec      	bne.n	40771a <_zbar_symbol_set_free+0x1e>
        next = sym->next;
        sym->next = NULL;
        _zbar_symbol_refcnt(sym, -1);
    }
    syms->head = NULL;
  407740:	2300      	movs	r3, #0
  407742:	60b3      	str	r3, [r6, #8]
    vPortFree(syms);
  407744:	4630      	mov	r0, r6
  407746:	4b06      	ldr	r3, [pc, #24]	; (407760 <_zbar_symbol_set_free+0x64>)
  407748:	4798      	blx	r3
  40774a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40774c:	004076c5 	.word	0x004076c5
  407750:	00411438 	.word	0x00411438
  407754:	00411830 	.word	0x00411830
  407758:	00411464 	.word	0x00411464
  40775c:	00408031 	.word	0x00408031
  407760:	00401959 	.word	0x00401959

00407764 <task_lcdscreen>:
		vTaskDelay(500);
	}
}

static void task_lcdscreen(void *pvParameters)
{
  407764:	b580      	push	{r7, lr}
	UNUSED(pvParameters);
	for (;;) {
		ili9325_fill(COLOR_VIOLET);
  407766:	4f09      	ldr	r7, [pc, #36]	; (40778c <task_lcdscreen+0x28>)
  407768:	4e09      	ldr	r6, [pc, #36]	; (407790 <task_lcdscreen+0x2c>)
		ili9325_draw_string(0, 20, (uint8_t *)"FreeRTOS");
  40776a:	4d0a      	ldr	r5, [pc, #40]	; (407794 <task_lcdscreen+0x30>)

static void task_lcdscreen(void *pvParameters)
{
	UNUSED(pvParameters);
	for (;;) {
		ili9325_fill(COLOR_VIOLET);
  40776c:	4638      	mov	r0, r7
  40776e:	47b0      	blx	r6
		ili9325_draw_string(0, 20, (uint8_t *)"FreeRTOS");
  407770:	2000      	movs	r0, #0
  407772:	2114      	movs	r1, #20
  407774:	462a      	mov	r2, r5
  407776:	4c08      	ldr	r4, [pc, #32]	; (407798 <task_lcdscreen+0x34>)
  407778:	47a0      	blx	r4
		ili9325_draw_string(0, 80, (uint8_t *)"DEMO");
  40777a:	2000      	movs	r0, #0
  40777c:	2150      	movs	r1, #80	; 0x50
  40777e:	4a07      	ldr	r2, [pc, #28]	; (40779c <task_lcdscreen+0x38>)
  407780:	47a0      	blx	r4
		vTaskDelay(5000);
  407782:	f241 3088 	movw	r0, #5000	; 0x1388
  407786:	4b06      	ldr	r3, [pc, #24]	; (4077a0 <task_lcdscreen+0x3c>)
  407788:	4798      	blx	r3
	}
  40778a:	e7ef      	b.n	40776c <task_lcdscreen+0x8>
  40778c:	00ee82ee 	.word	0x00ee82ee
  407790:	004008fd 	.word	0x004008fd
  407794:	00411aa4 	.word	0x00411aa4
  407798:	00400995 	.word	0x00400995
  40779c:	00411ab0 	.word	0x00411ab0
  4077a0:	00402651 	.word	0x00402651

004077a4 <task_display>:
}

static void task_display(void *pvParameters)
{
  4077a4:	b580      	push	{r7, lr}
	UNUSED(pvParameters);
	//vSemaphoreCreateBinary(xDisplaySemaphore);
	xDisplaySemaphore = xSemaphoreCreateBinary();
  4077a6:	2001      	movs	r0, #1
  4077a8:	2100      	movs	r1, #0
  4077aa:	2203      	movs	r2, #3
  4077ac:	4b12      	ldr	r3, [pc, #72]	; (4077f8 <task_display+0x54>)
  4077ae:	4798      	blx	r3
  4077b0:	4b12      	ldr	r3, [pc, #72]	; (4077fc <task_display+0x58>)
  4077b2:	6018      	str	r0, [r3, #0]

	for (;;){
		
		if (xDisplaySemaphore != NULL){
  4077b4:	461c      	mov	r4, r3
			
			if (xSemaphoreTake(xDisplaySemaphore, portMAX_DELAY ) == pdTRUE){		
  4077b6:	4d12      	ldr	r5, [pc, #72]	; (407800 <task_display+0x5c>)
				ili9325_draw_string(0, 20, (uint8_t *)"task_display");
				ili9325_draw_string(0, 80, (uint8_t *)"initializing camera");		
			
				//init capture dest addr + height
				/* Enable vsync interrupt*/
				pio_enable_interrupt(OV7740_VSYNC_PIO, OV7740_VSYNC_MASK);
  4077b8:	4f12      	ldr	r7, [pc, #72]	; (407804 <task_display+0x60>)
	//vSemaphoreCreateBinary(xDisplaySemaphore);
	xDisplaySemaphore = xSemaphoreCreateBinary();

	for (;;){
		
		if (xDisplaySemaphore != NULL){
  4077ba:	6820      	ldr	r0, [r4, #0]
  4077bc:	b1b8      	cbz	r0, 4077ee <task_display+0x4a>
			
			if (xSemaphoreTake(xDisplaySemaphore, portMAX_DELAY ) == pdTRUE){		
  4077be:	2100      	movs	r1, #0
  4077c0:	f04f 32ff 	mov.w	r2, #4294967295
  4077c4:	460b      	mov	r3, r1
  4077c6:	47a8      	blx	r5
  4077c8:	2801      	cmp	r0, #1
  4077ca:	d110      	bne.n	4077ee <task_display+0x4a>
				ili9325_fill(COLOR_BLUE);
  4077cc:	20ff      	movs	r0, #255	; 0xff
  4077ce:	4b0e      	ldr	r3, [pc, #56]	; (407808 <task_display+0x64>)
  4077d0:	4798      	blx	r3
				ili9325_draw_string(0, 20, (uint8_t *)"task_display");
  4077d2:	2000      	movs	r0, #0
  4077d4:	2114      	movs	r1, #20
  4077d6:	4a0d      	ldr	r2, [pc, #52]	; (40780c <task_display+0x68>)
  4077d8:	4e0d      	ldr	r6, [pc, #52]	; (407810 <task_display+0x6c>)
  4077da:	47b0      	blx	r6
				ili9325_draw_string(0, 80, (uint8_t *)"initializing camera");		
  4077dc:	2000      	movs	r0, #0
  4077de:	2150      	movs	r1, #80	; 0x50
  4077e0:	4a0c      	ldr	r2, [pc, #48]	; (407814 <task_display+0x70>)
  4077e2:	47b0      	blx	r6
			
				//init capture dest addr + height
				/* Enable vsync interrupt*/
				pio_enable_interrupt(OV7740_VSYNC_PIO, OV7740_VSYNC_MASK);
  4077e4:	4638      	mov	r0, r7
  4077e6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
  4077ea:	4b0b      	ldr	r3, [pc, #44]	; (407818 <task_display+0x74>)
  4077ec:	4798      	blx	r3

			}
			
		}
		
		vTaskDelay(10 / portTICK_RATE_MS);
  4077ee:	200a      	movs	r0, #10
  4077f0:	4b0a      	ldr	r3, [pc, #40]	; (40781c <task_display+0x78>)
  4077f2:	4798      	blx	r3
	}
  4077f4:	e7e1      	b.n	4077ba <task_display+0x16>
  4077f6:	bf00      	nop
  4077f8:	00401be9 	.word	0x00401be9
  4077fc:	2000ae84 	.word	0x2000ae84
  407800:	00401f45 	.word	0x00401f45
  407804:	400e0e00 	.word	0x400e0e00
  407808:	004008fd 	.word	0x004008fd
  40780c:	00411ab8 	.word	0x00411ab8
  407810:	00400995 	.word	0x00400995
  407814:	00411ac8 	.word	0x00411ac8
  407818:	00400ba5 	.word	0x00400ba5
  40781c:	00402651 	.word	0x00402651

00407820 <task_led>:
 * \brief This task, when activated, make LED blink at a fixed rate
 */


static void task_led(void *pvParameters)
{
  407820:	b508      	push	{r3, lr}
	UNUSED(pvParameters);
	for (;;) {
		LED_Toggle(LED0_GPIO);
  407822:	264c      	movs	r6, #76	; 0x4c
  407824:	4d03      	ldr	r5, [pc, #12]	; (407834 <task_led+0x14>)
		vTaskDelay(500);
  407826:	4c04      	ldr	r4, [pc, #16]	; (407838 <task_led+0x18>)

static void task_led(void *pvParameters)
{
	UNUSED(pvParameters);
	for (;;) {
		LED_Toggle(LED0_GPIO);
  407828:	4630      	mov	r0, r6
  40782a:	47a8      	blx	r5
		vTaskDelay(500);
  40782c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
  407830:	47a0      	blx	r4
	}
  407832:	e7f9      	b.n	407828 <task_led+0x8>
  407834:	00400be9 	.word	0x00400be9
  407838:	00402651 	.word	0x00402651

0040783c <button_handler>:

/**
 * \brief Handler for button rising edge interrupt.
 */
static void button_handler(uint32_t ul_id, uint32_t ul_mask)
{
  40783c:	b510      	push	{r4, lr}
	unused(ul_id);
	unused(ul_mask);

	g_ul_push_button_trigger = true;
  40783e:	2101      	movs	r1, #1
  407840:	4b07      	ldr	r3, [pc, #28]	; (407860 <button_handler+0x24>)
  407842:	6019      	str	r1, [r3, #0]
	
	static signed portBASE_TYPE xHigherPriorityTaskWoken;
	
	xHigherPriorityTaskWoken = pdFALSE;
  407844:	4c07      	ldr	r4, [pc, #28]	; (407864 <button_handler+0x28>)
  407846:	2300      	movs	r3, #0
  407848:	6023      	str	r3, [r4, #0]
	xSemaphoreGiveFromISR( xDisplaySemaphore, pdTRUE );
  40784a:	4b07      	ldr	r3, [pc, #28]	; (407868 <button_handler+0x2c>)
  40784c:	6818      	ldr	r0, [r3, #0]
  40784e:	4b07      	ldr	r3, [pc, #28]	; (40786c <button_handler+0x30>)
  407850:	4798      	blx	r3

	portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
  407852:	6823      	ldr	r3, [r4, #0]
  407854:	b11b      	cbz	r3, 40785e <button_handler+0x22>
  407856:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  40785a:	4b05      	ldr	r3, [pc, #20]	; (407870 <button_handler+0x34>)
  40785c:	601a      	str	r2, [r3, #0]
  40785e:	bd10      	pop	{r4, pc}
  407860:	2000ae70 	.word	0x2000ae70
  407864:	2000ae7c 	.word	0x2000ae7c
  407868:	2000ae84 	.word	0x2000ae84
  40786c:	00401e91 	.word	0x00401e91
  407870:	e000ed04 	.word	0xe000ed04

00407874 <vsync_handler>:
/**
 * \brief Handler for vertical synchronisation using by the OV7740 image
 * sensor.
 */
static void vsync_handler(uint32_t ul_id, uint32_t ul_mask)
{
  407874:	b510      	push	{r4, lr}
	unused(ul_id);
	unused(ul_mask);
	
	g_ul_vsync_flag = true;
  407876:	2101      	movs	r1, #1
  407878:	4b07      	ldr	r3, [pc, #28]	; (407898 <vsync_handler+0x24>)
  40787a:	6019      	str	r1, [r3, #0]
	
	static signed portBASE_TYPE xHigherPriorityTaskWoken;
	xHigherPriorityTaskWoken = pdFALSE;
  40787c:	4c07      	ldr	r4, [pc, #28]	; (40789c <vsync_handler+0x28>)
  40787e:	2300      	movs	r3, #0
  407880:	6023      	str	r3, [r4, #0]
	xSemaphoreGiveFromISR(xCameraSemaphore, pdTRUE);
  407882:	4b07      	ldr	r3, [pc, #28]	; (4078a0 <vsync_handler+0x2c>)
  407884:	6818      	ldr	r0, [r3, #0]
  407886:	4b07      	ldr	r3, [pc, #28]	; (4078a4 <vsync_handler+0x30>)
  407888:	4798      	blx	r3
	portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
  40788a:	6823      	ldr	r3, [r4, #0]
  40788c:	b11b      	cbz	r3, 407896 <vsync_handler+0x22>
  40788e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  407892:	4b05      	ldr	r3, [pc, #20]	; (4078a8 <vsync_handler+0x34>)
  407894:	601a      	str	r2, [r3, #0]
  407896:	bd10      	pop	{r4, pc}
  407898:	2000ae78 	.word	0x2000ae78
  40789c:	2000ae74 	.word	0x2000ae74
  4078a0:	2000ae80 	.word	0x2000ae80
  4078a4:	00401e91 	.word	0x00401e91
  4078a8:	e000ed04 	.word	0xe000ed04

004078ac <task_zbar>:

	/* Reset vsync flag*/
	g_ul_vsync_flag = false;
}

void task_zbar(void){
  4078ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	
	uint8_t ulcursor;
	
	zbar_image_scanner_t *scanner = NULL;
	/* create a reader */
	scanner = zbar_image_scanner_create();
  4078b0:	4b23      	ldr	r3, [pc, #140]	; (407940 <task_zbar+0x94>)
  4078b2:	4798      	blx	r3
  4078b4:	4605      	mov	r5, r0
	/* configure the reader */
	zbar_image_scanner_set_config(scanner, 0, ZBAR_CFG_ENABLE, 1);
  4078b6:	2100      	movs	r1, #0
  4078b8:	460a      	mov	r2, r1
  4078ba:	2301      	movs	r3, #1
  4078bc:	4c21      	ldr	r4, [pc, #132]	; (407944 <task_zbar+0x98>)
  4078be:	47a0      	blx	r4
	
	uint8_t * temp = (uint8_t *)CAP_DEST;
	
	/* wrap image data */
	zbar_image_t *image = zbar_image_create();
  4078c0:	4b21      	ldr	r3, [pc, #132]	; (407948 <task_zbar+0x9c>)
  4078c2:	4798      	blx	r3
  4078c4:	4604      	mov	r4, r0
	zbar_image_set_format(image, zbar_fourcc('G','R','E','Y'));
  4078c6:	4921      	ldr	r1, [pc, #132]	; (40794c <task_zbar+0xa0>)
  4078c8:	4b21      	ldr	r3, [pc, #132]	; (407950 <task_zbar+0xa4>)
  4078ca:	4798      	blx	r3
	zbar_image_set_size(image, IMAGE_WIDTH, IMAGE_HEIGHT);
  4078cc:	4620      	mov	r0, r4
  4078ce:	f44f 71a0 	mov.w	r1, #320	; 0x140
  4078d2:	22f0      	movs	r2, #240	; 0xf0
  4078d4:	4b1f      	ldr	r3, [pc, #124]	; (407954 <task_zbar+0xa8>)
  4078d6:	4798      	blx	r3
	zbar_image_set_data(image, temp, IMAGE_WIDTH * IMAGE_HEIGHT, zbar_image_free_data);
  4078d8:	4620      	mov	r0, r4
  4078da:	f04f 41c0 	mov.w	r1, #1610612736	; 0x60000000
  4078de:	f44f 3296 	mov.w	r2, #76800	; 0x12c00
  4078e2:	4b1d      	ldr	r3, [pc, #116]	; (407958 <task_zbar+0xac>)
  4078e4:	4e1d      	ldr	r6, [pc, #116]	; (40795c <task_zbar+0xb0>)
  4078e6:	47b0      	blx	r6
	//zbar_image_set_format(image, zbar_fourcc('Y','8','0','0'));
	//zbar_image_set_size(image, 6, 190);
	//zbar_image_set_data(image, temp, 6 * 190, zbar_image_free_data);

	/* scan the image for barcodes */
	int n = zbar_scan_image(scanner, image);
  4078e8:	4628      	mov	r0, r5
  4078ea:	4621      	mov	r1, r4
  4078ec:	4b1c      	ldr	r3, [pc, #112]	; (407960 <task_zbar+0xb4>)
  4078ee:	4798      	blx	r3

	/* extract results */
	const zbar_symbol_t *symbol = zbar_image_first_symbol(image);
  4078f0:	4620      	mov	r0, r4
  4078f2:	4b1c      	ldr	r3, [pc, #112]	; (407964 <task_zbar+0xb8>)
  4078f4:	4798      	blx	r3
	for(; symbol; symbol = zbar_symbol_next(symbol)) {
  4078f6:	b300      	cbz	r0, 40793a <task_zbar+0x8e>
  4078f8:	4604      	mov	r4, r0
		/* print the results */
		zbar_symbol_type_t typ = zbar_symbol_get_type(symbol);
  4078fa:	f8df 808c 	ldr.w	r8, [pc, #140]	; 407988 <task_zbar+0xdc>
		volatile const char *data = zbar_symbol_get_data(symbol);
  4078fe:	4f1a      	ldr	r7, [pc, #104]	; (407968 <task_zbar+0xbc>)
		//ili9325_fill(COLOR_YELLOW);
		//ili9325_draw_string(0, 20, (uint8_t *)"FOUND IMAGE");
		//ili9325_draw_string(0, 20, (uint8_t *)zbar_get_symbol_name(typ));
		//ili9325_draw_string(0, 80, (uint8_t *)data);

		ili9325_draw_prepare(0, 0, IMAGE_HEIGHT, IMAGE_WIDTH);
  407900:	4e1a      	ldr	r6, [pc, #104]	; (40796c <task_zbar+0xc0>)

	/* extract results */
	const zbar_symbol_t *symbol = zbar_image_first_symbol(image);
	for(; symbol; symbol = zbar_symbol_next(symbol)) {
		/* print the results */
		zbar_symbol_type_t typ = zbar_symbol_get_type(symbol);
  407902:	4620      	mov	r0, r4
  407904:	47c0      	blx	r8
		volatile const char *data = zbar_symbol_get_data(symbol);
  407906:	4620      	mov	r0, r4
  407908:	47b8      	blx	r7
		//ili9325_fill(COLOR_YELLOW);
		//ili9325_draw_string(0, 20, (uint8_t *)"FOUND IMAGE");
		//ili9325_draw_string(0, 20, (uint8_t *)zbar_get_symbol_name(typ));
		//ili9325_draw_string(0, 80, (uint8_t *)data);

		ili9325_draw_prepare(0, 0, IMAGE_HEIGHT, IMAGE_WIDTH);
  40790a:	2000      	movs	r0, #0
  40790c:	4601      	mov	r1, r0
  40790e:	22f0      	movs	r2, #240	; 0xf0
  407910:	f44f 73a0 	mov.w	r3, #320	; 0x140
  407914:	47b0      	blx	r6
		ili9325_fill(COLOR_YELLOW);
  407916:	4816      	ldr	r0, [pc, #88]	; (407970 <task_zbar+0xc4>)
  407918:	4b16      	ldr	r3, [pc, #88]	; (407974 <task_zbar+0xc8>)
  40791a:	4798      	blx	r3
		ili9325_draw_string(0, 20, (uint8_t *)"found image");
  40791c:	2000      	movs	r0, #0
  40791e:	2114      	movs	r1, #20
  407920:	4a15      	ldr	r2, [pc, #84]	; (407978 <task_zbar+0xcc>)
  407922:	4d16      	ldr	r5, [pc, #88]	; (40797c <task_zbar+0xd0>)
  407924:	47a8      	blx	r5
		ili9325_draw_string(0, 80, (uint8_t *)"UPC code");
  407926:	2000      	movs	r0, #0
  407928:	2150      	movs	r1, #80	; 0x50
  40792a:	4a15      	ldr	r2, [pc, #84]	; (407980 <task_zbar+0xd4>)
  40792c:	47a8      	blx	r5
	/* scan the image for barcodes */
	int n = zbar_scan_image(scanner, image);

	/* extract results */
	const zbar_symbol_t *symbol = zbar_image_first_symbol(image);
	for(; symbol; symbol = zbar_symbol_next(symbol)) {
  40792e:	4620      	mov	r0, r4
  407930:	4b14      	ldr	r3, [pc, #80]	; (407984 <task_zbar+0xd8>)
  407932:	4798      	blx	r3
  407934:	4604      	mov	r4, r0
  407936:	2800      	cmp	r0, #0
  407938:	d1e3      	bne.n	407902 <task_zbar+0x56>
  40793a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40793e:	bf00      	nop
  407940:	00406725 	.word	0x00406725
  407944:	004067ed 	.word	0x004067ed
  407948:	00405ded 	.word	0x00405ded
  40794c:	59455247 	.word	0x59455247
  407950:	00405eb1 	.word	0x00405eb1
  407954:	00405eb5 	.word	0x00405eb5
  407958:	00405e35 	.word	0x00405e35
  40795c:	00405ec5 	.word	0x00405ec5
  407960:	004068d1 	.word	0x004068d1
  407964:	00405f49 	.word	0x00405f49
  407968:	004075f9 	.word	0x004075f9
  40796c:	0040096d 	.word	0x0040096d
  407970:	00ffff00 	.word	0x00ffff00
  407974:	004008fd 	.word	0x004008fd
  407978:	00411adc 	.word	0x00411adc
  40797c:	00400995 	.word	0x00400995
  407980:	00411ae8 	.word	0x00411ae8
  407984:	004075fd 	.word	0x004075fd
  407988:	004075f5 	.word	0x004075f5

0040798c <task_camera>:
		vTaskDelay(10 / portTICK_RATE_MS);
	}
}

static void task_camera(void *pvParameters)
{
  40798c:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
  407990:	b083      	sub	sp, #12
	UNUSED(pvParameters);
	xCameraSemaphore = xSemaphoreCreateBinary();
  407992:	2001      	movs	r0, #1
  407994:	2100      	movs	r1, #0
  407996:	2203      	movs	r2, #3
  407998:	4b78      	ldr	r3, [pc, #480]	; (407b7c <task_camera+0x1f0>)
  40799a:	4798      	blx	r3
  40799c:	4b78      	ldr	r3, [pc, #480]	; (407b80 <task_camera+0x1f4>)
  40799e:	6018      	str	r0, [r3, #0]
	}
	static inline void LCD_WD(uint8_t lcd_data)
	{
		*((volatile uint8_t *)((BOARD_ILI9325_ADDR) | (BOARD_ILI9325_RS))) = lcd_data;
  4079a0:	f8df 8218 	ldr.w	r8, [pc, #536]	; 407bbc <task_camera+0x230>
	/* Set cap_rows value*/
	//g_us_cap_rows = IMAGE_HEIGHT;

	for (;;){
		
		if (xCameraSemaphore != NULL){
  4079a4:	4b76      	ldr	r3, [pc, #472]	; (407b80 <task_camera+0x1f4>)
  4079a6:	6818      	ldr	r0, [r3, #0]
  4079a8:	2800      	cmp	r0, #0
  4079aa:	f000 80e3 	beq.w	407b74 <task_camera+0x1e8>
			
			if (xSemaphoreTake(xCameraSemaphore, portMAX_DELAY ) == pdTRUE){				
  4079ae:	2100      	movs	r1, #0
  4079b0:	f04f 32ff 	mov.w	r2, #4294967295
  4079b4:	460b      	mov	r3, r1
  4079b6:	4c73      	ldr	r4, [pc, #460]	; (407b84 <task_camera+0x1f8>)
  4079b8:	47a0      	blx	r4
  4079ba:	2801      	cmp	r0, #1
  4079bc:	f040 80da 	bne.w	407b74 <task_camera+0x1e8>

				//HACK
				g_p_uc_cap_dest_buf = (uint8_t *)CAP_DEST;
  4079c0:	4d71      	ldr	r5, [pc, #452]	; (407b88 <task_camera+0x1fc>)
  4079c2:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
  4079c6:	602b      	str	r3, [r5, #0]
				g_us_cap_rows = IMAGE_HEIGHT;
  4079c8:	4c70      	ldr	r4, [pc, #448]	; (407b8c <task_camera+0x200>)
  4079ca:	23f0      	movs	r3, #240	; 0xf0
  4079cc:	8023      	strh	r3, [r4, #0]
				
				/* Disable vsync interrupt*/
				pio_disable_interrupt(OV7740_VSYNC_PIO, OV7740_VSYNC_MASK);
  4079ce:	4870      	ldr	r0, [pc, #448]	; (407b90 <task_camera+0x204>)
  4079d0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
  4079d4:	4b6f      	ldr	r3, [pc, #444]	; (407b94 <task_camera+0x208>)
  4079d6:	4798      	blx	r3
				/* Enable pio capture*/
				pio_capture_enable(OV7740_DATA_BUS_PIO);
  4079d8:	486d      	ldr	r0, [pc, #436]	; (407b90 <task_camera+0x204>)
  4079da:	4b6f      	ldr	r3, [pc, #444]	; (407b98 <task_camera+0x20c>)
  4079dc:	4798      	blx	r3
				/* Capture data and send it to external SRAM memory thanks to PDC feature */
				pio_capture_to_buffer(OV7740_DATA_BUS_PIO, g_p_uc_cap_dest_buf, (g_us_cap_line * g_us_cap_rows) >> 2);
  4079de:	6829      	ldr	r1, [r5, #0]
  4079e0:	4b6e      	ldr	r3, [pc, #440]	; (407b9c <task_camera+0x210>)
  4079e2:	881a      	ldrh	r2, [r3, #0]
  4079e4:	8823      	ldrh	r3, [r4, #0]
  4079e6:	fb03 f302 	mul.w	r3, r3, r2
  4079ea:	109b      	asrs	r3, r3, #2
 */
static uint8_t pio_capture_to_buffer(Pio *p_pio, uint8_t *uc_buf,
		uint32_t ul_size)
{
	/* Check if the first PDC bank is free */
	if ((p_pio->PIO_RCR == 0) && (p_pio->PIO_RNCR == 0)) {
  4079ec:	4a68      	ldr	r2, [pc, #416]	; (407b90 <task_camera+0x204>)
  4079ee:	f8d2 216c 	ldr.w	r2, [r2, #364]	; 0x16c
  4079f2:	b962      	cbnz	r2, 407a0e <task_camera+0x82>
  4079f4:	4a66      	ldr	r2, [pc, #408]	; (407b90 <task_camera+0x204>)
  4079f6:	f8d2 217c 	ldr.w	r2, [r2, #380]	; 0x17c
  4079fa:	b942      	cbnz	r2, 407a0e <task_camera+0x82>
		p_pio->PIO_RPR = (uint32_t)uc_buf;
  4079fc:	4a64      	ldr	r2, [pc, #400]	; (407b90 <task_camera+0x204>)
  4079fe:	f8c2 1168 	str.w	r1, [r2, #360]	; 0x168
		p_pio->PIO_RCR = ul_size;
  407a02:	f8c2 316c 	str.w	r3, [r2, #364]	; 0x16c
		p_pio->PIO_PTCR = PIO_PTCR_RXTEN;
  407a06:	2301      	movs	r3, #1
  407a08:	f8c2 3188 	str.w	r3, [r2, #392]	; 0x188
  407a0c:	e008      	b.n	407a20 <task_camera+0x94>
		return 1;
	} else if (p_pio->PIO_RNCR == 0) {
  407a0e:	4a60      	ldr	r2, [pc, #384]	; (407b90 <task_camera+0x204>)
  407a10:	f8d2 217c 	ldr.w	r2, [r2, #380]	; 0x17c
  407a14:	b922      	cbnz	r2, 407a20 <task_camera+0x94>
		p_pio->PIO_RNPR = (uint32_t)uc_buf;
  407a16:	4a5e      	ldr	r2, [pc, #376]	; (407b90 <task_camera+0x204>)
  407a18:	f8c2 1178 	str.w	r1, [r2, #376]	; 0x178
		p_pio->PIO_RNCR = ul_size;
  407a1c:	f8c2 317c 	str.w	r3, [r2, #380]	; 0x17c
				pio_capture_enable(OV7740_DATA_BUS_PIO);
				/* Capture data and send it to external SRAM memory thanks to PDC feature */
				pio_capture_to_buffer(OV7740_DATA_BUS_PIO, g_p_uc_cap_dest_buf, (g_us_cap_line * g_us_cap_rows) >> 2);

				/* Wait end of capture*/
				while (!((OV7740_DATA_BUS_PIO->PIO_PCISR & PIO_PCIMR_RXBUFF) == PIO_PCIMR_RXBUFF)) {
  407a20:	4b5b      	ldr	r3, [pc, #364]	; (407b90 <task_camera+0x204>)
  407a22:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
  407a26:	f013 0f08 	tst.w	r3, #8
  407a2a:	d0f9      	beq.n	407a20 <task_camera+0x94>
					
				}

				/* Disable pio capture*/
				pio_capture_disable(OV7740_DATA_BUS_PIO);				
  407a2c:	4858      	ldr	r0, [pc, #352]	; (407b90 <task_camera+0x204>)
  407a2e:	4b5c      	ldr	r3, [pc, #368]	; (407ba0 <task_camera+0x214>)
  407a30:	4798      	blx	r3
								
				/* LCD display information*/
				ili9325_fill(COLOR_RED);
  407a32:	f44f 007f 	mov.w	r0, #16711680	; 0xff0000
  407a36:	4b5b      	ldr	r3, [pc, #364]	; (407ba4 <task_camera+0x218>)
  407a38:	4798      	blx	r3
				ili9325_draw_string(0, 20, (uint8_t *)"Picture saved");
  407a3a:	2000      	movs	r0, #0
  407a3c:	2114      	movs	r1, #20
  407a3e:	4a5a      	ldr	r2, [pc, #360]	; (407ba8 <task_camera+0x21c>)
  407a40:	4b5a      	ldr	r3, [pc, #360]	; (407bac <task_camera+0x220>)
  407a42:	4798      	blx	r3
	uint8_t *p_uc_data;
	
	volatile uint8_t *p_y_data;
	volatile uint32_t tempcursor;
	
	p_uc_data = (uint8_t *)g_p_uc_cap_dest_buf;
  407a44:	4b50      	ldr	r3, [pc, #320]	; (407b88 <task_camera+0x1fc>)
  407a46:	681d      	ldr	r5, [r3, #0]

/* Define EBI access for ILI9325 8-bit System Interface.*/
#if defined(BOARD_ILI9325_ADDR) && defined (BOARD_ILI9325_RS)
	static inline void LCD_IR(uint8_t lcd_index)
	{
		*((volatile uint8_t *)(BOARD_ILI9325_ADDR)) = lcd_index; /* ILI9325 index register address */
  407a48:	f04f 43c4 	mov.w	r3, #1644167168	; 0x62000000
  407a4c:	2100      	movs	r1, #0
  407a4e:	7019      	strb	r1, [r3, #0]
  407a50:	2203      	movs	r2, #3
  407a52:	701a      	strb	r2, [r3, #0]
	}
	static inline void LCD_WD(uint8_t lcd_data)
	{
		*((volatile uint8_t *)((BOARD_ILI9325_ADDR) | (BOARD_ILI9325_RS))) = lcd_data;
  407a54:	23d0      	movs	r3, #208	; 0xd0
  407a56:	f888 3000 	strb.w	r3, [r8]
  407a5a:	2388      	movs	r3, #136	; 0x88
  407a5c:	f888 3000 	strb.w	r3, [r8]
			ILI9325_ENTRY_MODE_DFM | ILI9325_ENTRY_MODE_TRI |
			ILI9325_ENTRY_MODE_ORG) >> 8) & 0xFF);
	LCD_WD((ILI9325_ENTRY_MODE_BGR | ILI9325_ENTRY_MODE_AM |
			ILI9325_ENTRY_MODE_DFM | ILI9325_ENTRY_MODE_TRI |
			ILI9325_ENTRY_MODE_ORG) & 0xFF);
	ili9325_draw_prepare(0, 0, IMAGE_HEIGHT, IMAGE_WIDTH);
  407a60:	4608      	mov	r0, r1
  407a62:	22f0      	movs	r2, #240	; 0xf0
  407a64:	f44f 73a0 	mov.w	r3, #320	; 0x140
  407a68:	4c51      	ldr	r4, [pc, #324]	; (407bb0 <task_camera+0x224>)
  407a6a:	47a0      	blx	r4
  407a6c:	1d2c      	adds	r4, r5, #4
	 * To display it on LCD,these pixel need to be converted in RGB format.
	 * The output of this conversion is two 3 bytes pixels in (B,G,R)
	 * format. First one is calculed using Y1,U,V and the other one with
	 * Y2,U,V. For that reason cap_line is twice bigger in color mode
	 * than in black and white mode. */
	for (ul_cursor = IMAGE_WIDTH * IMAGE_HEIGHT; ul_cursor != 0;
  407a6e:	f44f 3696 	mov.w	r6, #76800	; 0x12c00
		l_v -= 128;
		l_u = p_uc_data[1]; /* U */
		l_u -= 128;

		l_blue = 516 * l_v + 128;
		l_green = -100 * l_v - 208 * l_u + 128;
  407a72:	f06f 0a63 	mvn.w	sl, #99	; 0x63
  407a76:	f06f 09cf 	mvn.w	r9, #207	; 0xcf
		l_red = 409 * l_u + 128;
  407a7a:	f240 1c99 	movw	ip, #409	; 0x199

		/* BLUE */
		LCD_WD( clip32_to_8((298 * l_y1 + l_blue) >> 8));
  407a7e:	f44f 7e95 	mov.w	lr, #298	; 0x12a
  407a82:	4620      	mov	r0, r4
	 * format. First one is calculed using Y1,U,V and the other one with
	 * Y2,U,V. For that reason cap_line is twice bigger in color mode
	 * than in black and white mode. */
	for (ul_cursor = IMAGE_WIDTH * IMAGE_HEIGHT; ul_cursor != 0;
			ul_cursor -= 2, p_uc_data += 4, p_y_data += 2) {
		l_y1 = p_uc_data[0]; /* Y1 */
  407a84:	f814 1c04 	ldrb.w	r1, [r4, #-4]
		l_y1 -= 16;
		l_v = p_uc_data[3]; /* V */
  407a88:	f814 3c01 	ldrb.w	r3, [r4, #-1]
		l_v -= 128;
  407a8c:	3b80      	subs	r3, #128	; 0x80
		l_u = p_uc_data[1]; /* U */
  407a8e:	f814 2c03 	ldrb.w	r2, [r4, #-3]
		l_u -= 128;
  407a92:	3a80      	subs	r2, #128	; 0x80

		l_blue = 516 * l_v + 128;
  407a94:	eb03 17c3 	add.w	r7, r3, r3, lsl #7
  407a98:	00bf      	lsls	r7, r7, #2
  407a9a:	3780      	adds	r7, #128	; 0x80
		l_green = -100 * l_v - 208 * l_u + 128;
  407a9c:	fb09 fb02 	mul.w	fp, r9, r2
  407aa0:	fb0a b303 	mla	r3, sl, r3, fp
  407aa4:	3380      	adds	r3, #128	; 0x80
		l_red = 409 * l_u + 128;
  407aa6:	fb0c f202 	mul.w	r2, ip, r2
  407aaa:	f102 0b80 	add.w	fp, r2, #128	; 0x80
	 * Y2,U,V. For that reason cap_line is twice bigger in color mode
	 * than in black and white mode. */
	for (ul_cursor = IMAGE_WIDTH * IMAGE_HEIGHT; ul_cursor != 0;
			ul_cursor -= 2, p_uc_data += 4, p_y_data += 2) {
		l_y1 = p_uc_data[0]; /* Y1 */
		l_y1 -= 16;
  407aae:	3910      	subs	r1, #16
		l_blue = 516 * l_v + 128;
		l_green = -100 * l_v - 208 * l_u + 128;
		l_red = 409 * l_u + 128;

		/* BLUE */
		LCD_WD( clip32_to_8((298 * l_y1 + l_blue) >> 8));
  407ab0:	fb0e f101 	mul.w	r1, lr, r1
  407ab4:	187a      	adds	r2, r7, r1
  407ab6:	1212      	asrs	r2, r2, #8
 * \param i Enter value .
 * \return i if 0<i<255, 0 if i<0 and 255 if i>255
 */
static inline uint8_t clip32_to_8( int32_t i )
{
	if (i > 255) {
  407ab8:	2aff      	cmp	r2, #255	; 0xff
  407aba:	dc03      	bgt.n	407ac4 <task_camera+0x138>
		return 255;
	}

	if (i < 0) {
  407abc:	2a00      	cmp	r2, #0
  407abe:	db03      	blt.n	407ac8 <task_camera+0x13c>
		return 0;
	}

	return (uint8_t)i;
  407ac0:	b2d2      	uxtb	r2, r2
  407ac2:	e002      	b.n	407aca <task_camera+0x13e>
 * \return i if 0<i<255, 0 if i<0 and 255 if i>255
 */
static inline uint8_t clip32_to_8( int32_t i )
{
	if (i > 255) {
		return 255;
  407ac4:	22ff      	movs	r2, #255	; 0xff
  407ac6:	e000      	b.n	407aca <task_camera+0x13e>
	}

	if (i < 0) {
		return 0;
  407ac8:	2200      	movs	r2, #0
  407aca:	f888 2000 	strb.w	r2, [r8]
		l_red = 409 * l_u + 128;

		/* BLUE */
		LCD_WD( clip32_to_8((298 * l_y1 + l_blue) >> 8));
		/* GREEN */
		LCD_WD( clip32_to_8((298 * l_y1 + l_green) >> 8));
  407ace:	185a      	adds	r2, r3, r1
  407ad0:	1212      	asrs	r2, r2, #8
 * \param i Enter value .
 * \return i if 0<i<255, 0 if i<0 and 255 if i>255
 */
static inline uint8_t clip32_to_8( int32_t i )
{
	if (i > 255) {
  407ad2:	2aff      	cmp	r2, #255	; 0xff
  407ad4:	dc03      	bgt.n	407ade <task_camera+0x152>
		return 255;
	}

	if (i < 0) {
  407ad6:	2a00      	cmp	r2, #0
  407ad8:	db03      	blt.n	407ae2 <task_camera+0x156>
		return 0;
	}

	return (uint8_t)i;
  407ada:	b2d2      	uxtb	r2, r2
  407adc:	e002      	b.n	407ae4 <task_camera+0x158>
 * \return i if 0<i<255, 0 if i<0 and 255 if i>255
 */
static inline uint8_t clip32_to_8( int32_t i )
{
	if (i > 255) {
		return 255;
  407ade:	22ff      	movs	r2, #255	; 0xff
  407ae0:	e000      	b.n	407ae4 <task_camera+0x158>
	}

	if (i < 0) {
		return 0;
  407ae2:	2200      	movs	r2, #0
  407ae4:	f888 2000 	strb.w	r2, [r8]
		/* BLUE */
		LCD_WD( clip32_to_8((298 * l_y1 + l_blue) >> 8));
		/* GREEN */
		LCD_WD( clip32_to_8((298 * l_y1 + l_green) >> 8));
		/* RED */
		LCD_WD( clip32_to_8((298 * l_y1 + l_red) >> 8));
  407ae8:	4459      	add	r1, fp
  407aea:	1209      	asrs	r1, r1, #8
 * \param i Enter value .
 * \return i if 0<i<255, 0 if i<0 and 255 if i>255
 */
static inline uint8_t clip32_to_8( int32_t i )
{
	if (i > 255) {
  407aec:	29ff      	cmp	r1, #255	; 0xff
  407aee:	dc03      	bgt.n	407af8 <task_camera+0x16c>
		return 255;
	}

	if (i < 0) {
  407af0:	2900      	cmp	r1, #0
  407af2:	db03      	blt.n	407afc <task_camera+0x170>
		return 0;
	}

	return (uint8_t)i;
  407af4:	b2c9      	uxtb	r1, r1
  407af6:	e002      	b.n	407afe <task_camera+0x172>
 * \return i if 0<i<255, 0 if i<0 and 255 if i>255
 */
static inline uint8_t clip32_to_8( int32_t i )
{
	if (i > 255) {
		return 255;
  407af8:	21ff      	movs	r1, #255	; 0xff
  407afa:	e000      	b.n	407afe <task_camera+0x172>
	}

	if (i < 0) {
		return 0;
  407afc:	2100      	movs	r1, #0
  407afe:	f888 1000 	strb.w	r1, [r8]
		/* GREEN */
		LCD_WD( clip32_to_8((298 * l_y1 + l_green) >> 8));
		/* RED */
		LCD_WD( clip32_to_8((298 * l_y1 + l_red) >> 8));

		l_y2 = p_uc_data[2]; /* Y2 */
  407b02:	f810 2c02 	ldrb.w	r2, [r0, #-2]
		l_y2 -= 16;
  407b06:	3a10      	subs	r2, #16
		LCD_WD( clip32_to_8((298 * l_y2 + l_blue) >> 8));
  407b08:	fb0e f202 	mul.w	r2, lr, r2
  407b0c:	4417      	add	r7, r2
  407b0e:	123f      	asrs	r7, r7, #8
 * \param i Enter value .
 * \return i if 0<i<255, 0 if i<0 and 255 if i>255
 */
static inline uint8_t clip32_to_8( int32_t i )
{
	if (i > 255) {
  407b10:	2fff      	cmp	r7, #255	; 0xff
  407b12:	dc03      	bgt.n	407b1c <task_camera+0x190>
		return 255;
	}

	if (i < 0) {
  407b14:	2f00      	cmp	r7, #0
  407b16:	db03      	blt.n	407b20 <task_camera+0x194>
		return 0;
	}

	return (uint8_t)i;
  407b18:	b2ff      	uxtb	r7, r7
  407b1a:	e002      	b.n	407b22 <task_camera+0x196>
 * \return i if 0<i<255, 0 if i<0 and 255 if i>255
 */
static inline uint8_t clip32_to_8( int32_t i )
{
	if (i > 255) {
		return 255;
  407b1c:	27ff      	movs	r7, #255	; 0xff
  407b1e:	e000      	b.n	407b22 <task_camera+0x196>
	}

	if (i < 0) {
		return 0;
  407b20:	2700      	movs	r7, #0
  407b22:	f888 7000 	strb.w	r7, [r8]
		LCD_WD( clip32_to_8((298 * l_y1 + l_red) >> 8));

		l_y2 = p_uc_data[2]; /* Y2 */
		l_y2 -= 16;
		LCD_WD( clip32_to_8((298 * l_y2 + l_blue) >> 8));
		LCD_WD( clip32_to_8((298 * l_y2 + l_green) >> 8));
  407b26:	4413      	add	r3, r2
  407b28:	121b      	asrs	r3, r3, #8
 * \param i Enter value .
 * \return i if 0<i<255, 0 if i<0 and 255 if i>255
 */
static inline uint8_t clip32_to_8( int32_t i )
{
	if (i > 255) {
  407b2a:	2bff      	cmp	r3, #255	; 0xff
  407b2c:	dc03      	bgt.n	407b36 <task_camera+0x1aa>
		return 255;
	}

	if (i < 0) {
  407b2e:	2b00      	cmp	r3, #0
  407b30:	db03      	blt.n	407b3a <task_camera+0x1ae>
		return 0;
	}

	return (uint8_t)i;
  407b32:	b2db      	uxtb	r3, r3
  407b34:	e002      	b.n	407b3c <task_camera+0x1b0>
 * \return i if 0<i<255, 0 if i<0 and 255 if i>255
 */
static inline uint8_t clip32_to_8( int32_t i )
{
	if (i > 255) {
		return 255;
  407b36:	23ff      	movs	r3, #255	; 0xff
  407b38:	e000      	b.n	407b3c <task_camera+0x1b0>
	}

	if (i < 0) {
		return 0;
  407b3a:	2300      	movs	r3, #0
  407b3c:	f888 3000 	strb.w	r3, [r8]

		l_y2 = p_uc_data[2]; /* Y2 */
		l_y2 -= 16;
		LCD_WD( clip32_to_8((298 * l_y2 + l_blue) >> 8));
		LCD_WD( clip32_to_8((298 * l_y2 + l_green) >> 8));
		LCD_WD( clip32_to_8((298 * l_y2 + l_red) >> 8));				
  407b40:	445a      	add	r2, fp
  407b42:	1212      	asrs	r2, r2, #8
 * \param i Enter value .
 * \return i if 0<i<255, 0 if i<0 and 255 if i>255
 */
static inline uint8_t clip32_to_8( int32_t i )
{
	if (i > 255) {
  407b44:	2aff      	cmp	r2, #255	; 0xff
  407b46:	dc03      	bgt.n	407b50 <task_camera+0x1c4>
		return 255;
	}

	if (i < 0) {
  407b48:	2a00      	cmp	r2, #0
  407b4a:	db03      	blt.n	407b54 <task_camera+0x1c8>
		return 0;
	}

	return (uint8_t)i;
  407b4c:	b2d2      	uxtb	r2, r2
  407b4e:	e002      	b.n	407b56 <task_camera+0x1ca>
 * \return i if 0<i<255, 0 if i<0 and 255 if i>255
 */
static inline uint8_t clip32_to_8( int32_t i )
{
	if (i > 255) {
		return 255;
  407b50:	22ff      	movs	r2, #255	; 0xff
  407b52:	e000      	b.n	407b56 <task_camera+0x1ca>
	}

	if (i < 0) {
		return 0;
  407b54:	2200      	movs	r2, #0
  407b56:	f888 2000 	strb.w	r2, [r8]
		l_y2 -= 16;
		LCD_WD( clip32_to_8((298 * l_y2 + l_blue) >> 8));
		LCD_WD( clip32_to_8((298 * l_y2 + l_green) >> 8));
		LCD_WD( clip32_to_8((298 * l_y2 + l_red) >> 8));				
		
		p_y_data[0] = p_uc_data[0];		//	Y1
  407b5a:	f810 3c04 	ldrb.w	r3, [r0, #-4]
  407b5e:	702b      	strb	r3, [r5, #0]
		p_y_data[1] = p_uc_data[2];		//	Y2
  407b60:	f810 3c02 	ldrb.w	r3, [r0, #-2]
  407b64:	706b      	strb	r3, [r5, #1]
		
		tempcursor = ul_cursor;
  407b66:	9601      	str	r6, [sp, #4]
	 * The output of this conversion is two 3 bytes pixels in (B,G,R)
	 * format. First one is calculed using Y1,U,V and the other one with
	 * Y2,U,V. For that reason cap_line is twice bigger in color mode
	 * than in black and white mode. */
	for (ul_cursor = IMAGE_WIDTH * IMAGE_HEIGHT; ul_cursor != 0;
			ul_cursor -= 2, p_uc_data += 4, p_y_data += 2) {
  407b68:	3502      	adds	r5, #2
  407b6a:	3404      	adds	r4, #4
	 * To display it on LCD,these pixel need to be converted in RGB format.
	 * The output of this conversion is two 3 bytes pixels in (B,G,R)
	 * format. First one is calculed using Y1,U,V and the other one with
	 * Y2,U,V. For that reason cap_line is twice bigger in color mode
	 * than in black and white mode. */
	for (ul_cursor = IMAGE_WIDTH * IMAGE_HEIGHT; ul_cursor != 0;
  407b6c:	3e02      	subs	r6, #2
  407b6e:	d188      	bne.n	407a82 <task_camera+0xf6>
		p_y_data[0] = p_uc_data[0];		//	Y1
		p_y_data[1] = p_uc_data[2];		//	Y2
		
		tempcursor = ul_cursor;
	}
	task_zbar();
  407b70:	4b10      	ldr	r3, [pc, #64]	; (407bb4 <task_camera+0x228>)
  407b72:	4798      	blx	r3
			
			}
			
		}
		
		vTaskDelay(10 / portTICK_RATE_MS);
  407b74:	200a      	movs	r0, #10
  407b76:	4b10      	ldr	r3, [pc, #64]	; (407bb8 <task_camera+0x22c>)
  407b78:	4798      	blx	r3
	}
  407b7a:	e713      	b.n	4079a4 <task_camera+0x18>
  407b7c:	00401be9 	.word	0x00401be9
  407b80:	2000ae80 	.word	0x2000ae80
  407b84:	00401f45 	.word	0x00401f45
  407b88:	2000aecc 	.word	0x2000aecc
  407b8c:	20000014 	.word	0x20000014
  407b90:	400e0e00 	.word	0x400e0e00
  407b94:	00400bad 	.word	0x00400bad
  407b98:	00400d2d 	.word	0x00400d2d
  407b9c:	20000016 	.word	0x20000016
  407ba0:	00400d45 	.word	0x00400d45
  407ba4:	004008fd 	.word	0x004008fd
  407ba8:	00411af4 	.word	0x00411af4
  407bac:	00400995 	.word	0x00400995
  407bb0:	0040096d 	.word	0x0040096d
  407bb4:	004078ad 	.word	0x004078ad
  407bb8:	00402651 	.word	0x00402651
  407bbc:	62000002 	.word	0x62000002

00407bc0 <vApplicationMallocFailedHook>:
	heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
	FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
	to query the size of free heap space that remains (although it does not
	provide information on how the remaining heap might be fragmented). */
//	taskDISABLE_INTERRUPTS();
	for( ;; );
  407bc0:	e7fe      	b.n	407bc0 <vApplicationMallocFailedHook>
  407bc2:	bf00      	nop

00407bc4 <vApplicationStackOverflowHook>:
/**
 * \brief Called if stack overflow during execution
 */
extern void vApplicationStackOverflowHook(xTaskHandle *pxTask,
		signed char *pcTaskName)
{
  407bc4:	b508      	push	{r3, lr}
	//printf("stack overflow %x %s\r\n", pxTask, (portCHAR *)pcTaskName);
	/* If the parameters have been corrupted then inspect pxCurrentTCB to
	 * identify which task has overflowed its stack.
	 */
	LED_On(LED0_GPIO);
  407bc6:	204c      	movs	r0, #76	; 0x4c
  407bc8:	4b01      	ldr	r3, [pc, #4]	; (407bd0 <vApplicationStackOverflowHook+0xc>)
  407bca:	4798      	blx	r3
	for (;;) {
	}
  407bcc:	e7fe      	b.n	407bcc <vApplicationStackOverflowHook+0x8>
  407bce:	bf00      	nop
  407bd0:	00400bd1 	.word	0x00400bd1

00407bd4 <vApplicationIdleHook>:

/**
 * \brief This function is called by FreeRTOS idle task
 */
extern void vApplicationIdleHook(void)
{
  407bd4:	4770      	bx	lr
  407bd6:	bf00      	nop

00407bd8 <vApplicationTickHook>:

/**
 * \brief This function is called by FreeRTOS each tick
 */
extern void vApplicationTickHook(void)
{
  407bd8:	4770      	bx	lr
  407bda:	bf00      	nop

00407bdc <main>:
 * \brief Application entry point for image sensor capture example.
 *
 * \return Unused (ANSI-C compatibility).
 */
int main(void)
{
  407bdc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  407be0:	b089      	sub	sp, #36	; 0x24
	sysclk_init();
  407be2:	4b96      	ldr	r3, [pc, #600]	; (407e3c <main+0x260>)
  407be4:	4798      	blx	r3
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07);               /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  407be6:	4a96      	ldr	r2, [pc, #600]	; (407e40 <main+0x264>)
  407be8:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk);             /* clear bits to change               */
  407bea:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
  407bee:	041b      	lsls	r3, r3, #16
  407bf0:	0c1b      	lsrs	r3, r3, #16
  reg_value  =  (reg_value                                 |
  407bf2:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  407bf6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
                ((uint32_t)0x5FA << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8));                                     /* Insert write key and priorty group */
  SCB->AIRCR =  reg_value;
  407bfa:	60d3      	str	r3, [r2, #12]
	NVIC_SetPriorityGrouping( 0 );
	board_init();
  407bfc:	4b91      	ldr	r3, [pc, #580]	; (407e44 <main+0x268>)
  407bfe:	4798      	blx	r3

	/* OV7740 send image sensor data at 24 Mhz. For best performances, PCK0
	 * which will capture OV7740 data, has to work at 24Mhz. It's easier and
	 * optimum to use one PLL for core (PLLB) and one other for PCK0 (PLLA).
	 */
	pmc_enable_pllack(7, 0x1, 1); /* PLLA work at 96 Mhz */
  407c00:	2007      	movs	r0, #7
  407c02:	2101      	movs	r1, #1
  407c04:	460a      	mov	r2, r1
  407c06:	4b90      	ldr	r3, [pc, #576]	; (407e48 <main+0x26c>)
  407c08:	4798      	blx	r3
static void display_init(void)
{
	struct ili9325_opt_t ili9325_display_opt;

	/* Enable peripheral clock */
	pmc_enable_periph_clk( ID_SMC );
  407c0a:	200a      	movs	r0, #10
  407c0c:	4e8f      	ldr	r6, [pc, #572]	; (407e4c <main+0x270>)
  407c0e:	47b0      	blx	r6

	/* Configure SMC interface for LCD */
	smc_set_setup_timing(SMC, ILI9325_LCD_CS, SMC_SETUP_NWE_SETUP(2)
  407c10:	488f      	ldr	r0, [pc, #572]	; (407e50 <main+0x274>)
  407c12:	2102      	movs	r1, #2
  407c14:	f04f 3202 	mov.w	r2, #33686018	; 0x2020202
  407c18:	f8df a2f4 	ldr.w	sl, [pc, #756]	; 407f10 <main+0x334>
  407c1c:	47d0      	blx	sl
			| SMC_SETUP_NCS_WR_SETUP(2)
			| SMC_SETUP_NRD_SETUP(2)
			| SMC_SETUP_NCS_RD_SETUP(2));

	smc_set_pulse_timing(SMC, ILI9325_LCD_CS, SMC_PULSE_NWE_PULSE(4)
  407c1e:	488c      	ldr	r0, [pc, #560]	; (407e50 <main+0x274>)
  407c20:	2102      	movs	r1, #2
  407c22:	4a8c      	ldr	r2, [pc, #560]	; (407e54 <main+0x278>)
  407c24:	f8df 92ec 	ldr.w	r9, [pc, #748]	; 407f14 <main+0x338>
  407c28:	47c8      	blx	r9
			| SMC_PULSE_NCS_WR_PULSE(4)
			| SMC_PULSE_NRD_PULSE(10)
			| SMC_PULSE_NCS_RD_PULSE(10));

	smc_set_cycle_timing(SMC, ILI9325_LCD_CS, SMC_CYCLE_NWE_CYCLE(10)
  407c2a:	4889      	ldr	r0, [pc, #548]	; (407e50 <main+0x274>)
  407c2c:	2102      	movs	r1, #2
  407c2e:	4a8a      	ldr	r2, [pc, #552]	; (407e58 <main+0x27c>)
  407c30:	f8df 82e4 	ldr.w	r8, [pc, #740]	; 407f18 <main+0x33c>
  407c34:	47c0      	blx	r8
			| SMC_CYCLE_NRD_CYCLE(22));

	smc_set_mode(SMC, ILI9325_LCD_CS, SMC_MODE_READ_MODE
  407c36:	4886      	ldr	r0, [pc, #536]	; (407e50 <main+0x274>)
  407c38:	2102      	movs	r1, #2
  407c3a:	2203      	movs	r2, #3
  407c3c:	4c87      	ldr	r4, [pc, #540]	; (407e5c <main+0x280>)
  407c3e:	47a0      	blx	r4
			| SMC_MODE_WRITE_MODE);

	/* Initialize display parameter */
	ili9325_display_opt.ul_width = ILI9325_LCD_WIDTH;
  407c40:	27f0      	movs	r7, #240	; 0xf0
  407c42:	9704      	str	r7, [sp, #16]
	ili9325_display_opt.ul_height = ILI9325_LCD_HEIGHT;
  407c44:	f44f 73a0 	mov.w	r3, #320	; 0x140
  407c48:	9305      	str	r3, [sp, #20]
	ili9325_display_opt.foreground_color = COLOR_BLACK;
  407c4a:	2500      	movs	r5, #0
  407c4c:	9506      	str	r5, [sp, #24]
	ili9325_display_opt.background_color = COLOR_WHITE;
  407c4e:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
  407c52:	9307      	str	r3, [sp, #28]

	/* Switch off backlight */
	aat31xx_disable_backlight();
  407c54:	4b82      	ldr	r3, [pc, #520]	; (407e60 <main+0x284>)
  407c56:	4798      	blx	r3

	/* Initialize LCD */
	ili9325_init(&ili9325_display_opt);
  407c58:	a804      	add	r0, sp, #16
  407c5a:	4b82      	ldr	r3, [pc, #520]	; (407e64 <main+0x288>)
  407c5c:	4798      	blx	r3

	/* Set backlight level */
	aat31xx_set_backlight(AAT31XX_MAX_BACKLIGHT_LEVEL);
  407c5e:	2010      	movs	r0, #16
  407c60:	4b81      	ldr	r3, [pc, #516]	; (407e68 <main+0x28c>)
  407c62:	4798      	blx	r3

	/* Turn on LCD */
	ili9325_display_on();
  407c64:	4b81      	ldr	r3, [pc, #516]	; (407e6c <main+0x290>)
  407c66:	4798      	blx	r3

	/* LCD display initialization */
	display_init();

	/* LCD display information */
	ili9325_fill(COLOR_TURQUOISE);
  407c68:	4881      	ldr	r0, [pc, #516]	; (407e70 <main+0x294>)
  407c6a:	4b82      	ldr	r3, [pc, #520]	; (407e74 <main+0x298>)
  407c6c:	4798      	blx	r3
	ili9325_draw_string(0, 20,
  407c6e:	4628      	mov	r0, r5
  407c70:	2114      	movs	r1, #20
  407c72:	4a81      	ldr	r2, [pc, #516]	; (407e78 <main+0x29c>)
  407c74:	f8df b258 	ldr.w	fp, [pc, #600]	; 407ed0 <main+0x2f4>
  407c78:	47d8      	blx	fp
			(uint8_t *)"OV7740 image sensor\ncapture example");
	ili9325_draw_string(0, 80,
  407c7a:	4628      	mov	r0, r5
  407c7c:	2150      	movs	r1, #80	; 0x50
  407c7e:	4a7f      	ldr	r2, [pc, #508]	; (407e7c <main+0x2a0>)
  407c80:	47d8      	blx	fp
 * \brief Configure SMC interface for SRAM.
 */
static void board_configure_sram( void )
{
	/* Enable peripheral clock */
	pmc_enable_periph_clk( ID_SMC );
  407c82:	200a      	movs	r0, #10
  407c84:	47b0      	blx	r6

	/* Configure SMC interface for SRAM */
	smc_set_setup_timing(SMC, SRAM_CS, SMC_SETUP_NWE_SETUP(2)
  407c86:	4872      	ldr	r0, [pc, #456]	; (407e50 <main+0x274>)
  407c88:	4629      	mov	r1, r5
  407c8a:	4a7d      	ldr	r2, [pc, #500]	; (407e80 <main+0x2a4>)
  407c8c:	47d0      	blx	sl
			| SMC_SETUP_NCS_WR_SETUP(0)
			| SMC_SETUP_NRD_SETUP(3)
			| SMC_SETUP_NCS_RD_SETUP(0));

	smc_set_pulse_timing(SMC, SRAM_CS, SMC_PULSE_NWE_PULSE(4)
  407c8e:	4870      	ldr	r0, [pc, #448]	; (407e50 <main+0x274>)
  407c90:	4629      	mov	r1, r5
  407c92:	4a7c      	ldr	r2, [pc, #496]	; (407e84 <main+0x2a8>)
  407c94:	47c8      	blx	r9
			| SMC_PULSE_NCS_WR_PULSE(5)
			| SMC_PULSE_NRD_PULSE(4)
			| SMC_PULSE_NCS_RD_PULSE(6));

	smc_set_cycle_timing(SMC, SRAM_CS, SMC_CYCLE_NWE_CYCLE(6)
  407c96:	486e      	ldr	r0, [pc, #440]	; (407e50 <main+0x274>)
  407c98:	4629      	mov	r1, r5
  407c9a:	4a7b      	ldr	r2, [pc, #492]	; (407e88 <main+0x2ac>)
  407c9c:	47c0      	blx	r8
			| SMC_CYCLE_NRD_CYCLE(7));

	smc_set_mode(SMC, SRAM_CS, SMC_MODE_READ_MODE
  407c9e:	486c      	ldr	r0, [pc, #432]	; (407e50 <main+0x274>)
  407ca0:	4629      	mov	r1, r5
  407ca2:	2203      	movs	r2, #3
  407ca4:	47a0      	blx	r4
 * \brief Configure push button and initialize button_handler interrupt.
 */
static void configure_button(void)
{
	/* Configure PIO clock. */
	pmc_enable_periph_clk(PUSH_BUTTON_ID);
  407ca6:	200b      	movs	r0, #11
  407ca8:	47b0      	blx	r6

	/* Adjust PIO debounce filter using a 10 Hz filter. */
	pio_set_debounce_filter(PUSH_BUTTON_PIO, PUSH_BUTTON_PIN_MSK, 10);
  407caa:	4c78      	ldr	r4, [pc, #480]	; (407e8c <main+0x2b0>)
  407cac:	4620      	mov	r0, r4
  407cae:	2104      	movs	r1, #4
  407cb0:	220a      	movs	r2, #10
  407cb2:	4b77      	ldr	r3, [pc, #476]	; (407e90 <main+0x2b4>)
  407cb4:	4798      	blx	r3

	/* Initialize PIO interrupt handler, see PIO definition in conf_board.h
	**/
	pio_handler_set(PUSH_BUTTON_PIO, PUSH_BUTTON_ID, PUSH_BUTTON_PIN_MSK,
  407cb6:	4b77      	ldr	r3, [pc, #476]	; (407e94 <main+0x2b8>)
  407cb8:	9300      	str	r3, [sp, #0]
  407cba:	4620      	mov	r0, r4
  407cbc:	210b      	movs	r1, #11
  407cbe:	2204      	movs	r2, #4
  407cc0:	2379      	movs	r3, #121	; 0x79
  407cc2:	f8df 9258 	ldr.w	r9, [pc, #600]	; 407f1c <main+0x340>
  407cc6:	47c8      	blx	r9
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
  407cc8:	4d73      	ldr	r5, [pc, #460]	; (407e98 <main+0x2bc>)
  407cca:	f885 730b 	strb.w	r7, [r5, #779]	; 0x30b
    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
/*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  407cce:	f44f 6800 	mov.w	r8, #2048	; 0x800
  407cd2:	f8c5 8000 	str.w	r8, [r5]

	/* Enable PIO controller IRQs. */
	NVIC_EnableIRQ((IRQn_Type)PUSH_BUTTON_ID);
	
	/* Enable PIO interrupt lines. */
	pio_enable_interrupt(PUSH_BUTTON_PIO, PUSH_BUTTON_PIN_MSK);
  407cd6:	4620      	mov	r0, r4
  407cd8:	2104      	movs	r1, #4
  407cda:	4b70      	ldr	r3, [pc, #448]	; (407e9c <main+0x2c0>)
  407cdc:	4798      	blx	r3
 */
static void init_vsync_interrupts(void)
{
	/* Initialize PIO interrupt handler, see PIO definition in conf_board.h
	**/
	pio_handler_set(OV7740_VSYNC_PIO, OV7740_VSYNC_ID, OV7740_VSYNC_MASK,
  407cde:	4b70      	ldr	r3, [pc, #448]	; (407ea0 <main+0x2c4>)
  407ce0:	9300      	str	r3, [sp, #0]
  407ce2:	4620      	mov	r0, r4
  407ce4:	210b      	movs	r1, #11
  407ce6:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  407cea:	2301      	movs	r3, #1
  407cec:	47c8      	blx	r9
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
  407cee:	f885 730b 	strb.w	r7, [r5, #779]	; 0x30b
    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
/*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  407cf2:	f8c5 8000 	str.w	r8, [r5]
 * \param ul_id Corresponding PIO ID.
 */
static void pio_capture_init(Pio *p_pio, uint32_t ul_id)
{
	/* Enable periphral clock */
	pmc_enable_periph_clk(ul_id);
  407cf6:	200b      	movs	r0, #11
  407cf8:	47b0      	blx	r6

	/* Disable pio capture */
	p_pio->PIO_PCMR &= ~((uint32_t)PIO_PCMR_PCEN);
  407cfa:	f8d4 3150 	ldr.w	r3, [r4, #336]	; 0x150
  407cfe:	f023 0301 	bic.w	r3, r3, #1
  407d02:	f8c4 3150 	str.w	r3, [r4, #336]	; 0x150

	/* Disable rxbuff interrupt */
	p_pio->PIO_PCIDR |= PIO_PCIDR_RXBUFF;
  407d06:	f8d4 3158 	ldr.w	r3, [r4, #344]	; 0x158
  407d0a:	f043 0308 	orr.w	r3, r3, #8
  407d0e:	f8c4 3158 	str.w	r3, [r4, #344]	; 0x158

	/* 32bit width*/
	p_pio->PIO_PCMR &= ~((uint32_t)PIO_PCMR_DSIZE_Msk);
  407d12:	f8d4 3150 	ldr.w	r3, [r4, #336]	; 0x150
  407d16:	f023 0330 	bic.w	r3, r3, #48	; 0x30
  407d1a:	f8c4 3150 	str.w	r3, [r4, #336]	; 0x150
	p_pio->PIO_PCMR |= PIO_PCMR_DSIZE_WORD;
  407d1e:	f8d4 3150 	ldr.w	r3, [r4, #336]	; 0x150
  407d22:	f043 0320 	orr.w	r3, r3, #32
  407d26:	f8c4 3150 	str.w	r3, [r4, #336]	; 0x150

	/* Only HSYNC and VSYNC enabled */
	p_pio->PIO_PCMR &= ~((uint32_t)PIO_PCMR_ALWYS);
  407d2a:	f8d4 3150 	ldr.w	r3, [r4, #336]	; 0x150
  407d2e:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  407d32:	f8c4 3150 	str.w	r3, [r4, #336]	; 0x150
	p_pio->PIO_PCMR &= ~((uint32_t)PIO_PCMR_HALFS);
  407d36:	f8d4 3150 	ldr.w	r3, [r4, #336]	; 0x150
  407d3a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
  407d3e:	f8c4 3150 	str.w	r3, [r4, #336]	; 0x150

	/* Init PIO capture*/
	pio_capture_init(OV_DATA_BUS_PIO, OV_DATA_BUS_ID);

	/* Turn on ov7740 image sensor using power pin */
	ov_power(true, OV_POWER_PIO, OV_POWER_MASK);
  407d42:	2001      	movs	r0, #1
  407d44:	4957      	ldr	r1, [pc, #348]	; (407ea4 <main+0x2c8>)
  407d46:	f44f 6280 	mov.w	r2, #1024	; 0x400
  407d4a:	4b57      	ldr	r3, [pc, #348]	; (407ea8 <main+0x2cc>)
  407d4c:	4798      	blx	r3

	/* Init PCK0 to work at 24 Mhz */
	/* 96/4=24 Mhz */
	PMC->PMC_PCK[0] = (PMC_PCK_PRES_CLK_4 | PMC_PCK_CSS_PLLA_CLK);
  407d4e:	4b57      	ldr	r3, [pc, #348]	; (407eac <main+0x2d0>)
  407d50:	2222      	movs	r2, #34	; 0x22
  407d52:	641a      	str	r2, [r3, #64]	; 0x40
	PMC->PMC_SCER = PMC_SCER_PCK0;
  407d54:	f44f 7280 	mov.w	r2, #256	; 0x100
  407d58:	601a      	str	r2, [r3, #0]
	while (!(PMC->PMC_SCSR & PMC_SCSR_PCK0)) {
  407d5a:	461a      	mov	r2, r3
  407d5c:	6893      	ldr	r3, [r2, #8]
  407d5e:	f413 7f80 	tst.w	r3, #256	; 0x100
  407d62:	d0fb      	beq.n	407d5c <main+0x180>
	}

	/* Enable TWI peripheral */
	pmc_enable_periph_clk(ID_BOARD_TWI);
  407d64:	2013      	movs	r0, #19
  407d66:	4b39      	ldr	r3, [pc, #228]	; (407e4c <main+0x270>)
  407d68:	4798      	blx	r3

	/* Init TWI peripheral */
	opt.master_clk = sysclk_get_cpu_hz();
  407d6a:	4b51      	ldr	r3, [pc, #324]	; (407eb0 <main+0x2d4>)
  407d6c:	9304      	str	r3, [sp, #16]
	opt.speed      = TWI_CLK;
  407d6e:	4b51      	ldr	r3, [pc, #324]	; (407eb4 <main+0x2d8>)
  407d70:	9305      	str	r3, [sp, #20]
	twi_master_init(BOARD_TWI, &opt);
  407d72:	4851      	ldr	r0, [pc, #324]	; (407eb8 <main+0x2dc>)
  407d74:	a904      	add	r1, sp, #16
  407d76:	4b51      	ldr	r3, [pc, #324]	; (407ebc <main+0x2e0>)
  407d78:	4798      	blx	r3

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
  407d7a:	4b47      	ldr	r3, [pc, #284]	; (407e98 <main+0x2bc>)
  407d7c:	f44f 2200 	mov.w	r2, #524288	; 0x80000
  407d80:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
  407d84:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
  407d88:	2100      	movs	r1, #0
  407d8a:	f883 1313 	strb.w	r1, [r3, #787]	; 0x313
    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
/*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  407d8e:	601a      	str	r2, [r3, #0]
	NVIC_ClearPendingIRQ(BOARD_TWI_IRQn);
	NVIC_SetPriority(BOARD_TWI_IRQn, 0);
	NVIC_EnableIRQ(BOARD_TWI_IRQn);

	/* ov7740 Initialization */
	while (ov_init(BOARD_TWI) == 1) {
  407d90:	4d49      	ldr	r5, [pc, #292]	; (407eb8 <main+0x2dc>)
  407d92:	4c4b      	ldr	r4, [pc, #300]	; (407ec0 <main+0x2e4>)
  407d94:	4628      	mov	r0, r5
  407d96:	47a0      	blx	r4
  407d98:	2801      	cmp	r0, #1
  407d9a:	d0fb      	beq.n	407d94 <main+0x1b8>
	}

	/* ov7740 configuration */
	ov_configure(BOARD_TWI, QVGA_YUV422_20FPS);
  407d9c:	4846      	ldr	r0, [pc, #280]	; (407eb8 <main+0x2dc>)
  407d9e:	2102      	movs	r1, #2
  407da0:	4b48      	ldr	r3, [pc, #288]	; (407ec4 <main+0x2e8>)
  407da2:	4798      	blx	r3

	/* Wait 3 seconds to let the image sensor to adapt to environment */
	delay_ms(3000);
  407da4:	4848      	ldr	r0, [pc, #288]	; (407ec8 <main+0x2ec>)
  407da6:	4c49      	ldr	r4, [pc, #292]	; (407ecc <main+0x2f0>)
  407da8:	47a0      	blx	r4

	/* OV7740 image sensor initialization*/
	capture_init();

	/* LCD display information*/
	ili9325_fill(COLOR_TURQUOISE);
  407daa:	4831      	ldr	r0, [pc, #196]	; (407e70 <main+0x294>)
  407dac:	4b31      	ldr	r3, [pc, #196]	; (407e74 <main+0x298>)
  407dae:	4798      	blx	r3
	ili9325_draw_string(0, 20,
  407db0:	2000      	movs	r0, #0
  407db2:	2114      	movs	r1, #20
  407db4:	4a30      	ldr	r2, [pc, #192]	; (407e78 <main+0x29c>)
  407db6:	4d46      	ldr	r5, [pc, #280]	; (407ed0 <main+0x2f4>)
  407db8:	47a8      	blx	r5
			(uint8_t *)"OV7740 image sensor\ncapture example");
	ili9325_draw_string(0, 80,
  407dba:	2000      	movs	r0, #0
  407dbc:	2150      	movs	r1, #80	; 0x50
  407dbe:	4a45      	ldr	r2, [pc, #276]	; (407ed4 <main+0x2f8>)
  407dc0:	47a8      	blx	r5
			(uint8_t *)"Please Press button\nto take and display\na picture");

	LED_On(LED0_GPIO);
  407dc2:	204c      	movs	r0, #76	; 0x4c
  407dc4:	4d44      	ldr	r5, [pc, #272]	; (407ed8 <main+0x2fc>)
  407dc6:	47a8      	blx	r5
	delay_ms(2000);
  407dc8:	4844      	ldr	r0, [pc, #272]	; (407edc <main+0x300>)
  407dca:	47a0      	blx	r4
	LED_Off(LED0_GPIO);
  407dcc:	204c      	movs	r0, #76	; 0x4c
  407dce:	4b44      	ldr	r3, [pc, #272]	; (407ee0 <main+0x304>)
  407dd0:	4798      	blx	r3
	delay_ms(1000);
  407dd2:	4844      	ldr	r0, [pc, #272]	; (407ee4 <main+0x308>)
  407dd4:	47a0      	blx	r4
	LED_On(LED0_GPIO);
  407dd6:	204c      	movs	r0, #76	; 0x4c
  407dd8:	47a8      	blx	r5
	}*/

//~~~~~~~ FreeRTOS specific init ~~~~~~~~~~~~~~~~~~~

	/* Create task to make led blink */
	if (xTaskCreate(task_led, "Led", TASK_LED_STACK_SIZE, NULL,
  407dda:	2400      	movs	r4, #0
  407ddc:	9400      	str	r4, [sp, #0]
  407dde:	9401      	str	r4, [sp, #4]
  407de0:	9402      	str	r4, [sp, #8]
  407de2:	9403      	str	r4, [sp, #12]
  407de4:	4840      	ldr	r0, [pc, #256]	; (407ee8 <main+0x30c>)
  407de6:	4941      	ldr	r1, [pc, #260]	; (407eec <main+0x310>)
  407de8:	f44f 7280 	mov.w	r2, #256	; 0x100
  407dec:	4623      	mov	r3, r4
  407dee:	4d40      	ldr	r5, [pc, #256]	; (407ef0 <main+0x314>)
  407df0:	47a8      	blx	r5
	TASK_LED_STACK_PRIORITY, NULL) != pdPASS) {
		//printf("Failed to create test led task\r\n");
	}

	/* Create task to make led blink */
	if (xTaskCreate(task_lcdscreen, "LCD", TASK_LED_STACK_SIZE, NULL,
  407df2:	9400      	str	r4, [sp, #0]
  407df4:	9401      	str	r4, [sp, #4]
  407df6:	9402      	str	r4, [sp, #8]
  407df8:	9403      	str	r4, [sp, #12]
  407dfa:	483e      	ldr	r0, [pc, #248]	; (407ef4 <main+0x318>)
  407dfc:	493e      	ldr	r1, [pc, #248]	; (407ef8 <main+0x31c>)
  407dfe:	f44f 7280 	mov.w	r2, #256	; 0x100
  407e02:	4623      	mov	r3, r4
  407e04:	47a8      	blx	r5
	TASK_LED_STACK_PRIORITY, NULL) != pdPASS) {
		//printf("Failed to create test led task\r\n");
	}

	/* Create task to make led blink */
	if (xTaskCreate(task_display, "Display", TASK_LED_STACK_SIZE, NULL,
  407e06:	9400      	str	r4, [sp, #0]
  407e08:	9401      	str	r4, [sp, #4]
  407e0a:	9402      	str	r4, [sp, #8]
  407e0c:	9403      	str	r4, [sp, #12]
  407e0e:	483b      	ldr	r0, [pc, #236]	; (407efc <main+0x320>)
  407e10:	493b      	ldr	r1, [pc, #236]	; (407f00 <main+0x324>)
  407e12:	f44f 7280 	mov.w	r2, #256	; 0x100
  407e16:	4623      	mov	r3, r4
  407e18:	47a8      	blx	r5
	TASK_LED_STACK_PRIORITY, NULL) != pdPASS) {
		//printf("Failed to create test led task\r\n");
	}
	
	/* Create task to make led blink */
	if (xTaskCreate(task_camera, "Camera", TASK_LED_STACK_SIZE, NULL,
  407e1a:	9400      	str	r4, [sp, #0]
  407e1c:	9401      	str	r4, [sp, #4]
  407e1e:	9402      	str	r4, [sp, #8]
  407e20:	9403      	str	r4, [sp, #12]
  407e22:	4838      	ldr	r0, [pc, #224]	; (407f04 <main+0x328>)
  407e24:	4938      	ldr	r1, [pc, #224]	; (407f08 <main+0x32c>)
  407e26:	f44f 7280 	mov.w	r2, #256	; 0x100
  407e2a:	4623      	mov	r3, r4
  407e2c:	47a8      	blx	r5
	TASK_LED_STACK_PRIORITY, NULL) != pdPASS) {
		//printf("Failed to create test led task\r\n");
	}	

	vTaskStartScheduler();
  407e2e:	4b37      	ldr	r3, [pc, #220]	; (407f0c <main+0x330>)
  407e30:	4798      	blx	r3
	
	/* Will only get here if there was insufficient memory to create the idle task. */
	return 0;	
	
	
}
  407e32:	4620      	mov	r0, r4
  407e34:	b009      	add	sp, #36	; 0x24
  407e36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  407e3a:	bf00      	nop
  407e3c:	00400129 	.word	0x00400129
  407e40:	e000ed00 	.word	0xe000ed00
  407e44:	00400219 	.word	0x00400219
  407e48:	00400f09 	.word	0x00400f09
  407e4c:	00400f61 	.word	0x00400f61
  407e50:	400e0000 	.word	0x400e0000
  407e54:	0a0a0404 	.word	0x0a0a0404
  407e58:	0016000a 	.word	0x0016000a
  407e5c:	00400a59 	.word	0x00400a59
  407e60:	00400649 	.word	0x00400649
  407e64:	00400759 	.word	0x00400759
  407e68:	004005ed 	.word	0x004005ed
  407e6c:	004006d5 	.word	0x004006d5
  407e70:	0040e0d0 	.word	0x0040e0d0
  407e74:	004008fd 	.word	0x004008fd
  407e78:	00411b04 	.word	0x00411b04
  407e7c:	00411b28 	.word	0x00411b28
  407e80:	00030002 	.word	0x00030002
  407e84:	06040504 	.word	0x06040504
  407e88:	00070006 	.word	0x00070006
  407e8c:	400e0e00 	.word	0x400e0e00
  407e90:	00400a61 	.word	0x00400a61
  407e94:	0040783d 	.word	0x0040783d
  407e98:	e000e100 	.word	0xe000e100
  407e9c:	00400ba5 	.word	0x00400ba5
  407ea0:	00407875 	.word	0x00407875
  407ea4:	400e1200 	.word	0x400e1200
  407ea8:	004003d1 	.word	0x004003d1
  407eac:	400e0400 	.word	0x400e0400
  407eb0:	07270e00 	.word	0x07270e00
  407eb4:	00061a80 	.word	0x00061a80
  407eb8:	40018000 	.word	0x40018000
  407ebc:	00400ff9 	.word	0x00400ff9
  407ec0:	00400469 	.word	0x00400469
  407ec4:	00400581 	.word	0x00400581
  407ec8:	01885e6e 	.word	0x01885e6e
  407ecc:	20000001 	.word	0x20000001
  407ed0:	00400995 	.word	0x00400995
  407ed4:	00411b4c 	.word	0x00411b4c
  407ed8:	00400bd1 	.word	0x00400bd1
  407edc:	0105944a 	.word	0x0105944a
  407ee0:	00400bb9 	.word	0x00400bb9
  407ee4:	0082ca25 	.word	0x0082ca25
  407ee8:	00407821 	.word	0x00407821
  407eec:	00411b80 	.word	0x00411b80
  407ef0:	00402185 	.word	0x00402185
  407ef4:	00407765 	.word	0x00407765
  407ef8:	00411b84 	.word	0x00411b84
  407efc:	004077a5 	.word	0x004077a5
  407f00:	00411b88 	.word	0x00411b88
  407f04:	0040798d 	.word	0x0040798d
  407f08:	00411b90 	.word	0x00411b90
  407f0c:	00402385 	.word	0x00402385
  407f10:	00400a41 	.word	0x00400a41
  407f14:	00400a49 	.word	0x00400a49
  407f18:	00400a51 	.word	0x00400a51
  407f1c:	00400dc5 	.word	0x00400dc5

00407f20 <__gedf2>:
  407f20:	f04f 3cff 	mov.w	ip, #4294967295
  407f24:	e006      	b.n	407f34 <__cmpdf2+0x4>
  407f26:	bf00      	nop

00407f28 <__ledf2>:
  407f28:	f04f 0c01 	mov.w	ip, #1
  407f2c:	e002      	b.n	407f34 <__cmpdf2+0x4>
  407f2e:	bf00      	nop

00407f30 <__cmpdf2>:
  407f30:	f04f 0c01 	mov.w	ip, #1
  407f34:	f84d cd04 	str.w	ip, [sp, #-4]!
  407f38:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  407f3c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  407f40:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  407f44:	bf18      	it	ne
  407f46:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
  407f4a:	d01b      	beq.n	407f84 <__cmpdf2+0x54>
  407f4c:	b001      	add	sp, #4
  407f4e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
  407f52:	bf0c      	ite	eq
  407f54:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
  407f58:	ea91 0f03 	teqne	r1, r3
  407f5c:	bf02      	ittt	eq
  407f5e:	ea90 0f02 	teqeq	r0, r2
  407f62:	2000      	moveq	r0, #0
  407f64:	4770      	bxeq	lr
  407f66:	f110 0f00 	cmn.w	r0, #0
  407f6a:	ea91 0f03 	teq	r1, r3
  407f6e:	bf58      	it	pl
  407f70:	4299      	cmppl	r1, r3
  407f72:	bf08      	it	eq
  407f74:	4290      	cmpeq	r0, r2
  407f76:	bf2c      	ite	cs
  407f78:	17d8      	asrcs	r0, r3, #31
  407f7a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
  407f7e:	f040 0001 	orr.w	r0, r0, #1
  407f82:	4770      	bx	lr
  407f84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  407f88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  407f8c:	d102      	bne.n	407f94 <__cmpdf2+0x64>
  407f8e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
  407f92:	d107      	bne.n	407fa4 <__cmpdf2+0x74>
  407f94:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  407f98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  407f9c:	d1d6      	bne.n	407f4c <__cmpdf2+0x1c>
  407f9e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
  407fa2:	d0d3      	beq.n	407f4c <__cmpdf2+0x1c>
  407fa4:	f85d 0b04 	ldr.w	r0, [sp], #4
  407fa8:	4770      	bx	lr
  407faa:	bf00      	nop

00407fac <__aeabi_cdrcmple>:
  407fac:	4684      	mov	ip, r0
  407fae:	4610      	mov	r0, r2
  407fb0:	4662      	mov	r2, ip
  407fb2:	468c      	mov	ip, r1
  407fb4:	4619      	mov	r1, r3
  407fb6:	4663      	mov	r3, ip
  407fb8:	e000      	b.n	407fbc <__aeabi_cdcmpeq>
  407fba:	bf00      	nop

00407fbc <__aeabi_cdcmpeq>:
  407fbc:	b501      	push	{r0, lr}
  407fbe:	f7ff ffb7 	bl	407f30 <__cmpdf2>
  407fc2:	2800      	cmp	r0, #0
  407fc4:	bf48      	it	mi
  407fc6:	f110 0f00 	cmnmi.w	r0, #0
  407fca:	bd01      	pop	{r0, pc}

00407fcc <__aeabi_dcmpeq>:
  407fcc:	f84d ed08 	str.w	lr, [sp, #-8]!
  407fd0:	f7ff fff4 	bl	407fbc <__aeabi_cdcmpeq>
  407fd4:	bf0c      	ite	eq
  407fd6:	2001      	moveq	r0, #1
  407fd8:	2000      	movne	r0, #0
  407fda:	f85d fb08 	ldr.w	pc, [sp], #8
  407fde:	bf00      	nop

00407fe0 <__aeabi_dcmplt>:
  407fe0:	f84d ed08 	str.w	lr, [sp, #-8]!
  407fe4:	f7ff ffea 	bl	407fbc <__aeabi_cdcmpeq>
  407fe8:	bf34      	ite	cc
  407fea:	2001      	movcc	r0, #1
  407fec:	2000      	movcs	r0, #0
  407fee:	f85d fb08 	ldr.w	pc, [sp], #8
  407ff2:	bf00      	nop

00407ff4 <__aeabi_dcmple>:
  407ff4:	f84d ed08 	str.w	lr, [sp, #-8]!
  407ff8:	f7ff ffe0 	bl	407fbc <__aeabi_cdcmpeq>
  407ffc:	bf94      	ite	ls
  407ffe:	2001      	movls	r0, #1
  408000:	2000      	movhi	r0, #0
  408002:	f85d fb08 	ldr.w	pc, [sp], #8
  408006:	bf00      	nop

00408008 <__aeabi_dcmpge>:
  408008:	f84d ed08 	str.w	lr, [sp, #-8]!
  40800c:	f7ff ffce 	bl	407fac <__aeabi_cdrcmple>
  408010:	bf94      	ite	ls
  408012:	2001      	movls	r0, #1
  408014:	2000      	movhi	r0, #0
  408016:	f85d fb08 	ldr.w	pc, [sp], #8
  40801a:	bf00      	nop

0040801c <__aeabi_dcmpgt>:
  40801c:	f84d ed08 	str.w	lr, [sp, #-8]!
  408020:	f7ff ffc4 	bl	407fac <__aeabi_cdrcmple>
  408024:	bf34      	ite	cc
  408026:	2001      	movcc	r0, #1
  408028:	2000      	movcs	r0, #0
  40802a:	f85d fb08 	ldr.w	pc, [sp], #8
  40802e:	bf00      	nop

00408030 <__assert_func>:
  408030:	b500      	push	{lr}
  408032:	4c0a      	ldr	r4, [pc, #40]	; (40805c <__assert_func+0x2c>)
  408034:	6824      	ldr	r4, [r4, #0]
  408036:	4605      	mov	r5, r0
  408038:	b085      	sub	sp, #20
  40803a:	68e0      	ldr	r0, [r4, #12]
  40803c:	b152      	cbz	r2, 408054 <__assert_func+0x24>
  40803e:	4c08      	ldr	r4, [pc, #32]	; (408060 <__assert_func+0x30>)
  408040:	9202      	str	r2, [sp, #8]
  408042:	e88d 0012 	stmia.w	sp, {r1, r4}
  408046:	461a      	mov	r2, r3
  408048:	4906      	ldr	r1, [pc, #24]	; (408064 <__assert_func+0x34>)
  40804a:	462b      	mov	r3, r5
  40804c:	f000 f998 	bl	408380 <fiprintf>
  408050:	f005 f860 	bl	40d114 <abort>
  408054:	4c04      	ldr	r4, [pc, #16]	; (408068 <__assert_func+0x38>)
  408056:	4622      	mov	r2, r4
  408058:	e7f2      	b.n	408040 <__assert_func+0x10>
  40805a:	bf00      	nop
  40805c:	20000440 	.word	0x20000440
  408060:	00411b98 	.word	0x00411b98
  408064:	00411ba8 	.word	0x00411ba8
  408068:	00411600 	.word	0x00411600

0040806c <_fclose_r>:
  40806c:	2900      	cmp	r1, #0
  40806e:	d03d      	beq.n	4080ec <_fclose_r+0x80>
  408070:	b570      	push	{r4, r5, r6, lr}
  408072:	4605      	mov	r5, r0
  408074:	460c      	mov	r4, r1
  408076:	b108      	cbz	r0, 40807c <_fclose_r+0x10>
  408078:	6b83      	ldr	r3, [r0, #56]	; 0x38
  40807a:	b37b      	cbz	r3, 4080dc <_fclose_r+0x70>
  40807c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  408080:	b90b      	cbnz	r3, 408086 <_fclose_r+0x1a>
  408082:	2000      	movs	r0, #0
  408084:	bd70      	pop	{r4, r5, r6, pc}
  408086:	4628      	mov	r0, r5
  408088:	4621      	mov	r1, r4
  40808a:	f000 f831 	bl	4080f0 <__sflush_r>
  40808e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  408090:	4606      	mov	r6, r0
  408092:	b133      	cbz	r3, 4080a2 <_fclose_r+0x36>
  408094:	4628      	mov	r0, r5
  408096:	69e1      	ldr	r1, [r4, #28]
  408098:	4798      	blx	r3
  40809a:	2800      	cmp	r0, #0
  40809c:	bfb8      	it	lt
  40809e:	f04f 36ff 	movlt.w	r6, #4294967295
  4080a2:	89a3      	ldrh	r3, [r4, #12]
  4080a4:	061b      	lsls	r3, r3, #24
  4080a6:	d41c      	bmi.n	4080e2 <_fclose_r+0x76>
  4080a8:	6b21      	ldr	r1, [r4, #48]	; 0x30
  4080aa:	b141      	cbz	r1, 4080be <_fclose_r+0x52>
  4080ac:	f104 0340 	add.w	r3, r4, #64	; 0x40
  4080b0:	4299      	cmp	r1, r3
  4080b2:	d002      	beq.n	4080ba <_fclose_r+0x4e>
  4080b4:	4628      	mov	r0, r5
  4080b6:	f000 f9d9 	bl	40846c <_free_r>
  4080ba:	2300      	movs	r3, #0
  4080bc:	6323      	str	r3, [r4, #48]	; 0x30
  4080be:	6c61      	ldr	r1, [r4, #68]	; 0x44
  4080c0:	b121      	cbz	r1, 4080cc <_fclose_r+0x60>
  4080c2:	4628      	mov	r0, r5
  4080c4:	f000 f9d2 	bl	40846c <_free_r>
  4080c8:	2300      	movs	r3, #0
  4080ca:	6463      	str	r3, [r4, #68]	; 0x44
  4080cc:	f000 f954 	bl	408378 <__sfp_lock_acquire>
  4080d0:	2300      	movs	r3, #0
  4080d2:	81a3      	strh	r3, [r4, #12]
  4080d4:	f000 f952 	bl	40837c <__sfp_lock_release>
  4080d8:	4630      	mov	r0, r6
  4080da:	bd70      	pop	{r4, r5, r6, pc}
  4080dc:	f000 f946 	bl	40836c <__sinit>
  4080e0:	e7cc      	b.n	40807c <_fclose_r+0x10>
  4080e2:	4628      	mov	r0, r5
  4080e4:	6921      	ldr	r1, [r4, #16]
  4080e6:	f000 f9c1 	bl	40846c <_free_r>
  4080ea:	e7dd      	b.n	4080a8 <_fclose_r+0x3c>
  4080ec:	2000      	movs	r0, #0
  4080ee:	4770      	bx	lr

004080f0 <__sflush_r>:
  4080f0:	898b      	ldrh	r3, [r1, #12]
  4080f2:	b29a      	uxth	r2, r3
  4080f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4080f8:	460d      	mov	r5, r1
  4080fa:	0711      	lsls	r1, r2, #28
  4080fc:	4680      	mov	r8, r0
  4080fe:	d43c      	bmi.n	40817a <__sflush_r+0x8a>
  408100:	686a      	ldr	r2, [r5, #4]
  408102:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
  408106:	2a00      	cmp	r2, #0
  408108:	81ab      	strh	r3, [r5, #12]
  40810a:	dd65      	ble.n	4081d8 <__sflush_r+0xe8>
  40810c:	6aae      	ldr	r6, [r5, #40]	; 0x28
  40810e:	2e00      	cmp	r6, #0
  408110:	d04b      	beq.n	4081aa <__sflush_r+0xba>
  408112:	b29b      	uxth	r3, r3
  408114:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
  408118:	2100      	movs	r1, #0
  40811a:	b292      	uxth	r2, r2
  40811c:	f8d8 4000 	ldr.w	r4, [r8]
  408120:	f8c8 1000 	str.w	r1, [r8]
  408124:	2a00      	cmp	r2, #0
  408126:	d05b      	beq.n	4081e0 <__sflush_r+0xf0>
  408128:	6d2a      	ldr	r2, [r5, #80]	; 0x50
  40812a:	075f      	lsls	r7, r3, #29
  40812c:	d505      	bpl.n	40813a <__sflush_r+0x4a>
  40812e:	6869      	ldr	r1, [r5, #4]
  408130:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  408132:	1a52      	subs	r2, r2, r1
  408134:	b10b      	cbz	r3, 40813a <__sflush_r+0x4a>
  408136:	6beb      	ldr	r3, [r5, #60]	; 0x3c
  408138:	1ad2      	subs	r2, r2, r3
  40813a:	4640      	mov	r0, r8
  40813c:	69e9      	ldr	r1, [r5, #28]
  40813e:	2300      	movs	r3, #0
  408140:	47b0      	blx	r6
  408142:	1c46      	adds	r6, r0, #1
  408144:	d056      	beq.n	4081f4 <__sflush_r+0x104>
  408146:	89ab      	ldrh	r3, [r5, #12]
  408148:	692a      	ldr	r2, [r5, #16]
  40814a:	602a      	str	r2, [r5, #0]
  40814c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  408150:	b29b      	uxth	r3, r3
  408152:	2200      	movs	r2, #0
  408154:	606a      	str	r2, [r5, #4]
  408156:	04da      	lsls	r2, r3, #19
  408158:	81ab      	strh	r3, [r5, #12]
  40815a:	d43b      	bmi.n	4081d4 <__sflush_r+0xe4>
  40815c:	6b29      	ldr	r1, [r5, #48]	; 0x30
  40815e:	f8c8 4000 	str.w	r4, [r8]
  408162:	b311      	cbz	r1, 4081aa <__sflush_r+0xba>
  408164:	f105 0340 	add.w	r3, r5, #64	; 0x40
  408168:	4299      	cmp	r1, r3
  40816a:	d002      	beq.n	408172 <__sflush_r+0x82>
  40816c:	4640      	mov	r0, r8
  40816e:	f000 f97d 	bl	40846c <_free_r>
  408172:	2000      	movs	r0, #0
  408174:	6328      	str	r0, [r5, #48]	; 0x30
  408176:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40817a:	692e      	ldr	r6, [r5, #16]
  40817c:	b1ae      	cbz	r6, 4081aa <__sflush_r+0xba>
  40817e:	682c      	ldr	r4, [r5, #0]
  408180:	602e      	str	r6, [r5, #0]
  408182:	0791      	lsls	r1, r2, #30
  408184:	bf0c      	ite	eq
  408186:	696b      	ldreq	r3, [r5, #20]
  408188:	2300      	movne	r3, #0
  40818a:	1ba4      	subs	r4, r4, r6
  40818c:	60ab      	str	r3, [r5, #8]
  40818e:	e00a      	b.n	4081a6 <__sflush_r+0xb6>
  408190:	4632      	mov	r2, r6
  408192:	4623      	mov	r3, r4
  408194:	6a6f      	ldr	r7, [r5, #36]	; 0x24
  408196:	69e9      	ldr	r1, [r5, #28]
  408198:	4640      	mov	r0, r8
  40819a:	47b8      	blx	r7
  40819c:	2800      	cmp	r0, #0
  40819e:	eba4 0400 	sub.w	r4, r4, r0
  4081a2:	4406      	add	r6, r0
  4081a4:	dd04      	ble.n	4081b0 <__sflush_r+0xc0>
  4081a6:	2c00      	cmp	r4, #0
  4081a8:	dcf2      	bgt.n	408190 <__sflush_r+0xa0>
  4081aa:	2000      	movs	r0, #0
  4081ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4081b0:	89ab      	ldrh	r3, [r5, #12]
  4081b2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  4081b6:	81ab      	strh	r3, [r5, #12]
  4081b8:	f04f 30ff 	mov.w	r0, #4294967295
  4081bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4081c0:	89ab      	ldrh	r3, [r5, #12]
  4081c2:	692a      	ldr	r2, [r5, #16]
  4081c4:	6069      	str	r1, [r5, #4]
  4081c6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  4081ca:	b29b      	uxth	r3, r3
  4081cc:	81ab      	strh	r3, [r5, #12]
  4081ce:	04db      	lsls	r3, r3, #19
  4081d0:	602a      	str	r2, [r5, #0]
  4081d2:	d5c3      	bpl.n	40815c <__sflush_r+0x6c>
  4081d4:	6528      	str	r0, [r5, #80]	; 0x50
  4081d6:	e7c1      	b.n	40815c <__sflush_r+0x6c>
  4081d8:	6bea      	ldr	r2, [r5, #60]	; 0x3c
  4081da:	2a00      	cmp	r2, #0
  4081dc:	dc96      	bgt.n	40810c <__sflush_r+0x1c>
  4081de:	e7e4      	b.n	4081aa <__sflush_r+0xba>
  4081e0:	2301      	movs	r3, #1
  4081e2:	4640      	mov	r0, r8
  4081e4:	69e9      	ldr	r1, [r5, #28]
  4081e6:	47b0      	blx	r6
  4081e8:	1c43      	adds	r3, r0, #1
  4081ea:	4602      	mov	r2, r0
  4081ec:	d019      	beq.n	408222 <__sflush_r+0x132>
  4081ee:	89ab      	ldrh	r3, [r5, #12]
  4081f0:	6aae      	ldr	r6, [r5, #40]	; 0x28
  4081f2:	e79a      	b.n	40812a <__sflush_r+0x3a>
  4081f4:	f8d8 1000 	ldr.w	r1, [r8]
  4081f8:	2900      	cmp	r1, #0
  4081fa:	d0e1      	beq.n	4081c0 <__sflush_r+0xd0>
  4081fc:	291d      	cmp	r1, #29
  4081fe:	d007      	beq.n	408210 <__sflush_r+0x120>
  408200:	2916      	cmp	r1, #22
  408202:	d005      	beq.n	408210 <__sflush_r+0x120>
  408204:	89ab      	ldrh	r3, [r5, #12]
  408206:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40820a:	81ab      	strh	r3, [r5, #12]
  40820c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  408210:	89ab      	ldrh	r3, [r5, #12]
  408212:	692a      	ldr	r2, [r5, #16]
  408214:	602a      	str	r2, [r5, #0]
  408216:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  40821a:	2200      	movs	r2, #0
  40821c:	81ab      	strh	r3, [r5, #12]
  40821e:	606a      	str	r2, [r5, #4]
  408220:	e79c      	b.n	40815c <__sflush_r+0x6c>
  408222:	f8d8 3000 	ldr.w	r3, [r8]
  408226:	2b00      	cmp	r3, #0
  408228:	d0e1      	beq.n	4081ee <__sflush_r+0xfe>
  40822a:	2b1d      	cmp	r3, #29
  40822c:	d007      	beq.n	40823e <__sflush_r+0x14e>
  40822e:	2b16      	cmp	r3, #22
  408230:	d005      	beq.n	40823e <__sflush_r+0x14e>
  408232:	89ab      	ldrh	r3, [r5, #12]
  408234:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  408238:	81ab      	strh	r3, [r5, #12]
  40823a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40823e:	f8c8 4000 	str.w	r4, [r8]
  408242:	e7b2      	b.n	4081aa <__sflush_r+0xba>

00408244 <_fflush_r>:
  408244:	b510      	push	{r4, lr}
  408246:	4604      	mov	r4, r0
  408248:	b082      	sub	sp, #8
  40824a:	b108      	cbz	r0, 408250 <_fflush_r+0xc>
  40824c:	6b83      	ldr	r3, [r0, #56]	; 0x38
  40824e:	b153      	cbz	r3, 408266 <_fflush_r+0x22>
  408250:	f9b1 000c 	ldrsh.w	r0, [r1, #12]
  408254:	b908      	cbnz	r0, 40825a <_fflush_r+0x16>
  408256:	b002      	add	sp, #8
  408258:	bd10      	pop	{r4, pc}
  40825a:	4620      	mov	r0, r4
  40825c:	b002      	add	sp, #8
  40825e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  408262:	f7ff bf45 	b.w	4080f0 <__sflush_r>
  408266:	9101      	str	r1, [sp, #4]
  408268:	f000 f880 	bl	40836c <__sinit>
  40826c:	9901      	ldr	r1, [sp, #4]
  40826e:	e7ef      	b.n	408250 <_fflush_r+0xc>

00408270 <_cleanup_r>:
  408270:	4901      	ldr	r1, [pc, #4]	; (408278 <_cleanup_r+0x8>)
  408272:	f000 bb73 	b.w	40895c <_fwalk_reent>
  408276:	bf00      	nop
  408278:	0040806d 	.word	0x0040806d

0040827c <__sinit.part.1>:
  40827c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  408280:	4b35      	ldr	r3, [pc, #212]	; (408358 <__sinit.part.1+0xdc>)
  408282:	6845      	ldr	r5, [r0, #4]
  408284:	63c3      	str	r3, [r0, #60]	; 0x3c
  408286:	2400      	movs	r4, #0
  408288:	4607      	mov	r7, r0
  40828a:	f500 723b 	add.w	r2, r0, #748	; 0x2ec
  40828e:	2304      	movs	r3, #4
  408290:	2103      	movs	r1, #3
  408292:	f8c0 12e4 	str.w	r1, [r0, #740]	; 0x2e4
  408296:	f8c0 22e8 	str.w	r2, [r0, #744]	; 0x2e8
  40829a:	f8c0 42e0 	str.w	r4, [r0, #736]	; 0x2e0
  40829e:	b083      	sub	sp, #12
  4082a0:	602c      	str	r4, [r5, #0]
  4082a2:	606c      	str	r4, [r5, #4]
  4082a4:	60ac      	str	r4, [r5, #8]
  4082a6:	666c      	str	r4, [r5, #100]	; 0x64
  4082a8:	81ec      	strh	r4, [r5, #14]
  4082aa:	612c      	str	r4, [r5, #16]
  4082ac:	616c      	str	r4, [r5, #20]
  4082ae:	61ac      	str	r4, [r5, #24]
  4082b0:	81ab      	strh	r3, [r5, #12]
  4082b2:	4621      	mov	r1, r4
  4082b4:	f105 005c 	add.w	r0, r5, #92	; 0x5c
  4082b8:	2208      	movs	r2, #8
  4082ba:	f001 f831 	bl	409320 <memset>
  4082be:	68be      	ldr	r6, [r7, #8]
  4082c0:	f8df b098 	ldr.w	fp, [pc, #152]	; 40835c <__sinit.part.1+0xe0>
  4082c4:	f8df a098 	ldr.w	sl, [pc, #152]	; 408360 <__sinit.part.1+0xe4>
  4082c8:	f8df 9098 	ldr.w	r9, [pc, #152]	; 408364 <__sinit.part.1+0xe8>
  4082cc:	f8df 8098 	ldr.w	r8, [pc, #152]	; 408368 <__sinit.part.1+0xec>
  4082d0:	f8c5 b020 	str.w	fp, [r5, #32]
  4082d4:	2301      	movs	r3, #1
  4082d6:	2209      	movs	r2, #9
  4082d8:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
  4082dc:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
  4082e0:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
  4082e4:	61ed      	str	r5, [r5, #28]
  4082e6:	4621      	mov	r1, r4
  4082e8:	81f3      	strh	r3, [r6, #14]
  4082ea:	81b2      	strh	r2, [r6, #12]
  4082ec:	f106 005c 	add.w	r0, r6, #92	; 0x5c
  4082f0:	6034      	str	r4, [r6, #0]
  4082f2:	6074      	str	r4, [r6, #4]
  4082f4:	60b4      	str	r4, [r6, #8]
  4082f6:	6674      	str	r4, [r6, #100]	; 0x64
  4082f8:	6134      	str	r4, [r6, #16]
  4082fa:	6174      	str	r4, [r6, #20]
  4082fc:	61b4      	str	r4, [r6, #24]
  4082fe:	2208      	movs	r2, #8
  408300:	9301      	str	r3, [sp, #4]
  408302:	f001 f80d 	bl	409320 <memset>
  408306:	68fd      	ldr	r5, [r7, #12]
  408308:	61f6      	str	r6, [r6, #28]
  40830a:	2012      	movs	r0, #18
  40830c:	2202      	movs	r2, #2
  40830e:	f8c6 b020 	str.w	fp, [r6, #32]
  408312:	f8c6 a024 	str.w	sl, [r6, #36]	; 0x24
  408316:	f8c6 9028 	str.w	r9, [r6, #40]	; 0x28
  40831a:	f8c6 802c 	str.w	r8, [r6, #44]	; 0x2c
  40831e:	4621      	mov	r1, r4
  408320:	81a8      	strh	r0, [r5, #12]
  408322:	81ea      	strh	r2, [r5, #14]
  408324:	602c      	str	r4, [r5, #0]
  408326:	606c      	str	r4, [r5, #4]
  408328:	60ac      	str	r4, [r5, #8]
  40832a:	666c      	str	r4, [r5, #100]	; 0x64
  40832c:	612c      	str	r4, [r5, #16]
  40832e:	616c      	str	r4, [r5, #20]
  408330:	61ac      	str	r4, [r5, #24]
  408332:	f105 005c 	add.w	r0, r5, #92	; 0x5c
  408336:	2208      	movs	r2, #8
  408338:	f000 fff2 	bl	409320 <memset>
  40833c:	9b01      	ldr	r3, [sp, #4]
  40833e:	61ed      	str	r5, [r5, #28]
  408340:	f8c5 b020 	str.w	fp, [r5, #32]
  408344:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
  408348:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
  40834c:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
  408350:	63bb      	str	r3, [r7, #56]	; 0x38
  408352:	b003      	add	sp, #12
  408354:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  408358:	00408271 	.word	0x00408271
  40835c:	00409881 	.word	0x00409881
  408360:	004098a5 	.word	0x004098a5
  408364:	004098dd 	.word	0x004098dd
  408368:	004098fd 	.word	0x004098fd

0040836c <__sinit>:
  40836c:	6b83      	ldr	r3, [r0, #56]	; 0x38
  40836e:	b103      	cbz	r3, 408372 <__sinit+0x6>
  408370:	4770      	bx	lr
  408372:	f7ff bf83 	b.w	40827c <__sinit.part.1>
  408376:	bf00      	nop

00408378 <__sfp_lock_acquire>:
  408378:	4770      	bx	lr
  40837a:	bf00      	nop

0040837c <__sfp_lock_release>:
  40837c:	4770      	bx	lr
  40837e:	bf00      	nop

00408380 <fiprintf>:
  408380:	b40e      	push	{r1, r2, r3}
  408382:	b510      	push	{r4, lr}
  408384:	b083      	sub	sp, #12
  408386:	ab05      	add	r3, sp, #20
  408388:	4c06      	ldr	r4, [pc, #24]	; (4083a4 <fiprintf+0x24>)
  40838a:	f853 2b04 	ldr.w	r2, [r3], #4
  40838e:	9301      	str	r3, [sp, #4]
  408390:	4601      	mov	r1, r0
  408392:	6820      	ldr	r0, [r4, #0]
  408394:	f002 fd76 	bl	40ae84 <_vfiprintf_r>
  408398:	b003      	add	sp, #12
  40839a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  40839e:	b003      	add	sp, #12
  4083a0:	4770      	bx	lr
  4083a2:	bf00      	nop
  4083a4:	20000440 	.word	0x20000440

004083a8 <fprintf>:
  4083a8:	b40e      	push	{r1, r2, r3}
  4083aa:	b510      	push	{r4, lr}
  4083ac:	b083      	sub	sp, #12
  4083ae:	ab05      	add	r3, sp, #20
  4083b0:	4c06      	ldr	r4, [pc, #24]	; (4083cc <fprintf+0x24>)
  4083b2:	f853 2b04 	ldr.w	r2, [r3], #4
  4083b6:	9301      	str	r3, [sp, #4]
  4083b8:	4601      	mov	r1, r0
  4083ba:	6820      	ldr	r0, [r4, #0]
  4083bc:	f003 fba6 	bl	40bb0c <_vfprintf_r>
  4083c0:	b003      	add	sp, #12
  4083c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  4083c6:	b003      	add	sp, #12
  4083c8:	4770      	bx	lr
  4083ca:	bf00      	nop
  4083cc:	20000440 	.word	0x20000440

004083d0 <_malloc_trim_r>:
  4083d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4083d2:	4f23      	ldr	r7, [pc, #140]	; (408460 <_malloc_trim_r+0x90>)
  4083d4:	460c      	mov	r4, r1
  4083d6:	4606      	mov	r6, r0
  4083d8:	f000 fff0 	bl	4093bc <__malloc_lock>
  4083dc:	68bb      	ldr	r3, [r7, #8]
  4083de:	685d      	ldr	r5, [r3, #4]
  4083e0:	f025 0503 	bic.w	r5, r5, #3
  4083e4:	1b29      	subs	r1, r5, r4
  4083e6:	f601 71ef 	addw	r1, r1, #4079	; 0xfef
  4083ea:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
  4083ee:	f021 010f 	bic.w	r1, r1, #15
  4083f2:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
  4083f6:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
  4083fa:	db07      	blt.n	40840c <_malloc_trim_r+0x3c>
  4083fc:	4630      	mov	r0, r6
  4083fe:	2100      	movs	r1, #0
  408400:	f001 f9de 	bl	4097c0 <_sbrk_r>
  408404:	68bb      	ldr	r3, [r7, #8]
  408406:	442b      	add	r3, r5
  408408:	4298      	cmp	r0, r3
  40840a:	d004      	beq.n	408416 <_malloc_trim_r+0x46>
  40840c:	4630      	mov	r0, r6
  40840e:	f000 ffd7 	bl	4093c0 <__malloc_unlock>
  408412:	2000      	movs	r0, #0
  408414:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  408416:	4630      	mov	r0, r6
  408418:	4261      	negs	r1, r4
  40841a:	f001 f9d1 	bl	4097c0 <_sbrk_r>
  40841e:	3001      	adds	r0, #1
  408420:	d00d      	beq.n	40843e <_malloc_trim_r+0x6e>
  408422:	4b10      	ldr	r3, [pc, #64]	; (408464 <_malloc_trim_r+0x94>)
  408424:	68ba      	ldr	r2, [r7, #8]
  408426:	6819      	ldr	r1, [r3, #0]
  408428:	1b2d      	subs	r5, r5, r4
  40842a:	f045 0501 	orr.w	r5, r5, #1
  40842e:	4630      	mov	r0, r6
  408430:	1b09      	subs	r1, r1, r4
  408432:	6055      	str	r5, [r2, #4]
  408434:	6019      	str	r1, [r3, #0]
  408436:	f000 ffc3 	bl	4093c0 <__malloc_unlock>
  40843a:	2001      	movs	r0, #1
  40843c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40843e:	4630      	mov	r0, r6
  408440:	2100      	movs	r1, #0
  408442:	f001 f9bd 	bl	4097c0 <_sbrk_r>
  408446:	68ba      	ldr	r2, [r7, #8]
  408448:	1a83      	subs	r3, r0, r2
  40844a:	2b0f      	cmp	r3, #15
  40844c:	ddde      	ble.n	40840c <_malloc_trim_r+0x3c>
  40844e:	4c06      	ldr	r4, [pc, #24]	; (408468 <_malloc_trim_r+0x98>)
  408450:	4904      	ldr	r1, [pc, #16]	; (408464 <_malloc_trim_r+0x94>)
  408452:	6824      	ldr	r4, [r4, #0]
  408454:	f043 0301 	orr.w	r3, r3, #1
  408458:	1b00      	subs	r0, r0, r4
  40845a:	6053      	str	r3, [r2, #4]
  40845c:	6008      	str	r0, [r1, #0]
  40845e:	e7d5      	b.n	40840c <_malloc_trim_r+0x3c>
  408460:	20000444 	.word	0x20000444
  408464:	2000ae94 	.word	0x2000ae94
  408468:	20000850 	.word	0x20000850

0040846c <_free_r>:
  40846c:	2900      	cmp	r1, #0
  40846e:	d04e      	beq.n	40850e <_free_r+0xa2>
  408470:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  408474:	460c      	mov	r4, r1
  408476:	4680      	mov	r8, r0
  408478:	f000 ffa0 	bl	4093bc <__malloc_lock>
  40847c:	f854 7c04 	ldr.w	r7, [r4, #-4]
  408480:	4962      	ldr	r1, [pc, #392]	; (40860c <_free_r+0x1a0>)
  408482:	f027 0201 	bic.w	r2, r7, #1
  408486:	f1a4 0508 	sub.w	r5, r4, #8
  40848a:	18ab      	adds	r3, r5, r2
  40848c:	688e      	ldr	r6, [r1, #8]
  40848e:	6858      	ldr	r0, [r3, #4]
  408490:	429e      	cmp	r6, r3
  408492:	f020 0003 	bic.w	r0, r0, #3
  408496:	d05a      	beq.n	40854e <_free_r+0xe2>
  408498:	07fe      	lsls	r6, r7, #31
  40849a:	6058      	str	r0, [r3, #4]
  40849c:	d40b      	bmi.n	4084b6 <_free_r+0x4a>
  40849e:	f854 7c08 	ldr.w	r7, [r4, #-8]
  4084a2:	1bed      	subs	r5, r5, r7
  4084a4:	f101 0e08 	add.w	lr, r1, #8
  4084a8:	68ac      	ldr	r4, [r5, #8]
  4084aa:	4574      	cmp	r4, lr
  4084ac:	443a      	add	r2, r7
  4084ae:	d067      	beq.n	408580 <_free_r+0x114>
  4084b0:	68ef      	ldr	r7, [r5, #12]
  4084b2:	60e7      	str	r7, [r4, #12]
  4084b4:	60bc      	str	r4, [r7, #8]
  4084b6:	181c      	adds	r4, r3, r0
  4084b8:	6864      	ldr	r4, [r4, #4]
  4084ba:	07e4      	lsls	r4, r4, #31
  4084bc:	d40c      	bmi.n	4084d8 <_free_r+0x6c>
  4084be:	4f54      	ldr	r7, [pc, #336]	; (408610 <_free_r+0x1a4>)
  4084c0:	689c      	ldr	r4, [r3, #8]
  4084c2:	42bc      	cmp	r4, r7
  4084c4:	4402      	add	r2, r0
  4084c6:	d07c      	beq.n	4085c2 <_free_r+0x156>
  4084c8:	68d8      	ldr	r0, [r3, #12]
  4084ca:	60e0      	str	r0, [r4, #12]
  4084cc:	f042 0301 	orr.w	r3, r2, #1
  4084d0:	6084      	str	r4, [r0, #8]
  4084d2:	606b      	str	r3, [r5, #4]
  4084d4:	50aa      	str	r2, [r5, r2]
  4084d6:	e003      	b.n	4084e0 <_free_r+0x74>
  4084d8:	f042 0301 	orr.w	r3, r2, #1
  4084dc:	606b      	str	r3, [r5, #4]
  4084de:	50aa      	str	r2, [r5, r2]
  4084e0:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
  4084e4:	d214      	bcs.n	408510 <_free_r+0xa4>
  4084e6:	08d2      	lsrs	r2, r2, #3
  4084e8:	eb01 03c2 	add.w	r3, r1, r2, lsl #3
  4084ec:	6848      	ldr	r0, [r1, #4]
  4084ee:	689f      	ldr	r7, [r3, #8]
  4084f0:	60af      	str	r7, [r5, #8]
  4084f2:	1092      	asrs	r2, r2, #2
  4084f4:	2401      	movs	r4, #1
  4084f6:	fa04 f202 	lsl.w	r2, r4, r2
  4084fa:	4310      	orrs	r0, r2
  4084fc:	60eb      	str	r3, [r5, #12]
  4084fe:	6048      	str	r0, [r1, #4]
  408500:	609d      	str	r5, [r3, #8]
  408502:	60fd      	str	r5, [r7, #12]
  408504:	4640      	mov	r0, r8
  408506:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  40850a:	f000 bf59 	b.w	4093c0 <__malloc_unlock>
  40850e:	4770      	bx	lr
  408510:	0a53      	lsrs	r3, r2, #9
  408512:	2b04      	cmp	r3, #4
  408514:	d847      	bhi.n	4085a6 <_free_r+0x13a>
  408516:	0993      	lsrs	r3, r2, #6
  408518:	f103 0438 	add.w	r4, r3, #56	; 0x38
  40851c:	0060      	lsls	r0, r4, #1
  40851e:	eb01 0080 	add.w	r0, r1, r0, lsl #2
  408522:	493a      	ldr	r1, [pc, #232]	; (40860c <_free_r+0x1a0>)
  408524:	6883      	ldr	r3, [r0, #8]
  408526:	4283      	cmp	r3, r0
  408528:	d043      	beq.n	4085b2 <_free_r+0x146>
  40852a:	6859      	ldr	r1, [r3, #4]
  40852c:	f021 0103 	bic.w	r1, r1, #3
  408530:	4291      	cmp	r1, r2
  408532:	d902      	bls.n	40853a <_free_r+0xce>
  408534:	689b      	ldr	r3, [r3, #8]
  408536:	4298      	cmp	r0, r3
  408538:	d1f7      	bne.n	40852a <_free_r+0xbe>
  40853a:	68da      	ldr	r2, [r3, #12]
  40853c:	60ea      	str	r2, [r5, #12]
  40853e:	60ab      	str	r3, [r5, #8]
  408540:	4640      	mov	r0, r8
  408542:	6095      	str	r5, [r2, #8]
  408544:	60dd      	str	r5, [r3, #12]
  408546:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  40854a:	f000 bf39 	b.w	4093c0 <__malloc_unlock>
  40854e:	07ff      	lsls	r7, r7, #31
  408550:	4402      	add	r2, r0
  408552:	d407      	bmi.n	408564 <_free_r+0xf8>
  408554:	f854 3c08 	ldr.w	r3, [r4, #-8]
  408558:	1aed      	subs	r5, r5, r3
  40855a:	441a      	add	r2, r3
  40855c:	68a8      	ldr	r0, [r5, #8]
  40855e:	68eb      	ldr	r3, [r5, #12]
  408560:	60c3      	str	r3, [r0, #12]
  408562:	6098      	str	r0, [r3, #8]
  408564:	4b2b      	ldr	r3, [pc, #172]	; (408614 <_free_r+0x1a8>)
  408566:	681b      	ldr	r3, [r3, #0]
  408568:	f042 0001 	orr.w	r0, r2, #1
  40856c:	429a      	cmp	r2, r3
  40856e:	6068      	str	r0, [r5, #4]
  408570:	608d      	str	r5, [r1, #8]
  408572:	d3c7      	bcc.n	408504 <_free_r+0x98>
  408574:	4b28      	ldr	r3, [pc, #160]	; (408618 <_free_r+0x1ac>)
  408576:	4640      	mov	r0, r8
  408578:	6819      	ldr	r1, [r3, #0]
  40857a:	f7ff ff29 	bl	4083d0 <_malloc_trim_r>
  40857e:	e7c1      	b.n	408504 <_free_r+0x98>
  408580:	1819      	adds	r1, r3, r0
  408582:	6849      	ldr	r1, [r1, #4]
  408584:	07c9      	lsls	r1, r1, #31
  408586:	d409      	bmi.n	40859c <_free_r+0x130>
  408588:	68d9      	ldr	r1, [r3, #12]
  40858a:	689b      	ldr	r3, [r3, #8]
  40858c:	4402      	add	r2, r0
  40858e:	f042 0001 	orr.w	r0, r2, #1
  408592:	60d9      	str	r1, [r3, #12]
  408594:	608b      	str	r3, [r1, #8]
  408596:	6068      	str	r0, [r5, #4]
  408598:	50aa      	str	r2, [r5, r2]
  40859a:	e7b3      	b.n	408504 <_free_r+0x98>
  40859c:	f042 0301 	orr.w	r3, r2, #1
  4085a0:	606b      	str	r3, [r5, #4]
  4085a2:	50aa      	str	r2, [r5, r2]
  4085a4:	e7ae      	b.n	408504 <_free_r+0x98>
  4085a6:	2b14      	cmp	r3, #20
  4085a8:	d814      	bhi.n	4085d4 <_free_r+0x168>
  4085aa:	f103 045b 	add.w	r4, r3, #91	; 0x5b
  4085ae:	0060      	lsls	r0, r4, #1
  4085b0:	e7b5      	b.n	40851e <_free_r+0xb2>
  4085b2:	684a      	ldr	r2, [r1, #4]
  4085b4:	10a4      	asrs	r4, r4, #2
  4085b6:	2001      	movs	r0, #1
  4085b8:	40a0      	lsls	r0, r4
  4085ba:	4302      	orrs	r2, r0
  4085bc:	604a      	str	r2, [r1, #4]
  4085be:	461a      	mov	r2, r3
  4085c0:	e7bc      	b.n	40853c <_free_r+0xd0>
  4085c2:	f042 0301 	orr.w	r3, r2, #1
  4085c6:	614d      	str	r5, [r1, #20]
  4085c8:	610d      	str	r5, [r1, #16]
  4085ca:	60ec      	str	r4, [r5, #12]
  4085cc:	60ac      	str	r4, [r5, #8]
  4085ce:	606b      	str	r3, [r5, #4]
  4085d0:	50aa      	str	r2, [r5, r2]
  4085d2:	e797      	b.n	408504 <_free_r+0x98>
  4085d4:	2b54      	cmp	r3, #84	; 0x54
  4085d6:	d804      	bhi.n	4085e2 <_free_r+0x176>
  4085d8:	0b13      	lsrs	r3, r2, #12
  4085da:	f103 046e 	add.w	r4, r3, #110	; 0x6e
  4085de:	0060      	lsls	r0, r4, #1
  4085e0:	e79d      	b.n	40851e <_free_r+0xb2>
  4085e2:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
  4085e6:	d804      	bhi.n	4085f2 <_free_r+0x186>
  4085e8:	0bd3      	lsrs	r3, r2, #15
  4085ea:	f103 0477 	add.w	r4, r3, #119	; 0x77
  4085ee:	0060      	lsls	r0, r4, #1
  4085f0:	e795      	b.n	40851e <_free_r+0xb2>
  4085f2:	f240 5054 	movw	r0, #1364	; 0x554
  4085f6:	4283      	cmp	r3, r0
  4085f8:	d804      	bhi.n	408604 <_free_r+0x198>
  4085fa:	0c93      	lsrs	r3, r2, #18
  4085fc:	f103 047c 	add.w	r4, r3, #124	; 0x7c
  408600:	0060      	lsls	r0, r4, #1
  408602:	e78c      	b.n	40851e <_free_r+0xb2>
  408604:	20fc      	movs	r0, #252	; 0xfc
  408606:	247e      	movs	r4, #126	; 0x7e
  408608:	e789      	b.n	40851e <_free_r+0xb2>
  40860a:	bf00      	nop
  40860c:	20000444 	.word	0x20000444
  408610:	2000044c 	.word	0x2000044c
  408614:	2000084c 	.word	0x2000084c
  408618:	2000ae90 	.word	0x2000ae90

0040861c <_fstat_r>:
  40861c:	b538      	push	{r3, r4, r5, lr}
  40861e:	4c08      	ldr	r4, [pc, #32]	; (408640 <_fstat_r+0x24>)
  408620:	2300      	movs	r3, #0
  408622:	4605      	mov	r5, r0
  408624:	4608      	mov	r0, r1
  408626:	4611      	mov	r1, r2
  408628:	6023      	str	r3, [r4, #0]
  40862a:	f7f8 ff01 	bl	401430 <_fstat>
  40862e:	1c43      	adds	r3, r0, #1
  408630:	d000      	beq.n	408634 <_fstat_r+0x18>
  408632:	bd38      	pop	{r3, r4, r5, pc}
  408634:	6823      	ldr	r3, [r4, #0]
  408636:	2b00      	cmp	r3, #0
  408638:	d0fb      	beq.n	408632 <_fstat_r+0x16>
  40863a:	602b      	str	r3, [r5, #0]
  40863c:	bd38      	pop	{r3, r4, r5, pc}
  40863e:	bf00      	nop
  408640:	2000aed8 	.word	0x2000aed8

00408644 <__sfvwrite_r>:
  408644:	6893      	ldr	r3, [r2, #8]
  408646:	2b00      	cmp	r3, #0
  408648:	d07a      	beq.n	408740 <__sfvwrite_r+0xfc>
  40864a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40864e:	f8b1 e00c 	ldrh.w	lr, [r1, #12]
  408652:	f01e 0f08 	tst.w	lr, #8
  408656:	b083      	sub	sp, #12
  408658:	460c      	mov	r4, r1
  40865a:	4681      	mov	r9, r0
  40865c:	4616      	mov	r6, r2
  40865e:	d026      	beq.n	4086ae <__sfvwrite_r+0x6a>
  408660:	690b      	ldr	r3, [r1, #16]
  408662:	b323      	cbz	r3, 4086ae <__sfvwrite_r+0x6a>
  408664:	f00e 0802 	and.w	r8, lr, #2
  408668:	fa1f f088 	uxth.w	r0, r8
  40866c:	6835      	ldr	r5, [r6, #0]
  40866e:	b370      	cbz	r0, 4086ce <__sfvwrite_r+0x8a>
  408670:	f04f 0a00 	mov.w	sl, #0
  408674:	f8df b2e0 	ldr.w	fp, [pc, #736]	; 408958 <__sfvwrite_r+0x314>
  408678:	46d0      	mov	r8, sl
  40867a:	45d8      	cmp	r8, fp
  40867c:	4643      	mov	r3, r8
  40867e:	4652      	mov	r2, sl
  408680:	bf28      	it	cs
  408682:	465b      	movcs	r3, fp
  408684:	4648      	mov	r0, r9
  408686:	f1b8 0f00 	cmp.w	r8, #0
  40868a:	d053      	beq.n	408734 <__sfvwrite_r+0xf0>
  40868c:	69e1      	ldr	r1, [r4, #28]
  40868e:	6a67      	ldr	r7, [r4, #36]	; 0x24
  408690:	47b8      	blx	r7
  408692:	2800      	cmp	r0, #0
  408694:	dd73      	ble.n	40877e <__sfvwrite_r+0x13a>
  408696:	68b3      	ldr	r3, [r6, #8]
  408698:	1a1b      	subs	r3, r3, r0
  40869a:	4482      	add	sl, r0
  40869c:	ebc0 0808 	rsb	r8, r0, r8
  4086a0:	60b3      	str	r3, [r6, #8]
  4086a2:	2b00      	cmp	r3, #0
  4086a4:	d1e9      	bne.n	40867a <__sfvwrite_r+0x36>
  4086a6:	2000      	movs	r0, #0
  4086a8:	b003      	add	sp, #12
  4086aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4086ae:	4648      	mov	r0, r9
  4086b0:	4621      	mov	r1, r4
  4086b2:	f004 fcc3 	bl	40d03c <__swsetup_r>
  4086b6:	2800      	cmp	r0, #0
  4086b8:	f040 8145 	bne.w	408946 <__sfvwrite_r+0x302>
  4086bc:	f8b4 e00c 	ldrh.w	lr, [r4, #12]
  4086c0:	6835      	ldr	r5, [r6, #0]
  4086c2:	f00e 0802 	and.w	r8, lr, #2
  4086c6:	fa1f f088 	uxth.w	r0, r8
  4086ca:	2800      	cmp	r0, #0
  4086cc:	d1d0      	bne.n	408670 <__sfvwrite_r+0x2c>
  4086ce:	f01e 0b01 	ands.w	fp, lr, #1
  4086d2:	d15d      	bne.n	408790 <__sfvwrite_r+0x14c>
  4086d4:	46d8      	mov	r8, fp
  4086d6:	f1b8 0f00 	cmp.w	r8, #0
  4086da:	d025      	beq.n	408728 <__sfvwrite_r+0xe4>
  4086dc:	f41e 7f00 	tst.w	lr, #512	; 0x200
  4086e0:	68a7      	ldr	r7, [r4, #8]
  4086e2:	d02f      	beq.n	408744 <__sfvwrite_r+0x100>
  4086e4:	45b8      	cmp	r8, r7
  4086e6:	46ba      	mov	sl, r7
  4086e8:	f0c0 80a9 	bcc.w	40883e <__sfvwrite_r+0x1fa>
  4086ec:	f41e 6f90 	tst.w	lr, #1152	; 0x480
  4086f0:	f040 80b6 	bne.w	408860 <__sfvwrite_r+0x21c>
  4086f4:	6820      	ldr	r0, [r4, #0]
  4086f6:	4652      	mov	r2, sl
  4086f8:	4659      	mov	r1, fp
  4086fa:	f000 fdad 	bl	409258 <memmove>
  4086fe:	68a0      	ldr	r0, [r4, #8]
  408700:	6822      	ldr	r2, [r4, #0]
  408702:	1bc0      	subs	r0, r0, r7
  408704:	eb02 030a 	add.w	r3, r2, sl
  408708:	60a0      	str	r0, [r4, #8]
  40870a:	6023      	str	r3, [r4, #0]
  40870c:	4640      	mov	r0, r8
  40870e:	68b3      	ldr	r3, [r6, #8]
  408710:	1a1b      	subs	r3, r3, r0
  408712:	4483      	add	fp, r0
  408714:	ebc0 0808 	rsb	r8, r0, r8
  408718:	60b3      	str	r3, [r6, #8]
  40871a:	2b00      	cmp	r3, #0
  40871c:	d0c3      	beq.n	4086a6 <__sfvwrite_r+0x62>
  40871e:	f8b4 e00c 	ldrh.w	lr, [r4, #12]
  408722:	f1b8 0f00 	cmp.w	r8, #0
  408726:	d1d9      	bne.n	4086dc <__sfvwrite_r+0x98>
  408728:	f8d5 b000 	ldr.w	fp, [r5]
  40872c:	f8d5 8004 	ldr.w	r8, [r5, #4]
  408730:	3508      	adds	r5, #8
  408732:	e7d0      	b.n	4086d6 <__sfvwrite_r+0x92>
  408734:	f8d5 a000 	ldr.w	sl, [r5]
  408738:	f8d5 8004 	ldr.w	r8, [r5, #4]
  40873c:	3508      	adds	r5, #8
  40873e:	e79c      	b.n	40867a <__sfvwrite_r+0x36>
  408740:	2000      	movs	r0, #0
  408742:	4770      	bx	lr
  408744:	6820      	ldr	r0, [r4, #0]
  408746:	6923      	ldr	r3, [r4, #16]
  408748:	4298      	cmp	r0, r3
  40874a:	d803      	bhi.n	408754 <__sfvwrite_r+0x110>
  40874c:	6962      	ldr	r2, [r4, #20]
  40874e:	4590      	cmp	r8, r2
  408750:	f080 80b9 	bcs.w	4088c6 <__sfvwrite_r+0x282>
  408754:	4547      	cmp	r7, r8
  408756:	bf28      	it	cs
  408758:	4647      	movcs	r7, r8
  40875a:	463a      	mov	r2, r7
  40875c:	4659      	mov	r1, fp
  40875e:	f000 fd7b 	bl	409258 <memmove>
  408762:	68a3      	ldr	r3, [r4, #8]
  408764:	6822      	ldr	r2, [r4, #0]
  408766:	1bdb      	subs	r3, r3, r7
  408768:	443a      	add	r2, r7
  40876a:	60a3      	str	r3, [r4, #8]
  40876c:	6022      	str	r2, [r4, #0]
  40876e:	2b00      	cmp	r3, #0
  408770:	d14a      	bne.n	408808 <__sfvwrite_r+0x1c4>
  408772:	4648      	mov	r0, r9
  408774:	4621      	mov	r1, r4
  408776:	f7ff fd65 	bl	408244 <_fflush_r>
  40877a:	2800      	cmp	r0, #0
  40877c:	d044      	beq.n	408808 <__sfvwrite_r+0x1c4>
  40877e:	89a3      	ldrh	r3, [r4, #12]
  408780:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  408784:	f04f 30ff 	mov.w	r0, #4294967295
  408788:	81a3      	strh	r3, [r4, #12]
  40878a:	b003      	add	sp, #12
  40878c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  408790:	4680      	mov	r8, r0
  408792:	9000      	str	r0, [sp, #0]
  408794:	4683      	mov	fp, r0
  408796:	4682      	mov	sl, r0
  408798:	f1ba 0f00 	cmp.w	sl, #0
  40879c:	d02c      	beq.n	4087f8 <__sfvwrite_r+0x1b4>
  40879e:	9b00      	ldr	r3, [sp, #0]
  4087a0:	2b00      	cmp	r3, #0
  4087a2:	d050      	beq.n	408846 <__sfvwrite_r+0x202>
  4087a4:	6820      	ldr	r0, [r4, #0]
  4087a6:	6921      	ldr	r1, [r4, #16]
  4087a8:	f8d4 e008 	ldr.w	lr, [r4, #8]
  4087ac:	6962      	ldr	r2, [r4, #20]
  4087ae:	45d0      	cmp	r8, sl
  4087b0:	4643      	mov	r3, r8
  4087b2:	bf28      	it	cs
  4087b4:	4653      	movcs	r3, sl
  4087b6:	4288      	cmp	r0, r1
  4087b8:	461f      	mov	r7, r3
  4087ba:	d904      	bls.n	4087c6 <__sfvwrite_r+0x182>
  4087bc:	eb0e 0c02 	add.w	ip, lr, r2
  4087c0:	4563      	cmp	r3, ip
  4087c2:	f300 8092 	bgt.w	4088ea <__sfvwrite_r+0x2a6>
  4087c6:	4293      	cmp	r3, r2
  4087c8:	db20      	blt.n	40880c <__sfvwrite_r+0x1c8>
  4087ca:	4613      	mov	r3, r2
  4087cc:	6a67      	ldr	r7, [r4, #36]	; 0x24
  4087ce:	69e1      	ldr	r1, [r4, #28]
  4087d0:	4648      	mov	r0, r9
  4087d2:	465a      	mov	r2, fp
  4087d4:	47b8      	blx	r7
  4087d6:	1e07      	subs	r7, r0, #0
  4087d8:	ddd1      	ble.n	40877e <__sfvwrite_r+0x13a>
  4087da:	ebb8 0807 	subs.w	r8, r8, r7
  4087de:	d025      	beq.n	40882c <__sfvwrite_r+0x1e8>
  4087e0:	68b3      	ldr	r3, [r6, #8]
  4087e2:	1bdb      	subs	r3, r3, r7
  4087e4:	44bb      	add	fp, r7
  4087e6:	ebc7 0a0a 	rsb	sl, r7, sl
  4087ea:	60b3      	str	r3, [r6, #8]
  4087ec:	2b00      	cmp	r3, #0
  4087ee:	f43f af5a 	beq.w	4086a6 <__sfvwrite_r+0x62>
  4087f2:	f1ba 0f00 	cmp.w	sl, #0
  4087f6:	d1d2      	bne.n	40879e <__sfvwrite_r+0x15a>
  4087f8:	2300      	movs	r3, #0
  4087fa:	f8d5 b000 	ldr.w	fp, [r5]
  4087fe:	f8d5 a004 	ldr.w	sl, [r5, #4]
  408802:	9300      	str	r3, [sp, #0]
  408804:	3508      	adds	r5, #8
  408806:	e7c7      	b.n	408798 <__sfvwrite_r+0x154>
  408808:	4638      	mov	r0, r7
  40880a:	e780      	b.n	40870e <__sfvwrite_r+0xca>
  40880c:	461a      	mov	r2, r3
  40880e:	4659      	mov	r1, fp
  408810:	9301      	str	r3, [sp, #4]
  408812:	f000 fd21 	bl	409258 <memmove>
  408816:	68a2      	ldr	r2, [r4, #8]
  408818:	6821      	ldr	r1, [r4, #0]
  40881a:	9b01      	ldr	r3, [sp, #4]
  40881c:	ebb8 0807 	subs.w	r8, r8, r7
  408820:	eba2 0203 	sub.w	r2, r2, r3
  408824:	440b      	add	r3, r1
  408826:	60a2      	str	r2, [r4, #8]
  408828:	6023      	str	r3, [r4, #0]
  40882a:	d1d9      	bne.n	4087e0 <__sfvwrite_r+0x19c>
  40882c:	4648      	mov	r0, r9
  40882e:	4621      	mov	r1, r4
  408830:	f7ff fd08 	bl	408244 <_fflush_r>
  408834:	2800      	cmp	r0, #0
  408836:	d1a2      	bne.n	40877e <__sfvwrite_r+0x13a>
  408838:	f8cd 8000 	str.w	r8, [sp]
  40883c:	e7d0      	b.n	4087e0 <__sfvwrite_r+0x19c>
  40883e:	6820      	ldr	r0, [r4, #0]
  408840:	4647      	mov	r7, r8
  408842:	46c2      	mov	sl, r8
  408844:	e757      	b.n	4086f6 <__sfvwrite_r+0xb2>
  408846:	4658      	mov	r0, fp
  408848:	210a      	movs	r1, #10
  40884a:	4652      	mov	r2, sl
  40884c:	f000 fbee 	bl	40902c <memchr>
  408850:	2800      	cmp	r0, #0
  408852:	d073      	beq.n	40893c <__sfvwrite_r+0x2f8>
  408854:	3001      	adds	r0, #1
  408856:	2301      	movs	r3, #1
  408858:	ebcb 0800 	rsb	r8, fp, r0
  40885c:	9300      	str	r3, [sp, #0]
  40885e:	e7a1      	b.n	4087a4 <__sfvwrite_r+0x160>
  408860:	6967      	ldr	r7, [r4, #20]
  408862:	6921      	ldr	r1, [r4, #16]
  408864:	6823      	ldr	r3, [r4, #0]
  408866:	eb07 0747 	add.w	r7, r7, r7, lsl #1
  40886a:	1a5b      	subs	r3, r3, r1
  40886c:	eb07 77d7 	add.w	r7, r7, r7, lsr #31
  408870:	1c58      	adds	r0, r3, #1
  408872:	107f      	asrs	r7, r7, #1
  408874:	4440      	add	r0, r8
  408876:	4287      	cmp	r7, r0
  408878:	463a      	mov	r2, r7
  40887a:	bf3c      	itt	cc
  40887c:	4607      	movcc	r7, r0
  40887e:	463a      	movcc	r2, r7
  408880:	f41e 6f80 	tst.w	lr, #1024	; 0x400
  408884:	9300      	str	r3, [sp, #0]
  408886:	d046      	beq.n	408916 <__sfvwrite_r+0x2d2>
  408888:	4611      	mov	r1, r2
  40888a:	4648      	mov	r0, r9
  40888c:	f000 f93c 	bl	408b08 <_malloc_r>
  408890:	9b00      	ldr	r3, [sp, #0]
  408892:	4682      	mov	sl, r0
  408894:	2800      	cmp	r0, #0
  408896:	d059      	beq.n	40894c <__sfvwrite_r+0x308>
  408898:	461a      	mov	r2, r3
  40889a:	6921      	ldr	r1, [r4, #16]
  40889c:	9300      	str	r3, [sp, #0]
  40889e:	f000 fc41 	bl	409124 <memcpy>
  4088a2:	89a2      	ldrh	r2, [r4, #12]
  4088a4:	9b00      	ldr	r3, [sp, #0]
  4088a6:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
  4088aa:	f042 0280 	orr.w	r2, r2, #128	; 0x80
  4088ae:	81a2      	strh	r2, [r4, #12]
  4088b0:	eb0a 0003 	add.w	r0, sl, r3
  4088b4:	1afb      	subs	r3, r7, r3
  4088b6:	f8c4 a010 	str.w	sl, [r4, #16]
  4088ba:	6167      	str	r7, [r4, #20]
  4088bc:	6020      	str	r0, [r4, #0]
  4088be:	60a3      	str	r3, [r4, #8]
  4088c0:	4647      	mov	r7, r8
  4088c2:	46c2      	mov	sl, r8
  4088c4:	e717      	b.n	4086f6 <__sfvwrite_r+0xb2>
  4088c6:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
  4088ca:	4543      	cmp	r3, r8
  4088cc:	bf28      	it	cs
  4088ce:	4643      	movcs	r3, r8
  4088d0:	6a67      	ldr	r7, [r4, #36]	; 0x24
  4088d2:	fb93 f3f2 	sdiv	r3, r3, r2
  4088d6:	4648      	mov	r0, r9
  4088d8:	fb03 f302 	mul.w	r3, r3, r2
  4088dc:	69e1      	ldr	r1, [r4, #28]
  4088de:	465a      	mov	r2, fp
  4088e0:	47b8      	blx	r7
  4088e2:	2800      	cmp	r0, #0
  4088e4:	f73f af13 	bgt.w	40870e <__sfvwrite_r+0xca>
  4088e8:	e749      	b.n	40877e <__sfvwrite_r+0x13a>
  4088ea:	4662      	mov	r2, ip
  4088ec:	4659      	mov	r1, fp
  4088ee:	f8cd c004 	str.w	ip, [sp, #4]
  4088f2:	f000 fcb1 	bl	409258 <memmove>
  4088f6:	6823      	ldr	r3, [r4, #0]
  4088f8:	f8dd c004 	ldr.w	ip, [sp, #4]
  4088fc:	4463      	add	r3, ip
  4088fe:	6023      	str	r3, [r4, #0]
  408900:	4648      	mov	r0, r9
  408902:	4621      	mov	r1, r4
  408904:	f7ff fc9e 	bl	408244 <_fflush_r>
  408908:	f8dd c004 	ldr.w	ip, [sp, #4]
  40890c:	2800      	cmp	r0, #0
  40890e:	f47f af36 	bne.w	40877e <__sfvwrite_r+0x13a>
  408912:	4667      	mov	r7, ip
  408914:	e761      	b.n	4087da <__sfvwrite_r+0x196>
  408916:	4648      	mov	r0, r9
  408918:	f000 fd5c 	bl	4093d4 <_realloc_r>
  40891c:	9b00      	ldr	r3, [sp, #0]
  40891e:	4682      	mov	sl, r0
  408920:	2800      	cmp	r0, #0
  408922:	d1c5      	bne.n	4088b0 <__sfvwrite_r+0x26c>
  408924:	4648      	mov	r0, r9
  408926:	6921      	ldr	r1, [r4, #16]
  408928:	f7ff fda0 	bl	40846c <_free_r>
  40892c:	89a3      	ldrh	r3, [r4, #12]
  40892e:	220c      	movs	r2, #12
  408930:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  408934:	b29b      	uxth	r3, r3
  408936:	f8c9 2000 	str.w	r2, [r9]
  40893a:	e721      	b.n	408780 <__sfvwrite_r+0x13c>
  40893c:	2301      	movs	r3, #1
  40893e:	f10a 0801 	add.w	r8, sl, #1
  408942:	9300      	str	r3, [sp, #0]
  408944:	e72e      	b.n	4087a4 <__sfvwrite_r+0x160>
  408946:	f04f 30ff 	mov.w	r0, #4294967295
  40894a:	e6ad      	b.n	4086a8 <__sfvwrite_r+0x64>
  40894c:	230c      	movs	r3, #12
  40894e:	f8c9 3000 	str.w	r3, [r9]
  408952:	89a3      	ldrh	r3, [r4, #12]
  408954:	e714      	b.n	408780 <__sfvwrite_r+0x13c>
  408956:	bf00      	nop
  408958:	7ffffc00 	.word	0x7ffffc00

0040895c <_fwalk_reent>:
  40895c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  408960:	f510 7738 	adds.w	r7, r0, #736	; 0x2e0
  408964:	d01f      	beq.n	4089a6 <_fwalk_reent+0x4a>
  408966:	4688      	mov	r8, r1
  408968:	4606      	mov	r6, r0
  40896a:	f04f 0900 	mov.w	r9, #0
  40896e:	687d      	ldr	r5, [r7, #4]
  408970:	68bc      	ldr	r4, [r7, #8]
  408972:	3d01      	subs	r5, #1
  408974:	d411      	bmi.n	40899a <_fwalk_reent+0x3e>
  408976:	89a3      	ldrh	r3, [r4, #12]
  408978:	2b01      	cmp	r3, #1
  40897a:	f105 35ff 	add.w	r5, r5, #4294967295
  40897e:	d908      	bls.n	408992 <_fwalk_reent+0x36>
  408980:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
  408984:	3301      	adds	r3, #1
  408986:	4621      	mov	r1, r4
  408988:	4630      	mov	r0, r6
  40898a:	d002      	beq.n	408992 <_fwalk_reent+0x36>
  40898c:	47c0      	blx	r8
  40898e:	ea49 0900 	orr.w	r9, r9, r0
  408992:	1c6b      	adds	r3, r5, #1
  408994:	f104 0468 	add.w	r4, r4, #104	; 0x68
  408998:	d1ed      	bne.n	408976 <_fwalk_reent+0x1a>
  40899a:	683f      	ldr	r7, [r7, #0]
  40899c:	2f00      	cmp	r7, #0
  40899e:	d1e6      	bne.n	40896e <_fwalk_reent+0x12>
  4089a0:	4648      	mov	r0, r9
  4089a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  4089a6:	46b9      	mov	r9, r7
  4089a8:	4648      	mov	r0, r9
  4089aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  4089ae:	bf00      	nop

004089b0 <__libc_init_array>:
  4089b0:	b570      	push	{r4, r5, r6, lr}
  4089b2:	4e0f      	ldr	r6, [pc, #60]	; (4089f0 <__libc_init_array+0x40>)
  4089b4:	4d0f      	ldr	r5, [pc, #60]	; (4089f4 <__libc_init_array+0x44>)
  4089b6:	1b76      	subs	r6, r6, r5
  4089b8:	10b6      	asrs	r6, r6, #2
  4089ba:	bf18      	it	ne
  4089bc:	2400      	movne	r4, #0
  4089be:	d005      	beq.n	4089cc <__libc_init_array+0x1c>
  4089c0:	3401      	adds	r4, #1
  4089c2:	f855 3b04 	ldr.w	r3, [r5], #4
  4089c6:	4798      	blx	r3
  4089c8:	42a6      	cmp	r6, r4
  4089ca:	d1f9      	bne.n	4089c0 <__libc_init_array+0x10>
  4089cc:	4e0a      	ldr	r6, [pc, #40]	; (4089f8 <__libc_init_array+0x48>)
  4089ce:	4d0b      	ldr	r5, [pc, #44]	; (4089fc <__libc_init_array+0x4c>)
  4089d0:	1b76      	subs	r6, r6, r5
  4089d2:	f009 f9e5 	bl	411da0 <_init>
  4089d6:	10b6      	asrs	r6, r6, #2
  4089d8:	bf18      	it	ne
  4089da:	2400      	movne	r4, #0
  4089dc:	d006      	beq.n	4089ec <__libc_init_array+0x3c>
  4089de:	3401      	adds	r4, #1
  4089e0:	f855 3b04 	ldr.w	r3, [r5], #4
  4089e4:	4798      	blx	r3
  4089e6:	42a6      	cmp	r6, r4
  4089e8:	d1f9      	bne.n	4089de <__libc_init_array+0x2e>
  4089ea:	bd70      	pop	{r4, r5, r6, pc}
  4089ec:	bd70      	pop	{r4, r5, r6, pc}
  4089ee:	bf00      	nop
  4089f0:	00411dac 	.word	0x00411dac
  4089f4:	00411dac 	.word	0x00411dac
  4089f8:	00411db4 	.word	0x00411db4
  4089fc:	00411dac 	.word	0x00411dac

00408a00 <iprintf>:
  408a00:	b40f      	push	{r0, r1, r2, r3}
  408a02:	b500      	push	{lr}
  408a04:	4907      	ldr	r1, [pc, #28]	; (408a24 <iprintf+0x24>)
  408a06:	b083      	sub	sp, #12
  408a08:	ab04      	add	r3, sp, #16
  408a0a:	6808      	ldr	r0, [r1, #0]
  408a0c:	f853 2b04 	ldr.w	r2, [r3], #4
  408a10:	6881      	ldr	r1, [r0, #8]
  408a12:	9301      	str	r3, [sp, #4]
  408a14:	f002 fa36 	bl	40ae84 <_vfiprintf_r>
  408a18:	b003      	add	sp, #12
  408a1a:	f85d eb04 	ldr.w	lr, [sp], #4
  408a1e:	b004      	add	sp, #16
  408a20:	4770      	bx	lr
  408a22:	bf00      	nop
  408a24:	20000440 	.word	0x20000440

00408a28 <__smakebuf_r>:
  408a28:	898b      	ldrh	r3, [r1, #12]
  408a2a:	b29a      	uxth	r2, r3
  408a2c:	f012 0f02 	tst.w	r2, #2
  408a30:	d13c      	bne.n	408aac <__smakebuf_r+0x84>
  408a32:	b5f0      	push	{r4, r5, r6, r7, lr}
  408a34:	460c      	mov	r4, r1
  408a36:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  408a3a:	2900      	cmp	r1, #0
  408a3c:	b091      	sub	sp, #68	; 0x44
  408a3e:	4605      	mov	r5, r0
  408a40:	db19      	blt.n	408a76 <__smakebuf_r+0x4e>
  408a42:	aa01      	add	r2, sp, #4
  408a44:	f7ff fdea 	bl	40861c <_fstat_r>
  408a48:	2800      	cmp	r0, #0
  408a4a:	db12      	blt.n	408a72 <__smakebuf_r+0x4a>
  408a4c:	9b02      	ldr	r3, [sp, #8]
  408a4e:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
  408a52:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
  408a56:	f5a3 5700 	sub.w	r7, r3, #8192	; 0x2000
  408a5a:	fab7 f787 	clz	r7, r7
  408a5e:	ea4f 1757 	mov.w	r7, r7, lsr #5
  408a62:	d02a      	beq.n	408aba <__smakebuf_r+0x92>
  408a64:	89a3      	ldrh	r3, [r4, #12]
  408a66:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
  408a6a:	81a3      	strh	r3, [r4, #12]
  408a6c:	f44f 6680 	mov.w	r6, #1024	; 0x400
  408a70:	e00b      	b.n	408a8a <__smakebuf_r+0x62>
  408a72:	89a3      	ldrh	r3, [r4, #12]
  408a74:	b29a      	uxth	r2, r3
  408a76:	f012 0f80 	tst.w	r2, #128	; 0x80
  408a7a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
  408a7e:	81a3      	strh	r3, [r4, #12]
  408a80:	bf0c      	ite	eq
  408a82:	f44f 6680 	moveq.w	r6, #1024	; 0x400
  408a86:	2640      	movne	r6, #64	; 0x40
  408a88:	2700      	movs	r7, #0
  408a8a:	4628      	mov	r0, r5
  408a8c:	4631      	mov	r1, r6
  408a8e:	f000 f83b 	bl	408b08 <_malloc_r>
  408a92:	89a3      	ldrh	r3, [r4, #12]
  408a94:	b340      	cbz	r0, 408ae8 <__smakebuf_r+0xc0>
  408a96:	4a1a      	ldr	r2, [pc, #104]	; (408b00 <__smakebuf_r+0xd8>)
  408a98:	63ea      	str	r2, [r5, #60]	; 0x3c
  408a9a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  408a9e:	81a3      	strh	r3, [r4, #12]
  408aa0:	6020      	str	r0, [r4, #0]
  408aa2:	6120      	str	r0, [r4, #16]
  408aa4:	6166      	str	r6, [r4, #20]
  408aa6:	b99f      	cbnz	r7, 408ad0 <__smakebuf_r+0xa8>
  408aa8:	b011      	add	sp, #68	; 0x44
  408aaa:	bdf0      	pop	{r4, r5, r6, r7, pc}
  408aac:	f101 0343 	add.w	r3, r1, #67	; 0x43
  408ab0:	2201      	movs	r2, #1
  408ab2:	600b      	str	r3, [r1, #0]
  408ab4:	610b      	str	r3, [r1, #16]
  408ab6:	614a      	str	r2, [r1, #20]
  408ab8:	4770      	bx	lr
  408aba:	4b12      	ldr	r3, [pc, #72]	; (408b04 <__smakebuf_r+0xdc>)
  408abc:	6aa2      	ldr	r2, [r4, #40]	; 0x28
  408abe:	429a      	cmp	r2, r3
  408ac0:	d1d0      	bne.n	408a64 <__smakebuf_r+0x3c>
  408ac2:	89a3      	ldrh	r3, [r4, #12]
  408ac4:	f44f 6680 	mov.w	r6, #1024	; 0x400
  408ac8:	4333      	orrs	r3, r6
  408aca:	81a3      	strh	r3, [r4, #12]
  408acc:	64e6      	str	r6, [r4, #76]	; 0x4c
  408ace:	e7dc      	b.n	408a8a <__smakebuf_r+0x62>
  408ad0:	4628      	mov	r0, r5
  408ad2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  408ad6:	f005 fb9d 	bl	40e214 <_isatty_r>
  408ada:	2800      	cmp	r0, #0
  408adc:	d0e4      	beq.n	408aa8 <__smakebuf_r+0x80>
  408ade:	89a3      	ldrh	r3, [r4, #12]
  408ae0:	f043 0301 	orr.w	r3, r3, #1
  408ae4:	81a3      	strh	r3, [r4, #12]
  408ae6:	e7df      	b.n	408aa8 <__smakebuf_r+0x80>
  408ae8:	059a      	lsls	r2, r3, #22
  408aea:	d4dd      	bmi.n	408aa8 <__smakebuf_r+0x80>
  408aec:	f104 0243 	add.w	r2, r4, #67	; 0x43
  408af0:	f043 0302 	orr.w	r3, r3, #2
  408af4:	2101      	movs	r1, #1
  408af6:	81a3      	strh	r3, [r4, #12]
  408af8:	6022      	str	r2, [r4, #0]
  408afa:	6122      	str	r2, [r4, #16]
  408afc:	6161      	str	r1, [r4, #20]
  408afe:	e7d3      	b.n	408aa8 <__smakebuf_r+0x80>
  408b00:	00408271 	.word	0x00408271
  408b04:	004098dd 	.word	0x004098dd

00408b08 <_malloc_r>:
  408b08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  408b0c:	f101 050b 	add.w	r5, r1, #11
  408b10:	2d16      	cmp	r5, #22
  408b12:	b083      	sub	sp, #12
  408b14:	4606      	mov	r6, r0
  408b16:	d927      	bls.n	408b68 <_malloc_r+0x60>
  408b18:	f035 0507 	bics.w	r5, r5, #7
  408b1c:	f100 80b6 	bmi.w	408c8c <_malloc_r+0x184>
  408b20:	42a9      	cmp	r1, r5
  408b22:	f200 80b3 	bhi.w	408c8c <_malloc_r+0x184>
  408b26:	f000 fc49 	bl	4093bc <__malloc_lock>
  408b2a:	f5b5 7ffc 	cmp.w	r5, #504	; 0x1f8
  408b2e:	d222      	bcs.n	408b76 <_malloc_r+0x6e>
  408b30:	4fc2      	ldr	r7, [pc, #776]	; (408e3c <_malloc_r+0x334>)
  408b32:	08e8      	lsrs	r0, r5, #3
  408b34:	eb07 03c0 	add.w	r3, r7, r0, lsl #3
  408b38:	68dc      	ldr	r4, [r3, #12]
  408b3a:	429c      	cmp	r4, r3
  408b3c:	f000 81c8 	beq.w	408ed0 <_malloc_r+0x3c8>
  408b40:	6863      	ldr	r3, [r4, #4]
  408b42:	68e1      	ldr	r1, [r4, #12]
  408b44:	68a5      	ldr	r5, [r4, #8]
  408b46:	f023 0303 	bic.w	r3, r3, #3
  408b4a:	4423      	add	r3, r4
  408b4c:	4630      	mov	r0, r6
  408b4e:	685a      	ldr	r2, [r3, #4]
  408b50:	60e9      	str	r1, [r5, #12]
  408b52:	f042 0201 	orr.w	r2, r2, #1
  408b56:	608d      	str	r5, [r1, #8]
  408b58:	605a      	str	r2, [r3, #4]
  408b5a:	f000 fc31 	bl	4093c0 <__malloc_unlock>
  408b5e:	3408      	adds	r4, #8
  408b60:	4620      	mov	r0, r4
  408b62:	b003      	add	sp, #12
  408b64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  408b68:	2910      	cmp	r1, #16
  408b6a:	f200 808f 	bhi.w	408c8c <_malloc_r+0x184>
  408b6e:	f000 fc25 	bl	4093bc <__malloc_lock>
  408b72:	2510      	movs	r5, #16
  408b74:	e7dc      	b.n	408b30 <_malloc_r+0x28>
  408b76:	0a68      	lsrs	r0, r5, #9
  408b78:	f000 808f 	beq.w	408c9a <_malloc_r+0x192>
  408b7c:	2804      	cmp	r0, #4
  408b7e:	f200 8154 	bhi.w	408e2a <_malloc_r+0x322>
  408b82:	09a8      	lsrs	r0, r5, #6
  408b84:	3038      	adds	r0, #56	; 0x38
  408b86:	0041      	lsls	r1, r0, #1
  408b88:	4fac      	ldr	r7, [pc, #688]	; (408e3c <_malloc_r+0x334>)
  408b8a:	eb07 0181 	add.w	r1, r7, r1, lsl #2
  408b8e:	68cc      	ldr	r4, [r1, #12]
  408b90:	42a1      	cmp	r1, r4
  408b92:	d106      	bne.n	408ba2 <_malloc_r+0x9a>
  408b94:	e00c      	b.n	408bb0 <_malloc_r+0xa8>
  408b96:	2a00      	cmp	r2, #0
  408b98:	f280 8082 	bge.w	408ca0 <_malloc_r+0x198>
  408b9c:	68e4      	ldr	r4, [r4, #12]
  408b9e:	42a1      	cmp	r1, r4
  408ba0:	d006      	beq.n	408bb0 <_malloc_r+0xa8>
  408ba2:	6863      	ldr	r3, [r4, #4]
  408ba4:	f023 0303 	bic.w	r3, r3, #3
  408ba8:	1b5a      	subs	r2, r3, r5
  408baa:	2a0f      	cmp	r2, #15
  408bac:	ddf3      	ble.n	408b96 <_malloc_r+0x8e>
  408bae:	3801      	subs	r0, #1
  408bb0:	3001      	adds	r0, #1
  408bb2:	49a2      	ldr	r1, [pc, #648]	; (408e3c <_malloc_r+0x334>)
  408bb4:	693c      	ldr	r4, [r7, #16]
  408bb6:	f101 0e08 	add.w	lr, r1, #8
  408bba:	4574      	cmp	r4, lr
  408bbc:	f000 817d 	beq.w	408eba <_malloc_r+0x3b2>
  408bc0:	6863      	ldr	r3, [r4, #4]
  408bc2:	f023 0303 	bic.w	r3, r3, #3
  408bc6:	1b5a      	subs	r2, r3, r5
  408bc8:	2a0f      	cmp	r2, #15
  408bca:	f300 8163 	bgt.w	408e94 <_malloc_r+0x38c>
  408bce:	2a00      	cmp	r2, #0
  408bd0:	f8c1 e014 	str.w	lr, [r1, #20]
  408bd4:	f8c1 e010 	str.w	lr, [r1, #16]
  408bd8:	da73      	bge.n	408cc2 <_malloc_r+0x1ba>
  408bda:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  408bde:	f080 8139 	bcs.w	408e54 <_malloc_r+0x34c>
  408be2:	08db      	lsrs	r3, r3, #3
  408be4:	eb01 08c3 	add.w	r8, r1, r3, lsl #3
  408be8:	ea4f 0ca3 	mov.w	ip, r3, asr #2
  408bec:	684a      	ldr	r2, [r1, #4]
  408bee:	f8d8 9008 	ldr.w	r9, [r8, #8]
  408bf2:	f8c4 9008 	str.w	r9, [r4, #8]
  408bf6:	2301      	movs	r3, #1
  408bf8:	fa03 f30c 	lsl.w	r3, r3, ip
  408bfc:	4313      	orrs	r3, r2
  408bfe:	f8c4 800c 	str.w	r8, [r4, #12]
  408c02:	604b      	str	r3, [r1, #4]
  408c04:	f8c8 4008 	str.w	r4, [r8, #8]
  408c08:	f8c9 400c 	str.w	r4, [r9, #12]
  408c0c:	1082      	asrs	r2, r0, #2
  408c0e:	2401      	movs	r4, #1
  408c10:	4094      	lsls	r4, r2
  408c12:	429c      	cmp	r4, r3
  408c14:	d862      	bhi.n	408cdc <_malloc_r+0x1d4>
  408c16:	4223      	tst	r3, r4
  408c18:	d106      	bne.n	408c28 <_malloc_r+0x120>
  408c1a:	f020 0003 	bic.w	r0, r0, #3
  408c1e:	0064      	lsls	r4, r4, #1
  408c20:	4223      	tst	r3, r4
  408c22:	f100 0004 	add.w	r0, r0, #4
  408c26:	d0fa      	beq.n	408c1e <_malloc_r+0x116>
  408c28:	eb07 08c0 	add.w	r8, r7, r0, lsl #3
  408c2c:	46c4      	mov	ip, r8
  408c2e:	4681      	mov	r9, r0
  408c30:	f8dc 300c 	ldr.w	r3, [ip, #12]
  408c34:	459c      	cmp	ip, r3
  408c36:	d107      	bne.n	408c48 <_malloc_r+0x140>
  408c38:	e141      	b.n	408ebe <_malloc_r+0x3b6>
  408c3a:	2900      	cmp	r1, #0
  408c3c:	f280 8151 	bge.w	408ee2 <_malloc_r+0x3da>
  408c40:	68db      	ldr	r3, [r3, #12]
  408c42:	459c      	cmp	ip, r3
  408c44:	f000 813b 	beq.w	408ebe <_malloc_r+0x3b6>
  408c48:	685a      	ldr	r2, [r3, #4]
  408c4a:	f022 0203 	bic.w	r2, r2, #3
  408c4e:	1b51      	subs	r1, r2, r5
  408c50:	290f      	cmp	r1, #15
  408c52:	ddf2      	ble.n	408c3a <_malloc_r+0x132>
  408c54:	461c      	mov	r4, r3
  408c56:	f8d3 c00c 	ldr.w	ip, [r3, #12]
  408c5a:	f854 8f08 	ldr.w	r8, [r4, #8]!
  408c5e:	195a      	adds	r2, r3, r5
  408c60:	f045 0901 	orr.w	r9, r5, #1
  408c64:	f041 0501 	orr.w	r5, r1, #1
  408c68:	f8c3 9004 	str.w	r9, [r3, #4]
  408c6c:	4630      	mov	r0, r6
  408c6e:	f8c8 c00c 	str.w	ip, [r8, #12]
  408c72:	f8cc 8008 	str.w	r8, [ip, #8]
  408c76:	617a      	str	r2, [r7, #20]
  408c78:	613a      	str	r2, [r7, #16]
  408c7a:	f8c2 e00c 	str.w	lr, [r2, #12]
  408c7e:	f8c2 e008 	str.w	lr, [r2, #8]
  408c82:	6055      	str	r5, [r2, #4]
  408c84:	5051      	str	r1, [r2, r1]
  408c86:	f000 fb9b 	bl	4093c0 <__malloc_unlock>
  408c8a:	e769      	b.n	408b60 <_malloc_r+0x58>
  408c8c:	2400      	movs	r4, #0
  408c8e:	230c      	movs	r3, #12
  408c90:	4620      	mov	r0, r4
  408c92:	6033      	str	r3, [r6, #0]
  408c94:	b003      	add	sp, #12
  408c96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  408c9a:	217e      	movs	r1, #126	; 0x7e
  408c9c:	203f      	movs	r0, #63	; 0x3f
  408c9e:	e773      	b.n	408b88 <_malloc_r+0x80>
  408ca0:	4423      	add	r3, r4
  408ca2:	68e1      	ldr	r1, [r4, #12]
  408ca4:	685a      	ldr	r2, [r3, #4]
  408ca6:	68a5      	ldr	r5, [r4, #8]
  408ca8:	f042 0201 	orr.w	r2, r2, #1
  408cac:	60e9      	str	r1, [r5, #12]
  408cae:	4630      	mov	r0, r6
  408cb0:	608d      	str	r5, [r1, #8]
  408cb2:	605a      	str	r2, [r3, #4]
  408cb4:	f000 fb84 	bl	4093c0 <__malloc_unlock>
  408cb8:	3408      	adds	r4, #8
  408cba:	4620      	mov	r0, r4
  408cbc:	b003      	add	sp, #12
  408cbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  408cc2:	4423      	add	r3, r4
  408cc4:	4630      	mov	r0, r6
  408cc6:	685a      	ldr	r2, [r3, #4]
  408cc8:	f042 0201 	orr.w	r2, r2, #1
  408ccc:	605a      	str	r2, [r3, #4]
  408cce:	f000 fb77 	bl	4093c0 <__malloc_unlock>
  408cd2:	3408      	adds	r4, #8
  408cd4:	4620      	mov	r0, r4
  408cd6:	b003      	add	sp, #12
  408cd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  408cdc:	68bc      	ldr	r4, [r7, #8]
  408cde:	6863      	ldr	r3, [r4, #4]
  408ce0:	f023 0803 	bic.w	r8, r3, #3
  408ce4:	4545      	cmp	r5, r8
  408ce6:	d804      	bhi.n	408cf2 <_malloc_r+0x1ea>
  408ce8:	ebc5 0308 	rsb	r3, r5, r8
  408cec:	2b0f      	cmp	r3, #15
  408cee:	f300 808c 	bgt.w	408e0a <_malloc_r+0x302>
  408cf2:	4b53      	ldr	r3, [pc, #332]	; (408e40 <_malloc_r+0x338>)
  408cf4:	f8df a158 	ldr.w	sl, [pc, #344]	; 408e50 <_malloc_r+0x348>
  408cf8:	681a      	ldr	r2, [r3, #0]
  408cfa:	f8da 3000 	ldr.w	r3, [sl]
  408cfe:	3301      	adds	r3, #1
  408d00:	442a      	add	r2, r5
  408d02:	eb04 0b08 	add.w	fp, r4, r8
  408d06:	f000 8150 	beq.w	408faa <_malloc_r+0x4a2>
  408d0a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
  408d0e:	320f      	adds	r2, #15
  408d10:	f422 627f 	bic.w	r2, r2, #4080	; 0xff0
  408d14:	f022 020f 	bic.w	r2, r2, #15
  408d18:	4611      	mov	r1, r2
  408d1a:	4630      	mov	r0, r6
  408d1c:	9201      	str	r2, [sp, #4]
  408d1e:	f000 fd4f 	bl	4097c0 <_sbrk_r>
  408d22:	f1b0 3fff 	cmp.w	r0, #4294967295
  408d26:	4681      	mov	r9, r0
  408d28:	9a01      	ldr	r2, [sp, #4]
  408d2a:	f000 8147 	beq.w	408fbc <_malloc_r+0x4b4>
  408d2e:	4583      	cmp	fp, r0
  408d30:	f200 80ee 	bhi.w	408f10 <_malloc_r+0x408>
  408d34:	4b43      	ldr	r3, [pc, #268]	; (408e44 <_malloc_r+0x33c>)
  408d36:	6819      	ldr	r1, [r3, #0]
  408d38:	45cb      	cmp	fp, r9
  408d3a:	4411      	add	r1, r2
  408d3c:	6019      	str	r1, [r3, #0]
  408d3e:	f000 8142 	beq.w	408fc6 <_malloc_r+0x4be>
  408d42:	f8da 0000 	ldr.w	r0, [sl]
  408d46:	f8df e108 	ldr.w	lr, [pc, #264]	; 408e50 <_malloc_r+0x348>
  408d4a:	3001      	adds	r0, #1
  408d4c:	bf1b      	ittet	ne
  408d4e:	ebcb 0b09 	rsbne	fp, fp, r9
  408d52:	4459      	addne	r1, fp
  408d54:	f8ce 9000 	streq.w	r9, [lr]
  408d58:	6019      	strne	r1, [r3, #0]
  408d5a:	f019 0107 	ands.w	r1, r9, #7
  408d5e:	f000 8107 	beq.w	408f70 <_malloc_r+0x468>
  408d62:	f1c1 0008 	rsb	r0, r1, #8
  408d66:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
  408d6a:	4481      	add	r9, r0
  408d6c:	3108      	adds	r1, #8
  408d6e:	444a      	add	r2, r9
  408d70:	f3c2 020b 	ubfx	r2, r2, #0, #12
  408d74:	ebc2 0a01 	rsb	sl, r2, r1
  408d78:	4651      	mov	r1, sl
  408d7a:	4630      	mov	r0, r6
  408d7c:	9301      	str	r3, [sp, #4]
  408d7e:	f000 fd1f 	bl	4097c0 <_sbrk_r>
  408d82:	1c43      	adds	r3, r0, #1
  408d84:	9b01      	ldr	r3, [sp, #4]
  408d86:	f000 812c 	beq.w	408fe2 <_malloc_r+0x4da>
  408d8a:	ebc9 0200 	rsb	r2, r9, r0
  408d8e:	4452      	add	r2, sl
  408d90:	f042 0201 	orr.w	r2, r2, #1
  408d94:	6819      	ldr	r1, [r3, #0]
  408d96:	f8c7 9008 	str.w	r9, [r7, #8]
  408d9a:	4451      	add	r1, sl
  408d9c:	42bc      	cmp	r4, r7
  408d9e:	f8c9 2004 	str.w	r2, [r9, #4]
  408da2:	6019      	str	r1, [r3, #0]
  408da4:	f8df a09c 	ldr.w	sl, [pc, #156]	; 408e44 <_malloc_r+0x33c>
  408da8:	d016      	beq.n	408dd8 <_malloc_r+0x2d0>
  408daa:	f1b8 0f0f 	cmp.w	r8, #15
  408dae:	f240 80ee 	bls.w	408f8e <_malloc_r+0x486>
  408db2:	6862      	ldr	r2, [r4, #4]
  408db4:	f1a8 030c 	sub.w	r3, r8, #12
  408db8:	f023 0307 	bic.w	r3, r3, #7
  408dbc:	18e0      	adds	r0, r4, r3
  408dbe:	f002 0201 	and.w	r2, r2, #1
  408dc2:	f04f 0e05 	mov.w	lr, #5
  408dc6:	431a      	orrs	r2, r3
  408dc8:	2b0f      	cmp	r3, #15
  408dca:	6062      	str	r2, [r4, #4]
  408dcc:	f8c0 e004 	str.w	lr, [r0, #4]
  408dd0:	f8c0 e008 	str.w	lr, [r0, #8]
  408dd4:	f200 8109 	bhi.w	408fea <_malloc_r+0x4e2>
  408dd8:	4b1b      	ldr	r3, [pc, #108]	; (408e48 <_malloc_r+0x340>)
  408dda:	68bc      	ldr	r4, [r7, #8]
  408ddc:	681a      	ldr	r2, [r3, #0]
  408dde:	4291      	cmp	r1, r2
  408de0:	bf88      	it	hi
  408de2:	6019      	strhi	r1, [r3, #0]
  408de4:	4b19      	ldr	r3, [pc, #100]	; (408e4c <_malloc_r+0x344>)
  408de6:	681a      	ldr	r2, [r3, #0]
  408de8:	4291      	cmp	r1, r2
  408dea:	6862      	ldr	r2, [r4, #4]
  408dec:	bf88      	it	hi
  408dee:	6019      	strhi	r1, [r3, #0]
  408df0:	f022 0203 	bic.w	r2, r2, #3
  408df4:	4295      	cmp	r5, r2
  408df6:	eba2 0305 	sub.w	r3, r2, r5
  408dfa:	d801      	bhi.n	408e00 <_malloc_r+0x2f8>
  408dfc:	2b0f      	cmp	r3, #15
  408dfe:	dc04      	bgt.n	408e0a <_malloc_r+0x302>
  408e00:	4630      	mov	r0, r6
  408e02:	f000 fadd 	bl	4093c0 <__malloc_unlock>
  408e06:	2400      	movs	r4, #0
  408e08:	e6aa      	b.n	408b60 <_malloc_r+0x58>
  408e0a:	1962      	adds	r2, r4, r5
  408e0c:	f043 0301 	orr.w	r3, r3, #1
  408e10:	f045 0501 	orr.w	r5, r5, #1
  408e14:	6065      	str	r5, [r4, #4]
  408e16:	4630      	mov	r0, r6
  408e18:	60ba      	str	r2, [r7, #8]
  408e1a:	6053      	str	r3, [r2, #4]
  408e1c:	f000 fad0 	bl	4093c0 <__malloc_unlock>
  408e20:	3408      	adds	r4, #8
  408e22:	4620      	mov	r0, r4
  408e24:	b003      	add	sp, #12
  408e26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  408e2a:	2814      	cmp	r0, #20
  408e2c:	d968      	bls.n	408f00 <_malloc_r+0x3f8>
  408e2e:	2854      	cmp	r0, #84	; 0x54
  408e30:	f200 8097 	bhi.w	408f62 <_malloc_r+0x45a>
  408e34:	0b28      	lsrs	r0, r5, #12
  408e36:	306e      	adds	r0, #110	; 0x6e
  408e38:	0041      	lsls	r1, r0, #1
  408e3a:	e6a5      	b.n	408b88 <_malloc_r+0x80>
  408e3c:	20000444 	.word	0x20000444
  408e40:	2000ae90 	.word	0x2000ae90
  408e44:	2000ae94 	.word	0x2000ae94
  408e48:	2000ae8c 	.word	0x2000ae8c
  408e4c:	2000ae88 	.word	0x2000ae88
  408e50:	20000850 	.word	0x20000850
  408e54:	0a5a      	lsrs	r2, r3, #9
  408e56:	2a04      	cmp	r2, #4
  408e58:	d955      	bls.n	408f06 <_malloc_r+0x3fe>
  408e5a:	2a14      	cmp	r2, #20
  408e5c:	f200 80a7 	bhi.w	408fae <_malloc_r+0x4a6>
  408e60:	325b      	adds	r2, #91	; 0x5b
  408e62:	ea4f 0c42 	mov.w	ip, r2, lsl #1
  408e66:	eb07 0c8c 	add.w	ip, r7, ip, lsl #2
  408e6a:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 409028 <_malloc_r+0x520>
  408e6e:	f8dc 1008 	ldr.w	r1, [ip, #8]
  408e72:	4561      	cmp	r1, ip
  408e74:	d07f      	beq.n	408f76 <_malloc_r+0x46e>
  408e76:	684a      	ldr	r2, [r1, #4]
  408e78:	f022 0203 	bic.w	r2, r2, #3
  408e7c:	4293      	cmp	r3, r2
  408e7e:	d202      	bcs.n	408e86 <_malloc_r+0x37e>
  408e80:	6889      	ldr	r1, [r1, #8]
  408e82:	458c      	cmp	ip, r1
  408e84:	d1f7      	bne.n	408e76 <_malloc_r+0x36e>
  408e86:	68ca      	ldr	r2, [r1, #12]
  408e88:	687b      	ldr	r3, [r7, #4]
  408e8a:	60e2      	str	r2, [r4, #12]
  408e8c:	60a1      	str	r1, [r4, #8]
  408e8e:	6094      	str	r4, [r2, #8]
  408e90:	60cc      	str	r4, [r1, #12]
  408e92:	e6bb      	b.n	408c0c <_malloc_r+0x104>
  408e94:	1963      	adds	r3, r4, r5
  408e96:	f042 0701 	orr.w	r7, r2, #1
  408e9a:	f045 0501 	orr.w	r5, r5, #1
  408e9e:	6065      	str	r5, [r4, #4]
  408ea0:	4630      	mov	r0, r6
  408ea2:	614b      	str	r3, [r1, #20]
  408ea4:	610b      	str	r3, [r1, #16]
  408ea6:	f8c3 e00c 	str.w	lr, [r3, #12]
  408eaa:	f8c3 e008 	str.w	lr, [r3, #8]
  408eae:	605f      	str	r7, [r3, #4]
  408eb0:	509a      	str	r2, [r3, r2]
  408eb2:	3408      	adds	r4, #8
  408eb4:	f000 fa84 	bl	4093c0 <__malloc_unlock>
  408eb8:	e652      	b.n	408b60 <_malloc_r+0x58>
  408eba:	684b      	ldr	r3, [r1, #4]
  408ebc:	e6a6      	b.n	408c0c <_malloc_r+0x104>
  408ebe:	f109 0901 	add.w	r9, r9, #1
  408ec2:	f019 0f03 	tst.w	r9, #3
  408ec6:	f10c 0c08 	add.w	ip, ip, #8
  408eca:	f47f aeb1 	bne.w	408c30 <_malloc_r+0x128>
  408ece:	e02c      	b.n	408f2a <_malloc_r+0x422>
  408ed0:	f104 0308 	add.w	r3, r4, #8
  408ed4:	6964      	ldr	r4, [r4, #20]
  408ed6:	42a3      	cmp	r3, r4
  408ed8:	bf08      	it	eq
  408eda:	3002      	addeq	r0, #2
  408edc:	f43f ae69 	beq.w	408bb2 <_malloc_r+0xaa>
  408ee0:	e62e      	b.n	408b40 <_malloc_r+0x38>
  408ee2:	441a      	add	r2, r3
  408ee4:	461c      	mov	r4, r3
  408ee6:	6851      	ldr	r1, [r2, #4]
  408ee8:	68db      	ldr	r3, [r3, #12]
  408eea:	f854 5f08 	ldr.w	r5, [r4, #8]!
  408eee:	f041 0101 	orr.w	r1, r1, #1
  408ef2:	6051      	str	r1, [r2, #4]
  408ef4:	4630      	mov	r0, r6
  408ef6:	60eb      	str	r3, [r5, #12]
  408ef8:	609d      	str	r5, [r3, #8]
  408efa:	f000 fa61 	bl	4093c0 <__malloc_unlock>
  408efe:	e62f      	b.n	408b60 <_malloc_r+0x58>
  408f00:	305b      	adds	r0, #91	; 0x5b
  408f02:	0041      	lsls	r1, r0, #1
  408f04:	e640      	b.n	408b88 <_malloc_r+0x80>
  408f06:	099a      	lsrs	r2, r3, #6
  408f08:	3238      	adds	r2, #56	; 0x38
  408f0a:	ea4f 0c42 	mov.w	ip, r2, lsl #1
  408f0e:	e7aa      	b.n	408e66 <_malloc_r+0x35e>
  408f10:	42bc      	cmp	r4, r7
  408f12:	4b45      	ldr	r3, [pc, #276]	; (409028 <_malloc_r+0x520>)
  408f14:	f43f af0e 	beq.w	408d34 <_malloc_r+0x22c>
  408f18:	689c      	ldr	r4, [r3, #8]
  408f1a:	6862      	ldr	r2, [r4, #4]
  408f1c:	f022 0203 	bic.w	r2, r2, #3
  408f20:	e768      	b.n	408df4 <_malloc_r+0x2ec>
  408f22:	f8d8 8000 	ldr.w	r8, [r8]
  408f26:	4598      	cmp	r8, r3
  408f28:	d17c      	bne.n	409024 <_malloc_r+0x51c>
  408f2a:	f010 0f03 	tst.w	r0, #3
  408f2e:	f1a8 0308 	sub.w	r3, r8, #8
  408f32:	f100 30ff 	add.w	r0, r0, #4294967295
  408f36:	d1f4      	bne.n	408f22 <_malloc_r+0x41a>
  408f38:	687b      	ldr	r3, [r7, #4]
  408f3a:	ea23 0304 	bic.w	r3, r3, r4
  408f3e:	607b      	str	r3, [r7, #4]
  408f40:	0064      	lsls	r4, r4, #1
  408f42:	429c      	cmp	r4, r3
  408f44:	f63f aeca 	bhi.w	408cdc <_malloc_r+0x1d4>
  408f48:	2c00      	cmp	r4, #0
  408f4a:	f43f aec7 	beq.w	408cdc <_malloc_r+0x1d4>
  408f4e:	4223      	tst	r3, r4
  408f50:	4648      	mov	r0, r9
  408f52:	f47f ae69 	bne.w	408c28 <_malloc_r+0x120>
  408f56:	0064      	lsls	r4, r4, #1
  408f58:	4223      	tst	r3, r4
  408f5a:	f100 0004 	add.w	r0, r0, #4
  408f5e:	d0fa      	beq.n	408f56 <_malloc_r+0x44e>
  408f60:	e662      	b.n	408c28 <_malloc_r+0x120>
  408f62:	f5b0 7faa 	cmp.w	r0, #340	; 0x154
  408f66:	d818      	bhi.n	408f9a <_malloc_r+0x492>
  408f68:	0be8      	lsrs	r0, r5, #15
  408f6a:	3077      	adds	r0, #119	; 0x77
  408f6c:	0041      	lsls	r1, r0, #1
  408f6e:	e60b      	b.n	408b88 <_malloc_r+0x80>
  408f70:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  408f74:	e6fb      	b.n	408d6e <_malloc_r+0x266>
  408f76:	f8d8 3004 	ldr.w	r3, [r8, #4]
  408f7a:	1092      	asrs	r2, r2, #2
  408f7c:	f04f 0c01 	mov.w	ip, #1
  408f80:	fa0c f202 	lsl.w	r2, ip, r2
  408f84:	4313      	orrs	r3, r2
  408f86:	f8c8 3004 	str.w	r3, [r8, #4]
  408f8a:	460a      	mov	r2, r1
  408f8c:	e77d      	b.n	408e8a <_malloc_r+0x382>
  408f8e:	2301      	movs	r3, #1
  408f90:	f8c9 3004 	str.w	r3, [r9, #4]
  408f94:	464c      	mov	r4, r9
  408f96:	2200      	movs	r2, #0
  408f98:	e72c      	b.n	408df4 <_malloc_r+0x2ec>
  408f9a:	f240 5354 	movw	r3, #1364	; 0x554
  408f9e:	4298      	cmp	r0, r3
  408fa0:	d81c      	bhi.n	408fdc <_malloc_r+0x4d4>
  408fa2:	0ca8      	lsrs	r0, r5, #18
  408fa4:	307c      	adds	r0, #124	; 0x7c
  408fa6:	0041      	lsls	r1, r0, #1
  408fa8:	e5ee      	b.n	408b88 <_malloc_r+0x80>
  408faa:	3210      	adds	r2, #16
  408fac:	e6b4      	b.n	408d18 <_malloc_r+0x210>
  408fae:	2a54      	cmp	r2, #84	; 0x54
  408fb0:	d823      	bhi.n	408ffa <_malloc_r+0x4f2>
  408fb2:	0b1a      	lsrs	r2, r3, #12
  408fb4:	326e      	adds	r2, #110	; 0x6e
  408fb6:	ea4f 0c42 	mov.w	ip, r2, lsl #1
  408fba:	e754      	b.n	408e66 <_malloc_r+0x35e>
  408fbc:	68bc      	ldr	r4, [r7, #8]
  408fbe:	6862      	ldr	r2, [r4, #4]
  408fc0:	f022 0203 	bic.w	r2, r2, #3
  408fc4:	e716      	b.n	408df4 <_malloc_r+0x2ec>
  408fc6:	f3cb 000b 	ubfx	r0, fp, #0, #12
  408fca:	2800      	cmp	r0, #0
  408fcc:	f47f aeb9 	bne.w	408d42 <_malloc_r+0x23a>
  408fd0:	4442      	add	r2, r8
  408fd2:	68bb      	ldr	r3, [r7, #8]
  408fd4:	f042 0201 	orr.w	r2, r2, #1
  408fd8:	605a      	str	r2, [r3, #4]
  408fda:	e6fd      	b.n	408dd8 <_malloc_r+0x2d0>
  408fdc:	21fc      	movs	r1, #252	; 0xfc
  408fde:	207e      	movs	r0, #126	; 0x7e
  408fe0:	e5d2      	b.n	408b88 <_malloc_r+0x80>
  408fe2:	2201      	movs	r2, #1
  408fe4:	f04f 0a00 	mov.w	sl, #0
  408fe8:	e6d4      	b.n	408d94 <_malloc_r+0x28c>
  408fea:	f104 0108 	add.w	r1, r4, #8
  408fee:	4630      	mov	r0, r6
  408ff0:	f7ff fa3c 	bl	40846c <_free_r>
  408ff4:	f8da 1000 	ldr.w	r1, [sl]
  408ff8:	e6ee      	b.n	408dd8 <_malloc_r+0x2d0>
  408ffa:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  408ffe:	d804      	bhi.n	40900a <_malloc_r+0x502>
  409000:	0bda      	lsrs	r2, r3, #15
  409002:	3277      	adds	r2, #119	; 0x77
  409004:	ea4f 0c42 	mov.w	ip, r2, lsl #1
  409008:	e72d      	b.n	408e66 <_malloc_r+0x35e>
  40900a:	f240 5154 	movw	r1, #1364	; 0x554
  40900e:	428a      	cmp	r2, r1
  409010:	d804      	bhi.n	40901c <_malloc_r+0x514>
  409012:	0c9a      	lsrs	r2, r3, #18
  409014:	327c      	adds	r2, #124	; 0x7c
  409016:	ea4f 0c42 	mov.w	ip, r2, lsl #1
  40901a:	e724      	b.n	408e66 <_malloc_r+0x35e>
  40901c:	f04f 0cfc 	mov.w	ip, #252	; 0xfc
  409020:	227e      	movs	r2, #126	; 0x7e
  409022:	e720      	b.n	408e66 <_malloc_r+0x35e>
  409024:	687b      	ldr	r3, [r7, #4]
  409026:	e78b      	b.n	408f40 <_malloc_r+0x438>
  409028:	20000444 	.word	0x20000444

0040902c <memchr>:
  40902c:	0783      	lsls	r3, r0, #30
  40902e:	b470      	push	{r4, r5, r6}
  409030:	b2c9      	uxtb	r1, r1
  409032:	d040      	beq.n	4090b6 <memchr+0x8a>
  409034:	1e54      	subs	r4, r2, #1
  409036:	2a00      	cmp	r2, #0
  409038:	d03f      	beq.n	4090ba <memchr+0x8e>
  40903a:	7803      	ldrb	r3, [r0, #0]
  40903c:	428b      	cmp	r3, r1
  40903e:	bf18      	it	ne
  409040:	1c43      	addne	r3, r0, #1
  409042:	d106      	bne.n	409052 <memchr+0x26>
  409044:	e01d      	b.n	409082 <memchr+0x56>
  409046:	b1f4      	cbz	r4, 409086 <memchr+0x5a>
  409048:	7802      	ldrb	r2, [r0, #0]
  40904a:	428a      	cmp	r2, r1
  40904c:	f104 34ff 	add.w	r4, r4, #4294967295
  409050:	d017      	beq.n	409082 <memchr+0x56>
  409052:	f013 0f03 	tst.w	r3, #3
  409056:	4618      	mov	r0, r3
  409058:	f103 0301 	add.w	r3, r3, #1
  40905c:	d1f3      	bne.n	409046 <memchr+0x1a>
  40905e:	2c03      	cmp	r4, #3
  409060:	d814      	bhi.n	40908c <memchr+0x60>
  409062:	b184      	cbz	r4, 409086 <memchr+0x5a>
  409064:	7803      	ldrb	r3, [r0, #0]
  409066:	428b      	cmp	r3, r1
  409068:	d00b      	beq.n	409082 <memchr+0x56>
  40906a:	1905      	adds	r5, r0, r4
  40906c:	1c43      	adds	r3, r0, #1
  40906e:	e002      	b.n	409076 <memchr+0x4a>
  409070:	7802      	ldrb	r2, [r0, #0]
  409072:	428a      	cmp	r2, r1
  409074:	d005      	beq.n	409082 <memchr+0x56>
  409076:	42ab      	cmp	r3, r5
  409078:	4618      	mov	r0, r3
  40907a:	f103 0301 	add.w	r3, r3, #1
  40907e:	d1f7      	bne.n	409070 <memchr+0x44>
  409080:	2000      	movs	r0, #0
  409082:	bc70      	pop	{r4, r5, r6}
  409084:	4770      	bx	lr
  409086:	4620      	mov	r0, r4
  409088:	bc70      	pop	{r4, r5, r6}
  40908a:	4770      	bx	lr
  40908c:	ea41 2601 	orr.w	r6, r1, r1, lsl #8
  409090:	4602      	mov	r2, r0
  409092:	ea46 4606 	orr.w	r6, r6, r6, lsl #16
  409096:	4610      	mov	r0, r2
  409098:	3204      	adds	r2, #4
  40909a:	6803      	ldr	r3, [r0, #0]
  40909c:	4073      	eors	r3, r6
  40909e:	f1a3 3501 	sub.w	r5, r3, #16843009	; 0x1010101
  4090a2:	ea25 0303 	bic.w	r3, r5, r3
  4090a6:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
  4090aa:	d1da      	bne.n	409062 <memchr+0x36>
  4090ac:	3c04      	subs	r4, #4
  4090ae:	2c03      	cmp	r4, #3
  4090b0:	4610      	mov	r0, r2
  4090b2:	d8f0      	bhi.n	409096 <memchr+0x6a>
  4090b4:	e7d5      	b.n	409062 <memchr+0x36>
  4090b6:	4614      	mov	r4, r2
  4090b8:	e7d1      	b.n	40905e <memchr+0x32>
  4090ba:	4610      	mov	r0, r2
  4090bc:	e7e1      	b.n	409082 <memchr+0x56>
  4090be:	bf00      	nop

004090c0 <memcmp>:
  4090c0:	2a03      	cmp	r2, #3
  4090c2:	b470      	push	{r4, r5, r6}
  4090c4:	d926      	bls.n	409114 <memcmp+0x54>
  4090c6:	ea40 0301 	orr.w	r3, r0, r1
  4090ca:	079b      	lsls	r3, r3, #30
  4090cc:	d011      	beq.n	4090f2 <memcmp+0x32>
  4090ce:	7804      	ldrb	r4, [r0, #0]
  4090d0:	780d      	ldrb	r5, [r1, #0]
  4090d2:	42ac      	cmp	r4, r5
  4090d4:	d122      	bne.n	40911c <memcmp+0x5c>
  4090d6:	4402      	add	r2, r0
  4090d8:	1c43      	adds	r3, r0, #1
  4090da:	e005      	b.n	4090e8 <memcmp+0x28>
  4090dc:	f813 4b01 	ldrb.w	r4, [r3], #1
  4090e0:	f811 5f01 	ldrb.w	r5, [r1, #1]!
  4090e4:	42ac      	cmp	r4, r5
  4090e6:	d119      	bne.n	40911c <memcmp+0x5c>
  4090e8:	4293      	cmp	r3, r2
  4090ea:	d1f7      	bne.n	4090dc <memcmp+0x1c>
  4090ec:	2000      	movs	r0, #0
  4090ee:	bc70      	pop	{r4, r5, r6}
  4090f0:	4770      	bx	lr
  4090f2:	460c      	mov	r4, r1
  4090f4:	4603      	mov	r3, r0
  4090f6:	681e      	ldr	r6, [r3, #0]
  4090f8:	6825      	ldr	r5, [r4, #0]
  4090fa:	42ae      	cmp	r6, r5
  4090fc:	4618      	mov	r0, r3
  4090fe:	4621      	mov	r1, r4
  409100:	f103 0304 	add.w	r3, r3, #4
  409104:	f104 0404 	add.w	r4, r4, #4
  409108:	d104      	bne.n	409114 <memcmp+0x54>
  40910a:	3a04      	subs	r2, #4
  40910c:	2a03      	cmp	r2, #3
  40910e:	4618      	mov	r0, r3
  409110:	4621      	mov	r1, r4
  409112:	d8f0      	bhi.n	4090f6 <memcmp+0x36>
  409114:	2a00      	cmp	r2, #0
  409116:	d1da      	bne.n	4090ce <memcmp+0xe>
  409118:	4610      	mov	r0, r2
  40911a:	e7e8      	b.n	4090ee <memcmp+0x2e>
  40911c:	1b60      	subs	r0, r4, r5
  40911e:	bc70      	pop	{r4, r5, r6}
  409120:	4770      	bx	lr
  409122:	bf00      	nop

00409124 <memcpy>:
  409124:	4684      	mov	ip, r0
  409126:	ea41 0300 	orr.w	r3, r1, r0
  40912a:	f013 0303 	ands.w	r3, r3, #3
  40912e:	d16d      	bne.n	40920c <memcpy+0xe8>
  409130:	3a40      	subs	r2, #64	; 0x40
  409132:	d341      	bcc.n	4091b8 <memcpy+0x94>
  409134:	f851 3b04 	ldr.w	r3, [r1], #4
  409138:	f840 3b04 	str.w	r3, [r0], #4
  40913c:	f851 3b04 	ldr.w	r3, [r1], #4
  409140:	f840 3b04 	str.w	r3, [r0], #4
  409144:	f851 3b04 	ldr.w	r3, [r1], #4
  409148:	f840 3b04 	str.w	r3, [r0], #4
  40914c:	f851 3b04 	ldr.w	r3, [r1], #4
  409150:	f840 3b04 	str.w	r3, [r0], #4
  409154:	f851 3b04 	ldr.w	r3, [r1], #4
  409158:	f840 3b04 	str.w	r3, [r0], #4
  40915c:	f851 3b04 	ldr.w	r3, [r1], #4
  409160:	f840 3b04 	str.w	r3, [r0], #4
  409164:	f851 3b04 	ldr.w	r3, [r1], #4
  409168:	f840 3b04 	str.w	r3, [r0], #4
  40916c:	f851 3b04 	ldr.w	r3, [r1], #4
  409170:	f840 3b04 	str.w	r3, [r0], #4
  409174:	f851 3b04 	ldr.w	r3, [r1], #4
  409178:	f840 3b04 	str.w	r3, [r0], #4
  40917c:	f851 3b04 	ldr.w	r3, [r1], #4
  409180:	f840 3b04 	str.w	r3, [r0], #4
  409184:	f851 3b04 	ldr.w	r3, [r1], #4
  409188:	f840 3b04 	str.w	r3, [r0], #4
  40918c:	f851 3b04 	ldr.w	r3, [r1], #4
  409190:	f840 3b04 	str.w	r3, [r0], #4
  409194:	f851 3b04 	ldr.w	r3, [r1], #4
  409198:	f840 3b04 	str.w	r3, [r0], #4
  40919c:	f851 3b04 	ldr.w	r3, [r1], #4
  4091a0:	f840 3b04 	str.w	r3, [r0], #4
  4091a4:	f851 3b04 	ldr.w	r3, [r1], #4
  4091a8:	f840 3b04 	str.w	r3, [r0], #4
  4091ac:	f851 3b04 	ldr.w	r3, [r1], #4
  4091b0:	f840 3b04 	str.w	r3, [r0], #4
  4091b4:	3a40      	subs	r2, #64	; 0x40
  4091b6:	d2bd      	bcs.n	409134 <memcpy+0x10>
  4091b8:	3230      	adds	r2, #48	; 0x30
  4091ba:	d311      	bcc.n	4091e0 <memcpy+0xbc>
  4091bc:	f851 3b04 	ldr.w	r3, [r1], #4
  4091c0:	f840 3b04 	str.w	r3, [r0], #4
  4091c4:	f851 3b04 	ldr.w	r3, [r1], #4
  4091c8:	f840 3b04 	str.w	r3, [r0], #4
  4091cc:	f851 3b04 	ldr.w	r3, [r1], #4
  4091d0:	f840 3b04 	str.w	r3, [r0], #4
  4091d4:	f851 3b04 	ldr.w	r3, [r1], #4
  4091d8:	f840 3b04 	str.w	r3, [r0], #4
  4091dc:	3a10      	subs	r2, #16
  4091de:	d2ed      	bcs.n	4091bc <memcpy+0x98>
  4091e0:	320c      	adds	r2, #12
  4091e2:	d305      	bcc.n	4091f0 <memcpy+0xcc>
  4091e4:	f851 3b04 	ldr.w	r3, [r1], #4
  4091e8:	f840 3b04 	str.w	r3, [r0], #4
  4091ec:	3a04      	subs	r2, #4
  4091ee:	d2f9      	bcs.n	4091e4 <memcpy+0xc0>
  4091f0:	3204      	adds	r2, #4
  4091f2:	d008      	beq.n	409206 <memcpy+0xe2>
  4091f4:	07d2      	lsls	r2, r2, #31
  4091f6:	bf1c      	itt	ne
  4091f8:	f811 3b01 	ldrbne.w	r3, [r1], #1
  4091fc:	f800 3b01 	strbne.w	r3, [r0], #1
  409200:	d301      	bcc.n	409206 <memcpy+0xe2>
  409202:	880b      	ldrh	r3, [r1, #0]
  409204:	8003      	strh	r3, [r0, #0]
  409206:	4660      	mov	r0, ip
  409208:	4770      	bx	lr
  40920a:	bf00      	nop
  40920c:	2a08      	cmp	r2, #8
  40920e:	d313      	bcc.n	409238 <memcpy+0x114>
  409210:	078b      	lsls	r3, r1, #30
  409212:	d08d      	beq.n	409130 <memcpy+0xc>
  409214:	f010 0303 	ands.w	r3, r0, #3
  409218:	d08a      	beq.n	409130 <memcpy+0xc>
  40921a:	f1c3 0304 	rsb	r3, r3, #4
  40921e:	1ad2      	subs	r2, r2, r3
  409220:	07db      	lsls	r3, r3, #31
  409222:	bf1c      	itt	ne
  409224:	f811 3b01 	ldrbne.w	r3, [r1], #1
  409228:	f800 3b01 	strbne.w	r3, [r0], #1
  40922c:	d380      	bcc.n	409130 <memcpy+0xc>
  40922e:	f831 3b02 	ldrh.w	r3, [r1], #2
  409232:	f820 3b02 	strh.w	r3, [r0], #2
  409236:	e77b      	b.n	409130 <memcpy+0xc>
  409238:	3a04      	subs	r2, #4
  40923a:	d3d9      	bcc.n	4091f0 <memcpy+0xcc>
  40923c:	3a01      	subs	r2, #1
  40923e:	f811 3b01 	ldrb.w	r3, [r1], #1
  409242:	f800 3b01 	strb.w	r3, [r0], #1
  409246:	d2f9      	bcs.n	40923c <memcpy+0x118>
  409248:	780b      	ldrb	r3, [r1, #0]
  40924a:	7003      	strb	r3, [r0, #0]
  40924c:	784b      	ldrb	r3, [r1, #1]
  40924e:	7043      	strb	r3, [r0, #1]
  409250:	788b      	ldrb	r3, [r1, #2]
  409252:	7083      	strb	r3, [r0, #2]
  409254:	4660      	mov	r0, ip
  409256:	4770      	bx	lr

00409258 <memmove>:
  409258:	4288      	cmp	r0, r1
  40925a:	b5f0      	push	{r4, r5, r6, r7, lr}
  40925c:	d90d      	bls.n	40927a <memmove+0x22>
  40925e:	188b      	adds	r3, r1, r2
  409260:	4298      	cmp	r0, r3
  409262:	d20a      	bcs.n	40927a <memmove+0x22>
  409264:	1881      	adds	r1, r0, r2
  409266:	2a00      	cmp	r2, #0
  409268:	d054      	beq.n	409314 <memmove+0xbc>
  40926a:	1a9a      	subs	r2, r3, r2
  40926c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
  409270:	f801 4d01 	strb.w	r4, [r1, #-1]!
  409274:	4293      	cmp	r3, r2
  409276:	d1f9      	bne.n	40926c <memmove+0x14>
  409278:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40927a:	2a0f      	cmp	r2, #15
  40927c:	d948      	bls.n	409310 <memmove+0xb8>
  40927e:	ea40 0301 	orr.w	r3, r0, r1
  409282:	079b      	lsls	r3, r3, #30
  409284:	d147      	bne.n	409316 <memmove+0xbe>
  409286:	f100 0410 	add.w	r4, r0, #16
  40928a:	f101 0310 	add.w	r3, r1, #16
  40928e:	4615      	mov	r5, r2
  409290:	f853 6c10 	ldr.w	r6, [r3, #-16]
  409294:	f844 6c10 	str.w	r6, [r4, #-16]
  409298:	f853 6c0c 	ldr.w	r6, [r3, #-12]
  40929c:	f844 6c0c 	str.w	r6, [r4, #-12]
  4092a0:	f853 6c08 	ldr.w	r6, [r3, #-8]
  4092a4:	f844 6c08 	str.w	r6, [r4, #-8]
  4092a8:	3d10      	subs	r5, #16
  4092aa:	f853 6c04 	ldr.w	r6, [r3, #-4]
  4092ae:	f844 6c04 	str.w	r6, [r4, #-4]
  4092b2:	2d0f      	cmp	r5, #15
  4092b4:	f103 0310 	add.w	r3, r3, #16
  4092b8:	f104 0410 	add.w	r4, r4, #16
  4092bc:	d8e8      	bhi.n	409290 <memmove+0x38>
  4092be:	f1a2 0310 	sub.w	r3, r2, #16
  4092c2:	f023 030f 	bic.w	r3, r3, #15
  4092c6:	f002 0e0f 	and.w	lr, r2, #15
  4092ca:	3310      	adds	r3, #16
  4092cc:	f1be 0f03 	cmp.w	lr, #3
  4092d0:	4419      	add	r1, r3
  4092d2:	4403      	add	r3, r0
  4092d4:	d921      	bls.n	40931a <memmove+0xc2>
  4092d6:	1f1e      	subs	r6, r3, #4
  4092d8:	460d      	mov	r5, r1
  4092da:	4674      	mov	r4, lr
  4092dc:	3c04      	subs	r4, #4
  4092de:	f855 7b04 	ldr.w	r7, [r5], #4
  4092e2:	f846 7f04 	str.w	r7, [r6, #4]!
  4092e6:	2c03      	cmp	r4, #3
  4092e8:	d8f8      	bhi.n	4092dc <memmove+0x84>
  4092ea:	f1ae 0404 	sub.w	r4, lr, #4
  4092ee:	f024 0403 	bic.w	r4, r4, #3
  4092f2:	3404      	adds	r4, #4
  4092f4:	4423      	add	r3, r4
  4092f6:	4421      	add	r1, r4
  4092f8:	f002 0203 	and.w	r2, r2, #3
  4092fc:	b152      	cbz	r2, 409314 <memmove+0xbc>
  4092fe:	3b01      	subs	r3, #1
  409300:	440a      	add	r2, r1
  409302:	f811 4b01 	ldrb.w	r4, [r1], #1
  409306:	f803 4f01 	strb.w	r4, [r3, #1]!
  40930a:	4291      	cmp	r1, r2
  40930c:	d1f9      	bne.n	409302 <memmove+0xaa>
  40930e:	bdf0      	pop	{r4, r5, r6, r7, pc}
  409310:	4603      	mov	r3, r0
  409312:	e7f3      	b.n	4092fc <memmove+0xa4>
  409314:	bdf0      	pop	{r4, r5, r6, r7, pc}
  409316:	4603      	mov	r3, r0
  409318:	e7f1      	b.n	4092fe <memmove+0xa6>
  40931a:	4672      	mov	r2, lr
  40931c:	e7ee      	b.n	4092fc <memmove+0xa4>
  40931e:	bf00      	nop

00409320 <memset>:
  409320:	b470      	push	{r4, r5, r6}
  409322:	0784      	lsls	r4, r0, #30
  409324:	d046      	beq.n	4093b4 <memset+0x94>
  409326:	1e54      	subs	r4, r2, #1
  409328:	2a00      	cmp	r2, #0
  40932a:	d041      	beq.n	4093b0 <memset+0x90>
  40932c:	b2cd      	uxtb	r5, r1
  40932e:	4603      	mov	r3, r0
  409330:	e002      	b.n	409338 <memset+0x18>
  409332:	1e62      	subs	r2, r4, #1
  409334:	b3e4      	cbz	r4, 4093b0 <memset+0x90>
  409336:	4614      	mov	r4, r2
  409338:	f803 5b01 	strb.w	r5, [r3], #1
  40933c:	079a      	lsls	r2, r3, #30
  40933e:	d1f8      	bne.n	409332 <memset+0x12>
  409340:	2c03      	cmp	r4, #3
  409342:	d92e      	bls.n	4093a2 <memset+0x82>
  409344:	b2cd      	uxtb	r5, r1
  409346:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
  40934a:	2c0f      	cmp	r4, #15
  40934c:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
  409350:	d919      	bls.n	409386 <memset+0x66>
  409352:	f103 0210 	add.w	r2, r3, #16
  409356:	4626      	mov	r6, r4
  409358:	3e10      	subs	r6, #16
  40935a:	2e0f      	cmp	r6, #15
  40935c:	f842 5c10 	str.w	r5, [r2, #-16]
  409360:	f842 5c0c 	str.w	r5, [r2, #-12]
  409364:	f842 5c08 	str.w	r5, [r2, #-8]
  409368:	f842 5c04 	str.w	r5, [r2, #-4]
  40936c:	f102 0210 	add.w	r2, r2, #16
  409370:	d8f2      	bhi.n	409358 <memset+0x38>
  409372:	f1a4 0210 	sub.w	r2, r4, #16
  409376:	f022 020f 	bic.w	r2, r2, #15
  40937a:	f004 040f 	and.w	r4, r4, #15
  40937e:	3210      	adds	r2, #16
  409380:	2c03      	cmp	r4, #3
  409382:	4413      	add	r3, r2
  409384:	d90d      	bls.n	4093a2 <memset+0x82>
  409386:	461e      	mov	r6, r3
  409388:	4622      	mov	r2, r4
  40938a:	3a04      	subs	r2, #4
  40938c:	2a03      	cmp	r2, #3
  40938e:	f846 5b04 	str.w	r5, [r6], #4
  409392:	d8fa      	bhi.n	40938a <memset+0x6a>
  409394:	1f22      	subs	r2, r4, #4
  409396:	f022 0203 	bic.w	r2, r2, #3
  40939a:	3204      	adds	r2, #4
  40939c:	4413      	add	r3, r2
  40939e:	f004 0403 	and.w	r4, r4, #3
  4093a2:	b12c      	cbz	r4, 4093b0 <memset+0x90>
  4093a4:	b2c9      	uxtb	r1, r1
  4093a6:	441c      	add	r4, r3
  4093a8:	f803 1b01 	strb.w	r1, [r3], #1
  4093ac:	42a3      	cmp	r3, r4
  4093ae:	d1fb      	bne.n	4093a8 <memset+0x88>
  4093b0:	bc70      	pop	{r4, r5, r6}
  4093b2:	4770      	bx	lr
  4093b4:	4614      	mov	r4, r2
  4093b6:	4603      	mov	r3, r0
  4093b8:	e7c2      	b.n	409340 <memset+0x20>
  4093ba:	bf00      	nop

004093bc <__malloc_lock>:
  4093bc:	4770      	bx	lr
  4093be:	bf00      	nop

004093c0 <__malloc_unlock>:
  4093c0:	4770      	bx	lr
  4093c2:	bf00      	nop

004093c4 <realloc>:
  4093c4:	4b02      	ldr	r3, [pc, #8]	; (4093d0 <realloc+0xc>)
  4093c6:	460a      	mov	r2, r1
  4093c8:	4601      	mov	r1, r0
  4093ca:	6818      	ldr	r0, [r3, #0]
  4093cc:	f000 b802 	b.w	4093d4 <_realloc_r>
  4093d0:	20000440 	.word	0x20000440

004093d4 <_realloc_r>:
  4093d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4093d8:	4617      	mov	r7, r2
  4093da:	b083      	sub	sp, #12
  4093dc:	460e      	mov	r6, r1
  4093de:	2900      	cmp	r1, #0
  4093e0:	f000 80e7 	beq.w	4095b2 <_realloc_r+0x1de>
  4093e4:	4681      	mov	r9, r0
  4093e6:	f107 050b 	add.w	r5, r7, #11
  4093ea:	f7ff ffe7 	bl	4093bc <__malloc_lock>
  4093ee:	f856 3c04 	ldr.w	r3, [r6, #-4]
  4093f2:	2d16      	cmp	r5, #22
  4093f4:	f023 0403 	bic.w	r4, r3, #3
  4093f8:	f1a6 0808 	sub.w	r8, r6, #8
  4093fc:	d84c      	bhi.n	409498 <_realloc_r+0xc4>
  4093fe:	2210      	movs	r2, #16
  409400:	4615      	mov	r5, r2
  409402:	42af      	cmp	r7, r5
  409404:	d84d      	bhi.n	4094a2 <_realloc_r+0xce>
  409406:	4294      	cmp	r4, r2
  409408:	f280 8084 	bge.w	409514 <_realloc_r+0x140>
  40940c:	f8df b3ac 	ldr.w	fp, [pc, #940]	; 4097bc <_realloc_r+0x3e8>
  409410:	f8db 0008 	ldr.w	r0, [fp, #8]
  409414:	eb08 0104 	add.w	r1, r8, r4
  409418:	4288      	cmp	r0, r1
  40941a:	f000 80d6 	beq.w	4095ca <_realloc_r+0x1f6>
  40941e:	6848      	ldr	r0, [r1, #4]
  409420:	f020 0e01 	bic.w	lr, r0, #1
  409424:	448e      	add	lr, r1
  409426:	f8de e004 	ldr.w	lr, [lr, #4]
  40942a:	f01e 0f01 	tst.w	lr, #1
  40942e:	d13f      	bne.n	4094b0 <_realloc_r+0xdc>
  409430:	f020 0003 	bic.w	r0, r0, #3
  409434:	4420      	add	r0, r4
  409436:	4290      	cmp	r0, r2
  409438:	f280 80c1 	bge.w	4095be <_realloc_r+0x1ea>
  40943c:	07db      	lsls	r3, r3, #31
  40943e:	f100 808f 	bmi.w	409560 <_realloc_r+0x18c>
  409442:	f856 3c08 	ldr.w	r3, [r6, #-8]
  409446:	ebc3 0a08 	rsb	sl, r3, r8
  40944a:	f8da 3004 	ldr.w	r3, [sl, #4]
  40944e:	f023 0303 	bic.w	r3, r3, #3
  409452:	eb00 0e03 	add.w	lr, r0, r3
  409456:	4596      	cmp	lr, r2
  409458:	db34      	blt.n	4094c4 <_realloc_r+0xf0>
  40945a:	68cb      	ldr	r3, [r1, #12]
  40945c:	688a      	ldr	r2, [r1, #8]
  40945e:	4657      	mov	r7, sl
  409460:	60d3      	str	r3, [r2, #12]
  409462:	609a      	str	r2, [r3, #8]
  409464:	f857 1f08 	ldr.w	r1, [r7, #8]!
  409468:	f8da 300c 	ldr.w	r3, [sl, #12]
  40946c:	60cb      	str	r3, [r1, #12]
  40946e:	1f22      	subs	r2, r4, #4
  409470:	2a24      	cmp	r2, #36	; 0x24
  409472:	6099      	str	r1, [r3, #8]
  409474:	f200 8136 	bhi.w	4096e4 <_realloc_r+0x310>
  409478:	2a13      	cmp	r2, #19
  40947a:	f240 80fd 	bls.w	409678 <_realloc_r+0x2a4>
  40947e:	6833      	ldr	r3, [r6, #0]
  409480:	f8ca 3008 	str.w	r3, [sl, #8]
  409484:	6873      	ldr	r3, [r6, #4]
  409486:	f8ca 300c 	str.w	r3, [sl, #12]
  40948a:	2a1b      	cmp	r2, #27
  40948c:	f200 8140 	bhi.w	409710 <_realloc_r+0x33c>
  409490:	3608      	adds	r6, #8
  409492:	f10a 0310 	add.w	r3, sl, #16
  409496:	e0f0      	b.n	40967a <_realloc_r+0x2a6>
  409498:	f025 0507 	bic.w	r5, r5, #7
  40949c:	2d00      	cmp	r5, #0
  40949e:	462a      	mov	r2, r5
  4094a0:	daaf      	bge.n	409402 <_realloc_r+0x2e>
  4094a2:	230c      	movs	r3, #12
  4094a4:	2000      	movs	r0, #0
  4094a6:	f8c9 3000 	str.w	r3, [r9]
  4094aa:	b003      	add	sp, #12
  4094ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4094b0:	07d9      	lsls	r1, r3, #31
  4094b2:	d455      	bmi.n	409560 <_realloc_r+0x18c>
  4094b4:	f856 3c08 	ldr.w	r3, [r6, #-8]
  4094b8:	ebc3 0a08 	rsb	sl, r3, r8
  4094bc:	f8da 3004 	ldr.w	r3, [sl, #4]
  4094c0:	f023 0303 	bic.w	r3, r3, #3
  4094c4:	4423      	add	r3, r4
  4094c6:	4293      	cmp	r3, r2
  4094c8:	db4a      	blt.n	409560 <_realloc_r+0x18c>
  4094ca:	4657      	mov	r7, sl
  4094cc:	f8da 100c 	ldr.w	r1, [sl, #12]
  4094d0:	f857 0f08 	ldr.w	r0, [r7, #8]!
  4094d4:	1f22      	subs	r2, r4, #4
  4094d6:	2a24      	cmp	r2, #36	; 0x24
  4094d8:	60c1      	str	r1, [r0, #12]
  4094da:	6088      	str	r0, [r1, #8]
  4094dc:	f200 810e 	bhi.w	4096fc <_realloc_r+0x328>
  4094e0:	2a13      	cmp	r2, #19
  4094e2:	f240 8109 	bls.w	4096f8 <_realloc_r+0x324>
  4094e6:	6831      	ldr	r1, [r6, #0]
  4094e8:	f8ca 1008 	str.w	r1, [sl, #8]
  4094ec:	6871      	ldr	r1, [r6, #4]
  4094ee:	f8ca 100c 	str.w	r1, [sl, #12]
  4094f2:	2a1b      	cmp	r2, #27
  4094f4:	f200 8121 	bhi.w	40973a <_realloc_r+0x366>
  4094f8:	3608      	adds	r6, #8
  4094fa:	f10a 0210 	add.w	r2, sl, #16
  4094fe:	6831      	ldr	r1, [r6, #0]
  409500:	6011      	str	r1, [r2, #0]
  409502:	6871      	ldr	r1, [r6, #4]
  409504:	6051      	str	r1, [r2, #4]
  409506:	68b1      	ldr	r1, [r6, #8]
  409508:	6091      	str	r1, [r2, #8]
  40950a:	461c      	mov	r4, r3
  40950c:	f8da 3004 	ldr.w	r3, [sl, #4]
  409510:	463e      	mov	r6, r7
  409512:	46d0      	mov	r8, sl
  409514:	1b62      	subs	r2, r4, r5
  409516:	2a0f      	cmp	r2, #15
  409518:	f003 0301 	and.w	r3, r3, #1
  40951c:	d80e      	bhi.n	40953c <_realloc_r+0x168>
  40951e:	4323      	orrs	r3, r4
  409520:	4444      	add	r4, r8
  409522:	f8c8 3004 	str.w	r3, [r8, #4]
  409526:	6863      	ldr	r3, [r4, #4]
  409528:	f043 0301 	orr.w	r3, r3, #1
  40952c:	6063      	str	r3, [r4, #4]
  40952e:	4648      	mov	r0, r9
  409530:	f7ff ff46 	bl	4093c0 <__malloc_unlock>
  409534:	4630      	mov	r0, r6
  409536:	b003      	add	sp, #12
  409538:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40953c:	eb08 0105 	add.w	r1, r8, r5
  409540:	431d      	orrs	r5, r3
  409542:	f042 0301 	orr.w	r3, r2, #1
  409546:	440a      	add	r2, r1
  409548:	f8c8 5004 	str.w	r5, [r8, #4]
  40954c:	604b      	str	r3, [r1, #4]
  40954e:	6853      	ldr	r3, [r2, #4]
  409550:	f043 0301 	orr.w	r3, r3, #1
  409554:	3108      	adds	r1, #8
  409556:	6053      	str	r3, [r2, #4]
  409558:	4648      	mov	r0, r9
  40955a:	f7fe ff87 	bl	40846c <_free_r>
  40955e:	e7e6      	b.n	40952e <_realloc_r+0x15a>
  409560:	4639      	mov	r1, r7
  409562:	4648      	mov	r0, r9
  409564:	f7ff fad0 	bl	408b08 <_malloc_r>
  409568:	4607      	mov	r7, r0
  40956a:	b1d8      	cbz	r0, 4095a4 <_realloc_r+0x1d0>
  40956c:	f856 3c04 	ldr.w	r3, [r6, #-4]
  409570:	f023 0201 	bic.w	r2, r3, #1
  409574:	4442      	add	r2, r8
  409576:	f1a0 0108 	sub.w	r1, r0, #8
  40957a:	4291      	cmp	r1, r2
  40957c:	f000 80ac 	beq.w	4096d8 <_realloc_r+0x304>
  409580:	1f22      	subs	r2, r4, #4
  409582:	2a24      	cmp	r2, #36	; 0x24
  409584:	f200 8099 	bhi.w	4096ba <_realloc_r+0x2e6>
  409588:	2a13      	cmp	r2, #19
  40958a:	d86a      	bhi.n	409662 <_realloc_r+0x28e>
  40958c:	4603      	mov	r3, r0
  40958e:	4632      	mov	r2, r6
  409590:	6811      	ldr	r1, [r2, #0]
  409592:	6019      	str	r1, [r3, #0]
  409594:	6851      	ldr	r1, [r2, #4]
  409596:	6059      	str	r1, [r3, #4]
  409598:	6892      	ldr	r2, [r2, #8]
  40959a:	609a      	str	r2, [r3, #8]
  40959c:	4631      	mov	r1, r6
  40959e:	4648      	mov	r0, r9
  4095a0:	f7fe ff64 	bl	40846c <_free_r>
  4095a4:	4648      	mov	r0, r9
  4095a6:	f7ff ff0b 	bl	4093c0 <__malloc_unlock>
  4095aa:	4638      	mov	r0, r7
  4095ac:	b003      	add	sp, #12
  4095ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4095b2:	4611      	mov	r1, r2
  4095b4:	b003      	add	sp, #12
  4095b6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4095ba:	f7ff baa5 	b.w	408b08 <_malloc_r>
  4095be:	68ca      	ldr	r2, [r1, #12]
  4095c0:	6889      	ldr	r1, [r1, #8]
  4095c2:	4604      	mov	r4, r0
  4095c4:	60ca      	str	r2, [r1, #12]
  4095c6:	6091      	str	r1, [r2, #8]
  4095c8:	e7a4      	b.n	409514 <_realloc_r+0x140>
  4095ca:	6841      	ldr	r1, [r0, #4]
  4095cc:	f021 0103 	bic.w	r1, r1, #3
  4095d0:	4421      	add	r1, r4
  4095d2:	f105 0010 	add.w	r0, r5, #16
  4095d6:	4281      	cmp	r1, r0
  4095d8:	da5b      	bge.n	409692 <_realloc_r+0x2be>
  4095da:	07db      	lsls	r3, r3, #31
  4095dc:	d4c0      	bmi.n	409560 <_realloc_r+0x18c>
  4095de:	f856 3c08 	ldr.w	r3, [r6, #-8]
  4095e2:	ebc3 0a08 	rsb	sl, r3, r8
  4095e6:	f8da 3004 	ldr.w	r3, [sl, #4]
  4095ea:	f023 0303 	bic.w	r3, r3, #3
  4095ee:	eb01 0c03 	add.w	ip, r1, r3
  4095f2:	4560      	cmp	r0, ip
  4095f4:	f73f af66 	bgt.w	4094c4 <_realloc_r+0xf0>
  4095f8:	4657      	mov	r7, sl
  4095fa:	f8da 300c 	ldr.w	r3, [sl, #12]
  4095fe:	f857 1f08 	ldr.w	r1, [r7, #8]!
  409602:	1f22      	subs	r2, r4, #4
  409604:	2a24      	cmp	r2, #36	; 0x24
  409606:	60cb      	str	r3, [r1, #12]
  409608:	6099      	str	r1, [r3, #8]
  40960a:	f200 80b8 	bhi.w	40977e <_realloc_r+0x3aa>
  40960e:	2a13      	cmp	r2, #19
  409610:	f240 80a9 	bls.w	409766 <_realloc_r+0x392>
  409614:	6833      	ldr	r3, [r6, #0]
  409616:	f8ca 3008 	str.w	r3, [sl, #8]
  40961a:	6873      	ldr	r3, [r6, #4]
  40961c:	f8ca 300c 	str.w	r3, [sl, #12]
  409620:	2a1b      	cmp	r2, #27
  409622:	f200 80b5 	bhi.w	409790 <_realloc_r+0x3bc>
  409626:	3608      	adds	r6, #8
  409628:	f10a 0310 	add.w	r3, sl, #16
  40962c:	6832      	ldr	r2, [r6, #0]
  40962e:	601a      	str	r2, [r3, #0]
  409630:	6872      	ldr	r2, [r6, #4]
  409632:	605a      	str	r2, [r3, #4]
  409634:	68b2      	ldr	r2, [r6, #8]
  409636:	609a      	str	r2, [r3, #8]
  409638:	eb0a 0205 	add.w	r2, sl, r5
  40963c:	ebc5 030c 	rsb	r3, r5, ip
  409640:	f043 0301 	orr.w	r3, r3, #1
  409644:	f8cb 2008 	str.w	r2, [fp, #8]
  409648:	6053      	str	r3, [r2, #4]
  40964a:	f8da 3004 	ldr.w	r3, [sl, #4]
  40964e:	f003 0301 	and.w	r3, r3, #1
  409652:	431d      	orrs	r5, r3
  409654:	4648      	mov	r0, r9
  409656:	f8ca 5004 	str.w	r5, [sl, #4]
  40965a:	f7ff feb1 	bl	4093c0 <__malloc_unlock>
  40965e:	4638      	mov	r0, r7
  409660:	e769      	b.n	409536 <_realloc_r+0x162>
  409662:	6833      	ldr	r3, [r6, #0]
  409664:	6003      	str	r3, [r0, #0]
  409666:	6873      	ldr	r3, [r6, #4]
  409668:	6043      	str	r3, [r0, #4]
  40966a:	2a1b      	cmp	r2, #27
  40966c:	d829      	bhi.n	4096c2 <_realloc_r+0x2ee>
  40966e:	f100 0308 	add.w	r3, r0, #8
  409672:	f106 0208 	add.w	r2, r6, #8
  409676:	e78b      	b.n	409590 <_realloc_r+0x1bc>
  409678:	463b      	mov	r3, r7
  40967a:	6832      	ldr	r2, [r6, #0]
  40967c:	601a      	str	r2, [r3, #0]
  40967e:	6872      	ldr	r2, [r6, #4]
  409680:	605a      	str	r2, [r3, #4]
  409682:	68b2      	ldr	r2, [r6, #8]
  409684:	609a      	str	r2, [r3, #8]
  409686:	463e      	mov	r6, r7
  409688:	4674      	mov	r4, lr
  40968a:	f8da 3004 	ldr.w	r3, [sl, #4]
  40968e:	46d0      	mov	r8, sl
  409690:	e740      	b.n	409514 <_realloc_r+0x140>
  409692:	eb08 0205 	add.w	r2, r8, r5
  409696:	1b4b      	subs	r3, r1, r5
  409698:	f043 0301 	orr.w	r3, r3, #1
  40969c:	f8cb 2008 	str.w	r2, [fp, #8]
  4096a0:	6053      	str	r3, [r2, #4]
  4096a2:	f856 3c04 	ldr.w	r3, [r6, #-4]
  4096a6:	f003 0301 	and.w	r3, r3, #1
  4096aa:	431d      	orrs	r5, r3
  4096ac:	4648      	mov	r0, r9
  4096ae:	f846 5c04 	str.w	r5, [r6, #-4]
  4096b2:	f7ff fe85 	bl	4093c0 <__malloc_unlock>
  4096b6:	4630      	mov	r0, r6
  4096b8:	e73d      	b.n	409536 <_realloc_r+0x162>
  4096ba:	4631      	mov	r1, r6
  4096bc:	f7ff fdcc 	bl	409258 <memmove>
  4096c0:	e76c      	b.n	40959c <_realloc_r+0x1c8>
  4096c2:	68b3      	ldr	r3, [r6, #8]
  4096c4:	6083      	str	r3, [r0, #8]
  4096c6:	68f3      	ldr	r3, [r6, #12]
  4096c8:	60c3      	str	r3, [r0, #12]
  4096ca:	2a24      	cmp	r2, #36	; 0x24
  4096cc:	d02c      	beq.n	409728 <_realloc_r+0x354>
  4096ce:	f100 0310 	add.w	r3, r0, #16
  4096d2:	f106 0210 	add.w	r2, r6, #16
  4096d6:	e75b      	b.n	409590 <_realloc_r+0x1bc>
  4096d8:	f850 2c04 	ldr.w	r2, [r0, #-4]
  4096dc:	f022 0203 	bic.w	r2, r2, #3
  4096e0:	4414      	add	r4, r2
  4096e2:	e717      	b.n	409514 <_realloc_r+0x140>
  4096e4:	4631      	mov	r1, r6
  4096e6:	4638      	mov	r0, r7
  4096e8:	4674      	mov	r4, lr
  4096ea:	463e      	mov	r6, r7
  4096ec:	f7ff fdb4 	bl	409258 <memmove>
  4096f0:	46d0      	mov	r8, sl
  4096f2:	f8da 3004 	ldr.w	r3, [sl, #4]
  4096f6:	e70d      	b.n	409514 <_realloc_r+0x140>
  4096f8:	463a      	mov	r2, r7
  4096fa:	e700      	b.n	4094fe <_realloc_r+0x12a>
  4096fc:	4631      	mov	r1, r6
  4096fe:	4638      	mov	r0, r7
  409700:	461c      	mov	r4, r3
  409702:	463e      	mov	r6, r7
  409704:	f7ff fda8 	bl	409258 <memmove>
  409708:	46d0      	mov	r8, sl
  40970a:	f8da 3004 	ldr.w	r3, [sl, #4]
  40970e:	e701      	b.n	409514 <_realloc_r+0x140>
  409710:	68b3      	ldr	r3, [r6, #8]
  409712:	f8ca 3010 	str.w	r3, [sl, #16]
  409716:	68f3      	ldr	r3, [r6, #12]
  409718:	f8ca 3014 	str.w	r3, [sl, #20]
  40971c:	2a24      	cmp	r2, #36	; 0x24
  40971e:	d018      	beq.n	409752 <_realloc_r+0x37e>
  409720:	3610      	adds	r6, #16
  409722:	f10a 0318 	add.w	r3, sl, #24
  409726:	e7a8      	b.n	40967a <_realloc_r+0x2a6>
  409728:	6933      	ldr	r3, [r6, #16]
  40972a:	6103      	str	r3, [r0, #16]
  40972c:	6973      	ldr	r3, [r6, #20]
  40972e:	6143      	str	r3, [r0, #20]
  409730:	f106 0218 	add.w	r2, r6, #24
  409734:	f100 0318 	add.w	r3, r0, #24
  409738:	e72a      	b.n	409590 <_realloc_r+0x1bc>
  40973a:	68b1      	ldr	r1, [r6, #8]
  40973c:	f8ca 1010 	str.w	r1, [sl, #16]
  409740:	68f1      	ldr	r1, [r6, #12]
  409742:	f8ca 1014 	str.w	r1, [sl, #20]
  409746:	2a24      	cmp	r2, #36	; 0x24
  409748:	d00f      	beq.n	40976a <_realloc_r+0x396>
  40974a:	3610      	adds	r6, #16
  40974c:	f10a 0218 	add.w	r2, sl, #24
  409750:	e6d5      	b.n	4094fe <_realloc_r+0x12a>
  409752:	6933      	ldr	r3, [r6, #16]
  409754:	f8ca 3018 	str.w	r3, [sl, #24]
  409758:	6973      	ldr	r3, [r6, #20]
  40975a:	f8ca 301c 	str.w	r3, [sl, #28]
  40975e:	3618      	adds	r6, #24
  409760:	f10a 0320 	add.w	r3, sl, #32
  409764:	e789      	b.n	40967a <_realloc_r+0x2a6>
  409766:	463b      	mov	r3, r7
  409768:	e760      	b.n	40962c <_realloc_r+0x258>
  40976a:	6932      	ldr	r2, [r6, #16]
  40976c:	f8ca 2018 	str.w	r2, [sl, #24]
  409770:	6972      	ldr	r2, [r6, #20]
  409772:	f8ca 201c 	str.w	r2, [sl, #28]
  409776:	3618      	adds	r6, #24
  409778:	f10a 0220 	add.w	r2, sl, #32
  40977c:	e6bf      	b.n	4094fe <_realloc_r+0x12a>
  40977e:	4631      	mov	r1, r6
  409780:	4638      	mov	r0, r7
  409782:	f8cd c004 	str.w	ip, [sp, #4]
  409786:	f7ff fd67 	bl	409258 <memmove>
  40978a:	f8dd c004 	ldr.w	ip, [sp, #4]
  40978e:	e753      	b.n	409638 <_realloc_r+0x264>
  409790:	68b3      	ldr	r3, [r6, #8]
  409792:	f8ca 3010 	str.w	r3, [sl, #16]
  409796:	68f3      	ldr	r3, [r6, #12]
  409798:	f8ca 3014 	str.w	r3, [sl, #20]
  40979c:	2a24      	cmp	r2, #36	; 0x24
  40979e:	d003      	beq.n	4097a8 <_realloc_r+0x3d4>
  4097a0:	3610      	adds	r6, #16
  4097a2:	f10a 0318 	add.w	r3, sl, #24
  4097a6:	e741      	b.n	40962c <_realloc_r+0x258>
  4097a8:	6933      	ldr	r3, [r6, #16]
  4097aa:	f8ca 3018 	str.w	r3, [sl, #24]
  4097ae:	6973      	ldr	r3, [r6, #20]
  4097b0:	f8ca 301c 	str.w	r3, [sl, #28]
  4097b4:	3618      	adds	r6, #24
  4097b6:	f10a 0320 	add.w	r3, sl, #32
  4097ba:	e737      	b.n	40962c <_realloc_r+0x258>
  4097bc:	20000444 	.word	0x20000444

004097c0 <_sbrk_r>:
  4097c0:	b538      	push	{r3, r4, r5, lr}
  4097c2:	4c07      	ldr	r4, [pc, #28]	; (4097e0 <_sbrk_r+0x20>)
  4097c4:	2300      	movs	r3, #0
  4097c6:	4605      	mov	r5, r0
  4097c8:	4608      	mov	r0, r1
  4097ca:	6023      	str	r3, [r4, #0]
  4097cc:	f7f7 fe12 	bl	4013f4 <_sbrk>
  4097d0:	1c43      	adds	r3, r0, #1
  4097d2:	d000      	beq.n	4097d6 <_sbrk_r+0x16>
  4097d4:	bd38      	pop	{r3, r4, r5, pc}
  4097d6:	6823      	ldr	r3, [r4, #0]
  4097d8:	2b00      	cmp	r3, #0
  4097da:	d0fb      	beq.n	4097d4 <_sbrk_r+0x14>
  4097dc:	602b      	str	r3, [r5, #0]
  4097de:	bd38      	pop	{r3, r4, r5, pc}
  4097e0:	2000aed8 	.word	0x2000aed8

004097e4 <snprintf>:
  4097e4:	b40c      	push	{r2, r3}
  4097e6:	b5f0      	push	{r4, r5, r6, r7, lr}
  4097e8:	4b24      	ldr	r3, [pc, #144]	; (40987c <snprintf+0x98>)
  4097ea:	2900      	cmp	r1, #0
  4097ec:	b09d      	sub	sp, #116	; 0x74
  4097ee:	681d      	ldr	r5, [r3, #0]
  4097f0:	db3e      	blt.n	409870 <snprintf+0x8c>
  4097f2:	f44f 7302 	mov.w	r3, #520	; 0x208
  4097f6:	460c      	mov	r4, r1
  4097f8:	9002      	str	r0, [sp, #8]
  4097fa:	9006      	str	r0, [sp, #24]
  4097fc:	f8ad 3014 	strh.w	r3, [sp, #20]
  409800:	ae23      	add	r6, sp, #140	; 0x8c
  409802:	d017      	beq.n	409834 <snprintf+0x50>
  409804:	1e4c      	subs	r4, r1, #1
  409806:	9a22      	ldr	r2, [sp, #136]	; 0x88
  409808:	9404      	str	r4, [sp, #16]
  40980a:	4633      	mov	r3, r6
  40980c:	f64f 77ff 	movw	r7, #65535	; 0xffff
  409810:	4628      	mov	r0, r5
  409812:	a902      	add	r1, sp, #8
  409814:	9407      	str	r4, [sp, #28]
  409816:	9601      	str	r6, [sp, #4]
  409818:	f8ad 7016 	strh.w	r7, [sp, #22]
  40981c:	f000 f8a0 	bl	409960 <_svfprintf_r>
  409820:	1c42      	adds	r2, r0, #1
  409822:	db22      	blt.n	40986a <snprintf+0x86>
  409824:	9b02      	ldr	r3, [sp, #8]
  409826:	2200      	movs	r2, #0
  409828:	701a      	strb	r2, [r3, #0]
  40982a:	b01d      	add	sp, #116	; 0x74
  40982c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
  409830:	b002      	add	sp, #8
  409832:	4770      	bx	lr
  409834:	4633      	mov	r3, r6
  409836:	f64f 77ff 	movw	r7, #65535	; 0xffff
  40983a:	4628      	mov	r0, r5
  40983c:	a902      	add	r1, sp, #8
  40983e:	9a22      	ldr	r2, [sp, #136]	; 0x88
  409840:	9404      	str	r4, [sp, #16]
  409842:	9407      	str	r4, [sp, #28]
  409844:	9601      	str	r6, [sp, #4]
  409846:	f8ad 7016 	strh.w	r7, [sp, #22]
  40984a:	f000 f889 	bl	409960 <_svfprintf_r>
  40984e:	1c43      	adds	r3, r0, #1
  409850:	db04      	blt.n	40985c <snprintf+0x78>
  409852:	b01d      	add	sp, #116	; 0x74
  409854:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
  409858:	b002      	add	sp, #8
  40985a:	4770      	bx	lr
  40985c:	238b      	movs	r3, #139	; 0x8b
  40985e:	602b      	str	r3, [r5, #0]
  409860:	b01d      	add	sp, #116	; 0x74
  409862:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
  409866:	b002      	add	sp, #8
  409868:	4770      	bx	lr
  40986a:	238b      	movs	r3, #139	; 0x8b
  40986c:	602b      	str	r3, [r5, #0]
  40986e:	e7d9      	b.n	409824 <snprintf+0x40>
  409870:	238b      	movs	r3, #139	; 0x8b
  409872:	602b      	str	r3, [r5, #0]
  409874:	f04f 30ff 	mov.w	r0, #4294967295
  409878:	e7eb      	b.n	409852 <snprintf+0x6e>
  40987a:	bf00      	nop
  40987c:	20000440 	.word	0x20000440

00409880 <__sread>:
  409880:	b510      	push	{r4, lr}
  409882:	460c      	mov	r4, r1
  409884:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  409888:	f004 ffec 	bl	40e864 <_read_r>
  40988c:	2800      	cmp	r0, #0
  40988e:	db03      	blt.n	409898 <__sread+0x18>
  409890:	6d23      	ldr	r3, [r4, #80]	; 0x50
  409892:	4403      	add	r3, r0
  409894:	6523      	str	r3, [r4, #80]	; 0x50
  409896:	bd10      	pop	{r4, pc}
  409898:	89a3      	ldrh	r3, [r4, #12]
  40989a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
  40989e:	81a3      	strh	r3, [r4, #12]
  4098a0:	bd10      	pop	{r4, pc}
  4098a2:	bf00      	nop

004098a4 <__swrite>:
  4098a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4098a8:	4616      	mov	r6, r2
  4098aa:	898a      	ldrh	r2, [r1, #12]
  4098ac:	461d      	mov	r5, r3
  4098ae:	05d3      	lsls	r3, r2, #23
  4098b0:	460c      	mov	r4, r1
  4098b2:	4607      	mov	r7, r0
  4098b4:	d506      	bpl.n	4098c4 <__swrite+0x20>
  4098b6:	2200      	movs	r2, #0
  4098b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  4098bc:	2302      	movs	r3, #2
  4098be:	f004 fcc9 	bl	40e254 <_lseek_r>
  4098c2:	89a2      	ldrh	r2, [r4, #12]
  4098c4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  4098c8:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
  4098cc:	81a2      	strh	r2, [r4, #12]
  4098ce:	4638      	mov	r0, r7
  4098d0:	4632      	mov	r2, r6
  4098d2:	462b      	mov	r3, r5
  4098d4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  4098d8:	f003 bb9c 	b.w	40d014 <_write_r>

004098dc <__sseek>:
  4098dc:	b510      	push	{r4, lr}
  4098de:	460c      	mov	r4, r1
  4098e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  4098e4:	f004 fcb6 	bl	40e254 <_lseek_r>
  4098e8:	89a3      	ldrh	r3, [r4, #12]
  4098ea:	1c42      	adds	r2, r0, #1
  4098ec:	bf0e      	itee	eq
  4098ee:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
  4098f2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
  4098f6:	6520      	strne	r0, [r4, #80]	; 0x50
  4098f8:	81a3      	strh	r3, [r4, #12]
  4098fa:	bd10      	pop	{r4, pc}

004098fc <__sclose>:
  4098fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  409900:	f003 bc16 	b.w	40d130 <_close_r>

00409904 <strlen>:
  409904:	f020 0103 	bic.w	r1, r0, #3
  409908:	f010 0003 	ands.w	r0, r0, #3
  40990c:	f1c0 0000 	rsb	r0, r0, #0
  409910:	f851 3b04 	ldr.w	r3, [r1], #4
  409914:	f100 0c04 	add.w	ip, r0, #4
  409918:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
  40991c:	f06f 0200 	mvn.w	r2, #0
  409920:	bf1c      	itt	ne
  409922:	fa22 f20c 	lsrne.w	r2, r2, ip
  409926:	4313      	orrne	r3, r2
  409928:	f04f 0c01 	mov.w	ip, #1
  40992c:	ea4c 2c0c 	orr.w	ip, ip, ip, lsl #8
  409930:	ea4c 4c0c 	orr.w	ip, ip, ip, lsl #16
  409934:	eba3 020c 	sub.w	r2, r3, ip
  409938:	ea22 0203 	bic.w	r2, r2, r3
  40993c:	ea12 12cc 	ands.w	r2, r2, ip, lsl #7
  409940:	bf04      	itt	eq
  409942:	f851 3b04 	ldreq.w	r3, [r1], #4
  409946:	3004      	addeq	r0, #4
  409948:	d0f4      	beq.n	409934 <strlen+0x30>
  40994a:	f1c2 0100 	rsb	r1, r2, #0
  40994e:	ea02 0201 	and.w	r2, r2, r1
  409952:	fab2 f282 	clz	r2, r2
  409956:	f1c2 021f 	rsb	r2, r2, #31
  40995a:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
  40995e:	4770      	bx	lr

00409960 <_svfprintf_r>:
  409960:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  409964:	b0c1      	sub	sp, #260	; 0x104
  409966:	4689      	mov	r9, r1
  409968:	920a      	str	r2, [sp, #40]	; 0x28
  40996a:	930e      	str	r3, [sp, #56]	; 0x38
  40996c:	9008      	str	r0, [sp, #32]
  40996e:	f004 fc6d 	bl	40e24c <_localeconv_r>
  409972:	6803      	ldr	r3, [r0, #0]
  409974:	9317      	str	r3, [sp, #92]	; 0x5c
  409976:	4618      	mov	r0, r3
  409978:	f7ff ffc4 	bl	409904 <strlen>
  40997c:	f8b9 300c 	ldrh.w	r3, [r9, #12]
  409980:	9018      	str	r0, [sp, #96]	; 0x60
  409982:	061a      	lsls	r2, r3, #24
  409984:	d504      	bpl.n	409990 <_svfprintf_r+0x30>
  409986:	f8d9 3010 	ldr.w	r3, [r9, #16]
  40998a:	2b00      	cmp	r3, #0
  40998c:	f001 808c 	beq.w	40aaa8 <_svfprintf_r+0x1148>
  409990:	2300      	movs	r3, #0
  409992:	af30      	add	r7, sp, #192	; 0xc0
  409994:	9313      	str	r3, [sp, #76]	; 0x4c
  409996:	9325      	str	r3, [sp, #148]	; 0x94
  409998:	9324      	str	r3, [sp, #144]	; 0x90
  40999a:	9316      	str	r3, [sp, #88]	; 0x58
  40999c:	9319      	str	r3, [sp, #100]	; 0x64
  40999e:	930b      	str	r3, [sp, #44]	; 0x2c
  4099a0:	9723      	str	r7, [sp, #140]	; 0x8c
  4099a2:	9314      	str	r3, [sp, #80]	; 0x50
  4099a4:	9315      	str	r3, [sp, #84]	; 0x54
  4099a6:	463c      	mov	r4, r7
  4099a8:	464e      	mov	r6, r9
  4099aa:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  4099ac:	782b      	ldrb	r3, [r5, #0]
  4099ae:	2b00      	cmp	r3, #0
  4099b0:	f000 80a9 	beq.w	409b06 <_svfprintf_r+0x1a6>
  4099b4:	2b25      	cmp	r3, #37	; 0x25
  4099b6:	d102      	bne.n	4099be <_svfprintf_r+0x5e>
  4099b8:	e0a5      	b.n	409b06 <_svfprintf_r+0x1a6>
  4099ba:	2b25      	cmp	r3, #37	; 0x25
  4099bc:	d003      	beq.n	4099c6 <_svfprintf_r+0x66>
  4099be:	f815 3f01 	ldrb.w	r3, [r5, #1]!
  4099c2:	2b00      	cmp	r3, #0
  4099c4:	d1f9      	bne.n	4099ba <_svfprintf_r+0x5a>
  4099c6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4099c8:	1aeb      	subs	r3, r5, r3
  4099ca:	b173      	cbz	r3, 4099ea <_svfprintf_r+0x8a>
  4099cc:	9a24      	ldr	r2, [sp, #144]	; 0x90
  4099ce:	9925      	ldr	r1, [sp, #148]	; 0x94
  4099d0:	980a      	ldr	r0, [sp, #40]	; 0x28
  4099d2:	6020      	str	r0, [r4, #0]
  4099d4:	3201      	adds	r2, #1
  4099d6:	4419      	add	r1, r3
  4099d8:	2a07      	cmp	r2, #7
  4099da:	6063      	str	r3, [r4, #4]
  4099dc:	9125      	str	r1, [sp, #148]	; 0x94
  4099de:	9224      	str	r2, [sp, #144]	; 0x90
  4099e0:	dc72      	bgt.n	409ac8 <_svfprintf_r+0x168>
  4099e2:	3408      	adds	r4, #8
  4099e4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  4099e6:	441a      	add	r2, r3
  4099e8:	920b      	str	r2, [sp, #44]	; 0x2c
  4099ea:	782b      	ldrb	r3, [r5, #0]
  4099ec:	2b00      	cmp	r3, #0
  4099ee:	f000 87b5 	beq.w	40a95c <_svfprintf_r+0xffc>
  4099f2:	2300      	movs	r3, #0
  4099f4:	1c69      	adds	r1, r5, #1
  4099f6:	786d      	ldrb	r5, [r5, #1]
  4099f8:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
  4099fc:	461a      	mov	r2, r3
  4099fe:	930c      	str	r3, [sp, #48]	; 0x30
  409a00:	9307      	str	r3, [sp, #28]
  409a02:	f04f 3aff 	mov.w	sl, #4294967295
  409a06:	1c4b      	adds	r3, r1, #1
  409a08:	f1a5 0120 	sub.w	r1, r5, #32
  409a0c:	2958      	cmp	r1, #88	; 0x58
  409a0e:	f200 83d9 	bhi.w	40a1c4 <_svfprintf_r+0x864>
  409a12:	e8df f011 	tbh	[pc, r1, lsl #1]
  409a16:	0270      	.short	0x0270
  409a18:	03d703d7 	.word	0x03d703d7
  409a1c:	03d70374 	.word	0x03d70374
  409a20:	03d703d7 	.word	0x03d703d7
  409a24:	03d703d7 	.word	0x03d703d7
  409a28:	02f003d7 	.word	0x02f003d7
  409a2c:	03d7020d 	.word	0x03d7020d
  409a30:	021101f4 	.word	0x021101f4
  409a34:	037b03d7 	.word	0x037b03d7
  409a38:	02ba02ba 	.word	0x02ba02ba
  409a3c:	02ba02ba 	.word	0x02ba02ba
  409a40:	02ba02ba 	.word	0x02ba02ba
  409a44:	02ba02ba 	.word	0x02ba02ba
  409a48:	03d702ba 	.word	0x03d702ba
  409a4c:	03d703d7 	.word	0x03d703d7
  409a50:	03d703d7 	.word	0x03d703d7
  409a54:	03d703d7 	.word	0x03d703d7
  409a58:	03d703d7 	.word	0x03d703d7
  409a5c:	02c903d7 	.word	0x02c903d7
  409a60:	03d7038b 	.word	0x03d7038b
  409a64:	03d7038b 	.word	0x03d7038b
  409a68:	03d703d7 	.word	0x03d703d7
  409a6c:	036d03d7 	.word	0x036d03d7
  409a70:	03d703d7 	.word	0x03d703d7
  409a74:	03d70305 	.word	0x03d70305
  409a78:	03d703d7 	.word	0x03d703d7
  409a7c:	03d703d7 	.word	0x03d703d7
  409a80:	03d70323 	.word	0x03d70323
  409a84:	033d03d7 	.word	0x033d03d7
  409a88:	03d703d7 	.word	0x03d703d7
  409a8c:	03d703d7 	.word	0x03d703d7
  409a90:	03d703d7 	.word	0x03d703d7
  409a94:	03d703d7 	.word	0x03d703d7
  409a98:	03d703d7 	.word	0x03d703d7
  409a9c:	022c0358 	.word	0x022c0358
  409aa0:	038b038b 	.word	0x038b038b
  409aa4:	02fe038b 	.word	0x02fe038b
  409aa8:	03d7022c 	.word	0x03d7022c
  409aac:	02e603d7 	.word	0x02e603d7
  409ab0:	027e03d7 	.word	0x027e03d7
  409ab4:	03c001fb 	.word	0x03c001fb
  409ab8:	03d70277 	.word	0x03d70277
  409abc:	03d70292 	.word	0x03d70292
  409ac0:	03d7007a 	.word	0x03d7007a
  409ac4:	024a03d7 	.word	0x024a03d7
  409ac8:	9808      	ldr	r0, [sp, #32]
  409aca:	9307      	str	r3, [sp, #28]
  409acc:	4631      	mov	r1, r6
  409ace:	aa23      	add	r2, sp, #140	; 0x8c
  409ad0:	f004 ff52 	bl	40e978 <__ssprint_r>
  409ad4:	b950      	cbnz	r0, 409aec <_svfprintf_r+0x18c>
  409ad6:	463c      	mov	r4, r7
  409ad8:	9b07      	ldr	r3, [sp, #28]
  409ada:	e783      	b.n	4099e4 <_svfprintf_r+0x84>
  409adc:	9808      	ldr	r0, [sp, #32]
  409ade:	4631      	mov	r1, r6
  409ae0:	aa23      	add	r2, sp, #140	; 0x8c
  409ae2:	f004 ff49 	bl	40e978 <__ssprint_r>
  409ae6:	2800      	cmp	r0, #0
  409ae8:	f000 8185 	beq.w	409df6 <_svfprintf_r+0x496>
  409aec:	46b1      	mov	r9, r6
  409aee:	f8b9 300c 	ldrh.w	r3, [r9, #12]
  409af2:	f013 0f40 	tst.w	r3, #64	; 0x40
  409af6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  409af8:	bf18      	it	ne
  409afa:	f04f 33ff 	movne.w	r3, #4294967295
  409afe:	4618      	mov	r0, r3
  409b00:	b041      	add	sp, #260	; 0x104
  409b02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  409b06:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  409b08:	e76f      	b.n	4099ea <_svfprintf_r+0x8a>
  409b0a:	930a      	str	r3, [sp, #40]	; 0x28
  409b0c:	9b07      	ldr	r3, [sp, #28]
  409b0e:	0698      	lsls	r0, r3, #26
  409b10:	f140 82ad 	bpl.w	40a06e <_svfprintf_r+0x70e>
  409b14:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  409b16:	f103 0907 	add.w	r9, r3, #7
  409b1a:	f029 0307 	bic.w	r3, r9, #7
  409b1e:	f103 0208 	add.w	r2, r3, #8
  409b22:	e9d3 8900 	ldrd	r8, r9, [r3]
  409b26:	920e      	str	r2, [sp, #56]	; 0x38
  409b28:	2301      	movs	r3, #1
  409b2a:	f04f 0c00 	mov.w	ip, #0
  409b2e:	f88d c06f 	strb.w	ip, [sp, #111]	; 0x6f
  409b32:	f8cd a044 	str.w	sl, [sp, #68]	; 0x44
  409b36:	f1ba 0f00 	cmp.w	sl, #0
  409b3a:	db03      	blt.n	409b44 <_svfprintf_r+0x1e4>
  409b3c:	9a07      	ldr	r2, [sp, #28]
  409b3e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
  409b42:	9207      	str	r2, [sp, #28]
  409b44:	ea58 0209 	orrs.w	r2, r8, r9
  409b48:	f040 834c 	bne.w	40a1e4 <_svfprintf_r+0x884>
  409b4c:	f1ba 0f00 	cmp.w	sl, #0
  409b50:	f000 8451 	beq.w	40a3f6 <_svfprintf_r+0xa96>
  409b54:	2b01      	cmp	r3, #1
  409b56:	f000 834f 	beq.w	40a1f8 <_svfprintf_r+0x898>
  409b5a:	2b02      	cmp	r3, #2
  409b5c:	f000 8490 	beq.w	40a480 <_svfprintf_r+0xb20>
  409b60:	4639      	mov	r1, r7
  409b62:	ea4f 02d8 	mov.w	r2, r8, lsr #3
  409b66:	ea42 7249 	orr.w	r2, r2, r9, lsl #29
  409b6a:	ea4f 00d9 	mov.w	r0, r9, lsr #3
  409b6e:	f008 0307 	and.w	r3, r8, #7
  409b72:	4681      	mov	r9, r0
  409b74:	4690      	mov	r8, r2
  409b76:	3330      	adds	r3, #48	; 0x30
  409b78:	ea58 0209 	orrs.w	r2, r8, r9
  409b7c:	f801 3d01 	strb.w	r3, [r1, #-1]!
  409b80:	d1ef      	bne.n	409b62 <_svfprintf_r+0x202>
  409b82:	9a07      	ldr	r2, [sp, #28]
  409b84:	9110      	str	r1, [sp, #64]	; 0x40
  409b86:	07d2      	lsls	r2, r2, #31
  409b88:	f100 8544 	bmi.w	40a614 <_svfprintf_r+0xcb4>
  409b8c:	1a7b      	subs	r3, r7, r1
  409b8e:	930d      	str	r3, [sp, #52]	; 0x34
  409b90:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  409b92:	4592      	cmp	sl, r2
  409b94:	4653      	mov	r3, sl
  409b96:	bfb8      	it	lt
  409b98:	4613      	movlt	r3, r2
  409b9a:	9309      	str	r3, [sp, #36]	; 0x24
  409b9c:	2300      	movs	r3, #0
  409b9e:	9312      	str	r3, [sp, #72]	; 0x48
  409ba0:	f1bc 0f00 	cmp.w	ip, #0
  409ba4:	d002      	beq.n	409bac <_svfprintf_r+0x24c>
  409ba6:	9b09      	ldr	r3, [sp, #36]	; 0x24
  409ba8:	3301      	adds	r3, #1
  409baa:	9309      	str	r3, [sp, #36]	; 0x24
  409bac:	9b07      	ldr	r3, [sp, #28]
  409bae:	f013 0302 	ands.w	r3, r3, #2
  409bb2:	930f      	str	r3, [sp, #60]	; 0x3c
  409bb4:	d002      	beq.n	409bbc <_svfprintf_r+0x25c>
  409bb6:	9b09      	ldr	r3, [sp, #36]	; 0x24
  409bb8:	3302      	adds	r3, #2
  409bba:	9309      	str	r3, [sp, #36]	; 0x24
  409bbc:	9b07      	ldr	r3, [sp, #28]
  409bbe:	f013 0984 	ands.w	r9, r3, #132	; 0x84
  409bc2:	f040 830c 	bne.w	40a1de <_svfprintf_r+0x87e>
  409bc6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  409bc8:	9a09      	ldr	r2, [sp, #36]	; 0x24
  409bca:	ebc2 0803 	rsb	r8, r2, r3
  409bce:	f1b8 0f00 	cmp.w	r8, #0
  409bd2:	f340 8304 	ble.w	40a1de <_svfprintf_r+0x87e>
  409bd6:	f1b8 0f10 	cmp.w	r8, #16
  409bda:	9925      	ldr	r1, [sp, #148]	; 0x94
  409bdc:	9a24      	ldr	r2, [sp, #144]	; 0x90
  409bde:	f8df a544 	ldr.w	sl, [pc, #1348]	; 40a124 <_svfprintf_r+0x7c4>
  409be2:	dd29      	ble.n	409c38 <_svfprintf_r+0x2d8>
  409be4:	4653      	mov	r3, sl
  409be6:	f04f 0b10 	mov.w	fp, #16
  409bea:	46c2      	mov	sl, r8
  409bec:	46a8      	mov	r8, r5
  409bee:	461d      	mov	r5, r3
  409bf0:	e006      	b.n	409c00 <_svfprintf_r+0x2a0>
  409bf2:	f1aa 0a10 	sub.w	sl, sl, #16
  409bf6:	f1ba 0f10 	cmp.w	sl, #16
  409bfa:	f104 0408 	add.w	r4, r4, #8
  409bfe:	dd17      	ble.n	409c30 <_svfprintf_r+0x2d0>
  409c00:	3201      	adds	r2, #1
  409c02:	3110      	adds	r1, #16
  409c04:	2a07      	cmp	r2, #7
  409c06:	9125      	str	r1, [sp, #148]	; 0x94
  409c08:	9224      	str	r2, [sp, #144]	; 0x90
  409c0a:	e884 0820 	stmia.w	r4, {r5, fp}
  409c0e:	ddf0      	ble.n	409bf2 <_svfprintf_r+0x292>
  409c10:	9808      	ldr	r0, [sp, #32]
  409c12:	4631      	mov	r1, r6
  409c14:	aa23      	add	r2, sp, #140	; 0x8c
  409c16:	f004 feaf 	bl	40e978 <__ssprint_r>
  409c1a:	2800      	cmp	r0, #0
  409c1c:	f47f af66 	bne.w	409aec <_svfprintf_r+0x18c>
  409c20:	f1aa 0a10 	sub.w	sl, sl, #16
  409c24:	f1ba 0f10 	cmp.w	sl, #16
  409c28:	9925      	ldr	r1, [sp, #148]	; 0x94
  409c2a:	9a24      	ldr	r2, [sp, #144]	; 0x90
  409c2c:	463c      	mov	r4, r7
  409c2e:	dce7      	bgt.n	409c00 <_svfprintf_r+0x2a0>
  409c30:	462b      	mov	r3, r5
  409c32:	4645      	mov	r5, r8
  409c34:	46d0      	mov	r8, sl
  409c36:	469a      	mov	sl, r3
  409c38:	3201      	adds	r2, #1
  409c3a:	eb08 0b01 	add.w	fp, r8, r1
  409c3e:	2a07      	cmp	r2, #7
  409c40:	f8cd b094 	str.w	fp, [sp, #148]	; 0x94
  409c44:	9224      	str	r2, [sp, #144]	; 0x90
  409c46:	f8c4 a000 	str.w	sl, [r4]
  409c4a:	f8c4 8004 	str.w	r8, [r4, #4]
  409c4e:	f300 847b 	bgt.w	40a548 <_svfprintf_r+0xbe8>
  409c52:	f89d c06f 	ldrb.w	ip, [sp, #111]	; 0x6f
  409c56:	3408      	adds	r4, #8
  409c58:	f1bc 0f00 	cmp.w	ip, #0
  409c5c:	d00f      	beq.n	409c7e <_svfprintf_r+0x31e>
  409c5e:	9b24      	ldr	r3, [sp, #144]	; 0x90
  409c60:	3301      	adds	r3, #1
  409c62:	f10b 0b01 	add.w	fp, fp, #1
  409c66:	f10d 016f 	add.w	r1, sp, #111	; 0x6f
  409c6a:	2201      	movs	r2, #1
  409c6c:	2b07      	cmp	r3, #7
  409c6e:	f8cd b094 	str.w	fp, [sp, #148]	; 0x94
  409c72:	9324      	str	r3, [sp, #144]	; 0x90
  409c74:	e884 0006 	stmia.w	r4, {r1, r2}
  409c78:	f300 83da 	bgt.w	40a430 <_svfprintf_r+0xad0>
  409c7c:	3408      	adds	r4, #8
  409c7e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  409c80:	b173      	cbz	r3, 409ca0 <_svfprintf_r+0x340>
  409c82:	9b24      	ldr	r3, [sp, #144]	; 0x90
  409c84:	3301      	adds	r3, #1
  409c86:	f10b 0b02 	add.w	fp, fp, #2
  409c8a:	a91c      	add	r1, sp, #112	; 0x70
  409c8c:	2202      	movs	r2, #2
  409c8e:	2b07      	cmp	r3, #7
  409c90:	f8cd b094 	str.w	fp, [sp, #148]	; 0x94
  409c94:	9324      	str	r3, [sp, #144]	; 0x90
  409c96:	e884 0006 	stmia.w	r4, {r1, r2}
  409c9a:	f300 83d5 	bgt.w	40a448 <_svfprintf_r+0xae8>
  409c9e:	3408      	adds	r4, #8
  409ca0:	f1b9 0f80 	cmp.w	r9, #128	; 0x80
  409ca4:	f000 8311 	beq.w	40a2ca <_svfprintf_r+0x96a>
  409ca8:	9b11      	ldr	r3, [sp, #68]	; 0x44
  409caa:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  409cac:	ebc2 0a03 	rsb	sl, r2, r3
  409cb0:	f1ba 0f00 	cmp.w	sl, #0
  409cb4:	dd3c      	ble.n	409d30 <_svfprintf_r+0x3d0>
  409cb6:	f1ba 0f10 	cmp.w	sl, #16
  409cba:	9a24      	ldr	r2, [sp, #144]	; 0x90
  409cbc:	f8df 9468 	ldr.w	r9, [pc, #1128]	; 40a128 <_svfprintf_r+0x7c8>
  409cc0:	dd2b      	ble.n	409d1a <_svfprintf_r+0x3ba>
  409cc2:	4649      	mov	r1, r9
  409cc4:	465b      	mov	r3, fp
  409cc6:	46a9      	mov	r9, r5
  409cc8:	f04f 0810 	mov.w	r8, #16
  409ccc:	f8dd b020 	ldr.w	fp, [sp, #32]
  409cd0:	460d      	mov	r5, r1
  409cd2:	e006      	b.n	409ce2 <_svfprintf_r+0x382>
  409cd4:	f1aa 0a10 	sub.w	sl, sl, #16
  409cd8:	f1ba 0f10 	cmp.w	sl, #16
  409cdc:	f104 0408 	add.w	r4, r4, #8
  409ce0:	dd17      	ble.n	409d12 <_svfprintf_r+0x3b2>
  409ce2:	3201      	adds	r2, #1
  409ce4:	3310      	adds	r3, #16
  409ce6:	2a07      	cmp	r2, #7
  409ce8:	9325      	str	r3, [sp, #148]	; 0x94
  409cea:	9224      	str	r2, [sp, #144]	; 0x90
  409cec:	e884 0120 	stmia.w	r4, {r5, r8}
  409cf0:	ddf0      	ble.n	409cd4 <_svfprintf_r+0x374>
  409cf2:	4658      	mov	r0, fp
  409cf4:	4631      	mov	r1, r6
  409cf6:	aa23      	add	r2, sp, #140	; 0x8c
  409cf8:	f004 fe3e 	bl	40e978 <__ssprint_r>
  409cfc:	2800      	cmp	r0, #0
  409cfe:	f47f aef5 	bne.w	409aec <_svfprintf_r+0x18c>
  409d02:	f1aa 0a10 	sub.w	sl, sl, #16
  409d06:	f1ba 0f10 	cmp.w	sl, #16
  409d0a:	9b25      	ldr	r3, [sp, #148]	; 0x94
  409d0c:	9a24      	ldr	r2, [sp, #144]	; 0x90
  409d0e:	463c      	mov	r4, r7
  409d10:	dce7      	bgt.n	409ce2 <_svfprintf_r+0x382>
  409d12:	469b      	mov	fp, r3
  409d14:	462b      	mov	r3, r5
  409d16:	464d      	mov	r5, r9
  409d18:	4699      	mov	r9, r3
  409d1a:	3201      	adds	r2, #1
  409d1c:	44d3      	add	fp, sl
  409d1e:	2a07      	cmp	r2, #7
  409d20:	f8cd b094 	str.w	fp, [sp, #148]	; 0x94
  409d24:	9224      	str	r2, [sp, #144]	; 0x90
  409d26:	e884 0600 	stmia.w	r4, {r9, sl}
  409d2a:	f300 8375 	bgt.w	40a418 <_svfprintf_r+0xab8>
  409d2e:	3408      	adds	r4, #8
  409d30:	9b07      	ldr	r3, [sp, #28]
  409d32:	05d9      	lsls	r1, r3, #23
  409d34:	f100 826c 	bmi.w	40a210 <_svfprintf_r+0x8b0>
  409d38:	9b24      	ldr	r3, [sp, #144]	; 0x90
  409d3a:	990d      	ldr	r1, [sp, #52]	; 0x34
  409d3c:	9a10      	ldr	r2, [sp, #64]	; 0x40
  409d3e:	6022      	str	r2, [r4, #0]
  409d40:	3301      	adds	r3, #1
  409d42:	448b      	add	fp, r1
  409d44:	2b07      	cmp	r3, #7
  409d46:	f8cd b094 	str.w	fp, [sp, #148]	; 0x94
  409d4a:	6061      	str	r1, [r4, #4]
  409d4c:	9324      	str	r3, [sp, #144]	; 0x90
  409d4e:	f300 8346 	bgt.w	40a3de <_svfprintf_r+0xa7e>
  409d52:	3408      	adds	r4, #8
  409d54:	9b07      	ldr	r3, [sp, #28]
  409d56:	075a      	lsls	r2, r3, #29
  409d58:	d541      	bpl.n	409dde <_svfprintf_r+0x47e>
  409d5a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  409d5c:	9a09      	ldr	r2, [sp, #36]	; 0x24
  409d5e:	1a9d      	subs	r5, r3, r2
  409d60:	2d00      	cmp	r5, #0
  409d62:	dd3c      	ble.n	409dde <_svfprintf_r+0x47e>
  409d64:	2d10      	cmp	r5, #16
  409d66:	9b24      	ldr	r3, [sp, #144]	; 0x90
  409d68:	f8df a3b8 	ldr.w	sl, [pc, #952]	; 40a124 <_svfprintf_r+0x7c4>
  409d6c:	dd23      	ble.n	409db6 <_svfprintf_r+0x456>
  409d6e:	f04f 0810 	mov.w	r8, #16
  409d72:	465a      	mov	r2, fp
  409d74:	f8dd 9020 	ldr.w	r9, [sp, #32]
  409d78:	e004      	b.n	409d84 <_svfprintf_r+0x424>
  409d7a:	3d10      	subs	r5, #16
  409d7c:	2d10      	cmp	r5, #16
  409d7e:	f104 0408 	add.w	r4, r4, #8
  409d82:	dd17      	ble.n	409db4 <_svfprintf_r+0x454>
  409d84:	3301      	adds	r3, #1
  409d86:	3210      	adds	r2, #16
  409d88:	2b07      	cmp	r3, #7
  409d8a:	9225      	str	r2, [sp, #148]	; 0x94
  409d8c:	9324      	str	r3, [sp, #144]	; 0x90
  409d8e:	f8c4 a000 	str.w	sl, [r4]
  409d92:	f8c4 8004 	str.w	r8, [r4, #4]
  409d96:	ddf0      	ble.n	409d7a <_svfprintf_r+0x41a>
  409d98:	4648      	mov	r0, r9
  409d9a:	4631      	mov	r1, r6
  409d9c:	aa23      	add	r2, sp, #140	; 0x8c
  409d9e:	f004 fdeb 	bl	40e978 <__ssprint_r>
  409da2:	2800      	cmp	r0, #0
  409da4:	f47f aea2 	bne.w	409aec <_svfprintf_r+0x18c>
  409da8:	3d10      	subs	r5, #16
  409daa:	2d10      	cmp	r5, #16
  409dac:	9a25      	ldr	r2, [sp, #148]	; 0x94
  409dae:	9b24      	ldr	r3, [sp, #144]	; 0x90
  409db0:	463c      	mov	r4, r7
  409db2:	dce7      	bgt.n	409d84 <_svfprintf_r+0x424>
  409db4:	4693      	mov	fp, r2
  409db6:	3301      	adds	r3, #1
  409db8:	44ab      	add	fp, r5
  409dba:	2b07      	cmp	r3, #7
  409dbc:	f8cd b094 	str.w	fp, [sp, #148]	; 0x94
  409dc0:	9324      	str	r3, [sp, #144]	; 0x90
  409dc2:	f8c4 a000 	str.w	sl, [r4]
  409dc6:	6065      	str	r5, [r4, #4]
  409dc8:	dd09      	ble.n	409dde <_svfprintf_r+0x47e>
  409dca:	9808      	ldr	r0, [sp, #32]
  409dcc:	4631      	mov	r1, r6
  409dce:	aa23      	add	r2, sp, #140	; 0x8c
  409dd0:	f004 fdd2 	bl	40e978 <__ssprint_r>
  409dd4:	2800      	cmp	r0, #0
  409dd6:	f47f ae89 	bne.w	409aec <_svfprintf_r+0x18c>
  409dda:	f8dd b094 	ldr.w	fp, [sp, #148]	; 0x94
  409dde:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  409de0:	9a09      	ldr	r2, [sp, #36]	; 0x24
  409de2:	990c      	ldr	r1, [sp, #48]	; 0x30
  409de4:	428a      	cmp	r2, r1
  409de6:	bfac      	ite	ge
  409de8:	189b      	addge	r3, r3, r2
  409dea:	185b      	addlt	r3, r3, r1
  409dec:	930b      	str	r3, [sp, #44]	; 0x2c
  409dee:	f1bb 0f00 	cmp.w	fp, #0
  409df2:	f47f ae73 	bne.w	409adc <_svfprintf_r+0x17c>
  409df6:	2300      	movs	r3, #0
  409df8:	9324      	str	r3, [sp, #144]	; 0x90
  409dfa:	463c      	mov	r4, r7
  409dfc:	e5d5      	b.n	4099aa <_svfprintf_r+0x4a>
  409dfe:	4619      	mov	r1, r3
  409e00:	9807      	ldr	r0, [sp, #28]
  409e02:	781d      	ldrb	r5, [r3, #0]
  409e04:	f040 0004 	orr.w	r0, r0, #4
  409e08:	9007      	str	r0, [sp, #28]
  409e0a:	e5fc      	b.n	409a06 <_svfprintf_r+0xa6>
  409e0c:	930a      	str	r3, [sp, #40]	; 0x28
  409e0e:	9b07      	ldr	r3, [sp, #28]
  409e10:	f013 0320 	ands.w	r3, r3, #32
  409e14:	f000 810e 	beq.w	40a034 <_svfprintf_r+0x6d4>
  409e18:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  409e1a:	f103 0907 	add.w	r9, r3, #7
  409e1e:	f029 0307 	bic.w	r3, r9, #7
  409e22:	f103 0208 	add.w	r2, r3, #8
  409e26:	e9d3 8900 	ldrd	r8, r9, [r3]
  409e2a:	920e      	str	r2, [sp, #56]	; 0x38
  409e2c:	2300      	movs	r3, #0
  409e2e:	e67c      	b.n	409b2a <_svfprintf_r+0x1ca>
  409e30:	781d      	ldrb	r5, [r3, #0]
  409e32:	4619      	mov	r1, r3
  409e34:	222b      	movs	r2, #43	; 0x2b
  409e36:	e5e6      	b.n	409a06 <_svfprintf_r+0xa6>
  409e38:	781d      	ldrb	r5, [r3, #0]
  409e3a:	2d2a      	cmp	r5, #42	; 0x2a
  409e3c:	f103 0101 	add.w	r1, r3, #1
  409e40:	f000 87ad 	beq.w	40ad9e <_svfprintf_r+0x143e>
  409e44:	f1a5 0030 	sub.w	r0, r5, #48	; 0x30
  409e48:	2809      	cmp	r0, #9
  409e4a:	460b      	mov	r3, r1
  409e4c:	f04f 0a00 	mov.w	sl, #0
  409e50:	f63f adda 	bhi.w	409a08 <_svfprintf_r+0xa8>
  409e54:	f813 5b01 	ldrb.w	r5, [r3], #1
  409e58:	eb0a 0a8a 	add.w	sl, sl, sl, lsl #2
  409e5c:	eb00 0a4a 	add.w	sl, r0, sl, lsl #1
  409e60:	f1a5 0030 	sub.w	r0, r5, #48	; 0x30
  409e64:	2809      	cmp	r0, #9
  409e66:	d9f5      	bls.n	409e54 <_svfprintf_r+0x4f4>
  409e68:	ea4a 7aea 	orr.w	sl, sl, sl, asr #31
  409e6c:	e5cc      	b.n	409a08 <_svfprintf_r+0xa8>
  409e6e:	930a      	str	r3, [sp, #40]	; 0x28
  409e70:	9b07      	ldr	r3, [sp, #28]
  409e72:	f88d 206f 	strb.w	r2, [sp, #111]	; 0x6f
  409e76:	069b      	lsls	r3, r3, #26
  409e78:	f140 80a1 	bpl.w	409fbe <_svfprintf_r+0x65e>
  409e7c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  409e7e:	f103 0907 	add.w	r9, r3, #7
  409e82:	f029 0907 	bic.w	r9, r9, #7
  409e86:	e9d9 2300 	ldrd	r2, r3, [r9]
  409e8a:	f109 0108 	add.w	r1, r9, #8
  409e8e:	910e      	str	r1, [sp, #56]	; 0x38
  409e90:	4690      	mov	r8, r2
  409e92:	4699      	mov	r9, r3
  409e94:	2a00      	cmp	r2, #0
  409e96:	f173 0300 	sbcs.w	r3, r3, #0
  409e9a:	f2c0 840b 	blt.w	40a6b4 <_svfprintf_r+0xd54>
  409e9e:	f89d c06f 	ldrb.w	ip, [sp, #111]	; 0x6f
  409ea2:	f8cd a044 	str.w	sl, [sp, #68]	; 0x44
  409ea6:	2301      	movs	r3, #1
  409ea8:	e645      	b.n	409b36 <_svfprintf_r+0x1d6>
  409eaa:	930a      	str	r3, [sp, #40]	; 0x28
  409eac:	4b9b      	ldr	r3, [pc, #620]	; (40a11c <_svfprintf_r+0x7bc>)
  409eae:	9316      	str	r3, [sp, #88]	; 0x58
  409eb0:	9b07      	ldr	r3, [sp, #28]
  409eb2:	f88d 206f 	strb.w	r2, [sp, #111]	; 0x6f
  409eb6:	069b      	lsls	r3, r3, #26
  409eb8:	f140 80f3 	bpl.w	40a0a2 <_svfprintf_r+0x742>
  409ebc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  409ebe:	f103 0907 	add.w	r9, r3, #7
  409ec2:	f029 0307 	bic.w	r3, r9, #7
  409ec6:	e9d3 8900 	ldrd	r8, r9, [r3]
  409eca:	f103 0208 	add.w	r2, r3, #8
  409ece:	920e      	str	r2, [sp, #56]	; 0x38
  409ed0:	9b07      	ldr	r3, [sp, #28]
  409ed2:	07d9      	lsls	r1, r3, #31
  409ed4:	f140 80f5 	bpl.w	40a0c2 <_svfprintf_r+0x762>
  409ed8:	ea58 0309 	orrs.w	r3, r8, r9
  409edc:	f000 80f1 	beq.w	40a0c2 <_svfprintf_r+0x762>
  409ee0:	9a07      	ldr	r2, [sp, #28]
  409ee2:	f88d 5071 	strb.w	r5, [sp, #113]	; 0x71
  409ee6:	2330      	movs	r3, #48	; 0x30
  409ee8:	f042 0202 	orr.w	r2, r2, #2
  409eec:	f88d 3070 	strb.w	r3, [sp, #112]	; 0x70
  409ef0:	9207      	str	r2, [sp, #28]
  409ef2:	2302      	movs	r3, #2
  409ef4:	e619      	b.n	409b2a <_svfprintf_r+0x1ca>
  409ef6:	781d      	ldrb	r5, [r3, #0]
  409ef8:	4619      	mov	r1, r3
  409efa:	2a00      	cmp	r2, #0
  409efc:	f47f ad83 	bne.w	409a06 <_svfprintf_r+0xa6>
  409f00:	2220      	movs	r2, #32
  409f02:	e580      	b.n	409a06 <_svfprintf_r+0xa6>
  409f04:	9907      	ldr	r1, [sp, #28]
  409f06:	f041 0120 	orr.w	r1, r1, #32
  409f0a:	9107      	str	r1, [sp, #28]
  409f0c:	781d      	ldrb	r5, [r3, #0]
  409f0e:	4619      	mov	r1, r3
  409f10:	e579      	b.n	409a06 <_svfprintf_r+0xa6>
  409f12:	930a      	str	r3, [sp, #40]	; 0x28
  409f14:	9b07      	ldr	r3, [sp, #28]
  409f16:	f88d 206f 	strb.w	r2, [sp, #111]	; 0x6f
  409f1a:	069a      	lsls	r2, r3, #26
  409f1c:	f140 84a1 	bpl.w	40a862 <_svfprintf_r+0xf02>
  409f20:	990b      	ldr	r1, [sp, #44]	; 0x2c
  409f22:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  409f24:	ea4f 79e1 	mov.w	r9, r1, asr #31
  409f28:	6813      	ldr	r3, [r2, #0]
  409f2a:	4608      	mov	r0, r1
  409f2c:	4688      	mov	r8, r1
  409f2e:	3204      	adds	r2, #4
  409f30:	4649      	mov	r1, r9
  409f32:	920e      	str	r2, [sp, #56]	; 0x38
  409f34:	e9c3 0100 	strd	r0, r1, [r3]
  409f38:	e537      	b.n	4099aa <_svfprintf_r+0x4a>
  409f3a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  409f3c:	930a      	str	r3, [sp, #40]	; 0x28
  409f3e:	6813      	ldr	r3, [r2, #0]
  409f40:	9310      	str	r3, [sp, #64]	; 0x40
  409f42:	f04f 0b00 	mov.w	fp, #0
  409f46:	f88d b06f 	strb.w	fp, [sp, #111]	; 0x6f
  409f4a:	f102 0904 	add.w	r9, r2, #4
  409f4e:	2b00      	cmp	r3, #0
  409f50:	f000 863b 	beq.w	40abca <_svfprintf_r+0x126a>
  409f54:	f1ba 0f00 	cmp.w	sl, #0
  409f58:	9810      	ldr	r0, [sp, #64]	; 0x40
  409f5a:	f2c0 85e9 	blt.w	40ab30 <_svfprintf_r+0x11d0>
  409f5e:	4659      	mov	r1, fp
  409f60:	4652      	mov	r2, sl
  409f62:	f7ff f863 	bl	40902c <memchr>
  409f66:	2800      	cmp	r0, #0
  409f68:	f000 866c 	beq.w	40ac44 <_svfprintf_r+0x12e4>
  409f6c:	9b10      	ldr	r3, [sp, #64]	; 0x40
  409f6e:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
  409f72:	1ac3      	subs	r3, r0, r3
  409f74:	930d      	str	r3, [sp, #52]	; 0x34
  409f76:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
  409f7a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  409f7e:	9309      	str	r3, [sp, #36]	; 0x24
  409f80:	f8cd b048 	str.w	fp, [sp, #72]	; 0x48
  409f84:	f89d c06f 	ldrb.w	ip, [sp, #111]	; 0x6f
  409f88:	e60a      	b.n	409ba0 <_svfprintf_r+0x240>
  409f8a:	f1a5 0030 	sub.w	r0, r5, #48	; 0x30
  409f8e:	2100      	movs	r1, #0
  409f90:	f813 5b01 	ldrb.w	r5, [r3], #1
  409f94:	eb01 0181 	add.w	r1, r1, r1, lsl #2
  409f98:	eb00 0141 	add.w	r1, r0, r1, lsl #1
  409f9c:	f1a5 0030 	sub.w	r0, r5, #48	; 0x30
  409fa0:	2809      	cmp	r0, #9
  409fa2:	d9f5      	bls.n	409f90 <_svfprintf_r+0x630>
  409fa4:	910c      	str	r1, [sp, #48]	; 0x30
  409fa6:	e52f      	b.n	409a08 <_svfprintf_r+0xa8>
  409fa8:	930a      	str	r3, [sp, #40]	; 0x28
  409faa:	9b07      	ldr	r3, [sp, #28]
  409fac:	f88d 206f 	strb.w	r2, [sp, #111]	; 0x6f
  409fb0:	f043 0310 	orr.w	r3, r3, #16
  409fb4:	9307      	str	r3, [sp, #28]
  409fb6:	9b07      	ldr	r3, [sp, #28]
  409fb8:	069b      	lsls	r3, r3, #26
  409fba:	f53f af5f 	bmi.w	409e7c <_svfprintf_r+0x51c>
  409fbe:	9b07      	ldr	r3, [sp, #28]
  409fc0:	06d8      	lsls	r0, r3, #27
  409fc2:	f100 8368 	bmi.w	40a696 <_svfprintf_r+0xd36>
  409fc6:	9b07      	ldr	r3, [sp, #28]
  409fc8:	0659      	lsls	r1, r3, #25
  409fca:	f140 8364 	bpl.w	40a696 <_svfprintf_r+0xd36>
  409fce:	990e      	ldr	r1, [sp, #56]	; 0x38
  409fd0:	f9b1 8000 	ldrsh.w	r8, [r1]
  409fd4:	3104      	adds	r1, #4
  409fd6:	ea4f 79e8 	mov.w	r9, r8, asr #31
  409fda:	4642      	mov	r2, r8
  409fdc:	464b      	mov	r3, r9
  409fde:	910e      	str	r1, [sp, #56]	; 0x38
  409fe0:	e758      	b.n	409e94 <_svfprintf_r+0x534>
  409fe2:	781d      	ldrb	r5, [r3, #0]
  409fe4:	9907      	ldr	r1, [sp, #28]
  409fe6:	2d6c      	cmp	r5, #108	; 0x6c
  409fe8:	f000 84cb 	beq.w	40a982 <_svfprintf_r+0x1022>
  409fec:	f041 0110 	orr.w	r1, r1, #16
  409ff0:	9107      	str	r1, [sp, #28]
  409ff2:	4619      	mov	r1, r3
  409ff4:	e507      	b.n	409a06 <_svfprintf_r+0xa6>
  409ff6:	9d0e      	ldr	r5, [sp, #56]	; 0x38
  409ff8:	6829      	ldr	r1, [r5, #0]
  409ffa:	910c      	str	r1, [sp, #48]	; 0x30
  409ffc:	4608      	mov	r0, r1
  409ffe:	2800      	cmp	r0, #0
  40a000:	4629      	mov	r1, r5
  40a002:	f101 0104 	add.w	r1, r1, #4
  40a006:	f2c0 84b5 	blt.w	40a974 <_svfprintf_r+0x1014>
  40a00a:	910e      	str	r1, [sp, #56]	; 0x38
  40a00c:	781d      	ldrb	r5, [r3, #0]
  40a00e:	4619      	mov	r1, r3
  40a010:	e4f9      	b.n	409a06 <_svfprintf_r+0xa6>
  40a012:	9907      	ldr	r1, [sp, #28]
  40a014:	f041 0140 	orr.w	r1, r1, #64	; 0x40
  40a018:	9107      	str	r1, [sp, #28]
  40a01a:	781d      	ldrb	r5, [r3, #0]
  40a01c:	4619      	mov	r1, r3
  40a01e:	e4f2      	b.n	409a06 <_svfprintf_r+0xa6>
  40a020:	930a      	str	r3, [sp, #40]	; 0x28
  40a022:	9b07      	ldr	r3, [sp, #28]
  40a024:	f043 0310 	orr.w	r3, r3, #16
  40a028:	9307      	str	r3, [sp, #28]
  40a02a:	9b07      	ldr	r3, [sp, #28]
  40a02c:	f013 0320 	ands.w	r3, r3, #32
  40a030:	f47f aef2 	bne.w	409e18 <_svfprintf_r+0x4b8>
  40a034:	9a07      	ldr	r2, [sp, #28]
  40a036:	f012 0210 	ands.w	r2, r2, #16
  40a03a:	f040 8319 	bne.w	40a670 <_svfprintf_r+0xd10>
  40a03e:	9b07      	ldr	r3, [sp, #28]
  40a040:	f013 0340 	ands.w	r3, r3, #64	; 0x40
  40a044:	f000 8314 	beq.w	40a670 <_svfprintf_r+0xd10>
  40a048:	990e      	ldr	r1, [sp, #56]	; 0x38
  40a04a:	4613      	mov	r3, r2
  40a04c:	460a      	mov	r2, r1
  40a04e:	3204      	adds	r2, #4
  40a050:	f8b1 8000 	ldrh.w	r8, [r1]
  40a054:	920e      	str	r2, [sp, #56]	; 0x38
  40a056:	f04f 0900 	mov.w	r9, #0
  40a05a:	e566      	b.n	409b2a <_svfprintf_r+0x1ca>
  40a05c:	930a      	str	r3, [sp, #40]	; 0x28
  40a05e:	9b07      	ldr	r3, [sp, #28]
  40a060:	f043 0310 	orr.w	r3, r3, #16
  40a064:	9307      	str	r3, [sp, #28]
  40a066:	9b07      	ldr	r3, [sp, #28]
  40a068:	0698      	lsls	r0, r3, #26
  40a06a:	f53f ad53 	bmi.w	409b14 <_svfprintf_r+0x1b4>
  40a06e:	9b07      	ldr	r3, [sp, #28]
  40a070:	06d9      	lsls	r1, r3, #27
  40a072:	f100 8306 	bmi.w	40a682 <_svfprintf_r+0xd22>
  40a076:	9b07      	ldr	r3, [sp, #28]
  40a078:	065a      	lsls	r2, r3, #25
  40a07a:	f140 8302 	bpl.w	40a682 <_svfprintf_r+0xd22>
  40a07e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  40a080:	f8b2 8000 	ldrh.w	r8, [r2]
  40a084:	3204      	adds	r2, #4
  40a086:	f04f 0900 	mov.w	r9, #0
  40a08a:	2301      	movs	r3, #1
  40a08c:	920e      	str	r2, [sp, #56]	; 0x38
  40a08e:	e54c      	b.n	409b2a <_svfprintf_r+0x1ca>
  40a090:	930a      	str	r3, [sp, #40]	; 0x28
  40a092:	4b23      	ldr	r3, [pc, #140]	; (40a120 <_svfprintf_r+0x7c0>)
  40a094:	9316      	str	r3, [sp, #88]	; 0x58
  40a096:	9b07      	ldr	r3, [sp, #28]
  40a098:	f88d 206f 	strb.w	r2, [sp, #111]	; 0x6f
  40a09c:	069b      	lsls	r3, r3, #26
  40a09e:	f53f af0d 	bmi.w	409ebc <_svfprintf_r+0x55c>
  40a0a2:	9b07      	ldr	r3, [sp, #28]
  40a0a4:	06d8      	lsls	r0, r3, #27
  40a0a6:	f140 83cd 	bpl.w	40a844 <_svfprintf_r+0xee4>
  40a0aa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  40a0ac:	4613      	mov	r3, r2
  40a0ae:	681b      	ldr	r3, [r3, #0]
  40a0b0:	4698      	mov	r8, r3
  40a0b2:	9b07      	ldr	r3, [sp, #28]
  40a0b4:	3204      	adds	r2, #4
  40a0b6:	07d9      	lsls	r1, r3, #31
  40a0b8:	920e      	str	r2, [sp, #56]	; 0x38
  40a0ba:	f04f 0900 	mov.w	r9, #0
  40a0be:	f53f af0b 	bmi.w	409ed8 <_svfprintf_r+0x578>
  40a0c2:	2302      	movs	r3, #2
  40a0c4:	e531      	b.n	409b2a <_svfprintf_r+0x1ca>
  40a0c6:	990e      	ldr	r1, [sp, #56]	; 0x38
  40a0c8:	930a      	str	r3, [sp, #40]	; 0x28
  40a0ca:	680a      	ldr	r2, [r1, #0]
  40a0cc:	f88d 2098 	strb.w	r2, [sp, #152]	; 0x98
  40a0d0:	2300      	movs	r3, #0
  40a0d2:	2201      	movs	r2, #1
  40a0d4:	3104      	adds	r1, #4
  40a0d6:	469c      	mov	ip, r3
  40a0d8:	9209      	str	r2, [sp, #36]	; 0x24
  40a0da:	910e      	str	r1, [sp, #56]	; 0x38
  40a0dc:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
  40a0e0:	ab26      	add	r3, sp, #152	; 0x98
  40a0e2:	f8cd c044 	str.w	ip, [sp, #68]	; 0x44
  40a0e6:	f8cd c048 	str.w	ip, [sp, #72]	; 0x48
  40a0ea:	920d      	str	r2, [sp, #52]	; 0x34
  40a0ec:	9310      	str	r3, [sp, #64]	; 0x40
  40a0ee:	e55d      	b.n	409bac <_svfprintf_r+0x24c>
  40a0f0:	9907      	ldr	r1, [sp, #28]
  40a0f2:	f041 0108 	orr.w	r1, r1, #8
  40a0f6:	9107      	str	r1, [sp, #28]
  40a0f8:	781d      	ldrb	r5, [r3, #0]
  40a0fa:	4619      	mov	r1, r3
  40a0fc:	e483      	b.n	409a06 <_svfprintf_r+0xa6>
  40a0fe:	9907      	ldr	r1, [sp, #28]
  40a100:	f041 0101 	orr.w	r1, r1, #1
  40a104:	9107      	str	r1, [sp, #28]
  40a106:	781d      	ldrb	r5, [r3, #0]
  40a108:	4619      	mov	r1, r3
  40a10a:	e47c      	b.n	409a06 <_svfprintf_r+0xa6>
  40a10c:	9907      	ldr	r1, [sp, #28]
  40a10e:	f041 0180 	orr.w	r1, r1, #128	; 0x80
  40a112:	9107      	str	r1, [sp, #28]
  40a114:	781d      	ldrb	r5, [r3, #0]
  40a116:	4619      	mov	r1, r3
  40a118:	e475      	b.n	409a06 <_svfprintf_r+0xa6>
  40a11a:	bf00      	nop
  40a11c:	00411c24 	.word	0x00411c24
  40a120:	00411c10 	.word	0x00411c10
  40a124:	00411bf0 	.word	0x00411bf0
  40a128:	00411be0 	.word	0x00411be0
  40a12c:	930a      	str	r3, [sp, #40]	; 0x28
  40a12e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  40a130:	f88d 206f 	strb.w	r2, [sp, #111]	; 0x6f
  40a134:	f103 0907 	add.w	r9, r3, #7
  40a138:	f029 0307 	bic.w	r3, r9, #7
  40a13c:	f103 0208 	add.w	r2, r3, #8
  40a140:	920e      	str	r2, [sp, #56]	; 0x38
  40a142:	681a      	ldr	r2, [r3, #0]
  40a144:	9214      	str	r2, [sp, #80]	; 0x50
  40a146:	685b      	ldr	r3, [r3, #4]
  40a148:	9315      	str	r3, [sp, #84]	; 0x54
  40a14a:	9915      	ldr	r1, [sp, #84]	; 0x54
  40a14c:	9814      	ldr	r0, [sp, #80]	; 0x50
  40a14e:	f004 fb9d 	bl	40e88c <__fpclassifyd>
  40a152:	2801      	cmp	r0, #1
  40a154:	46d3      	mov	fp, sl
  40a156:	9814      	ldr	r0, [sp, #80]	; 0x50
  40a158:	9915      	ldr	r1, [sp, #84]	; 0x54
  40a15a:	f040 8359 	bne.w	40a810 <_svfprintf_r+0xeb0>
  40a15e:	2200      	movs	r2, #0
  40a160:	2300      	movs	r3, #0
  40a162:	f7fd ff3d 	bl	407fe0 <__aeabi_dcmplt>
  40a166:	2800      	cmp	r0, #0
  40a168:	f040 8564 	bne.w	40ac34 <_svfprintf_r+0x12d4>
  40a16c:	f89d c06f 	ldrb.w	ip, [sp, #111]	; 0x6f
  40a170:	9b07      	ldr	r3, [sp, #28]
  40a172:	4abe      	ldr	r2, [pc, #760]	; (40a46c <_svfprintf_r+0xb0c>)
  40a174:	f8df e300 	ldr.w	lr, [pc, #768]	; 40a478 <_svfprintf_r+0xb18>
  40a178:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  40a17c:	9307      	str	r3, [sp, #28]
  40a17e:	4613      	mov	r3, r2
  40a180:	2103      	movs	r1, #3
  40a182:	2000      	movs	r0, #0
  40a184:	2d47      	cmp	r5, #71	; 0x47
  40a186:	bfd8      	it	le
  40a188:	4673      	movle	r3, lr
  40a18a:	9109      	str	r1, [sp, #36]	; 0x24
  40a18c:	9011      	str	r0, [sp, #68]	; 0x44
  40a18e:	9310      	str	r3, [sp, #64]	; 0x40
  40a190:	910d      	str	r1, [sp, #52]	; 0x34
  40a192:	9012      	str	r0, [sp, #72]	; 0x48
  40a194:	e504      	b.n	409ba0 <_svfprintf_r+0x240>
  40a196:	980e      	ldr	r0, [sp, #56]	; 0x38
  40a198:	9907      	ldr	r1, [sp, #28]
  40a19a:	930a      	str	r3, [sp, #40]	; 0x28
  40a19c:	2230      	movs	r2, #48	; 0x30
  40a19e:	6803      	ldr	r3, [r0, #0]
  40a1a0:	f88d 2070 	strb.w	r2, [sp, #112]	; 0x70
  40a1a4:	4602      	mov	r2, r0
  40a1a6:	2578      	movs	r5, #120	; 0x78
  40a1a8:	f041 0102 	orr.w	r1, r1, #2
  40a1ac:	3204      	adds	r2, #4
  40a1ae:	4698      	mov	r8, r3
  40a1b0:	4baf      	ldr	r3, [pc, #700]	; (40a470 <_svfprintf_r+0xb10>)
  40a1b2:	9316      	str	r3, [sp, #88]	; 0x58
  40a1b4:	9107      	str	r1, [sp, #28]
  40a1b6:	920e      	str	r2, [sp, #56]	; 0x38
  40a1b8:	f04f 0900 	mov.w	r9, #0
  40a1bc:	f88d 5071 	strb.w	r5, [sp, #113]	; 0x71
  40a1c0:	2302      	movs	r3, #2
  40a1c2:	e4b2      	b.n	409b2a <_svfprintf_r+0x1ca>
  40a1c4:	930a      	str	r3, [sp, #40]	; 0x28
  40a1c6:	f88d 206f 	strb.w	r2, [sp, #111]	; 0x6f
  40a1ca:	2d00      	cmp	r5, #0
  40a1cc:	f000 83c6 	beq.w	40a95c <_svfprintf_r+0xffc>
  40a1d0:	2300      	movs	r3, #0
  40a1d2:	2201      	movs	r2, #1
  40a1d4:	469c      	mov	ip, r3
  40a1d6:	9209      	str	r2, [sp, #36]	; 0x24
  40a1d8:	f88d 5098 	strb.w	r5, [sp, #152]	; 0x98
  40a1dc:	e77e      	b.n	40a0dc <_svfprintf_r+0x77c>
  40a1de:	f8dd b094 	ldr.w	fp, [sp, #148]	; 0x94
  40a1e2:	e539      	b.n	409c58 <_svfprintf_r+0x2f8>
  40a1e4:	2b01      	cmp	r3, #1
  40a1e6:	f47f acb8 	bne.w	409b5a <_svfprintf_r+0x1fa>
  40a1ea:	f1b9 0f00 	cmp.w	r9, #0
  40a1ee:	bf08      	it	eq
  40a1f0:	f1b8 0f0a 	cmpeq.w	r8, #10
  40a1f4:	f080 821c 	bcs.w	40a630 <_svfprintf_r+0xcd0>
  40a1f8:	f50d 7b80 	add.w	fp, sp, #256	; 0x100
  40a1fc:	f108 0830 	add.w	r8, r8, #48	; 0x30
  40a200:	f80b 8d41 	strb.w	r8, [fp, #-65]!
  40a204:	ebcb 0307 	rsb	r3, fp, r7
  40a208:	930d      	str	r3, [sp, #52]	; 0x34
  40a20a:	f8cd b040 	str.w	fp, [sp, #64]	; 0x40
  40a20e:	e4bf      	b.n	409b90 <_svfprintf_r+0x230>
  40a210:	2d65      	cmp	r5, #101	; 0x65
  40a212:	f340 80a0 	ble.w	40a356 <_svfprintf_r+0x9f6>
  40a216:	9814      	ldr	r0, [sp, #80]	; 0x50
  40a218:	9915      	ldr	r1, [sp, #84]	; 0x54
  40a21a:	2200      	movs	r2, #0
  40a21c:	2300      	movs	r3, #0
  40a21e:	f7fd fed5 	bl	407fcc <__aeabi_dcmpeq>
  40a222:	2800      	cmp	r0, #0
  40a224:	f000 8145 	beq.w	40a4b2 <_svfprintf_r+0xb52>
  40a228:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40a22a:	4a92      	ldr	r2, [pc, #584]	; (40a474 <_svfprintf_r+0xb14>)
  40a22c:	6022      	str	r2, [r4, #0]
  40a22e:	3301      	adds	r3, #1
  40a230:	f10b 0b01 	add.w	fp, fp, #1
  40a234:	2201      	movs	r2, #1
  40a236:	2b07      	cmp	r3, #7
  40a238:	f8cd b094 	str.w	fp, [sp, #148]	; 0x94
  40a23c:	9324      	str	r3, [sp, #144]	; 0x90
  40a23e:	6062      	str	r2, [r4, #4]
  40a240:	f300 8334 	bgt.w	40a8ac <_svfprintf_r+0xf4c>
  40a244:	3408      	adds	r4, #8
  40a246:	9b1d      	ldr	r3, [sp, #116]	; 0x74
  40a248:	9a13      	ldr	r2, [sp, #76]	; 0x4c
  40a24a:	4293      	cmp	r3, r2
  40a24c:	db03      	blt.n	40a256 <_svfprintf_r+0x8f6>
  40a24e:	9b07      	ldr	r3, [sp, #28]
  40a250:	07da      	lsls	r2, r3, #31
  40a252:	f57f ad7f 	bpl.w	409d54 <_svfprintf_r+0x3f4>
  40a256:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40a258:	9918      	ldr	r1, [sp, #96]	; 0x60
  40a25a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
  40a25c:	6022      	str	r2, [r4, #0]
  40a25e:	3301      	adds	r3, #1
  40a260:	448b      	add	fp, r1
  40a262:	2b07      	cmp	r3, #7
  40a264:	f8cd b094 	str.w	fp, [sp, #148]	; 0x94
  40a268:	6061      	str	r1, [r4, #4]
  40a26a:	9324      	str	r3, [sp, #144]	; 0x90
  40a26c:	f300 8390 	bgt.w	40a990 <_svfprintf_r+0x1030>
  40a270:	3408      	adds	r4, #8
  40a272:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  40a274:	1e5d      	subs	r5, r3, #1
  40a276:	2d00      	cmp	r5, #0
  40a278:	f77f ad6c 	ble.w	409d54 <_svfprintf_r+0x3f4>
  40a27c:	2d10      	cmp	r5, #16
  40a27e:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40a280:	f8df 91f8 	ldr.w	r9, [pc, #504]	; 40a47c <_svfprintf_r+0xb1c>
  40a284:	f340 81ba 	ble.w	40a5fc <_svfprintf_r+0xc9c>
  40a288:	f04f 0810 	mov.w	r8, #16
  40a28c:	465a      	mov	r2, fp
  40a28e:	f8dd a020 	ldr.w	sl, [sp, #32]
  40a292:	e004      	b.n	40a29e <_svfprintf_r+0x93e>
  40a294:	3408      	adds	r4, #8
  40a296:	3d10      	subs	r5, #16
  40a298:	2d10      	cmp	r5, #16
  40a29a:	f340 81ae 	ble.w	40a5fa <_svfprintf_r+0xc9a>
  40a29e:	3301      	adds	r3, #1
  40a2a0:	3210      	adds	r2, #16
  40a2a2:	2b07      	cmp	r3, #7
  40a2a4:	9225      	str	r2, [sp, #148]	; 0x94
  40a2a6:	9324      	str	r3, [sp, #144]	; 0x90
  40a2a8:	f8c4 9000 	str.w	r9, [r4]
  40a2ac:	f8c4 8004 	str.w	r8, [r4, #4]
  40a2b0:	ddf0      	ble.n	40a294 <_svfprintf_r+0x934>
  40a2b2:	4650      	mov	r0, sl
  40a2b4:	4631      	mov	r1, r6
  40a2b6:	aa23      	add	r2, sp, #140	; 0x8c
  40a2b8:	f004 fb5e 	bl	40e978 <__ssprint_r>
  40a2bc:	2800      	cmp	r0, #0
  40a2be:	f47f ac15 	bne.w	409aec <_svfprintf_r+0x18c>
  40a2c2:	9a25      	ldr	r2, [sp, #148]	; 0x94
  40a2c4:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40a2c6:	463c      	mov	r4, r7
  40a2c8:	e7e5      	b.n	40a296 <_svfprintf_r+0x936>
  40a2ca:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  40a2cc:	9a09      	ldr	r2, [sp, #36]	; 0x24
  40a2ce:	ebc2 0a03 	rsb	sl, r2, r3
  40a2d2:	f1ba 0f00 	cmp.w	sl, #0
  40a2d6:	f77f ace7 	ble.w	409ca8 <_svfprintf_r+0x348>
  40a2da:	f1ba 0f10 	cmp.w	sl, #16
  40a2de:	9a24      	ldr	r2, [sp, #144]	; 0x90
  40a2e0:	f8df 9198 	ldr.w	r9, [pc, #408]	; 40a47c <_svfprintf_r+0xb1c>
  40a2e4:	dd2b      	ble.n	40a33e <_svfprintf_r+0x9de>
  40a2e6:	4649      	mov	r1, r9
  40a2e8:	465b      	mov	r3, fp
  40a2ea:	46a9      	mov	r9, r5
  40a2ec:	f04f 0810 	mov.w	r8, #16
  40a2f0:	f8dd b020 	ldr.w	fp, [sp, #32]
  40a2f4:	460d      	mov	r5, r1
  40a2f6:	e006      	b.n	40a306 <_svfprintf_r+0x9a6>
  40a2f8:	f1aa 0a10 	sub.w	sl, sl, #16
  40a2fc:	f1ba 0f10 	cmp.w	sl, #16
  40a300:	f104 0408 	add.w	r4, r4, #8
  40a304:	dd17      	ble.n	40a336 <_svfprintf_r+0x9d6>
  40a306:	3201      	adds	r2, #1
  40a308:	3310      	adds	r3, #16
  40a30a:	2a07      	cmp	r2, #7
  40a30c:	9325      	str	r3, [sp, #148]	; 0x94
  40a30e:	9224      	str	r2, [sp, #144]	; 0x90
  40a310:	e884 0120 	stmia.w	r4, {r5, r8}
  40a314:	ddf0      	ble.n	40a2f8 <_svfprintf_r+0x998>
  40a316:	4658      	mov	r0, fp
  40a318:	4631      	mov	r1, r6
  40a31a:	aa23      	add	r2, sp, #140	; 0x8c
  40a31c:	f004 fb2c 	bl	40e978 <__ssprint_r>
  40a320:	2800      	cmp	r0, #0
  40a322:	f47f abe3 	bne.w	409aec <_svfprintf_r+0x18c>
  40a326:	f1aa 0a10 	sub.w	sl, sl, #16
  40a32a:	f1ba 0f10 	cmp.w	sl, #16
  40a32e:	9b25      	ldr	r3, [sp, #148]	; 0x94
  40a330:	9a24      	ldr	r2, [sp, #144]	; 0x90
  40a332:	463c      	mov	r4, r7
  40a334:	dce7      	bgt.n	40a306 <_svfprintf_r+0x9a6>
  40a336:	469b      	mov	fp, r3
  40a338:	462b      	mov	r3, r5
  40a33a:	464d      	mov	r5, r9
  40a33c:	4699      	mov	r9, r3
  40a33e:	3201      	adds	r2, #1
  40a340:	44d3      	add	fp, sl
  40a342:	2a07      	cmp	r2, #7
  40a344:	f8cd b094 	str.w	fp, [sp, #148]	; 0x94
  40a348:	9224      	str	r2, [sp, #144]	; 0x90
  40a34a:	e884 0600 	stmia.w	r4, {r9, sl}
  40a34e:	f300 8252 	bgt.w	40a7f6 <_svfprintf_r+0xe96>
  40a352:	3408      	adds	r4, #8
  40a354:	e4a8      	b.n	409ca8 <_svfprintf_r+0x348>
  40a356:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  40a358:	9d24      	ldr	r5, [sp, #144]	; 0x90
  40a35a:	2b01      	cmp	r3, #1
  40a35c:	f340 8220 	ble.w	40a7a0 <_svfprintf_r+0xe40>
  40a360:	9b10      	ldr	r3, [sp, #64]	; 0x40
  40a362:	6023      	str	r3, [r4, #0]
  40a364:	3501      	adds	r5, #1
  40a366:	f10b 0301 	add.w	r3, fp, #1
  40a36a:	2201      	movs	r2, #1
  40a36c:	2d07      	cmp	r5, #7
  40a36e:	9325      	str	r3, [sp, #148]	; 0x94
  40a370:	9524      	str	r5, [sp, #144]	; 0x90
  40a372:	6062      	str	r2, [r4, #4]
  40a374:	f300 8226 	bgt.w	40a7c4 <_svfprintf_r+0xe64>
  40a378:	3408      	adds	r4, #8
  40a37a:	9918      	ldr	r1, [sp, #96]	; 0x60
  40a37c:	6061      	str	r1, [r4, #4]
  40a37e:	3501      	adds	r5, #1
  40a380:	eb03 0b01 	add.w	fp, r3, r1
  40a384:	2d07      	cmp	r5, #7
  40a386:	9b17      	ldr	r3, [sp, #92]	; 0x5c
  40a388:	f8cd b094 	str.w	fp, [sp, #148]	; 0x94
  40a38c:	9524      	str	r5, [sp, #144]	; 0x90
  40a38e:	6023      	str	r3, [r4, #0]
  40a390:	f300 8224 	bgt.w	40a7dc <_svfprintf_r+0xe7c>
  40a394:	3408      	adds	r4, #8
  40a396:	2300      	movs	r3, #0
  40a398:	9814      	ldr	r0, [sp, #80]	; 0x50
  40a39a:	9915      	ldr	r1, [sp, #84]	; 0x54
  40a39c:	2200      	movs	r2, #0
  40a39e:	f7fd fe15 	bl	407fcc <__aeabi_dcmpeq>
  40a3a2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  40a3a4:	2800      	cmp	r0, #0
  40a3a6:	f040 80de 	bne.w	40a566 <_svfprintf_r+0xc06>
  40a3aa:	9a10      	ldr	r2, [sp, #64]	; 0x40
  40a3ac:	3b01      	subs	r3, #1
  40a3ae:	3501      	adds	r5, #1
  40a3b0:	3201      	adds	r2, #1
  40a3b2:	449b      	add	fp, r3
  40a3b4:	2d07      	cmp	r5, #7
  40a3b6:	9524      	str	r5, [sp, #144]	; 0x90
  40a3b8:	f8cd b094 	str.w	fp, [sp, #148]	; 0x94
  40a3bc:	6022      	str	r2, [r4, #0]
  40a3be:	6063      	str	r3, [r4, #4]
  40a3c0:	f300 810e 	bgt.w	40a5e0 <_svfprintf_r+0xc80>
  40a3c4:	3408      	adds	r4, #8
  40a3c6:	9a19      	ldr	r2, [sp, #100]	; 0x64
  40a3c8:	6062      	str	r2, [r4, #4]
  40a3ca:	3501      	adds	r5, #1
  40a3cc:	4493      	add	fp, r2
  40a3ce:	ab1f      	add	r3, sp, #124	; 0x7c
  40a3d0:	2d07      	cmp	r5, #7
  40a3d2:	f8cd b094 	str.w	fp, [sp, #148]	; 0x94
  40a3d6:	9524      	str	r5, [sp, #144]	; 0x90
  40a3d8:	6023      	str	r3, [r4, #0]
  40a3da:	f77f acba 	ble.w	409d52 <_svfprintf_r+0x3f2>
  40a3de:	9808      	ldr	r0, [sp, #32]
  40a3e0:	4631      	mov	r1, r6
  40a3e2:	aa23      	add	r2, sp, #140	; 0x8c
  40a3e4:	f004 fac8 	bl	40e978 <__ssprint_r>
  40a3e8:	2800      	cmp	r0, #0
  40a3ea:	f47f ab7f 	bne.w	409aec <_svfprintf_r+0x18c>
  40a3ee:	f8dd b094 	ldr.w	fp, [sp, #148]	; 0x94
  40a3f2:	463c      	mov	r4, r7
  40a3f4:	e4ae      	b.n	409d54 <_svfprintf_r+0x3f4>
  40a3f6:	2b00      	cmp	r3, #0
  40a3f8:	d132      	bne.n	40a460 <_svfprintf_r+0xb00>
  40a3fa:	9b07      	ldr	r3, [sp, #28]
  40a3fc:	07d8      	lsls	r0, r3, #31
  40a3fe:	d52f      	bpl.n	40a460 <_svfprintf_r+0xb00>
  40a400:	f50d 7b80 	add.w	fp, sp, #256	; 0x100
  40a404:	2330      	movs	r3, #48	; 0x30
  40a406:	f80b 3d41 	strb.w	r3, [fp, #-65]!
  40a40a:	ebcb 0307 	rsb	r3, fp, r7
  40a40e:	930d      	str	r3, [sp, #52]	; 0x34
  40a410:	f8cd b040 	str.w	fp, [sp, #64]	; 0x40
  40a414:	f7ff bbbc 	b.w	409b90 <_svfprintf_r+0x230>
  40a418:	9808      	ldr	r0, [sp, #32]
  40a41a:	4631      	mov	r1, r6
  40a41c:	aa23      	add	r2, sp, #140	; 0x8c
  40a41e:	f004 faab 	bl	40e978 <__ssprint_r>
  40a422:	2800      	cmp	r0, #0
  40a424:	f47f ab62 	bne.w	409aec <_svfprintf_r+0x18c>
  40a428:	f8dd b094 	ldr.w	fp, [sp, #148]	; 0x94
  40a42c:	463c      	mov	r4, r7
  40a42e:	e47f      	b.n	409d30 <_svfprintf_r+0x3d0>
  40a430:	9808      	ldr	r0, [sp, #32]
  40a432:	4631      	mov	r1, r6
  40a434:	aa23      	add	r2, sp, #140	; 0x8c
  40a436:	f004 fa9f 	bl	40e978 <__ssprint_r>
  40a43a:	2800      	cmp	r0, #0
  40a43c:	f47f ab56 	bne.w	409aec <_svfprintf_r+0x18c>
  40a440:	f8dd b094 	ldr.w	fp, [sp, #148]	; 0x94
  40a444:	463c      	mov	r4, r7
  40a446:	e41a      	b.n	409c7e <_svfprintf_r+0x31e>
  40a448:	9808      	ldr	r0, [sp, #32]
  40a44a:	4631      	mov	r1, r6
  40a44c:	aa23      	add	r2, sp, #140	; 0x8c
  40a44e:	f004 fa93 	bl	40e978 <__ssprint_r>
  40a452:	2800      	cmp	r0, #0
  40a454:	f47f ab4a 	bne.w	409aec <_svfprintf_r+0x18c>
  40a458:	f8dd b094 	ldr.w	fp, [sp, #148]	; 0x94
  40a45c:	463c      	mov	r4, r7
  40a45e:	e41f      	b.n	409ca0 <_svfprintf_r+0x340>
  40a460:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
  40a464:	9710      	str	r7, [sp, #64]	; 0x40
  40a466:	f7ff bb93 	b.w	409b90 <_svfprintf_r+0x230>
  40a46a:	bf00      	nop
  40a46c:	00411c04 	.word	0x00411c04
  40a470:	00411c24 	.word	0x00411c24
  40a474:	004119fc 	.word	0x004119fc
  40a478:	00411c00 	.word	0x00411c00
  40a47c:	00411be0 	.word	0x00411be0
  40a480:	9816      	ldr	r0, [sp, #88]	; 0x58
  40a482:	46bb      	mov	fp, r7
  40a484:	ea4f 1318 	mov.w	r3, r8, lsr #4
  40a488:	f008 010f 	and.w	r1, r8, #15
  40a48c:	ea43 7309 	orr.w	r3, r3, r9, lsl #28
  40a490:	ea4f 1219 	mov.w	r2, r9, lsr #4
  40a494:	4698      	mov	r8, r3
  40a496:	4691      	mov	r9, r2
  40a498:	5c43      	ldrb	r3, [r0, r1]
  40a49a:	f80b 3d01 	strb.w	r3, [fp, #-1]!
  40a49e:	ea58 0309 	orrs.w	r3, r8, r9
  40a4a2:	d1ef      	bne.n	40a484 <_svfprintf_r+0xb24>
  40a4a4:	465b      	mov	r3, fp
  40a4a6:	f8cd b040 	str.w	fp, [sp, #64]	; 0x40
  40a4aa:	1afb      	subs	r3, r7, r3
  40a4ac:	930d      	str	r3, [sp, #52]	; 0x34
  40a4ae:	f7ff bb6f 	b.w	409b90 <_svfprintf_r+0x230>
  40a4b2:	9d1d      	ldr	r5, [sp, #116]	; 0x74
  40a4b4:	2d00      	cmp	r5, #0
  40a4b6:	f340 8205 	ble.w	40a8c4 <_svfprintf_r+0xf64>
  40a4ba:	9a13      	ldr	r2, [sp, #76]	; 0x4c
  40a4bc:	9912      	ldr	r1, [sp, #72]	; 0x48
  40a4be:	428a      	cmp	r2, r1
  40a4c0:	4613      	mov	r3, r2
  40a4c2:	bfa8      	it	ge
  40a4c4:	460b      	movge	r3, r1
  40a4c6:	461d      	mov	r5, r3
  40a4c8:	9910      	ldr	r1, [sp, #64]	; 0x40
  40a4ca:	2d00      	cmp	r5, #0
  40a4cc:	eb01 0a02 	add.w	sl, r1, r2
  40a4d0:	dd0b      	ble.n	40a4ea <_svfprintf_r+0xb8a>
  40a4d2:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40a4d4:	6021      	str	r1, [r4, #0]
  40a4d6:	3301      	adds	r3, #1
  40a4d8:	44ab      	add	fp, r5
  40a4da:	2b07      	cmp	r3, #7
  40a4dc:	f8cd b094 	str.w	fp, [sp, #148]	; 0x94
  40a4e0:	6065      	str	r5, [r4, #4]
  40a4e2:	9324      	str	r3, [sp, #144]	; 0x90
  40a4e4:	f300 834d 	bgt.w	40ab82 <_svfprintf_r+0x1222>
  40a4e8:	3408      	adds	r4, #8
  40a4ea:	9b12      	ldr	r3, [sp, #72]	; 0x48
  40a4ec:	2d00      	cmp	r5, #0
  40a4ee:	bfa8      	it	ge
  40a4f0:	1b5b      	subge	r3, r3, r5
  40a4f2:	2b00      	cmp	r3, #0
  40a4f4:	461d      	mov	r5, r3
  40a4f6:	f340 80f5 	ble.w	40a6e4 <_svfprintf_r+0xd84>
  40a4fa:	2d10      	cmp	r5, #16
  40a4fc:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40a4fe:	f8df 95f4 	ldr.w	r9, [pc, #1524]	; 40aaf4 <_svfprintf_r+0x1194>
  40a502:	f340 81c6 	ble.w	40a892 <_svfprintf_r+0xf32>
  40a506:	465a      	mov	r2, fp
  40a508:	f04f 0810 	mov.w	r8, #16
  40a50c:	f8dd b020 	ldr.w	fp, [sp, #32]
  40a510:	e004      	b.n	40a51c <_svfprintf_r+0xbbc>
  40a512:	3408      	adds	r4, #8
  40a514:	3d10      	subs	r5, #16
  40a516:	2d10      	cmp	r5, #16
  40a518:	f340 81ba 	ble.w	40a890 <_svfprintf_r+0xf30>
  40a51c:	3301      	adds	r3, #1
  40a51e:	3210      	adds	r2, #16
  40a520:	2b07      	cmp	r3, #7
  40a522:	9225      	str	r2, [sp, #148]	; 0x94
  40a524:	9324      	str	r3, [sp, #144]	; 0x90
  40a526:	f8c4 9000 	str.w	r9, [r4]
  40a52a:	f8c4 8004 	str.w	r8, [r4, #4]
  40a52e:	ddf0      	ble.n	40a512 <_svfprintf_r+0xbb2>
  40a530:	4658      	mov	r0, fp
  40a532:	4631      	mov	r1, r6
  40a534:	aa23      	add	r2, sp, #140	; 0x8c
  40a536:	f004 fa1f 	bl	40e978 <__ssprint_r>
  40a53a:	2800      	cmp	r0, #0
  40a53c:	f47f aad6 	bne.w	409aec <_svfprintf_r+0x18c>
  40a540:	9a25      	ldr	r2, [sp, #148]	; 0x94
  40a542:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40a544:	463c      	mov	r4, r7
  40a546:	e7e5      	b.n	40a514 <_svfprintf_r+0xbb4>
  40a548:	9808      	ldr	r0, [sp, #32]
  40a54a:	4631      	mov	r1, r6
  40a54c:	aa23      	add	r2, sp, #140	; 0x8c
  40a54e:	f004 fa13 	bl	40e978 <__ssprint_r>
  40a552:	2800      	cmp	r0, #0
  40a554:	f47f aaca 	bne.w	409aec <_svfprintf_r+0x18c>
  40a558:	f89d c06f 	ldrb.w	ip, [sp, #111]	; 0x6f
  40a55c:	f8dd b094 	ldr.w	fp, [sp, #148]	; 0x94
  40a560:	463c      	mov	r4, r7
  40a562:	f7ff bb79 	b.w	409c58 <_svfprintf_r+0x2f8>
  40a566:	f103 38ff 	add.w	r8, r3, #4294967295
  40a56a:	f1b8 0f00 	cmp.w	r8, #0
  40a56e:	f77f af2a 	ble.w	40a3c6 <_svfprintf_r+0xa66>
  40a572:	f1b8 0f10 	cmp.w	r8, #16
  40a576:	f8df 957c 	ldr.w	r9, [pc, #1404]	; 40aaf4 <_svfprintf_r+0x1194>
  40a57a:	dd25      	ble.n	40a5c8 <_svfprintf_r+0xc68>
  40a57c:	465b      	mov	r3, fp
  40a57e:	f04f 0a10 	mov.w	sl, #16
  40a582:	f8dd b020 	ldr.w	fp, [sp, #32]
  40a586:	e006      	b.n	40a596 <_svfprintf_r+0xc36>
  40a588:	f1a8 0810 	sub.w	r8, r8, #16
  40a58c:	f1b8 0f10 	cmp.w	r8, #16
  40a590:	f104 0408 	add.w	r4, r4, #8
  40a594:	dd17      	ble.n	40a5c6 <_svfprintf_r+0xc66>
  40a596:	3501      	adds	r5, #1
  40a598:	3310      	adds	r3, #16
  40a59a:	2d07      	cmp	r5, #7
  40a59c:	9325      	str	r3, [sp, #148]	; 0x94
  40a59e:	9524      	str	r5, [sp, #144]	; 0x90
  40a5a0:	e884 0600 	stmia.w	r4, {r9, sl}
  40a5a4:	ddf0      	ble.n	40a588 <_svfprintf_r+0xc28>
  40a5a6:	4658      	mov	r0, fp
  40a5a8:	4631      	mov	r1, r6
  40a5aa:	aa23      	add	r2, sp, #140	; 0x8c
  40a5ac:	f004 f9e4 	bl	40e978 <__ssprint_r>
  40a5b0:	2800      	cmp	r0, #0
  40a5b2:	f47f aa9b 	bne.w	409aec <_svfprintf_r+0x18c>
  40a5b6:	f1a8 0810 	sub.w	r8, r8, #16
  40a5ba:	f1b8 0f10 	cmp.w	r8, #16
  40a5be:	9b25      	ldr	r3, [sp, #148]	; 0x94
  40a5c0:	9d24      	ldr	r5, [sp, #144]	; 0x90
  40a5c2:	463c      	mov	r4, r7
  40a5c4:	dce7      	bgt.n	40a596 <_svfprintf_r+0xc36>
  40a5c6:	469b      	mov	fp, r3
  40a5c8:	3501      	adds	r5, #1
  40a5ca:	44c3      	add	fp, r8
  40a5cc:	2d07      	cmp	r5, #7
  40a5ce:	f8cd b094 	str.w	fp, [sp, #148]	; 0x94
  40a5d2:	9524      	str	r5, [sp, #144]	; 0x90
  40a5d4:	f8c4 9000 	str.w	r9, [r4]
  40a5d8:	f8c4 8004 	str.w	r8, [r4, #4]
  40a5dc:	f77f aef2 	ble.w	40a3c4 <_svfprintf_r+0xa64>
  40a5e0:	9808      	ldr	r0, [sp, #32]
  40a5e2:	4631      	mov	r1, r6
  40a5e4:	aa23      	add	r2, sp, #140	; 0x8c
  40a5e6:	f004 f9c7 	bl	40e978 <__ssprint_r>
  40a5ea:	2800      	cmp	r0, #0
  40a5ec:	f47f aa7e 	bne.w	409aec <_svfprintf_r+0x18c>
  40a5f0:	f8dd b094 	ldr.w	fp, [sp, #148]	; 0x94
  40a5f4:	9d24      	ldr	r5, [sp, #144]	; 0x90
  40a5f6:	463c      	mov	r4, r7
  40a5f8:	e6e5      	b.n	40a3c6 <_svfprintf_r+0xa66>
  40a5fa:	4693      	mov	fp, r2
  40a5fc:	3301      	adds	r3, #1
  40a5fe:	44ab      	add	fp, r5
  40a600:	2b07      	cmp	r3, #7
  40a602:	f8cd b094 	str.w	fp, [sp, #148]	; 0x94
  40a606:	9324      	str	r3, [sp, #144]	; 0x90
  40a608:	f8c4 9000 	str.w	r9, [r4]
  40a60c:	6065      	str	r5, [r4, #4]
  40a60e:	f77f aba0 	ble.w	409d52 <_svfprintf_r+0x3f2>
  40a612:	e6e4      	b.n	40a3de <_svfprintf_r+0xa7e>
  40a614:	2b30      	cmp	r3, #48	; 0x30
  40a616:	9b10      	ldr	r3, [sp, #64]	; 0x40
  40a618:	f43f af47 	beq.w	40a4aa <_svfprintf_r+0xb4a>
  40a61c:	3b01      	subs	r3, #1
  40a61e:	461a      	mov	r2, r3
  40a620:	9310      	str	r3, [sp, #64]	; 0x40
  40a622:	1aba      	subs	r2, r7, r2
  40a624:	2330      	movs	r3, #48	; 0x30
  40a626:	920d      	str	r2, [sp, #52]	; 0x34
  40a628:	f801 3c01 	strb.w	r3, [r1, #-1]
  40a62c:	f7ff bab0 	b.w	409b90 <_svfprintf_r+0x230>
  40a630:	46bb      	mov	fp, r7
  40a632:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
  40a636:	4640      	mov	r0, r8
  40a638:	4649      	mov	r1, r9
  40a63a:	220a      	movs	r2, #10
  40a63c:	2300      	movs	r3, #0
  40a63e:	f004 fec9 	bl	40f3d4 <__aeabi_uldivmod>
  40a642:	3230      	adds	r2, #48	; 0x30
  40a644:	4640      	mov	r0, r8
  40a646:	4649      	mov	r1, r9
  40a648:	f80b 2d01 	strb.w	r2, [fp, #-1]!
  40a64c:	2300      	movs	r3, #0
  40a64e:	220a      	movs	r2, #10
  40a650:	f004 fec0 	bl	40f3d4 <__aeabi_uldivmod>
  40a654:	4680      	mov	r8, r0
  40a656:	4689      	mov	r9, r1
  40a658:	ea58 0309 	orrs.w	r3, r8, r9
  40a65c:	d1eb      	bne.n	40a636 <_svfprintf_r+0xcd6>
  40a65e:	465b      	mov	r3, fp
  40a660:	1afb      	subs	r3, r7, r3
  40a662:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
  40a666:	f8cd b040 	str.w	fp, [sp, #64]	; 0x40
  40a66a:	930d      	str	r3, [sp, #52]	; 0x34
  40a66c:	f7ff ba90 	b.w	409b90 <_svfprintf_r+0x230>
  40a670:	990e      	ldr	r1, [sp, #56]	; 0x38
  40a672:	680a      	ldr	r2, [r1, #0]
  40a674:	3104      	adds	r1, #4
  40a676:	910e      	str	r1, [sp, #56]	; 0x38
  40a678:	4690      	mov	r8, r2
  40a67a:	f04f 0900 	mov.w	r9, #0
  40a67e:	f7ff ba54 	b.w	409b2a <_svfprintf_r+0x1ca>
  40a682:	990e      	ldr	r1, [sp, #56]	; 0x38
  40a684:	680a      	ldr	r2, [r1, #0]
  40a686:	3104      	adds	r1, #4
  40a688:	2301      	movs	r3, #1
  40a68a:	910e      	str	r1, [sp, #56]	; 0x38
  40a68c:	4690      	mov	r8, r2
  40a68e:	f04f 0900 	mov.w	r9, #0
  40a692:	f7ff ba4a 	b.w	409b2a <_svfprintf_r+0x1ca>
  40a696:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  40a698:	6813      	ldr	r3, [r2, #0]
  40a69a:	4698      	mov	r8, r3
  40a69c:	ea4f 79e3 	mov.w	r9, r3, asr #31
  40a6a0:	4613      	mov	r3, r2
  40a6a2:	3304      	adds	r3, #4
  40a6a4:	4642      	mov	r2, r8
  40a6a6:	930e      	str	r3, [sp, #56]	; 0x38
  40a6a8:	2a00      	cmp	r2, #0
  40a6aa:	464b      	mov	r3, r9
  40a6ac:	f173 0300 	sbcs.w	r3, r3, #0
  40a6b0:	f6bf abf5 	bge.w	409e9e <_svfprintf_r+0x53e>
  40a6b4:	f04f 0c2d 	mov.w	ip, #45	; 0x2d
  40a6b8:	f1d8 0800 	rsbs	r8, r8, #0
  40a6bc:	eb69 0949 	sbc.w	r9, r9, r9, lsl #1
  40a6c0:	f88d c06f 	strb.w	ip, [sp, #111]	; 0x6f
  40a6c4:	f8cd a044 	str.w	sl, [sp, #68]	; 0x44
  40a6c8:	2301      	movs	r3, #1
  40a6ca:	f7ff ba34 	b.w	409b36 <_svfprintf_r+0x1d6>
  40a6ce:	9808      	ldr	r0, [sp, #32]
  40a6d0:	4631      	mov	r1, r6
  40a6d2:	aa23      	add	r2, sp, #140	; 0x8c
  40a6d4:	f004 f950 	bl	40e978 <__ssprint_r>
  40a6d8:	2800      	cmp	r0, #0
  40a6da:	f47f aa07 	bne.w	409aec <_svfprintf_r+0x18c>
  40a6de:	f8dd b094 	ldr.w	fp, [sp, #148]	; 0x94
  40a6e2:	463c      	mov	r4, r7
  40a6e4:	9a10      	ldr	r2, [sp, #64]	; 0x40
  40a6e6:	9912      	ldr	r1, [sp, #72]	; 0x48
  40a6e8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
  40a6ea:	440a      	add	r2, r1
  40a6ec:	4690      	mov	r8, r2
  40a6ee:	9a13      	ldr	r2, [sp, #76]	; 0x4c
  40a6f0:	4293      	cmp	r3, r2
  40a6f2:	db46      	blt.n	40a782 <_svfprintf_r+0xe22>
  40a6f4:	9a07      	ldr	r2, [sp, #28]
  40a6f6:	07d0      	lsls	r0, r2, #31
  40a6f8:	d443      	bmi.n	40a782 <_svfprintf_r+0xe22>
  40a6fa:	9a13      	ldr	r2, [sp, #76]	; 0x4c
  40a6fc:	ebc8 050a 	rsb	r5, r8, sl
  40a700:	1ad3      	subs	r3, r2, r3
  40a702:	429d      	cmp	r5, r3
  40a704:	bfa8      	it	ge
  40a706:	461d      	movge	r5, r3
  40a708:	2d00      	cmp	r5, #0
  40a70a:	dd0c      	ble.n	40a726 <_svfprintf_r+0xdc6>
  40a70c:	9a24      	ldr	r2, [sp, #144]	; 0x90
  40a70e:	f8c4 8000 	str.w	r8, [r4]
  40a712:	3201      	adds	r2, #1
  40a714:	44ab      	add	fp, r5
  40a716:	2a07      	cmp	r2, #7
  40a718:	f8cd b094 	str.w	fp, [sp, #148]	; 0x94
  40a71c:	6065      	str	r5, [r4, #4]
  40a71e:	9224      	str	r2, [sp, #144]	; 0x90
  40a720:	f300 8267 	bgt.w	40abf2 <_svfprintf_r+0x1292>
  40a724:	3408      	adds	r4, #8
  40a726:	2d00      	cmp	r5, #0
  40a728:	bfac      	ite	ge
  40a72a:	1b5d      	subge	r5, r3, r5
  40a72c:	461d      	movlt	r5, r3
  40a72e:	2d00      	cmp	r5, #0
  40a730:	f77f ab10 	ble.w	409d54 <_svfprintf_r+0x3f4>
  40a734:	2d10      	cmp	r5, #16
  40a736:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40a738:	f8df 93b8 	ldr.w	r9, [pc, #952]	; 40aaf4 <_svfprintf_r+0x1194>
  40a73c:	f77f af5e 	ble.w	40a5fc <_svfprintf_r+0xc9c>
  40a740:	f04f 0810 	mov.w	r8, #16
  40a744:	465a      	mov	r2, fp
  40a746:	f8dd a020 	ldr.w	sl, [sp, #32]
  40a74a:	e004      	b.n	40a756 <_svfprintf_r+0xdf6>
  40a74c:	3408      	adds	r4, #8
  40a74e:	3d10      	subs	r5, #16
  40a750:	2d10      	cmp	r5, #16
  40a752:	f77f af52 	ble.w	40a5fa <_svfprintf_r+0xc9a>
  40a756:	3301      	adds	r3, #1
  40a758:	3210      	adds	r2, #16
  40a75a:	2b07      	cmp	r3, #7
  40a75c:	9225      	str	r2, [sp, #148]	; 0x94
  40a75e:	9324      	str	r3, [sp, #144]	; 0x90
  40a760:	f8c4 9000 	str.w	r9, [r4]
  40a764:	f8c4 8004 	str.w	r8, [r4, #4]
  40a768:	ddf0      	ble.n	40a74c <_svfprintf_r+0xdec>
  40a76a:	4650      	mov	r0, sl
  40a76c:	4631      	mov	r1, r6
  40a76e:	aa23      	add	r2, sp, #140	; 0x8c
  40a770:	f004 f902 	bl	40e978 <__ssprint_r>
  40a774:	2800      	cmp	r0, #0
  40a776:	f47f a9b9 	bne.w	409aec <_svfprintf_r+0x18c>
  40a77a:	9a25      	ldr	r2, [sp, #148]	; 0x94
  40a77c:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40a77e:	463c      	mov	r4, r7
  40a780:	e7e5      	b.n	40a74e <_svfprintf_r+0xdee>
  40a782:	9a24      	ldr	r2, [sp, #144]	; 0x90
  40a784:	9818      	ldr	r0, [sp, #96]	; 0x60
  40a786:	9917      	ldr	r1, [sp, #92]	; 0x5c
  40a788:	6021      	str	r1, [r4, #0]
  40a78a:	3201      	adds	r2, #1
  40a78c:	4483      	add	fp, r0
  40a78e:	2a07      	cmp	r2, #7
  40a790:	f8cd b094 	str.w	fp, [sp, #148]	; 0x94
  40a794:	6060      	str	r0, [r4, #4]
  40a796:	9224      	str	r2, [sp, #144]	; 0x90
  40a798:	f300 820a 	bgt.w	40abb0 <_svfprintf_r+0x1250>
  40a79c:	3408      	adds	r4, #8
  40a79e:	e7ac      	b.n	40a6fa <_svfprintf_r+0xd9a>
  40a7a0:	9b07      	ldr	r3, [sp, #28]
  40a7a2:	07d9      	lsls	r1, r3, #31
  40a7a4:	f53f addc 	bmi.w	40a360 <_svfprintf_r+0xa00>
  40a7a8:	9b10      	ldr	r3, [sp, #64]	; 0x40
  40a7aa:	6023      	str	r3, [r4, #0]
  40a7ac:	3501      	adds	r5, #1
  40a7ae:	f10b 0b01 	add.w	fp, fp, #1
  40a7b2:	2301      	movs	r3, #1
  40a7b4:	2d07      	cmp	r5, #7
  40a7b6:	f8cd b094 	str.w	fp, [sp, #148]	; 0x94
  40a7ba:	9524      	str	r5, [sp, #144]	; 0x90
  40a7bc:	6063      	str	r3, [r4, #4]
  40a7be:	f77f ae01 	ble.w	40a3c4 <_svfprintf_r+0xa64>
  40a7c2:	e70d      	b.n	40a5e0 <_svfprintf_r+0xc80>
  40a7c4:	9808      	ldr	r0, [sp, #32]
  40a7c6:	4631      	mov	r1, r6
  40a7c8:	aa23      	add	r2, sp, #140	; 0x8c
  40a7ca:	f004 f8d5 	bl	40e978 <__ssprint_r>
  40a7ce:	2800      	cmp	r0, #0
  40a7d0:	f47f a98c 	bne.w	409aec <_svfprintf_r+0x18c>
  40a7d4:	9b25      	ldr	r3, [sp, #148]	; 0x94
  40a7d6:	9d24      	ldr	r5, [sp, #144]	; 0x90
  40a7d8:	463c      	mov	r4, r7
  40a7da:	e5ce      	b.n	40a37a <_svfprintf_r+0xa1a>
  40a7dc:	9808      	ldr	r0, [sp, #32]
  40a7de:	4631      	mov	r1, r6
  40a7e0:	aa23      	add	r2, sp, #140	; 0x8c
  40a7e2:	f004 f8c9 	bl	40e978 <__ssprint_r>
  40a7e6:	2800      	cmp	r0, #0
  40a7e8:	f47f a980 	bne.w	409aec <_svfprintf_r+0x18c>
  40a7ec:	f8dd b094 	ldr.w	fp, [sp, #148]	; 0x94
  40a7f0:	9d24      	ldr	r5, [sp, #144]	; 0x90
  40a7f2:	463c      	mov	r4, r7
  40a7f4:	e5cf      	b.n	40a396 <_svfprintf_r+0xa36>
  40a7f6:	9808      	ldr	r0, [sp, #32]
  40a7f8:	4631      	mov	r1, r6
  40a7fa:	aa23      	add	r2, sp, #140	; 0x8c
  40a7fc:	f004 f8bc 	bl	40e978 <__ssprint_r>
  40a800:	2800      	cmp	r0, #0
  40a802:	f47f a973 	bne.w	409aec <_svfprintf_r+0x18c>
  40a806:	f8dd b094 	ldr.w	fp, [sp, #148]	; 0x94
  40a80a:	463c      	mov	r4, r7
  40a80c:	f7ff ba4c 	b.w	409ca8 <_svfprintf_r+0x348>
  40a810:	f004 f83c 	bl	40e88c <__fpclassifyd>
  40a814:	2800      	cmp	r0, #0
  40a816:	f040 80c7 	bne.w	40a9a8 <_svfprintf_r+0x1048>
  40a81a:	4686      	mov	lr, r0
  40a81c:	4ab2      	ldr	r2, [pc, #712]	; (40aae8 <_svfprintf_r+0x1188>)
  40a81e:	4bb3      	ldr	r3, [pc, #716]	; (40aaec <_svfprintf_r+0x118c>)
  40a820:	9011      	str	r0, [sp, #68]	; 0x44
  40a822:	9807      	ldr	r0, [sp, #28]
  40a824:	f89d c06f 	ldrb.w	ip, [sp, #111]	; 0x6f
  40a828:	f8cd e048 	str.w	lr, [sp, #72]	; 0x48
  40a82c:	2103      	movs	r1, #3
  40a82e:	f020 0080 	bic.w	r0, r0, #128	; 0x80
  40a832:	2d47      	cmp	r5, #71	; 0x47
  40a834:	bfd8      	it	le
  40a836:	461a      	movle	r2, r3
  40a838:	9109      	str	r1, [sp, #36]	; 0x24
  40a83a:	9007      	str	r0, [sp, #28]
  40a83c:	9210      	str	r2, [sp, #64]	; 0x40
  40a83e:	910d      	str	r1, [sp, #52]	; 0x34
  40a840:	f7ff b9ae 	b.w	409ba0 <_svfprintf_r+0x240>
  40a844:	9b07      	ldr	r3, [sp, #28]
  40a846:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  40a848:	f013 0f40 	tst.w	r3, #64	; 0x40
  40a84c:	4613      	mov	r3, r2
  40a84e:	f43f ac2e 	beq.w	40a0ae <_svfprintf_r+0x74e>
  40a852:	3304      	adds	r3, #4
  40a854:	f8b2 8000 	ldrh.w	r8, [r2]
  40a858:	930e      	str	r3, [sp, #56]	; 0x38
  40a85a:	f04f 0900 	mov.w	r9, #0
  40a85e:	f7ff bb37 	b.w	409ed0 <_svfprintf_r+0x570>
  40a862:	9b07      	ldr	r3, [sp, #28]
  40a864:	06db      	lsls	r3, r3, #27
  40a866:	d40b      	bmi.n	40a880 <_svfprintf_r+0xf20>
  40a868:	9b07      	ldr	r3, [sp, #28]
  40a86a:	065d      	lsls	r5, r3, #25
  40a86c:	d508      	bpl.n	40a880 <_svfprintf_r+0xf20>
  40a86e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  40a870:	6813      	ldr	r3, [r2, #0]
  40a872:	3204      	adds	r2, #4
  40a874:	920e      	str	r2, [sp, #56]	; 0x38
  40a876:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
  40a87a:	801a      	strh	r2, [r3, #0]
  40a87c:	f7ff b895 	b.w	4099aa <_svfprintf_r+0x4a>
  40a880:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  40a882:	6813      	ldr	r3, [r2, #0]
  40a884:	3204      	adds	r2, #4
  40a886:	920e      	str	r2, [sp, #56]	; 0x38
  40a888:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  40a88a:	601a      	str	r2, [r3, #0]
  40a88c:	f7ff b88d 	b.w	4099aa <_svfprintf_r+0x4a>
  40a890:	4693      	mov	fp, r2
  40a892:	3301      	adds	r3, #1
  40a894:	44ab      	add	fp, r5
  40a896:	2b07      	cmp	r3, #7
  40a898:	f8cd b094 	str.w	fp, [sp, #148]	; 0x94
  40a89c:	9324      	str	r3, [sp, #144]	; 0x90
  40a89e:	f8c4 9000 	str.w	r9, [r4]
  40a8a2:	6065      	str	r5, [r4, #4]
  40a8a4:	f73f af13 	bgt.w	40a6ce <_svfprintf_r+0xd6e>
  40a8a8:	3408      	adds	r4, #8
  40a8aa:	e71b      	b.n	40a6e4 <_svfprintf_r+0xd84>
  40a8ac:	9808      	ldr	r0, [sp, #32]
  40a8ae:	4631      	mov	r1, r6
  40a8b0:	aa23      	add	r2, sp, #140	; 0x8c
  40a8b2:	f004 f861 	bl	40e978 <__ssprint_r>
  40a8b6:	2800      	cmp	r0, #0
  40a8b8:	f47f a918 	bne.w	409aec <_svfprintf_r+0x18c>
  40a8bc:	f8dd b094 	ldr.w	fp, [sp, #148]	; 0x94
  40a8c0:	463c      	mov	r4, r7
  40a8c2:	e4c0      	b.n	40a246 <_svfprintf_r+0x8e6>
  40a8c4:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40a8c6:	4a8a      	ldr	r2, [pc, #552]	; (40aaf0 <_svfprintf_r+0x1190>)
  40a8c8:	6022      	str	r2, [r4, #0]
  40a8ca:	3301      	adds	r3, #1
  40a8cc:	f10b 0b01 	add.w	fp, fp, #1
  40a8d0:	2201      	movs	r2, #1
  40a8d2:	2b07      	cmp	r3, #7
  40a8d4:	f8cd b094 	str.w	fp, [sp, #148]	; 0x94
  40a8d8:	9324      	str	r3, [sp, #144]	; 0x90
  40a8da:	6062      	str	r2, [r4, #4]
  40a8dc:	f300 80f4 	bgt.w	40aac8 <_svfprintf_r+0x1168>
  40a8e0:	3408      	adds	r4, #8
  40a8e2:	b92d      	cbnz	r5, 40a8f0 <_svfprintf_r+0xf90>
  40a8e4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  40a8e6:	b91b      	cbnz	r3, 40a8f0 <_svfprintf_r+0xf90>
  40a8e8:	9b07      	ldr	r3, [sp, #28]
  40a8ea:	07db      	lsls	r3, r3, #31
  40a8ec:	f57f aa32 	bpl.w	409d54 <_svfprintf_r+0x3f4>
  40a8f0:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40a8f2:	9818      	ldr	r0, [sp, #96]	; 0x60
  40a8f4:	9a17      	ldr	r2, [sp, #92]	; 0x5c
  40a8f6:	6022      	str	r2, [r4, #0]
  40a8f8:	3301      	adds	r3, #1
  40a8fa:	eb0b 0100 	add.w	r1, fp, r0
  40a8fe:	2b07      	cmp	r3, #7
  40a900:	9125      	str	r1, [sp, #148]	; 0x94
  40a902:	6060      	str	r0, [r4, #4]
  40a904:	9324      	str	r3, [sp, #144]	; 0x90
  40a906:	f300 81f3 	bgt.w	40acf0 <_svfprintf_r+0x1390>
  40a90a:	f104 0208 	add.w	r2, r4, #8
  40a90e:	426d      	negs	r5, r5
  40a910:	2d00      	cmp	r5, #0
  40a912:	f340 80fc 	ble.w	40ab0e <_svfprintf_r+0x11ae>
  40a916:	2d10      	cmp	r5, #16
  40a918:	f8df 91d8 	ldr.w	r9, [pc, #472]	; 40aaf4 <_svfprintf_r+0x1194>
  40a91c:	f340 813d 	ble.w	40ab9a <_svfprintf_r+0x123a>
  40a920:	2410      	movs	r4, #16
  40a922:	f8dd 8020 	ldr.w	r8, [sp, #32]
  40a926:	e004      	b.n	40a932 <_svfprintf_r+0xfd2>
  40a928:	3208      	adds	r2, #8
  40a92a:	3d10      	subs	r5, #16
  40a92c:	2d10      	cmp	r5, #16
  40a92e:	f340 8134 	ble.w	40ab9a <_svfprintf_r+0x123a>
  40a932:	3301      	adds	r3, #1
  40a934:	3110      	adds	r1, #16
  40a936:	2b07      	cmp	r3, #7
  40a938:	9125      	str	r1, [sp, #148]	; 0x94
  40a93a:	9324      	str	r3, [sp, #144]	; 0x90
  40a93c:	f8c2 9000 	str.w	r9, [r2]
  40a940:	6054      	str	r4, [r2, #4]
  40a942:	ddf1      	ble.n	40a928 <_svfprintf_r+0xfc8>
  40a944:	4640      	mov	r0, r8
  40a946:	4631      	mov	r1, r6
  40a948:	aa23      	add	r2, sp, #140	; 0x8c
  40a94a:	f004 f815 	bl	40e978 <__ssprint_r>
  40a94e:	2800      	cmp	r0, #0
  40a950:	f47f a8cc 	bne.w	409aec <_svfprintf_r+0x18c>
  40a954:	9925      	ldr	r1, [sp, #148]	; 0x94
  40a956:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40a958:	463a      	mov	r2, r7
  40a95a:	e7e6      	b.n	40a92a <_svfprintf_r+0xfca>
  40a95c:	9b25      	ldr	r3, [sp, #148]	; 0x94
  40a95e:	46b1      	mov	r9, r6
  40a960:	2b00      	cmp	r3, #0
  40a962:	f43f a8c4 	beq.w	409aee <_svfprintf_r+0x18e>
  40a966:	9808      	ldr	r0, [sp, #32]
  40a968:	4631      	mov	r1, r6
  40a96a:	aa23      	add	r2, sp, #140	; 0x8c
  40a96c:	f004 f804 	bl	40e978 <__ssprint_r>
  40a970:	f7ff b8bd 	b.w	409aee <_svfprintf_r+0x18e>
  40a974:	980c      	ldr	r0, [sp, #48]	; 0x30
  40a976:	910e      	str	r1, [sp, #56]	; 0x38
  40a978:	4240      	negs	r0, r0
  40a97a:	900c      	str	r0, [sp, #48]	; 0x30
  40a97c:	4619      	mov	r1, r3
  40a97e:	f7ff ba3f 	b.w	409e00 <_svfprintf_r+0x4a0>
  40a982:	f041 0120 	orr.w	r1, r1, #32
  40a986:	9107      	str	r1, [sp, #28]
  40a988:	785d      	ldrb	r5, [r3, #1]
  40a98a:	1c59      	adds	r1, r3, #1
  40a98c:	f7ff b83b 	b.w	409a06 <_svfprintf_r+0xa6>
  40a990:	9808      	ldr	r0, [sp, #32]
  40a992:	4631      	mov	r1, r6
  40a994:	aa23      	add	r2, sp, #140	; 0x8c
  40a996:	f003 ffef 	bl	40e978 <__ssprint_r>
  40a99a:	2800      	cmp	r0, #0
  40a99c:	f47f a8a6 	bne.w	409aec <_svfprintf_r+0x18c>
  40a9a0:	f8dd b094 	ldr.w	fp, [sp, #148]	; 0x94
  40a9a4:	463c      	mov	r4, r7
  40a9a6:	e464      	b.n	40a272 <_svfprintf_r+0x912>
  40a9a8:	f025 0320 	bic.w	r3, r5, #32
  40a9ac:	f1ba 3fff 	cmp.w	sl, #4294967295
  40a9b0:	930d      	str	r3, [sp, #52]	; 0x34
  40a9b2:	f000 8096 	beq.w	40aae2 <_svfprintf_r+0x1182>
  40a9b6:	2b47      	cmp	r3, #71	; 0x47
  40a9b8:	d105      	bne.n	40a9c6 <_svfprintf_r+0x1066>
  40a9ba:	f1ba 0f00 	cmp.w	sl, #0
  40a9be:	bf14      	ite	ne
  40a9c0:	46d3      	movne	fp, sl
  40a9c2:	f04f 0b01 	moveq.w	fp, #1
  40a9c6:	9b07      	ldr	r3, [sp, #28]
  40a9c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
  40a9cc:	9311      	str	r3, [sp, #68]	; 0x44
  40a9ce:	9b15      	ldr	r3, [sp, #84]	; 0x54
  40a9d0:	f1b3 0a00 	subs.w	sl, r3, #0
  40a9d4:	9b14      	ldr	r3, [sp, #80]	; 0x50
  40a9d6:	9309      	str	r3, [sp, #36]	; 0x24
  40a9d8:	bfbb      	ittet	lt
  40a9da:	4653      	movlt	r3, sl
  40a9dc:	f103 4a00 	addlt.w	sl, r3, #2147483648	; 0x80000000
  40a9e0:	2300      	movge	r3, #0
  40a9e2:	232d      	movlt	r3, #45	; 0x2d
  40a9e4:	2d66      	cmp	r5, #102	; 0x66
  40a9e6:	930f      	str	r3, [sp, #60]	; 0x3c
  40a9e8:	f000 80ac 	beq.w	40ab44 <_svfprintf_r+0x11e4>
  40a9ec:	2d46      	cmp	r5, #70	; 0x46
  40a9ee:	f000 80a9 	beq.w	40ab44 <_svfprintf_r+0x11e4>
  40a9f2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  40a9f4:	9a09      	ldr	r2, [sp, #36]	; 0x24
  40a9f6:	2b45      	cmp	r3, #69	; 0x45
  40a9f8:	bf0c      	ite	eq
  40a9fa:	f10b 0901 	addeq.w	r9, fp, #1
  40a9fe:	46d9      	movne	r9, fp
  40aa00:	2002      	movs	r0, #2
  40aa02:	a91d      	add	r1, sp, #116	; 0x74
  40aa04:	e88d 0201 	stmia.w	sp, {r0, r9}
  40aa08:	9102      	str	r1, [sp, #8]
  40aa0a:	a81e      	add	r0, sp, #120	; 0x78
  40aa0c:	a921      	add	r1, sp, #132	; 0x84
  40aa0e:	9003      	str	r0, [sp, #12]
  40aa10:	4653      	mov	r3, sl
  40aa12:	9104      	str	r1, [sp, #16]
  40aa14:	9808      	ldr	r0, [sp, #32]
  40aa16:	f002 fc33 	bl	40d280 <_dtoa_r>
  40aa1a:	2d67      	cmp	r5, #103	; 0x67
  40aa1c:	9010      	str	r0, [sp, #64]	; 0x40
  40aa1e:	d002      	beq.n	40aa26 <_svfprintf_r+0x10c6>
  40aa20:	2d47      	cmp	r5, #71	; 0x47
  40aa22:	f040 809f 	bne.w	40ab64 <_svfprintf_r+0x1204>
  40aa26:	9b07      	ldr	r3, [sp, #28]
  40aa28:	07db      	lsls	r3, r3, #31
  40aa2a:	f140 8189 	bpl.w	40ad40 <_svfprintf_r+0x13e0>
  40aa2e:	9b10      	ldr	r3, [sp, #64]	; 0x40
  40aa30:	eb03 0809 	add.w	r8, r3, r9
  40aa34:	9809      	ldr	r0, [sp, #36]	; 0x24
  40aa36:	4651      	mov	r1, sl
  40aa38:	2200      	movs	r2, #0
  40aa3a:	2300      	movs	r3, #0
  40aa3c:	f7fd fac6 	bl	407fcc <__aeabi_dcmpeq>
  40aa40:	2800      	cmp	r0, #0
  40aa42:	f040 80fd 	bne.w	40ac40 <_svfprintf_r+0x12e0>
  40aa46:	9b21      	ldr	r3, [sp, #132]	; 0x84
  40aa48:	4598      	cmp	r8, r3
  40aa4a:	d906      	bls.n	40aa5a <_svfprintf_r+0x10fa>
  40aa4c:	2130      	movs	r1, #48	; 0x30
  40aa4e:	1c5a      	adds	r2, r3, #1
  40aa50:	9221      	str	r2, [sp, #132]	; 0x84
  40aa52:	7019      	strb	r1, [r3, #0]
  40aa54:	9b21      	ldr	r3, [sp, #132]	; 0x84
  40aa56:	4598      	cmp	r8, r3
  40aa58:	d8f9      	bhi.n	40aa4e <_svfprintf_r+0x10ee>
  40aa5a:	9a10      	ldr	r2, [sp, #64]	; 0x40
  40aa5c:	1a9b      	subs	r3, r3, r2
  40aa5e:	9313      	str	r3, [sp, #76]	; 0x4c
  40aa60:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  40aa62:	2b47      	cmp	r3, #71	; 0x47
  40aa64:	9b1d      	ldr	r3, [sp, #116]	; 0x74
  40aa66:	f000 80de 	beq.w	40ac26 <_svfprintf_r+0x12c6>
  40aa6a:	2d65      	cmp	r5, #101	; 0x65
  40aa6c:	f340 80f8 	ble.w	40ac60 <_svfprintf_r+0x1300>
  40aa70:	2d66      	cmp	r5, #102	; 0x66
  40aa72:	9312      	str	r3, [sp, #72]	; 0x48
  40aa74:	f000 8157 	beq.w	40ad26 <_svfprintf_r+0x13c6>
  40aa78:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  40aa7a:	9a12      	ldr	r2, [sp, #72]	; 0x48
  40aa7c:	4293      	cmp	r3, r2
  40aa7e:	f300 8144 	bgt.w	40ad0a <_svfprintf_r+0x13aa>
  40aa82:	9b07      	ldr	r3, [sp, #28]
  40aa84:	07d9      	lsls	r1, r3, #31
  40aa86:	f100 8173 	bmi.w	40ad70 <_svfprintf_r+0x1410>
  40aa8a:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
  40aa8e:	920d      	str	r2, [sp, #52]	; 0x34
  40aa90:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  40aa92:	2a00      	cmp	r2, #0
  40aa94:	f040 80bc 	bne.w	40ac10 <_svfprintf_r+0x12b0>
  40aa98:	9309      	str	r3, [sp, #36]	; 0x24
  40aa9a:	9b11      	ldr	r3, [sp, #68]	; 0x44
  40aa9c:	9307      	str	r3, [sp, #28]
  40aa9e:	9211      	str	r2, [sp, #68]	; 0x44
  40aaa0:	f89d c06f 	ldrb.w	ip, [sp, #111]	; 0x6f
  40aaa4:	f7ff b87c 	b.w	409ba0 <_svfprintf_r+0x240>
  40aaa8:	9808      	ldr	r0, [sp, #32]
  40aaaa:	2140      	movs	r1, #64	; 0x40
  40aaac:	f7fe f82c 	bl	408b08 <_malloc_r>
  40aab0:	f8c9 0000 	str.w	r0, [r9]
  40aab4:	f8c9 0010 	str.w	r0, [r9, #16]
  40aab8:	2800      	cmp	r0, #0
  40aaba:	f000 818c 	beq.w	40add6 <_svfprintf_r+0x1476>
  40aabe:	2340      	movs	r3, #64	; 0x40
  40aac0:	f8c9 3014 	str.w	r3, [r9, #20]
  40aac4:	f7fe bf64 	b.w	409990 <_svfprintf_r+0x30>
  40aac8:	9808      	ldr	r0, [sp, #32]
  40aaca:	4631      	mov	r1, r6
  40aacc:	aa23      	add	r2, sp, #140	; 0x8c
  40aace:	f003 ff53 	bl	40e978 <__ssprint_r>
  40aad2:	2800      	cmp	r0, #0
  40aad4:	f47f a80a 	bne.w	409aec <_svfprintf_r+0x18c>
  40aad8:	9d1d      	ldr	r5, [sp, #116]	; 0x74
  40aada:	f8dd b094 	ldr.w	fp, [sp, #148]	; 0x94
  40aade:	463c      	mov	r4, r7
  40aae0:	e6ff      	b.n	40a8e2 <_svfprintf_r+0xf82>
  40aae2:	f04f 0b06 	mov.w	fp, #6
  40aae6:	e76e      	b.n	40a9c6 <_svfprintf_r+0x1066>
  40aae8:	00411c0c 	.word	0x00411c0c
  40aaec:	00411c08 	.word	0x00411c08
  40aaf0:	004119fc 	.word	0x004119fc
  40aaf4:	00411be0 	.word	0x00411be0
  40aaf8:	9808      	ldr	r0, [sp, #32]
  40aafa:	4631      	mov	r1, r6
  40aafc:	aa23      	add	r2, sp, #140	; 0x8c
  40aafe:	f003 ff3b 	bl	40e978 <__ssprint_r>
  40ab02:	2800      	cmp	r0, #0
  40ab04:	f47e aff2 	bne.w	409aec <_svfprintf_r+0x18c>
  40ab08:	9925      	ldr	r1, [sp, #148]	; 0x94
  40ab0a:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40ab0c:	463a      	mov	r2, r7
  40ab0e:	9c13      	ldr	r4, [sp, #76]	; 0x4c
  40ab10:	6054      	str	r4, [r2, #4]
  40ab12:	3301      	adds	r3, #1
  40ab14:	eb01 0b04 	add.w	fp, r1, r4
  40ab18:	2b07      	cmp	r3, #7
  40ab1a:	9910      	ldr	r1, [sp, #64]	; 0x40
  40ab1c:	f8cd b094 	str.w	fp, [sp, #148]	; 0x94
  40ab20:	9324      	str	r3, [sp, #144]	; 0x90
  40ab22:	6011      	str	r1, [r2, #0]
  40ab24:	f73f ac5b 	bgt.w	40a3de <_svfprintf_r+0xa7e>
  40ab28:	f102 0408 	add.w	r4, r2, #8
  40ab2c:	f7ff b912 	b.w	409d54 <_svfprintf_r+0x3f4>
  40ab30:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
  40ab34:	f7fe fee6 	bl	409904 <strlen>
  40ab38:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
  40ab3c:	900d      	str	r0, [sp, #52]	; 0x34
  40ab3e:	4603      	mov	r3, r0
  40ab40:	f7ff ba1b 	b.w	409f7a <_svfprintf_r+0x61a>
  40ab44:	2003      	movs	r0, #3
  40ab46:	a91d      	add	r1, sp, #116	; 0x74
  40ab48:	e88d 0801 	stmia.w	sp, {r0, fp}
  40ab4c:	9102      	str	r1, [sp, #8]
  40ab4e:	a81e      	add	r0, sp, #120	; 0x78
  40ab50:	a921      	add	r1, sp, #132	; 0x84
  40ab52:	9003      	str	r0, [sp, #12]
  40ab54:	9a09      	ldr	r2, [sp, #36]	; 0x24
  40ab56:	9104      	str	r1, [sp, #16]
  40ab58:	4653      	mov	r3, sl
  40ab5a:	9808      	ldr	r0, [sp, #32]
  40ab5c:	f002 fb90 	bl	40d280 <_dtoa_r>
  40ab60:	46d9      	mov	r9, fp
  40ab62:	9010      	str	r0, [sp, #64]	; 0x40
  40ab64:	9b10      	ldr	r3, [sp, #64]	; 0x40
  40ab66:	eb03 0809 	add.w	r8, r3, r9
  40ab6a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  40ab6c:	2b46      	cmp	r3, #70	; 0x46
  40ab6e:	f47f af61 	bne.w	40aa34 <_svfprintf_r+0x10d4>
  40ab72:	9b10      	ldr	r3, [sp, #64]	; 0x40
  40ab74:	781b      	ldrb	r3, [r3, #0]
  40ab76:	2b30      	cmp	r3, #48	; 0x30
  40ab78:	f000 80e4 	beq.w	40ad44 <_svfprintf_r+0x13e4>
  40ab7c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
  40ab7e:	4498      	add	r8, r3
  40ab80:	e758      	b.n	40aa34 <_svfprintf_r+0x10d4>
  40ab82:	9808      	ldr	r0, [sp, #32]
  40ab84:	4631      	mov	r1, r6
  40ab86:	aa23      	add	r2, sp, #140	; 0x8c
  40ab88:	f003 fef6 	bl	40e978 <__ssprint_r>
  40ab8c:	2800      	cmp	r0, #0
  40ab8e:	f47e afad 	bne.w	409aec <_svfprintf_r+0x18c>
  40ab92:	f8dd b094 	ldr.w	fp, [sp, #148]	; 0x94
  40ab96:	463c      	mov	r4, r7
  40ab98:	e4a7      	b.n	40a4ea <_svfprintf_r+0xb8a>
  40ab9a:	3301      	adds	r3, #1
  40ab9c:	4429      	add	r1, r5
  40ab9e:	2b07      	cmp	r3, #7
  40aba0:	9125      	str	r1, [sp, #148]	; 0x94
  40aba2:	9324      	str	r3, [sp, #144]	; 0x90
  40aba4:	f8c2 9000 	str.w	r9, [r2]
  40aba8:	6055      	str	r5, [r2, #4]
  40abaa:	dca5      	bgt.n	40aaf8 <_svfprintf_r+0x1198>
  40abac:	3208      	adds	r2, #8
  40abae:	e7ae      	b.n	40ab0e <_svfprintf_r+0x11ae>
  40abb0:	9808      	ldr	r0, [sp, #32]
  40abb2:	4631      	mov	r1, r6
  40abb4:	aa23      	add	r2, sp, #140	; 0x8c
  40abb6:	f003 fedf 	bl	40e978 <__ssprint_r>
  40abba:	2800      	cmp	r0, #0
  40abbc:	f47e af96 	bne.w	409aec <_svfprintf_r+0x18c>
  40abc0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
  40abc2:	f8dd b094 	ldr.w	fp, [sp, #148]	; 0x94
  40abc6:	463c      	mov	r4, r7
  40abc8:	e597      	b.n	40a6fa <_svfprintf_r+0xd9a>
  40abca:	4653      	mov	r3, sl
  40abcc:	2b06      	cmp	r3, #6
  40abce:	bf28      	it	cs
  40abd0:	2306      	movcs	r3, #6
  40abd2:	930d      	str	r3, [sp, #52]	; 0x34
  40abd4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  40abd8:	f8dd c040 	ldr.w	ip, [sp, #64]	; 0x40
  40abdc:	9309      	str	r3, [sp, #36]	; 0x24
  40abde:	4b83      	ldr	r3, [pc, #524]	; (40adec <_svfprintf_r+0x148c>)
  40abe0:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
  40abe4:	f8cd c044 	str.w	ip, [sp, #68]	; 0x44
  40abe8:	f8cd c048 	str.w	ip, [sp, #72]	; 0x48
  40abec:	9310      	str	r3, [sp, #64]	; 0x40
  40abee:	f7fe bfd7 	b.w	409ba0 <_svfprintf_r+0x240>
  40abf2:	9808      	ldr	r0, [sp, #32]
  40abf4:	4631      	mov	r1, r6
  40abf6:	aa23      	add	r2, sp, #140	; 0x8c
  40abf8:	f003 febe 	bl	40e978 <__ssprint_r>
  40abfc:	2800      	cmp	r0, #0
  40abfe:	f47e af75 	bne.w	409aec <_svfprintf_r+0x18c>
  40ac02:	9b1d      	ldr	r3, [sp, #116]	; 0x74
  40ac04:	9a13      	ldr	r2, [sp, #76]	; 0x4c
  40ac06:	f8dd b094 	ldr.w	fp, [sp, #148]	; 0x94
  40ac0a:	1ad3      	subs	r3, r2, r3
  40ac0c:	463c      	mov	r4, r7
  40ac0e:	e58a      	b.n	40a726 <_svfprintf_r+0xdc6>
  40ac10:	9309      	str	r3, [sp, #36]	; 0x24
  40ac12:	9b11      	ldr	r3, [sp, #68]	; 0x44
  40ac14:	9307      	str	r3, [sp, #28]
  40ac16:	f04f 0c2d 	mov.w	ip, #45	; 0x2d
  40ac1a:	2300      	movs	r3, #0
  40ac1c:	f88d c06f 	strb.w	ip, [sp, #111]	; 0x6f
  40ac20:	9311      	str	r3, [sp, #68]	; 0x44
  40ac22:	f7fe bfc0 	b.w	409ba6 <_svfprintf_r+0x246>
  40ac26:	1cda      	adds	r2, r3, #3
  40ac28:	db19      	blt.n	40ac5e <_svfprintf_r+0x12fe>
  40ac2a:	459b      	cmp	fp, r3
  40ac2c:	db17      	blt.n	40ac5e <_svfprintf_r+0x12fe>
  40ac2e:	9312      	str	r3, [sp, #72]	; 0x48
  40ac30:	2567      	movs	r5, #103	; 0x67
  40ac32:	e721      	b.n	40aa78 <_svfprintf_r+0x1118>
  40ac34:	f04f 0c2d 	mov.w	ip, #45	; 0x2d
  40ac38:	f88d c06f 	strb.w	ip, [sp, #111]	; 0x6f
  40ac3c:	f7ff ba98 	b.w	40a170 <_svfprintf_r+0x810>
  40ac40:	4643      	mov	r3, r8
  40ac42:	e70a      	b.n	40aa5a <_svfprintf_r+0x10fa>
  40ac44:	ea2a 73ea 	bic.w	r3, sl, sl, asr #31
  40ac48:	9011      	str	r0, [sp, #68]	; 0x44
  40ac4a:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
  40ac4e:	9012      	str	r0, [sp, #72]	; 0x48
  40ac50:	f89d c06f 	ldrb.w	ip, [sp, #111]	; 0x6f
  40ac54:	9309      	str	r3, [sp, #36]	; 0x24
  40ac56:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
  40ac5a:	f7fe bfa1 	b.w	409ba0 <_svfprintf_r+0x240>
  40ac5e:	3d02      	subs	r5, #2
  40ac60:	3b01      	subs	r3, #1
  40ac62:	2b00      	cmp	r3, #0
  40ac64:	931d      	str	r3, [sp, #116]	; 0x74
  40ac66:	bfba      	itte	lt
  40ac68:	425b      	neglt	r3, r3
  40ac6a:	222d      	movlt	r2, #45	; 0x2d
  40ac6c:	222b      	movge	r2, #43	; 0x2b
  40ac6e:	2b09      	cmp	r3, #9
  40ac70:	f88d 507c 	strb.w	r5, [sp, #124]	; 0x7c
  40ac74:	f88d 207d 	strb.w	r2, [sp, #125]	; 0x7d
  40ac78:	dd72      	ble.n	40ad60 <_svfprintf_r+0x1400>
  40ac7a:	f10d 0e8b 	add.w	lr, sp, #139	; 0x8b
  40ac7e:	4670      	mov	r0, lr
  40ac80:	4a5b      	ldr	r2, [pc, #364]	; (40adf0 <_svfprintf_r+0x1490>)
  40ac82:	fb82 2103 	smull	r2, r1, r2, r3
  40ac86:	17da      	asrs	r2, r3, #31
  40ac88:	ebc2 02a1 	rsb	r2, r2, r1, asr #2
  40ac8c:	eb02 0182 	add.w	r1, r2, r2, lsl #2
  40ac90:	eba3 0341 	sub.w	r3, r3, r1, lsl #1
  40ac94:	f103 0130 	add.w	r1, r3, #48	; 0x30
  40ac98:	2a09      	cmp	r2, #9
  40ac9a:	4613      	mov	r3, r2
  40ac9c:	f800 1d01 	strb.w	r1, [r0, #-1]!
  40aca0:	dcee      	bgt.n	40ac80 <_svfprintf_r+0x1320>
  40aca2:	4602      	mov	r2, r0
  40aca4:	3330      	adds	r3, #48	; 0x30
  40aca6:	b2d9      	uxtb	r1, r3
  40aca8:	f802 1d01 	strb.w	r1, [r2, #-1]!
  40acac:	4596      	cmp	lr, r2
  40acae:	f240 8099 	bls.w	40ade4 <_svfprintf_r+0x1484>
  40acb2:	f10d 027e 	add.w	r2, sp, #126	; 0x7e
  40acb6:	4603      	mov	r3, r0
  40acb8:	e001      	b.n	40acbe <_svfprintf_r+0x135e>
  40acba:	f813 1b01 	ldrb.w	r1, [r3], #1
  40acbe:	f802 1b01 	strb.w	r1, [r2], #1
  40acc2:	4573      	cmp	r3, lr
  40acc4:	d1f9      	bne.n	40acba <_svfprintf_r+0x135a>
  40acc6:	ab23      	add	r3, sp, #140	; 0x8c
  40acc8:	1a1b      	subs	r3, r3, r0
  40acca:	f10d 027e 	add.w	r2, sp, #126	; 0x7e
  40acce:	4413      	add	r3, r2
  40acd0:	aa1f      	add	r2, sp, #124	; 0x7c
  40acd2:	1a9b      	subs	r3, r3, r2
  40acd4:	9a13      	ldr	r2, [sp, #76]	; 0x4c
  40acd6:	9319      	str	r3, [sp, #100]	; 0x64
  40acd8:	2a01      	cmp	r2, #1
  40acda:	4413      	add	r3, r2
  40acdc:	930d      	str	r3, [sp, #52]	; 0x34
  40acde:	dd6b      	ble.n	40adb8 <_svfprintf_r+0x1458>
  40ace0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  40ace2:	2200      	movs	r2, #0
  40ace4:	3301      	adds	r3, #1
  40ace6:	930d      	str	r3, [sp, #52]	; 0x34
  40ace8:	9212      	str	r2, [sp, #72]	; 0x48
  40acea:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  40acee:	e6cf      	b.n	40aa90 <_svfprintf_r+0x1130>
  40acf0:	9808      	ldr	r0, [sp, #32]
  40acf2:	4631      	mov	r1, r6
  40acf4:	aa23      	add	r2, sp, #140	; 0x8c
  40acf6:	f003 fe3f 	bl	40e978 <__ssprint_r>
  40acfa:	2800      	cmp	r0, #0
  40acfc:	f47e aef6 	bne.w	409aec <_svfprintf_r+0x18c>
  40ad00:	9d1d      	ldr	r5, [sp, #116]	; 0x74
  40ad02:	9925      	ldr	r1, [sp, #148]	; 0x94
  40ad04:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40ad06:	463a      	mov	r2, r7
  40ad08:	e601      	b.n	40a90e <_svfprintf_r+0xfae>
  40ad0a:	9b12      	ldr	r3, [sp, #72]	; 0x48
  40ad0c:	2b00      	cmp	r3, #0
  40ad0e:	bfd8      	it	le
  40ad10:	f1c3 0802 	rsble	r8, r3, #2
  40ad14:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  40ad16:	bfc8      	it	gt
  40ad18:	f04f 0801 	movgt.w	r8, #1
  40ad1c:	4443      	add	r3, r8
  40ad1e:	930d      	str	r3, [sp, #52]	; 0x34
  40ad20:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  40ad24:	e6b4      	b.n	40aa90 <_svfprintf_r+0x1130>
  40ad26:	2b00      	cmp	r3, #0
  40ad28:	dd30      	ble.n	40ad8c <_svfprintf_r+0x142c>
  40ad2a:	f1bb 0f00 	cmp.w	fp, #0
  40ad2e:	d125      	bne.n	40ad7c <_svfprintf_r+0x141c>
  40ad30:	9b07      	ldr	r3, [sp, #28]
  40ad32:	07db      	lsls	r3, r3, #31
  40ad34:	d422      	bmi.n	40ad7c <_svfprintf_r+0x141c>
  40ad36:	9a12      	ldr	r2, [sp, #72]	; 0x48
  40ad38:	920d      	str	r2, [sp, #52]	; 0x34
  40ad3a:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
  40ad3e:	e6a7      	b.n	40aa90 <_svfprintf_r+0x1130>
  40ad40:	9b21      	ldr	r3, [sp, #132]	; 0x84
  40ad42:	e68a      	b.n	40aa5a <_svfprintf_r+0x10fa>
  40ad44:	9809      	ldr	r0, [sp, #36]	; 0x24
  40ad46:	4651      	mov	r1, sl
  40ad48:	2200      	movs	r2, #0
  40ad4a:	2300      	movs	r3, #0
  40ad4c:	f7fd f93e 	bl	407fcc <__aeabi_dcmpeq>
  40ad50:	2800      	cmp	r0, #0
  40ad52:	f47f af13 	bne.w	40ab7c <_svfprintf_r+0x121c>
  40ad56:	f1c9 0301 	rsb	r3, r9, #1
  40ad5a:	931d      	str	r3, [sp, #116]	; 0x74
  40ad5c:	4498      	add	r8, r3
  40ad5e:	e669      	b.n	40aa34 <_svfprintf_r+0x10d4>
  40ad60:	3330      	adds	r3, #48	; 0x30
  40ad62:	2230      	movs	r2, #48	; 0x30
  40ad64:	f88d 307f 	strb.w	r3, [sp, #127]	; 0x7f
  40ad68:	f88d 207e 	strb.w	r2, [sp, #126]	; 0x7e
  40ad6c:	ab20      	add	r3, sp, #128	; 0x80
  40ad6e:	e7af      	b.n	40acd0 <_svfprintf_r+0x1370>
  40ad70:	9b12      	ldr	r3, [sp, #72]	; 0x48
  40ad72:	3301      	adds	r3, #1
  40ad74:	930d      	str	r3, [sp, #52]	; 0x34
  40ad76:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  40ad7a:	e689      	b.n	40aa90 <_svfprintf_r+0x1130>
  40ad7c:	9b12      	ldr	r3, [sp, #72]	; 0x48
  40ad7e:	f10b 0801 	add.w	r8, fp, #1
  40ad82:	4443      	add	r3, r8
  40ad84:	930d      	str	r3, [sp, #52]	; 0x34
  40ad86:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  40ad8a:	e681      	b.n	40aa90 <_svfprintf_r+0x1130>
  40ad8c:	f1bb 0f00 	cmp.w	fp, #0
  40ad90:	d11b      	bne.n	40adca <_svfprintf_r+0x146a>
  40ad92:	9b07      	ldr	r3, [sp, #28]
  40ad94:	07d8      	lsls	r0, r3, #31
  40ad96:	d418      	bmi.n	40adca <_svfprintf_r+0x146a>
  40ad98:	2301      	movs	r3, #1
  40ad9a:	930d      	str	r3, [sp, #52]	; 0x34
  40ad9c:	e678      	b.n	40aa90 <_svfprintf_r+0x1130>
  40ad9e:	9d0e      	ldr	r5, [sp, #56]	; 0x38
  40ada0:	f8d5 a000 	ldr.w	sl, [r5]
  40ada4:	4628      	mov	r0, r5
  40ada6:	3004      	adds	r0, #4
  40ada8:	f1ba 0f00 	cmp.w	sl, #0
  40adac:	785d      	ldrb	r5, [r3, #1]
  40adae:	900e      	str	r0, [sp, #56]	; 0x38
  40adb0:	f6be ae29 	bge.w	409a06 <_svfprintf_r+0xa6>
  40adb4:	f7fe be25 	b.w	409a02 <_svfprintf_r+0xa2>
  40adb8:	9b07      	ldr	r3, [sp, #28]
  40adba:	f013 0301 	ands.w	r3, r3, #1
  40adbe:	d18f      	bne.n	40ace0 <_svfprintf_r+0x1380>
  40adc0:	9312      	str	r3, [sp, #72]	; 0x48
  40adc2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  40adc4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  40adc8:	e662      	b.n	40aa90 <_svfprintf_r+0x1130>
  40adca:	f10b 0302 	add.w	r3, fp, #2
  40adce:	930d      	str	r3, [sp, #52]	; 0x34
  40add0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  40add4:	e65c      	b.n	40aa90 <_svfprintf_r+0x1130>
  40add6:	9a08      	ldr	r2, [sp, #32]
  40add8:	230c      	movs	r3, #12
  40adda:	6013      	str	r3, [r2, #0]
  40addc:	f04f 30ff 	mov.w	r0, #4294967295
  40ade0:	f7fe be8e 	b.w	409b00 <_svfprintf_r+0x1a0>
  40ade4:	f10d 037e 	add.w	r3, sp, #126	; 0x7e
  40ade8:	e772      	b.n	40acd0 <_svfprintf_r+0x1370>
  40adea:	bf00      	nop
  40adec:	00411c38 	.word	0x00411c38
  40adf0:	66666667 	.word	0x66666667

0040adf4 <__sprint_r.part.0>:
  40adf4:	6e4b      	ldr	r3, [r1, #100]	; 0x64
  40adf6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  40adfa:	049c      	lsls	r4, r3, #18
  40adfc:	460f      	mov	r7, r1
  40adfe:	4692      	mov	sl, r2
  40ae00:	d52b      	bpl.n	40ae5a <__sprint_r.part.0+0x66>
  40ae02:	6893      	ldr	r3, [r2, #8]
  40ae04:	6812      	ldr	r2, [r2, #0]
  40ae06:	b333      	cbz	r3, 40ae56 <__sprint_r.part.0+0x62>
  40ae08:	4680      	mov	r8, r0
  40ae0a:	f102 0908 	add.w	r9, r2, #8
  40ae0e:	e919 0060 	ldmdb	r9, {r5, r6}
  40ae12:	08b6      	lsrs	r6, r6, #2
  40ae14:	d017      	beq.n	40ae46 <__sprint_r.part.0+0x52>
  40ae16:	3d04      	subs	r5, #4
  40ae18:	2400      	movs	r4, #0
  40ae1a:	e001      	b.n	40ae20 <__sprint_r.part.0+0x2c>
  40ae1c:	42a6      	cmp	r6, r4
  40ae1e:	d010      	beq.n	40ae42 <__sprint_r.part.0+0x4e>
  40ae20:	4640      	mov	r0, r8
  40ae22:	f855 1f04 	ldr.w	r1, [r5, #4]!
  40ae26:	463a      	mov	r2, r7
  40ae28:	f003 f9e2 	bl	40e1f0 <_fputwc_r>
  40ae2c:	1c43      	adds	r3, r0, #1
  40ae2e:	f104 0401 	add.w	r4, r4, #1
  40ae32:	d1f3      	bne.n	40ae1c <__sprint_r.part.0+0x28>
  40ae34:	2300      	movs	r3, #0
  40ae36:	f8ca 3008 	str.w	r3, [sl, #8]
  40ae3a:	f8ca 3004 	str.w	r3, [sl, #4]
  40ae3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40ae42:	f8da 3008 	ldr.w	r3, [sl, #8]
  40ae46:	eba3 0386 	sub.w	r3, r3, r6, lsl #2
  40ae4a:	f8ca 3008 	str.w	r3, [sl, #8]
  40ae4e:	f109 0908 	add.w	r9, r9, #8
  40ae52:	2b00      	cmp	r3, #0
  40ae54:	d1db      	bne.n	40ae0e <__sprint_r.part.0+0x1a>
  40ae56:	2000      	movs	r0, #0
  40ae58:	e7ec      	b.n	40ae34 <__sprint_r.part.0+0x40>
  40ae5a:	f7fd fbf3 	bl	408644 <__sfvwrite_r>
  40ae5e:	2300      	movs	r3, #0
  40ae60:	f8ca 3008 	str.w	r3, [sl, #8]
  40ae64:	f8ca 3004 	str.w	r3, [sl, #4]
  40ae68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0040ae6c <__sprint_r>:
  40ae6c:	6893      	ldr	r3, [r2, #8]
  40ae6e:	b410      	push	{r4}
  40ae70:	b11b      	cbz	r3, 40ae7a <__sprint_r+0xe>
  40ae72:	f85d 4b04 	ldr.w	r4, [sp], #4
  40ae76:	f7ff bfbd 	b.w	40adf4 <__sprint_r.part.0>
  40ae7a:	4618      	mov	r0, r3
  40ae7c:	6053      	str	r3, [r2, #4]
  40ae7e:	f85d 4b04 	ldr.w	r4, [sp], #4
  40ae82:	4770      	bx	lr

0040ae84 <_vfiprintf_r>:
  40ae84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40ae88:	b0ab      	sub	sp, #172	; 0xac
  40ae8a:	461c      	mov	r4, r3
  40ae8c:	9100      	str	r1, [sp, #0]
  40ae8e:	4693      	mov	fp, r2
  40ae90:	9304      	str	r3, [sp, #16]
  40ae92:	9001      	str	r0, [sp, #4]
  40ae94:	b118      	cbz	r0, 40ae9e <_vfiprintf_r+0x1a>
  40ae96:	6b83      	ldr	r3, [r0, #56]	; 0x38
  40ae98:	2b00      	cmp	r3, #0
  40ae9a:	f000 80e3 	beq.w	40b064 <_vfiprintf_r+0x1e0>
  40ae9e:	9b00      	ldr	r3, [sp, #0]
  40aea0:	8999      	ldrh	r1, [r3, #12]
  40aea2:	b28a      	uxth	r2, r1
  40aea4:	0490      	lsls	r0, r2, #18
  40aea6:	d408      	bmi.n	40aeba <_vfiprintf_r+0x36>
  40aea8:	4618      	mov	r0, r3
  40aeaa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
  40aeac:	f441 5200 	orr.w	r2, r1, #8192	; 0x2000
  40aeb0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  40aeb4:	8182      	strh	r2, [r0, #12]
  40aeb6:	6643      	str	r3, [r0, #100]	; 0x64
  40aeb8:	b292      	uxth	r2, r2
  40aeba:	0711      	lsls	r1, r2, #28
  40aebc:	f140 80b2 	bpl.w	40b024 <_vfiprintf_r+0x1a0>
  40aec0:	9b00      	ldr	r3, [sp, #0]
  40aec2:	691b      	ldr	r3, [r3, #16]
  40aec4:	2b00      	cmp	r3, #0
  40aec6:	f000 80ad 	beq.w	40b024 <_vfiprintf_r+0x1a0>
  40aeca:	f002 021a 	and.w	r2, r2, #26
  40aece:	2a0a      	cmp	r2, #10
  40aed0:	f000 80b4 	beq.w	40b03c <_vfiprintf_r+0x1b8>
  40aed4:	2300      	movs	r3, #0
  40aed6:	f10d 0a68 	add.w	sl, sp, #104	; 0x68
  40aeda:	9309      	str	r3, [sp, #36]	; 0x24
  40aedc:	930f      	str	r3, [sp, #60]	; 0x3c
  40aede:	930e      	str	r3, [sp, #56]	; 0x38
  40aee0:	9302      	str	r3, [sp, #8]
  40aee2:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
  40aee6:	4654      	mov	r4, sl
  40aee8:	f89b 3000 	ldrb.w	r3, [fp]
  40aeec:	2b00      	cmp	r3, #0
  40aeee:	f000 84a3 	beq.w	40b838 <_vfiprintf_r+0x9b4>
  40aef2:	2b25      	cmp	r3, #37	; 0x25
  40aef4:	f000 84a0 	beq.w	40b838 <_vfiprintf_r+0x9b4>
  40aef8:	465a      	mov	r2, fp
  40aefa:	e001      	b.n	40af00 <_vfiprintf_r+0x7c>
  40aefc:	2b25      	cmp	r3, #37	; 0x25
  40aefe:	d003      	beq.n	40af08 <_vfiprintf_r+0x84>
  40af00:	f812 3f01 	ldrb.w	r3, [r2, #1]!
  40af04:	2b00      	cmp	r3, #0
  40af06:	d1f9      	bne.n	40aefc <_vfiprintf_r+0x78>
  40af08:	ebcb 0602 	rsb	r6, fp, r2
  40af0c:	4615      	mov	r5, r2
  40af0e:	b196      	cbz	r6, 40af36 <_vfiprintf_r+0xb2>
  40af10:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  40af12:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  40af14:	f8c4 b000 	str.w	fp, [r4]
  40af18:	3301      	adds	r3, #1
  40af1a:	4432      	add	r2, r6
  40af1c:	2b07      	cmp	r3, #7
  40af1e:	6066      	str	r6, [r4, #4]
  40af20:	920f      	str	r2, [sp, #60]	; 0x3c
  40af22:	930e      	str	r3, [sp, #56]	; 0x38
  40af24:	dd79      	ble.n	40b01a <_vfiprintf_r+0x196>
  40af26:	2a00      	cmp	r2, #0
  40af28:	f040 84af 	bne.w	40b88a <_vfiprintf_r+0xa06>
  40af2c:	9b02      	ldr	r3, [sp, #8]
  40af2e:	920e      	str	r2, [sp, #56]	; 0x38
  40af30:	4433      	add	r3, r6
  40af32:	4654      	mov	r4, sl
  40af34:	9302      	str	r3, [sp, #8]
  40af36:	782b      	ldrb	r3, [r5, #0]
  40af38:	2b00      	cmp	r3, #0
  40af3a:	f000 8360 	beq.w	40b5fe <_vfiprintf_r+0x77a>
  40af3e:	2100      	movs	r1, #0
  40af40:	f04f 0300 	mov.w	r3, #0
  40af44:	f04f 3cff 	mov.w	ip, #4294967295
  40af48:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
  40af4c:	1c68      	adds	r0, r5, #1
  40af4e:	786b      	ldrb	r3, [r5, #1]
  40af50:	4688      	mov	r8, r1
  40af52:	460d      	mov	r5, r1
  40af54:	4666      	mov	r6, ip
  40af56:	f100 0b01 	add.w	fp, r0, #1
  40af5a:	f1a3 0220 	sub.w	r2, r3, #32
  40af5e:	2a58      	cmp	r2, #88	; 0x58
  40af60:	f200 82ab 	bhi.w	40b4ba <_vfiprintf_r+0x636>
  40af64:	e8df f012 	tbh	[pc, r2, lsl #1]
  40af68:	02a9029b 	.word	0x02a9029b
  40af6c:	02a302a9 	.word	0x02a302a9
  40af70:	02a902a9 	.word	0x02a902a9
  40af74:	02a902a9 	.word	0x02a902a9
  40af78:	02a902a9 	.word	0x02a902a9
  40af7c:	02620255 	.word	0x02620255
  40af80:	010d02a9 	.word	0x010d02a9
  40af84:	02a9026e 	.word	0x02a9026e
  40af88:	012f0129 	.word	0x012f0129
  40af8c:	012f012f 	.word	0x012f012f
  40af90:	012f012f 	.word	0x012f012f
  40af94:	012f012f 	.word	0x012f012f
  40af98:	012f012f 	.word	0x012f012f
  40af9c:	02a902a9 	.word	0x02a902a9
  40afa0:	02a902a9 	.word	0x02a902a9
  40afa4:	02a902a9 	.word	0x02a902a9
  40afa8:	02a902a9 	.word	0x02a902a9
  40afac:	02a902a9 	.word	0x02a902a9
  40afb0:	02a9013d 	.word	0x02a9013d
  40afb4:	02a902a9 	.word	0x02a902a9
  40afb8:	02a902a9 	.word	0x02a902a9
  40afbc:	02a902a9 	.word	0x02a902a9
  40afc0:	02a902a9 	.word	0x02a902a9
  40afc4:	017402a9 	.word	0x017402a9
  40afc8:	02a902a9 	.word	0x02a902a9
  40afcc:	02a902a9 	.word	0x02a902a9
  40afd0:	018b02a9 	.word	0x018b02a9
  40afd4:	02a902a9 	.word	0x02a902a9
  40afd8:	02a901a3 	.word	0x02a901a3
  40afdc:	02a902a9 	.word	0x02a902a9
  40afe0:	02a902a9 	.word	0x02a902a9
  40afe4:	02a902a9 	.word	0x02a902a9
  40afe8:	02a902a9 	.word	0x02a902a9
  40afec:	01c702a9 	.word	0x01c702a9
  40aff0:	02a901da 	.word	0x02a901da
  40aff4:	02a902a9 	.word	0x02a902a9
  40aff8:	01da0123 	.word	0x01da0123
  40affc:	02a902a9 	.word	0x02a902a9
  40b000:	02a9024c 	.word	0x02a9024c
  40b004:	0113028a 	.word	0x0113028a
  40b008:	020701f3 	.word	0x020701f3
  40b00c:	020d02a9 	.word	0x020d02a9
  40b010:	008102a9 	.word	0x008102a9
  40b014:	02a902a9 	.word	0x02a902a9
  40b018:	0233      	.short	0x0233
  40b01a:	3408      	adds	r4, #8
  40b01c:	9b02      	ldr	r3, [sp, #8]
  40b01e:	4433      	add	r3, r6
  40b020:	9302      	str	r3, [sp, #8]
  40b022:	e788      	b.n	40af36 <_vfiprintf_r+0xb2>
  40b024:	9801      	ldr	r0, [sp, #4]
  40b026:	9900      	ldr	r1, [sp, #0]
  40b028:	f002 f808 	bl	40d03c <__swsetup_r>
  40b02c:	b9a8      	cbnz	r0, 40b05a <_vfiprintf_r+0x1d6>
  40b02e:	9b00      	ldr	r3, [sp, #0]
  40b030:	899a      	ldrh	r2, [r3, #12]
  40b032:	f002 021a 	and.w	r2, r2, #26
  40b036:	2a0a      	cmp	r2, #10
  40b038:	f47f af4c 	bne.w	40aed4 <_vfiprintf_r+0x50>
  40b03c:	9b00      	ldr	r3, [sp, #0]
  40b03e:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
  40b042:	2b00      	cmp	r3, #0
  40b044:	f6ff af46 	blt.w	40aed4 <_vfiprintf_r+0x50>
  40b048:	9801      	ldr	r0, [sp, #4]
  40b04a:	9900      	ldr	r1, [sp, #0]
  40b04c:	465a      	mov	r2, fp
  40b04e:	4623      	mov	r3, r4
  40b050:	f000 fd20 	bl	40ba94 <__sbprintf>
  40b054:	b02b      	add	sp, #172	; 0xac
  40b056:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40b05a:	f04f 30ff 	mov.w	r0, #4294967295
  40b05e:	b02b      	add	sp, #172	; 0xac
  40b060:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40b064:	f7fd f982 	bl	40836c <__sinit>
  40b068:	e719      	b.n	40ae9e <_vfiprintf_r+0x1a>
  40b06a:	f018 0f20 	tst.w	r8, #32
  40b06e:	9503      	str	r5, [sp, #12]
  40b070:	46b4      	mov	ip, r6
  40b072:	f000 810c 	beq.w	40b28e <_vfiprintf_r+0x40a>
  40b076:	9b04      	ldr	r3, [sp, #16]
  40b078:	3307      	adds	r3, #7
  40b07a:	f023 0307 	bic.w	r3, r3, #7
  40b07e:	f103 0208 	add.w	r2, r3, #8
  40b082:	e9d3 6700 	ldrd	r6, r7, [r3]
  40b086:	9204      	str	r2, [sp, #16]
  40b088:	2301      	movs	r3, #1
  40b08a:	f04f 0200 	mov.w	r2, #0
  40b08e:	f88d 202f 	strb.w	r2, [sp, #47]	; 0x2f
  40b092:	46e1      	mov	r9, ip
  40b094:	2500      	movs	r5, #0
  40b096:	f1bc 0f00 	cmp.w	ip, #0
  40b09a:	bfa8      	it	ge
  40b09c:	f028 0880 	bicge.w	r8, r8, #128	; 0x80
  40b0a0:	ea56 0207 	orrs.w	r2, r6, r7
  40b0a4:	f040 80c4 	bne.w	40b230 <_vfiprintf_r+0x3ac>
  40b0a8:	f1bc 0f00 	cmp.w	ip, #0
  40b0ac:	f000 8381 	beq.w	40b7b2 <_vfiprintf_r+0x92e>
  40b0b0:	2b01      	cmp	r3, #1
  40b0b2:	f000 80c5 	beq.w	40b240 <_vfiprintf_r+0x3bc>
  40b0b6:	2b02      	cmp	r3, #2
  40b0b8:	f000 8387 	beq.w	40b7ca <_vfiprintf_r+0x946>
  40b0bc:	4651      	mov	r1, sl
  40b0be:	08f2      	lsrs	r2, r6, #3
  40b0c0:	ea42 7247 	orr.w	r2, r2, r7, lsl #29
  40b0c4:	08f8      	lsrs	r0, r7, #3
  40b0c6:	f006 0307 	and.w	r3, r6, #7
  40b0ca:	4607      	mov	r7, r0
  40b0cc:	4616      	mov	r6, r2
  40b0ce:	3330      	adds	r3, #48	; 0x30
  40b0d0:	ea56 0207 	orrs.w	r2, r6, r7
  40b0d4:	f801 3d01 	strb.w	r3, [r1, #-1]!
  40b0d8:	d1f1      	bne.n	40b0be <_vfiprintf_r+0x23a>
  40b0da:	f018 0f01 	tst.w	r8, #1
  40b0de:	9107      	str	r1, [sp, #28]
  40b0e0:	f040 83fc 	bne.w	40b8dc <_vfiprintf_r+0xa58>
  40b0e4:	ebc1 090a 	rsb	r9, r1, sl
  40b0e8:	45e1      	cmp	r9, ip
  40b0ea:	464e      	mov	r6, r9
  40b0ec:	bfb8      	it	lt
  40b0ee:	4666      	movlt	r6, ip
  40b0f0:	b105      	cbz	r5, 40b0f4 <_vfiprintf_r+0x270>
  40b0f2:	3601      	adds	r6, #1
  40b0f4:	f018 0302 	ands.w	r3, r8, #2
  40b0f8:	9305      	str	r3, [sp, #20]
  40b0fa:	bf18      	it	ne
  40b0fc:	3602      	addne	r6, #2
  40b0fe:	f018 0384 	ands.w	r3, r8, #132	; 0x84
  40b102:	9306      	str	r3, [sp, #24]
  40b104:	f040 81fa 	bne.w	40b4fc <_vfiprintf_r+0x678>
  40b108:	9b03      	ldr	r3, [sp, #12]
  40b10a:	1b9d      	subs	r5, r3, r6
  40b10c:	2d00      	cmp	r5, #0
  40b10e:	f340 81f5 	ble.w	40b4fc <_vfiprintf_r+0x678>
  40b112:	2d10      	cmp	r5, #16
  40b114:	f340 848c 	ble.w	40ba30 <_vfiprintf_r+0xbac>
  40b118:	f8dd e038 	ldr.w	lr, [sp, #56]	; 0x38
  40b11c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  40b11e:	4fc6      	ldr	r7, [pc, #792]	; (40b438 <_vfiprintf_r+0x5b4>)
  40b120:	4620      	mov	r0, r4
  40b122:	2310      	movs	r3, #16
  40b124:	4664      	mov	r4, ip
  40b126:	4671      	mov	r1, lr
  40b128:	4684      	mov	ip, r0
  40b12a:	e007      	b.n	40b13c <_vfiprintf_r+0x2b8>
  40b12c:	f101 0e02 	add.w	lr, r1, #2
  40b130:	f10c 0c08 	add.w	ip, ip, #8
  40b134:	4601      	mov	r1, r0
  40b136:	3d10      	subs	r5, #16
  40b138:	2d10      	cmp	r5, #16
  40b13a:	dd13      	ble.n	40b164 <_vfiprintf_r+0x2e0>
  40b13c:	1c48      	adds	r0, r1, #1
  40b13e:	3210      	adds	r2, #16
  40b140:	2807      	cmp	r0, #7
  40b142:	920f      	str	r2, [sp, #60]	; 0x3c
  40b144:	f8cc 7000 	str.w	r7, [ip]
  40b148:	f8cc 3004 	str.w	r3, [ip, #4]
  40b14c:	900e      	str	r0, [sp, #56]	; 0x38
  40b14e:	dded      	ble.n	40b12c <_vfiprintf_r+0x2a8>
  40b150:	2a00      	cmp	r2, #0
  40b152:	f040 81c3 	bne.w	40b4dc <_vfiprintf_r+0x658>
  40b156:	3d10      	subs	r5, #16
  40b158:	2d10      	cmp	r5, #16
  40b15a:	4611      	mov	r1, r2
  40b15c:	f04f 0e01 	mov.w	lr, #1
  40b160:	46d4      	mov	ip, sl
  40b162:	dceb      	bgt.n	40b13c <_vfiprintf_r+0x2b8>
  40b164:	4663      	mov	r3, ip
  40b166:	4671      	mov	r1, lr
  40b168:	46a4      	mov	ip, r4
  40b16a:	461c      	mov	r4, r3
  40b16c:	442a      	add	r2, r5
  40b16e:	2907      	cmp	r1, #7
  40b170:	920f      	str	r2, [sp, #60]	; 0x3c
  40b172:	6027      	str	r7, [r4, #0]
  40b174:	6065      	str	r5, [r4, #4]
  40b176:	910e      	str	r1, [sp, #56]	; 0x38
  40b178:	f300 8346 	bgt.w	40b808 <_vfiprintf_r+0x984>
  40b17c:	3408      	adds	r4, #8
  40b17e:	1c48      	adds	r0, r1, #1
  40b180:	e1bf      	b.n	40b502 <_vfiprintf_r+0x67e>
  40b182:	4658      	mov	r0, fp
  40b184:	f048 0804 	orr.w	r8, r8, #4
  40b188:	f89b 3000 	ldrb.w	r3, [fp]
  40b18c:	e6e3      	b.n	40af56 <_vfiprintf_r+0xd2>
  40b18e:	f018 0320 	ands.w	r3, r8, #32
  40b192:	9503      	str	r5, [sp, #12]
  40b194:	46b4      	mov	ip, r6
  40b196:	d062      	beq.n	40b25e <_vfiprintf_r+0x3da>
  40b198:	9b04      	ldr	r3, [sp, #16]
  40b19a:	3307      	adds	r3, #7
  40b19c:	f023 0307 	bic.w	r3, r3, #7
  40b1a0:	f103 0208 	add.w	r2, r3, #8
  40b1a4:	e9d3 6700 	ldrd	r6, r7, [r3]
  40b1a8:	9204      	str	r2, [sp, #16]
  40b1aa:	2300      	movs	r3, #0
  40b1ac:	e76d      	b.n	40b08a <_vfiprintf_r+0x206>
  40b1ae:	f048 0840 	orr.w	r8, r8, #64	; 0x40
  40b1b2:	f89b 3000 	ldrb.w	r3, [fp]
  40b1b6:	4658      	mov	r0, fp
  40b1b8:	e6cd      	b.n	40af56 <_vfiprintf_r+0xd2>
  40b1ba:	f048 0880 	orr.w	r8, r8, #128	; 0x80
  40b1be:	f89b 3000 	ldrb.w	r3, [fp]
  40b1c2:	4658      	mov	r0, fp
  40b1c4:	e6c7      	b.n	40af56 <_vfiprintf_r+0xd2>
  40b1c6:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
  40b1ca:	2500      	movs	r5, #0
  40b1cc:	f81b 3b01 	ldrb.w	r3, [fp], #1
  40b1d0:	eb05 0585 	add.w	r5, r5, r5, lsl #2
  40b1d4:	eb02 0545 	add.w	r5, r2, r5, lsl #1
  40b1d8:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
  40b1dc:	2a09      	cmp	r2, #9
  40b1de:	d9f5      	bls.n	40b1cc <_vfiprintf_r+0x348>
  40b1e0:	e6bb      	b.n	40af5a <_vfiprintf_r+0xd6>
  40b1e2:	f048 0810 	orr.w	r8, r8, #16
  40b1e6:	f018 0f20 	tst.w	r8, #32
  40b1ea:	9503      	str	r5, [sp, #12]
  40b1ec:	46b4      	mov	ip, r6
  40b1ee:	f88d 102f 	strb.w	r1, [sp, #47]	; 0x2f
  40b1f2:	f000 809b 	beq.w	40b32c <_vfiprintf_r+0x4a8>
  40b1f6:	9904      	ldr	r1, [sp, #16]
  40b1f8:	3107      	adds	r1, #7
  40b1fa:	f021 0107 	bic.w	r1, r1, #7
  40b1fe:	e9d1 2300 	ldrd	r2, r3, [r1]
  40b202:	3108      	adds	r1, #8
  40b204:	9104      	str	r1, [sp, #16]
  40b206:	4616      	mov	r6, r2
  40b208:	461f      	mov	r7, r3
  40b20a:	2a00      	cmp	r2, #0
  40b20c:	f173 0300 	sbcs.w	r3, r3, #0
  40b210:	f2c0 83a6 	blt.w	40b960 <_vfiprintf_r+0xadc>
  40b214:	f1bc 0f00 	cmp.w	ip, #0
  40b218:	bfa8      	it	ge
  40b21a:	f028 0880 	bicge.w	r8, r8, #128	; 0x80
  40b21e:	ea56 0207 	orrs.w	r2, r6, r7
  40b222:	f89d 502f 	ldrb.w	r5, [sp, #47]	; 0x2f
  40b226:	46e1      	mov	r9, ip
  40b228:	f04f 0301 	mov.w	r3, #1
  40b22c:	f43f af3c 	beq.w	40b0a8 <_vfiprintf_r+0x224>
  40b230:	2b01      	cmp	r3, #1
  40b232:	f47f af40 	bne.w	40b0b6 <_vfiprintf_r+0x232>
  40b236:	2f00      	cmp	r7, #0
  40b238:	bf08      	it	eq
  40b23a:	2e0a      	cmpeq	r6, #10
  40b23c:	f080 8334 	bcs.w	40b8a8 <_vfiprintf_r+0xa24>
  40b240:	ab2a      	add	r3, sp, #168	; 0xa8
  40b242:	3630      	adds	r6, #48	; 0x30
  40b244:	f803 6d41 	strb.w	r6, [r3, #-65]!
  40b248:	ebc3 090a 	rsb	r9, r3, sl
  40b24c:	9307      	str	r3, [sp, #28]
  40b24e:	e74b      	b.n	40b0e8 <_vfiprintf_r+0x264>
  40b250:	f048 0810 	orr.w	r8, r8, #16
  40b254:	f018 0320 	ands.w	r3, r8, #32
  40b258:	9503      	str	r5, [sp, #12]
  40b25a:	46b4      	mov	ip, r6
  40b25c:	d19c      	bne.n	40b198 <_vfiprintf_r+0x314>
  40b25e:	f018 0210 	ands.w	r2, r8, #16
  40b262:	f040 82f7 	bne.w	40b854 <_vfiprintf_r+0x9d0>
  40b266:	f018 0340 	ands.w	r3, r8, #64	; 0x40
  40b26a:	f000 82f3 	beq.w	40b854 <_vfiprintf_r+0x9d0>
  40b26e:	9904      	ldr	r1, [sp, #16]
  40b270:	4613      	mov	r3, r2
  40b272:	460a      	mov	r2, r1
  40b274:	3204      	adds	r2, #4
  40b276:	880e      	ldrh	r6, [r1, #0]
  40b278:	9204      	str	r2, [sp, #16]
  40b27a:	2700      	movs	r7, #0
  40b27c:	e705      	b.n	40b08a <_vfiprintf_r+0x206>
  40b27e:	f048 0810 	orr.w	r8, r8, #16
  40b282:	f018 0f20 	tst.w	r8, #32
  40b286:	9503      	str	r5, [sp, #12]
  40b288:	46b4      	mov	ip, r6
  40b28a:	f47f aef4 	bne.w	40b076 <_vfiprintf_r+0x1f2>
  40b28e:	9a04      	ldr	r2, [sp, #16]
  40b290:	f018 0f10 	tst.w	r8, #16
  40b294:	4613      	mov	r3, r2
  40b296:	f040 82e4 	bne.w	40b862 <_vfiprintf_r+0x9de>
  40b29a:	f018 0f40 	tst.w	r8, #64	; 0x40
  40b29e:	f000 82e0 	beq.w	40b862 <_vfiprintf_r+0x9de>
  40b2a2:	8816      	ldrh	r6, [r2, #0]
  40b2a4:	3204      	adds	r2, #4
  40b2a6:	2700      	movs	r7, #0
  40b2a8:	2301      	movs	r3, #1
  40b2aa:	9204      	str	r2, [sp, #16]
  40b2ac:	e6ed      	b.n	40b08a <_vfiprintf_r+0x206>
  40b2ae:	4a63      	ldr	r2, [pc, #396]	; (40b43c <_vfiprintf_r+0x5b8>)
  40b2b0:	9503      	str	r5, [sp, #12]
  40b2b2:	f018 0f20 	tst.w	r8, #32
  40b2b6:	46b4      	mov	ip, r6
  40b2b8:	f88d 102f 	strb.w	r1, [sp, #47]	; 0x2f
  40b2bc:	9209      	str	r2, [sp, #36]	; 0x24
  40b2be:	f000 8090 	beq.w	40b3e2 <_vfiprintf_r+0x55e>
  40b2c2:	9a04      	ldr	r2, [sp, #16]
  40b2c4:	3207      	adds	r2, #7
  40b2c6:	f022 0207 	bic.w	r2, r2, #7
  40b2ca:	e9d2 6700 	ldrd	r6, r7, [r2]
  40b2ce:	f102 0108 	add.w	r1, r2, #8
  40b2d2:	9104      	str	r1, [sp, #16]
  40b2d4:	f018 0f01 	tst.w	r8, #1
  40b2d8:	f000 8290 	beq.w	40b7fc <_vfiprintf_r+0x978>
  40b2dc:	ea56 0207 	orrs.w	r2, r6, r7
  40b2e0:	f000 828c 	beq.w	40b7fc <_vfiprintf_r+0x978>
  40b2e4:	2230      	movs	r2, #48	; 0x30
  40b2e6:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
  40b2ea:	f048 0802 	orr.w	r8, r8, #2
  40b2ee:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
  40b2f2:	2302      	movs	r3, #2
  40b2f4:	e6c9      	b.n	40b08a <_vfiprintf_r+0x206>
  40b2f6:	9a04      	ldr	r2, [sp, #16]
  40b2f8:	9503      	str	r5, [sp, #12]
  40b2fa:	6813      	ldr	r3, [r2, #0]
  40b2fc:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
  40b300:	4613      	mov	r3, r2
  40b302:	3304      	adds	r3, #4
  40b304:	2601      	movs	r6, #1
  40b306:	f04f 0100 	mov.w	r1, #0
  40b30a:	9304      	str	r3, [sp, #16]
  40b30c:	ab10      	add	r3, sp, #64	; 0x40
  40b30e:	f88d 102f 	strb.w	r1, [sp, #47]	; 0x2f
  40b312:	46b1      	mov	r9, r6
  40b314:	9307      	str	r3, [sp, #28]
  40b316:	f04f 0c00 	mov.w	ip, #0
  40b31a:	e6eb      	b.n	40b0f4 <_vfiprintf_r+0x270>
  40b31c:	f018 0f20 	tst.w	r8, #32
  40b320:	9503      	str	r5, [sp, #12]
  40b322:	46b4      	mov	ip, r6
  40b324:	f88d 102f 	strb.w	r1, [sp, #47]	; 0x2f
  40b328:	f47f af65 	bne.w	40b1f6 <_vfiprintf_r+0x372>
  40b32c:	f018 0f10 	tst.w	r8, #16
  40b330:	f040 82a2 	bne.w	40b878 <_vfiprintf_r+0x9f4>
  40b334:	f018 0f40 	tst.w	r8, #64	; 0x40
  40b338:	f000 829e 	beq.w	40b878 <_vfiprintf_r+0x9f4>
  40b33c:	9904      	ldr	r1, [sp, #16]
  40b33e:	f9b1 6000 	ldrsh.w	r6, [r1]
  40b342:	3104      	adds	r1, #4
  40b344:	17f7      	asrs	r7, r6, #31
  40b346:	4632      	mov	r2, r6
  40b348:	463b      	mov	r3, r7
  40b34a:	9104      	str	r1, [sp, #16]
  40b34c:	e75d      	b.n	40b20a <_vfiprintf_r+0x386>
  40b34e:	9904      	ldr	r1, [sp, #16]
  40b350:	9503      	str	r5, [sp, #12]
  40b352:	2330      	movs	r3, #48	; 0x30
  40b354:	460a      	mov	r2, r1
  40b356:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
  40b35a:	2378      	movs	r3, #120	; 0x78
  40b35c:	3204      	adds	r2, #4
  40b35e:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
  40b362:	4b37      	ldr	r3, [pc, #220]	; (40b440 <_vfiprintf_r+0x5bc>)
  40b364:	9309      	str	r3, [sp, #36]	; 0x24
  40b366:	46b4      	mov	ip, r6
  40b368:	f048 0802 	orr.w	r8, r8, #2
  40b36c:	680e      	ldr	r6, [r1, #0]
  40b36e:	9204      	str	r2, [sp, #16]
  40b370:	2700      	movs	r7, #0
  40b372:	2302      	movs	r3, #2
  40b374:	e689      	b.n	40b08a <_vfiprintf_r+0x206>
  40b376:	f048 0820 	orr.w	r8, r8, #32
  40b37a:	f89b 3000 	ldrb.w	r3, [fp]
  40b37e:	4658      	mov	r0, fp
  40b380:	e5e9      	b.n	40af56 <_vfiprintf_r+0xd2>
  40b382:	9a04      	ldr	r2, [sp, #16]
  40b384:	9503      	str	r5, [sp, #12]
  40b386:	6813      	ldr	r3, [r2, #0]
  40b388:	9307      	str	r3, [sp, #28]
  40b38a:	f04f 0100 	mov.w	r1, #0
  40b38e:	46b4      	mov	ip, r6
  40b390:	f88d 102f 	strb.w	r1, [sp, #47]	; 0x2f
  40b394:	1d16      	adds	r6, r2, #4
  40b396:	2b00      	cmp	r3, #0
  40b398:	f000 8350 	beq.w	40ba3c <_vfiprintf_r+0xbb8>
  40b39c:	f1bc 0f00 	cmp.w	ip, #0
  40b3a0:	f2c0 832a 	blt.w	40b9f8 <_vfiprintf_r+0xb74>
  40b3a4:	9d07      	ldr	r5, [sp, #28]
  40b3a6:	f8cd c010 	str.w	ip, [sp, #16]
  40b3aa:	4662      	mov	r2, ip
  40b3ac:	4628      	mov	r0, r5
  40b3ae:	2100      	movs	r1, #0
  40b3b0:	f7fd fe3c 	bl	40902c <memchr>
  40b3b4:	f8dd c010 	ldr.w	ip, [sp, #16]
  40b3b8:	2800      	cmp	r0, #0
  40b3ba:	f000 8350 	beq.w	40ba5e <_vfiprintf_r+0xbda>
  40b3be:	ebc5 0900 	rsb	r9, r5, r0
  40b3c2:	9604      	str	r6, [sp, #16]
  40b3c4:	f89d 502f 	ldrb.w	r5, [sp, #47]	; 0x2f
  40b3c8:	f04f 0c00 	mov.w	ip, #0
  40b3cc:	e68c      	b.n	40b0e8 <_vfiprintf_r+0x264>
  40b3ce:	4a1c      	ldr	r2, [pc, #112]	; (40b440 <_vfiprintf_r+0x5bc>)
  40b3d0:	9503      	str	r5, [sp, #12]
  40b3d2:	f018 0f20 	tst.w	r8, #32
  40b3d6:	46b4      	mov	ip, r6
  40b3d8:	9209      	str	r2, [sp, #36]	; 0x24
  40b3da:	f88d 102f 	strb.w	r1, [sp, #47]	; 0x2f
  40b3de:	f47f af70 	bne.w	40b2c2 <_vfiprintf_r+0x43e>
  40b3e2:	9904      	ldr	r1, [sp, #16]
  40b3e4:	f018 0f10 	tst.w	r8, #16
  40b3e8:	460a      	mov	r2, r1
  40b3ea:	f040 8240 	bne.w	40b86e <_vfiprintf_r+0x9ea>
  40b3ee:	f018 0f40 	tst.w	r8, #64	; 0x40
  40b3f2:	f000 823c 	beq.w	40b86e <_vfiprintf_r+0x9ea>
  40b3f6:	3204      	adds	r2, #4
  40b3f8:	880e      	ldrh	r6, [r1, #0]
  40b3fa:	9204      	str	r2, [sp, #16]
  40b3fc:	2700      	movs	r7, #0
  40b3fe:	e769      	b.n	40b2d4 <_vfiprintf_r+0x450>
  40b400:	f89b 3000 	ldrb.w	r3, [fp]
  40b404:	2b6c      	cmp	r3, #108	; 0x6c
  40b406:	f000 82ea 	beq.w	40b9de <_vfiprintf_r+0xb5a>
  40b40a:	f048 0810 	orr.w	r8, r8, #16
  40b40e:	4658      	mov	r0, fp
  40b410:	e5a1      	b.n	40af56 <_vfiprintf_r+0xd2>
  40b412:	9a04      	ldr	r2, [sp, #16]
  40b414:	6815      	ldr	r5, [r2, #0]
  40b416:	4613      	mov	r3, r2
  40b418:	2d00      	cmp	r5, #0
  40b41a:	f103 0304 	add.w	r3, r3, #4
  40b41e:	f2c0 82e6 	blt.w	40b9ee <_vfiprintf_r+0xb6a>
  40b422:	9304      	str	r3, [sp, #16]
  40b424:	f89b 3000 	ldrb.w	r3, [fp]
  40b428:	4658      	mov	r0, fp
  40b42a:	e594      	b.n	40af56 <_vfiprintf_r+0xd2>
  40b42c:	f89b 3000 	ldrb.w	r3, [fp]
  40b430:	4658      	mov	r0, fp
  40b432:	212b      	movs	r1, #43	; 0x2b
  40b434:	e58f      	b.n	40af56 <_vfiprintf_r+0xd2>
  40b436:	bf00      	nop
  40b438:	00411c50 	.word	0x00411c50
  40b43c:	00411c10 	.word	0x00411c10
  40b440:	00411c24 	.word	0x00411c24
  40b444:	f89b 3000 	ldrb.w	r3, [fp]
  40b448:	2b2a      	cmp	r3, #42	; 0x2a
  40b44a:	f10b 0001 	add.w	r0, fp, #1
  40b44e:	f000 830f 	beq.w	40ba70 <_vfiprintf_r+0xbec>
  40b452:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
  40b456:	2a09      	cmp	r2, #9
  40b458:	4683      	mov	fp, r0
  40b45a:	f04f 0600 	mov.w	r6, #0
  40b45e:	f63f ad7c 	bhi.w	40af5a <_vfiprintf_r+0xd6>
  40b462:	f81b 3b01 	ldrb.w	r3, [fp], #1
  40b466:	eb06 0686 	add.w	r6, r6, r6, lsl #2
  40b46a:	eb02 0646 	add.w	r6, r2, r6, lsl #1
  40b46e:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
  40b472:	2a09      	cmp	r2, #9
  40b474:	d9f5      	bls.n	40b462 <_vfiprintf_r+0x5de>
  40b476:	ea46 76e6 	orr.w	r6, r6, r6, asr #31
  40b47a:	e56e      	b.n	40af5a <_vfiprintf_r+0xd6>
  40b47c:	f018 0f20 	tst.w	r8, #32
  40b480:	f88d 102f 	strb.w	r1, [sp, #47]	; 0x2f
  40b484:	f000 8283 	beq.w	40b98e <_vfiprintf_r+0xb0a>
  40b488:	9a04      	ldr	r2, [sp, #16]
  40b48a:	9902      	ldr	r1, [sp, #8]
  40b48c:	6813      	ldr	r3, [r2, #0]
  40b48e:	17cf      	asrs	r7, r1, #31
  40b490:	4608      	mov	r0, r1
  40b492:	3204      	adds	r2, #4
  40b494:	4639      	mov	r1, r7
  40b496:	9204      	str	r2, [sp, #16]
  40b498:	e9c3 0100 	strd	r0, r1, [r3]
  40b49c:	e524      	b.n	40aee8 <_vfiprintf_r+0x64>
  40b49e:	4658      	mov	r0, fp
  40b4a0:	f89b 3000 	ldrb.w	r3, [fp]
  40b4a4:	2900      	cmp	r1, #0
  40b4a6:	f47f ad56 	bne.w	40af56 <_vfiprintf_r+0xd2>
  40b4aa:	2120      	movs	r1, #32
  40b4ac:	e553      	b.n	40af56 <_vfiprintf_r+0xd2>
  40b4ae:	f048 0801 	orr.w	r8, r8, #1
  40b4b2:	4658      	mov	r0, fp
  40b4b4:	f89b 3000 	ldrb.w	r3, [fp]
  40b4b8:	e54d      	b.n	40af56 <_vfiprintf_r+0xd2>
  40b4ba:	9503      	str	r5, [sp, #12]
  40b4bc:	f88d 102f 	strb.w	r1, [sp, #47]	; 0x2f
  40b4c0:	2b00      	cmp	r3, #0
  40b4c2:	f000 809c 	beq.w	40b5fe <_vfiprintf_r+0x77a>
  40b4c6:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
  40b4ca:	f04f 0300 	mov.w	r3, #0
  40b4ce:	2601      	movs	r6, #1
  40b4d0:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
  40b4d4:	ab10      	add	r3, sp, #64	; 0x40
  40b4d6:	46b1      	mov	r9, r6
  40b4d8:	9307      	str	r3, [sp, #28]
  40b4da:	e71c      	b.n	40b316 <_vfiprintf_r+0x492>
  40b4dc:	9801      	ldr	r0, [sp, #4]
  40b4de:	9900      	ldr	r1, [sp, #0]
  40b4e0:	9308      	str	r3, [sp, #32]
  40b4e2:	aa0d      	add	r2, sp, #52	; 0x34
  40b4e4:	f7ff fc86 	bl	40adf4 <__sprint_r.part.0>
  40b4e8:	2800      	cmp	r0, #0
  40b4ea:	f040 808f 	bne.w	40b60c <_vfiprintf_r+0x788>
  40b4ee:	990e      	ldr	r1, [sp, #56]	; 0x38
  40b4f0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  40b4f2:	9b08      	ldr	r3, [sp, #32]
  40b4f4:	f101 0e01 	add.w	lr, r1, #1
  40b4f8:	46d4      	mov	ip, sl
  40b4fa:	e61c      	b.n	40b136 <_vfiprintf_r+0x2b2>
  40b4fc:	990e      	ldr	r1, [sp, #56]	; 0x38
  40b4fe:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  40b500:	1c48      	adds	r0, r1, #1
  40b502:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
  40b506:	b16b      	cbz	r3, 40b524 <_vfiprintf_r+0x6a0>
  40b508:	3201      	adds	r2, #1
  40b50a:	f10d 032f 	add.w	r3, sp, #47	; 0x2f
  40b50e:	2101      	movs	r1, #1
  40b510:	2807      	cmp	r0, #7
  40b512:	920f      	str	r2, [sp, #60]	; 0x3c
  40b514:	900e      	str	r0, [sp, #56]	; 0x38
  40b516:	6023      	str	r3, [r4, #0]
  40b518:	6061      	str	r1, [r4, #4]
  40b51a:	f300 8134 	bgt.w	40b786 <_vfiprintf_r+0x902>
  40b51e:	4601      	mov	r1, r0
  40b520:	3408      	adds	r4, #8
  40b522:	3001      	adds	r0, #1
  40b524:	9b05      	ldr	r3, [sp, #20]
  40b526:	b163      	cbz	r3, 40b542 <_vfiprintf_r+0x6be>
  40b528:	3202      	adds	r2, #2
  40b52a:	a90c      	add	r1, sp, #48	; 0x30
  40b52c:	2302      	movs	r3, #2
  40b52e:	2807      	cmp	r0, #7
  40b530:	920f      	str	r2, [sp, #60]	; 0x3c
  40b532:	900e      	str	r0, [sp, #56]	; 0x38
  40b534:	e884 000a 	stmia.w	r4, {r1, r3}
  40b538:	f300 8134 	bgt.w	40b7a4 <_vfiprintf_r+0x920>
  40b53c:	4601      	mov	r1, r0
  40b53e:	3408      	adds	r4, #8
  40b540:	3001      	adds	r0, #1
  40b542:	9b06      	ldr	r3, [sp, #24]
  40b544:	2b80      	cmp	r3, #128	; 0x80
  40b546:	f000 80d4 	beq.w	40b6f2 <_vfiprintf_r+0x86e>
  40b54a:	ebc9 070c 	rsb	r7, r9, ip
  40b54e:	2f00      	cmp	r7, #0
  40b550:	dd2b      	ble.n	40b5aa <_vfiprintf_r+0x726>
  40b552:	2f10      	cmp	r7, #16
  40b554:	4daa      	ldr	r5, [pc, #680]	; (40b800 <_vfiprintf_r+0x97c>)
  40b556:	dd1f      	ble.n	40b598 <_vfiprintf_r+0x714>
  40b558:	46a6      	mov	lr, r4
  40b55a:	2310      	movs	r3, #16
  40b55c:	9c01      	ldr	r4, [sp, #4]
  40b55e:	e007      	b.n	40b570 <_vfiprintf_r+0x6ec>
  40b560:	f101 0c02 	add.w	ip, r1, #2
  40b564:	f10e 0e08 	add.w	lr, lr, #8
  40b568:	4601      	mov	r1, r0
  40b56a:	3f10      	subs	r7, #16
  40b56c:	2f10      	cmp	r7, #16
  40b56e:	dd11      	ble.n	40b594 <_vfiprintf_r+0x710>
  40b570:	1c48      	adds	r0, r1, #1
  40b572:	3210      	adds	r2, #16
  40b574:	2807      	cmp	r0, #7
  40b576:	920f      	str	r2, [sp, #60]	; 0x3c
  40b578:	f8ce 5000 	str.w	r5, [lr]
  40b57c:	f8ce 3004 	str.w	r3, [lr, #4]
  40b580:	900e      	str	r0, [sp, #56]	; 0x38
  40b582:	dded      	ble.n	40b560 <_vfiprintf_r+0x6dc>
  40b584:	bb6a      	cbnz	r2, 40b5e2 <_vfiprintf_r+0x75e>
  40b586:	3f10      	subs	r7, #16
  40b588:	2f10      	cmp	r7, #16
  40b58a:	f04f 0c01 	mov.w	ip, #1
  40b58e:	4611      	mov	r1, r2
  40b590:	46d6      	mov	lr, sl
  40b592:	dced      	bgt.n	40b570 <_vfiprintf_r+0x6ec>
  40b594:	4674      	mov	r4, lr
  40b596:	4660      	mov	r0, ip
  40b598:	443a      	add	r2, r7
  40b59a:	2807      	cmp	r0, #7
  40b59c:	920f      	str	r2, [sp, #60]	; 0x3c
  40b59e:	e884 00a0 	stmia.w	r4, {r5, r7}
  40b5a2:	900e      	str	r0, [sp, #56]	; 0x38
  40b5a4:	dc3b      	bgt.n	40b61e <_vfiprintf_r+0x79a>
  40b5a6:	3408      	adds	r4, #8
  40b5a8:	3001      	adds	r0, #1
  40b5aa:	eb02 0309 	add.w	r3, r2, r9
  40b5ae:	9a07      	ldr	r2, [sp, #28]
  40b5b0:	930f      	str	r3, [sp, #60]	; 0x3c
  40b5b2:	2807      	cmp	r0, #7
  40b5b4:	e884 0204 	stmia.w	r4, {r2, r9}
  40b5b8:	900e      	str	r0, [sp, #56]	; 0x38
  40b5ba:	dd3d      	ble.n	40b638 <_vfiprintf_r+0x7b4>
  40b5bc:	2b00      	cmp	r3, #0
  40b5be:	f040 813e 	bne.w	40b83e <_vfiprintf_r+0x9ba>
  40b5c2:	f018 0f04 	tst.w	r8, #4
  40b5c6:	930e      	str	r3, [sp, #56]	; 0x38
  40b5c8:	f040 812f 	bne.w	40b82a <_vfiprintf_r+0x9a6>
  40b5cc:	9b02      	ldr	r3, [sp, #8]
  40b5ce:	9a03      	ldr	r2, [sp, #12]
  40b5d0:	4296      	cmp	r6, r2
  40b5d2:	bfac      	ite	ge
  40b5d4:	199b      	addge	r3, r3, r6
  40b5d6:	189b      	addlt	r3, r3, r2
  40b5d8:	9302      	str	r3, [sp, #8]
  40b5da:	2300      	movs	r3, #0
  40b5dc:	930e      	str	r3, [sp, #56]	; 0x38
  40b5de:	4654      	mov	r4, sl
  40b5e0:	e482      	b.n	40aee8 <_vfiprintf_r+0x64>
  40b5e2:	4620      	mov	r0, r4
  40b5e4:	9900      	ldr	r1, [sp, #0]
  40b5e6:	9305      	str	r3, [sp, #20]
  40b5e8:	aa0d      	add	r2, sp, #52	; 0x34
  40b5ea:	f7ff fc03 	bl	40adf4 <__sprint_r.part.0>
  40b5ee:	b968      	cbnz	r0, 40b60c <_vfiprintf_r+0x788>
  40b5f0:	990e      	ldr	r1, [sp, #56]	; 0x38
  40b5f2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  40b5f4:	9b05      	ldr	r3, [sp, #20]
  40b5f6:	f101 0c01 	add.w	ip, r1, #1
  40b5fa:	46d6      	mov	lr, sl
  40b5fc:	e7b5      	b.n	40b56a <_vfiprintf_r+0x6e6>
  40b5fe:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  40b600:	b123      	cbz	r3, 40b60c <_vfiprintf_r+0x788>
  40b602:	9801      	ldr	r0, [sp, #4]
  40b604:	9900      	ldr	r1, [sp, #0]
  40b606:	aa0d      	add	r2, sp, #52	; 0x34
  40b608:	f7ff fbf4 	bl	40adf4 <__sprint_r.part.0>
  40b60c:	9b00      	ldr	r3, [sp, #0]
  40b60e:	899b      	ldrh	r3, [r3, #12]
  40b610:	065b      	lsls	r3, r3, #25
  40b612:	f53f ad22 	bmi.w	40b05a <_vfiprintf_r+0x1d6>
  40b616:	9802      	ldr	r0, [sp, #8]
  40b618:	b02b      	add	sp, #172	; 0xac
  40b61a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40b61e:	2a00      	cmp	r2, #0
  40b620:	f040 8191 	bne.w	40b946 <_vfiprintf_r+0xac2>
  40b624:	2201      	movs	r2, #1
  40b626:	9907      	ldr	r1, [sp, #28]
  40b628:	f8cd 906c 	str.w	r9, [sp, #108]	; 0x6c
  40b62c:	464b      	mov	r3, r9
  40b62e:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
  40b632:	911a      	str	r1, [sp, #104]	; 0x68
  40b634:	920e      	str	r2, [sp, #56]	; 0x38
  40b636:	4654      	mov	r4, sl
  40b638:	f104 0208 	add.w	r2, r4, #8
  40b63c:	f018 0f04 	tst.w	r8, #4
  40b640:	d039      	beq.n	40b6b6 <_vfiprintf_r+0x832>
  40b642:	9903      	ldr	r1, [sp, #12]
  40b644:	1b8d      	subs	r5, r1, r6
  40b646:	2d00      	cmp	r5, #0
  40b648:	dd35      	ble.n	40b6b6 <_vfiprintf_r+0x832>
  40b64a:	2d10      	cmp	r5, #16
  40b64c:	f340 8202 	ble.w	40ba54 <_vfiprintf_r+0xbd0>
  40b650:	980e      	ldr	r0, [sp, #56]	; 0x38
  40b652:	4f6c      	ldr	r7, [pc, #432]	; (40b804 <_vfiprintf_r+0x980>)
  40b654:	f8dd 8004 	ldr.w	r8, [sp, #4]
  40b658:	f8dd 9000 	ldr.w	r9, [sp]
  40b65c:	2410      	movs	r4, #16
  40b65e:	e006      	b.n	40b66e <_vfiprintf_r+0x7ea>
  40b660:	f100 0e02 	add.w	lr, r0, #2
  40b664:	3208      	adds	r2, #8
  40b666:	4608      	mov	r0, r1
  40b668:	3d10      	subs	r5, #16
  40b66a:	2d10      	cmp	r5, #16
  40b66c:	dd10      	ble.n	40b690 <_vfiprintf_r+0x80c>
  40b66e:	1c41      	adds	r1, r0, #1
  40b670:	3310      	adds	r3, #16
  40b672:	2907      	cmp	r1, #7
  40b674:	930f      	str	r3, [sp, #60]	; 0x3c
  40b676:	6017      	str	r7, [r2, #0]
  40b678:	6054      	str	r4, [r2, #4]
  40b67a:	910e      	str	r1, [sp, #56]	; 0x38
  40b67c:	ddf0      	ble.n	40b660 <_vfiprintf_r+0x7dc>
  40b67e:	2b00      	cmp	r3, #0
  40b680:	d12a      	bne.n	40b6d8 <_vfiprintf_r+0x854>
  40b682:	3d10      	subs	r5, #16
  40b684:	2d10      	cmp	r5, #16
  40b686:	f04f 0e01 	mov.w	lr, #1
  40b68a:	4618      	mov	r0, r3
  40b68c:	4652      	mov	r2, sl
  40b68e:	dcee      	bgt.n	40b66e <_vfiprintf_r+0x7ea>
  40b690:	442b      	add	r3, r5
  40b692:	f1be 0f07 	cmp.w	lr, #7
  40b696:	930f      	str	r3, [sp, #60]	; 0x3c
  40b698:	6017      	str	r7, [r2, #0]
  40b69a:	6055      	str	r5, [r2, #4]
  40b69c:	f8cd e038 	str.w	lr, [sp, #56]	; 0x38
  40b6a0:	dd09      	ble.n	40b6b6 <_vfiprintf_r+0x832>
  40b6a2:	2b00      	cmp	r3, #0
  40b6a4:	d092      	beq.n	40b5cc <_vfiprintf_r+0x748>
  40b6a6:	9801      	ldr	r0, [sp, #4]
  40b6a8:	9900      	ldr	r1, [sp, #0]
  40b6aa:	aa0d      	add	r2, sp, #52	; 0x34
  40b6ac:	f7ff fba2 	bl	40adf4 <__sprint_r.part.0>
  40b6b0:	2800      	cmp	r0, #0
  40b6b2:	d1ab      	bne.n	40b60c <_vfiprintf_r+0x788>
  40b6b4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  40b6b6:	9a02      	ldr	r2, [sp, #8]
  40b6b8:	9903      	ldr	r1, [sp, #12]
  40b6ba:	428e      	cmp	r6, r1
  40b6bc:	bfac      	ite	ge
  40b6be:	1992      	addge	r2, r2, r6
  40b6c0:	1852      	addlt	r2, r2, r1
  40b6c2:	9202      	str	r2, [sp, #8]
  40b6c4:	2b00      	cmp	r3, #0
  40b6c6:	d088      	beq.n	40b5da <_vfiprintf_r+0x756>
  40b6c8:	9801      	ldr	r0, [sp, #4]
  40b6ca:	9900      	ldr	r1, [sp, #0]
  40b6cc:	aa0d      	add	r2, sp, #52	; 0x34
  40b6ce:	f7ff fb91 	bl	40adf4 <__sprint_r.part.0>
  40b6d2:	2800      	cmp	r0, #0
  40b6d4:	d081      	beq.n	40b5da <_vfiprintf_r+0x756>
  40b6d6:	e799      	b.n	40b60c <_vfiprintf_r+0x788>
  40b6d8:	4640      	mov	r0, r8
  40b6da:	4649      	mov	r1, r9
  40b6dc:	aa0d      	add	r2, sp, #52	; 0x34
  40b6de:	f7ff fb89 	bl	40adf4 <__sprint_r.part.0>
  40b6e2:	2800      	cmp	r0, #0
  40b6e4:	d192      	bne.n	40b60c <_vfiprintf_r+0x788>
  40b6e6:	980e      	ldr	r0, [sp, #56]	; 0x38
  40b6e8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  40b6ea:	f100 0e01 	add.w	lr, r0, #1
  40b6ee:	4652      	mov	r2, sl
  40b6f0:	e7ba      	b.n	40b668 <_vfiprintf_r+0x7e4>
  40b6f2:	9b03      	ldr	r3, [sp, #12]
  40b6f4:	1b9f      	subs	r7, r3, r6
  40b6f6:	2f00      	cmp	r7, #0
  40b6f8:	f77f af27 	ble.w	40b54a <_vfiprintf_r+0x6c6>
  40b6fc:	2f10      	cmp	r7, #16
  40b6fe:	4d40      	ldr	r5, [pc, #256]	; (40b800 <_vfiprintf_r+0x97c>)
  40b700:	f340 81b4 	ble.w	40ba6c <_vfiprintf_r+0xbe8>
  40b704:	4620      	mov	r0, r4
  40b706:	2310      	movs	r3, #16
  40b708:	4664      	mov	r4, ip
  40b70a:	4684      	mov	ip, r0
  40b70c:	e007      	b.n	40b71e <_vfiprintf_r+0x89a>
  40b70e:	f101 0e02 	add.w	lr, r1, #2
  40b712:	f10c 0c08 	add.w	ip, ip, #8
  40b716:	4601      	mov	r1, r0
  40b718:	3f10      	subs	r7, #16
  40b71a:	2f10      	cmp	r7, #16
  40b71c:	dd11      	ble.n	40b742 <_vfiprintf_r+0x8be>
  40b71e:	1c48      	adds	r0, r1, #1
  40b720:	3210      	adds	r2, #16
  40b722:	2807      	cmp	r0, #7
  40b724:	920f      	str	r2, [sp, #60]	; 0x3c
  40b726:	f8cc 5000 	str.w	r5, [ip]
  40b72a:	f8cc 3004 	str.w	r3, [ip, #4]
  40b72e:	900e      	str	r0, [sp, #56]	; 0x38
  40b730:	dded      	ble.n	40b70e <_vfiprintf_r+0x88a>
  40b732:	b9c2      	cbnz	r2, 40b766 <_vfiprintf_r+0x8e2>
  40b734:	3f10      	subs	r7, #16
  40b736:	2f10      	cmp	r7, #16
  40b738:	f04f 0e01 	mov.w	lr, #1
  40b73c:	4611      	mov	r1, r2
  40b73e:	46d4      	mov	ip, sl
  40b740:	dced      	bgt.n	40b71e <_vfiprintf_r+0x89a>
  40b742:	4663      	mov	r3, ip
  40b744:	46a4      	mov	ip, r4
  40b746:	461c      	mov	r4, r3
  40b748:	443a      	add	r2, r7
  40b74a:	f1be 0f07 	cmp.w	lr, #7
  40b74e:	920f      	str	r2, [sp, #60]	; 0x3c
  40b750:	e884 00a0 	stmia.w	r4, {r5, r7}
  40b754:	f8cd e038 	str.w	lr, [sp, #56]	; 0x38
  40b758:	f300 80ef 	bgt.w	40b93a <_vfiprintf_r+0xab6>
  40b75c:	3408      	adds	r4, #8
  40b75e:	f10e 0001 	add.w	r0, lr, #1
  40b762:	4671      	mov	r1, lr
  40b764:	e6f1      	b.n	40b54a <_vfiprintf_r+0x6c6>
  40b766:	9801      	ldr	r0, [sp, #4]
  40b768:	9900      	ldr	r1, [sp, #0]
  40b76a:	9305      	str	r3, [sp, #20]
  40b76c:	aa0d      	add	r2, sp, #52	; 0x34
  40b76e:	f7ff fb41 	bl	40adf4 <__sprint_r.part.0>
  40b772:	2800      	cmp	r0, #0
  40b774:	f47f af4a 	bne.w	40b60c <_vfiprintf_r+0x788>
  40b778:	990e      	ldr	r1, [sp, #56]	; 0x38
  40b77a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  40b77c:	9b05      	ldr	r3, [sp, #20]
  40b77e:	f101 0e01 	add.w	lr, r1, #1
  40b782:	46d4      	mov	ip, sl
  40b784:	e7c8      	b.n	40b718 <_vfiprintf_r+0x894>
  40b786:	2a00      	cmp	r2, #0
  40b788:	f040 80c6 	bne.w	40b918 <_vfiprintf_r+0xa94>
  40b78c:	9b05      	ldr	r3, [sp, #20]
  40b78e:	2b00      	cmp	r3, #0
  40b790:	f000 8086 	beq.w	40b8a0 <_vfiprintf_r+0xa1c>
  40b794:	aa0c      	add	r2, sp, #48	; 0x30
  40b796:	2302      	movs	r3, #2
  40b798:	921a      	str	r2, [sp, #104]	; 0x68
  40b79a:	4608      	mov	r0, r1
  40b79c:	931b      	str	r3, [sp, #108]	; 0x6c
  40b79e:	461a      	mov	r2, r3
  40b7a0:	4654      	mov	r4, sl
  40b7a2:	e6cb      	b.n	40b53c <_vfiprintf_r+0x6b8>
  40b7a4:	2a00      	cmp	r2, #0
  40b7a6:	f040 80a6 	bne.w	40b8f6 <_vfiprintf_r+0xa72>
  40b7aa:	2001      	movs	r0, #1
  40b7ac:	4611      	mov	r1, r2
  40b7ae:	4654      	mov	r4, sl
  40b7b0:	e6c7      	b.n	40b542 <_vfiprintf_r+0x6be>
  40b7b2:	bb03      	cbnz	r3, 40b7f6 <_vfiprintf_r+0x972>
  40b7b4:	f018 0f01 	tst.w	r8, #1
  40b7b8:	d01d      	beq.n	40b7f6 <_vfiprintf_r+0x972>
  40b7ba:	ab2a      	add	r3, sp, #168	; 0xa8
  40b7bc:	2230      	movs	r2, #48	; 0x30
  40b7be:	f803 2d41 	strb.w	r2, [r3, #-65]!
  40b7c2:	ebc3 090a 	rsb	r9, r3, sl
  40b7c6:	9307      	str	r3, [sp, #28]
  40b7c8:	e48e      	b.n	40b0e8 <_vfiprintf_r+0x264>
  40b7ca:	9809      	ldr	r0, [sp, #36]	; 0x24
  40b7cc:	46d1      	mov	r9, sl
  40b7ce:	0933      	lsrs	r3, r6, #4
  40b7d0:	f006 010f 	and.w	r1, r6, #15
  40b7d4:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
  40b7d8:	093a      	lsrs	r2, r7, #4
  40b7da:	461e      	mov	r6, r3
  40b7dc:	4617      	mov	r7, r2
  40b7de:	5c43      	ldrb	r3, [r0, r1]
  40b7e0:	f809 3d01 	strb.w	r3, [r9, #-1]!
  40b7e4:	ea56 0307 	orrs.w	r3, r6, r7
  40b7e8:	d1f1      	bne.n	40b7ce <_vfiprintf_r+0x94a>
  40b7ea:	464b      	mov	r3, r9
  40b7ec:	f8cd 901c 	str.w	r9, [sp, #28]
  40b7f0:	ebc3 090a 	rsb	r9, r3, sl
  40b7f4:	e478      	b.n	40b0e8 <_vfiprintf_r+0x264>
  40b7f6:	f8cd a01c 	str.w	sl, [sp, #28]
  40b7fa:	e475      	b.n	40b0e8 <_vfiprintf_r+0x264>
  40b7fc:	2302      	movs	r3, #2
  40b7fe:	e444      	b.n	40b08a <_vfiprintf_r+0x206>
  40b800:	00411c40 	.word	0x00411c40
  40b804:	00411c50 	.word	0x00411c50
  40b808:	2a00      	cmp	r2, #0
  40b80a:	f040 80d7 	bne.w	40b9bc <_vfiprintf_r+0xb38>
  40b80e:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
  40b812:	2b00      	cmp	r3, #0
  40b814:	f000 80ae 	beq.w	40b974 <_vfiprintf_r+0xaf0>
  40b818:	2301      	movs	r3, #1
  40b81a:	f10d 012f 	add.w	r1, sp, #47	; 0x2f
  40b81e:	4618      	mov	r0, r3
  40b820:	931b      	str	r3, [sp, #108]	; 0x6c
  40b822:	461a      	mov	r2, r3
  40b824:	911a      	str	r1, [sp, #104]	; 0x68
  40b826:	4654      	mov	r4, sl
  40b828:	e679      	b.n	40b51e <_vfiprintf_r+0x69a>
  40b82a:	9a03      	ldr	r2, [sp, #12]
  40b82c:	1b95      	subs	r5, r2, r6
  40b82e:	2d00      	cmp	r5, #0
  40b830:	4652      	mov	r2, sl
  40b832:	f73f af0a 	bgt.w	40b64a <_vfiprintf_r+0x7c6>
  40b836:	e6c9      	b.n	40b5cc <_vfiprintf_r+0x748>
  40b838:	465d      	mov	r5, fp
  40b83a:	f7ff bb7c 	b.w	40af36 <_vfiprintf_r+0xb2>
  40b83e:	9801      	ldr	r0, [sp, #4]
  40b840:	9900      	ldr	r1, [sp, #0]
  40b842:	aa0d      	add	r2, sp, #52	; 0x34
  40b844:	f7ff fad6 	bl	40adf4 <__sprint_r.part.0>
  40b848:	2800      	cmp	r0, #0
  40b84a:	f47f aedf 	bne.w	40b60c <_vfiprintf_r+0x788>
  40b84e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  40b850:	4652      	mov	r2, sl
  40b852:	e6f3      	b.n	40b63c <_vfiprintf_r+0x7b8>
  40b854:	9904      	ldr	r1, [sp, #16]
  40b856:	460a      	mov	r2, r1
  40b858:	3204      	adds	r2, #4
  40b85a:	680e      	ldr	r6, [r1, #0]
  40b85c:	9204      	str	r2, [sp, #16]
  40b85e:	2700      	movs	r7, #0
  40b860:	e413      	b.n	40b08a <_vfiprintf_r+0x206>
  40b862:	3204      	adds	r2, #4
  40b864:	681e      	ldr	r6, [r3, #0]
  40b866:	9204      	str	r2, [sp, #16]
  40b868:	2301      	movs	r3, #1
  40b86a:	2700      	movs	r7, #0
  40b86c:	e40d      	b.n	40b08a <_vfiprintf_r+0x206>
  40b86e:	6816      	ldr	r6, [r2, #0]
  40b870:	3204      	adds	r2, #4
  40b872:	9204      	str	r2, [sp, #16]
  40b874:	2700      	movs	r7, #0
  40b876:	e52d      	b.n	40b2d4 <_vfiprintf_r+0x450>
  40b878:	9a04      	ldr	r2, [sp, #16]
  40b87a:	6816      	ldr	r6, [r2, #0]
  40b87c:	4613      	mov	r3, r2
  40b87e:	3304      	adds	r3, #4
  40b880:	17f7      	asrs	r7, r6, #31
  40b882:	9304      	str	r3, [sp, #16]
  40b884:	4632      	mov	r2, r6
  40b886:	463b      	mov	r3, r7
  40b888:	e4bf      	b.n	40b20a <_vfiprintf_r+0x386>
  40b88a:	9801      	ldr	r0, [sp, #4]
  40b88c:	9900      	ldr	r1, [sp, #0]
  40b88e:	aa0d      	add	r2, sp, #52	; 0x34
  40b890:	f7ff fab0 	bl	40adf4 <__sprint_r.part.0>
  40b894:	2800      	cmp	r0, #0
  40b896:	f47f aeb9 	bne.w	40b60c <_vfiprintf_r+0x788>
  40b89a:	4654      	mov	r4, sl
  40b89c:	f7ff bbbe 	b.w	40b01c <_vfiprintf_r+0x198>
  40b8a0:	4608      	mov	r0, r1
  40b8a2:	4654      	mov	r4, sl
  40b8a4:	4611      	mov	r1, r2
  40b8a6:	e64c      	b.n	40b542 <_vfiprintf_r+0x6be>
  40b8a8:	46d1      	mov	r9, sl
  40b8aa:	f8cd c014 	str.w	ip, [sp, #20]
  40b8ae:	4630      	mov	r0, r6
  40b8b0:	4639      	mov	r1, r7
  40b8b2:	220a      	movs	r2, #10
  40b8b4:	2300      	movs	r3, #0
  40b8b6:	f003 fd8d 	bl	40f3d4 <__aeabi_uldivmod>
  40b8ba:	3230      	adds	r2, #48	; 0x30
  40b8bc:	4630      	mov	r0, r6
  40b8be:	4639      	mov	r1, r7
  40b8c0:	f809 2d01 	strb.w	r2, [r9, #-1]!
  40b8c4:	2300      	movs	r3, #0
  40b8c6:	220a      	movs	r2, #10
  40b8c8:	f003 fd84 	bl	40f3d4 <__aeabi_uldivmod>
  40b8cc:	4606      	mov	r6, r0
  40b8ce:	460f      	mov	r7, r1
  40b8d0:	ea56 0307 	orrs.w	r3, r6, r7
  40b8d4:	d1eb      	bne.n	40b8ae <_vfiprintf_r+0xa2a>
  40b8d6:	f8dd c014 	ldr.w	ip, [sp, #20]
  40b8da:	e786      	b.n	40b7ea <_vfiprintf_r+0x966>
  40b8dc:	2b30      	cmp	r3, #48	; 0x30
  40b8de:	9b07      	ldr	r3, [sp, #28]
  40b8e0:	d086      	beq.n	40b7f0 <_vfiprintf_r+0x96c>
  40b8e2:	3b01      	subs	r3, #1
  40b8e4:	461a      	mov	r2, r3
  40b8e6:	9307      	str	r3, [sp, #28]
  40b8e8:	2330      	movs	r3, #48	; 0x30
  40b8ea:	ebc2 090a 	rsb	r9, r2, sl
  40b8ee:	f801 3c01 	strb.w	r3, [r1, #-1]
  40b8f2:	f7ff bbf9 	b.w	40b0e8 <_vfiprintf_r+0x264>
  40b8f6:	9801      	ldr	r0, [sp, #4]
  40b8f8:	9900      	ldr	r1, [sp, #0]
  40b8fa:	f8cd c014 	str.w	ip, [sp, #20]
  40b8fe:	aa0d      	add	r2, sp, #52	; 0x34
  40b900:	f7ff fa78 	bl	40adf4 <__sprint_r.part.0>
  40b904:	2800      	cmp	r0, #0
  40b906:	f47f ae81 	bne.w	40b60c <_vfiprintf_r+0x788>
  40b90a:	990e      	ldr	r1, [sp, #56]	; 0x38
  40b90c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  40b90e:	f8dd c014 	ldr.w	ip, [sp, #20]
  40b912:	1c48      	adds	r0, r1, #1
  40b914:	4654      	mov	r4, sl
  40b916:	e614      	b.n	40b542 <_vfiprintf_r+0x6be>
  40b918:	9801      	ldr	r0, [sp, #4]
  40b91a:	9900      	ldr	r1, [sp, #0]
  40b91c:	f8cd c020 	str.w	ip, [sp, #32]
  40b920:	aa0d      	add	r2, sp, #52	; 0x34
  40b922:	f7ff fa67 	bl	40adf4 <__sprint_r.part.0>
  40b926:	2800      	cmp	r0, #0
  40b928:	f47f ae70 	bne.w	40b60c <_vfiprintf_r+0x788>
  40b92c:	990e      	ldr	r1, [sp, #56]	; 0x38
  40b92e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  40b930:	f8dd c020 	ldr.w	ip, [sp, #32]
  40b934:	1c48      	adds	r0, r1, #1
  40b936:	4654      	mov	r4, sl
  40b938:	e5f4      	b.n	40b524 <_vfiprintf_r+0x6a0>
  40b93a:	2a00      	cmp	r2, #0
  40b93c:	d167      	bne.n	40ba0e <_vfiprintf_r+0xb8a>
  40b93e:	2001      	movs	r0, #1
  40b940:	4611      	mov	r1, r2
  40b942:	4654      	mov	r4, sl
  40b944:	e601      	b.n	40b54a <_vfiprintf_r+0x6c6>
  40b946:	9801      	ldr	r0, [sp, #4]
  40b948:	9900      	ldr	r1, [sp, #0]
  40b94a:	aa0d      	add	r2, sp, #52	; 0x34
  40b94c:	f7ff fa52 	bl	40adf4 <__sprint_r.part.0>
  40b950:	2800      	cmp	r0, #0
  40b952:	f47f ae5b 	bne.w	40b60c <_vfiprintf_r+0x788>
  40b956:	980e      	ldr	r0, [sp, #56]	; 0x38
  40b958:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  40b95a:	3001      	adds	r0, #1
  40b95c:	4654      	mov	r4, sl
  40b95e:	e624      	b.n	40b5aa <_vfiprintf_r+0x726>
  40b960:	252d      	movs	r5, #45	; 0x2d
  40b962:	4276      	negs	r6, r6
  40b964:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
  40b968:	f88d 502f 	strb.w	r5, [sp, #47]	; 0x2f
  40b96c:	46e1      	mov	r9, ip
  40b96e:	2301      	movs	r3, #1
  40b970:	f7ff bb91 	b.w	40b096 <_vfiprintf_r+0x212>
  40b974:	9b05      	ldr	r3, [sp, #20]
  40b976:	4611      	mov	r1, r2
  40b978:	2001      	movs	r0, #1
  40b97a:	4654      	mov	r4, sl
  40b97c:	2b00      	cmp	r3, #0
  40b97e:	f43f ade4 	beq.w	40b54a <_vfiprintf_r+0x6c6>
  40b982:	aa0c      	add	r2, sp, #48	; 0x30
  40b984:	2302      	movs	r3, #2
  40b986:	e88a 000c 	stmia.w	sl, {r2, r3}
  40b98a:	461a      	mov	r2, r3
  40b98c:	e5d6      	b.n	40b53c <_vfiprintf_r+0x6b8>
  40b98e:	f018 0f10 	tst.w	r8, #16
  40b992:	d10b      	bne.n	40b9ac <_vfiprintf_r+0xb28>
  40b994:	f018 0f40 	tst.w	r8, #64	; 0x40
  40b998:	d008      	beq.n	40b9ac <_vfiprintf_r+0xb28>
  40b99a:	9a04      	ldr	r2, [sp, #16]
  40b99c:	6813      	ldr	r3, [r2, #0]
  40b99e:	3204      	adds	r2, #4
  40b9a0:	9204      	str	r2, [sp, #16]
  40b9a2:	f8bd 2008 	ldrh.w	r2, [sp, #8]
  40b9a6:	801a      	strh	r2, [r3, #0]
  40b9a8:	f7ff ba9e 	b.w	40aee8 <_vfiprintf_r+0x64>
  40b9ac:	9a04      	ldr	r2, [sp, #16]
  40b9ae:	6813      	ldr	r3, [r2, #0]
  40b9b0:	3204      	adds	r2, #4
  40b9b2:	9204      	str	r2, [sp, #16]
  40b9b4:	9a02      	ldr	r2, [sp, #8]
  40b9b6:	601a      	str	r2, [r3, #0]
  40b9b8:	f7ff ba96 	b.w	40aee8 <_vfiprintf_r+0x64>
  40b9bc:	9801      	ldr	r0, [sp, #4]
  40b9be:	9900      	ldr	r1, [sp, #0]
  40b9c0:	f8cd c020 	str.w	ip, [sp, #32]
  40b9c4:	aa0d      	add	r2, sp, #52	; 0x34
  40b9c6:	f7ff fa15 	bl	40adf4 <__sprint_r.part.0>
  40b9ca:	2800      	cmp	r0, #0
  40b9cc:	f47f ae1e 	bne.w	40b60c <_vfiprintf_r+0x788>
  40b9d0:	990e      	ldr	r1, [sp, #56]	; 0x38
  40b9d2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  40b9d4:	f8dd c020 	ldr.w	ip, [sp, #32]
  40b9d8:	1c48      	adds	r0, r1, #1
  40b9da:	4654      	mov	r4, sl
  40b9dc:	e591      	b.n	40b502 <_vfiprintf_r+0x67e>
  40b9de:	f048 0820 	orr.w	r8, r8, #32
  40b9e2:	f10b 0001 	add.w	r0, fp, #1
  40b9e6:	f89b 3001 	ldrb.w	r3, [fp, #1]
  40b9ea:	f7ff bab4 	b.w	40af56 <_vfiprintf_r+0xd2>
  40b9ee:	426d      	negs	r5, r5
  40b9f0:	9304      	str	r3, [sp, #16]
  40b9f2:	4658      	mov	r0, fp
  40b9f4:	f7ff bbc6 	b.w	40b184 <_vfiprintf_r+0x300>
  40b9f8:	9807      	ldr	r0, [sp, #28]
  40b9fa:	9604      	str	r6, [sp, #16]
  40b9fc:	f7fd ff82 	bl	409904 <strlen>
  40ba00:	f89d 502f 	ldrb.w	r5, [sp, #47]	; 0x2f
  40ba04:	4681      	mov	r9, r0
  40ba06:	f04f 0c00 	mov.w	ip, #0
  40ba0a:	f7ff bb6d 	b.w	40b0e8 <_vfiprintf_r+0x264>
  40ba0e:	9801      	ldr	r0, [sp, #4]
  40ba10:	9900      	ldr	r1, [sp, #0]
  40ba12:	f8cd c014 	str.w	ip, [sp, #20]
  40ba16:	aa0d      	add	r2, sp, #52	; 0x34
  40ba18:	f7ff f9ec 	bl	40adf4 <__sprint_r.part.0>
  40ba1c:	2800      	cmp	r0, #0
  40ba1e:	f47f adf5 	bne.w	40b60c <_vfiprintf_r+0x788>
  40ba22:	990e      	ldr	r1, [sp, #56]	; 0x38
  40ba24:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  40ba26:	f8dd c014 	ldr.w	ip, [sp, #20]
  40ba2a:	1c48      	adds	r0, r1, #1
  40ba2c:	4654      	mov	r4, sl
  40ba2e:	e58c      	b.n	40b54a <_vfiprintf_r+0x6c6>
  40ba30:	990e      	ldr	r1, [sp, #56]	; 0x38
  40ba32:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  40ba34:	4f15      	ldr	r7, [pc, #84]	; (40ba8c <_vfiprintf_r+0xc08>)
  40ba36:	3101      	adds	r1, #1
  40ba38:	f7ff bb98 	b.w	40b16c <_vfiprintf_r+0x2e8>
  40ba3c:	f1bc 0f06 	cmp.w	ip, #6
  40ba40:	bf28      	it	cs
  40ba42:	f04f 0c06 	movcs.w	ip, #6
  40ba46:	4b12      	ldr	r3, [pc, #72]	; (40ba90 <_vfiprintf_r+0xc0c>)
  40ba48:	9604      	str	r6, [sp, #16]
  40ba4a:	46e1      	mov	r9, ip
  40ba4c:	ea2c 76ec 	bic.w	r6, ip, ip, asr #31
  40ba50:	9307      	str	r3, [sp, #28]
  40ba52:	e460      	b.n	40b316 <_vfiprintf_r+0x492>
  40ba54:	990e      	ldr	r1, [sp, #56]	; 0x38
  40ba56:	4f0d      	ldr	r7, [pc, #52]	; (40ba8c <_vfiprintf_r+0xc08>)
  40ba58:	f101 0e01 	add.w	lr, r1, #1
  40ba5c:	e618      	b.n	40b690 <_vfiprintf_r+0x80c>
  40ba5e:	46e1      	mov	r9, ip
  40ba60:	f89d 502f 	ldrb.w	r5, [sp, #47]	; 0x2f
  40ba64:	9604      	str	r6, [sp, #16]
  40ba66:	4684      	mov	ip, r0
  40ba68:	f7ff bb3e 	b.w	40b0e8 <_vfiprintf_r+0x264>
  40ba6c:	4686      	mov	lr, r0
  40ba6e:	e66b      	b.n	40b748 <_vfiprintf_r+0x8c4>
  40ba70:	9a04      	ldr	r2, [sp, #16]
  40ba72:	f89b 3001 	ldrb.w	r3, [fp, #1]
  40ba76:	6816      	ldr	r6, [r2, #0]
  40ba78:	3204      	adds	r2, #4
  40ba7a:	2e00      	cmp	r6, #0
  40ba7c:	9204      	str	r2, [sp, #16]
  40ba7e:	f6bf aa6a 	bge.w	40af56 <_vfiprintf_r+0xd2>
  40ba82:	f04f 36ff 	mov.w	r6, #4294967295
  40ba86:	f7ff ba66 	b.w	40af56 <_vfiprintf_r+0xd2>
  40ba8a:	bf00      	nop
  40ba8c:	00411c50 	.word	0x00411c50
  40ba90:	00411c38 	.word	0x00411c38

0040ba94 <__sbprintf>:
  40ba94:	e92d 42f0 	stmdb	sp!, {r4, r5, r6, r7, r9, lr}
  40ba98:	460c      	mov	r4, r1
  40ba9a:	f5ad 6d8d 	sub.w	sp, sp, #1128	; 0x468
  40ba9e:	f8b1 e00c 	ldrh.w	lr, [r1, #12]
  40baa2:	69e7      	ldr	r7, [r4, #28]
  40baa4:	6e49      	ldr	r1, [r1, #100]	; 0x64
  40baa6:	f8b4 900e 	ldrh.w	r9, [r4, #14]
  40baaa:	9119      	str	r1, [sp, #100]	; 0x64
  40baac:	ad1a      	add	r5, sp, #104	; 0x68
  40baae:	f44f 6680 	mov.w	r6, #1024	; 0x400
  40bab2:	f02e 0e02 	bic.w	lr, lr, #2
  40bab6:	f04f 0c00 	mov.w	ip, #0
  40baba:	9707      	str	r7, [sp, #28]
  40babc:	4669      	mov	r1, sp
  40babe:	6a67      	ldr	r7, [r4, #36]	; 0x24
  40bac0:	9500      	str	r5, [sp, #0]
  40bac2:	9504      	str	r5, [sp, #16]
  40bac4:	9602      	str	r6, [sp, #8]
  40bac6:	9605      	str	r6, [sp, #20]
  40bac8:	f8ad e00c 	strh.w	lr, [sp, #12]
  40bacc:	f8ad 900e 	strh.w	r9, [sp, #14]
  40bad0:	9709      	str	r7, [sp, #36]	; 0x24
  40bad2:	f8cd c018 	str.w	ip, [sp, #24]
  40bad6:	4606      	mov	r6, r0
  40bad8:	f7ff f9d4 	bl	40ae84 <_vfiprintf_r>
  40badc:	1e05      	subs	r5, r0, #0
  40bade:	db07      	blt.n	40baf0 <__sbprintf+0x5c>
  40bae0:	4630      	mov	r0, r6
  40bae2:	4669      	mov	r1, sp
  40bae4:	f7fc fbae 	bl	408244 <_fflush_r>
  40bae8:	2800      	cmp	r0, #0
  40baea:	bf18      	it	ne
  40baec:	f04f 35ff 	movne.w	r5, #4294967295
  40baf0:	f8bd 300c 	ldrh.w	r3, [sp, #12]
  40baf4:	065b      	lsls	r3, r3, #25
  40baf6:	d503      	bpl.n	40bb00 <__sbprintf+0x6c>
  40baf8:	89a3      	ldrh	r3, [r4, #12]
  40bafa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40bafe:	81a3      	strh	r3, [r4, #12]
  40bb00:	4628      	mov	r0, r5
  40bb02:	f50d 6d8d 	add.w	sp, sp, #1128	; 0x468
  40bb06:	e8bd 82f0 	ldmia.w	sp!, {r4, r5, r6, r7, r9, pc}
  40bb0a:	bf00      	nop

0040bb0c <_vfprintf_r>:
  40bb0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40bb10:	b0bf      	sub	sp, #252	; 0xfc
  40bb12:	461c      	mov	r4, r3
  40bb14:	4689      	mov	r9, r1
  40bb16:	9208      	str	r2, [sp, #32]
  40bb18:	4607      	mov	r7, r0
  40bb1a:	f002 fb97 	bl	40e24c <_localeconv_r>
  40bb1e:	6803      	ldr	r3, [r0, #0]
  40bb20:	9315      	str	r3, [sp, #84]	; 0x54
  40bb22:	4618      	mov	r0, r3
  40bb24:	f7fd feee 	bl	409904 <strlen>
  40bb28:	940c      	str	r4, [sp, #48]	; 0x30
  40bb2a:	9016      	str	r0, [sp, #88]	; 0x58
  40bb2c:	b11f      	cbz	r7, 40bb36 <_vfprintf_r+0x2a>
  40bb2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
  40bb30:	2b00      	cmp	r3, #0
  40bb32:	f000 80f3 	beq.w	40bd1c <_vfprintf_r+0x210>
  40bb36:	f8b9 200c 	ldrh.w	r2, [r9, #12]
  40bb3a:	b293      	uxth	r3, r2
  40bb3c:	049d      	lsls	r5, r3, #18
  40bb3e:	d40a      	bmi.n	40bb56 <_vfprintf_r+0x4a>
  40bb40:	f8d9 1064 	ldr.w	r1, [r9, #100]	; 0x64
  40bb44:	f442 5300 	orr.w	r3, r2, #8192	; 0x2000
  40bb48:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
  40bb4c:	f8a9 300c 	strh.w	r3, [r9, #12]
  40bb50:	f8c9 1064 	str.w	r1, [r9, #100]	; 0x64
  40bb54:	b29b      	uxth	r3, r3
  40bb56:	0718      	lsls	r0, r3, #28
  40bb58:	f140 80aa 	bpl.w	40bcb0 <_vfprintf_r+0x1a4>
  40bb5c:	f8d9 2010 	ldr.w	r2, [r9, #16]
  40bb60:	2a00      	cmp	r2, #0
  40bb62:	f000 80a5 	beq.w	40bcb0 <_vfprintf_r+0x1a4>
  40bb66:	f003 031a 	and.w	r3, r3, #26
  40bb6a:	2b0a      	cmp	r3, #10
  40bb6c:	f000 80ac 	beq.w	40bcc8 <_vfprintf_r+0x1bc>
  40bb70:	2300      	movs	r3, #0
  40bb72:	461a      	mov	r2, r3
  40bb74:	9311      	str	r3, [sp, #68]	; 0x44
  40bb76:	9323      	str	r3, [sp, #140]	; 0x8c
  40bb78:	9322      	str	r3, [sp, #136]	; 0x88
  40bb7a:	9314      	str	r3, [sp, #80]	; 0x50
  40bb7c:	9317      	str	r3, [sp, #92]	; 0x5c
  40bb7e:	9309      	str	r3, [sp, #36]	; 0x24
  40bb80:	ab2e      	add	r3, sp, #184	; 0xb8
  40bb82:	469c      	mov	ip, r3
  40bb84:	9321      	str	r3, [sp, #132]	; 0x84
  40bb86:	9212      	str	r2, [sp, #72]	; 0x48
  40bb88:	9213      	str	r2, [sp, #76]	; 0x4c
  40bb8a:	4664      	mov	r4, ip
  40bb8c:	46b8      	mov	r8, r7
  40bb8e:	9d08      	ldr	r5, [sp, #32]
  40bb90:	782b      	ldrb	r3, [r5, #0]
  40bb92:	2b00      	cmp	r3, #0
  40bb94:	f000 80c6 	beq.w	40bd24 <_vfprintf_r+0x218>
  40bb98:	2b25      	cmp	r3, #37	; 0x25
  40bb9a:	d102      	bne.n	40bba2 <_vfprintf_r+0x96>
  40bb9c:	e0c2      	b.n	40bd24 <_vfprintf_r+0x218>
  40bb9e:	2b25      	cmp	r3, #37	; 0x25
  40bba0:	d003      	beq.n	40bbaa <_vfprintf_r+0x9e>
  40bba2:	f815 3f01 	ldrb.w	r3, [r5, #1]!
  40bba6:	2b00      	cmp	r3, #0
  40bba8:	d1f9      	bne.n	40bb9e <_vfprintf_r+0x92>
  40bbaa:	9b08      	ldr	r3, [sp, #32]
  40bbac:	1aee      	subs	r6, r5, r3
  40bbae:	b17e      	cbz	r6, 40bbd0 <_vfprintf_r+0xc4>
  40bbb0:	9b22      	ldr	r3, [sp, #136]	; 0x88
  40bbb2:	9a23      	ldr	r2, [sp, #140]	; 0x8c
  40bbb4:	9908      	ldr	r1, [sp, #32]
  40bbb6:	6021      	str	r1, [r4, #0]
  40bbb8:	3301      	adds	r3, #1
  40bbba:	4432      	add	r2, r6
  40bbbc:	2b07      	cmp	r3, #7
  40bbbe:	6066      	str	r6, [r4, #4]
  40bbc0:	9223      	str	r2, [sp, #140]	; 0x8c
  40bbc2:	9322      	str	r3, [sp, #136]	; 0x88
  40bbc4:	f300 8093 	bgt.w	40bcee <_vfprintf_r+0x1e2>
  40bbc8:	3408      	adds	r4, #8
  40bbca:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40bbcc:	4433      	add	r3, r6
  40bbce:	9309      	str	r3, [sp, #36]	; 0x24
  40bbd0:	782b      	ldrb	r3, [r5, #0]
  40bbd2:	2b00      	cmp	r3, #0
  40bbd4:	f000 8093 	beq.w	40bcfe <_vfprintf_r+0x1f2>
  40bbd8:	2300      	movs	r3, #0
  40bbda:	1c69      	adds	r1, r5, #1
  40bbdc:	f04f 3aff 	mov.w	sl, #4294967295
  40bbe0:	786d      	ldrb	r5, [r5, #1]
  40bbe2:	f88d 3067 	strb.w	r3, [sp, #103]	; 0x67
  40bbe6:	461a      	mov	r2, r3
  40bbe8:	930a      	str	r3, [sp, #40]	; 0x28
  40bbea:	9306      	str	r3, [sp, #24]
  40bbec:	4656      	mov	r6, sl
  40bbee:	1c4b      	adds	r3, r1, #1
  40bbf0:	f1a5 0120 	sub.w	r1, r5, #32
  40bbf4:	2958      	cmp	r1, #88	; 0x58
  40bbf6:	f200 83c1 	bhi.w	40c37c <_vfprintf_r+0x870>
  40bbfa:	e8df f011 	tbh	[pc, r1, lsl #1]
  40bbfe:	0256      	.short	0x0256
  40bc00:	03bf03bf 	.word	0x03bf03bf
  40bc04:	03bf02f6 	.word	0x03bf02f6
  40bc08:	03bf03bf 	.word	0x03bf03bf
  40bc0c:	03bf03bf 	.word	0x03bf03bf
  40bc10:	02fd03bf 	.word	0x02fd03bf
  40bc14:	03bf02c6 	.word	0x03bf02c6
  40bc18:	034701f2 	.word	0x034701f2
  40bc1c:	02ca03bf 	.word	0x02ca03bf
  40bc20:	02d102d1 	.word	0x02d102d1
  40bc24:	02d102d1 	.word	0x02d102d1
  40bc28:	02d102d1 	.word	0x02d102d1
  40bc2c:	02d102d1 	.word	0x02d102d1
  40bc30:	03bf02d1 	.word	0x03bf02d1
  40bc34:	03bf03bf 	.word	0x03bf03bf
  40bc38:	03bf03bf 	.word	0x03bf03bf
  40bc3c:	03bf03bf 	.word	0x03bf03bf
  40bc40:	03bf03bf 	.word	0x03bf03bf
  40bc44:	026b03bf 	.word	0x026b03bf
  40bc48:	03bf028d 	.word	0x03bf028d
  40bc4c:	03bf028d 	.word	0x03bf028d
  40bc50:	03bf03bf 	.word	0x03bf03bf
  40bc54:	02bf03bf 	.word	0x02bf03bf
  40bc58:	03bf03bf 	.word	0x03bf03bf
  40bc5c:	03bf0362 	.word	0x03bf0362
  40bc60:	03bf03bf 	.word	0x03bf03bf
  40bc64:	03bf03bf 	.word	0x03bf03bf
  40bc68:	03bf03a9 	.word	0x03bf03a9
  40bc6c:	037f03bf 	.word	0x037f03bf
  40bc70:	03bf03bf 	.word	0x03bf03bf
  40bc74:	03bf03bf 	.word	0x03bf03bf
  40bc78:	03bf03bf 	.word	0x03bf03bf
  40bc7c:	03bf03bf 	.word	0x03bf03bf
  40bc80:	03bf03bf 	.word	0x03bf03bf
  40bc84:	030b0394 	.word	0x030b0394
  40bc88:	028d028d 	.word	0x028d028d
  40bc8c:	0324028d 	.word	0x0324028d
  40bc90:	03bf030b 	.word	0x03bf030b
  40bc94:	032b03bf 	.word	0x032b03bf
  40bc98:	033503bf 	.word	0x033503bf
  40bc9c:	02e001f9 	.word	0x02e001f9
  40bca0:	03bf025d 	.word	0x03bf025d
  40bca4:	03bf020b 	.word	0x03bf020b
  40bca8:	03bf0095 	.word	0x03bf0095
  40bcac:	023003bf 	.word	0x023003bf
  40bcb0:	4638      	mov	r0, r7
  40bcb2:	4649      	mov	r1, r9
  40bcb4:	f001 f9c2 	bl	40d03c <__swsetup_r>
  40bcb8:	b9a0      	cbnz	r0, 40bce4 <_vfprintf_r+0x1d8>
  40bcba:	f8b9 300c 	ldrh.w	r3, [r9, #12]
  40bcbe:	f003 031a 	and.w	r3, r3, #26
  40bcc2:	2b0a      	cmp	r3, #10
  40bcc4:	f47f af54 	bne.w	40bb70 <_vfprintf_r+0x64>
  40bcc8:	f9b9 300e 	ldrsh.w	r3, [r9, #14]
  40bccc:	2b00      	cmp	r3, #0
  40bcce:	f6ff af4f 	blt.w	40bb70 <_vfprintf_r+0x64>
  40bcd2:	4638      	mov	r0, r7
  40bcd4:	4649      	mov	r1, r9
  40bcd6:	9a08      	ldr	r2, [sp, #32]
  40bcd8:	4623      	mov	r3, r4
  40bcda:	f001 f90b 	bl	40cef4 <__sbprintf>
  40bcde:	b03f      	add	sp, #252	; 0xfc
  40bce0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40bce4:	f04f 30ff 	mov.w	r0, #4294967295
  40bce8:	b03f      	add	sp, #252	; 0xfc
  40bcea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40bcee:	4640      	mov	r0, r8
  40bcf0:	4649      	mov	r1, r9
  40bcf2:	aa21      	add	r2, sp, #132	; 0x84
  40bcf4:	f7ff f8ba 	bl	40ae6c <__sprint_r>
  40bcf8:	b940      	cbnz	r0, 40bd0c <_vfprintf_r+0x200>
  40bcfa:	ac2e      	add	r4, sp, #184	; 0xb8
  40bcfc:	e765      	b.n	40bbca <_vfprintf_r+0xbe>
  40bcfe:	9b23      	ldr	r3, [sp, #140]	; 0x8c
  40bd00:	b123      	cbz	r3, 40bd0c <_vfprintf_r+0x200>
  40bd02:	4640      	mov	r0, r8
  40bd04:	4649      	mov	r1, r9
  40bd06:	aa21      	add	r2, sp, #132	; 0x84
  40bd08:	f7ff f8b0 	bl	40ae6c <__sprint_r>
  40bd0c:	f8b9 300c 	ldrh.w	r3, [r9, #12]
  40bd10:	065a      	lsls	r2, r3, #25
  40bd12:	d4e7      	bmi.n	40bce4 <_vfprintf_r+0x1d8>
  40bd14:	9809      	ldr	r0, [sp, #36]	; 0x24
  40bd16:	b03f      	add	sp, #252	; 0xfc
  40bd18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40bd1c:	4638      	mov	r0, r7
  40bd1e:	f7fc fb25 	bl	40836c <__sinit>
  40bd22:	e708      	b.n	40bb36 <_vfprintf_r+0x2a>
  40bd24:	9d08      	ldr	r5, [sp, #32]
  40bd26:	e753      	b.n	40bbd0 <_vfprintf_r+0xc4>
  40bd28:	9308      	str	r3, [sp, #32]
  40bd2a:	9b06      	ldr	r3, [sp, #24]
  40bd2c:	46b2      	mov	sl, r6
  40bd2e:	069e      	lsls	r6, r3, #26
  40bd30:	f140 8318 	bpl.w	40c364 <_vfprintf_r+0x858>
  40bd34:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  40bd36:	3707      	adds	r7, #7
  40bd38:	f027 0307 	bic.w	r3, r7, #7
  40bd3c:	f103 0208 	add.w	r2, r3, #8
  40bd40:	e9d3 6700 	ldrd	r6, r7, [r3]
  40bd44:	920c      	str	r2, [sp, #48]	; 0x30
  40bd46:	2301      	movs	r3, #1
  40bd48:	f04f 0c00 	mov.w	ip, #0
  40bd4c:	f88d c067 	strb.w	ip, [sp, #103]	; 0x67
  40bd50:	f8cd a03c 	str.w	sl, [sp, #60]	; 0x3c
  40bd54:	f1ba 0f00 	cmp.w	sl, #0
  40bd58:	db03      	blt.n	40bd62 <_vfprintf_r+0x256>
  40bd5a:	9a06      	ldr	r2, [sp, #24]
  40bd5c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
  40bd60:	9206      	str	r2, [sp, #24]
  40bd62:	ea56 0207 	orrs.w	r2, r6, r7
  40bd66:	f040 8319 	bne.w	40c39c <_vfprintf_r+0x890>
  40bd6a:	f1ba 0f00 	cmp.w	sl, #0
  40bd6e:	f000 8416 	beq.w	40c59e <_vfprintf_r+0xa92>
  40bd72:	2b01      	cmp	r3, #1
  40bd74:	f000 831a 	beq.w	40c3ac <_vfprintf_r+0x8a0>
  40bd78:	2b02      	cmp	r3, #2
  40bd7a:	f000 844c 	beq.w	40c616 <_vfprintf_r+0xb0a>
  40bd7e:	a92e      	add	r1, sp, #184	; 0xb8
  40bd80:	08f2      	lsrs	r2, r6, #3
  40bd82:	ea42 7247 	orr.w	r2, r2, r7, lsl #29
  40bd86:	08f8      	lsrs	r0, r7, #3
  40bd88:	f006 0307 	and.w	r3, r6, #7
  40bd8c:	4607      	mov	r7, r0
  40bd8e:	4616      	mov	r6, r2
  40bd90:	3330      	adds	r3, #48	; 0x30
  40bd92:	ea56 0207 	orrs.w	r2, r6, r7
  40bd96:	f801 3d01 	strb.w	r3, [r1, #-1]!
  40bd9a:	d1f1      	bne.n	40bd80 <_vfprintf_r+0x274>
  40bd9c:	9a06      	ldr	r2, [sp, #24]
  40bd9e:	910e      	str	r1, [sp, #56]	; 0x38
  40bda0:	07d0      	lsls	r0, r2, #31
  40bda2:	f100 850d 	bmi.w	40c7c0 <_vfprintf_r+0xcb4>
  40bda6:	ab2e      	add	r3, sp, #184	; 0xb8
  40bda8:	1a5b      	subs	r3, r3, r1
  40bdaa:	930b      	str	r3, [sp, #44]	; 0x2c
  40bdac:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  40bdae:	4592      	cmp	sl, r2
  40bdb0:	4653      	mov	r3, sl
  40bdb2:	bfb8      	it	lt
  40bdb4:	4613      	movlt	r3, r2
  40bdb6:	9307      	str	r3, [sp, #28]
  40bdb8:	2300      	movs	r3, #0
  40bdba:	9310      	str	r3, [sp, #64]	; 0x40
  40bdbc:	f1bc 0f00 	cmp.w	ip, #0
  40bdc0:	d002      	beq.n	40bdc8 <_vfprintf_r+0x2bc>
  40bdc2:	9b07      	ldr	r3, [sp, #28]
  40bdc4:	3301      	adds	r3, #1
  40bdc6:	9307      	str	r3, [sp, #28]
  40bdc8:	9b06      	ldr	r3, [sp, #24]
  40bdca:	f013 0302 	ands.w	r3, r3, #2
  40bdce:	930d      	str	r3, [sp, #52]	; 0x34
  40bdd0:	d002      	beq.n	40bdd8 <_vfprintf_r+0x2cc>
  40bdd2:	9b07      	ldr	r3, [sp, #28]
  40bdd4:	3302      	adds	r3, #2
  40bdd6:	9307      	str	r3, [sp, #28]
  40bdd8:	9b06      	ldr	r3, [sp, #24]
  40bdda:	f013 0684 	ands.w	r6, r3, #132	; 0x84
  40bdde:	f040 82da 	bne.w	40c396 <_vfprintf_r+0x88a>
  40bde2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40bde4:	9a07      	ldr	r2, [sp, #28]
  40bde6:	ebc2 0a03 	rsb	sl, r2, r3
  40bdea:	f1ba 0f00 	cmp.w	sl, #0
  40bdee:	f340 82d2 	ble.w	40c396 <_vfprintf_r+0x88a>
  40bdf2:	f1ba 0f10 	cmp.w	sl, #16
  40bdf6:	9923      	ldr	r1, [sp, #140]	; 0x8c
  40bdf8:	9a22      	ldr	r2, [sp, #136]	; 0x88
  40bdfa:	4fb3      	ldr	r7, [pc, #716]	; (40c0c8 <_vfprintf_r+0x5bc>)
  40bdfc:	bfc8      	it	gt
  40bdfe:	f04f 0b10 	movgt.w	fp, #16
  40be02:	dc07      	bgt.n	40be14 <_vfprintf_r+0x308>
  40be04:	e01e      	b.n	40be44 <_vfprintf_r+0x338>
  40be06:	f1aa 0a10 	sub.w	sl, sl, #16
  40be0a:	f1ba 0f10 	cmp.w	sl, #16
  40be0e:	f104 0408 	add.w	r4, r4, #8
  40be12:	dd17      	ble.n	40be44 <_vfprintf_r+0x338>
  40be14:	3201      	adds	r2, #1
  40be16:	3110      	adds	r1, #16
  40be18:	2a07      	cmp	r2, #7
  40be1a:	9123      	str	r1, [sp, #140]	; 0x8c
  40be1c:	9222      	str	r2, [sp, #136]	; 0x88
  40be1e:	e884 0880 	stmia.w	r4, {r7, fp}
  40be22:	ddf0      	ble.n	40be06 <_vfprintf_r+0x2fa>
  40be24:	4640      	mov	r0, r8
  40be26:	4649      	mov	r1, r9
  40be28:	aa21      	add	r2, sp, #132	; 0x84
  40be2a:	f7ff f81f 	bl	40ae6c <__sprint_r>
  40be2e:	2800      	cmp	r0, #0
  40be30:	f47f af6c 	bne.w	40bd0c <_vfprintf_r+0x200>
  40be34:	f1aa 0a10 	sub.w	sl, sl, #16
  40be38:	f1ba 0f10 	cmp.w	sl, #16
  40be3c:	9923      	ldr	r1, [sp, #140]	; 0x8c
  40be3e:	9a22      	ldr	r2, [sp, #136]	; 0x88
  40be40:	ac2e      	add	r4, sp, #184	; 0xb8
  40be42:	dce7      	bgt.n	40be14 <_vfprintf_r+0x308>
  40be44:	3201      	adds	r2, #1
  40be46:	eb0a 0b01 	add.w	fp, sl, r1
  40be4a:	2a07      	cmp	r2, #7
  40be4c:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
  40be50:	9222      	str	r2, [sp, #136]	; 0x88
  40be52:	e884 0480 	stmia.w	r4, {r7, sl}
  40be56:	f300 8443 	bgt.w	40c6e0 <_vfprintf_r+0xbd4>
  40be5a:	f89d c067 	ldrb.w	ip, [sp, #103]	; 0x67
  40be5e:	3408      	adds	r4, #8
  40be60:	f1bc 0f00 	cmp.w	ip, #0
  40be64:	d00f      	beq.n	40be86 <_vfprintf_r+0x37a>
  40be66:	9b22      	ldr	r3, [sp, #136]	; 0x88
  40be68:	3301      	adds	r3, #1
  40be6a:	f10b 0b01 	add.w	fp, fp, #1
  40be6e:	f10d 0167 	add.w	r1, sp, #103	; 0x67
  40be72:	2201      	movs	r2, #1
  40be74:	2b07      	cmp	r3, #7
  40be76:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
  40be7a:	9322      	str	r3, [sp, #136]	; 0x88
  40be7c:	e884 0006 	stmia.w	r4, {r1, r2}
  40be80:	f300 83b7 	bgt.w	40c5f2 <_vfprintf_r+0xae6>
  40be84:	3408      	adds	r4, #8
  40be86:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  40be88:	b173      	cbz	r3, 40bea8 <_vfprintf_r+0x39c>
  40be8a:	9b22      	ldr	r3, [sp, #136]	; 0x88
  40be8c:	3301      	adds	r3, #1
  40be8e:	f10b 0b02 	add.w	fp, fp, #2
  40be92:	a91a      	add	r1, sp, #104	; 0x68
  40be94:	2202      	movs	r2, #2
  40be96:	2b07      	cmp	r3, #7
  40be98:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
  40be9c:	9322      	str	r3, [sp, #136]	; 0x88
  40be9e:	e884 0006 	stmia.w	r4, {r1, r2}
  40bea2:	f300 839a 	bgt.w	40c5da <_vfprintf_r+0xace>
  40bea6:	3408      	adds	r4, #8
  40bea8:	2e80      	cmp	r6, #128	; 0x80
  40beaa:	f000 82ea 	beq.w	40c482 <_vfprintf_r+0x976>
  40beae:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  40beb0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  40beb2:	ebc2 0a03 	rsb	sl, r2, r3
  40beb6:	f1ba 0f00 	cmp.w	sl, #0
  40beba:	dd32      	ble.n	40bf22 <_vfprintf_r+0x416>
  40bebc:	f1ba 0f10 	cmp.w	sl, #16
  40bec0:	9a22      	ldr	r2, [sp, #136]	; 0x88
  40bec2:	4f82      	ldr	r7, [pc, #520]	; (40c0cc <_vfprintf_r+0x5c0>)
  40bec4:	dd22      	ble.n	40bf0c <_vfprintf_r+0x400>
  40bec6:	2610      	movs	r6, #16
  40bec8:	465b      	mov	r3, fp
  40beca:	e006      	b.n	40beda <_vfprintf_r+0x3ce>
  40becc:	f1aa 0a10 	sub.w	sl, sl, #16
  40bed0:	f1ba 0f10 	cmp.w	sl, #16
  40bed4:	f104 0408 	add.w	r4, r4, #8
  40bed8:	dd17      	ble.n	40bf0a <_vfprintf_r+0x3fe>
  40beda:	3201      	adds	r2, #1
  40bedc:	3310      	adds	r3, #16
  40bede:	2a07      	cmp	r2, #7
  40bee0:	9323      	str	r3, [sp, #140]	; 0x8c
  40bee2:	9222      	str	r2, [sp, #136]	; 0x88
  40bee4:	6027      	str	r7, [r4, #0]
  40bee6:	6066      	str	r6, [r4, #4]
  40bee8:	ddf0      	ble.n	40becc <_vfprintf_r+0x3c0>
  40beea:	4640      	mov	r0, r8
  40beec:	4649      	mov	r1, r9
  40beee:	aa21      	add	r2, sp, #132	; 0x84
  40bef0:	f7fe ffbc 	bl	40ae6c <__sprint_r>
  40bef4:	2800      	cmp	r0, #0
  40bef6:	f47f af09 	bne.w	40bd0c <_vfprintf_r+0x200>
  40befa:	f1aa 0a10 	sub.w	sl, sl, #16
  40befe:	f1ba 0f10 	cmp.w	sl, #16
  40bf02:	9b23      	ldr	r3, [sp, #140]	; 0x8c
  40bf04:	9a22      	ldr	r2, [sp, #136]	; 0x88
  40bf06:	ac2e      	add	r4, sp, #184	; 0xb8
  40bf08:	dce7      	bgt.n	40beda <_vfprintf_r+0x3ce>
  40bf0a:	469b      	mov	fp, r3
  40bf0c:	3201      	adds	r2, #1
  40bf0e:	44d3      	add	fp, sl
  40bf10:	2a07      	cmp	r2, #7
  40bf12:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
  40bf16:	9222      	str	r2, [sp, #136]	; 0x88
  40bf18:	e884 0480 	stmia.w	r4, {r7, sl}
  40bf1c:	f300 8351 	bgt.w	40c5c2 <_vfprintf_r+0xab6>
  40bf20:	3408      	adds	r4, #8
  40bf22:	9b06      	ldr	r3, [sp, #24]
  40bf24:	05db      	lsls	r3, r3, #23
  40bf26:	f100 8255 	bmi.w	40c3d4 <_vfprintf_r+0x8c8>
  40bf2a:	9b22      	ldr	r3, [sp, #136]	; 0x88
  40bf2c:	990b      	ldr	r1, [sp, #44]	; 0x2c
  40bf2e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  40bf30:	6022      	str	r2, [r4, #0]
  40bf32:	3301      	adds	r3, #1
  40bf34:	448b      	add	fp, r1
  40bf36:	2b07      	cmp	r3, #7
  40bf38:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
  40bf3c:	6061      	str	r1, [r4, #4]
  40bf3e:	9322      	str	r3, [sp, #136]	; 0x88
  40bf40:	f300 8317 	bgt.w	40c572 <_vfprintf_r+0xa66>
  40bf44:	3408      	adds	r4, #8
  40bf46:	9b06      	ldr	r3, [sp, #24]
  40bf48:	0759      	lsls	r1, r3, #29
  40bf4a:	d53a      	bpl.n	40bfc2 <_vfprintf_r+0x4b6>
  40bf4c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40bf4e:	9a07      	ldr	r2, [sp, #28]
  40bf50:	1a9d      	subs	r5, r3, r2
  40bf52:	2d00      	cmp	r5, #0
  40bf54:	dd35      	ble.n	40bfc2 <_vfprintf_r+0x4b6>
  40bf56:	2d10      	cmp	r5, #16
  40bf58:	9b22      	ldr	r3, [sp, #136]	; 0x88
  40bf5a:	4f5b      	ldr	r7, [pc, #364]	; (40c0c8 <_vfprintf_r+0x5bc>)
  40bf5c:	dd1e      	ble.n	40bf9c <_vfprintf_r+0x490>
  40bf5e:	2610      	movs	r6, #16
  40bf60:	465a      	mov	r2, fp
  40bf62:	e004      	b.n	40bf6e <_vfprintf_r+0x462>
  40bf64:	3d10      	subs	r5, #16
  40bf66:	2d10      	cmp	r5, #16
  40bf68:	f104 0408 	add.w	r4, r4, #8
  40bf6c:	dd15      	ble.n	40bf9a <_vfprintf_r+0x48e>
  40bf6e:	3301      	adds	r3, #1
  40bf70:	3210      	adds	r2, #16
  40bf72:	2b07      	cmp	r3, #7
  40bf74:	9223      	str	r2, [sp, #140]	; 0x8c
  40bf76:	9322      	str	r3, [sp, #136]	; 0x88
  40bf78:	6027      	str	r7, [r4, #0]
  40bf7a:	6066      	str	r6, [r4, #4]
  40bf7c:	ddf2      	ble.n	40bf64 <_vfprintf_r+0x458>
  40bf7e:	4640      	mov	r0, r8
  40bf80:	4649      	mov	r1, r9
  40bf82:	aa21      	add	r2, sp, #132	; 0x84
  40bf84:	f7fe ff72 	bl	40ae6c <__sprint_r>
  40bf88:	2800      	cmp	r0, #0
  40bf8a:	f47f aebf 	bne.w	40bd0c <_vfprintf_r+0x200>
  40bf8e:	3d10      	subs	r5, #16
  40bf90:	2d10      	cmp	r5, #16
  40bf92:	9a23      	ldr	r2, [sp, #140]	; 0x8c
  40bf94:	9b22      	ldr	r3, [sp, #136]	; 0x88
  40bf96:	ac2e      	add	r4, sp, #184	; 0xb8
  40bf98:	dce9      	bgt.n	40bf6e <_vfprintf_r+0x462>
  40bf9a:	4693      	mov	fp, r2
  40bf9c:	3301      	adds	r3, #1
  40bf9e:	44ab      	add	fp, r5
  40bfa0:	2b07      	cmp	r3, #7
  40bfa2:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
  40bfa6:	9322      	str	r3, [sp, #136]	; 0x88
  40bfa8:	6027      	str	r7, [r4, #0]
  40bfaa:	6065      	str	r5, [r4, #4]
  40bfac:	dd09      	ble.n	40bfc2 <_vfprintf_r+0x4b6>
  40bfae:	4640      	mov	r0, r8
  40bfb0:	4649      	mov	r1, r9
  40bfb2:	aa21      	add	r2, sp, #132	; 0x84
  40bfb4:	f7fe ff5a 	bl	40ae6c <__sprint_r>
  40bfb8:	2800      	cmp	r0, #0
  40bfba:	f47f aea7 	bne.w	40bd0c <_vfprintf_r+0x200>
  40bfbe:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
  40bfc2:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40bfc4:	9a07      	ldr	r2, [sp, #28]
  40bfc6:	990a      	ldr	r1, [sp, #40]	; 0x28
  40bfc8:	428a      	cmp	r2, r1
  40bfca:	bfac      	ite	ge
  40bfcc:	189b      	addge	r3, r3, r2
  40bfce:	185b      	addlt	r3, r3, r1
  40bfd0:	9309      	str	r3, [sp, #36]	; 0x24
  40bfd2:	f1bb 0f00 	cmp.w	fp, #0
  40bfd6:	f040 82d8 	bne.w	40c58a <_vfprintf_r+0xa7e>
  40bfda:	2300      	movs	r3, #0
  40bfdc:	9322      	str	r3, [sp, #136]	; 0x88
  40bfde:	ac2e      	add	r4, sp, #184	; 0xb8
  40bfe0:	e5d5      	b.n	40bb8e <_vfprintf_r+0x82>
  40bfe2:	4619      	mov	r1, r3
  40bfe4:	9806      	ldr	r0, [sp, #24]
  40bfe6:	781d      	ldrb	r5, [r3, #0]
  40bfe8:	f040 0004 	orr.w	r0, r0, #4
  40bfec:	9006      	str	r0, [sp, #24]
  40bfee:	e5fe      	b.n	40bbee <_vfprintf_r+0xe2>
  40bff0:	9308      	str	r3, [sp, #32]
  40bff2:	9b06      	ldr	r3, [sp, #24]
  40bff4:	f013 0320 	ands.w	r3, r3, #32
  40bff8:	46b2      	mov	sl, r6
  40bffa:	f000 816d 	beq.w	40c2d8 <_vfprintf_r+0x7cc>
  40bffe:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  40c000:	3707      	adds	r7, #7
  40c002:	f027 0307 	bic.w	r3, r7, #7
  40c006:	f103 0208 	add.w	r2, r3, #8
  40c00a:	e9d3 6700 	ldrd	r6, r7, [r3]
  40c00e:	920c      	str	r2, [sp, #48]	; 0x30
  40c010:	2300      	movs	r3, #0
  40c012:	e699      	b.n	40bd48 <_vfprintf_r+0x23c>
  40c014:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  40c016:	9308      	str	r3, [sp, #32]
  40c018:	6813      	ldr	r3, [r2, #0]
  40c01a:	930e      	str	r3, [sp, #56]	; 0x38
  40c01c:	f04f 0b00 	mov.w	fp, #0
  40c020:	f88d b067 	strb.w	fp, [sp, #103]	; 0x67
  40c024:	1d17      	adds	r7, r2, #4
  40c026:	2b00      	cmp	r3, #0
  40c028:	f000 864f 	beq.w	40ccca <_vfprintf_r+0x11be>
  40c02c:	2e00      	cmp	r6, #0
  40c02e:	980e      	ldr	r0, [sp, #56]	; 0x38
  40c030:	f2c0 8601 	blt.w	40cc36 <_vfprintf_r+0x112a>
  40c034:	4659      	mov	r1, fp
  40c036:	4632      	mov	r2, r6
  40c038:	f7fc fff8 	bl	40902c <memchr>
  40c03c:	2800      	cmp	r0, #0
  40c03e:	f000 8680 	beq.w	40cd42 <_vfprintf_r+0x1236>
  40c042:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  40c044:	f8cd b03c 	str.w	fp, [sp, #60]	; 0x3c
  40c048:	1ac3      	subs	r3, r0, r3
  40c04a:	930b      	str	r3, [sp, #44]	; 0x2c
  40c04c:	970c      	str	r7, [sp, #48]	; 0x30
  40c04e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  40c052:	9307      	str	r3, [sp, #28]
  40c054:	f8cd b040 	str.w	fp, [sp, #64]	; 0x40
  40c058:	f89d c067 	ldrb.w	ip, [sp, #103]	; 0x67
  40c05c:	e6ae      	b.n	40bdbc <_vfprintf_r+0x2b0>
  40c05e:	9308      	str	r3, [sp, #32]
  40c060:	4b1b      	ldr	r3, [pc, #108]	; (40c0d0 <_vfprintf_r+0x5c4>)
  40c062:	9314      	str	r3, [sp, #80]	; 0x50
  40c064:	9b06      	ldr	r3, [sp, #24]
  40c066:	f88d 2067 	strb.w	r2, [sp, #103]	; 0x67
  40c06a:	0699      	lsls	r1, r3, #26
  40c06c:	46b2      	mov	sl, r6
  40c06e:	f140 814f 	bpl.w	40c310 <_vfprintf_r+0x804>
  40c072:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  40c074:	3707      	adds	r7, #7
  40c076:	f027 0307 	bic.w	r3, r7, #7
  40c07a:	e9d3 6700 	ldrd	r6, r7, [r3]
  40c07e:	f103 0208 	add.w	r2, r3, #8
  40c082:	920c      	str	r2, [sp, #48]	; 0x30
  40c084:	9b06      	ldr	r3, [sp, #24]
  40c086:	07db      	lsls	r3, r3, #31
  40c088:	f140 82de 	bpl.w	40c648 <_vfprintf_r+0xb3c>
  40c08c:	ea56 0307 	orrs.w	r3, r6, r7
  40c090:	f000 82da 	beq.w	40c648 <_vfprintf_r+0xb3c>
  40c094:	9a06      	ldr	r2, [sp, #24]
  40c096:	f88d 5069 	strb.w	r5, [sp, #105]	; 0x69
  40c09a:	2330      	movs	r3, #48	; 0x30
  40c09c:	f042 0202 	orr.w	r2, r2, #2
  40c0a0:	f88d 3068 	strb.w	r3, [sp, #104]	; 0x68
  40c0a4:	9206      	str	r2, [sp, #24]
  40c0a6:	2302      	movs	r3, #2
  40c0a8:	e64e      	b.n	40bd48 <_vfprintf_r+0x23c>
  40c0aa:	781d      	ldrb	r5, [r3, #0]
  40c0ac:	4619      	mov	r1, r3
  40c0ae:	2a00      	cmp	r2, #0
  40c0b0:	f47f ad9d 	bne.w	40bbee <_vfprintf_r+0xe2>
  40c0b4:	2220      	movs	r2, #32
  40c0b6:	e59a      	b.n	40bbee <_vfprintf_r+0xe2>
  40c0b8:	9906      	ldr	r1, [sp, #24]
  40c0ba:	f041 0120 	orr.w	r1, r1, #32
  40c0be:	9106      	str	r1, [sp, #24]
  40c0c0:	781d      	ldrb	r5, [r3, #0]
  40c0c2:	4619      	mov	r1, r3
  40c0c4:	e593      	b.n	40bbee <_vfprintf_r+0xe2>
  40c0c6:	bf00      	nop
  40c0c8:	00411c70 	.word	0x00411c70
  40c0cc:	00411c60 	.word	0x00411c60
  40c0d0:	00411c24 	.word	0x00411c24
  40c0d4:	9308      	str	r3, [sp, #32]
  40c0d6:	9b06      	ldr	r3, [sp, #24]
  40c0d8:	f88d 2067 	strb.w	r2, [sp, #103]	; 0x67
  40c0dc:	f043 0310 	orr.w	r3, r3, #16
  40c0e0:	9306      	str	r3, [sp, #24]
  40c0e2:	9b06      	ldr	r3, [sp, #24]
  40c0e4:	0699      	lsls	r1, r3, #26
  40c0e6:	46b2      	mov	sl, r6
  40c0e8:	f140 809c 	bpl.w	40c224 <_vfprintf_r+0x718>
  40c0ec:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  40c0ee:	3707      	adds	r7, #7
  40c0f0:	f027 0707 	bic.w	r7, r7, #7
  40c0f4:	e9d7 2300 	ldrd	r2, r3, [r7]
  40c0f8:	f107 0108 	add.w	r1, r7, #8
  40c0fc:	910c      	str	r1, [sp, #48]	; 0x30
  40c0fe:	4616      	mov	r6, r2
  40c100:	461f      	mov	r7, r3
  40c102:	2a00      	cmp	r2, #0
  40c104:	f173 0300 	sbcs.w	r3, r3, #0
  40c108:	f2c0 8415 	blt.w	40c936 <_vfprintf_r+0xe2a>
  40c10c:	f89d c067 	ldrb.w	ip, [sp, #103]	; 0x67
  40c110:	f8cd a03c 	str.w	sl, [sp, #60]	; 0x3c
  40c114:	2301      	movs	r3, #1
  40c116:	e61d      	b.n	40bd54 <_vfprintf_r+0x248>
  40c118:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  40c11a:	9308      	str	r3, [sp, #32]
  40c11c:	3707      	adds	r7, #7
  40c11e:	f027 0307 	bic.w	r3, r7, #7
  40c122:	f88d 2067 	strb.w	r2, [sp, #103]	; 0x67
  40c126:	f103 0208 	add.w	r2, r3, #8
  40c12a:	920c      	str	r2, [sp, #48]	; 0x30
  40c12c:	681a      	ldr	r2, [r3, #0]
  40c12e:	9212      	str	r2, [sp, #72]	; 0x48
  40c130:	685b      	ldr	r3, [r3, #4]
  40c132:	9313      	str	r3, [sp, #76]	; 0x4c
  40c134:	9913      	ldr	r1, [sp, #76]	; 0x4c
  40c136:	9812      	ldr	r0, [sp, #72]	; 0x48
  40c138:	f002 fba8 	bl	40e88c <__fpclassifyd>
  40c13c:	2801      	cmp	r0, #1
  40c13e:	46b3      	mov	fp, r6
  40c140:	9812      	ldr	r0, [sp, #72]	; 0x48
  40c142:	9913      	ldr	r1, [sp, #76]	; 0x4c
  40c144:	f040 8406 	bne.w	40c954 <_vfprintf_r+0xe48>
  40c148:	2200      	movs	r2, #0
  40c14a:	2300      	movs	r3, #0
  40c14c:	f7fb ff48 	bl	407fe0 <__aeabi_dcmplt>
  40c150:	2800      	cmp	r0, #0
  40c152:	f040 85ee 	bne.w	40cd32 <_vfprintf_r+0x1226>
  40c156:	f89d c067 	ldrb.w	ip, [sp, #103]	; 0x67
  40c15a:	9e06      	ldr	r6, [sp, #24]
  40c15c:	4a99      	ldr	r2, [pc, #612]	; (40c3c4 <_vfprintf_r+0x8b8>)
  40c15e:	4b9a      	ldr	r3, [pc, #616]	; (40c3c8 <_vfprintf_r+0x8bc>)
  40c160:	2103      	movs	r1, #3
  40c162:	2000      	movs	r0, #0
  40c164:	f026 0680 	bic.w	r6, r6, #128	; 0x80
  40c168:	2d47      	cmp	r5, #71	; 0x47
  40c16a:	bfd8      	it	le
  40c16c:	461a      	movle	r2, r3
  40c16e:	9107      	str	r1, [sp, #28]
  40c170:	900f      	str	r0, [sp, #60]	; 0x3c
  40c172:	9606      	str	r6, [sp, #24]
  40c174:	920e      	str	r2, [sp, #56]	; 0x38
  40c176:	910b      	str	r1, [sp, #44]	; 0x2c
  40c178:	9010      	str	r0, [sp, #64]	; 0x40
  40c17a:	e61f      	b.n	40bdbc <_vfprintf_r+0x2b0>
  40c17c:	9906      	ldr	r1, [sp, #24]
  40c17e:	f041 0108 	orr.w	r1, r1, #8
  40c182:	9106      	str	r1, [sp, #24]
  40c184:	781d      	ldrb	r5, [r3, #0]
  40c186:	4619      	mov	r1, r3
  40c188:	e531      	b.n	40bbee <_vfprintf_r+0xe2>
  40c18a:	781d      	ldrb	r5, [r3, #0]
  40c18c:	4619      	mov	r1, r3
  40c18e:	222b      	movs	r2, #43	; 0x2b
  40c190:	e52d      	b.n	40bbee <_vfprintf_r+0xe2>
  40c192:	9906      	ldr	r1, [sp, #24]
  40c194:	f041 0180 	orr.w	r1, r1, #128	; 0x80
  40c198:	9106      	str	r1, [sp, #24]
  40c19a:	781d      	ldrb	r5, [r3, #0]
  40c19c:	4619      	mov	r1, r3
  40c19e:	e526      	b.n	40bbee <_vfprintf_r+0xe2>
  40c1a0:	f1a5 0030 	sub.w	r0, r5, #48	; 0x30
  40c1a4:	2100      	movs	r1, #0
  40c1a6:	f813 5b01 	ldrb.w	r5, [r3], #1
  40c1aa:	eb01 0181 	add.w	r1, r1, r1, lsl #2
  40c1ae:	eb00 0141 	add.w	r1, r0, r1, lsl #1
  40c1b2:	f1a5 0030 	sub.w	r0, r5, #48	; 0x30
  40c1b6:	2809      	cmp	r0, #9
  40c1b8:	d9f5      	bls.n	40c1a6 <_vfprintf_r+0x69a>
  40c1ba:	910a      	str	r1, [sp, #40]	; 0x28
  40c1bc:	e518      	b.n	40bbf0 <_vfprintf_r+0xe4>
  40c1be:	990c      	ldr	r1, [sp, #48]	; 0x30
  40c1c0:	9308      	str	r3, [sp, #32]
  40c1c2:	2330      	movs	r3, #48	; 0x30
  40c1c4:	9a06      	ldr	r2, [sp, #24]
  40c1c6:	f88d 3068 	strb.w	r3, [sp, #104]	; 0x68
  40c1ca:	460b      	mov	r3, r1
  40c1cc:	3304      	adds	r3, #4
  40c1ce:	2578      	movs	r5, #120	; 0x78
  40c1d0:	f042 0202 	orr.w	r2, r2, #2
  40c1d4:	930c      	str	r3, [sp, #48]	; 0x30
  40c1d6:	4b7d      	ldr	r3, [pc, #500]	; (40c3cc <_vfprintf_r+0x8c0>)
  40c1d8:	9314      	str	r3, [sp, #80]	; 0x50
  40c1da:	46b2      	mov	sl, r6
  40c1dc:	9206      	str	r2, [sp, #24]
  40c1de:	680e      	ldr	r6, [r1, #0]
  40c1e0:	f88d 5069 	strb.w	r5, [sp, #105]	; 0x69
  40c1e4:	2700      	movs	r7, #0
  40c1e6:	2302      	movs	r3, #2
  40c1e8:	e5ae      	b.n	40bd48 <_vfprintf_r+0x23c>
  40c1ea:	9906      	ldr	r1, [sp, #24]
  40c1ec:	f041 0101 	orr.w	r1, r1, #1
  40c1f0:	9106      	str	r1, [sp, #24]
  40c1f2:	781d      	ldrb	r5, [r3, #0]
  40c1f4:	4619      	mov	r1, r3
  40c1f6:	e4fa      	b.n	40bbee <_vfprintf_r+0xe2>
  40c1f8:	9d0c      	ldr	r5, [sp, #48]	; 0x30
  40c1fa:	6829      	ldr	r1, [r5, #0]
  40c1fc:	910a      	str	r1, [sp, #40]	; 0x28
  40c1fe:	4608      	mov	r0, r1
  40c200:	2800      	cmp	r0, #0
  40c202:	4629      	mov	r1, r5
  40c204:	f101 0104 	add.w	r1, r1, #4
  40c208:	f2c0 84e3 	blt.w	40cbd2 <_vfprintf_r+0x10c6>
  40c20c:	910c      	str	r1, [sp, #48]	; 0x30
  40c20e:	781d      	ldrb	r5, [r3, #0]
  40c210:	4619      	mov	r1, r3
  40c212:	e4ec      	b.n	40bbee <_vfprintf_r+0xe2>
  40c214:	9308      	str	r3, [sp, #32]
  40c216:	9b06      	ldr	r3, [sp, #24]
  40c218:	f88d 2067 	strb.w	r2, [sp, #103]	; 0x67
  40c21c:	0699      	lsls	r1, r3, #26
  40c21e:	46b2      	mov	sl, r6
  40c220:	f53f af64 	bmi.w	40c0ec <_vfprintf_r+0x5e0>
  40c224:	9b06      	ldr	r3, [sp, #24]
  40c226:	06da      	lsls	r2, r3, #27
  40c228:	f100 8292 	bmi.w	40c750 <_vfprintf_r+0xc44>
  40c22c:	9b06      	ldr	r3, [sp, #24]
  40c22e:	065b      	lsls	r3, r3, #25
  40c230:	f140 828e 	bpl.w	40c750 <_vfprintf_r+0xc44>
  40c234:	990c      	ldr	r1, [sp, #48]	; 0x30
  40c236:	f9b1 6000 	ldrsh.w	r6, [r1]
  40c23a:	3104      	adds	r1, #4
  40c23c:	17f7      	asrs	r7, r6, #31
  40c23e:	4632      	mov	r2, r6
  40c240:	463b      	mov	r3, r7
  40c242:	910c      	str	r1, [sp, #48]	; 0x30
  40c244:	e75d      	b.n	40c102 <_vfprintf_r+0x5f6>
  40c246:	9906      	ldr	r1, [sp, #24]
  40c248:	f041 0140 	orr.w	r1, r1, #64	; 0x40
  40c24c:	9106      	str	r1, [sp, #24]
  40c24e:	781d      	ldrb	r5, [r3, #0]
  40c250:	4619      	mov	r1, r3
  40c252:	e4cc      	b.n	40bbee <_vfprintf_r+0xe2>
  40c254:	781d      	ldrb	r5, [r3, #0]
  40c256:	9906      	ldr	r1, [sp, #24]
  40c258:	2d6c      	cmp	r5, #108	; 0x6c
  40c25a:	f000 84b3 	beq.w	40cbc4 <_vfprintf_r+0x10b8>
  40c25e:	f041 0110 	orr.w	r1, r1, #16
  40c262:	9106      	str	r1, [sp, #24]
  40c264:	4619      	mov	r1, r3
  40c266:	e4c2      	b.n	40bbee <_vfprintf_r+0xe2>
  40c268:	9308      	str	r3, [sp, #32]
  40c26a:	9b06      	ldr	r3, [sp, #24]
  40c26c:	f88d 2067 	strb.w	r2, [sp, #103]	; 0x67
  40c270:	069a      	lsls	r2, r3, #26
  40c272:	f140 8400 	bpl.w	40ca76 <_vfprintf_r+0xf6a>
  40c276:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  40c278:	9909      	ldr	r1, [sp, #36]	; 0x24
  40c27a:	6813      	ldr	r3, [r2, #0]
  40c27c:	17cf      	asrs	r7, r1, #31
  40c27e:	4608      	mov	r0, r1
  40c280:	3204      	adds	r2, #4
  40c282:	4639      	mov	r1, r7
  40c284:	920c      	str	r2, [sp, #48]	; 0x30
  40c286:	e9c3 0100 	strd	r0, r1, [r3]
  40c28a:	e480      	b.n	40bb8e <_vfprintf_r+0x82>
  40c28c:	781d      	ldrb	r5, [r3, #0]
  40c28e:	2d2a      	cmp	r5, #42	; 0x2a
  40c290:	f103 0101 	add.w	r1, r3, #1
  40c294:	f000 860e 	beq.w	40ceb4 <_vfprintf_r+0x13a8>
  40c298:	f1a5 0030 	sub.w	r0, r5, #48	; 0x30
  40c29c:	2809      	cmp	r0, #9
  40c29e:	460b      	mov	r3, r1
  40c2a0:	f04f 0600 	mov.w	r6, #0
  40c2a4:	f63f aca4 	bhi.w	40bbf0 <_vfprintf_r+0xe4>
  40c2a8:	f813 5b01 	ldrb.w	r5, [r3], #1
  40c2ac:	eb06 0686 	add.w	r6, r6, r6, lsl #2
  40c2b0:	eb00 0646 	add.w	r6, r0, r6, lsl #1
  40c2b4:	f1a5 0030 	sub.w	r0, r5, #48	; 0x30
  40c2b8:	2809      	cmp	r0, #9
  40c2ba:	d9f5      	bls.n	40c2a8 <_vfprintf_r+0x79c>
  40c2bc:	ea46 76e6 	orr.w	r6, r6, r6, asr #31
  40c2c0:	e496      	b.n	40bbf0 <_vfprintf_r+0xe4>
  40c2c2:	9308      	str	r3, [sp, #32]
  40c2c4:	9b06      	ldr	r3, [sp, #24]
  40c2c6:	f043 0310 	orr.w	r3, r3, #16
  40c2ca:	9306      	str	r3, [sp, #24]
  40c2cc:	9b06      	ldr	r3, [sp, #24]
  40c2ce:	f013 0320 	ands.w	r3, r3, #32
  40c2d2:	46b2      	mov	sl, r6
  40c2d4:	f47f ae93 	bne.w	40bffe <_vfprintf_r+0x4f2>
  40c2d8:	9a06      	ldr	r2, [sp, #24]
  40c2da:	f012 0210 	ands.w	r2, r2, #16
  40c2de:	f040 8240 	bne.w	40c762 <_vfprintf_r+0xc56>
  40c2e2:	9b06      	ldr	r3, [sp, #24]
  40c2e4:	f013 0340 	ands.w	r3, r3, #64	; 0x40
  40c2e8:	f000 823b 	beq.w	40c762 <_vfprintf_r+0xc56>
  40c2ec:	990c      	ldr	r1, [sp, #48]	; 0x30
  40c2ee:	4613      	mov	r3, r2
  40c2f0:	460a      	mov	r2, r1
  40c2f2:	3204      	adds	r2, #4
  40c2f4:	880e      	ldrh	r6, [r1, #0]
  40c2f6:	920c      	str	r2, [sp, #48]	; 0x30
  40c2f8:	2700      	movs	r7, #0
  40c2fa:	e525      	b.n	40bd48 <_vfprintf_r+0x23c>
  40c2fc:	9308      	str	r3, [sp, #32]
  40c2fe:	4b34      	ldr	r3, [pc, #208]	; (40c3d0 <_vfprintf_r+0x8c4>)
  40c300:	9314      	str	r3, [sp, #80]	; 0x50
  40c302:	9b06      	ldr	r3, [sp, #24]
  40c304:	f88d 2067 	strb.w	r2, [sp, #103]	; 0x67
  40c308:	0699      	lsls	r1, r3, #26
  40c30a:	46b2      	mov	sl, r6
  40c30c:	f53f aeb1 	bmi.w	40c072 <_vfprintf_r+0x566>
  40c310:	9b06      	ldr	r3, [sp, #24]
  40c312:	06da      	lsls	r2, r3, #27
  40c314:	f140 83c6 	bpl.w	40caa4 <_vfprintf_r+0xf98>
  40c318:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  40c31a:	4613      	mov	r3, r2
  40c31c:	3304      	adds	r3, #4
  40c31e:	6816      	ldr	r6, [r2, #0]
  40c320:	930c      	str	r3, [sp, #48]	; 0x30
  40c322:	2700      	movs	r7, #0
  40c324:	e6ae      	b.n	40c084 <_vfprintf_r+0x578>
  40c326:	990c      	ldr	r1, [sp, #48]	; 0x30
  40c328:	9308      	str	r3, [sp, #32]
  40c32a:	680a      	ldr	r2, [r1, #0]
  40c32c:	f88d 2090 	strb.w	r2, [sp, #144]	; 0x90
  40c330:	2300      	movs	r3, #0
  40c332:	2201      	movs	r2, #1
  40c334:	3104      	adds	r1, #4
  40c336:	469c      	mov	ip, r3
  40c338:	9207      	str	r2, [sp, #28]
  40c33a:	910c      	str	r1, [sp, #48]	; 0x30
  40c33c:	f88d 3067 	strb.w	r3, [sp, #103]	; 0x67
  40c340:	ab24      	add	r3, sp, #144	; 0x90
  40c342:	f8cd c03c 	str.w	ip, [sp, #60]	; 0x3c
  40c346:	f8cd c040 	str.w	ip, [sp, #64]	; 0x40
  40c34a:	920b      	str	r2, [sp, #44]	; 0x2c
  40c34c:	930e      	str	r3, [sp, #56]	; 0x38
  40c34e:	e53b      	b.n	40bdc8 <_vfprintf_r+0x2bc>
  40c350:	9308      	str	r3, [sp, #32]
  40c352:	9b06      	ldr	r3, [sp, #24]
  40c354:	f043 0310 	orr.w	r3, r3, #16
  40c358:	9306      	str	r3, [sp, #24]
  40c35a:	9b06      	ldr	r3, [sp, #24]
  40c35c:	46b2      	mov	sl, r6
  40c35e:	069e      	lsls	r6, r3, #26
  40c360:	f53f ace8 	bmi.w	40bd34 <_vfprintf_r+0x228>
  40c364:	9b06      	ldr	r3, [sp, #24]
  40c366:	06d8      	lsls	r0, r3, #27
  40c368:	f140 8377 	bpl.w	40ca5a <_vfprintf_r+0xf4e>
  40c36c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  40c36e:	4613      	mov	r3, r2
  40c370:	3204      	adds	r2, #4
  40c372:	681e      	ldr	r6, [r3, #0]
  40c374:	920c      	str	r2, [sp, #48]	; 0x30
  40c376:	2301      	movs	r3, #1
  40c378:	2700      	movs	r7, #0
  40c37a:	e4e5      	b.n	40bd48 <_vfprintf_r+0x23c>
  40c37c:	9308      	str	r3, [sp, #32]
  40c37e:	f88d 2067 	strb.w	r2, [sp, #103]	; 0x67
  40c382:	2d00      	cmp	r5, #0
  40c384:	f43f acbb 	beq.w	40bcfe <_vfprintf_r+0x1f2>
  40c388:	2300      	movs	r3, #0
  40c38a:	2201      	movs	r2, #1
  40c38c:	469c      	mov	ip, r3
  40c38e:	9207      	str	r2, [sp, #28]
  40c390:	f88d 5090 	strb.w	r5, [sp, #144]	; 0x90
  40c394:	e7d2      	b.n	40c33c <_vfprintf_r+0x830>
  40c396:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
  40c39a:	e561      	b.n	40be60 <_vfprintf_r+0x354>
  40c39c:	2b01      	cmp	r3, #1
  40c39e:	f47f aceb 	bne.w	40bd78 <_vfprintf_r+0x26c>
  40c3a2:	2f00      	cmp	r7, #0
  40c3a4:	bf08      	it	eq
  40c3a6:	2e0a      	cmpeq	r6, #10
  40c3a8:	f080 81ef 	bcs.w	40c78a <_vfprintf_r+0xc7e>
  40c3ac:	f10d 0bf8 	add.w	fp, sp, #248	; 0xf8
  40c3b0:	3630      	adds	r6, #48	; 0x30
  40c3b2:	f80b 6d41 	strb.w	r6, [fp, #-65]!
  40c3b6:	ab2e      	add	r3, sp, #184	; 0xb8
  40c3b8:	ebcb 0303 	rsb	r3, fp, r3
  40c3bc:	930b      	str	r3, [sp, #44]	; 0x2c
  40c3be:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
  40c3c2:	e4f3      	b.n	40bdac <_vfprintf_r+0x2a0>
  40c3c4:	00411c04 	.word	0x00411c04
  40c3c8:	00411c00 	.word	0x00411c00
  40c3cc:	00411c24 	.word	0x00411c24
  40c3d0:	00411c10 	.word	0x00411c10
  40c3d4:	2d65      	cmp	r5, #101	; 0x65
  40c3d6:	f340 808a 	ble.w	40c4ee <_vfprintf_r+0x9e2>
  40c3da:	9812      	ldr	r0, [sp, #72]	; 0x48
  40c3dc:	9913      	ldr	r1, [sp, #76]	; 0x4c
  40c3de:	2200      	movs	r2, #0
  40c3e0:	2300      	movs	r3, #0
  40c3e2:	f7fb fdf3 	bl	407fcc <__aeabi_dcmpeq>
  40c3e6:	2800      	cmp	r0, #0
  40c3e8:	f000 8131 	beq.w	40c64e <_vfprintf_r+0xb42>
  40c3ec:	9b22      	ldr	r3, [sp, #136]	; 0x88
  40c3ee:	4aba      	ldr	r2, [pc, #744]	; (40c6d8 <_vfprintf_r+0xbcc>)
  40c3f0:	6022      	str	r2, [r4, #0]
  40c3f2:	3301      	adds	r3, #1
  40c3f4:	f10b 0b01 	add.w	fp, fp, #1
  40c3f8:	2201      	movs	r2, #1
  40c3fa:	2b07      	cmp	r3, #7
  40c3fc:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
  40c400:	9322      	str	r3, [sp, #136]	; 0x88
  40c402:	6062      	str	r2, [r4, #4]
  40c404:	f300 8367 	bgt.w	40cad6 <_vfprintf_r+0xfca>
  40c408:	3408      	adds	r4, #8
  40c40a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
  40c40c:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40c40e:	4293      	cmp	r3, r2
  40c410:	db03      	blt.n	40c41a <_vfprintf_r+0x90e>
  40c412:	9b06      	ldr	r3, [sp, #24]
  40c414:	07df      	lsls	r7, r3, #31
  40c416:	f57f ad96 	bpl.w	40bf46 <_vfprintf_r+0x43a>
  40c41a:	9b22      	ldr	r3, [sp, #136]	; 0x88
  40c41c:	9916      	ldr	r1, [sp, #88]	; 0x58
  40c41e:	9a15      	ldr	r2, [sp, #84]	; 0x54
  40c420:	6022      	str	r2, [r4, #0]
  40c422:	3301      	adds	r3, #1
  40c424:	448b      	add	fp, r1
  40c426:	2b07      	cmp	r3, #7
  40c428:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
  40c42c:	6061      	str	r1, [r4, #4]
  40c42e:	9322      	str	r3, [sp, #136]	; 0x88
  40c430:	f300 83d6 	bgt.w	40cbe0 <_vfprintf_r+0x10d4>
  40c434:	3408      	adds	r4, #8
  40c436:	9b11      	ldr	r3, [sp, #68]	; 0x44
  40c438:	1e5d      	subs	r5, r3, #1
  40c43a:	2d00      	cmp	r5, #0
  40c43c:	f77f ad83 	ble.w	40bf46 <_vfprintf_r+0x43a>
  40c440:	2d10      	cmp	r5, #16
  40c442:	9b22      	ldr	r3, [sp, #136]	; 0x88
  40c444:	4fa5      	ldr	r7, [pc, #660]	; (40c6dc <_vfprintf_r+0xbd0>)
  40c446:	f340 8195 	ble.w	40c774 <_vfprintf_r+0xc68>
  40c44a:	2610      	movs	r6, #16
  40c44c:	465a      	mov	r2, fp
  40c44e:	e004      	b.n	40c45a <_vfprintf_r+0x94e>
  40c450:	3408      	adds	r4, #8
  40c452:	3d10      	subs	r5, #16
  40c454:	2d10      	cmp	r5, #16
  40c456:	f340 818c 	ble.w	40c772 <_vfprintf_r+0xc66>
  40c45a:	3301      	adds	r3, #1
  40c45c:	3210      	adds	r2, #16
  40c45e:	2b07      	cmp	r3, #7
  40c460:	9223      	str	r2, [sp, #140]	; 0x8c
  40c462:	9322      	str	r3, [sp, #136]	; 0x88
  40c464:	6027      	str	r7, [r4, #0]
  40c466:	6066      	str	r6, [r4, #4]
  40c468:	ddf2      	ble.n	40c450 <_vfprintf_r+0x944>
  40c46a:	4640      	mov	r0, r8
  40c46c:	4649      	mov	r1, r9
  40c46e:	aa21      	add	r2, sp, #132	; 0x84
  40c470:	f7fe fcfc 	bl	40ae6c <__sprint_r>
  40c474:	2800      	cmp	r0, #0
  40c476:	f47f ac49 	bne.w	40bd0c <_vfprintf_r+0x200>
  40c47a:	9a23      	ldr	r2, [sp, #140]	; 0x8c
  40c47c:	9b22      	ldr	r3, [sp, #136]	; 0x88
  40c47e:	ac2e      	add	r4, sp, #184	; 0xb8
  40c480:	e7e7      	b.n	40c452 <_vfprintf_r+0x946>
  40c482:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40c484:	9a07      	ldr	r2, [sp, #28]
  40c486:	1a9e      	subs	r6, r3, r2
  40c488:	2e00      	cmp	r6, #0
  40c48a:	f77f ad10 	ble.w	40beae <_vfprintf_r+0x3a2>
  40c48e:	2e10      	cmp	r6, #16
  40c490:	9a22      	ldr	r2, [sp, #136]	; 0x88
  40c492:	4f92      	ldr	r7, [pc, #584]	; (40c6dc <_vfprintf_r+0xbd0>)
  40c494:	dd1f      	ble.n	40c4d6 <_vfprintf_r+0x9ca>
  40c496:	f04f 0a10 	mov.w	sl, #16
  40c49a:	465b      	mov	r3, fp
  40c49c:	e004      	b.n	40c4a8 <_vfprintf_r+0x99c>
  40c49e:	3e10      	subs	r6, #16
  40c4a0:	2e10      	cmp	r6, #16
  40c4a2:	f104 0408 	add.w	r4, r4, #8
  40c4a6:	dd15      	ble.n	40c4d4 <_vfprintf_r+0x9c8>
  40c4a8:	3201      	adds	r2, #1
  40c4aa:	3310      	adds	r3, #16
  40c4ac:	2a07      	cmp	r2, #7
  40c4ae:	9323      	str	r3, [sp, #140]	; 0x8c
  40c4b0:	9222      	str	r2, [sp, #136]	; 0x88
  40c4b2:	e884 0480 	stmia.w	r4, {r7, sl}
  40c4b6:	ddf2      	ble.n	40c49e <_vfprintf_r+0x992>
  40c4b8:	4640      	mov	r0, r8
  40c4ba:	4649      	mov	r1, r9
  40c4bc:	aa21      	add	r2, sp, #132	; 0x84
  40c4be:	f7fe fcd5 	bl	40ae6c <__sprint_r>
  40c4c2:	2800      	cmp	r0, #0
  40c4c4:	f47f ac22 	bne.w	40bd0c <_vfprintf_r+0x200>
  40c4c8:	3e10      	subs	r6, #16
  40c4ca:	2e10      	cmp	r6, #16
  40c4cc:	9b23      	ldr	r3, [sp, #140]	; 0x8c
  40c4ce:	9a22      	ldr	r2, [sp, #136]	; 0x88
  40c4d0:	ac2e      	add	r4, sp, #184	; 0xb8
  40c4d2:	dce9      	bgt.n	40c4a8 <_vfprintf_r+0x99c>
  40c4d4:	469b      	mov	fp, r3
  40c4d6:	3201      	adds	r2, #1
  40c4d8:	44b3      	add	fp, r6
  40c4da:	2a07      	cmp	r2, #7
  40c4dc:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
  40c4e0:	9222      	str	r2, [sp, #136]	; 0x88
  40c4e2:	6027      	str	r7, [r4, #0]
  40c4e4:	6066      	str	r6, [r4, #4]
  40c4e6:	f300 8219 	bgt.w	40c91c <_vfprintf_r+0xe10>
  40c4ea:	3408      	adds	r4, #8
  40c4ec:	e4df      	b.n	40beae <_vfprintf_r+0x3a2>
  40c4ee:	9b11      	ldr	r3, [sp, #68]	; 0x44
  40c4f0:	9d22      	ldr	r5, [sp, #136]	; 0x88
  40c4f2:	2b01      	cmp	r3, #1
  40c4f4:	f340 81d4 	ble.w	40c8a0 <_vfprintf_r+0xd94>
  40c4f8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  40c4fa:	6023      	str	r3, [r4, #0]
  40c4fc:	3501      	adds	r5, #1
  40c4fe:	f10b 0601 	add.w	r6, fp, #1
  40c502:	2301      	movs	r3, #1
  40c504:	2d07      	cmp	r5, #7
  40c506:	9623      	str	r6, [sp, #140]	; 0x8c
  40c508:	9522      	str	r5, [sp, #136]	; 0x88
  40c50a:	6063      	str	r3, [r4, #4]
  40c50c:	f300 81e4 	bgt.w	40c8d8 <_vfprintf_r+0xdcc>
  40c510:	3408      	adds	r4, #8
  40c512:	9a16      	ldr	r2, [sp, #88]	; 0x58
  40c514:	9b15      	ldr	r3, [sp, #84]	; 0x54
  40c516:	6023      	str	r3, [r4, #0]
  40c518:	3501      	adds	r5, #1
  40c51a:	4416      	add	r6, r2
  40c51c:	2d07      	cmp	r5, #7
  40c51e:	9623      	str	r6, [sp, #140]	; 0x8c
  40c520:	9522      	str	r5, [sp, #136]	; 0x88
  40c522:	6062      	str	r2, [r4, #4]
  40c524:	f300 81e4 	bgt.w	40c8f0 <_vfprintf_r+0xde4>
  40c528:	3408      	adds	r4, #8
  40c52a:	2300      	movs	r3, #0
  40c52c:	9812      	ldr	r0, [sp, #72]	; 0x48
  40c52e:	9913      	ldr	r1, [sp, #76]	; 0x4c
  40c530:	2200      	movs	r2, #0
  40c532:	f7fb fd4b 	bl	407fcc <__aeabi_dcmpeq>
  40c536:	9b11      	ldr	r3, [sp, #68]	; 0x44
  40c538:	2800      	cmp	r0, #0
  40c53a:	f040 80e0 	bne.w	40c6fe <_vfprintf_r+0xbf2>
  40c53e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  40c540:	3b01      	subs	r3, #1
  40c542:	3501      	adds	r5, #1
  40c544:	3201      	adds	r2, #1
  40c546:	441e      	add	r6, r3
  40c548:	2d07      	cmp	r5, #7
  40c54a:	9522      	str	r5, [sp, #136]	; 0x88
  40c54c:	9623      	str	r6, [sp, #140]	; 0x8c
  40c54e:	6022      	str	r2, [r4, #0]
  40c550:	6063      	str	r3, [r4, #4]
  40c552:	f300 81b5 	bgt.w	40c8c0 <_vfprintf_r+0xdb4>
  40c556:	3408      	adds	r4, #8
  40c558:	9a17      	ldr	r2, [sp, #92]	; 0x5c
  40c55a:	6062      	str	r2, [r4, #4]
  40c55c:	3501      	adds	r5, #1
  40c55e:	eb06 0b02 	add.w	fp, r6, r2
  40c562:	ab1d      	add	r3, sp, #116	; 0x74
  40c564:	2d07      	cmp	r5, #7
  40c566:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
  40c56a:	9522      	str	r5, [sp, #136]	; 0x88
  40c56c:	6023      	str	r3, [r4, #0]
  40c56e:	f77f ace9 	ble.w	40bf44 <_vfprintf_r+0x438>
  40c572:	4640      	mov	r0, r8
  40c574:	4649      	mov	r1, r9
  40c576:	aa21      	add	r2, sp, #132	; 0x84
  40c578:	f7fe fc78 	bl	40ae6c <__sprint_r>
  40c57c:	2800      	cmp	r0, #0
  40c57e:	f47f abc5 	bne.w	40bd0c <_vfprintf_r+0x200>
  40c582:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
  40c586:	ac2e      	add	r4, sp, #184	; 0xb8
  40c588:	e4dd      	b.n	40bf46 <_vfprintf_r+0x43a>
  40c58a:	4640      	mov	r0, r8
  40c58c:	4649      	mov	r1, r9
  40c58e:	aa21      	add	r2, sp, #132	; 0x84
  40c590:	f7fe fc6c 	bl	40ae6c <__sprint_r>
  40c594:	2800      	cmp	r0, #0
  40c596:	f43f ad20 	beq.w	40bfda <_vfprintf_r+0x4ce>
  40c59a:	f7ff bbb7 	b.w	40bd0c <_vfprintf_r+0x200>
  40c59e:	2b00      	cmp	r3, #0
  40c5a0:	d133      	bne.n	40c60a <_vfprintf_r+0xafe>
  40c5a2:	9b06      	ldr	r3, [sp, #24]
  40c5a4:	07da      	lsls	r2, r3, #31
  40c5a6:	d530      	bpl.n	40c60a <_vfprintf_r+0xafe>
  40c5a8:	f10d 0bf8 	add.w	fp, sp, #248	; 0xf8
  40c5ac:	2330      	movs	r3, #48	; 0x30
  40c5ae:	f80b 3d41 	strb.w	r3, [fp, #-65]!
  40c5b2:	ab2e      	add	r3, sp, #184	; 0xb8
  40c5b4:	ebcb 0303 	rsb	r3, fp, r3
  40c5b8:	930b      	str	r3, [sp, #44]	; 0x2c
  40c5ba:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
  40c5be:	f7ff bbf5 	b.w	40bdac <_vfprintf_r+0x2a0>
  40c5c2:	4640      	mov	r0, r8
  40c5c4:	4649      	mov	r1, r9
  40c5c6:	aa21      	add	r2, sp, #132	; 0x84
  40c5c8:	f7fe fc50 	bl	40ae6c <__sprint_r>
  40c5cc:	2800      	cmp	r0, #0
  40c5ce:	f47f ab9d 	bne.w	40bd0c <_vfprintf_r+0x200>
  40c5d2:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
  40c5d6:	ac2e      	add	r4, sp, #184	; 0xb8
  40c5d8:	e4a3      	b.n	40bf22 <_vfprintf_r+0x416>
  40c5da:	4640      	mov	r0, r8
  40c5dc:	4649      	mov	r1, r9
  40c5de:	aa21      	add	r2, sp, #132	; 0x84
  40c5e0:	f7fe fc44 	bl	40ae6c <__sprint_r>
  40c5e4:	2800      	cmp	r0, #0
  40c5e6:	f47f ab91 	bne.w	40bd0c <_vfprintf_r+0x200>
  40c5ea:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
  40c5ee:	ac2e      	add	r4, sp, #184	; 0xb8
  40c5f0:	e45a      	b.n	40bea8 <_vfprintf_r+0x39c>
  40c5f2:	4640      	mov	r0, r8
  40c5f4:	4649      	mov	r1, r9
  40c5f6:	aa21      	add	r2, sp, #132	; 0x84
  40c5f8:	f7fe fc38 	bl	40ae6c <__sprint_r>
  40c5fc:	2800      	cmp	r0, #0
  40c5fe:	f47f ab85 	bne.w	40bd0c <_vfprintf_r+0x200>
  40c602:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
  40c606:	ac2e      	add	r4, sp, #184	; 0xb8
  40c608:	e43d      	b.n	40be86 <_vfprintf_r+0x37a>
  40c60a:	ab2e      	add	r3, sp, #184	; 0xb8
  40c60c:	f8cd a02c 	str.w	sl, [sp, #44]	; 0x2c
  40c610:	930e      	str	r3, [sp, #56]	; 0x38
  40c612:	f7ff bbcb 	b.w	40bdac <_vfprintf_r+0x2a0>
  40c616:	9814      	ldr	r0, [sp, #80]	; 0x50
  40c618:	f10d 0bb8 	add.w	fp, sp, #184	; 0xb8
  40c61c:	0933      	lsrs	r3, r6, #4
  40c61e:	f006 010f 	and.w	r1, r6, #15
  40c622:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
  40c626:	093a      	lsrs	r2, r7, #4
  40c628:	461e      	mov	r6, r3
  40c62a:	4617      	mov	r7, r2
  40c62c:	5c43      	ldrb	r3, [r0, r1]
  40c62e:	f80b 3d01 	strb.w	r3, [fp, #-1]!
  40c632:	ea56 0307 	orrs.w	r3, r6, r7
  40c636:	d1f1      	bne.n	40c61c <_vfprintf_r+0xb10>
  40c638:	465a      	mov	r2, fp
  40c63a:	ab2e      	add	r3, sp, #184	; 0xb8
  40c63c:	1a9b      	subs	r3, r3, r2
  40c63e:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
  40c642:	930b      	str	r3, [sp, #44]	; 0x2c
  40c644:	f7ff bbb2 	b.w	40bdac <_vfprintf_r+0x2a0>
  40c648:	2302      	movs	r3, #2
  40c64a:	f7ff bb7d 	b.w	40bd48 <_vfprintf_r+0x23c>
  40c64e:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
  40c650:	2d00      	cmp	r5, #0
  40c652:	f340 824c 	ble.w	40caee <_vfprintf_r+0xfe2>
  40c656:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40c658:	9910      	ldr	r1, [sp, #64]	; 0x40
  40c65a:	428a      	cmp	r2, r1
  40c65c:	4613      	mov	r3, r2
  40c65e:	bfa8      	it	ge
  40c660:	460b      	movge	r3, r1
  40c662:	461d      	mov	r5, r3
  40c664:	990e      	ldr	r1, [sp, #56]	; 0x38
  40c666:	2d00      	cmp	r5, #0
  40c668:	eb01 0a02 	add.w	sl, r1, r2
  40c66c:	dd0b      	ble.n	40c686 <_vfprintf_r+0xb7a>
  40c66e:	9b22      	ldr	r3, [sp, #136]	; 0x88
  40c670:	6021      	str	r1, [r4, #0]
  40c672:	3301      	adds	r3, #1
  40c674:	44ab      	add	fp, r5
  40c676:	2b07      	cmp	r3, #7
  40c678:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
  40c67c:	6065      	str	r5, [r4, #4]
  40c67e:	9322      	str	r3, [sp, #136]	; 0x88
  40c680:	f300 8300 	bgt.w	40cc84 <_vfprintf_r+0x1178>
  40c684:	3408      	adds	r4, #8
  40c686:	9b10      	ldr	r3, [sp, #64]	; 0x40
  40c688:	2d00      	cmp	r5, #0
  40c68a:	bfa8      	it	ge
  40c68c:	1b5b      	subge	r3, r3, r5
  40c68e:	2b00      	cmp	r3, #0
  40c690:	461d      	mov	r5, r3
  40c692:	f340 80af 	ble.w	40c7f4 <_vfprintf_r+0xce8>
  40c696:	2d10      	cmp	r5, #16
  40c698:	9b22      	ldr	r3, [sp, #136]	; 0x88
  40c69a:	4f10      	ldr	r7, [pc, #64]	; (40c6dc <_vfprintf_r+0xbd0>)
  40c69c:	f340 820f 	ble.w	40cabe <_vfprintf_r+0xfb2>
  40c6a0:	2610      	movs	r6, #16
  40c6a2:	465a      	mov	r2, fp
  40c6a4:	e004      	b.n	40c6b0 <_vfprintf_r+0xba4>
  40c6a6:	3408      	adds	r4, #8
  40c6a8:	3d10      	subs	r5, #16
  40c6aa:	2d10      	cmp	r5, #16
  40c6ac:	f340 8206 	ble.w	40cabc <_vfprintf_r+0xfb0>
  40c6b0:	3301      	adds	r3, #1
  40c6b2:	3210      	adds	r2, #16
  40c6b4:	2b07      	cmp	r3, #7
  40c6b6:	9223      	str	r2, [sp, #140]	; 0x8c
  40c6b8:	9322      	str	r3, [sp, #136]	; 0x88
  40c6ba:	6027      	str	r7, [r4, #0]
  40c6bc:	6066      	str	r6, [r4, #4]
  40c6be:	ddf2      	ble.n	40c6a6 <_vfprintf_r+0xb9a>
  40c6c0:	4640      	mov	r0, r8
  40c6c2:	4649      	mov	r1, r9
  40c6c4:	aa21      	add	r2, sp, #132	; 0x84
  40c6c6:	f7fe fbd1 	bl	40ae6c <__sprint_r>
  40c6ca:	2800      	cmp	r0, #0
  40c6cc:	f47f ab1e 	bne.w	40bd0c <_vfprintf_r+0x200>
  40c6d0:	9a23      	ldr	r2, [sp, #140]	; 0x8c
  40c6d2:	9b22      	ldr	r3, [sp, #136]	; 0x88
  40c6d4:	ac2e      	add	r4, sp, #184	; 0xb8
  40c6d6:	e7e7      	b.n	40c6a8 <_vfprintf_r+0xb9c>
  40c6d8:	004119fc 	.word	0x004119fc
  40c6dc:	00411c60 	.word	0x00411c60
  40c6e0:	4640      	mov	r0, r8
  40c6e2:	4649      	mov	r1, r9
  40c6e4:	aa21      	add	r2, sp, #132	; 0x84
  40c6e6:	f7fe fbc1 	bl	40ae6c <__sprint_r>
  40c6ea:	2800      	cmp	r0, #0
  40c6ec:	f47f ab0e 	bne.w	40bd0c <_vfprintf_r+0x200>
  40c6f0:	f89d c067 	ldrb.w	ip, [sp, #103]	; 0x67
  40c6f4:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
  40c6f8:	ac2e      	add	r4, sp, #184	; 0xb8
  40c6fa:	f7ff bbb1 	b.w	40be60 <_vfprintf_r+0x354>
  40c6fe:	f103 3aff 	add.w	sl, r3, #4294967295
  40c702:	f1ba 0f00 	cmp.w	sl, #0
  40c706:	f77f af27 	ble.w	40c558 <_vfprintf_r+0xa4c>
  40c70a:	f1ba 0f10 	cmp.w	sl, #16
  40c70e:	4f90      	ldr	r7, [pc, #576]	; (40c950 <_vfprintf_r+0xe44>)
  40c710:	bfc8      	it	gt
  40c712:	f04f 0b10 	movgt.w	fp, #16
  40c716:	dc07      	bgt.n	40c728 <_vfprintf_r+0xc1c>
  40c718:	e0f6      	b.n	40c908 <_vfprintf_r+0xdfc>
  40c71a:	3408      	adds	r4, #8
  40c71c:	f1aa 0a10 	sub.w	sl, sl, #16
  40c720:	f1ba 0f10 	cmp.w	sl, #16
  40c724:	f340 80f0 	ble.w	40c908 <_vfprintf_r+0xdfc>
  40c728:	3501      	adds	r5, #1
  40c72a:	3610      	adds	r6, #16
  40c72c:	2d07      	cmp	r5, #7
  40c72e:	9623      	str	r6, [sp, #140]	; 0x8c
  40c730:	9522      	str	r5, [sp, #136]	; 0x88
  40c732:	e884 0880 	stmia.w	r4, {r7, fp}
  40c736:	ddf0      	ble.n	40c71a <_vfprintf_r+0xc0e>
  40c738:	4640      	mov	r0, r8
  40c73a:	4649      	mov	r1, r9
  40c73c:	aa21      	add	r2, sp, #132	; 0x84
  40c73e:	f7fe fb95 	bl	40ae6c <__sprint_r>
  40c742:	2800      	cmp	r0, #0
  40c744:	f47f aae2 	bne.w	40bd0c <_vfprintf_r+0x200>
  40c748:	9e23      	ldr	r6, [sp, #140]	; 0x8c
  40c74a:	9d22      	ldr	r5, [sp, #136]	; 0x88
  40c74c:	ac2e      	add	r4, sp, #184	; 0xb8
  40c74e:	e7e5      	b.n	40c71c <_vfprintf_r+0xc10>
  40c750:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  40c752:	6816      	ldr	r6, [r2, #0]
  40c754:	4613      	mov	r3, r2
  40c756:	3304      	adds	r3, #4
  40c758:	17f7      	asrs	r7, r6, #31
  40c75a:	930c      	str	r3, [sp, #48]	; 0x30
  40c75c:	4632      	mov	r2, r6
  40c75e:	463b      	mov	r3, r7
  40c760:	e4cf      	b.n	40c102 <_vfprintf_r+0x5f6>
  40c762:	990c      	ldr	r1, [sp, #48]	; 0x30
  40c764:	460a      	mov	r2, r1
  40c766:	3204      	adds	r2, #4
  40c768:	680e      	ldr	r6, [r1, #0]
  40c76a:	920c      	str	r2, [sp, #48]	; 0x30
  40c76c:	2700      	movs	r7, #0
  40c76e:	f7ff baeb 	b.w	40bd48 <_vfprintf_r+0x23c>
  40c772:	4693      	mov	fp, r2
  40c774:	3301      	adds	r3, #1
  40c776:	44ab      	add	fp, r5
  40c778:	2b07      	cmp	r3, #7
  40c77a:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
  40c77e:	9322      	str	r3, [sp, #136]	; 0x88
  40c780:	6027      	str	r7, [r4, #0]
  40c782:	6065      	str	r5, [r4, #4]
  40c784:	f77f abde 	ble.w	40bf44 <_vfprintf_r+0x438>
  40c788:	e6f3      	b.n	40c572 <_vfprintf_r+0xa66>
  40c78a:	f10d 0bb8 	add.w	fp, sp, #184	; 0xb8
  40c78e:	f8cd c01c 	str.w	ip, [sp, #28]
  40c792:	4630      	mov	r0, r6
  40c794:	4639      	mov	r1, r7
  40c796:	220a      	movs	r2, #10
  40c798:	2300      	movs	r3, #0
  40c79a:	f002 fe1b 	bl	40f3d4 <__aeabi_uldivmod>
  40c79e:	3230      	adds	r2, #48	; 0x30
  40c7a0:	4630      	mov	r0, r6
  40c7a2:	4639      	mov	r1, r7
  40c7a4:	f80b 2d01 	strb.w	r2, [fp, #-1]!
  40c7a8:	2300      	movs	r3, #0
  40c7aa:	220a      	movs	r2, #10
  40c7ac:	f002 fe12 	bl	40f3d4 <__aeabi_uldivmod>
  40c7b0:	4606      	mov	r6, r0
  40c7b2:	460f      	mov	r7, r1
  40c7b4:	ea56 0307 	orrs.w	r3, r6, r7
  40c7b8:	d1eb      	bne.n	40c792 <_vfprintf_r+0xc86>
  40c7ba:	f8dd c01c 	ldr.w	ip, [sp, #28]
  40c7be:	e73b      	b.n	40c638 <_vfprintf_r+0xb2c>
  40c7c0:	2b30      	cmp	r3, #48	; 0x30
  40c7c2:	f000 8219 	beq.w	40cbf8 <_vfprintf_r+0x10ec>
  40c7c6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  40c7c8:	3b01      	subs	r3, #1
  40c7ca:	461a      	mov	r2, r3
  40c7cc:	a82e      	add	r0, sp, #184	; 0xb8
  40c7ce:	930e      	str	r3, [sp, #56]	; 0x38
  40c7d0:	1a82      	subs	r2, r0, r2
  40c7d2:	2330      	movs	r3, #48	; 0x30
  40c7d4:	920b      	str	r2, [sp, #44]	; 0x2c
  40c7d6:	f801 3c01 	strb.w	r3, [r1, #-1]
  40c7da:	f7ff bae7 	b.w	40bdac <_vfprintf_r+0x2a0>
  40c7de:	4640      	mov	r0, r8
  40c7e0:	4649      	mov	r1, r9
  40c7e2:	aa21      	add	r2, sp, #132	; 0x84
  40c7e4:	f7fe fb42 	bl	40ae6c <__sprint_r>
  40c7e8:	2800      	cmp	r0, #0
  40c7ea:	f47f aa8f 	bne.w	40bd0c <_vfprintf_r+0x200>
  40c7ee:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
  40c7f2:	ac2e      	add	r4, sp, #184	; 0xb8
  40c7f4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  40c7f6:	9910      	ldr	r1, [sp, #64]	; 0x40
  40c7f8:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
  40c7fa:	440a      	add	r2, r1
  40c7fc:	4616      	mov	r6, r2
  40c7fe:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40c800:	4293      	cmp	r3, r2
  40c802:	db3e      	blt.n	40c882 <_vfprintf_r+0xd76>
  40c804:	9a06      	ldr	r2, [sp, #24]
  40c806:	07d5      	lsls	r5, r2, #31
  40c808:	d43b      	bmi.n	40c882 <_vfprintf_r+0xd76>
  40c80a:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40c80c:	ebc6 050a 	rsb	r5, r6, sl
  40c810:	1ad3      	subs	r3, r2, r3
  40c812:	429d      	cmp	r5, r3
  40c814:	bfa8      	it	ge
  40c816:	461d      	movge	r5, r3
  40c818:	2d00      	cmp	r5, #0
  40c81a:	462f      	mov	r7, r5
  40c81c:	dd0b      	ble.n	40c836 <_vfprintf_r+0xd2a>
  40c81e:	9a22      	ldr	r2, [sp, #136]	; 0x88
  40c820:	6026      	str	r6, [r4, #0]
  40c822:	3201      	adds	r2, #1
  40c824:	44ab      	add	fp, r5
  40c826:	2a07      	cmp	r2, #7
  40c828:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
  40c82c:	6065      	str	r5, [r4, #4]
  40c82e:	9222      	str	r2, [sp, #136]	; 0x88
  40c830:	f300 825e 	bgt.w	40ccf0 <_vfprintf_r+0x11e4>
  40c834:	3408      	adds	r4, #8
  40c836:	2f00      	cmp	r7, #0
  40c838:	bfac      	ite	ge
  40c83a:	1bdd      	subge	r5, r3, r7
  40c83c:	461d      	movlt	r5, r3
  40c83e:	2d00      	cmp	r5, #0
  40c840:	f77f ab81 	ble.w	40bf46 <_vfprintf_r+0x43a>
  40c844:	2d10      	cmp	r5, #16
  40c846:	9b22      	ldr	r3, [sp, #136]	; 0x88
  40c848:	4f41      	ldr	r7, [pc, #260]	; (40c950 <_vfprintf_r+0xe44>)
  40c84a:	dd93      	ble.n	40c774 <_vfprintf_r+0xc68>
  40c84c:	2610      	movs	r6, #16
  40c84e:	465a      	mov	r2, fp
  40c850:	e003      	b.n	40c85a <_vfprintf_r+0xd4e>
  40c852:	3408      	adds	r4, #8
  40c854:	3d10      	subs	r5, #16
  40c856:	2d10      	cmp	r5, #16
  40c858:	dd8b      	ble.n	40c772 <_vfprintf_r+0xc66>
  40c85a:	3301      	adds	r3, #1
  40c85c:	3210      	adds	r2, #16
  40c85e:	2b07      	cmp	r3, #7
  40c860:	9223      	str	r2, [sp, #140]	; 0x8c
  40c862:	9322      	str	r3, [sp, #136]	; 0x88
  40c864:	6027      	str	r7, [r4, #0]
  40c866:	6066      	str	r6, [r4, #4]
  40c868:	ddf3      	ble.n	40c852 <_vfprintf_r+0xd46>
  40c86a:	4640      	mov	r0, r8
  40c86c:	4649      	mov	r1, r9
  40c86e:	aa21      	add	r2, sp, #132	; 0x84
  40c870:	f7fe fafc 	bl	40ae6c <__sprint_r>
  40c874:	2800      	cmp	r0, #0
  40c876:	f47f aa49 	bne.w	40bd0c <_vfprintf_r+0x200>
  40c87a:	9a23      	ldr	r2, [sp, #140]	; 0x8c
  40c87c:	9b22      	ldr	r3, [sp, #136]	; 0x88
  40c87e:	ac2e      	add	r4, sp, #184	; 0xb8
  40c880:	e7e8      	b.n	40c854 <_vfprintf_r+0xd48>
  40c882:	9a22      	ldr	r2, [sp, #136]	; 0x88
  40c884:	9816      	ldr	r0, [sp, #88]	; 0x58
  40c886:	9915      	ldr	r1, [sp, #84]	; 0x54
  40c888:	6021      	str	r1, [r4, #0]
  40c88a:	3201      	adds	r2, #1
  40c88c:	4483      	add	fp, r0
  40c88e:	2a07      	cmp	r2, #7
  40c890:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
  40c894:	6060      	str	r0, [r4, #4]
  40c896:	9222      	str	r2, [sp, #136]	; 0x88
  40c898:	f300 820a 	bgt.w	40ccb0 <_vfprintf_r+0x11a4>
  40c89c:	3408      	adds	r4, #8
  40c89e:	e7b4      	b.n	40c80a <_vfprintf_r+0xcfe>
  40c8a0:	9b06      	ldr	r3, [sp, #24]
  40c8a2:	07d8      	lsls	r0, r3, #31
  40c8a4:	f53f ae28 	bmi.w	40c4f8 <_vfprintf_r+0x9ec>
  40c8a8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  40c8aa:	6023      	str	r3, [r4, #0]
  40c8ac:	3501      	adds	r5, #1
  40c8ae:	f10b 0601 	add.w	r6, fp, #1
  40c8b2:	2301      	movs	r3, #1
  40c8b4:	2d07      	cmp	r5, #7
  40c8b6:	9623      	str	r6, [sp, #140]	; 0x8c
  40c8b8:	9522      	str	r5, [sp, #136]	; 0x88
  40c8ba:	6063      	str	r3, [r4, #4]
  40c8bc:	f77f ae4b 	ble.w	40c556 <_vfprintf_r+0xa4a>
  40c8c0:	4640      	mov	r0, r8
  40c8c2:	4649      	mov	r1, r9
  40c8c4:	aa21      	add	r2, sp, #132	; 0x84
  40c8c6:	f7fe fad1 	bl	40ae6c <__sprint_r>
  40c8ca:	2800      	cmp	r0, #0
  40c8cc:	f47f aa1e 	bne.w	40bd0c <_vfprintf_r+0x200>
  40c8d0:	9e23      	ldr	r6, [sp, #140]	; 0x8c
  40c8d2:	9d22      	ldr	r5, [sp, #136]	; 0x88
  40c8d4:	ac2e      	add	r4, sp, #184	; 0xb8
  40c8d6:	e63f      	b.n	40c558 <_vfprintf_r+0xa4c>
  40c8d8:	4640      	mov	r0, r8
  40c8da:	4649      	mov	r1, r9
  40c8dc:	aa21      	add	r2, sp, #132	; 0x84
  40c8de:	f7fe fac5 	bl	40ae6c <__sprint_r>
  40c8e2:	2800      	cmp	r0, #0
  40c8e4:	f47f aa12 	bne.w	40bd0c <_vfprintf_r+0x200>
  40c8e8:	9e23      	ldr	r6, [sp, #140]	; 0x8c
  40c8ea:	9d22      	ldr	r5, [sp, #136]	; 0x88
  40c8ec:	ac2e      	add	r4, sp, #184	; 0xb8
  40c8ee:	e610      	b.n	40c512 <_vfprintf_r+0xa06>
  40c8f0:	4640      	mov	r0, r8
  40c8f2:	4649      	mov	r1, r9
  40c8f4:	aa21      	add	r2, sp, #132	; 0x84
  40c8f6:	f7fe fab9 	bl	40ae6c <__sprint_r>
  40c8fa:	2800      	cmp	r0, #0
  40c8fc:	f47f aa06 	bne.w	40bd0c <_vfprintf_r+0x200>
  40c900:	9e23      	ldr	r6, [sp, #140]	; 0x8c
  40c902:	9d22      	ldr	r5, [sp, #136]	; 0x88
  40c904:	ac2e      	add	r4, sp, #184	; 0xb8
  40c906:	e610      	b.n	40c52a <_vfprintf_r+0xa1e>
  40c908:	3501      	adds	r5, #1
  40c90a:	4456      	add	r6, sl
  40c90c:	2d07      	cmp	r5, #7
  40c90e:	9623      	str	r6, [sp, #140]	; 0x8c
  40c910:	9522      	str	r5, [sp, #136]	; 0x88
  40c912:	e884 0480 	stmia.w	r4, {r7, sl}
  40c916:	f77f ae1e 	ble.w	40c556 <_vfprintf_r+0xa4a>
  40c91a:	e7d1      	b.n	40c8c0 <_vfprintf_r+0xdb4>
  40c91c:	4640      	mov	r0, r8
  40c91e:	4649      	mov	r1, r9
  40c920:	aa21      	add	r2, sp, #132	; 0x84
  40c922:	f7fe faa3 	bl	40ae6c <__sprint_r>
  40c926:	2800      	cmp	r0, #0
  40c928:	f47f a9f0 	bne.w	40bd0c <_vfprintf_r+0x200>
  40c92c:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
  40c930:	ac2e      	add	r4, sp, #184	; 0xb8
  40c932:	f7ff babc 	b.w	40beae <_vfprintf_r+0x3a2>
  40c936:	f04f 0c2d 	mov.w	ip, #45	; 0x2d
  40c93a:	4276      	negs	r6, r6
  40c93c:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
  40c940:	f88d c067 	strb.w	ip, [sp, #103]	; 0x67
  40c944:	f8cd a03c 	str.w	sl, [sp, #60]	; 0x3c
  40c948:	2301      	movs	r3, #1
  40c94a:	f7ff ba03 	b.w	40bd54 <_vfprintf_r+0x248>
  40c94e:	bf00      	nop
  40c950:	00411c60 	.word	0x00411c60
  40c954:	f001 ff9a 	bl	40e88c <__fpclassifyd>
  40c958:	2800      	cmp	r0, #0
  40c95a:	f000 810d 	beq.w	40cb78 <_vfprintf_r+0x106c>
  40c95e:	f025 0320 	bic.w	r3, r5, #32
  40c962:	f1b6 3fff 	cmp.w	r6, #4294967295
  40c966:	930b      	str	r3, [sp, #44]	; 0x2c
  40c968:	f000 8258 	beq.w	40ce1c <_vfprintf_r+0x1310>
  40c96c:	2b47      	cmp	r3, #71	; 0x47
  40c96e:	d104      	bne.n	40c97a <_vfprintf_r+0xe6e>
  40c970:	2e00      	cmp	r6, #0
  40c972:	bf14      	ite	ne
  40c974:	46b3      	movne	fp, r6
  40c976:	f04f 0b01 	moveq.w	fp, #1
  40c97a:	9b06      	ldr	r3, [sp, #24]
  40c97c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
  40c980:	930f      	str	r3, [sp, #60]	; 0x3c
  40c982:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  40c984:	f1b3 0a00 	subs.w	sl, r3, #0
  40c988:	9b12      	ldr	r3, [sp, #72]	; 0x48
  40c98a:	9307      	str	r3, [sp, #28]
  40c98c:	bfbb      	ittet	lt
  40c98e:	4653      	movlt	r3, sl
  40c990:	f103 4a00 	addlt.w	sl, r3, #2147483648	; 0x80000000
  40c994:	2300      	movge	r3, #0
  40c996:	232d      	movlt	r3, #45	; 0x2d
  40c998:	2d66      	cmp	r5, #102	; 0x66
  40c99a:	930d      	str	r3, [sp, #52]	; 0x34
  40c99c:	f000 8154 	beq.w	40cc48 <_vfprintf_r+0x113c>
  40c9a0:	2d46      	cmp	r5, #70	; 0x46
  40c9a2:	f000 8151 	beq.w	40cc48 <_vfprintf_r+0x113c>
  40c9a6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  40c9a8:	9a07      	ldr	r2, [sp, #28]
  40c9aa:	2b45      	cmp	r3, #69	; 0x45
  40c9ac:	bf0c      	ite	eq
  40c9ae:	f10b 0701 	addeq.w	r7, fp, #1
  40c9b2:	465f      	movne	r7, fp
  40c9b4:	2002      	movs	r0, #2
  40c9b6:	a91b      	add	r1, sp, #108	; 0x6c
  40c9b8:	e88d 0081 	stmia.w	sp, {r0, r7}
  40c9bc:	9102      	str	r1, [sp, #8]
  40c9be:	a81c      	add	r0, sp, #112	; 0x70
  40c9c0:	a91f      	add	r1, sp, #124	; 0x7c
  40c9c2:	9003      	str	r0, [sp, #12]
  40c9c4:	4653      	mov	r3, sl
  40c9c6:	9104      	str	r1, [sp, #16]
  40c9c8:	4640      	mov	r0, r8
  40c9ca:	f000 fc59 	bl	40d280 <_dtoa_r>
  40c9ce:	2d67      	cmp	r5, #103	; 0x67
  40c9d0:	900e      	str	r0, [sp, #56]	; 0x38
  40c9d2:	d002      	beq.n	40c9da <_vfprintf_r+0xece>
  40c9d4:	2d47      	cmp	r5, #71	; 0x47
  40c9d6:	f040 8147 	bne.w	40cc68 <_vfprintf_r+0x115c>
  40c9da:	9b06      	ldr	r3, [sp, #24]
  40c9dc:	07db      	lsls	r3, r3, #31
  40c9de:	f140 823a 	bpl.w	40ce56 <_vfprintf_r+0x134a>
  40c9e2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  40c9e4:	19de      	adds	r6, r3, r7
  40c9e6:	9807      	ldr	r0, [sp, #28]
  40c9e8:	4651      	mov	r1, sl
  40c9ea:	2200      	movs	r2, #0
  40c9ec:	2300      	movs	r3, #0
  40c9ee:	f7fb faed 	bl	407fcc <__aeabi_dcmpeq>
  40c9f2:	2800      	cmp	r0, #0
  40c9f4:	f040 81a3 	bne.w	40cd3e <_vfprintf_r+0x1232>
  40c9f8:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  40c9fa:	429e      	cmp	r6, r3
  40c9fc:	d906      	bls.n	40ca0c <_vfprintf_r+0xf00>
  40c9fe:	2130      	movs	r1, #48	; 0x30
  40ca00:	1c5a      	adds	r2, r3, #1
  40ca02:	921f      	str	r2, [sp, #124]	; 0x7c
  40ca04:	7019      	strb	r1, [r3, #0]
  40ca06:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  40ca08:	429e      	cmp	r6, r3
  40ca0a:	d8f9      	bhi.n	40ca00 <_vfprintf_r+0xef4>
  40ca0c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  40ca0e:	1a9b      	subs	r3, r3, r2
  40ca10:	9311      	str	r3, [sp, #68]	; 0x44
  40ca12:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  40ca14:	2b47      	cmp	r3, #71	; 0x47
  40ca16:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
  40ca18:	f000 8179 	beq.w	40cd0e <_vfprintf_r+0x1202>
  40ca1c:	2d65      	cmp	r5, #101	; 0x65
  40ca1e:	f340 819c 	ble.w	40cd5a <_vfprintf_r+0x124e>
  40ca22:	2d66      	cmp	r5, #102	; 0x66
  40ca24:	9310      	str	r3, [sp, #64]	; 0x40
  40ca26:	f000 8209 	beq.w	40ce3c <_vfprintf_r+0x1330>
  40ca2a:	9b11      	ldr	r3, [sp, #68]	; 0x44
  40ca2c:	9a10      	ldr	r2, [sp, #64]	; 0x40
  40ca2e:	4293      	cmp	r3, r2
  40ca30:	f300 81f7 	bgt.w	40ce22 <_vfprintf_r+0x1316>
  40ca34:	9b06      	ldr	r3, [sp, #24]
  40ca36:	07d9      	lsls	r1, r3, #31
  40ca38:	f100 8217 	bmi.w	40ce6a <_vfprintf_r+0x135e>
  40ca3c:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
  40ca40:	920b      	str	r2, [sp, #44]	; 0x2c
  40ca42:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  40ca44:	2a00      	cmp	r2, #0
  40ca46:	f040 8169 	bne.w	40cd1c <_vfprintf_r+0x1210>
  40ca4a:	9307      	str	r3, [sp, #28]
  40ca4c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  40ca4e:	9306      	str	r3, [sp, #24]
  40ca50:	920f      	str	r2, [sp, #60]	; 0x3c
  40ca52:	f89d c067 	ldrb.w	ip, [sp, #103]	; 0x67
  40ca56:	f7ff b9b1 	b.w	40bdbc <_vfprintf_r+0x2b0>
  40ca5a:	9b06      	ldr	r3, [sp, #24]
  40ca5c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  40ca5e:	f013 0f40 	tst.w	r3, #64	; 0x40
  40ca62:	4613      	mov	r3, r2
  40ca64:	f43f ac84 	beq.w	40c370 <_vfprintf_r+0x864>
  40ca68:	8816      	ldrh	r6, [r2, #0]
  40ca6a:	3204      	adds	r2, #4
  40ca6c:	2700      	movs	r7, #0
  40ca6e:	2301      	movs	r3, #1
  40ca70:	920c      	str	r2, [sp, #48]	; 0x30
  40ca72:	f7ff b969 	b.w	40bd48 <_vfprintf_r+0x23c>
  40ca76:	9b06      	ldr	r3, [sp, #24]
  40ca78:	06db      	lsls	r3, r3, #27
  40ca7a:	d40b      	bmi.n	40ca94 <_vfprintf_r+0xf88>
  40ca7c:	9b06      	ldr	r3, [sp, #24]
  40ca7e:	065f      	lsls	r7, r3, #25
  40ca80:	d508      	bpl.n	40ca94 <_vfprintf_r+0xf88>
  40ca82:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  40ca84:	6813      	ldr	r3, [r2, #0]
  40ca86:	3204      	adds	r2, #4
  40ca88:	920c      	str	r2, [sp, #48]	; 0x30
  40ca8a:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
  40ca8e:	801a      	strh	r2, [r3, #0]
  40ca90:	f7ff b87d 	b.w	40bb8e <_vfprintf_r+0x82>
  40ca94:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  40ca96:	6813      	ldr	r3, [r2, #0]
  40ca98:	3204      	adds	r2, #4
  40ca9a:	920c      	str	r2, [sp, #48]	; 0x30
  40ca9c:	9a09      	ldr	r2, [sp, #36]	; 0x24
  40ca9e:	601a      	str	r2, [r3, #0]
  40caa0:	f7ff b875 	b.w	40bb8e <_vfprintf_r+0x82>
  40caa4:	9b06      	ldr	r3, [sp, #24]
  40caa6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  40caa8:	f013 0f40 	tst.w	r3, #64	; 0x40
  40caac:	4613      	mov	r3, r2
  40caae:	d076      	beq.n	40cb9e <_vfprintf_r+0x1092>
  40cab0:	3304      	adds	r3, #4
  40cab2:	8816      	ldrh	r6, [r2, #0]
  40cab4:	930c      	str	r3, [sp, #48]	; 0x30
  40cab6:	2700      	movs	r7, #0
  40cab8:	f7ff bae4 	b.w	40c084 <_vfprintf_r+0x578>
  40cabc:	4693      	mov	fp, r2
  40cabe:	3301      	adds	r3, #1
  40cac0:	44ab      	add	fp, r5
  40cac2:	2b07      	cmp	r3, #7
  40cac4:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
  40cac8:	9322      	str	r3, [sp, #136]	; 0x88
  40caca:	6027      	str	r7, [r4, #0]
  40cacc:	6065      	str	r5, [r4, #4]
  40cace:	f73f ae86 	bgt.w	40c7de <_vfprintf_r+0xcd2>
  40cad2:	3408      	adds	r4, #8
  40cad4:	e68e      	b.n	40c7f4 <_vfprintf_r+0xce8>
  40cad6:	4640      	mov	r0, r8
  40cad8:	4649      	mov	r1, r9
  40cada:	aa21      	add	r2, sp, #132	; 0x84
  40cadc:	f7fe f9c6 	bl	40ae6c <__sprint_r>
  40cae0:	2800      	cmp	r0, #0
  40cae2:	f47f a913 	bne.w	40bd0c <_vfprintf_r+0x200>
  40cae6:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
  40caea:	ac2e      	add	r4, sp, #184	; 0xb8
  40caec:	e48d      	b.n	40c40a <_vfprintf_r+0x8fe>
  40caee:	9b22      	ldr	r3, [sp, #136]	; 0x88
  40caf0:	4ab0      	ldr	r2, [pc, #704]	; (40cdb4 <_vfprintf_r+0x12a8>)
  40caf2:	6022      	str	r2, [r4, #0]
  40caf4:	3301      	adds	r3, #1
  40caf6:	f10b 0b01 	add.w	fp, fp, #1
  40cafa:	2201      	movs	r2, #1
  40cafc:	2b07      	cmp	r3, #7
  40cafe:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
  40cb02:	9322      	str	r3, [sp, #136]	; 0x88
  40cb04:	6062      	str	r2, [r4, #4]
  40cb06:	dc50      	bgt.n	40cbaa <_vfprintf_r+0x109e>
  40cb08:	3408      	adds	r4, #8
  40cb0a:	b92d      	cbnz	r5, 40cb18 <_vfprintf_r+0x100c>
  40cb0c:	9b11      	ldr	r3, [sp, #68]	; 0x44
  40cb0e:	b91b      	cbnz	r3, 40cb18 <_vfprintf_r+0x100c>
  40cb10:	9b06      	ldr	r3, [sp, #24]
  40cb12:	07de      	lsls	r6, r3, #31
  40cb14:	f57f aa17 	bpl.w	40bf46 <_vfprintf_r+0x43a>
  40cb18:	9b22      	ldr	r3, [sp, #136]	; 0x88
  40cb1a:	9916      	ldr	r1, [sp, #88]	; 0x58
  40cb1c:	9a15      	ldr	r2, [sp, #84]	; 0x54
  40cb1e:	6022      	str	r2, [r4, #0]
  40cb20:	3301      	adds	r3, #1
  40cb22:	eb0b 0201 	add.w	r2, fp, r1
  40cb26:	2b07      	cmp	r3, #7
  40cb28:	9223      	str	r2, [sp, #140]	; 0x8c
  40cb2a:	6061      	str	r1, [r4, #4]
  40cb2c:	9322      	str	r3, [sp, #136]	; 0x88
  40cb2e:	f300 8168 	bgt.w	40ce02 <_vfprintf_r+0x12f6>
  40cb32:	3408      	adds	r4, #8
  40cb34:	426d      	negs	r5, r5
  40cb36:	2d00      	cmp	r5, #0
  40cb38:	dd6f      	ble.n	40cc1a <_vfprintf_r+0x110e>
  40cb3a:	2d10      	cmp	r5, #16
  40cb3c:	4f9e      	ldr	r7, [pc, #632]	; (40cdb8 <_vfprintf_r+0x12ac>)
  40cb3e:	bfc8      	it	gt
  40cb40:	2610      	movgt	r6, #16
  40cb42:	dc05      	bgt.n	40cb50 <_vfprintf_r+0x1044>
  40cb44:	e0aa      	b.n	40cc9c <_vfprintf_r+0x1190>
  40cb46:	3408      	adds	r4, #8
  40cb48:	3d10      	subs	r5, #16
  40cb4a:	2d10      	cmp	r5, #16
  40cb4c:	f340 80a6 	ble.w	40cc9c <_vfprintf_r+0x1190>
  40cb50:	3301      	adds	r3, #1
  40cb52:	3210      	adds	r2, #16
  40cb54:	2b07      	cmp	r3, #7
  40cb56:	9223      	str	r2, [sp, #140]	; 0x8c
  40cb58:	9322      	str	r3, [sp, #136]	; 0x88
  40cb5a:	6027      	str	r7, [r4, #0]
  40cb5c:	6066      	str	r6, [r4, #4]
  40cb5e:	ddf2      	ble.n	40cb46 <_vfprintf_r+0x103a>
  40cb60:	4640      	mov	r0, r8
  40cb62:	4649      	mov	r1, r9
  40cb64:	aa21      	add	r2, sp, #132	; 0x84
  40cb66:	f7fe f981 	bl	40ae6c <__sprint_r>
  40cb6a:	2800      	cmp	r0, #0
  40cb6c:	f47f a8ce 	bne.w	40bd0c <_vfprintf_r+0x200>
  40cb70:	9a23      	ldr	r2, [sp, #140]	; 0x8c
  40cb72:	9b22      	ldr	r3, [sp, #136]	; 0x88
  40cb74:	ac2e      	add	r4, sp, #184	; 0xb8
  40cb76:	e7e7      	b.n	40cb48 <_vfprintf_r+0x103c>
  40cb78:	9e06      	ldr	r6, [sp, #24]
  40cb7a:	4a90      	ldr	r2, [pc, #576]	; (40cdbc <_vfprintf_r+0x12b0>)
  40cb7c:	4b90      	ldr	r3, [pc, #576]	; (40cdc0 <_vfprintf_r+0x12b4>)
  40cb7e:	f89d c067 	ldrb.w	ip, [sp, #103]	; 0x67
  40cb82:	900f      	str	r0, [sp, #60]	; 0x3c
  40cb84:	2103      	movs	r1, #3
  40cb86:	f026 0680 	bic.w	r6, r6, #128	; 0x80
  40cb8a:	2d47      	cmp	r5, #71	; 0x47
  40cb8c:	bfd8      	it	le
  40cb8e:	461a      	movle	r2, r3
  40cb90:	9107      	str	r1, [sp, #28]
  40cb92:	9606      	str	r6, [sp, #24]
  40cb94:	9010      	str	r0, [sp, #64]	; 0x40
  40cb96:	920e      	str	r2, [sp, #56]	; 0x38
  40cb98:	910b      	str	r1, [sp, #44]	; 0x2c
  40cb9a:	f7ff b90f 	b.w	40bdbc <_vfprintf_r+0x2b0>
  40cb9e:	3304      	adds	r3, #4
  40cba0:	6816      	ldr	r6, [r2, #0]
  40cba2:	930c      	str	r3, [sp, #48]	; 0x30
  40cba4:	2700      	movs	r7, #0
  40cba6:	f7ff ba6d 	b.w	40c084 <_vfprintf_r+0x578>
  40cbaa:	4640      	mov	r0, r8
  40cbac:	4649      	mov	r1, r9
  40cbae:	aa21      	add	r2, sp, #132	; 0x84
  40cbb0:	f7fe f95c 	bl	40ae6c <__sprint_r>
  40cbb4:	2800      	cmp	r0, #0
  40cbb6:	f47f a8a9 	bne.w	40bd0c <_vfprintf_r+0x200>
  40cbba:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
  40cbbc:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
  40cbc0:	ac2e      	add	r4, sp, #184	; 0xb8
  40cbc2:	e7a2      	b.n	40cb0a <_vfprintf_r+0xffe>
  40cbc4:	f041 0120 	orr.w	r1, r1, #32
  40cbc8:	9106      	str	r1, [sp, #24]
  40cbca:	785d      	ldrb	r5, [r3, #1]
  40cbcc:	1c59      	adds	r1, r3, #1
  40cbce:	f7ff b80e 	b.w	40bbee <_vfprintf_r+0xe2>
  40cbd2:	980a      	ldr	r0, [sp, #40]	; 0x28
  40cbd4:	910c      	str	r1, [sp, #48]	; 0x30
  40cbd6:	4240      	negs	r0, r0
  40cbd8:	900a      	str	r0, [sp, #40]	; 0x28
  40cbda:	4619      	mov	r1, r3
  40cbdc:	f7ff ba02 	b.w	40bfe4 <_vfprintf_r+0x4d8>
  40cbe0:	4640      	mov	r0, r8
  40cbe2:	4649      	mov	r1, r9
  40cbe4:	aa21      	add	r2, sp, #132	; 0x84
  40cbe6:	f7fe f941 	bl	40ae6c <__sprint_r>
  40cbea:	2800      	cmp	r0, #0
  40cbec:	f47f a88e 	bne.w	40bd0c <_vfprintf_r+0x200>
  40cbf0:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
  40cbf4:	ac2e      	add	r4, sp, #184	; 0xb8
  40cbf6:	e41e      	b.n	40c436 <_vfprintf_r+0x92a>
  40cbf8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  40cbfa:	ab2e      	add	r3, sp, #184	; 0xb8
  40cbfc:	1a9b      	subs	r3, r3, r2
  40cbfe:	930b      	str	r3, [sp, #44]	; 0x2c
  40cc00:	f7ff b8d4 	b.w	40bdac <_vfprintf_r+0x2a0>
  40cc04:	4640      	mov	r0, r8
  40cc06:	4649      	mov	r1, r9
  40cc08:	aa21      	add	r2, sp, #132	; 0x84
  40cc0a:	f7fe f92f 	bl	40ae6c <__sprint_r>
  40cc0e:	2800      	cmp	r0, #0
  40cc10:	f47f a87c 	bne.w	40bd0c <_vfprintf_r+0x200>
  40cc14:	9a23      	ldr	r2, [sp, #140]	; 0x8c
  40cc16:	9b22      	ldr	r3, [sp, #136]	; 0x88
  40cc18:	ac2e      	add	r4, sp, #184	; 0xb8
  40cc1a:	9811      	ldr	r0, [sp, #68]	; 0x44
  40cc1c:	6060      	str	r0, [r4, #4]
  40cc1e:	3301      	adds	r3, #1
  40cc20:	eb02 0b00 	add.w	fp, r2, r0
  40cc24:	2b07      	cmp	r3, #7
  40cc26:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  40cc28:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
  40cc2c:	9322      	str	r3, [sp, #136]	; 0x88
  40cc2e:	6022      	str	r2, [r4, #0]
  40cc30:	f77f a988 	ble.w	40bf44 <_vfprintf_r+0x438>
  40cc34:	e49d      	b.n	40c572 <_vfprintf_r+0xa66>
  40cc36:	f8cd b03c 	str.w	fp, [sp, #60]	; 0x3c
  40cc3a:	f7fc fe63 	bl	409904 <strlen>
  40cc3e:	970c      	str	r7, [sp, #48]	; 0x30
  40cc40:	900b      	str	r0, [sp, #44]	; 0x2c
  40cc42:	4603      	mov	r3, r0
  40cc44:	f7ff ba03 	b.w	40c04e <_vfprintf_r+0x542>
  40cc48:	2003      	movs	r0, #3
  40cc4a:	a91b      	add	r1, sp, #108	; 0x6c
  40cc4c:	e88d 0801 	stmia.w	sp, {r0, fp}
  40cc50:	9102      	str	r1, [sp, #8]
  40cc52:	a81c      	add	r0, sp, #112	; 0x70
  40cc54:	a91f      	add	r1, sp, #124	; 0x7c
  40cc56:	9003      	str	r0, [sp, #12]
  40cc58:	9a07      	ldr	r2, [sp, #28]
  40cc5a:	9104      	str	r1, [sp, #16]
  40cc5c:	4653      	mov	r3, sl
  40cc5e:	4640      	mov	r0, r8
  40cc60:	f000 fb0e 	bl	40d280 <_dtoa_r>
  40cc64:	465f      	mov	r7, fp
  40cc66:	900e      	str	r0, [sp, #56]	; 0x38
  40cc68:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  40cc6a:	19de      	adds	r6, r3, r7
  40cc6c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  40cc6e:	2b46      	cmp	r3, #70	; 0x46
  40cc70:	f47f aeb9 	bne.w	40c9e6 <_vfprintf_r+0xeda>
  40cc74:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  40cc76:	781b      	ldrb	r3, [r3, #0]
  40cc78:	2b30      	cmp	r3, #48	; 0x30
  40cc7a:	f000 80fc 	beq.w	40ce76 <_vfprintf_r+0x136a>
  40cc7e:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
  40cc80:	443e      	add	r6, r7
  40cc82:	e6b0      	b.n	40c9e6 <_vfprintf_r+0xeda>
  40cc84:	4640      	mov	r0, r8
  40cc86:	4649      	mov	r1, r9
  40cc88:	aa21      	add	r2, sp, #132	; 0x84
  40cc8a:	f7fe f8ef 	bl	40ae6c <__sprint_r>
  40cc8e:	2800      	cmp	r0, #0
  40cc90:	f47f a83c 	bne.w	40bd0c <_vfprintf_r+0x200>
  40cc94:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
  40cc98:	ac2e      	add	r4, sp, #184	; 0xb8
  40cc9a:	e4f4      	b.n	40c686 <_vfprintf_r+0xb7a>
  40cc9c:	3301      	adds	r3, #1
  40cc9e:	442a      	add	r2, r5
  40cca0:	2b07      	cmp	r3, #7
  40cca2:	9223      	str	r2, [sp, #140]	; 0x8c
  40cca4:	9322      	str	r3, [sp, #136]	; 0x88
  40cca6:	6027      	str	r7, [r4, #0]
  40cca8:	6065      	str	r5, [r4, #4]
  40ccaa:	dcab      	bgt.n	40cc04 <_vfprintf_r+0x10f8>
  40ccac:	3408      	adds	r4, #8
  40ccae:	e7b4      	b.n	40cc1a <_vfprintf_r+0x110e>
  40ccb0:	4640      	mov	r0, r8
  40ccb2:	4649      	mov	r1, r9
  40ccb4:	aa21      	add	r2, sp, #132	; 0x84
  40ccb6:	f7fe f8d9 	bl	40ae6c <__sprint_r>
  40ccba:	2800      	cmp	r0, #0
  40ccbc:	f47f a826 	bne.w	40bd0c <_vfprintf_r+0x200>
  40ccc0:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
  40ccc2:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
  40ccc6:	ac2e      	add	r4, sp, #184	; 0xb8
  40ccc8:	e59f      	b.n	40c80a <_vfprintf_r+0xcfe>
  40ccca:	2e06      	cmp	r6, #6
  40cccc:	4633      	mov	r3, r6
  40ccce:	bf28      	it	cs
  40ccd0:	2306      	movcs	r3, #6
  40ccd2:	930b      	str	r3, [sp, #44]	; 0x2c
  40ccd4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  40ccd8:	f8dd c038 	ldr.w	ip, [sp, #56]	; 0x38
  40ccdc:	9307      	str	r3, [sp, #28]
  40ccde:	4b39      	ldr	r3, [pc, #228]	; (40cdc4 <_vfprintf_r+0x12b8>)
  40cce0:	970c      	str	r7, [sp, #48]	; 0x30
  40cce2:	f8cd c03c 	str.w	ip, [sp, #60]	; 0x3c
  40cce6:	f8cd c040 	str.w	ip, [sp, #64]	; 0x40
  40ccea:	930e      	str	r3, [sp, #56]	; 0x38
  40ccec:	f7ff b866 	b.w	40bdbc <_vfprintf_r+0x2b0>
  40ccf0:	4640      	mov	r0, r8
  40ccf2:	4649      	mov	r1, r9
  40ccf4:	aa21      	add	r2, sp, #132	; 0x84
  40ccf6:	f7fe f8b9 	bl	40ae6c <__sprint_r>
  40ccfa:	2800      	cmp	r0, #0
  40ccfc:	f47f a806 	bne.w	40bd0c <_vfprintf_r+0x200>
  40cd00:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
  40cd02:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40cd04:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
  40cd08:	1ad3      	subs	r3, r2, r3
  40cd0a:	ac2e      	add	r4, sp, #184	; 0xb8
  40cd0c:	e593      	b.n	40c836 <_vfprintf_r+0xd2a>
  40cd0e:	1cdf      	adds	r7, r3, #3
  40cd10:	db22      	blt.n	40cd58 <_vfprintf_r+0x124c>
  40cd12:	459b      	cmp	fp, r3
  40cd14:	db20      	blt.n	40cd58 <_vfprintf_r+0x124c>
  40cd16:	9310      	str	r3, [sp, #64]	; 0x40
  40cd18:	2567      	movs	r5, #103	; 0x67
  40cd1a:	e686      	b.n	40ca2a <_vfprintf_r+0xf1e>
  40cd1c:	9307      	str	r3, [sp, #28]
  40cd1e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  40cd20:	9306      	str	r3, [sp, #24]
  40cd22:	f04f 0c2d 	mov.w	ip, #45	; 0x2d
  40cd26:	2300      	movs	r3, #0
  40cd28:	f88d c067 	strb.w	ip, [sp, #103]	; 0x67
  40cd2c:	930f      	str	r3, [sp, #60]	; 0x3c
  40cd2e:	f7ff b848 	b.w	40bdc2 <_vfprintf_r+0x2b6>
  40cd32:	f04f 0c2d 	mov.w	ip, #45	; 0x2d
  40cd36:	f88d c067 	strb.w	ip, [sp, #103]	; 0x67
  40cd3a:	f7ff ba0e 	b.w	40c15a <_vfprintf_r+0x64e>
  40cd3e:	4633      	mov	r3, r6
  40cd40:	e664      	b.n	40ca0c <_vfprintf_r+0xf00>
  40cd42:	ea26 73e6 	bic.w	r3, r6, r6, asr #31
  40cd46:	900f      	str	r0, [sp, #60]	; 0x3c
  40cd48:	970c      	str	r7, [sp, #48]	; 0x30
  40cd4a:	9010      	str	r0, [sp, #64]	; 0x40
  40cd4c:	f89d c067 	ldrb.w	ip, [sp, #103]	; 0x67
  40cd50:	9307      	str	r3, [sp, #28]
  40cd52:	960b      	str	r6, [sp, #44]	; 0x2c
  40cd54:	f7ff b832 	b.w	40bdbc <_vfprintf_r+0x2b0>
  40cd58:	3d02      	subs	r5, #2
  40cd5a:	3b01      	subs	r3, #1
  40cd5c:	2b00      	cmp	r3, #0
  40cd5e:	931b      	str	r3, [sp, #108]	; 0x6c
  40cd60:	bfba      	itte	lt
  40cd62:	425b      	neglt	r3, r3
  40cd64:	222d      	movlt	r2, #45	; 0x2d
  40cd66:	222b      	movge	r2, #43	; 0x2b
  40cd68:	2b09      	cmp	r3, #9
  40cd6a:	f88d 5074 	strb.w	r5, [sp, #116]	; 0x74
  40cd6e:	f88d 2075 	strb.w	r2, [sp, #117]	; 0x75
  40cd72:	dd72      	ble.n	40ce5a <_vfprintf_r+0x134e>
  40cd74:	f10d 0683 	add.w	r6, sp, #131	; 0x83
  40cd78:	4630      	mov	r0, r6
  40cd7a:	4a13      	ldr	r2, [pc, #76]	; (40cdc8 <_vfprintf_r+0x12bc>)
  40cd7c:	fb82 2103 	smull	r2, r1, r2, r3
  40cd80:	17da      	asrs	r2, r3, #31
  40cd82:	ebc2 02a1 	rsb	r2, r2, r1, asr #2
  40cd86:	eb02 0182 	add.w	r1, r2, r2, lsl #2
  40cd8a:	eba3 0341 	sub.w	r3, r3, r1, lsl #1
  40cd8e:	f103 0130 	add.w	r1, r3, #48	; 0x30
  40cd92:	2a09      	cmp	r2, #9
  40cd94:	4613      	mov	r3, r2
  40cd96:	f800 1d01 	strb.w	r1, [r0, #-1]!
  40cd9a:	dcee      	bgt.n	40cd7a <_vfprintf_r+0x126e>
  40cd9c:	4602      	mov	r2, r0
  40cd9e:	3330      	adds	r3, #48	; 0x30
  40cda0:	b2d9      	uxtb	r1, r3
  40cda2:	f802 1d01 	strb.w	r1, [r2, #-1]!
  40cda6:	4296      	cmp	r6, r2
  40cda8:	f240 80a0 	bls.w	40ceec <_vfprintf_r+0x13e0>
  40cdac:	f10d 0276 	add.w	r2, sp, #118	; 0x76
  40cdb0:	4603      	mov	r3, r0
  40cdb2:	e00d      	b.n	40cdd0 <_vfprintf_r+0x12c4>
  40cdb4:	004119fc 	.word	0x004119fc
  40cdb8:	00411c60 	.word	0x00411c60
  40cdbc:	00411c0c 	.word	0x00411c0c
  40cdc0:	00411c08 	.word	0x00411c08
  40cdc4:	00411c38 	.word	0x00411c38
  40cdc8:	66666667 	.word	0x66666667
  40cdcc:	f813 1b01 	ldrb.w	r1, [r3], #1
  40cdd0:	f802 1b01 	strb.w	r1, [r2], #1
  40cdd4:	42b3      	cmp	r3, r6
  40cdd6:	d1f9      	bne.n	40cdcc <_vfprintf_r+0x12c0>
  40cdd8:	ab21      	add	r3, sp, #132	; 0x84
  40cdda:	1a1b      	subs	r3, r3, r0
  40cddc:	f10d 0276 	add.w	r2, sp, #118	; 0x76
  40cde0:	4413      	add	r3, r2
  40cde2:	aa1d      	add	r2, sp, #116	; 0x74
  40cde4:	1a9b      	subs	r3, r3, r2
  40cde6:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40cde8:	9317      	str	r3, [sp, #92]	; 0x5c
  40cdea:	2a01      	cmp	r2, #1
  40cdec:	4413      	add	r3, r2
  40cdee:	930b      	str	r3, [sp, #44]	; 0x2c
  40cdf0:	dd6d      	ble.n	40cece <_vfprintf_r+0x13c2>
  40cdf2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  40cdf4:	2200      	movs	r2, #0
  40cdf6:	3301      	adds	r3, #1
  40cdf8:	930b      	str	r3, [sp, #44]	; 0x2c
  40cdfa:	9210      	str	r2, [sp, #64]	; 0x40
  40cdfc:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  40ce00:	e61f      	b.n	40ca42 <_vfprintf_r+0xf36>
  40ce02:	4640      	mov	r0, r8
  40ce04:	4649      	mov	r1, r9
  40ce06:	aa21      	add	r2, sp, #132	; 0x84
  40ce08:	f7fe f830 	bl	40ae6c <__sprint_r>
  40ce0c:	2800      	cmp	r0, #0
  40ce0e:	f47e af7d 	bne.w	40bd0c <_vfprintf_r+0x200>
  40ce12:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
  40ce14:	9a23      	ldr	r2, [sp, #140]	; 0x8c
  40ce16:	9b22      	ldr	r3, [sp, #136]	; 0x88
  40ce18:	ac2e      	add	r4, sp, #184	; 0xb8
  40ce1a:	e68b      	b.n	40cb34 <_vfprintf_r+0x1028>
  40ce1c:	f04f 0b06 	mov.w	fp, #6
  40ce20:	e5ab      	b.n	40c97a <_vfprintf_r+0xe6e>
  40ce22:	9b10      	ldr	r3, [sp, #64]	; 0x40
  40ce24:	2b00      	cmp	r3, #0
  40ce26:	bfd8      	it	le
  40ce28:	f1c3 0602 	rsble	r6, r3, #2
  40ce2c:	9b11      	ldr	r3, [sp, #68]	; 0x44
  40ce2e:	bfc8      	it	gt
  40ce30:	2601      	movgt	r6, #1
  40ce32:	18f3      	adds	r3, r6, r3
  40ce34:	930b      	str	r3, [sp, #44]	; 0x2c
  40ce36:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  40ce3a:	e602      	b.n	40ca42 <_vfprintf_r+0xf36>
  40ce3c:	2b00      	cmp	r3, #0
  40ce3e:	dd30      	ble.n	40cea2 <_vfprintf_r+0x1396>
  40ce40:	f1bb 0f00 	cmp.w	fp, #0
  40ce44:	d125      	bne.n	40ce92 <_vfprintf_r+0x1386>
  40ce46:	9b06      	ldr	r3, [sp, #24]
  40ce48:	07de      	lsls	r6, r3, #31
  40ce4a:	d422      	bmi.n	40ce92 <_vfprintf_r+0x1386>
  40ce4c:	9a10      	ldr	r2, [sp, #64]	; 0x40
  40ce4e:	920b      	str	r2, [sp, #44]	; 0x2c
  40ce50:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
  40ce54:	e5f5      	b.n	40ca42 <_vfprintf_r+0xf36>
  40ce56:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  40ce58:	e5d8      	b.n	40ca0c <_vfprintf_r+0xf00>
  40ce5a:	3330      	adds	r3, #48	; 0x30
  40ce5c:	2230      	movs	r2, #48	; 0x30
  40ce5e:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
  40ce62:	f88d 2076 	strb.w	r2, [sp, #118]	; 0x76
  40ce66:	ab1e      	add	r3, sp, #120	; 0x78
  40ce68:	e7bb      	b.n	40cde2 <_vfprintf_r+0x12d6>
  40ce6a:	9b10      	ldr	r3, [sp, #64]	; 0x40
  40ce6c:	3301      	adds	r3, #1
  40ce6e:	930b      	str	r3, [sp, #44]	; 0x2c
  40ce70:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  40ce74:	e5e5      	b.n	40ca42 <_vfprintf_r+0xf36>
  40ce76:	9807      	ldr	r0, [sp, #28]
  40ce78:	4651      	mov	r1, sl
  40ce7a:	2200      	movs	r2, #0
  40ce7c:	2300      	movs	r3, #0
  40ce7e:	f7fb f8a5 	bl	407fcc <__aeabi_dcmpeq>
  40ce82:	2800      	cmp	r0, #0
  40ce84:	f47f aefb 	bne.w	40cc7e <_vfprintf_r+0x1172>
  40ce88:	f1c7 0701 	rsb	r7, r7, #1
  40ce8c:	971b      	str	r7, [sp, #108]	; 0x6c
  40ce8e:	443e      	add	r6, r7
  40ce90:	e5a9      	b.n	40c9e6 <_vfprintf_r+0xeda>
  40ce92:	9b10      	ldr	r3, [sp, #64]	; 0x40
  40ce94:	f10b 0601 	add.w	r6, fp, #1
  40ce98:	4433      	add	r3, r6
  40ce9a:	930b      	str	r3, [sp, #44]	; 0x2c
  40ce9c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  40cea0:	e5cf      	b.n	40ca42 <_vfprintf_r+0xf36>
  40cea2:	f1bb 0f00 	cmp.w	fp, #0
  40cea6:	d11b      	bne.n	40cee0 <_vfprintf_r+0x13d4>
  40cea8:	9b06      	ldr	r3, [sp, #24]
  40ceaa:	07d8      	lsls	r0, r3, #31
  40ceac:	d418      	bmi.n	40cee0 <_vfprintf_r+0x13d4>
  40ceae:	2301      	movs	r3, #1
  40ceb0:	930b      	str	r3, [sp, #44]	; 0x2c
  40ceb2:	e5c6      	b.n	40ca42 <_vfprintf_r+0xf36>
  40ceb4:	9d0c      	ldr	r5, [sp, #48]	; 0x30
  40ceb6:	682e      	ldr	r6, [r5, #0]
  40ceb8:	4628      	mov	r0, r5
  40ceba:	3004      	adds	r0, #4
  40cebc:	2e00      	cmp	r6, #0
  40cebe:	785d      	ldrb	r5, [r3, #1]
  40cec0:	900c      	str	r0, [sp, #48]	; 0x30
  40cec2:	f6be ae94 	bge.w	40bbee <_vfprintf_r+0xe2>
  40cec6:	f04f 36ff 	mov.w	r6, #4294967295
  40ceca:	f7fe be90 	b.w	40bbee <_vfprintf_r+0xe2>
  40cece:	9b06      	ldr	r3, [sp, #24]
  40ced0:	f013 0301 	ands.w	r3, r3, #1
  40ced4:	d18d      	bne.n	40cdf2 <_vfprintf_r+0x12e6>
  40ced6:	9310      	str	r3, [sp, #64]	; 0x40
  40ced8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  40ceda:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  40cede:	e5b0      	b.n	40ca42 <_vfprintf_r+0xf36>
  40cee0:	f10b 0302 	add.w	r3, fp, #2
  40cee4:	930b      	str	r3, [sp, #44]	; 0x2c
  40cee6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  40ceea:	e5aa      	b.n	40ca42 <_vfprintf_r+0xf36>
  40ceec:	f10d 0376 	add.w	r3, sp, #118	; 0x76
  40cef0:	e777      	b.n	40cde2 <_vfprintf_r+0x12d6>
  40cef2:	bf00      	nop

0040cef4 <__sbprintf>:
  40cef4:	e92d 42f0 	stmdb	sp!, {r4, r5, r6, r7, r9, lr}
  40cef8:	460c      	mov	r4, r1
  40cefa:	f5ad 6d8d 	sub.w	sp, sp, #1128	; 0x468
  40cefe:	f8b1 e00c 	ldrh.w	lr, [r1, #12]
  40cf02:	69e7      	ldr	r7, [r4, #28]
  40cf04:	6e49      	ldr	r1, [r1, #100]	; 0x64
  40cf06:	f8b4 900e 	ldrh.w	r9, [r4, #14]
  40cf0a:	9119      	str	r1, [sp, #100]	; 0x64
  40cf0c:	ad1a      	add	r5, sp, #104	; 0x68
  40cf0e:	f44f 6680 	mov.w	r6, #1024	; 0x400
  40cf12:	f02e 0e02 	bic.w	lr, lr, #2
  40cf16:	f04f 0c00 	mov.w	ip, #0
  40cf1a:	9707      	str	r7, [sp, #28]
  40cf1c:	4669      	mov	r1, sp
  40cf1e:	6a67      	ldr	r7, [r4, #36]	; 0x24
  40cf20:	9500      	str	r5, [sp, #0]
  40cf22:	9504      	str	r5, [sp, #16]
  40cf24:	9602      	str	r6, [sp, #8]
  40cf26:	9605      	str	r6, [sp, #20]
  40cf28:	f8ad e00c 	strh.w	lr, [sp, #12]
  40cf2c:	f8ad 900e 	strh.w	r9, [sp, #14]
  40cf30:	9709      	str	r7, [sp, #36]	; 0x24
  40cf32:	f8cd c018 	str.w	ip, [sp, #24]
  40cf36:	4606      	mov	r6, r0
  40cf38:	f7fe fde8 	bl	40bb0c <_vfprintf_r>
  40cf3c:	1e05      	subs	r5, r0, #0
  40cf3e:	db07      	blt.n	40cf50 <__sbprintf+0x5c>
  40cf40:	4630      	mov	r0, r6
  40cf42:	4669      	mov	r1, sp
  40cf44:	f7fb f97e 	bl	408244 <_fflush_r>
  40cf48:	2800      	cmp	r0, #0
  40cf4a:	bf18      	it	ne
  40cf4c:	f04f 35ff 	movne.w	r5, #4294967295
  40cf50:	f8bd 300c 	ldrh.w	r3, [sp, #12]
  40cf54:	065b      	lsls	r3, r3, #25
  40cf56:	d503      	bpl.n	40cf60 <__sbprintf+0x6c>
  40cf58:	89a3      	ldrh	r3, [r4, #12]
  40cf5a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40cf5e:	81a3      	strh	r3, [r4, #12]
  40cf60:	4628      	mov	r0, r5
  40cf62:	f50d 6d8d 	add.w	sp, sp, #1128	; 0x468
  40cf66:	e8bd 82f0 	ldmia.w	sp!, {r4, r5, r6, r7, r9, pc}
  40cf6a:	bf00      	nop

0040cf6c <__swbuf_r>:
  40cf6c:	b570      	push	{r4, r5, r6, lr}
  40cf6e:	460d      	mov	r5, r1
  40cf70:	4614      	mov	r4, r2
  40cf72:	4606      	mov	r6, r0
  40cf74:	b110      	cbz	r0, 40cf7c <__swbuf_r+0x10>
  40cf76:	6b83      	ldr	r3, [r0, #56]	; 0x38
  40cf78:	2b00      	cmp	r3, #0
  40cf7a:	d048      	beq.n	40d00e <__swbuf_r+0xa2>
  40cf7c:	89a2      	ldrh	r2, [r4, #12]
  40cf7e:	69a3      	ldr	r3, [r4, #24]
  40cf80:	60a3      	str	r3, [r4, #8]
  40cf82:	b291      	uxth	r1, r2
  40cf84:	0708      	lsls	r0, r1, #28
  40cf86:	d538      	bpl.n	40cffa <__swbuf_r+0x8e>
  40cf88:	6923      	ldr	r3, [r4, #16]
  40cf8a:	2b00      	cmp	r3, #0
  40cf8c:	d035      	beq.n	40cffa <__swbuf_r+0x8e>
  40cf8e:	0489      	lsls	r1, r1, #18
  40cf90:	b2ed      	uxtb	r5, r5
  40cf92:	d515      	bpl.n	40cfc0 <__swbuf_r+0x54>
  40cf94:	6822      	ldr	r2, [r4, #0]
  40cf96:	6961      	ldr	r1, [r4, #20]
  40cf98:	1ad3      	subs	r3, r2, r3
  40cf9a:	428b      	cmp	r3, r1
  40cf9c:	da1c      	bge.n	40cfd8 <__swbuf_r+0x6c>
  40cf9e:	3301      	adds	r3, #1
  40cfa0:	68a1      	ldr	r1, [r4, #8]
  40cfa2:	1c50      	adds	r0, r2, #1
  40cfa4:	3901      	subs	r1, #1
  40cfa6:	60a1      	str	r1, [r4, #8]
  40cfa8:	6020      	str	r0, [r4, #0]
  40cfaa:	7015      	strb	r5, [r2, #0]
  40cfac:	6962      	ldr	r2, [r4, #20]
  40cfae:	429a      	cmp	r2, r3
  40cfb0:	d01a      	beq.n	40cfe8 <__swbuf_r+0x7c>
  40cfb2:	89a3      	ldrh	r3, [r4, #12]
  40cfb4:	07db      	lsls	r3, r3, #31
  40cfb6:	d501      	bpl.n	40cfbc <__swbuf_r+0x50>
  40cfb8:	2d0a      	cmp	r5, #10
  40cfba:	d015      	beq.n	40cfe8 <__swbuf_r+0x7c>
  40cfbc:	4628      	mov	r0, r5
  40cfbe:	bd70      	pop	{r4, r5, r6, pc}
  40cfc0:	6e61      	ldr	r1, [r4, #100]	; 0x64
  40cfc2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
  40cfc6:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
  40cfca:	81a2      	strh	r2, [r4, #12]
  40cfcc:	6822      	ldr	r2, [r4, #0]
  40cfce:	6661      	str	r1, [r4, #100]	; 0x64
  40cfd0:	6961      	ldr	r1, [r4, #20]
  40cfd2:	1ad3      	subs	r3, r2, r3
  40cfd4:	428b      	cmp	r3, r1
  40cfd6:	dbe2      	blt.n	40cf9e <__swbuf_r+0x32>
  40cfd8:	4630      	mov	r0, r6
  40cfda:	4621      	mov	r1, r4
  40cfdc:	f7fb f932 	bl	408244 <_fflush_r>
  40cfe0:	b940      	cbnz	r0, 40cff4 <__swbuf_r+0x88>
  40cfe2:	6822      	ldr	r2, [r4, #0]
  40cfe4:	2301      	movs	r3, #1
  40cfe6:	e7db      	b.n	40cfa0 <__swbuf_r+0x34>
  40cfe8:	4630      	mov	r0, r6
  40cfea:	4621      	mov	r1, r4
  40cfec:	f7fb f92a 	bl	408244 <_fflush_r>
  40cff0:	2800      	cmp	r0, #0
  40cff2:	d0e3      	beq.n	40cfbc <__swbuf_r+0x50>
  40cff4:	f04f 30ff 	mov.w	r0, #4294967295
  40cff8:	bd70      	pop	{r4, r5, r6, pc}
  40cffa:	4630      	mov	r0, r6
  40cffc:	4621      	mov	r1, r4
  40cffe:	f000 f81d 	bl	40d03c <__swsetup_r>
  40d002:	2800      	cmp	r0, #0
  40d004:	d1f6      	bne.n	40cff4 <__swbuf_r+0x88>
  40d006:	89a2      	ldrh	r2, [r4, #12]
  40d008:	6923      	ldr	r3, [r4, #16]
  40d00a:	b291      	uxth	r1, r2
  40d00c:	e7bf      	b.n	40cf8e <__swbuf_r+0x22>
  40d00e:	f7fb f9ad 	bl	40836c <__sinit>
  40d012:	e7b3      	b.n	40cf7c <__swbuf_r+0x10>

0040d014 <_write_r>:
  40d014:	b570      	push	{r4, r5, r6, lr}
  40d016:	4c08      	ldr	r4, [pc, #32]	; (40d038 <_write_r+0x24>)
  40d018:	4606      	mov	r6, r0
  40d01a:	2500      	movs	r5, #0
  40d01c:	4608      	mov	r0, r1
  40d01e:	4611      	mov	r1, r2
  40d020:	461a      	mov	r2, r3
  40d022:	6025      	str	r5, [r4, #0]
  40d024:	f7f3 f8d0 	bl	4001c8 <_write>
  40d028:	1c43      	adds	r3, r0, #1
  40d02a:	d000      	beq.n	40d02e <_write_r+0x1a>
  40d02c:	bd70      	pop	{r4, r5, r6, pc}
  40d02e:	6823      	ldr	r3, [r4, #0]
  40d030:	2b00      	cmp	r3, #0
  40d032:	d0fb      	beq.n	40d02c <_write_r+0x18>
  40d034:	6033      	str	r3, [r6, #0]
  40d036:	bd70      	pop	{r4, r5, r6, pc}
  40d038:	2000aed8 	.word	0x2000aed8

0040d03c <__swsetup_r>:
  40d03c:	b538      	push	{r3, r4, r5, lr}
  40d03e:	4b2f      	ldr	r3, [pc, #188]	; (40d0fc <__swsetup_r+0xc0>)
  40d040:	681b      	ldr	r3, [r3, #0]
  40d042:	4605      	mov	r5, r0
  40d044:	460c      	mov	r4, r1
  40d046:	b113      	cbz	r3, 40d04e <__swsetup_r+0x12>
  40d048:	6b9a      	ldr	r2, [r3, #56]	; 0x38
  40d04a:	2a00      	cmp	r2, #0
  40d04c:	d036      	beq.n	40d0bc <__swsetup_r+0x80>
  40d04e:	89a2      	ldrh	r2, [r4, #12]
  40d050:	b293      	uxth	r3, r2
  40d052:	0718      	lsls	r0, r3, #28
  40d054:	d50c      	bpl.n	40d070 <__swsetup_r+0x34>
  40d056:	6920      	ldr	r0, [r4, #16]
  40d058:	b1a8      	cbz	r0, 40d086 <__swsetup_r+0x4a>
  40d05a:	f013 0201 	ands.w	r2, r3, #1
  40d05e:	d01e      	beq.n	40d09e <__swsetup_r+0x62>
  40d060:	6963      	ldr	r3, [r4, #20]
  40d062:	2200      	movs	r2, #0
  40d064:	425b      	negs	r3, r3
  40d066:	61a3      	str	r3, [r4, #24]
  40d068:	60a2      	str	r2, [r4, #8]
  40d06a:	b1f0      	cbz	r0, 40d0aa <__swsetup_r+0x6e>
  40d06c:	2000      	movs	r0, #0
  40d06e:	bd38      	pop	{r3, r4, r5, pc}
  40d070:	06d9      	lsls	r1, r3, #27
  40d072:	d53b      	bpl.n	40d0ec <__swsetup_r+0xb0>
  40d074:	0758      	lsls	r0, r3, #29
  40d076:	d425      	bmi.n	40d0c4 <__swsetup_r+0x88>
  40d078:	6920      	ldr	r0, [r4, #16]
  40d07a:	f042 0308 	orr.w	r3, r2, #8
  40d07e:	81a3      	strh	r3, [r4, #12]
  40d080:	b29b      	uxth	r3, r3
  40d082:	2800      	cmp	r0, #0
  40d084:	d1e9      	bne.n	40d05a <__swsetup_r+0x1e>
  40d086:	f403 7220 	and.w	r2, r3, #640	; 0x280
  40d08a:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
  40d08e:	d0e4      	beq.n	40d05a <__swsetup_r+0x1e>
  40d090:	4628      	mov	r0, r5
  40d092:	4621      	mov	r1, r4
  40d094:	f7fb fcc8 	bl	408a28 <__smakebuf_r>
  40d098:	89a3      	ldrh	r3, [r4, #12]
  40d09a:	6920      	ldr	r0, [r4, #16]
  40d09c:	e7dd      	b.n	40d05a <__swsetup_r+0x1e>
  40d09e:	0799      	lsls	r1, r3, #30
  40d0a0:	bf58      	it	pl
  40d0a2:	6962      	ldrpl	r2, [r4, #20]
  40d0a4:	60a2      	str	r2, [r4, #8]
  40d0a6:	2800      	cmp	r0, #0
  40d0a8:	d1e0      	bne.n	40d06c <__swsetup_r+0x30>
  40d0aa:	89a3      	ldrh	r3, [r4, #12]
  40d0ac:	061a      	lsls	r2, r3, #24
  40d0ae:	d5de      	bpl.n	40d06e <__swsetup_r+0x32>
  40d0b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40d0b4:	81a3      	strh	r3, [r4, #12]
  40d0b6:	f04f 30ff 	mov.w	r0, #4294967295
  40d0ba:	bd38      	pop	{r3, r4, r5, pc}
  40d0bc:	4618      	mov	r0, r3
  40d0be:	f7fb f955 	bl	40836c <__sinit>
  40d0c2:	e7c4      	b.n	40d04e <__swsetup_r+0x12>
  40d0c4:	6b21      	ldr	r1, [r4, #48]	; 0x30
  40d0c6:	b149      	cbz	r1, 40d0dc <__swsetup_r+0xa0>
  40d0c8:	f104 0340 	add.w	r3, r4, #64	; 0x40
  40d0cc:	4299      	cmp	r1, r3
  40d0ce:	d003      	beq.n	40d0d8 <__swsetup_r+0x9c>
  40d0d0:	4628      	mov	r0, r5
  40d0d2:	f7fb f9cb 	bl	40846c <_free_r>
  40d0d6:	89a2      	ldrh	r2, [r4, #12]
  40d0d8:	2300      	movs	r3, #0
  40d0da:	6323      	str	r3, [r4, #48]	; 0x30
  40d0dc:	f022 0224 	bic.w	r2, r2, #36	; 0x24
  40d0e0:	2300      	movs	r3, #0
  40d0e2:	6920      	ldr	r0, [r4, #16]
  40d0e4:	6063      	str	r3, [r4, #4]
  40d0e6:	b292      	uxth	r2, r2
  40d0e8:	6020      	str	r0, [r4, #0]
  40d0ea:	e7c6      	b.n	40d07a <__swsetup_r+0x3e>
  40d0ec:	f042 0240 	orr.w	r2, r2, #64	; 0x40
  40d0f0:	2309      	movs	r3, #9
  40d0f2:	602b      	str	r3, [r5, #0]
  40d0f4:	f04f 30ff 	mov.w	r0, #4294967295
  40d0f8:	81a2      	strh	r2, [r4, #12]
  40d0fa:	bd38      	pop	{r3, r4, r5, pc}
  40d0fc:	20000440 	.word	0x20000440

0040d100 <register_fini>:
  40d100:	4b02      	ldr	r3, [pc, #8]	; (40d10c <register_fini+0xc>)
  40d102:	b113      	cbz	r3, 40d10a <register_fini+0xa>
  40d104:	4802      	ldr	r0, [pc, #8]	; (40d110 <register_fini+0x10>)
  40d106:	f000 b80d 	b.w	40d124 <atexit>
  40d10a:	4770      	bx	lr
  40d10c:	00000000 	.word	0x00000000
  40d110:	0040e115 	.word	0x0040e115

0040d114 <abort>:
  40d114:	b508      	push	{r3, lr}
  40d116:	2006      	movs	r0, #6
  40d118:	f001 fc10 	bl	40e93c <raise>
  40d11c:	2001      	movs	r0, #1
  40d11e:	f7f4 f991 	bl	401444 <_exit>
  40d122:	bf00      	nop

0040d124 <atexit>:
  40d124:	4601      	mov	r1, r0
  40d126:	2000      	movs	r0, #0
  40d128:	4602      	mov	r2, r0
  40d12a:	4603      	mov	r3, r0
  40d12c:	f001 bcde 	b.w	40eaec <__register_exitproc>

0040d130 <_close_r>:
  40d130:	b538      	push	{r3, r4, r5, lr}
  40d132:	4c07      	ldr	r4, [pc, #28]	; (40d150 <_close_r+0x20>)
  40d134:	2300      	movs	r3, #0
  40d136:	4605      	mov	r5, r0
  40d138:	4608      	mov	r0, r1
  40d13a:	6023      	str	r3, [r4, #0]
  40d13c:	f7f4 f974 	bl	401428 <_close>
  40d140:	1c43      	adds	r3, r0, #1
  40d142:	d000      	beq.n	40d146 <_close_r+0x16>
  40d144:	bd38      	pop	{r3, r4, r5, pc}
  40d146:	6823      	ldr	r3, [r4, #0]
  40d148:	2b00      	cmp	r3, #0
  40d14a:	d0fb      	beq.n	40d144 <_close_r+0x14>
  40d14c:	602b      	str	r3, [r5, #0]
  40d14e:	bd38      	pop	{r3, r4, r5, pc}
  40d150:	2000aed8 	.word	0x2000aed8

0040d154 <quorem>:
  40d154:	6902      	ldr	r2, [r0, #16]
  40d156:	690b      	ldr	r3, [r1, #16]
  40d158:	4293      	cmp	r3, r2
  40d15a:	f300 808f 	bgt.w	40d27c <quorem+0x128>
  40d15e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40d162:	f103 38ff 	add.w	r8, r3, #4294967295
  40d166:	f101 0714 	add.w	r7, r1, #20
  40d16a:	f100 0b14 	add.w	fp, r0, #20
  40d16e:	f857 2028 	ldr.w	r2, [r7, r8, lsl #2]
  40d172:	f85b 3028 	ldr.w	r3, [fp, r8, lsl #2]
  40d176:	ea4f 0488 	mov.w	r4, r8, lsl #2
  40d17a:	b083      	sub	sp, #12
  40d17c:	3201      	adds	r2, #1
  40d17e:	fbb3 f9f2 	udiv	r9, r3, r2
  40d182:	eb0b 0304 	add.w	r3, fp, r4
  40d186:	9400      	str	r4, [sp, #0]
  40d188:	eb07 0a04 	add.w	sl, r7, r4
  40d18c:	9301      	str	r3, [sp, #4]
  40d18e:	f1b9 0f00 	cmp.w	r9, #0
  40d192:	d03b      	beq.n	40d20c <quorem+0xb8>
  40d194:	2600      	movs	r6, #0
  40d196:	4632      	mov	r2, r6
  40d198:	46bc      	mov	ip, r7
  40d19a:	46de      	mov	lr, fp
  40d19c:	4634      	mov	r4, r6
  40d19e:	f85c 6b04 	ldr.w	r6, [ip], #4
  40d1a2:	f8de 5000 	ldr.w	r5, [lr]
  40d1a6:	b2b3      	uxth	r3, r6
  40d1a8:	0c36      	lsrs	r6, r6, #16
  40d1aa:	fb03 4409 	mla	r4, r3, r9, r4
  40d1ae:	fb06 f609 	mul.w	r6, r6, r9
  40d1b2:	eb06 4614 	add.w	r6, r6, r4, lsr #16
  40d1b6:	b2a3      	uxth	r3, r4
  40d1b8:	1ad3      	subs	r3, r2, r3
  40d1ba:	b2b4      	uxth	r4, r6
  40d1bc:	fa13 f385 	uxtah	r3, r3, r5
  40d1c0:	ebc4 4415 	rsb	r4, r4, r5, lsr #16
  40d1c4:	eb04 4423 	add.w	r4, r4, r3, asr #16
  40d1c8:	b29b      	uxth	r3, r3
  40d1ca:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
  40d1ce:	45e2      	cmp	sl, ip
  40d1d0:	ea4f 4224 	mov.w	r2, r4, asr #16
  40d1d4:	f84e 3b04 	str.w	r3, [lr], #4
  40d1d8:	ea4f 4416 	mov.w	r4, r6, lsr #16
  40d1dc:	d2df      	bcs.n	40d19e <quorem+0x4a>
  40d1de:	9b00      	ldr	r3, [sp, #0]
  40d1e0:	f85b 3003 	ldr.w	r3, [fp, r3]
  40d1e4:	b993      	cbnz	r3, 40d20c <quorem+0xb8>
  40d1e6:	9c01      	ldr	r4, [sp, #4]
  40d1e8:	1f23      	subs	r3, r4, #4
  40d1ea:	459b      	cmp	fp, r3
  40d1ec:	d20c      	bcs.n	40d208 <quorem+0xb4>
  40d1ee:	f854 3c04 	ldr.w	r3, [r4, #-4]
  40d1f2:	b94b      	cbnz	r3, 40d208 <quorem+0xb4>
  40d1f4:	f1a4 0308 	sub.w	r3, r4, #8
  40d1f8:	e002      	b.n	40d200 <quorem+0xac>
  40d1fa:	681a      	ldr	r2, [r3, #0]
  40d1fc:	3b04      	subs	r3, #4
  40d1fe:	b91a      	cbnz	r2, 40d208 <quorem+0xb4>
  40d200:	459b      	cmp	fp, r3
  40d202:	f108 38ff 	add.w	r8, r8, #4294967295
  40d206:	d3f8      	bcc.n	40d1fa <quorem+0xa6>
  40d208:	f8c0 8010 	str.w	r8, [r0, #16]
  40d20c:	4604      	mov	r4, r0
  40d20e:	f001 fa3f 	bl	40e690 <__mcmp>
  40d212:	2800      	cmp	r0, #0
  40d214:	db2e      	blt.n	40d274 <quorem+0x120>
  40d216:	f109 0901 	add.w	r9, r9, #1
  40d21a:	465d      	mov	r5, fp
  40d21c:	2300      	movs	r3, #0
  40d21e:	f857 1b04 	ldr.w	r1, [r7], #4
  40d222:	6828      	ldr	r0, [r5, #0]
  40d224:	b28a      	uxth	r2, r1
  40d226:	1a9a      	subs	r2, r3, r2
  40d228:	0c09      	lsrs	r1, r1, #16
  40d22a:	fa12 f280 	uxtah	r2, r2, r0
  40d22e:	ebc1 4310 	rsb	r3, r1, r0, lsr #16
  40d232:	eb03 4322 	add.w	r3, r3, r2, asr #16
  40d236:	b291      	uxth	r1, r2
  40d238:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
  40d23c:	45ba      	cmp	sl, r7
  40d23e:	f845 1b04 	str.w	r1, [r5], #4
  40d242:	ea4f 4323 	mov.w	r3, r3, asr #16
  40d246:	d2ea      	bcs.n	40d21e <quorem+0xca>
  40d248:	f85b 2028 	ldr.w	r2, [fp, r8, lsl #2]
  40d24c:	eb0b 0388 	add.w	r3, fp, r8, lsl #2
  40d250:	b982      	cbnz	r2, 40d274 <quorem+0x120>
  40d252:	1f1a      	subs	r2, r3, #4
  40d254:	4593      	cmp	fp, r2
  40d256:	d20b      	bcs.n	40d270 <quorem+0x11c>
  40d258:	f853 2c04 	ldr.w	r2, [r3, #-4]
  40d25c:	b942      	cbnz	r2, 40d270 <quorem+0x11c>
  40d25e:	3b08      	subs	r3, #8
  40d260:	e002      	b.n	40d268 <quorem+0x114>
  40d262:	681a      	ldr	r2, [r3, #0]
  40d264:	3b04      	subs	r3, #4
  40d266:	b91a      	cbnz	r2, 40d270 <quorem+0x11c>
  40d268:	459b      	cmp	fp, r3
  40d26a:	f108 38ff 	add.w	r8, r8, #4294967295
  40d26e:	d3f8      	bcc.n	40d262 <quorem+0x10e>
  40d270:	f8c4 8010 	str.w	r8, [r4, #16]
  40d274:	4648      	mov	r0, r9
  40d276:	b003      	add	sp, #12
  40d278:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40d27c:	2000      	movs	r0, #0
  40d27e:	4770      	bx	lr

0040d280 <_dtoa_r>:
  40d280:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40d284:	6c01      	ldr	r1, [r0, #64]	; 0x40
  40d286:	b097      	sub	sp, #92	; 0x5c
  40d288:	4604      	mov	r4, r0
  40d28a:	9d23      	ldr	r5, [sp, #140]	; 0x8c
  40d28c:	e9cd 2302 	strd	r2, r3, [sp, #8]
  40d290:	b141      	cbz	r1, 40d2a4 <_dtoa_r+0x24>
  40d292:	6c42      	ldr	r2, [r0, #68]	; 0x44
  40d294:	604a      	str	r2, [r1, #4]
  40d296:	2301      	movs	r3, #1
  40d298:	4093      	lsls	r3, r2
  40d29a:	608b      	str	r3, [r1, #8]
  40d29c:	f001 f814 	bl	40e2c8 <_Bfree>
  40d2a0:	2300      	movs	r3, #0
  40d2a2:	6423      	str	r3, [r4, #64]	; 0x40
  40d2a4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  40d2a8:	2b00      	cmp	r3, #0
  40d2aa:	4699      	mov	r9, r3
  40d2ac:	db36      	blt.n	40d31c <_dtoa_r+0x9c>
  40d2ae:	2300      	movs	r3, #0
  40d2b0:	602b      	str	r3, [r5, #0]
  40d2b2:	4ba5      	ldr	r3, [pc, #660]	; (40d548 <_dtoa_r+0x2c8>)
  40d2b4:	461a      	mov	r2, r3
  40d2b6:	ea09 0303 	and.w	r3, r9, r3
  40d2ba:	4293      	cmp	r3, r2
  40d2bc:	d017      	beq.n	40d2ee <_dtoa_r+0x6e>
  40d2be:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
  40d2c2:	2200      	movs	r2, #0
  40d2c4:	4630      	mov	r0, r6
  40d2c6:	4639      	mov	r1, r7
  40d2c8:	2300      	movs	r3, #0
  40d2ca:	f7fa fe7f 	bl	407fcc <__aeabi_dcmpeq>
  40d2ce:	4680      	mov	r8, r0
  40d2d0:	2800      	cmp	r0, #0
  40d2d2:	d02b      	beq.n	40d32c <_dtoa_r+0xac>
  40d2d4:	9a22      	ldr	r2, [sp, #136]	; 0x88
  40d2d6:	2301      	movs	r3, #1
  40d2d8:	6013      	str	r3, [r2, #0]
  40d2da:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40d2dc:	2b00      	cmp	r3, #0
  40d2de:	f000 80cb 	beq.w	40d478 <_dtoa_r+0x1f8>
  40d2e2:	489a      	ldr	r0, [pc, #616]	; (40d54c <_dtoa_r+0x2cc>)
  40d2e4:	6018      	str	r0, [r3, #0]
  40d2e6:	3801      	subs	r0, #1
  40d2e8:	b017      	add	sp, #92	; 0x5c
  40d2ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40d2ee:	9a22      	ldr	r2, [sp, #136]	; 0x88
  40d2f0:	f242 730f 	movw	r3, #9999	; 0x270f
  40d2f4:	6013      	str	r3, [r2, #0]
  40d2f6:	9b02      	ldr	r3, [sp, #8]
  40d2f8:	2b00      	cmp	r3, #0
  40d2fa:	f000 80a6 	beq.w	40d44a <_dtoa_r+0x1ca>
  40d2fe:	4894      	ldr	r0, [pc, #592]	; (40d550 <_dtoa_r+0x2d0>)
  40d300:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40d302:	2b00      	cmp	r3, #0
  40d304:	d0f0      	beq.n	40d2e8 <_dtoa_r+0x68>
  40d306:	78c3      	ldrb	r3, [r0, #3]
  40d308:	2b00      	cmp	r3, #0
  40d30a:	f000 80b7 	beq.w	40d47c <_dtoa_r+0x1fc>
  40d30e:	f100 0308 	add.w	r3, r0, #8
  40d312:	9a24      	ldr	r2, [sp, #144]	; 0x90
  40d314:	6013      	str	r3, [r2, #0]
  40d316:	b017      	add	sp, #92	; 0x5c
  40d318:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40d31c:	9a03      	ldr	r2, [sp, #12]
  40d31e:	2301      	movs	r3, #1
  40d320:	f022 4900 	bic.w	r9, r2, #2147483648	; 0x80000000
  40d324:	602b      	str	r3, [r5, #0]
  40d326:	f8cd 900c 	str.w	r9, [sp, #12]
  40d32a:	e7c2      	b.n	40d2b2 <_dtoa_r+0x32>
  40d32c:	aa15      	add	r2, sp, #84	; 0x54
  40d32e:	ab14      	add	r3, sp, #80	; 0x50
  40d330:	e88d 000c 	stmia.w	sp, {r2, r3}
  40d334:	4620      	mov	r0, r4
  40d336:	4632      	mov	r2, r6
  40d338:	463b      	mov	r3, r7
  40d33a:	f001 fa37 	bl	40e7ac <__d2b>
  40d33e:	ea5f 5519 	movs.w	r5, r9, lsr #20
  40d342:	4683      	mov	fp, r0
  40d344:	f040 808a 	bne.w	40d45c <_dtoa_r+0x1dc>
  40d348:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
  40d34c:	9d15      	ldr	r5, [sp, #84]	; 0x54
  40d34e:	f46f 6382 	mvn.w	r3, #1040	; 0x410
  40d352:	4445      	add	r5, r8
  40d354:	429d      	cmp	r5, r3
  40d356:	f2c0 8297 	blt.w	40d888 <_dtoa_r+0x608>
  40d35a:	4a7e      	ldr	r2, [pc, #504]	; (40d554 <_dtoa_r+0x2d4>)
  40d35c:	1b52      	subs	r2, r2, r5
  40d35e:	fa09 f902 	lsl.w	r9, r9, r2
  40d362:	9a02      	ldr	r2, [sp, #8]
  40d364:	f205 4312 	addw	r3, r5, #1042	; 0x412
  40d368:	fa22 f003 	lsr.w	r0, r2, r3
  40d36c:	ea49 0000 	orr.w	r0, r9, r0
  40d370:	f001 fd80 	bl	40ee74 <__aeabi_ui2d>
  40d374:	2301      	movs	r3, #1
  40d376:	3d01      	subs	r5, #1
  40d378:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
  40d37c:	930d      	str	r3, [sp, #52]	; 0x34
  40d37e:	2200      	movs	r2, #0
  40d380:	4b75      	ldr	r3, [pc, #468]	; (40d558 <_dtoa_r+0x2d8>)
  40d382:	f001 fc39 	bl	40ebf8 <__aeabi_dsub>
  40d386:	a36a      	add	r3, pc, #424	; (adr r3, 40d530 <_dtoa_r+0x2b0>)
  40d388:	e9d3 2300 	ldrd	r2, r3, [r3]
  40d38c:	f001 fde8 	bl	40ef60 <__aeabi_dmul>
  40d390:	a369      	add	r3, pc, #420	; (adr r3, 40d538 <_dtoa_r+0x2b8>)
  40d392:	e9d3 2300 	ldrd	r2, r3, [r3]
  40d396:	f001 fc31 	bl	40ebfc <__adddf3>
  40d39a:	4606      	mov	r6, r0
  40d39c:	4628      	mov	r0, r5
  40d39e:	460f      	mov	r7, r1
  40d3a0:	f001 fd78 	bl	40ee94 <__aeabi_i2d>
  40d3a4:	a366      	add	r3, pc, #408	; (adr r3, 40d540 <_dtoa_r+0x2c0>)
  40d3a6:	e9d3 2300 	ldrd	r2, r3, [r3]
  40d3aa:	f001 fdd9 	bl	40ef60 <__aeabi_dmul>
  40d3ae:	4602      	mov	r2, r0
  40d3b0:	460b      	mov	r3, r1
  40d3b2:	4630      	mov	r0, r6
  40d3b4:	4639      	mov	r1, r7
  40d3b6:	f001 fc21 	bl	40ebfc <__adddf3>
  40d3ba:	4606      	mov	r6, r0
  40d3bc:	460f      	mov	r7, r1
  40d3be:	f001 ffe1 	bl	40f384 <__aeabi_d2iz>
  40d3c2:	4639      	mov	r1, r7
  40d3c4:	9004      	str	r0, [sp, #16]
  40d3c6:	2200      	movs	r2, #0
  40d3c8:	4630      	mov	r0, r6
  40d3ca:	2300      	movs	r3, #0
  40d3cc:	f7fa fe08 	bl	407fe0 <__aeabi_dcmplt>
  40d3d0:	2800      	cmp	r0, #0
  40d3d2:	f040 81a6 	bne.w	40d722 <_dtoa_r+0x4a2>
  40d3d6:	9b04      	ldr	r3, [sp, #16]
  40d3d8:	2b16      	cmp	r3, #22
  40d3da:	f200 819f 	bhi.w	40d71c <_dtoa_r+0x49c>
  40d3de:	9a04      	ldr	r2, [sp, #16]
  40d3e0:	4b5e      	ldr	r3, [pc, #376]	; (40d55c <_dtoa_r+0x2dc>)
  40d3e2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  40d3e6:	e9d3 0100 	ldrd	r0, r1, [r3]
  40d3ea:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  40d3ee:	f7fa fe15 	bl	40801c <__aeabi_dcmpgt>
  40d3f2:	2800      	cmp	r0, #0
  40d3f4:	f000 824e 	beq.w	40d894 <_dtoa_r+0x614>
  40d3f8:	9b04      	ldr	r3, [sp, #16]
  40d3fa:	3b01      	subs	r3, #1
  40d3fc:	9304      	str	r3, [sp, #16]
  40d3fe:	2300      	movs	r3, #0
  40d400:	930b      	str	r3, [sp, #44]	; 0x2c
  40d402:	ebc5 0508 	rsb	r5, r5, r8
  40d406:	f1b5 0a01 	subs.w	sl, r5, #1
  40d40a:	f100 81a1 	bmi.w	40d750 <_dtoa_r+0x4d0>
  40d40e:	2300      	movs	r3, #0
  40d410:	9305      	str	r3, [sp, #20]
  40d412:	9b04      	ldr	r3, [sp, #16]
  40d414:	2b00      	cmp	r3, #0
  40d416:	f2c0 8192 	blt.w	40d73e <_dtoa_r+0x4be>
  40d41a:	449a      	add	sl, r3
  40d41c:	930a      	str	r3, [sp, #40]	; 0x28
  40d41e:	2300      	movs	r3, #0
  40d420:	9308      	str	r3, [sp, #32]
  40d422:	9b20      	ldr	r3, [sp, #128]	; 0x80
  40d424:	2b09      	cmp	r3, #9
  40d426:	d82b      	bhi.n	40d480 <_dtoa_r+0x200>
  40d428:	2b05      	cmp	r3, #5
  40d42a:	f340 8670 	ble.w	40e10e <_dtoa_r+0xe8e>
  40d42e:	3b04      	subs	r3, #4
  40d430:	9320      	str	r3, [sp, #128]	; 0x80
  40d432:	2500      	movs	r5, #0
  40d434:	9b20      	ldr	r3, [sp, #128]	; 0x80
  40d436:	3b02      	subs	r3, #2
  40d438:	2b03      	cmp	r3, #3
  40d43a:	f200 864e 	bhi.w	40e0da <_dtoa_r+0xe5a>
  40d43e:	e8df f013 	tbh	[pc, r3, lsl #1]
  40d442:	03cc      	.short	0x03cc
  40d444:	02b203be 	.word	0x02b203be
  40d448:	0663      	.short	0x0663
  40d44a:	4b41      	ldr	r3, [pc, #260]	; (40d550 <_dtoa_r+0x2d0>)
  40d44c:	4a44      	ldr	r2, [pc, #272]	; (40d560 <_dtoa_r+0x2e0>)
  40d44e:	f3c9 0013 	ubfx	r0, r9, #0, #20
  40d452:	2800      	cmp	r0, #0
  40d454:	bf14      	ite	ne
  40d456:	4618      	movne	r0, r3
  40d458:	4610      	moveq	r0, r2
  40d45a:	e751      	b.n	40d300 <_dtoa_r+0x80>
  40d45c:	f3c7 0313 	ubfx	r3, r7, #0, #20
  40d460:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
  40d464:	f8cd 8034 	str.w	r8, [sp, #52]	; 0x34
  40d468:	4630      	mov	r0, r6
  40d46a:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
  40d46e:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
  40d472:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
  40d476:	e782      	b.n	40d37e <_dtoa_r+0xfe>
  40d478:	483a      	ldr	r0, [pc, #232]	; (40d564 <_dtoa_r+0x2e4>)
  40d47a:	e735      	b.n	40d2e8 <_dtoa_r+0x68>
  40d47c:	1cc3      	adds	r3, r0, #3
  40d47e:	e748      	b.n	40d312 <_dtoa_r+0x92>
  40d480:	2100      	movs	r1, #0
  40d482:	6461      	str	r1, [r4, #68]	; 0x44
  40d484:	4620      	mov	r0, r4
  40d486:	9120      	str	r1, [sp, #128]	; 0x80
  40d488:	f000 fef8 	bl	40e27c <_Balloc>
  40d48c:	f04f 33ff 	mov.w	r3, #4294967295
  40d490:	9306      	str	r3, [sp, #24]
  40d492:	9a20      	ldr	r2, [sp, #128]	; 0x80
  40d494:	930c      	str	r3, [sp, #48]	; 0x30
  40d496:	2301      	movs	r3, #1
  40d498:	9007      	str	r0, [sp, #28]
  40d49a:	9221      	str	r2, [sp, #132]	; 0x84
  40d49c:	6420      	str	r0, [r4, #64]	; 0x40
  40d49e:	9309      	str	r3, [sp, #36]	; 0x24
  40d4a0:	9b15      	ldr	r3, [sp, #84]	; 0x54
  40d4a2:	2b00      	cmp	r3, #0
  40d4a4:	f2c0 80d2 	blt.w	40d64c <_dtoa_r+0x3cc>
  40d4a8:	9a04      	ldr	r2, [sp, #16]
  40d4aa:	2a0e      	cmp	r2, #14
  40d4ac:	f300 80ce 	bgt.w	40d64c <_dtoa_r+0x3cc>
  40d4b0:	4b2a      	ldr	r3, [pc, #168]	; (40d55c <_dtoa_r+0x2dc>)
  40d4b2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  40d4b6:	e9d3 8900 	ldrd	r8, r9, [r3]
  40d4ba:	9b21      	ldr	r3, [sp, #132]	; 0x84
  40d4bc:	2b00      	cmp	r3, #0
  40d4be:	f2c0 838f 	blt.w	40dbe0 <_dtoa_r+0x960>
  40d4c2:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
  40d4c6:	4642      	mov	r2, r8
  40d4c8:	464b      	mov	r3, r9
  40d4ca:	4630      	mov	r0, r6
  40d4cc:	4639      	mov	r1, r7
  40d4ce:	f001 fe71 	bl	40f1b4 <__aeabi_ddiv>
  40d4d2:	f001 ff57 	bl	40f384 <__aeabi_d2iz>
  40d4d6:	4682      	mov	sl, r0
  40d4d8:	f001 fcdc 	bl	40ee94 <__aeabi_i2d>
  40d4dc:	4642      	mov	r2, r8
  40d4de:	464b      	mov	r3, r9
  40d4e0:	f001 fd3e 	bl	40ef60 <__aeabi_dmul>
  40d4e4:	460b      	mov	r3, r1
  40d4e6:	4602      	mov	r2, r0
  40d4e8:	4639      	mov	r1, r7
  40d4ea:	4630      	mov	r0, r6
  40d4ec:	f001 fb84 	bl	40ebf8 <__aeabi_dsub>
  40d4f0:	9d07      	ldr	r5, [sp, #28]
  40d4f2:	f10a 0330 	add.w	r3, sl, #48	; 0x30
  40d4f6:	702b      	strb	r3, [r5, #0]
  40d4f8:	9b06      	ldr	r3, [sp, #24]
  40d4fa:	2b01      	cmp	r3, #1
  40d4fc:	4606      	mov	r6, r0
  40d4fe:	460f      	mov	r7, r1
  40d500:	f105 0501 	add.w	r5, r5, #1
  40d504:	d062      	beq.n	40d5cc <_dtoa_r+0x34c>
  40d506:	2200      	movs	r2, #0
  40d508:	4b17      	ldr	r3, [pc, #92]	; (40d568 <_dtoa_r+0x2e8>)
  40d50a:	f001 fd29 	bl	40ef60 <__aeabi_dmul>
  40d50e:	2200      	movs	r2, #0
  40d510:	2300      	movs	r3, #0
  40d512:	4606      	mov	r6, r0
  40d514:	460f      	mov	r7, r1
  40d516:	f7fa fd59 	bl	407fcc <__aeabi_dcmpeq>
  40d51a:	2800      	cmp	r0, #0
  40d51c:	f040 8083 	bne.w	40d626 <_dtoa_r+0x3a6>
  40d520:	f8cd b008 	str.w	fp, [sp, #8]
  40d524:	9405      	str	r4, [sp, #20]
  40d526:	f8dd b01c 	ldr.w	fp, [sp, #28]
  40d52a:	9c06      	ldr	r4, [sp, #24]
  40d52c:	e029      	b.n	40d582 <_dtoa_r+0x302>
  40d52e:	bf00      	nop
  40d530:	636f4361 	.word	0x636f4361
  40d534:	3fd287a7 	.word	0x3fd287a7
  40d538:	8b60c8b3 	.word	0x8b60c8b3
  40d53c:	3fc68a28 	.word	0x3fc68a28
  40d540:	509f79fb 	.word	0x509f79fb
  40d544:	3fd34413 	.word	0x3fd34413
  40d548:	7ff00000 	.word	0x7ff00000
  40d54c:	004119fd 	.word	0x004119fd
  40d550:	00411c8c 	.word	0x00411c8c
  40d554:	fffffc0e 	.word	0xfffffc0e
  40d558:	3ff80000 	.word	0x3ff80000
  40d55c:	00411ca0 	.word	0x00411ca0
  40d560:	00411c80 	.word	0x00411c80
  40d564:	004119fc 	.word	0x004119fc
  40d568:	40240000 	.word	0x40240000
  40d56c:	f001 fcf8 	bl	40ef60 <__aeabi_dmul>
  40d570:	2200      	movs	r2, #0
  40d572:	2300      	movs	r3, #0
  40d574:	4606      	mov	r6, r0
  40d576:	460f      	mov	r7, r1
  40d578:	f7fa fd28 	bl	407fcc <__aeabi_dcmpeq>
  40d57c:	2800      	cmp	r0, #0
  40d57e:	f040 83de 	bne.w	40dd3e <_dtoa_r+0xabe>
  40d582:	4642      	mov	r2, r8
  40d584:	464b      	mov	r3, r9
  40d586:	4630      	mov	r0, r6
  40d588:	4639      	mov	r1, r7
  40d58a:	f001 fe13 	bl	40f1b4 <__aeabi_ddiv>
  40d58e:	f001 fef9 	bl	40f384 <__aeabi_d2iz>
  40d592:	4682      	mov	sl, r0
  40d594:	f001 fc7e 	bl	40ee94 <__aeabi_i2d>
  40d598:	4642      	mov	r2, r8
  40d59a:	464b      	mov	r3, r9
  40d59c:	f001 fce0 	bl	40ef60 <__aeabi_dmul>
  40d5a0:	4602      	mov	r2, r0
  40d5a2:	460b      	mov	r3, r1
  40d5a4:	4630      	mov	r0, r6
  40d5a6:	4639      	mov	r1, r7
  40d5a8:	f001 fb26 	bl	40ebf8 <__aeabi_dsub>
  40d5ac:	f10a 0e30 	add.w	lr, sl, #48	; 0x30
  40d5b0:	f805 eb01 	strb.w	lr, [r5], #1
  40d5b4:	ebcb 0e05 	rsb	lr, fp, r5
  40d5b8:	4574      	cmp	r4, lr
  40d5ba:	4606      	mov	r6, r0
  40d5bc:	460f      	mov	r7, r1
  40d5be:	f04f 0200 	mov.w	r2, #0
  40d5c2:	4bb5      	ldr	r3, [pc, #724]	; (40d898 <_dtoa_r+0x618>)
  40d5c4:	d1d2      	bne.n	40d56c <_dtoa_r+0x2ec>
  40d5c6:	f8dd b008 	ldr.w	fp, [sp, #8]
  40d5ca:	9c05      	ldr	r4, [sp, #20]
  40d5cc:	4632      	mov	r2, r6
  40d5ce:	463b      	mov	r3, r7
  40d5d0:	4630      	mov	r0, r6
  40d5d2:	4639      	mov	r1, r7
  40d5d4:	f001 fb12 	bl	40ebfc <__adddf3>
  40d5d8:	4606      	mov	r6, r0
  40d5da:	460f      	mov	r7, r1
  40d5dc:	4640      	mov	r0, r8
  40d5de:	4649      	mov	r1, r9
  40d5e0:	4632      	mov	r2, r6
  40d5e2:	463b      	mov	r3, r7
  40d5e4:	f7fa fcfc 	bl	407fe0 <__aeabi_dcmplt>
  40d5e8:	b948      	cbnz	r0, 40d5fe <_dtoa_r+0x37e>
  40d5ea:	4640      	mov	r0, r8
  40d5ec:	4649      	mov	r1, r9
  40d5ee:	4632      	mov	r2, r6
  40d5f0:	463b      	mov	r3, r7
  40d5f2:	f7fa fceb 	bl	407fcc <__aeabi_dcmpeq>
  40d5f6:	b1b0      	cbz	r0, 40d626 <_dtoa_r+0x3a6>
  40d5f8:	f01a 0f01 	tst.w	sl, #1
  40d5fc:	d013      	beq.n	40d626 <_dtoa_r+0x3a6>
  40d5fe:	f815 8c01 	ldrb.w	r8, [r5, #-1]
  40d602:	9907      	ldr	r1, [sp, #28]
  40d604:	1e6b      	subs	r3, r5, #1
  40d606:	e004      	b.n	40d612 <_dtoa_r+0x392>
  40d608:	428b      	cmp	r3, r1
  40d60a:	f000 8440 	beq.w	40de8e <_dtoa_r+0xc0e>
  40d60e:	f813 8d01 	ldrb.w	r8, [r3, #-1]!
  40d612:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
  40d616:	f103 0501 	add.w	r5, r3, #1
  40d61a:	461a      	mov	r2, r3
  40d61c:	d0f4      	beq.n	40d608 <_dtoa_r+0x388>
  40d61e:	f108 0301 	add.w	r3, r8, #1
  40d622:	b2db      	uxtb	r3, r3
  40d624:	7013      	strb	r3, [r2, #0]
  40d626:	4620      	mov	r0, r4
  40d628:	4659      	mov	r1, fp
  40d62a:	f000 fe4d 	bl	40e2c8 <_Bfree>
  40d62e:	2200      	movs	r2, #0
  40d630:	9b04      	ldr	r3, [sp, #16]
  40d632:	702a      	strb	r2, [r5, #0]
  40d634:	9a22      	ldr	r2, [sp, #136]	; 0x88
  40d636:	3301      	adds	r3, #1
  40d638:	6013      	str	r3, [r2, #0]
  40d63a:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40d63c:	2b00      	cmp	r3, #0
  40d63e:	f000 8345 	beq.w	40dccc <_dtoa_r+0xa4c>
  40d642:	9807      	ldr	r0, [sp, #28]
  40d644:	601d      	str	r5, [r3, #0]
  40d646:	b017      	add	sp, #92	; 0x5c
  40d648:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40d64c:	9a09      	ldr	r2, [sp, #36]	; 0x24
  40d64e:	2a00      	cmp	r2, #0
  40d650:	f000 8084 	beq.w	40d75c <_dtoa_r+0x4dc>
  40d654:	9a20      	ldr	r2, [sp, #128]	; 0x80
  40d656:	2a01      	cmp	r2, #1
  40d658:	f340 8304 	ble.w	40dc64 <_dtoa_r+0x9e4>
  40d65c:	9b06      	ldr	r3, [sp, #24]
  40d65e:	1e5f      	subs	r7, r3, #1
  40d660:	9b08      	ldr	r3, [sp, #32]
  40d662:	42bb      	cmp	r3, r7
  40d664:	f2c0 83a9 	blt.w	40ddba <_dtoa_r+0xb3a>
  40d668:	1bdf      	subs	r7, r3, r7
  40d66a:	9b06      	ldr	r3, [sp, #24]
  40d66c:	2b00      	cmp	r3, #0
  40d66e:	f2c0 849c 	blt.w	40dfaa <_dtoa_r+0xd2a>
  40d672:	9d05      	ldr	r5, [sp, #20]
  40d674:	9b06      	ldr	r3, [sp, #24]
  40d676:	9a05      	ldr	r2, [sp, #20]
  40d678:	4620      	mov	r0, r4
  40d67a:	441a      	add	r2, r3
  40d67c:	2101      	movs	r1, #1
  40d67e:	9205      	str	r2, [sp, #20]
  40d680:	449a      	add	sl, r3
  40d682:	f000 febb 	bl	40e3fc <__i2b>
  40d686:	4606      	mov	r6, r0
  40d688:	b165      	cbz	r5, 40d6a4 <_dtoa_r+0x424>
  40d68a:	f1ba 0f00 	cmp.w	sl, #0
  40d68e:	dd09      	ble.n	40d6a4 <_dtoa_r+0x424>
  40d690:	45aa      	cmp	sl, r5
  40d692:	9a05      	ldr	r2, [sp, #20]
  40d694:	4653      	mov	r3, sl
  40d696:	bfa8      	it	ge
  40d698:	462b      	movge	r3, r5
  40d69a:	1ad2      	subs	r2, r2, r3
  40d69c:	9205      	str	r2, [sp, #20]
  40d69e:	1aed      	subs	r5, r5, r3
  40d6a0:	ebc3 0a0a 	rsb	sl, r3, sl
  40d6a4:	9b08      	ldr	r3, [sp, #32]
  40d6a6:	2b00      	cmp	r3, #0
  40d6a8:	dd1a      	ble.n	40d6e0 <_dtoa_r+0x460>
  40d6aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40d6ac:	2b00      	cmp	r3, #0
  40d6ae:	f000 837d 	beq.w	40ddac <_dtoa_r+0xb2c>
  40d6b2:	2f00      	cmp	r7, #0
  40d6b4:	dd10      	ble.n	40d6d8 <_dtoa_r+0x458>
  40d6b6:	4631      	mov	r1, r6
  40d6b8:	463a      	mov	r2, r7
  40d6ba:	4620      	mov	r0, r4
  40d6bc:	f000 ff42 	bl	40e544 <__pow5mult>
  40d6c0:	4606      	mov	r6, r0
  40d6c2:	465a      	mov	r2, fp
  40d6c4:	4631      	mov	r1, r6
  40d6c6:	4620      	mov	r0, r4
  40d6c8:	f000 fea2 	bl	40e410 <__multiply>
  40d6cc:	4659      	mov	r1, fp
  40d6ce:	4680      	mov	r8, r0
  40d6d0:	4620      	mov	r0, r4
  40d6d2:	f000 fdf9 	bl	40e2c8 <_Bfree>
  40d6d6:	46c3      	mov	fp, r8
  40d6d8:	9b08      	ldr	r3, [sp, #32]
  40d6da:	1bda      	subs	r2, r3, r7
  40d6dc:	f040 82a2 	bne.w	40dc24 <_dtoa_r+0x9a4>
  40d6e0:	4620      	mov	r0, r4
  40d6e2:	2101      	movs	r1, #1
  40d6e4:	f000 fe8a 	bl	40e3fc <__i2b>
  40d6e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40d6ea:	2b00      	cmp	r3, #0
  40d6ec:	4680      	mov	r8, r0
  40d6ee:	dd39      	ble.n	40d764 <_dtoa_r+0x4e4>
  40d6f0:	4601      	mov	r1, r0
  40d6f2:	461a      	mov	r2, r3
  40d6f4:	4620      	mov	r0, r4
  40d6f6:	f000 ff25 	bl	40e544 <__pow5mult>
  40d6fa:	9b20      	ldr	r3, [sp, #128]	; 0x80
  40d6fc:	2b01      	cmp	r3, #1
  40d6fe:	4680      	mov	r8, r0
  40d700:	f340 8296 	ble.w	40dc30 <_dtoa_r+0x9b0>
  40d704:	f04f 0900 	mov.w	r9, #0
  40d708:	f8d8 3010 	ldr.w	r3, [r8, #16]
  40d70c:	eb08 0383 	add.w	r3, r8, r3, lsl #2
  40d710:	6918      	ldr	r0, [r3, #16]
  40d712:	f000 fe25 	bl	40e360 <__hi0bits>
  40d716:	f1c0 0020 	rsb	r0, r0, #32
  40d71a:	e02d      	b.n	40d778 <_dtoa_r+0x4f8>
  40d71c:	2301      	movs	r3, #1
  40d71e:	930b      	str	r3, [sp, #44]	; 0x2c
  40d720:	e66f      	b.n	40d402 <_dtoa_r+0x182>
  40d722:	9804      	ldr	r0, [sp, #16]
  40d724:	f001 fbb6 	bl	40ee94 <__aeabi_i2d>
  40d728:	4632      	mov	r2, r6
  40d72a:	463b      	mov	r3, r7
  40d72c:	f7fa fc4e 	bl	407fcc <__aeabi_dcmpeq>
  40d730:	2800      	cmp	r0, #0
  40d732:	f47f ae50 	bne.w	40d3d6 <_dtoa_r+0x156>
  40d736:	9b04      	ldr	r3, [sp, #16]
  40d738:	3b01      	subs	r3, #1
  40d73a:	9304      	str	r3, [sp, #16]
  40d73c:	e64b      	b.n	40d3d6 <_dtoa_r+0x156>
  40d73e:	9a05      	ldr	r2, [sp, #20]
  40d740:	9b04      	ldr	r3, [sp, #16]
  40d742:	1ad2      	subs	r2, r2, r3
  40d744:	425b      	negs	r3, r3
  40d746:	9308      	str	r3, [sp, #32]
  40d748:	2300      	movs	r3, #0
  40d74a:	9205      	str	r2, [sp, #20]
  40d74c:	930a      	str	r3, [sp, #40]	; 0x28
  40d74e:	e668      	b.n	40d422 <_dtoa_r+0x1a2>
  40d750:	f1ca 0300 	rsb	r3, sl, #0
  40d754:	9305      	str	r3, [sp, #20]
  40d756:	f04f 0a00 	mov.w	sl, #0
  40d75a:	e65a      	b.n	40d412 <_dtoa_r+0x192>
  40d75c:	9f08      	ldr	r7, [sp, #32]
  40d75e:	9d05      	ldr	r5, [sp, #20]
  40d760:	9e09      	ldr	r6, [sp, #36]	; 0x24
  40d762:	e791      	b.n	40d688 <_dtoa_r+0x408>
  40d764:	9b20      	ldr	r3, [sp, #128]	; 0x80
  40d766:	2b01      	cmp	r3, #1
  40d768:	f340 82b3 	ble.w	40dcd2 <_dtoa_r+0xa52>
  40d76c:	f04f 0900 	mov.w	r9, #0
  40d770:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40d772:	2b00      	cmp	r3, #0
  40d774:	d1c8      	bne.n	40d708 <_dtoa_r+0x488>
  40d776:	2001      	movs	r0, #1
  40d778:	4450      	add	r0, sl
  40d77a:	f010 001f 	ands.w	r0, r0, #31
  40d77e:	f000 8081 	beq.w	40d884 <_dtoa_r+0x604>
  40d782:	f1c0 0320 	rsb	r3, r0, #32
  40d786:	2b04      	cmp	r3, #4
  40d788:	f340 84b8 	ble.w	40e0fc <_dtoa_r+0xe7c>
  40d78c:	f1c0 001c 	rsb	r0, r0, #28
  40d790:	9b05      	ldr	r3, [sp, #20]
  40d792:	4403      	add	r3, r0
  40d794:	9305      	str	r3, [sp, #20]
  40d796:	4405      	add	r5, r0
  40d798:	4482      	add	sl, r0
  40d79a:	9b05      	ldr	r3, [sp, #20]
  40d79c:	2b00      	cmp	r3, #0
  40d79e:	dd05      	ble.n	40d7ac <_dtoa_r+0x52c>
  40d7a0:	4659      	mov	r1, fp
  40d7a2:	461a      	mov	r2, r3
  40d7a4:	4620      	mov	r0, r4
  40d7a6:	f000 ff1d 	bl	40e5e4 <__lshift>
  40d7aa:	4683      	mov	fp, r0
  40d7ac:	f1ba 0f00 	cmp.w	sl, #0
  40d7b0:	dd05      	ble.n	40d7be <_dtoa_r+0x53e>
  40d7b2:	4641      	mov	r1, r8
  40d7b4:	4652      	mov	r2, sl
  40d7b6:	4620      	mov	r0, r4
  40d7b8:	f000 ff14 	bl	40e5e4 <__lshift>
  40d7bc:	4680      	mov	r8, r0
  40d7be:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  40d7c0:	2b00      	cmp	r3, #0
  40d7c2:	f040 8268 	bne.w	40dc96 <_dtoa_r+0xa16>
  40d7c6:	9b06      	ldr	r3, [sp, #24]
  40d7c8:	2b00      	cmp	r3, #0
  40d7ca:	f340 8295 	ble.w	40dcf8 <_dtoa_r+0xa78>
  40d7ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40d7d0:	2b00      	cmp	r3, #0
  40d7d2:	d171      	bne.n	40d8b8 <_dtoa_r+0x638>
  40d7d4:	f8dd 901c 	ldr.w	r9, [sp, #28]
  40d7d8:	9f06      	ldr	r7, [sp, #24]
  40d7da:	464d      	mov	r5, r9
  40d7dc:	e002      	b.n	40d7e4 <_dtoa_r+0x564>
  40d7de:	f000 fd7d 	bl	40e2dc <__multadd>
  40d7e2:	4683      	mov	fp, r0
  40d7e4:	4641      	mov	r1, r8
  40d7e6:	4658      	mov	r0, fp
  40d7e8:	f7ff fcb4 	bl	40d154 <quorem>
  40d7ec:	f100 0c30 	add.w	ip, r0, #48	; 0x30
  40d7f0:	f805 cb01 	strb.w	ip, [r5], #1
  40d7f4:	ebc9 0305 	rsb	r3, r9, r5
  40d7f8:	42bb      	cmp	r3, r7
  40d7fa:	4620      	mov	r0, r4
  40d7fc:	4659      	mov	r1, fp
  40d7fe:	f04f 020a 	mov.w	r2, #10
  40d802:	f04f 0300 	mov.w	r3, #0
  40d806:	dbea      	blt.n	40d7de <_dtoa_r+0x55e>
  40d808:	9b07      	ldr	r3, [sp, #28]
  40d80a:	9a06      	ldr	r2, [sp, #24]
  40d80c:	2a01      	cmp	r2, #1
  40d80e:	bfac      	ite	ge
  40d810:	189b      	addge	r3, r3, r2
  40d812:	3301      	addlt	r3, #1
  40d814:	461d      	mov	r5, r3
  40d816:	f04f 0a00 	mov.w	sl, #0
  40d81a:	4659      	mov	r1, fp
  40d81c:	2201      	movs	r2, #1
  40d81e:	4620      	mov	r0, r4
  40d820:	f8cd c008 	str.w	ip, [sp, #8]
  40d824:	f000 fede 	bl	40e5e4 <__lshift>
  40d828:	4641      	mov	r1, r8
  40d82a:	4683      	mov	fp, r0
  40d82c:	f000 ff30 	bl	40e690 <__mcmp>
  40d830:	2800      	cmp	r0, #0
  40d832:	f8dd c008 	ldr.w	ip, [sp, #8]
  40d836:	f340 82f6 	ble.w	40de26 <_dtoa_r+0xba6>
  40d83a:	f815 2c01 	ldrb.w	r2, [r5, #-1]
  40d83e:	9907      	ldr	r1, [sp, #28]
  40d840:	1e6b      	subs	r3, r5, #1
  40d842:	e004      	b.n	40d84e <_dtoa_r+0x5ce>
  40d844:	428b      	cmp	r3, r1
  40d846:	f000 8273 	beq.w	40dd30 <_dtoa_r+0xab0>
  40d84a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
  40d84e:	2a39      	cmp	r2, #57	; 0x39
  40d850:	f103 0501 	add.w	r5, r3, #1
  40d854:	d0f6      	beq.n	40d844 <_dtoa_r+0x5c4>
  40d856:	3201      	adds	r2, #1
  40d858:	701a      	strb	r2, [r3, #0]
  40d85a:	4641      	mov	r1, r8
  40d85c:	4620      	mov	r0, r4
  40d85e:	f000 fd33 	bl	40e2c8 <_Bfree>
  40d862:	2e00      	cmp	r6, #0
  40d864:	f43f aedf 	beq.w	40d626 <_dtoa_r+0x3a6>
  40d868:	f1ba 0f00 	cmp.w	sl, #0
  40d86c:	d005      	beq.n	40d87a <_dtoa_r+0x5fa>
  40d86e:	45b2      	cmp	sl, r6
  40d870:	d003      	beq.n	40d87a <_dtoa_r+0x5fa>
  40d872:	4651      	mov	r1, sl
  40d874:	4620      	mov	r0, r4
  40d876:	f000 fd27 	bl	40e2c8 <_Bfree>
  40d87a:	4631      	mov	r1, r6
  40d87c:	4620      	mov	r0, r4
  40d87e:	f000 fd23 	bl	40e2c8 <_Bfree>
  40d882:	e6d0      	b.n	40d626 <_dtoa_r+0x3a6>
  40d884:	201c      	movs	r0, #28
  40d886:	e783      	b.n	40d790 <_dtoa_r+0x510>
  40d888:	4b04      	ldr	r3, [pc, #16]	; (40d89c <_dtoa_r+0x61c>)
  40d88a:	9a02      	ldr	r2, [sp, #8]
  40d88c:	1b5b      	subs	r3, r3, r5
  40d88e:	fa02 f003 	lsl.w	r0, r2, r3
  40d892:	e56d      	b.n	40d370 <_dtoa_r+0xf0>
  40d894:	900b      	str	r0, [sp, #44]	; 0x2c
  40d896:	e5b4      	b.n	40d402 <_dtoa_r+0x182>
  40d898:	40240000 	.word	0x40240000
  40d89c:	fffffbee 	.word	0xfffffbee
  40d8a0:	4631      	mov	r1, r6
  40d8a2:	2300      	movs	r3, #0
  40d8a4:	4620      	mov	r0, r4
  40d8a6:	220a      	movs	r2, #10
  40d8a8:	f000 fd18 	bl	40e2dc <__multadd>
  40d8ac:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  40d8ae:	2b00      	cmp	r3, #0
  40d8b0:	4606      	mov	r6, r0
  40d8b2:	f340 840c 	ble.w	40e0ce <_dtoa_r+0xe4e>
  40d8b6:	9306      	str	r3, [sp, #24]
  40d8b8:	2d00      	cmp	r5, #0
  40d8ba:	dd05      	ble.n	40d8c8 <_dtoa_r+0x648>
  40d8bc:	4631      	mov	r1, r6
  40d8be:	462a      	mov	r2, r5
  40d8c0:	4620      	mov	r0, r4
  40d8c2:	f000 fe8f 	bl	40e5e4 <__lshift>
  40d8c6:	4606      	mov	r6, r0
  40d8c8:	f1b9 0f00 	cmp.w	r9, #0
  40d8cc:	f040 82e9 	bne.w	40dea2 <_dtoa_r+0xc22>
  40d8d0:	46b1      	mov	r9, r6
  40d8d2:	9b06      	ldr	r3, [sp, #24]
  40d8d4:	9a07      	ldr	r2, [sp, #28]
  40d8d6:	3b01      	subs	r3, #1
  40d8d8:	18d3      	adds	r3, r2, r3
  40d8da:	9308      	str	r3, [sp, #32]
  40d8dc:	9b02      	ldr	r3, [sp, #8]
  40d8de:	f003 0301 	and.w	r3, r3, #1
  40d8e2:	9309      	str	r3, [sp, #36]	; 0x24
  40d8e4:	4617      	mov	r7, r2
  40d8e6:	4641      	mov	r1, r8
  40d8e8:	4658      	mov	r0, fp
  40d8ea:	f7ff fc33 	bl	40d154 <quorem>
  40d8ee:	4631      	mov	r1, r6
  40d8f0:	4605      	mov	r5, r0
  40d8f2:	4658      	mov	r0, fp
  40d8f4:	f000 fecc 	bl	40e690 <__mcmp>
  40d8f8:	464a      	mov	r2, r9
  40d8fa:	4682      	mov	sl, r0
  40d8fc:	4641      	mov	r1, r8
  40d8fe:	4620      	mov	r0, r4
  40d900:	f000 feea 	bl	40e6d8 <__mdiff>
  40d904:	68c2      	ldr	r2, [r0, #12]
  40d906:	4603      	mov	r3, r0
  40d908:	f105 0c30 	add.w	ip, r5, #48	; 0x30
  40d90c:	2a00      	cmp	r2, #0
  40d90e:	f040 81b8 	bne.w	40dc82 <_dtoa_r+0xa02>
  40d912:	4619      	mov	r1, r3
  40d914:	4658      	mov	r0, fp
  40d916:	f8cd c018 	str.w	ip, [sp, #24]
  40d91a:	9305      	str	r3, [sp, #20]
  40d91c:	f000 feb8 	bl	40e690 <__mcmp>
  40d920:	9b05      	ldr	r3, [sp, #20]
  40d922:	9002      	str	r0, [sp, #8]
  40d924:	4619      	mov	r1, r3
  40d926:	4620      	mov	r0, r4
  40d928:	f000 fcce 	bl	40e2c8 <_Bfree>
  40d92c:	9a02      	ldr	r2, [sp, #8]
  40d92e:	f8dd c018 	ldr.w	ip, [sp, #24]
  40d932:	b92a      	cbnz	r2, 40d940 <_dtoa_r+0x6c0>
  40d934:	9b20      	ldr	r3, [sp, #128]	; 0x80
  40d936:	b91b      	cbnz	r3, 40d940 <_dtoa_r+0x6c0>
  40d938:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40d93a:	2b00      	cmp	r3, #0
  40d93c:	f000 83a7 	beq.w	40e08e <_dtoa_r+0xe0e>
  40d940:	f1ba 0f00 	cmp.w	sl, #0
  40d944:	f2c0 8251 	blt.w	40ddea <_dtoa_r+0xb6a>
  40d948:	d105      	bne.n	40d956 <_dtoa_r+0x6d6>
  40d94a:	9b20      	ldr	r3, [sp, #128]	; 0x80
  40d94c:	b91b      	cbnz	r3, 40d956 <_dtoa_r+0x6d6>
  40d94e:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40d950:	2b00      	cmp	r3, #0
  40d952:	f000 824a 	beq.w	40ddea <_dtoa_r+0xb6a>
  40d956:	2a00      	cmp	r2, #0
  40d958:	f300 82b7 	bgt.w	40deca <_dtoa_r+0xc4a>
  40d95c:	9b08      	ldr	r3, [sp, #32]
  40d95e:	f887 c000 	strb.w	ip, [r7]
  40d962:	f107 0a01 	add.w	sl, r7, #1
  40d966:	429f      	cmp	r7, r3
  40d968:	4655      	mov	r5, sl
  40d96a:	f000 82ba 	beq.w	40dee2 <_dtoa_r+0xc62>
  40d96e:	4659      	mov	r1, fp
  40d970:	220a      	movs	r2, #10
  40d972:	2300      	movs	r3, #0
  40d974:	4620      	mov	r0, r4
  40d976:	f000 fcb1 	bl	40e2dc <__multadd>
  40d97a:	454e      	cmp	r6, r9
  40d97c:	4683      	mov	fp, r0
  40d97e:	4631      	mov	r1, r6
  40d980:	4620      	mov	r0, r4
  40d982:	f04f 020a 	mov.w	r2, #10
  40d986:	f04f 0300 	mov.w	r3, #0
  40d98a:	f000 8174 	beq.w	40dc76 <_dtoa_r+0x9f6>
  40d98e:	f000 fca5 	bl	40e2dc <__multadd>
  40d992:	4649      	mov	r1, r9
  40d994:	4606      	mov	r6, r0
  40d996:	220a      	movs	r2, #10
  40d998:	4620      	mov	r0, r4
  40d99a:	2300      	movs	r3, #0
  40d99c:	f000 fc9e 	bl	40e2dc <__multadd>
  40d9a0:	4657      	mov	r7, sl
  40d9a2:	4681      	mov	r9, r0
  40d9a4:	e79f      	b.n	40d8e6 <_dtoa_r+0x666>
  40d9a6:	2301      	movs	r3, #1
  40d9a8:	9309      	str	r3, [sp, #36]	; 0x24
  40d9aa:	9b21      	ldr	r3, [sp, #132]	; 0x84
  40d9ac:	2b00      	cmp	r3, #0
  40d9ae:	f340 8213 	ble.w	40ddd8 <_dtoa_r+0xb58>
  40d9b2:	461f      	mov	r7, r3
  40d9b4:	461e      	mov	r6, r3
  40d9b6:	930c      	str	r3, [sp, #48]	; 0x30
  40d9b8:	9306      	str	r3, [sp, #24]
  40d9ba:	2100      	movs	r1, #0
  40d9bc:	2f17      	cmp	r7, #23
  40d9be:	6461      	str	r1, [r4, #68]	; 0x44
  40d9c0:	d90a      	bls.n	40d9d8 <_dtoa_r+0x758>
  40d9c2:	2201      	movs	r2, #1
  40d9c4:	2304      	movs	r3, #4
  40d9c6:	005b      	lsls	r3, r3, #1
  40d9c8:	f103 0014 	add.w	r0, r3, #20
  40d9cc:	4287      	cmp	r7, r0
  40d9ce:	4611      	mov	r1, r2
  40d9d0:	f102 0201 	add.w	r2, r2, #1
  40d9d4:	d2f7      	bcs.n	40d9c6 <_dtoa_r+0x746>
  40d9d6:	6461      	str	r1, [r4, #68]	; 0x44
  40d9d8:	4620      	mov	r0, r4
  40d9da:	f000 fc4f 	bl	40e27c <_Balloc>
  40d9de:	2e0e      	cmp	r6, #14
  40d9e0:	9007      	str	r0, [sp, #28]
  40d9e2:	6420      	str	r0, [r4, #64]	; 0x40
  40d9e4:	f63f ad5c 	bhi.w	40d4a0 <_dtoa_r+0x220>
  40d9e8:	2d00      	cmp	r5, #0
  40d9ea:	f43f ad59 	beq.w	40d4a0 <_dtoa_r+0x220>
  40d9ee:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  40d9f2:	9904      	ldr	r1, [sp, #16]
  40d9f4:	2900      	cmp	r1, #0
  40d9f6:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
  40d9fa:	f340 8221 	ble.w	40de40 <_dtoa_r+0xbc0>
  40d9fe:	4bb7      	ldr	r3, [pc, #732]	; (40dcdc <_dtoa_r+0xa5c>)
  40da00:	f001 020f 	and.w	r2, r1, #15
  40da04:	110d      	asrs	r5, r1, #4
  40da06:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  40da0a:	06e9      	lsls	r1, r5, #27
  40da0c:	e9d3 6700 	ldrd	r6, r7, [r3]
  40da10:	f140 81db 	bpl.w	40ddca <_dtoa_r+0xb4a>
  40da14:	4bb2      	ldr	r3, [pc, #712]	; (40dce0 <_dtoa_r+0xa60>)
  40da16:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
  40da1a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
  40da1e:	f001 fbc9 	bl	40f1b4 <__aeabi_ddiv>
  40da22:	e9cd 0102 	strd	r0, r1, [sp, #8]
  40da26:	f005 050f 	and.w	r5, r5, #15
  40da2a:	f04f 0803 	mov.w	r8, #3
  40da2e:	b18d      	cbz	r5, 40da54 <_dtoa_r+0x7d4>
  40da30:	f8df 92ac 	ldr.w	r9, [pc, #684]	; 40dce0 <_dtoa_r+0xa60>
  40da34:	4630      	mov	r0, r6
  40da36:	4639      	mov	r1, r7
  40da38:	07ea      	lsls	r2, r5, #31
  40da3a:	d505      	bpl.n	40da48 <_dtoa_r+0x7c8>
  40da3c:	e9d9 2300 	ldrd	r2, r3, [r9]
  40da40:	f108 0801 	add.w	r8, r8, #1
  40da44:	f001 fa8c 	bl	40ef60 <__aeabi_dmul>
  40da48:	106d      	asrs	r5, r5, #1
  40da4a:	f109 0908 	add.w	r9, r9, #8
  40da4e:	d1f3      	bne.n	40da38 <_dtoa_r+0x7b8>
  40da50:	4606      	mov	r6, r0
  40da52:	460f      	mov	r7, r1
  40da54:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  40da58:	4632      	mov	r2, r6
  40da5a:	463b      	mov	r3, r7
  40da5c:	f001 fbaa 	bl	40f1b4 <__aeabi_ddiv>
  40da60:	e9cd 0102 	strd	r0, r1, [sp, #8]
  40da64:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  40da66:	b143      	cbz	r3, 40da7a <_dtoa_r+0x7fa>
  40da68:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  40da6c:	2200      	movs	r2, #0
  40da6e:	4b9d      	ldr	r3, [pc, #628]	; (40dce4 <_dtoa_r+0xa64>)
  40da70:	f7fa fab6 	bl	407fe0 <__aeabi_dcmplt>
  40da74:	2800      	cmp	r0, #0
  40da76:	f040 82ac 	bne.w	40dfd2 <_dtoa_r+0xd52>
  40da7a:	4640      	mov	r0, r8
  40da7c:	f001 fa0a 	bl	40ee94 <__aeabi_i2d>
  40da80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  40da84:	f001 fa6c 	bl	40ef60 <__aeabi_dmul>
  40da88:	4b97      	ldr	r3, [pc, #604]	; (40dce8 <_dtoa_r+0xa68>)
  40da8a:	2200      	movs	r2, #0
  40da8c:	f001 f8b6 	bl	40ebfc <__adddf3>
  40da90:	9b06      	ldr	r3, [sp, #24]
  40da92:	4606      	mov	r6, r0
  40da94:	f1a1 7750 	sub.w	r7, r1, #54525952	; 0x3400000
  40da98:	2b00      	cmp	r3, #0
  40da9a:	f000 8162 	beq.w	40dd62 <_dtoa_r+0xae2>
  40da9e:	9b04      	ldr	r3, [sp, #16]
  40daa0:	f8dd 9018 	ldr.w	r9, [sp, #24]
  40daa4:	9312      	str	r3, [sp, #72]	; 0x48
  40daa6:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40daa8:	2b00      	cmp	r3, #0
  40daaa:	f000 8221 	beq.w	40def0 <_dtoa_r+0xc70>
  40daae:	4b8b      	ldr	r3, [pc, #556]	; (40dcdc <_dtoa_r+0xa5c>)
  40dab0:	498e      	ldr	r1, [pc, #568]	; (40dcec <_dtoa_r+0xa6c>)
  40dab2:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
  40dab6:	e953 2302 	ldrd	r2, r3, [r3, #-8]
  40daba:	2000      	movs	r0, #0
  40dabc:	f001 fb7a 	bl	40f1b4 <__aeabi_ddiv>
  40dac0:	4632      	mov	r2, r6
  40dac2:	463b      	mov	r3, r7
  40dac4:	f001 f898 	bl	40ebf8 <__aeabi_dsub>
  40dac8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
  40dacc:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
  40dad0:	4639      	mov	r1, r7
  40dad2:	4630      	mov	r0, r6
  40dad4:	f001 fc56 	bl	40f384 <__aeabi_d2iz>
  40dad8:	4605      	mov	r5, r0
  40dada:	f001 f9db 	bl	40ee94 <__aeabi_i2d>
  40dade:	3530      	adds	r5, #48	; 0x30
  40dae0:	4602      	mov	r2, r0
  40dae2:	460b      	mov	r3, r1
  40dae4:	4630      	mov	r0, r6
  40dae6:	4639      	mov	r1, r7
  40dae8:	f001 f886 	bl	40ebf8 <__aeabi_dsub>
  40daec:	fa5f f885 	uxtb.w	r8, r5
  40daf0:	9d07      	ldr	r5, [sp, #28]
  40daf2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
  40daf6:	f885 8000 	strb.w	r8, [r5]
  40dafa:	4606      	mov	r6, r0
  40dafc:	460f      	mov	r7, r1
  40dafe:	3501      	adds	r5, #1
  40db00:	f7fa fa6e 	bl	407fe0 <__aeabi_dcmplt>
  40db04:	2800      	cmp	r0, #0
  40db06:	f040 82b2 	bne.w	40e06e <_dtoa_r+0xdee>
  40db0a:	4632      	mov	r2, r6
  40db0c:	463b      	mov	r3, r7
  40db0e:	2000      	movs	r0, #0
  40db10:	4974      	ldr	r1, [pc, #464]	; (40dce4 <_dtoa_r+0xa64>)
  40db12:	f001 f871 	bl	40ebf8 <__aeabi_dsub>
  40db16:	4602      	mov	r2, r0
  40db18:	460b      	mov	r3, r1
  40db1a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
  40db1e:	f7fa fa7d 	bl	40801c <__aeabi_dcmpgt>
  40db22:	2800      	cmp	r0, #0
  40db24:	f040 82ac 	bne.w	40e080 <_dtoa_r+0xe00>
  40db28:	f1b9 0f01 	cmp.w	r9, #1
  40db2c:	f340 8138 	ble.w	40dda0 <_dtoa_r+0xb20>
  40db30:	9b07      	ldr	r3, [sp, #28]
  40db32:	f8cd a04c 	str.w	sl, [sp, #76]	; 0x4c
  40db36:	f8cd b008 	str.w	fp, [sp, #8]
  40db3a:	4499      	add	r9, r3
  40db3c:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	; 0x40
  40db40:	46a0      	mov	r8, r4
  40db42:	e00d      	b.n	40db60 <_dtoa_r+0x8e0>
  40db44:	2000      	movs	r0, #0
  40db46:	4967      	ldr	r1, [pc, #412]	; (40dce4 <_dtoa_r+0xa64>)
  40db48:	f001 f856 	bl	40ebf8 <__aeabi_dsub>
  40db4c:	4652      	mov	r2, sl
  40db4e:	465b      	mov	r3, fp
  40db50:	f7fa fa46 	bl	407fe0 <__aeabi_dcmplt>
  40db54:	2800      	cmp	r0, #0
  40db56:	f040 828e 	bne.w	40e076 <_dtoa_r+0xdf6>
  40db5a:	454d      	cmp	r5, r9
  40db5c:	f000 811b 	beq.w	40dd96 <_dtoa_r+0xb16>
  40db60:	4650      	mov	r0, sl
  40db62:	4659      	mov	r1, fp
  40db64:	2200      	movs	r2, #0
  40db66:	4b62      	ldr	r3, [pc, #392]	; (40dcf0 <_dtoa_r+0xa70>)
  40db68:	f001 f9fa 	bl	40ef60 <__aeabi_dmul>
  40db6c:	2200      	movs	r2, #0
  40db6e:	4b60      	ldr	r3, [pc, #384]	; (40dcf0 <_dtoa_r+0xa70>)
  40db70:	4682      	mov	sl, r0
  40db72:	468b      	mov	fp, r1
  40db74:	4630      	mov	r0, r6
  40db76:	4639      	mov	r1, r7
  40db78:	f001 f9f2 	bl	40ef60 <__aeabi_dmul>
  40db7c:	460f      	mov	r7, r1
  40db7e:	4606      	mov	r6, r0
  40db80:	f001 fc00 	bl	40f384 <__aeabi_d2iz>
  40db84:	4604      	mov	r4, r0
  40db86:	f001 f985 	bl	40ee94 <__aeabi_i2d>
  40db8a:	4602      	mov	r2, r0
  40db8c:	460b      	mov	r3, r1
  40db8e:	4630      	mov	r0, r6
  40db90:	4639      	mov	r1, r7
  40db92:	f001 f831 	bl	40ebf8 <__aeabi_dsub>
  40db96:	3430      	adds	r4, #48	; 0x30
  40db98:	b2e4      	uxtb	r4, r4
  40db9a:	4652      	mov	r2, sl
  40db9c:	465b      	mov	r3, fp
  40db9e:	f805 4b01 	strb.w	r4, [r5], #1
  40dba2:	4606      	mov	r6, r0
  40dba4:	460f      	mov	r7, r1
  40dba6:	f7fa fa1b 	bl	407fe0 <__aeabi_dcmplt>
  40dbaa:	4632      	mov	r2, r6
  40dbac:	463b      	mov	r3, r7
  40dbae:	2800      	cmp	r0, #0
  40dbb0:	d0c8      	beq.n	40db44 <_dtoa_r+0x8c4>
  40dbb2:	9b12      	ldr	r3, [sp, #72]	; 0x48
  40dbb4:	f8dd b008 	ldr.w	fp, [sp, #8]
  40dbb8:	9304      	str	r3, [sp, #16]
  40dbba:	4644      	mov	r4, r8
  40dbbc:	e533      	b.n	40d626 <_dtoa_r+0x3a6>
  40dbbe:	2300      	movs	r3, #0
  40dbc0:	9309      	str	r3, [sp, #36]	; 0x24
  40dbc2:	9b21      	ldr	r3, [sp, #132]	; 0x84
  40dbc4:	9a04      	ldr	r2, [sp, #16]
  40dbc6:	4413      	add	r3, r2
  40dbc8:	930c      	str	r3, [sp, #48]	; 0x30
  40dbca:	3301      	adds	r3, #1
  40dbcc:	2b00      	cmp	r3, #0
  40dbce:	9306      	str	r3, [sp, #24]
  40dbd0:	f340 8109 	ble.w	40dde6 <_dtoa_r+0xb66>
  40dbd4:	9e06      	ldr	r6, [sp, #24]
  40dbd6:	4637      	mov	r7, r6
  40dbd8:	e6ef      	b.n	40d9ba <_dtoa_r+0x73a>
  40dbda:	2300      	movs	r3, #0
  40dbdc:	9309      	str	r3, [sp, #36]	; 0x24
  40dbde:	e6e4      	b.n	40d9aa <_dtoa_r+0x72a>
  40dbe0:	9b06      	ldr	r3, [sp, #24]
  40dbe2:	2b00      	cmp	r3, #0
  40dbe4:	f73f ac6d 	bgt.w	40d4c2 <_dtoa_r+0x242>
  40dbe8:	f040 8262 	bne.w	40e0b0 <_dtoa_r+0xe30>
  40dbec:	4640      	mov	r0, r8
  40dbee:	2200      	movs	r2, #0
  40dbf0:	4b40      	ldr	r3, [pc, #256]	; (40dcf4 <_dtoa_r+0xa74>)
  40dbf2:	4649      	mov	r1, r9
  40dbf4:	f001 f9b4 	bl	40ef60 <__aeabi_dmul>
  40dbf8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  40dbfc:	f7fa fa04 	bl	408008 <__aeabi_dcmpge>
  40dc00:	f8dd 8018 	ldr.w	r8, [sp, #24]
  40dc04:	4646      	mov	r6, r8
  40dc06:	2800      	cmp	r0, #0
  40dc08:	f000 808a 	beq.w	40dd20 <_dtoa_r+0xaa0>
  40dc0c:	9b21      	ldr	r3, [sp, #132]	; 0x84
  40dc0e:	9d07      	ldr	r5, [sp, #28]
  40dc10:	43db      	mvns	r3, r3
  40dc12:	9304      	str	r3, [sp, #16]
  40dc14:	4641      	mov	r1, r8
  40dc16:	4620      	mov	r0, r4
  40dc18:	f000 fb56 	bl	40e2c8 <_Bfree>
  40dc1c:	2e00      	cmp	r6, #0
  40dc1e:	f47f ae2c 	bne.w	40d87a <_dtoa_r+0x5fa>
  40dc22:	e500      	b.n	40d626 <_dtoa_r+0x3a6>
  40dc24:	4659      	mov	r1, fp
  40dc26:	4620      	mov	r0, r4
  40dc28:	f000 fc8c 	bl	40e544 <__pow5mult>
  40dc2c:	4683      	mov	fp, r0
  40dc2e:	e557      	b.n	40d6e0 <_dtoa_r+0x460>
  40dc30:	9b02      	ldr	r3, [sp, #8]
  40dc32:	2b00      	cmp	r3, #0
  40dc34:	f47f ad66 	bne.w	40d704 <_dtoa_r+0x484>
  40dc38:	9b03      	ldr	r3, [sp, #12]
  40dc3a:	f3c3 0313 	ubfx	r3, r3, #0, #20
  40dc3e:	2b00      	cmp	r3, #0
  40dc40:	f47f ad94 	bne.w	40d76c <_dtoa_r+0x4ec>
  40dc44:	9b03      	ldr	r3, [sp, #12]
  40dc46:	f023 4700 	bic.w	r7, r3, #2147483648	; 0x80000000
  40dc4a:	0d3f      	lsrs	r7, r7, #20
  40dc4c:	053f      	lsls	r7, r7, #20
  40dc4e:	2f00      	cmp	r7, #0
  40dc50:	f000 821a 	beq.w	40e088 <_dtoa_r+0xe08>
  40dc54:	9b05      	ldr	r3, [sp, #20]
  40dc56:	3301      	adds	r3, #1
  40dc58:	9305      	str	r3, [sp, #20]
  40dc5a:	f10a 0a01 	add.w	sl, sl, #1
  40dc5e:	f04f 0901 	mov.w	r9, #1
  40dc62:	e585      	b.n	40d770 <_dtoa_r+0x4f0>
  40dc64:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  40dc66:	2a00      	cmp	r2, #0
  40dc68:	f000 81a5 	beq.w	40dfb6 <_dtoa_r+0xd36>
  40dc6c:	f203 4333 	addw	r3, r3, #1075	; 0x433
  40dc70:	9f08      	ldr	r7, [sp, #32]
  40dc72:	9d05      	ldr	r5, [sp, #20]
  40dc74:	e4ff      	b.n	40d676 <_dtoa_r+0x3f6>
  40dc76:	f000 fb31 	bl	40e2dc <__multadd>
  40dc7a:	4657      	mov	r7, sl
  40dc7c:	4606      	mov	r6, r0
  40dc7e:	4681      	mov	r9, r0
  40dc80:	e631      	b.n	40d8e6 <_dtoa_r+0x666>
  40dc82:	4601      	mov	r1, r0
  40dc84:	4620      	mov	r0, r4
  40dc86:	f8cd c008 	str.w	ip, [sp, #8]
  40dc8a:	f000 fb1d 	bl	40e2c8 <_Bfree>
  40dc8e:	2201      	movs	r2, #1
  40dc90:	f8dd c008 	ldr.w	ip, [sp, #8]
  40dc94:	e654      	b.n	40d940 <_dtoa_r+0x6c0>
  40dc96:	4658      	mov	r0, fp
  40dc98:	4641      	mov	r1, r8
  40dc9a:	f000 fcf9 	bl	40e690 <__mcmp>
  40dc9e:	2800      	cmp	r0, #0
  40dca0:	f6bf ad91 	bge.w	40d7c6 <_dtoa_r+0x546>
  40dca4:	9f04      	ldr	r7, [sp, #16]
  40dca6:	4659      	mov	r1, fp
  40dca8:	2300      	movs	r3, #0
  40dcaa:	4620      	mov	r0, r4
  40dcac:	220a      	movs	r2, #10
  40dcae:	3f01      	subs	r7, #1
  40dcb0:	9704      	str	r7, [sp, #16]
  40dcb2:	f000 fb13 	bl	40e2dc <__multadd>
  40dcb6:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40dcb8:	4683      	mov	fp, r0
  40dcba:	2b00      	cmp	r3, #0
  40dcbc:	f47f adf0 	bne.w	40d8a0 <_dtoa_r+0x620>
  40dcc0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  40dcc2:	2b00      	cmp	r3, #0
  40dcc4:	f340 81f8 	ble.w	40e0b8 <_dtoa_r+0xe38>
  40dcc8:	9306      	str	r3, [sp, #24]
  40dcca:	e583      	b.n	40d7d4 <_dtoa_r+0x554>
  40dccc:	9807      	ldr	r0, [sp, #28]
  40dcce:	f7ff bb0b 	b.w	40d2e8 <_dtoa_r+0x68>
  40dcd2:	9b02      	ldr	r3, [sp, #8]
  40dcd4:	2b00      	cmp	r3, #0
  40dcd6:	f47f ad49 	bne.w	40d76c <_dtoa_r+0x4ec>
  40dcda:	e7ad      	b.n	40dc38 <_dtoa_r+0x9b8>
  40dcdc:	00411ca0 	.word	0x00411ca0
  40dce0:	00411d78 	.word	0x00411d78
  40dce4:	3ff00000 	.word	0x3ff00000
  40dce8:	401c0000 	.word	0x401c0000
  40dcec:	3fe00000 	.word	0x3fe00000
  40dcf0:	40240000 	.word	0x40240000
  40dcf4:	40140000 	.word	0x40140000
  40dcf8:	9b20      	ldr	r3, [sp, #128]	; 0x80
  40dcfa:	2b02      	cmp	r3, #2
  40dcfc:	f77f ad67 	ble.w	40d7ce <_dtoa_r+0x54e>
  40dd00:	9b06      	ldr	r3, [sp, #24]
  40dd02:	2b00      	cmp	r3, #0
  40dd04:	d182      	bne.n	40dc0c <_dtoa_r+0x98c>
  40dd06:	4641      	mov	r1, r8
  40dd08:	2205      	movs	r2, #5
  40dd0a:	4620      	mov	r0, r4
  40dd0c:	f000 fae6 	bl	40e2dc <__multadd>
  40dd10:	4680      	mov	r8, r0
  40dd12:	4641      	mov	r1, r8
  40dd14:	4658      	mov	r0, fp
  40dd16:	f000 fcbb 	bl	40e690 <__mcmp>
  40dd1a:	2800      	cmp	r0, #0
  40dd1c:	f77f af76 	ble.w	40dc0c <_dtoa_r+0x98c>
  40dd20:	9a04      	ldr	r2, [sp, #16]
  40dd22:	9907      	ldr	r1, [sp, #28]
  40dd24:	2331      	movs	r3, #49	; 0x31
  40dd26:	3201      	adds	r2, #1
  40dd28:	9204      	str	r2, [sp, #16]
  40dd2a:	700b      	strb	r3, [r1, #0]
  40dd2c:	1c4d      	adds	r5, r1, #1
  40dd2e:	e771      	b.n	40dc14 <_dtoa_r+0x994>
  40dd30:	9a04      	ldr	r2, [sp, #16]
  40dd32:	3201      	adds	r2, #1
  40dd34:	9204      	str	r2, [sp, #16]
  40dd36:	9a07      	ldr	r2, [sp, #28]
  40dd38:	2331      	movs	r3, #49	; 0x31
  40dd3a:	7013      	strb	r3, [r2, #0]
  40dd3c:	e58d      	b.n	40d85a <_dtoa_r+0x5da>
  40dd3e:	f8dd b008 	ldr.w	fp, [sp, #8]
  40dd42:	9c05      	ldr	r4, [sp, #20]
  40dd44:	e46f      	b.n	40d626 <_dtoa_r+0x3a6>
  40dd46:	4640      	mov	r0, r8
  40dd48:	f001 f8a4 	bl	40ee94 <__aeabi_i2d>
  40dd4c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  40dd50:	f001 f906 	bl	40ef60 <__aeabi_dmul>
  40dd54:	2200      	movs	r2, #0
  40dd56:	4bbc      	ldr	r3, [pc, #752]	; (40e048 <_dtoa_r+0xdc8>)
  40dd58:	f000 ff50 	bl	40ebfc <__adddf3>
  40dd5c:	4606      	mov	r6, r0
  40dd5e:	f1a1 7750 	sub.w	r7, r1, #54525952	; 0x3400000
  40dd62:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  40dd66:	2200      	movs	r2, #0
  40dd68:	4bb8      	ldr	r3, [pc, #736]	; (40e04c <_dtoa_r+0xdcc>)
  40dd6a:	f000 ff45 	bl	40ebf8 <__aeabi_dsub>
  40dd6e:	4632      	mov	r2, r6
  40dd70:	463b      	mov	r3, r7
  40dd72:	e9cd 0102 	strd	r0, r1, [sp, #8]
  40dd76:	f7fa f951 	bl	40801c <__aeabi_dcmpgt>
  40dd7a:	4680      	mov	r8, r0
  40dd7c:	2800      	cmp	r0, #0
  40dd7e:	f040 80b3 	bne.w	40dee8 <_dtoa_r+0xc68>
  40dd82:	4632      	mov	r2, r6
  40dd84:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
  40dd88:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  40dd8c:	f7fa f928 	bl	407fe0 <__aeabi_dcmplt>
  40dd90:	b130      	cbz	r0, 40dda0 <_dtoa_r+0xb20>
  40dd92:	4646      	mov	r6, r8
  40dd94:	e73a      	b.n	40dc0c <_dtoa_r+0x98c>
  40dd96:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
  40dd9a:	f8dd b008 	ldr.w	fp, [sp, #8]
  40dd9e:	4644      	mov	r4, r8
  40dda0:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
  40dda4:	e9cd 2302 	strd	r2, r3, [sp, #8]
  40dda8:	f7ff bb7a 	b.w	40d4a0 <_dtoa_r+0x220>
  40ddac:	4659      	mov	r1, fp
  40ddae:	9a08      	ldr	r2, [sp, #32]
  40ddb0:	4620      	mov	r0, r4
  40ddb2:	f000 fbc7 	bl	40e544 <__pow5mult>
  40ddb6:	4683      	mov	fp, r0
  40ddb8:	e492      	b.n	40d6e0 <_dtoa_r+0x460>
  40ddba:	9b08      	ldr	r3, [sp, #32]
  40ddbc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  40ddbe:	9708      	str	r7, [sp, #32]
  40ddc0:	1afb      	subs	r3, r7, r3
  40ddc2:	441a      	add	r2, r3
  40ddc4:	920a      	str	r2, [sp, #40]	; 0x28
  40ddc6:	2700      	movs	r7, #0
  40ddc8:	e44f      	b.n	40d66a <_dtoa_r+0x3ea>
  40ddca:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
  40ddce:	f04f 0802 	mov.w	r8, #2
  40ddd2:	e9cd 2302 	strd	r2, r3, [sp, #8]
  40ddd6:	e62a      	b.n	40da2e <_dtoa_r+0x7ae>
  40ddd8:	2601      	movs	r6, #1
  40ddda:	9621      	str	r6, [sp, #132]	; 0x84
  40dddc:	960c      	str	r6, [sp, #48]	; 0x30
  40ddde:	9606      	str	r6, [sp, #24]
  40dde0:	2100      	movs	r1, #0
  40dde2:	6461      	str	r1, [r4, #68]	; 0x44
  40dde4:	e5f8      	b.n	40d9d8 <_dtoa_r+0x758>
  40dde6:	461e      	mov	r6, r3
  40dde8:	e7fa      	b.n	40dde0 <_dtoa_r+0xb60>
  40ddea:	2a00      	cmp	r2, #0
  40ddec:	dd15      	ble.n	40de1a <_dtoa_r+0xb9a>
  40ddee:	4659      	mov	r1, fp
  40ddf0:	2201      	movs	r2, #1
  40ddf2:	4620      	mov	r0, r4
  40ddf4:	f8cd c008 	str.w	ip, [sp, #8]
  40ddf8:	f000 fbf4 	bl	40e5e4 <__lshift>
  40ddfc:	4641      	mov	r1, r8
  40ddfe:	4683      	mov	fp, r0
  40de00:	f000 fc46 	bl	40e690 <__mcmp>
  40de04:	2800      	cmp	r0, #0
  40de06:	f8dd c008 	ldr.w	ip, [sp, #8]
  40de0a:	f340 814a 	ble.w	40e0a2 <_dtoa_r+0xe22>
  40de0e:	f1bc 0f39 	cmp.w	ip, #57	; 0x39
  40de12:	f000 8106 	beq.w	40e022 <_dtoa_r+0xda2>
  40de16:	f10c 0c01 	add.w	ip, ip, #1
  40de1a:	46b2      	mov	sl, r6
  40de1c:	f887 c000 	strb.w	ip, [r7]
  40de20:	1c7d      	adds	r5, r7, #1
  40de22:	464e      	mov	r6, r9
  40de24:	e519      	b.n	40d85a <_dtoa_r+0x5da>
  40de26:	d104      	bne.n	40de32 <_dtoa_r+0xbb2>
  40de28:	f01c 0f01 	tst.w	ip, #1
  40de2c:	d001      	beq.n	40de32 <_dtoa_r+0xbb2>
  40de2e:	e504      	b.n	40d83a <_dtoa_r+0x5ba>
  40de30:	4615      	mov	r5, r2
  40de32:	f815 3c01 	ldrb.w	r3, [r5, #-1]
  40de36:	2b30      	cmp	r3, #48	; 0x30
  40de38:	f105 32ff 	add.w	r2, r5, #4294967295
  40de3c:	d0f8      	beq.n	40de30 <_dtoa_r+0xbb0>
  40de3e:	e50c      	b.n	40d85a <_dtoa_r+0x5da>
  40de40:	9b04      	ldr	r3, [sp, #16]
  40de42:	425d      	negs	r5, r3
  40de44:	2d00      	cmp	r5, #0
  40de46:	f000 80bd 	beq.w	40dfc4 <_dtoa_r+0xd44>
  40de4a:	4b81      	ldr	r3, [pc, #516]	; (40e050 <_dtoa_r+0xdd0>)
  40de4c:	f005 020f 	and.w	r2, r5, #15
  40de50:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  40de54:	e9d3 2300 	ldrd	r2, r3, [r3]
  40de58:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
  40de5c:	f001 f880 	bl	40ef60 <__aeabi_dmul>
  40de60:	112d      	asrs	r5, r5, #4
  40de62:	e9cd 0102 	strd	r0, r1, [sp, #8]
  40de66:	f000 812c 	beq.w	40e0c2 <_dtoa_r+0xe42>
  40de6a:	4e7a      	ldr	r6, [pc, #488]	; (40e054 <_dtoa_r+0xdd4>)
  40de6c:	f04f 0802 	mov.w	r8, #2
  40de70:	07eb      	lsls	r3, r5, #31
  40de72:	d505      	bpl.n	40de80 <_dtoa_r+0xc00>
  40de74:	e9d6 2300 	ldrd	r2, r3, [r6]
  40de78:	f108 0801 	add.w	r8, r8, #1
  40de7c:	f001 f870 	bl	40ef60 <__aeabi_dmul>
  40de80:	106d      	asrs	r5, r5, #1
  40de82:	f106 0608 	add.w	r6, r6, #8
  40de86:	d1f3      	bne.n	40de70 <_dtoa_r+0xbf0>
  40de88:	e9cd 0102 	strd	r0, r1, [sp, #8]
  40de8c:	e5ea      	b.n	40da64 <_dtoa_r+0x7e4>
  40de8e:	9a04      	ldr	r2, [sp, #16]
  40de90:	3201      	adds	r2, #1
  40de92:	9204      	str	r2, [sp, #16]
  40de94:	9a07      	ldr	r2, [sp, #28]
  40de96:	2330      	movs	r3, #48	; 0x30
  40de98:	7013      	strb	r3, [r2, #0]
  40de9a:	2331      	movs	r3, #49	; 0x31
  40de9c:	7013      	strb	r3, [r2, #0]
  40de9e:	f7ff bbc2 	b.w	40d626 <_dtoa_r+0x3a6>
  40dea2:	6871      	ldr	r1, [r6, #4]
  40dea4:	4620      	mov	r0, r4
  40dea6:	f000 f9e9 	bl	40e27c <_Balloc>
  40deaa:	6933      	ldr	r3, [r6, #16]
  40deac:	1c9a      	adds	r2, r3, #2
  40deae:	4605      	mov	r5, r0
  40deb0:	0092      	lsls	r2, r2, #2
  40deb2:	f106 010c 	add.w	r1, r6, #12
  40deb6:	300c      	adds	r0, #12
  40deb8:	f7fb f934 	bl	409124 <memcpy>
  40debc:	4620      	mov	r0, r4
  40debe:	4629      	mov	r1, r5
  40dec0:	2201      	movs	r2, #1
  40dec2:	f000 fb8f 	bl	40e5e4 <__lshift>
  40dec6:	4681      	mov	r9, r0
  40dec8:	e503      	b.n	40d8d2 <_dtoa_r+0x652>
  40deca:	f1bc 0f39 	cmp.w	ip, #57	; 0x39
  40dece:	f000 80a8 	beq.w	40e022 <_dtoa_r+0xda2>
  40ded2:	f10c 0c01 	add.w	ip, ip, #1
  40ded6:	46b2      	mov	sl, r6
  40ded8:	f887 c000 	strb.w	ip, [r7]
  40dedc:	1c7d      	adds	r5, r7, #1
  40dede:	464e      	mov	r6, r9
  40dee0:	e4bb      	b.n	40d85a <_dtoa_r+0x5da>
  40dee2:	46b2      	mov	sl, r6
  40dee4:	464e      	mov	r6, r9
  40dee6:	e498      	b.n	40d81a <_dtoa_r+0x59a>
  40dee8:	f04f 0800 	mov.w	r8, #0
  40deec:	4646      	mov	r6, r8
  40deee:	e717      	b.n	40dd20 <_dtoa_r+0xaa0>
  40def0:	4957      	ldr	r1, [pc, #348]	; (40e050 <_dtoa_r+0xdd0>)
  40def2:	f109 33ff 	add.w	r3, r9, #4294967295
  40def6:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
  40defa:	4632      	mov	r2, r6
  40defc:	9313      	str	r3, [sp, #76]	; 0x4c
  40defe:	e9d1 0100 	ldrd	r0, r1, [r1]
  40df02:	463b      	mov	r3, r7
  40df04:	f001 f82c 	bl	40ef60 <__aeabi_dmul>
  40df08:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
  40df0c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
  40df10:	4639      	mov	r1, r7
  40df12:	4630      	mov	r0, r6
  40df14:	f001 fa36 	bl	40f384 <__aeabi_d2iz>
  40df18:	4605      	mov	r5, r0
  40df1a:	f000 ffbb 	bl	40ee94 <__aeabi_i2d>
  40df1e:	4602      	mov	r2, r0
  40df20:	460b      	mov	r3, r1
  40df22:	4630      	mov	r0, r6
  40df24:	4639      	mov	r1, r7
  40df26:	f000 fe67 	bl	40ebf8 <__aeabi_dsub>
  40df2a:	9a07      	ldr	r2, [sp, #28]
  40df2c:	3530      	adds	r5, #48	; 0x30
  40df2e:	f1b9 0f01 	cmp.w	r9, #1
  40df32:	7015      	strb	r5, [r2, #0]
  40df34:	4606      	mov	r6, r0
  40df36:	460f      	mov	r7, r1
  40df38:	f102 0501 	add.w	r5, r2, #1
  40df3c:	d023      	beq.n	40df86 <_dtoa_r+0xd06>
  40df3e:	9b07      	ldr	r3, [sp, #28]
  40df40:	f8cd a008 	str.w	sl, [sp, #8]
  40df44:	444b      	add	r3, r9
  40df46:	465e      	mov	r6, fp
  40df48:	469a      	mov	sl, r3
  40df4a:	46ab      	mov	fp, r5
  40df4c:	2200      	movs	r2, #0
  40df4e:	4b42      	ldr	r3, [pc, #264]	; (40e058 <_dtoa_r+0xdd8>)
  40df50:	f001 f806 	bl	40ef60 <__aeabi_dmul>
  40df54:	4689      	mov	r9, r1
  40df56:	4680      	mov	r8, r0
  40df58:	f001 fa14 	bl	40f384 <__aeabi_d2iz>
  40df5c:	4607      	mov	r7, r0
  40df5e:	f000 ff99 	bl	40ee94 <__aeabi_i2d>
  40df62:	3730      	adds	r7, #48	; 0x30
  40df64:	4602      	mov	r2, r0
  40df66:	460b      	mov	r3, r1
  40df68:	4640      	mov	r0, r8
  40df6a:	4649      	mov	r1, r9
  40df6c:	f000 fe44 	bl	40ebf8 <__aeabi_dsub>
  40df70:	f80b 7b01 	strb.w	r7, [fp], #1
  40df74:	45d3      	cmp	fp, sl
  40df76:	d1e9      	bne.n	40df4c <_dtoa_r+0xccc>
  40df78:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  40df7a:	f8dd a008 	ldr.w	sl, [sp, #8]
  40df7e:	46b3      	mov	fp, r6
  40df80:	460f      	mov	r7, r1
  40df82:	4606      	mov	r6, r0
  40df84:	441d      	add	r5, r3
  40df86:	2200      	movs	r2, #0
  40df88:	4b34      	ldr	r3, [pc, #208]	; (40e05c <_dtoa_r+0xddc>)
  40df8a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
  40df8e:	f000 fe35 	bl	40ebfc <__adddf3>
  40df92:	4632      	mov	r2, r6
  40df94:	463b      	mov	r3, r7
  40df96:	f7fa f823 	bl	407fe0 <__aeabi_dcmplt>
  40df9a:	2800      	cmp	r0, #0
  40df9c:	d047      	beq.n	40e02e <_dtoa_r+0xdae>
  40df9e:	9b12      	ldr	r3, [sp, #72]	; 0x48
  40dfa0:	9304      	str	r3, [sp, #16]
  40dfa2:	f815 8c01 	ldrb.w	r8, [r5, #-1]
  40dfa6:	f7ff bb2c 	b.w	40d602 <_dtoa_r+0x382>
  40dfaa:	9b05      	ldr	r3, [sp, #20]
  40dfac:	9a06      	ldr	r2, [sp, #24]
  40dfae:	1a9d      	subs	r5, r3, r2
  40dfb0:	2300      	movs	r3, #0
  40dfb2:	f7ff bb60 	b.w	40d676 <_dtoa_r+0x3f6>
  40dfb6:	9b14      	ldr	r3, [sp, #80]	; 0x50
  40dfb8:	9f08      	ldr	r7, [sp, #32]
  40dfba:	9d05      	ldr	r5, [sp, #20]
  40dfbc:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
  40dfc0:	f7ff bb59 	b.w	40d676 <_dtoa_r+0x3f6>
  40dfc4:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
  40dfc8:	f04f 0802 	mov.w	r8, #2
  40dfcc:	e9cd 2302 	strd	r2, r3, [sp, #8]
  40dfd0:	e548      	b.n	40da64 <_dtoa_r+0x7e4>
  40dfd2:	9b06      	ldr	r3, [sp, #24]
  40dfd4:	2b00      	cmp	r3, #0
  40dfd6:	f43f aeb6 	beq.w	40dd46 <_dtoa_r+0xac6>
  40dfda:	9d0c      	ldr	r5, [sp, #48]	; 0x30
  40dfdc:	2d00      	cmp	r5, #0
  40dfde:	f77f aedf 	ble.w	40dda0 <_dtoa_r+0xb20>
  40dfe2:	2200      	movs	r2, #0
  40dfe4:	4b1c      	ldr	r3, [pc, #112]	; (40e058 <_dtoa_r+0xdd8>)
  40dfe6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  40dfea:	f000 ffb9 	bl	40ef60 <__aeabi_dmul>
  40dfee:	4606      	mov	r6, r0
  40dff0:	460f      	mov	r7, r1
  40dff2:	f108 0001 	add.w	r0, r8, #1
  40dff6:	e9cd 6702 	strd	r6, r7, [sp, #8]
  40dffa:	f000 ff4b 	bl	40ee94 <__aeabi_i2d>
  40dffe:	4602      	mov	r2, r0
  40e000:	460b      	mov	r3, r1
  40e002:	4630      	mov	r0, r6
  40e004:	4639      	mov	r1, r7
  40e006:	f000 ffab 	bl	40ef60 <__aeabi_dmul>
  40e00a:	4b0f      	ldr	r3, [pc, #60]	; (40e048 <_dtoa_r+0xdc8>)
  40e00c:	2200      	movs	r2, #0
  40e00e:	f000 fdf5 	bl	40ebfc <__adddf3>
  40e012:	9b04      	ldr	r3, [sp, #16]
  40e014:	3b01      	subs	r3, #1
  40e016:	4606      	mov	r6, r0
  40e018:	f1a1 7750 	sub.w	r7, r1, #54525952	; 0x3400000
  40e01c:	9312      	str	r3, [sp, #72]	; 0x48
  40e01e:	46a9      	mov	r9, r5
  40e020:	e541      	b.n	40daa6 <_dtoa_r+0x826>
  40e022:	2239      	movs	r2, #57	; 0x39
  40e024:	46b2      	mov	sl, r6
  40e026:	703a      	strb	r2, [r7, #0]
  40e028:	464e      	mov	r6, r9
  40e02a:	1c7d      	adds	r5, r7, #1
  40e02c:	e407      	b.n	40d83e <_dtoa_r+0x5be>
  40e02e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
  40e032:	2000      	movs	r0, #0
  40e034:	4909      	ldr	r1, [pc, #36]	; (40e05c <_dtoa_r+0xddc>)
  40e036:	f000 fddf 	bl	40ebf8 <__aeabi_dsub>
  40e03a:	4632      	mov	r2, r6
  40e03c:	463b      	mov	r3, r7
  40e03e:	f7f9 ffed 	bl	40801c <__aeabi_dcmpgt>
  40e042:	b970      	cbnz	r0, 40e062 <_dtoa_r+0xde2>
  40e044:	e6ac      	b.n	40dda0 <_dtoa_r+0xb20>
  40e046:	bf00      	nop
  40e048:	401c0000 	.word	0x401c0000
  40e04c:	40140000 	.word	0x40140000
  40e050:	00411ca0 	.word	0x00411ca0
  40e054:	00411d78 	.word	0x00411d78
  40e058:	40240000 	.word	0x40240000
  40e05c:	3fe00000 	.word	0x3fe00000
  40e060:	4615      	mov	r5, r2
  40e062:	f815 3c01 	ldrb.w	r3, [r5, #-1]
  40e066:	2b30      	cmp	r3, #48	; 0x30
  40e068:	f105 32ff 	add.w	r2, r5, #4294967295
  40e06c:	d0f8      	beq.n	40e060 <_dtoa_r+0xde0>
  40e06e:	9b12      	ldr	r3, [sp, #72]	; 0x48
  40e070:	9304      	str	r3, [sp, #16]
  40e072:	f7ff bad8 	b.w	40d626 <_dtoa_r+0x3a6>
  40e076:	4643      	mov	r3, r8
  40e078:	f8dd b008 	ldr.w	fp, [sp, #8]
  40e07c:	46a0      	mov	r8, r4
  40e07e:	461c      	mov	r4, r3
  40e080:	9b12      	ldr	r3, [sp, #72]	; 0x48
  40e082:	9304      	str	r3, [sp, #16]
  40e084:	f7ff babd 	b.w	40d602 <_dtoa_r+0x382>
  40e088:	46b9      	mov	r9, r7
  40e08a:	f7ff bb71 	b.w	40d770 <_dtoa_r+0x4f0>
  40e08e:	f1bc 0f39 	cmp.w	ip, #57	; 0x39
  40e092:	d0c6      	beq.n	40e022 <_dtoa_r+0xda2>
  40e094:	f1ba 0f00 	cmp.w	sl, #0
  40e098:	f77f aebf 	ble.w	40de1a <_dtoa_r+0xb9a>
  40e09c:	f105 0c31 	add.w	ip, r5, #49	; 0x31
  40e0a0:	e6bb      	b.n	40de1a <_dtoa_r+0xb9a>
  40e0a2:	f47f aeba 	bne.w	40de1a <_dtoa_r+0xb9a>
  40e0a6:	f01c 0f01 	tst.w	ip, #1
  40e0aa:	f43f aeb6 	beq.w	40de1a <_dtoa_r+0xb9a>
  40e0ae:	e6ae      	b.n	40de0e <_dtoa_r+0xb8e>
  40e0b0:	f04f 0800 	mov.w	r8, #0
  40e0b4:	4646      	mov	r6, r8
  40e0b6:	e5a9      	b.n	40dc0c <_dtoa_r+0x98c>
  40e0b8:	9b20      	ldr	r3, [sp, #128]	; 0x80
  40e0ba:	2b02      	cmp	r3, #2
  40e0bc:	dc04      	bgt.n	40e0c8 <_dtoa_r+0xe48>
  40e0be:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  40e0c0:	e602      	b.n	40dcc8 <_dtoa_r+0xa48>
  40e0c2:	f04f 0802 	mov.w	r8, #2
  40e0c6:	e4cd      	b.n	40da64 <_dtoa_r+0x7e4>
  40e0c8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  40e0ca:	9306      	str	r3, [sp, #24]
  40e0cc:	e618      	b.n	40dd00 <_dtoa_r+0xa80>
  40e0ce:	9b20      	ldr	r3, [sp, #128]	; 0x80
  40e0d0:	2b02      	cmp	r3, #2
  40e0d2:	dcf9      	bgt.n	40e0c8 <_dtoa_r+0xe48>
  40e0d4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  40e0d6:	f7ff bbee 	b.w	40d8b6 <_dtoa_r+0x636>
  40e0da:	2500      	movs	r5, #0
  40e0dc:	6465      	str	r5, [r4, #68]	; 0x44
  40e0de:	4629      	mov	r1, r5
  40e0e0:	4620      	mov	r0, r4
  40e0e2:	f000 f8cb 	bl	40e27c <_Balloc>
  40e0e6:	f04f 33ff 	mov.w	r3, #4294967295
  40e0ea:	9306      	str	r3, [sp, #24]
  40e0ec:	930c      	str	r3, [sp, #48]	; 0x30
  40e0ee:	2301      	movs	r3, #1
  40e0f0:	9007      	str	r0, [sp, #28]
  40e0f2:	9521      	str	r5, [sp, #132]	; 0x84
  40e0f4:	6420      	str	r0, [r4, #64]	; 0x40
  40e0f6:	9309      	str	r3, [sp, #36]	; 0x24
  40e0f8:	f7ff b9d2 	b.w	40d4a0 <_dtoa_r+0x220>
  40e0fc:	f43f ab4d 	beq.w	40d79a <_dtoa_r+0x51a>
  40e100:	f1c0 003c 	rsb	r0, r0, #60	; 0x3c
  40e104:	f7ff bb44 	b.w	40d790 <_dtoa_r+0x510>
  40e108:	2301      	movs	r3, #1
  40e10a:	9309      	str	r3, [sp, #36]	; 0x24
  40e10c:	e559      	b.n	40dbc2 <_dtoa_r+0x942>
  40e10e:	2501      	movs	r5, #1
  40e110:	f7ff b990 	b.w	40d434 <_dtoa_r+0x1b4>

0040e114 <__libc_fini_array>:
  40e114:	b538      	push	{r3, r4, r5, lr}
  40e116:	4b08      	ldr	r3, [pc, #32]	; (40e138 <__libc_fini_array+0x24>)
  40e118:	4d08      	ldr	r5, [pc, #32]	; (40e13c <__libc_fini_array+0x28>)
  40e11a:	1aed      	subs	r5, r5, r3
  40e11c:	10ac      	asrs	r4, r5, #2
  40e11e:	bf18      	it	ne
  40e120:	18ed      	addne	r5, r5, r3
  40e122:	d005      	beq.n	40e130 <__libc_fini_array+0x1c>
  40e124:	3c01      	subs	r4, #1
  40e126:	f855 3d04 	ldr.w	r3, [r5, #-4]!
  40e12a:	4798      	blx	r3
  40e12c:	2c00      	cmp	r4, #0
  40e12e:	d1f9      	bne.n	40e124 <__libc_fini_array+0x10>
  40e130:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  40e134:	f003 be3e 	b.w	411db4 <_fini>
  40e138:	00411dc0 	.word	0x00411dc0
  40e13c:	00411dc4 	.word	0x00411dc4

0040e140 <__fputwc>:
  40e140:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40e144:	b082      	sub	sp, #8
  40e146:	4607      	mov	r7, r0
  40e148:	460e      	mov	r6, r1
  40e14a:	4614      	mov	r4, r2
  40e14c:	f000 f878 	bl	40e240 <__locale_mb_cur_max>
  40e150:	2801      	cmp	r0, #1
  40e152:	d041      	beq.n	40e1d8 <__fputwc+0x98>
  40e154:	4638      	mov	r0, r7
  40e156:	a901      	add	r1, sp, #4
  40e158:	4632      	mov	r2, r6
  40e15a:	f104 035c 	add.w	r3, r4, #92	; 0x5c
  40e15e:	f000 fc8d 	bl	40ea7c <_wcrtomb_r>
  40e162:	f1b0 3fff 	cmp.w	r0, #4294967295
  40e166:	4680      	mov	r8, r0
  40e168:	d02f      	beq.n	40e1ca <__fputwc+0x8a>
  40e16a:	2800      	cmp	r0, #0
  40e16c:	d03c      	beq.n	40e1e8 <__fputwc+0xa8>
  40e16e:	f89d 1004 	ldrb.w	r1, [sp, #4]
  40e172:	2500      	movs	r5, #0
  40e174:	e009      	b.n	40e18a <__fputwc+0x4a>
  40e176:	6823      	ldr	r3, [r4, #0]
  40e178:	7019      	strb	r1, [r3, #0]
  40e17a:	6823      	ldr	r3, [r4, #0]
  40e17c:	3301      	adds	r3, #1
  40e17e:	6023      	str	r3, [r4, #0]
  40e180:	3501      	adds	r5, #1
  40e182:	45a8      	cmp	r8, r5
  40e184:	d930      	bls.n	40e1e8 <__fputwc+0xa8>
  40e186:	ab01      	add	r3, sp, #4
  40e188:	5d59      	ldrb	r1, [r3, r5]
  40e18a:	68a3      	ldr	r3, [r4, #8]
  40e18c:	3b01      	subs	r3, #1
  40e18e:	2b00      	cmp	r3, #0
  40e190:	60a3      	str	r3, [r4, #8]
  40e192:	daf0      	bge.n	40e176 <__fputwc+0x36>
  40e194:	69a2      	ldr	r2, [r4, #24]
  40e196:	4293      	cmp	r3, r2
  40e198:	db07      	blt.n	40e1aa <__fputwc+0x6a>
  40e19a:	6823      	ldr	r3, [r4, #0]
  40e19c:	7019      	strb	r1, [r3, #0]
  40e19e:	6823      	ldr	r3, [r4, #0]
  40e1a0:	7819      	ldrb	r1, [r3, #0]
  40e1a2:	290a      	cmp	r1, #10
  40e1a4:	f103 0301 	add.w	r3, r3, #1
  40e1a8:	d1e9      	bne.n	40e17e <__fputwc+0x3e>
  40e1aa:	4638      	mov	r0, r7
  40e1ac:	4622      	mov	r2, r4
  40e1ae:	f7fe fedd 	bl	40cf6c <__swbuf_r>
  40e1b2:	f1a0 30ff 	sub.w	r0, r0, #4294967295
  40e1b6:	fab0 f080 	clz	r0, r0
  40e1ba:	0940      	lsrs	r0, r0, #5
  40e1bc:	2800      	cmp	r0, #0
  40e1be:	d0df      	beq.n	40e180 <__fputwc+0x40>
  40e1c0:	f04f 30ff 	mov.w	r0, #4294967295
  40e1c4:	b002      	add	sp, #8
  40e1c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40e1ca:	89a3      	ldrh	r3, [r4, #12]
  40e1cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40e1d0:	81a3      	strh	r3, [r4, #12]
  40e1d2:	b002      	add	sp, #8
  40e1d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40e1d8:	1e73      	subs	r3, r6, #1
  40e1da:	2bfe      	cmp	r3, #254	; 0xfe
  40e1dc:	d8ba      	bhi.n	40e154 <__fputwc+0x14>
  40e1de:	b2f1      	uxtb	r1, r6
  40e1e0:	4680      	mov	r8, r0
  40e1e2:	f88d 1004 	strb.w	r1, [sp, #4]
  40e1e6:	e7c4      	b.n	40e172 <__fputwc+0x32>
  40e1e8:	4630      	mov	r0, r6
  40e1ea:	b002      	add	sp, #8
  40e1ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0040e1f0 <_fputwc_r>:
  40e1f0:	8993      	ldrh	r3, [r2, #12]
  40e1f2:	f413 5f00 	tst.w	r3, #8192	; 0x2000
  40e1f6:	d10b      	bne.n	40e210 <_fputwc_r+0x20>
  40e1f8:	b410      	push	{r4}
  40e1fa:	6e54      	ldr	r4, [r2, #100]	; 0x64
  40e1fc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
  40e200:	f444 5400 	orr.w	r4, r4, #8192	; 0x2000
  40e204:	6654      	str	r4, [r2, #100]	; 0x64
  40e206:	8193      	strh	r3, [r2, #12]
  40e208:	f85d 4b04 	ldr.w	r4, [sp], #4
  40e20c:	f7ff bf98 	b.w	40e140 <__fputwc>
  40e210:	f7ff bf96 	b.w	40e140 <__fputwc>

0040e214 <_isatty_r>:
  40e214:	b538      	push	{r3, r4, r5, lr}
  40e216:	4c07      	ldr	r4, [pc, #28]	; (40e234 <_isatty_r+0x20>)
  40e218:	2300      	movs	r3, #0
  40e21a:	4605      	mov	r5, r0
  40e21c:	4608      	mov	r0, r1
  40e21e:	6023      	str	r3, [r4, #0]
  40e220:	f7f3 f90c 	bl	40143c <_isatty>
  40e224:	1c43      	adds	r3, r0, #1
  40e226:	d000      	beq.n	40e22a <_isatty_r+0x16>
  40e228:	bd38      	pop	{r3, r4, r5, pc}
  40e22a:	6823      	ldr	r3, [r4, #0]
  40e22c:	2b00      	cmp	r3, #0
  40e22e:	d0fb      	beq.n	40e228 <_isatty_r+0x14>
  40e230:	602b      	str	r3, [r5, #0]
  40e232:	bd38      	pop	{r3, r4, r5, pc}
  40e234:	2000aed8 	.word	0x2000aed8

0040e238 <__locale_charset>:
  40e238:	4800      	ldr	r0, [pc, #0]	; (40e23c <__locale_charset+0x4>)
  40e23a:	4770      	bx	lr
  40e23c:	2000088c 	.word	0x2000088c

0040e240 <__locale_mb_cur_max>:
  40e240:	4b01      	ldr	r3, [pc, #4]	; (40e248 <__locale_mb_cur_max+0x8>)
  40e242:	6818      	ldr	r0, [r3, #0]
  40e244:	4770      	bx	lr
  40e246:	bf00      	nop
  40e248:	200008ac 	.word	0x200008ac

0040e24c <_localeconv_r>:
  40e24c:	4800      	ldr	r0, [pc, #0]	; (40e250 <_localeconv_r+0x4>)
  40e24e:	4770      	bx	lr
  40e250:	20000854 	.word	0x20000854

0040e254 <_lseek_r>:
  40e254:	b570      	push	{r4, r5, r6, lr}
  40e256:	4c08      	ldr	r4, [pc, #32]	; (40e278 <_lseek_r+0x24>)
  40e258:	4606      	mov	r6, r0
  40e25a:	2500      	movs	r5, #0
  40e25c:	4608      	mov	r0, r1
  40e25e:	4611      	mov	r1, r2
  40e260:	461a      	mov	r2, r3
  40e262:	6025      	str	r5, [r4, #0]
  40e264:	f7f3 f8ec 	bl	401440 <_lseek>
  40e268:	1c43      	adds	r3, r0, #1
  40e26a:	d000      	beq.n	40e26e <_lseek_r+0x1a>
  40e26c:	bd70      	pop	{r4, r5, r6, pc}
  40e26e:	6823      	ldr	r3, [r4, #0]
  40e270:	2b00      	cmp	r3, #0
  40e272:	d0fb      	beq.n	40e26c <_lseek_r+0x18>
  40e274:	6033      	str	r3, [r6, #0]
  40e276:	bd70      	pop	{r4, r5, r6, pc}
  40e278:	2000aed8 	.word	0x2000aed8

0040e27c <_Balloc>:
  40e27c:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
  40e27e:	b570      	push	{r4, r5, r6, lr}
  40e280:	4605      	mov	r5, r0
  40e282:	460c      	mov	r4, r1
  40e284:	b14b      	cbz	r3, 40e29a <_Balloc+0x1e>
  40e286:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
  40e28a:	b180      	cbz	r0, 40e2ae <_Balloc+0x32>
  40e28c:	6802      	ldr	r2, [r0, #0]
  40e28e:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
  40e292:	2300      	movs	r3, #0
  40e294:	6103      	str	r3, [r0, #16]
  40e296:	60c3      	str	r3, [r0, #12]
  40e298:	bd70      	pop	{r4, r5, r6, pc}
  40e29a:	2104      	movs	r1, #4
  40e29c:	2221      	movs	r2, #33	; 0x21
  40e29e:	f000 fc77 	bl	40eb90 <_calloc_r>
  40e2a2:	64e8      	str	r0, [r5, #76]	; 0x4c
  40e2a4:	4603      	mov	r3, r0
  40e2a6:	2800      	cmp	r0, #0
  40e2a8:	d1ed      	bne.n	40e286 <_Balloc+0xa>
  40e2aa:	2000      	movs	r0, #0
  40e2ac:	bd70      	pop	{r4, r5, r6, pc}
  40e2ae:	2101      	movs	r1, #1
  40e2b0:	fa01 f604 	lsl.w	r6, r1, r4
  40e2b4:	1d72      	adds	r2, r6, #5
  40e2b6:	4628      	mov	r0, r5
  40e2b8:	0092      	lsls	r2, r2, #2
  40e2ba:	f000 fc69 	bl	40eb90 <_calloc_r>
  40e2be:	2800      	cmp	r0, #0
  40e2c0:	d0f3      	beq.n	40e2aa <_Balloc+0x2e>
  40e2c2:	6044      	str	r4, [r0, #4]
  40e2c4:	6086      	str	r6, [r0, #8]
  40e2c6:	e7e4      	b.n	40e292 <_Balloc+0x16>

0040e2c8 <_Bfree>:
  40e2c8:	b131      	cbz	r1, 40e2d8 <_Bfree+0x10>
  40e2ca:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
  40e2cc:	684a      	ldr	r2, [r1, #4]
  40e2ce:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
  40e2d2:	6008      	str	r0, [r1, #0]
  40e2d4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  40e2d8:	4770      	bx	lr
  40e2da:	bf00      	nop

0040e2dc <__multadd>:
  40e2dc:	b5f0      	push	{r4, r5, r6, r7, lr}
  40e2de:	690c      	ldr	r4, [r1, #16]
  40e2e0:	b083      	sub	sp, #12
  40e2e2:	460d      	mov	r5, r1
  40e2e4:	4606      	mov	r6, r0
  40e2e6:	f101 0e14 	add.w	lr, r1, #20
  40e2ea:	2700      	movs	r7, #0
  40e2ec:	f8de 1000 	ldr.w	r1, [lr]
  40e2f0:	b288      	uxth	r0, r1
  40e2f2:	0c09      	lsrs	r1, r1, #16
  40e2f4:	fb02 3300 	mla	r3, r2, r0, r3
  40e2f8:	fb02 f101 	mul.w	r1, r2, r1
  40e2fc:	eb01 4113 	add.w	r1, r1, r3, lsr #16
  40e300:	3701      	adds	r7, #1
  40e302:	b29b      	uxth	r3, r3
  40e304:	eb03 4301 	add.w	r3, r3, r1, lsl #16
  40e308:	42bc      	cmp	r4, r7
  40e30a:	f84e 3b04 	str.w	r3, [lr], #4
  40e30e:	ea4f 4311 	mov.w	r3, r1, lsr #16
  40e312:	dceb      	bgt.n	40e2ec <__multadd+0x10>
  40e314:	b13b      	cbz	r3, 40e326 <__multadd+0x4a>
  40e316:	68aa      	ldr	r2, [r5, #8]
  40e318:	4294      	cmp	r4, r2
  40e31a:	da07      	bge.n	40e32c <__multadd+0x50>
  40e31c:	eb05 0284 	add.w	r2, r5, r4, lsl #2
  40e320:	3401      	adds	r4, #1
  40e322:	6153      	str	r3, [r2, #20]
  40e324:	612c      	str	r4, [r5, #16]
  40e326:	4628      	mov	r0, r5
  40e328:	b003      	add	sp, #12
  40e32a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40e32c:	6869      	ldr	r1, [r5, #4]
  40e32e:	9301      	str	r3, [sp, #4]
  40e330:	3101      	adds	r1, #1
  40e332:	4630      	mov	r0, r6
  40e334:	f7ff ffa2 	bl	40e27c <_Balloc>
  40e338:	692a      	ldr	r2, [r5, #16]
  40e33a:	3202      	adds	r2, #2
  40e33c:	f105 010c 	add.w	r1, r5, #12
  40e340:	4607      	mov	r7, r0
  40e342:	0092      	lsls	r2, r2, #2
  40e344:	300c      	adds	r0, #12
  40e346:	f7fa feed 	bl	409124 <memcpy>
  40e34a:	6cf2      	ldr	r2, [r6, #76]	; 0x4c
  40e34c:	6869      	ldr	r1, [r5, #4]
  40e34e:	9b01      	ldr	r3, [sp, #4]
  40e350:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
  40e354:	6028      	str	r0, [r5, #0]
  40e356:	f842 5021 	str.w	r5, [r2, r1, lsl #2]
  40e35a:	463d      	mov	r5, r7
  40e35c:	e7de      	b.n	40e31c <__multadd+0x40>
  40e35e:	bf00      	nop

0040e360 <__hi0bits>:
  40e360:	0c03      	lsrs	r3, r0, #16
  40e362:	041b      	lsls	r3, r3, #16
  40e364:	b9b3      	cbnz	r3, 40e394 <__hi0bits+0x34>
  40e366:	0400      	lsls	r0, r0, #16
  40e368:	2310      	movs	r3, #16
  40e36a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
  40e36e:	bf04      	itt	eq
  40e370:	0200      	lsleq	r0, r0, #8
  40e372:	3308      	addeq	r3, #8
  40e374:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
  40e378:	bf04      	itt	eq
  40e37a:	0100      	lsleq	r0, r0, #4
  40e37c:	3304      	addeq	r3, #4
  40e37e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
  40e382:	bf04      	itt	eq
  40e384:	0080      	lsleq	r0, r0, #2
  40e386:	3302      	addeq	r3, #2
  40e388:	2800      	cmp	r0, #0
  40e38a:	db07      	blt.n	40e39c <__hi0bits+0x3c>
  40e38c:	0042      	lsls	r2, r0, #1
  40e38e:	d403      	bmi.n	40e398 <__hi0bits+0x38>
  40e390:	2020      	movs	r0, #32
  40e392:	4770      	bx	lr
  40e394:	2300      	movs	r3, #0
  40e396:	e7e8      	b.n	40e36a <__hi0bits+0xa>
  40e398:	1c58      	adds	r0, r3, #1
  40e39a:	4770      	bx	lr
  40e39c:	4618      	mov	r0, r3
  40e39e:	4770      	bx	lr

0040e3a0 <__lo0bits>:
  40e3a0:	6803      	ldr	r3, [r0, #0]
  40e3a2:	f013 0207 	ands.w	r2, r3, #7
  40e3a6:	d007      	beq.n	40e3b8 <__lo0bits+0x18>
  40e3a8:	07d9      	lsls	r1, r3, #31
  40e3aa:	d420      	bmi.n	40e3ee <__lo0bits+0x4e>
  40e3ac:	079a      	lsls	r2, r3, #30
  40e3ae:	d420      	bmi.n	40e3f2 <__lo0bits+0x52>
  40e3b0:	089b      	lsrs	r3, r3, #2
  40e3b2:	6003      	str	r3, [r0, #0]
  40e3b4:	2002      	movs	r0, #2
  40e3b6:	4770      	bx	lr
  40e3b8:	b299      	uxth	r1, r3
  40e3ba:	b909      	cbnz	r1, 40e3c0 <__lo0bits+0x20>
  40e3bc:	0c1b      	lsrs	r3, r3, #16
  40e3be:	2210      	movs	r2, #16
  40e3c0:	f013 0fff 	tst.w	r3, #255	; 0xff
  40e3c4:	bf04      	itt	eq
  40e3c6:	0a1b      	lsreq	r3, r3, #8
  40e3c8:	3208      	addeq	r2, #8
  40e3ca:	0719      	lsls	r1, r3, #28
  40e3cc:	bf04      	itt	eq
  40e3ce:	091b      	lsreq	r3, r3, #4
  40e3d0:	3204      	addeq	r2, #4
  40e3d2:	0799      	lsls	r1, r3, #30
  40e3d4:	bf04      	itt	eq
  40e3d6:	089b      	lsreq	r3, r3, #2
  40e3d8:	3202      	addeq	r2, #2
  40e3da:	07d9      	lsls	r1, r3, #31
  40e3dc:	d404      	bmi.n	40e3e8 <__lo0bits+0x48>
  40e3de:	085b      	lsrs	r3, r3, #1
  40e3e0:	d101      	bne.n	40e3e6 <__lo0bits+0x46>
  40e3e2:	2020      	movs	r0, #32
  40e3e4:	4770      	bx	lr
  40e3e6:	3201      	adds	r2, #1
  40e3e8:	6003      	str	r3, [r0, #0]
  40e3ea:	4610      	mov	r0, r2
  40e3ec:	4770      	bx	lr
  40e3ee:	2000      	movs	r0, #0
  40e3f0:	4770      	bx	lr
  40e3f2:	085b      	lsrs	r3, r3, #1
  40e3f4:	6003      	str	r3, [r0, #0]
  40e3f6:	2001      	movs	r0, #1
  40e3f8:	4770      	bx	lr
  40e3fa:	bf00      	nop

0040e3fc <__i2b>:
  40e3fc:	b510      	push	{r4, lr}
  40e3fe:	460c      	mov	r4, r1
  40e400:	2101      	movs	r1, #1
  40e402:	f7ff ff3b 	bl	40e27c <_Balloc>
  40e406:	2201      	movs	r2, #1
  40e408:	6144      	str	r4, [r0, #20]
  40e40a:	6102      	str	r2, [r0, #16]
  40e40c:	bd10      	pop	{r4, pc}
  40e40e:	bf00      	nop

0040e410 <__multiply>:
  40e410:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40e414:	690f      	ldr	r7, [r1, #16]
  40e416:	6916      	ldr	r6, [r2, #16]
  40e418:	42b7      	cmp	r7, r6
  40e41a:	b083      	sub	sp, #12
  40e41c:	460d      	mov	r5, r1
  40e41e:	4614      	mov	r4, r2
  40e420:	f2c0 808d 	blt.w	40e53e <__multiply+0x12e>
  40e424:	4633      	mov	r3, r6
  40e426:	463e      	mov	r6, r7
  40e428:	461f      	mov	r7, r3
  40e42a:	68ab      	ldr	r3, [r5, #8]
  40e42c:	6869      	ldr	r1, [r5, #4]
  40e42e:	eb06 0807 	add.w	r8, r6, r7
  40e432:	4598      	cmp	r8, r3
  40e434:	bfc8      	it	gt
  40e436:	3101      	addgt	r1, #1
  40e438:	f7ff ff20 	bl	40e27c <_Balloc>
  40e43c:	f100 0c14 	add.w	ip, r0, #20
  40e440:	eb0c 0988 	add.w	r9, ip, r8, lsl #2
  40e444:	45cc      	cmp	ip, r9
  40e446:	9000      	str	r0, [sp, #0]
  40e448:	d205      	bcs.n	40e456 <__multiply+0x46>
  40e44a:	4663      	mov	r3, ip
  40e44c:	2100      	movs	r1, #0
  40e44e:	f843 1b04 	str.w	r1, [r3], #4
  40e452:	4599      	cmp	r9, r3
  40e454:	d8fb      	bhi.n	40e44e <__multiply+0x3e>
  40e456:	f104 0214 	add.w	r2, r4, #20
  40e45a:	eb02 0a87 	add.w	sl, r2, r7, lsl #2
  40e45e:	f105 0314 	add.w	r3, r5, #20
  40e462:	4552      	cmp	r2, sl
  40e464:	eb03 0e86 	add.w	lr, r3, r6, lsl #2
  40e468:	d254      	bcs.n	40e514 <__multiply+0x104>
  40e46a:	f8cd 9004 	str.w	r9, [sp, #4]
  40e46e:	4699      	mov	r9, r3
  40e470:	f852 3b04 	ldr.w	r3, [r2], #4
  40e474:	fa1f fb83 	uxth.w	fp, r3
  40e478:	f1bb 0f00 	cmp.w	fp, #0
  40e47c:	d020      	beq.n	40e4c0 <__multiply+0xb0>
  40e47e:	2000      	movs	r0, #0
  40e480:	464f      	mov	r7, r9
  40e482:	4666      	mov	r6, ip
  40e484:	4605      	mov	r5, r0
  40e486:	e000      	b.n	40e48a <__multiply+0x7a>
  40e488:	461e      	mov	r6, r3
  40e48a:	f857 4b04 	ldr.w	r4, [r7], #4
  40e48e:	6830      	ldr	r0, [r6, #0]
  40e490:	b2a1      	uxth	r1, r4
  40e492:	b283      	uxth	r3, r0
  40e494:	fb0b 3101 	mla	r1, fp, r1, r3
  40e498:	0c24      	lsrs	r4, r4, #16
  40e49a:	0c00      	lsrs	r0, r0, #16
  40e49c:	194b      	adds	r3, r1, r5
  40e49e:	fb0b 0004 	mla	r0, fp, r4, r0
  40e4a2:	eb00 4013 	add.w	r0, r0, r3, lsr #16
  40e4a6:	b299      	uxth	r1, r3
  40e4a8:	4633      	mov	r3, r6
  40e4aa:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
  40e4ae:	45be      	cmp	lr, r7
  40e4b0:	ea4f 4510 	mov.w	r5, r0, lsr #16
  40e4b4:	f843 1b04 	str.w	r1, [r3], #4
  40e4b8:	d8e6      	bhi.n	40e488 <__multiply+0x78>
  40e4ba:	6075      	str	r5, [r6, #4]
  40e4bc:	f852 3c04 	ldr.w	r3, [r2, #-4]
  40e4c0:	ea5f 4b13 	movs.w	fp, r3, lsr #16
  40e4c4:	d020      	beq.n	40e508 <__multiply+0xf8>
  40e4c6:	f8dc 3000 	ldr.w	r3, [ip]
  40e4ca:	4667      	mov	r7, ip
  40e4cc:	4618      	mov	r0, r3
  40e4ce:	464d      	mov	r5, r9
  40e4d0:	2100      	movs	r1, #0
  40e4d2:	e000      	b.n	40e4d6 <__multiply+0xc6>
  40e4d4:	4637      	mov	r7, r6
  40e4d6:	882c      	ldrh	r4, [r5, #0]
  40e4d8:	0c00      	lsrs	r0, r0, #16
  40e4da:	fb0b 0004 	mla	r0, fp, r4, r0
  40e4de:	4401      	add	r1, r0
  40e4e0:	b29c      	uxth	r4, r3
  40e4e2:	463e      	mov	r6, r7
  40e4e4:	ea44 4301 	orr.w	r3, r4, r1, lsl #16
  40e4e8:	f846 3b04 	str.w	r3, [r6], #4
  40e4ec:	6878      	ldr	r0, [r7, #4]
  40e4ee:	f855 4b04 	ldr.w	r4, [r5], #4
  40e4f2:	b283      	uxth	r3, r0
  40e4f4:	0c24      	lsrs	r4, r4, #16
  40e4f6:	fb0b 3404 	mla	r4, fp, r4, r3
  40e4fa:	eb04 4311 	add.w	r3, r4, r1, lsr #16
  40e4fe:	45ae      	cmp	lr, r5
  40e500:	ea4f 4113 	mov.w	r1, r3, lsr #16
  40e504:	d8e6      	bhi.n	40e4d4 <__multiply+0xc4>
  40e506:	607b      	str	r3, [r7, #4]
  40e508:	4592      	cmp	sl, r2
  40e50a:	f10c 0c04 	add.w	ip, ip, #4
  40e50e:	d8af      	bhi.n	40e470 <__multiply+0x60>
  40e510:	f8dd 9004 	ldr.w	r9, [sp, #4]
  40e514:	f1b8 0f00 	cmp.w	r8, #0
  40e518:	dd0b      	ble.n	40e532 <__multiply+0x122>
  40e51a:	f859 3c04 	ldr.w	r3, [r9, #-4]
  40e51e:	f1a9 0904 	sub.w	r9, r9, #4
  40e522:	b11b      	cbz	r3, 40e52c <__multiply+0x11c>
  40e524:	e005      	b.n	40e532 <__multiply+0x122>
  40e526:	f859 3d04 	ldr.w	r3, [r9, #-4]!
  40e52a:	b913      	cbnz	r3, 40e532 <__multiply+0x122>
  40e52c:	f1b8 0801 	subs.w	r8, r8, #1
  40e530:	d1f9      	bne.n	40e526 <__multiply+0x116>
  40e532:	9800      	ldr	r0, [sp, #0]
  40e534:	f8c0 8010 	str.w	r8, [r0, #16]
  40e538:	b003      	add	sp, #12
  40e53a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40e53e:	4615      	mov	r5, r2
  40e540:	460c      	mov	r4, r1
  40e542:	e772      	b.n	40e42a <__multiply+0x1a>

0040e544 <__pow5mult>:
  40e544:	f012 0303 	ands.w	r3, r2, #3
  40e548:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40e54c:	4614      	mov	r4, r2
  40e54e:	4607      	mov	r7, r0
  40e550:	460e      	mov	r6, r1
  40e552:	d12d      	bne.n	40e5b0 <__pow5mult+0x6c>
  40e554:	10a4      	asrs	r4, r4, #2
  40e556:	d01c      	beq.n	40e592 <__pow5mult+0x4e>
  40e558:	6cbd      	ldr	r5, [r7, #72]	; 0x48
  40e55a:	b395      	cbz	r5, 40e5c2 <__pow5mult+0x7e>
  40e55c:	07e3      	lsls	r3, r4, #31
  40e55e:	f04f 0800 	mov.w	r8, #0
  40e562:	d406      	bmi.n	40e572 <__pow5mult+0x2e>
  40e564:	1064      	asrs	r4, r4, #1
  40e566:	d014      	beq.n	40e592 <__pow5mult+0x4e>
  40e568:	6828      	ldr	r0, [r5, #0]
  40e56a:	b1a8      	cbz	r0, 40e598 <__pow5mult+0x54>
  40e56c:	4605      	mov	r5, r0
  40e56e:	07e3      	lsls	r3, r4, #31
  40e570:	d5f8      	bpl.n	40e564 <__pow5mult+0x20>
  40e572:	4638      	mov	r0, r7
  40e574:	4631      	mov	r1, r6
  40e576:	462a      	mov	r2, r5
  40e578:	f7ff ff4a 	bl	40e410 <__multiply>
  40e57c:	b1b6      	cbz	r6, 40e5ac <__pow5mult+0x68>
  40e57e:	6872      	ldr	r2, [r6, #4]
  40e580:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  40e582:	1064      	asrs	r4, r4, #1
  40e584:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
  40e588:	6031      	str	r1, [r6, #0]
  40e58a:	f843 6022 	str.w	r6, [r3, r2, lsl #2]
  40e58e:	4606      	mov	r6, r0
  40e590:	d1ea      	bne.n	40e568 <__pow5mult+0x24>
  40e592:	4630      	mov	r0, r6
  40e594:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40e598:	4629      	mov	r1, r5
  40e59a:	462a      	mov	r2, r5
  40e59c:	4638      	mov	r0, r7
  40e59e:	f7ff ff37 	bl	40e410 <__multiply>
  40e5a2:	6028      	str	r0, [r5, #0]
  40e5a4:	f8c0 8000 	str.w	r8, [r0]
  40e5a8:	4605      	mov	r5, r0
  40e5aa:	e7e0      	b.n	40e56e <__pow5mult+0x2a>
  40e5ac:	4606      	mov	r6, r0
  40e5ae:	e7d9      	b.n	40e564 <__pow5mult+0x20>
  40e5b0:	1e5a      	subs	r2, r3, #1
  40e5b2:	4d0b      	ldr	r5, [pc, #44]	; (40e5e0 <__pow5mult+0x9c>)
  40e5b4:	2300      	movs	r3, #0
  40e5b6:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
  40e5ba:	f7ff fe8f 	bl	40e2dc <__multadd>
  40e5be:	4606      	mov	r6, r0
  40e5c0:	e7c8      	b.n	40e554 <__pow5mult+0x10>
  40e5c2:	2101      	movs	r1, #1
  40e5c4:	4638      	mov	r0, r7
  40e5c6:	f7ff fe59 	bl	40e27c <_Balloc>
  40e5ca:	f240 2171 	movw	r1, #625	; 0x271
  40e5ce:	2201      	movs	r2, #1
  40e5d0:	2300      	movs	r3, #0
  40e5d2:	6141      	str	r1, [r0, #20]
  40e5d4:	6102      	str	r2, [r0, #16]
  40e5d6:	4605      	mov	r5, r0
  40e5d8:	64b8      	str	r0, [r7, #72]	; 0x48
  40e5da:	6003      	str	r3, [r0, #0]
  40e5dc:	e7be      	b.n	40e55c <__pow5mult+0x18>
  40e5de:	bf00      	nop
  40e5e0:	00411d68 	.word	0x00411d68

0040e5e4 <__lshift>:
  40e5e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  40e5e8:	690f      	ldr	r7, [r1, #16]
  40e5ea:	688b      	ldr	r3, [r1, #8]
  40e5ec:	ea4f 1962 	mov.w	r9, r2, asr #5
  40e5f0:	444f      	add	r7, r9
  40e5f2:	1c7d      	adds	r5, r7, #1
  40e5f4:	429d      	cmp	r5, r3
  40e5f6:	460e      	mov	r6, r1
  40e5f8:	4614      	mov	r4, r2
  40e5fa:	6849      	ldr	r1, [r1, #4]
  40e5fc:	4680      	mov	r8, r0
  40e5fe:	dd04      	ble.n	40e60a <__lshift+0x26>
  40e600:	005b      	lsls	r3, r3, #1
  40e602:	429d      	cmp	r5, r3
  40e604:	f101 0101 	add.w	r1, r1, #1
  40e608:	dcfa      	bgt.n	40e600 <__lshift+0x1c>
  40e60a:	4640      	mov	r0, r8
  40e60c:	f7ff fe36 	bl	40e27c <_Balloc>
  40e610:	f1b9 0f00 	cmp.w	r9, #0
  40e614:	f100 0114 	add.w	r1, r0, #20
  40e618:	dd09      	ble.n	40e62e <__lshift+0x4a>
  40e61a:	2300      	movs	r3, #0
  40e61c:	469e      	mov	lr, r3
  40e61e:	460a      	mov	r2, r1
  40e620:	3301      	adds	r3, #1
  40e622:	454b      	cmp	r3, r9
  40e624:	f842 eb04 	str.w	lr, [r2], #4
  40e628:	d1fa      	bne.n	40e620 <__lshift+0x3c>
  40e62a:	eb01 0183 	add.w	r1, r1, r3, lsl #2
  40e62e:	6932      	ldr	r2, [r6, #16]
  40e630:	f106 0314 	add.w	r3, r6, #20
  40e634:	f014 0c1f 	ands.w	ip, r4, #31
  40e638:	eb03 0e82 	add.w	lr, r3, r2, lsl #2
  40e63c:	d01f      	beq.n	40e67e <__lshift+0x9a>
  40e63e:	f1cc 0920 	rsb	r9, ip, #32
  40e642:	2200      	movs	r2, #0
  40e644:	681c      	ldr	r4, [r3, #0]
  40e646:	fa04 f40c 	lsl.w	r4, r4, ip
  40e64a:	4314      	orrs	r4, r2
  40e64c:	468a      	mov	sl, r1
  40e64e:	f841 4b04 	str.w	r4, [r1], #4
  40e652:	f853 4b04 	ldr.w	r4, [r3], #4
  40e656:	459e      	cmp	lr, r3
  40e658:	fa24 f209 	lsr.w	r2, r4, r9
  40e65c:	d8f2      	bhi.n	40e644 <__lshift+0x60>
  40e65e:	f8ca 2004 	str.w	r2, [sl, #4]
  40e662:	b102      	cbz	r2, 40e666 <__lshift+0x82>
  40e664:	1cbd      	adds	r5, r7, #2
  40e666:	f8d8 304c 	ldr.w	r3, [r8, #76]	; 0x4c
  40e66a:	6872      	ldr	r2, [r6, #4]
  40e66c:	3d01      	subs	r5, #1
  40e66e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
  40e672:	6105      	str	r5, [r0, #16]
  40e674:	6031      	str	r1, [r6, #0]
  40e676:	f843 6022 	str.w	r6, [r3, r2, lsl #2]
  40e67a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40e67e:	3904      	subs	r1, #4
  40e680:	f853 2b04 	ldr.w	r2, [r3], #4
  40e684:	f841 2f04 	str.w	r2, [r1, #4]!
  40e688:	459e      	cmp	lr, r3
  40e68a:	d8f9      	bhi.n	40e680 <__lshift+0x9c>
  40e68c:	e7eb      	b.n	40e666 <__lshift+0x82>
  40e68e:	bf00      	nop

0040e690 <__mcmp>:
  40e690:	6902      	ldr	r2, [r0, #16]
  40e692:	690b      	ldr	r3, [r1, #16]
  40e694:	1ad2      	subs	r2, r2, r3
  40e696:	d113      	bne.n	40e6c0 <__mcmp+0x30>
  40e698:	009b      	lsls	r3, r3, #2
  40e69a:	3014      	adds	r0, #20
  40e69c:	3114      	adds	r1, #20
  40e69e:	4419      	add	r1, r3
  40e6a0:	b410      	push	{r4}
  40e6a2:	4403      	add	r3, r0
  40e6a4:	e001      	b.n	40e6aa <__mcmp+0x1a>
  40e6a6:	4298      	cmp	r0, r3
  40e6a8:	d20c      	bcs.n	40e6c4 <__mcmp+0x34>
  40e6aa:	f853 4d04 	ldr.w	r4, [r3, #-4]!
  40e6ae:	f851 2d04 	ldr.w	r2, [r1, #-4]!
  40e6b2:	4294      	cmp	r4, r2
  40e6b4:	d0f7      	beq.n	40e6a6 <__mcmp+0x16>
  40e6b6:	d309      	bcc.n	40e6cc <__mcmp+0x3c>
  40e6b8:	2001      	movs	r0, #1
  40e6ba:	f85d 4b04 	ldr.w	r4, [sp], #4
  40e6be:	4770      	bx	lr
  40e6c0:	4610      	mov	r0, r2
  40e6c2:	4770      	bx	lr
  40e6c4:	2000      	movs	r0, #0
  40e6c6:	f85d 4b04 	ldr.w	r4, [sp], #4
  40e6ca:	4770      	bx	lr
  40e6cc:	f04f 30ff 	mov.w	r0, #4294967295
  40e6d0:	f85d 4b04 	ldr.w	r4, [sp], #4
  40e6d4:	4770      	bx	lr
  40e6d6:	bf00      	nop

0040e6d8 <__mdiff>:
  40e6d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40e6dc:	460e      	mov	r6, r1
  40e6de:	4605      	mov	r5, r0
  40e6e0:	4611      	mov	r1, r2
  40e6e2:	4630      	mov	r0, r6
  40e6e4:	4614      	mov	r4, r2
  40e6e6:	f7ff ffd3 	bl	40e690 <__mcmp>
  40e6ea:	1e07      	subs	r7, r0, #0
  40e6ec:	d054      	beq.n	40e798 <__mdiff+0xc0>
  40e6ee:	db4d      	blt.n	40e78c <__mdiff+0xb4>
  40e6f0:	f04f 0800 	mov.w	r8, #0
  40e6f4:	6871      	ldr	r1, [r6, #4]
  40e6f6:	4628      	mov	r0, r5
  40e6f8:	f7ff fdc0 	bl	40e27c <_Balloc>
  40e6fc:	6937      	ldr	r7, [r6, #16]
  40e6fe:	6923      	ldr	r3, [r4, #16]
  40e700:	f8c0 800c 	str.w	r8, [r0, #12]
  40e704:	3614      	adds	r6, #20
  40e706:	f104 0214 	add.w	r2, r4, #20
  40e70a:	eb02 0c83 	add.w	ip, r2, r3, lsl #2
  40e70e:	f100 0514 	add.w	r5, r0, #20
  40e712:	eb06 0e87 	add.w	lr, r6, r7, lsl #2
  40e716:	2300      	movs	r3, #0
  40e718:	f856 8b04 	ldr.w	r8, [r6], #4
  40e71c:	f852 4b04 	ldr.w	r4, [r2], #4
  40e720:	fa13 f388 	uxtah	r3, r3, r8
  40e724:	b2a1      	uxth	r1, r4
  40e726:	0c24      	lsrs	r4, r4, #16
  40e728:	1a59      	subs	r1, r3, r1
  40e72a:	ebc4 4318 	rsb	r3, r4, r8, lsr #16
  40e72e:	eb03 4321 	add.w	r3, r3, r1, asr #16
  40e732:	b289      	uxth	r1, r1
  40e734:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
  40e738:	4594      	cmp	ip, r2
  40e73a:	f845 1b04 	str.w	r1, [r5], #4
  40e73e:	ea4f 4323 	mov.w	r3, r3, asr #16
  40e742:	4634      	mov	r4, r6
  40e744:	d8e8      	bhi.n	40e718 <__mdiff+0x40>
  40e746:	45b6      	cmp	lr, r6
  40e748:	46ac      	mov	ip, r5
  40e74a:	d915      	bls.n	40e778 <__mdiff+0xa0>
  40e74c:	f854 2b04 	ldr.w	r2, [r4], #4
  40e750:	fa13 f182 	uxtah	r1, r3, r2
  40e754:	0c13      	lsrs	r3, r2, #16
  40e756:	eb03 4321 	add.w	r3, r3, r1, asr #16
  40e75a:	b289      	uxth	r1, r1
  40e75c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
  40e760:	45a6      	cmp	lr, r4
  40e762:	f845 1b04 	str.w	r1, [r5], #4
  40e766:	ea4f 4323 	mov.w	r3, r3, asr #16
  40e76a:	d8ef      	bhi.n	40e74c <__mdiff+0x74>
  40e76c:	43f6      	mvns	r6, r6
  40e76e:	4476      	add	r6, lr
  40e770:	f026 0503 	bic.w	r5, r6, #3
  40e774:	3504      	adds	r5, #4
  40e776:	4465      	add	r5, ip
  40e778:	3d04      	subs	r5, #4
  40e77a:	b921      	cbnz	r1, 40e786 <__mdiff+0xae>
  40e77c:	f855 3d04 	ldr.w	r3, [r5, #-4]!
  40e780:	3f01      	subs	r7, #1
  40e782:	2b00      	cmp	r3, #0
  40e784:	d0fa      	beq.n	40e77c <__mdiff+0xa4>
  40e786:	6107      	str	r7, [r0, #16]
  40e788:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40e78c:	4633      	mov	r3, r6
  40e78e:	f04f 0801 	mov.w	r8, #1
  40e792:	4626      	mov	r6, r4
  40e794:	461c      	mov	r4, r3
  40e796:	e7ad      	b.n	40e6f4 <__mdiff+0x1c>
  40e798:	4628      	mov	r0, r5
  40e79a:	4639      	mov	r1, r7
  40e79c:	f7ff fd6e 	bl	40e27c <_Balloc>
  40e7a0:	2301      	movs	r3, #1
  40e7a2:	6147      	str	r7, [r0, #20]
  40e7a4:	6103      	str	r3, [r0, #16]
  40e7a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40e7aa:	bf00      	nop

0040e7ac <__d2b>:
  40e7ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40e7b0:	b082      	sub	sp, #8
  40e7b2:	2101      	movs	r1, #1
  40e7b4:	461c      	mov	r4, r3
  40e7b6:	f3c3 570a 	ubfx	r7, r3, #20, #11
  40e7ba:	4615      	mov	r5, r2
  40e7bc:	9e08      	ldr	r6, [sp, #32]
  40e7be:	f7ff fd5d 	bl	40e27c <_Balloc>
  40e7c2:	f3c4 0413 	ubfx	r4, r4, #0, #20
  40e7c6:	4680      	mov	r8, r0
  40e7c8:	b10f      	cbz	r7, 40e7ce <__d2b+0x22>
  40e7ca:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
  40e7ce:	9401      	str	r4, [sp, #4]
  40e7d0:	b31d      	cbz	r5, 40e81a <__d2b+0x6e>
  40e7d2:	a802      	add	r0, sp, #8
  40e7d4:	f840 5d08 	str.w	r5, [r0, #-8]!
  40e7d8:	f7ff fde2 	bl	40e3a0 <__lo0bits>
  40e7dc:	2800      	cmp	r0, #0
  40e7de:	d134      	bne.n	40e84a <__d2b+0x9e>
  40e7e0:	e89d 000c 	ldmia.w	sp, {r2, r3}
  40e7e4:	f8c8 2014 	str.w	r2, [r8, #20]
  40e7e8:	2b00      	cmp	r3, #0
  40e7ea:	bf14      	ite	ne
  40e7ec:	2402      	movne	r4, #2
  40e7ee:	2401      	moveq	r4, #1
  40e7f0:	f8c8 3018 	str.w	r3, [r8, #24]
  40e7f4:	f8c8 4010 	str.w	r4, [r8, #16]
  40e7f8:	b9df      	cbnz	r7, 40e832 <__d2b+0x86>
  40e7fa:	eb08 0384 	add.w	r3, r8, r4, lsl #2
  40e7fe:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
  40e802:	6030      	str	r0, [r6, #0]
  40e804:	6918      	ldr	r0, [r3, #16]
  40e806:	f7ff fdab 	bl	40e360 <__hi0bits>
  40e80a:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40e80c:	ebc0 1044 	rsb	r0, r0, r4, lsl #5
  40e810:	6018      	str	r0, [r3, #0]
  40e812:	4640      	mov	r0, r8
  40e814:	b002      	add	sp, #8
  40e816:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40e81a:	a801      	add	r0, sp, #4
  40e81c:	f7ff fdc0 	bl	40e3a0 <__lo0bits>
  40e820:	2401      	movs	r4, #1
  40e822:	9b01      	ldr	r3, [sp, #4]
  40e824:	f8c8 3014 	str.w	r3, [r8, #20]
  40e828:	3020      	adds	r0, #32
  40e82a:	f8c8 4010 	str.w	r4, [r8, #16]
  40e82e:	2f00      	cmp	r7, #0
  40e830:	d0e3      	beq.n	40e7fa <__d2b+0x4e>
  40e832:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40e834:	f2a7 4733 	subw	r7, r7, #1075	; 0x433
  40e838:	4407      	add	r7, r0
  40e83a:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
  40e83e:	6037      	str	r7, [r6, #0]
  40e840:	6018      	str	r0, [r3, #0]
  40e842:	4640      	mov	r0, r8
  40e844:	b002      	add	sp, #8
  40e846:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40e84a:	e89d 000c 	ldmia.w	sp, {r2, r3}
  40e84e:	f1c0 0120 	rsb	r1, r0, #32
  40e852:	fa03 f101 	lsl.w	r1, r3, r1
  40e856:	430a      	orrs	r2, r1
  40e858:	40c3      	lsrs	r3, r0
  40e85a:	9301      	str	r3, [sp, #4]
  40e85c:	f8c8 2014 	str.w	r2, [r8, #20]
  40e860:	e7c2      	b.n	40e7e8 <__d2b+0x3c>
  40e862:	bf00      	nop

0040e864 <_read_r>:
  40e864:	b570      	push	{r4, r5, r6, lr}
  40e866:	4c08      	ldr	r4, [pc, #32]	; (40e888 <_read_r+0x24>)
  40e868:	4606      	mov	r6, r0
  40e86a:	2500      	movs	r5, #0
  40e86c:	4608      	mov	r0, r1
  40e86e:	4611      	mov	r1, r2
  40e870:	461a      	mov	r2, r3
  40e872:	6025      	str	r5, [r4, #0]
  40e874:	f7f1 fc8a 	bl	40018c <_read>
  40e878:	1c43      	adds	r3, r0, #1
  40e87a:	d000      	beq.n	40e87e <_read_r+0x1a>
  40e87c:	bd70      	pop	{r4, r5, r6, pc}
  40e87e:	6823      	ldr	r3, [r4, #0]
  40e880:	2b00      	cmp	r3, #0
  40e882:	d0fb      	beq.n	40e87c <_read_r+0x18>
  40e884:	6033      	str	r3, [r6, #0]
  40e886:	bd70      	pop	{r4, r5, r6, pc}
  40e888:	2000aed8 	.word	0x2000aed8

0040e88c <__fpclassifyd>:
  40e88c:	b410      	push	{r4}
  40e88e:	f031 4400 	bics.w	r4, r1, #2147483648	; 0x80000000
  40e892:	d008      	beq.n	40e8a6 <__fpclassifyd+0x1a>
  40e894:	4b11      	ldr	r3, [pc, #68]	; (40e8dc <__fpclassifyd+0x50>)
  40e896:	f5a1 1280 	sub.w	r2, r1, #1048576	; 0x100000
  40e89a:	429a      	cmp	r2, r3
  40e89c:	d808      	bhi.n	40e8b0 <__fpclassifyd+0x24>
  40e89e:	2004      	movs	r0, #4
  40e8a0:	f85d 4b04 	ldr.w	r4, [sp], #4
  40e8a4:	4770      	bx	lr
  40e8a6:	b918      	cbnz	r0, 40e8b0 <__fpclassifyd+0x24>
  40e8a8:	2002      	movs	r0, #2
  40e8aa:	f85d 4b04 	ldr.w	r4, [sp], #4
  40e8ae:	4770      	bx	lr
  40e8b0:	f101 41ff 	add.w	r1, r1, #2139095040	; 0x7f800000
  40e8b4:	4b09      	ldr	r3, [pc, #36]	; (40e8dc <__fpclassifyd+0x50>)
  40e8b6:	f501 01e0 	add.w	r1, r1, #7340032	; 0x700000
  40e8ba:	4299      	cmp	r1, r3
  40e8bc:	d9ef      	bls.n	40e89e <__fpclassifyd+0x12>
  40e8be:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
  40e8c2:	d201      	bcs.n	40e8c8 <__fpclassifyd+0x3c>
  40e8c4:	2003      	movs	r0, #3
  40e8c6:	e7eb      	b.n	40e8a0 <__fpclassifyd+0x14>
  40e8c8:	4b05      	ldr	r3, [pc, #20]	; (40e8e0 <__fpclassifyd+0x54>)
  40e8ca:	429c      	cmp	r4, r3
  40e8cc:	d001      	beq.n	40e8d2 <__fpclassifyd+0x46>
  40e8ce:	2000      	movs	r0, #0
  40e8d0:	e7e6      	b.n	40e8a0 <__fpclassifyd+0x14>
  40e8d2:	fab0 f080 	clz	r0, r0
  40e8d6:	0940      	lsrs	r0, r0, #5
  40e8d8:	e7e2      	b.n	40e8a0 <__fpclassifyd+0x14>
  40e8da:	bf00      	nop
  40e8dc:	7fdfffff 	.word	0x7fdfffff
  40e8e0:	7ff00000 	.word	0x7ff00000

0040e8e4 <_raise_r>:
  40e8e4:	291f      	cmp	r1, #31
  40e8e6:	b538      	push	{r3, r4, r5, lr}
  40e8e8:	d822      	bhi.n	40e930 <_raise_r+0x4c>
  40e8ea:	f8d0 22dc 	ldr.w	r2, [r0, #732]	; 0x2dc
  40e8ee:	4605      	mov	r5, r0
  40e8f0:	460c      	mov	r4, r1
  40e8f2:	b19a      	cbz	r2, 40e91c <_raise_r+0x38>
  40e8f4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
  40e8f8:	b183      	cbz	r3, 40e91c <_raise_r+0x38>
  40e8fa:	2b01      	cmp	r3, #1
  40e8fc:	d00c      	beq.n	40e918 <_raise_r+0x34>
  40e8fe:	1c59      	adds	r1, r3, #1
  40e900:	d006      	beq.n	40e910 <_raise_r+0x2c>
  40e902:	2500      	movs	r5, #0
  40e904:	4620      	mov	r0, r4
  40e906:	f842 5024 	str.w	r5, [r2, r4, lsl #2]
  40e90a:	4798      	blx	r3
  40e90c:	4628      	mov	r0, r5
  40e90e:	bd38      	pop	{r3, r4, r5, pc}
  40e910:	2316      	movs	r3, #22
  40e912:	6003      	str	r3, [r0, #0]
  40e914:	2001      	movs	r0, #1
  40e916:	bd38      	pop	{r3, r4, r5, pc}
  40e918:	2000      	movs	r0, #0
  40e91a:	bd38      	pop	{r3, r4, r5, pc}
  40e91c:	4628      	mov	r0, r5
  40e91e:	f000 f829 	bl	40e974 <_getpid_r>
  40e922:	4622      	mov	r2, r4
  40e924:	4601      	mov	r1, r0
  40e926:	4628      	mov	r0, r5
  40e928:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  40e92c:	f000 b80e 	b.w	40e94c <_kill_r>
  40e930:	2316      	movs	r3, #22
  40e932:	6003      	str	r3, [r0, #0]
  40e934:	f04f 30ff 	mov.w	r0, #4294967295
  40e938:	bd38      	pop	{r3, r4, r5, pc}
  40e93a:	bf00      	nop

0040e93c <raise>:
  40e93c:	4b02      	ldr	r3, [pc, #8]	; (40e948 <raise+0xc>)
  40e93e:	4601      	mov	r1, r0
  40e940:	6818      	ldr	r0, [r3, #0]
  40e942:	f7ff bfcf 	b.w	40e8e4 <_raise_r>
  40e946:	bf00      	nop
  40e948:	20000440 	.word	0x20000440

0040e94c <_kill_r>:
  40e94c:	b538      	push	{r3, r4, r5, lr}
  40e94e:	4c08      	ldr	r4, [pc, #32]	; (40e970 <_kill_r+0x24>)
  40e950:	2300      	movs	r3, #0
  40e952:	4605      	mov	r5, r0
  40e954:	4608      	mov	r0, r1
  40e956:	4611      	mov	r1, r2
  40e958:	6023      	str	r3, [r4, #0]
  40e95a:	f7f2 fd7d 	bl	401458 <_kill>
  40e95e:	1c43      	adds	r3, r0, #1
  40e960:	d000      	beq.n	40e964 <_kill_r+0x18>
  40e962:	bd38      	pop	{r3, r4, r5, pc}
  40e964:	6823      	ldr	r3, [r4, #0]
  40e966:	2b00      	cmp	r3, #0
  40e968:	d0fb      	beq.n	40e962 <_kill_r+0x16>
  40e96a:	602b      	str	r3, [r5, #0]
  40e96c:	bd38      	pop	{r3, r4, r5, pc}
  40e96e:	bf00      	nop
  40e970:	2000aed8 	.word	0x2000aed8

0040e974 <_getpid_r>:
  40e974:	f7f2 bd72 	b.w	40145c <_getpid>

0040e978 <__ssprint_r>:
  40e978:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40e97c:	6893      	ldr	r3, [r2, #8]
  40e97e:	f8d2 8000 	ldr.w	r8, [r2]
  40e982:	b083      	sub	sp, #12
  40e984:	4691      	mov	r9, r2
  40e986:	2b00      	cmp	r3, #0
  40e988:	d072      	beq.n	40ea70 <__ssprint_r+0xf8>
  40e98a:	4607      	mov	r7, r0
  40e98c:	f04f 0b00 	mov.w	fp, #0
  40e990:	6808      	ldr	r0, [r1, #0]
  40e992:	688b      	ldr	r3, [r1, #8]
  40e994:	460d      	mov	r5, r1
  40e996:	465c      	mov	r4, fp
  40e998:	2c00      	cmp	r4, #0
  40e99a:	d045      	beq.n	40ea28 <__ssprint_r+0xb0>
  40e99c:	429c      	cmp	r4, r3
  40e99e:	461e      	mov	r6, r3
  40e9a0:	469a      	mov	sl, r3
  40e9a2:	d348      	bcc.n	40ea36 <__ssprint_r+0xbe>
  40e9a4:	89ab      	ldrh	r3, [r5, #12]
  40e9a6:	f413 6f90 	tst.w	r3, #1152	; 0x480
  40e9aa:	d02d      	beq.n	40ea08 <__ssprint_r+0x90>
  40e9ac:	696e      	ldr	r6, [r5, #20]
  40e9ae:	6929      	ldr	r1, [r5, #16]
  40e9b0:	eb06 0646 	add.w	r6, r6, r6, lsl #1
  40e9b4:	ebc1 0a00 	rsb	sl, r1, r0
  40e9b8:	eb06 76d6 	add.w	r6, r6, r6, lsr #31
  40e9bc:	1c60      	adds	r0, r4, #1
  40e9be:	1076      	asrs	r6, r6, #1
  40e9c0:	4450      	add	r0, sl
  40e9c2:	4286      	cmp	r6, r0
  40e9c4:	4632      	mov	r2, r6
  40e9c6:	bf3c      	itt	cc
  40e9c8:	4606      	movcc	r6, r0
  40e9ca:	4632      	movcc	r2, r6
  40e9cc:	055b      	lsls	r3, r3, #21
  40e9ce:	d535      	bpl.n	40ea3c <__ssprint_r+0xc4>
  40e9d0:	4611      	mov	r1, r2
  40e9d2:	4638      	mov	r0, r7
  40e9d4:	f7fa f898 	bl	408b08 <_malloc_r>
  40e9d8:	2800      	cmp	r0, #0
  40e9da:	d039      	beq.n	40ea50 <__ssprint_r+0xd8>
  40e9dc:	4652      	mov	r2, sl
  40e9de:	6929      	ldr	r1, [r5, #16]
  40e9e0:	9001      	str	r0, [sp, #4]
  40e9e2:	f7fa fb9f 	bl	409124 <memcpy>
  40e9e6:	89aa      	ldrh	r2, [r5, #12]
  40e9e8:	9b01      	ldr	r3, [sp, #4]
  40e9ea:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
  40e9ee:	f042 0280 	orr.w	r2, r2, #128	; 0x80
  40e9f2:	81aa      	strh	r2, [r5, #12]
  40e9f4:	ebca 0206 	rsb	r2, sl, r6
  40e9f8:	eb03 000a 	add.w	r0, r3, sl
  40e9fc:	616e      	str	r6, [r5, #20]
  40e9fe:	612b      	str	r3, [r5, #16]
  40ea00:	6028      	str	r0, [r5, #0]
  40ea02:	60aa      	str	r2, [r5, #8]
  40ea04:	4626      	mov	r6, r4
  40ea06:	46a2      	mov	sl, r4
  40ea08:	4652      	mov	r2, sl
  40ea0a:	4659      	mov	r1, fp
  40ea0c:	f7fa fc24 	bl	409258 <memmove>
  40ea10:	f8d9 2008 	ldr.w	r2, [r9, #8]
  40ea14:	68ab      	ldr	r3, [r5, #8]
  40ea16:	6828      	ldr	r0, [r5, #0]
  40ea18:	1b9b      	subs	r3, r3, r6
  40ea1a:	4450      	add	r0, sl
  40ea1c:	1b14      	subs	r4, r2, r4
  40ea1e:	60ab      	str	r3, [r5, #8]
  40ea20:	6028      	str	r0, [r5, #0]
  40ea22:	f8c9 4008 	str.w	r4, [r9, #8]
  40ea26:	b31c      	cbz	r4, 40ea70 <__ssprint_r+0xf8>
  40ea28:	f8d8 b000 	ldr.w	fp, [r8]
  40ea2c:	f8d8 4004 	ldr.w	r4, [r8, #4]
  40ea30:	f108 0808 	add.w	r8, r8, #8
  40ea34:	e7b0      	b.n	40e998 <__ssprint_r+0x20>
  40ea36:	4626      	mov	r6, r4
  40ea38:	46a2      	mov	sl, r4
  40ea3a:	e7e5      	b.n	40ea08 <__ssprint_r+0x90>
  40ea3c:	4638      	mov	r0, r7
  40ea3e:	f7fa fcc9 	bl	4093d4 <_realloc_r>
  40ea42:	4603      	mov	r3, r0
  40ea44:	2800      	cmp	r0, #0
  40ea46:	d1d5      	bne.n	40e9f4 <__ssprint_r+0x7c>
  40ea48:	4638      	mov	r0, r7
  40ea4a:	6929      	ldr	r1, [r5, #16]
  40ea4c:	f7f9 fd0e 	bl	40846c <_free_r>
  40ea50:	230c      	movs	r3, #12
  40ea52:	603b      	str	r3, [r7, #0]
  40ea54:	89ab      	ldrh	r3, [r5, #12]
  40ea56:	2200      	movs	r2, #0
  40ea58:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40ea5c:	f04f 30ff 	mov.w	r0, #4294967295
  40ea60:	81ab      	strh	r3, [r5, #12]
  40ea62:	f8c9 2008 	str.w	r2, [r9, #8]
  40ea66:	f8c9 2004 	str.w	r2, [r9, #4]
  40ea6a:	b003      	add	sp, #12
  40ea6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40ea70:	2000      	movs	r0, #0
  40ea72:	f8c9 0004 	str.w	r0, [r9, #4]
  40ea76:	b003      	add	sp, #12
  40ea78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0040ea7c <_wcrtomb_r>:
  40ea7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40ea80:	4605      	mov	r5, r0
  40ea82:	b086      	sub	sp, #24
  40ea84:	461e      	mov	r6, r3
  40ea86:	460c      	mov	r4, r1
  40ea88:	b1a1      	cbz	r1, 40eab4 <_wcrtomb_r+0x38>
  40ea8a:	4b10      	ldr	r3, [pc, #64]	; (40eacc <_wcrtomb_r+0x50>)
  40ea8c:	4617      	mov	r7, r2
  40ea8e:	f8d3 8000 	ldr.w	r8, [r3]
  40ea92:	f7ff fbd1 	bl	40e238 <__locale_charset>
  40ea96:	9600      	str	r6, [sp, #0]
  40ea98:	4603      	mov	r3, r0
  40ea9a:	4621      	mov	r1, r4
  40ea9c:	463a      	mov	r2, r7
  40ea9e:	4628      	mov	r0, r5
  40eaa0:	47c0      	blx	r8
  40eaa2:	1c43      	adds	r3, r0, #1
  40eaa4:	d103      	bne.n	40eaae <_wcrtomb_r+0x32>
  40eaa6:	2200      	movs	r2, #0
  40eaa8:	238a      	movs	r3, #138	; 0x8a
  40eaaa:	6032      	str	r2, [r6, #0]
  40eaac:	602b      	str	r3, [r5, #0]
  40eaae:	b006      	add	sp, #24
  40eab0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40eab4:	4b05      	ldr	r3, [pc, #20]	; (40eacc <_wcrtomb_r+0x50>)
  40eab6:	681f      	ldr	r7, [r3, #0]
  40eab8:	f7ff fbbe 	bl	40e238 <__locale_charset>
  40eabc:	9600      	str	r6, [sp, #0]
  40eabe:	4603      	mov	r3, r0
  40eac0:	4622      	mov	r2, r4
  40eac2:	4628      	mov	r0, r5
  40eac4:	a903      	add	r1, sp, #12
  40eac6:	47b8      	blx	r7
  40eac8:	e7eb      	b.n	40eaa2 <_wcrtomb_r+0x26>
  40eaca:	bf00      	nop
  40eacc:	200008b0 	.word	0x200008b0

0040ead0 <__ascii_wctomb>:
  40ead0:	b121      	cbz	r1, 40eadc <__ascii_wctomb+0xc>
  40ead2:	2aff      	cmp	r2, #255	; 0xff
  40ead4:	d804      	bhi.n	40eae0 <__ascii_wctomb+0x10>
  40ead6:	700a      	strb	r2, [r1, #0]
  40ead8:	2001      	movs	r0, #1
  40eada:	4770      	bx	lr
  40eadc:	4608      	mov	r0, r1
  40eade:	4770      	bx	lr
  40eae0:	238a      	movs	r3, #138	; 0x8a
  40eae2:	6003      	str	r3, [r0, #0]
  40eae4:	f04f 30ff 	mov.w	r0, #4294967295
  40eae8:	4770      	bx	lr
  40eaea:	bf00      	nop

0040eaec <__register_exitproc>:
  40eaec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  40eaf0:	4c25      	ldr	r4, [pc, #148]	; (40eb88 <__register_exitproc+0x9c>)
  40eaf2:	6825      	ldr	r5, [r4, #0]
  40eaf4:	f8d5 4148 	ldr.w	r4, [r5, #328]	; 0x148
  40eaf8:	4606      	mov	r6, r0
  40eafa:	4688      	mov	r8, r1
  40eafc:	4692      	mov	sl, r2
  40eafe:	4699      	mov	r9, r3
  40eb00:	b3cc      	cbz	r4, 40eb76 <__register_exitproc+0x8a>
  40eb02:	6860      	ldr	r0, [r4, #4]
  40eb04:	281f      	cmp	r0, #31
  40eb06:	dc18      	bgt.n	40eb3a <__register_exitproc+0x4e>
  40eb08:	1c43      	adds	r3, r0, #1
  40eb0a:	b17e      	cbz	r6, 40eb2c <__register_exitproc+0x40>
  40eb0c:	eb04 0580 	add.w	r5, r4, r0, lsl #2
  40eb10:	2101      	movs	r1, #1
  40eb12:	f8c5 a088 	str.w	sl, [r5, #136]	; 0x88
  40eb16:	f8d4 7188 	ldr.w	r7, [r4, #392]	; 0x188
  40eb1a:	fa01 f200 	lsl.w	r2, r1, r0
  40eb1e:	4317      	orrs	r7, r2
  40eb20:	2e02      	cmp	r6, #2
  40eb22:	f8c4 7188 	str.w	r7, [r4, #392]	; 0x188
  40eb26:	f8c5 9108 	str.w	r9, [r5, #264]	; 0x108
  40eb2a:	d01e      	beq.n	40eb6a <__register_exitproc+0x7e>
  40eb2c:	3002      	adds	r0, #2
  40eb2e:	6063      	str	r3, [r4, #4]
  40eb30:	f844 8020 	str.w	r8, [r4, r0, lsl #2]
  40eb34:	2000      	movs	r0, #0
  40eb36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40eb3a:	4b14      	ldr	r3, [pc, #80]	; (40eb8c <__register_exitproc+0xa0>)
  40eb3c:	b303      	cbz	r3, 40eb80 <__register_exitproc+0x94>
  40eb3e:	f44f 70c8 	mov.w	r0, #400	; 0x190
  40eb42:	f3af 8000 	nop.w
  40eb46:	4604      	mov	r4, r0
  40eb48:	b1d0      	cbz	r0, 40eb80 <__register_exitproc+0x94>
  40eb4a:	f8d5 3148 	ldr.w	r3, [r5, #328]	; 0x148
  40eb4e:	2700      	movs	r7, #0
  40eb50:	e880 0088 	stmia.w	r0, {r3, r7}
  40eb54:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
  40eb58:	4638      	mov	r0, r7
  40eb5a:	2301      	movs	r3, #1
  40eb5c:	f8c4 7188 	str.w	r7, [r4, #392]	; 0x188
  40eb60:	f8c4 718c 	str.w	r7, [r4, #396]	; 0x18c
  40eb64:	2e00      	cmp	r6, #0
  40eb66:	d0e1      	beq.n	40eb2c <__register_exitproc+0x40>
  40eb68:	e7d0      	b.n	40eb0c <__register_exitproc+0x20>
  40eb6a:	f8d4 118c 	ldr.w	r1, [r4, #396]	; 0x18c
  40eb6e:	430a      	orrs	r2, r1
  40eb70:	f8c4 218c 	str.w	r2, [r4, #396]	; 0x18c
  40eb74:	e7da      	b.n	40eb2c <__register_exitproc+0x40>
  40eb76:	f505 74a6 	add.w	r4, r5, #332	; 0x14c
  40eb7a:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
  40eb7e:	e7c0      	b.n	40eb02 <__register_exitproc+0x16>
  40eb80:	f04f 30ff 	mov.w	r0, #4294967295
  40eb84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40eb88:	00411bdc 	.word	0x00411bdc
  40eb8c:	00000000 	.word	0x00000000

0040eb90 <_calloc_r>:
  40eb90:	b510      	push	{r4, lr}
  40eb92:	fb02 f101 	mul.w	r1, r2, r1
  40eb96:	f7f9 ffb7 	bl	408b08 <_malloc_r>
  40eb9a:	4604      	mov	r4, r0
  40eb9c:	b168      	cbz	r0, 40ebba <_calloc_r+0x2a>
  40eb9e:	f850 2c04 	ldr.w	r2, [r0, #-4]
  40eba2:	f022 0203 	bic.w	r2, r2, #3
  40eba6:	3a04      	subs	r2, #4
  40eba8:	2a24      	cmp	r2, #36	; 0x24
  40ebaa:	d818      	bhi.n	40ebde <_calloc_r+0x4e>
  40ebac:	2a13      	cmp	r2, #19
  40ebae:	d806      	bhi.n	40ebbe <_calloc_r+0x2e>
  40ebb0:	4603      	mov	r3, r0
  40ebb2:	2200      	movs	r2, #0
  40ebb4:	601a      	str	r2, [r3, #0]
  40ebb6:	605a      	str	r2, [r3, #4]
  40ebb8:	609a      	str	r2, [r3, #8]
  40ebba:	4620      	mov	r0, r4
  40ebbc:	bd10      	pop	{r4, pc}
  40ebbe:	2300      	movs	r3, #0
  40ebc0:	2a1b      	cmp	r2, #27
  40ebc2:	6003      	str	r3, [r0, #0]
  40ebc4:	6043      	str	r3, [r0, #4]
  40ebc6:	d90f      	bls.n	40ebe8 <_calloc_r+0x58>
  40ebc8:	2a24      	cmp	r2, #36	; 0x24
  40ebca:	6083      	str	r3, [r0, #8]
  40ebcc:	60c3      	str	r3, [r0, #12]
  40ebce:	bf05      	ittet	eq
  40ebd0:	6103      	streq	r3, [r0, #16]
  40ebd2:	6143      	streq	r3, [r0, #20]
  40ebd4:	f100 0310 	addne.w	r3, r0, #16
  40ebd8:	f100 0318 	addeq.w	r3, r0, #24
  40ebdc:	e7e9      	b.n	40ebb2 <_calloc_r+0x22>
  40ebde:	2100      	movs	r1, #0
  40ebe0:	f7fa fb9e 	bl	409320 <memset>
  40ebe4:	4620      	mov	r0, r4
  40ebe6:	bd10      	pop	{r4, pc}
  40ebe8:	f100 0308 	add.w	r3, r0, #8
  40ebec:	e7e1      	b.n	40ebb2 <_calloc_r+0x22>
  40ebee:	bf00      	nop

0040ebf0 <__aeabi_drsub>:
  40ebf0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
  40ebf4:	e002      	b.n	40ebfc <__adddf3>
  40ebf6:	bf00      	nop

0040ebf8 <__aeabi_dsub>:
  40ebf8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0040ebfc <__adddf3>:
  40ebfc:	b530      	push	{r4, r5, lr}
  40ebfe:	ea4f 0441 	mov.w	r4, r1, lsl #1
  40ec02:	ea4f 0543 	mov.w	r5, r3, lsl #1
  40ec06:	ea94 0f05 	teq	r4, r5
  40ec0a:	bf08      	it	eq
  40ec0c:	ea90 0f02 	teqeq	r0, r2
  40ec10:	bf1f      	itttt	ne
  40ec12:	ea54 0c00 	orrsne.w	ip, r4, r0
  40ec16:	ea55 0c02 	orrsne.w	ip, r5, r2
  40ec1a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
  40ec1e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  40ec22:	f000 80e2 	beq.w	40edea <__adddf3+0x1ee>
  40ec26:	ea4f 5454 	mov.w	r4, r4, lsr #21
  40ec2a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
  40ec2e:	bfb8      	it	lt
  40ec30:	426d      	neglt	r5, r5
  40ec32:	dd0c      	ble.n	40ec4e <__adddf3+0x52>
  40ec34:	442c      	add	r4, r5
  40ec36:	ea80 0202 	eor.w	r2, r0, r2
  40ec3a:	ea81 0303 	eor.w	r3, r1, r3
  40ec3e:	ea82 0000 	eor.w	r0, r2, r0
  40ec42:	ea83 0101 	eor.w	r1, r3, r1
  40ec46:	ea80 0202 	eor.w	r2, r0, r2
  40ec4a:	ea81 0303 	eor.w	r3, r1, r3
  40ec4e:	2d36      	cmp	r5, #54	; 0x36
  40ec50:	bf88      	it	hi
  40ec52:	bd30      	pophi	{r4, r5, pc}
  40ec54:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  40ec58:	ea4f 3101 	mov.w	r1, r1, lsl #12
  40ec5c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
  40ec60:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
  40ec64:	d002      	beq.n	40ec6c <__adddf3+0x70>
  40ec66:	4240      	negs	r0, r0
  40ec68:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  40ec6c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
  40ec70:	ea4f 3303 	mov.w	r3, r3, lsl #12
  40ec74:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
  40ec78:	d002      	beq.n	40ec80 <__adddf3+0x84>
  40ec7a:	4252      	negs	r2, r2
  40ec7c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
  40ec80:	ea94 0f05 	teq	r4, r5
  40ec84:	f000 80a7 	beq.w	40edd6 <__adddf3+0x1da>
  40ec88:	f1a4 0401 	sub.w	r4, r4, #1
  40ec8c:	f1d5 0e20 	rsbs	lr, r5, #32
  40ec90:	db0d      	blt.n	40ecae <__adddf3+0xb2>
  40ec92:	fa02 fc0e 	lsl.w	ip, r2, lr
  40ec96:	fa22 f205 	lsr.w	r2, r2, r5
  40ec9a:	1880      	adds	r0, r0, r2
  40ec9c:	f141 0100 	adc.w	r1, r1, #0
  40eca0:	fa03 f20e 	lsl.w	r2, r3, lr
  40eca4:	1880      	adds	r0, r0, r2
  40eca6:	fa43 f305 	asr.w	r3, r3, r5
  40ecaa:	4159      	adcs	r1, r3
  40ecac:	e00e      	b.n	40eccc <__adddf3+0xd0>
  40ecae:	f1a5 0520 	sub.w	r5, r5, #32
  40ecb2:	f10e 0e20 	add.w	lr, lr, #32
  40ecb6:	2a01      	cmp	r2, #1
  40ecb8:	fa03 fc0e 	lsl.w	ip, r3, lr
  40ecbc:	bf28      	it	cs
  40ecbe:	f04c 0c02 	orrcs.w	ip, ip, #2
  40ecc2:	fa43 f305 	asr.w	r3, r3, r5
  40ecc6:	18c0      	adds	r0, r0, r3
  40ecc8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
  40eccc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  40ecd0:	d507      	bpl.n	40ece2 <__adddf3+0xe6>
  40ecd2:	f04f 0e00 	mov.w	lr, #0
  40ecd6:	f1dc 0c00 	rsbs	ip, ip, #0
  40ecda:	eb7e 0000 	sbcs.w	r0, lr, r0
  40ecde:	eb6e 0101 	sbc.w	r1, lr, r1
  40ece2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
  40ece6:	d31b      	bcc.n	40ed20 <__adddf3+0x124>
  40ece8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
  40ecec:	d30c      	bcc.n	40ed08 <__adddf3+0x10c>
  40ecee:	0849      	lsrs	r1, r1, #1
  40ecf0:	ea5f 0030 	movs.w	r0, r0, rrx
  40ecf4:	ea4f 0c3c 	mov.w	ip, ip, rrx
  40ecf8:	f104 0401 	add.w	r4, r4, #1
  40ecfc:	ea4f 5244 	mov.w	r2, r4, lsl #21
  40ed00:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
  40ed04:	f080 809a 	bcs.w	40ee3c <__adddf3+0x240>
  40ed08:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
  40ed0c:	bf08      	it	eq
  40ed0e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  40ed12:	f150 0000 	adcs.w	r0, r0, #0
  40ed16:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  40ed1a:	ea41 0105 	orr.w	r1, r1, r5
  40ed1e:	bd30      	pop	{r4, r5, pc}
  40ed20:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
  40ed24:	4140      	adcs	r0, r0
  40ed26:	eb41 0101 	adc.w	r1, r1, r1
  40ed2a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  40ed2e:	f1a4 0401 	sub.w	r4, r4, #1
  40ed32:	d1e9      	bne.n	40ed08 <__adddf3+0x10c>
  40ed34:	f091 0f00 	teq	r1, #0
  40ed38:	bf04      	itt	eq
  40ed3a:	4601      	moveq	r1, r0
  40ed3c:	2000      	moveq	r0, #0
  40ed3e:	fab1 f381 	clz	r3, r1
  40ed42:	bf08      	it	eq
  40ed44:	3320      	addeq	r3, #32
  40ed46:	f1a3 030b 	sub.w	r3, r3, #11
  40ed4a:	f1b3 0220 	subs.w	r2, r3, #32
  40ed4e:	da0c      	bge.n	40ed6a <__adddf3+0x16e>
  40ed50:	320c      	adds	r2, #12
  40ed52:	dd08      	ble.n	40ed66 <__adddf3+0x16a>
  40ed54:	f102 0c14 	add.w	ip, r2, #20
  40ed58:	f1c2 020c 	rsb	r2, r2, #12
  40ed5c:	fa01 f00c 	lsl.w	r0, r1, ip
  40ed60:	fa21 f102 	lsr.w	r1, r1, r2
  40ed64:	e00c      	b.n	40ed80 <__adddf3+0x184>
  40ed66:	f102 0214 	add.w	r2, r2, #20
  40ed6a:	bfd8      	it	le
  40ed6c:	f1c2 0c20 	rsble	ip, r2, #32
  40ed70:	fa01 f102 	lsl.w	r1, r1, r2
  40ed74:	fa20 fc0c 	lsr.w	ip, r0, ip
  40ed78:	bfdc      	itt	le
  40ed7a:	ea41 010c 	orrle.w	r1, r1, ip
  40ed7e:	4090      	lslle	r0, r2
  40ed80:	1ae4      	subs	r4, r4, r3
  40ed82:	bfa2      	ittt	ge
  40ed84:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
  40ed88:	4329      	orrge	r1, r5
  40ed8a:	bd30      	popge	{r4, r5, pc}
  40ed8c:	ea6f 0404 	mvn.w	r4, r4
  40ed90:	3c1f      	subs	r4, #31
  40ed92:	da1c      	bge.n	40edce <__adddf3+0x1d2>
  40ed94:	340c      	adds	r4, #12
  40ed96:	dc0e      	bgt.n	40edb6 <__adddf3+0x1ba>
  40ed98:	f104 0414 	add.w	r4, r4, #20
  40ed9c:	f1c4 0220 	rsb	r2, r4, #32
  40eda0:	fa20 f004 	lsr.w	r0, r0, r4
  40eda4:	fa01 f302 	lsl.w	r3, r1, r2
  40eda8:	ea40 0003 	orr.w	r0, r0, r3
  40edac:	fa21 f304 	lsr.w	r3, r1, r4
  40edb0:	ea45 0103 	orr.w	r1, r5, r3
  40edb4:	bd30      	pop	{r4, r5, pc}
  40edb6:	f1c4 040c 	rsb	r4, r4, #12
  40edba:	f1c4 0220 	rsb	r2, r4, #32
  40edbe:	fa20 f002 	lsr.w	r0, r0, r2
  40edc2:	fa01 f304 	lsl.w	r3, r1, r4
  40edc6:	ea40 0003 	orr.w	r0, r0, r3
  40edca:	4629      	mov	r1, r5
  40edcc:	bd30      	pop	{r4, r5, pc}
  40edce:	fa21 f004 	lsr.w	r0, r1, r4
  40edd2:	4629      	mov	r1, r5
  40edd4:	bd30      	pop	{r4, r5, pc}
  40edd6:	f094 0f00 	teq	r4, #0
  40edda:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
  40edde:	bf06      	itte	eq
  40ede0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
  40ede4:	3401      	addeq	r4, #1
  40ede6:	3d01      	subne	r5, #1
  40ede8:	e74e      	b.n	40ec88 <__adddf3+0x8c>
  40edea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  40edee:	bf18      	it	ne
  40edf0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  40edf4:	d029      	beq.n	40ee4a <__adddf3+0x24e>
  40edf6:	ea94 0f05 	teq	r4, r5
  40edfa:	bf08      	it	eq
  40edfc:	ea90 0f02 	teqeq	r0, r2
  40ee00:	d005      	beq.n	40ee0e <__adddf3+0x212>
  40ee02:	ea54 0c00 	orrs.w	ip, r4, r0
  40ee06:	bf04      	itt	eq
  40ee08:	4619      	moveq	r1, r3
  40ee0a:	4610      	moveq	r0, r2
  40ee0c:	bd30      	pop	{r4, r5, pc}
  40ee0e:	ea91 0f03 	teq	r1, r3
  40ee12:	bf1e      	ittt	ne
  40ee14:	2100      	movne	r1, #0
  40ee16:	2000      	movne	r0, #0
  40ee18:	bd30      	popne	{r4, r5, pc}
  40ee1a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
  40ee1e:	d105      	bne.n	40ee2c <__adddf3+0x230>
  40ee20:	0040      	lsls	r0, r0, #1
  40ee22:	4149      	adcs	r1, r1
  40ee24:	bf28      	it	cs
  40ee26:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
  40ee2a:	bd30      	pop	{r4, r5, pc}
  40ee2c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
  40ee30:	bf3c      	itt	cc
  40ee32:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
  40ee36:	bd30      	popcc	{r4, r5, pc}
  40ee38:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  40ee3c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
  40ee40:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  40ee44:	f04f 0000 	mov.w	r0, #0
  40ee48:	bd30      	pop	{r4, r5, pc}
  40ee4a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  40ee4e:	bf1a      	itte	ne
  40ee50:	4619      	movne	r1, r3
  40ee52:	4610      	movne	r0, r2
  40ee54:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
  40ee58:	bf1c      	itt	ne
  40ee5a:	460b      	movne	r3, r1
  40ee5c:	4602      	movne	r2, r0
  40ee5e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  40ee62:	bf06      	itte	eq
  40ee64:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
  40ee68:	ea91 0f03 	teqeq	r1, r3
  40ee6c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
  40ee70:	bd30      	pop	{r4, r5, pc}
  40ee72:	bf00      	nop

0040ee74 <__aeabi_ui2d>:
  40ee74:	f090 0f00 	teq	r0, #0
  40ee78:	bf04      	itt	eq
  40ee7a:	2100      	moveq	r1, #0
  40ee7c:	4770      	bxeq	lr
  40ee7e:	b530      	push	{r4, r5, lr}
  40ee80:	f44f 6480 	mov.w	r4, #1024	; 0x400
  40ee84:	f104 0432 	add.w	r4, r4, #50	; 0x32
  40ee88:	f04f 0500 	mov.w	r5, #0
  40ee8c:	f04f 0100 	mov.w	r1, #0
  40ee90:	e750      	b.n	40ed34 <__adddf3+0x138>
  40ee92:	bf00      	nop

0040ee94 <__aeabi_i2d>:
  40ee94:	f090 0f00 	teq	r0, #0
  40ee98:	bf04      	itt	eq
  40ee9a:	2100      	moveq	r1, #0
  40ee9c:	4770      	bxeq	lr
  40ee9e:	b530      	push	{r4, r5, lr}
  40eea0:	f44f 6480 	mov.w	r4, #1024	; 0x400
  40eea4:	f104 0432 	add.w	r4, r4, #50	; 0x32
  40eea8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
  40eeac:	bf48      	it	mi
  40eeae:	4240      	negmi	r0, r0
  40eeb0:	f04f 0100 	mov.w	r1, #0
  40eeb4:	e73e      	b.n	40ed34 <__adddf3+0x138>
  40eeb6:	bf00      	nop

0040eeb8 <__aeabi_f2d>:
  40eeb8:	0042      	lsls	r2, r0, #1
  40eeba:	ea4f 01e2 	mov.w	r1, r2, asr #3
  40eebe:	ea4f 0131 	mov.w	r1, r1, rrx
  40eec2:	ea4f 7002 	mov.w	r0, r2, lsl #28
  40eec6:	bf1f      	itttt	ne
  40eec8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
  40eecc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  40eed0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
  40eed4:	4770      	bxne	lr
  40eed6:	f092 0f00 	teq	r2, #0
  40eeda:	bf14      	ite	ne
  40eedc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  40eee0:	4770      	bxeq	lr
  40eee2:	b530      	push	{r4, r5, lr}
  40eee4:	f44f 7460 	mov.w	r4, #896	; 0x380
  40eee8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  40eeec:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  40eef0:	e720      	b.n	40ed34 <__adddf3+0x138>
  40eef2:	bf00      	nop

0040eef4 <__aeabi_ul2d>:
  40eef4:	ea50 0201 	orrs.w	r2, r0, r1
  40eef8:	bf08      	it	eq
  40eefa:	4770      	bxeq	lr
  40eefc:	b530      	push	{r4, r5, lr}
  40eefe:	f04f 0500 	mov.w	r5, #0
  40ef02:	e00a      	b.n	40ef1a <__aeabi_l2d+0x16>

0040ef04 <__aeabi_l2d>:
  40ef04:	ea50 0201 	orrs.w	r2, r0, r1
  40ef08:	bf08      	it	eq
  40ef0a:	4770      	bxeq	lr
  40ef0c:	b530      	push	{r4, r5, lr}
  40ef0e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
  40ef12:	d502      	bpl.n	40ef1a <__aeabi_l2d+0x16>
  40ef14:	4240      	negs	r0, r0
  40ef16:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  40ef1a:	f44f 6480 	mov.w	r4, #1024	; 0x400
  40ef1e:	f104 0432 	add.w	r4, r4, #50	; 0x32
  40ef22:	ea5f 5c91 	movs.w	ip, r1, lsr #22
  40ef26:	f43f aedc 	beq.w	40ece2 <__adddf3+0xe6>
  40ef2a:	f04f 0203 	mov.w	r2, #3
  40ef2e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  40ef32:	bf18      	it	ne
  40ef34:	3203      	addne	r2, #3
  40ef36:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  40ef3a:	bf18      	it	ne
  40ef3c:	3203      	addne	r2, #3
  40ef3e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
  40ef42:	f1c2 0320 	rsb	r3, r2, #32
  40ef46:	fa00 fc03 	lsl.w	ip, r0, r3
  40ef4a:	fa20 f002 	lsr.w	r0, r0, r2
  40ef4e:	fa01 fe03 	lsl.w	lr, r1, r3
  40ef52:	ea40 000e 	orr.w	r0, r0, lr
  40ef56:	fa21 f102 	lsr.w	r1, r1, r2
  40ef5a:	4414      	add	r4, r2
  40ef5c:	e6c1      	b.n	40ece2 <__adddf3+0xe6>
  40ef5e:	bf00      	nop

0040ef60 <__aeabi_dmul>:
  40ef60:	b570      	push	{r4, r5, r6, lr}
  40ef62:	f04f 0cff 	mov.w	ip, #255	; 0xff
  40ef66:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  40ef6a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  40ef6e:	bf1d      	ittte	ne
  40ef70:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  40ef74:	ea94 0f0c 	teqne	r4, ip
  40ef78:	ea95 0f0c 	teqne	r5, ip
  40ef7c:	f000 f8de 	bleq	40f13c <__aeabi_dmul+0x1dc>
  40ef80:	442c      	add	r4, r5
  40ef82:	ea81 0603 	eor.w	r6, r1, r3
  40ef86:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
  40ef8a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
  40ef8e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
  40ef92:	bf18      	it	ne
  40ef94:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
  40ef98:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  40ef9c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  40efa0:	d038      	beq.n	40f014 <__aeabi_dmul+0xb4>
  40efa2:	fba0 ce02 	umull	ip, lr, r0, r2
  40efa6:	f04f 0500 	mov.w	r5, #0
  40efaa:	fbe1 e502 	umlal	lr, r5, r1, r2
  40efae:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
  40efb2:	fbe0 e503 	umlal	lr, r5, r0, r3
  40efb6:	f04f 0600 	mov.w	r6, #0
  40efba:	fbe1 5603 	umlal	r5, r6, r1, r3
  40efbe:	f09c 0f00 	teq	ip, #0
  40efc2:	bf18      	it	ne
  40efc4:	f04e 0e01 	orrne.w	lr, lr, #1
  40efc8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
  40efcc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
  40efd0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
  40efd4:	d204      	bcs.n	40efe0 <__aeabi_dmul+0x80>
  40efd6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
  40efda:	416d      	adcs	r5, r5
  40efdc:	eb46 0606 	adc.w	r6, r6, r6
  40efe0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
  40efe4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
  40efe8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
  40efec:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
  40eff0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
  40eff4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  40eff8:	bf88      	it	hi
  40effa:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  40effe:	d81e      	bhi.n	40f03e <__aeabi_dmul+0xde>
  40f000:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
  40f004:	bf08      	it	eq
  40f006:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
  40f00a:	f150 0000 	adcs.w	r0, r0, #0
  40f00e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  40f012:	bd70      	pop	{r4, r5, r6, pc}
  40f014:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
  40f018:	ea46 0101 	orr.w	r1, r6, r1
  40f01c:	ea40 0002 	orr.w	r0, r0, r2
  40f020:	ea81 0103 	eor.w	r1, r1, r3
  40f024:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
  40f028:	bfc2      	ittt	gt
  40f02a:	ebd4 050c 	rsbsgt	r5, r4, ip
  40f02e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  40f032:	bd70      	popgt	{r4, r5, r6, pc}
  40f034:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  40f038:	f04f 0e00 	mov.w	lr, #0
  40f03c:	3c01      	subs	r4, #1
  40f03e:	f300 80ab 	bgt.w	40f198 <__aeabi_dmul+0x238>
  40f042:	f114 0f36 	cmn.w	r4, #54	; 0x36
  40f046:	bfde      	ittt	le
  40f048:	2000      	movle	r0, #0
  40f04a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
  40f04e:	bd70      	pople	{r4, r5, r6, pc}
  40f050:	f1c4 0400 	rsb	r4, r4, #0
  40f054:	3c20      	subs	r4, #32
  40f056:	da35      	bge.n	40f0c4 <__aeabi_dmul+0x164>
  40f058:	340c      	adds	r4, #12
  40f05a:	dc1b      	bgt.n	40f094 <__aeabi_dmul+0x134>
  40f05c:	f104 0414 	add.w	r4, r4, #20
  40f060:	f1c4 0520 	rsb	r5, r4, #32
  40f064:	fa00 f305 	lsl.w	r3, r0, r5
  40f068:	fa20 f004 	lsr.w	r0, r0, r4
  40f06c:	fa01 f205 	lsl.w	r2, r1, r5
  40f070:	ea40 0002 	orr.w	r0, r0, r2
  40f074:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
  40f078:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  40f07c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  40f080:	fa21 f604 	lsr.w	r6, r1, r4
  40f084:	eb42 0106 	adc.w	r1, r2, r6
  40f088:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  40f08c:	bf08      	it	eq
  40f08e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  40f092:	bd70      	pop	{r4, r5, r6, pc}
  40f094:	f1c4 040c 	rsb	r4, r4, #12
  40f098:	f1c4 0520 	rsb	r5, r4, #32
  40f09c:	fa00 f304 	lsl.w	r3, r0, r4
  40f0a0:	fa20 f005 	lsr.w	r0, r0, r5
  40f0a4:	fa01 f204 	lsl.w	r2, r1, r4
  40f0a8:	ea40 0002 	orr.w	r0, r0, r2
  40f0ac:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  40f0b0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  40f0b4:	f141 0100 	adc.w	r1, r1, #0
  40f0b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  40f0bc:	bf08      	it	eq
  40f0be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  40f0c2:	bd70      	pop	{r4, r5, r6, pc}
  40f0c4:	f1c4 0520 	rsb	r5, r4, #32
  40f0c8:	fa00 f205 	lsl.w	r2, r0, r5
  40f0cc:	ea4e 0e02 	orr.w	lr, lr, r2
  40f0d0:	fa20 f304 	lsr.w	r3, r0, r4
  40f0d4:	fa01 f205 	lsl.w	r2, r1, r5
  40f0d8:	ea43 0302 	orr.w	r3, r3, r2
  40f0dc:	fa21 f004 	lsr.w	r0, r1, r4
  40f0e0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  40f0e4:	fa21 f204 	lsr.w	r2, r1, r4
  40f0e8:	ea20 0002 	bic.w	r0, r0, r2
  40f0ec:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
  40f0f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  40f0f4:	bf08      	it	eq
  40f0f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  40f0fa:	bd70      	pop	{r4, r5, r6, pc}
  40f0fc:	f094 0f00 	teq	r4, #0
  40f100:	d10f      	bne.n	40f122 <__aeabi_dmul+0x1c2>
  40f102:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
  40f106:	0040      	lsls	r0, r0, #1
  40f108:	eb41 0101 	adc.w	r1, r1, r1
  40f10c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  40f110:	bf08      	it	eq
  40f112:	3c01      	subeq	r4, #1
  40f114:	d0f7      	beq.n	40f106 <__aeabi_dmul+0x1a6>
  40f116:	ea41 0106 	orr.w	r1, r1, r6
  40f11a:	f095 0f00 	teq	r5, #0
  40f11e:	bf18      	it	ne
  40f120:	4770      	bxne	lr
  40f122:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
  40f126:	0052      	lsls	r2, r2, #1
  40f128:	eb43 0303 	adc.w	r3, r3, r3
  40f12c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
  40f130:	bf08      	it	eq
  40f132:	3d01      	subeq	r5, #1
  40f134:	d0f7      	beq.n	40f126 <__aeabi_dmul+0x1c6>
  40f136:	ea43 0306 	orr.w	r3, r3, r6
  40f13a:	4770      	bx	lr
  40f13c:	ea94 0f0c 	teq	r4, ip
  40f140:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  40f144:	bf18      	it	ne
  40f146:	ea95 0f0c 	teqne	r5, ip
  40f14a:	d00c      	beq.n	40f166 <__aeabi_dmul+0x206>
  40f14c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  40f150:	bf18      	it	ne
  40f152:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  40f156:	d1d1      	bne.n	40f0fc <__aeabi_dmul+0x19c>
  40f158:	ea81 0103 	eor.w	r1, r1, r3
  40f15c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  40f160:	f04f 0000 	mov.w	r0, #0
  40f164:	bd70      	pop	{r4, r5, r6, pc}
  40f166:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  40f16a:	bf06      	itte	eq
  40f16c:	4610      	moveq	r0, r2
  40f16e:	4619      	moveq	r1, r3
  40f170:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  40f174:	d019      	beq.n	40f1aa <__aeabi_dmul+0x24a>
  40f176:	ea94 0f0c 	teq	r4, ip
  40f17a:	d102      	bne.n	40f182 <__aeabi_dmul+0x222>
  40f17c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
  40f180:	d113      	bne.n	40f1aa <__aeabi_dmul+0x24a>
  40f182:	ea95 0f0c 	teq	r5, ip
  40f186:	d105      	bne.n	40f194 <__aeabi_dmul+0x234>
  40f188:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
  40f18c:	bf1c      	itt	ne
  40f18e:	4610      	movne	r0, r2
  40f190:	4619      	movne	r1, r3
  40f192:	d10a      	bne.n	40f1aa <__aeabi_dmul+0x24a>
  40f194:	ea81 0103 	eor.w	r1, r1, r3
  40f198:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  40f19c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  40f1a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  40f1a4:	f04f 0000 	mov.w	r0, #0
  40f1a8:	bd70      	pop	{r4, r5, r6, pc}
  40f1aa:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  40f1ae:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
  40f1b2:	bd70      	pop	{r4, r5, r6, pc}

0040f1b4 <__aeabi_ddiv>:
  40f1b4:	b570      	push	{r4, r5, r6, lr}
  40f1b6:	f04f 0cff 	mov.w	ip, #255	; 0xff
  40f1ba:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  40f1be:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  40f1c2:	bf1d      	ittte	ne
  40f1c4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  40f1c8:	ea94 0f0c 	teqne	r4, ip
  40f1cc:	ea95 0f0c 	teqne	r5, ip
  40f1d0:	f000 f8a7 	bleq	40f322 <__aeabi_ddiv+0x16e>
  40f1d4:	eba4 0405 	sub.w	r4, r4, r5
  40f1d8:	ea81 0e03 	eor.w	lr, r1, r3
  40f1dc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  40f1e0:	ea4f 3101 	mov.w	r1, r1, lsl #12
  40f1e4:	f000 8088 	beq.w	40f2f8 <__aeabi_ddiv+0x144>
  40f1e8:	ea4f 3303 	mov.w	r3, r3, lsl #12
  40f1ec:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
  40f1f0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
  40f1f4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
  40f1f8:	ea4f 2202 	mov.w	r2, r2, lsl #8
  40f1fc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
  40f200:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
  40f204:	ea4f 2600 	mov.w	r6, r0, lsl #8
  40f208:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
  40f20c:	429d      	cmp	r5, r3
  40f20e:	bf08      	it	eq
  40f210:	4296      	cmpeq	r6, r2
  40f212:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
  40f216:	f504 7440 	add.w	r4, r4, #768	; 0x300
  40f21a:	d202      	bcs.n	40f222 <__aeabi_ddiv+0x6e>
  40f21c:	085b      	lsrs	r3, r3, #1
  40f21e:	ea4f 0232 	mov.w	r2, r2, rrx
  40f222:	1ab6      	subs	r6, r6, r2
  40f224:	eb65 0503 	sbc.w	r5, r5, r3
  40f228:	085b      	lsrs	r3, r3, #1
  40f22a:	ea4f 0232 	mov.w	r2, r2, rrx
  40f22e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
  40f232:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
  40f236:	ebb6 0e02 	subs.w	lr, r6, r2
  40f23a:	eb75 0e03 	sbcs.w	lr, r5, r3
  40f23e:	bf22      	ittt	cs
  40f240:	1ab6      	subcs	r6, r6, r2
  40f242:	4675      	movcs	r5, lr
  40f244:	ea40 000c 	orrcs.w	r0, r0, ip
  40f248:	085b      	lsrs	r3, r3, #1
  40f24a:	ea4f 0232 	mov.w	r2, r2, rrx
  40f24e:	ebb6 0e02 	subs.w	lr, r6, r2
  40f252:	eb75 0e03 	sbcs.w	lr, r5, r3
  40f256:	bf22      	ittt	cs
  40f258:	1ab6      	subcs	r6, r6, r2
  40f25a:	4675      	movcs	r5, lr
  40f25c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
  40f260:	085b      	lsrs	r3, r3, #1
  40f262:	ea4f 0232 	mov.w	r2, r2, rrx
  40f266:	ebb6 0e02 	subs.w	lr, r6, r2
  40f26a:	eb75 0e03 	sbcs.w	lr, r5, r3
  40f26e:	bf22      	ittt	cs
  40f270:	1ab6      	subcs	r6, r6, r2
  40f272:	4675      	movcs	r5, lr
  40f274:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
  40f278:	085b      	lsrs	r3, r3, #1
  40f27a:	ea4f 0232 	mov.w	r2, r2, rrx
  40f27e:	ebb6 0e02 	subs.w	lr, r6, r2
  40f282:	eb75 0e03 	sbcs.w	lr, r5, r3
  40f286:	bf22      	ittt	cs
  40f288:	1ab6      	subcs	r6, r6, r2
  40f28a:	4675      	movcs	r5, lr
  40f28c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
  40f290:	ea55 0e06 	orrs.w	lr, r5, r6
  40f294:	d018      	beq.n	40f2c8 <__aeabi_ddiv+0x114>
  40f296:	ea4f 1505 	mov.w	r5, r5, lsl #4
  40f29a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
  40f29e:	ea4f 1606 	mov.w	r6, r6, lsl #4
  40f2a2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
  40f2a6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
  40f2aa:	ea4f 02c2 	mov.w	r2, r2, lsl #3
  40f2ae:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
  40f2b2:	d1c0      	bne.n	40f236 <__aeabi_ddiv+0x82>
  40f2b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  40f2b8:	d10b      	bne.n	40f2d2 <__aeabi_ddiv+0x11e>
  40f2ba:	ea41 0100 	orr.w	r1, r1, r0
  40f2be:	f04f 0000 	mov.w	r0, #0
  40f2c2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
  40f2c6:	e7b6      	b.n	40f236 <__aeabi_ddiv+0x82>
  40f2c8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  40f2cc:	bf04      	itt	eq
  40f2ce:	4301      	orreq	r1, r0
  40f2d0:	2000      	moveq	r0, #0
  40f2d2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  40f2d6:	bf88      	it	hi
  40f2d8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  40f2dc:	f63f aeaf 	bhi.w	40f03e <__aeabi_dmul+0xde>
  40f2e0:	ebb5 0c03 	subs.w	ip, r5, r3
  40f2e4:	bf04      	itt	eq
  40f2e6:	ebb6 0c02 	subseq.w	ip, r6, r2
  40f2ea:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  40f2ee:	f150 0000 	adcs.w	r0, r0, #0
  40f2f2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  40f2f6:	bd70      	pop	{r4, r5, r6, pc}
  40f2f8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
  40f2fc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
  40f300:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
  40f304:	bfc2      	ittt	gt
  40f306:	ebd4 050c 	rsbsgt	r5, r4, ip
  40f30a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  40f30e:	bd70      	popgt	{r4, r5, r6, pc}
  40f310:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  40f314:	f04f 0e00 	mov.w	lr, #0
  40f318:	3c01      	subs	r4, #1
  40f31a:	e690      	b.n	40f03e <__aeabi_dmul+0xde>
  40f31c:	ea45 0e06 	orr.w	lr, r5, r6
  40f320:	e68d      	b.n	40f03e <__aeabi_dmul+0xde>
  40f322:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  40f326:	ea94 0f0c 	teq	r4, ip
  40f32a:	bf08      	it	eq
  40f32c:	ea95 0f0c 	teqeq	r5, ip
  40f330:	f43f af3b 	beq.w	40f1aa <__aeabi_dmul+0x24a>
  40f334:	ea94 0f0c 	teq	r4, ip
  40f338:	d10a      	bne.n	40f350 <__aeabi_ddiv+0x19c>
  40f33a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  40f33e:	f47f af34 	bne.w	40f1aa <__aeabi_dmul+0x24a>
  40f342:	ea95 0f0c 	teq	r5, ip
  40f346:	f47f af25 	bne.w	40f194 <__aeabi_dmul+0x234>
  40f34a:	4610      	mov	r0, r2
  40f34c:	4619      	mov	r1, r3
  40f34e:	e72c      	b.n	40f1aa <__aeabi_dmul+0x24a>
  40f350:	ea95 0f0c 	teq	r5, ip
  40f354:	d106      	bne.n	40f364 <__aeabi_ddiv+0x1b0>
  40f356:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  40f35a:	f43f aefd 	beq.w	40f158 <__aeabi_dmul+0x1f8>
  40f35e:	4610      	mov	r0, r2
  40f360:	4619      	mov	r1, r3
  40f362:	e722      	b.n	40f1aa <__aeabi_dmul+0x24a>
  40f364:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  40f368:	bf18      	it	ne
  40f36a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  40f36e:	f47f aec5 	bne.w	40f0fc <__aeabi_dmul+0x19c>
  40f372:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
  40f376:	f47f af0d 	bne.w	40f194 <__aeabi_dmul+0x234>
  40f37a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
  40f37e:	f47f aeeb 	bne.w	40f158 <__aeabi_dmul+0x1f8>
  40f382:	e712      	b.n	40f1aa <__aeabi_dmul+0x24a>

0040f384 <__aeabi_d2iz>:
  40f384:	ea4f 0241 	mov.w	r2, r1, lsl #1
  40f388:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
  40f38c:	d215      	bcs.n	40f3ba <__aeabi_d2iz+0x36>
  40f38e:	d511      	bpl.n	40f3b4 <__aeabi_d2iz+0x30>
  40f390:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
  40f394:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
  40f398:	d912      	bls.n	40f3c0 <__aeabi_d2iz+0x3c>
  40f39a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
  40f39e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
  40f3a2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
  40f3a6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  40f3aa:	fa23 f002 	lsr.w	r0, r3, r2
  40f3ae:	bf18      	it	ne
  40f3b0:	4240      	negne	r0, r0
  40f3b2:	4770      	bx	lr
  40f3b4:	f04f 0000 	mov.w	r0, #0
  40f3b8:	4770      	bx	lr
  40f3ba:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
  40f3be:	d105      	bne.n	40f3cc <__aeabi_d2iz+0x48>
  40f3c0:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
  40f3c4:	bf08      	it	eq
  40f3c6:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
  40f3ca:	4770      	bx	lr
  40f3cc:	f04f 0000 	mov.w	r0, #0
  40f3d0:	4770      	bx	lr
  40f3d2:	bf00      	nop

0040f3d4 <__aeabi_uldivmod>:
  40f3d4:	b953      	cbnz	r3, 40f3ec <__aeabi_uldivmod+0x18>
  40f3d6:	b94a      	cbnz	r2, 40f3ec <__aeabi_uldivmod+0x18>
  40f3d8:	2900      	cmp	r1, #0
  40f3da:	bf08      	it	eq
  40f3dc:	2800      	cmpeq	r0, #0
  40f3de:	bf1c      	itt	ne
  40f3e0:	f04f 31ff 	movne.w	r1, #4294967295
  40f3e4:	f04f 30ff 	movne.w	r0, #4294967295
  40f3e8:	f000 b83c 	b.w	40f464 <__aeabi_idiv0>
  40f3ec:	b082      	sub	sp, #8
  40f3ee:	46ec      	mov	ip, sp
  40f3f0:	e92d 5000 	stmdb	sp!, {ip, lr}
  40f3f4:	f000 f81e 	bl	40f434 <__gnu_uldivmod_helper>
  40f3f8:	f8dd e004 	ldr.w	lr, [sp, #4]
  40f3fc:	b002      	add	sp, #8
  40f3fe:	bc0c      	pop	{r2, r3}
  40f400:	4770      	bx	lr
  40f402:	bf00      	nop

0040f404 <__gnu_ldivmod_helper>:
  40f404:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40f408:	9c06      	ldr	r4, [sp, #24]
  40f40a:	4615      	mov	r5, r2
  40f40c:	4606      	mov	r6, r0
  40f40e:	460f      	mov	r7, r1
  40f410:	4698      	mov	r8, r3
  40f412:	f000 f829 	bl	40f468 <__divdi3>
  40f416:	fb05 f301 	mul.w	r3, r5, r1
  40f41a:	fb00 3808 	mla	r8, r0, r8, r3
  40f41e:	fba5 2300 	umull	r2, r3, r5, r0
  40f422:	1ab2      	subs	r2, r6, r2
  40f424:	4443      	add	r3, r8
  40f426:	eb67 0303 	sbc.w	r3, r7, r3
  40f42a:	e9c4 2300 	strd	r2, r3, [r4]
  40f42e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40f432:	bf00      	nop

0040f434 <__gnu_uldivmod_helper>:
  40f434:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40f438:	9c06      	ldr	r4, [sp, #24]
  40f43a:	4690      	mov	r8, r2
  40f43c:	4606      	mov	r6, r0
  40f43e:	460f      	mov	r7, r1
  40f440:	461d      	mov	r5, r3
  40f442:	f000 f95f 	bl	40f704 <__udivdi3>
  40f446:	fb00 f505 	mul.w	r5, r0, r5
  40f44a:	fba0 2308 	umull	r2, r3, r0, r8
  40f44e:	fb08 5501 	mla	r5, r8, r1, r5
  40f452:	1ab2      	subs	r2, r6, r2
  40f454:	442b      	add	r3, r5
  40f456:	eb67 0303 	sbc.w	r3, r7, r3
  40f45a:	e9c4 2300 	strd	r2, r3, [r4]
  40f45e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40f462:	bf00      	nop

0040f464 <__aeabi_idiv0>:
  40f464:	4770      	bx	lr
  40f466:	bf00      	nop

0040f468 <__divdi3>:
  40f468:	2900      	cmp	r1, #0
  40f46a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  40f46e:	f2c0 80a6 	blt.w	40f5be <__divdi3+0x156>
  40f472:	2600      	movs	r6, #0
  40f474:	2b00      	cmp	r3, #0
  40f476:	f2c0 809c 	blt.w	40f5b2 <__divdi3+0x14a>
  40f47a:	4688      	mov	r8, r1
  40f47c:	4694      	mov	ip, r2
  40f47e:	469e      	mov	lr, r3
  40f480:	4615      	mov	r5, r2
  40f482:	4604      	mov	r4, r0
  40f484:	460f      	mov	r7, r1
  40f486:	2b00      	cmp	r3, #0
  40f488:	d13d      	bne.n	40f506 <__divdi3+0x9e>
  40f48a:	428a      	cmp	r2, r1
  40f48c:	d959      	bls.n	40f542 <__divdi3+0xda>
  40f48e:	fab2 f382 	clz	r3, r2
  40f492:	b13b      	cbz	r3, 40f4a4 <__divdi3+0x3c>
  40f494:	f1c3 0220 	rsb	r2, r3, #32
  40f498:	409f      	lsls	r7, r3
  40f49a:	fa20 f202 	lsr.w	r2, r0, r2
  40f49e:	409d      	lsls	r5, r3
  40f4a0:	4317      	orrs	r7, r2
  40f4a2:	409c      	lsls	r4, r3
  40f4a4:	0c29      	lsrs	r1, r5, #16
  40f4a6:	0c22      	lsrs	r2, r4, #16
  40f4a8:	fbb7 fef1 	udiv	lr, r7, r1
  40f4ac:	b2a8      	uxth	r0, r5
  40f4ae:	fb01 771e 	mls	r7, r1, lr, r7
  40f4b2:	ea42 4707 	orr.w	r7, r2, r7, lsl #16
  40f4b6:	fb00 f30e 	mul.w	r3, r0, lr
  40f4ba:	42bb      	cmp	r3, r7
  40f4bc:	d90a      	bls.n	40f4d4 <__divdi3+0x6c>
  40f4be:	197f      	adds	r7, r7, r5
  40f4c0:	f10e 32ff 	add.w	r2, lr, #4294967295
  40f4c4:	f080 8105 	bcs.w	40f6d2 <__divdi3+0x26a>
  40f4c8:	42bb      	cmp	r3, r7
  40f4ca:	f240 8102 	bls.w	40f6d2 <__divdi3+0x26a>
  40f4ce:	f1ae 0e02 	sub.w	lr, lr, #2
  40f4d2:	442f      	add	r7, r5
  40f4d4:	1aff      	subs	r7, r7, r3
  40f4d6:	b2a4      	uxth	r4, r4
  40f4d8:	fbb7 f3f1 	udiv	r3, r7, r1
  40f4dc:	fb01 7713 	mls	r7, r1, r3, r7
  40f4e0:	ea44 4707 	orr.w	r7, r4, r7, lsl #16
  40f4e4:	fb00 f003 	mul.w	r0, r0, r3
  40f4e8:	42b8      	cmp	r0, r7
  40f4ea:	d908      	bls.n	40f4fe <__divdi3+0x96>
  40f4ec:	197f      	adds	r7, r7, r5
  40f4ee:	f103 32ff 	add.w	r2, r3, #4294967295
  40f4f2:	f080 80f0 	bcs.w	40f6d6 <__divdi3+0x26e>
  40f4f6:	42b8      	cmp	r0, r7
  40f4f8:	f240 80ed 	bls.w	40f6d6 <__divdi3+0x26e>
  40f4fc:	3b02      	subs	r3, #2
  40f4fe:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
  40f502:	2200      	movs	r2, #0
  40f504:	e003      	b.n	40f50e <__divdi3+0xa6>
  40f506:	428b      	cmp	r3, r1
  40f508:	d90f      	bls.n	40f52a <__divdi3+0xc2>
  40f50a:	2200      	movs	r2, #0
  40f50c:	4613      	mov	r3, r2
  40f50e:	1c34      	adds	r4, r6, #0
  40f510:	bf18      	it	ne
  40f512:	2401      	movne	r4, #1
  40f514:	4260      	negs	r0, r4
  40f516:	f04f 0500 	mov.w	r5, #0
  40f51a:	eb65 0145 	sbc.w	r1, r5, r5, lsl #1
  40f51e:	4058      	eors	r0, r3
  40f520:	4051      	eors	r1, r2
  40f522:	1900      	adds	r0, r0, r4
  40f524:	4169      	adcs	r1, r5
  40f526:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  40f52a:	fab3 f283 	clz	r2, r3
  40f52e:	2a00      	cmp	r2, #0
  40f530:	f040 8086 	bne.w	40f640 <__divdi3+0x1d8>
  40f534:	428b      	cmp	r3, r1
  40f536:	d302      	bcc.n	40f53e <__divdi3+0xd6>
  40f538:	4584      	cmp	ip, r0
  40f53a:	f200 80db 	bhi.w	40f6f4 <__divdi3+0x28c>
  40f53e:	2301      	movs	r3, #1
  40f540:	e7e5      	b.n	40f50e <__divdi3+0xa6>
  40f542:	b912      	cbnz	r2, 40f54a <__divdi3+0xe2>
  40f544:	2301      	movs	r3, #1
  40f546:	fbb3 f5f2 	udiv	r5, r3, r2
  40f54a:	fab5 f085 	clz	r0, r5
  40f54e:	2800      	cmp	r0, #0
  40f550:	d13b      	bne.n	40f5ca <__divdi3+0x162>
  40f552:	1b78      	subs	r0, r7, r5
  40f554:	ea4f 4e15 	mov.w	lr, r5, lsr #16
  40f558:	fa1f fc85 	uxth.w	ip, r5
  40f55c:	2201      	movs	r2, #1
  40f55e:	fbb0 f8fe 	udiv	r8, r0, lr
  40f562:	0c21      	lsrs	r1, r4, #16
  40f564:	fb0e 0718 	mls	r7, lr, r8, r0
  40f568:	ea41 4707 	orr.w	r7, r1, r7, lsl #16
  40f56c:	fb0c f308 	mul.w	r3, ip, r8
  40f570:	42bb      	cmp	r3, r7
  40f572:	d907      	bls.n	40f584 <__divdi3+0x11c>
  40f574:	197f      	adds	r7, r7, r5
  40f576:	f108 31ff 	add.w	r1, r8, #4294967295
  40f57a:	d202      	bcs.n	40f582 <__divdi3+0x11a>
  40f57c:	42bb      	cmp	r3, r7
  40f57e:	f200 80bd 	bhi.w	40f6fc <__divdi3+0x294>
  40f582:	4688      	mov	r8, r1
  40f584:	1aff      	subs	r7, r7, r3
  40f586:	b2a4      	uxth	r4, r4
  40f588:	fbb7 f3fe 	udiv	r3, r7, lr
  40f58c:	fb0e 7713 	mls	r7, lr, r3, r7
  40f590:	ea44 4707 	orr.w	r7, r4, r7, lsl #16
  40f594:	fb0c fc03 	mul.w	ip, ip, r3
  40f598:	45bc      	cmp	ip, r7
  40f59a:	d907      	bls.n	40f5ac <__divdi3+0x144>
  40f59c:	197f      	adds	r7, r7, r5
  40f59e:	f103 31ff 	add.w	r1, r3, #4294967295
  40f5a2:	d202      	bcs.n	40f5aa <__divdi3+0x142>
  40f5a4:	45bc      	cmp	ip, r7
  40f5a6:	f200 80a7 	bhi.w	40f6f8 <__divdi3+0x290>
  40f5aa:	460b      	mov	r3, r1
  40f5ac:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
  40f5b0:	e7ad      	b.n	40f50e <__divdi3+0xa6>
  40f5b2:	4252      	negs	r2, r2
  40f5b4:	ea6f 0606 	mvn.w	r6, r6
  40f5b8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
  40f5bc:	e75d      	b.n	40f47a <__divdi3+0x12>
  40f5be:	4240      	negs	r0, r0
  40f5c0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  40f5c4:	f04f 36ff 	mov.w	r6, #4294967295
  40f5c8:	e754      	b.n	40f474 <__divdi3+0xc>
  40f5ca:	f1c0 0220 	rsb	r2, r0, #32
  40f5ce:	fa24 f102 	lsr.w	r1, r4, r2
  40f5d2:	fa07 f300 	lsl.w	r3, r7, r0
  40f5d6:	4085      	lsls	r5, r0
  40f5d8:	ea4f 4e15 	mov.w	lr, r5, lsr #16
  40f5dc:	40d7      	lsrs	r7, r2
  40f5de:	4319      	orrs	r1, r3
  40f5e0:	fbb7 f2fe 	udiv	r2, r7, lr
  40f5e4:	0c0b      	lsrs	r3, r1, #16
  40f5e6:	fb0e 7712 	mls	r7, lr, r2, r7
  40f5ea:	fa1f fc85 	uxth.w	ip, r5
  40f5ee:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
  40f5f2:	fb0c f702 	mul.w	r7, ip, r2
  40f5f6:	429f      	cmp	r7, r3
  40f5f8:	fa04 f400 	lsl.w	r4, r4, r0
  40f5fc:	d907      	bls.n	40f60e <__divdi3+0x1a6>
  40f5fe:	195b      	adds	r3, r3, r5
  40f600:	f102 30ff 	add.w	r0, r2, #4294967295
  40f604:	d274      	bcs.n	40f6f0 <__divdi3+0x288>
  40f606:	429f      	cmp	r7, r3
  40f608:	d972      	bls.n	40f6f0 <__divdi3+0x288>
  40f60a:	3a02      	subs	r2, #2
  40f60c:	442b      	add	r3, r5
  40f60e:	1bdf      	subs	r7, r3, r7
  40f610:	b289      	uxth	r1, r1
  40f612:	fbb7 f8fe 	udiv	r8, r7, lr
  40f616:	fb0e 7318 	mls	r3, lr, r8, r7
  40f61a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
  40f61e:	fb0c f708 	mul.w	r7, ip, r8
  40f622:	429f      	cmp	r7, r3
  40f624:	d908      	bls.n	40f638 <__divdi3+0x1d0>
  40f626:	195b      	adds	r3, r3, r5
  40f628:	f108 31ff 	add.w	r1, r8, #4294967295
  40f62c:	d25c      	bcs.n	40f6e8 <__divdi3+0x280>
  40f62e:	429f      	cmp	r7, r3
  40f630:	d95a      	bls.n	40f6e8 <__divdi3+0x280>
  40f632:	f1a8 0802 	sub.w	r8, r8, #2
  40f636:	442b      	add	r3, r5
  40f638:	1bd8      	subs	r0, r3, r7
  40f63a:	ea48 4202 	orr.w	r2, r8, r2, lsl #16
  40f63e:	e78e      	b.n	40f55e <__divdi3+0xf6>
  40f640:	f1c2 0320 	rsb	r3, r2, #32
  40f644:	fa2c f103 	lsr.w	r1, ip, r3
  40f648:	fa0e fe02 	lsl.w	lr, lr, r2
  40f64c:	fa20 f703 	lsr.w	r7, r0, r3
  40f650:	ea41 0e0e 	orr.w	lr, r1, lr
  40f654:	fa08 f002 	lsl.w	r0, r8, r2
  40f658:	fa28 f103 	lsr.w	r1, r8, r3
  40f65c:	ea4f 451e 	mov.w	r5, lr, lsr #16
  40f660:	4338      	orrs	r0, r7
  40f662:	fbb1 f8f5 	udiv	r8, r1, r5
  40f666:	0c03      	lsrs	r3, r0, #16
  40f668:	fb05 1118 	mls	r1, r5, r8, r1
  40f66c:	fa1f f78e 	uxth.w	r7, lr
  40f670:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
  40f674:	fb07 f308 	mul.w	r3, r7, r8
  40f678:	428b      	cmp	r3, r1
  40f67a:	fa0c fc02 	lsl.w	ip, ip, r2
  40f67e:	d909      	bls.n	40f694 <__divdi3+0x22c>
  40f680:	eb11 010e 	adds.w	r1, r1, lr
  40f684:	f108 39ff 	add.w	r9, r8, #4294967295
  40f688:	d230      	bcs.n	40f6ec <__divdi3+0x284>
  40f68a:	428b      	cmp	r3, r1
  40f68c:	d92e      	bls.n	40f6ec <__divdi3+0x284>
  40f68e:	f1a8 0802 	sub.w	r8, r8, #2
  40f692:	4471      	add	r1, lr
  40f694:	1ac9      	subs	r1, r1, r3
  40f696:	b280      	uxth	r0, r0
  40f698:	fbb1 f3f5 	udiv	r3, r1, r5
  40f69c:	fb05 1113 	mls	r1, r5, r3, r1
  40f6a0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
  40f6a4:	fb07 f703 	mul.w	r7, r7, r3
  40f6a8:	428f      	cmp	r7, r1
  40f6aa:	d908      	bls.n	40f6be <__divdi3+0x256>
  40f6ac:	eb11 010e 	adds.w	r1, r1, lr
  40f6b0:	f103 30ff 	add.w	r0, r3, #4294967295
  40f6b4:	d216      	bcs.n	40f6e4 <__divdi3+0x27c>
  40f6b6:	428f      	cmp	r7, r1
  40f6b8:	d914      	bls.n	40f6e4 <__divdi3+0x27c>
  40f6ba:	3b02      	subs	r3, #2
  40f6bc:	4471      	add	r1, lr
  40f6be:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
  40f6c2:	1bc9      	subs	r1, r1, r7
  40f6c4:	fba3 890c 	umull	r8, r9, r3, ip
  40f6c8:	4549      	cmp	r1, r9
  40f6ca:	d309      	bcc.n	40f6e0 <__divdi3+0x278>
  40f6cc:	d005      	beq.n	40f6da <__divdi3+0x272>
  40f6ce:	2200      	movs	r2, #0
  40f6d0:	e71d      	b.n	40f50e <__divdi3+0xa6>
  40f6d2:	4696      	mov	lr, r2
  40f6d4:	e6fe      	b.n	40f4d4 <__divdi3+0x6c>
  40f6d6:	4613      	mov	r3, r2
  40f6d8:	e711      	b.n	40f4fe <__divdi3+0x96>
  40f6da:	4094      	lsls	r4, r2
  40f6dc:	4544      	cmp	r4, r8
  40f6de:	d2f6      	bcs.n	40f6ce <__divdi3+0x266>
  40f6e0:	3b01      	subs	r3, #1
  40f6e2:	e7f4      	b.n	40f6ce <__divdi3+0x266>
  40f6e4:	4603      	mov	r3, r0
  40f6e6:	e7ea      	b.n	40f6be <__divdi3+0x256>
  40f6e8:	4688      	mov	r8, r1
  40f6ea:	e7a5      	b.n	40f638 <__divdi3+0x1d0>
  40f6ec:	46c8      	mov	r8, r9
  40f6ee:	e7d1      	b.n	40f694 <__divdi3+0x22c>
  40f6f0:	4602      	mov	r2, r0
  40f6f2:	e78c      	b.n	40f60e <__divdi3+0x1a6>
  40f6f4:	4613      	mov	r3, r2
  40f6f6:	e70a      	b.n	40f50e <__divdi3+0xa6>
  40f6f8:	3b02      	subs	r3, #2
  40f6fa:	e757      	b.n	40f5ac <__divdi3+0x144>
  40f6fc:	f1a8 0802 	sub.w	r8, r8, #2
  40f700:	442f      	add	r7, r5
  40f702:	e73f      	b.n	40f584 <__divdi3+0x11c>

0040f704 <__udivdi3>:
  40f704:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40f708:	2b00      	cmp	r3, #0
  40f70a:	d144      	bne.n	40f796 <__udivdi3+0x92>
  40f70c:	428a      	cmp	r2, r1
  40f70e:	4615      	mov	r5, r2
  40f710:	4604      	mov	r4, r0
  40f712:	d94f      	bls.n	40f7b4 <__udivdi3+0xb0>
  40f714:	fab2 f782 	clz	r7, r2
  40f718:	460e      	mov	r6, r1
  40f71a:	b14f      	cbz	r7, 40f730 <__udivdi3+0x2c>
  40f71c:	f1c7 0320 	rsb	r3, r7, #32
  40f720:	40b9      	lsls	r1, r7
  40f722:	fa20 f603 	lsr.w	r6, r0, r3
  40f726:	fa02 f507 	lsl.w	r5, r2, r7
  40f72a:	430e      	orrs	r6, r1
  40f72c:	fa00 f407 	lsl.w	r4, r0, r7
  40f730:	ea4f 4e15 	mov.w	lr, r5, lsr #16
  40f734:	0c23      	lsrs	r3, r4, #16
  40f736:	fbb6 f0fe 	udiv	r0, r6, lr
  40f73a:	b2af      	uxth	r7, r5
  40f73c:	fb0e 6110 	mls	r1, lr, r0, r6
  40f740:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
  40f744:	fb07 f100 	mul.w	r1, r7, r0
  40f748:	4299      	cmp	r1, r3
  40f74a:	d909      	bls.n	40f760 <__udivdi3+0x5c>
  40f74c:	195b      	adds	r3, r3, r5
  40f74e:	f100 32ff 	add.w	r2, r0, #4294967295
  40f752:	f080 80ec 	bcs.w	40f92e <__udivdi3+0x22a>
  40f756:	4299      	cmp	r1, r3
  40f758:	f240 80e9 	bls.w	40f92e <__udivdi3+0x22a>
  40f75c:	3802      	subs	r0, #2
  40f75e:	442b      	add	r3, r5
  40f760:	1a5a      	subs	r2, r3, r1
  40f762:	b2a4      	uxth	r4, r4
  40f764:	fbb2 f3fe 	udiv	r3, r2, lr
  40f768:	fb0e 2213 	mls	r2, lr, r3, r2
  40f76c:	ea44 4202 	orr.w	r2, r4, r2, lsl #16
  40f770:	fb07 f703 	mul.w	r7, r7, r3
  40f774:	4297      	cmp	r7, r2
  40f776:	d908      	bls.n	40f78a <__udivdi3+0x86>
  40f778:	1952      	adds	r2, r2, r5
  40f77a:	f103 31ff 	add.w	r1, r3, #4294967295
  40f77e:	f080 80d8 	bcs.w	40f932 <__udivdi3+0x22e>
  40f782:	4297      	cmp	r7, r2
  40f784:	f240 80d5 	bls.w	40f932 <__udivdi3+0x22e>
  40f788:	3b02      	subs	r3, #2
  40f78a:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
  40f78e:	2600      	movs	r6, #0
  40f790:	4631      	mov	r1, r6
  40f792:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40f796:	428b      	cmp	r3, r1
  40f798:	d847      	bhi.n	40f82a <__udivdi3+0x126>
  40f79a:	fab3 f683 	clz	r6, r3
  40f79e:	2e00      	cmp	r6, #0
  40f7a0:	d148      	bne.n	40f834 <__udivdi3+0x130>
  40f7a2:	428b      	cmp	r3, r1
  40f7a4:	d302      	bcc.n	40f7ac <__udivdi3+0xa8>
  40f7a6:	4282      	cmp	r2, r0
  40f7a8:	f200 80cd 	bhi.w	40f946 <__udivdi3+0x242>
  40f7ac:	2001      	movs	r0, #1
  40f7ae:	4631      	mov	r1, r6
  40f7b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40f7b4:	b912      	cbnz	r2, 40f7bc <__udivdi3+0xb8>
  40f7b6:	2501      	movs	r5, #1
  40f7b8:	fbb5 f5f2 	udiv	r5, r5, r2
  40f7bc:	fab5 f885 	clz	r8, r5
  40f7c0:	f1b8 0f00 	cmp.w	r8, #0
  40f7c4:	d177      	bne.n	40f8b6 <__udivdi3+0x1b2>
  40f7c6:	1b4a      	subs	r2, r1, r5
  40f7c8:	ea4f 4e15 	mov.w	lr, r5, lsr #16
  40f7cc:	b2af      	uxth	r7, r5
  40f7ce:	2601      	movs	r6, #1
  40f7d0:	fbb2 f0fe 	udiv	r0, r2, lr
  40f7d4:	0c23      	lsrs	r3, r4, #16
  40f7d6:	fb0e 2110 	mls	r1, lr, r0, r2
  40f7da:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
  40f7de:	fb07 f300 	mul.w	r3, r7, r0
  40f7e2:	428b      	cmp	r3, r1
  40f7e4:	d907      	bls.n	40f7f6 <__udivdi3+0xf2>
  40f7e6:	1949      	adds	r1, r1, r5
  40f7e8:	f100 32ff 	add.w	r2, r0, #4294967295
  40f7ec:	d202      	bcs.n	40f7f4 <__udivdi3+0xf0>
  40f7ee:	428b      	cmp	r3, r1
  40f7f0:	f200 80ba 	bhi.w	40f968 <__udivdi3+0x264>
  40f7f4:	4610      	mov	r0, r2
  40f7f6:	1ac9      	subs	r1, r1, r3
  40f7f8:	b2a4      	uxth	r4, r4
  40f7fa:	fbb1 f3fe 	udiv	r3, r1, lr
  40f7fe:	fb0e 1113 	mls	r1, lr, r3, r1
  40f802:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
  40f806:	fb07 f703 	mul.w	r7, r7, r3
  40f80a:	42a7      	cmp	r7, r4
  40f80c:	d908      	bls.n	40f820 <__udivdi3+0x11c>
  40f80e:	1964      	adds	r4, r4, r5
  40f810:	f103 32ff 	add.w	r2, r3, #4294967295
  40f814:	f080 808f 	bcs.w	40f936 <__udivdi3+0x232>
  40f818:	42a7      	cmp	r7, r4
  40f81a:	f240 808c 	bls.w	40f936 <__udivdi3+0x232>
  40f81e:	3b02      	subs	r3, #2
  40f820:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
  40f824:	4631      	mov	r1, r6
  40f826:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40f82a:	2600      	movs	r6, #0
  40f82c:	4630      	mov	r0, r6
  40f82e:	4631      	mov	r1, r6
  40f830:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40f834:	f1c6 0420 	rsb	r4, r6, #32
  40f838:	fa22 f504 	lsr.w	r5, r2, r4
  40f83c:	40b3      	lsls	r3, r6
  40f83e:	432b      	orrs	r3, r5
  40f840:	fa20 fc04 	lsr.w	ip, r0, r4
  40f844:	fa01 f706 	lsl.w	r7, r1, r6
  40f848:	fa21 f504 	lsr.w	r5, r1, r4
  40f84c:	ea4f 4e13 	mov.w	lr, r3, lsr #16
  40f850:	ea4c 0707 	orr.w	r7, ip, r7
  40f854:	fbb5 f8fe 	udiv	r8, r5, lr
  40f858:	0c39      	lsrs	r1, r7, #16
  40f85a:	fb0e 5518 	mls	r5, lr, r8, r5
  40f85e:	fa1f fc83 	uxth.w	ip, r3
  40f862:	ea41 4505 	orr.w	r5, r1, r5, lsl #16
  40f866:	fb0c f108 	mul.w	r1, ip, r8
  40f86a:	42a9      	cmp	r1, r5
  40f86c:	fa02 f206 	lsl.w	r2, r2, r6
  40f870:	d904      	bls.n	40f87c <__udivdi3+0x178>
  40f872:	18ed      	adds	r5, r5, r3
  40f874:	f108 34ff 	add.w	r4, r8, #4294967295
  40f878:	d367      	bcc.n	40f94a <__udivdi3+0x246>
  40f87a:	46a0      	mov	r8, r4
  40f87c:	1a6d      	subs	r5, r5, r1
  40f87e:	b2bf      	uxth	r7, r7
  40f880:	fbb5 f4fe 	udiv	r4, r5, lr
  40f884:	fb0e 5514 	mls	r5, lr, r4, r5
  40f888:	ea47 4105 	orr.w	r1, r7, r5, lsl #16
  40f88c:	fb0c fc04 	mul.w	ip, ip, r4
  40f890:	458c      	cmp	ip, r1
  40f892:	d904      	bls.n	40f89e <__udivdi3+0x19a>
  40f894:	18c9      	adds	r1, r1, r3
  40f896:	f104 35ff 	add.w	r5, r4, #4294967295
  40f89a:	d35c      	bcc.n	40f956 <__udivdi3+0x252>
  40f89c:	462c      	mov	r4, r5
  40f89e:	ea44 4408 	orr.w	r4, r4, r8, lsl #16
  40f8a2:	ebcc 0101 	rsb	r1, ip, r1
  40f8a6:	fba4 2302 	umull	r2, r3, r4, r2
  40f8aa:	4299      	cmp	r1, r3
  40f8ac:	d348      	bcc.n	40f940 <__udivdi3+0x23c>
  40f8ae:	d044      	beq.n	40f93a <__udivdi3+0x236>
  40f8b0:	4620      	mov	r0, r4
  40f8b2:	2600      	movs	r6, #0
  40f8b4:	e76c      	b.n	40f790 <__udivdi3+0x8c>
  40f8b6:	f1c8 0420 	rsb	r4, r8, #32
  40f8ba:	fa01 f308 	lsl.w	r3, r1, r8
  40f8be:	fa05 f508 	lsl.w	r5, r5, r8
  40f8c2:	fa20 f704 	lsr.w	r7, r0, r4
  40f8c6:	40e1      	lsrs	r1, r4
  40f8c8:	ea4f 4e15 	mov.w	lr, r5, lsr #16
  40f8cc:	431f      	orrs	r7, r3
  40f8ce:	fbb1 f6fe 	udiv	r6, r1, lr
  40f8d2:	0c3a      	lsrs	r2, r7, #16
  40f8d4:	fb0e 1116 	mls	r1, lr, r6, r1
  40f8d8:	fa1f fc85 	uxth.w	ip, r5
  40f8dc:	ea42 4301 	orr.w	r3, r2, r1, lsl #16
  40f8e0:	fb0c f206 	mul.w	r2, ip, r6
  40f8e4:	429a      	cmp	r2, r3
  40f8e6:	fa00 f408 	lsl.w	r4, r0, r8
  40f8ea:	d907      	bls.n	40f8fc <__udivdi3+0x1f8>
  40f8ec:	195b      	adds	r3, r3, r5
  40f8ee:	f106 31ff 	add.w	r1, r6, #4294967295
  40f8f2:	d237      	bcs.n	40f964 <__udivdi3+0x260>
  40f8f4:	429a      	cmp	r2, r3
  40f8f6:	d935      	bls.n	40f964 <__udivdi3+0x260>
  40f8f8:	3e02      	subs	r6, #2
  40f8fa:	442b      	add	r3, r5
  40f8fc:	1a9b      	subs	r3, r3, r2
  40f8fe:	b2bf      	uxth	r7, r7
  40f900:	fbb3 f0fe 	udiv	r0, r3, lr
  40f904:	fb0e 3310 	mls	r3, lr, r0, r3
  40f908:	ea47 4303 	orr.w	r3, r7, r3, lsl #16
  40f90c:	fb0c f100 	mul.w	r1, ip, r0
  40f910:	4299      	cmp	r1, r3
  40f912:	d907      	bls.n	40f924 <__udivdi3+0x220>
  40f914:	195b      	adds	r3, r3, r5
  40f916:	f100 32ff 	add.w	r2, r0, #4294967295
  40f91a:	d221      	bcs.n	40f960 <__udivdi3+0x25c>
  40f91c:	4299      	cmp	r1, r3
  40f91e:	d91f      	bls.n	40f960 <__udivdi3+0x25c>
  40f920:	3802      	subs	r0, #2
  40f922:	442b      	add	r3, r5
  40f924:	1a5a      	subs	r2, r3, r1
  40f926:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
  40f92a:	4667      	mov	r7, ip
  40f92c:	e750      	b.n	40f7d0 <__udivdi3+0xcc>
  40f92e:	4610      	mov	r0, r2
  40f930:	e716      	b.n	40f760 <__udivdi3+0x5c>
  40f932:	460b      	mov	r3, r1
  40f934:	e729      	b.n	40f78a <__udivdi3+0x86>
  40f936:	4613      	mov	r3, r2
  40f938:	e772      	b.n	40f820 <__udivdi3+0x11c>
  40f93a:	40b0      	lsls	r0, r6
  40f93c:	4290      	cmp	r0, r2
  40f93e:	d2b7      	bcs.n	40f8b0 <__udivdi3+0x1ac>
  40f940:	1e60      	subs	r0, r4, #1
  40f942:	2600      	movs	r6, #0
  40f944:	e724      	b.n	40f790 <__udivdi3+0x8c>
  40f946:	4630      	mov	r0, r6
  40f948:	e722      	b.n	40f790 <__udivdi3+0x8c>
  40f94a:	42a9      	cmp	r1, r5
  40f94c:	d995      	bls.n	40f87a <__udivdi3+0x176>
  40f94e:	f1a8 0802 	sub.w	r8, r8, #2
  40f952:	441d      	add	r5, r3
  40f954:	e792      	b.n	40f87c <__udivdi3+0x178>
  40f956:	458c      	cmp	ip, r1
  40f958:	d9a0      	bls.n	40f89c <__udivdi3+0x198>
  40f95a:	3c02      	subs	r4, #2
  40f95c:	4419      	add	r1, r3
  40f95e:	e79e      	b.n	40f89e <__udivdi3+0x19a>
  40f960:	4610      	mov	r0, r2
  40f962:	e7df      	b.n	40f924 <__udivdi3+0x220>
  40f964:	460e      	mov	r6, r1
  40f966:	e7c9      	b.n	40f8fc <__udivdi3+0x1f8>
  40f968:	3802      	subs	r0, #2
  40f96a:	4429      	add	r1, r5
  40f96c:	e743      	b.n	40f7f6 <__udivdi3+0xf2>
  40f96e:	bf00      	nop

0040f970 <OV7740_VGA_YUV422_20FPS>:
  40f970:	000e 8012 05fe 0013 0211 0012 10d5 d40c     ................
  40f980:	340d 0116 2517 a018 0319 f01a 891b 0322     .4...%........".
  40f990:	1829 f82b 012c a031 f032 c433 b43a 3f36     ).+.,.1.2.3.:.6?
  40f9a0:	6004 8027 0f3d 803e 403f 7f40 6a41 2942     .`'.=.>.?@@.AjB)
  40f9b0:	e544 4145 0247 6449 a14a 704b 1a4c 504d     D.EAG.IdJ.KpL.MP
  40f9c0:	134e 0064 8867 1a68 3814 3c24 3025 7226     N.d.g.h..8$<%0&r
  40f9d0:	9750 7e51 0052 0053 0020 2321 1438 00e9     P.Q~R.S. .!#8...
  40f9e0:	5556 ff57 ff58 ff59 045f 00ec ff13 7f80     VUW.X.Y._.......
  40f9f0:	3f81 3282 0183 1138 0085 0386 0187 0588     .?.2..8.........
  40fa00:	3089 308d 858f 3093 8595 3099 859b 089c     .0.0...0...0....
  40fa10:	129d 239e 459f 55a0 64a1 72a2 7fa3 8ba4     ...#.E.U.d.r....
  40fa20:	95a5 a7a6 b5a7 cba8 dda9 ecaa 1aab 78ce     ...............x
  40fa30:	6ecf 0ad0 0cd1 84d2 90d3 1ed4 245a 1f5b     .n..........Z$[.
  40fa40:	885c 605d 6eac ffbe 00bf a031 f032 3f82     \.]`.n....1.2..?
  40fa50:	0012 3f36 0053 c433 891b 0322 0228 ffff     ..6?S.3...".(...

0040fa60 <OV7740_QQVGA_RGB888>:
  40fa60:	000e 8012 0013 0111 0012 10d5 120c 340d     ...............4
  40fa70:	2517 a018 0319 f01a 891b 0322 1829 f82b     .%........".).+.
  40fa80:	012c a031 f032 c433 b43a 3f36 6004 8027     ,.1.2.3.:.6?.`'.
  40fa90:	0f3d 803e 403f 7f40 6a41 2942 e544 4145     =.>.?@@.AjB)D.EA
  40faa0:	0247 6449 a14a 704b 1a4c 504d 134e 0064     G.IdJ.KpL.MPN.d.
  40fab0:	8867 1a68 3814 3c24 3025 7226 9750 7e51     g.h..8$<%0&rP.Q~
  40fac0:	0052 0053 0020 2321 1438 00e9 5556 ff57     R.S. .!#8...VUW.
  40fad0:	ff58 ff59 045f 00ec ff13 7f80 3f81 3282     X.Y._........?.2
  40fae0:	0183 1138 7084 0085 0386 0187 0588 3089     ..8..p.........0
  40faf0:	308d 858f 3093 8595 3099 859b 089c 129d     .0...0...0......
  40fb00:	239e 459f 55a0 64a1 72a2 7fa3 8ba4 95a5     .#.E.U.d.r......
  40fb10:	a7a6 b5a7 cba8 dda9 ecaa 1aab 78ce 6ecf     .............x.n
  40fb20:	0ad0 0cd1 84d2 90d3 1ed4 245a 1f5b 885c     ..........Z$[.\.
  40fb30:	605d 6eac ffbe 00bf 2831 3c32 3f82 0112     ]`.n....1(2<.?..
  40fb40:	2f36 0483 0053 f433 8a1b 0322 0084 0084     6/..S.3...".....
  40fb50:	0228 ffff                                   (...

0040fb54 <OV7740_QVGA_YUV422_15FPS>:
  40fb54:	000e 8012 05fe 0013 0311 0012 10d5 d40c     ................
  40fb64:	340d 0116 2517 a018 0319 f01a 891b 0322     .4...%........".
  40fb74:	1829 f82b 012c a031 f032 c433 b43a 3f36     ).+.,.1.2.3.:.6?
  40fb84:	6004 8027 0f3d 803e 403f 7f40 6a41 2942     .`'.=.>.?@@.AjB)
  40fb94:	e544 4145 0247 6449 a14a 704b 1a4c 504d     D.EAG.IdJ.KpL.MP
  40fba4:	134e 0064 8867 1a68 3814 3c24 3025 7226     N.d.g.h..8$<%0&r
  40fbb4:	9750 7e51 0052 0053 0020 2321 1438 00e9     P.Q~R.S. .!#8...
  40fbc4:	5556 ff57 ff58 ff59 045f 00ec ff13 7f80     VUW.X.Y._.......
  40fbd4:	3f81 3282 0183 1138 0085 0386 0187 0588     .?.2..8.........
  40fbe4:	3089 308d 858f 3093 8595 3099 859b 089c     .0.0...0...0....
  40fbf4:	129d 239e 459f 55a0 64a1 72a2 7fa3 8ba4     ...#.E.U.d.r....
  40fc04:	95a5 a7a6 b5a7 cba8 dda9 ecaa 1aab 78ce     ...............x
  40fc14:	6ecf 0ad0 0cd1 84d2 90d3 1ed4 245a 1f5b     .n..........Z$[.
  40fc24:	885c 605d 6eac ffbe 00bf 5031 7832 3f82     \.]`.n....1P2x.?
  40fc34:	0012 3f36 0053 c433 891b 0322 0228 ffff     ..6?S.3...".(...

0040fc44 <OV7740_QVGA_RGB888>:
  40fc44:	000e 8012 0013 0111 0012 10d5 120c 340d     ...............4
  40fc54:	2517 a018 0319 f01a 891b 0322 1829 f82b     .%........".).+.
  40fc64:	012c a031 f032 c433 b43a 3f36 6004 8027     ,.1.2.3.:.6?.`'.
  40fc74:	0f3d 803e 403f 7f40 6a41 2942 e544 4145     =.>.?@@.AjB)D.EA
  40fc84:	0247 6449 a14a 704b 1a4c 504d 134e 0064     G.IdJ.KpL.MPN.d.
  40fc94:	8867 1a68 3814 3c24 3025 7226 9750 7e51     g.h..8$<%0&rP.Q~
  40fca4:	0052 0053 0020 2321 1438 00e9 5556 ff57     R.S. .!#8...VUW.
  40fcb4:	ff58 ff59 045f 00ec ff13 7f80 3f81 3282     X.Y._........?.2
  40fcc4:	0183 1138 7084 0085 0386 0187 0588 3089     ..8..p.........0
  40fcd4:	308d 858f 3093 8595 3099 859b 089c 129d     .0...0...0......
  40fce4:	239e 459f 55a0 64a1 72a2 7fa3 8ba4 95a5     .#.E.U.d.r......
  40fcf4:	a7a6 b5a7 cba8 dda9 ecaa 1aab 78ce 6ecf     .............x.n
  40fd04:	0ad0 0cd1 84d2 90d3 1ed4 245a 1f5b 885c     ..........Z$[.\.
  40fd14:	605d 6eac ffbe 00bf 5031 7832 3f82 0112     ]`.n....1P2x.?..
  40fd24:	2f36 0483 0053 f433 8a1b 0322 0084 0084     6/..S.3...".....
  40fd34:	0228 ffff                                   (...

0040fd38 <OV7740_TEST_PATTERN>:
  40fd38:	000e 8012 05fe 0013 0211 0012 10d5 d40c     ................
  40fd48:	340d 0116 2517 a018 0319 f01a 891b 0322     .4...%........".
  40fd58:	1829 f82b 012c a031 f032 c433 b43a 3f36     ).+.,.1.2.3.:.6?
  40fd68:	6004 8027 0f3d 803e 403f 7f40 6a41 2942     .`'.=.>.?@@.AjB)
  40fd78:	e544 4145 0247 6449 a14a 704b 1a4c 504d     D.EAG.IdJ.KpL.MP
  40fd88:	134e 0064 8867 1a68 3814 3c24 3025 7226     N.d.g.h..8$<%0&r
  40fd98:	9750 7e51 0052 0053 0020 2321 0738 0284     P.Q~R.S. .!#8...
  40fda8:	1438 00e9 5556 ff57 ff58 ff59 045f 00ec     8...VUW.X.Y._...
  40fdb8:	ff13 7f80 3f81 3282 0183 1138 0085 0386     .....?.2..8.....
  40fdc8:	0187 0588 3089 308d 858f 3093 8595 3099     .....0.0...0...0
  40fdd8:	859b 089c 129d 239e 459f 55a0 64a1 72a2     .......#.E.U.d.r
  40fde8:	7fa3 8ba4 95a5 a7a6 b5a7 cba8 dda9 ecaa     ................
  40fdf8:	1aab 78ce 6ecf 0ad0 0cd1 84d2 90d3 1ed4     ...x.n..........
  40fe08:	245a 1f5b 885c 605d 6eac ffbe 00bf 5031     Z$[.\.]`.n....1P
  40fe18:	7832 3f82 0012 3f36 0053 c433 891b 0322     2x.?..6?S.3...".
  40fe28:	0228 ffff                                   (...

0040fe2c <OV7740_QVGA_YUV422_20FPS>:
  40fe2c:	000e 8012 05fe 0013 0211 0012 10d5 d40c     ................
  40fe3c:	340d 0116 2517 a018 0319 f01a 891b 0322     .4...%........".
  40fe4c:	1829 f82b 012c a031 f032 c433 b43a 3f36     ).+.,.1.2.3.:.6?
  40fe5c:	6004 8027 0f3d 803e 403f 7f40 6a41 2942     .`'.=.>.?@@.AjB)
  40fe6c:	e544 4145 0247 6449 a14a 704b 1a4c 504d     D.EAG.IdJ.KpL.MP
  40fe7c:	134e 0064 8867 1a68 3814 3c24 3025 7226     N.d.g.h..8$<%0&r
  40fe8c:	9750 7e51 0052 0053 0020 2321 1438 00e9     P.Q~R.S. .!#8...
  40fe9c:	5556 ff57 ff58 ff59 045f 00ec ff13 7f80     VUW.X.Y._.......
  40feac:	3f81 3282 0183 1138 0085 0386 0187 0588     .?.2..8.........
  40febc:	3089 308d 858f 3093 8595 3099 859b 089c     .0.0...0...0....
  40fecc:	129d 239e 459f 55a0 64a1 72a2 7fa3 8ba4     ...#.E.U.d.r....
  40fedc:	95a5 a7a6 b5a7 cba8 dda9 ecaa 1aab 78ce     ...............x
  40feec:	6ecf 0ad0 0cd1 84d2 90d3 1ed4 245a 1f5b     .n..........Z$[.
  40fefc:	885c 605d 6eac ffbe 00bf 5031 7832 3f82     \.]`.n....1P2x.?
  40ff0c:	0012 3f36 0053 c433 891b 0322 0228 ffff     ..6?S.3...".(...

0040ff1c <OV7740_QVGA_YUV422_10FPS>:
  40ff1c:	000e 8012 05fe 0013 0511 0012 10d5 d40c     ................
  40ff2c:	340d 0116 2517 a018 0319 f01a 891b 0322     .4...%........".
  40ff3c:	1829 f82b 012c a031 f032 c433 b43a 3f36     ).+.,.1.2.3.:.6?
  40ff4c:	6004 8027 0f3d 803e 403f 7f40 6a41 2942     .`'.=.>.?@@.AjB)
  40ff5c:	e544 4145 0247 6449 a14a 704b 1a4c 504d     D.EAG.IdJ.KpL.MP
  40ff6c:	134e 0064 8867 1a68 3814 3c24 3025 7226     N.d.g.h..8$<%0&r
  40ff7c:	9750 7e51 0052 0053 0020 2321 1438 00e9     P.Q~R.S. .!#8...
  40ff8c:	5556 ff57 ff58 ff59 045f 00ec ff13 7f80     VUW.X.Y._.......
  40ff9c:	3f81 3282 0183 1138 0085 0386 0187 0588     .?.2..8.........
  40ffac:	3089 308d 858f 3093 8595 3099 859b 089c     .0.0...0...0....
  40ffbc:	129d 239e 459f 55a0 64a1 72a2 7fa3 8ba4     ...#.E.U.d.r....
  40ffcc:	95a5 a7a6 b5a7 cba8 dda9 ecaa 1aab 78ce     ...............x
  40ffdc:	6ecf 0ad0 0cd1 84d2 90d3 1ed4 245a 1f5b     .n..........Z$[.
  40ffec:	885c 605d 6eac ffbe 00bf 5031 7832 3f82     \.]`.n....1P2x.?
  40fffc:	0012 3f36 0053 c433 891b 0322 0228 ffff     ..6?S.3...".(...

0041000c <OV7740_QQVGA_YUV422>:
  41000c:	000e 8012 0013 0111 0012 10d5 540c 340d     .............T.4
  41001c:	0116 2517 a018 0319 f01a 891b 0322 1829     ...%........".).
  41002c:	f82b 012c a031 f032 c433 b43a 3f36 6004     +.,.1.2.3.:.6?.`
  41003c:	8027 0f3d 803e 403f 7f40 6a41 2942 e544     '.=.>.?@@.AjB)D.
  41004c:	4145 0247 6449 a14a 704b 1a4c 504d 134e     EAG.IdJ.KpL.MPN.
  41005c:	0064 8867 1a68 3814 3c24 3025 7226 9750     d.g.h..8$<%0&rP.
  41006c:	7e51 0052 0053 0020 2321 1438 00e9 5556     Q~R.S. .!#8...VU
  41007c:	ff57 ff58 ff59 045f 00ec ff13 7f80 3f81     W.X.Y._........?
  41008c:	3282 0183 1138 7084 0085 0386 0187 0588     .2..8..p........
  41009c:	3089 308d 858f 3093 8595 3099 859b 089c     .0.0...0...0....
  4100ac:	129d 239e 459f 55a0 64a1 72a2 7fa3 8ba4     ...#.E.U.d.r....
  4100bc:	95a5 a7a6 b5a7 cba8 dda9 ecaa 1aab 78ce     ...............x
  4100cc:	6ecf 0ad0 0cd1 84d2 90d3 1ed4 245a 1f5b     .n..........Z$[.
  4100dc:	885c 605d 6eac ffbe 00bf 2831 3c32 0034     \.]`.n....1(2<4.
  4100ec:	3f82 0012 3f36 0053 0033 891b 0322 0228     .?..6?S.3...".(.
  4100fc:	00d9 ffff                                   ....

00410100 <OV7740_QVGA_YUV422_30FPS>:
  410100:	000e 8012 05fe 0013 0111 0012 10d5 d40c     ................
  410110:	340d 0116 2517 a018 0319 f01a 891b 0322     .4...%........".
  410120:	1829 f82b 012c a031 f032 c433 b43a 3f36     ).+.,.1.2.3.:.6?
  410130:	6004 8027 0f3d 803e 403f 7f40 6a41 2942     .`'.=.>.?@@.AjB)
  410140:	e544 4145 0247 6449 a14a 704b 1a4c 504d     D.EAG.IdJ.KpL.MP
  410150:	134e 0064 8867 1a68 3814 3c24 3025 7226     N.d.g.h..8$<%0&r
  410160:	9750 7e51 0052 0053 0020 2321 1438 00e9     P.Q~R.S. .!#8...
  410170:	5556 ff57 ff58 ff59 045f 00ec ff13 7f80     VUW.X.Y._.......
  410180:	3f81 3282 0183 1138 0085 0386 0187 0588     .?.2..8.........
  410190:	3089 308d 858f 3093 8595 3099 859b 089c     .0.0...0...0....
  4101a0:	129d 239e 459f 55a0 64a1 72a2 7fa3 8ba4     ...#.E.U.d.r....
  4101b0:	95a5 a7a6 b5a7 cba8 dda9 ecaa 1aab 78ce     ...............x
  4101c0:	6ecf 0ad0 0cd1 84d2 90d3 1ed4 245a 1f5b     .n..........Z$[.
  4101d0:	885c 605d 6eac ffbe 00bf 5031 7832 3f82     \.]`.n....1P2x.?
  4101e0:	0012 3f36 0053 c433 891b 0322 0228 ffff     ..6?S.3...".(...

004101f0 <p_uc_charset10x14>:
	...
  41020c:	ccff ccff 0000 0000 0000 0000 0000 0000     ................
  41021c:	00f0 00f0 0000 0000 00f0 00f0 0000 0000     ................
  41022c:	c00c c00c fcff fcff c00c c00c fcff fcff     ................
  41023c:	c00c c00c 600c 701e 303f 3033 fcff fcff     .....`.p?030....
  41024c:	3033 f033 e039 c018 0060 0cf0 3cf0 f060     303.9...`....<`.
  41025c:	c003 000f 183c 3cf0 3cc0 1800 f03c f87f     ....<..<.<..<...
  41026c:	1cc3 8cc7 cccf ecdc 7878 3030 fc00 cc00     ........xx00....
  41027c:	0000 0000 0000 0044 00ec 00f8 0070 0000     ......D.....p...
	...
  410294:	c00f f03f 7878 1860 0cc0 0cc0 0000 0000     ..?.xx`.........
  4102a4:	0000 0000 0cc0 0cc0 1860 7878 f03f c00f     ........`.xx?...
  4102b4:	0000 0000 600c e00e c007 8003 f83f f83f     .....`......?.?.
  4102c4:	8003 c007 e00e 600c 0003 0003 0003 0003     .......`........
  4102d4:	f03f f03f 0003 0003 0003 0003 4400 ec00     ?.?..........D..
  4102e4:	f800 7000 0000 0000 0000 0000 0000 0000     ...p............
  4102f4:	0003 0003 0003 0003 0003 0003 0003 0003     ................
  410304:	0003 0003 1800 3c00 3c00 1800 0000 0000     .......<.<......
	...
  41031c:	0000 0c00 3c00 f000 c003 000f 003c 00f0     .....<......<...
  41032c:	00c0 0000 f03f f87f fce0 ccc1 8cc3 0cc7     ....?...........
  41033c:	0cce 1cfc f87f f03f 0000 0000 0c30 0c70     ......?.....0.p.
  41034c:	fcff fcff 0c00 0c00 0000 0000 0c30 1c70     ............0.p.
  41035c:	3ce0 7cc0 ecc0 ccc1 8cc3 0ce7 0c7e 0c3c     .<.|........~.<.
  41036c:	3030 3870 1ce0 0cc0 0cc0 0cc3 0cc3 1ce3     00p8............
  41037c:	f87f f03c c003 c007 c00e c01c c038 c070     ..<.........8.p.
  41038c:	fcff fcff c000 c000 30fc 38fc 1ccc 0ccc     .........0.8....
  41039c:	0ccc 0ccc 0ccc 1cce f8c7 f0c3 f03f f87f     ............?...
  4103ac:	1ce3 0cc3 0cc3 0cc3 0cc3 9ce3 f871 f030     ............q.0.
  4103bc:	00c0 00c0 00c0 00c0 fcc3 fcc7 00ce 00dc     ................
  4103cc:	00f8 00f0 f03c f87f 9ce7 0cc3 0cc3 0cc3     ....<...........
  4103dc:	0cc3 9ce7 f87f f03c 003c 007e 0ce7 0cc3     ......<.<.~.....
  4103ec:	1cc3 38c3 70c3 e0e7 c07f 803f 0000 0000     ...8.p....?.....
  4103fc:	0000 6018 f03c f03c 6018 0000 0000 0000     ...`<.<..`......
  41040c:	0000 0000 0000 4418 ec3c f83c 7018 0000     .......D<.<..p..
  41041c:	0000 0000 0000 0003 8007 c00f e01c 7038     ..............8p
  41042c:	3870 1ce0 0cc0 0000 c00c c00c c00c c00c     p8..............
  41043c:	c00c c00c c00c c00c c00c c00c 0000 0cc0     ................
  41044c:	1ce0 3870 7038 e01c c00f 8007 0003 0000     ..p88p..........
  41045c:	0030 0070 00e0 00c0 ecc1 ecc3 00c3 00e6     0.p.............
  41046c:	007e 003c f030 f871 9ce3 0cc3 fcc3 fcc3     ~.<.0.q.........
  41047c:	0cc0 1ce0 f87f f03f fc3f fc7f c0e0 c0c0     ......?.?.......
  41048c:	c0c0 c0c0 c0c0 c0e0 fc7f fc3f fcff fcff     ..........?.....
  41049c:	0cc3 0cc3 0cc3 0cc3 0cc3 9ce7 f87f f03c     ..............<.
  4104ac:	f03f f87f 1ce0 0cc0 0cc0 0cc0 0cc0 1ce0     ?...............
  4104bc:	3870 3030 fcff fcff 0cc0 0cc0 0cc0 0cc0     p800............
  4104cc:	0cc0 1ce0 f87f f03f fcff fcff 0cc3 0cc3     ......?.........
  4104dc:	0cc3 0cc3 0cc3 0cc3 0cc0 0cc0 fcff fcff     ................
  4104ec:	00c3 00c3 00c3 00c3 00c3 00c3 00c0 00c0     ................
  4104fc:	f03f f87f 1ce0 0cc0 0cc0 0cc3 0cc3 1ce3     ?...............
  41050c:	f873 f033 fcff fcff 0003 0003 0003 0003     s.3.............
  41051c:	0003 0003 fcff fcff 0000 0000 0cc0 0cc0     ................
  41052c:	fcff fcff 0cc0 0cc0 0000 0000 3000 3800     .............0.8
  41053c:	1cc0 0cc0 0cc0 1cc0 f8ff f0ff 00c0 00c0     ................
  41054c:	fcff fcff 8007 8007 c00f e01c 7038 3870     ............8pp8
  41055c:	1ce0 0cc0 fcff fcff 0c00 0c00 0c00 0c00     ................
  41056c:	0c00 0c00 0c00 0c00 fcff fcff 0070 0038     ............p.8.
  41057c:	001f 001f 0038 0070 fcff fcff fcff fcff     ....8.p.........
  41058c:	001c 000e 0007 8003 c001 e000 fcff fcff     ................
  41059c:	f03f f87f 1ce0 0cc0 0cc0 0cc0 0cc0 1ce0     ?...............
  4105ac:	f87f f03f fcff fcff 00c3 00c3 00c3 00c3     ..?.............
  4105bc:	00c3 00e7 007e 003c f03f f87f 1ce0 0cc0     ....~.<.?.......
  4105cc:	ccc0 ecc0 7cc0 38e0 fc7f ec3f fcff fcff     .....|.8..?.....
  4105dc:	00c3 80c3 80c3 c0c3 c0c3 70e7 3c7e 1c3c     ...........p~<<.
  4105ec:	183c 1c7e 0ce7 0cc3 0cc3 0cc3 0cc3 9cc3     <.~.............
  4105fc:	f8e1 f060 00c0 00c0 00c0 00c0 fcff fcff     ..`.............
  41060c:	00c0 00c0 00c0 00c0 f0ff f8ff 1c00 0c00     ................
  41061c:	0c00 0c00 0c00 1c00 f8ff f0ff c0ff e0ff     ................
  41062c:	7000 3800 1c00 1c00 3800 7000 e0ff c0ff     .p.8.....8.p....
  41063c:	f0ff f8ff 1c00 3c00 f800 f800 3c00 1c00     .......<.....<..
  41064c:	f8ff f0ff 3cf0 7cf8 e01c c00f 8007 8007     .....<.|........
  41065c:	c00f e01c 7cf8 3cf0 00fc 00fe 0007 8003     .....|.<........
  41066c:	fc01 fc01 8003 0007 00fe 00fc 3cc0 7cc0     .............<.|
  41067c:	ecc0 ccc1 8cc3 0cc7 0cce 0cdc 0cf8 0cf0     ................
  41068c:	0000 0000 fcff fcff 0cc0 0cc0 0cc0 0000     ................
  41069c:	0000 0000 0030 0030 000c 000c 0003 0003     ....0.0.........
  4106ac:	c000 c000 3000 3000 0000 0000 0cc0 0cc0     .....0.0........
  4106bc:	0cc0 fcff fcff 0000 0000 0000 000c 001c     ................
  4106cc:	0038 0070 00e0 00e0 0070 0038 001c 000c     8.p.....p.8.....
  4106dc:	0c00 0c00 0c00 0c00 0c00 0c00 0c00 0c00     ................
  4106ec:	0c00 0c00 0000 0000 00c0 00e0 0070 0038     ............p.8.
  4106fc:	0018 0000 0000 0000 3000 7806 fc0e cc0c     .........0.x....
  41070c:	cc0c cc0c cc0c cc0e fc07 f803 fcff fcff     ................
  41071c:	0c03 0c03 0c03 0c03 0c03 9c03 f801 f000     ................
  41072c:	f003 f807 1c0e 0c0c 0c0c 0c0c 0c0c 1c0e     ................
  41073c:	3807 3003 f000 f801 9c03 0c03 0c03 0c03     .8.0............
  41074c:	0c03 0c03 fcff fcff f003 f807 dc0e cc0c     ................
  41075c:	cc0c cc0c cc0c dc0e d807 9003 0000 0003     ................
  41076c:	fc3f fc7f 00e3 00e3 0070 0030 0000 0000     ?.......p.0.....
  41077c:	1803 9c07 cc0f cc0c cc0c cc0c cc0c dc0c     ................
  41078c:	f80f f007 fcff fcff 0003 0003 0003 0003     ................
  41079c:	8003 fc01 fc00 0000 0000 0000 0000 0000     ................
  4107ac:	fc1b fc1b 0000 0000 0000 0000 0000 3000     ...............0
  4107bc:	3800 1c00 0c00 0c00 1c00 f8cf f0cf 0000     .8..............
  4107cc:	0000 fcff fcff e000 e001 f003 3807 1c0e     .............8..
  4107dc:	0c0c 0000 0000 0000 0cc0 0cc0 fcff fcff     ................
  4107ec:	0c00 0c00 0000 0000 fc0f fc0f 000e 0007     ................
  4107fc:	c003 c003 0007 000e fc0f fc0f fc0f fc0f     ................
  41080c:	0003 0007 000e 000c 000c 000e fc07 fc03     ................
  41081c:	f003 f807 1c0e 0c0c 0c0c 0c0c 0c0c 1c0e     ................
  41082c:	f807 f003 fc0f fc0f c00c c00c c00c c00c     ................
  41083c:	c00c c00f 8007 0003 0003 8007 c00f c00c     ................
  41084c:	c00c c00c c00c c00c fc0f fc0f fc0f fc0f     ................
  41085c:	8003 0007 000e 000c 000c 000e 0007 0003     ................
  41086c:	1803 9c07 cc0f cc0c cc0c cc0c cc0c fc0c     ................
  41087c:	780e 3006 0000 000c 000c f0ff f8ff 1c0c     .x.0............
  41088c:	1c0c 380c 300c 0000 f00f f80f 1c00 0c00     ...8.0..........
  41089c:	0c00 0c00 0c00 1c00 f80f f00f c00f e00f     ................
  4108ac:	7000 3800 1c00 1c00 3800 7000 e00f c00f     .p.8.....8.p....
  4108bc:	f00f f80f 1c00 1c00 f800 f800 1c00 1c00     ................
  4108cc:	f80f f00f 0c0c 1c0e 3807 f003 e001 e001     .........8......
  4108dc:	f003 3807 1c0e 0c0c 000c 000e 0c07 9c03     ...8............
  4108ec:	f801 f001 8003 0007 000e 000c 0c0c 1c0c     ................
  4108fc:	3c0c 7c0c ec0c cc0d 8c0f 0c0f 0c0e 0c0c     .<.|............
  41090c:	0000 0003 8007 f03f f87c 1ce0 0cc0 0cc0     ......?.|.......
  41091c:	0cc0 0000 0c03 0c03 fc3f fc7f 0ce3 0cc3     ........?.......
  41092c:	0cc0 0ce0 0c70 0c30 0000 0cc0 0cc0 0cc0     ....p.0.........
  41093c:	1ce0 f87c f03f 8007 0003 0000 00c0 00c0     ..|.?...........
  41094c:	00c0 00c0 00c0 00c0 00c0 00c0 00c0 00c0     ................
  41095c:	fcff fcff fcff fcff fcff fcff fcff fcff     ................
  41096c:	fcff fcff 7845 7469 6e69 2067 6977 6874     ....Exiting with
  41097c:	7320 6174 7574 2073 6425 0a2e 0000 0000      status %d......
  41098c:	4449 454c 0000 0000 6d54 2072 7653 0063     IDLE....Tmr Svc.

0041099c <__func__.6361>:
  41099c:	6176 696c 6164 6574 635f 6568 6b63 7573     validate_checksu
  4109ac:	006d 0000                                   m...

004109b0 <__func__.6378>:
  4109b0:	6f70 7473 7270 636f 7365 5f73 0063 0000     postprocess_c...

004109c0 <lo_offset>:
  4109c0:	f0ff 1fff f2ff ffff ffff 3fff f5f4 6fff     ...........?...o
  4109d0:	ffff ffff f1f0 2fff ffff ffff ffff 4f3f     ......./......?O
  4109e0:	0fff f2f1 3fff f4ff f6f5 89f7 abff fcff     .....?..........
  4109f0:	ffff 1f0f 4523 7ff6 ffff ffff fff8 aff9     ....#E..........
  410a00:	f1f0 2fff f3ff ffff 5f4f 8967 bffa cdff     .../....O_g.....
  410a10:	f1f0 3ff2 56f4 ffff ffff 8f7f ff9a dfbc     ...?.V..........
  410a20:	1f0f fff2 3fff ffff fff4 6ff5 ffff ffff     .....?.....o....
  410a30:	1f0f ff23 6f45 ffff fff7 9ff8 ffff ffff     ..#.Eo..........

00410a40 <__func__.6277>:
  410a40:	6572 656c 7361 5f65 6f6c 6b63 0000 0000     release_lock....

00410a50 <__func__.6397>:
  410a50:	6f70 7473 7270 636f 7365 0073 4157 4e52     postprocess.WARN
  410a60:	4e49 3a47 2520 3a73 6425 203a 7325 203a     ING: %s:%d: %s: 
  410a70:	7341 6573 7472 6f69 206e 2522 2273 6620     Assertion "%s" f
  410a80:	6961 656c 2e64 090a 6973 3d67 7825 6f20     ailed...sig=%x o
  410a90:	6666 6573 3d74 7825 6920 7864 253d 2078     ffset=%x idx=%x 
  410aa0:	6162 6573 253d 0a78 0000 0000 2e2e 732f     base=%x......./s
  410ab0:	6372 412f 4653 742f 6968 6472 6170 7472     rc/ASF/thirdpart
  410ac0:	2f79 627a 7261 632f 646f 3165 3832 632e     y/zbar/code128.c
  410ad0:	0000 0000 6162 6573 3c20 3820 0000 0000     ....base < 8....
  410ae0:	4157 4e52 4e49 3a47 2520 3a73 6425 203a     WARNING: %s:%d: 
  410af0:	7325 203a 7341 6573 7472 6f69 206e 2522     %s: Assertion "%
  410b00:	2273 6620 6961 656c 2e64 090a 6973 3d67     s" failed...sig=
  410b10:	7825 6f20 6666 6573 3d74 7825 6220 7361     %x offset=%x bas
  410b20:	3d65 7825 6920 7864 253d 0a78 0000 0000     e=%x idx=%x.....
  410b30:	6469 2078 3d3c 3020 3578 0030 4157 4e52     idx <= 0x50.WARN
  410b40:	4e49 3a47 2520 3a73 6425 203a 7325 203a     ING: %s:%d: %s: 
  410b50:	7341 6573 7472 6f69 206e 2522 2273 6620     Assertion "%s" f
  410b60:	6961 656c 2e64 090a 6f6c 6b63 253d 2064     ailed...lock=%d 
  410b70:	6572 3d71 6425 000a 2e2e 732f 6372 412f     req=%d..../src/A
  410b80:	4653 742f 6968 6472 6170 7472 2f79 627a     SF/thirdparty/zb
  410b90:	7261 692f 636e 756c 6564 642f 6365 646f     ar/include/decod
  410ba0:	7265 682e 0000 0000 6364 646f 2d65 6c3e     er.h....dcode->l
  410bb0:	636f 206b 3d3d 7220 7165 0000 4157 4e52     ock == req..WARN
  410bc0:	4e49 3a47 2520 3a73 6425 203a 7325 203a     ING: %s:%d: %s: 
  410bd0:	7341 6573 7472 6f69 206e 2522 2273 6620     Assertion "%s" f
  410be0:	6961 656c 2e64 090a 6c61 6f6c 3d63 7825     ailed...alloc=%x
  410bf0:	6920 7864 253d 2078 3d63 3025 7832 2520      idx=%x c=%02x %
  410c00:	0a73 0000 6364 646f 2d65 623e 6675 615f     s...dcode->buf_a
  410c10:	6c6c 636f 3e20 6420 6f63 6564 3231 2d38     lloc > dcode128-
  410c20:	633e 6168 6172 7463 7265 0000 4157 4e52     >character..WARN
  410c30:	4e49 3a47 2520 3a73 6425 203a 7325 203a     ING: %s:%d: %s: 
  410c40:	7341 6573 7472 6f69 206e 2522 2273 6620     Assertion "%s" f
  410c50:	6961 656c 2e64 090a 6964 3d72 7825 6920     ailed...dir=%x i
  410c60:	253d 2078 7573 3d6d 7825 6120 6363 253d     =%x sum=%x acc=%
  410c70:	2078 7325 000a 0000 7573 206d 203c 3031     x %s....sum < 10
  410c80:	0033 0000 6361 2063 203c 3031 0033 0000     3...acc < 103...
  410c90:	4157 4e52 4e49 3a47 2520 3a73 6425 203a     WARNING: %s:%d: 
  410ca0:	7325 203a 7341 6573 7472 6f69 206e 2522     %s: Assertion "%
  410cb0:	2273 6620 6961 656c 2e64 090a 6964 3d72     s" failed...dir=
  410cc0:	7825 2520 0a73 0000 6364 646f 2d65 623e     %x %s...dcode->b
  410cd0:	6675 645b 6f63 6564 3231 2d38 633e 6168     uf[dcode128->cha
  410ce0:	6172 7463 7265 2d20 3120 205d 3d3d 5320     racter - 1] == S
  410cf0:	4f54 5f50 4552 0056 6364 646f 2d65 623e     TOP_REV.dcode->b
  410d00:	6675 645b 6f63 6564 3231 2d38 633e 6168     uf[dcode128->cha
  410d10:	6172 7463 7265 2d20 3120 205d 3d3d 5320     racter - 1] == S
  410d20:	4f54 5f50 5746 0044 4157 4e52 4e49 3a47     TOP_FWD.WARNING:
  410d30:	2520 3a73 6425 203a 7325 203a 7341 6573      %s:%d: %s: Asse
  410d40:	7472 6f69 206e 2522 2273 6620 6961 656c     rtion "%s" faile
  410d50:	2e64 090a 7325 000a 6f63 6564 3e20 203d     d...%s..code >= 
  410d60:	5453 5241 5f54 2041 2626 6320 646f 2065     START_A && code 
  410d70:	3d3c 5320 4154 5452 435f 0000 4157 4e52     <= START_C..WARN
  410d80:	4e49 3a47 2520 3a73 6425 203a 7325 203a     ING: %s:%d: %s: 
  410d90:	7341 6573 7472 6f69 206e 2522 2273 6620     Assertion "%s" f
  410da0:	6961 656c 2e64 090a 3d69 7825 6a20 253d     ailed...i=%x j=%
  410db0:	2078 6f63 6564 253d 3230 2078 6863 7261     x code=%02x char
  410dc0:	6573 3d74 7825 6320 7865 3d70 7825 2520     set=%x cexp=%x %
  410dd0:	0a73 0000 2821 6f63 6564 2620 3020 3878     s...!(code & 0x8
  410de0:	2930 0000 6563 7078 0000 0000 4157 4e52     0)..cexp....WARN
  410df0:	4e49 3a47 2520 3a73 6425 203a 7325 203a     ING: %s:%d: %s: 
  410e00:	7341 6573 7472 6f69 206e 2522 2273 6620     Assertion "%s" f
  410e10:	6961 656c 2e64 090a 7473 7261 3d74 7825     ailed...start=%x
  410e20:	6520 646e 253d 2078 3d69 7825 6a20 253d      end=%x i=%x j=%
  410e30:	2078 7325 000a 0000 6364 646f 2d65 623e     x %s....dcode->b
  410e40:	6675 6a5b 205d 3d3c 2720 2739 0000 0000     uf[j] <= '9'....
  410e50:	6f63 6564 3c20 203d 0039 0000 6f63 6564     code <= 9...code
  410e60:	3e20 203d 4f43 4544 435f 2620 2026 6f63      >= CODE_C && co
  410e70:	6564 3c20 203d 4f43 4544 415f 0000 0000     de <= CODE_A....
  410e80:	4157 4e52 4e49 3a47 2520 3a73 6425 203a     WARNING: %s:%d: 
  410e90:	7325 203a 7341 6573 7472 6f69 206e 2522     %s: Assertion "%
  410ea0:	2273 6620 6961 656c 2e64 090a 3d6a 3025     s" failed...j=%0
  410eb0:	7832 2520 0a73 0000 206a 203c 6364 646f     2x %s...j < dcod
  410ec0:	2d65 623e 6675 615f 6c6c 636f 0000 0000     e->buf_alloc....

00410ed0 <__func__.6422>:
  410ed0:	7a5f 6162 5f72 6564 6f63 6564 635f 646f     _zbar_decode_cod
  410ee0:	3165 3832 0000 0000                         e128....

00410ee8 <lo_base>:
  410ee8:	0700 190c 3224 4740                         ....$2@G

00410ef0 <characters>:
  410ef0:	bf5c 2aa1 0cc5 2da4 0fe3 e45f e86b a769     \..*...-.._.k.i.
  410f00:	c1e7 1e51 d983 8400 c71f 330d b586 150e     ..Q........3....
  410f10:	1087 11da e536 3718 13cc 8939 1497 8a1b     ....6..7..9.....
  410f20:	bd3a 5ea2 8501 02b0 a5a3 162c bc88 a612     :..^......,.....
  410f30:	e661 6256 db19 a81a 1c32 cd8b a91d 20c3     a.Vb....2...... 
  410f40:	50c4 c05d c62b 532e 3160 c252 c834 5755     .P].+..S`1R.4.UW
  410f50:	ce3e c93b 546a 384f cb58 ca2f               >.;.jTO8X./.

00410f5c <__func__.6311>:
  410f5c:	6564 6f63 6564 6c5f 006f 0000               decode_lo...

00410f68 <code39_characters>:
  410f68:	3130 3332 3534 3736 3938 4241 4443 4645     0123456789ABCDEF
  410f78:	4847 4a49 4c4b 4e4d 504f 5251 5453 5655     GHIJKLMNOPQRSTUV
  410f88:	5857 5a59 2e2d 2420 2b2f 2a25               WXYZ-. $/+%*

00410f94 <__func__.6277>:
  410f94:	6572 656c 7361 5f65 6f6c 6b63 0000 0000     release_lock....

00410fa4 <__func__.6342>:
  410fa4:	6f63 6564 3933 705f 736f 7074 6f72 6563     code39_postproce
  410fb4:	7373 0000                                   ss..

00410fb8 <code39_hi>:
  410fb8:	4280 c886 8e4a 12d0 d593 ff97 1bd9 ffff     .B..J...........
  410fc8:	a05c 24e2 ffa5 ff27 2ae8 ffff ff2b ffff     \..$..'..*..+...
  410fd8:	4157 4e52 4e49 3a47 2520 3a73 6425 203a     WARNING: %s:%d: 
  410fe8:	7325 203a 7341 6573 7472 6f69 206e 2522     %s: Assertion "%
  410ff8:	2273 6620 6961 656c 2e64 090a 6520 636e     s" failed... enc
  411008:	253d 2078 3973 253d 0a78 0000 2e2e 732f     =%x s9=%x...../s
  411018:	6372 412f 4653 742f 6968 6472 6170 7472     rc/ASF/thirdpart
  411028:	2f79 627a 7261 632f 646f 3365 2e39 0063     y/zbar/code39.c.
  411038:	6e65 2063 203c 7830 3032 0000 4157 4e52     enc < 0x20..WARN
  411048:	4e49 3a47 2520 3a73 6425 203a 7325 203a     ING: %s:%d: %s: 
  411058:	7341 6573 7472 6f69 206e 2522 2273 6620     Assertion "%s" f
  411068:	6961 656c 2e64 090a 6920 7864 253d 2078     ailed... idx=%x 
  411078:	6e65 3d63 7825 7320 3d39 7825 000a 0000     enc=%x s9=%x....
  411088:	6469 2078 203c 7830 6332 0000 4157 4e52     idx < 0x2c..WARN
  411098:	4e49 3a47 2520 3a73 6425 203a 7325 203a     ING: %s:%d: %s: 
  4110a8:	7341 6573 7472 6f69 206e 2522 2273 6620     Assertion "%s" f
  4110b8:	6961 656c 2e64 090a 3d69 3025 7832 2520     ailed...i=%02x %
  4110c8:	0a73 0000 2069 203c 6364 646f 2d65 623e     s...i < dcode->b
  4110d8:	6675 615f 6c6c 636f 0000 0000 4157 4e52     uf_alloc....WARN
  4110e8:	4e49 3a47 2520 3a73 6425 203a 7325 203a     ING: %s:%d: %s: 
  4110f8:	7341 6573 7472 6f69 206e 2522 2273 6620     Assertion "%s" f
  411108:	6961 656c 2e64 090a 3d63 3025 7832 7320     ailed...c=%02x s
  411118:	3d39 7825 000a 0000 2063 203c 7830 6332     9=%x....c < 0x2c
  411128:	0000 0000                                   ....

0041112c <code39_encodings>:
  41112c:	1a07 0d20 0310 1713 1622 231d 0d19 1c05     .. ....."..#....
  41113c:	0613 0725 2a0c 272a 0431 340e 0f00 1543     ..%..**'1..4..C.
  41114c:	4625 261c 0b49 4c08 0912 1952 582b 000f     %F.&I..L..R.+X..
  41115c:	0261 6411 1209 0670 8513 1624 298a 9128     a..d..p...$..)(.
  41116c:	1821 2b94 a219 2928 27a8 c12a 1b1f 26c4     !..+..().'*....&
  41117c:	d01c 1d23 1403 061e 1f1b 0a09 0c01 0211     ..#.............
  41118c:	1812 1821 040e 0121 240a 0b08 0530 420d     ..!...!..$..0..B
  41119c:	2416 0c48 6007 1003 1e81 8414 1525 2290     .$H..`......%.."
  4111ac:	c017 1a20                                   .. .

004111b0 <__func__.6366>:
  4111b0:	7a5f 6162 5f72 6564 6f63 6564 635f 646f     _zbar_decode_cod
  4111c0:	3365 0039                                   e39.

004111c4 <__func__.6311>:
  4111c4:	6f63 6564 3933 645f 6365 646f 3965 0000     code39_decode9..

004111d4 <__func__.6347>:
  4111d4:	6572 656c 7361 5f65 6f6c 6b63 0000 0000     release_lock....
  4111e4:	0020 0000 7562 5b66 3025 7834 3d5d 0000      ...buf[%04x]=..
  4111f4:	7325 3025 7832 0000                         %s%02x..

004111fc <all.6450>:
  4111fc:	000d 0002 0005 0008 000c 0009 000a 000e     ................
  41120c:	0019 0022 0023 0026 0027 005d 0080 0040     ..".#.&.'.]...@.
  41121c:	0039 0000                                   9...

00411220 <__func__.6186>:
  411220:	6564 6f63 6564 0034                         decode4.

00411228 <parity_decode>:
  411228:	fff0 0fff 1fff f32f 4fff f87f f95f fff6     ....../..O.._...
  411238:	6fff f59f f78f fff4 f23f fff1 ffff 0fff     .o......?.......

00411248 <digits>:
  411248:	1006 1304 0819 0511 1209 1507 0016 0314     ................
  411258:	0118 1702 4157 4e52 4e49 3a47 2520 3a73     ....WARNING: %s:
  411268:	6425 203a 7325 203a 7341 6573 7472 6f69     %d: %s: Assertio
  411278:	206e 2522 2273 6620 6961 656c 2e64 090a     n "%s" failed...
  411288:	6f63 6564 253d 3230 2078 3165 253d 2078     code=%02x e1=%x 
  411298:	3265 253d 2078 3473 253d 2078 6f63 6f6c     e2=%x s4=%x colo
  4112a8:	3d72 7825 000a 0000 2e2e 732f 6372 412f     r=%x....../src/A
  4112b8:	4653 742f 6968 6472 6170 7472 2f79 627a     SF/thirdparty/zb
  4112c8:	7261 652f 6e61 632e 0000 0000 6f63 6564     ar/ean.c....code
  4112d8:	3c20 3020 3178 0034 4157 4e52 4e49 3a47      < 0x14.WARNING:
  4112e8:	2520 3a73 6425 203a 7325 203a 7341 6573      %s:%d: %s: Asse
  4112f8:	7472 6f69 206e 2522 2273 6620 6961 656c     rtion "%s" faile
  411308:	2e64 090a 3d69 7825 6420 253d 2078 6863     d...i=%x d=%x ch
  411318:	3d6b 7825 2520 0a73 0000 0000 2064 203c     k=%x %s.....d < 
  411328:	3031 0000 4157 4e52 4e49 3a47 2520 3a73     10..WARNING: %s:
  411338:	6425 203a 7325 203a 7341 6573 7472 6f69     %d: %s: Assertio
  411348:	206e 2522 2273 6620 6961 656c 2e64 090a     n "%s" failed...
  411358:	6863 3d6b 7825 6e20 253d 2078 7325 0000     chk=%x n=%x %s..
  411368:	6863 206b 203c 3031 0000 0000 4157 4e52     chk < 10....WARN
  411378:	4e49 3a47 2520 3a73 6425 203a 7325 203a     ING: %s:%d: %s: 
  411388:	7341 6573 7472 6f69 206e 2522 2273 6620     Assertion "%s" f
  411398:	6961 656c 2e64 090a 3d6e 7825 6420 253d     ailed...n=%x d=%
  4113a8:	2078 6863 3d6b 7825 2520 0a73 0000 0000     x chk=%x %s.....
  4113b8:	4157 4e52 4e49 3a47 2520 3a73 6425 203a     WARNING: %s:%d: 
  4113c8:	7325 203a 7341 6573 7472 6f69 206e 2522     %s: Assertion "%
  4113d8:	2273 6620 6961 656c 2e64 090a 3d77 7825     s" failed...w=%x
  4113e8:	6420 253d 2078 6863 3d6b 7825 2520 0a73      d=%x chk=%x %s.
  4113f8:	0000 0000                                   ....

004113fc <__func__.6268>:
  4113fc:	7369 6e62 3031 635f 6c61 5f63 6863 6365     isbn10_calc_chec
  41140c:	736b 6d75 0000 0000                         ksum....

00411414 <__func__.6257>:
  411414:	6165 5f6e 6576 6972 7966 635f 6568 6b63     ean_verify_check
  411424:	7573 006d                                   sum.

00411428 <__func__.6334>:
  411428:	7a5f 6162 5f72 6572 6366 746e 0000 0000     _zbar_refcnt....
  411438:	2e2e 732f 6372 412f 4653 742f 6968 6472     ../src/ASF/third
  411448:	6170 7472 2f79 627a 7261 692f 636e 756c     party/zbar/inclu
  411458:	6564 722f 6665 6e63 2e74 0068 6372 3e20     de/refcnt.h.rc >
  411468:	203d 0030 2e2e 732f 6372 412f 4653 742f     = 0.../src/ASF/t
  411478:	6968 6472 6170 7472 2f79 627a 7261 692f     hirdparty/zbar/i
  411488:	616d 6567 632e 0000 6d69 2d67 723e 6665     mage.c..img->ref
  411498:	6e63 0074 7364 2d74 643e 7461 0061 0000     cnt.dst->data...
  4114a8:	7325 252e 342e 2e73 697a 676d 0000 0000     %s.%.4s.zimg....
  4114b8:	7325 252e 3830 786c 7a2e 6d69 0067 0000     %s.%08lx.zimg...
  4114c8:	206e 203c 656c 206e 202d 0031 7325 203a     n < len - 1.%s: 
  4114d8:	7564 706d 6e69 2067 2e25 7334 2528 3830     dumping %.4s(%08
  4114e8:	786c 2029 6d69 6761 2065 6f74 2520 0a73     lx) image to %s.
  4114f8:	0000 0000 0077 0000                         ....w...

00411500 <__func__.6518>:
  411500:	627a 7261 695f 616d 6567 665f 6572 5f65     zbar_image_free_
  411510:	6164 6174 0000 0000                         data....

00411518 <__func__.6992>:
  411518:	7973 626d 6c6f 685f 6e61 6c64 7265 0000     symbol_handler..

00411528 <__func__.7061>:
  411528:	627a 7261 735f 6163 5f6e 6d69 6761 0065     zbar_scan_image.

00411538 <__func__.7005>:
  411538:	7564 706d 735f 6174 7374 0000               dump_stats..

00411544 <__func__.6955>:
  411544:	7a5f 6162 5f72 6d69 6761 5f65 6373 6e61     _zbar_image_scan
  411554:	656e 5f72 6c61 6f6c 5f63 7973 006d 0000     ner_alloc_sym...
  411564:	2e2e 732f 6372 412f 4653 742f 6968 6472     ../src/ASF/third
  411574:	6170 7472 2f79 627a 7261 692f 676d 735f     party/zbar/img_s
  411584:	6163 6e6e 7265 632e 0000 0000 7973 2d6d     canner.c....sym-
  411594:	643e 7461 5f61 6c61 6f6c 0063 7973 2d6d     >data_alloc.sym-
  4115a4:	643e 7461 0061 0000 7369 6e63 3e2d 6572     >data...iscn->re
  4115b4:	7963 6c63 5b65 5d69 6e2e 7973 736d 0000     cycle[i].nsyms..
  4115c4:	7321 6d79 3e2d 7973 736d 0000 7974 6570     !sym->syms..type
  4115d4:	2120 203d 425a 5241 515f 4352 444f 0045      != ZBAR_QRCODE.
  4115e4:	7325 203a 6170 7472 6169 206c 7973 626d     %s: partial symb
  4115f4:	6c6f 4020 2528 2c64 6425 0a29 0000 0000     ol @(%d,%d).....
  411604:	7325 203a 7564 2070 7973 626d 6c6f 4020     %s: dup symbol @
  411614:	2528 2c64 6425 3a29 6420 7075 2520 3a73     (%d,%d): dup %s:
  411624:	2520 322e 7330 000a 7325 203a 656e 2077      %.20s..%s: new 
  411634:	7973 626d 6c6f 4020 2528 2c64 6425 3a29     symbol @(%d,%d):
  411644:	2520 3a73 2520 322e 7330 000a 7325 203a      %s: %.20s..%s: 
  411654:	7973 626d 6c6f 7320 7465 2073 6c61 6f6c     symbol sets allo
  411664:	6163 6574 2064 2020 203d 2d25 6434 000a     cated   = %-4d..
  411674:	7325 203a 2020 2020 6373 6e61 656e 2072     %s:     scanner 
  411684:	7973 736d 6920 206e 7375 2065 203d 2d25     syms in use = %-
  411694:	6434 7209 6365 6379 656c 2064 3d20 2520     4d.recycled  = %
  4116a4:	342d 0a64 0000 0000 7325 203a 2020 2020     -4d.....%s:     
  4116b4:	6d69 6761 2065 7973 736d 6920 206e 7375     image syms in us
  4116c4:	2065 2020 203d 2d25 6434 7209 6365 6379     e   = %-4d.recyc
  4116d4:	656c 2064 3d20 2520 342d 0a64 0000 0000     led  = %-4d.....
  4116e4:	7325 203a 7973 626d 6c6f 2073 6c61 6f6c     %s: symbols allo
  4116f4:	6163 6574 2064 2020 2020 2020 203d 2d25     cated       = %-
  411704:	6434 000a 7325 203a 2020 2020 7220 6365     4d..%s:      rec
  411714:	6379 656c 5b64 6425 205d 2020 2020 2020     ycled[%d]       
  411724:	3d20 2520 342d 0a64 0000 0000 7863 2031      = %-4d.....cx1 
  411734:	3d3c 7720 0000 0000 7963 2031 3d3c 6820     <= w....cy1 <= h
  411744:	0000 0000 6f62 6472 7265 3c20 203d 0068     ....border <= h.
  411754:	7325 203a 6d69 5f67 2b78 203a 3025 6434     %s: img_x+: %04d
  411764:	252c 3430 2064 2540 0a70 0000 2070 3d3d     ,%04d @%p...p ==
  411774:	6420 7461 2061 202b 2078 202b 2079 202a      data + x + y * 
  411784:	6928 746e 7470 5f72 2974 0077 7325 203a     (intptr_t)w.%s: 
  411794:	6d69 5f67 2d78 203a 3025 6434 252c 3430     img_x-: %04d,%04
  4117a4:	2064 2540 0a70 0000 6f62 6472 7265 3c20     d @%p...border <
  4117b4:	203d 0077 7325 203a 6d69 5f67 2b79 203a     = w.%s: img_y+: 
  4117c4:	3025 6434 252c 3430 2064 2540 0a70 0000     %04d,%04d @%p...
  4117d4:	7325 203a 6d69 5f67 2d79 203a 3025 6434     %s: img_y-: %04d
  4117e4:	252c 3430 2064 2540 0a70 0000 6165 006e     ,%04d @%p...ean.
  4117f4:	6461 6f64 006e 0000                         addon...

004117fc <__func__.6569>:
  4117fc:	7a5f 6162 5f72 6572 6366 746e 0000 0000     _zbar_refcnt....

0041180c <__func__.6924>:
  41180c:	7a5f 6162 5f72 6d69 6761 5f65 6373 6e61     _zbar_image_scan
  41181c:	656e 5f72 6572 7963 6c63 5f65 7973 736d     ner_recycle_syms
  41182c:	0000 0000                                   ....

00411830 <__func__.6149>:
  411830:	7a5f 6162 5f72 6572 6366 746e 0000 0000     _zbar_refcnt....

00411840 <__func__.6327>:
  411840:	7a5f 6162 5f72 6567 5f74 7973 626d 6c6f     _zbar_get_symbol
  411850:	685f 7361 0068 0000 4145 2d4e 0032 0000     _hash...EAN-2...
  411860:	4145 2d4e 0035 0000 4145 2d4e 0038 0000     EAN-5...EAN-8...
  411870:	5055 2d43 0045 0000 5349 4e42 312d 0030     UPC-E...ISBN-10.
  411880:	5055 2d43 0041 0000 4145 2d4e 3331 0000     UPC-A...EAN-13..
  411890:	5349 4e42 312d 0033 4f43 504d 534f 5449     ISBN-13.COMPOSIT
  4118a0:	0045 0000 3249 352f 0000 0000 6144 6174     E...I2/5....Data
  4118b0:	6142 0072 6144 6174 6142 2d72 7845 0070     Bar.DataBar-Exp.
  4118c0:	6f43 6164 6162 0072 4f43 4544 332d 0039     Codabar.CODE-39.
  4118d0:	4f43 4544 392d 0033 4f43 4544 312d 3832     CODE-93.CODE-128
  4118e0:	0000 0000 4450 3446 3731 0000 5251 432d     ....PDF417..QR-C
  4118f0:	646f 0065 4e55 4e4b 574f 004e 4e45 4241     ode.UNKNOWN.ENAB
  411900:	454c 0000 4441 5f44 4843 4345 004b 0000     LE..ADD_CHECK...
  411910:	4d45 5449 435f 4548 4b43 0000 5341 4943     EMIT_CHECK..ASCI
  411920:	0049 0000 494d 5f4e 454c 004e 414d 5f58     I...MIN_LEN.MAX_
  411930:	454c 004e 4e55 4543 5452 4941 544e 0059     LEN.UNCERTAINTY.
  411940:	4f50 4953 4954 4e4f 0000 0000 5f58 4544     POSITION....X_DE
  411950:	534e 5449 0059 0000 5f59 4544 534e 5449     NSITY...Y_DENSIT
  411960:	0059 0000 5347 0031 4941 004d 5055 0000     Y...GS1.AIM.UP..
  411970:	4952 4847 0054 0000 4f44 4e57 0000 0000     RIGHT...DOWN....
  411980:	454c 5446 0000 0000 2e2e 732f 6372 412f     LEFT....../src/A
  411990:	4653 742f 6968 6472 6170 7472 2f79 627a     SF/thirdparty/zb
  4119a0:	7261 732f 6d79 6f62 2e6c 0063 3067 3e20     ar/symbol.c.g0 >
  4119b0:	203d 2030 2626 6720 2031 3d3e 3020 0000     = 0 && g1 >= 0..
  4119c0:	3f3c 6d78 006c 0000 733c 6d79 6f62 206c     <?xml...<symbol 
  4119d0:	7974 6570 273d 7325 2027 7571 6c61 7469     type='%s' qualit
  4119e0:	3d79 2527 2764 6f20 6972 6e65 6174 6974     y='%d' orientati
  4119f0:	6e6f 273d 7325 0027 2069 203e 0030 0000     on='%s'.i > 0...
  411a00:	206e 3d3c 6d20 7861 656c 006e 6d20 646f     n <= maxlen. mod
  411a10:	6669 6569 7372 273d 0000 0000 7325 0020     ifiers='....%s .
  411a20:	0027 0000 6320 6e6f 6966 7367 273d 0000     '... configs='..
  411a30:	6320 756f 746e 273d 6425 0027 3c3e 6164      count='%d'.><da
  411a40:	6174 0000 6620 726f 616d 3d74 6227 7361     ta.. format='bas
  411a50:	3665 2734 6c20 6e65 7467 3d68 2527 2764     e64' length='%d'
  411a60:	0000 0000 5d5d 3c3e 642f 7461 3e61 2f3c     ....]]></data></
  411a70:	7973 626d 6c6f 003e 3c3e 5b21 4443 5441     symbol>.><![CDAT
  411a80:	5b41 0000                                   A[..

00411a84 <hash.6324>:
  411a84:	0100 1110 11ff 0c16 0605 ff08 0304 1207     ................
  411a94:	ffff ffff ffff 02ff 00ff 0c12 1d0b 000a     ................
  411aa4:	7246 6565 5452 534f 0000 0000 4544 4f4d     FreeRTOS....DEMO
  411ab4:	0000 0000 6174 6b73 645f 7369 6c70 7961     ....task_display
  411ac4:	0000 0000 6e69 7469 6169 696c 697a 676e     ....initializing
  411ad4:	6320 6d61 7265 0061 6f66 6e75 2064 6d69      camera.found im
  411ae4:	6761 0065 5055 2043 6f63 6564 0000 0000     age.UPC code....
  411af4:	6950 7463 7275 2065 6173 6576 0064 0000     Picture saved...
  411b04:	564f 3737 3034 6920 616d 6567 7320 6e65     OV7740 image sen
  411b14:	6f73 0a72 6163 7470 7275 2065 7865 6d61     sor.capture exam
  411b24:	6c70 0065 6c50 6165 6573 5720 6961 2074     ple.Please Wait 
  411b34:	7564 6972 676e 0a20 6e69 7469 6169 696c     during .initiali
  411b44:	617a 6974 6e6f 0000 6c50 6165 6573 5020     zation..Please P
  411b54:	6572 7373 6220 7475 6f74 0a6e 6f74 7420     ress button.to t
  411b64:	6b61 2065 6e61 2064 6964 7073 616c 0a79     ake and display.
  411b74:	2061 6970 7463 7275 0065 0000 654c 0064     a picture...Led.
  411b84:	434c 0044 6944 7073 616c 0079 6143 656d     LCD.Display.Came
  411b94:	6172 0000 202c 7566 636e 6974 6e6f 203a     ra.., function: 
  411ba4:	0000 0000 7361 6573 7472 6f69 206e 2522     ....assertion "%
  411bb4:	2273 6620 6961 656c 3a64 6620 6c69 2065     s" failed: file 
  411bc4:	2522 2273 202c 696c 656e 2520 2564 2573     "%s", line %d%s%
  411bd4:	0a73 0000 0043 0000                         s...C...

00411bdc <_global_impure_ptr>:
  411bdc:	0018 2000                                   ... 

00411be0 <zeroes.6911>:
  411be0:	3030 3030 3030 3030 3030 3030 3030 3030     0000000000000000

00411bf0 <blanks.6910>:
  411bf0:	2020 2020 2020 2020 2020 2020 2020 2020                     
  411c00:	4e49 0046 6e69 0066 414e 004e 616e 006e     INF.inf.NAN.nan.
  411c10:	3130 3332 3534 3736 3938 4241 4443 4645     0123456789ABCDEF
  411c20:	0000 0000 3130 3332 3534 3736 3938 6261     ....0123456789ab
  411c30:	6463 6665 0000 0000 6e28 6c75 296c 0000     cdef....(null)..

00411c40 <zeroes.6869>:
  411c40:	3030 3030 3030 3030 3030 3030 3030 3030     0000000000000000

00411c50 <blanks.6868>:
  411c50:	2020 2020 2020 2020 2020 2020 2020 2020                     

00411c60 <zeroes.6926>:
  411c60:	3030 3030 3030 3030 3030 3030 3030 3030     0000000000000000

00411c70 <blanks.6925>:
  411c70:	2020 2020 2020 2020 2020 2020 2020 2020                     
  411c80:	6e49 6966 696e 7974 0000 0000 614e 004e     Infinity....NaN.
  411c90:	4f50 4953 0058 0000 002e 0000 0000 0000     POSIX...........

00411ca0 <__mprec_tens>:
  411ca0:	0000 0000 0000 3ff0 0000 0000 0000 4024     .......?......$@
  411cb0:	0000 0000 0000 4059 0000 0000 4000 408f     ......Y@.....@.@
  411cc0:	0000 0000 8800 40c3 0000 0000 6a00 40f8     .......@.....j.@
  411cd0:	0000 0000 8480 412e 0000 0000 12d0 4163     .......A......cA
  411ce0:	0000 0000 d784 4197 0000 0000 cd65 41cd     .......A....e..A
  411cf0:	0000 2000 a05f 4202 0000 e800 4876 4237     ... _..B....vH7B
  411d00:	0000 a200 1a94 426d 0000 e540 309c 42a2     ......mB..@..0.B
  411d10:	0000 1e90 bcc4 42d6 0000 2634 6bf5 430c     .......B..4&.k.C
  411d20:	8000 37e0 c379 4341 a000 85d8 3457 4376     ...7y.AC....W4vC
  411d30:	c800 674e c16d 43ab 3d00 6091 58e4 43e1     ..Ngm..C.=.`.X.C
  411d40:	8c40 78b5 af1d 4415 ef50 d6e2 1ae4 444b     @..x...DP.....KD
  411d50:	d592 064d f0cf 4480 4af6 c7e1 2d02 44b5     ..M....D.J...-.D
  411d60:	9db4 79d9 7843 44ea                         ...yCx.D

00411d68 <p05.5302>:
  411d68:	0005 0000 0019 0000 007d 0000 0000 0000     ........}.......

00411d78 <__mprec_bigtens>:
  411d78:	8000 37e0 c379 4341 6e17 b505 b8b5 4693     ...7y.AC.n.....F
  411d88:	f9f5 e93f 4f03 4d38 1d32 f930 7748 5a82     ..?..O8M2.0.Hw.Z
  411d98:	bf3c 7f73 4fdd 7515                         <.s..O.u

00411da0 <_init>:
  411da0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  411da2:	bf00      	nop
  411da4:	bcf8      	pop	{r3, r4, r5, r6, r7}
  411da6:	bc08      	pop	{r3}
  411da8:	469e      	mov	lr, r3
  411daa:	4770      	bx	lr

00411dac <__init_array_start>:
  411dac:	0040d101 	.word	0x0040d101

00411db0 <__frame_dummy_init_array_entry>:
  411db0:	004000f1                                ..@.

00411db4 <_fini>:
  411db4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  411db6:	bf00      	nop
  411db8:	bcf8      	pop	{r3, r4, r5, r6, r7}
  411dba:	bc08      	pop	{r3}
  411dbc:	469e      	mov	lr, r3
  411dbe:	4770      	bx	lr

00411dc0 <__fini_array_start>:
  411dc0:	004000cd 	.word	0x004000cd

Disassembly of section .relocate:

20000000 <portable_delay_cycles>:
RAMFUNC
void portable_delay_cycles(unsigned long n)
{
	UNUSED(n);

	__asm (
20000000:	f3bf 8f5f 	dmb	sy
20000004:	3801      	subs	r0, #1
20000006:	d1fb      	bne.n	20000000 <portable_delay_cycles>
20000008:	4770      	bx	lr
2000000a:	bf00      	nop

2000000c <SystemCoreClock>:
2000000c:	0900 003d                                   ..=.

20000010 <uxCriticalNesting>:
20000010:	aaaa aaaa                                   ....

20000014 <g_us_cap_rows>:
20000014:	00f0                                        ..

20000016 <g_us_cap_line>:
20000016:	0280                                        ..

20000018 <impure_data>:
20000018:	0000 0000 0304 2000 036c 2000 03d4 2000     ....... l.. ... 
	...
2000004c:	1bd8 0041 0000 0000 0000 0000 0000 0000     ..A.............
	...
200000c0:	0001 0000 0000 0000 330e abcd 1234 e66d     .........3..4.m.
200000d0:	deec 0005 000b 0000 0000 0000 0000 0000     ................
	...

20000440 <_impure_ptr>:
20000440:	0018 2000                                   ... 

20000444 <__malloc_av_>:
	...
2000044c:	0444 2000 0444 2000 044c 2000 044c 2000     D.. D.. L.. L.. 
2000045c:	0454 2000 0454 2000 045c 2000 045c 2000     T.. T.. \.. \.. 
2000046c:	0464 2000 0464 2000 046c 2000 046c 2000     d.. d.. l.. l.. 
2000047c:	0474 2000 0474 2000 047c 2000 047c 2000     t.. t.. |.. |.. 
2000048c:	0484 2000 0484 2000 048c 2000 048c 2000     ... ... ... ... 
2000049c:	0494 2000 0494 2000 049c 2000 049c 2000     ... ... ... ... 
200004ac:	04a4 2000 04a4 2000 04ac 2000 04ac 2000     ... ... ... ... 
200004bc:	04b4 2000 04b4 2000 04bc 2000 04bc 2000     ... ... ... ... 
200004cc:	04c4 2000 04c4 2000 04cc 2000 04cc 2000     ... ... ... ... 
200004dc:	04d4 2000 04d4 2000 04dc 2000 04dc 2000     ... ... ... ... 
200004ec:	04e4 2000 04e4 2000 04ec 2000 04ec 2000     ... ... ... ... 
200004fc:	04f4 2000 04f4 2000 04fc 2000 04fc 2000     ... ... ... ... 
2000050c:	0504 2000 0504 2000 050c 2000 050c 2000     ... ... ... ... 
2000051c:	0514 2000 0514 2000 051c 2000 051c 2000     ... ... ... ... 
2000052c:	0524 2000 0524 2000 052c 2000 052c 2000     $.. $.. ,.. ,.. 
2000053c:	0534 2000 0534 2000 053c 2000 053c 2000     4.. 4.. <.. <.. 
2000054c:	0544 2000 0544 2000 054c 2000 054c 2000     D.. D.. L.. L.. 
2000055c:	0554 2000 0554 2000 055c 2000 055c 2000     T.. T.. \.. \.. 
2000056c:	0564 2000 0564 2000 056c 2000 056c 2000     d.. d.. l.. l.. 
2000057c:	0574 2000 0574 2000 057c 2000 057c 2000     t.. t.. |.. |.. 
2000058c:	0584 2000 0584 2000 058c 2000 058c 2000     ... ... ... ... 
2000059c:	0594 2000 0594 2000 059c 2000 059c 2000     ... ... ... ... 
200005ac:	05a4 2000 05a4 2000 05ac 2000 05ac 2000     ... ... ... ... 
200005bc:	05b4 2000 05b4 2000 05bc 2000 05bc 2000     ... ... ... ... 
200005cc:	05c4 2000 05c4 2000 05cc 2000 05cc 2000     ... ... ... ... 
200005dc:	05d4 2000 05d4 2000 05dc 2000 05dc 2000     ... ... ... ... 
200005ec:	05e4 2000 05e4 2000 05ec 2000 05ec 2000     ... ... ... ... 
200005fc:	05f4 2000 05f4 2000 05fc 2000 05fc 2000     ... ... ... ... 
2000060c:	0604 2000 0604 2000 060c 2000 060c 2000     ... ... ... ... 
2000061c:	0614 2000 0614 2000 061c 2000 061c 2000     ... ... ... ... 
2000062c:	0624 2000 0624 2000 062c 2000 062c 2000     $.. $.. ,.. ,.. 
2000063c:	0634 2000 0634 2000 063c 2000 063c 2000     4.. 4.. <.. <.. 
2000064c:	0644 2000 0644 2000 064c 2000 064c 2000     D.. D.. L.. L.. 
2000065c:	0654 2000 0654 2000 065c 2000 065c 2000     T.. T.. \.. \.. 
2000066c:	0664 2000 0664 2000 066c 2000 066c 2000     d.. d.. l.. l.. 
2000067c:	0674 2000 0674 2000 067c 2000 067c 2000     t.. t.. |.. |.. 
2000068c:	0684 2000 0684 2000 068c 2000 068c 2000     ... ... ... ... 
2000069c:	0694 2000 0694 2000 069c 2000 069c 2000     ... ... ... ... 
200006ac:	06a4 2000 06a4 2000 06ac 2000 06ac 2000     ... ... ... ... 
200006bc:	06b4 2000 06b4 2000 06bc 2000 06bc 2000     ... ... ... ... 
200006cc:	06c4 2000 06c4 2000 06cc 2000 06cc 2000     ... ... ... ... 
200006dc:	06d4 2000 06d4 2000 06dc 2000 06dc 2000     ... ... ... ... 
200006ec:	06e4 2000 06e4 2000 06ec 2000 06ec 2000     ... ... ... ... 
200006fc:	06f4 2000 06f4 2000 06fc 2000 06fc 2000     ... ... ... ... 
2000070c:	0704 2000 0704 2000 070c 2000 070c 2000     ... ... ... ... 
2000071c:	0714 2000 0714 2000 071c 2000 071c 2000     ... ... ... ... 
2000072c:	0724 2000 0724 2000 072c 2000 072c 2000     $.. $.. ,.. ,.. 
2000073c:	0734 2000 0734 2000 073c 2000 073c 2000     4.. 4.. <.. <.. 
2000074c:	0744 2000 0744 2000 074c 2000 074c 2000     D.. D.. L.. L.. 
2000075c:	0754 2000 0754 2000 075c 2000 075c 2000     T.. T.. \.. \.. 
2000076c:	0764 2000 0764 2000 076c 2000 076c 2000     d.. d.. l.. l.. 
2000077c:	0774 2000 0774 2000 077c 2000 077c 2000     t.. t.. |.. |.. 
2000078c:	0784 2000 0784 2000 078c 2000 078c 2000     ... ... ... ... 
2000079c:	0794 2000 0794 2000 079c 2000 079c 2000     ... ... ... ... 
200007ac:	07a4 2000 07a4 2000 07ac 2000 07ac 2000     ... ... ... ... 
200007bc:	07b4 2000 07b4 2000 07bc 2000 07bc 2000     ... ... ... ... 
200007cc:	07c4 2000 07c4 2000 07cc 2000 07cc 2000     ... ... ... ... 
200007dc:	07d4 2000 07d4 2000 07dc 2000 07dc 2000     ... ... ... ... 
200007ec:	07e4 2000 07e4 2000 07ec 2000 07ec 2000     ... ... ... ... 
200007fc:	07f4 2000 07f4 2000 07fc 2000 07fc 2000     ... ... ... ... 
2000080c:	0804 2000 0804 2000 080c 2000 080c 2000     ... ... ... ... 
2000081c:	0814 2000 0814 2000 081c 2000 081c 2000     ... ... ... ... 
2000082c:	0824 2000 0824 2000 082c 2000 082c 2000     $.. $.. ,.. ,.. 
2000083c:	0834 2000 0834 2000 083c 2000 083c 2000     4.. 4.. <.. <.. 

2000084c <__malloc_trim_threshold>:
2000084c:	0000 0002                                   ....

20000850 <__malloc_sbrk_base>:
20000850:	ffff ffff                                   ....

20000854 <lconv>:
20000854:	1c98 0041 1600 0041 1600 0041 1600 0041     ..A...A...A...A.
20000864:	1600 0041 1600 0041 1600 0041 1600 0041     ..A...A...A...A.
20000874:	1600 0041 1600 0041 ffff ffff ffff ffff     ..A...A.........
20000884:	ffff ffff ffff 0000                         ........

2000088c <lc_ctype_charset>:
2000088c:	5341 4943 0049 0000 0000 0000 0000 0000     ASCII...........
	...

200008ac <__mb_cur_max>:
200008ac:	0001 0000                                   ....

200008b0 <__wctomb>:
200008b0:	ead1 0040                                   ..@.
