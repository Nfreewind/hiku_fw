
Sam4S_DACC_SINEWAVE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000056cc  00400000  00400000  00008000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  004056cc  004056cc  0000d6cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     0000086c  20000000  004056d4  00010000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          00001748  2000086c  00405f40  0001086c  2**2
                  ALLOC
  4 .stack        00003004  20001fb4  00407688  0001086c  2**0
                  ALLOC
  5 .ARM.attributes 0000002a  00000000  00000000  0001086c  2**0
                  CONTENTS, READONLY
  6 .comment      0000005b  00000000  00000000  00010896  2**0
                  CONTENTS, READONLY
  7 .debug_info   0000b87e  00000000  00000000  000108f1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001f04  00000000  00000000  0001c16f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0000460c  00000000  00000000  0001e073  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000a90  00000000  00000000  0002267f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000990  00000000  00000000  0002310f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  00013913  00000000  00000000  00023a9f  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0000b6c3  00000000  00000000  000373b2  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00052f45  00000000  00000000  00042a75  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  000022f8  00000000  00000000  000959bc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <_sfixed>:
  400000:	20004fb8 	.word	0x20004fb8
  400004:	004008f5 	.word	0x004008f5
  400008:	004008f1 	.word	0x004008f1
  40000c:	004008f1 	.word	0x004008f1
  400010:	004008f1 	.word	0x004008f1
  400014:	004008f1 	.word	0x004008f1
  400018:	004008f1 	.word	0x004008f1
	...
  40002c:	004008f1 	.word	0x004008f1
  400030:	004008f1 	.word	0x004008f1
  400034:	00000000 	.word	0x00000000
  400038:	004008f1 	.word	0x004008f1
  40003c:	004008f1 	.word	0x004008f1
  400040:	004008f1 	.word	0x004008f1
  400044:	004008f1 	.word	0x004008f1
  400048:	004008f1 	.word	0x004008f1
  40004c:	004008f1 	.word	0x004008f1
  400050:	004008f1 	.word	0x004008f1
  400054:	004008f1 	.word	0x004008f1
  400058:	004008f1 	.word	0x004008f1
  40005c:	004008f1 	.word	0x004008f1
  400060:	004008f1 	.word	0x004008f1
  400064:	004008f1 	.word	0x004008f1
  400068:	00000000 	.word	0x00000000
  40006c:	004006b9 	.word	0x004006b9
  400070:	004006cd 	.word	0x004006cd
  400074:	004006e1 	.word	0x004006e1
  400078:	004008f1 	.word	0x004008f1
  40007c:	004008f1 	.word	0x004008f1
	...
  400088:	004008f1 	.word	0x004008f1
  40008c:	004008f1 	.word	0x004008f1
  400090:	004008f1 	.word	0x004008f1
  400094:	004008f1 	.word	0x004008f1
  400098:	004008f1 	.word	0x004008f1
  40009c:	004008f1 	.word	0x004008f1
  4000a0:	004008f1 	.word	0x004008f1
  4000a4:	004008f1 	.word	0x004008f1
  4000a8:	004008f1 	.word	0x004008f1
  4000ac:	004008f1 	.word	0x004008f1
  4000b0:	004008f1 	.word	0x004008f1
  4000b4:	004008f1 	.word	0x004008f1
  4000b8:	00400ca5 	.word	0x00400ca5
  4000bc:	004008f1 	.word	0x004008f1
  4000c0:	004008f1 	.word	0x004008f1
  4000c4:	004008f1 	.word	0x004008f1
  4000c8:	004008f1 	.word	0x004008f1

004000cc <__do_global_dtors_aux>:
  4000cc:	b510      	push	{r4, lr}
  4000ce:	4c05      	ldr	r4, [pc, #20]	; (4000e4 <__do_global_dtors_aux+0x18>)
  4000d0:	7823      	ldrb	r3, [r4, #0]
  4000d2:	b933      	cbnz	r3, 4000e2 <__do_global_dtors_aux+0x16>
  4000d4:	4b04      	ldr	r3, [pc, #16]	; (4000e8 <__do_global_dtors_aux+0x1c>)
  4000d6:	b113      	cbz	r3, 4000de <__do_global_dtors_aux+0x12>
  4000d8:	4804      	ldr	r0, [pc, #16]	; (4000ec <__do_global_dtors_aux+0x20>)
  4000da:	f3af 8000 	nop.w
  4000de:	2301      	movs	r3, #1
  4000e0:	7023      	strb	r3, [r4, #0]
  4000e2:	bd10      	pop	{r4, pc}
  4000e4:	2000086c 	.word	0x2000086c
  4000e8:	00000000 	.word	0x00000000
  4000ec:	004056d4 	.word	0x004056d4

004000f0 <frame_dummy>:
  4000f0:	4b08      	ldr	r3, [pc, #32]	; (400114 <frame_dummy+0x24>)
  4000f2:	b510      	push	{r4, lr}
  4000f4:	b11b      	cbz	r3, 4000fe <frame_dummy+0xe>
  4000f6:	4808      	ldr	r0, [pc, #32]	; (400118 <frame_dummy+0x28>)
  4000f8:	4908      	ldr	r1, [pc, #32]	; (40011c <frame_dummy+0x2c>)
  4000fa:	f3af 8000 	nop.w
  4000fe:	4808      	ldr	r0, [pc, #32]	; (400120 <frame_dummy+0x30>)
  400100:	6803      	ldr	r3, [r0, #0]
  400102:	b903      	cbnz	r3, 400106 <frame_dummy+0x16>
  400104:	bd10      	pop	{r4, pc}
  400106:	4b07      	ldr	r3, [pc, #28]	; (400124 <frame_dummy+0x34>)
  400108:	2b00      	cmp	r3, #0
  40010a:	d0fb      	beq.n	400104 <frame_dummy+0x14>
  40010c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  400110:	4718      	bx	r3
  400112:	bf00      	nop
  400114:	00000000 	.word	0x00000000
  400118:	004056d4 	.word	0x004056d4
  40011c:	20000870 	.word	0x20000870
  400120:	004056d4 	.word	0x004056d4
  400124:	00000000 	.word	0x00000000

00400128 <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
  400128:	b510      	push	{r4, lr}
	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
  40012a:	480e      	ldr	r0, [pc, #56]	; (400164 <sysclk_init+0x3c>)
  40012c:	4b0e      	ldr	r3, [pc, #56]	; (400168 <sysclk_init+0x40>)
  40012e:	4798      	blx	r3
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
  400130:	2000      	movs	r0, #0
  400132:	213e      	movs	r1, #62	; 0x3e
  400134:	4b0d      	ldr	r3, [pc, #52]	; (40016c <sysclk_init+0x44>)
  400136:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
  400138:	4c0d      	ldr	r4, [pc, #52]	; (400170 <sysclk_init+0x48>)
  40013a:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
  40013c:	2800      	cmp	r0, #0
  40013e:	d0fc      	beq.n	40013a <sysclk_init+0x12>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
  400140:	4b0c      	ldr	r3, [pc, #48]	; (400174 <sysclk_init+0x4c>)
  400142:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
  400144:	4a0c      	ldr	r2, [pc, #48]	; (400178 <sysclk_init+0x50>)
  400146:	4b0d      	ldr	r3, [pc, #52]	; (40017c <sysclk_init+0x54>)
  400148:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		return pmc_is_locked_pllack();
  40014a:	4c0d      	ldr	r4, [pc, #52]	; (400180 <sysclk_init+0x58>)
  40014c:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
  40014e:	2800      	cmp	r0, #0
  400150:	d0fc      	beq.n	40014c <sysclk_init+0x24>

		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
  400152:	2010      	movs	r0, #16
  400154:	4b0b      	ldr	r3, [pc, #44]	; (400184 <sysclk_init+0x5c>)
  400156:	4798      	blx	r3
		pmc_switch_mck_to_pllbck(CONFIG_SYSCLK_PRES);
	}
#endif

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
  400158:	4b0b      	ldr	r3, [pc, #44]	; (400188 <sysclk_init+0x60>)
  40015a:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
  40015c:	4801      	ldr	r0, [pc, #4]	; (400164 <sysclk_init+0x3c>)
  40015e:	4b02      	ldr	r3, [pc, #8]	; (400168 <sysclk_init+0x40>)
  400160:	4798      	blx	r3
  400162:	bd10      	pop	{r4, pc}
  400164:	07270e00 	.word	0x07270e00
  400168:	00400ab9 	.word	0x00400ab9
  40016c:	0040075d 	.word	0x0040075d
  400170:	004007b1 	.word	0x004007b1
  400174:	004007c1 	.word	0x004007c1
  400178:	20133f01 	.word	0x20133f01
  40017c:	400e0400 	.word	0x400e0400
  400180:	004007d1 	.word	0x004007d1
  400184:	004006f5 	.word	0x004006f5
  400188:	004009a5 	.word	0x004009a5

0040018c <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len)
{
	int nChars = 0;

	if (file != 0) {
  40018c:	b9a8      	cbnz	r0, 4001ba <_read+0x2e>
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
  40018e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  400192:	460c      	mov	r4, r1
  400194:	4690      	mov	r8, r2

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
  400196:	2a00      	cmp	r2, #0
  400198:	dd0a      	ble.n	4001b0 <_read+0x24>
  40019a:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
  40019c:	4e08      	ldr	r6, [pc, #32]	; (4001c0 <_read+0x34>)
  40019e:	4d09      	ldr	r5, [pc, #36]	; (4001c4 <_read+0x38>)
  4001a0:	6830      	ldr	r0, [r6, #0]
  4001a2:	4621      	mov	r1, r4
  4001a4:	682b      	ldr	r3, [r5, #0]
  4001a6:	4798      	blx	r3
		ptr++;
  4001a8:	3401      	adds	r4, #1

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
  4001aa:	42bc      	cmp	r4, r7
  4001ac:	d1f8      	bne.n	4001a0 <_read+0x14>
  4001ae:	e001      	b.n	4001b4 <_read+0x28>
  4001b0:	f04f 0800 	mov.w	r8, #0
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
	}
	return nChars;
  4001b4:	4640      	mov	r0, r8
  4001b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
_read (int file, char * ptr, int len)
{
	int nChars = 0;

	if (file != 0) {
		return -1;
  4001ba:	f04f 30ff 	mov.w	r0, #4294967295
  4001be:	4770      	bx	lr
  4001c0:	20000944 	.word	0x20000944
  4001c4:	2000093c 	.word	0x2000093c

004001c8 <_write>:
int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
  4001c8:	3801      	subs	r0, #1
  4001ca:	2802      	cmp	r0, #2
  4001cc:	d818      	bhi.n	400200 <_write+0x38>
int __attribute__((weak))
_write (int file, const char *ptr, int len);

int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
  4001ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4001d2:	460e      	mov	r6, r1
  4001d4:	4614      	mov	r4, r2

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
  4001d6:	b182      	cbz	r2, 4001fa <_write+0x32>
  4001d8:	460d      	mov	r5, r1
		if (ptr_put(stdio_base, *ptr++) < 0) {
  4001da:	f8df 8038 	ldr.w	r8, [pc, #56]	; 400214 <_write+0x4c>
  4001de:	4f0c      	ldr	r7, [pc, #48]	; (400210 <_write+0x48>)
  4001e0:	f8d8 0000 	ldr.w	r0, [r8]
  4001e4:	f815 1b01 	ldrb.w	r1, [r5], #1
  4001e8:	683b      	ldr	r3, [r7, #0]
  4001ea:	4798      	blx	r3
  4001ec:	2800      	cmp	r0, #0
  4001ee:	db0a      	blt.n	400206 <_write+0x3e>
  4001f0:	1ba8      	subs	r0, r5, r6

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
  4001f2:	3c01      	subs	r4, #1
  4001f4:	d1f4      	bne.n	4001e0 <_write+0x18>
  4001f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4001fa:	2000      	movs	r0, #0
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
		}
		++nChars;
	}
	return nChars;
  4001fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
_write (int file, const char *ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
  400200:	f04f 30ff 	mov.w	r0, #4294967295
			return -1;
		}
		++nChars;
	}
	return nChars;
}
  400204:	4770      	bx	lr
		return -1;
	}

	for (; len != 0; --len) {
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
  400206:	f04f 30ff 	mov.w	r0, #4294967295
		}
		++nChars;
	}
	return nChars;
}
  40020a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40020e:	bf00      	nop
  400210:	20000940 	.word	0x20000940
  400214:	20000944 	.word	0x20000944

00400218 <board_init>:
#include "conf_board.h"
#include "gpio.h"
#include "ioport.h"

void board_init(void)
{
  400218:	b510      	push	{r4, lr}
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
  40021a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  40021e:	4b0f      	ldr	r3, [pc, #60]	; (40025c <board_init+0x44>)
  400220:	605a      	str	r2, [r3, #4]
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
  400222:	200b      	movs	r0, #11
  400224:	4c0e      	ldr	r4, [pc, #56]	; (400260 <board_init+0x48>)
  400226:	47a0      	blx	r4
  400228:	200c      	movs	r0, #12
  40022a:	47a0      	blx	r4
  40022c:	200d      	movs	r0, #13
  40022e:	47a0      	blx	r4
	 * Here IOPORT must be initialized for others to use before setting up IO.
	 */
	ioport_init();

	/* Configure LED pins */
	gpio_configure_pin(LED0_GPIO, LED0_FLAGS);
  400230:	2013      	movs	r0, #19
  400232:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
  400236:	4c0b      	ldr	r4, [pc, #44]	; (400264 <board_init+0x4c>)
  400238:	47a0      	blx	r4
	gpio_configure_pin(LED1_GPIO, LED1_FLAGS);
  40023a:	2014      	movs	r0, #20
  40023c:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
  400240:	47a0      	blx	r4

	/* Configure Push Button pins */
	gpio_configure_pin(GPIO_PUSH_BUTTON_1, GPIO_PUSH_BUTTON_1_FLAGS);
  400242:	2023      	movs	r0, #35	; 0x23
  400244:	4908      	ldr	r1, [pc, #32]	; (400268 <board_init+0x50>)
  400246:	47a0      	blx	r4
	gpio_configure_pin(GPIO_PUSH_BUTTON_2, GPIO_PUSH_BUTTON_2_FLAGS);
  400248:	204c      	movs	r0, #76	; 0x4c
  40024a:	4908      	ldr	r1, [pc, #32]	; (40026c <board_init+0x54>)
  40024c:	47a0      	blx	r4

#ifdef CONF_BOARD_UART_CONSOLE
	/* Configure UART pins */
	gpio_configure_group(PINS_UART1_PIO, PINS_UART1, PINS_UART1_FLAGS);
  40024e:	4808      	ldr	r0, [pc, #32]	; (400270 <board_init+0x58>)
  400250:	210c      	movs	r1, #12
  400252:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
  400256:	4b07      	ldr	r3, [pc, #28]	; (400274 <board_init+0x5c>)
  400258:	4798      	blx	r3
  40025a:	bd10      	pop	{r4, pc}
  40025c:	400e1450 	.word	0x400e1450
  400260:	004007e1 	.word	0x004007e1
  400264:	00400451 	.word	0x00400451
  400268:	28000079 	.word	0x28000079
  40026c:	28000059 	.word	0x28000059
  400270:	400e1000 	.word	0x400e1000
  400274:	00400575 	.word	0x00400575

00400278 <dacc_reset>:
 *
 * \param p_dacc Pointer to a DACC instance. 
 */
void dacc_reset(Dacc *p_dacc)
{
	p_dacc->DACC_CR = DACC_CR_SWRST;
  400278:	2301      	movs	r3, #1
  40027a:	6003      	str	r3, [r0, #0]
  40027c:	4770      	bx	lr
  40027e:	bf00      	nop

00400280 <dacc_set_trigger>:
 *
 * \return \ref DACC_RC_OK for OK.
 */
uint32_t dacc_set_trigger(Dacc *p_dacc, uint32_t ul_trigger)
{
	uint32_t mr = p_dacc->DACC_MR & (~(DACC_MR_TRGSEL_Msk));
  400280:	6843      	ldr	r3, [r0, #4]
  400282:	f023 030e 	bic.w	r3, r3, #14
  400286:	f043 0301 	orr.w	r3, r3, #1
#if (SAM3N) || (SAM4L) || (SAM4N)
	p_dacc->DACC_MR = mr
		| DACC_MR_TRGEN
		| ((ul_trigger << DACC_MR_TRGSEL_Pos) & DACC_MR_TRGSEL_Msk);
#else
	p_dacc->DACC_MR = mr | DACC_MR_TRGEN_EN | DACC_MR_TRGSEL(ul_trigger);
  40028a:	0049      	lsls	r1, r1, #1
  40028c:	f001 010e 	and.w	r1, r1, #14
  400290:	4319      	orrs	r1, r3
  400292:	6041      	str	r1, [r0, #4]
#endif
	return DACC_RC_OK;
}
  400294:	2000      	movs	r0, #0
  400296:	4770      	bx	lr

00400298 <dacc_set_transfer_mode>:
 *
 * \return \ref DACC_RC_OK for OK.
 */
uint32_t dacc_set_transfer_mode(Dacc *p_dacc, uint32_t ul_mode)
{
	if (ul_mode) {
  400298:	b141      	cbz	r1, 4002ac <dacc_set_transfer_mode+0x14>
#if (SAM3N) || (SAM4L) || (SAM4N)
		p_dacc->DACC_MR |= DACC_MR_WORD;
#elif (SAM4S) || (SAM4E)
		p_dacc->DACC_MR |= DACC_MR_ONE;
  40029a:	6843      	ldr	r3, [r0, #4]
  40029c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
  4002a0:	6043      	str	r3, [r0, #4]
		p_dacc->DACC_MR |= DACC_MR_WORD_WORD;
  4002a2:	6843      	ldr	r3, [r0, #4]
  4002a4:	f043 0310 	orr.w	r3, r3, #16
  4002a8:	6043      	str	r3, [r0, #4]
  4002aa:	e007      	b.n	4002bc <dacc_set_transfer_mode+0x24>
#endif
	} else {
#if (SAM3N) || (SAM4L) || (SAM4N)
		p_dacc->DACC_MR &= (~DACC_MR_WORD);
#elif (SAM4S) || (SAM4E)
		p_dacc->DACC_MR |= DACC_MR_ONE;
  4002ac:	6843      	ldr	r3, [r0, #4]
  4002ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
  4002b2:	6043      	str	r3, [r0, #4]
		p_dacc->DACC_MR &= (~DACC_MR_WORD_WORD);
  4002b4:	6843      	ldr	r3, [r0, #4]
  4002b6:	f023 0310 	bic.w	r3, r3, #16
  4002ba:	6043      	str	r3, [r0, #4]
#else
		p_dacc->DACC_MR &= (~DACC_MR_WORD_WORD);
#endif
	}
	return DACC_RC_OK;
}
  4002bc:	2000      	movs	r0, #0
  4002be:	4770      	bx	lr

004002c0 <dacc_enable_interrupt>:
 * \param p_dacc Pointer to a DACC instance. 
 * \param ul_interrupt_mask The interrupt mask.
 */
void dacc_enable_interrupt(Dacc *p_dacc, uint32_t ul_interrupt_mask)
{
	p_dacc->DACC_IER = ul_interrupt_mask;
  4002c0:	6241      	str	r1, [r0, #36]	; 0x24
  4002c2:	4770      	bx	lr

004002c4 <dacc_get_interrupt_status>:
 *
 * \return The interrupt status.
 */
uint32_t dacc_get_interrupt_status(Dacc *p_dacc)
{
	return p_dacc->DACC_ISR;
  4002c4:	6b00      	ldr	r0, [r0, #48]	; 0x30
}
  4002c6:	4770      	bx	lr

004002c8 <dacc_get_pdc_base>:
Pdc *dacc_get_pdc_base(Dacc *p_dacc)
{
	/* avoid Cppcheck Warning */
	UNUSED(p_dacc);
	return PDC_DACC;
}
  4002c8:	4800      	ldr	r0, [pc, #0]	; (4002cc <dacc_get_pdc_base+0x4>)
  4002ca:	4770      	bx	lr
  4002cc:	4003c100 	.word	0x4003c100

004002d0 <dacc_set_channel_selection>:
 *
 * \return \ref DACC_RC_OK if successful.
 */
uint32_t dacc_set_channel_selection(Dacc *p_dacc, uint32_t ul_channel)
{
	uint32_t mr = p_dacc->DACC_MR & (~DACC_MR_USER_SEL_Msk);
  4002d0:	6843      	ldr	r3, [r0, #4]
	if (ul_channel > MAX_CH_NB) {
  4002d2:	2901      	cmp	r1, #1
  4002d4:	d806      	bhi.n	4002e4 <dacc_set_channel_selection+0x14>
		return DACC_RC_INVALID_PARAM;
	}
	mr &= ~(DACC_MR_TAG);
  4002d6:	f423 1398 	bic.w	r3, r3, #1245184	; 0x130000
	mr |= ul_channel << DACC_MR_USER_SEL_Pos;
  4002da:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
	p_dacc->DACC_MR = mr;
  4002de:	6041      	str	r1, [r0, #4]

	return DACC_RC_OK;
  4002e0:	2000      	movs	r0, #0
  4002e2:	4770      	bx	lr
 */
uint32_t dacc_set_channel_selection(Dacc *p_dacc, uint32_t ul_channel)
{
	uint32_t mr = p_dacc->DACC_MR & (~DACC_MR_USER_SEL_Msk);
	if (ul_channel > MAX_CH_NB) {
		return DACC_RC_INVALID_PARAM;
  4002e4:	2001      	movs	r0, #1
	mr &= ~(DACC_MR_TAG);
	mr |= ul_channel << DACC_MR_USER_SEL_Pos;
	p_dacc->DACC_MR = mr;

	return DACC_RC_OK;
}
  4002e6:	4770      	bx	lr

004002e8 <dacc_set_timing>:
 *
 * \return \ref DACC_RC_OK for OK.
 */
uint32_t dacc_set_timing(Dacc *p_dacc,
		uint32_t ul_refresh, uint32_t ul_maxs, uint32_t ul_startup)
{
  4002e8:	b410      	push	{r4}
	uint32_t mr = p_dacc->DACC_MR
  4002ea:	6844      	ldr	r4, [r0, #4]
  4002ec:	f024 547c 	bic.w	r4, r4, #1056964608	; 0x3f000000
  4002f0:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
	& (~(DACC_MR_REFRESH_Msk | DACC_MR_STARTUP_Msk));
	mr |= DACC_MR_REFRESH(ul_refresh);
  4002f4:	0209      	lsls	r1, r1, #8
  4002f6:	b289      	uxth	r1, r1
  4002f8:	430c      	orrs	r4, r1
	if (ul_maxs) {
  4002fa:	b112      	cbz	r2, 400302 <dacc_set_timing+0x1a>
		mr |= DACC_MR_MAXS;
  4002fc:	f444 1400 	orr.w	r4, r4, #2097152	; 0x200000
  400300:	e001      	b.n	400306 <dacc_set_timing+0x1e>
		} else {
		mr &= ~DACC_MR_MAXS;
  400302:	f424 1400 	bic.w	r4, r4, #2097152	; 0x200000
	}
	mr |= (DACC_MR_STARTUP_Msk & ((ul_startup) << DACC_MR_STARTUP_Pos));
  400306:	061b      	lsls	r3, r3, #24
  400308:	f003 537c 	and.w	r3, r3, #1056964608	; 0x3f000000
  40030c:	431c      	orrs	r4, r3

	p_dacc->DACC_MR = mr;
  40030e:	6044      	str	r4, [r0, #4]
	return DACC_RC_OK;
}
  400310:	2000      	movs	r0, #0
  400312:	f85d 4b04 	ldr.w	r4, [sp], #4
  400316:	4770      	bx	lr

00400318 <dacc_enable_channel>:
 *
 * \return \ref DACC_RC_OK for OK.
 */
uint32_t dacc_enable_channel(Dacc *p_dacc, uint32_t ul_channel)
{
	if (ul_channel > MAX_CH_NB)
  400318:	2901      	cmp	r1, #1
  40031a:	d804      	bhi.n	400326 <dacc_enable_channel+0xe>
		return DACC_RC_INVALID_PARAM;

	p_dacc->DACC_CHER = DACC_CHER_CH0 << ul_channel;
  40031c:	2301      	movs	r3, #1
  40031e:	408b      	lsls	r3, r1
  400320:	6103      	str	r3, [r0, #16]
	return DACC_RC_OK;
  400322:	2000      	movs	r0, #0
  400324:	4770      	bx	lr
 * \return \ref DACC_RC_OK for OK.
 */
uint32_t dacc_enable_channel(Dacc *p_dacc, uint32_t ul_channel)
{
	if (ul_channel > MAX_CH_NB)
		return DACC_RC_INVALID_PARAM;
  400326:	2001      	movs	r0, #1

	p_dacc->DACC_CHER = DACC_CHER_CH0 << ul_channel;
	return DACC_RC_OK;
}
  400328:	4770      	bx	lr
  40032a:	bf00      	nop

0040032c <dacc_set_analog_control>:
 *
 * \return \ref DACC_RC_OK for OK.
 */
uint32_t dacc_set_analog_control(Dacc *p_dacc, uint32_t ul_analog_control)
{
	p_dacc->DACC_ACR = ul_analog_control;
  40032c:	f8c0 1094 	str.w	r1, [r0, #148]	; 0x94
	return DACC_RC_OK;
}
  400330:	2000      	movs	r0, #0
  400332:	4770      	bx	lr

00400334 <pdc_tx_init>:
		pdc_packet_t *p_next_packet)
{
	/* Validate inputs. */
	Assert(p_pdc);
	
	if (p_packet) {
  400334:	460b      	mov	r3, r1
  400336:	b119      	cbz	r1, 400340 <pdc_tx_init+0xc>
		p_pdc->PERIPH_TPR = p_packet->ul_addr;
  400338:	6809      	ldr	r1, [r1, #0]
  40033a:	6081      	str	r1, [r0, #8]
		p_pdc->PERIPH_TCR = p_packet->ul_size;
  40033c:	685b      	ldr	r3, [r3, #4]
  40033e:	60c3      	str	r3, [r0, #12]
	}
	if (p_next_packet) {
  400340:	b11a      	cbz	r2, 40034a <pdc_tx_init+0x16>
		p_pdc->PERIPH_TNPR = p_next_packet->ul_addr;
  400342:	6813      	ldr	r3, [r2, #0]
  400344:	6183      	str	r3, [r0, #24]
		p_pdc->PERIPH_TNCR = p_next_packet->ul_size;
  400346:	6853      	ldr	r3, [r2, #4]
  400348:	61c3      	str	r3, [r0, #28]
  40034a:	4770      	bx	lr

0040034c <pdc_enable_transfer>:
{
	/* Validate inputs. */
	Assert(p_pdc);
	
	p_pdc->PERIPH_PTCR =
			ul_controls & (PERIPH_PTCR_RXTEN | PERIPH_PTCR_TXTEN);
  40034c:	f021 01fe 	bic.w	r1, r1, #254	; 0xfe
  400350:	05c9      	lsls	r1, r1, #23
  400352:	0dc9      	lsrs	r1, r1, #23
		uint32_t ul_controls)
{
	/* Validate inputs. */
	Assert(p_pdc);
	
	p_pdc->PERIPH_PTCR =
  400354:	6201      	str	r1, [r0, #32]
  400356:	4770      	bx	lr

00400358 <pio_set_peripheral>:
		const uint32_t ul_mask)
{
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
  400358:	6442      	str	r2, [r0, #68]	; 0x44

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	switch (ul_type) {
  40035a:	f1b1 5fc0 	cmp.w	r1, #402653184	; 0x18000000
  40035e:	d02f      	beq.n	4003c0 <pio_set_peripheral+0x68>
  400360:	d807      	bhi.n	400372 <pio_set_peripheral+0x1a>
  400362:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
  400366:	d014      	beq.n	400392 <pio_set_peripheral+0x3a>
  400368:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
  40036c:	d01e      	beq.n	4003ac <pio_set_peripheral+0x54>
  40036e:	b939      	cbnz	r1, 400380 <pio_set_peripheral+0x28>
  400370:	4770      	bx	lr
  400372:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
  400376:	d037      	beq.n	4003e8 <pio_set_peripheral+0x90>
  400378:	d804      	bhi.n	400384 <pio_set_peripheral+0x2c>
  40037a:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
  40037e:	d029      	beq.n	4003d4 <pio_set_peripheral+0x7c>
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
  400380:	6042      	str	r2, [r0, #4]
  400382:	4770      	bx	lr

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	switch (ul_type) {
  400384:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
  400388:	d02e      	beq.n	4003e8 <pio_set_peripheral+0x90>
  40038a:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
  40038e:	d02b      	beq.n	4003e8 <pio_set_peripheral+0x90>
  400390:	e7f6      	b.n	400380 <pio_set_peripheral+0x28>
 * \param ul_type PIO type.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_set_peripheral(Pio *p_pio, const pio_type_t ul_type,
		const uint32_t ul_mask)
{
  400392:	b410      	push	{r4}
	p_pio->PIO_IDR = ul_mask;

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	switch (ul_type) {
	case PIO_PERIPH_A:
		ul_sr = p_pio->PIO_ABCDSR[0];
  400394:	6f01      	ldr	r1, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  400396:	6f04      	ldr	r4, [r0, #112]	; 0x70
  400398:	43d3      	mvns	r3, r2
  40039a:	4021      	ands	r1, r4
  40039c:	4019      	ands	r1, r3
  40039e:	6701      	str	r1, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  4003a0:	6f41      	ldr	r1, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  4003a2:	6f44      	ldr	r4, [r0, #116]	; 0x74
  4003a4:	4021      	ands	r1, r4
  4003a6:	400b      	ands	r3, r1
  4003a8:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  4003aa:	e01a      	b.n	4003e2 <pio_set_peripheral+0x8a>
	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABCDSR[0];
  4003ac:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  4003ae:	4313      	orrs	r3, r2
  4003b0:	6703      	str	r3, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  4003b2:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  4003b4:	6f41      	ldr	r1, [r0, #116]	; 0x74
  4003b6:	400b      	ands	r3, r1
  4003b8:	ea23 0302 	bic.w	r3, r3, r2
  4003bc:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  4003be:	e7df      	b.n	400380 <pio_set_peripheral+0x28>
#if (!SAMG)
	case PIO_PERIPH_C:
		ul_sr = p_pio->PIO_ABCDSR[0];
  4003c0:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  4003c2:	6f01      	ldr	r1, [r0, #112]	; 0x70
  4003c4:	400b      	ands	r3, r1
  4003c6:	ea23 0302 	bic.w	r3, r3, r2
  4003ca:	6703      	str	r3, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  4003cc:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  4003ce:	4313      	orrs	r3, r2
  4003d0:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  4003d2:	e7d5      	b.n	400380 <pio_set_peripheral+0x28>
	case PIO_PERIPH_D:
		ul_sr = p_pio->PIO_ABCDSR[0];
  4003d4:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  4003d6:	4313      	orrs	r3, r2
  4003d8:	6703      	str	r3, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  4003da:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  4003dc:	4313      	orrs	r3, r2
  4003de:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  4003e0:	e7ce      	b.n	400380 <pio_set_peripheral+0x28>
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
  4003e2:	6042      	str	r2, [r0, #4]
}
  4003e4:	f85d 4b04 	ldr.w	r4, [sp], #4
  4003e8:	4770      	bx	lr
  4003ea:	bf00      	nop

004003ec <pio_set_input>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
  4003ec:	6441      	str	r1, [r0, #68]	; 0x44
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  4003ee:	f012 0f01 	tst.w	r2, #1
		p_pio->PIO_PUER = ul_mask;
  4003f2:	bf14      	ite	ne
  4003f4:	6641      	strne	r1, [r0, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
  4003f6:	6601      	streq	r1, [r0, #96]	; 0x60
{
	pio_disable_interrupt(p_pio, ul_mask);
	pio_pull_up(p_pio, ul_mask, ul_attribute & PIO_PULLUP);

	/* Enable Input Filter if necessary */
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
  4003f8:	f012 0f0a 	tst.w	r2, #10
		p_pio->PIO_IFER = ul_mask;
  4003fc:	bf14      	ite	ne
  4003fe:	6201      	strne	r1, [r0, #32]
	} else {
		p_pio->PIO_IFDR = ul_mask;
  400400:	6241      	streq	r1, [r0, #36]	; 0x24
	}

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	/* Enable de-glitch or de-bounce if necessary */
	if (ul_attribute & PIO_DEGLITCH) {
  400402:	f012 0f02 	tst.w	r2, #2
  400406:	d002      	beq.n	40040e <pio_set_input+0x22>
		p_pio->PIO_IFSCDR = ul_mask;
  400408:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
  40040c:	e004      	b.n	400418 <pio_set_input+0x2c>
	} else {
		if (ul_attribute & PIO_DEBOUNCE) {
  40040e:	f012 0f08 	tst.w	r2, #8
			p_pio->PIO_IFSCER = ul_mask;
  400412:	bf18      	it	ne
  400414:	f8c0 1084 	strne.w	r1, [r0, #132]	; 0x84
#else
#error "Unsupported device"
#endif

	/* Configure pin as input */
	p_pio->PIO_ODR = ul_mask;
  400418:	6141      	str	r1, [r0, #20]
	p_pio->PIO_PER = ul_mask;
  40041a:	6001      	str	r1, [r0, #0]
  40041c:	4770      	bx	lr
  40041e:	bf00      	nop

00400420 <pio_set_output>:
 */
void pio_set_output(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_default_level,
		const uint32_t ul_multidrive_enable,
		const uint32_t ul_pull_up_enable)
{
  400420:	b410      	push	{r4}
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
  400422:	6441      	str	r1, [r0, #68]	; 0x44
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  400424:	9c01      	ldr	r4, [sp, #4]
  400426:	b10c      	cbz	r4, 40042c <pio_set_output+0xc>
		p_pio->PIO_PUER = ul_mask;
  400428:	6641      	str	r1, [r0, #100]	; 0x64
  40042a:	e000      	b.n	40042e <pio_set_output+0xe>
	} else {
		p_pio->PIO_PUDR = ul_mask;
  40042c:	6601      	str	r1, [r0, #96]	; 0x60
{
	pio_disable_interrupt(p_pio, ul_mask);
	pio_pull_up(p_pio, ul_mask, ul_pull_up_enable);

	/* Enable multi-drive if necessary */
	if (ul_multidrive_enable) {
  40042e:	b10b      	cbz	r3, 400434 <pio_set_output+0x14>
		p_pio->PIO_MDER = ul_mask;
  400430:	6501      	str	r1, [r0, #80]	; 0x50
  400432:	e000      	b.n	400436 <pio_set_output+0x16>
	} else {
		p_pio->PIO_MDDR = ul_mask;
  400434:	6541      	str	r1, [r0, #84]	; 0x54
	}

	/* Set default value */
	if (ul_default_level) {
  400436:	b10a      	cbz	r2, 40043c <pio_set_output+0x1c>
		p_pio->PIO_SODR = ul_mask;
  400438:	6301      	str	r1, [r0, #48]	; 0x30
  40043a:	e000      	b.n	40043e <pio_set_output+0x1e>
	} else {
		p_pio->PIO_CODR = ul_mask;
  40043c:	6341      	str	r1, [r0, #52]	; 0x34
	}

	/* Configure pin(s) as output(s) */
	p_pio->PIO_OER = ul_mask;
  40043e:	6101      	str	r1, [r0, #16]
	p_pio->PIO_PER = ul_mask;
  400440:	6001      	str	r1, [r0, #0]
}
  400442:	f85d 4b04 	ldr.w	r4, [sp], #4
  400446:	4770      	bx	lr

00400448 <pio_get_interrupt_status>:
 *
 * \return The interrupt status mask value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
  400448:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
  40044a:	4770      	bx	lr

0040044c <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
  40044c:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
  40044e:	4770      	bx	lr

00400450 <pio_configure_pin>:
 * \param ul_flags Pins attributes.
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
  400450:	b570      	push	{r4, r5, r6, lr}
  400452:	b082      	sub	sp, #8
  400454:	460d      	mov	r5, r1
		p_pio = PIOC;
	} else {
		p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
	}
#else
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
  400456:	0943      	lsrs	r3, r0, #5
  400458:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  40045c:	f203 7307 	addw	r3, r3, #1799	; 0x707
  400460:	025c      	lsls	r4, r3, #9
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
	Pio *p_pio = pio_get_pin_group(ul_pin);

	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
  400462:	f001 43f0 	and.w	r3, r1, #2013265920	; 0x78000000
  400466:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
  40046a:	d047      	beq.n	4004fc <pio_configure_pin+0xac>
  40046c:	d809      	bhi.n	400482 <pio_configure_pin+0x32>
  40046e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
  400472:	d021      	beq.n	4004b8 <pio_configure_pin+0x68>
  400474:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
  400478:	d02f      	beq.n	4004da <pio_configure_pin+0x8a>
  40047a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
  40047e:	d16f      	bne.n	400560 <pio_configure_pin+0x110>
  400480:	e009      	b.n	400496 <pio_configure_pin+0x46>
  400482:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
  400486:	d055      	beq.n	400534 <pio_configure_pin+0xe4>
  400488:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
  40048c:	d052      	beq.n	400534 <pio_configure_pin+0xe4>
  40048e:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
  400492:	d044      	beq.n	40051e <pio_configure_pin+0xce>
  400494:	e064      	b.n	400560 <pio_configure_pin+0x110>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
  400496:	f000 001f 	and.w	r0, r0, #31
  40049a:	2601      	movs	r6, #1
  40049c:	4086      	lsls	r6, r0
  40049e:	4620      	mov	r0, r4
  4004a0:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  4004a4:	4632      	mov	r2, r6
  4004a6:	4b30      	ldr	r3, [pc, #192]	; (400568 <pio_configure_pin+0x118>)
  4004a8:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  4004aa:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
  4004ae:	bf14      	ite	ne
  4004b0:	6666      	strne	r6, [r4, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
  4004b2:	6626      	streq	r6, [r4, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
  4004b4:	2001      	movs	r0, #1
  4004b6:	e054      	b.n	400562 <pio_configure_pin+0x112>
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
				(ul_flags & PIO_PULLUP));
		break;
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, (1 << (ul_pin & 0x1F)));
  4004b8:	f000 001f 	and.w	r0, r0, #31
  4004bc:	2601      	movs	r6, #1
  4004be:	4086      	lsls	r6, r0
  4004c0:	4620      	mov	r0, r4
  4004c2:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  4004c6:	4632      	mov	r2, r6
  4004c8:	4b27      	ldr	r3, [pc, #156]	; (400568 <pio_configure_pin+0x118>)
  4004ca:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  4004cc:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
  4004d0:	bf14      	ite	ne
  4004d2:	6666      	strne	r6, [r4, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
  4004d4:	6626      	streq	r6, [r4, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
  4004d6:	2001      	movs	r0, #1
  4004d8:	e043      	b.n	400562 <pio_configure_pin+0x112>
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
				(ul_flags & PIO_PULLUP));
		break;
#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	case PIO_TYPE_PIO_PERIPH_C:
		pio_set_peripheral(p_pio, PIO_PERIPH_C, (1 << (ul_pin & 0x1F)));
  4004da:	f000 001f 	and.w	r0, r0, #31
  4004de:	2601      	movs	r6, #1
  4004e0:	4086      	lsls	r6, r0
  4004e2:	4620      	mov	r0, r4
  4004e4:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  4004e8:	4632      	mov	r2, r6
  4004ea:	4b1f      	ldr	r3, [pc, #124]	; (400568 <pio_configure_pin+0x118>)
  4004ec:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  4004ee:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
  4004f2:	bf14      	ite	ne
  4004f4:	6666      	strne	r6, [r4, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
  4004f6:	6626      	streq	r6, [r4, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
  4004f8:	2001      	movs	r0, #1
  4004fa:	e032      	b.n	400562 <pio_configure_pin+0x112>
		pio_set_peripheral(p_pio, PIO_PERIPH_C, (1 << (ul_pin & 0x1F)));
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
				(ul_flags & PIO_PULLUP));
		break;
	case PIO_TYPE_PIO_PERIPH_D:
		pio_set_peripheral(p_pio, PIO_PERIPH_D, (1 << (ul_pin & 0x1F)));
  4004fc:	f000 001f 	and.w	r0, r0, #31
  400500:	2601      	movs	r6, #1
  400502:	4086      	lsls	r6, r0
  400504:	4620      	mov	r0, r4
  400506:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
  40050a:	4632      	mov	r2, r6
  40050c:	4b16      	ldr	r3, [pc, #88]	; (400568 <pio_configure_pin+0x118>)
  40050e:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  400510:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
  400514:	bf14      	ite	ne
  400516:	6666      	strne	r6, [r4, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
  400518:	6626      	streq	r6, [r4, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
  40051a:	2001      	movs	r0, #1
  40051c:	e021      	b.n	400562 <pio_configure_pin+0x112>
				(ul_flags & PIO_PULLUP));
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
  40051e:	f000 031f 	and.w	r3, r0, #31
  400522:	2601      	movs	r6, #1
  400524:	4620      	mov	r0, r4
  400526:	fa06 f103 	lsl.w	r1, r6, r3
  40052a:	462a      	mov	r2, r5
  40052c:	4b0f      	ldr	r3, [pc, #60]	; (40056c <pio_configure_pin+0x11c>)
  40052e:	4798      	blx	r3

	default:
		return 0;
	}

	return 1;
  400530:	4630      	mov	r0, r6
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;
  400532:	e016      	b.n	400562 <pio_configure_pin+0x112>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
  400534:	f000 031f 	and.w	r3, r0, #31
  400538:	2601      	movs	r6, #1
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
  40053a:	f005 5260 	and.w	r2, r5, #939524096	; 0x38000000
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
  40053e:	ea05 0106 	and.w	r1, r5, r6
  400542:	9100      	str	r1, [sp, #0]
  400544:	4620      	mov	r0, r4
  400546:	fa06 f103 	lsl.w	r1, r6, r3
  40054a:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
  40054e:	bf14      	ite	ne
  400550:	2200      	movne	r2, #0
  400552:	2201      	moveq	r2, #1
  400554:	f3c5 0380 	ubfx	r3, r5, #2, #1
  400558:	4c05      	ldr	r4, [pc, #20]	; (400570 <pio_configure_pin+0x120>)
  40055a:	47a0      	blx	r4

	default:
		return 0;
	}

	return 1;
  40055c:	4630      	mov	r0, r6
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
		break;
  40055e:	e000      	b.n	400562 <pio_configure_pin+0x112>

	default:
		return 0;
  400560:	2000      	movs	r0, #0
	}

	return 1;
}
  400562:	b002      	add	sp, #8
  400564:	bd70      	pop	{r4, r5, r6, pc}
  400566:	bf00      	nop
  400568:	00400359 	.word	0x00400359
  40056c:	004003ed 	.word	0x004003ed
  400570:	00400421 	.word	0x00400421

00400574 <pio_configure_pin_group>:
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin_group(Pio *p_pio,
		uint32_t ul_mask, const uint32_t ul_flags)
{
  400574:	b570      	push	{r4, r5, r6, lr}
  400576:	b082      	sub	sp, #8
  400578:	4606      	mov	r6, r0
  40057a:	460d      	mov	r5, r1
  40057c:	4614      	mov	r4, r2
	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
  40057e:	f002 43f0 	and.w	r3, r2, #2013265920	; 0x78000000
  400582:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
  400586:	d038      	beq.n	4005fa <pio_configure_pin_group+0x86>
  400588:	d809      	bhi.n	40059e <pio_configure_pin_group+0x2a>
  40058a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
  40058e:	d01c      	beq.n	4005ca <pio_configure_pin_group+0x56>
  400590:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
  400594:	d025      	beq.n	4005e2 <pio_configure_pin_group+0x6e>
  400596:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
  40059a:	d150      	bne.n	40063e <pio_configure_pin_group+0xca>
  40059c:	e009      	b.n	4005b2 <pio_configure_pin_group+0x3e>
  40059e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
  4005a2:	d03a      	beq.n	40061a <pio_configure_pin_group+0xa6>
  4005a4:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
  4005a8:	d037      	beq.n	40061a <pio_configure_pin_group+0xa6>
  4005aa:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
  4005ae:	d030      	beq.n	400612 <pio_configure_pin_group+0x9e>
  4005b0:	e045      	b.n	40063e <pio_configure_pin_group+0xca>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, ul_mask);
  4005b2:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  4005b6:	462a      	mov	r2, r5
  4005b8:	4b22      	ldr	r3, [pc, #136]	; (400644 <pio_configure_pin_group+0xd0>)
  4005ba:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  4005bc:	f014 0f01 	tst.w	r4, #1
		p_pio->PIO_PUER = ul_mask;
  4005c0:	bf14      	ite	ne
  4005c2:	6675      	strne	r5, [r6, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
  4005c4:	6635      	streq	r5, [r6, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
  4005c6:	2001      	movs	r0, #1
  4005c8:	e03a      	b.n	400640 <pio_configure_pin_group+0xcc>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, ul_mask);
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, ul_mask);
  4005ca:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  4005ce:	462a      	mov	r2, r5
  4005d0:	4b1c      	ldr	r3, [pc, #112]	; (400644 <pio_configure_pin_group+0xd0>)
  4005d2:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  4005d4:	f014 0f01 	tst.w	r4, #1
		p_pio->PIO_PUER = ul_mask;
  4005d8:	bf14      	ite	ne
  4005da:	6675      	strne	r5, [r6, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
  4005dc:	6635      	streq	r5, [r6, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
  4005de:	2001      	movs	r0, #1
  4005e0:	e02e      	b.n	400640 <pio_configure_pin_group+0xcc>
		pio_set_peripheral(p_pio, PIO_PERIPH_B, ul_mask);
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	case PIO_TYPE_PIO_PERIPH_C:
		pio_set_peripheral(p_pio, PIO_PERIPH_C, ul_mask);
  4005e2:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  4005e6:	462a      	mov	r2, r5
  4005e8:	4b16      	ldr	r3, [pc, #88]	; (400644 <pio_configure_pin_group+0xd0>)
  4005ea:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  4005ec:	f014 0f01 	tst.w	r4, #1
		p_pio->PIO_PUER = ul_mask;
  4005f0:	bf14      	ite	ne
  4005f2:	6675      	strne	r5, [r6, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
  4005f4:	6635      	streq	r5, [r6, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
  4005f6:	2001      	movs	r0, #1
  4005f8:	e022      	b.n	400640 <pio_configure_pin_group+0xcc>
	case PIO_TYPE_PIO_PERIPH_C:
		pio_set_peripheral(p_pio, PIO_PERIPH_C, ul_mask);
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
	case PIO_TYPE_PIO_PERIPH_D:
		pio_set_peripheral(p_pio, PIO_PERIPH_D, ul_mask);
  4005fa:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
  4005fe:	462a      	mov	r2, r5
  400600:	4b10      	ldr	r3, [pc, #64]	; (400644 <pio_configure_pin_group+0xd0>)
  400602:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  400604:	f014 0f01 	tst.w	r4, #1
		p_pio->PIO_PUER = ul_mask;
  400608:	bf14      	ite	ne
  40060a:	6675      	strne	r5, [r6, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
  40060c:	6635      	streq	r5, [r6, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
  40060e:	2001      	movs	r0, #1
  400610:	e016      	b.n	400640 <pio_configure_pin_group+0xcc>
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, ul_mask, ul_flags);
  400612:	4b0d      	ldr	r3, [pc, #52]	; (400648 <pio_configure_pin_group+0xd4>)
  400614:	4798      	blx	r3

	default:
		return 0;
	}

	return 1;
  400616:	2001      	movs	r0, #1
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, ul_mask, ul_flags);
		break;
  400618:	e012      	b.n	400640 <pio_configure_pin_group+0xcc>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask,
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
  40061a:	f004 5260 	and.w	r2, r4, #939524096	; 0x38000000
		pio_set_input(p_pio, ul_mask, ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask,
  40061e:	f004 0301 	and.w	r3, r4, #1
  400622:	9300      	str	r3, [sp, #0]
  400624:	4630      	mov	r0, r6
  400626:	4629      	mov	r1, r5
  400628:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
  40062c:	bf14      	ite	ne
  40062e:	2200      	movne	r2, #0
  400630:	2201      	moveq	r2, #1
  400632:	f3c4 0380 	ubfx	r3, r4, #2, #1
  400636:	4c05      	ldr	r4, [pc, #20]	; (40064c <pio_configure_pin_group+0xd8>)
  400638:	47a0      	blx	r4

	default:
		return 0;
	}

	return 1;
  40063a:	2001      	movs	r0, #1
		pio_set_output(p_pio, ul_mask,
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
		break;
  40063c:	e000      	b.n	400640 <pio_configure_pin_group+0xcc>

	default:
		return 0;
  40063e:	2000      	movs	r0, #0
	}

	return 1;
}
  400640:	b002      	add	sp, #8
  400642:	bd70      	pop	{r4, r5, r6, pc}
  400644:	00400359 	.word	0x00400359
  400648:	004003ed 	.word	0x004003ed
  40064c:	00400421 	.word	0x00400421

00400650 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
  400650:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  400654:	4681      	mov	r9, r0
  400656:	4688      	mov	r8, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
  400658:	4b12      	ldr	r3, [pc, #72]	; (4006a4 <pio_handler_process+0x54>)
  40065a:	4798      	blx	r3
  40065c:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
  40065e:	4648      	mov	r0, r9
  400660:	4b11      	ldr	r3, [pc, #68]	; (4006a8 <pio_handler_process+0x58>)
  400662:	4798      	blx	r3

	/* Check pending events */
	if (status != 0) {
  400664:	4005      	ands	r5, r0
  400666:	d013      	beq.n	400690 <pio_handler_process+0x40>
  400668:	4c10      	ldr	r4, [pc, #64]	; (4006ac <pio_handler_process+0x5c>)
  40066a:	f104 0660 	add.w	r6, r4, #96	; 0x60
		/* Find triggering source */
		i = 0;
		while (status != 0) {
			/* Source is configured on the same controller */
			if (gs_interrupt_sources[i].id == ul_id) {
  40066e:	6823      	ldr	r3, [r4, #0]
  400670:	4543      	cmp	r3, r8
  400672:	d108      	bne.n	400686 <pio_handler_process+0x36>
				/* Source has PIOs whose statuses have changed */
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  400674:	6861      	ldr	r1, [r4, #4]
  400676:	4229      	tst	r1, r5
  400678:	d005      	beq.n	400686 <pio_handler_process+0x36>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  40067a:	68e3      	ldr	r3, [r4, #12]
  40067c:	4640      	mov	r0, r8
  40067e:	4798      	blx	r3
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
  400680:	6863      	ldr	r3, [r4, #4]
  400682:	ea25 0503 	bic.w	r5, r5, r3
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
  400686:	42b4      	cmp	r4, r6
  400688:	d002      	beq.n	400690 <pio_handler_process+0x40>
  40068a:	3410      	adds	r4, #16

	/* Check pending events */
	if (status != 0) {
		/* Find triggering source */
		i = 0;
		while (status != 0) {
  40068c:	2d00      	cmp	r5, #0
  40068e:	d1ee      	bne.n	40066e <pio_handler_process+0x1e>
		}
	}

	/* Check capture events */
#if (SAM3S || SAM4S || SAM4E)
	if (pio_capture_enable_flag) {
  400690:	4b07      	ldr	r3, [pc, #28]	; (4006b0 <pio_handler_process+0x60>)
  400692:	681b      	ldr	r3, [r3, #0]
  400694:	b123      	cbz	r3, 4006a0 <pio_handler_process+0x50>
		if (pio_capture_handler) {
  400696:	4b07      	ldr	r3, [pc, #28]	; (4006b4 <pio_handler_process+0x64>)
  400698:	681b      	ldr	r3, [r3, #0]
  40069a:	b10b      	cbz	r3, 4006a0 <pio_handler_process+0x50>
			pio_capture_handler(p_pio);
  40069c:	4648      	mov	r0, r9
  40069e:	4798      	blx	r3
  4006a0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  4006a4:	00400449 	.word	0x00400449
  4006a8:	0040044d 	.word	0x0040044d
  4006ac:	2000088c 	.word	0x2000088c
  4006b0:	20000948 	.word	0x20000948
  4006b4:	20000888 	.word	0x20000888

004006b8 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
  4006b8:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
  4006ba:	4802      	ldr	r0, [pc, #8]	; (4006c4 <PIOA_Handler+0xc>)
  4006bc:	210b      	movs	r1, #11
  4006be:	4b02      	ldr	r3, [pc, #8]	; (4006c8 <PIOA_Handler+0x10>)
  4006c0:	4798      	blx	r3
  4006c2:	bd08      	pop	{r3, pc}
  4006c4:	400e0e00 	.word	0x400e0e00
  4006c8:	00400651 	.word	0x00400651

004006cc <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
  4006cc:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
  4006ce:	4802      	ldr	r0, [pc, #8]	; (4006d8 <PIOB_Handler+0xc>)
  4006d0:	210c      	movs	r1, #12
  4006d2:	4b02      	ldr	r3, [pc, #8]	; (4006dc <PIOB_Handler+0x10>)
  4006d4:	4798      	blx	r3
  4006d6:	bd08      	pop	{r3, pc}
  4006d8:	400e1000 	.word	0x400e1000
  4006dc:	00400651 	.word	0x00400651

004006e0 <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
  4006e0:	b508      	push	{r3, lr}
	pio_handler_process(PIOC, ID_PIOC);
  4006e2:	4802      	ldr	r0, [pc, #8]	; (4006ec <PIOC_Handler+0xc>)
  4006e4:	210d      	movs	r1, #13
  4006e6:	4b02      	ldr	r3, [pc, #8]	; (4006f0 <PIOC_Handler+0x10>)
  4006e8:	4798      	blx	r3
  4006ea:	bd08      	pop	{r3, pc}
  4006ec:	400e1200 	.word	0x400e1200
  4006f0:	00400651 	.word	0x00400651

004006f4 <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
  4006f4:	4a18      	ldr	r2, [pc, #96]	; (400758 <pmc_switch_mck_to_pllack+0x64>)
  4006f6:	6b13      	ldr	r3, [r2, #48]	; 0x30
  4006f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  4006fc:	4318      	orrs	r0, r3
  4006fe:	6310      	str	r0, [r2, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  400700:	6e93      	ldr	r3, [r2, #104]	; 0x68
  400702:	f013 0f08 	tst.w	r3, #8
  400706:	d003      	beq.n	400710 <pmc_switch_mck_to_pllack+0x1c>
  400708:	e009      	b.n	40071e <pmc_switch_mck_to_pllack+0x2a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  40070a:	3b01      	subs	r3, #1
  40070c:	d103      	bne.n	400716 <pmc_switch_mck_to_pllack+0x22>
  40070e:	e01e      	b.n	40074e <pmc_switch_mck_to_pllack+0x5a>
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  400710:	f44f 6300 	mov.w	r3, #2048	; 0x800
  400714:	4910      	ldr	r1, [pc, #64]	; (400758 <pmc_switch_mck_to_pllack+0x64>)
  400716:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  400718:	f012 0f08 	tst.w	r2, #8
  40071c:	d0f5      	beq.n	40070a <pmc_switch_mck_to_pllack+0x16>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
  40071e:	4a0e      	ldr	r2, [pc, #56]	; (400758 <pmc_switch_mck_to_pllack+0x64>)
  400720:	6b13      	ldr	r3, [r2, #48]	; 0x30
  400722:	f023 0303 	bic.w	r3, r3, #3
  400726:	f043 0302 	orr.w	r3, r3, #2
  40072a:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  40072c:	6e90      	ldr	r0, [r2, #104]	; 0x68
  40072e:	f010 0008 	ands.w	r0, r0, #8
  400732:	d004      	beq.n	40073e <pmc_switch_mck_to_pllack+0x4a>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	return 0;
  400734:	2000      	movs	r0, #0
  400736:	4770      	bx	lr
	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
  400738:	3b01      	subs	r3, #1
  40073a:	d103      	bne.n	400744 <pmc_switch_mck_to_pllack+0x50>
  40073c:	e009      	b.n	400752 <pmc_switch_mck_to_pllack+0x5e>
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  40073e:	f44f 6300 	mov.w	r3, #2048	; 0x800
  400742:	4905      	ldr	r1, [pc, #20]	; (400758 <pmc_switch_mck_to_pllack+0x64>)
  400744:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  400746:	f012 0f08 	tst.w	r2, #8
  40074a:	d0f5      	beq.n	400738 <pmc_switch_mck_to_pllack+0x44>
  40074c:	4770      	bx	lr

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
			return 1;
  40074e:	2001      	movs	r0, #1
  400750:	4770      	bx	lr
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
			return 1;
  400752:	2001      	movs	r0, #1
		}
	}

	return 0;
}
  400754:	4770      	bx	lr
  400756:	bf00      	nop
  400758:	400e0400 	.word	0x400e0400

0040075c <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
  40075c:	b138      	cbz	r0, 40076e <pmc_switch_mainck_to_xtal+0x12>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  40075e:	4911      	ldr	r1, [pc, #68]	; (4007a4 <pmc_switch_mainck_to_xtal+0x48>)
  400760:	6a0b      	ldr	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  400762:	4a11      	ldr	r2, [pc, #68]	; (4007a8 <pmc_switch_mainck_to_xtal+0x4c>)
  400764:	401a      	ands	r2, r3
  400766:	4b11      	ldr	r3, [pc, #68]	; (4007ac <pmc_switch_mainck_to_xtal+0x50>)
  400768:	4313      	orrs	r3, r2
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  40076a:	620b      	str	r3, [r1, #32]
  40076c:	4770      	bx	lr
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  40076e:	4a0d      	ldr	r2, [pc, #52]	; (4007a4 <pmc_switch_mainck_to_xtal+0x48>)
  400770:	6a13      	ldr	r3, [r2, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  400772:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
  400776:	f023 0303 	bic.w	r3, r3, #3
  40077a:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  40077e:	f043 0301 	orr.w	r3, r3, #1
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
  400782:	0209      	lsls	r1, r1, #8
  400784:	b289      	uxth	r1, r1
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  400786:	430b      	orrs	r3, r1
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  400788:	6213      	str	r3, [r2, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  40078a:	6e93      	ldr	r3, [r2, #104]	; 0x68
  40078c:	f013 0f01 	tst.w	r3, #1
  400790:	d0fb      	beq.n	40078a <pmc_switch_mainck_to_xtal+0x2e>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
  400792:	4a04      	ldr	r2, [pc, #16]	; (4007a4 <pmc_switch_mainck_to_xtal+0x48>)
  400794:	6a13      	ldr	r3, [r2, #32]
  400796:	f043 739b 	orr.w	r3, r3, #20316160	; 0x1360000
  40079a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
  40079e:	6213      	str	r3, [r2, #32]
  4007a0:	4770      	bx	lr
  4007a2:	bf00      	nop
  4007a4:	400e0400 	.word	0x400e0400
  4007a8:	fec8fffc 	.word	0xfec8fffc
  4007ac:	01370002 	.word	0x01370002

004007b0 <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
  4007b0:	4b02      	ldr	r3, [pc, #8]	; (4007bc <pmc_osc_is_ready_mainck+0xc>)
  4007b2:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  4007b4:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
  4007b8:	4770      	bx	lr
  4007ba:	bf00      	nop
  4007bc:	400e0400 	.word	0x400e0400

004007c0 <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
  4007c0:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  4007c4:	4b01      	ldr	r3, [pc, #4]	; (4007cc <pmc_disable_pllack+0xc>)
  4007c6:	629a      	str	r2, [r3, #40]	; 0x28
  4007c8:	4770      	bx	lr
  4007ca:	bf00      	nop
  4007cc:	400e0400 	.word	0x400e0400

004007d0 <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
  4007d0:	4b02      	ldr	r3, [pc, #8]	; (4007dc <pmc_is_locked_pllack+0xc>)
  4007d2:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  4007d4:	f000 0002 	and.w	r0, r0, #2
  4007d8:	4770      	bx	lr
  4007da:	bf00      	nop
  4007dc:	400e0400 	.word	0x400e0400

004007e0 <pmc_enable_periph_clk>:
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
  4007e0:	2822      	cmp	r0, #34	; 0x22
  4007e2:	d81e      	bhi.n	400822 <pmc_enable_periph_clk+0x42>
		return 1;
	}

	if (ul_id < 32) {
  4007e4:	281f      	cmp	r0, #31
  4007e6:	d80c      	bhi.n	400802 <pmc_enable_periph_clk+0x22>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
  4007e8:	4b11      	ldr	r3, [pc, #68]	; (400830 <pmc_enable_periph_clk+0x50>)
  4007ea:	699a      	ldr	r2, [r3, #24]
  4007ec:	2301      	movs	r3, #1
  4007ee:	4083      	lsls	r3, r0
  4007f0:	401a      	ands	r2, r3
  4007f2:	4293      	cmp	r3, r2
  4007f4:	d017      	beq.n	400826 <pmc_enable_periph_clk+0x46>
			PMC->PMC_PCER0 = 1 << ul_id;
  4007f6:	2301      	movs	r3, #1
  4007f8:	4083      	lsls	r3, r0
  4007fa:	4a0d      	ldr	r2, [pc, #52]	; (400830 <pmc_enable_periph_clk+0x50>)
  4007fc:	6113      	str	r3, [r2, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
  4007fe:	2000      	movs	r0, #0
  400800:	4770      	bx	lr
			PMC->PMC_PCER0 = 1 << ul_id;
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP || SAMG55 || SAMV71 || SAMV70 || SAME70 || SAMS70)
	} else {
		ul_id -= 32;
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
  400802:	4b0b      	ldr	r3, [pc, #44]	; (400830 <pmc_enable_periph_clk+0x50>)
  400804:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
			PMC->PMC_PCER0 = 1 << ul_id;
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP || SAMG55 || SAMV71 || SAMV70 || SAME70 || SAMS70)
	} else {
		ul_id -= 32;
  400808:	3820      	subs	r0, #32
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
  40080a:	2301      	movs	r3, #1
  40080c:	4083      	lsls	r3, r0
  40080e:	401a      	ands	r2, r3
  400810:	4293      	cmp	r3, r2
  400812:	d00a      	beq.n	40082a <pmc_enable_periph_clk+0x4a>
			PMC->PMC_PCER1 = 1 << ul_id;
  400814:	2301      	movs	r3, #1
  400816:	4083      	lsls	r3, r0
  400818:	4a05      	ldr	r2, [pc, #20]	; (400830 <pmc_enable_periph_clk+0x50>)
  40081a:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
		}
#endif
	}

	return 0;
  40081e:	2000      	movs	r0, #0
  400820:	4770      	bx	lr
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
		return 1;
  400822:	2001      	movs	r0, #1
  400824:	4770      	bx	lr
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
  400826:	2000      	movs	r0, #0
  400828:	4770      	bx	lr
  40082a:	2000      	movs	r0, #0
}
  40082c:	4770      	bx	lr
  40082e:	bf00      	nop
  400830:	400e0400 	.word	0x400e0400

00400834 <tc_init>:
 */
void tc_init(
		Tc *p_tc,
		uint32_t ul_channel,
		uint32_t ul_mode)
{
  400834:	b410      	push	{r4}
  400836:	0189      	lsls	r1, r1, #6
  400838:	1843      	adds	r3, r0, r1
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
	tc_channel = p_tc->TC_CHANNEL + ul_channel;

	/*  Disable TC clock. */
	tc_channel->TC_CCR = TC_CCR_CLKDIS;
  40083a:	2402      	movs	r4, #2
  40083c:	5044      	str	r4, [r0, r1]

	/*  Disable interrupts. */
	tc_channel->TC_IDR = 0xFFFFFFFF;
  40083e:	f04f 31ff 	mov.w	r1, #4294967295
  400842:	6299      	str	r1, [r3, #40]	; 0x28

	/*  Clear status register. */
	tc_channel->TC_SR;
  400844:	6a19      	ldr	r1, [r3, #32]

	/*  Set mode. */
	tc_channel->TC_CMR = ul_mode;
  400846:	605a      	str	r2, [r3, #4]
}
  400848:	f85d 4b04 	ldr.w	r4, [sp], #4
  40084c:	4770      	bx	lr
  40084e:	bf00      	nop

00400850 <tc_start>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_CCR = TC_CCR_CLKEN | TC_CCR_SWTRG;
  400850:	0189      	lsls	r1, r1, #6
  400852:	2305      	movs	r3, #5
  400854:	5043      	str	r3, [r0, r1]
  400856:	4770      	bx	lr

00400858 <tc_write_ra>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_RA = ul_value;
  400858:	eb00 1181 	add.w	r1, r0, r1, lsl #6
  40085c:	614a      	str	r2, [r1, #20]
  40085e:	4770      	bx	lr

00400860 <tc_write_rc>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_RC = ul_value;
  400860:	eb00 1181 	add.w	r1, r0, r1, lsl #6
  400864:	61ca      	str	r2, [r1, #28]
  400866:	4770      	bx	lr

00400868 <uart_init>:
 *
 * \retval 0 Success.
 * \retval 1 Bad baud rate generator value.
 */
uint32_t uart_init(Uart *p_uart, const sam_uart_opt_t *p_uart_opt)
{
  400868:	b410      	push	{r4}
	uint32_t cd = 0;

	/* Reset and disable receiver & transmitter */
	p_uart->UART_CR = UART_CR_RSTRX | UART_CR_RSTTX
  40086a:	23ac      	movs	r3, #172	; 0xac
  40086c:	6003      	str	r3, [r0, #0]
			| UART_CR_RXDIS | UART_CR_TXDIS;

	/* Check and configure baudrate */
	/* Asynchronous, no oversampling */
	cd = (p_uart_opt->ul_mck / p_uart_opt->ul_baudrate) / UART_MCK_DIV;
  40086e:	680b      	ldr	r3, [r1, #0]
  400870:	684a      	ldr	r2, [r1, #4]
  400872:	fbb3 f3f2 	udiv	r3, r3, r2
  400876:	091b      	lsrs	r3, r3, #4
	if (cd < UART_MCK_DIV_MIN_FACTOR || cd > UART_MCK_DIV_MAX_FACTOR)
  400878:	1e5c      	subs	r4, r3, #1
  40087a:	f64f 72fe 	movw	r2, #65534	; 0xfffe
  40087e:	4294      	cmp	r4, r2
  400880:	d80a      	bhi.n	400898 <uart_init+0x30>
		return 1;

	p_uart->UART_BRGR = cd;
  400882:	6203      	str	r3, [r0, #32]
	/* Configure mode */
	p_uart->UART_MR = p_uart_opt->ul_mode;
  400884:	688b      	ldr	r3, [r1, #8]
  400886:	6043      	str	r3, [r0, #4]

#if (!SAMV71 && !SAMV70 && !SAME70 && !SAMS70)
	/* Disable PDC channel */
	p_uart->UART_PTCR = UART_PTCR_RXTDIS | UART_PTCR_TXTDIS;
  400888:	f240 2302 	movw	r3, #514	; 0x202
  40088c:	f8c0 3120 	str.w	r3, [r0, #288]	; 0x120
#endif

	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;
  400890:	2350      	movs	r3, #80	; 0x50
  400892:	6003      	str	r3, [r0, #0]

	return 0;
  400894:	2000      	movs	r0, #0
  400896:	e000      	b.n	40089a <uart_init+0x32>

	/* Check and configure baudrate */
	/* Asynchronous, no oversampling */
	cd = (p_uart_opt->ul_mck / p_uart_opt->ul_baudrate) / UART_MCK_DIV;
	if (cd < UART_MCK_DIV_MIN_FACTOR || cd > UART_MCK_DIV_MAX_FACTOR)
		return 1;
  400898:	2001      	movs	r0, #1

	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;

	return 0;
}
  40089a:	f85d 4b04 	ldr.w	r4, [sp], #4
  40089e:	4770      	bx	lr

004008a0 <uart_write>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
  4008a0:	6943      	ldr	r3, [r0, #20]
  4008a2:	f013 0f02 	tst.w	r3, #2
		return 1;

	/* Send character */
	p_uart->UART_THR = uc_data;
  4008a6:	bf1a      	itte	ne
  4008a8:	61c1      	strne	r1, [r0, #28]
	return 0;
  4008aa:	2000      	movne	r0, #0
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
		return 1;
  4008ac:	2001      	moveq	r0, #1

	/* Send character */
	p_uart->UART_THR = uc_data;
	return 0;
}
  4008ae:	4770      	bx	lr

004008b0 <uart_read>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
  4008b0:	6943      	ldr	r3, [r0, #20]
  4008b2:	f013 0f01 	tst.w	r3, #1
		return 1;

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
  4008b6:	bf1d      	ittte	ne
  4008b8:	6983      	ldrne	r3, [r0, #24]
  4008ba:	700b      	strbne	r3, [r1, #0]
	return 0;
  4008bc:	2000      	movne	r0, #0
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
		return 1;
  4008be:	2001      	moveq	r0, #1

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
	return 0;
}
  4008c0:	4770      	bx	lr
  4008c2:	bf00      	nop

004008c4 <usart_write>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
  4008c4:	6943      	ldr	r3, [r0, #20]
  4008c6:	f013 0f02 	tst.w	r3, #2
		return 1;
	}

	p_usart->US_THR = US_THR_TXCHR(c);
  4008ca:	bf1d      	ittte	ne
  4008cc:	f3c1 0108 	ubfxne	r1, r1, #0, #9
  4008d0:	61c1      	strne	r1, [r0, #28]
	return 0;
  4008d2:	2000      	movne	r0, #0
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
		return 1;
  4008d4:	2001      	moveq	r0, #1
	}

	p_usart->US_THR = US_THR_TXCHR(c);
	return 0;
}
  4008d6:	4770      	bx	lr

004008d8 <usart_read>:
 * \retval 0 on success.
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
  4008d8:	6943      	ldr	r3, [r0, #20]
  4008da:	f013 0f01 	tst.w	r3, #1
  4008de:	d005      	beq.n	4008ec <usart_read+0x14>
		return 1;
	}

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
  4008e0:	6983      	ldr	r3, [r0, #24]
  4008e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
  4008e6:	600b      	str	r3, [r1, #0]

	return 0;
  4008e8:	2000      	movs	r0, #0
  4008ea:	4770      	bx	lr
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
		return 1;
  4008ec:	2001      	movs	r0, #1

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;

	return 0;
}
  4008ee:	4770      	bx	lr

004008f0 <Dummy_Handler>:
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
	while (1) {
	}
  4008f0:	e7fe      	b.n	4008f0 <Dummy_Handler>
  4008f2:	bf00      	nop

004008f4 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
  4008f4:	b508      	push	{r3, lr}

	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc > pDest) {
  4008f6:	4b20      	ldr	r3, [pc, #128]	; (400978 <Reset_Handler+0x84>)
  4008f8:	4a20      	ldr	r2, [pc, #128]	; (40097c <Reset_Handler+0x88>)
  4008fa:	429a      	cmp	r2, r3
  4008fc:	d913      	bls.n	400926 <Reset_Handler+0x32>
		for (; pDest < &_erelocate;) {
  4008fe:	4b20      	ldr	r3, [pc, #128]	; (400980 <Reset_Handler+0x8c>)
  400900:	4a1d      	ldr	r2, [pc, #116]	; (400978 <Reset_Handler+0x84>)
  400902:	429a      	cmp	r2, r3
  400904:	d21f      	bcs.n	400946 <Reset_Handler+0x52>
  400906:	4611      	mov	r1, r2
  400908:	3204      	adds	r2, #4
  40090a:	3303      	adds	r3, #3
  40090c:	1a9b      	subs	r3, r3, r2
  40090e:	f023 0303 	bic.w	r3, r3, #3
  400912:	3304      	adds	r3, #4
  400914:	4a19      	ldr	r2, [pc, #100]	; (40097c <Reset_Handler+0x88>)
  400916:	4413      	add	r3, r2
			*pDest++ = *pSrc++;
  400918:	f852 0b04 	ldr.w	r0, [r2], #4
  40091c:	f841 0b04 	str.w	r0, [r1], #4
	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc > pDest) {
		for (; pDest < &_erelocate;) {
  400920:	429a      	cmp	r2, r3
  400922:	d1f9      	bne.n	400918 <Reset_Handler+0x24>
  400924:	e00f      	b.n	400946 <Reset_Handler+0x52>
			*pDest++ = *pSrc++;
		}
	} else if (pSrc < pDest) {
  400926:	4b14      	ldr	r3, [pc, #80]	; (400978 <Reset_Handler+0x84>)
  400928:	4a14      	ldr	r2, [pc, #80]	; (40097c <Reset_Handler+0x88>)
  40092a:	429a      	cmp	r2, r3
  40092c:	d20b      	bcs.n	400946 <Reset_Handler+0x52>
		uint32_t nb_bytes = (uint32_t)&_erelocate - (uint32_t)&_srelocate;
  40092e:	4b14      	ldr	r3, [pc, #80]	; (400980 <Reset_Handler+0x8c>)
  400930:	4a11      	ldr	r2, [pc, #68]	; (400978 <Reset_Handler+0x84>)
  400932:	1a9a      	subs	r2, r3, r2
  400934:	4813      	ldr	r0, [pc, #76]	; (400984 <Reset_Handler+0x90>)
		pSrc = (uint32_t*)((uint32_t)pSrc + nb_bytes) - 1;
  400936:	1881      	adds	r1, r0, r2
		pDest = (uint32_t*)((uint32_t)pDest + nb_bytes) - 1;
		for (;nb_bytes;nb_bytes -= 4) {
  400938:	b12a      	cbz	r2, 400946 <Reset_Handler+0x52>
			*pDest-- = *pSrc--;
  40093a:	f851 2904 	ldr.w	r2, [r1], #-4
  40093e:	f843 2d04 	str.w	r2, [r3, #-4]!
		}
	} else if (pSrc < pDest) {
		uint32_t nb_bytes = (uint32_t)&_erelocate - (uint32_t)&_srelocate;
		pSrc = (uint32_t*)((uint32_t)pSrc + nb_bytes) - 1;
		pDest = (uint32_t*)((uint32_t)pDest + nb_bytes) - 1;
		for (;nb_bytes;nb_bytes -= 4) {
  400942:	4281      	cmp	r1, r0
  400944:	d1f9      	bne.n	40093a <Reset_Handler+0x46>

    No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
  400946:	bf00      	nop
		}
	}
	__NOP();

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
  400948:	4b0f      	ldr	r3, [pc, #60]	; (400988 <Reset_Handler+0x94>)
  40094a:	4a10      	ldr	r2, [pc, #64]	; (40098c <Reset_Handler+0x98>)
  40094c:	429a      	cmp	r2, r3
  40094e:	d20b      	bcs.n	400968 <Reset_Handler+0x74>
  400950:	1d13      	adds	r3, r2, #4
  400952:	4a0f      	ldr	r2, [pc, #60]	; (400990 <Reset_Handler+0x9c>)
  400954:	1ad2      	subs	r2, r2, r3
  400956:	f022 0203 	bic.w	r2, r2, #3
  40095a:	441a      	add	r2, r3
  40095c:	3b04      	subs	r3, #4
		*pDest++ = 0;
  40095e:	2100      	movs	r1, #0
  400960:	f843 1b04 	str.w	r1, [r3], #4
		}
	}
	__NOP();

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
  400964:	4293      	cmp	r3, r2
  400966:	d1fb      	bne.n	400960 <Reset_Handler+0x6c>
		*pDest++ = 0;
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) & _sfixed;
	SCB->VTOR = ((uint32_t) pSrc);
  400968:	4b0a      	ldr	r3, [pc, #40]	; (400994 <Reset_Handler+0xa0>)
  40096a:	4a0b      	ldr	r2, [pc, #44]	; (400998 <Reset_Handler+0xa4>)
  40096c:	609a      	str	r2, [r3, #8]

	/* Initialize the C library */
	__libc_init_array();
  40096e:	4b0b      	ldr	r3, [pc, #44]	; (40099c <Reset_Handler+0xa8>)
  400970:	4798      	blx	r3

	/* Branch to main function */
	main();
  400972:	4b0b      	ldr	r3, [pc, #44]	; (4009a0 <Reset_Handler+0xac>)
  400974:	4798      	blx	r3

	/* Infinite loop */
	while (1);
  400976:	e7fe      	b.n	400976 <Reset_Handler+0x82>
  400978:	20000000 	.word	0x20000000
  40097c:	004056d4 	.word	0x004056d4
  400980:	2000086c 	.word	0x2000086c
  400984:	004056d0 	.word	0x004056d0
  400988:	20001fb4 	.word	0x20001fb4
  40098c:	2000086c 	.word	0x2000086c
  400990:	20001fb7 	.word	0x20001fb7
  400994:	e000ed00 	.word	0xe000ed00
  400998:	00400000 	.word	0x00400000
  40099c:	00400f29 	.word	0x00400f29
  4009a0:	00400cf1 	.word	0x00400cf1

004009a4 <SystemCoreClockUpdate>:
 * \brief Get Core Clock Frequency.
 */
void SystemCoreClockUpdate( void )
{
	/* Determine clock frequency according to clock register values */
	switch ( PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk ) {
  4009a4:	4b3d      	ldr	r3, [pc, #244]	; (400a9c <SystemCoreClockUpdate+0xf8>)
  4009a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4009a8:	f003 0303 	and.w	r3, r3, #3
  4009ac:	2b03      	cmp	r3, #3
  4009ae:	d85d      	bhi.n	400a6c <SystemCoreClockUpdate+0xc8>
  4009b0:	e8df f003 	tbb	[pc, r3]
  4009b4:	2b2b0e02 	.word	0x2b2b0e02
	case PMC_MCKR_CSS_SLOW_CLK: /* Slow clock */
			if ( SUPC->SUPC_SR & SUPC_SR_OSCSEL ) {
  4009b8:	4b39      	ldr	r3, [pc, #228]	; (400aa0 <SystemCoreClockUpdate+0xfc>)
  4009ba:	695b      	ldr	r3, [r3, #20]
  4009bc:	f013 0f80 	tst.w	r3, #128	; 0x80
				SystemCoreClock = CHIP_FREQ_XTAL_32K;
  4009c0:	bf14      	ite	ne
  4009c2:	f44f 4200 	movne.w	r2, #32768	; 0x8000
			} else {
				SystemCoreClock = CHIP_FREQ_SLCK_RC;
  4009c6:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
  4009ca:	4b36      	ldr	r3, [pc, #216]	; (400aa4 <SystemCoreClockUpdate+0x100>)
  4009cc:	601a      	str	r2, [r3, #0]
  4009ce:	e04d      	b.n	400a6c <SystemCoreClockUpdate+0xc8>
			}
		break;
		
	case PMC_MCKR_CSS_MAIN_CLK: /* Main clock */
		if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL ) {
  4009d0:	4b32      	ldr	r3, [pc, #200]	; (400a9c <SystemCoreClockUpdate+0xf8>)
  4009d2:	6a1b      	ldr	r3, [r3, #32]
  4009d4:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  4009d8:	d003      	beq.n	4009e2 <SystemCoreClockUpdate+0x3e>
			SystemCoreClock = CHIP_FREQ_XTAL;
  4009da:	4a33      	ldr	r2, [pc, #204]	; (400aa8 <SystemCoreClockUpdate+0x104>)
  4009dc:	4b31      	ldr	r3, [pc, #196]	; (400aa4 <SystemCoreClockUpdate+0x100>)
  4009de:	601a      	str	r2, [r3, #0]
  4009e0:	e044      	b.n	400a6c <SystemCoreClockUpdate+0xc8>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  4009e2:	4a32      	ldr	r2, [pc, #200]	; (400aac <SystemCoreClockUpdate+0x108>)
  4009e4:	4b2f      	ldr	r3, [pc, #188]	; (400aa4 <SystemCoreClockUpdate+0x100>)
  4009e6:	601a      	str	r2, [r3, #0]
			
			switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk ) {
  4009e8:	4b2c      	ldr	r3, [pc, #176]	; (400a9c <SystemCoreClockUpdate+0xf8>)
  4009ea:	6a1b      	ldr	r3, [r3, #32]
  4009ec:	f003 0370 	and.w	r3, r3, #112	; 0x70
  4009f0:	2b10      	cmp	r3, #16
  4009f2:	d002      	beq.n	4009fa <SystemCoreClockUpdate+0x56>
  4009f4:	2b20      	cmp	r3, #32
  4009f6:	d004      	beq.n	400a02 <SystemCoreClockUpdate+0x5e>
  4009f8:	e038      	b.n	400a6c <SystemCoreClockUpdate+0xc8>
			case CKGR_MOR_MOSCRCF_4_MHz:
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
			break;
			
			case CKGR_MOR_MOSCRCF_8_MHz:
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_8MHZ;
  4009fa:	4a2d      	ldr	r2, [pc, #180]	; (400ab0 <SystemCoreClockUpdate+0x10c>)
  4009fc:	4b29      	ldr	r3, [pc, #164]	; (400aa4 <SystemCoreClockUpdate+0x100>)
  4009fe:	601a      	str	r2, [r3, #0]
			break;
  400a00:	e034      	b.n	400a6c <SystemCoreClockUpdate+0xc8>
			
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_12MHZ;
  400a02:	4a29      	ldr	r2, [pc, #164]	; (400aa8 <SystemCoreClockUpdate+0x104>)
  400a04:	4b27      	ldr	r3, [pc, #156]	; (400aa4 <SystemCoreClockUpdate+0x100>)
  400a06:	601a      	str	r2, [r3, #0]
			break;
  400a08:	e030      	b.n	400a6c <SystemCoreClockUpdate+0xc8>
		}
		break;
		
	case PMC_MCKR_CSS_PLLA_CLK:	/* PLLA clock */
	case PMC_MCKR_CSS_PLLB_CLK:	/* PLLB clock */
			if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL ) {
  400a0a:	4b24      	ldr	r3, [pc, #144]	; (400a9c <SystemCoreClockUpdate+0xf8>)
  400a0c:	6a1b      	ldr	r3, [r3, #32]
  400a0e:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  400a12:	d003      	beq.n	400a1c <SystemCoreClockUpdate+0x78>
				SystemCoreClock = CHIP_FREQ_XTAL;
  400a14:	4a24      	ldr	r2, [pc, #144]	; (400aa8 <SystemCoreClockUpdate+0x104>)
  400a16:	4b23      	ldr	r3, [pc, #140]	; (400aa4 <SystemCoreClockUpdate+0x100>)
  400a18:	601a      	str	r2, [r3, #0]
  400a1a:	e012      	b.n	400a42 <SystemCoreClockUpdate+0x9e>
			} else {
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  400a1c:	4a23      	ldr	r2, [pc, #140]	; (400aac <SystemCoreClockUpdate+0x108>)
  400a1e:	4b21      	ldr	r3, [pc, #132]	; (400aa4 <SystemCoreClockUpdate+0x100>)
  400a20:	601a      	str	r2, [r3, #0]
				
				switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk ) {
  400a22:	4b1e      	ldr	r3, [pc, #120]	; (400a9c <SystemCoreClockUpdate+0xf8>)
  400a24:	6a1b      	ldr	r3, [r3, #32]
  400a26:	f003 0370 	and.w	r3, r3, #112	; 0x70
  400a2a:	2b10      	cmp	r3, #16
  400a2c:	d002      	beq.n	400a34 <SystemCoreClockUpdate+0x90>
  400a2e:	2b20      	cmp	r3, #32
  400a30:	d004      	beq.n	400a3c <SystemCoreClockUpdate+0x98>
  400a32:	e006      	b.n	400a42 <SystemCoreClockUpdate+0x9e>
				case CKGR_MOR_MOSCRCF_4_MHz:
					SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
					break;
				
				case CKGR_MOR_MOSCRCF_8_MHz:
					SystemCoreClock = CHIP_FREQ_MAINCK_RC_8MHZ;
  400a34:	4a1e      	ldr	r2, [pc, #120]	; (400ab0 <SystemCoreClockUpdate+0x10c>)
  400a36:	4b1b      	ldr	r3, [pc, #108]	; (400aa4 <SystemCoreClockUpdate+0x100>)
  400a38:	601a      	str	r2, [r3, #0]
					break;
  400a3a:	e002      	b.n	400a42 <SystemCoreClockUpdate+0x9e>
				
				case CKGR_MOR_MOSCRCF_12_MHz:
					SystemCoreClock = CHIP_FREQ_MAINCK_RC_12MHZ;
  400a3c:	4a1a      	ldr	r2, [pc, #104]	; (400aa8 <SystemCoreClockUpdate+0x104>)
  400a3e:	4b19      	ldr	r3, [pc, #100]	; (400aa4 <SystemCoreClockUpdate+0x100>)
  400a40:	601a      	str	r2, [r3, #0]
				default:
					break;
				}
			}
			
			if ( (uint32_t)(PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) ==
  400a42:	4b16      	ldr	r3, [pc, #88]	; (400a9c <SystemCoreClockUpdate+0xf8>)
  400a44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  400a46:	f003 0303 	and.w	r3, r3, #3
  400a4a:	2b02      	cmp	r3, #2
					PMC_MCKR_CSS_PLLA_CLK ) {
				SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk)
  400a4c:	4a13      	ldr	r2, [pc, #76]	; (400a9c <SystemCoreClockUpdate+0xf8>)
  400a4e:	bf07      	ittee	eq
  400a50:	6a93      	ldreq	r3, [r2, #40]	; 0x28
						>> CKGR_PLLAR_MULA_Pos) + 1U);
				SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk)
  400a52:	6a92      	ldreq	r2, [r2, #40]	; 0x28
						>> CKGR_PLLAR_DIVA_Pos));
			} else {
				SystemCoreClock *= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_MULB_Msk)
  400a54:	6ad3      	ldrne	r3, [r2, #44]	; 0x2c
						>> CKGR_PLLBR_MULB_Pos) + 1U);
				SystemCoreClock /= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_DIVB_Msk)
  400a56:	6ad2      	ldrne	r2, [r2, #44]	; 0x2c
  400a58:	4812      	ldr	r0, [pc, #72]	; (400aa4 <SystemCoreClockUpdate+0x100>)
						>> CKGR_PLLAR_MULA_Pos) + 1U);
				SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk)
						>> CKGR_PLLAR_DIVA_Pos));
			} else {
				SystemCoreClock *= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_MULB_Msk)
						>> CKGR_PLLBR_MULB_Pos) + 1U);
  400a5a:	f3c3 410a 	ubfx	r1, r3, #16, #11
				SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk)
						>> CKGR_PLLAR_MULA_Pos) + 1U);
				SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk)
						>> CKGR_PLLAR_DIVA_Pos));
			} else {
				SystemCoreClock *= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_MULB_Msk)
  400a5e:	6803      	ldr	r3, [r0, #0]
  400a60:	fb01 3303 	mla	r3, r1, r3, r3
						>> CKGR_PLLBR_MULB_Pos) + 1U);
				SystemCoreClock /= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_DIVB_Msk)
						>> CKGR_PLLBR_DIVB_Pos));
  400a64:	b2d2      	uxtb	r2, r2
				SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk)
						>> CKGR_PLLAR_DIVA_Pos));
			} else {
				SystemCoreClock *= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_MULB_Msk)
						>> CKGR_PLLBR_MULB_Pos) + 1U);
				SystemCoreClock /= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_DIVB_Msk)
  400a66:	fbb3 f3f2 	udiv	r3, r3, r2
  400a6a:	6003      	str	r3, [r0, #0]
		
	default:
		break;
	}

	if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 ) {
  400a6c:	4b0b      	ldr	r3, [pc, #44]	; (400a9c <SystemCoreClockUpdate+0xf8>)
  400a6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  400a70:	f003 0370 	and.w	r3, r3, #112	; 0x70
  400a74:	2b70      	cmp	r3, #112	; 0x70
  400a76:	d107      	bne.n	400a88 <SystemCoreClockUpdate+0xe4>
		SystemCoreClock /= 3U;
  400a78:	4a0a      	ldr	r2, [pc, #40]	; (400aa4 <SystemCoreClockUpdate+0x100>)
  400a7a:	6813      	ldr	r3, [r2, #0]
  400a7c:	490d      	ldr	r1, [pc, #52]	; (400ab4 <SystemCoreClockUpdate+0x110>)
  400a7e:	fba1 1303 	umull	r1, r3, r1, r3
  400a82:	085b      	lsrs	r3, r3, #1
  400a84:	6013      	str	r3, [r2, #0]
  400a86:	4770      	bx	lr
	} else {
		SystemCoreClock >>=
			((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  400a88:	4b04      	ldr	r3, [pc, #16]	; (400a9c <SystemCoreClockUpdate+0xf8>)
  400a8a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
	}

	if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 ) {
		SystemCoreClock /= 3U;
	} else {
		SystemCoreClock >>=
  400a8c:	4905      	ldr	r1, [pc, #20]	; (400aa4 <SystemCoreClockUpdate+0x100>)
			((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  400a8e:	f3c2 1202 	ubfx	r2, r2, #4, #3
	}

	if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 ) {
		SystemCoreClock /= 3U;
	} else {
		SystemCoreClock >>=
  400a92:	680b      	ldr	r3, [r1, #0]
  400a94:	40d3      	lsrs	r3, r2
  400a96:	600b      	str	r3, [r1, #0]
  400a98:	4770      	bx	lr
  400a9a:	bf00      	nop
  400a9c:	400e0400 	.word	0x400e0400
  400aa0:	400e1410 	.word	0x400e1410
  400aa4:	20000000 	.word	0x20000000
  400aa8:	00b71b00 	.word	0x00b71b00
  400aac:	003d0900 	.word	0x003d0900
  400ab0:	007a1200 	.word	0x007a1200
  400ab4:	aaaaaaab 	.word	0xaaaaaaab

00400ab8 <system_init_flash>:
				}
			}
		}
	}
#else
	if ( ul_clk < CHIP_FREQ_FWS_0 ) {
  400ab8:	4b1a      	ldr	r3, [pc, #104]	; (400b24 <system_init_flash+0x6c>)
  400aba:	4298      	cmp	r0, r3
  400abc:	d807      	bhi.n	400ace <system_init_flash+0x16>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  400abe:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  400ac2:	4a19      	ldr	r2, [pc, #100]	; (400b28 <system_init_flash+0x70>)
  400ac4:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  400ac6:	f502 7200 	add.w	r2, r2, #512	; 0x200
  400aca:	6013      	str	r3, [r2, #0]
  400acc:	4770      	bx	lr
	} else {
		if ( ul_clk < CHIP_FREQ_FWS_1 ) {
  400ace:	4b17      	ldr	r3, [pc, #92]	; (400b2c <system_init_flash+0x74>)
  400ad0:	4298      	cmp	r0, r3
  400ad2:	d806      	bhi.n	400ae2 <system_init_flash+0x2a>
			EFC0->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  400ad4:	4b16      	ldr	r3, [pc, #88]	; (400b30 <system_init_flash+0x78>)
  400ad6:	4a14      	ldr	r2, [pc, #80]	; (400b28 <system_init_flash+0x70>)
  400ad8:	6013      	str	r3, [r2, #0]
			EFC1->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  400ada:	f502 7200 	add.w	r2, r2, #512	; 0x200
  400ade:	6013      	str	r3, [r2, #0]
  400ae0:	4770      	bx	lr
		} else {
			if ( ul_clk < CHIP_FREQ_FWS_2 ) {
  400ae2:	4b14      	ldr	r3, [pc, #80]	; (400b34 <system_init_flash+0x7c>)
  400ae4:	4298      	cmp	r0, r3
  400ae6:	d806      	bhi.n	400af6 <system_init_flash+0x3e>
				EFC0->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  400ae8:	4b13      	ldr	r3, [pc, #76]	; (400b38 <system_init_flash+0x80>)
  400aea:	4a0f      	ldr	r2, [pc, #60]	; (400b28 <system_init_flash+0x70>)
  400aec:	6013      	str	r3, [r2, #0]
				EFC1->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  400aee:	f502 7200 	add.w	r2, r2, #512	; 0x200
  400af2:	6013      	str	r3, [r2, #0]
  400af4:	4770      	bx	lr
			} else {
				if ( ul_clk < CHIP_FREQ_FWS_3 ) {
  400af6:	4b11      	ldr	r3, [pc, #68]	; (400b3c <system_init_flash+0x84>)
  400af8:	4298      	cmp	r0, r3
  400afa:	d806      	bhi.n	400b0a <system_init_flash+0x52>
					EFC0->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  400afc:	4b10      	ldr	r3, [pc, #64]	; (400b40 <system_init_flash+0x88>)
  400afe:	4a0a      	ldr	r2, [pc, #40]	; (400b28 <system_init_flash+0x70>)
  400b00:	6013      	str	r3, [r2, #0]
					EFC1->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  400b02:	f502 7200 	add.w	r2, r2, #512	; 0x200
  400b06:	6013      	str	r3, [r2, #0]
  400b08:	4770      	bx	lr
				} else {
					if ( ul_clk < CHIP_FREQ_FWS_4 ) {
  400b0a:	4b0e      	ldr	r3, [pc, #56]	; (400b44 <system_init_flash+0x8c>)
  400b0c:	4298      	cmp	r0, r3
						EFC0->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
  400b0e:	bf94      	ite	ls
  400b10:	f04f 2304 	movls.w	r3, #67109888	; 0x4000400
						EFC1->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
					} else {
						EFC0->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  400b14:	4b0c      	ldrhi	r3, [pc, #48]	; (400b48 <system_init_flash+0x90>)
  400b16:	4a04      	ldr	r2, [pc, #16]	; (400b28 <system_init_flash+0x70>)
  400b18:	6013      	str	r3, [r2, #0]
						EFC1->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  400b1a:	f502 7200 	add.w	r2, r2, #512	; 0x200
  400b1e:	6013      	str	r3, [r2, #0]
  400b20:	4770      	bx	lr
  400b22:	bf00      	nop
  400b24:	01312cff 	.word	0x01312cff
  400b28:	400e0a00 	.word	0x400e0a00
  400b2c:	026259ff 	.word	0x026259ff
  400b30:	04000100 	.word	0x04000100
  400b34:	039386ff 	.word	0x039386ff
  400b38:	04000200 	.word	0x04000200
  400b3c:	04c4b3ff 	.word	0x04c4b3ff
  400b40:	04000300 	.word	0x04000300
  400b44:	05f5e0ff 	.word	0x05f5e0ff
  400b48:	04000500 	.word	0x04000500

00400b4c <_sbrk>:
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;

	if (heap == NULL) {
  400b4c:	4b09      	ldr	r3, [pc, #36]	; (400b74 <_sbrk+0x28>)
  400b4e:	681b      	ldr	r3, [r3, #0]
  400b50:	b913      	cbnz	r3, 400b58 <_sbrk+0xc>
		heap = (unsigned char *)&_end;
  400b52:	4a09      	ldr	r2, [pc, #36]	; (400b78 <_sbrk+0x2c>)
  400b54:	4b07      	ldr	r3, [pc, #28]	; (400b74 <_sbrk+0x28>)
  400b56:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
  400b58:	4b06      	ldr	r3, [pc, #24]	; (400b74 <_sbrk+0x28>)
  400b5a:	681b      	ldr	r3, [r3, #0]

	if (((int)prev_heap + incr) > ramend) {
  400b5c:	181a      	adds	r2, r3, r0
  400b5e:	4907      	ldr	r1, [pc, #28]	; (400b7c <_sbrk+0x30>)
  400b60:	4291      	cmp	r1, r2
  400b62:	db04      	blt.n	400b6e <_sbrk+0x22>
		return (caddr_t) -1;	
	}

	heap += incr;
  400b64:	4610      	mov	r0, r2
  400b66:	4a03      	ldr	r2, [pc, #12]	; (400b74 <_sbrk+0x28>)
  400b68:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap;
  400b6a:	4618      	mov	r0, r3
  400b6c:	4770      	bx	lr
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;

	if (((int)prev_heap + incr) > ramend) {
		return (caddr_t) -1;	
  400b6e:	f04f 30ff 	mov.w	r0, #4294967295
	}

	heap += incr;

	return (caddr_t) prev_heap;
}
  400b72:	4770      	bx	lr
  400b74:	200008fc 	.word	0x200008fc
  400b78:	20004fb8 	.word	0x20004fb8
  400b7c:	20027ffc 	.word	0x20027ffc

00400b80 <_close>:
}

extern int _close(int file)
{
	return -1;
}
  400b80:	f04f 30ff 	mov.w	r0, #4294967295
  400b84:	4770      	bx	lr
  400b86:	bf00      	nop

00400b88 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
  400b88:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  400b8c:	604b      	str	r3, [r1, #4]

	return 0;
}
  400b8e:	2000      	movs	r0, #0
  400b90:	4770      	bx	lr
  400b92:	bf00      	nop

00400b94 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
  400b94:	2001      	movs	r0, #1
  400b96:	4770      	bx	lr

00400b98 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
  400b98:	2000      	movs	r0, #0
  400b9a:	4770      	bx	lr

00400b9c <usart_serial_getchar>:
 * \param p_usart   Base address of the USART instance.
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if p_usart, uint8_t *data)
{
  400b9c:	b5f0      	push	{r4, r5, r6, r7, lr}
  400b9e:	b083      	sub	sp, #12
  400ba0:	4605      	mov	r5, r0
  400ba2:	460c      	mov	r4, r1
	uint32_t val = 0;
  400ba4:	2300      	movs	r3, #0
  400ba6:	9301      	str	r3, [sp, #4]
	if (UART == (Uart*)p_usart) {
		while (uart_read((Uart*)p_usart, data));
	}
#else
# ifdef UART0
	if (UART0 == (Uart*)p_usart) {
  400ba8:	4b18      	ldr	r3, [pc, #96]	; (400c0c <usart_serial_getchar+0x70>)
  400baa:	4298      	cmp	r0, r3
  400bac:	d107      	bne.n	400bbe <usart_serial_getchar+0x22>
		while (uart_read((Uart*)p_usart, data));
  400bae:	461f      	mov	r7, r3
  400bb0:	4e17      	ldr	r6, [pc, #92]	; (400c10 <usart_serial_getchar+0x74>)
  400bb2:	4638      	mov	r0, r7
  400bb4:	4621      	mov	r1, r4
  400bb6:	47b0      	blx	r6
  400bb8:	2800      	cmp	r0, #0
  400bba:	d1fa      	bne.n	400bb2 <usart_serial_getchar+0x16>
  400bbc:	e017      	b.n	400bee <usart_serial_getchar+0x52>
	}
# endif
# ifdef UART1
	if (UART1 == (Uart*)p_usart) {
  400bbe:	4b15      	ldr	r3, [pc, #84]	; (400c14 <usart_serial_getchar+0x78>)
  400bc0:	4298      	cmp	r0, r3
  400bc2:	d107      	bne.n	400bd4 <usart_serial_getchar+0x38>
		while (uart_read((Uart*)p_usart, data));
  400bc4:	461e      	mov	r6, r3
  400bc6:	4d12      	ldr	r5, [pc, #72]	; (400c10 <usart_serial_getchar+0x74>)
  400bc8:	4630      	mov	r0, r6
  400bca:	4621      	mov	r1, r4
  400bcc:	47a8      	blx	r5
  400bce:	2800      	cmp	r0, #0
  400bd0:	d1fa      	bne.n	400bc8 <usart_serial_getchar+0x2c>
  400bd2:	e018      	b.n	400c06 <usart_serial_getchar+0x6a>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
  400bd4:	4b10      	ldr	r3, [pc, #64]	; (400c18 <usart_serial_getchar+0x7c>)
  400bd6:	4298      	cmp	r0, r3
  400bd8:	d109      	bne.n	400bee <usart_serial_getchar+0x52>
		while (usart_read(p_usart, &val));
  400bda:	461e      	mov	r6, r3
  400bdc:	4d0f      	ldr	r5, [pc, #60]	; (400c1c <usart_serial_getchar+0x80>)
  400bde:	4630      	mov	r0, r6
  400be0:	a901      	add	r1, sp, #4
  400be2:	47a8      	blx	r5
  400be4:	2800      	cmp	r0, #0
  400be6:	d1fa      	bne.n	400bde <usart_serial_getchar+0x42>
		*data = (uint8_t)(val & 0xFF);
  400be8:	9b01      	ldr	r3, [sp, #4]
  400bea:	7023      	strb	r3, [r4, #0]
  400bec:	e00b      	b.n	400c06 <usart_serial_getchar+0x6a>
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
  400bee:	4b0c      	ldr	r3, [pc, #48]	; (400c20 <usart_serial_getchar+0x84>)
  400bf0:	429d      	cmp	r5, r3
  400bf2:	d108      	bne.n	400c06 <usart_serial_getchar+0x6a>
		while (usart_read(p_usart, &val));
  400bf4:	461e      	mov	r6, r3
  400bf6:	4d09      	ldr	r5, [pc, #36]	; (400c1c <usart_serial_getchar+0x80>)
  400bf8:	4630      	mov	r0, r6
  400bfa:	a901      	add	r1, sp, #4
  400bfc:	47a8      	blx	r5
  400bfe:	2800      	cmp	r0, #0
  400c00:	d1fa      	bne.n	400bf8 <usart_serial_getchar+0x5c>
		*data = (uint8_t)(val & 0xFF);
  400c02:	9b01      	ldr	r3, [sp, #4]
  400c04:	7023      	strb	r3, [r4, #0]
		*data = (uint8_t)(val & 0xFF);
	}
# endif
#endif /* ifdef USART */

}
  400c06:	b003      	add	sp, #12
  400c08:	bdf0      	pop	{r4, r5, r6, r7, pc}
  400c0a:	bf00      	nop
  400c0c:	400e0600 	.word	0x400e0600
  400c10:	004008b1 	.word	0x004008b1
  400c14:	400e0800 	.word	0x400e0800
  400c18:	40024000 	.word	0x40024000
  400c1c:	004008d9 	.word	0x004008d9
  400c20:	40028000 	.word	0x40028000

00400c24 <usart_serial_putchar>:
 *   \retval 1  The character was written.
 *   \retval 0  The function timed out before the USART transmitter became
 * ready to send.
 */
static inline int usart_serial_putchar(usart_if p_usart, const uint8_t c)
{
  400c24:	b570      	push	{r4, r5, r6, lr}
  400c26:	460c      	mov	r4, r1
		while (uart_write((Uart*)p_usart, c)!=0);
		return 1;
	}
#else
# ifdef UART0
	if (UART0 == (Uart*)p_usart) {
  400c28:	4b18      	ldr	r3, [pc, #96]	; (400c8c <usart_serial_putchar+0x68>)
  400c2a:	4298      	cmp	r0, r3
  400c2c:	d108      	bne.n	400c40 <usart_serial_putchar+0x1c>
		while (uart_write((Uart*)p_usart, c)!=0);
  400c2e:	461e      	mov	r6, r3
  400c30:	4d17      	ldr	r5, [pc, #92]	; (400c90 <usart_serial_putchar+0x6c>)
  400c32:	4630      	mov	r0, r6
  400c34:	4621      	mov	r1, r4
  400c36:	47a8      	blx	r5
  400c38:	2800      	cmp	r0, #0
  400c3a:	d1fa      	bne.n	400c32 <usart_serial_putchar+0xe>
		return 1;
  400c3c:	2001      	movs	r0, #1
  400c3e:	bd70      	pop	{r4, r5, r6, pc}
	}
# endif
# ifdef UART1
	if (UART1 == (Uart*)p_usart) {
  400c40:	4b14      	ldr	r3, [pc, #80]	; (400c94 <usart_serial_putchar+0x70>)
  400c42:	4298      	cmp	r0, r3
  400c44:	d108      	bne.n	400c58 <usart_serial_putchar+0x34>
		while (uart_write((Uart*)p_usart, c)!=0);
  400c46:	461e      	mov	r6, r3
  400c48:	4d11      	ldr	r5, [pc, #68]	; (400c90 <usart_serial_putchar+0x6c>)
  400c4a:	4630      	mov	r0, r6
  400c4c:	4621      	mov	r1, r4
  400c4e:	47a8      	blx	r5
  400c50:	2800      	cmp	r0, #0
  400c52:	d1fa      	bne.n	400c4a <usart_serial_putchar+0x26>
		return 1;
  400c54:	2001      	movs	r0, #1
  400c56:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
		return 1;
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
  400c58:	4b0f      	ldr	r3, [pc, #60]	; (400c98 <usart_serial_putchar+0x74>)
  400c5a:	4298      	cmp	r0, r3
  400c5c:	d108      	bne.n	400c70 <usart_serial_putchar+0x4c>
		while (usart_write(p_usart, c)!=0);
  400c5e:	461e      	mov	r6, r3
  400c60:	4d0e      	ldr	r5, [pc, #56]	; (400c9c <usart_serial_putchar+0x78>)
  400c62:	4630      	mov	r0, r6
  400c64:	4621      	mov	r1, r4
  400c66:	47a8      	blx	r5
  400c68:	2800      	cmp	r0, #0
  400c6a:	d1fa      	bne.n	400c62 <usart_serial_putchar+0x3e>
		return 1;
  400c6c:	2001      	movs	r0, #1
  400c6e:	bd70      	pop	{r4, r5, r6, pc}
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
  400c70:	4b0b      	ldr	r3, [pc, #44]	; (400ca0 <usart_serial_putchar+0x7c>)
  400c72:	4298      	cmp	r0, r3
  400c74:	d108      	bne.n	400c88 <usart_serial_putchar+0x64>
		while (usart_write(p_usart, c)!=0);
  400c76:	461e      	mov	r6, r3
  400c78:	4d08      	ldr	r5, [pc, #32]	; (400c9c <usart_serial_putchar+0x78>)
  400c7a:	4630      	mov	r0, r6
  400c7c:	4621      	mov	r1, r4
  400c7e:	47a8      	blx	r5
  400c80:	2800      	cmp	r0, #0
  400c82:	d1fa      	bne.n	400c7a <usart_serial_putchar+0x56>
		return 1;
  400c84:	2001      	movs	r0, #1
  400c86:	bd70      	pop	{r4, r5, r6, pc}
		return 1;
	}
# endif
#endif /* ifdef USART */

	return 0;
  400c88:	2000      	movs	r0, #0
}
  400c8a:	bd70      	pop	{r4, r5, r6, pc}
  400c8c:	400e0600 	.word	0x400e0600
  400c90:	004008a1 	.word	0x004008a1
  400c94:	400e0800 	.word	0x400e0800
  400c98:	40024000 	.word	0x40024000
  400c9c:	004008c5 	.word	0x004008c5
  400ca0:	40028000 	.word	0x40028000

00400ca4 <DACC_Handler>:

/**
 * \brief Interrupt handler for the DACC
 */
void DACC_Handler(void)
{
  400ca4:	b510      	push	{r4, lr}
   uint32_t status;
   status = dacc_get_interrupt_status(DACC_BASE);
  400ca6:	480b      	ldr	r0, [pc, #44]	; (400cd4 <DACC_Handler+0x30>)
  400ca8:	4b0b      	ldr	r3, [pc, #44]	; (400cd8 <DACC_Handler+0x34>)
  400caa:	4798      	blx	r3
   /* DACC_ISR_TXBUFE and DACC_ISR_ENDTX both indicates ending pdc buffer */
   /* If ready for new data */
//   if ((status & DACC_ISR_TXBUFE) == DACC_ISR_TXBUFE) {
   if ((status & DACC_ISR_ENDTX) == DACC_ISR_ENDTX) {
  400cac:	f010 0f04 	tst.w	r0, #4
  400cb0:	d00f      	beq.n	400cd2 <DACC_Handler+0x2e>

	  // printf("e\r\n");

         g_pdc_dacc_packet.ul_addr = (uint32_t) g_uc_pdc_buffer;
  400cb2:	490a      	ldr	r1, [pc, #40]	; (400cdc <DACC_Handler+0x38>)
  400cb4:	4b0a      	ldr	r3, [pc, #40]	; (400ce0 <DACC_Handler+0x3c>)
  400cb6:	600b      	str	r3, [r1, #0]
         g_pdc_dacc_packet.ul_size = VOICESAMPLES;
  400cb8:	f640 332c 	movw	r3, #2860	; 0xb2c
  400cbc:	604b      	str	r3, [r1, #4]
		 pdc_tx_init(g_p_dacc_pdc, &g_pdc_dacc_packet, 0);
  400cbe:	4c09      	ldr	r4, [pc, #36]	; (400ce4 <DACC_Handler+0x40>)
  400cc0:	6820      	ldr	r0, [r4, #0]
  400cc2:	2200      	movs	r2, #0
  400cc4:	4b08      	ldr	r3, [pc, #32]	; (400ce8 <DACC_Handler+0x44>)
  400cc6:	4798      	blx	r3
		 pdc_enable_transfer(g_p_dacc_pdc, PERIPH_PTCR_TXTEN); 
  400cc8:	6820      	ldr	r0, [r4, #0]
  400cca:	f44f 7180 	mov.w	r1, #256	; 0x100
  400cce:	4b07      	ldr	r3, [pc, #28]	; (400cec <DACC_Handler+0x48>)
  400cd0:	4798      	blx	r3
  400cd2:	bd10      	pop	{r4, pc}
  400cd4:	4003c000 	.word	0x4003c000
  400cd8:	004002c5 	.word	0x004002c5
  400cdc:	20001fa4 	.word	0x20001fa4
  400ce0:	2000094c 	.word	0x2000094c
  400ce4:	20001fac 	.word	0x20001fac
  400ce8:	00400335 	.word	0x00400335
  400cec:	0040034d 	.word	0x0040034d

00400cf0 <main>:
 *  \brief DAC Sinewave application entry point.
 *
 *  \return Unused (ANSI-C compatibility).
 */
int main(void)
{
  400cf0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  400cf4:	b085      	sub	sp, #20
	uint8_t uc_key;
	uint32_t ul_freq, ul_amp;

	/* Initialize the system */
	sysclk_init();
  400cf6:	4b61      	ldr	r3, [pc, #388]	; (400e7c <main+0x18c>)
  400cf8:	4798      	blx	r3
	board_init();
  400cfa:	4b61      	ldr	r3, [pc, #388]	; (400e80 <main+0x190>)
  400cfc:	4798      	blx	r3
  400cfe:	4961      	ldr	r1, [pc, #388]	; (400e84 <main+0x194>)

	//	============================================
	//	Convert 16bit signed integer PCM data to 12bit unsigned integer DAC data
	//	============================================
	for (int i = 0; i< VOICESAMPLES; i++){
  400d00:	2200      	movs	r2, #0
		g_uc_pdc_buffer[i] = (gc_us_sine_data[i] + 0x8000) >> 4;
  400d02:	4c61      	ldr	r4, [pc, #388]	; (400e88 <main+0x198>)
	board_init();

	//	============================================
	//	Convert 16bit signed integer PCM data to 12bit unsigned integer DAC data
	//	============================================
	for (int i = 0; i< VOICESAMPLES; i++){
  400d04:	f640 302c 	movw	r0, #2860	; 0xb2c
		g_uc_pdc_buffer[i] = (gc_us_sine_data[i] + 0x8000) >> 4;
  400d08:	f931 3f02 	ldrsh.w	r3, [r1, #2]!
  400d0c:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
  400d10:	f3c3 130f 	ubfx	r3, r3, #4, #16
  400d14:	f824 3012 	strh.w	r3, [r4, r2, lsl #1]
	board_init();

	//	============================================
	//	Convert 16bit signed integer PCM data to 12bit unsigned integer DAC data
	//	============================================
	for (int i = 0; i< VOICESAMPLES; i++){
  400d18:	3201      	adds	r2, #1
  400d1a:	4282      	cmp	r2, r0
  400d1c:	d1f4      	bne.n	400d08 <main+0x18>
	Pio *base = arch_ioport_port_to_base(port);

	if (mode & IOPORT_MODE_PULLUP) {
		base->PIO_PUER = mask;
	} else {
		base->PIO_PUDR = mask;
  400d1e:	4b5b      	ldr	r3, [pc, #364]	; (400e8c <main+0x19c>)
  400d20:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  400d24:	661a      	str	r2, [r3, #96]	; 0x60

#if defined(IOPORT_MODE_PULLDOWN)
	if (mode & IOPORT_MODE_PULLDOWN) {
		base->PIO_PPDER = mask;
	} else {
		base->PIO_PPDDR = mask;
  400d26:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#endif

	if (mode & IOPORT_MODE_OPEN_DRAIN) {
		base->PIO_MDER = mask;
	} else {
		base->PIO_MDDR = mask;
  400d2a:	655a      	str	r2, [r3, #84]	; 0x54
	}

	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
		base->PIO_IFER = mask;
	} else {
		base->PIO_IFDR = mask;
  400d2c:	625a      	str	r2, [r3, #36]	; 0x24
#endif
	} else {
#if SAM3U || SAM3XA
		base->PIO_SCIFSR = mask;
#else
		base->PIO_IFSCDR = mask;
  400d2e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	} else {
		base->PIO_ABSR &= ~mask;
	}
#else
	if (mode & IOPORT_MODE_MUX_BIT0) {
		base->PIO_ABCDSR[0] |= mask;
  400d32:	6f19      	ldr	r1, [r3, #112]	; 0x70
  400d34:	4311      	orrs	r1, r2
  400d36:	6719      	str	r1, [r3, #112]	; 0x70
	}

	if (mode & IOPORT_MODE_MUX_BIT1) {
		base->PIO_ABCDSR[1] |= mask;
	} else {
		base->PIO_ABCDSR[1] &= ~mask;
  400d38:	6f59      	ldr	r1, [r3, #116]	; 0x74
  400d3a:	f421 4100 	bic.w	r1, r1, #32768	; 0x8000
  400d3e:	6759      	str	r1, [r3, #116]	; 0x74
}

__always_inline static void arch_ioport_disable_port(ioport_port_t port,
		ioport_port_mask_t mask)
{
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  400d40:	605a      	str	r2, [r3, #4]
  400d42:	2009      	movs	r0, #9
  400d44:	4d52      	ldr	r5, [pc, #328]	; (400e90 <main+0x1a0>)
  400d46:	47a8      	blx	r5
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
	stdio_base = (void *)usart;
  400d48:	4c52      	ldr	r4, [pc, #328]	; (400e94 <main+0x1a4>)
  400d4a:	4b53      	ldr	r3, [pc, #332]	; (400e98 <main+0x1a8>)
  400d4c:	601c      	str	r4, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
  400d4e:	4a53      	ldr	r2, [pc, #332]	; (400e9c <main+0x1ac>)
  400d50:	4b53      	ldr	r3, [pc, #332]	; (400ea0 <main+0x1b0>)
  400d52:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
  400d54:	4a53      	ldr	r2, [pc, #332]	; (400ea4 <main+0x1b4>)
  400d56:	4b54      	ldr	r3, [pc, #336]	; (400ea8 <main+0x1b8>)
  400d58:	601a      	str	r2, [r3, #0]
static inline void usart_serial_init(usart_if p_usart,
		usart_serial_options_t *opt)
{
#if ((!SAM4L) && (!SAMG55))
	sam_uart_opt_t uart_settings;
	uart_settings.ul_mck = sysclk_get_peripheral_hz();
  400d5a:	4b54      	ldr	r3, [pc, #336]	; (400eac <main+0x1bc>)
  400d5c:	9301      	str	r3, [sp, #4]
	uart_settings.ul_baudrate = opt->baudrate;
  400d5e:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
  400d62:	9302      	str	r3, [sp, #8]
	uart_settings.ul_mode = opt->paritytype;
  400d64:	f44f 6300 	mov.w	r3, #2048	; 0x800
  400d68:	9303      	str	r3, [sp, #12]
  400d6a:	2009      	movs	r0, #9
  400d6c:	47a8      	blx	r5
# endif
# ifdef UART1
	if (UART1 == (Uart*)p_usart) {
		sysclk_enable_peripheral_clock(ID_UART1);
		/* Configure UART */
		uart_init((Uart*)p_usart, &uart_settings);
  400d6e:	4620      	mov	r0, r4
  400d70:	a901      	add	r1, sp, #4
  400d72:	4b4f      	ldr	r3, [pc, #316]	; (400eb0 <main+0x1c0>)
  400d74:	4798      	blx	r3
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
#  endif
#  if UC3 || SAM
	// For AVR32 and SAM GCC
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
  400d76:	4e4f      	ldr	r6, [pc, #316]	; (400eb4 <main+0x1c4>)
  400d78:	6833      	ldr	r3, [r6, #0]
  400d7a:	6898      	ldr	r0, [r3, #8]
  400d7c:	2100      	movs	r1, #0
  400d7e:	4c4e      	ldr	r4, [pc, #312]	; (400eb8 <main+0x1c8>)
  400d80:	47a0      	blx	r4
	setbuf(stdin, NULL);
  400d82:	6833      	ldr	r3, [r6, #0]
  400d84:	6858      	ldr	r0, [r3, #4]
  400d86:	2100      	movs	r1, #0
  400d88:	47a0      	blx	r4

	/* Initialize debug console */
	configure_console();

	/* Output example information */
	puts(STRING_HEADER);
  400d8a:	484c      	ldr	r0, [pc, #304]	; (400ebc <main+0x1cc>)
  400d8c:	4f4c      	ldr	r7, [pc, #304]	; (400ec0 <main+0x1d0>)
  400d8e:	47b8      	blx	r7
	printf("\r\n");
  400d90:	f8df 8188 	ldr.w	r8, [pc, #392]	; 400f1c <main+0x22c>
  400d94:	4640      	mov	r0, r8
  400d96:	4e4b      	ldr	r6, [pc, #300]	; (400ec4 <main+0x1d4>)
  400d98:	47b0      	blx	r6
  400d9a:	201e      	movs	r0, #30
  400d9c:	47a8      	blx	r5

	//***** 1. DACC clock should be enabled before using it.
	sysclk_enable_peripheral_clock(DACC_ID);
	
	//***** 2. Reset DACC registers
	dacc_reset(DACC_BASE);
  400d9e:	4c4a      	ldr	r4, [pc, #296]	; (400ec8 <main+0x1d8>)
  400da0:	4620      	mov	r0, r4
  400da2:	4b4a      	ldr	r3, [pc, #296]	; (400ecc <main+0x1dc>)
  400da4:	4798      	blx	r3

	//***** 7. Initialize timing, amplitude and frequency */
	/* Half word transfer mode */
	dacc_set_transfer_mode(DACC_BASE, 0);
  400da6:	4620      	mov	r0, r4
  400da8:	2100      	movs	r1, #0
  400daa:	4b49      	ldr	r3, [pc, #292]	; (400ed0 <main+0x1e0>)
  400dac:	4798      	blx	r3

	//***** 6X. Configure trigger with dacc_set_trigger() and dacc_disable_trigger().
	//dacc_set_trigger(DACC_BASE, DACC_MR_TRGEN_EN | DACC_MR_TRGSEL(1));    /* Set trigger to TC0_0 on 8/16 kHz. Need to verify vaulue. */
	dacc_set_trigger(DACC_BASE, 2);	//(2 = TC0 Output Chan. 1)
  400dae:	4620      	mov	r0, r4
  400db0:	2102      	movs	r1, #2
  400db2:	4b48      	ldr	r3, [pc, #288]	; (400ed4 <main+0x1e4>)
  400db4:	4798      	blx	r3

	//***** 4. Initialize DACC timing with dacc_set_timing() (different DAC peripheral may require different parameters).
	dacc_set_timing(DACC_BASE, 0x08, 0, 0x10);
  400db6:	4620      	mov	r0, r4
  400db8:	2108      	movs	r1, #8
  400dba:	2200      	movs	r2, #0
  400dbc:	2310      	movs	r3, #16
  400dbe:	f8df c160 	ldr.w	ip, [pc, #352]	; 400f20 <main+0x230>
  400dc2:	47e0      	blx	ip

	//***** 11a. Disable TAG and select output channel DACC_CHANNEL */
	dacc_set_channel_selection(DACC_BASE, DACC_CHANNEL);
  400dc4:	4620      	mov	r0, r4
  400dc6:	2101      	movs	r1, #1
  400dc8:	4b43      	ldr	r3, [pc, #268]	; (400ed8 <main+0x1e8>)
  400dca:	4798      	blx	r3



	//***** 11b. Enable output channel DACC_CHANNEL */
	dacc_enable_channel(DACC_BASE, DACC_CHANNEL);
  400dcc:	4620      	mov	r0, r4
  400dce:	2101      	movs	r1, #1
  400dd0:	4b42      	ldr	r3, [pc, #264]	; (400edc <main+0x1ec>)
  400dd2:	4798      	blx	r3

	/* Set up analog current */
	dacc_set_analog_control(DACC_BASE, DACC_ANALOG_CONTROL);
  400dd4:	4620      	mov	r0, r4
  400dd6:	f44f 7185 	mov.w	r1, #266	; 0x10a
  400dda:	4b41      	ldr	r3, [pc, #260]	; (400ee0 <main+0x1f0>)
  400ddc:	4798      	blx	r3

	g_l_amplitude = 4095;//MAX_AMPLITUDE / 2;
  400dde:	f640 72ff 	movw	r2, #4095	; 0xfff
  400de2:	4b40      	ldr	r3, [pc, #256]	; (400ee4 <main+0x1f4>)
  400de4:	601a      	str	r2, [r3, #0]
	g_ul_frequency = DEFAULT_FREQUENCY;
  400de6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
  400dea:	4b3f      	ldr	r3, [pc, #252]	; (400ee8 <main+0x1f8>)
  400dec:	601a      	str	r2, [r3, #0]
	//SysTick_Config( sysclk_get_cpu_hz() / (5000) );
	printf("raw data (int16) = dac data (uint12)\r\n");
  400dee:	483f      	ldr	r0, [pc, #252]	; (400eec <main+0x1fc>)
  400df0:	47b0      	blx	r6
	//	============================================
	//	Configure the DMA (PDC) for DACC transfer
	//	============================================	
	//***** 10X. If the DACC can work with PDC, use dacc_get_pdc_base() to get PDC register base for the DAC controller.
    /* Get pointer to DACC PDC register base */
    g_p_dacc_pdc = dacc_get_pdc_base(DACC_BASE);
  400df2:	4620      	mov	r0, r4
  400df4:	4b3e      	ldr	r3, [pc, #248]	; (400ef0 <main+0x200>)
  400df6:	4798      	blx	r3
  400df8:	f8df 9128 	ldr.w	r9, [pc, #296]	; 400f24 <main+0x234>
  400dfc:	f8c9 0000 	str.w	r0, [r9]
    /* Initialize PDC data packet for transfer */
    g_pdc_dacc_packet.ul_addr = (uint32_t) g_uc_pdc_buffer;
  400e00:	493c      	ldr	r1, [pc, #240]	; (400ef4 <main+0x204>)
  400e02:	4b21      	ldr	r3, [pc, #132]	; (400e88 <main+0x198>)
  400e04:	600b      	str	r3, [r1, #0]
    g_pdc_dacc_packet.ul_size = VOICESAMPLES;
  400e06:	f640 332c 	movw	r3, #2860	; 0xb2c
  400e0a:	604b      	str	r3, [r1, #4]
    /* Configure PDC for data transmit */
    pdc_tx_init(g_p_dacc_pdc, &g_pdc_dacc_packet, NULL);
  400e0c:	2200      	movs	r2, #0
  400e0e:	4b3a      	ldr	r3, [pc, #232]	; (400ef8 <main+0x208>)
  400e10:	4798      	blx	r3
    /* Enable PDC transfers */
    pdc_enable_transfer(g_p_dacc_pdc, PERIPH_PTCR_TXTEN);
  400e12:	f8d9 0000 	ldr.w	r0, [r9]
  400e16:	f44f 7180 	mov.w	r1, #256	; 0x100
  400e1a:	4b38      	ldr	r3, [pc, #224]	; (400efc <main+0x20c>)
  400e1c:	4798      	blx	r3

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
  400e1e:	4b38      	ldr	r3, [pc, #224]	; (400f00 <main+0x210>)
  400e20:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  400e24:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
  400e28:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
  400e2c:	2100      	movs	r1, #0
  400e2e:	f883 131e 	strb.w	r1, [r3, #798]	; 0x31e
    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
/*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  400e32:	601a      	str	r2, [r3, #0]
	/* Enable DACC + PDC IRQ */
	NVIC_DisableIRQ(DACC_IRQn);
	NVIC_ClearPendingIRQ(DACC_IRQn);
	NVIC_SetPriority(DACC_IRQn, 0);
	NVIC_EnableIRQ(DACC_IRQn);
	dacc_enable_interrupt(DACC, DACC_ISR_TXBUFE);	
  400e34:	4620      	mov	r0, r4
  400e36:	2108      	movs	r1, #8
  400e38:	4b32      	ldr	r3, [pc, #200]	; (400f04 <main+0x214>)
  400e3a:	4798      	blx	r3
	//	============================================
	//	Configure the TC trigger for DACC conversion	
	//	============================================
	uint32_t ra, rc;
	/* Enable TC0 peripheral clock. */
	pmc_enable_periph_clk(ID_TC1);
  400e3c:	2018      	movs	r0, #24
  400e3e:	47a8      	blx	r5
	// Init TC to waveform mode.
	tc_init(TC0, 1,
  400e40:	f5a4 3430 	sub.w	r4, r4, #180224	; 0x2c000
  400e44:	4620      	mov	r0, r4
  400e46:	2101      	movs	r1, #1
  400e48:	f44f 221c 	mov.w	r2, #638976	; 0x9c000
  400e4c:	4b2e      	ldr	r3, [pc, #184]	; (400f08 <main+0x218>)
  400e4e:	4798      	blx	r3
		| TC_CMR_ACPC_CLEAR				/* RC Compare Effect: clear */
		| TC_CMR_WAVSEL_UP_RC			/* UP mode with automatic trigger on RC Compare */
	);	
	/* Configure waveform frequency and duty cycle. */
	rc = (sysclk_get_peripheral_bus_hz(TC0) / 2 / 5000);
	tc_write_rc(TC0, 1, rc);
  400e50:	4620      	mov	r0, r4
  400e52:	2101      	movs	r1, #1
  400e54:	f642 62e0 	movw	r2, #12000	; 0x2ee0
  400e58:	4b2c      	ldr	r3, [pc, #176]	; (400f0c <main+0x21c>)
  400e5a:	4798      	blx	r3
	ra = (100 - 50) * rc / 100;
	tc_write_ra(TC0, 1, ra);
  400e5c:	4620      	mov	r0, r4
  400e5e:	2101      	movs	r1, #1
  400e60:	f241 7270 	movw	r2, #6000	; 0x1770
  400e64:	4b2a      	ldr	r3, [pc, #168]	; (400f10 <main+0x220>)
  400e66:	4798      	blx	r3
	/* Enable TC TC0_CHAN_0_WAVE. */
	tc_start(TC0, 1);
  400e68:	4620      	mov	r0, r4
  400e6a:	2101      	movs	r1, #1
  400e6c:	4b29      	ldr	r3, [pc, #164]	; (400f14 <main+0x224>)
  400e6e:	4798      	blx	r3
/**
 * \brief Display main menu.
 */
static void display_menu(void)
{
	printf("\r\n");
  400e70:	4640      	mov	r0, r8
  400e72:	47b0      	blx	r6
	puts("======== Started DAC output ========\r");
  400e74:	4828      	ldr	r0, [pc, #160]	; (400f18 <main+0x228>)
  400e76:	47b8      	blx	r7

	/* Main menu */
	display_menu();

	while (1) {
	}
  400e78:	e7fe      	b.n	400e78 <main+0x188>
  400e7a:	bf00      	nop
  400e7c:	00400129 	.word	0x00400129
  400e80:	00400219 	.word	0x00400219
  400e84:	00403f4e 	.word	0x00403f4e
  400e88:	2000094c 	.word	0x2000094c
  400e8c:	400e0e00 	.word	0x400e0e00
  400e90:	004007e1 	.word	0x004007e1
  400e94:	400e0800 	.word	0x400e0800
  400e98:	20000944 	.word	0x20000944
  400e9c:	00400c25 	.word	0x00400c25
  400ea0:	20000940 	.word	0x20000940
  400ea4:	00400b9d 	.word	0x00400b9d
  400ea8:	2000093c 	.word	0x2000093c
  400eac:	07270e00 	.word	0x07270e00
  400eb0:	00400869 	.word	0x00400869
  400eb4:	20000430 	.word	0x20000430
  400eb8:	004010a9 	.word	0x004010a9
  400ebc:	004055a8 	.word	0x004055a8
  400ec0:	00401099 	.word	0x00401099
  400ec4:	00400f79 	.word	0x00400f79
  400ec8:	4003c000 	.word	0x4003c000
  400ecc:	00400279 	.word	0x00400279
  400ed0:	00400299 	.word	0x00400299
  400ed4:	00400281 	.word	0x00400281
  400ed8:	004002d1 	.word	0x004002d1
  400edc:	00400319 	.word	0x00400319
  400ee0:	0040032d 	.word	0x0040032d
  400ee4:	20000900 	.word	0x20000900
  400ee8:	20000904 	.word	0x20000904
  400eec:	004055fc 	.word	0x004055fc
  400ef0:	004002c9 	.word	0x004002c9
  400ef4:	20001fa4 	.word	0x20001fa4
  400ef8:	00400335 	.word	0x00400335
  400efc:	0040034d 	.word	0x0040034d
  400f00:	e000e100 	.word	0xe000e100
  400f04:	004002c1 	.word	0x004002c1
  400f08:	00400835 	.word	0x00400835
  400f0c:	00400861 	.word	0x00400861
  400f10:	00400859 	.word	0x00400859
  400f14:	00400851 	.word	0x00400851
  400f18:	00405624 	.word	0x00405624
  400f1c:	00405620 	.word	0x00405620
  400f20:	004002e9 	.word	0x004002e9
  400f24:	20001fac 	.word	0x20001fac

00400f28 <__libc_init_array>:
  400f28:	b570      	push	{r4, r5, r6, lr}
  400f2a:	4e0f      	ldr	r6, [pc, #60]	; (400f68 <__libc_init_array+0x40>)
  400f2c:	4d0f      	ldr	r5, [pc, #60]	; (400f6c <__libc_init_array+0x44>)
  400f2e:	1b76      	subs	r6, r6, r5
  400f30:	10b6      	asrs	r6, r6, #2
  400f32:	bf18      	it	ne
  400f34:	2400      	movne	r4, #0
  400f36:	d005      	beq.n	400f44 <__libc_init_array+0x1c>
  400f38:	3401      	adds	r4, #1
  400f3a:	f855 3b04 	ldr.w	r3, [r5], #4
  400f3e:	4798      	blx	r3
  400f40:	42a6      	cmp	r6, r4
  400f42:	d1f9      	bne.n	400f38 <__libc_init_array+0x10>
  400f44:	4e0a      	ldr	r6, [pc, #40]	; (400f70 <__libc_init_array+0x48>)
  400f46:	4d0b      	ldr	r5, [pc, #44]	; (400f74 <__libc_init_array+0x4c>)
  400f48:	1b76      	subs	r6, r6, r5
  400f4a:	f004 fbad 	bl	4056a8 <_init>
  400f4e:	10b6      	asrs	r6, r6, #2
  400f50:	bf18      	it	ne
  400f52:	2400      	movne	r4, #0
  400f54:	d006      	beq.n	400f64 <__libc_init_array+0x3c>
  400f56:	3401      	adds	r4, #1
  400f58:	f855 3b04 	ldr.w	r3, [r5], #4
  400f5c:	4798      	blx	r3
  400f5e:	42a6      	cmp	r6, r4
  400f60:	d1f9      	bne.n	400f56 <__libc_init_array+0x2e>
  400f62:	bd70      	pop	{r4, r5, r6, pc}
  400f64:	bd70      	pop	{r4, r5, r6, pc}
  400f66:	bf00      	nop
  400f68:	004056b4 	.word	0x004056b4
  400f6c:	004056b4 	.word	0x004056b4
  400f70:	004056bc 	.word	0x004056bc
  400f74:	004056b4 	.word	0x004056b4

00400f78 <iprintf>:
  400f78:	b40f      	push	{r0, r1, r2, r3}
  400f7a:	b500      	push	{lr}
  400f7c:	4907      	ldr	r1, [pc, #28]	; (400f9c <iprintf+0x24>)
  400f7e:	b083      	sub	sp, #12
  400f80:	ab04      	add	r3, sp, #16
  400f82:	6808      	ldr	r0, [r1, #0]
  400f84:	f853 2b04 	ldr.w	r2, [r3], #4
  400f88:	6881      	ldr	r1, [r0, #8]
  400f8a:	9301      	str	r3, [sp, #4]
  400f8c:	f000 f97a 	bl	401284 <_vfiprintf_r>
  400f90:	b003      	add	sp, #12
  400f92:	f85d eb04 	ldr.w	lr, [sp], #4
  400f96:	b004      	add	sp, #16
  400f98:	4770      	bx	lr
  400f9a:	bf00      	nop
  400f9c:	20000430 	.word	0x20000430

00400fa0 <memset>:
  400fa0:	b470      	push	{r4, r5, r6}
  400fa2:	0784      	lsls	r4, r0, #30
  400fa4:	d046      	beq.n	401034 <memset+0x94>
  400fa6:	1e54      	subs	r4, r2, #1
  400fa8:	2a00      	cmp	r2, #0
  400faa:	d041      	beq.n	401030 <memset+0x90>
  400fac:	b2cd      	uxtb	r5, r1
  400fae:	4603      	mov	r3, r0
  400fb0:	e002      	b.n	400fb8 <memset+0x18>
  400fb2:	1e62      	subs	r2, r4, #1
  400fb4:	b3e4      	cbz	r4, 401030 <memset+0x90>
  400fb6:	4614      	mov	r4, r2
  400fb8:	f803 5b01 	strb.w	r5, [r3], #1
  400fbc:	079a      	lsls	r2, r3, #30
  400fbe:	d1f8      	bne.n	400fb2 <memset+0x12>
  400fc0:	2c03      	cmp	r4, #3
  400fc2:	d92e      	bls.n	401022 <memset+0x82>
  400fc4:	b2cd      	uxtb	r5, r1
  400fc6:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
  400fca:	2c0f      	cmp	r4, #15
  400fcc:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
  400fd0:	d919      	bls.n	401006 <memset+0x66>
  400fd2:	f103 0210 	add.w	r2, r3, #16
  400fd6:	4626      	mov	r6, r4
  400fd8:	3e10      	subs	r6, #16
  400fda:	2e0f      	cmp	r6, #15
  400fdc:	f842 5c10 	str.w	r5, [r2, #-16]
  400fe0:	f842 5c0c 	str.w	r5, [r2, #-12]
  400fe4:	f842 5c08 	str.w	r5, [r2, #-8]
  400fe8:	f842 5c04 	str.w	r5, [r2, #-4]
  400fec:	f102 0210 	add.w	r2, r2, #16
  400ff0:	d8f2      	bhi.n	400fd8 <memset+0x38>
  400ff2:	f1a4 0210 	sub.w	r2, r4, #16
  400ff6:	f022 020f 	bic.w	r2, r2, #15
  400ffa:	f004 040f 	and.w	r4, r4, #15
  400ffe:	3210      	adds	r2, #16
  401000:	2c03      	cmp	r4, #3
  401002:	4413      	add	r3, r2
  401004:	d90d      	bls.n	401022 <memset+0x82>
  401006:	461e      	mov	r6, r3
  401008:	4622      	mov	r2, r4
  40100a:	3a04      	subs	r2, #4
  40100c:	2a03      	cmp	r2, #3
  40100e:	f846 5b04 	str.w	r5, [r6], #4
  401012:	d8fa      	bhi.n	40100a <memset+0x6a>
  401014:	1f22      	subs	r2, r4, #4
  401016:	f022 0203 	bic.w	r2, r2, #3
  40101a:	3204      	adds	r2, #4
  40101c:	4413      	add	r3, r2
  40101e:	f004 0403 	and.w	r4, r4, #3
  401022:	b12c      	cbz	r4, 401030 <memset+0x90>
  401024:	b2c9      	uxtb	r1, r1
  401026:	441c      	add	r4, r3
  401028:	f803 1b01 	strb.w	r1, [r3], #1
  40102c:	42a3      	cmp	r3, r4
  40102e:	d1fb      	bne.n	401028 <memset+0x88>
  401030:	bc70      	pop	{r4, r5, r6}
  401032:	4770      	bx	lr
  401034:	4614      	mov	r4, r2
  401036:	4603      	mov	r3, r0
  401038:	e7c2      	b.n	400fc0 <memset+0x20>
  40103a:	bf00      	nop

0040103c <_puts_r>:
  40103c:	b5f0      	push	{r4, r5, r6, r7, lr}
  40103e:	4604      	mov	r4, r0
  401040:	b089      	sub	sp, #36	; 0x24
  401042:	4608      	mov	r0, r1
  401044:	460d      	mov	r5, r1
  401046:	f000 f8b3 	bl	4011b0 <strlen>
  40104a:	68a3      	ldr	r3, [r4, #8]
  40104c:	4f11      	ldr	r7, [pc, #68]	; (401094 <_puts_r+0x58>)
  40104e:	899a      	ldrh	r2, [r3, #12]
  401050:	9504      	str	r5, [sp, #16]
  401052:	2102      	movs	r1, #2
  401054:	f100 0e01 	add.w	lr, r0, #1
  401058:	2601      	movs	r6, #1
  40105a:	ad04      	add	r5, sp, #16
  40105c:	9102      	str	r1, [sp, #8]
  40105e:	0491      	lsls	r1, r2, #18
  401060:	9005      	str	r0, [sp, #20]
  401062:	f8cd e00c 	str.w	lr, [sp, #12]
  401066:	9706      	str	r7, [sp, #24]
  401068:	9607      	str	r6, [sp, #28]
  40106a:	9501      	str	r5, [sp, #4]
  40106c:	d406      	bmi.n	40107c <_puts_r+0x40>
  40106e:	6e59      	ldr	r1, [r3, #100]	; 0x64
  401070:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
  401074:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
  401078:	819a      	strh	r2, [r3, #12]
  40107a:	6659      	str	r1, [r3, #100]	; 0x64
  40107c:	4620      	mov	r0, r4
  40107e:	4619      	mov	r1, r3
  401080:	aa01      	add	r2, sp, #4
  401082:	f001 faa3 	bl	4025cc <__sfvwrite_r>
  401086:	2800      	cmp	r0, #0
  401088:	bf14      	ite	ne
  40108a:	f04f 30ff 	movne.w	r0, #4294967295
  40108e:	200a      	moveq	r0, #10
  401090:	b009      	add	sp, #36	; 0x24
  401092:	bdf0      	pop	{r4, r5, r6, r7, pc}
  401094:	00405654 	.word	0x00405654

00401098 <puts>:
  401098:	4b02      	ldr	r3, [pc, #8]	; (4010a4 <puts+0xc>)
  40109a:	4601      	mov	r1, r0
  40109c:	6818      	ldr	r0, [r3, #0]
  40109e:	f7ff bfcd 	b.w	40103c <_puts_r>
  4010a2:	bf00      	nop
  4010a4:	20000430 	.word	0x20000430

004010a8 <setbuf>:
  4010a8:	2900      	cmp	r1, #0
  4010aa:	bf0c      	ite	eq
  4010ac:	2202      	moveq	r2, #2
  4010ae:	2200      	movne	r2, #0
  4010b0:	f44f 6380 	mov.w	r3, #1024	; 0x400
  4010b4:	f000 b800 	b.w	4010b8 <setvbuf>

004010b8 <setvbuf>:
  4010b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4010bc:	4c3a      	ldr	r4, [pc, #232]	; (4011a8 <setvbuf+0xf0>)
  4010be:	6826      	ldr	r6, [r4, #0]
  4010c0:	460d      	mov	r5, r1
  4010c2:	4604      	mov	r4, r0
  4010c4:	4690      	mov	r8, r2
  4010c6:	461f      	mov	r7, r3
  4010c8:	b116      	cbz	r6, 4010d0 <setvbuf+0x18>
  4010ca:	6bb3      	ldr	r3, [r6, #56]	; 0x38
  4010cc:	2b00      	cmp	r3, #0
  4010ce:	d03c      	beq.n	40114a <setvbuf+0x92>
  4010d0:	f1b8 0f02 	cmp.w	r8, #2
  4010d4:	d82f      	bhi.n	401136 <setvbuf+0x7e>
  4010d6:	2f00      	cmp	r7, #0
  4010d8:	db2d      	blt.n	401136 <setvbuf+0x7e>
  4010da:	4621      	mov	r1, r4
  4010dc:	4630      	mov	r0, r6
  4010de:	f001 f831 	bl	402144 <_fflush_r>
  4010e2:	89a1      	ldrh	r1, [r4, #12]
  4010e4:	2300      	movs	r3, #0
  4010e6:	6063      	str	r3, [r4, #4]
  4010e8:	61a3      	str	r3, [r4, #24]
  4010ea:	060b      	lsls	r3, r1, #24
  4010ec:	d427      	bmi.n	40113e <setvbuf+0x86>
  4010ee:	f021 0183 	bic.w	r1, r1, #131	; 0x83
  4010f2:	b289      	uxth	r1, r1
  4010f4:	f1b8 0f02 	cmp.w	r8, #2
  4010f8:	81a1      	strh	r1, [r4, #12]
  4010fa:	d02a      	beq.n	401152 <setvbuf+0x9a>
  4010fc:	2d00      	cmp	r5, #0
  4010fe:	d036      	beq.n	40116e <setvbuf+0xb6>
  401100:	f1b8 0f01 	cmp.w	r8, #1
  401104:	d011      	beq.n	40112a <setvbuf+0x72>
  401106:	b289      	uxth	r1, r1
  401108:	f001 0008 	and.w	r0, r1, #8
  40110c:	4b27      	ldr	r3, [pc, #156]	; (4011ac <setvbuf+0xf4>)
  40110e:	63f3      	str	r3, [r6, #60]	; 0x3c
  401110:	b280      	uxth	r0, r0
  401112:	6025      	str	r5, [r4, #0]
  401114:	6125      	str	r5, [r4, #16]
  401116:	6167      	str	r7, [r4, #20]
  401118:	b178      	cbz	r0, 40113a <setvbuf+0x82>
  40111a:	f011 0f03 	tst.w	r1, #3
  40111e:	bf18      	it	ne
  401120:	2700      	movne	r7, #0
  401122:	60a7      	str	r7, [r4, #8]
  401124:	2000      	movs	r0, #0
  401126:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40112a:	f041 0101 	orr.w	r1, r1, #1
  40112e:	427b      	negs	r3, r7
  401130:	81a1      	strh	r1, [r4, #12]
  401132:	61a3      	str	r3, [r4, #24]
  401134:	e7e7      	b.n	401106 <setvbuf+0x4e>
  401136:	f04f 30ff 	mov.w	r0, #4294967295
  40113a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40113e:	6921      	ldr	r1, [r4, #16]
  401140:	4630      	mov	r0, r6
  401142:	f001 f96b 	bl	40241c <_free_r>
  401146:	89a1      	ldrh	r1, [r4, #12]
  401148:	e7d1      	b.n	4010ee <setvbuf+0x36>
  40114a:	4630      	mov	r0, r6
  40114c:	f001 f88e 	bl	40226c <__sinit>
  401150:	e7be      	b.n	4010d0 <setvbuf+0x18>
  401152:	2000      	movs	r0, #0
  401154:	f104 0343 	add.w	r3, r4, #67	; 0x43
  401158:	f041 0102 	orr.w	r1, r1, #2
  40115c:	2500      	movs	r5, #0
  40115e:	2201      	movs	r2, #1
  401160:	81a1      	strh	r1, [r4, #12]
  401162:	60a5      	str	r5, [r4, #8]
  401164:	6023      	str	r3, [r4, #0]
  401166:	6123      	str	r3, [r4, #16]
  401168:	6162      	str	r2, [r4, #20]
  40116a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40116e:	2f00      	cmp	r7, #0
  401170:	bf08      	it	eq
  401172:	f44f 6780 	moveq.w	r7, #1024	; 0x400
  401176:	4638      	mov	r0, r7
  401178:	f001 fc58 	bl	402a2c <malloc>
  40117c:	4605      	mov	r5, r0
  40117e:	b128      	cbz	r0, 40118c <setvbuf+0xd4>
  401180:	89a1      	ldrh	r1, [r4, #12]
  401182:	f041 0180 	orr.w	r1, r1, #128	; 0x80
  401186:	b289      	uxth	r1, r1
  401188:	81a1      	strh	r1, [r4, #12]
  40118a:	e7b9      	b.n	401100 <setvbuf+0x48>
  40118c:	f44f 6080 	mov.w	r0, #1024	; 0x400
  401190:	f001 fc4c 	bl	402a2c <malloc>
  401194:	4605      	mov	r5, r0
  401196:	b918      	cbnz	r0, 4011a0 <setvbuf+0xe8>
  401198:	89a1      	ldrh	r1, [r4, #12]
  40119a:	f04f 30ff 	mov.w	r0, #4294967295
  40119e:	e7d9      	b.n	401154 <setvbuf+0x9c>
  4011a0:	f44f 6780 	mov.w	r7, #1024	; 0x400
  4011a4:	e7ec      	b.n	401180 <setvbuf+0xc8>
  4011a6:	bf00      	nop
  4011a8:	20000430 	.word	0x20000430
  4011ac:	00402171 	.word	0x00402171

004011b0 <strlen>:
  4011b0:	f020 0103 	bic.w	r1, r0, #3
  4011b4:	f010 0003 	ands.w	r0, r0, #3
  4011b8:	f1c0 0000 	rsb	r0, r0, #0
  4011bc:	f851 3b04 	ldr.w	r3, [r1], #4
  4011c0:	f100 0c04 	add.w	ip, r0, #4
  4011c4:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
  4011c8:	f06f 0200 	mvn.w	r2, #0
  4011cc:	bf1c      	itt	ne
  4011ce:	fa22 f20c 	lsrne.w	r2, r2, ip
  4011d2:	4313      	orrne	r3, r2
  4011d4:	f04f 0c01 	mov.w	ip, #1
  4011d8:	ea4c 2c0c 	orr.w	ip, ip, ip, lsl #8
  4011dc:	ea4c 4c0c 	orr.w	ip, ip, ip, lsl #16
  4011e0:	eba3 020c 	sub.w	r2, r3, ip
  4011e4:	ea22 0203 	bic.w	r2, r2, r3
  4011e8:	ea12 12cc 	ands.w	r2, r2, ip, lsl #7
  4011ec:	bf04      	itt	eq
  4011ee:	f851 3b04 	ldreq.w	r3, [r1], #4
  4011f2:	3004      	addeq	r0, #4
  4011f4:	d0f4      	beq.n	4011e0 <strlen+0x30>
  4011f6:	f1c2 0100 	rsb	r1, r2, #0
  4011fa:	ea02 0201 	and.w	r2, r2, r1
  4011fe:	fab2 f282 	clz	r2, r2
  401202:	f1c2 021f 	rsb	r2, r2, #31
  401206:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
  40120a:	4770      	bx	lr

0040120c <__sprint_r.part.0>:
  40120c:	6e4b      	ldr	r3, [r1, #100]	; 0x64
  40120e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  401212:	049c      	lsls	r4, r3, #18
  401214:	460f      	mov	r7, r1
  401216:	4692      	mov	sl, r2
  401218:	d52b      	bpl.n	401272 <__sprint_r.part.0+0x66>
  40121a:	6893      	ldr	r3, [r2, #8]
  40121c:	6812      	ldr	r2, [r2, #0]
  40121e:	b333      	cbz	r3, 40126e <__sprint_r.part.0+0x62>
  401220:	4680      	mov	r8, r0
  401222:	f102 0908 	add.w	r9, r2, #8
  401226:	e919 0060 	ldmdb	r9, {r5, r6}
  40122a:	08b6      	lsrs	r6, r6, #2
  40122c:	d017      	beq.n	40125e <__sprint_r.part.0+0x52>
  40122e:	3d04      	subs	r5, #4
  401230:	2400      	movs	r4, #0
  401232:	e001      	b.n	401238 <__sprint_r.part.0+0x2c>
  401234:	42a6      	cmp	r6, r4
  401236:	d010      	beq.n	40125a <__sprint_r.part.0+0x4e>
  401238:	4640      	mov	r0, r8
  40123a:	f855 1f04 	ldr.w	r1, [r5, #4]!
  40123e:	463a      	mov	r2, r7
  401240:	f001 f88c 	bl	40235c <_fputwc_r>
  401244:	1c43      	adds	r3, r0, #1
  401246:	f104 0401 	add.w	r4, r4, #1
  40124a:	d1f3      	bne.n	401234 <__sprint_r.part.0+0x28>
  40124c:	2300      	movs	r3, #0
  40124e:	f8ca 3008 	str.w	r3, [sl, #8]
  401252:	f8ca 3004 	str.w	r3, [sl, #4]
  401256:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40125a:	f8da 3008 	ldr.w	r3, [sl, #8]
  40125e:	eba3 0386 	sub.w	r3, r3, r6, lsl #2
  401262:	f8ca 3008 	str.w	r3, [sl, #8]
  401266:	f109 0908 	add.w	r9, r9, #8
  40126a:	2b00      	cmp	r3, #0
  40126c:	d1db      	bne.n	401226 <__sprint_r.part.0+0x1a>
  40126e:	2000      	movs	r0, #0
  401270:	e7ec      	b.n	40124c <__sprint_r.part.0+0x40>
  401272:	f001 f9ab 	bl	4025cc <__sfvwrite_r>
  401276:	2300      	movs	r3, #0
  401278:	f8ca 3008 	str.w	r3, [sl, #8]
  40127c:	f8ca 3004 	str.w	r3, [sl, #4]
  401280:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00401284 <_vfiprintf_r>:
  401284:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  401288:	b0ab      	sub	sp, #172	; 0xac
  40128a:	461c      	mov	r4, r3
  40128c:	9100      	str	r1, [sp, #0]
  40128e:	4693      	mov	fp, r2
  401290:	9304      	str	r3, [sp, #16]
  401292:	9001      	str	r0, [sp, #4]
  401294:	b118      	cbz	r0, 40129e <_vfiprintf_r+0x1a>
  401296:	6b83      	ldr	r3, [r0, #56]	; 0x38
  401298:	2b00      	cmp	r3, #0
  40129a:	f000 80e3 	beq.w	401464 <_vfiprintf_r+0x1e0>
  40129e:	9b00      	ldr	r3, [sp, #0]
  4012a0:	8999      	ldrh	r1, [r3, #12]
  4012a2:	b28a      	uxth	r2, r1
  4012a4:	0490      	lsls	r0, r2, #18
  4012a6:	d408      	bmi.n	4012ba <_vfiprintf_r+0x36>
  4012a8:	4618      	mov	r0, r3
  4012aa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
  4012ac:	f441 5200 	orr.w	r2, r1, #8192	; 0x2000
  4012b0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  4012b4:	8182      	strh	r2, [r0, #12]
  4012b6:	6643      	str	r3, [r0, #100]	; 0x64
  4012b8:	b292      	uxth	r2, r2
  4012ba:	0711      	lsls	r1, r2, #28
  4012bc:	f140 80b2 	bpl.w	401424 <_vfiprintf_r+0x1a0>
  4012c0:	9b00      	ldr	r3, [sp, #0]
  4012c2:	691b      	ldr	r3, [r3, #16]
  4012c4:	2b00      	cmp	r3, #0
  4012c6:	f000 80ad 	beq.w	401424 <_vfiprintf_r+0x1a0>
  4012ca:	f002 021a 	and.w	r2, r2, #26
  4012ce:	2a0a      	cmp	r2, #10
  4012d0:	f000 80b4 	beq.w	40143c <_vfiprintf_r+0x1b8>
  4012d4:	2300      	movs	r3, #0
  4012d6:	f10d 0a68 	add.w	sl, sp, #104	; 0x68
  4012da:	9309      	str	r3, [sp, #36]	; 0x24
  4012dc:	930f      	str	r3, [sp, #60]	; 0x3c
  4012de:	930e      	str	r3, [sp, #56]	; 0x38
  4012e0:	9302      	str	r3, [sp, #8]
  4012e2:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
  4012e6:	4654      	mov	r4, sl
  4012e8:	f89b 3000 	ldrb.w	r3, [fp]
  4012ec:	2b00      	cmp	r3, #0
  4012ee:	f000 84a3 	beq.w	401c38 <_vfiprintf_r+0x9b4>
  4012f2:	2b25      	cmp	r3, #37	; 0x25
  4012f4:	f000 84a0 	beq.w	401c38 <_vfiprintf_r+0x9b4>
  4012f8:	465a      	mov	r2, fp
  4012fa:	e001      	b.n	401300 <_vfiprintf_r+0x7c>
  4012fc:	2b25      	cmp	r3, #37	; 0x25
  4012fe:	d003      	beq.n	401308 <_vfiprintf_r+0x84>
  401300:	f812 3f01 	ldrb.w	r3, [r2, #1]!
  401304:	2b00      	cmp	r3, #0
  401306:	d1f9      	bne.n	4012fc <_vfiprintf_r+0x78>
  401308:	ebcb 0602 	rsb	r6, fp, r2
  40130c:	4615      	mov	r5, r2
  40130e:	b196      	cbz	r6, 401336 <_vfiprintf_r+0xb2>
  401310:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  401312:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  401314:	f8c4 b000 	str.w	fp, [r4]
  401318:	3301      	adds	r3, #1
  40131a:	4432      	add	r2, r6
  40131c:	2b07      	cmp	r3, #7
  40131e:	6066      	str	r6, [r4, #4]
  401320:	920f      	str	r2, [sp, #60]	; 0x3c
  401322:	930e      	str	r3, [sp, #56]	; 0x38
  401324:	dd79      	ble.n	40141a <_vfiprintf_r+0x196>
  401326:	2a00      	cmp	r2, #0
  401328:	f040 84af 	bne.w	401c8a <_vfiprintf_r+0xa06>
  40132c:	9b02      	ldr	r3, [sp, #8]
  40132e:	920e      	str	r2, [sp, #56]	; 0x38
  401330:	4433      	add	r3, r6
  401332:	4654      	mov	r4, sl
  401334:	9302      	str	r3, [sp, #8]
  401336:	782b      	ldrb	r3, [r5, #0]
  401338:	2b00      	cmp	r3, #0
  40133a:	f000 8360 	beq.w	4019fe <_vfiprintf_r+0x77a>
  40133e:	2100      	movs	r1, #0
  401340:	f04f 0300 	mov.w	r3, #0
  401344:	f04f 3cff 	mov.w	ip, #4294967295
  401348:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
  40134c:	1c68      	adds	r0, r5, #1
  40134e:	786b      	ldrb	r3, [r5, #1]
  401350:	4688      	mov	r8, r1
  401352:	460d      	mov	r5, r1
  401354:	4666      	mov	r6, ip
  401356:	f100 0b01 	add.w	fp, r0, #1
  40135a:	f1a3 0220 	sub.w	r2, r3, #32
  40135e:	2a58      	cmp	r2, #88	; 0x58
  401360:	f200 82ab 	bhi.w	4018ba <_vfiprintf_r+0x636>
  401364:	e8df f012 	tbh	[pc, r2, lsl #1]
  401368:	02a9029b 	.word	0x02a9029b
  40136c:	02a302a9 	.word	0x02a302a9
  401370:	02a902a9 	.word	0x02a902a9
  401374:	02a902a9 	.word	0x02a902a9
  401378:	02a902a9 	.word	0x02a902a9
  40137c:	02620255 	.word	0x02620255
  401380:	010d02a9 	.word	0x010d02a9
  401384:	02a9026e 	.word	0x02a9026e
  401388:	012f0129 	.word	0x012f0129
  40138c:	012f012f 	.word	0x012f012f
  401390:	012f012f 	.word	0x012f012f
  401394:	012f012f 	.word	0x012f012f
  401398:	012f012f 	.word	0x012f012f
  40139c:	02a902a9 	.word	0x02a902a9
  4013a0:	02a902a9 	.word	0x02a902a9
  4013a4:	02a902a9 	.word	0x02a902a9
  4013a8:	02a902a9 	.word	0x02a902a9
  4013ac:	02a902a9 	.word	0x02a902a9
  4013b0:	02a9013d 	.word	0x02a9013d
  4013b4:	02a902a9 	.word	0x02a902a9
  4013b8:	02a902a9 	.word	0x02a902a9
  4013bc:	02a902a9 	.word	0x02a902a9
  4013c0:	02a902a9 	.word	0x02a902a9
  4013c4:	017402a9 	.word	0x017402a9
  4013c8:	02a902a9 	.word	0x02a902a9
  4013cc:	02a902a9 	.word	0x02a902a9
  4013d0:	018b02a9 	.word	0x018b02a9
  4013d4:	02a902a9 	.word	0x02a902a9
  4013d8:	02a901a3 	.word	0x02a901a3
  4013dc:	02a902a9 	.word	0x02a902a9
  4013e0:	02a902a9 	.word	0x02a902a9
  4013e4:	02a902a9 	.word	0x02a902a9
  4013e8:	02a902a9 	.word	0x02a902a9
  4013ec:	01c702a9 	.word	0x01c702a9
  4013f0:	02a901da 	.word	0x02a901da
  4013f4:	02a902a9 	.word	0x02a902a9
  4013f8:	01da0123 	.word	0x01da0123
  4013fc:	02a902a9 	.word	0x02a902a9
  401400:	02a9024c 	.word	0x02a9024c
  401404:	0113028a 	.word	0x0113028a
  401408:	020701f3 	.word	0x020701f3
  40140c:	020d02a9 	.word	0x020d02a9
  401410:	008102a9 	.word	0x008102a9
  401414:	02a902a9 	.word	0x02a902a9
  401418:	0233      	.short	0x0233
  40141a:	3408      	adds	r4, #8
  40141c:	9b02      	ldr	r3, [sp, #8]
  40141e:	4433      	add	r3, r6
  401420:	9302      	str	r3, [sp, #8]
  401422:	e788      	b.n	401336 <_vfiprintf_r+0xb2>
  401424:	9801      	ldr	r0, [sp, #4]
  401426:	9900      	ldr	r1, [sp, #0]
  401428:	f000 fd70 	bl	401f0c <__swsetup_r>
  40142c:	b9a8      	cbnz	r0, 40145a <_vfiprintf_r+0x1d6>
  40142e:	9b00      	ldr	r3, [sp, #0]
  401430:	899a      	ldrh	r2, [r3, #12]
  401432:	f002 021a 	and.w	r2, r2, #26
  401436:	2a0a      	cmp	r2, #10
  401438:	f47f af4c 	bne.w	4012d4 <_vfiprintf_r+0x50>
  40143c:	9b00      	ldr	r3, [sp, #0]
  40143e:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
  401442:	2b00      	cmp	r3, #0
  401444:	f6ff af46 	blt.w	4012d4 <_vfiprintf_r+0x50>
  401448:	9801      	ldr	r0, [sp, #4]
  40144a:	9900      	ldr	r1, [sp, #0]
  40144c:	465a      	mov	r2, fp
  40144e:	4623      	mov	r3, r4
  401450:	f000 fd20 	bl	401e94 <__sbprintf>
  401454:	b02b      	add	sp, #172	; 0xac
  401456:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40145a:	f04f 30ff 	mov.w	r0, #4294967295
  40145e:	b02b      	add	sp, #172	; 0xac
  401460:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  401464:	f000 ff02 	bl	40226c <__sinit>
  401468:	e719      	b.n	40129e <_vfiprintf_r+0x1a>
  40146a:	f018 0f20 	tst.w	r8, #32
  40146e:	9503      	str	r5, [sp, #12]
  401470:	46b4      	mov	ip, r6
  401472:	f000 810c 	beq.w	40168e <_vfiprintf_r+0x40a>
  401476:	9b04      	ldr	r3, [sp, #16]
  401478:	3307      	adds	r3, #7
  40147a:	f023 0307 	bic.w	r3, r3, #7
  40147e:	f103 0208 	add.w	r2, r3, #8
  401482:	e9d3 6700 	ldrd	r6, r7, [r3]
  401486:	9204      	str	r2, [sp, #16]
  401488:	2301      	movs	r3, #1
  40148a:	f04f 0200 	mov.w	r2, #0
  40148e:	f88d 202f 	strb.w	r2, [sp, #47]	; 0x2f
  401492:	46e1      	mov	r9, ip
  401494:	2500      	movs	r5, #0
  401496:	f1bc 0f00 	cmp.w	ip, #0
  40149a:	bfa8      	it	ge
  40149c:	f028 0880 	bicge.w	r8, r8, #128	; 0x80
  4014a0:	ea56 0207 	orrs.w	r2, r6, r7
  4014a4:	f040 80c4 	bne.w	401630 <_vfiprintf_r+0x3ac>
  4014a8:	f1bc 0f00 	cmp.w	ip, #0
  4014ac:	f000 8381 	beq.w	401bb2 <_vfiprintf_r+0x92e>
  4014b0:	2b01      	cmp	r3, #1
  4014b2:	f000 80c5 	beq.w	401640 <_vfiprintf_r+0x3bc>
  4014b6:	2b02      	cmp	r3, #2
  4014b8:	f000 8387 	beq.w	401bca <_vfiprintf_r+0x946>
  4014bc:	4651      	mov	r1, sl
  4014be:	08f2      	lsrs	r2, r6, #3
  4014c0:	ea42 7247 	orr.w	r2, r2, r7, lsl #29
  4014c4:	08f8      	lsrs	r0, r7, #3
  4014c6:	f006 0307 	and.w	r3, r6, #7
  4014ca:	4607      	mov	r7, r0
  4014cc:	4616      	mov	r6, r2
  4014ce:	3330      	adds	r3, #48	; 0x30
  4014d0:	ea56 0207 	orrs.w	r2, r6, r7
  4014d4:	f801 3d01 	strb.w	r3, [r1, #-1]!
  4014d8:	d1f1      	bne.n	4014be <_vfiprintf_r+0x23a>
  4014da:	f018 0f01 	tst.w	r8, #1
  4014de:	9107      	str	r1, [sp, #28]
  4014e0:	f040 83fc 	bne.w	401cdc <_vfiprintf_r+0xa58>
  4014e4:	ebc1 090a 	rsb	r9, r1, sl
  4014e8:	45e1      	cmp	r9, ip
  4014ea:	464e      	mov	r6, r9
  4014ec:	bfb8      	it	lt
  4014ee:	4666      	movlt	r6, ip
  4014f0:	b105      	cbz	r5, 4014f4 <_vfiprintf_r+0x270>
  4014f2:	3601      	adds	r6, #1
  4014f4:	f018 0302 	ands.w	r3, r8, #2
  4014f8:	9305      	str	r3, [sp, #20]
  4014fa:	bf18      	it	ne
  4014fc:	3602      	addne	r6, #2
  4014fe:	f018 0384 	ands.w	r3, r8, #132	; 0x84
  401502:	9306      	str	r3, [sp, #24]
  401504:	f040 81fa 	bne.w	4018fc <_vfiprintf_r+0x678>
  401508:	9b03      	ldr	r3, [sp, #12]
  40150a:	1b9d      	subs	r5, r3, r6
  40150c:	2d00      	cmp	r5, #0
  40150e:	f340 81f5 	ble.w	4018fc <_vfiprintf_r+0x678>
  401512:	2d10      	cmp	r5, #16
  401514:	f340 848c 	ble.w	401e30 <_vfiprintf_r+0xbac>
  401518:	f8dd e038 	ldr.w	lr, [sp, #56]	; 0x38
  40151c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  40151e:	4fc6      	ldr	r7, [pc, #792]	; (401838 <_vfiprintf_r+0x5b4>)
  401520:	4620      	mov	r0, r4
  401522:	2310      	movs	r3, #16
  401524:	4664      	mov	r4, ip
  401526:	4671      	mov	r1, lr
  401528:	4684      	mov	ip, r0
  40152a:	e007      	b.n	40153c <_vfiprintf_r+0x2b8>
  40152c:	f101 0e02 	add.w	lr, r1, #2
  401530:	f10c 0c08 	add.w	ip, ip, #8
  401534:	4601      	mov	r1, r0
  401536:	3d10      	subs	r5, #16
  401538:	2d10      	cmp	r5, #16
  40153a:	dd13      	ble.n	401564 <_vfiprintf_r+0x2e0>
  40153c:	1c48      	adds	r0, r1, #1
  40153e:	3210      	adds	r2, #16
  401540:	2807      	cmp	r0, #7
  401542:	920f      	str	r2, [sp, #60]	; 0x3c
  401544:	f8cc 7000 	str.w	r7, [ip]
  401548:	f8cc 3004 	str.w	r3, [ip, #4]
  40154c:	900e      	str	r0, [sp, #56]	; 0x38
  40154e:	dded      	ble.n	40152c <_vfiprintf_r+0x2a8>
  401550:	2a00      	cmp	r2, #0
  401552:	f040 81c3 	bne.w	4018dc <_vfiprintf_r+0x658>
  401556:	3d10      	subs	r5, #16
  401558:	2d10      	cmp	r5, #16
  40155a:	4611      	mov	r1, r2
  40155c:	f04f 0e01 	mov.w	lr, #1
  401560:	46d4      	mov	ip, sl
  401562:	dceb      	bgt.n	40153c <_vfiprintf_r+0x2b8>
  401564:	4663      	mov	r3, ip
  401566:	4671      	mov	r1, lr
  401568:	46a4      	mov	ip, r4
  40156a:	461c      	mov	r4, r3
  40156c:	442a      	add	r2, r5
  40156e:	2907      	cmp	r1, #7
  401570:	920f      	str	r2, [sp, #60]	; 0x3c
  401572:	6027      	str	r7, [r4, #0]
  401574:	6065      	str	r5, [r4, #4]
  401576:	910e      	str	r1, [sp, #56]	; 0x38
  401578:	f300 8346 	bgt.w	401c08 <_vfiprintf_r+0x984>
  40157c:	3408      	adds	r4, #8
  40157e:	1c48      	adds	r0, r1, #1
  401580:	e1bf      	b.n	401902 <_vfiprintf_r+0x67e>
  401582:	4658      	mov	r0, fp
  401584:	f048 0804 	orr.w	r8, r8, #4
  401588:	f89b 3000 	ldrb.w	r3, [fp]
  40158c:	e6e3      	b.n	401356 <_vfiprintf_r+0xd2>
  40158e:	f018 0320 	ands.w	r3, r8, #32
  401592:	9503      	str	r5, [sp, #12]
  401594:	46b4      	mov	ip, r6
  401596:	d062      	beq.n	40165e <_vfiprintf_r+0x3da>
  401598:	9b04      	ldr	r3, [sp, #16]
  40159a:	3307      	adds	r3, #7
  40159c:	f023 0307 	bic.w	r3, r3, #7
  4015a0:	f103 0208 	add.w	r2, r3, #8
  4015a4:	e9d3 6700 	ldrd	r6, r7, [r3]
  4015a8:	9204      	str	r2, [sp, #16]
  4015aa:	2300      	movs	r3, #0
  4015ac:	e76d      	b.n	40148a <_vfiprintf_r+0x206>
  4015ae:	f048 0840 	orr.w	r8, r8, #64	; 0x40
  4015b2:	f89b 3000 	ldrb.w	r3, [fp]
  4015b6:	4658      	mov	r0, fp
  4015b8:	e6cd      	b.n	401356 <_vfiprintf_r+0xd2>
  4015ba:	f048 0880 	orr.w	r8, r8, #128	; 0x80
  4015be:	f89b 3000 	ldrb.w	r3, [fp]
  4015c2:	4658      	mov	r0, fp
  4015c4:	e6c7      	b.n	401356 <_vfiprintf_r+0xd2>
  4015c6:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
  4015ca:	2500      	movs	r5, #0
  4015cc:	f81b 3b01 	ldrb.w	r3, [fp], #1
  4015d0:	eb05 0585 	add.w	r5, r5, r5, lsl #2
  4015d4:	eb02 0545 	add.w	r5, r2, r5, lsl #1
  4015d8:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
  4015dc:	2a09      	cmp	r2, #9
  4015de:	d9f5      	bls.n	4015cc <_vfiprintf_r+0x348>
  4015e0:	e6bb      	b.n	40135a <_vfiprintf_r+0xd6>
  4015e2:	f048 0810 	orr.w	r8, r8, #16
  4015e6:	f018 0f20 	tst.w	r8, #32
  4015ea:	9503      	str	r5, [sp, #12]
  4015ec:	46b4      	mov	ip, r6
  4015ee:	f88d 102f 	strb.w	r1, [sp, #47]	; 0x2f
  4015f2:	f000 809b 	beq.w	40172c <_vfiprintf_r+0x4a8>
  4015f6:	9904      	ldr	r1, [sp, #16]
  4015f8:	3107      	adds	r1, #7
  4015fa:	f021 0107 	bic.w	r1, r1, #7
  4015fe:	e9d1 2300 	ldrd	r2, r3, [r1]
  401602:	3108      	adds	r1, #8
  401604:	9104      	str	r1, [sp, #16]
  401606:	4616      	mov	r6, r2
  401608:	461f      	mov	r7, r3
  40160a:	2a00      	cmp	r2, #0
  40160c:	f173 0300 	sbcs.w	r3, r3, #0
  401610:	f2c0 83a6 	blt.w	401d60 <_vfiprintf_r+0xadc>
  401614:	f1bc 0f00 	cmp.w	ip, #0
  401618:	bfa8      	it	ge
  40161a:	f028 0880 	bicge.w	r8, r8, #128	; 0x80
  40161e:	ea56 0207 	orrs.w	r2, r6, r7
  401622:	f89d 502f 	ldrb.w	r5, [sp, #47]	; 0x2f
  401626:	46e1      	mov	r9, ip
  401628:	f04f 0301 	mov.w	r3, #1
  40162c:	f43f af3c 	beq.w	4014a8 <_vfiprintf_r+0x224>
  401630:	2b01      	cmp	r3, #1
  401632:	f47f af40 	bne.w	4014b6 <_vfiprintf_r+0x232>
  401636:	2f00      	cmp	r7, #0
  401638:	bf08      	it	eq
  40163a:	2e0a      	cmpeq	r6, #10
  40163c:	f080 8334 	bcs.w	401ca8 <_vfiprintf_r+0xa24>
  401640:	ab2a      	add	r3, sp, #168	; 0xa8
  401642:	3630      	adds	r6, #48	; 0x30
  401644:	f803 6d41 	strb.w	r6, [r3, #-65]!
  401648:	ebc3 090a 	rsb	r9, r3, sl
  40164c:	9307      	str	r3, [sp, #28]
  40164e:	e74b      	b.n	4014e8 <_vfiprintf_r+0x264>
  401650:	f048 0810 	orr.w	r8, r8, #16
  401654:	f018 0320 	ands.w	r3, r8, #32
  401658:	9503      	str	r5, [sp, #12]
  40165a:	46b4      	mov	ip, r6
  40165c:	d19c      	bne.n	401598 <_vfiprintf_r+0x314>
  40165e:	f018 0210 	ands.w	r2, r8, #16
  401662:	f040 82f7 	bne.w	401c54 <_vfiprintf_r+0x9d0>
  401666:	f018 0340 	ands.w	r3, r8, #64	; 0x40
  40166a:	f000 82f3 	beq.w	401c54 <_vfiprintf_r+0x9d0>
  40166e:	9904      	ldr	r1, [sp, #16]
  401670:	4613      	mov	r3, r2
  401672:	460a      	mov	r2, r1
  401674:	3204      	adds	r2, #4
  401676:	880e      	ldrh	r6, [r1, #0]
  401678:	9204      	str	r2, [sp, #16]
  40167a:	2700      	movs	r7, #0
  40167c:	e705      	b.n	40148a <_vfiprintf_r+0x206>
  40167e:	f048 0810 	orr.w	r8, r8, #16
  401682:	f018 0f20 	tst.w	r8, #32
  401686:	9503      	str	r5, [sp, #12]
  401688:	46b4      	mov	ip, r6
  40168a:	f47f aef4 	bne.w	401476 <_vfiprintf_r+0x1f2>
  40168e:	9a04      	ldr	r2, [sp, #16]
  401690:	f018 0f10 	tst.w	r8, #16
  401694:	4613      	mov	r3, r2
  401696:	f040 82e4 	bne.w	401c62 <_vfiprintf_r+0x9de>
  40169a:	f018 0f40 	tst.w	r8, #64	; 0x40
  40169e:	f000 82e0 	beq.w	401c62 <_vfiprintf_r+0x9de>
  4016a2:	8816      	ldrh	r6, [r2, #0]
  4016a4:	3204      	adds	r2, #4
  4016a6:	2700      	movs	r7, #0
  4016a8:	2301      	movs	r3, #1
  4016aa:	9204      	str	r2, [sp, #16]
  4016ac:	e6ed      	b.n	40148a <_vfiprintf_r+0x206>
  4016ae:	4a63      	ldr	r2, [pc, #396]	; (40183c <_vfiprintf_r+0x5b8>)
  4016b0:	9503      	str	r5, [sp, #12]
  4016b2:	f018 0f20 	tst.w	r8, #32
  4016b6:	46b4      	mov	ip, r6
  4016b8:	f88d 102f 	strb.w	r1, [sp, #47]	; 0x2f
  4016bc:	9209      	str	r2, [sp, #36]	; 0x24
  4016be:	f000 8090 	beq.w	4017e2 <_vfiprintf_r+0x55e>
  4016c2:	9a04      	ldr	r2, [sp, #16]
  4016c4:	3207      	adds	r2, #7
  4016c6:	f022 0207 	bic.w	r2, r2, #7
  4016ca:	e9d2 6700 	ldrd	r6, r7, [r2]
  4016ce:	f102 0108 	add.w	r1, r2, #8
  4016d2:	9104      	str	r1, [sp, #16]
  4016d4:	f018 0f01 	tst.w	r8, #1
  4016d8:	f000 8290 	beq.w	401bfc <_vfiprintf_r+0x978>
  4016dc:	ea56 0207 	orrs.w	r2, r6, r7
  4016e0:	f000 828c 	beq.w	401bfc <_vfiprintf_r+0x978>
  4016e4:	2230      	movs	r2, #48	; 0x30
  4016e6:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
  4016ea:	f048 0802 	orr.w	r8, r8, #2
  4016ee:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
  4016f2:	2302      	movs	r3, #2
  4016f4:	e6c9      	b.n	40148a <_vfiprintf_r+0x206>
  4016f6:	9a04      	ldr	r2, [sp, #16]
  4016f8:	9503      	str	r5, [sp, #12]
  4016fa:	6813      	ldr	r3, [r2, #0]
  4016fc:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
  401700:	4613      	mov	r3, r2
  401702:	3304      	adds	r3, #4
  401704:	2601      	movs	r6, #1
  401706:	f04f 0100 	mov.w	r1, #0
  40170a:	9304      	str	r3, [sp, #16]
  40170c:	ab10      	add	r3, sp, #64	; 0x40
  40170e:	f88d 102f 	strb.w	r1, [sp, #47]	; 0x2f
  401712:	46b1      	mov	r9, r6
  401714:	9307      	str	r3, [sp, #28]
  401716:	f04f 0c00 	mov.w	ip, #0
  40171a:	e6eb      	b.n	4014f4 <_vfiprintf_r+0x270>
  40171c:	f018 0f20 	tst.w	r8, #32
  401720:	9503      	str	r5, [sp, #12]
  401722:	46b4      	mov	ip, r6
  401724:	f88d 102f 	strb.w	r1, [sp, #47]	; 0x2f
  401728:	f47f af65 	bne.w	4015f6 <_vfiprintf_r+0x372>
  40172c:	f018 0f10 	tst.w	r8, #16
  401730:	f040 82a2 	bne.w	401c78 <_vfiprintf_r+0x9f4>
  401734:	f018 0f40 	tst.w	r8, #64	; 0x40
  401738:	f000 829e 	beq.w	401c78 <_vfiprintf_r+0x9f4>
  40173c:	9904      	ldr	r1, [sp, #16]
  40173e:	f9b1 6000 	ldrsh.w	r6, [r1]
  401742:	3104      	adds	r1, #4
  401744:	17f7      	asrs	r7, r6, #31
  401746:	4632      	mov	r2, r6
  401748:	463b      	mov	r3, r7
  40174a:	9104      	str	r1, [sp, #16]
  40174c:	e75d      	b.n	40160a <_vfiprintf_r+0x386>
  40174e:	9904      	ldr	r1, [sp, #16]
  401750:	9503      	str	r5, [sp, #12]
  401752:	2330      	movs	r3, #48	; 0x30
  401754:	460a      	mov	r2, r1
  401756:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
  40175a:	2378      	movs	r3, #120	; 0x78
  40175c:	3204      	adds	r2, #4
  40175e:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
  401762:	4b37      	ldr	r3, [pc, #220]	; (401840 <_vfiprintf_r+0x5bc>)
  401764:	9309      	str	r3, [sp, #36]	; 0x24
  401766:	46b4      	mov	ip, r6
  401768:	f048 0802 	orr.w	r8, r8, #2
  40176c:	680e      	ldr	r6, [r1, #0]
  40176e:	9204      	str	r2, [sp, #16]
  401770:	2700      	movs	r7, #0
  401772:	2302      	movs	r3, #2
  401774:	e689      	b.n	40148a <_vfiprintf_r+0x206>
  401776:	f048 0820 	orr.w	r8, r8, #32
  40177a:	f89b 3000 	ldrb.w	r3, [fp]
  40177e:	4658      	mov	r0, fp
  401780:	e5e9      	b.n	401356 <_vfiprintf_r+0xd2>
  401782:	9a04      	ldr	r2, [sp, #16]
  401784:	9503      	str	r5, [sp, #12]
  401786:	6813      	ldr	r3, [r2, #0]
  401788:	9307      	str	r3, [sp, #28]
  40178a:	f04f 0100 	mov.w	r1, #0
  40178e:	46b4      	mov	ip, r6
  401790:	f88d 102f 	strb.w	r1, [sp, #47]	; 0x2f
  401794:	1d16      	adds	r6, r2, #4
  401796:	2b00      	cmp	r3, #0
  401798:	f000 8350 	beq.w	401e3c <_vfiprintf_r+0xbb8>
  40179c:	f1bc 0f00 	cmp.w	ip, #0
  4017a0:	f2c0 832a 	blt.w	401df8 <_vfiprintf_r+0xb74>
  4017a4:	9d07      	ldr	r5, [sp, #28]
  4017a6:	f8cd c010 	str.w	ip, [sp, #16]
  4017aa:	4662      	mov	r2, ip
  4017ac:	4628      	mov	r0, r5
  4017ae:	2100      	movs	r1, #0
  4017b0:	f001 fbd6 	bl	402f60 <memchr>
  4017b4:	f8dd c010 	ldr.w	ip, [sp, #16]
  4017b8:	2800      	cmp	r0, #0
  4017ba:	f000 8350 	beq.w	401e5e <_vfiprintf_r+0xbda>
  4017be:	ebc5 0900 	rsb	r9, r5, r0
  4017c2:	9604      	str	r6, [sp, #16]
  4017c4:	f89d 502f 	ldrb.w	r5, [sp, #47]	; 0x2f
  4017c8:	f04f 0c00 	mov.w	ip, #0
  4017cc:	e68c      	b.n	4014e8 <_vfiprintf_r+0x264>
  4017ce:	4a1c      	ldr	r2, [pc, #112]	; (401840 <_vfiprintf_r+0x5bc>)
  4017d0:	9503      	str	r5, [sp, #12]
  4017d2:	f018 0f20 	tst.w	r8, #32
  4017d6:	46b4      	mov	ip, r6
  4017d8:	9209      	str	r2, [sp, #36]	; 0x24
  4017da:	f88d 102f 	strb.w	r1, [sp, #47]	; 0x2f
  4017de:	f47f af70 	bne.w	4016c2 <_vfiprintf_r+0x43e>
  4017e2:	9904      	ldr	r1, [sp, #16]
  4017e4:	f018 0f10 	tst.w	r8, #16
  4017e8:	460a      	mov	r2, r1
  4017ea:	f040 8240 	bne.w	401c6e <_vfiprintf_r+0x9ea>
  4017ee:	f018 0f40 	tst.w	r8, #64	; 0x40
  4017f2:	f000 823c 	beq.w	401c6e <_vfiprintf_r+0x9ea>
  4017f6:	3204      	adds	r2, #4
  4017f8:	880e      	ldrh	r6, [r1, #0]
  4017fa:	9204      	str	r2, [sp, #16]
  4017fc:	2700      	movs	r7, #0
  4017fe:	e769      	b.n	4016d4 <_vfiprintf_r+0x450>
  401800:	f89b 3000 	ldrb.w	r3, [fp]
  401804:	2b6c      	cmp	r3, #108	; 0x6c
  401806:	f000 82ea 	beq.w	401dde <_vfiprintf_r+0xb5a>
  40180a:	f048 0810 	orr.w	r8, r8, #16
  40180e:	4658      	mov	r0, fp
  401810:	e5a1      	b.n	401356 <_vfiprintf_r+0xd2>
  401812:	9a04      	ldr	r2, [sp, #16]
  401814:	6815      	ldr	r5, [r2, #0]
  401816:	4613      	mov	r3, r2
  401818:	2d00      	cmp	r5, #0
  40181a:	f103 0304 	add.w	r3, r3, #4
  40181e:	f2c0 82e6 	blt.w	401dee <_vfiprintf_r+0xb6a>
  401822:	9304      	str	r3, [sp, #16]
  401824:	f89b 3000 	ldrb.w	r3, [fp]
  401828:	4658      	mov	r0, fp
  40182a:	e594      	b.n	401356 <_vfiprintf_r+0xd2>
  40182c:	f89b 3000 	ldrb.w	r3, [fp]
  401830:	4658      	mov	r0, fp
  401832:	212b      	movs	r1, #43	; 0x2b
  401834:	e58f      	b.n	401356 <_vfiprintf_r+0xd2>
  401836:	bf00      	nop
  401838:	00405698 	.word	0x00405698
  40183c:	00405668 	.word	0x00405668
  401840:	0040567c 	.word	0x0040567c
  401844:	f89b 3000 	ldrb.w	r3, [fp]
  401848:	2b2a      	cmp	r3, #42	; 0x2a
  40184a:	f10b 0001 	add.w	r0, fp, #1
  40184e:	f000 830f 	beq.w	401e70 <_vfiprintf_r+0xbec>
  401852:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
  401856:	2a09      	cmp	r2, #9
  401858:	4683      	mov	fp, r0
  40185a:	f04f 0600 	mov.w	r6, #0
  40185e:	f63f ad7c 	bhi.w	40135a <_vfiprintf_r+0xd6>
  401862:	f81b 3b01 	ldrb.w	r3, [fp], #1
  401866:	eb06 0686 	add.w	r6, r6, r6, lsl #2
  40186a:	eb02 0646 	add.w	r6, r2, r6, lsl #1
  40186e:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
  401872:	2a09      	cmp	r2, #9
  401874:	d9f5      	bls.n	401862 <_vfiprintf_r+0x5de>
  401876:	ea46 76e6 	orr.w	r6, r6, r6, asr #31
  40187a:	e56e      	b.n	40135a <_vfiprintf_r+0xd6>
  40187c:	f018 0f20 	tst.w	r8, #32
  401880:	f88d 102f 	strb.w	r1, [sp, #47]	; 0x2f
  401884:	f000 8283 	beq.w	401d8e <_vfiprintf_r+0xb0a>
  401888:	9a04      	ldr	r2, [sp, #16]
  40188a:	9902      	ldr	r1, [sp, #8]
  40188c:	6813      	ldr	r3, [r2, #0]
  40188e:	17cf      	asrs	r7, r1, #31
  401890:	4608      	mov	r0, r1
  401892:	3204      	adds	r2, #4
  401894:	4639      	mov	r1, r7
  401896:	9204      	str	r2, [sp, #16]
  401898:	e9c3 0100 	strd	r0, r1, [r3]
  40189c:	e524      	b.n	4012e8 <_vfiprintf_r+0x64>
  40189e:	4658      	mov	r0, fp
  4018a0:	f89b 3000 	ldrb.w	r3, [fp]
  4018a4:	2900      	cmp	r1, #0
  4018a6:	f47f ad56 	bne.w	401356 <_vfiprintf_r+0xd2>
  4018aa:	2120      	movs	r1, #32
  4018ac:	e553      	b.n	401356 <_vfiprintf_r+0xd2>
  4018ae:	f048 0801 	orr.w	r8, r8, #1
  4018b2:	4658      	mov	r0, fp
  4018b4:	f89b 3000 	ldrb.w	r3, [fp]
  4018b8:	e54d      	b.n	401356 <_vfiprintf_r+0xd2>
  4018ba:	9503      	str	r5, [sp, #12]
  4018bc:	f88d 102f 	strb.w	r1, [sp, #47]	; 0x2f
  4018c0:	2b00      	cmp	r3, #0
  4018c2:	f000 809c 	beq.w	4019fe <_vfiprintf_r+0x77a>
  4018c6:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
  4018ca:	f04f 0300 	mov.w	r3, #0
  4018ce:	2601      	movs	r6, #1
  4018d0:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
  4018d4:	ab10      	add	r3, sp, #64	; 0x40
  4018d6:	46b1      	mov	r9, r6
  4018d8:	9307      	str	r3, [sp, #28]
  4018da:	e71c      	b.n	401716 <_vfiprintf_r+0x492>
  4018dc:	9801      	ldr	r0, [sp, #4]
  4018de:	9900      	ldr	r1, [sp, #0]
  4018e0:	9308      	str	r3, [sp, #32]
  4018e2:	aa0d      	add	r2, sp, #52	; 0x34
  4018e4:	f7ff fc92 	bl	40120c <__sprint_r.part.0>
  4018e8:	2800      	cmp	r0, #0
  4018ea:	f040 808f 	bne.w	401a0c <_vfiprintf_r+0x788>
  4018ee:	990e      	ldr	r1, [sp, #56]	; 0x38
  4018f0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  4018f2:	9b08      	ldr	r3, [sp, #32]
  4018f4:	f101 0e01 	add.w	lr, r1, #1
  4018f8:	46d4      	mov	ip, sl
  4018fa:	e61c      	b.n	401536 <_vfiprintf_r+0x2b2>
  4018fc:	990e      	ldr	r1, [sp, #56]	; 0x38
  4018fe:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  401900:	1c48      	adds	r0, r1, #1
  401902:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
  401906:	b16b      	cbz	r3, 401924 <_vfiprintf_r+0x6a0>
  401908:	3201      	adds	r2, #1
  40190a:	f10d 032f 	add.w	r3, sp, #47	; 0x2f
  40190e:	2101      	movs	r1, #1
  401910:	2807      	cmp	r0, #7
  401912:	920f      	str	r2, [sp, #60]	; 0x3c
  401914:	900e      	str	r0, [sp, #56]	; 0x38
  401916:	6023      	str	r3, [r4, #0]
  401918:	6061      	str	r1, [r4, #4]
  40191a:	f300 8134 	bgt.w	401b86 <_vfiprintf_r+0x902>
  40191e:	4601      	mov	r1, r0
  401920:	3408      	adds	r4, #8
  401922:	3001      	adds	r0, #1
  401924:	9b05      	ldr	r3, [sp, #20]
  401926:	b163      	cbz	r3, 401942 <_vfiprintf_r+0x6be>
  401928:	3202      	adds	r2, #2
  40192a:	a90c      	add	r1, sp, #48	; 0x30
  40192c:	2302      	movs	r3, #2
  40192e:	2807      	cmp	r0, #7
  401930:	920f      	str	r2, [sp, #60]	; 0x3c
  401932:	900e      	str	r0, [sp, #56]	; 0x38
  401934:	e884 000a 	stmia.w	r4, {r1, r3}
  401938:	f300 8134 	bgt.w	401ba4 <_vfiprintf_r+0x920>
  40193c:	4601      	mov	r1, r0
  40193e:	3408      	adds	r4, #8
  401940:	3001      	adds	r0, #1
  401942:	9b06      	ldr	r3, [sp, #24]
  401944:	2b80      	cmp	r3, #128	; 0x80
  401946:	f000 80d4 	beq.w	401af2 <_vfiprintf_r+0x86e>
  40194a:	ebc9 070c 	rsb	r7, r9, ip
  40194e:	2f00      	cmp	r7, #0
  401950:	dd2b      	ble.n	4019aa <_vfiprintf_r+0x726>
  401952:	2f10      	cmp	r7, #16
  401954:	4daa      	ldr	r5, [pc, #680]	; (401c00 <_vfiprintf_r+0x97c>)
  401956:	dd1f      	ble.n	401998 <_vfiprintf_r+0x714>
  401958:	46a6      	mov	lr, r4
  40195a:	2310      	movs	r3, #16
  40195c:	9c01      	ldr	r4, [sp, #4]
  40195e:	e007      	b.n	401970 <_vfiprintf_r+0x6ec>
  401960:	f101 0c02 	add.w	ip, r1, #2
  401964:	f10e 0e08 	add.w	lr, lr, #8
  401968:	4601      	mov	r1, r0
  40196a:	3f10      	subs	r7, #16
  40196c:	2f10      	cmp	r7, #16
  40196e:	dd11      	ble.n	401994 <_vfiprintf_r+0x710>
  401970:	1c48      	adds	r0, r1, #1
  401972:	3210      	adds	r2, #16
  401974:	2807      	cmp	r0, #7
  401976:	920f      	str	r2, [sp, #60]	; 0x3c
  401978:	f8ce 5000 	str.w	r5, [lr]
  40197c:	f8ce 3004 	str.w	r3, [lr, #4]
  401980:	900e      	str	r0, [sp, #56]	; 0x38
  401982:	dded      	ble.n	401960 <_vfiprintf_r+0x6dc>
  401984:	bb6a      	cbnz	r2, 4019e2 <_vfiprintf_r+0x75e>
  401986:	3f10      	subs	r7, #16
  401988:	2f10      	cmp	r7, #16
  40198a:	f04f 0c01 	mov.w	ip, #1
  40198e:	4611      	mov	r1, r2
  401990:	46d6      	mov	lr, sl
  401992:	dced      	bgt.n	401970 <_vfiprintf_r+0x6ec>
  401994:	4674      	mov	r4, lr
  401996:	4660      	mov	r0, ip
  401998:	443a      	add	r2, r7
  40199a:	2807      	cmp	r0, #7
  40199c:	920f      	str	r2, [sp, #60]	; 0x3c
  40199e:	e884 00a0 	stmia.w	r4, {r5, r7}
  4019a2:	900e      	str	r0, [sp, #56]	; 0x38
  4019a4:	dc3b      	bgt.n	401a1e <_vfiprintf_r+0x79a>
  4019a6:	3408      	adds	r4, #8
  4019a8:	3001      	adds	r0, #1
  4019aa:	eb02 0309 	add.w	r3, r2, r9
  4019ae:	9a07      	ldr	r2, [sp, #28]
  4019b0:	930f      	str	r3, [sp, #60]	; 0x3c
  4019b2:	2807      	cmp	r0, #7
  4019b4:	e884 0204 	stmia.w	r4, {r2, r9}
  4019b8:	900e      	str	r0, [sp, #56]	; 0x38
  4019ba:	dd3d      	ble.n	401a38 <_vfiprintf_r+0x7b4>
  4019bc:	2b00      	cmp	r3, #0
  4019be:	f040 813e 	bne.w	401c3e <_vfiprintf_r+0x9ba>
  4019c2:	f018 0f04 	tst.w	r8, #4
  4019c6:	930e      	str	r3, [sp, #56]	; 0x38
  4019c8:	f040 812f 	bne.w	401c2a <_vfiprintf_r+0x9a6>
  4019cc:	9b02      	ldr	r3, [sp, #8]
  4019ce:	9a03      	ldr	r2, [sp, #12]
  4019d0:	4296      	cmp	r6, r2
  4019d2:	bfac      	ite	ge
  4019d4:	199b      	addge	r3, r3, r6
  4019d6:	189b      	addlt	r3, r3, r2
  4019d8:	9302      	str	r3, [sp, #8]
  4019da:	2300      	movs	r3, #0
  4019dc:	930e      	str	r3, [sp, #56]	; 0x38
  4019de:	4654      	mov	r4, sl
  4019e0:	e482      	b.n	4012e8 <_vfiprintf_r+0x64>
  4019e2:	4620      	mov	r0, r4
  4019e4:	9900      	ldr	r1, [sp, #0]
  4019e6:	9305      	str	r3, [sp, #20]
  4019e8:	aa0d      	add	r2, sp, #52	; 0x34
  4019ea:	f7ff fc0f 	bl	40120c <__sprint_r.part.0>
  4019ee:	b968      	cbnz	r0, 401a0c <_vfiprintf_r+0x788>
  4019f0:	990e      	ldr	r1, [sp, #56]	; 0x38
  4019f2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  4019f4:	9b05      	ldr	r3, [sp, #20]
  4019f6:	f101 0c01 	add.w	ip, r1, #1
  4019fa:	46d6      	mov	lr, sl
  4019fc:	e7b5      	b.n	40196a <_vfiprintf_r+0x6e6>
  4019fe:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  401a00:	b123      	cbz	r3, 401a0c <_vfiprintf_r+0x788>
  401a02:	9801      	ldr	r0, [sp, #4]
  401a04:	9900      	ldr	r1, [sp, #0]
  401a06:	aa0d      	add	r2, sp, #52	; 0x34
  401a08:	f7ff fc00 	bl	40120c <__sprint_r.part.0>
  401a0c:	9b00      	ldr	r3, [sp, #0]
  401a0e:	899b      	ldrh	r3, [r3, #12]
  401a10:	065b      	lsls	r3, r3, #25
  401a12:	f53f ad22 	bmi.w	40145a <_vfiprintf_r+0x1d6>
  401a16:	9802      	ldr	r0, [sp, #8]
  401a18:	b02b      	add	sp, #172	; 0xac
  401a1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  401a1e:	2a00      	cmp	r2, #0
  401a20:	f040 8191 	bne.w	401d46 <_vfiprintf_r+0xac2>
  401a24:	2201      	movs	r2, #1
  401a26:	9907      	ldr	r1, [sp, #28]
  401a28:	f8cd 906c 	str.w	r9, [sp, #108]	; 0x6c
  401a2c:	464b      	mov	r3, r9
  401a2e:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
  401a32:	911a      	str	r1, [sp, #104]	; 0x68
  401a34:	920e      	str	r2, [sp, #56]	; 0x38
  401a36:	4654      	mov	r4, sl
  401a38:	f104 0208 	add.w	r2, r4, #8
  401a3c:	f018 0f04 	tst.w	r8, #4
  401a40:	d039      	beq.n	401ab6 <_vfiprintf_r+0x832>
  401a42:	9903      	ldr	r1, [sp, #12]
  401a44:	1b8d      	subs	r5, r1, r6
  401a46:	2d00      	cmp	r5, #0
  401a48:	dd35      	ble.n	401ab6 <_vfiprintf_r+0x832>
  401a4a:	2d10      	cmp	r5, #16
  401a4c:	f340 8202 	ble.w	401e54 <_vfiprintf_r+0xbd0>
  401a50:	980e      	ldr	r0, [sp, #56]	; 0x38
  401a52:	4f6c      	ldr	r7, [pc, #432]	; (401c04 <_vfiprintf_r+0x980>)
  401a54:	f8dd 8004 	ldr.w	r8, [sp, #4]
  401a58:	f8dd 9000 	ldr.w	r9, [sp]
  401a5c:	2410      	movs	r4, #16
  401a5e:	e006      	b.n	401a6e <_vfiprintf_r+0x7ea>
  401a60:	f100 0e02 	add.w	lr, r0, #2
  401a64:	3208      	adds	r2, #8
  401a66:	4608      	mov	r0, r1
  401a68:	3d10      	subs	r5, #16
  401a6a:	2d10      	cmp	r5, #16
  401a6c:	dd10      	ble.n	401a90 <_vfiprintf_r+0x80c>
  401a6e:	1c41      	adds	r1, r0, #1
  401a70:	3310      	adds	r3, #16
  401a72:	2907      	cmp	r1, #7
  401a74:	930f      	str	r3, [sp, #60]	; 0x3c
  401a76:	6017      	str	r7, [r2, #0]
  401a78:	6054      	str	r4, [r2, #4]
  401a7a:	910e      	str	r1, [sp, #56]	; 0x38
  401a7c:	ddf0      	ble.n	401a60 <_vfiprintf_r+0x7dc>
  401a7e:	2b00      	cmp	r3, #0
  401a80:	d12a      	bne.n	401ad8 <_vfiprintf_r+0x854>
  401a82:	3d10      	subs	r5, #16
  401a84:	2d10      	cmp	r5, #16
  401a86:	f04f 0e01 	mov.w	lr, #1
  401a8a:	4618      	mov	r0, r3
  401a8c:	4652      	mov	r2, sl
  401a8e:	dcee      	bgt.n	401a6e <_vfiprintf_r+0x7ea>
  401a90:	442b      	add	r3, r5
  401a92:	f1be 0f07 	cmp.w	lr, #7
  401a96:	930f      	str	r3, [sp, #60]	; 0x3c
  401a98:	6017      	str	r7, [r2, #0]
  401a9a:	6055      	str	r5, [r2, #4]
  401a9c:	f8cd e038 	str.w	lr, [sp, #56]	; 0x38
  401aa0:	dd09      	ble.n	401ab6 <_vfiprintf_r+0x832>
  401aa2:	2b00      	cmp	r3, #0
  401aa4:	d092      	beq.n	4019cc <_vfiprintf_r+0x748>
  401aa6:	9801      	ldr	r0, [sp, #4]
  401aa8:	9900      	ldr	r1, [sp, #0]
  401aaa:	aa0d      	add	r2, sp, #52	; 0x34
  401aac:	f7ff fbae 	bl	40120c <__sprint_r.part.0>
  401ab0:	2800      	cmp	r0, #0
  401ab2:	d1ab      	bne.n	401a0c <_vfiprintf_r+0x788>
  401ab4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  401ab6:	9a02      	ldr	r2, [sp, #8]
  401ab8:	9903      	ldr	r1, [sp, #12]
  401aba:	428e      	cmp	r6, r1
  401abc:	bfac      	ite	ge
  401abe:	1992      	addge	r2, r2, r6
  401ac0:	1852      	addlt	r2, r2, r1
  401ac2:	9202      	str	r2, [sp, #8]
  401ac4:	2b00      	cmp	r3, #0
  401ac6:	d088      	beq.n	4019da <_vfiprintf_r+0x756>
  401ac8:	9801      	ldr	r0, [sp, #4]
  401aca:	9900      	ldr	r1, [sp, #0]
  401acc:	aa0d      	add	r2, sp, #52	; 0x34
  401ace:	f7ff fb9d 	bl	40120c <__sprint_r.part.0>
  401ad2:	2800      	cmp	r0, #0
  401ad4:	d081      	beq.n	4019da <_vfiprintf_r+0x756>
  401ad6:	e799      	b.n	401a0c <_vfiprintf_r+0x788>
  401ad8:	4640      	mov	r0, r8
  401ada:	4649      	mov	r1, r9
  401adc:	aa0d      	add	r2, sp, #52	; 0x34
  401ade:	f7ff fb95 	bl	40120c <__sprint_r.part.0>
  401ae2:	2800      	cmp	r0, #0
  401ae4:	d192      	bne.n	401a0c <_vfiprintf_r+0x788>
  401ae6:	980e      	ldr	r0, [sp, #56]	; 0x38
  401ae8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  401aea:	f100 0e01 	add.w	lr, r0, #1
  401aee:	4652      	mov	r2, sl
  401af0:	e7ba      	b.n	401a68 <_vfiprintf_r+0x7e4>
  401af2:	9b03      	ldr	r3, [sp, #12]
  401af4:	1b9f      	subs	r7, r3, r6
  401af6:	2f00      	cmp	r7, #0
  401af8:	f77f af27 	ble.w	40194a <_vfiprintf_r+0x6c6>
  401afc:	2f10      	cmp	r7, #16
  401afe:	4d40      	ldr	r5, [pc, #256]	; (401c00 <_vfiprintf_r+0x97c>)
  401b00:	f340 81b4 	ble.w	401e6c <_vfiprintf_r+0xbe8>
  401b04:	4620      	mov	r0, r4
  401b06:	2310      	movs	r3, #16
  401b08:	4664      	mov	r4, ip
  401b0a:	4684      	mov	ip, r0
  401b0c:	e007      	b.n	401b1e <_vfiprintf_r+0x89a>
  401b0e:	f101 0e02 	add.w	lr, r1, #2
  401b12:	f10c 0c08 	add.w	ip, ip, #8
  401b16:	4601      	mov	r1, r0
  401b18:	3f10      	subs	r7, #16
  401b1a:	2f10      	cmp	r7, #16
  401b1c:	dd11      	ble.n	401b42 <_vfiprintf_r+0x8be>
  401b1e:	1c48      	adds	r0, r1, #1
  401b20:	3210      	adds	r2, #16
  401b22:	2807      	cmp	r0, #7
  401b24:	920f      	str	r2, [sp, #60]	; 0x3c
  401b26:	f8cc 5000 	str.w	r5, [ip]
  401b2a:	f8cc 3004 	str.w	r3, [ip, #4]
  401b2e:	900e      	str	r0, [sp, #56]	; 0x38
  401b30:	dded      	ble.n	401b0e <_vfiprintf_r+0x88a>
  401b32:	b9c2      	cbnz	r2, 401b66 <_vfiprintf_r+0x8e2>
  401b34:	3f10      	subs	r7, #16
  401b36:	2f10      	cmp	r7, #16
  401b38:	f04f 0e01 	mov.w	lr, #1
  401b3c:	4611      	mov	r1, r2
  401b3e:	46d4      	mov	ip, sl
  401b40:	dced      	bgt.n	401b1e <_vfiprintf_r+0x89a>
  401b42:	4663      	mov	r3, ip
  401b44:	46a4      	mov	ip, r4
  401b46:	461c      	mov	r4, r3
  401b48:	443a      	add	r2, r7
  401b4a:	f1be 0f07 	cmp.w	lr, #7
  401b4e:	920f      	str	r2, [sp, #60]	; 0x3c
  401b50:	e884 00a0 	stmia.w	r4, {r5, r7}
  401b54:	f8cd e038 	str.w	lr, [sp, #56]	; 0x38
  401b58:	f300 80ef 	bgt.w	401d3a <_vfiprintf_r+0xab6>
  401b5c:	3408      	adds	r4, #8
  401b5e:	f10e 0001 	add.w	r0, lr, #1
  401b62:	4671      	mov	r1, lr
  401b64:	e6f1      	b.n	40194a <_vfiprintf_r+0x6c6>
  401b66:	9801      	ldr	r0, [sp, #4]
  401b68:	9900      	ldr	r1, [sp, #0]
  401b6a:	9305      	str	r3, [sp, #20]
  401b6c:	aa0d      	add	r2, sp, #52	; 0x34
  401b6e:	f7ff fb4d 	bl	40120c <__sprint_r.part.0>
  401b72:	2800      	cmp	r0, #0
  401b74:	f47f af4a 	bne.w	401a0c <_vfiprintf_r+0x788>
  401b78:	990e      	ldr	r1, [sp, #56]	; 0x38
  401b7a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  401b7c:	9b05      	ldr	r3, [sp, #20]
  401b7e:	f101 0e01 	add.w	lr, r1, #1
  401b82:	46d4      	mov	ip, sl
  401b84:	e7c8      	b.n	401b18 <_vfiprintf_r+0x894>
  401b86:	2a00      	cmp	r2, #0
  401b88:	f040 80c6 	bne.w	401d18 <_vfiprintf_r+0xa94>
  401b8c:	9b05      	ldr	r3, [sp, #20]
  401b8e:	2b00      	cmp	r3, #0
  401b90:	f000 8086 	beq.w	401ca0 <_vfiprintf_r+0xa1c>
  401b94:	aa0c      	add	r2, sp, #48	; 0x30
  401b96:	2302      	movs	r3, #2
  401b98:	921a      	str	r2, [sp, #104]	; 0x68
  401b9a:	4608      	mov	r0, r1
  401b9c:	931b      	str	r3, [sp, #108]	; 0x6c
  401b9e:	461a      	mov	r2, r3
  401ba0:	4654      	mov	r4, sl
  401ba2:	e6cb      	b.n	40193c <_vfiprintf_r+0x6b8>
  401ba4:	2a00      	cmp	r2, #0
  401ba6:	f040 80a6 	bne.w	401cf6 <_vfiprintf_r+0xa72>
  401baa:	2001      	movs	r0, #1
  401bac:	4611      	mov	r1, r2
  401bae:	4654      	mov	r4, sl
  401bb0:	e6c7      	b.n	401942 <_vfiprintf_r+0x6be>
  401bb2:	bb03      	cbnz	r3, 401bf6 <_vfiprintf_r+0x972>
  401bb4:	f018 0f01 	tst.w	r8, #1
  401bb8:	d01d      	beq.n	401bf6 <_vfiprintf_r+0x972>
  401bba:	ab2a      	add	r3, sp, #168	; 0xa8
  401bbc:	2230      	movs	r2, #48	; 0x30
  401bbe:	f803 2d41 	strb.w	r2, [r3, #-65]!
  401bc2:	ebc3 090a 	rsb	r9, r3, sl
  401bc6:	9307      	str	r3, [sp, #28]
  401bc8:	e48e      	b.n	4014e8 <_vfiprintf_r+0x264>
  401bca:	9809      	ldr	r0, [sp, #36]	; 0x24
  401bcc:	46d1      	mov	r9, sl
  401bce:	0933      	lsrs	r3, r6, #4
  401bd0:	f006 010f 	and.w	r1, r6, #15
  401bd4:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
  401bd8:	093a      	lsrs	r2, r7, #4
  401bda:	461e      	mov	r6, r3
  401bdc:	4617      	mov	r7, r2
  401bde:	5c43      	ldrb	r3, [r0, r1]
  401be0:	f809 3d01 	strb.w	r3, [r9, #-1]!
  401be4:	ea56 0307 	orrs.w	r3, r6, r7
  401be8:	d1f1      	bne.n	401bce <_vfiprintf_r+0x94a>
  401bea:	464b      	mov	r3, r9
  401bec:	f8cd 901c 	str.w	r9, [sp, #28]
  401bf0:	ebc3 090a 	rsb	r9, r3, sl
  401bf4:	e478      	b.n	4014e8 <_vfiprintf_r+0x264>
  401bf6:	f8cd a01c 	str.w	sl, [sp, #28]
  401bfa:	e475      	b.n	4014e8 <_vfiprintf_r+0x264>
  401bfc:	2302      	movs	r3, #2
  401bfe:	e444      	b.n	40148a <_vfiprintf_r+0x206>
  401c00:	00405658 	.word	0x00405658
  401c04:	00405698 	.word	0x00405698
  401c08:	2a00      	cmp	r2, #0
  401c0a:	f040 80d7 	bne.w	401dbc <_vfiprintf_r+0xb38>
  401c0e:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
  401c12:	2b00      	cmp	r3, #0
  401c14:	f000 80ae 	beq.w	401d74 <_vfiprintf_r+0xaf0>
  401c18:	2301      	movs	r3, #1
  401c1a:	f10d 012f 	add.w	r1, sp, #47	; 0x2f
  401c1e:	4618      	mov	r0, r3
  401c20:	931b      	str	r3, [sp, #108]	; 0x6c
  401c22:	461a      	mov	r2, r3
  401c24:	911a      	str	r1, [sp, #104]	; 0x68
  401c26:	4654      	mov	r4, sl
  401c28:	e679      	b.n	40191e <_vfiprintf_r+0x69a>
  401c2a:	9a03      	ldr	r2, [sp, #12]
  401c2c:	1b95      	subs	r5, r2, r6
  401c2e:	2d00      	cmp	r5, #0
  401c30:	4652      	mov	r2, sl
  401c32:	f73f af0a 	bgt.w	401a4a <_vfiprintf_r+0x7c6>
  401c36:	e6c9      	b.n	4019cc <_vfiprintf_r+0x748>
  401c38:	465d      	mov	r5, fp
  401c3a:	f7ff bb7c 	b.w	401336 <_vfiprintf_r+0xb2>
  401c3e:	9801      	ldr	r0, [sp, #4]
  401c40:	9900      	ldr	r1, [sp, #0]
  401c42:	aa0d      	add	r2, sp, #52	; 0x34
  401c44:	f7ff fae2 	bl	40120c <__sprint_r.part.0>
  401c48:	2800      	cmp	r0, #0
  401c4a:	f47f aedf 	bne.w	401a0c <_vfiprintf_r+0x788>
  401c4e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  401c50:	4652      	mov	r2, sl
  401c52:	e6f3      	b.n	401a3c <_vfiprintf_r+0x7b8>
  401c54:	9904      	ldr	r1, [sp, #16]
  401c56:	460a      	mov	r2, r1
  401c58:	3204      	adds	r2, #4
  401c5a:	680e      	ldr	r6, [r1, #0]
  401c5c:	9204      	str	r2, [sp, #16]
  401c5e:	2700      	movs	r7, #0
  401c60:	e413      	b.n	40148a <_vfiprintf_r+0x206>
  401c62:	3204      	adds	r2, #4
  401c64:	681e      	ldr	r6, [r3, #0]
  401c66:	9204      	str	r2, [sp, #16]
  401c68:	2301      	movs	r3, #1
  401c6a:	2700      	movs	r7, #0
  401c6c:	e40d      	b.n	40148a <_vfiprintf_r+0x206>
  401c6e:	6816      	ldr	r6, [r2, #0]
  401c70:	3204      	adds	r2, #4
  401c72:	9204      	str	r2, [sp, #16]
  401c74:	2700      	movs	r7, #0
  401c76:	e52d      	b.n	4016d4 <_vfiprintf_r+0x450>
  401c78:	9a04      	ldr	r2, [sp, #16]
  401c7a:	6816      	ldr	r6, [r2, #0]
  401c7c:	4613      	mov	r3, r2
  401c7e:	3304      	adds	r3, #4
  401c80:	17f7      	asrs	r7, r6, #31
  401c82:	9304      	str	r3, [sp, #16]
  401c84:	4632      	mov	r2, r6
  401c86:	463b      	mov	r3, r7
  401c88:	e4bf      	b.n	40160a <_vfiprintf_r+0x386>
  401c8a:	9801      	ldr	r0, [sp, #4]
  401c8c:	9900      	ldr	r1, [sp, #0]
  401c8e:	aa0d      	add	r2, sp, #52	; 0x34
  401c90:	f7ff fabc 	bl	40120c <__sprint_r.part.0>
  401c94:	2800      	cmp	r0, #0
  401c96:	f47f aeb9 	bne.w	401a0c <_vfiprintf_r+0x788>
  401c9a:	4654      	mov	r4, sl
  401c9c:	f7ff bbbe 	b.w	40141c <_vfiprintf_r+0x198>
  401ca0:	4608      	mov	r0, r1
  401ca2:	4654      	mov	r4, sl
  401ca4:	4611      	mov	r1, r2
  401ca6:	e64c      	b.n	401942 <_vfiprintf_r+0x6be>
  401ca8:	46d1      	mov	r9, sl
  401caa:	f8cd c014 	str.w	ip, [sp, #20]
  401cae:	4630      	mov	r0, r6
  401cb0:	4639      	mov	r1, r7
  401cb2:	220a      	movs	r2, #10
  401cb4:	2300      	movs	r3, #0
  401cb6:	f001 fe7d 	bl	4039b4 <__aeabi_uldivmod>
  401cba:	3230      	adds	r2, #48	; 0x30
  401cbc:	4630      	mov	r0, r6
  401cbe:	4639      	mov	r1, r7
  401cc0:	f809 2d01 	strb.w	r2, [r9, #-1]!
  401cc4:	2300      	movs	r3, #0
  401cc6:	220a      	movs	r2, #10
  401cc8:	f001 fe74 	bl	4039b4 <__aeabi_uldivmod>
  401ccc:	4606      	mov	r6, r0
  401cce:	460f      	mov	r7, r1
  401cd0:	ea56 0307 	orrs.w	r3, r6, r7
  401cd4:	d1eb      	bne.n	401cae <_vfiprintf_r+0xa2a>
  401cd6:	f8dd c014 	ldr.w	ip, [sp, #20]
  401cda:	e786      	b.n	401bea <_vfiprintf_r+0x966>
  401cdc:	2b30      	cmp	r3, #48	; 0x30
  401cde:	9b07      	ldr	r3, [sp, #28]
  401ce0:	d086      	beq.n	401bf0 <_vfiprintf_r+0x96c>
  401ce2:	3b01      	subs	r3, #1
  401ce4:	461a      	mov	r2, r3
  401ce6:	9307      	str	r3, [sp, #28]
  401ce8:	2330      	movs	r3, #48	; 0x30
  401cea:	ebc2 090a 	rsb	r9, r2, sl
  401cee:	f801 3c01 	strb.w	r3, [r1, #-1]
  401cf2:	f7ff bbf9 	b.w	4014e8 <_vfiprintf_r+0x264>
  401cf6:	9801      	ldr	r0, [sp, #4]
  401cf8:	9900      	ldr	r1, [sp, #0]
  401cfa:	f8cd c014 	str.w	ip, [sp, #20]
  401cfe:	aa0d      	add	r2, sp, #52	; 0x34
  401d00:	f7ff fa84 	bl	40120c <__sprint_r.part.0>
  401d04:	2800      	cmp	r0, #0
  401d06:	f47f ae81 	bne.w	401a0c <_vfiprintf_r+0x788>
  401d0a:	990e      	ldr	r1, [sp, #56]	; 0x38
  401d0c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  401d0e:	f8dd c014 	ldr.w	ip, [sp, #20]
  401d12:	1c48      	adds	r0, r1, #1
  401d14:	4654      	mov	r4, sl
  401d16:	e614      	b.n	401942 <_vfiprintf_r+0x6be>
  401d18:	9801      	ldr	r0, [sp, #4]
  401d1a:	9900      	ldr	r1, [sp, #0]
  401d1c:	f8cd c020 	str.w	ip, [sp, #32]
  401d20:	aa0d      	add	r2, sp, #52	; 0x34
  401d22:	f7ff fa73 	bl	40120c <__sprint_r.part.0>
  401d26:	2800      	cmp	r0, #0
  401d28:	f47f ae70 	bne.w	401a0c <_vfiprintf_r+0x788>
  401d2c:	990e      	ldr	r1, [sp, #56]	; 0x38
  401d2e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  401d30:	f8dd c020 	ldr.w	ip, [sp, #32]
  401d34:	1c48      	adds	r0, r1, #1
  401d36:	4654      	mov	r4, sl
  401d38:	e5f4      	b.n	401924 <_vfiprintf_r+0x6a0>
  401d3a:	2a00      	cmp	r2, #0
  401d3c:	d167      	bne.n	401e0e <_vfiprintf_r+0xb8a>
  401d3e:	2001      	movs	r0, #1
  401d40:	4611      	mov	r1, r2
  401d42:	4654      	mov	r4, sl
  401d44:	e601      	b.n	40194a <_vfiprintf_r+0x6c6>
  401d46:	9801      	ldr	r0, [sp, #4]
  401d48:	9900      	ldr	r1, [sp, #0]
  401d4a:	aa0d      	add	r2, sp, #52	; 0x34
  401d4c:	f7ff fa5e 	bl	40120c <__sprint_r.part.0>
  401d50:	2800      	cmp	r0, #0
  401d52:	f47f ae5b 	bne.w	401a0c <_vfiprintf_r+0x788>
  401d56:	980e      	ldr	r0, [sp, #56]	; 0x38
  401d58:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  401d5a:	3001      	adds	r0, #1
  401d5c:	4654      	mov	r4, sl
  401d5e:	e624      	b.n	4019aa <_vfiprintf_r+0x726>
  401d60:	252d      	movs	r5, #45	; 0x2d
  401d62:	4276      	negs	r6, r6
  401d64:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
  401d68:	f88d 502f 	strb.w	r5, [sp, #47]	; 0x2f
  401d6c:	46e1      	mov	r9, ip
  401d6e:	2301      	movs	r3, #1
  401d70:	f7ff bb91 	b.w	401496 <_vfiprintf_r+0x212>
  401d74:	9b05      	ldr	r3, [sp, #20]
  401d76:	4611      	mov	r1, r2
  401d78:	2001      	movs	r0, #1
  401d7a:	4654      	mov	r4, sl
  401d7c:	2b00      	cmp	r3, #0
  401d7e:	f43f ade4 	beq.w	40194a <_vfiprintf_r+0x6c6>
  401d82:	aa0c      	add	r2, sp, #48	; 0x30
  401d84:	2302      	movs	r3, #2
  401d86:	e88a 000c 	stmia.w	sl, {r2, r3}
  401d8a:	461a      	mov	r2, r3
  401d8c:	e5d6      	b.n	40193c <_vfiprintf_r+0x6b8>
  401d8e:	f018 0f10 	tst.w	r8, #16
  401d92:	d10b      	bne.n	401dac <_vfiprintf_r+0xb28>
  401d94:	f018 0f40 	tst.w	r8, #64	; 0x40
  401d98:	d008      	beq.n	401dac <_vfiprintf_r+0xb28>
  401d9a:	9a04      	ldr	r2, [sp, #16]
  401d9c:	6813      	ldr	r3, [r2, #0]
  401d9e:	3204      	adds	r2, #4
  401da0:	9204      	str	r2, [sp, #16]
  401da2:	f8bd 2008 	ldrh.w	r2, [sp, #8]
  401da6:	801a      	strh	r2, [r3, #0]
  401da8:	f7ff ba9e 	b.w	4012e8 <_vfiprintf_r+0x64>
  401dac:	9a04      	ldr	r2, [sp, #16]
  401dae:	6813      	ldr	r3, [r2, #0]
  401db0:	3204      	adds	r2, #4
  401db2:	9204      	str	r2, [sp, #16]
  401db4:	9a02      	ldr	r2, [sp, #8]
  401db6:	601a      	str	r2, [r3, #0]
  401db8:	f7ff ba96 	b.w	4012e8 <_vfiprintf_r+0x64>
  401dbc:	9801      	ldr	r0, [sp, #4]
  401dbe:	9900      	ldr	r1, [sp, #0]
  401dc0:	f8cd c020 	str.w	ip, [sp, #32]
  401dc4:	aa0d      	add	r2, sp, #52	; 0x34
  401dc6:	f7ff fa21 	bl	40120c <__sprint_r.part.0>
  401dca:	2800      	cmp	r0, #0
  401dcc:	f47f ae1e 	bne.w	401a0c <_vfiprintf_r+0x788>
  401dd0:	990e      	ldr	r1, [sp, #56]	; 0x38
  401dd2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  401dd4:	f8dd c020 	ldr.w	ip, [sp, #32]
  401dd8:	1c48      	adds	r0, r1, #1
  401dda:	4654      	mov	r4, sl
  401ddc:	e591      	b.n	401902 <_vfiprintf_r+0x67e>
  401dde:	f048 0820 	orr.w	r8, r8, #32
  401de2:	f10b 0001 	add.w	r0, fp, #1
  401de6:	f89b 3001 	ldrb.w	r3, [fp, #1]
  401dea:	f7ff bab4 	b.w	401356 <_vfiprintf_r+0xd2>
  401dee:	426d      	negs	r5, r5
  401df0:	9304      	str	r3, [sp, #16]
  401df2:	4658      	mov	r0, fp
  401df4:	f7ff bbc6 	b.w	401584 <_vfiprintf_r+0x300>
  401df8:	9807      	ldr	r0, [sp, #28]
  401dfa:	9604      	str	r6, [sp, #16]
  401dfc:	f7ff f9d8 	bl	4011b0 <strlen>
  401e00:	f89d 502f 	ldrb.w	r5, [sp, #47]	; 0x2f
  401e04:	4681      	mov	r9, r0
  401e06:	f04f 0c00 	mov.w	ip, #0
  401e0a:	f7ff bb6d 	b.w	4014e8 <_vfiprintf_r+0x264>
  401e0e:	9801      	ldr	r0, [sp, #4]
  401e10:	9900      	ldr	r1, [sp, #0]
  401e12:	f8cd c014 	str.w	ip, [sp, #20]
  401e16:	aa0d      	add	r2, sp, #52	; 0x34
  401e18:	f7ff f9f8 	bl	40120c <__sprint_r.part.0>
  401e1c:	2800      	cmp	r0, #0
  401e1e:	f47f adf5 	bne.w	401a0c <_vfiprintf_r+0x788>
  401e22:	990e      	ldr	r1, [sp, #56]	; 0x38
  401e24:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  401e26:	f8dd c014 	ldr.w	ip, [sp, #20]
  401e2a:	1c48      	adds	r0, r1, #1
  401e2c:	4654      	mov	r4, sl
  401e2e:	e58c      	b.n	40194a <_vfiprintf_r+0x6c6>
  401e30:	990e      	ldr	r1, [sp, #56]	; 0x38
  401e32:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  401e34:	4f15      	ldr	r7, [pc, #84]	; (401e8c <_vfiprintf_r+0xc08>)
  401e36:	3101      	adds	r1, #1
  401e38:	f7ff bb98 	b.w	40156c <_vfiprintf_r+0x2e8>
  401e3c:	f1bc 0f06 	cmp.w	ip, #6
  401e40:	bf28      	it	cs
  401e42:	f04f 0c06 	movcs.w	ip, #6
  401e46:	4b12      	ldr	r3, [pc, #72]	; (401e90 <_vfiprintf_r+0xc0c>)
  401e48:	9604      	str	r6, [sp, #16]
  401e4a:	46e1      	mov	r9, ip
  401e4c:	ea2c 76ec 	bic.w	r6, ip, ip, asr #31
  401e50:	9307      	str	r3, [sp, #28]
  401e52:	e460      	b.n	401716 <_vfiprintf_r+0x492>
  401e54:	990e      	ldr	r1, [sp, #56]	; 0x38
  401e56:	4f0d      	ldr	r7, [pc, #52]	; (401e8c <_vfiprintf_r+0xc08>)
  401e58:	f101 0e01 	add.w	lr, r1, #1
  401e5c:	e618      	b.n	401a90 <_vfiprintf_r+0x80c>
  401e5e:	46e1      	mov	r9, ip
  401e60:	f89d 502f 	ldrb.w	r5, [sp, #47]	; 0x2f
  401e64:	9604      	str	r6, [sp, #16]
  401e66:	4684      	mov	ip, r0
  401e68:	f7ff bb3e 	b.w	4014e8 <_vfiprintf_r+0x264>
  401e6c:	4686      	mov	lr, r0
  401e6e:	e66b      	b.n	401b48 <_vfiprintf_r+0x8c4>
  401e70:	9a04      	ldr	r2, [sp, #16]
  401e72:	f89b 3001 	ldrb.w	r3, [fp, #1]
  401e76:	6816      	ldr	r6, [r2, #0]
  401e78:	3204      	adds	r2, #4
  401e7a:	2e00      	cmp	r6, #0
  401e7c:	9204      	str	r2, [sp, #16]
  401e7e:	f6bf aa6a 	bge.w	401356 <_vfiprintf_r+0xd2>
  401e82:	f04f 36ff 	mov.w	r6, #4294967295
  401e86:	f7ff ba66 	b.w	401356 <_vfiprintf_r+0xd2>
  401e8a:	bf00      	nop
  401e8c:	00405698 	.word	0x00405698
  401e90:	00405690 	.word	0x00405690

00401e94 <__sbprintf>:
  401e94:	e92d 42f0 	stmdb	sp!, {r4, r5, r6, r7, r9, lr}
  401e98:	460c      	mov	r4, r1
  401e9a:	f5ad 6d8d 	sub.w	sp, sp, #1128	; 0x468
  401e9e:	f8b1 e00c 	ldrh.w	lr, [r1, #12]
  401ea2:	69e7      	ldr	r7, [r4, #28]
  401ea4:	6e49      	ldr	r1, [r1, #100]	; 0x64
  401ea6:	f8b4 900e 	ldrh.w	r9, [r4, #14]
  401eaa:	9119      	str	r1, [sp, #100]	; 0x64
  401eac:	ad1a      	add	r5, sp, #104	; 0x68
  401eae:	f44f 6680 	mov.w	r6, #1024	; 0x400
  401eb2:	f02e 0e02 	bic.w	lr, lr, #2
  401eb6:	f04f 0c00 	mov.w	ip, #0
  401eba:	9707      	str	r7, [sp, #28]
  401ebc:	4669      	mov	r1, sp
  401ebe:	6a67      	ldr	r7, [r4, #36]	; 0x24
  401ec0:	9500      	str	r5, [sp, #0]
  401ec2:	9504      	str	r5, [sp, #16]
  401ec4:	9602      	str	r6, [sp, #8]
  401ec6:	9605      	str	r6, [sp, #20]
  401ec8:	f8ad e00c 	strh.w	lr, [sp, #12]
  401ecc:	f8ad 900e 	strh.w	r9, [sp, #14]
  401ed0:	9709      	str	r7, [sp, #36]	; 0x24
  401ed2:	f8cd c018 	str.w	ip, [sp, #24]
  401ed6:	4606      	mov	r6, r0
  401ed8:	f7ff f9d4 	bl	401284 <_vfiprintf_r>
  401edc:	1e05      	subs	r5, r0, #0
  401ede:	db07      	blt.n	401ef0 <__sbprintf+0x5c>
  401ee0:	4630      	mov	r0, r6
  401ee2:	4669      	mov	r1, sp
  401ee4:	f000 f92e 	bl	402144 <_fflush_r>
  401ee8:	2800      	cmp	r0, #0
  401eea:	bf18      	it	ne
  401eec:	f04f 35ff 	movne.w	r5, #4294967295
  401ef0:	f8bd 300c 	ldrh.w	r3, [sp, #12]
  401ef4:	065b      	lsls	r3, r3, #25
  401ef6:	d503      	bpl.n	401f00 <__sbprintf+0x6c>
  401ef8:	89a3      	ldrh	r3, [r4, #12]
  401efa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  401efe:	81a3      	strh	r3, [r4, #12]
  401f00:	4628      	mov	r0, r5
  401f02:	f50d 6d8d 	add.w	sp, sp, #1128	; 0x468
  401f06:	e8bd 82f0 	ldmia.w	sp!, {r4, r5, r6, r7, r9, pc}
  401f0a:	bf00      	nop

00401f0c <__swsetup_r>:
  401f0c:	b538      	push	{r3, r4, r5, lr}
  401f0e:	4b2f      	ldr	r3, [pc, #188]	; (401fcc <__swsetup_r+0xc0>)
  401f10:	681b      	ldr	r3, [r3, #0]
  401f12:	4605      	mov	r5, r0
  401f14:	460c      	mov	r4, r1
  401f16:	b113      	cbz	r3, 401f1e <__swsetup_r+0x12>
  401f18:	6b9a      	ldr	r2, [r3, #56]	; 0x38
  401f1a:	2a00      	cmp	r2, #0
  401f1c:	d036      	beq.n	401f8c <__swsetup_r+0x80>
  401f1e:	89a2      	ldrh	r2, [r4, #12]
  401f20:	b293      	uxth	r3, r2
  401f22:	0718      	lsls	r0, r3, #28
  401f24:	d50c      	bpl.n	401f40 <__swsetup_r+0x34>
  401f26:	6920      	ldr	r0, [r4, #16]
  401f28:	b1a8      	cbz	r0, 401f56 <__swsetup_r+0x4a>
  401f2a:	f013 0201 	ands.w	r2, r3, #1
  401f2e:	d01e      	beq.n	401f6e <__swsetup_r+0x62>
  401f30:	6963      	ldr	r3, [r4, #20]
  401f32:	2200      	movs	r2, #0
  401f34:	425b      	negs	r3, r3
  401f36:	61a3      	str	r3, [r4, #24]
  401f38:	60a2      	str	r2, [r4, #8]
  401f3a:	b1f0      	cbz	r0, 401f7a <__swsetup_r+0x6e>
  401f3c:	2000      	movs	r0, #0
  401f3e:	bd38      	pop	{r3, r4, r5, pc}
  401f40:	06d9      	lsls	r1, r3, #27
  401f42:	d53b      	bpl.n	401fbc <__swsetup_r+0xb0>
  401f44:	0758      	lsls	r0, r3, #29
  401f46:	d425      	bmi.n	401f94 <__swsetup_r+0x88>
  401f48:	6920      	ldr	r0, [r4, #16]
  401f4a:	f042 0308 	orr.w	r3, r2, #8
  401f4e:	81a3      	strh	r3, [r4, #12]
  401f50:	b29b      	uxth	r3, r3
  401f52:	2800      	cmp	r0, #0
  401f54:	d1e9      	bne.n	401f2a <__swsetup_r+0x1e>
  401f56:	f403 7220 	and.w	r2, r3, #640	; 0x280
  401f5a:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
  401f5e:	d0e4      	beq.n	401f2a <__swsetup_r+0x1e>
  401f60:	4628      	mov	r0, r5
  401f62:	4621      	mov	r1, r4
  401f64:	f000 fcf2 	bl	40294c <__smakebuf_r>
  401f68:	89a3      	ldrh	r3, [r4, #12]
  401f6a:	6920      	ldr	r0, [r4, #16]
  401f6c:	e7dd      	b.n	401f2a <__swsetup_r+0x1e>
  401f6e:	0799      	lsls	r1, r3, #30
  401f70:	bf58      	it	pl
  401f72:	6962      	ldrpl	r2, [r4, #20]
  401f74:	60a2      	str	r2, [r4, #8]
  401f76:	2800      	cmp	r0, #0
  401f78:	d1e0      	bne.n	401f3c <__swsetup_r+0x30>
  401f7a:	89a3      	ldrh	r3, [r4, #12]
  401f7c:	061a      	lsls	r2, r3, #24
  401f7e:	d5de      	bpl.n	401f3e <__swsetup_r+0x32>
  401f80:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  401f84:	81a3      	strh	r3, [r4, #12]
  401f86:	f04f 30ff 	mov.w	r0, #4294967295
  401f8a:	bd38      	pop	{r3, r4, r5, pc}
  401f8c:	4618      	mov	r0, r3
  401f8e:	f000 f96d 	bl	40226c <__sinit>
  401f92:	e7c4      	b.n	401f1e <__swsetup_r+0x12>
  401f94:	6b21      	ldr	r1, [r4, #48]	; 0x30
  401f96:	b149      	cbz	r1, 401fac <__swsetup_r+0xa0>
  401f98:	f104 0340 	add.w	r3, r4, #64	; 0x40
  401f9c:	4299      	cmp	r1, r3
  401f9e:	d003      	beq.n	401fa8 <__swsetup_r+0x9c>
  401fa0:	4628      	mov	r0, r5
  401fa2:	f000 fa3b 	bl	40241c <_free_r>
  401fa6:	89a2      	ldrh	r2, [r4, #12]
  401fa8:	2300      	movs	r3, #0
  401faa:	6323      	str	r3, [r4, #48]	; 0x30
  401fac:	f022 0224 	bic.w	r2, r2, #36	; 0x24
  401fb0:	2300      	movs	r3, #0
  401fb2:	6920      	ldr	r0, [r4, #16]
  401fb4:	6063      	str	r3, [r4, #4]
  401fb6:	b292      	uxth	r2, r2
  401fb8:	6020      	str	r0, [r4, #0]
  401fba:	e7c6      	b.n	401f4a <__swsetup_r+0x3e>
  401fbc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
  401fc0:	2309      	movs	r3, #9
  401fc2:	602b      	str	r3, [r5, #0]
  401fc4:	f04f 30ff 	mov.w	r0, #4294967295
  401fc8:	81a2      	strh	r2, [r4, #12]
  401fca:	bd38      	pop	{r3, r4, r5, pc}
  401fcc:	20000430 	.word	0x20000430

00401fd0 <register_fini>:
  401fd0:	4b02      	ldr	r3, [pc, #8]	; (401fdc <register_fini+0xc>)
  401fd2:	b113      	cbz	r3, 401fda <register_fini+0xa>
  401fd4:	4802      	ldr	r0, [pc, #8]	; (401fe0 <register_fini+0x10>)
  401fd6:	f000 b805 	b.w	401fe4 <atexit>
  401fda:	4770      	bx	lr
  401fdc:	00000000 	.word	0x00000000
  401fe0:	00402281 	.word	0x00402281

00401fe4 <atexit>:
  401fe4:	4601      	mov	r1, r0
  401fe6:	2000      	movs	r0, #0
  401fe8:	4602      	mov	r2, r0
  401fea:	4603      	mov	r3, r0
  401fec:	f001 bbee 	b.w	4037cc <__register_exitproc>

00401ff0 <__sflush_r>:
  401ff0:	898b      	ldrh	r3, [r1, #12]
  401ff2:	b29a      	uxth	r2, r3
  401ff4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  401ff8:	460d      	mov	r5, r1
  401ffa:	0711      	lsls	r1, r2, #28
  401ffc:	4680      	mov	r8, r0
  401ffe:	d43c      	bmi.n	40207a <__sflush_r+0x8a>
  402000:	686a      	ldr	r2, [r5, #4]
  402002:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
  402006:	2a00      	cmp	r2, #0
  402008:	81ab      	strh	r3, [r5, #12]
  40200a:	dd65      	ble.n	4020d8 <__sflush_r+0xe8>
  40200c:	6aae      	ldr	r6, [r5, #40]	; 0x28
  40200e:	2e00      	cmp	r6, #0
  402010:	d04b      	beq.n	4020aa <__sflush_r+0xba>
  402012:	b29b      	uxth	r3, r3
  402014:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
  402018:	2100      	movs	r1, #0
  40201a:	b292      	uxth	r2, r2
  40201c:	f8d8 4000 	ldr.w	r4, [r8]
  402020:	f8c8 1000 	str.w	r1, [r8]
  402024:	2a00      	cmp	r2, #0
  402026:	d05b      	beq.n	4020e0 <__sflush_r+0xf0>
  402028:	6d2a      	ldr	r2, [r5, #80]	; 0x50
  40202a:	075f      	lsls	r7, r3, #29
  40202c:	d505      	bpl.n	40203a <__sflush_r+0x4a>
  40202e:	6869      	ldr	r1, [r5, #4]
  402030:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  402032:	1a52      	subs	r2, r2, r1
  402034:	b10b      	cbz	r3, 40203a <__sflush_r+0x4a>
  402036:	6beb      	ldr	r3, [r5, #60]	; 0x3c
  402038:	1ad2      	subs	r2, r2, r3
  40203a:	4640      	mov	r0, r8
  40203c:	69e9      	ldr	r1, [r5, #28]
  40203e:	2300      	movs	r3, #0
  402040:	47b0      	blx	r6
  402042:	1c46      	adds	r6, r0, #1
  402044:	d056      	beq.n	4020f4 <__sflush_r+0x104>
  402046:	89ab      	ldrh	r3, [r5, #12]
  402048:	692a      	ldr	r2, [r5, #16]
  40204a:	602a      	str	r2, [r5, #0]
  40204c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  402050:	b29b      	uxth	r3, r3
  402052:	2200      	movs	r2, #0
  402054:	606a      	str	r2, [r5, #4]
  402056:	04da      	lsls	r2, r3, #19
  402058:	81ab      	strh	r3, [r5, #12]
  40205a:	d43b      	bmi.n	4020d4 <__sflush_r+0xe4>
  40205c:	6b29      	ldr	r1, [r5, #48]	; 0x30
  40205e:	f8c8 4000 	str.w	r4, [r8]
  402062:	b311      	cbz	r1, 4020aa <__sflush_r+0xba>
  402064:	f105 0340 	add.w	r3, r5, #64	; 0x40
  402068:	4299      	cmp	r1, r3
  40206a:	d002      	beq.n	402072 <__sflush_r+0x82>
  40206c:	4640      	mov	r0, r8
  40206e:	f000 f9d5 	bl	40241c <_free_r>
  402072:	2000      	movs	r0, #0
  402074:	6328      	str	r0, [r5, #48]	; 0x30
  402076:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40207a:	692e      	ldr	r6, [r5, #16]
  40207c:	b1ae      	cbz	r6, 4020aa <__sflush_r+0xba>
  40207e:	682c      	ldr	r4, [r5, #0]
  402080:	602e      	str	r6, [r5, #0]
  402082:	0791      	lsls	r1, r2, #30
  402084:	bf0c      	ite	eq
  402086:	696b      	ldreq	r3, [r5, #20]
  402088:	2300      	movne	r3, #0
  40208a:	1ba4      	subs	r4, r4, r6
  40208c:	60ab      	str	r3, [r5, #8]
  40208e:	e00a      	b.n	4020a6 <__sflush_r+0xb6>
  402090:	4632      	mov	r2, r6
  402092:	4623      	mov	r3, r4
  402094:	6a6f      	ldr	r7, [r5, #36]	; 0x24
  402096:	69e9      	ldr	r1, [r5, #28]
  402098:	4640      	mov	r0, r8
  40209a:	47b8      	blx	r7
  40209c:	2800      	cmp	r0, #0
  40209e:	eba4 0400 	sub.w	r4, r4, r0
  4020a2:	4406      	add	r6, r0
  4020a4:	dd04      	ble.n	4020b0 <__sflush_r+0xc0>
  4020a6:	2c00      	cmp	r4, #0
  4020a8:	dcf2      	bgt.n	402090 <__sflush_r+0xa0>
  4020aa:	2000      	movs	r0, #0
  4020ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4020b0:	89ab      	ldrh	r3, [r5, #12]
  4020b2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  4020b6:	81ab      	strh	r3, [r5, #12]
  4020b8:	f04f 30ff 	mov.w	r0, #4294967295
  4020bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4020c0:	89ab      	ldrh	r3, [r5, #12]
  4020c2:	692a      	ldr	r2, [r5, #16]
  4020c4:	6069      	str	r1, [r5, #4]
  4020c6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  4020ca:	b29b      	uxth	r3, r3
  4020cc:	81ab      	strh	r3, [r5, #12]
  4020ce:	04db      	lsls	r3, r3, #19
  4020d0:	602a      	str	r2, [r5, #0]
  4020d2:	d5c3      	bpl.n	40205c <__sflush_r+0x6c>
  4020d4:	6528      	str	r0, [r5, #80]	; 0x50
  4020d6:	e7c1      	b.n	40205c <__sflush_r+0x6c>
  4020d8:	6bea      	ldr	r2, [r5, #60]	; 0x3c
  4020da:	2a00      	cmp	r2, #0
  4020dc:	dc96      	bgt.n	40200c <__sflush_r+0x1c>
  4020de:	e7e4      	b.n	4020aa <__sflush_r+0xba>
  4020e0:	2301      	movs	r3, #1
  4020e2:	4640      	mov	r0, r8
  4020e4:	69e9      	ldr	r1, [r5, #28]
  4020e6:	47b0      	blx	r6
  4020e8:	1c43      	adds	r3, r0, #1
  4020ea:	4602      	mov	r2, r0
  4020ec:	d019      	beq.n	402122 <__sflush_r+0x132>
  4020ee:	89ab      	ldrh	r3, [r5, #12]
  4020f0:	6aae      	ldr	r6, [r5, #40]	; 0x28
  4020f2:	e79a      	b.n	40202a <__sflush_r+0x3a>
  4020f4:	f8d8 1000 	ldr.w	r1, [r8]
  4020f8:	2900      	cmp	r1, #0
  4020fa:	d0e1      	beq.n	4020c0 <__sflush_r+0xd0>
  4020fc:	291d      	cmp	r1, #29
  4020fe:	d007      	beq.n	402110 <__sflush_r+0x120>
  402100:	2916      	cmp	r1, #22
  402102:	d005      	beq.n	402110 <__sflush_r+0x120>
  402104:	89ab      	ldrh	r3, [r5, #12]
  402106:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40210a:	81ab      	strh	r3, [r5, #12]
  40210c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  402110:	89ab      	ldrh	r3, [r5, #12]
  402112:	692a      	ldr	r2, [r5, #16]
  402114:	602a      	str	r2, [r5, #0]
  402116:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  40211a:	2200      	movs	r2, #0
  40211c:	81ab      	strh	r3, [r5, #12]
  40211e:	606a      	str	r2, [r5, #4]
  402120:	e79c      	b.n	40205c <__sflush_r+0x6c>
  402122:	f8d8 3000 	ldr.w	r3, [r8]
  402126:	2b00      	cmp	r3, #0
  402128:	d0e1      	beq.n	4020ee <__sflush_r+0xfe>
  40212a:	2b1d      	cmp	r3, #29
  40212c:	d007      	beq.n	40213e <__sflush_r+0x14e>
  40212e:	2b16      	cmp	r3, #22
  402130:	d005      	beq.n	40213e <__sflush_r+0x14e>
  402132:	89ab      	ldrh	r3, [r5, #12]
  402134:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  402138:	81ab      	strh	r3, [r5, #12]
  40213a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40213e:	f8c8 4000 	str.w	r4, [r8]
  402142:	e7b2      	b.n	4020aa <__sflush_r+0xba>

00402144 <_fflush_r>:
  402144:	b510      	push	{r4, lr}
  402146:	4604      	mov	r4, r0
  402148:	b082      	sub	sp, #8
  40214a:	b108      	cbz	r0, 402150 <_fflush_r+0xc>
  40214c:	6b83      	ldr	r3, [r0, #56]	; 0x38
  40214e:	b153      	cbz	r3, 402166 <_fflush_r+0x22>
  402150:	f9b1 000c 	ldrsh.w	r0, [r1, #12]
  402154:	b908      	cbnz	r0, 40215a <_fflush_r+0x16>
  402156:	b002      	add	sp, #8
  402158:	bd10      	pop	{r4, pc}
  40215a:	4620      	mov	r0, r4
  40215c:	b002      	add	sp, #8
  40215e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  402162:	f7ff bf45 	b.w	401ff0 <__sflush_r>
  402166:	9101      	str	r1, [sp, #4]
  402168:	f000 f880 	bl	40226c <__sinit>
  40216c:	9901      	ldr	r1, [sp, #4]
  40216e:	e7ef      	b.n	402150 <_fflush_r+0xc>

00402170 <_cleanup_r>:
  402170:	4901      	ldr	r1, [pc, #4]	; (402178 <_cleanup_r+0x8>)
  402172:	f000 bbb7 	b.w	4028e4 <_fwalk_reent>
  402176:	bf00      	nop
  402178:	00403895 	.word	0x00403895

0040217c <__sinit.part.1>:
  40217c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  402180:	4b35      	ldr	r3, [pc, #212]	; (402258 <__sinit.part.1+0xdc>)
  402182:	6845      	ldr	r5, [r0, #4]
  402184:	63c3      	str	r3, [r0, #60]	; 0x3c
  402186:	2400      	movs	r4, #0
  402188:	4607      	mov	r7, r0
  40218a:	f500 723b 	add.w	r2, r0, #748	; 0x2ec
  40218e:	2304      	movs	r3, #4
  402190:	2103      	movs	r1, #3
  402192:	f8c0 12e4 	str.w	r1, [r0, #740]	; 0x2e4
  402196:	f8c0 22e8 	str.w	r2, [r0, #744]	; 0x2e8
  40219a:	f8c0 42e0 	str.w	r4, [r0, #736]	; 0x2e0
  40219e:	b083      	sub	sp, #12
  4021a0:	602c      	str	r4, [r5, #0]
  4021a2:	606c      	str	r4, [r5, #4]
  4021a4:	60ac      	str	r4, [r5, #8]
  4021a6:	666c      	str	r4, [r5, #100]	; 0x64
  4021a8:	81ec      	strh	r4, [r5, #14]
  4021aa:	612c      	str	r4, [r5, #16]
  4021ac:	616c      	str	r4, [r5, #20]
  4021ae:	61ac      	str	r4, [r5, #24]
  4021b0:	81ab      	strh	r3, [r5, #12]
  4021b2:	4621      	mov	r1, r4
  4021b4:	f105 005c 	add.w	r0, r5, #92	; 0x5c
  4021b8:	2208      	movs	r2, #8
  4021ba:	f7fe fef1 	bl	400fa0 <memset>
  4021be:	68be      	ldr	r6, [r7, #8]
  4021c0:	f8df b098 	ldr.w	fp, [pc, #152]	; 40225c <__sinit.part.1+0xe0>
  4021c4:	f8df a098 	ldr.w	sl, [pc, #152]	; 402260 <__sinit.part.1+0xe4>
  4021c8:	f8df 9098 	ldr.w	r9, [pc, #152]	; 402264 <__sinit.part.1+0xe8>
  4021cc:	f8df 8098 	ldr.w	r8, [pc, #152]	; 402268 <__sinit.part.1+0xec>
  4021d0:	f8c5 b020 	str.w	fp, [r5, #32]
  4021d4:	2301      	movs	r3, #1
  4021d6:	2209      	movs	r2, #9
  4021d8:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
  4021dc:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
  4021e0:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
  4021e4:	61ed      	str	r5, [r5, #28]
  4021e6:	4621      	mov	r1, r4
  4021e8:	81f3      	strh	r3, [r6, #14]
  4021ea:	81b2      	strh	r2, [r6, #12]
  4021ec:	f106 005c 	add.w	r0, r6, #92	; 0x5c
  4021f0:	6034      	str	r4, [r6, #0]
  4021f2:	6074      	str	r4, [r6, #4]
  4021f4:	60b4      	str	r4, [r6, #8]
  4021f6:	6674      	str	r4, [r6, #100]	; 0x64
  4021f8:	6134      	str	r4, [r6, #16]
  4021fa:	6174      	str	r4, [r6, #20]
  4021fc:	61b4      	str	r4, [r6, #24]
  4021fe:	2208      	movs	r2, #8
  402200:	9301      	str	r3, [sp, #4]
  402202:	f7fe fecd 	bl	400fa0 <memset>
  402206:	68fd      	ldr	r5, [r7, #12]
  402208:	61f6      	str	r6, [r6, #28]
  40220a:	2012      	movs	r0, #18
  40220c:	2202      	movs	r2, #2
  40220e:	f8c6 b020 	str.w	fp, [r6, #32]
  402212:	f8c6 a024 	str.w	sl, [r6, #36]	; 0x24
  402216:	f8c6 9028 	str.w	r9, [r6, #40]	; 0x28
  40221a:	f8c6 802c 	str.w	r8, [r6, #44]	; 0x2c
  40221e:	4621      	mov	r1, r4
  402220:	81a8      	strh	r0, [r5, #12]
  402222:	81ea      	strh	r2, [r5, #14]
  402224:	602c      	str	r4, [r5, #0]
  402226:	606c      	str	r4, [r5, #4]
  402228:	60ac      	str	r4, [r5, #8]
  40222a:	666c      	str	r4, [r5, #100]	; 0x64
  40222c:	612c      	str	r4, [r5, #16]
  40222e:	616c      	str	r4, [r5, #20]
  402230:	61ac      	str	r4, [r5, #24]
  402232:	f105 005c 	add.w	r0, r5, #92	; 0x5c
  402236:	2208      	movs	r2, #8
  402238:	f7fe feb2 	bl	400fa0 <memset>
  40223c:	9b01      	ldr	r3, [sp, #4]
  40223e:	61ed      	str	r5, [r5, #28]
  402240:	f8c5 b020 	str.w	fp, [r5, #32]
  402244:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
  402248:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
  40224c:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
  402250:	63bb      	str	r3, [r7, #56]	; 0x38
  402252:	b003      	add	sp, #12
  402254:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  402258:	00402171 	.word	0x00402171
  40225c:	00403609 	.word	0x00403609
  402260:	0040362d 	.word	0x0040362d
  402264:	00403665 	.word	0x00403665
  402268:	00403685 	.word	0x00403685

0040226c <__sinit>:
  40226c:	6b83      	ldr	r3, [r0, #56]	; 0x38
  40226e:	b103      	cbz	r3, 402272 <__sinit+0x6>
  402270:	4770      	bx	lr
  402272:	f7ff bf83 	b.w	40217c <__sinit.part.1>
  402276:	bf00      	nop

00402278 <__sfp_lock_acquire>:
  402278:	4770      	bx	lr
  40227a:	bf00      	nop

0040227c <__sfp_lock_release>:
  40227c:	4770      	bx	lr
  40227e:	bf00      	nop

00402280 <__libc_fini_array>:
  402280:	b538      	push	{r3, r4, r5, lr}
  402282:	4b08      	ldr	r3, [pc, #32]	; (4022a4 <__libc_fini_array+0x24>)
  402284:	4d08      	ldr	r5, [pc, #32]	; (4022a8 <__libc_fini_array+0x28>)
  402286:	1aed      	subs	r5, r5, r3
  402288:	10ac      	asrs	r4, r5, #2
  40228a:	bf18      	it	ne
  40228c:	18ed      	addne	r5, r5, r3
  40228e:	d005      	beq.n	40229c <__libc_fini_array+0x1c>
  402290:	3c01      	subs	r4, #1
  402292:	f855 3d04 	ldr.w	r3, [r5, #-4]!
  402296:	4798      	blx	r3
  402298:	2c00      	cmp	r4, #0
  40229a:	d1f9      	bne.n	402290 <__libc_fini_array+0x10>
  40229c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  4022a0:	f003 ba0c 	b.w	4056bc <_fini>
  4022a4:	004056c8 	.word	0x004056c8
  4022a8:	004056cc 	.word	0x004056cc

004022ac <__fputwc>:
  4022ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4022b0:	b082      	sub	sp, #8
  4022b2:	4607      	mov	r7, r0
  4022b4:	460e      	mov	r6, r1
  4022b6:	4614      	mov	r4, r2
  4022b8:	f000 fb42 	bl	402940 <__locale_mb_cur_max>
  4022bc:	2801      	cmp	r0, #1
  4022be:	d041      	beq.n	402344 <__fputwc+0x98>
  4022c0:	4638      	mov	r0, r7
  4022c2:	a901      	add	r1, sp, #4
  4022c4:	4632      	mov	r2, r6
  4022c6:	f104 035c 	add.w	r3, r4, #92	; 0x5c
  4022ca:	f001 fa33 	bl	403734 <_wcrtomb_r>
  4022ce:	f1b0 3fff 	cmp.w	r0, #4294967295
  4022d2:	4680      	mov	r8, r0
  4022d4:	d02f      	beq.n	402336 <__fputwc+0x8a>
  4022d6:	2800      	cmp	r0, #0
  4022d8:	d03c      	beq.n	402354 <__fputwc+0xa8>
  4022da:	f89d 1004 	ldrb.w	r1, [sp, #4]
  4022de:	2500      	movs	r5, #0
  4022e0:	e009      	b.n	4022f6 <__fputwc+0x4a>
  4022e2:	6823      	ldr	r3, [r4, #0]
  4022e4:	7019      	strb	r1, [r3, #0]
  4022e6:	6823      	ldr	r3, [r4, #0]
  4022e8:	3301      	adds	r3, #1
  4022ea:	6023      	str	r3, [r4, #0]
  4022ec:	3501      	adds	r5, #1
  4022ee:	45a8      	cmp	r8, r5
  4022f0:	d930      	bls.n	402354 <__fputwc+0xa8>
  4022f2:	ab01      	add	r3, sp, #4
  4022f4:	5d59      	ldrb	r1, [r3, r5]
  4022f6:	68a3      	ldr	r3, [r4, #8]
  4022f8:	3b01      	subs	r3, #1
  4022fa:	2b00      	cmp	r3, #0
  4022fc:	60a3      	str	r3, [r4, #8]
  4022fe:	daf0      	bge.n	4022e2 <__fputwc+0x36>
  402300:	69a2      	ldr	r2, [r4, #24]
  402302:	4293      	cmp	r3, r2
  402304:	db07      	blt.n	402316 <__fputwc+0x6a>
  402306:	6823      	ldr	r3, [r4, #0]
  402308:	7019      	strb	r1, [r3, #0]
  40230a:	6823      	ldr	r3, [r4, #0]
  40230c:	7819      	ldrb	r1, [r3, #0]
  40230e:	290a      	cmp	r1, #10
  402310:	f103 0301 	add.w	r3, r3, #1
  402314:	d1e9      	bne.n	4022ea <__fputwc+0x3e>
  402316:	4638      	mov	r0, r7
  402318:	4622      	mov	r2, r4
  40231a:	f001 f9b7 	bl	40368c <__swbuf_r>
  40231e:	f1a0 30ff 	sub.w	r0, r0, #4294967295
  402322:	fab0 f080 	clz	r0, r0
  402326:	0940      	lsrs	r0, r0, #5
  402328:	2800      	cmp	r0, #0
  40232a:	d0df      	beq.n	4022ec <__fputwc+0x40>
  40232c:	f04f 30ff 	mov.w	r0, #4294967295
  402330:	b002      	add	sp, #8
  402332:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  402336:	89a3      	ldrh	r3, [r4, #12]
  402338:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40233c:	81a3      	strh	r3, [r4, #12]
  40233e:	b002      	add	sp, #8
  402340:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  402344:	1e73      	subs	r3, r6, #1
  402346:	2bfe      	cmp	r3, #254	; 0xfe
  402348:	d8ba      	bhi.n	4022c0 <__fputwc+0x14>
  40234a:	b2f1      	uxtb	r1, r6
  40234c:	4680      	mov	r8, r0
  40234e:	f88d 1004 	strb.w	r1, [sp, #4]
  402352:	e7c4      	b.n	4022de <__fputwc+0x32>
  402354:	4630      	mov	r0, r6
  402356:	b002      	add	sp, #8
  402358:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0040235c <_fputwc_r>:
  40235c:	8993      	ldrh	r3, [r2, #12]
  40235e:	f413 5f00 	tst.w	r3, #8192	; 0x2000
  402362:	d10b      	bne.n	40237c <_fputwc_r+0x20>
  402364:	b410      	push	{r4}
  402366:	6e54      	ldr	r4, [r2, #100]	; 0x64
  402368:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
  40236c:	f444 5400 	orr.w	r4, r4, #8192	; 0x2000
  402370:	6654      	str	r4, [r2, #100]	; 0x64
  402372:	8193      	strh	r3, [r2, #12]
  402374:	f85d 4b04 	ldr.w	r4, [sp], #4
  402378:	f7ff bf98 	b.w	4022ac <__fputwc>
  40237c:	f7ff bf96 	b.w	4022ac <__fputwc>

00402380 <_malloc_trim_r>:
  402380:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  402382:	4f23      	ldr	r7, [pc, #140]	; (402410 <_malloc_trim_r+0x90>)
  402384:	460c      	mov	r4, r1
  402386:	4606      	mov	r6, r0
  402388:	f000 ff32 	bl	4031f0 <__malloc_lock>
  40238c:	68bb      	ldr	r3, [r7, #8]
  40238e:	685d      	ldr	r5, [r3, #4]
  402390:	f025 0503 	bic.w	r5, r5, #3
  402394:	1b29      	subs	r1, r5, r4
  402396:	f601 71ef 	addw	r1, r1, #4079	; 0xfef
  40239a:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
  40239e:	f021 010f 	bic.w	r1, r1, #15
  4023a2:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
  4023a6:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
  4023aa:	db07      	blt.n	4023bc <_malloc_trim_r+0x3c>
  4023ac:	4630      	mov	r0, r6
  4023ae:	2100      	movs	r1, #0
  4023b0:	f001 f918 	bl	4035e4 <_sbrk_r>
  4023b4:	68bb      	ldr	r3, [r7, #8]
  4023b6:	442b      	add	r3, r5
  4023b8:	4298      	cmp	r0, r3
  4023ba:	d004      	beq.n	4023c6 <_malloc_trim_r+0x46>
  4023bc:	4630      	mov	r0, r6
  4023be:	f000 ff19 	bl	4031f4 <__malloc_unlock>
  4023c2:	2000      	movs	r0, #0
  4023c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4023c6:	4630      	mov	r0, r6
  4023c8:	4261      	negs	r1, r4
  4023ca:	f001 f90b 	bl	4035e4 <_sbrk_r>
  4023ce:	3001      	adds	r0, #1
  4023d0:	d00d      	beq.n	4023ee <_malloc_trim_r+0x6e>
  4023d2:	4b10      	ldr	r3, [pc, #64]	; (402414 <_malloc_trim_r+0x94>)
  4023d4:	68ba      	ldr	r2, [r7, #8]
  4023d6:	6819      	ldr	r1, [r3, #0]
  4023d8:	1b2d      	subs	r5, r5, r4
  4023da:	f045 0501 	orr.w	r5, r5, #1
  4023de:	4630      	mov	r0, r6
  4023e0:	1b09      	subs	r1, r1, r4
  4023e2:	6055      	str	r5, [r2, #4]
  4023e4:	6019      	str	r1, [r3, #0]
  4023e6:	f000 ff05 	bl	4031f4 <__malloc_unlock>
  4023ea:	2001      	movs	r0, #1
  4023ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4023ee:	4630      	mov	r0, r6
  4023f0:	2100      	movs	r1, #0
  4023f2:	f001 f8f7 	bl	4035e4 <_sbrk_r>
  4023f6:	68ba      	ldr	r2, [r7, #8]
  4023f8:	1a83      	subs	r3, r0, r2
  4023fa:	2b0f      	cmp	r3, #15
  4023fc:	ddde      	ble.n	4023bc <_malloc_trim_r+0x3c>
  4023fe:	4c06      	ldr	r4, [pc, #24]	; (402418 <_malloc_trim_r+0x98>)
  402400:	4904      	ldr	r1, [pc, #16]	; (402414 <_malloc_trim_r+0x94>)
  402402:	6824      	ldr	r4, [r4, #0]
  402404:	f043 0301 	orr.w	r3, r3, #1
  402408:	1b00      	subs	r0, r0, r4
  40240a:	6053      	str	r3, [r2, #4]
  40240c:	6008      	str	r0, [r1, #0]
  40240e:	e7d5      	b.n	4023bc <_malloc_trim_r+0x3c>
  402410:	20000458 	.word	0x20000458
  402414:	20000914 	.word	0x20000914
  402418:	20000864 	.word	0x20000864

0040241c <_free_r>:
  40241c:	2900      	cmp	r1, #0
  40241e:	d04e      	beq.n	4024be <_free_r+0xa2>
  402420:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  402424:	460c      	mov	r4, r1
  402426:	4680      	mov	r8, r0
  402428:	f000 fee2 	bl	4031f0 <__malloc_lock>
  40242c:	f854 7c04 	ldr.w	r7, [r4, #-4]
  402430:	4962      	ldr	r1, [pc, #392]	; (4025bc <_free_r+0x1a0>)
  402432:	f027 0201 	bic.w	r2, r7, #1
  402436:	f1a4 0508 	sub.w	r5, r4, #8
  40243a:	18ab      	adds	r3, r5, r2
  40243c:	688e      	ldr	r6, [r1, #8]
  40243e:	6858      	ldr	r0, [r3, #4]
  402440:	429e      	cmp	r6, r3
  402442:	f020 0003 	bic.w	r0, r0, #3
  402446:	d05a      	beq.n	4024fe <_free_r+0xe2>
  402448:	07fe      	lsls	r6, r7, #31
  40244a:	6058      	str	r0, [r3, #4]
  40244c:	d40b      	bmi.n	402466 <_free_r+0x4a>
  40244e:	f854 7c08 	ldr.w	r7, [r4, #-8]
  402452:	1bed      	subs	r5, r5, r7
  402454:	f101 0e08 	add.w	lr, r1, #8
  402458:	68ac      	ldr	r4, [r5, #8]
  40245a:	4574      	cmp	r4, lr
  40245c:	443a      	add	r2, r7
  40245e:	d067      	beq.n	402530 <_free_r+0x114>
  402460:	68ef      	ldr	r7, [r5, #12]
  402462:	60e7      	str	r7, [r4, #12]
  402464:	60bc      	str	r4, [r7, #8]
  402466:	181c      	adds	r4, r3, r0
  402468:	6864      	ldr	r4, [r4, #4]
  40246a:	07e4      	lsls	r4, r4, #31
  40246c:	d40c      	bmi.n	402488 <_free_r+0x6c>
  40246e:	4f54      	ldr	r7, [pc, #336]	; (4025c0 <_free_r+0x1a4>)
  402470:	689c      	ldr	r4, [r3, #8]
  402472:	42bc      	cmp	r4, r7
  402474:	4402      	add	r2, r0
  402476:	d07c      	beq.n	402572 <_free_r+0x156>
  402478:	68d8      	ldr	r0, [r3, #12]
  40247a:	60e0      	str	r0, [r4, #12]
  40247c:	f042 0301 	orr.w	r3, r2, #1
  402480:	6084      	str	r4, [r0, #8]
  402482:	606b      	str	r3, [r5, #4]
  402484:	50aa      	str	r2, [r5, r2]
  402486:	e003      	b.n	402490 <_free_r+0x74>
  402488:	f042 0301 	orr.w	r3, r2, #1
  40248c:	606b      	str	r3, [r5, #4]
  40248e:	50aa      	str	r2, [r5, r2]
  402490:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
  402494:	d214      	bcs.n	4024c0 <_free_r+0xa4>
  402496:	08d2      	lsrs	r2, r2, #3
  402498:	eb01 03c2 	add.w	r3, r1, r2, lsl #3
  40249c:	6848      	ldr	r0, [r1, #4]
  40249e:	689f      	ldr	r7, [r3, #8]
  4024a0:	60af      	str	r7, [r5, #8]
  4024a2:	1092      	asrs	r2, r2, #2
  4024a4:	2401      	movs	r4, #1
  4024a6:	fa04 f202 	lsl.w	r2, r4, r2
  4024aa:	4310      	orrs	r0, r2
  4024ac:	60eb      	str	r3, [r5, #12]
  4024ae:	6048      	str	r0, [r1, #4]
  4024b0:	609d      	str	r5, [r3, #8]
  4024b2:	60fd      	str	r5, [r7, #12]
  4024b4:	4640      	mov	r0, r8
  4024b6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  4024ba:	f000 be9b 	b.w	4031f4 <__malloc_unlock>
  4024be:	4770      	bx	lr
  4024c0:	0a53      	lsrs	r3, r2, #9
  4024c2:	2b04      	cmp	r3, #4
  4024c4:	d847      	bhi.n	402556 <_free_r+0x13a>
  4024c6:	0993      	lsrs	r3, r2, #6
  4024c8:	f103 0438 	add.w	r4, r3, #56	; 0x38
  4024cc:	0060      	lsls	r0, r4, #1
  4024ce:	eb01 0080 	add.w	r0, r1, r0, lsl #2
  4024d2:	493a      	ldr	r1, [pc, #232]	; (4025bc <_free_r+0x1a0>)
  4024d4:	6883      	ldr	r3, [r0, #8]
  4024d6:	4283      	cmp	r3, r0
  4024d8:	d043      	beq.n	402562 <_free_r+0x146>
  4024da:	6859      	ldr	r1, [r3, #4]
  4024dc:	f021 0103 	bic.w	r1, r1, #3
  4024e0:	4291      	cmp	r1, r2
  4024e2:	d902      	bls.n	4024ea <_free_r+0xce>
  4024e4:	689b      	ldr	r3, [r3, #8]
  4024e6:	4298      	cmp	r0, r3
  4024e8:	d1f7      	bne.n	4024da <_free_r+0xbe>
  4024ea:	68da      	ldr	r2, [r3, #12]
  4024ec:	60ea      	str	r2, [r5, #12]
  4024ee:	60ab      	str	r3, [r5, #8]
  4024f0:	4640      	mov	r0, r8
  4024f2:	6095      	str	r5, [r2, #8]
  4024f4:	60dd      	str	r5, [r3, #12]
  4024f6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  4024fa:	f000 be7b 	b.w	4031f4 <__malloc_unlock>
  4024fe:	07ff      	lsls	r7, r7, #31
  402500:	4402      	add	r2, r0
  402502:	d407      	bmi.n	402514 <_free_r+0xf8>
  402504:	f854 3c08 	ldr.w	r3, [r4, #-8]
  402508:	1aed      	subs	r5, r5, r3
  40250a:	441a      	add	r2, r3
  40250c:	68a8      	ldr	r0, [r5, #8]
  40250e:	68eb      	ldr	r3, [r5, #12]
  402510:	60c3      	str	r3, [r0, #12]
  402512:	6098      	str	r0, [r3, #8]
  402514:	4b2b      	ldr	r3, [pc, #172]	; (4025c4 <_free_r+0x1a8>)
  402516:	681b      	ldr	r3, [r3, #0]
  402518:	f042 0001 	orr.w	r0, r2, #1
  40251c:	429a      	cmp	r2, r3
  40251e:	6068      	str	r0, [r5, #4]
  402520:	608d      	str	r5, [r1, #8]
  402522:	d3c7      	bcc.n	4024b4 <_free_r+0x98>
  402524:	4b28      	ldr	r3, [pc, #160]	; (4025c8 <_free_r+0x1ac>)
  402526:	4640      	mov	r0, r8
  402528:	6819      	ldr	r1, [r3, #0]
  40252a:	f7ff ff29 	bl	402380 <_malloc_trim_r>
  40252e:	e7c1      	b.n	4024b4 <_free_r+0x98>
  402530:	1819      	adds	r1, r3, r0
  402532:	6849      	ldr	r1, [r1, #4]
  402534:	07c9      	lsls	r1, r1, #31
  402536:	d409      	bmi.n	40254c <_free_r+0x130>
  402538:	68d9      	ldr	r1, [r3, #12]
  40253a:	689b      	ldr	r3, [r3, #8]
  40253c:	4402      	add	r2, r0
  40253e:	f042 0001 	orr.w	r0, r2, #1
  402542:	60d9      	str	r1, [r3, #12]
  402544:	608b      	str	r3, [r1, #8]
  402546:	6068      	str	r0, [r5, #4]
  402548:	50aa      	str	r2, [r5, r2]
  40254a:	e7b3      	b.n	4024b4 <_free_r+0x98>
  40254c:	f042 0301 	orr.w	r3, r2, #1
  402550:	606b      	str	r3, [r5, #4]
  402552:	50aa      	str	r2, [r5, r2]
  402554:	e7ae      	b.n	4024b4 <_free_r+0x98>
  402556:	2b14      	cmp	r3, #20
  402558:	d814      	bhi.n	402584 <_free_r+0x168>
  40255a:	f103 045b 	add.w	r4, r3, #91	; 0x5b
  40255e:	0060      	lsls	r0, r4, #1
  402560:	e7b5      	b.n	4024ce <_free_r+0xb2>
  402562:	684a      	ldr	r2, [r1, #4]
  402564:	10a4      	asrs	r4, r4, #2
  402566:	2001      	movs	r0, #1
  402568:	40a0      	lsls	r0, r4
  40256a:	4302      	orrs	r2, r0
  40256c:	604a      	str	r2, [r1, #4]
  40256e:	461a      	mov	r2, r3
  402570:	e7bc      	b.n	4024ec <_free_r+0xd0>
  402572:	f042 0301 	orr.w	r3, r2, #1
  402576:	614d      	str	r5, [r1, #20]
  402578:	610d      	str	r5, [r1, #16]
  40257a:	60ec      	str	r4, [r5, #12]
  40257c:	60ac      	str	r4, [r5, #8]
  40257e:	606b      	str	r3, [r5, #4]
  402580:	50aa      	str	r2, [r5, r2]
  402582:	e797      	b.n	4024b4 <_free_r+0x98>
  402584:	2b54      	cmp	r3, #84	; 0x54
  402586:	d804      	bhi.n	402592 <_free_r+0x176>
  402588:	0b13      	lsrs	r3, r2, #12
  40258a:	f103 046e 	add.w	r4, r3, #110	; 0x6e
  40258e:	0060      	lsls	r0, r4, #1
  402590:	e79d      	b.n	4024ce <_free_r+0xb2>
  402592:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
  402596:	d804      	bhi.n	4025a2 <_free_r+0x186>
  402598:	0bd3      	lsrs	r3, r2, #15
  40259a:	f103 0477 	add.w	r4, r3, #119	; 0x77
  40259e:	0060      	lsls	r0, r4, #1
  4025a0:	e795      	b.n	4024ce <_free_r+0xb2>
  4025a2:	f240 5054 	movw	r0, #1364	; 0x554
  4025a6:	4283      	cmp	r3, r0
  4025a8:	d804      	bhi.n	4025b4 <_free_r+0x198>
  4025aa:	0c93      	lsrs	r3, r2, #18
  4025ac:	f103 047c 	add.w	r4, r3, #124	; 0x7c
  4025b0:	0060      	lsls	r0, r4, #1
  4025b2:	e78c      	b.n	4024ce <_free_r+0xb2>
  4025b4:	20fc      	movs	r0, #252	; 0xfc
  4025b6:	247e      	movs	r4, #126	; 0x7e
  4025b8:	e789      	b.n	4024ce <_free_r+0xb2>
  4025ba:	bf00      	nop
  4025bc:	20000458 	.word	0x20000458
  4025c0:	20000460 	.word	0x20000460
  4025c4:	20000860 	.word	0x20000860
  4025c8:	20000910 	.word	0x20000910

004025cc <__sfvwrite_r>:
  4025cc:	6893      	ldr	r3, [r2, #8]
  4025ce:	2b00      	cmp	r3, #0
  4025d0:	d07a      	beq.n	4026c8 <__sfvwrite_r+0xfc>
  4025d2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4025d6:	f8b1 e00c 	ldrh.w	lr, [r1, #12]
  4025da:	f01e 0f08 	tst.w	lr, #8
  4025de:	b083      	sub	sp, #12
  4025e0:	460c      	mov	r4, r1
  4025e2:	4681      	mov	r9, r0
  4025e4:	4616      	mov	r6, r2
  4025e6:	d026      	beq.n	402636 <__sfvwrite_r+0x6a>
  4025e8:	690b      	ldr	r3, [r1, #16]
  4025ea:	b323      	cbz	r3, 402636 <__sfvwrite_r+0x6a>
  4025ec:	f00e 0802 	and.w	r8, lr, #2
  4025f0:	fa1f f088 	uxth.w	r0, r8
  4025f4:	6835      	ldr	r5, [r6, #0]
  4025f6:	b370      	cbz	r0, 402656 <__sfvwrite_r+0x8a>
  4025f8:	f04f 0a00 	mov.w	sl, #0
  4025fc:	f8df b2e0 	ldr.w	fp, [pc, #736]	; 4028e0 <__sfvwrite_r+0x314>
  402600:	46d0      	mov	r8, sl
  402602:	45d8      	cmp	r8, fp
  402604:	4643      	mov	r3, r8
  402606:	4652      	mov	r2, sl
  402608:	bf28      	it	cs
  40260a:	465b      	movcs	r3, fp
  40260c:	4648      	mov	r0, r9
  40260e:	f1b8 0f00 	cmp.w	r8, #0
  402612:	d053      	beq.n	4026bc <__sfvwrite_r+0xf0>
  402614:	69e1      	ldr	r1, [r4, #28]
  402616:	6a67      	ldr	r7, [r4, #36]	; 0x24
  402618:	47b8      	blx	r7
  40261a:	2800      	cmp	r0, #0
  40261c:	dd73      	ble.n	402706 <__sfvwrite_r+0x13a>
  40261e:	68b3      	ldr	r3, [r6, #8]
  402620:	1a1b      	subs	r3, r3, r0
  402622:	4482      	add	sl, r0
  402624:	ebc0 0808 	rsb	r8, r0, r8
  402628:	60b3      	str	r3, [r6, #8]
  40262a:	2b00      	cmp	r3, #0
  40262c:	d1e9      	bne.n	402602 <__sfvwrite_r+0x36>
  40262e:	2000      	movs	r0, #0
  402630:	b003      	add	sp, #12
  402632:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  402636:	4648      	mov	r0, r9
  402638:	4621      	mov	r1, r4
  40263a:	f7ff fc67 	bl	401f0c <__swsetup_r>
  40263e:	2800      	cmp	r0, #0
  402640:	f040 8145 	bne.w	4028ce <__sfvwrite_r+0x302>
  402644:	f8b4 e00c 	ldrh.w	lr, [r4, #12]
  402648:	6835      	ldr	r5, [r6, #0]
  40264a:	f00e 0802 	and.w	r8, lr, #2
  40264e:	fa1f f088 	uxth.w	r0, r8
  402652:	2800      	cmp	r0, #0
  402654:	d1d0      	bne.n	4025f8 <__sfvwrite_r+0x2c>
  402656:	f01e 0b01 	ands.w	fp, lr, #1
  40265a:	d15d      	bne.n	402718 <__sfvwrite_r+0x14c>
  40265c:	46d8      	mov	r8, fp
  40265e:	f1b8 0f00 	cmp.w	r8, #0
  402662:	d025      	beq.n	4026b0 <__sfvwrite_r+0xe4>
  402664:	f41e 7f00 	tst.w	lr, #512	; 0x200
  402668:	68a7      	ldr	r7, [r4, #8]
  40266a:	d02f      	beq.n	4026cc <__sfvwrite_r+0x100>
  40266c:	45b8      	cmp	r8, r7
  40266e:	46ba      	mov	sl, r7
  402670:	f0c0 80a9 	bcc.w	4027c6 <__sfvwrite_r+0x1fa>
  402674:	f41e 6f90 	tst.w	lr, #1152	; 0x480
  402678:	f040 80b6 	bne.w	4027e8 <__sfvwrite_r+0x21c>
  40267c:	6820      	ldr	r0, [r4, #0]
  40267e:	4652      	mov	r2, sl
  402680:	4659      	mov	r1, fp
  402682:	f000 fd51 	bl	403128 <memmove>
  402686:	68a0      	ldr	r0, [r4, #8]
  402688:	6822      	ldr	r2, [r4, #0]
  40268a:	1bc0      	subs	r0, r0, r7
  40268c:	eb02 030a 	add.w	r3, r2, sl
  402690:	60a0      	str	r0, [r4, #8]
  402692:	6023      	str	r3, [r4, #0]
  402694:	4640      	mov	r0, r8
  402696:	68b3      	ldr	r3, [r6, #8]
  402698:	1a1b      	subs	r3, r3, r0
  40269a:	4483      	add	fp, r0
  40269c:	ebc0 0808 	rsb	r8, r0, r8
  4026a0:	60b3      	str	r3, [r6, #8]
  4026a2:	2b00      	cmp	r3, #0
  4026a4:	d0c3      	beq.n	40262e <__sfvwrite_r+0x62>
  4026a6:	f8b4 e00c 	ldrh.w	lr, [r4, #12]
  4026aa:	f1b8 0f00 	cmp.w	r8, #0
  4026ae:	d1d9      	bne.n	402664 <__sfvwrite_r+0x98>
  4026b0:	f8d5 b000 	ldr.w	fp, [r5]
  4026b4:	f8d5 8004 	ldr.w	r8, [r5, #4]
  4026b8:	3508      	adds	r5, #8
  4026ba:	e7d0      	b.n	40265e <__sfvwrite_r+0x92>
  4026bc:	f8d5 a000 	ldr.w	sl, [r5]
  4026c0:	f8d5 8004 	ldr.w	r8, [r5, #4]
  4026c4:	3508      	adds	r5, #8
  4026c6:	e79c      	b.n	402602 <__sfvwrite_r+0x36>
  4026c8:	2000      	movs	r0, #0
  4026ca:	4770      	bx	lr
  4026cc:	6820      	ldr	r0, [r4, #0]
  4026ce:	6923      	ldr	r3, [r4, #16]
  4026d0:	4298      	cmp	r0, r3
  4026d2:	d803      	bhi.n	4026dc <__sfvwrite_r+0x110>
  4026d4:	6962      	ldr	r2, [r4, #20]
  4026d6:	4590      	cmp	r8, r2
  4026d8:	f080 80b9 	bcs.w	40284e <__sfvwrite_r+0x282>
  4026dc:	4547      	cmp	r7, r8
  4026de:	bf28      	it	cs
  4026e0:	4647      	movcs	r7, r8
  4026e2:	463a      	mov	r2, r7
  4026e4:	4659      	mov	r1, fp
  4026e6:	f000 fd1f 	bl	403128 <memmove>
  4026ea:	68a3      	ldr	r3, [r4, #8]
  4026ec:	6822      	ldr	r2, [r4, #0]
  4026ee:	1bdb      	subs	r3, r3, r7
  4026f0:	443a      	add	r2, r7
  4026f2:	60a3      	str	r3, [r4, #8]
  4026f4:	6022      	str	r2, [r4, #0]
  4026f6:	2b00      	cmp	r3, #0
  4026f8:	d14a      	bne.n	402790 <__sfvwrite_r+0x1c4>
  4026fa:	4648      	mov	r0, r9
  4026fc:	4621      	mov	r1, r4
  4026fe:	f7ff fd21 	bl	402144 <_fflush_r>
  402702:	2800      	cmp	r0, #0
  402704:	d044      	beq.n	402790 <__sfvwrite_r+0x1c4>
  402706:	89a3      	ldrh	r3, [r4, #12]
  402708:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40270c:	f04f 30ff 	mov.w	r0, #4294967295
  402710:	81a3      	strh	r3, [r4, #12]
  402712:	b003      	add	sp, #12
  402714:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  402718:	4680      	mov	r8, r0
  40271a:	9000      	str	r0, [sp, #0]
  40271c:	4683      	mov	fp, r0
  40271e:	4682      	mov	sl, r0
  402720:	f1ba 0f00 	cmp.w	sl, #0
  402724:	d02c      	beq.n	402780 <__sfvwrite_r+0x1b4>
  402726:	9b00      	ldr	r3, [sp, #0]
  402728:	2b00      	cmp	r3, #0
  40272a:	d050      	beq.n	4027ce <__sfvwrite_r+0x202>
  40272c:	6820      	ldr	r0, [r4, #0]
  40272e:	6921      	ldr	r1, [r4, #16]
  402730:	f8d4 e008 	ldr.w	lr, [r4, #8]
  402734:	6962      	ldr	r2, [r4, #20]
  402736:	45d0      	cmp	r8, sl
  402738:	4643      	mov	r3, r8
  40273a:	bf28      	it	cs
  40273c:	4653      	movcs	r3, sl
  40273e:	4288      	cmp	r0, r1
  402740:	461f      	mov	r7, r3
  402742:	d904      	bls.n	40274e <__sfvwrite_r+0x182>
  402744:	eb0e 0c02 	add.w	ip, lr, r2
  402748:	4563      	cmp	r3, ip
  40274a:	f300 8092 	bgt.w	402872 <__sfvwrite_r+0x2a6>
  40274e:	4293      	cmp	r3, r2
  402750:	db20      	blt.n	402794 <__sfvwrite_r+0x1c8>
  402752:	4613      	mov	r3, r2
  402754:	6a67      	ldr	r7, [r4, #36]	; 0x24
  402756:	69e1      	ldr	r1, [r4, #28]
  402758:	4648      	mov	r0, r9
  40275a:	465a      	mov	r2, fp
  40275c:	47b8      	blx	r7
  40275e:	1e07      	subs	r7, r0, #0
  402760:	ddd1      	ble.n	402706 <__sfvwrite_r+0x13a>
  402762:	ebb8 0807 	subs.w	r8, r8, r7
  402766:	d025      	beq.n	4027b4 <__sfvwrite_r+0x1e8>
  402768:	68b3      	ldr	r3, [r6, #8]
  40276a:	1bdb      	subs	r3, r3, r7
  40276c:	44bb      	add	fp, r7
  40276e:	ebc7 0a0a 	rsb	sl, r7, sl
  402772:	60b3      	str	r3, [r6, #8]
  402774:	2b00      	cmp	r3, #0
  402776:	f43f af5a 	beq.w	40262e <__sfvwrite_r+0x62>
  40277a:	f1ba 0f00 	cmp.w	sl, #0
  40277e:	d1d2      	bne.n	402726 <__sfvwrite_r+0x15a>
  402780:	2300      	movs	r3, #0
  402782:	f8d5 b000 	ldr.w	fp, [r5]
  402786:	f8d5 a004 	ldr.w	sl, [r5, #4]
  40278a:	9300      	str	r3, [sp, #0]
  40278c:	3508      	adds	r5, #8
  40278e:	e7c7      	b.n	402720 <__sfvwrite_r+0x154>
  402790:	4638      	mov	r0, r7
  402792:	e780      	b.n	402696 <__sfvwrite_r+0xca>
  402794:	461a      	mov	r2, r3
  402796:	4659      	mov	r1, fp
  402798:	9301      	str	r3, [sp, #4]
  40279a:	f000 fcc5 	bl	403128 <memmove>
  40279e:	68a2      	ldr	r2, [r4, #8]
  4027a0:	6821      	ldr	r1, [r4, #0]
  4027a2:	9b01      	ldr	r3, [sp, #4]
  4027a4:	ebb8 0807 	subs.w	r8, r8, r7
  4027a8:	eba2 0203 	sub.w	r2, r2, r3
  4027ac:	440b      	add	r3, r1
  4027ae:	60a2      	str	r2, [r4, #8]
  4027b0:	6023      	str	r3, [r4, #0]
  4027b2:	d1d9      	bne.n	402768 <__sfvwrite_r+0x19c>
  4027b4:	4648      	mov	r0, r9
  4027b6:	4621      	mov	r1, r4
  4027b8:	f7ff fcc4 	bl	402144 <_fflush_r>
  4027bc:	2800      	cmp	r0, #0
  4027be:	d1a2      	bne.n	402706 <__sfvwrite_r+0x13a>
  4027c0:	f8cd 8000 	str.w	r8, [sp]
  4027c4:	e7d0      	b.n	402768 <__sfvwrite_r+0x19c>
  4027c6:	6820      	ldr	r0, [r4, #0]
  4027c8:	4647      	mov	r7, r8
  4027ca:	46c2      	mov	sl, r8
  4027cc:	e757      	b.n	40267e <__sfvwrite_r+0xb2>
  4027ce:	4658      	mov	r0, fp
  4027d0:	210a      	movs	r1, #10
  4027d2:	4652      	mov	r2, sl
  4027d4:	f000 fbc4 	bl	402f60 <memchr>
  4027d8:	2800      	cmp	r0, #0
  4027da:	d073      	beq.n	4028c4 <__sfvwrite_r+0x2f8>
  4027dc:	3001      	adds	r0, #1
  4027de:	2301      	movs	r3, #1
  4027e0:	ebcb 0800 	rsb	r8, fp, r0
  4027e4:	9300      	str	r3, [sp, #0]
  4027e6:	e7a1      	b.n	40272c <__sfvwrite_r+0x160>
  4027e8:	6967      	ldr	r7, [r4, #20]
  4027ea:	6921      	ldr	r1, [r4, #16]
  4027ec:	6823      	ldr	r3, [r4, #0]
  4027ee:	eb07 0747 	add.w	r7, r7, r7, lsl #1
  4027f2:	1a5b      	subs	r3, r3, r1
  4027f4:	eb07 77d7 	add.w	r7, r7, r7, lsr #31
  4027f8:	1c58      	adds	r0, r3, #1
  4027fa:	107f      	asrs	r7, r7, #1
  4027fc:	4440      	add	r0, r8
  4027fe:	4287      	cmp	r7, r0
  402800:	463a      	mov	r2, r7
  402802:	bf3c      	itt	cc
  402804:	4607      	movcc	r7, r0
  402806:	463a      	movcc	r2, r7
  402808:	f41e 6f80 	tst.w	lr, #1024	; 0x400
  40280c:	9300      	str	r3, [sp, #0]
  40280e:	d046      	beq.n	40289e <__sfvwrite_r+0x2d2>
  402810:	4611      	mov	r1, r2
  402812:	4648      	mov	r0, r9
  402814:	f000 f912 	bl	402a3c <_malloc_r>
  402818:	9b00      	ldr	r3, [sp, #0]
  40281a:	4682      	mov	sl, r0
  40281c:	2800      	cmp	r0, #0
  40281e:	d059      	beq.n	4028d4 <__sfvwrite_r+0x308>
  402820:	461a      	mov	r2, r3
  402822:	6921      	ldr	r1, [r4, #16]
  402824:	9300      	str	r3, [sp, #0]
  402826:	f000 fbe5 	bl	402ff4 <memcpy>
  40282a:	89a2      	ldrh	r2, [r4, #12]
  40282c:	9b00      	ldr	r3, [sp, #0]
  40282e:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
  402832:	f042 0280 	orr.w	r2, r2, #128	; 0x80
  402836:	81a2      	strh	r2, [r4, #12]
  402838:	eb0a 0003 	add.w	r0, sl, r3
  40283c:	1afb      	subs	r3, r7, r3
  40283e:	f8c4 a010 	str.w	sl, [r4, #16]
  402842:	6167      	str	r7, [r4, #20]
  402844:	6020      	str	r0, [r4, #0]
  402846:	60a3      	str	r3, [r4, #8]
  402848:	4647      	mov	r7, r8
  40284a:	46c2      	mov	sl, r8
  40284c:	e717      	b.n	40267e <__sfvwrite_r+0xb2>
  40284e:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
  402852:	4543      	cmp	r3, r8
  402854:	bf28      	it	cs
  402856:	4643      	movcs	r3, r8
  402858:	6a67      	ldr	r7, [r4, #36]	; 0x24
  40285a:	fb93 f3f2 	sdiv	r3, r3, r2
  40285e:	4648      	mov	r0, r9
  402860:	fb03 f302 	mul.w	r3, r3, r2
  402864:	69e1      	ldr	r1, [r4, #28]
  402866:	465a      	mov	r2, fp
  402868:	47b8      	blx	r7
  40286a:	2800      	cmp	r0, #0
  40286c:	f73f af13 	bgt.w	402696 <__sfvwrite_r+0xca>
  402870:	e749      	b.n	402706 <__sfvwrite_r+0x13a>
  402872:	4662      	mov	r2, ip
  402874:	4659      	mov	r1, fp
  402876:	f8cd c004 	str.w	ip, [sp, #4]
  40287a:	f000 fc55 	bl	403128 <memmove>
  40287e:	6823      	ldr	r3, [r4, #0]
  402880:	f8dd c004 	ldr.w	ip, [sp, #4]
  402884:	4463      	add	r3, ip
  402886:	6023      	str	r3, [r4, #0]
  402888:	4648      	mov	r0, r9
  40288a:	4621      	mov	r1, r4
  40288c:	f7ff fc5a 	bl	402144 <_fflush_r>
  402890:	f8dd c004 	ldr.w	ip, [sp, #4]
  402894:	2800      	cmp	r0, #0
  402896:	f47f af36 	bne.w	402706 <__sfvwrite_r+0x13a>
  40289a:	4667      	mov	r7, ip
  40289c:	e761      	b.n	402762 <__sfvwrite_r+0x196>
  40289e:	4648      	mov	r0, r9
  4028a0:	f000 fcaa 	bl	4031f8 <_realloc_r>
  4028a4:	9b00      	ldr	r3, [sp, #0]
  4028a6:	4682      	mov	sl, r0
  4028a8:	2800      	cmp	r0, #0
  4028aa:	d1c5      	bne.n	402838 <__sfvwrite_r+0x26c>
  4028ac:	4648      	mov	r0, r9
  4028ae:	6921      	ldr	r1, [r4, #16]
  4028b0:	f7ff fdb4 	bl	40241c <_free_r>
  4028b4:	89a3      	ldrh	r3, [r4, #12]
  4028b6:	220c      	movs	r2, #12
  4028b8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  4028bc:	b29b      	uxth	r3, r3
  4028be:	f8c9 2000 	str.w	r2, [r9]
  4028c2:	e721      	b.n	402708 <__sfvwrite_r+0x13c>
  4028c4:	2301      	movs	r3, #1
  4028c6:	f10a 0801 	add.w	r8, sl, #1
  4028ca:	9300      	str	r3, [sp, #0]
  4028cc:	e72e      	b.n	40272c <__sfvwrite_r+0x160>
  4028ce:	f04f 30ff 	mov.w	r0, #4294967295
  4028d2:	e6ad      	b.n	402630 <__sfvwrite_r+0x64>
  4028d4:	230c      	movs	r3, #12
  4028d6:	f8c9 3000 	str.w	r3, [r9]
  4028da:	89a3      	ldrh	r3, [r4, #12]
  4028dc:	e714      	b.n	402708 <__sfvwrite_r+0x13c>
  4028de:	bf00      	nop
  4028e0:	7ffffc00 	.word	0x7ffffc00

004028e4 <_fwalk_reent>:
  4028e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  4028e8:	f510 7738 	adds.w	r7, r0, #736	; 0x2e0
  4028ec:	d01f      	beq.n	40292e <_fwalk_reent+0x4a>
  4028ee:	4688      	mov	r8, r1
  4028f0:	4606      	mov	r6, r0
  4028f2:	f04f 0900 	mov.w	r9, #0
  4028f6:	687d      	ldr	r5, [r7, #4]
  4028f8:	68bc      	ldr	r4, [r7, #8]
  4028fa:	3d01      	subs	r5, #1
  4028fc:	d411      	bmi.n	402922 <_fwalk_reent+0x3e>
  4028fe:	89a3      	ldrh	r3, [r4, #12]
  402900:	2b01      	cmp	r3, #1
  402902:	f105 35ff 	add.w	r5, r5, #4294967295
  402906:	d908      	bls.n	40291a <_fwalk_reent+0x36>
  402908:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
  40290c:	3301      	adds	r3, #1
  40290e:	4621      	mov	r1, r4
  402910:	4630      	mov	r0, r6
  402912:	d002      	beq.n	40291a <_fwalk_reent+0x36>
  402914:	47c0      	blx	r8
  402916:	ea49 0900 	orr.w	r9, r9, r0
  40291a:	1c6b      	adds	r3, r5, #1
  40291c:	f104 0468 	add.w	r4, r4, #104	; 0x68
  402920:	d1ed      	bne.n	4028fe <_fwalk_reent+0x1a>
  402922:	683f      	ldr	r7, [r7, #0]
  402924:	2f00      	cmp	r7, #0
  402926:	d1e6      	bne.n	4028f6 <_fwalk_reent+0x12>
  402928:	4648      	mov	r0, r9
  40292a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40292e:	46b9      	mov	r9, r7
  402930:	4648      	mov	r0, r9
  402932:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  402936:	bf00      	nop

00402938 <__locale_charset>:
  402938:	4800      	ldr	r0, [pc, #0]	; (40293c <__locale_charset+0x4>)
  40293a:	4770      	bx	lr
  40293c:	20000434 	.word	0x20000434

00402940 <__locale_mb_cur_max>:
  402940:	4b01      	ldr	r3, [pc, #4]	; (402948 <__locale_mb_cur_max+0x8>)
  402942:	6818      	ldr	r0, [r3, #0]
  402944:	4770      	bx	lr
  402946:	bf00      	nop
  402948:	20000454 	.word	0x20000454

0040294c <__smakebuf_r>:
  40294c:	898b      	ldrh	r3, [r1, #12]
  40294e:	b29a      	uxth	r2, r3
  402950:	f012 0f02 	tst.w	r2, #2
  402954:	d13c      	bne.n	4029d0 <__smakebuf_r+0x84>
  402956:	b5f0      	push	{r4, r5, r6, r7, lr}
  402958:	460c      	mov	r4, r1
  40295a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  40295e:	2900      	cmp	r1, #0
  402960:	b091      	sub	sp, #68	; 0x44
  402962:	4605      	mov	r5, r0
  402964:	db19      	blt.n	40299a <__smakebuf_r+0x4e>
  402966:	aa01      	add	r2, sp, #4
  402968:	f000 ffd6 	bl	403918 <_fstat_r>
  40296c:	2800      	cmp	r0, #0
  40296e:	db12      	blt.n	402996 <__smakebuf_r+0x4a>
  402970:	9b02      	ldr	r3, [sp, #8]
  402972:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
  402976:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
  40297a:	f5a3 5700 	sub.w	r7, r3, #8192	; 0x2000
  40297e:	fab7 f787 	clz	r7, r7
  402982:	ea4f 1757 	mov.w	r7, r7, lsr #5
  402986:	d02a      	beq.n	4029de <__smakebuf_r+0x92>
  402988:	89a3      	ldrh	r3, [r4, #12]
  40298a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
  40298e:	81a3      	strh	r3, [r4, #12]
  402990:	f44f 6680 	mov.w	r6, #1024	; 0x400
  402994:	e00b      	b.n	4029ae <__smakebuf_r+0x62>
  402996:	89a3      	ldrh	r3, [r4, #12]
  402998:	b29a      	uxth	r2, r3
  40299a:	f012 0f80 	tst.w	r2, #128	; 0x80
  40299e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
  4029a2:	81a3      	strh	r3, [r4, #12]
  4029a4:	bf0c      	ite	eq
  4029a6:	f44f 6680 	moveq.w	r6, #1024	; 0x400
  4029aa:	2640      	movne	r6, #64	; 0x40
  4029ac:	2700      	movs	r7, #0
  4029ae:	4628      	mov	r0, r5
  4029b0:	4631      	mov	r1, r6
  4029b2:	f000 f843 	bl	402a3c <_malloc_r>
  4029b6:	89a3      	ldrh	r3, [r4, #12]
  4029b8:	b340      	cbz	r0, 402a0c <__smakebuf_r+0xc0>
  4029ba:	4a1a      	ldr	r2, [pc, #104]	; (402a24 <__smakebuf_r+0xd8>)
  4029bc:	63ea      	str	r2, [r5, #60]	; 0x3c
  4029be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  4029c2:	81a3      	strh	r3, [r4, #12]
  4029c4:	6020      	str	r0, [r4, #0]
  4029c6:	6120      	str	r0, [r4, #16]
  4029c8:	6166      	str	r6, [r4, #20]
  4029ca:	b99f      	cbnz	r7, 4029f4 <__smakebuf_r+0xa8>
  4029cc:	b011      	add	sp, #68	; 0x44
  4029ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4029d0:	f101 0343 	add.w	r3, r1, #67	; 0x43
  4029d4:	2201      	movs	r2, #1
  4029d6:	600b      	str	r3, [r1, #0]
  4029d8:	610b      	str	r3, [r1, #16]
  4029da:	614a      	str	r2, [r1, #20]
  4029dc:	4770      	bx	lr
  4029de:	4b12      	ldr	r3, [pc, #72]	; (402a28 <__smakebuf_r+0xdc>)
  4029e0:	6aa2      	ldr	r2, [r4, #40]	; 0x28
  4029e2:	429a      	cmp	r2, r3
  4029e4:	d1d0      	bne.n	402988 <__smakebuf_r+0x3c>
  4029e6:	89a3      	ldrh	r3, [r4, #12]
  4029e8:	f44f 6680 	mov.w	r6, #1024	; 0x400
  4029ec:	4333      	orrs	r3, r6
  4029ee:	81a3      	strh	r3, [r4, #12]
  4029f0:	64e6      	str	r6, [r4, #76]	; 0x4c
  4029f2:	e7dc      	b.n	4029ae <__smakebuf_r+0x62>
  4029f4:	4628      	mov	r0, r5
  4029f6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  4029fa:	f000 ffa1 	bl	403940 <_isatty_r>
  4029fe:	2800      	cmp	r0, #0
  402a00:	d0e4      	beq.n	4029cc <__smakebuf_r+0x80>
  402a02:	89a3      	ldrh	r3, [r4, #12]
  402a04:	f043 0301 	orr.w	r3, r3, #1
  402a08:	81a3      	strh	r3, [r4, #12]
  402a0a:	e7df      	b.n	4029cc <__smakebuf_r+0x80>
  402a0c:	059a      	lsls	r2, r3, #22
  402a0e:	d4dd      	bmi.n	4029cc <__smakebuf_r+0x80>
  402a10:	f104 0243 	add.w	r2, r4, #67	; 0x43
  402a14:	f043 0302 	orr.w	r3, r3, #2
  402a18:	2101      	movs	r1, #1
  402a1a:	81a3      	strh	r3, [r4, #12]
  402a1c:	6022      	str	r2, [r4, #0]
  402a1e:	6122      	str	r2, [r4, #16]
  402a20:	6161      	str	r1, [r4, #20]
  402a22:	e7d3      	b.n	4029cc <__smakebuf_r+0x80>
  402a24:	00402171 	.word	0x00402171
  402a28:	00403665 	.word	0x00403665

00402a2c <malloc>:
  402a2c:	4b02      	ldr	r3, [pc, #8]	; (402a38 <malloc+0xc>)
  402a2e:	4601      	mov	r1, r0
  402a30:	6818      	ldr	r0, [r3, #0]
  402a32:	f000 b803 	b.w	402a3c <_malloc_r>
  402a36:	bf00      	nop
  402a38:	20000430 	.word	0x20000430

00402a3c <_malloc_r>:
  402a3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  402a40:	f101 050b 	add.w	r5, r1, #11
  402a44:	2d16      	cmp	r5, #22
  402a46:	b083      	sub	sp, #12
  402a48:	4606      	mov	r6, r0
  402a4a:	d927      	bls.n	402a9c <_malloc_r+0x60>
  402a4c:	f035 0507 	bics.w	r5, r5, #7
  402a50:	f100 80b6 	bmi.w	402bc0 <_malloc_r+0x184>
  402a54:	42a9      	cmp	r1, r5
  402a56:	f200 80b3 	bhi.w	402bc0 <_malloc_r+0x184>
  402a5a:	f000 fbc9 	bl	4031f0 <__malloc_lock>
  402a5e:	f5b5 7ffc 	cmp.w	r5, #504	; 0x1f8
  402a62:	d222      	bcs.n	402aaa <_malloc_r+0x6e>
  402a64:	4fc2      	ldr	r7, [pc, #776]	; (402d70 <_malloc_r+0x334>)
  402a66:	08e8      	lsrs	r0, r5, #3
  402a68:	eb07 03c0 	add.w	r3, r7, r0, lsl #3
  402a6c:	68dc      	ldr	r4, [r3, #12]
  402a6e:	429c      	cmp	r4, r3
  402a70:	f000 81c8 	beq.w	402e04 <_malloc_r+0x3c8>
  402a74:	6863      	ldr	r3, [r4, #4]
  402a76:	68e1      	ldr	r1, [r4, #12]
  402a78:	68a5      	ldr	r5, [r4, #8]
  402a7a:	f023 0303 	bic.w	r3, r3, #3
  402a7e:	4423      	add	r3, r4
  402a80:	4630      	mov	r0, r6
  402a82:	685a      	ldr	r2, [r3, #4]
  402a84:	60e9      	str	r1, [r5, #12]
  402a86:	f042 0201 	orr.w	r2, r2, #1
  402a8a:	608d      	str	r5, [r1, #8]
  402a8c:	605a      	str	r2, [r3, #4]
  402a8e:	f000 fbb1 	bl	4031f4 <__malloc_unlock>
  402a92:	3408      	adds	r4, #8
  402a94:	4620      	mov	r0, r4
  402a96:	b003      	add	sp, #12
  402a98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  402a9c:	2910      	cmp	r1, #16
  402a9e:	f200 808f 	bhi.w	402bc0 <_malloc_r+0x184>
  402aa2:	f000 fba5 	bl	4031f0 <__malloc_lock>
  402aa6:	2510      	movs	r5, #16
  402aa8:	e7dc      	b.n	402a64 <_malloc_r+0x28>
  402aaa:	0a68      	lsrs	r0, r5, #9
  402aac:	f000 808f 	beq.w	402bce <_malloc_r+0x192>
  402ab0:	2804      	cmp	r0, #4
  402ab2:	f200 8154 	bhi.w	402d5e <_malloc_r+0x322>
  402ab6:	09a8      	lsrs	r0, r5, #6
  402ab8:	3038      	adds	r0, #56	; 0x38
  402aba:	0041      	lsls	r1, r0, #1
  402abc:	4fac      	ldr	r7, [pc, #688]	; (402d70 <_malloc_r+0x334>)
  402abe:	eb07 0181 	add.w	r1, r7, r1, lsl #2
  402ac2:	68cc      	ldr	r4, [r1, #12]
  402ac4:	42a1      	cmp	r1, r4
  402ac6:	d106      	bne.n	402ad6 <_malloc_r+0x9a>
  402ac8:	e00c      	b.n	402ae4 <_malloc_r+0xa8>
  402aca:	2a00      	cmp	r2, #0
  402acc:	f280 8082 	bge.w	402bd4 <_malloc_r+0x198>
  402ad0:	68e4      	ldr	r4, [r4, #12]
  402ad2:	42a1      	cmp	r1, r4
  402ad4:	d006      	beq.n	402ae4 <_malloc_r+0xa8>
  402ad6:	6863      	ldr	r3, [r4, #4]
  402ad8:	f023 0303 	bic.w	r3, r3, #3
  402adc:	1b5a      	subs	r2, r3, r5
  402ade:	2a0f      	cmp	r2, #15
  402ae0:	ddf3      	ble.n	402aca <_malloc_r+0x8e>
  402ae2:	3801      	subs	r0, #1
  402ae4:	3001      	adds	r0, #1
  402ae6:	49a2      	ldr	r1, [pc, #648]	; (402d70 <_malloc_r+0x334>)
  402ae8:	693c      	ldr	r4, [r7, #16]
  402aea:	f101 0e08 	add.w	lr, r1, #8
  402aee:	4574      	cmp	r4, lr
  402af0:	f000 817d 	beq.w	402dee <_malloc_r+0x3b2>
  402af4:	6863      	ldr	r3, [r4, #4]
  402af6:	f023 0303 	bic.w	r3, r3, #3
  402afa:	1b5a      	subs	r2, r3, r5
  402afc:	2a0f      	cmp	r2, #15
  402afe:	f300 8163 	bgt.w	402dc8 <_malloc_r+0x38c>
  402b02:	2a00      	cmp	r2, #0
  402b04:	f8c1 e014 	str.w	lr, [r1, #20]
  402b08:	f8c1 e010 	str.w	lr, [r1, #16]
  402b0c:	da73      	bge.n	402bf6 <_malloc_r+0x1ba>
  402b0e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  402b12:	f080 8139 	bcs.w	402d88 <_malloc_r+0x34c>
  402b16:	08db      	lsrs	r3, r3, #3
  402b18:	eb01 08c3 	add.w	r8, r1, r3, lsl #3
  402b1c:	ea4f 0ca3 	mov.w	ip, r3, asr #2
  402b20:	684a      	ldr	r2, [r1, #4]
  402b22:	f8d8 9008 	ldr.w	r9, [r8, #8]
  402b26:	f8c4 9008 	str.w	r9, [r4, #8]
  402b2a:	2301      	movs	r3, #1
  402b2c:	fa03 f30c 	lsl.w	r3, r3, ip
  402b30:	4313      	orrs	r3, r2
  402b32:	f8c4 800c 	str.w	r8, [r4, #12]
  402b36:	604b      	str	r3, [r1, #4]
  402b38:	f8c8 4008 	str.w	r4, [r8, #8]
  402b3c:	f8c9 400c 	str.w	r4, [r9, #12]
  402b40:	1082      	asrs	r2, r0, #2
  402b42:	2401      	movs	r4, #1
  402b44:	4094      	lsls	r4, r2
  402b46:	429c      	cmp	r4, r3
  402b48:	d862      	bhi.n	402c10 <_malloc_r+0x1d4>
  402b4a:	4223      	tst	r3, r4
  402b4c:	d106      	bne.n	402b5c <_malloc_r+0x120>
  402b4e:	f020 0003 	bic.w	r0, r0, #3
  402b52:	0064      	lsls	r4, r4, #1
  402b54:	4223      	tst	r3, r4
  402b56:	f100 0004 	add.w	r0, r0, #4
  402b5a:	d0fa      	beq.n	402b52 <_malloc_r+0x116>
  402b5c:	eb07 08c0 	add.w	r8, r7, r0, lsl #3
  402b60:	46c4      	mov	ip, r8
  402b62:	4681      	mov	r9, r0
  402b64:	f8dc 300c 	ldr.w	r3, [ip, #12]
  402b68:	459c      	cmp	ip, r3
  402b6a:	d107      	bne.n	402b7c <_malloc_r+0x140>
  402b6c:	e141      	b.n	402df2 <_malloc_r+0x3b6>
  402b6e:	2900      	cmp	r1, #0
  402b70:	f280 8151 	bge.w	402e16 <_malloc_r+0x3da>
  402b74:	68db      	ldr	r3, [r3, #12]
  402b76:	459c      	cmp	ip, r3
  402b78:	f000 813b 	beq.w	402df2 <_malloc_r+0x3b6>
  402b7c:	685a      	ldr	r2, [r3, #4]
  402b7e:	f022 0203 	bic.w	r2, r2, #3
  402b82:	1b51      	subs	r1, r2, r5
  402b84:	290f      	cmp	r1, #15
  402b86:	ddf2      	ble.n	402b6e <_malloc_r+0x132>
  402b88:	461c      	mov	r4, r3
  402b8a:	f8d3 c00c 	ldr.w	ip, [r3, #12]
  402b8e:	f854 8f08 	ldr.w	r8, [r4, #8]!
  402b92:	195a      	adds	r2, r3, r5
  402b94:	f045 0901 	orr.w	r9, r5, #1
  402b98:	f041 0501 	orr.w	r5, r1, #1
  402b9c:	f8c3 9004 	str.w	r9, [r3, #4]
  402ba0:	4630      	mov	r0, r6
  402ba2:	f8c8 c00c 	str.w	ip, [r8, #12]
  402ba6:	f8cc 8008 	str.w	r8, [ip, #8]
  402baa:	617a      	str	r2, [r7, #20]
  402bac:	613a      	str	r2, [r7, #16]
  402bae:	f8c2 e00c 	str.w	lr, [r2, #12]
  402bb2:	f8c2 e008 	str.w	lr, [r2, #8]
  402bb6:	6055      	str	r5, [r2, #4]
  402bb8:	5051      	str	r1, [r2, r1]
  402bba:	f000 fb1b 	bl	4031f4 <__malloc_unlock>
  402bbe:	e769      	b.n	402a94 <_malloc_r+0x58>
  402bc0:	2400      	movs	r4, #0
  402bc2:	230c      	movs	r3, #12
  402bc4:	4620      	mov	r0, r4
  402bc6:	6033      	str	r3, [r6, #0]
  402bc8:	b003      	add	sp, #12
  402bca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  402bce:	217e      	movs	r1, #126	; 0x7e
  402bd0:	203f      	movs	r0, #63	; 0x3f
  402bd2:	e773      	b.n	402abc <_malloc_r+0x80>
  402bd4:	4423      	add	r3, r4
  402bd6:	68e1      	ldr	r1, [r4, #12]
  402bd8:	685a      	ldr	r2, [r3, #4]
  402bda:	68a5      	ldr	r5, [r4, #8]
  402bdc:	f042 0201 	orr.w	r2, r2, #1
  402be0:	60e9      	str	r1, [r5, #12]
  402be2:	4630      	mov	r0, r6
  402be4:	608d      	str	r5, [r1, #8]
  402be6:	605a      	str	r2, [r3, #4]
  402be8:	f000 fb04 	bl	4031f4 <__malloc_unlock>
  402bec:	3408      	adds	r4, #8
  402bee:	4620      	mov	r0, r4
  402bf0:	b003      	add	sp, #12
  402bf2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  402bf6:	4423      	add	r3, r4
  402bf8:	4630      	mov	r0, r6
  402bfa:	685a      	ldr	r2, [r3, #4]
  402bfc:	f042 0201 	orr.w	r2, r2, #1
  402c00:	605a      	str	r2, [r3, #4]
  402c02:	f000 faf7 	bl	4031f4 <__malloc_unlock>
  402c06:	3408      	adds	r4, #8
  402c08:	4620      	mov	r0, r4
  402c0a:	b003      	add	sp, #12
  402c0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  402c10:	68bc      	ldr	r4, [r7, #8]
  402c12:	6863      	ldr	r3, [r4, #4]
  402c14:	f023 0803 	bic.w	r8, r3, #3
  402c18:	4545      	cmp	r5, r8
  402c1a:	d804      	bhi.n	402c26 <_malloc_r+0x1ea>
  402c1c:	ebc5 0308 	rsb	r3, r5, r8
  402c20:	2b0f      	cmp	r3, #15
  402c22:	f300 808c 	bgt.w	402d3e <_malloc_r+0x302>
  402c26:	4b53      	ldr	r3, [pc, #332]	; (402d74 <_malloc_r+0x338>)
  402c28:	f8df a158 	ldr.w	sl, [pc, #344]	; 402d84 <_malloc_r+0x348>
  402c2c:	681a      	ldr	r2, [r3, #0]
  402c2e:	f8da 3000 	ldr.w	r3, [sl]
  402c32:	3301      	adds	r3, #1
  402c34:	442a      	add	r2, r5
  402c36:	eb04 0b08 	add.w	fp, r4, r8
  402c3a:	f000 8150 	beq.w	402ede <_malloc_r+0x4a2>
  402c3e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
  402c42:	320f      	adds	r2, #15
  402c44:	f422 627f 	bic.w	r2, r2, #4080	; 0xff0
  402c48:	f022 020f 	bic.w	r2, r2, #15
  402c4c:	4611      	mov	r1, r2
  402c4e:	4630      	mov	r0, r6
  402c50:	9201      	str	r2, [sp, #4]
  402c52:	f000 fcc7 	bl	4035e4 <_sbrk_r>
  402c56:	f1b0 3fff 	cmp.w	r0, #4294967295
  402c5a:	4681      	mov	r9, r0
  402c5c:	9a01      	ldr	r2, [sp, #4]
  402c5e:	f000 8147 	beq.w	402ef0 <_malloc_r+0x4b4>
  402c62:	4583      	cmp	fp, r0
  402c64:	f200 80ee 	bhi.w	402e44 <_malloc_r+0x408>
  402c68:	4b43      	ldr	r3, [pc, #268]	; (402d78 <_malloc_r+0x33c>)
  402c6a:	6819      	ldr	r1, [r3, #0]
  402c6c:	45cb      	cmp	fp, r9
  402c6e:	4411      	add	r1, r2
  402c70:	6019      	str	r1, [r3, #0]
  402c72:	f000 8142 	beq.w	402efa <_malloc_r+0x4be>
  402c76:	f8da 0000 	ldr.w	r0, [sl]
  402c7a:	f8df e108 	ldr.w	lr, [pc, #264]	; 402d84 <_malloc_r+0x348>
  402c7e:	3001      	adds	r0, #1
  402c80:	bf1b      	ittet	ne
  402c82:	ebcb 0b09 	rsbne	fp, fp, r9
  402c86:	4459      	addne	r1, fp
  402c88:	f8ce 9000 	streq.w	r9, [lr]
  402c8c:	6019      	strne	r1, [r3, #0]
  402c8e:	f019 0107 	ands.w	r1, r9, #7
  402c92:	f000 8107 	beq.w	402ea4 <_malloc_r+0x468>
  402c96:	f1c1 0008 	rsb	r0, r1, #8
  402c9a:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
  402c9e:	4481      	add	r9, r0
  402ca0:	3108      	adds	r1, #8
  402ca2:	444a      	add	r2, r9
  402ca4:	f3c2 020b 	ubfx	r2, r2, #0, #12
  402ca8:	ebc2 0a01 	rsb	sl, r2, r1
  402cac:	4651      	mov	r1, sl
  402cae:	4630      	mov	r0, r6
  402cb0:	9301      	str	r3, [sp, #4]
  402cb2:	f000 fc97 	bl	4035e4 <_sbrk_r>
  402cb6:	1c43      	adds	r3, r0, #1
  402cb8:	9b01      	ldr	r3, [sp, #4]
  402cba:	f000 812c 	beq.w	402f16 <_malloc_r+0x4da>
  402cbe:	ebc9 0200 	rsb	r2, r9, r0
  402cc2:	4452      	add	r2, sl
  402cc4:	f042 0201 	orr.w	r2, r2, #1
  402cc8:	6819      	ldr	r1, [r3, #0]
  402cca:	f8c7 9008 	str.w	r9, [r7, #8]
  402cce:	4451      	add	r1, sl
  402cd0:	42bc      	cmp	r4, r7
  402cd2:	f8c9 2004 	str.w	r2, [r9, #4]
  402cd6:	6019      	str	r1, [r3, #0]
  402cd8:	f8df a09c 	ldr.w	sl, [pc, #156]	; 402d78 <_malloc_r+0x33c>
  402cdc:	d016      	beq.n	402d0c <_malloc_r+0x2d0>
  402cde:	f1b8 0f0f 	cmp.w	r8, #15
  402ce2:	f240 80ee 	bls.w	402ec2 <_malloc_r+0x486>
  402ce6:	6862      	ldr	r2, [r4, #4]
  402ce8:	f1a8 030c 	sub.w	r3, r8, #12
  402cec:	f023 0307 	bic.w	r3, r3, #7
  402cf0:	18e0      	adds	r0, r4, r3
  402cf2:	f002 0201 	and.w	r2, r2, #1
  402cf6:	f04f 0e05 	mov.w	lr, #5
  402cfa:	431a      	orrs	r2, r3
  402cfc:	2b0f      	cmp	r3, #15
  402cfe:	6062      	str	r2, [r4, #4]
  402d00:	f8c0 e004 	str.w	lr, [r0, #4]
  402d04:	f8c0 e008 	str.w	lr, [r0, #8]
  402d08:	f200 8109 	bhi.w	402f1e <_malloc_r+0x4e2>
  402d0c:	4b1b      	ldr	r3, [pc, #108]	; (402d7c <_malloc_r+0x340>)
  402d0e:	68bc      	ldr	r4, [r7, #8]
  402d10:	681a      	ldr	r2, [r3, #0]
  402d12:	4291      	cmp	r1, r2
  402d14:	bf88      	it	hi
  402d16:	6019      	strhi	r1, [r3, #0]
  402d18:	4b19      	ldr	r3, [pc, #100]	; (402d80 <_malloc_r+0x344>)
  402d1a:	681a      	ldr	r2, [r3, #0]
  402d1c:	4291      	cmp	r1, r2
  402d1e:	6862      	ldr	r2, [r4, #4]
  402d20:	bf88      	it	hi
  402d22:	6019      	strhi	r1, [r3, #0]
  402d24:	f022 0203 	bic.w	r2, r2, #3
  402d28:	4295      	cmp	r5, r2
  402d2a:	eba2 0305 	sub.w	r3, r2, r5
  402d2e:	d801      	bhi.n	402d34 <_malloc_r+0x2f8>
  402d30:	2b0f      	cmp	r3, #15
  402d32:	dc04      	bgt.n	402d3e <_malloc_r+0x302>
  402d34:	4630      	mov	r0, r6
  402d36:	f000 fa5d 	bl	4031f4 <__malloc_unlock>
  402d3a:	2400      	movs	r4, #0
  402d3c:	e6aa      	b.n	402a94 <_malloc_r+0x58>
  402d3e:	1962      	adds	r2, r4, r5
  402d40:	f043 0301 	orr.w	r3, r3, #1
  402d44:	f045 0501 	orr.w	r5, r5, #1
  402d48:	6065      	str	r5, [r4, #4]
  402d4a:	4630      	mov	r0, r6
  402d4c:	60ba      	str	r2, [r7, #8]
  402d4e:	6053      	str	r3, [r2, #4]
  402d50:	f000 fa50 	bl	4031f4 <__malloc_unlock>
  402d54:	3408      	adds	r4, #8
  402d56:	4620      	mov	r0, r4
  402d58:	b003      	add	sp, #12
  402d5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  402d5e:	2814      	cmp	r0, #20
  402d60:	d968      	bls.n	402e34 <_malloc_r+0x3f8>
  402d62:	2854      	cmp	r0, #84	; 0x54
  402d64:	f200 8097 	bhi.w	402e96 <_malloc_r+0x45a>
  402d68:	0b28      	lsrs	r0, r5, #12
  402d6a:	306e      	adds	r0, #110	; 0x6e
  402d6c:	0041      	lsls	r1, r0, #1
  402d6e:	e6a5      	b.n	402abc <_malloc_r+0x80>
  402d70:	20000458 	.word	0x20000458
  402d74:	20000910 	.word	0x20000910
  402d78:	20000914 	.word	0x20000914
  402d7c:	2000090c 	.word	0x2000090c
  402d80:	20000908 	.word	0x20000908
  402d84:	20000864 	.word	0x20000864
  402d88:	0a5a      	lsrs	r2, r3, #9
  402d8a:	2a04      	cmp	r2, #4
  402d8c:	d955      	bls.n	402e3a <_malloc_r+0x3fe>
  402d8e:	2a14      	cmp	r2, #20
  402d90:	f200 80a7 	bhi.w	402ee2 <_malloc_r+0x4a6>
  402d94:	325b      	adds	r2, #91	; 0x5b
  402d96:	ea4f 0c42 	mov.w	ip, r2, lsl #1
  402d9a:	eb07 0c8c 	add.w	ip, r7, ip, lsl #2
  402d9e:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 402f5c <_malloc_r+0x520>
  402da2:	f8dc 1008 	ldr.w	r1, [ip, #8]
  402da6:	4561      	cmp	r1, ip
  402da8:	d07f      	beq.n	402eaa <_malloc_r+0x46e>
  402daa:	684a      	ldr	r2, [r1, #4]
  402dac:	f022 0203 	bic.w	r2, r2, #3
  402db0:	4293      	cmp	r3, r2
  402db2:	d202      	bcs.n	402dba <_malloc_r+0x37e>
  402db4:	6889      	ldr	r1, [r1, #8]
  402db6:	458c      	cmp	ip, r1
  402db8:	d1f7      	bne.n	402daa <_malloc_r+0x36e>
  402dba:	68ca      	ldr	r2, [r1, #12]
  402dbc:	687b      	ldr	r3, [r7, #4]
  402dbe:	60e2      	str	r2, [r4, #12]
  402dc0:	60a1      	str	r1, [r4, #8]
  402dc2:	6094      	str	r4, [r2, #8]
  402dc4:	60cc      	str	r4, [r1, #12]
  402dc6:	e6bb      	b.n	402b40 <_malloc_r+0x104>
  402dc8:	1963      	adds	r3, r4, r5
  402dca:	f042 0701 	orr.w	r7, r2, #1
  402dce:	f045 0501 	orr.w	r5, r5, #1
  402dd2:	6065      	str	r5, [r4, #4]
  402dd4:	4630      	mov	r0, r6
  402dd6:	614b      	str	r3, [r1, #20]
  402dd8:	610b      	str	r3, [r1, #16]
  402dda:	f8c3 e00c 	str.w	lr, [r3, #12]
  402dde:	f8c3 e008 	str.w	lr, [r3, #8]
  402de2:	605f      	str	r7, [r3, #4]
  402de4:	509a      	str	r2, [r3, r2]
  402de6:	3408      	adds	r4, #8
  402de8:	f000 fa04 	bl	4031f4 <__malloc_unlock>
  402dec:	e652      	b.n	402a94 <_malloc_r+0x58>
  402dee:	684b      	ldr	r3, [r1, #4]
  402df0:	e6a6      	b.n	402b40 <_malloc_r+0x104>
  402df2:	f109 0901 	add.w	r9, r9, #1
  402df6:	f019 0f03 	tst.w	r9, #3
  402dfa:	f10c 0c08 	add.w	ip, ip, #8
  402dfe:	f47f aeb1 	bne.w	402b64 <_malloc_r+0x128>
  402e02:	e02c      	b.n	402e5e <_malloc_r+0x422>
  402e04:	f104 0308 	add.w	r3, r4, #8
  402e08:	6964      	ldr	r4, [r4, #20]
  402e0a:	42a3      	cmp	r3, r4
  402e0c:	bf08      	it	eq
  402e0e:	3002      	addeq	r0, #2
  402e10:	f43f ae69 	beq.w	402ae6 <_malloc_r+0xaa>
  402e14:	e62e      	b.n	402a74 <_malloc_r+0x38>
  402e16:	441a      	add	r2, r3
  402e18:	461c      	mov	r4, r3
  402e1a:	6851      	ldr	r1, [r2, #4]
  402e1c:	68db      	ldr	r3, [r3, #12]
  402e1e:	f854 5f08 	ldr.w	r5, [r4, #8]!
  402e22:	f041 0101 	orr.w	r1, r1, #1
  402e26:	6051      	str	r1, [r2, #4]
  402e28:	4630      	mov	r0, r6
  402e2a:	60eb      	str	r3, [r5, #12]
  402e2c:	609d      	str	r5, [r3, #8]
  402e2e:	f000 f9e1 	bl	4031f4 <__malloc_unlock>
  402e32:	e62f      	b.n	402a94 <_malloc_r+0x58>
  402e34:	305b      	adds	r0, #91	; 0x5b
  402e36:	0041      	lsls	r1, r0, #1
  402e38:	e640      	b.n	402abc <_malloc_r+0x80>
  402e3a:	099a      	lsrs	r2, r3, #6
  402e3c:	3238      	adds	r2, #56	; 0x38
  402e3e:	ea4f 0c42 	mov.w	ip, r2, lsl #1
  402e42:	e7aa      	b.n	402d9a <_malloc_r+0x35e>
  402e44:	42bc      	cmp	r4, r7
  402e46:	4b45      	ldr	r3, [pc, #276]	; (402f5c <_malloc_r+0x520>)
  402e48:	f43f af0e 	beq.w	402c68 <_malloc_r+0x22c>
  402e4c:	689c      	ldr	r4, [r3, #8]
  402e4e:	6862      	ldr	r2, [r4, #4]
  402e50:	f022 0203 	bic.w	r2, r2, #3
  402e54:	e768      	b.n	402d28 <_malloc_r+0x2ec>
  402e56:	f8d8 8000 	ldr.w	r8, [r8]
  402e5a:	4598      	cmp	r8, r3
  402e5c:	d17c      	bne.n	402f58 <_malloc_r+0x51c>
  402e5e:	f010 0f03 	tst.w	r0, #3
  402e62:	f1a8 0308 	sub.w	r3, r8, #8
  402e66:	f100 30ff 	add.w	r0, r0, #4294967295
  402e6a:	d1f4      	bne.n	402e56 <_malloc_r+0x41a>
  402e6c:	687b      	ldr	r3, [r7, #4]
  402e6e:	ea23 0304 	bic.w	r3, r3, r4
  402e72:	607b      	str	r3, [r7, #4]
  402e74:	0064      	lsls	r4, r4, #1
  402e76:	429c      	cmp	r4, r3
  402e78:	f63f aeca 	bhi.w	402c10 <_malloc_r+0x1d4>
  402e7c:	2c00      	cmp	r4, #0
  402e7e:	f43f aec7 	beq.w	402c10 <_malloc_r+0x1d4>
  402e82:	4223      	tst	r3, r4
  402e84:	4648      	mov	r0, r9
  402e86:	f47f ae69 	bne.w	402b5c <_malloc_r+0x120>
  402e8a:	0064      	lsls	r4, r4, #1
  402e8c:	4223      	tst	r3, r4
  402e8e:	f100 0004 	add.w	r0, r0, #4
  402e92:	d0fa      	beq.n	402e8a <_malloc_r+0x44e>
  402e94:	e662      	b.n	402b5c <_malloc_r+0x120>
  402e96:	f5b0 7faa 	cmp.w	r0, #340	; 0x154
  402e9a:	d818      	bhi.n	402ece <_malloc_r+0x492>
  402e9c:	0be8      	lsrs	r0, r5, #15
  402e9e:	3077      	adds	r0, #119	; 0x77
  402ea0:	0041      	lsls	r1, r0, #1
  402ea2:	e60b      	b.n	402abc <_malloc_r+0x80>
  402ea4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  402ea8:	e6fb      	b.n	402ca2 <_malloc_r+0x266>
  402eaa:	f8d8 3004 	ldr.w	r3, [r8, #4]
  402eae:	1092      	asrs	r2, r2, #2
  402eb0:	f04f 0c01 	mov.w	ip, #1
  402eb4:	fa0c f202 	lsl.w	r2, ip, r2
  402eb8:	4313      	orrs	r3, r2
  402eba:	f8c8 3004 	str.w	r3, [r8, #4]
  402ebe:	460a      	mov	r2, r1
  402ec0:	e77d      	b.n	402dbe <_malloc_r+0x382>
  402ec2:	2301      	movs	r3, #1
  402ec4:	f8c9 3004 	str.w	r3, [r9, #4]
  402ec8:	464c      	mov	r4, r9
  402eca:	2200      	movs	r2, #0
  402ecc:	e72c      	b.n	402d28 <_malloc_r+0x2ec>
  402ece:	f240 5354 	movw	r3, #1364	; 0x554
  402ed2:	4298      	cmp	r0, r3
  402ed4:	d81c      	bhi.n	402f10 <_malloc_r+0x4d4>
  402ed6:	0ca8      	lsrs	r0, r5, #18
  402ed8:	307c      	adds	r0, #124	; 0x7c
  402eda:	0041      	lsls	r1, r0, #1
  402edc:	e5ee      	b.n	402abc <_malloc_r+0x80>
  402ede:	3210      	adds	r2, #16
  402ee0:	e6b4      	b.n	402c4c <_malloc_r+0x210>
  402ee2:	2a54      	cmp	r2, #84	; 0x54
  402ee4:	d823      	bhi.n	402f2e <_malloc_r+0x4f2>
  402ee6:	0b1a      	lsrs	r2, r3, #12
  402ee8:	326e      	adds	r2, #110	; 0x6e
  402eea:	ea4f 0c42 	mov.w	ip, r2, lsl #1
  402eee:	e754      	b.n	402d9a <_malloc_r+0x35e>
  402ef0:	68bc      	ldr	r4, [r7, #8]
  402ef2:	6862      	ldr	r2, [r4, #4]
  402ef4:	f022 0203 	bic.w	r2, r2, #3
  402ef8:	e716      	b.n	402d28 <_malloc_r+0x2ec>
  402efa:	f3cb 000b 	ubfx	r0, fp, #0, #12
  402efe:	2800      	cmp	r0, #0
  402f00:	f47f aeb9 	bne.w	402c76 <_malloc_r+0x23a>
  402f04:	4442      	add	r2, r8
  402f06:	68bb      	ldr	r3, [r7, #8]
  402f08:	f042 0201 	orr.w	r2, r2, #1
  402f0c:	605a      	str	r2, [r3, #4]
  402f0e:	e6fd      	b.n	402d0c <_malloc_r+0x2d0>
  402f10:	21fc      	movs	r1, #252	; 0xfc
  402f12:	207e      	movs	r0, #126	; 0x7e
  402f14:	e5d2      	b.n	402abc <_malloc_r+0x80>
  402f16:	2201      	movs	r2, #1
  402f18:	f04f 0a00 	mov.w	sl, #0
  402f1c:	e6d4      	b.n	402cc8 <_malloc_r+0x28c>
  402f1e:	f104 0108 	add.w	r1, r4, #8
  402f22:	4630      	mov	r0, r6
  402f24:	f7ff fa7a 	bl	40241c <_free_r>
  402f28:	f8da 1000 	ldr.w	r1, [sl]
  402f2c:	e6ee      	b.n	402d0c <_malloc_r+0x2d0>
  402f2e:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  402f32:	d804      	bhi.n	402f3e <_malloc_r+0x502>
  402f34:	0bda      	lsrs	r2, r3, #15
  402f36:	3277      	adds	r2, #119	; 0x77
  402f38:	ea4f 0c42 	mov.w	ip, r2, lsl #1
  402f3c:	e72d      	b.n	402d9a <_malloc_r+0x35e>
  402f3e:	f240 5154 	movw	r1, #1364	; 0x554
  402f42:	428a      	cmp	r2, r1
  402f44:	d804      	bhi.n	402f50 <_malloc_r+0x514>
  402f46:	0c9a      	lsrs	r2, r3, #18
  402f48:	327c      	adds	r2, #124	; 0x7c
  402f4a:	ea4f 0c42 	mov.w	ip, r2, lsl #1
  402f4e:	e724      	b.n	402d9a <_malloc_r+0x35e>
  402f50:	f04f 0cfc 	mov.w	ip, #252	; 0xfc
  402f54:	227e      	movs	r2, #126	; 0x7e
  402f56:	e720      	b.n	402d9a <_malloc_r+0x35e>
  402f58:	687b      	ldr	r3, [r7, #4]
  402f5a:	e78b      	b.n	402e74 <_malloc_r+0x438>
  402f5c:	20000458 	.word	0x20000458

00402f60 <memchr>:
  402f60:	0783      	lsls	r3, r0, #30
  402f62:	b470      	push	{r4, r5, r6}
  402f64:	b2c9      	uxtb	r1, r1
  402f66:	d040      	beq.n	402fea <memchr+0x8a>
  402f68:	1e54      	subs	r4, r2, #1
  402f6a:	2a00      	cmp	r2, #0
  402f6c:	d03f      	beq.n	402fee <memchr+0x8e>
  402f6e:	7803      	ldrb	r3, [r0, #0]
  402f70:	428b      	cmp	r3, r1
  402f72:	bf18      	it	ne
  402f74:	1c43      	addne	r3, r0, #1
  402f76:	d106      	bne.n	402f86 <memchr+0x26>
  402f78:	e01d      	b.n	402fb6 <memchr+0x56>
  402f7a:	b1f4      	cbz	r4, 402fba <memchr+0x5a>
  402f7c:	7802      	ldrb	r2, [r0, #0]
  402f7e:	428a      	cmp	r2, r1
  402f80:	f104 34ff 	add.w	r4, r4, #4294967295
  402f84:	d017      	beq.n	402fb6 <memchr+0x56>
  402f86:	f013 0f03 	tst.w	r3, #3
  402f8a:	4618      	mov	r0, r3
  402f8c:	f103 0301 	add.w	r3, r3, #1
  402f90:	d1f3      	bne.n	402f7a <memchr+0x1a>
  402f92:	2c03      	cmp	r4, #3
  402f94:	d814      	bhi.n	402fc0 <memchr+0x60>
  402f96:	b184      	cbz	r4, 402fba <memchr+0x5a>
  402f98:	7803      	ldrb	r3, [r0, #0]
  402f9a:	428b      	cmp	r3, r1
  402f9c:	d00b      	beq.n	402fb6 <memchr+0x56>
  402f9e:	1905      	adds	r5, r0, r4
  402fa0:	1c43      	adds	r3, r0, #1
  402fa2:	e002      	b.n	402faa <memchr+0x4a>
  402fa4:	7802      	ldrb	r2, [r0, #0]
  402fa6:	428a      	cmp	r2, r1
  402fa8:	d005      	beq.n	402fb6 <memchr+0x56>
  402faa:	42ab      	cmp	r3, r5
  402fac:	4618      	mov	r0, r3
  402fae:	f103 0301 	add.w	r3, r3, #1
  402fb2:	d1f7      	bne.n	402fa4 <memchr+0x44>
  402fb4:	2000      	movs	r0, #0
  402fb6:	bc70      	pop	{r4, r5, r6}
  402fb8:	4770      	bx	lr
  402fba:	4620      	mov	r0, r4
  402fbc:	bc70      	pop	{r4, r5, r6}
  402fbe:	4770      	bx	lr
  402fc0:	ea41 2601 	orr.w	r6, r1, r1, lsl #8
  402fc4:	4602      	mov	r2, r0
  402fc6:	ea46 4606 	orr.w	r6, r6, r6, lsl #16
  402fca:	4610      	mov	r0, r2
  402fcc:	3204      	adds	r2, #4
  402fce:	6803      	ldr	r3, [r0, #0]
  402fd0:	4073      	eors	r3, r6
  402fd2:	f1a3 3501 	sub.w	r5, r3, #16843009	; 0x1010101
  402fd6:	ea25 0303 	bic.w	r3, r5, r3
  402fda:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
  402fde:	d1da      	bne.n	402f96 <memchr+0x36>
  402fe0:	3c04      	subs	r4, #4
  402fe2:	2c03      	cmp	r4, #3
  402fe4:	4610      	mov	r0, r2
  402fe6:	d8f0      	bhi.n	402fca <memchr+0x6a>
  402fe8:	e7d5      	b.n	402f96 <memchr+0x36>
  402fea:	4614      	mov	r4, r2
  402fec:	e7d1      	b.n	402f92 <memchr+0x32>
  402fee:	4610      	mov	r0, r2
  402ff0:	e7e1      	b.n	402fb6 <memchr+0x56>
  402ff2:	bf00      	nop

00402ff4 <memcpy>:
  402ff4:	4684      	mov	ip, r0
  402ff6:	ea41 0300 	orr.w	r3, r1, r0
  402ffa:	f013 0303 	ands.w	r3, r3, #3
  402ffe:	d16d      	bne.n	4030dc <memcpy+0xe8>
  403000:	3a40      	subs	r2, #64	; 0x40
  403002:	d341      	bcc.n	403088 <memcpy+0x94>
  403004:	f851 3b04 	ldr.w	r3, [r1], #4
  403008:	f840 3b04 	str.w	r3, [r0], #4
  40300c:	f851 3b04 	ldr.w	r3, [r1], #4
  403010:	f840 3b04 	str.w	r3, [r0], #4
  403014:	f851 3b04 	ldr.w	r3, [r1], #4
  403018:	f840 3b04 	str.w	r3, [r0], #4
  40301c:	f851 3b04 	ldr.w	r3, [r1], #4
  403020:	f840 3b04 	str.w	r3, [r0], #4
  403024:	f851 3b04 	ldr.w	r3, [r1], #4
  403028:	f840 3b04 	str.w	r3, [r0], #4
  40302c:	f851 3b04 	ldr.w	r3, [r1], #4
  403030:	f840 3b04 	str.w	r3, [r0], #4
  403034:	f851 3b04 	ldr.w	r3, [r1], #4
  403038:	f840 3b04 	str.w	r3, [r0], #4
  40303c:	f851 3b04 	ldr.w	r3, [r1], #4
  403040:	f840 3b04 	str.w	r3, [r0], #4
  403044:	f851 3b04 	ldr.w	r3, [r1], #4
  403048:	f840 3b04 	str.w	r3, [r0], #4
  40304c:	f851 3b04 	ldr.w	r3, [r1], #4
  403050:	f840 3b04 	str.w	r3, [r0], #4
  403054:	f851 3b04 	ldr.w	r3, [r1], #4
  403058:	f840 3b04 	str.w	r3, [r0], #4
  40305c:	f851 3b04 	ldr.w	r3, [r1], #4
  403060:	f840 3b04 	str.w	r3, [r0], #4
  403064:	f851 3b04 	ldr.w	r3, [r1], #4
  403068:	f840 3b04 	str.w	r3, [r0], #4
  40306c:	f851 3b04 	ldr.w	r3, [r1], #4
  403070:	f840 3b04 	str.w	r3, [r0], #4
  403074:	f851 3b04 	ldr.w	r3, [r1], #4
  403078:	f840 3b04 	str.w	r3, [r0], #4
  40307c:	f851 3b04 	ldr.w	r3, [r1], #4
  403080:	f840 3b04 	str.w	r3, [r0], #4
  403084:	3a40      	subs	r2, #64	; 0x40
  403086:	d2bd      	bcs.n	403004 <memcpy+0x10>
  403088:	3230      	adds	r2, #48	; 0x30
  40308a:	d311      	bcc.n	4030b0 <memcpy+0xbc>
  40308c:	f851 3b04 	ldr.w	r3, [r1], #4
  403090:	f840 3b04 	str.w	r3, [r0], #4
  403094:	f851 3b04 	ldr.w	r3, [r1], #4
  403098:	f840 3b04 	str.w	r3, [r0], #4
  40309c:	f851 3b04 	ldr.w	r3, [r1], #4
  4030a0:	f840 3b04 	str.w	r3, [r0], #4
  4030a4:	f851 3b04 	ldr.w	r3, [r1], #4
  4030a8:	f840 3b04 	str.w	r3, [r0], #4
  4030ac:	3a10      	subs	r2, #16
  4030ae:	d2ed      	bcs.n	40308c <memcpy+0x98>
  4030b0:	320c      	adds	r2, #12
  4030b2:	d305      	bcc.n	4030c0 <memcpy+0xcc>
  4030b4:	f851 3b04 	ldr.w	r3, [r1], #4
  4030b8:	f840 3b04 	str.w	r3, [r0], #4
  4030bc:	3a04      	subs	r2, #4
  4030be:	d2f9      	bcs.n	4030b4 <memcpy+0xc0>
  4030c0:	3204      	adds	r2, #4
  4030c2:	d008      	beq.n	4030d6 <memcpy+0xe2>
  4030c4:	07d2      	lsls	r2, r2, #31
  4030c6:	bf1c      	itt	ne
  4030c8:	f811 3b01 	ldrbne.w	r3, [r1], #1
  4030cc:	f800 3b01 	strbne.w	r3, [r0], #1
  4030d0:	d301      	bcc.n	4030d6 <memcpy+0xe2>
  4030d2:	880b      	ldrh	r3, [r1, #0]
  4030d4:	8003      	strh	r3, [r0, #0]
  4030d6:	4660      	mov	r0, ip
  4030d8:	4770      	bx	lr
  4030da:	bf00      	nop
  4030dc:	2a08      	cmp	r2, #8
  4030de:	d313      	bcc.n	403108 <memcpy+0x114>
  4030e0:	078b      	lsls	r3, r1, #30
  4030e2:	d08d      	beq.n	403000 <memcpy+0xc>
  4030e4:	f010 0303 	ands.w	r3, r0, #3
  4030e8:	d08a      	beq.n	403000 <memcpy+0xc>
  4030ea:	f1c3 0304 	rsb	r3, r3, #4
  4030ee:	1ad2      	subs	r2, r2, r3
  4030f0:	07db      	lsls	r3, r3, #31
  4030f2:	bf1c      	itt	ne
  4030f4:	f811 3b01 	ldrbne.w	r3, [r1], #1
  4030f8:	f800 3b01 	strbne.w	r3, [r0], #1
  4030fc:	d380      	bcc.n	403000 <memcpy+0xc>
  4030fe:	f831 3b02 	ldrh.w	r3, [r1], #2
  403102:	f820 3b02 	strh.w	r3, [r0], #2
  403106:	e77b      	b.n	403000 <memcpy+0xc>
  403108:	3a04      	subs	r2, #4
  40310a:	d3d9      	bcc.n	4030c0 <memcpy+0xcc>
  40310c:	3a01      	subs	r2, #1
  40310e:	f811 3b01 	ldrb.w	r3, [r1], #1
  403112:	f800 3b01 	strb.w	r3, [r0], #1
  403116:	d2f9      	bcs.n	40310c <memcpy+0x118>
  403118:	780b      	ldrb	r3, [r1, #0]
  40311a:	7003      	strb	r3, [r0, #0]
  40311c:	784b      	ldrb	r3, [r1, #1]
  40311e:	7043      	strb	r3, [r0, #1]
  403120:	788b      	ldrb	r3, [r1, #2]
  403122:	7083      	strb	r3, [r0, #2]
  403124:	4660      	mov	r0, ip
  403126:	4770      	bx	lr

00403128 <memmove>:
  403128:	4288      	cmp	r0, r1
  40312a:	b5f0      	push	{r4, r5, r6, r7, lr}
  40312c:	d90d      	bls.n	40314a <memmove+0x22>
  40312e:	188b      	adds	r3, r1, r2
  403130:	4298      	cmp	r0, r3
  403132:	d20a      	bcs.n	40314a <memmove+0x22>
  403134:	1881      	adds	r1, r0, r2
  403136:	2a00      	cmp	r2, #0
  403138:	d054      	beq.n	4031e4 <memmove+0xbc>
  40313a:	1a9a      	subs	r2, r3, r2
  40313c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
  403140:	f801 4d01 	strb.w	r4, [r1, #-1]!
  403144:	4293      	cmp	r3, r2
  403146:	d1f9      	bne.n	40313c <memmove+0x14>
  403148:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40314a:	2a0f      	cmp	r2, #15
  40314c:	d948      	bls.n	4031e0 <memmove+0xb8>
  40314e:	ea40 0301 	orr.w	r3, r0, r1
  403152:	079b      	lsls	r3, r3, #30
  403154:	d147      	bne.n	4031e6 <memmove+0xbe>
  403156:	f100 0410 	add.w	r4, r0, #16
  40315a:	f101 0310 	add.w	r3, r1, #16
  40315e:	4615      	mov	r5, r2
  403160:	f853 6c10 	ldr.w	r6, [r3, #-16]
  403164:	f844 6c10 	str.w	r6, [r4, #-16]
  403168:	f853 6c0c 	ldr.w	r6, [r3, #-12]
  40316c:	f844 6c0c 	str.w	r6, [r4, #-12]
  403170:	f853 6c08 	ldr.w	r6, [r3, #-8]
  403174:	f844 6c08 	str.w	r6, [r4, #-8]
  403178:	3d10      	subs	r5, #16
  40317a:	f853 6c04 	ldr.w	r6, [r3, #-4]
  40317e:	f844 6c04 	str.w	r6, [r4, #-4]
  403182:	2d0f      	cmp	r5, #15
  403184:	f103 0310 	add.w	r3, r3, #16
  403188:	f104 0410 	add.w	r4, r4, #16
  40318c:	d8e8      	bhi.n	403160 <memmove+0x38>
  40318e:	f1a2 0310 	sub.w	r3, r2, #16
  403192:	f023 030f 	bic.w	r3, r3, #15
  403196:	f002 0e0f 	and.w	lr, r2, #15
  40319a:	3310      	adds	r3, #16
  40319c:	f1be 0f03 	cmp.w	lr, #3
  4031a0:	4419      	add	r1, r3
  4031a2:	4403      	add	r3, r0
  4031a4:	d921      	bls.n	4031ea <memmove+0xc2>
  4031a6:	1f1e      	subs	r6, r3, #4
  4031a8:	460d      	mov	r5, r1
  4031aa:	4674      	mov	r4, lr
  4031ac:	3c04      	subs	r4, #4
  4031ae:	f855 7b04 	ldr.w	r7, [r5], #4
  4031b2:	f846 7f04 	str.w	r7, [r6, #4]!
  4031b6:	2c03      	cmp	r4, #3
  4031b8:	d8f8      	bhi.n	4031ac <memmove+0x84>
  4031ba:	f1ae 0404 	sub.w	r4, lr, #4
  4031be:	f024 0403 	bic.w	r4, r4, #3
  4031c2:	3404      	adds	r4, #4
  4031c4:	4423      	add	r3, r4
  4031c6:	4421      	add	r1, r4
  4031c8:	f002 0203 	and.w	r2, r2, #3
  4031cc:	b152      	cbz	r2, 4031e4 <memmove+0xbc>
  4031ce:	3b01      	subs	r3, #1
  4031d0:	440a      	add	r2, r1
  4031d2:	f811 4b01 	ldrb.w	r4, [r1], #1
  4031d6:	f803 4f01 	strb.w	r4, [r3, #1]!
  4031da:	4291      	cmp	r1, r2
  4031dc:	d1f9      	bne.n	4031d2 <memmove+0xaa>
  4031de:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4031e0:	4603      	mov	r3, r0
  4031e2:	e7f3      	b.n	4031cc <memmove+0xa4>
  4031e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4031e6:	4603      	mov	r3, r0
  4031e8:	e7f1      	b.n	4031ce <memmove+0xa6>
  4031ea:	4672      	mov	r2, lr
  4031ec:	e7ee      	b.n	4031cc <memmove+0xa4>
  4031ee:	bf00      	nop

004031f0 <__malloc_lock>:
  4031f0:	4770      	bx	lr
  4031f2:	bf00      	nop

004031f4 <__malloc_unlock>:
  4031f4:	4770      	bx	lr
  4031f6:	bf00      	nop

004031f8 <_realloc_r>:
  4031f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4031fc:	4617      	mov	r7, r2
  4031fe:	b083      	sub	sp, #12
  403200:	460e      	mov	r6, r1
  403202:	2900      	cmp	r1, #0
  403204:	f000 80e7 	beq.w	4033d6 <_realloc_r+0x1de>
  403208:	4681      	mov	r9, r0
  40320a:	f107 050b 	add.w	r5, r7, #11
  40320e:	f7ff ffef 	bl	4031f0 <__malloc_lock>
  403212:	f856 3c04 	ldr.w	r3, [r6, #-4]
  403216:	2d16      	cmp	r5, #22
  403218:	f023 0403 	bic.w	r4, r3, #3
  40321c:	f1a6 0808 	sub.w	r8, r6, #8
  403220:	d84c      	bhi.n	4032bc <_realloc_r+0xc4>
  403222:	2210      	movs	r2, #16
  403224:	4615      	mov	r5, r2
  403226:	42af      	cmp	r7, r5
  403228:	d84d      	bhi.n	4032c6 <_realloc_r+0xce>
  40322a:	4294      	cmp	r4, r2
  40322c:	f280 8084 	bge.w	403338 <_realloc_r+0x140>
  403230:	f8df b3ac 	ldr.w	fp, [pc, #940]	; 4035e0 <_realloc_r+0x3e8>
  403234:	f8db 0008 	ldr.w	r0, [fp, #8]
  403238:	eb08 0104 	add.w	r1, r8, r4
  40323c:	4288      	cmp	r0, r1
  40323e:	f000 80d6 	beq.w	4033ee <_realloc_r+0x1f6>
  403242:	6848      	ldr	r0, [r1, #4]
  403244:	f020 0e01 	bic.w	lr, r0, #1
  403248:	448e      	add	lr, r1
  40324a:	f8de e004 	ldr.w	lr, [lr, #4]
  40324e:	f01e 0f01 	tst.w	lr, #1
  403252:	d13f      	bne.n	4032d4 <_realloc_r+0xdc>
  403254:	f020 0003 	bic.w	r0, r0, #3
  403258:	4420      	add	r0, r4
  40325a:	4290      	cmp	r0, r2
  40325c:	f280 80c1 	bge.w	4033e2 <_realloc_r+0x1ea>
  403260:	07db      	lsls	r3, r3, #31
  403262:	f100 808f 	bmi.w	403384 <_realloc_r+0x18c>
  403266:	f856 3c08 	ldr.w	r3, [r6, #-8]
  40326a:	ebc3 0a08 	rsb	sl, r3, r8
  40326e:	f8da 3004 	ldr.w	r3, [sl, #4]
  403272:	f023 0303 	bic.w	r3, r3, #3
  403276:	eb00 0e03 	add.w	lr, r0, r3
  40327a:	4596      	cmp	lr, r2
  40327c:	db34      	blt.n	4032e8 <_realloc_r+0xf0>
  40327e:	68cb      	ldr	r3, [r1, #12]
  403280:	688a      	ldr	r2, [r1, #8]
  403282:	4657      	mov	r7, sl
  403284:	60d3      	str	r3, [r2, #12]
  403286:	609a      	str	r2, [r3, #8]
  403288:	f857 1f08 	ldr.w	r1, [r7, #8]!
  40328c:	f8da 300c 	ldr.w	r3, [sl, #12]
  403290:	60cb      	str	r3, [r1, #12]
  403292:	1f22      	subs	r2, r4, #4
  403294:	2a24      	cmp	r2, #36	; 0x24
  403296:	6099      	str	r1, [r3, #8]
  403298:	f200 8136 	bhi.w	403508 <_realloc_r+0x310>
  40329c:	2a13      	cmp	r2, #19
  40329e:	f240 80fd 	bls.w	40349c <_realloc_r+0x2a4>
  4032a2:	6833      	ldr	r3, [r6, #0]
  4032a4:	f8ca 3008 	str.w	r3, [sl, #8]
  4032a8:	6873      	ldr	r3, [r6, #4]
  4032aa:	f8ca 300c 	str.w	r3, [sl, #12]
  4032ae:	2a1b      	cmp	r2, #27
  4032b0:	f200 8140 	bhi.w	403534 <_realloc_r+0x33c>
  4032b4:	3608      	adds	r6, #8
  4032b6:	f10a 0310 	add.w	r3, sl, #16
  4032ba:	e0f0      	b.n	40349e <_realloc_r+0x2a6>
  4032bc:	f025 0507 	bic.w	r5, r5, #7
  4032c0:	2d00      	cmp	r5, #0
  4032c2:	462a      	mov	r2, r5
  4032c4:	daaf      	bge.n	403226 <_realloc_r+0x2e>
  4032c6:	230c      	movs	r3, #12
  4032c8:	2000      	movs	r0, #0
  4032ca:	f8c9 3000 	str.w	r3, [r9]
  4032ce:	b003      	add	sp, #12
  4032d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4032d4:	07d9      	lsls	r1, r3, #31
  4032d6:	d455      	bmi.n	403384 <_realloc_r+0x18c>
  4032d8:	f856 3c08 	ldr.w	r3, [r6, #-8]
  4032dc:	ebc3 0a08 	rsb	sl, r3, r8
  4032e0:	f8da 3004 	ldr.w	r3, [sl, #4]
  4032e4:	f023 0303 	bic.w	r3, r3, #3
  4032e8:	4423      	add	r3, r4
  4032ea:	4293      	cmp	r3, r2
  4032ec:	db4a      	blt.n	403384 <_realloc_r+0x18c>
  4032ee:	4657      	mov	r7, sl
  4032f0:	f8da 100c 	ldr.w	r1, [sl, #12]
  4032f4:	f857 0f08 	ldr.w	r0, [r7, #8]!
  4032f8:	1f22      	subs	r2, r4, #4
  4032fa:	2a24      	cmp	r2, #36	; 0x24
  4032fc:	60c1      	str	r1, [r0, #12]
  4032fe:	6088      	str	r0, [r1, #8]
  403300:	f200 810e 	bhi.w	403520 <_realloc_r+0x328>
  403304:	2a13      	cmp	r2, #19
  403306:	f240 8109 	bls.w	40351c <_realloc_r+0x324>
  40330a:	6831      	ldr	r1, [r6, #0]
  40330c:	f8ca 1008 	str.w	r1, [sl, #8]
  403310:	6871      	ldr	r1, [r6, #4]
  403312:	f8ca 100c 	str.w	r1, [sl, #12]
  403316:	2a1b      	cmp	r2, #27
  403318:	f200 8121 	bhi.w	40355e <_realloc_r+0x366>
  40331c:	3608      	adds	r6, #8
  40331e:	f10a 0210 	add.w	r2, sl, #16
  403322:	6831      	ldr	r1, [r6, #0]
  403324:	6011      	str	r1, [r2, #0]
  403326:	6871      	ldr	r1, [r6, #4]
  403328:	6051      	str	r1, [r2, #4]
  40332a:	68b1      	ldr	r1, [r6, #8]
  40332c:	6091      	str	r1, [r2, #8]
  40332e:	461c      	mov	r4, r3
  403330:	f8da 3004 	ldr.w	r3, [sl, #4]
  403334:	463e      	mov	r6, r7
  403336:	46d0      	mov	r8, sl
  403338:	1b62      	subs	r2, r4, r5
  40333a:	2a0f      	cmp	r2, #15
  40333c:	f003 0301 	and.w	r3, r3, #1
  403340:	d80e      	bhi.n	403360 <_realloc_r+0x168>
  403342:	4323      	orrs	r3, r4
  403344:	4444      	add	r4, r8
  403346:	f8c8 3004 	str.w	r3, [r8, #4]
  40334a:	6863      	ldr	r3, [r4, #4]
  40334c:	f043 0301 	orr.w	r3, r3, #1
  403350:	6063      	str	r3, [r4, #4]
  403352:	4648      	mov	r0, r9
  403354:	f7ff ff4e 	bl	4031f4 <__malloc_unlock>
  403358:	4630      	mov	r0, r6
  40335a:	b003      	add	sp, #12
  40335c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403360:	eb08 0105 	add.w	r1, r8, r5
  403364:	431d      	orrs	r5, r3
  403366:	f042 0301 	orr.w	r3, r2, #1
  40336a:	440a      	add	r2, r1
  40336c:	f8c8 5004 	str.w	r5, [r8, #4]
  403370:	604b      	str	r3, [r1, #4]
  403372:	6853      	ldr	r3, [r2, #4]
  403374:	f043 0301 	orr.w	r3, r3, #1
  403378:	3108      	adds	r1, #8
  40337a:	6053      	str	r3, [r2, #4]
  40337c:	4648      	mov	r0, r9
  40337e:	f7ff f84d 	bl	40241c <_free_r>
  403382:	e7e6      	b.n	403352 <_realloc_r+0x15a>
  403384:	4639      	mov	r1, r7
  403386:	4648      	mov	r0, r9
  403388:	f7ff fb58 	bl	402a3c <_malloc_r>
  40338c:	4607      	mov	r7, r0
  40338e:	b1d8      	cbz	r0, 4033c8 <_realloc_r+0x1d0>
  403390:	f856 3c04 	ldr.w	r3, [r6, #-4]
  403394:	f023 0201 	bic.w	r2, r3, #1
  403398:	4442      	add	r2, r8
  40339a:	f1a0 0108 	sub.w	r1, r0, #8
  40339e:	4291      	cmp	r1, r2
  4033a0:	f000 80ac 	beq.w	4034fc <_realloc_r+0x304>
  4033a4:	1f22      	subs	r2, r4, #4
  4033a6:	2a24      	cmp	r2, #36	; 0x24
  4033a8:	f200 8099 	bhi.w	4034de <_realloc_r+0x2e6>
  4033ac:	2a13      	cmp	r2, #19
  4033ae:	d86a      	bhi.n	403486 <_realloc_r+0x28e>
  4033b0:	4603      	mov	r3, r0
  4033b2:	4632      	mov	r2, r6
  4033b4:	6811      	ldr	r1, [r2, #0]
  4033b6:	6019      	str	r1, [r3, #0]
  4033b8:	6851      	ldr	r1, [r2, #4]
  4033ba:	6059      	str	r1, [r3, #4]
  4033bc:	6892      	ldr	r2, [r2, #8]
  4033be:	609a      	str	r2, [r3, #8]
  4033c0:	4631      	mov	r1, r6
  4033c2:	4648      	mov	r0, r9
  4033c4:	f7ff f82a 	bl	40241c <_free_r>
  4033c8:	4648      	mov	r0, r9
  4033ca:	f7ff ff13 	bl	4031f4 <__malloc_unlock>
  4033ce:	4638      	mov	r0, r7
  4033d0:	b003      	add	sp, #12
  4033d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4033d6:	4611      	mov	r1, r2
  4033d8:	b003      	add	sp, #12
  4033da:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4033de:	f7ff bb2d 	b.w	402a3c <_malloc_r>
  4033e2:	68ca      	ldr	r2, [r1, #12]
  4033e4:	6889      	ldr	r1, [r1, #8]
  4033e6:	4604      	mov	r4, r0
  4033e8:	60ca      	str	r2, [r1, #12]
  4033ea:	6091      	str	r1, [r2, #8]
  4033ec:	e7a4      	b.n	403338 <_realloc_r+0x140>
  4033ee:	6841      	ldr	r1, [r0, #4]
  4033f0:	f021 0103 	bic.w	r1, r1, #3
  4033f4:	4421      	add	r1, r4
  4033f6:	f105 0010 	add.w	r0, r5, #16
  4033fa:	4281      	cmp	r1, r0
  4033fc:	da5b      	bge.n	4034b6 <_realloc_r+0x2be>
  4033fe:	07db      	lsls	r3, r3, #31
  403400:	d4c0      	bmi.n	403384 <_realloc_r+0x18c>
  403402:	f856 3c08 	ldr.w	r3, [r6, #-8]
  403406:	ebc3 0a08 	rsb	sl, r3, r8
  40340a:	f8da 3004 	ldr.w	r3, [sl, #4]
  40340e:	f023 0303 	bic.w	r3, r3, #3
  403412:	eb01 0c03 	add.w	ip, r1, r3
  403416:	4560      	cmp	r0, ip
  403418:	f73f af66 	bgt.w	4032e8 <_realloc_r+0xf0>
  40341c:	4657      	mov	r7, sl
  40341e:	f8da 300c 	ldr.w	r3, [sl, #12]
  403422:	f857 1f08 	ldr.w	r1, [r7, #8]!
  403426:	1f22      	subs	r2, r4, #4
  403428:	2a24      	cmp	r2, #36	; 0x24
  40342a:	60cb      	str	r3, [r1, #12]
  40342c:	6099      	str	r1, [r3, #8]
  40342e:	f200 80b8 	bhi.w	4035a2 <_realloc_r+0x3aa>
  403432:	2a13      	cmp	r2, #19
  403434:	f240 80a9 	bls.w	40358a <_realloc_r+0x392>
  403438:	6833      	ldr	r3, [r6, #0]
  40343a:	f8ca 3008 	str.w	r3, [sl, #8]
  40343e:	6873      	ldr	r3, [r6, #4]
  403440:	f8ca 300c 	str.w	r3, [sl, #12]
  403444:	2a1b      	cmp	r2, #27
  403446:	f200 80b5 	bhi.w	4035b4 <_realloc_r+0x3bc>
  40344a:	3608      	adds	r6, #8
  40344c:	f10a 0310 	add.w	r3, sl, #16
  403450:	6832      	ldr	r2, [r6, #0]
  403452:	601a      	str	r2, [r3, #0]
  403454:	6872      	ldr	r2, [r6, #4]
  403456:	605a      	str	r2, [r3, #4]
  403458:	68b2      	ldr	r2, [r6, #8]
  40345a:	609a      	str	r2, [r3, #8]
  40345c:	eb0a 0205 	add.w	r2, sl, r5
  403460:	ebc5 030c 	rsb	r3, r5, ip
  403464:	f043 0301 	orr.w	r3, r3, #1
  403468:	f8cb 2008 	str.w	r2, [fp, #8]
  40346c:	6053      	str	r3, [r2, #4]
  40346e:	f8da 3004 	ldr.w	r3, [sl, #4]
  403472:	f003 0301 	and.w	r3, r3, #1
  403476:	431d      	orrs	r5, r3
  403478:	4648      	mov	r0, r9
  40347a:	f8ca 5004 	str.w	r5, [sl, #4]
  40347e:	f7ff feb9 	bl	4031f4 <__malloc_unlock>
  403482:	4638      	mov	r0, r7
  403484:	e769      	b.n	40335a <_realloc_r+0x162>
  403486:	6833      	ldr	r3, [r6, #0]
  403488:	6003      	str	r3, [r0, #0]
  40348a:	6873      	ldr	r3, [r6, #4]
  40348c:	6043      	str	r3, [r0, #4]
  40348e:	2a1b      	cmp	r2, #27
  403490:	d829      	bhi.n	4034e6 <_realloc_r+0x2ee>
  403492:	f100 0308 	add.w	r3, r0, #8
  403496:	f106 0208 	add.w	r2, r6, #8
  40349a:	e78b      	b.n	4033b4 <_realloc_r+0x1bc>
  40349c:	463b      	mov	r3, r7
  40349e:	6832      	ldr	r2, [r6, #0]
  4034a0:	601a      	str	r2, [r3, #0]
  4034a2:	6872      	ldr	r2, [r6, #4]
  4034a4:	605a      	str	r2, [r3, #4]
  4034a6:	68b2      	ldr	r2, [r6, #8]
  4034a8:	609a      	str	r2, [r3, #8]
  4034aa:	463e      	mov	r6, r7
  4034ac:	4674      	mov	r4, lr
  4034ae:	f8da 3004 	ldr.w	r3, [sl, #4]
  4034b2:	46d0      	mov	r8, sl
  4034b4:	e740      	b.n	403338 <_realloc_r+0x140>
  4034b6:	eb08 0205 	add.w	r2, r8, r5
  4034ba:	1b4b      	subs	r3, r1, r5
  4034bc:	f043 0301 	orr.w	r3, r3, #1
  4034c0:	f8cb 2008 	str.w	r2, [fp, #8]
  4034c4:	6053      	str	r3, [r2, #4]
  4034c6:	f856 3c04 	ldr.w	r3, [r6, #-4]
  4034ca:	f003 0301 	and.w	r3, r3, #1
  4034ce:	431d      	orrs	r5, r3
  4034d0:	4648      	mov	r0, r9
  4034d2:	f846 5c04 	str.w	r5, [r6, #-4]
  4034d6:	f7ff fe8d 	bl	4031f4 <__malloc_unlock>
  4034da:	4630      	mov	r0, r6
  4034dc:	e73d      	b.n	40335a <_realloc_r+0x162>
  4034de:	4631      	mov	r1, r6
  4034e0:	f7ff fe22 	bl	403128 <memmove>
  4034e4:	e76c      	b.n	4033c0 <_realloc_r+0x1c8>
  4034e6:	68b3      	ldr	r3, [r6, #8]
  4034e8:	6083      	str	r3, [r0, #8]
  4034ea:	68f3      	ldr	r3, [r6, #12]
  4034ec:	60c3      	str	r3, [r0, #12]
  4034ee:	2a24      	cmp	r2, #36	; 0x24
  4034f0:	d02c      	beq.n	40354c <_realloc_r+0x354>
  4034f2:	f100 0310 	add.w	r3, r0, #16
  4034f6:	f106 0210 	add.w	r2, r6, #16
  4034fa:	e75b      	b.n	4033b4 <_realloc_r+0x1bc>
  4034fc:	f850 2c04 	ldr.w	r2, [r0, #-4]
  403500:	f022 0203 	bic.w	r2, r2, #3
  403504:	4414      	add	r4, r2
  403506:	e717      	b.n	403338 <_realloc_r+0x140>
  403508:	4631      	mov	r1, r6
  40350a:	4638      	mov	r0, r7
  40350c:	4674      	mov	r4, lr
  40350e:	463e      	mov	r6, r7
  403510:	f7ff fe0a 	bl	403128 <memmove>
  403514:	46d0      	mov	r8, sl
  403516:	f8da 3004 	ldr.w	r3, [sl, #4]
  40351a:	e70d      	b.n	403338 <_realloc_r+0x140>
  40351c:	463a      	mov	r2, r7
  40351e:	e700      	b.n	403322 <_realloc_r+0x12a>
  403520:	4631      	mov	r1, r6
  403522:	4638      	mov	r0, r7
  403524:	461c      	mov	r4, r3
  403526:	463e      	mov	r6, r7
  403528:	f7ff fdfe 	bl	403128 <memmove>
  40352c:	46d0      	mov	r8, sl
  40352e:	f8da 3004 	ldr.w	r3, [sl, #4]
  403532:	e701      	b.n	403338 <_realloc_r+0x140>
  403534:	68b3      	ldr	r3, [r6, #8]
  403536:	f8ca 3010 	str.w	r3, [sl, #16]
  40353a:	68f3      	ldr	r3, [r6, #12]
  40353c:	f8ca 3014 	str.w	r3, [sl, #20]
  403540:	2a24      	cmp	r2, #36	; 0x24
  403542:	d018      	beq.n	403576 <_realloc_r+0x37e>
  403544:	3610      	adds	r6, #16
  403546:	f10a 0318 	add.w	r3, sl, #24
  40354a:	e7a8      	b.n	40349e <_realloc_r+0x2a6>
  40354c:	6933      	ldr	r3, [r6, #16]
  40354e:	6103      	str	r3, [r0, #16]
  403550:	6973      	ldr	r3, [r6, #20]
  403552:	6143      	str	r3, [r0, #20]
  403554:	f106 0218 	add.w	r2, r6, #24
  403558:	f100 0318 	add.w	r3, r0, #24
  40355c:	e72a      	b.n	4033b4 <_realloc_r+0x1bc>
  40355e:	68b1      	ldr	r1, [r6, #8]
  403560:	f8ca 1010 	str.w	r1, [sl, #16]
  403564:	68f1      	ldr	r1, [r6, #12]
  403566:	f8ca 1014 	str.w	r1, [sl, #20]
  40356a:	2a24      	cmp	r2, #36	; 0x24
  40356c:	d00f      	beq.n	40358e <_realloc_r+0x396>
  40356e:	3610      	adds	r6, #16
  403570:	f10a 0218 	add.w	r2, sl, #24
  403574:	e6d5      	b.n	403322 <_realloc_r+0x12a>
  403576:	6933      	ldr	r3, [r6, #16]
  403578:	f8ca 3018 	str.w	r3, [sl, #24]
  40357c:	6973      	ldr	r3, [r6, #20]
  40357e:	f8ca 301c 	str.w	r3, [sl, #28]
  403582:	3618      	adds	r6, #24
  403584:	f10a 0320 	add.w	r3, sl, #32
  403588:	e789      	b.n	40349e <_realloc_r+0x2a6>
  40358a:	463b      	mov	r3, r7
  40358c:	e760      	b.n	403450 <_realloc_r+0x258>
  40358e:	6932      	ldr	r2, [r6, #16]
  403590:	f8ca 2018 	str.w	r2, [sl, #24]
  403594:	6972      	ldr	r2, [r6, #20]
  403596:	f8ca 201c 	str.w	r2, [sl, #28]
  40359a:	3618      	adds	r6, #24
  40359c:	f10a 0220 	add.w	r2, sl, #32
  4035a0:	e6bf      	b.n	403322 <_realloc_r+0x12a>
  4035a2:	4631      	mov	r1, r6
  4035a4:	4638      	mov	r0, r7
  4035a6:	f8cd c004 	str.w	ip, [sp, #4]
  4035aa:	f7ff fdbd 	bl	403128 <memmove>
  4035ae:	f8dd c004 	ldr.w	ip, [sp, #4]
  4035b2:	e753      	b.n	40345c <_realloc_r+0x264>
  4035b4:	68b3      	ldr	r3, [r6, #8]
  4035b6:	f8ca 3010 	str.w	r3, [sl, #16]
  4035ba:	68f3      	ldr	r3, [r6, #12]
  4035bc:	f8ca 3014 	str.w	r3, [sl, #20]
  4035c0:	2a24      	cmp	r2, #36	; 0x24
  4035c2:	d003      	beq.n	4035cc <_realloc_r+0x3d4>
  4035c4:	3610      	adds	r6, #16
  4035c6:	f10a 0318 	add.w	r3, sl, #24
  4035ca:	e741      	b.n	403450 <_realloc_r+0x258>
  4035cc:	6933      	ldr	r3, [r6, #16]
  4035ce:	f8ca 3018 	str.w	r3, [sl, #24]
  4035d2:	6973      	ldr	r3, [r6, #20]
  4035d4:	f8ca 301c 	str.w	r3, [sl, #28]
  4035d8:	3618      	adds	r6, #24
  4035da:	f10a 0320 	add.w	r3, sl, #32
  4035de:	e737      	b.n	403450 <_realloc_r+0x258>
  4035e0:	20000458 	.word	0x20000458

004035e4 <_sbrk_r>:
  4035e4:	b538      	push	{r3, r4, r5, lr}
  4035e6:	4c07      	ldr	r4, [pc, #28]	; (403604 <_sbrk_r+0x20>)
  4035e8:	2300      	movs	r3, #0
  4035ea:	4605      	mov	r5, r0
  4035ec:	4608      	mov	r0, r1
  4035ee:	6023      	str	r3, [r4, #0]
  4035f0:	f7fd faac 	bl	400b4c <_sbrk>
  4035f4:	1c43      	adds	r3, r0, #1
  4035f6:	d000      	beq.n	4035fa <_sbrk_r+0x16>
  4035f8:	bd38      	pop	{r3, r4, r5, pc}
  4035fa:	6823      	ldr	r3, [r4, #0]
  4035fc:	2b00      	cmp	r3, #0
  4035fe:	d0fb      	beq.n	4035f8 <_sbrk_r+0x14>
  403600:	602b      	str	r3, [r5, #0]
  403602:	bd38      	pop	{r3, r4, r5, pc}
  403604:	20001fb0 	.word	0x20001fb0

00403608 <__sread>:
  403608:	b510      	push	{r4, lr}
  40360a:	460c      	mov	r4, r1
  40360c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  403610:	f000 f9bc 	bl	40398c <_read_r>
  403614:	2800      	cmp	r0, #0
  403616:	db03      	blt.n	403620 <__sread+0x18>
  403618:	6d23      	ldr	r3, [r4, #80]	; 0x50
  40361a:	4403      	add	r3, r0
  40361c:	6523      	str	r3, [r4, #80]	; 0x50
  40361e:	bd10      	pop	{r4, pc}
  403620:	89a3      	ldrh	r3, [r4, #12]
  403622:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
  403626:	81a3      	strh	r3, [r4, #12]
  403628:	bd10      	pop	{r4, pc}
  40362a:	bf00      	nop

0040362c <__swrite>:
  40362c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  403630:	4616      	mov	r6, r2
  403632:	898a      	ldrh	r2, [r1, #12]
  403634:	461d      	mov	r5, r3
  403636:	05d3      	lsls	r3, r2, #23
  403638:	460c      	mov	r4, r1
  40363a:	4607      	mov	r7, r0
  40363c:	d506      	bpl.n	40364c <__swrite+0x20>
  40363e:	2200      	movs	r2, #0
  403640:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  403644:	2302      	movs	r3, #2
  403646:	f000 f98d 	bl	403964 <_lseek_r>
  40364a:	89a2      	ldrh	r2, [r4, #12]
  40364c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  403650:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
  403654:	81a2      	strh	r2, [r4, #12]
  403656:	4638      	mov	r0, r7
  403658:	4632      	mov	r2, r6
  40365a:	462b      	mov	r3, r5
  40365c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  403660:	f000 b8a0 	b.w	4037a4 <_write_r>

00403664 <__sseek>:
  403664:	b510      	push	{r4, lr}
  403666:	460c      	mov	r4, r1
  403668:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  40366c:	f000 f97a 	bl	403964 <_lseek_r>
  403670:	89a3      	ldrh	r3, [r4, #12]
  403672:	1c42      	adds	r2, r0, #1
  403674:	bf0e      	itee	eq
  403676:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
  40367a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
  40367e:	6520      	strne	r0, [r4, #80]	; 0x50
  403680:	81a3      	strh	r3, [r4, #12]
  403682:	bd10      	pop	{r4, pc}

00403684 <__sclose>:
  403684:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  403688:	f000 b8f2 	b.w	403870 <_close_r>

0040368c <__swbuf_r>:
  40368c:	b570      	push	{r4, r5, r6, lr}
  40368e:	460d      	mov	r5, r1
  403690:	4614      	mov	r4, r2
  403692:	4606      	mov	r6, r0
  403694:	b110      	cbz	r0, 40369c <__swbuf_r+0x10>
  403696:	6b83      	ldr	r3, [r0, #56]	; 0x38
  403698:	2b00      	cmp	r3, #0
  40369a:	d048      	beq.n	40372e <__swbuf_r+0xa2>
  40369c:	89a2      	ldrh	r2, [r4, #12]
  40369e:	69a3      	ldr	r3, [r4, #24]
  4036a0:	60a3      	str	r3, [r4, #8]
  4036a2:	b291      	uxth	r1, r2
  4036a4:	0708      	lsls	r0, r1, #28
  4036a6:	d538      	bpl.n	40371a <__swbuf_r+0x8e>
  4036a8:	6923      	ldr	r3, [r4, #16]
  4036aa:	2b00      	cmp	r3, #0
  4036ac:	d035      	beq.n	40371a <__swbuf_r+0x8e>
  4036ae:	0489      	lsls	r1, r1, #18
  4036b0:	b2ed      	uxtb	r5, r5
  4036b2:	d515      	bpl.n	4036e0 <__swbuf_r+0x54>
  4036b4:	6822      	ldr	r2, [r4, #0]
  4036b6:	6961      	ldr	r1, [r4, #20]
  4036b8:	1ad3      	subs	r3, r2, r3
  4036ba:	428b      	cmp	r3, r1
  4036bc:	da1c      	bge.n	4036f8 <__swbuf_r+0x6c>
  4036be:	3301      	adds	r3, #1
  4036c0:	68a1      	ldr	r1, [r4, #8]
  4036c2:	1c50      	adds	r0, r2, #1
  4036c4:	3901      	subs	r1, #1
  4036c6:	60a1      	str	r1, [r4, #8]
  4036c8:	6020      	str	r0, [r4, #0]
  4036ca:	7015      	strb	r5, [r2, #0]
  4036cc:	6962      	ldr	r2, [r4, #20]
  4036ce:	429a      	cmp	r2, r3
  4036d0:	d01a      	beq.n	403708 <__swbuf_r+0x7c>
  4036d2:	89a3      	ldrh	r3, [r4, #12]
  4036d4:	07db      	lsls	r3, r3, #31
  4036d6:	d501      	bpl.n	4036dc <__swbuf_r+0x50>
  4036d8:	2d0a      	cmp	r5, #10
  4036da:	d015      	beq.n	403708 <__swbuf_r+0x7c>
  4036dc:	4628      	mov	r0, r5
  4036de:	bd70      	pop	{r4, r5, r6, pc}
  4036e0:	6e61      	ldr	r1, [r4, #100]	; 0x64
  4036e2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
  4036e6:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
  4036ea:	81a2      	strh	r2, [r4, #12]
  4036ec:	6822      	ldr	r2, [r4, #0]
  4036ee:	6661      	str	r1, [r4, #100]	; 0x64
  4036f0:	6961      	ldr	r1, [r4, #20]
  4036f2:	1ad3      	subs	r3, r2, r3
  4036f4:	428b      	cmp	r3, r1
  4036f6:	dbe2      	blt.n	4036be <__swbuf_r+0x32>
  4036f8:	4630      	mov	r0, r6
  4036fa:	4621      	mov	r1, r4
  4036fc:	f7fe fd22 	bl	402144 <_fflush_r>
  403700:	b940      	cbnz	r0, 403714 <__swbuf_r+0x88>
  403702:	6822      	ldr	r2, [r4, #0]
  403704:	2301      	movs	r3, #1
  403706:	e7db      	b.n	4036c0 <__swbuf_r+0x34>
  403708:	4630      	mov	r0, r6
  40370a:	4621      	mov	r1, r4
  40370c:	f7fe fd1a 	bl	402144 <_fflush_r>
  403710:	2800      	cmp	r0, #0
  403712:	d0e3      	beq.n	4036dc <__swbuf_r+0x50>
  403714:	f04f 30ff 	mov.w	r0, #4294967295
  403718:	bd70      	pop	{r4, r5, r6, pc}
  40371a:	4630      	mov	r0, r6
  40371c:	4621      	mov	r1, r4
  40371e:	f7fe fbf5 	bl	401f0c <__swsetup_r>
  403722:	2800      	cmp	r0, #0
  403724:	d1f6      	bne.n	403714 <__swbuf_r+0x88>
  403726:	89a2      	ldrh	r2, [r4, #12]
  403728:	6923      	ldr	r3, [r4, #16]
  40372a:	b291      	uxth	r1, r2
  40372c:	e7bf      	b.n	4036ae <__swbuf_r+0x22>
  40372e:	f7fe fd9d 	bl	40226c <__sinit>
  403732:	e7b3      	b.n	40369c <__swbuf_r+0x10>

00403734 <_wcrtomb_r>:
  403734:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  403738:	4605      	mov	r5, r0
  40373a:	b086      	sub	sp, #24
  40373c:	461e      	mov	r6, r3
  40373e:	460c      	mov	r4, r1
  403740:	b1a1      	cbz	r1, 40376c <_wcrtomb_r+0x38>
  403742:	4b10      	ldr	r3, [pc, #64]	; (403784 <_wcrtomb_r+0x50>)
  403744:	4617      	mov	r7, r2
  403746:	f8d3 8000 	ldr.w	r8, [r3]
  40374a:	f7ff f8f5 	bl	402938 <__locale_charset>
  40374e:	9600      	str	r6, [sp, #0]
  403750:	4603      	mov	r3, r0
  403752:	4621      	mov	r1, r4
  403754:	463a      	mov	r2, r7
  403756:	4628      	mov	r0, r5
  403758:	47c0      	blx	r8
  40375a:	1c43      	adds	r3, r0, #1
  40375c:	d103      	bne.n	403766 <_wcrtomb_r+0x32>
  40375e:	2200      	movs	r2, #0
  403760:	238a      	movs	r3, #138	; 0x8a
  403762:	6032      	str	r2, [r6, #0]
  403764:	602b      	str	r3, [r5, #0]
  403766:	b006      	add	sp, #24
  403768:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40376c:	4b05      	ldr	r3, [pc, #20]	; (403784 <_wcrtomb_r+0x50>)
  40376e:	681f      	ldr	r7, [r3, #0]
  403770:	f7ff f8e2 	bl	402938 <__locale_charset>
  403774:	9600      	str	r6, [sp, #0]
  403776:	4603      	mov	r3, r0
  403778:	4622      	mov	r2, r4
  40377a:	4628      	mov	r0, r5
  40377c:	a903      	add	r1, sp, #12
  40377e:	47b8      	blx	r7
  403780:	e7eb      	b.n	40375a <_wcrtomb_r+0x26>
  403782:	bf00      	nop
  403784:	20000868 	.word	0x20000868

00403788 <__ascii_wctomb>:
  403788:	b121      	cbz	r1, 403794 <__ascii_wctomb+0xc>
  40378a:	2aff      	cmp	r2, #255	; 0xff
  40378c:	d804      	bhi.n	403798 <__ascii_wctomb+0x10>
  40378e:	700a      	strb	r2, [r1, #0]
  403790:	2001      	movs	r0, #1
  403792:	4770      	bx	lr
  403794:	4608      	mov	r0, r1
  403796:	4770      	bx	lr
  403798:	238a      	movs	r3, #138	; 0x8a
  40379a:	6003      	str	r3, [r0, #0]
  40379c:	f04f 30ff 	mov.w	r0, #4294967295
  4037a0:	4770      	bx	lr
  4037a2:	bf00      	nop

004037a4 <_write_r>:
  4037a4:	b570      	push	{r4, r5, r6, lr}
  4037a6:	4c08      	ldr	r4, [pc, #32]	; (4037c8 <_write_r+0x24>)
  4037a8:	4606      	mov	r6, r0
  4037aa:	2500      	movs	r5, #0
  4037ac:	4608      	mov	r0, r1
  4037ae:	4611      	mov	r1, r2
  4037b0:	461a      	mov	r2, r3
  4037b2:	6025      	str	r5, [r4, #0]
  4037b4:	f7fc fd08 	bl	4001c8 <_write>
  4037b8:	1c43      	adds	r3, r0, #1
  4037ba:	d000      	beq.n	4037be <_write_r+0x1a>
  4037bc:	bd70      	pop	{r4, r5, r6, pc}
  4037be:	6823      	ldr	r3, [r4, #0]
  4037c0:	2b00      	cmp	r3, #0
  4037c2:	d0fb      	beq.n	4037bc <_write_r+0x18>
  4037c4:	6033      	str	r3, [r6, #0]
  4037c6:	bd70      	pop	{r4, r5, r6, pc}
  4037c8:	20001fb0 	.word	0x20001fb0

004037cc <__register_exitproc>:
  4037cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  4037d0:	4c25      	ldr	r4, [pc, #148]	; (403868 <__register_exitproc+0x9c>)
  4037d2:	6825      	ldr	r5, [r4, #0]
  4037d4:	f8d5 4148 	ldr.w	r4, [r5, #328]	; 0x148
  4037d8:	4606      	mov	r6, r0
  4037da:	4688      	mov	r8, r1
  4037dc:	4692      	mov	sl, r2
  4037de:	4699      	mov	r9, r3
  4037e0:	b3cc      	cbz	r4, 403856 <__register_exitproc+0x8a>
  4037e2:	6860      	ldr	r0, [r4, #4]
  4037e4:	281f      	cmp	r0, #31
  4037e6:	dc18      	bgt.n	40381a <__register_exitproc+0x4e>
  4037e8:	1c43      	adds	r3, r0, #1
  4037ea:	b17e      	cbz	r6, 40380c <__register_exitproc+0x40>
  4037ec:	eb04 0580 	add.w	r5, r4, r0, lsl #2
  4037f0:	2101      	movs	r1, #1
  4037f2:	f8c5 a088 	str.w	sl, [r5, #136]	; 0x88
  4037f6:	f8d4 7188 	ldr.w	r7, [r4, #392]	; 0x188
  4037fa:	fa01 f200 	lsl.w	r2, r1, r0
  4037fe:	4317      	orrs	r7, r2
  403800:	2e02      	cmp	r6, #2
  403802:	f8c4 7188 	str.w	r7, [r4, #392]	; 0x188
  403806:	f8c5 9108 	str.w	r9, [r5, #264]	; 0x108
  40380a:	d01e      	beq.n	40384a <__register_exitproc+0x7e>
  40380c:	3002      	adds	r0, #2
  40380e:	6063      	str	r3, [r4, #4]
  403810:	f844 8020 	str.w	r8, [r4, r0, lsl #2]
  403814:	2000      	movs	r0, #0
  403816:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40381a:	4b14      	ldr	r3, [pc, #80]	; (40386c <__register_exitproc+0xa0>)
  40381c:	b303      	cbz	r3, 403860 <__register_exitproc+0x94>
  40381e:	f44f 70c8 	mov.w	r0, #400	; 0x190
  403822:	f7ff f903 	bl	402a2c <malloc>
  403826:	4604      	mov	r4, r0
  403828:	b1d0      	cbz	r0, 403860 <__register_exitproc+0x94>
  40382a:	f8d5 3148 	ldr.w	r3, [r5, #328]	; 0x148
  40382e:	2700      	movs	r7, #0
  403830:	e880 0088 	stmia.w	r0, {r3, r7}
  403834:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
  403838:	4638      	mov	r0, r7
  40383a:	2301      	movs	r3, #1
  40383c:	f8c4 7188 	str.w	r7, [r4, #392]	; 0x188
  403840:	f8c4 718c 	str.w	r7, [r4, #396]	; 0x18c
  403844:	2e00      	cmp	r6, #0
  403846:	d0e1      	beq.n	40380c <__register_exitproc+0x40>
  403848:	e7d0      	b.n	4037ec <__register_exitproc+0x20>
  40384a:	f8d4 118c 	ldr.w	r1, [r4, #396]	; 0x18c
  40384e:	430a      	orrs	r2, r1
  403850:	f8c4 218c 	str.w	r2, [r4, #396]	; 0x18c
  403854:	e7da      	b.n	40380c <__register_exitproc+0x40>
  403856:	f505 74a6 	add.w	r4, r5, #332	; 0x14c
  40385a:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
  40385e:	e7c0      	b.n	4037e2 <__register_exitproc+0x16>
  403860:	f04f 30ff 	mov.w	r0, #4294967295
  403864:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  403868:	00405650 	.word	0x00405650
  40386c:	00402a2d 	.word	0x00402a2d

00403870 <_close_r>:
  403870:	b538      	push	{r3, r4, r5, lr}
  403872:	4c07      	ldr	r4, [pc, #28]	; (403890 <_close_r+0x20>)
  403874:	2300      	movs	r3, #0
  403876:	4605      	mov	r5, r0
  403878:	4608      	mov	r0, r1
  40387a:	6023      	str	r3, [r4, #0]
  40387c:	f7fd f980 	bl	400b80 <_close>
  403880:	1c43      	adds	r3, r0, #1
  403882:	d000      	beq.n	403886 <_close_r+0x16>
  403884:	bd38      	pop	{r3, r4, r5, pc}
  403886:	6823      	ldr	r3, [r4, #0]
  403888:	2b00      	cmp	r3, #0
  40388a:	d0fb      	beq.n	403884 <_close_r+0x14>
  40388c:	602b      	str	r3, [r5, #0]
  40388e:	bd38      	pop	{r3, r4, r5, pc}
  403890:	20001fb0 	.word	0x20001fb0

00403894 <_fclose_r>:
  403894:	2900      	cmp	r1, #0
  403896:	d03d      	beq.n	403914 <_fclose_r+0x80>
  403898:	b570      	push	{r4, r5, r6, lr}
  40389a:	4605      	mov	r5, r0
  40389c:	460c      	mov	r4, r1
  40389e:	b108      	cbz	r0, 4038a4 <_fclose_r+0x10>
  4038a0:	6b83      	ldr	r3, [r0, #56]	; 0x38
  4038a2:	b37b      	cbz	r3, 403904 <_fclose_r+0x70>
  4038a4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4038a8:	b90b      	cbnz	r3, 4038ae <_fclose_r+0x1a>
  4038aa:	2000      	movs	r0, #0
  4038ac:	bd70      	pop	{r4, r5, r6, pc}
  4038ae:	4628      	mov	r0, r5
  4038b0:	4621      	mov	r1, r4
  4038b2:	f7fe fb9d 	bl	401ff0 <__sflush_r>
  4038b6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  4038b8:	4606      	mov	r6, r0
  4038ba:	b133      	cbz	r3, 4038ca <_fclose_r+0x36>
  4038bc:	4628      	mov	r0, r5
  4038be:	69e1      	ldr	r1, [r4, #28]
  4038c0:	4798      	blx	r3
  4038c2:	2800      	cmp	r0, #0
  4038c4:	bfb8      	it	lt
  4038c6:	f04f 36ff 	movlt.w	r6, #4294967295
  4038ca:	89a3      	ldrh	r3, [r4, #12]
  4038cc:	061b      	lsls	r3, r3, #24
  4038ce:	d41c      	bmi.n	40390a <_fclose_r+0x76>
  4038d0:	6b21      	ldr	r1, [r4, #48]	; 0x30
  4038d2:	b141      	cbz	r1, 4038e6 <_fclose_r+0x52>
  4038d4:	f104 0340 	add.w	r3, r4, #64	; 0x40
  4038d8:	4299      	cmp	r1, r3
  4038da:	d002      	beq.n	4038e2 <_fclose_r+0x4e>
  4038dc:	4628      	mov	r0, r5
  4038de:	f7fe fd9d 	bl	40241c <_free_r>
  4038e2:	2300      	movs	r3, #0
  4038e4:	6323      	str	r3, [r4, #48]	; 0x30
  4038e6:	6c61      	ldr	r1, [r4, #68]	; 0x44
  4038e8:	b121      	cbz	r1, 4038f4 <_fclose_r+0x60>
  4038ea:	4628      	mov	r0, r5
  4038ec:	f7fe fd96 	bl	40241c <_free_r>
  4038f0:	2300      	movs	r3, #0
  4038f2:	6463      	str	r3, [r4, #68]	; 0x44
  4038f4:	f7fe fcc0 	bl	402278 <__sfp_lock_acquire>
  4038f8:	2300      	movs	r3, #0
  4038fa:	81a3      	strh	r3, [r4, #12]
  4038fc:	f7fe fcbe 	bl	40227c <__sfp_lock_release>
  403900:	4630      	mov	r0, r6
  403902:	bd70      	pop	{r4, r5, r6, pc}
  403904:	f7fe fcb2 	bl	40226c <__sinit>
  403908:	e7cc      	b.n	4038a4 <_fclose_r+0x10>
  40390a:	4628      	mov	r0, r5
  40390c:	6921      	ldr	r1, [r4, #16]
  40390e:	f7fe fd85 	bl	40241c <_free_r>
  403912:	e7dd      	b.n	4038d0 <_fclose_r+0x3c>
  403914:	2000      	movs	r0, #0
  403916:	4770      	bx	lr

00403918 <_fstat_r>:
  403918:	b538      	push	{r3, r4, r5, lr}
  40391a:	4c08      	ldr	r4, [pc, #32]	; (40393c <_fstat_r+0x24>)
  40391c:	2300      	movs	r3, #0
  40391e:	4605      	mov	r5, r0
  403920:	4608      	mov	r0, r1
  403922:	4611      	mov	r1, r2
  403924:	6023      	str	r3, [r4, #0]
  403926:	f7fd f92f 	bl	400b88 <_fstat>
  40392a:	1c43      	adds	r3, r0, #1
  40392c:	d000      	beq.n	403930 <_fstat_r+0x18>
  40392e:	bd38      	pop	{r3, r4, r5, pc}
  403930:	6823      	ldr	r3, [r4, #0]
  403932:	2b00      	cmp	r3, #0
  403934:	d0fb      	beq.n	40392e <_fstat_r+0x16>
  403936:	602b      	str	r3, [r5, #0]
  403938:	bd38      	pop	{r3, r4, r5, pc}
  40393a:	bf00      	nop
  40393c:	20001fb0 	.word	0x20001fb0

00403940 <_isatty_r>:
  403940:	b538      	push	{r3, r4, r5, lr}
  403942:	4c07      	ldr	r4, [pc, #28]	; (403960 <_isatty_r+0x20>)
  403944:	2300      	movs	r3, #0
  403946:	4605      	mov	r5, r0
  403948:	4608      	mov	r0, r1
  40394a:	6023      	str	r3, [r4, #0]
  40394c:	f7fd f922 	bl	400b94 <_isatty>
  403950:	1c43      	adds	r3, r0, #1
  403952:	d000      	beq.n	403956 <_isatty_r+0x16>
  403954:	bd38      	pop	{r3, r4, r5, pc}
  403956:	6823      	ldr	r3, [r4, #0]
  403958:	2b00      	cmp	r3, #0
  40395a:	d0fb      	beq.n	403954 <_isatty_r+0x14>
  40395c:	602b      	str	r3, [r5, #0]
  40395e:	bd38      	pop	{r3, r4, r5, pc}
  403960:	20001fb0 	.word	0x20001fb0

00403964 <_lseek_r>:
  403964:	b570      	push	{r4, r5, r6, lr}
  403966:	4c08      	ldr	r4, [pc, #32]	; (403988 <_lseek_r+0x24>)
  403968:	4606      	mov	r6, r0
  40396a:	2500      	movs	r5, #0
  40396c:	4608      	mov	r0, r1
  40396e:	4611      	mov	r1, r2
  403970:	461a      	mov	r2, r3
  403972:	6025      	str	r5, [r4, #0]
  403974:	f7fd f910 	bl	400b98 <_lseek>
  403978:	1c43      	adds	r3, r0, #1
  40397a:	d000      	beq.n	40397e <_lseek_r+0x1a>
  40397c:	bd70      	pop	{r4, r5, r6, pc}
  40397e:	6823      	ldr	r3, [r4, #0]
  403980:	2b00      	cmp	r3, #0
  403982:	d0fb      	beq.n	40397c <_lseek_r+0x18>
  403984:	6033      	str	r3, [r6, #0]
  403986:	bd70      	pop	{r4, r5, r6, pc}
  403988:	20001fb0 	.word	0x20001fb0

0040398c <_read_r>:
  40398c:	b570      	push	{r4, r5, r6, lr}
  40398e:	4c08      	ldr	r4, [pc, #32]	; (4039b0 <_read_r+0x24>)
  403990:	4606      	mov	r6, r0
  403992:	2500      	movs	r5, #0
  403994:	4608      	mov	r0, r1
  403996:	4611      	mov	r1, r2
  403998:	461a      	mov	r2, r3
  40399a:	6025      	str	r5, [r4, #0]
  40399c:	f7fc fbf6 	bl	40018c <_read>
  4039a0:	1c43      	adds	r3, r0, #1
  4039a2:	d000      	beq.n	4039a6 <_read_r+0x1a>
  4039a4:	bd70      	pop	{r4, r5, r6, pc}
  4039a6:	6823      	ldr	r3, [r4, #0]
  4039a8:	2b00      	cmp	r3, #0
  4039aa:	d0fb      	beq.n	4039a4 <_read_r+0x18>
  4039ac:	6033      	str	r3, [r6, #0]
  4039ae:	bd70      	pop	{r4, r5, r6, pc}
  4039b0:	20001fb0 	.word	0x20001fb0

004039b4 <__aeabi_uldivmod>:
  4039b4:	b953      	cbnz	r3, 4039cc <__aeabi_uldivmod+0x18>
  4039b6:	b94a      	cbnz	r2, 4039cc <__aeabi_uldivmod+0x18>
  4039b8:	2900      	cmp	r1, #0
  4039ba:	bf08      	it	eq
  4039bc:	2800      	cmpeq	r0, #0
  4039be:	bf1c      	itt	ne
  4039c0:	f04f 31ff 	movne.w	r1, #4294967295
  4039c4:	f04f 30ff 	movne.w	r0, #4294967295
  4039c8:	f000 b83c 	b.w	403a44 <__aeabi_idiv0>
  4039cc:	b082      	sub	sp, #8
  4039ce:	46ec      	mov	ip, sp
  4039d0:	e92d 5000 	stmdb	sp!, {ip, lr}
  4039d4:	f000 f81e 	bl	403a14 <__gnu_uldivmod_helper>
  4039d8:	f8dd e004 	ldr.w	lr, [sp, #4]
  4039dc:	b002      	add	sp, #8
  4039de:	bc0c      	pop	{r2, r3}
  4039e0:	4770      	bx	lr
  4039e2:	bf00      	nop

004039e4 <__gnu_ldivmod_helper>:
  4039e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4039e8:	9c06      	ldr	r4, [sp, #24]
  4039ea:	4615      	mov	r5, r2
  4039ec:	4606      	mov	r6, r0
  4039ee:	460f      	mov	r7, r1
  4039f0:	4698      	mov	r8, r3
  4039f2:	f000 f829 	bl	403a48 <__divdi3>
  4039f6:	fb05 f301 	mul.w	r3, r5, r1
  4039fa:	fb00 3808 	mla	r8, r0, r8, r3
  4039fe:	fba5 2300 	umull	r2, r3, r5, r0
  403a02:	1ab2      	subs	r2, r6, r2
  403a04:	4443      	add	r3, r8
  403a06:	eb67 0303 	sbc.w	r3, r7, r3
  403a0a:	e9c4 2300 	strd	r2, r3, [r4]
  403a0e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  403a12:	bf00      	nop

00403a14 <__gnu_uldivmod_helper>:
  403a14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  403a18:	9c06      	ldr	r4, [sp, #24]
  403a1a:	4690      	mov	r8, r2
  403a1c:	4606      	mov	r6, r0
  403a1e:	460f      	mov	r7, r1
  403a20:	461d      	mov	r5, r3
  403a22:	f000 f95f 	bl	403ce4 <__udivdi3>
  403a26:	fb00 f505 	mul.w	r5, r0, r5
  403a2a:	fba0 2308 	umull	r2, r3, r0, r8
  403a2e:	fb08 5501 	mla	r5, r8, r1, r5
  403a32:	1ab2      	subs	r2, r6, r2
  403a34:	442b      	add	r3, r5
  403a36:	eb67 0303 	sbc.w	r3, r7, r3
  403a3a:	e9c4 2300 	strd	r2, r3, [r4]
  403a3e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  403a42:	bf00      	nop

00403a44 <__aeabi_idiv0>:
  403a44:	4770      	bx	lr
  403a46:	bf00      	nop

00403a48 <__divdi3>:
  403a48:	2900      	cmp	r1, #0
  403a4a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  403a4e:	f2c0 80a6 	blt.w	403b9e <__divdi3+0x156>
  403a52:	2600      	movs	r6, #0
  403a54:	2b00      	cmp	r3, #0
  403a56:	f2c0 809c 	blt.w	403b92 <__divdi3+0x14a>
  403a5a:	4688      	mov	r8, r1
  403a5c:	4694      	mov	ip, r2
  403a5e:	469e      	mov	lr, r3
  403a60:	4615      	mov	r5, r2
  403a62:	4604      	mov	r4, r0
  403a64:	460f      	mov	r7, r1
  403a66:	2b00      	cmp	r3, #0
  403a68:	d13d      	bne.n	403ae6 <__divdi3+0x9e>
  403a6a:	428a      	cmp	r2, r1
  403a6c:	d959      	bls.n	403b22 <__divdi3+0xda>
  403a6e:	fab2 f382 	clz	r3, r2
  403a72:	b13b      	cbz	r3, 403a84 <__divdi3+0x3c>
  403a74:	f1c3 0220 	rsb	r2, r3, #32
  403a78:	409f      	lsls	r7, r3
  403a7a:	fa20 f202 	lsr.w	r2, r0, r2
  403a7e:	409d      	lsls	r5, r3
  403a80:	4317      	orrs	r7, r2
  403a82:	409c      	lsls	r4, r3
  403a84:	0c29      	lsrs	r1, r5, #16
  403a86:	0c22      	lsrs	r2, r4, #16
  403a88:	fbb7 fef1 	udiv	lr, r7, r1
  403a8c:	b2a8      	uxth	r0, r5
  403a8e:	fb01 771e 	mls	r7, r1, lr, r7
  403a92:	ea42 4707 	orr.w	r7, r2, r7, lsl #16
  403a96:	fb00 f30e 	mul.w	r3, r0, lr
  403a9a:	42bb      	cmp	r3, r7
  403a9c:	d90a      	bls.n	403ab4 <__divdi3+0x6c>
  403a9e:	197f      	adds	r7, r7, r5
  403aa0:	f10e 32ff 	add.w	r2, lr, #4294967295
  403aa4:	f080 8105 	bcs.w	403cb2 <__divdi3+0x26a>
  403aa8:	42bb      	cmp	r3, r7
  403aaa:	f240 8102 	bls.w	403cb2 <__divdi3+0x26a>
  403aae:	f1ae 0e02 	sub.w	lr, lr, #2
  403ab2:	442f      	add	r7, r5
  403ab4:	1aff      	subs	r7, r7, r3
  403ab6:	b2a4      	uxth	r4, r4
  403ab8:	fbb7 f3f1 	udiv	r3, r7, r1
  403abc:	fb01 7713 	mls	r7, r1, r3, r7
  403ac0:	ea44 4707 	orr.w	r7, r4, r7, lsl #16
  403ac4:	fb00 f003 	mul.w	r0, r0, r3
  403ac8:	42b8      	cmp	r0, r7
  403aca:	d908      	bls.n	403ade <__divdi3+0x96>
  403acc:	197f      	adds	r7, r7, r5
  403ace:	f103 32ff 	add.w	r2, r3, #4294967295
  403ad2:	f080 80f0 	bcs.w	403cb6 <__divdi3+0x26e>
  403ad6:	42b8      	cmp	r0, r7
  403ad8:	f240 80ed 	bls.w	403cb6 <__divdi3+0x26e>
  403adc:	3b02      	subs	r3, #2
  403ade:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
  403ae2:	2200      	movs	r2, #0
  403ae4:	e003      	b.n	403aee <__divdi3+0xa6>
  403ae6:	428b      	cmp	r3, r1
  403ae8:	d90f      	bls.n	403b0a <__divdi3+0xc2>
  403aea:	2200      	movs	r2, #0
  403aec:	4613      	mov	r3, r2
  403aee:	1c34      	adds	r4, r6, #0
  403af0:	bf18      	it	ne
  403af2:	2401      	movne	r4, #1
  403af4:	4260      	negs	r0, r4
  403af6:	f04f 0500 	mov.w	r5, #0
  403afa:	eb65 0145 	sbc.w	r1, r5, r5, lsl #1
  403afe:	4058      	eors	r0, r3
  403b00:	4051      	eors	r1, r2
  403b02:	1900      	adds	r0, r0, r4
  403b04:	4169      	adcs	r1, r5
  403b06:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  403b0a:	fab3 f283 	clz	r2, r3
  403b0e:	2a00      	cmp	r2, #0
  403b10:	f040 8086 	bne.w	403c20 <__divdi3+0x1d8>
  403b14:	428b      	cmp	r3, r1
  403b16:	d302      	bcc.n	403b1e <__divdi3+0xd6>
  403b18:	4584      	cmp	ip, r0
  403b1a:	f200 80db 	bhi.w	403cd4 <__divdi3+0x28c>
  403b1e:	2301      	movs	r3, #1
  403b20:	e7e5      	b.n	403aee <__divdi3+0xa6>
  403b22:	b912      	cbnz	r2, 403b2a <__divdi3+0xe2>
  403b24:	2301      	movs	r3, #1
  403b26:	fbb3 f5f2 	udiv	r5, r3, r2
  403b2a:	fab5 f085 	clz	r0, r5
  403b2e:	2800      	cmp	r0, #0
  403b30:	d13b      	bne.n	403baa <__divdi3+0x162>
  403b32:	1b78      	subs	r0, r7, r5
  403b34:	ea4f 4e15 	mov.w	lr, r5, lsr #16
  403b38:	fa1f fc85 	uxth.w	ip, r5
  403b3c:	2201      	movs	r2, #1
  403b3e:	fbb0 f8fe 	udiv	r8, r0, lr
  403b42:	0c21      	lsrs	r1, r4, #16
  403b44:	fb0e 0718 	mls	r7, lr, r8, r0
  403b48:	ea41 4707 	orr.w	r7, r1, r7, lsl #16
  403b4c:	fb0c f308 	mul.w	r3, ip, r8
  403b50:	42bb      	cmp	r3, r7
  403b52:	d907      	bls.n	403b64 <__divdi3+0x11c>
  403b54:	197f      	adds	r7, r7, r5
  403b56:	f108 31ff 	add.w	r1, r8, #4294967295
  403b5a:	d202      	bcs.n	403b62 <__divdi3+0x11a>
  403b5c:	42bb      	cmp	r3, r7
  403b5e:	f200 80bd 	bhi.w	403cdc <__divdi3+0x294>
  403b62:	4688      	mov	r8, r1
  403b64:	1aff      	subs	r7, r7, r3
  403b66:	b2a4      	uxth	r4, r4
  403b68:	fbb7 f3fe 	udiv	r3, r7, lr
  403b6c:	fb0e 7713 	mls	r7, lr, r3, r7
  403b70:	ea44 4707 	orr.w	r7, r4, r7, lsl #16
  403b74:	fb0c fc03 	mul.w	ip, ip, r3
  403b78:	45bc      	cmp	ip, r7
  403b7a:	d907      	bls.n	403b8c <__divdi3+0x144>
  403b7c:	197f      	adds	r7, r7, r5
  403b7e:	f103 31ff 	add.w	r1, r3, #4294967295
  403b82:	d202      	bcs.n	403b8a <__divdi3+0x142>
  403b84:	45bc      	cmp	ip, r7
  403b86:	f200 80a7 	bhi.w	403cd8 <__divdi3+0x290>
  403b8a:	460b      	mov	r3, r1
  403b8c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
  403b90:	e7ad      	b.n	403aee <__divdi3+0xa6>
  403b92:	4252      	negs	r2, r2
  403b94:	ea6f 0606 	mvn.w	r6, r6
  403b98:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
  403b9c:	e75d      	b.n	403a5a <__divdi3+0x12>
  403b9e:	4240      	negs	r0, r0
  403ba0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  403ba4:	f04f 36ff 	mov.w	r6, #4294967295
  403ba8:	e754      	b.n	403a54 <__divdi3+0xc>
  403baa:	f1c0 0220 	rsb	r2, r0, #32
  403bae:	fa24 f102 	lsr.w	r1, r4, r2
  403bb2:	fa07 f300 	lsl.w	r3, r7, r0
  403bb6:	4085      	lsls	r5, r0
  403bb8:	ea4f 4e15 	mov.w	lr, r5, lsr #16
  403bbc:	40d7      	lsrs	r7, r2
  403bbe:	4319      	orrs	r1, r3
  403bc0:	fbb7 f2fe 	udiv	r2, r7, lr
  403bc4:	0c0b      	lsrs	r3, r1, #16
  403bc6:	fb0e 7712 	mls	r7, lr, r2, r7
  403bca:	fa1f fc85 	uxth.w	ip, r5
  403bce:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
  403bd2:	fb0c f702 	mul.w	r7, ip, r2
  403bd6:	429f      	cmp	r7, r3
  403bd8:	fa04 f400 	lsl.w	r4, r4, r0
  403bdc:	d907      	bls.n	403bee <__divdi3+0x1a6>
  403bde:	195b      	adds	r3, r3, r5
  403be0:	f102 30ff 	add.w	r0, r2, #4294967295
  403be4:	d274      	bcs.n	403cd0 <__divdi3+0x288>
  403be6:	429f      	cmp	r7, r3
  403be8:	d972      	bls.n	403cd0 <__divdi3+0x288>
  403bea:	3a02      	subs	r2, #2
  403bec:	442b      	add	r3, r5
  403bee:	1bdf      	subs	r7, r3, r7
  403bf0:	b289      	uxth	r1, r1
  403bf2:	fbb7 f8fe 	udiv	r8, r7, lr
  403bf6:	fb0e 7318 	mls	r3, lr, r8, r7
  403bfa:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
  403bfe:	fb0c f708 	mul.w	r7, ip, r8
  403c02:	429f      	cmp	r7, r3
  403c04:	d908      	bls.n	403c18 <__divdi3+0x1d0>
  403c06:	195b      	adds	r3, r3, r5
  403c08:	f108 31ff 	add.w	r1, r8, #4294967295
  403c0c:	d25c      	bcs.n	403cc8 <__divdi3+0x280>
  403c0e:	429f      	cmp	r7, r3
  403c10:	d95a      	bls.n	403cc8 <__divdi3+0x280>
  403c12:	f1a8 0802 	sub.w	r8, r8, #2
  403c16:	442b      	add	r3, r5
  403c18:	1bd8      	subs	r0, r3, r7
  403c1a:	ea48 4202 	orr.w	r2, r8, r2, lsl #16
  403c1e:	e78e      	b.n	403b3e <__divdi3+0xf6>
  403c20:	f1c2 0320 	rsb	r3, r2, #32
  403c24:	fa2c f103 	lsr.w	r1, ip, r3
  403c28:	fa0e fe02 	lsl.w	lr, lr, r2
  403c2c:	fa20 f703 	lsr.w	r7, r0, r3
  403c30:	ea41 0e0e 	orr.w	lr, r1, lr
  403c34:	fa08 f002 	lsl.w	r0, r8, r2
  403c38:	fa28 f103 	lsr.w	r1, r8, r3
  403c3c:	ea4f 451e 	mov.w	r5, lr, lsr #16
  403c40:	4338      	orrs	r0, r7
  403c42:	fbb1 f8f5 	udiv	r8, r1, r5
  403c46:	0c03      	lsrs	r3, r0, #16
  403c48:	fb05 1118 	mls	r1, r5, r8, r1
  403c4c:	fa1f f78e 	uxth.w	r7, lr
  403c50:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
  403c54:	fb07 f308 	mul.w	r3, r7, r8
  403c58:	428b      	cmp	r3, r1
  403c5a:	fa0c fc02 	lsl.w	ip, ip, r2
  403c5e:	d909      	bls.n	403c74 <__divdi3+0x22c>
  403c60:	eb11 010e 	adds.w	r1, r1, lr
  403c64:	f108 39ff 	add.w	r9, r8, #4294967295
  403c68:	d230      	bcs.n	403ccc <__divdi3+0x284>
  403c6a:	428b      	cmp	r3, r1
  403c6c:	d92e      	bls.n	403ccc <__divdi3+0x284>
  403c6e:	f1a8 0802 	sub.w	r8, r8, #2
  403c72:	4471      	add	r1, lr
  403c74:	1ac9      	subs	r1, r1, r3
  403c76:	b280      	uxth	r0, r0
  403c78:	fbb1 f3f5 	udiv	r3, r1, r5
  403c7c:	fb05 1113 	mls	r1, r5, r3, r1
  403c80:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
  403c84:	fb07 f703 	mul.w	r7, r7, r3
  403c88:	428f      	cmp	r7, r1
  403c8a:	d908      	bls.n	403c9e <__divdi3+0x256>
  403c8c:	eb11 010e 	adds.w	r1, r1, lr
  403c90:	f103 30ff 	add.w	r0, r3, #4294967295
  403c94:	d216      	bcs.n	403cc4 <__divdi3+0x27c>
  403c96:	428f      	cmp	r7, r1
  403c98:	d914      	bls.n	403cc4 <__divdi3+0x27c>
  403c9a:	3b02      	subs	r3, #2
  403c9c:	4471      	add	r1, lr
  403c9e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
  403ca2:	1bc9      	subs	r1, r1, r7
  403ca4:	fba3 890c 	umull	r8, r9, r3, ip
  403ca8:	4549      	cmp	r1, r9
  403caa:	d309      	bcc.n	403cc0 <__divdi3+0x278>
  403cac:	d005      	beq.n	403cba <__divdi3+0x272>
  403cae:	2200      	movs	r2, #0
  403cb0:	e71d      	b.n	403aee <__divdi3+0xa6>
  403cb2:	4696      	mov	lr, r2
  403cb4:	e6fe      	b.n	403ab4 <__divdi3+0x6c>
  403cb6:	4613      	mov	r3, r2
  403cb8:	e711      	b.n	403ade <__divdi3+0x96>
  403cba:	4094      	lsls	r4, r2
  403cbc:	4544      	cmp	r4, r8
  403cbe:	d2f6      	bcs.n	403cae <__divdi3+0x266>
  403cc0:	3b01      	subs	r3, #1
  403cc2:	e7f4      	b.n	403cae <__divdi3+0x266>
  403cc4:	4603      	mov	r3, r0
  403cc6:	e7ea      	b.n	403c9e <__divdi3+0x256>
  403cc8:	4688      	mov	r8, r1
  403cca:	e7a5      	b.n	403c18 <__divdi3+0x1d0>
  403ccc:	46c8      	mov	r8, r9
  403cce:	e7d1      	b.n	403c74 <__divdi3+0x22c>
  403cd0:	4602      	mov	r2, r0
  403cd2:	e78c      	b.n	403bee <__divdi3+0x1a6>
  403cd4:	4613      	mov	r3, r2
  403cd6:	e70a      	b.n	403aee <__divdi3+0xa6>
  403cd8:	3b02      	subs	r3, #2
  403cda:	e757      	b.n	403b8c <__divdi3+0x144>
  403cdc:	f1a8 0802 	sub.w	r8, r8, #2
  403ce0:	442f      	add	r7, r5
  403ce2:	e73f      	b.n	403b64 <__divdi3+0x11c>

00403ce4 <__udivdi3>:
  403ce4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  403ce8:	2b00      	cmp	r3, #0
  403cea:	d144      	bne.n	403d76 <__udivdi3+0x92>
  403cec:	428a      	cmp	r2, r1
  403cee:	4615      	mov	r5, r2
  403cf0:	4604      	mov	r4, r0
  403cf2:	d94f      	bls.n	403d94 <__udivdi3+0xb0>
  403cf4:	fab2 f782 	clz	r7, r2
  403cf8:	460e      	mov	r6, r1
  403cfa:	b14f      	cbz	r7, 403d10 <__udivdi3+0x2c>
  403cfc:	f1c7 0320 	rsb	r3, r7, #32
  403d00:	40b9      	lsls	r1, r7
  403d02:	fa20 f603 	lsr.w	r6, r0, r3
  403d06:	fa02 f507 	lsl.w	r5, r2, r7
  403d0a:	430e      	orrs	r6, r1
  403d0c:	fa00 f407 	lsl.w	r4, r0, r7
  403d10:	ea4f 4e15 	mov.w	lr, r5, lsr #16
  403d14:	0c23      	lsrs	r3, r4, #16
  403d16:	fbb6 f0fe 	udiv	r0, r6, lr
  403d1a:	b2af      	uxth	r7, r5
  403d1c:	fb0e 6110 	mls	r1, lr, r0, r6
  403d20:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
  403d24:	fb07 f100 	mul.w	r1, r7, r0
  403d28:	4299      	cmp	r1, r3
  403d2a:	d909      	bls.n	403d40 <__udivdi3+0x5c>
  403d2c:	195b      	adds	r3, r3, r5
  403d2e:	f100 32ff 	add.w	r2, r0, #4294967295
  403d32:	f080 80ec 	bcs.w	403f0e <__udivdi3+0x22a>
  403d36:	4299      	cmp	r1, r3
  403d38:	f240 80e9 	bls.w	403f0e <__udivdi3+0x22a>
  403d3c:	3802      	subs	r0, #2
  403d3e:	442b      	add	r3, r5
  403d40:	1a5a      	subs	r2, r3, r1
  403d42:	b2a4      	uxth	r4, r4
  403d44:	fbb2 f3fe 	udiv	r3, r2, lr
  403d48:	fb0e 2213 	mls	r2, lr, r3, r2
  403d4c:	ea44 4202 	orr.w	r2, r4, r2, lsl #16
  403d50:	fb07 f703 	mul.w	r7, r7, r3
  403d54:	4297      	cmp	r7, r2
  403d56:	d908      	bls.n	403d6a <__udivdi3+0x86>
  403d58:	1952      	adds	r2, r2, r5
  403d5a:	f103 31ff 	add.w	r1, r3, #4294967295
  403d5e:	f080 80d8 	bcs.w	403f12 <__udivdi3+0x22e>
  403d62:	4297      	cmp	r7, r2
  403d64:	f240 80d5 	bls.w	403f12 <__udivdi3+0x22e>
  403d68:	3b02      	subs	r3, #2
  403d6a:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
  403d6e:	2600      	movs	r6, #0
  403d70:	4631      	mov	r1, r6
  403d72:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  403d76:	428b      	cmp	r3, r1
  403d78:	d847      	bhi.n	403e0a <__udivdi3+0x126>
  403d7a:	fab3 f683 	clz	r6, r3
  403d7e:	2e00      	cmp	r6, #0
  403d80:	d148      	bne.n	403e14 <__udivdi3+0x130>
  403d82:	428b      	cmp	r3, r1
  403d84:	d302      	bcc.n	403d8c <__udivdi3+0xa8>
  403d86:	4282      	cmp	r2, r0
  403d88:	f200 80cd 	bhi.w	403f26 <__udivdi3+0x242>
  403d8c:	2001      	movs	r0, #1
  403d8e:	4631      	mov	r1, r6
  403d90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  403d94:	b912      	cbnz	r2, 403d9c <__udivdi3+0xb8>
  403d96:	2501      	movs	r5, #1
  403d98:	fbb5 f5f2 	udiv	r5, r5, r2
  403d9c:	fab5 f885 	clz	r8, r5
  403da0:	f1b8 0f00 	cmp.w	r8, #0
  403da4:	d177      	bne.n	403e96 <__udivdi3+0x1b2>
  403da6:	1b4a      	subs	r2, r1, r5
  403da8:	ea4f 4e15 	mov.w	lr, r5, lsr #16
  403dac:	b2af      	uxth	r7, r5
  403dae:	2601      	movs	r6, #1
  403db0:	fbb2 f0fe 	udiv	r0, r2, lr
  403db4:	0c23      	lsrs	r3, r4, #16
  403db6:	fb0e 2110 	mls	r1, lr, r0, r2
  403dba:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
  403dbe:	fb07 f300 	mul.w	r3, r7, r0
  403dc2:	428b      	cmp	r3, r1
  403dc4:	d907      	bls.n	403dd6 <__udivdi3+0xf2>
  403dc6:	1949      	adds	r1, r1, r5
  403dc8:	f100 32ff 	add.w	r2, r0, #4294967295
  403dcc:	d202      	bcs.n	403dd4 <__udivdi3+0xf0>
  403dce:	428b      	cmp	r3, r1
  403dd0:	f200 80ba 	bhi.w	403f48 <__udivdi3+0x264>
  403dd4:	4610      	mov	r0, r2
  403dd6:	1ac9      	subs	r1, r1, r3
  403dd8:	b2a4      	uxth	r4, r4
  403dda:	fbb1 f3fe 	udiv	r3, r1, lr
  403dde:	fb0e 1113 	mls	r1, lr, r3, r1
  403de2:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
  403de6:	fb07 f703 	mul.w	r7, r7, r3
  403dea:	42a7      	cmp	r7, r4
  403dec:	d908      	bls.n	403e00 <__udivdi3+0x11c>
  403dee:	1964      	adds	r4, r4, r5
  403df0:	f103 32ff 	add.w	r2, r3, #4294967295
  403df4:	f080 808f 	bcs.w	403f16 <__udivdi3+0x232>
  403df8:	42a7      	cmp	r7, r4
  403dfa:	f240 808c 	bls.w	403f16 <__udivdi3+0x232>
  403dfe:	3b02      	subs	r3, #2
  403e00:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
  403e04:	4631      	mov	r1, r6
  403e06:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  403e0a:	2600      	movs	r6, #0
  403e0c:	4630      	mov	r0, r6
  403e0e:	4631      	mov	r1, r6
  403e10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  403e14:	f1c6 0420 	rsb	r4, r6, #32
  403e18:	fa22 f504 	lsr.w	r5, r2, r4
  403e1c:	40b3      	lsls	r3, r6
  403e1e:	432b      	orrs	r3, r5
  403e20:	fa20 fc04 	lsr.w	ip, r0, r4
  403e24:	fa01 f706 	lsl.w	r7, r1, r6
  403e28:	fa21 f504 	lsr.w	r5, r1, r4
  403e2c:	ea4f 4e13 	mov.w	lr, r3, lsr #16
  403e30:	ea4c 0707 	orr.w	r7, ip, r7
  403e34:	fbb5 f8fe 	udiv	r8, r5, lr
  403e38:	0c39      	lsrs	r1, r7, #16
  403e3a:	fb0e 5518 	mls	r5, lr, r8, r5
  403e3e:	fa1f fc83 	uxth.w	ip, r3
  403e42:	ea41 4505 	orr.w	r5, r1, r5, lsl #16
  403e46:	fb0c f108 	mul.w	r1, ip, r8
  403e4a:	42a9      	cmp	r1, r5
  403e4c:	fa02 f206 	lsl.w	r2, r2, r6
  403e50:	d904      	bls.n	403e5c <__udivdi3+0x178>
  403e52:	18ed      	adds	r5, r5, r3
  403e54:	f108 34ff 	add.w	r4, r8, #4294967295
  403e58:	d367      	bcc.n	403f2a <__udivdi3+0x246>
  403e5a:	46a0      	mov	r8, r4
  403e5c:	1a6d      	subs	r5, r5, r1
  403e5e:	b2bf      	uxth	r7, r7
  403e60:	fbb5 f4fe 	udiv	r4, r5, lr
  403e64:	fb0e 5514 	mls	r5, lr, r4, r5
  403e68:	ea47 4105 	orr.w	r1, r7, r5, lsl #16
  403e6c:	fb0c fc04 	mul.w	ip, ip, r4
  403e70:	458c      	cmp	ip, r1
  403e72:	d904      	bls.n	403e7e <__udivdi3+0x19a>
  403e74:	18c9      	adds	r1, r1, r3
  403e76:	f104 35ff 	add.w	r5, r4, #4294967295
  403e7a:	d35c      	bcc.n	403f36 <__udivdi3+0x252>
  403e7c:	462c      	mov	r4, r5
  403e7e:	ea44 4408 	orr.w	r4, r4, r8, lsl #16
  403e82:	ebcc 0101 	rsb	r1, ip, r1
  403e86:	fba4 2302 	umull	r2, r3, r4, r2
  403e8a:	4299      	cmp	r1, r3
  403e8c:	d348      	bcc.n	403f20 <__udivdi3+0x23c>
  403e8e:	d044      	beq.n	403f1a <__udivdi3+0x236>
  403e90:	4620      	mov	r0, r4
  403e92:	2600      	movs	r6, #0
  403e94:	e76c      	b.n	403d70 <__udivdi3+0x8c>
  403e96:	f1c8 0420 	rsb	r4, r8, #32
  403e9a:	fa01 f308 	lsl.w	r3, r1, r8
  403e9e:	fa05 f508 	lsl.w	r5, r5, r8
  403ea2:	fa20 f704 	lsr.w	r7, r0, r4
  403ea6:	40e1      	lsrs	r1, r4
  403ea8:	ea4f 4e15 	mov.w	lr, r5, lsr #16
  403eac:	431f      	orrs	r7, r3
  403eae:	fbb1 f6fe 	udiv	r6, r1, lr
  403eb2:	0c3a      	lsrs	r2, r7, #16
  403eb4:	fb0e 1116 	mls	r1, lr, r6, r1
  403eb8:	fa1f fc85 	uxth.w	ip, r5
  403ebc:	ea42 4301 	orr.w	r3, r2, r1, lsl #16
  403ec0:	fb0c f206 	mul.w	r2, ip, r6
  403ec4:	429a      	cmp	r2, r3
  403ec6:	fa00 f408 	lsl.w	r4, r0, r8
  403eca:	d907      	bls.n	403edc <__udivdi3+0x1f8>
  403ecc:	195b      	adds	r3, r3, r5
  403ece:	f106 31ff 	add.w	r1, r6, #4294967295
  403ed2:	d237      	bcs.n	403f44 <__udivdi3+0x260>
  403ed4:	429a      	cmp	r2, r3
  403ed6:	d935      	bls.n	403f44 <__udivdi3+0x260>
  403ed8:	3e02      	subs	r6, #2
  403eda:	442b      	add	r3, r5
  403edc:	1a9b      	subs	r3, r3, r2
  403ede:	b2bf      	uxth	r7, r7
  403ee0:	fbb3 f0fe 	udiv	r0, r3, lr
  403ee4:	fb0e 3310 	mls	r3, lr, r0, r3
  403ee8:	ea47 4303 	orr.w	r3, r7, r3, lsl #16
  403eec:	fb0c f100 	mul.w	r1, ip, r0
  403ef0:	4299      	cmp	r1, r3
  403ef2:	d907      	bls.n	403f04 <__udivdi3+0x220>
  403ef4:	195b      	adds	r3, r3, r5
  403ef6:	f100 32ff 	add.w	r2, r0, #4294967295
  403efa:	d221      	bcs.n	403f40 <__udivdi3+0x25c>
  403efc:	4299      	cmp	r1, r3
  403efe:	d91f      	bls.n	403f40 <__udivdi3+0x25c>
  403f00:	3802      	subs	r0, #2
  403f02:	442b      	add	r3, r5
  403f04:	1a5a      	subs	r2, r3, r1
  403f06:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
  403f0a:	4667      	mov	r7, ip
  403f0c:	e750      	b.n	403db0 <__udivdi3+0xcc>
  403f0e:	4610      	mov	r0, r2
  403f10:	e716      	b.n	403d40 <__udivdi3+0x5c>
  403f12:	460b      	mov	r3, r1
  403f14:	e729      	b.n	403d6a <__udivdi3+0x86>
  403f16:	4613      	mov	r3, r2
  403f18:	e772      	b.n	403e00 <__udivdi3+0x11c>
  403f1a:	40b0      	lsls	r0, r6
  403f1c:	4290      	cmp	r0, r2
  403f1e:	d2b7      	bcs.n	403e90 <__udivdi3+0x1ac>
  403f20:	1e60      	subs	r0, r4, #1
  403f22:	2600      	movs	r6, #0
  403f24:	e724      	b.n	403d70 <__udivdi3+0x8c>
  403f26:	4630      	mov	r0, r6
  403f28:	e722      	b.n	403d70 <__udivdi3+0x8c>
  403f2a:	42a9      	cmp	r1, r5
  403f2c:	d995      	bls.n	403e5a <__udivdi3+0x176>
  403f2e:	f1a8 0802 	sub.w	r8, r8, #2
  403f32:	441d      	add	r5, r3
  403f34:	e792      	b.n	403e5c <__udivdi3+0x178>
  403f36:	458c      	cmp	ip, r1
  403f38:	d9a0      	bls.n	403e7c <__udivdi3+0x198>
  403f3a:	3c02      	subs	r4, #2
  403f3c:	4419      	add	r1, r3
  403f3e:	e79e      	b.n	403e7e <__udivdi3+0x19a>
  403f40:	4610      	mov	r0, r2
  403f42:	e7df      	b.n	403f04 <__udivdi3+0x220>
  403f44:	460e      	mov	r6, r1
  403f46:	e7c9      	b.n	403edc <__udivdi3+0x1f8>
  403f48:	3802      	subs	r0, #2
  403f4a:	4429      	add	r1, r5
  403f4c:	e743      	b.n	403dd6 <__udivdi3+0xf2>
  403f4e:	bf00      	nop

00403f50 <gc_us_sine_data>:
  403f50:	0004 0013 ffff 0001 fffa 0007 000b 0020     .............. .
  403f60:	0039 0024 0019 000c ffe9 0006 fffc 001e     9.$.............
  403f70:	0022 0018 001f 0019 002c 0013 004f 004b     ".......,...O.K.
  403f80:	0019 002a 003a 0031 002c 0012 fffa 0014     ..*.:.1.,.......
  403f90:	fff4 001b 0003 000b ffff ffc8 ffd3 ffe7     ................
  403fa0:	ffea fff3 ffe4 fff8 ffe1 ffd3 ffed ffc3     ................
  403fb0:	ffcc ffaa ffc8 ffb6 ffbb fff1 fff4 ffef     ................
  403fc0:	ffd4 ffeb ffde ffee fff9 fffd 0026 001e     ............&...
  403fd0:	0006 0014 ffcf ffbe ffd5 ffd8 fff7 fff7     ................
  403fe0:	fffc fff7 000b ffee fff0 fff5 fff2 ffd9     ................
  403ff0:	ffd1 ffd9 ffec fff7 fff6 0010 000f 0017     ................
  404000:	0024 000c ffe6 fff3 fff4 000f 001d ffff     $...............
  404010:	0008 0007 ffd1 ffeb 000f 001a 0028 ffe1     ............(...
  404020:	0017 ffe8 ffd7 0032 ffd1 ffd1 fff6 ffd8     ......2.........
  404030:	ffe7 ffe7 ffcc ffca fff3 000a fff8 0011     ................
  404040:	000e ffd7 fffb ffe2 fff4 0028 0010 0036     ..........(...6.
  404050:	004d 0019 fff2 0014 0021 003f 002b 0012     M.......!.?.+...
  404060:	000c fff7 0001 000b 0012 ffef ffef ffef     ................
  404070:	fff7 fffe fff7 fff6 ffe1 001b ffd7 ffdb     ................
  404080:	fff6 fff9 0010 0023 0039 0026 002d 0026     ......#.9.&.-.&.
  404090:	001f 0002 fffe fff0 fff1 fff9 ffeb fff5     ................
  4040a0:	0001 ffdb ffe2 000d 000a 0016 0002 fffe     ................
  4040b0:	0026 0024 0025 0031 fffe ffef fff0 0009     &.$.%.1.........
  4040c0:	ffd6 ffd4 ffc7 ffb6 ffd7 fff9 ffb8 fff3     ................
  4040d0:	0034 ffd6 0031 ffe2 ffc0 001e 0017 001d     4...1...........
  4040e0:	0040 0023 0048 004c 0039 002d 001e 0043     @.#.H.L.9.-...C.
  4040f0:	0021 0027 fffc ffd1 0000 0025 ffe8 fff5     !.'.......%.....
  404100:	ffed 0029 0018 ffe0 0002 0036 0054 0021     ..).......6.T.!.
  404110:	0023 fff0 0029 003a 0014 001f ffbd ffdd     #...).:.........
  404120:	0033 0013 0045 ffc9 ffb1 ffff ffcb fffe     3...E...........
  404130:	ffe2 fff8 0006 ffdc ffe3 ff7b ffde 0055     ..........{...U.
  404140:	ffa1 005d fff9 ff9f 0072 fff7 0001 ffe5     ..].....r.......
  404150:	ffca 001c 000a 000b ffe4 ff9c 0021 0000     ............!...
  404160:	ffa2 ffb5 002b 001b ffff 0053 ff9f 0026     ....+.....S...&.
  404170:	008d ffa4 fff7 ffc9 ffbc 0062 001c ffaf     ..........b.....
  404180:	ffa1 ffce 0056 0021 0013 ff8c ffd2 0050     ....V.!.......P.
  404190:	0008 0059 ffc2 ffdb 0023 ffe1 0061 0074     ..Y.....#...a.t.
  4041a0:	ffa3 008f 0028 ffd6 0056 ffe8 ffce 0067     ....(...V.....g.
  4041b0:	0059 ffbb 0034 ffaa 000d ff81 007e 0066     Y...4.......~.f.
  4041c0:	ff64 003e ff8f ffba 014e 004a ff59 00ae     d.>.....N.J.Y...
  4041d0:	ffe6 0059 007d febf ffef 00ce ff6f 00f1     ..Y.}.......o...
  4041e0:	ffb2 ff0e 00ff ff7f 0042 000d ff64 00b3     ........B...d...
  4041f0:	009a 0057 ffbc fec0 ff68 00e6 0120 0010     ..W.....h... ...
  404200:	fee8 001a 0094 000a 0090 ff09 0032 0105     ............2...
  404210:	ff3c 0097 ff7b ffac 0057 ff04 00df 002a     <...{...W.....*.
  404220:	ffd3 0119 ffba ff74 00b5 ffbd 005c 0065     ......t.....\.e.
  404230:	fed1 ff4f feee ff16 003a 003b ffbf ff1d     ..O.....:.;.....
  404240:	fee3 0053 0005 00e4 ffd3 fe58 017f ffb4     ..S.......X.....
  404250:	ffdd 00db fe5e 00e7 0088 ff95 007b ff64     ....^.......{.d.
  404260:	ff44 ff37 018c fff5 feb1 0090 fe04 00c4     D.7.............
  404270:	0134 ff3a 017d ff68 ffc0 ffa6 001a 00e1     4.:.}.h.........
  404280:	fec7 fff7 0085 0002 00e9 ff11 fe75 00a3     ............u...
  404290:	0039 0053 00d0 ff72 ff82 00eb ff0f ffaa     9.S...r.........
  4042a0:	0018 ffe9 ff56 ffeb ff64 fff7 03cc ff0e     ....V...d.......
  4042b0:	fe8a ff94 ff55 016f 008e 004d fe88 fe7a     ....U.o...M...z.
  4042c0:	027a 000a fe85 ffeb fdec ffa5 0117 ff7d     z.............}.
  4042d0:	fd96 0041 0102 ff06 01ca ff36 fe6d 0111     ..A.......6.m...
  4042e0:	ff7a 0207 00b0 fd07 fe67 fedd 01e3 01db     z.......g.......
  4042f0:	fe30 ff29 fe88 00dd 01bd 0052 0121 ff14     0.).......R.!...
  404300:	021c 0149 ff68 ffbc fec6 00a4 01e5 016f     ..I.h.........o.
  404310:	fe41 fc87 0032 fffc 004a 0339 0032 ff04     A...2...J.9.2...
  404320:	fec4 ffdd 01a6 0134 ff07 ff4c 00e1 00b5     ......4...L.....
  404330:	0067 fe2c ff6b 013b ff82 0138 00df fc93     g.,.k.;...8.....
  404340:	ff49 0192 ff4c 0125 0120 fe39 0016 00a4     I...L.%. .9.....
  404350:	fe6d feae 007f fe8c 00fc 0314 fed2 febf     m...............
  404360:	fe6d 0070 024d 007b ffc7 ff9d fe59 ff75     m.p.M.{.....Y.u.
  404370:	0166 ff6b 0098 00b5 fc8a 00f6 0187 fc2d     f.k...........-.
  404380:	0195 0041 faee 0218 00d7 fdf8 0492 fffe     ..A.............
  404390:	fe7f 02b2 0193 0269 0070 fdb7 ff0d 01b9     ......i.p.......
  4043a0:	013d fe63 fd27 fc42 fee6 ff56 fbcd fc4e     =.c.'.B...V...N.
  4043b0:	feac 0157 03ee 07f2 073e 0381 03a2 03b1     ..W.....>.......
  4043c0:	03aa 0358 01c5 fe74 fa12 f748 f5ef f5b3     ..X...t...H.....
  4043d0:	f806 f96b f95c fc83 0145 0c56 11df 0b0c     ..k.\...E.V.....
  4043e0:	095d 0b63 0f1b 0e53 082c f6a2 e340 ea09     ].c...S.,...@...
  4043f0:	f259 f2f5 fd12 f8a4 ee3e f81a fff6 0fcd     Y.......>.......
  404400:	1d97 111a 0ff1 159f 12ee 1450 f679 d1c2     ..........P.y...
  404410:	e6be fcab fb8f 080c fa23 df22 e4cf f28d     ........#.".....
  404420:	0524 1e33 232f 112b 0c97 16fc 1437 1737     $.3./#+.....7.7.
  404430:	f539 c665 e10f 00bb fe20 0e12 0a1d e584     9.e..... .......
  404440:	de33 dc48 f487 244e 2359 1598 0fb4 0d2a     3.H...N$Y#....*.
  404450:	1150 184f 1160 d805 c765 f47b fd67 026e     P.O.`...e.{.g.n.
  404460:	1bf3 08ce e267 d92f db7e fc51 22b9 21ae     ....g./.~.Q..".!
  404470:	153b 0f5c 1237 1125 1750 029c c67b d36e     ;.\.7.%.P...{.n.
  404480:	00ce 00f9 0c4b 1fb6 011f db0e d6c9 db08     ....K...........
  404490:	0099 25c3 229e 146d 1315 15e3 146d 172e     ...%."m.....m...
  4044a0:	e70b be32 e8ae 0687 03a8 171e 1d30 f4cc     ..2.........0...
  4044b0:	d8d2 d524 d8cd 0609 2924 21b1 1621 1916     ..$.....$).!!...
  4044c0:	17f6 17e1 1398 d90e bdc0 eeaa 07ad 04b0     ................
  4044d0:	1981 1ea2 f469 cf46 d053 e525 0788 21eb     ....i.F.S.%....!
  4044e0:	24e3 1985 19b5 1ce1 1ed7 06e8 c89a c4a9     .$..............
  4044f0:	f40f 02ba 07e6 203b 1e62 f353 c838 c98b     ......; b.S.8...
  404500:	ef74 0c4d 1a9e 246e 2118 1ddf 20c4 2337     t.M...n$.!... 7#
  404510:	f55a bb56 cd14 f7eb fe20 0778 22d0 207a     Z.V..... .x.."z 
  404520:	f3b1 c7ac d095 f16a 0089 12f1 2783 2920     ......j......' )
  404530:	2493 2bbe 2574 e5a1 b42b cf42 f363 f637     .$.+t%..+.B.c.7.
  404540:	0650 29a3 27c7 f5e9 c938 d388 ed41 f6aa     P..).'..8...A...
  404550:	0f3e 2beb 31a8 2e1d 3849 20c7 d18e aead     >..+.1..I8. ....
  404560:	d249 ee14 f052 0be2 32ae 2974 ed4e c9e3     I...R....2t)N...
  404570:	ddf8 ec42 f1e4 1096 3288 37e7 3a87 3c35     ..B......2.7.:5<
  404580:	0428 baf3 b5ba d928 e73f f170 19d4 3707     (.....(.?.p....7
  404590:	19dd e327 d6ac e5ae e702 f415 1b6e 37ca     ..'.........n..7
  4045a0:	3d70 4640 2cae e099 b3c4 c43a dabb e112     p=@F.,....:.....
  4045b0:	fc75 29d5 3087 0576 e215 e2b0 e5f7 e7ea     u..).0v.........
  4045c0:	028f 28e5 3b6b 4843 410c 0277 c40b bd97     ...(k;CH.Aw.....
  4045d0:	d0fc d71c e781 14c7 2f05 15d1 f4ae ef5c     ........./....\.
  4045e0:	ecc4 e3b1 f2ae 1adc 34e8 425b 4433 16c5     .........4[B3D..
  4045f0:	d892 c1d6 cd3a d460 ddaf 015b 2503 1d95     ....:.`...[..%..
  404600:	fcba f445 f41b e7d2 eba7 0f19 2ebc 3ec6     ..E............>
  404610:	4495 2236 e794 c91b cbb0 d206 d93c f572     .D6"........<.r.
  404620:	1b76 1d21 00fb f90e fbad ed8b e852 06ae     v.!.........R...
  404630:	2a53 3b8b 4138 264a f2ac d1ad cced d0b7     S*.;8AJ&........
  404640:	d77f ef86 1038 1844 0526 fbaa fd70 f51e     ....8.D.&...p...
  404650:	ef59 052d 2508 3af3 4191 2066 ee7e d771     Y.-..%.:.Af ~.q.
  404660:	d4e8 d18d d4e9 f032 0e92 1007 0098 ff13     ......2.........
  404670:	0189 f601 f203 0a7e 2827 3bbb 3d40 17e8     ......~.'(.;@=..
  404680:	eb4f d92e d695 d236 d7b3 f361 0bd4 0a31     O.....6...a...1.
  404690:	ffb6 01c5 0246 f7fd f864 1126 2b62 3ea4     ....F...d.&.b+.>
  4046a0:	3758 09b2 e49e db8c d826 d0a0 db63 fa1e     X7......&...c...
  4046b0:	0aef 031a fe96 060c 02c8 f6b4 ff5e 1b16     ............^...
  4046c0:	3184 3eb8 2a76 fbbe e078 db9f d630 d11a     .1.>v*..x...0...
  4046d0:	e2db ffa0 0748 ff07 01b2 08a4 0010 f772     ....H.........r.
  4046e0:	0900 24cc 38d9 399d 15df ef2e e03a da9f     ...$.8.9....:...
  4046f0:	d218 d47f edf5 03bc 0134 fcd8 067b 0892     ........4...{...
  404700:	fc1e fd2c 1604 2f2b 3dc4 2b64 0008 e6f3     ..,...+/.=d+....
  404710:	e032 d76a cf93 de8a f7c3 00d0 fe18 03c3     2.j.............
  404720:	0ba7 04ac fb81 09da 23e2 383f 378e 12f7     .........#?8.7..
  404730:	ef27 e388 de16 d2cb d509 eb27 fbfa fd0c     '.........'.....
  404740:	ffdb 0aec 0b17 ffa4 03b6 1b3b 31aa 3b4d     ..........;..1M;
  404750:	2095 f761 e633 e17c d689 d220 e3be f649     . a.3.|... ...I.
  404760:	fa44 fcd0 0949 0d96 026b 0057 1589 2bb8     D...I...k.W....+
  404770:	3994 2b5f 02cb e9c3 e34a dab3 d222 ddc9     .9_+....J..."...
  404780:	ef61 f64f fb00 06b9 0e52 075d 0232 1271     a.O.....R.].2.q.
  404790:	2787 3869 30ef 0640 e6f6 e6ef dea4 d555     .'i8.0@.......U.
  4047a0:	dcf2 e9c8 faeb f7e7 01f8 117b 06b5 fac1     ..........{.....
  4047b0:	1158 3002 3d06 35af 013f d732 d32a d8fc     X..0.=.5?.2.*...
  4047c0:	df4f f563 0555 fd67 f44a f72e fb1b f95c     O.c.U.g.J.....\.
  4047d0:	fd63 19d8 38e9 4a77 4643 ff52 b815 ba8b     c....8wJCFR.....
  4047e0:	d3a7 e350 06e7 1b84 04f9 ef87 f076 f1ab     ..P.........v...
  4047f0:	f290 019c 283d 488d 566e 3b0d db54 a10e     ....=(.HnV.;T...
  404800:	bc11 da9a f715 2510 2031 f275 e0ac e72e     .......%1 u.....
  404810:	ef06 fcbb 1792 3b6b 5273 544a 0f02 a784     ......k;sRJT....
  404820:	a274 d49c ed7a 1bf6 3753 008d d5db dcff     t...z...S7......
  404830:	e4bc f766 15e4 2d89 456a 5878 39bb c921     ..f....-jExX.9!.
  404840:	8d79 c40c eca9 0cab 3c72 1aef d451 ceec     y.......r<..Q...
  404850:	de84 f164 1436 28d1 3950 4e1b 4acb f4d9     ..d.6..(P9.N.J..
  404860:	932b ac68 ea9d 0381 3615 3113 d6e3 c1ac     +.h......6.1....
  404870:	dbee e915 1332 2f91 2ee2 4187 5019 0fa6     ....2../...A.P..
  404880:	a09b a269 e77d febc 2b73 3b09 e4b8 b5ee     ..i.}...s+.;....
  404890:	d649 e8f3 0cef 337f 321c 3708 4daf 1ed5     I......3.2.7.M..
  4048a0:	a8ca 9bd9 e906 0136 256d 4481 e542 a664     ......6.m%.DB.d.
  4048b0:	da45 ec23 07de 3a4f 2ffa 2c47 4b61 252e     E.#...O:./G,aK.%
  4048c0:	b1e0 9fd8 ea95 ff8d 2187 3f81 e73c aa3b     .........!.?<.;.
  4048d0:	d280 eb31 0ff6 3bc5 3100 2bc2 44e4 2062     ..1....;.1.+.Db 
  4048e0:	afbc a237 f1ef 0735 2414 3c5a dcb3 a345     ..7...5..$Z<..E.
  4048f0:	d815 ee82 1177 40be 2e0b 2852 463f 1837     ....w..@..R(?F7.
  404900:	a811 aa9c f93e 06c9 2c71 3402 cdfa a831     ....>...q,.4..1.
  404910:	dac6 f341 1bd3 3f3d 2d0b 2c0b 3fcf 0576     ..A...=?.-.,.?v.
  404920:	9e97 bb09 0530 0e68 31d3 2a39 b761 a511     ....0.h..19*a...
  404930:	e868 fbc5 28da 42be 248c 2c1d 3c81 e611     h....(.B.$.,.<..
  404940:	980d d877 0e83 110f 3d35 08c4 9e9d c010     ..w.....5=......
  404950:	efc8 064b 3a1c 35ae 205b 3952 276a bd3e     ..K..:.5[ R9j'>.
  404960:	a47c f7c1 0e11 219b 3907 db63 9d3a d68c     |......!.9c.:...
  404970:	f6d6 191f 3f88 28bc 251b 3e1b 0218 9ea7     .....?.(.%.>....
  404980:	c4fd 0da9 1103 3303 1fce acae a704 f0fe     .......3........
  404990:	06e8 2ee8 3df1 1e31 2d5e 2e77 c61b 9e6e     .....=1.^-w...n.
  4049a0:	fc70 16f8 1c6b 38d0 da5f 98fd dbe0 fc8f     p...k..8_.......
  4049b0:	1ab5 3f67 26c1 21bc 3942 f545 9cde d504     ..g?.&.!B9E.....
  4049c0:	1772 14ae 3602 0f4b 9a7e b638 fa6c 0b27     r....6K.~.8.l.'.
  4049d0:	3d52 38df 16a5 3205 1492 a3b2 ba56 18c0     R=.8...2....V...
  4049e0:	14fc 2c02 255a ae4d a4ac f51b 08bf 29e0     ...,Z%M........)
  4049f0:	3dc0 1fb2 28fa 231b ba28 a563 0914 1ea1     .=...(.#(.c.....
  404a00:	2088 3423 ca0b 86b1 ebc2 13be 1ddd 447c     . #4..........|D
  404a10:	24aa 1c2b 2877 c528 99fb 097f 2591 1eda     .$+.w((......%..
  404a20:	2a75 d075 9d18 e0ad 0f36 20bf 3792 2b69     u*u.....6.. .7i+
  404a30:	2843 1eaa c678 a083 fc4c 27b3 25f3 301c     C(..x...L..'.%.0
  404a40:	cecf 9134 e27e 10e1 24cb 4107 297a 2508     ..4.~....$.Az).%
  404a50:	1b5d b280 a13d 0f73 295d 287e 2869 bdd4     ]...=.s.])~(i(..
  404a60:	9a5e f42b 10d4 2099 3e4f 28fd 26f3 0fe2     ^.+.... O>.(.&..
  404a70:	a872 ae30 18ed 292e 294c 1480 b608 adaf     r.0....)L)......
  404a80:	f933 19c4 2b80 37c4 2ec7 2a8b e058 9010     3....+.7...*X...
  404a90:	d8d2 2a90 2b0f 3375 f4eb 96fe c6f6 1039     ...*.+u3......9.
  404aa0:	1aae 3495 3481 26bc 1c85 c122 9671 fda5     ...4.4.&..".q...
  404ab0:	319e 2ca8 1e65 c816 a932 e919 1808 2e25     .1.,e...2.....%.
  404ac0:	35ed 2d27 2ac3 e0cc 8d6a d575 2ae8 2ee1     .5'-.*..j.u..*..
  404ad0:	31de f5c8 990d c895 1855 1d7b 306f 3777     .1......U.{.o0w7
  404ae0:	2c06 07d9 aa0b a782 0cc5 31d1 30ec 0cc3     .,.........1.0..
  404af0:	beea b961 f7b5 1e72 2e78 32bb 37dc 1948     ..a...r.x..2.7H.
  404b00:	aa71 9955 03a0 2b86 3289 3274 c2a4 9795     q.U....+.2t2....
  404b10:	f74d 2112 2669 36ef 3188 2005 c9e3 8fe8     M..!i&.6.1. ....
  404b20:	e9ae 2f2e 2c1a 1bea e658 b812 e254 1bc3     .../.,..X...T...
  404b30:	26c0 2eb7 3f0a 242b b28a 8e1e f765 2d8a     .&...?+$....e..-
  404b40:	2e4f 3266 da4b 95bb ed43 31e1 2273 286d     O.f2K...C..1s"m(
  404b50:	40d8 2498 ace5 8d84 fa84 2f66 24f6 1bf6     .@.$......f/.$..
  404b60:	e60d ba2f efa9 24c3 231d 2c7b 4593 10a9     ../....$.#{,.E..
  404b70:	9827 9cf3 0e1a 2c31 2de5 25eb beba a65a     '.....1,.-.%..Z.
  404b80:	125a 372c 17f3 2a37 4b6a fadb 8679 b732     Z.,7..7*jK..y.2.
  404b90:	1dd0 21e2 193d 137d d545 c9fd 121a 2b91     ...!=.}.E......+
  404ba0:	1be5 391a 3d47 c7fb 82a6 e56a 2a83 202d     ...9G=....j..*- 
  404bb0:	272b f1db a9af ea5e 3f5d 24c1 10ad 493a     +'....^.]?.$..:I
  404bc0:	243d 9213 9992 1aaf 28c7 0554 1551 ee8a     =$.......(T.Q...
  404bd0:	c597 07c3 3940 1b74 22c2 4115 da1d 8000     ....@9t..".A....
  404be0:	dec8 3308 1b41 122a fb57 b5b7 e1a0 42b7     ...3A.*.W......B
  404bf0:	3081 07c2 3b22 2805 9185 94bf 2249 309f     .0..";.(....I".0
  404c00:	f983 0341 f417 ddb0 0bf4 3194 215e 2266     ..A........1^!f"
  404c10:	229c c06e 9841 f596 32de 1cff fc52 e250     ."n.A....2..R.P.
  404c20:	d5a8 019c 3000 25d5 1d74 386b ee6d 889e     .....0.%t.k8m...
  404c30:	c78d 2d6f 1d0d f961 ff7f f30a f713 14de     ..o-..a.........
  404c40:	2346 2051 278b f455 a944 c890 1512 264d     F#Q .'U.D.....M&
  404c50:	0afb ec47 d7e1 f843 2647 246c 132c 2c5a     ..G...C.G&l$,.Z,
  404c60:	154a aca6 a81c 0dd6 292b fd50 f92e fc04     J.......+)P.....
  404c70:	fa35 0ce4 2036 2027 20d1 029d bd53 c008     5...6 ' . ..S...
  404c80:	00bb 2577 1770 eb44 d2b8 fd1c 2932 1f39     ..w%p.D.....2)9.
  404c90:	0fd0 2a27 1dea b9cb a44a 0005 2779 0739     ..'*....J...y'9.
  404ca0:	fb4e f7ea f953 093f 1bd4 2239 21b0 0b42     N...S.?...9".!B.
  404cb0:	cb8e b90d eede 1bff 16cc 0039 e5b9 eeff     ..........9.....
  404cc0:	1767 2234 146c 1f51 1e9a d15c a7e1 e86d     g.4"l.Q...\...m.
  404cd0:	250f 136e f4ec f18d 02e6 13a1 12d1 1474     .%n...........t.
  404ce0:	2428 14e6 ccaf b7b8 f1ff 1ddc 10ae f572     ($............r.
  404cf0:	eb50 fb90 16d9 1bf5 141d 1bbc 195e dba7     P...........^...
  404d00:	b1c4 e2da 1d39 1349 f853 f47f 0159 0f65     ....9.I.S...Y.e.
  404d10:	12a4 165b 1e8c 179b df37 b9e5 e01a 14ed     ..[.....7.......
  404d20:	1c38 fd0b e4d7 f4d3 1638 1bb9 1159 17d4     8.......8...Y...
  404d30:	222e f288 b3ff cbe0 0d68 1d1c 0443 f31e     ."......h...C...
  404d40:	fb70 0cfb 0ea7 1094 1a67 2091 fcd2 c45f     p.......g.. .._.
  404d50:	c8fe fe50 1f5d 0d04 eb1b eacd 0c93 1b43     ..P.].........C.
  404d60:	1053 0f33 2190 1519 d2bc b64d ea22 1deb     S.3..!....M."...
  404d70:	128c f41c f24d 08f9 1271 08a5 0cc3 1eea     ....M...q.......
  404d80:	1f1a ed4b bee6 d68a 094f 185f 05cc f06f     ..K.....O._...o.
  404d90:	f2f2 0af1 15da 0ffb 1074 2030 121e d511     ........t.0 ....
  404da0:	bae4 ea54 1dbe 1426 f0d8 ee5f 09fd 15c1     ..T...&..._.....
  404db0:	0839 070d 1ce5 25ac f693 bfd8 ce92 075c     9......%......\.
  404dc0:	1fb4 0500 e91f f1e1 0bcc 1146 0900 0df1     ..........F.....
  404dd0:	20e8 210b edc9 bde7 d4a8 0d41 1c47 ffb0     . .!......A.G...
  404de0:	ed1d fa61 0e98 0c54 050d 1055 21bb 1ba8     ..a...T...U..!..
  404df0:	eb4f c446 da80 0c6e 1b86 01ca eba5 f26f     O.F...n.......o.
  404e00:	0676 0d8d 0c6a 0ff5 1b31 1ef5 faba c9ef     v...j...1.......
  404e10:	ceea fe5c 1a4d 0abc f078 f29d 060e 0c7b     ..\.M...x.....{.
  404e20:	07b2 0b0f 163e 1e4c 08a3 db36 ce55 f052     ....>.L...6.U.R.
  404e30:	15ad 149c f3de e4ab f94e 0e69 0d4f 0609     ........N.i.O...
  404e40:	0b89 1d63 21ac fa39 cc1e d448 02b2 183e     ..c..!9...H...>.
  404e50:	04c1 ef3b f45f 040a 0703 0373 0825 13e0     ..;._.....s.%...
  404e60:	1ed1 15af f01d d480 e29b 03ef 10da 03b9     ................
  404e70:	f036 ef21 fd09 079d 095e 0941 0fa3 1c3a     6.!.....^.A...:.
  404e80:	1c83 fbe2 d740 db65 fef4 11df 04b9 ee9f     ....@.e.........
  404e90:	ec5f fc59 06ff 068f 0542 0b7d 1a7c 248f     _.Y.....B.}.|..$
  404ea0:	0f41 e50c d4ba ecea 08d4 08df f57a ebdc     A...........z...
  404eb0:	f71b 02f2 0245 ffbd 06de 161b 24cb 22c7     ....E........$."
  404ec0:	043d e07d da48 f1af 0506 015a f491 f010     =.}.H.....Z.....
  404ed0:	f680 fcd9 ff9a 04fe 0d18 169c 22df 2719     .............".'
  404ee0:	1117 e91f d448 e2d0 fc15 02a8 f6a8 efcf     ....H...........
  404ef0:	f8bc 0242 00fc fedc 0645 14af 2240 280f     ..B.....E...@".(
  404f00:	1cbf febf dfa2 d6e3 e4fb f720 fe3d f973     .......... .=.s.
  404f10:	f63f fbcc 0273 03a6 035a 07fe 13b2 204b     ?...s...Z.....K 
  404f20:	2618 1bcf ff36 df58 d325 df56 f21c fd5d     .&..6.X.%.V...].
  404f30:	ff7b ffc4 0189 01f6 006a 00c0 04f6 0d2e     {.......j.......
  404f40:	1775 1f33 1f72 1045 f2ca d841 d358 e372     u.3.r.E...A.X.r.
  404f50:	f94e 04c5 0549 0426 0487 0317 fdcc facc     N...I.&.........
  404f60:	0045 0d02 18ae 1e4b 1c22 0de0 f513 dd66     E.....K.".....f.
  404f70:	d56a e1e2 f7d8 0612 07de 057b 0384 00d6     j.........{.....
  404f80:	fb97 f6f1 fb23 082c 1648 1dce 1e47 169e     ....#.,.H...G...
  404f90:	0383 ea5b d809 d8d5 eb04 ff53 0959 0969     ..[.......S.Y.i.
  404fa0:	05c0 0151 fca3 f858 f82c 001c 0d78 18fc     ..Q...X.,...x...
  404fb0:	1d87 1c1b 130f ffd5 e876 d931 db9b ecac     ........v.1.....
  404fc0:	ff9d 09bc 0a3b 06f3 0315 fdb5 f85c f694     ....;.......\...
  404fd0:	fcbc 091c 14f2 1b1c 1ac3 156a 0701 f148     ..........j...H.
  404fe0:	de6a d9fe e754 fb96 0903 0b39 07a1 02ce     j...T.....9.....
  404ff0:	fe16 f96c f5d9 f785 00ea 0d6a 1741 1a8f     ..l.......j.A...
  405000:	178d 1037 012e ed34 debb de92 ecb4 fec5     ..7...4.........
  405010:	099f 09b0 043c ff63 fbeb f89b f6c8 f9bf     ....<.c.........
  405020:	029a 0e3a 167b 1817 1505 0fbf 0481 f2d9     ..:.{...........
  405030:	e348 df11 e99c fb1a 06e6 08a9 0519 0182     H...............
  405040:	ff30 fbf3 f7bc f712 fdd4 0a07 144a 17e5     0...........J...
  405050:	1501 1066 09be fc32 eb1c e08c e4c7 f4a0     ..f...2.........
  405060:	0390 0919 06c4 030a 0041 fd06 f84a f4fd     ........A...J...
  405070:	f7fa 0189 0d12 13ff 14ee 11c6 0dc4 08fc     ................
  405080:	fe65 ef1e e51e e830 f571 022c 0639 0303     e.....0.q.,.9...
  405090:	ff80 fe7f fd45 fa23 f75d f8e7 ff98 08a3     ....E.#.].......
  4050a0:	0fb6 122d 112e 0e95 0be4 05e2 f948 ec37     ..-.........H.7.
  4050b0:	e776 ede2 f9b0 0181 029b 00de 003a 0076     v...........:.v.
  4050c0:	fec4 fad6 f826 fa71 015a 0984 0f8d 117b     ....&.q.Z.....{.
  4050d0:	1060 0d6d 0a18 0448 f98e ee76 ea55 ef5e     `.m...H...v.U.^.
  4050e0:	f943 009b 01d4 00ca 0029 001e fe44 fa8b     C.......)...D...
  4050f0:	f7e9 fa4e 00e1 0802 0d2c 0ec7 0d6e 0b12     ..N.....,...n...
  405100:	091f 062a ff81 f5cf ee74 eee5 f5ad fd30     ..*.....t.....0.
  405110:	0043 ff71 feed ffb7 0011 fdf8 faf5 f9fb     C.q.............
  405120:	fcac 0217 07f8 0c31 0d37 0be3 09c7 07b1     ......1.7.......
  405130:	0511 fefc f672 f09d f0e4 f616 fbb8 fee4     ....r...........
  405140:	ff4e ff70 0013 ffab fdfa fb9a fb98 ff23     N.p...........#.
  405150:	056d 0bb3 0db2 0c18 0a30 0926 0728 0151     m.......0.&.(.Q.
  405160:	f907 f2a2 f177 f53e fa6e fdde fef6 ff75     ....w.>.n.....u.
  405170:	ffc7 ff75 fe0b fbda fb14 fcff 019f 07c0     ..u.............
  405180:	0bf5 0c00 0989 07a2 06ce 047e ff4c f98d     ..........~.L...
  405190:	f6aa f799 fa93 fca9 fd0c fcfb fd7e fe7e     ............~.~.
  4051a0:	fe06 fcea fc2a fcb5 fead 010e 0412 079e     ....*...........
  4051b0:	0965 08ca 06b4 0528 04be 034c 006f fc9d     e.....(...L.o...
  4051c0:	fa35 fa33 fbbf fcb9 fc1d fbab fcb2 fe24     5.3...........$.
  4051d0:	fe73 fd48 fc32 fc85 fe6e 0054 01d0 03d0     s.H.2...n.T.....
  4051e0:	063a 0794 051c 01a7 0083 015e 026a 011a     :.........^.j...
  4051f0:	fe72 fd3a fe69 0045 00e3 ff1e fcbe fbeb     r.:.i.E.........
  405200:	fd61 ff2a ff7f fe5e fd60 fe65 000d 0111     a.*...^.`.e.....
  405210:	00f9 00de 01f3 0386 03ec 0322 0209 0172     .........."...r.
  405220:	0130 0065 ff1b feac ff6c ff9d ff65 fef0     0.e.....l...e...
  405230:	ff3e ffc2 ff6b febf fe47 fe57 ff0f fffd     >...k...G.W.....
  405240:	0039 001f 0055 00ed 0151 0185 012c 00af     9...U...Q...,...
  405250:	0058 0059 0081 0054 ffd2 ff5e ff77 ff82     X.Y...T...^.w...
  405260:	ffca 000a 0028 002b ffcf ff74 ffa8 0017     ....(.+...t.....
  405270:	003e 002a 0032 00c3 0130 014e 00b0 ffbc     >.*.2...0.N.....
  405280:	ffb6 000e 0055 0022 ffa4 ff81 ffb4 0035     ....U.".......5.
  405290:	000a ff90 ff68 0038 00d7 0096 0018 ff7d     ....h.8.......}.
  4052a0:	ff72 ffd7 0049 0040 ffe9 ffca 0021 001f     r...I.@.....!...
  4052b0:	0020 ff2e fe86 fed9 ffd6 0075 0046 ffa2      .........u.F...
  4052c0:	fef8 ff23 ffb9 0090 0072 fffe ffe7 002c     ..#.....r.....,.
  4052d0:	007b 00b0 0062 ff94 ff4f ff6b ffa3 ffbc     {...b...O.k.....
  4052e0:	ffc1 ffe0 0030 001c 0003 0014 fff6 ffcd     ....0...........
  4052f0:	ffe3 0002 0039 006b 0029 ffde ffec 0067     ....9.k.).....g.
  405300:	00bd 0031 ff3e ff3f 001c 00b5 0087 ff98     ..1.>.?.........
  405310:	ff69 004f 00c2 0071 ffed ffb8 fff0 0050     i.O...q.......P.
  405320:	0021 ffaa ff92 0009 0034 fff4 ffb6 ffa1     !.......4.......
  405330:	0033 0056 ffd7 ffd4 0031 0049 0014 ff86     3.V.....1.I.....
  405340:	ff7c 000a 004d 0042 ffba ff82 ffbb ffda     |...M.B.........
  405350:	ffb5 ff81 ffe0 001e 008a 00c5 003a ffed     ............:...
  405360:	0006 ffc5 ffb8 ffa6 ffcd 0041 0042 ffd8     ..........A.B...
  405370:	ff89 ff6c ffe8 001c ffce ff59 ff7e 0015     ..l.......Y.~...
  405380:	006e 004c ffe5 ffba ffa8 ffdb 0001 ffff     n.L.............
  405390:	ffa8 ffa0 ffce 0027 fffa ffc5 ffbb ffe1     ......'.........
  4053a0:	0035 0012 fffc 000e fff9 ffef fff5 ffad     5...............
  4053b0:	ffe0 0017 001a 0028 0029 0011 ffce ff8a     ......(.).......
  4053c0:	ffb1 fff7 0033 003f 0014 ffad ffd8 002a     ....3.?.......*.
  4053d0:	0058 001f ffaf ff84 fff9 005a 004a 0010     X.........Z.J...
  4053e0:	ffd5 ffc3 ffa3 ffc7 ffd1 0002 ffcc fff5     ................
  4053f0:	ff8b 000d 0003 0058 ff80 ffc3 fe01 fced     ......X.........
  405400:	0066 ffbe fe52 fc04 fd2f fdfb fd69 fdb5     f...R.../...i...
  405410:	001d 0314 0418 03d0 0225 0028 fe88 fe73     ........%.(...s.
  405420:	ff4e ffc4 ff1e ff58 00c7 0175 ffed ffcb     N.....X...u.....
  405430:	ffce 00de 0163 0195 0148 0066 fff8 ffa6     ....c...H.f.....
  405440:	ffd8 ff62 ff48 ff70 0004 0031 00a3 0100     ..b.H.p...1.....
  405450:	00f6 0053 ffec 0081 0130 00ca fff8 ffaa     ..S.....0.......
  405460:	0083 00ac ffde ff42 ffa8 00be 0129 00e1     ......B.....)...
  405470:	0040 0065 00ae 00a8 001e ffbf ffd9 0082     @.e.............
  405480:	0092 0005 ffbb ffdf 001a 004d fffe ffd7     ..........M.....
  405490:	004b 0096 0081 0036 000e ffe0 0017 0059     K.....6.......Y.
  4054a0:	003c ffe0 ffcd fff5 0091 0082 000e ffd0     <...............
  4054b0:	ff7a ffd6 0019 fffc ff1c fef9 ffac 0072     z.............r.
  4054c0:	0067 ff9e ff5f ffb5 003e 004c fff5 ff4c     g..._...>.L...L.
  4054d0:	ffe0 0094 0074 fff3 ffac ffd0 000c 0018     ....t...........
  4054e0:	ff89 ff87 fffb 0036 0061 0094 0050 000e     ......6.a...P...
  4054f0:	fff8 0056 00d3 007f ffd8 ff9d 0056 00fa     ..V.........V...
  405500:	00b0 ffe2 ff83 0068 011e 00e4 0011 0000     ......h.........
  405510:	0093 00de 008a ffc8 ffd1 002e 0016 ffc0     ................
  405520:	ffe4 0035 0072 001c ffcb fffd 008d 0047     ..5.r.........G.
  405530:	ff76 ff8f 000c 005d ffbf feff ff31 ffd4     v.....].....1...
  405540:	000b ffa5 ff37 ffa0 005a 0047 ffb6 ff90     ....7...Z.G.....
  405550:	ffd8 000e ffaf ffb5 ffec fff1 ffd7 ffa5     ................
  405560:	ffe3 fffe fff1 ff87 ffa3 ffee 0043 ffe4     ............C...
  405570:	ff64 ffb2 0011 0031 ffc2 ffcd ffe4 0009     d.....1.........
  405580:	0012 0019 fff3 ffe1 ffd0 ffea 0016 000c     ................
  405590:	ffb5 ff85 000a 005a 0004 ff70 ff80 002e     ......Z...p.....
  4055a0:	0063 ffe1 ff92 ffc2 2d2d 4420 4341 5320     c.......-- DAC S
  4055b0:	6e69 7765 7661 2065 7845 6d61 6c70 2065     inewave Example 
  4055c0:	2d2d 0a0d 2d2d 5320 4d41 5334 452d 324b     --..-- SAM4S-EK2
  4055d0:	2d20 0d2d 2d0a 202d 6f43 706d 6c69 6465      --..-- Compiled
  4055e0:	203a 614d 2072 3532 3220 3130 2036 3731     : Mar 25 2016 17
  4055f0:	353a 3a32 3631 2d20 0d2d 0000 6172 2077     :52:16 --...raw 
  405600:	6164 6174 2820 6e69 3174 2936 3d20 6420     data (int16) = d
  405610:	6361 6420 7461 2061 7528 6e69 3174 2932     ac data (uint12)
  405620:	0a0d 0000 3d3d 3d3d 3d3d 3d3d 5320 6174     ....======== Sta
  405630:	7472 6465 4420 4341 6f20 7475 7570 2074     rted DAC output 
  405640:	3d3d 3d3d 3d3d 3d3d 000d 0000 0043 0000     ========....C...

00405650 <_global_impure_ptr>:
  405650:	0008 2000 000a 0000                         ... ....

00405658 <zeroes.6869>:
  405658:	3030 3030 3030 3030 3030 3030 3030 3030     0000000000000000
  405668:	3130 3332 3534 3736 3938 4241 4443 4645     0123456789ABCDEF
  405678:	0000 0000 3130 3332 3534 3736 3938 6261     ....0123456789ab
  405688:	6463 6665 0000 0000 6e28 6c75 296c 0000     cdef....(null)..

00405698 <blanks.6868>:
  405698:	2020 2020 2020 2020 2020 2020 2020 2020                     

004056a8 <_init>:
  4056a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4056aa:	bf00      	nop
  4056ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
  4056ae:	bc08      	pop	{r3}
  4056b0:	469e      	mov	lr, r3
  4056b2:	4770      	bx	lr

004056b4 <__init_array_start>:
  4056b4:	00401fd1 	.word	0x00401fd1

004056b8 <__frame_dummy_init_array_entry>:
  4056b8:	004000f1                                ..@.

004056bc <_fini>:
  4056bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4056be:	bf00      	nop
  4056c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
  4056c2:	bc08      	pop	{r3}
  4056c4:	469e      	mov	lr, r3
  4056c6:	4770      	bx	lr

004056c8 <__fini_array_start>:
  4056c8:	004000cd 	.word	0x004000cd
