
Standard_OV7740_sam4swpir.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00004068  00400000  00400000  00008000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000448  20000000  00404068  00010000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  2 .bss          0000a5a8  20000448  004044b0  00010448  2**3
                  ALLOC
  3 .stack        00003000  2000a9f0  0040ea58  00010448  2**0
                  ALLOC
  4 .ARM.attributes 0000002a  00000000  00000000  00010448  2**0
                  CONTENTS, READONLY
  5 .comment      0000005b  00000000  00000000  00010472  2**0
                  CONTENTS, READONLY
  6 .debug_info   0001030e  00000000  00000000  000104cd  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002bdb  00000000  00000000  000207db  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    000087c6  00000000  00000000  000233b6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000b90  00000000  00000000  0002bb7c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000b68  00000000  00000000  0002c70c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  000146f0  00000000  00000000  0002d274  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000e35d  00000000  00000000  00041964  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0005cbc5  00000000  00000000  0004fcc1  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00001dec  00000000  00000000  000ac888  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <_sfixed>:
  400000:	2000d9f0 	.word	0x2000d9f0
  400004:	00402655 	.word	0x00402655
  400008:	00402651 	.word	0x00402651
  40000c:	00402651 	.word	0x00402651
  400010:	00402651 	.word	0x00402651
  400014:	00402651 	.word	0x00402651
  400018:	00402651 	.word	0x00402651
	...
  40002c:	004001f9 	.word	0x004001f9
  400030:	00402651 	.word	0x00402651
  400034:	00000000 	.word	0x00000000
  400038:	00400275 	.word	0x00400275
  40003c:	004002b1 	.word	0x004002b1
  400040:	00402651 	.word	0x00402651
  400044:	00402651 	.word	0x00402651
  400048:	00402651 	.word	0x00402651
  40004c:	00402651 	.word	0x00402651
  400050:	00402651 	.word	0x00402651
  400054:	00402651 	.word	0x00402651
  400058:	00402651 	.word	0x00402651
  40005c:	00000000 	.word	0x00000000
  400060:	00402651 	.word	0x00402651
  400064:	00402651 	.word	0x00402651
  400068:	00000000 	.word	0x00000000
  40006c:	0040229d 	.word	0x0040229d
  400070:	004022b1 	.word	0x004022b1
  400074:	004022c5 	.word	0x004022c5
  400078:	00402651 	.word	0x00402651
  40007c:	00402651 	.word	0x00402651
	...
  400088:	00402651 	.word	0x00402651
  40008c:	00402651 	.word	0x00402651
  400090:	00402651 	.word	0x00402651
  400094:	00402651 	.word	0x00402651
  400098:	00402651 	.word	0x00402651
  40009c:	00402651 	.word	0x00402651
  4000a0:	00402651 	.word	0x00402651
  4000a4:	00402651 	.word	0x00402651
  4000a8:	00402651 	.word	0x00402651
  4000ac:	00402651 	.word	0x00402651
  4000b0:	00402651 	.word	0x00402651
  4000b4:	00402651 	.word	0x00402651
  4000b8:	00402651 	.word	0x00402651
  4000bc:	00402651 	.word	0x00402651
  4000c0:	00402651 	.word	0x00402651
  4000c4:	00402651 	.word	0x00402651
  4000c8:	00402651 	.word	0x00402651

004000cc <__do_global_dtors_aux>:
  4000cc:	b510      	push	{r4, lr}
  4000ce:	4c05      	ldr	r4, [pc, #20]	; (4000e4 <__do_global_dtors_aux+0x18>)
  4000d0:	7823      	ldrb	r3, [r4, #0]
  4000d2:	b933      	cbnz	r3, 4000e2 <__do_global_dtors_aux+0x16>
  4000d4:	4b04      	ldr	r3, [pc, #16]	; (4000e8 <__do_global_dtors_aux+0x1c>)
  4000d6:	b113      	cbz	r3, 4000de <__do_global_dtors_aux+0x12>
  4000d8:	4804      	ldr	r0, [pc, #16]	; (4000ec <__do_global_dtors_aux+0x20>)
  4000da:	f3af 8000 	nop.w
  4000de:	2301      	movs	r3, #1
  4000e0:	7023      	strb	r3, [r4, #0]
  4000e2:	bd10      	pop	{r4, pc}
  4000e4:	20000448 	.word	0x20000448
  4000e8:	00000000 	.word	0x00000000
  4000ec:	00404068 	.word	0x00404068

004000f0 <frame_dummy>:
  4000f0:	4b08      	ldr	r3, [pc, #32]	; (400114 <frame_dummy+0x24>)
  4000f2:	b510      	push	{r4, lr}
  4000f4:	b11b      	cbz	r3, 4000fe <frame_dummy+0xe>
  4000f6:	4808      	ldr	r0, [pc, #32]	; (400118 <frame_dummy+0x28>)
  4000f8:	4908      	ldr	r1, [pc, #32]	; (40011c <frame_dummy+0x2c>)
  4000fa:	f3af 8000 	nop.w
  4000fe:	4808      	ldr	r0, [pc, #32]	; (400120 <frame_dummy+0x30>)
  400100:	6803      	ldr	r3, [r0, #0]
  400102:	b903      	cbnz	r3, 400106 <frame_dummy+0x16>
  400104:	bd10      	pop	{r4, pc}
  400106:	4b07      	ldr	r3, [pc, #28]	; (400124 <frame_dummy+0x34>)
  400108:	2b00      	cmp	r3, #0
  40010a:	d0fb      	beq.n	400104 <frame_dummy+0x14>
  40010c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  400110:	4718      	bx	r3
  400112:	bf00      	nop
  400114:	00000000 	.word	0x00000000
  400118:	00404068 	.word	0x00404068
  40011c:	2000044c 	.word	0x2000044c
  400120:	00404068 	.word	0x00404068
  400124:	00000000 	.word	0x00000000

00400128 <vListInitialise>:
void vListInitialise( xList *pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( xListItem * ) &( pxList->xListEnd );
  400128:	f100 0308 	add.w	r3, r0, #8
  40012c:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
  40012e:	f04f 32ff 	mov.w	r2, #4294967295
  400132:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( xListItem * ) &( pxList->xListEnd );
  400134:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( xListItem * ) &( pxList->xListEnd );
  400136:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( unsigned portBASE_TYPE ) 0U;
  400138:	2300      	movs	r3, #0
  40013a:	6003      	str	r3, [r0, #0]
  40013c:	4770      	bx	lr
  40013e:	bf00      	nop

00400140 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( xListItem *pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
  400140:	2300      	movs	r3, #0
  400142:	6103      	str	r3, [r0, #16]
  400144:	4770      	bx	lr
  400146:	bf00      	nop

00400148 <vListInsertEnd>:

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	pvListGetOwnerOfNextEntry.  This means it has to be the item pointed to by
	the pxIndex member. */
	pxIndex = pxList->pxIndex;
  400148:	6843      	ldr	r3, [r0, #4]

	pxNewListItem->pxNext = pxIndex->pxNext;
  40014a:	685a      	ldr	r2, [r3, #4]
  40014c:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxPrevious = pxList->pxIndex;
  40014e:	6842      	ldr	r2, [r0, #4]
  400150:	608a      	str	r2, [r1, #8]
	pxIndex->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
  400152:	685a      	ldr	r2, [r3, #4]
  400154:	6091      	str	r1, [r2, #8]
	pxIndex->pxNext = ( volatile xListItem * ) pxNewListItem;
  400156:	6059      	str	r1, [r3, #4]
	pxList->pxIndex = ( volatile xListItem * ) pxNewListItem;
  400158:	6041      	str	r1, [r0, #4]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
  40015a:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
  40015c:	6803      	ldr	r3, [r0, #0]
  40015e:	3301      	adds	r3, #1
  400160:	6003      	str	r3, [r0, #0]
  400162:	4770      	bx	lr

00400164 <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( xList *pxList, xListItem *pxNewListItem )
{
  400164:	b410      	push	{r4}
volatile xListItem *pxIterator;
portTickType xValueOfInsertion;

	/* Insert the new list item into the list, sorted in ulListItem order. */
	xValueOfInsertion = pxNewListItem->xItemValue;
  400166:	680c      	ldr	r4, [r1, #0]
	are stored in ready lists (all of which have the same ulListItem value)
	get an equal share of the CPU.  However, if the xItemValue is the same as
	the back marker the iteration loop below will not end.  This means we need
	to guard against this by checking the value first and modifying the
	algorithm slightly if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
  400168:	f1b4 3fff 	cmp.w	r4, #4294967295
  40016c:	d101      	bne.n	400172 <vListInsert+0xe>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
  40016e:	6903      	ldr	r3, [r0, #16]
  400170:	e00a      	b.n	400188 <vListInsert+0x24>
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		See http://www.freertos.org/FAQHelp.html for more tips.
		**********************************************************************/

		for( pxIterator = ( xListItem * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext )
  400172:	f100 0308 	add.w	r3, r0, #8
  400176:	68c2      	ldr	r2, [r0, #12]
  400178:	6812      	ldr	r2, [r2, #0]
  40017a:	4294      	cmp	r4, r2
  40017c:	d304      	bcc.n	400188 <vListInsert+0x24>
  40017e:	685b      	ldr	r3, [r3, #4]
  400180:	685a      	ldr	r2, [r3, #4]
  400182:	6812      	ldr	r2, [r2, #0]
  400184:	4294      	cmp	r4, r2
  400186:	d2fa      	bcs.n	40017e <vListInsert+0x1a>
			/* There is nothing to do here, we are just iterating to the
			wanted insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
  400188:	685a      	ldr	r2, [r3, #4]
  40018a:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
  40018c:	6091      	str	r1, [r2, #8]
	pxNewListItem->pxPrevious = pxIterator;
  40018e:	608b      	str	r3, [r1, #8]
	pxIterator->pxNext = ( volatile xListItem * ) pxNewListItem;
  400190:	6059      	str	r1, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
  400192:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
  400194:	6803      	ldr	r3, [r0, #0]
  400196:	3301      	adds	r3, #1
  400198:	6003      	str	r3, [r0, #0]
}
  40019a:	f85d 4b04 	ldr.w	r4, [sp], #4
  40019e:	4770      	bx	lr

004001a0 <uxListRemove>:

unsigned portBASE_TYPE uxListRemove( xListItem *pxItemToRemove )
{
xList * pxList;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
  4001a0:	6843      	ldr	r3, [r0, #4]
  4001a2:	6882      	ldr	r2, [r0, #8]
  4001a4:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
  4001a6:	6883      	ldr	r3, [r0, #8]
  4001a8:	6842      	ldr	r2, [r0, #4]
  4001aa:	605a      	str	r2, [r3, #4]

	/* The list item knows which list it is in.  Obtain the list from the list
	item. */
	pxList = ( xList * ) pxItemToRemove->pvContainer;
  4001ac:	6903      	ldr	r3, [r0, #16]

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
  4001ae:	685a      	ldr	r2, [r3, #4]
  4001b0:	4282      	cmp	r2, r0
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
  4001b2:	bf04      	itt	eq
  4001b4:	6882      	ldreq	r2, [r0, #8]
  4001b6:	605a      	streq	r2, [r3, #4]
	}

	pxItemToRemove->pvContainer = NULL;
  4001b8:	2200      	movs	r2, #0
  4001ba:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
  4001bc:	681a      	ldr	r2, [r3, #0]
  4001be:	3a01      	subs	r2, #1
  4001c0:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
  4001c2:	6818      	ldr	r0, [r3, #0]
}
  4001c4:	4770      	bx	lr
  4001c6:	bf00      	nop

004001c8 <prvPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
  4001c8:	4803      	ldr	r0, [pc, #12]	; (4001d8 <prvPortStartFirstTask+0x10>)
  4001ca:	6800      	ldr	r0, [r0, #0]
  4001cc:	6800      	ldr	r0, [r0, #0]
  4001ce:	f380 8808 	msr	MSP, r0
  4001d2:	b662      	cpsie	i
  4001d4:	df00      	svc	0
  4001d6:	bf00      	nop
  4001d8:	e000ed08 	.word	0xe000ed08

004001dc <pxPortInitialiseStack>:
portSTACK_TYPE *pxPortInitialiseStack( portSTACK_TYPE *pxTopOfStack, pdTASK_CODE pxCode, void *pvParameters )
{
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
  4001dc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
  4001e0:	f840 3c04 	str.w	r3, [r0, #-4]
	pxTopOfStack--;
	*pxTopOfStack = ( portSTACK_TYPE ) pxCode;	/* PC */
  4001e4:	f840 1c08 	str.w	r1, [r0, #-8]
	pxTopOfStack--;
	*pxTopOfStack = 0;	/* LR */
  4001e8:	2300      	movs	r3, #0
  4001ea:	f840 3c0c 	str.w	r3, [r0, #-12]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
	*pxTopOfStack = ( portSTACK_TYPE ) pvParameters;	/* R0 */
  4001ee:	f840 2c20 	str.w	r2, [r0, #-32]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */

	return pxTopOfStack;
}
  4001f2:	3840      	subs	r0, #64	; 0x40
  4001f4:	4770      	bx	lr
  4001f6:	bf00      	nop

004001f8 <SVC_Handler>:
/*-----------------------------------------------------------*/

__attribute__ (( naked )) void SVC_Handler( void )
{
	__asm volatile (
  4001f8:	4b06      	ldr	r3, [pc, #24]	; (400214 <pxCurrentTCBConst2>)
  4001fa:	6819      	ldr	r1, [r3, #0]
  4001fc:	6808      	ldr	r0, [r1, #0]
  4001fe:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
  400202:	f380 8809 	msr	PSP, r0
  400206:	f04f 0000 	mov.w	r0, #0
  40020a:	f380 8811 	msr	BASEPRI, r0
  40020e:	f04e 0e0d 	orr.w	lr, lr, #13
  400212:	4770      	bx	lr

00400214 <pxCurrentTCBConst2>:
  400214:	2000a540 	.word	0x2000a540

00400218 <vPortYieldFromISR>:
/*-----------------------------------------------------------*/

void vPortYieldFromISR( void )
{
	/* Set a PendSV to request a context switch. */
	portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
  400218:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  40021c:	4b01      	ldr	r3, [pc, #4]	; (400224 <vPortYieldFromISR+0xc>)
  40021e:	601a      	str	r2, [r3, #0]
  400220:	4770      	bx	lr
  400222:	bf00      	nop
  400224:	e000ed04 	.word	0xe000ed04

00400228 <ulPortSetInterruptMask>:
}
/*-----------------------------------------------------------*/

__attribute__(( naked )) unsigned long ulPortSetInterruptMask( void )
{
	__asm volatile														\
  400228:	f3ef 8011 	mrs	r0, BASEPRI
  40022c:	f04f 01a0 	mov.w	r1, #160	; 0xa0
  400230:	f381 8811 	msr	BASEPRI, r1
  400234:	4770      	bx	lr
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return 0;
}
  400236:	2000      	movs	r0, #0

00400238 <vPortEnterCritical>:
	portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
  400238:	b508      	push	{r3, lr}
	portDISABLE_INTERRUPTS();
  40023a:	4b03      	ldr	r3, [pc, #12]	; (400248 <vPortEnterCritical+0x10>)
  40023c:	4798      	blx	r3
	uxCriticalNesting++;
  40023e:	4a03      	ldr	r2, [pc, #12]	; (40024c <vPortEnterCritical+0x14>)
  400240:	6813      	ldr	r3, [r2, #0]
  400242:	3301      	adds	r3, #1
  400244:	6013      	str	r3, [r2, #0]
  400246:	bd08      	pop	{r3, pc}
  400248:	00400229 	.word	0x00400229
  40024c:	2000000c 	.word	0x2000000c

00400250 <vPortClearInterruptMask>:
}
/*-----------------------------------------------------------*/

__attribute__(( naked )) void vPortClearInterruptMask( unsigned long ulNewMaskValue )
{
	__asm volatile													\
  400250:	f380 8811 	msr	BASEPRI, r0
  400254:	4770      	bx	lr
  400256:	bf00      	nop

00400258 <vPortExitCritical>:
	uxCriticalNesting++;
}
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
  400258:	b508      	push	{r3, lr}
	uxCriticalNesting--;
  40025a:	4a04      	ldr	r2, [pc, #16]	; (40026c <vPortExitCritical+0x14>)
  40025c:	6813      	ldr	r3, [r2, #0]
  40025e:	3b01      	subs	r3, #1
  400260:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
  400262:	b913      	cbnz	r3, 40026a <vPortExitCritical+0x12>
	{
		portENABLE_INTERRUPTS();
  400264:	2000      	movs	r0, #0
  400266:	4b02      	ldr	r3, [pc, #8]	; (400270 <vPortExitCritical+0x18>)
  400268:	4798      	blx	r3
  40026a:	bd08      	pop	{r3, pc}
  40026c:	2000000c 	.word	0x2000000c
  400270:	00400251 	.word	0x00400251

00400274 <PendSV_Handler>:

__attribute__(( naked )) void PendSV_Handler( void )
{
	/* This is a naked function. */

	__asm volatile
  400274:	f3ef 8009 	mrs	r0, PSP
  400278:	4b0c      	ldr	r3, [pc, #48]	; (4002ac <pxCurrentTCBConst>)
  40027a:	681a      	ldr	r2, [r3, #0]
  40027c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
  400280:	6010      	str	r0, [r2, #0]
  400282:	e92d 4008 	stmdb	sp!, {r3, lr}
  400286:	f04f 00a0 	mov.w	r0, #160	; 0xa0
  40028a:	f380 8811 	msr	BASEPRI, r0
  40028e:	f000 fe95 	bl	400fbc <vTaskSwitchContext>
  400292:	f04f 0000 	mov.w	r0, #0
  400296:	f380 8811 	msr	BASEPRI, r0
  40029a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  40029e:	6819      	ldr	r1, [r3, #0]
  4002a0:	6808      	ldr	r0, [r1, #0]
  4002a2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
  4002a6:	f380 8809 	msr	PSP, r0
  4002aa:	4770      	bx	lr

004002ac <pxCurrentTCBConst>:
  4002ac:	2000a540 	.word	0x2000a540

004002b0 <SysTick_Handler>:
	);
}
/*-----------------------------------------------------------*/

void SysTick_Handler( void )
{
  4002b0:	b508      	push	{r3, lr}
	/* If using preemption, also force a context switch. */
	#if configUSE_PREEMPTION == 1
		portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
  4002b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  4002b6:	4b05      	ldr	r3, [pc, #20]	; (4002cc <SysTick_Handler+0x1c>)
  4002b8:	601a      	str	r2, [r3, #0]
	to generate the tick interrupt. */
	#if configUSE_TICKLESS_IDLE == 1
		portNVIC_SYSTICK_LOAD_REG = ulTimerReloadValueForOneTick;
	#endif

	( void ) portSET_INTERRUPT_MASK_FROM_ISR();
  4002ba:	4b05      	ldr	r3, [pc, #20]	; (4002d0 <SysTick_Handler+0x20>)
  4002bc:	4798      	blx	r3
	{
		vTaskIncrementTick();
  4002be:	4b05      	ldr	r3, [pc, #20]	; (4002d4 <SysTick_Handler+0x24>)
  4002c0:	4798      	blx	r3
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( 0 );
  4002c2:	2000      	movs	r0, #0
  4002c4:	4b04      	ldr	r3, [pc, #16]	; (4002d8 <SysTick_Handler+0x28>)
  4002c6:	4798      	blx	r3
  4002c8:	bd08      	pop	{r3, pc}
  4002ca:	bf00      	nop
  4002cc:	e000ed04 	.word	0xe000ed04
  4002d0:	00400229 	.word	0x00400229
  4002d4:	00400ccd 	.word	0x00400ccd
  4002d8:	00400251 	.word	0x00400251

004002dc <vPortSetupTimerInterrupt>:
		ulStoppedTimerCompensation = 45UL / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;;
  4002dc:	4a03      	ldr	r2, [pc, #12]	; (4002ec <vPortSetupTimerInterrupt+0x10>)
  4002de:	4b04      	ldr	r3, [pc, #16]	; (4002f0 <vPortSetupTimerInterrupt+0x14>)
  4002e0:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CTRL_REG = portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT;
  4002e2:	2207      	movs	r2, #7
  4002e4:	3b04      	subs	r3, #4
  4002e6:	601a      	str	r2, [r3, #0]
  4002e8:	4770      	bx	lr
  4002ea:	bf00      	nop
  4002ec:	0001d4bf 	.word	0x0001d4bf
  4002f0:	e000e014 	.word	0xe000e014

004002f4 <xPortStartScheduler>:

/*
 * See header file for description.
 */
portBASE_TYPE xPortStartScheduler( void )
{
  4002f4:	b510      	push	{r4, lr}
	/* configMAX_SYSCALL_INTERRUPT_PRIORITY must not be set to 0.
	See http://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* Make PendSV, CallSV and SysTick the same priroity as the kernel. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
  4002f6:	4b09      	ldr	r3, [pc, #36]	; (40031c <xPortStartScheduler+0x28>)
  4002f8:	681a      	ldr	r2, [r3, #0]
  4002fa:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
  4002fe:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
  400300:	681a      	ldr	r2, [r3, #0]
  400302:	f042 4270 	orr.w	r2, r2, #4026531840	; 0xf0000000
  400306:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
  400308:	4b05      	ldr	r3, [pc, #20]	; (400320 <xPortStartScheduler+0x2c>)
  40030a:	4798      	blx	r3

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
  40030c:	2400      	movs	r4, #0
  40030e:	4b05      	ldr	r3, [pc, #20]	; (400324 <xPortStartScheduler+0x30>)
  400310:	601c      	str	r4, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
  400312:	4b05      	ldr	r3, [pc, #20]	; (400328 <xPortStartScheduler+0x34>)
  400314:	4798      	blx	r3

	/* Should not get here! */
	return 0;
}
  400316:	4620      	mov	r0, r4
  400318:	bd10      	pop	{r4, pc}
  40031a:	bf00      	nop
  40031c:	e000ed20 	.word	0xe000ed20
  400320:	004002dd 	.word	0x004002dd
  400324:	2000000c 	.word	0x2000000c
  400328:	004001c9 	.word	0x004001c9

0040032c <prvInsertBlockIntoFreeList>:
xBlockLink *pxIterator;
unsigned char *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
  40032c:	4a13      	ldr	r2, [pc, #76]	; (40037c <prvInsertBlockIntoFreeList+0x50>)
  40032e:	e000      	b.n	400332 <prvInsertBlockIntoFreeList+0x6>
  400330:	461a      	mov	r2, r3
  400332:	6813      	ldr	r3, [r2, #0]
  400334:	4283      	cmp	r3, r0
  400336:	d3fb      	bcc.n	400330 <prvInsertBlockIntoFreeList+0x4>
	xFreeBytesRemaining -= heapSTRUCT_SIZE;
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( xBlockLink *pxBlockToInsert )
{
  400338:	b430      	push	{r4, r5}
  40033a:	4611      	mov	r1, r2
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */	
	puc = ( unsigned char * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( unsigned char * ) pxBlockToInsert )
  40033c:	6854      	ldr	r4, [r2, #4]
  40033e:	1915      	adds	r5, r2, r4
  400340:	4285      	cmp	r5, r0
  400342:	d103      	bne.n	40034c <prvInsertBlockIntoFreeList+0x20>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
  400344:	6868      	ldr	r0, [r5, #4]
  400346:	4404      	add	r4, r0
  400348:	6054      	str	r4, [r2, #4]
  40034a:	4610      	mov	r0, r2
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( unsigned char * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( unsigned char * ) pxIterator->pxNextFreeBlock )
  40034c:	6842      	ldr	r2, [r0, #4]
  40034e:	1884      	adds	r4, r0, r2
  400350:	429c      	cmp	r4, r3
  400352:	d10c      	bne.n	40036e <prvInsertBlockIntoFreeList+0x42>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
  400354:	4b0a      	ldr	r3, [pc, #40]	; (400380 <prvInsertBlockIntoFreeList+0x54>)
  400356:	681b      	ldr	r3, [r3, #0]
  400358:	429c      	cmp	r4, r3
  40035a:	d006      	beq.n	40036a <prvInsertBlockIntoFreeList+0x3e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
  40035c:	6863      	ldr	r3, [r4, #4]
  40035e:	441a      	add	r2, r3
  400360:	6042      	str	r2, [r0, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
  400362:	680b      	ldr	r3, [r1, #0]
  400364:	681b      	ldr	r3, [r3, #0]
  400366:	6003      	str	r3, [r0, #0]
  400368:	e002      	b.n	400370 <prvInsertBlockIntoFreeList+0x44>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
  40036a:	6004      	str	r4, [r0, #0]
  40036c:	e000      	b.n	400370 <prvInsertBlockIntoFreeList+0x44>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;		
  40036e:	6003      	str	r3, [r0, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
  400370:	4281      	cmp	r1, r0
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
  400372:	bf18      	it	ne
  400374:	6008      	strne	r0, [r1, #0]
	}
}
  400376:	bc30      	pop	{r4, r5}
  400378:	4770      	bx	lr
  40037a:	bf00      	nop
  40037c:	2000a46c 	.word	0x2000a46c
  400380:	2000a468 	.word	0x2000a468

00400384 <pvPortMalloc>:
/* STATIC FUNCTIONS ARE DEFINED AS MACROS TO MINIMIZE THE FUNCTION CALL DEPTH. */

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
  400384:	b538      	push	{r3, r4, r5, lr}
  400386:	4604      	mov	r4, r0
xBlockLink *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;

	vTaskSuspendAll();
  400388:	4b2b      	ldr	r3, [pc, #172]	; (400438 <pvPortMalloc+0xb4>)
  40038a:	4798      	blx	r3
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
  40038c:	4b2b      	ldr	r3, [pc, #172]	; (40043c <pvPortMalloc+0xb8>)
  40038e:	681b      	ldr	r3, [r3, #0]
  400390:	b99b      	cbnz	r3, 4003ba <pvPortMalloc+0x36>
	/* Ensure the start of the heap is aligned. */
	configASSERT( ( ( ( unsigned long ) xHeap.ucHeap ) & ( ( unsigned long ) portBYTE_ALIGNMENT_MASK ) ) == 0UL );

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) xHeap.ucHeap;
  400392:	4a2b      	ldr	r2, [pc, #172]	; (400440 <pvPortMalloc+0xbc>)
  400394:	4b2b      	ldr	r3, [pc, #172]	; (400444 <pvPortMalloc+0xc0>)
  400396:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
  400398:	2100      	movs	r1, #0
  40039a:	6051      	str	r1, [r2, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	pucHeapEnd = xHeap.ucHeap + xTotalHeapSize;
	pucHeapEnd -= heapSTRUCT_SIZE;
	pxEnd = ( void * ) pucHeapEnd;
  40039c:	f649 72f0 	movw	r2, #40944	; 0x9ff0
  4003a0:	1898      	adds	r0, r3, r2
  4003a2:	4d26      	ldr	r5, [pc, #152]	; (40043c <pvPortMalloc+0xb8>)
  4003a4:	6028      	str	r0, [r5, #0]
	configASSERT( ( ( ( unsigned long ) pxEnd ) & ( ( unsigned long ) portBYTE_ALIGNMENT_MASK ) ) == 0UL );
	pxEnd->xBlockSize = 0;
  4003a6:	f649 75f4 	movw	r5, #40948	; 0x9ff4
  4003aa:	5159      	str	r1, [r3, r5]
	pxEnd->pxNextFreeBlock = NULL;
  4003ac:	5099      	str	r1, [r3, r2]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) xHeap.ucHeap;
	pxFirstFreeBlock->xBlockSize = xTotalHeapSize - heapSTRUCT_SIZE;
  4003ae:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
  4003b0:	6018      	str	r0, [r3, #0]

	/* The heap now contains pxEnd. */
	xFreeBytesRemaining -= heapSTRUCT_SIZE;
  4003b2:	4a25      	ldr	r2, [pc, #148]	; (400448 <pvPortMalloc+0xc4>)
  4003b4:	6813      	ldr	r3, [r2, #0]
  4003b6:	3b10      	subs	r3, #16
  4003b8:	6013      	str	r3, [r2, #0]
			prvHeapInit();
		}

		/* The wanted size is increased so it can contain a xBlockLink
		structure in addition to the requested amount of bytes. */
		if( xWantedSize > 0 )
  4003ba:	2c00      	cmp	r4, #0
  4003bc:	d037      	beq.n	40042e <pvPortMalloc+0xaa>
		{
			xWantedSize += heapSTRUCT_SIZE;
  4003be:	f104 0210 	add.w	r2, r4, #16

			/* Ensure that blocks are always aligned to the required number of 
			bytes. */
			if( xWantedSize & portBYTE_ALIGNMENT_MASK )
  4003c2:	f012 0f07 	tst.w	r2, #7
			{
				/* Byte alignment required. */
				xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
  4003c6:	bf1c      	itt	ne
  4003c8:	f022 0207 	bicne.w	r2, r2, #7
  4003cc:	3208      	addne	r2, #8
			}
		}

		if( ( xWantedSize > 0 ) && ( xWantedSize < xTotalHeapSize ) )
  4003ce:	1e51      	subs	r1, r2, #1
  4003d0:	f649 73fe 	movw	r3, #40958	; 0x9ffe
  4003d4:	4299      	cmp	r1, r3
  4003d6:	d827      	bhi.n	400428 <pvPortMalloc+0xa4>
		{
			/* Traverse the list from the start	(lowest address) block until one
			of adequate size is found. */
			pxPreviousBlock = &xStart;
			pxBlock = xStart.pxNextFreeBlock;
  4003d8:	4919      	ldr	r1, [pc, #100]	; (400440 <pvPortMalloc+0xbc>)
  4003da:	680c      	ldr	r4, [r1, #0]
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
  4003dc:	e001      	b.n	4003e2 <pvPortMalloc+0x5e>
  4003de:	4621      	mov	r1, r4
			{
				pxPreviousBlock = pxBlock;
				pxBlock = pxBlock->pxNextFreeBlock;
  4003e0:	461c      	mov	r4, r3
		{
			/* Traverse the list from the start	(lowest address) block until one
			of adequate size is found. */
			pxPreviousBlock = &xStart;
			pxBlock = xStart.pxNextFreeBlock;
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
  4003e2:	6863      	ldr	r3, [r4, #4]
  4003e4:	429a      	cmp	r2, r3
  4003e6:	d902      	bls.n	4003ee <pvPortMalloc+0x6a>
  4003e8:	6823      	ldr	r3, [r4, #0]
  4003ea:	2b00      	cmp	r3, #0
  4003ec:	d1f7      	bne.n	4003de <pvPortMalloc+0x5a>
				pxBlock = pxBlock->pxNextFreeBlock;
			}

			/* If the end marker was reached then a block of adequate size was
			not found. */
			if( pxBlock != pxEnd )
  4003ee:	4b13      	ldr	r3, [pc, #76]	; (40043c <pvPortMalloc+0xb8>)
  4003f0:	681b      	ldr	r3, [r3, #0]
  4003f2:	429c      	cmp	r4, r3
  4003f4:	d018      	beq.n	400428 <pvPortMalloc+0xa4>
			{
				/* Return the memory space - jumping over the xBlockLink structure
				at its start. */
				pvReturn = ( void * ) ( ( ( unsigned char * ) pxPreviousBlock->pxNextFreeBlock ) + heapSTRUCT_SIZE );
  4003f6:	680d      	ldr	r5, [r1, #0]
  4003f8:	3510      	adds	r5, #16

				/* This block is being returned for use so must be taken out of
				the	list of free blocks. */
				pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
  4003fa:	6823      	ldr	r3, [r4, #0]
  4003fc:	600b      	str	r3, [r1, #0]

				/* If the block is larger than required it can be split into two. */
				if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
  4003fe:	6863      	ldr	r3, [r4, #4]
  400400:	1a9b      	subs	r3, r3, r2
  400402:	2b20      	cmp	r3, #32
  400404:	d904      	bls.n	400410 <pvPortMalloc+0x8c>
				{
					/* This block is to be split into two.  Create a new block
					following the number of bytes requested. The void cast is
					used to prevent byte alignment warnings from the compiler. */
					pxNewBlockLink = ( void * ) ( ( ( unsigned char * ) pxBlock ) + xWantedSize );
  400406:	18a0      	adds	r0, r4, r2

					/* Calculate the sizes of two blocks split from the single
					block. */
					pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
  400408:	6043      	str	r3, [r0, #4]
					pxBlock->xBlockSize = xWantedSize;
  40040a:	6062      	str	r2, [r4, #4]

					/* Insert the new block into the list of free blocks. */
					prvInsertBlockIntoFreeList( ( pxNewBlockLink ) );
  40040c:	4b0f      	ldr	r3, [pc, #60]	; (40044c <pvPortMalloc+0xc8>)
  40040e:	4798      	blx	r3
				}

				xFreeBytesRemaining -= pxBlock->xBlockSize;
  400410:	4a0d      	ldr	r2, [pc, #52]	; (400448 <pvPortMalloc+0xc4>)
  400412:	6813      	ldr	r3, [r2, #0]
  400414:	6861      	ldr	r1, [r4, #4]
  400416:	1a5b      	subs	r3, r3, r1
  400418:	6013      	str	r3, [r2, #0]
			}
		}
	}
	xTaskResumeAll();
  40041a:	4b0d      	ldr	r3, [pc, #52]	; (400450 <pvPortMalloc+0xcc>)
  40041c:	4798      	blx	r3

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
  40041e:	b94d      	cbnz	r5, 400434 <pvPortMalloc+0xb0>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
  400420:	4b0c      	ldr	r3, [pc, #48]	; (400454 <pvPortMalloc+0xd0>)
  400422:	4798      	blx	r3
  400424:	2500      	movs	r5, #0
  400426:	e005      	b.n	400434 <pvPortMalloc+0xb0>

				xFreeBytesRemaining -= pxBlock->xBlockSize;
			}
		}
	}
	xTaskResumeAll();
  400428:	4b09      	ldr	r3, [pc, #36]	; (400450 <pvPortMalloc+0xcc>)
  40042a:	4798      	blx	r3
  40042c:	e7f8      	b.n	400420 <pvPortMalloc+0x9c>
  40042e:	4b08      	ldr	r3, [pc, #32]	; (400450 <pvPortMalloc+0xcc>)
  400430:	4798      	blx	r3
  400432:	e7f5      	b.n	400420 <pvPortMalloc+0x9c>
		}
	}
	#endif

	return pvReturn;
}
  400434:	4628      	mov	r0, r5
  400436:	bd38      	pop	{r3, r4, r5, pc}
  400438:	00400c9d 	.word	0x00400c9d
  40043c:	2000a468 	.word	0x2000a468
  400440:	2000a46c 	.word	0x2000a46c
  400444:	20000468 	.word	0x20000468
  400448:	20000010 	.word	0x20000010
  40044c:	0040032d 	.word	0x0040032d
  400450:	00400ded 	.word	0x00400ded
  400454:	00402901 	.word	0x00402901

00400458 <vPortFree>:
void vPortFree( void *pv )
{
unsigned char *puc = ( unsigned char * ) pv;
xBlockLink *pxLink;

	if( pv != NULL )
  400458:	b180      	cbz	r0, 40047c <vPortFree+0x24>
	return pvReturn;
}
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
  40045a:	b510      	push	{r4, lr}
  40045c:	4604      	mov	r4, r0
		puc -= heapSTRUCT_SIZE;

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;

		vTaskSuspendAll();
  40045e:	4b08      	ldr	r3, [pc, #32]	; (400480 <vPortFree+0x28>)
  400460:	4798      	blx	r3
		{
			/* Add this block to the list of free blocks. */
			xFreeBytesRemaining += pxLink->xBlockSize;
  400462:	4a08      	ldr	r2, [pc, #32]	; (400484 <vPortFree+0x2c>)
  400464:	6811      	ldr	r1, [r2, #0]
  400466:	f854 3c0c 	ldr.w	r3, [r4, #-12]
  40046a:	440b      	add	r3, r1
  40046c:	6013      	str	r3, [r2, #0]
			prvInsertBlockIntoFreeList( ( ( xBlockLink * ) pxLink ) );			
  40046e:	f1a4 0010 	sub.w	r0, r4, #16
  400472:	4b05      	ldr	r3, [pc, #20]	; (400488 <vPortFree+0x30>)
  400474:	4798      	blx	r3
		}
		xTaskResumeAll();
  400476:	4b05      	ldr	r3, [pc, #20]	; (40048c <vPortFree+0x34>)
  400478:	4798      	blx	r3
  40047a:	bd10      	pop	{r4, pc}
  40047c:	4770      	bx	lr
  40047e:	bf00      	nop
  400480:	00400c9d 	.word	0x00400c9d
  400484:	20000010 	.word	0x20000010
  400488:	0040032d 	.word	0x0040032d
  40048c:	00400ded 	.word	0x00400ded

00400490 <prvCopyDataToQueue>:

#endif
/*-----------------------------------------------------------*/

static void prvCopyDataToQueue( xQUEUE *pxQueue, const void *pvItemToQueue, portBASE_TYPE xPosition )
{
  400490:	b510      	push	{r4, lr}
  400492:	4604      	mov	r4, r0
	if( pxQueue->uxItemSize == ( unsigned portBASE_TYPE ) 0 )
  400494:	6c03      	ldr	r3, [r0, #64]	; 0x40
  400496:	b93b      	cbnz	r3, 4004a8 <prvCopyDataToQueue+0x18>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
  400498:	6803      	ldr	r3, [r0, #0]
  40049a:	bb1b      	cbnz	r3, 4004e4 <prvCopyDataToQueue+0x54>
			{
				/* The mutex is no longer being held. */
				vTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
  40049c:	6840      	ldr	r0, [r0, #4]
  40049e:	4b13      	ldr	r3, [pc, #76]	; (4004ec <prvCopyDataToQueue+0x5c>)
  4004a0:	4798      	blx	r3
				pxQueue->pxMutexHolder = NULL;
  4004a2:	2300      	movs	r3, #0
  4004a4:	6063      	str	r3, [r4, #4]
  4004a6:	e01d      	b.n	4004e4 <prvCopyDataToQueue+0x54>
			}
		}
		#endif
	}
	else if( xPosition == queueSEND_TO_BACK )
  4004a8:	b96a      	cbnz	r2, 4004c6 <prvCopyDataToQueue+0x36>
	{
		memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( unsigned ) pxQueue->uxItemSize );
  4004aa:	6880      	ldr	r0, [r0, #8]
  4004ac:	461a      	mov	r2, r3
  4004ae:	4b10      	ldr	r3, [pc, #64]	; (4004f0 <prvCopyDataToQueue+0x60>)
  4004b0:	4798      	blx	r3
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
  4004b2:	68a2      	ldr	r2, [r4, #8]
  4004b4:	6c23      	ldr	r3, [r4, #64]	; 0x40
  4004b6:	4413      	add	r3, r2
  4004b8:	60a3      	str	r3, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail )
  4004ba:	6862      	ldr	r2, [r4, #4]
  4004bc:	4293      	cmp	r3, r2
  4004be:	d311      	bcc.n	4004e4 <prvCopyDataToQueue+0x54>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
  4004c0:	6823      	ldr	r3, [r4, #0]
  4004c2:	60a3      	str	r3, [r4, #8]
  4004c4:	e00e      	b.n	4004e4 <prvCopyDataToQueue+0x54>
		}
	}
	else
	{
		memcpy( ( void * ) pxQueue->pcReadFrom, pvItemToQueue, ( unsigned ) pxQueue->uxItemSize );
  4004c6:	68c0      	ldr	r0, [r0, #12]
  4004c8:	461a      	mov	r2, r3
  4004ca:	4b09      	ldr	r3, [pc, #36]	; (4004f0 <prvCopyDataToQueue+0x60>)
  4004cc:	4798      	blx	r3
		pxQueue->pcReadFrom -= pxQueue->uxItemSize;
  4004ce:	6c23      	ldr	r3, [r4, #64]	; 0x40
  4004d0:	425b      	negs	r3, r3
  4004d2:	68e2      	ldr	r2, [r4, #12]
  4004d4:	441a      	add	r2, r3
  4004d6:	60e2      	str	r2, [r4, #12]
		if( pxQueue->pcReadFrom < pxQueue->pcHead )
  4004d8:	6821      	ldr	r1, [r4, #0]
  4004da:	428a      	cmp	r2, r1
  4004dc:	d202      	bcs.n	4004e4 <prvCopyDataToQueue+0x54>
		{
			pxQueue->pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
  4004de:	6862      	ldr	r2, [r4, #4]
  4004e0:	4413      	add	r3, r2
  4004e2:	60e3      	str	r3, [r4, #12]
		}
	}

	++( pxQueue->uxMessagesWaiting );
  4004e4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  4004e6:	3301      	adds	r3, #1
  4004e8:	63a3      	str	r3, [r4, #56]	; 0x38
  4004ea:	bd10      	pop	{r4, pc}
  4004ec:	004012ed 	.word	0x004012ed
  4004f0:	00402c55 	.word	0x00402c55

004004f4 <prvCopyDataFromQueue>:
}
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( xQUEUE * const pxQueue, const void *pvBuffer )
{
  4004f4:	b538      	push	{r3, r4, r5, lr}
  4004f6:	4603      	mov	r3, r0
	if( pxQueue->uxQueueType != queueQUEUE_IS_MUTEX )
  4004f8:	6800      	ldr	r0, [r0, #0]
  4004fa:	b158      	cbz	r0, 400514 <prvCopyDataFromQueue+0x20>
	{
		pxQueue->pcReadFrom += pxQueue->uxItemSize;
  4004fc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
  4004fe:	68dc      	ldr	r4, [r3, #12]
  400500:	4414      	add	r4, r2
  400502:	60dc      	str	r4, [r3, #12]
		if( pxQueue->pcReadFrom >= pxQueue->pcTail )
  400504:	685d      	ldr	r5, [r3, #4]
  400506:	42ac      	cmp	r4, r5
		{
			pxQueue->pcReadFrom = pxQueue->pcHead;
  400508:	bf28      	it	cs
  40050a:	60d8      	strcs	r0, [r3, #12]
  40050c:	4608      	mov	r0, r1
		}
		memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->pcReadFrom, ( unsigned ) pxQueue->uxItemSize );
  40050e:	68d9      	ldr	r1, [r3, #12]
  400510:	4b01      	ldr	r3, [pc, #4]	; (400518 <prvCopyDataFromQueue+0x24>)
  400512:	4798      	blx	r3
  400514:	bd38      	pop	{r3, r4, r5, pc}
  400516:	bf00      	nop
  400518:	00402c55 	.word	0x00402c55

0040051c <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( xQueueHandle pxQueue )
{
  40051c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40051e:	4604      	mov	r4, r0

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
  400520:	4b1e      	ldr	r3, [pc, #120]	; (40059c <prvUnlockQueue+0x80>)
  400522:	4798      	blx	r3
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
  400524:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  400526:	2b00      	cmp	r3, #0
  400528:	dd13      	ble.n	400552 <prvUnlockQueue+0x36>
		{
			/* Data was posted while the queue was locked.  Are any tasks
			blocked waiting for data to become available? */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  40052a:	6a63      	ldr	r3, [r4, #36]	; 0x24
  40052c:	b91b      	cbnz	r3, 400536 <prvUnlockQueue+0x1a>
  40052e:	e010      	b.n	400552 <prvUnlockQueue+0x36>
  400530:	6a63      	ldr	r3, [r4, #36]	; 0x24
  400532:	b923      	cbnz	r3, 40053e <prvUnlockQueue+0x22>
  400534:	e00d      	b.n	400552 <prvUnlockQueue+0x36>
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  400536:	f104 0624 	add.w	r6, r4, #36	; 0x24
  40053a:	4d19      	ldr	r5, [pc, #100]	; (4005a0 <prvUnlockQueue+0x84>)
				{
					/* The task waiting has a higher priority so record that a
					context	switch is required. */
					vTaskMissedYield();
  40053c:	4f19      	ldr	r7, [pc, #100]	; (4005a4 <prvUnlockQueue+0x88>)
			blocked waiting for data to become available? */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  40053e:	4630      	mov	r0, r6
  400540:	47a8      	blx	r5
  400542:	b100      	cbz	r0, 400546 <prvUnlockQueue+0x2a>
				{
					/* The task waiting has a higher priority so record that a
					context	switch is required. */
					vTaskMissedYield();
  400544:	47b8      	blx	r7
				}

				--( pxQueue->xTxLock );
  400546:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  400548:	3b01      	subs	r3, #1
  40054a:	64a3      	str	r3, [r4, #72]	; 0x48
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
  40054c:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  40054e:	2b00      	cmp	r3, #0
  400550:	dcee      	bgt.n	400530 <prvUnlockQueue+0x14>
			{
				break;
			}
		}

		pxQueue->xTxLock = queueUNLOCKED;
  400552:	f04f 33ff 	mov.w	r3, #4294967295
  400556:	64a3      	str	r3, [r4, #72]	; 0x48
	}
	taskEXIT_CRITICAL();
  400558:	4b13      	ldr	r3, [pc, #76]	; (4005a8 <prvUnlockQueue+0x8c>)
  40055a:	4798      	blx	r3

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
  40055c:	4b0f      	ldr	r3, [pc, #60]	; (40059c <prvUnlockQueue+0x80>)
  40055e:	4798      	blx	r3
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
  400560:	6c63      	ldr	r3, [r4, #68]	; 0x44
  400562:	2b00      	cmp	r3, #0
  400564:	dd13      	ble.n	40058e <prvUnlockQueue+0x72>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
  400566:	6923      	ldr	r3, [r4, #16]
  400568:	b91b      	cbnz	r3, 400572 <prvUnlockQueue+0x56>
  40056a:	e010      	b.n	40058e <prvUnlockQueue+0x72>
  40056c:	6923      	ldr	r3, [r4, #16]
  40056e:	b923      	cbnz	r3, 40057a <prvUnlockQueue+0x5e>
  400570:	e00d      	b.n	40058e <prvUnlockQueue+0x72>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
  400572:	f104 0610 	add.w	r6, r4, #16
  400576:	4d0a      	ldr	r5, [pc, #40]	; (4005a0 <prvUnlockQueue+0x84>)
				{
					vTaskMissedYield();
  400578:	4f0a      	ldr	r7, [pc, #40]	; (4005a4 <prvUnlockQueue+0x88>)
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
  40057a:	4630      	mov	r0, r6
  40057c:	47a8      	blx	r5
  40057e:	b100      	cbz	r0, 400582 <prvUnlockQueue+0x66>
				{
					vTaskMissedYield();
  400580:	47b8      	blx	r7
				}

				--( pxQueue->xRxLock );
  400582:	6c63      	ldr	r3, [r4, #68]	; 0x44
  400584:	3b01      	subs	r3, #1
  400586:	6463      	str	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
  400588:	6c63      	ldr	r3, [r4, #68]	; 0x44
  40058a:	2b00      	cmp	r3, #0
  40058c:	dcee      	bgt.n	40056c <prvUnlockQueue+0x50>
			{
				break;
			}
		}

		pxQueue->xRxLock = queueUNLOCKED;
  40058e:	f04f 33ff 	mov.w	r3, #4294967295
  400592:	6463      	str	r3, [r4, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
  400594:	4b04      	ldr	r3, [pc, #16]	; (4005a8 <prvUnlockQueue+0x8c>)
  400596:	4798      	blx	r3
  400598:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40059a:	bf00      	nop
  40059c:	00400239 	.word	0x00400239
  4005a0:	00401105 	.word	0x00401105
  4005a4:	00401235 	.word	0x00401235
  4005a8:	00400259 	.word	0x00400259

004005ac <xQueueGenericReset>:
/*-----------------------------------------------------------
 * PUBLIC QUEUE MANAGEMENT API documented in queue.h
 *----------------------------------------------------------*/

portBASE_TYPE xQueueGenericReset( xQueueHandle pxQueue, portBASE_TYPE xNewQueue )
{
  4005ac:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxQueue );
  4005ae:	b918      	cbnz	r0, 4005b8 <xQueueGenericReset+0xc>
  4005b0:	4b17      	ldr	r3, [pc, #92]	; (400610 <xQueueGenericReset+0x64>)
  4005b2:	4798      	blx	r3
  4005b4:	bf00      	nop
  4005b6:	e7fd      	b.n	4005b4 <xQueueGenericReset+0x8>
  4005b8:	460d      	mov	r5, r1
  4005ba:	4604      	mov	r4, r0

	taskENTER_CRITICAL();
  4005bc:	4b15      	ldr	r3, [pc, #84]	; (400614 <xQueueGenericReset+0x68>)
  4005be:	4798      	blx	r3
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
  4005c0:	6822      	ldr	r2, [r4, #0]
  4005c2:	6c21      	ldr	r1, [r4, #64]	; 0x40
  4005c4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  4005c6:	fb03 f301 	mul.w	r3, r3, r1
  4005ca:	18d0      	adds	r0, r2, r3
  4005cc:	6060      	str	r0, [r4, #4]
		pxQueue->uxMessagesWaiting = ( unsigned portBASE_TYPE ) 0U;
  4005ce:	2000      	movs	r0, #0
  4005d0:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
  4005d2:	60a2      	str	r2, [r4, #8]
		pxQueue->pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( unsigned portBASE_TYPE ) 1U ) * pxQueue->uxItemSize );
  4005d4:	1a5b      	subs	r3, r3, r1
  4005d6:	4413      	add	r3, r2
  4005d8:	60e3      	str	r3, [r4, #12]
		pxQueue->xRxLock = queueUNLOCKED;
  4005da:	f04f 33ff 	mov.w	r3, #4294967295
  4005de:	6463      	str	r3, [r4, #68]	; 0x44
		pxQueue->xTxLock = queueUNLOCKED;
  4005e0:	64a3      	str	r3, [r4, #72]	; 0x48

		if( xNewQueue == pdFALSE )
  4005e2:	b955      	cbnz	r5, 4005fa <xQueueGenericReset+0x4e>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to	write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
  4005e4:	6923      	ldr	r3, [r4, #16]
  4005e6:	b17b      	cbz	r3, 400608 <xQueueGenericReset+0x5c>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
  4005e8:	f104 0010 	add.w	r0, r4, #16
  4005ec:	4b0a      	ldr	r3, [pc, #40]	; (400618 <xQueueGenericReset+0x6c>)
  4005ee:	4798      	blx	r3
  4005f0:	2801      	cmp	r0, #1
  4005f2:	d109      	bne.n	400608 <xQueueGenericReset+0x5c>
				{
					portYIELD_WITHIN_API();
  4005f4:	4b09      	ldr	r3, [pc, #36]	; (40061c <xQueueGenericReset+0x70>)
  4005f6:	4798      	blx	r3
  4005f8:	e006      	b.n	400608 <xQueueGenericReset+0x5c>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
  4005fa:	f104 0010 	add.w	r0, r4, #16
  4005fe:	4d08      	ldr	r5, [pc, #32]	; (400620 <xQueueGenericReset+0x74>)
  400600:	47a8      	blx	r5
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
  400602:	f104 0024 	add.w	r0, r4, #36	; 0x24
  400606:	47a8      	blx	r5
		}
	}
	taskEXIT_CRITICAL();
  400608:	4b06      	ldr	r3, [pc, #24]	; (400624 <xQueueGenericReset+0x78>)
  40060a:	4798      	blx	r3

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
}
  40060c:	2001      	movs	r0, #1
  40060e:	bd38      	pop	{r3, r4, r5, pc}
  400610:	00400229 	.word	0x00400229
  400614:	00400239 	.word	0x00400239
  400618:	00401105 	.word	0x00401105
  40061c:	00400219 	.word	0x00400219
  400620:	00400129 	.word	0x00400129
  400624:	00400259 	.word	0x00400259

00400628 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

xQueueHandle xQueueGenericCreate( unsigned portBASE_TYPE uxQueueLength, unsigned portBASE_TYPE uxItemSize, unsigned char ucQueueType )
{
  400628:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	/* Allocate the new queue structure. */
	if( uxQueueLength > ( unsigned portBASE_TYPE ) 0 )
  40062a:	b1a0      	cbz	r0, 400656 <xQueueGenericCreate+0x2e>
  40062c:	460d      	mov	r5, r1
  40062e:	4617      	mov	r7, r2
  400630:	4606      	mov	r6, r0
	{
		pxNewQueue = ( xQUEUE * ) pvPortMalloc( sizeof( xQUEUE ) );
  400632:	2050      	movs	r0, #80	; 0x50
  400634:	4b0e      	ldr	r3, [pc, #56]	; (400670 <xQueueGenericCreate+0x48>)
  400636:	4798      	blx	r3
		if( pxNewQueue != NULL )
  400638:	4604      	mov	r4, r0
  40063a:	b160      	cbz	r0, 400656 <xQueueGenericCreate+0x2e>
		{
			/* Create the list of pointers to queue items.  The queue is one byte
			longer than asked for to make wrap checking easier/faster. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ) + ( size_t ) 1;
  40063c:	fb05 f006 	mul.w	r0, r5, r6

			pxNewQueue->pcHead = ( signed char * ) pvPortMalloc( xQueueSizeInBytes );
  400640:	3001      	adds	r0, #1
  400642:	4b0b      	ldr	r3, [pc, #44]	; (400670 <xQueueGenericCreate+0x48>)
  400644:	4798      	blx	r3
  400646:	6020      	str	r0, [r4, #0]
			if( pxNewQueue->pcHead != NULL )
  400648:	b940      	cbnz	r0, 40065c <xQueueGenericCreate+0x34>
				xReturn = pxNewQueue;
			}
			else
			{
				traceQUEUE_CREATE_FAILED( ucQueueType );
				vPortFree( pxNewQueue );
  40064a:	4620      	mov	r0, r4
  40064c:	4b09      	ldr	r3, [pc, #36]	; (400674 <xQueueGenericCreate+0x4c>)
  40064e:	4798      	blx	r3
  400650:	e001      	b.n	400656 <xQueueGenericCreate+0x2e>
			}
		}
	}

	configASSERT( xReturn );
  400652:	bf00      	nop
  400654:	e7fd      	b.n	400652 <xQueueGenericCreate+0x2a>
  400656:	4b08      	ldr	r3, [pc, #32]	; (400678 <xQueueGenericCreate+0x50>)
  400658:	4798      	blx	r3
  40065a:	e7fa      	b.n	400652 <xQueueGenericCreate+0x2a>
			pxNewQueue->pcHead = ( signed char * ) pvPortMalloc( xQueueSizeInBytes );
			if( pxNewQueue->pcHead != NULL )
			{
				/* Initialise the queue members as described above where the
				queue type is defined. */
				pxNewQueue->uxLength = uxQueueLength;
  40065c:	63e6      	str	r6, [r4, #60]	; 0x3c
				pxNewQueue->uxItemSize = uxItemSize;
  40065e:	6425      	str	r5, [r4, #64]	; 0x40
				xQueueGenericReset( pxNewQueue, pdTRUE );
  400660:	4620      	mov	r0, r4
  400662:	2101      	movs	r1, #1
  400664:	4b05      	ldr	r3, [pc, #20]	; (40067c <xQueueGenericCreate+0x54>)
  400666:	4798      	blx	r3
				#if ( configUSE_TRACE_FACILITY == 1 )
				{
					pxNewQueue->ucQueueType = ucQueueType;
  400668:	f884 704d 	strb.w	r7, [r4, #77]	; 0x4d
	}

	configASSERT( xReturn );

	return xReturn;
}
  40066c:	4620      	mov	r0, r4
  40066e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  400670:	00400385 	.word	0x00400385
  400674:	00400459 	.word	0x00400459
  400678:	00400229 	.word	0x00400229
  40067c:	004005ad 	.word	0x004005ad

00400680 <xQueueGenericSend>:

#endif /* configUSE_COUNTING_SEMAPHORES */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericSend( xQueueHandle pxQueue, const void * const pvItemToQueue, portTickType xTicksToWait, portBASE_TYPE xCopyPosition )
{
  400680:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  400684:	b085      	sub	sp, #20
  400686:	9201      	str	r2, [sp, #4]
  400688:	9300      	str	r3, [sp, #0]
signed portBASE_TYPE xEntryTimeSet = pdFALSE;
xTimeOutType xTimeOut;

	configASSERT( pxQueue );
  40068a:	b918      	cbnz	r0, 400694 <xQueueGenericSend+0x14>
  40068c:	4b38      	ldr	r3, [pc, #224]	; (400770 <xQueueGenericSend+0xf0>)
  40068e:	4798      	blx	r3
  400690:	bf00      	nop
  400692:	e7fd      	b.n	400690 <xQueueGenericSend+0x10>
  400694:	468a      	mov	sl, r1
  400696:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) ) );
  400698:	b929      	cbnz	r1, 4006a6 <xQueueGenericSend+0x26>
  40069a:	6c03      	ldr	r3, [r0, #64]	; 0x40
  40069c:	b12b      	cbz	r3, 4006aa <xQueueGenericSend+0x2a>
  40069e:	4b34      	ldr	r3, [pc, #208]	; (400770 <xQueueGenericSend+0xf0>)
  4006a0:	4798      	blx	r3
  4006a2:	bf00      	nop
  4006a4:	e7fd      	b.n	4006a2 <xQueueGenericSend+0x22>
  4006a6:	2700      	movs	r7, #0
  4006a8:	e000      	b.n	4006ac <xQueueGenericSend+0x2c>
  4006aa:	2700      	movs	r7, #0
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
  4006ac:	4e31      	ldr	r6, [pc, #196]	; (400774 <xQueueGenericSend+0xf4>)
				}
				else if( xEntryTimeSet == pdFALSE )
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
  4006ae:	f8df b0ec 	ldr.w	fp, [pc, #236]	; 40079c <xQueueGenericSend+0x11c>
					xEntryTimeSet = pdTRUE;
				}
			}
		}
		taskEXIT_CRITICAL();
  4006b2:	4d31      	ldr	r5, [pc, #196]	; (400778 <xQueueGenericSend+0xf8>)
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
  4006b4:	47b0      	blx	r6
		{
			/* Is there room on the queue now?  To be running we must be
			the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
  4006b6:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  4006b8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  4006ba:	429a      	cmp	r2, r3
  4006bc:	d212      	bcs.n	4006e4 <xQueueGenericSend+0x64>
			{
				traceQUEUE_SEND( pxQueue );
				prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
  4006be:	4620      	mov	r0, r4
  4006c0:	4651      	mov	r1, sl
  4006c2:	9a00      	ldr	r2, [sp, #0]
  4006c4:	4b2d      	ldr	r3, [pc, #180]	; (40077c <xQueueGenericSend+0xfc>)
  4006c6:	4798      	blx	r3

				/* If there was a task waiting for data to arrive on the
				queue then unblock it now. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  4006c8:	6a63      	ldr	r3, [r4, #36]	; 0x24
  4006ca:	b13b      	cbz	r3, 4006dc <xQueueGenericSend+0x5c>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) == pdTRUE )
  4006cc:	f104 0024 	add.w	r0, r4, #36	; 0x24
  4006d0:	4b2b      	ldr	r3, [pc, #172]	; (400780 <xQueueGenericSend+0x100>)
  4006d2:	4798      	blx	r3
  4006d4:	2801      	cmp	r0, #1
  4006d6:	d101      	bne.n	4006dc <xQueueGenericSend+0x5c>
					{
						/* The unblocked task has a priority higher than
						our own so yield immediately.  Yes it is ok to do
						this from within the critical section - the kernel
						takes care of that. */
						portYIELD_WITHIN_API();
  4006d8:	4b2a      	ldr	r3, [pc, #168]	; (400784 <xQueueGenericSend+0x104>)
  4006da:	4798      	blx	r3
					}
				}

				taskEXIT_CRITICAL();
  4006dc:	4b26      	ldr	r3, [pc, #152]	; (400778 <xQueueGenericSend+0xf8>)
  4006de:	4798      	blx	r3

				/* Return to the original privilege level before exiting the
				function. */
				return pdPASS;
  4006e0:	2001      	movs	r0, #1
  4006e2:	e042      	b.n	40076a <xQueueGenericSend+0xea>
			}
			else
			{
				if( xTicksToWait == ( portTickType ) 0 )
  4006e4:	9b01      	ldr	r3, [sp, #4]
  4006e6:	b91b      	cbnz	r3, 4006f0 <xQueueGenericSend+0x70>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
  4006e8:	4b23      	ldr	r3, [pc, #140]	; (400778 <xQueueGenericSend+0xf8>)
  4006ea:	4798      	blx	r3

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
  4006ec:	2000      	movs	r0, #0
  4006ee:	e03c      	b.n	40076a <xQueueGenericSend+0xea>
				}
				else if( xEntryTimeSet == pdFALSE )
  4006f0:	b917      	cbnz	r7, 4006f8 <xQueueGenericSend+0x78>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
  4006f2:	a802      	add	r0, sp, #8
  4006f4:	47d8      	blx	fp
					xEntryTimeSet = pdTRUE;
  4006f6:	2701      	movs	r7, #1
				}
			}
		}
		taskEXIT_CRITICAL();
  4006f8:	47a8      	blx	r5

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
  4006fa:	4b23      	ldr	r3, [pc, #140]	; (400788 <xQueueGenericSend+0x108>)
  4006fc:	4798      	blx	r3
		prvLockQueue( pxQueue );
  4006fe:	47b0      	blx	r6
  400700:	6c63      	ldr	r3, [r4, #68]	; 0x44
  400702:	f1b3 3fff 	cmp.w	r3, #4294967295
  400706:	bf04      	itt	eq
  400708:	2300      	moveq	r3, #0
  40070a:	6463      	streq	r3, [r4, #68]	; 0x44
  40070c:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  40070e:	f1b3 3fff 	cmp.w	r3, #4294967295
  400712:	bf04      	itt	eq
  400714:	2300      	moveq	r3, #0
  400716:	64a3      	streq	r3, [r4, #72]	; 0x48
  400718:	47a8      	blx	r5

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
  40071a:	a802      	add	r0, sp, #8
  40071c:	a901      	add	r1, sp, #4
  40071e:	4b1b      	ldr	r3, [pc, #108]	; (40078c <xQueueGenericSend+0x10c>)
  400720:	4798      	blx	r3
  400722:	b9e0      	cbnz	r0, 40075e <xQueueGenericSend+0xde>

static signed portBASE_TYPE prvIsQueueFull( const xQueueHandle pxQueue )
{
signed portBASE_TYPE xReturn;

	taskENTER_CRITICAL();
  400724:	47b0      	blx	r6
		xReturn = ( pxQueue->uxMessagesWaiting == pxQueue->uxLength );
  400726:	f8d4 9038 	ldr.w	r9, [r4, #56]	; 0x38
  40072a:	f8d4 803c 	ldr.w	r8, [r4, #60]	; 0x3c
	taskEXIT_CRITICAL();
  40072e:	47a8      	blx	r5
		prvLockQueue( pxQueue );

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
  400730:	45c1      	cmp	r9, r8
  400732:	d10e      	bne.n	400752 <xQueueGenericSend+0xd2>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
  400734:	f104 0010 	add.w	r0, r4, #16
  400738:	9901      	ldr	r1, [sp, #4]
  40073a:	4b15      	ldr	r3, [pc, #84]	; (400790 <xQueueGenericSend+0x110>)
  40073c:	4798      	blx	r3
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible	that interrupts occurring now
				remove this task from the event	list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
  40073e:	4620      	mov	r0, r4
  400740:	4b14      	ldr	r3, [pc, #80]	; (400794 <xQueueGenericSend+0x114>)
  400742:	4798      	blx	r3
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
  400744:	4b14      	ldr	r3, [pc, #80]	; (400798 <xQueueGenericSend+0x118>)
  400746:	4798      	blx	r3
  400748:	2800      	cmp	r0, #0
  40074a:	d1b3      	bne.n	4006b4 <xQueueGenericSend+0x34>
				{
					portYIELD_WITHIN_API();
  40074c:	4b0d      	ldr	r3, [pc, #52]	; (400784 <xQueueGenericSend+0x104>)
  40074e:	4798      	blx	r3
  400750:	e7b0      	b.n	4006b4 <xQueueGenericSend+0x34>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
  400752:	4620      	mov	r0, r4
  400754:	4b0f      	ldr	r3, [pc, #60]	; (400794 <xQueueGenericSend+0x114>)
  400756:	4798      	blx	r3
				( void ) xTaskResumeAll();
  400758:	4b0f      	ldr	r3, [pc, #60]	; (400798 <xQueueGenericSend+0x118>)
  40075a:	4798      	blx	r3
  40075c:	e7aa      	b.n	4006b4 <xQueueGenericSend+0x34>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
  40075e:	4620      	mov	r0, r4
  400760:	4b0c      	ldr	r3, [pc, #48]	; (400794 <xQueueGenericSend+0x114>)
  400762:	4798      	blx	r3
			( void ) xTaskResumeAll();
  400764:	4b0c      	ldr	r3, [pc, #48]	; (400798 <xQueueGenericSend+0x118>)
  400766:	4798      	blx	r3

			/* Return to the original privilege level before exiting the
			function. */
			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
  400768:	2000      	movs	r0, #0
		}
	}
}
  40076a:	b005      	add	sp, #20
  40076c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  400770:	00400229 	.word	0x00400229
  400774:	00400239 	.word	0x00400239
  400778:	00400259 	.word	0x00400259
  40077c:	00400491 	.word	0x00400491
  400780:	00401105 	.word	0x00401105
  400784:	00400219 	.word	0x00400219
  400788:	00400c9d 	.word	0x00400c9d
  40078c:	004011b1 	.word	0x004011b1
  400790:	00401061 	.word	0x00401061
  400794:	0040051d 	.word	0x0040051d
  400798:	00400ded 	.word	0x00400ded
  40079c:	00401189 	.word	0x00401189

004007a0 <xQueueGenericSendFromISR>:

#endif /* configUSE_ALTERNATIVE_API */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericSendFromISR( xQueueHandle pxQueue, const void * const pvItemToQueue, signed portBASE_TYPE *pxHigherPriorityTaskWoken, portBASE_TYPE xCopyPosition )
{
  4007a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
signed portBASE_TYPE xReturn;
unsigned portBASE_TYPE uxSavedInterruptStatus;

	configASSERT( pxQueue );
  4007a4:	b918      	cbnz	r0, 4007ae <xQueueGenericSendFromISR+0xe>
  4007a6:	4b1e      	ldr	r3, [pc, #120]	; (400820 <xQueueGenericSendFromISR+0x80>)
  4007a8:	4798      	blx	r3
  4007aa:	bf00      	nop
  4007ac:	e7fd      	b.n	4007aa <xQueueGenericSendFromISR+0xa>
  4007ae:	460e      	mov	r6, r1
  4007b0:	4615      	mov	r5, r2
  4007b2:	4698      	mov	r8, r3
  4007b4:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) ) );
  4007b6:	b929      	cbnz	r1, 4007c4 <xQueueGenericSendFromISR+0x24>
  4007b8:	6c03      	ldr	r3, [r0, #64]	; 0x40
  4007ba:	b11b      	cbz	r3, 4007c4 <xQueueGenericSendFromISR+0x24>
  4007bc:	4b18      	ldr	r3, [pc, #96]	; (400820 <xQueueGenericSendFromISR+0x80>)
  4007be:	4798      	blx	r3
  4007c0:	bf00      	nop
  4007c2:	e7fd      	b.n	4007c0 <xQueueGenericSendFromISR+0x20>
	/* Similar to xQueueGenericSend, except we don't block if there is no room
	in the queue.  Also we don't directly wake a task that was blocked on a
	queue read, instead we return a flag to say whether a context switch is
	required or not (i.e. has a task with a higher priority than us been woken
	by this	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
  4007c4:	4b16      	ldr	r3, [pc, #88]	; (400820 <xQueueGenericSendFromISR+0x80>)
  4007c6:	4798      	blx	r3
  4007c8:	4607      	mov	r7, r0
	{
		if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
  4007ca:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  4007cc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  4007ce:	429a      	cmp	r2, r3
  4007d0:	d218      	bcs.n	400804 <xQueueGenericSendFromISR+0x64>
		{
			traceQUEUE_SEND_FROM_ISR( pxQueue );

			prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
  4007d2:	4620      	mov	r0, r4
  4007d4:	4631      	mov	r1, r6
  4007d6:	4642      	mov	r2, r8
  4007d8:	4b12      	ldr	r3, [pc, #72]	; (400824 <xQueueGenericSendFromISR+0x84>)
  4007da:	4798      	blx	r3

			/* If the queue is locked we do not alter the event list.  This will
			be done when the queue is unlocked later. */
			if( pxQueue->xTxLock == queueUNLOCKED )
  4007dc:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  4007de:	f1b3 3fff 	cmp.w	r3, #4294967295
  4007e2:	d10a      	bne.n	4007fa <xQueueGenericSendFromISR+0x5a>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  4007e4:	6a63      	ldr	r3, [r4, #36]	; 0x24
  4007e6:	b17b      	cbz	r3, 400808 <xQueueGenericSendFromISR+0x68>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  4007e8:	f104 0024 	add.w	r0, r4, #36	; 0x24
  4007ec:	4b0e      	ldr	r3, [pc, #56]	; (400828 <xQueueGenericSendFromISR+0x88>)
  4007ee:	4798      	blx	r3
  4007f0:	b160      	cbz	r0, 40080c <xQueueGenericSendFromISR+0x6c>
					{
						/* The task waiting has a higher priority so record that a
						context	switch is required. */
						if( pxHigherPriorityTaskWoken != NULL )
  4007f2:	b16d      	cbz	r5, 400810 <xQueueGenericSendFromISR+0x70>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
  4007f4:	2401      	movs	r4, #1
  4007f6:	602c      	str	r4, [r5, #0]
  4007f8:	e00b      	b.n	400812 <xQueueGenericSendFromISR+0x72>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				++( pxQueue->xTxLock );
  4007fa:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  4007fc:	3301      	adds	r3, #1
  4007fe:	64a3      	str	r3, [r4, #72]	; 0x48
			}

			xReturn = pdPASS;
  400800:	2401      	movs	r4, #1
  400802:	e006      	b.n	400812 <xQueueGenericSendFromISR+0x72>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
  400804:	2400      	movs	r4, #0
  400806:	e004      	b.n	400812 <xQueueGenericSendFromISR+0x72>
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				++( pxQueue->xTxLock );
			}

			xReturn = pdPASS;
  400808:	2401      	movs	r4, #1
  40080a:	e002      	b.n	400812 <xQueueGenericSendFromISR+0x72>
  40080c:	2401      	movs	r4, #1
  40080e:	e000      	b.n	400812 <xQueueGenericSendFromISR+0x72>
  400810:	2401      	movs	r4, #1
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
  400812:	4638      	mov	r0, r7
  400814:	4b05      	ldr	r3, [pc, #20]	; (40082c <xQueueGenericSendFromISR+0x8c>)
  400816:	4798      	blx	r3

	return xReturn;
}
  400818:	4620      	mov	r0, r4
  40081a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40081e:	bf00      	nop
  400820:	00400229 	.word	0x00400229
  400824:	00400491 	.word	0x00400491
  400828:	00401105 	.word	0x00401105
  40082c:	00400251 	.word	0x00400251

00400830 <xQueueGenericReceive>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericReceive( xQueueHandle pxQueue, void * const pvBuffer, portTickType xTicksToWait, portBASE_TYPE xJustPeeking )
{
  400830:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  400834:	b085      	sub	sp, #20
  400836:	9201      	str	r2, [sp, #4]
signed portBASE_TYPE xEntryTimeSet = pdFALSE;
xTimeOutType xTimeOut;
signed char *pcOriginalReadPosition;

	configASSERT( pxQueue );
  400838:	b918      	cbnz	r0, 400842 <xQueueGenericReceive+0x12>
  40083a:	4b46      	ldr	r3, [pc, #280]	; (400954 <xQueueGenericReceive+0x124>)
  40083c:	4798      	blx	r3
  40083e:	bf00      	nop
  400840:	e7fd      	b.n	40083e <xQueueGenericReceive+0xe>
  400842:	4689      	mov	r9, r1
  400844:	469a      	mov	sl, r3
  400846:	4604      	mov	r4, r0
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) ) );
  400848:	b929      	cbnz	r1, 400856 <xQueueGenericReceive+0x26>
  40084a:	6c03      	ldr	r3, [r0, #64]	; 0x40
  40084c:	b12b      	cbz	r3, 40085a <xQueueGenericReceive+0x2a>
  40084e:	4b41      	ldr	r3, [pc, #260]	; (400954 <xQueueGenericReceive+0x124>)
  400850:	4798      	blx	r3
  400852:	bf00      	nop
  400854:	e7fd      	b.n	400852 <xQueueGenericReceive+0x22>
  400856:	2700      	movs	r7, #0
  400858:	e000      	b.n	40085c <xQueueGenericReceive+0x2c>
  40085a:	2700      	movs	r7, #0
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
  40085c:	4e3e      	ldr	r6, [pc, #248]	; (400958 <xQueueGenericReceive+0x128>)
				}
				else if( xEntryTimeSet == pdFALSE )
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
  40085e:	f8df b128 	ldr.w	fp, [pc, #296]	; 400988 <xQueueGenericReceive+0x158>
					xEntryTimeSet = pdTRUE;
				}
			}
		}
		taskEXIT_CRITICAL();
  400862:	4d3e      	ldr	r5, [pc, #248]	; (40095c <xQueueGenericReceive+0x12c>)
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
  400864:	47b0      	blx	r6
		{
			/* Is there data in the queue now?  To be running we must be
			the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting > ( unsigned portBASE_TYPE ) 0 )
  400866:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  400868:	b343      	cbz	r3, 4008bc <xQueueGenericReceive+0x8c>
			{
				/* Remember our read position in case we are just peeking. */
				pcOriginalReadPosition = pxQueue->pcReadFrom;
  40086a:	68e5      	ldr	r5, [r4, #12]

				prvCopyDataFromQueue( pxQueue, pvBuffer );
  40086c:	4620      	mov	r0, r4
  40086e:	4649      	mov	r1, r9
  400870:	4b3b      	ldr	r3, [pc, #236]	; (400960 <xQueueGenericReceive+0x130>)
  400872:	4798      	blx	r3

				if( xJustPeeking == pdFALSE )
  400874:	f1ba 0f00 	cmp.w	sl, #0
  400878:	d112      	bne.n	4008a0 <xQueueGenericReceive+0x70>
				{
					traceQUEUE_RECEIVE( pxQueue );

					/* We are actually removing data. */
					--( pxQueue->uxMessagesWaiting );
  40087a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  40087c:	3b01      	subs	r3, #1
  40087e:	63a3      	str	r3, [r4, #56]	; 0x38

					#if ( configUSE_MUTEXES == 1 )
					{
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
  400880:	6823      	ldr	r3, [r4, #0]
  400882:	b913      	cbnz	r3, 40088a <xQueueGenericReceive+0x5a>
						{
							/* Record the information required to implement
							priority inheritance should it become necessary. */
							pxQueue->pxMutexHolder = xTaskGetCurrentTaskHandle();
  400884:	4b37      	ldr	r3, [pc, #220]	; (400964 <xQueueGenericReceive+0x134>)
  400886:	4798      	blx	r3
  400888:	6060      	str	r0, [r4, #4]
						}
					}
					#endif

					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
  40088a:	6923      	ldr	r3, [r4, #16]
  40088c:	b193      	cbz	r3, 4008b4 <xQueueGenericReceive+0x84>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
  40088e:	f104 0010 	add.w	r0, r4, #16
  400892:	4b35      	ldr	r3, [pc, #212]	; (400968 <xQueueGenericReceive+0x138>)
  400894:	4798      	blx	r3
  400896:	2801      	cmp	r0, #1
  400898:	d10c      	bne.n	4008b4 <xQueueGenericReceive+0x84>
						{
							portYIELD_WITHIN_API();
  40089a:	4b34      	ldr	r3, [pc, #208]	; (40096c <xQueueGenericReceive+0x13c>)
  40089c:	4798      	blx	r3
  40089e:	e009      	b.n	4008b4 <xQueueGenericReceive+0x84>
				{
					traceQUEUE_PEEK( pxQueue );

					/* We are not removing the data, so reset our read
					pointer. */
					pxQueue->pcReadFrom = pcOriginalReadPosition;
  4008a0:	60e5      	str	r5, [r4, #12]

					/* The data is being left in the queue, so see if there are
					any other tasks waiting for the data. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  4008a2:	6a63      	ldr	r3, [r4, #36]	; 0x24
  4008a4:	b133      	cbz	r3, 4008b4 <xQueueGenericReceive+0x84>
					{
						/* Tasks that are removed from the event list will get added to
						the pending ready list as the scheduler is still suspended. */
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  4008a6:	f104 0024 	add.w	r0, r4, #36	; 0x24
  4008aa:	4b2f      	ldr	r3, [pc, #188]	; (400968 <xQueueGenericReceive+0x138>)
  4008ac:	4798      	blx	r3
  4008ae:	b108      	cbz	r0, 4008b4 <xQueueGenericReceive+0x84>
						{
							/* The task waiting has a higher priority than this task. */
							portYIELD_WITHIN_API();
  4008b0:	4b2e      	ldr	r3, [pc, #184]	; (40096c <xQueueGenericReceive+0x13c>)
  4008b2:	4798      	blx	r3
						}
					}
				}

				taskEXIT_CRITICAL();
  4008b4:	4b29      	ldr	r3, [pc, #164]	; (40095c <xQueueGenericReceive+0x12c>)
  4008b6:	4798      	blx	r3
				return pdPASS;
  4008b8:	2001      	movs	r0, #1
  4008ba:	e048      	b.n	40094e <xQueueGenericReceive+0x11e>
			}
			else
			{
				if( xTicksToWait == ( portTickType ) 0 )
  4008bc:	9b01      	ldr	r3, [sp, #4]
  4008be:	b91b      	cbnz	r3, 4008c8 <xQueueGenericReceive+0x98>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
  4008c0:	4b26      	ldr	r3, [pc, #152]	; (40095c <xQueueGenericReceive+0x12c>)
  4008c2:	4798      	blx	r3
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
  4008c4:	2000      	movs	r0, #0
  4008c6:	e042      	b.n	40094e <xQueueGenericReceive+0x11e>
				}
				else if( xEntryTimeSet == pdFALSE )
  4008c8:	b917      	cbnz	r7, 4008d0 <xQueueGenericReceive+0xa0>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
  4008ca:	a802      	add	r0, sp, #8
  4008cc:	47d8      	blx	fp
					xEntryTimeSet = pdTRUE;
  4008ce:	2701      	movs	r7, #1
				}
			}
		}
		taskEXIT_CRITICAL();
  4008d0:	47a8      	blx	r5

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
  4008d2:	4b27      	ldr	r3, [pc, #156]	; (400970 <xQueueGenericReceive+0x140>)
  4008d4:	4798      	blx	r3
		prvLockQueue( pxQueue );
  4008d6:	47b0      	blx	r6
  4008d8:	6c63      	ldr	r3, [r4, #68]	; 0x44
  4008da:	f1b3 3fff 	cmp.w	r3, #4294967295
  4008de:	bf04      	itt	eq
  4008e0:	2300      	moveq	r3, #0
  4008e2:	6463      	streq	r3, [r4, #68]	; 0x44
  4008e4:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  4008e6:	f1b3 3fff 	cmp.w	r3, #4294967295
  4008ea:	bf04      	itt	eq
  4008ec:	2300      	moveq	r3, #0
  4008ee:	64a3      	streq	r3, [r4, #72]	; 0x48
  4008f0:	47a8      	blx	r5

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
  4008f2:	a802      	add	r0, sp, #8
  4008f4:	a901      	add	r1, sp, #4
  4008f6:	4b1f      	ldr	r3, [pc, #124]	; (400974 <xQueueGenericReceive+0x144>)
  4008f8:	4798      	blx	r3
  4008fa:	bb10      	cbnz	r0, 400942 <xQueueGenericReceive+0x112>

static signed portBASE_TYPE prvIsQueueEmpty( const xQueueHandle pxQueue )
{
signed portBASE_TYPE xReturn;

	taskENTER_CRITICAL();
  4008fc:	47b0      	blx	r6
		xReturn = ( pxQueue->uxMessagesWaiting == ( unsigned portBASE_TYPE ) 0 );
  4008fe:	f8d4 8038 	ldr.w	r8, [r4, #56]	; 0x38
	taskEXIT_CRITICAL();
  400902:	47a8      	blx	r5
		prvLockQueue( pxQueue );

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
		{
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
  400904:	f1b8 0f00 	cmp.w	r8, #0
  400908:	d115      	bne.n	400936 <xQueueGenericReceive+0x106>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
  40090a:	6823      	ldr	r3, [r4, #0]
  40090c:	b923      	cbnz	r3, 400918 <xQueueGenericReceive+0xe8>
					{
						portENTER_CRITICAL();
  40090e:	47b0      	blx	r6
						{
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
  400910:	6860      	ldr	r0, [r4, #4]
  400912:	4b19      	ldr	r3, [pc, #100]	; (400978 <xQueueGenericReceive+0x148>)
  400914:	4798      	blx	r3
						}
						portEXIT_CRITICAL();
  400916:	47a8      	blx	r5
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
  400918:	f104 0024 	add.w	r0, r4, #36	; 0x24
  40091c:	9901      	ldr	r1, [sp, #4]
  40091e:	4b17      	ldr	r3, [pc, #92]	; (40097c <xQueueGenericReceive+0x14c>)
  400920:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
  400922:	4620      	mov	r0, r4
  400924:	4b16      	ldr	r3, [pc, #88]	; (400980 <xQueueGenericReceive+0x150>)
  400926:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
  400928:	4b16      	ldr	r3, [pc, #88]	; (400984 <xQueueGenericReceive+0x154>)
  40092a:	4798      	blx	r3
  40092c:	2800      	cmp	r0, #0
  40092e:	d199      	bne.n	400864 <xQueueGenericReceive+0x34>
				{
					portYIELD_WITHIN_API();
  400930:	4b0e      	ldr	r3, [pc, #56]	; (40096c <xQueueGenericReceive+0x13c>)
  400932:	4798      	blx	r3
  400934:	e796      	b.n	400864 <xQueueGenericReceive+0x34>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
  400936:	4620      	mov	r0, r4
  400938:	4b11      	ldr	r3, [pc, #68]	; (400980 <xQueueGenericReceive+0x150>)
  40093a:	4798      	blx	r3
				( void ) xTaskResumeAll();
  40093c:	4b11      	ldr	r3, [pc, #68]	; (400984 <xQueueGenericReceive+0x154>)
  40093e:	4798      	blx	r3
  400940:	e790      	b.n	400864 <xQueueGenericReceive+0x34>
			}
		}
		else
		{
			prvUnlockQueue( pxQueue );
  400942:	4620      	mov	r0, r4
  400944:	4b0e      	ldr	r3, [pc, #56]	; (400980 <xQueueGenericReceive+0x150>)
  400946:	4798      	blx	r3
			( void ) xTaskResumeAll();
  400948:	4b0e      	ldr	r3, [pc, #56]	; (400984 <xQueueGenericReceive+0x154>)
  40094a:	4798      	blx	r3
			traceQUEUE_RECEIVE_FAILED( pxQueue );
			return errQUEUE_EMPTY;
  40094c:	2000      	movs	r0, #0
		}
	}
}
  40094e:	b005      	add	sp, #20
  400950:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  400954:	00400229 	.word	0x00400229
  400958:	00400239 	.word	0x00400239
  40095c:	00400259 	.word	0x00400259
  400960:	004004f5 	.word	0x004004f5
  400964:	00401241 	.word	0x00401241
  400968:	00401105 	.word	0x00401105
  40096c:	00400219 	.word	0x00400219
  400970:	00400c9d 	.word	0x00400c9d
  400974:	004011b1 	.word	0x004011b1
  400978:	0040126d 	.word	0x0040126d
  40097c:	00401061 	.word	0x00401061
  400980:	0040051d 	.word	0x0040051d
  400984:	00400ded 	.word	0x00400ded
  400988:	00401189 	.word	0x00401189

0040098c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if configUSE_TIMERS == 1

	void vQueueWaitForMessageRestricted( xQueueHandle pxQueue, portTickType xTicksToWait )
	{
  40098c:	b538      	push	{r3, r4, r5, lr}
  40098e:	4604      	mov	r4, r0
  400990:	460d      	mov	r5, r1
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
  400992:	4b0d      	ldr	r3, [pc, #52]	; (4009c8 <vQueueWaitForMessageRestricted+0x3c>)
  400994:	4798      	blx	r3
  400996:	6c63      	ldr	r3, [r4, #68]	; 0x44
  400998:	f1b3 3fff 	cmp.w	r3, #4294967295
  40099c:	bf04      	itt	eq
  40099e:	2300      	moveq	r3, #0
  4009a0:	6463      	streq	r3, [r4, #68]	; 0x44
  4009a2:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  4009a4:	f1b3 3fff 	cmp.w	r3, #4294967295
  4009a8:	bf04      	itt	eq
  4009aa:	2300      	moveq	r3, #0
  4009ac:	64a3      	streq	r3, [r4, #72]	; 0x48
  4009ae:	4b07      	ldr	r3, [pc, #28]	; (4009cc <vQueueWaitForMessageRestricted+0x40>)
  4009b0:	4798      	blx	r3
		if( pxQueue->uxMessagesWaiting == ( unsigned portBASE_TYPE ) 0U )
  4009b2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  4009b4:	b923      	cbnz	r3, 4009c0 <vQueueWaitForMessageRestricted+0x34>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
  4009b6:	f104 0024 	add.w	r0, r4, #36	; 0x24
  4009ba:	4629      	mov	r1, r5
  4009bc:	4b04      	ldr	r3, [pc, #16]	; (4009d0 <vQueueWaitForMessageRestricted+0x44>)
  4009be:	4798      	blx	r3
		}
		prvUnlockQueue( pxQueue );
  4009c0:	4620      	mov	r0, r4
  4009c2:	4b04      	ldr	r3, [pc, #16]	; (4009d4 <vQueueWaitForMessageRestricted+0x48>)
  4009c4:	4798      	blx	r3
  4009c6:	bd38      	pop	{r3, r4, r5, pc}
  4009c8:	00400239 	.word	0x00400239
  4009cc:	00400259 	.word	0x00400259
  4009d0:	004010c1 	.word	0x004010c1
  4009d4:	0040051d 	.word	0x0040051d

004009d8 <prvAddCurrentTaskToDelayedList>:
	#endif
}
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( portTickType xTimeToWake )
{
  4009d8:	b510      	push	{r4, lr}
  4009da:	4604      	mov	r4, r0
	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
  4009dc:	4b0e      	ldr	r3, [pc, #56]	; (400a18 <prvAddCurrentTaskToDelayedList+0x40>)
  4009de:	681b      	ldr	r3, [r3, #0]
  4009e0:	6058      	str	r0, [r3, #4]

	if( xTimeToWake < xTickCount )
  4009e2:	4b0e      	ldr	r3, [pc, #56]	; (400a1c <prvAddCurrentTaskToDelayedList+0x44>)
  4009e4:	681b      	ldr	r3, [r3, #0]
  4009e6:	4298      	cmp	r0, r3
  4009e8:	d207      	bcs.n	4009fa <prvAddCurrentTaskToDelayedList+0x22>
	{
		/* Wake time has overflowed.  Place this item in the overflow list. */
		vListInsert( ( xList * ) pxOverflowDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
  4009ea:	4b0d      	ldr	r3, [pc, #52]	; (400a20 <prvAddCurrentTaskToDelayedList+0x48>)
  4009ec:	6818      	ldr	r0, [r3, #0]
  4009ee:	4b0a      	ldr	r3, [pc, #40]	; (400a18 <prvAddCurrentTaskToDelayedList+0x40>)
  4009f0:	6819      	ldr	r1, [r3, #0]
  4009f2:	3104      	adds	r1, #4
  4009f4:	4b0b      	ldr	r3, [pc, #44]	; (400a24 <prvAddCurrentTaskToDelayedList+0x4c>)
  4009f6:	4798      	blx	r3
  4009f8:	bd10      	pop	{r4, pc}
	}
	else
	{
		/* The wake time has not overflowed, so we can use the current block list. */
		vListInsert( ( xList * ) pxDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
  4009fa:	4b0b      	ldr	r3, [pc, #44]	; (400a28 <prvAddCurrentTaskToDelayedList+0x50>)
  4009fc:	6818      	ldr	r0, [r3, #0]
  4009fe:	4b06      	ldr	r3, [pc, #24]	; (400a18 <prvAddCurrentTaskToDelayedList+0x40>)
  400a00:	6819      	ldr	r1, [r3, #0]
  400a02:	3104      	adds	r1, #4
  400a04:	4b07      	ldr	r3, [pc, #28]	; (400a24 <prvAddCurrentTaskToDelayedList+0x4c>)
  400a06:	4798      	blx	r3

		/* If the task entering the blocked state was placed at the head of the
		list of blocked tasks then xNextTaskUnblockTime needs to be updated
		too. */
		if( xTimeToWake < xNextTaskUnblockTime )
  400a08:	4b08      	ldr	r3, [pc, #32]	; (400a2c <prvAddCurrentTaskToDelayedList+0x54>)
  400a0a:	681b      	ldr	r3, [r3, #0]
  400a0c:	429c      	cmp	r4, r3
		{
			xNextTaskUnblockTime = xTimeToWake;
  400a0e:	bf3c      	itt	cc
  400a10:	4b06      	ldrcc	r3, [pc, #24]	; (400a2c <prvAddCurrentTaskToDelayedList+0x54>)
  400a12:	601c      	strcc	r4, [r3, #0]
  400a14:	bd10      	pop	{r4, pc}
  400a16:	bf00      	nop
  400a18:	2000a540 	.word	0x2000a540
  400a1c:	2000a55c 	.word	0x2000a55c
  400a20:	2000a560 	.word	0x2000a560
  400a24:	00400165 	.word	0x00400165
  400a28:	2000a48c 	.word	0x2000a48c
  400a2c:	20000014 	.word	0x20000014

00400a30 <xTaskGenericCreate>:
/*-----------------------------------------------------------
 * TASK CREATION API documented in task.h
 *----------------------------------------------------------*/

signed portBASE_TYPE xTaskGenericCreate( pdTASK_CODE pxTaskCode, const signed char * const pcName, unsigned short usStackDepth, void *pvParameters, unsigned portBASE_TYPE uxPriority, xTaskHandle *pxCreatedTask, portSTACK_TYPE *puxStackBuffer, const xMemoryRegion * const xRegions )
{
  400a30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  400a34:	b083      	sub	sp, #12
  400a36:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  400a38:	f8dd 8034 	ldr.w	r8, [sp, #52]	; 0x34
  400a3c:	9e0e      	ldr	r6, [sp, #56]	; 0x38
signed portBASE_TYPE xReturn;
tskTCB * pxNewTCB;

	configASSERT( pxTaskCode );
  400a3e:	9001      	str	r0, [sp, #4]
  400a40:	b918      	cbnz	r0, 400a4a <xTaskGenericCreate+0x1a>
  400a42:	4b62      	ldr	r3, [pc, #392]	; (400bcc <xTaskGenericCreate+0x19c>)
  400a44:	4798      	blx	r3
  400a46:	bf00      	nop
  400a48:	e7fd      	b.n	400a46 <xTaskGenericCreate+0x16>
  400a4a:	4689      	mov	r9, r1
  400a4c:	4615      	mov	r5, r2
  400a4e:	469b      	mov	fp, r3
	configASSERT( ( ( uxPriority & ( ~portPRIVILEGE_BIT ) ) < configMAX_PRIORITIES ) );
  400a50:	2f04      	cmp	r7, #4
  400a52:	d903      	bls.n	400a5c <xTaskGenericCreate+0x2c>
  400a54:	4b5d      	ldr	r3, [pc, #372]	; (400bcc <xTaskGenericCreate+0x19c>)
  400a56:	4798      	blx	r3
  400a58:	bf00      	nop
  400a5a:	e7fd      	b.n	400a58 <xTaskGenericCreate+0x28>
{
tskTCB *pxNewTCB;

	/* Allocate space for the TCB.  Where the memory comes from depends on
	the implementation of the port malloc function. */
	pxNewTCB = ( tskTCB * ) pvPortMalloc( sizeof( tskTCB ) );
  400a5c:	204c      	movs	r0, #76	; 0x4c
  400a5e:	4b5c      	ldr	r3, [pc, #368]	; (400bd0 <xTaskGenericCreate+0x1a0>)
  400a60:	4798      	blx	r3

	if( pxNewTCB != NULL )
  400a62:	4604      	mov	r4, r0
  400a64:	2800      	cmp	r0, #0
  400a66:	f000 80ab 	beq.w	400bc0 <xTaskGenericCreate+0x190>
	{
		/* Allocate space for the stack used by the task being created.
		The base of the stack memory stored in the TCB so the task can
		be deleted later if required. */
		pxNewTCB->pxStack = ( portSTACK_TYPE * ) pvPortMallocAligned( ( ( ( size_t )usStackDepth ) * sizeof( portSTACK_TYPE ) ), puxStackBuffer );
  400a6a:	2e00      	cmp	r6, #0
  400a6c:	f040 80a5 	bne.w	400bba <xTaskGenericCreate+0x18a>
  400a70:	00a8      	lsls	r0, r5, #2
  400a72:	4b57      	ldr	r3, [pc, #348]	; (400bd0 <xTaskGenericCreate+0x1a0>)
  400a74:	4798      	blx	r3
  400a76:	6320      	str	r0, [r4, #48]	; 0x30

		if( pxNewTCB->pxStack == NULL )
  400a78:	b918      	cbnz	r0, 400a82 <xTaskGenericCreate+0x52>
		{
			/* Could not allocate the stack.  Delete the allocated TCB. */
			vPortFree( pxNewTCB );
  400a7a:	4620      	mov	r0, r4
  400a7c:	4b55      	ldr	r3, [pc, #340]	; (400bd4 <xTaskGenericCreate+0x1a4>)
  400a7e:	4798      	blx	r3
  400a80:	e09e      	b.n	400bc0 <xTaskGenericCreate+0x190>
			pxNewTCB = NULL;
		}
		else
		{
			/* Just to help debugging. */
			memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) usStackDepth * sizeof( portSTACK_TYPE ) );
  400a82:	21a5      	movs	r1, #165	; 0xa5
  400a84:	00aa      	lsls	r2, r5, #2
  400a86:	4b54      	ldr	r3, [pc, #336]	; (400bd8 <xTaskGenericCreate+0x1a8>)
  400a88:	4798      	blx	r3
		stack grows from high memory to low (as per the 80x86) or visa versa.
		portSTACK_GROWTH is used to make the result positive or negative as
		required by the port. */
		#if( portSTACK_GROWTH < 0 )
		{
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( unsigned short ) 1 );
  400a8a:	f105 4580 	add.w	r5, r5, #1073741824	; 0x40000000
  400a8e:	3d01      	subs	r5, #1
  400a90:	6b23      	ldr	r3, [r4, #48]	; 0x30
  400a92:	eb03 0385 	add.w	r3, r3, r5, lsl #2
			pxTopOfStack = ( portSTACK_TYPE * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ( portPOINTER_SIZE_TYPE ) ~portBYTE_ALIGNMENT_MASK  ) );
  400a96:	f023 0507 	bic.w	r5, r3, #7
{
	/* Store the function name in the TCB. */
	#if configMAX_TASK_NAME_LEN > 1
	{
		/* Don't bring strncpy into the build unnecessarily. */
		strncpy( ( char * ) pxTCB->pcTaskName, ( const char * ) pcName, ( unsigned short ) configMAX_TASK_NAME_LEN );
  400a9a:	f104 0034 	add.w	r0, r4, #52	; 0x34
  400a9e:	4649      	mov	r1, r9
  400aa0:	220a      	movs	r2, #10
  400aa2:	4b4e      	ldr	r3, [pc, #312]	; (400bdc <xTaskGenericCreate+0x1ac>)
  400aa4:	4798      	blx	r3
	}
	#endif
	pxTCB->pcTaskName[ ( unsigned short ) configMAX_TASK_NAME_LEN - ( unsigned short ) 1 ] = ( signed char ) '\0';
  400aa6:	2300      	movs	r3, #0
  400aa8:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  400aac:	463e      	mov	r6, r7
  400aae:	2f04      	cmp	r7, #4
  400ab0:	bf28      	it	cs
  400ab2:	2604      	movcs	r6, #4
	if( uxPriority >= configMAX_PRIORITIES )
	{
		uxPriority = configMAX_PRIORITIES - ( unsigned portBASE_TYPE ) 1U;
	}

	pxTCB->uxPriority = uxPriority;
  400ab4:	62e6      	str	r6, [r4, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxTCB->uxBasePriority = uxPriority;
  400ab6:	64a6      	str	r6, [r4, #72]	; 0x48
	}
	#endif

	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
  400ab8:	f104 0904 	add.w	r9, r4, #4
  400abc:	4648      	mov	r0, r9
  400abe:	f8df a16c 	ldr.w	sl, [pc, #364]	; 400c2c <xTaskGenericCreate+0x1fc>
  400ac2:	47d0      	blx	sl
	vListInitialiseItem( &( pxTCB->xEventListItem ) );
  400ac4:	f104 0018 	add.w	r0, r4, #24
  400ac8:	47d0      	blx	sl

	/* Set the pxTCB as a link back from the xListItem.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );
  400aca:	6124      	str	r4, [r4, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) uxPriority );
  400acc:	f1c6 0605 	rsb	r6, r6, #5
  400ad0:	61a6      	str	r6, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
  400ad2:	6264      	str	r4, [r4, #36]	; 0x24
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
		}
		#else
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
  400ad4:	4628      	mov	r0, r5
  400ad6:	9901      	ldr	r1, [sp, #4]
  400ad8:	465a      	mov	r2, fp
  400ada:	4b41      	ldr	r3, [pc, #260]	; (400be0 <xTaskGenericCreate+0x1b0>)
  400adc:	4798      	blx	r3
  400ade:	6020      	str	r0, [r4, #0]
		}
		#endif

		/* Check the alignment of the initialised stack. */
		portALIGNMENT_ASSERT_pxCurrentTCB( ( ( ( unsigned long ) pxNewTCB->pxTopOfStack & ( unsigned long ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
  400ae0:	f010 0f07 	tst.w	r0, #7
  400ae4:	d003      	beq.n	400aee <xTaskGenericCreate+0xbe>
  400ae6:	4b39      	ldr	r3, [pc, #228]	; (400bcc <xTaskGenericCreate+0x19c>)
  400ae8:	4798      	blx	r3
  400aea:	bf00      	nop
  400aec:	e7fd      	b.n	400aea <xTaskGenericCreate+0xba>

		if( ( void * ) pxCreatedTask != NULL )
  400aee:	f1b8 0f00 	cmp.w	r8, #0
  400af2:	d001      	beq.n	400af8 <xTaskGenericCreate+0xc8>
		{
			/* Pass the TCB out - in an anonymous way.  The calling function/
			task can use this as a handle to delete the task later if
			required.*/
			*pxCreatedTask = ( xTaskHandle ) pxNewTCB;
  400af4:	f8c8 4000 	str.w	r4, [r8]
		}

		/* We are going to manipulate the task queues to add this task to a
		ready list, so must make sure no interrupts occur. */
		taskENTER_CRITICAL();
  400af8:	4b3a      	ldr	r3, [pc, #232]	; (400be4 <xTaskGenericCreate+0x1b4>)
  400afa:	4798      	blx	r3
		{
			uxCurrentNumberOfTasks++;
  400afc:	4a3a      	ldr	r2, [pc, #232]	; (400be8 <xTaskGenericCreate+0x1b8>)
  400afe:	6813      	ldr	r3, [r2, #0]
  400b00:	3301      	adds	r3, #1
  400b02:	6013      	str	r3, [r2, #0]
			if( pxCurrentTCB == NULL )
  400b04:	4b39      	ldr	r3, [pc, #228]	; (400bec <xTaskGenericCreate+0x1bc>)
  400b06:	681b      	ldr	r3, [r3, #0]
  400b08:	bb0b      	cbnz	r3, 400b4e <xTaskGenericCreate+0x11e>
			{
				/* There are no other tasks, or all the other tasks are in
				the suspended state - make this the current task. */
				pxCurrentTCB =  pxNewTCB;
  400b0a:	4b38      	ldr	r3, [pc, #224]	; (400bec <xTaskGenericCreate+0x1bc>)
  400b0c:	601c      	str	r4, [r3, #0]

				if( uxCurrentNumberOfTasks == ( unsigned portBASE_TYPE ) 1 )
  400b0e:	6813      	ldr	r3, [r2, #0]
  400b10:	2b01      	cmp	r3, #1
  400b12:	d126      	bne.n	400b62 <xTaskGenericCreate+0x132>
  400b14:	4d36      	ldr	r5, [pc, #216]	; (400bf0 <xTaskGenericCreate+0x1c0>)
  400b16:	f105 0864 	add.w	r8, r5, #100	; 0x64
{
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = ( unsigned portBASE_TYPE ) 0U; uxPriority < configMAX_PRIORITIES; uxPriority++ )
	{
		vListInitialise( ( xList * ) &( pxReadyTasksLists[ uxPriority ] ) );
  400b1a:	4e36      	ldr	r6, [pc, #216]	; (400bf4 <xTaskGenericCreate+0x1c4>)
  400b1c:	4628      	mov	r0, r5
  400b1e:	47b0      	blx	r6
  400b20:	3514      	adds	r5, #20

static void prvInitialiseTaskLists( void )
{
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = ( unsigned portBASE_TYPE ) 0U; uxPriority < configMAX_PRIORITIES; uxPriority++ )
  400b22:	4545      	cmp	r5, r8
  400b24:	d1fa      	bne.n	400b1c <xTaskGenericCreate+0xec>
	{
		vListInitialise( ( xList * ) &( pxReadyTasksLists[ uxPriority ] ) );
	}

	vListInitialise( ( xList * ) &xDelayedTaskList1 );
  400b26:	f8df 8108 	ldr.w	r8, [pc, #264]	; 400c30 <xTaskGenericCreate+0x200>
  400b2a:	4640      	mov	r0, r8
  400b2c:	4d31      	ldr	r5, [pc, #196]	; (400bf4 <xTaskGenericCreate+0x1c4>)
  400b2e:	47a8      	blx	r5
	vListInitialise( ( xList * ) &xDelayedTaskList2 );
  400b30:	4e31      	ldr	r6, [pc, #196]	; (400bf8 <xTaskGenericCreate+0x1c8>)
  400b32:	4630      	mov	r0, r6
  400b34:	47a8      	blx	r5
	vListInitialise( ( xList * ) &xPendingReadyList );
  400b36:	4831      	ldr	r0, [pc, #196]	; (400bfc <xTaskGenericCreate+0x1cc>)
  400b38:	47a8      	blx	r5

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( ( xList * ) &xTasksWaitingTermination );
  400b3a:	4831      	ldr	r0, [pc, #196]	; (400c00 <xTaskGenericCreate+0x1d0>)
  400b3c:	47a8      	blx	r5
	}
	#endif

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( ( xList * ) &xSuspendedTaskList );
  400b3e:	4831      	ldr	r0, [pc, #196]	; (400c04 <xTaskGenericCreate+0x1d4>)
  400b40:	47a8      	blx	r5
	}
	#endif

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
  400b42:	4b31      	ldr	r3, [pc, #196]	; (400c08 <xTaskGenericCreate+0x1d8>)
  400b44:	f8c3 8000 	str.w	r8, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
  400b48:	4b30      	ldr	r3, [pc, #192]	; (400c0c <xTaskGenericCreate+0x1dc>)
  400b4a:	601e      	str	r6, [r3, #0]
  400b4c:	e009      	b.n	400b62 <xTaskGenericCreate+0x132>
			else
			{
				/* If the scheduler is not already running, make this task the
				current task if it is the highest priority task to be created
				so far. */
				if( xSchedulerRunning == pdFALSE )
  400b4e:	4b30      	ldr	r3, [pc, #192]	; (400c10 <xTaskGenericCreate+0x1e0>)
  400b50:	681b      	ldr	r3, [r3, #0]
  400b52:	b933      	cbnz	r3, 400b62 <xTaskGenericCreate+0x132>
				{
					if( pxCurrentTCB->uxPriority <= uxPriority )
  400b54:	4b25      	ldr	r3, [pc, #148]	; (400bec <xTaskGenericCreate+0x1bc>)
  400b56:	681b      	ldr	r3, [r3, #0]
  400b58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  400b5a:	429f      	cmp	r7, r3
					{
						pxCurrentTCB = pxNewTCB;
  400b5c:	bf24      	itt	cs
  400b5e:	4b23      	ldrcs	r3, [pc, #140]	; (400bec <xTaskGenericCreate+0x1bc>)
  400b60:	601c      	strcs	r4, [r3, #0]
				}
			}

			/* Remember the top priority to make context switching faster.  Use
			the priority in pxNewTCB as this has been capped to a valid value. */
			if( pxNewTCB->uxPriority > uxTopUsedPriority )
  400b62:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  400b64:	4b2b      	ldr	r3, [pc, #172]	; (400c14 <xTaskGenericCreate+0x1e4>)
  400b66:	681b      	ldr	r3, [r3, #0]
  400b68:	4298      	cmp	r0, r3
			{
				uxTopUsedPriority = pxNewTCB->uxPriority;
  400b6a:	bf84      	itt	hi
  400b6c:	4b29      	ldrhi	r3, [pc, #164]	; (400c14 <xTaskGenericCreate+0x1e4>)
  400b6e:	6018      	strhi	r0, [r3, #0]
			}

			#if ( configUSE_TRACE_FACILITY == 1 )
			{
				/* Add a counter into the TCB for tracing only. */
				pxNewTCB->uxTCBNumber = uxTaskNumber;
  400b70:	4a29      	ldr	r2, [pc, #164]	; (400c18 <xTaskGenericCreate+0x1e8>)
  400b72:	6813      	ldr	r3, [r2, #0]
  400b74:	6423      	str	r3, [r4, #64]	; 0x40
			}
			#endif
			uxTaskNumber++;
  400b76:	3301      	adds	r3, #1
  400b78:	6013      	str	r3, [r2, #0]

			prvAddTaskToReadyQueue( pxNewTCB );
  400b7a:	4b28      	ldr	r3, [pc, #160]	; (400c1c <xTaskGenericCreate+0x1ec>)
  400b7c:	681b      	ldr	r3, [r3, #0]
  400b7e:	4298      	cmp	r0, r3
  400b80:	bf84      	itt	hi
  400b82:	4b26      	ldrhi	r3, [pc, #152]	; (400c1c <xTaskGenericCreate+0x1ec>)
  400b84:	6018      	strhi	r0, [r3, #0]
  400b86:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  400b8a:	4b19      	ldr	r3, [pc, #100]	; (400bf0 <xTaskGenericCreate+0x1c0>)
  400b8c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  400b90:	4649      	mov	r1, r9
  400b92:	4b23      	ldr	r3, [pc, #140]	; (400c20 <xTaskGenericCreate+0x1f0>)
  400b94:	4798      	blx	r3

			xReturn = pdPASS;
			portSETUP_TCB( pxNewTCB );
			traceTASK_CREATE( pxNewTCB );
		}
		taskEXIT_CRITICAL();
  400b96:	4b23      	ldr	r3, [pc, #140]	; (400c24 <xTaskGenericCreate+0x1f4>)
  400b98:	4798      	blx	r3
		traceTASK_CREATE_FAILED();
	}

	if( xReturn == pdPASS )
	{
		if( xSchedulerRunning != pdFALSE )
  400b9a:	4b1d      	ldr	r3, [pc, #116]	; (400c10 <xTaskGenericCreate+0x1e0>)
  400b9c:	681b      	ldr	r3, [r3, #0]
  400b9e:	b143      	cbz	r3, 400bb2 <xTaskGenericCreate+0x182>
		{
			/* If the created task is of a higher priority than the current task
			then it should run now. */
			if( pxCurrentTCB->uxPriority < uxPriority )
  400ba0:	4b12      	ldr	r3, [pc, #72]	; (400bec <xTaskGenericCreate+0x1bc>)
  400ba2:	681b      	ldr	r3, [r3, #0]
  400ba4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  400ba6:	429f      	cmp	r7, r3
  400ba8:	d905      	bls.n	400bb6 <xTaskGenericCreate+0x186>
			{
				portYIELD_WITHIN_API();
  400baa:	4b1f      	ldr	r3, [pc, #124]	; (400c28 <xTaskGenericCreate+0x1f8>)
  400bac:	4798      	blx	r3
  400bae:	2001      	movs	r0, #1
  400bb0:	e008      	b.n	400bc4 <xTaskGenericCreate+0x194>
  400bb2:	2001      	movs	r0, #1
  400bb4:	e006      	b.n	400bc4 <xTaskGenericCreate+0x194>
  400bb6:	2001      	movs	r0, #1
  400bb8:	e004      	b.n	400bc4 <xTaskGenericCreate+0x194>
	if( pxNewTCB != NULL )
	{
		/* Allocate space for the stack used by the task being created.
		The base of the stack memory stored in the TCB so the task can
		be deleted later if required. */
		pxNewTCB->pxStack = ( portSTACK_TYPE * ) pvPortMallocAligned( ( ( ( size_t )usStackDepth ) * sizeof( portSTACK_TYPE ) ), puxStackBuffer );
  400bba:	6306      	str	r6, [r0, #48]	; 0x30
  400bbc:	4630      	mov	r0, r6
  400bbe:	e760      	b.n	400a82 <xTaskGenericCreate+0x52>
		}
		taskEXIT_CRITICAL();
	}
	else
	{
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
  400bc0:	f04f 30ff 	mov.w	r0, #4294967295
			}
		}
	}

	return xReturn;
}
  400bc4:	b003      	add	sp, #12
  400bc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  400bca:	bf00      	nop
  400bcc:	00400229 	.word	0x00400229
  400bd0:	00400385 	.word	0x00400385
  400bd4:	00400459 	.word	0x00400459
  400bd8:	00402d89 	.word	0x00402d89
  400bdc:	00402e25 	.word	0x00402e25
  400be0:	004001dd 	.word	0x004001dd
  400be4:	00400239 	.word	0x00400239
  400be8:	2000a568 	.word	0x2000a568
  400bec:	2000a540 	.word	0x2000a540
  400bf0:	2000a4c4 	.word	0x2000a4c4
  400bf4:	00400129 	.word	0x00400129
  400bf8:	2000a4ac 	.word	0x2000a4ac
  400bfc:	2000a544 	.word	0x2000a544
  400c00:	2000a528 	.word	0x2000a528
  400c04:	2000a478 	.word	0x2000a478
  400c08:	2000a48c 	.word	0x2000a48c
  400c0c:	2000a560 	.word	0x2000a560
  400c10:	2000a490 	.word	0x2000a490
  400c14:	2000a570 	.word	0x2000a570
  400c18:	2000a564 	.word	0x2000a564
  400c1c:	2000a4c0 	.word	0x2000a4c0
  400c20:	00400149 	.word	0x00400149
  400c24:	00400259 	.word	0x00400259
  400c28:	00400219 	.word	0x00400219
  400c2c:	00400141 	.word	0x00400141
  400c30:	2000a498 	.word	0x2000a498

00400c34 <vTaskStartScheduler>:
 * PUBLIC SCHEDULER CONTROL documented in task.h
 *----------------------------------------------------------*/


void vTaskStartScheduler( void )
{
  400c34:	b510      	push	{r4, lr}
  400c36:	b084      	sub	sp, #16
		xReturn = xTaskCreate( prvIdleTask, ( signed char * ) "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), &xIdleTaskHandle );
	}
	#else
	{
		/* Create the idle task without storing its handle. */
		xReturn = xTaskCreate( prvIdleTask, ( signed char * ) "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), NULL );
  400c38:	2300      	movs	r3, #0
  400c3a:	9300      	str	r3, [sp, #0]
  400c3c:	9301      	str	r3, [sp, #4]
  400c3e:	9302      	str	r3, [sp, #8]
  400c40:	9303      	str	r3, [sp, #12]
  400c42:	480e      	ldr	r0, [pc, #56]	; (400c7c <vTaskStartScheduler+0x48>)
  400c44:	490e      	ldr	r1, [pc, #56]	; (400c80 <vTaskStartScheduler+0x4c>)
  400c46:	2282      	movs	r2, #130	; 0x82
  400c48:	4c0e      	ldr	r4, [pc, #56]	; (400c84 <vTaskStartScheduler+0x50>)
  400c4a:	47a0      	blx	r4
	}
	#endif

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
  400c4c:	2801      	cmp	r0, #1
  400c4e:	d10e      	bne.n	400c6e <vTaskStartScheduler+0x3a>
		{
			xReturn = xTimerCreateTimerTask();
  400c50:	4b0d      	ldr	r3, [pc, #52]	; (400c88 <vTaskStartScheduler+0x54>)
  400c52:	4798      	blx	r3
		}
	}
	#endif

	if( xReturn == pdPASS )
  400c54:	2801      	cmp	r0, #1
  400c56:	d10a      	bne.n	400c6e <vTaskStartScheduler+0x3a>
		so interrupts will automatically get re-enabled when the first task
		starts to run.

		STEPPING THROUGH HERE USING A DEBUGGER CAN CAUSE BIG PROBLEMS IF THE
		DEBUGGER ALLOWS INTERRUPTS TO BE PROCESSED. */
		portDISABLE_INTERRUPTS();
  400c58:	4b0c      	ldr	r3, [pc, #48]	; (400c8c <vTaskStartScheduler+0x58>)
  400c5a:	4798      	blx	r3

		xSchedulerRunning = pdTRUE;
  400c5c:	2201      	movs	r2, #1
  400c5e:	4b0c      	ldr	r3, [pc, #48]	; (400c90 <vTaskStartScheduler+0x5c>)
  400c60:	601a      	str	r2, [r3, #0]
		xTickCount = ( portTickType ) 0U;
  400c62:	2200      	movs	r2, #0
  400c64:	4b0b      	ldr	r3, [pc, #44]	; (400c94 <vTaskStartScheduler+0x60>)
  400c66:	601a      	str	r2, [r3, #0]
		the run time counter time base. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
  400c68:	4b0b      	ldr	r3, [pc, #44]	; (400c98 <vTaskStartScheduler+0x64>)
  400c6a:	4798      	blx	r3
  400c6c:	e004      	b.n	400c78 <vTaskStartScheduler+0x44>
			/* Should only reach here if a task calls xTaskEndScheduler(). */
		}
	}

	/* This line will only be reached if the kernel could not be started. */
	configASSERT( xReturn );
  400c6e:	b918      	cbnz	r0, 400c78 <vTaskStartScheduler+0x44>
  400c70:	4b06      	ldr	r3, [pc, #24]	; (400c8c <vTaskStartScheduler+0x58>)
  400c72:	4798      	blx	r3
  400c74:	bf00      	nop
  400c76:	e7fd      	b.n	400c74 <vTaskStartScheduler+0x40>
}
  400c78:	b004      	add	sp, #16
  400c7a:	bd10      	pop	{r4, pc}
  400c7c:	00400f39 	.word	0x00400f39
  400c80:	00402f90 	.word	0x00402f90
  400c84:	00400a31 	.word	0x00400a31
  400c88:	004013e5 	.word	0x004013e5
  400c8c:	00400229 	.word	0x00400229
  400c90:	2000a490 	.word	0x2000a490
  400c94:	2000a55c 	.word	0x2000a55c
  400c98:	004002f5 	.word	0x004002f5

00400c9c <vTaskSuspendAll>:

void vTaskSuspendAll( void )
{
	/* A critical section is not required as the variable is of type
	portBASE_TYPE. */
	++uxSchedulerSuspended;
  400c9c:	4a02      	ldr	r2, [pc, #8]	; (400ca8 <vTaskSuspendAll+0xc>)
  400c9e:	6813      	ldr	r3, [r2, #0]
  400ca0:	3301      	adds	r3, #1
  400ca2:	6013      	str	r3, [r2, #0]
  400ca4:	4770      	bx	lr
  400ca6:	bf00      	nop
  400ca8:	2000a558 	.word	0x2000a558

00400cac <xTaskGetTickCount>:
 *----------------------------------------------------------*/



portTickType xTaskGetTickCount( void )
{
  400cac:	b510      	push	{r4, lr}
portTickType xTicks;

	/* Critical section required if running on a 16 bit processor. */
	taskENTER_CRITICAL();
  400cae:	4b04      	ldr	r3, [pc, #16]	; (400cc0 <xTaskGetTickCount+0x14>)
  400cb0:	4798      	blx	r3
	{
		xTicks = xTickCount;
  400cb2:	4b04      	ldr	r3, [pc, #16]	; (400cc4 <xTaskGetTickCount+0x18>)
  400cb4:	681c      	ldr	r4, [r3, #0]
	}
	taskEXIT_CRITICAL();
  400cb6:	4b04      	ldr	r3, [pc, #16]	; (400cc8 <xTaskGetTickCount+0x1c>)
  400cb8:	4798      	blx	r3

	return xTicks;
}
  400cba:	4620      	mov	r0, r4
  400cbc:	bd10      	pop	{r4, pc}
  400cbe:	bf00      	nop
  400cc0:	00400239 	.word	0x00400239
  400cc4:	2000a55c 	.word	0x2000a55c
  400cc8:	00400259 	.word	0x00400259

00400ccc <vTaskIncrementTick>:
 * SCHEDULER INTERNALS AVAILABLE FOR PORTING PURPOSES
 * documented in task.h
 *----------------------------------------------------------*/

void vTaskIncrementTick( void )
{
  400ccc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
  400cd0:	4b3a      	ldr	r3, [pc, #232]	; (400dbc <vTaskIncrementTick+0xf0>)
  400cd2:	681b      	ldr	r3, [r3, #0]
  400cd4:	2b00      	cmp	r3, #0
  400cd6:	d16b      	bne.n	400db0 <vTaskIncrementTick+0xe4>
	{
		++xTickCount;
  400cd8:	4b39      	ldr	r3, [pc, #228]	; (400dc0 <vTaskIncrementTick+0xf4>)
  400cda:	681a      	ldr	r2, [r3, #0]
  400cdc:	3201      	adds	r2, #1
  400cde:	601a      	str	r2, [r3, #0]
		if( xTickCount == ( portTickType ) 0U )
  400ce0:	681b      	ldr	r3, [r3, #0]
  400ce2:	bb03      	cbnz	r3, 400d26 <vTaskIncrementTick+0x5a>
			xList *pxTemp;

			/* Tick count has overflowed so we need to swap the delay lists.
			If there are any items in pxDelayedTaskList here then there is
			an error! */
			configASSERT( ( listLIST_IS_EMPTY( pxDelayedTaskList ) ) );
  400ce4:	4b37      	ldr	r3, [pc, #220]	; (400dc4 <vTaskIncrementTick+0xf8>)
  400ce6:	681b      	ldr	r3, [r3, #0]
  400ce8:	681b      	ldr	r3, [r3, #0]
  400cea:	b11b      	cbz	r3, 400cf4 <vTaskIncrementTick+0x28>
  400cec:	4b36      	ldr	r3, [pc, #216]	; (400dc8 <vTaskIncrementTick+0xfc>)
  400cee:	4798      	blx	r3
  400cf0:	bf00      	nop
  400cf2:	e7fd      	b.n	400cf0 <vTaskIncrementTick+0x24>

			pxTemp = pxDelayedTaskList;
  400cf4:	4b33      	ldr	r3, [pc, #204]	; (400dc4 <vTaskIncrementTick+0xf8>)
  400cf6:	6819      	ldr	r1, [r3, #0]
			pxDelayedTaskList = pxOverflowDelayedTaskList;
  400cf8:	4a34      	ldr	r2, [pc, #208]	; (400dcc <vTaskIncrementTick+0x100>)
  400cfa:	6810      	ldr	r0, [r2, #0]
  400cfc:	6018      	str	r0, [r3, #0]
			pxOverflowDelayedTaskList = pxTemp;
  400cfe:	6011      	str	r1, [r2, #0]
			xNumOfOverflows++;
  400d00:	4933      	ldr	r1, [pc, #204]	; (400dd0 <vTaskIncrementTick+0x104>)
  400d02:	680a      	ldr	r2, [r1, #0]
  400d04:	3201      	adds	r2, #1
  400d06:	600a      	str	r2, [r1, #0]

			if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
  400d08:	681b      	ldr	r3, [r3, #0]
  400d0a:	681b      	ldr	r3, [r3, #0]
  400d0c:	b923      	cbnz	r3, 400d18 <vTaskIncrementTick+0x4c>
				/* The new current delayed list is empty.  Set
				xNextTaskUnblockTime to the maximum possible value so it is
				extremely unlikely that the
				if( xTickCount >= xNextTaskUnblockTime ) test will pass until
				there is an item in the delayed list. */
				xNextTaskUnblockTime = portMAX_DELAY;
  400d0e:	f04f 32ff 	mov.w	r2, #4294967295
  400d12:	4b30      	ldr	r3, [pc, #192]	; (400dd4 <vTaskIncrementTick+0x108>)
  400d14:	601a      	str	r2, [r3, #0]
  400d16:	e006      	b.n	400d26 <vTaskIncrementTick+0x5a>
			{
				/* The new current delayed list is not empty, get the value of
				the item at the head of the delayed list.  This is the time at
				which the task at the head of the delayed list should be removed
				from the Blocked state. */
				pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
  400d18:	4b2a      	ldr	r3, [pc, #168]	; (400dc4 <vTaskIncrementTick+0xf8>)
  400d1a:	681b      	ldr	r3, [r3, #0]
  400d1c:	68db      	ldr	r3, [r3, #12]
  400d1e:	68db      	ldr	r3, [r3, #12]
				xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
  400d20:	685a      	ldr	r2, [r3, #4]
  400d22:	4b2c      	ldr	r3, [pc, #176]	; (400dd4 <vTaskIncrementTick+0x108>)
  400d24:	601a      	str	r2, [r3, #0]
			}
		}

		/* See if this tick has made a timeout expire. */
		prvCheckDelayedTasks();
  400d26:	4b26      	ldr	r3, [pc, #152]	; (400dc0 <vTaskIncrementTick+0xf4>)
  400d28:	681a      	ldr	r2, [r3, #0]
  400d2a:	4b2a      	ldr	r3, [pc, #168]	; (400dd4 <vTaskIncrementTick+0x108>)
  400d2c:	681b      	ldr	r3, [r3, #0]
  400d2e:	429a      	cmp	r2, r3
  400d30:	d342      	bcc.n	400db8 <vTaskIncrementTick+0xec>
  400d32:	4b24      	ldr	r3, [pc, #144]	; (400dc4 <vTaskIncrementTick+0xf8>)
  400d34:	681b      	ldr	r3, [r3, #0]
  400d36:	681b      	ldr	r3, [r3, #0]
  400d38:	b16b      	cbz	r3, 400d56 <vTaskIncrementTick+0x8a>
  400d3a:	4b22      	ldr	r3, [pc, #136]	; (400dc4 <vTaskIncrementTick+0xf8>)
  400d3c:	681b      	ldr	r3, [r3, #0]
  400d3e:	68db      	ldr	r3, [r3, #12]
  400d40:	68dc      	ldr	r4, [r3, #12]
  400d42:	6863      	ldr	r3, [r4, #4]
  400d44:	4a1e      	ldr	r2, [pc, #120]	; (400dc0 <vTaskIncrementTick+0xf4>)
  400d46:	6812      	ldr	r2, [r2, #0]
  400d48:	4293      	cmp	r3, r2
  400d4a:	d813      	bhi.n	400d74 <vTaskIncrementTick+0xa8>
  400d4c:	4e22      	ldr	r6, [pc, #136]	; (400dd8 <vTaskIncrementTick+0x10c>)
  400d4e:	4f23      	ldr	r7, [pc, #140]	; (400ddc <vTaskIncrementTick+0x110>)
  400d50:	f8df 8094 	ldr.w	r8, [pc, #148]	; 400de8 <vTaskIncrementTick+0x11c>
  400d54:	e012      	b.n	400d7c <vTaskIncrementTick+0xb0>
  400d56:	f04f 32ff 	mov.w	r2, #4294967295
  400d5a:	4b1e      	ldr	r3, [pc, #120]	; (400dd4 <vTaskIncrementTick+0x108>)
  400d5c:	601a      	str	r2, [r3, #0]
  400d5e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  400d62:	4b18      	ldr	r3, [pc, #96]	; (400dc4 <vTaskIncrementTick+0xf8>)
  400d64:	681b      	ldr	r3, [r3, #0]
  400d66:	68db      	ldr	r3, [r3, #12]
  400d68:	68dc      	ldr	r4, [r3, #12]
  400d6a:	6863      	ldr	r3, [r4, #4]
  400d6c:	4a14      	ldr	r2, [pc, #80]	; (400dc0 <vTaskIncrementTick+0xf4>)
  400d6e:	6812      	ldr	r2, [r2, #0]
  400d70:	4293      	cmp	r3, r2
  400d72:	d903      	bls.n	400d7c <vTaskIncrementTick+0xb0>
  400d74:	4a17      	ldr	r2, [pc, #92]	; (400dd4 <vTaskIncrementTick+0x108>)
  400d76:	6013      	str	r3, [r2, #0]
  400d78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  400d7c:	1d25      	adds	r5, r4, #4
  400d7e:	4628      	mov	r0, r5
  400d80:	47b0      	blx	r6
  400d82:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  400d84:	b113      	cbz	r3, 400d8c <vTaskIncrementTick+0xc0>
  400d86:	f104 0018 	add.w	r0, r4, #24
  400d8a:	47b0      	blx	r6
  400d8c:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  400d8e:	683b      	ldr	r3, [r7, #0]
  400d90:	4298      	cmp	r0, r3
  400d92:	bf88      	it	hi
  400d94:	6038      	strhi	r0, [r7, #0]
  400d96:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  400d9a:	eb08 0080 	add.w	r0, r8, r0, lsl #2
  400d9e:	4629      	mov	r1, r5
  400da0:	4b0f      	ldr	r3, [pc, #60]	; (400de0 <vTaskIncrementTick+0x114>)
  400da2:	4798      	blx	r3
  400da4:	4b07      	ldr	r3, [pc, #28]	; (400dc4 <vTaskIncrementTick+0xf8>)
  400da6:	681b      	ldr	r3, [r3, #0]
  400da8:	681b      	ldr	r3, [r3, #0]
  400daa:	2b00      	cmp	r3, #0
  400dac:	d1d9      	bne.n	400d62 <vTaskIncrementTick+0x96>
  400dae:	e7d2      	b.n	400d56 <vTaskIncrementTick+0x8a>
	}
	else
	{
		++uxMissedTicks;
  400db0:	4a0c      	ldr	r2, [pc, #48]	; (400de4 <vTaskIncrementTick+0x118>)
  400db2:	6813      	ldr	r3, [r2, #0]
  400db4:	3301      	adds	r3, #1
  400db6:	6013      	str	r3, [r2, #0]
  400db8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  400dbc:	2000a558 	.word	0x2000a558
  400dc0:	2000a55c 	.word	0x2000a55c
  400dc4:	2000a48c 	.word	0x2000a48c
  400dc8:	00400229 	.word	0x00400229
  400dcc:	2000a560 	.word	0x2000a560
  400dd0:	2000a53c 	.word	0x2000a53c
  400dd4:	20000014 	.word	0x20000014
  400dd8:	004001a1 	.word	0x004001a1
  400ddc:	2000a4c0 	.word	0x2000a4c0
  400de0:	00400149 	.word	0x00400149
  400de4:	2000a474 	.word	0x2000a474
  400de8:	2000a4c4 	.word	0x2000a4c4

00400dec <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE != 0  */
/*----------------------------------------------------------*/

signed portBASE_TYPE xTaskResumeAll( void )
{
  400dec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
register tskTCB *pxTCB;
signed portBASE_TYPE xAlreadyYielded = pdFALSE;

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
  400df0:	4b30      	ldr	r3, [pc, #192]	; (400eb4 <xTaskResumeAll+0xc8>)
  400df2:	681b      	ldr	r3, [r3, #0]
  400df4:	b91b      	cbnz	r3, 400dfe <xTaskResumeAll+0x12>
  400df6:	4b30      	ldr	r3, [pc, #192]	; (400eb8 <xTaskResumeAll+0xcc>)
  400df8:	4798      	blx	r3
  400dfa:	bf00      	nop
  400dfc:	e7fd      	b.n	400dfa <xTaskResumeAll+0xe>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
  400dfe:	4b2f      	ldr	r3, [pc, #188]	; (400ebc <xTaskResumeAll+0xd0>)
  400e00:	4798      	blx	r3
	{
		--uxSchedulerSuspended;
  400e02:	4b2c      	ldr	r3, [pc, #176]	; (400eb4 <xTaskResumeAll+0xc8>)
  400e04:	681a      	ldr	r2, [r3, #0]
  400e06:	3a01      	subs	r2, #1
  400e08:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
  400e0a:	681b      	ldr	r3, [r3, #0]
  400e0c:	2b00      	cmp	r3, #0
  400e0e:	d149      	bne.n	400ea4 <xTaskResumeAll+0xb8>
		{
			if( uxCurrentNumberOfTasks > ( unsigned portBASE_TYPE ) 0U )
  400e10:	4b2b      	ldr	r3, [pc, #172]	; (400ec0 <xTaskResumeAll+0xd4>)
  400e12:	681b      	ldr	r3, [r3, #0]
  400e14:	bb03      	cbnz	r3, 400e58 <xTaskResumeAll+0x6c>
/*----------------------------------------------------------*/

signed portBASE_TYPE xTaskResumeAll( void )
{
register tskTCB *pxTCB;
signed portBASE_TYPE xAlreadyYielded = pdFALSE;
  400e16:	2400      	movs	r4, #0
  400e18:	e047      	b.n	400eaa <xTaskResumeAll+0xbe>

				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY(  ( ( xList * ) &xPendingReadyList ) );
  400e1a:	f8d8 300c 	ldr.w	r3, [r8, #12]
  400e1e:	68dc      	ldr	r4, [r3, #12]
					uxListRemove( &( pxTCB->xEventListItem ) );
  400e20:	f104 0018 	add.w	r0, r4, #24
  400e24:	47b8      	blx	r7
					uxListRemove( &( pxTCB->xGenericListItem ) );
  400e26:	f104 0904 	add.w	r9, r4, #4
  400e2a:	4648      	mov	r0, r9
  400e2c:	47b8      	blx	r7
					prvAddTaskToReadyQueue( pxTCB );
  400e2e:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  400e30:	6833      	ldr	r3, [r6, #0]
  400e32:	4298      	cmp	r0, r3
  400e34:	bf88      	it	hi
  400e36:	6030      	strhi	r0, [r6, #0]
  400e38:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  400e3c:	4b21      	ldr	r3, [pc, #132]	; (400ec4 <xTaskResumeAll+0xd8>)
  400e3e:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  400e42:	4649      	mov	r1, r9
  400e44:	4b20      	ldr	r3, [pc, #128]	; (400ec8 <xTaskResumeAll+0xdc>)
  400e46:	4798      	blx	r3

					/* If we have moved a task that has a priority higher than
					the current task then we should yield. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
  400e48:	4b20      	ldr	r3, [pc, #128]	; (400ecc <xTaskResumeAll+0xe0>)
  400e4a:	681b      	ldr	r3, [r3, #0]
  400e4c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  400e4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
					{
						xYieldRequired = pdTRUE;
  400e50:	429a      	cmp	r2, r3
  400e52:	bf28      	it	cs
  400e54:	2501      	movcs	r5, #1
  400e56:	e004      	b.n	400e62 <xTaskResumeAll+0x76>
  400e58:	2500      	movs	r5, #0
			{
				portBASE_TYPE xYieldRequired = pdFALSE;

				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
  400e5a:	f8df 8090 	ldr.w	r8, [pc, #144]	; 400eec <xTaskResumeAll+0x100>
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY(  ( ( xList * ) &xPendingReadyList ) );
					uxListRemove( &( pxTCB->xEventListItem ) );
  400e5e:	4f1c      	ldr	r7, [pc, #112]	; (400ed0 <xTaskResumeAll+0xe4>)
					uxListRemove( &( pxTCB->xGenericListItem ) );
					prvAddTaskToReadyQueue( pxTCB );
  400e60:	4e1c      	ldr	r6, [pc, #112]	; (400ed4 <xTaskResumeAll+0xe8>)
			{
				portBASE_TYPE xYieldRequired = pdFALSE;

				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
  400e62:	f8d8 3000 	ldr.w	r3, [r8]
  400e66:	2b00      	cmp	r3, #0
  400e68:	d1d7      	bne.n	400e1a <xTaskResumeAll+0x2e>
				}

				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does not
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
  400e6a:	4b1b      	ldr	r3, [pc, #108]	; (400ed8 <xTaskResumeAll+0xec>)
  400e6c:	681b      	ldr	r3, [r3, #0]
  400e6e:	b163      	cbz	r3, 400e8a <xTaskResumeAll+0x9e>
				{
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
  400e70:	4b19      	ldr	r3, [pc, #100]	; (400ed8 <xTaskResumeAll+0xec>)
  400e72:	681b      	ldr	r3, [r3, #0]
  400e74:	b17b      	cbz	r3, 400e96 <xTaskResumeAll+0xaa>
					{
						vTaskIncrementTick();
  400e76:	4d19      	ldr	r5, [pc, #100]	; (400edc <xTaskResumeAll+0xf0>)
						--uxMissedTicks;
  400e78:	4c17      	ldr	r4, [pc, #92]	; (400ed8 <xTaskResumeAll+0xec>)
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
				{
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
					{
						vTaskIncrementTick();
  400e7a:	47a8      	blx	r5
						--uxMissedTicks;
  400e7c:	6823      	ldr	r3, [r4, #0]
  400e7e:	3b01      	subs	r3, #1
  400e80:	6023      	str	r3, [r4, #0]
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does not
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
				{
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
  400e82:	6823      	ldr	r3, [r4, #0]
  400e84:	2b00      	cmp	r3, #0
  400e86:	d1f8      	bne.n	400e7a <xTaskResumeAll+0x8e>
  400e88:	e005      	b.n	400e96 <xTaskResumeAll+0xaa>
						xYieldRequired = pdTRUE;
					}
					#endif
				}

				if( ( xYieldRequired == pdTRUE ) || ( xMissedYield == pdTRUE ) )
  400e8a:	2d01      	cmp	r5, #1
  400e8c:	d003      	beq.n	400e96 <xTaskResumeAll+0xaa>
  400e8e:	4b14      	ldr	r3, [pc, #80]	; (400ee0 <xTaskResumeAll+0xf4>)
  400e90:	681b      	ldr	r3, [r3, #0]
  400e92:	2b01      	cmp	r3, #1
  400e94:	d108      	bne.n	400ea8 <xTaskResumeAll+0xbc>
				{
					xAlreadyYielded = pdTRUE;
					xMissedYield = pdFALSE;
  400e96:	2200      	movs	r2, #0
  400e98:	4b11      	ldr	r3, [pc, #68]	; (400ee0 <xTaskResumeAll+0xf4>)
  400e9a:	601a      	str	r2, [r3, #0]
					portYIELD_WITHIN_API();
  400e9c:	4b11      	ldr	r3, [pc, #68]	; (400ee4 <xTaskResumeAll+0xf8>)
  400e9e:	4798      	blx	r3
					#endif
				}

				if( ( xYieldRequired == pdTRUE ) || ( xMissedYield == pdTRUE ) )
				{
					xAlreadyYielded = pdTRUE;
  400ea0:	2401      	movs	r4, #1
  400ea2:	e002      	b.n	400eaa <xTaskResumeAll+0xbe>
/*----------------------------------------------------------*/

signed portBASE_TYPE xTaskResumeAll( void )
{
register tskTCB *pxTCB;
signed portBASE_TYPE xAlreadyYielded = pdFALSE;
  400ea4:	2400      	movs	r4, #0
  400ea6:	e000      	b.n	400eaa <xTaskResumeAll+0xbe>
  400ea8:	2400      	movs	r4, #0
					portYIELD_WITHIN_API();
				}
			}
		}
	}
	taskEXIT_CRITICAL();
  400eaa:	4b0f      	ldr	r3, [pc, #60]	; (400ee8 <xTaskResumeAll+0xfc>)
  400eac:	4798      	blx	r3

	return xAlreadyYielded;
}
  400eae:	4620      	mov	r0, r4
  400eb0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  400eb4:	2000a558 	.word	0x2000a558
  400eb8:	00400229 	.word	0x00400229
  400ebc:	00400239 	.word	0x00400239
  400ec0:	2000a568 	.word	0x2000a568
  400ec4:	2000a4c4 	.word	0x2000a4c4
  400ec8:	00400149 	.word	0x00400149
  400ecc:	2000a540 	.word	0x2000a540
  400ed0:	004001a1 	.word	0x004001a1
  400ed4:	2000a4c0 	.word	0x2000a4c0
  400ed8:	2000a474 	.word	0x2000a474
  400edc:	00400ccd 	.word	0x00400ccd
  400ee0:	2000a56c 	.word	0x2000a56c
  400ee4:	00400219 	.word	0x00400219
  400ee8:	00400259 	.word	0x00400259
  400eec:	2000a544 	.word	0x2000a544

00400ef0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( portTickType xTicksToDelay )
	{
  400ef0:	b510      	push	{r4, lr}
	portTickType xTimeToWake;
	signed portBASE_TYPE xAlreadyYielded = pdFALSE;

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( portTickType ) 0U )
  400ef2:	b180      	cbz	r0, 400f16 <vTaskDelay+0x26>
  400ef4:	4604      	mov	r4, r0
		{
			vTaskSuspendAll();
  400ef6:	4b09      	ldr	r3, [pc, #36]	; (400f1c <vTaskDelay+0x2c>)
  400ef8:	4798      	blx	r3
				This task cannot be in an event list as it is the currently
				executing task. */

				/* Calculate the time to wake - this may overflow but this is
				not a problem. */
				xTimeToWake = xTickCount + xTicksToDelay;
  400efa:	4b09      	ldr	r3, [pc, #36]	; (400f20 <vTaskDelay+0x30>)
  400efc:	681b      	ldr	r3, [r3, #0]
  400efe:	441c      	add	r4, r3

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				if( uxListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) ) == 0 )
  400f00:	4b08      	ldr	r3, [pc, #32]	; (400f24 <vTaskDelay+0x34>)
  400f02:	6818      	ldr	r0, [r3, #0]
  400f04:	3004      	adds	r0, #4
  400f06:	4b08      	ldr	r3, [pc, #32]	; (400f28 <vTaskDelay+0x38>)
  400f08:	4798      	blx	r3
					/* The current task must be in a ready list, so there is
					no need to check, and the port reset macro can be called
					directly. */
					portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
				}
				prvAddCurrentTaskToDelayedList( xTimeToWake );
  400f0a:	4620      	mov	r0, r4
  400f0c:	4b07      	ldr	r3, [pc, #28]	; (400f2c <vTaskDelay+0x3c>)
  400f0e:	4798      	blx	r3
			}
			xAlreadyYielded = xTaskResumeAll();
  400f10:	4b07      	ldr	r3, [pc, #28]	; (400f30 <vTaskDelay+0x40>)
  400f12:	4798      	blx	r3
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
  400f14:	b908      	cbnz	r0, 400f1a <vTaskDelay+0x2a>
		{
			portYIELD_WITHIN_API();
  400f16:	4b07      	ldr	r3, [pc, #28]	; (400f34 <vTaskDelay+0x44>)
  400f18:	4798      	blx	r3
  400f1a:	bd10      	pop	{r4, pc}
  400f1c:	00400c9d 	.word	0x00400c9d
  400f20:	2000a55c 	.word	0x2000a55c
  400f24:	2000a540 	.word	0x2000a540
  400f28:	004001a1 	.word	0x004001a1
  400f2c:	004009d9 	.word	0x004009d9
  400f30:	00400ded 	.word	0x00400ded
  400f34:	00400219 	.word	0x00400219

00400f38 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
  400f38:	b580      	push	{r7, lr}
	{
		portBASE_TYPE xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0U )
  400f3a:	4d15      	ldr	r5, [pc, #84]	; (400f90 <prvIdleTask+0x58>)
		{
			vTaskSuspendAll();
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
  400f3c:	4e15      	ldr	r6, [pc, #84]	; (400f94 <prvIdleTask+0x5c>)

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0U )
		{
			vTaskSuspendAll();
  400f3e:	f8df 8074 	ldr.w	r8, [pc, #116]	; 400fb4 <prvIdleTask+0x7c>
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
			xTaskResumeAll();
  400f42:	4f15      	ldr	r7, [pc, #84]	; (400f98 <prvIdleTask+0x60>)
  400f44:	e019      	b.n	400f7a <prvIdleTask+0x42>

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0U )
		{
			vTaskSuspendAll();
  400f46:	47c0      	blx	r8
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
  400f48:	6834      	ldr	r4, [r6, #0]
			xTaskResumeAll();
  400f4a:	47b8      	blx	r7

			if( xListIsEmpty == pdFALSE )
  400f4c:	b1ac      	cbz	r4, 400f7a <prvIdleTask+0x42>
			{
				tskTCB *pxTCB;

				taskENTER_CRITICAL();
  400f4e:	4b13      	ldr	r3, [pc, #76]	; (400f9c <prvIdleTask+0x64>)
  400f50:	4798      	blx	r3
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( ( ( xList * ) &xTasksWaitingTermination ) );
  400f52:	68f3      	ldr	r3, [r6, #12]
  400f54:	68dc      	ldr	r4, [r3, #12]
					uxListRemove( &( pxTCB->xGenericListItem ) );
  400f56:	1d20      	adds	r0, r4, #4
  400f58:	4b11      	ldr	r3, [pc, #68]	; (400fa0 <prvIdleTask+0x68>)
  400f5a:	4798      	blx	r3
					--uxCurrentNumberOfTasks;
  400f5c:	4a11      	ldr	r2, [pc, #68]	; (400fa4 <prvIdleTask+0x6c>)
  400f5e:	6813      	ldr	r3, [r2, #0]
  400f60:	3b01      	subs	r3, #1
  400f62:	6013      	str	r3, [r2, #0]
					--uxTasksDeleted;
  400f64:	682b      	ldr	r3, [r5, #0]
  400f66:	3b01      	subs	r3, #1
  400f68:	602b      	str	r3, [r5, #0]
				}
				taskEXIT_CRITICAL();
  400f6a:	4b0f      	ldr	r3, [pc, #60]	; (400fa8 <prvIdleTask+0x70>)
  400f6c:	4798      	blx	r3
		want to allocate and clean RAM statically. */
		portCLEAN_UP_TCB( pxTCB );

		/* Free up the memory allocated by the scheduler for the task.  It is up to
		the task to free any memory allocated at the application level. */
		vPortFreeAligned( pxTCB->pxStack );
  400f6e:	6b20      	ldr	r0, [r4, #48]	; 0x30
  400f70:	f8df 9044 	ldr.w	r9, [pc, #68]	; 400fb8 <prvIdleTask+0x80>
  400f74:	47c8      	blx	r9
		vPortFree( pxTCB );
  400f76:	4620      	mov	r0, r4
  400f78:	47c8      	blx	r9
	{
		portBASE_TYPE xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0U )
  400f7a:	682b      	ldr	r3, [r5, #0]
  400f7c:	2b00      	cmp	r3, #0
  400f7e:	d1e2      	bne.n	400f46 <prvIdleTask+0xe>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( unsigned portBASE_TYPE ) 1 )
  400f80:	4b0a      	ldr	r3, [pc, #40]	; (400fac <prvIdleTask+0x74>)
  400f82:	681b      	ldr	r3, [r3, #0]
  400f84:	2b01      	cmp	r3, #1
  400f86:	d9f8      	bls.n	400f7a <prvIdleTask+0x42>
			{
				taskYIELD();
  400f88:	4b09      	ldr	r3, [pc, #36]	; (400fb0 <prvIdleTask+0x78>)
  400f8a:	4798      	blx	r3
  400f8c:	e7d7      	b.n	400f3e <prvIdleTask+0x6>
  400f8e:	bf00      	nop
  400f90:	2000a494 	.word	0x2000a494
  400f94:	2000a528 	.word	0x2000a528
  400f98:	00400ded 	.word	0x00400ded
  400f9c:	00400239 	.word	0x00400239
  400fa0:	004001a1 	.word	0x004001a1
  400fa4:	2000a568 	.word	0x2000a568
  400fa8:	00400259 	.word	0x00400259
  400fac:	2000a4c4 	.word	0x2000a4c4
  400fb0:	00400219 	.word	0x00400219
  400fb4:	00400c9d 	.word	0x00400c9d
  400fb8:	00400459 	.word	0x00400459

00400fbc <vTaskSwitchContext>:

#endif
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
  400fbc:	b510      	push	{r4, lr}
	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
  400fbe:	4b22      	ldr	r3, [pc, #136]	; (401048 <vTaskSwitchContext+0x8c>)
  400fc0:	681b      	ldr	r3, [r3, #0]
  400fc2:	b96b      	cbnz	r3, 400fe0 <vTaskSwitchContext+0x24>
		#endif

		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();

		taskSELECT_HIGHEST_PRIORITY_TASK();
  400fc4:	4b21      	ldr	r3, [pc, #132]	; (40104c <vTaskSwitchContext+0x90>)
  400fc6:	681b      	ldr	r3, [r3, #0]
  400fc8:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  400fcc:	009b      	lsls	r3, r3, #2
  400fce:	4a20      	ldr	r2, [pc, #128]	; (401050 <vTaskSwitchContext+0x94>)
  400fd0:	58d3      	ldr	r3, [r2, r3]
  400fd2:	b9cb      	cbnz	r3, 401008 <vTaskSwitchContext+0x4c>
  400fd4:	4b1d      	ldr	r3, [pc, #116]	; (40104c <vTaskSwitchContext+0x90>)
  400fd6:	681b      	ldr	r3, [r3, #0]
  400fd8:	b143      	cbz	r3, 400fec <vTaskSwitchContext+0x30>
  400fda:	4a1c      	ldr	r2, [pc, #112]	; (40104c <vTaskSwitchContext+0x90>)
  400fdc:	491c      	ldr	r1, [pc, #112]	; (401050 <vTaskSwitchContext+0x94>)
  400fde:	e009      	b.n	400ff4 <vTaskSwitchContext+0x38>
{
	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xMissedYield = pdTRUE;
  400fe0:	2201      	movs	r2, #1
  400fe2:	4b1c      	ldr	r3, [pc, #112]	; (401054 <vTaskSwitchContext+0x98>)
  400fe4:	601a      	str	r2, [r3, #0]
  400fe6:	bd10      	pop	{r4, pc}
		#endif

		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();

		taskSELECT_HIGHEST_PRIORITY_TASK();
  400fe8:	6813      	ldr	r3, [r2, #0]
  400fea:	b91b      	cbnz	r3, 400ff4 <vTaskSwitchContext+0x38>
  400fec:	4b1a      	ldr	r3, [pc, #104]	; (401058 <vTaskSwitchContext+0x9c>)
  400fee:	4798      	blx	r3
  400ff0:	bf00      	nop
  400ff2:	e7fd      	b.n	400ff0 <vTaskSwitchContext+0x34>
  400ff4:	6813      	ldr	r3, [r2, #0]
  400ff6:	3b01      	subs	r3, #1
  400ff8:	6013      	str	r3, [r2, #0]
  400ffa:	6813      	ldr	r3, [r2, #0]
  400ffc:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  401000:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
  401004:	2b00      	cmp	r3, #0
  401006:	d0ef      	beq.n	400fe8 <vTaskSwitchContext+0x2c>
  401008:	4b10      	ldr	r3, [pc, #64]	; (40104c <vTaskSwitchContext+0x90>)
  40100a:	681b      	ldr	r3, [r3, #0]
  40100c:	4a10      	ldr	r2, [pc, #64]	; (401050 <vTaskSwitchContext+0x94>)
  40100e:	0099      	lsls	r1, r3, #2
  401010:	18c8      	adds	r0, r1, r3
  401012:	eb02 0080 	add.w	r0, r2, r0, lsl #2
  401016:	6844      	ldr	r4, [r0, #4]
  401018:	6864      	ldr	r4, [r4, #4]
  40101a:	6044      	str	r4, [r0, #4]
  40101c:	4602      	mov	r2, r0
  40101e:	3208      	adds	r2, #8
  401020:	4294      	cmp	r4, r2
  401022:	d106      	bne.n	401032 <vTaskSwitchContext+0x76>
  401024:	6860      	ldr	r0, [r4, #4]
  401026:	eb03 0183 	add.w	r1, r3, r3, lsl #2
  40102a:	4a09      	ldr	r2, [pc, #36]	; (401050 <vTaskSwitchContext+0x94>)
  40102c:	eb02 0281 	add.w	r2, r2, r1, lsl #2
  401030:	6050      	str	r0, [r2, #4]
  401032:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  401036:	4a06      	ldr	r2, [pc, #24]	; (401050 <vTaskSwitchContext+0x94>)
  401038:	eb02 0383 	add.w	r3, r2, r3, lsl #2
  40103c:	685b      	ldr	r3, [r3, #4]
  40103e:	68da      	ldr	r2, [r3, #12]
  401040:	4b06      	ldr	r3, [pc, #24]	; (40105c <vTaskSwitchContext+0xa0>)
  401042:	601a      	str	r2, [r3, #0]
  401044:	bd10      	pop	{r4, pc}
  401046:	bf00      	nop
  401048:	2000a558 	.word	0x2000a558
  40104c:	2000a4c0 	.word	0x2000a4c0
  401050:	2000a4c4 	.word	0x2000a4c4
  401054:	2000a56c 	.word	0x2000a56c
  401058:	00400229 	.word	0x00400229
  40105c:	2000a540 	.word	0x2000a540

00401060 <vTaskPlaceOnEventList>:
	}
}
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( const xList * const pxEventList, portTickType xTicksToWait )
{
  401060:	b538      	push	{r3, r4, r5, lr}
portTickType xTimeToWake;

	configASSERT( pxEventList );
  401062:	b918      	cbnz	r0, 40106c <vTaskPlaceOnEventList+0xc>
  401064:	4b0e      	ldr	r3, [pc, #56]	; (4010a0 <vTaskPlaceOnEventList+0x40>)
  401066:	4798      	blx	r3
  401068:	bf00      	nop
  40106a:	e7fd      	b.n	401068 <vTaskPlaceOnEventList+0x8>
  40106c:	460c      	mov	r4, r1
	SCHEDULER SUSPENDED. */

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event. */
	vListInsert( ( xList * ) pxEventList, ( xListItem * ) &( pxCurrentTCB->xEventListItem ) );
  40106e:	4d0d      	ldr	r5, [pc, #52]	; (4010a4 <vTaskPlaceOnEventList+0x44>)
  401070:	6829      	ldr	r1, [r5, #0]
  401072:	3118      	adds	r1, #24
  401074:	4b0c      	ldr	r3, [pc, #48]	; (4010a8 <vTaskPlaceOnEventList+0x48>)
  401076:	4798      	blx	r3

	/* We must remove ourselves from the ready list before adding ourselves
	to the blocked list as the same list item is used for both lists.  We have
	exclusive access to the ready lists as the scheduler is locked. */
	if( uxListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) ) == 0 )
  401078:	6828      	ldr	r0, [r5, #0]
  40107a:	3004      	adds	r0, #4
  40107c:	4b0b      	ldr	r3, [pc, #44]	; (4010ac <vTaskPlaceOnEventList+0x4c>)
  40107e:	4798      	blx	r3
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( xTicksToWait == portMAX_DELAY )
  401080:	f1b4 3fff 	cmp.w	r4, #4294967295
  401084:	d105      	bne.n	401092 <vTaskPlaceOnEventList+0x32>
		{
			/* Add ourselves to the suspended task list instead of a delayed task
			list to ensure we are not woken by a timing event.  We will block
			indefinitely. */
			vListInsertEnd( ( xList * ) &xSuspendedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
  401086:	6829      	ldr	r1, [r5, #0]
  401088:	4809      	ldr	r0, [pc, #36]	; (4010b0 <vTaskPlaceOnEventList+0x50>)
  40108a:	3104      	adds	r1, #4
  40108c:	4b09      	ldr	r3, [pc, #36]	; (4010b4 <vTaskPlaceOnEventList+0x54>)
  40108e:	4798      	blx	r3
  401090:	bd38      	pop	{r3, r4, r5, pc}
		}
		else
		{
			/* Calculate the time at which the task should be woken if the event does
			not occur.  This may overflow but this doesn't matter. */
			xTimeToWake = xTickCount + xTicksToWait;
  401092:	4b09      	ldr	r3, [pc, #36]	; (4010b8 <vTaskPlaceOnEventList+0x58>)
  401094:	6818      	ldr	r0, [r3, #0]
			prvAddCurrentTaskToDelayedList( xTimeToWake );
  401096:	4420      	add	r0, r4
  401098:	4b08      	ldr	r3, [pc, #32]	; (4010bc <vTaskPlaceOnEventList+0x5c>)
  40109a:	4798      	blx	r3
  40109c:	bd38      	pop	{r3, r4, r5, pc}
  40109e:	bf00      	nop
  4010a0:	00400229 	.word	0x00400229
  4010a4:	2000a540 	.word	0x2000a540
  4010a8:	00400165 	.word	0x00400165
  4010ac:	004001a1 	.word	0x004001a1
  4010b0:	2000a478 	.word	0x2000a478
  4010b4:	00400149 	.word	0x00400149
  4010b8:	2000a55c 	.word	0x2000a55c
  4010bc:	004009d9 	.word	0x004009d9

004010c0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if configUSE_TIMERS == 1

	void vTaskPlaceOnEventListRestricted( const xList * const pxEventList, portTickType xTicksToWait )
	{
  4010c0:	b538      	push	{r3, r4, r5, lr}
	portTickType xTimeToWake;

		configASSERT( pxEventList );
  4010c2:	b918      	cbnz	r0, 4010cc <vTaskPlaceOnEventListRestricted+0xc>
  4010c4:	4b09      	ldr	r3, [pc, #36]	; (4010ec <vTaskPlaceOnEventListRestricted+0x2c>)
  4010c6:	4798      	blx	r3
  4010c8:	bf00      	nop
  4010ca:	e7fd      	b.n	4010c8 <vTaskPlaceOnEventListRestricted+0x8>
  4010cc:	460d      	mov	r5, r1

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( ( xList * ) pxEventList, ( xListItem * ) &( pxCurrentTCB->xEventListItem ) );
  4010ce:	4c08      	ldr	r4, [pc, #32]	; (4010f0 <vTaskPlaceOnEventListRestricted+0x30>)
  4010d0:	6821      	ldr	r1, [r4, #0]
  4010d2:	3118      	adds	r1, #24
  4010d4:	4b07      	ldr	r3, [pc, #28]	; (4010f4 <vTaskPlaceOnEventListRestricted+0x34>)
  4010d6:	4798      	blx	r3

		/* We must remove this task from the ready list before adding it to the
		blocked list as the same list item is used for both lists.  This
		function is called form a critical section. */
		if( uxListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) ) == 0 )
  4010d8:	6820      	ldr	r0, [r4, #0]
  4010da:	3004      	adds	r0, #4
  4010dc:	4b06      	ldr	r3, [pc, #24]	; (4010f8 <vTaskPlaceOnEventListRestricted+0x38>)
  4010de:	4798      	blx	r3
			portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
		}

		/* Calculate the time at which the task should be woken if the event does
		not occur.  This may overflow but this doesn't matter. */
		xTimeToWake = xTickCount + xTicksToWait;
  4010e0:	4b06      	ldr	r3, [pc, #24]	; (4010fc <vTaskPlaceOnEventListRestricted+0x3c>)
  4010e2:	6818      	ldr	r0, [r3, #0]
		
		traceTASK_DELAY_UNTIL();
		prvAddCurrentTaskToDelayedList( xTimeToWake );
  4010e4:	4428      	add	r0, r5
  4010e6:	4b06      	ldr	r3, [pc, #24]	; (401100 <vTaskPlaceOnEventListRestricted+0x40>)
  4010e8:	4798      	blx	r3
  4010ea:	bd38      	pop	{r3, r4, r5, pc}
  4010ec:	00400229 	.word	0x00400229
  4010f0:	2000a540 	.word	0x2000a540
  4010f4:	00400149 	.word	0x00400149
  4010f8:	004001a1 	.word	0x004001a1
  4010fc:	2000a55c 	.word	0x2000a55c
  401100:	004009d9 	.word	0x004009d9

00401104 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xTaskRemoveFromEventList( const xList * const pxEventList )
{
  401104:	b538      	push	{r3, r4, r5, lr}
	get called - the lock count on the queue will get modified instead.  This
	means we can always expect exclusive access to the event list here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
  401106:	68c3      	ldr	r3, [r0, #12]
  401108:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
  40110a:	b91c      	cbnz	r4, 401114 <xTaskRemoveFromEventList+0x10>
  40110c:	4b16      	ldr	r3, [pc, #88]	; (401168 <xTaskRemoveFromEventList+0x64>)
  40110e:	4798      	blx	r3
  401110:	bf00      	nop
  401112:	e7fd      	b.n	401110 <xTaskRemoveFromEventList+0xc>
	uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
  401114:	f104 0518 	add.w	r5, r4, #24
  401118:	4628      	mov	r0, r5
  40111a:	4b14      	ldr	r3, [pc, #80]	; (40116c <xTaskRemoveFromEventList+0x68>)
  40111c:	4798      	blx	r3

	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
  40111e:	4b14      	ldr	r3, [pc, #80]	; (401170 <xTaskRemoveFromEventList+0x6c>)
  401120:	681b      	ldr	r3, [r3, #0]
  401122:	b99b      	cbnz	r3, 40114c <xTaskRemoveFromEventList+0x48>
	{
		uxListRemove( &( pxUnblockedTCB->xGenericListItem ) );
  401124:	1d25      	adds	r5, r4, #4
  401126:	4628      	mov	r0, r5
  401128:	4b10      	ldr	r3, [pc, #64]	; (40116c <xTaskRemoveFromEventList+0x68>)
  40112a:	4798      	blx	r3
		prvAddTaskToReadyQueue( pxUnblockedTCB );
  40112c:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  40112e:	4b11      	ldr	r3, [pc, #68]	; (401174 <xTaskRemoveFromEventList+0x70>)
  401130:	681b      	ldr	r3, [r3, #0]
  401132:	4298      	cmp	r0, r3
  401134:	bf84      	itt	hi
  401136:	4b0f      	ldrhi	r3, [pc, #60]	; (401174 <xTaskRemoveFromEventList+0x70>)
  401138:	6018      	strhi	r0, [r3, #0]
  40113a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  40113e:	4b0e      	ldr	r3, [pc, #56]	; (401178 <xTaskRemoveFromEventList+0x74>)
  401140:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  401144:	4629      	mov	r1, r5
  401146:	4b0d      	ldr	r3, [pc, #52]	; (40117c <xTaskRemoveFromEventList+0x78>)
  401148:	4798      	blx	r3
  40114a:	e003      	b.n	401154 <xTaskRemoveFromEventList+0x50>
	}
	else
	{
		/* We cannot access the delayed or ready lists, so will hold this
		task pending until the scheduler is resumed. */
		vListInsertEnd( ( xList * ) &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
  40114c:	480c      	ldr	r0, [pc, #48]	; (401180 <xTaskRemoveFromEventList+0x7c>)
  40114e:	4629      	mov	r1, r5
  401150:	4b0a      	ldr	r3, [pc, #40]	; (40117c <xTaskRemoveFromEventList+0x78>)
  401152:	4798      	blx	r3
	}

	if( pxUnblockedTCB->uxPriority >= pxCurrentTCB->uxPriority )
  401154:	4b0b      	ldr	r3, [pc, #44]	; (401184 <xTaskRemoveFromEventList+0x80>)
  401156:	681b      	ldr	r3, [r3, #0]
  401158:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  40115a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	{
		xReturn = pdFALSE;
	}

	return xReturn;
}
  40115c:	4298      	cmp	r0, r3
  40115e:	bf34      	ite	cc
  401160:	2000      	movcc	r0, #0
  401162:	2001      	movcs	r0, #1
  401164:	bd38      	pop	{r3, r4, r5, pc}
  401166:	bf00      	nop
  401168:	00400229 	.word	0x00400229
  40116c:	004001a1 	.word	0x004001a1
  401170:	2000a558 	.word	0x2000a558
  401174:	2000a4c0 	.word	0x2000a4c0
  401178:	2000a4c4 	.word	0x2000a4c4
  40117c:	00400149 	.word	0x00400149
  401180:	2000a544 	.word	0x2000a544
  401184:	2000a540 	.word	0x2000a540

00401188 <vTaskSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( xTimeOutType * const pxTimeOut )
{
  401188:	b508      	push	{r3, lr}
	configASSERT( pxTimeOut );
  40118a:	b918      	cbnz	r0, 401194 <vTaskSetTimeOutState+0xc>
  40118c:	4b05      	ldr	r3, [pc, #20]	; (4011a4 <vTaskSetTimeOutState+0x1c>)
  40118e:	4798      	blx	r3
  401190:	bf00      	nop
  401192:	e7fd      	b.n	401190 <vTaskSetTimeOutState+0x8>
	pxTimeOut->xOverflowCount = xNumOfOverflows;
  401194:	4a04      	ldr	r2, [pc, #16]	; (4011a8 <vTaskSetTimeOutState+0x20>)
  401196:	6812      	ldr	r2, [r2, #0]
  401198:	6002      	str	r2, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
  40119a:	4a04      	ldr	r2, [pc, #16]	; (4011ac <vTaskSetTimeOutState+0x24>)
  40119c:	6812      	ldr	r2, [r2, #0]
  40119e:	6042      	str	r2, [r0, #4]
  4011a0:	bd08      	pop	{r3, pc}
  4011a2:	bf00      	nop
  4011a4:	00400229 	.word	0x00400229
  4011a8:	2000a53c 	.word	0x2000a53c
  4011ac:	2000a55c 	.word	0x2000a55c

004011b0 <xTaskCheckForTimeOut>:
}
/*-----------------------------------------------------------*/

portBASE_TYPE xTaskCheckForTimeOut( xTimeOutType * const pxTimeOut, portTickType * const pxTicksToWait )
{
  4011b0:	b538      	push	{r3, r4, r5, lr}
portBASE_TYPE xReturn;

	configASSERT( pxTimeOut );
  4011b2:	b918      	cbnz	r0, 4011bc <xTaskCheckForTimeOut+0xc>
  4011b4:	4b19      	ldr	r3, [pc, #100]	; (40121c <xTaskCheckForTimeOut+0x6c>)
  4011b6:	4798      	blx	r3
  4011b8:	bf00      	nop
  4011ba:	e7fd      	b.n	4011b8 <xTaskCheckForTimeOut+0x8>
  4011bc:	460d      	mov	r5, r1
  4011be:	4604      	mov	r4, r0
	configASSERT( pxTicksToWait );
  4011c0:	b919      	cbnz	r1, 4011ca <xTaskCheckForTimeOut+0x1a>
  4011c2:	4b16      	ldr	r3, [pc, #88]	; (40121c <xTaskCheckForTimeOut+0x6c>)
  4011c4:	4798      	blx	r3
  4011c6:	bf00      	nop
  4011c8:	e7fd      	b.n	4011c6 <xTaskCheckForTimeOut+0x16>

	taskENTER_CRITICAL();
  4011ca:	4b15      	ldr	r3, [pc, #84]	; (401220 <xTaskCheckForTimeOut+0x70>)
  4011cc:	4798      	blx	r3
	{
		#if ( INCLUDE_vTaskSuspend == 1 )
			/* If INCLUDE_vTaskSuspend is set to 1 and the block time specified is
			the maximum block time then the task should block indefinitely, and
			therefore never time out. */
			if( *pxTicksToWait == portMAX_DELAY )
  4011ce:	682b      	ldr	r3, [r5, #0]
  4011d0:	f1b3 3fff 	cmp.w	r3, #4294967295
  4011d4:	d018      	beq.n	401208 <xTaskCheckForTimeOut+0x58>
				xReturn = pdFALSE;
			}
			else /* We are not blocking indefinitely, perform the checks below. */
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( ( portTickType ) xTickCount >= ( portTickType ) pxTimeOut->xTimeOnEntering ) )
  4011d6:	4a13      	ldr	r2, [pc, #76]	; (401224 <xTaskCheckForTimeOut+0x74>)
  4011d8:	6812      	ldr	r2, [r2, #0]
  4011da:	6821      	ldr	r1, [r4, #0]
  4011dc:	4291      	cmp	r1, r2
  4011de:	d004      	beq.n	4011ea <xTaskCheckForTimeOut+0x3a>
  4011e0:	4a11      	ldr	r2, [pc, #68]	; (401228 <xTaskCheckForTimeOut+0x78>)
  4011e2:	6812      	ldr	r2, [r2, #0]
  4011e4:	6861      	ldr	r1, [r4, #4]
  4011e6:	4291      	cmp	r1, r2
  4011e8:	d910      	bls.n	40120c <xTaskCheckForTimeOut+0x5c>
			was called, but has also overflowed since vTaskSetTimeOut() was called.
			It must have wrapped all the way around and gone past us again. This
			passed since vTaskSetTimeout() was called. */
			xReturn = pdTRUE;
		}
		else if( ( ( portTickType ) ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEntering ) ) < ( portTickType ) *pxTicksToWait )
  4011ea:	4a0f      	ldr	r2, [pc, #60]	; (401228 <xTaskCheckForTimeOut+0x78>)
  4011ec:	6811      	ldr	r1, [r2, #0]
  4011ee:	6860      	ldr	r0, [r4, #4]
  4011f0:	1a09      	subs	r1, r1, r0
  4011f2:	428b      	cmp	r3, r1
  4011f4:	d90c      	bls.n	401210 <xTaskCheckForTimeOut+0x60>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEntering );
  4011f6:	6812      	ldr	r2, [r2, #0]
  4011f8:	1a12      	subs	r2, r2, r0
  4011fa:	1a9b      	subs	r3, r3, r2
  4011fc:	602b      	str	r3, [r5, #0]
			vTaskSetTimeOutState( pxTimeOut );
  4011fe:	4620      	mov	r0, r4
  401200:	4b0a      	ldr	r3, [pc, #40]	; (40122c <xTaskCheckForTimeOut+0x7c>)
  401202:	4798      	blx	r3
			xReturn = pdFALSE;
  401204:	2400      	movs	r4, #0
  401206:	e004      	b.n	401212 <xTaskCheckForTimeOut+0x62>
			/* If INCLUDE_vTaskSuspend is set to 1 and the block time specified is
			the maximum block time then the task should block indefinitely, and
			therefore never time out. */
			if( *pxTicksToWait == portMAX_DELAY )
			{
				xReturn = pdFALSE;
  401208:	2400      	movs	r4, #0
  40120a:	e002      	b.n	401212 <xTaskCheckForTimeOut+0x62>
		{
			/* The tick count is greater than the time at which vTaskSetTimeout()
			was called, but has also overflowed since vTaskSetTimeOut() was called.
			It must have wrapped all the way around and gone past us again. This
			passed since vTaskSetTimeout() was called. */
			xReturn = pdTRUE;
  40120c:	2401      	movs	r4, #1
  40120e:	e000      	b.n	401212 <xTaskCheckForTimeOut+0x62>
			vTaskSetTimeOutState( pxTimeOut );
			xReturn = pdFALSE;
		}
		else
		{
			xReturn = pdTRUE;
  401210:	2401      	movs	r4, #1
		}
	}
	taskEXIT_CRITICAL();
  401212:	4b07      	ldr	r3, [pc, #28]	; (401230 <xTaskCheckForTimeOut+0x80>)
  401214:	4798      	blx	r3

	return xReturn;
}
  401216:	4620      	mov	r0, r4
  401218:	bd38      	pop	{r3, r4, r5, pc}
  40121a:	bf00      	nop
  40121c:	00400229 	.word	0x00400229
  401220:	00400239 	.word	0x00400239
  401224:	2000a53c 	.word	0x2000a53c
  401228:	2000a55c 	.word	0x2000a55c
  40122c:	00401189 	.word	0x00401189
  401230:	00400259 	.word	0x00400259

00401234 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
	xMissedYield = pdTRUE;
  401234:	2201      	movs	r2, #1
  401236:	4b01      	ldr	r3, [pc, #4]	; (40123c <vTaskMissedYield+0x8>)
  401238:	601a      	str	r2, [r3, #0]
  40123a:	4770      	bx	lr
  40123c:	2000a56c 	.word	0x2000a56c

00401240 <xTaskGetCurrentTaskHandle>:
	xTaskHandle xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
  401240:	4b01      	ldr	r3, [pc, #4]	; (401248 <xTaskGetCurrentTaskHandle+0x8>)
  401242:	6818      	ldr	r0, [r3, #0]

		return xReturn;
	}
  401244:	4770      	bx	lr
  401246:	bf00      	nop
  401248:	2000a540 	.word	0x2000a540

0040124c <xTaskGetSchedulerState>:

	portBASE_TYPE xTaskGetSchedulerState( void )
	{
	portBASE_TYPE xReturn;

		if( xSchedulerRunning == pdFALSE )
  40124c:	4b05      	ldr	r3, [pc, #20]	; (401264 <xTaskGetSchedulerState+0x18>)
  40124e:	681b      	ldr	r3, [r3, #0]
  401250:	b133      	cbz	r3, 401260 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
		}
		else
		{
			if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
  401252:	4b05      	ldr	r3, [pc, #20]	; (401268 <xTaskGetSchedulerState+0x1c>)
  401254:	681b      	ldr	r3, [r3, #0]
			{
				xReturn = taskSCHEDULER_RUNNING;
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
  401256:	2b00      	cmp	r3, #0
  401258:	bf0c      	ite	eq
  40125a:	2001      	moveq	r0, #1
  40125c:	2002      	movne	r0, #2
  40125e:	4770      	bx	lr
	{
	portBASE_TYPE xReturn;

		if( xSchedulerRunning == pdFALSE )
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
  401260:	2000      	movs	r0, #0
				xReturn = taskSCHEDULER_SUSPENDED;
			}
		}

		return xReturn;
	}
  401262:	4770      	bx	lr
  401264:	2000a490 	.word	0x2000a490
  401268:	2000a558 	.word	0x2000a558

0040126c <vTaskPriorityInherit>:
	{
	tskTCB * const pxTCB = ( tskTCB * ) pxMutexHolder;

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL. */
		if( pxMutexHolder != NULL )
  40126c:	2800      	cmp	r0, #0
  40126e:	d031      	beq.n	4012d4 <vTaskPriorityInherit+0x68>
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityInherit( xTaskHandle * const pxMutexHolder )
	{
  401270:	b538      	push	{r3, r4, r5, lr}

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL. */
		if( pxMutexHolder != NULL )
		{
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
  401272:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  401274:	4918      	ldr	r1, [pc, #96]	; (4012d8 <vTaskPriorityInherit+0x6c>)
  401276:	6809      	ldr	r1, [r1, #0]
  401278:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
  40127a:	428b      	cmp	r3, r1
  40127c:	d229      	bcs.n	4012d2 <vTaskPriorityInherit+0x66>
			{
				/* Adjust the mutex holder state to account for its new priority. */
				listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) pxCurrentTCB->uxPriority );
  40127e:	4916      	ldr	r1, [pc, #88]	; (4012d8 <vTaskPriorityInherit+0x6c>)
  401280:	6809      	ldr	r1, [r1, #0]
  401282:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
  401284:	f1c1 0105 	rsb	r1, r1, #5
  401288:	6181      	str	r1, [r0, #24]

				/* If the task being modified is in the ready state it will need to
				be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xGenericListItem ) ) != pdFALSE )
  40128a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  40128e:	4913      	ldr	r1, [pc, #76]	; (4012dc <vTaskPriorityInherit+0x70>)
  401290:	eb01 0383 	add.w	r3, r1, r3, lsl #2
  401294:	6941      	ldr	r1, [r0, #20]
  401296:	4299      	cmp	r1, r3
  401298:	d117      	bne.n	4012ca <vTaskPriorityInherit+0x5e>
  40129a:	4605      	mov	r5, r0
				{
					if( uxListRemove( ( xListItem * ) &( pxTCB->xGenericListItem ) ) == 0 )
  40129c:	1d04      	adds	r4, r0, #4
  40129e:	4620      	mov	r0, r4
  4012a0:	4b0f      	ldr	r3, [pc, #60]	; (4012e0 <vTaskPriorityInherit+0x74>)
  4012a2:	4798      	blx	r3
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
					}

					/* Inherit the priority before being moved into the new list. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
  4012a4:	4b0c      	ldr	r3, [pc, #48]	; (4012d8 <vTaskPriorityInherit+0x6c>)
  4012a6:	681b      	ldr	r3, [r3, #0]
  4012a8:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
  4012aa:	62e8      	str	r0, [r5, #44]	; 0x2c
					prvAddTaskToReadyQueue( pxTCB );
  4012ac:	4b0d      	ldr	r3, [pc, #52]	; (4012e4 <vTaskPriorityInherit+0x78>)
  4012ae:	681b      	ldr	r3, [r3, #0]
  4012b0:	4298      	cmp	r0, r3
  4012b2:	bf84      	itt	hi
  4012b4:	4b0b      	ldrhi	r3, [pc, #44]	; (4012e4 <vTaskPriorityInherit+0x78>)
  4012b6:	6018      	strhi	r0, [r3, #0]
  4012b8:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  4012bc:	4b07      	ldr	r3, [pc, #28]	; (4012dc <vTaskPriorityInherit+0x70>)
  4012be:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  4012c2:	4621      	mov	r1, r4
  4012c4:	4b08      	ldr	r3, [pc, #32]	; (4012e8 <vTaskPriorityInherit+0x7c>)
  4012c6:	4798      	blx	r3
  4012c8:	bd38      	pop	{r3, r4, r5, pc}
				}
				else
				{
					/* Just inherit the priority. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
  4012ca:	4b03      	ldr	r3, [pc, #12]	; (4012d8 <vTaskPriorityInherit+0x6c>)
  4012cc:	681b      	ldr	r3, [r3, #0]
  4012ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  4012d0:	62c3      	str	r3, [r0, #44]	; 0x2c
  4012d2:	bd38      	pop	{r3, r4, r5, pc}
  4012d4:	4770      	bx	lr
  4012d6:	bf00      	nop
  4012d8:	2000a540 	.word	0x2000a540
  4012dc:	2000a4c4 	.word	0x2000a4c4
  4012e0:	004001a1 	.word	0x004001a1
  4012e4:	2000a4c0 	.word	0x2000a4c0
  4012e8:	00400149 	.word	0x00400149

004012ec <vTaskPriorityDisinherit>:

	void vTaskPriorityDisinherit( xTaskHandle * const pxMutexHolder )
	{
	tskTCB * const pxTCB = ( tskTCB * ) pxMutexHolder;

		if( pxMutexHolder != NULL )
  4012ec:	b1e8      	cbz	r0, 40132a <vTaskPriorityDisinherit+0x3e>
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinherit( xTaskHandle * const pxMutexHolder )
	{
  4012ee:	b538      	push	{r3, r4, r5, lr}
	tskTCB * const pxTCB = ( tskTCB * ) pxMutexHolder;

		if( pxMutexHolder != NULL )
		{
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
  4012f0:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
  4012f2:	6c82      	ldr	r2, [r0, #72]	; 0x48
  4012f4:	4291      	cmp	r1, r2
  4012f6:	d017      	beq.n	401328 <vTaskPriorityDisinherit+0x3c>
  4012f8:	4604      	mov	r4, r0
			{
				/* We must be the running task to be able to give the mutex back.
				Remove ourselves from the ready list we currently appear in. */
				if( uxListRemove( ( xListItem * ) &( pxTCB->xGenericListItem ) ) == 0 )
  4012fa:	1d05      	adds	r5, r0, #4
  4012fc:	4628      	mov	r0, r5
  4012fe:	4b0b      	ldr	r3, [pc, #44]	; (40132c <vTaskPriorityDisinherit+0x40>)
  401300:	4798      	blx	r3
				}

				/* Disinherit the priority before adding the task into the new
				ready list. */
				traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
				pxTCB->uxPriority = pxTCB->uxBasePriority;
  401302:	6ca0      	ldr	r0, [r4, #72]	; 0x48
  401304:	62e0      	str	r0, [r4, #44]	; 0x2c
				listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) pxTCB->uxPriority );
  401306:	f1c0 0305 	rsb	r3, r0, #5
  40130a:	61a3      	str	r3, [r4, #24]
				prvAddTaskToReadyQueue( pxTCB );
  40130c:	4b08      	ldr	r3, [pc, #32]	; (401330 <vTaskPriorityDisinherit+0x44>)
  40130e:	681b      	ldr	r3, [r3, #0]
  401310:	4298      	cmp	r0, r3
  401312:	bf84      	itt	hi
  401314:	4b06      	ldrhi	r3, [pc, #24]	; (401330 <vTaskPriorityDisinherit+0x44>)
  401316:	6018      	strhi	r0, [r3, #0]
  401318:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  40131c:	4b05      	ldr	r3, [pc, #20]	; (401334 <vTaskPriorityDisinherit+0x48>)
  40131e:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  401322:	4629      	mov	r1, r5
  401324:	4b04      	ldr	r3, [pc, #16]	; (401338 <vTaskPriorityDisinherit+0x4c>)
  401326:	4798      	blx	r3
  401328:	bd38      	pop	{r3, r4, r5, pc}
  40132a:	4770      	bx	lr
  40132c:	004001a1 	.word	0x004001a1
  401330:	2000a4c0 	.word	0x2000a4c0
  401334:	2000a4c4 	.word	0x2000a4c4
  401338:	00400149 	.word	0x00400149

0040133c <prvInsertTimerInActiveList>:
	return xTimeNow;
}
/*-----------------------------------------------------------*/

static portBASE_TYPE prvInsertTimerInActiveList( xTIMER *pxTimer, portTickType xNextExpiryTime, portTickType xTimeNow, portTickType xCommandTime )
{
  40133c:	b510      	push	{r4, lr}
  40133e:	4604      	mov	r4, r0
portBASE_TYPE xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
  401340:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
  401342:	6120      	str	r0, [r4, #16]

	if( xNextExpiryTime <= xTimeNow )
  401344:	4291      	cmp	r1, r2
  401346:	d80a      	bhi.n	40135e <prvInsertTimerInActiveList+0x22>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( portTickType ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks )
  401348:	1ad2      	subs	r2, r2, r3
  40134a:	6983      	ldr	r3, [r0, #24]
  40134c:	429a      	cmp	r2, r3
  40134e:	d211      	bcs.n	401374 <prvInsertTimerInActiveList+0x38>
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
  401350:	4b0a      	ldr	r3, [pc, #40]	; (40137c <prvInsertTimerInActiveList+0x40>)
  401352:	6818      	ldr	r0, [r3, #0]
  401354:	1d21      	adds	r1, r4, #4
  401356:	4b0a      	ldr	r3, [pc, #40]	; (401380 <prvInsertTimerInActiveList+0x44>)
  401358:	4798      	blx	r3
}
/*-----------------------------------------------------------*/

static portBASE_TYPE prvInsertTimerInActiveList( xTIMER *pxTimer, portTickType xNextExpiryTime, portTickType xTimeNow, portTickType xCommandTime )
{
portBASE_TYPE xProcessTimerNow = pdFALSE;
  40135a:	2000      	movs	r0, #0
  40135c:	bd10      	pop	{r4, pc}
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
  40135e:	429a      	cmp	r2, r3
  401360:	d201      	bcs.n	401366 <prvInsertTimerInActiveList+0x2a>
  401362:	4299      	cmp	r1, r3
  401364:	d208      	bcs.n	401378 <prvInsertTimerInActiveList+0x3c>
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
  401366:	4b07      	ldr	r3, [pc, #28]	; (401384 <prvInsertTimerInActiveList+0x48>)
  401368:	6818      	ldr	r0, [r3, #0]
  40136a:	1d21      	adds	r1, r4, #4
  40136c:	4b04      	ldr	r3, [pc, #16]	; (401380 <prvInsertTimerInActiveList+0x44>)
  40136e:	4798      	blx	r3
}
/*-----------------------------------------------------------*/

static portBASE_TYPE prvInsertTimerInActiveList( xTIMER *pxTimer, portTickType xNextExpiryTime, portTickType xTimeNow, portTickType xCommandTime )
{
portBASE_TYPE xProcessTimerNow = pdFALSE;
  401370:	2000      	movs	r0, #0
  401372:	bd10      	pop	{r4, pc}
		timer was issued, and the time the command was processed? */
		if( ( ( portTickType ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks )
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
  401374:	2001      	movs	r0, #1
  401376:	bd10      	pop	{r4, pc}
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
  401378:	2001      	movs	r0, #1
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
		}
	}

	return xProcessTimerNow;
}
  40137a:	bd10      	pop	{r4, pc}
  40137c:	2000a5a8 	.word	0x2000a5a8
  401380:	00400165 	.word	0x00400165
  401384:	2000a574 	.word	0x2000a574

00401388 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
  401388:	b570      	push	{r4, r5, r6, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
  40138a:	4b0d      	ldr	r3, [pc, #52]	; (4013c0 <prvCheckForValidListAndQueue+0x38>)
  40138c:	4798      	blx	r3
	{
		if( xTimerQueue == NULL )
  40138e:	4b0d      	ldr	r3, [pc, #52]	; (4013c4 <prvCheckForValidListAndQueue+0x3c>)
  401390:	681b      	ldr	r3, [r3, #0]
  401392:	b98b      	cbnz	r3, 4013b8 <prvCheckForValidListAndQueue+0x30>
		{
			vListInitialise( &xActiveTimerList1 );
  401394:	4d0c      	ldr	r5, [pc, #48]	; (4013c8 <prvCheckForValidListAndQueue+0x40>)
  401396:	4628      	mov	r0, r5
  401398:	4e0c      	ldr	r6, [pc, #48]	; (4013cc <prvCheckForValidListAndQueue+0x44>)
  40139a:	47b0      	blx	r6
			vListInitialise( &xActiveTimerList2 );
  40139c:	4c0c      	ldr	r4, [pc, #48]	; (4013d0 <prvCheckForValidListAndQueue+0x48>)
  40139e:	4620      	mov	r0, r4
  4013a0:	47b0      	blx	r6
			pxCurrentTimerList = &xActiveTimerList1;
  4013a2:	4b0c      	ldr	r3, [pc, #48]	; (4013d4 <prvCheckForValidListAndQueue+0x4c>)
  4013a4:	601d      	str	r5, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
  4013a6:	4b0c      	ldr	r3, [pc, #48]	; (4013d8 <prvCheckForValidListAndQueue+0x50>)
  4013a8:	601c      	str	r4, [r3, #0]
			xTimerQueue = xQueueCreate( ( unsigned portBASE_TYPE ) configTIMER_QUEUE_LENGTH, sizeof( xTIMER_MESSAGE ) );
  4013aa:	2005      	movs	r0, #5
  4013ac:	210c      	movs	r1, #12
  4013ae:	2200      	movs	r2, #0
  4013b0:	4b0a      	ldr	r3, [pc, #40]	; (4013dc <prvCheckForValidListAndQueue+0x54>)
  4013b2:	4798      	blx	r3
  4013b4:	4b03      	ldr	r3, [pc, #12]	; (4013c4 <prvCheckForValidListAndQueue+0x3c>)
  4013b6:	6018      	str	r0, [r3, #0]
		}
	}
	taskEXIT_CRITICAL();
  4013b8:	4b09      	ldr	r3, [pc, #36]	; (4013e0 <prvCheckForValidListAndQueue+0x58>)
  4013ba:	4798      	blx	r3
  4013bc:	bd70      	pop	{r4, r5, r6, pc}
  4013be:	bf00      	nop
  4013c0:	00400239 	.word	0x00400239
  4013c4:	2000a5a4 	.word	0x2000a5a4
  4013c8:	2000a578 	.word	0x2000a578
  4013cc:	00400129 	.word	0x00400129
  4013d0:	2000a58c 	.word	0x2000a58c
  4013d4:	2000a574 	.word	0x2000a574
  4013d8:	2000a5a8 	.word	0x2000a5a8
  4013dc:	00400629 	.word	0x00400629
  4013e0:	00400259 	.word	0x00400259

004013e4 <xTimerCreateTimerTask>:
static void prvProcessTimerOrBlockTask( portTickType xNextExpireTime, portBASE_TYPE xListWasEmpty ) PRIVILEGED_FUNCTION;

/*-----------------------------------------------------------*/

portBASE_TYPE xTimerCreateTimerTask( void )
{
  4013e4:	b510      	push	{r4, lr}
  4013e6:	b084      	sub	sp, #16

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
  4013e8:	4b0b      	ldr	r3, [pc, #44]	; (401418 <xTimerCreateTimerTask+0x34>)
  4013ea:	4798      	blx	r3

	if( xTimerQueue != NULL )
  4013ec:	4b0b      	ldr	r3, [pc, #44]	; (40141c <xTimerCreateTimerTask+0x38>)
  4013ee:	681b      	ldr	r3, [r3, #0]
  4013f0:	b163      	cbz	r3, 40140c <xTimerCreateTimerTask+0x28>
			xReturn = xTaskCreate( prvTimerTask, ( const signed char * ) "Tmr Svc", ( unsigned short ) configTIMER_TASK_STACK_DEPTH, NULL, ( ( unsigned portBASE_TYPE ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT, &xTimerTaskHandle );
		}
		#else
		{
			/* Create the timer task without storing its handle. */
			xReturn = xTaskCreate( prvTimerTask, ( const signed char * ) "Tmr Svc", ( unsigned short ) configTIMER_TASK_STACK_DEPTH, NULL, ( ( unsigned portBASE_TYPE ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT, NULL);
  4013f2:	2304      	movs	r3, #4
  4013f4:	9300      	str	r3, [sp, #0]
  4013f6:	2300      	movs	r3, #0
  4013f8:	9301      	str	r3, [sp, #4]
  4013fa:	9302      	str	r3, [sp, #8]
  4013fc:	9303      	str	r3, [sp, #12]
  4013fe:	4808      	ldr	r0, [pc, #32]	; (401420 <xTimerCreateTimerTask+0x3c>)
  401400:	4908      	ldr	r1, [pc, #32]	; (401424 <xTimerCreateTimerTask+0x40>)
  401402:	f44f 7282 	mov.w	r2, #260	; 0x104
  401406:	4c08      	ldr	r4, [pc, #32]	; (401428 <xTimerCreateTimerTask+0x44>)
  401408:	47a0      	blx	r4
		}
		#endif
	}

	configASSERT( xReturn );
  40140a:	b918      	cbnz	r0, 401414 <xTimerCreateTimerTask+0x30>
  40140c:	4b07      	ldr	r3, [pc, #28]	; (40142c <xTimerCreateTimerTask+0x48>)
  40140e:	4798      	blx	r3
  401410:	bf00      	nop
  401412:	e7fd      	b.n	401410 <xTimerCreateTimerTask+0x2c>
	return xReturn;
}
  401414:	b004      	add	sp, #16
  401416:	bd10      	pop	{r4, pc}
  401418:	00401389 	.word	0x00401389
  40141c:	2000a5a4 	.word	0x2000a5a4
  401420:	00401539 	.word	0x00401539
  401424:	00402f9c 	.word	0x00402f9c
  401428:	00400a31 	.word	0x00400a31
  40142c:	00400229 	.word	0x00400229

00401430 <xTimerGenericCommand>:
	return ( xTimerHandle ) pxNewTimer;
}
/*-----------------------------------------------------------*/

portBASE_TYPE xTimerGenericCommand( xTimerHandle xTimer, portBASE_TYPE xCommandID, portTickType xOptionalValue, signed portBASE_TYPE *pxHigherPriorityTaskWoken, portTickType xBlockTime )
{
  401430:	b530      	push	{r4, r5, lr}
  401432:	b085      	sub	sp, #20
portBASE_TYPE xReturn = pdFAIL;
xTIMER_MESSAGE xMessage;

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
  401434:	4c0f      	ldr	r4, [pc, #60]	; (401474 <xTimerGenericCommand+0x44>)
  401436:	6825      	ldr	r5, [r4, #0]
  401438:	b1c5      	cbz	r5, 40146c <xTimerGenericCommand+0x3c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
  40143a:	9101      	str	r1, [sp, #4]
		xMessage.xMessageValue = xOptionalValue;
  40143c:	9202      	str	r2, [sp, #8]
		xMessage.pxTimer = ( xTIMER * ) xTimer;
  40143e:	9003      	str	r0, [sp, #12]

		if( pxHigherPriorityTaskWoken == NULL )
  401440:	b96b      	cbnz	r3, 40145e <xTimerGenericCommand+0x2e>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
  401442:	4b0d      	ldr	r3, [pc, #52]	; (401478 <xTimerGenericCommand+0x48>)
  401444:	4798      	blx	r3
  401446:	2801      	cmp	r0, #1
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xBlockTime );
  401448:	4b0a      	ldr	r3, [pc, #40]	; (401474 <xTimerGenericCommand+0x44>)
  40144a:	6818      	ldr	r0, [r3, #0]
  40144c:	a901      	add	r1, sp, #4
  40144e:	bf07      	ittee	eq
  401450:	9a08      	ldreq	r2, [sp, #32]
  401452:	2300      	moveq	r3, #0
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
  401454:	2200      	movne	r2, #0
  401456:	4613      	movne	r3, r2
  401458:	4c08      	ldr	r4, [pc, #32]	; (40147c <xTimerGenericCommand+0x4c>)
  40145a:	47a0      	blx	r4
  40145c:	e007      	b.n	40146e <xTimerGenericCommand+0x3e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
  40145e:	4628      	mov	r0, r5
  401460:	a901      	add	r1, sp, #4
  401462:	461a      	mov	r2, r3
  401464:	2300      	movs	r3, #0
  401466:	4c06      	ldr	r4, [pc, #24]	; (401480 <xTimerGenericCommand+0x50>)
  401468:	47a0      	blx	r4
  40146a:	e000      	b.n	40146e <xTimerGenericCommand+0x3e>
}
/*-----------------------------------------------------------*/

portBASE_TYPE xTimerGenericCommand( xTimerHandle xTimer, portBASE_TYPE xCommandID, portTickType xOptionalValue, signed portBASE_TYPE *pxHigherPriorityTaskWoken, portTickType xBlockTime )
{
portBASE_TYPE xReturn = pdFAIL;
  40146c:	2000      	movs	r0, #0

		traceTIMER_COMMAND_SEND( xTimer, xCommandID, xOptionalValue, xReturn );
	}

	return xReturn;
}
  40146e:	b005      	add	sp, #20
  401470:	bd30      	pop	{r4, r5, pc}
  401472:	bf00      	nop
  401474:	2000a5a4 	.word	0x2000a5a4
  401478:	0040124d 	.word	0x0040124d
  40147c:	00400681 	.word	0x00400681
  401480:	004007a1 	.word	0x004007a1

00401484 <prvSampleTimeNow>:
	return xNextExpireTime;
}
/*-----------------------------------------------------------*/

static portTickType prvSampleTimeNow( portBASE_TYPE *pxTimerListsWereSwitched )
{
  401484:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  401488:	b082      	sub	sp, #8
  40148a:	4681      	mov	r9, r0
portTickType xTimeNow;
PRIVILEGED_DATA static portTickType xLastTime = ( portTickType ) 0U;

	xTimeNow = xTaskGetTickCount();
  40148c:	4b22      	ldr	r3, [pc, #136]	; (401518 <prvSampleTimeNow+0x94>)
  40148e:	4798      	blx	r3
  401490:	4680      	mov	r8, r0

	if( xTimeNow < xLastTime )
  401492:	4b22      	ldr	r3, [pc, #136]	; (40151c <prvSampleTimeNow+0x98>)
  401494:	681b      	ldr	r3, [r3, #0]
  401496:	4298      	cmp	r0, r3
  401498:	d234      	bcs.n	401504 <prvSampleTimeNow+0x80>
  40149a:	e024      	b.n	4014e6 <prvSampleTimeNow+0x62>
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
  40149c:	68da      	ldr	r2, [r3, #12]
  40149e:	f8d2 a000 	ldr.w	sl, [r2]

		/* Remove the timer from the list. */
		pxTimer = ( xTIMER * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
  4014a2:	68db      	ldr	r3, [r3, #12]
  4014a4:	68dc      	ldr	r4, [r3, #12]
		uxListRemove( &( pxTimer->xTimerListItem ) );
  4014a6:	1d25      	adds	r5, r4, #4
  4014a8:	4628      	mov	r0, r5
  4014aa:	47b8      	blx	r7

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( xTimerHandle ) pxTimer );
  4014ac:	6a63      	ldr	r3, [r4, #36]	; 0x24
  4014ae:	4620      	mov	r0, r4
  4014b0:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( unsigned portBASE_TYPE ) pdTRUE )
  4014b2:	69e3      	ldr	r3, [r4, #28]
  4014b4:	2b01      	cmp	r3, #1
  4014b6:	d118      	bne.n	4014ea <prvSampleTimeNow+0x66>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
  4014b8:	69a3      	ldr	r3, [r4, #24]
  4014ba:	4453      	add	r3, sl
			if( xReloadTime > xNextExpireTime )
  4014bc:	4553      	cmp	r3, sl
  4014be:	d906      	bls.n	4014ce <prvSampleTimeNow+0x4a>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
  4014c0:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
  4014c2:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
  4014c4:	6830      	ldr	r0, [r6, #0]
  4014c6:	4629      	mov	r1, r5
  4014c8:	4b15      	ldr	r3, [pc, #84]	; (401520 <prvSampleTimeNow+0x9c>)
  4014ca:	4798      	blx	r3
  4014cc:	e00d      	b.n	4014ea <prvSampleTimeNow+0x66>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START, xNextExpireTime, NULL, tmrNO_DELAY );
  4014ce:	2300      	movs	r3, #0
  4014d0:	9300      	str	r3, [sp, #0]
  4014d2:	4620      	mov	r0, r4
  4014d4:	4619      	mov	r1, r3
  4014d6:	4652      	mov	r2, sl
  4014d8:	4c12      	ldr	r4, [pc, #72]	; (401524 <prvSampleTimeNow+0xa0>)
  4014da:	47a0      	blx	r4
				configASSERT( xResult );
  4014dc:	b928      	cbnz	r0, 4014ea <prvSampleTimeNow+0x66>
  4014de:	4b12      	ldr	r3, [pc, #72]	; (401528 <prvSampleTimeNow+0xa4>)
  4014e0:	4798      	blx	r3
  4014e2:	bf00      	nop
  4014e4:	e7fd      	b.n	4014e2 <prvSampleTimeNow+0x5e>

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
  4014e6:	4e11      	ldr	r6, [pc, #68]	; (40152c <prvSampleTimeNow+0xa8>)
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );

		/* Remove the timer from the list. */
		pxTimer = ( xTIMER * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
		uxListRemove( &( pxTimer->xTimerListItem ) );
  4014e8:	4f11      	ldr	r7, [pc, #68]	; (401530 <prvSampleTimeNow+0xac>)

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
  4014ea:	6833      	ldr	r3, [r6, #0]
  4014ec:	681a      	ldr	r2, [r3, #0]
  4014ee:	2a00      	cmp	r2, #0
  4014f0:	d1d4      	bne.n	40149c <prvSampleTimeNow+0x18>
			}
		}
	}

	pxTemp = pxCurrentTimerList;
	pxCurrentTimerList = pxOverflowTimerList;
  4014f2:	4a10      	ldr	r2, [pc, #64]	; (401534 <prvSampleTimeNow+0xb0>)
  4014f4:	6810      	ldr	r0, [r2, #0]
  4014f6:	490d      	ldr	r1, [pc, #52]	; (40152c <prvSampleTimeNow+0xa8>)
  4014f8:	6008      	str	r0, [r1, #0]
	pxOverflowTimerList = pxTemp;
  4014fa:	6013      	str	r3, [r2, #0]
	xTimeNow = xTaskGetTickCount();

	if( xTimeNow < xLastTime )
	{
		prvSwitchTimerLists( xLastTime );
		*pxTimerListsWereSwitched = pdTRUE;
  4014fc:	2301      	movs	r3, #1
  4014fe:	f8c9 3000 	str.w	r3, [r9]
  401502:	e002      	b.n	40150a <prvSampleTimeNow+0x86>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
  401504:	2300      	movs	r3, #0
  401506:	f8c9 3000 	str.w	r3, [r9]
	}

	xLastTime = xTimeNow;
  40150a:	4b04      	ldr	r3, [pc, #16]	; (40151c <prvSampleTimeNow+0x98>)
  40150c:	f8c3 8000 	str.w	r8, [r3]

	return xTimeNow;
}
  401510:	4640      	mov	r0, r8
  401512:	b002      	add	sp, #8
  401514:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  401518:	00400cad 	.word	0x00400cad
  40151c:	2000a5a0 	.word	0x2000a5a0
  401520:	00400165 	.word	0x00400165
  401524:	00401431 	.word	0x00401431
  401528:	00400229 	.word	0x00400229
  40152c:	2000a574 	.word	0x2000a574
  401530:	004001a1 	.word	0x004001a1
  401534:	2000a5a8 	.word	0x2000a5a8

00401538 <prvTimerTask>:
	pxTimer->pxCallbackFunction( ( xTimerHandle ) pxTimer );
}
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
  401538:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  40153c:	b087      	sub	sp, #28
				time has not been reached yet.  This task should therefore
				block to wait for the next expire time or a command to be
				received - whichever comes first.  The following line cannot
				be reached unless xNextExpireTime > xTimeNow, except in the
				case when the current timer list is empty. */
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ) );
  40153e:	4d4d      	ldr	r5, [pc, #308]	; (401674 <prvTimerTask+0x13c>)
portBASE_TYPE xResult;

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	pxTimer = ( xTIMER * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
	uxListRemove( &( pxTimer->xTimerListItem ) );
  401540:	f8df 8160 	ldr.w	r8, [pc, #352]	; 4016a4 <prvTimerTask+0x16c>
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
  401544:	4b4c      	ldr	r3, [pc, #304]	; (401678 <prvTimerTask+0x140>)
  401546:	681b      	ldr	r3, [r3, #0]
  401548:	681a      	ldr	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
  40154a:	2a00      	cmp	r2, #0
  40154c:	f000 8087 	beq.w	40165e <prvTimerTask+0x126>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
  401550:	68db      	ldr	r3, [r3, #12]
  401552:	681e      	ldr	r6, [r3, #0]
static void prvProcessTimerOrBlockTask( portTickType xNextExpireTime, portBASE_TYPE xListWasEmpty )
{
portTickType xTimeNow;
portBASE_TYPE xTimerListsWereSwitched;

	vTaskSuspendAll();
  401554:	4b49      	ldr	r3, [pc, #292]	; (40167c <prvTimerTask+0x144>)
  401556:	4798      	blx	r3
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampelTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
  401558:	a803      	add	r0, sp, #12
  40155a:	4b49      	ldr	r3, [pc, #292]	; (401680 <prvTimerTask+0x148>)
  40155c:	4798      	blx	r3
  40155e:	4607      	mov	r7, r0
		if( xTimerListsWereSwitched == pdFALSE )
  401560:	9b03      	ldr	r3, [sp, #12]
  401562:	2b00      	cmp	r3, #0
  401564:	d130      	bne.n	4015c8 <prvTimerTask+0x90>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
  401566:	4286      	cmp	r6, r0
  401568:	d824      	bhi.n	4015b4 <prvTimerTask+0x7c>
			{
				xTaskResumeAll();
  40156a:	4b46      	ldr	r3, [pc, #280]	; (401684 <prvTimerTask+0x14c>)
  40156c:	4798      	blx	r3
xTIMER *pxTimer;
portBASE_TYPE xResult;

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	pxTimer = ( xTIMER * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
  40156e:	4b42      	ldr	r3, [pc, #264]	; (401678 <prvTimerTask+0x140>)
  401570:	681b      	ldr	r3, [r3, #0]
  401572:	68db      	ldr	r3, [r3, #12]
  401574:	68dc      	ldr	r4, [r3, #12]
	uxListRemove( &( pxTimer->xTimerListItem ) );
  401576:	1d20      	adds	r0, r4, #4
  401578:	47c0      	blx	r8
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( unsigned portBASE_TYPE ) pdTRUE )
  40157a:	69e3      	ldr	r3, [r4, #28]
  40157c:	2b01      	cmp	r3, #1
  40157e:	d114      	bne.n	4015aa <prvTimerTask+0x72>
		a time relative to anything other than the current time.  It
		will therefore be inserted into the correct list relative to
		the time this task thinks it is now, even if a command to
		switch lists due to a tick count overflow is already waiting in
		the timer queue. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) == pdTRUE )
  401580:	69a1      	ldr	r1, [r4, #24]
  401582:	4620      	mov	r0, r4
  401584:	4431      	add	r1, r6
  401586:	463a      	mov	r2, r7
  401588:	4633      	mov	r3, r6
  40158a:	4f3f      	ldr	r7, [pc, #252]	; (401688 <prvTimerTask+0x150>)
  40158c:	47b8      	blx	r7
  40158e:	2801      	cmp	r0, #1
  401590:	d10b      	bne.n	4015aa <prvTimerTask+0x72>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START, xNextExpireTime, NULL, tmrNO_DELAY );
  401592:	2300      	movs	r3, #0
  401594:	9300      	str	r3, [sp, #0]
  401596:	4620      	mov	r0, r4
  401598:	4619      	mov	r1, r3
  40159a:	4632      	mov	r2, r6
  40159c:	4e3b      	ldr	r6, [pc, #236]	; (40168c <prvTimerTask+0x154>)
  40159e:	47b0      	blx	r6
			configASSERT( xResult );
  4015a0:	b918      	cbnz	r0, 4015aa <prvTimerTask+0x72>
  4015a2:	4b3b      	ldr	r3, [pc, #236]	; (401690 <prvTimerTask+0x158>)
  4015a4:	4798      	blx	r3
  4015a6:	bf00      	nop
  4015a8:	e7fd      	b.n	4015a6 <prvTimerTask+0x6e>
			( void ) xResult;
		}
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( xTimerHandle ) pxTimer );
  4015aa:	6a63      	ldr	r3, [r4, #36]	; 0x24
  4015ac:	4620      	mov	r0, r4
  4015ae:	4798      	blx	r3
  4015b0:	e00c      	b.n	4015cc <prvTimerTask+0x94>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( portTickType ) 0U;
  4015b2:	2600      	movs	r6, #0
				time has not been reached yet.  This task should therefore
				block to wait for the next expire time or a command to be
				received - whichever comes first.  The following line cannot
				be reached unless xNextExpireTime > xTimeNow, except in the
				case when the current timer list is empty. */
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ) );
  4015b4:	6828      	ldr	r0, [r5, #0]
  4015b6:	1bf1      	subs	r1, r6, r7
  4015b8:	4b36      	ldr	r3, [pc, #216]	; (401694 <prvTimerTask+0x15c>)
  4015ba:	4798      	blx	r3

				if( xTaskResumeAll() == pdFALSE )
  4015bc:	4b31      	ldr	r3, [pc, #196]	; (401684 <prvTimerTask+0x14c>)
  4015be:	4798      	blx	r3
  4015c0:	b920      	cbnz	r0, 4015cc <prvTimerTask+0x94>
				{
					/* Yield to wait for either a command to arrive, or the block time
					to expire.  If a command arrived between the critical section being
					exited and this yield then the yield will not cause the task
					to block. */
					portYIELD_WITHIN_API();
  4015c2:	4b35      	ldr	r3, [pc, #212]	; (401698 <prvTimerTask+0x160>)
  4015c4:	4798      	blx	r3
  4015c6:	e001      	b.n	4015cc <prvTimerTask+0x94>
				}
			}
		}
		else
		{
			xTaskResumeAll();
  4015c8:	4b2e      	ldr	r3, [pc, #184]	; (401684 <prvTimerTask+0x14c>)
  4015ca:	4798      	blx	r3
portBASE_TYPE xTimerListsWereSwitched, xResult;
portTickType xTimeNow;

	/* In this case the xTimerListsWereSwitched parameter is not used, but it
	must be present in the function call. */
	xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
  4015cc:	a802      	add	r0, sp, #8
  4015ce:	4b2c      	ldr	r3, [pc, #176]	; (401680 <prvTimerTask+0x148>)
  4015d0:	4798      	blx	r3
  4015d2:	4607      	mov	r7, r0

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL )
  4015d4:	4e31      	ldr	r6, [pc, #196]	; (40169c <prvTimerTask+0x164>)
				break;

			case tmrCOMMAND_CHANGE_PERIOD :
				pxTimer->xTimerPeriodInTicks = xMessage.xMessageValue;
				configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
				prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
  4015d6:	f8df 90b0 	ldr.w	r9, [pc, #176]	; 401688 <prvTimerTask+0x150>
  4015da:	e038      	b.n	40164e <prvTimerTask+0x116>
	must be present in the function call. */
	xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL )
	{
		pxTimer = xMessage.pxTimer;
  4015dc:	9c05      	ldr	r4, [sp, #20]

		/* Is the timer already in a list of active timers?  When the command
		is trmCOMMAND_PROCESS_TIMER_OVERFLOW, the timer will be NULL as the
		command is to the task rather than to an individual timer. */
		if( pxTimer != NULL )
  4015de:	b11c      	cbz	r4, 4015e8 <prvTimerTask+0xb0>
		{
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
  4015e0:	6963      	ldr	r3, [r4, #20]
  4015e2:	b10b      	cbz	r3, 4015e8 <prvTimerTask+0xb0>
			{
				/* The timer is in a list, remove it. */
				uxListRemove( &( pxTimer->xTimerListItem ) );
  4015e4:	1d20      	adds	r0, r4, #4
  4015e6:	47c0      	blx	r8
			}
		}

		traceTIMER_COMMAND_RECEIVED( pxTimer, xMessage.xMessageID, xMessage.xMessageValue );

		switch( xMessage.xMessageID )
  4015e8:	9b03      	ldr	r3, [sp, #12]
  4015ea:	2b02      	cmp	r3, #2
  4015ec:	d01f      	beq.n	40162e <prvTimerTask+0xf6>
  4015ee:	2b03      	cmp	r3, #3
  4015f0:	d02a      	beq.n	401648 <prvTimerTask+0x110>
  4015f2:	2b00      	cmp	r3, #0
  4015f4:	d12b      	bne.n	40164e <prvTimerTask+0x116>
		{
			case tmrCOMMAND_START :
				/* Start or restart a timer. */
				if( prvInsertTimerInActiveList( pxTimer,  xMessage.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.xMessageValue ) == pdTRUE )
  4015f6:	9b04      	ldr	r3, [sp, #16]
  4015f8:	69a1      	ldr	r1, [r4, #24]
  4015fa:	4620      	mov	r0, r4
  4015fc:	4419      	add	r1, r3
  4015fe:	463a      	mov	r2, r7
  401600:	47c8      	blx	r9
  401602:	2801      	cmp	r0, #1
  401604:	d123      	bne.n	40164e <prvTimerTask+0x116>
				{
					/* The timer expired before it was added to the active timer
					list.  Process it now. */
					pxTimer->pxCallbackFunction( ( xTimerHandle ) pxTimer );
  401606:	6a63      	ldr	r3, [r4, #36]	; 0x24
  401608:	4620      	mov	r0, r4
  40160a:	4798      	blx	r3

					if( pxTimer->uxAutoReload == ( unsigned portBASE_TYPE ) pdTRUE )
  40160c:	69e3      	ldr	r3, [r4, #28]
  40160e:	2b01      	cmp	r3, #1
  401610:	d11d      	bne.n	40164e <prvTimerTask+0x116>
					{
						xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START, xMessage.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
  401612:	69a2      	ldr	r2, [r4, #24]
  401614:	2300      	movs	r3, #0
  401616:	9300      	str	r3, [sp, #0]
  401618:	4620      	mov	r0, r4
  40161a:	4619      	mov	r1, r3
  40161c:	9c04      	ldr	r4, [sp, #16]
  40161e:	4422      	add	r2, r4
  401620:	4c1a      	ldr	r4, [pc, #104]	; (40168c <prvTimerTask+0x154>)
  401622:	47a0      	blx	r4
						configASSERT( xResult );
  401624:	b998      	cbnz	r0, 40164e <prvTimerTask+0x116>
  401626:	4b1a      	ldr	r3, [pc, #104]	; (401690 <prvTimerTask+0x158>)
  401628:	4798      	blx	r3
  40162a:	bf00      	nop
  40162c:	e7fd      	b.n	40162a <prvTimerTask+0xf2>
				/* The timer has already been removed from the active list.
				There is nothing to do here. */
				break;

			case tmrCOMMAND_CHANGE_PERIOD :
				pxTimer->xTimerPeriodInTicks = xMessage.xMessageValue;
  40162e:	9904      	ldr	r1, [sp, #16]
  401630:	61a1      	str	r1, [r4, #24]
				configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
  401632:	b919      	cbnz	r1, 40163c <prvTimerTask+0x104>
  401634:	4b16      	ldr	r3, [pc, #88]	; (401690 <prvTimerTask+0x158>)
  401636:	4798      	blx	r3
  401638:	bf00      	nop
  40163a:	e7fd      	b.n	401638 <prvTimerTask+0x100>
				prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
  40163c:	4620      	mov	r0, r4
  40163e:	4439      	add	r1, r7
  401640:	463a      	mov	r2, r7
  401642:	463b      	mov	r3, r7
  401644:	47c8      	blx	r9
  401646:	e002      	b.n	40164e <prvTimerTask+0x116>
				break;

			case tmrCOMMAND_DELETE :
				/* The timer has already been removed from the active list,
				just free up the memory. */
				vPortFree( pxTimer );
  401648:	4620      	mov	r0, r4
  40164a:	4b15      	ldr	r3, [pc, #84]	; (4016a0 <prvTimerTask+0x168>)
  40164c:	4798      	blx	r3

	/* In this case the xTimerListsWereSwitched parameter is not used, but it
	must be present in the function call. */
	xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL )
  40164e:	6828      	ldr	r0, [r5, #0]
  401650:	a903      	add	r1, sp, #12
  401652:	2200      	movs	r2, #0
  401654:	4613      	mov	r3, r2
  401656:	47b0      	blx	r6
  401658:	2800      	cmp	r0, #0
  40165a:	d1bf      	bne.n	4015dc <prvTimerTask+0xa4>
  40165c:	e772      	b.n	401544 <prvTimerTask+0xc>
static void prvProcessTimerOrBlockTask( portTickType xNextExpireTime, portBASE_TYPE xListWasEmpty )
{
portTickType xTimeNow;
portBASE_TYPE xTimerListsWereSwitched;

	vTaskSuspendAll();
  40165e:	4b07      	ldr	r3, [pc, #28]	; (40167c <prvTimerTask+0x144>)
  401660:	4798      	blx	r3
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampelTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
  401662:	a803      	add	r0, sp, #12
  401664:	4b06      	ldr	r3, [pc, #24]	; (401680 <prvTimerTask+0x148>)
  401666:	4798      	blx	r3
  401668:	4607      	mov	r7, r0
		if( xTimerListsWereSwitched == pdFALSE )
  40166a:	9b03      	ldr	r3, [sp, #12]
  40166c:	2b00      	cmp	r3, #0
  40166e:	d0a0      	beq.n	4015b2 <prvTimerTask+0x7a>
  401670:	e7aa      	b.n	4015c8 <prvTimerTask+0x90>
  401672:	bf00      	nop
  401674:	2000a5a4 	.word	0x2000a5a4
  401678:	2000a574 	.word	0x2000a574
  40167c:	00400c9d 	.word	0x00400c9d
  401680:	00401485 	.word	0x00401485
  401684:	00400ded 	.word	0x00400ded
  401688:	0040133d 	.word	0x0040133d
  40168c:	00401431 	.word	0x00401431
  401690:	00400229 	.word	0x00400229
  401694:	0040098d 	.word	0x0040098d
  401698:	00400219 	.word	0x00400219
  40169c:	00400831 	.word	0x00400831
  4016a0:	00400459 	.word	0x00400459
  4016a4:	004001a1 	.word	0x004001a1

004016a8 <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
  4016a8:	b510      	push	{r4, lr}
	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
  4016aa:	480e      	ldr	r0, [pc, #56]	; (4016e4 <sysclk_init+0x3c>)
  4016ac:	4b0e      	ldr	r3, [pc, #56]	; (4016e8 <sysclk_init+0x40>)
  4016ae:	4798      	blx	r3
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
  4016b0:	2000      	movs	r0, #0
  4016b2:	213e      	movs	r1, #62	; 0x3e
  4016b4:	4b0d      	ldr	r3, [pc, #52]	; (4016ec <sysclk_init+0x44>)
  4016b6:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
  4016b8:	4c0d      	ldr	r4, [pc, #52]	; (4016f0 <sysclk_init+0x48>)
  4016ba:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
  4016bc:	2800      	cmp	r0, #0
  4016be:	d0fc      	beq.n	4016ba <sysclk_init+0x12>

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
	} else {
		pmc_disable_pllbck();
  4016c0:	4b0c      	ldr	r3, [pc, #48]	; (4016f4 <sysclk_init+0x4c>)
  4016c2:	4798      	blx	r3
		PMC->CKGR_PLLBR = p_cfg->ctrl;
  4016c4:	4a0c      	ldr	r2, [pc, #48]	; (4016f8 <sysclk_init+0x50>)
  4016c6:	4b0d      	ldr	r3, [pc, #52]	; (4016fc <sysclk_init+0x54>)
  4016c8:	62da      	str	r2, [r3, #44]	; 0x2c
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		return pmc_is_locked_pllack();
	} else {
		return pmc_is_locked_pllbck();
  4016ca:	4c0d      	ldr	r4, [pc, #52]	; (401700 <sysclk_init+0x58>)
  4016cc:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
  4016ce:	2800      	cmp	r0, #0
  4016d0:	d0fc      	beq.n	4016cc <sysclk_init+0x24>

		pll_enable_source(CONFIG_PLL1_SOURCE);
		pll_config_defaults(&pllcfg, 1);
		pll_enable(&pllcfg, 1);
		pll_wait_for_lock(1);
		pmc_switch_mck_to_pllbck(CONFIG_SYSCLK_PRES);
  4016d2:	2010      	movs	r0, #16
  4016d4:	4b0b      	ldr	r3, [pc, #44]	; (401704 <sysclk_init+0x5c>)
  4016d6:	4798      	blx	r3
	}
#endif

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
  4016d8:	4b0b      	ldr	r3, [pc, #44]	; (401708 <sysclk_init+0x60>)
  4016da:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
  4016dc:	4801      	ldr	r0, [pc, #4]	; (4016e4 <sysclk_init+0x3c>)
  4016de:	4b02      	ldr	r3, [pc, #8]	; (4016e8 <sysclk_init+0x40>)
  4016e0:	4798      	blx	r3
  4016e2:	bd10      	pop	{r4, pc}
  4016e4:	07270e00 	.word	0x07270e00
  4016e8:	00402819 	.word	0x00402819
  4016ec:	0040233d 	.word	0x0040233d
  4016f0:	00402391 	.word	0x00402391
  4016f4:	004023dd 	.word	0x004023dd
  4016f8:	00133f01 	.word	0x00133f01
  4016fc:	400e0400 	.word	0x400e0400
  401700:	004023e9 	.word	0x004023e9
  401704:	004022d9 	.word	0x004022d9
  401708:	00402705 	.word	0x00402705

0040170c <board_init>:
#include "board.h"
#include "conf_board.h"
#include "gpio.h"

void board_init(void)
{
  40170c:	b570      	push	{r4, r5, r6, lr}
	/* Disable the watchdog */
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	WDT->WDT_MR = WDT_MR_WDDIS;
  40170e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  401712:	4b67      	ldr	r3, [pc, #412]	; (4018b0 <board_init+0x1a4>)
  401714:	605a      	str	r2, [r3, #4]
#endif

	/* Configure LED pins */
	gpio_configure_pin(LED0_GPIO, LED0_FLAGS);
  401716:	204c      	movs	r0, #76	; 0x4c
  401718:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
  40171c:	4c65      	ldr	r4, [pc, #404]	; (4018b4 <board_init+0x1a8>)
  40171e:	47a0      	blx	r4

	/* Configure Push Button pins */
	gpio_configure_pin(GPIO_PUSH_BUTTON_1, GPIO_PUSH_BUTTON_1_FLAGS);
  401720:	2002      	movs	r0, #2
  401722:	4965      	ldr	r1, [pc, #404]	; (4018b8 <board_init+0x1ac>)
  401724:	47a0      	blx	r4
	gpio_configure_group(PINS_UART_PIO, PINS_UART, PINS_UART_FLAGS);
#endif

	/* Configure TWI pins */
#ifdef CONF_BOARD_TWI0
	gpio_configure_pin(TWI0_DATA_GPIO, TWI0_DATA_FLAGS);
  401726:	2003      	movs	r0, #3
  401728:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  40172c:	47a0      	blx	r4
	gpio_configure_pin(TWI0_CLK_GPIO, TWI0_CLK_FLAGS);
  40172e:	2004      	movs	r0, #4
  401730:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  401734:	47a0      	blx	r4
	gpio_configure_pin(SPI_NPCS0_GPIO, SPI_NPCS0_FLAGS);
#endif

	/* Configure PCK0 pins */
#ifdef CONF_BOARD_PCK0
	gpio_configure_pin(PIN_PCK0, PIN_PCK0_FLAGS);
  401736:	202d      	movs	r0, #45	; 0x2d
  401738:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  40173c:	47a0      	blx	r4
	gpio_configure_pin(USB_VBUS_GPIO, USB_VBUS_FLAGS);
#endif

	/* Configure LCD EBI pins */
#ifdef CONF_BOARD_ILI9325
	gpio_configure_pin(PIN_EBI_DATA_BUS_D0, PIN_EBI_DATA_BUS_FLAGS);
  40173e:	4d5f      	ldr	r5, [pc, #380]	; (4018bc <board_init+0x1b0>)
  401740:	2040      	movs	r0, #64	; 0x40
  401742:	4629      	mov	r1, r5
  401744:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_DATA_BUS_D1, PIN_EBI_DATA_BUS_FLAGS);
  401746:	2041      	movs	r0, #65	; 0x41
  401748:	4629      	mov	r1, r5
  40174a:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_DATA_BUS_D2, PIN_EBI_DATA_BUS_FLAGS);
  40174c:	2042      	movs	r0, #66	; 0x42
  40174e:	4629      	mov	r1, r5
  401750:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_DATA_BUS_D3, PIN_EBI_DATA_BUS_FLAGS);
  401752:	2043      	movs	r0, #67	; 0x43
  401754:	4629      	mov	r1, r5
  401756:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_DATA_BUS_D4, PIN_EBI_DATA_BUS_FLAGS);
  401758:	2044      	movs	r0, #68	; 0x44
  40175a:	4629      	mov	r1, r5
  40175c:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_DATA_BUS_D5, PIN_EBI_DATA_BUS_FLAGS);
  40175e:	2045      	movs	r0, #69	; 0x45
  401760:	4629      	mov	r1, r5
  401762:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_DATA_BUS_D6, PIN_EBI_DATA_BUS_FLAGS);
  401764:	2046      	movs	r0, #70	; 0x46
  401766:	4629      	mov	r1, r5
  401768:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_DATA_BUS_D7, PIN_EBI_DATA_BUS_FLAGS);
  40176a:	2047      	movs	r0, #71	; 0x47
  40176c:	4629      	mov	r1, r5
  40176e:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_NRD, PIN_EBI_NRD_FLAGS);
  401770:	204b      	movs	r0, #75	; 0x4b
  401772:	4629      	mov	r1, r5
  401774:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_NWE, PIN_EBI_NWE_FLAGS);
  401776:	2048      	movs	r0, #72	; 0x48
  401778:	4629      	mov	r1, r5
  40177a:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_NCS2, PIN_EBI_NCS2_FLAGS);
  40177c:	4e50      	ldr	r6, [pc, #320]	; (4018c0 <board_init+0x1b4>)
  40177e:	2016      	movs	r0, #22
  401780:	4631      	mov	r1, r6
  401782:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_LCD_RS, PIN_EBI_LCD_RS_FLAGS);
  401784:	2053      	movs	r0, #83	; 0x53
  401786:	4629      	mov	r1, r5
  401788:	47a0      	blx	r4
#endif

	/* Configure Backlight control pin */
#ifdef CONF_BOARD_AAT3155
	gpio_configure_pin(BOARD_AAT31XX_SET_GPIO, BOARD_AAT31XX_SET_FLAGS);
  40178a:	204d      	movs	r0, #77	; 0x4d
  40178c:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
  401790:	47a0      	blx	r4
#endif

	/* Configure SRAM pins */
#ifdef CONF_BOARD_SRAM
	gpio_configure_pin(PIN_EBI_DATA_BUS_D0, PIN_EBI_DATA_BUS_FLAGS);
  401792:	2040      	movs	r0, #64	; 0x40
  401794:	4629      	mov	r1, r5
  401796:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_DATA_BUS_D1, PIN_EBI_DATA_BUS_FLAGS);
  401798:	2041      	movs	r0, #65	; 0x41
  40179a:	4629      	mov	r1, r5
  40179c:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_DATA_BUS_D2, PIN_EBI_DATA_BUS_FLAGS);
  40179e:	2042      	movs	r0, #66	; 0x42
  4017a0:	4629      	mov	r1, r5
  4017a2:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_DATA_BUS_D3, PIN_EBI_DATA_BUS_FLAGS);
  4017a4:	2043      	movs	r0, #67	; 0x43
  4017a6:	4629      	mov	r1, r5
  4017a8:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_DATA_BUS_D4, PIN_EBI_DATA_BUS_FLAGS);
  4017aa:	2044      	movs	r0, #68	; 0x44
  4017ac:	4629      	mov	r1, r5
  4017ae:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_DATA_BUS_D5, PIN_EBI_DATA_BUS_FLAGS);
  4017b0:	2045      	movs	r0, #69	; 0x45
  4017b2:	4629      	mov	r1, r5
  4017b4:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_DATA_BUS_D6, PIN_EBI_DATA_BUS_FLAGS);
  4017b6:	2046      	movs	r0, #70	; 0x46
  4017b8:	4629      	mov	r1, r5
  4017ba:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_DATA_BUS_D7, PIN_EBI_DATA_BUS_FLAGS);
  4017bc:	2047      	movs	r0, #71	; 0x47
  4017be:	4629      	mov	r1, r5
  4017c0:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_NRD, PIN_EBI_NRD_FLAGS);
  4017c2:	204b      	movs	r0, #75	; 0x4b
  4017c4:	4629      	mov	r1, r5
  4017c6:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_NWE, PIN_EBI_NWE_FLAGS);
  4017c8:	2048      	movs	r0, #72	; 0x48
  4017ca:	4629      	mov	r1, r5
  4017cc:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_NCS0, PIN_EBI_NCS0_FLAGS);
  4017ce:	204e      	movs	r0, #78	; 0x4e
  4017d0:	4629      	mov	r1, r5
  4017d2:	47a0      	blx	r4
	gpio_configure_pin(SRAM_VCC_GPIO, SRAM_VCC_FLAGS);
  4017d4:	2049      	movs	r0, #73	; 0x49
  4017d6:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
  4017da:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_ADDR_BUS_A0, PIN_EBI_ADDR_BUS_FLAG1);
  4017dc:	2052      	movs	r0, #82	; 0x52
  4017de:	4629      	mov	r1, r5
  4017e0:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_ADDR_BUS_A1, PIN_EBI_ADDR_BUS_FLAG1);
  4017e2:	2053      	movs	r0, #83	; 0x53
  4017e4:	4629      	mov	r1, r5
  4017e6:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_ADDR_BUS_A2, PIN_EBI_ADDR_BUS_FLAG1);
  4017e8:	2054      	movs	r0, #84	; 0x54
  4017ea:	4629      	mov	r1, r5
  4017ec:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_ADDR_BUS_A3, PIN_EBI_ADDR_BUS_FLAG1);
  4017ee:	2055      	movs	r0, #85	; 0x55
  4017f0:	4629      	mov	r1, r5
  4017f2:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_ADDR_BUS_A4, PIN_EBI_ADDR_BUS_FLAG1);
  4017f4:	2056      	movs	r0, #86	; 0x56
  4017f6:	4629      	mov	r1, r5
  4017f8:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_ADDR_BUS_A5, PIN_EBI_ADDR_BUS_FLAG1);
  4017fa:	2057      	movs	r0, #87	; 0x57
  4017fc:	4629      	mov	r1, r5
  4017fe:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_ADDR_BUS_A6, PIN_EBI_ADDR_BUS_FLAG1);
  401800:	2058      	movs	r0, #88	; 0x58
  401802:	4629      	mov	r1, r5
  401804:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_ADDR_BUS_A7, PIN_EBI_ADDR_BUS_FLAG1);
  401806:	2059      	movs	r0, #89	; 0x59
  401808:	4629      	mov	r1, r5
  40180a:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_ADDR_BUS_A8, PIN_EBI_ADDR_BUS_FLAG1);
  40180c:	205a      	movs	r0, #90	; 0x5a
  40180e:	4629      	mov	r1, r5
  401810:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_ADDR_BUS_A9, PIN_EBI_ADDR_BUS_FLAG1);
  401812:	205b      	movs	r0, #91	; 0x5b
  401814:	4629      	mov	r1, r5
  401816:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_ADDR_BUS_A10, PIN_EBI_ADDR_BUS_FLAG1);
  401818:	205c      	movs	r0, #92	; 0x5c
  40181a:	4629      	mov	r1, r5
  40181c:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_ADDR_BUS_A11, PIN_EBI_ADDR_BUS_FLAG1);
  40181e:	205d      	movs	r0, #93	; 0x5d
  401820:	4629      	mov	r1, r5
  401822:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_ADDR_BUS_A12, PIN_EBI_ADDR_BUS_FLAG1);
  401824:	205e      	movs	r0, #94	; 0x5e
  401826:	4629      	mov	r1, r5
  401828:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_ADDR_BUS_A13, PIN_EBI_ADDR_BUS_FLAG1);
  40182a:	205f      	movs	r0, #95	; 0x5f
  40182c:	4629      	mov	r1, r5
  40182e:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_ADDR_BUS_A14, PIN_EBI_ADDR_BUS_FLAG2);
  401830:	2012      	movs	r0, #18
  401832:	4631      	mov	r1, r6
  401834:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_ADDR_BUS_A15, PIN_EBI_ADDR_BUS_FLAG2);
  401836:	2013      	movs	r0, #19
  401838:	4631      	mov	r1, r6
  40183a:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_ADDR_BUS_A16, PIN_EBI_ADDR_BUS_FLAG2);
  40183c:	2014      	movs	r0, #20
  40183e:	4631      	mov	r1, r6
  401840:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_ADDR_BUS_A17, PIN_EBI_ADDR_BUS_FLAG2);
  401842:	2000      	movs	r0, #0
  401844:	4631      	mov	r1, r6
  401846:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_ADDR_BUS_A18, PIN_EBI_ADDR_BUS_FLAG2);
  401848:	2001      	movs	r0, #1
  40184a:	4631      	mov	r1, r6
  40184c:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_ADDR_BUS_A19, PIN_EBI_ADDR_BUS_FLAG1);
  40184e:	2050      	movs	r0, #80	; 0x50
  401850:	4629      	mov	r1, r5
  401852:	47a0      	blx	r4
#endif

	/* Configure Image sensor pins */
#ifdef CONF_BOARD_OV7740_IMAGE_SENSOR
	gpio_configure_pin(OV_SW_OVT_GPIO, OV_SW_OVT_FLAGS);
  401854:	204a      	movs	r0, #74	; 0x4a
  401856:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
  40185a:	47a0      	blx	r4
	gpio_configure_pin(OV_RST_GPIO, OV_RST_FLAGS);
  40185c:	204f      	movs	r0, #79	; 0x4f
  40185e:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
  401862:	47a0      	blx	r4
	gpio_configure_pin(OV_FSIN_GPIO, OV_FSIN_FLAGS);
  401864:	2015      	movs	r0, #21
  401866:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
  40186a:	47a0      	blx	r4
	gpio_configure_pin(OV_HSYNC_GPIO, OV_HSYNC_FLAGS);
  40186c:	2010      	movs	r0, #16
  40186e:	2171      	movs	r1, #113	; 0x71
  401870:	47a0      	blx	r4
	gpio_configure_pin(OV_VSYNC_GPIO, OV_VSYNC_FLAGS);
  401872:	200f      	movs	r0, #15
  401874:	2171      	movs	r1, #113	; 0x71
  401876:	47a0      	blx	r4
	gpio_configure_pin(OV_DATA_BUS_D2, OV_DATA_BUS_FLAGS);
  401878:	f105 5500 	add.w	r5, r5, #536870912	; 0x20000000
  40187c:	2018      	movs	r0, #24
  40187e:	4629      	mov	r1, r5
  401880:	47a0      	blx	r4
	gpio_configure_pin(OV_DATA_BUS_D3, OV_DATA_BUS_FLAGS);
  401882:	2019      	movs	r0, #25
  401884:	4629      	mov	r1, r5
  401886:	47a0      	blx	r4
	gpio_configure_pin(OV_DATA_BUS_D4, OV_DATA_BUS_FLAGS);
  401888:	201a      	movs	r0, #26
  40188a:	4629      	mov	r1, r5
  40188c:	47a0      	blx	r4
	gpio_configure_pin(OV_DATA_BUS_D5, OV_DATA_BUS_FLAGS);
  40188e:	201b      	movs	r0, #27
  401890:	4629      	mov	r1, r5
  401892:	47a0      	blx	r4
	gpio_configure_pin(OV_DATA_BUS_D6, OV_DATA_BUS_FLAGS);
  401894:	201c      	movs	r0, #28
  401896:	4629      	mov	r1, r5
  401898:	47a0      	blx	r4
	gpio_configure_pin(OV_DATA_BUS_D7, OV_DATA_BUS_FLAGS);
  40189a:	201d      	movs	r0, #29
  40189c:	4629      	mov	r1, r5
  40189e:	47a0      	blx	r4
	gpio_configure_pin(OV_DATA_BUS_D8, OV_DATA_BUS_FLAGS);
  4018a0:	201e      	movs	r0, #30
  4018a2:	4629      	mov	r1, r5
  4018a4:	47a0      	blx	r4
	gpio_configure_pin(OV_DATA_BUS_D9, OV_DATA_BUS_FLAGS);
  4018a6:	201f      	movs	r0, #31
  4018a8:	4629      	mov	r1, r5
  4018aa:	47a0      	blx	r4
  4018ac:	bd70      	pop	{r4, r5, r6, pc}
  4018ae:	bf00      	nop
  4018b0:	400e1450 	.word	0x400e1450
  4018b4:	004020d1 	.word	0x004020d1
  4018b8:	28000079 	.word	0x28000079
  4018bc:	08000001 	.word	0x08000001
  4018c0:	18000001 	.word	0x18000001

004018c4 <ov_power>:
 * \param on_off 1 to turn on OV7740 sensor and 0 to turn off.
 * \param p_pio Pointer to the PIO instance which control OV7740 sensor power.
 * \param ul_mask Bitmask of OV7740 sensor power pin.
 */
void ov_power(uint32_t ul_on_off, Pio* const p_pio, const uint32_t ul_mask)
{
  4018c4:	b508      	push	{r3, lr}
	if (ul_on_off) {
  4018c6:	b120      	cbz	r0, 4018d2 <ov_power+0xe>
		pio_clear(p_pio, ul_mask);
  4018c8:	4608      	mov	r0, r1
  4018ca:	4611      	mov	r1, r2
  4018cc:	4b03      	ldr	r3, [pc, #12]	; (4018dc <ov_power+0x18>)
  4018ce:	4798      	blx	r3
  4018d0:	bd08      	pop	{r3, pc}
	} else {
		pio_set(p_pio, ul_mask);
  4018d2:	4608      	mov	r0, r1
  4018d4:	4611      	mov	r1, r2
  4018d6:	4b02      	ldr	r3, [pc, #8]	; (4018e0 <ov_power+0x1c>)
  4018d8:	4798      	blx	r3
  4018da:	bd08      	pop	{r3, pc}
  4018dc:	00401f4d 	.word	0x00401f4d
  4018e0:	00401f49 	.word	0x00401f49

004018e4 <ov_read_reg>:
 * \param p_twi TWI interface.
 * \param p_packet TWI packet.
 * \return 0 on success, TWID_ERROR_BUSY otherwise.
 */
uint32_t ov_read_reg(Twi* const p_twi, twi_packet_t* const p_packet)
{
  4018e4:	b508      	push	{r3, lr}
	uint32_t ul_status;

	ul_status = twi_master_read(p_twi, p_packet);
  4018e6:	4b01      	ldr	r3, [pc, #4]	; (4018ec <ov_read_reg+0x8>)
  4018e8:	4798      	blx	r3

	return ul_status;
}
  4018ea:	bd08      	pop	{r3, pc}
  4018ec:	004024d1 	.word	0x004024d1

004018f0 <ov_write_reg>:
 * \param p_twi TWI interface.
 * \param p_packet TWI packet.
 * \return 0 on success, TWID_ERROR_BUSY otherwise.
 */
uint32_t ov_write_reg(Twi* const p_twi, twi_packet_t* const p_packet)
{
  4018f0:	b508      	push	{r3, lr}
	uint32_t ul_status;

	ul_status = twi_master_write(p_twi, p_packet);
  4018f2:	4b01      	ldr	r3, [pc, #4]	; (4018f8 <ov_write_reg+0x8>)
  4018f4:	4798      	blx	r3

	return ul_status;
}
  4018f6:	bd08      	pop	{r3, pc}
  4018f8:	004025b1 	.word	0x004025b1

004018fc <ov_write_regs>:
 * \param p_twi TWI interface.
 * \param p_reg_list Register list to be written.
 * \return 0 on success, TWID_ERROR_BUSY otherwise.
 */
uint32_t ov_write_regs(Twi* const p_twi, const ov_reg *p_reg_list)
{
  4018fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  401900:	b086      	sub	sp, #24
  401902:	4607      	mov	r7, r0
  401904:	1c4c      	adds	r4, r1, #1
			(p_next->val == OV_VAL_TERM))) {
		if (p_next->reg == 0xFE) {
			delay_ms(5);
		} else {
			twi_packet_regs.addr[0] = p_next->reg;
			twi_packet_regs.addr_length = 1;
  401906:	2501      	movs	r5, #1
			twi_packet_regs.chip = OV_I2C_SENSOR_ADDRESS;
			twi_packet_regs.length = 1;
			twi_packet_regs.buffer = &(p_next->val);

			ul_err = ov_write_reg(p_twi, &twi_packet_regs);
  401908:	4e12      	ldr	r6, [pc, #72]	; (401954 <ov_write_regs+0x58>)
	ov_reg *p_next = (ov_reg *)p_reg_list;

	while (!((p_next->reg == OV_REG_TERM) &&
			(p_next->val == OV_VAL_TERM))) {
		if (p_next->reg == 0xFE) {
			delay_ms(5);
  40190a:	f8df 804c 	ldr.w	r8, [pc, #76]	; 401958 <ov_write_regs+0x5c>
	uint32_t ul_err;
	uint32_t ul_size = 0;
	twi_packet_t twi_packet_regs;
	ov_reg *p_next = (ov_reg *)p_reg_list;

	while (!((p_next->reg == OV_REG_TERM) &&
  40190e:	e013      	b.n	401938 <ov_write_regs+0x3c>
			(p_next->val == OV_VAL_TERM))) {
		if (p_next->reg == 0xFE) {
  401910:	2bfe      	cmp	r3, #254	; 0xfe
  401912:	d103      	bne.n	40191c <ov_write_regs+0x20>
			delay_ms(5);
  401914:	f24a 706a 	movw	r0, #42858	; 0xa76a
  401918:	47c0      	blx	r8
  40191a:	e00c      	b.n	401936 <ov_write_regs+0x3a>
		} else {
			twi_packet_regs.addr[0] = p_next->reg;
  40191c:	f88d 3004 	strb.w	r3, [sp, #4]
			twi_packet_regs.addr_length = 1;
  401920:	9502      	str	r5, [sp, #8]
			twi_packet_regs.chip = OV_I2C_SENSOR_ADDRESS;
  401922:	2321      	movs	r3, #33	; 0x21
  401924:	f88d 3014 	strb.w	r3, [sp, #20]
			twi_packet_regs.length = 1;
  401928:	9504      	str	r5, [sp, #16]
			twi_packet_regs.buffer = &(p_next->val);
  40192a:	9203      	str	r2, [sp, #12]

			ul_err = ov_write_reg(p_twi, &twi_packet_regs);
  40192c:	4638      	mov	r0, r7
  40192e:	a901      	add	r1, sp, #4
  401930:	47b0      	blx	r6
			ul_size++;

			if (ul_err == TWI_BUSY) {
  401932:	2808      	cmp	r0, #8
  401934:	d00a      	beq.n	40194c <ov_write_regs+0x50>
  401936:	3402      	adds	r4, #2
  401938:	4622      	mov	r2, r4
	uint32_t ul_err;
	uint32_t ul_size = 0;
	twi_packet_t twi_packet_regs;
	ov_reg *p_next = (ov_reg *)p_reg_list;

	while (!((p_next->reg == OV_REG_TERM) &&
  40193a:	f814 3c01 	ldrb.w	r3, [r4, #-1]
  40193e:	2bff      	cmp	r3, #255	; 0xff
  401940:	d1e6      	bne.n	401910 <ov_write_regs+0x14>
  401942:	7821      	ldrb	r1, [r4, #0]
  401944:	29ff      	cmp	r1, #255	; 0xff
  401946:	d1e9      	bne.n	40191c <ov_write_regs+0x20>
			}
		}

		p_next++;
	}
	return 0;
  401948:	2000      	movs	r0, #0
  40194a:	e000      	b.n	40194e <ov_write_regs+0x52>

			ul_err = ov_write_reg(p_twi, &twi_packet_regs);
			ul_size++;

			if (ul_err == TWI_BUSY) {
				return ul_err;
  40194c:	2008      	movs	r0, #8
		}

		p_next++;
	}
	return 0;
}
  40194e:	b006      	add	sp, #24
  401950:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  401954:	004018f1 	.word	0x004018f1
  401958:	20000001 	.word	0x20000001

0040195c <ov_init>:
 *
 * \param p_twi TWI interface.
 * \return 0 on success, 1 otherwise.
 */
uint32_t ov_init(Twi* const p_twi)
{
  40195c:	b5f0      	push	{r4, r5, r6, r7, lr}
  40195e:	b08d      	sub	sp, #52	; 0x34
  401960:	4607      	mov	r7, r0
 */
static uint32_t ov_id(Twi* const p_twi)
{
	twi_packet_t packet_pid;
	twi_packet_t packet_ver;
	uint32_t ul_id = 0;
  401962:	2300      	movs	r3, #0
  401964:	9300      	str	r3, [sp, #0]
	uint32_t ul_ver = 0;
  401966:	9301      	str	r3, [sp, #4]

	/* OV_PID */
	packet_pid.chip = OV_I2C_SENSOR_ADDRESS;
  401968:	2621      	movs	r6, #33	; 0x21
  40196a:	f88d 6018 	strb.w	r6, [sp, #24]
	packet_pid.addr[0] = OV7740_PIDH;
  40196e:	230a      	movs	r3, #10
  401970:	f88d 3008 	strb.w	r3, [sp, #8]
	packet_pid.addr_length = 1;
  401974:	2401      	movs	r4, #1
  401976:	9403      	str	r4, [sp, #12]
	packet_pid.buffer = &ul_id;
  401978:	f8cd d010 	str.w	sp, [sp, #16]
	packet_pid.length = 1;
  40197c:	9405      	str	r4, [sp, #20]

	ov_read_reg(p_twi, &packet_pid);
  40197e:	a902      	add	r1, sp, #8
  401980:	4d3a      	ldr	r5, [pc, #232]	; (401a6c <ov_init+0x110>)
  401982:	47a8      	blx	r5

	/* OV_VER */
	packet_ver.chip = OV_I2C_SENSOR_ADDRESS;
  401984:	f88d 602c 	strb.w	r6, [sp, #44]	; 0x2c
	packet_ver.addr[0] = OV7740_PIDL;
  401988:	230b      	movs	r3, #11
  40198a:	f88d 301c 	strb.w	r3, [sp, #28]
	packet_ver.addr_length = 1;
  40198e:	9408      	str	r4, [sp, #32]
	packet_ver.buffer = &ul_ver;
  401990:	ab01      	add	r3, sp, #4
  401992:	9309      	str	r3, [sp, #36]	; 0x24
	packet_ver.length = 1;
  401994:	940a      	str	r4, [sp, #40]	; 0x28

	ov_read_reg(p_twi, &packet_ver);
  401996:	4638      	mov	r0, r7
  401998:	a907      	add	r1, sp, #28
  40199a:	47a8      	blx	r5
	return ((uint32_t)(ul_id << 8) | ul_ver);
  40199c:	9b01      	ldr	r3, [sp, #4]
  40199e:	9a00      	ldr	r2, [sp, #0]
  4019a0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
{
	uint32_t ul_id = 0;

	ul_id = ov_id( p_twi );

	if (((ul_id >> 8)&0xff)  == OV7740_PIDH_DEFAULT) {
  4019a4:	f3c3 2307 	ubfx	r3, r3, #8, #8
  4019a8:	2b77      	cmp	r3, #119	; 0x77
  4019aa:	d135      	bne.n	401a18 <ov_init+0xbc>
 * \return 0 if the sensor is present, 1 otherwise.
 */
static uint32_t ov_manufacturer(Twi* const p_twi)
{
	twi_packet_t twi_packet;
	uint32_t ul_midh = 0;
  4019ac:	2300      	movs	r3, #0
  4019ae:	9301      	str	r3, [sp, #4]
	uint32_t ul_midl = 0;
  4019b0:	9302      	str	r3, [sp, #8]

	/* OV_MIDH */
	twi_packet.addr[0] = OV7740_MIDH;
  4019b2:	231c      	movs	r3, #28
  4019b4:	f88d 301c 	strb.w	r3, [sp, #28]
	twi_packet.addr_length = 1;
  4019b8:	9408      	str	r4, [sp, #32]
	twi_packet.chip = OV_I2C_SENSOR_ADDRESS;
  4019ba:	f88d 602c 	strb.w	r6, [sp, #44]	; 0x2c
	twi_packet.buffer = &ul_midh;
  4019be:	ab01      	add	r3, sp, #4
  4019c0:	9309      	str	r3, [sp, #36]	; 0x24
	twi_packet.length = 1;
  4019c2:	940a      	str	r4, [sp, #40]	; 0x28

	ov_read_reg(p_twi, &twi_packet);
  4019c4:	4638      	mov	r0, r7
  4019c6:	a907      	add	r1, sp, #28
  4019c8:	47a8      	blx	r5

	/* OV_MIDL */
	twi_packet.addr[0] = OV7740_MIDL;
  4019ca:	231d      	movs	r3, #29
  4019cc:	f88d 301c 	strb.w	r3, [sp, #28]
	twi_packet.addr_length = 1;
  4019d0:	9408      	str	r4, [sp, #32]
	twi_packet.chip = OV_I2C_SENSOR_ADDRESS;
  4019d2:	f88d 602c 	strb.w	r6, [sp, #44]	; 0x2c
	twi_packet.buffer = &ul_midl;
  4019d6:	ab02      	add	r3, sp, #8
  4019d8:	9309      	str	r3, [sp, #36]	; 0x24
	twi_packet.length = 1;
  4019da:	940a      	str	r4, [sp, #40]	; 0x28

	ov_read_reg(p_twi, &twi_packet);
  4019dc:	4638      	mov	r0, r7
  4019de:	a907      	add	r1, sp, #28
  4019e0:	47a8      	blx	r5

	if ((ul_midh == OV7740_MIDH_DEFAULT) && (ul_midl == OV7740_MIDL_DEFAULT)) {
  4019e2:	9b01      	ldr	r3, [sp, #4]
  4019e4:	2b7f      	cmp	r3, #127	; 0x7f
  4019e6:	d13e      	bne.n	401a66 <ov_init+0x10a>
  4019e8:	9b02      	ldr	r3, [sp, #8]
  4019ea:	2ba2      	cmp	r3, #162	; 0xa2
  4019ec:	d13b      	bne.n	401a66 <ov_init+0x10a>
  4019ee:	e015      	b.n	401a1c <ov_init+0xc0>
	if (ul_value != ul_entervalue) {
		return 1;
	}

	/* return old value */
	twi_packet.buffer = &ul_oldvalue;
  4019f0:	ab01      	add	r3, sp, #4
  4019f2:	9309      	str	r3, [sp, #36]	; 0x24
	ov_write_reg(p_twi, &twi_packet);
  4019f4:	4638      	mov	r0, r7
  4019f6:	a907      	add	r1, sp, #28
  4019f8:	4b1d      	ldr	r3, [pc, #116]	; (401a70 <ov_init+0x114>)
  4019fa:	4798      	blx	r3

	twi_packet.buffer = &ul_value;
  4019fc:	f8cd d024 	str.w	sp, [sp, #36]	; 0x24
	ov_read_reg(p_twi, &twi_packet);
  401a00:	4638      	mov	r0, r7
  401a02:	a907      	add	r1, sp, #28
  401a04:	4b19      	ldr	r3, [pc, #100]	; (401a6c <ov_init+0x110>)
  401a06:	4798      	blx	r3

	if (ul_value != ul_oldvalue) {
  401a08:	9801      	ldr	r0, [sp, #4]
  401a0a:	9b00      	ldr	r3, [sp, #0]
  401a0c:	1a18      	subs	r0, r3, r0
  401a0e:	bf18      	it	ne
  401a10:	2001      	movne	r0, #1
  401a12:	e029      	b.n	401a68 <ov_init+0x10c>

	twi_packet.buffer = &ul_value;
	ov_read_reg(p_twi, &twi_packet);

	if (ul_value != ul_entervalue) {
		return 1;
  401a14:	2001      	movs	r0, #1
  401a16:	e027      	b.n	401a68 <ov_init+0x10c>
				return 0;
			}
		}
	}

	return 1;
  401a18:	2001      	movs	r0, #1
  401a1a:	e025      	b.n	401a68 <ov_init+0x10c>
 * \return 0 on success, 1 otherwise.
 */
static uint32_t ov_test_write(Twi* const p_twi)
{
	twi_packet_t twi_packet;
	uint32_t ul_value = 0;
  401a1c:	2300      	movs	r3, #0
  401a1e:	9300      	str	r3, [sp, #0]
	uint32_t ul_oldvalue = 0;
  401a20:	9301      	str	r3, [sp, #4]
	uint32_t ul_entervalue = 0;
  401a22:	9302      	str	r3, [sp, #8]

	/* OV_BLUE_GAIN */
	twi_packet.addr[0] = 0x01;
  401a24:	2301      	movs	r3, #1
  401a26:	f88d 301c 	strb.w	r3, [sp, #28]
	twi_packet.addr_length = 1;
  401a2a:	9308      	str	r3, [sp, #32]
	twi_packet.chip = OV_I2C_SENSOR_ADDRESS;
  401a2c:	2221      	movs	r2, #33	; 0x21
  401a2e:	f88d 202c 	strb.w	r2, [sp, #44]	; 0x2c
	twi_packet.length = 1;
  401a32:	930a      	str	r3, [sp, #40]	; 0x28

	twi_packet.buffer = &ul_oldvalue;
  401a34:	ab01      	add	r3, sp, #4
  401a36:	9309      	str	r3, [sp, #36]	; 0x24
	ov_read_reg(p_twi, &twi_packet);
  401a38:	4638      	mov	r0, r7
  401a3a:	a907      	add	r1, sp, #28
  401a3c:	4c0b      	ldr	r4, [pc, #44]	; (401a6c <ov_init+0x110>)
  401a3e:	47a0      	blx	r4

	ul_entervalue = 0xAD;
  401a40:	ab0c      	add	r3, sp, #48	; 0x30
  401a42:	22ad      	movs	r2, #173	; 0xad
  401a44:	f843 2d28 	str.w	r2, [r3, #-40]!
	twi_packet.buffer = &ul_entervalue;
  401a48:	9309      	str	r3, [sp, #36]	; 0x24
	ov_write_reg(p_twi, &twi_packet);
  401a4a:	4638      	mov	r0, r7
  401a4c:	a907      	add	r1, sp, #28
  401a4e:	4b08      	ldr	r3, [pc, #32]	; (401a70 <ov_init+0x114>)
  401a50:	4798      	blx	r3

	twi_packet.buffer = &ul_value;
  401a52:	f8cd d024 	str.w	sp, [sp, #36]	; 0x24
	ov_read_reg(p_twi, &twi_packet);
  401a56:	4638      	mov	r0, r7
  401a58:	a907      	add	r1, sp, #28
  401a5a:	47a0      	blx	r4

	if (ul_value != ul_entervalue) {
  401a5c:	9b02      	ldr	r3, [sp, #8]
  401a5e:	9a00      	ldr	r2, [sp, #0]
  401a60:	429a      	cmp	r2, r3
  401a62:	d1d7      	bne.n	401a14 <ov_init+0xb8>
  401a64:	e7c4      	b.n	4019f0 <ov_init+0x94>
				return 0;
			}
		}
	}

	return 1;
  401a66:	2001      	movs	r0, #1
}
  401a68:	b00d      	add	sp, #52	; 0x34
  401a6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  401a6c:	004018e5 	.word	0x004018e5
  401a70:	004018f1 	.word	0x004018f1

00401a74 <ov_configure>:
 * \param p_twi TWI interface.
 * \param format Specific format to configure.
 * \return 0 on success, 1 otherwise.
 */
uint32_t ov_configure(Twi* const p_twi, const e_ov7740_format format)
{
  401a74:	b508      	push	{r3, lr}
	const ov_reg *p_regs_conf = NULL;

	/* Common register initialization */
	switch (format) {
  401a76:	2908      	cmp	r1, #8
  401a78:	d814      	bhi.n	401aa4 <ov_configure+0x30>
  401a7a:	e8df f001 	tbb	[pc, r1]
  401a7e:	0515      	.short	0x0515
  401a80:	0b090717 	.word	0x0b090717
  401a84:	0f0d      	.short	0x0f0d
  401a86:	11          	.byte	0x11
  401a87:	00          	.byte	0x00
	case QVGA_YUV422_10FPS:
		p_regs_conf = OV7740_QVGA_YUV422_10FPS;
		break;

	case QVGA_YUV422_15FPS:
		p_regs_conf = OV7740_QVGA_YUV422_15FPS;
  401a88:	490b      	ldr	r1, [pc, #44]	; (401ab8 <ov_configure+0x44>)
  401a8a:	e010      	b.n	401aae <ov_configure+0x3a>
	case QVGA_YUV422_20FPS:
		p_regs_conf = OV7740_QVGA_YUV422_20FPS;
		break;

	case QVGA_YUV422_30FPS:
		p_regs_conf = OV7740_QVGA_YUV422_30FPS;
  401a8c:	490b      	ldr	r1, [pc, #44]	; (401abc <ov_configure+0x48>)
		break;
  401a8e:	e00e      	b.n	401aae <ov_configure+0x3a>

	case QVGA_RGB888:
		p_regs_conf = OV7740_QVGA_RGB888;
  401a90:	490b      	ldr	r1, [pc, #44]	; (401ac0 <ov_configure+0x4c>)
		break;
  401a92:	e00c      	b.n	401aae <ov_configure+0x3a>

	case QQVGA_YUV422:
		p_regs_conf = OV7740_QQVGA_YUV422;
  401a94:	490b      	ldr	r1, [pc, #44]	; (401ac4 <ov_configure+0x50>)
		break;
  401a96:	e00a      	b.n	401aae <ov_configure+0x3a>

	case QQVGA_RGB888:
		p_regs_conf = OV7740_QQVGA_RGB888;
  401a98:	490b      	ldr	r1, [pc, #44]	; (401ac8 <ov_configure+0x54>)
		break;
  401a9a:	e008      	b.n	401aae <ov_configure+0x3a>

	case TEST_PATTERN:
		p_regs_conf = OV7740_TEST_PATTERN;
  401a9c:	490b      	ldr	r1, [pc, #44]	; (401acc <ov_configure+0x58>)
		break;
  401a9e:	e006      	b.n	401aae <ov_configure+0x3a>

	case VGA_YUV422_20FPS:
		p_regs_conf = OV7740_VGA_YUV422_20FPS;
  401aa0:	490b      	ldr	r1, [pc, #44]	; (401ad0 <ov_configure+0x5c>)
		break;
  401aa2:	e004      	b.n	401aae <ov_configure+0x3a>
	if (p_regs_conf != NULL) {
		ov_write_regs( p_twi, p_regs_conf );
		return 0;
	}

	return 1;
  401aa4:	2001      	movs	r0, #1
  401aa6:	bd08      	pop	{r3, pc}
	const ov_reg *p_regs_conf = NULL;

	/* Common register initialization */
	switch (format) {
	case QVGA_YUV422_10FPS:
		p_regs_conf = OV7740_QVGA_YUV422_10FPS;
  401aa8:	490a      	ldr	r1, [pc, #40]	; (401ad4 <ov_configure+0x60>)
  401aaa:	e000      	b.n	401aae <ov_configure+0x3a>
	case QVGA_YUV422_15FPS:
		p_regs_conf = OV7740_QVGA_YUV422_15FPS;
		break;

	case QVGA_YUV422_20FPS:
		p_regs_conf = OV7740_QVGA_YUV422_20FPS;
  401aac:	490a      	ldr	r1, [pc, #40]	; (401ad8 <ov_configure+0x64>)
	default:
		break;
	}

	if (p_regs_conf != NULL) {
		ov_write_regs( p_twi, p_regs_conf );
  401aae:	4b0b      	ldr	r3, [pc, #44]	; (401adc <ov_configure+0x68>)
  401ab0:	4798      	blx	r3
		return 0;
  401ab2:	2000      	movs	r0, #0
	}

	return 1;
}
  401ab4:	bd08      	pop	{r3, pc}
  401ab6:	bf00      	nop
  401ab8:	00403188 	.word	0x00403188
  401abc:	00403734 	.word	0x00403734
  401ac0:	00403278 	.word	0x00403278
  401ac4:	00403640 	.word	0x00403640
  401ac8:	00403094 	.word	0x00403094
  401acc:	0040336c 	.word	0x0040336c
  401ad0:	00402fa4 	.word	0x00402fa4
  401ad4:	00403550 	.word	0x00403550
  401ad8:	00403460 	.word	0x00403460
  401adc:	004018fd 	.word	0x004018fd

00401ae0 <aat31xx_set_backlight>:
 * \param ul_level backlight level.
 *
 * \note pin BOARD_AAT31XX_SET_GPIO must be configured before calling aat31xx_set_backlight.
 */
void aat31xx_set_backlight(uint32_t ul_level)
{
  401ae0:	b470      	push	{r4, r5, r6}
  401ae2:	b083      	sub	sp, #12
	volatile uint32_t ul_delay;
	uint32_t i;

#ifdef CONF_BOARD_AAT3155
	ul_level = AAT31XX_MAX_BACKLIGHT_LEVEL - ul_level + 1;
  401ae4:	f1c0 0011 	rsb	r0, r0, #17
#ifdef CONF_BOARD_AAT3193
	ul_level = AAT31XX_MAX_BACKLIGHT_LEVEL - ul_level + 1;
#endif

	/* Ensure valid level */
	ul_level = (ul_level > AAT31XX_MAX_BACKLIGHT_LEVEL) ? AAT31XX_MAX_BACKLIGHT_LEVEL : ul_level;
  401ae8:	2810      	cmp	r0, #16
  401aea:	bf28      	it	cs
  401aec:	2010      	movcs	r0, #16
	ul_level = (ul_level < AAT31XX_MIN_BACKLIGHT_LEVEL) ? AAT31XX_MIN_BACKLIGHT_LEVEL : ul_level;
  401aee:	2800      	cmp	r0, #0
  401af0:	bf08      	it	eq
  401af2:	2001      	moveq	r0, #1
 * \param ul_level backlight level.
 *
 * \note pin BOARD_AAT31XX_SET_GPIO must be configured before calling aat31xx_set_backlight.
 */
void aat31xx_set_backlight(uint32_t ul_level)
{
  401af4:	2100      	movs	r1, #0
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  401af6:	4e10      	ldr	r6, [pc, #64]	; (401b38 <aat31xx_set_backlight+0x58>)
  401af8:	f44f 5500 	mov.w	r5, #8192	; 0x2000
	ul_level = (ul_level < AAT31XX_MIN_BACKLIGHT_LEVEL) ? AAT31XX_MIN_BACKLIGHT_LEVEL : ul_level;

	/* Set new backlight level */
	for (i = 0; i < ul_level; i++) {
		ioport_set_pin_level(BOARD_AAT31XX_SET_GPIO, IOPORT_PIN_LEVEL_LOW);
		ul_delay = DELAY_PULSE;
  401afc:	2418      	movs	r4, #24
  401afe:	6375      	str	r5, [r6, #52]	; 0x34
  401b00:	9401      	str	r4, [sp, #4]
		while (ul_delay--) {
  401b02:	9b01      	ldr	r3, [sp, #4]
  401b04:	1e5a      	subs	r2, r3, #1
  401b06:	9201      	str	r2, [sp, #4]
  401b08:	2b00      	cmp	r3, #0
  401b0a:	d1fa      	bne.n	401b02 <aat31xx_set_backlight+0x22>
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  401b0c:	6335      	str	r5, [r6, #48]	; 0x30
		}

		ioport_set_pin_level(BOARD_AAT31XX_SET_GPIO, IOPORT_PIN_LEVEL_HIGH);

		ul_delay = DELAY_PULSE;
  401b0e:	9401      	str	r4, [sp, #4]
		while (ul_delay--) {
  401b10:	9b01      	ldr	r3, [sp, #4]
  401b12:	1e5a      	subs	r2, r3, #1
  401b14:	9201      	str	r2, [sp, #4]
  401b16:	2b00      	cmp	r3, #0
  401b18:	d1fa      	bne.n	401b10 <aat31xx_set_backlight+0x30>
	/* Ensure valid level */
	ul_level = (ul_level > AAT31XX_MAX_BACKLIGHT_LEVEL) ? AAT31XX_MAX_BACKLIGHT_LEVEL : ul_level;
	ul_level = (ul_level < AAT31XX_MIN_BACKLIGHT_LEVEL) ? AAT31XX_MIN_BACKLIGHT_LEVEL : ul_level;

	/* Set new backlight level */
	for (i = 0; i < ul_level; i++) {
  401b1a:	3101      	adds	r1, #1
  401b1c:	4281      	cmp	r1, r0
  401b1e:	d3ee      	bcc.n	401afe <aat31xx_set_backlight+0x1e>
		ul_delay = DELAY_PULSE;
		while (ul_delay--) {
		}
	}

	ul_delay = DELAY_ENABLE;
  401b20:	f44f 3300 	mov.w	r3, #131072	; 0x20000
  401b24:	9301      	str	r3, [sp, #4]
	while (ul_delay--) {
  401b26:	9b01      	ldr	r3, [sp, #4]
  401b28:	1e5a      	subs	r2, r3, #1
  401b2a:	9201      	str	r2, [sp, #4]
  401b2c:	2b00      	cmp	r3, #0
  401b2e:	d1fa      	bne.n	401b26 <aat31xx_set_backlight+0x46>
	}
}
  401b30:	b003      	add	sp, #12
  401b32:	bc70      	pop	{r4, r5, r6}
  401b34:	4770      	bx	lr
  401b36:	bf00      	nop
  401b38:	400e1200 	.word	0x400e1200

00401b3c <aat31xx_disable_backlight>:

/**
 * \brief Switch off backlight.
 */
void aat31xx_disable_backlight(void)
{
  401b3c:	b082      	sub	sp, #8
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  401b3e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  401b42:	4b06      	ldr	r3, [pc, #24]	; (401b5c <aat31xx_disable_backlight+0x20>)
  401b44:	635a      	str	r2, [r3, #52]	; 0x34
	volatile uint32_t ul_delay;

	ioport_set_pin_level(BOARD_AAT31XX_SET_GPIO, IOPORT_PIN_LEVEL_LOW);

	ul_delay = DELAY_DISABLE;
  401b46:	f44f 3300 	mov.w	r3, #131072	; 0x20000
  401b4a:	9301      	str	r3, [sp, #4]
	while (ul_delay--) {
  401b4c:	9b01      	ldr	r3, [sp, #4]
  401b4e:	1e5a      	subs	r2, r3, #1
  401b50:	9201      	str	r2, [sp, #4]
  401b52:	2b00      	cmp	r3, #0
  401b54:	d1fa      	bne.n	401b4c <aat31xx_disable_backlight+0x10>
	}
}
  401b56:	b002      	add	sp, #8
  401b58:	4770      	bx	lr
  401b5a:	bf00      	nop
  401b5c:	400e1200 	.word	0x400e1200

00401b60 <ili9325_write_ram>:
 *
 * \param ul_color 24-bits RGB color.
 */
static void ili9325_write_ram(ili9325_color_t ul_color)
{
	LCD_WD((ul_color >> 16) & 0xFF);
  401b60:	f3c0 4207 	ubfx	r2, r0, #16, #8
	{
		*((volatile uint8_t *)(BOARD_ILI9325_ADDR)) = lcd_index; /* ILI9325 index register address */
	}
	static inline void LCD_WD(uint8_t lcd_data)
	{
		*((volatile uint8_t *)((BOARD_ILI9325_ADDR) | (BOARD_ILI9325_RS))) = lcd_data;
  401b64:	4b03      	ldr	r3, [pc, #12]	; (401b74 <ili9325_write_ram+0x14>)
  401b66:	701a      	strb	r2, [r3, #0]
	LCD_WD((ul_color >> 8) & 0xFF);
  401b68:	f3c0 2207 	ubfx	r2, r0, #8, #8
  401b6c:	701a      	strb	r2, [r3, #0]
	LCD_WD(ul_color & 0xFF);
  401b6e:	b2c0      	uxtb	r0, r0
  401b70:	7018      	strb	r0, [r3, #0]
  401b72:	4770      	bx	lr
  401b74:	62000002 	.word	0x62000002

00401b78 <ili9325_write_register>:

/* Define EBI access for ILI9325 8-bit System Interface.*/
#if defined(BOARD_ILI9325_ADDR) && defined (BOARD_ILI9325_RS)
	static inline void LCD_IR(uint8_t lcd_index)
	{
		*((volatile uint8_t *)(BOARD_ILI9325_ADDR)) = lcd_index; /* ILI9325 index register address */
  401b78:	f04f 43c4 	mov.w	r3, #1644167168	; 0x62000000
  401b7c:	2200      	movs	r2, #0
  401b7e:	701a      	strb	r2, [r3, #0]
  401b80:	7018      	strb	r0, [r3, #0]
 */
static void ili9325_write_register(uint8_t uc_reg, uint16_t us_data)
{
	LCD_IR(0);
	LCD_IR(uc_reg);
	LCD_WD((us_data >> 8) & 0xFF);
  401b82:	0a0a      	lsrs	r2, r1, #8
	}
	static inline void LCD_WD(uint8_t lcd_data)
	{
		*((volatile uint8_t *)((BOARD_ILI9325_ADDR) | (BOARD_ILI9325_RS))) = lcd_data;
  401b84:	3302      	adds	r3, #2
  401b86:	701a      	strb	r2, [r3, #0]
	LCD_WD(us_data & 0xFF);
  401b88:	b2c9      	uxtb	r1, r1
  401b8a:	7019      	strb	r1, [r3, #0]
  401b8c:	4770      	bx	lr
  401b8e:	bf00      	nop

00401b90 <ili9325_delay>:

/**
 * \brief Delay function.
 */
static void ili9325_delay(uint32_t ul_ms)
{
  401b90:	b082      	sub	sp, #8
	volatile uint32_t i;

	for(i = 0; i < ul_ms; i++) {
  401b92:	2300      	movs	r3, #0
  401b94:	9301      	str	r3, [sp, #4]
  401b96:	9b01      	ldr	r3, [sp, #4]
  401b98:	4298      	cmp	r0, r3
  401b9a:	d911      	bls.n	401bc0 <ili9325_delay+0x30>
		for(i = 0; i < 100000; i++) {
  401b9c:	2100      	movs	r1, #0
  401b9e:	4a09      	ldr	r2, [pc, #36]	; (401bc4 <ili9325_delay+0x34>)
  401ba0:	9101      	str	r1, [sp, #4]
  401ba2:	9b01      	ldr	r3, [sp, #4]
  401ba4:	4293      	cmp	r3, r2
  401ba6:	d805      	bhi.n	401bb4 <ili9325_delay+0x24>
  401ba8:	9b01      	ldr	r3, [sp, #4]
  401baa:	3301      	adds	r3, #1
  401bac:	9301      	str	r3, [sp, #4]
  401bae:	9b01      	ldr	r3, [sp, #4]
  401bb0:	4293      	cmp	r3, r2
  401bb2:	d9f9      	bls.n	401ba8 <ili9325_delay+0x18>
 */
static void ili9325_delay(uint32_t ul_ms)
{
	volatile uint32_t i;

	for(i = 0; i < ul_ms; i++) {
  401bb4:	9b01      	ldr	r3, [sp, #4]
  401bb6:	3301      	adds	r3, #1
  401bb8:	9301      	str	r3, [sp, #4]
  401bba:	9b01      	ldr	r3, [sp, #4]
  401bbc:	4283      	cmp	r3, r0
  401bbe:	d3ef      	bcc.n	401ba0 <ili9325_delay+0x10>
		for(i = 0; i < 100000; i++) {
		}
	}
}
  401bc0:	b002      	add	sp, #8
  401bc2:	4770      	bx	lr
  401bc4:	0001869f 	.word	0x0001869f

00401bc8 <ili9325_display_on>:

/**
 * \brief Turn on the LCD.
 */
void ili9325_display_on(void)
{
  401bc8:	b508      	push	{r3, lr}
	ili9325_write_register(ILI9325_DISP_CTRL1,
  401bca:	2007      	movs	r0, #7
  401bcc:	f240 1133 	movw	r1, #307	; 0x133
  401bd0:	4b01      	ldr	r3, [pc, #4]	; (401bd8 <ili9325_display_on+0x10>)
  401bd2:	4798      	blx	r3
  401bd4:	bd08      	pop	{r3, pc}
  401bd6:	bf00      	nop
  401bd8:	00401b79 	.word	0x00401b79

00401bdc <ili9325_set_foreground_color>:
 * \brief Set foreground color.
 *
 * \param ul_color foreground color.
 */
void ili9325_set_foreground_color(ili9325_color_t ul_color)
{
  401bdc:	4a04      	ldr	r2, [pc, #16]	; (401bf0 <ili9325_set_foreground_color+0x14>)
  401bde:	1f13      	subs	r3, r2, #4
  401be0:	f502 726f 	add.w	r2, r2, #956	; 0x3bc
	uint32_t i;

	/* Fill the cache with selected color */
	for (i = 0; i < LCD_DATA_CACHE_SIZE; ++i) {
		g_ul_pixel_cache[i] = ul_color;
  401be4:	f843 0f04 	str.w	r0, [r3, #4]!
void ili9325_set_foreground_color(ili9325_color_t ul_color)
{
	uint32_t i;

	/* Fill the cache with selected color */
	for (i = 0; i < LCD_DATA_CACHE_SIZE; ++i) {
  401be8:	4293      	cmp	r3, r2
  401bea:	d1fb      	bne.n	401be4 <ili9325_set_foreground_color+0x8>
		g_ul_pixel_cache[i] = ul_color;
	}
}
  401bec:	4770      	bx	lr
  401bee:	bf00      	nop
  401bf0:	2000a5ac 	.word	0x2000a5ac

00401bf4 <ili9325_set_window>:
 * \param ul_width The width of the window.
 * \param ul_height The height of the window.
 */
void ili9325_set_window(uint32_t ul_x, uint32_t ul_y, uint32_t ul_width,
		uint32_t ul_height)
{
  401bf4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  401bf8:	460f      	mov	r7, r1
  401bfa:	4615      	mov	r5, r2
  401bfc:	461c      	mov	r4, r3
	Assert(ul_y <= 0x13f);
	Assert(ul_width <= (0xF0 - ul_x));
	Assert(ul_height <= (0x140 - ul_y));

	/* Set Horizontal Address Start Position */
	ili9325_write_register(ILI9325_HORIZONTAL_ADDR_START, (uint16_t)ul_x);
  401bfe:	fa1f f880 	uxth.w	r8, r0
  401c02:	2050      	movs	r0, #80	; 0x50
  401c04:	4641      	mov	r1, r8
  401c06:	4e09      	ldr	r6, [pc, #36]	; (401c2c <ili9325_set_window+0x38>)
  401c08:	47b0      	blx	r6
  401c0a:	1e69      	subs	r1, r5, #1

	/* Set Horizontal Address End Position */
	ili9325_write_register(ILI9325_HORIZONTAL_ADDR_END, (uint16_t)(ul_x + ul_width - 1));
  401c0c:	4441      	add	r1, r8
  401c0e:	2051      	movs	r0, #81	; 0x51
  401c10:	b289      	uxth	r1, r1
  401c12:	47b0      	blx	r6

	/* Set Vertical Address Start Position */
	ili9325_write_register(ILI9325_VERTICAL_ADDR_START, (uint16_t)ul_y);
  401c14:	b2bd      	uxth	r5, r7
  401c16:	2052      	movs	r0, #82	; 0x52
  401c18:	4629      	mov	r1, r5
  401c1a:	47b0      	blx	r6
  401c1c:	1e61      	subs	r1, r4, #1

	/* Set Vertical Address End Position */
	ili9325_write_register(ILI9325_VERTICAL_ADDR_END, (uint16_t)(ul_y + ul_height - 1));
  401c1e:	4429      	add	r1, r5
  401c20:	2053      	movs	r0, #83	; 0x53
  401c22:	b289      	uxth	r1, r1
  401c24:	47b0      	blx	r6
  401c26:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  401c2a:	bf00      	nop
  401c2c:	00401b79 	.word	0x00401b79

00401c30 <ili9325_set_cursor_position>:
 *
 * \param us_x X coordinate of upper-left corner on LCD.
 * \param us_y Y coordinate of upper-left corner on LCD.
 */
void ili9325_set_cursor_position(uint16_t us_x, uint16_t us_y)
{
  401c30:	b538      	push	{r3, r4, r5, lr}
  401c32:	4603      	mov	r3, r0
  401c34:	460d      	mov	r5, r1
	/* GRAM Horizontal/Vertical Address Set (R20h, R21h) */
	ili9325_write_register(ILI9325_HORIZONTAL_GRAM_ADDR_SET, us_x); /* column */
  401c36:	2020      	movs	r0, #32
  401c38:	4619      	mov	r1, r3
  401c3a:	4c03      	ldr	r4, [pc, #12]	; (401c48 <ili9325_set_cursor_position+0x18>)
  401c3c:	47a0      	blx	r4
	ili9325_write_register(ILI9325_VERTICAL_GRAM_ADDR_SET, us_y); /* row */
  401c3e:	2021      	movs	r0, #33	; 0x21
  401c40:	4629      	mov	r1, r5
  401c42:	47a0      	blx	r4
  401c44:	bd38      	pop	{r3, r4, r5, pc}
  401c46:	bf00      	nop
  401c48:	00401b79 	.word	0x00401b79

00401c4c <ili9325_init>:

/* Define EBI access for ILI9325 8-bit System Interface.*/
#if defined(BOARD_ILI9325_ADDR) && defined (BOARD_ILI9325_RS)
	static inline void LCD_IR(uint8_t lcd_index)
	{
		*((volatile uint8_t *)(BOARD_ILI9325_ADDR)) = lcd_index; /* ILI9325 index register address */
  401c4c:	f04f 43c4 	mov.w	r3, #1644167168	; 0x62000000
  401c50:	2200      	movs	r2, #0
  401c52:	701a      	strb	r2, [r3, #0]
  401c54:	701a      	strb	r2, [r3, #0]
	{
		*((volatile uint8_t *)((BOARD_ILI9325_ADDR) | (BOARD_ILI9325_RS))) = lcd_data;
	}
	static inline uint8_t LCD_RD(void)
	{
		return *((volatile uint8_t *)((BOARD_ILI9325_ADDR) | (BOARD_ILI9325_RS)));
  401c56:	4a5f      	ldr	r2, [pc, #380]	; (401dd4 <ili9325_init+0x188>)
  401c58:	7811      	ldrb	r1, [r2, #0]
  401c5a:	7813      	ldrb	r3, [r2, #0]
static uint16_t ili9325_lcd_get_16(void)
{
	uint16_t us_value;

	us_value = LCD_RD();
	us_value = (us_value << 8) | LCD_RD();
  401c5c:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
uint32_t ili9325_init(struct ili9325_opt_t *p_opt)
{
	/* Check ILI9325 chipid */
	uint16_t chipid = ili9325_read_register(ILI9325_DEVICE_CODE_REG); /* Driver Code Read (R00h) */

	if (chipid != ILI9325_DEVICE_CODE) {
  401c60:	b21b      	sxth	r3, r3
  401c62:	4a5d      	ldr	r2, [pc, #372]	; (401dd8 <ili9325_init+0x18c>)
  401c64:	4293      	cmp	r3, r2
  401c66:	f040 80b3 	bne.w	401dd0 <ili9325_init+0x184>
 * \param p_opt pointer to ILI9325 option structure.
 *
 * \return 0 if initialization succeeds, otherwise fails.
 */
uint32_t ili9325_init(struct ili9325_opt_t *p_opt)
{
  401c6a:	b570      	push	{r4, r5, r6, lr}
  401c6c:	4605      	mov	r5, r0
	if (chipid != ILI9325_DEVICE_CODE) {
		return 1;
	}

	/* Turn off LCD */
	ili9325_write_register(ILI9325_DISP_CTRL1, ILI9325_DISP_CTRL1_GON |
  401c6e:	2007      	movs	r0, #7
  401c70:	2133      	movs	r1, #51	; 0x33
  401c72:	4c5a      	ldr	r4, [pc, #360]	; (401ddc <ili9325_init+0x190>)
  401c74:	47a0      	blx	r4
			ILI9325_DISP_CTRL1_DTE | ILI9325_DISP_CTRL1_D(0x03));

	/* Start initial sequence */
	/* Disable sleep and standby mode*/
	ili9325_write_register(ILI9325_POWER_CTRL1, 0x0000);
  401c76:	2010      	movs	r0, #16
  401c78:	2100      	movs	r1, #0
  401c7a:	47a0      	blx	r4
	/* Start internal OSC */
	ili9325_write_register(ILI9325_START_OSC_CTRL, ILI9325_START_OSC_CTRL_EN);
  401c7c:	2000      	movs	r0, #0
  401c7e:	2101      	movs	r1, #1
  401c80:	47a0      	blx	r4
	/* Set SS bit and direction output from S720 to S1 */
	ili9325_write_register(ILI9325_DRIVER_OUTPUT_CTRL1, ILI9325_DRIVER_OUTPUT_CTRL1_SS);
  401c82:	2001      	movs	r0, #1
  401c84:	f44f 7180 	mov.w	r1, #256	; 0x100
  401c88:	47a0      	blx	r4
	/* Set 1 line inversion */
	ili9325_write_register(ILI9325_LCD_DRIVING_CTRL, ILI9325_LCD_DRIVING_CTRL_BIT10 |
  401c8a:	2002      	movs	r0, #2
  401c8c:	f44f 61e0 	mov.w	r1, #1792	; 0x700
  401c90:	47a0      	blx	r4
			ILI9325_LCD_DRIVING_CTRL_EOR | ILI9325_LCD_DRIVING_CTRL_BC0);
	/* Disable resizing feature */
	ili9325_write_register(ILI9325_RESIZE_CTRL, 0x0000);
  401c92:	2004      	movs	r0, #4
  401c94:	2100      	movs	r1, #0
  401c96:	47a0      	blx	r4
	/* Set the back porch and front porch */
	ili9325_write_register(ILI9325_DISP_CTRL2, ILI9325_DISP_CTRL2_BP(0x07) |
  401c98:	2008      	movs	r0, #8
  401c9a:	f240 2107 	movw	r1, #519	; 0x207
  401c9e:	47a0      	blx	r4
			ILI9325_DISP_CTRL2_FP(0x02));
	/* Set non-display area refresh cycle ISC[3:0] */
	ili9325_write_register(ILI9325_DISP_CTRL3, 0x0000);
  401ca0:	2009      	movs	r0, #9
  401ca2:	2100      	movs	r1, #0
  401ca4:	47a0      	blx	r4
	/* Disable FMARK function */
	ili9325_write_register(ILI9325_DISP_CTRL4, 0x0000);
  401ca6:	200a      	movs	r0, #10
  401ca8:	2100      	movs	r1, #0
  401caa:	47a0      	blx	r4
	/* 18-bit RGB interface and writing display data by the system interface */
	ili9325_write_register(ILI9325_RGB_DISP_INTERFACE_CTRL1, 0x0000);
  401cac:	200c      	movs	r0, #12
  401cae:	2100      	movs	r1, #0
  401cb0:	47a0      	blx	r4
	/* Set the output position of frame cycle */
	ili9325_write_register(ILI9325_FRAME_MAKER_POS, 0x0000);
  401cb2:	200d      	movs	r0, #13
  401cb4:	2100      	movs	r1, #0
  401cb6:	47a0      	blx	r4
	/* RGB interface polarity */
	ili9325_write_register(ILI9325_RGB_DISP_INTERFACE_CTRL2, 0x0000);
  401cb8:	200f      	movs	r0, #15
  401cba:	2100      	movs	r1, #0
  401cbc:	47a0      	blx	r4

	/* Power on sequence */
	/* Disable sleep and standby mode */
	ili9325_write_register(ILI9325_POWER_CTRL1, 0x0000);
  401cbe:	2010      	movs	r0, #16
  401cc0:	2100      	movs	r1, #0
  401cc2:	47a0      	blx	r4
	/* Selects the operating frequency of the step-up circuit 1,2 and Sets the ratio factor of Vci */
	ili9325_write_register(ILI9325_POWER_CTRL2, 0x0000);
  401cc4:	2011      	movs	r0, #17
  401cc6:	2100      	movs	r1, #0
  401cc8:	47a0      	blx	r4
	/* Set VREG1OUT voltage */
	ili9325_write_register(ILI9325_POWER_CTRL3, 0x0000);
  401cca:	2012      	movs	r0, #18
  401ccc:	2100      	movs	r1, #0
  401cce:	47a0      	blx	r4
	/* Set VCOM amplitude */
	ili9325_write_register(ILI9325_POWER_CTRL4, 0x0000);
  401cd0:	2013      	movs	r0, #19
  401cd2:	2100      	movs	r1, #0
  401cd4:	47a0      	blx	r4
	ili9325_delay(200);
  401cd6:	20c8      	movs	r0, #200	; 0xc8
  401cd8:	4e41      	ldr	r6, [pc, #260]	; (401de0 <ili9325_init+0x194>)
  401cda:	47b0      	blx	r6

	/* Enable power supply and source driver */
	/* Adjusts the constant current and Sets the factor used in the step-up circuits.*/
	ili9325_write_register(ILI9325_POWER_CTRL1, ILI9325_POWER_CTRL1_SAP |
  401cdc:	2010      	movs	r0, #16
  401cde:	f241 2190 	movw	r1, #4752	; 0x1290
  401ce2:	47a0      	blx	r4
			ILI9325_POWER_CTRL1_BT(0x02) | ILI9325_POWER_CTRL1_APE | ILI9325_POWER_CTRL1_AP(0x01));
	/* Select the operating frequency of the step-up circuit 1,2 and Sets the ratio factor of Vci */
	ili9325_write_register(ILI9325_POWER_CTRL2, ILI9325_POWER_CTRL2_DC1(0x02) |
  401ce4:	2011      	movs	r0, #17
  401ce6:	f240 2127 	movw	r1, #551	; 0x227
  401cea:	47a0      	blx	r4
			ILI9325_POWER_CTRL2_DC0(0x02) | ILI9325_POWER_CTRL2_VC(0x07));
	ili9325_delay(50);
  401cec:	2032      	movs	r0, #50	; 0x32
  401cee:	47b0      	blx	r6
	/* Internal reference voltage= Vci */
	ili9325_write_register(ILI9325_POWER_CTRL3, ILI9325_POWER_CTRL3_PON |
  401cf0:	2012      	movs	r0, #18
  401cf2:	211b      	movs	r1, #27
  401cf4:	47a0      	blx	r4
			ILI9325_POWER_CTRL3_VRH(0x0B));
	ili9325_delay(50);
  401cf6:	2032      	movs	r0, #50	; 0x32
  401cf8:	47b0      	blx	r6
	/* Set VDV[4:0] for VCOM amplitude */
	ili9325_write_register(ILI9325_POWER_CTRL4, ILI9325_POWER_CTRL4_VDV(0x11));
  401cfa:	2013      	movs	r0, #19
  401cfc:	f44f 5188 	mov.w	r1, #4352	; 0x1100
  401d00:	47a0      	blx	r4
	/* Set VCM[5:0] for VCOMH */
	ili9325_write_register(ILI9325_POWER_CTRL7, ILI9325_POWER_CTRL7_VCM(0x19));
  401d02:	2029      	movs	r0, #41	; 0x29
  401d04:	2119      	movs	r1, #25
  401d06:	47a0      	blx	r4
	/* Set Frame Rate */
	ili9325_write_register(ILI9325_FRAME_RATE_AND_COLOR_CTRL,
  401d08:	202b      	movs	r0, #43	; 0x2b
  401d0a:	210d      	movs	r1, #13
  401d0c:	47a0      	blx	r4
			ILI9325_FRAME_RATE_AND_COLOR_CTRL_FRS(0x0D));
	ili9325_delay(50);
  401d0e:	2032      	movs	r0, #50	; 0x32
  401d10:	47b0      	blx	r6

	/* Adjust the Gamma Curve */
	ili9325_write_register(ILI9325_GAMMA_CTRL1, 0x0000);
  401d12:	2030      	movs	r0, #48	; 0x30
  401d14:	2100      	movs	r1, #0
  401d16:	47a0      	blx	r4
	ili9325_write_register(ILI9325_GAMMA_CTRL2, ILI9325_GAMMA_CTRL2_KP3(0x02) |
  401d18:	2031      	movs	r0, #49	; 0x31
  401d1a:	f44f 7101 	mov.w	r1, #516	; 0x204
  401d1e:	47a0      	blx	r4
			ILI9325_GAMMA_CTRL2_KP2(0x04));
	ili9325_write_register(ILI9325_GAMMA_CTRL3, ILI9325_GAMMA_CTRL3_KP5(0x02) |
  401d20:	2032      	movs	r0, #50	; 0x32
  401d22:	f44f 7100 	mov.w	r1, #512	; 0x200
  401d26:	47a0      	blx	r4
			ILI9325_GAMMA_CTRL3_KP4(0x00));
	ili9325_write_register(ILI9325_GAMMA_CTRL4, ILI9325_GAMMA_CTRL4_RP1(0x00) |
  401d28:	2035      	movs	r0, #53	; 0x35
  401d2a:	2107      	movs	r1, #7
  401d2c:	47a0      	blx	r4
			ILI9325_GAMMA_CTRL4_RP0(0x07));
	ili9325_write_register(ILI9325_GAMMA_CTRL5, ILI9325_GAMMA_CTRL5_VRP1(0x14) |
  401d2e:	2036      	movs	r0, #54	; 0x36
  401d30:	f241 4104 	movw	r1, #5124	; 0x1404
  401d34:	47a0      	blx	r4
			ILI9325_GAMMA_CTRL5_VRP0(0x04));
	ili9325_write_register(ILI9325_GAMMA_CTRL6, ILI9325_GAMMA_CTRL6_KN1(0x07) |
  401d36:	2037      	movs	r0, #55	; 0x37
  401d38:	f240 7105 	movw	r1, #1797	; 0x705
  401d3c:	47a0      	blx	r4
			ILI9325_GAMMA_CTRL6_KN0(0x05));
	ili9325_write_register(ILI9325_GAMMA_CTRL7, ILI9325_GAMMA_CTRL7_KN3(0x03) |
  401d3e:	2038      	movs	r0, #56	; 0x38
  401d40:	f240 3105 	movw	r1, #773	; 0x305
  401d44:	47a0      	blx	r4
			ILI9325_GAMMA_CTRL7_KN2(0x05));
	ili9325_write_register(ILI9325_GAMMA_CTRL8, ILI9325_GAMMA_CTRL8_KN5(0x07) |
  401d46:	2039      	movs	r0, #57	; 0x39
  401d48:	f240 7107 	movw	r1, #1799	; 0x707
  401d4c:	47a0      	blx	r4
			ILI9325_GAMMA_CTRL8_KN4(0x07));
	ili9325_write_register(ILI9325_GAMMA_CTRL9, ILI9325_GAMMA_CTRL9_RN1(0x07) |
  401d4e:	203c      	movs	r0, #60	; 0x3c
  401d50:	f240 7101 	movw	r1, #1793	; 0x701
  401d54:	47a0      	blx	r4
			ILI9325_GAMMA_CTRL9_RN0(0x01));
	ili9325_write_register(ILI9325_GAMMA_CTRL10, ILI9325_GAMMA_CTRL10_VRN1(0x00) |
  401d56:	203d      	movs	r0, #61	; 0x3d
  401d58:	210e      	movs	r1, #14
  401d5a:	47a0      	blx	r4
			ILI9325_GAMMA_CTRL10_VRN0(0x0E));
	/* Use the high speed write mode (HWM=1) */
	/* When TRI = 1, data are transferred to the internal RAM in 8-bit x 3 transfers mode via the 8-bit interface. */
	/* DFM Set the mode of transferring data to the internal RAM when TRI = 1. */
	/* I/D[1:0] = 11 Horizontal : increment Vertical : increment, AM=0:Horizontal */
	ili9325_write_register(ILI9325_ENTRY_MODE, ILI9325_ENTRY_MODE_TRI |
  401d5c:	2003      	movs	r0, #3
  401d5e:	f24d 0110 	movw	r1, #53264	; 0xd010
  401d62:	47a0      	blx	r4
			ILI9325_ENTRY_MODE_DFM | ILI9325_ENTRY_MODE_ID(0x01) |ILI9325_ENTRY_MODE_BGR);
	/* Sets the number of lines to drive the LCD at an interval of 8 lines. */
	/* The scan direction is from G320 to G1 */
	ili9325_write_register(ILI9325_DRIVER_OUTPUT_CTRL2, ILI9325_DRIVER_OUTPUT_CTRL2_GS |
  401d64:	2060      	movs	r0, #96	; 0x60
  401d66:	f44f 4127 	mov.w	r1, #42752	; 0xa700
  401d6a:	47a0      	blx	r4
			ILI9325_DRIVER_OUTPUT_CTRL2_NL(0x27));

	/* Vertical Scrolling */
	/* Disable scrolling and enable the grayscale inversion */
	ili9325_write_register(ILI9325_BASE_IMG_DISP_CTRL, ILI9325_BASE_IMG_DISP_CTRL_REV);
  401d6c:	2061      	movs	r0, #97	; 0x61
  401d6e:	2101      	movs	r1, #1
  401d70:	47a0      	blx	r4
	ili9325_write_register(ILI9325_VERTICAL_SCROLL_CTRL, 0x0000);
  401d72:	206a      	movs	r0, #106	; 0x6a
  401d74:	2100      	movs	r1, #0
  401d76:	47a0      	blx	r4

	/* Disable Partial Display */
	ili9325_write_register(ILI9325_PARTIAL_IMG1_DISP_POS, 0x0000);
  401d78:	2080      	movs	r0, #128	; 0x80
  401d7a:	2100      	movs	r1, #0
  401d7c:	47a0      	blx	r4
	ili9325_write_register(ILI9325_PARTIAL_IMG1_AREA_START_LINE, 0x0000);
  401d7e:	2081      	movs	r0, #129	; 0x81
  401d80:	2100      	movs	r1, #0
  401d82:	47a0      	blx	r4
	ili9325_write_register(ILI9325_PARTIAL_IMG1_AREA_END_LINE, 0x0000);
  401d84:	2082      	movs	r0, #130	; 0x82
  401d86:	2100      	movs	r1, #0
  401d88:	47a0      	blx	r4
	ili9325_write_register(ILI9325_PARTIAL_IMG2_DISP_POS, 0x0000);
  401d8a:	2083      	movs	r0, #131	; 0x83
  401d8c:	2100      	movs	r1, #0
  401d8e:	47a0      	blx	r4
	ili9325_write_register(ILI9325_PARTIAL_IMG2_AREA_START_LINE, 0x0000);
  401d90:	2084      	movs	r0, #132	; 0x84
  401d92:	2100      	movs	r1, #0
  401d94:	47a0      	blx	r4
	ili9325_write_register(ILI9325_PARTIAL_IMG2_AREA_END_LINE, 0x0000);
  401d96:	2085      	movs	r0, #133	; 0x85
  401d98:	2100      	movs	r1, #0
  401d9a:	47a0      	blx	r4

	/* Panel Control */
	ili9325_write_register(ILI9325_PANEL_INTERFACE_CTRL1,
  401d9c:	2090      	movs	r0, #144	; 0x90
  401d9e:	2110      	movs	r1, #16
  401da0:	47a0      	blx	r4
			ILI9325_PANEL_INTERFACE_CTRL1_RTNI(0x10));
	ili9325_write_register(ILI9325_PANEL_INTERFACE_CTRL2,
  401da2:	2092      	movs	r0, #146	; 0x92
  401da4:	f44f 61c0 	mov.w	r1, #1536	; 0x600
  401da8:	47a0      	blx	r4
			ILI9325_PANEL_INTERFACE_CTRL2_NOWI(0x06));
	ili9325_write_register(ILI9325_PANEL_INTERFACE_CTRL4,
  401daa:	2095      	movs	r0, #149	; 0x95
  401dac:	f44f 7188 	mov.w	r1, #272	; 0x110
  401db0:	47a0      	blx	r4
			ILI9325_PANEL_INTERFACE_CTRL4_DIVE(0x01) |
			ILI9325_PANEL_INTERFACE_CTRL4_RTNE(0x10));

	ili9325_set_window(0, 0,p_opt->ul_width,p_opt->ul_height);
  401db2:	2000      	movs	r0, #0
  401db4:	4601      	mov	r1, r0
  401db6:	682a      	ldr	r2, [r5, #0]
  401db8:	686b      	ldr	r3, [r5, #4]
  401dba:	4c0a      	ldr	r4, [pc, #40]	; (401de4 <ili9325_init+0x198>)
  401dbc:	47a0      	blx	r4
	ili9325_set_foreground_color(p_opt->foreground_color);
  401dbe:	68a8      	ldr	r0, [r5, #8]
  401dc0:	4b09      	ldr	r3, [pc, #36]	; (401de8 <ili9325_init+0x19c>)
  401dc2:	4798      	blx	r3
	ili9325_set_cursor_position(0, 0);
  401dc4:	2000      	movs	r0, #0
  401dc6:	4601      	mov	r1, r0
  401dc8:	4b08      	ldr	r3, [pc, #32]	; (401dec <ili9325_init+0x1a0>)
  401dca:	4798      	blx	r3
	return 0;
  401dcc:	2000      	movs	r0, #0
  401dce:	bd70      	pop	{r4, r5, r6, pc}
{
	/* Check ILI9325 chipid */
	uint16_t chipid = ili9325_read_register(ILI9325_DEVICE_CODE_REG); /* Driver Code Read (R00h) */

	if (chipid != ILI9325_DEVICE_CODE) {
		return 1;
  401dd0:	2001      	movs	r0, #1
  401dd2:	4770      	bx	lr
  401dd4:	62000002 	.word	0x62000002
  401dd8:	ffff9325 	.word	0xffff9325
  401ddc:	00401b79 	.word	0x00401b79
  401de0:	00401b91 	.word	0x00401b91
  401de4:	00401bf5 	.word	0x00401bf5
  401de8:	00401bdd 	.word	0x00401bdd
  401dec:	00401c31 	.word	0x00401c31

00401df0 <ili9325_fill>:
 * \brief Fill the LCD buffer with the specified color.
 *
 * \param ul_color fill color.
 */
void ili9325_fill(ili9325_color_t ul_color)
{
  401df0:	b570      	push	{r4, r5, r6, lr}
  401df2:	4606      	mov	r6, r0
	uint32_t dw;

	ili9325_set_cursor_position(0, 0);
  401df4:	2000      	movs	r0, #0
  401df6:	4601      	mov	r1, r0
  401df8:	4b07      	ldr	r3, [pc, #28]	; (401e18 <ili9325_fill+0x28>)
  401dfa:	4798      	blx	r3

/* Define EBI access for ILI9325 8-bit System Interface.*/
#if defined(BOARD_ILI9325_ADDR) && defined (BOARD_ILI9325_RS)
	static inline void LCD_IR(uint8_t lcd_index)
	{
		*((volatile uint8_t *)(BOARD_ILI9325_ADDR)) = lcd_index; /* ILI9325 index register address */
  401dfc:	f04f 43c4 	mov.w	r3, #1644167168	; 0x62000000
  401e00:	2200      	movs	r2, #0
  401e02:	701a      	strb	r2, [r3, #0]
  401e04:	2222      	movs	r2, #34	; 0x22
  401e06:	701a      	strb	r2, [r3, #0]
  401e08:	f44f 3496 	mov.w	r4, #76800	; 0x12c00
	ili9325_write_ram_prepare();

	for (dw = ILI9325_LCD_WIDTH * ILI9325_LCD_HEIGHT; dw > 0; dw--) {
		ili9325_write_ram(ul_color);
  401e0c:	4d03      	ldr	r5, [pc, #12]	; (401e1c <ili9325_fill+0x2c>)
  401e0e:	4630      	mov	r0, r6
  401e10:	47a8      	blx	r5
	uint32_t dw;

	ili9325_set_cursor_position(0, 0);
	ili9325_write_ram_prepare();

	for (dw = ILI9325_LCD_WIDTH * ILI9325_LCD_HEIGHT; dw > 0; dw--) {
  401e12:	3c01      	subs	r4, #1
  401e14:	d1fb      	bne.n	401e0e <ili9325_fill+0x1e>
		ili9325_write_ram(ul_color);
	}
}
  401e16:	bd70      	pop	{r4, r5, r6, pc}
  401e18:	00401c31 	.word	0x00401c31
  401e1c:	00401b61 	.word	0x00401b61

00401e20 <ili9325_draw_pixel>:
 *
 * \return 0 if succeeds, otherwise fails.
 */
uint32_t ili9325_draw_pixel(uint32_t ul_x, uint32_t ul_y)
{
	if ((ul_x >= ILI9325_LCD_WIDTH) || (ul_y >= ILI9325_LCD_HEIGHT)) {
  401e20:	28ef      	cmp	r0, #239	; 0xef
  401e22:	d813      	bhi.n	401e4c <ili9325_draw_pixel+0x2c>
  401e24:	f5b1 7fa0 	cmp.w	r1, #320	; 0x140
  401e28:	d212      	bcs.n	401e50 <ili9325_draw_pixel+0x30>
 * \param ul_y Y coordinate of pixel.
 *
 * \return 0 if succeeds, otherwise fails.
 */
uint32_t ili9325_draw_pixel(uint32_t ul_x, uint32_t ul_y)
{
  401e2a:	b510      	push	{r4, lr}
	if ((ul_x >= ILI9325_LCD_WIDTH) || (ul_y >= ILI9325_LCD_HEIGHT)) {
		return 1;
	}

	/* Set cursor */
	ili9325_set_cursor_position(ul_x, ul_y);
  401e2c:	b280      	uxth	r0, r0
  401e2e:	b289      	uxth	r1, r1
  401e30:	4b08      	ldr	r3, [pc, #32]	; (401e54 <ili9325_draw_pixel+0x34>)
  401e32:	4798      	blx	r3
  401e34:	f04f 43c4 	mov.w	r3, #1644167168	; 0x62000000
  401e38:	2400      	movs	r4, #0
  401e3a:	701c      	strb	r4, [r3, #0]
  401e3c:	2222      	movs	r2, #34	; 0x22
  401e3e:	701a      	strb	r2, [r3, #0]

	/* Prepare to write in GRAM */
	ili9325_write_ram_prepare();
	ili9325_write_ram(*g_ul_pixel_cache);
  401e40:	4b05      	ldr	r3, [pc, #20]	; (401e58 <ili9325_draw_pixel+0x38>)
  401e42:	6818      	ldr	r0, [r3, #0]
  401e44:	4b05      	ldr	r3, [pc, #20]	; (401e5c <ili9325_draw_pixel+0x3c>)
  401e46:	4798      	blx	r3
	return 0;
  401e48:	4620      	mov	r0, r4
  401e4a:	bd10      	pop	{r4, pc}
 * \return 0 if succeeds, otherwise fails.
 */
uint32_t ili9325_draw_pixel(uint32_t ul_x, uint32_t ul_y)
{
	if ((ul_x >= ILI9325_LCD_WIDTH) || (ul_y >= ILI9325_LCD_HEIGHT)) {
		return 1;
  401e4c:	2001      	movs	r0, #1
  401e4e:	4770      	bx	lr
  401e50:	2001      	movs	r0, #1
  401e52:	4770      	bx	lr
  401e54:	00401c31 	.word	0x00401c31
  401e58:	2000a5ac 	.word	0x2000a5ac
  401e5c:	00401b61 	.word	0x00401b61

00401e60 <ili9325_draw_string>:
 * \param ul_x X coordinate of string top-left corner.
 * \param ul_y Y coordinate of string top-left corner.
 * \param p_str String to display.
 */
void ili9325_draw_string(uint32_t ul_x, uint32_t ul_y, const uint8_t *p_str)
{
  401e60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  401e64:	b085      	sub	sp, #20
  401e66:	9003      	str	r0, [sp, #12]
  401e68:	9202      	str	r2, [sp, #8]
	uint32_t xorg = ul_x;

	while (*p_str != 0) {
  401e6a:	7813      	ldrb	r3, [r2, #0]
  401e6c:	2b00      	cmp	r3, #0
  401e6e:	d046      	beq.n	401efe <ili9325_draw_string+0x9e>
  401e70:	468b      	mov	fp, r1
  401e72:	9001      	str	r0, [sp, #4]
		offset1 = offset0 + 1;

		/* Draw pixel on screen depending on the corresponding bit value from the charset */
		for (row = 0; row < 8; row++) {
			if ((p_uc_charset10x14[offset0] >> (7 - row)) & 0x1) {
				ili9325_draw_pixel(ul_x + col, ul_y + row);
  401e74:	f8df 9090 	ldr.w	r9, [pc, #144]	; 401f08 <ili9325_draw_string+0xa8>
{
	uint32_t xorg = ul_x;

	while (*p_str != 0) {
		/* If newline, jump to the next line (font height + 2) */
		if (*p_str == '\n') {
  401e78:	2b0a      	cmp	r3, #10
  401e7a:	d104      	bne.n	401e86 <ili9325_draw_string+0x26>
			ul_y += gfont.height + 2;
  401e7c:	f10b 0b10 	add.w	fp, fp, #16
			ul_x = xorg;
  401e80:	9b03      	ldr	r3, [sp, #12]
  401e82:	9301      	str	r3, [sp, #4]
  401e84:	e035      	b.n	401ef2 <ili9325_draw_string+0x92>
	uint32_t row, col;
	uint32_t offset, offset0, offset1;

	/* Compute offset according of the specified ASCII character */
	/* Note: the first 32 characters of the ASCII table are not handled */
	offset = ((uint32_t)uc_c - 0x20) * 20;
  401e86:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  401e8a:	4e1e      	ldr	r6, [pc, #120]	; (401f04 <ili9325_draw_string+0xa4>)
  401e8c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
  401e90:	f2a3 267f 	subw	r6, r3, #639	; 0x27f
  401e94:	9a01      	ldr	r2, [sp, #4]
  401e96:	4613      	mov	r3, r2
  401e98:	330a      	adds	r3, #10
  401e9a:	9300      	str	r3, [sp, #0]
  401e9c:	4690      	mov	r8, r2
  401e9e:	2407      	movs	r4, #7
  401ea0:	4637      	mov	r7, r6
  401ea2:	eb0b 0a04 	add.w	sl, fp, r4
  401ea6:	463d      	mov	r5, r7
		offset0 = offset + col * 2;
		offset1 = offset0 + 1;

		/* Draw pixel on screen depending on the corresponding bit value from the charset */
		for (row = 0; row < 8; row++) {
			if ((p_uc_charset10x14[offset0] >> (7 - row)) & 0x1) {
  401ea8:	f816 3c01 	ldrb.w	r3, [r6, #-1]
  401eac:	4123      	asrs	r3, r4
  401eae:	f013 0f01 	tst.w	r3, #1
  401eb2:	d003      	beq.n	401ebc <ili9325_draw_string+0x5c>
				ili9325_draw_pixel(ul_x + col, ul_y + row);
  401eb4:	4640      	mov	r0, r8
  401eb6:	ebc4 010a 	rsb	r1, r4, sl
  401eba:	47c8      	blx	r9
  401ebc:	3c01      	subs	r4, #1
		/* Compute the first and second byte offset of a column */
		offset0 = offset + col * 2;
		offset1 = offset0 + 1;

		/* Draw pixel on screen depending on the corresponding bit value from the charset */
		for (row = 0; row < 8; row++) {
  401ebe:	f1b4 3fff 	cmp.w	r4, #4294967295
  401ec2:	d1f0      	bne.n	401ea6 <ili9325_draw_string+0x46>
  401ec4:	2407      	movs	r4, #7
  401ec6:	f10b 070f 	add.w	r7, fp, #15
				ili9325_draw_pixel(ul_x + col, ul_y + row);
			}
		}

		for (row = 0; row < 6; row++) {
			if ((p_uc_charset10x14[offset1] >> (7 - row)) & 0x1) {
  401eca:	782b      	ldrb	r3, [r5, #0]
  401ecc:	4123      	asrs	r3, r4
  401ece:	f013 0f01 	tst.w	r3, #1
  401ed2:	d002      	beq.n	401eda <ili9325_draw_string+0x7a>
				ili9325_draw_pixel(ul_x + col, ul_y + row + 8);
  401ed4:	4640      	mov	r0, r8
  401ed6:	1b39      	subs	r1, r7, r4
  401ed8:	47c8      	blx	r9
  401eda:	3c01      	subs	r4, #1
			if ((p_uc_charset10x14[offset0] >> (7 - row)) & 0x1) {
				ili9325_draw_pixel(ul_x + col, ul_y + row);
			}
		}

		for (row = 0; row < 6; row++) {
  401edc:	2c01      	cmp	r4, #1
  401ede:	d1f4      	bne.n	401eca <ili9325_draw_string+0x6a>
  401ee0:	3602      	adds	r6, #2
  401ee2:	f108 0801 	add.w	r8, r8, #1

	/* Compute offset according of the specified ASCII character */
	/* Note: the first 32 characters of the ASCII table are not handled */
	offset = ((uint32_t)uc_c - 0x20) * 20;

	for (col = 0; col < 10; col++) {
  401ee6:	9b00      	ldr	r3, [sp, #0]
  401ee8:	4598      	cmp	r8, r3
  401eea:	d1d8      	bne.n	401e9e <ili9325_draw_string+0x3e>
			ul_y += gfont.height + 2;
			ul_x = xorg;
		} else {
			/* Draw the character and place cursor right after (font width + 2) */
			ili9325_draw_char(ul_x, ul_y, *p_str);
			ul_x += gfont.width + 2;
  401eec:	9b01      	ldr	r3, [sp, #4]
  401eee:	330c      	adds	r3, #12
  401ef0:	9301      	str	r3, [sp, #4]
 */
void ili9325_draw_string(uint32_t ul_x, uint32_t ul_y, const uint8_t *p_str)
{
	uint32_t xorg = ul_x;

	while (*p_str != 0) {
  401ef2:	9a02      	ldr	r2, [sp, #8]
  401ef4:	f812 3f01 	ldrb.w	r3, [r2, #1]!
  401ef8:	9202      	str	r2, [sp, #8]
  401efa:	2b00      	cmp	r3, #0
  401efc:	d1bc      	bne.n	401e78 <ili9325_draw_string+0x18>
			ili9325_draw_char(ul_x, ul_y, *p_str);
			ul_x += gfont.width + 2;
		}
		p_str++;
	}
}
  401efe:	b005      	add	sp, #20
  401f00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  401f04:	00403824 	.word	0x00403824
  401f08:	00401e21 	.word	0x00401e21

00401f0c <smc_set_setup_timing>:
 * \param ul_setup_timing Setup timing for NWE, NCS, NRD.
 */
void smc_set_setup_timing(Smc *p_smc, uint32_t ul_cs,
		uint32_t ul_setup_timing)
{
	p_smc->SMC_CS_NUMBER[ul_cs].SMC_SETUP = ul_setup_timing;
  401f0c:	0109      	lsls	r1, r1, #4
  401f0e:	5042      	str	r2, [r0, r1]
  401f10:	4770      	bx	lr
  401f12:	bf00      	nop

00401f14 <smc_set_pulse_timing>:
 * \param ul_pulse_timing Pulse timing for NWE,NCS,NRD.
 */
void smc_set_pulse_timing(Smc *p_smc, uint32_t ul_cs,
		uint32_t ul_pulse_timing)
{
	p_smc->SMC_CS_NUMBER[ul_cs].SMC_PULSE = ul_pulse_timing;
  401f14:	eb00 1101 	add.w	r1, r0, r1, lsl #4
  401f18:	604a      	str	r2, [r1, #4]
  401f1a:	4770      	bx	lr

00401f1c <smc_set_cycle_timing>:
 * \param ul_cycle_timing Cycle timing for NWE and NRD.
 */
void smc_set_cycle_timing(Smc *p_smc, uint32_t ul_cs,
		uint32_t ul_cycle_timing)
{
	p_smc->SMC_CS_NUMBER[ul_cs].SMC_CYCLE = ul_cycle_timing;
  401f1c:	eb00 1101 	add.w	r1, r0, r1, lsl #4
  401f20:	608a      	str	r2, [r1, #8]
  401f22:	4770      	bx	lr

00401f24 <smc_set_mode>:
 * \param ul_cs Chip select number to be set.
 * \param ul_mode SMC mode.
 */
void smc_set_mode(Smc *p_smc, uint32_t ul_cs, uint32_t ul_mode)
{
	p_smc->SMC_CS_NUMBER[ul_cs].SMC_MODE = ul_mode;
  401f24:	eb00 1101 	add.w	r1, r0, r1, lsl #4
  401f28:	60ca      	str	r2, [r1, #12]
  401f2a:	4770      	bx	lr

00401f2c <pio_set_debounce_filter>:
void pio_set_debounce_filter(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_cut_off)
{
#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	/* Set Debouncing, 0 bit field no effect */
	p_pio->PIO_IFSCER = ul_mask;
  401f2c:	f8c0 1084 	str.w	r1, [r0, #132]	; 0x84
	/*
	 * The debouncing filter can filter a pulse of less than 1/2 Period of a
	 * programmable Divided Slow Clock:
	 * Tdiv_slclk = ((DIV+1)*2).Tslow_clock
	 */
	p_pio->PIO_SCDR = PIO_SCDR_DIV((FREQ_SLOW_CLOCK_EXT /
  401f30:	0052      	lsls	r2, r2, #1
  401f32:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  401f36:	fbb3 f2f2 	udiv	r2, r3, r2
  401f3a:	3a01      	subs	r2, #1
  401f3c:	f3c2 020d 	ubfx	r2, r2, #0, #14
  401f40:	f8c0 208c 	str.w	r2, [r0, #140]	; 0x8c
  401f44:	4770      	bx	lr
  401f46:	bf00      	nop

00401f48 <pio_set>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_set(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_SODR = ul_mask;
  401f48:	6301      	str	r1, [r0, #48]	; 0x30
  401f4a:	4770      	bx	lr

00401f4c <pio_clear>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_clear(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_CODR = ul_mask;
  401f4c:	6341      	str	r1, [r0, #52]	; 0x34
  401f4e:	4770      	bx	lr

00401f50 <pio_set_peripheral>:
		const uint32_t ul_mask)
{
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
  401f50:	6442      	str	r2, [r0, #68]	; 0x44

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	switch (ul_type) {
  401f52:	f1b1 5fc0 	cmp.w	r1, #402653184	; 0x18000000
  401f56:	d02f      	beq.n	401fb8 <pio_set_peripheral+0x68>
  401f58:	d807      	bhi.n	401f6a <pio_set_peripheral+0x1a>
  401f5a:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
  401f5e:	d014      	beq.n	401f8a <pio_set_peripheral+0x3a>
  401f60:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
  401f64:	d01e      	beq.n	401fa4 <pio_set_peripheral+0x54>
  401f66:	b939      	cbnz	r1, 401f78 <pio_set_peripheral+0x28>
  401f68:	4770      	bx	lr
  401f6a:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
  401f6e:	d037      	beq.n	401fe0 <pio_set_peripheral+0x90>
  401f70:	d804      	bhi.n	401f7c <pio_set_peripheral+0x2c>
  401f72:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
  401f76:	d029      	beq.n	401fcc <pio_set_peripheral+0x7c>
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
  401f78:	6042      	str	r2, [r0, #4]
  401f7a:	4770      	bx	lr

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	switch (ul_type) {
  401f7c:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
  401f80:	d02e      	beq.n	401fe0 <pio_set_peripheral+0x90>
  401f82:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
  401f86:	d02b      	beq.n	401fe0 <pio_set_peripheral+0x90>
  401f88:	e7f6      	b.n	401f78 <pio_set_peripheral+0x28>
 * \param ul_type PIO type.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_set_peripheral(Pio *p_pio, const pio_type_t ul_type,
		const uint32_t ul_mask)
{
  401f8a:	b410      	push	{r4}
	p_pio->PIO_IDR = ul_mask;

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	switch (ul_type) {
	case PIO_PERIPH_A:
		ul_sr = p_pio->PIO_ABCDSR[0];
  401f8c:	6f01      	ldr	r1, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  401f8e:	6f04      	ldr	r4, [r0, #112]	; 0x70
  401f90:	43d3      	mvns	r3, r2
  401f92:	4021      	ands	r1, r4
  401f94:	4019      	ands	r1, r3
  401f96:	6701      	str	r1, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  401f98:	6f41      	ldr	r1, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  401f9a:	6f44      	ldr	r4, [r0, #116]	; 0x74
  401f9c:	4021      	ands	r1, r4
  401f9e:	400b      	ands	r3, r1
  401fa0:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  401fa2:	e01a      	b.n	401fda <pio_set_peripheral+0x8a>
	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABCDSR[0];
  401fa4:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  401fa6:	4313      	orrs	r3, r2
  401fa8:	6703      	str	r3, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  401faa:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  401fac:	6f41      	ldr	r1, [r0, #116]	; 0x74
  401fae:	400b      	ands	r3, r1
  401fb0:	ea23 0302 	bic.w	r3, r3, r2
  401fb4:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  401fb6:	e7df      	b.n	401f78 <pio_set_peripheral+0x28>
#if (!SAMG)
	case PIO_PERIPH_C:
		ul_sr = p_pio->PIO_ABCDSR[0];
  401fb8:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  401fba:	6f01      	ldr	r1, [r0, #112]	; 0x70
  401fbc:	400b      	ands	r3, r1
  401fbe:	ea23 0302 	bic.w	r3, r3, r2
  401fc2:	6703      	str	r3, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  401fc4:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  401fc6:	4313      	orrs	r3, r2
  401fc8:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  401fca:	e7d5      	b.n	401f78 <pio_set_peripheral+0x28>
	case PIO_PERIPH_D:
		ul_sr = p_pio->PIO_ABCDSR[0];
  401fcc:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  401fce:	4313      	orrs	r3, r2
  401fd0:	6703      	str	r3, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  401fd2:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  401fd4:	4313      	orrs	r3, r2
  401fd6:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  401fd8:	e7ce      	b.n	401f78 <pio_set_peripheral+0x28>
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
  401fda:	6042      	str	r2, [r0, #4]
}
  401fdc:	f85d 4b04 	ldr.w	r4, [sp], #4
  401fe0:	4770      	bx	lr
  401fe2:	bf00      	nop

00401fe4 <pio_set_input>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
  401fe4:	6441      	str	r1, [r0, #68]	; 0x44
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  401fe6:	f012 0f01 	tst.w	r2, #1
		p_pio->PIO_PUER = ul_mask;
  401fea:	bf14      	ite	ne
  401fec:	6641      	strne	r1, [r0, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
  401fee:	6601      	streq	r1, [r0, #96]	; 0x60
{
	pio_disable_interrupt(p_pio, ul_mask);
	pio_pull_up(p_pio, ul_mask, ul_attribute & PIO_PULLUP);

	/* Enable Input Filter if necessary */
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
  401ff0:	f012 0f0a 	tst.w	r2, #10
		p_pio->PIO_IFER = ul_mask;
  401ff4:	bf14      	ite	ne
  401ff6:	6201      	strne	r1, [r0, #32]
	} else {
		p_pio->PIO_IFDR = ul_mask;
  401ff8:	6241      	streq	r1, [r0, #36]	; 0x24
	}

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	/* Enable de-glitch or de-bounce if necessary */
	if (ul_attribute & PIO_DEGLITCH) {
  401ffa:	f012 0f02 	tst.w	r2, #2
  401ffe:	d002      	beq.n	402006 <pio_set_input+0x22>
		p_pio->PIO_IFSCDR = ul_mask;
  402000:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
  402004:	e004      	b.n	402010 <pio_set_input+0x2c>
	} else {
		if (ul_attribute & PIO_DEBOUNCE) {
  402006:	f012 0f08 	tst.w	r2, #8
			p_pio->PIO_IFSCER = ul_mask;
  40200a:	bf18      	it	ne
  40200c:	f8c0 1084 	strne.w	r1, [r0, #132]	; 0x84
#else
#error "Unsupported device"
#endif

	/* Configure pin as input */
	p_pio->PIO_ODR = ul_mask;
  402010:	6141      	str	r1, [r0, #20]
	p_pio->PIO_PER = ul_mask;
  402012:	6001      	str	r1, [r0, #0]
  402014:	4770      	bx	lr
  402016:	bf00      	nop

00402018 <pio_set_output>:
 */
void pio_set_output(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_default_level,
		const uint32_t ul_multidrive_enable,
		const uint32_t ul_pull_up_enable)
{
  402018:	b410      	push	{r4}
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
  40201a:	6441      	str	r1, [r0, #68]	; 0x44
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  40201c:	9c01      	ldr	r4, [sp, #4]
  40201e:	b10c      	cbz	r4, 402024 <pio_set_output+0xc>
		p_pio->PIO_PUER = ul_mask;
  402020:	6641      	str	r1, [r0, #100]	; 0x64
  402022:	e000      	b.n	402026 <pio_set_output+0xe>
	} else {
		p_pio->PIO_PUDR = ul_mask;
  402024:	6601      	str	r1, [r0, #96]	; 0x60
{
	pio_disable_interrupt(p_pio, ul_mask);
	pio_pull_up(p_pio, ul_mask, ul_pull_up_enable);

	/* Enable multi-drive if necessary */
	if (ul_multidrive_enable) {
  402026:	b10b      	cbz	r3, 40202c <pio_set_output+0x14>
		p_pio->PIO_MDER = ul_mask;
  402028:	6501      	str	r1, [r0, #80]	; 0x50
  40202a:	e000      	b.n	40202e <pio_set_output+0x16>
	} else {
		p_pio->PIO_MDDR = ul_mask;
  40202c:	6541      	str	r1, [r0, #84]	; 0x54
	}

	/* Set default value */
	if (ul_default_level) {
  40202e:	b10a      	cbz	r2, 402034 <pio_set_output+0x1c>
		p_pio->PIO_SODR = ul_mask;
  402030:	6301      	str	r1, [r0, #48]	; 0x30
  402032:	e000      	b.n	402036 <pio_set_output+0x1e>
	} else {
		p_pio->PIO_CODR = ul_mask;
  402034:	6341      	str	r1, [r0, #52]	; 0x34
	}

	/* Configure pin(s) as output(s) */
	p_pio->PIO_OER = ul_mask;
  402036:	6101      	str	r1, [r0, #16]
	p_pio->PIO_PER = ul_mask;
  402038:	6001      	str	r1, [r0, #0]
}
  40203a:	f85d 4b04 	ldr.w	r4, [sp], #4
  40203e:	4770      	bx	lr

00402040 <pio_configure_interrupt>:
 */
void pio_configure_interrupt(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_attr)
{
	/* Configure additional interrupt mode registers. */
	if (ul_attr & PIO_IT_AIME) {
  402040:	f012 0f10 	tst.w	r2, #16
  402044:	d010      	beq.n	402068 <pio_configure_interrupt+0x28>
		/* Enable additional interrupt mode. */
		p_pio->PIO_AIMER = ul_mask;
  402046:	f8c0 10b0 	str.w	r1, [r0, #176]	; 0xb0

		/* If bit field of the selected pin is 1, set as
		   Rising Edge/High level detection event. */
		if (ul_attr & PIO_IT_RE_OR_HL) {
  40204a:	f012 0f20 	tst.w	r2, #32
			/* Rising Edge or High Level */
			p_pio->PIO_REHLSR = ul_mask;
  40204e:	bf14      	ite	ne
  402050:	f8c0 10d4 	strne.w	r1, [r0, #212]	; 0xd4
		} else {
			/* Falling Edge or Low Level */
			p_pio->PIO_FELLSR = ul_mask;
  402054:	f8c0 10d0 	streq.w	r1, [r0, #208]	; 0xd0
		}

		/* If bit field of the selected pin is 1, set as
		   edge detection source. */
		if (ul_attr & PIO_IT_EDGE) {
  402058:	f012 0f40 	tst.w	r2, #64	; 0x40
			/* Edge select */
			p_pio->PIO_ESR = ul_mask;
  40205c:	bf14      	ite	ne
  40205e:	f8c0 10c0 	strne.w	r1, [r0, #192]	; 0xc0
		} else {
			/* Level select */
			p_pio->PIO_LSR = ul_mask;
  402062:	f8c0 10c4 	streq.w	r1, [r0, #196]	; 0xc4
  402066:	4770      	bx	lr
		}
	} else {
		/* Disable additional interrupt mode. */
		p_pio->PIO_AIMDR = ul_mask;
  402068:	f8c0 10b4 	str.w	r1, [r0, #180]	; 0xb4
  40206c:	4770      	bx	lr
  40206e:	bf00      	nop

00402070 <pio_enable_interrupt>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_enable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_ISR;
  402070:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
	p_pio->PIO_IER = ul_mask;
  402072:	6401      	str	r1, [r0, #64]	; 0x40
  402074:	4770      	bx	lr
  402076:	bf00      	nop

00402078 <pio_get_interrupt_status>:
 *
 * \return The interrupt status mask value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
  402078:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
  40207a:	4770      	bx	lr

0040207c <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
  40207c:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
  40207e:	4770      	bx	lr

00402080 <pio_set_pin_high>:
		p_pio = PIOC;
	} else {
		p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
	}
#else
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
  402080:	0943      	lsrs	r3, r0, #5
  402082:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  402086:	f203 7307 	addw	r3, r3, #1799	; 0x707
  40208a:	025b      	lsls	r3, r3, #9
void pio_set_pin_high(uint32_t ul_pin)
{
	Pio *p_pio = pio_get_pin_group(ul_pin);

	/* Value to be driven on the I/O line: 1. */
	p_pio->PIO_SODR = 1 << (ul_pin & 0x1F);
  40208c:	f000 001f 	and.w	r0, r0, #31
  402090:	2201      	movs	r2, #1
  402092:	4082      	lsls	r2, r0
  402094:	631a      	str	r2, [r3, #48]	; 0x30
  402096:	4770      	bx	lr

00402098 <pio_set_pin_low>:
		p_pio = PIOC;
	} else {
		p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
	}
#else
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
  402098:	0943      	lsrs	r3, r0, #5
  40209a:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  40209e:	f203 7307 	addw	r3, r3, #1799	; 0x707
  4020a2:	025b      	lsls	r3, r3, #9
void pio_set_pin_low(uint32_t ul_pin)
{
	Pio *p_pio = pio_get_pin_group(ul_pin);

	/* Value to be driven on the I/O line: 0. */
	p_pio->PIO_CODR = 1 << (ul_pin & 0x1F);
  4020a4:	f000 001f 	and.w	r0, r0, #31
  4020a8:	2201      	movs	r2, #1
  4020aa:	4082      	lsls	r2, r0
  4020ac:	635a      	str	r2, [r3, #52]	; 0x34
  4020ae:	4770      	bx	lr

004020b0 <pio_toggle_pin>:
		p_pio = PIOC;
	} else {
		p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
	}
#else
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
  4020b0:	0943      	lsrs	r3, r0, #5
  4020b2:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  4020b6:	f203 7307 	addw	r3, r3, #1799	; 0x707
  4020ba:	025b      	lsls	r3, r3, #9
 */
void pio_toggle_pin(uint32_t ul_pin)
{
	Pio *p_pio = pio_get_pin_group(ul_pin);

	if (p_pio->PIO_ODSR & (1 << (ul_pin & 0x1F))) {
  4020bc:	6b99      	ldr	r1, [r3, #56]	; 0x38
  4020be:	f000 001f 	and.w	r0, r0, #31
  4020c2:	2201      	movs	r2, #1
  4020c4:	4082      	lsls	r2, r0
  4020c6:	420a      	tst	r2, r1
		/* Value to be driven on the I/O line: 0. */
		p_pio->PIO_CODR = 1 << (ul_pin & 0x1F);
  4020c8:	bf14      	ite	ne
  4020ca:	635a      	strne	r2, [r3, #52]	; 0x34
	} else {
		/* Value to be driven on the I/O line: 1. */
		p_pio->PIO_SODR = 1 << (ul_pin & 0x1F);
  4020cc:	631a      	streq	r2, [r3, #48]	; 0x30
  4020ce:	4770      	bx	lr

004020d0 <pio_configure_pin>:
 * \param ul_flags Pins attributes.
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
  4020d0:	b570      	push	{r4, r5, r6, lr}
  4020d2:	b082      	sub	sp, #8
  4020d4:	460d      	mov	r5, r1
		p_pio = PIOC;
	} else {
		p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
	}
#else
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
  4020d6:	0943      	lsrs	r3, r0, #5
  4020d8:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  4020dc:	f203 7307 	addw	r3, r3, #1799	; 0x707
  4020e0:	025c      	lsls	r4, r3, #9
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
	Pio *p_pio = pio_get_pin_group(ul_pin);

	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
  4020e2:	f001 43f0 	and.w	r3, r1, #2013265920	; 0x78000000
  4020e6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
  4020ea:	d047      	beq.n	40217c <pio_configure_pin+0xac>
  4020ec:	d809      	bhi.n	402102 <pio_configure_pin+0x32>
  4020ee:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
  4020f2:	d021      	beq.n	402138 <pio_configure_pin+0x68>
  4020f4:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
  4020f8:	d02f      	beq.n	40215a <pio_configure_pin+0x8a>
  4020fa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
  4020fe:	d16f      	bne.n	4021e0 <pio_configure_pin+0x110>
  402100:	e009      	b.n	402116 <pio_configure_pin+0x46>
  402102:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
  402106:	d055      	beq.n	4021b4 <pio_configure_pin+0xe4>
  402108:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
  40210c:	d052      	beq.n	4021b4 <pio_configure_pin+0xe4>
  40210e:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
  402112:	d044      	beq.n	40219e <pio_configure_pin+0xce>
  402114:	e064      	b.n	4021e0 <pio_configure_pin+0x110>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
  402116:	f000 001f 	and.w	r0, r0, #31
  40211a:	2601      	movs	r6, #1
  40211c:	4086      	lsls	r6, r0
  40211e:	4620      	mov	r0, r4
  402120:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  402124:	4632      	mov	r2, r6
  402126:	4b30      	ldr	r3, [pc, #192]	; (4021e8 <pio_configure_pin+0x118>)
  402128:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  40212a:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
  40212e:	bf14      	ite	ne
  402130:	6666      	strne	r6, [r4, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
  402132:	6626      	streq	r6, [r4, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
  402134:	2001      	movs	r0, #1
  402136:	e054      	b.n	4021e2 <pio_configure_pin+0x112>
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
				(ul_flags & PIO_PULLUP));
		break;
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, (1 << (ul_pin & 0x1F)));
  402138:	f000 001f 	and.w	r0, r0, #31
  40213c:	2601      	movs	r6, #1
  40213e:	4086      	lsls	r6, r0
  402140:	4620      	mov	r0, r4
  402142:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  402146:	4632      	mov	r2, r6
  402148:	4b27      	ldr	r3, [pc, #156]	; (4021e8 <pio_configure_pin+0x118>)
  40214a:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  40214c:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
  402150:	bf14      	ite	ne
  402152:	6666      	strne	r6, [r4, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
  402154:	6626      	streq	r6, [r4, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
  402156:	2001      	movs	r0, #1
  402158:	e043      	b.n	4021e2 <pio_configure_pin+0x112>
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
				(ul_flags & PIO_PULLUP));
		break;
#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	case PIO_TYPE_PIO_PERIPH_C:
		pio_set_peripheral(p_pio, PIO_PERIPH_C, (1 << (ul_pin & 0x1F)));
  40215a:	f000 001f 	and.w	r0, r0, #31
  40215e:	2601      	movs	r6, #1
  402160:	4086      	lsls	r6, r0
  402162:	4620      	mov	r0, r4
  402164:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  402168:	4632      	mov	r2, r6
  40216a:	4b1f      	ldr	r3, [pc, #124]	; (4021e8 <pio_configure_pin+0x118>)
  40216c:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  40216e:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
  402172:	bf14      	ite	ne
  402174:	6666      	strne	r6, [r4, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
  402176:	6626      	streq	r6, [r4, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
  402178:	2001      	movs	r0, #1
  40217a:	e032      	b.n	4021e2 <pio_configure_pin+0x112>
		pio_set_peripheral(p_pio, PIO_PERIPH_C, (1 << (ul_pin & 0x1F)));
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
				(ul_flags & PIO_PULLUP));
		break;
	case PIO_TYPE_PIO_PERIPH_D:
		pio_set_peripheral(p_pio, PIO_PERIPH_D, (1 << (ul_pin & 0x1F)));
  40217c:	f000 001f 	and.w	r0, r0, #31
  402180:	2601      	movs	r6, #1
  402182:	4086      	lsls	r6, r0
  402184:	4620      	mov	r0, r4
  402186:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
  40218a:	4632      	mov	r2, r6
  40218c:	4b16      	ldr	r3, [pc, #88]	; (4021e8 <pio_configure_pin+0x118>)
  40218e:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  402190:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
  402194:	bf14      	ite	ne
  402196:	6666      	strne	r6, [r4, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
  402198:	6626      	streq	r6, [r4, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
  40219a:	2001      	movs	r0, #1
  40219c:	e021      	b.n	4021e2 <pio_configure_pin+0x112>
				(ul_flags & PIO_PULLUP));
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
  40219e:	f000 031f 	and.w	r3, r0, #31
  4021a2:	2601      	movs	r6, #1
  4021a4:	4620      	mov	r0, r4
  4021a6:	fa06 f103 	lsl.w	r1, r6, r3
  4021aa:	462a      	mov	r2, r5
  4021ac:	4b0f      	ldr	r3, [pc, #60]	; (4021ec <pio_configure_pin+0x11c>)
  4021ae:	4798      	blx	r3

	default:
		return 0;
	}

	return 1;
  4021b0:	4630      	mov	r0, r6
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;
  4021b2:	e016      	b.n	4021e2 <pio_configure_pin+0x112>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
  4021b4:	f000 031f 	and.w	r3, r0, #31
  4021b8:	2601      	movs	r6, #1
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
  4021ba:	f005 5260 	and.w	r2, r5, #939524096	; 0x38000000
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
  4021be:	ea05 0106 	and.w	r1, r5, r6
  4021c2:	9100      	str	r1, [sp, #0]
  4021c4:	4620      	mov	r0, r4
  4021c6:	fa06 f103 	lsl.w	r1, r6, r3
  4021ca:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
  4021ce:	bf14      	ite	ne
  4021d0:	2200      	movne	r2, #0
  4021d2:	2201      	moveq	r2, #1
  4021d4:	f3c5 0380 	ubfx	r3, r5, #2, #1
  4021d8:	4c05      	ldr	r4, [pc, #20]	; (4021f0 <pio_configure_pin+0x120>)
  4021da:	47a0      	blx	r4

	default:
		return 0;
	}

	return 1;
  4021dc:	4630      	mov	r0, r6
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
		break;
  4021de:	e000      	b.n	4021e2 <pio_configure_pin+0x112>

	default:
		return 0;
  4021e0:	2000      	movs	r0, #0
	}

	return 1;
}
  4021e2:	b002      	add	sp, #8
  4021e4:	bd70      	pop	{r4, r5, r6, pc}
  4021e6:	bf00      	nop
  4021e8:	00401f51 	.word	0x00401f51
  4021ec:	00401fe5 	.word	0x00401fe5
  4021f0:	00402019 	.word	0x00402019

004021f4 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
  4021f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  4021f8:	4681      	mov	r9, r0
  4021fa:	4688      	mov	r8, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
  4021fc:	4b12      	ldr	r3, [pc, #72]	; (402248 <pio_handler_process+0x54>)
  4021fe:	4798      	blx	r3
  402200:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
  402202:	4648      	mov	r0, r9
  402204:	4b11      	ldr	r3, [pc, #68]	; (40224c <pio_handler_process+0x58>)
  402206:	4798      	blx	r3

	/* Check pending events */
	if (status != 0) {
  402208:	4005      	ands	r5, r0
  40220a:	d013      	beq.n	402234 <pio_handler_process+0x40>
  40220c:	4c10      	ldr	r4, [pc, #64]	; (402250 <pio_handler_process+0x5c>)
  40220e:	f104 0660 	add.w	r6, r4, #96	; 0x60
		/* Find triggering source */
		i = 0;
		while (status != 0) {
			/* Source is configured on the same controller */
			if (gs_interrupt_sources[i].id == ul_id) {
  402212:	6823      	ldr	r3, [r4, #0]
  402214:	4543      	cmp	r3, r8
  402216:	d108      	bne.n	40222a <pio_handler_process+0x36>
				/* Source has PIOs whose statuses have changed */
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  402218:	6861      	ldr	r1, [r4, #4]
  40221a:	4229      	tst	r1, r5
  40221c:	d005      	beq.n	40222a <pio_handler_process+0x36>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  40221e:	68e3      	ldr	r3, [r4, #12]
  402220:	4640      	mov	r0, r8
  402222:	4798      	blx	r3
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
  402224:	6863      	ldr	r3, [r4, #4]
  402226:	ea25 0503 	bic.w	r5, r5, r3
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
  40222a:	42b4      	cmp	r4, r6
  40222c:	d002      	beq.n	402234 <pio_handler_process+0x40>
  40222e:	3410      	adds	r4, #16

	/* Check pending events */
	if (status != 0) {
		/* Find triggering source */
		i = 0;
		while (status != 0) {
  402230:	2d00      	cmp	r5, #0
  402232:	d1ee      	bne.n	402212 <pio_handler_process+0x1e>
		}
	}

	/* Check capture events */
#if (SAM3S || SAM4S || SAM4E)
	if (pio_capture_enable_flag) {
  402234:	4b07      	ldr	r3, [pc, #28]	; (402254 <pio_handler_process+0x60>)
  402236:	681b      	ldr	r3, [r3, #0]
  402238:	b123      	cbz	r3, 402244 <pio_handler_process+0x50>
		if (pio_capture_handler) {
  40223a:	4b07      	ldr	r3, [pc, #28]	; (402258 <pio_handler_process+0x64>)
  40223c:	681b      	ldr	r3, [r3, #0]
  40223e:	b10b      	cbz	r3, 402244 <pio_handler_process+0x50>
			pio_capture_handler(p_pio);
  402240:	4648      	mov	r0, r9
  402242:	4798      	blx	r3
  402244:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  402248:	00402079 	.word	0x00402079
  40224c:	0040207d 	.word	0x0040207d
  402250:	2000a974 	.word	0x2000a974
  402254:	2000a9ec 	.word	0x2000a9ec
  402258:	2000a970 	.word	0x2000a970

0040225c <pio_handler_set>:
 *
 * \return 0 if successful, 1 if the maximum number of sources has been defined.
 */
uint32_t pio_handler_set(Pio *p_pio, uint32_t ul_id, uint32_t ul_mask,
		uint32_t ul_attr, void (*p_handler) (uint32_t, uint32_t))
{
  40225c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct s_interrupt_source *pSource;

	if (gs_ul_nb_sources >= MAX_INTERRUPT_SOURCES)
  40225e:	4c0c      	ldr	r4, [pc, #48]	; (402290 <pio_handler_set+0x34>)
  402260:	6824      	ldr	r4, [r4, #0]
  402262:	2c06      	cmp	r4, #6
  402264:	d811      	bhi.n	40228a <pio_handler_set+0x2e>
  402266:	4615      	mov	r5, r2
		return 1;

	/* Define new source */
	pSource = &(gs_interrupt_sources[gs_ul_nb_sources]);
	pSource->id = ul_id;
  402268:	4f0a      	ldr	r7, [pc, #40]	; (402294 <pio_handler_set+0x38>)
  40226a:	0122      	lsls	r2, r4, #4
  40226c:	18be      	adds	r6, r7, r2
  40226e:	50b9      	str	r1, [r7, r2]
	pSource->mask = ul_mask;
  402270:	6075      	str	r5, [r6, #4]
	pSource->attr = ul_attr;
  402272:	60b3      	str	r3, [r6, #8]
	pSource->handler = p_handler;
  402274:	9a06      	ldr	r2, [sp, #24]
  402276:	60f2      	str	r2, [r6, #12]
	gs_ul_nb_sources++;
  402278:	3401      	adds	r4, #1
  40227a:	4a05      	ldr	r2, [pc, #20]	; (402290 <pio_handler_set+0x34>)
  40227c:	6014      	str	r4, [r2, #0]

	/* Configure interrupt mode */
	pio_configure_interrupt(p_pio, ul_mask, ul_attr);
  40227e:	4629      	mov	r1, r5
  402280:	461a      	mov	r2, r3
  402282:	4b05      	ldr	r3, [pc, #20]	; (402298 <pio_handler_set+0x3c>)
  402284:	4798      	blx	r3

	return 0;
  402286:	2000      	movs	r0, #0
  402288:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		uint32_t ul_attr, void (*p_handler) (uint32_t, uint32_t))
{
	struct s_interrupt_source *pSource;

	if (gs_ul_nb_sources >= MAX_INTERRUPT_SOURCES)
		return 1;
  40228a:	2001      	movs	r0, #1

	/* Configure interrupt mode */
	pio_configure_interrupt(p_pio, ul_mask, ul_attr);

	return 0;
}
  40228c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40228e:	bf00      	nop
  402290:	2000a96c 	.word	0x2000a96c
  402294:	2000a974 	.word	0x2000a974
  402298:	00402041 	.word	0x00402041

0040229c <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
  40229c:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
  40229e:	4802      	ldr	r0, [pc, #8]	; (4022a8 <PIOA_Handler+0xc>)
  4022a0:	210b      	movs	r1, #11
  4022a2:	4b02      	ldr	r3, [pc, #8]	; (4022ac <PIOA_Handler+0x10>)
  4022a4:	4798      	blx	r3
  4022a6:	bd08      	pop	{r3, pc}
  4022a8:	400e0e00 	.word	0x400e0e00
  4022ac:	004021f5 	.word	0x004021f5

004022b0 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
  4022b0:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
  4022b2:	4802      	ldr	r0, [pc, #8]	; (4022bc <PIOB_Handler+0xc>)
  4022b4:	210c      	movs	r1, #12
  4022b6:	4b02      	ldr	r3, [pc, #8]	; (4022c0 <PIOB_Handler+0x10>)
  4022b8:	4798      	blx	r3
  4022ba:	bd08      	pop	{r3, pc}
  4022bc:	400e1000 	.word	0x400e1000
  4022c0:	004021f5 	.word	0x004021f5

004022c4 <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
  4022c4:	b508      	push	{r3, lr}
	pio_handler_process(PIOC, ID_PIOC);
  4022c6:	4802      	ldr	r0, [pc, #8]	; (4022d0 <PIOC_Handler+0xc>)
  4022c8:	210d      	movs	r1, #13
  4022ca:	4b02      	ldr	r3, [pc, #8]	; (4022d4 <PIOC_Handler+0x10>)
  4022cc:	4798      	blx	r3
  4022ce:	bd08      	pop	{r3, pc}
  4022d0:	400e1200 	.word	0x400e1200
  4022d4:	004021f5 	.word	0x004021f5

004022d8 <pmc_switch_mck_to_pllbck>:
 */
uint32_t pmc_switch_mck_to_pllbck(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
  4022d8:	4a17      	ldr	r2, [pc, #92]	; (402338 <pmc_switch_mck_to_pllbck+0x60>)
  4022da:	6b13      	ldr	r3, [r2, #48]	; 0x30
  4022dc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  4022e0:	4318      	orrs	r0, r3
  4022e2:	6310      	str	r0, [r2, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  4022e4:	6e93      	ldr	r3, [r2, #104]	; 0x68
  4022e6:	f013 0f08 	tst.w	r3, #8
  4022ea:	d003      	beq.n	4022f4 <pmc_switch_mck_to_pllbck+0x1c>
  4022ec:	e009      	b.n	402302 <pmc_switch_mck_to_pllbck+0x2a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  4022ee:	3b01      	subs	r3, #1
  4022f0:	d103      	bne.n	4022fa <pmc_switch_mck_to_pllbck+0x22>
  4022f2:	e01c      	b.n	40232e <pmc_switch_mck_to_pllbck+0x56>
uint32_t pmc_switch_mck_to_pllbck(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  4022f4:	f44f 6300 	mov.w	r3, #2048	; 0x800
  4022f8:	490f      	ldr	r1, [pc, #60]	; (402338 <pmc_switch_mck_to_pllbck+0x60>)
  4022fa:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  4022fc:	f012 0f08 	tst.w	r2, #8
  402300:	d0f5      	beq.n	4022ee <pmc_switch_mck_to_pllbck+0x16>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
  402302:	4b0d      	ldr	r3, [pc, #52]	; (402338 <pmc_switch_mck_to_pllbck+0x60>)
  402304:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  402306:	f042 0203 	orr.w	r2, r2, #3
  40230a:	631a      	str	r2, [r3, #48]	; 0x30
			PMC_MCKR_CSS_PLLB_CLK;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  40230c:	6e98      	ldr	r0, [r3, #104]	; 0x68
  40230e:	f010 0008 	ands.w	r0, r0, #8
  402312:	d004      	beq.n	40231e <pmc_switch_mck_to_pllbck+0x46>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	return 0;
  402314:	2000      	movs	r0, #0
  402316:	4770      	bx	lr

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLB_CLK;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
  402318:	3b01      	subs	r3, #1
  40231a:	d103      	bne.n	402324 <pmc_switch_mck_to_pllbck+0x4c>
  40231c:	e009      	b.n	402332 <pmc_switch_mck_to_pllbck+0x5a>
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLB_CLK;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  40231e:	f44f 6300 	mov.w	r3, #2048	; 0x800
  402322:	4905      	ldr	r1, [pc, #20]	; (402338 <pmc_switch_mck_to_pllbck+0x60>)
  402324:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  402326:	f012 0f08 	tst.w	r2, #8
  40232a:	d0f5      	beq.n	402318 <pmc_switch_mck_to_pllbck+0x40>
  40232c:	4770      	bx	lr

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
			return 1;
  40232e:	2001      	movs	r0, #1
  402330:	4770      	bx	lr
	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLB_CLK;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
			return 1;
  402332:	2001      	movs	r0, #1
		}
	}

	return 0;
}
  402334:	4770      	bx	lr
  402336:	bf00      	nop
  402338:	400e0400 	.word	0x400e0400

0040233c <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
  40233c:	b138      	cbz	r0, 40234e <pmc_switch_mainck_to_xtal+0x12>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  40233e:	4911      	ldr	r1, [pc, #68]	; (402384 <pmc_switch_mainck_to_xtal+0x48>)
  402340:	6a0b      	ldr	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  402342:	4a11      	ldr	r2, [pc, #68]	; (402388 <pmc_switch_mainck_to_xtal+0x4c>)
  402344:	401a      	ands	r2, r3
  402346:	4b11      	ldr	r3, [pc, #68]	; (40238c <pmc_switch_mainck_to_xtal+0x50>)
  402348:	4313      	orrs	r3, r2
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  40234a:	620b      	str	r3, [r1, #32]
  40234c:	4770      	bx	lr
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  40234e:	4a0d      	ldr	r2, [pc, #52]	; (402384 <pmc_switch_mainck_to_xtal+0x48>)
  402350:	6a13      	ldr	r3, [r2, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  402352:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
  402356:	f023 0303 	bic.w	r3, r3, #3
  40235a:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  40235e:	f043 0301 	orr.w	r3, r3, #1
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
  402362:	0209      	lsls	r1, r1, #8
  402364:	b289      	uxth	r1, r1
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  402366:	430b      	orrs	r3, r1
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  402368:	6213      	str	r3, [r2, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  40236a:	6e93      	ldr	r3, [r2, #104]	; 0x68
  40236c:	f013 0f01 	tst.w	r3, #1
  402370:	d0fb      	beq.n	40236a <pmc_switch_mainck_to_xtal+0x2e>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
  402372:	4a04      	ldr	r2, [pc, #16]	; (402384 <pmc_switch_mainck_to_xtal+0x48>)
  402374:	6a13      	ldr	r3, [r2, #32]
  402376:	f043 739b 	orr.w	r3, r3, #20316160	; 0x1360000
  40237a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
  40237e:	6213      	str	r3, [r2, #32]
  402380:	4770      	bx	lr
  402382:	bf00      	nop
  402384:	400e0400 	.word	0x400e0400
  402388:	fec8fffc 	.word	0xfec8fffc
  40238c:	01370002 	.word	0x01370002

00402390 <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
  402390:	4b02      	ldr	r3, [pc, #8]	; (40239c <pmc_osc_is_ready_mainck+0xc>)
  402392:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  402394:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
  402398:	4770      	bx	lr
  40239a:	bf00      	nop
  40239c:	400e0400 	.word	0x400e0400

004023a0 <pmc_enable_pllack>:
 * \param mula PLLA multiplier.
 * \param pllacount PLLA counter.
 * \param diva Divider.
 */
void pmc_enable_pllack(uint32_t mula, uint32_t pllacount, uint32_t diva)
{
  4023a0:	b410      	push	{r4}
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
  4023a2:	4c0c      	ldr	r4, [pc, #48]	; (4023d4 <pmc_enable_pllack+0x34>)
  4023a4:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
  4023a8:	62a3      	str	r3, [r4, #40]	; 0x28
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_PLLAEN(diva) |
			CKGR_PLLAR_PLLACOUNT(pllacount) | CKGR_PLLAR_MULA(mula);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_DIVA(diva) |
			CKGR_PLLAR_PLLACOUNT(pllacount) | CKGR_PLLAR_MULA(mula);
  4023aa:	4b0b      	ldr	r3, [pc, #44]	; (4023d8 <pmc_enable_pllack+0x38>)
  4023ac:	ea03 4000 	and.w	r0, r3, r0, lsl #16
  4023b0:	f040 5000 	orr.w	r0, r0, #536870912	; 0x20000000

#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_PLLAEN(diva) |
			CKGR_PLLAR_PLLACOUNT(pllacount) | CKGR_PLLAR_MULA(mula);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_DIVA(diva) |
  4023b4:	b2d2      	uxtb	r2, r2
  4023b6:	4302      	orrs	r2, r0
			CKGR_PLLAR_PLLACOUNT(pllacount) | CKGR_PLLAR_MULA(mula);
  4023b8:	0209      	lsls	r1, r1, #8
  4023ba:	f401 517c 	and.w	r1, r1, #16128	; 0x3f00
  4023be:	430a      	orrs	r2, r1

#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_PLLAEN(diva) |
			CKGR_PLLAR_PLLACOUNT(pllacount) | CKGR_PLLAR_MULA(mula);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_DIVA(diva) |
  4023c0:	62a2      	str	r2, [r4, #40]	; 0x28
			CKGR_PLLAR_PLLACOUNT(pllacount) | CKGR_PLLAR_MULA(mula);
#endif
	while ((PMC->PMC_SR & PMC_SR_LOCKA) == 0);
  4023c2:	4622      	mov	r2, r4
  4023c4:	6e93      	ldr	r3, [r2, #104]	; 0x68
  4023c6:	f013 0f02 	tst.w	r3, #2
  4023ca:	d0fb      	beq.n	4023c4 <pmc_enable_pllack+0x24>
}
  4023cc:	f85d 4b04 	ldr.w	r4, [sp], #4
  4023d0:	4770      	bx	lr
  4023d2:	bf00      	nop
  4023d4:	400e0400 	.word	0x400e0400
  4023d8:	07ff0000 	.word	0x07ff0000

004023dc <pmc_disable_pllbck>:
/**
 * \brief Disable PLLB clock.
 */
void pmc_disable_pllbck(void)
{
	PMC->CKGR_PLLBR = CKGR_PLLBR_MULB(0);
  4023dc:	2200      	movs	r2, #0
  4023de:	4b01      	ldr	r3, [pc, #4]	; (4023e4 <pmc_disable_pllbck+0x8>)
  4023e0:	62da      	str	r2, [r3, #44]	; 0x2c
  4023e2:	4770      	bx	lr
  4023e4:	400e0400 	.word	0x400e0400

004023e8 <pmc_is_locked_pllbck>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllbck(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKB);
  4023e8:	4b02      	ldr	r3, [pc, #8]	; (4023f4 <pmc_is_locked_pllbck+0xc>)
  4023ea:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  4023ec:	f000 0004 	and.w	r0, r0, #4
  4023f0:	4770      	bx	lr
  4023f2:	bf00      	nop
  4023f4:	400e0400 	.word	0x400e0400

004023f8 <pmc_enable_periph_clk>:
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
  4023f8:	2822      	cmp	r0, #34	; 0x22
  4023fa:	d81e      	bhi.n	40243a <pmc_enable_periph_clk+0x42>
		return 1;
	}

	if (ul_id < 32) {
  4023fc:	281f      	cmp	r0, #31
  4023fe:	d80c      	bhi.n	40241a <pmc_enable_periph_clk+0x22>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
  402400:	4b11      	ldr	r3, [pc, #68]	; (402448 <pmc_enable_periph_clk+0x50>)
  402402:	699a      	ldr	r2, [r3, #24]
  402404:	2301      	movs	r3, #1
  402406:	4083      	lsls	r3, r0
  402408:	401a      	ands	r2, r3
  40240a:	4293      	cmp	r3, r2
  40240c:	d017      	beq.n	40243e <pmc_enable_periph_clk+0x46>
			PMC->PMC_PCER0 = 1 << ul_id;
  40240e:	2301      	movs	r3, #1
  402410:	4083      	lsls	r3, r0
  402412:	4a0d      	ldr	r2, [pc, #52]	; (402448 <pmc_enable_periph_clk+0x50>)
  402414:	6113      	str	r3, [r2, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
  402416:	2000      	movs	r0, #0
  402418:	4770      	bx	lr
			PMC->PMC_PCER0 = 1 << ul_id;
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP || SAMG55 || SAMV71 || SAMV70 || SAME70 || SAMS70)
	} else {
		ul_id -= 32;
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
  40241a:	4b0b      	ldr	r3, [pc, #44]	; (402448 <pmc_enable_periph_clk+0x50>)
  40241c:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
			PMC->PMC_PCER0 = 1 << ul_id;
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP || SAMG55 || SAMV71 || SAMV70 || SAME70 || SAMS70)
	} else {
		ul_id -= 32;
  402420:	3820      	subs	r0, #32
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
  402422:	2301      	movs	r3, #1
  402424:	4083      	lsls	r3, r0
  402426:	401a      	ands	r2, r3
  402428:	4293      	cmp	r3, r2
  40242a:	d00a      	beq.n	402442 <pmc_enable_periph_clk+0x4a>
			PMC->PMC_PCER1 = 1 << ul_id;
  40242c:	2301      	movs	r3, #1
  40242e:	4083      	lsls	r3, r0
  402430:	4a05      	ldr	r2, [pc, #20]	; (402448 <pmc_enable_periph_clk+0x50>)
  402432:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
		}
#endif
	}

	return 0;
  402436:	2000      	movs	r0, #0
  402438:	4770      	bx	lr
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
		return 1;
  40243a:	2001      	movs	r0, #1
  40243c:	4770      	bx	lr
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
  40243e:	2000      	movs	r0, #0
  402440:	4770      	bx	lr
  402442:	2000      	movs	r0, #0
}
  402444:	4770      	bx	lr
  402446:	bf00      	nop
  402448:	400e0400 	.word	0x400e0400

0040244c <twi_set_speed>:
uint32_t twi_set_speed(Twi *p_twi, uint32_t ul_speed, uint32_t ul_mck)
{
	uint32_t ckdiv = 0;
	uint32_t c_lh_div;

	if (ul_speed > I2C_FAST_MODE_SPEED) {
  40244c:	4b0f      	ldr	r3, [pc, #60]	; (40248c <twi_set_speed+0x40>)
  40244e:	4299      	cmp	r1, r3
  402450:	d819      	bhi.n	402486 <twi_set_speed+0x3a>
		return FAIL;
	}

	c_lh_div = ul_mck / (ul_speed * TWI_CLK_DIVIDER) - TWI_CLK_CALC_ARGU;
  402452:	0049      	lsls	r1, r1, #1
  402454:	fbb2 f2f1 	udiv	r2, r2, r1
  402458:	3a04      	subs	r2, #4

	/* cldiv must fit in 8 bits, ckdiv must fit in 3 bits */
	while ((c_lh_div > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
  40245a:	2aff      	cmp	r2, #255	; 0xff
  40245c:	d907      	bls.n	40246e <twi_set_speed+0x22>
  40245e:	2300      	movs	r3, #0
		/* Increase clock divider */
		ckdiv++;
  402460:	3301      	adds	r3, #1
		/* Divide cldiv value */
		c_lh_div /= TWI_CLK_DIVIDER;
  402462:	0852      	lsrs	r2, r2, #1
	}

	c_lh_div = ul_mck / (ul_speed * TWI_CLK_DIVIDER) - TWI_CLK_CALC_ARGU;

	/* cldiv must fit in 8 bits, ckdiv must fit in 3 bits */
	while ((c_lh_div > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
  402464:	2aff      	cmp	r2, #255	; 0xff
  402466:	d903      	bls.n	402470 <twi_set_speed+0x24>
  402468:	2b07      	cmp	r3, #7
  40246a:	d1f9      	bne.n	402460 <twi_set_speed+0x14>
  40246c:	e000      	b.n	402470 <twi_set_speed+0x24>
 * \retval PASS New speed setting is accepted.
 * \retval FAIL New speed setting is rejected.
 */
uint32_t twi_set_speed(Twi *p_twi, uint32_t ul_speed, uint32_t ul_mck)
{
	uint32_t ckdiv = 0;
  40246e:	2300      	movs	r3, #0
		c_lh_div /= TWI_CLK_DIVIDER;
	}

	/* set clock waveform generator register */
	p_twi->TWI_CWGR =
			TWI_CWGR_CLDIV(c_lh_div) | TWI_CWGR_CHDIV(c_lh_div) |
  402470:	0211      	lsls	r1, r2, #8
  402472:	b289      	uxth	r1, r1
			TWI_CWGR_CKDIV(ckdiv);
  402474:	041b      	lsls	r3, r3, #16
  402476:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
  40247a:	430b      	orrs	r3, r1
		c_lh_div /= TWI_CLK_DIVIDER;
	}

	/* set clock waveform generator register */
	p_twi->TWI_CWGR =
			TWI_CWGR_CLDIV(c_lh_div) | TWI_CWGR_CHDIV(c_lh_div) |
  40247c:	b2d2      	uxtb	r2, r2
  40247e:	431a      	orrs	r2, r3
		/* Divide cldiv value */
		c_lh_div /= TWI_CLK_DIVIDER;
	}

	/* set clock waveform generator register */
	p_twi->TWI_CWGR =
  402480:	6102      	str	r2, [r0, #16]
			TWI_CWGR_CLDIV(c_lh_div) | TWI_CWGR_CHDIV(c_lh_div) |
			TWI_CWGR_CKDIV(ckdiv);

	return PASS;
  402482:	2000      	movs	r0, #0
  402484:	4770      	bx	lr
{
	uint32_t ckdiv = 0;
	uint32_t c_lh_div;

	if (ul_speed > I2C_FAST_MODE_SPEED) {
		return FAIL;
  402486:	2001      	movs	r0, #1
	p_twi->TWI_CWGR =
			TWI_CWGR_CLDIV(c_lh_div) | TWI_CWGR_CHDIV(c_lh_div) |
			TWI_CWGR_CKDIV(ckdiv);

	return PASS;
}
  402488:	4770      	bx	lr
  40248a:	bf00      	nop
  40248c:	00061a80 	.word	0x00061a80

00402490 <twi_master_init>:
 * \param p_opt Options for initializing the TWI module (see \ref twi_options_t).
 *
 * \return TWI_SUCCESS if initialization is complete, error code otherwise.
 */
uint32_t twi_master_init(Twi *p_twi, const twi_options_t *p_opt)
{
  402490:	b538      	push	{r3, r4, r5, lr}
  402492:	4604      	mov	r4, r0
  402494:	460d      	mov	r5, r1
	uint32_t status = TWI_SUCCESS;

	/* Disable TWI interrupts */
	p_twi->TWI_IDR = ~0UL;
  402496:	f04f 33ff 	mov.w	r3, #4294967295
  40249a:	6283      	str	r3, [r0, #40]	; 0x28

	/* Dummy read in status register */
	p_twi->TWI_SR;
  40249c:	6a03      	ldr	r3, [r0, #32]
 * \param p_twi Pointer to a TWI instance.
 */
void twi_reset(Twi *p_twi)
{
	/* Set SWRST bit to reset TWI peripheral */
	p_twi->TWI_CR = TWI_CR_SWRST;
  40249e:	2380      	movs	r3, #128	; 0x80
  4024a0:	6003      	str	r3, [r0, #0]
	p_twi->TWI_RHR;
  4024a2:	6b03      	ldr	r3, [r0, #48]	; 0x30
 * \param p_twi Pointer to a TWI instance.
 */
void twi_enable_master_mode(Twi *p_twi)
{
	/* Set Master Disable bit and Slave Disable bit */
	p_twi->TWI_CR = TWI_CR_MSDIS;
  4024a4:	2308      	movs	r3, #8
  4024a6:	6003      	str	r3, [r0, #0]
	p_twi->TWI_CR = TWI_CR_SVDIS;
  4024a8:	2320      	movs	r3, #32
  4024aa:	6003      	str	r3, [r0, #0]

	/* Set Master Enable bit */
	p_twi->TWI_CR = TWI_CR_MSEN;
  4024ac:	2304      	movs	r3, #4
  4024ae:	6003      	str	r3, [r0, #0]
	twi_reset(p_twi);

	twi_enable_master_mode(p_twi);

	/* Select the speed */
	if (twi_set_speed(p_twi, p_opt->speed, p_opt->master_clk) == FAIL) {
  4024b0:	6849      	ldr	r1, [r1, #4]
  4024b2:	682a      	ldr	r2, [r5, #0]
  4024b4:	4b05      	ldr	r3, [pc, #20]	; (4024cc <twi_master_init+0x3c>)
  4024b6:	4798      	blx	r3
  4024b8:	2801      	cmp	r0, #1
  4024ba:	bf14      	ite	ne
  4024bc:	2000      	movne	r0, #0
  4024be:	2001      	moveq	r0, #1
		/* The desired speed setting is rejected */
		status = TWI_INVALID_ARGUMENT;
	}

	if (p_opt->smbus == 1) {
  4024c0:	7a6b      	ldrb	r3, [r5, #9]
  4024c2:	2b01      	cmp	r3, #1
		p_twi->TWI_CR = TWI_CR_QUICK;
  4024c4:	bf04      	itt	eq
  4024c6:	2340      	moveq	r3, #64	; 0x40
  4024c8:	6023      	streq	r3, [r4, #0]
	}

	return status;
}
  4024ca:	bd38      	pop	{r3, r4, r5, pc}
  4024cc:	0040244d 	.word	0x0040244d

004024d0 <twi_master_read>:
 * \param p_packet Packet information and data (see \ref twi_packet_t).
 *
 * \return TWI_SUCCESS if all bytes were read, error code otherwise.
 */
uint32_t twi_master_read(Twi *p_twi, twi_packet_t *p_packet)
{
  4024d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint32_t status;
	uint32_t cnt = p_packet->length;
  4024d4:	68ca      	ldr	r2, [r1, #12]
	uint8_t *buffer = p_packet->buffer;
  4024d6:	688d      	ldr	r5, [r1, #8]
	uint8_t stop_sent = 0;
	uint32_t timeout = TWI_TIMEOUT;;
	
	/* Check argument */
	if (cnt == 0) {
  4024d8:	2a00      	cmp	r2, #0
  4024da:	d048      	beq.n	40256e <twi_master_read+0x9e>
		return TWI_INVALID_ARGUMENT;
	}

	/* Set read mode, slave address and 3 internal address byte lengths */
	p_twi->TWI_MMR = 0;
  4024dc:	2600      	movs	r6, #0
  4024de:	6046      	str	r6, [r0, #4]
	p_twi->TWI_MMR = TWI_MMR_MREAD | TWI_MMR_DADR(p_packet->chip) |
			((p_packet->addr_length << TWI_MMR_IADRSZ_Pos) &
  4024e0:	684b      	ldr	r3, [r1, #4]
  4024e2:	021b      	lsls	r3, r3, #8
  4024e4:	f403 7340 	and.w	r3, r3, #768	; 0x300
  4024e8:	f443 5480 	orr.w	r4, r3, #4096	; 0x1000
		return TWI_INVALID_ARGUMENT;
	}

	/* Set read mode, slave address and 3 internal address byte lengths */
	p_twi->TWI_MMR = 0;
	p_twi->TWI_MMR = TWI_MMR_MREAD | TWI_MMR_DADR(p_packet->chip) |
  4024ec:	7c0b      	ldrb	r3, [r1, #16]
  4024ee:	041b      	lsls	r3, r3, #16
  4024f0:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
  4024f4:	4323      	orrs	r3, r4
  4024f6:	6043      	str	r3, [r0, #4]
			((p_packet->addr_length << TWI_MMR_IADRSZ_Pos) &
			TWI_MMR_IADRSZ_Msk);

	/* Set internal address for remote chip */
	p_twi->TWI_IADR = 0;
  4024f8:	60c6      	str	r6, [r0, #12]
	p_twi->TWI_IADR = twi_mk_addr(p_packet->addr, p_packet->addr_length);
  4024fa:	684c      	ldr	r4, [r1, #4]
 */
static uint32_t twi_mk_addr(const uint8_t *addr, int len)
{
	uint32_t val;

	if (len == 0)
  4024fc:	b15c      	cbz	r4, 402516 <twi_master_read+0x46>
		return 0;

	val = addr[0];
  4024fe:	780b      	ldrb	r3, [r1, #0]
	if (len > 1) {
  402500:	2c01      	cmp	r4, #1
		val <<= 8;
		val |= addr[1];
  402502:	bfc4      	itt	gt
  402504:	784e      	ldrbgt	r6, [r1, #1]
  402506:	ea46 2303 	orrgt.w	r3, r6, r3, lsl #8
	}
	if (len > 2) {
  40250a:	2c02      	cmp	r4, #2
  40250c:	dd04      	ble.n	402518 <twi_master_read+0x48>
		val <<= 8;
		val |= addr[2];
  40250e:	7889      	ldrb	r1, [r1, #2]
  402510:	ea41 2303 	orr.w	r3, r1, r3, lsl #8
  402514:	e000      	b.n	402518 <twi_master_read+0x48>
static uint32_t twi_mk_addr(const uint8_t *addr, int len)
{
	uint32_t val;

	if (len == 0)
		return 0;
  402516:	2300      	movs	r3, #0
			((p_packet->addr_length << TWI_MMR_IADRSZ_Pos) &
			TWI_MMR_IADRSZ_Msk);

	/* Set internal address for remote chip */
	p_twi->TWI_IADR = 0;
	p_twi->TWI_IADR = twi_mk_addr(p_packet->addr, p_packet->addr_length);
  402518:	60c3      	str	r3, [r0, #12]

	/* Send a START condition */
	if (cnt == 1) {
  40251a:	2a01      	cmp	r2, #1
  40251c:	d103      	bne.n	402526 <twi_master_read+0x56>
		p_twi->TWI_CR = TWI_CR_START | TWI_CR_STOP;
  40251e:	2303      	movs	r3, #3
  402520:	6003      	str	r3, [r0, #0]
		stop_sent = 1;
  402522:	2701      	movs	r7, #1
  402524:	e02f      	b.n	402586 <twi_master_read+0xb6>
	} else {
		p_twi->TWI_CR = TWI_CR_START;
  402526:	2301      	movs	r3, #1
  402528:	6003      	str	r3, [r0, #0]
		stop_sent = 0;
  40252a:	2700      	movs	r7, #0
  40252c:	e02b      	b.n	402586 <twi_master_read+0xb6>
		if (cnt == 1  && !stop_sent) {
			p_twi->TWI_CR = TWI_CR_STOP;
			stop_sent = 1;
		}

		if (!(status & TWI_SR_RXRDY)) {
  40252e:	4621      	mov	r1, r4
		p_twi->TWI_CR = TWI_CR_START;
		stop_sent = 0;
	}

	while (cnt > 0) {
		status = p_twi->TWI_SR;
  402530:	6a03      	ldr	r3, [r0, #32]
		if (status & TWI_SR_NACK) {
  402532:	f413 7f80 	tst.w	r3, #256	; 0x100
  402536:	d11d      	bne.n	402574 <twi_master_read+0xa4>
			return TWI_RECEIVE_NACK;
		}

		if (!timeout--) {
  402538:	1e4c      	subs	r4, r1, #1
  40253a:	b1f1      	cbz	r1, 40257a <twi_master_read+0xaa>
			return TWI_ERROR_TIMEOUT;
		}
				
		/* Last byte ? */
		if (cnt == 1  && !stop_sent) {
  40253c:	2a01      	cmp	r2, #1
  40253e:	d104      	bne.n	40254a <twi_master_read+0x7a>
  402540:	bb77      	cbnz	r7, 4025a0 <twi_master_read+0xd0>
			p_twi->TWI_CR = TWI_CR_STOP;
  402542:	f8c0 8000 	str.w	r8, [r0]
			stop_sent = 1;
  402546:	4667      	mov	r7, ip
  402548:	e02a      	b.n	4025a0 <twi_master_read+0xd0>
		}

		if (!(status & TWI_SR_RXRDY)) {
  40254a:	f013 0f02 	tst.w	r3, #2
  40254e:	d005      	beq.n	40255c <twi_master_read+0x8c>
			continue;
		}
		*buffer++ = p_twi->TWI_RHR;
  402550:	6b03      	ldr	r3, [r0, #48]	; 0x30
  402552:	702b      	strb	r3, [r5, #0]

		cnt--;
  402554:	3a01      	subs	r2, #1
		}

		if (!(status & TWI_SR_RXRDY)) {
			continue;
		}
		*buffer++ = p_twi->TWI_RHR;
  402556:	3501      	adds	r5, #1

		cnt--;
		timeout = TWI_TIMEOUT;
  402558:	4631      	mov	r1, r6
  40255a:	e000      	b.n	40255e <twi_master_read+0x8e>
  40255c:	4621      	mov	r1, r4
	} else {
		p_twi->TWI_CR = TWI_CR_START;
		stop_sent = 0;
	}

	while (cnt > 0) {
  40255e:	2a00      	cmp	r2, #0
  402560:	d1e6      	bne.n	402530 <twi_master_read+0x60>

		cnt--;
		timeout = TWI_TIMEOUT;
	}

	while (!(p_twi->TWI_SR & TWI_SR_TXCOMP)) {
  402562:	6a03      	ldr	r3, [r0, #32]
  402564:	f013 0f01 	tst.w	r3, #1
  402568:	d0fb      	beq.n	402562 <twi_master_read+0x92>
	}

	p_twi->TWI_SR;
  40256a:	6a03      	ldr	r3, [r0, #32]

	return TWI_SUCCESS;
  40256c:	e01c      	b.n	4025a8 <twi_master_read+0xd8>
	uint8_t stop_sent = 0;
	uint32_t timeout = TWI_TIMEOUT;;
	
	/* Check argument */
	if (cnt == 0) {
		return TWI_INVALID_ARGUMENT;
  40256e:	f04f 0e01 	mov.w	lr, #1
  402572:	e019      	b.n	4025a8 <twi_master_read+0xd8>
	}

	while (cnt > 0) {
		status = p_twi->TWI_SR;
		if (status & TWI_SR_NACK) {
			return TWI_RECEIVE_NACK;
  402574:	f04f 0e05 	mov.w	lr, #5
  402578:	e016      	b.n	4025a8 <twi_master_read+0xd8>
		}

		if (!timeout--) {
			return TWI_ERROR_TIMEOUT;
  40257a:	f04f 0e09 	mov.w	lr, #9
  40257e:	e013      	b.n	4025a8 <twi_master_read+0xd8>
	}

	while (cnt > 0) {
		status = p_twi->TWI_SR;
		if (status & TWI_SR_NACK) {
			return TWI_RECEIVE_NACK;
  402580:	f04f 0e05 	mov.w	lr, #5
  402584:	e010      	b.n	4025a8 <twi_master_read+0xd8>
		p_twi->TWI_CR = TWI_CR_START;
		stop_sent = 0;
	}

	while (cnt > 0) {
		status = p_twi->TWI_SR;
  402586:	6a03      	ldr	r3, [r0, #32]
		if (status & TWI_SR_NACK) {
  402588:	f413 7e80 	ands.w	lr, r3, #256	; 0x100
  40258c:	d1f8      	bne.n	402580 <twi_master_read+0xb0>
  40258e:	f643 2497 	movw	r4, #14999	; 0x3a97
			continue;
		}
		*buffer++ = p_twi->TWI_RHR;

		cnt--;
		timeout = TWI_TIMEOUT;
  402592:	f643 2698 	movw	r6, #15000	; 0x3a98
			return TWI_ERROR_TIMEOUT;
		}
				
		/* Last byte ? */
		if (cnt == 1  && !stop_sent) {
			p_twi->TWI_CR = TWI_CR_STOP;
  402596:	f04f 0802 	mov.w	r8, #2
			stop_sent = 1;
  40259a:	f04f 0c01 	mov.w	ip, #1
  40259e:	e7cd      	b.n	40253c <twi_master_read+0x6c>
		}

		if (!(status & TWI_SR_RXRDY)) {
  4025a0:	f013 0f02 	tst.w	r3, #2
  4025a4:	d0c3      	beq.n	40252e <twi_master_read+0x5e>
  4025a6:	e7d3      	b.n	402550 <twi_master_read+0x80>
	}

	p_twi->TWI_SR;

	return TWI_SUCCESS;
}
  4025a8:	4670      	mov	r0, lr
  4025aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4025ae:	bf00      	nop

004025b0 <twi_master_write>:
 * \param p_packet Packet information and data (see \ref twi_packet_t).
 *
 * \return TWI_SUCCESS if all bytes were written, error code otherwise.
 */
uint32_t twi_master_write(Twi *p_twi, twi_packet_t *p_packet)
{
  4025b0:	4603      	mov	r3, r0
	uint32_t status;
	uint32_t cnt = p_packet->length;
  4025b2:	68ca      	ldr	r2, [r1, #12]
	uint8_t *buffer = p_packet->buffer;
  4025b4:	6888      	ldr	r0, [r1, #8]

	/* Check argument */
	if (cnt == 0) {
  4025b6:	2a00      	cmp	r2, #0
  4025b8:	d040      	beq.n	40263c <twi_master_write+0x8c>
 * \param p_packet Packet information and data (see \ref twi_packet_t).
 *
 * \return TWI_SUCCESS if all bytes were written, error code otherwise.
 */
uint32_t twi_master_write(Twi *p_twi, twi_packet_t *p_packet)
{
  4025ba:	b470      	push	{r4, r5, r6}
	if (cnt == 0) {
		return TWI_INVALID_ARGUMENT;
	}

	/* Set write mode, slave address and 3 internal address byte lengths */
	p_twi->TWI_MMR = 0;
  4025bc:	2600      	movs	r6, #0
  4025be:	605e      	str	r6, [r3, #4]
	p_twi->TWI_MMR = TWI_MMR_DADR(p_packet->chip) |
  4025c0:	7c0c      	ldrb	r4, [r1, #16]
  4025c2:	0424      	lsls	r4, r4, #16
  4025c4:	f404 05fe 	and.w	r5, r4, #8323072	; 0x7f0000
			((p_packet->addr_length << TWI_MMR_IADRSZ_Pos) &
  4025c8:	684c      	ldr	r4, [r1, #4]
  4025ca:	0224      	lsls	r4, r4, #8
  4025cc:	f404 7440 	and.w	r4, r4, #768	; 0x300
		return TWI_INVALID_ARGUMENT;
	}

	/* Set write mode, slave address and 3 internal address byte lengths */
	p_twi->TWI_MMR = 0;
	p_twi->TWI_MMR = TWI_MMR_DADR(p_packet->chip) |
  4025d0:	432c      	orrs	r4, r5
  4025d2:	605c      	str	r4, [r3, #4]
			((p_packet->addr_length << TWI_MMR_IADRSZ_Pos) &
			TWI_MMR_IADRSZ_Msk);

	/* Set internal address for remote chip */
	p_twi->TWI_IADR = 0;
  4025d4:	60de      	str	r6, [r3, #12]
	p_twi->TWI_IADR = twi_mk_addr(p_packet->addr, p_packet->addr_length);
  4025d6:	684d      	ldr	r5, [r1, #4]
 */
static uint32_t twi_mk_addr(const uint8_t *addr, int len)
{
	uint32_t val;

	if (len == 0)
  4025d8:	b15d      	cbz	r5, 4025f2 <twi_master_write+0x42>
		return 0;

	val = addr[0];
  4025da:	780c      	ldrb	r4, [r1, #0]
	if (len > 1) {
  4025dc:	2d01      	cmp	r5, #1
		val <<= 8;
		val |= addr[1];
  4025de:	bfc4      	itt	gt
  4025e0:	784e      	ldrbgt	r6, [r1, #1]
  4025e2:	ea46 2404 	orrgt.w	r4, r6, r4, lsl #8
	}
	if (len > 2) {
  4025e6:	2d02      	cmp	r5, #2
  4025e8:	dd04      	ble.n	4025f4 <twi_master_write+0x44>
		val <<= 8;
		val |= addr[2];
  4025ea:	7889      	ldrb	r1, [r1, #2]
  4025ec:	ea41 2404 	orr.w	r4, r1, r4, lsl #8
  4025f0:	e000      	b.n	4025f4 <twi_master_write+0x44>
static uint32_t twi_mk_addr(const uint8_t *addr, int len)
{
	uint32_t val;

	if (len == 0)
		return 0;
  4025f2:	2400      	movs	r4, #0
			((p_packet->addr_length << TWI_MMR_IADRSZ_Pos) &
			TWI_MMR_IADRSZ_Msk);

	/* Set internal address for remote chip */
	p_twi->TWI_IADR = 0;
	p_twi->TWI_IADR = twi_mk_addr(p_packet->addr, p_packet->addr_length);
  4025f4:	60dc      	str	r4, [r3, #12]
  4025f6:	e00b      	b.n	402610 <twi_master_write+0x60>

	/* Send all bytes */
	while (cnt > 0) {
		status = p_twi->TWI_SR;
  4025f8:	6a19      	ldr	r1, [r3, #32]
		if (status & TWI_SR_NACK) {
  4025fa:	f411 7f80 	tst.w	r1, #256	; 0x100
  4025fe:	d11f      	bne.n	402640 <twi_master_write+0x90>
			return TWI_RECEIVE_NACK;
		}

		if (!(status & TWI_SR_TXRDY)) {
  402600:	f011 0f04 	tst.w	r1, #4
  402604:	d0f8      	beq.n	4025f8 <twi_master_write+0x48>
			continue;
		}
		p_twi->TWI_THR = *buffer++;
  402606:	f810 1b01 	ldrb.w	r1, [r0], #1
  40260a:	6359      	str	r1, [r3, #52]	; 0x34
	/* Set internal address for remote chip */
	p_twi->TWI_IADR = 0;
	p_twi->TWI_IADR = twi_mk_addr(p_packet->addr, p_packet->addr_length);

	/* Send all bytes */
	while (cnt > 0) {
  40260c:	3a01      	subs	r2, #1
  40260e:	d007      	beq.n	402620 <twi_master_write+0x70>
		status = p_twi->TWI_SR;
  402610:	6a19      	ldr	r1, [r3, #32]
		if (status & TWI_SR_NACK) {
  402612:	f411 7f80 	tst.w	r1, #256	; 0x100
  402616:	d115      	bne.n	402644 <twi_master_write+0x94>
			return TWI_RECEIVE_NACK;
		}

		if (!(status & TWI_SR_TXRDY)) {
  402618:	f011 0f04 	tst.w	r1, #4
  40261c:	d0ec      	beq.n	4025f8 <twi_master_write+0x48>
  40261e:	e7f2      	b.n	402606 <twi_master_write+0x56>

		cnt--;
	}

	while (1) {
		status = p_twi->TWI_SR;
  402620:	6a1a      	ldr	r2, [r3, #32]
		if (status & TWI_SR_NACK) {
  402622:	f412 7080 	ands.w	r0, r2, #256	; 0x100
  402626:	d10f      	bne.n	402648 <twi_master_write+0x98>
			return TWI_RECEIVE_NACK;
		}

		if (status & TWI_SR_TXRDY) {
  402628:	f012 0f04 	tst.w	r2, #4
  40262c:	d0f8      	beq.n	402620 <twi_master_write+0x70>
			break;
		}
	}

	p_twi->TWI_CR = TWI_CR_STOP;
  40262e:	2202      	movs	r2, #2
  402630:	601a      	str	r2, [r3, #0]

	while (!(p_twi->TWI_SR & TWI_SR_TXCOMP)) {
  402632:	6a1a      	ldr	r2, [r3, #32]
  402634:	f012 0f01 	tst.w	r2, #1
  402638:	d0fb      	beq.n	402632 <twi_master_write+0x82>
  40263a:	e006      	b.n	40264a <twi_master_write+0x9a>
	uint32_t cnt = p_packet->length;
	uint8_t *buffer = p_packet->buffer;

	/* Check argument */
	if (cnt == 0) {
		return TWI_INVALID_ARGUMENT;
  40263c:	2001      	movs	r0, #1

	while (!(p_twi->TWI_SR & TWI_SR_TXCOMP)) {
	}

	return TWI_SUCCESS;
}
  40263e:	4770      	bx	lr

	/* Send all bytes */
	while (cnt > 0) {
		status = p_twi->TWI_SR;
		if (status & TWI_SR_NACK) {
			return TWI_RECEIVE_NACK;
  402640:	2005      	movs	r0, #5
  402642:	e002      	b.n	40264a <twi_master_write+0x9a>
  402644:	2005      	movs	r0, #5
  402646:	e000      	b.n	40264a <twi_master_write+0x9a>
	}

	while (1) {
		status = p_twi->TWI_SR;
		if (status & TWI_SR_NACK) {
			return TWI_RECEIVE_NACK;
  402648:	2005      	movs	r0, #5

	while (!(p_twi->TWI_SR & TWI_SR_TXCOMP)) {
	}

	return TWI_SUCCESS;
}
  40264a:	bc70      	pop	{r4, r5, r6}
  40264c:	4770      	bx	lr
  40264e:	bf00      	nop

00402650 <Dummy_Handler>:
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
	while (1) {
	}
  402650:	e7fe      	b.n	402650 <Dummy_Handler>
  402652:	bf00      	nop

00402654 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
  402654:	b508      	push	{r3, lr}

	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc > pDest) {
  402656:	4b20      	ldr	r3, [pc, #128]	; (4026d8 <Reset_Handler+0x84>)
  402658:	4a20      	ldr	r2, [pc, #128]	; (4026dc <Reset_Handler+0x88>)
  40265a:	429a      	cmp	r2, r3
  40265c:	d913      	bls.n	402686 <Reset_Handler+0x32>
		for (; pDest < &_erelocate;) {
  40265e:	4b20      	ldr	r3, [pc, #128]	; (4026e0 <Reset_Handler+0x8c>)
  402660:	4a1d      	ldr	r2, [pc, #116]	; (4026d8 <Reset_Handler+0x84>)
  402662:	429a      	cmp	r2, r3
  402664:	d21f      	bcs.n	4026a6 <Reset_Handler+0x52>
  402666:	4611      	mov	r1, r2
  402668:	3204      	adds	r2, #4
  40266a:	3303      	adds	r3, #3
  40266c:	1a9b      	subs	r3, r3, r2
  40266e:	f023 0303 	bic.w	r3, r3, #3
  402672:	3304      	adds	r3, #4
  402674:	4a19      	ldr	r2, [pc, #100]	; (4026dc <Reset_Handler+0x88>)
  402676:	4413      	add	r3, r2
			*pDest++ = *pSrc++;
  402678:	f852 0b04 	ldr.w	r0, [r2], #4
  40267c:	f841 0b04 	str.w	r0, [r1], #4
	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc > pDest) {
		for (; pDest < &_erelocate;) {
  402680:	429a      	cmp	r2, r3
  402682:	d1f9      	bne.n	402678 <Reset_Handler+0x24>
  402684:	e00f      	b.n	4026a6 <Reset_Handler+0x52>
			*pDest++ = *pSrc++;
		}
	} else if (pSrc < pDest) {
  402686:	4b14      	ldr	r3, [pc, #80]	; (4026d8 <Reset_Handler+0x84>)
  402688:	4a14      	ldr	r2, [pc, #80]	; (4026dc <Reset_Handler+0x88>)
  40268a:	429a      	cmp	r2, r3
  40268c:	d20b      	bcs.n	4026a6 <Reset_Handler+0x52>
		uint32_t nb_bytes = (uint32_t)&_erelocate - (uint32_t)&_srelocate;
  40268e:	4b14      	ldr	r3, [pc, #80]	; (4026e0 <Reset_Handler+0x8c>)
  402690:	4a11      	ldr	r2, [pc, #68]	; (4026d8 <Reset_Handler+0x84>)
  402692:	1a9a      	subs	r2, r3, r2
  402694:	4813      	ldr	r0, [pc, #76]	; (4026e4 <Reset_Handler+0x90>)
		pSrc = (uint32_t*)((uint32_t)pSrc + nb_bytes) - 1;
  402696:	1881      	adds	r1, r0, r2
		pDest = (uint32_t*)((uint32_t)pDest + nb_bytes) - 1;
		for (;nb_bytes;nb_bytes -= 4) {
  402698:	b12a      	cbz	r2, 4026a6 <Reset_Handler+0x52>
			*pDest-- = *pSrc--;
  40269a:	f851 2904 	ldr.w	r2, [r1], #-4
  40269e:	f843 2d04 	str.w	r2, [r3, #-4]!
		}
	} else if (pSrc < pDest) {
		uint32_t nb_bytes = (uint32_t)&_erelocate - (uint32_t)&_srelocate;
		pSrc = (uint32_t*)((uint32_t)pSrc + nb_bytes) - 1;
		pDest = (uint32_t*)((uint32_t)pDest + nb_bytes) - 1;
		for (;nb_bytes;nb_bytes -= 4) {
  4026a2:	4281      	cmp	r1, r0
  4026a4:	d1f9      	bne.n	40269a <Reset_Handler+0x46>

    No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
  4026a6:	bf00      	nop
		}
	}
	__NOP();

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
  4026a8:	4b0f      	ldr	r3, [pc, #60]	; (4026e8 <Reset_Handler+0x94>)
  4026aa:	4a10      	ldr	r2, [pc, #64]	; (4026ec <Reset_Handler+0x98>)
  4026ac:	429a      	cmp	r2, r3
  4026ae:	d20b      	bcs.n	4026c8 <Reset_Handler+0x74>
  4026b0:	1d13      	adds	r3, r2, #4
  4026b2:	4a0f      	ldr	r2, [pc, #60]	; (4026f0 <Reset_Handler+0x9c>)
  4026b4:	1ad2      	subs	r2, r2, r3
  4026b6:	f022 0203 	bic.w	r2, r2, #3
  4026ba:	441a      	add	r2, r3
  4026bc:	3b04      	subs	r3, #4
		*pDest++ = 0;
  4026be:	2100      	movs	r1, #0
  4026c0:	f843 1b04 	str.w	r1, [r3], #4
		}
	}
	__NOP();

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
  4026c4:	4293      	cmp	r3, r2
  4026c6:	d1fb      	bne.n	4026c0 <Reset_Handler+0x6c>
		*pDest++ = 0;
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) & _sfixed;
	SCB->VTOR = ((uint32_t) pSrc);
  4026c8:	4b0a      	ldr	r3, [pc, #40]	; (4026f4 <Reset_Handler+0xa0>)
  4026ca:	4a0b      	ldr	r2, [pc, #44]	; (4026f8 <Reset_Handler+0xa4>)
  4026cc:	609a      	str	r2, [r3, #8]

	/* Initialize the C library */
	__libc_init_array();
  4026ce:	4b0b      	ldr	r3, [pc, #44]	; (4026fc <Reset_Handler+0xa8>)
  4026d0:	4798      	blx	r3

	/* Branch to main function */
	main();
  4026d2:	4b0b      	ldr	r3, [pc, #44]	; (402700 <Reset_Handler+0xac>)
  4026d4:	4798      	blx	r3

	/* Infinite loop */
	while (1);
  4026d6:	e7fe      	b.n	4026d6 <Reset_Handler+0x82>
  4026d8:	20000000 	.word	0x20000000
  4026dc:	00404068 	.word	0x00404068
  4026e0:	20000448 	.word	0x20000448
  4026e4:	00404064 	.word	0x00404064
  4026e8:	2000a9f0 	.word	0x2000a9f0
  4026ec:	20000448 	.word	0x20000448
  4026f0:	2000a9f3 	.word	0x2000a9f3
  4026f4:	e000ed00 	.word	0xe000ed00
  4026f8:	00400000 	.word	0x00400000
  4026fc:	00402c05 	.word	0x00402c05
  402700:	00402905 	.word	0x00402905

00402704 <SystemCoreClockUpdate>:
 * \brief Get Core Clock Frequency.
 */
void SystemCoreClockUpdate( void )
{
	/* Determine clock frequency according to clock register values */
	switch ( PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk ) {
  402704:	4b3d      	ldr	r3, [pc, #244]	; (4027fc <SystemCoreClockUpdate+0xf8>)
  402706:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  402708:	f003 0303 	and.w	r3, r3, #3
  40270c:	2b03      	cmp	r3, #3
  40270e:	d85d      	bhi.n	4027cc <SystemCoreClockUpdate+0xc8>
  402710:	e8df f003 	tbb	[pc, r3]
  402714:	2b2b0e02 	.word	0x2b2b0e02
	case PMC_MCKR_CSS_SLOW_CLK: /* Slow clock */
			if ( SUPC->SUPC_SR & SUPC_SR_OSCSEL ) {
  402718:	4b39      	ldr	r3, [pc, #228]	; (402800 <SystemCoreClockUpdate+0xfc>)
  40271a:	695b      	ldr	r3, [r3, #20]
  40271c:	f013 0f80 	tst.w	r3, #128	; 0x80
				SystemCoreClock = CHIP_FREQ_XTAL_32K;
  402720:	bf14      	ite	ne
  402722:	f44f 4200 	movne.w	r2, #32768	; 0x8000
			} else {
				SystemCoreClock = CHIP_FREQ_SLCK_RC;
  402726:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
  40272a:	4b36      	ldr	r3, [pc, #216]	; (402804 <SystemCoreClockUpdate+0x100>)
  40272c:	601a      	str	r2, [r3, #0]
  40272e:	e04d      	b.n	4027cc <SystemCoreClockUpdate+0xc8>
			}
		break;
		
	case PMC_MCKR_CSS_MAIN_CLK: /* Main clock */
		if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL ) {
  402730:	4b32      	ldr	r3, [pc, #200]	; (4027fc <SystemCoreClockUpdate+0xf8>)
  402732:	6a1b      	ldr	r3, [r3, #32]
  402734:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  402738:	d003      	beq.n	402742 <SystemCoreClockUpdate+0x3e>
			SystemCoreClock = CHIP_FREQ_XTAL;
  40273a:	4a33      	ldr	r2, [pc, #204]	; (402808 <SystemCoreClockUpdate+0x104>)
  40273c:	4b31      	ldr	r3, [pc, #196]	; (402804 <SystemCoreClockUpdate+0x100>)
  40273e:	601a      	str	r2, [r3, #0]
  402740:	e044      	b.n	4027cc <SystemCoreClockUpdate+0xc8>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  402742:	4a32      	ldr	r2, [pc, #200]	; (40280c <SystemCoreClockUpdate+0x108>)
  402744:	4b2f      	ldr	r3, [pc, #188]	; (402804 <SystemCoreClockUpdate+0x100>)
  402746:	601a      	str	r2, [r3, #0]
			
			switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk ) {
  402748:	4b2c      	ldr	r3, [pc, #176]	; (4027fc <SystemCoreClockUpdate+0xf8>)
  40274a:	6a1b      	ldr	r3, [r3, #32]
  40274c:	f003 0370 	and.w	r3, r3, #112	; 0x70
  402750:	2b10      	cmp	r3, #16
  402752:	d002      	beq.n	40275a <SystemCoreClockUpdate+0x56>
  402754:	2b20      	cmp	r3, #32
  402756:	d004      	beq.n	402762 <SystemCoreClockUpdate+0x5e>
  402758:	e038      	b.n	4027cc <SystemCoreClockUpdate+0xc8>
			case CKGR_MOR_MOSCRCF_4_MHz:
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
			break;
			
			case CKGR_MOR_MOSCRCF_8_MHz:
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_8MHZ;
  40275a:	4a2d      	ldr	r2, [pc, #180]	; (402810 <SystemCoreClockUpdate+0x10c>)
  40275c:	4b29      	ldr	r3, [pc, #164]	; (402804 <SystemCoreClockUpdate+0x100>)
  40275e:	601a      	str	r2, [r3, #0]
			break;
  402760:	e034      	b.n	4027cc <SystemCoreClockUpdate+0xc8>
			
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_12MHZ;
  402762:	4a29      	ldr	r2, [pc, #164]	; (402808 <SystemCoreClockUpdate+0x104>)
  402764:	4b27      	ldr	r3, [pc, #156]	; (402804 <SystemCoreClockUpdate+0x100>)
  402766:	601a      	str	r2, [r3, #0]
			break;
  402768:	e030      	b.n	4027cc <SystemCoreClockUpdate+0xc8>
		}
		break;
		
	case PMC_MCKR_CSS_PLLA_CLK:	/* PLLA clock */
	case PMC_MCKR_CSS_PLLB_CLK:	/* PLLB clock */
			if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL ) {
  40276a:	4b24      	ldr	r3, [pc, #144]	; (4027fc <SystemCoreClockUpdate+0xf8>)
  40276c:	6a1b      	ldr	r3, [r3, #32]
  40276e:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  402772:	d003      	beq.n	40277c <SystemCoreClockUpdate+0x78>
				SystemCoreClock = CHIP_FREQ_XTAL;
  402774:	4a24      	ldr	r2, [pc, #144]	; (402808 <SystemCoreClockUpdate+0x104>)
  402776:	4b23      	ldr	r3, [pc, #140]	; (402804 <SystemCoreClockUpdate+0x100>)
  402778:	601a      	str	r2, [r3, #0]
  40277a:	e012      	b.n	4027a2 <SystemCoreClockUpdate+0x9e>
			} else {
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  40277c:	4a23      	ldr	r2, [pc, #140]	; (40280c <SystemCoreClockUpdate+0x108>)
  40277e:	4b21      	ldr	r3, [pc, #132]	; (402804 <SystemCoreClockUpdate+0x100>)
  402780:	601a      	str	r2, [r3, #0]
				
				switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk ) {
  402782:	4b1e      	ldr	r3, [pc, #120]	; (4027fc <SystemCoreClockUpdate+0xf8>)
  402784:	6a1b      	ldr	r3, [r3, #32]
  402786:	f003 0370 	and.w	r3, r3, #112	; 0x70
  40278a:	2b10      	cmp	r3, #16
  40278c:	d002      	beq.n	402794 <SystemCoreClockUpdate+0x90>
  40278e:	2b20      	cmp	r3, #32
  402790:	d004      	beq.n	40279c <SystemCoreClockUpdate+0x98>
  402792:	e006      	b.n	4027a2 <SystemCoreClockUpdate+0x9e>
				case CKGR_MOR_MOSCRCF_4_MHz:
					SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
					break;
				
				case CKGR_MOR_MOSCRCF_8_MHz:
					SystemCoreClock = CHIP_FREQ_MAINCK_RC_8MHZ;
  402794:	4a1e      	ldr	r2, [pc, #120]	; (402810 <SystemCoreClockUpdate+0x10c>)
  402796:	4b1b      	ldr	r3, [pc, #108]	; (402804 <SystemCoreClockUpdate+0x100>)
  402798:	601a      	str	r2, [r3, #0]
					break;
  40279a:	e002      	b.n	4027a2 <SystemCoreClockUpdate+0x9e>
				
				case CKGR_MOR_MOSCRCF_12_MHz:
					SystemCoreClock = CHIP_FREQ_MAINCK_RC_12MHZ;
  40279c:	4a1a      	ldr	r2, [pc, #104]	; (402808 <SystemCoreClockUpdate+0x104>)
  40279e:	4b19      	ldr	r3, [pc, #100]	; (402804 <SystemCoreClockUpdate+0x100>)
  4027a0:	601a      	str	r2, [r3, #0]
				default:
					break;
				}
			}
			
			if ( (uint32_t)(PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) ==
  4027a2:	4b16      	ldr	r3, [pc, #88]	; (4027fc <SystemCoreClockUpdate+0xf8>)
  4027a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4027a6:	f003 0303 	and.w	r3, r3, #3
  4027aa:	2b02      	cmp	r3, #2
					PMC_MCKR_CSS_PLLA_CLK ) {
				SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk)
  4027ac:	4a13      	ldr	r2, [pc, #76]	; (4027fc <SystemCoreClockUpdate+0xf8>)
  4027ae:	bf07      	ittee	eq
  4027b0:	6a93      	ldreq	r3, [r2, #40]	; 0x28
						>> CKGR_PLLAR_MULA_Pos) + 1U);
				SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk)
  4027b2:	6a92      	ldreq	r2, [r2, #40]	; 0x28
						>> CKGR_PLLAR_DIVA_Pos));
			} else {
				SystemCoreClock *= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_MULB_Msk)
  4027b4:	6ad3      	ldrne	r3, [r2, #44]	; 0x2c
						>> CKGR_PLLBR_MULB_Pos) + 1U);
				SystemCoreClock /= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_DIVB_Msk)
  4027b6:	6ad2      	ldrne	r2, [r2, #44]	; 0x2c
  4027b8:	4812      	ldr	r0, [pc, #72]	; (402804 <SystemCoreClockUpdate+0x100>)
						>> CKGR_PLLAR_MULA_Pos) + 1U);
				SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk)
						>> CKGR_PLLAR_DIVA_Pos));
			} else {
				SystemCoreClock *= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_MULB_Msk)
						>> CKGR_PLLBR_MULB_Pos) + 1U);
  4027ba:	f3c3 410a 	ubfx	r1, r3, #16, #11
				SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk)
						>> CKGR_PLLAR_MULA_Pos) + 1U);
				SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk)
						>> CKGR_PLLAR_DIVA_Pos));
			} else {
				SystemCoreClock *= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_MULB_Msk)
  4027be:	6803      	ldr	r3, [r0, #0]
  4027c0:	fb01 3303 	mla	r3, r1, r3, r3
						>> CKGR_PLLBR_MULB_Pos) + 1U);
				SystemCoreClock /= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_DIVB_Msk)
						>> CKGR_PLLBR_DIVB_Pos));
  4027c4:	b2d2      	uxtb	r2, r2
				SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk)
						>> CKGR_PLLAR_DIVA_Pos));
			} else {
				SystemCoreClock *= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_MULB_Msk)
						>> CKGR_PLLBR_MULB_Pos) + 1U);
				SystemCoreClock /= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_DIVB_Msk)
  4027c6:	fbb3 f3f2 	udiv	r3, r3, r2
  4027ca:	6003      	str	r3, [r0, #0]
		
	default:
		break;
	}

	if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 ) {
  4027cc:	4b0b      	ldr	r3, [pc, #44]	; (4027fc <SystemCoreClockUpdate+0xf8>)
  4027ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4027d0:	f003 0370 	and.w	r3, r3, #112	; 0x70
  4027d4:	2b70      	cmp	r3, #112	; 0x70
  4027d6:	d107      	bne.n	4027e8 <SystemCoreClockUpdate+0xe4>
		SystemCoreClock /= 3U;
  4027d8:	4a0a      	ldr	r2, [pc, #40]	; (402804 <SystemCoreClockUpdate+0x100>)
  4027da:	6813      	ldr	r3, [r2, #0]
  4027dc:	490d      	ldr	r1, [pc, #52]	; (402814 <SystemCoreClockUpdate+0x110>)
  4027de:	fba1 1303 	umull	r1, r3, r1, r3
  4027e2:	085b      	lsrs	r3, r3, #1
  4027e4:	6013      	str	r3, [r2, #0]
  4027e6:	4770      	bx	lr
	} else {
		SystemCoreClock >>=
			((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  4027e8:	4b04      	ldr	r3, [pc, #16]	; (4027fc <SystemCoreClockUpdate+0xf8>)
  4027ea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
	}

	if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 ) {
		SystemCoreClock /= 3U;
	} else {
		SystemCoreClock >>=
  4027ec:	4905      	ldr	r1, [pc, #20]	; (402804 <SystemCoreClockUpdate+0x100>)
			((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  4027ee:	f3c2 1202 	ubfx	r2, r2, #4, #3
	}

	if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 ) {
		SystemCoreClock /= 3U;
	} else {
		SystemCoreClock >>=
  4027f2:	680b      	ldr	r3, [r1, #0]
  4027f4:	40d3      	lsrs	r3, r2
  4027f6:	600b      	str	r3, [r1, #0]
  4027f8:	4770      	bx	lr
  4027fa:	bf00      	nop
  4027fc:	400e0400 	.word	0x400e0400
  402800:	400e1410 	.word	0x400e1410
  402804:	20000018 	.word	0x20000018
  402808:	00b71b00 	.word	0x00b71b00
  40280c:	003d0900 	.word	0x003d0900
  402810:	007a1200 	.word	0x007a1200
  402814:	aaaaaaab 	.word	0xaaaaaaab

00402818 <system_init_flash>:
 */
void system_init_flash( uint32_t ul_clk )
{
  /* Set FWS for embedded Flash access according to operating frequency */
#if !defined(ID_EFC1)
	if ( ul_clk < CHIP_FREQ_FWS_0 ) {
  402818:	4b12      	ldr	r3, [pc, #72]	; (402864 <system_init_flash+0x4c>)
  40281a:	4298      	cmp	r0, r3
  40281c:	d804      	bhi.n	402828 <system_init_flash+0x10>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  40281e:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  402822:	4b11      	ldr	r3, [pc, #68]	; (402868 <system_init_flash+0x50>)
  402824:	601a      	str	r2, [r3, #0]
  402826:	4770      	bx	lr
	} else {
		if ( ul_clk < CHIP_FREQ_FWS_1 ) {
  402828:	4b10      	ldr	r3, [pc, #64]	; (40286c <system_init_flash+0x54>)
  40282a:	4298      	cmp	r0, r3
  40282c:	d803      	bhi.n	402836 <system_init_flash+0x1e>
			EFC0->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  40282e:	4a10      	ldr	r2, [pc, #64]	; (402870 <system_init_flash+0x58>)
  402830:	4b0d      	ldr	r3, [pc, #52]	; (402868 <system_init_flash+0x50>)
  402832:	601a      	str	r2, [r3, #0]
  402834:	4770      	bx	lr
		} else {
			if ( ul_clk < CHIP_FREQ_FWS_2 ) {
  402836:	4b0f      	ldr	r3, [pc, #60]	; (402874 <system_init_flash+0x5c>)
  402838:	4298      	cmp	r0, r3
  40283a:	d803      	bhi.n	402844 <system_init_flash+0x2c>
				EFC0->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  40283c:	4a0e      	ldr	r2, [pc, #56]	; (402878 <system_init_flash+0x60>)
  40283e:	4b0a      	ldr	r3, [pc, #40]	; (402868 <system_init_flash+0x50>)
  402840:	601a      	str	r2, [r3, #0]
  402842:	4770      	bx	lr
			} else {
				if ( ul_clk < CHIP_FREQ_FWS_3 ) {
  402844:	4b0d      	ldr	r3, [pc, #52]	; (40287c <system_init_flash+0x64>)
  402846:	4298      	cmp	r0, r3
  402848:	d803      	bhi.n	402852 <system_init_flash+0x3a>
					EFC0->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  40284a:	4a0d      	ldr	r2, [pc, #52]	; (402880 <system_init_flash+0x68>)
  40284c:	4b06      	ldr	r3, [pc, #24]	; (402868 <system_init_flash+0x50>)
  40284e:	601a      	str	r2, [r3, #0]
  402850:	4770      	bx	lr
				} else {
					if ( ul_clk < CHIP_FREQ_FWS_4 ) {
  402852:	4b0c      	ldr	r3, [pc, #48]	; (402884 <system_init_flash+0x6c>)
  402854:	4298      	cmp	r0, r3
					EFC0->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
  402856:	bf94      	ite	ls
  402858:	f04f 2204 	movls.w	r2, #67109888	; 0x4000400
					} else {
					EFC0->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  40285c:	4a0a      	ldrhi	r2, [pc, #40]	; (402888 <system_init_flash+0x70>)
  40285e:	4b02      	ldr	r3, [pc, #8]	; (402868 <system_init_flash+0x50>)
  402860:	601a      	str	r2, [r3, #0]
  402862:	4770      	bx	lr
  402864:	01312cff 	.word	0x01312cff
  402868:	400e0a00 	.word	0x400e0a00
  40286c:	026259ff 	.word	0x026259ff
  402870:	04000100 	.word	0x04000100
  402874:	039386ff 	.word	0x039386ff
  402878:	04000200 	.word	0x04000200
  40287c:	04c4b3ff 	.word	0x04c4b3ff
  402880:	04000300 	.word	0x04000300
  402884:	05f5e0ff 	.word	0x05f5e0ff
  402888:	04000500 	.word	0x04000500

0040288c <vsync_handler>:
static void vsync_handler(uint32_t ul_id, uint32_t ul_mask)
{
	unused(ul_id);
	unused(ul_mask);

	g_ul_vsync_flag = true;
  40288c:	2201      	movs	r2, #1
  40288e:	4b01      	ldr	r3, [pc, #4]	; (402894 <vsync_handler+0x8>)
  402890:	601a      	str	r2, [r3, #0]
  402892:	4770      	bx	lr
  402894:	2000a9e8 	.word	0x2000a9e8

00402898 <button_handler>:
static void button_handler(uint32_t ul_id, uint32_t ul_mask)
{
	unused(ul_id);
	unused(ul_mask);

	g_ul_push_button_trigger = true;
  402898:	2201      	movs	r2, #1
  40289a:	4b01      	ldr	r3, [pc, #4]	; (4028a0 <button_handler+0x8>)
  40289c:	601a      	str	r2, [r3, #0]
  40289e:	4770      	bx	lr
  4028a0:	2000a9e4 	.word	0x2000a9e4

004028a4 <task_lcdscreen>:
		vTaskDelay(1000);
	}
}

static void task_lcdscreen(void *pvParameters)
{
  4028a4:	b580      	push	{r7, lr}
	UNUSED(pvParameters);
	for (;;) {
		ili9325_fill(COLOR_VIOLET);
  4028a6:	4f09      	ldr	r7, [pc, #36]	; (4028cc <task_lcdscreen+0x28>)
  4028a8:	4e09      	ldr	r6, [pc, #36]	; (4028d0 <task_lcdscreen+0x2c>)
		ili9325_draw_string(0, 20, (uint8_t *)"FreeRTOS");
  4028aa:	4d0a      	ldr	r5, [pc, #40]	; (4028d4 <task_lcdscreen+0x30>)

static void task_lcdscreen(void *pvParameters)
{
	UNUSED(pvParameters);
	for (;;) {
		ili9325_fill(COLOR_VIOLET);
  4028ac:	4638      	mov	r0, r7
  4028ae:	47b0      	blx	r6
		ili9325_draw_string(0, 20, (uint8_t *)"FreeRTOS");
  4028b0:	2000      	movs	r0, #0
  4028b2:	2114      	movs	r1, #20
  4028b4:	462a      	mov	r2, r5
  4028b6:	4c08      	ldr	r4, [pc, #32]	; (4028d8 <task_lcdscreen+0x34>)
  4028b8:	47a0      	blx	r4
		ili9325_draw_string(0, 80, (uint8_t *)"DEMO");
  4028ba:	2000      	movs	r0, #0
  4028bc:	2150      	movs	r1, #80	; 0x50
  4028be:	4a07      	ldr	r2, [pc, #28]	; (4028dc <task_lcdscreen+0x38>)
  4028c0:	47a0      	blx	r4
		vTaskDelay(2000);
  4028c2:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
  4028c6:	4b06      	ldr	r3, [pc, #24]	; (4028e0 <task_lcdscreen+0x3c>)
  4028c8:	4798      	blx	r3
	}
  4028ca:	e7ef      	b.n	4028ac <task_lcdscreen+0x8>
  4028cc:	00ee82ee 	.word	0x00ee82ee
  4028d0:	00401df1 	.word	0x00401df1
  4028d4:	00403fa4 	.word	0x00403fa4
  4028d8:	00401e61 	.word	0x00401e61
  4028dc:	00403fb0 	.word	0x00403fb0
  4028e0:	00400ef1 	.word	0x00400ef1

004028e4 <task_led>:

/**
 * \brief This task, when activated, make LED blink at a fixed rate
 */
static void task_led(void *pvParameters)
{
  4028e4:	b508      	push	{r3, lr}
	UNUSED(pvParameters);
	for (;;) {
		LED_Toggle(LED0_GPIO);
  4028e6:	264c      	movs	r6, #76	; 0x4c
  4028e8:	4d03      	ldr	r5, [pc, #12]	; (4028f8 <task_led+0x14>)
		vTaskDelay(1000);
  4028ea:	4c04      	ldr	r4, [pc, #16]	; (4028fc <task_led+0x18>)
 */
static void task_led(void *pvParameters)
{
	UNUSED(pvParameters);
	for (;;) {
		LED_Toggle(LED0_GPIO);
  4028ec:	4630      	mov	r0, r6
  4028ee:	47a8      	blx	r5
		vTaskDelay(1000);
  4028f0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
  4028f4:	47a0      	blx	r4
	}
  4028f6:	e7f9      	b.n	4028ec <task_led+0x8>
  4028f8:	004020b1 	.word	0x004020b1
  4028fc:	00400ef1 	.word	0x00400ef1

00402900 <vApplicationMallocFailedHook>:
	heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
	FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
	to query the size of free heap space that remains (although it does not
	provide information on how the remaining heap might be fragmented). */
//	taskDISABLE_INTERRUPTS();
	for( ;; );
  402900:	e7fe      	b.n	402900 <vApplicationMallocFailedHook>
  402902:	bf00      	nop

00402904 <main>:
 * \brief Application entry point for image sensor capture example.
 *
 * \return Unused (ANSI-C compatibility).
 */
int main(void)
{
  402904:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  402908:	b089      	sub	sp, #36	; 0x24
	sysclk_init();
  40290a:	4b8a      	ldr	r3, [pc, #552]	; (402b34 <main+0x230>)
  40290c:	4798      	blx	r3
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07);               /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  40290e:	4a8a      	ldr	r2, [pc, #552]	; (402b38 <main+0x234>)
  402910:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk);             /* clear bits to change               */
  402912:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
  402916:	041b      	lsls	r3, r3, #16
  402918:	0c1b      	lsrs	r3, r3, #16
  reg_value  =  (reg_value                                 |
  40291a:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  40291e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
                ((uint32_t)0x5FA << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8));                                     /* Insert write key and priorty group */
  SCB->AIRCR =  reg_value;
  402922:	60d3      	str	r3, [r2, #12]
	NVIC_SetPriorityGrouping( 0 );
	board_init();
  402924:	4b85      	ldr	r3, [pc, #532]	; (402b3c <main+0x238>)
  402926:	4798      	blx	r3

	/* OV7740 send image sensor data at 24 Mhz. For best performances, PCK0
	 * which will capture OV7740 data, has to work at 24Mhz. It's easier and
	 * optimum to use one PLL for core (PLLB) and one other for PCK0 (PLLA).
	 */
	pmc_enable_pllack(7, 0x1, 1); /* PLLA work at 96 Mhz */
  402928:	2007      	movs	r0, #7
  40292a:	2101      	movs	r1, #1
  40292c:	460a      	mov	r2, r1
  40292e:	4b84      	ldr	r3, [pc, #528]	; (402b40 <main+0x23c>)
  402930:	4798      	blx	r3
static void display_init(void)
{
	struct ili9325_opt_t ili9325_display_opt;

	/* Enable peripheral clock */
	pmc_enable_periph_clk( ID_SMC );
  402932:	200a      	movs	r0, #10
  402934:	4e83      	ldr	r6, [pc, #524]	; (402b44 <main+0x240>)
  402936:	47b0      	blx	r6

	/* Configure SMC interface for LCD */
	smc_set_setup_timing(SMC, ILI9325_LCD_CS, SMC_SETUP_NWE_SETUP(2)
  402938:	4c83      	ldr	r4, [pc, #524]	; (402b48 <main+0x244>)
  40293a:	4620      	mov	r0, r4
  40293c:	2102      	movs	r1, #2
  40293e:	f04f 3202 	mov.w	r2, #33686018	; 0x2020202
  402942:	f8df a2b0 	ldr.w	sl, [pc, #688]	; 402bf4 <main+0x2f0>
  402946:	47d0      	blx	sl
			| SMC_SETUP_NCS_WR_SETUP(2)
			| SMC_SETUP_NRD_SETUP(2)
			| SMC_SETUP_NCS_RD_SETUP(2));

	smc_set_pulse_timing(SMC, ILI9325_LCD_CS, SMC_PULSE_NWE_PULSE(4)
  402948:	4620      	mov	r0, r4
  40294a:	2102      	movs	r1, #2
  40294c:	4a7f      	ldr	r2, [pc, #508]	; (402b4c <main+0x248>)
  40294e:	f8df 92a8 	ldr.w	r9, [pc, #680]	; 402bf8 <main+0x2f4>
  402952:	47c8      	blx	r9
			| SMC_PULSE_NCS_WR_PULSE(4)
			| SMC_PULSE_NRD_PULSE(10)
			| SMC_PULSE_NCS_RD_PULSE(10));

	smc_set_cycle_timing(SMC, ILI9325_LCD_CS, SMC_CYCLE_NWE_CYCLE(10)
  402954:	4620      	mov	r0, r4
  402956:	2102      	movs	r1, #2
  402958:	4a7d      	ldr	r2, [pc, #500]	; (402b50 <main+0x24c>)
  40295a:	f8df 82a0 	ldr.w	r8, [pc, #672]	; 402bfc <main+0x2f8>
  40295e:	47c0      	blx	r8
			| SMC_CYCLE_NRD_CYCLE(22));

	smc_set_mode(SMC, ILI9325_LCD_CS, SMC_MODE_READ_MODE
  402960:	4620      	mov	r0, r4
  402962:	2102      	movs	r1, #2
  402964:	2203      	movs	r2, #3
  402966:	4f7b      	ldr	r7, [pc, #492]	; (402b54 <main+0x250>)
  402968:	47b8      	blx	r7
			| SMC_MODE_WRITE_MODE);

	/* Initialize display parameter */
	ili9325_display_opt.ul_width = ILI9325_LCD_WIDTH;
  40296a:	23f0      	movs	r3, #240	; 0xf0
  40296c:	9304      	str	r3, [sp, #16]
	ili9325_display_opt.ul_height = ILI9325_LCD_HEIGHT;
  40296e:	f44f 73a0 	mov.w	r3, #320	; 0x140
  402972:	9305      	str	r3, [sp, #20]
	ili9325_display_opt.foreground_color = COLOR_BLACK;
  402974:	2500      	movs	r5, #0
  402976:	9506      	str	r5, [sp, #24]
	ili9325_display_opt.background_color = COLOR_WHITE;
  402978:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
  40297c:	9307      	str	r3, [sp, #28]

	/* Switch off backlight */
	aat31xx_disable_backlight();
  40297e:	4b76      	ldr	r3, [pc, #472]	; (402b58 <main+0x254>)
  402980:	4798      	blx	r3

	/* Initialize LCD */
	ili9325_init(&ili9325_display_opt);
  402982:	a804      	add	r0, sp, #16
  402984:	4b75      	ldr	r3, [pc, #468]	; (402b5c <main+0x258>)
  402986:	4798      	blx	r3

	/* Set backlight level */
	aat31xx_set_backlight(AAT31XX_MAX_BACKLIGHT_LEVEL);
  402988:	2010      	movs	r0, #16
  40298a:	4b75      	ldr	r3, [pc, #468]	; (402b60 <main+0x25c>)
  40298c:	4798      	blx	r3

	/* Turn on LCD */
	ili9325_display_on();
  40298e:	4b75      	ldr	r3, [pc, #468]	; (402b64 <main+0x260>)
  402990:	4798      	blx	r3

	/* LCD display initialization */
	display_init();

	/* LCD display information */
	ili9325_fill(COLOR_TURQUOISE);
  402992:	4875      	ldr	r0, [pc, #468]	; (402b68 <main+0x264>)
  402994:	4b75      	ldr	r3, [pc, #468]	; (402b6c <main+0x268>)
  402996:	4798      	blx	r3
	ili9325_draw_string(0, 20,
  402998:	4628      	mov	r0, r5
  40299a:	2114      	movs	r1, #20
  40299c:	4a74      	ldr	r2, [pc, #464]	; (402b70 <main+0x26c>)
  40299e:	f8df b224 	ldr.w	fp, [pc, #548]	; 402bc4 <main+0x2c0>
  4029a2:	47d8      	blx	fp
			(uint8_t *)"OV7740 image sensor\ncapture example");
	ili9325_draw_string(0, 80,
  4029a4:	4628      	mov	r0, r5
  4029a6:	2150      	movs	r1, #80	; 0x50
  4029a8:	4a72      	ldr	r2, [pc, #456]	; (402b74 <main+0x270>)
  4029aa:	47d8      	blx	fp
 * \brief Configure SMC interface for SRAM.
 */
static void board_configure_sram( void )
{
	/* Enable peripheral clock */
	pmc_enable_periph_clk( ID_SMC );
  4029ac:	200a      	movs	r0, #10
  4029ae:	47b0      	blx	r6

	/* Configure SMC interface for SRAM */
	smc_set_setup_timing(SMC, SRAM_CS, SMC_SETUP_NWE_SETUP(2)
  4029b0:	4620      	mov	r0, r4
  4029b2:	4629      	mov	r1, r5
  4029b4:	4a70      	ldr	r2, [pc, #448]	; (402b78 <main+0x274>)
  4029b6:	47d0      	blx	sl
			| SMC_SETUP_NCS_WR_SETUP(0)
			| SMC_SETUP_NRD_SETUP(3)
			| SMC_SETUP_NCS_RD_SETUP(0));

	smc_set_pulse_timing(SMC, SRAM_CS, SMC_PULSE_NWE_PULSE(4)
  4029b8:	4620      	mov	r0, r4
  4029ba:	4629      	mov	r1, r5
  4029bc:	4a6f      	ldr	r2, [pc, #444]	; (402b7c <main+0x278>)
  4029be:	47c8      	blx	r9
			| SMC_PULSE_NCS_WR_PULSE(5)
			| SMC_PULSE_NRD_PULSE(4)
			| SMC_PULSE_NCS_RD_PULSE(6));

	smc_set_cycle_timing(SMC, SRAM_CS, SMC_CYCLE_NWE_CYCLE(6)
  4029c0:	4620      	mov	r0, r4
  4029c2:	4629      	mov	r1, r5
  4029c4:	4a6e      	ldr	r2, [pc, #440]	; (402b80 <main+0x27c>)
  4029c6:	47c0      	blx	r8
			| SMC_CYCLE_NRD_CYCLE(7));

	smc_set_mode(SMC, SRAM_CS, SMC_MODE_READ_MODE
  4029c8:	4620      	mov	r0, r4
  4029ca:	4629      	mov	r1, r5
  4029cc:	2203      	movs	r2, #3
  4029ce:	47b8      	blx	r7
 * \brief Configure push button and initialize button_handler interrupt.
 */
static void configure_button(void)
{
	/* Configure PIO clock. */
	pmc_enable_periph_clk(PUSH_BUTTON_ID);
  4029d0:	200b      	movs	r0, #11
  4029d2:	47b0      	blx	r6

	/* Adjust PIO debounce filter using a 10 Hz filter. */
	pio_set_debounce_filter(PUSH_BUTTON_PIO, PUSH_BUTTON_PIN_MSK, 10);
  4029d4:	f504 6460 	add.w	r4, r4, #3584	; 0xe00
  4029d8:	4620      	mov	r0, r4
  4029da:	2104      	movs	r1, #4
  4029dc:	220a      	movs	r2, #10
  4029de:	4b69      	ldr	r3, [pc, #420]	; (402b84 <main+0x280>)
  4029e0:	4798      	blx	r3

	/* Initialize PIO interrupt handler, see PIO definition in conf_board.h
	**/
	pio_handler_set(PUSH_BUTTON_PIO, PUSH_BUTTON_ID, PUSH_BUTTON_PIN_MSK,
  4029e2:	4b69      	ldr	r3, [pc, #420]	; (402b88 <main+0x284>)
  4029e4:	9300      	str	r3, [sp, #0]
  4029e6:	4620      	mov	r0, r4
  4029e8:	210b      	movs	r1, #11
  4029ea:	2204      	movs	r2, #4
  4029ec:	2379      	movs	r3, #121	; 0x79
  4029ee:	f8df 8210 	ldr.w	r8, [pc, #528]	; 402c00 <main+0x2fc>
  4029f2:	47c0      	blx	r8
    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
/*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  4029f4:	4d65      	ldr	r5, [pc, #404]	; (402b8c <main+0x288>)
  4029f6:	f44f 6700 	mov.w	r7, #2048	; 0x800
  4029fa:	602f      	str	r7, [r5, #0]

	/* Enable PIO controller IRQs. */
	NVIC_EnableIRQ((IRQn_Type)PUSH_BUTTON_ID);

	/* Enable PIO interrupt lines. */
	pio_enable_interrupt(PUSH_BUTTON_PIO, PUSH_BUTTON_PIN_MSK);
  4029fc:	4620      	mov	r0, r4
  4029fe:	2104      	movs	r1, #4
  402a00:	4b63      	ldr	r3, [pc, #396]	; (402b90 <main+0x28c>)
  402a02:	4798      	blx	r3
 */
static void init_vsync_interrupts(void)
{
	/* Initialize PIO interrupt handler, see PIO definition in conf_board.h
	**/
	pio_handler_set(OV7740_VSYNC_PIO, OV7740_VSYNC_ID, OV7740_VSYNC_MASK,
  402a04:	4b63      	ldr	r3, [pc, #396]	; (402b94 <main+0x290>)
  402a06:	9300      	str	r3, [sp, #0]
  402a08:	4620      	mov	r0, r4
  402a0a:	210b      	movs	r1, #11
  402a0c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  402a10:	2301      	movs	r3, #1
  402a12:	47c0      	blx	r8
  402a14:	602f      	str	r7, [r5, #0]
 * \param ul_id Corresponding PIO ID.
 */
static void pio_capture_init(Pio *p_pio, uint32_t ul_id)
{
	/* Enable periphral clock */
	pmc_enable_periph_clk(ul_id);
  402a16:	200b      	movs	r0, #11
  402a18:	47b0      	blx	r6

	/* Disable pio capture */
	p_pio->PIO_PCMR &= ~((uint32_t)PIO_PCMR_PCEN);
  402a1a:	f8d4 3150 	ldr.w	r3, [r4, #336]	; 0x150
  402a1e:	f023 0301 	bic.w	r3, r3, #1
  402a22:	f8c4 3150 	str.w	r3, [r4, #336]	; 0x150

	/* Disable rxbuff interrupt */
	p_pio->PIO_PCIDR |= PIO_PCIDR_RXBUFF;
  402a26:	f8d4 3158 	ldr.w	r3, [r4, #344]	; 0x158
  402a2a:	f043 0308 	orr.w	r3, r3, #8
  402a2e:	f8c4 3158 	str.w	r3, [r4, #344]	; 0x158

	/* 32bit width*/
	p_pio->PIO_PCMR &= ~((uint32_t)PIO_PCMR_DSIZE_Msk);
  402a32:	f8d4 3150 	ldr.w	r3, [r4, #336]	; 0x150
  402a36:	f023 0330 	bic.w	r3, r3, #48	; 0x30
  402a3a:	f8c4 3150 	str.w	r3, [r4, #336]	; 0x150
	p_pio->PIO_PCMR |= PIO_PCMR_DSIZE_WORD;
  402a3e:	f8d4 3150 	ldr.w	r3, [r4, #336]	; 0x150
  402a42:	f043 0320 	orr.w	r3, r3, #32
  402a46:	f8c4 3150 	str.w	r3, [r4, #336]	; 0x150

	/* Only HSYNC and VSYNC enabled */
	p_pio->PIO_PCMR &= ~((uint32_t)PIO_PCMR_ALWYS);
  402a4a:	f8d4 3150 	ldr.w	r3, [r4, #336]	; 0x150
  402a4e:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  402a52:	f8c4 3150 	str.w	r3, [r4, #336]	; 0x150
	p_pio->PIO_PCMR &= ~((uint32_t)PIO_PCMR_HALFS);
  402a56:	f8d4 3150 	ldr.w	r3, [r4, #336]	; 0x150
  402a5a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
  402a5e:	f8c4 3150 	str.w	r3, [r4, #336]	; 0x150

	/* Init PIO capture*/
	pio_capture_init(OV_DATA_BUS_PIO, OV_DATA_BUS_ID);

	/* Turn on ov7740 image sensor using power pin */
	ov_power(true, OV_POWER_PIO, OV_POWER_MASK);
  402a62:	2001      	movs	r0, #1
  402a64:	494c      	ldr	r1, [pc, #304]	; (402b98 <main+0x294>)
  402a66:	f44f 6280 	mov.w	r2, #1024	; 0x400
  402a6a:	4b4c      	ldr	r3, [pc, #304]	; (402b9c <main+0x298>)
  402a6c:	4798      	blx	r3

	/* Init PCK0 to work at 24 Mhz */
	/* 96/4=24 Mhz */
	PMC->PMC_PCK[0] = (PMC_PCK_PRES_CLK_4 | PMC_PCK_CSS_PLLA_CLK);
  402a6e:	4b4c      	ldr	r3, [pc, #304]	; (402ba0 <main+0x29c>)
  402a70:	2222      	movs	r2, #34	; 0x22
  402a72:	641a      	str	r2, [r3, #64]	; 0x40
	PMC->PMC_SCER = PMC_SCER_PCK0;
  402a74:	f44f 7280 	mov.w	r2, #256	; 0x100
  402a78:	601a      	str	r2, [r3, #0]
	while (!(PMC->PMC_SCSR & PMC_SCSR_PCK0)) {
  402a7a:	461a      	mov	r2, r3
  402a7c:	6893      	ldr	r3, [r2, #8]
  402a7e:	f413 7f80 	tst.w	r3, #256	; 0x100
  402a82:	d0fb      	beq.n	402a7c <main+0x178>
	}

	/* Enable TWI peripheral */
	pmc_enable_periph_clk(ID_BOARD_TWI);
  402a84:	2013      	movs	r0, #19
  402a86:	4b2f      	ldr	r3, [pc, #188]	; (402b44 <main+0x240>)
  402a88:	4798      	blx	r3

	/* Init TWI peripheral */
	opt.master_clk = sysclk_get_cpu_hz();
  402a8a:	4b46      	ldr	r3, [pc, #280]	; (402ba4 <main+0x2a0>)
  402a8c:	9304      	str	r3, [sp, #16]
	opt.speed      = TWI_CLK;
  402a8e:	4b46      	ldr	r3, [pc, #280]	; (402ba8 <main+0x2a4>)
  402a90:	9305      	str	r3, [sp, #20]
	twi_master_init(BOARD_TWI, &opt);
  402a92:	4846      	ldr	r0, [pc, #280]	; (402bac <main+0x2a8>)
  402a94:	a904      	add	r1, sp, #16
  402a96:	4b46      	ldr	r3, [pc, #280]	; (402bb0 <main+0x2ac>)
  402a98:	4798      	blx	r3

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
  402a9a:	4b3c      	ldr	r3, [pc, #240]	; (402b8c <main+0x288>)
  402a9c:	f44f 2200 	mov.w	r2, #524288	; 0x80000
  402aa0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
  402aa4:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
  402aa8:	2100      	movs	r1, #0
  402aaa:	f883 1313 	strb.w	r1, [r3, #787]	; 0x313
    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
/*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  402aae:	601a      	str	r2, [r3, #0]
	NVIC_ClearPendingIRQ(BOARD_TWI_IRQn);
	NVIC_SetPriority(BOARD_TWI_IRQn, 0);
	NVIC_EnableIRQ(BOARD_TWI_IRQn);

	/* ov7740 Initialization */
	while (ov_init(BOARD_TWI) == 1) {
  402ab0:	4d3e      	ldr	r5, [pc, #248]	; (402bac <main+0x2a8>)
  402ab2:	4c40      	ldr	r4, [pc, #256]	; (402bb4 <main+0x2b0>)
  402ab4:	4628      	mov	r0, r5
  402ab6:	47a0      	blx	r4
  402ab8:	2801      	cmp	r0, #1
  402aba:	d0fb      	beq.n	402ab4 <main+0x1b0>
	}

	/* ov7740 configuration */
	ov_configure(BOARD_TWI, QVGA_YUV422_20FPS);
  402abc:	483b      	ldr	r0, [pc, #236]	; (402bac <main+0x2a8>)
  402abe:	2102      	movs	r1, #2
  402ac0:	4b3d      	ldr	r3, [pc, #244]	; (402bb8 <main+0x2b4>)
  402ac2:	4798      	blx	r3

	/* Wait 3 seconds to let the image sensor to adapt to environment */
	delay_ms(3000);
  402ac4:	483d      	ldr	r0, [pc, #244]	; (402bbc <main+0x2b8>)
  402ac6:	4c3e      	ldr	r4, [pc, #248]	; (402bc0 <main+0x2bc>)
  402ac8:	47a0      	blx	r4

	/* OV7740 image sensor initialization*/
	capture_init();

	/* LCD display information*/
	ili9325_fill(COLOR_TURQUOISE);
  402aca:	4827      	ldr	r0, [pc, #156]	; (402b68 <main+0x264>)
  402acc:	4b27      	ldr	r3, [pc, #156]	; (402b6c <main+0x268>)
  402ace:	4798      	blx	r3
	ili9325_draw_string(0, 20,
  402ad0:	2000      	movs	r0, #0
  402ad2:	2114      	movs	r1, #20
  402ad4:	4a26      	ldr	r2, [pc, #152]	; (402b70 <main+0x26c>)
  402ad6:	4d3b      	ldr	r5, [pc, #236]	; (402bc4 <main+0x2c0>)
  402ad8:	47a8      	blx	r5
			(uint8_t *)"OV7740 image sensor\ncapture example");
	ili9325_draw_string(0, 80,
  402ada:	2000      	movs	r0, #0
  402adc:	2150      	movs	r1, #80	; 0x50
  402ade:	4a3a      	ldr	r2, [pc, #232]	; (402bc8 <main+0x2c4>)
  402ae0:	47a8      	blx	r5
			(uint8_t *)"Please Press button\nto take and display\na picture");

	LED_On(LED0_GPIO);
  402ae2:	204c      	movs	r0, #76	; 0x4c
  402ae4:	4d39      	ldr	r5, [pc, #228]	; (402bcc <main+0x2c8>)
  402ae6:	47a8      	blx	r5
	delay_ms(2000);
  402ae8:	4839      	ldr	r0, [pc, #228]	; (402bd0 <main+0x2cc>)
  402aea:	47a0      	blx	r4
	LED_Off(LED0_GPIO);
  402aec:	204c      	movs	r0, #76	; 0x4c
  402aee:	4b39      	ldr	r3, [pc, #228]	; (402bd4 <main+0x2d0>)
  402af0:	4798      	blx	r3
	delay_ms(1000);
  402af2:	4839      	ldr	r0, [pc, #228]	; (402bd8 <main+0x2d4>)
  402af4:	47a0      	blx	r4
	LED_On(LED0_GPIO);
  402af6:	204c      	movs	r0, #76	; 0x4c
  402af8:	47a8      	blx	r5

		_display();
	}*/

	/* Create task to make led blink */
	if (xTaskCreate(task_led, "Led", TASK_LED_STACK_SIZE, NULL,
  402afa:	2400      	movs	r4, #0
  402afc:	9400      	str	r4, [sp, #0]
  402afe:	9401      	str	r4, [sp, #4]
  402b00:	9402      	str	r4, [sp, #8]
  402b02:	9403      	str	r4, [sp, #12]
  402b04:	4835      	ldr	r0, [pc, #212]	; (402bdc <main+0x2d8>)
  402b06:	4936      	ldr	r1, [pc, #216]	; (402be0 <main+0x2dc>)
  402b08:	f44f 7280 	mov.w	r2, #256	; 0x100
  402b0c:	4623      	mov	r3, r4
  402b0e:	4d35      	ldr	r5, [pc, #212]	; (402be4 <main+0x2e0>)
  402b10:	47a8      	blx	r5
	TASK_LED_STACK_PRIORITY, NULL) != pdPASS) {
		//printf("Failed to create test led task\r\n");
	}

	/* Create task to make led blink */
	if (xTaskCreate(task_lcdscreen, "LCD", TASK_LED_STACK_SIZE, NULL,
  402b12:	9400      	str	r4, [sp, #0]
  402b14:	9401      	str	r4, [sp, #4]
  402b16:	9402      	str	r4, [sp, #8]
  402b18:	9403      	str	r4, [sp, #12]
  402b1a:	4833      	ldr	r0, [pc, #204]	; (402be8 <main+0x2e4>)
  402b1c:	4933      	ldr	r1, [pc, #204]	; (402bec <main+0x2e8>)
  402b1e:	f44f 7280 	mov.w	r2, #256	; 0x100
  402b22:	4623      	mov	r3, r4
  402b24:	47a8      	blx	r5
	TASK_LED_STACK_PRIORITY, NULL) != pdPASS) {
		//printf("Failed to create test led task\r\n");
	}

	vTaskStartScheduler();
  402b26:	4b32      	ldr	r3, [pc, #200]	; (402bf0 <main+0x2ec>)
  402b28:	4798      	blx	r3
	/* Will only get here if there was insufficient memory to create the idle task. */
	return 0;	
	
	
}
  402b2a:	4620      	mov	r0, r4
  402b2c:	b009      	add	sp, #36	; 0x24
  402b2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  402b32:	bf00      	nop
  402b34:	004016a9 	.word	0x004016a9
  402b38:	e000ed00 	.word	0xe000ed00
  402b3c:	0040170d 	.word	0x0040170d
  402b40:	004023a1 	.word	0x004023a1
  402b44:	004023f9 	.word	0x004023f9
  402b48:	400e0000 	.word	0x400e0000
  402b4c:	0a0a0404 	.word	0x0a0a0404
  402b50:	0016000a 	.word	0x0016000a
  402b54:	00401f25 	.word	0x00401f25
  402b58:	00401b3d 	.word	0x00401b3d
  402b5c:	00401c4d 	.word	0x00401c4d
  402b60:	00401ae1 	.word	0x00401ae1
  402b64:	00401bc9 	.word	0x00401bc9
  402b68:	0040e0d0 	.word	0x0040e0d0
  402b6c:	00401df1 	.word	0x00401df1
  402b70:	00403fb8 	.word	0x00403fb8
  402b74:	00403fdc 	.word	0x00403fdc
  402b78:	00030002 	.word	0x00030002
  402b7c:	06040504 	.word	0x06040504
  402b80:	00070006 	.word	0x00070006
  402b84:	00401f2d 	.word	0x00401f2d
  402b88:	00402899 	.word	0x00402899
  402b8c:	e000e100 	.word	0xe000e100
  402b90:	00402071 	.word	0x00402071
  402b94:	0040288d 	.word	0x0040288d
  402b98:	400e1200 	.word	0x400e1200
  402b9c:	004018c5 	.word	0x004018c5
  402ba0:	400e0400 	.word	0x400e0400
  402ba4:	07270e00 	.word	0x07270e00
  402ba8:	00061a80 	.word	0x00061a80
  402bac:	40018000 	.word	0x40018000
  402bb0:	00402491 	.word	0x00402491
  402bb4:	0040195d 	.word	0x0040195d
  402bb8:	00401a75 	.word	0x00401a75
  402bbc:	01885e6e 	.word	0x01885e6e
  402bc0:	20000001 	.word	0x20000001
  402bc4:	00401e61 	.word	0x00401e61
  402bc8:	00404000 	.word	0x00404000
  402bcc:	00402099 	.word	0x00402099
  402bd0:	0105944a 	.word	0x0105944a
  402bd4:	00402081 	.word	0x00402081
  402bd8:	0082ca25 	.word	0x0082ca25
  402bdc:	004028e5 	.word	0x004028e5
  402be0:	00404034 	.word	0x00404034
  402be4:	00400a31 	.word	0x00400a31
  402be8:	004028a5 	.word	0x004028a5
  402bec:	00404038 	.word	0x00404038
  402bf0:	00400c35 	.word	0x00400c35
  402bf4:	00401f0d 	.word	0x00401f0d
  402bf8:	00401f15 	.word	0x00401f15
  402bfc:	00401f1d 	.word	0x00401f1d
  402c00:	0040225d 	.word	0x0040225d

00402c04 <__libc_init_array>:
  402c04:	b570      	push	{r4, r5, r6, lr}
  402c06:	4e0f      	ldr	r6, [pc, #60]	; (402c44 <__libc_init_array+0x40>)
  402c08:	4d0f      	ldr	r5, [pc, #60]	; (402c48 <__libc_init_array+0x44>)
  402c0a:	1b76      	subs	r6, r6, r5
  402c0c:	10b6      	asrs	r6, r6, #2
  402c0e:	bf18      	it	ne
  402c10:	2400      	movne	r4, #0
  402c12:	d005      	beq.n	402c20 <__libc_init_array+0x1c>
  402c14:	3401      	adds	r4, #1
  402c16:	f855 3b04 	ldr.w	r3, [r5], #4
  402c1a:	4798      	blx	r3
  402c1c:	42a6      	cmp	r6, r4
  402c1e:	d1f9      	bne.n	402c14 <__libc_init_array+0x10>
  402c20:	4e0a      	ldr	r6, [pc, #40]	; (402c4c <__libc_init_array+0x48>)
  402c22:	4d0b      	ldr	r5, [pc, #44]	; (402c50 <__libc_init_array+0x4c>)
  402c24:	1b76      	subs	r6, r6, r5
  402c26:	f001 fa0d 	bl	404044 <_init>
  402c2a:	10b6      	asrs	r6, r6, #2
  402c2c:	bf18      	it	ne
  402c2e:	2400      	movne	r4, #0
  402c30:	d006      	beq.n	402c40 <__libc_init_array+0x3c>
  402c32:	3401      	adds	r4, #1
  402c34:	f855 3b04 	ldr.w	r3, [r5], #4
  402c38:	4798      	blx	r3
  402c3a:	42a6      	cmp	r6, r4
  402c3c:	d1f9      	bne.n	402c32 <__libc_init_array+0x2e>
  402c3e:	bd70      	pop	{r4, r5, r6, pc}
  402c40:	bd70      	pop	{r4, r5, r6, pc}
  402c42:	bf00      	nop
  402c44:	00404050 	.word	0x00404050
  402c48:	00404050 	.word	0x00404050
  402c4c:	00404058 	.word	0x00404058
  402c50:	00404050 	.word	0x00404050

00402c54 <memcpy>:
  402c54:	4684      	mov	ip, r0
  402c56:	ea41 0300 	orr.w	r3, r1, r0
  402c5a:	f013 0303 	ands.w	r3, r3, #3
  402c5e:	d16d      	bne.n	402d3c <memcpy+0xe8>
  402c60:	3a40      	subs	r2, #64	; 0x40
  402c62:	d341      	bcc.n	402ce8 <memcpy+0x94>
  402c64:	f851 3b04 	ldr.w	r3, [r1], #4
  402c68:	f840 3b04 	str.w	r3, [r0], #4
  402c6c:	f851 3b04 	ldr.w	r3, [r1], #4
  402c70:	f840 3b04 	str.w	r3, [r0], #4
  402c74:	f851 3b04 	ldr.w	r3, [r1], #4
  402c78:	f840 3b04 	str.w	r3, [r0], #4
  402c7c:	f851 3b04 	ldr.w	r3, [r1], #4
  402c80:	f840 3b04 	str.w	r3, [r0], #4
  402c84:	f851 3b04 	ldr.w	r3, [r1], #4
  402c88:	f840 3b04 	str.w	r3, [r0], #4
  402c8c:	f851 3b04 	ldr.w	r3, [r1], #4
  402c90:	f840 3b04 	str.w	r3, [r0], #4
  402c94:	f851 3b04 	ldr.w	r3, [r1], #4
  402c98:	f840 3b04 	str.w	r3, [r0], #4
  402c9c:	f851 3b04 	ldr.w	r3, [r1], #4
  402ca0:	f840 3b04 	str.w	r3, [r0], #4
  402ca4:	f851 3b04 	ldr.w	r3, [r1], #4
  402ca8:	f840 3b04 	str.w	r3, [r0], #4
  402cac:	f851 3b04 	ldr.w	r3, [r1], #4
  402cb0:	f840 3b04 	str.w	r3, [r0], #4
  402cb4:	f851 3b04 	ldr.w	r3, [r1], #4
  402cb8:	f840 3b04 	str.w	r3, [r0], #4
  402cbc:	f851 3b04 	ldr.w	r3, [r1], #4
  402cc0:	f840 3b04 	str.w	r3, [r0], #4
  402cc4:	f851 3b04 	ldr.w	r3, [r1], #4
  402cc8:	f840 3b04 	str.w	r3, [r0], #4
  402ccc:	f851 3b04 	ldr.w	r3, [r1], #4
  402cd0:	f840 3b04 	str.w	r3, [r0], #4
  402cd4:	f851 3b04 	ldr.w	r3, [r1], #4
  402cd8:	f840 3b04 	str.w	r3, [r0], #4
  402cdc:	f851 3b04 	ldr.w	r3, [r1], #4
  402ce0:	f840 3b04 	str.w	r3, [r0], #4
  402ce4:	3a40      	subs	r2, #64	; 0x40
  402ce6:	d2bd      	bcs.n	402c64 <memcpy+0x10>
  402ce8:	3230      	adds	r2, #48	; 0x30
  402cea:	d311      	bcc.n	402d10 <memcpy+0xbc>
  402cec:	f851 3b04 	ldr.w	r3, [r1], #4
  402cf0:	f840 3b04 	str.w	r3, [r0], #4
  402cf4:	f851 3b04 	ldr.w	r3, [r1], #4
  402cf8:	f840 3b04 	str.w	r3, [r0], #4
  402cfc:	f851 3b04 	ldr.w	r3, [r1], #4
  402d00:	f840 3b04 	str.w	r3, [r0], #4
  402d04:	f851 3b04 	ldr.w	r3, [r1], #4
  402d08:	f840 3b04 	str.w	r3, [r0], #4
  402d0c:	3a10      	subs	r2, #16
  402d0e:	d2ed      	bcs.n	402cec <memcpy+0x98>
  402d10:	320c      	adds	r2, #12
  402d12:	d305      	bcc.n	402d20 <memcpy+0xcc>
  402d14:	f851 3b04 	ldr.w	r3, [r1], #4
  402d18:	f840 3b04 	str.w	r3, [r0], #4
  402d1c:	3a04      	subs	r2, #4
  402d1e:	d2f9      	bcs.n	402d14 <memcpy+0xc0>
  402d20:	3204      	adds	r2, #4
  402d22:	d008      	beq.n	402d36 <memcpy+0xe2>
  402d24:	07d2      	lsls	r2, r2, #31
  402d26:	bf1c      	itt	ne
  402d28:	f811 3b01 	ldrbne.w	r3, [r1], #1
  402d2c:	f800 3b01 	strbne.w	r3, [r0], #1
  402d30:	d301      	bcc.n	402d36 <memcpy+0xe2>
  402d32:	880b      	ldrh	r3, [r1, #0]
  402d34:	8003      	strh	r3, [r0, #0]
  402d36:	4660      	mov	r0, ip
  402d38:	4770      	bx	lr
  402d3a:	bf00      	nop
  402d3c:	2a08      	cmp	r2, #8
  402d3e:	d313      	bcc.n	402d68 <memcpy+0x114>
  402d40:	078b      	lsls	r3, r1, #30
  402d42:	d08d      	beq.n	402c60 <memcpy+0xc>
  402d44:	f010 0303 	ands.w	r3, r0, #3
  402d48:	d08a      	beq.n	402c60 <memcpy+0xc>
  402d4a:	f1c3 0304 	rsb	r3, r3, #4
  402d4e:	1ad2      	subs	r2, r2, r3
  402d50:	07db      	lsls	r3, r3, #31
  402d52:	bf1c      	itt	ne
  402d54:	f811 3b01 	ldrbne.w	r3, [r1], #1
  402d58:	f800 3b01 	strbne.w	r3, [r0], #1
  402d5c:	d380      	bcc.n	402c60 <memcpy+0xc>
  402d5e:	f831 3b02 	ldrh.w	r3, [r1], #2
  402d62:	f820 3b02 	strh.w	r3, [r0], #2
  402d66:	e77b      	b.n	402c60 <memcpy+0xc>
  402d68:	3a04      	subs	r2, #4
  402d6a:	d3d9      	bcc.n	402d20 <memcpy+0xcc>
  402d6c:	3a01      	subs	r2, #1
  402d6e:	f811 3b01 	ldrb.w	r3, [r1], #1
  402d72:	f800 3b01 	strb.w	r3, [r0], #1
  402d76:	d2f9      	bcs.n	402d6c <memcpy+0x118>
  402d78:	780b      	ldrb	r3, [r1, #0]
  402d7a:	7003      	strb	r3, [r0, #0]
  402d7c:	784b      	ldrb	r3, [r1, #1]
  402d7e:	7043      	strb	r3, [r0, #1]
  402d80:	788b      	ldrb	r3, [r1, #2]
  402d82:	7083      	strb	r3, [r0, #2]
  402d84:	4660      	mov	r0, ip
  402d86:	4770      	bx	lr

00402d88 <memset>:
  402d88:	b470      	push	{r4, r5, r6}
  402d8a:	0784      	lsls	r4, r0, #30
  402d8c:	d046      	beq.n	402e1c <memset+0x94>
  402d8e:	1e54      	subs	r4, r2, #1
  402d90:	2a00      	cmp	r2, #0
  402d92:	d041      	beq.n	402e18 <memset+0x90>
  402d94:	b2cd      	uxtb	r5, r1
  402d96:	4603      	mov	r3, r0
  402d98:	e002      	b.n	402da0 <memset+0x18>
  402d9a:	1e62      	subs	r2, r4, #1
  402d9c:	b3e4      	cbz	r4, 402e18 <memset+0x90>
  402d9e:	4614      	mov	r4, r2
  402da0:	f803 5b01 	strb.w	r5, [r3], #1
  402da4:	079a      	lsls	r2, r3, #30
  402da6:	d1f8      	bne.n	402d9a <memset+0x12>
  402da8:	2c03      	cmp	r4, #3
  402daa:	d92e      	bls.n	402e0a <memset+0x82>
  402dac:	b2cd      	uxtb	r5, r1
  402dae:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
  402db2:	2c0f      	cmp	r4, #15
  402db4:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
  402db8:	d919      	bls.n	402dee <memset+0x66>
  402dba:	f103 0210 	add.w	r2, r3, #16
  402dbe:	4626      	mov	r6, r4
  402dc0:	3e10      	subs	r6, #16
  402dc2:	2e0f      	cmp	r6, #15
  402dc4:	f842 5c10 	str.w	r5, [r2, #-16]
  402dc8:	f842 5c0c 	str.w	r5, [r2, #-12]
  402dcc:	f842 5c08 	str.w	r5, [r2, #-8]
  402dd0:	f842 5c04 	str.w	r5, [r2, #-4]
  402dd4:	f102 0210 	add.w	r2, r2, #16
  402dd8:	d8f2      	bhi.n	402dc0 <memset+0x38>
  402dda:	f1a4 0210 	sub.w	r2, r4, #16
  402dde:	f022 020f 	bic.w	r2, r2, #15
  402de2:	f004 040f 	and.w	r4, r4, #15
  402de6:	3210      	adds	r2, #16
  402de8:	2c03      	cmp	r4, #3
  402dea:	4413      	add	r3, r2
  402dec:	d90d      	bls.n	402e0a <memset+0x82>
  402dee:	461e      	mov	r6, r3
  402df0:	4622      	mov	r2, r4
  402df2:	3a04      	subs	r2, #4
  402df4:	2a03      	cmp	r2, #3
  402df6:	f846 5b04 	str.w	r5, [r6], #4
  402dfa:	d8fa      	bhi.n	402df2 <memset+0x6a>
  402dfc:	1f22      	subs	r2, r4, #4
  402dfe:	f022 0203 	bic.w	r2, r2, #3
  402e02:	3204      	adds	r2, #4
  402e04:	4413      	add	r3, r2
  402e06:	f004 0403 	and.w	r4, r4, #3
  402e0a:	b12c      	cbz	r4, 402e18 <memset+0x90>
  402e0c:	b2c9      	uxtb	r1, r1
  402e0e:	441c      	add	r4, r3
  402e10:	f803 1b01 	strb.w	r1, [r3], #1
  402e14:	42a3      	cmp	r3, r4
  402e16:	d1fb      	bne.n	402e10 <memset+0x88>
  402e18:	bc70      	pop	{r4, r5, r6}
  402e1a:	4770      	bx	lr
  402e1c:	4614      	mov	r4, r2
  402e1e:	4603      	mov	r3, r0
  402e20:	e7c2      	b.n	402da8 <memset+0x20>
  402e22:	bf00      	nop

00402e24 <strncpy>:
  402e24:	ea40 0301 	orr.w	r3, r0, r1
  402e28:	079b      	lsls	r3, r3, #30
  402e2a:	b470      	push	{r4, r5, r6}
  402e2c:	d12b      	bne.n	402e86 <strncpy+0x62>
  402e2e:	2a03      	cmp	r2, #3
  402e30:	d929      	bls.n	402e86 <strncpy+0x62>
  402e32:	460c      	mov	r4, r1
  402e34:	4603      	mov	r3, r0
  402e36:	4621      	mov	r1, r4
  402e38:	f854 6b04 	ldr.w	r6, [r4], #4
  402e3c:	f1a6 3501 	sub.w	r5, r6, #16843009	; 0x1010101
  402e40:	ea25 0506 	bic.w	r5, r5, r6
  402e44:	f015 3f80 	tst.w	r5, #2155905152	; 0x80808080
  402e48:	d105      	bne.n	402e56 <strncpy+0x32>
  402e4a:	3a04      	subs	r2, #4
  402e4c:	2a03      	cmp	r2, #3
  402e4e:	f843 6b04 	str.w	r6, [r3], #4
  402e52:	4621      	mov	r1, r4
  402e54:	d8ef      	bhi.n	402e36 <strncpy+0x12>
  402e56:	b1a2      	cbz	r2, 402e82 <strncpy+0x5e>
  402e58:	780c      	ldrb	r4, [r1, #0]
  402e5a:	701c      	strb	r4, [r3, #0]
  402e5c:	3a01      	subs	r2, #1
  402e5e:	3301      	adds	r3, #1
  402e60:	3101      	adds	r1, #1
  402e62:	b13c      	cbz	r4, 402e74 <strncpy+0x50>
  402e64:	b16a      	cbz	r2, 402e82 <strncpy+0x5e>
  402e66:	f811 4b01 	ldrb.w	r4, [r1], #1
  402e6a:	f803 4b01 	strb.w	r4, [r3], #1
  402e6e:	3a01      	subs	r2, #1
  402e70:	2c00      	cmp	r4, #0
  402e72:	d1f7      	bne.n	402e64 <strncpy+0x40>
  402e74:	b12a      	cbz	r2, 402e82 <strncpy+0x5e>
  402e76:	441a      	add	r2, r3
  402e78:	2100      	movs	r1, #0
  402e7a:	f803 1b01 	strb.w	r1, [r3], #1
  402e7e:	4293      	cmp	r3, r2
  402e80:	d1fb      	bne.n	402e7a <strncpy+0x56>
  402e82:	bc70      	pop	{r4, r5, r6}
  402e84:	4770      	bx	lr
  402e86:	4603      	mov	r3, r0
  402e88:	e7e5      	b.n	402e56 <strncpy+0x32>
  402e8a:	bf00      	nop

00402e8c <register_fini>:
  402e8c:	4b02      	ldr	r3, [pc, #8]	; (402e98 <register_fini+0xc>)
  402e8e:	b113      	cbz	r3, 402e96 <register_fini+0xa>
  402e90:	4802      	ldr	r0, [pc, #8]	; (402e9c <register_fini+0x10>)
  402e92:	f000 b805 	b.w	402ea0 <atexit>
  402e96:	4770      	bx	lr
  402e98:	00000000 	.word	0x00000000
  402e9c:	00402ead 	.word	0x00402ead

00402ea0 <atexit>:
  402ea0:	4601      	mov	r1, r0
  402ea2:	2000      	movs	r0, #0
  402ea4:	4602      	mov	r2, r0
  402ea6:	4603      	mov	r3, r0
  402ea8:	f000 b816 	b.w	402ed8 <__register_exitproc>

00402eac <__libc_fini_array>:
  402eac:	b538      	push	{r3, r4, r5, lr}
  402eae:	4b08      	ldr	r3, [pc, #32]	; (402ed0 <__libc_fini_array+0x24>)
  402eb0:	4d08      	ldr	r5, [pc, #32]	; (402ed4 <__libc_fini_array+0x28>)
  402eb2:	1aed      	subs	r5, r5, r3
  402eb4:	10ac      	asrs	r4, r5, #2
  402eb6:	bf18      	it	ne
  402eb8:	18ed      	addne	r5, r5, r3
  402eba:	d005      	beq.n	402ec8 <__libc_fini_array+0x1c>
  402ebc:	3c01      	subs	r4, #1
  402ebe:	f855 3d04 	ldr.w	r3, [r5, #-4]!
  402ec2:	4798      	blx	r3
  402ec4:	2c00      	cmp	r4, #0
  402ec6:	d1f9      	bne.n	402ebc <__libc_fini_array+0x10>
  402ec8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  402ecc:	f001 b8c4 	b.w	404058 <_fini>
  402ed0:	00404064 	.word	0x00404064
  402ed4:	00404068 	.word	0x00404068

00402ed8 <__register_exitproc>:
  402ed8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  402edc:	4c25      	ldr	r4, [pc, #148]	; (402f74 <__register_exitproc+0x9c>)
  402ede:	6825      	ldr	r5, [r4, #0]
  402ee0:	f8d5 4148 	ldr.w	r4, [r5, #328]	; 0x148
  402ee4:	4606      	mov	r6, r0
  402ee6:	4688      	mov	r8, r1
  402ee8:	4692      	mov	sl, r2
  402eea:	4699      	mov	r9, r3
  402eec:	b3cc      	cbz	r4, 402f62 <__register_exitproc+0x8a>
  402eee:	6860      	ldr	r0, [r4, #4]
  402ef0:	281f      	cmp	r0, #31
  402ef2:	dc18      	bgt.n	402f26 <__register_exitproc+0x4e>
  402ef4:	1c43      	adds	r3, r0, #1
  402ef6:	b17e      	cbz	r6, 402f18 <__register_exitproc+0x40>
  402ef8:	eb04 0580 	add.w	r5, r4, r0, lsl #2
  402efc:	2101      	movs	r1, #1
  402efe:	f8c5 a088 	str.w	sl, [r5, #136]	; 0x88
  402f02:	f8d4 7188 	ldr.w	r7, [r4, #392]	; 0x188
  402f06:	fa01 f200 	lsl.w	r2, r1, r0
  402f0a:	4317      	orrs	r7, r2
  402f0c:	2e02      	cmp	r6, #2
  402f0e:	f8c4 7188 	str.w	r7, [r4, #392]	; 0x188
  402f12:	f8c5 9108 	str.w	r9, [r5, #264]	; 0x108
  402f16:	d01e      	beq.n	402f56 <__register_exitproc+0x7e>
  402f18:	3002      	adds	r0, #2
  402f1a:	6063      	str	r3, [r4, #4]
  402f1c:	f844 8020 	str.w	r8, [r4, r0, lsl #2]
  402f20:	2000      	movs	r0, #0
  402f22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  402f26:	4b14      	ldr	r3, [pc, #80]	; (402f78 <__register_exitproc+0xa0>)
  402f28:	b303      	cbz	r3, 402f6c <__register_exitproc+0x94>
  402f2a:	f44f 70c8 	mov.w	r0, #400	; 0x190
  402f2e:	f3af 8000 	nop.w
  402f32:	4604      	mov	r4, r0
  402f34:	b1d0      	cbz	r0, 402f6c <__register_exitproc+0x94>
  402f36:	f8d5 3148 	ldr.w	r3, [r5, #328]	; 0x148
  402f3a:	2700      	movs	r7, #0
  402f3c:	e880 0088 	stmia.w	r0, {r3, r7}
  402f40:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
  402f44:	4638      	mov	r0, r7
  402f46:	2301      	movs	r3, #1
  402f48:	f8c4 7188 	str.w	r7, [r4, #392]	; 0x188
  402f4c:	f8c4 718c 	str.w	r7, [r4, #396]	; 0x18c
  402f50:	2e00      	cmp	r6, #0
  402f52:	d0e1      	beq.n	402f18 <__register_exitproc+0x40>
  402f54:	e7d0      	b.n	402ef8 <__register_exitproc+0x20>
  402f56:	f8d4 118c 	ldr.w	r1, [r4, #396]	; 0x18c
  402f5a:	430a      	orrs	r2, r1
  402f5c:	f8c4 218c 	str.w	r2, [r4, #396]	; 0x18c
  402f60:	e7da      	b.n	402f18 <__register_exitproc+0x40>
  402f62:	f505 74a6 	add.w	r4, r5, #332	; 0x14c
  402f66:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
  402f6a:	e7c0      	b.n	402eee <__register_exitproc+0x16>
  402f6c:	f04f 30ff 	mov.w	r0, #4294967295
  402f70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  402f74:	00404040 	.word	0x00404040
  402f78:	00000000 	.word	0x00000000
  402f7c:	09097325 	.word	0x09097325
  402f80:	25096325 	.word	0x25096325
  402f84:	75250975 	.word	0x75250975
  402f88:	0d752509 	.word	0x0d752509
  402f8c:	0000000a 	.word	0x0000000a
  402f90:	454c4449 	.word	0x454c4449
  402f94:	00000000 	.word	0x00000000
  402f98:	00000a0d 	.word	0x00000a0d
  402f9c:	20726d54 	.word	0x20726d54
  402fa0:	00637653 	.word	0x00637653

00402fa4 <OV7740_VGA_YUV422_20FPS>:
  402fa4:	8012000e 001305fe 00120211 d40c10d5     ................
  402fb4:	0116340d a0182517 f01a0319 0322891b     .4...%........".
  402fc4:	f82b1829 a031012c c433f032 3f36b43a     ).+.,.1.2.3.:.6?
  402fd4:	80276004 803e0f3d 7f40403f 29426a41     .`'.=.>.?@@.AjB)
  402fe4:	4145e544 64490247 704ba14a 504d1a4c     D.EAG.IdJ.KpL.MP
  402ff4:	0064134e 1a688867 3c243814 72263025     N.d.g.h..8$<%0&r
  403004:	7e519750 00530052 23210020 00e91438     P.Q~R.S. .!#8...
  403014:	ff575556 ff59ff58 00ec045f 7f80ff13     VUW.X.Y._.......
  403024:	32823f81 11380183 03860085 05880187     .?.2..8.........
  403034:	308d3089 3093858f 30998595 089c859b     .0.0...0...0....
  403044:	239e129d 55a0459f 72a264a1 8ba47fa3     ...#.E.U.d.r....
  403054:	a7a695a5 cba8b5a7 ecaadda9 78ce1aab     ...............x
  403064:	0ad06ecf 84d20cd1 1ed490d3 1f5b245a     .n..........Z$[.
  403074:	605d885c ffbe6eac a03100bf 3f82f032     \.]`.n....1.2..?
  403084:	3f360012 c4330053 0322891b ffff0228     ..6?S.3...".(...

00403094 <OV7740_QQVGA_RGB888>:
  403094:	8012000e 01110013 10d50012 340d120c     ...............4
  4030a4:	a0182517 f01a0319 0322891b f82b1829     .%........".).+.
  4030b4:	a031012c c433f032 3f36b43a 80276004     ,.1.2.3.:.6?.`'.
  4030c4:	803e0f3d 7f40403f 29426a41 4145e544     =.>.?@@.AjB)D.EA
  4030d4:	64490247 704ba14a 504d1a4c 0064134e     G.IdJ.KpL.MPN.d.
  4030e4:	1a688867 3c243814 72263025 7e519750     g.h..8$<%0&rP.Q~
  4030f4:	00530052 23210020 00e91438 ff575556     R.S. .!#8...VUW.
  403104:	ff59ff58 00ec045f 7f80ff13 32823f81     X.Y._........?.2
  403114:	11380183 00857084 01870386 30890588     ..8..p.........0
  403124:	858f308d 85953093 859b3099 129d089c     .0...0...0......
  403134:	459f239e 64a155a0 7fa372a2 95a58ba4     .#.E.U.d.r......
  403144:	b5a7a7a6 dda9cba8 1aabecaa 6ecf78ce     .............x.n
  403154:	0cd10ad0 90d384d2 245a1ed4 885c1f5b     ..........Z$[.\.
  403164:	6eac605d 00bfffbe 3c322831 01123f82     ]`.n....1(2<.?..
  403174:	04832f36 f4330053 03228a1b 00840084     6/..S.3...".....
  403184:	ffff0228                                (...

00403188 <OV7740_QVGA_YUV422_15FPS>:
  403188:	8012000e 001305fe 00120311 d40c10d5     ................
  403198:	0116340d a0182517 f01a0319 0322891b     .4...%........".
  4031a8:	f82b1829 a031012c c433f032 3f36b43a     ).+.,.1.2.3.:.6?
  4031b8:	80276004 803e0f3d 7f40403f 29426a41     .`'.=.>.?@@.AjB)
  4031c8:	4145e544 64490247 704ba14a 504d1a4c     D.EAG.IdJ.KpL.MP
  4031d8:	0064134e 1a688867 3c243814 72263025     N.d.g.h..8$<%0&r
  4031e8:	7e519750 00530052 23210020 00e91438     P.Q~R.S. .!#8...
  4031f8:	ff575556 ff59ff58 00ec045f 7f80ff13     VUW.X.Y._.......
  403208:	32823f81 11380183 03860085 05880187     .?.2..8.........
  403218:	308d3089 3093858f 30998595 089c859b     .0.0...0...0....
  403228:	239e129d 55a0459f 72a264a1 8ba47fa3     ...#.E.U.d.r....
  403238:	a7a695a5 cba8b5a7 ecaadda9 78ce1aab     ...............x
  403248:	0ad06ecf 84d20cd1 1ed490d3 1f5b245a     .n..........Z$[.
  403258:	605d885c ffbe6eac 503100bf 3f827832     \.]`.n....1P2x.?
  403268:	3f360012 c4330053 0322891b ffff0228     ..6?S.3...".(...

00403278 <OV7740_QVGA_RGB888>:
  403278:	8012000e 01110013 10d50012 340d120c     ...............4
  403288:	a0182517 f01a0319 0322891b f82b1829     .%........".).+.
  403298:	a031012c c433f032 3f36b43a 80276004     ,.1.2.3.:.6?.`'.
  4032a8:	803e0f3d 7f40403f 29426a41 4145e544     =.>.?@@.AjB)D.EA
  4032b8:	64490247 704ba14a 504d1a4c 0064134e     G.IdJ.KpL.MPN.d.
  4032c8:	1a688867 3c243814 72263025 7e519750     g.h..8$<%0&rP.Q~
  4032d8:	00530052 23210020 00e91438 ff575556     R.S. .!#8...VUW.
  4032e8:	ff59ff58 00ec045f 7f80ff13 32823f81     X.Y._........?.2
  4032f8:	11380183 00857084 01870386 30890588     ..8..p.........0
  403308:	858f308d 85953093 859b3099 129d089c     .0...0...0......
  403318:	459f239e 64a155a0 7fa372a2 95a58ba4     .#.E.U.d.r......
  403328:	b5a7a7a6 dda9cba8 1aabecaa 6ecf78ce     .............x.n
  403338:	0cd10ad0 90d384d2 245a1ed4 885c1f5b     ..........Z$[.\.
  403348:	6eac605d 00bfffbe 78325031 01123f82     ]`.n....1P2x.?..
  403358:	04832f36 f4330053 03228a1b 00840084     6/..S.3...".....
  403368:	ffff0228                                (...

0040336c <OV7740_TEST_PATTERN>:
  40336c:	8012000e 001305fe 00120211 d40c10d5     ................
  40337c:	0116340d a0182517 f01a0319 0322891b     .4...%........".
  40338c:	f82b1829 a031012c c433f032 3f36b43a     ).+.,.1.2.3.:.6?
  40339c:	80276004 803e0f3d 7f40403f 29426a41     .`'.=.>.?@@.AjB)
  4033ac:	4145e544 64490247 704ba14a 504d1a4c     D.EAG.IdJ.KpL.MP
  4033bc:	0064134e 1a688867 3c243814 72263025     N.d.g.h..8$<%0&r
  4033cc:	7e519750 00530052 23210020 02840738     P.Q~R.S. .!#8...
  4033dc:	00e91438 ff575556 ff59ff58 00ec045f     8...VUW.X.Y._...
  4033ec:	7f80ff13 32823f81 11380183 03860085     .....?.2..8.....
  4033fc:	05880187 308d3089 3093858f 30998595     .....0.0...0...0
  40340c:	089c859b 239e129d 55a0459f 72a264a1     .......#.E.U.d.r
  40341c:	8ba47fa3 a7a695a5 cba8b5a7 ecaadda9     ................
  40342c:	78ce1aab 0ad06ecf 84d20cd1 1ed490d3     ...x.n..........
  40343c:	1f5b245a 605d885c ffbe6eac 503100bf     Z$[.\.]`.n....1P
  40344c:	3f827832 3f360012 c4330053 0322891b     2x.?..6?S.3...".
  40345c:	ffff0228                                (...

00403460 <OV7740_QVGA_YUV422_20FPS>:
  403460:	8012000e 001305fe 00120211 d40c10d5     ................
  403470:	0116340d a0182517 f01a0319 0322891b     .4...%........".
  403480:	f82b1829 a031012c c433f032 3f36b43a     ).+.,.1.2.3.:.6?
  403490:	80276004 803e0f3d 7f40403f 29426a41     .`'.=.>.?@@.AjB)
  4034a0:	4145e544 64490247 704ba14a 504d1a4c     D.EAG.IdJ.KpL.MP
  4034b0:	0064134e 1a688867 3c243814 72263025     N.d.g.h..8$<%0&r
  4034c0:	7e519750 00530052 23210020 00e91438     P.Q~R.S. .!#8...
  4034d0:	ff575556 ff59ff58 00ec045f 7f80ff13     VUW.X.Y._.......
  4034e0:	32823f81 11380183 03860085 05880187     .?.2..8.........
  4034f0:	308d3089 3093858f 30998595 089c859b     .0.0...0...0....
  403500:	239e129d 55a0459f 72a264a1 8ba47fa3     ...#.E.U.d.r....
  403510:	a7a695a5 cba8b5a7 ecaadda9 78ce1aab     ...............x
  403520:	0ad06ecf 84d20cd1 1ed490d3 1f5b245a     .n..........Z$[.
  403530:	605d885c ffbe6eac 503100bf 3f827832     \.]`.n....1P2x.?
  403540:	3f360012 c4330053 0322891b ffff0228     ..6?S.3...".(...

00403550 <OV7740_QVGA_YUV422_10FPS>:
  403550:	8012000e 001305fe 00120511 d40c10d5     ................
  403560:	0116340d a0182517 f01a0319 0322891b     .4...%........".
  403570:	f82b1829 a031012c c433f032 3f36b43a     ).+.,.1.2.3.:.6?
  403580:	80276004 803e0f3d 7f40403f 29426a41     .`'.=.>.?@@.AjB)
  403590:	4145e544 64490247 704ba14a 504d1a4c     D.EAG.IdJ.KpL.MP
  4035a0:	0064134e 1a688867 3c243814 72263025     N.d.g.h..8$<%0&r
  4035b0:	7e519750 00530052 23210020 00e91438     P.Q~R.S. .!#8...
  4035c0:	ff575556 ff59ff58 00ec045f 7f80ff13     VUW.X.Y._.......
  4035d0:	32823f81 11380183 03860085 05880187     .?.2..8.........
  4035e0:	308d3089 3093858f 30998595 089c859b     .0.0...0...0....
  4035f0:	239e129d 55a0459f 72a264a1 8ba47fa3     ...#.E.U.d.r....
  403600:	a7a695a5 cba8b5a7 ecaadda9 78ce1aab     ...............x
  403610:	0ad06ecf 84d20cd1 1ed490d3 1f5b245a     .n..........Z$[.
  403620:	605d885c ffbe6eac 503100bf 3f827832     \.]`.n....1P2x.?
  403630:	3f360012 c4330053 0322891b ffff0228     ..6?S.3...".(...

00403640 <OV7740_QQVGA_YUV422>:
  403640:	8012000e 01110013 10d50012 340d540c     .............T.4
  403650:	25170116 0319a018 891bf01a 18290322     ...%........".).
  403660:	012cf82b f032a031 b43ac433 60043f36     +.,.1.2.3.:.6?.`
  403670:	0f3d8027 403f803e 6a417f40 e5442942     '.=.>.?@@.AjB)D.
  403680:	02474145 a14a6449 1a4c704b 134e504d     EAG.IdJ.KpL.MPN.
  403690:	88670064 38141a68 30253c24 97507226     d.g.h..8$<%0&rP.
  4036a0:	00527e51 00200053 14382321 555600e9     Q~R.S. .!#8...VU
  4036b0:	ff58ff57 045fff59 ff1300ec 3f817f80     W.X.Y._........?
  4036c0:	01833282 70841138 03860085 05880187     .2..8..p........
  4036d0:	308d3089 3093858f 30998595 089c859b     .0.0...0...0....
  4036e0:	239e129d 55a0459f 72a264a1 8ba47fa3     ...#.E.U.d.r....
  4036f0:	a7a695a5 cba8b5a7 ecaadda9 78ce1aab     ...............x
  403700:	0ad06ecf 84d20cd1 1ed490d3 1f5b245a     .n..........Z$[.
  403710:	605d885c ffbe6eac 283100bf 00343c32     \.]`.n....1(2<4.
  403720:	00123f82 00533f36 891b0033 02280322     .?..6?S.3...".(.
  403730:	ffff00d9                                ....

00403734 <OV7740_QVGA_YUV422_30FPS>:
  403734:	8012000e 001305fe 00120111 d40c10d5     ................
  403744:	0116340d a0182517 f01a0319 0322891b     .4...%........".
  403754:	f82b1829 a031012c c433f032 3f36b43a     ).+.,.1.2.3.:.6?
  403764:	80276004 803e0f3d 7f40403f 29426a41     .`'.=.>.?@@.AjB)
  403774:	4145e544 64490247 704ba14a 504d1a4c     D.EAG.IdJ.KpL.MP
  403784:	0064134e 1a688867 3c243814 72263025     N.d.g.h..8$<%0&r
  403794:	7e519750 00530052 23210020 00e91438     P.Q~R.S. .!#8...
  4037a4:	ff575556 ff59ff58 00ec045f 7f80ff13     VUW.X.Y._.......
  4037b4:	32823f81 11380183 03860085 05880187     .?.2..8.........
  4037c4:	308d3089 3093858f 30998595 089c859b     .0.0...0...0....
  4037d4:	239e129d 55a0459f 72a264a1 8ba47fa3     ...#.E.U.d.r....
  4037e4:	a7a695a5 cba8b5a7 ecaadda9 78ce1aab     ...............x
  4037f4:	0ad06ecf 84d20cd1 1ed490d3 1f5b245a     .n..........Z$[.
  403804:	605d885c ffbe6eac 503100bf 3f827832     \.]`.n....1P2x.?
  403814:	3f360012 c4330053 0322891b ffff0228     ..6?S.3...".(...

00403824 <p_uc_charset10x14>:
	...
  403840:	ccffccff 00000000 00000000 00000000     ................
  403850:	00f000f0 00000000 00f000f0 00000000     ................
  403860:	c00cc00c fcfffcff c00cc00c fcfffcff     ................
  403870:	c00cc00c 701e600c 3033303f fcfffcff     .....`.p?030....
  403880:	f0333033 c018e039 0cf00060 f0603cf0     303.9...`....<`.
  403890:	000fc003 3cf0183c 18003cc0 f87ff03c     ....<..<.<..<...
  4038a0:	8cc71cc3 ecdccccf 30307878 cc00fc00     ........xx00....
  4038b0:	00000000 00440000 00f800ec 00000070     ......D.....p...
	...
  4038c8:	f03fc00f 18607878 0cc00cc0 00000000     ..?.xx`.........
  4038d8:	00000000 0cc00cc0 78781860 c00ff03f     ........`.xx?...
  4038e8:	00000000 e00e600c 8003c007 f83ff83f     .....`......?.?.
  4038f8:	c0078003 600ce00e 00030003 00030003     .......`........
  403908:	f03ff03f 00030003 00030003 ec004400     ?.?..........D..
  403918:	7000f800 00000000 00000000 00000000     ...p............
  403928:	00030003 00030003 00030003 00030003     ................
  403938:	00030003 3c001800 18003c00 00000000     .......<.<......
	...
  403950:	0c000000 f0003c00 000fc003 00f0003c     .....<......<...
  403960:	000000c0 f87ff03f ccc1fce0 0cc78cc3     ....?...........
  403970:	1cfc0cce f03ff87f 00000000 0c700c30     ......?.....0.p.
  403980:	fcfffcff 0c000c00 00000000 1c700c30     ............0.p.
  403990:	7cc03ce0 ccc1ecc0 0ce78cc3 0c3c0c7e     .<.|........~.<.
  4039a0:	38703030 0cc01ce0 0cc30cc0 1ce30cc3     00p8............
  4039b0:	f03cf87f c007c003 c01cc00e c070c038     ..<.........8.p.
  4039c0:	fcfffcff c000c000 38fc30fc 0ccc1ccc     .........0.8....
  4039d0:	0ccc0ccc 1cce0ccc f0c3f8c7 f87ff03f     ............?...
  4039e0:	0cc31ce3 0cc30cc3 9ce30cc3 f030f871     ............q.0.
  4039f0:	00c000c0 00c000c0 fcc7fcc3 00dc00ce     ................
  403a00:	00f000f8 f87ff03c 0cc39ce7 0cc30cc3     ....<...........
  403a10:	9ce70cc3 f03cf87f 007e003c 0cc30ce7     ......<.<.~.....
  403a20:	38c31cc3 e0e770c3 803fc07f 00000000     ...8.p....?.....
  403a30:	60180000 f03cf03c 00006018 00000000     ...`<.<..`......
  403a40:	00000000 44180000 f83cec3c 00007018     .......D<.<..p..
  403a50:	00000000 00030000 c00f8007 7038e01c     ..............8p
  403a60:	1ce03870 00000cc0 c00cc00c c00cc00c     p8..............
  403a70:	c00cc00c c00cc00c c00cc00c 0cc00000     ................
  403a80:	38701ce0 e01c7038 8007c00f 00000003     ..p88p..........
  403a90:	00700030 00c000e0 ecc3ecc1 00e600c3     0.p.............
  403aa0:	003c007e f871f030 0cc39ce3 fcc3fcc3     ~.<.0.q.........
  403ab0:	1ce00cc0 f03ff87f fc7ffc3f c0c0c0e0     ......?.?.......
  403ac0:	c0c0c0c0 c0e0c0c0 fc3ffc7f fcfffcff     ..........?.....
  403ad0:	0cc30cc3 0cc30cc3 9ce70cc3 f03cf87f     ..............<.
  403ae0:	f87ff03f 0cc01ce0 0cc00cc0 1ce00cc0     ?...............
  403af0:	30303870 fcfffcff 0cc00cc0 0cc00cc0     p800............
  403b00:	1ce00cc0 f03ff87f fcfffcff 0cc30cc3     ......?.........
  403b10:	0cc30cc3 0cc30cc3 0cc00cc0 fcfffcff     ................
  403b20:	00c300c3 00c300c3 00c300c3 00c000c0     ................
  403b30:	f87ff03f 0cc01ce0 0cc30cc0 1ce30cc3     ?...............
  403b40:	f033f873 fcfffcff 00030003 00030003     s.3.............
  403b50:	00030003 fcfffcff 00000000 0cc00cc0     ................
  403b60:	fcfffcff 0cc00cc0 00000000 38003000     .............0.8
  403b70:	0cc01cc0 1cc00cc0 f0fff8ff 00c000c0     ................
  403b80:	fcfffcff 80078007 e01cc00f 38707038     ............8pp8
  403b90:	0cc01ce0 fcfffcff 0c000c00 0c000c00     ................
  403ba0:	0c000c00 0c000c00 fcfffcff 00380070     ............p.8.
  403bb0:	001f001f 00700038 fcfffcff fcfffcff     ....8.p.........
  403bc0:	000e001c 80030007 e000c001 fcfffcff     ................
  403bd0:	f87ff03f 0cc01ce0 0cc00cc0 1ce00cc0     ?...............
  403be0:	f03ff87f fcfffcff 00c300c3 00c300c3     ..?.............
  403bf0:	00e700c3 003c007e f87ff03f 0cc01ce0     ....~.<.?.......
  403c00:	ecc0ccc0 38e07cc0 ec3ffc7f fcfffcff     .....|.8..?.....
  403c10:	80c300c3 c0c380c3 70e7c0c3 1c3c3c7e     ...........p~<<.
  403c20:	1c7e183c 0cc30ce7 0cc30cc3 9cc30cc3     <.~.............
  403c30:	f060f8e1 00c000c0 00c000c0 fcfffcff     ..`.............
  403c40:	00c000c0 00c000c0 f8fff0ff 0c001c00     ................
  403c50:	0c000c00 1c000c00 f0fff8ff e0ffc0ff     ................
  403c60:	38007000 1c001c00 70003800 c0ffe0ff     .p.8.....8.p....
  403c70:	f8fff0ff 3c001c00 f800f800 1c003c00     .......<.....<..
  403c80:	f0fff8ff 7cf83cf0 c00fe01c 80078007     .....<.|........
  403c90:	e01cc00f 3cf07cf8 00fe00fc 80030007     .....|.<........
  403ca0:	fc01fc01 00078003 00fc00fe 7cc03cc0     .............<.|
  403cb0:	ccc1ecc0 0cc78cc3 0cdc0cce 0cf00cf8     ................
  403cc0:	00000000 fcfffcff 0cc00cc0 00000cc0     ................
  403cd0:	00000000 00300030 000c000c 00030003     ....0.0.........
  403ce0:	c000c000 30003000 00000000 0cc00cc0     .....0.0........
  403cf0:	fcff0cc0 0000fcff 00000000 001c000c     ................
  403d00:	00700038 00e000e0 00380070 000c001c     8.p.....p.8.....
  403d10:	0c000c00 0c000c00 0c000c00 0c000c00     ................
  403d20:	0c000c00 00000000 00e000c0 00380070     ............p.8.
  403d30:	00000018 00000000 78063000 cc0cfc0e     .........0.x....
  403d40:	cc0ccc0c cc0ecc0c f803fc07 fcfffcff     ................
  403d50:	0c030c03 0c030c03 9c030c03 f000f801     ................
  403d60:	f807f003 0c0c1c0e 0c0c0c0c 1c0e0c0c     ................
  403d70:	30033807 f801f000 0c039c03 0c030c03     .8.0............
  403d80:	0c030c03 fcfffcff f807f003 cc0cdc0e     ................
  403d90:	cc0ccc0c dc0ecc0c 9003d807 00030000     ................
  403da0:	fc7ffc3f 00e300e3 00300070 00000000     ?.......p.0.....
  403db0:	9c071803 cc0ccc0f cc0ccc0c dc0ccc0c     ................
  403dc0:	f007f80f fcfffcff 00030003 00030003     ................
  403dd0:	fc018003 0000fc00 00000000 00000000     ................
  403de0:	fc1bfc1b 00000000 00000000 30000000     ...............0
  403df0:	1c003800 0c000c00 f8cf1c00 0000f0cf     .8..............
  403e00:	fcff0000 e000fcff f003e001 1c0e3807     .............8..
  403e10:	00000c0c 00000000 0cc00cc0 fcfffcff     ................
  403e20:	0c000c00 00000000 fc0ffc0f 0007000e     ................
  403e30:	c003c003 000e0007 fc0ffc0f fc0ffc0f     ................
  403e40:	00070003 000c000e 000e000c fc03fc07     ................
  403e50:	f807f003 0c0c1c0e 0c0c0c0c 1c0e0c0c     ................
  403e60:	f003f807 fc0ffc0f c00cc00c c00cc00c     ................
  403e70:	c00fc00c 00038007 80070003 c00cc00f     ................
  403e80:	c00cc00c c00cc00c fc0ffc0f fc0ffc0f     ................
  403e90:	00078003 000c000e 000e000c 00030007     ................
  403ea0:	9c071803 cc0ccc0f cc0ccc0c fc0ccc0c     ................
  403eb0:	3006780e 000c0000 f0ff000c 1c0cf8ff     .x.0............
  403ec0:	380c1c0c 0000300c f80ff00f 0c001c00     ...8.0..........
  403ed0:	0c000c00 1c000c00 f00ff80f e00fc00f     ................
  403ee0:	38007000 1c001c00 70003800 c00fe00f     .p.8.....8.p....
  403ef0:	f80ff00f 1c001c00 f800f800 1c001c00     ................
  403f00:	f00ff80f 1c0e0c0c f0033807 e001e001     .........8......
  403f10:	3807f003 0c0c1c0e 000e000c 9c030c07     ...8............
  403f20:	f001f801 00078003 000c000e 1c0c0c0c     ................
  403f30:	7c0c3c0c cc0dec0c 0c0f8c0f 0c0c0c0e     .<.|............
  403f40:	00030000 f03f8007 1ce0f87c 0cc00cc0     ......?.|.......
  403f50:	00000cc0 0c030c03 fc7ffc3f 0cc30ce3     ........?.......
  403f60:	0ce00cc0 0c300c70 0cc00000 0cc00cc0     ....p.0.........
  403f70:	f87c1ce0 8007f03f 00000003 00c000c0     ..|.?...........
  403f80:	00c000c0 00c000c0 00c000c0 00c000c0     ................
  403f90:	fcfffcff fcfffcff fcfffcff fcfffcff     ................
  403fa0:	fcfffcff 65657246 534f5452 00000000     ....FreeRTOS....
  403fb0:	4f4d4544 00000000 3737564f 69203034     DEMO....OV7740 i
  403fc0:	6567616d 6e657320 0a726f73 74706163     mage sensor.capt
  403fd0:	20657275 6d617865 00656c70 61656c50     ure example.Plea
  403fe0:	57206573 20746961 69727564 0a20676e     se Wait during .
  403ff0:	74696e69 696c6169 6974617a 00006e6f     initialization..
  404000:	61656c50 50206573 73736572 74756220     Please Press but
  404010:	0a6e6f74 74206f74 20656b61 20646e61     ton.to take and 
  404020:	70736964 0a79616c 69702061 72757463     display.a pictur
  404030:	00000065 0064654c 0044434c 00000043     e...Led.LCD.C...

00404040 <_global_impure_ptr>:
  404040:	20000020                                 .. 

00404044 <_init>:
  404044:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  404046:	bf00      	nop
  404048:	bcf8      	pop	{r3, r4, r5, r6, r7}
  40404a:	bc08      	pop	{r3}
  40404c:	469e      	mov	lr, r3
  40404e:	4770      	bx	lr

00404050 <__init_array_start>:
  404050:	00402e8d 	.word	0x00402e8d

00404054 <__frame_dummy_init_array_entry>:
  404054:	004000f1                                ..@.

00404058 <_fini>:
  404058:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40405a:	bf00      	nop
  40405c:	bcf8      	pop	{r3, r4, r5, r6, r7}
  40405e:	bc08      	pop	{r3}
  404060:	469e      	mov	lr, r3
  404062:	4770      	bx	lr

00404064 <__fini_array_start>:
  404064:	004000cd 	.word	0x004000cd

Disassembly of section .relocate:

20000000 <portable_delay_cycles>:
RAMFUNC
void portable_delay_cycles(unsigned long n)
{
	UNUSED(n);

	__asm (
20000000:	f3bf 8f5f 	dmb	sy
20000004:	3801      	subs	r0, #1
20000006:	d1fb      	bne.n	20000000 <portable_delay_cycles>
20000008:	4770      	bx	lr
2000000a:	bf00      	nop

2000000c <uxCriticalNesting>:
2000000c:	aaaa aaaa                                   ....

20000010 <xFreeBytesRemaining>:
20000010:	a000 0000                                   ....

20000014 <xNextTaskUnblockTime>:
20000014:	ffff ffff                                   ....

20000018 <SystemCoreClock>:
20000018:	0900 003d 0000 0000                         ..=.....

20000020 <impure_data>:
20000020:	0000 0000 030c 2000 0374 2000 03dc 2000     ....... t.. ... 
	...
20000054:	403c 0040 0000 0000 0000 0000 0000 0000     <@@.............
	...
200000c8:	0001 0000 0000 0000 330e abcd 1234 e66d     .........3..4.m.
200000d8:	deec 0005 000b 0000 0000 0000 0000 0000     ................
	...
