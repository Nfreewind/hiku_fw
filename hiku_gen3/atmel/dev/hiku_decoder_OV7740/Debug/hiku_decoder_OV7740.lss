
hiku_decoder_OV7740.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00011d94  00400000  00400000  00008000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    000000c8  00411d94  00411d94  00019d94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     00000d24  20000000  00411e5c  00020000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          000005a4  20000d24  00412b80  00020d24  2**2
                  ALLOC
  4 .stack        00003000  200012c8  00413124  00020d24  2**0
                  ALLOC
  5 .ARM.attributes 0000002a  00000000  00000000  00020d24  2**0
                  CONTENTS, READONLY
  6 .comment      0000005b  00000000  00000000  00020d4e  2**0
                  CONTENTS, READONLY
  7 .debug_info   000256a1  00000000  00000000  00020da9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00004b7f  00000000  00000000  0004644a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00035895  00000000  00000000  0004afc9  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000cf0  00000000  00000000  0008085e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000072c0  00000000  00000000  0008154e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  0001b746  00000000  00000000  0008880e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00013df9  00000000  00000000  000a3f54  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    0006790c  00000000  00000000  000b7d4d  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  0000364c  00000000  00000000  0011f65c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <_sfixed>:
  400000:	200042c8 	.word	0x200042c8
  400004:	00401be9 	.word	0x00401be9
  400008:	00401be5 	.word	0x00401be5
  40000c:	00401be5 	.word	0x00401be5
  400010:	00401be5 	.word	0x00401be5
  400014:	00401be5 	.word	0x00401be5
  400018:	00401be5 	.word	0x00401be5
	...
  40002c:	00401be5 	.word	0x00401be5
  400030:	00401be5 	.word	0x00401be5
  400034:	00000000 	.word	0x00000000
  400038:	00401be5 	.word	0x00401be5
  40003c:	00400229 	.word	0x00400229
  400040:	00401be5 	.word	0x00401be5
  400044:	00401be5 	.word	0x00401be5
  400048:	00401be5 	.word	0x00401be5
  40004c:	00401be5 	.word	0x00401be5
  400050:	00401be5 	.word	0x00401be5
  400054:	00401be5 	.word	0x00401be5
  400058:	00401be5 	.word	0x00401be5
  40005c:	00000000 	.word	0x00000000
  400060:	00401be5 	.word	0x00401be5
  400064:	00401be5 	.word	0x00401be5
  400068:	00000000 	.word	0x00000000
  40006c:	004015bd 	.word	0x004015bd
  400070:	004016b5 	.word	0x004016b5
  400074:	004017ad 	.word	0x004017ad
  400078:	00401be5 	.word	0x00401be5
  40007c:	00401be5 	.word	0x00401be5
	...
  400088:	00401be5 	.word	0x00401be5
  40008c:	00401be5 	.word	0x00401be5
  400090:	00401be5 	.word	0x00401be5
  400094:	00401be5 	.word	0x00401be5
  400098:	00401be5 	.word	0x00401be5
  40009c:	00401be5 	.word	0x00401be5
  4000a0:	00401be5 	.word	0x00401be5
  4000a4:	00401be5 	.word	0x00401be5
  4000a8:	00401be5 	.word	0x00401be5
  4000ac:	00401be5 	.word	0x00401be5
  4000b0:	00401be5 	.word	0x00401be5
  4000b4:	00401be5 	.word	0x00401be5
  4000b8:	00401be5 	.word	0x00401be5
  4000bc:	00401be5 	.word	0x00401be5
  4000c0:	00401be5 	.word	0x00401be5
  4000c4:	00401be5 	.word	0x00401be5
  4000c8:	00401be5 	.word	0x00401be5

004000cc <__do_global_dtors_aux>:
  4000cc:	b510      	push	{r4, lr}
  4000ce:	4c05      	ldr	r4, [pc, #20]	; (4000e4 <__do_global_dtors_aux+0x18>)
  4000d0:	7823      	ldrb	r3, [r4, #0]
  4000d2:	b933      	cbnz	r3, 4000e2 <__do_global_dtors_aux+0x16>
  4000d4:	4b04      	ldr	r3, [pc, #16]	; (4000e8 <__do_global_dtors_aux+0x1c>)
  4000d6:	b113      	cbz	r3, 4000de <__do_global_dtors_aux+0x12>
  4000d8:	4804      	ldr	r0, [pc, #16]	; (4000ec <__do_global_dtors_aux+0x20>)
  4000da:	f3af 8000 	nop.w
  4000de:	2301      	movs	r3, #1
  4000e0:	7023      	strb	r3, [r4, #0]
  4000e2:	bd10      	pop	{r4, pc}
  4000e4:	20000d24 	.word	0x20000d24
  4000e8:	00000000 	.word	0x00000000
  4000ec:	00411e5c 	.word	0x00411e5c

004000f0 <frame_dummy>:
  4000f0:	4b08      	ldr	r3, [pc, #32]	; (400114 <frame_dummy+0x24>)
  4000f2:	b510      	push	{r4, lr}
  4000f4:	b11b      	cbz	r3, 4000fe <frame_dummy+0xe>
  4000f6:	4808      	ldr	r0, [pc, #32]	; (400118 <frame_dummy+0x28>)
  4000f8:	4908      	ldr	r1, [pc, #32]	; (40011c <frame_dummy+0x2c>)
  4000fa:	f3af 8000 	nop.w
  4000fe:	4808      	ldr	r0, [pc, #32]	; (400120 <frame_dummy+0x30>)
  400100:	6803      	ldr	r3, [r0, #0]
  400102:	b903      	cbnz	r3, 400106 <frame_dummy+0x16>
  400104:	bd10      	pop	{r4, pc}
  400106:	4b07      	ldr	r3, [pc, #28]	; (400124 <frame_dummy+0x34>)
  400108:	2b00      	cmp	r3, #0
  40010a:	d0fb      	beq.n	400104 <frame_dummy+0x14>
  40010c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  400110:	4718      	bx	r3
  400112:	bf00      	nop
  400114:	00000000 	.word	0x00000000
  400118:	00411e5c 	.word	0x00411e5c
  40011c:	20000d28 	.word	0x20000d28
  400120:	00411e5c 	.word	0x00411e5c
  400124:	00000000 	.word	0x00000000

00400128 <zbar_hiku_process>:
 #include <string.h>     /* memmove */
 #include <stdint.h>
 #include <zbar.h>
 #include <conf_board.h>

 uint8_t zbar_hiku_process(char *barcode_val, char *barcode_typ){
  400128:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}

			uint8_t barcode_matches = 0;

			zbar_image_scanner_t *scanner = NULL;
			scanner = zbar_image_scanner_create();
  40012c:	4b25      	ldr	r3, [pc, #148]	; (4001c4 <zbar_hiku_process+0x9c>)
			zbar_image_scanner_set_config(scanner, ZBAR_NONE, ZBAR_CFG_ENABLE, 1);
  40012e:	4c26      	ldr	r4, [pc, #152]	; (4001c8 <zbar_hiku_process+0xa0>)
 #include <string.h>     /* memmove */
 #include <stdint.h>
 #include <zbar.h>
 #include <conf_board.h>

 uint8_t zbar_hiku_process(char *barcode_val, char *barcode_typ){
  400130:	460f      	mov	r7, r1
  400132:	4606      	mov	r6, r0

			uint8_t barcode_matches = 0;

			zbar_image_scanner_t *scanner = NULL;
			scanner = zbar_image_scanner_create();
  400134:	4798      	blx	r3
			zbar_image_scanner_set_config(scanner, ZBAR_NONE, ZBAR_CFG_ENABLE, 1);
  400136:	2100      	movs	r1, #0
  400138:	460a      	mov	r2, r1
  40013a:	2301      	movs	r3, #1
 uint8_t zbar_hiku_process(char *barcode_val, char *barcode_typ){

			uint8_t barcode_matches = 0;

			zbar_image_scanner_t *scanner = NULL;
			scanner = zbar_image_scanner_create();
  40013c:	4605      	mov	r5, r0
			zbar_image_scanner_set_config(scanner, ZBAR_NONE, ZBAR_CFG_ENABLE, 1);
  40013e:	47a0      	blx	r4
	
			uint8_t * temp = (uint8_t *)CAP_DEST;
			zbar_image_t *image = zbar_image_create();
  400140:	4b22      	ldr	r3, [pc, #136]	; (4001cc <zbar_hiku_process+0xa4>)
  400142:	4798      	blx	r3
			zbar_image_set_format(image, zbar_fourcc('G','R','E','Y'));
  400144:	4922      	ldr	r1, [pc, #136]	; (4001d0 <zbar_hiku_process+0xa8>)
  400146:	4b23      	ldr	r3, [pc, #140]	; (4001d4 <zbar_hiku_process+0xac>)
			zbar_image_scanner_t *scanner = NULL;
			scanner = zbar_image_scanner_create();
			zbar_image_scanner_set_config(scanner, ZBAR_NONE, ZBAR_CFG_ENABLE, 1);
	
			uint8_t * temp = (uint8_t *)CAP_DEST;
			zbar_image_t *image = zbar_image_create();
  400148:	4604      	mov	r4, r0
			zbar_image_set_format(image, zbar_fourcc('G','R','E','Y'));
  40014a:	4798      	blx	r3
			zbar_image_set_size(image, IMAGE_WIDTH, IMAGE_HEIGHT);
  40014c:	4620      	mov	r0, r4
  40014e:	f44f 71a0 	mov.w	r1, #320	; 0x140
  400152:	22f0      	movs	r2, #240	; 0xf0
  400154:	4b20      	ldr	r3, [pc, #128]	; (4001d8 <zbar_hiku_process+0xb0>)
  400156:	4798      	blx	r3
			zbar_image_set_data(image, temp, IMAGE_WIDTH * IMAGE_HEIGHT, zbar_image_free_data);
  400158:	4620      	mov	r0, r4
  40015a:	f44f 3296 	mov.w	r2, #76800	; 0x12c00
  40015e:	f8df c094 	ldr.w	ip, [pc, #148]	; 4001f4 <zbar_hiku_process+0xcc>
  400162:	4b1e      	ldr	r3, [pc, #120]	; (4001dc <zbar_hiku_process+0xb4>)
  400164:	f04f 41c0 	mov.w	r1, #1610612736	; 0x60000000
  400168:	47e0      	blx	ip

			int n = zbar_scan_image(scanner, image);
  40016a:	4621      	mov	r1, r4
  40016c:	4b1c      	ldr	r3, [pc, #112]	; (4001e0 <zbar_hiku_process+0xb8>)
  40016e:	4628      	mov	r0, r5
  400170:	4798      	blx	r3

			const zbar_symbol_t *symbol = zbar_image_first_symbol(image);
  400172:	4620      	mov	r0, r4
  400174:	4b1b      	ldr	r3, [pc, #108]	; (4001e4 <zbar_hiku_process+0xbc>)
  400176:	4798      	blx	r3
			for(; symbol; symbol = zbar_symbol_next(symbol)) {
  400178:	4604      	mov	r4, r0
  40017a:	b308      	cbz	r0, 4001c0 <zbar_hiku_process+0x98>
  40017c:	f8df b078 	ldr.w	fp, [pc, #120]	; 4001f8 <zbar_hiku_process+0xd0>
  400180:	f8df a078 	ldr.w	sl, [pc, #120]	; 4001fc <zbar_hiku_process+0xd4>
  400184:	4d18      	ldr	r5, [pc, #96]	; (4001e8 <zbar_hiku_process+0xc0>)
  400186:	f04f 0800 	mov.w	r8, #0
				
				barcode_matches++;
  40018a:	f108 0301 	add.w	r3, r8, #1

				zbar_symbol_type_t typ = zbar_symbol_get_type(symbol);
  40018e:	4620      	mov	r0, r4
			int n = zbar_scan_image(scanner, image);

			const zbar_symbol_t *symbol = zbar_image_first_symbol(image);
			for(; symbol; symbol = zbar_symbol_next(symbol)) {
				
				barcode_matches++;
  400190:	fa5f f883 	uxtb.w	r8, r3

				zbar_symbol_type_t typ = zbar_symbol_get_type(symbol);
  400194:	47d8      	blx	fp
  400196:	4681      	mov	r9, r0
				volatile const char *data = zbar_symbol_get_data(symbol);
  400198:	4620      	mov	r0, r4
  40019a:	47d0      	blx	sl
  40019c:	4601      	mov	r1, r0
	
				strcpy(barcode_val, data);
  40019e:	4630      	mov	r0, r6
  4001a0:	47a8      	blx	r5
				strcpy(barcode_typ, (uint8_t *)zbar_get_symbol_name(typ));
  4001a2:	4b12      	ldr	r3, [pc, #72]	; (4001ec <zbar_hiku_process+0xc4>)
  4001a4:	4648      	mov	r0, r9
  4001a6:	4798      	blx	r3
  4001a8:	4601      	mov	r1, r0
  4001aa:	4638      	mov	r0, r7
  4001ac:	47a8      	blx	r5
			zbar_image_set_data(image, temp, IMAGE_WIDTH * IMAGE_HEIGHT, zbar_image_free_data);

			int n = zbar_scan_image(scanner, image);

			const zbar_symbol_t *symbol = zbar_image_first_symbol(image);
			for(; symbol; symbol = zbar_symbol_next(symbol)) {
  4001ae:	4620      	mov	r0, r4
  4001b0:	4b0f      	ldr	r3, [pc, #60]	; (4001f0 <zbar_hiku_process+0xc8>)
  4001b2:	4798      	blx	r3
  4001b4:	4604      	mov	r4, r0
  4001b6:	2800      	cmp	r0, #0
  4001b8:	d1e7      	bne.n	40018a <zbar_hiku_process+0x62>

			}

			return barcode_matches;
			
  4001ba:	4640      	mov	r0, r8
  4001bc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 #include <zbar.h>
 #include <conf_board.h>

 uint8_t zbar_hiku_process(char *barcode_val, char *barcode_typ){

			uint8_t barcode_matches = 0;
  4001c0:	4680      	mov	r8, r0
  4001c2:	e7fa      	b.n	4001ba <zbar_hiku_process+0x92>
  4001c4:	00405a99 	.word	0x00405a99
  4001c8:	00405b65 	.word	0x00405b65
  4001cc:	00405125 	.word	0x00405125
  4001d0:	59455247 	.word	0x59455247
  4001d4:	00405159 	.word	0x00405159
  4001d8:	0040515d 	.word	0x0040515d
  4001dc:	00405091 	.word	0x00405091
  4001e0:	00405c19 	.word	0x00405c19
  4001e4:	00405209 	.word	0x00405209
  4001e8:	004097a9 	.word	0x004097a9
  4001ec:	00406851 	.word	0x00406851
  4001f0:	00406931 	.word	0x00406931
  4001f4:	0040516d 	.word	0x0040516d
  4001f8:	00406929 	.word	0x00406929
  4001fc:	0040692d 	.word	0x0040692d

00400200 <_ZL13vsync_handlermm>:
static void vsync_handler(uint32_t ul_id, uint32_t ul_mask)
{
	unused(ul_id);
	unused(ul_mask);

	g_ul_vsync_flag = true;
  400200:	4b01      	ldr	r3, [pc, #4]	; (400208 <_ZL13vsync_handlermm+0x8>)
  400202:	2201      	movs	r2, #1
  400204:	601a      	str	r2, [r3, #0]
  400206:	4770      	bx	lr
  400208:	20000d40 	.word	0x20000d40

0040020c <_ZL14button_handlermm>:
static void button_handler(uint32_t ul_id, uint32_t ul_mask)
{
	unused(ul_id);
	unused(ul_mask);

	if (g_ul_push_button_trigger){
  40020c:	4b05      	ldr	r3, [pc, #20]	; (400224 <_ZL14button_handlermm+0x18>)
  40020e:	685a      	ldr	r2, [r3, #4]
  400210:	b912      	cbnz	r2, 400218 <_ZL14button_handlermm+0xc>
		g_ul_push_button_trigger = false;
		g_display_splash = true;

	} else {
		g_ul_push_button_trigger = true;
  400212:	2201      	movs	r2, #1
  400214:	605a      	str	r2, [r3, #4]
  400216:	4770      	bx	lr
{
	unused(ul_id);
	unused(ul_mask);

	if (g_ul_push_button_trigger){
		g_ul_push_button_trigger = false;
  400218:	2100      	movs	r1, #0
		g_display_splash = true;
  40021a:	2201      	movs	r2, #1
{
	unused(ul_id);
	unused(ul_mask);

	if (g_ul_push_button_trigger){
		g_ul_push_button_trigger = false;
  40021c:	6059      	str	r1, [r3, #4]
		g_display_splash = true;
  40021e:	609a      	str	r2, [r3, #8]
  400220:	4770      	bx	lr
  400222:	bf00      	nop
  400224:	20000d40 	.word	0x20000d40

00400228 <SysTick_Handler>:

volatile uint32_t g_ms_ticks = 0;

void SysTick_Handler(void)
{
    g_ms_ticks++;
  400228:	4a02      	ldr	r2, [pc, #8]	; (400234 <SysTick_Handler+0xc>)
  40022a:	68d3      	ldr	r3, [r2, #12]
  40022c:	3301      	adds	r3, #1
  40022e:	60d3      	str	r3, [r2, #12]
  400230:	4770      	bx	lr
  400232:	bf00      	nop
  400234:	20000d40 	.word	0x20000d40

00400238 <_Z14time_tick_initv>:
}

void time_tick_init(void)
{
  400238:	b470      	push	{r4, r5, r6}
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1) > SysTick_LOAD_RELOAD_Msk)  return (1);      /* Reload value impossible */

  SysTick->LOAD  = ticks - 1;                                  /* set reload register */
  40023a:	4b07      	ldr	r3, [pc, #28]	; (400258 <_Z14time_tick_initv+0x20>)
    g_ms_ticks = 0;
  40023c:	4e07      	ldr	r6, [pc, #28]	; (40025c <_Z14time_tick_initv+0x24>)
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  40023e:	4808      	ldr	r0, [pc, #32]	; (400260 <_Z14time_tick_initv+0x28>)
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1) > SysTick_LOAD_RELOAD_Msk)  return (1);      /* Reload value impossible */

  SysTick->LOAD  = ticks - 1;                                  /* set reload register */
  400240:	4d08      	ldr	r5, [pc, #32]	; (400264 <_Z14time_tick_initv+0x2c>)
  400242:	2200      	movs	r2, #0
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  400244:	24f0      	movs	r4, #240	; 0xf0
  400246:	60f2      	str	r2, [r6, #12]
  SysTick->LOAD  = ticks - 1;                                  /* set reload register */
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                    /* Enable SysTick IRQ and SysTick Timer */
  400248:	2107      	movs	r1, #7
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1) > SysTick_LOAD_RELOAD_Msk)  return (1);      /* Reload value impossible */

  SysTick->LOAD  = ticks - 1;                                  /* set reload register */
  40024a:	605d      	str	r5, [r3, #4]
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  40024c:	f880 4023 	strb.w	r4, [r0, #35]	; 0x23
    SysTick_Config(sysclk_get_cpu_hz() / 1000); 
}
  400250:	bc70      	pop	{r4, r5, r6}
{
  if ((ticks - 1) > SysTick_LOAD_RELOAD_Msk)  return (1);      /* Reload value impossible */

  SysTick->LOAD  = ticks - 1;                                  /* set reload register */
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
  400252:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                    /* Enable SysTick IRQ and SysTick Timer */
  400254:	6019      	str	r1, [r3, #0]
  400256:	4770      	bx	lr
  400258:	e000e010 	.word	0xe000e010
  40025c:	20000d40 	.word	0x20000d40
  400260:	e000ed00 	.word	0xe000ed00
  400264:	0001d4bf 	.word	0x0001d4bf

00400268 <_Z13time_tick_getv>:

uint32_t time_tick_get(void)
{
    return g_ms_ticks;
  400268:	4b01      	ldr	r3, [pc, #4]	; (400270 <_Z13time_tick_getv+0x8>)
  40026a:	68d8      	ldr	r0, [r3, #12]
}
  40026c:	4770      	bx	lr
  40026e:	bf00      	nop
  400270:	20000d40 	.word	0x20000d40

00400274 <main>:
 * \brief Application entry point for image sensor capture example.
 *
 * \return Unused (ANSI-C compatibility).
 */
int main(void)
{
  400274:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	sysclk_init();
  400278:	4b7f      	ldr	r3, [pc, #508]	; (400478 <main+0x204>)
	display_init();

	/* LCD display information */
	ili9325_fill(COLOR_TURQUOISE);
	ili9325_draw_string(0, 20,
			(uint8_t *)"OV7740 image sensor\ncapture example");
  40027a:	f8df 92b4 	ldr.w	r9, [pc, #692]	; 400530 <main+0x2bc>
{
	/* Configure PIO clock. */
	pmc_enable_periph_clk(PUSH_BUTTON_ID);

	/* Adjust PIO debounce filter using a 10 Hz filter. */
	pio_set_debounce_filter(PUSH_BUTTON_PIO, PUSH_BUTTON_PIN_MSK, 10);
  40027e:	4f7f      	ldr	r7, [pc, #508]	; (40047c <main+0x208>)
    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
/*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  400280:	4e7f      	ldr	r6, [pc, #508]	; (400480 <main+0x20c>)

	/* Initialize PIO interrupt handler, see PIO definition in conf_board.h
	**/
	pio_handler_set(PUSH_BUTTON_PIO, PUSH_BUTTON_ID, PUSH_BUTTON_PIN_MSK,
			PUSH_BUTTON_ATTR, button_handler);
  400282:	4d80      	ldr	r5, [pc, #512]	; (400484 <main+0x210>)
 * \brief Application entry point for image sensor capture example.
 *
 * \return Unused (ANSI-C compatibility).
 */
int main(void)
{
  400284:	b089      	sub	sp, #36	; 0x24
	sysclk_init();
  400286:	4798      	blx	r3
	board_init();
  400288:	4b7f      	ldr	r3, [pc, #508]	; (400488 <main+0x214>)
  40028a:	4798      	blx	r3

	/* OV7740 send image sensor data at 24 Mhz. For best performances, PCK0
	 * which will capture OV7740 data, has to work at 24Mhz. It's easier and
	 * optimum to use one PLL for core (PLLB) and one other for PCK0 (PLLA).
	 */
	pmc_enable_pllack(7, 0x1, 1); /* PLLA work at 96 Mhz */
  40028c:	2101      	movs	r1, #1
  40028e:	460a      	mov	r2, r1
  400290:	2007      	movs	r0, #7
  400292:	4b7e      	ldr	r3, [pc, #504]	; (40048c <main+0x218>)
  400294:	4798      	blx	r3
static void display_init(void)
{
	struct ili9325_opt_t ili9325_display_opt;

	/* Enable peripheral clock */
	pmc_enable_periph_clk( ID_SMC );
  400296:	4b7e      	ldr	r3, [pc, #504]	; (400490 <main+0x21c>)
  400298:	200a      	movs	r0, #10
  40029a:	4798      	blx	r3

	/* Configure SMC interface for LCD */
	smc_set_setup_timing(SMC, ILI9325_LCD_CS, SMC_SETUP_NWE_SETUP(2)
			| SMC_SETUP_NCS_WR_SETUP(2)
			| SMC_SETUP_NRD_SETUP(2)
			| SMC_SETUP_NCS_RD_SETUP(2));
  40029c:	487d      	ldr	r0, [pc, #500]	; (400494 <main+0x220>)
  40029e:	4b7e      	ldr	r3, [pc, #504]	; (400498 <main+0x224>)
  4002a0:	2102      	movs	r1, #2
  4002a2:	f04f 3202 	mov.w	r2, #33686018	; 0x2020202
  4002a6:	4798      	blx	r3

	smc_set_pulse_timing(SMC, ILI9325_LCD_CS, SMC_PULSE_NWE_PULSE(4)
			| SMC_PULSE_NCS_WR_PULSE(4)
			| SMC_PULSE_NRD_PULSE(10)
			| SMC_PULSE_NCS_RD_PULSE(10));
  4002a8:	487a      	ldr	r0, [pc, #488]	; (400494 <main+0x220>)
  4002aa:	4a7c      	ldr	r2, [pc, #496]	; (40049c <main+0x228>)
  4002ac:	4b7c      	ldr	r3, [pc, #496]	; (4004a0 <main+0x22c>)
  4002ae:	2102      	movs	r1, #2
  4002b0:	4798      	blx	r3

	smc_set_cycle_timing(SMC, ILI9325_LCD_CS, SMC_CYCLE_NWE_CYCLE(10)
			| SMC_CYCLE_NRD_CYCLE(22));
  4002b2:	4878      	ldr	r0, [pc, #480]	; (400494 <main+0x220>)
  4002b4:	4a7b      	ldr	r2, [pc, #492]	; (4004a4 <main+0x230>)
  4002b6:	4b7c      	ldr	r3, [pc, #496]	; (4004a8 <main+0x234>)
  4002b8:	2102      	movs	r1, #2
  4002ba:	4798      	blx	r3

	smc_set_mode(SMC, ILI9325_LCD_CS, SMC_MODE_READ_MODE
			| SMC_MODE_WRITE_MODE);
  4002bc:	4875      	ldr	r0, [pc, #468]	; (400494 <main+0x220>)
  4002be:	4b7b      	ldr	r3, [pc, #492]	; (4004ac <main+0x238>)
  4002c0:	2102      	movs	r1, #2
  4002c2:	2203      	movs	r2, #3
  4002c4:	4798      	blx	r3

	/* Initialize display parameter */
	ili9325_display_opt.ul_width = ILI9325_LCD_WIDTH;
	ili9325_display_opt.ul_height = ILI9325_LCD_HEIGHT;
	ili9325_display_opt.foreground_color = COLOR_BLACK;
	ili9325_display_opt.background_color = COLOR_WHITE;
  4002c6:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
			| SMC_MODE_WRITE_MODE);

	/* Initialize display parameter */
	ili9325_display_opt.ul_width = ILI9325_LCD_WIDTH;
	ili9325_display_opt.ul_height = ILI9325_LCD_HEIGHT;
	ili9325_display_opt.foreground_color = COLOR_BLACK;
  4002ca:	2400      	movs	r4, #0

	smc_set_mode(SMC, ILI9325_LCD_CS, SMC_MODE_READ_MODE
			| SMC_MODE_WRITE_MODE);

	/* Initialize display parameter */
	ili9325_display_opt.ul_width = ILI9325_LCD_WIDTH;
  4002cc:	21f0      	movs	r1, #240	; 0xf0
	ili9325_display_opt.ul_height = ILI9325_LCD_HEIGHT;
  4002ce:	f44f 72a0 	mov.w	r2, #320	; 0x140
	ili9325_display_opt.foreground_color = COLOR_BLACK;
	ili9325_display_opt.background_color = COLOR_WHITE;
  4002d2:	9307      	str	r3, [sp, #28]

	/* Switch off backlight */
	aat31xx_disable_backlight();
  4002d4:	4b76      	ldr	r3, [pc, #472]	; (4004b0 <main+0x23c>)

	smc_set_mode(SMC, ILI9325_LCD_CS, SMC_MODE_READ_MODE
			| SMC_MODE_WRITE_MODE);

	/* Initialize display parameter */
	ili9325_display_opt.ul_width = ILI9325_LCD_WIDTH;
  4002d6:	9104      	str	r1, [sp, #16]
	ili9325_display_opt.ul_height = ILI9325_LCD_HEIGHT;
  4002d8:	9205      	str	r2, [sp, #20]
	ili9325_display_opt.foreground_color = COLOR_BLACK;
  4002da:	9406      	str	r4, [sp, #24]
	ili9325_display_opt.background_color = COLOR_WHITE;

	/* Switch off backlight */
	aat31xx_disable_backlight();
  4002dc:	4798      	blx	r3

	/* Initialize LCD */
	ili9325_init(&ili9325_display_opt);
  4002de:	4b75      	ldr	r3, [pc, #468]	; (4004b4 <main+0x240>)
  4002e0:	a804      	add	r0, sp, #16
  4002e2:	4798      	blx	r3

	/* Set backlight level */
	aat31xx_set_backlight(AAT31XX_MAX_BACKLIGHT_LEVEL);
  4002e4:	2010      	movs	r0, #16
  4002e6:	4b74      	ldr	r3, [pc, #464]	; (4004b8 <main+0x244>)
  4002e8:	4798      	blx	r3

	/* Turn on LCD */
	ili9325_display_on();
  4002ea:	4b74      	ldr	r3, [pc, #464]	; (4004bc <main+0x248>)
  4002ec:	4798      	blx	r3

	/* LCD display initialization */
	display_init();

	/* LCD display information */
	ili9325_fill(COLOR_TURQUOISE);
  4002ee:	4b74      	ldr	r3, [pc, #464]	; (4004c0 <main+0x24c>)
  4002f0:	4874      	ldr	r0, [pc, #464]	; (4004c4 <main+0x250>)
  4002f2:	4798      	blx	r3
	ili9325_draw_string(0, 20,
			(uint8_t *)"OV7740 image sensor\ncapture example");
  4002f4:	4620      	mov	r0, r4
  4002f6:	2114      	movs	r1, #20
  4002f8:	4a73      	ldr	r2, [pc, #460]	; (4004c8 <main+0x254>)
  4002fa:	47c8      	blx	r9
	ili9325_draw_string(0, 80,
			(uint8_t *)"Please Wait during \ninitialization");
  4002fc:	4620      	mov	r0, r4
  4002fe:	2150      	movs	r1, #80	; 0x50
  400300:	4a72      	ldr	r2, [pc, #456]	; (4004cc <main+0x258>)
  400302:	47c8      	blx	r9
 * \brief Configure SMC interface for SRAM.
 */
static void board_configure_sram( void )
{
	/* Enable peripheral clock */
	pmc_enable_periph_clk( ID_SMC );
  400304:	4b62      	ldr	r3, [pc, #392]	; (400490 <main+0x21c>)
  400306:	200a      	movs	r0, #10
  400308:	4798      	blx	r3

	/* Configure SMC interface for SRAM */
	smc_set_setup_timing(SMC, SRAM_CS, SMC_SETUP_NWE_SETUP(2)
			| SMC_SETUP_NCS_WR_SETUP(0)
			| SMC_SETUP_NRD_SETUP(3)
			| SMC_SETUP_NCS_RD_SETUP(0));
  40030a:	4621      	mov	r1, r4
  40030c:	4861      	ldr	r0, [pc, #388]	; (400494 <main+0x220>)
  40030e:	4a70      	ldr	r2, [pc, #448]	; (4004d0 <main+0x25c>)
  400310:	4b61      	ldr	r3, [pc, #388]	; (400498 <main+0x224>)
  400312:	4798      	blx	r3

	smc_set_pulse_timing(SMC, SRAM_CS, SMC_PULSE_NWE_PULSE(4)
			| SMC_PULSE_NCS_WR_PULSE(5)
			| SMC_PULSE_NRD_PULSE(4)
			| SMC_PULSE_NCS_RD_PULSE(6));
  400314:	4621      	mov	r1, r4
  400316:	485f      	ldr	r0, [pc, #380]	; (400494 <main+0x220>)
  400318:	4a6e      	ldr	r2, [pc, #440]	; (4004d4 <main+0x260>)
  40031a:	4b61      	ldr	r3, [pc, #388]	; (4004a0 <main+0x22c>)
  40031c:	4798      	blx	r3

	smc_set_cycle_timing(SMC, SRAM_CS, SMC_CYCLE_NWE_CYCLE(6)
			| SMC_CYCLE_NRD_CYCLE(7));
  40031e:	4621      	mov	r1, r4
  400320:	485c      	ldr	r0, [pc, #368]	; (400494 <main+0x220>)
  400322:	4a6d      	ldr	r2, [pc, #436]	; (4004d8 <main+0x264>)
  400324:	4b60      	ldr	r3, [pc, #384]	; (4004a8 <main+0x234>)
  400326:	4798      	blx	r3

	smc_set_mode(SMC, SRAM_CS, SMC_MODE_READ_MODE
			| SMC_MODE_WRITE_MODE);
  400328:	4621      	mov	r1, r4
  40032a:	2203      	movs	r2, #3
  40032c:	4859      	ldr	r0, [pc, #356]	; (400494 <main+0x220>)
  40032e:	4b5f      	ldr	r3, [pc, #380]	; (4004ac <main+0x238>)
  400330:	4798      	blx	r3
 * \brief Configure push button and initialize button_handler interrupt.
 */
static void configure_button(void)
{
	/* Configure PIO clock. */
	pmc_enable_periph_clk(PUSH_BUTTON_ID);
  400332:	4b57      	ldr	r3, [pc, #348]	; (400490 <main+0x21c>)
  400334:	200b      	movs	r0, #11
  400336:	4798      	blx	r3

	/* Adjust PIO debounce filter using a 10 Hz filter. */
	pio_set_debounce_filter(PUSH_BUTTON_PIO, PUSH_BUTTON_PIN_MSK, 10);
  400338:	4638      	mov	r0, r7
  40033a:	2104      	movs	r1, #4
  40033c:	220a      	movs	r2, #10
  40033e:	4b67      	ldr	r3, [pc, #412]	; (4004dc <main+0x268>)
  400340:	4798      	blx	r3

	/* Initialize PIO interrupt handler, see PIO definition in conf_board.h
	**/
	pio_handler_set(PUSH_BUTTON_PIO, PUSH_BUTTON_ID, PUSH_BUTTON_PIN_MSK,
			PUSH_BUTTON_ATTR, button_handler);
  400342:	4b67      	ldr	r3, [pc, #412]	; (4004e0 <main+0x26c>)
  400344:	9300      	str	r3, [sp, #0]
  400346:	2204      	movs	r2, #4
  400348:	210b      	movs	r1, #11
  40034a:	2379      	movs	r3, #121	; 0x79
  40034c:	f44f 6400 	mov.w	r4, #2048	; 0x800
  400350:	4638      	mov	r0, r7
  400352:	47a8      	blx	r5

	/* Enable PIO controller IRQs. */
	NVIC_EnableIRQ((IRQn_Type)PUSH_BUTTON_ID);

	/* Enable PIO interrupt lines. */
	pio_enable_interrupt(PUSH_BUTTON_PIO, PUSH_BUTTON_PIN_MSK);
  400354:	4638      	mov	r0, r7
  400356:	2104      	movs	r1, #4
  400358:	4b62      	ldr	r3, [pc, #392]	; (4004e4 <main+0x270>)
  40035a:	6034      	str	r4, [r6, #0]
  40035c:	4798      	blx	r3
static void init_vsync_interrupts(void)
{
	/* Initialize PIO interrupt handler, see PIO definition in conf_board.h
	**/
	pio_handler_set(OV7740_VSYNC_PIO, OV7740_VSYNC_ID, OV7740_VSYNC_MASK,
			OV7740_VSYNC_TYPE, vsync_handler);
  40035e:	4b62      	ldr	r3, [pc, #392]	; (4004e8 <main+0x274>)
  400360:	9300      	str	r3, [sp, #0]
  400362:	210b      	movs	r1, #11
  400364:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  400368:	2301      	movs	r3, #1
  40036a:	4638      	mov	r0, r7
  40036c:	47a8      	blx	r5
 * \param ul_id Corresponding PIO ID.
 */
static void pio_capture_init(Pio *p_pio, uint32_t ul_id)
{
	/* Enable periphral clock */
	pmc_enable_periph_clk(ul_id);
  40036e:	4b48      	ldr	r3, [pc, #288]	; (400490 <main+0x21c>)
  400370:	6034      	str	r4, [r6, #0]
  400372:	200b      	movs	r0, #11
  400374:	4798      	blx	r3

	/* Disable pio capture */
	p_pio->PIO_PCMR &= ~((uint32_t)PIO_PCMR_PCEN);
  400376:	f8d7 2150 	ldr.w	r2, [r7, #336]	; 0x150

	/* Init PIO capture*/
	pio_capture_init(OV_DATA_BUS_PIO, OV_DATA_BUS_ID);

	/* Turn on ov7740 image sensor using power pin */
	ov_power(true, OV_POWER_PIO, OV_POWER_MASK);
  40037a:	495c      	ldr	r1, [pc, #368]	; (4004ec <main+0x278>)
  40037c:	4b5c      	ldr	r3, [pc, #368]	; (4004f0 <main+0x27c>)
{
	/* Enable periphral clock */
	pmc_enable_periph_clk(ul_id);

	/* Disable pio capture */
	p_pio->PIO_PCMR &= ~((uint32_t)PIO_PCMR_PCEN);
  40037e:	f022 0201 	bic.w	r2, r2, #1
  400382:	f8c7 2150 	str.w	r2, [r7, #336]	; 0x150

	/* Disable rxbuff interrupt */
	p_pio->PIO_PCIDR |= PIO_PCIDR_RXBUFF;
  400386:	f8d7 2158 	ldr.w	r2, [r7, #344]	; 0x158
  40038a:	f042 0208 	orr.w	r2, r2, #8
  40038e:	f8c7 2158 	str.w	r2, [r7, #344]	; 0x158

	/* 32bit width*/
	p_pio->PIO_PCMR &= ~((uint32_t)PIO_PCMR_DSIZE_Msk);
  400392:	f8d7 2150 	ldr.w	r2, [r7, #336]	; 0x150
  400396:	f022 0230 	bic.w	r2, r2, #48	; 0x30
  40039a:	f8c7 2150 	str.w	r2, [r7, #336]	; 0x150
	p_pio->PIO_PCMR |= PIO_PCMR_DSIZE_WORD;
  40039e:	f8d7 2150 	ldr.w	r2, [r7, #336]	; 0x150
  4003a2:	f042 0220 	orr.w	r2, r2, #32
  4003a6:	f8c7 2150 	str.w	r2, [r7, #336]	; 0x150

	/* Only HSYNC and VSYNC enabled */
	p_pio->PIO_PCMR &= ~((uint32_t)PIO_PCMR_ALWYS);
  4003aa:	f8d7 2150 	ldr.w	r2, [r7, #336]	; 0x150
  4003ae:	f422 7200 	bic.w	r2, r2, #512	; 0x200
  4003b2:	f8c7 2150 	str.w	r2, [r7, #336]	; 0x150
	p_pio->PIO_PCMR &= ~((uint32_t)PIO_PCMR_HALFS);
  4003b6:	f8d7 2150 	ldr.w	r2, [r7, #336]	; 0x150
  4003ba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
  4003be:	f8c7 2150 	str.w	r2, [r7, #336]	; 0x150

#if !defined(DEFAULT_MODE_COLORED)
	/* Samples only data with even index */
	p_pio->PIO_PCMR |= PIO_PCMR_HALFS;
  4003c2:	f8d7 2150 	ldr.w	r2, [r7, #336]	; 0x150
  4003c6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
  4003ca:	f8c7 2150 	str.w	r2, [r7, #336]	; 0x150
	p_pio->PIO_PCMR &= ~((uint32_t)PIO_PCMR_FRSTS);
  4003ce:	f8d7 2150 	ldr.w	r2, [r7, #336]	; 0x150
  4003d2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
  4003d6:	f8c7 2150 	str.w	r2, [r7, #336]	; 0x150

	/* Init PIO capture*/
	pio_capture_init(OV_DATA_BUS_PIO, OV_DATA_BUS_ID);

	/* Turn on ov7740 image sensor using power pin */
	ov_power(true, OV_POWER_PIO, OV_POWER_MASK);
  4003da:	2001      	movs	r0, #1
  4003dc:	f44f 6280 	mov.w	r2, #1024	; 0x400
  4003e0:	4798      	blx	r3

	/* Init PCK0 to work at 24 Mhz */
	/* 96/4=24 Mhz */
	PMC->PMC_PCK[0] = (PMC_PCK_PRES_CLK_4 | PMC_PCK_CSS_PLLA_CLK);
  4003e2:	4b44      	ldr	r3, [pc, #272]	; (4004f4 <main+0x280>)
  4003e4:	2122      	movs	r1, #34	; 0x22
	PMC->PMC_SCER = PMC_SCER_PCK0;
  4003e6:	f44f 7280 	mov.w	r2, #256	; 0x100
	/* Turn on ov7740 image sensor using power pin */
	ov_power(true, OV_POWER_PIO, OV_POWER_MASK);

	/* Init PCK0 to work at 24 Mhz */
	/* 96/4=24 Mhz */
	PMC->PMC_PCK[0] = (PMC_PCK_PRES_CLK_4 | PMC_PCK_CSS_PLLA_CLK);
  4003ea:	6419      	str	r1, [r3, #64]	; 0x40
	PMC->PMC_SCER = PMC_SCER_PCK0;
	while (!(PMC->PMC_SCSR & PMC_SCSR_PCK0)) {
  4003ec:	4619      	mov	r1, r3
	ov_power(true, OV_POWER_PIO, OV_POWER_MASK);

	/* Init PCK0 to work at 24 Mhz */
	/* 96/4=24 Mhz */
	PMC->PMC_PCK[0] = (PMC_PCK_PRES_CLK_4 | PMC_PCK_CSS_PLLA_CLK);
	PMC->PMC_SCER = PMC_SCER_PCK0;
  4003ee:	601a      	str	r2, [r3, #0]
	while (!(PMC->PMC_SCSR & PMC_SCSR_PCK0)) {
  4003f0:	688b      	ldr	r3, [r1, #8]
  4003f2:	05da      	lsls	r2, r3, #23
  4003f4:	d5fc      	bpl.n	4003f0 <main+0x17c>
	}

	/* Enable TWI peripheral */
	pmc_enable_periph_clk(ID_BOARD_TWI);
  4003f6:	4b26      	ldr	r3, [pc, #152]	; (400490 <main+0x21c>)
  4003f8:	4c3f      	ldr	r4, [pc, #252]	; (4004f8 <main+0x284>)
  4003fa:	2013      	movs	r0, #19
  4003fc:	4798      	blx	r3

	/* Init TWI peripheral */
	opt.master_clk = sysclk_get_cpu_hz();
  4003fe:	493f      	ldr	r1, [pc, #252]	; (4004fc <main+0x288>)
	opt.speed      = TWI_CLK;
  400400:	4a3f      	ldr	r2, [pc, #252]	; (400500 <main+0x28c>)
	twi_master_init(BOARD_TWI, &opt);
  400402:	4b40      	ldr	r3, [pc, #256]	; (400504 <main+0x290>)

	/* Enable TWI peripheral */
	pmc_enable_periph_clk(ID_BOARD_TWI);

	/* Init TWI peripheral */
	opt.master_clk = sysclk_get_cpu_hz();
  400404:	9104      	str	r1, [sp, #16]
	opt.speed      = TWI_CLK;
	twi_master_init(BOARD_TWI, &opt);
  400406:	4840      	ldr	r0, [pc, #256]	; (400508 <main+0x294>)
	/* Enable TWI peripheral */
	pmc_enable_periph_clk(ID_BOARD_TWI);

	/* Init TWI peripheral */
	opt.master_clk = sysclk_get_cpu_hz();
	opt.speed      = TWI_CLK;
  400408:	9205      	str	r2, [sp, #20]
	twi_master_init(BOARD_TWI, &opt);
  40040a:	a904      	add	r1, sp, #16
  40040c:	4798      	blx	r3

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
  40040e:	4b1c      	ldr	r3, [pc, #112]	; (400480 <main+0x20c>)
  400410:	f44f 2200 	mov.w	r2, #524288	; 0x80000
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
  400414:	2100      	movs	r1, #0

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
  400416:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
  40041a:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
  40041e:	f883 1313 	strb.w	r1, [r3, #787]	; 0x313
    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
/*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  400422:	601a      	str	r2, [r3, #0]
	NVIC_ClearPendingIRQ(BOARD_TWI_IRQn);
	NVIC_SetPriority(BOARD_TWI_IRQn, 0);
	NVIC_EnableIRQ(BOARD_TWI_IRQn);

	/* ov7740 Initialization */
	while (ov_init(BOARD_TWI) == 1) {
  400424:	4838      	ldr	r0, [pc, #224]	; (400508 <main+0x294>)
  400426:	47a0      	blx	r4
  400428:	2801      	cmp	r0, #1
  40042a:	d0fb      	beq.n	400424 <main+0x1b0>
	}

	/* ov7740 configuration */
	ov_configure(BOARD_TWI, QVGA_YUV422_20FPS);
  40042c:	2102      	movs	r1, #2
  40042e:	4b37      	ldr	r3, [pc, #220]	; (40050c <main+0x298>)
  400430:	4835      	ldr	r0, [pc, #212]	; (400508 <main+0x294>)
    g_ms_ticks++;
}

void time_tick_init(void)
{
    g_ms_ticks = 0;
  400432:	4d37      	ldr	r5, [pc, #220]	; (400510 <main+0x29c>)

	/* Set cap_rows value*/
	g_us_cap_rows = IMAGE_HEIGHT;

	/* Enable vsync interrupt*/
	pio_enable_interrupt(OV7740_VSYNC_PIO, OV7740_VSYNC_MASK);
  400434:	f8df b044 	ldr.w	fp, [pc, #68]	; 40047c <main+0x208>
	{
		*((volatile uint8_t *)(BOARD_ILI9325_ADDR)) = lcd_index; /* ILI9325 index register address */
	}
	static inline void LCD_WD(uint8_t lcd_data)
	{
		*((volatile uint8_t *)((BOARD_ILI9325_ADDR) | (BOARD_ILI9325_RS))) = lcd_data;
  400438:	4c36      	ldr	r4, [pc, #216]	; (400514 <main+0x2a0>)
	/* ov7740 Initialization */
	while (ov_init(BOARD_TWI) == 1) {
	}

	/* ov7740 configuration */
	ov_configure(BOARD_TWI, QVGA_YUV422_20FPS);
  40043a:	4798      	blx	r3

	/* Wait 3 seconds to let the image sensor to adapt to environment */
	delay_ms(3000);
  40043c:	4836      	ldr	r0, [pc, #216]	; (400518 <main+0x2a4>)
  40043e:	4b37      	ldr	r3, [pc, #220]	; (40051c <main+0x2a8>)
  400440:	4798      	blx	r3

	/* OV7740 image sensor initialization*/
	capture_init();

	/* LCD display information*/
	ili9325_fill(COLOR_TURQUOISE);
  400442:	4b1f      	ldr	r3, [pc, #124]	; (4004c0 <main+0x24c>)
  400444:	481f      	ldr	r0, [pc, #124]	; (4004c4 <main+0x250>)
  400446:	4798      	blx	r3
	ili9325_draw_string(0, 20,
			(uint8_t *)"OV7740 image sensor\ncapture example");
  400448:	2000      	movs	r0, #0
  40044a:	2114      	movs	r1, #20
  40044c:	4a1e      	ldr	r2, [pc, #120]	; (4004c8 <main+0x254>)
  40044e:	47c8      	blx	r9
	ili9325_draw_string(0, 80,
			(uint8_t *)"Please Press button\nto start processing\n barcodes");
  400450:	2000      	movs	r0, #0
  400452:	2150      	movs	r1, #80	; 0x50
  400454:	4a32      	ldr	r2, [pc, #200]	; (400520 <main+0x2ac>)
  400456:	47c8      	blx	r9
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1) > SysTick_LOAD_RELOAD_Msk)  return (1);      /* Reload value impossible */

  SysTick->LOAD  = ticks - 1;                                  /* set reload register */
  400458:	4b32      	ldr	r3, [pc, #200]	; (400524 <main+0x2b0>)
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  40045a:	4933      	ldr	r1, [pc, #204]	; (400528 <main+0x2b4>)
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1) > SysTick_LOAD_RELOAD_Msk)  return (1);      /* Reload value impossible */

  SysTick->LOAD  = ticks - 1;                                  /* set reload register */
  40045c:	4833      	ldr	r0, [pc, #204]	; (40052c <main+0x2b8>)
    g_ms_ticks++;
}

void time_tick_init(void)
{
    g_ms_ticks = 0;
  40045e:	2200      	movs	r2, #0
  400460:	60ea      	str	r2, [r5, #12]
  400462:	6058      	str	r0, [r3, #4]
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  400464:	20f0      	movs	r0, #240	; 0xf0
  400466:	f881 0023 	strb.w	r0, [r1, #35]	; 0x23
  SysTick->LOAD  = ticks - 1;                                  /* set reload register */
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                    /* Enable SysTick IRQ and SysTick Timer */
  40046a:	2107      	movs	r1, #7
{
  if ((ticks - 1) > SysTick_LOAD_RELOAD_Msk)  return (1);      /* Reload value impossible */

  SysTick->LOAD  = ticks - 1;                                  /* set reload register */
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
  40046c:	609a      	str	r2, [r3, #8]
	
	time_tick_init();

	while (1) {
			
		if (g_ul_push_button_trigger) {
  40046e:	462e      	mov	r6, r5
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                    /* Enable SysTick IRQ and SysTick Timer */
  400470:	6019      	str	r1, [r3, #0]
	pio_enable_interrupt(OV7740_VSYNC_PIO, OV7740_VSYNC_MASK);

	/* Capture acquisition will start on rising edge of Vsync signal.
	 * So wait g_vsync_flag = 1 before start process
	 */
	while (!g_ul_vsync_flag) {
  400472:	46aa      	mov	sl, r5
  400474:	e062      	b.n	40053c <main+0x2c8>
  400476:	bf00      	nop
  400478:	004007e5 	.word	0x004007e5
  40047c:	400e0e00 	.word	0x400e0e00
  400480:	e000e100 	.word	0xe000e100
  400484:	00401569 	.word	0x00401569
  400488:	004008d9 	.word	0x004008d9
  40048c:	0040195d 	.word	0x0040195d
  400490:	004019b1 	.word	0x004019b1
  400494:	400e0000 	.word	0x400e0000
  400498:	00401369 	.word	0x00401369
  40049c:	0a0a0404 	.word	0x0a0a0404
  4004a0:	00401371 	.word	0x00401371
  4004a4:	0016000a 	.word	0x0016000a
  4004a8:	00401379 	.word	0x00401379
  4004ac:	00401381 	.word	0x00401381
  4004b0:	00400c89 	.word	0x00400c89
  4004b4:	00400cad 	.word	0x00400cad
  4004b8:	00400c2d 	.word	0x00400c2d
  4004bc:	004010c1 	.word	0x004010c1
  4004c0:	004010e1 	.word	0x004010e1
  4004c4:	0040e0d0 	.word	0x0040e0d0
  4004c8:	0040f7cc 	.word	0x0040f7cc
  4004cc:	0040f7f0 	.word	0x0040f7f0
  4004d0:	00030002 	.word	0x00030002
  4004d4:	06040504 	.word	0x06040504
  4004d8:	00070006 	.word	0x00070006
  4004dc:	00401389 	.word	0x00401389
  4004e0:	0040020d 	.word	0x0040020d
  4004e4:	004013d5 	.word	0x004013d5
  4004e8:	00400201 	.word	0x00400201
  4004ec:	400e1200 	.word	0x400e1200
  4004f0:	00400a91 	.word	0x00400a91
  4004f4:	400e0400 	.word	0x400e0400
  4004f8:	00400ab1 	.word	0x00400ab1
  4004fc:	07270e00 	.word	0x07270e00
  400500:	00061a80 	.word	0x00061a80
  400504:	004019f1 	.word	0x004019f1
  400508:	40018000 	.word	0x40018000
  40050c:	00400bb5 	.word	0x00400bb5
  400510:	20000d40 	.word	0x20000d40
  400514:	62000002 	.word	0x62000002
  400518:	01885e6e 	.word	0x01885e6e
  40051c:	20000001 	.word	0x20000001
  400520:	0040f814 	.word	0x0040f814
  400524:	e000e010 	.word	0xe000e010
  400528:	e000ed00 	.word	0xe000ed00
  40052c:	0001d4bf 	.word	0x0001d4bf
  400530:	004011dd 	.word	0x004011dd

			}
*/
		} 
		
		if (g_display_splash) {
  400534:	68ab      	ldr	r3, [r5, #8]
  400536:	2b00      	cmp	r3, #0
  400538:	f040 80d5 	bne.w	4006e6 <main+0x472>
	
	time_tick_init();

	while (1) {
			
		if (g_ul_push_button_trigger) {
  40053c:	686b      	ldr	r3, [r5, #4]
  40053e:	2b00      	cmp	r3, #0
  400540:	d0f8      	beq.n	400534 <main+0x2c0>
 * \brief Start picture capture.
 */
static void start_capture(void)
{
	/* Set capturing destination address*/
	g_p_uc_cap_dest_buf = (uint8_t *)CAP_DEST;
  400542:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
    SysTick_Config(sysclk_get_cpu_hz() / 1000); 
}

uint32_t time_tick_get(void)
{
    return g_ms_ticks;
  400546:	68f3      	ldr	r3, [r6, #12]
 * \brief Start picture capture.
 */
static void start_capture(void)
{
	/* Set capturing destination address*/
	g_p_uc_cap_dest_buf = (uint8_t *)CAP_DEST;
  400548:	6172      	str	r2, [r6, #20]

	/* Set cap_rows value*/
	g_us_cap_rows = IMAGE_HEIGHT;
  40054a:	4a88      	ldr	r2, [pc, #544]	; (40076c <main+0x4f8>)
			
		if (g_ul_push_button_trigger) {

			/* Capture a picture and send corresponding data to external
			 * memory */			
			g_ul_begin_capture_time = time_tick_get();
  40054c:	6133      	str	r3, [r6, #16]
{
	/* Set capturing destination address*/
	g_p_uc_cap_dest_buf = (uint8_t *)CAP_DEST;

	/* Set cap_rows value*/
	g_us_cap_rows = IMAGE_HEIGHT;
  40054e:	23f0      	movs	r3, #240	; 0xf0
  400550:	8013      	strh	r3, [r2, #0]

	/* Enable vsync interrupt*/
	pio_enable_interrupt(OV7740_VSYNC_PIO, OV7740_VSYNC_MASK);
  400552:	4887      	ldr	r0, [pc, #540]	; (400770 <main+0x4fc>)
  400554:	4b87      	ldr	r3, [pc, #540]	; (400774 <main+0x500>)
  400556:	f44f 4100 	mov.w	r1, #32768	; 0x8000
  40055a:	4798      	blx	r3

	/* Capture acquisition will start on rising edge of Vsync signal.
	 * So wait g_vsync_flag = 1 before start process
	 */
	while (!g_ul_vsync_flag) {
  40055c:	682b      	ldr	r3, [r5, #0]
  40055e:	2b00      	cmp	r3, #0
  400560:	d0fc      	beq.n	40055c <main+0x2e8>
	}

	/* Disable vsync interrupt*/
	pio_disable_interrupt(OV7740_VSYNC_PIO, OV7740_VSYNC_MASK);
  400562:	f44f 4100 	mov.w	r1, #32768	; 0x8000
  400566:	4882      	ldr	r0, [pc, #520]	; (400770 <main+0x4fc>)
  400568:	4b83      	ldr	r3, [pc, #524]	; (400778 <main+0x504>)
  40056a:	4798      	blx	r3

	/* Enable pio capture*/
	pio_capture_enable(OV7740_DATA_BUS_PIO);
  40056c:	4880      	ldr	r0, [pc, #512]	; (400770 <main+0x4fc>)
  40056e:	4b83      	ldr	r3, [pc, #524]	; (40077c <main+0x508>)
  400570:	4798      	blx	r3

	/* Capture data and send it to external SRAM memory thanks to PDC
	 * feature */
	pio_capture_to_buffer(OV7740_DATA_BUS_PIO, g_p_uc_cap_dest_buf,
			(g_us_cap_line * g_us_cap_rows) >> 2);
  400572:	4b7e      	ldr	r3, [pc, #504]	; (40076c <main+0x4f8>)
 */
static uint8_t pio_capture_to_buffer(Pio *p_pio, uint8_t *uc_buf,
		uint32_t ul_size)
{
	/* Check if the first PDC bank is free */
	if ((p_pio->PIO_RCR == 0) && (p_pio->PIO_RNCR == 0)) {
  400574:	f8db 216c 	ldr.w	r2, [fp, #364]	; 0x16c
	pio_capture_enable(OV7740_DATA_BUS_PIO);

	/* Capture data and send it to external SRAM memory thanks to PDC
	 * feature */
	pio_capture_to_buffer(OV7740_DATA_BUS_PIO, g_p_uc_cap_dest_buf,
			(g_us_cap_line * g_us_cap_rows) >> 2);
  400578:	8859      	ldrh	r1, [r3, #2]
  40057a:	881b      	ldrh	r3, [r3, #0]
  40057c:	f8da 0014 	ldr.w	r0, [sl, #20]
  400580:	fb03 f301 	mul.w	r3, r3, r1
  400584:	109b      	asrs	r3, r3, #2
 */
static uint8_t pio_capture_to_buffer(Pio *p_pio, uint8_t *uc_buf,
		uint32_t ul_size)
{
	/* Check if the first PDC bank is free */
	if ((p_pio->PIO_RCR == 0) && (p_pio->PIO_RNCR == 0)) {
  400586:	2a00      	cmp	r2, #0
  400588:	f040 80e5 	bne.w	400756 <main+0x4e2>
  40058c:	f8db 217c 	ldr.w	r2, [fp, #380]	; 0x17c
  400590:	2a00      	cmp	r2, #0
  400592:	f040 80e0 	bne.w	400756 <main+0x4e2>
		p_pio->PIO_RPR = (uint32_t)uc_buf;
		p_pio->PIO_RCR = ul_size;
		p_pio->PIO_PTCR = PIO_PTCR_RXTEN;
  400596:	2201      	movs	r2, #1
static uint8_t pio_capture_to_buffer(Pio *p_pio, uint8_t *uc_buf,
		uint32_t ul_size)
{
	/* Check if the first PDC bank is free */
	if ((p_pio->PIO_RCR == 0) && (p_pio->PIO_RNCR == 0)) {
		p_pio->PIO_RPR = (uint32_t)uc_buf;
  400598:	f8cb 0168 	str.w	r0, [fp, #360]	; 0x168
		p_pio->PIO_RCR = ul_size;
  40059c:	f8cb 316c 	str.w	r3, [fp, #364]	; 0x16c
		p_pio->PIO_PTCR = PIO_PTCR_RXTEN;
  4005a0:	f8cb 2188 	str.w	r2, [fp, #392]	; 0x188
	 * feature */
	pio_capture_to_buffer(OV7740_DATA_BUS_PIO, g_p_uc_cap_dest_buf,
			(g_us_cap_line * g_us_cap_rows) >> 2);

	/* Wait end of capture*/
	while (!((OV7740_DATA_BUS_PIO->PIO_PCISR & PIO_PCIMR_RXBUFF) ==
  4005a4:	f8db 3160 	ldr.w	r3, [fp, #352]	; 0x160
  4005a8:	071b      	lsls	r3, r3, #28
  4005aa:	d5fb      	bpl.n	4005a4 <main+0x330>
			PIO_PCIMR_RXBUFF)) {
	}

	/* Disable pio capture*/
	pio_capture_disable(OV7740_DATA_BUS_PIO);
  4005ac:	4870      	ldr	r0, [pc, #448]	; (400770 <main+0x4fc>)
  4005ae:	4b74      	ldr	r3, [pc, #464]	; (400780 <main+0x50c>)
			ILI9325_ENTRY_MODE_DFM | ILI9325_ENTRY_MODE_TRI |
			ILI9325_ENTRY_MODE_ORG) >> 8) & 0xFF);
	LCD_WD((ILI9325_ENTRY_MODE_BGR | ILI9325_ENTRY_MODE_AM |
			ILI9325_ENTRY_MODE_DFM | ILI9325_ENTRY_MODE_TRI |
			ILI9325_ENTRY_MODE_ORG) & 0xFF);
	ili9325_draw_prepare(0, 0, IMAGE_HEIGHT, IMAGE_WIDTH);
  4005b0:	4f74      	ldr	r7, [pc, #464]	; (400784 <main+0x510>)
	while (!((OV7740_DATA_BUS_PIO->PIO_PCISR & PIO_PCIMR_RXBUFF) ==
			PIO_PCIMR_RXBUFF)) {
	}

	/* Disable pio capture*/
	pio_capture_disable(OV7740_DATA_BUS_PIO);
  4005b2:	4798      	blx	r3

	/* Reset vsync flag*/
	g_ul_vsync_flag = false;
  4005b4:	2000      	movs	r0, #0

/* Define EBI access for ILI9325 8-bit System Interface.*/
#if defined(BOARD_ILI9325_ADDR) && defined (BOARD_ILI9325_RS)
	static inline void LCD_IR(uint8_t lcd_index)
	{
		*((volatile uint8_t *)(BOARD_ILI9325_ADDR)) = lcd_index; /* ILI9325 index register address */
  4005b6:	f04f 43c4 	mov.w	r3, #1644167168	; 0x62000000
  4005ba:	6028      	str	r0, [r5, #0]
  4005bc:	f04f 0c03 	mov.w	ip, #3
	}
	static inline void LCD_WD(uint8_t lcd_data)
	{
		*((volatile uint8_t *)((BOARD_ILI9325_ADDR) | (BOARD_ILI9325_RS))) = lcd_data;
  4005c0:	21d0      	movs	r1, #208	; 0xd0
  4005c2:	2288      	movs	r2, #136	; 0x88
    SysTick_Config(sysclk_get_cpu_hz() / 1000); 
}

uint32_t time_tick_get(void)
{
    return g_ms_ticks;
  4005c4:	f8d5 e00c 	ldr.w	lr, [r5, #12]

/* Define EBI access for ILI9325 8-bit System Interface.*/
#if defined(BOARD_ILI9325_ADDR) && defined (BOARD_ILI9325_RS)
	static inline void LCD_IR(uint8_t lcd_index)
	{
		*((volatile uint8_t *)(BOARD_ILI9325_ADDR)) = lcd_index; /* ILI9325 index register address */
  4005c8:	7018      	strb	r0, [r3, #0]
  4005ca:	f883 c000 	strb.w	ip, [r3]
	}
	static inline void LCD_WD(uint8_t lcd_data)
	{
		*((volatile uint8_t *)((BOARD_ILI9325_ADDR) | (BOARD_ILI9325_RS))) = lcd_data;
  4005ce:	7021      	strb	r1, [r4, #0]
			ILI9325_ENTRY_MODE_DFM | ILI9325_ENTRY_MODE_TRI |
			ILI9325_ENTRY_MODE_ORG) >> 8) & 0xFF);
	LCD_WD((ILI9325_ENTRY_MODE_BGR | ILI9325_ENTRY_MODE_AM |
			ILI9325_ENTRY_MODE_DFM | ILI9325_ENTRY_MODE_TRI |
			ILI9325_ENTRY_MODE_ORG) & 0xFF);
	ili9325_draw_prepare(0, 0, IMAGE_HEIGHT, IMAGE_WIDTH);
  4005d0:	f44f 73a0 	mov.w	r3, #320	; 0x140
  4005d4:	7022      	strb	r2, [r4, #0]
  4005d6:	4601      	mov	r1, r0
  4005d8:	22f0      	movs	r2, #240	; 0xf0

			/* Capture a picture and send corresponding data to external
			 * memory */			
			g_ul_begin_capture_time = time_tick_get();
			start_capture();
			g_ul_end_capture_time = time_tick_get();
  4005da:	f8c5 e018 	str.w	lr, [r5, #24]
static void draw_frame_yuv_bw8( void )
{
	volatile uint32_t ul_cursor;
	uint8_t *p_uc_data;

	p_uc_data = (uint8_t *)g_p_uc_cap_dest_buf;
  4005de:	f8d5 8014 	ldr.w	r8, [r5, #20]
			ILI9325_ENTRY_MODE_DFM | ILI9325_ENTRY_MODE_TRI |
			ILI9325_ENTRY_MODE_ORG) >> 8) & 0xFF);
	LCD_WD((ILI9325_ENTRY_MODE_BGR | ILI9325_ENTRY_MODE_AM |
			ILI9325_ENTRY_MODE_DFM | ILI9325_ENTRY_MODE_TRI |
			ILI9325_ENTRY_MODE_ORG) & 0xFF);
	ili9325_draw_prepare(0, 0, IMAGE_HEIGHT, IMAGE_WIDTH);
  4005e2:	47b8      	blx	r7

	/* LCD pixel has 24bit data. In black and White mode data has 8bit only
	 * so
	 * this data must be written three time in LCD memory.
	 */
	for (ul_cursor = IMAGE_WIDTH * IMAGE_HEIGHT; ul_cursor != 0;
  4005e4:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
  4005e8:	9303      	str	r3, [sp, #12]
  4005ea:	9b03      	ldr	r3, [sp, #12]
  4005ec:	b173      	cbz	r3, 40060c <main+0x398>
			ul_cursor--, p_uc_data++) {
		/* Black and White using Y */
		LCD_WD( *p_uc_data );
  4005ee:	f898 3000 	ldrb.w	r3, [r8]
  4005f2:	7023      	strb	r3, [r4, #0]
		LCD_WD( *p_uc_data );
  4005f4:	f898 3000 	ldrb.w	r3, [r8]
  4005f8:	7023      	strb	r3, [r4, #0]
		LCD_WD( *p_uc_data );
  4005fa:	f818 3b01 	ldrb.w	r3, [r8], #1
  4005fe:	7023      	strb	r3, [r4, #0]

	/* LCD pixel has 24bit data. In black and White mode data has 8bit only
	 * so
	 * this data must be written three time in LCD memory.
	 */
	for (ul_cursor = IMAGE_WIDTH * IMAGE_HEIGHT; ul_cursor != 0;
  400600:	9b03      	ldr	r3, [sp, #12]
  400602:	3b01      	subs	r3, #1
  400604:	9303      	str	r3, [sp, #12]
  400606:	9b03      	ldr	r3, [sp, #12]
  400608:	2b00      	cmp	r3, #0
  40060a:	d1f0      	bne.n	4005ee <main+0x37a>
			 * LCD */
			_display();

			g_ul_begin_process_time = time_tick_get();

			if ( zbar_hiku_process(barcode, barcode_type) > 0 ){
  40060c:	485e      	ldr	r0, [pc, #376]	; (400788 <main+0x514>)
    SysTick_Config(sysclk_get_cpu_hz() / 1000); 
}

uint32_t time_tick_get(void)
{
    return g_ms_ticks;
  40060e:	68eb      	ldr	r3, [r5, #12]
			
			/* Load picture data from external memory and display it on the
			 * LCD */
			_display();

			g_ul_begin_process_time = time_tick_get();
  400610:	61eb      	str	r3, [r5, #28]

			if ( zbar_hiku_process(barcode, barcode_type) > 0 ){
  400612:	f100 0134 	add.w	r1, r0, #52	; 0x34
  400616:	4b5d      	ldr	r3, [pc, #372]	; (40078c <main+0x518>)
  400618:	4798      	blx	r3
  40061a:	2800      	cmp	r0, #0
  40061c:	d08a      	beq.n	400534 <main+0x2c0>
    SysTick_Config(sysclk_get_cpu_hz() / 1000); 
}

uint32_t time_tick_get(void)
{
    return g_ms_ticks;
  40061e:	68f3      	ldr	r3, [r6, #12]
			g_ul_begin_process_time = time_tick_get();

			if ( zbar_hiku_process(barcode, barcode_type) > 0 ){

				g_ul_end_process_time = time_tick_get();
				sprintf(capture_time, "%u ms", g_ul_end_capture_time - g_ul_begin_capture_time);
  400620:	69b2      	ldr	r2, [r6, #24]

			g_ul_begin_process_time = time_tick_get();

			if ( zbar_hiku_process(barcode, barcode_type) > 0 ){

				g_ul_end_process_time = time_tick_get();
  400622:	f8c6 3088 	str.w	r3, [r6, #136]	; 0x88
				sprintf(capture_time, "%u ms", g_ul_end_capture_time - g_ul_begin_capture_time);
  400626:	6933      	ldr	r3, [r6, #16]
  400628:	4959      	ldr	r1, [pc, #356]	; (400790 <main+0x51c>)
  40062a:	485a      	ldr	r0, [pc, #360]	; (400794 <main+0x520>)
  40062c:	1ad2      	subs	r2, r2, r3
  40062e:	4b5a      	ldr	r3, [pc, #360]	; (400798 <main+0x524>)
  400630:	4798      	blx	r3
				sprintf(process_time, "%u ms", g_ul_end_process_time - g_ul_begin_process_time);
  400632:	69f3      	ldr	r3, [r6, #28]
  400634:	f8d6 2088 	ldr.w	r2, [r6, #136]	; 0x88
  400638:	4955      	ldr	r1, [pc, #340]	; (400790 <main+0x51c>)
  40063a:	4858      	ldr	r0, [pc, #352]	; (40079c <main+0x528>)
  40063c:	1ad2      	subs	r2, r2, r3
  40063e:	4b56      	ldr	r3, [pc, #344]	; (400798 <main+0x524>)
  400640:	4798      	blx	r3
				sprintf(total_time, "%u ms", time_tick_get() - g_ul_begin_capture_time);
  400642:	6933      	ldr	r3, [r6, #16]
    SysTick_Config(sysclk_get_cpu_hz() / 1000); 
}

uint32_t time_tick_get(void)
{
    return g_ms_ticks;
  400644:	68f2      	ldr	r2, [r6, #12]
			if ( zbar_hiku_process(barcode, barcode_type) > 0 ){

				g_ul_end_process_time = time_tick_get();
				sprintf(capture_time, "%u ms", g_ul_end_capture_time - g_ul_begin_capture_time);
				sprintf(process_time, "%u ms", g_ul_end_process_time - g_ul_begin_process_time);
				sprintf(total_time, "%u ms", time_tick_get() - g_ul_begin_capture_time);
  400646:	4952      	ldr	r1, [pc, #328]	; (400790 <main+0x51c>)
  400648:	4855      	ldr	r0, [pc, #340]	; (4007a0 <main+0x52c>)
  40064a:	1ad2      	subs	r2, r2, r3
  40064c:	4b52      	ldr	r3, [pc, #328]	; (400798 <main+0x524>)
  40064e:	4798      	blx	r3
static void display_init(void)
{
	struct ili9325_opt_t ili9325_display_opt;

	/* Enable peripheral clock */
	pmc_enable_periph_clk( ID_SMC );
  400650:	4b54      	ldr	r3, [pc, #336]	; (4007a4 <main+0x530>)
  400652:	200a      	movs	r0, #10
  400654:	4798      	blx	r3

	/* Configure SMC interface for LCD */
	smc_set_setup_timing(SMC, ILI9325_LCD_CS, SMC_SETUP_NWE_SETUP(2)
			| SMC_SETUP_NCS_WR_SETUP(2)
			| SMC_SETUP_NRD_SETUP(2)
			| SMC_SETUP_NCS_RD_SETUP(2));
  400656:	4854      	ldr	r0, [pc, #336]	; (4007a8 <main+0x534>)
  400658:	4b54      	ldr	r3, [pc, #336]	; (4007ac <main+0x538>)
  40065a:	2102      	movs	r1, #2
  40065c:	f04f 3202 	mov.w	r2, #33686018	; 0x2020202
  400660:	4798      	blx	r3

	smc_set_pulse_timing(SMC, ILI9325_LCD_CS, SMC_PULSE_NWE_PULSE(4)
			| SMC_PULSE_NCS_WR_PULSE(4)
			| SMC_PULSE_NRD_PULSE(10)
			| SMC_PULSE_NCS_RD_PULSE(10));
  400662:	4851      	ldr	r0, [pc, #324]	; (4007a8 <main+0x534>)
  400664:	4a52      	ldr	r2, [pc, #328]	; (4007b0 <main+0x53c>)
  400666:	4b53      	ldr	r3, [pc, #332]	; (4007b4 <main+0x540>)
  400668:	2102      	movs	r1, #2
  40066a:	4798      	blx	r3

	smc_set_cycle_timing(SMC, ILI9325_LCD_CS, SMC_CYCLE_NWE_CYCLE(10)
			| SMC_CYCLE_NRD_CYCLE(22));
  40066c:	484e      	ldr	r0, [pc, #312]	; (4007a8 <main+0x534>)
  40066e:	4a52      	ldr	r2, [pc, #328]	; (4007b8 <main+0x544>)
  400670:	4b52      	ldr	r3, [pc, #328]	; (4007bc <main+0x548>)
  400672:	2102      	movs	r1, #2
  400674:	4798      	blx	r3

	smc_set_mode(SMC, ILI9325_LCD_CS, SMC_MODE_READ_MODE
			| SMC_MODE_WRITE_MODE);
  400676:	484c      	ldr	r0, [pc, #304]	; (4007a8 <main+0x534>)
  400678:	4b51      	ldr	r3, [pc, #324]	; (4007c0 <main+0x54c>)
  40067a:	2102      	movs	r1, #2
  40067c:	2203      	movs	r2, #3
  40067e:	4798      	blx	r3

	/* Initialize display parameter */
	ili9325_display_opt.ul_width = ILI9325_LCD_WIDTH;
	ili9325_display_opt.ul_height = ILI9325_LCD_HEIGHT;
	ili9325_display_opt.foreground_color = COLOR_BLACK;
	ili9325_display_opt.background_color = COLOR_WHITE;
  400680:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
			| SMC_MODE_WRITE_MODE);

	/* Initialize display parameter */
	ili9325_display_opt.ul_width = ILI9325_LCD_WIDTH;
	ili9325_display_opt.ul_height = ILI9325_LCD_HEIGHT;
	ili9325_display_opt.foreground_color = COLOR_BLACK;
  400684:	f04f 0800 	mov.w	r8, #0

	smc_set_mode(SMC, ILI9325_LCD_CS, SMC_MODE_READ_MODE
			| SMC_MODE_WRITE_MODE);

	/* Initialize display parameter */
	ili9325_display_opt.ul_width = ILI9325_LCD_WIDTH;
  400688:	21f0      	movs	r1, #240	; 0xf0
	ili9325_display_opt.ul_height = ILI9325_LCD_HEIGHT;
  40068a:	f44f 72a0 	mov.w	r2, #320	; 0x140
	ili9325_display_opt.foreground_color = COLOR_BLACK;
	ili9325_display_opt.background_color = COLOR_WHITE;
  40068e:	9307      	str	r3, [sp, #28]

	/* Switch off backlight */
	aat31xx_disable_backlight();
  400690:	4b4c      	ldr	r3, [pc, #304]	; (4007c4 <main+0x550>)

	smc_set_mode(SMC, ILI9325_LCD_CS, SMC_MODE_READ_MODE
			| SMC_MODE_WRITE_MODE);

	/* Initialize display parameter */
	ili9325_display_opt.ul_width = ILI9325_LCD_WIDTH;
  400692:	9104      	str	r1, [sp, #16]
	ili9325_display_opt.ul_height = ILI9325_LCD_HEIGHT;
  400694:	9205      	str	r2, [sp, #20]
	ili9325_display_opt.foreground_color = COLOR_BLACK;
  400696:	f8cd 8018 	str.w	r8, [sp, #24]
	ili9325_display_opt.background_color = COLOR_WHITE;

	/* Switch off backlight */
	aat31xx_disable_backlight();
  40069a:	4798      	blx	r3

	/* Initialize LCD */
	ili9325_init(&ili9325_display_opt);
  40069c:	4b4a      	ldr	r3, [pc, #296]	; (4007c8 <main+0x554>)
  40069e:	a804      	add	r0, sp, #16
  4006a0:	4798      	blx	r3

	/* Set backlight level */
	aat31xx_set_backlight(AAT31XX_MAX_BACKLIGHT_LEVEL);
  4006a2:	2010      	movs	r0, #16
  4006a4:	4b49      	ldr	r3, [pc, #292]	; (4007cc <main+0x558>)
  4006a6:	4798      	blx	r3

	/* Turn on LCD */
	ili9325_display_on();
  4006a8:	4b49      	ldr	r3, [pc, #292]	; (4007d0 <main+0x55c>)
  4006aa:	4798      	blx	r3
				sprintf(total_time, "%u ms", time_tick_get() - g_ul_begin_capture_time);


				//printf("decoded %s symbol \"%s\"\n", zbar_get_symbol_name(typ), data);
				display_init();
				ili9325_fill(COLOR_BLUE);
  4006ac:	4b49      	ldr	r3, [pc, #292]	; (4007d4 <main+0x560>)
  4006ae:	20ff      	movs	r0, #255	; 0xff
  4006b0:	4798      	blx	r3
				ili9325_draw_string(0, 20, (uint8_t *)barcode);
  4006b2:	4640      	mov	r0, r8
  4006b4:	2114      	movs	r1, #20
  4006b6:	4a34      	ldr	r2, [pc, #208]	; (400788 <main+0x514>)
  4006b8:	47c8      	blx	r9
				ili9325_draw_string(0, 80, (uint8_t *)barcode_type);
  4006ba:	4640      	mov	r0, r8
  4006bc:	2150      	movs	r1, #80	; 0x50
  4006be:	4a46      	ldr	r2, [pc, #280]	; (4007d8 <main+0x564>)
  4006c0:	47c8      	blx	r9


				ili9325_draw_string(0, 100, (uint8_t *)capture_time );
  4006c2:	4640      	mov	r0, r8
  4006c4:	2164      	movs	r1, #100	; 0x64
  4006c6:	4a33      	ldr	r2, [pc, #204]	; (400794 <main+0x520>)
  4006c8:	47c8      	blx	r9
				ili9325_draw_string(0, 120, (uint8_t *)process_time );
  4006ca:	4640      	mov	r0, r8
  4006cc:	2178      	movs	r1, #120	; 0x78
  4006ce:	4a33      	ldr	r2, [pc, #204]	; (40079c <main+0x528>)
  4006d0:	47c8      	blx	r9
				ili9325_draw_string(0, 140, (uint8_t *)total_time );
  4006d2:	4640      	mov	r0, r8
  4006d4:	218c      	movs	r1, #140	; 0x8c
  4006d6:	4a32      	ldr	r2, [pc, #200]	; (4007a0 <main+0x52c>)
  4006d8:	47c8      	blx	r9

				g_ul_push_button_trigger = false;
  4006da:	f8c6 8004 	str.w	r8, [r6, #4]

			}
*/
		} 
		
		if (g_display_splash) {
  4006de:	68ab      	ldr	r3, [r5, #8]
  4006e0:	2b00      	cmp	r3, #0
  4006e2:	f43f af2b 	beq.w	40053c <main+0x2c8>
static void display_init(void)
{
	struct ili9325_opt_t ili9325_display_opt;

	/* Enable peripheral clock */
	pmc_enable_periph_clk( ID_SMC );
  4006e6:	4b2f      	ldr	r3, [pc, #188]	; (4007a4 <main+0x530>)
  4006e8:	200a      	movs	r0, #10
  4006ea:	4798      	blx	r3

	/* Configure SMC interface for LCD */
	smc_set_setup_timing(SMC, ILI9325_LCD_CS, SMC_SETUP_NWE_SETUP(2)
			| SMC_SETUP_NCS_WR_SETUP(2)
			| SMC_SETUP_NRD_SETUP(2)
			| SMC_SETUP_NCS_RD_SETUP(2));
  4006ec:	482e      	ldr	r0, [pc, #184]	; (4007a8 <main+0x534>)
  4006ee:	4b2f      	ldr	r3, [pc, #188]	; (4007ac <main+0x538>)
  4006f0:	2102      	movs	r1, #2
  4006f2:	f04f 3202 	mov.w	r2, #33686018	; 0x2020202
  4006f6:	4798      	blx	r3

	smc_set_pulse_timing(SMC, ILI9325_LCD_CS, SMC_PULSE_NWE_PULSE(4)
			| SMC_PULSE_NCS_WR_PULSE(4)
			| SMC_PULSE_NRD_PULSE(10)
			| SMC_PULSE_NCS_RD_PULSE(10));
  4006f8:	482b      	ldr	r0, [pc, #172]	; (4007a8 <main+0x534>)
  4006fa:	4a2d      	ldr	r2, [pc, #180]	; (4007b0 <main+0x53c>)
  4006fc:	4b2d      	ldr	r3, [pc, #180]	; (4007b4 <main+0x540>)
  4006fe:	2102      	movs	r1, #2
  400700:	4798      	blx	r3

	smc_set_cycle_timing(SMC, ILI9325_LCD_CS, SMC_CYCLE_NWE_CYCLE(10)
			| SMC_CYCLE_NRD_CYCLE(22));
  400702:	4829      	ldr	r0, [pc, #164]	; (4007a8 <main+0x534>)
  400704:	4a2c      	ldr	r2, [pc, #176]	; (4007b8 <main+0x544>)
  400706:	4b2d      	ldr	r3, [pc, #180]	; (4007bc <main+0x548>)
  400708:	2102      	movs	r1, #2
  40070a:	4798      	blx	r3

	smc_set_mode(SMC, ILI9325_LCD_CS, SMC_MODE_READ_MODE
			| SMC_MODE_WRITE_MODE);
  40070c:	4826      	ldr	r0, [pc, #152]	; (4007a8 <main+0x534>)
  40070e:	4b2c      	ldr	r3, [pc, #176]	; (4007c0 <main+0x54c>)
  400710:	2102      	movs	r1, #2
  400712:	2203      	movs	r2, #3
  400714:	4798      	blx	r3

	/* Initialize display parameter */
	ili9325_display_opt.ul_width = ILI9325_LCD_WIDTH;
	ili9325_display_opt.ul_height = ILI9325_LCD_HEIGHT;
	ili9325_display_opt.foreground_color = COLOR_BLACK;
	ili9325_display_opt.background_color = COLOR_WHITE;
  400716:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000

	smc_set_mode(SMC, ILI9325_LCD_CS, SMC_MODE_READ_MODE
			| SMC_MODE_WRITE_MODE);

	/* Initialize display parameter */
	ili9325_display_opt.ul_width = ILI9325_LCD_WIDTH;
  40071a:	21f0      	movs	r1, #240	; 0xf0
	ili9325_display_opt.ul_height = ILI9325_LCD_HEIGHT;
  40071c:	f44f 72a0 	mov.w	r2, #320	; 0x140
	ili9325_display_opt.foreground_color = COLOR_BLACK;
  400720:	f04f 0800 	mov.w	r8, #0
	ili9325_display_opt.background_color = COLOR_WHITE;
  400724:	9307      	str	r3, [sp, #28]

	/* Switch off backlight */
	aat31xx_disable_backlight();
  400726:	4b27      	ldr	r3, [pc, #156]	; (4007c4 <main+0x550>)

	smc_set_mode(SMC, ILI9325_LCD_CS, SMC_MODE_READ_MODE
			| SMC_MODE_WRITE_MODE);

	/* Initialize display parameter */
	ili9325_display_opt.ul_width = ILI9325_LCD_WIDTH;
  400728:	9104      	str	r1, [sp, #16]
	ili9325_display_opt.ul_height = ILI9325_LCD_HEIGHT;
  40072a:	9205      	str	r2, [sp, #20]
	ili9325_display_opt.foreground_color = COLOR_BLACK;
  40072c:	f8cd 8018 	str.w	r8, [sp, #24]
	ili9325_display_opt.background_color = COLOR_WHITE;

	/* Switch off backlight */
	aat31xx_disable_backlight();
  400730:	4798      	blx	r3

	/* Initialize LCD */
	ili9325_init(&ili9325_display_opt);
  400732:	4b25      	ldr	r3, [pc, #148]	; (4007c8 <main+0x554>)
  400734:	a804      	add	r0, sp, #16
  400736:	4798      	blx	r3

	/* Set backlight level */
	aat31xx_set_backlight(AAT31XX_MAX_BACKLIGHT_LEVEL);
  400738:	2010      	movs	r0, #16
  40073a:	4b24      	ldr	r3, [pc, #144]	; (4007cc <main+0x558>)
  40073c:	4798      	blx	r3

	/* Turn on LCD */
	ili9325_display_on();
  40073e:	4b24      	ldr	r3, [pc, #144]	; (4007d0 <main+0x55c>)
  400740:	4798      	blx	r3
*/
		} 
		
		if (g_display_splash) {
			display_init();
			ili9325_fill(COLOR_TOMATO);
  400742:	4826      	ldr	r0, [pc, #152]	; (4007dc <main+0x568>)
  400744:	4b23      	ldr	r3, [pc, #140]	; (4007d4 <main+0x560>)
  400746:	4798      	blx	r3
			ili9325_draw_string(0, 80, (uint8_t *)"Press button\nto start decoding \nbrah!");
  400748:	4640      	mov	r0, r8
  40074a:	2150      	movs	r1, #80	; 0x50
  40074c:	4a24      	ldr	r2, [pc, #144]	; (4007e0 <main+0x56c>)
  40074e:	47c8      	blx	r9
			g_display_splash = false;
  400750:	f8ca 8008 	str.w	r8, [sl, #8]
  400754:	e6f2      	b.n	40053c <main+0x2c8>
	if ((p_pio->PIO_RCR == 0) && (p_pio->PIO_RNCR == 0)) {
		p_pio->PIO_RPR = (uint32_t)uc_buf;
		p_pio->PIO_RCR = ul_size;
		p_pio->PIO_PTCR = PIO_PTCR_RXTEN;
		return 1;
	} else if (p_pio->PIO_RNCR == 0) {
  400756:	f8db 217c 	ldr.w	r2, [fp, #380]	; 0x17c
  40075a:	2a00      	cmp	r2, #0
  40075c:	f47f af22 	bne.w	4005a4 <main+0x330>
		p_pio->PIO_RNPR = (uint32_t)uc_buf;
  400760:	f8cb 0178 	str.w	r0, [fp, #376]	; 0x178
		p_pio->PIO_RNCR = ul_size;
  400764:	f8cb 317c 	str.w	r3, [fp, #380]	; 0x17c
  400768:	e71c      	b.n	4005a4 <main+0x330>
  40076a:	bf00      	nop
  40076c:	2000000c 	.word	0x2000000c
  400770:	400e0e00 	.word	0x400e0e00
  400774:	004013d5 	.word	0x004013d5
  400778:	004013dd 	.word	0x004013dd
  40077c:	00401539 	.word	0x00401539
  400780:	00401551 	.word	0x00401551
  400784:	0040113d 	.word	0x0040113d
  400788:	20000d60 	.word	0x20000d60
  40078c:	00400129 	.word	0x00400129
  400790:	0040f848 	.word	0x0040f848
  400794:	20000dcc 	.word	0x20000dcc
  400798:	004096d9 	.word	0x004096d9
  40079c:	20000dec 	.word	0x20000dec
  4007a0:	20000e0c 	.word	0x20000e0c
  4007a4:	004019b1 	.word	0x004019b1
  4007a8:	400e0000 	.word	0x400e0000
  4007ac:	00401369 	.word	0x00401369
  4007b0:	0a0a0404 	.word	0x0a0a0404
  4007b4:	00401371 	.word	0x00401371
  4007b8:	0016000a 	.word	0x0016000a
  4007bc:	00401379 	.word	0x00401379
  4007c0:	00401381 	.word	0x00401381
  4007c4:	00400c89 	.word	0x00400c89
  4007c8:	00400cad 	.word	0x00400cad
  4007cc:	00400c2d 	.word	0x00400c2d
  4007d0:	004010c1 	.word	0x004010c1
  4007d4:	004010e1 	.word	0x004010e1
  4007d8:	20000d94 	.word	0x20000d94
  4007dc:	00ff6347 	.word	0x00ff6347
  4007e0:	0040f850 	.word	0x0040f850

004007e4 <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
  4007e4:	b538      	push	{r3, r4, r5, lr}
	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
  4007e6:	480e      	ldr	r0, [pc, #56]	; (400820 <sysclk_init+0x3c>)
  4007e8:	4d0e      	ldr	r5, [pc, #56]	; (400824 <sysclk_init+0x40>)
  4007ea:	4c0f      	ldr	r4, [pc, #60]	; (400828 <sysclk_init+0x44>)
  4007ec:	47a8      	blx	r5
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
  4007ee:	2000      	movs	r0, #0
  4007f0:	213e      	movs	r1, #62	; 0x3e
  4007f2:	4b0e      	ldr	r3, [pc, #56]	; (40082c <sysclk_init+0x48>)
  4007f4:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
  4007f6:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
  4007f8:	2800      	cmp	r0, #0
  4007fa:	d0fc      	beq.n	4007f6 <sysclk_init+0x12>

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
	} else {
		pmc_disable_pllbck();
  4007fc:	4b0c      	ldr	r3, [pc, #48]	; (400830 <sysclk_init+0x4c>)
  4007fe:	4c0d      	ldr	r4, [pc, #52]	; (400834 <sysclk_init+0x50>)
  400800:	4798      	blx	r3
		PMC->CKGR_PLLBR = p_cfg->ctrl;
  400802:	4b0d      	ldr	r3, [pc, #52]	; (400838 <sysclk_init+0x54>)
  400804:	4a0d      	ldr	r2, [pc, #52]	; (40083c <sysclk_init+0x58>)
  400806:	62da      	str	r2, [r3, #44]	; 0x2c
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		return pmc_is_locked_pllack();
	} else {
		return pmc_is_locked_pllbck();
  400808:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
  40080a:	2800      	cmp	r0, #0
  40080c:	d0fc      	beq.n	400808 <sysclk_init+0x24>

		pll_enable_source(CONFIG_PLL1_SOURCE);
		pll_config_defaults(&pllcfg, 1);
		pll_enable(&pllcfg, 1);
		pll_wait_for_lock(1);
		pmc_switch_mck_to_pllbck(CONFIG_SYSCLK_PRES);
  40080e:	4b0c      	ldr	r3, [pc, #48]	; (400840 <sysclk_init+0x5c>)
  400810:	2010      	movs	r0, #16
  400812:	4798      	blx	r3
	}
#endif

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
  400814:	4b0b      	ldr	r3, [pc, #44]	; (400844 <sysclk_init+0x60>)
  400816:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
  400818:	4801      	ldr	r0, [pc, #4]	; (400820 <sysclk_init+0x3c>)
  40081a:	47a8      	blx	r5
  40081c:	bd38      	pop	{r3, r4, r5, pc}
  40081e:	bf00      	nop
  400820:	07270e00 	.word	0x07270e00
  400824:	00401d61 	.word	0x00401d61
  400828:	0040194d 	.word	0x0040194d
  40082c:	004018fd 	.word	0x004018fd
  400830:	00401995 	.word	0x00401995
  400834:	004019a1 	.word	0x004019a1
  400838:	400e0400 	.word	0x400e0400
  40083c:	00133f01 	.word	0x00133f01
  400840:	004018a5 	.word	0x004018a5
  400844:	00401c79 	.word	0x00401c79

00400848 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len)
{
	int nChars = 0;

	if (file != 0) {
  400848:	b9a0      	cbnz	r0, 400874 <_read+0x2c>
		return -1;
	}

	for (; len > 0; --len) {
  40084a:	2a00      	cmp	r2, #0
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
  40084c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  400850:	4690      	mov	r8, r2

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
  400852:	dd0d      	ble.n	400870 <_read+0x28>
  400854:	4f09      	ldr	r7, [pc, #36]	; (40087c <_read+0x34>)
  400856:	4e0a      	ldr	r6, [pc, #40]	; (400880 <_read+0x38>)
  400858:	460c      	mov	r4, r1
  40085a:	188d      	adds	r5, r1, r2
		ptr_get(stdio_base, ptr);
  40085c:	4621      	mov	r1, r4
  40085e:	6838      	ldr	r0, [r7, #0]
  400860:	6833      	ldr	r3, [r6, #0]
		ptr++;
  400862:	3401      	adds	r4, #1
	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
		ptr_get(stdio_base, ptr);
  400864:	4798      	blx	r3

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
  400866:	42ac      	cmp	r4, r5
  400868:	d1f8      	bne.n	40085c <_read+0x14>
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
	}
	return nChars;
  40086a:	4640      	mov	r0, r8
  40086c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
  400870:	4680      	mov	r8, r0
  400872:	e7fa      	b.n	40086a <_read+0x22>
_read (int file, char * ptr, int len)
{
	int nChars = 0;

	if (file != 0) {
		return -1;
  400874:	f04f 30ff 	mov.w	r0, #4294967295
  400878:	4770      	bx	lr
  40087a:	bf00      	nop
  40087c:	200012bc 	.word	0x200012bc
  400880:	200012b4 	.word	0x200012b4

00400884 <_write>:
int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
  400884:	3801      	subs	r0, #1
  400886:	2802      	cmp	r0, #2
  400888:	d81e      	bhi.n	4008c8 <_write+0x44>
int __attribute__((weak))
_write (int file, const char *ptr, int len);

int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
  40088a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40088e:	4615      	mov	r5, r2

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
  400890:	b1ba      	cbz	r2, 4008c2 <_write+0x3e>
  400892:	460e      	mov	r6, r1
  400894:	f8df 803c 	ldr.w	r8, [pc, #60]	; 4008d4 <_write+0x50>
  400898:	4f0d      	ldr	r7, [pc, #52]	; (4008d0 <_write+0x4c>)
  40089a:	460c      	mov	r4, r1
  40089c:	e001      	b.n	4008a2 <_write+0x1e>
  40089e:	3d01      	subs	r5, #1
  4008a0:	d00d      	beq.n	4008be <_write+0x3a>
		if (ptr_put(stdio_base, *ptr++) < 0) {
  4008a2:	f814 1b01 	ldrb.w	r1, [r4], #1
  4008a6:	f8d8 0000 	ldr.w	r0, [r8]
  4008aa:	683b      	ldr	r3, [r7, #0]
  4008ac:	4798      	blx	r3
  4008ae:	2800      	cmp	r0, #0
  4008b0:	eba4 0006 	sub.w	r0, r4, r6
  4008b4:	daf3      	bge.n	40089e <_write+0x1a>
_write (int file, const char *ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
  4008b6:	f04f 30ff 	mov.w	r0, #4294967295
  4008ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4008be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	}

	for (; len != 0; --len) {
  4008c2:	4610      	mov	r0, r2
			return -1;
		}
		++nChars;
	}
	return nChars;
}
  4008c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
_write (int file, const char *ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
  4008c8:	f04f 30ff 	mov.w	r0, #4294967295
			return -1;
		}
		++nChars;
	}
	return nChars;
}
  4008cc:	4770      	bx	lr
  4008ce:	bf00      	nop
  4008d0:	200012b8 	.word	0x200012b8
  4008d4:	200012bc 	.word	0x200012bc

004008d8 <board_init>:
#include "board.h"
#include "conf_board.h"
#include "gpio.h"

void board_init(void)
{
  4008d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	/* Disable the watchdog */
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	WDT->WDT_MR = WDT_MR_WDDIS;
  4008da:	4b67      	ldr	r3, [pc, #412]	; (400a78 <board_init+0x1a0>)
#endif

	/* Configure LED pins */
	gpio_configure_pin(LED0_GPIO, LED0_FLAGS);
  4008dc:	4c67      	ldr	r4, [pc, #412]	; (400a7c <board_init+0x1a4>)
	gpio_configure_pin(USB_VBUS_GPIO, USB_VBUS_FLAGS);
#endif

	/* Configure LCD EBI pins */
#ifdef CONF_BOARD_ILI9325
	gpio_configure_pin(PIN_EBI_DATA_BUS_D0, PIN_EBI_DATA_BUS_FLAGS);
  4008de:	4d68      	ldr	r5, [pc, #416]	; (400a80 <board_init+0x1a8>)
	gpio_configure_pin(PIN_EBI_DATA_BUS_D5, PIN_EBI_DATA_BUS_FLAGS);
	gpio_configure_pin(PIN_EBI_DATA_BUS_D6, PIN_EBI_DATA_BUS_FLAGS);
	gpio_configure_pin(PIN_EBI_DATA_BUS_D7, PIN_EBI_DATA_BUS_FLAGS);
	gpio_configure_pin(PIN_EBI_NRD, PIN_EBI_NRD_FLAGS);
	gpio_configure_pin(PIN_EBI_NWE, PIN_EBI_NWE_FLAGS);
	gpio_configure_pin(PIN_EBI_NCS2, PIN_EBI_NCS2_FLAGS);
  4008e0:	4f68      	ldr	r7, [pc, #416]	; (400a84 <board_init+0x1ac>)
	gpio_configure_pin(OV_SW_OVT_GPIO, OV_SW_OVT_FLAGS);
	gpio_configure_pin(OV_RST_GPIO, OV_RST_FLAGS);
	gpio_configure_pin(OV_FSIN_GPIO, OV_FSIN_FLAGS);
	gpio_configure_pin(OV_HSYNC_GPIO, OV_HSYNC_FLAGS);
	gpio_configure_pin(OV_VSYNC_GPIO, OV_VSYNC_FLAGS);
	gpio_configure_pin(OV_DATA_BUS_D2, OV_DATA_BUS_FLAGS);
  4008e2:	4e69      	ldr	r6, [pc, #420]	; (400a88 <board_init+0x1b0>)

void board_init(void)
{
	/* Disable the watchdog */
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	WDT->WDT_MR = WDT_MR_WDDIS;
  4008e4:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  4008e8:	605a      	str	r2, [r3, #4]
#endif

	/* Configure LED pins */
	gpio_configure_pin(LED0_GPIO, LED0_FLAGS);
  4008ea:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
  4008ee:	204c      	movs	r0, #76	; 0x4c
  4008f0:	47a0      	blx	r4

	/* Configure Push Button pins */
	gpio_configure_pin(GPIO_PUSH_BUTTON_1, GPIO_PUSH_BUTTON_1_FLAGS);
  4008f2:	4966      	ldr	r1, [pc, #408]	; (400a8c <board_init+0x1b4>)
  4008f4:	2002      	movs	r0, #2
  4008f6:	47a0      	blx	r4
	gpio_configure_group(PINS_UART_PIO, PINS_UART, PINS_UART_FLAGS);
#endif

	/* Configure TWI pins */
#ifdef CONF_BOARD_TWI0
	gpio_configure_pin(TWI0_DATA_GPIO, TWI0_DATA_FLAGS);
  4008f8:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  4008fc:	2003      	movs	r0, #3
  4008fe:	47a0      	blx	r4
	gpio_configure_pin(TWI0_CLK_GPIO, TWI0_CLK_FLAGS);
  400900:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  400904:	2004      	movs	r0, #4
  400906:	47a0      	blx	r4
	gpio_configure_pin(SPI_NPCS0_GPIO, SPI_NPCS0_FLAGS);
#endif

	/* Configure PCK0 pins */
#ifdef CONF_BOARD_PCK0
	gpio_configure_pin(PIN_PCK0, PIN_PCK0_FLAGS);
  400908:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  40090c:	202d      	movs	r0, #45	; 0x2d
  40090e:	47a0      	blx	r4
	gpio_configure_pin(USB_VBUS_GPIO, USB_VBUS_FLAGS);
#endif

	/* Configure LCD EBI pins */
#ifdef CONF_BOARD_ILI9325
	gpio_configure_pin(PIN_EBI_DATA_BUS_D0, PIN_EBI_DATA_BUS_FLAGS);
  400910:	4629      	mov	r1, r5
  400912:	2040      	movs	r0, #64	; 0x40
  400914:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_DATA_BUS_D1, PIN_EBI_DATA_BUS_FLAGS);
  400916:	4629      	mov	r1, r5
  400918:	2041      	movs	r0, #65	; 0x41
  40091a:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_DATA_BUS_D2, PIN_EBI_DATA_BUS_FLAGS);
  40091c:	4629      	mov	r1, r5
  40091e:	2042      	movs	r0, #66	; 0x42
  400920:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_DATA_BUS_D3, PIN_EBI_DATA_BUS_FLAGS);
  400922:	4629      	mov	r1, r5
  400924:	2043      	movs	r0, #67	; 0x43
  400926:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_DATA_BUS_D4, PIN_EBI_DATA_BUS_FLAGS);
  400928:	4629      	mov	r1, r5
  40092a:	2044      	movs	r0, #68	; 0x44
  40092c:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_DATA_BUS_D5, PIN_EBI_DATA_BUS_FLAGS);
  40092e:	4629      	mov	r1, r5
  400930:	2045      	movs	r0, #69	; 0x45
  400932:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_DATA_BUS_D6, PIN_EBI_DATA_BUS_FLAGS);
  400934:	4629      	mov	r1, r5
  400936:	2046      	movs	r0, #70	; 0x46
  400938:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_DATA_BUS_D7, PIN_EBI_DATA_BUS_FLAGS);
  40093a:	4629      	mov	r1, r5
  40093c:	2047      	movs	r0, #71	; 0x47
  40093e:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_NRD, PIN_EBI_NRD_FLAGS);
  400940:	4629      	mov	r1, r5
  400942:	204b      	movs	r0, #75	; 0x4b
  400944:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_NWE, PIN_EBI_NWE_FLAGS);
  400946:	4629      	mov	r1, r5
  400948:	2048      	movs	r0, #72	; 0x48
  40094a:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_NCS2, PIN_EBI_NCS2_FLAGS);
  40094c:	4639      	mov	r1, r7
  40094e:	2016      	movs	r0, #22
  400950:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_LCD_RS, PIN_EBI_LCD_RS_FLAGS);
  400952:	4629      	mov	r1, r5
  400954:	2053      	movs	r0, #83	; 0x53
  400956:	47a0      	blx	r4
#endif

	/* Configure Backlight control pin */
#ifdef CONF_BOARD_AAT3155
	gpio_configure_pin(BOARD_AAT31XX_SET_GPIO, BOARD_AAT31XX_SET_FLAGS);
  400958:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
  40095c:	204d      	movs	r0, #77	; 0x4d
  40095e:	47a0      	blx	r4
#endif

	/* Configure SRAM pins */
#ifdef CONF_BOARD_SRAM
	gpio_configure_pin(PIN_EBI_DATA_BUS_D0, PIN_EBI_DATA_BUS_FLAGS);
  400960:	4629      	mov	r1, r5
  400962:	2040      	movs	r0, #64	; 0x40
  400964:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_DATA_BUS_D1, PIN_EBI_DATA_BUS_FLAGS);
  400966:	4629      	mov	r1, r5
  400968:	2041      	movs	r0, #65	; 0x41
  40096a:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_DATA_BUS_D2, PIN_EBI_DATA_BUS_FLAGS);
  40096c:	4629      	mov	r1, r5
  40096e:	2042      	movs	r0, #66	; 0x42
  400970:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_DATA_BUS_D3, PIN_EBI_DATA_BUS_FLAGS);
  400972:	4629      	mov	r1, r5
  400974:	2043      	movs	r0, #67	; 0x43
  400976:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_DATA_BUS_D4, PIN_EBI_DATA_BUS_FLAGS);
  400978:	4629      	mov	r1, r5
  40097a:	2044      	movs	r0, #68	; 0x44
  40097c:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_DATA_BUS_D5, PIN_EBI_DATA_BUS_FLAGS);
  40097e:	4629      	mov	r1, r5
  400980:	2045      	movs	r0, #69	; 0x45
  400982:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_DATA_BUS_D6, PIN_EBI_DATA_BUS_FLAGS);
  400984:	4629      	mov	r1, r5
  400986:	2046      	movs	r0, #70	; 0x46
  400988:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_DATA_BUS_D7, PIN_EBI_DATA_BUS_FLAGS);
  40098a:	4629      	mov	r1, r5
  40098c:	2047      	movs	r0, #71	; 0x47
  40098e:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_NRD, PIN_EBI_NRD_FLAGS);
  400990:	4629      	mov	r1, r5
  400992:	204b      	movs	r0, #75	; 0x4b
  400994:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_NWE, PIN_EBI_NWE_FLAGS);
  400996:	4629      	mov	r1, r5
  400998:	2048      	movs	r0, #72	; 0x48
  40099a:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_NCS0, PIN_EBI_NCS0_FLAGS);
  40099c:	4629      	mov	r1, r5
  40099e:	204e      	movs	r0, #78	; 0x4e
  4009a0:	47a0      	blx	r4
	gpio_configure_pin(SRAM_VCC_GPIO, SRAM_VCC_FLAGS);
  4009a2:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
  4009a6:	2049      	movs	r0, #73	; 0x49
  4009a8:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_ADDR_BUS_A0, PIN_EBI_ADDR_BUS_FLAG1);
  4009aa:	4629      	mov	r1, r5
  4009ac:	2052      	movs	r0, #82	; 0x52
  4009ae:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_ADDR_BUS_A1, PIN_EBI_ADDR_BUS_FLAG1);
  4009b0:	4629      	mov	r1, r5
  4009b2:	2053      	movs	r0, #83	; 0x53
  4009b4:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_ADDR_BUS_A2, PIN_EBI_ADDR_BUS_FLAG1);
  4009b6:	4629      	mov	r1, r5
  4009b8:	2054      	movs	r0, #84	; 0x54
  4009ba:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_ADDR_BUS_A3, PIN_EBI_ADDR_BUS_FLAG1);
  4009bc:	4629      	mov	r1, r5
  4009be:	2055      	movs	r0, #85	; 0x55
  4009c0:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_ADDR_BUS_A4, PIN_EBI_ADDR_BUS_FLAG1);
  4009c2:	4629      	mov	r1, r5
  4009c4:	2056      	movs	r0, #86	; 0x56
  4009c6:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_ADDR_BUS_A5, PIN_EBI_ADDR_BUS_FLAG1);
  4009c8:	4629      	mov	r1, r5
  4009ca:	2057      	movs	r0, #87	; 0x57
  4009cc:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_ADDR_BUS_A6, PIN_EBI_ADDR_BUS_FLAG1);
  4009ce:	4629      	mov	r1, r5
  4009d0:	2058      	movs	r0, #88	; 0x58
  4009d2:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_ADDR_BUS_A7, PIN_EBI_ADDR_BUS_FLAG1);
  4009d4:	4629      	mov	r1, r5
  4009d6:	2059      	movs	r0, #89	; 0x59
  4009d8:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_ADDR_BUS_A8, PIN_EBI_ADDR_BUS_FLAG1);
  4009da:	4629      	mov	r1, r5
  4009dc:	205a      	movs	r0, #90	; 0x5a
  4009de:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_ADDR_BUS_A9, PIN_EBI_ADDR_BUS_FLAG1);
  4009e0:	4629      	mov	r1, r5
  4009e2:	205b      	movs	r0, #91	; 0x5b
  4009e4:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_ADDR_BUS_A10, PIN_EBI_ADDR_BUS_FLAG1);
  4009e6:	4629      	mov	r1, r5
  4009e8:	205c      	movs	r0, #92	; 0x5c
  4009ea:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_ADDR_BUS_A11, PIN_EBI_ADDR_BUS_FLAG1);
  4009ec:	4629      	mov	r1, r5
  4009ee:	205d      	movs	r0, #93	; 0x5d
  4009f0:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_ADDR_BUS_A12, PIN_EBI_ADDR_BUS_FLAG1);
  4009f2:	4629      	mov	r1, r5
  4009f4:	205e      	movs	r0, #94	; 0x5e
  4009f6:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_ADDR_BUS_A13, PIN_EBI_ADDR_BUS_FLAG1);
  4009f8:	4629      	mov	r1, r5
  4009fa:	205f      	movs	r0, #95	; 0x5f
  4009fc:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_ADDR_BUS_A14, PIN_EBI_ADDR_BUS_FLAG2);
  4009fe:	4639      	mov	r1, r7
  400a00:	2012      	movs	r0, #18
  400a02:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_ADDR_BUS_A15, PIN_EBI_ADDR_BUS_FLAG2);
  400a04:	4639      	mov	r1, r7
  400a06:	2013      	movs	r0, #19
  400a08:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_ADDR_BUS_A16, PIN_EBI_ADDR_BUS_FLAG2);
  400a0a:	4639      	mov	r1, r7
  400a0c:	2014      	movs	r0, #20
  400a0e:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_ADDR_BUS_A17, PIN_EBI_ADDR_BUS_FLAG2);
  400a10:	4639      	mov	r1, r7
  400a12:	2000      	movs	r0, #0
  400a14:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_ADDR_BUS_A18, PIN_EBI_ADDR_BUS_FLAG2);
  400a16:	4639      	mov	r1, r7
  400a18:	2001      	movs	r0, #1
  400a1a:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_ADDR_BUS_A19, PIN_EBI_ADDR_BUS_FLAG1);
  400a1c:	4629      	mov	r1, r5
  400a1e:	2050      	movs	r0, #80	; 0x50
  400a20:	47a0      	blx	r4
#endif

	/* Configure Image sensor pins */
#ifdef CONF_BOARD_OV7740_IMAGE_SENSOR
	gpio_configure_pin(OV_SW_OVT_GPIO, OV_SW_OVT_FLAGS);
  400a22:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
  400a26:	204a      	movs	r0, #74	; 0x4a
  400a28:	47a0      	blx	r4
	gpio_configure_pin(OV_RST_GPIO, OV_RST_FLAGS);
  400a2a:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
  400a2e:	204f      	movs	r0, #79	; 0x4f
  400a30:	47a0      	blx	r4
	gpio_configure_pin(OV_FSIN_GPIO, OV_FSIN_FLAGS);
  400a32:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
  400a36:	2015      	movs	r0, #21
  400a38:	47a0      	blx	r4
	gpio_configure_pin(OV_HSYNC_GPIO, OV_HSYNC_FLAGS);
  400a3a:	2171      	movs	r1, #113	; 0x71
  400a3c:	2010      	movs	r0, #16
  400a3e:	47a0      	blx	r4
	gpio_configure_pin(OV_VSYNC_GPIO, OV_VSYNC_FLAGS);
  400a40:	2171      	movs	r1, #113	; 0x71
  400a42:	200f      	movs	r0, #15
  400a44:	47a0      	blx	r4
	gpio_configure_pin(OV_DATA_BUS_D2, OV_DATA_BUS_FLAGS);
  400a46:	4631      	mov	r1, r6
  400a48:	2018      	movs	r0, #24
  400a4a:	47a0      	blx	r4
	gpio_configure_pin(OV_DATA_BUS_D3, OV_DATA_BUS_FLAGS);
  400a4c:	4631      	mov	r1, r6
  400a4e:	2019      	movs	r0, #25
  400a50:	47a0      	blx	r4
	gpio_configure_pin(OV_DATA_BUS_D4, OV_DATA_BUS_FLAGS);
  400a52:	4631      	mov	r1, r6
  400a54:	201a      	movs	r0, #26
  400a56:	47a0      	blx	r4
	gpio_configure_pin(OV_DATA_BUS_D5, OV_DATA_BUS_FLAGS);
  400a58:	4631      	mov	r1, r6
  400a5a:	201b      	movs	r0, #27
  400a5c:	47a0      	blx	r4
	gpio_configure_pin(OV_DATA_BUS_D6, OV_DATA_BUS_FLAGS);
  400a5e:	4631      	mov	r1, r6
  400a60:	201c      	movs	r0, #28
  400a62:	47a0      	blx	r4
	gpio_configure_pin(OV_DATA_BUS_D7, OV_DATA_BUS_FLAGS);
  400a64:	4631      	mov	r1, r6
  400a66:	201d      	movs	r0, #29
  400a68:	47a0      	blx	r4
	gpio_configure_pin(OV_DATA_BUS_D8, OV_DATA_BUS_FLAGS);
  400a6a:	4631      	mov	r1, r6
  400a6c:	201e      	movs	r0, #30
  400a6e:	47a0      	blx	r4
	gpio_configure_pin(OV_DATA_BUS_D9, OV_DATA_BUS_FLAGS);
  400a70:	4631      	mov	r1, r6
  400a72:	201f      	movs	r0, #31
  400a74:	47a0      	blx	r4
  400a76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  400a78:	400e1450 	.word	0x400e1450
  400a7c:	004013e9 	.word	0x004013e9
  400a80:	08000001 	.word	0x08000001
  400a84:	18000001 	.word	0x18000001
  400a88:	28000001 	.word	0x28000001
  400a8c:	28000079 	.word	0x28000079

00400a90 <ov_power>:
 * \param on_off 1 to turn on OV7740 sensor and 0 to turn off.
 * \param p_pio Pointer to the PIO instance which control OV7740 sensor power.
 * \param ul_mask Bitmask of OV7740 sensor power pin.
 */
void ov_power(uint32_t ul_on_off, Pio* const p_pio, const uint32_t ul_mask)
{
  400a90:	b508      	push	{r3, lr}
	if (ul_on_off) {
  400a92:	b920      	cbnz	r0, 400a9e <ov_power+0xe>
		pio_clear(p_pio, ul_mask);
	} else {
		pio_set(p_pio, ul_mask);
  400a94:	4608      	mov	r0, r1
  400a96:	4b04      	ldr	r3, [pc, #16]	; (400aa8 <ov_power+0x18>)
  400a98:	4611      	mov	r1, r2
  400a9a:	4798      	blx	r3
  400a9c:	bd08      	pop	{r3, pc}
 * \param ul_mask Bitmask of OV7740 sensor power pin.
 */
void ov_power(uint32_t ul_on_off, Pio* const p_pio, const uint32_t ul_mask)
{
	if (ul_on_off) {
		pio_clear(p_pio, ul_mask);
  400a9e:	4608      	mov	r0, r1
  400aa0:	4b02      	ldr	r3, [pc, #8]	; (400aac <ov_power+0x1c>)
  400aa2:	4611      	mov	r1, r2
  400aa4:	4798      	blx	r3
  400aa6:	bd08      	pop	{r3, pc}
  400aa8:	004013a5 	.word	0x004013a5
  400aac:	004013a9 	.word	0x004013a9

00400ab0 <ov_init>:
 *
 * \param p_twi TWI interface.
 * \return 0 on success, 1 otherwise.
 */
uint32_t ov_init(Twi* const p_twi)
{
  400ab0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  400ab4:	b08c      	sub	sp, #48	; 0x30
	uint32_t ul_ver = 0;

	/* OV_PID */
	packet_pid.chip = OV_I2C_SENSOR_ADDRESS;
	packet_pid.addr[0] = OV7740_PIDH;
	packet_pid.addr_length = 1;
  400ab6:	2401      	movs	r4, #1
	uint32_t ul_id = 0;
	uint32_t ul_ver = 0;

	/* OV_PID */
	packet_pid.chip = OV_I2C_SENSOR_ADDRESS;
	packet_pid.addr[0] = OV7740_PIDH;
  400ab8:	230a      	movs	r3, #10
 */
uint32_t ov_read_reg(Twi* const p_twi, twi_packet_t* const p_packet)
{
	uint32_t ul_status;

	ul_status = twi_master_read(p_twi, p_packet);
  400aba:	a902      	add	r1, sp, #8
 */
static uint32_t ov_id(Twi* const p_twi)
{
	twi_packet_t packet_pid;
	twi_packet_t packet_ver;
	uint32_t ul_id = 0;
  400abc:	2500      	movs	r5, #0
	uint32_t ul_ver = 0;

	/* OV_PID */
	packet_pid.chip = OV_I2C_SENSOR_ADDRESS;
  400abe:	2721      	movs	r7, #33	; 0x21
 */
uint32_t ov_read_reg(Twi* const p_twi, twi_packet_t* const p_packet)
{
	uint32_t ul_status;

	ul_status = twi_master_read(p_twi, p_packet);
  400ac0:	4e3a      	ldr	r6, [pc, #232]	; (400bac <ov_init+0xfc>)
	uint32_t ul_id = 0;
	uint32_t ul_ver = 0;

	/* OV_PID */
	packet_pid.chip = OV_I2C_SENSOR_ADDRESS;
	packet_pid.addr[0] = OV7740_PIDH;
  400ac2:	f88d 3008 	strb.w	r3, [sp, #8]
 *
 * \param p_twi TWI interface.
 * \return 0 on success, 1 otherwise.
 */
uint32_t ov_init(Twi* const p_twi)
{
  400ac6:	4680      	mov	r8, r0
 */
static uint32_t ov_id(Twi* const p_twi)
{
	twi_packet_t packet_pid;
	twi_packet_t packet_ver;
	uint32_t ul_id = 0;
  400ac8:	9500      	str	r5, [sp, #0]
	uint32_t ul_ver = 0;
  400aca:	9501      	str	r5, [sp, #4]

	/* OV_PID */
	packet_pid.chip = OV_I2C_SENSOR_ADDRESS;
  400acc:	f88d 7018 	strb.w	r7, [sp, #24]
	packet_pid.addr[0] = OV7740_PIDH;
	packet_pid.addr_length = 1;
  400ad0:	9403      	str	r4, [sp, #12]
	packet_pid.buffer = &ul_id;
	packet_pid.length = 1;
  400ad2:	9405      	str	r4, [sp, #20]

	/* OV_PID */
	packet_pid.chip = OV_I2C_SENSOR_ADDRESS;
	packet_pid.addr[0] = OV7740_PIDH;
	packet_pid.addr_length = 1;
	packet_pid.buffer = &ul_id;
  400ad4:	f8cd d010 	str.w	sp, [sp, #16]
 */
uint32_t ov_read_reg(Twi* const p_twi, twi_packet_t* const p_packet)
{
	uint32_t ul_status;

	ul_status = twi_master_read(p_twi, p_packet);
  400ad8:	47b0      	blx	r6

	ov_read_reg(p_twi, &packet_pid);

	/* OV_VER */
	packet_ver.chip = OV_I2C_SENSOR_ADDRESS;
	packet_ver.addr[0] = OV7740_PIDL;
  400ada:	230b      	movs	r3, #11
  400adc:	f88d 301c 	strb.w	r3, [sp, #28]
 */
uint32_t ov_read_reg(Twi* const p_twi, twi_packet_t* const p_packet)
{
	uint32_t ul_status;

	ul_status = twi_master_read(p_twi, p_packet);
  400ae0:	4640      	mov	r0, r8

	/* OV_VER */
	packet_ver.chip = OV_I2C_SENSOR_ADDRESS;
	packet_ver.addr[0] = OV7740_PIDL;
	packet_ver.addr_length = 1;
	packet_ver.buffer = &ul_ver;
  400ae2:	ab01      	add	r3, sp, #4
 */
uint32_t ov_read_reg(Twi* const p_twi, twi_packet_t* const p_packet)
{
	uint32_t ul_status;

	ul_status = twi_master_read(p_twi, p_packet);
  400ae4:	a907      	add	r1, sp, #28

	/* OV_VER */
	packet_ver.chip = OV_I2C_SENSOR_ADDRESS;
	packet_ver.addr[0] = OV7740_PIDL;
	packet_ver.addr_length = 1;
	packet_ver.buffer = &ul_ver;
  400ae6:	9309      	str	r3, [sp, #36]	; 0x24
	packet_pid.length = 1;

	ov_read_reg(p_twi, &packet_pid);

	/* OV_VER */
	packet_ver.chip = OV_I2C_SENSOR_ADDRESS;
  400ae8:	f88d 702c 	strb.w	r7, [sp, #44]	; 0x2c
	packet_ver.addr[0] = OV7740_PIDL;
	packet_ver.addr_length = 1;
  400aec:	9408      	str	r4, [sp, #32]
	packet_ver.buffer = &ul_ver;
	packet_ver.length = 1;
  400aee:	940a      	str	r4, [sp, #40]	; 0x28
 */
uint32_t ov_read_reg(Twi* const p_twi, twi_packet_t* const p_packet)
{
	uint32_t ul_status;

	ul_status = twi_master_read(p_twi, p_packet);
  400af0:	47b0      	blx	r6
	packet_ver.addr_length = 1;
	packet_ver.buffer = &ul_ver;
	packet_ver.length = 1;

	ov_read_reg(p_twi, &packet_ver);
	return ((uint32_t)(ul_id << 8) | ul_ver);
  400af2:	e89d 000c 	ldmia.w	sp, {r2, r3}
  400af6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
{
	uint32_t ul_id = 0;

	ul_id = ov_id( p_twi );

	if (((ul_id >> 8)&0xff)  == OV7740_PIDH_DEFAULT) {
  400afa:	f3c3 2307 	ubfx	r3, r3, #8, #8
  400afe:	2b77      	cmp	r3, #119	; 0x77
  400b00:	d003      	beq.n	400b0a <ov_init+0x5a>
				return 0;
			}
		}
	}

	return 1;
  400b02:	2001      	movs	r0, #1
}
  400b04:	b00c      	add	sp, #48	; 0x30
  400b06:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	twi_packet_t twi_packet;
	uint32_t ul_midh = 0;
	uint32_t ul_midl = 0;

	/* OV_MIDH */
	twi_packet.addr[0] = OV7740_MIDH;
  400b0a:	231c      	movs	r3, #28
 */
uint32_t ov_read_reg(Twi* const p_twi, twi_packet_t* const p_packet)
{
	uint32_t ul_status;

	ul_status = twi_master_read(p_twi, p_packet);
  400b0c:	eb0d 0103 	add.w	r1, sp, r3

	/* OV_MIDH */
	twi_packet.addr[0] = OV7740_MIDH;
	twi_packet.addr_length = 1;
	twi_packet.chip = OV_I2C_SENSOR_ADDRESS;
	twi_packet.buffer = &ul_midh;
  400b10:	aa01      	add	r2, sp, #4
 */
uint32_t ov_read_reg(Twi* const p_twi, twi_packet_t* const p_packet)
{
	uint32_t ul_status;

	ul_status = twi_master_read(p_twi, p_packet);
  400b12:	4640      	mov	r0, r8

	/* OV_MIDH */
	twi_packet.addr[0] = OV7740_MIDH;
	twi_packet.addr_length = 1;
	twi_packet.chip = OV_I2C_SENSOR_ADDRESS;
	twi_packet.buffer = &ul_midh;
  400b14:	9209      	str	r2, [sp, #36]	; 0x24
	twi_packet_t twi_packet;
	uint32_t ul_midh = 0;
	uint32_t ul_midl = 0;

	/* OV_MIDH */
	twi_packet.addr[0] = OV7740_MIDH;
  400b16:	f88d 301c 	strb.w	r3, [sp, #28]
 * \return 0 if the sensor is present, 1 otherwise.
 */
static uint32_t ov_manufacturer(Twi* const p_twi)
{
	twi_packet_t twi_packet;
	uint32_t ul_midh = 0;
  400b1a:	9501      	str	r5, [sp, #4]
	uint32_t ul_midl = 0;
  400b1c:	9502      	str	r5, [sp, #8]

	/* OV_MIDH */
	twi_packet.addr[0] = OV7740_MIDH;
	twi_packet.addr_length = 1;
  400b1e:	9408      	str	r4, [sp, #32]
	twi_packet.chip = OV_I2C_SENSOR_ADDRESS;
  400b20:	f88d 702c 	strb.w	r7, [sp, #44]	; 0x2c
	twi_packet.buffer = &ul_midh;
	twi_packet.length = 1;
  400b24:	940a      	str	r4, [sp, #40]	; 0x28
 */
uint32_t ov_read_reg(Twi* const p_twi, twi_packet_t* const p_packet)
{
	uint32_t ul_status;

	ul_status = twi_master_read(p_twi, p_packet);
  400b26:	47b0      	blx	r6
	twi_packet.length = 1;

	ov_read_reg(p_twi, &twi_packet);

	/* OV_MIDL */
	twi_packet.addr[0] = OV7740_MIDL;
  400b28:	231d      	movs	r3, #29
	twi_packet.addr_length = 1;
	twi_packet.chip = OV_I2C_SENSOR_ADDRESS;
	twi_packet.buffer = &ul_midl;
  400b2a:	aa02      	add	r2, sp, #8
 */
uint32_t ov_read_reg(Twi* const p_twi, twi_packet_t* const p_packet)
{
	uint32_t ul_status;

	ul_status = twi_master_read(p_twi, p_packet);
  400b2c:	4640      	mov	r0, r8
  400b2e:	a907      	add	r1, sp, #28
	twi_packet.length = 1;

	ov_read_reg(p_twi, &twi_packet);

	/* OV_MIDL */
	twi_packet.addr[0] = OV7740_MIDL;
  400b30:	f88d 301c 	strb.w	r3, [sp, #28]
	twi_packet.addr_length = 1;
  400b34:	9408      	str	r4, [sp, #32]
	twi_packet.chip = OV_I2C_SENSOR_ADDRESS;
  400b36:	f88d 702c 	strb.w	r7, [sp, #44]	; 0x2c
	twi_packet.buffer = &ul_midl;
  400b3a:	9209      	str	r2, [sp, #36]	; 0x24
	twi_packet.length = 1;
  400b3c:	940a      	str	r4, [sp, #40]	; 0x28
 */
uint32_t ov_read_reg(Twi* const p_twi, twi_packet_t* const p_packet)
{
	uint32_t ul_status;

	ul_status = twi_master_read(p_twi, p_packet);
  400b3e:	47b0      	blx	r6
	twi_packet.buffer = &ul_midl;
	twi_packet.length = 1;

	ov_read_reg(p_twi, &twi_packet);

	if ((ul_midh == OV7740_MIDH_DEFAULT) && (ul_midl == OV7740_MIDL_DEFAULT)) {
  400b40:	9b01      	ldr	r3, [sp, #4]
  400b42:	2b7f      	cmp	r3, #127	; 0x7f
  400b44:	d1dd      	bne.n	400b02 <ov_init+0x52>
  400b46:	9b02      	ldr	r3, [sp, #8]
  400b48:	2ba2      	cmp	r3, #162	; 0xa2
  400b4a:	d1da      	bne.n	400b02 <ov_init+0x52>
	twi_packet.addr[0] = 0x01;
	twi_packet.addr_length = 1;
	twi_packet.chip = OV_I2C_SENSOR_ADDRESS;
	twi_packet.length = 1;

	twi_packet.buffer = &ul_oldvalue;
  400b4c:	ab01      	add	r3, sp, #4
 */
uint32_t ov_read_reg(Twi* const p_twi, twi_packet_t* const p_packet)
{
	uint32_t ul_status;

	ul_status = twi_master_read(p_twi, p_packet);
  400b4e:	a907      	add	r1, sp, #28
  400b50:	4640      	mov	r0, r8
	uint32_t ul_value = 0;
	uint32_t ul_oldvalue = 0;
	uint32_t ul_entervalue = 0;

	/* OV_BLUE_GAIN */
	twi_packet.addr[0] = 0x01;
  400b52:	f88d 401c 	strb.w	r4, [sp, #28]
	twi_packet.addr_length = 1;
  400b56:	9408      	str	r4, [sp, #32]
	twi_packet.chip = OV_I2C_SENSOR_ADDRESS;
	twi_packet.length = 1;
  400b58:	940a      	str	r4, [sp, #40]	; 0x28

	twi_packet.buffer = &ul_oldvalue;
  400b5a:	9309      	str	r3, [sp, #36]	; 0x24
 * \return 0 on success, 1 otherwise.
 */
static uint32_t ov_test_write(Twi* const p_twi)
{
	twi_packet_t twi_packet;
	uint32_t ul_value = 0;
  400b5c:	9500      	str	r5, [sp, #0]
	uint32_t ul_oldvalue = 0;
  400b5e:	9501      	str	r5, [sp, #4]
	uint32_t ul_entervalue = 0;
  400b60:	9502      	str	r5, [sp, #8]

	/* OV_BLUE_GAIN */
	twi_packet.addr[0] = 0x01;
	twi_packet.addr_length = 1;
	twi_packet.chip = OV_I2C_SENSOR_ADDRESS;
  400b62:	f88d 702c 	strb.w	r7, [sp, #44]	; 0x2c
 */
uint32_t ov_write_reg(Twi* const p_twi, twi_packet_t* const p_packet)
{
	uint32_t ul_status;

	ul_status = twi_master_write(p_twi, p_packet);
  400b66:	4c12      	ldr	r4, [pc, #72]	; (400bb0 <ov_init+0x100>)
 */
uint32_t ov_read_reg(Twi* const p_twi, twi_packet_t* const p_packet)
{
	uint32_t ul_status;

	ul_status = twi_master_read(p_twi, p_packet);
  400b68:	47b0      	blx	r6
	twi_packet.length = 1;

	twi_packet.buffer = &ul_oldvalue;
	ov_read_reg(p_twi, &twi_packet);

	ul_entervalue = 0xAD;
  400b6a:	23ad      	movs	r3, #173	; 0xad
	twi_packet.buffer = &ul_entervalue;
  400b6c:	aa02      	add	r2, sp, #8
 */
uint32_t ov_write_reg(Twi* const p_twi, twi_packet_t* const p_packet)
{
	uint32_t ul_status;

	ul_status = twi_master_write(p_twi, p_packet);
  400b6e:	a907      	add	r1, sp, #28
  400b70:	4640      	mov	r0, r8

	twi_packet.buffer = &ul_oldvalue;
	ov_read_reg(p_twi, &twi_packet);

	ul_entervalue = 0xAD;
	twi_packet.buffer = &ul_entervalue;
  400b72:	9209      	str	r2, [sp, #36]	; 0x24
	twi_packet.length = 1;

	twi_packet.buffer = &ul_oldvalue;
	ov_read_reg(p_twi, &twi_packet);

	ul_entervalue = 0xAD;
  400b74:	9302      	str	r3, [sp, #8]
 */
uint32_t ov_write_reg(Twi* const p_twi, twi_packet_t* const p_packet)
{
	uint32_t ul_status;

	ul_status = twi_master_write(p_twi, p_packet);
  400b76:	47a0      	blx	r4
 */
uint32_t ov_read_reg(Twi* const p_twi, twi_packet_t* const p_packet)
{
	uint32_t ul_status;

	ul_status = twi_master_read(p_twi, p_packet);
  400b78:	4640      	mov	r0, r8
  400b7a:	a907      	add	r1, sp, #28

	ul_entervalue = 0xAD;
	twi_packet.buffer = &ul_entervalue;
	ov_write_reg(p_twi, &twi_packet);

	twi_packet.buffer = &ul_value;
  400b7c:	f8cd d024 	str.w	sp, [sp, #36]	; 0x24
 */
uint32_t ov_read_reg(Twi* const p_twi, twi_packet_t* const p_packet)
{
	uint32_t ul_status;

	ul_status = twi_master_read(p_twi, p_packet);
  400b80:	47b0      	blx	r6
	ov_write_reg(p_twi, &twi_packet);

	twi_packet.buffer = &ul_value;
	ov_read_reg(p_twi, &twi_packet);

	if (ul_value != ul_entervalue) {
  400b82:	9a00      	ldr	r2, [sp, #0]
  400b84:	9b02      	ldr	r3, [sp, #8]
  400b86:	429a      	cmp	r2, r3
  400b88:	d1bb      	bne.n	400b02 <ov_init+0x52>
		return 1;
	}

	/* return old value */
	twi_packet.buffer = &ul_oldvalue;
  400b8a:	ab01      	add	r3, sp, #4
 */
uint32_t ov_write_reg(Twi* const p_twi, twi_packet_t* const p_packet)
{
	uint32_t ul_status;

	ul_status = twi_master_write(p_twi, p_packet);
  400b8c:	a907      	add	r1, sp, #28
  400b8e:	4640      	mov	r0, r8
	if (ul_value != ul_entervalue) {
		return 1;
	}

	/* return old value */
	twi_packet.buffer = &ul_oldvalue;
  400b90:	9309      	str	r3, [sp, #36]	; 0x24
 */
uint32_t ov_write_reg(Twi* const p_twi, twi_packet_t* const p_packet)
{
	uint32_t ul_status;

	ul_status = twi_master_write(p_twi, p_packet);
  400b92:	47a0      	blx	r4
 */
uint32_t ov_read_reg(Twi* const p_twi, twi_packet_t* const p_packet)
{
	uint32_t ul_status;

	ul_status = twi_master_read(p_twi, p_packet);
  400b94:	4640      	mov	r0, r8
  400b96:	a907      	add	r1, sp, #28

	/* return old value */
	twi_packet.buffer = &ul_oldvalue;
	ov_write_reg(p_twi, &twi_packet);

	twi_packet.buffer = &ul_value;
  400b98:	f8cd d024 	str.w	sp, [sp, #36]	; 0x24
 */
uint32_t ov_read_reg(Twi* const p_twi, twi_packet_t* const p_packet)
{
	uint32_t ul_status;

	ul_status = twi_master_read(p_twi, p_packet);
  400b9c:	47b0      	blx	r6
	ov_write_reg(p_twi, &twi_packet);

	twi_packet.buffer = &ul_value;
	ov_read_reg(p_twi, &twi_packet);

	if (ul_value != ul_oldvalue) {
  400b9e:	e89d 000c 	ldmia.w	sp, {r2, r3}
  400ba2:	429a      	cmp	r2, r3
  400ba4:	d1ad      	bne.n	400b02 <ov_init+0x52>
	ul_id = ov_id( p_twi );

	if (((ul_id >> 8)&0xff)  == OV7740_PIDH_DEFAULT) {
		if (ov_manufacturer( p_twi ) == 0) {
			if (ov_test_write( p_twi ) == 0) {
				return 0;
  400ba6:	4628      	mov	r0, r5
  400ba8:	e7ac      	b.n	400b04 <ov_init+0x54>
  400baa:	bf00      	nop
  400bac:	00401a95 	.word	0x00401a95
  400bb0:	00401b59 	.word	0x00401b59

00400bb4 <ov_configure>:
 * \param p_twi TWI interface.
 * \param format Specific format to configure.
 * \return 0 on success, 1 otherwise.
 */
uint32_t ov_configure(Twi* const p_twi, const e_ov7740_format format)
{
  400bb4:	2908      	cmp	r1, #8
  400bb6:	d82f      	bhi.n	400c18 <ov_configure+0x64>
  400bb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  400bbc:	4b18      	ldr	r3, [pc, #96]	; (400c20 <ov_configure+0x6c>)
  400bbe:	f853 4021 	ldr.w	r4, [r3, r1, lsl #2]
  400bc2:	b086      	sub	sp, #24

	default:
		break;
	}

	if (p_regs_conf != NULL) {
  400bc4:	b354      	cbz	r4, 400c1c <ov_configure+0x68>
  400bc6:	4606      	mov	r6, r0
  400bc8:	3401      	adds	r4, #1
			(p_next->val == OV_VAL_TERM))) {
		if (p_next->reg == 0xFE) {
			delay_ms(5);
		} else {
			twi_packet_regs.addr[0] = p_next->reg;
			twi_packet_regs.addr_length = 1;
  400bca:	2501      	movs	r5, #1
 */
uint32_t ov_write_reg(Twi* const p_twi, twi_packet_t* const p_packet)
{
	uint32_t ul_status;

	ul_status = twi_master_write(p_twi, p_packet);
  400bcc:	4f15      	ldr	r7, [pc, #84]	; (400c24 <ov_configure+0x70>)
	ov_reg *p_next = (ov_reg *)p_reg_list;

	while (!((p_next->reg == OV_REG_TERM) &&
			(p_next->val == OV_VAL_TERM))) {
		if (p_next->reg == 0xFE) {
			delay_ms(5);
  400bce:	f8df 8058 	ldr.w	r8, [pc, #88]	; 400c28 <ov_configure+0x74>
  400bd2:	e00c      	b.n	400bee <ov_configure+0x3a>
	twi_packet_t twi_packet_regs;
	ov_reg *p_next = (ov_reg *)p_reg_list;

	while (!((p_next->reg == OV_REG_TERM) &&
			(p_next->val == OV_VAL_TERM))) {
		if (p_next->reg == 0xFE) {
  400bd4:	2bfe      	cmp	r3, #254	; 0xfe
  400bd6:	d01b      	beq.n	400c10 <ov_configure+0x5c>
			delay_ms(5);
		} else {
			twi_packet_regs.addr[0] = p_next->reg;
  400bd8:	f88d 3004 	strb.w	r3, [sp, #4]
			twi_packet_regs.addr_length = 1;
  400bdc:	9502      	str	r5, [sp, #8]
			twi_packet_regs.chip = OV_I2C_SENSOR_ADDRESS;
  400bde:	f88d 2014 	strb.w	r2, [sp, #20]
			twi_packet_regs.length = 1;
  400be2:	9504      	str	r5, [sp, #16]
			twi_packet_regs.buffer = &(p_next->val);
  400be4:	9403      	str	r4, [sp, #12]
 */
uint32_t ov_write_reg(Twi* const p_twi, twi_packet_t* const p_packet)
{
	uint32_t ul_status;

	ul_status = twi_master_write(p_twi, p_packet);
  400be6:	47b8      	blx	r7
			twi_packet_regs.buffer = &(p_next->val);

			ul_err = ov_write_reg(p_twi, &twi_packet_regs);
			ul_size++;

			if (ul_err == TWI_BUSY) {
  400be8:	2808      	cmp	r0, #8
  400bea:	d00d      	beq.n	400c08 <ov_configure+0x54>
  400bec:	3402      	adds	r4, #2
	uint32_t ul_err;
	uint32_t ul_size = 0;
	twi_packet_t twi_packet_regs;
	ov_reg *p_next = (ov_reg *)p_reg_list;

	while (!((p_next->reg == OV_REG_TERM) &&
  400bee:	f814 3c01 	ldrb.w	r3, [r4, #-1]
  400bf2:	2bff      	cmp	r3, #255	; 0xff
		if (p_next->reg == 0xFE) {
			delay_ms(5);
		} else {
			twi_packet_regs.addr[0] = p_next->reg;
			twi_packet_regs.addr_length = 1;
			twi_packet_regs.chip = OV_I2C_SENSOR_ADDRESS;
  400bf4:	f04f 0221 	mov.w	r2, #33	; 0x21
 */
uint32_t ov_write_reg(Twi* const p_twi, twi_packet_t* const p_packet)
{
	uint32_t ul_status;

	ul_status = twi_master_write(p_twi, p_packet);
  400bf8:	4630      	mov	r0, r6
  400bfa:	a901      	add	r1, sp, #4
	uint32_t ul_err;
	uint32_t ul_size = 0;
	twi_packet_t twi_packet_regs;
	ov_reg *p_next = (ov_reg *)p_reg_list;

	while (!((p_next->reg == OV_REG_TERM) &&
  400bfc:	d1ea      	bne.n	400bd4 <ov_configure+0x20>
  400bfe:	f894 e000 	ldrb.w	lr, [r4]
  400c02:	f1be 0fff 	cmp.w	lr, #255	; 0xff
  400c06:	d1e7      	bne.n	400bd8 <ov_configure+0x24>
		break;
	}

	if (p_regs_conf != NULL) {
		ov_write_regs( p_twi, p_regs_conf );
		return 0;
  400c08:	2000      	movs	r0, #0
	}

	return 1;
}
  400c0a:	b006      	add	sp, #24
  400c0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	ov_reg *p_next = (ov_reg *)p_reg_list;

	while (!((p_next->reg == OV_REG_TERM) &&
			(p_next->val == OV_VAL_TERM))) {
		if (p_next->reg == 0xFE) {
			delay_ms(5);
  400c10:	f24a 706a 	movw	r0, #42858	; 0xa76a
  400c14:	47c0      	blx	r8
  400c16:	e7e9      	b.n	400bec <ov_configure+0x38>
	if (p_regs_conf != NULL) {
		ov_write_regs( p_twi, p_regs_conf );
		return 0;
	}

	return 1;
  400c18:	2001      	movs	r0, #1
}
  400c1a:	4770      	bx	lr
	if (p_regs_conf != NULL) {
		ov_write_regs( p_twi, p_regs_conf );
		return 0;
	}

	return 1;
  400c1c:	2001      	movs	r0, #1
  400c1e:	e7f4      	b.n	400c0a <ov_configure+0x56>
  400c20:	0040f878 	.word	0x0040f878
  400c24:	00401b59 	.word	0x00401b59
  400c28:	20000001 	.word	0x20000001

00400c2c <aat31xx_set_backlight>:
 * \param ul_level backlight level.
 *
 * \note pin BOARD_AAT31XX_SET_GPIO must be configured before calling aat31xx_set_backlight.
 */
void aat31xx_set_backlight(uint32_t ul_level)
{
  400c2c:	b470      	push	{r4, r5, r6}
	volatile uint32_t ul_delay;
	uint32_t i;

#ifdef CONF_BOARD_AAT3155
	ul_level = AAT31XX_MAX_BACKLIGHT_LEVEL - ul_level + 1;
  400c2e:	f1c0 0011 	rsb	r0, r0, #17
#ifdef CONF_BOARD_AAT3193
	ul_level = AAT31XX_MAX_BACKLIGHT_LEVEL - ul_level + 1;
#endif

	/* Ensure valid level */
	ul_level = (ul_level > AAT31XX_MAX_BACKLIGHT_LEVEL) ? AAT31XX_MAX_BACKLIGHT_LEVEL : ul_level;
  400c32:	2810      	cmp	r0, #16
  400c34:	bf28      	it	cs
  400c36:	2010      	movcs	r0, #16
	ul_level = (ul_level < AAT31XX_MIN_BACKLIGHT_LEVEL) ? AAT31XX_MIN_BACKLIGHT_LEVEL : ul_level;
  400c38:	2800      	cmp	r0, #0
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  400c3a:	4e12      	ldr	r6, [pc, #72]	; (400c84 <aat31xx_set_backlight+0x58>)
 * \param ul_level backlight level.
 *
 * \note pin BOARD_AAT31XX_SET_GPIO must be configured before calling aat31xx_set_backlight.
 */
void aat31xx_set_backlight(uint32_t ul_level)
{
  400c3c:	b083      	sub	sp, #12
	ul_level = AAT31XX_MAX_BACKLIGHT_LEVEL - ul_level + 1;
#endif

	/* Ensure valid level */
	ul_level = (ul_level > AAT31XX_MAX_BACKLIGHT_LEVEL) ? AAT31XX_MAX_BACKLIGHT_LEVEL : ul_level;
	ul_level = (ul_level < AAT31XX_MIN_BACKLIGHT_LEVEL) ? AAT31XX_MIN_BACKLIGHT_LEVEL : ul_level;
  400c3e:	bf08      	it	eq
  400c40:	2001      	moveq	r0, #1

	/* Set new backlight level */
	for (i = 0; i < ul_level; i++) {
  400c42:	2100      	movs	r1, #0
  400c44:	f44f 5500 	mov.w	r5, #8192	; 0x2000
		ioport_set_pin_level(BOARD_AAT31XX_SET_GPIO, IOPORT_PIN_LEVEL_LOW);
		ul_delay = DELAY_PULSE;
  400c48:	2418      	movs	r4, #24
  400c4a:	6375      	str	r5, [r6, #52]	; 0x34
  400c4c:	9401      	str	r4, [sp, #4]
		while (ul_delay--) {
  400c4e:	9b01      	ldr	r3, [sp, #4]
  400c50:	1e5a      	subs	r2, r3, #1
  400c52:	9201      	str	r2, [sp, #4]
  400c54:	2b00      	cmp	r3, #0
  400c56:	d1fa      	bne.n	400c4e <aat31xx_set_backlight+0x22>
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  400c58:	6335      	str	r5, [r6, #48]	; 0x30
		}

		ioport_set_pin_level(BOARD_AAT31XX_SET_GPIO, IOPORT_PIN_LEVEL_HIGH);

		ul_delay = DELAY_PULSE;
  400c5a:	9401      	str	r4, [sp, #4]
		while (ul_delay--) {
  400c5c:	9b01      	ldr	r3, [sp, #4]
  400c5e:	1e5a      	subs	r2, r3, #1
  400c60:	9201      	str	r2, [sp, #4]
  400c62:	2b00      	cmp	r3, #0
  400c64:	d1fa      	bne.n	400c5c <aat31xx_set_backlight+0x30>
	/* Ensure valid level */
	ul_level = (ul_level > AAT31XX_MAX_BACKLIGHT_LEVEL) ? AAT31XX_MAX_BACKLIGHT_LEVEL : ul_level;
	ul_level = (ul_level < AAT31XX_MIN_BACKLIGHT_LEVEL) ? AAT31XX_MIN_BACKLIGHT_LEVEL : ul_level;

	/* Set new backlight level */
	for (i = 0; i < ul_level; i++) {
  400c66:	3101      	adds	r1, #1
  400c68:	4281      	cmp	r1, r0
  400c6a:	d1ee      	bne.n	400c4a <aat31xx_set_backlight+0x1e>
		ul_delay = DELAY_PULSE;
		while (ul_delay--) {
		}
	}

	ul_delay = DELAY_ENABLE;
  400c6c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
  400c70:	9301      	str	r3, [sp, #4]
	while (ul_delay--) {
  400c72:	9b01      	ldr	r3, [sp, #4]
  400c74:	1e5a      	subs	r2, r3, #1
  400c76:	9201      	str	r2, [sp, #4]
  400c78:	2b00      	cmp	r3, #0
  400c7a:	d1fa      	bne.n	400c72 <aat31xx_set_backlight+0x46>
	}
}
  400c7c:	b003      	add	sp, #12
  400c7e:	bc70      	pop	{r4, r5, r6}
  400c80:	4770      	bx	lr
  400c82:	bf00      	nop
  400c84:	400e1200 	.word	0x400e1200

00400c88 <aat31xx_disable_backlight>:

/**
 * \brief Switch off backlight.
 */
void aat31xx_disable_backlight(void)
{
  400c88:	b082      	sub	sp, #8
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  400c8a:	4a07      	ldr	r2, [pc, #28]	; (400ca8 <aat31xx_disable_backlight+0x20>)
  400c8c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
	volatile uint32_t ul_delay;

	ioport_set_pin_level(BOARD_AAT31XX_SET_GPIO, IOPORT_PIN_LEVEL_LOW);

	ul_delay = DELAY_DISABLE;
  400c90:	f44f 3300 	mov.w	r3, #131072	; 0x20000
  400c94:	6351      	str	r1, [r2, #52]	; 0x34
  400c96:	9301      	str	r3, [sp, #4]
	while (ul_delay--) {
  400c98:	9b01      	ldr	r3, [sp, #4]
  400c9a:	1e5a      	subs	r2, r3, #1
  400c9c:	9201      	str	r2, [sp, #4]
  400c9e:	2b00      	cmp	r3, #0
  400ca0:	d1fa      	bne.n	400c98 <aat31xx_disable_backlight+0x10>
	}
}
  400ca2:	b002      	add	sp, #8
  400ca4:	4770      	bx	lr
  400ca6:	bf00      	nop
  400ca8:	400e1200 	.word	0x400e1200

00400cac <ili9325_init>:
 * \param p_opt pointer to ILI9325 option structure.
 *
 * \return 0 if initialization succeeds, otherwise fails.
 */
uint32_t ili9325_init(struct ili9325_opt_t *p_opt)
{
  400cac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

/* Define EBI access for ILI9325 8-bit System Interface.*/
#if defined(BOARD_ILI9325_ADDR) && defined (BOARD_ILI9325_RS)
	static inline void LCD_IR(uint8_t lcd_index)
	{
		*((volatile uint8_t *)(BOARD_ILI9325_ADDR)) = lcd_index; /* ILI9325 index register address */
  400cb0:	f04f 41c4 	mov.w	r1, #1644167168	; 0x62000000
  400cb4:	2300      	movs	r3, #0
	{
		*((volatile uint8_t *)((BOARD_ILI9325_ADDR) | (BOARD_ILI9325_RS))) = lcd_data;
	}
	static inline uint8_t LCD_RD(void)
	{
		return *((volatile uint8_t *)((BOARD_ILI9325_ADDR) | (BOARD_ILI9325_RS)));
  400cb6:	4a08      	ldr	r2, [pc, #32]	; (400cd8 <ili9325_init+0x2c>)

/* Define EBI access for ILI9325 8-bit System Interface.*/
#if defined(BOARD_ILI9325_ADDR) && defined (BOARD_ILI9325_RS)
	static inline void LCD_IR(uint8_t lcd_index)
	{
		*((volatile uint8_t *)(BOARD_ILI9325_ADDR)) = lcd_index; /* ILI9325 index register address */
  400cb8:	700b      	strb	r3, [r1, #0]
  400cba:	700b      	strb	r3, [r1, #0]
	{
		*((volatile uint8_t *)((BOARD_ILI9325_ADDR) | (BOARD_ILI9325_RS))) = lcd_data;
	}
	static inline uint8_t LCD_RD(void)
	{
		return *((volatile uint8_t *)((BOARD_ILI9325_ADDR) | (BOARD_ILI9325_RS)));
  400cbc:	7816      	ldrb	r6, [r2, #0]
  400cbe:	7814      	ldrb	r4, [r2, #0]
	/* Check ILI9325 chipid */
	uint16_t chipid = ili9325_read_register(ILI9325_DEVICE_CODE_REG); /* Driver Code Read (R00h) */

	if (chipid != ILI9325_DEVICE_CODE) {
  400cc0:	f249 3525 	movw	r5, #37669	; 0x9325
static uint16_t ili9325_lcd_get_16(void)
{
	uint16_t us_value;

	us_value = LCD_RD();
	us_value = (us_value << 8) | LCD_RD();
  400cc4:	ea44 2406 	orr.w	r4, r4, r6, lsl #8
uint32_t ili9325_init(struct ili9325_opt_t *p_opt)
{
	/* Check ILI9325 chipid */
	uint16_t chipid = ili9325_read_register(ILI9325_DEVICE_CODE_REG); /* Driver Code Read (R00h) */

	if (chipid != ILI9325_DEVICE_CODE) {
  400cc8:	42ac      	cmp	r4, r5
 * \param p_opt pointer to ILI9325 option structure.
 *
 * \return 0 if initialization succeeds, otherwise fails.
 */
uint32_t ili9325_init(struct ili9325_opt_t *p_opt)
{
  400cca:	b085      	sub	sp, #20
	/* Check ILI9325 chipid */
	uint16_t chipid = ili9325_read_register(ILI9325_DEVICE_CODE_REG); /* Driver Code Read (R00h) */

	if (chipid != ILI9325_DEVICE_CODE) {
  400ccc:	d006      	beq.n	400cdc <ili9325_init+0x30>
		return 1;
  400cce:	2001      	movs	r0, #1

	ili9325_set_window(0, 0,p_opt->ul_width,p_opt->ul_height);
	ili9325_set_foreground_color(p_opt->foreground_color);
	ili9325_set_cursor_position(0, 0);
	return 0;
}
  400cd0:	b005      	add	sp, #20
  400cd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  400cd6:	bf00      	nop
  400cd8:	62000002 	.word	0x62000002
	{
		*((volatile uint8_t *)(BOARD_ILI9325_ADDR)) = lcd_index; /* ILI9325 index register address */
	}
	static inline void LCD_WD(uint8_t lcd_data)
	{
		*((volatile uint8_t *)((BOARD_ILI9325_ADDR) | (BOARD_ILI9325_RS))) = lcd_data;
  400cdc:	2501      	movs	r5, #1

/* Define EBI access for ILI9325 8-bit System Interface.*/
#if defined(BOARD_ILI9325_ADDR) && defined (BOARD_ILI9325_RS)
	static inline void LCD_IR(uint8_t lcd_index)
	{
		*((volatile uint8_t *)(BOARD_ILI9325_ADDR)) = lcd_index; /* ILI9325 index register address */
  400cde:	2407      	movs	r4, #7
  400ce0:	2702      	movs	r7, #2
	}
	static inline void LCD_WD(uint8_t lcd_data)
	{
		*((volatile uint8_t *)((BOARD_ILI9325_ADDR) | (BOARD_ILI9325_RS))) = lcd_data;
  400ce2:	f04f 0e33 	mov.w	lr, #51	; 0x33

/* Define EBI access for ILI9325 8-bit System Interface.*/
#if defined(BOARD_ILI9325_ADDR) && defined (BOARD_ILI9325_RS)
	static inline void LCD_IR(uint8_t lcd_index)
	{
		*((volatile uint8_t *)(BOARD_ILI9325_ADDR)) = lcd_index; /* ILI9325 index register address */
  400ce6:	2610      	movs	r6, #16
  400ce8:	f04f 0b04 	mov.w	fp, #4
  400cec:	f04f 0a08 	mov.w	sl, #8
  400cf0:	700b      	strb	r3, [r1, #0]
  400cf2:	f04f 0909 	mov.w	r9, #9
  400cf6:	700c      	strb	r4, [r1, #0]
  400cf8:	f04f 080a 	mov.w	r8, #10
	}
	static inline void LCD_WD(uint8_t lcd_data)
	{
		*((volatile uint8_t *)((BOARD_ILI9325_ADDR) | (BOARD_ILI9325_RS))) = lcd_data;
  400cfc:	7013      	strb	r3, [r2, #0]

/* Define EBI access for ILI9325 8-bit System Interface.*/
#if defined(BOARD_ILI9325_ADDR) && defined (BOARD_ILI9325_RS)
	static inline void LCD_IR(uint8_t lcd_index)
	{
		*((volatile uint8_t *)(BOARD_ILI9325_ADDR)) = lcd_index; /* ILI9325 index register address */
  400cfe:	f04f 0c0c 	mov.w	ip, #12
	}
	static inline void LCD_WD(uint8_t lcd_data)
	{
		*((volatile uint8_t *)((BOARD_ILI9325_ADDR) | (BOARD_ILI9325_RS))) = lcd_data;
  400d02:	f882 e000 	strb.w	lr, [r2]

/* Define EBI access for ILI9325 8-bit System Interface.*/
#if defined(BOARD_ILI9325_ADDR) && defined (BOARD_ILI9325_RS)
	static inline void LCD_IR(uint8_t lcd_index)
	{
		*((volatile uint8_t *)(BOARD_ILI9325_ADDR)) = lcd_index; /* ILI9325 index register address */
  400d06:	700b      	strb	r3, [r1, #0]
  400d08:	f04f 0e0d 	mov.w	lr, #13
  400d0c:	700e      	strb	r6, [r1, #0]
	}
	static inline void LCD_WD(uint8_t lcd_data)
	{
		*((volatile uint8_t *)((BOARD_ILI9325_ADDR) | (BOARD_ILI9325_RS))) = lcd_data;
  400d0e:	7013      	strb	r3, [r2, #0]
  400d10:	7013      	strb	r3, [r2, #0]

/* Define EBI access for ILI9325 8-bit System Interface.*/
#if defined(BOARD_ILI9325_ADDR) && defined (BOARD_ILI9325_RS)
	static inline void LCD_IR(uint8_t lcd_index)
	{
		*((volatile uint8_t *)(BOARD_ILI9325_ADDR)) = lcd_index; /* ILI9325 index register address */
  400d12:	700b      	strb	r3, [r1, #0]
  400d14:	700b      	strb	r3, [r1, #0]
	}
	static inline void LCD_WD(uint8_t lcd_data)
	{
		*((volatile uint8_t *)((BOARD_ILI9325_ADDR) | (BOARD_ILI9325_RS))) = lcd_data;
  400d16:	7013      	strb	r3, [r2, #0]
  400d18:	7015      	strb	r5, [r2, #0]

/* Define EBI access for ILI9325 8-bit System Interface.*/
#if defined(BOARD_ILI9325_ADDR) && defined (BOARD_ILI9325_RS)
	static inline void LCD_IR(uint8_t lcd_index)
	{
		*((volatile uint8_t *)(BOARD_ILI9325_ADDR)) = lcd_index; /* ILI9325 index register address */
  400d1a:	700b      	strb	r3, [r1, #0]
  400d1c:	700d      	strb	r5, [r1, #0]
	}
	static inline void LCD_WD(uint8_t lcd_data)
	{
		*((volatile uint8_t *)((BOARD_ILI9325_ADDR) | (BOARD_ILI9325_RS))) = lcd_data;
  400d1e:	7015      	strb	r5, [r2, #0]
  400d20:	7013      	strb	r3, [r2, #0]

/* Define EBI access for ILI9325 8-bit System Interface.*/
#if defined(BOARD_ILI9325_ADDR) && defined (BOARD_ILI9325_RS)
	static inline void LCD_IR(uint8_t lcd_index)
	{
		*((volatile uint8_t *)(BOARD_ILI9325_ADDR)) = lcd_index; /* ILI9325 index register address */
  400d22:	250f      	movs	r5, #15
  400d24:	700b      	strb	r3, [r1, #0]
  400d26:	700f      	strb	r7, [r1, #0]
	}
	static inline void LCD_WD(uint8_t lcd_data)
	{
		*((volatile uint8_t *)((BOARD_ILI9325_ADDR) | (BOARD_ILI9325_RS))) = lcd_data;
  400d28:	7014      	strb	r4, [r2, #0]
  400d2a:	7013      	strb	r3, [r2, #0]

/* Define EBI access for ILI9325 8-bit System Interface.*/
#if defined(BOARD_ILI9325_ADDR) && defined (BOARD_ILI9325_RS)
	static inline void LCD_IR(uint8_t lcd_index)
	{
		*((volatile uint8_t *)(BOARD_ILI9325_ADDR)) = lcd_index; /* ILI9325 index register address */
  400d2c:	700b      	strb	r3, [r1, #0]
  400d2e:	f881 b000 	strb.w	fp, [r1]
	}
	static inline void LCD_WD(uint8_t lcd_data)
	{
		*((volatile uint8_t *)((BOARD_ILI9325_ADDR) | (BOARD_ILI9325_RS))) = lcd_data;
  400d32:	7013      	strb	r3, [r2, #0]

/* Define EBI access for ILI9325 8-bit System Interface.*/
#if defined(BOARD_ILI9325_ADDR) && defined (BOARD_ILI9325_RS)
	static inline void LCD_IR(uint8_t lcd_index)
	{
		*((volatile uint8_t *)(BOARD_ILI9325_ADDR)) = lcd_index; /* ILI9325 index register address */
  400d34:	f04f 0b11 	mov.w	fp, #17
	}
	static inline void LCD_WD(uint8_t lcd_data)
	{
		*((volatile uint8_t *)((BOARD_ILI9325_ADDR) | (BOARD_ILI9325_RS))) = lcd_data;
  400d38:	7013      	strb	r3, [r2, #0]

/* Define EBI access for ILI9325 8-bit System Interface.*/
#if defined(BOARD_ILI9325_ADDR) && defined (BOARD_ILI9325_RS)
	static inline void LCD_IR(uint8_t lcd_index)
	{
		*((volatile uint8_t *)(BOARD_ILI9325_ADDR)) = lcd_index; /* ILI9325 index register address */
  400d3a:	700b      	strb	r3, [r1, #0]
  400d3c:	f881 a000 	strb.w	sl, [r1]
	}
	static inline void LCD_WD(uint8_t lcd_data)
	{
		*((volatile uint8_t *)((BOARD_ILI9325_ADDR) | (BOARD_ILI9325_RS))) = lcd_data;
  400d40:	7017      	strb	r7, [r2, #0]

/* Define EBI access for ILI9325 8-bit System Interface.*/
#if defined(BOARD_ILI9325_ADDR) && defined (BOARD_ILI9325_RS)
	static inline void LCD_IR(uint8_t lcd_index)
	{
		*((volatile uint8_t *)(BOARD_ILI9325_ADDR)) = lcd_index; /* ILI9325 index register address */
  400d42:	f04f 0a12 	mov.w	sl, #18
  400d46:	2713      	movs	r7, #19
	}
	static inline void LCD_WD(uint8_t lcd_data)
	{
		*((volatile uint8_t *)((BOARD_ILI9325_ADDR) | (BOARD_ILI9325_RS))) = lcd_data;
  400d48:	7014      	strb	r4, [r2, #0]

/* Define EBI access for ILI9325 8-bit System Interface.*/
#if defined(BOARD_ILI9325_ADDR) && defined (BOARD_ILI9325_RS)
	static inline void LCD_IR(uint8_t lcd_index)
	{
		*((volatile uint8_t *)(BOARD_ILI9325_ADDR)) = lcd_index; /* ILI9325 index register address */
  400d4a:	700b      	strb	r3, [r1, #0]
  400d4c:	f881 9000 	strb.w	r9, [r1]
	}
	static inline void LCD_WD(uint8_t lcd_data)
	{
		*((volatile uint8_t *)((BOARD_ILI9325_ADDR) | (BOARD_ILI9325_RS))) = lcd_data;
  400d50:	7013      	strb	r3, [r2, #0]
  400d52:	7013      	strb	r3, [r2, #0]

/* Define EBI access for ILI9325 8-bit System Interface.*/
#if defined(BOARD_ILI9325_ADDR) && defined (BOARD_ILI9325_RS)
	static inline void LCD_IR(uint8_t lcd_index)
	{
		*((volatile uint8_t *)(BOARD_ILI9325_ADDR)) = lcd_index; /* ILI9325 index register address */
  400d54:	700b      	strb	r3, [r1, #0]
  400d56:	f881 8000 	strb.w	r8, [r1]
	}
	static inline void LCD_WD(uint8_t lcd_data)
	{
		*((volatile uint8_t *)((BOARD_ILI9325_ADDR) | (BOARD_ILI9325_RS))) = lcd_data;
  400d5a:	7013      	strb	r3, [r2, #0]
  400d5c:	7013      	strb	r3, [r2, #0]

/* Define EBI access for ILI9325 8-bit System Interface.*/
#if defined(BOARD_ILI9325_ADDR) && defined (BOARD_ILI9325_RS)
	static inline void LCD_IR(uint8_t lcd_index)
	{
		*((volatile uint8_t *)(BOARD_ILI9325_ADDR)) = lcd_index; /* ILI9325 index register address */
  400d5e:	700b      	strb	r3, [r1, #0]
  400d60:	f881 c000 	strb.w	ip, [r1]
	}
	static inline void LCD_WD(uint8_t lcd_data)
	{
		*((volatile uint8_t *)((BOARD_ILI9325_ADDR) | (BOARD_ILI9325_RS))) = lcd_data;
  400d64:	7013      	strb	r3, [r2, #0]
  400d66:	7013      	strb	r3, [r2, #0]

/* Define EBI access for ILI9325 8-bit System Interface.*/
#if defined(BOARD_ILI9325_ADDR) && defined (BOARD_ILI9325_RS)
	static inline void LCD_IR(uint8_t lcd_index)
	{
		*((volatile uint8_t *)(BOARD_ILI9325_ADDR)) = lcd_index; /* ILI9325 index register address */
  400d68:	700b      	strb	r3, [r1, #0]
  400d6a:	f881 e000 	strb.w	lr, [r1]
	}
	static inline void LCD_WD(uint8_t lcd_data)
	{
		*((volatile uint8_t *)((BOARD_ILI9325_ADDR) | (BOARD_ILI9325_RS))) = lcd_data;
  400d6e:	7013      	strb	r3, [r2, #0]
  400d70:	7013      	strb	r3, [r2, #0]

/* Define EBI access for ILI9325 8-bit System Interface.*/
#if defined(BOARD_ILI9325_ADDR) && defined (BOARD_ILI9325_RS)
	static inline void LCD_IR(uint8_t lcd_index)
	{
		*((volatile uint8_t *)(BOARD_ILI9325_ADDR)) = lcd_index; /* ILI9325 index register address */
  400d72:	700b      	strb	r3, [r1, #0]
  400d74:	700d      	strb	r5, [r1, #0]
	}
	static inline void LCD_WD(uint8_t lcd_data)
	{
		*((volatile uint8_t *)((BOARD_ILI9325_ADDR) | (BOARD_ILI9325_RS))) = lcd_data;
  400d76:	7013      	strb	r3, [r2, #0]
  400d78:	7013      	strb	r3, [r2, #0]

/* Define EBI access for ILI9325 8-bit System Interface.*/
#if defined(BOARD_ILI9325_ADDR) && defined (BOARD_ILI9325_RS)
	static inline void LCD_IR(uint8_t lcd_index)
	{
		*((volatile uint8_t *)(BOARD_ILI9325_ADDR)) = lcd_index; /* ILI9325 index register address */
  400d7a:	700b      	strb	r3, [r1, #0]
  400d7c:	700e      	strb	r6, [r1, #0]
	}
	static inline void LCD_WD(uint8_t lcd_data)
	{
		*((volatile uint8_t *)((BOARD_ILI9325_ADDR) | (BOARD_ILI9325_RS))) = lcd_data;
  400d7e:	7013      	strb	r3, [r2, #0]
  400d80:	7013      	strb	r3, [r2, #0]

/* Define EBI access for ILI9325 8-bit System Interface.*/
#if defined(BOARD_ILI9325_ADDR) && defined (BOARD_ILI9325_RS)
	static inline void LCD_IR(uint8_t lcd_index)
	{
		*((volatile uint8_t *)(BOARD_ILI9325_ADDR)) = lcd_index; /* ILI9325 index register address */
  400d82:	700b      	strb	r3, [r1, #0]
  400d84:	f881 b000 	strb.w	fp, [r1]
	}
	static inline void LCD_WD(uint8_t lcd_data)
	{
		*((volatile uint8_t *)((BOARD_ILI9325_ADDR) | (BOARD_ILI9325_RS))) = lcd_data;
  400d88:	7013      	strb	r3, [r2, #0]
  400d8a:	7013      	strb	r3, [r2, #0]

/* Define EBI access for ILI9325 8-bit System Interface.*/
#if defined(BOARD_ILI9325_ADDR) && defined (BOARD_ILI9325_RS)
	static inline void LCD_IR(uint8_t lcd_index)
	{
		*((volatile uint8_t *)(BOARD_ILI9325_ADDR)) = lcd_index; /* ILI9325 index register address */
  400d8c:	700b      	strb	r3, [r1, #0]
  400d8e:	f881 a000 	strb.w	sl, [r1]
	}
	static inline void LCD_WD(uint8_t lcd_data)
	{
		*((volatile uint8_t *)((BOARD_ILI9325_ADDR) | (BOARD_ILI9325_RS))) = lcd_data;
  400d92:	7013      	strb	r3, [r2, #0]
  400d94:	7013      	strb	r3, [r2, #0]

/* Define EBI access for ILI9325 8-bit System Interface.*/
#if defined(BOARD_ILI9325_ADDR) && defined (BOARD_ILI9325_RS)
	static inline void LCD_IR(uint8_t lcd_index)
	{
		*((volatile uint8_t *)(BOARD_ILI9325_ADDR)) = lcd_index; /* ILI9325 index register address */
  400d96:	700b      	strb	r3, [r1, #0]
  400d98:	700f      	strb	r7, [r1, #0]
	}
	static inline void LCD_WD(uint8_t lcd_data)
	{
		*((volatile uint8_t *)((BOARD_ILI9325_ADDR) | (BOARD_ILI9325_RS))) = lcd_data;
  400d9a:	7013      	strb	r3, [r2, #0]
  400d9c:	7013      	strb	r3, [r2, #0]
 */
static void ili9325_delay(uint32_t ul_ms)
{
	volatile uint32_t i;

	for(i = 0; i < ul_ms; i++) {
  400d9e:	9300      	str	r3, [sp, #0]
  400da0:	9a00      	ldr	r2, [sp, #0]
  400da2:	2ac7      	cmp	r2, #199	; 0xc7
  400da4:	d811      	bhi.n	400dca <ili9325_init+0x11e>
		for(i = 0; i < 100000; i++) {
  400da6:	4ac3      	ldr	r2, [pc, #780]	; (4010b4 <ili9325_init+0x408>)
  400da8:	4619      	mov	r1, r3
  400daa:	9100      	str	r1, [sp, #0]
  400dac:	9b00      	ldr	r3, [sp, #0]
  400dae:	4293      	cmp	r3, r2
  400db0:	d805      	bhi.n	400dbe <ili9325_init+0x112>
  400db2:	9b00      	ldr	r3, [sp, #0]
  400db4:	3301      	adds	r3, #1
  400db6:	9300      	str	r3, [sp, #0]
  400db8:	9b00      	ldr	r3, [sp, #0]
  400dba:	4293      	cmp	r3, r2
  400dbc:	d9f9      	bls.n	400db2 <ili9325_init+0x106>
 */
static void ili9325_delay(uint32_t ul_ms)
{
	volatile uint32_t i;

	for(i = 0; i < ul_ms; i++) {
  400dbe:	9b00      	ldr	r3, [sp, #0]
  400dc0:	3301      	adds	r3, #1
  400dc2:	9300      	str	r3, [sp, #0]
  400dc4:	9b00      	ldr	r3, [sp, #0]
  400dc6:	2bc7      	cmp	r3, #199	; 0xc7
  400dc8:	d9ef      	bls.n	400daa <ili9325_init+0xfe>
  400dca:	4bbb      	ldr	r3, [pc, #748]	; (4010b8 <ili9325_init+0x40c>)

/* Define EBI access for ILI9325 8-bit System Interface.*/
#if defined(BOARD_ILI9325_ADDR) && defined (BOARD_ILI9325_RS)
	static inline void LCD_IR(uint8_t lcd_index)
	{
		*((volatile uint8_t *)(BOARD_ILI9325_ADDR)) = lcd_index; /* ILI9325 index register address */
  400dcc:	f04f 42c4 	mov.w	r2, #1644167168	; 0x62000000
  400dd0:	2100      	movs	r1, #0
  400dd2:	f04f 0c10 	mov.w	ip, #16
	}
	static inline void LCD_WD(uint8_t lcd_data)
	{
		*((volatile uint8_t *)((BOARD_ILI9325_ADDR) | (BOARD_ILI9325_RS))) = lcd_data;
  400dd6:	f04f 0e12 	mov.w	lr, #18
  400dda:	2790      	movs	r7, #144	; 0x90

/* Define EBI access for ILI9325 8-bit System Interface.*/
#if defined(BOARD_ILI9325_ADDR) && defined (BOARD_ILI9325_RS)
	static inline void LCD_IR(uint8_t lcd_index)
	{
		*((volatile uint8_t *)(BOARD_ILI9325_ADDR)) = lcd_index; /* ILI9325 index register address */
  400ddc:	2611      	movs	r6, #17
	}
	static inline void LCD_WD(uint8_t lcd_data)
	{
		*((volatile uint8_t *)((BOARD_ILI9325_ADDR) | (BOARD_ILI9325_RS))) = lcd_data;
  400dde:	2502      	movs	r5, #2
  400de0:	2427      	movs	r4, #39	; 0x27

/* Define EBI access for ILI9325 8-bit System Interface.*/
#if defined(BOARD_ILI9325_ADDR) && defined (BOARD_ILI9325_RS)
	static inline void LCD_IR(uint8_t lcd_index)
	{
		*((volatile uint8_t *)(BOARD_ILI9325_ADDR)) = lcd_index; /* ILI9325 index register address */
  400de2:	7011      	strb	r1, [r2, #0]
  400de4:	f882 c000 	strb.w	ip, [r2]
	}
	static inline void LCD_WD(uint8_t lcd_data)
	{
		*((volatile uint8_t *)((BOARD_ILI9325_ADDR) | (BOARD_ILI9325_RS))) = lcd_data;
  400de8:	f883 e000 	strb.w	lr, [r3]
  400dec:	701f      	strb	r7, [r3, #0]

/* Define EBI access for ILI9325 8-bit System Interface.*/
#if defined(BOARD_ILI9325_ADDR) && defined (BOARD_ILI9325_RS)
	static inline void LCD_IR(uint8_t lcd_index)
	{
		*((volatile uint8_t *)(BOARD_ILI9325_ADDR)) = lcd_index; /* ILI9325 index register address */
  400dee:	7011      	strb	r1, [r2, #0]
  400df0:	7016      	strb	r6, [r2, #0]
	}
	static inline void LCD_WD(uint8_t lcd_data)
	{
		*((volatile uint8_t *)((BOARD_ILI9325_ADDR) | (BOARD_ILI9325_RS))) = lcd_data;
  400df2:	701d      	strb	r5, [r3, #0]
  400df4:	701c      	strb	r4, [r3, #0]
  400df6:	9101      	str	r1, [sp, #4]
  400df8:	9b01      	ldr	r3, [sp, #4]
  400dfa:	2b31      	cmp	r3, #49	; 0x31
  400dfc:	d810      	bhi.n	400e20 <ili9325_init+0x174>
		for(i = 0; i < 100000; i++) {
  400dfe:	4aad      	ldr	r2, [pc, #692]	; (4010b4 <ili9325_init+0x408>)
  400e00:	9101      	str	r1, [sp, #4]
  400e02:	9b01      	ldr	r3, [sp, #4]
  400e04:	4293      	cmp	r3, r2
  400e06:	d805      	bhi.n	400e14 <ili9325_init+0x168>
  400e08:	9b01      	ldr	r3, [sp, #4]
  400e0a:	3301      	adds	r3, #1
  400e0c:	9301      	str	r3, [sp, #4]
  400e0e:	9b01      	ldr	r3, [sp, #4]
  400e10:	4293      	cmp	r3, r2
  400e12:	d9f9      	bls.n	400e08 <ili9325_init+0x15c>
 */
static void ili9325_delay(uint32_t ul_ms)
{
	volatile uint32_t i;

	for(i = 0; i < ul_ms; i++) {
  400e14:	9b01      	ldr	r3, [sp, #4]
  400e16:	3301      	adds	r3, #1
  400e18:	9301      	str	r3, [sp, #4]
  400e1a:	9b01      	ldr	r3, [sp, #4]
  400e1c:	2b31      	cmp	r3, #49	; 0x31
  400e1e:	d9ef      	bls.n	400e00 <ili9325_init+0x154>
  400e20:	4ba5      	ldr	r3, [pc, #660]	; (4010b8 <ili9325_init+0x40c>)

/* Define EBI access for ILI9325 8-bit System Interface.*/
#if defined(BOARD_ILI9325_ADDR) && defined (BOARD_ILI9325_RS)
	static inline void LCD_IR(uint8_t lcd_index)
	{
		*((volatile uint8_t *)(BOARD_ILI9325_ADDR)) = lcd_index; /* ILI9325 index register address */
  400e22:	f04f 42c4 	mov.w	r2, #1644167168	; 0x62000000
  400e26:	2100      	movs	r1, #0
  400e28:	2512      	movs	r5, #18
	}
	static inline void LCD_WD(uint8_t lcd_data)
	{
		*((volatile uint8_t *)((BOARD_ILI9325_ADDR) | (BOARD_ILI9325_RS))) = lcd_data;
  400e2a:	241b      	movs	r4, #27

/* Define EBI access for ILI9325 8-bit System Interface.*/
#if defined(BOARD_ILI9325_ADDR) && defined (BOARD_ILI9325_RS)
	static inline void LCD_IR(uint8_t lcd_index)
	{
		*((volatile uint8_t *)(BOARD_ILI9325_ADDR)) = lcd_index; /* ILI9325 index register address */
  400e2c:	7011      	strb	r1, [r2, #0]
  400e2e:	7015      	strb	r5, [r2, #0]
	}
	static inline void LCD_WD(uint8_t lcd_data)
	{
		*((volatile uint8_t *)((BOARD_ILI9325_ADDR) | (BOARD_ILI9325_RS))) = lcd_data;
  400e30:	7019      	strb	r1, [r3, #0]
  400e32:	701c      	strb	r4, [r3, #0]
  400e34:	9102      	str	r1, [sp, #8]
  400e36:	9b02      	ldr	r3, [sp, #8]
  400e38:	2b31      	cmp	r3, #49	; 0x31
  400e3a:	d810      	bhi.n	400e5e <ili9325_init+0x1b2>
		for(i = 0; i < 100000; i++) {
  400e3c:	4a9d      	ldr	r2, [pc, #628]	; (4010b4 <ili9325_init+0x408>)
  400e3e:	9102      	str	r1, [sp, #8]
  400e40:	9b02      	ldr	r3, [sp, #8]
  400e42:	4293      	cmp	r3, r2
  400e44:	d805      	bhi.n	400e52 <ili9325_init+0x1a6>
  400e46:	9b02      	ldr	r3, [sp, #8]
  400e48:	3301      	adds	r3, #1
  400e4a:	9302      	str	r3, [sp, #8]
  400e4c:	9b02      	ldr	r3, [sp, #8]
  400e4e:	4293      	cmp	r3, r2
  400e50:	d9f9      	bls.n	400e46 <ili9325_init+0x19a>
 */
static void ili9325_delay(uint32_t ul_ms)
{
	volatile uint32_t i;

	for(i = 0; i < ul_ms; i++) {
  400e52:	9b02      	ldr	r3, [sp, #8]
  400e54:	3301      	adds	r3, #1
  400e56:	9302      	str	r3, [sp, #8]
  400e58:	9b02      	ldr	r3, [sp, #8]
  400e5a:	2b31      	cmp	r3, #49	; 0x31
  400e5c:	d9ef      	bls.n	400e3e <ili9325_init+0x192>
  400e5e:	4b96      	ldr	r3, [pc, #600]	; (4010b8 <ili9325_init+0x40c>)

/* Define EBI access for ILI9325 8-bit System Interface.*/
#if defined(BOARD_ILI9325_ADDR) && defined (BOARD_ILI9325_RS)
	static inline void LCD_IR(uint8_t lcd_index)
	{
		*((volatile uint8_t *)(BOARD_ILI9325_ADDR)) = lcd_index; /* ILI9325 index register address */
  400e60:	f04f 42c4 	mov.w	r2, #1644167168	; 0x62000000
  400e64:	2100      	movs	r1, #0
  400e66:	f04f 0c13 	mov.w	ip, #19
	}
	static inline void LCD_WD(uint8_t lcd_data)
	{
		*((volatile uint8_t *)((BOARD_ILI9325_ADDR) | (BOARD_ILI9325_RS))) = lcd_data;
  400e6a:	f04f 0e11 	mov.w	lr, #17

/* Define EBI access for ILI9325 8-bit System Interface.*/
#if defined(BOARD_ILI9325_ADDR) && defined (BOARD_ILI9325_RS)
	static inline void LCD_IR(uint8_t lcd_index)
	{
		*((volatile uint8_t *)(BOARD_ILI9325_ADDR)) = lcd_index; /* ILI9325 index register address */
  400e6e:	2729      	movs	r7, #41	; 0x29
	}
	static inline void LCD_WD(uint8_t lcd_data)
	{
		*((volatile uint8_t *)((BOARD_ILI9325_ADDR) | (BOARD_ILI9325_RS))) = lcd_data;
  400e70:	2619      	movs	r6, #25

/* Define EBI access for ILI9325 8-bit System Interface.*/
#if defined(BOARD_ILI9325_ADDR) && defined (BOARD_ILI9325_RS)
	static inline void LCD_IR(uint8_t lcd_index)
	{
		*((volatile uint8_t *)(BOARD_ILI9325_ADDR)) = lcd_index; /* ILI9325 index register address */
  400e72:	252b      	movs	r5, #43	; 0x2b
	}
	static inline void LCD_WD(uint8_t lcd_data)
	{
		*((volatile uint8_t *)((BOARD_ILI9325_ADDR) | (BOARD_ILI9325_RS))) = lcd_data;
  400e74:	240d      	movs	r4, #13

/* Define EBI access for ILI9325 8-bit System Interface.*/
#if defined(BOARD_ILI9325_ADDR) && defined (BOARD_ILI9325_RS)
	static inline void LCD_IR(uint8_t lcd_index)
	{
		*((volatile uint8_t *)(BOARD_ILI9325_ADDR)) = lcd_index; /* ILI9325 index register address */
  400e76:	7011      	strb	r1, [r2, #0]
  400e78:	f882 c000 	strb.w	ip, [r2]
	}
	static inline void LCD_WD(uint8_t lcd_data)
	{
		*((volatile uint8_t *)((BOARD_ILI9325_ADDR) | (BOARD_ILI9325_RS))) = lcd_data;
  400e7c:	f883 e000 	strb.w	lr, [r3]
  400e80:	7019      	strb	r1, [r3, #0]

/* Define EBI access for ILI9325 8-bit System Interface.*/
#if defined(BOARD_ILI9325_ADDR) && defined (BOARD_ILI9325_RS)
	static inline void LCD_IR(uint8_t lcd_index)
	{
		*((volatile uint8_t *)(BOARD_ILI9325_ADDR)) = lcd_index; /* ILI9325 index register address */
  400e82:	7011      	strb	r1, [r2, #0]
  400e84:	7017      	strb	r7, [r2, #0]
	}
	static inline void LCD_WD(uint8_t lcd_data)
	{
		*((volatile uint8_t *)((BOARD_ILI9325_ADDR) | (BOARD_ILI9325_RS))) = lcd_data;
  400e86:	7019      	strb	r1, [r3, #0]
  400e88:	701e      	strb	r6, [r3, #0]

/* Define EBI access for ILI9325 8-bit System Interface.*/
#if defined(BOARD_ILI9325_ADDR) && defined (BOARD_ILI9325_RS)
	static inline void LCD_IR(uint8_t lcd_index)
	{
		*((volatile uint8_t *)(BOARD_ILI9325_ADDR)) = lcd_index; /* ILI9325 index register address */
  400e8a:	7011      	strb	r1, [r2, #0]
  400e8c:	7015      	strb	r5, [r2, #0]
	}
	static inline void LCD_WD(uint8_t lcd_data)
	{
		*((volatile uint8_t *)((BOARD_ILI9325_ADDR) | (BOARD_ILI9325_RS))) = lcd_data;
  400e8e:	7019      	strb	r1, [r3, #0]
  400e90:	701c      	strb	r4, [r3, #0]
  400e92:	9103      	str	r1, [sp, #12]
  400e94:	9b03      	ldr	r3, [sp, #12]
  400e96:	2b31      	cmp	r3, #49	; 0x31
  400e98:	d810      	bhi.n	400ebc <ili9325_init+0x210>
		for(i = 0; i < 100000; i++) {
  400e9a:	4a86      	ldr	r2, [pc, #536]	; (4010b4 <ili9325_init+0x408>)
  400e9c:	9103      	str	r1, [sp, #12]
  400e9e:	9b03      	ldr	r3, [sp, #12]
  400ea0:	4293      	cmp	r3, r2
  400ea2:	d805      	bhi.n	400eb0 <ili9325_init+0x204>
  400ea4:	9b03      	ldr	r3, [sp, #12]
  400ea6:	3301      	adds	r3, #1
  400ea8:	9303      	str	r3, [sp, #12]
  400eaa:	9b03      	ldr	r3, [sp, #12]
  400eac:	4293      	cmp	r3, r2
  400eae:	d9f9      	bls.n	400ea4 <ili9325_init+0x1f8>
 */
static void ili9325_delay(uint32_t ul_ms)
{
	volatile uint32_t i;

	for(i = 0; i < ul_ms; i++) {
  400eb0:	9b03      	ldr	r3, [sp, #12]
  400eb2:	3301      	adds	r3, #1
  400eb4:	9303      	str	r3, [sp, #12]
  400eb6:	9b03      	ldr	r3, [sp, #12]
  400eb8:	2b31      	cmp	r3, #49	; 0x31
  400eba:	d9ef      	bls.n	400e9c <ili9325_init+0x1f0>

/* Define EBI access for ILI9325 8-bit System Interface.*/
#if defined(BOARD_ILI9325_ADDR) && defined (BOARD_ILI9325_RS)
	static inline void LCD_IR(uint8_t lcd_index)
	{
		*((volatile uint8_t *)(BOARD_ILI9325_ADDR)) = lcd_index; /* ILI9325 index register address */
  400ebc:	f04f 41c4 	mov.w	r1, #1644167168	; 0x62000000
	}
	static inline void LCD_WD(uint8_t lcd_data)
	{
		*((volatile uint8_t *)((BOARD_ILI9325_ADDR) | (BOARD_ILI9325_RS))) = lcd_data;
  400ec0:	4a7d      	ldr	r2, [pc, #500]	; (4010b8 <ili9325_init+0x40c>)
  400ec2:	4b7e      	ldr	r3, [pc, #504]	; (4010bc <ili9325_init+0x410>)

/* Define EBI access for ILI9325 8-bit System Interface.*/
#if defined(BOARD_ILI9325_ADDR) && defined (BOARD_ILI9325_RS)
	static inline void LCD_IR(uint8_t lcd_index)
	{
		*((volatile uint8_t *)(BOARD_ILI9325_ADDR)) = lcd_index; /* ILI9325 index register address */
  400ec4:	2400      	movs	r4, #0
	}
	static inline void LCD_WD(uint8_t lcd_data)
	{
		*((volatile uint8_t *)((BOARD_ILI9325_ADDR) | (BOARD_ILI9325_RS))) = lcd_data;
  400ec6:	f04f 0e02 	mov.w	lr, #2
  400eca:	f04f 0904 	mov.w	r9, #4

/* Define EBI access for ILI9325 8-bit System Interface.*/
#if defined(BOARD_ILI9325_ADDR) && defined (BOARD_ILI9325_RS)
	static inline void LCD_IR(uint8_t lcd_index)
	{
		*((volatile uint8_t *)(BOARD_ILI9325_ADDR)) = lcd_index; /* ILI9325 index register address */
  400ece:	f04f 0830 	mov.w	r8, #48	; 0x30
  400ed2:	2631      	movs	r6, #49	; 0x31
  400ed4:	f04f 0c32 	mov.w	ip, #50	; 0x32
  400ed8:	700c      	strb	r4, [r1, #0]
	}
	static inline void LCD_WD(uint8_t lcd_data)
	{
		*((volatile uint8_t *)((BOARD_ILI9325_ADDR) | (BOARD_ILI9325_RS))) = lcd_data;
  400eda:	2507      	movs	r5, #7

/* Define EBI access for ILI9325 8-bit System Interface.*/
#if defined(BOARD_ILI9325_ADDR) && defined (BOARD_ILI9325_RS)
	static inline void LCD_IR(uint8_t lcd_index)
	{
		*((volatile uint8_t *)(BOARD_ILI9325_ADDR)) = lcd_index; /* ILI9325 index register address */
  400edc:	f881 8000 	strb.w	r8, [r1]
  400ee0:	f04f 0b35 	mov.w	fp, #53	; 0x35
	}
	static inline void LCD_WD(uint8_t lcd_data)
	{
		*((volatile uint8_t *)((BOARD_ILI9325_ADDR) | (BOARD_ILI9325_RS))) = lcd_data;
  400ee4:	7014      	strb	r4, [r2, #0]

/* Define EBI access for ILI9325 8-bit System Interface.*/
#if defined(BOARD_ILI9325_ADDR) && defined (BOARD_ILI9325_RS)
	static inline void LCD_IR(uint8_t lcd_index)
	{
		*((volatile uint8_t *)(BOARD_ILI9325_ADDR)) = lcd_index; /* ILI9325 index register address */
  400ee6:	f04f 0a36 	mov.w	sl, #54	; 0x36
	}
	static inline void LCD_WD(uint8_t lcd_data)
	{
		*((volatile uint8_t *)((BOARD_ILI9325_ADDR) | (BOARD_ILI9325_RS))) = lcd_data;
  400eea:	7014      	strb	r4, [r2, #0]
  400eec:	2714      	movs	r7, #20

/* Define EBI access for ILI9325 8-bit System Interface.*/
#if defined(BOARD_ILI9325_ADDR) && defined (BOARD_ILI9325_RS)
	static inline void LCD_IR(uint8_t lcd_index)
	{
		*((volatile uint8_t *)(BOARD_ILI9325_ADDR)) = lcd_index; /* ILI9325 index register address */
  400eee:	700c      	strb	r4, [r1, #0]
  400ef0:	f04f 0837 	mov.w	r8, #55	; 0x37
  400ef4:	700e      	strb	r6, [r1, #0]
	}
	static inline void LCD_WD(uint8_t lcd_data)
	{
		*((volatile uint8_t *)((BOARD_ILI9325_ADDR) | (BOARD_ILI9325_RS))) = lcd_data;
  400ef6:	f882 e000 	strb.w	lr, [r2]
  400efa:	2605      	movs	r6, #5
  400efc:	f882 9000 	strb.w	r9, [r2]

/* Define EBI access for ILI9325 8-bit System Interface.*/
#if defined(BOARD_ILI9325_ADDR) && defined (BOARD_ILI9325_RS)
	static inline void LCD_IR(uint8_t lcd_index)
	{
		*((volatile uint8_t *)(BOARD_ILI9325_ADDR)) = lcd_index; /* ILI9325 index register address */
  400f00:	700c      	strb	r4, [r1, #0]
  400f02:	f881 c000 	strb.w	ip, [r1]
  400f06:	f04f 0c38 	mov.w	ip, #56	; 0x38
	}
	static inline void LCD_WD(uint8_t lcd_data)
	{
		*((volatile uint8_t *)((BOARD_ILI9325_ADDR) | (BOARD_ILI9325_RS))) = lcd_data;
  400f0a:	f882 e000 	strb.w	lr, [r2]
  400f0e:	7014      	strb	r4, [r2, #0]
  400f10:	f04f 0e03 	mov.w	lr, #3

/* Define EBI access for ILI9325 8-bit System Interface.*/
#if defined(BOARD_ILI9325_ADDR) && defined (BOARD_ILI9325_RS)
	static inline void LCD_IR(uint8_t lcd_index)
	{
		*((volatile uint8_t *)(BOARD_ILI9325_ADDR)) = lcd_index; /* ILI9325 index register address */
  400f14:	700c      	strb	r4, [r1, #0]
  400f16:	f881 b000 	strb.w	fp, [r1]
	}
	static inline void LCD_WD(uint8_t lcd_data)
	{
		*((volatile uint8_t *)((BOARD_ILI9325_ADDR) | (BOARD_ILI9325_RS))) = lcd_data;
  400f1a:	7014      	strb	r4, [r2, #0]

/* Define EBI access for ILI9325 8-bit System Interface.*/
#if defined(BOARD_ILI9325_ADDR) && defined (BOARD_ILI9325_RS)
	static inline void LCD_IR(uint8_t lcd_index)
	{
		*((volatile uint8_t *)(BOARD_ILI9325_ADDR)) = lcd_index; /* ILI9325 index register address */
  400f1c:	f04f 0b39 	mov.w	fp, #57	; 0x39
	}
	static inline void LCD_WD(uint8_t lcd_data)
	{
		*((volatile uint8_t *)((BOARD_ILI9325_ADDR) | (BOARD_ILI9325_RS))) = lcd_data;
  400f20:	7015      	strb	r5, [r2, #0]

/* Define EBI access for ILI9325 8-bit System Interface.*/
#if defined(BOARD_ILI9325_ADDR) && defined (BOARD_ILI9325_RS)
	static inline void LCD_IR(uint8_t lcd_index)
	{
		*((volatile uint8_t *)(BOARD_ILI9325_ADDR)) = lcd_index; /* ILI9325 index register address */
  400f22:	700c      	strb	r4, [r1, #0]
  400f24:	f881 a000 	strb.w	sl, [r1]
	}
	static inline void LCD_WD(uint8_t lcd_data)
	{
		*((volatile uint8_t *)((BOARD_ILI9325_ADDR) | (BOARD_ILI9325_RS))) = lcd_data;
  400f28:	7017      	strb	r7, [r2, #0]

/* Define EBI access for ILI9325 8-bit System Interface.*/
#if defined(BOARD_ILI9325_ADDR) && defined (BOARD_ILI9325_RS)
	static inline void LCD_IR(uint8_t lcd_index)
	{
		*((volatile uint8_t *)(BOARD_ILI9325_ADDR)) = lcd_index; /* ILI9325 index register address */
  400f2a:	f04f 0a3c 	mov.w	sl, #60	; 0x3c
	}
	static inline void LCD_WD(uint8_t lcd_data)
	{
		*((volatile uint8_t *)((BOARD_ILI9325_ADDR) | (BOARD_ILI9325_RS))) = lcd_data;
  400f2e:	f882 9000 	strb.w	r9, [r2]
  400f32:	2701      	movs	r7, #1

/* Define EBI access for ILI9325 8-bit System Interface.*/
#if defined(BOARD_ILI9325_ADDR) && defined (BOARD_ILI9325_RS)
	static inline void LCD_IR(uint8_t lcd_index)
	{
		*((volatile uint8_t *)(BOARD_ILI9325_ADDR)) = lcd_index; /* ILI9325 index register address */
  400f34:	700c      	strb	r4, [r1, #0]
  400f36:	f04f 093d 	mov.w	r9, #61	; 0x3d
  400f3a:	f881 8000 	strb.w	r8, [r1]
	}
	static inline void LCD_WD(uint8_t lcd_data)
	{
		*((volatile uint8_t *)((BOARD_ILI9325_ADDR) | (BOARD_ILI9325_RS))) = lcd_data;
  400f3e:	7015      	strb	r5, [r2, #0]
  400f40:	f04f 080e 	mov.w	r8, #14
  400f44:	7016      	strb	r6, [r2, #0]

/* Define EBI access for ILI9325 8-bit System Interface.*/
#if defined(BOARD_ILI9325_ADDR) && defined (BOARD_ILI9325_RS)
	static inline void LCD_IR(uint8_t lcd_index)
	{
		*((volatile uint8_t *)(BOARD_ILI9325_ADDR)) = lcd_index; /* ILI9325 index register address */
  400f46:	700c      	strb	r4, [r1, #0]
  400f48:	f881 c000 	strb.w	ip, [r1]
	}
	static inline void LCD_WD(uint8_t lcd_data)
	{
		*((volatile uint8_t *)((BOARD_ILI9325_ADDR) | (BOARD_ILI9325_RS))) = lcd_data;
  400f4c:	f04f 0cd0 	mov.w	ip, #208	; 0xd0
  400f50:	f882 e000 	strb.w	lr, [r2]
  400f54:	7016      	strb	r6, [r2, #0]

/* Define EBI access for ILI9325 8-bit System Interface.*/
#if defined(BOARD_ILI9325_ADDR) && defined (BOARD_ILI9325_RS)
	static inline void LCD_IR(uint8_t lcd_index)
	{
		*((volatile uint8_t *)(BOARD_ILI9325_ADDR)) = lcd_index; /* ILI9325 index register address */
  400f56:	700c      	strb	r4, [r1, #0]
	}
	static inline void LCD_WD(uint8_t lcd_data)
	{
		*((volatile uint8_t *)((BOARD_ILI9325_ADDR) | (BOARD_ILI9325_RS))) = lcd_data;
  400f58:	2610      	movs	r6, #16

/* Define EBI access for ILI9325 8-bit System Interface.*/
#if defined(BOARD_ILI9325_ADDR) && defined (BOARD_ILI9325_RS)
	static inline void LCD_IR(uint8_t lcd_index)
	{
		*((volatile uint8_t *)(BOARD_ILI9325_ADDR)) = lcd_index; /* ILI9325 index register address */
  400f5a:	f881 b000 	strb.w	fp, [r1]
	}
	static inline void LCD_WD(uint8_t lcd_data)
	{
		*((volatile uint8_t *)((BOARD_ILI9325_ADDR) | (BOARD_ILI9325_RS))) = lcd_data;
  400f5e:	7015      	strb	r5, [r2, #0]

/* Define EBI access for ILI9325 8-bit System Interface.*/
#if defined(BOARD_ILI9325_ADDR) && defined (BOARD_ILI9325_RS)
	static inline void LCD_IR(uint8_t lcd_index)
	{
		*((volatile uint8_t *)(BOARD_ILI9325_ADDR)) = lcd_index; /* ILI9325 index register address */
  400f60:	f04f 0b60 	mov.w	fp, #96	; 0x60
	}
	static inline void LCD_WD(uint8_t lcd_data)
	{
		*((volatile uint8_t *)((BOARD_ILI9325_ADDR) | (BOARD_ILI9325_RS))) = lcd_data;
  400f64:	7015      	strb	r5, [r2, #0]

/* Define EBI access for ILI9325 8-bit System Interface.*/
#if defined(BOARD_ILI9325_ADDR) && defined (BOARD_ILI9325_RS)
	static inline void LCD_IR(uint8_t lcd_index)
	{
		*((volatile uint8_t *)(BOARD_ILI9325_ADDR)) = lcd_index; /* ILI9325 index register address */
  400f66:	700c      	strb	r4, [r1, #0]
  400f68:	f881 a000 	strb.w	sl, [r1]
	}
	static inline void LCD_WD(uint8_t lcd_data)
	{
		*((volatile uint8_t *)((BOARD_ILI9325_ADDR) | (BOARD_ILI9325_RS))) = lcd_data;
  400f6c:	7015      	strb	r5, [r2, #0]
  400f6e:	f04f 0aa7 	mov.w	sl, #167	; 0xa7
  400f72:	7017      	strb	r7, [r2, #0]

/* Define EBI access for ILI9325 8-bit System Interface.*/
#if defined(BOARD_ILI9325_ADDR) && defined (BOARD_ILI9325_RS)
	static inline void LCD_IR(uint8_t lcd_index)
	{
		*((volatile uint8_t *)(BOARD_ILI9325_ADDR)) = lcd_index; /* ILI9325 index register address */
  400f74:	2561      	movs	r5, #97	; 0x61
  400f76:	700c      	strb	r4, [r1, #0]
  400f78:	f881 9000 	strb.w	r9, [r1]
	}
	static inline void LCD_WD(uint8_t lcd_data)
	{
		*((volatile uint8_t *)((BOARD_ILI9325_ADDR) | (BOARD_ILI9325_RS))) = lcd_data;
  400f7c:	7014      	strb	r4, [r2, #0]

/* Define EBI access for ILI9325 8-bit System Interface.*/
#if defined(BOARD_ILI9325_ADDR) && defined (BOARD_ILI9325_RS)
	static inline void LCD_IR(uint8_t lcd_index)
	{
		*((volatile uint8_t *)(BOARD_ILI9325_ADDR)) = lcd_index; /* ILI9325 index register address */
  400f7e:	f04f 096a 	mov.w	r9, #106	; 0x6a
	}
	static inline void LCD_WD(uint8_t lcd_data)
	{
		*((volatile uint8_t *)((BOARD_ILI9325_ADDR) | (BOARD_ILI9325_RS))) = lcd_data;
  400f82:	f882 8000 	strb.w	r8, [r2]

/* Define EBI access for ILI9325 8-bit System Interface.*/
#if defined(BOARD_ILI9325_ADDR) && defined (BOARD_ILI9325_RS)
	static inline void LCD_IR(uint8_t lcd_index)
	{
		*((volatile uint8_t *)(BOARD_ILI9325_ADDR)) = lcd_index; /* ILI9325 index register address */
  400f86:	700c      	strb	r4, [r1, #0]
  400f88:	f04f 0880 	mov.w	r8, #128	; 0x80
  400f8c:	f881 e000 	strb.w	lr, [r1]
	}
	static inline void LCD_WD(uint8_t lcd_data)
	{
		*((volatile uint8_t *)((BOARD_ILI9325_ADDR) | (BOARD_ILI9325_RS))) = lcd_data;
  400f90:	f882 c000 	strb.w	ip, [r2]

/* Define EBI access for ILI9325 8-bit System Interface.*/
#if defined(BOARD_ILI9325_ADDR) && defined (BOARD_ILI9325_RS)
	static inline void LCD_IR(uint8_t lcd_index)
	{
		*((volatile uint8_t *)(BOARD_ILI9325_ADDR)) = lcd_index; /* ILI9325 index register address */
  400f94:	f04f 0e81 	mov.w	lr, #129	; 0x81
  400f98:	f04f 0c82 	mov.w	ip, #130	; 0x82
	}
	static inline void LCD_WD(uint8_t lcd_data)
	{
		*((volatile uint8_t *)((BOARD_ILI9325_ADDR) | (BOARD_ILI9325_RS))) = lcd_data;
  400f9c:	7016      	strb	r6, [r2, #0]

/* Define EBI access for ILI9325 8-bit System Interface.*/
#if defined(BOARD_ILI9325_ADDR) && defined (BOARD_ILI9325_RS)
	static inline void LCD_IR(uint8_t lcd_index)
	{
		*((volatile uint8_t *)(BOARD_ILI9325_ADDR)) = lcd_index; /* ILI9325 index register address */
  400f9e:	700c      	strb	r4, [r1, #0]
  400fa0:	f881 b000 	strb.w	fp, [r1]
	}
	static inline void LCD_WD(uint8_t lcd_data)
	{
		*((volatile uint8_t *)((BOARD_ILI9325_ADDR) | (BOARD_ILI9325_RS))) = lcd_data;
  400fa4:	f882 a000 	strb.w	sl, [r2]

/* Define EBI access for ILI9325 8-bit System Interface.*/
#if defined(BOARD_ILI9325_ADDR) && defined (BOARD_ILI9325_RS)
	static inline void LCD_IR(uint8_t lcd_index)
	{
		*((volatile uint8_t *)(BOARD_ILI9325_ADDR)) = lcd_index; /* ILI9325 index register address */
  400fa8:	f04f 0b83 	mov.w	fp, #131	; 0x83
	}
	static inline void LCD_WD(uint8_t lcd_data)
	{
		*((volatile uint8_t *)((BOARD_ILI9325_ADDR) | (BOARD_ILI9325_RS))) = lcd_data;
  400fac:	7014      	strb	r4, [r2, #0]

/* Define EBI access for ILI9325 8-bit System Interface.*/
#if defined(BOARD_ILI9325_ADDR) && defined (BOARD_ILI9325_RS)
	static inline void LCD_IR(uint8_t lcd_index)
	{
		*((volatile uint8_t *)(BOARD_ILI9325_ADDR)) = lcd_index; /* ILI9325 index register address */
  400fae:	f04f 0a84 	mov.w	sl, #132	; 0x84
  400fb2:	700c      	strb	r4, [r1, #0]
  400fb4:	700d      	strb	r5, [r1, #0]
	}
	static inline void LCD_WD(uint8_t lcd_data)
	{
		*((volatile uint8_t *)((BOARD_ILI9325_ADDR) | (BOARD_ILI9325_RS))) = lcd_data;
  400fb6:	7014      	strb	r4, [r2, #0]

/* Define EBI access for ILI9325 8-bit System Interface.*/
#if defined(BOARD_ILI9325_ADDR) && defined (BOARD_ILI9325_RS)
	static inline void LCD_IR(uint8_t lcd_index)
	{
		*((volatile uint8_t *)(BOARD_ILI9325_ADDR)) = lcd_index; /* ILI9325 index register address */
  400fb8:	2585      	movs	r5, #133	; 0x85
	}
	static inline void LCD_WD(uint8_t lcd_data)
	{
		*((volatile uint8_t *)((BOARD_ILI9325_ADDR) | (BOARD_ILI9325_RS))) = lcd_data;
  400fba:	7017      	strb	r7, [r2, #0]

/* Define EBI access for ILI9325 8-bit System Interface.*/
#if defined(BOARD_ILI9325_ADDR) && defined (BOARD_ILI9325_RS)
	static inline void LCD_IR(uint8_t lcd_index)
	{
		*((volatile uint8_t *)(BOARD_ILI9325_ADDR)) = lcd_index; /* ILI9325 index register address */
  400fbc:	700c      	strb	r4, [r1, #0]
  400fbe:	f881 9000 	strb.w	r9, [r1]
	}
	static inline void LCD_WD(uint8_t lcd_data)
	{
		*((volatile uint8_t *)((BOARD_ILI9325_ADDR) | (BOARD_ILI9325_RS))) = lcd_data;
  400fc2:	7014      	strb	r4, [r2, #0]

/* Define EBI access for ILI9325 8-bit System Interface.*/
#if defined(BOARD_ILI9325_ADDR) && defined (BOARD_ILI9325_RS)
	static inline void LCD_IR(uint8_t lcd_index)
	{
		*((volatile uint8_t *)(BOARD_ILI9325_ADDR)) = lcd_index; /* ILI9325 index register address */
  400fc4:	f04f 0990 	mov.w	r9, #144	; 0x90
	}
	static inline void LCD_WD(uint8_t lcd_data)
	{
		*((volatile uint8_t *)((BOARD_ILI9325_ADDR) | (BOARD_ILI9325_RS))) = lcd_data;
  400fc8:	7014      	strb	r4, [r2, #0]

/* Define EBI access for ILI9325 8-bit System Interface.*/
#if defined(BOARD_ILI9325_ADDR) && defined (BOARD_ILI9325_RS)
	static inline void LCD_IR(uint8_t lcd_index)
	{
		*((volatile uint8_t *)(BOARD_ILI9325_ADDR)) = lcd_index; /* ILI9325 index register address */
  400fca:	700c      	strb	r4, [r1, #0]
  400fcc:	f881 8000 	strb.w	r8, [r1]
	}
	static inline void LCD_WD(uint8_t lcd_data)
	{
		*((volatile uint8_t *)((BOARD_ILI9325_ADDR) | (BOARD_ILI9325_RS))) = lcd_data;
  400fd0:	7014      	strb	r4, [r2, #0]

/* Define EBI access for ILI9325 8-bit System Interface.*/
#if defined(BOARD_ILI9325_ADDR) && defined (BOARD_ILI9325_RS)
	static inline void LCD_IR(uint8_t lcd_index)
	{
		*((volatile uint8_t *)(BOARD_ILI9325_ADDR)) = lcd_index; /* ILI9325 index register address */
  400fd2:	f04f 0892 	mov.w	r8, #146	; 0x92
	}
	static inline void LCD_WD(uint8_t lcd_data)
	{
		*((volatile uint8_t *)((BOARD_ILI9325_ADDR) | (BOARD_ILI9325_RS))) = lcd_data;
  400fd6:	7014      	strb	r4, [r2, #0]

/* Define EBI access for ILI9325 8-bit System Interface.*/
#if defined(BOARD_ILI9325_ADDR) && defined (BOARD_ILI9325_RS)
	static inline void LCD_IR(uint8_t lcd_index)
	{
		*((volatile uint8_t *)(BOARD_ILI9325_ADDR)) = lcd_index; /* ILI9325 index register address */
  400fd8:	700c      	strb	r4, [r1, #0]
  400fda:	f881 e000 	strb.w	lr, [r1]
	}
	static inline void LCD_WD(uint8_t lcd_data)
	{
		*((volatile uint8_t *)((BOARD_ILI9325_ADDR) | (BOARD_ILI9325_RS))) = lcd_data;
  400fde:	7014      	strb	r4, [r2, #0]
  400fe0:	f04f 0e06 	mov.w	lr, #6
  400fe4:	7014      	strb	r4, [r2, #0]

/* Define EBI access for ILI9325 8-bit System Interface.*/
#if defined(BOARD_ILI9325_ADDR) && defined (BOARD_ILI9325_RS)
	static inline void LCD_IR(uint8_t lcd_index)
	{
		*((volatile uint8_t *)(BOARD_ILI9325_ADDR)) = lcd_index; /* ILI9325 index register address */
  400fe6:	700c      	strb	r4, [r1, #0]
  400fe8:	f881 c000 	strb.w	ip, [r1]
  400fec:	f04f 0c95 	mov.w	ip, #149	; 0x95
	}
	static inline void LCD_WD(uint8_t lcd_data)
	{
		*((volatile uint8_t *)((BOARD_ILI9325_ADDR) | (BOARD_ILI9325_RS))) = lcd_data;
  400ff0:	7014      	strb	r4, [r2, #0]
  400ff2:	7014      	strb	r4, [r2, #0]

/* Define EBI access for ILI9325 8-bit System Interface.*/
#if defined(BOARD_ILI9325_ADDR) && defined (BOARD_ILI9325_RS)
	static inline void LCD_IR(uint8_t lcd_index)
	{
		*((volatile uint8_t *)(BOARD_ILI9325_ADDR)) = lcd_index; /* ILI9325 index register address */
  400ff4:	700c      	strb	r4, [r1, #0]
  400ff6:	f881 b000 	strb.w	fp, [r1]
	}
	static inline void LCD_WD(uint8_t lcd_data)
	{
		*((volatile uint8_t *)((BOARD_ILI9325_ADDR) | (BOARD_ILI9325_RS))) = lcd_data;
  400ffa:	7014      	strb	r4, [r2, #0]
  400ffc:	7014      	strb	r4, [r2, #0]

/* Define EBI access for ILI9325 8-bit System Interface.*/
#if defined(BOARD_ILI9325_ADDR) && defined (BOARD_ILI9325_RS)
	static inline void LCD_IR(uint8_t lcd_index)
	{
		*((volatile uint8_t *)(BOARD_ILI9325_ADDR)) = lcd_index; /* ILI9325 index register address */
  400ffe:	700c      	strb	r4, [r1, #0]
  401000:	f881 a000 	strb.w	sl, [r1]
	}
	static inline void LCD_WD(uint8_t lcd_data)
	{
		*((volatile uint8_t *)((BOARD_ILI9325_ADDR) | (BOARD_ILI9325_RS))) = lcd_data;
  401004:	7014      	strb	r4, [r2, #0]
  401006:	7014      	strb	r4, [r2, #0]

/* Define EBI access for ILI9325 8-bit System Interface.*/
#if defined(BOARD_ILI9325_ADDR) && defined (BOARD_ILI9325_RS)
	static inline void LCD_IR(uint8_t lcd_index)
	{
		*((volatile uint8_t *)(BOARD_ILI9325_ADDR)) = lcd_index; /* ILI9325 index register address */
  401008:	700c      	strb	r4, [r1, #0]
  40100a:	700d      	strb	r5, [r1, #0]
	}
	static inline void LCD_WD(uint8_t lcd_data)
	{
		*((volatile uint8_t *)((BOARD_ILI9325_ADDR) | (BOARD_ILI9325_RS))) = lcd_data;
  40100c:	7014      	strb	r4, [r2, #0]
  40100e:	7014      	strb	r4, [r2, #0]

/* Define EBI access for ILI9325 8-bit System Interface.*/
#if defined(BOARD_ILI9325_ADDR) && defined (BOARD_ILI9325_RS)
	static inline void LCD_IR(uint8_t lcd_index)
	{
		*((volatile uint8_t *)(BOARD_ILI9325_ADDR)) = lcd_index; /* ILI9325 index register address */
  401010:	700c      	strb	r4, [r1, #0]
  401012:	f881 9000 	strb.w	r9, [r1]
	}
	static inline void LCD_WD(uint8_t lcd_data)
	{
		*((volatile uint8_t *)((BOARD_ILI9325_ADDR) | (BOARD_ILI9325_RS))) = lcd_data;
  401016:	7014      	strb	r4, [r2, #0]
  401018:	7016      	strb	r6, [r2, #0]

/* Define EBI access for ILI9325 8-bit System Interface.*/
#if defined(BOARD_ILI9325_ADDR) && defined (BOARD_ILI9325_RS)
	static inline void LCD_IR(uint8_t lcd_index)
	{
		*((volatile uint8_t *)(BOARD_ILI9325_ADDR)) = lcd_index; /* ILI9325 index register address */
  40101a:	700c      	strb	r4, [r1, #0]
  40101c:	f881 8000 	strb.w	r8, [r1]
	}
	static inline void LCD_WD(uint8_t lcd_data)
	{
		*((volatile uint8_t *)((BOARD_ILI9325_ADDR) | (BOARD_ILI9325_RS))) = lcd_data;
  401020:	f882 e000 	strb.w	lr, [r2]
  401024:	7014      	strb	r4, [r2, #0]

/* Define EBI access for ILI9325 8-bit System Interface.*/
#if defined(BOARD_ILI9325_ADDR) && defined (BOARD_ILI9325_RS)
	static inline void LCD_IR(uint8_t lcd_index)
	{
		*((volatile uint8_t *)(BOARD_ILI9325_ADDR)) = lcd_index; /* ILI9325 index register address */
  401026:	700c      	strb	r4, [r1, #0]
  401028:	f881 c000 	strb.w	ip, [r1]
	}
	static inline void LCD_WD(uint8_t lcd_data)
	{
		*((volatile uint8_t *)((BOARD_ILI9325_ADDR) | (BOARD_ILI9325_RS))) = lcd_data;
  40102c:	7017      	strb	r7, [r2, #0]
  40102e:	7016      	strb	r6, [r2, #0]
			ILI9325_PANEL_INTERFACE_CTRL2_NOWI(0x06));
	ili9325_write_register(ILI9325_PANEL_INTERFACE_CTRL4,
			ILI9325_PANEL_INTERFACE_CTRL4_DIVE(0x01) |
			ILI9325_PANEL_INTERFACE_CTRL4_RTNE(0x10));

	ili9325_set_window(0, 0,p_opt->ul_width,p_opt->ul_height);
  401030:	6806      	ldr	r6, [r0, #0]
  401032:	6845      	ldr	r5, [r0, #4]

/* Define EBI access for ILI9325 8-bit System Interface.*/
#if defined(BOARD_ILI9325_ADDR) && defined (BOARD_ILI9325_RS)
	static inline void LCD_IR(uint8_t lcd_index)
	{
		*((volatile uint8_t *)(BOARD_ILI9325_ADDR)) = lcd_index; /* ILI9325 index register address */
  401034:	700c      	strb	r4, [r1, #0]

	/* Set Horizontal Address Start Position */
	ili9325_write_register(ILI9325_HORIZONTAL_ADDR_START, (uint16_t)ul_x);

	/* Set Horizontal Address End Position */
	ili9325_write_register(ILI9325_HORIZONTAL_ADDR_END, (uint16_t)(ul_x + ul_width - 1));
  401036:	3e01      	subs	r6, #1

	/* Set Vertical Address Start Position */
	ili9325_write_register(ILI9325_VERTICAL_ADDR_START, (uint16_t)ul_y);

	/* Set Vertical Address End Position */
	ili9325_write_register(ILI9325_VERTICAL_ADDR_END, (uint16_t)(ul_y + ul_height - 1));
  401038:	3d01      	subs	r5, #1

	/* Set Horizontal Address Start Position */
	ili9325_write_register(ILI9325_HORIZONTAL_ADDR_START, (uint16_t)ul_x);

	/* Set Horizontal Address End Position */
	ili9325_write_register(ILI9325_HORIZONTAL_ADDR_END, (uint16_t)(ul_x + ul_width - 1));
  40103a:	b2b6      	uxth	r6, r6

	/* Set Vertical Address Start Position */
	ili9325_write_register(ILI9325_VERTICAL_ADDR_START, (uint16_t)ul_y);

	/* Set Vertical Address End Position */
	ili9325_write_register(ILI9325_VERTICAL_ADDR_END, (uint16_t)(ul_y + ul_height - 1));
  40103c:	b2ad      	uxth	r5, r5
 */
static void ili9325_write_register(uint8_t uc_reg, uint16_t us_data)
{
	LCD_IR(0);
	LCD_IR(uc_reg);
	LCD_WD((us_data >> 8) & 0xFF);
  40103e:	ea4f 2c16 	mov.w	ip, r6, lsr #8
  401042:	0a2f      	lsrs	r7, r5, #8
  401044:	f04f 0950 	mov.w	r9, #80	; 0x50
  401048:	f04f 0851 	mov.w	r8, #81	; 0x51
	LCD_WD(us_data & 0xFF);
  40104c:	b2f6      	uxtb	r6, r6
  40104e:	f04f 0a52 	mov.w	sl, #82	; 0x52
  401052:	f04f 0e53 	mov.w	lr, #83	; 0x53
  401056:	b2ed      	uxtb	r5, r5
  401058:	f881 9000 	strb.w	r9, [r1]
	}
	static inline void LCD_WD(uint8_t lcd_data)
	{
		*((volatile uint8_t *)((BOARD_ILI9325_ADDR) | (BOARD_ILI9325_RS))) = lcd_data;
  40105c:	7014      	strb	r4, [r2, #0]
  40105e:	7014      	strb	r4, [r2, #0]

/* Define EBI access for ILI9325 8-bit System Interface.*/
#if defined(BOARD_ILI9325_ADDR) && defined (BOARD_ILI9325_RS)
	static inline void LCD_IR(uint8_t lcd_index)
	{
		*((volatile uint8_t *)(BOARD_ILI9325_ADDR)) = lcd_index; /* ILI9325 index register address */
  401060:	700c      	strb	r4, [r1, #0]
  401062:	f881 8000 	strb.w	r8, [r1]
	}
	static inline void LCD_WD(uint8_t lcd_data)
	{
		*((volatile uint8_t *)((BOARD_ILI9325_ADDR) | (BOARD_ILI9325_RS))) = lcd_data;
  401066:	f882 c000 	strb.w	ip, [r2]
  40106a:	7016      	strb	r6, [r2, #0]

/* Define EBI access for ILI9325 8-bit System Interface.*/
#if defined(BOARD_ILI9325_ADDR) && defined (BOARD_ILI9325_RS)
	static inline void LCD_IR(uint8_t lcd_index)
	{
		*((volatile uint8_t *)(BOARD_ILI9325_ADDR)) = lcd_index; /* ILI9325 index register address */
  40106c:	700c      	strb	r4, [r1, #0]
  40106e:	f881 a000 	strb.w	sl, [r1]
	}
	static inline void LCD_WD(uint8_t lcd_data)
	{
		*((volatile uint8_t *)((BOARD_ILI9325_ADDR) | (BOARD_ILI9325_RS))) = lcd_data;
  401072:	7014      	strb	r4, [r2, #0]
  401074:	7014      	strb	r4, [r2, #0]

/* Define EBI access for ILI9325 8-bit System Interface.*/
#if defined(BOARD_ILI9325_ADDR) && defined (BOARD_ILI9325_RS)
	static inline void LCD_IR(uint8_t lcd_index)
	{
		*((volatile uint8_t *)(BOARD_ILI9325_ADDR)) = lcd_index; /* ILI9325 index register address */
  401076:	700c      	strb	r4, [r1, #0]
  401078:	f881 e000 	strb.w	lr, [r1]
	}
	static inline void LCD_WD(uint8_t lcd_data)
	{
		*((volatile uint8_t *)((BOARD_ILI9325_ADDR) | (BOARD_ILI9325_RS))) = lcd_data;
  40107c:	7017      	strb	r7, [r2, #0]
  40107e:	7015      	strb	r5, [r2, #0]
	ili9325_write_register(ILI9325_PANEL_INTERFACE_CTRL4,
			ILI9325_PANEL_INTERFACE_CTRL4_DIVE(0x01) |
			ILI9325_PANEL_INTERFACE_CTRL4_RTNE(0x10));

	ili9325_set_window(0, 0,p_opt->ul_width,p_opt->ul_height);
	ili9325_set_foreground_color(p_opt->foreground_color);
  401080:	6881      	ldr	r1, [r0, #8]
  401082:	f503 7270 	add.w	r2, r3, #960	; 0x3c0
{
	uint32_t i;

	/* Fill the cache with selected color */
	for (i = 0; i < LCD_DATA_CACHE_SIZE; ++i) {
		g_ul_pixel_cache[i] = ul_color;
  401086:	f843 1f04 	str.w	r1, [r3, #4]!
void ili9325_set_foreground_color(ili9325_color_t ul_color)
{
	uint32_t i;

	/* Fill the cache with selected color */
	for (i = 0; i < LCD_DATA_CACHE_SIZE; ++i) {
  40108a:	4293      	cmp	r3, r2
  40108c:	d1fb      	bne.n	401086 <ili9325_init+0x3da>

/* Define EBI access for ILI9325 8-bit System Interface.*/
#if defined(BOARD_ILI9325_ADDR) && defined (BOARD_ILI9325_RS)
	static inline void LCD_IR(uint8_t lcd_index)
	{
		*((volatile uint8_t *)(BOARD_ILI9325_ADDR)) = lcd_index; /* ILI9325 index register address */
  40108e:	2300      	movs	r3, #0
  401090:	f04f 41c4 	mov.w	r1, #1644167168	; 0x62000000
	}
	static inline void LCD_WD(uint8_t lcd_data)
	{
		*((volatile uint8_t *)((BOARD_ILI9325_ADDR) | (BOARD_ILI9325_RS))) = lcd_data;
  401094:	4a08      	ldr	r2, [pc, #32]	; (4010b8 <ili9325_init+0x40c>)

/* Define EBI access for ILI9325 8-bit System Interface.*/
#if defined(BOARD_ILI9325_ADDR) && defined (BOARD_ILI9325_RS)
	static inline void LCD_IR(uint8_t lcd_index)
	{
		*((volatile uint8_t *)(BOARD_ILI9325_ADDR)) = lcd_index; /* ILI9325 index register address */
  401096:	700b      	strb	r3, [r1, #0]
  401098:	2520      	movs	r5, #32
  40109a:	2421      	movs	r4, #33	; 0x21
			ILI9325_PANEL_INTERFACE_CTRL4_RTNE(0x10));

	ili9325_set_window(0, 0,p_opt->ul_width,p_opt->ul_height);
	ili9325_set_foreground_color(p_opt->foreground_color);
	ili9325_set_cursor_position(0, 0);
	return 0;
  40109c:	4618      	mov	r0, r3
  40109e:	700d      	strb	r5, [r1, #0]
	}
	static inline void LCD_WD(uint8_t lcd_data)
	{
		*((volatile uint8_t *)((BOARD_ILI9325_ADDR) | (BOARD_ILI9325_RS))) = lcd_data;
  4010a0:	7013      	strb	r3, [r2, #0]
  4010a2:	7013      	strb	r3, [r2, #0]

/* Define EBI access for ILI9325 8-bit System Interface.*/
#if defined(BOARD_ILI9325_ADDR) && defined (BOARD_ILI9325_RS)
	static inline void LCD_IR(uint8_t lcd_index)
	{
		*((volatile uint8_t *)(BOARD_ILI9325_ADDR)) = lcd_index; /* ILI9325 index register address */
  4010a4:	700b      	strb	r3, [r1, #0]
  4010a6:	700c      	strb	r4, [r1, #0]
	}
	static inline void LCD_WD(uint8_t lcd_data)
	{
		*((volatile uint8_t *)((BOARD_ILI9325_ADDR) | (BOARD_ILI9325_RS))) = lcd_data;
  4010a8:	7013      	strb	r3, [r2, #0]
  4010aa:	7013      	strb	r3, [r2, #0]
}
  4010ac:	b005      	add	sp, #20
  4010ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4010b2:	bf00      	nop
  4010b4:	0001869f 	.word	0x0001869f
  4010b8:	62000002 	.word	0x62000002
  4010bc:	20000e34 	.word	0x20000e34

004010c0 <ili9325_display_on>:

/**
 * \brief Turn on the LCD.
 */
void ili9325_display_on(void)
{
  4010c0:	b430      	push	{r4, r5}

/* Define EBI access for ILI9325 8-bit System Interface.*/
#if defined(BOARD_ILI9325_ADDR) && defined (BOARD_ILI9325_RS)
	static inline void LCD_IR(uint8_t lcd_index)
	{
		*((volatile uint8_t *)(BOARD_ILI9325_ADDR)) = lcd_index; /* ILI9325 index register address */
  4010c2:	f04f 42c4 	mov.w	r2, #1644167168	; 0x62000000
	}
	static inline void LCD_WD(uint8_t lcd_data)
	{
		*((volatile uint8_t *)((BOARD_ILI9325_ADDR) | (BOARD_ILI9325_RS))) = lcd_data;
  4010c6:	4b05      	ldr	r3, [pc, #20]	; (4010dc <ili9325_display_on+0x1c>)

/* Define EBI access for ILI9325 8-bit System Interface.*/
#if defined(BOARD_ILI9325_ADDR) && defined (BOARD_ILI9325_RS)
	static inline void LCD_IR(uint8_t lcd_index)
	{
		*((volatile uint8_t *)(BOARD_ILI9325_ADDR)) = lcd_index; /* ILI9325 index register address */
  4010c8:	2500      	movs	r5, #0
  4010ca:	2407      	movs	r4, #7
	}
	static inline void LCD_WD(uint8_t lcd_data)
	{
		*((volatile uint8_t *)((BOARD_ILI9325_ADDR) | (BOARD_ILI9325_RS))) = lcd_data;
  4010cc:	2001      	movs	r0, #1
  4010ce:	2133      	movs	r1, #51	; 0x33

/* Define EBI access for ILI9325 8-bit System Interface.*/
#if defined(BOARD_ILI9325_ADDR) && defined (BOARD_ILI9325_RS)
	static inline void LCD_IR(uint8_t lcd_index)
	{
		*((volatile uint8_t *)(BOARD_ILI9325_ADDR)) = lcd_index; /* ILI9325 index register address */
  4010d0:	7015      	strb	r5, [r2, #0]
  4010d2:	7014      	strb	r4, [r2, #0]
	}
	static inline void LCD_WD(uint8_t lcd_data)
	{
		*((volatile uint8_t *)((BOARD_ILI9325_ADDR) | (BOARD_ILI9325_RS))) = lcd_data;
  4010d4:	7018      	strb	r0, [r3, #0]
  4010d6:	7019      	strb	r1, [r3, #0]
	ili9325_write_register(ILI9325_DISP_CTRL1,
			ILI9325_DISP_CTRL1_BASEE |
			ILI9325_DISP_CTRL1_GON |
			ILI9325_DISP_CTRL1_DTE |
			ILI9325_DISP_CTRL1_D(0x03));
}
  4010d8:	bc30      	pop	{r4, r5}
  4010da:	4770      	bx	lr
  4010dc:	62000002 	.word	0x62000002

004010e0 <ili9325_fill>:
 * \brief Fill the LCD buffer with the specified color.
 *
 * \param ul_color fill color.
 */
void ili9325_fill(ili9325_color_t ul_color)
{
  4010e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

/* Define EBI access for ILI9325 8-bit System Interface.*/
#if defined(BOARD_ILI9325_ADDR) && defined (BOARD_ILI9325_RS)
	static inline void LCD_IR(uint8_t lcd_index)
	{
		*((volatile uint8_t *)(BOARD_ILI9325_ADDR)) = lcd_index; /* ILI9325 index register address */
  4010e4:	f04f 47c4 	mov.w	r7, #1644167168	; 0x62000000
	}
	static inline void LCD_WD(uint8_t lcd_data)
	{
		*((volatile uint8_t *)((BOARD_ILI9325_ADDR) | (BOARD_ILI9325_RS))) = lcd_data;
  4010e8:	f8df e04c 	ldr.w	lr, [pc, #76]	; 401138 <ili9325_fill+0x58>

/* Define EBI access for ILI9325 8-bit System Interface.*/
#if defined(BOARD_ILI9325_ADDR) && defined (BOARD_ILI9325_RS)
	static inline void LCD_IR(uint8_t lcd_index)
	{
		*((volatile uint8_t *)(BOARD_ILI9325_ADDR)) = lcd_index; /* ILI9325 index register address */
  4010ec:	2600      	movs	r6, #0
  4010ee:	2320      	movs	r3, #32
  4010f0:	f04f 0821 	mov.w	r8, #33	; 0x21
  4010f4:	f04f 0c22 	mov.w	ip, #34	; 0x22
  4010f8:	703e      	strb	r6, [r7, #0]
	}
	static inline void LCD_WD(uint8_t lcd_data)
	{
		*((volatile uint8_t *)((BOARD_ILI9325_ADDR) | (BOARD_ILI9325_RS))) = lcd_data;
  4010fa:	4672      	mov	r2, lr

/* Define EBI access for ILI9325 8-bit System Interface.*/
#if defined(BOARD_ILI9325_ADDR) && defined (BOARD_ILI9325_RS)
	static inline void LCD_IR(uint8_t lcd_index)
	{
		*((volatile uint8_t *)(BOARD_ILI9325_ADDR)) = lcd_index; /* ILI9325 index register address */
  4010fc:	703b      	strb	r3, [r7, #0]
  4010fe:	f3c0 4507 	ubfx	r5, r0, #16, #8
	}
	static inline void LCD_WD(uint8_t lcd_data)
	{
		*((volatile uint8_t *)((BOARD_ILI9325_ADDR) | (BOARD_ILI9325_RS))) = lcd_data;
  401102:	f88e 6000 	strb.w	r6, [lr]
  401106:	f3c0 2407 	ubfx	r4, r0, #8, #8
  40110a:	f88e 6000 	strb.w	r6, [lr]
  40110e:	b2c1      	uxtb	r1, r0

/* Define EBI access for ILI9325 8-bit System Interface.*/
#if defined(BOARD_ILI9325_ADDR) && defined (BOARD_ILI9325_RS)
	static inline void LCD_IR(uint8_t lcd_index)
	{
		*((volatile uint8_t *)(BOARD_ILI9325_ADDR)) = lcd_index; /* ILI9325 index register address */
  401110:	703e      	strb	r6, [r7, #0]
  401112:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
  401116:	f887 8000 	strb.w	r8, [r7]
	}
	static inline void LCD_WD(uint8_t lcd_data)
	{
		*((volatile uint8_t *)((BOARD_ILI9325_ADDR) | (BOARD_ILI9325_RS))) = lcd_data;
  40111a:	f88e 6000 	strb.w	r6, [lr]
  40111e:	f88e 6000 	strb.w	r6, [lr]

/* Define EBI access for ILI9325 8-bit System Interface.*/
#if defined(BOARD_ILI9325_ADDR) && defined (BOARD_ILI9325_RS)
	static inline void LCD_IR(uint8_t lcd_index)
	{
		*((volatile uint8_t *)(BOARD_ILI9325_ADDR)) = lcd_index; /* ILI9325 index register address */
  401122:	703e      	strb	r6, [r7, #0]
  401124:	f887 c000 	strb.w	ip, [r7]
	uint32_t dw;

	ili9325_set_cursor_position(0, 0);
	ili9325_write_ram_prepare();

	for (dw = ILI9325_LCD_WIDTH * ILI9325_LCD_HEIGHT; dw > 0; dw--) {
  401128:	3b01      	subs	r3, #1
	}
	static inline void LCD_WD(uint8_t lcd_data)
	{
		*((volatile uint8_t *)((BOARD_ILI9325_ADDR) | (BOARD_ILI9325_RS))) = lcd_data;
  40112a:	7015      	strb	r5, [r2, #0]
  40112c:	7014      	strb	r4, [r2, #0]
  40112e:	7011      	strb	r1, [r2, #0]
  401130:	d1fa      	bne.n	401128 <ili9325_fill+0x48>
		ili9325_write_ram(ul_color);
	}
}
  401132:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  401136:	bf00      	nop
  401138:	62000002 	.word	0x62000002

0040113c <ili9325_draw_prepare>:
 * \param ul_width The width of the window.
 * \param ul_height The height of the window.
 */
void ili9325_draw_prepare(uint32_t ul_x, uint32_t ul_y, uint32_t ul_width,
		uint32_t ul_height)
{
  40113c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  401140:	3a01      	subs	r2, #1
	Assert(ul_y <= 0x13f);
	Assert(ul_width <= (0xF0 - ul_x));
	Assert(ul_height <= (0x140 - ul_y));

	/* Set Horizontal Address Start Position */
	ili9325_write_register(ILI9325_HORIZONTAL_ADDR_START, (uint16_t)ul_x);
  401142:	fa1f fe80 	uxth.w	lr, r0

	/* Set Horizontal Address End Position */
	ili9325_write_register(ILI9325_HORIZONTAL_ADDR_END, (uint16_t)(ul_x + ul_width - 1));

	/* Set Vertical Address Start Position */
	ili9325_write_register(ILI9325_VERTICAL_ADDR_START, (uint16_t)ul_y);
  401146:	b28f      	uxth	r7, r1

	/* Set Horizontal Address Start Position */
	ili9325_write_register(ILI9325_HORIZONTAL_ADDR_START, (uint16_t)ul_x);

	/* Set Horizontal Address End Position */
	ili9325_write_register(ILI9325_HORIZONTAL_ADDR_END, (uint16_t)(ul_x + ul_width - 1));
  401148:	4472      	add	r2, lr
  40114a:	3b01      	subs	r3, #1

/* Define EBI access for ILI9325 8-bit System Interface.*/
#if defined(BOARD_ILI9325_ADDR) && defined (BOARD_ILI9325_RS)
	static inline void LCD_IR(uint8_t lcd_index)
	{
		*((volatile uint8_t *)(BOARD_ILI9325_ADDR)) = lcd_index; /* ILI9325 index register address */
  40114c:	f04f 44c4 	mov.w	r4, #1644167168	; 0x62000000
	}
	static inline void LCD_WD(uint8_t lcd_data)
	{
		*((volatile uint8_t *)((BOARD_ILI9325_ADDR) | (BOARD_ILI9325_RS))) = lcd_data;
  401150:	4d21      	ldr	r5, [pc, #132]	; (4011d8 <ili9325_draw_prepare+0x9c>)

	/* Set Vertical Address Start Position */
	ili9325_write_register(ILI9325_VERTICAL_ADDR_START, (uint16_t)ul_y);

	/* Set Vertical Address End Position */
	ili9325_write_register(ILI9325_VERTICAL_ADDR_END, (uint16_t)(ul_y + ul_height - 1));
  401152:	443b      	add	r3, r7

	/* Set Horizontal Address Start Position */
	ili9325_write_register(ILI9325_HORIZONTAL_ADDR_START, (uint16_t)ul_x);

	/* Set Horizontal Address End Position */
	ili9325_write_register(ILI9325_HORIZONTAL_ADDR_END, (uint16_t)(ul_x + ul_width - 1));
  401154:	b292      	uxth	r2, r2

/* Define EBI access for ILI9325 8-bit System Interface.*/
#if defined(BOARD_ILI9325_ADDR) && defined (BOARD_ILI9325_RS)
	static inline void LCD_IR(uint8_t lcd_index)
	{
		*((volatile uint8_t *)(BOARD_ILI9325_ADDR)) = lcd_index; /* ILI9325 index register address */
  401156:	2600      	movs	r6, #0
 */
static void ili9325_write_register(uint8_t uc_reg, uint16_t us_data)
{
	LCD_IR(0);
	LCD_IR(uc_reg);
	LCD_WD((us_data >> 8) & 0xFF);
  401158:	ea4f 2c12 	mov.w	ip, r2, lsr #8

	/* Set Vertical Address Start Position */
	ili9325_write_register(ILI9325_VERTICAL_ADDR_START, (uint16_t)ul_y);

	/* Set Vertical Address End Position */
	ili9325_write_register(ILI9325_VERTICAL_ADDR_END, (uint16_t)(ul_y + ul_height - 1));
  40115c:	b29b      	uxth	r3, r3
 */
static void ili9325_write_register(uint8_t uc_reg, uint16_t us_data)
{
	LCD_IR(0);
	LCD_IR(uc_reg);
	LCD_WD((us_data >> 8) & 0xFF);
  40115e:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
	LCD_WD(us_data & 0xFF);
  401162:	b2c0      	uxtb	r0, r0
  401164:	f04f 0950 	mov.w	r9, #80	; 0x50
  401168:	f04f 0851 	mov.w	r8, #81	; 0x51
  40116c:	b2d2      	uxtb	r2, r2
  40116e:	7026      	strb	r6, [r4, #0]
 */
static void ili9325_write_register(uint8_t uc_reg, uint16_t us_data)
{
	LCD_IR(0);
	LCD_IR(uc_reg);
	LCD_WD((us_data >> 8) & 0xFF);
  401170:	0a3f      	lsrs	r7, r7, #8
  401172:	f884 9000 	strb.w	r9, [r4]
	LCD_WD(us_data & 0xFF);
  401176:	b2c9      	uxtb	r1, r1
	}
	static inline void LCD_WD(uint8_t lcd_data)
	{
		*((volatile uint8_t *)((BOARD_ILI9325_ADDR) | (BOARD_ILI9325_RS))) = lcd_data;
  401178:	f885 e000 	strb.w	lr, [r5]
 */
static void ili9325_write_register(uint8_t uc_reg, uint16_t us_data)
{
	LCD_IR(0);
	LCD_IR(uc_reg);
	LCD_WD((us_data >> 8) & 0xFF);
  40117c:	ea4f 2913 	mov.w	r9, r3, lsr #8
  401180:	7028      	strb	r0, [r5, #0]

/* Define EBI access for ILI9325 8-bit System Interface.*/
#if defined(BOARD_ILI9325_ADDR) && defined (BOARD_ILI9325_RS)
	static inline void LCD_IR(uint8_t lcd_index)
	{
		*((volatile uint8_t *)(BOARD_ILI9325_ADDR)) = lcd_index; /* ILI9325 index register address */
  401182:	f04f 0a52 	mov.w	sl, #82	; 0x52
  401186:	7026      	strb	r6, [r4, #0]
  401188:	f04f 0b53 	mov.w	fp, #83	; 0x53
  40118c:	f884 8000 	strb.w	r8, [r4]
	LCD_WD(us_data & 0xFF);
  401190:	b2db      	uxtb	r3, r3
	}
	static inline void LCD_WD(uint8_t lcd_data)
	{
		*((volatile uint8_t *)((BOARD_ILI9325_ADDR) | (BOARD_ILI9325_RS))) = lcd_data;
  401192:	f885 c000 	strb.w	ip, [r5]

/* Define EBI access for ILI9325 8-bit System Interface.*/
#if defined(BOARD_ILI9325_ADDR) && defined (BOARD_ILI9325_RS)
	static inline void LCD_IR(uint8_t lcd_index)
	{
		*((volatile uint8_t *)(BOARD_ILI9325_ADDR)) = lcd_index; /* ILI9325 index register address */
  401196:	f04f 0820 	mov.w	r8, #32
	}
	static inline void LCD_WD(uint8_t lcd_data)
	{
		*((volatile uint8_t *)((BOARD_ILI9325_ADDR) | (BOARD_ILI9325_RS))) = lcd_data;
  40119a:	702a      	strb	r2, [r5, #0]

/* Define EBI access for ILI9325 8-bit System Interface.*/
#if defined(BOARD_ILI9325_ADDR) && defined (BOARD_ILI9325_RS)
	static inline void LCD_IR(uint8_t lcd_index)
	{
		*((volatile uint8_t *)(BOARD_ILI9325_ADDR)) = lcd_index; /* ILI9325 index register address */
  40119c:	f04f 0c21 	mov.w	ip, #33	; 0x21
  4011a0:	2222      	movs	r2, #34	; 0x22
  4011a2:	7026      	strb	r6, [r4, #0]
  4011a4:	f884 a000 	strb.w	sl, [r4]
	}
	static inline void LCD_WD(uint8_t lcd_data)
	{
		*((volatile uint8_t *)((BOARD_ILI9325_ADDR) | (BOARD_ILI9325_RS))) = lcd_data;
  4011a8:	702f      	strb	r7, [r5, #0]
  4011aa:	7029      	strb	r1, [r5, #0]

/* Define EBI access for ILI9325 8-bit System Interface.*/
#if defined(BOARD_ILI9325_ADDR) && defined (BOARD_ILI9325_RS)
	static inline void LCD_IR(uint8_t lcd_index)
	{
		*((volatile uint8_t *)(BOARD_ILI9325_ADDR)) = lcd_index; /* ILI9325 index register address */
  4011ac:	7026      	strb	r6, [r4, #0]
  4011ae:	f884 b000 	strb.w	fp, [r4]
	}
	static inline void LCD_WD(uint8_t lcd_data)
	{
		*((volatile uint8_t *)((BOARD_ILI9325_ADDR) | (BOARD_ILI9325_RS))) = lcd_data;
  4011b2:	f885 9000 	strb.w	r9, [r5]
  4011b6:	702b      	strb	r3, [r5, #0]

/* Define EBI access for ILI9325 8-bit System Interface.*/
#if defined(BOARD_ILI9325_ADDR) && defined (BOARD_ILI9325_RS)
	static inline void LCD_IR(uint8_t lcd_index)
	{
		*((volatile uint8_t *)(BOARD_ILI9325_ADDR)) = lcd_index; /* ILI9325 index register address */
  4011b8:	7026      	strb	r6, [r4, #0]
  4011ba:	f884 8000 	strb.w	r8, [r4]
	}
	static inline void LCD_WD(uint8_t lcd_data)
	{
		*((volatile uint8_t *)((BOARD_ILI9325_ADDR) | (BOARD_ILI9325_RS))) = lcd_data;
  4011be:	f885 e000 	strb.w	lr, [r5]
  4011c2:	7028      	strb	r0, [r5, #0]

/* Define EBI access for ILI9325 8-bit System Interface.*/
#if defined(BOARD_ILI9325_ADDR) && defined (BOARD_ILI9325_RS)
	static inline void LCD_IR(uint8_t lcd_index)
	{
		*((volatile uint8_t *)(BOARD_ILI9325_ADDR)) = lcd_index; /* ILI9325 index register address */
  4011c4:	7026      	strb	r6, [r4, #0]
  4011c6:	f884 c000 	strb.w	ip, [r4]
	}
	static inline void LCD_WD(uint8_t lcd_data)
	{
		*((volatile uint8_t *)((BOARD_ILI9325_ADDR) | (BOARD_ILI9325_RS))) = lcd_data;
  4011ca:	702f      	strb	r7, [r5, #0]
  4011cc:	7029      	strb	r1, [r5, #0]

/* Define EBI access for ILI9325 8-bit System Interface.*/
#if defined(BOARD_ILI9325_ADDR) && defined (BOARD_ILI9325_RS)
	static inline void LCD_IR(uint8_t lcd_index)
	{
		*((volatile uint8_t *)(BOARD_ILI9325_ADDR)) = lcd_index; /* ILI9325 index register address */
  4011ce:	7026      	strb	r6, [r4, #0]
  4011d0:	7022      	strb	r2, [r4, #0]
  4011d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4011d6:	bf00      	nop
  4011d8:	62000002 	.word	0x62000002

004011dc <ili9325_draw_string>:
 * \param ul_x X coordinate of string top-left corner.
 * \param ul_y Y coordinate of string top-left corner.
 * \param p_str String to display.
 */
void ili9325_draw_string(uint32_t ul_x, uint32_t ul_y, const uint8_t *p_str)
{
  4011dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4011e0:	b087      	sub	sp, #28
	uint32_t xorg = ul_x;

	while (*p_str != 0) {
  4011e2:	7813      	ldrb	r3, [r2, #0]
 * \param ul_x X coordinate of string top-left corner.
 * \param ul_y Y coordinate of string top-left corner.
 * \param p_str String to display.
 */
void ili9325_draw_string(uint32_t ul_x, uint32_t ul_y, const uint8_t *p_str)
{
  4011e4:	9204      	str	r2, [sp, #16]
  4011e6:	9005      	str	r0, [sp, #20]
  4011e8:	9100      	str	r1, [sp, #0]
	uint32_t xorg = ul_x;

	while (*p_str != 0) {
  4011ea:	2b00      	cmp	r3, #0
  4011ec:	d062      	beq.n	4012b4 <ili9325_draw_string+0xd8>
	}
	static inline void LCD_WD(uint8_t lcd_data)
	{
		*((volatile uint8_t *)((BOARD_ILI9325_ADDR) | (BOARD_ILI9325_RS))) = lcd_data;
  4011ee:	f8df c174 	ldr.w	ip, [pc, #372]	; 401364 <ili9325_draw_string+0x188>
  4011f2:	9003      	str	r0, [sp, #12]

/* Define EBI access for ILI9325 8-bit System Interface.*/
#if defined(BOARD_ILI9325_ADDR) && defined (BOARD_ILI9325_RS)
	static inline void LCD_IR(uint8_t lcd_index)
	{
		*((volatile uint8_t *)(BOARD_ILI9325_ADDR)) = lcd_index; /* ILI9325 index register address */
  4011f4:	f04f 4ec4 	mov.w	lr, #1644167168	; 0x62000000
  4011f8:	e00a      	b.n	401210 <ili9325_draw_string+0x34>
		/* If newline, jump to the next line (font height + 2) */
		if (*p_str == '\n') {
			ul_y += gfont.height + 2;
  4011fa:	9b00      	ldr	r3, [sp, #0]
 */
void ili9325_draw_string(uint32_t ul_x, uint32_t ul_y, const uint8_t *p_str)
{
	uint32_t xorg = ul_x;

	while (*p_str != 0) {
  4011fc:	9a04      	ldr	r2, [sp, #16]
		/* If newline, jump to the next line (font height + 2) */
		if (*p_str == '\n') {
			ul_y += gfont.height + 2;
  4011fe:	3310      	adds	r3, #16
  401200:	9300      	str	r3, [sp, #0]
			ul_x = xorg;
  401202:	9b05      	ldr	r3, [sp, #20]
  401204:	9303      	str	r3, [sp, #12]
 */
void ili9325_draw_string(uint32_t ul_x, uint32_t ul_y, const uint8_t *p_str)
{
	uint32_t xorg = ul_x;

	while (*p_str != 0) {
  401206:	f812 3f01 	ldrb.w	r3, [r2, #1]!
  40120a:	9204      	str	r2, [sp, #16]
  40120c:	2b00      	cmp	r3, #0
  40120e:	d051      	beq.n	4012b4 <ili9325_draw_string+0xd8>
		/* If newline, jump to the next line (font height + 2) */
		if (*p_str == '\n') {
  401210:	2b0a      	cmp	r3, #10
  401212:	d0f2      	beq.n	4011fa <ili9325_draw_string+0x1e>
  401214:	4a51      	ldr	r2, [pc, #324]	; (40135c <ili9325_draw_string+0x180>)
  401216:	9e03      	ldr	r6, [sp, #12]
	uint32_t row, col;
	uint32_t offset, offset0, offset1;

	/* Compute offset according of the specified ASCII character */
	/* Note: the first 32 characters of the ASCII table are not handled */
	offset = ((uint32_t)uc_c - 0x20) * 20;
  401218:	2114      	movs	r1, #20
  40121a:	fb01 2303 	mla	r3, r1, r3, r2
  40121e:	f2a3 227f 	subw	r2, r3, #639	; 0x27f
  401222:	4633      	mov	r3, r6
  401224:	330a      	adds	r3, #10
  401226:	9301      	str	r3, [sp, #4]
  401228:	9b00      	ldr	r3, [sp, #0]
  40122a:	f103 0b08 	add.w	fp, r3, #8
  40122e:	2eef      	cmp	r6, #239	; 0xef
  401230:	d831      	bhi.n	401296 <ili9325_draw_string+0xba>
static void ili9325_write_register(uint8_t uc_reg, uint16_t us_data)
{
	LCD_IR(0);
	LCD_IR(uc_reg);
	LCD_WD((us_data >> 8) & 0xFF);
	LCD_WD(us_data & 0xFF);
  401232:	fa5f f886 	uxtb.w	r8, r6
	uint32_t row, col;
	uint32_t offset, offset0, offset1;

	/* Compute offset according of the specified ASCII character */
	/* Note: the first 32 characters of the ASCII table are not handled */
	offset = ((uint32_t)uc_c - 0x20) * 20;
  401236:	9b00      	ldr	r3, [sp, #0]
  401238:	2107      	movs	r1, #7
  40123a:	2400      	movs	r4, #0
  40123c:	f04f 0a20 	mov.w	sl, #32
  401240:	2721      	movs	r7, #33	; 0x21
  401242:	46c1      	mov	r9, r8
		offset0 = offset + col * 2;
		offset1 = offset0 + 1;

		/* Draw pixel on screen depending on the corresponding bit value from the charset */
		for (row = 0; row < 8; row++) {
			if ((p_uc_charset10x14[offset0] >> (7 - row)) & 0x1) {
  401244:	f812 0c01 	ldrb.w	r0, [r2, #-1]
  401248:	4108      	asrs	r0, r1
  40124a:	f010 0f01 	tst.w	r0, #1
  40124e:	f101 31ff 	add.w	r1, r1, #4294967295
  401252:	d002      	beq.n	40125a <ili9325_draw_string+0x7e>
 *
 * \return 0 if succeeds, otherwise fails.
 */
uint32_t ili9325_draw_pixel(uint32_t ul_x, uint32_t ul_y)
{
	if ((ul_x >= ILI9325_LCD_WIDTH) || (ul_y >= ILI9325_LCD_HEIGHT)) {
  401254:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
  401258:	d32f      	bcc.n	4012ba <ili9325_draw_string+0xde>
  40125a:	3301      	adds	r3, #1
		/* Compute the first and second byte offset of a column */
		offset0 = offset + col * 2;
		offset1 = offset0 + 1;

		/* Draw pixel on screen depending on the corresponding bit value from the charset */
		for (row = 0; row < 8; row++) {
  40125c:	455b      	cmp	r3, fp
  40125e:	d1f1      	bne.n	401244 <ili9325_draw_string+0x68>
  401260:	9900      	ldr	r1, [sp, #0]
static void ili9325_write_register(uint8_t uc_reg, uint16_t us_data)
{
	LCD_IR(0);
	LCD_IR(uc_reg);
	LCD_WD((us_data >> 8) & 0xFF);
	LCD_WD(us_data & 0xFF);
  401262:	b2f5      	uxtb	r5, r6
  401264:	f101 000e 	add.w	r0, r1, #14
  401268:	465b      	mov	r3, fp
		/* Compute the first and second byte offset of a column */
		offset0 = offset + col * 2;
		offset1 = offset0 + 1;

		/* Draw pixel on screen depending on the corresponding bit value from the charset */
		for (row = 0; row < 8; row++) {
  40126a:	2107      	movs	r1, #7
  40126c:	2400      	movs	r4, #0
  40126e:	f04f 0820 	mov.w	r8, #32
static void ili9325_write_register(uint8_t uc_reg, uint16_t us_data)
{
	LCD_IR(0);
	LCD_IR(uc_reg);
	LCD_WD((us_data >> 8) & 0xFF);
	LCD_WD(us_data & 0xFF);
  401272:	9502      	str	r5, [sp, #8]
  401274:	f04f 0a21 	mov.w	sl, #33	; 0x21
  401278:	46b1      	mov	r9, r6
				ili9325_draw_pixel(ul_x + col, ul_y + row);
			}
		}

		for (row = 0; row < 6; row++) {
			if ((p_uc_charset10x14[offset1] >> (7 - row)) & 0x1) {
  40127a:	7815      	ldrb	r5, [r2, #0]
  40127c:	410d      	asrs	r5, r1
  40127e:	f015 0f01 	tst.w	r5, #1
  401282:	f101 31ff 	add.w	r1, r1, #4294967295
  401286:	d002      	beq.n	40128e <ili9325_draw_string+0xb2>
 *
 * \return 0 if succeeds, otherwise fails.
 */
uint32_t ili9325_draw_pixel(uint32_t ul_x, uint32_t ul_y)
{
	if ((ul_x >= ILI9325_LCD_WIDTH) || (ul_y >= ILI9325_LCD_HEIGHT)) {
  401288:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
  40128c:	d33c      	bcc.n	401308 <ili9325_draw_string+0x12c>
  40128e:	3301      	adds	r3, #1
			if ((p_uc_charset10x14[offset0] >> (7 - row)) & 0x1) {
				ili9325_draw_pixel(ul_x + col, ul_y + row);
			}
		}

		for (row = 0; row < 6; row++) {
  401290:	4283      	cmp	r3, r0
  401292:	d1f2      	bne.n	40127a <ili9325_draw_string+0x9e>
  401294:	464e      	mov	r6, r9

	/* Compute offset according of the specified ASCII character */
	/* Note: the first 32 characters of the ASCII table are not handled */
	offset = ((uint32_t)uc_c - 0x20) * 20;

	for (col = 0; col < 10; col++) {
  401296:	9b01      	ldr	r3, [sp, #4]
  401298:	3601      	adds	r6, #1
  40129a:	429e      	cmp	r6, r3
  40129c:	f102 0202 	add.w	r2, r2, #2
  4012a0:	d1c5      	bne.n	40122e <ili9325_draw_string+0x52>
			ul_y += gfont.height + 2;
			ul_x = xorg;
		} else {
			/* Draw the character and place cursor right after (font width + 2) */
			ili9325_draw_char(ul_x, ul_y, *p_str);
			ul_x += gfont.width + 2;
  4012a2:	9b03      	ldr	r3, [sp, #12]
 */
void ili9325_draw_string(uint32_t ul_x, uint32_t ul_y, const uint8_t *p_str)
{
	uint32_t xorg = ul_x;

	while (*p_str != 0) {
  4012a4:	9a04      	ldr	r2, [sp, #16]
			ul_y += gfont.height + 2;
			ul_x = xorg;
		} else {
			/* Draw the character and place cursor right after (font width + 2) */
			ili9325_draw_char(ul_x, ul_y, *p_str);
			ul_x += gfont.width + 2;
  4012a6:	330c      	adds	r3, #12
  4012a8:	9303      	str	r3, [sp, #12]
 */
void ili9325_draw_string(uint32_t ul_x, uint32_t ul_y, const uint8_t *p_str)
{
	uint32_t xorg = ul_x;

	while (*p_str != 0) {
  4012aa:	f812 3f01 	ldrb.w	r3, [r2, #1]!
  4012ae:	9204      	str	r2, [sp, #16]
  4012b0:	2b00      	cmp	r3, #0
  4012b2:	d1ad      	bne.n	401210 <ili9325_draw_string+0x34>
			ili9325_draw_char(ul_x, ul_y, *p_str);
			ul_x += gfont.width + 2;
		}
		p_str++;
	}
}
  4012b4:	b007      	add	sp, #28
  4012b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 */
static void ili9325_write_register(uint8_t uc_reg, uint16_t us_data)
{
	LCD_IR(0);
	LCD_IR(uc_reg);
	LCD_WD((us_data >> 8) & 0xFF);
  4012ba:	f3c3 2807 	ubfx	r8, r3, #8, #8
	LCD_WD(us_data & 0xFF);
  4012be:	b2d8      	uxtb	r0, r3
  4012c0:	f88e 4000 	strb.w	r4, [lr]
  4012c4:	f88e a000 	strb.w	sl, [lr]
	}
	static inline void LCD_WD(uint8_t lcd_data)
	{
		*((volatile uint8_t *)((BOARD_ILI9325_ADDR) | (BOARD_ILI9325_RS))) = lcd_data;
  4012c8:	f88c 4000 	strb.w	r4, [ip]
  4012cc:	f88c 9000 	strb.w	r9, [ip]

/* Define EBI access for ILI9325 8-bit System Interface.*/
#if defined(BOARD_ILI9325_ADDR) && defined (BOARD_ILI9325_RS)
	static inline void LCD_IR(uint8_t lcd_index)
	{
		*((volatile uint8_t *)(BOARD_ILI9325_ADDR)) = lcd_index; /* ILI9325 index register address */
  4012d0:	f88e 4000 	strb.w	r4, [lr]
  4012d4:	f88e 7000 	strb.w	r7, [lr]
	}
	static inline void LCD_WD(uint8_t lcd_data)
	{
		*((volatile uint8_t *)((BOARD_ILI9325_ADDR) | (BOARD_ILI9325_RS))) = lcd_data;
  4012d8:	f88c 8000 	strb.w	r8, [ip]
  4012dc:	f88c 0000 	strb.w	r0, [ip]

/* Define EBI access for ILI9325 8-bit System Interface.*/
#if defined(BOARD_ILI9325_ADDR) && defined (BOARD_ILI9325_RS)
	static inline void LCD_IR(uint8_t lcd_index)
	{
		*((volatile uint8_t *)(BOARD_ILI9325_ADDR)) = lcd_index; /* ILI9325 index register address */
  4012e0:	f04f 0022 	mov.w	r0, #34	; 0x22
  4012e4:	f88e 4000 	strb.w	r4, [lr]
  4012e8:	f88e 0000 	strb.w	r0, [lr]
	/* Set cursor */
	ili9325_set_cursor_position(ul_x, ul_y);

	/* Prepare to write in GRAM */
	ili9325_write_ram_prepare();
	ili9325_write_ram(*g_ul_pixel_cache);
  4012ec:	481c      	ldr	r0, [pc, #112]	; (401360 <ili9325_draw_string+0x184>)
  4012ee:	6800      	ldr	r0, [r0, #0]
 *
 * \param ul_color 24-bits RGB color.
 */
static void ili9325_write_ram(ili9325_color_t ul_color)
{
	LCD_WD((ul_color >> 16) & 0xFF);
  4012f0:	f3c0 4507 	ubfx	r5, r0, #16, #8
	LCD_WD((ul_color >> 8) & 0xFF);
  4012f4:	f3c0 2807 	ubfx	r8, r0, #8, #8
	LCD_WD(ul_color & 0xFF);
  4012f8:	b2c0      	uxtb	r0, r0
	}
	static inline void LCD_WD(uint8_t lcd_data)
	{
		*((volatile uint8_t *)((BOARD_ILI9325_ADDR) | (BOARD_ILI9325_RS))) = lcd_data;
  4012fa:	f88c 5000 	strb.w	r5, [ip]
  4012fe:	f88c 8000 	strb.w	r8, [ip]
  401302:	f88c 0000 	strb.w	r0, [ip]
  401306:	e7a8      	b.n	40125a <ili9325_draw_string+0x7e>

/* Define EBI access for ILI9325 8-bit System Interface.*/
#if defined(BOARD_ILI9325_ADDR) && defined (BOARD_ILI9325_RS)
	static inline void LCD_IR(uint8_t lcd_index)
	{
		*((volatile uint8_t *)(BOARD_ILI9325_ADDR)) = lcd_index; /* ILI9325 index register address */
  401308:	f88e 4000 	strb.w	r4, [lr]
  40130c:	f88e 8000 	strb.w	r8, [lr]
	}
	static inline void LCD_WD(uint8_t lcd_data)
	{
		*((volatile uint8_t *)((BOARD_ILI9325_ADDR) | (BOARD_ILI9325_RS))) = lcd_data;
  401310:	f88c 4000 	strb.w	r4, [ip]
  401314:	f89d 7008 	ldrb.w	r7, [sp, #8]
  401318:	f88c 7000 	strb.w	r7, [ip]
 */
static void ili9325_write_register(uint8_t uc_reg, uint16_t us_data)
{
	LCD_IR(0);
	LCD_IR(uc_reg);
	LCD_WD((us_data >> 8) & 0xFF);
  40131c:	f3c3 2607 	ubfx	r6, r3, #8, #8
	LCD_WD(us_data & 0xFF);
  401320:	b2dd      	uxtb	r5, r3

/* Define EBI access for ILI9325 8-bit System Interface.*/
#if defined(BOARD_ILI9325_ADDR) && defined (BOARD_ILI9325_RS)
	static inline void LCD_IR(uint8_t lcd_index)
	{
		*((volatile uint8_t *)(BOARD_ILI9325_ADDR)) = lcd_index; /* ILI9325 index register address */
  401322:	f88e 4000 	strb.w	r4, [lr]
  401326:	f88e a000 	strb.w	sl, [lr]
	}
	static inline void LCD_WD(uint8_t lcd_data)
	{
		*((volatile uint8_t *)((BOARD_ILI9325_ADDR) | (BOARD_ILI9325_RS))) = lcd_data;
  40132a:	f88c 6000 	strb.w	r6, [ip]
  40132e:	f88c 5000 	strb.w	r5, [ip]

/* Define EBI access for ILI9325 8-bit System Interface.*/
#if defined(BOARD_ILI9325_ADDR) && defined (BOARD_ILI9325_RS)
	static inline void LCD_IR(uint8_t lcd_index)
	{
		*((volatile uint8_t *)(BOARD_ILI9325_ADDR)) = lcd_index; /* ILI9325 index register address */
  401332:	f04f 0522 	mov.w	r5, #34	; 0x22
  401336:	f88e 4000 	strb.w	r4, [lr]
  40133a:	f88e 5000 	strb.w	r5, [lr]
	/* Set cursor */
	ili9325_set_cursor_position(ul_x, ul_y);

	/* Prepare to write in GRAM */
	ili9325_write_ram_prepare();
	ili9325_write_ram(*g_ul_pixel_cache);
  40133e:	4d08      	ldr	r5, [pc, #32]	; (401360 <ili9325_draw_string+0x184>)
  401340:	682d      	ldr	r5, [r5, #0]
 *
 * \param ul_color 24-bits RGB color.
 */
static void ili9325_write_ram(ili9325_color_t ul_color)
{
	LCD_WD((ul_color >> 16) & 0xFF);
  401342:	f3c5 4607 	ubfx	r6, r5, #16, #8
  401346:	4637      	mov	r7, r6
	LCD_WD((ul_color >> 8) & 0xFF);
  401348:	f3c5 2607 	ubfx	r6, r5, #8, #8
	LCD_WD(ul_color & 0xFF);
  40134c:	b2ed      	uxtb	r5, r5
	}
	static inline void LCD_WD(uint8_t lcd_data)
	{
		*((volatile uint8_t *)((BOARD_ILI9325_ADDR) | (BOARD_ILI9325_RS))) = lcd_data;
  40134e:	f88c 7000 	strb.w	r7, [ip]
  401352:	f88c 6000 	strb.w	r6, [ip]
  401356:	f88c 5000 	strb.w	r5, [ip]
  40135a:	e798      	b.n	40128e <ili9325_draw_string+0xb2>
  40135c:	0041011c 	.word	0x0041011c
  401360:	20000e38 	.word	0x20000e38
  401364:	62000002 	.word	0x62000002

00401368 <smc_set_setup_timing>:
 * \param ul_setup_timing Setup timing for NWE, NCS, NRD.
 */
void smc_set_setup_timing(Smc *p_smc, uint32_t ul_cs,
		uint32_t ul_setup_timing)
{
	p_smc->SMC_CS_NUMBER[ul_cs].SMC_SETUP = ul_setup_timing;
  401368:	0109      	lsls	r1, r1, #4
  40136a:	5042      	str	r2, [r0, r1]
  40136c:	4770      	bx	lr
  40136e:	bf00      	nop

00401370 <smc_set_pulse_timing>:
 * \param ul_pulse_timing Pulse timing for NWE,NCS,NRD.
 */
void smc_set_pulse_timing(Smc *p_smc, uint32_t ul_cs,
		uint32_t ul_pulse_timing)
{
	p_smc->SMC_CS_NUMBER[ul_cs].SMC_PULSE = ul_pulse_timing;
  401370:	eb00 1101 	add.w	r1, r0, r1, lsl #4
  401374:	604a      	str	r2, [r1, #4]
  401376:	4770      	bx	lr

00401378 <smc_set_cycle_timing>:
 * \param ul_cycle_timing Cycle timing for NWE and NRD.
 */
void smc_set_cycle_timing(Smc *p_smc, uint32_t ul_cs,
		uint32_t ul_cycle_timing)
{
	p_smc->SMC_CS_NUMBER[ul_cs].SMC_CYCLE = ul_cycle_timing;
  401378:	eb00 1101 	add.w	r1, r0, r1, lsl #4
  40137c:	608a      	str	r2, [r1, #8]
  40137e:	4770      	bx	lr

00401380 <smc_set_mode>:
 * \param ul_cs Chip select number to be set.
 * \param ul_mode SMC mode.
 */
void smc_set_mode(Smc *p_smc, uint32_t ul_cs, uint32_t ul_mode)
{
	p_smc->SMC_CS_NUMBER[ul_cs].SMC_MODE = ul_mode;
  401380:	eb00 1101 	add.w	r1, r0, r1, lsl #4
  401384:	60ca      	str	r2, [r1, #12]
  401386:	4770      	bx	lr

00401388 <pio_set_debounce_filter>:
	/*
	 * The debouncing filter can filter a pulse of less than 1/2 Period of a
	 * programmable Divided Slow Clock:
	 * Tdiv_slclk = ((DIV+1)*2).Tslow_clock
	 */
	p_pio->PIO_SCDR = PIO_SCDR_DIV((FREQ_SLOW_CLOCK_EXT /
  401388:	0052      	lsls	r2, r2, #1
  40138a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  40138e:	fbb3 f2f2 	udiv	r2, r3, r2
  401392:	3a01      	subs	r2, #1
  401394:	f3c2 020d 	ubfx	r2, r2, #0, #14
void pio_set_debounce_filter(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_cut_off)
{
#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	/* Set Debouncing, 0 bit field no effect */
	p_pio->PIO_IFSCER = ul_mask;
  401398:	f8c0 1084 	str.w	r1, [r0, #132]	; 0x84
	/*
	 * The debouncing filter can filter a pulse of less than 1/2 Period of a
	 * programmable Divided Slow Clock:
	 * Tdiv_slclk = ((DIV+1)*2).Tslow_clock
	 */
	p_pio->PIO_SCDR = PIO_SCDR_DIV((FREQ_SLOW_CLOCK_EXT /
  40139c:	f8c0 208c 	str.w	r2, [r0, #140]	; 0x8c
  4013a0:	4770      	bx	lr
  4013a2:	bf00      	nop

004013a4 <pio_set>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_set(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_SODR = ul_mask;
  4013a4:	6301      	str	r1, [r0, #48]	; 0x30
  4013a6:	4770      	bx	lr

004013a8 <pio_clear>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_clear(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_CODR = ul_mask;
  4013a8:	6341      	str	r1, [r0, #52]	; 0x34
  4013aa:	4770      	bx	lr

004013ac <pio_configure_interrupt>:
 */
void pio_configure_interrupt(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_attr)
{
	/* Configure additional interrupt mode registers. */
	if (ul_attr & PIO_IT_AIME) {
  4013ac:	06d3      	lsls	r3, r2, #27
  4013ae:	d50e      	bpl.n	4013ce <pio_configure_interrupt+0x22>
		/* Enable additional interrupt mode. */
		p_pio->PIO_AIMER = ul_mask;

		/* If bit field of the selected pin is 1, set as
		   Rising Edge/High level detection event. */
		if (ul_attr & PIO_IT_RE_OR_HL) {
  4013b0:	0693      	lsls	r3, r2, #26
		const uint32_t ul_attr)
{
	/* Configure additional interrupt mode registers. */
	if (ul_attr & PIO_IT_AIME) {
		/* Enable additional interrupt mode. */
		p_pio->PIO_AIMER = ul_mask;
  4013b2:	f8c0 10b0 	str.w	r1, [r0, #176]	; 0xb0

		/* If bit field of the selected pin is 1, set as
		   Rising Edge/High level detection event. */
		if (ul_attr & PIO_IT_RE_OR_HL) {
			/* Rising Edge or High Level */
			p_pio->PIO_REHLSR = ul_mask;
  4013b6:	bf4c      	ite	mi
  4013b8:	f8c0 10d4 	strmi.w	r1, [r0, #212]	; 0xd4
		} else {
			/* Falling Edge or Low Level */
			p_pio->PIO_FELLSR = ul_mask;
  4013bc:	f8c0 10d0 	strpl.w	r1, [r0, #208]	; 0xd0
		}

		/* If bit field of the selected pin is 1, set as
		   edge detection source. */
		if (ul_attr & PIO_IT_EDGE) {
  4013c0:	0653      	lsls	r3, r2, #25
			/* Edge select */
			p_pio->PIO_ESR = ul_mask;
  4013c2:	bf4c      	ite	mi
  4013c4:	f8c0 10c0 	strmi.w	r1, [r0, #192]	; 0xc0
		} else {
			/* Level select */
			p_pio->PIO_LSR = ul_mask;
  4013c8:	f8c0 10c4 	strpl.w	r1, [r0, #196]	; 0xc4
  4013cc:	4770      	bx	lr
		}
	} else {
		/* Disable additional interrupt mode. */
		p_pio->PIO_AIMDR = ul_mask;
  4013ce:	f8c0 10b4 	str.w	r1, [r0, #180]	; 0xb4
  4013d2:	4770      	bx	lr

004013d4 <pio_enable_interrupt>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_enable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_ISR;
  4013d4:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
	p_pio->PIO_IER = ul_mask;
  4013d6:	6401      	str	r1, [r0, #64]	; 0x40
  4013d8:	4770      	bx	lr
  4013da:	bf00      	nop

004013dc <pio_disable_interrupt>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
  4013dc:	6441      	str	r1, [r0, #68]	; 0x44
  4013de:	4770      	bx	lr

004013e0 <pio_get_interrupt_status>:
 *
 * \return The interrupt status mask value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
  4013e0:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
  4013e2:	4770      	bx	lr

004013e4 <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
  4013e4:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
  4013e6:	4770      	bx	lr

004013e8 <pio_configure_pin>:
		p_pio = PIOC;
	} else {
		p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
	}
#else
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
  4013e8:	0943      	lsrs	r3, r0, #5
  4013ea:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
	Pio *p_pio = pio_get_pin_group(ul_pin);

	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
  4013ee:	f001 42f0 	and.w	r2, r1, #2013265920	; 0x78000000
		p_pio = PIOC;
	} else {
		p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
	}
#else
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
  4013f2:	f203 7307 	addw	r3, r3, #1799	; 0x707
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
	Pio *p_pio = pio_get_pin_group(ul_pin);

	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
  4013f6:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
 * \param ul_flags Pins attributes.
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
  4013fa:	b470      	push	{r4, r5, r6}
		p_pio = PIOC;
	} else {
		p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
	}
#else
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
  4013fc:	ea4f 2343 	mov.w	r3, r3, lsl #9
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
	Pio *p_pio = pio_get_pin_group(ul_pin);

	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
  401400:	f000 808b 	beq.w	40151a <pio_configure_pin+0x132>
  401404:	d80b      	bhi.n	40141e <pio_configure_pin+0x36>
  401406:	f1b2 5f80 	cmp.w	r2, #268435456	; 0x10000000
  40140a:	d02a      	beq.n	401462 <pio_configure_pin+0x7a>
  40140c:	f1b2 5fc0 	cmp.w	r2, #402653184	; 0x18000000
  401410:	d054      	beq.n	4014bc <pio_configure_pin+0xd4>
  401412:	f1b2 6f00 	cmp.w	r2, #134217728	; 0x8000000
  401416:	d039      	beq.n	40148c <pio_configure_pin+0xa4>
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
		break;

	default:
		return 0;
  401418:	2000      	movs	r0, #0
	}

	return 1;
}
  40141a:	bc70      	pop	{r4, r5, r6}
  40141c:	4770      	bx	lr
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
	Pio *p_pio = pio_get_pin_group(ul_pin);

	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
  40141e:	f1b2 5f40 	cmp.w	r2, #805306368	; 0x30000000
  401422:	d061      	beq.n	4014e8 <pio_configure_pin+0x100>
  401424:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
  401428:	d05e      	beq.n	4014e8 <pio_configure_pin+0x100>
  40142a:	f1b2 5f20 	cmp.w	r2, #671088640	; 0x28000000
  40142e:	d1f3      	bne.n	401418 <pio_configure_pin+0x30>
				(ul_flags & PIO_PULLUP));
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
  401430:	f000 001f 	and.w	r0, r0, #31
  401434:	2201      	movs	r2, #1
  401436:	4082      	lsls	r2, r0
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  401438:	07cd      	lsls	r5, r1, #31
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
  40143a:	645a      	str	r2, [r3, #68]	; 0x44
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
		p_pio->PIO_PUER = ul_mask;
  40143c:	bf4c      	ite	mi
  40143e:	665a      	strmi	r2, [r3, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
  401440:	661a      	strpl	r2, [r3, #96]	; 0x60
{
	pio_disable_interrupt(p_pio, ul_mask);
	pio_pull_up(p_pio, ul_mask, ul_attribute & PIO_PULLUP);

	/* Enable Input Filter if necessary */
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
  401442:	f011 0f0a 	tst.w	r1, #10
		p_pio->PIO_IFER = ul_mask;
  401446:	bf14      	ite	ne
  401448:	621a      	strne	r2, [r3, #32]
	} else {
		p_pio->PIO_IFDR = ul_mask;
  40144a:	625a      	streq	r2, [r3, #36]	; 0x24
	}

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	/* Enable de-glitch or de-bounce if necessary */
	if (ul_attribute & PIO_DEGLITCH) {
  40144c:	078c      	lsls	r4, r1, #30
  40144e:	d46f      	bmi.n	401530 <pio_configure_pin+0x148>
		p_pio->PIO_IFSCDR = ul_mask;
	} else {
		if (ul_attribute & PIO_DEBOUNCE) {
  401450:	0708      	lsls	r0, r1, #28
			p_pio->PIO_IFSCER = ul_mask;
  401452:	bf48      	it	mi
  401454:	f8c3 2084 	strmi.w	r2, [r3, #132]	; 0x84
#else
#error "Unsupported device"
#endif

	/* Configure pin as input */
	p_pio->PIO_ODR = ul_mask;
  401458:	615a      	str	r2, [r3, #20]
	p_pio->PIO_PER = ul_mask;
  40145a:	601a      	str	r2, [r3, #0]

	default:
		return 0;
	}

	return 1;
  40145c:	2001      	movs	r0, #1
}
  40145e:	bc70      	pop	{r4, r5, r6}
  401460:	4770      	bx	lr
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
				(ul_flags & PIO_PULLUP));
		break;
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, (1 << (ul_pin & 0x1F)));
  401462:	f000 021f 	and.w	r2, r0, #31
  401466:	2001      	movs	r0, #1
  401468:	fa00 f202 	lsl.w	r2, r0, r2
		const uint32_t ul_mask)
{
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
  40146c:	645a      	str	r2, [r3, #68]	; 0x44

		ul_sr = p_pio->PIO_ABCDSR[1];
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
		break;
	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABCDSR[0];
  40146e:	6f1c      	ldr	r4, [r3, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  401470:	4314      	orrs	r4, r2
  401472:	671c      	str	r4, [r3, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  401474:	6f5c      	ldr	r4, [r3, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  401476:	6f5d      	ldr	r5, [r3, #116]	; 0x74
  401478:	402c      	ands	r4, r5
  40147a:	ea24 0402 	bic.w	r4, r4, r2
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  40147e:	07c9      	lsls	r1, r1, #31
	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABCDSR[0];
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);

		ul_sr = p_pio->PIO_ABCDSR[1];
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  401480:	675c      	str	r4, [r3, #116]	; 0x74
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
  401482:	605a      	str	r2, [r3, #4]
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  401484:	d52d      	bpl.n	4014e2 <pio_configure_pin+0xfa>
		p_pio->PIO_PUER = ul_mask;
  401486:	665a      	str	r2, [r3, #100]	; 0x64
	default:
		return 0;
	}

	return 1;
}
  401488:	bc70      	pop	{r4, r5, r6}
  40148a:	4770      	bx	lr
	Pio *p_pio = pio_get_pin_group(ul_pin);

	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
  40148c:	f000 021f 	and.w	r2, r0, #31
  401490:	2001      	movs	r0, #1
  401492:	fa00 f402 	lsl.w	r4, r0, r2
		const uint32_t ul_mask)
{
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
  401496:	645c      	str	r4, [r3, #68]	; 0x44

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	switch (ul_type) {
	case PIO_PERIPH_A:
		ul_sr = p_pio->PIO_ABCDSR[0];
  401498:	6f1a      	ldr	r2, [r3, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  40149a:	6f1e      	ldr	r6, [r3, #112]	; 0x70
  40149c:	43e5      	mvns	r5, r4
  40149e:	4032      	ands	r2, r6
  4014a0:	402a      	ands	r2, r5
  4014a2:	671a      	str	r2, [r3, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  4014a4:	6f5a      	ldr	r2, [r3, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  4014a6:	6f5e      	ldr	r6, [r3, #116]	; 0x74
  4014a8:	4032      	ands	r2, r6
  4014aa:	4015      	ands	r5, r2
  4014ac:	675d      	str	r5, [r3, #116]	; 0x74
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  4014ae:	07cd      	lsls	r5, r1, #31
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
  4014b0:	605c      	str	r4, [r3, #4]
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
		p_pio->PIO_PUER = ul_mask;
  4014b2:	bf4c      	ite	mi
  4014b4:	665c      	strmi	r4, [r3, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
  4014b6:	661c      	strpl	r4, [r3, #96]	; 0x60
	default:
		return 0;
	}

	return 1;
}
  4014b8:	bc70      	pop	{r4, r5, r6}
  4014ba:	4770      	bx	lr
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
				(ul_flags & PIO_PULLUP));
		break;
#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	case PIO_TYPE_PIO_PERIPH_C:
		pio_set_peripheral(p_pio, PIO_PERIPH_C, (1 << (ul_pin & 0x1F)));
  4014bc:	f000 021f 	and.w	r2, r0, #31
  4014c0:	2001      	movs	r0, #1
  4014c2:	fa00 f202 	lsl.w	r2, r0, r2
		const uint32_t ul_mask)
{
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
  4014c6:	645a      	str	r2, [r3, #68]	; 0x44
		ul_sr = p_pio->PIO_ABCDSR[1];
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
		break;
#if (!SAMG)
	case PIO_PERIPH_C:
		ul_sr = p_pio->PIO_ABCDSR[0];
  4014c8:	6f1c      	ldr	r4, [r3, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  4014ca:	6f1d      	ldr	r5, [r3, #112]	; 0x70
  4014cc:	402c      	ands	r4, r5
  4014ce:	ea24 0402 	bic.w	r4, r4, r2
		ul_sr = p_pio->PIO_ABCDSR[1];
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
		break;
	case PIO_PERIPH_D:
		ul_sr = p_pio->PIO_ABCDSR[0];
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  4014d2:	671c      	str	r4, [r3, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  4014d4:	6f5c      	ldr	r4, [r3, #116]	; 0x74
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  4014d6:	07ce      	lsls	r6, r1, #31
	case PIO_PERIPH_D:
		ul_sr = p_pio->PIO_ABCDSR[0];
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);

		ul_sr = p_pio->PIO_ABCDSR[1];
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  4014d8:	ea44 0402 	orr.w	r4, r4, r2
  4014dc:	675c      	str	r4, [r3, #116]	; 0x74
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
  4014de:	605a      	str	r2, [r3, #4]
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  4014e0:	d4d1      	bmi.n	401486 <pio_configure_pin+0x9e>
		p_pio->PIO_PUER = ul_mask;
	} else {
		p_pio->PIO_PUDR = ul_mask;
  4014e2:	661a      	str	r2, [r3, #96]	; 0x60
	default:
		return 0;
	}

	return 1;
}
  4014e4:	bc70      	pop	{r4, r5, r6}
  4014e6:	4770      	bx	lr
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
  4014e8:	f000 001f 	and.w	r0, r0, #31
  4014ec:	2201      	movs	r2, #1
  4014ee:	4082      	lsls	r2, r0
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
  4014f0:	f001 0404 	and.w	r4, r1, #4
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
  4014f4:	f001 5060 	and.w	r0, r1, #939524096	; 0x38000000
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  4014f8:	07c9      	lsls	r1, r1, #31
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
  4014fa:	645a      	str	r2, [r3, #68]	; 0x44
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
		p_pio->PIO_PUER = ul_mask;
  4014fc:	bf4c      	ite	mi
  4014fe:	665a      	strmi	r2, [r3, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
  401500:	661a      	strpl	r2, [r3, #96]	; 0x60
{
	pio_disable_interrupt(p_pio, ul_mask);
	pio_pull_up(p_pio, ul_mask, ul_pull_up_enable);

	/* Enable multi-drive if necessary */
	if (ul_multidrive_enable) {
  401502:	b19c      	cbz	r4, 40152c <pio_configure_pin+0x144>
		p_pio->PIO_MDER = ul_mask;
  401504:	651a      	str	r2, [r3, #80]	; 0x50
	} else {
		p_pio->PIO_MDDR = ul_mask;
	}

	/* Set default value */
	if (ul_default_level) {
  401506:	f1b0 5f60 	cmp.w	r0, #939524096	; 0x38000000
		p_pio->PIO_SODR = ul_mask;
  40150a:	bf0c      	ite	eq
  40150c:	631a      	streq	r2, [r3, #48]	; 0x30
	} else {
		p_pio->PIO_CODR = ul_mask;
  40150e:	635a      	strne	r2, [r3, #52]	; 0x34
	}

	/* Configure pin(s) as output(s) */
	p_pio->PIO_OER = ul_mask;
  401510:	611a      	str	r2, [r3, #16]
	p_pio->PIO_PER = ul_mask;
  401512:	601a      	str	r2, [r3, #0]

	default:
		return 0;
	}

	return 1;
  401514:	2001      	movs	r0, #1
}
  401516:	bc70      	pop	{r4, r5, r6}
  401518:	4770      	bx	lr
		pio_set_peripheral(p_pio, PIO_PERIPH_C, (1 << (ul_pin & 0x1F)));
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
				(ul_flags & PIO_PULLUP));
		break;
	case PIO_TYPE_PIO_PERIPH_D:
		pio_set_peripheral(p_pio, PIO_PERIPH_D, (1 << (ul_pin & 0x1F)));
  40151a:	f000 021f 	and.w	r2, r0, #31
  40151e:	2001      	movs	r0, #1
  401520:	fa00 f202 	lsl.w	r2, r0, r2
		const uint32_t ul_mask)
{
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
  401524:	645a      	str	r2, [r3, #68]	; 0x44

		ul_sr = p_pio->PIO_ABCDSR[1];
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
		break;
	case PIO_PERIPH_D:
		ul_sr = p_pio->PIO_ABCDSR[0];
  401526:	6f1c      	ldr	r4, [r3, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  401528:	4314      	orrs	r4, r2
  40152a:	e7d2      	b.n	4014d2 <pio_configure_pin+0xea>

	/* Enable multi-drive if necessary */
	if (ul_multidrive_enable) {
		p_pio->PIO_MDER = ul_mask;
	} else {
		p_pio->PIO_MDDR = ul_mask;
  40152c:	655a      	str	r2, [r3, #84]	; 0x54
  40152e:	e7ea      	b.n	401506 <pio_configure_pin+0x11e>
	}

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	/* Enable de-glitch or de-bounce if necessary */
	if (ul_attribute & PIO_DEGLITCH) {
		p_pio->PIO_IFSCDR = ul_mask;
  401530:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  401534:	e790      	b.n	401458 <pio_configure_pin+0x70>
  401536:	bf00      	nop

00401538 <pio_capture_enable>:
 *
 * \param p_pio Pointer to a PIO instance.
 */
void pio_capture_enable(Pio *p_pio)
{
	p_pio->PIO_PCMR |= PIO_PCMR_PCEN;
  401538:	f8d0 3150 	ldr.w	r3, [r0, #336]	; 0x150
	pio_capture_enable_flag = true;
  40153c:	4a03      	ldr	r2, [pc, #12]	; (40154c <pio_capture_enable+0x14>)
  40153e:	2101      	movs	r1, #1
 *
 * \param p_pio Pointer to a PIO instance.
 */
void pio_capture_enable(Pio *p_pio)
{
	p_pio->PIO_PCMR |= PIO_PCMR_PCEN;
  401540:	430b      	orrs	r3, r1
  401542:	f8c0 3150 	str.w	r3, [r0, #336]	; 0x150
	pio_capture_enable_flag = true;
  401546:	6011      	str	r1, [r2, #0]
  401548:	4770      	bx	lr
  40154a:	bf00      	nop
  40154c:	200012c0 	.word	0x200012c0

00401550 <pio_capture_disable>:
 *
 * \param p_pio Pointer to a PIO instance.
 */
void pio_capture_disable(Pio *p_pio)
{
	p_pio->PIO_PCMR &= (~PIO_PCMR_PCEN);
  401550:	f8d0 3150 	ldr.w	r3, [r0, #336]	; 0x150
	pio_capture_enable_flag = false;
  401554:	4a03      	ldr	r2, [pc, #12]	; (401564 <pio_capture_disable+0x14>)
  401556:	2100      	movs	r1, #0
 *
 * \param p_pio Pointer to a PIO instance.
 */
void pio_capture_disable(Pio *p_pio)
{
	p_pio->PIO_PCMR &= (~PIO_PCMR_PCEN);
  401558:	f023 0301 	bic.w	r3, r3, #1
  40155c:	f8c0 3150 	str.w	r3, [r0, #336]	; 0x150
	pio_capture_enable_flag = false;
  401560:	6011      	str	r1, [r2, #0]
  401562:	4770      	bx	lr
  401564:	200012c0 	.word	0x200012c0

00401568 <pio_handler_set>:
 *
 * \return 0 if successful, 1 if the maximum number of sources has been defined.
 */
uint32_t pio_handler_set(Pio *p_pio, uint32_t ul_id, uint32_t ul_mask,
		uint32_t ul_attr, void (*p_handler) (uint32_t, uint32_t))
{
  401568:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct s_interrupt_source *pSource;

	if (gs_ul_nb_sources >= MAX_INTERRUPT_SOURCES)
  40156c:	f8df e040 	ldr.w	lr, [pc, #64]	; 4015b0 <pio_handler_set+0x48>
  401570:	f8de 4000 	ldr.w	r4, [lr]
  401574:	2c06      	cmp	r4, #6
  401576:	d902      	bls.n	40157e <pio_handler_set+0x16>
		return 1;
  401578:	2001      	movs	r0, #1

	/* Configure interrupt mode */
	pio_configure_interrupt(p_pio, ul_mask, ul_attr);

	return 0;
}
  40157a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if (gs_ul_nb_sources >= MAX_INTERRUPT_SOURCES)
		return 1;

	/* Define new source */
	pSource = &(gs_interrupt_sources[gs_ul_nb_sources]);
	pSource->id = ul_id;
  40157e:	f8df 8034 	ldr.w	r8, [pc, #52]	; 4015b4 <pio_handler_set+0x4c>
	pSource->attr = ul_attr;
	pSource->handler = p_handler;
	gs_ul_nb_sources++;

	/* Configure interrupt mode */
	pio_configure_interrupt(p_pio, ul_mask, ul_attr);
  401582:	f8df 9034 	ldr.w	r9, [pc, #52]	; 4015b8 <pio_handler_set+0x50>
	if (gs_ul_nb_sources >= MAX_INTERRUPT_SOURCES)
		return 1;

	/* Define new source */
	pSource = &(gs_interrupt_sources[gs_ul_nb_sources]);
	pSource->id = ul_id;
  401586:	ea4f 1c04 	mov.w	ip, r4, lsl #4
  40158a:	eb08 070c 	add.w	r7, r8, ip
  40158e:	4615      	mov	r5, r2
  401590:	460e      	mov	r6, r1
	pSource->mask = ul_mask;
	pSource->attr = ul_attr;
  401592:	60bb      	str	r3, [r7, #8]
	pSource->handler = p_handler;
	gs_ul_nb_sources++;

	/* Configure interrupt mode */
	pio_configure_interrupt(p_pio, ul_mask, ul_attr);
  401594:	4611      	mov	r1, r2
  401596:	461a      	mov	r2, r3
	/* Define new source */
	pSource = &(gs_interrupt_sources[gs_ul_nb_sources]);
	pSource->id = ul_id;
	pSource->mask = ul_mask;
	pSource->attr = ul_attr;
	pSource->handler = p_handler;
  401598:	9b08      	ldr	r3, [sp, #32]
	if (gs_ul_nb_sources >= MAX_INTERRUPT_SOURCES)
		return 1;

	/* Define new source */
	pSource = &(gs_interrupt_sources[gs_ul_nb_sources]);
	pSource->id = ul_id;
  40159a:	f848 600c 	str.w	r6, [r8, ip]
	pSource->mask = ul_mask;
	pSource->attr = ul_attr;
	pSource->handler = p_handler;
	gs_ul_nb_sources++;
  40159e:	3401      	adds	r4, #1
		return 1;

	/* Define new source */
	pSource = &(gs_interrupt_sources[gs_ul_nb_sources]);
	pSource->id = ul_id;
	pSource->mask = ul_mask;
  4015a0:	607d      	str	r5, [r7, #4]
	pSource->attr = ul_attr;
	pSource->handler = p_handler;
  4015a2:	60fb      	str	r3, [r7, #12]
	gs_ul_nb_sources++;
  4015a4:	f8ce 4000 	str.w	r4, [lr]

	/* Configure interrupt mode */
	pio_configure_interrupt(p_pio, ul_mask, ul_attr);
  4015a8:	47c8      	blx	r9

	return 0;
  4015aa:	2000      	movs	r0, #0
  4015ac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  4015b0:	200011f8 	.word	0x200011f8
  4015b4:	20001200 	.word	0x20001200
  4015b8:	004013ad 	.word	0x004013ad

004015bc <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
  4015bc:	b570      	push	{r4, r5, r6, lr}
{
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
  4015be:	4b37      	ldr	r3, [pc, #220]	; (40169c <PIOA_Handler+0xe0>)
  4015c0:	4837      	ldr	r0, [pc, #220]	; (4016a0 <PIOA_Handler+0xe4>)
  4015c2:	4798      	blx	r3
	status &= pio_get_interrupt_mask(p_pio);
  4015c4:	4b37      	ldr	r3, [pc, #220]	; (4016a4 <PIOA_Handler+0xe8>)
{
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
  4015c6:	4604      	mov	r4, r0
	status &= pio_get_interrupt_mask(p_pio);
  4015c8:	4835      	ldr	r0, [pc, #212]	; (4016a0 <PIOA_Handler+0xe4>)
  4015ca:	4798      	blx	r3

	/* Check pending events */
	if (status != 0) {
  4015cc:	ea10 0504 	ands.w	r5, r0, r4
  4015d0:	d01b      	beq.n	40160a <PIOA_Handler+0x4e>
		/* Find triggering source */
		i = 0;
		while (status != 0) {
			/* Source is configured on the same controller */
			if (gs_interrupt_sources[i].id == ul_id) {
  4015d2:	4c35      	ldr	r4, [pc, #212]	; (4016a8 <PIOA_Handler+0xec>)
  4015d4:	6820      	ldr	r0, [r4, #0]
  4015d6:	280b      	cmp	r0, #11
  4015d8:	d023      	beq.n	401622 <PIOA_Handler+0x66>
  4015da:	6920      	ldr	r0, [r4, #16]
  4015dc:	4e32      	ldr	r6, [pc, #200]	; (4016a8 <PIOA_Handler+0xec>)
  4015de:	280b      	cmp	r0, #11
  4015e0:	d02e      	beq.n	401640 <PIOA_Handler+0x84>
  4015e2:	6a20      	ldr	r0, [r4, #32]
  4015e4:	4e30      	ldr	r6, [pc, #192]	; (4016a8 <PIOA_Handler+0xec>)
  4015e6:	280b      	cmp	r0, #11
  4015e8:	d033      	beq.n	401652 <PIOA_Handler+0x96>
  4015ea:	6b20      	ldr	r0, [r4, #48]	; 0x30
  4015ec:	4e2e      	ldr	r6, [pc, #184]	; (4016a8 <PIOA_Handler+0xec>)
  4015ee:	280b      	cmp	r0, #11
  4015f0:	d038      	beq.n	401664 <PIOA_Handler+0xa8>
  4015f2:	6c20      	ldr	r0, [r4, #64]	; 0x40
  4015f4:	4e2c      	ldr	r6, [pc, #176]	; (4016a8 <PIOA_Handler+0xec>)
  4015f6:	280b      	cmp	r0, #11
  4015f8:	d03d      	beq.n	401676 <PIOA_Handler+0xba>
  4015fa:	6d20      	ldr	r0, [r4, #80]	; 0x50
  4015fc:	4e2a      	ldr	r6, [pc, #168]	; (4016a8 <PIOA_Handler+0xec>)
  4015fe:	280b      	cmp	r0, #11
  401600:	d042      	beq.n	401688 <PIOA_Handler+0xcc>
  401602:	6e20      	ldr	r0, [r4, #96]	; 0x60
  401604:	4b28      	ldr	r3, [pc, #160]	; (4016a8 <PIOA_Handler+0xec>)
  401606:	280b      	cmp	r0, #11
  401608:	d014      	beq.n	401634 <PIOA_Handler+0x78>
		}
	}

	/* Check capture events */
#if (SAM3S || SAM4S || SAM4E)
	if (pio_capture_enable_flag) {
  40160a:	4b28      	ldr	r3, [pc, #160]	; (4016ac <PIOA_Handler+0xf0>)
  40160c:	681b      	ldr	r3, [r3, #0]
  40160e:	b13b      	cbz	r3, 401620 <PIOA_Handler+0x64>
		if (pio_capture_handler) {
  401610:	4b27      	ldr	r3, [pc, #156]	; (4016b0 <PIOA_Handler+0xf4>)
  401612:	681b      	ldr	r3, [r3, #0]
  401614:	b11b      	cbz	r3, 40161e <PIOA_Handler+0x62>
			pio_capture_handler(p_pio);
  401616:	4822      	ldr	r0, [pc, #136]	; (4016a0 <PIOA_Handler+0xe4>)
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
	pio_handler_process(PIOA, ID_PIOA);
}
  401618:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}

	/* Check capture events */
#if (SAM3S || SAM4S || SAM4E)
	if (pio_capture_enable_flag) {
		if (pio_capture_handler) {
			pio_capture_handler(p_pio);
  40161c:	4718      	bx	r3
  40161e:	bd70      	pop	{r4, r5, r6, pc}
  401620:	bd70      	pop	{r4, r5, r6, pc}
		i = 0;
		while (status != 0) {
			/* Source is configured on the same controller */
			if (gs_interrupt_sources[i].id == ul_id) {
				/* Source has PIOs whose statuses have changed */
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  401622:	6861      	ldr	r1, [r4, #4]
  401624:	420d      	tst	r5, r1
  401626:	d0d8      	beq.n	4015da <PIOA_Handler+0x1e>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  401628:	68e3      	ldr	r3, [r4, #12]
  40162a:	4798      	blx	r3
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
  40162c:	6863      	ldr	r3, [r4, #4]

	/* Check pending events */
	if (status != 0) {
		/* Find triggering source */
		i = 0;
		while (status != 0) {
  40162e:	439d      	bics	r5, r3
  401630:	d0eb      	beq.n	40160a <PIOA_Handler+0x4e>
  401632:	e7d2      	b.n	4015da <PIOA_Handler+0x1e>
			/* Source is configured on the same controller */
			if (gs_interrupt_sources[i].id == ul_id) {
				/* Source has PIOs whose statuses have changed */
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  401634:	6e59      	ldr	r1, [r3, #100]	; 0x64
  401636:	4229      	tst	r1, r5
  401638:	d0e7      	beq.n	40160a <PIOA_Handler+0x4e>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  40163a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
  40163c:	4798      	blx	r3
  40163e:	e7e4      	b.n	40160a <PIOA_Handler+0x4e>
		i = 0;
		while (status != 0) {
			/* Source is configured on the same controller */
			if (gs_interrupt_sources[i].id == ul_id) {
				/* Source has PIOs whose statuses have changed */
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  401640:	6971      	ldr	r1, [r6, #20]
  401642:	420d      	tst	r5, r1
  401644:	d0cd      	beq.n	4015e2 <PIOA_Handler+0x26>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  401646:	69f3      	ldr	r3, [r6, #28]
  401648:	4798      	blx	r3
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
  40164a:	6973      	ldr	r3, [r6, #20]

	/* Check pending events */
	if (status != 0) {
		/* Find triggering source */
		i = 0;
		while (status != 0) {
  40164c:	439d      	bics	r5, r3
  40164e:	d0dc      	beq.n	40160a <PIOA_Handler+0x4e>
  401650:	e7c7      	b.n	4015e2 <PIOA_Handler+0x26>
			/* Source is configured on the same controller */
			if (gs_interrupt_sources[i].id == ul_id) {
				/* Source has PIOs whose statuses have changed */
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  401652:	6a71      	ldr	r1, [r6, #36]	; 0x24
  401654:	420d      	tst	r5, r1
  401656:	d0c8      	beq.n	4015ea <PIOA_Handler+0x2e>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  401658:	6af3      	ldr	r3, [r6, #44]	; 0x2c
  40165a:	4798      	blx	r3
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
  40165c:	6a73      	ldr	r3, [r6, #36]	; 0x24

	/* Check pending events */
	if (status != 0) {
		/* Find triggering source */
		i = 0;
		while (status != 0) {
  40165e:	439d      	bics	r5, r3
  401660:	d0d3      	beq.n	40160a <PIOA_Handler+0x4e>
  401662:	e7c2      	b.n	4015ea <PIOA_Handler+0x2e>
			/* Source is configured on the same controller */
			if (gs_interrupt_sources[i].id == ul_id) {
				/* Source has PIOs whose statuses have changed */
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  401664:	6b71      	ldr	r1, [r6, #52]	; 0x34
  401666:	420d      	tst	r5, r1
  401668:	d0c3      	beq.n	4015f2 <PIOA_Handler+0x36>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  40166a:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
  40166c:	4798      	blx	r3
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
  40166e:	6b73      	ldr	r3, [r6, #52]	; 0x34

	/* Check pending events */
	if (status != 0) {
		/* Find triggering source */
		i = 0;
		while (status != 0) {
  401670:	439d      	bics	r5, r3
  401672:	d0ca      	beq.n	40160a <PIOA_Handler+0x4e>
  401674:	e7bd      	b.n	4015f2 <PIOA_Handler+0x36>
			/* Source is configured on the same controller */
			if (gs_interrupt_sources[i].id == ul_id) {
				/* Source has PIOs whose statuses have changed */
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  401676:	6c71      	ldr	r1, [r6, #68]	; 0x44
  401678:	420d      	tst	r5, r1
  40167a:	d0be      	beq.n	4015fa <PIOA_Handler+0x3e>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  40167c:	6cf3      	ldr	r3, [r6, #76]	; 0x4c
  40167e:	4798      	blx	r3
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
  401680:	6c73      	ldr	r3, [r6, #68]	; 0x44

	/* Check pending events */
	if (status != 0) {
		/* Find triggering source */
		i = 0;
		while (status != 0) {
  401682:	439d      	bics	r5, r3
  401684:	d0c1      	beq.n	40160a <PIOA_Handler+0x4e>
  401686:	e7b8      	b.n	4015fa <PIOA_Handler+0x3e>
			/* Source is configured on the same controller */
			if (gs_interrupt_sources[i].id == ul_id) {
				/* Source has PIOs whose statuses have changed */
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  401688:	6d71      	ldr	r1, [r6, #84]	; 0x54
  40168a:	420d      	tst	r5, r1
  40168c:	d0b9      	beq.n	401602 <PIOA_Handler+0x46>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  40168e:	6df3      	ldr	r3, [r6, #92]	; 0x5c
  401690:	4798      	blx	r3
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
  401692:	6d73      	ldr	r3, [r6, #84]	; 0x54

	/* Check pending events */
	if (status != 0) {
		/* Find triggering source */
		i = 0;
		while (status != 0) {
  401694:	439d      	bics	r5, r3
  401696:	d0b8      	beq.n	40160a <PIOA_Handler+0x4e>
  401698:	e7b3      	b.n	401602 <PIOA_Handler+0x46>
  40169a:	bf00      	nop
  40169c:	004013e1 	.word	0x004013e1
  4016a0:	400e0e00 	.word	0x400e0e00
  4016a4:	004013e5 	.word	0x004013e5
  4016a8:	20001200 	.word	0x20001200
  4016ac:	200012c0 	.word	0x200012c0
  4016b0:	200011fc 	.word	0x200011fc

004016b4 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
  4016b4:	b570      	push	{r4, r5, r6, lr}
{
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
  4016b6:	4b37      	ldr	r3, [pc, #220]	; (401794 <PIOB_Handler+0xe0>)
  4016b8:	4837      	ldr	r0, [pc, #220]	; (401798 <PIOB_Handler+0xe4>)
  4016ba:	4798      	blx	r3
	status &= pio_get_interrupt_mask(p_pio);
  4016bc:	4b37      	ldr	r3, [pc, #220]	; (40179c <PIOB_Handler+0xe8>)
{
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
  4016be:	4604      	mov	r4, r0
	status &= pio_get_interrupt_mask(p_pio);
  4016c0:	4835      	ldr	r0, [pc, #212]	; (401798 <PIOB_Handler+0xe4>)
  4016c2:	4798      	blx	r3

	/* Check pending events */
	if (status != 0) {
  4016c4:	ea10 0504 	ands.w	r5, r0, r4
  4016c8:	d01b      	beq.n	401702 <PIOB_Handler+0x4e>
		/* Find triggering source */
		i = 0;
		while (status != 0) {
			/* Source is configured on the same controller */
			if (gs_interrupt_sources[i].id == ul_id) {
  4016ca:	4c35      	ldr	r4, [pc, #212]	; (4017a0 <PIOB_Handler+0xec>)
  4016cc:	6820      	ldr	r0, [r4, #0]
  4016ce:	280c      	cmp	r0, #12
  4016d0:	d023      	beq.n	40171a <PIOB_Handler+0x66>
  4016d2:	6920      	ldr	r0, [r4, #16]
  4016d4:	4e32      	ldr	r6, [pc, #200]	; (4017a0 <PIOB_Handler+0xec>)
  4016d6:	280c      	cmp	r0, #12
  4016d8:	d02e      	beq.n	401738 <PIOB_Handler+0x84>
  4016da:	6a20      	ldr	r0, [r4, #32]
  4016dc:	4e30      	ldr	r6, [pc, #192]	; (4017a0 <PIOB_Handler+0xec>)
  4016de:	280c      	cmp	r0, #12
  4016e0:	d033      	beq.n	40174a <PIOB_Handler+0x96>
  4016e2:	6b20      	ldr	r0, [r4, #48]	; 0x30
  4016e4:	4e2e      	ldr	r6, [pc, #184]	; (4017a0 <PIOB_Handler+0xec>)
  4016e6:	280c      	cmp	r0, #12
  4016e8:	d038      	beq.n	40175c <PIOB_Handler+0xa8>
  4016ea:	6c20      	ldr	r0, [r4, #64]	; 0x40
  4016ec:	4e2c      	ldr	r6, [pc, #176]	; (4017a0 <PIOB_Handler+0xec>)
  4016ee:	280c      	cmp	r0, #12
  4016f0:	d03d      	beq.n	40176e <PIOB_Handler+0xba>
  4016f2:	6d20      	ldr	r0, [r4, #80]	; 0x50
  4016f4:	4e2a      	ldr	r6, [pc, #168]	; (4017a0 <PIOB_Handler+0xec>)
  4016f6:	280c      	cmp	r0, #12
  4016f8:	d042      	beq.n	401780 <PIOB_Handler+0xcc>
  4016fa:	6e20      	ldr	r0, [r4, #96]	; 0x60
  4016fc:	4b28      	ldr	r3, [pc, #160]	; (4017a0 <PIOB_Handler+0xec>)
  4016fe:	280c      	cmp	r0, #12
  401700:	d014      	beq.n	40172c <PIOB_Handler+0x78>
		}
	}

	/* Check capture events */
#if (SAM3S || SAM4S || SAM4E)
	if (pio_capture_enable_flag) {
  401702:	4b28      	ldr	r3, [pc, #160]	; (4017a4 <PIOB_Handler+0xf0>)
  401704:	681b      	ldr	r3, [r3, #0]
  401706:	b13b      	cbz	r3, 401718 <PIOB_Handler+0x64>
		if (pio_capture_handler) {
  401708:	4b27      	ldr	r3, [pc, #156]	; (4017a8 <PIOB_Handler+0xf4>)
  40170a:	681b      	ldr	r3, [r3, #0]
  40170c:	b11b      	cbz	r3, 401716 <PIOB_Handler+0x62>
			pio_capture_handler(p_pio);
  40170e:	4822      	ldr	r0, [pc, #136]	; (401798 <PIOB_Handler+0xe4>)
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
    pio_handler_process(PIOB, ID_PIOB);
}
  401710:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}

	/* Check capture events */
#if (SAM3S || SAM4S || SAM4E)
	if (pio_capture_enable_flag) {
		if (pio_capture_handler) {
			pio_capture_handler(p_pio);
  401714:	4718      	bx	r3
  401716:	bd70      	pop	{r4, r5, r6, pc}
  401718:	bd70      	pop	{r4, r5, r6, pc}
		i = 0;
		while (status != 0) {
			/* Source is configured on the same controller */
			if (gs_interrupt_sources[i].id == ul_id) {
				/* Source has PIOs whose statuses have changed */
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  40171a:	6861      	ldr	r1, [r4, #4]
  40171c:	420d      	tst	r5, r1
  40171e:	d0d8      	beq.n	4016d2 <PIOB_Handler+0x1e>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  401720:	68e3      	ldr	r3, [r4, #12]
  401722:	4798      	blx	r3
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
  401724:	6863      	ldr	r3, [r4, #4]

	/* Check pending events */
	if (status != 0) {
		/* Find triggering source */
		i = 0;
		while (status != 0) {
  401726:	439d      	bics	r5, r3
  401728:	d0eb      	beq.n	401702 <PIOB_Handler+0x4e>
  40172a:	e7d2      	b.n	4016d2 <PIOB_Handler+0x1e>
			/* Source is configured on the same controller */
			if (gs_interrupt_sources[i].id == ul_id) {
				/* Source has PIOs whose statuses have changed */
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  40172c:	6e59      	ldr	r1, [r3, #100]	; 0x64
  40172e:	4229      	tst	r1, r5
  401730:	d0e7      	beq.n	401702 <PIOB_Handler+0x4e>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  401732:	6edb      	ldr	r3, [r3, #108]	; 0x6c
  401734:	4798      	blx	r3
  401736:	e7e4      	b.n	401702 <PIOB_Handler+0x4e>
		i = 0;
		while (status != 0) {
			/* Source is configured on the same controller */
			if (gs_interrupt_sources[i].id == ul_id) {
				/* Source has PIOs whose statuses have changed */
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  401738:	6971      	ldr	r1, [r6, #20]
  40173a:	420d      	tst	r5, r1
  40173c:	d0cd      	beq.n	4016da <PIOB_Handler+0x26>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  40173e:	69f3      	ldr	r3, [r6, #28]
  401740:	4798      	blx	r3
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
  401742:	6973      	ldr	r3, [r6, #20]

	/* Check pending events */
	if (status != 0) {
		/* Find triggering source */
		i = 0;
		while (status != 0) {
  401744:	439d      	bics	r5, r3
  401746:	d0dc      	beq.n	401702 <PIOB_Handler+0x4e>
  401748:	e7c7      	b.n	4016da <PIOB_Handler+0x26>
			/* Source is configured on the same controller */
			if (gs_interrupt_sources[i].id == ul_id) {
				/* Source has PIOs whose statuses have changed */
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  40174a:	6a71      	ldr	r1, [r6, #36]	; 0x24
  40174c:	420d      	tst	r5, r1
  40174e:	d0c8      	beq.n	4016e2 <PIOB_Handler+0x2e>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  401750:	6af3      	ldr	r3, [r6, #44]	; 0x2c
  401752:	4798      	blx	r3
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
  401754:	6a73      	ldr	r3, [r6, #36]	; 0x24

	/* Check pending events */
	if (status != 0) {
		/* Find triggering source */
		i = 0;
		while (status != 0) {
  401756:	439d      	bics	r5, r3
  401758:	d0d3      	beq.n	401702 <PIOB_Handler+0x4e>
  40175a:	e7c2      	b.n	4016e2 <PIOB_Handler+0x2e>
			/* Source is configured on the same controller */
			if (gs_interrupt_sources[i].id == ul_id) {
				/* Source has PIOs whose statuses have changed */
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  40175c:	6b71      	ldr	r1, [r6, #52]	; 0x34
  40175e:	420d      	tst	r5, r1
  401760:	d0c3      	beq.n	4016ea <PIOB_Handler+0x36>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  401762:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
  401764:	4798      	blx	r3
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
  401766:	6b73      	ldr	r3, [r6, #52]	; 0x34

	/* Check pending events */
	if (status != 0) {
		/* Find triggering source */
		i = 0;
		while (status != 0) {
  401768:	439d      	bics	r5, r3
  40176a:	d0ca      	beq.n	401702 <PIOB_Handler+0x4e>
  40176c:	e7bd      	b.n	4016ea <PIOB_Handler+0x36>
			/* Source is configured on the same controller */
			if (gs_interrupt_sources[i].id == ul_id) {
				/* Source has PIOs whose statuses have changed */
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  40176e:	6c71      	ldr	r1, [r6, #68]	; 0x44
  401770:	420d      	tst	r5, r1
  401772:	d0be      	beq.n	4016f2 <PIOB_Handler+0x3e>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  401774:	6cf3      	ldr	r3, [r6, #76]	; 0x4c
  401776:	4798      	blx	r3
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
  401778:	6c73      	ldr	r3, [r6, #68]	; 0x44

	/* Check pending events */
	if (status != 0) {
		/* Find triggering source */
		i = 0;
		while (status != 0) {
  40177a:	439d      	bics	r5, r3
  40177c:	d0c1      	beq.n	401702 <PIOB_Handler+0x4e>
  40177e:	e7b8      	b.n	4016f2 <PIOB_Handler+0x3e>
			/* Source is configured on the same controller */
			if (gs_interrupt_sources[i].id == ul_id) {
				/* Source has PIOs whose statuses have changed */
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  401780:	6d71      	ldr	r1, [r6, #84]	; 0x54
  401782:	420d      	tst	r5, r1
  401784:	d0b9      	beq.n	4016fa <PIOB_Handler+0x46>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  401786:	6df3      	ldr	r3, [r6, #92]	; 0x5c
  401788:	4798      	blx	r3
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
  40178a:	6d73      	ldr	r3, [r6, #84]	; 0x54

	/* Check pending events */
	if (status != 0) {
		/* Find triggering source */
		i = 0;
		while (status != 0) {
  40178c:	439d      	bics	r5, r3
  40178e:	d0b8      	beq.n	401702 <PIOB_Handler+0x4e>
  401790:	e7b3      	b.n	4016fa <PIOB_Handler+0x46>
  401792:	bf00      	nop
  401794:	004013e1 	.word	0x004013e1
  401798:	400e1000 	.word	0x400e1000
  40179c:	004013e5 	.word	0x004013e5
  4017a0:	20001200 	.word	0x20001200
  4017a4:	200012c0 	.word	0x200012c0
  4017a8:	200011fc 	.word	0x200011fc

004017ac <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
  4017ac:	b570      	push	{r4, r5, r6, lr}
{
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
  4017ae:	4b37      	ldr	r3, [pc, #220]	; (40188c <PIOC_Handler+0xe0>)
  4017b0:	4837      	ldr	r0, [pc, #220]	; (401890 <PIOC_Handler+0xe4>)
  4017b2:	4798      	blx	r3
	status &= pio_get_interrupt_mask(p_pio);
  4017b4:	4b37      	ldr	r3, [pc, #220]	; (401894 <PIOC_Handler+0xe8>)
{
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
  4017b6:	4604      	mov	r4, r0
	status &= pio_get_interrupt_mask(p_pio);
  4017b8:	4835      	ldr	r0, [pc, #212]	; (401890 <PIOC_Handler+0xe4>)
  4017ba:	4798      	blx	r3

	/* Check pending events */
	if (status != 0) {
  4017bc:	ea10 0504 	ands.w	r5, r0, r4
  4017c0:	d01b      	beq.n	4017fa <PIOC_Handler+0x4e>
		/* Find triggering source */
		i = 0;
		while (status != 0) {
			/* Source is configured on the same controller */
			if (gs_interrupt_sources[i].id == ul_id) {
  4017c2:	4c35      	ldr	r4, [pc, #212]	; (401898 <PIOC_Handler+0xec>)
  4017c4:	6820      	ldr	r0, [r4, #0]
  4017c6:	280d      	cmp	r0, #13
  4017c8:	d023      	beq.n	401812 <PIOC_Handler+0x66>
  4017ca:	6920      	ldr	r0, [r4, #16]
  4017cc:	4e32      	ldr	r6, [pc, #200]	; (401898 <PIOC_Handler+0xec>)
  4017ce:	280d      	cmp	r0, #13
  4017d0:	d02e      	beq.n	401830 <PIOC_Handler+0x84>
  4017d2:	6a20      	ldr	r0, [r4, #32]
  4017d4:	4e30      	ldr	r6, [pc, #192]	; (401898 <PIOC_Handler+0xec>)
  4017d6:	280d      	cmp	r0, #13
  4017d8:	d033      	beq.n	401842 <PIOC_Handler+0x96>
  4017da:	6b20      	ldr	r0, [r4, #48]	; 0x30
  4017dc:	4e2e      	ldr	r6, [pc, #184]	; (401898 <PIOC_Handler+0xec>)
  4017de:	280d      	cmp	r0, #13
  4017e0:	d038      	beq.n	401854 <PIOC_Handler+0xa8>
  4017e2:	6c20      	ldr	r0, [r4, #64]	; 0x40
  4017e4:	4e2c      	ldr	r6, [pc, #176]	; (401898 <PIOC_Handler+0xec>)
  4017e6:	280d      	cmp	r0, #13
  4017e8:	d03d      	beq.n	401866 <PIOC_Handler+0xba>
  4017ea:	6d20      	ldr	r0, [r4, #80]	; 0x50
  4017ec:	4e2a      	ldr	r6, [pc, #168]	; (401898 <PIOC_Handler+0xec>)
  4017ee:	280d      	cmp	r0, #13
  4017f0:	d042      	beq.n	401878 <PIOC_Handler+0xcc>
  4017f2:	6e20      	ldr	r0, [r4, #96]	; 0x60
  4017f4:	4b28      	ldr	r3, [pc, #160]	; (401898 <PIOC_Handler+0xec>)
  4017f6:	280d      	cmp	r0, #13
  4017f8:	d014      	beq.n	401824 <PIOC_Handler+0x78>
		}
	}

	/* Check capture events */
#if (SAM3S || SAM4S || SAM4E)
	if (pio_capture_enable_flag) {
  4017fa:	4b28      	ldr	r3, [pc, #160]	; (40189c <PIOC_Handler+0xf0>)
  4017fc:	681b      	ldr	r3, [r3, #0]
  4017fe:	b13b      	cbz	r3, 401810 <PIOC_Handler+0x64>
		if (pio_capture_handler) {
  401800:	4b27      	ldr	r3, [pc, #156]	; (4018a0 <PIOC_Handler+0xf4>)
  401802:	681b      	ldr	r3, [r3, #0]
  401804:	b11b      	cbz	r3, 40180e <PIOC_Handler+0x62>
			pio_capture_handler(p_pio);
  401806:	4822      	ldr	r0, [pc, #136]	; (401890 <PIOC_Handler+0xe4>)
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
	pio_handler_process(PIOC, ID_PIOC);
}
  401808:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}

	/* Check capture events */
#if (SAM3S || SAM4S || SAM4E)
	if (pio_capture_enable_flag) {
		if (pio_capture_handler) {
			pio_capture_handler(p_pio);
  40180c:	4718      	bx	r3
  40180e:	bd70      	pop	{r4, r5, r6, pc}
  401810:	bd70      	pop	{r4, r5, r6, pc}
		i = 0;
		while (status != 0) {
			/* Source is configured on the same controller */
			if (gs_interrupt_sources[i].id == ul_id) {
				/* Source has PIOs whose statuses have changed */
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  401812:	6861      	ldr	r1, [r4, #4]
  401814:	420d      	tst	r5, r1
  401816:	d0d8      	beq.n	4017ca <PIOC_Handler+0x1e>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  401818:	68e3      	ldr	r3, [r4, #12]
  40181a:	4798      	blx	r3
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
  40181c:	6863      	ldr	r3, [r4, #4]

	/* Check pending events */
	if (status != 0) {
		/* Find triggering source */
		i = 0;
		while (status != 0) {
  40181e:	439d      	bics	r5, r3
  401820:	d0eb      	beq.n	4017fa <PIOC_Handler+0x4e>
  401822:	e7d2      	b.n	4017ca <PIOC_Handler+0x1e>
			/* Source is configured on the same controller */
			if (gs_interrupt_sources[i].id == ul_id) {
				/* Source has PIOs whose statuses have changed */
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  401824:	6e59      	ldr	r1, [r3, #100]	; 0x64
  401826:	4229      	tst	r1, r5
  401828:	d0e7      	beq.n	4017fa <PIOC_Handler+0x4e>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  40182a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
  40182c:	4798      	blx	r3
  40182e:	e7e4      	b.n	4017fa <PIOC_Handler+0x4e>
		i = 0;
		while (status != 0) {
			/* Source is configured on the same controller */
			if (gs_interrupt_sources[i].id == ul_id) {
				/* Source has PIOs whose statuses have changed */
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  401830:	6971      	ldr	r1, [r6, #20]
  401832:	420d      	tst	r5, r1
  401834:	d0cd      	beq.n	4017d2 <PIOC_Handler+0x26>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  401836:	69f3      	ldr	r3, [r6, #28]
  401838:	4798      	blx	r3
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
  40183a:	6973      	ldr	r3, [r6, #20]

	/* Check pending events */
	if (status != 0) {
		/* Find triggering source */
		i = 0;
		while (status != 0) {
  40183c:	439d      	bics	r5, r3
  40183e:	d0dc      	beq.n	4017fa <PIOC_Handler+0x4e>
  401840:	e7c7      	b.n	4017d2 <PIOC_Handler+0x26>
			/* Source is configured on the same controller */
			if (gs_interrupt_sources[i].id == ul_id) {
				/* Source has PIOs whose statuses have changed */
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  401842:	6a71      	ldr	r1, [r6, #36]	; 0x24
  401844:	420d      	tst	r5, r1
  401846:	d0c8      	beq.n	4017da <PIOC_Handler+0x2e>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  401848:	6af3      	ldr	r3, [r6, #44]	; 0x2c
  40184a:	4798      	blx	r3
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
  40184c:	6a73      	ldr	r3, [r6, #36]	; 0x24

	/* Check pending events */
	if (status != 0) {
		/* Find triggering source */
		i = 0;
		while (status != 0) {
  40184e:	439d      	bics	r5, r3
  401850:	d0d3      	beq.n	4017fa <PIOC_Handler+0x4e>
  401852:	e7c2      	b.n	4017da <PIOC_Handler+0x2e>
			/* Source is configured on the same controller */
			if (gs_interrupt_sources[i].id == ul_id) {
				/* Source has PIOs whose statuses have changed */
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  401854:	6b71      	ldr	r1, [r6, #52]	; 0x34
  401856:	420d      	tst	r5, r1
  401858:	d0c3      	beq.n	4017e2 <PIOC_Handler+0x36>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  40185a:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
  40185c:	4798      	blx	r3
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
  40185e:	6b73      	ldr	r3, [r6, #52]	; 0x34

	/* Check pending events */
	if (status != 0) {
		/* Find triggering source */
		i = 0;
		while (status != 0) {
  401860:	439d      	bics	r5, r3
  401862:	d0ca      	beq.n	4017fa <PIOC_Handler+0x4e>
  401864:	e7bd      	b.n	4017e2 <PIOC_Handler+0x36>
			/* Source is configured on the same controller */
			if (gs_interrupt_sources[i].id == ul_id) {
				/* Source has PIOs whose statuses have changed */
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  401866:	6c71      	ldr	r1, [r6, #68]	; 0x44
  401868:	420d      	tst	r5, r1
  40186a:	d0be      	beq.n	4017ea <PIOC_Handler+0x3e>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  40186c:	6cf3      	ldr	r3, [r6, #76]	; 0x4c
  40186e:	4798      	blx	r3
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
  401870:	6c73      	ldr	r3, [r6, #68]	; 0x44

	/* Check pending events */
	if (status != 0) {
		/* Find triggering source */
		i = 0;
		while (status != 0) {
  401872:	439d      	bics	r5, r3
  401874:	d0c1      	beq.n	4017fa <PIOC_Handler+0x4e>
  401876:	e7b8      	b.n	4017ea <PIOC_Handler+0x3e>
			/* Source is configured on the same controller */
			if (gs_interrupt_sources[i].id == ul_id) {
				/* Source has PIOs whose statuses have changed */
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  401878:	6d71      	ldr	r1, [r6, #84]	; 0x54
  40187a:	420d      	tst	r5, r1
  40187c:	d0b9      	beq.n	4017f2 <PIOC_Handler+0x46>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  40187e:	6df3      	ldr	r3, [r6, #92]	; 0x5c
  401880:	4798      	blx	r3
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
  401882:	6d73      	ldr	r3, [r6, #84]	; 0x54

	/* Check pending events */
	if (status != 0) {
		/* Find triggering source */
		i = 0;
		while (status != 0) {
  401884:	439d      	bics	r5, r3
  401886:	d0b8      	beq.n	4017fa <PIOC_Handler+0x4e>
  401888:	e7b3      	b.n	4017f2 <PIOC_Handler+0x46>
  40188a:	bf00      	nop
  40188c:	004013e1 	.word	0x004013e1
  401890:	400e1200 	.word	0x400e1200
  401894:	004013e5 	.word	0x004013e5
  401898:	20001200 	.word	0x20001200
  40189c:	200012c0 	.word	0x200012c0
  4018a0:	200011fc 	.word	0x200011fc

004018a4 <pmc_switch_mck_to_pllbck>:
 */
uint32_t pmc_switch_mck_to_pllbck(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
  4018a4:	4914      	ldr	r1, [pc, #80]	; (4018f8 <pmc_switch_mck_to_pllbck+0x54>)
  4018a6:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  4018a8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  4018ac:	4318      	orrs	r0, r3
  4018ae:	6308      	str	r0, [r1, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  4018b0:	6e8b      	ldr	r3, [r1, #104]	; 0x68
  4018b2:	071b      	lsls	r3, r3, #28
  4018b4:	bf58      	it	pl
  4018b6:	f44f 6300 	movpl.w	r3, #2048	; 0x800
  4018ba:	d502      	bpl.n	4018c2 <pmc_switch_mck_to_pllbck+0x1e>
  4018bc:	e004      	b.n	4018c8 <pmc_switch_mck_to_pllbck+0x24>
			--ul_timeout) {
		if (ul_timeout == 0) {
  4018be:	3b01      	subs	r3, #1
  4018c0:	d015      	beq.n	4018ee <pmc_switch_mck_to_pllbck+0x4a>
uint32_t pmc_switch_mck_to_pllbck(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  4018c2:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  4018c4:	0710      	lsls	r0, r2, #28
  4018c6:	d5fa      	bpl.n	4018be <pmc_switch_mck_to_pllbck+0x1a>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
  4018c8:	490b      	ldr	r1, [pc, #44]	; (4018f8 <pmc_switch_mck_to_pllbck+0x54>)
  4018ca:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  4018cc:	f043 0303 	orr.w	r3, r3, #3
  4018d0:	630b      	str	r3, [r1, #48]	; 0x30
			PMC_MCKR_CSS_PLLB_CLK;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  4018d2:	6e88      	ldr	r0, [r1, #104]	; 0x68
  4018d4:	f010 0008 	ands.w	r0, r0, #8
  4018d8:	bf08      	it	eq
  4018da:	f44f 6300 	moveq.w	r3, #2048	; 0x800
  4018de:	d002      	beq.n	4018e6 <pmc_switch_mck_to_pllbck+0x42>
  4018e0:	e007      	b.n	4018f2 <pmc_switch_mck_to_pllbck+0x4e>
			--ul_timeout) {
		if (ul_timeout == 0) {
  4018e2:	3b01      	subs	r3, #1
  4018e4:	d003      	beq.n	4018ee <pmc_switch_mck_to_pllbck+0x4a>
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLB_CLK;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  4018e6:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  4018e8:	0712      	lsls	r2, r2, #28
  4018ea:	d5fa      	bpl.n	4018e2 <pmc_switch_mck_to_pllbck+0x3e>
			return 1;
		}
	}

	return 0;
}
  4018ec:	4770      	bx	lr

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
			return 1;
  4018ee:	2001      	movs	r0, #1
  4018f0:	4770      	bx	lr
		if (ul_timeout == 0) {
			return 1;
		}
	}

	return 0;
  4018f2:	2000      	movs	r0, #0
  4018f4:	4770      	bx	lr
  4018f6:	bf00      	nop
  4018f8:	400e0400 	.word	0x400e0400

004018fc <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
  4018fc:	b9c0      	cbnz	r0, 401930 <pmc_switch_mainck_to_xtal+0x34>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  4018fe:	4a10      	ldr	r2, [pc, #64]	; (401940 <pmc_switch_mainck_to_xtal+0x44>)
  401900:	6a13      	ldr	r3, [r2, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  401902:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
  401906:	f023 0303 	bic.w	r3, r3, #3
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
  40190a:	0209      	lsls	r1, r1, #8
  40190c:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  401910:	b289      	uxth	r1, r1
  401912:	f043 0301 	orr.w	r3, r3, #1
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  401916:	430b      	orrs	r3, r1
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  401918:	6213      	str	r3, [r2, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  40191a:	6e93      	ldr	r3, [r2, #104]	; 0x68
  40191c:	4908      	ldr	r1, [pc, #32]	; (401940 <pmc_switch_mainck_to_xtal+0x44>)
  40191e:	07db      	lsls	r3, r3, #31
  401920:	d5fb      	bpl.n	40191a <pmc_switch_mainck_to_xtal+0x1e>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
  401922:	6a0b      	ldr	r3, [r1, #32]
  401924:	f043 739b 	orr.w	r3, r3, #20316160	; 0x1360000
  401928:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
  40192c:	620b      	str	r3, [r1, #32]
  40192e:	4770      	bx	lr
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  401930:	4903      	ldr	r1, [pc, #12]	; (401940 <pmc_switch_mainck_to_xtal+0x44>)
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  401932:	4a04      	ldr	r2, [pc, #16]	; (401944 <pmc_switch_mainck_to_xtal+0x48>)
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  401934:	6a08      	ldr	r0, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  401936:	4b04      	ldr	r3, [pc, #16]	; (401948 <pmc_switch_mainck_to_xtal+0x4c>)
  401938:	4002      	ands	r2, r0
  40193a:	4313      	orrs	r3, r2
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  40193c:	620b      	str	r3, [r1, #32]
  40193e:	4770      	bx	lr
  401940:	400e0400 	.word	0x400e0400
  401944:	fec8fffc 	.word	0xfec8fffc
  401948:	01370002 	.word	0x01370002

0040194c <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
  40194c:	4b02      	ldr	r3, [pc, #8]	; (401958 <pmc_osc_is_ready_mainck+0xc>)
  40194e:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  401950:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
  401954:	4770      	bx	lr
  401956:	bf00      	nop
  401958:	400e0400 	.word	0x400e0400

0040195c <pmc_enable_pllack>:
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_PLLAEN(diva) |
			CKGR_PLLAR_PLLACOUNT(pllacount) | CKGR_PLLAR_MULA(mula);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_DIVA(diva) |
			CKGR_PLLAR_PLLACOUNT(pllacount) | CKGR_PLLAR_MULA(mula);
  40195c:	4b0b      	ldr	r3, [pc, #44]	; (40198c <pmc_enable_pllack+0x30>)
  40195e:	0400      	lsls	r0, r0, #16
  401960:	4003      	ands	r3, r0
  401962:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000

#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_PLLAEN(diva) |
			CKGR_PLLAR_PLLACOUNT(pllacount) | CKGR_PLLAR_MULA(mula);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_DIVA(diva) |
  401966:	b2d2      	uxtb	r2, r2
			CKGR_PLLAR_PLLACOUNT(pllacount) | CKGR_PLLAR_MULA(mula);
  401968:	0209      	lsls	r1, r1, #8
 * \param mula PLLA multiplier.
 * \param pllacount PLLA counter.
 * \param diva Divider.
 */
void pmc_enable_pllack(uint32_t mula, uint32_t pllacount, uint32_t diva)
{
  40196a:	b410      	push	{r4}
  40196c:	431a      	orrs	r2, r3
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
  40196e:	4c08      	ldr	r4, [pc, #32]	; (401990 <pmc_enable_pllack+0x34>)
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_PLLAEN(diva) |
			CKGR_PLLAR_PLLACOUNT(pllacount) | CKGR_PLLAR_MULA(mula);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_DIVA(diva) |
			CKGR_PLLAR_PLLACOUNT(pllacount) | CKGR_PLLAR_MULA(mula);
  401970:	f401 517c 	and.w	r1, r1, #16128	; 0x3f00
  401974:	430a      	orrs	r2, r1
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
  401976:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
  40197a:	62a3      	str	r3, [r4, #40]	; 0x28
			CKGR_PLLAR_PLLACOUNT(pllacount) | CKGR_PLLAR_MULA(mula);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_DIVA(diva) |
			CKGR_PLLAR_PLLACOUNT(pllacount) | CKGR_PLLAR_MULA(mula);
#endif
	while ((PMC->PMC_SR & PMC_SR_LOCKA) == 0);
  40197c:	4620      	mov	r0, r4

#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_PLLAEN(diva) |
			CKGR_PLLAR_PLLACOUNT(pllacount) | CKGR_PLLAR_MULA(mula);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_DIVA(diva) |
  40197e:	62a2      	str	r2, [r4, #40]	; 0x28
			CKGR_PLLAR_PLLACOUNT(pllacount) | CKGR_PLLAR_MULA(mula);
#endif
	while ((PMC->PMC_SR & PMC_SR_LOCKA) == 0);
  401980:	6e83      	ldr	r3, [r0, #104]	; 0x68
  401982:	079b      	lsls	r3, r3, #30
  401984:	d5fc      	bpl.n	401980 <pmc_enable_pllack+0x24>
}
  401986:	f85d 4b04 	ldr.w	r4, [sp], #4
  40198a:	4770      	bx	lr
  40198c:	07ff0000 	.word	0x07ff0000
  401990:	400e0400 	.word	0x400e0400

00401994 <pmc_disable_pllbck>:
/**
 * \brief Disable PLLB clock.
 */
void pmc_disable_pllbck(void)
{
	PMC->CKGR_PLLBR = CKGR_PLLBR_MULB(0);
  401994:	4b01      	ldr	r3, [pc, #4]	; (40199c <pmc_disable_pllbck+0x8>)
  401996:	2200      	movs	r2, #0
  401998:	62da      	str	r2, [r3, #44]	; 0x2c
  40199a:	4770      	bx	lr
  40199c:	400e0400 	.word	0x400e0400

004019a0 <pmc_is_locked_pllbck>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllbck(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKB);
  4019a0:	4b02      	ldr	r3, [pc, #8]	; (4019ac <pmc_is_locked_pllbck+0xc>)
  4019a2:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  4019a4:	f000 0004 	and.w	r0, r0, #4
  4019a8:	4770      	bx	lr
  4019aa:	bf00      	nop
  4019ac:	400e0400 	.word	0x400e0400

004019b0 <pmc_enable_periph_clk>:
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
  4019b0:	2822      	cmp	r0, #34	; 0x22
  4019b2:	d817      	bhi.n	4019e4 <pmc_enable_periph_clk+0x34>
		return 1;
	}

	if (ul_id < 32) {
  4019b4:	281f      	cmp	r0, #31
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
  4019b6:	490d      	ldr	r1, [pc, #52]	; (4019ec <pmc_enable_periph_clk+0x3c>)
{
	if (ul_id > MAX_PERIPH_ID) {
		return 1;
	}

	if (ul_id < 32) {
  4019b8:	d808      	bhi.n	4019cc <pmc_enable_periph_clk+0x1c>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
  4019ba:	2301      	movs	r3, #1
  4019bc:	698a      	ldr	r2, [r1, #24]
  4019be:	4083      	lsls	r3, r0
  4019c0:	401a      	ands	r2, r3
  4019c2:	4293      	cmp	r3, r2
  4019c4:	d010      	beq.n	4019e8 <pmc_enable_periph_clk+0x38>
			PMC->PMC_PCER0 = 1 << ul_id;
  4019c6:	610b      	str	r3, [r1, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
  4019c8:	2000      	movs	r0, #0
  4019ca:	4770      	bx	lr
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
			PMC->PMC_PCER0 = 1 << ul_id;
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP || SAMG55 || SAMV71 || SAMV70 || SAME70 || SAMS70)
	} else {
		ul_id -= 32;
  4019cc:	3820      	subs	r0, #32
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
  4019ce:	2301      	movs	r3, #1
  4019d0:	f8d1 2108 	ldr.w	r2, [r1, #264]	; 0x108
  4019d4:	4083      	lsls	r3, r0
  4019d6:	401a      	ands	r2, r3
  4019d8:	4293      	cmp	r3, r2
  4019da:	d005      	beq.n	4019e8 <pmc_enable_periph_clk+0x38>
			PMC->PMC_PCER1 = 1 << ul_id;
  4019dc:	f8c1 3100 	str.w	r3, [r1, #256]	; 0x100
		}
#endif
	}

	return 0;
  4019e0:	2000      	movs	r0, #0
  4019e2:	4770      	bx	lr
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
		return 1;
  4019e4:	2001      	movs	r0, #1
  4019e6:	4770      	bx	lr
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
  4019e8:	2000      	movs	r0, #0
}
  4019ea:	4770      	bx	lr
  4019ec:	400e0400 	.word	0x400e0400

004019f0 <twi_master_init>:
 * \param p_opt Options for initializing the TWI module (see \ref twi_options_t).
 *
 * \return TWI_SUCCESS if initialization is complete, error code otherwise.
 */
uint32_t twi_master_init(Twi *p_twi, const twi_options_t *p_opt)
{
  4019f0:	b430      	push	{r4, r5}
	uint32_t status = TWI_SUCCESS;

	/* Disable TWI interrupts */
	p_twi->TWI_IDR = ~0UL;
  4019f2:	f04f 33ff 	mov.w	r3, #4294967295
  4019f6:	6283      	str	r3, [r0, #40]	; 0x28
 * \param p_twi Pointer to a TWI instance.
 */
void twi_reset(Twi *p_twi)
{
	/* Set SWRST bit to reset TWI peripheral */
	p_twi->TWI_CR = TWI_CR_SWRST;
  4019f8:	2380      	movs	r3, #128	; 0x80

	/* Disable TWI interrupts */
	p_twi->TWI_IDR = ~0UL;

	/* Dummy read in status register */
	p_twi->TWI_SR;
  4019fa:	6a02      	ldr	r2, [r0, #32]
 * \param p_twi Pointer to a TWI instance.
 */
void twi_reset(Twi *p_twi)
{
	/* Set SWRST bit to reset TWI peripheral */
	p_twi->TWI_CR = TWI_CR_SWRST;
  4019fc:	6003      	str	r3, [r0, #0]
 * \param p_twi Pointer to a TWI instance.
 */
void twi_enable_master_mode(Twi *p_twi)
{
	/* Set Master Disable bit and Slave Disable bit */
	p_twi->TWI_CR = TWI_CR_MSDIS;
  4019fe:	2208      	movs	r2, #8
	p_twi->TWI_CR = TWI_CR_SVDIS;
  401a00:	2320      	movs	r3, #32

	/* Set Master Enable bit */
	p_twi->TWI_CR = TWI_CR_MSEN;
  401a02:	2404      	movs	r4, #4
 */
void twi_reset(Twi *p_twi)
{
	/* Set SWRST bit to reset TWI peripheral */
	p_twi->TWI_CR = TWI_CR_SWRST;
	p_twi->TWI_RHR;
  401a04:	6b05      	ldr	r5, [r0, #48]	; 0x30
 * \param p_twi Pointer to a TWI instance.
 */
void twi_enable_master_mode(Twi *p_twi)
{
	/* Set Master Disable bit and Slave Disable bit */
	p_twi->TWI_CR = TWI_CR_MSDIS;
  401a06:	6002      	str	r2, [r0, #0]
	p_twi->TWI_CR = TWI_CR_SVDIS;
  401a08:	6003      	str	r3, [r0, #0]

	/* Set Master Enable bit */
	p_twi->TWI_CR = TWI_CR_MSEN;
  401a0a:	6004      	str	r4, [r0, #0]
	twi_reset(p_twi);

	twi_enable_master_mode(p_twi);

	/* Select the speed */
	if (twi_set_speed(p_twi, p_opt->speed, p_opt->master_clk) == FAIL) {
  401a0c:	684b      	ldr	r3, [r1, #4]
uint32_t twi_set_speed(Twi *p_twi, uint32_t ul_speed, uint32_t ul_mck)
{
	uint32_t ckdiv = 0;
	uint32_t c_lh_div;

	if (ul_speed > I2C_FAST_MODE_SPEED) {
  401a0e:	4d20      	ldr	r5, [pc, #128]	; (401a90 <twi_master_init+0xa0>)
	twi_reset(p_twi);

	twi_enable_master_mode(p_twi);

	/* Select the speed */
	if (twi_set_speed(p_twi, p_opt->speed, p_opt->master_clk) == FAIL) {
  401a10:	680a      	ldr	r2, [r1, #0]
uint32_t twi_set_speed(Twi *p_twi, uint32_t ul_speed, uint32_t ul_mck)
{
	uint32_t ckdiv = 0;
	uint32_t c_lh_div;

	if (ul_speed > I2C_FAST_MODE_SPEED) {
  401a12:	42ab      	cmp	r3, r5
  401a14:	d908      	bls.n	401a28 <twi_master_init+0x38>
	twi_enable_master_mode(p_twi);

	/* Select the speed */
	if (twi_set_speed(p_twi, p_opt->speed, p_opt->master_clk) == FAIL) {
		/* The desired speed setting is rejected */
		status = TWI_INVALID_ARGUMENT;
  401a16:	2301      	movs	r3, #1
	}

	if (p_opt->smbus == 1) {
  401a18:	7a4a      	ldrb	r2, [r1, #9]
  401a1a:	2a01      	cmp	r2, #1
		p_twi->TWI_CR = TWI_CR_QUICK;
  401a1c:	bf04      	itt	eq
  401a1e:	2240      	moveq	r2, #64	; 0x40
  401a20:	6002      	streq	r2, [r0, #0]
	}

	return status;
}
  401a22:	bc30      	pop	{r4, r5}
  401a24:	4618      	mov	r0, r3
  401a26:	4770      	bx	lr

	if (ul_speed > I2C_FAST_MODE_SPEED) {
		return FAIL;
	}

	c_lh_div = ul_mck / (ul_speed * TWI_CLK_DIVIDER) - TWI_CLK_CALC_ARGU;
  401a28:	005b      	lsls	r3, r3, #1
  401a2a:	fbb2 f3f3 	udiv	r3, r2, r3
  401a2e:	3b04      	subs	r3, #4

	/* cldiv must fit in 8 bits, ckdiv must fit in 3 bits */
	while ((c_lh_div > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
  401a30:	2bff      	cmp	r3, #255	; 0xff
  401a32:	d923      	bls.n	401a7c <twi_master_init+0x8c>
		/* Increase clock divider */
		ckdiv++;
		/* Divide cldiv value */
		c_lh_div /= TWI_CLK_DIVIDER;
  401a34:	085b      	lsrs	r3, r3, #1
	}

	c_lh_div = ul_mck / (ul_speed * TWI_CLK_DIVIDER) - TWI_CLK_CALC_ARGU;

	/* cldiv must fit in 8 bits, ckdiv must fit in 3 bits */
	while ((c_lh_div > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
  401a36:	2bff      	cmp	r3, #255	; 0xff
  401a38:	d922      	bls.n	401a80 <twi_master_init+0x90>
		/* Increase clock divider */
		ckdiv++;
		/* Divide cldiv value */
		c_lh_div /= TWI_CLK_DIVIDER;
  401a3a:	085b      	lsrs	r3, r3, #1
	}

	c_lh_div = ul_mck / (ul_speed * TWI_CLK_DIVIDER) - TWI_CLK_CALC_ARGU;

	/* cldiv must fit in 8 bits, ckdiv must fit in 3 bits */
	while ((c_lh_div > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
  401a3c:	2bff      	cmp	r3, #255	; 0xff
  401a3e:	d921      	bls.n	401a84 <twi_master_init+0x94>
		/* Increase clock divider */
		ckdiv++;
		/* Divide cldiv value */
		c_lh_div /= TWI_CLK_DIVIDER;
  401a40:	085b      	lsrs	r3, r3, #1
	}

	c_lh_div = ul_mck / (ul_speed * TWI_CLK_DIVIDER) - TWI_CLK_CALC_ARGU;

	/* cldiv must fit in 8 bits, ckdiv must fit in 3 bits */
	while ((c_lh_div > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
  401a42:	2bff      	cmp	r3, #255	; 0xff
  401a44:	d920      	bls.n	401a88 <twi_master_init+0x98>
		/* Increase clock divider */
		ckdiv++;
		/* Divide cldiv value */
		c_lh_div /= TWI_CLK_DIVIDER;
  401a46:	085b      	lsrs	r3, r3, #1
	}

	c_lh_div = ul_mck / (ul_speed * TWI_CLK_DIVIDER) - TWI_CLK_CALC_ARGU;

	/* cldiv must fit in 8 bits, ckdiv must fit in 3 bits */
	while ((c_lh_div > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
  401a48:	2bff      	cmp	r3, #255	; 0xff
  401a4a:	d915      	bls.n	401a78 <twi_master_init+0x88>
		/* Increase clock divider */
		ckdiv++;
		/* Divide cldiv value */
		c_lh_div /= TWI_CLK_DIVIDER;
  401a4c:	085b      	lsrs	r3, r3, #1
	}

	c_lh_div = ul_mck / (ul_speed * TWI_CLK_DIVIDER) - TWI_CLK_CALC_ARGU;

	/* cldiv must fit in 8 bits, ckdiv must fit in 3 bits */
	while ((c_lh_div > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
  401a4e:	2bff      	cmp	r3, #255	; 0xff
  401a50:	d91c      	bls.n	401a8c <twi_master_init+0x9c>
		/* Increase clock divider */
		ckdiv++;
		/* Divide cldiv value */
		c_lh_div /= TWI_CLK_DIVIDER;
  401a52:	085b      	lsrs	r3, r3, #1
	}

	c_lh_div = ul_mck / (ul_speed * TWI_CLK_DIVIDER) - TWI_CLK_CALC_ARGU;

	/* cldiv must fit in 8 bits, ckdiv must fit in 3 bits */
	while ((c_lh_div > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
  401a54:	2bff      	cmp	r3, #255	; 0xff
  401a56:	d90e      	bls.n	401a76 <twi_master_init+0x86>
		/* Increase clock divider */
		ckdiv++;
		/* Divide cldiv value */
		c_lh_div /= TWI_CLK_DIVIDER;
  401a58:	085b      	lsrs	r3, r3, #1
	}

	c_lh_div = ul_mck / (ul_speed * TWI_CLK_DIVIDER) - TWI_CLK_CALC_ARGU;

	/* cldiv must fit in 8 bits, ckdiv must fit in 3 bits */
	while ((c_lh_div > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
  401a5a:	2bff      	cmp	r3, #255	; 0xff
		/* Increase clock divider */
		ckdiv++;
  401a5c:	bf98      	it	ls
  401a5e:	2407      	movls	r4, #7
	}

	c_lh_div = ul_mck / (ul_speed * TWI_CLK_DIVIDER) - TWI_CLK_CALC_ARGU;

	/* cldiv must fit in 8 bits, ckdiv must fit in 3 bits */
	while ((c_lh_div > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
  401a60:	d90a      	bls.n	401a78 <twi_master_init+0x88>
  401a62:	f44f 24e0 	mov.w	r4, #458752	; 0x70000
		c_lh_div /= TWI_CLK_DIVIDER;
	}

	/* set clock waveform generator register */
	p_twi->TWI_CWGR =
			TWI_CWGR_CLDIV(c_lh_div) | TWI_CWGR_CHDIV(c_lh_div) |
  401a66:	b2da      	uxtb	r2, r3
  401a68:	021b      	lsls	r3, r3, #8
  401a6a:	4314      	orrs	r4, r2
  401a6c:	b29b      	uxth	r3, r3
  401a6e:	4323      	orrs	r3, r4
		/* Divide cldiv value */
		c_lh_div /= TWI_CLK_DIVIDER;
	}

	/* set clock waveform generator register */
	p_twi->TWI_CWGR =
  401a70:	6103      	str	r3, [r0, #16]
 *
 * \return TWI_SUCCESS if initialization is complete, error code otherwise.
 */
uint32_t twi_master_init(Twi *p_twi, const twi_options_t *p_opt)
{
	uint32_t status = TWI_SUCCESS;
  401a72:	2300      	movs	r3, #0
  401a74:	e7d0      	b.n	401a18 <twi_master_init+0x28>
	c_lh_div = ul_mck / (ul_speed * TWI_CLK_DIVIDER) - TWI_CLK_CALC_ARGU;

	/* cldiv must fit in 8 bits, ckdiv must fit in 3 bits */
	while ((c_lh_div > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
		/* Increase clock divider */
		ckdiv++;
  401a76:	2406      	movs	r4, #6
  401a78:	0424      	lsls	r4, r4, #16
  401a7a:	e7f4      	b.n	401a66 <twi_master_init+0x76>
	}

	c_lh_div = ul_mck / (ul_speed * TWI_CLK_DIVIDER) - TWI_CLK_CALC_ARGU;

	/* cldiv must fit in 8 bits, ckdiv must fit in 3 bits */
	while ((c_lh_div > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
  401a7c:	2400      	movs	r4, #0
  401a7e:	e7f2      	b.n	401a66 <twi_master_init+0x76>
		/* Increase clock divider */
		ckdiv++;
  401a80:	2401      	movs	r4, #1
  401a82:	e7f9      	b.n	401a78 <twi_master_init+0x88>
  401a84:	2402      	movs	r4, #2
  401a86:	e7f7      	b.n	401a78 <twi_master_init+0x88>
  401a88:	2403      	movs	r4, #3
  401a8a:	e7f5      	b.n	401a78 <twi_master_init+0x88>
  401a8c:	2405      	movs	r4, #5
  401a8e:	e7f3      	b.n	401a78 <twi_master_init+0x88>
  401a90:	00061a80 	.word	0x00061a80

00401a94 <twi_master_read>:
 * \param p_packet Packet information and data (see \ref twi_packet_t).
 *
 * \return TWI_SUCCESS if all bytes were read, error code otherwise.
 */
uint32_t twi_master_read(Twi *p_twi, twi_packet_t *p_packet)
{
  401a94:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint32_t status;
	uint32_t cnt = p_packet->length;
  401a96:	68ca      	ldr	r2, [r1, #12]
	uint8_t *buffer = p_packet->buffer;
  401a98:	688d      	ldr	r5, [r1, #8]
	uint8_t stop_sent = 0;
	uint32_t timeout = TWI_TIMEOUT;;
	
	/* Check argument */
	if (cnt == 0) {
  401a9a:	2a00      	cmp	r2, #0
  401a9c:	d04d      	beq.n	401b3a <twi_master_read+0xa6>
		return TWI_INVALID_ARGUMENT;
	}

	/* Set read mode, slave address and 3 internal address byte lengths */
	p_twi->TWI_MMR = 0;
  401a9e:	2600      	movs	r6, #0
  401aa0:	6046      	str	r6, [r0, #4]
	p_twi->TWI_MMR = TWI_MMR_MREAD | TWI_MMR_DADR(p_packet->chip) |
			((p_packet->addr_length << TWI_MMR_IADRSZ_Pos) &
  401aa2:	684c      	ldr	r4, [r1, #4]
		return TWI_INVALID_ARGUMENT;
	}

	/* Set read mode, slave address and 3 internal address byte lengths */
	p_twi->TWI_MMR = 0;
	p_twi->TWI_MMR = TWI_MMR_MREAD | TWI_MMR_DADR(p_packet->chip) |
  401aa4:	7c0b      	ldrb	r3, [r1, #16]
			((p_packet->addr_length << TWI_MMR_IADRSZ_Pos) &
  401aa6:	0224      	lsls	r4, r4, #8
  401aa8:	f404 7440 	and.w	r4, r4, #768	; 0x300
		return TWI_INVALID_ARGUMENT;
	}

	/* Set read mode, slave address and 3 internal address byte lengths */
	p_twi->TWI_MMR = 0;
	p_twi->TWI_MMR = TWI_MMR_MREAD | TWI_MMR_DADR(p_packet->chip) |
  401aac:	041b      	lsls	r3, r3, #16
  401aae:	f444 5480 	orr.w	r4, r4, #4096	; 0x1000
  401ab2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
  401ab6:	4323      	orrs	r3, r4
  401ab8:	6043      	str	r3, [r0, #4]
			((p_packet->addr_length << TWI_MMR_IADRSZ_Pos) &
			TWI_MMR_IADRSZ_Msk);

	/* Set internal address for remote chip */
	p_twi->TWI_IADR = 0;
  401aba:	60c6      	str	r6, [r0, #12]
	p_twi->TWI_IADR = twi_mk_addr(p_packet->addr, p_packet->addr_length);
  401abc:	684b      	ldr	r3, [r1, #4]
 */
static uint32_t twi_mk_addr(const uint8_t *addr, int len)
{
	uint32_t val;

	if (len == 0)
  401abe:	b153      	cbz	r3, 401ad6 <twi_master_read+0x42>
		return 0;

	val = addr[0];
	if (len > 1) {
  401ac0:	2b01      	cmp	r3, #1
	uint32_t val;

	if (len == 0)
		return 0;

	val = addr[0];
  401ac2:	780e      	ldrb	r6, [r1, #0]
	if (len > 1) {
  401ac4:	dd45      	ble.n	401b52 <twi_master_read+0xbe>
		val <<= 8;
		val |= addr[1];
  401ac6:	784c      	ldrb	r4, [r1, #1]
	}
	if (len > 2) {
  401ac8:	2b02      	cmp	r3, #2
		return 0;

	val = addr[0];
	if (len > 1) {
		val <<= 8;
		val |= addr[1];
  401aca:	ea44 2406 	orr.w	r4, r4, r6, lsl #8
	}
	if (len > 2) {
  401ace:	d03b      	beq.n	401b48 <twi_master_read+0xb4>
		val <<= 8;
		val |= addr[2];
  401ad0:	7889      	ldrb	r1, [r1, #2]
  401ad2:	ea41 2304 	orr.w	r3, r1, r4, lsl #8
	/* Set internal address for remote chip */
	p_twi->TWI_IADR = 0;
	p_twi->TWI_IADR = twi_mk_addr(p_packet->addr, p_packet->addr_length);

	/* Send a START condition */
	if (cnt == 1) {
  401ad6:	2a01      	cmp	r2, #1
			((p_packet->addr_length << TWI_MMR_IADRSZ_Pos) &
			TWI_MMR_IADRSZ_Msk);

	/* Set internal address for remote chip */
	p_twi->TWI_IADR = 0;
	p_twi->TWI_IADR = twi_mk_addr(p_packet->addr, p_packet->addr_length);
  401ad8:	60c3      	str	r3, [r0, #12]

	/* Send a START condition */
	if (cnt == 1) {
  401ada:	d031      	beq.n	401b40 <twi_master_read+0xac>
		p_twi->TWI_CR = TWI_CR_START | TWI_CR_STOP;
		stop_sent = 1;
	} else {
		p_twi->TWI_CR = TWI_CR_START;
  401adc:	2301      	movs	r3, #1
  401ade:	6003      	str	r3, [r0, #0]
		stop_sent = 0;
  401ae0:	2700      	movs	r7, #0
	}

	while (cnt > 0) {
		status = p_twi->TWI_SR;
  401ae2:	6a03      	ldr	r3, [r0, #32]
		if (status & TWI_SR_NACK) {
  401ae4:	f413 7680 	ands.w	r6, r3, #256	; 0x100
		if (cnt == 1  && !stop_sent) {
			p_twi->TWI_CR = TWI_CR_STOP;
			stop_sent = 1;
		}

		if (!(status & TWI_SR_RXRDY)) {
  401ae8:	f643 2198 	movw	r1, #15000	; 0x3a98
			return TWI_ERROR_TIMEOUT;
		}
				
		/* Last byte ? */
		if (cnt == 1  && !stop_sent) {
			p_twi->TWI_CR = TWI_CR_STOP;
  401aec:	f04f 0e02 	mov.w	lr, #2
		stop_sent = 0;
	}

	while (cnt > 0) {
		status = p_twi->TWI_SR;
		if (status & TWI_SR_NACK) {
  401af0:	d111      	bne.n	401b16 <twi_master_read+0x82>
			return TWI_RECEIVE_NACK;
		}

		if (!timeout--) {
  401af2:	1e4c      	subs	r4, r1, #1
  401af4:	b351      	cbz	r1, 401b4c <twi_master_read+0xb8>
			return TWI_ERROR_TIMEOUT;
		}
				
		/* Last byte ? */
		if (cnt == 1  && !stop_sent) {
  401af6:	2a01      	cmp	r2, #1
  401af8:	d016      	beq.n	401b28 <twi_master_read+0x94>
			p_twi->TWI_CR = TWI_CR_STOP;
			stop_sent = 1;
		}

		if (!(status & TWI_SR_RXRDY)) {
  401afa:	0799      	lsls	r1, r3, #30
  401afc:	d505      	bpl.n	401b0a <twi_master_read+0x76>
			continue;
		}
		*buffer++ = p_twi->TWI_RHR;
  401afe:	6b03      	ldr	r3, [r0, #48]	; 0x30
  401b00:	702b      	strb	r3, [r5, #0]

		cnt--;
  401b02:	3a01      	subs	r2, #1
		}

		if (!(status & TWI_SR_RXRDY)) {
			continue;
		}
		*buffer++ = p_twi->TWI_RHR;
  401b04:	3501      	adds	r5, #1

		cnt--;
		timeout = TWI_TIMEOUT;
  401b06:	f643 2498 	movw	r4, #15000	; 0x3a98
	} else {
		p_twi->TWI_CR = TWI_CR_START;
		stop_sent = 0;
	}

	while (cnt > 0) {
  401b0a:	b13a      	cbz	r2, 401b1c <twi_master_read+0x88>
		if (cnt == 1  && !stop_sent) {
			p_twi->TWI_CR = TWI_CR_STOP;
			stop_sent = 1;
		}

		if (!(status & TWI_SR_RXRDY)) {
  401b0c:	4621      	mov	r1, r4
		p_twi->TWI_CR = TWI_CR_START;
		stop_sent = 0;
	}

	while (cnt > 0) {
		status = p_twi->TWI_SR;
  401b0e:	6a03      	ldr	r3, [r0, #32]
		if (status & TWI_SR_NACK) {
  401b10:	f413 7680 	ands.w	r6, r3, #256	; 0x100
  401b14:	d0ed      	beq.n	401af2 <twi_master_read+0x5e>
			return TWI_RECEIVE_NACK;
  401b16:	2605      	movs	r6, #5
	}

	p_twi->TWI_SR;

	return TWI_SUCCESS;
}
  401b18:	4630      	mov	r0, r6
  401b1a:	bdf0      	pop	{r4, r5, r6, r7, pc}

		cnt--;
		timeout = TWI_TIMEOUT;
	}

	while (!(p_twi->TWI_SR & TWI_SR_TXCOMP)) {
  401b1c:	6a03      	ldr	r3, [r0, #32]
  401b1e:	07da      	lsls	r2, r3, #31
  401b20:	d5fc      	bpl.n	401b1c <twi_master_read+0x88>
	}

	p_twi->TWI_SR;
  401b22:	6a03      	ldr	r3, [r0, #32]

	return TWI_SUCCESS;
}
  401b24:	4630      	mov	r0, r6
  401b26:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (!timeout--) {
			return TWI_ERROR_TIMEOUT;
		}
				
		/* Last byte ? */
		if (cnt == 1  && !stop_sent) {
  401b28:	b90f      	cbnz	r7, 401b2e <twi_master_read+0x9a>
			p_twi->TWI_CR = TWI_CR_STOP;
  401b2a:	f8c0 e000 	str.w	lr, [r0]
			stop_sent = 1;
		}

		if (!(status & TWI_SR_RXRDY)) {
  401b2e:	079b      	lsls	r3, r3, #30
  401b30:	f04f 0701 	mov.w	r7, #1
  401b34:	d4e3      	bmi.n	401afe <twi_master_read+0x6a>
  401b36:	4621      	mov	r1, r4
  401b38:	e7e9      	b.n	401b0e <twi_master_read+0x7a>
	uint8_t stop_sent = 0;
	uint32_t timeout = TWI_TIMEOUT;;
	
	/* Check argument */
	if (cnt == 0) {
		return TWI_INVALID_ARGUMENT;
  401b3a:	2601      	movs	r6, #1
	}

	p_twi->TWI_SR;

	return TWI_SUCCESS;
}
  401b3c:	4630      	mov	r0, r6
  401b3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	p_twi->TWI_IADR = 0;
	p_twi->TWI_IADR = twi_mk_addr(p_packet->addr, p_packet->addr_length);

	/* Send a START condition */
	if (cnt == 1) {
		p_twi->TWI_CR = TWI_CR_START | TWI_CR_STOP;
  401b40:	2303      	movs	r3, #3
  401b42:	6003      	str	r3, [r0, #0]
		stop_sent = 1;
  401b44:	4617      	mov	r7, r2
  401b46:	e7cc      	b.n	401ae2 <twi_master_read+0x4e>
		return 0;

	val = addr[0];
	if (len > 1) {
		val <<= 8;
		val |= addr[1];
  401b48:	4623      	mov	r3, r4
  401b4a:	e7c4      	b.n	401ad6 <twi_master_read+0x42>
		if (status & TWI_SR_NACK) {
			return TWI_RECEIVE_NACK;
		}

		if (!timeout--) {
			return TWI_ERROR_TIMEOUT;
  401b4c:	2609      	movs	r6, #9
	}

	p_twi->TWI_SR;

	return TWI_SUCCESS;
}
  401b4e:	4630      	mov	r0, r6
  401b50:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uint32_t val;

	if (len == 0)
		return 0;

	val = addr[0];
  401b52:	4633      	mov	r3, r6
  401b54:	e7bf      	b.n	401ad6 <twi_master_read+0x42>
  401b56:	bf00      	nop

00401b58 <twi_master_write>:
 * \return TWI_SUCCESS if all bytes were written, error code otherwise.
 */
uint32_t twi_master_write(Twi *p_twi, twi_packet_t *p_packet)
{
	uint32_t status;
	uint32_t cnt = p_packet->length;
  401b58:	68ca      	ldr	r2, [r1, #12]
 * \param p_packet Packet information and data (see \ref twi_packet_t).
 *
 * \return TWI_SUCCESS if all bytes were written, error code otherwise.
 */
uint32_t twi_master_write(Twi *p_twi, twi_packet_t *p_packet)
{
  401b5a:	4603      	mov	r3, r0
	uint32_t status;
	uint32_t cnt = p_packet->length;
	uint8_t *buffer = p_packet->buffer;
  401b5c:	6888      	ldr	r0, [r1, #8]

	/* Check argument */
	if (cnt == 0) {
  401b5e:	2a00      	cmp	r2, #0
  401b60:	d033      	beq.n	401bca <twi_master_write+0x72>
 * \param p_packet Packet information and data (see \ref twi_packet_t).
 *
 * \return TWI_SUCCESS if all bytes were written, error code otherwise.
 */
uint32_t twi_master_write(Twi *p_twi, twi_packet_t *p_packet)
{
  401b62:	b470      	push	{r4, r5, r6}
	if (cnt == 0) {
		return TWI_INVALID_ARGUMENT;
	}

	/* Set write mode, slave address and 3 internal address byte lengths */
	p_twi->TWI_MMR = 0;
  401b64:	2600      	movs	r6, #0
  401b66:	605e      	str	r6, [r3, #4]
	p_twi->TWI_MMR = TWI_MMR_DADR(p_packet->chip) |
  401b68:	7c0d      	ldrb	r5, [r1, #16]
			((p_packet->addr_length << TWI_MMR_IADRSZ_Pos) &
  401b6a:	684c      	ldr	r4, [r1, #4]
		return TWI_INVALID_ARGUMENT;
	}

	/* Set write mode, slave address and 3 internal address byte lengths */
	p_twi->TWI_MMR = 0;
	p_twi->TWI_MMR = TWI_MMR_DADR(p_packet->chip) |
  401b6c:	042d      	lsls	r5, r5, #16
			((p_packet->addr_length << TWI_MMR_IADRSZ_Pos) &
  401b6e:	0224      	lsls	r4, r4, #8
		return TWI_INVALID_ARGUMENT;
	}

	/* Set write mode, slave address and 3 internal address byte lengths */
	p_twi->TWI_MMR = 0;
	p_twi->TWI_MMR = TWI_MMR_DADR(p_packet->chip) |
  401b70:	f405 05fe 	and.w	r5, r5, #8323072	; 0x7f0000
			((p_packet->addr_length << TWI_MMR_IADRSZ_Pos) &
  401b74:	f404 7440 	and.w	r4, r4, #768	; 0x300
		return TWI_INVALID_ARGUMENT;
	}

	/* Set write mode, slave address and 3 internal address byte lengths */
	p_twi->TWI_MMR = 0;
	p_twi->TWI_MMR = TWI_MMR_DADR(p_packet->chip) |
  401b78:	432c      	orrs	r4, r5
  401b7a:	605c      	str	r4, [r3, #4]
			((p_packet->addr_length << TWI_MMR_IADRSZ_Pos) &
			TWI_MMR_IADRSZ_Msk);

	/* Set internal address for remote chip */
	p_twi->TWI_IADR = 0;
  401b7c:	60de      	str	r6, [r3, #12]
	p_twi->TWI_IADR = twi_mk_addr(p_packet->addr, p_packet->addr_length);
  401b7e:	684c      	ldr	r4, [r1, #4]
 */
static uint32_t twi_mk_addr(const uint8_t *addr, int len)
{
	uint32_t val;

	if (len == 0)
  401b80:	b9bc      	cbnz	r4, 401bb2 <twi_master_write+0x5a>
			((p_packet->addr_length << TWI_MMR_IADRSZ_Pos) &
			TWI_MMR_IADRSZ_Msk);

	/* Set internal address for remote chip */
	p_twi->TWI_IADR = 0;
	p_twi->TWI_IADR = twi_mk_addr(p_packet->addr, p_packet->addr_length);
  401b82:	60dc      	str	r4, [r3, #12]

	/* Send all bytes */
	while (cnt > 0) {
		status = p_twi->TWI_SR;
  401b84:	6a19      	ldr	r1, [r3, #32]
		if (status & TWI_SR_NACK) {
  401b86:	05cd      	lsls	r5, r1, #23
  401b88:	d409      	bmi.n	401b9e <twi_master_write+0x46>
			return TWI_RECEIVE_NACK;
		}

		if (!(status & TWI_SR_TXRDY)) {
  401b8a:	074c      	lsls	r4, r1, #29
  401b8c:	d5fa      	bpl.n	401b84 <twi_master_write+0x2c>
			continue;
		}
		p_twi->TWI_THR = *buffer++;
  401b8e:	f810 1b01 	ldrb.w	r1, [r0], #1
  401b92:	6359      	str	r1, [r3, #52]	; 0x34
	/* Set internal address for remote chip */
	p_twi->TWI_IADR = 0;
	p_twi->TWI_IADR = twi_mk_addr(p_packet->addr, p_packet->addr_length);

	/* Send all bytes */
	while (cnt > 0) {
  401b94:	3a01      	subs	r2, #1
  401b96:	d007      	beq.n	401ba8 <twi_master_write+0x50>
		status = p_twi->TWI_SR;
  401b98:	6a19      	ldr	r1, [r3, #32]
		if (status & TWI_SR_NACK) {
  401b9a:	05cd      	lsls	r5, r1, #23
  401b9c:	d5f5      	bpl.n	401b8a <twi_master_write+0x32>
			return TWI_RECEIVE_NACK;
  401b9e:	2005      	movs	r0, #5

	while (!(p_twi->TWI_SR & TWI_SR_TXCOMP)) {
	}

	return TWI_SUCCESS;
}
  401ba0:	bc70      	pop	{r4, r5, r6}
  401ba2:	4770      	bx	lr
		status = p_twi->TWI_SR;
		if (status & TWI_SR_NACK) {
			return TWI_RECEIVE_NACK;
		}

		if (status & TWI_SR_TXRDY) {
  401ba4:	0751      	lsls	r1, r2, #29
  401ba6:	d414      	bmi.n	401bd2 <twi_master_write+0x7a>

		cnt--;
	}

	while (1) {
		status = p_twi->TWI_SR;
  401ba8:	6a1a      	ldr	r2, [r3, #32]
		if (status & TWI_SR_NACK) {
  401baa:	f412 7080 	ands.w	r0, r2, #256	; 0x100
  401bae:	d0f9      	beq.n	401ba4 <twi_master_write+0x4c>
  401bb0:	e7f5      	b.n	401b9e <twi_master_write+0x46>

	if (len == 0)
		return 0;

	val = addr[0];
	if (len > 1) {
  401bb2:	2c01      	cmp	r4, #1
	uint32_t val;

	if (len == 0)
		return 0;

	val = addr[0];
  401bb4:	780e      	ldrb	r6, [r1, #0]
	if (len > 1) {
  401bb6:	dd13      	ble.n	401be0 <twi_master_write+0x88>
		val <<= 8;
		val |= addr[1];
  401bb8:	784d      	ldrb	r5, [r1, #1]
	}
	if (len > 2) {
  401bba:	2c02      	cmp	r4, #2
		return 0;

	val = addr[0];
	if (len > 1) {
		val <<= 8;
		val |= addr[1];
  401bbc:	ea45 2506 	orr.w	r5, r5, r6, lsl #8
	}
	if (len > 2) {
  401bc0:	d005      	beq.n	401bce <twi_master_write+0x76>
		val <<= 8;
		val |= addr[2];
  401bc2:	7889      	ldrb	r1, [r1, #2]
  401bc4:	ea41 2405 	orr.w	r4, r1, r5, lsl #8
  401bc8:	e7db      	b.n	401b82 <twi_master_write+0x2a>
	uint32_t cnt = p_packet->length;
	uint8_t *buffer = p_packet->buffer;

	/* Check argument */
	if (cnt == 0) {
		return TWI_INVALID_ARGUMENT;
  401bca:	2001      	movs	r0, #1
  401bcc:	4770      	bx	lr
		return 0;

	val = addr[0];
	if (len > 1) {
		val <<= 8;
		val |= addr[1];
  401bce:	462c      	mov	r4, r5
  401bd0:	e7d7      	b.n	401b82 <twi_master_write+0x2a>
		if (status & TWI_SR_TXRDY) {
			break;
		}
	}

	p_twi->TWI_CR = TWI_CR_STOP;
  401bd2:	2202      	movs	r2, #2
  401bd4:	601a      	str	r2, [r3, #0]

	while (!(p_twi->TWI_SR & TWI_SR_TXCOMP)) {
  401bd6:	6a1a      	ldr	r2, [r3, #32]
  401bd8:	07d2      	lsls	r2, r2, #31
  401bda:	d5fc      	bpl.n	401bd6 <twi_master_write+0x7e>
	}

	return TWI_SUCCESS;
}
  401bdc:	bc70      	pop	{r4, r5, r6}
  401bde:	4770      	bx	lr
	uint32_t val;

	if (len == 0)
		return 0;

	val = addr[0];
  401be0:	4634      	mov	r4, r6
  401be2:	e7ce      	b.n	401b82 <twi_master_write+0x2a>

00401be4 <Dummy_Handler>:
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
	while (1) {
	}
  401be4:	e7fe      	b.n	401be4 <Dummy_Handler>
  401be6:	bf00      	nop

00401be8 <Reset_Handler>:

	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc > pDest) {
  401be8:	4918      	ldr	r1, [pc, #96]	; (401c4c <Reset_Handler+0x64>)
  401bea:	4819      	ldr	r0, [pc, #100]	; (401c50 <Reset_Handler+0x68>)
  401bec:	4281      	cmp	r1, r0
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
  401bee:	b508      	push	{r3, lr}

	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc > pDest) {
  401bf0:	d80c      	bhi.n	401c0c <Reset_Handler+0x24>
		for (; pDest < &_erelocate;) {
			*pDest++ = *pSrc++;
		}
	} else if (pSrc < pDest) {
  401bf2:	d215      	bcs.n	401c20 <Reset_Handler+0x38>
		uint32_t nb_bytes = (uint32_t)&_erelocate - (uint32_t)&_srelocate;
  401bf4:	4b17      	ldr	r3, [pc, #92]	; (401c54 <Reset_Handler+0x6c>)
  401bf6:	3904      	subs	r1, #4
  401bf8:	1a18      	subs	r0, r3, r0
		pSrc = (uint32_t*)((uint32_t)pSrc + nb_bytes) - 1;
  401bfa:	180a      	adds	r2, r1, r0
		pDest = (uint32_t*)((uint32_t)pDest + nb_bytes) - 1;
		for (;nb_bytes;nb_bytes -= 4) {
  401bfc:	b180      	cbz	r0, 401c20 <Reset_Handler+0x38>
			*pDest-- = *pSrc--;
  401bfe:	f852 0904 	ldr.w	r0, [r2], #-4
  401c02:	f843 0d04 	str.w	r0, [r3, #-4]!
		}
	} else if (pSrc < pDest) {
		uint32_t nb_bytes = (uint32_t)&_erelocate - (uint32_t)&_srelocate;
		pSrc = (uint32_t*)((uint32_t)pSrc + nb_bytes) - 1;
		pDest = (uint32_t*)((uint32_t)pDest + nb_bytes) - 1;
		for (;nb_bytes;nb_bytes -= 4) {
  401c06:	428a      	cmp	r2, r1
  401c08:	d1f9      	bne.n	401bfe <Reset_Handler+0x16>
  401c0a:	e009      	b.n	401c20 <Reset_Handler+0x38>
	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc > pDest) {
		for (; pDest < &_erelocate;) {
  401c0c:	4b11      	ldr	r3, [pc, #68]	; (401c54 <Reset_Handler+0x6c>)
  401c0e:	4298      	cmp	r0, r3
  401c10:	d206      	bcs.n	401c20 <Reset_Handler+0x38>
			*pDest++ = *pSrc++;
  401c12:	43c2      	mvns	r2, r0
  401c14:	4413      	add	r3, r2
  401c16:	f023 0203 	bic.w	r2, r3, #3
  401c1a:	3204      	adds	r2, #4
  401c1c:	4b0e      	ldr	r3, [pc, #56]	; (401c58 <Reset_Handler+0x70>)
  401c1e:	4798      	blx	r3

    No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
  401c20:	bf00      	nop
		}
	}
	__NOP();

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
  401c22:	480e      	ldr	r0, [pc, #56]	; (401c5c <Reset_Handler+0x74>)
  401c24:	4b0e      	ldr	r3, [pc, #56]	; (401c60 <Reset_Handler+0x78>)
  401c26:	4298      	cmp	r0, r3
  401c28:	d207      	bcs.n	401c3a <Reset_Handler+0x52>
		*pDest++ = 0;
  401c2a:	43c2      	mvns	r2, r0
  401c2c:	4413      	add	r3, r2
  401c2e:	f023 0203 	bic.w	r2, r3, #3
  401c32:	3204      	adds	r2, #4
  401c34:	2100      	movs	r1, #0
  401c36:	4b0b      	ldr	r3, [pc, #44]	; (401c64 <Reset_Handler+0x7c>)
  401c38:	4798      	blx	r3
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) & _sfixed;
	SCB->VTOR = ((uint32_t) pSrc);
  401c3a:	4b0b      	ldr	r3, [pc, #44]	; (401c68 <Reset_Handler+0x80>)
  401c3c:	4a0b      	ldr	r2, [pc, #44]	; (401c6c <Reset_Handler+0x84>)
  401c3e:	609a      	str	r2, [r3, #8]

	/* Initialize the C library */
	__libc_init_array();
  401c40:	4b0b      	ldr	r3, [pc, #44]	; (401c70 <Reset_Handler+0x88>)
  401c42:	4798      	blx	r3

	/* Branch to main function */
	main();
  401c44:	4b0b      	ldr	r3, [pc, #44]	; (401c74 <Reset_Handler+0x8c>)
  401c46:	4798      	blx	r3

	/* Infinite loop */
	while (1);
  401c48:	e7fe      	b.n	401c48 <Reset_Handler+0x60>
  401c4a:	bf00      	nop
  401c4c:	00411e5c 	.word	0x00411e5c
  401c50:	20000000 	.word	0x20000000
  401c54:	20000d24 	.word	0x20000d24
  401c58:	00408ee9 	.word	0x00408ee9
  401c5c:	20000d24 	.word	0x20000d24
  401c60:	200012c8 	.word	0x200012c8
  401c64:	004090e5 	.word	0x004090e5
  401c68:	e000ed00 	.word	0xe000ed00
  401c6c:	00400000 	.word	0x00400000
  401c70:	00408755 	.word	0x00408755
  401c74:	00400275 	.word	0x00400275

00401c78 <SystemCoreClockUpdate>:
 * \brief Get Core Clock Frequency.
 */
void SystemCoreClockUpdate( void )
{
	/* Determine clock frequency according to clock register values */
	switch ( PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk ) {
  401c78:	4a32      	ldr	r2, [pc, #200]	; (401d44 <SystemCoreClockUpdate+0xcc>)
  401c7a:	6b13      	ldr	r3, [r2, #48]	; 0x30
  401c7c:	f003 0303 	and.w	r3, r3, #3
  401c80:	2b01      	cmp	r3, #1
  401c82:	d039      	beq.n	401cf8 <SystemCoreClockUpdate+0x80>
  401c84:	d322      	bcc.n	401ccc <SystemCoreClockUpdate+0x54>
		}
		break;
		
	case PMC_MCKR_CSS_PLLA_CLK:	/* PLLA clock */
	case PMC_MCKR_CSS_PLLB_CLK:	/* PLLB clock */
			if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL ) {
  401c86:	6a13      	ldr	r3, [r2, #32]
  401c88:	01d9      	lsls	r1, r3, #7
  401c8a:	d546      	bpl.n	401d1a <SystemCoreClockUpdate+0xa2>
				SystemCoreClock = CHIP_FREQ_XTAL;
  401c8c:	492e      	ldr	r1, [pc, #184]	; (401d48 <SystemCoreClockUpdate+0xd0>)
  401c8e:	4b2f      	ldr	r3, [pc, #188]	; (401d4c <SystemCoreClockUpdate+0xd4>)
  401c90:	600b      	str	r3, [r1, #0]
				default:
					break;
				}
			}
			
			if ( (uint32_t)(PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) ==
  401c92:	4a2c      	ldr	r2, [pc, #176]	; (401d44 <SystemCoreClockUpdate+0xcc>)
  401c94:	6b10      	ldr	r0, [r2, #48]	; 0x30
  401c96:	f000 0003 	and.w	r0, r0, #3
  401c9a:	2802      	cmp	r0, #2
					PMC_MCKR_CSS_PLLA_CLK ) {
				SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk)
  401c9c:	bf0b      	itete	eq
  401c9e:	6a90      	ldreq	r0, [r2, #40]	; 0x28
						>> CKGR_PLLAR_MULA_Pos) + 1U);
				SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk)
						>> CKGR_PLLAR_DIVA_Pos));
			} else {
				SystemCoreClock *= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_MULB_Msk)
  401ca0:	6ad0      	ldrne	r0, [r2, #44]	; 0x2c
			
			if ( (uint32_t)(PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) ==
					PMC_MCKR_CSS_PLLA_CLK ) {
				SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk)
						>> CKGR_PLLAR_MULA_Pos) + 1U);
				SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk)
  401ca2:	6a92      	ldreq	r2, [r2, #40]	; 0x28
						>> CKGR_PLLAR_DIVA_Pos));
			} else {
				SystemCoreClock *= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_MULB_Msk)
						>> CKGR_PLLBR_MULB_Pos) + 1U);
				SystemCoreClock /= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_DIVB_Msk)
  401ca4:	6ad2      	ldrne	r2, [r2, #44]	; 0x2c
						>> CKGR_PLLAR_MULA_Pos) + 1U);
				SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk)
						>> CKGR_PLLAR_DIVA_Pos));
			} else {
				SystemCoreClock *= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_MULB_Msk)
						>> CKGR_PLLBR_MULB_Pos) + 1U);
  401ca6:	f3c0 400a 	ubfx	r0, r0, #16, #11
				SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk)
						>> CKGR_PLLAR_MULA_Pos) + 1U);
				SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk)
						>> CKGR_PLLAR_DIVA_Pos));
			} else {
				SystemCoreClock *= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_MULB_Msk)
  401caa:	fb00 3303 	mla	r3, r0, r3, r3
		
	default:
		break;
	}

	if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 ) {
  401cae:	4825      	ldr	r0, [pc, #148]	; (401d44 <SystemCoreClockUpdate+0xcc>)
						>> CKGR_PLLAR_DIVA_Pos));
			} else {
				SystemCoreClock *= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_MULB_Msk)
						>> CKGR_PLLBR_MULB_Pos) + 1U);
				SystemCoreClock /= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_DIVB_Msk)
						>> CKGR_PLLBR_DIVB_Pos));
  401cb0:	b2d2      	uxtb	r2, r2
				SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk)
						>> CKGR_PLLAR_DIVA_Pos));
			} else {
				SystemCoreClock *= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_MULB_Msk)
						>> CKGR_PLLBR_MULB_Pos) + 1U);
				SystemCoreClock /= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_DIVB_Msk)
  401cb2:	fbb3 f3f2 	udiv	r3, r3, r2
		
	default:
		break;
	}

	if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 ) {
  401cb6:	6b02      	ldr	r2, [r0, #48]	; 0x30
  401cb8:	f002 0270 	and.w	r2, r2, #112	; 0x70
  401cbc:	2a70      	cmp	r2, #112	; 0x70
  401cbe:	d115      	bne.n	401cec <SystemCoreClockUpdate+0x74>
		SystemCoreClock /= 3U;
  401cc0:	4a23      	ldr	r2, [pc, #140]	; (401d50 <SystemCoreClockUpdate+0xd8>)
  401cc2:	fba2 2303 	umull	r2, r3, r2, r3
  401cc6:	085b      	lsrs	r3, r3, #1
  401cc8:	600b      	str	r3, [r1, #0]
  401cca:	4770      	bx	lr
void SystemCoreClockUpdate( void )
{
	/* Determine clock frequency according to clock register values */
	switch ( PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk ) {
	case PMC_MCKR_CSS_SLOW_CLK: /* Slow clock */
			if ( SUPC->SUPC_SR & SUPC_SR_OSCSEL ) {
  401ccc:	4b21      	ldr	r3, [pc, #132]	; (401d54 <SystemCoreClockUpdate+0xdc>)
  401cce:	491e      	ldr	r1, [pc, #120]	; (401d48 <SystemCoreClockUpdate+0xd0>)
  401cd0:	695b      	ldr	r3, [r3, #20]
  401cd2:	f013 0f80 	tst.w	r3, #128	; 0x80
  401cd6:	bf14      	ite	ne
  401cd8:	f44f 4300 	movne.w	r3, #32768	; 0x8000
  401cdc:	f44f 43fa 	moveq.w	r3, #32000	; 0x7d00
		
	default:
		break;
	}

	if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 ) {
  401ce0:	4818      	ldr	r0, [pc, #96]	; (401d44 <SystemCoreClockUpdate+0xcc>)
  401ce2:	6b02      	ldr	r2, [r0, #48]	; 0x30
  401ce4:	f002 0270 	and.w	r2, r2, #112	; 0x70
  401ce8:	2a70      	cmp	r2, #112	; 0x70
  401cea:	d0e9      	beq.n	401cc0 <SystemCoreClockUpdate+0x48>
		SystemCoreClock /= 3U;
	} else {
		SystemCoreClock >>=
			((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  401cec:	6b02      	ldr	r2, [r0, #48]	; 0x30
  401cee:	f3c2 1202 	ubfx	r2, r2, #4, #3
	}

	if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 ) {
		SystemCoreClock /= 3U;
	} else {
		SystemCoreClock >>=
  401cf2:	40d3      	lsrs	r3, r2
  401cf4:	600b      	str	r3, [r1, #0]
  401cf6:	4770      	bx	lr
				SystemCoreClock = CHIP_FREQ_SLCK_RC;
			}
		break;
		
	case PMC_MCKR_CSS_MAIN_CLK: /* Main clock */
		if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL ) {
  401cf8:	6a13      	ldr	r3, [r2, #32]
  401cfa:	01db      	lsls	r3, r3, #7
  401cfc:	d41a      	bmi.n	401d34 <SystemCoreClockUpdate+0xbc>
			SystemCoreClock = CHIP_FREQ_XTAL;
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  401cfe:	4912      	ldr	r1, [pc, #72]	; (401d48 <SystemCoreClockUpdate+0xd0>)
  401d00:	4815      	ldr	r0, [pc, #84]	; (401d58 <SystemCoreClockUpdate+0xe0>)
  401d02:	6008      	str	r0, [r1, #0]
			
			switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk ) {
  401d04:	6a13      	ldr	r3, [r2, #32]
  401d06:	f003 0370 	and.w	r3, r3, #112	; 0x70
  401d0a:	2b10      	cmp	r3, #16
  401d0c:	d018      	beq.n	401d40 <SystemCoreClockUpdate+0xc8>
  401d0e:	4a0f      	ldr	r2, [pc, #60]	; (401d4c <SystemCoreClockUpdate+0xd4>)
  401d10:	2b20      	cmp	r3, #32
  401d12:	bf0c      	ite	eq
  401d14:	4613      	moveq	r3, r2
  401d16:	4603      	movne	r3, r0
  401d18:	e7e2      	b.n	401ce0 <SystemCoreClockUpdate+0x68>
	case PMC_MCKR_CSS_PLLA_CLK:	/* PLLA clock */
	case PMC_MCKR_CSS_PLLB_CLK:	/* PLLB clock */
			if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL ) {
				SystemCoreClock = CHIP_FREQ_XTAL;
			} else {
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  401d1a:	490b      	ldr	r1, [pc, #44]	; (401d48 <SystemCoreClockUpdate+0xd0>)
  401d1c:	4b0e      	ldr	r3, [pc, #56]	; (401d58 <SystemCoreClockUpdate+0xe0>)
  401d1e:	600b      	str	r3, [r1, #0]
				
				switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk ) {
  401d20:	6a12      	ldr	r2, [r2, #32]
  401d22:	f002 0270 	and.w	r2, r2, #112	; 0x70
  401d26:	2a10      	cmp	r2, #16
  401d28:	d007      	beq.n	401d3a <SystemCoreClockUpdate+0xc2>
  401d2a:	2a20      	cmp	r2, #32
  401d2c:	d1b1      	bne.n	401c92 <SystemCoreClockUpdate+0x1a>
				case CKGR_MOR_MOSCRCF_8_MHz:
					SystemCoreClock = CHIP_FREQ_MAINCK_RC_8MHZ;
					break;
				
				case CKGR_MOR_MOSCRCF_12_MHz:
					SystemCoreClock = CHIP_FREQ_MAINCK_RC_12MHZ;
  401d2e:	4b07      	ldr	r3, [pc, #28]	; (401d4c <SystemCoreClockUpdate+0xd4>)
  401d30:	600b      	str	r3, [r1, #0]
					break;
  401d32:	e7ae      	b.n	401c92 <SystemCoreClockUpdate+0x1a>
  401d34:	4b05      	ldr	r3, [pc, #20]	; (401d4c <SystemCoreClockUpdate+0xd4>)
  401d36:	4904      	ldr	r1, [pc, #16]	; (401d48 <SystemCoreClockUpdate+0xd0>)
  401d38:	e7d2      	b.n	401ce0 <SystemCoreClockUpdate+0x68>
				case CKGR_MOR_MOSCRCF_4_MHz:
					SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
					break;
				
				case CKGR_MOR_MOSCRCF_8_MHz:
					SystemCoreClock = CHIP_FREQ_MAINCK_RC_8MHZ;
  401d3a:	4b08      	ldr	r3, [pc, #32]	; (401d5c <SystemCoreClockUpdate+0xe4>)
  401d3c:	600b      	str	r3, [r1, #0]
					break;
  401d3e:	e7a8      	b.n	401c92 <SystemCoreClockUpdate+0x1a>
		if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL ) {
			SystemCoreClock = CHIP_FREQ_XTAL;
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
			
			switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk ) {
  401d40:	4b06      	ldr	r3, [pc, #24]	; (401d5c <SystemCoreClockUpdate+0xe4>)
  401d42:	e7cd      	b.n	401ce0 <SystemCoreClockUpdate+0x68>
  401d44:	400e0400 	.word	0x400e0400
  401d48:	20000484 	.word	0x20000484
  401d4c:	00b71b00 	.word	0x00b71b00
  401d50:	aaaaaaab 	.word	0xaaaaaaab
  401d54:	400e1410 	.word	0x400e1410
  401d58:	003d0900 	.word	0x003d0900
  401d5c:	007a1200 	.word	0x007a1200

00401d60 <system_init_flash>:
 */
void system_init_flash( uint32_t ul_clk )
{
  /* Set FWS for embedded Flash access according to operating frequency */
#if !defined(ID_EFC1)
	if ( ul_clk < CHIP_FREQ_FWS_0 ) {
  401d60:	4b12      	ldr	r3, [pc, #72]	; (401dac <system_init_flash+0x4c>)
  401d62:	4298      	cmp	r0, r3
  401d64:	d915      	bls.n	401d92 <system_init_flash+0x32>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
	} else {
		if ( ul_clk < CHIP_FREQ_FWS_1 ) {
  401d66:	4b12      	ldr	r3, [pc, #72]	; (401db0 <system_init_flash+0x50>)
  401d68:	4298      	cmp	r0, r3
  401d6a:	d90e      	bls.n	401d8a <system_init_flash+0x2a>
			EFC0->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
		} else {
			if ( ul_clk < CHIP_FREQ_FWS_2 ) {
  401d6c:	4b11      	ldr	r3, [pc, #68]	; (401db4 <system_init_flash+0x54>)
  401d6e:	4298      	cmp	r0, r3
  401d70:	d918      	bls.n	401da4 <system_init_flash+0x44>
				EFC0->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
			} else {
				if ( ul_clk < CHIP_FREQ_FWS_3 ) {
  401d72:	4b11      	ldr	r3, [pc, #68]	; (401db8 <system_init_flash+0x58>)
  401d74:	4298      	cmp	r0, r3
  401d76:	d911      	bls.n	401d9c <system_init_flash+0x3c>
					EFC0->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
				} else {
					if ( ul_clk < CHIP_FREQ_FWS_4 ) {
  401d78:	4b10      	ldr	r3, [pc, #64]	; (401dbc <system_init_flash+0x5c>)
  401d7a:	4298      	cmp	r0, r3
					EFC0->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
  401d7c:	4b10      	ldr	r3, [pc, #64]	; (401dc0 <system_init_flash+0x60>)
					} else {
					EFC0->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  401d7e:	bf8c      	ite	hi
  401d80:	4a10      	ldrhi	r2, [pc, #64]	; (401dc4 <system_init_flash+0x64>)
			} else {
				if ( ul_clk < CHIP_FREQ_FWS_3 ) {
					EFC0->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
				} else {
					if ( ul_clk < CHIP_FREQ_FWS_4 ) {
					EFC0->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
  401d82:	f04f 2204 	movls.w	r2, #67109888	; 0x4000400
					} else {
					EFC0->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  401d86:	601a      	str	r2, [r3, #0]
  401d88:	4770      	bx	lr
#if !defined(ID_EFC1)
	if ( ul_clk < CHIP_FREQ_FWS_0 ) {
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
	} else {
		if ( ul_clk < CHIP_FREQ_FWS_1 ) {
			EFC0->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  401d8a:	4b0d      	ldr	r3, [pc, #52]	; (401dc0 <system_init_flash+0x60>)
  401d8c:	4a0e      	ldr	r2, [pc, #56]	; (401dc8 <system_init_flash+0x68>)
  401d8e:	601a      	str	r2, [r3, #0]
  401d90:	4770      	bx	lr
void system_init_flash( uint32_t ul_clk )
{
  /* Set FWS for embedded Flash access according to operating frequency */
#if !defined(ID_EFC1)
	if ( ul_clk < CHIP_FREQ_FWS_0 ) {
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  401d92:	4b0b      	ldr	r3, [pc, #44]	; (401dc0 <system_init_flash+0x60>)
  401d94:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  401d98:	601a      	str	r2, [r3, #0]
  401d9a:	4770      	bx	lr
		} else {
			if ( ul_clk < CHIP_FREQ_FWS_2 ) {
				EFC0->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
			} else {
				if ( ul_clk < CHIP_FREQ_FWS_3 ) {
					EFC0->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  401d9c:	4b08      	ldr	r3, [pc, #32]	; (401dc0 <system_init_flash+0x60>)
  401d9e:	4a0b      	ldr	r2, [pc, #44]	; (401dcc <system_init_flash+0x6c>)
  401da0:	601a      	str	r2, [r3, #0]
  401da2:	4770      	bx	lr
	} else {
		if ( ul_clk < CHIP_FREQ_FWS_1 ) {
			EFC0->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
		} else {
			if ( ul_clk < CHIP_FREQ_FWS_2 ) {
				EFC0->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  401da4:	4b06      	ldr	r3, [pc, #24]	; (401dc0 <system_init_flash+0x60>)
  401da6:	4a0a      	ldr	r2, [pc, #40]	; (401dd0 <system_init_flash+0x70>)
  401da8:	601a      	str	r2, [r3, #0]
  401daa:	4770      	bx	lr
  401dac:	01312cff 	.word	0x01312cff
  401db0:	026259ff 	.word	0x026259ff
  401db4:	039386ff 	.word	0x039386ff
  401db8:	04c4b3ff 	.word	0x04c4b3ff
  401dbc:	05f5e0ff 	.word	0x05f5e0ff
  401dc0:	400e0a00 	.word	0x400e0a00
  401dc4:	04000500 	.word	0x04000500
  401dc8:	04000100 	.word	0x04000100
  401dcc:	04000300 	.word	0x04000300
  401dd0:	04000200 	.word	0x04000200

00401dd4 <_sbrk>:
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;

	if (heap == NULL) {
  401dd4:	4a07      	ldr	r2, [pc, #28]	; (401df4 <_sbrk+0x20>)

extern caddr_t _sbrk(int incr)
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;
  401dd6:	4908      	ldr	r1, [pc, #32]	; (401df8 <_sbrk+0x24>)

	if (heap == NULL) {
  401dd8:	6813      	ldr	r3, [r2, #0]
  401dda:	b13b      	cbz	r3, 401dec <_sbrk+0x18>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;

	if (((int)prev_heap + incr) > ramend) {
  401ddc:	4418      	add	r0, r3
  401dde:	4281      	cmp	r1, r0
		return (caddr_t) -1;	
	}

	heap += incr;
  401de0:	bfa6      	itte	ge
  401de2:	6010      	strge	r0, [r2, #0]

	return (caddr_t) prev_heap;
  401de4:	4618      	movge	r0, r3
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;

	if (((int)prev_heap + incr) > ramend) {
		return (caddr_t) -1;	
  401de6:	f04f 30ff 	movlt.w	r0, #4294967295
	}

	heap += incr;

	return (caddr_t) prev_heap;
}
  401dea:	4770      	bx	lr
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;

	if (heap == NULL) {
		heap = (unsigned char *)&_end;
  401dec:	4b03      	ldr	r3, [pc, #12]	; (401dfc <_sbrk+0x28>)
  401dee:	6013      	str	r3, [r2, #0]
  401df0:	e7f4      	b.n	401ddc <_sbrk+0x8>
  401df2:	bf00      	nop
  401df4:	20001270 	.word	0x20001270
  401df8:	2001fffc 	.word	0x2001fffc
  401dfc:	200042c8 	.word	0x200042c8

00401e00 <_close>:
}

extern int _close(int file)
{
	return -1;
}
  401e00:	f04f 30ff 	mov.w	r0, #4294967295
  401e04:	4770      	bx	lr
  401e06:	bf00      	nop

00401e08 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
  401e08:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  401e0c:	604b      	str	r3, [r1, #4]

	return 0;
}
  401e0e:	2000      	movs	r0, #0
  401e10:	4770      	bx	lr
  401e12:	bf00      	nop

00401e14 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
  401e14:	2001      	movs	r0, #1
  401e16:	4770      	bx	lr

00401e18 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
  401e18:	2000      	movs	r0, #0
  401e1a:	4770      	bx	lr

00401e1c <_exit>:

extern void _exit(int status)
{
  401e1c:	b508      	push	{r3, lr}
  401e1e:	4601      	mov	r1, r0
	printf("Exiting with status %d.\n", status);
  401e20:	4b01      	ldr	r3, [pc, #4]	; (401e28 <_exit+0xc>)
  401e22:	4802      	ldr	r0, [pc, #8]	; (401e2c <_exit+0x10>)
  401e24:	4798      	blx	r3

	for (;;);
  401e26:	e7fe      	b.n	401e26 <_exit+0xa>
  401e28:	004087a5 	.word	0x004087a5
  401e2c:	0041089c 	.word	0x0041089c

00401e30 <_kill>:
}

extern void _kill(int pid, int sig)
{
  401e30:	4770      	bx	lr
  401e32:	bf00      	nop

00401e34 <_getpid>:
}

extern int _getpid(void)
{
	return -1;
}
  401e34:	f04f 30ff 	mov.w	r0, #4294967295
  401e38:	4770      	bx	lr
  401e3a:	bf00      	nop

00401e3c <_zbar_decode_code128>:
    dcode->code128.character = j;
    return(0);
}

zbar_symbol_type_t _zbar_decode_code128 (zbar_decoder_t *dcode)
{
  401e3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

/* retrieve i-th previous element width */
static inline unsigned get_width (const zbar_decoder_t *dcode,
                                  unsigned char offset)
{
    return(dcode->w[(dcode->idx - offset) & (DECODE_WINDOW - 1)]);
  401e40:	7801      	ldrb	r1, [r0, #0]

    /* update latest character width */
    dcode128->s6 -= get_width(dcode, 6);
    dcode128->s6 += get_width(dcode, 0);

    if((dcode128->character < 0)
  401e42:	f8b0 6104 	ldrh.w	r6, [r0, #260]	; 0x104
  401e46:	f8d0 5108 	ldr.w	r5, [r0, #264]	; 0x108
  401e4a:	1f8f      	subs	r7, r1, #6
  401e4c:	f001 0e0f 	and.w	lr, r1, #15
  401e50:	f007 070f 	and.w	r7, r7, #15
  401e54:	eb00 0e8e 	add.w	lr, r0, lr, lsl #2
  401e58:	eb00 0787 	add.w	r7, r0, r7, lsl #2
  401e5c:	f8de 2004 	ldr.w	r2, [lr, #4]
    code128_decoder_t *dcode128 = &dcode->code128;
    signed char c;

    /* update latest character width */
    dcode128->s6 -= get_width(dcode, 6);
    dcode128->s6 += get_width(dcode, 0);
  401e60:	687b      	ldr	r3, [r7, #4]

    if((dcode128->character < 0)
  401e62:	f346 160b 	sbfx	r6, r6, #4, #12
  401e66:	fa0f f886 	sxth.w	r8, r6
  401e6a:	4415      	add	r5, r2
    code128_decoder_t *dcode128 = &dcode->code128;
    signed char c;

    /* update latest character width */
    dcode128->s6 -= get_width(dcode, 6);
    dcode128->s6 += get_width(dcode, 0);
  401e6c:	1aed      	subs	r5, r5, r3

    if((dcode128->character < 0)
  401e6e:	f1b8 0f00 	cmp.w	r8, #0
    dcode->code128.character = j;
    return(0);
}

zbar_symbol_type_t _zbar_decode_code128 (zbar_decoder_t *dcode)
{
  401e72:	b08f      	sub	sp, #60	; 0x3c
    code128_decoder_t *dcode128 = &dcode->code128;
    signed char c;

    /* update latest character width */
    dcode128->s6 -= get_width(dcode, 6);
    dcode128->s6 += get_width(dcode, 0);
  401e74:	f8c0 5108 	str.w	r5, [r0, #264]	; 0x108

    if((dcode128->character < 0)
  401e78:	b2b6      	uxth	r6, r6
  401e7a:	db11      	blt.n	401ea0 <_zbar_decode_code128+0x64>
       ? get_color(dcode) != ZBAR_SPACE
       : (/* process every 6th element of active symbol */
          ++dcode128->element != 6 ||
  401e7c:	f890 4104 	ldrb.w	r4, [r0, #260]	; 0x104
  401e80:	f3c4 0342 	ubfx	r3, r4, #1, #3
  401e84:	3301      	adds	r3, #1
  401e86:	f003 0307 	and.w	r3, r3, #7
  401e8a:	f363 0443 	bfi	r4, r3, #1, #3
  401e8e:	2b06      	cmp	r3, #6
  401e90:	f880 4104 	strb.w	r4, [r0, #260]	; 0x104
  401e94:	f000 80c6 	beq.w	402024 <_zbar_decode_code128+0x1e8>

/* check and release shared state lock */
static inline char release_lock (zbar_decoder_t *dcode,
                                 zbar_symbol_type_t req)
{
    zassert(dcode->lock == req, 1, "lock=%d req=%d\n",
  401e98:	2000      	movs	r0, #0
        return(sym);
    }

    dbprintf(2, "\n");
    return(0);
}
  401e9a:	b00f      	add	sp, #60	; 0x3c
  401e9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

    /* update latest character width */
    dcode128->s6 -= get_width(dcode, 6);
    dcode128->s6 += get_width(dcode, 0);

    if((dcode128->character < 0)
  401ea0:	f001 0c01 	and.w	ip, r1, #1
  401ea4:	fa5f f38c 	uxtb.w	r3, ip
  401ea8:	2b00      	cmp	r3, #0
  401eaa:	d1f5      	bne.n	401e98 <_zbar_decode_code128+0x5c>
  401eac:	4604      	mov	r4, r0
       : (/* process every 6th element of active symbol */
          ++dcode128->element != 6 ||
          /* decode color based on direction */
          get_color(dcode) != dcode128->direction))
        return(0);
    dcode128->element = 0;
  401eae:	f890 0104 	ldrb.w	r0, [r0, #260]	; 0x104

    /* build edge signature of character */
    unsigned s = dcode->code128.s6;

    dbprintf(2, " s=%d", s);
    if(s < 5)
  401eb2:	2d04      	cmp	r5, #4
       : (/* process every 6th element of active symbol */
          ++dcode128->element != 6 ||
          /* decode color based on direction */
          get_color(dcode) != dcode128->direction))
        return(0);
    dcode128->element = 0;
  401eb4:	f363 0043 	bfi	r0, r3, #1, #3
  401eb8:	f884 0104 	strb.w	r0, [r4, #260]	; 0x104

    /* build edge signature of character */
    unsigned s = dcode->code128.s6;

    dbprintf(2, " s=%d", s);
    if(s < 5)
  401ebc:	f240 8253 	bls.w	402366 <_zbar_decode_code128+0x52a>
    sig = (get_color(dcode) == ZBAR_BAR)
        ? ((decode_e(get_width(dcode, 0) + get_width(dcode, 1), s, 11) << 12) |
           (decode_e(get_width(dcode, 1) + get_width(dcode, 2), s, 11) << 8) |
           (decode_e(get_width(dcode, 2) + get_width(dcode, 3), s, 11) << 4) |
           (decode_e(get_width(dcode, 3) + get_width(dcode, 4), s, 11)))
        : ((decode_e(get_width(dcode, 5) + get_width(dcode, 4), s, 11) << 12) |
  401ec0:	f00c 03ff 	and.w	r3, ip, #255	; 0xff
  401ec4:	9309      	str	r3, [sp, #36]	; 0x24
  401ec6:	f1bc 0f00 	cmp.w	ip, #0
  401eca:	f040 81df 	bne.w	40228c <_zbar_decode_code128+0x450>

/* retrieve i-th previous element width */
static inline unsigned get_width (const zbar_decoder_t *dcode,
                                  unsigned char offset)
{
    return(dcode->w[(dcode->idx - offset) & (DECODE_WINDOW - 1)]);
  401ece:	1f0b      	subs	r3, r1, #4
  401ed0:	461a      	mov	r2, r3
  401ed2:	930b      	str	r3, [sp, #44]	; 0x2c
  401ed4:	1f4b      	subs	r3, r1, #5
  401ed6:	f002 020f 	and.w	r2, r2, #15
  401eda:	f003 030f 	and.w	r3, r3, #15
  401ede:	eb04 0282 	add.w	r2, r4, r2, lsl #2
  401ee2:	eb04 0383 	add.w	r3, r4, r3, lsl #2
  401ee6:	6852      	ldr	r2, [r2, #4]
  401ee8:	685b      	ldr	r3, [r3, #4]
{
    /* result is encoded number of units - 2
     * (for use as zero based index)
     * or -1 if invalid
     */
    unsigned char E = ((e * n * 2 + 1) / s - 3) / 2;
  401eea:	2016      	movs	r0, #22
  401eec:	4413      	add	r3, r2
  401eee:	fb00 f303 	mul.w	r3, r0, r3

/* retrieve i-th previous element width */
static inline unsigned get_width (const zbar_decoder_t *dcode,
                                  unsigned char offset)
{
    return(dcode->w[(dcode->idx - offset) & (DECODE_WINDOW - 1)]);
  401ef2:	1ec8      	subs	r0, r1, #3
  401ef4:	f000 0c0f 	and.w	ip, r0, #15
  401ef8:	eb04 0c8c 	add.w	ip, r4, ip, lsl #2
  401efc:	900a      	str	r0, [sp, #40]	; 0x28
  401efe:	f8dc c004 	ldr.w	ip, [ip, #4]
{
    /* result is encoded number of units - 2
     * (for use as zero based index)
     * or -1 if invalid
     */
    unsigned char E = ((e * n * 2 + 1) / s - 3) / 2;
  401f02:	2016      	movs	r0, #22
           (decode_e(get_width(dcode, 4) + get_width(dcode, 3), s, 11) << 8) |
  401f04:	4462      	add	r2, ip
  401f06:	fb00 f202 	mul.w	r2, r0, r2

/* retrieve i-th previous element width */
static inline unsigned get_width (const zbar_decoder_t *dcode,
                                  unsigned char offset)
{
    return(dcode->w[(dcode->idx - offset) & (DECODE_WINDOW - 1)]);
  401f0a:	1e88      	subs	r0, r1, #2
  401f0c:	f000 090f 	and.w	r9, r0, #15
  401f10:	eb04 0989 	add.w	r9, r4, r9, lsl #2
{
    /* result is encoded number of units - 2
     * (for use as zero based index)
     * or -1 if invalid
     */
    unsigned char E = ((e * n * 2 + 1) / s - 3) / 2;
  401f14:	3301      	adds	r3, #1

/* retrieve i-th previous element width */
static inline unsigned get_width (const zbar_decoder_t *dcode,
                                  unsigned char offset)
{
    return(dcode->w[(dcode->idx - offset) & (DECODE_WINDOW - 1)]);
  401f16:	f8d9 b004 	ldr.w	fp, [r9, #4]
{
    /* result is encoded number of units - 2
     * (for use as zero based index)
     * or -1 if invalid
     */
    unsigned char E = ((e * n * 2 + 1) / s - 3) / 2;
  401f1a:	fbb3 f3f5 	udiv	r3, r3, r5

/* retrieve i-th previous element width */
static inline unsigned get_width (const zbar_decoder_t *dcode,
                                  unsigned char offset)
{
    return(dcode->w[(dcode->idx - offset) & (DECODE_WINDOW - 1)]);
  401f1e:	f101 39ff 	add.w	r9, r1, #4294967295
  401f22:	f009 0a0f 	and.w	sl, r9, #15
  401f26:	eb04 0a8a 	add.w	sl, r4, sl, lsl #2
           (decode_e(get_width(dcode, 3) + get_width(dcode, 2), s, 11) << 4) |
  401f2a:	44dc      	add	ip, fp
           (decode_e(get_width(dcode, 2) + get_width(dcode, 1), s, 11)));
  401f2c:	f8da a004 	ldr.w	sl, [sl, #4]
  401f30:	900c      	str	r0, [sp, #48]	; 0x30
{
    /* result is encoded number of units - 2
     * (for use as zero based index)
     * or -1 if invalid
     */
    unsigned char E = ((e * n * 2 + 1) / s - 3) / 2;
  401f32:	3b03      	subs	r3, #3
  401f34:	2016      	movs	r0, #22
    return((E >= n - 3) ? -1 : E);
  401f36:	f3c3 0347 	ubfx	r3, r3, #1, #8
{
    /* result is encoded number of units - 2
     * (for use as zero based index)
     * or -1 if invalid
     */
    unsigned char E = ((e * n * 2 + 1) / s - 3) / 2;
  401f3a:	fb00 f00c 	mul.w	r0, r0, ip
  401f3e:	3201      	adds	r2, #1
  401f40:	f04f 0c16 	mov.w	ip, #22
  401f44:	fbb2 f2f5 	udiv	r2, r2, r5
  401f48:	44da      	add	sl, fp
  401f4a:	3a03      	subs	r2, #3
    return((E >= n - 3) ? -1 : E);
  401f4c:	2b07      	cmp	r3, #7
  401f4e:	f3c2 0247 	ubfx	r2, r2, #1, #8
{
    /* result is encoded number of units - 2
     * (for use as zero based index)
     * or -1 if invalid
     */
    unsigned char E = ((e * n * 2 + 1) / s - 3) / 2;
  401f52:	f100 0001 	add.w	r0, r0, #1
  401f56:	fb0c fc0a 	mul.w	ip, ip, sl
  401f5a:	fbb0 f0f5 	udiv	r0, r0, r5
  401f5e:	f1a0 0003 	sub.w	r0, r0, #3
    return((E >= n - 3) ? -1 : E);
  401f62:	f3c0 0047 	ubfx	r0, r0, #1, #8
  401f66:	bf94      	ite	ls
  401f68:	031b      	lslls	r3, r3, #12
  401f6a:	4bbd      	ldrhi	r3, [pc, #756]	; (402260 <_zbar_decode_code128+0x424>)
{
    /* result is encoded number of units - 2
     * (for use as zero based index)
     * or -1 if invalid
     */
    unsigned char E = ((e * n * 2 + 1) / s - 3) / 2;
  401f6c:	f10c 0c01 	add.w	ip, ip, #1
    return((E >= n - 3) ? -1 : E);
  401f70:	2a07      	cmp	r2, #7
{
    /* result is encoded number of units - 2
     * (for use as zero based index)
     * or -1 if invalid
     */
    unsigned char E = ((e * n * 2 + 1) / s - 3) / 2;
  401f72:	fbbc fcf5 	udiv	ip, ip, r5
  401f76:	f1ac 0c03 	sub.w	ip, ip, #3
  401f7a:	bf94      	ite	ls
  401f7c:	0212      	lslls	r2, r2, #8
    return((E >= n - 3) ? -1 : E);
  401f7e:	f06f 02ff 	mvnhi.w	r2, #255	; 0xff
  401f82:	f3cc 0c47 	ubfx	ip, ip, #1, #8
  401f86:	2807      	cmp	r0, #7
  401f88:	bf94      	ite	ls
  401f8a:	0100      	lslls	r0, r0, #4
  401f8c:	f06f 000f 	mvnhi.w	r0, #15
  401f90:	f1bc 0f07 	cmp.w	ip, #7
  401f94:	f200 81e7 	bhi.w	402366 <_zbar_decode_code128+0x52a>
  401f98:	ea43 030c 	orr.w	r3, r3, ip
  401f9c:	4313      	orrs	r3, r2
  401f9e:	4303      	orrs	r3, r0
    if(sig < 0)
  401fa0:	2b00      	cmp	r3, #0
  401fa2:	f2c0 81e0 	blt.w	402366 <_zbar_decode_code128+0x52a>
        return(-1);
    dbprintf(2, " sig=%04x", sig);
    /* lookup edge signature */
    c = (sig & 0x4444) ? decode_hi(sig) : decode_lo(sig);
  401fa6:	f244 4244 	movw	r2, #17476	; 0x4444
  401faa:	401a      	ands	r2, r3
  401fac:	2a00      	cmp	r2, #0
  401fae:	d056      	beq.n	40205e <_zbar_decode_code128+0x222>
    return(c);
}

static inline signed char decode_hi (int sig)
{
    unsigned char rev = (sig & 0x4400) != 0;
  401fb0:	f413 4f88 	tst.w	r3, #17408	; 0x4400
  401fb4:	bf14      	ite	ne
  401fb6:	2001      	movne	r0, #1
  401fb8:	2000      	moveq	r0, #0
    unsigned char idx, c;
    if(rev)
  401fba:	b190      	cbz	r0, 401fe2 <_zbar_decode_code128+0x1a6>
        sig = (((sig >> 12) & 0x000f) |
               ((sig >>  4) & 0x00f0) |
  401fbc:	ea4f 1a23 	mov.w	sl, r3, asr #4
static inline signed char decode_hi (int sig)
{
    unsigned char rev = (sig & 0x4400) != 0;
    unsigned char idx, c;
    if(rev)
        sig = (((sig >> 12) & 0x000f) |
  401fc0:	f3c3 3c03 	ubfx	ip, r3, #12, #4
               ((sig >>  4) & 0x00f0) |
               ((sig <<  4) & 0x0f00) |
  401fc4:	011a      	lsls	r2, r3, #4
{
    unsigned char rev = (sig & 0x4400) != 0;
    unsigned char idx, c;
    if(rev)
        sig = (((sig >> 12) & 0x000f) |
               ((sig >>  4) & 0x00f0) |
  401fc6:	f00a 0af0 	and.w	sl, sl, #240	; 0xf0
static inline signed char decode_hi (int sig)
{
    unsigned char rev = (sig & 0x4400) != 0;
    unsigned char idx, c;
    if(rev)
        sig = (((sig >> 12) & 0x000f) |
  401fca:	ea4a 0c0c 	orr.w	ip, sl, ip
               ((sig >>  4) & 0x00f0) |
               ((sig <<  4) & 0x0f00) |
  401fce:	f402 6270 	and.w	r2, r2, #3840	; 0xf00
               ((sig << 12) & 0xf000));
  401fd2:	ea4f 3b03 	mov.w	fp, r3, lsl #12
{
    unsigned char rev = (sig & 0x4400) != 0;
    unsigned char idx, c;
    if(rev)
        sig = (((sig >> 12) & 0x000f) |
               ((sig >>  4) & 0x00f0) |
  401fd6:	ea4c 0c02 	orr.w	ip, ip, r2
               ((sig <<  4) & 0x0f00) |
               ((sig << 12) & 0xf000));
  401fda:	fa1f f38b 	uxth.w	r3, fp
static inline signed char decode_hi (int sig)
{
    unsigned char rev = (sig & 0x4400) != 0;
    unsigned char idx, c;
    if(rev)
        sig = (((sig >> 12) & 0x000f) |
  401fde:	ea4c 0303 	orr.w	r3, ip, r3
               ((sig >>  4) & 0x00f0) |
               ((sig <<  4) & 0x0f00) |
               ((sig << 12) & 0xf000));
    dbprintf(2, " rev=%x", rev != 0);

    switch(sig) {
  401fe2:	f240 3241 	movw	r2, #833	; 0x341
  401fe6:	4293      	cmp	r3, r2
  401fe8:	f000 82d5 	beq.w	402596 <_zbar_decode_code128+0x75a>
  401fec:	dd22      	ble.n	402034 <_zbar_decode_code128+0x1f8>
  401fee:	f241 1234 	movw	r2, #4404	; 0x1134
  401ff2:	4293      	cmp	r3, r2
  401ff4:	f000 82cc 	beq.w	402590 <_zbar_decode_code128+0x754>
  401ff8:	f300 8247 	bgt.w	40248a <_zbar_decode_code128+0x64e>
  401ffc:	f241 0224 	movw	r2, #4132	; 0x1024
  402000:	4293      	cmp	r3, r2
  402002:	f000 826f 	beq.w	4024e4 <_zbar_decode_code128+0x6a8>
  402006:	f241 1214 	movw	r2, #4372	; 0x1114
  40200a:	4293      	cmp	r3, r2
  40200c:	f000 82ba 	beq.w	402584 <_zbar_decode_code128+0x748>
  402010:	f240 3252 	movw	r2, #850	; 0x352
  402014:	4293      	cmp	r3, r2
  402016:	f000 82b0 	beq.w	40257a <_zbar_decode_code128+0x73e>
    dbprintf(2, "      code128[%c%02d+%x]:",
             (dcode128->direction) ? '<' : '>',
             dcode128->character, dcode128->element);

    c = decode6(dcode);
    if(dcode128->character < 0) {
  40201a:	b236      	sxth	r6, r6
  40201c:	2e00      	cmp	r6, #0
  40201e:	f280 81a7 	bge.w	402370 <_zbar_decode_code128+0x534>
  402022:	e739      	b.n	401e98 <_zbar_decode_code128+0x5c>
    if((dcode128->character < 0)
       ? get_color(dcode) != ZBAR_SPACE
       : (/* process every 6th element of active symbol */
          ++dcode128->element != 6 ||
          /* decode color based on direction */
          get_color(dcode) != dcode128->direction))
  402024:	b2e3      	uxtb	r3, r4
};

/* return current element color */
static inline char get_color (const zbar_decoder_t *dcode)
{
    return(dcode->idx & 1);
  402026:	f001 0c01 	and.w	ip, r1, #1
  40202a:	f003 0301 	and.w	r3, r3, #1
  40202e:	ea83 030c 	eor.w	r3, r3, ip
  402032:	e739      	b.n	401ea8 <_zbar_decode_code128+0x6c>
               ((sig >>  4) & 0x00f0) |
               ((sig <<  4) & 0x0f00) |
               ((sig << 12) & 0xf000));
    dbprintf(2, " rev=%x", rev != 0);

    switch(sig) {
  402034:	2b34      	cmp	r3, #52	; 0x34
  402036:	f000 829a 	beq.w	40256e <_zbar_decode_code128+0x732>
  40203a:	f340 8290 	ble.w	40255e <_zbar_decode_code128+0x722>
  40203e:	f240 1243 	movw	r2, #323	; 0x143
  402042:	4293      	cmp	r3, r2
  402044:	f000 8254 	beq.w	4024f0 <_zbar_decode_code128+0x6b4>
  402048:	f240 2243 	movw	r2, #579	; 0x243
  40204c:	4293      	cmp	r3, r2
  40204e:	f000 829c 	beq.w	40258a <_zbar_decode_code128+0x74e>
  402052:	f5b3 7f9a 	cmp.w	r3, #308	; 0x134
  402056:	d1e0      	bne.n	40201a <_zbar_decode_code128+0x1de>
  402058:	2254      	movs	r2, #84	; 0x54
  40205a:	2362      	movs	r3, #98	; 0x62
  40205c:	e224      	b.n	4024a8 <_zbar_decode_code128+0x66c>
};

static inline signed char decode_lo (int sig)
{
    unsigned char offset = (((sig >> 1) & 0x01) |
                            ((sig >> 3) & 0x06) |
  40205e:	ea4f 0ce3 	mov.w	ip, r3, asr #3
    0xf7, 0xff, 0xf8, 0x9f, 0xff, 0xff, 0xff, 0xff,     /* 33 */
};

static inline signed char decode_lo (int sig)
{
    unsigned char offset = (((sig >> 1) & 0x01) |
  402062:	f00c 0a06 	and.w	sl, ip, #6
                            ((sig >> 3) & 0x06) |
                            ((sig >> 5) & 0x18) |
  402066:	1158      	asrs	r0, r3, #5
    0xf7, 0xff, 0xf8, 0x9f, 0xff, 0xff, 0xff, 0xff,     /* 33 */
};

static inline signed char decode_lo (int sig)
{
    unsigned char offset = (((sig >> 1) & 0x01) |
  402068:	f3c3 0c40 	ubfx	ip, r3, #1, #1
  40206c:	ea4a 0c0c 	orr.w	ip, sl, ip
  402070:	f000 0018 	and.w	r0, r0, #24
                            ((sig >> 3) & 0x06) |
                            ((sig >> 5) & 0x18) |
                            ((sig >> 7) & 0x60));
  402074:	ea4f 1ae3 	mov.w	sl, r3, asr #7
    0xf7, 0xff, 0xf8, 0x9f, 0xff, 0xff, 0xff, 0xff,     /* 33 */
};

static inline signed char decode_lo (int sig)
{
    unsigned char offset = (((sig >> 1) & 0x01) |
  402078:	ea4c 0000 	orr.w	r0, ip, r0
  40207c:	f00a 0260 	and.w	r2, sl, #96	; 0x60
                            ((sig >> 3) & 0x06) |
                            ((sig >> 5) & 0x18) |
                            ((sig >> 7) & 0x60));
    unsigned char idx = lo_offset[offset];
  402080:	4302      	orrs	r2, r0
  402082:	4878      	ldr	r0, [pc, #480]	; (402264 <_zbar_decode_code128+0x428>)
  402084:	f810 a002 	ldrb.w	sl, [r0, r2]
    unsigned char base, c;

    if(sig & 1)
  402088:	07d8      	lsls	r0, r3, #31
        idx &= 0xf;
  40208a:	bf4c      	ite	mi
  40208c:	f00a 0a0f 	andmi.w	sl, sl, #15
    else
        idx >>= 4;
  402090:	ea4f 1a1a 	movpl.w	sl, sl, lsr #4
    if(idx == 0xf)
  402094:	f1ba 0f0f 	cmp.w	sl, #15
  402098:	d0bf      	beq.n	40201a <_zbar_decode_code128+0x1de>
        return(-1);

    base = (sig >> 11) | ((sig >> 9) & 1);
  40209a:	f3c3 2c40 	ubfx	ip, r3, #9, #1
  40209e:	ea4c 2ce3 	orr.w	ip, ip, r3, asr #11
  4020a2:	fa5f fc8c 	uxtb.w	ip, ip
    zassert(base < 8, -1, "sig=%x offset=%x idx=%x base=%x\n",
  4020a6:	f1bc 0f07 	cmp.w	ip, #7
  4020aa:	f200 8437 	bhi.w	40291c <_zbar_decode_code128+0xae0>
            sig, offset, idx, base);
    idx += lo_base[base];
  4020ae:	486e      	ldr	r0, [pc, #440]	; (402268 <_zbar_decode_code128+0x42c>)
  4020b0:	f810 000c 	ldrb.w	r0, [r0, ip]
  4020b4:	4482      	add	sl, r0
  4020b6:	fa5f fa8a 	uxtb.w	sl, sl

    zassert(idx <= 0x50, -1, "sig=%x offset=%x base=%x idx=%x\n",
  4020ba:	f1ba 0f50 	cmp.w	sl, #80	; 0x50
  4020be:	f200 8446 	bhi.w	40294e <_zbar_decode_code128+0xb12>
            sig, offset, base, idx);
    c = characters[idx];
  4020c2:	4b6a      	ldr	r3, [pc, #424]	; (40226c <_zbar_decode_code128+0x430>)
    dbprintf(2, " %02x(%x(%02x)/%x(%02x)) => %02x",
             idx, base, lo_base[base], offset, lo_offset[offset],
             (unsigned char)c);
    return(c);
  4020c4:	f813 300a 	ldrb.w	r3, [r3, sl]
    if(sig < 0)
        return(-1);
    dbprintf(2, " sig=%04x", sig);
    /* lookup edge signature */
    c = (sig & 0x4444) ? decode_hi(sig) : decode_lo(sig);
    if(c == -1)
  4020c8:	b25a      	sxtb	r2, r3
  4020ca:	1c50      	adds	r0, r2, #1
  4020cc:	f000 814b 	beq.w	402366 <_zbar_decode_code128+0x52a>
        return(-1);

    /* character validation */
    bars = (get_color(dcode) == ZBAR_BAR)
        ? (get_width(dcode, 0) + get_width(dcode, 2) + get_width(dcode, 4))
        : (get_width(dcode, 1) + get_width(dcode, 3) + get_width(dcode, 5));
  4020d0:	9809      	ldr	r0, [sp, #36]	; 0x24
  4020d2:	2800      	cmp	r0, #0
  4020d4:	f040 8161 	bne.w	40239a <_zbar_decode_code128+0x55e>

/* retrieve i-th previous element width */
static inline unsigned get_width (const zbar_decoder_t *dcode,
                                  unsigned char offset)
{
    return(dcode->w[(dcode->idx - offset) & (DECODE_WINDOW - 1)]);
  4020d8:	980a      	ldr	r0, [sp, #40]	; 0x28
  4020da:	f009 090f 	and.w	r9, r9, #15
  4020de:	f000 000f 	and.w	r0, r0, #15
  4020e2:	3905      	subs	r1, #5
  4020e4:	eb04 0080 	add.w	r0, r4, r0, lsl #2
  4020e8:	eb04 0989 	add.w	r9, r4, r9, lsl #2
  4020ec:	f001 010f 	and.w	r1, r1, #15
  4020f0:	eb04 0181 	add.w	r1, r4, r1, lsl #2
  4020f4:	f8d0 c004 	ldr.w	ip, [r0, #4]
  4020f8:	f8d9 e004 	ldr.w	lr, [r9, #4]
  4020fc:	6848      	ldr	r0, [r1, #4]
  4020fe:	eb0c 010e 	add.w	r1, ip, lr
  402102:	4408      	add	r0, r1
    bars = bars * 11 * 4 / s;
  402104:	212c      	movs	r1, #44	; 0x2c
    return(c);
}

static inline unsigned char calc_check (unsigned char c)
{
    if(!(c & 0x80))
  402106:	2a00      	cmp	r2, #0

    /* character validation */
    bars = (get_color(dcode) == ZBAR_BAR)
        ? (get_width(dcode, 0) + get_width(dcode, 2) + get_width(dcode, 4))
        : (get_width(dcode, 1) + get_width(dcode, 3) + get_width(dcode, 5));
    bars = bars * 11 * 4 / s;
  402108:	fb01 f100 	mul.w	r1, r1, r0
  40210c:	fbb1 f1f5 	udiv	r1, r1, r5
    return(c);
}

static inline unsigned char calc_check (unsigned char c)
{
    if(!(c & 0x80))
  402110:	f2c0 81d0 	blt.w	4024b4 <_zbar_decode_code128+0x678>
  402114:	201f      	movs	r0, #31
  402116:	2211      	movs	r2, #17
        ? (get_width(dcode, 0) + get_width(dcode, 2) + get_width(dcode, 4))
        : (get_width(dcode, 1) + get_width(dcode, 3) + get_width(dcode, 5));
    bars = bars * 11 * 4 / s;
    chk = calc_check(c);
    dbprintf(2, " bars=%d chk=%d", bars, chk);
    if(chk - 7 > bars || bars > chk + 7)
  402118:	4291      	cmp	r1, r2
  40211a:	f0c0 8124 	bcc.w	402366 <_zbar_decode_code128+0x52a>
  40211e:	4281      	cmp	r1, r0
  402120:	f200 8121 	bhi.w	402366 <_zbar_decode_code128+0x52a>
    dbprintf(2, "      code128[%c%02d+%x]:",
             (dcode128->direction) ? '<' : '>',
             dcode128->character, dcode128->element);

    c = decode6(dcode);
    if(dcode128->character < 0) {
  402124:	f1b8 0f00 	cmp.w	r8, #0
    chk = calc_check(c);
    dbprintf(2, " bars=%d chk=%d", bars, chk);
    if(chk - 7 > bars || bars > chk + 7)
        return(-1);

    return(c & 0x7f);
  402128:	f003 097f 	and.w	r9, r3, #127	; 0x7f
    dbprintf(2, "      code128[%c%02d+%x]:",
             (dcode128->direction) ? '<' : '>',
             dcode128->character, dcode128->element);

    c = decode6(dcode);
    if(dcode128->character < 0) {
  40212c:	f2c0 8148 	blt.w	4023c0 <_zbar_decode_code128+0x584>
        dcode128->start = c;
        dcode128->width = dcode128->s6;
        dbprintf(2, " dir=%x [valid start]\n", dcode128->direction);
        return(0);
    }
    else if(c < 0 || size_buf(dcode, dcode128->character + 1)) {
  402130:	f108 0801 	add.w	r8, r8, #1
/* ensure output buffer has sufficient allocation for request */
static inline char size_buf (zbar_decoder_t *dcode,
                             unsigned len)
{
    unsigned char *buf;
    if(len <= BUFFER_MIN)
  402134:	f1b8 0f20 	cmp.w	r8, #32
  402138:	f300 8174 	bgt.w	402424 <_zbar_decode_code128+0x5e8>
        dcode128->character = -1;
        return(0);
    }
    else {
        unsigned dw;
        if(dcode128->width > dcode128->s6)
  40213c:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
  402140:	42ab      	cmp	r3, r5
  402142:	f240 81c4 	bls.w	4024ce <_zbar_decode_code128+0x692>
            dw = dcode128->width - dcode128->s6;
  402146:	1b5a      	subs	r2, r3, r5
        else
            dw = dcode128->s6 - dcode128->width;
        dw *= 4;
        if(dw > dcode128->width) {
  402148:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
  40214c:	f0c0 810f 	bcc.w	40236e <_zbar_decode_code128+0x532>
            return(0);
        }
    }
    dcode128->width = dcode128->s6;

    zassert(dcode->buf_alloc > dcode128->character, 0,
  402150:	6d67      	ldr	r7, [r4, #84]	; 0x54
                release_lock(dcode, ZBAR_CODE128);
            dcode128->character = -1;
            return(0);
        }
    }
    dcode128->width = dcode128->s6;
  402152:	f8c4 510c 	str.w	r5, [r4, #268]	; 0x10c

    zassert(dcode->buf_alloc > dcode128->character, 0,
  402156:	b235      	sxth	r5, r6
  402158:	42af      	cmp	r7, r5
  40215a:	f240 81cc 	bls.w	4024f6 <_zbar_decode_code128+0x6ba>
            "alloc=%x idx=%x c=%02x %s\n",
            dcode->buf_alloc, dcode128->character, c,
            _zbar_decoder_buf_dump(dcode->buf, dcode->buf_alloc));

    if(dcode128->character == 1) {
  40215e:	f8b4 3104 	ldrh.w	r3, [r4, #260]	; 0x104
  402162:	f023 030f 	bic.w	r3, r3, #15
  402166:	b29b      	uxth	r3, r3
  402168:	2b10      	cmp	r3, #16
  40216a:	f000 8221 	beq.w	4025b0 <_zbar_decode_code128+0x774>
            return(0);
        }
        dcode->buf[0] = dcode128->start;
    }

    dcode->buf[dcode128->character++] = c;
  40216e:	f8b4 3104 	ldrh.w	r3, [r4, #260]	; 0x104
  402172:	6de1      	ldr	r1, [r4, #92]	; 0x5c
  402174:	f3c6 060b 	ubfx	r6, r6, #0, #12
  402178:	3601      	adds	r6, #1
  40217a:	f366 130f 	bfi	r3, r6, #4, #12
  40217e:	fa5f f289 	uxtb.w	r2, r9
  402182:	f8a4 3104 	strh.w	r3, [r4, #260]	; 0x104
  402186:	554a      	strb	r2, [r1, r5]

    if(dcode128->character > 2 &&
  402188:	f8b4 0104 	ldrh.w	r0, [r4, #260]	; 0x104
  40218c:	f340 130b 	sbfx	r3, r0, #4, #12
  402190:	b219      	sxth	r1, r3
  402192:	2902      	cmp	r1, #2
  402194:	b29e      	uxth	r6, r3
  402196:	f77f ae7f 	ble.w	401e98 <_zbar_decode_code128+0x5c>
       ((dcode128->direction)
        ? c >= START_A && c <= START_C
  40219a:	f894 e104 	ldrb.w	lr, [r4, #260]	; 0x104
        dcode->buf[0] = dcode128->start;
    }

    dcode->buf[dcode128->character++] = c;

    if(dcode128->character > 2 &&
  40219e:	f01e 0c01 	ands.w	ip, lr, #1
  4021a2:	f000 8218 	beq.w	4025d6 <_zbar_decode_code128+0x79a>
  4021a6:	3a67      	subs	r2, #103	; 0x67
  4021a8:	2a02      	cmp	r2, #2
  4021aa:	f63f ae75 	bhi.w	401e98 <_zbar_decode_code128+0x5c>
    code128_decoder_t *dcode128 = &dcode->code128;
    if(dcode128->character < 3)
        return(1);

    /* add in irregularly weighted start character */
    idx = (dcode128->direction) ? dcode128->character - 1 : 0;
  4021ae:	1e4a      	subs	r2, r1, #1
    sum = dcode->buf[idx];
  4021b0:	6de3      	ldr	r3, [r4, #92]	; 0x5c
  4021b2:	5c9f      	ldrb	r7, [r3, r2]
    if(sum >= 103)
  4021b4:	2f66      	cmp	r7, #102	; 0x66
    if(dcode128->character < 3)
        return(1);

    /* add in irregularly weighted start character */
    idx = (dcode128->direction) ? dcode128->character - 1 : 0;
    sum = dcode->buf[idx];
  4021b6:	4699      	mov	r9, r3
    if(sum >= 103)
  4021b8:	f240 8213 	bls.w	4025e2 <_zbar_decode_code128+0x7a6>
        sum -= 103;

    /* calculate sum in reverse to avoid multiply operations */
    for(i = dcode128->character - 3; i; i--) {
  4021bc:	1ecd      	subs	r5, r1, #3

    /* add in irregularly weighted start character */
    idx = (dcode128->direction) ? dcode128->character - 1 : 0;
    sum = dcode->buf[idx];
    if(sum >= 103)
        sum -= 103;
  4021be:	3f67      	subs	r7, #103	; 0x67

    /* calculate sum in reverse to avoid multiply operations */
    for(i = dcode128->character - 3; i; i--) {
  4021c0:	462a      	mov	r2, r5
  4021c2:	2d00      	cmp	r5, #0
  4021c4:	f000 8210 	beq.w	4025e8 <_zbar_decode_code128+0x7ac>
        zassert(sum < 103, -1, "dir=%x i=%x sum=%x acc=%x %s\n",
  4021c8:	2f66      	cmp	r7, #102	; 0x66
  4021ca:	f200 81ad 	bhi.w	402528 <_zbar_decode_code128+0x6ec>
  4021ce:	f1bc 0f00 	cmp.w	ip, #0
  4021d2:	f000 8378 	beq.w	4028c6 <_zbar_decode_code128+0xa8a>
  4021d6:	f1a1 0a02 	sub.w	sl, r1, #2
  4021da:	ebc2 0a0a 	rsb	sl, r2, sl
  4021de:	449a      	add	sl, r3
  4021e0:	3a01      	subs	r2, #1
    code128_decoder_t *dcode128 = &dcode->code128;
    if(dcode128->character < 3)
        return(1);

    /* add in irregularly weighted start character */
    idx = (dcode128->direction) ? dcode128->character - 1 : 0;
  4021e2:	2500      	movs	r5, #0
  4021e4:	e007      	b.n	4021f6 <_zbar_decode_code128+0x3ba>
        if(acc >= 103)
            acc -= 103;
        zassert(acc < 103, -1, "dir=%x i=%x sum=%x acc=%x %s\n",
                dcode128->direction, i, sum, acc,
                _zbar_decoder_buf_dump(dcode->buf, dcode128->character));
        sum += acc;
  4021e6:	442f      	add	r7, r5
        if(sum >= 103)
  4021e8:	2f66      	cmp	r7, #102	; 0x66
            sum -= 103;
  4021ea:	bf88      	it	hi
  4021ec:	3f67      	subhi	r7, #103	; 0x67
    sum = dcode->buf[idx];
    if(sum >= 103)
        sum -= 103;

    /* calculate sum in reverse to avoid multiply operations */
    for(i = dcode128->character - 3; i; i--) {
  4021ee:	2a00      	cmp	r2, #0
  4021f0:	f000 81fa 	beq.w	4025e8 <_zbar_decode_code128+0x7ac>
  4021f4:	3a01      	subs	r2, #1
        zassert(sum < 103, -1, "dir=%x i=%x sum=%x acc=%x %s\n",
                dcode128->direction, i, sum, acc,
                _zbar_decoder_buf_dump(dcode->buf, dcode128->character));
        idx = (dcode128->direction) ? dcode128->character - 1 - i : i;
        acc += dcode->buf[idx];
  4021f6:	f81a 8f01 	ldrb.w	r8, [sl, #1]!
  4021fa:	4445      	add	r5, r8
        if(acc >= 103)
  4021fc:	2d66      	cmp	r5, #102	; 0x66
  4021fe:	f102 0801 	add.w	r8, r2, #1
  402202:	d9f0      	bls.n	4021e6 <_zbar_decode_code128+0x3aa>
            acc -= 103;
  402204:	3d67      	subs	r5, #103	; 0x67
        zassert(acc < 103, -1, "dir=%x i=%x sum=%x acc=%x %s\n",
  402206:	2d66      	cmp	r5, #102	; 0x66
  402208:	d9ed      	bls.n	4021e6 <_zbar_decode_code128+0x3aa>
  40220a:	4819      	ldr	r0, [pc, #100]	; (402270 <_zbar_decode_code128+0x434>)
  40220c:	4a19      	ldr	r2, [pc, #100]	; (402274 <_zbar_decode_code128+0x438>)
  40220e:	6806      	ldr	r6, [r0, #0]
  402210:	4618      	mov	r0, r3
  402212:	f00e 0901 	and.w	r9, lr, #1
  402216:	68f6      	ldr	r6, [r6, #12]
  402218:	4790      	blx	r2
  40221a:	4a17      	ldr	r2, [pc, #92]	; (402278 <_zbar_decode_code128+0x43c>)
  40221c:	4b17      	ldr	r3, [pc, #92]	; (40227c <_zbar_decode_code128+0x440>)
  40221e:	9006      	str	r0, [sp, #24]
  402220:	e88d 000c 	stmia.w	sp, {r2, r3}
  402224:	9505      	str	r5, [sp, #20]
  402226:	f8cd 9008 	str.w	r9, [sp, #8]
  40222a:	4630      	mov	r0, r6
  40222c:	f8cd 800c 	str.w	r8, [sp, #12]
  402230:	9704      	str	r7, [sp, #16]
  402232:	4913      	ldr	r1, [pc, #76]	; (402280 <_zbar_decode_code128+0x444>)
  402234:	4a13      	ldr	r2, [pc, #76]	; (402284 <_zbar_decode_code128+0x448>)
  402236:	4d14      	ldr	r5, [pc, #80]	; (402288 <_zbar_decode_code128+0x44c>)
  402238:	f44f 7383 	mov.w	r3, #262	; 0x106
  40223c:	47a8      	blx	r5
            dbprintf(2, " [invalid len]\n");
            sym = ZBAR_NONE;
        }
        else
            dbprintf(2, " [valid end]\n");
        dcode128->character = -1;
  40223e:	f8b4 3104 	ldrh.w	r3, [r4, #260]	; 0x104

/* check and release shared state lock */
static inline char release_lock (zbar_decoder_t *dcode,
                                 zbar_symbol_type_t req)
{
    zassert(dcode->lock == req, 1, "lock=%d req=%d\n",
  402242:	f8b4 2046 	ldrh.w	r2, [r4, #70]	; 0x46
  402246:	f04f 31ff 	mov.w	r1, #4294967295
  40224a:	f361 130f 	bfi	r3, r1, #4, #12
  40224e:	2a80      	cmp	r2, #128	; 0x80
  402250:	f8a4 3104 	strh.w	r3, [r4, #260]	; 0x104
  402254:	f040 8416 	bne.w	402a84 <_zbar_decode_code128+0xc48>
            dcode->lock, req);
    dcode->lock = 0;
  402258:	2000      	movs	r0, #0
  40225a:	f8a4 0046 	strh.w	r0, [r4, #70]	; 0x46
  40225e:	e61c      	b.n	401e9a <_zbar_decode_code128+0x5e>
  402260:	fffff000 	.word	0xfffff000
  402264:	004108dc 	.word	0x004108dc
  402268:	00410de0 	.word	0x00410de0
  40226c:	00410de8 	.word	0x00410de8
  402270:	200008b0 	.word	0x200008b0
  402274:	00403dfd 	.word	0x00403dfd
  402278:	004108b8 	.word	0x004108b8
  40227c:	00410ba0 	.word	0x00410ba0
  402280:	00410b48 	.word	0x00410b48
  402284:	004109c8 	.word	0x004109c8
  402288:	0040814d 	.word	0x0040814d

/* retrieve i-th previous element width */
static inline unsigned get_width (const zbar_decoder_t *dcode,
                                  unsigned char offset)
{
    return(dcode->w[(dcode->idx - offset) & (DECODE_WINDOW - 1)]);
  40228c:	f101 39ff 	add.w	r9, r1, #4294967295
  402290:	f009 030f 	and.w	r3, r9, #15
  402294:	eb04 0383 	add.w	r3, r4, r3, lsl #2
{
    /* result is encoded number of units - 2
     * (for use as zero based index)
     * or -1 if invalid
     */
    unsigned char E = ((e * n * 2 + 1) / s - 3) / 2;
  402298:	f04f 0a16 	mov.w	sl, #22

/* retrieve i-th previous element width */
static inline unsigned get_width (const zbar_decoder_t *dcode,
                                  unsigned char offset)
{
    return(dcode->w[(dcode->idx - offset) & (DECODE_WINDOW - 1)]);
  40229c:	6858      	ldr	r0, [r3, #4]
  40229e:	1e8b      	subs	r3, r1, #2
    dbprintf(2, " s=%d", s);
    if(s < 5)
        return(-1);
    /* calculate similar edge measurements */
    sig = (get_color(dcode) == ZBAR_BAR)
        ? ((decode_e(get_width(dcode, 0) + get_width(dcode, 1), s, 11) << 12) |
  4022a0:	4402      	add	r2, r0
{
    /* result is encoded number of units - 2
     * (for use as zero based index)
     * or -1 if invalid
     */
    unsigned char E = ((e * n * 2 + 1) / s - 3) / 2;
  4022a2:	fb0a fa02 	mul.w	sl, sl, r2

/* retrieve i-th previous element width */
static inline unsigned get_width (const zbar_decoder_t *dcode,
                                  unsigned char offset)
{
    return(dcode->w[(dcode->idx - offset) & (DECODE_WINDOW - 1)]);
  4022a6:	f003 020f 	and.w	r2, r3, #15
  4022aa:	eb04 0282 	add.w	r2, r4, r2, lsl #2
  4022ae:	930c      	str	r3, [sp, #48]	; 0x30
  4022b0:	6852      	ldr	r2, [r2, #4]
{
    /* result is encoded number of units - 2
     * (for use as zero based index)
     * or -1 if invalid
     */
    unsigned char E = ((e * n * 2 + 1) / s - 3) / 2;
  4022b2:	2316      	movs	r3, #22
           (decode_e(get_width(dcode, 1) + get_width(dcode, 2), s, 11) << 8) |
  4022b4:	eb02 0b00 	add.w	fp, r2, r0
  4022b8:	fb03 fb0b 	mul.w	fp, r3, fp

/* retrieve i-th previous element width */
static inline unsigned get_width (const zbar_decoder_t *dcode,
                                  unsigned char offset)
{
    return(dcode->w[(dcode->idx - offset) & (DECODE_WINDOW - 1)]);
  4022bc:	1ecb      	subs	r3, r1, #3
  4022be:	f003 000f 	and.w	r0, r3, #15
  4022c2:	eb04 0080 	add.w	r0, r4, r0, lsl #2
{
    /* result is encoded number of units - 2
     * (for use as zero based index)
     * or -1 if invalid
     */
    unsigned char E = ((e * n * 2 + 1) / s - 3) / 2;
  4022c6:	f10a 0a01 	add.w	sl, sl, #1

/* retrieve i-th previous element width */
static inline unsigned get_width (const zbar_decoder_t *dcode,
                                  unsigned char offset)
{
    return(dcode->w[(dcode->idx - offset) & (DECODE_WINDOW - 1)]);
  4022ca:	f8d0 c004 	ldr.w	ip, [r0, #4]
{
    /* result is encoded number of units - 2
     * (for use as zero based index)
     * or -1 if invalid
     */
    unsigned char E = ((e * n * 2 + 1) / s - 3) / 2;
  4022ce:	fbba faf5 	udiv	sl, sl, r5
           (decode_e(get_width(dcode, 2) + get_width(dcode, 3), s, 11) << 4) |
  4022d2:	4462      	add	r2, ip
  4022d4:	f1aa 0a03 	sub.w	sl, sl, #3

/* retrieve i-th previous element width */
static inline unsigned get_width (const zbar_decoder_t *dcode,
                                  unsigned char offset)
{
    return(dcode->w[(dcode->idx - offset) & (DECODE_WINDOW - 1)]);
  4022d8:	930a      	str	r3, [sp, #40]	; 0x28
{
    /* result is encoded number of units - 2
     * (for use as zero based index)
     * or -1 if invalid
     */
    unsigned char E = ((e * n * 2 + 1) / s - 3) / 2;
  4022da:	2316      	movs	r3, #22
    return((E >= n - 3) ? -1 : E);
  4022dc:	f3ca 0a47 	ubfx	sl, sl, #1, #8
{
    /* result is encoded number of units - 2
     * (for use as zero based index)
     * or -1 if invalid
     */
    unsigned char E = ((e * n * 2 + 1) / s - 3) / 2;
  4022e0:	fb03 f302 	mul.w	r3, r3, r2
  4022e4:	f10b 0b01 	add.w	fp, fp, #1
  4022e8:	fbbb fbf5 	udiv	fp, fp, r5
  4022ec:	f1ab 0b03 	sub.w	fp, fp, #3
    return((E >= n - 3) ? -1 : E);
  4022f0:	f1ba 0f07 	cmp.w	sl, #7
  4022f4:	f3cb 0b47 	ubfx	fp, fp, #1, #8
{
    /* result is encoded number of units - 2
     * (for use as zero based index)
     * or -1 if invalid
     */
    unsigned char E = ((e * n * 2 + 1) / s - 3) / 2;
  4022f8:	f103 0301 	add.w	r3, r3, #1
  4022fc:	fbb3 f3f5 	udiv	r3, r3, r5
  402300:	f1a3 0303 	sub.w	r3, r3, #3
    return((E >= n - 3) ? -1 : E);
  402304:	f3c3 0347 	ubfx	r3, r3, #1, #8
  402308:	bf94      	ite	ls
  40230a:	ea4f 3a0a 	movls.w	sl, sl, lsl #12
  40230e:	f8df a3f4 	ldrhi.w	sl, [pc, #1012]	; 402704 <_zbar_decode_code128+0x8c8>
  402312:	f1bb 0f07 	cmp.w	fp, #7
  402316:	bf94      	ite	ls
  402318:	ea4f 2b0b 	movls.w	fp, fp, lsl #8
  40231c:	f06f 0bff 	mvnhi.w	fp, #255	; 0xff
  402320:	2b07      	cmp	r3, #7
  402322:	bf98      	it	ls
  402324:	011a      	lslls	r2, r3, #4

/* retrieve i-th previous element width */
static inline unsigned get_width (const zbar_decoder_t *dcode,
                                  unsigned char offset)
{
    return(dcode->w[(dcode->idx - offset) & (DECODE_WINDOW - 1)]);
  402326:	f1a1 0304 	sub.w	r3, r1, #4
  40232a:	f003 000f 	and.w	r0, r3, #15
  40232e:	eb04 0080 	add.w	r0, r4, r0, lsl #2
  402332:	930b      	str	r3, [sp, #44]	; 0x2c
           (decode_e(get_width(dcode, 3) + get_width(dcode, 4), s, 11)))
  402334:	6840      	ldr	r0, [r0, #4]
{
    /* result is encoded number of units - 2
     * (for use as zero based index)
     * or -1 if invalid
     */
    unsigned char E = ((e * n * 2 + 1) / s - 3) / 2;
  402336:	f04f 0316 	mov.w	r3, #22
  40233a:	4460      	add	r0, ip
  40233c:	fb03 f300 	mul.w	r3, r3, r0
  402340:	f103 0301 	add.w	r3, r3, #1
  402344:	fbb3 f3f5 	udiv	r3, r3, r5
  402348:	f1a3 0303 	sub.w	r3, r3, #3
    return((E >= n - 3) ? -1 : E);
  40234c:	f3c3 0347 	ubfx	r3, r3, #1, #8
  402350:	bf88      	it	hi
  402352:	f06f 020f 	mvnhi.w	r2, #15
  402356:	2b07      	cmp	r3, #7
  402358:	d805      	bhi.n	402366 <_zbar_decode_code128+0x52a>
  40235a:	ea4a 0303 	orr.w	r3, sl, r3
  40235e:	ea43 030b 	orr.w	r3, r3, fp
  402362:	4313      	orrs	r3, r2
  402364:	e61c      	b.n	401fa0 <_zbar_decode_code128+0x164>
    dbprintf(2, "      code128[%c%02d+%x]:",
             (dcode128->direction) ? '<' : '>',
             dcode128->character, dcode128->element);

    c = decode6(dcode);
    if(dcode128->character < 0) {
  402366:	f1b8 0f00 	cmp.w	r8, #0
  40236a:	f6ff ad95 	blt.w	401e98 <_zbar_decode_code128+0x5c>
        else
            dw = dcode128->s6 - dcode128->width;
        dw *= 4;
        if(dw > dcode128->width) {
            dbprintf(1, " [width var]\n");
            if(dcode128->character > 1)
  40236e:	b236      	sxth	r6, r6
  402370:	2e01      	cmp	r6, #1
  402372:	dd06      	ble.n	402382 <_zbar_decode_code128+0x546>

/* check and release shared state lock */
static inline char release_lock (zbar_decoder_t *dcode,
                                 zbar_symbol_type_t req)
{
    zassert(dcode->lock == req, 1, "lock=%d req=%d\n",
  402374:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
  402378:	2b80      	cmp	r3, #128	; 0x80
  40237a:	d175      	bne.n	402468 <_zbar_decode_code128+0x62c>
            dcode->lock, req);
    dcode->lock = 0;
  40237c:	2300      	movs	r3, #0
  40237e:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
    }
    else if(c < 0 || size_buf(dcode, dcode128->character + 1)) {
        dbprintf(1, (c < 0) ? " [aborted]\n" : " [overflow]\n");
        if(dcode128->character > 1)
            release_lock(dcode, ZBAR_CODE128);
        dcode128->character = -1;
  402382:	f8b4 3104 	ldrh.w	r3, [r4, #260]	; 0x104
  402386:	f04f 32ff 	mov.w	r2, #4294967295
  40238a:	f362 130f 	bfi	r3, r2, #4, #12
        return(0);
  40238e:	2000      	movs	r0, #0
    }
    else if(c < 0 || size_buf(dcode, dcode128->character + 1)) {
        dbprintf(1, (c < 0) ? " [aborted]\n" : " [overflow]\n");
        if(dcode128->character > 1)
            release_lock(dcode, ZBAR_CODE128);
        dcode128->character = -1;
  402390:	f8a4 3104 	strh.w	r3, [r4, #260]	; 0x104
        return(sym);
    }

    dbprintf(2, "\n");
    return(0);
}
  402394:	b00f      	add	sp, #60	; 0x3c
  402396:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

/* retrieve i-th previous element width */
static inline unsigned get_width (const zbar_decoder_t *dcode,
                                  unsigned char offset)
{
    return(dcode->w[(dcode->idx - offset) & (DECODE_WINDOW - 1)]);
  40239a:	980b      	ldr	r0, [sp, #44]	; 0x2c
  40239c:	990c      	ldr	r1, [sp, #48]	; 0x30
  40239e:	f000 0c0f 	and.w	ip, r0, #15
  4023a2:	f001 010f 	and.w	r1, r1, #15
  4023a6:	eb04 0181 	add.w	r1, r4, r1, lsl #2
  4023aa:	eb04 0c8c 	add.w	ip, r4, ip, lsl #2
  4023ae:	f8d1 9004 	ldr.w	r9, [r1, #4]
  4023b2:	f8dc 1004 	ldr.w	r1, [ip, #4]
        return(-1);

    /* character validation */
    bars = (get_color(dcode) == ZBAR_BAR)
        ? (get_width(dcode, 0) + get_width(dcode, 2) + get_width(dcode, 4))
        : (get_width(dcode, 1) + get_width(dcode, 3) + get_width(dcode, 5));
  4023b6:	f8de 0004 	ldr.w	r0, [lr, #4]
  4023ba:	4449      	add	r1, r9
  4023bc:	4408      	add	r0, r1
  4023be:	e6a1      	b.n	402104 <_zbar_decode_code128+0x2c8>

    c = decode6(dcode);
    if(dcode128->character < 0) {
        unsigned qz;
        dbprintf(2, " c=%02x", c);
        if(c < START_A || c > STOP_REV || c == STOP_FWD) {
  4023c0:	fa5f f289 	uxtb.w	r2, r9
  4023c4:	f1a2 0367 	sub.w	r3, r2, #103	; 0x67
  4023c8:	2b04      	cmp	r3, #4
  4023ca:	f63f ad65 	bhi.w	401e98 <_zbar_decode_code128+0x5c>
  4023ce:	fa4f f389 	sxtb.w	r3, r9
  4023d2:	2b6a      	cmp	r3, #106	; 0x6a
  4023d4:	f43f ad60 	beq.w	401e98 <_zbar_decode_code128+0x5c>
  4023d8:	6879      	ldr	r1, [r7, #4]
            dbprintf(2, " [invalid]\n");
            return(0);
        }
        qz = get_width(dcode, 6);
        if(qz && qz < (dcode128->s6 * 3) / 4) {
  4023da:	b129      	cbz	r1, 4023e8 <_zbar_decode_code128+0x5ac>
  4023dc:	eb05 0045 	add.w	r0, r5, r5, lsl #1
  4023e0:	ebb1 0f90 	cmp.w	r1, r0, lsr #2
  4023e4:	f4ff ad58 	bcc.w	401e98 <_zbar_decode_code128+0x5c>
            dbprintf(2, " [invalid qz %d]\n", qz);
            return(0);
        }
        /* decoded valid start/stop */
        /* initialize state */
        dcode128->character = 1;
  4023e8:	f8b4 0104 	ldrh.w	r0, [r4, #260]	; 0x104
            dcode128->direction = ZBAR_BAR;
            dcode128->element = 7;
        }
        else
            dcode128->direction = ZBAR_SPACE;
        dcode128->start = c;
  4023ec:	f884 2106 	strb.w	r2, [r4, #262]	; 0x106
            dbprintf(2, " [invalid qz %d]\n", qz);
            return(0);
        }
        /* decoded valid start/stop */
        /* initialize state */
        dcode128->character = 1;
  4023f0:	2101      	movs	r1, #1
  4023f2:	f361 100f 	bfi	r0, r1, #4, #12
  4023f6:	f8a4 0104 	strh.w	r0, [r4, #260]	; 0x104
        if(c == STOP_REV) {
  4023fa:	2b6b      	cmp	r3, #107	; 0x6b
            dcode128->direction = ZBAR_BAR;
            dcode128->element = 7;
  4023fc:	bf08      	it	eq
  4023fe:	f894 3104 	ldrbeq.w	r3, [r4, #260]	; 0x104
        }
        else
            dcode128->direction = ZBAR_SPACE;
        dcode128->start = c;
        dcode128->width = dcode128->s6;
  402402:	f8c4 510c 	str.w	r5, [r4, #268]	; 0x10c
        /* decoded valid start/stop */
        /* initialize state */
        dcode128->character = 1;
        if(c == STOP_REV) {
            dcode128->direction = ZBAR_BAR;
            dcode128->element = 7;
  402406:	bf04      	itt	eq
  402408:	f043 030e 	orreq.w	r3, r3, #14
  40240c:	f884 3104 	strbeq.w	r3, [r4, #260]	; 0x104
  402410:	f894 3104 	ldrb.w	r3, [r4, #260]	; 0x104
        }
        else
            dcode128->direction = ZBAR_SPACE;
  402414:	bf18      	it	ne
  402416:	2100      	movne	r1, #0
  402418:	f361 0300 	bfi	r3, r1, #0, #1
  40241c:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
        dcode128->start = c;
        dcode128->width = dcode128->s6;
        dbprintf(2, " dir=%x [valid start]\n", dcode128->direction);
        return(0);
  402420:	2000      	movs	r0, #0
  402422:	e53a      	b.n	401e9a <_zbar_decode_code128+0x5e>
                             unsigned len)
{
    unsigned char *buf;
    if(len <= BUFFER_MIN)
        return(0);
    if(len < dcode->buf_alloc)
  402424:	6d63      	ldr	r3, [r4, #84]	; 0x54
  402426:	4598      	cmp	r8, r3
    }
    else if(c < 0 || size_buf(dcode, dcode128->character + 1)) {
  402428:	4647      	mov	r7, r8
  40242a:	f4ff ae87 	bcc.w	40213c <_zbar_decode_code128+0x300>
        /* FIXME size reduction heuristic? */
        return(0);
    if(len > BUFFER_MAX)
  40242e:	f5b8 7f80 	cmp.w	r8, #256	; 0x100
  402432:	d89c      	bhi.n	40236e <_zbar_decode_code128+0x532>
        return(1);
    if(len < dcode->buf_alloc + BUFFER_INCR) {
  402434:	3310      	adds	r3, #16
  402436:	4598      	cmp	r8, r3
  402438:	d205      	bcs.n	402446 <_zbar_decode_code128+0x60a>
  40243a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
  40243e:	bf28      	it	cs
  402440:	f44f 7380 	movcs.w	r3, #256	; 0x100
  402444:	461f      	mov	r7, r3
        len = dcode->buf_alloc + BUFFER_INCR;
        if(len > BUFFER_MAX)
            len = BUFFER_MAX;
    }
    buf = realloc(dcode->buf, len);
  402446:	6de0      	ldr	r0, [r4, #92]	; 0x5c
  402448:	4b9d      	ldr	r3, [pc, #628]	; (4026c0 <_zbar_decode_code128+0x884>)
  40244a:	4639      	mov	r1, r7
  40244c:	4798      	blx	r3
  40244e:	f8b4 6104 	ldrh.w	r6, [r4, #260]	; 0x104
    if(!buf)
  402452:	2800      	cmp	r0, #0
  402454:	f000 825f 	beq.w	402916 <_zbar_decode_code128+0xada>
  402458:	f346 160b 	sbfx	r6, r6, #4, #12
        return(1);
    dcode->buf = buf;
  40245c:	65e0      	str	r0, [r4, #92]	; 0x5c
    dcode->buf_alloc = len;
  40245e:	6567      	str	r7, [r4, #84]	; 0x54
  402460:	b2b6      	uxth	r6, r6
  402462:	f8d4 5108 	ldr.w	r5, [r4, #264]	; 0x108
  402466:	e669      	b.n	40213c <_zbar_decode_code128+0x300>

/* check and release shared state lock */
static inline char release_lock (zbar_decoder_t *dcode,
                                 zbar_symbol_type_t req)
{
    zassert(dcode->lock == req, 1, "lock=%d req=%d\n",
  402468:	4a96      	ldr	r2, [pc, #600]	; (4026c4 <_zbar_decode_code128+0x888>)
  40246a:	4d97      	ldr	r5, [pc, #604]	; (4026c8 <_zbar_decode_code128+0x88c>)
  40246c:	6811      	ldr	r1, [r2, #0]
  40246e:	4a97      	ldr	r2, [pc, #604]	; (4026cc <_zbar_decode_code128+0x890>)
  402470:	68c8      	ldr	r0, [r1, #12]
  402472:	9302      	str	r3, [sp, #8]
  402474:	2380      	movs	r3, #128	; 0x80
  402476:	9500      	str	r5, [sp, #0]
  402478:	9201      	str	r2, [sp, #4]
  40247a:	9303      	str	r3, [sp, #12]
  40247c:	4994      	ldr	r1, [pc, #592]	; (4026d0 <_zbar_decode_code128+0x894>)
  40247e:	4a95      	ldr	r2, [pc, #596]	; (4026d4 <_zbar_decode_code128+0x898>)
  402480:	4d95      	ldr	r5, [pc, #596]	; (4026d8 <_zbar_decode_code128+0x89c>)
  402482:	f240 1307 	movw	r3, #263	; 0x107
  402486:	47a8      	blx	r5
  402488:	e77b      	b.n	402382 <_zbar_decode_code128+0x546>
               ((sig >>  4) & 0x00f0) |
               ((sig <<  4) & 0x0f00) |
               ((sig << 12) & 0xf000));
    dbprintf(2, " rev=%x", rev != 0);

    switch(sig) {
  40248a:	f241 2243 	movw	r2, #4675	; 0x1243
  40248e:	4293      	cmp	r3, r2
  402490:	d02b      	beq.n	4024ea <_zbar_decode_code128+0x6ae>
  402492:	f241 4241 	movw	r2, #5185	; 0x1441
  402496:	4293      	cmp	r3, r2
  402498:	d072      	beq.n	402580 <_zbar_decode_code128+0x744>
  40249a:	f241 2242 	movw	r2, #4674	; 0x1242
  40249e:	4293      	cmp	r3, r2
  4024a0:	f47f adbb 	bne.w	40201a <_zbar_decode_code128+0x1de>
  4024a4:	225c      	movs	r2, #92	; 0x5c
  4024a6:	236a      	movs	r3, #106	; 0x6a
    case 0x1242: idx = 0xb; break;
    case 0x1243: idx = 0xc; break;
    case 0x1441: idx = 0xd; rev = 0; break;
    default: return(-1);
    }
    if(rev)
  4024a8:	2800      	cmp	r0, #0
  4024aa:	bf08      	it	eq
  4024ac:	4613      	moveq	r3, r2
        idx += 0xe;
    c = characters[0x51 + idx];
  4024ae:	4a8b      	ldr	r2, [pc, #556]	; (4026dc <_zbar_decode_code128+0x8a0>)
    dbprintf(2, " %02x => %02x", idx, c);
    return(c);
  4024b0:	5cd3      	ldrb	r3, [r2, r3]
  4024b2:	e609      	b.n	4020c8 <_zbar_decode_code128+0x28c>

static inline unsigned char calc_check (unsigned char c)
{
    if(!(c & 0x80))
        return(0x18);
    c &= 0x7f;
  4024b4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
    if(c < 0x3d)
  4024b8:	2a3c      	cmp	r2, #60	; 0x3c
  4024ba:	d80a      	bhi.n	4024d2 <_zbar_decode_code128+0x696>
        return((c < 0x30 && c != 0x17) ? 0x10 : 0x20);
  4024bc:	2a2f      	cmp	r2, #47	; 0x2f
  4024be:	d86d      	bhi.n	40259c <_zbar_decode_code128+0x760>
  4024c0:	2a17      	cmp	r2, #23
  4024c2:	bf0b      	itete	eq
  4024c4:	2027      	moveq	r0, #39	; 0x27
  4024c6:	2017      	movne	r0, #23
  4024c8:	2219      	moveq	r2, #25
  4024ca:	2209      	movne	r2, #9
  4024cc:	e624      	b.n	402118 <_zbar_decode_code128+0x2dc>
    else {
        unsigned dw;
        if(dcode128->width > dcode128->s6)
            dw = dcode128->width - dcode128->s6;
        else
            dw = dcode128->s6 - dcode128->width;
  4024ce:	1aea      	subs	r2, r5, r3
  4024d0:	e63a      	b.n	402148 <_zbar_decode_code128+0x30c>
    if(!(c & 0x80))
        return(0x18);
    c &= 0x7f;
    if(c < 0x3d)
        return((c < 0x30 && c != 0x17) ? 0x10 : 0x20);
    if(c < 0x50)
  4024d2:	2a4f      	cmp	r2, #79	; 0x4f
  4024d4:	d865      	bhi.n	4025a2 <_zbar_decode_code128+0x766>
        return((c == 0x4d) ? 0x20 : 0x10);
  4024d6:	2a4d      	cmp	r2, #77	; 0x4d
  4024d8:	bf0b      	itete	eq
  4024da:	2027      	moveq	r0, #39	; 0x27
  4024dc:	2017      	movne	r0, #23
  4024de:	2219      	moveq	r2, #25
  4024e0:	2209      	movne	r2, #9
  4024e2:	e619      	b.n	402118 <_zbar_decode_code128+0x2dc>
  4024e4:	2259      	movs	r2, #89	; 0x59
  4024e6:	2367      	movs	r3, #103	; 0x67
  4024e8:	e7de      	b.n	4024a8 <_zbar_decode_code128+0x66c>
  4024ea:	225d      	movs	r2, #93	; 0x5d
  4024ec:	236b      	movs	r3, #107	; 0x6b
  4024ee:	e7db      	b.n	4024a8 <_zbar_decode_code128+0x66c>
  4024f0:	2255      	movs	r2, #85	; 0x55
  4024f2:	2363      	movs	r3, #99	; 0x63
  4024f4:	e7d8      	b.n	4024a8 <_zbar_decode_code128+0x66c>
            return(0);
        }
    }
    dcode128->width = dcode128->s6;

    zassert(dcode->buf_alloc > dcode128->character, 0,
  4024f6:	4b73      	ldr	r3, [pc, #460]	; (4026c4 <_zbar_decode_code128+0x888>)
  4024f8:	6de0      	ldr	r0, [r4, #92]	; 0x5c
  4024fa:	681a      	ldr	r2, [r3, #0]
  4024fc:	4b78      	ldr	r3, [pc, #480]	; (4026e0 <_zbar_decode_code128+0x8a4>)
  4024fe:	68d4      	ldr	r4, [r2, #12]
  402500:	4639      	mov	r1, r7
  402502:	4798      	blx	r3
  402504:	4a77      	ldr	r2, [pc, #476]	; (4026e4 <_zbar_decode_code128+0x8a8>)
  402506:	4b78      	ldr	r3, [pc, #480]	; (4026e8 <_zbar_decode_code128+0x8ac>)
  402508:	9005      	str	r0, [sp, #20]
  40250a:	e88d 000c 	stmia.w	sp, {r2, r3}
  40250e:	4620      	mov	r0, r4
  402510:	9702      	str	r7, [sp, #8]
  402512:	9503      	str	r5, [sp, #12]
  402514:	f8cd 9010 	str.w	r9, [sp, #16]
  402518:	4974      	ldr	r1, [pc, #464]	; (4026ec <_zbar_decode_code128+0x8b0>)
  40251a:	4a75      	ldr	r2, [pc, #468]	; (4026f0 <_zbar_decode_code128+0x8b4>)
  40251c:	4c6e      	ldr	r4, [pc, #440]	; (4026d8 <_zbar_decode_code128+0x89c>)
  40251e:	f44f 7304 	mov.w	r3, #528	; 0x210
  402522:	47a0      	blx	r4
  402524:	2000      	movs	r0, #0
  402526:	e4b8      	b.n	401e9a <_zbar_decode_code128+0x5e>
    if(sum >= 103)
        sum -= 103;

    /* calculate sum in reverse to avoid multiply operations */
    for(i = dcode128->character - 3; i; i--) {
        zassert(sum < 103, -1, "dir=%x i=%x sum=%x acc=%x %s\n",
  402528:	4866      	ldr	r0, [pc, #408]	; (4026c4 <_zbar_decode_code128+0x888>)
  40252a:	4a6d      	ldr	r2, [pc, #436]	; (4026e0 <_zbar_decode_code128+0x8a4>)
  40252c:	f8d0 c000 	ldr.w	ip, [r0]
  402530:	4618      	mov	r0, r3
  402532:	f00e 0601 	and.w	r6, lr, #1
  402536:	f8dc 800c 	ldr.w	r8, [ip, #12]
  40253a:	4790      	blx	r2
  40253c:	496d      	ldr	r1, [pc, #436]	; (4026f4 <_zbar_decode_code128+0x8b8>)
  40253e:	4a6e      	ldr	r2, [pc, #440]	; (4026f8 <_zbar_decode_code128+0x8bc>)
  402540:	9006      	str	r0, [sp, #24]
  402542:	2300      	movs	r3, #0
  402544:	e88d 0006 	stmia.w	sp, {r1, r2}
  402548:	9503      	str	r5, [sp, #12]
  40254a:	9305      	str	r3, [sp, #20]
  40254c:	4640      	mov	r0, r8
  40254e:	9602      	str	r6, [sp, #8]
  402550:	9704      	str	r7, [sp, #16]
  402552:	496a      	ldr	r1, [pc, #424]	; (4026fc <_zbar_decode_code128+0x8c0>)
  402554:	4a66      	ldr	r2, [pc, #408]	; (4026f0 <_zbar_decode_code128+0x8b4>)
  402556:	4d60      	ldr	r5, [pc, #384]	; (4026d8 <_zbar_decode_code128+0x89c>)
  402558:	23ff      	movs	r3, #255	; 0xff
  40255a:	47a8      	blx	r5
  40255c:	e66f      	b.n	40223e <_zbar_decode_code128+0x402>
               ((sig >>  4) & 0x00f0) |
               ((sig <<  4) & 0x0f00) |
               ((sig << 12) & 0xf000));
    dbprintf(2, " rev=%x", rev != 0);

    switch(sig) {
  40255e:	2b14      	cmp	r3, #20
  402560:	d008      	beq.n	402574 <_zbar_decode_code128+0x738>
  402562:	2b25      	cmp	r3, #37	; 0x25
  402564:	f47f ad59 	bne.w	40201a <_zbar_decode_code128+0x1de>
  402568:	2252      	movs	r2, #82	; 0x52
  40256a:	2360      	movs	r3, #96	; 0x60
  40256c:	e79c      	b.n	4024a8 <_zbar_decode_code128+0x66c>
  40256e:	2253      	movs	r2, #83	; 0x53
  402570:	2361      	movs	r3, #97	; 0x61
  402572:	e799      	b.n	4024a8 <_zbar_decode_code128+0x66c>
  402574:	2251      	movs	r2, #81	; 0x51
  402576:	235f      	movs	r3, #95	; 0x5f
  402578:	e796      	b.n	4024a8 <_zbar_decode_code128+0x66c>
  40257a:	2258      	movs	r2, #88	; 0x58
  40257c:	2366      	movs	r3, #102	; 0x66
  40257e:	e793      	b.n	4024a8 <_zbar_decode_code128+0x66c>
  402580:	235e      	movs	r3, #94	; 0x5e
  402582:	e794      	b.n	4024ae <_zbar_decode_code128+0x672>
  402584:	225a      	movs	r2, #90	; 0x5a
  402586:	2368      	movs	r3, #104	; 0x68
  402588:	e78e      	b.n	4024a8 <_zbar_decode_code128+0x66c>
  40258a:	2256      	movs	r2, #86	; 0x56
  40258c:	2364      	movs	r3, #100	; 0x64
  40258e:	e78b      	b.n	4024a8 <_zbar_decode_code128+0x66c>
  402590:	225b      	movs	r2, #91	; 0x5b
  402592:	2369      	movs	r3, #105	; 0x69
  402594:	e788      	b.n	4024a8 <_zbar_decode_code128+0x66c>
  402596:	2257      	movs	r2, #87	; 0x57
  402598:	2365      	movs	r3, #101	; 0x65
  40259a:	e785      	b.n	4024a8 <_zbar_decode_code128+0x66c>
{
    if(!(c & 0x80))
        return(0x18);
    c &= 0x7f;
    if(c < 0x3d)
        return((c < 0x30 && c != 0x17) ? 0x10 : 0x20);
  40259c:	2027      	movs	r0, #39	; 0x27
  40259e:	2219      	movs	r2, #25
  4025a0:	e5ba      	b.n	402118 <_zbar_decode_code128+0x2dc>
    if(c < 0x50)
        return((c == 0x4d) ? 0x20 : 0x10);
    return((c < 0x67) ? 0x20 : 0x10);
  4025a2:	2a67      	cmp	r2, #103	; 0x67
  4025a4:	bf35      	itete	cc
  4025a6:	2027      	movcc	r0, #39	; 0x27
  4025a8:	2017      	movcs	r0, #23
  4025aa:	2219      	movcc	r2, #25
  4025ac:	2209      	movcs	r2, #9
  4025ae:	e5b3      	b.n	402118 <_zbar_decode_code128+0x2dc>

/* acquire shared state lock */
static inline char acquire_lock (zbar_decoder_t *dcode,
                                 zbar_symbol_type_t req)
{
    if(dcode->lock) {
  4025b0:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
  4025b4:	2b00      	cmp	r3, #0
  4025b6:	f47f aee4 	bne.w	402382 <_zbar_decode_code128+0x546>
        /* lock shared resources */
        if(acquire_lock(dcode, ZBAR_CODE128)) {
            dcode128->character = -1;
            return(0);
        }
        dcode->buf[0] = dcode128->start;
  4025ba:	6de3      	ldr	r3, [r4, #92]	; 0x5c
  4025bc:	f894 2106 	ldrb.w	r2, [r4, #262]	; 0x106
        dbprintf(2, " [locked %d]\n", dcode->lock);
        return(1);
    }
    dcode->lock = req;
  4025c0:	2180      	movs	r1, #128	; 0x80
  4025c2:	f8a4 1046 	strh.w	r1, [r4, #70]	; 0x46
  4025c6:	701a      	strb	r2, [r3, #0]
  4025c8:	f8b4 5104 	ldrh.w	r5, [r4, #260]	; 0x104
  4025cc:	f345 150b 	sbfx	r5, r5, #4, #12
  4025d0:	b2ae      	uxth	r6, r5
  4025d2:	b22d      	sxth	r5, r5
  4025d4:	e5cb      	b.n	40216e <_zbar_decode_code128+0x332>
    }

    dcode->buf[dcode128->character++] = c;

    if(dcode128->character > 2 &&
  4025d6:	f1b9 0f6a 	cmp.w	r9, #106	; 0x6a
  4025da:	f47f ac5d 	bne.w	401e98 <_zbar_decode_code128+0x5c>
    code128_decoder_t *dcode128 = &dcode->code128;
    if(dcode128->character < 3)
        return(1);

    /* add in irregularly weighted start character */
    idx = (dcode128->direction) ? dcode128->character - 1 : 0;
  4025de:	4662      	mov	r2, ip
  4025e0:	e5e6      	b.n	4021b0 <_zbar_decode_code128+0x374>
    sum = dcode->buf[idx];
    if(sum >= 103)
        sum -= 103;

    /* calculate sum in reverse to avoid multiply operations */
    for(i = dcode128->character - 3; i; i--) {
  4025e2:	1eca      	subs	r2, r1, #3
  4025e4:	f47f adf3 	bne.w	4021ce <_zbar_decode_code128+0x392>
        if(sum >= 103)
            sum -= 103;
    }

    /* and compare to check character */
    idx = (dcode128->direction) ? 1 : dcode128->character - 2;
  4025e8:	f1bc 0f00 	cmp.w	ip, #0
  4025ec:	f040 825c 	bne.w	402aa8 <_zbar_decode_code128+0xc6c>
    check = dcode->buf[idx];
  4025f0:	185e      	adds	r6, r3, r1
    dbprintf(2, " chk=%02x(%02x)", sum, check);
    err = (sum != check);
  4025f2:	f816 2c02 	ldrb.w	r2, [r6, #-2]
       ((dcode128->direction)
        ? c >= START_A && c <= START_C
        : c == STOP_FWD)) {
        /* FIXME STOP_FWD should check extra bar (and QZ!) */
        zbar_symbol_type_t sym = ZBAR_CODE128;
        if(validate_checksum(dcode) || postprocess(dcode))
  4025f6:	4297      	cmp	r7, r2
  4025f8:	f47f ae21 	bne.w	40223e <_zbar_decode_code128+0x402>
    unsigned i, j, cexp;
    unsigned char code = 0, charset;
    code128_decoder_t *dcode128 = &dcode->code128;
    dbprintf(2, "\n    postproc len=%d", dcode128->character);
    dcode->modifiers = 0;
    dcode->direction = 1 - 2 * dcode128->direction;
  4025fc:	f00e 0501 	and.w	r5, lr, #1
  402600:	f06f 0201 	mvn.w	r2, #1
  402604:	fb02 f205 	mul.w	r2, r2, r5
  402608:	3201      	adds	r2, #1
{
    unsigned i, j, cexp;
    unsigned char code = 0, charset;
    code128_decoder_t *dcode128 = &dcode->code128;
    dbprintf(2, "\n    postproc len=%d", dcode128->character);
    dcode->modifiers = 0;
  40260a:	f8c4 c048 	str.w	ip, [r4, #72]	; 0x48
    dcode->direction = 1 - 2 * dcode128->direction;
  40260e:	64e2      	str	r2, [r4, #76]	; 0x4c
        zassert(dcode->buf[dcode128->character - 1] == STOP_REV, 1,
                "dir=%x %s\n", dcode128->direction,
                _zbar_decoder_buf_dump(dcode->buf, dcode->code128.character));
    }
    else
        zassert(dcode->buf[dcode128->character - 1] == STOP_FWD, 1,
  402610:	f816 2c01 	ldrb.w	r2, [r6, #-1]
  402614:	2a6a      	cmp	r2, #106	; 0x6a
  402616:	f040 8334 	bne.w	402c82 <_zbar_decode_code128+0xe46>
                "dir=%x %s\n", dcode128->direction,
                _zbar_decoder_buf_dump(dcode->buf, dcode->code128.character));

    code = dcode->buf[0];
  40261a:	781a      	ldrb	r2, [r3, #0]
  40261c:	920b      	str	r2, [sp, #44]	; 0x2c
    zassert(code >= START_A && code <= START_C, 1, "%s\n",
  40261e:	f1a2 0a67 	sub.w	sl, r2, #103	; 0x67
  402622:	fa5f fa8a 	uxtb.w	sl, sl
  402626:	f1ba 0f02 	cmp.w	sl, #2
  40262a:	f200 833f 	bhi.w	402cac <_zbar_decode_code128+0xe70>

    charset = code - START_A;
    cexp = (code == START_C) ? 1 : 0;
    dbprintf(2, " start=%c", 'A' + charset);

    for(i = 1, j = 0; i < dcode128->character - 2; i++) {
  40262e:	f340 110b 	sbfx	r1, r0, #4, #12
  402632:	4615      	mov	r5, r2
  402634:	b20a      	sxth	r2, r1
  402636:	3a02      	subs	r2, #2
    code = dcode->buf[0];
    zassert(code >= START_A && code <= START_C, 1, "%s\n",
            _zbar_decoder_buf_dump(dcode->buf, dcode->code128.character));

    charset = code - START_A;
    cexp = (code == START_C) ? 1 : 0;
  402638:	f1a5 0569 	sub.w	r5, r5, #105	; 0x69
    dbprintf(2, " start=%c", 'A' + charset);

    for(i = 1, j = 0; i < dcode128->character - 2; i++) {
  40263c:	2a01      	cmp	r2, #1
    code = dcode->buf[0];
    zassert(code >= START_A && code <= START_C, 1, "%s\n",
            _zbar_decoder_buf_dump(dcode->buf, dcode->code128.character));

    charset = code - START_A;
    cexp = (code == START_C) ? 1 : 0;
  40263e:	fab5 f585 	clz	r5, r5
  402642:	ea4f 1555 	mov.w	r5, r5, lsr #5
    dbprintf(2, " start=%c", 'A' + charset);

    for(i = 1, j = 0; i < dcode128->character - 2; i++) {
  402646:	b289      	uxth	r1, r1
    code = dcode->buf[0];
    zassert(code >= START_A && code <= START_C, 1, "%s\n",
            _zbar_decoder_buf_dump(dcode->buf, dcode->code128.character));

    charset = code - START_A;
    cexp = (code == START_C) ? 1 : 0;
  402648:	9509      	str	r5, [sp, #36]	; 0x24
    dbprintf(2, " start=%c", 'A' + charset);

    for(i = 1, j = 0; i < dcode128->character - 2; i++) {
  40264a:	f240 8272 	bls.w	402b32 <_zbar_decode_code128+0xcf6>
        unsigned char code = dcode->buf[i];
  40264e:	f893 8001 	ldrb.w	r8, [r3, #1]
        zassert(!(code & 0x80), 1,
  402652:	f018 0f80 	tst.w	r8, #128	; 0x80
  402656:	f040 8409 	bne.w	402e6c <_zbar_decode_code128+0x1030>
  40265a:	f04f 0900 	mov.w	r9, #0
  40265e:	2701      	movs	r7, #1
    dcode->code128.character = newlen;

    for(i = 0, j = dst; i < delta; i++, j += 2) {
        /* convert each set C character into two ASCII digits */
        unsigned char code = dcode->buf[start + delta + i];
        dcode->buf[j] = '0';
  402660:	f04f 0c30 	mov.w	ip, #48	; 0x30
  402664:	469e      	mov	lr, r3
        zassert(!(code & 0x80), 1,
                "i=%x j=%x code=%02x charset=%x cexp=%x %s\n",
                i, j, code, charset, cexp,
                _zbar_decoder_buf_dump(dcode->buf, dcode->code128.character));

        if((charset & 0x2) && (code < 100))
  402666:	f00a 0202 	and.w	r2, sl, #2
  40266a:	f002 0bff 	and.w	fp, r2, #255	; 0xff
  40266e:	2a00      	cmp	r2, #0
  402670:	f000 80e9 	beq.w	402846 <_zbar_decode_code128+0xa0a>
  402674:	f1b8 0f63 	cmp.w	r8, #99	; 0x63
  402678:	f240 8101 	bls.w	40287e <_zbar_decode_code128+0xa42>
        else {
            dbprintf(2, " %02x", code);
            if(charset & 0x2) {
                unsigned delta;
                /* expand character set C to ASCII */
                zassert(cexp, 1, "i=%x j=%x code=%02x charset=%x cexp=%x %s\n",
  40267c:	9a09      	ldr	r2, [sp, #36]	; 0x24
  40267e:	2a00      	cmp	r2, #0
  402680:	f000 8382 	beq.w	402d88 <_zbar_decode_code128+0xf4c>
{
    unsigned i, j;

    /* expand buffer to accomodate 2x set C characters (2 digits per-char) */
    unsigned delta = end - start;
    unsigned newlen = dcode->code128.character + delta;
  402684:	b20a      	sxth	r2, r1
                                      unsigned dst)
{
    unsigned i, j;

    /* expand buffer to accomodate 2x set C characters (2 digits per-char) */
    unsigned delta = end - start;
  402686:	9909      	ldr	r1, [sp, #36]	; 0x24
  402688:	1a7e      	subs	r6, r7, r1
    unsigned newlen = dcode->code128.character + delta;
  40268a:	1995      	adds	r5, r2, r6
/* ensure output buffer has sufficient allocation for request */
static inline char size_buf (zbar_decoder_t *dcode,
                             unsigned len)
{
    unsigned char *buf;
    if(len <= BUFFER_MIN)
  40268c:	2d20      	cmp	r5, #32
  40268e:	f200 819b 	bhi.w	4029c8 <_zbar_decode_code128+0xb8c>
    size_buf(dcode, newlen);

    /* relocate unprocessed data to end of buffer */
    memmove(dcode->buf + start + delta, dcode->buf + start,
  402692:	9b09      	ldr	r3, [sp, #36]	; 0x24
  402694:	f8cd c028 	str.w	ip, [sp, #40]	; 0x28
  402698:	1ad2      	subs	r2, r2, r3
  40269a:	eb0e 0103 	add.w	r1, lr, r3
  40269e:	eb0e 0007 	add.w	r0, lr, r7
  4026a2:	4b17      	ldr	r3, [pc, #92]	; (402700 <_zbar_decode_code128+0x8c4>)
  4026a4:	4798      	blx	r3
            dcode->code128.character - start);
    dcode->code128.character = newlen;
  4026a6:	f8b4 3104 	ldrh.w	r3, [r4, #260]	; 0x104

    for(i = 0, j = dst; i < delta; i++, j += 2) {
  4026aa:	f8dd c028 	ldr.w	ip, [sp, #40]	; 0x28
    size_buf(dcode, newlen);

    /* relocate unprocessed data to end of buffer */
    memmove(dcode->buf + start + delta, dcode->buf + start,
            dcode->code128.character - start);
    dcode->code128.character = newlen;
  4026ae:	f365 130f 	bfi	r3, r5, #4, #12
  4026b2:	f8a4 3104 	strh.w	r3, [r4, #260]	; 0x104

    for(i = 0, j = dst; i < delta; i++, j += 2) {
  4026b6:	2e00      	cmp	r6, #0
  4026b8:	d07f      	beq.n	4027ba <_zbar_decode_code128+0x97e>
  4026ba:	464d      	mov	r5, r9
  4026bc:	2300      	movs	r3, #0
  4026be:	e036      	b.n	40272e <_zbar_decode_code128+0x8f2>
  4026c0:	00409189 	.word	0x00409189
  4026c4:	200008b0 	.word	0x200008b0
  4026c8:	0041095c 	.word	0x0041095c
  4026cc:	00410ac4 	.word	0x00410ac4
  4026d0:	00410a58 	.word	0x00410a58
  4026d4:	00410a94 	.word	0x00410a94
  4026d8:	0040814d 	.word	0x0040814d
  4026dc:	00410de8 	.word	0x00410de8
  4026e0:	00403dfd 	.word	0x00403dfd
  4026e4:	00410dc8 	.word	0x00410dc8
  4026e8:	00410b20 	.word	0x00410b20
  4026ec:	00410ad8 	.word	0x00410ad8
  4026f0:	004109c8 	.word	0x004109c8
  4026f4:	004108b8 	.word	0x004108b8
  4026f8:	00410b94 	.word	0x00410b94
  4026fc:	00410b48 	.word	0x00410b48
  402700:	0040901d 	.word	0x0040901d
  402704:	fffff000 	.word	0xfffff000
            code -= 20;
            dcode->buf[j] += 2;
        }
        if(code >= 10) {
            code -= 10;
            dcode->buf[j] += 1;
  402708:	3101      	adds	r1, #1
  40270a:	5541      	strb	r1, [r0, r5]
        }
        zassert(dcode->buf[j] <= '9', delta,
  40270c:	6de0      	ldr	r0, [r4, #92]	; 0x5c
  40270e:	5d41      	ldrb	r1, [r0, r5]
        if(code >= 20) {
            code -= 20;
            dcode->buf[j] += 2;
        }
        if(code >= 10) {
            code -= 10;
  402710:	3a0a      	subs	r2, #10
            dcode->buf[j] += 1;
        }
        zassert(dcode->buf[j] <= '9', delta,
  402712:	2939      	cmp	r1, #57	; 0x39
        if(code >= 20) {
            code -= 20;
            dcode->buf[j] += 2;
        }
        if(code >= 10) {
            code -= 10;
  402714:	b2d2      	uxtb	r2, r2
            dcode->buf[j] += 1;
        }
        zassert(dcode->buf[j] <= '9', delta,
  402716:	d82d      	bhi.n	402774 <_zbar_decode_code128+0x938>
                "start=%x end=%x i=%x j=%x %s\n", start, end, i, j,
                _zbar_decoder_buf_dump(dcode->buf, dcode->code128.character));
        zassert(code <= 9, delta,
  402718:	2a09      	cmp	r2, #9
  40271a:	f200 8131 	bhi.w	402980 <_zbar_decode_code128+0xb44>
                "start=%x end=%x i=%x j=%x %s\n", start, end, i, j,
                _zbar_decoder_buf_dump(dcode->buf, dcode->code128.character));
        dcode->buf[j + 1] = '0' + code;
  40271e:	4428      	add	r0, r5
    /* relocate unprocessed data to end of buffer */
    memmove(dcode->buf + start + delta, dcode->buf + start,
            dcode->code128.character - start);
    dcode->code128.character = newlen;

    for(i = 0, j = dst; i < delta; i++, j += 2) {
  402720:	3301      	adds	r3, #1
                "start=%x end=%x i=%x j=%x %s\n", start, end, i, j,
                _zbar_decoder_buf_dump(dcode->buf, dcode->code128.character));
        zassert(code <= 9, delta,
                "start=%x end=%x i=%x j=%x %s\n", start, end, i, j,
                _zbar_decoder_buf_dump(dcode->buf, dcode->code128.character));
        dcode->buf[j + 1] = '0' + code;
  402722:	3230      	adds	r2, #48	; 0x30
    /* relocate unprocessed data to end of buffer */
    memmove(dcode->buf + start + delta, dcode->buf + start,
            dcode->code128.character - start);
    dcode->code128.character = newlen;

    for(i = 0, j = dst; i < delta; i++, j += 2) {
  402724:	42b3      	cmp	r3, r6
                "start=%x end=%x i=%x j=%x %s\n", start, end, i, j,
                _zbar_decoder_buf_dump(dcode->buf, dcode->code128.character));
        zassert(code <= 9, delta,
                "start=%x end=%x i=%x j=%x %s\n", start, end, i, j,
                _zbar_decoder_buf_dump(dcode->buf, dcode->code128.character));
        dcode->buf[j + 1] = '0' + code;
  402726:	7042      	strb	r2, [r0, #1]
    /* relocate unprocessed data to end of buffer */
    memmove(dcode->buf + start + delta, dcode->buf + start,
            dcode->code128.character - start);
    dcode->code128.character = newlen;

    for(i = 0, j = dst; i < delta; i++, j += 2) {
  402728:	f105 0502 	add.w	r5, r5, #2
  40272c:	d045      	beq.n	4027ba <_zbar_decode_code128+0x97e>
        /* convert each set C character into two ASCII digits */
        unsigned char code = dcode->buf[start + delta + i];
  40272e:	6de1      	ldr	r1, [r4, #92]	; 0x5c
  402730:	19ca      	adds	r2, r1, r7
  402732:	5cd2      	ldrb	r2, [r2, r3]
        dcode->buf[j] = '0';
  402734:	f801 c005 	strb.w	ip, [r1, r5]
        if(code >= 50) {
  402738:	2a31      	cmp	r2, #49	; 0x31
  40273a:	d905      	bls.n	402748 <_zbar_decode_code128+0x90c>
            code -= 50;
            dcode->buf[j] += 5;
  40273c:	6de0      	ldr	r0, [r4, #92]	; 0x5c
  40273e:	5d41      	ldrb	r1, [r0, r5]
  402740:	3105      	adds	r1, #5
    for(i = 0, j = dst; i < delta; i++, j += 2) {
        /* convert each set C character into two ASCII digits */
        unsigned char code = dcode->buf[start + delta + i];
        dcode->buf[j] = '0';
        if(code >= 50) {
            code -= 50;
  402742:	3a32      	subs	r2, #50	; 0x32
            dcode->buf[j] += 5;
  402744:	5541      	strb	r1, [r0, r5]
    for(i = 0, j = dst; i < delta; i++, j += 2) {
        /* convert each set C character into two ASCII digits */
        unsigned char code = dcode->buf[start + delta + i];
        dcode->buf[j] = '0';
        if(code >= 50) {
            code -= 50;
  402746:	b2d2      	uxtb	r2, r2
            dcode->buf[j] += 5;
        }
        if(code >= 30) {
  402748:	2a1d      	cmp	r2, #29
  40274a:	d905      	bls.n	402758 <_zbar_decode_code128+0x91c>
            code -= 30;
            dcode->buf[j] += 3;
  40274c:	6de0      	ldr	r0, [r4, #92]	; 0x5c
  40274e:	5d41      	ldrb	r1, [r0, r5]
  402750:	3103      	adds	r1, #3
        if(code >= 50) {
            code -= 50;
            dcode->buf[j] += 5;
        }
        if(code >= 30) {
            code -= 30;
  402752:	3a1e      	subs	r2, #30
            dcode->buf[j] += 3;
  402754:	5541      	strb	r1, [r0, r5]
        if(code >= 50) {
            code -= 50;
            dcode->buf[j] += 5;
        }
        if(code >= 30) {
            code -= 30;
  402756:	b2d2      	uxtb	r2, r2
            dcode->buf[j] += 3;
        }
        if(code >= 20) {
  402758:	2a13      	cmp	r2, #19
  40275a:	d905      	bls.n	402768 <_zbar_decode_code128+0x92c>
            code -= 20;
            dcode->buf[j] += 2;
  40275c:	6de0      	ldr	r0, [r4, #92]	; 0x5c
  40275e:	5d41      	ldrb	r1, [r0, r5]
  402760:	3102      	adds	r1, #2
        if(code >= 30) {
            code -= 30;
            dcode->buf[j] += 3;
        }
        if(code >= 20) {
            code -= 20;
  402762:	3a14      	subs	r2, #20
            dcode->buf[j] += 2;
  402764:	5541      	strb	r1, [r0, r5]
        if(code >= 30) {
            code -= 30;
            dcode->buf[j] += 3;
        }
        if(code >= 20) {
            code -= 20;
  402766:	b2d2      	uxtb	r2, r2
            dcode->buf[j] += 2;
        }
        if(code >= 10) {
            code -= 10;
            dcode->buf[j] += 1;
  402768:	6de0      	ldr	r0, [r4, #92]	; 0x5c
        }
        if(code >= 20) {
            code -= 20;
            dcode->buf[j] += 2;
        }
        if(code >= 10) {
  40276a:	2a09      	cmp	r2, #9
            code -= 10;
            dcode->buf[j] += 1;
  40276c:	5d41      	ldrb	r1, [r0, r5]
        }
        if(code >= 20) {
            code -= 20;
            dcode->buf[j] += 2;
        }
        if(code >= 10) {
  40276e:	d8cb      	bhi.n	402708 <_zbar_decode_code128+0x8cc>
            code -= 10;
            dcode->buf[j] += 1;
        }
        zassert(dcode->buf[j] <= '9', delta,
  402770:	2939      	cmp	r1, #57	; 0x39
  402772:	d9d4      	bls.n	40271e <_zbar_decode_code128+0x8e2>
  402774:	4ab2      	ldr	r2, [pc, #712]	; (402a40 <_zbar_decode_code128+0xc04>)
  402776:	f8b4 1104 	ldrh.w	r1, [r4, #260]	; 0x104
  40277a:	f8d2 e000 	ldr.w	lr, [r2]
  40277e:	930c      	str	r3, [sp, #48]	; 0x30
  402780:	4ab0      	ldr	r2, [pc, #704]	; (402a44 <_zbar_decode_code128+0xc08>)
  402782:	f8de 300c 	ldr.w	r3, [lr, #12]
  402786:	f8cd c034 	str.w	ip, [sp, #52]	; 0x34
  40278a:	f341 110b 	sbfx	r1, r1, #4, #12
  40278e:	930a      	str	r3, [sp, #40]	; 0x28
  402790:	4790      	blx	r2
  402792:	9b09      	ldr	r3, [sp, #36]	; 0x24
  402794:	49ac      	ldr	r1, [pc, #688]	; (402a48 <_zbar_decode_code128+0xc0c>)
  402796:	4aad      	ldr	r2, [pc, #692]	; (402a4c <_zbar_decode_code128+0xc10>)
  402798:	9302      	str	r3, [sp, #8]
  40279a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  40279c:	9006      	str	r0, [sp, #24]
  40279e:	e88d 0006 	stmia.w	sp, {r1, r2}
  4027a2:	9304      	str	r3, [sp, #16]
  4027a4:	9505      	str	r5, [sp, #20]
  4027a6:	980a      	ldr	r0, [sp, #40]	; 0x28
  4027a8:	9703      	str	r7, [sp, #12]
  4027aa:	49a9      	ldr	r1, [pc, #676]	; (402a50 <_zbar_decode_code128+0xc14>)
  4027ac:	4aa9      	ldr	r2, [pc, #676]	; (402a54 <_zbar_decode_code128+0xc18>)
  4027ae:	4daa      	ldr	r5, [pc, #680]	; (402a58 <_zbar_decode_code128+0xc1c>)
  4027b0:	f44f 739f 	mov.w	r3, #318	; 0x13e
  4027b4:	47a8      	blx	r5
  4027b6:	f8dd c034 	ldr.w	ip, [sp, #52]	; 0x34
                        _zbar_decoder_buf_dump(dcode->buf,
                                                dcode->code128.character));
                delta = postprocess_c(dcode, cexp, i, j);
                i += delta;
                j += delta * 2;
                cexp = 0;
  4027ba:	2300      	movs	r3, #0
                zassert(cexp, 1, "i=%x j=%x code=%02x charset=%x cexp=%x %s\n",
                        i, j, code, charset, cexp,
                        _zbar_decoder_buf_dump(dcode->buf,
                                                dcode->code128.character));
                delta = postprocess_c(dcode, cexp, i, j);
                i += delta;
  4027bc:	4437      	add	r7, r6
                j += delta * 2;
  4027be:	eb09 0946 	add.w	r9, r9, r6, lsl #1
                cexp = 0;
  4027c2:	9309      	str	r3, [sp, #36]	; 0x24
                }
                else if(code == FNC3) {
                    /* FIXME FNC3 - initialize */
                }
            }
            else if(code == FNC1) {
  4027c4:	f1b8 0f66 	cmp.w	r8, #102	; 0x66
  4027c8:	f000 8125 	beq.w	402a16 <_zbar_decode_code128+0xbda>
                    dcode->modifiers |= MOD(ZBAR_MOD_AIM);
                else if(i < dcode->code128.character - 3)
                    dcode->buf[j++] = 0x1d;
                /*else drop trailing FNC1 */
            }
            else if(code >= START_A) {
  4027cc:	f63f ad37 	bhi.w	40223e <_zbar_decode_code128+0x402>
                dbprintf(1, " [truncated]\n");
                return(1);
            }
            else {
                unsigned char newset = CODE_A - code;
  4027d0:	f1c8 0865 	rsb	r8, r8, #101	; 0x65
  4027d4:	fa5f fa88 	uxtb.w	sl, r8
  4027d8:	f00a 0b02 	and.w	fp, sl, #2
  4027dc:	fa5f fb8b 	uxtb.w	fp, fp
  4027e0:	f8b4 0104 	ldrh.w	r0, [r4, #260]	; 0x104
  4027e4:	6de3      	ldr	r3, [r4, #92]	; 0x5c
                    charset = newset;
                else {
                    /* FIXME FNC4 - extended ASCII */
                }
            }
            if(charset & 0x2)
  4027e6:	f1bb 0f00 	cmp.w	fp, #0
  4027ea:	d160      	bne.n	4028ae <_zbar_decode_code128+0xa72>
  4027ec:	f340 110b 	sbfx	r1, r0, #4, #12
  4027f0:	3701      	adds	r7, #1
  4027f2:	b289      	uxth	r1, r1
  4027f4:	469e      	mov	lr, r3

    charset = code - START_A;
    cexp = (code == START_C) ? 1 : 0;
    dbprintf(2, " start=%c", 'A' + charset);

    for(i = 1, j = 0; i < dcode128->character - 2; i++) {
  4027f6:	b20a      	sxth	r2, r1
  4027f8:	1e95      	subs	r5, r2, #2
  4027fa:	42bd      	cmp	r5, r7
  4027fc:	f240 819c 	bls.w	402b38 <_zbar_decode_code128+0xcfc>
        unsigned char code = dcode->buf[i];
  402800:	f813 8007 	ldrb.w	r8, [r3, r7]
        zassert(!(code & 0x80), 1,
  402804:	f018 0f80 	tst.w	r8, #128	; 0x80
  402808:	f43f af2d 	beq.w	402666 <_zbar_decode_code128+0x82a>
  40280c:	498c      	ldr	r1, [pc, #560]	; (402a40 <_zbar_decode_code128+0xc04>)
  40280e:	4e8d      	ldr	r6, [pc, #564]	; (402a44 <_zbar_decode_code128+0xc08>)
  402810:	680d      	ldr	r5, [r1, #0]
  402812:	4618      	mov	r0, r3
  402814:	4611      	mov	r1, r2
  402816:	68ed      	ldr	r5, [r5, #12]
  402818:	47b0      	blx	r6
  40281a:	4a90      	ldr	r2, [pc, #576]	; (402a5c <_zbar_decode_code128+0xc20>)
  40281c:	4b90      	ldr	r3, [pc, #576]	; (402a60 <_zbar_decode_code128+0xc24>)
  40281e:	9909      	ldr	r1, [sp, #36]	; 0x24
  402820:	9007      	str	r0, [sp, #28]
  402822:	e88d 000c 	stmia.w	sp, {r2, r3}
  402826:	9106      	str	r1, [sp, #24]
  402828:	9702      	str	r7, [sp, #8]
  40282a:	4628      	mov	r0, r5
  40282c:	f8cd 900c 	str.w	r9, [sp, #12]
  402830:	f8cd 8010 	str.w	r8, [sp, #16]
  402834:	f8cd a014 	str.w	sl, [sp, #20]
  402838:	498a      	ldr	r1, [pc, #552]	; (402a64 <_zbar_decode_code128+0xc28>)
  40283a:	4a86      	ldr	r2, [pc, #536]	; (402a54 <_zbar_decode_code128+0xc18>)
  40283c:	4d86      	ldr	r5, [pc, #536]	; (402a58 <_zbar_decode_code128+0xc1c>)
  40283e:	f240 136f 	movw	r3, #367	; 0x16f
  402842:	47a8      	blx	r5
  402844:	e4fb      	b.n	40223e <_zbar_decode_code128+0x402>
                _zbar_decoder_buf_dump(dcode->buf, dcode->code128.character));

        if((charset & 0x2) && (code < 100))
            /* defer character set C for expansion */
            continue;
        else if(code < 0x60) {
  402846:	f1b8 0f5f 	cmp.w	r8, #95	; 0x5f
  40284a:	d829      	bhi.n	4028a0 <_zbar_decode_code128+0xa64>
            /* convert character set B to ASCII */
            code = code + 0x20;
  40284c:	f108 0220 	add.w	r2, r8, #32
  402850:	b2d2      	uxtb	r2, r2
            if((!charset || (charset == 0x81)) && (code >= 0x60))
  402852:	f1ba 0f00 	cmp.w	sl, #0
  402856:	d014      	beq.n	402882 <_zbar_decode_code128+0xa46>
  402858:	f1ba 0f81 	cmp.w	sl, #129	; 0x81
  40285c:	d04a      	beq.n	4028f4 <_zbar_decode_code128+0xab8>
                /* convert character set A to ASCII */
                code -= 0x60;
            dcode->buf[j++] = code;
            if(charset & 0x80)
  40285e:	f01a 0f80 	tst.w	sl, #128	; 0x80
            /* convert character set B to ASCII */
            code = code + 0x20;
            if((!charset || (charset == 0x81)) && (code >= 0x60))
                /* convert character set A to ASCII */
                code -= 0x60;
            dcode->buf[j++] = code;
  402862:	f803 2009 	strb.w	r2, [r3, r9]
  402866:	f109 0901 	add.w	r9, r9, #1
            if(charset & 0x80)
  40286a:	d149      	bne.n	402900 <_zbar_decode_code128+0xac4>
  40286c:	f8b4 0104 	ldrh.w	r0, [r4, #260]	; 0x104
  402870:	6de3      	ldr	r3, [r4, #92]	; 0x5c
  402872:	f340 110b 	sbfx	r1, r0, #4, #12
  402876:	3701      	adds	r7, #1
  402878:	b289      	uxth	r1, r1
  40287a:	469e      	mov	lr, r3
  40287c:	e7bb      	b.n	4027f6 <_zbar_decode_code128+0x9ba>
  40287e:	3701      	adds	r7, #1
  402880:	e7b9      	b.n	4027f6 <_zbar_decode_code128+0x9ba>
            /* defer character set C for expansion */
            continue;
        else if(code < 0x60) {
            /* convert character set B to ASCII */
            code = code + 0x20;
            if((!charset || (charset == 0x81)) && (code >= 0x60))
  402882:	2a5f      	cmp	r2, #95	; 0x5f
  402884:	d81b      	bhi.n	4028be <_zbar_decode_code128+0xa82>
                /* convert character set A to ASCII */
                code -= 0x60;
            dcode->buf[j++] = code;
  402886:	f803 2009 	strb.w	r2, [r3, r9]
  40288a:	f8b4 0104 	ldrh.w	r0, [r4, #260]	; 0x104
  40288e:	6de3      	ldr	r3, [r4, #92]	; 0x5c
  402890:	f340 110b 	sbfx	r1, r0, #4, #12
  402894:	3701      	adds	r7, #1
  402896:	f109 0901 	add.w	r9, r9, #1
  40289a:	b289      	uxth	r1, r1
  40289c:	469e      	mov	lr, r3
  40289e:	e7aa      	b.n	4027f6 <_zbar_decode_code128+0x9ba>
                delta = postprocess_c(dcode, cexp, i, j);
                i += delta;
                j += delta * 2;
                cexp = 0;
            }
            if(code < CODE_C) {
  4028a0:	f1b8 0f62 	cmp.w	r8, #98	; 0x62
  4028a4:	d88e      	bhi.n	4027c4 <_zbar_decode_code128+0x988>
                if(code == SHIFT)
  4028a6:	d1a1      	bne.n	4027ec <_zbar_decode_code128+0x9b0>
                    charset |= 0x80;
  4028a8:	f04a 0a80 	orr.w	sl, sl, #128	; 0x80
  4028ac:	e79e      	b.n	4027ec <_zbar_decode_code128+0x9b0>
                else {
                    /* FIXME FNC4 - extended ASCII */
                }
            }
            if(charset & 0x2)
                cexp = i + 1;
  4028ae:	1c7a      	adds	r2, r7, #1
  4028b0:	f340 110b 	sbfx	r1, r0, #4, #12
  4028b4:	9209      	str	r2, [sp, #36]	; 0x24
  4028b6:	b289      	uxth	r1, r1
  4028b8:	4617      	mov	r7, r2
  4028ba:	469e      	mov	lr, r3
  4028bc:	e79b      	b.n	4027f6 <_zbar_decode_code128+0x9ba>
        else if(code < 0x60) {
            /* convert character set B to ASCII */
            code = code + 0x20;
            if((!charset || (charset == 0x81)) && (code >= 0x60))
                /* convert character set A to ASCII */
                code -= 0x60;
  4028be:	f1a8 0240 	sub.w	r2, r8, #64	; 0x40
  4028c2:	b2d2      	uxtb	r2, r2
  4028c4:	e7cb      	b.n	40285e <_zbar_decode_code128+0xa22>
  4028c6:	189e      	adds	r6, r3, r2
    code128_decoder_t *dcode128 = &dcode->code128;
    if(dcode128->character < 3)
        return(1);

    /* add in irregularly weighted start character */
    idx = (dcode128->direction) ? dcode128->character - 1 : 0;
  4028c8:	4665      	mov	r5, ip
  4028ca:	3a01      	subs	r2, #1
  4028cc:	e007      	b.n	4028de <_zbar_decode_code128+0xaa2>
        if(acc >= 103)
            acc -= 103;
        zassert(acc < 103, -1, "dir=%x i=%x sum=%x acc=%x %s\n",
                dcode128->direction, i, sum, acc,
                _zbar_decoder_buf_dump(dcode->buf, dcode128->character));
        sum += acc;
  4028ce:	442f      	add	r7, r5
        if(sum >= 103)
  4028d0:	2f66      	cmp	r7, #102	; 0x66
            sum -= 103;
  4028d2:	bf88      	it	hi
  4028d4:	3f67      	subhi	r7, #103	; 0x67
    sum = dcode->buf[idx];
    if(sum >= 103)
        sum -= 103;

    /* calculate sum in reverse to avoid multiply operations */
    for(i = dcode128->character - 3; i; i--) {
  4028d6:	2a00      	cmp	r2, #0
  4028d8:	f43f ae8a 	beq.w	4025f0 <_zbar_decode_code128+0x7b4>
  4028dc:	3a01      	subs	r2, #1
  4028de:	ebc3 0806 	rsb	r8, r3, r6
        zassert(sum < 103, -1, "dir=%x i=%x sum=%x acc=%x %s\n",
                dcode128->direction, i, sum, acc,
                _zbar_decoder_buf_dump(dcode->buf, dcode128->character));
        idx = (dcode128->direction) ? dcode128->character - 1 - i : i;
        acc += dcode->buf[idx];
  4028e2:	f816 9901 	ldrb.w	r9, [r6], #-1
  4028e6:	444d      	add	r5, r9
        if(acc >= 103)
  4028e8:	2d66      	cmp	r5, #102	; 0x66
  4028ea:	d9f0      	bls.n	4028ce <_zbar_decode_code128+0xa92>
            acc -= 103;
  4028ec:	3d67      	subs	r5, #103	; 0x67
        zassert(acc < 103, -1, "dir=%x i=%x sum=%x acc=%x %s\n",
  4028ee:	2d66      	cmp	r5, #102	; 0x66
  4028f0:	d9ed      	bls.n	4028ce <_zbar_decode_code128+0xa92>
  4028f2:	e48a      	b.n	40220a <_zbar_decode_code128+0x3ce>
            /* defer character set C for expansion */
            continue;
        else if(code < 0x60) {
            /* convert character set B to ASCII */
            code = code + 0x20;
            if((!charset || (charset == 0x81)) && (code >= 0x60))
  4028f4:	2a5f      	cmp	r2, #95	; 0x5f
  4028f6:	d8e2      	bhi.n	4028be <_zbar_decode_code128+0xa82>
                /* convert character set A to ASCII */
                code -= 0x60;
            dcode->buf[j++] = code;
  4028f8:	f803 2009 	strb.w	r2, [r3, r9]
  4028fc:	f109 0901 	add.w	r9, r9, #1
  402900:	f8b4 0104 	ldrh.w	r0, [r4, #260]	; 0x104
  402904:	6de3      	ldr	r3, [r4, #92]	; 0x5c
  402906:	f340 110b 	sbfx	r1, r0, #4, #12
            if(charset & 0x80)
                charset &= 0x7f;
  40290a:	f00a 0a7f 	and.w	sl, sl, #127	; 0x7f
  40290e:	3701      	adds	r7, #1
  402910:	b289      	uxth	r1, r1
  402912:	469e      	mov	lr, r3
  402914:	e76f      	b.n	4027f6 <_zbar_decode_code128+0x9ba>
  402916:	f346 160b 	sbfx	r6, r6, #4, #12
  40291a:	e529      	b.n	402370 <_zbar_decode_code128+0x534>
        idx >>= 4;
    if(idx == 0xf)
        return(-1);

    base = (sig >> 11) | ((sig >> 9) & 1);
    zassert(base < 8, -1, "sig=%x offset=%x idx=%x base=%x\n",
  40291c:	4948      	ldr	r1, [pc, #288]	; (402a40 <_zbar_decode_code128+0xc04>)
  40291e:	4e52      	ldr	r6, [pc, #328]	; (402a68 <_zbar_decode_code128+0xc2c>)
  402920:	6809      	ldr	r1, [r1, #0]
  402922:	4d52      	ldr	r5, [pc, #328]	; (402a6c <_zbar_decode_code128+0xc30>)
  402924:	68c8      	ldr	r0, [r1, #12]
  402926:	9302      	str	r3, [sp, #8]
  402928:	9203      	str	r2, [sp, #12]
  40292a:	9600      	str	r6, [sp, #0]
  40292c:	9501      	str	r5, [sp, #4]
  40292e:	4950      	ldr	r1, [pc, #320]	; (402a70 <_zbar_decode_code128+0xc34>)
  402930:	f8cd a010 	str.w	sl, [sp, #16]
  402934:	f8cd c014 	str.w	ip, [sp, #20]
  402938:	4a46      	ldr	r2, [pc, #280]	; (402a54 <_zbar_decode_code128+0xc18>)
  40293a:	4d47      	ldr	r5, [pc, #284]	; (402a58 <_zbar_decode_code128+0xc1c>)
  40293c:	2386      	movs	r3, #134	; 0x86
  40293e:	47a8      	blx	r5
  402940:	f8b4 6104 	ldrh.w	r6, [r4, #260]	; 0x104
  402944:	f346 160b 	sbfx	r6, r6, #4, #12
  402948:	b2b6      	uxth	r6, r6
  40294a:	f7ff bb66 	b.w	40201a <_zbar_decode_code128+0x1de>
            sig, offset, idx, base);
    idx += lo_base[base];

    zassert(idx <= 0x50, -1, "sig=%x offset=%x base=%x idx=%x\n",
  40294e:	493c      	ldr	r1, [pc, #240]	; (402a40 <_zbar_decode_code128+0xc04>)
  402950:	4e45      	ldr	r6, [pc, #276]	; (402a68 <_zbar_decode_code128+0xc2c>)
  402952:	6809      	ldr	r1, [r1, #0]
  402954:	4d47      	ldr	r5, [pc, #284]	; (402a74 <_zbar_decode_code128+0xc38>)
  402956:	68c8      	ldr	r0, [r1, #12]
  402958:	9302      	str	r3, [sp, #8]
  40295a:	9203      	str	r2, [sp, #12]
  40295c:	9600      	str	r6, [sp, #0]
  40295e:	9501      	str	r5, [sp, #4]
  402960:	4945      	ldr	r1, [pc, #276]	; (402a78 <_zbar_decode_code128+0xc3c>)
  402962:	f8cd c010 	str.w	ip, [sp, #16]
  402966:	f8cd a014 	str.w	sl, [sp, #20]
  40296a:	4a3a      	ldr	r2, [pc, #232]	; (402a54 <_zbar_decode_code128+0xc18>)
  40296c:	4d3a      	ldr	r5, [pc, #232]	; (402a58 <_zbar_decode_code128+0xc1c>)
  40296e:	238a      	movs	r3, #138	; 0x8a
  402970:	47a8      	blx	r5
  402972:	f8b4 6104 	ldrh.w	r6, [r4, #260]	; 0x104
  402976:	f346 160b 	sbfx	r6, r6, #4, #12
  40297a:	b2b6      	uxth	r6, r6
  40297c:	f7ff bb4d 	b.w	40201a <_zbar_decode_code128+0x1de>
            dcode->buf[j] += 1;
        }
        zassert(dcode->buf[j] <= '9', delta,
                "start=%x end=%x i=%x j=%x %s\n", start, end, i, j,
                _zbar_decoder_buf_dump(dcode->buf, dcode->code128.character));
        zassert(code <= 9, delta,
  402980:	4a2f      	ldr	r2, [pc, #188]	; (402a40 <_zbar_decode_code128+0xc04>)
  402982:	f8b4 1104 	ldrh.w	r1, [r4, #260]	; 0x104
  402986:	f8d2 e000 	ldr.w	lr, [r2]
  40298a:	930c      	str	r3, [sp, #48]	; 0x30
  40298c:	4a2d      	ldr	r2, [pc, #180]	; (402a44 <_zbar_decode_code128+0xc08>)
  40298e:	f8de 300c 	ldr.w	r3, [lr, #12]
  402992:	f8cd c034 	str.w	ip, [sp, #52]	; 0x34
  402996:	f341 110b 	sbfx	r1, r1, #4, #12
  40299a:	930a      	str	r3, [sp, #40]	; 0x28
  40299c:	4790      	blx	r2
  40299e:	9b09      	ldr	r3, [sp, #36]	; 0x24
  4029a0:	4929      	ldr	r1, [pc, #164]	; (402a48 <_zbar_decode_code128+0xc0c>)
  4029a2:	4a36      	ldr	r2, [pc, #216]	; (402a7c <_zbar_decode_code128+0xc40>)
  4029a4:	9302      	str	r3, [sp, #8]
  4029a6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  4029a8:	9006      	str	r0, [sp, #24]
  4029aa:	e88d 0006 	stmia.w	sp, {r1, r2}
  4029ae:	9304      	str	r3, [sp, #16]
  4029b0:	9505      	str	r5, [sp, #20]
  4029b2:	980a      	ldr	r0, [sp, #40]	; 0x28
  4029b4:	9703      	str	r7, [sp, #12]
  4029b6:	4926      	ldr	r1, [pc, #152]	; (402a50 <_zbar_decode_code128+0xc14>)
  4029b8:	4a26      	ldr	r2, [pc, #152]	; (402a54 <_zbar_decode_code128+0xc18>)
  4029ba:	4d27      	ldr	r5, [pc, #156]	; (402a58 <_zbar_decode_code128+0xc1c>)
  4029bc:	f240 1341 	movw	r3, #321	; 0x141
  4029c0:	47a8      	blx	r5
  4029c2:	f8dd c034 	ldr.w	ip, [sp, #52]	; 0x34
  4029c6:	e6f8      	b.n	4027ba <_zbar_decode_code128+0x97e>
        return(0);
    if(len < dcode->buf_alloc)
  4029c8:	6d61      	ldr	r1, [r4, #84]	; 0x54
  4029ca:	428d      	cmp	r5, r1
  4029cc:	f4ff ae61 	bcc.w	402692 <_zbar_decode_code128+0x856>
        /* FIXME size reduction heuristic? */
        return(0);
    if(len > BUFFER_MAX)
  4029d0:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
  4029d4:	f63f ae5d 	bhi.w	402692 <_zbar_decode_code128+0x856>
        return(1);
    if(len < dcode->buf_alloc + BUFFER_INCR) {
  4029d8:	f101 0210 	add.w	r2, r1, #16
  4029dc:	4295      	cmp	r5, r2
  4029de:	f080 817d 	bcs.w	402cdc <_zbar_decode_code128+0xea0>
  4029e2:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
  4029e6:	bf28      	it	cs
  4029e8:	f44f 7280 	movcs.w	r2, #256	; 0x100
        len = dcode->buf_alloc + BUFFER_INCR;
        if(len > BUFFER_MAX)
            len = BUFFER_MAX;
    }
    buf = realloc(dcode->buf, len);
  4029ec:	4618      	mov	r0, r3
  4029ee:	4611      	mov	r1, r2
  4029f0:	4b23      	ldr	r3, [pc, #140]	; (402a80 <_zbar_decode_code128+0xc44>)
  4029f2:	f8cd c030 	str.w	ip, [sp, #48]	; 0x30
  4029f6:	920a      	str	r2, [sp, #40]	; 0x28
  4029f8:	4798      	blx	r3
    if(!buf)
  4029fa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  4029fc:	f8dd c030 	ldr.w	ip, [sp, #48]	; 0x30
  402a00:	2800      	cmp	r0, #0
  402a02:	f000 8191 	beq.w	402d28 <_zbar_decode_code128+0xeec>
  402a06:	f8b4 3104 	ldrh.w	r3, [r4, #260]	; 0x104
        return(1);
    dcode->buf = buf;
    dcode->buf_alloc = len;
  402a0a:	6562      	str	r2, [r4, #84]	; 0x54
            len = BUFFER_MAX;
    }
    buf = realloc(dcode->buf, len);
    if(!buf)
        return(1);
    dcode->buf = buf;
  402a0c:	65e0      	str	r0, [r4, #92]	; 0x5c
    dcode->buf_alloc = len;
  402a0e:	4686      	mov	lr, r0
  402a10:	f343 120b 	sbfx	r2, r3, #4, #12
  402a14:	e63d      	b.n	402692 <_zbar_decode_code128+0x856>
                    /* FIXME FNC3 - initialize */
                }
            }
            else if(code == FNC1) {
                /* FNC1 - Code 128 subsets or ASCII 0x1d */
                if(i == 1)
  402a16:	2f01      	cmp	r7, #1
  402a18:	f000 8167 	beq.w	402cea <_zbar_decode_code128+0xeae>
                    dcode->modifiers |= MOD(ZBAR_MOD_GS1);
                else if(i == 2)
  402a1c:	2f02      	cmp	r7, #2
  402a1e:	f000 815f 	beq.w	402ce0 <_zbar_decode_code128+0xea4>
                    dcode->modifiers |= MOD(ZBAR_MOD_AIM);
                else if(i < dcode->code128.character - 3)
  402a22:	f8b4 3104 	ldrh.w	r3, [r4, #260]	; 0x104
  402a26:	f343 130b 	sbfx	r3, r3, #4, #12
  402a2a:	3b03      	subs	r3, #3
  402a2c:	429f      	cmp	r7, r3
  402a2e:	f4bf aed7 	bcs.w	4027e0 <_zbar_decode_code128+0x9a4>
                    dcode->buf[j++] = 0x1d;
  402a32:	6de3      	ldr	r3, [r4, #92]	; 0x5c
  402a34:	221d      	movs	r2, #29
  402a36:	f803 2009 	strb.w	r2, [r3, r9]
  402a3a:	f109 0901 	add.w	r9, r9, #1
  402a3e:	e6cf      	b.n	4027e0 <_zbar_decode_code128+0x9a4>
  402a40:	200008b0 	.word	0x200008b0
  402a44:	00403dfd 	.word	0x00403dfd
  402a48:	004108cc 	.word	0x004108cc
  402a4c:	00410d54 	.word	0x00410d54
  402a50:	00410d08 	.word	0x00410d08
  402a54:	004109c8 	.word	0x004109c8
  402a58:	0040814d 	.word	0x0040814d
  402a5c:	0041096c 	.word	0x0041096c
  402a60:	00410cf0 	.word	0x00410cf0
  402a64:	00410c98 	.word	0x00410c98
  402a68:	00410e54 	.word	0x00410e54
  402a6c:	004109f0 	.word	0x004109f0
  402a70:	00410978 	.word	0x00410978
  402a74:	00410a4c 	.word	0x00410a4c
  402a78:	004109fc 	.word	0x004109fc
  402a7c:	00410d6c 	.word	0x00410d6c
  402a80:	00409189 	.word	0x00409189

/* check and release shared state lock */
static inline char release_lock (zbar_decoder_t *dcode,
                                 zbar_symbol_type_t req)
{
    zassert(dcode->lock == req, 1, "lock=%d req=%d\n",
  402a84:	4bac      	ldr	r3, [pc, #688]	; (402d38 <_zbar_decode_code128+0xefc>)
  402a86:	4dad      	ldr	r5, [pc, #692]	; (402d3c <_zbar_decode_code128+0xf00>)
  402a88:	681b      	ldr	r3, [r3, #0]
  402a8a:	4cad      	ldr	r4, [pc, #692]	; (402d40 <_zbar_decode_code128+0xf04>)
  402a8c:	68d8      	ldr	r0, [r3, #12]
  402a8e:	49ad      	ldr	r1, [pc, #692]	; (402d44 <_zbar_decode_code128+0xf08>)
  402a90:	9202      	str	r2, [sp, #8]
  402a92:	2380      	movs	r3, #128	; 0x80
  402a94:	9401      	str	r4, [sp, #4]
  402a96:	9303      	str	r3, [sp, #12]
  402a98:	9500      	str	r5, [sp, #0]
  402a9a:	4aab      	ldr	r2, [pc, #684]	; (402d48 <_zbar_decode_code128+0xf0c>)
  402a9c:	4cab      	ldr	r4, [pc, #684]	; (402d4c <_zbar_decode_code128+0xf10>)
  402a9e:	f240 1307 	movw	r3, #263	; 0x107
  402aa2:	47a0      	blx	r4
  402aa4:	f7ff b9f8 	b.w	401e98 <_zbar_decode_code128+0x5c>

    /* and compare to check character */
    idx = (dcode128->direction) ? 1 : dcode128->character - 2;
    check = dcode->buf[idx];
    dbprintf(2, " chk=%02x(%02x)", sum, check);
    err = (sum != check);
  402aa8:	785b      	ldrb	r3, [r3, #1]
       ((dcode128->direction)
        ? c >= START_A && c <= START_C
        : c == STOP_FWD)) {
        /* FIXME STOP_FWD should check extra bar (and QZ!) */
        zbar_symbol_type_t sym = ZBAR_CODE128;
        if(validate_checksum(dcode) || postprocess(dcode))
  402aaa:	429f      	cmp	r7, r3
  402aac:	f47f abc7 	bne.w	40223e <_zbar_decode_code128+0x402>
    unsigned i, j, cexp;
    unsigned char code = 0, charset;
    code128_decoder_t *dcode128 = &dcode->code128;
    dbprintf(2, "\n    postproc len=%d", dcode128->character);
    dcode->modifiers = 0;
    dcode->direction = 1 - 2 * dcode128->direction;
  402ab0:	f00e 0e01 	and.w	lr, lr, #1
  402ab4:	f06f 0301 	mvn.w	r3, #1
  402ab8:	fb03 f30e 	mul.w	r3, r3, lr
  402abc:	3301      	adds	r3, #1
{
    unsigned i, j, cexp;
    unsigned char code = 0, charset;
    code128_decoder_t *dcode128 = &dcode->code128;
    dbprintf(2, "\n    postproc len=%d", dcode128->character);
    dcode->modifiers = 0;
  402abe:	2200      	movs	r2, #0
    dcode->direction = 1 - 2 * dcode128->direction;
  402ac0:	64e3      	str	r3, [r4, #76]	; 0x4c
{
    unsigned i, j, cexp;
    unsigned char code = 0, charset;
    code128_decoder_t *dcode128 = &dcode->code128;
    dbprintf(2, "\n    postproc len=%d", dcode128->character);
    dcode->modifiers = 0;
  402ac2:	64a2      	str	r2, [r4, #72]	; 0x48
  402ac4:	4649      	mov	r1, r9
  402ac6:	e000      	b.n	402aca <_zbar_decode_code128+0xc8e>
  402ac8:	6de1      	ldr	r1, [r4, #92]	; 0x5c
    if(dcode128->direction) {
        /* reverse buffer */
        dbprintf(2, " (rev)");
        for(i = 0; i < dcode128->character / 2; i++) {
            unsigned j = dcode128->character - 1 - i;
            code = dcode->buf[i];
  402aca:	5c88      	ldrb	r0, [r1, r2]
    dcode->direction = 1 - 2 * dcode128->direction;
    if(dcode128->direction) {
        /* reverse buffer */
        dbprintf(2, " (rev)");
        for(i = 0; i < dcode128->character / 2; i++) {
            unsigned j = dcode128->character - 1 - i;
  402acc:	b233      	sxth	r3, r6
  402ace:	3b01      	subs	r3, #1
  402ad0:	1a9b      	subs	r3, r3, r2
            code = dcode->buf[i];
            dcode->buf[i] = dcode->buf[j];
  402ad2:	5ccd      	ldrb	r5, [r1, r3]
  402ad4:	548d      	strb	r5, [r1, r2]
            dcode->buf[j] = code;
  402ad6:	6de1      	ldr	r1, [r4, #92]	; 0x5c
  402ad8:	54c8      	strb	r0, [r1, r3]
    dcode->modifiers = 0;
    dcode->direction = 1 - 2 * dcode128->direction;
    if(dcode128->direction) {
        /* reverse buffer */
        dbprintf(2, " (rev)");
        for(i = 0; i < dcode128->character / 2; i++) {
  402ada:	f8b4 0104 	ldrh.w	r0, [r4, #260]	; 0x104
  402ade:	f340 130b 	sbfx	r3, r0, #4, #12
  402ae2:	b219      	sxth	r1, r3
  402ae4:	3201      	adds	r2, #1
  402ae6:	eb01 75d1 	add.w	r5, r1, r1, lsr #31
  402aea:	ebb2 0f65 	cmp.w	r2, r5, asr #1
  402aee:	b29e      	uxth	r6, r3
  402af0:	d3ea      	bcc.n	402ac8 <_zbar_decode_code128+0xc8c>
            unsigned j = dcode128->character - 1 - i;
            code = dcode->buf[i];
            dcode->buf[i] = dcode->buf[j];
            dcode->buf[j] = code;
        }
        zassert(dcode->buf[dcode128->character - 1] == STOP_REV, 1,
  402af2:	6de3      	ldr	r3, [r4, #92]	; 0x5c
  402af4:	185a      	adds	r2, r3, r1
  402af6:	f812 2c01 	ldrb.w	r2, [r2, #-1]
  402afa:	2a6b      	cmp	r2, #107	; 0x6b
  402afc:	f43f ad8d 	beq.w	40261a <_zbar_decode_code128+0x7de>
  402b00:	4a8d      	ldr	r2, [pc, #564]	; (402d38 <_zbar_decode_code128+0xefc>)
  402b02:	f894 5104 	ldrb.w	r5, [r4, #260]	; 0x104
  402b06:	6810      	ldr	r0, [r2, #0]
  402b08:	4a91      	ldr	r2, [pc, #580]	; (402d50 <_zbar_decode_code128+0xf14>)
  402b0a:	68c6      	ldr	r6, [r0, #12]
  402b0c:	4618      	mov	r0, r3
  402b0e:	4790      	blx	r2
  402b10:	4a90      	ldr	r2, [pc, #576]	; (402d54 <_zbar_decode_code128+0xf18>)
  402b12:	4b91      	ldr	r3, [pc, #580]	; (402d58 <_zbar_decode_code128+0xf1c>)
  402b14:	9003      	str	r0, [sp, #12]
  402b16:	f005 0501 	and.w	r5, r5, #1
  402b1a:	e88d 000c 	stmia.w	sp, {r2, r3}
  402b1e:	9502      	str	r5, [sp, #8]
  402b20:	4630      	mov	r0, r6
  402b22:	498e      	ldr	r1, [pc, #568]	; (402d5c <_zbar_decode_code128+0xf20>)
  402b24:	4a8e      	ldr	r2, [pc, #568]	; (402d60 <_zbar_decode_code128+0xf24>)
  402b26:	4d89      	ldr	r5, [pc, #548]	; (402d4c <_zbar_decode_code128+0xf10>)
  402b28:	f240 135b 	movw	r3, #347	; 0x15b
  402b2c:	47a8      	blx	r5
  402b2e:	f7ff bb86 	b.w	40223e <_zbar_decode_code128+0x402>

    charset = code - START_A;
    cexp = (code == START_C) ? 1 : 0;
    dbprintf(2, " start=%c", 'A' + charset);

    for(i = 1, j = 0; i < dcode128->character - 2; i++) {
  402b32:	f04f 0900 	mov.w	r9, #0
  402b36:	2701      	movs	r7, #1
            }
            if(charset & 0x2)
                cexp = i + 1;
        }
    }
    if(charset & 0x2) {
  402b38:	f01a 0f02 	tst.w	sl, #2
  402b3c:	d077      	beq.n	402c2e <_zbar_decode_code128+0xdf2>
        zassert(cexp, 1, "i=%x j=%x code=%02x charset=%x cexp=%x %s\n",
  402b3e:	9a09      	ldr	r2, [sp, #36]	; 0x24
  402b40:	2a00      	cmp	r2, #0
  402b42:	f000 813f 	beq.w	402dc4 <_zbar_decode_code128+0xf88>
                                      unsigned dst)
{
    unsigned i, j;

    /* expand buffer to accomodate 2x set C characters (2 digits per-char) */
    unsigned delta = end - start;
  402b46:	9a09      	ldr	r2, [sp, #36]	; 0x24
  402b48:	1abd      	subs	r5, r7, r2
    unsigned newlen = dcode->code128.character + delta;
  402b4a:	fa05 f881 	sxtah	r8, r5, r1
/* ensure output buffer has sufficient allocation for request */
static inline char size_buf (zbar_decoder_t *dcode,
                             unsigned len)
{
    unsigned char *buf;
    if(len <= BUFFER_MIN)
  402b4e:	f1b8 0f20 	cmp.w	r8, #32
  402b52:	f200 8172 	bhi.w	402e3a <_zbar_decode_code128+0xffe>
    size_buf(dcode, newlen);

    /* relocate unprocessed data to end of buffer */
    memmove(dcode->buf + start + delta, dcode->buf + start,
            dcode->code128.character - start);
  402b56:	f8b4 2104 	ldrh.w	r2, [r4, #260]	; 0x104
    unsigned delta = end - start;
    unsigned newlen = dcode->code128.character + delta;
    size_buf(dcode, newlen);

    /* relocate unprocessed data to end of buffer */
    memmove(dcode->buf + start + delta, dcode->buf + start,
  402b5a:	9909      	ldr	r1, [sp, #36]	; 0x24
  402b5c:	4e81      	ldr	r6, [pc, #516]	; (402d64 <_zbar_decode_code128+0xf28>)
  402b5e:	f342 120b 	sbfx	r2, r2, #4, #12
  402b62:	1a52      	subs	r2, r2, r1
  402b64:	19d8      	adds	r0, r3, r7
  402b66:	1859      	adds	r1, r3, r1
  402b68:	47b0      	blx	r6
            dcode->code128.character - start);
    dcode->code128.character = newlen;
  402b6a:	f8b4 3104 	ldrh.w	r3, [r4, #260]	; 0x104
  402b6e:	f368 130f 	bfi	r3, r8, #4, #12
  402b72:	f8a4 3104 	strh.w	r3, [r4, #260]	; 0x104

    for(i = 0, j = dst; i < delta; i++, j += 2) {
  402b76:	2d00      	cmp	r5, #0
  402b78:	d057      	beq.n	402c2a <_zbar_decode_code128+0xdee>
  402b7a:	464e      	mov	r6, r9
  402b7c:	f04f 0800 	mov.w	r8, #0
        /* convert each set C character into two ASCII digits */
        unsigned char code = dcode->buf[start + delta + i];
        dcode->buf[j] = '0';
  402b80:	2130      	movs	r1, #48	; 0x30
  402b82:	e013      	b.n	402bac <_zbar_decode_code128+0xd70>
            code -= 20;
            dcode->buf[j] += 2;
        }
        if(code >= 10) {
            code -= 10;
            dcode->buf[j] += 1;
  402b84:	3201      	adds	r2, #1
  402b86:	5582      	strb	r2, [r0, r6]
        }
        zassert(dcode->buf[j] <= '9', delta,
  402b88:	6de0      	ldr	r0, [r4, #92]	; 0x5c
  402b8a:	5d82      	ldrb	r2, [r0, r6]
        if(code >= 20) {
            code -= 20;
            dcode->buf[j] += 2;
        }
        if(code >= 10) {
            code -= 10;
  402b8c:	3b0a      	subs	r3, #10
            dcode->buf[j] += 1;
        }
        zassert(dcode->buf[j] <= '9', delta,
  402b8e:	2a39      	cmp	r2, #57	; 0x39
        if(code >= 20) {
            code -= 20;
            dcode->buf[j] += 2;
        }
        if(code >= 10) {
            code -= 10;
  402b90:	b2db      	uxtb	r3, r3
            dcode->buf[j] += 1;
        }
        zassert(dcode->buf[j] <= '9', delta,
  402b92:	d82e      	bhi.n	402bf2 <_zbar_decode_code128+0xdb6>
                "start=%x end=%x i=%x j=%x %s\n", start, end, i, j,
                _zbar_decoder_buf_dump(dcode->buf, dcode->code128.character));
        zassert(code <= 9, delta,
  402b94:	2b09      	cmp	r3, #9
  402b96:	f200 8133 	bhi.w	402e00 <_zbar_decode_code128+0xfc4>
                "start=%x end=%x i=%x j=%x %s\n", start, end, i, j,
                _zbar_decoder_buf_dump(dcode->buf, dcode->code128.character));
        dcode->buf[j + 1] = '0' + code;
  402b9a:	4430      	add	r0, r6
    /* relocate unprocessed data to end of buffer */
    memmove(dcode->buf + start + delta, dcode->buf + start,
            dcode->code128.character - start);
    dcode->code128.character = newlen;

    for(i = 0, j = dst; i < delta; i++, j += 2) {
  402b9c:	f108 0801 	add.w	r8, r8, #1
                "start=%x end=%x i=%x j=%x %s\n", start, end, i, j,
                _zbar_decoder_buf_dump(dcode->buf, dcode->code128.character));
        zassert(code <= 9, delta,
                "start=%x end=%x i=%x j=%x %s\n", start, end, i, j,
                _zbar_decoder_buf_dump(dcode->buf, dcode->code128.character));
        dcode->buf[j + 1] = '0' + code;
  402ba0:	3330      	adds	r3, #48	; 0x30
    /* relocate unprocessed data to end of buffer */
    memmove(dcode->buf + start + delta, dcode->buf + start,
            dcode->code128.character - start);
    dcode->code128.character = newlen;

    for(i = 0, j = dst; i < delta; i++, j += 2) {
  402ba2:	45a8      	cmp	r8, r5
                "start=%x end=%x i=%x j=%x %s\n", start, end, i, j,
                _zbar_decoder_buf_dump(dcode->buf, dcode->code128.character));
        zassert(code <= 9, delta,
                "start=%x end=%x i=%x j=%x %s\n", start, end, i, j,
                _zbar_decoder_buf_dump(dcode->buf, dcode->code128.character));
        dcode->buf[j + 1] = '0' + code;
  402ba4:	7043      	strb	r3, [r0, #1]
    /* relocate unprocessed data to end of buffer */
    memmove(dcode->buf + start + delta, dcode->buf + start,
            dcode->code128.character - start);
    dcode->code128.character = newlen;

    for(i = 0, j = dst; i < delta; i++, j += 2) {
  402ba6:	f106 0602 	add.w	r6, r6, #2
  402baa:	d03e      	beq.n	402c2a <_zbar_decode_code128+0xdee>
        /* convert each set C character into two ASCII digits */
        unsigned char code = dcode->buf[start + delta + i];
  402bac:	6de2      	ldr	r2, [r4, #92]	; 0x5c
  402bae:	eb02 0308 	add.w	r3, r2, r8
  402bb2:	5ddb      	ldrb	r3, [r3, r7]
        dcode->buf[j] = '0';
  402bb4:	5591      	strb	r1, [r2, r6]
        if(code >= 50) {
  402bb6:	2b31      	cmp	r3, #49	; 0x31
  402bb8:	d905      	bls.n	402bc6 <_zbar_decode_code128+0xd8a>
            code -= 50;
            dcode->buf[j] += 5;
  402bba:	6de0      	ldr	r0, [r4, #92]	; 0x5c
  402bbc:	5d82      	ldrb	r2, [r0, r6]
  402bbe:	3205      	adds	r2, #5
    for(i = 0, j = dst; i < delta; i++, j += 2) {
        /* convert each set C character into two ASCII digits */
        unsigned char code = dcode->buf[start + delta + i];
        dcode->buf[j] = '0';
        if(code >= 50) {
            code -= 50;
  402bc0:	3b32      	subs	r3, #50	; 0x32
            dcode->buf[j] += 5;
  402bc2:	5582      	strb	r2, [r0, r6]
    for(i = 0, j = dst; i < delta; i++, j += 2) {
        /* convert each set C character into two ASCII digits */
        unsigned char code = dcode->buf[start + delta + i];
        dcode->buf[j] = '0';
        if(code >= 50) {
            code -= 50;
  402bc4:	b2db      	uxtb	r3, r3
            dcode->buf[j] += 5;
        }
        if(code >= 30) {
  402bc6:	2b1d      	cmp	r3, #29
  402bc8:	d905      	bls.n	402bd6 <_zbar_decode_code128+0xd9a>
            code -= 30;
            dcode->buf[j] += 3;
  402bca:	6de0      	ldr	r0, [r4, #92]	; 0x5c
  402bcc:	5d82      	ldrb	r2, [r0, r6]
  402bce:	3203      	adds	r2, #3
        if(code >= 50) {
            code -= 50;
            dcode->buf[j] += 5;
        }
        if(code >= 30) {
            code -= 30;
  402bd0:	3b1e      	subs	r3, #30
            dcode->buf[j] += 3;
  402bd2:	5582      	strb	r2, [r0, r6]
        if(code >= 50) {
            code -= 50;
            dcode->buf[j] += 5;
        }
        if(code >= 30) {
            code -= 30;
  402bd4:	b2db      	uxtb	r3, r3
            dcode->buf[j] += 3;
        }
        if(code >= 20) {
  402bd6:	2b13      	cmp	r3, #19
  402bd8:	d905      	bls.n	402be6 <_zbar_decode_code128+0xdaa>
            code -= 20;
            dcode->buf[j] += 2;
  402bda:	6de0      	ldr	r0, [r4, #92]	; 0x5c
  402bdc:	5d82      	ldrb	r2, [r0, r6]
  402bde:	3202      	adds	r2, #2
        if(code >= 30) {
            code -= 30;
            dcode->buf[j] += 3;
        }
        if(code >= 20) {
            code -= 20;
  402be0:	3b14      	subs	r3, #20
            dcode->buf[j] += 2;
  402be2:	5582      	strb	r2, [r0, r6]
        if(code >= 30) {
            code -= 30;
            dcode->buf[j] += 3;
        }
        if(code >= 20) {
            code -= 20;
  402be4:	b2db      	uxtb	r3, r3
            dcode->buf[j] += 2;
        }
        if(code >= 10) {
            code -= 10;
            dcode->buf[j] += 1;
  402be6:	6de0      	ldr	r0, [r4, #92]	; 0x5c
        }
        if(code >= 20) {
            code -= 20;
            dcode->buf[j] += 2;
        }
        if(code >= 10) {
  402be8:	2b09      	cmp	r3, #9
            code -= 10;
            dcode->buf[j] += 1;
  402bea:	5d82      	ldrb	r2, [r0, r6]
        }
        if(code >= 20) {
            code -= 20;
            dcode->buf[j] += 2;
        }
        if(code >= 10) {
  402bec:	d8ca      	bhi.n	402b84 <_zbar_decode_code128+0xd48>
            code -= 10;
            dcode->buf[j] += 1;
        }
        zassert(dcode->buf[j] <= '9', delta,
  402bee:	2a39      	cmp	r2, #57	; 0x39
  402bf0:	d9d3      	bls.n	402b9a <_zbar_decode_code128+0xd5e>
  402bf2:	4b51      	ldr	r3, [pc, #324]	; (402d38 <_zbar_decode_code128+0xefc>)
  402bf4:	f8b4 1104 	ldrh.w	r1, [r4, #260]	; 0x104
  402bf8:	681a      	ldr	r2, [r3, #0]
  402bfa:	4b55      	ldr	r3, [pc, #340]	; (402d50 <_zbar_decode_code128+0xf14>)
  402bfc:	f8d2 a00c 	ldr.w	sl, [r2, #12]
  402c00:	f341 110b 	sbfx	r1, r1, #4, #12
  402c04:	4798      	blx	r3
  402c06:	4a58      	ldr	r2, [pc, #352]	; (402d68 <_zbar_decode_code128+0xf2c>)
  402c08:	4b58      	ldr	r3, [pc, #352]	; (402d6c <_zbar_decode_code128+0xf30>)
  402c0a:	9909      	ldr	r1, [sp, #36]	; 0x24
  402c0c:	9006      	str	r0, [sp, #24]
  402c0e:	e88d 000c 	stmia.w	sp, {r2, r3}
  402c12:	9102      	str	r1, [sp, #8]
  402c14:	9605      	str	r6, [sp, #20]
  402c16:	4650      	mov	r0, sl
  402c18:	9703      	str	r7, [sp, #12]
  402c1a:	f8cd 8010 	str.w	r8, [sp, #16]
  402c1e:	4954      	ldr	r1, [pc, #336]	; (402d70 <_zbar_decode_code128+0xf34>)
  402c20:	4a4f      	ldr	r2, [pc, #316]	; (402d60 <_zbar_decode_code128+0xf24>)
  402c22:	4e4a      	ldr	r6, [pc, #296]	; (402d4c <_zbar_decode_code128+0xf10>)
  402c24:	f44f 739f 	mov.w	r3, #318	; 0x13e
  402c28:	47b0      	blx	r6
    if(charset & 0x2) {
        zassert(cexp, 1, "i=%x j=%x code=%02x charset=%x cexp=%x %s\n",
                i, j, code, charset, cexp,
                _zbar_decoder_buf_dump(dcode->buf,
                                        dcode->code128.character));
        j += postprocess_c(dcode, cexp, i, j) * 2;
  402c2a:	eb09 0945 	add.w	r9, r9, r5, lsl #1
    }
    zassert(j < dcode->buf_alloc, 1, "j=%02x %s\n", j,
  402c2e:	6d63      	ldr	r3, [r4, #84]	; 0x54
  402c30:	454b      	cmp	r3, r9
  402c32:	d95f      	bls.n	402cf4 <_zbar_decode_code128+0xeb8>
            _zbar_decoder_buf_dump(dcode->buf, dcode->code128.character));
    dcode->buflen = j;
    dcode->buf[j] = '\0';
  402c34:	6de3      	ldr	r3, [r4, #92]	; 0x5c
                                        dcode->code128.character));
        j += postprocess_c(dcode, cexp, i, j) * 2;
    }
    zassert(j < dcode->buf_alloc, 1, "j=%02x %s\n", j,
            _zbar_decoder_buf_dump(dcode->buf, dcode->code128.character));
    dcode->buflen = j;
  402c36:	f8c4 9058 	str.w	r9, [r4, #88]	; 0x58
    dcode->buf[j] = '\0';
  402c3a:	2200      	movs	r2, #0
  402c3c:	f803 2009 	strb.w	r2, [r3, r9]
    dcode->code128.character = j;
  402c40:	f349 030b 	sbfx	r3, r9, #0, #12
  402c44:	f8b4 2104 	ldrh.w	r2, [r4, #260]	; 0x104
        : c == STOP_FWD)) {
        /* FIXME STOP_FWD should check extra bar (and QZ!) */
        zbar_symbol_type_t sym = ZBAR_CODE128;
        if(validate_checksum(dcode) || postprocess(dcode))
            sym = ZBAR_NONE;
        else if(dcode128->character < CFG(*dcode128, ZBAR_CFG_MIN_LEN) ||
  402c48:	f8d4 1114 	ldr.w	r1, [r4, #276]	; 0x114
    }
    zassert(j < dcode->buf_alloc, 1, "j=%02x %s\n", j,
            _zbar_decoder_buf_dump(dcode->buf, dcode->code128.character));
    dcode->buflen = j;
    dcode->buf[j] = '\0';
    dcode->code128.character = j;
  402c4c:	b29b      	uxth	r3, r3
  402c4e:	f363 120f 	bfi	r2, r3, #4, #12
        : c == STOP_FWD)) {
        /* FIXME STOP_FWD should check extra bar (and QZ!) */
        zbar_symbol_type_t sym = ZBAR_CODE128;
        if(validate_checksum(dcode) || postprocess(dcode))
            sym = ZBAR_NONE;
        else if(dcode128->character < CFG(*dcode128, ZBAR_CFG_MIN_LEN) ||
  402c52:	b21b      	sxth	r3, r3
  402c54:	428b      	cmp	r3, r1
    }
    zassert(j < dcode->buf_alloc, 1, "j=%02x %s\n", j,
            _zbar_decoder_buf_dump(dcode->buf, dcode->code128.character));
    dcode->buflen = j;
    dcode->buf[j] = '\0';
    dcode->code128.character = j;
  402c56:	f8a4 2104 	strh.w	r2, [r4, #260]	; 0x104
        : c == STOP_FWD)) {
        /* FIXME STOP_FWD should check extra bar (and QZ!) */
        zbar_symbol_type_t sym = ZBAR_CODE128;
        if(validate_checksum(dcode) || postprocess(dcode))
            sym = ZBAR_NONE;
        else if(dcode128->character < CFG(*dcode128, ZBAR_CFG_MIN_LEN) ||
  402c5a:	f6ff aaf0 	blt.w	40223e <_zbar_decode_code128+0x402>
                (CFG(*dcode128, ZBAR_CFG_MAX_LEN) > 0 &&
  402c5e:	f8d4 2118 	ldr.w	r2, [r4, #280]	; 0x118
        : c == STOP_FWD)) {
        /* FIXME STOP_FWD should check extra bar (and QZ!) */
        zbar_symbol_type_t sym = ZBAR_CODE128;
        if(validate_checksum(dcode) || postprocess(dcode))
            sym = ZBAR_NONE;
        else if(dcode128->character < CFG(*dcode128, ZBAR_CFG_MIN_LEN) ||
  402c62:	2a00      	cmp	r2, #0
  402c64:	dd02      	ble.n	402c6c <_zbar_decode_code128+0xe30>
                (CFG(*dcode128, ZBAR_CFG_MAX_LEN) > 0 &&
  402c66:	4293      	cmp	r3, r2
  402c68:	f73f aae9 	bgt.w	40223e <_zbar_decode_code128+0x402>
            dbprintf(2, " [invalid len]\n");
            sym = ZBAR_NONE;
        }
        else
            dbprintf(2, " [valid end]\n");
        dcode128->character = -1;
  402c6c:	f8b4 3104 	ldrh.w	r3, [r4, #260]	; 0x104
  402c70:	f04f 32ff 	mov.w	r2, #4294967295
  402c74:	f362 130f 	bfi	r3, r2, #4, #12
  402c78:	f8a4 3104 	strh.w	r3, [r4, #260]	; 0x104
  402c7c:	2080      	movs	r0, #128	; 0x80
  402c7e:	f7ff b90c 	b.w	401e9a <_zbar_decode_code128+0x5e>
        zassert(dcode->buf[dcode128->character - 1] == STOP_REV, 1,
                "dir=%x %s\n", dcode128->direction,
                _zbar_decoder_buf_dump(dcode->buf, dcode->code128.character));
    }
    else
        zassert(dcode->buf[dcode128->character - 1] == STOP_FWD, 1,
  402c82:	482d      	ldr	r0, [pc, #180]	; (402d38 <_zbar_decode_code128+0xefc>)
  402c84:	4a32      	ldr	r2, [pc, #200]	; (402d50 <_zbar_decode_code128+0xf14>)
  402c86:	6806      	ldr	r6, [r0, #0]
  402c88:	4618      	mov	r0, r3
  402c8a:	68f6      	ldr	r6, [r6, #12]
  402c8c:	4790      	blx	r2
  402c8e:	4a31      	ldr	r2, [pc, #196]	; (402d54 <_zbar_decode_code128+0xf18>)
  402c90:	4b38      	ldr	r3, [pc, #224]	; (402d74 <_zbar_decode_code128+0xf38>)
  402c92:	9003      	str	r0, [sp, #12]
  402c94:	e88d 000c 	stmia.w	sp, {r2, r3}
  402c98:	9502      	str	r5, [sp, #8]
  402c9a:	4630      	mov	r0, r6
  402c9c:	492f      	ldr	r1, [pc, #188]	; (402d5c <_zbar_decode_code128+0xf20>)
  402c9e:	4a30      	ldr	r2, [pc, #192]	; (402d60 <_zbar_decode_code128+0xf24>)
  402ca0:	4d2a      	ldr	r5, [pc, #168]	; (402d4c <_zbar_decode_code128+0xf10>)
  402ca2:	f44f 73b0 	mov.w	r3, #352	; 0x160
  402ca6:	47a8      	blx	r5
  402ca8:	f7ff bac9 	b.w	40223e <_zbar_decode_code128+0x402>
                "dir=%x %s\n", dcode128->direction,
                _zbar_decoder_buf_dump(dcode->buf, dcode->code128.character));

    code = dcode->buf[0];
    zassert(code >= START_A && code <= START_C, 1, "%s\n",
  402cac:	4a22      	ldr	r2, [pc, #136]	; (402d38 <_zbar_decode_code128+0xefc>)
  402cae:	f8b4 1104 	ldrh.w	r1, [r4, #260]	; 0x104
  402cb2:	6810      	ldr	r0, [r2, #0]
  402cb4:	4a26      	ldr	r2, [pc, #152]	; (402d50 <_zbar_decode_code128+0xf14>)
  402cb6:	68c5      	ldr	r5, [r0, #12]
  402cb8:	f341 110b 	sbfx	r1, r1, #4, #12
  402cbc:	4618      	mov	r0, r3
  402cbe:	4790      	blx	r2
  402cc0:	4a24      	ldr	r2, [pc, #144]	; (402d54 <_zbar_decode_code128+0xf18>)
  402cc2:	4b2d      	ldr	r3, [pc, #180]	; (402d78 <_zbar_decode_code128+0xf3c>)
  402cc4:	9002      	str	r0, [sp, #8]
  402cc6:	9200      	str	r2, [sp, #0]
  402cc8:	9301      	str	r3, [sp, #4]
  402cca:	4628      	mov	r0, r5
  402ccc:	492b      	ldr	r1, [pc, #172]	; (402d7c <_zbar_decode_code128+0xf40>)
  402cce:	4a24      	ldr	r2, [pc, #144]	; (402d60 <_zbar_decode_code128+0xf24>)
  402cd0:	4d1e      	ldr	r5, [pc, #120]	; (402d4c <_zbar_decode_code128+0xf10>)
  402cd2:	f44f 73b2 	mov.w	r3, #356	; 0x164
  402cd6:	47a8      	blx	r5
  402cd8:	f7ff bab1 	b.w	40223e <_zbar_decode_code128+0x402>
    if(len < dcode->buf_alloc)
        /* FIXME size reduction heuristic? */
        return(0);
    if(len > BUFFER_MAX)
        return(1);
    if(len < dcode->buf_alloc + BUFFER_INCR) {
  402cdc:	462a      	mov	r2, r5
  402cde:	e685      	b.n	4029ec <_zbar_decode_code128+0xbb0>
            else if(code == FNC1) {
                /* FNC1 - Code 128 subsets or ASCII 0x1d */
                if(i == 1)
                    dcode->modifiers |= MOD(ZBAR_MOD_GS1);
                else if(i == 2)
                    dcode->modifiers |= MOD(ZBAR_MOD_AIM);
  402ce0:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  402ce2:	f043 0302 	orr.w	r3, r3, #2
  402ce6:	64a3      	str	r3, [r4, #72]	; 0x48
  402ce8:	e57a      	b.n	4027e0 <_zbar_decode_code128+0x9a4>
                }
            }
            else if(code == FNC1) {
                /* FNC1 - Code 128 subsets or ASCII 0x1d */
                if(i == 1)
                    dcode->modifiers |= MOD(ZBAR_MOD_GS1);
  402cea:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  402cec:	f043 0301 	orr.w	r3, r3, #1
  402cf0:	64a3      	str	r3, [r4, #72]	; 0x48
  402cf2:	e575      	b.n	4027e0 <_zbar_decode_code128+0x9a4>
                i, j, code, charset, cexp,
                _zbar_decoder_buf_dump(dcode->buf,
                                        dcode->code128.character));
        j += postprocess_c(dcode, cexp, i, j) * 2;
    }
    zassert(j < dcode->buf_alloc, 1, "j=%02x %s\n", j,
  402cf4:	4b10      	ldr	r3, [pc, #64]	; (402d38 <_zbar_decode_code128+0xefc>)
  402cf6:	f8b4 1104 	ldrh.w	r1, [r4, #260]	; 0x104
  402cfa:	681a      	ldr	r2, [r3, #0]
  402cfc:	6de0      	ldr	r0, [r4, #92]	; 0x5c
  402cfe:	4b14      	ldr	r3, [pc, #80]	; (402d50 <_zbar_decode_code128+0xf14>)
  402d00:	68d5      	ldr	r5, [r2, #12]
  402d02:	f341 110b 	sbfx	r1, r1, #4, #12
  402d06:	4798      	blx	r3
  402d08:	4a12      	ldr	r2, [pc, #72]	; (402d54 <_zbar_decode_code128+0xf18>)
  402d0a:	4b1d      	ldr	r3, [pc, #116]	; (402d80 <_zbar_decode_code128+0xf44>)
  402d0c:	9003      	str	r0, [sp, #12]
  402d0e:	e88d 000c 	stmia.w	sp, {r2, r3}
  402d12:	f8cd 9008 	str.w	r9, [sp, #8]
  402d16:	4628      	mov	r0, r5
  402d18:	491a      	ldr	r1, [pc, #104]	; (402d84 <_zbar_decode_code128+0xf48>)
  402d1a:	4a11      	ldr	r2, [pc, #68]	; (402d60 <_zbar_decode_code128+0xf24>)
  402d1c:	4d0b      	ldr	r5, [pc, #44]	; (402d4c <_zbar_decode_code128+0xf10>)
  402d1e:	f240 13bd 	movw	r3, #445	; 0x1bd
  402d22:	47a8      	blx	r5
  402d24:	f7ff ba8b 	b.w	40223e <_zbar_decode_code128+0x402>
  402d28:	f8b4 2104 	ldrh.w	r2, [r4, #260]	; 0x104
  402d2c:	f8d4 e05c 	ldr.w	lr, [r4, #92]	; 0x5c
  402d30:	f342 120b 	sbfx	r2, r2, #4, #12
  402d34:	e4ad      	b.n	402692 <_zbar_decode_code128+0x856>
  402d36:	bf00      	nop
  402d38:	200008b0 	.word	0x200008b0
  402d3c:	0041095c 	.word	0x0041095c
  402d40:	00410ac4 	.word	0x00410ac4
  402d44:	00410a58 	.word	0x00410a58
  402d48:	00410a94 	.word	0x00410a94
  402d4c:	0040814d 	.word	0x0040814d
  402d50:	00403dfd 	.word	0x00403dfd
  402d54:	0041096c 	.word	0x0041096c
  402d58:	00410be4 	.word	0x00410be4
  402d5c:	00410bac 	.word	0x00410bac
  402d60:	004109c8 	.word	0x004109c8
  402d64:	0040901d 	.word	0x0040901d
  402d68:	004108cc 	.word	0x004108cc
  402d6c:	00410d54 	.word	0x00410d54
  402d70:	00410d08 	.word	0x00410d08
  402d74:	00410c14 	.word	0x00410c14
  402d78:	00410c74 	.word	0x00410c74
  402d7c:	00410c44 	.word	0x00410c44
  402d80:	00410db0 	.word	0x00410db0
  402d84:	00410d78 	.word	0x00410d78
        else {
            dbprintf(2, " %02x", code);
            if(charset & 0x2) {
                unsigned delta;
                /* expand character set C to ASCII */
                zassert(cexp, 1, "i=%x j=%x code=%02x charset=%x cexp=%x %s\n",
  402d88:	483d      	ldr	r0, [pc, #244]	; (402e80 <_zbar_decode_code128+0x1044>)
  402d8a:	4a3e      	ldr	r2, [pc, #248]	; (402e84 <_zbar_decode_code128+0x1048>)
  402d8c:	6805      	ldr	r5, [r0, #0]
  402d8e:	b209      	sxth	r1, r1
  402d90:	4618      	mov	r0, r3
  402d92:	68ed      	ldr	r5, [r5, #12]
  402d94:	4790      	blx	r2
  402d96:	4a3c      	ldr	r2, [pc, #240]	; (402e88 <_zbar_decode_code128+0x104c>)
  402d98:	4b3c      	ldr	r3, [pc, #240]	; (402e8c <_zbar_decode_code128+0x1050>)
  402d9a:	9909      	ldr	r1, [sp, #36]	; 0x24
  402d9c:	9007      	str	r0, [sp, #28]
  402d9e:	e88d 000c 	stmia.w	sp, {r2, r3}
  402da2:	9106      	str	r1, [sp, #24]
  402da4:	9702      	str	r7, [sp, #8]
  402da6:	4628      	mov	r0, r5
  402da8:	f8cd 900c 	str.w	r9, [sp, #12]
  402dac:	f8cd 8010 	str.w	r8, [sp, #16]
  402db0:	f8cd a014 	str.w	sl, [sp, #20]
  402db4:	4936      	ldr	r1, [pc, #216]	; (402e90 <_zbar_decode_code128+0x1054>)
  402db6:	4a37      	ldr	r2, [pc, #220]	; (402e94 <_zbar_decode_code128+0x1058>)
  402db8:	4d37      	ldr	r5, [pc, #220]	; (402e98 <_zbar_decode_code128+0x105c>)
  402dba:	f44f 73c3 	mov.w	r3, #390	; 0x186
  402dbe:	47a8      	blx	r5
  402dc0:	f7ff ba3d 	b.w	40223e <_zbar_decode_code128+0x402>
            if(charset & 0x2)
                cexp = i + 1;
        }
    }
    if(charset & 0x2) {
        zassert(cexp, 1, "i=%x j=%x code=%02x charset=%x cexp=%x %s\n",
  402dc4:	4b2e      	ldr	r3, [pc, #184]	; (402e80 <_zbar_decode_code128+0x1044>)
  402dc6:	6de0      	ldr	r0, [r4, #92]	; 0x5c
  402dc8:	681a      	ldr	r2, [r3, #0]
  402dca:	4b2e      	ldr	r3, [pc, #184]	; (402e84 <_zbar_decode_code128+0x1048>)
  402dcc:	68d5      	ldr	r5, [r2, #12]
  402dce:	b209      	sxth	r1, r1
  402dd0:	4798      	blx	r3
  402dd2:	990b      	ldr	r1, [sp, #44]	; 0x2c
  402dd4:	4a2c      	ldr	r2, [pc, #176]	; (402e88 <_zbar_decode_code128+0x104c>)
  402dd6:	4b2d      	ldr	r3, [pc, #180]	; (402e8c <_zbar_decode_code128+0x1050>)
  402dd8:	9104      	str	r1, [sp, #16]
  402dda:	9909      	ldr	r1, [sp, #36]	; 0x24
  402ddc:	9007      	str	r0, [sp, #28]
  402dde:	e88d 000c 	stmia.w	sp, {r2, r3}
  402de2:	9106      	str	r1, [sp, #24]
  402de4:	9702      	str	r7, [sp, #8]
  402de6:	4628      	mov	r0, r5
  402de8:	f8cd 900c 	str.w	r9, [sp, #12]
  402dec:	f8cd a014 	str.w	sl, [sp, #20]
  402df0:	4927      	ldr	r1, [pc, #156]	; (402e90 <_zbar_decode_code128+0x1054>)
  402df2:	4a28      	ldr	r2, [pc, #160]	; (402e94 <_zbar_decode_code128+0x1058>)
  402df4:	4d28      	ldr	r5, [pc, #160]	; (402e98 <_zbar_decode_code128+0x105c>)
  402df6:	f240 13b9 	movw	r3, #441	; 0x1b9
  402dfa:	47a8      	blx	r5
  402dfc:	f7ff ba1f 	b.w	40223e <_zbar_decode_code128+0x402>
            dcode->buf[j] += 1;
        }
        zassert(dcode->buf[j] <= '9', delta,
                "start=%x end=%x i=%x j=%x %s\n", start, end, i, j,
                _zbar_decoder_buf_dump(dcode->buf, dcode->code128.character));
        zassert(code <= 9, delta,
  402e00:	4b1f      	ldr	r3, [pc, #124]	; (402e80 <_zbar_decode_code128+0x1044>)
  402e02:	f8b4 1104 	ldrh.w	r1, [r4, #260]	; 0x104
  402e06:	681a      	ldr	r2, [r3, #0]
  402e08:	4b1e      	ldr	r3, [pc, #120]	; (402e84 <_zbar_decode_code128+0x1048>)
  402e0a:	f8d2 a00c 	ldr.w	sl, [r2, #12]
  402e0e:	f341 110b 	sbfx	r1, r1, #4, #12
  402e12:	4798      	blx	r3
  402e14:	4a21      	ldr	r2, [pc, #132]	; (402e9c <_zbar_decode_code128+0x1060>)
  402e16:	4b22      	ldr	r3, [pc, #136]	; (402ea0 <_zbar_decode_code128+0x1064>)
  402e18:	9909      	ldr	r1, [sp, #36]	; 0x24
  402e1a:	9006      	str	r0, [sp, #24]
  402e1c:	e88d 000c 	stmia.w	sp, {r2, r3}
  402e20:	9102      	str	r1, [sp, #8]
  402e22:	9605      	str	r6, [sp, #20]
  402e24:	4650      	mov	r0, sl
  402e26:	9703      	str	r7, [sp, #12]
  402e28:	f8cd 8010 	str.w	r8, [sp, #16]
  402e2c:	491d      	ldr	r1, [pc, #116]	; (402ea4 <_zbar_decode_code128+0x1068>)
  402e2e:	4a19      	ldr	r2, [pc, #100]	; (402e94 <_zbar_decode_code128+0x1058>)
  402e30:	4e19      	ldr	r6, [pc, #100]	; (402e98 <_zbar_decode_code128+0x105c>)
  402e32:	f240 1341 	movw	r3, #321	; 0x141
  402e36:	47b0      	blx	r6
  402e38:	e6f7      	b.n	402c2a <_zbar_decode_code128+0xdee>
                             unsigned len)
{
    unsigned char *buf;
    if(len <= BUFFER_MIN)
        return(0);
    if(len < dcode->buf_alloc)
  402e3a:	6d66      	ldr	r6, [r4, #84]	; 0x54
  402e3c:	45b0      	cmp	r8, r6
  402e3e:	f4ff ae8a 	bcc.w	402b56 <_zbar_decode_code128+0xd1a>
        /* FIXME size reduction heuristic? */
        return(0);
    if(len > BUFFER_MAX)
  402e42:	f5b8 7f80 	cmp.w	r8, #256	; 0x100
  402e46:	f63f ae86 	bhi.w	402b56 <_zbar_decode_code128+0xd1a>
        return(1);
    if(len < dcode->buf_alloc + BUFFER_INCR) {
  402e4a:	3610      	adds	r6, #16
  402e4c:	45b0      	cmp	r8, r6
  402e4e:	d214      	bcs.n	402e7a <_zbar_decode_code128+0x103e>
  402e50:	f5b6 7f80 	cmp.w	r6, #256	; 0x100
  402e54:	bf28      	it	cs
  402e56:	f44f 7680 	movcs.w	r6, #256	; 0x100
        len = dcode->buf_alloc + BUFFER_INCR;
        if(len > BUFFER_MAX)
            len = BUFFER_MAX;
    }
    buf = realloc(dcode->buf, len);
  402e5a:	6de0      	ldr	r0, [r4, #92]	; 0x5c
  402e5c:	4b12      	ldr	r3, [pc, #72]	; (402ea8 <_zbar_decode_code128+0x106c>)
  402e5e:	4631      	mov	r1, r6
  402e60:	4798      	blx	r3
    if(!buf)
  402e62:	b140      	cbz	r0, 402e76 <_zbar_decode_code128+0x103a>
        return(1);
    dcode->buf = buf;
  402e64:	65e0      	str	r0, [r4, #92]	; 0x5c
    dcode->buf_alloc = len;
  402e66:	6566      	str	r6, [r4, #84]	; 0x54
  402e68:	4603      	mov	r3, r0
  402e6a:	e674      	b.n	402b56 <_zbar_decode_code128+0xd1a>
  402e6c:	b20a      	sxth	r2, r1

    charset = code - START_A;
    cexp = (code == START_C) ? 1 : 0;
    dbprintf(2, " start=%c", 'A' + charset);

    for(i = 1, j = 0; i < dcode128->character - 2; i++) {
  402e6e:	f04f 0900 	mov.w	r9, #0
  402e72:	2701      	movs	r7, #1
  402e74:	e4ca      	b.n	40280c <_zbar_decode_code128+0x9d0>
  402e76:	6de3      	ldr	r3, [r4, #92]	; 0x5c
  402e78:	e66d      	b.n	402b56 <_zbar_decode_code128+0xd1a>
    if(len < dcode->buf_alloc)
        /* FIXME size reduction heuristic? */
        return(0);
    if(len > BUFFER_MAX)
        return(1);
    if(len < dcode->buf_alloc + BUFFER_INCR) {
  402e7a:	4646      	mov	r6, r8
  402e7c:	e7ed      	b.n	402e5a <_zbar_decode_code128+0x101e>
  402e7e:	bf00      	nop
  402e80:	200008b0 	.word	0x200008b0
  402e84:	00403dfd 	.word	0x00403dfd
  402e88:	0041096c 	.word	0x0041096c
  402e8c:	00410d00 	.word	0x00410d00
  402e90:	00410c98 	.word	0x00410c98
  402e94:	004109c8 	.word	0x004109c8
  402e98:	0040814d 	.word	0x0040814d
  402e9c:	004108cc 	.word	0x004108cc
  402ea0:	00410d6c 	.word	0x00410d6c
  402ea4:	00410d08 	.word	0x00410d08
  402ea8:	00409189 	.word	0x00409189

00402eac <_zbar_decode_code39>:
    w *= 4;
    return(ref - dref <= w && w <= ref + dref);
}

zbar_symbol_type_t _zbar_decode_code39 (zbar_decoder_t *dcode)
{
  402eac:	b5f0      	push	{r4, r5, r6, r7, lr}

/* retrieve i-th previous element width */
static inline unsigned get_width (const zbar_decoder_t *dcode,
                                  unsigned char offset)
{
    return(dcode->w[(dcode->idx - offset) & (DECODE_WINDOW - 1)]);
  402eae:	7805      	ldrb	r5, [r0, #0]
  402eb0:	f8d0 20f0 	ldr.w	r2, [r0, #240]	; 0xf0
  402eb4:	4604      	mov	r4, r0
  402eb6:	f005 060f 	and.w	r6, r5, #15
  402eba:	f1a5 0109 	sub.w	r1, r5, #9
  402ebe:	eb04 0686 	add.w	r6, r4, r6, lsl #2
  402ec2:	f001 010f 	and.w	r1, r1, #15

    /* update latest character width */
    dcode39->s9 -= get_width(dcode, 9);
    dcode39->s9 += get_width(dcode, 0);

    if(dcode39->character < 0) {
  402ec6:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
  402eca:	6877      	ldr	r7, [r6, #4]
  402ecc:	eb04 0181 	add.w	r1, r4, r1, lsl #2
  402ed0:	18bb      	adds	r3, r7, r2
  402ed2:	f340 104b 	sbfx	r0, r0, #5, #12
{
    code39_decoder_t *dcode39 = &dcode->code39;

    /* update latest character width */
    dcode39->s9 -= get_width(dcode, 9);
    dcode39->s9 += get_width(dcode, 0);
  402ed6:	684a      	ldr	r2, [r1, #4]

    if(dcode39->character < 0) {
  402ed8:	fa0f fe80 	sxth.w	lr, r0
{
    code39_decoder_t *dcode39 = &dcode->code39;

    /* update latest character width */
    dcode39->s9 -= get_width(dcode, 9);
    dcode39->s9 += get_width(dcode, 0);
  402edc:	1a9b      	subs	r3, r3, r2

    if(dcode39->character < 0) {
  402ede:	f1be 0f00 	cmp.w	lr, #0
    w *= 4;
    return(ref - dref <= w && w <= ref + dref);
}

zbar_symbol_type_t _zbar_decode_code39 (zbar_decoder_t *dcode)
{
  402ee2:	b087      	sub	sp, #28
    code39_decoder_t *dcode39 = &dcode->code39;

    /* update latest character width */
    dcode39->s9 -= get_width(dcode, 9);
    dcode39->s9 += get_width(dcode, 0);
  402ee4:	f8c4 30f0 	str.w	r3, [r4, #240]	; 0xf0

    if(dcode39->character < 0) {
  402ee8:	fa1f fc80 	uxth.w	ip, r0
  402eec:	f2c0 81d4 	blt.w	403298 <_zbar_decode_code39+0x3ec>
            return(ZBAR_NONE);
        dbprintf(2, "      code39:");
        return(code39_decode_start(dcode));
    }

    if(++dcode39->element < 9)
  402ef0:	f894 10ec 	ldrb.w	r1, [r4, #236]	; 0xec
  402ef4:	f3c1 0243 	ubfx	r2, r1, #1, #4
  402ef8:	3201      	adds	r2, #1
  402efa:	f002 020f 	and.w	r2, r2, #15
  402efe:	f362 0144 	bfi	r1, r2, #1, #4
  402f02:	2a08      	cmp	r2, #8
  402f04:	f884 10ec 	strb.w	r1, [r4, #236]	; 0xec
  402f08:	f240 819d 	bls.w	403246 <_zbar_decode_code39+0x39a>

    dbprintf(2, "      code39[%c%02d+%x]",
             (dcode39->direction) ? '<' : '>',
             dcode39->character, dcode39->element);

    if(dcode39->element == 10) {
  402f0c:	b2c9      	uxtb	r1, r1
  402f0e:	f001 021e 	and.w	r2, r1, #30
  402f12:	2a14      	cmp	r2, #20
  402f14:	f000 832a 	beq.w	40356c <_zbar_decode_code39+0x6c0>
        dbprintf(2, "\n");
        return(ZBAR_NONE);
    }

    dbprintf(2, " s=%d ", dcode39->s9);
    if(!check_width(dcode39->width, dcode39->s9)) {
  402f18:	f8d4 20f4 	ldr.w	r2, [r4, #244]	; 0xf4
static inline int
check_width (unsigned ref,
             unsigned w)
{
    unsigned dref = ref;
    ref *= 4;
  402f1c:	0097      	lsls	r7, r2, #2
    w *= 4;
    return(ref - dref <= w && w <= ref + dref);
  402f1e:	ebc2 0e07 	rsb	lr, r2, r7
check_width (unsigned ref,
             unsigned w)
{
    unsigned dref = ref;
    ref *= 4;
    w *= 4;
  402f22:	0098      	lsls	r0, r3, #2
    return(ref - dref <= w && w <= ref + dref);
  402f24:	4570      	cmp	r0, lr
  402f26:	f0c0 8191 	bcc.w	40324c <_zbar_decode_code39+0x3a0>
  402f2a:	443a      	add	r2, r7
  402f2c:	4290      	cmp	r0, r2
  402f2e:	f200 818d 	bhi.w	40324c <_zbar_decode_code39+0x3a0>

static inline signed char code39_decode9 (zbar_decoder_t *dcode)
{
    code39_decoder_t *dcode39 = &dcode->code39;

    if(dcode39->s9 < 9)
  402f32:	2b08      	cmp	r3, #8
  402f34:	f240 830c 	bls.w	403550 <_zbar_decode_code39+0x6a4>
{
    /* result is encoded number of units - 2
     * (for use as zero based index)
     * or -1 if invalid
     */
    unsigned char E = ((e * n * 2 + 1) / s - 3) / 2;
  402f38:	6872      	ldr	r2, [r6, #4]
  402f3a:	eb02 02c2 	add.w	r2, r2, r2, lsl #3
  402f3e:	0112      	lsls	r2, r2, #4
  402f40:	3201      	adds	r2, #1
  402f42:	fbb2 f2f3 	udiv	r2, r2, r3
  402f46:	3a03      	subs	r2, #3
    return((E >= n - 3) ? -1 : E);
  402f48:	f3c2 0247 	ubfx	r2, r2, #1, #8
  402f4c:	2a44      	cmp	r2, #68	; 0x44
  402f4e:	f200 82ff 	bhi.w	403550 <_zbar_decode_code39+0x6a4>
static inline unsigned char code39_decode1 (unsigned char enc,
                                            unsigned e,
                                            unsigned s)
{
    unsigned char E = decode_e(e, s, 72);
    if(E > 18)
  402f52:	2a12      	cmp	r2, #18

static inline unsigned char code39_decode1 (unsigned char enc,
                                            unsigned e,
                                            unsigned s)
{
    unsigned char E = decode_e(e, s, 72);
  402f54:	b2d6      	uxtb	r6, r2
    if(E > 18)
  402f56:	f200 82fb 	bhi.w	403550 <_zbar_decode_code39+0x6a4>

/* retrieve i-th previous element width */
static inline unsigned get_width (const zbar_decoder_t *dcode,
                                  unsigned char offset)
{
    return(dcode->w[(dcode->idx - offset) & (DECODE_WINDOW - 1)]);
  402f5a:	1e68      	subs	r0, r5, #1
  402f5c:	f000 000f 	and.w	r0, r0, #15
  402f60:	eb04 0080 	add.w	r0, r4, r0, lsl #2
        return(0xff);
    enc <<= 1;
    if(E > 6) {
        enc |= 1;
  402f64:	2e06      	cmp	r6, #6
{
    /* result is encoded number of units - 2
     * (for use as zero based index)
     * or -1 if invalid
     */
    unsigned char E = ((e * n * 2 + 1) / s - 3) / 2;
  402f66:	6840      	ldr	r0, [r0, #4]
  402f68:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
  402f6c:	ea4f 1000 	mov.w	r0, r0, lsl #4
  402f70:	f100 0001 	add.w	r0, r0, #1
  402f74:	fbb0 f0f3 	udiv	r0, r0, r3
  402f78:	f1a0 0003 	sub.w	r0, r0, #3
    return((E >= n - 3) ? -1 : E);
  402f7c:	f3c0 0047 	ubfx	r0, r0, #1, #8
  402f80:	bf94      	ite	ls
  402f82:	2200      	movls	r2, #0
  402f84:	2201      	movhi	r2, #1
  402f86:	2844      	cmp	r0, #68	; 0x44
  402f88:	f200 82e2 	bhi.w	403550 <_zbar_decode_code39+0x6a4>
static inline unsigned char code39_decode1 (unsigned char enc,
                                            unsigned e,
                                            unsigned s)
{
    unsigned char E = decode_e(e, s, 72);
    if(E > 18)
  402f8c:	2812      	cmp	r0, #18

static inline unsigned char code39_decode1 (unsigned char enc,
                                            unsigned e,
                                            unsigned s)
{
    unsigned char E = decode_e(e, s, 72);
  402f8e:	b2c6      	uxtb	r6, r0
    if(E > 18)
  402f90:	f200 82de 	bhi.w	403550 <_zbar_decode_code39+0x6a4>

/* retrieve i-th previous element width */
static inline unsigned get_width (const zbar_decoder_t *dcode,
                                  unsigned char offset)
{
    return(dcode->w[(dcode->idx - offset) & (DECODE_WINDOW - 1)]);
  402f94:	1ea8      	subs	r0, r5, #2
  402f96:	f000 000f 	and.w	r0, r0, #15
  402f9a:	eb04 0080 	add.w	r0, r4, r0, lsl #2
        return(0xff);
    enc <<= 1;
  402f9e:	0052      	lsls	r2, r2, #1
{
    /* result is encoded number of units - 2
     * (for use as zero based index)
     * or -1 if invalid
     */
    unsigned char E = ((e * n * 2 + 1) / s - 3) / 2;
  402fa0:	6840      	ldr	r0, [r0, #4]
  402fa2:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
  402fa6:	0100      	lsls	r0, r0, #4
    if(E > 6) {
  402fa8:	2e06      	cmp	r6, #6
                                            unsigned s)
{
    unsigned char E = decode_e(e, s, 72);
    if(E > 18)
        return(0xff);
    enc <<= 1;
  402faa:	b2d2      	uxtb	r2, r2
  402fac:	f100 0001 	add.w	r0, r0, #1
  402fb0:	fbb0 f0f3 	udiv	r0, r0, r3
  402fb4:	f1a0 0003 	sub.w	r0, r0, #3
    if(E > 6) {
        enc |= 1;
  402fb8:	bf88      	it	hi
  402fba:	f042 0201 	orrhi.w	r2, r2, #1
    return((E >= n - 3) ? -1 : E);
  402fbe:	f3c0 0047 	ubfx	r0, r0, #1, #8
  402fc2:	bf88      	it	hi
  402fc4:	b2d2      	uxtbhi	r2, r2
  402fc6:	2844      	cmp	r0, #68	; 0x44
  402fc8:	f200 82c2 	bhi.w	403550 <_zbar_decode_code39+0x6a4>
static inline unsigned char code39_decode1 (unsigned char enc,
                                            unsigned e,
                                            unsigned s)
{
    unsigned char E = decode_e(e, s, 72);
    if(E > 18)
  402fcc:	2812      	cmp	r0, #18

static inline unsigned char code39_decode1 (unsigned char enc,
                                            unsigned e,
                                            unsigned s)
{
    unsigned char E = decode_e(e, s, 72);
  402fce:	b2c6      	uxtb	r6, r0
    if(E > 18)
  402fd0:	f200 82be 	bhi.w	403550 <_zbar_decode_code39+0x6a4>

/* retrieve i-th previous element width */
static inline unsigned get_width (const zbar_decoder_t *dcode,
                                  unsigned char offset)
{
    return(dcode->w[(dcode->idx - offset) & (DECODE_WINDOW - 1)]);
  402fd4:	1ee8      	subs	r0, r5, #3
  402fd6:	f000 000f 	and.w	r0, r0, #15
  402fda:	eb04 0080 	add.w	r0, r4, r0, lsl #2
        return(0xff);
    enc <<= 1;
    if(E > 6) {
  402fde:	2e06      	cmp	r6, #6
{
    /* result is encoded number of units - 2
     * (for use as zero based index)
     * or -1 if invalid
     */
    unsigned char E = ((e * n * 2 + 1) / s - 3) / 2;
  402fe0:	6840      	ldr	r0, [r0, #4]
  402fe2:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
  402fe6:	ea4f 1000 	mov.w	r0, r0, lsl #4
                                            unsigned s)
{
    unsigned char E = decode_e(e, s, 72);
    if(E > 18)
        return(0xff);
    enc <<= 1;
  402fea:	ea4f 0242 	mov.w	r2, r2, lsl #1
  402fee:	f100 0001 	add.w	r0, r0, #1
  402ff2:	fbb0 f0f3 	udiv	r0, r0, r3
  402ff6:	f1a0 0003 	sub.w	r0, r0, #3
    if(E > 6) {
        enc |= 1;
  402ffa:	bf88      	it	hi
  402ffc:	f042 0201 	orrhi.w	r2, r2, #1
    return((E >= n - 3) ? -1 : E);
  403000:	f3c0 0047 	ubfx	r0, r0, #1, #8
  403004:	bf88      	it	hi
  403006:	b2d2      	uxtbhi	r2, r2
  403008:	2844      	cmp	r0, #68	; 0x44
  40300a:	f200 82a1 	bhi.w	403550 <_zbar_decode_code39+0x6a4>
static inline unsigned char code39_decode1 (unsigned char enc,
                                            unsigned e,
                                            unsigned s)
{
    unsigned char E = decode_e(e, s, 72);
    if(E > 18)
  40300e:	2812      	cmp	r0, #18

static inline unsigned char code39_decode1 (unsigned char enc,
                                            unsigned e,
                                            unsigned s)
{
    unsigned char E = decode_e(e, s, 72);
  403010:	b2c6      	uxtb	r6, r0
    if(E > 18)
  403012:	f200 829d 	bhi.w	403550 <_zbar_decode_code39+0x6a4>

/* retrieve i-th previous element width */
static inline unsigned get_width (const zbar_decoder_t *dcode,
                                  unsigned char offset)
{
    return(dcode->w[(dcode->idx - offset) & (DECODE_WINDOW - 1)]);
  403016:	1f28      	subs	r0, r5, #4
  403018:	f000 000f 	and.w	r0, r0, #15
  40301c:	eb04 0080 	add.w	r0, r4, r0, lsl #2
        return(0xff);
    enc <<= 1;
  403020:	0052      	lsls	r2, r2, #1
{
    /* result is encoded number of units - 2
     * (for use as zero based index)
     * or -1 if invalid
     */
    unsigned char E = ((e * n * 2 + 1) / s - 3) / 2;
  403022:	6840      	ldr	r0, [r0, #4]
  403024:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
  403028:	0100      	lsls	r0, r0, #4
  40302a:	3001      	adds	r0, #1
  40302c:	fbb0 f0f3 	udiv	r0, r0, r3
  403030:	3803      	subs	r0, #3
    if(E > 6) {
  403032:	2e06      	cmp	r6, #6
                                            unsigned s)
{
    unsigned char E = decode_e(e, s, 72);
    if(E > 18)
        return(0xff);
    enc <<= 1;
  403034:	b2d2      	uxtb	r2, r2
    return((E >= n - 3) ? -1 : E);
  403036:	f3c0 0047 	ubfx	r0, r0, #1, #8
    if(E > 6) {
        enc |= 1;
  40303a:	bf88      	it	hi
  40303c:	f042 0201 	orrhi.w	r2, r2, #1
  403040:	2844      	cmp	r0, #68	; 0x44
  403042:	f200 8285 	bhi.w	403550 <_zbar_decode_code39+0x6a4>
static inline unsigned char code39_decode1 (unsigned char enc,
                                            unsigned e,
                                            unsigned s)
{
    unsigned char E = decode_e(e, s, 72);
    if(E > 18)
  403046:	2812      	cmp	r0, #18

static inline unsigned char code39_decode1 (unsigned char enc,
                                            unsigned e,
                                            unsigned s)
{
    unsigned char E = decode_e(e, s, 72);
  403048:	b2c6      	uxtb	r6, r0
    if(E > 18)
  40304a:	f200 8281 	bhi.w	403550 <_zbar_decode_code39+0x6a4>
        return(0xff);
    enc <<= 1;
  40304e:	0052      	lsls	r2, r2, #1
    if(E > 6) {
  403050:	2e06      	cmp	r6, #6
                                            unsigned s)
{
    unsigned char E = decode_e(e, s, 72);
    if(E > 18)
        return(0xff);
    enc <<= 1;
  403052:	b2d2      	uxtb	r2, r2
    if(E > 6) {
        enc |= 1;
  403054:	bf88      	it	hi
  403056:	f042 0201 	orrhi.w	r2, r2, #1
            return(-1);
    }
    zassert(enc < 0x20, -1, " enc=%x s9=%x\n", enc, dcode39->s9);

    /* lookup first 5 encoded widths for coarse decode */
    unsigned char idx = code39_hi[enc];
  40305a:	4885      	ldr	r0, [pc, #532]	; (403270 <_zbar_decode_code39+0x3c4>)
  40305c:	5c86      	ldrb	r6, [r0, r2]
    if(idx == 0xff)
  40305e:	2eff      	cmp	r6, #255	; 0xff
  403060:	f000 8276 	beq.w	403550 <_zbar_decode_code39+0x6a4>

/* retrieve i-th previous element width */
static inline unsigned get_width (const zbar_decoder_t *dcode,
                                  unsigned char offset)
{
    return(dcode->w[(dcode->idx - offset) & (DECODE_WINDOW - 1)]);
  403064:	1f68      	subs	r0, r5, #5
  403066:	f000 000f 	and.w	r0, r0, #15
  40306a:	eb04 0080 	add.w	r0, r4, r0, lsl #2
{
    /* result is encoded number of units - 2
     * (for use as zero based index)
     * or -1 if invalid
     */
    unsigned char E = ((e * n * 2 + 1) / s - 3) / 2;
  40306e:	6840      	ldr	r0, [r0, #4]
  403070:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
  403074:	0100      	lsls	r0, r0, #4
  403076:	3001      	adds	r0, #1
  403078:	fbb0 f0f3 	udiv	r0, r0, r3
  40307c:	3803      	subs	r0, #3
    return((E >= n - 3) ? -1 : E);
  40307e:	f3c0 0047 	ubfx	r0, r0, #1, #8
  403082:	2844      	cmp	r0, #68	; 0x44
  403084:	f200 8264 	bhi.w	403550 <_zbar_decode_code39+0x6a4>
static inline unsigned char code39_decode1 (unsigned char enc,
                                            unsigned e,
                                            unsigned s)
{
    unsigned char E = decode_e(e, s, 72);
    if(E > 18)
  403088:	2812      	cmp	r0, #18

static inline unsigned char code39_decode1 (unsigned char enc,
                                            unsigned e,
                                            unsigned s)
{
    unsigned char E = decode_e(e, s, 72);
  40308a:	b2c7      	uxtb	r7, r0
    if(E > 18)
  40308c:	f200 8260 	bhi.w	403550 <_zbar_decode_code39+0x6a4>

/* retrieve i-th previous element width */
static inline unsigned get_width (const zbar_decoder_t *dcode,
                                  unsigned char offset)
{
    return(dcode->w[(dcode->idx - offset) & (DECODE_WINDOW - 1)]);
  403090:	1fa8      	subs	r0, r5, #6
  403092:	f000 000f 	and.w	r0, r0, #15
  403096:	eb04 0080 	add.w	r0, r4, r0, lsl #2
        return(0xff);
    enc <<= 1;
  40309a:	0052      	lsls	r2, r2, #1
{
    /* result is encoded number of units - 2
     * (for use as zero based index)
     * or -1 if invalid
     */
    unsigned char E = ((e * n * 2 + 1) / s - 3) / 2;
  40309c:	6840      	ldr	r0, [r0, #4]
  40309e:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
  4030a2:	0100      	lsls	r0, r0, #4
  4030a4:	3001      	adds	r0, #1
  4030a6:	fbb0 f0f3 	udiv	r0, r0, r3
  4030aa:	3803      	subs	r0, #3
    if(E > 6) {
  4030ac:	2f06      	cmp	r7, #6
                                            unsigned s)
{
    unsigned char E = decode_e(e, s, 72);
    if(E > 18)
        return(0xff);
    enc <<= 1;
  4030ae:	b2d2      	uxtb	r2, r2
    return((E >= n - 3) ? -1 : E);
  4030b0:	f3c0 0047 	ubfx	r0, r0, #1, #8
    if(E > 6) {
        enc |= 1;
  4030b4:	bf88      	it	hi
  4030b6:	f042 0201 	orrhi.w	r2, r2, #1
  4030ba:	2844      	cmp	r0, #68	; 0x44
  4030bc:	f200 8248 	bhi.w	403550 <_zbar_decode_code39+0x6a4>
static inline unsigned char code39_decode1 (unsigned char enc,
                                            unsigned e,
                                            unsigned s)
{
    unsigned char E = decode_e(e, s, 72);
    if(E > 18)
  4030c0:	2812      	cmp	r0, #18

static inline unsigned char code39_decode1 (unsigned char enc,
                                            unsigned e,
                                            unsigned s)
{
    unsigned char E = decode_e(e, s, 72);
  4030c2:	b2c7      	uxtb	r7, r0
    if(E > 18)
  4030c4:	f200 8244 	bhi.w	403550 <_zbar_decode_code39+0x6a4>
        return(0xff);
    enc <<= 1;
  4030c8:	0052      	lsls	r2, r2, #1
  4030ca:	b2d0      	uxtb	r0, r2

/* retrieve i-th previous element width */
static inline unsigned get_width (const zbar_decoder_t *dcode,
                                  unsigned char offset)
{
    return(dcode->w[(dcode->idx - offset) & (DECODE_WINDOW - 1)]);
  4030cc:	1fea      	subs	r2, r5, #7
  4030ce:	f002 020f 	and.w	r2, r2, #15
  4030d2:	eb04 0282 	add.w	r2, r4, r2, lsl #2
    if(E > 6) {
  4030d6:	2f06      	cmp	r7, #6
{
    /* result is encoded number of units - 2
     * (for use as zero based index)
     * or -1 if invalid
     */
    unsigned char E = ((e * n * 2 + 1) / s - 3) / 2;
  4030d8:	6852      	ldr	r2, [r2, #4]
  4030da:	eb02 02c2 	add.w	r2, r2, r2, lsl #3
  4030de:	ea4f 1202 	mov.w	r2, r2, lsl #4
  4030e2:	f102 0201 	add.w	r2, r2, #1
  4030e6:	fbb2 f2f3 	udiv	r2, r2, r3
  4030ea:	f1a2 0203 	sub.w	r2, r2, #3
    return((E >= n - 3) ? -1 : E);
  4030ee:	f3c2 0247 	ubfx	r2, r2, #1, #8
        enc |= 1;
  4030f2:	bf88      	it	hi
  4030f4:	f040 0001 	orrhi.w	r0, r0, #1
  4030f8:	2a44      	cmp	r2, #68	; 0x44
  4030fa:	f200 8229 	bhi.w	403550 <_zbar_decode_code39+0x6a4>
static inline unsigned char code39_decode1 (unsigned char enc,
                                            unsigned e,
                                            unsigned s)
{
    unsigned char E = decode_e(e, s, 72);
    if(E > 18)
  4030fe:	2a12      	cmp	r2, #18

static inline unsigned char code39_decode1 (unsigned char enc,
                                            unsigned e,
                                            unsigned s)
{
    unsigned char E = decode_e(e, s, 72);
  403100:	b2d7      	uxtb	r7, r2
    if(E > 18)
  403102:	f200 8225 	bhi.w	403550 <_zbar_decode_code39+0x6a4>
        return(0xff);
    enc <<= 1;
  403106:	0040      	lsls	r0, r0, #1
    if(E > 6) {
  403108:	2f06      	cmp	r7, #6
                                            unsigned s)
{
    unsigned char E = decode_e(e, s, 72);
    if(E > 18)
        return(0xff);
    enc <<= 1;
  40310a:	b2c0      	uxtb	r0, r0
    if(E > 6) {
  40310c:	d904      	bls.n	403118 <_zbar_decode_code39+0x26c>
        enc |= 1;
  40310e:	f040 0001 	orr.w	r0, r0, #1
        return(-1);

    /* encode remaining widths (NB first encoded width is lost) */
    for(; i < 9; i++) {
        enc = code39_decode1(enc, get_width(dcode, i), dcode39->s9);
        if(enc == 0xff)
  403112:	28ff      	cmp	r0, #255	; 0xff
  403114:	f000 821c 	beq.w	403550 <_zbar_decode_code39+0x6a4>

/* retrieve i-th previous element width */
static inline unsigned get_width (const zbar_decoder_t *dcode,
                                  unsigned char offset)
{
    return(dcode->w[(dcode->idx - offset) & (DECODE_WINDOW - 1)]);
  403118:	f1a5 0208 	sub.w	r2, r5, #8
  40311c:	f002 020f 	and.w	r2, r2, #15
  403120:	eb04 0282 	add.w	r2, r4, r2, lsl #2
{
    /* result is encoded number of units - 2
     * (for use as zero based index)
     * or -1 if invalid
     */
    unsigned char E = ((e * n * 2 + 1) / s - 3) / 2;
  403124:	6852      	ldr	r2, [r2, #4]
  403126:	eb02 02c2 	add.w	r2, r2, r2, lsl #3
  40312a:	0112      	lsls	r2, r2, #4
  40312c:	3201      	adds	r2, #1
  40312e:	fbb2 f2f3 	udiv	r2, r2, r3
  403132:	3a03      	subs	r2, #3
    return((E >= n - 3) ? -1 : E);
  403134:	f3c2 0247 	ubfx	r2, r2, #1, #8
  403138:	2a44      	cmp	r2, #68	; 0x44
  40313a:	f200 8209 	bhi.w	403550 <_zbar_decode_code39+0x6a4>
static inline unsigned char code39_decode1 (unsigned char enc,
                                            unsigned e,
                                            unsigned s)
{
    unsigned char E = decode_e(e, s, 72);
    if(E > 18)
  40313e:	2a12      	cmp	r2, #18

static inline unsigned char code39_decode1 (unsigned char enc,
                                            unsigned e,
                                            unsigned s)
{
    unsigned char E = decode_e(e, s, 72);
  403140:	b2d5      	uxtb	r5, r2
    if(E > 18)
  403142:	f200 8205 	bhi.w	403550 <_zbar_decode_code39+0x6a4>
        return(0xff);
    enc <<= 1;
  403146:	0040      	lsls	r0, r0, #1
  403148:	b2c0      	uxtb	r0, r0
    if(E > 6) {
  40314a:	2d06      	cmp	r5, #6
        enc |= 1;
  40314c:	bf88      	it	hi
  40314e:	f040 0001 	orrhi.w	r0, r0, #1
        return(-1);

    /* encode remaining widths (NB first encoded width is lost) */
    for(; i < 9; i++) {
        enc = code39_decode1(enc, get_width(dcode, i), dcode39->s9);
        if(enc == 0xff)
  403152:	28ff      	cmp	r0, #255	; 0xff
  403154:	f000 81fc 	beq.w	403550 <_zbar_decode_code39+0x6a4>
            return(-1);
    }

    if((idx & 0xc0) == 0x80)
  403158:	f006 02c0 	and.w	r2, r6, #192	; 0xc0
  40315c:	2a80      	cmp	r2, #128	; 0x80
  40315e:	f000 82ed 	beq.w	40373c <_zbar_decode_code39+0x890>
        idx = (idx & 0x3f) + ((enc >> 3) & 1);
    else if((idx & 0xc0) == 0xc0)
  403162:	2ac0      	cmp	r2, #192	; 0xc0
  403164:	f000 8313 	beq.w	40378e <_zbar_decode_code39+0x8e2>
        idx = (idx & 0x3f) + ((enc >> 2) & 1);
    else if(idx & 0xc0)
  403168:	b122      	cbz	r2, 403174 <_zbar_decode_code39+0x2c8>
        idx = (idx & 0x3f) + ((enc >> 2) & 3);
  40316a:	f006 063f 	and.w	r6, r6, #63	; 0x3f
  40316e:	f3c0 0281 	ubfx	r2, r0, #2, #2
  403172:	4416      	add	r6, r2
    zassert(idx < 0x2c, -1, " idx=%x enc=%x s9=%x\n", idx, enc, dcode39->s9);
  403174:	2e2b      	cmp	r6, #43	; 0x2b
  403176:	f200 81dc 	bhi.w	403532 <_zbar_decode_code39+0x686>

    const char39_t *c = &code39_encodings[idx];
    dbprintf(2, " i=%02x chk=%02x c=%02x/%02x", idx, c->chk, c->fwd, c->rev);
    if(enc != c->chk)
  40317a:	eb06 0646 	add.w	r6, r6, r6, lsl #1
  40317e:	4a3d      	ldr	r2, [pc, #244]	; (403274 <_zbar_decode_code39+0x3c8>)
  403180:	5d95      	ldrb	r5, [r2, r6]
  403182:	4285      	cmp	r5, r0
  403184:	4416      	add	r6, r2
  403186:	f040 81e3 	bne.w	403550 <_zbar_decode_code39+0x6a4>
        return(-1);

    dcode39->width = dcode39->s9;
  40318a:	f8c4 30f4 	str.w	r3, [r4, #244]	; 0xf4

    signed char c = code39_decode9(dcode);
    dbprintf(2, " c=%d", c);

    /* lock shared resources */
    if(!dcode39->character && acquire_lock(dcode, ZBAR_CODE39)) {
  40318e:	f8d4 20ec 	ldr.w	r2, [r4, #236]	; 0xec
    dbprintf(2, " i=%02x chk=%02x c=%02x/%02x", idx, c->chk, c->fwd, c->rev);
    if(enc != c->chk)
        return(-1);

    dcode39->width = dcode39->s9;
    return((dcode39->direction) ? c->rev : c->fwd);
  403192:	07cb      	lsls	r3, r1, #31

    signed char c = code39_decode9(dcode);
    dbprintf(2, " c=%d", c);

    /* lock shared resources */
    if(!dcode39->character && acquire_lock(dcode, ZBAR_CODE39)) {
  403194:	4b38      	ldr	r3, [pc, #224]	; (403278 <_zbar_decode_code39+0x3cc>)
    dbprintf(2, " i=%02x chk=%02x c=%02x/%02x", idx, c->chk, c->fwd, c->rev);
    if(enc != c->chk)
        return(-1);

    dcode39->width = dcode39->s9;
    return((dcode39->direction) ? c->rev : c->fwd);
  403196:	bf4c      	ite	mi
  403198:	7876      	ldrbmi	r6, [r6, #1]
  40319a:	78b6      	ldrbpl	r6, [r6, #2]

    signed char c = code39_decode9(dcode);
    dbprintf(2, " c=%d", c);

    /* lock shared resources */
    if(!dcode39->character && acquire_lock(dcode, ZBAR_CODE39)) {
  40319c:	4013      	ands	r3, r2
  40319e:	2b00      	cmp	r3, #0
  4031a0:	f040 82b7 	bne.w	403712 <_zbar_decode_code39+0x866>

/* acquire shared state lock */
static inline char acquire_lock (zbar_decoder_t *dcode,
                                 zbar_symbol_type_t req)
{
    if(dcode->lock) {
  4031a4:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
  4031a8:	2b00      	cmp	r3, #0
  4031aa:	f040 8223 	bne.w	4035f4 <_zbar_decode_code39+0x748>
        dcode39->character = -1;
        return(ZBAR_PARTIAL);
    }

    if(c < 0 || size_buf(dcode, dcode39->character + 1)) {
  4031ae:	b277      	sxtb	r7, r6
        dbprintf(2, " [locked %d]\n", dcode->lock);
        return(1);
    }
    dcode->lock = req;
  4031b0:	2327      	movs	r3, #39	; 0x27
  4031b2:	2f00      	cmp	r7, #0
  4031b4:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
  4031b8:	f2c0 81d4 	blt.w	403564 <_zbar_decode_code39+0x6b8>
  4031bc:	f342 1c4b 	sbfx	ip, r2, #5, #12
  4031c0:	fa1f fc8c 	uxth.w	ip, ip
  4031c4:	fa0f fc8c 	sxth.w	ip, ip
  4031c8:	f10c 0501 	add.w	r5, ip, #1
/* ensure output buffer has sufficient allocation for request */
static inline char size_buf (zbar_decoder_t *dcode,
                             unsigned len)
{
    unsigned char *buf;
    if(len <= BUFFER_MIN)
  4031cc:	2d20      	cmp	r5, #32
  4031ce:	d918      	bls.n	403202 <_zbar_decode_code39+0x356>
        return(0);
    if(len < dcode->buf_alloc)
  4031d0:	6d63      	ldr	r3, [r4, #84]	; 0x54
  4031d2:	42ab      	cmp	r3, r5
  4031d4:	d815      	bhi.n	403202 <_zbar_decode_code39+0x356>
        /* FIXME size reduction heuristic? */
        return(0);
    if(len > BUFFER_MAX)
  4031d6:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
  4031da:	f200 81bf 	bhi.w	40355c <_zbar_decode_code39+0x6b0>
        return(1);
    if(len < dcode->buf_alloc + BUFFER_INCR) {
  4031de:	3310      	adds	r3, #16
  4031e0:	429d      	cmp	r5, r3
  4031e2:	d205      	bcs.n	4031f0 <_zbar_decode_code39+0x344>
  4031e4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
  4031e8:	bf28      	it	cs
  4031ea:	f44f 7380 	movcs.w	r3, #256	; 0x100
  4031ee:	461d      	mov	r5, r3
        len = dcode->buf_alloc + BUFFER_INCR;
        if(len > BUFFER_MAX)
            len = BUFFER_MAX;
    }
    buf = realloc(dcode->buf, len);
  4031f0:	6de0      	ldr	r0, [r4, #92]	; 0x5c
  4031f2:	4b22      	ldr	r3, [pc, #136]	; (40327c <_zbar_decode_code39+0x3d0>)
  4031f4:	4629      	mov	r1, r5
  4031f6:	4798      	blx	r3
    if(!buf)
  4031f8:	2800      	cmp	r0, #0
  4031fa:	f000 81af 	beq.w	40355c <_zbar_decode_code39+0x6b0>
        return(1);
    dcode->buf = buf;
  4031fe:	65e0      	str	r0, [r4, #92]	; 0x5c
    dcode->buf_alloc = len;
  403200:	6565      	str	r5, [r4, #84]	; 0x54
        release_lock(dcode, ZBAR_CODE39);
        dcode39->character = -1;
        return(ZBAR_NONE);
    }
    else {
        zassert(c < 0x2c, ZBAR_NONE, "c=%02x s9=%x\n", c, dcode39->s9);
  403202:	2f2b      	cmp	r7, #43	; 0x2b
  403204:	f300 82a0 	bgt.w	403748 <_zbar_decode_code39+0x89c>
        dbprintf(2, "\n");
    }

    dcode->buf[dcode39->character++] = c;
  403208:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
  40320c:	6de5      	ldr	r5, [r4, #92]	; 0x5c
  40320e:	f343 124b 	sbfx	r2, r3, #5, #12
  403212:	f3c2 010b 	ubfx	r1, r2, #0, #12
  403216:	3101      	adds	r1, #1
  403218:	b212      	sxth	r2, r2
  40321a:	f361 1350 	bfi	r3, r1, #5, #12
  40321e:	f8c4 30ec 	str.w	r3, [r4, #236]	; 0xec

    return(ZBAR_NONE);
  403222:	2000      	movs	r0, #0
    else {
        zassert(c < 0x2c, ZBAR_NONE, "c=%02x s9=%x\n", c, dcode39->s9);
        dbprintf(2, "\n");
    }

    dcode->buf[dcode39->character++] = c;
  403224:	54ae      	strb	r6, [r5, r2]

    return(ZBAR_NONE);
  403226:	e00f      	b.n	403248 <_zbar_decode_code39+0x39c>
        idx = (idx & 0x3f) + ((enc >> 3) & 1);
    else if((idx & 0xc0) == 0xc0)
        idx = (idx & 0x3f) + ((enc >> 2) & 1);
    else if(idx & 0xc0)
        idx = (idx & 0x3f) + ((enc >> 2) & 3);
    zassert(idx < 0x2c, -1, " idx=%x enc=%x s9=%x\n", idx, enc, dcode39->s9);
  403228:	4915      	ldr	r1, [pc, #84]	; (403280 <_zbar_decode_code39+0x3d4>)
  40322a:	4c16      	ldr	r4, [pc, #88]	; (403284 <_zbar_decode_code39+0x3d8>)
  40322c:	6809      	ldr	r1, [r1, #0]
  40322e:	4d16      	ldr	r5, [pc, #88]	; (403288 <_zbar_decode_code39+0x3dc>)
  403230:	9203      	str	r2, [sp, #12]
  403232:	9304      	str	r3, [sp, #16]
  403234:	9401      	str	r4, [sp, #4]
  403236:	9002      	str	r0, [sp, #8]
  403238:	9500      	str	r5, [sp, #0]
  40323a:	68c8      	ldr	r0, [r1, #12]
  40323c:	4a13      	ldr	r2, [pc, #76]	; (40328c <_zbar_decode_code39+0x3e0>)
  40323e:	4914      	ldr	r1, [pc, #80]	; (403290 <_zbar_decode_code39+0x3e4>)
  403240:	4c14      	ldr	r4, [pc, #80]	; (403294 <_zbar_decode_code39+0x3e8>)
  403242:	23b4      	movs	r3, #180	; 0xb4
  403244:	47a0      	blx	r4
{
    code39_decoder_t *dcode39 = &dcode->code39;
    dbprintf(2, " s=%d ", dcode39->s9);

    signed char c = code39_decode9(dcode);
    if(c != 0x19 && c != 0x2b) {
  403246:	2000      	movs	r0, #0
    }

    dcode->buf[dcode39->character++] = c;

    return(ZBAR_NONE);
}
  403248:	b007      	add	sp, #28
  40324a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    }

    dbprintf(2, " s=%d ", dcode39->s9);
    if(!check_width(dcode39->width, dcode39->s9)) {
        dbprintf(2, " [width]\n");
        if(dcode39->character)
  40324c:	f8d4 20ec 	ldr.w	r2, [r4, #236]	; 0xec
  403250:	4b09      	ldr	r3, [pc, #36]	; (403278 <_zbar_decode_code39+0x3cc>)
  403252:	4013      	ands	r3, r2
  403254:	2b00      	cmp	r3, #0
  403256:	f040 8181 	bne.w	40355c <_zbar_decode_code39+0x6b0>
            release_lock(dcode, ZBAR_CODE39);
        dcode39->character = -1;
  40325a:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
  40325e:	f04f 32ff 	mov.w	r2, #4294967295
  403262:	f362 1350 	bfi	r3, r2, #5, #12
        return(ZBAR_NONE);
  403266:	2000      	movs	r0, #0
    dbprintf(2, " s=%d ", dcode39->s9);
    if(!check_width(dcode39->width, dcode39->s9)) {
        dbprintf(2, " [width]\n");
        if(dcode39->character)
            release_lock(dcode, ZBAR_CODE39);
        dcode39->character = -1;
  403268:	f8c4 30ec 	str.w	r3, [r4, #236]	; 0xec
    }

    dcode->buf[dcode39->character++] = c;

    return(ZBAR_NONE);
}
  40326c:	b007      	add	sp, #28
  40326e:	bdf0      	pop	{r4, r5, r6, r7, pc}
  403270:	00410eb0 	.word	0x00410eb0
  403274:	00410fdc 	.word	0x00410fdc
  403278:	0001ffe0 	.word	0x0001ffe0
  40327c:	00409189 	.word	0x00409189
  403280:	200008b0 	.word	0x200008b0
  403284:	00410f38 	.word	0x00410f38
  403288:	00411074 	.word	0x00411074
  40328c:	00410f14 	.word	0x00410f14
  403290:	00410ed0 	.word	0x00410ed0
  403294:	0040814d 	.word	0x0040814d
    /* update latest character width */
    dcode39->s9 -= get_width(dcode, 9);
    dcode39->s9 += get_width(dcode, 0);

    if(dcode39->character < 0) {
        if(get_color(dcode) != ZBAR_BAR)
  403298:	07ef      	lsls	r7, r5, #31
  40329a:	d5d4      	bpl.n	403246 <_zbar_decode_code39+0x39a>

static inline signed char code39_decode9 (zbar_decoder_t *dcode)
{
    code39_decoder_t *dcode39 = &dcode->code39;

    if(dcode39->s9 < 9)
  40329c:	2b08      	cmp	r3, #8
  40329e:	d9d2      	bls.n	403246 <_zbar_decode_code39+0x39a>
{
    /* result is encoded number of units - 2
     * (for use as zero based index)
     * or -1 if invalid
     */
    unsigned char E = ((e * n * 2 + 1) / s - 3) / 2;
  4032a0:	6872      	ldr	r2, [r6, #4]
  4032a2:	eb02 02c2 	add.w	r2, r2, r2, lsl #3
  4032a6:	0112      	lsls	r2, r2, #4
  4032a8:	3201      	adds	r2, #1
  4032aa:	fbb2 f2f3 	udiv	r2, r2, r3
  4032ae:	3a03      	subs	r2, #3
    return((E >= n - 3) ? -1 : E);
  4032b0:	f3c2 0247 	ubfx	r2, r2, #1, #8
  4032b4:	2a44      	cmp	r2, #68	; 0x44
  4032b6:	d8c6      	bhi.n	403246 <_zbar_decode_code39+0x39a>
static inline unsigned char code39_decode1 (unsigned char enc,
                                            unsigned e,
                                            unsigned s)
{
    unsigned char E = decode_e(e, s, 72);
    if(E > 18)
  4032b8:	2a12      	cmp	r2, #18

static inline unsigned char code39_decode1 (unsigned char enc,
                                            unsigned e,
                                            unsigned s)
{
    unsigned char E = decode_e(e, s, 72);
  4032ba:	b2d0      	uxtb	r0, r2
    if(E > 18)
  4032bc:	d8c3      	bhi.n	403246 <_zbar_decode_code39+0x39a>

/* retrieve i-th previous element width */
static inline unsigned get_width (const zbar_decoder_t *dcode,
                                  unsigned char offset)
{
    return(dcode->w[(dcode->idx - offset) & (DECODE_WINDOW - 1)]);
  4032be:	1e6a      	subs	r2, r5, #1
  4032c0:	f002 020f 	and.w	r2, r2, #15
  4032c4:	eb04 0282 	add.w	r2, r4, r2, lsl #2
        return(0xff);
    enc <<= 1;
    if(E > 6) {
        enc |= 1;
  4032c8:	2806      	cmp	r0, #6
{
    /* result is encoded number of units - 2
     * (for use as zero based index)
     * or -1 if invalid
     */
    unsigned char E = ((e * n * 2 + 1) / s - 3) / 2;
  4032ca:	6852      	ldr	r2, [r2, #4]
  4032cc:	eb02 02c2 	add.w	r2, r2, r2, lsl #3
  4032d0:	ea4f 1202 	mov.w	r2, r2, lsl #4
  4032d4:	f102 0201 	add.w	r2, r2, #1
  4032d8:	fbb2 f2f3 	udiv	r2, r2, r3
  4032dc:	f1a2 0203 	sub.w	r2, r2, #3
    return((E >= n - 3) ? -1 : E);
  4032e0:	f3c2 0247 	ubfx	r2, r2, #1, #8
  4032e4:	bf94      	ite	ls
  4032e6:	2000      	movls	r0, #0
  4032e8:	2001      	movhi	r0, #1
  4032ea:	2a44      	cmp	r2, #68	; 0x44
  4032ec:	d8ab      	bhi.n	403246 <_zbar_decode_code39+0x39a>
static inline unsigned char code39_decode1 (unsigned char enc,
                                            unsigned e,
                                            unsigned s)
{
    unsigned char E = decode_e(e, s, 72);
    if(E > 18)
  4032ee:	2a12      	cmp	r2, #18

static inline unsigned char code39_decode1 (unsigned char enc,
                                            unsigned e,
                                            unsigned s)
{
    unsigned char E = decode_e(e, s, 72);
  4032f0:	b2d6      	uxtb	r6, r2
    if(E > 18)
  4032f2:	d8a8      	bhi.n	403246 <_zbar_decode_code39+0x39a>

/* retrieve i-th previous element width */
static inline unsigned get_width (const zbar_decoder_t *dcode,
                                  unsigned char offset)
{
    return(dcode->w[(dcode->idx - offset) & (DECODE_WINDOW - 1)]);
  4032f4:	1eaa      	subs	r2, r5, #2
  4032f6:	f002 020f 	and.w	r2, r2, #15
  4032fa:	eb04 0282 	add.w	r2, r4, r2, lsl #2
        return(0xff);
    enc <<= 1;
  4032fe:	0040      	lsls	r0, r0, #1
{
    /* result is encoded number of units - 2
     * (for use as zero based index)
     * or -1 if invalid
     */
    unsigned char E = ((e * n * 2 + 1) / s - 3) / 2;
  403300:	6852      	ldr	r2, [r2, #4]
  403302:	eb02 02c2 	add.w	r2, r2, r2, lsl #3
  403306:	0112      	lsls	r2, r2, #4
    if(E > 6) {
  403308:	2e06      	cmp	r6, #6
                                            unsigned s)
{
    unsigned char E = decode_e(e, s, 72);
    if(E > 18)
        return(0xff);
    enc <<= 1;
  40330a:	b2c0      	uxtb	r0, r0
  40330c:	f102 0201 	add.w	r2, r2, #1
  403310:	fbb2 f2f3 	udiv	r2, r2, r3
  403314:	f1a2 0203 	sub.w	r2, r2, #3
    if(E > 6) {
        enc |= 1;
  403318:	bf88      	it	hi
  40331a:	f040 0001 	orrhi.w	r0, r0, #1
    return((E >= n - 3) ? -1 : E);
  40331e:	f3c2 0247 	ubfx	r2, r2, #1, #8
  403322:	bf88      	it	hi
  403324:	b2c0      	uxtbhi	r0, r0
  403326:	2a44      	cmp	r2, #68	; 0x44
  403328:	d88d      	bhi.n	403246 <_zbar_decode_code39+0x39a>
static inline unsigned char code39_decode1 (unsigned char enc,
                                            unsigned e,
                                            unsigned s)
{
    unsigned char E = decode_e(e, s, 72);
    if(E > 18)
  40332a:	2a12      	cmp	r2, #18

static inline unsigned char code39_decode1 (unsigned char enc,
                                            unsigned e,
                                            unsigned s)
{
    unsigned char E = decode_e(e, s, 72);
  40332c:	b2d6      	uxtb	r6, r2
    if(E > 18)
  40332e:	d88a      	bhi.n	403246 <_zbar_decode_code39+0x39a>

/* retrieve i-th previous element width */
static inline unsigned get_width (const zbar_decoder_t *dcode,
                                  unsigned char offset)
{
    return(dcode->w[(dcode->idx - offset) & (DECODE_WINDOW - 1)]);
  403330:	1eea      	subs	r2, r5, #3
  403332:	f002 020f 	and.w	r2, r2, #15
  403336:	eb04 0282 	add.w	r2, r4, r2, lsl #2
        return(0xff);
    enc <<= 1;
    if(E > 6) {
  40333a:	2e06      	cmp	r6, #6
{
    /* result is encoded number of units - 2
     * (for use as zero based index)
     * or -1 if invalid
     */
    unsigned char E = ((e * n * 2 + 1) / s - 3) / 2;
  40333c:	6852      	ldr	r2, [r2, #4]
  40333e:	eb02 02c2 	add.w	r2, r2, r2, lsl #3
  403342:	ea4f 1202 	mov.w	r2, r2, lsl #4
                                            unsigned s)
{
    unsigned char E = decode_e(e, s, 72);
    if(E > 18)
        return(0xff);
    enc <<= 1;
  403346:	ea4f 0040 	mov.w	r0, r0, lsl #1
  40334a:	f102 0201 	add.w	r2, r2, #1
  40334e:	fbb2 f2f3 	udiv	r2, r2, r3
  403352:	f1a2 0203 	sub.w	r2, r2, #3
    if(E > 6) {
        enc |= 1;
  403356:	bf88      	it	hi
  403358:	f040 0001 	orrhi.w	r0, r0, #1
    return((E >= n - 3) ? -1 : E);
  40335c:	f3c2 0247 	ubfx	r2, r2, #1, #8
  403360:	bf88      	it	hi
  403362:	b2c0      	uxtbhi	r0, r0
  403364:	2a44      	cmp	r2, #68	; 0x44
  403366:	f63f af6e 	bhi.w	403246 <_zbar_decode_code39+0x39a>
static inline unsigned char code39_decode1 (unsigned char enc,
                                            unsigned e,
                                            unsigned s)
{
    unsigned char E = decode_e(e, s, 72);
    if(E > 18)
  40336a:	2a12      	cmp	r2, #18

static inline unsigned char code39_decode1 (unsigned char enc,
                                            unsigned e,
                                            unsigned s)
{
    unsigned char E = decode_e(e, s, 72);
  40336c:	b2d6      	uxtb	r6, r2
    if(E > 18)
  40336e:	f63f af6a 	bhi.w	403246 <_zbar_decode_code39+0x39a>

/* retrieve i-th previous element width */
static inline unsigned get_width (const zbar_decoder_t *dcode,
                                  unsigned char offset)
{
    return(dcode->w[(dcode->idx - offset) & (DECODE_WINDOW - 1)]);
  403372:	1f2a      	subs	r2, r5, #4
  403374:	f002 020f 	and.w	r2, r2, #15
  403378:	eb04 0282 	add.w	r2, r4, r2, lsl #2
        return(0xff);
    enc <<= 1;
  40337c:	0040      	lsls	r0, r0, #1
{
    /* result is encoded number of units - 2
     * (for use as zero based index)
     * or -1 if invalid
     */
    unsigned char E = ((e * n * 2 + 1) / s - 3) / 2;
  40337e:	6852      	ldr	r2, [r2, #4]
  403380:	eb02 02c2 	add.w	r2, r2, r2, lsl #3
  403384:	0112      	lsls	r2, r2, #4
  403386:	3201      	adds	r2, #1
  403388:	fbb2 f2f3 	udiv	r2, r2, r3
  40338c:	3a03      	subs	r2, #3
    if(E > 6) {
  40338e:	2e06      	cmp	r6, #6
                                            unsigned s)
{
    unsigned char E = decode_e(e, s, 72);
    if(E > 18)
        return(0xff);
    enc <<= 1;
  403390:	b2c0      	uxtb	r0, r0
    return((E >= n - 3) ? -1 : E);
  403392:	f3c2 0247 	ubfx	r2, r2, #1, #8
    if(E > 6) {
        enc |= 1;
  403396:	bf88      	it	hi
  403398:	f040 0001 	orrhi.w	r0, r0, #1
  40339c:	2a44      	cmp	r2, #68	; 0x44
  40339e:	f63f af52 	bhi.w	403246 <_zbar_decode_code39+0x39a>
static inline unsigned char code39_decode1 (unsigned char enc,
                                            unsigned e,
                                            unsigned s)
{
    unsigned char E = decode_e(e, s, 72);
    if(E > 18)
  4033a2:	2a12      	cmp	r2, #18

static inline unsigned char code39_decode1 (unsigned char enc,
                                            unsigned e,
                                            unsigned s)
{
    unsigned char E = decode_e(e, s, 72);
  4033a4:	b2d7      	uxtb	r7, r2
    if(E > 18)
  4033a6:	f63f af4e 	bhi.w	403246 <_zbar_decode_code39+0x39a>
        return(0xff);
    enc <<= 1;
  4033aa:	0040      	lsls	r0, r0, #1
  4033ac:	b2c6      	uxtb	r6, r0
    if(E > 6) {
  4033ae:	2f06      	cmp	r7, #6
        enc |= 1;
  4033b0:	bf88      	it	hi
  4033b2:	f046 0601 	orrhi.w	r6, r6, #1
            return(-1);
    }
    zassert(enc < 0x20, -1, " enc=%x s9=%x\n", enc, dcode39->s9);

    /* lookup first 5 encoded widths for coarse decode */
    unsigned char idx = code39_hi[enc];
  4033b6:	4ab7      	ldr	r2, [pc, #732]	; (403694 <_zbar_decode_code39+0x7e8>)
  4033b8:	5d90      	ldrb	r0, [r2, r6]
    if(idx == 0xff)
  4033ba:	28ff      	cmp	r0, #255	; 0xff
  4033bc:	f43f af43 	beq.w	403246 <_zbar_decode_code39+0x39a>

/* retrieve i-th previous element width */
static inline unsigned get_width (const zbar_decoder_t *dcode,
                                  unsigned char offset)
{
    return(dcode->w[(dcode->idx - offset) & (DECODE_WINDOW - 1)]);
  4033c0:	1f6a      	subs	r2, r5, #5
  4033c2:	f002 020f 	and.w	r2, r2, #15
  4033c6:	eb04 0282 	add.w	r2, r4, r2, lsl #2
{
    /* result is encoded number of units - 2
     * (for use as zero based index)
     * or -1 if invalid
     */
    unsigned char E = ((e * n * 2 + 1) / s - 3) / 2;
  4033ca:	6852      	ldr	r2, [r2, #4]
  4033cc:	eb02 02c2 	add.w	r2, r2, r2, lsl #3
  4033d0:	0112      	lsls	r2, r2, #4
  4033d2:	3201      	adds	r2, #1
  4033d4:	fbb2 f2f3 	udiv	r2, r2, r3
  4033d8:	3a03      	subs	r2, #3
    return((E >= n - 3) ? -1 : E);
  4033da:	f3c2 0247 	ubfx	r2, r2, #1, #8
  4033de:	2a44      	cmp	r2, #68	; 0x44
  4033e0:	f63f af31 	bhi.w	403246 <_zbar_decode_code39+0x39a>
static inline unsigned char code39_decode1 (unsigned char enc,
                                            unsigned e,
                                            unsigned s)
{
    unsigned char E = decode_e(e, s, 72);
    if(E > 18)
  4033e4:	2a12      	cmp	r2, #18

static inline unsigned char code39_decode1 (unsigned char enc,
                                            unsigned e,
                                            unsigned s)
{
    unsigned char E = decode_e(e, s, 72);
  4033e6:	b2d7      	uxtb	r7, r2
    if(E > 18)
  4033e8:	f63f af2d 	bhi.w	403246 <_zbar_decode_code39+0x39a>

/* retrieve i-th previous element width */
static inline unsigned get_width (const zbar_decoder_t *dcode,
                                  unsigned char offset)
{
    return(dcode->w[(dcode->idx - offset) & (DECODE_WINDOW - 1)]);
  4033ec:	1faa      	subs	r2, r5, #6
  4033ee:	f002 020f 	and.w	r2, r2, #15
  4033f2:	eb04 0282 	add.w	r2, r4, r2, lsl #2
        return(0xff);
    enc <<= 1;
  4033f6:	0076      	lsls	r6, r6, #1
{
    /* result is encoded number of units - 2
     * (for use as zero based index)
     * or -1 if invalid
     */
    unsigned char E = ((e * n * 2 + 1) / s - 3) / 2;
  4033f8:	6852      	ldr	r2, [r2, #4]
  4033fa:	eb02 02c2 	add.w	r2, r2, r2, lsl #3
  4033fe:	0112      	lsls	r2, r2, #4
  403400:	3201      	adds	r2, #1
  403402:	fbb2 f2f3 	udiv	r2, r2, r3
  403406:	3a03      	subs	r2, #3
    if(E > 6) {
  403408:	2f06      	cmp	r7, #6
                                            unsigned s)
{
    unsigned char E = decode_e(e, s, 72);
    if(E > 18)
        return(0xff);
    enc <<= 1;
  40340a:	b2f6      	uxtb	r6, r6
    return((E >= n - 3) ? -1 : E);
  40340c:	f3c2 0247 	ubfx	r2, r2, #1, #8
    if(E > 6) {
        enc |= 1;
  403410:	bf88      	it	hi
  403412:	f046 0601 	orrhi.w	r6, r6, #1
  403416:	2a44      	cmp	r2, #68	; 0x44
  403418:	f63f af15 	bhi.w	403246 <_zbar_decode_code39+0x39a>
static inline unsigned char code39_decode1 (unsigned char enc,
                                            unsigned e,
                                            unsigned s)
{
    unsigned char E = decode_e(e, s, 72);
    if(E > 18)
  40341c:	2a12      	cmp	r2, #18

static inline unsigned char code39_decode1 (unsigned char enc,
                                            unsigned e,
                                            unsigned s)
{
    unsigned char E = decode_e(e, s, 72);
  40341e:	b2d7      	uxtb	r7, r2
    if(E > 18)
  403420:	f63f af11 	bhi.w	403246 <_zbar_decode_code39+0x39a>

/* retrieve i-th previous element width */
static inline unsigned get_width (const zbar_decoder_t *dcode,
                                  unsigned char offset)
{
    return(dcode->w[(dcode->idx - offset) & (DECODE_WINDOW - 1)]);
  403424:	1fea      	subs	r2, r5, #7
  403426:	f002 020f 	and.w	r2, r2, #15
  40342a:	eb04 0282 	add.w	r2, r4, r2, lsl #2
        return(0xff);
    enc <<= 1;
  40342e:	0076      	lsls	r6, r6, #1
{
    /* result is encoded number of units - 2
     * (for use as zero based index)
     * or -1 if invalid
     */
    unsigned char E = ((e * n * 2 + 1) / s - 3) / 2;
  403430:	6852      	ldr	r2, [r2, #4]
  403432:	eb02 02c2 	add.w	r2, r2, r2, lsl #3
  403436:	0112      	lsls	r2, r2, #4
  403438:	3201      	adds	r2, #1
  40343a:	fbb2 f2f3 	udiv	r2, r2, r3
  40343e:	3a03      	subs	r2, #3
    if(E > 6) {
  403440:	2f06      	cmp	r7, #6
                                            unsigned s)
{
    unsigned char E = decode_e(e, s, 72);
    if(E > 18)
        return(0xff);
    enc <<= 1;
  403442:	b2f6      	uxtb	r6, r6
    return((E >= n - 3) ? -1 : E);
  403444:	f3c2 0247 	ubfx	r2, r2, #1, #8
    if(E > 6) {
        enc |= 1;
  403448:	bf88      	it	hi
  40344a:	f046 0601 	orrhi.w	r6, r6, #1
  40344e:	2a44      	cmp	r2, #68	; 0x44
  403450:	f63f aef9 	bhi.w	403246 <_zbar_decode_code39+0x39a>
static inline unsigned char code39_decode1 (unsigned char enc,
                                            unsigned e,
                                            unsigned s)
{
    unsigned char E = decode_e(e, s, 72);
    if(E > 18)
  403454:	2a12      	cmp	r2, #18

static inline unsigned char code39_decode1 (unsigned char enc,
                                            unsigned e,
                                            unsigned s)
{
    unsigned char E = decode_e(e, s, 72);
  403456:	b2d7      	uxtb	r7, r2
    if(E > 18)
  403458:	f63f aef5 	bhi.w	403246 <_zbar_decode_code39+0x39a>
        return(0xff);
    enc <<= 1;
  40345c:	0076      	lsls	r6, r6, #1
    if(E > 6) {
  40345e:	2f06      	cmp	r7, #6
                                            unsigned s)
{
    unsigned char E = decode_e(e, s, 72);
    if(E > 18)
        return(0xff);
    enc <<= 1;
  403460:	b2f6      	uxtb	r6, r6
    if(E > 6) {
  403462:	d904      	bls.n	40346e <_zbar_decode_code39+0x5c2>
        enc |= 1;
  403464:	f046 0601 	orr.w	r6, r6, #1
        return(-1);

    /* encode remaining widths (NB first encoded width is lost) */
    for(; i < 9; i++) {
        enc = code39_decode1(enc, get_width(dcode, i), dcode39->s9);
        if(enc == 0xff)
  403468:	2eff      	cmp	r6, #255	; 0xff
  40346a:	f43f aeec 	beq.w	403246 <_zbar_decode_code39+0x39a>

/* retrieve i-th previous element width */
static inline unsigned get_width (const zbar_decoder_t *dcode,
                                  unsigned char offset)
{
    return(dcode->w[(dcode->idx - offset) & (DECODE_WINDOW - 1)]);
  40346e:	f1a5 0208 	sub.w	r2, r5, #8
  403472:	f002 020f 	and.w	r2, r2, #15
  403476:	eb04 0282 	add.w	r2, r4, r2, lsl #2
{
    /* result is encoded number of units - 2
     * (for use as zero based index)
     * or -1 if invalid
     */
    unsigned char E = ((e * n * 2 + 1) / s - 3) / 2;
  40347a:	6852      	ldr	r2, [r2, #4]
  40347c:	eb02 02c2 	add.w	r2, r2, r2, lsl #3
  403480:	0112      	lsls	r2, r2, #4
  403482:	3201      	adds	r2, #1
  403484:	fbb2 f2f3 	udiv	r2, r2, r3
  403488:	3a03      	subs	r2, #3
    return((E >= n - 3) ? -1 : E);
  40348a:	f3c2 0247 	ubfx	r2, r2, #1, #8
  40348e:	2a44      	cmp	r2, #68	; 0x44
  403490:	f63f aed9 	bhi.w	403246 <_zbar_decode_code39+0x39a>
static inline unsigned char code39_decode1 (unsigned char enc,
                                            unsigned e,
                                            unsigned s)
{
    unsigned char E = decode_e(e, s, 72);
    if(E > 18)
  403494:	2a12      	cmp	r2, #18

static inline unsigned char code39_decode1 (unsigned char enc,
                                            unsigned e,
                                            unsigned s)
{
    unsigned char E = decode_e(e, s, 72);
  403496:	b2d5      	uxtb	r5, r2
    if(E > 18)
  403498:	f63f aed5 	bhi.w	403246 <_zbar_decode_code39+0x39a>
        return(0xff);
    enc <<= 1;
  40349c:	0072      	lsls	r2, r6, #1
  40349e:	b2d2      	uxtb	r2, r2
    if(E > 6) {
  4034a0:	2d06      	cmp	r5, #6
        enc |= 1;
  4034a2:	bf88      	it	hi
  4034a4:	f042 0201 	orrhi.w	r2, r2, #1
        return(-1);

    /* encode remaining widths (NB first encoded width is lost) */
    for(; i < 9; i++) {
        enc = code39_decode1(enc, get_width(dcode, i), dcode39->s9);
        if(enc == 0xff)
  4034a8:	2aff      	cmp	r2, #255	; 0xff
  4034aa:	f43f aecc 	beq.w	403246 <_zbar_decode_code39+0x39a>
            return(-1);
    }

    if((idx & 0xc0) == 0x80)
  4034ae:	f000 05c0 	and.w	r5, r0, #192	; 0xc0
  4034b2:	2d80      	cmp	r5, #128	; 0x80
  4034b4:	f000 8171 	beq.w	40379a <_zbar_decode_code39+0x8ee>
        idx = (idx & 0x3f) + ((enc >> 3) & 1);
    else if((idx & 0xc0) == 0xc0)
  4034b8:	2dc0      	cmp	r5, #192	; 0xc0
  4034ba:	f000 8174 	beq.w	4037a6 <_zbar_decode_code39+0x8fa>
        idx = (idx & 0x3f) + ((enc >> 2) & 1);
    else if(idx & 0xc0)
  4034be:	b125      	cbz	r5, 4034ca <_zbar_decode_code39+0x61e>
        idx = (idx & 0x3f) + ((enc >> 2) & 3);
  4034c0:	f000 003f 	and.w	r0, r0, #63	; 0x3f
  4034c4:	f3c2 0581 	ubfx	r5, r2, #2, #2
  4034c8:	4428      	add	r0, r5
    zassert(idx < 0x2c, -1, " idx=%x enc=%x s9=%x\n", idx, enc, dcode39->s9);
  4034ca:	282b      	cmp	r0, #43	; 0x2b
  4034cc:	f63f aeac 	bhi.w	403228 <_zbar_decode_code39+0x37c>

    const char39_t *c = &code39_encodings[idx];
    dbprintf(2, " i=%02x chk=%02x c=%02x/%02x", idx, c->chk, c->fwd, c->rev);
    if(enc != c->chk)
  4034d0:	eb00 0040 	add.w	r0, r0, r0, lsl #1
  4034d4:	4d70      	ldr	r5, [pc, #448]	; (403698 <_zbar_decode_code39+0x7ec>)
  4034d6:	5c2e      	ldrb	r6, [r5, r0]
  4034d8:	4296      	cmp	r6, r2
  4034da:	4428      	add	r0, r5
  4034dc:	f47f aeb3 	bne.w	403246 <_zbar_decode_code39+0x39a>
        return(-1);

    dcode39->width = dcode39->s9;
    return((dcode39->direction) ? c->rev : c->fwd);
  4034e0:	f894 20ec 	ldrb.w	r2, [r4, #236]	; 0xec
    const char39_t *c = &code39_encodings[idx];
    dbprintf(2, " i=%02x chk=%02x c=%02x/%02x", idx, c->chk, c->fwd, c->rev);
    if(enc != c->chk)
        return(-1);

    dcode39->width = dcode39->s9;
  4034e4:	f8c4 30f4 	str.w	r3, [r4, #244]	; 0xf4
    return((dcode39->direction) ? c->rev : c->fwd);
  4034e8:	07d5      	lsls	r5, r2, #31
  4034ea:	bf4c      	ite	mi
  4034ec:	7840      	ldrbmi	r0, [r0, #1]
  4034ee:	7880      	ldrbpl	r0, [r0, #2]
{
    code39_decoder_t *dcode39 = &dcode->code39;
    dbprintf(2, " s=%d ", dcode39->s9);

    signed char c = code39_decode9(dcode);
    if(c != 0x19 && c != 0x2b) {
  4034f0:	b240      	sxtb	r0, r0
  4034f2:	2819      	cmp	r0, #25
  4034f4:	f040 816f 	bne.w	4037d6 <_zbar_decode_code39+0x92a>
  4034f8:	2501      	movs	r5, #1
        dbprintf(2, "\n");
        return(ZBAR_NONE);
    }
    dcode39->direction ^= (c == 0x19);
  4034fa:	f3c2 0000 	ubfx	r0, r2, #0, #1
  4034fe:	4068      	eors	r0, r5
  403500:	f360 0200 	bfi	r2, r0, #0, #1
  403504:	f884 20ec 	strb.w	r2, [r4, #236]	; 0xec

/* retrieve i-th previous element width */
static inline unsigned get_width (const zbar_decoder_t *dcode,
                                  unsigned char offset)
{
    return(dcode->w[(dcode->idx - offset) & (DECODE_WINDOW - 1)]);
  403508:	684a      	ldr	r2, [r1, #4]

    /* check leading quiet zone - spec is 10x */
    unsigned quiet = get_width(dcode, 9);
    if(quiet && quiet < dcode39->s9 / 2) {
  40350a:	b11a      	cbz	r2, 403514 <_zbar_decode_code39+0x668>
  40350c:	ebb2 0f53 	cmp.w	r2, r3, lsr #1
  403510:	f4ff ae99 	bcc.w	403246 <_zbar_decode_code39+0x39a>
        dbprintf(2, " [invalid quiet]\n");
        return(ZBAR_NONE);
    }

    dcode39->element = 9;
  403514:	f894 30ec 	ldrb.w	r3, [r4, #236]	; 0xec
  403518:	2209      	movs	r2, #9
  40351a:	f362 0344 	bfi	r3, r2, #1, #4
  40351e:	f884 30ec 	strb.w	r3, [r4, #236]	; 0xec
    dcode39->character = 0;
  403522:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
  403526:	f36f 1350 	bfc	r3, #5, #12
  40352a:	f8c4 30ec 	str.w	r3, [r4, #236]	; 0xec
  40352e:	2001      	movs	r0, #1

    if(dcode39->character < 0) {
        if(get_color(dcode) != ZBAR_BAR)
            return(ZBAR_NONE);
        dbprintf(2, "      code39:");
        return(code39_decode_start(dcode));
  403530:	e68a      	b.n	403248 <_zbar_decode_code39+0x39c>
        idx = (idx & 0x3f) + ((enc >> 3) & 1);
    else if((idx & 0xc0) == 0xc0)
        idx = (idx & 0x3f) + ((enc >> 2) & 1);
    else if(idx & 0xc0)
        idx = (idx & 0x3f) + ((enc >> 2) & 3);
    zassert(idx < 0x2c, -1, " idx=%x enc=%x s9=%x\n", idx, enc, dcode39->s9);
  403532:	4a5a      	ldr	r2, [pc, #360]	; (40369c <_zbar_decode_code39+0x7f0>)
  403534:	4d5a      	ldr	r5, [pc, #360]	; (4036a0 <_zbar_decode_code39+0x7f4>)
  403536:	6812      	ldr	r2, [r2, #0]
  403538:	495a      	ldr	r1, [pc, #360]	; (4036a4 <_zbar_decode_code39+0x7f8>)
  40353a:	9304      	str	r3, [sp, #16]
  40353c:	9500      	str	r5, [sp, #0]
  40353e:	9101      	str	r1, [sp, #4]
  403540:	9602      	str	r6, [sp, #8]
  403542:	9003      	str	r0, [sp, #12]
  403544:	68d0      	ldr	r0, [r2, #12]
  403546:	4958      	ldr	r1, [pc, #352]	; (4036a8 <_zbar_decode_code39+0x7fc>)
  403548:	4a58      	ldr	r2, [pc, #352]	; (4036ac <_zbar_decode_code39+0x800>)
  40354a:	4d59      	ldr	r5, [pc, #356]	; (4036b0 <_zbar_decode_code39+0x804>)
  40354c:	23b4      	movs	r3, #180	; 0xb4
  40354e:	47a8      	blx	r5

    signed char c = code39_decode9(dcode);
    dbprintf(2, " c=%d", c);

    /* lock shared resources */
    if(!dcode39->character && acquire_lock(dcode, ZBAR_CODE39)) {
  403550:	f8d4 20ec 	ldr.w	r2, [r4, #236]	; 0xec
  403554:	4b57      	ldr	r3, [pc, #348]	; (4036b4 <_zbar_decode_code39+0x808>)
  403556:	4013      	ands	r3, r2
  403558:	2b00      	cmp	r3, #0
  40355a:	d047      	beq.n	4035ec <_zbar_decode_code39+0x740>

/* check and release shared state lock */
static inline char release_lock (zbar_decoder_t *dcode,
                                 zbar_symbol_type_t req)
{
    zassert(dcode->lock == req, 1, "lock=%d req=%d\n",
  40355c:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
  403560:	2b27      	cmp	r3, #39	; 0x27
  403562:	d132      	bne.n	4035ca <_zbar_decode_code39+0x71e>
            dcode->lock, req);
    dcode->lock = 0;
  403564:	2300      	movs	r3, #0
  403566:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
  40356a:	e676      	b.n	40325a <_zbar_decode_code39+0x3ae>
             (dcode39->direction) ? '<' : '>',
             dcode39->character, dcode39->element);

    if(dcode39->element == 10) {
        unsigned space = get_width(dcode, 0);
        if(dcode39->character &&
  40356c:	f8d4 20ec 	ldr.w	r2, [r4, #236]	; 0xec
  403570:	4b50      	ldr	r3, [pc, #320]	; (4036b4 <_zbar_decode_code39+0x808>)
  403572:	4013      	ands	r3, r2
  403574:	b31b      	cbz	r3, 4035be <_zbar_decode_code39+0x712>
           dcode->buf[dcode39->character - 1] == 0x2b) {  /* STOP */
  403576:	6de3      	ldr	r3, [r4, #92]	; 0x5c
  403578:	449e      	add	lr, r3
             (dcode39->direction) ? '<' : '>',
             dcode39->character, dcode39->element);

    if(dcode39->element == 10) {
        unsigned space = get_width(dcode, 0);
        if(dcode39->character &&
  40357a:	f81e 1c01 	ldrb.w	r1, [lr, #-1]
  40357e:	292b      	cmp	r1, #43	; 0x2b
  403580:	d042      	beq.n	403608 <_zbar_decode_code39+0x75c>
            dcode39->character = -1;
            if(!sym)
                release_lock(dcode, ZBAR_CODE39);
            return(sym);
        }
        if(space > dcode39->width / 2) {
  403582:	f8d4 30f4 	ldr.w	r3, [r4, #244]	; 0xf4
  403586:	ebb7 0f53 	cmp.w	r7, r3, lsr #1
  40358a:	d90f      	bls.n	4035ac <_zbar_decode_code39+0x700>

/* check and release shared state lock */
static inline char release_lock (zbar_decoder_t *dcode,
                                 zbar_symbol_type_t req)
{
    zassert(dcode->lock == req, 1, "lock=%d req=%d\n",
  40358c:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
  403590:	2b27      	cmp	r3, #39	; 0x27
  403592:	f040 80eb 	bne.w	40376c <_zbar_decode_code39+0x8c0>
            dcode->lock, req);
    dcode->lock = 0;
  403596:	2300      	movs	r3, #0
  403598:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
            /* inter-character space check failure */
            dbprintf(2, " ics>%d [invalid ics]", dcode39->width);
            if(dcode39->character)
                release_lock(dcode, ZBAR_CODE39);
            dcode39->character = -1;
  40359c:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
  4035a0:	f04f 32ff 	mov.w	r2, #4294967295
  4035a4:	f362 1350 	bfi	r3, r2, #5, #12
  4035a8:	f8c4 30ec 	str.w	r3, [r4, #236]	; 0xec
        }
        dcode39->element = 0;
  4035ac:	f894 30ec 	ldrb.w	r3, [r4, #236]	; 0xec
        dbprintf(2, "\n");
        return(ZBAR_NONE);
  4035b0:	2000      	movs	r0, #0
            dbprintf(2, " ics>%d [invalid ics]", dcode39->width);
            if(dcode39->character)
                release_lock(dcode, ZBAR_CODE39);
            dcode39->character = -1;
        }
        dcode39->element = 0;
  4035b2:	f36f 0344 	bfc	r3, #1, #4
  4035b6:	f884 30ec 	strb.w	r3, [r4, #236]	; 0xec
    }

    dcode->buf[dcode39->character++] = c;

    return(ZBAR_NONE);
}
  4035ba:	b007      	add	sp, #28
  4035bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
            dcode39->character = -1;
            if(!sym)
                release_lock(dcode, ZBAR_CODE39);
            return(sym);
        }
        if(space > dcode39->width / 2) {
  4035be:	f8d4 30f4 	ldr.w	r3, [r4, #244]	; 0xf4
  4035c2:	ebb7 0f53 	cmp.w	r7, r3, lsr #1
  4035c6:	d8e9      	bhi.n	40359c <_zbar_decode_code39+0x6f0>
  4035c8:	e7f0      	b.n	4035ac <_zbar_decode_code39+0x700>

/* check and release shared state lock */
static inline char release_lock (zbar_decoder_t *dcode,
                                 zbar_symbol_type_t req)
{
    zassert(dcode->lock == req, 1, "lock=%d req=%d\n",
  4035ca:	4a34      	ldr	r2, [pc, #208]	; (40369c <_zbar_decode_code39+0x7f0>)
  4035cc:	4d3a      	ldr	r5, [pc, #232]	; (4036b8 <_zbar_decode_code39+0x80c>)
  4035ce:	6811      	ldr	r1, [r2, #0]
  4035d0:	4a3a      	ldr	r2, [pc, #232]	; (4036bc <_zbar_decode_code39+0x810>)
  4035d2:	68c8      	ldr	r0, [r1, #12]
  4035d4:	9302      	str	r3, [sp, #8]
  4035d6:	2327      	movs	r3, #39	; 0x27
  4035d8:	9500      	str	r5, [sp, #0]
  4035da:	9201      	str	r2, [sp, #4]
  4035dc:	9303      	str	r3, [sp, #12]
  4035de:	4938      	ldr	r1, [pc, #224]	; (4036c0 <_zbar_decode_code39+0x814>)
  4035e0:	4a38      	ldr	r2, [pc, #224]	; (4036c4 <_zbar_decode_code39+0x818>)
  4035e2:	4d33      	ldr	r5, [pc, #204]	; (4036b0 <_zbar_decode_code39+0x804>)
  4035e4:	f240 1307 	movw	r3, #263	; 0x107
  4035e8:	47a8      	blx	r5
  4035ea:	e636      	b.n	40325a <_zbar_decode_code39+0x3ae>

/* acquire shared state lock */
static inline char acquire_lock (zbar_decoder_t *dcode,
                                 zbar_symbol_type_t req)
{
    if(dcode->lock) {
  4035ec:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
  4035f0:	2b00      	cmp	r3, #0
  4035f2:	d0b7      	beq.n	403564 <_zbar_decode_code39+0x6b8>
    signed char c = code39_decode9(dcode);
    dbprintf(2, " c=%d", c);

    /* lock shared resources */
    if(!dcode39->character && acquire_lock(dcode, ZBAR_CODE39)) {
        dcode39->character = -1;
  4035f4:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
  4035f8:	f04f 32ff 	mov.w	r2, #4294967295
  4035fc:	f362 1350 	bfi	r3, r2, #5, #12
  403600:	f8c4 30ec 	str.w	r3, [r4, #236]	; 0xec
        return(ZBAR_PARTIAL);
  403604:	2001      	movs	r0, #1
  403606:	e61f      	b.n	403248 <_zbar_decode_code39+0x39c>
    if(dcode39->element == 10) {
        unsigned space = get_width(dcode, 0);
        if(dcode39->character &&
           dcode->buf[dcode39->character - 1] == 0x2b) {  /* STOP */
            /* trim STOP character */
            dcode39->character--;
  403608:	f600 71ff 	addw	r1, r0, #4095	; 0xfff
  40360c:	f341 010b 	sbfx	r1, r1, #0, #12
  403610:	b289      	uxth	r1, r1
  403612:	f361 1250 	bfi	r2, r1, #5, #12
  403616:	f8c4 20ec 	str.w	r2, [r4, #236]	; 0xec
            zbar_symbol_type_t sym = ZBAR_NONE;

            /* trailing quiet zone check */
            if(space && space < dcode39->width / 2)
  40361a:	b127      	cbz	r7, 403626 <_zbar_decode_code39+0x77a>
  40361c:	f8d4 20f4 	ldr.w	r2, [r4, #244]	; 0xf4
  403620:	ebb7 0f52 	cmp.w	r7, r2, lsr #1
  403624:	d37a      	bcc.n	40371c <_zbar_decode_code39+0x870>
                dbprintf(2, " [invalid qz]\n");
            else if(dcode39->character < CFG(*dcode39, ZBAR_CFG_MIN_LEN) ||
  403626:	f8d4 00fc 	ldr.w	r0, [r4, #252]	; 0xfc
  40362a:	b20a      	sxth	r2, r1
  40362c:	4282      	cmp	r2, r0
  40362e:	db75      	blt.n	40371c <_zbar_decode_code39+0x870>
                    (CFG(*dcode39, ZBAR_CFG_MAX_LEN) > 0 &&
  403630:	f8d4 0100 	ldr.w	r0, [r4, #256]	; 0x100
            zbar_symbol_type_t sym = ZBAR_NONE;

            /* trailing quiet zone check */
            if(space && space < dcode39->width / 2)
                dbprintf(2, " [invalid qz]\n");
            else if(dcode39->character < CFG(*dcode39, ZBAR_CFG_MIN_LEN) ||
  403634:	2800      	cmp	r0, #0
  403636:	dd01      	ble.n	40363c <_zbar_decode_code39+0x790>
                    (CFG(*dcode39, ZBAR_CFG_MAX_LEN) > 0 &&
  403638:	4282      	cmp	r2, r0
  40363a:	dc6f      	bgt.n	40371c <_zbar_decode_code39+0x870>
}

static inline int code39_postprocess (zbar_decoder_t *dcode)
{
    code39_decoder_t *dcode39 = &dcode->code39;
    dcode->direction = 1 - 2 * dcode39->direction;
  40363c:	f894 50ec 	ldrb.w	r5, [r4, #236]	; 0xec
  403640:	f005 0001 	and.w	r0, r5, #1
  403644:	0040      	lsls	r0, r0, #1
  403646:	f1c0 0001 	rsb	r0, r0, #1
  40364a:	64e0      	str	r0, [r4, #76]	; 0x4c
    int i;
    if(dcode39->direction) {
  40364c:	07e8      	lsls	r0, r5, #31
  40364e:	d51a      	bpl.n	403686 <_zbar_decode_code39+0x7da>
        /* reverse buffer */
        dbprintf(2, " (rev)");
        for(i = 0; i < dcode39->character / 2; i++) {
  403650:	2a01      	cmp	r2, #1
  403652:	dd18      	ble.n	403686 <_zbar_decode_code39+0x7da>
  403654:	2000      	movs	r0, #0
  403656:	e001      	b.n	40365c <_zbar_decode_code39+0x7b0>
  403658:	6de3      	ldr	r3, [r4, #92]	; 0x5c
  40365a:	b20a      	sxth	r2, r1
            unsigned j = dcode39->character - 1 - i;
  40365c:	3a01      	subs	r2, #1
  40365e:	1a12      	subs	r2, r2, r0
            char code = dcode->buf[i];
  403660:	5c19      	ldrb	r1, [r3, r0]
            dcode->buf[i] = dcode->buf[j];
  403662:	5c9d      	ldrb	r5, [r3, r2]
  403664:	541d      	strb	r5, [r3, r0]
            dcode->buf[j] = code;
  403666:	6de3      	ldr	r3, [r4, #92]	; 0x5c
  403668:	5499      	strb	r1, [r3, r2]
    dcode->direction = 1 - 2 * dcode39->direction;
    int i;
    if(dcode39->direction) {
        /* reverse buffer */
        dbprintf(2, " (rev)");
        for(i = 0; i < dcode39->character / 2; i++) {
  40366a:	f8d4 10ec 	ldr.w	r1, [r4, #236]	; 0xec
  40366e:	f341 114b 	sbfx	r1, r1, #5, #12
  403672:	b20b      	sxth	r3, r1
  403674:	3001      	adds	r0, #1
  403676:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
  40367a:	ebb0 0f63 	cmp.w	r0, r3, asr #1
  40367e:	b289      	uxth	r1, r1
  403680:	dbea      	blt.n	403658 <_zbar_decode_code39+0x7ac>
  403682:	6de3      	ldr	r3, [r4, #92]	; 0x5c
  403684:	b20a      	sxth	r2, r1
            char code = dcode->buf[i];
            dcode->buf[i] = dcode->buf[j];
            dcode->buf[j] = code;
        }
    }
    for(i = 0; i < dcode39->character; i++)
  403686:	2a00      	cmp	r2, #0
  403688:	f340 80ab 	ble.w	4037e2 <_zbar_decode_code39+0x936>
        dcode->buf[i] = ((dcode->buf[i] < 0x2b)
  40368c:	480e      	ldr	r0, [pc, #56]	; (4036c8 <_zbar_decode_code39+0x81c>)
            char code = dcode->buf[i];
            dcode->buf[i] = dcode->buf[j];
            dcode->buf[j] = code;
        }
    }
    for(i = 0; i < dcode39->character; i++)
  40368e:	2500      	movs	r5, #0
  403690:	e01d      	b.n	4036ce <_zbar_decode_code39+0x822>
  403692:	bf00      	nop
  403694:	00410eb0 	.word	0x00410eb0
  403698:	00410fdc 	.word	0x00410fdc
  40369c:	200008b0 	.word	0x200008b0
  4036a0:	00411074 	.word	0x00411074
  4036a4:	00410f38 	.word	0x00410f38
  4036a8:	00410ed0 	.word	0x00410ed0
  4036ac:	00410f14 	.word	0x00410f14
  4036b0:	0040814d 	.word	0x0040814d
  4036b4:	0001ffe0 	.word	0x0001ffe0
  4036b8:	00410e8c 	.word	0x00410e8c
  4036bc:	00410ac4 	.word	0x00410ac4
  4036c0:	00410a58 	.word	0x00410a58
  4036c4:	00410a94 	.word	0x00410a94
  4036c8:	00410e60 	.word	0x00410e60
  4036cc:	6de3      	ldr	r3, [r4, #92]	; 0x5c
        dcode->buf[i] = ((dcode->buf[i] < 0x2b)
  4036ce:	5d5a      	ldrb	r2, [r3, r5]
  4036d0:	442b      	add	r3, r5
  4036d2:	2a2a      	cmp	r2, #42	; 0x2a
  4036d4:	bf94      	ite	ls
  4036d6:	5c82      	ldrbls	r2, [r0, r2]
  4036d8:	223f      	movhi	r2, #63	; 0x3f
  4036da:	701a      	strb	r2, [r3, #0]
            char code = dcode->buf[i];
            dcode->buf[i] = dcode->buf[j];
            dcode->buf[j] = code;
        }
    }
    for(i = 0; i < dcode39->character; i++)
  4036dc:	f8d4 10ec 	ldr.w	r1, [r4, #236]	; 0xec
  4036e0:	f341 114b 	sbfx	r1, r1, #5, #12
  4036e4:	b20b      	sxth	r3, r1
  4036e6:	3501      	adds	r5, #1
  4036e8:	429d      	cmp	r5, r3
  4036ea:	b289      	uxth	r1, r1
  4036ec:	dbee      	blt.n	4036cc <_zbar_decode_code39+0x820>
        dcode->buf[i] = ((dcode->buf[i] < 0x2b)
                         ? code39_characters[(unsigned)dcode->buf[i]]
                         : '?');
    zassert(i < dcode->buf_alloc, -1, "i=%02x %s\n", i,
  4036ee:	6d63      	ldr	r3, [r4, #84]	; 0x54
  4036f0:	429d      	cmp	r5, r3
  4036f2:	d278      	bcs.n	4037e6 <_zbar_decode_code39+0x93a>
            _zbar_decoder_buf_dump(dcode->buf, dcode39->character));
    dcode->buflen = i;
    dcode->buf[i] = '\0';
  4036f4:	6de3      	ldr	r3, [r4, #92]	; 0x5c
        dcode->buf[i] = ((dcode->buf[i] < 0x2b)
                         ? code39_characters[(unsigned)dcode->buf[i]]
                         : '?');
    zassert(i < dcode->buf_alloc, -1, "i=%02x %s\n", i,
            _zbar_decoder_buf_dump(dcode->buf, dcode39->character));
    dcode->buflen = i;
  4036f6:	65a5      	str	r5, [r4, #88]	; 0x58
    dcode->buf[i] = '\0';
  4036f8:	2200      	movs	r2, #0
  4036fa:	555a      	strb	r2, [r3, r5]
            else if(!code39_postprocess(dcode)) {
                /* FIXME checksum */
                dbprintf(2, " [valid end]\n");
                sym = ZBAR_CODE39;
            }
            dcode39->character = -1;
  4036fc:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
                         : '?');
    zassert(i < dcode->buf_alloc, -1, "i=%02x %s\n", i,
            _zbar_decoder_buf_dump(dcode->buf, dcode39->character));
    dcode->buflen = i;
    dcode->buf[i] = '\0';
    dcode->modifiers = 0;
  403700:	64a2      	str	r2, [r4, #72]	; 0x48
            else if(!code39_postprocess(dcode)) {
                /* FIXME checksum */
                dbprintf(2, " [valid end]\n");
                sym = ZBAR_CODE39;
            }
            dcode39->character = -1;
  403702:	f04f 32ff 	mov.w	r2, #4294967295
  403706:	f362 1350 	bfi	r3, r2, #5, #12
  40370a:	f8c4 30ec 	str.w	r3, [r4, #236]	; 0xec
                     dcode39->character > CFG(*dcode39, ZBAR_CFG_MAX_LEN)))
                dbprintf(2, " [invalid len]\n");
            else if(!code39_postprocess(dcode)) {
                /* FIXME checksum */
                dbprintf(2, " [valid end]\n");
                sym = ZBAR_CODE39;
  40370e:	2027      	movs	r0, #39	; 0x27
  403710:	e59a      	b.n	403248 <_zbar_decode_code39+0x39c>
    if(!dcode39->character && acquire_lock(dcode, ZBAR_CODE39)) {
        dcode39->character = -1;
        return(ZBAR_PARTIAL);
    }

    if(c < 0 || size_buf(dcode, dcode39->character + 1)) {
  403712:	b277      	sxtb	r7, r6
  403714:	2f00      	cmp	r7, #0
  403716:	f6bf ad55 	bge.w	4031c4 <_zbar_decode_code39+0x318>
  40371a:	e71f      	b.n	40355c <_zbar_decode_code39+0x6b0>
            else if(!code39_postprocess(dcode)) {
                /* FIXME checksum */
                dbprintf(2, " [valid end]\n");
                sym = ZBAR_CODE39;
            }
            dcode39->character = -1;
  40371c:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
  403720:	f04f 32ff 	mov.w	r2, #4294967295
  403724:	f362 1350 	bfi	r3, r2, #5, #12
  403728:	f8c4 30ec 	str.w	r3, [r4, #236]	; 0xec

/* check and release shared state lock */
static inline char release_lock (zbar_decoder_t *dcode,
                                 zbar_symbol_type_t req)
{
    zassert(dcode->lock == req, 1, "lock=%d req=%d\n",
  40372c:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
  403730:	2b27      	cmp	r3, #39	; 0x27
  403732:	d13e      	bne.n	4037b2 <_zbar_decode_code39+0x906>
            dcode->lock, req);
    dcode->lock = 0;
  403734:	2000      	movs	r0, #0
  403736:	f8a4 0046 	strh.w	r0, [r4, #70]	; 0x46
  40373a:	e585      	b.n	403248 <_zbar_decode_code39+0x39c>
        if(enc == 0xff)
            return(-1);
    }

    if((idx & 0xc0) == 0x80)
        idx = (idx & 0x3f) + ((enc >> 3) & 1);
  40373c:	f006 063f 	and.w	r6, r6, #63	; 0x3f
  403740:	f3c0 02c0 	ubfx	r2, r0, #3, #1
  403744:	4416      	add	r6, r2
  403746:	e515      	b.n	403174 <_zbar_decode_code39+0x2c8>
        release_lock(dcode, ZBAR_CODE39);
        dcode39->character = -1;
        return(ZBAR_NONE);
    }
    else {
        zassert(c < 0x2c, ZBAR_NONE, "c=%02x s9=%x\n", c, dcode39->s9);
  403748:	4b35      	ldr	r3, [pc, #212]	; (403820 <_zbar_decode_code39+0x974>)
  40374a:	4a36      	ldr	r2, [pc, #216]	; (403824 <_zbar_decode_code39+0x978>)
  40374c:	681b      	ldr	r3, [r3, #0]
  40374e:	f8d4 10f0 	ldr.w	r1, [r4, #240]	; 0xf0
  403752:	68d8      	ldr	r0, [r3, #12]
  403754:	4b34      	ldr	r3, [pc, #208]	; (403828 <_zbar_decode_code39+0x97c>)
  403756:	9103      	str	r1, [sp, #12]
  403758:	e88d 008c 	stmia.w	sp, {r2, r3, r7}
  40375c:	4933      	ldr	r1, [pc, #204]	; (40382c <_zbar_decode_code39+0x980>)
  40375e:	4a34      	ldr	r2, [pc, #208]	; (403830 <_zbar_decode_code39+0x984>)
  403760:	4c34      	ldr	r4, [pc, #208]	; (403834 <_zbar_decode_code39+0x988>)
  403762:	f240 1351 	movw	r3, #337	; 0x151
  403766:	47a0      	blx	r4
  403768:	2000      	movs	r0, #0
  40376a:	e56d      	b.n	403248 <_zbar_decode_code39+0x39c>

/* check and release shared state lock */
static inline char release_lock (zbar_decoder_t *dcode,
                                 zbar_symbol_type_t req)
{
    zassert(dcode->lock == req, 1, "lock=%d req=%d\n",
  40376c:	4a2c      	ldr	r2, [pc, #176]	; (403820 <_zbar_decode_code39+0x974>)
  40376e:	4d32      	ldr	r5, [pc, #200]	; (403838 <_zbar_decode_code39+0x98c>)
  403770:	6811      	ldr	r1, [r2, #0]
  403772:	4a32      	ldr	r2, [pc, #200]	; (40383c <_zbar_decode_code39+0x990>)
  403774:	68c8      	ldr	r0, [r1, #12]
  403776:	9302      	str	r3, [sp, #8]
  403778:	2327      	movs	r3, #39	; 0x27
  40377a:	9500      	str	r5, [sp, #0]
  40377c:	9201      	str	r2, [sp, #4]
  40377e:	9303      	str	r3, [sp, #12]
  403780:	492f      	ldr	r1, [pc, #188]	; (403840 <_zbar_decode_code39+0x994>)
  403782:	4a30      	ldr	r2, [pc, #192]	; (403844 <_zbar_decode_code39+0x998>)
  403784:	4d2b      	ldr	r5, [pc, #172]	; (403834 <_zbar_decode_code39+0x988>)
  403786:	f240 1307 	movw	r3, #263	; 0x107
  40378a:	47a8      	blx	r5
  40378c:	e706      	b.n	40359c <_zbar_decode_code39+0x6f0>
    }

    if((idx & 0xc0) == 0x80)
        idx = (idx & 0x3f) + ((enc >> 3) & 1);
    else if((idx & 0xc0) == 0xc0)
        idx = (idx & 0x3f) + ((enc >> 2) & 1);
  40378e:	f006 063f 	and.w	r6, r6, #63	; 0x3f
  403792:	f3c0 0280 	ubfx	r2, r0, #2, #1
  403796:	4416      	add	r6, r2
  403798:	e4ec      	b.n	403174 <_zbar_decode_code39+0x2c8>
        if(enc == 0xff)
            return(-1);
    }

    if((idx & 0xc0) == 0x80)
        idx = (idx & 0x3f) + ((enc >> 3) & 1);
  40379a:	f000 003f 	and.w	r0, r0, #63	; 0x3f
  40379e:	f3c2 05c0 	ubfx	r5, r2, #3, #1
  4037a2:	4428      	add	r0, r5
  4037a4:	e691      	b.n	4034ca <_zbar_decode_code39+0x61e>
    else if((idx & 0xc0) == 0xc0)
        idx = (idx & 0x3f) + ((enc >> 2) & 1);
  4037a6:	f000 003f 	and.w	r0, r0, #63	; 0x3f
  4037aa:	f3c2 0580 	ubfx	r5, r2, #2, #1
  4037ae:	4428      	add	r0, r5
  4037b0:	e68b      	b.n	4034ca <_zbar_decode_code39+0x61e>
  4037b2:	4a1b      	ldr	r2, [pc, #108]	; (403820 <_zbar_decode_code39+0x974>)
  4037b4:	4c20      	ldr	r4, [pc, #128]	; (403838 <_zbar_decode_code39+0x98c>)
  4037b6:	6811      	ldr	r1, [r2, #0]
  4037b8:	4a20      	ldr	r2, [pc, #128]	; (40383c <_zbar_decode_code39+0x990>)
  4037ba:	68c8      	ldr	r0, [r1, #12]
  4037bc:	9302      	str	r3, [sp, #8]
  4037be:	2327      	movs	r3, #39	; 0x27
  4037c0:	9400      	str	r4, [sp, #0]
  4037c2:	9201      	str	r2, [sp, #4]
  4037c4:	9303      	str	r3, [sp, #12]
  4037c6:	491e      	ldr	r1, [pc, #120]	; (403840 <_zbar_decode_code39+0x994>)
  4037c8:	4a1e      	ldr	r2, [pc, #120]	; (403844 <_zbar_decode_code39+0x998>)
  4037ca:	4c1a      	ldr	r4, [pc, #104]	; (403834 <_zbar_decode_code39+0x988>)
  4037cc:	f240 1307 	movw	r3, #263	; 0x107
  4037d0:	47a0      	blx	r4
  4037d2:	2000      	movs	r0, #0
  4037d4:	e538      	b.n	403248 <_zbar_decode_code39+0x39c>
{
    code39_decoder_t *dcode39 = &dcode->code39;
    dbprintf(2, " s=%d ", dcode39->s9);

    signed char c = code39_decode9(dcode);
    if(c != 0x19 && c != 0x2b) {
  4037d6:	282b      	cmp	r0, #43	; 0x2b
  4037d8:	bf08      	it	eq
  4037da:	2500      	moveq	r5, #0
  4037dc:	f43f ae8d 	beq.w	4034fa <_zbar_decode_code39+0x64e>
  4037e0:	e531      	b.n	403246 <_zbar_decode_code39+0x39a>
            char code = dcode->buf[i];
            dcode->buf[i] = dcode->buf[j];
            dcode->buf[j] = code;
        }
    }
    for(i = 0; i < dcode39->character; i++)
  4037e2:	2500      	movs	r5, #0
  4037e4:	e783      	b.n	4036ee <_zbar_decode_code39+0x842>
        dcode->buf[i] = ((dcode->buf[i] < 0x2b)
                         ? code39_characters[(unsigned)dcode->buf[i]]
                         : '?');
    zassert(i < dcode->buf_alloc, -1, "i=%02x %s\n", i,
  4037e6:	4b0e      	ldr	r3, [pc, #56]	; (403820 <_zbar_decode_code39+0x974>)
  4037e8:	6de0      	ldr	r0, [r4, #92]	; 0x5c
  4037ea:	681a      	ldr	r2, [r3, #0]
  4037ec:	4b16      	ldr	r3, [pc, #88]	; (403848 <_zbar_decode_code39+0x99c>)
  4037ee:	68d6      	ldr	r6, [r2, #12]
  4037f0:	b209      	sxth	r1, r1
  4037f2:	4798      	blx	r3
  4037f4:	4a15      	ldr	r2, [pc, #84]	; (40384c <_zbar_decode_code39+0x9a0>)
  4037f6:	4b16      	ldr	r3, [pc, #88]	; (403850 <_zbar_decode_code39+0x9a4>)
  4037f8:	9003      	str	r0, [sp, #12]
  4037fa:	e88d 000c 	stmia.w	sp, {r2, r3}
  4037fe:	9502      	str	r5, [sp, #8]
  403800:	4a0b      	ldr	r2, [pc, #44]	; (403830 <_zbar_decode_code39+0x984>)
  403802:	4914      	ldr	r1, [pc, #80]	; (403854 <_zbar_decode_code39+0x9a8>)
  403804:	4d0b      	ldr	r5, [pc, #44]	; (403834 <_zbar_decode_code39+0x988>)
  403806:	23ec      	movs	r3, #236	; 0xec
  403808:	4630      	mov	r0, r6
  40380a:	47a8      	blx	r5
            else if(!code39_postprocess(dcode)) {
                /* FIXME checksum */
                dbprintf(2, " [valid end]\n");
                sym = ZBAR_CODE39;
            }
            dcode39->character = -1;
  40380c:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
  403810:	f04f 32ff 	mov.w	r2, #4294967295
  403814:	f362 1350 	bfi	r3, r2, #5, #12
  403818:	f8c4 30ec 	str.w	r3, [r4, #236]	; 0xec
  40381c:	e786      	b.n	40372c <_zbar_decode_code39+0x880>
  40381e:	bf00      	nop
  403820:	200008b0 	.word	0x200008b0
  403824:	00411060 	.word	0x00411060
  403828:	00410fd0 	.word	0x00410fd0
  40382c:	00410f94 	.word	0x00410f94
  403830:	00410f14 	.word	0x00410f14
  403834:	0040814d 	.word	0x0040814d
  403838:	00410e8c 	.word	0x00410e8c
  40383c:	00410ac4 	.word	0x00410ac4
  403840:	00410a58 	.word	0x00410a58
  403844:	00410a94 	.word	0x00410a94
  403848:	00403dfd 	.word	0x00403dfd
  40384c:	00410e9c 	.word	0x00410e9c
  403850:	00410f7c 	.word	0x00410f7c
  403854:	00410f44 	.word	0x00410f44

00403858 <zbar_decoder_create>:
#endif
#include "debug.h"
#include "decoder.h"

zbar_decoder_t *zbar_decoder_create ()
{
  403858:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    zbar_decoder_t *dcode = calloc(1, sizeof(zbar_decoder_t));
  40385a:	f44f 718e 	mov.w	r1, #284	; 0x11c
  40385e:	4b2d      	ldr	r3, [pc, #180]	; (403914 <zbar_decoder_create+0xbc>)
    free(dcode);
}

void zbar_decoder_reset (zbar_decoder_t *dcode)
{
    memset(dcode, 0, (long)&dcode->buf_alloc - (long)dcode);
  403860:	4f2d      	ldr	r7, [pc, #180]	; (403918 <zbar_decoder_create+0xc0>)
#include "debug.h"
#include "decoder.h"

zbar_decoder_t *zbar_decoder_create ()
{
    zbar_decoder_t *dcode = calloc(1, sizeof(zbar_decoder_t));
  403862:	2001      	movs	r0, #1
  403864:	4798      	blx	r3
  403866:	4604      	mov	r4, r0
    dcode->buf_alloc = BUFFER_MIN;
  403868:	2320      	movs	r3, #32
  40386a:	6563      	str	r3, [r4, #84]	; 0x54
    dcode->buf = malloc(dcode->buf_alloc);
  40386c:	4618      	mov	r0, r3
  40386e:	4a2b      	ldr	r2, [pc, #172]	; (40391c <zbar_decoder_create+0xc4>)
  403870:	4790      	blx	r2

    /* initialize default configs */
#ifdef ENABLE_EAN
    dcode->ean.enable = 1;
  403872:	2501      	movs	r5, #1
    dcode->ean.ean13_config = ((1 << ZBAR_CFG_ENABLE) |
                               (1 << ZBAR_CFG_EMIT_CHECK));
    dcode->ean.ean8_config = ((1 << ZBAR_CFG_ENABLE) |
                              (1 << ZBAR_CFG_EMIT_CHECK));
    dcode->ean.upca_config = 1 << ZBAR_CFG_EMIT_CHECK;
  403874:	2304      	movs	r3, #4
    dcode->buf = malloc(dcode->buf_alloc);

    /* initialize default configs */
#ifdef ENABLE_EAN
    dcode->ean.enable = 1;
    dcode->ean.ean13_config = ((1 << ZBAR_CFG_ENABLE) |
  403876:	2605      	movs	r6, #5

zbar_decoder_t *zbar_decoder_create ()
{
    zbar_decoder_t *dcode = calloc(1, sizeof(zbar_decoder_t));
    dcode->buf_alloc = BUFFER_MIN;
    dcode->buf = malloc(dcode->buf_alloc);
  403878:	65e0      	str	r0, [r4, #92]	; 0x5c
    dcode->ean.enable = 1;
    dcode->ean.ean13_config = ((1 << ZBAR_CFG_ENABLE) |
                               (1 << ZBAR_CFG_EMIT_CHECK));
    dcode->ean.ean8_config = ((1 << ZBAR_CFG_ENABLE) |
                              (1 << ZBAR_CFG_EMIT_CHECK));
    dcode->ean.upca_config = 1 << ZBAR_CFG_EMIT_CHECK;
  40387a:	f8c4 30d4 	str.w	r3, [r4, #212]	; 0xd4
    dcode->ean.upce_config = 1 << ZBAR_CFG_EMIT_CHECK;
  40387e:	f8c4 30d8 	str.w	r3, [r4, #216]	; 0xd8
    dcode->ean.isbn10_config = 1 << ZBAR_CFG_EMIT_CHECK;
  403882:	f8c4 30dc 	str.w	r3, [r4, #220]	; 0xdc
    dcode->ean.isbn13_config = 1 << ZBAR_CFG_EMIT_CHECK;
  403886:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
    free(dcode);
}

void zbar_decoder_reset (zbar_decoder_t *dcode)
{
    memset(dcode, 0, (long)&dcode->buf_alloc - (long)dcode);
  40388a:	4620      	mov	r0, r4
  40388c:	2100      	movs	r1, #0
  40388e:	2254      	movs	r2, #84	; 0x54
    dcode->buf_alloc = BUFFER_MIN;
    dcode->buf = malloc(dcode->buf_alloc);

    /* initialize default configs */
#ifdef ENABLE_EAN
    dcode->ean.enable = 1;
  403890:	f884 50ca 	strb.w	r5, [r4, #202]	; 0xca
#ifdef ENABLE_CODABAR
    dcode->codabar.config = 1 << ZBAR_CFG_ENABLE;
    CFG(dcode->codabar, ZBAR_CFG_MIN_LEN) = 4;
#endif
#ifdef ENABLE_CODE39
    dcode->code39.config = 1 << ZBAR_CFG_ENABLE;
  403894:	f8c4 50f8 	str.w	r5, [r4, #248]	; 0xf8
    CFG(dcode->code39, ZBAR_CFG_MIN_LEN) = 1;
  403898:	f8c4 50fc 	str.w	r5, [r4, #252]	; 0xfc
#endif
#ifdef ENABLE_CODE93
    dcode->code93.config = 1 << ZBAR_CFG_ENABLE;
#endif
#ifdef ENABLE_CODE128
    dcode->code128.config = 1 << ZBAR_CFG_ENABLE;
  40389c:	f8c4 5110 	str.w	r5, [r4, #272]	; 0x110
    dcode->buf = malloc(dcode->buf_alloc);

    /* initialize default configs */
#ifdef ENABLE_EAN
    dcode->ean.enable = 1;
    dcode->ean.ean13_config = ((1 << ZBAR_CFG_ENABLE) |
  4038a0:	f8c4 60cc 	str.w	r6, [r4, #204]	; 0xcc
                               (1 << ZBAR_CFG_EMIT_CHECK));
    dcode->ean.ean8_config = ((1 << ZBAR_CFG_ENABLE) |
  4038a4:	f8c4 60d0 	str.w	r6, [r4, #208]	; 0xd0
    free(dcode);
}

void zbar_decoder_reset (zbar_decoder_t *dcode)
{
    memset(dcode, 0, (long)&dcode->buf_alloc - (long)dcode);
  4038a8:	47b8      	blx	r7
} code39_decoder_t;

/* reset Code 39 specific state */
static inline void code39_reset (code39_decoder_t *dcode39)
{
    dcode39->direction = 0;
  4038aa:	f894 10ec 	ldrb.w	r1, [r4, #236]	; 0xec
} code128_decoder_t;

/* reset Code 128 specific state */
static inline void code128_reset (code128_decoder_t *dcode128)
{
    dcode128->direction = 0;
  4038ae:	f894 2104 	ldrb.w	r2, [r4, #260]	; 0x104
/* reset EAN/UPC pass specific state */
static inline void ean_new_scan (ean_decoder_t *ean)
{
    ean->pass[0].state = ean->pass[1].state = -1;
    ean->pass[2].state = ean->pass[3].state = -1;
    ean->s4 = 0;
  4038b2:	2300      	movs	r3, #0
    dcode39->element = 0;
  4038b4:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
    dcode128->element = 0;
  4038b8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
  4038bc:	f363 0144 	bfi	r1, r3, #1, #4
  4038c0:	f363 0243 	bfi	r2, r3, #1, #3
  4038c4:	f884 10ec 	strb.w	r1, [r4, #236]	; 0xec
  4038c8:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
    dcode39->character = -1;
  4038cc:	f8d4 00ec 	ldr.w	r0, [r4, #236]	; 0xec
    dcode128->character = -1;
  4038d0:	f8b4 1104 	ldrh.w	r1, [r4, #260]	; 0x104
  4038d4:	f8c4 30b0 	str.w	r3, [r4, #176]	; 0xb0
  4038d8:	f04f 32ff 	mov.w	r2, #4294967295
  4038dc:	f362 1050 	bfi	r0, r2, #5, #12
  4038e0:	f362 110f 	bfi	r1, r2, #4, #12
} ean_decoder_t;

/* reset EAN/UPC pass specific state */
static inline void ean_new_scan (ean_decoder_t *ean)
{
    ean->pass[0].state = ean->pass[1].state = -1;
  4038e4:	22ff      	movs	r2, #255	; 0xff
  4038e6:	f8c4 00ec 	str.w	r0, [r4, #236]	; 0xec

/* reset all EAN/UPC state */
static inline void ean_reset (ean_decoder_t *ean)
{
    ean_new_scan(ean);
    ean->left = ean->right = ZBAR_NONE;
  4038ea:	f8a4 30aa 	strh.w	r3, [r4, #170]	; 0xaa
  4038ee:	f8a4 30a8 	strh.w	r3, [r4, #168]	; 0xa8
    dcode39->s9 = 0;
  4038f2:	f8c4 30f0 	str.w	r3, [r4, #240]	; 0xf0
    dcode128->s6 = 0;
  4038f6:	f8c4 3108 	str.w	r3, [r4, #264]	; 0x108
/* reset Code 128 specific state */
static inline void code128_reset (code128_decoder_t *dcode128)
{
    dcode128->direction = 0;
    dcode128->element = 0;
    dcode128->character = -1;
  4038fa:	f8a4 1104 	strh.w	r1, [r4, #260]	; 0x104
} ean_decoder_t;

/* reset EAN/UPC pass specific state */
static inline void ean_new_scan (ean_decoder_t *ean)
{
    ean->pass[0].state = ean->pass[1].state = -1;
  4038fe:	f884 2078 	strb.w	r2, [r4, #120]	; 0x78
  403902:	f884 2068 	strb.w	r2, [r4, #104]	; 0x68
    ean->pass[2].state = ean->pass[3].state = -1;
  403906:	f884 2098 	strb.w	r2, [r4, #152]	; 0x98
  40390a:	f884 2088 	strb.w	r2, [r4, #136]	; 0x88
    dcode->qrf.config = 1 << ZBAR_CFG_ENABLE;
#endif

    zbar_decoder_reset(dcode);
    return(dcode);
}
  40390e:	4620      	mov	r0, r4
  403910:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  403912:	bf00      	nop
  403914:	00407da1 	.word	0x00407da1
  403918:	004090e5 	.word	0x004090e5
  40391c:	004088ad 	.word	0x004088ad

00403920 <zbar_decoder_destroy>:

void zbar_decoder_destroy (zbar_decoder_t *dcode)
{
  403920:	b538      	push	{r3, r4, r5, lr}
  403922:	4604      	mov	r4, r0
#ifdef ENABLE_DATABAR
    if(dcode->databar.segs)
        free(dcode->databar.segs);
#endif
    if(dcode->buf)
  403924:	6dc0      	ldr	r0, [r0, #92]	; 0x5c
        free(dcode->buf);
  403926:	4d03      	ldr	r5, [pc, #12]	; (403934 <zbar_decoder_destroy+0x14>)
{
#ifdef ENABLE_DATABAR
    if(dcode->databar.segs)
        free(dcode->databar.segs);
#endif
    if(dcode->buf)
  403928:	b100      	cbz	r0, 40392c <zbar_decoder_destroy+0xc>
        free(dcode->buf);
  40392a:	47a8      	blx	r5
    free(dcode);
  40392c:	4620      	mov	r0, r4
  40392e:	47a8      	blx	r5
  403930:	bd38      	pop	{r3, r4, r5, pc}
  403932:	bf00      	nop
  403934:	004088bd 	.word	0x004088bd

00403938 <zbar_decoder_reset>:
}

void zbar_decoder_reset (zbar_decoder_t *dcode)
{
  403938:	b510      	push	{r4, lr}
  40393a:	4604      	mov	r4, r0
    memset(dcode, 0, (long)&dcode->buf_alloc - (long)dcode);
  40393c:	2100      	movs	r1, #0
  40393e:	2254      	movs	r2, #84	; 0x54
  403940:	4b1a      	ldr	r3, [pc, #104]	; (4039ac <zbar_decoder_reset+0x74>)
  403942:	4798      	blx	r3
} code39_decoder_t;

/* reset Code 39 specific state */
static inline void code39_reset (code39_decoder_t *dcode39)
{
    dcode39->direction = 0;
  403944:	f894 10ec 	ldrb.w	r1, [r4, #236]	; 0xec
} code128_decoder_t;

/* reset Code 128 specific state */
static inline void code128_reset (code128_decoder_t *dcode128)
{
    dcode128->direction = 0;
  403948:	f894 2104 	ldrb.w	r2, [r4, #260]	; 0x104
    ean->s4 = 0;
  40394c:	2300      	movs	r3, #0
    dcode39->element = 0;
  40394e:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
    dcode128->element = 0;
  403952:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
  403956:	f363 0144 	bfi	r1, r3, #1, #4
  40395a:	f363 0243 	bfi	r2, r3, #1, #3
  40395e:	f884 10ec 	strb.w	r1, [r4, #236]	; 0xec
  403962:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
    dcode39->character = -1;
  403966:	f8d4 00ec 	ldr.w	r0, [r4, #236]	; 0xec
    dcode128->character = -1;
  40396a:	f8b4 1104 	ldrh.w	r1, [r4, #260]	; 0x104
  40396e:	f8c4 30b0 	str.w	r3, [r4, #176]	; 0xb0
  403972:	f04f 32ff 	mov.w	r2, #4294967295
  403976:	f362 1050 	bfi	r0, r2, #5, #12
  40397a:	f362 110f 	bfi	r1, r2, #4, #12
} ean_decoder_t;

/* reset EAN/UPC pass specific state */
static inline void ean_new_scan (ean_decoder_t *ean)
{
    ean->pass[0].state = ean->pass[1].state = -1;
  40397e:	22ff      	movs	r2, #255	; 0xff

/* reset all EAN/UPC state */
static inline void ean_reset (ean_decoder_t *ean)
{
    ean_new_scan(ean);
    ean->left = ean->right = ZBAR_NONE;
  403980:	f8a4 30aa 	strh.w	r3, [r4, #170]	; 0xaa
  403984:	f8a4 30a8 	strh.w	r3, [r4, #168]	; 0xa8
    dcode39->s9 = 0;
  403988:	f8c4 30f0 	str.w	r3, [r4, #240]	; 0xf0
    dcode128->s6 = 0;
  40398c:	f8c4 3108 	str.w	r3, [r4, #264]	; 0x108
/* reset Code 39 specific state */
static inline void code39_reset (code39_decoder_t *dcode39)
{
    dcode39->direction = 0;
    dcode39->element = 0;
    dcode39->character = -1;
  403990:	f8c4 00ec 	str.w	r0, [r4, #236]	; 0xec
/* reset Code 128 specific state */
static inline void code128_reset (code128_decoder_t *dcode128)
{
    dcode128->direction = 0;
    dcode128->element = 0;
    dcode128->character = -1;
  403994:	f8a4 1104 	strh.w	r1, [r4, #260]	; 0x104
} ean_decoder_t;

/* reset EAN/UPC pass specific state */
static inline void ean_new_scan (ean_decoder_t *ean)
{
    ean->pass[0].state = ean->pass[1].state = -1;
  403998:	f884 2078 	strb.w	r2, [r4, #120]	; 0x78
  40399c:	f884 2068 	strb.w	r2, [r4, #104]	; 0x68
    ean->pass[2].state = ean->pass[3].state = -1;
  4039a0:	f884 2098 	strb.w	r2, [r4, #152]	; 0x98
  4039a4:	f884 2088 	strb.w	r2, [r4, #136]	; 0x88
  4039a8:	bd10      	pop	{r4, pc}
  4039aa:	bf00      	nop
  4039ac:	004090e5 	.word	0x004090e5

004039b0 <zbar_decoder_new_scan>:
    qr_finder_reset(&dcode->qrf);
#endif
}

void zbar_decoder_new_scan (zbar_decoder_t *dcode)
{
  4039b0:	b510      	push	{r4, lr}
  4039b2:	4604      	mov	r4, r0
    /* soft reset decoder */
    memset(dcode->w, 0, sizeof(dcode->w));
  4039b4:	2100      	movs	r1, #0
  4039b6:	2240      	movs	r2, #64	; 0x40
  4039b8:	4b1a      	ldr	r3, [pc, #104]	; (403a24 <zbar_decoder_new_scan+0x74>)
  4039ba:	3004      	adds	r0, #4
  4039bc:	4798      	blx	r3
} code39_decoder_t;

/* reset Code 39 specific state */
static inline void code39_reset (code39_decoder_t *dcode39)
{
    dcode39->direction = 0;
  4039be:	f894 10ec 	ldrb.w	r1, [r4, #236]	; 0xec
} code128_decoder_t;

/* reset Code 128 specific state */
static inline void code128_reset (code128_decoder_t *dcode128)
{
    dcode128->direction = 0;
  4039c2:	f894 2104 	ldrb.w	r2, [r4, #260]	; 0x104
    dcode->lock = 0;
  4039c6:	2300      	movs	r3, #0
    dcode39->element = 0;
  4039c8:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
    dcode128->element = 0;
  4039cc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
  4039d0:	f363 0144 	bfi	r1, r3, #1, #4
  4039d4:	f363 0243 	bfi	r2, r3, #1, #3
  4039d8:	f884 10ec 	strb.w	r1, [r4, #236]	; 0xec
  4039dc:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
    dcode39->character = -1;
  4039e0:	f8d4 00ec 	ldr.w	r0, [r4, #236]	; 0xec
    dcode128->character = -1;
  4039e4:	f8b4 1104 	ldrh.w	r1, [r4, #260]	; 0x104
  4039e8:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
  4039ec:	f04f 32ff 	mov.w	r2, #4294967295
  4039f0:	f362 1050 	bfi	r0, r2, #5, #12
  4039f4:	f362 110f 	bfi	r1, r2, #4, #12
} ean_decoder_t;

/* reset EAN/UPC pass specific state */
static inline void ean_new_scan (ean_decoder_t *ean)
{
    ean->pass[0].state = ean->pass[1].state = -1;
  4039f8:	22ff      	movs	r2, #255	; 0xff
    dcode->idx = 0;
  4039fa:	7023      	strb	r3, [r4, #0]
    dcode->s6 = 0;
  4039fc:	6523      	str	r3, [r4, #80]	; 0x50
    ean->pass[2].state = ean->pass[3].state = -1;
    ean->s4 = 0;
  4039fe:	f8c4 30b0 	str.w	r3, [r4, #176]	; 0xb0
    dcode39->s9 = 0;
  403a02:	f8c4 30f0 	str.w	r3, [r4, #240]	; 0xf0
    dcode128->s6 = 0;
  403a06:	f8c4 3108 	str.w	r3, [r4, #264]	; 0x108
/* reset Code 39 specific state */
static inline void code39_reset (code39_decoder_t *dcode39)
{
    dcode39->direction = 0;
    dcode39->element = 0;
    dcode39->character = -1;
  403a0a:	f8c4 00ec 	str.w	r0, [r4, #236]	; 0xec
/* reset Code 128 specific state */
static inline void code128_reset (code128_decoder_t *dcode128)
{
    dcode128->direction = 0;
    dcode128->element = 0;
    dcode128->character = -1;
  403a0e:	f8a4 1104 	strh.w	r1, [r4, #260]	; 0x104
} ean_decoder_t;

/* reset EAN/UPC pass specific state */
static inline void ean_new_scan (ean_decoder_t *ean)
{
    ean->pass[0].state = ean->pass[1].state = -1;
  403a12:	f884 2078 	strb.w	r2, [r4, #120]	; 0x78
  403a16:	f884 2068 	strb.w	r2, [r4, #104]	; 0x68
    ean->pass[2].state = ean->pass[3].state = -1;
  403a1a:	f884 2098 	strb.w	r2, [r4, #152]	; 0x98
  403a1e:	f884 2088 	strb.w	r2, [r4, #136]	; 0x88
  403a22:	bd10      	pop	{r4, pc}
  403a24:	004090e5 	.word	0x004090e5

00403a28 <zbar_decoder_get_data>:
}

const char *zbar_decoder_get_data (const zbar_decoder_t *dcode)
{
    return((char*)dcode->buf);
}
  403a28:	6dc0      	ldr	r0, [r0, #92]	; 0x5c
  403a2a:	4770      	bx	lr

00403a2c <zbar_decoder_get_data_length>:

unsigned int zbar_decoder_get_data_length (const zbar_decoder_t *dcode)
{
    return(dcode->buflen);
}
  403a2c:	6d80      	ldr	r0, [r0, #88]	; 0x58
  403a2e:	4770      	bx	lr

00403a30 <zbar_decoder_get_direction>:

int zbar_decoder_get_direction (const zbar_decoder_t *dcode)
{
    return(dcode->direction);
}
  403a30:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
  403a32:	4770      	bx	lr

00403a34 <zbar_decoder_set_handler>:

zbar_decoder_handler_t *
zbar_decoder_set_handler (zbar_decoder_t *dcode,
                          zbar_decoder_handler_t *handler)
{
  403a34:	4603      	mov	r3, r0
    zbar_decoder_handler_t *result = dcode->handler;
  403a36:	6e40      	ldr	r0, [r0, #100]	; 0x64
    dcode->handler = handler;
  403a38:	6659      	str	r1, [r3, #100]	; 0x64
    return(result);
}
  403a3a:	4770      	bx	lr

00403a3c <zbar_decoder_set_userdata>:

void zbar_decoder_set_userdata (zbar_decoder_t *dcode,
                                void *userdata)
{
    dcode->userdata = userdata;
  403a3c:	6601      	str	r1, [r0, #96]	; 0x60
  403a3e:	4770      	bx	lr

00403a40 <zbar_decoder_get_userdata>:
}

void *zbar_decoder_get_userdata (const zbar_decoder_t *dcode)
{
    return(dcode->userdata);
}
  403a40:	6e00      	ldr	r0, [r0, #96]	; 0x60
  403a42:	4770      	bx	lr

00403a44 <zbar_decoder_get_type>:

zbar_symbol_type_t zbar_decoder_get_type (const zbar_decoder_t *dcode)
{
    return(dcode->type);
}
  403a44:	f8b0 0044 	ldrh.w	r0, [r0, #68]	; 0x44
  403a48:	4770      	bx	lr
  403a4a:	bf00      	nop

00403a4c <zbar_decoder_get_modifiers>:

unsigned int zbar_decoder_get_modifiers (const zbar_decoder_t *dcode)
{
    return(dcode->modifiers);
}
  403a4c:	6c80      	ldr	r0, [r0, #72]	; 0x48
  403a4e:	4770      	bx	lr

00403a50 <zbar_decode_width>:

zbar_symbol_type_t zbar_decode_width (zbar_decoder_t *dcode,
                                      unsigned w)
{
  403a50:	b570      	push	{r4, r5, r6, lr}
    zbar_symbol_type_t tmp, sym = ZBAR_NONE;

    dcode->w[dcode->idx & (DECODE_WINDOW - 1)] = w;
  403a52:	7803      	ldrb	r3, [r0, #0]
  403a54:	f003 050f 	and.w	r5, r3, #15

/* retrieve i-th previous element width */
static inline unsigned get_width (const zbar_decoder_t *dcode,
                                  unsigned char offset)
{
    return(dcode->w[(dcode->idx - offset) & (DECODE_WINDOW - 1)]);
  403a58:	1e5a      	subs	r2, r3, #1
  403a5a:	eb00 0585 	add.w	r5, r0, r5, lsl #2
  403a5e:	f002 020f 	and.w	r2, r2, #15
  403a62:	3b07      	subs	r3, #7
  403a64:	eb00 0282 	add.w	r2, r0, r2, lsl #2
  403a68:	f003 030f 	and.w	r3, r3, #15
  403a6c:	6069      	str	r1, [r5, #4]
  403a6e:	eb00 0383 	add.w	r3, r0, r3, lsl #2
  403a72:	6851      	ldr	r1, [r2, #4]
  403a74:	6d02      	ldr	r2, [r0, #80]	; 0x50
    dbprintf(1, "    decode[%x]: w=%d (%g)\n", dcode->idx, w, (w / 32.));

    /* update shared character width */
    dcode->s6 -= get_width(dcode, 7);
    dcode->s6 += get_width(dcode, 1);
  403a76:	685b      	ldr	r3, [r3, #4]
    if(TEST_CFG(dcode->qrf.config, ZBAR_CFG_ENABLE) &&
       (tmp = _zbar_find_qr(dcode)) > ZBAR_PARTIAL)
        sym = tmp;
#endif
#ifdef ENABLE_EAN
    if((dcode->ean.enable) &&
  403a78:	f990 50ca 	ldrsb.w	r5, [r0, #202]	; 0xca
  403a7c:	440a      	add	r2, r1
    dcode->w[dcode->idx & (DECODE_WINDOW - 1)] = w;
    dbprintf(1, "    decode[%x]: w=%d (%g)\n", dcode->idx, w, (w / 32.));

    /* update shared character width */
    dcode->s6 -= get_width(dcode, 7);
    dcode->s6 += get_width(dcode, 1);
  403a7e:	1ad2      	subs	r2, r2, r3
    return(dcode->modifiers);
}

zbar_symbol_type_t zbar_decode_width (zbar_decoder_t *dcode,
                                      unsigned w)
{
  403a80:	b084      	sub	sp, #16
  403a82:	4604      	mov	r4, r0
    dcode->w[dcode->idx & (DECODE_WINDOW - 1)] = w;
    dbprintf(1, "    decode[%x]: w=%d (%g)\n", dcode->idx, w, (w / 32.));

    /* update shared character width */
    dcode->s6 -= get_width(dcode, 7);
    dcode->s6 += get_width(dcode, 1);
  403a84:	6502      	str	r2, [r0, #80]	; 0x50
    if(TEST_CFG(dcode->qrf.config, ZBAR_CFG_ENABLE) &&
       (tmp = _zbar_find_qr(dcode)) > ZBAR_PARTIAL)
        sym = tmp;
#endif
#ifdef ENABLE_EAN
    if((dcode->ean.enable) &&
  403a86:	2d00      	cmp	r5, #0
  403a88:	d13d      	bne.n	403b06 <zbar_decode_width+0xb6>
       (tmp = _zbar_decode_ean(dcode)))
        sym = tmp;
#endif
#ifdef ENABLE_CODE39
    if(TEST_CFG(dcode->code39.config, ZBAR_CFG_ENABLE) &&
  403a8a:	f8d4 30f8 	ldr.w	r3, [r4, #248]	; 0xf8
  403a8e:	07d9      	lsls	r1, r3, #31
  403a90:	d41c      	bmi.n	403acc <zbar_decode_width+0x7c>
    if(TEST_CFG(dcode->code93.config, ZBAR_CFG_ENABLE) &&
       (tmp = _zbar_decode_code93(dcode)) > ZBAR_PARTIAL)
        sym = tmp;
#endif
#ifdef ENABLE_CODE128
    if(TEST_CFG(dcode->code128.config, ZBAR_CFG_ENABLE) &&
  403a92:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
  403a96:	07da      	lsls	r2, r3, #31
  403a98:	d422      	bmi.n	403ae0 <zbar_decode_width+0x90>
    if(TEST_CFG(dcode->pdf417.config, ZBAR_CFG_ENABLE) &&
       (tmp = _zbar_decode_pdf417(dcode)) > ZBAR_PARTIAL)
        sym = tmp;
#endif

    dcode->idx++;
  403a9a:	7823      	ldrb	r3, [r4, #0]
    dcode->type = sym;
  403a9c:	f8a4 5044 	strh.w	r5, [r4, #68]	; 0x44
    if(TEST_CFG(dcode->pdf417.config, ZBAR_CFG_ENABLE) &&
       (tmp = _zbar_decode_pdf417(dcode)) > ZBAR_PARTIAL)
        sym = tmp;
#endif

    dcode->idx++;
  403aa0:	3301      	adds	r3, #1
  403aa2:	7023      	strb	r3, [r4, #0]
    dcode->type = sym;
    if(sym) {
  403aa4:	b17d      	cbz	r5, 403ac6 <zbar_decode_width+0x76>
        if(dcode->lock && sym > ZBAR_PARTIAL && sym != ZBAR_QRCODE)
  403aa6:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
  403aaa:	b143      	cbz	r3, 403abe <zbar_decode_width+0x6e>
  403aac:	2d01      	cmp	r5, #1
  403aae:	d92e      	bls.n	403b0e <zbar_decode_width+0xbe>
  403ab0:	2d40      	cmp	r5, #64	; 0x40
  403ab2:	d004      	beq.n	403abe <zbar_decode_width+0x6e>

/* check and release shared state lock */
static inline char release_lock (zbar_decoder_t *dcode,
                                 zbar_symbol_type_t req)
{
    zassert(dcode->lock == req, 1, "lock=%d req=%d\n",
  403ab4:	429d      	cmp	r5, r3
  403ab6:	d12c      	bne.n	403b12 <zbar_decode_width+0xc2>
            dcode->lock, req);
    dcode->lock = 0;
  403ab8:	2300      	movs	r3, #0
  403aba:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
            release_lock(dcode, sym);
        if(dcode->handler)
  403abe:	6e63      	ldr	r3, [r4, #100]	; 0x64
  403ac0:	b10b      	cbz	r3, 403ac6 <zbar_decode_width+0x76>
            dcode->handler(dcode);
  403ac2:	4620      	mov	r0, r4
  403ac4:	4798      	blx	r3
    }
    return(sym);
}
  403ac6:	4628      	mov	r0, r5
  403ac8:	b004      	add	sp, #16
  403aca:	bd70      	pop	{r4, r5, r6, pc}
    if((dcode->ean.enable) &&
       (tmp = _zbar_decode_ean(dcode)))
        sym = tmp;
#endif
#ifdef ENABLE_CODE39
    if(TEST_CFG(dcode->code39.config, ZBAR_CFG_ENABLE) &&
  403acc:	4620      	mov	r0, r4
  403ace:	4b19      	ldr	r3, [pc, #100]	; (403b34 <zbar_decode_width+0xe4>)
  403ad0:	4798      	blx	r3
  403ad2:	2801      	cmp	r0, #1
  403ad4:	d9dd      	bls.n	403a92 <zbar_decode_width+0x42>
    if(TEST_CFG(dcode->code93.config, ZBAR_CFG_ENABLE) &&
       (tmp = _zbar_decode_code93(dcode)) > ZBAR_PARTIAL)
        sym = tmp;
#endif
#ifdef ENABLE_CODE128
    if(TEST_CFG(dcode->code128.config, ZBAR_CFG_ENABLE) &&
  403ad6:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
  403ada:	07db      	lsls	r3, r3, #31
  403adc:	d505      	bpl.n	403aea <zbar_decode_width+0x9a>
  403ade:	4605      	mov	r5, r0
  403ae0:	4620      	mov	r0, r4
  403ae2:	4b15      	ldr	r3, [pc, #84]	; (403b38 <zbar_decode_width+0xe8>)
  403ae4:	4798      	blx	r3
  403ae6:	2801      	cmp	r0, #1
  403ae8:	d9d7      	bls.n	403a9a <zbar_decode_width+0x4a>
    if(TEST_CFG(dcode->pdf417.config, ZBAR_CFG_ENABLE) &&
       (tmp = _zbar_decode_pdf417(dcode)) > ZBAR_PARTIAL)
        sym = tmp;
#endif

    dcode->idx++;
  403aea:	7823      	ldrb	r3, [r4, #0]
    dcode->type = sym;
  403aec:	f8a4 0044 	strh.w	r0, [r4, #68]	; 0x44
    if(TEST_CFG(dcode->pdf417.config, ZBAR_CFG_ENABLE) &&
       (tmp = _zbar_decode_pdf417(dcode)) > ZBAR_PARTIAL)
        sym = tmp;
#endif

    dcode->idx++;
  403af0:	3301      	adds	r3, #1
  403af2:	7023      	strb	r3, [r4, #0]
    dcode->type = sym;
    if(sym) {
        if(dcode->lock && sym > ZBAR_PARTIAL && sym != ZBAR_QRCODE)
  403af4:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
       (tmp = _zbar_decode_pdf417(dcode)) > ZBAR_PARTIAL)
        sym = tmp;
#endif

    dcode->idx++;
    dcode->type = sym;
  403af8:	4605      	mov	r5, r0
    if(sym) {
        if(dcode->lock && sym > ZBAR_PARTIAL && sym != ZBAR_QRCODE)
  403afa:	2b00      	cmp	r3, #0
  403afc:	d1d8      	bne.n	403ab0 <zbar_decode_width+0x60>
            release_lock(dcode, sym);
        if(dcode->handler)
  403afe:	6e63      	ldr	r3, [r4, #100]	; 0x64
  403b00:	2b00      	cmp	r3, #0
  403b02:	d1de      	bne.n	403ac2 <zbar_decode_width+0x72>
  403b04:	e7df      	b.n	403ac6 <zbar_decode_width+0x76>
    if(TEST_CFG(dcode->qrf.config, ZBAR_CFG_ENABLE) &&
       (tmp = _zbar_find_qr(dcode)) > ZBAR_PARTIAL)
        sym = tmp;
#endif
#ifdef ENABLE_EAN
    if((dcode->ean.enable) &&
  403b06:	4b0d      	ldr	r3, [pc, #52]	; (403b3c <zbar_decode_width+0xec>)
  403b08:	4798      	blx	r3
  403b0a:	4605      	mov	r5, r0
  403b0c:	e7bd      	b.n	403a8a <zbar_decode_width+0x3a>
  403b0e:	2501      	movs	r5, #1
  403b10:	e7d5      	b.n	403abe <zbar_decode_width+0x6e>

/* check and release shared state lock */
static inline char release_lock (zbar_decoder_t *dcode,
                                 zbar_symbol_type_t req)
{
    zassert(dcode->lock == req, 1, "lock=%d req=%d\n",
  403b12:	4a0b      	ldr	r2, [pc, #44]	; (403b40 <zbar_decode_width+0xf0>)
  403b14:	4e0b      	ldr	r6, [pc, #44]	; (403b44 <zbar_decode_width+0xf4>)
  403b16:	6811      	ldr	r1, [r2, #0]
  403b18:	4a0b      	ldr	r2, [pc, #44]	; (403b48 <zbar_decode_width+0xf8>)
  403b1a:	68c8      	ldr	r0, [r1, #12]
  403b1c:	9302      	str	r3, [sp, #8]
  403b1e:	9600      	str	r6, [sp, #0]
  403b20:	9201      	str	r2, [sp, #4]
  403b22:	490a      	ldr	r1, [pc, #40]	; (403b4c <zbar_decode_width+0xfc>)
  403b24:	9503      	str	r5, [sp, #12]
  403b26:	4a0a      	ldr	r2, [pc, #40]	; (403b50 <zbar_decode_width+0x100>)
  403b28:	4e0a      	ldr	r6, [pc, #40]	; (403b54 <zbar_decode_width+0x104>)
  403b2a:	f240 1307 	movw	r3, #263	; 0x107
  403b2e:	47b0      	blx	r6
  403b30:	e7c5      	b.n	403abe <zbar_decode_width+0x6e>
  403b32:	bf00      	nop
  403b34:	00402ead 	.word	0x00402ead
  403b38:	00401e3d 	.word	0x00401e3d
  403b3c:	00403eb1 	.word	0x00403eb1
  403b40:	200008b0 	.word	0x200008b0
  403b44:	00411084 	.word	0x00411084
  403b48:	00410ac4 	.word	0x00410ac4
  403b4c:	00410a58 	.word	0x00410a58
  403b50:	00410a94 	.word	0x00410a94
  403b54:	0040814d 	.word	0x0040814d

00403b58 <zbar_decoder_get_configs>:
static inline const unsigned int*
decoder_get_configp (const zbar_decoder_t *dcode,
                     zbar_symbol_type_t sym)
{
    const unsigned int *config;
    switch(sym) {
  403b58:	290a      	cmp	r1, #10
  403b5a:	d02b      	beq.n	403bb4 <zbar_decoder_get_configs+0x5c>
  403b5c:	d90a      	bls.n	403b74 <zbar_decoder_get_configs+0x1c>
  403b5e:	290e      	cmp	r1, #14
  403b60:	d026      	beq.n	403bb0 <zbar_decoder_get_configs+0x58>
  403b62:	d810      	bhi.n	403b86 <zbar_decoder_get_configs+0x2e>
  403b64:	290c      	cmp	r1, #12
  403b66:	d019      	beq.n	403b9c <zbar_decoder_get_configs+0x44>
  403b68:	290d      	cmp	r1, #13
  403b6a:	d119      	bne.n	403ba0 <zbar_decoder_get_configs+0x48>
#ifdef ENABLE_EAN
    case ZBAR_EAN13:
        config = &dcode->ean.ean13_config;
  403b6c:	30cc      	adds	r0, #204	; 0xcc

unsigned int zbar_decoder_get_configs (const zbar_decoder_t *dcode,
                                       zbar_symbol_type_t sym)
{
    const unsigned *config = decoder_get_configp(dcode, sym);
    if(!config)
  403b6e:	b1c0      	cbz	r0, 403ba2 <zbar_decoder_get_configs+0x4a>
        return(0);
    return(*config);
  403b70:	6800      	ldr	r0, [r0, #0]
  403b72:	4770      	bx	lr
static inline const unsigned int*
decoder_get_configp (const zbar_decoder_t *dcode,
                     zbar_symbol_type_t sym)
{
    const unsigned int *config;
    switch(sym) {
  403b74:	2905      	cmp	r1, #5
  403b76:	d019      	beq.n	403bac <zbar_decoder_get_configs+0x54>
  403b78:	d914      	bls.n	403ba4 <zbar_decoder_get_configs+0x4c>
  403b7a:	2908      	cmp	r1, #8
  403b7c:	d00c      	beq.n	403b98 <zbar_decoder_get_configs+0x40>
  403b7e:	2909      	cmp	r1, #9
  403b80:	d10e      	bne.n	403ba0 <zbar_decoder_get_configs+0x48>
    case ZBAR_UPCA:
        config = &dcode->ean.upca_config;
        break;

    case ZBAR_UPCE:
        config = &dcode->ean.upce_config;
  403b82:	30d8      	adds	r0, #216	; 0xd8
  403b84:	e7f3      	b.n	403b6e <zbar_decoder_get_configs+0x16>
static inline const unsigned int*
decoder_get_configp (const zbar_decoder_t *dcode,
                     zbar_symbol_type_t sym)
{
    const unsigned int *config;
    switch(sym) {
  403b86:	2927      	cmp	r1, #39	; 0x27
  403b88:	d004      	beq.n	403b94 <zbar_decoder_get_configs+0x3c>
  403b8a:	2980      	cmp	r1, #128	; 0x80
  403b8c:	d108      	bne.n	403ba0 <zbar_decoder_get_configs+0x48>
        break;
#endif

#ifdef ENABLE_CODE128
    case ZBAR_CODE128:
        config = &dcode->code128.config;
  403b8e:	f500 7088 	add.w	r0, r0, #272	; 0x110
  403b92:	e7ec      	b.n	403b6e <zbar_decoder_get_configs+0x16>
        break;
#endif

#ifdef ENABLE_CODE39
    case ZBAR_CODE39:
        config = &dcode->code39.config;
  403b94:	30f8      	adds	r0, #248	; 0xf8
  403b96:	e7ea      	b.n	403b6e <zbar_decoder_get_configs+0x16>
    case ZBAR_EAN5:
        config = &dcode->ean.ean5_config;
        break;

    case ZBAR_EAN8:
        config = &dcode->ean.ean8_config;
  403b98:	30d0      	adds	r0, #208	; 0xd0
  403b9a:	e7e8      	b.n	403b6e <zbar_decoder_get_configs+0x16>
        break;

    case ZBAR_UPCA:
        config = &dcode->ean.upca_config;
  403b9c:	30d4      	adds	r0, #212	; 0xd4
  403b9e:	e7e6      	b.n	403b6e <zbar_decoder_get_configs+0x16>
unsigned int zbar_decoder_get_configs (const zbar_decoder_t *dcode,
                                       zbar_symbol_type_t sym)
{
    const unsigned *config = decoder_get_configp(dcode, sym);
    if(!config)
        return(0);
  403ba0:	2000      	movs	r0, #0
    return(*config);
}
  403ba2:	4770      	bx	lr
static inline const unsigned int*
decoder_get_configp (const zbar_decoder_t *dcode,
                     zbar_symbol_type_t sym)
{
    const unsigned int *config;
    switch(sym) {
  403ba4:	2902      	cmp	r1, #2
  403ba6:	d1fb      	bne.n	403ba0 <zbar_decoder_get_configs+0x48>
    case ZBAR_EAN13:
        config = &dcode->ean.ean13_config;
        break;

    case ZBAR_EAN2:
        config = &dcode->ean.ean2_config;
  403ba8:	30e8      	adds	r0, #232	; 0xe8
  403baa:	e7e0      	b.n	403b6e <zbar_decoder_get_configs+0x16>
        break;

    case ZBAR_EAN5:
        config = &dcode->ean.ean5_config;
  403bac:	30e4      	adds	r0, #228	; 0xe4
  403bae:	e7de      	b.n	403b6e <zbar_decoder_get_configs+0x16>
    case ZBAR_ISBN10:
        config = &dcode->ean.isbn10_config;
        break;

    case ZBAR_ISBN13:
        config = &dcode->ean.isbn13_config;
  403bb0:	30e0      	adds	r0, #224	; 0xe0
  403bb2:	e7dc      	b.n	403b6e <zbar_decoder_get_configs+0x16>
    case ZBAR_UPCE:
        config = &dcode->ean.upce_config;
        break;

    case ZBAR_ISBN10:
        config = &dcode->ean.isbn10_config;
  403bb4:	30dc      	adds	r0, #220	; 0xdc
  403bb6:	e7da      	b.n	403b6e <zbar_decoder_get_configs+0x16>

00403bb8 <zbar_decoder_set_config>:

int zbar_decoder_set_config (zbar_decoder_t *dcode,
                             zbar_symbol_type_t sym,
                             zbar_config_t cfg,
                             int val)
{
  403bb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  403bbc:	b082      	sub	sp, #8
    if(sym == ZBAR_NONE) {
  403bbe:	b149      	cbz	r1, 403bd4 <zbar_decoder_set_config+0x1c>
        for(symp = all; *symp; symp++)
            zbar_decoder_set_config(dcode, *symp, cfg, val);
        return(0);
    }

    if(cfg >= 0 && cfg < ZBAR_CFG_NUM)
  403bc0:	2a03      	cmp	r2, #3
  403bc2:	d969      	bls.n	403c98 <zbar_decoder_set_config+0xe0>
        return(decoder_set_config_bool(dcode, sym, cfg, val));
    else if(cfg >= ZBAR_CFG_MIN_LEN && cfg <= ZBAR_CFG_MAX_LEN)
  403bc4:	f1a2 0420 	sub.w	r4, r2, #32
  403bc8:	2c01      	cmp	r4, #1
  403bca:	d959      	bls.n	403c80 <zbar_decoder_set_config+0xc8>
    if(!val)
        *config &= ~(1 << cfg);
    else if(val == 1)
        *config |= (1 << cfg);
    else
        return(1);
  403bcc:	2001      	movs	r0, #1
        return(decoder_set_config_bool(dcode, sym, cfg, val));
    else if(cfg >= ZBAR_CFG_MIN_LEN && cfg <= ZBAR_CFG_MAX_LEN)
        return(decoder_set_config_int(dcode, sym, cfg, val));
    else
        return(1);
}
  403bce:	b002      	add	sp, #8
  403bd0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        return(1);

    if(!val)
        *config &= ~(1 << cfg);
    else if(val == 1)
        *config |= (1 << cfg);
  403bd4:	f04f 0e01 	mov.w	lr, #1
  403bd8:	fa0e fe02 	lsl.w	lr, lr, r2
        return(0);
    }

    if(cfg >= 0 && cfg < ZBAR_CFG_NUM)
        return(decoder_set_config_bool(dcode, sym, cfg, val));
    else if(cfg >= ZBAR_CFG_MIN_LEN && cfg <= ZBAR_CFG_MAX_LEN)
  403bdc:	f1a2 0120 	sub.w	r1, r2, #32
        CFG(dcode->codabar, cfg) = val;
        break;
#endif
#ifdef ENABLE_CODE39
    case ZBAR_CODE39:
        CFG(dcode->code39, cfg) = val;
  403be0:	f102 091e 	add.w	r9, r2, #30
        CFG(dcode->code93, cfg) = val;
        break;
#endif
#ifdef ENABLE_CODE128
    case ZBAR_CODE128:
        CFG(dcode->code128, cfg) = val;
  403be4:	f102 0a24 	add.w	sl, r2, #36	; 0x24
        return(0);
    }

    if(cfg >= 0 && cfg < ZBAR_CFG_NUM)
        return(decoder_set_config_bool(dcode, sym, cfg, val));
    else if(cfg >= ZBAR_CFG_MIN_LEN && cfg <= ZBAR_CFG_MAX_LEN)
  403be8:	f8df c20c 	ldr.w	ip, [pc, #524]	; 403df8 <zbar_decoder_set_config+0x240>
    unsigned *config = (void*)decoder_get_configp(dcode, sym);
    if(!config || cfg >= ZBAR_CFG_NUM)
        return(1);

    if(!val)
        *config &= ~(1 << cfg);
  403bec:	ea6f 080e 	mvn.w	r8, lr
        return(0);
    }

    if(cfg >= 0 && cfg < ZBAR_CFG_NUM)
        return(decoder_set_config_bool(dcode, sym, cfg, val));
    else if(cfg >= ZBAR_CFG_MIN_LEN && cfg <= ZBAR_CFG_MAX_LEN)
  403bf0:	b289      	uxth	r1, r1
        CFG(dcode->codabar, cfg) = val;
        break;
#endif
#ifdef ENABLE_CODE39
    case ZBAR_CODE39:
        CFG(dcode->code39, cfg) = val;
  403bf2:	eb00 0989 	add.w	r9, r0, r9, lsl #2
        CFG(dcode->code93, cfg) = val;
        break;
#endif
#ifdef ENABLE_CODE128
    case ZBAR_CODE128:
        CFG(dcode->code128, cfg) = val;
  403bf6:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        return(0);
    }

    if(cfg >= 0 && cfg < ZBAR_CFG_NUM)
        return(decoder_set_config_bool(dcode, sym, cfg, val));
    else if(cfg >= ZBAR_CFG_MIN_LEN && cfg <= ZBAR_CFG_MAX_LEN)
  403bfa:	240d      	movs	r4, #13
  403bfc:	e006      	b.n	403c0c <zbar_decoder_set_config+0x54>
  403bfe:	2901      	cmp	r1, #1
  403c00:	f240 8096 	bls.w	403d30 <zbar_decoder_set_config+0x178>
            ZBAR_I25, ZBAR_DATABAR, ZBAR_DATABAR_EXP, ZBAR_CODABAR,
	    ZBAR_CODE39, ZBAR_CODE93, ZBAR_CODE128, ZBAR_QRCODE, 
	    ZBAR_PDF417, 0
        };
        const zbar_symbol_type_t *symp;
        for(symp = all; *symp; symp++)
  403c04:	f83c 4f02 	ldrh.w	r4, [ip, #2]!
  403c08:	2c00      	cmp	r4, #0
  403c0a:	d078      	beq.n	403cfe <zbar_decoder_set_config+0x146>
            zbar_decoder_set_config(dcode, *symp, cfg, val);
        return(0);
    }

    if(cfg >= 0 && cfg < ZBAR_CFG_NUM)
  403c0c:	2a03      	cmp	r2, #3
  403c0e:	d8f6      	bhi.n	403bfe <zbar_decoder_set_config+0x46>
static inline const unsigned int*
decoder_get_configp (const zbar_decoder_t *dcode,
                     zbar_symbol_type_t sym)
{
    const unsigned int *config;
    switch(sym) {
  403c10:	2c0a      	cmp	r4, #10
  403c12:	f000 80bc 	beq.w	403d8e <zbar_decoder_set_config+0x1d6>
  403c16:	f240 80af 	bls.w	403d78 <zbar_decoder_set_config+0x1c0>
  403c1a:	2c0e      	cmp	r4, #14
  403c1c:	f000 80a6 	beq.w	403d6c <zbar_decoder_set_config+0x1b4>
  403c20:	f200 809c 	bhi.w	403d5c <zbar_decoder_set_config+0x1a4>
  403c24:	2c0c      	cmp	r4, #12
  403c26:	f000 8096 	beq.w	403d56 <zbar_decoder_set_config+0x19e>
  403c2a:	2c0d      	cmp	r4, #13
  403c2c:	d1ea      	bne.n	403c04 <zbar_decoder_set_config+0x4c>
#ifdef ENABLE_EAN
    case ZBAR_EAN13:
        config = &dcode->ean.ean13_config;
  403c2e:	f100 05cc 	add.w	r5, r0, #204	; 0xcc
                                           zbar_symbol_type_t sym,
                                           zbar_config_t cfg,
                                           int val)
{
    unsigned *config = (void*)decoder_get_configp(dcode, sym);
    if(!config || cfg >= ZBAR_CFG_NUM)
  403c32:	2d00      	cmp	r5, #0
  403c34:	d0e6      	beq.n	403c04 <zbar_decoder_set_config+0x4c>
        return(1);

    if(!val)
  403c36:	2b00      	cmp	r3, #0
  403c38:	f040 8085 	bne.w	403d46 <zbar_decoder_set_config+0x18e>
        *config &= ~(1 << cfg);
  403c3c:	682c      	ldr	r4, [r5, #0]
  403c3e:	ea04 0408 	and.w	r4, r4, r8
  403c42:	602c      	str	r4, [r5, #0]
        *config |= (1 << cfg);
    else
        return(1);

#ifdef ENABLE_EAN
    dcode->ean.enable = TEST_CFG(dcode->ean.ean13_config |
  403c44:	f8d0 60cc 	ldr.w	r6, [r0, #204]	; 0xcc
  403c48:	f8d0 70e8 	ldr.w	r7, [r0, #232]	; 0xe8
  403c4c:	f8d0 50e4 	ldr.w	r5, [r0, #228]	; 0xe4
  403c50:	f8d0 40d0 	ldr.w	r4, [r0, #208]	; 0xd0
  403c54:	4337      	orrs	r7, r6
  403c56:	432f      	orrs	r7, r5
  403c58:	4327      	orrs	r7, r4
  403c5a:	f8d0 40e0 	ldr.w	r4, [r0, #224]	; 0xe0
  403c5e:	9401      	str	r4, [sp, #4]
  403c60:	f8d0 40d4 	ldr.w	r4, [r0, #212]	; 0xd4
  403c64:	f8d0 60d8 	ldr.w	r6, [r0, #216]	; 0xd8
  403c68:	f8d0 50dc 	ldr.w	r5, [r0, #220]	; 0xdc
  403c6c:	4327      	orrs	r7, r4
  403c6e:	433e      	orrs	r6, r7
  403c70:	9c01      	ldr	r4, [sp, #4]
  403c72:	4335      	orrs	r5, r6
  403c74:	432c      	orrs	r4, r5
  403c76:	f004 0401 	and.w	r4, r4, #1
  403c7a:	f880 40ca 	strb.w	r4, [r0, #202]	; 0xca
  403c7e:	e7c1      	b.n	403c04 <zbar_decoder_set_config+0x4c>
static inline int decoder_set_config_int (zbar_decoder_t *dcode,
                                          zbar_symbol_type_t sym,
                                          zbar_config_t cfg,
                                          int val)
{
    switch(sym) {
  403c80:	2927      	cmp	r1, #39	; 0x27
  403c82:	d04e      	beq.n	403d22 <zbar_decoder_set_config+0x16a>
  403c84:	2980      	cmp	r1, #128	; 0x80
  403c86:	d1a1      	bne.n	403bcc <zbar_decoder_set_config+0x14>
        CFG(dcode->code93, cfg) = val;
        break;
#endif
#ifdef ENABLE_CODE128
    case ZBAR_CODE128:
        CFG(dcode->code128, cfg) = val;
  403c88:	eb00 0282 	add.w	r2, r0, r2, lsl #2
#endif

    default:
        return(1);
    }
    return(0);
  403c8c:	2000      	movs	r0, #0
        CFG(dcode->code93, cfg) = val;
        break;
#endif
#ifdef ENABLE_CODE128
    case ZBAR_CODE128:
        CFG(dcode->code128, cfg) = val;
  403c8e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
        return(decoder_set_config_bool(dcode, sym, cfg, val));
    else if(cfg >= ZBAR_CFG_MIN_LEN && cfg <= ZBAR_CFG_MAX_LEN)
        return(decoder_set_config_int(dcode, sym, cfg, val));
    else
        return(1);
}
  403c92:	b002      	add	sp, #8
  403c94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
static inline const unsigned int*
decoder_get_configp (const zbar_decoder_t *dcode,
                     zbar_symbol_type_t sym)
{
    const unsigned int *config;
    switch(sym) {
  403c98:	290a      	cmp	r1, #10
  403c9a:	d03f      	beq.n	403d1c <zbar_decoder_set_config+0x164>
  403c9c:	f240 8089 	bls.w	403db2 <zbar_decoder_set_config+0x1fa>
  403ca0:	290e      	cmp	r1, #14
  403ca2:	f000 8083 	beq.w	403dac <zbar_decoder_set_config+0x1f4>
  403ca6:	f200 808f 	bhi.w	403dc8 <zbar_decoder_set_config+0x210>
  403caa:	290c      	cmp	r1, #12
  403cac:	d033      	beq.n	403d16 <zbar_decoder_set_config+0x15e>
  403cae:	290d      	cmp	r1, #13
  403cb0:	d18c      	bne.n	403bcc <zbar_decoder_set_config+0x14>
#ifdef ENABLE_EAN
    case ZBAR_EAN13:
        config = &dcode->ean.ean13_config;
  403cb2:	f100 01cc 	add.w	r1, r0, #204	; 0xcc
                                           zbar_symbol_type_t sym,
                                           zbar_config_t cfg,
                                           int val)
{
    unsigned *config = (void*)decoder_get_configp(dcode, sym);
    if(!config || cfg >= ZBAR_CFG_NUM)
  403cb6:	2900      	cmp	r1, #0
  403cb8:	d088      	beq.n	403bcc <zbar_decoder_set_config+0x14>
        return(1);

    if(!val)
  403cba:	bb23      	cbnz	r3, 403d06 <zbar_decoder_set_config+0x14e>
        *config &= ~(1 << cfg);
  403cbc:	680b      	ldr	r3, [r1, #0]
  403cbe:	2401      	movs	r4, #1
  403cc0:	fa04 f202 	lsl.w	r2, r4, r2
  403cc4:	ea23 0302 	bic.w	r3, r3, r2
  403cc8:	600b      	str	r3, [r1, #0]
        *config |= (1 << cfg);
    else
        return(1);

#ifdef ENABLE_EAN
    dcode->ean.enable = TEST_CFG(dcode->ean.ean13_config |
  403cca:	f100 01d8 	add.w	r1, r0, #216	; 0xd8
  403cce:	c90e      	ldmia	r1, {r1, r2, r3}
  403cd0:	f8d0 70cc 	ldr.w	r7, [r0, #204]	; 0xcc
  403cd4:	9301      	str	r3, [sp, #4]
  403cd6:	f8d0 30e8 	ldr.w	r3, [r0, #232]	; 0xe8
  403cda:	f8d0 60e4 	ldr.w	r6, [r0, #228]	; 0xe4
  403cde:	f8d0 50d0 	ldr.w	r5, [r0, #208]	; 0xd0
  403ce2:	f8d0 40d4 	ldr.w	r4, [r0, #212]	; 0xd4
  403ce6:	431f      	orrs	r7, r3
  403ce8:	433e      	orrs	r6, r7
  403cea:	4335      	orrs	r5, r6
  403cec:	432c      	orrs	r4, r5
  403cee:	4321      	orrs	r1, r4
  403cf0:	9b01      	ldr	r3, [sp, #4]
  403cf2:	430a      	orrs	r2, r1
  403cf4:	4313      	orrs	r3, r2
  403cf6:	f003 0301 	and.w	r3, r3, #1
  403cfa:	f880 30ca 	strb.w	r3, [r0, #202]	; 0xca
                                 dcode->ean.isbn10_config |
                                 dcode->ean.isbn13_config,
                                 ZBAR_CFG_ENABLE);
#endif

    return(0);
  403cfe:	2000      	movs	r0, #0
        return(decoder_set_config_bool(dcode, sym, cfg, val));
    else if(cfg >= ZBAR_CFG_MIN_LEN && cfg <= ZBAR_CFG_MAX_LEN)
        return(decoder_set_config_int(dcode, sym, cfg, val));
    else
        return(1);
}
  403d00:	b002      	add	sp, #8
  403d02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if(!config || cfg >= ZBAR_CFG_NUM)
        return(1);

    if(!val)
        *config &= ~(1 << cfg);
    else if(val == 1)
  403d06:	2b01      	cmp	r3, #1
  403d08:	f47f af60 	bne.w	403bcc <zbar_decoder_set_config+0x14>
        *config |= (1 << cfg);
  403d0c:	680c      	ldr	r4, [r1, #0]
  403d0e:	4093      	lsls	r3, r2
  403d10:	4323      	orrs	r3, r4
  403d12:	600b      	str	r3, [r1, #0]
  403d14:	e7d9      	b.n	403cca <zbar_decoder_set_config+0x112>
    case ZBAR_EAN8:
        config = &dcode->ean.ean8_config;
        break;

    case ZBAR_UPCA:
        config = &dcode->ean.upca_config;
  403d16:	f100 01d4 	add.w	r1, r0, #212	; 0xd4
  403d1a:	e7cc      	b.n	403cb6 <zbar_decoder_set_config+0xfe>
    case ZBAR_UPCE:
        config = &dcode->ean.upce_config;
        break;

    case ZBAR_ISBN10:
        config = &dcode->ean.isbn10_config;
  403d1c:	f100 01dc 	add.w	r1, r0, #220	; 0xdc
  403d20:	e7c9      	b.n	403cb6 <zbar_decoder_set_config+0xfe>
        CFG(dcode->codabar, cfg) = val;
        break;
#endif
#ifdef ENABLE_CODE39
    case ZBAR_CODE39:
        CFG(dcode->code39, cfg) = val;
  403d22:	eb00 0282 	add.w	r2, r0, r2, lsl #2
#endif

    default:
        return(1);
    }
    return(0);
  403d26:	2000      	movs	r0, #0
        CFG(dcode->codabar, cfg) = val;
        break;
#endif
#ifdef ENABLE_CODE39
    case ZBAR_CODE39:
        CFG(dcode->code39, cfg) = val;
  403d28:	67d3      	str	r3, [r2, #124]	; 0x7c
        return(decoder_set_config_bool(dcode, sym, cfg, val));
    else if(cfg >= ZBAR_CFG_MIN_LEN && cfg <= ZBAR_CFG_MAX_LEN)
        return(decoder_set_config_int(dcode, sym, cfg, val));
    else
        return(1);
}
  403d2a:	b002      	add	sp, #8
  403d2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
static inline int decoder_set_config_int (zbar_decoder_t *dcode,
                                          zbar_symbol_type_t sym,
                                          zbar_config_t cfg,
                                          int val)
{
    switch(sym) {
  403d30:	2c27      	cmp	r4, #39	; 0x27
  403d32:	d005      	beq.n	403d40 <zbar_decoder_set_config+0x188>
  403d34:	2c80      	cmp	r4, #128	; 0x80
  403d36:	f47f af65 	bne.w	403c04 <zbar_decoder_set_config+0x4c>
        CFG(dcode->code93, cfg) = val;
        break;
#endif
#ifdef ENABLE_CODE128
    case ZBAR_CODE128:
        CFG(dcode->code128, cfg) = val;
  403d3a:	f8ca 3004 	str.w	r3, [sl, #4]
  403d3e:	e761      	b.n	403c04 <zbar_decoder_set_config+0x4c>
        CFG(dcode->codabar, cfg) = val;
        break;
#endif
#ifdef ENABLE_CODE39
    case ZBAR_CODE39:
        CFG(dcode->code39, cfg) = val;
  403d40:	f8c9 3004 	str.w	r3, [r9, #4]
  403d44:	e75e      	b.n	403c04 <zbar_decoder_set_config+0x4c>
    if(!config || cfg >= ZBAR_CFG_NUM)
        return(1);

    if(!val)
        *config &= ~(1 << cfg);
    else if(val == 1)
  403d46:	2b01      	cmp	r3, #1
  403d48:	f47f af5c 	bne.w	403c04 <zbar_decoder_set_config+0x4c>
        *config |= (1 << cfg);
  403d4c:	682c      	ldr	r4, [r5, #0]
  403d4e:	ea44 040e 	orr.w	r4, r4, lr
  403d52:	602c      	str	r4, [r5, #0]
  403d54:	e776      	b.n	403c44 <zbar_decoder_set_config+0x8c>
    case ZBAR_EAN8:
        config = &dcode->ean.ean8_config;
        break;

    case ZBAR_UPCA:
        config = &dcode->ean.upca_config;
  403d56:	f100 05d4 	add.w	r5, r0, #212	; 0xd4
  403d5a:	e76a      	b.n	403c32 <zbar_decoder_set_config+0x7a>
static inline const unsigned int*
decoder_get_configp (const zbar_decoder_t *dcode,
                     zbar_symbol_type_t sym)
{
    const unsigned int *config;
    switch(sym) {
  403d5c:	2c27      	cmp	r4, #39	; 0x27
  403d5e:	d008      	beq.n	403d72 <zbar_decoder_set_config+0x1ba>
  403d60:	2c80      	cmp	r4, #128	; 0x80
  403d62:	f47f af4f 	bne.w	403c04 <zbar_decoder_set_config+0x4c>
        break;
#endif

#ifdef ENABLE_CODE128
    case ZBAR_CODE128:
        config = &dcode->code128.config;
  403d66:	f500 7588 	add.w	r5, r0, #272	; 0x110
  403d6a:	e762      	b.n	403c32 <zbar_decoder_set_config+0x7a>
    case ZBAR_ISBN10:
        config = &dcode->ean.isbn10_config;
        break;

    case ZBAR_ISBN13:
        config = &dcode->ean.isbn13_config;
  403d6c:	f100 05e0 	add.w	r5, r0, #224	; 0xe0
  403d70:	e75f      	b.n	403c32 <zbar_decoder_set_config+0x7a>
        break;
#endif

#ifdef ENABLE_CODE39
    case ZBAR_CODE39:
        config = &dcode->code39.config;
  403d72:	f100 05f8 	add.w	r5, r0, #248	; 0xf8
  403d76:	e75c      	b.n	403c32 <zbar_decoder_set_config+0x7a>
static inline const unsigned int*
decoder_get_configp (const zbar_decoder_t *dcode,
                     zbar_symbol_type_t sym)
{
    const unsigned int *config;
    switch(sym) {
  403d78:	2c05      	cmp	r4, #5
  403d7a:	d014      	beq.n	403da6 <zbar_decoder_set_config+0x1ee>
  403d7c:	d90d      	bls.n	403d9a <zbar_decoder_set_config+0x1e2>
  403d7e:	2c08      	cmp	r4, #8
  403d80:	d008      	beq.n	403d94 <zbar_decoder_set_config+0x1dc>
  403d82:	2c09      	cmp	r4, #9
  403d84:	f47f af3e 	bne.w	403c04 <zbar_decoder_set_config+0x4c>
    case ZBAR_UPCA:
        config = &dcode->ean.upca_config;
        break;

    case ZBAR_UPCE:
        config = &dcode->ean.upce_config;
  403d88:	f100 05d8 	add.w	r5, r0, #216	; 0xd8
  403d8c:	e751      	b.n	403c32 <zbar_decoder_set_config+0x7a>
        break;

    case ZBAR_ISBN10:
        config = &dcode->ean.isbn10_config;
  403d8e:	f100 05dc 	add.w	r5, r0, #220	; 0xdc
  403d92:	e74e      	b.n	403c32 <zbar_decoder_set_config+0x7a>
    case ZBAR_EAN5:
        config = &dcode->ean.ean5_config;
        break;

    case ZBAR_EAN8:
        config = &dcode->ean.ean8_config;
  403d94:	f100 05d0 	add.w	r5, r0, #208	; 0xd0
  403d98:	e74b      	b.n	403c32 <zbar_decoder_set_config+0x7a>
static inline const unsigned int*
decoder_get_configp (const zbar_decoder_t *dcode,
                     zbar_symbol_type_t sym)
{
    const unsigned int *config;
    switch(sym) {
  403d9a:	2c02      	cmp	r4, #2
  403d9c:	f47f af32 	bne.w	403c04 <zbar_decoder_set_config+0x4c>
    case ZBAR_EAN13:
        config = &dcode->ean.ean13_config;
        break;

    case ZBAR_EAN2:
        config = &dcode->ean.ean2_config;
  403da0:	f100 05e8 	add.w	r5, r0, #232	; 0xe8
  403da4:	e745      	b.n	403c32 <zbar_decoder_set_config+0x7a>
        break;

    case ZBAR_EAN5:
        config = &dcode->ean.ean5_config;
  403da6:	f100 05e4 	add.w	r5, r0, #228	; 0xe4
  403daa:	e742      	b.n	403c32 <zbar_decoder_set_config+0x7a>
    case ZBAR_ISBN10:
        config = &dcode->ean.isbn10_config;
        break;

    case ZBAR_ISBN13:
        config = &dcode->ean.isbn13_config;
  403dac:	f100 01e0 	add.w	r1, r0, #224	; 0xe0
  403db0:	e781      	b.n	403cb6 <zbar_decoder_set_config+0xfe>
static inline const unsigned int*
decoder_get_configp (const zbar_decoder_t *dcode,
                     zbar_symbol_type_t sym)
{
    const unsigned int *config;
    switch(sym) {
  403db2:	2905      	cmp	r1, #5
  403db4:	d016      	beq.n	403de4 <zbar_decoder_set_config+0x22c>
  403db6:	d90f      	bls.n	403dd8 <zbar_decoder_set_config+0x220>
  403db8:	2908      	cmp	r1, #8
  403dba:	d016      	beq.n	403dea <zbar_decoder_set_config+0x232>
  403dbc:	2909      	cmp	r1, #9
  403dbe:	f47f af05 	bne.w	403bcc <zbar_decoder_set_config+0x14>
    case ZBAR_UPCA:
        config = &dcode->ean.upca_config;
        break;

    case ZBAR_UPCE:
        config = &dcode->ean.upce_config;
  403dc2:	f100 01d8 	add.w	r1, r0, #216	; 0xd8
  403dc6:	e776      	b.n	403cb6 <zbar_decoder_set_config+0xfe>
static inline const unsigned int*
decoder_get_configp (const zbar_decoder_t *dcode,
                     zbar_symbol_type_t sym)
{
    const unsigned int *config;
    switch(sym) {
  403dc8:	2927      	cmp	r1, #39	; 0x27
  403dca:	d011      	beq.n	403df0 <zbar_decoder_set_config+0x238>
  403dcc:	2980      	cmp	r1, #128	; 0x80
  403dce:	f47f aefd 	bne.w	403bcc <zbar_decoder_set_config+0x14>
        break;
#endif

#ifdef ENABLE_CODE128
    case ZBAR_CODE128:
        config = &dcode->code128.config;
  403dd2:	f500 7188 	add.w	r1, r0, #272	; 0x110
  403dd6:	e76e      	b.n	403cb6 <zbar_decoder_set_config+0xfe>
static inline const unsigned int*
decoder_get_configp (const zbar_decoder_t *dcode,
                     zbar_symbol_type_t sym)
{
    const unsigned int *config;
    switch(sym) {
  403dd8:	2902      	cmp	r1, #2
  403dda:	f47f aef7 	bne.w	403bcc <zbar_decoder_set_config+0x14>
    case ZBAR_EAN13:
        config = &dcode->ean.ean13_config;
        break;

    case ZBAR_EAN2:
        config = &dcode->ean.ean2_config;
  403dde:	f100 01e8 	add.w	r1, r0, #232	; 0xe8
  403de2:	e768      	b.n	403cb6 <zbar_decoder_set_config+0xfe>
        break;

    case ZBAR_EAN5:
        config = &dcode->ean.ean5_config;
  403de4:	f100 01e4 	add.w	r1, r0, #228	; 0xe4
  403de8:	e765      	b.n	403cb6 <zbar_decoder_set_config+0xfe>
        break;

    case ZBAR_EAN8:
        config = &dcode->ean.ean8_config;
  403dea:	f100 01d0 	add.w	r1, r0, #208	; 0xd0
  403dee:	e762      	b.n	403cb6 <zbar_decoder_set_config+0xfe>
        break;
#endif

#ifdef ENABLE_CODE39
    case ZBAR_CODE39:
        config = &dcode->code39.config;
  403df0:	f100 01f8 	add.w	r1, r0, #248	; 0xf8
  403df4:	e75f      	b.n	403cb6 <zbar_decoder_set_config+0xfe>
  403df6:	bf00      	nop
  403df8:	00411094 	.word	0x00411094

00403dfc <_zbar_decoder_buf_dump>:
static char *decoder_dump = NULL;
static unsigned decoder_dumplen = 0;

const char *_zbar_decoder_buf_dump (unsigned char *buf,
                                    unsigned int buflen)
{
  403dfc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    int dumplen = (buflen * 3) + 12;
    char *p;
    int i;

    if(!decoder_dump || dumplen > decoder_dumplen) {
  403e00:	f8df b09c 	ldr.w	fp, [pc, #156]	; 403ea0 <_zbar_decoder_buf_dump+0xa4>
  403e04:	f8df 809c 	ldr.w	r8, [pc, #156]	; 403ea4 <_zbar_decoder_buf_dump+0xa8>
  403e08:	f8db 5000 	ldr.w	r5, [fp]
static unsigned decoder_dumplen = 0;

const char *_zbar_decoder_buf_dump (unsigned char *buf,
                                    unsigned int buflen)
{
    int dumplen = (buflen * 3) + 12;
  403e0c:	eb01 0441 	add.w	r4, r1, r1, lsl #1
static char *decoder_dump = NULL;
static unsigned decoder_dumplen = 0;

const char *_zbar_decoder_buf_dump (unsigned char *buf,
                                    unsigned int buflen)
{
  403e10:	b083      	sub	sp, #12
  403e12:	460f      	mov	r7, r1
  403e14:	4606      	mov	r6, r0
    int dumplen = (buflen * 3) + 12;
  403e16:	340c      	adds	r4, #12
    char *p;
    int i;

    if(!decoder_dump || dumplen > decoder_dumplen) {
  403e18:	b375      	cbz	r5, 403e78 <_zbar_decoder_buf_dump+0x7c>
  403e1a:	f8d8 3000 	ldr.w	r3, [r8]
  403e1e:	429c      	cmp	r4, r3
  403e20:	d827      	bhi.n	403e72 <_zbar_decoder_buf_dump+0x76>
            free(decoder_dump);
        decoder_dump = malloc(dumplen);
        decoder_dumplen = dumplen;
    }
    p = decoder_dump +
        snprintf(decoder_dump, 12, "buf[%04x]=",
  403e22:	f64f 73ff 	movw	r3, #65535	; 0xffff
  403e26:	42bb      	cmp	r3, r7
  403e28:	4628      	mov	r0, r5
  403e2a:	bf28      	it	cs
  403e2c:	463b      	movcs	r3, r7
  403e2e:	210c      	movs	r1, #12
  403e30:	4a16      	ldr	r2, [pc, #88]	; (403e8c <_zbar_decoder_buf_dump+0x90>)
  403e32:	f8df 8074 	ldr.w	r8, [pc, #116]	; 403ea8 <_zbar_decoder_buf_dump+0xac>
  403e36:	47c0      	blx	r8
        if(decoder_dump)
            free(decoder_dump);
        decoder_dump = malloc(dumplen);
        decoder_dumplen = dumplen;
    }
    p = decoder_dump +
  403e38:	4405      	add	r5, r0
        snprintf(decoder_dump, 12, "buf[%04x]=",
                 (buflen > 0xffff) ? 0xffff : buflen);
    for(i = 0; i < buflen; i++)
  403e3a:	b1af      	cbz	r7, 403e68 <_zbar_decoder_buf_dump+0x6c>
        p += snprintf(p, 4, "%s%02x", (i) ? " " : "",  buf[i]);
  403e3c:	4b14      	ldr	r3, [pc, #80]	; (403e90 <_zbar_decoder_buf_dump+0x94>)
  403e3e:	f8df a06c 	ldr.w	sl, [pc, #108]	; 403eac <_zbar_decoder_buf_dump+0xb0>
  403e42:	3e01      	subs	r6, #1
  403e44:	4699      	mov	r9, r3
        decoder_dumplen = dumplen;
    }
    p = decoder_dump +
        snprintf(decoder_dump, 12, "buf[%04x]=",
                 (buflen > 0xffff) ? 0xffff : buflen);
    for(i = 0; i < buflen; i++)
  403e46:	2400      	movs	r4, #0
  403e48:	e003      	b.n	403e52 <_zbar_decoder_buf_dump+0x56>
        p += snprintf(p, 4, "%s%02x", (i) ? " " : "",  buf[i]);
  403e4a:	2c00      	cmp	r4, #0
  403e4c:	bf14      	ite	ne
  403e4e:	4653      	movne	r3, sl
  403e50:	464b      	moveq	r3, r9
  403e52:	f816 2f01 	ldrb.w	r2, [r6, #1]!
  403e56:	9200      	str	r2, [sp, #0]
  403e58:	4628      	mov	r0, r5
  403e5a:	2104      	movs	r1, #4
  403e5c:	4a0d      	ldr	r2, [pc, #52]	; (403e94 <_zbar_decoder_buf_dump+0x98>)
  403e5e:	47c0      	blx	r8
        decoder_dumplen = dumplen;
    }
    p = decoder_dump +
        snprintf(decoder_dump, 12, "buf[%04x]=",
                 (buflen > 0xffff) ? 0xffff : buflen);
    for(i = 0; i < buflen; i++)
  403e60:	3401      	adds	r4, #1
  403e62:	42bc      	cmp	r4, r7
        p += snprintf(p, 4, "%s%02x", (i) ? " " : "",  buf[i]);
  403e64:	4405      	add	r5, r0
        decoder_dumplen = dumplen;
    }
    p = decoder_dump +
        snprintf(decoder_dump, 12, "buf[%04x]=",
                 (buflen > 0xffff) ? 0xffff : buflen);
    for(i = 0; i < buflen; i++)
  403e66:	d1f0      	bne.n	403e4a <_zbar_decoder_buf_dump+0x4e>
        p += snprintf(p, 4, "%s%02x", (i) ? " " : "",  buf[i]);
    return(decoder_dump);
  403e68:	f8db 0000 	ldr.w	r0, [fp]
}
  403e6c:	b003      	add	sp, #12
  403e6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    char *p;
    int i;

    if(!decoder_dump || dumplen > decoder_dumplen) {
        if(decoder_dump)
            free(decoder_dump);
  403e72:	4628      	mov	r0, r5
  403e74:	4b08      	ldr	r3, [pc, #32]	; (403e98 <_zbar_decoder_buf_dump+0x9c>)
  403e76:	4798      	blx	r3
        decoder_dump = malloc(dumplen);
  403e78:	4620      	mov	r0, r4
  403e7a:	4b08      	ldr	r3, [pc, #32]	; (403e9c <_zbar_decoder_buf_dump+0xa0>)
  403e7c:	4798      	blx	r3
        decoder_dumplen = dumplen;
  403e7e:	f8c8 4000 	str.w	r4, [r8]
    int i;

    if(!decoder_dump || dumplen > decoder_dumplen) {
        if(decoder_dump)
            free(decoder_dump);
        decoder_dump = malloc(dumplen);
  403e82:	f8cb 0000 	str.w	r0, [fp]
        decoder_dumplen = dumplen;
  403e86:	4605      	mov	r5, r0
  403e88:	e7cb      	b.n	403e22 <_zbar_decoder_buf_dump+0x26>
  403e8a:	bf00      	nop
  403e8c:	004110bc 	.word	0x004110bc
  403e90:	00411480 	.word	0x00411480
  403e94:	004110c8 	.word	0x004110c8
  403e98:	004088bd 	.word	0x004088bd
  403e9c:	004088ad 	.word	0x004088ad
  403ea0:	20001278 	.word	0x20001278
  403ea4:	20001274 	.word	0x20001274
  403ea8:	0040963d 	.word	0x0040963d
  403eac:	004110b8 	.word	0x004110b8

00403eb0 <_zbar_decode_ean>:
    dcode->modifiers = 0;
    dbprintf(2, " base=%d j=%d (%s)", base, j, dcode->buf);
}

zbar_symbol_type_t _zbar_decode_ean (zbar_decoder_t *dcode)
{
  403eb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    /* process upto 4 separate passes */
    zbar_symbol_type_t sym = ZBAR_NONE;
    unsigned char pass_idx = dcode->idx & 3;
  403eb4:	7801      	ldrb	r1, [r0, #0]
  403eb6:	f8d0 30b0 	ldr.w	r3, [r0, #176]	; 0xb0
    dcode->modifiers = 0;
    dbprintf(2, " base=%d j=%d (%s)", base, j, dcode->buf);
}

zbar_symbol_type_t _zbar_decode_ean (zbar_decoder_t *dcode)
{
  403eba:	4604      	mov	r4, r0

/* retrieve i-th previous element width */
static inline unsigned get_width (const zbar_decoder_t *dcode,
                                  unsigned char offset)
{
    return(dcode->w[(dcode->idx - offset) & (DECODE_WINDOW - 1)]);
  403ebc:	1f0a      	subs	r2, r1, #4
  403ebe:	f001 000f 	and.w	r0, r1, #15
  403ec2:	eb04 0080 	add.w	r0, r4, r0, lsl #2
  403ec6:	f002 020f 	and.w	r2, r2, #15
  403eca:	eb04 0282 	add.w	r2, r4, r2, lsl #2
  403ece:	6840      	ldr	r0, [r0, #4]
    unsigned char pass_idx = dcode->idx & 3;
    unsigned char i;

    /* update latest character width */
    dcode->ean.s4 -= get_width(dcode, 4);
    dcode->ean.s4 += get_width(dcode, 0);
  403ed0:	6852      	ldr	r2, [r2, #4]
  403ed2:	4403      	add	r3, r0
    dcode->modifiers = 0;
    dbprintf(2, " base=%d j=%d (%s)", base, j, dcode->buf);
}

zbar_symbol_type_t _zbar_decode_ean (zbar_decoder_t *dcode)
{
  403ed4:	b08f      	sub	sp, #60	; 0x3c
    unsigned char pass_idx = dcode->idx & 3;
    unsigned char i;

    /* update latest character width */
    dcode->ean.s4 -= get_width(dcode, 4);
    dcode->ean.s4 += get_width(dcode, 0);
  403ed6:	1a9b      	subs	r3, r3, r2
  403ed8:	f04f 0b00 	mov.w	fp, #0
  403edc:	f8c4 30b0 	str.w	r3, [r4, #176]	; 0xb0

zbar_symbol_type_t _zbar_decode_ean (zbar_decoder_t *dcode)
{
    /* process upto 4 separate passes */
    zbar_symbol_type_t sym = ZBAR_NONE;
    unsigned char pass_idx = dcode->idx & 3;
  403ee0:	f001 0303 	and.w	r3, r1, #3
  403ee4:	930a      	str	r3, [sp, #40]	; 0x28
  403ee6:	46a1      	mov	r9, r4
}

zbar_symbol_type_t _zbar_decode_ean (zbar_decoder_t *dcode)
{
    /* process upto 4 separate passes */
    zbar_symbol_type_t sym = ZBAR_NONE;
  403ee8:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
    dcode->ean.s4 -= get_width(dcode, 4);
    dcode->ean.s4 += get_width(dcode, 0);

    for(i = 0; i < 4; i++) {
        ean_pass_t *pass = &dcode->ean.pass[i];
        if(pass->state >= 0 ||
  403eec:	f899 3068 	ldrb.w	r3, [r9, #104]	; 0x68
  403ef0:	061d      	lsls	r5, r3, #24
  403ef2:	d50f      	bpl.n	403f14 <_zbar_decode_ean+0x64>
  403ef4:	990a      	ldr	r1, [sp, #40]	; 0x28
  403ef6:	fa5f f28b 	uxtb.w	r2, fp
  403efa:	428a      	cmp	r2, r1
  403efc:	d00a      	beq.n	403f14 <_zbar_decode_ean+0x64>
  403efe:	f10b 0b01 	add.w	fp, fp, #1

    /* update latest character width */
    dcode->ean.s4 -= get_width(dcode, 4);
    dcode->ean.s4 += get_width(dcode, 0);

    for(i = 0; i < 4; i++) {
  403f02:	f1bb 0f04 	cmp.w	fp, #4
  403f06:	f109 0910 	add.w	r9, r9, #16
  403f0a:	d1ef      	bne.n	403eec <_zbar_decode_ean+0x3c>
            }
            dbprintf(2, "\n");
        }
    }
    return(sym);
}
  403f0c:	9809      	ldr	r0, [sp, #36]	; 0x24
  403f0e:	b00f      	add	sp, #60	; 0x3c
  403f10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
/* update state for one of 4 parallel passes */
static inline zbar_symbol_type_t decode_pass (zbar_decoder_t *dcode,
                                              ean_pass_t *pass)
{
    unsigned char idx, fwd;
    pass->state++;
  403f14:	b2db      	uxtb	r3, r3
  403f16:	1c5a      	adds	r2, r3, #1
  403f18:	b2d2      	uxtb	r2, r2
  403f1a:	b2d6      	uxtb	r6, r2
  403f1c:	f889 6068 	strb.w	r6, [r9, #104]	; 0x68
  403f20:	7821      	ldrb	r1, [r4, #0]
    idx = pass->state & STATE_IDX;
    fwd = pass->state & 1;

    if(get_color(dcode) == ZBAR_SPACE) {
  403f22:	f011 0a01 	ands.w	sl, r1, #1
static inline zbar_symbol_type_t decode_pass (zbar_decoder_t *dcode,
                                              ean_pass_t *pass)
{
    unsigned char idx, fwd;
    pass->state++;
    idx = pass->state & STATE_IDX;
  403f26:	f002 053f 	and.w	r5, r2, #63	; 0x3f
    fwd = pass->state & 1;

    if(get_color(dcode) == ZBAR_SPACE) {
  403f2a:	d10d      	bne.n	403f48 <_zbar_decode_ean+0x98>
        if(pass->state & STATE_ADDON) {
  403f2c:	0650      	lsls	r0, r2, #25
  403f2e:	f140 80fa 	bpl.w	404126 <_zbar_decode_ean+0x276>
            dbprintf(2, " i=%d", idx);
            if(idx == 0x09 || idx == 0x21) {
  403f32:	2d09      	cmp	r5, #9
  403f34:	f000 821b 	beq.w	40436e <_zbar_decode_ean+0x4be>
  403f38:	2d21      	cmp	r5, #33	; 0x21
  403f3a:	f000 8218 	beq.w	40436e <_zbar_decode_ean+0x4be>
                    dcode->ean.direction = 0;
                    pass->state = -1;
                    return(part);
                }
            }
            if((idx & 7) == 1) {
  403f3e:	f002 0207 	and.w	r2, r2, #7
  403f42:	2a01      	cmp	r2, #1
  403f44:	f000 8357 	beq.w	4045f6 <_zbar_decode_ean+0x746>
	  pass->state = -1;
	  return(part);
        }
    }

    if(pass->state & STATE_ADDON)
  403f48:	0677      	lsls	r7, r6, #25
        idx >>= 1;
  403f4a:	bf48      	it	mi
  403f4c:	086d      	lsrmi	r5, r5, #1

    if(!(idx & 0x03) && idx <= 0x14) {
  403f4e:	07a8      	lsls	r0, r5, #30
  403f50:	d1d5      	bne.n	403efe <_zbar_decode_ean+0x4e>
  403f52:	2d14      	cmp	r5, #20
  403f54:	d8d3      	bhi.n	403efe <_zbar_decode_ean+0x4e>
        signed char code = -1;
        unsigned w = pass->width;
        if(!dcode->ean.s4)
  403f56:	f8d4 30b0 	ldr.w	r3, [r4, #176]	; 0xb0
    if(pass->state & STATE_ADDON)
        idx >>= 1;

    if(!(idx & 0x03) && idx <= 0x14) {
        signed char code = -1;
        unsigned w = pass->width;
  403f5a:	f8d9 006c 	ldr.w	r0, [r9, #108]	; 0x6c
        if(!dcode->ean.s4)
  403f5e:	2b00      	cmp	r3, #0
  403f60:	d0cd      	beq.n	403efe <_zbar_decode_ean+0x4e>
            return(0);
        /* validate guard bars before decoding first char of symbol */
        if(!pass->state) {
  403f62:	2e00      	cmp	r6, #0
  403f64:	f040 829c 	bne.w	4044a0 <_zbar_decode_ean+0x5f0>
  403f68:	1f4d      	subs	r5, r1, #5
  403f6a:	1f8a      	subs	r2, r1, #6
  403f6c:	f005 050f 	and.w	r5, r5, #15
  403f70:	f002 020f 	and.w	r2, r2, #15
  403f74:	eb04 0585 	add.w	r5, r4, r5, lsl #2
  403f78:	eb04 0282 	add.w	r2, r4, r2, lsl #2
  403f7c:	f8d5 e004 	ldr.w	lr, [r5, #4]
  403f80:	6855      	ldr	r5, [r2, #4]
static inline signed char aux_start (zbar_decoder_t *dcode)
{
    /* FIXME NB add-on has no guard in reverse */
    unsigned e1, e2 = get_width(dcode, 5) + get_width(dcode, 6);
    unsigned char E1;
    if(dcode->ean.s4 < 6)
  403f82:	2b05      	cmp	r3, #5
 * using current 4 as possible character
 */
static inline signed char aux_start (zbar_decoder_t *dcode)
{
    /* FIXME NB add-on has no guard in reverse */
    unsigned e1, e2 = get_width(dcode, 5) + get_width(dcode, 6);
  403f84:	eb05 070e 	add.w	r7, r5, lr
    unsigned char E1;
    if(dcode->ean.s4 < 6)
  403f88:	f240 8284 	bls.w	404494 <_zbar_decode_ean+0x5e4>
{
    /* result is encoded number of units - 2
     * (for use as zero based index)
     * or -1 if invalid
     */
    unsigned char E = ((e * n * 2 + 1) / s - 3) / 2;
  403f8c:	ebc7 07c7 	rsb	r7, r7, r7, lsl #3
  403f90:	007f      	lsls	r7, r7, #1
  403f92:	3701      	adds	r7, #1
  403f94:	fbb7 f7f3 	udiv	r7, r7, r3
  403f98:	3f03      	subs	r7, #3
    return((E >= n - 3) ? -1 : E);
  403f9a:	f3c7 0747 	ubfx	r7, r7, #1, #8
  403f9e:	2f03      	cmp	r7, #3
  403fa0:	f200 8278 	bhi.w	404494 <_zbar_decode_ean+0x5e4>
        return(-1);

    if(decode_e(e2, dcode->ean.s4, 7)) {
  403fa4:	2f00      	cmp	r7, #0
  403fa6:	f040 8275 	bne.w	404494 <_zbar_decode_ean+0x5e4>

/* retrieve i-th previous element width */
static inline unsigned get_width (const zbar_decoder_t *dcode,
                                  unsigned char offset)
{
    return(dcode->w[(dcode->idx - offset) & (DECODE_WINDOW - 1)]);
  403faa:	1f0a      	subs	r2, r1, #4
  403fac:	f002 020f 	and.w	r2, r2, #15
  403fb0:	eb04 0282 	add.w	r2, r4, r2, lsl #2
        dbprintf(2, " [invalid any]");
        return(-1);
    }

    e1 = get_width(dcode, 4) + get_width(dcode, 5);
  403fb4:	6852      	ldr	r2, [r2, #4]
  403fb6:	4472      	add	r2, lr
{
    /* result is encoded number of units - 2
     * (for use as zero based index)
     * or -1 if invalid
     */
    unsigned char E = ((e * n * 2 + 1) / s - 3) / 2;
  403fb8:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
  403fbc:	0052      	lsls	r2, r2, #1
  403fbe:	3201      	adds	r2, #1
  403fc0:	fbb2 f2f3 	udiv	r2, r2, r3
  403fc4:	3a03      	subs	r2, #3
    return((E >= n - 3) ? -1 : E);
  403fc6:	f3c2 0247 	ubfx	r2, r2, #1, #8
  403fca:	2a03      	cmp	r2, #3
  403fcc:	f200 825e 	bhi.w	40448c <_zbar_decode_ean+0x5dc>
    E1 = decode_e(e1, dcode->ean.s4, 7);
  403fd0:	b2d7      	uxtb	r7, r2

    if(get_color(dcode) == ZBAR_BAR) {
  403fd2:	f1ba 0f00 	cmp.w	sl, #0
  403fd6:	f040 8359 	bne.w	40468c <_zbar_decode_ean+0x7dc>
        }
        dbprintf(2, " [invalid start]");
        return(-1);
    }

    if(!E1) {
  403fda:	2a00      	cmp	r2, #0
  403fdc:	f040 825a 	bne.w	404494 <_zbar_decode_ean+0x5e4>

/* retrieve i-th previous element width */
static inline unsigned get_width (const zbar_decoder_t *dcode,
                                  unsigned char offset)
{
    return(dcode->w[(dcode->idx - offset) & (DECODE_WINDOW - 1)]);
  403fe0:	1fce      	subs	r6, r1, #7
  403fe2:	f006 060f 	and.w	r6, r6, #15
  403fe6:	eb04 0686 	add.w	r6, r4, r6, lsl #2
  403fea:	f1a1 0208 	sub.w	r2, r1, #8
  403fee:	6876      	ldr	r6, [r6, #4]
        /* attempting decode from SPACE => validate center guard */
        unsigned e3 = get_width(dcode, 6) + get_width(dcode, 7);
  403ff0:	4435      	add	r5, r6
  403ff2:	f002 020f 	and.w	r2, r2, #15
{
    /* result is encoded number of units - 2
     * (for use as zero based index)
     * or -1 if invalid
     */
    unsigned char E = ((e * n * 2 + 1) / s - 3) / 2;
  403ff6:	ebc5 05c5 	rsb	r5, r5, r5, lsl #3

/* retrieve i-th previous element width */
static inline unsigned get_width (const zbar_decoder_t *dcode,
                                  unsigned char offset)
{
    return(dcode->w[(dcode->idx - offset) & (DECODE_WINDOW - 1)]);
  403ffa:	eb04 0282 	add.w	r2, r4, r2, lsl #2
{
    /* result is encoded number of units - 2
     * (for use as zero based index)
     * or -1 if invalid
     */
    unsigned char E = ((e * n * 2 + 1) / s - 3) / 2;
  403ffe:	006d      	lsls	r5, r5, #1
  404000:	3501      	adds	r5, #1
  404002:	fbb5 f5f3 	udiv	r5, r5, r3
  404006:	3d03      	subs	r5, #3
        unsigned e4 = get_width(dcode, 7) + get_width(dcode, 8);
  404008:	6852      	ldr	r2, [r2, #4]
    return((E >= n - 3) ? -1 : E);
  40400a:	f3c5 0547 	ubfx	r5, r5, #1, #8
  40400e:	2d03      	cmp	r5, #3
  404010:	4432      	add	r2, r6
  404012:	f200 823f 	bhi.w	404494 <_zbar_decode_ean+0x5e4>
        if(!decode_e(e3, dcode->ean.s4, 7) &&
  404016:	2d00      	cmp	r5, #0
  404018:	f040 823c 	bne.w	404494 <_zbar_decode_ean+0x5e4>
{
    /* result is encoded number of units - 2
     * (for use as zero based index)
     * or -1 if invalid
     */
    unsigned char E = ((e * n * 2 + 1) / s - 3) / 2;
  40401c:	ebc2 05c2 	rsb	r5, r2, r2, lsl #3
  404020:	006d      	lsls	r5, r5, #1
  404022:	3501      	adds	r5, #1
  404024:	fbb5 f5f3 	udiv	r5, r5, r3
  404028:	3d03      	subs	r5, #3
    return((E >= n - 3) ? -1 : E);
  40402a:	f3c5 0547 	ubfx	r5, r5, #1, #8
  40402e:	2d03      	cmp	r5, #3
  404030:	f200 8230 	bhi.w	404494 <_zbar_decode_ean+0x5e4>
  404034:	2d00      	cmp	r5, #0
  404036:	f040 822d 	bne.w	404494 <_zbar_decode_ean+0x5e4>
        unsigned w = pass->width;
        if(!dcode->ean.s4)
            return(0);
        /* validate guard bars before decoding first char of symbol */
        if(!pass->state) {
            pass->state = aux_start(dcode);
  40403a:	f889 5068 	strb.w	r5, [r9, #104]	; 0x68
            pass->width = dcode->ean.s4;
  40403e:	f8c9 306c 	str.w	r3, [r9, #108]	; 0x6c
            w = check_width(w, dcode->ean.s4);
            if(w)
                pass->width = (pass->width + dcode->ean.s4 * 3) / 4;
        }

        if(w)
  404042:	2800      	cmp	r0, #0
  404044:	f000 82f7 	beq.w	404636 <_zbar_decode_ean+0x786>

/* retrieve i-th previous element width */
static inline unsigned get_width (const zbar_decoder_t *dcode,
                                  unsigned char offset)
{
    return(dcode->w[(dcode->idx - offset) & (DECODE_WINDOW - 1)]);
  404048:	1e8e      	subs	r6, r1, #2
  40404a:	1ec8      	subs	r0, r1, #3
  40404c:	f000 000f 	and.w	r0, r0, #15
  404050:	f006 060f 	and.w	r6, r6, #15
  404054:	1e4a      	subs	r2, r1, #1
  404056:	eb04 0780 	add.w	r7, r4, r0, lsl #2
  40405a:	eb04 0686 	add.w	r6, r4, r6, lsl #2
  40405e:	f002 020f 	and.w	r2, r2, #15
  404062:	eb04 0282 	add.w	r2, r4, r2, lsl #2
  404066:	6870      	ldr	r0, [r6, #4]
    signed char code;

    /* calculate similar edge measurements */
    unsigned e1 = ((get_color(dcode) == ZBAR_BAR)
                   ? get_width(dcode, 0) + get_width(dcode, 1)
                   : get_width(dcode, 2) + get_width(dcode, 3));
  404068:	687f      	ldr	r7, [r7, #4]
  40406a:	f8d2 8004 	ldr.w	r8, [r2, #4]
  40406e:	4407      	add	r7, r0
    unsigned e2 = get_width(dcode, 1) + get_width(dcode, 2);
    dbprintf(2, "\n        e1=%d e2=%d", e1, e2);

    if(dcode->ean.s4 < 6)
  404070:	2b05      	cmp	r3, #5

    /* calculate similar edge measurements */
    unsigned e1 = ((get_color(dcode) == ZBAR_BAR)
                   ? get_width(dcode, 0) + get_width(dcode, 1)
                   : get_width(dcode, 2) + get_width(dcode, 3));
    unsigned e2 = get_width(dcode, 1) + get_width(dcode, 2);
  404072:	eb00 0e08 	add.w	lr, r0, r8
    dbprintf(2, "\n        e1=%d e2=%d", e1, e2);

    if(dcode->ean.s4 < 6)
  404076:	f240 82dc 	bls.w	404632 <_zbar_decode_ean+0x782>
{
    /* result is encoded number of units - 2
     * (for use as zero based index)
     * or -1 if invalid
     */
    unsigned char E = ((e * n * 2 + 1) / s - 3) / 2;
  40407a:	ebc7 02c7 	rsb	r2, r7, r7, lsl #3
  40407e:	0052      	lsls	r2, r2, #1
  404080:	3201      	adds	r2, #1
  404082:	fbb2 f2f3 	udiv	r2, r2, r3
  404086:	3a03      	subs	r2, #3
    return((E >= n - 3) ? -1 : E);
  404088:	f3c2 0247 	ubfx	r2, r2, #1, #8
  40408c:	2a03      	cmp	r2, #3
  40408e:	bf9c      	itt	ls
  404090:	0092      	lslls	r2, r2, #2
  404092:	b2d6      	uxtbls	r6, r2
{
    /* result is encoded number of units - 2
     * (for use as zero based index)
     * or -1 if invalid
     */
    unsigned char E = ((e * n * 2 + 1) / s - 3) / 2;
  404094:	ebce 02ce 	rsb	r2, lr, lr, lsl #3
  404098:	ea4f 0242 	mov.w	r2, r2, lsl #1
  40409c:	f102 0201 	add.w	r2, r2, #1
  4040a0:	fbb2 f2f3 	udiv	r2, r2, r3
  4040a4:	f1a2 0203 	sub.w	r2, r2, #3
    return((E >= n - 3) ? -1 : E);
  4040a8:	f3c2 0247 	ubfx	r2, r2, #1, #8
  4040ac:	bf88      	it	hi
  4040ae:	26fc      	movhi	r6, #252	; 0xfc
  4040b0:	2a03      	cmp	r2, #3
  4040b2:	f200 82be 	bhi.w	404632 <_zbar_decode_ean+0x782>
        return(-1);

    /* create compacted encoding for direct lookup */
    code = ((decode_e(e1, dcode->ean.s4, 7) << 2) |
  4040b6:	4332      	orrs	r2, r6
             decode_e(e2, dcode->ean.s4, 7));
    if(code < 0)
  4040b8:	b256      	sxtb	r6, r2
  4040ba:	2e00      	cmp	r6, #0
  4040bc:	f2c0 82b9 	blt.w	404632 <_zbar_decode_ean+0x782>
       E1E2 == 34 (0110)
       E1E2 == 43 (1001)
       E1E2 == 33 (0101)
       E1E2 == 44 (1010)
     */
    if((1 << code) & 0x0660) {
  4040c0:	f44f 6ccc 	mov.w	ip, #1632	; 0x660
  4040c4:	fa4c fc06 	asr.w	ip, ip, r6
  4040c8:	f01c 0f01 	tst.w	ip, #1
  4040cc:	f000 829a 	beq.w	404604 <_zbar_decode_ean+0x754>
        unsigned char mid, alt;
        /* use sum of bar widths */
        unsigned d2 = ((get_color(dcode) == ZBAR_BAR)
                       ? get_width(dcode, 0) + get_width(dcode, 2)
                       : get_width(dcode, 1) + get_width(dcode, 3));
  4040d0:	f1ba 0f00 	cmp.w	sl, #0
  4040d4:	f040 8371 	bne.w	4047ba <_zbar_decode_ean+0x90a>

/* retrieve i-th previous element width */
static inline unsigned get_width (const zbar_decoder_t *dcode,
                                  unsigned char offset)
{
    return(dcode->w[(dcode->idx - offset) & (DECODE_WINDOW - 1)]);
  4040d8:	3903      	subs	r1, #3
  4040da:	f001 010f 	and.w	r1, r1, #15
  4040de:	eb04 0181 	add.w	r1, r4, r1, lsl #2
  4040e2:	6848      	ldr	r0, [r1, #4]
  4040e4:	4440      	add	r0, r8
        d2 *= 7;
        mid = (((1 << code) & 0x0420)
                             ? 3     /* E1E2 in 33,44 */
  4040e6:	f44f 6184 	mov.w	r1, #1056	; 0x420
  4040ea:	4131      	asrs	r1, r6
        /* use sum of bar widths */
        unsigned d2 = ((get_color(dcode) == ZBAR_BAR)
                       ? get_width(dcode, 0) + get_width(dcode, 2)
                       : get_width(dcode, 1) + get_width(dcode, 3));
        d2 *= 7;
        mid = (((1 << code) & 0x0420)
  4040ec:	f011 0f01 	tst.w	r1, #1
  4040f0:	bf14      	ite	ne
  4040f2:	2103      	movne	r1, #3
  4040f4:	2104      	moveq	r1, #4
        unsigned char mid, alt;
        /* use sum of bar widths */
        unsigned d2 = ((get_color(dcode) == ZBAR_BAR)
                       ? get_width(dcode, 0) + get_width(dcode, 2)
                       : get_width(dcode, 1) + get_width(dcode, 3));
        d2 *= 7;
  4040f6:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
        mid = (((1 << code) & 0x0420)
                             ? 3     /* E1E2 in 33,44 */
                             : 4);   /* E1E2 in 34,43 */
        alt = d2 > (mid * dcode->ean.s4);
  4040fa:	fb03 f101 	mul.w	r1, r3, r1
        if(alt)
  4040fe:	4288      	cmp	r0, r1
  404100:	f240 8280 	bls.w	404604 <_zbar_decode_ean+0x754>
            code = ((code >> 1) & 3) | 0x10; /* compress code space */
  404104:	f3c6 0241 	ubfx	r2, r6, #1, #2
  404108:	f042 0210 	orr.w	r2, r2, #16
        if(w)
            code = decode4(dcode);
        else
            dbprintf(2, " [bad width]");

        if((code < 0 && idx != 0x10) || 
  40410c:	2d00      	cmp	r5, #0
  40410e:	f040 8297 	bne.w	404640 <_zbar_decode_ean+0x790>
  404112:	b256      	sxtb	r6, r2
        else if(code < 0)
            pass->raw[5] = 0xff;
        else {
            dbprintf(2, "\n        raw[%x]=%02x =>", idx >> 2,
                     digits[(unsigned char)code]);
            pass->raw[(idx >> 2) + 1] = digits[(unsigned char)code];
  404114:	eb04 130b 	add.w	r3, r4, fp, lsl #4
  404118:	eb03 0595 	add.w	r5, r3, r5, lsr #2
  40411c:	4bd8      	ldr	r3, [pc, #864]	; (404480 <_zbar_decode_ean+0x5d0>)
  40411e:	5d9b      	ldrb	r3, [r3, r6]
  404120:	f885 3071 	strb.w	r3, [r5, #113]	; 0x71
  404124:	e6eb      	b.n	403efe <_zbar_decode_ean+0x4e>
                dbprintf(2, " +");
                pass->state += 2;
                idx += 2;
            }
        }
        else if((idx == 0x10 || idx == 0x11) &&
  404126:	f1a5 0310 	sub.w	r3, r5, #16
  40412a:	2b01      	cmp	r3, #1
                                              ean_pass_t *pass)
{
    unsigned char idx, fwd;
    pass->state++;
    idx = pass->state & STATE_IDX;
    fwd = pass->state & 1;
  40412c:	f002 0201 	and.w	r2, r2, #1
                dbprintf(2, " +");
                pass->state += 2;
                idx += 2;
            }
        }
        else if((idx == 0x10 || idx == 0x11) &&
  404130:	f240 81de 	bls.w	4044f0 <_zbar_decode_ean+0x640>
            if(part)
                dcode->ean.direction = (pass->state & STATE_REV) != 0;
            pass->state = -1;
            return(part);
        }
	else if((idx == 0x18 || idx == 0x19)) {
  404134:	f1a5 0318 	sub.w	r3, r5, #24
  404138:	2b01      	cmp	r3, #1
  40413a:	f63f af05 	bhi.w	403f48 <_zbar_decode_ean+0x98>
                               unsigned char n)
{
    /* FIXME check that this gets unrolled for constant n */
    unsigned s = 0;
    while(n--)
        s += get_width(dcode, offset++);
  40413e:	1d56      	adds	r6, r2, #5
                                   unsigned char fwd)
{
    signed char code, i;

    /* reference width from previous character */
    unsigned s = calc_s(dcode, 4 + fwd, 4);
  404140:	1d15      	adds	r5, r2, #4

/* retrieve i-th previous element width */
static inline unsigned get_width (const zbar_decoder_t *dcode,
                                  unsigned char offset)
{
    return(dcode->w[(dcode->idx - offset) & (DECODE_WINDOW - 1)]);
  404142:	1b8e      	subs	r6, r1, r6
  404144:	1b4d      	subs	r5, r1, r5
                               unsigned char n)
{
    /* FIXME check that this gets unrolled for constant n */
    unsigned s = 0;
    while(n--)
        s += get_width(dcode, offset++);
  404146:	1d90      	adds	r0, r2, #6

/* retrieve i-th previous element width */
static inline unsigned get_width (const zbar_decoder_t *dcode,
                                  unsigned char offset)
{
    return(dcode->w[(dcode->idx - offset) & (DECODE_WINDOW - 1)]);
  404148:	f006 060f 	and.w	r6, r6, #15
  40414c:	f005 050f 	and.w	r5, r5, #15
  404150:	1a08      	subs	r0, r1, r0
                               unsigned char n)
{
    /* FIXME check that this gets unrolled for constant n */
    unsigned s = 0;
    while(n--)
        s += get_width(dcode, offset++);
  404152:	1dd3      	adds	r3, r2, #7

/* retrieve i-th previous element width */
static inline unsigned get_width (const zbar_decoder_t *dcode,
                                  unsigned char offset)
{
    return(dcode->w[(dcode->idx - offset) & (DECODE_WINDOW - 1)]);
  404154:	eb04 0686 	add.w	r6, r4, r6, lsl #2
  404158:	eb04 0585 	add.w	r5, r4, r5, lsl #2
  40415c:	f000 000f 	and.w	r0, r0, #15
  404160:	1acb      	subs	r3, r1, r3
                               unsigned char n)
{
    /* FIXME check that this gets unrolled for constant n */
    unsigned s = 0;
    while(n--)
        s += get_width(dcode, offset++);
  404162:	686d      	ldr	r5, [r5, #4]
  404164:	6876      	ldr	r6, [r6, #4]

/* retrieve i-th previous element width */
static inline unsigned get_width (const zbar_decoder_t *dcode,
                                  unsigned char offset)
{
    return(dcode->w[(dcode->idx - offset) & (DECODE_WINDOW - 1)]);
  404166:	eb04 0080 	add.w	r0, r4, r0, lsl #2
  40416a:	f003 030f 	and.w	r3, r3, #15
  40416e:	eb04 0383 	add.w	r3, r4, r3, lsl #2
                               unsigned char n)
{
    /* FIXME check that this gets unrolled for constant n */
    unsigned s = 0;
    while(n--)
        s += get_width(dcode, offset++);
  404172:	442e      	add	r6, r5
  404174:	6840      	ldr	r0, [r0, #4]
  404176:	685f      	ldr	r7, [r3, #4]

/* retrieve i-th previous element width */
static inline unsigned get_width (const zbar_decoder_t *dcode,
                                  unsigned char offset)
{
    return(dcode->w[(dcode->idx - offset) & (DECODE_WINDOW - 1)]);
  404178:	f001 050f 	and.w	r5, r1, #15
  40417c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
                               unsigned char n)
{
    /* FIXME check that this gets unrolled for constant n */
    unsigned s = 0;
    while(n--)
        s += get_width(dcode, offset++);
  404180:	4430      	add	r0, r6
  404182:	4438      	add	r0, r7

/* retrieve i-th previous element width */
static inline unsigned get_width (const zbar_decoder_t *dcode,
                                  unsigned char offset)
{
    return(dcode->w[(dcode->idx - offset) & (DECODE_WINDOW - 1)]);
  404184:	685b      	ldr	r3, [r3, #4]

    /* check quiet zone */
    unsigned qz = get_width(dcode, 0);
    if(!fwd && qz && qz <= s * 3 / 4) {
  404186:	2a00      	cmp	r2, #0
  404188:	f000 8295 	beq.w	4046b6 <_zbar_decode_ean+0x806>
        return(-1);
    }

    dbprintf(2, " (");
    code = 0;
    for(i = 1 - fwd; i < 3 + fwd; i++) {
  40418c:	2503      	movs	r5, #3
  40418e:	f04f 0a01 	mov.w	sl, #1
  404192:	2700      	movs	r7, #0
  404194:	f04f 0e00 	mov.w	lr, #0
  404198:	463e      	mov	r6, r7
  40419a:	e005      	b.n	4041a8 <_zbar_decode_ean+0x2f8>
        unsigned e = get_width(dcode, i) + get_width(dcode, i + 1);
        dbprintf(2, " %d", e);
        code = (code << 2) | decode_e(e, s, 7);
        if(code < 0) {
  40419c:	f01e 0f80 	tst.w	lr, #128	; 0x80
  4041a0:	d125      	bne.n	4041ee <_zbar_decode_ean+0x33e>
        return(-1);
    }

    dbprintf(2, " (");
    code = 0;
    for(i = 1 - fwd; i < 3 + fwd; i++) {
  4041a2:	42bd      	cmp	r5, r7
  4041a4:	f2c0 8481 	blt.w	404aaa <_zbar_decode_ean+0xbfa>
        unsigned e = get_width(dcode, i) + get_width(dcode, i + 1);
  4041a8:	b2f3      	uxtb	r3, r6
  4041aa:	1c5e      	adds	r6, r3, #1
  4041ac:	b2f6      	uxtb	r6, r6
  4041ae:	1b8f      	subs	r7, r1, r6
  4041b0:	1acb      	subs	r3, r1, r3
  4041b2:	f003 030f 	and.w	r3, r3, #15
  4041b6:	f007 070f 	and.w	r7, r7, #15
  4041ba:	eb04 0383 	add.w	r3, r4, r3, lsl #2
  4041be:	eb04 0787 	add.w	r7, r4, r7, lsl #2
  4041c2:	685b      	ldr	r3, [r3, #4]
  4041c4:	687f      	ldr	r7, [r7, #4]
  4041c6:	443b      	add	r3, r7
{
    /* result is encoded number of units - 2
     * (for use as zero based index)
     * or -1 if invalid
     */
    unsigned char E = ((e * n * 2 + 1) / s - 3) / 2;
  4041c8:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
  4041cc:	005b      	lsls	r3, r3, #1
  4041ce:	3301      	adds	r3, #1
  4041d0:	fbb3 f3f0 	udiv	r3, r3, r0
  4041d4:	3b03      	subs	r3, #3
    return((E >= n - 3) ? -1 : E);
  4041d6:	f3c3 0347 	ubfx	r3, r3, #1, #8
        dbprintf(2, " %d", e);
        code = (code << 2) | decode_e(e, s, 7);
  4041da:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
  4041de:	f00e 0efc 	and.w	lr, lr, #252	; 0xfc
  4041e2:	b2f6      	uxtb	r6, r6
  4041e4:	2b03      	cmp	r3, #3
  4041e6:	ea43 0e0e 	orr.w	lr, r3, lr
        return(-1);
    }

    dbprintf(2, " (");
    code = 0;
    for(i = 1 - fwd; i < 3 + fwd; i++) {
  4041ea:	b277      	sxtb	r7, r6
  4041ec:	d9d6      	bls.n	40419c <_zbar_decode_ean+0x2ec>
                dcode->ean.direction = (pass->state & STATE_REV) != 0;
            pass->state = -1;
            return(part);
        }
	else if((idx == 0x18 || idx == 0x19)) {
	  zbar_symbol_type_t part = ZBAR_NONE;
  4041ee:	f04f 0800 	mov.w	r8, #0
	  dbprintf(2, " fwd=%x", fwd);
	  if(!aux_end(dcode, fwd) && pass->raw[5] != 0xff)
	    part = ean_part_end7(&dcode->ean, pass, fwd);
	  if(part)
	    dcode->ean.direction = (pass->state & STATE_REV) != 0;
	  pass->state = -1;
  4041f2:	23ff      	movs	r3, #255	; 0xff
  4041f4:	f889 3068 	strb.w	r3, [r9, #104]	; 0x68
        {
            zbar_symbol_type_t part;
            dbprintf(2, "      ean[%x/%x]: idx=%x st=%d s=%d",
                     i, pass_idx, dcode->idx, pass->state, dcode->ean.s4);
            part = decode_pass(dcode, pass);
            if(part) {
  4041f8:	f1b8 0f00 	cmp.w	r8, #0
  4041fc:	f43f ae7f 	beq.w	403efe <_zbar_decode_ean+0x4e>
    /* copy raw data into holding buffer */
    /* if same partial is not consistent, reset others */
    dbprintf(2, " integrate part=%x (%s)", part, dsprintbuf(ean));
    signed char i, j;

    if((ean->left && ((part & ZBAR_SYMBOL) != ean->left)) ||
  404200:	f8b4 30a8 	ldrh.w	r3, [r4, #168]	; 0xa8
  404204:	2b00      	cmp	r3, #0
  404206:	f000 82df 	beq.w	4047c8 <_zbar_decode_ean+0x918>
  40420a:	fa5f f288 	uxtb.w	r2, r8
  40420e:	429a      	cmp	r2, r3
  404210:	f000 82da 	beq.w	4047c8 <_zbar_decode_ean+0x918>
       (ean->right && ((part & ZBAR_SYMBOL) != ean->right))) {
        /* partial mismatch - reset collected parts */
        dbprintf(2, " rst(type %x %x)", ean->left, ean->right);
        ean->left = ean->right = ZBAR_NONE;
  404214:	2300      	movs	r3, #0
  404216:	f8a4 30aa 	strh.w	r3, [r4, #170]	; 0xaa
  40421a:	f8a4 30a8 	strh.w	r3, [r4, #168]	; 0xa8
    }

    if((ean->left || ean->right) &&
  40421e:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
  404222:	b183      	cbz	r3, 404246 <_zbar_decode_ean+0x396>
       !check_width(ean->width, pass->width)) {
  404224:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
static inline int check_width (unsigned w0,
                               unsigned w1)
{
    unsigned dw0 = w0;
    w0 *= 8;
    w1 *= 8;
  404228:	f8d9 206c 	ldr.w	r2, [r9, #108]	; 0x6c

static inline int check_width (unsigned w0,
                               unsigned w1)
{
    unsigned dw0 = w0;
    w0 *= 8;
  40422c:	00d9      	lsls	r1, r3, #3
    w1 *= 8;
    return(w0 - dw0 <= w1 && w1 <= w0 + dw0);
  40422e:	1ac8      	subs	r0, r1, r3
static inline int check_width (unsigned w0,
                               unsigned w1)
{
    unsigned dw0 = w0;
    w0 *= 8;
    w1 *= 8;
  404230:	00d2      	lsls	r2, r2, #3
    return(w0 - dw0 <= w1 && w1 <= w0 + dw0);
  404232:	4282      	cmp	r2, r0
  404234:	d302      	bcc.n	40423c <_zbar_decode_ean+0x38c>
  404236:	440b      	add	r3, r1
  404238:	429a      	cmp	r2, r3
  40423a:	d904      	bls.n	404246 <_zbar_decode_ean+0x396>
    }

    if((ean->left || ean->right) &&
       !check_width(ean->width, pass->width)) {
      dbprintf(2, " rst(width %d)", pass->width);
      ean->left = ean->right = ZBAR_NONE;
  40423c:	2300      	movs	r3, #0
  40423e:	f8a4 30aa 	strh.w	r3, [r4, #170]	; 0xaa
  404242:	f8a4 30a8 	strh.w	r3, [r4, #168]	; 0xa8
    }


    if(part & EAN_RIGHT) {
  404246:	f408 5380 	and.w	r3, r8, #4096	; 0x1000
  40424a:	b29b      	uxth	r3, r3
  40424c:	2b00      	cmp	r3, #0
  40424e:	f000 82c6 	beq.w	4047de <_zbar_decode_ean+0x92e>
        part &= ZBAR_SYMBOL;
  404252:	fa5f f288 	uxtb.w	r2, r8
        j = part - 1;
  404256:	1e56      	subs	r6, r2, #1
        for(i = part >> 1; i; i--, j--) {
  404258:	0853      	lsrs	r3, r2, #1
    }


    if(part & EAN_RIGHT) {
        part &= ZBAR_SYMBOL;
        j = part - 1;
  40425a:	b2f6      	uxtb	r6, r6
        for(i = part >> 1; i; i--, j--) {
  40425c:	b2d9      	uxtb	r1, r3
  40425e:	b313      	cbz	r3, 4042a6 <_zbar_decode_ean+0x3f6>
  404260:	f8b4 70aa 	ldrh.w	r7, [r4, #170]	; 0xaa
  404264:	1af6      	subs	r6, r6, r3
            unsigned char digit = pass->raw[i] & 0xf;
  404266:	eb04 1e0b 	add.w	lr, r4, fp, lsl #4
            if(ean->right && ean->buf[j] != digit) {
                /* partial mismatch - reset collected parts */
                dbprintf(2, " rst(right)");
                ean->left = ean->right = ZBAR_NONE;
  40426a:	f04f 0c00 	mov.w	ip, #0

    if(part & EAN_RIGHT) {
        part &= ZBAR_SYMBOL;
        j = part - 1;
        for(i = part >> 1; i; i--, j--) {
            unsigned char digit = pass->raw[i] & 0xf;
  40426e:	fa4e f081 	sxtab	r0, lr, r1
  404272:	b2cb      	uxtb	r3, r1
  404274:	f890 1070 	ldrb.w	r1, [r0, #112]	; 0x70
  404278:	1998      	adds	r0, r3, r6
  40427a:	b2c0      	uxtb	r0, r0
  40427c:	f001 010f 	and.w	r1, r1, #15
            if(ean->right && ean->buf[j] != digit) {
  404280:	fa44 f580 	sxtab	r5, r4, r0
  404284:	b147      	cbz	r7, 404298 <_zbar_decode_ean+0x3e8>
  404286:	f995 00b8 	ldrsb.w	r0, [r5, #184]	; 0xb8
  40428a:	4288      	cmp	r0, r1
  40428c:	d004      	beq.n	404298 <_zbar_decode_ean+0x3e8>
                /* partial mismatch - reset collected parts */
                dbprintf(2, " rst(right)");
                ean->left = ean->right = ZBAR_NONE;
  40428e:	f8a4 c0aa 	strh.w	ip, [r4, #170]	; 0xaa
  404292:	f8a4 c0a8 	strh.w	ip, [r4, #168]	; 0xa8
  404296:	2700      	movs	r7, #0
  404298:	3b01      	subs	r3, #1
  40429a:	b2db      	uxtb	r3, r3
            }
            ean->buf[j] = digit;
  40429c:	f885 10b8 	strb.w	r1, [r5, #184]	; 0xb8
  4042a0:	b2d9      	uxtb	r1, r3


    if(part & EAN_RIGHT) {
        part &= ZBAR_SYMBOL;
        j = part - 1;
        for(i = part >> 1; i; i--, j--) {
  4042a2:	2b00      	cmp	r3, #0
  4042a4:	d1e3      	bne.n	40426e <_zbar_decode_ean+0x3be>
                ean->left = ean->right = ZBAR_NONE;
            }
            ean->buf[j] = digit;
        }
        ean->right = part;
        part &= ean->left;  /* FIXME!? */
  4042a6:	f8b4 30a8 	ldrh.w	r3, [r4, #168]	; 0xa8
                dbprintf(2, " rst(right)");
                ean->left = ean->right = ZBAR_NONE;
            }
            ean->buf[j] = digit;
        }
        ean->right = part;
  4042aa:	f8a4 20aa 	strh.w	r2, [r4, #170]	; 0xaa
        part &= ean->left;  /* FIXME!? */
  4042ae:	ea02 0803 	and.w	r8, r2, r3
        ean->left = part;
    }
    else
        ean_expand_upce(ean, pass);

    ean->width = pass->width;
  4042b2:	f8d9 306c 	ldr.w	r3, [r9, #108]	; 0x6c
  4042b6:	f8c4 30b4 	str.w	r3, [r4, #180]	; 0xb4

    if(!part)
  4042ba:	f1b8 0f00 	cmp.w	r8, #0
  4042be:	f040 82b6 	bne.w	40482e <_zbar_decode_ean+0x97e>
        part = ZBAR_PARTIAL;
  4042c2:	2301      	movs	r3, #1
  4042c4:	9309      	str	r3, [sp, #36]	; 0x24
                /* update accumulated data from new partial decode */
                sym = integrate_partial(&dcode->ean, pass, part);
                if(sym) {
                    /* this pass valid => _reset_ all passes */
                    dbprintf(2, " sym=%x", sym);
                    dcode->ean.pass[0].state = dcode->ean.pass[1].state = -1;
  4042c6:	23ff      	movs	r3, #255	; 0xff
  4042c8:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
  4042cc:	f884 3068 	strb.w	r3, [r4, #104]	; 0x68
                    dcode->ean.pass[2].state = dcode->ean.pass[3].state = -1;
  4042d0:	f884 3098 	strb.w	r3, [r4, #152]	; 0x98
  4042d4:	f884 3088 	strb.w	r3, [r4, #136]	; 0x88
                    if(sym > ZBAR_PARTIAL) {
  4042d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
  4042da:	2b01      	cmp	r3, #1
  4042dc:	f43f ae0f 	beq.w	403efe <_zbar_decode_ean+0x4e>
  4042e0:	4698      	mov	r8, r3

/* acquire shared state lock */
static inline char acquire_lock (zbar_decoder_t *dcode,
                                 zbar_symbol_type_t req)
{
    if(dcode->lock) {
  4042e2:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
  4042e6:	2b00      	cmp	r3, #0
  4042e8:	f040 82f7 	bne.w	4048da <_zbar_decode_ean+0xa2a>
{
    ean_decoder_t *ean = &dcode->ean;
    zbar_symbol_type_t base = sym;
    int i = 0, j = 0;
    if(base > ZBAR_PARTIAL) {
        if(base == ZBAR_UPCA)
  4042ec:	f1b8 0f0c 	cmp.w	r8, #12
        dbprintf(2, " [locked %d]\n", dcode->lock);
        return(1);
    }
    dcode->lock = req;
  4042f0:	f8a4 8046 	strh.w	r8, [r4, #70]	; 0x46
  4042f4:	f000 842e 	beq.w	404b54 <_zbar_decode_ean+0xca4>
            i = 1;
        else if(base == ZBAR_UPCE) {
  4042f8:	f1b8 0f09 	cmp.w	r8, #9
  4042fc:	f000 84f9 	beq.w	404cf2 <_zbar_decode_ean+0xe42>
            i = 1;
            base--;
        }
        else if(base == ZBAR_ISBN13)
  404300:	f1b8 0f0e 	cmp.w	r8, #14
  404304:	f000 8519 	beq.w	404d3a <_zbar_decode_ean+0xe8a>
            base = ZBAR_EAN13;
        else if(base == ZBAR_ISBN10)
  404308:	f1b8 0f0a 	cmp.w	r8, #10
  40430c:	f000 8529 	beq.w	404d62 <_zbar_decode_ean+0xeb2>
            i = 3;

        if(base == ZBAR_ISBN10 ||
  404310:	f1b8 0f05 	cmp.w	r8, #5
static inline void postprocess (zbar_decoder_t *dcode,
                                zbar_symbol_type_t sym)
{
    ean_decoder_t *ean = &dcode->ean;
    zbar_symbol_type_t base = sym;
    int i = 0, j = 0;
  404314:	4618      	mov	r0, r3
            i = 1;
            base--;
        }
        else if(base == ZBAR_ISBN13)
            base = ZBAR_EAN13;
        else if(base == ZBAR_ISBN10)
  404316:	4643      	mov	r3, r8
            i = 3;

        if(base == ZBAR_ISBN10 ||
  404318:	f200 841e 	bhi.w	404b58 <_zbar_decode_ean+0xca8>
  40431c:	4645      	mov	r5, r8
           (base > ZBAR_EAN5 &&
            !TEST_CFG(ean_get_config(ean, sym), ZBAR_CFG_EMIT_CHECK)))
            base--;

        for(; j < base && ean->buf[i] >= 0; i++, j++)
  40431e:	1823      	adds	r3, r4, r0
  404320:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
  404324:	061a      	lsls	r2, r3, #24
  404326:	f100 8534 	bmi.w	404d92 <_zbar_decode_ean+0xee2>
  40432a:	30b8      	adds	r0, #184	; 0xb8
  40432c:	4420      	add	r0, r4
  40432e:	2200      	movs	r2, #0
  404330:	e004      	b.n	40433c <_zbar_decode_ean+0x48c>
  404332:	f810 3f01 	ldrb.w	r3, [r0, #1]!
  404336:	061f      	lsls	r7, r3, #24
  404338:	f100 843c 	bmi.w	404bb4 <_zbar_decode_ean+0xd04>
            dcode->buf[j] = ean->buf[i] + '0';
  40433c:	6de1      	ldr	r1, [r4, #92]	; 0x5c
  40433e:	3330      	adds	r3, #48	; 0x30
  404340:	548b      	strb	r3, [r1, r2]
        if(base == ZBAR_ISBN10 ||
           (base > ZBAR_EAN5 &&
            !TEST_CFG(ean_get_config(ean, sym), ZBAR_CFG_EMIT_CHECK)))
            base--;

        for(; j < base && ean->buf[i] >= 0; i++, j++)
  404342:	3201      	adds	r2, #1
  404344:	42aa      	cmp	r2, r5
  404346:	d1f4      	bne.n	404332 <_zbar_decode_ean+0x482>
            dcode->buf[j] = ean->buf[i] + '0';

        if(sym == ZBAR_ISBN10 && j == 9 &&
  404348:	f1b8 0f0a 	cmp.w	r8, #10
  40434c:	f000 81d8 	beq.w	404700 <_zbar_decode_ean+0x850>
  404350:	462b      	mov	r3, r5
           TEST_CFG(ean->isbn10_config, ZBAR_CFG_EMIT_CHECK))
            /* recalculate ISBN-10 check digit */
            dcode->buf[j++] = isbn10_calc_checksum(ean);
    }
    dcode->buflen = j;
    dcode->buf[j] = '\0';
  404352:	6de1      	ldr	r1, [r4, #92]	; 0x5c
        if(sym == ZBAR_ISBN10 && j == 9 &&
           TEST_CFG(ean->isbn10_config, ZBAR_CFG_EMIT_CHECK))
            /* recalculate ISBN-10 check digit */
            dcode->buf[j++] = isbn10_calc_checksum(ean);
    }
    dcode->buflen = j;
  404354:	65a3      	str	r3, [r4, #88]	; 0x58
    dcode->buf[j] = '\0';
  404356:	2200      	movs	r2, #0
  404358:	54ca      	strb	r2, [r1, r3]
    dcode->direction = 1 - 2 * ean->direction;
  40435a:	f8d4 30ac 	ldr.w	r3, [r4, #172]	; 0xac
    dcode->modifiers = 0;
  40435e:	64a2      	str	r2, [r4, #72]	; 0x48
            /* recalculate ISBN-10 check digit */
            dcode->buf[j++] = isbn10_calc_checksum(ean);
    }
    dcode->buflen = j;
    dcode->buf[j] = '\0';
    dcode->direction = 1 - 2 * ean->direction;
  404360:	005b      	lsls	r3, r3, #1
  404362:	f1c3 0301 	rsb	r3, r3, #1
    dcode->modifiers = 0;
  404366:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
            /* recalculate ISBN-10 check digit */
            dcode->buf[j++] = isbn10_calc_checksum(ean);
    }
    dcode->buflen = j;
    dcode->buf[j] = '\0';
    dcode->direction = 1 - 2 * ean->direction;
  40436a:	64e3      	str	r3, [r4, #76]	; 0x4c
  40436c:	e5c7      	b.n	403efe <_zbar_decode_ean+0x4e>

/* retrieve i-th previous element width */
static inline unsigned get_width (const zbar_decoder_t *dcode,
                                  unsigned char offset)
{
    return(dcode->w[(dcode->idx - offset) & (DECODE_WINDOW - 1)]);
  40436e:	f001 080f 	and.w	r8, r1, #15
  404372:	f101 3cff 	add.w	ip, r1, #4294967295
  404376:	f1a1 0e02 	sub.w	lr, r1, #2
  40437a:	1ecf      	subs	r7, r1, #3
  40437c:	1f08      	subs	r0, r1, #4
  40437e:	eb04 0888 	add.w	r8, r4, r8, lsl #2
  404382:	f00c 0c0f 	and.w	ip, ip, #15
  404386:	f00e 0e0f 	and.w	lr, lr, #15
  40438a:	f007 070f 	and.w	r7, r7, #15
  40438e:	f000 000f 	and.w	r0, r0, #15
  404392:	eb04 0c8c 	add.w	ip, r4, ip, lsl #2
  404396:	eb04 0e8e 	add.w	lr, r4, lr, lsl #2
  40439a:	eb04 0787 	add.w	r7, r4, r7, lsl #2
  40439e:	eb04 0080 	add.w	r0, r4, r0, lsl #2
  4043a2:	f8d8 8004 	ldr.w	r8, [r8, #4]
  4043a6:	f8dc c004 	ldr.w	ip, [ip, #4]
  4043aa:	f8de e004 	ldr.w	lr, [lr, #4]
  4043ae:	687f      	ldr	r7, [r7, #4]
  4043b0:	6840      	ldr	r0, [r0, #4]
        if(pass->state & STATE_ADDON) {
            dbprintf(2, " i=%d", idx);
            if(idx == 0x09 || idx == 0x21) {
                unsigned qz = get_width(dcode, 0);
                unsigned s = calc_s(dcode, 1, 4);
                zbar_symbol_type_t part = !qz || (qz >= s * 3 / 4);
  4043b2:	f1b8 0f00 	cmp.w	r8, #0
  4043b6:	f040 8109 	bne.w	4045cc <_zbar_decode_ean+0x71c>
                if(part && idx == 0x09)
  4043ba:	2d09      	cmp	r5, #9
  4043bc:	f000 8355 	beq.w	404a6a <_zbar_decode_ean+0xbba>
}

static inline char ean_part_end5 (ean_decoder_t *ean,
                                  ean_pass_t *pass)
{
    if(!TEST_CFG(ean->ean5_config, ZBAR_CFG_ENABLE))
  4043c0:	f8d4 00e4 	ldr.w	r0, [r4, #228]	; 0xe4
  4043c4:	07c0      	lsls	r0, r0, #31
  4043c6:	f140 810a 	bpl.w	4045de <_zbar_decode_ean+0x72e>
        return(ZBAR_NONE);

    /* extract parity bits */
    unsigned char par = ((pass->raw[1] & 0x10) |
  4043ca:	f899 e071 	ldrb.w	lr, [r9, #113]	; 0x71
                         (pass->raw[2] & 0x10) >> 1 |
  4043ce:	f899 0072 	ldrb.w	r0, [r9, #114]	; 0x72
                         (pass->raw[3] & 0x10) >> 2 |
                         (pass->raw[4] & 0x10) >> 3 |
  4043d2:	f899 7074 	ldrb.w	r7, [r9, #116]	; 0x74
    if(!TEST_CFG(ean->ean5_config, ZBAR_CFG_ENABLE))
        return(ZBAR_NONE);

    /* extract parity bits */
    unsigned char par = ((pass->raw[1] & 0x10) |
                         (pass->raw[2] & 0x10) >> 1 |
  4043d6:	900b      	str	r0, [sp, #44]	; 0x2c
                         (pass->raw[3] & 0x10) >> 2 |
                         (pass->raw[4] & 0x10) >> 3 |
  4043d8:	970c      	str	r7, [sp, #48]	; 0x30
                         (pass->raw[5] & 0x10) >> 4);
    /* calculate checksum */
    unsigned char chk = (((pass->raw[1] & 0x0f) +
  4043da:	f00e 070f 	and.w	r7, lr, #15
  4043de:	970d      	str	r7, [sp, #52]	; 0x34
                          (pass->raw[2] & 0x0f) * 3 +
  4043e0:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
        return(ZBAR_NONE);

    /* extract parity bits */
    unsigned char par = ((pass->raw[1] & 0x10) |
                         (pass->raw[2] & 0x10) >> 1 |
                         (pass->raw[3] & 0x10) >> 2 |
  4043e2:	f899 0073 	ldrb.w	r0, [r9, #115]	; 0x73
                         (pass->raw[4] & 0x10) >> 3 |
                         (pass->raw[5] & 0x10) >> 4);
    /* calculate checksum */
    unsigned char chk = (((pass->raw[1] & 0x0f) +
                          (pass->raw[2] & 0x0f) * 3 +
  4043e6:	f007 080f 	and.w	r8, r7, #15
                         (pass->raw[2] & 0x10) >> 1 |
                         (pass->raw[3] & 0x10) >> 2 |
                         (pass->raw[4] & 0x10) >> 3 |
                         (pass->raw[5] & 0x10) >> 4);
    /* calculate checksum */
    unsigned char chk = (((pass->raw[1] & 0x0f) +
  4043ea:	9f0d      	ldr	r7, [sp, #52]	; 0x34
                          (pass->raw[2] & 0x0f) * 3 +
  4043ec:	f04f 0c03 	mov.w	ip, #3
                         (pass->raw[2] & 0x10) >> 1 |
                         (pass->raw[3] & 0x10) >> 2 |
                         (pass->raw[4] & 0x10) >> 3 |
                         (pass->raw[5] & 0x10) >> 4);
    /* calculate checksum */
    unsigned char chk = (((pass->raw[1] & 0x0f) +
  4043f0:	fb1c 7708 	smlabb	r7, ip, r8, r7
                          (pass->raw[2] & 0x0f) * 3 +
                          (pass->raw[3] & 0x0f) +
  4043f4:	f000 080f 	and.w	r8, r0, #15
                         (pass->raw[3] & 0x10) >> 2 |
                         (pass->raw[4] & 0x10) >> 3 |
                         (pass->raw[5] & 0x10) >> 4);
    /* calculate checksum */
    unsigned char chk = (((pass->raw[1] & 0x0f) +
                          (pass->raw[2] & 0x0f) * 3 +
  4043f8:	44b8      	add	r8, r7
    /* extract parity bits */
    unsigned char par = ((pass->raw[1] & 0x10) |
                         (pass->raw[2] & 0x10) >> 1 |
                         (pass->raw[3] & 0x10) >> 2 |
                         (pass->raw[4] & 0x10) >> 3 |
                         (pass->raw[5] & 0x10) >> 4);
  4043fa:	f899 7075 	ldrb.w	r7, [r9, #117]	; 0x75
  4043fe:	970d      	str	r7, [sp, #52]	; 0x34
    if(!TEST_CFG(ean->ean5_config, ZBAR_CFG_ENABLE))
        return(ZBAR_NONE);

    /* extract parity bits */
    unsigned char par = ((pass->raw[1] & 0x10) |
                         (pass->raw[2] & 0x10) >> 1 |
  404400:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
                         (pass->raw[3] & 0x10) >> 2 |
  404402:	f000 0010 	and.w	r0, r0, #16
    if(!TEST_CFG(ean->ean5_config, ZBAR_CFG_ENABLE))
        return(ZBAR_NONE);

    /* extract parity bits */
    unsigned char par = ((pass->raw[1] & 0x10) |
                         (pass->raw[2] & 0x10) >> 1 |
  404406:	f007 0710 	and.w	r7, r7, #16
                         (pass->raw[3] & 0x10) >> 2 |
  40440a:	0880      	lsrs	r0, r0, #2
  40440c:	ea40 0057 	orr.w	r0, r0, r7, lsr #1
                         (pass->raw[5] & 0x10) >> 4);
    /* calculate checksum */
    unsigned char chk = (((pass->raw[1] & 0x0f) +
                          (pass->raw[2] & 0x0f) * 3 +
                          (pass->raw[3] & 0x0f) +
                          (pass->raw[4] & 0x0f) * 3 +
  404410:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  404412:	f007 070f 	and.w	r7, r7, #15
                         (pass->raw[4] & 0x10) >> 3 |
                         (pass->raw[5] & 0x10) >> 4);
    /* calculate checksum */
    unsigned char chk = (((pass->raw[1] & 0x0f) +
                          (pass->raw[2] & 0x0f) * 3 +
                          (pass->raw[3] & 0x0f) +
  404416:	fb1c 8c07 	smlabb	ip, ip, r7, r8
                          (pass->raw[4] & 0x0f) * 3 +
                          (pass->raw[5] & 0x0f)) * 3) % 10;
  40441a:	9f0d      	ldr	r7, [sp, #52]	; 0x34
  40441c:	f007 080f 	and.w	r8, r7, #15

    /* extract parity bits */
    unsigned char par = ((pass->raw[1] & 0x10) |
                         (pass->raw[2] & 0x10) >> 1 |
                         (pass->raw[3] & 0x10) >> 2 |
                         (pass->raw[4] & 0x10) >> 3 |
  404420:	9f0c      	ldr	r7, [sp, #48]	; 0x30
{
    if(!TEST_CFG(ean->ean5_config, ZBAR_CFG_ENABLE))
        return(ZBAR_NONE);

    /* extract parity bits */
    unsigned char par = ((pass->raw[1] & 0x10) |
  404422:	f00e 0e10 	and.w	lr, lr, #16
  404426:	ea40 000e 	orr.w	r0, r0, lr
                         (pass->raw[2] & 0x10) >> 1 |
                         (pass->raw[3] & 0x10) >> 2 |
                         (pass->raw[4] & 0x10) >> 3 |
  40442a:	f007 0e10 	and.w	lr, r7, #16
                         (pass->raw[5] & 0x10) >> 4);
  40442e:	9f0d      	ldr	r7, [sp, #52]	; 0x34
    /* calculate checksum */
    unsigned char chk = (((pass->raw[1] & 0x0f) +
                          (pass->raw[2] & 0x0f) * 3 +
                          (pass->raw[3] & 0x0f) +
                          (pass->raw[4] & 0x0f) * 3 +
  404430:	44c4      	add	ip, r8
                          (pass->raw[5] & 0x0f)) * 3) % 10;
  404432:	f8df 8054 	ldr.w	r8, [pc, #84]	; 404488 <_zbar_decode_ean+0x5d8>
  404436:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
{
    if(!TEST_CFG(ean->ean5_config, ZBAR_CFG_ENABLE))
        return(ZBAR_NONE);

    /* extract parity bits */
    unsigned char par = ((pass->raw[1] & 0x10) |
  40443a:	ea40 00de 	orr.w	r0, r0, lr, lsr #3
                         (pass->raw[2] & 0x10) >> 1 |
                         (pass->raw[3] & 0x10) >> 2 |
                         (pass->raw[4] & 0x10) >> 3 |
                         (pass->raw[5] & 0x10) >> 4);
  40443e:	f3c7 1e00 	ubfx	lr, r7, #4, #1
{
    if(!TEST_CFG(ean->ean5_config, ZBAR_CFG_ENABLE))
        return(ZBAR_NONE);

    /* extract parity bits */
    unsigned char par = ((pass->raw[1] & 0x10) |
  404442:	ea40 000e 	orr.w	r0, r0, lr
    /* calculate checksum */
    unsigned char chk = (((pass->raw[1] & 0x0f) +
                          (pass->raw[2] & 0x0f) * 3 +
                          (pass->raw[3] & 0x0f) +
                          (pass->raw[4] & 0x0f) * 3 +
                          (pass->raw[5] & 0x0f)) * 3) % 10;
  404446:	fb88 780c 	smull	r7, r8, r8, ip
  40444a:	ea4f 77ec 	mov.w	r7, ip, asr #31
  40444e:	ebc7 08a8 	rsb	r8, r7, r8, asr #2

    unsigned char parchk = parity_decode[par >> 1];
  404452:	900b      	str	r0, [sp, #44]	; 0x2c
  404454:	0847      	lsrs	r7, r0, #1
  404456:	480b      	ldr	r0, [pc, #44]	; (404484 <_zbar_decode_ean+0x5d4>)
  404458:	5dc7      	ldrb	r7, [r0, r7]
    if(par & 1)
  40445a:	980b      	ldr	r0, [sp, #44]	; 0x2c
    /* calculate checksum */
    unsigned char chk = (((pass->raw[1] & 0x0f) +
                          (pass->raw[2] & 0x0f) * 3 +
                          (pass->raw[3] & 0x0f) +
                          (pass->raw[4] & 0x0f) * 3 +
                          (pass->raw[5] & 0x0f)) * 3) % 10;
  40445c:	eb08 0888 	add.w	r8, r8, r8, lsl #2

    unsigned char parchk = parity_decode[par >> 1];
    if(par & 1)
  404460:	07c0      	lsls	r0, r0, #31
        parchk >>= 4;
  404462:	bf48      	it	mi
  404464:	093f      	lsrmi	r7, r7, #4
    /* calculate checksum */
    unsigned char chk = (((pass->raw[1] & 0x0f) +
                          (pass->raw[2] & 0x0f) * 3 +
                          (pass->raw[3] & 0x0f) +
                          (pass->raw[4] & 0x0f) * 3 +
                          (pass->raw[5] & 0x0f)) * 3) % 10;
  404466:	ebac 0c48 	sub.w	ip, ip, r8, lsl #1
                         (pass->raw[2] & 0x10) >> 1 |
                         (pass->raw[3] & 0x10) >> 2 |
                         (pass->raw[4] & 0x10) >> 3 |
                         (pass->raw[5] & 0x10) >> 4);
    /* calculate checksum */
    unsigned char chk = (((pass->raw[1] & 0x0f) +
  40446a:	fa5f fe8c 	uxtb.w	lr, ip
    unsigned char parchk = parity_decode[par >> 1];
    if(par & 1)
        parchk >>= 4;
    parchk &= 0xf;
    dbprintf(2, " par=%x(%d) chk=%d", par, parchk, chk);
    if(parchk != chk)
  40446e:	f007 070f 	and.w	r7, r7, #15
  404472:	45be      	cmp	lr, r7
  404474:	f040 80b3 	bne.w	4045de <_zbar_decode_ean+0x72e>
  404478:	f04f 0805 	mov.w	r8, #5
  40447c:	e0b4      	b.n	4045e8 <_zbar_decode_ean+0x738>
  40447e:	bf00      	nop
  404480:	004110f8 	.word	0x004110f8
  404484:	004110d8 	.word	0x004110d8
  404488:	66666667 	.word	0x66666667
    }

    e1 = get_width(dcode, 4) + get_width(dcode, 5);
    E1 = decode_e(e1, dcode->ean.s4, 7);

    if(get_color(dcode) == ZBAR_BAR) {
  40448c:	f1ba 0f00 	cmp.w	sl, #0
  404490:	f040 8125 	bne.w	4046de <_zbar_decode_ean+0x82e>
        unsigned w = pass->width;
        if(!dcode->ean.s4)
            return(0);
        /* validate guard bars before decoding first char of symbol */
        if(!pass->state) {
            pass->state = aux_start(dcode);
  404494:	22ff      	movs	r2, #255	; 0xff
            pass->width = dcode->ean.s4;
  404496:	f8c9 306c 	str.w	r3, [r9, #108]	; 0x6c
        unsigned w = pass->width;
        if(!dcode->ean.s4)
            return(0);
        /* validate guard bars before decoding first char of symbol */
        if(!pass->state) {
            pass->state = aux_start(dcode);
  40449a:	f889 2068 	strb.w	r2, [r9, #104]	; 0x68
  40449e:	e52e      	b.n	403efe <_zbar_decode_ean+0x4e>

static inline int check_width (unsigned w0,
                               unsigned w1)
{
    unsigned dw0 = w0;
    w0 *= 8;
  4044a0:	00c2      	lsls	r2, r0, #3
    w1 *= 8;
    return(w0 - dw0 <= w1 && w1 <= w0 + dw0);
  4044a2:	1a17      	subs	r7, r2, r0
static inline int check_width (unsigned w0,
                               unsigned w1)
{
    unsigned dw0 = w0;
    w0 *= 8;
    w1 *= 8;
  4044a4:	00de      	lsls	r6, r3, #3
    return(w0 - dw0 <= w1 && w1 <= w0 + dw0);
  4044a6:	42be      	cmp	r6, r7
  4044a8:	f0c0 80c3 	bcc.w	404632 <_zbar_decode_ean+0x782>
  4044ac:	4402      	add	r2, r0
  4044ae:	4296      	cmp	r6, r2
  4044b0:	f200 80bf 	bhi.w	404632 <_zbar_decode_ean+0x782>
            idx = pass->state & STATE_IDX;
        }
        else {
            w = check_width(w, dcode->ean.s4);
            if(w)
                pass->width = (pass->width + dcode->ean.s4 * 3) / 4;
  4044b4:	eb03 0243 	add.w	r2, r3, r3, lsl #1
  4044b8:	4402      	add	r2, r0
  4044ba:	0892      	lsrs	r2, r2, #2
  4044bc:	f8c9 206c 	str.w	r2, [r9, #108]	; 0x6c
    signed char code;

    /* calculate similar edge measurements */
    unsigned e1 = ((get_color(dcode) == ZBAR_BAR)
                   ? get_width(dcode, 0) + get_width(dcode, 1)
                   : get_width(dcode, 2) + get_width(dcode, 3));
  4044c0:	f1ba 0f00 	cmp.w	sl, #0
  4044c4:	f43f adc0 	beq.w	404048 <_zbar_decode_ean+0x198>
  4044c8:	1e4e      	subs	r6, r1, #1
  4044ca:	f006 060f 	and.w	r6, r6, #15
  4044ce:	f001 000f 	and.w	r0, r1, #15
  4044d2:	eb04 0080 	add.w	r0, r4, r0, lsl #2
  4044d6:	eb04 0686 	add.w	r6, r4, r6, lsl #2
  4044da:	1e8a      	subs	r2, r1, #2
  4044dc:	f002 020f 	and.w	r2, r2, #15
  4044e0:	6876      	ldr	r6, [r6, #4]
  4044e2:	6847      	ldr	r7, [r0, #4]
  4044e4:	eb04 0282 	add.w	r2, r4, r2, lsl #2
  4044e8:	4437      	add	r7, r6
  4044ea:	46b0      	mov	r8, r6
  4044ec:	6850      	ldr	r0, [r2, #4]
  4044ee:	e5bf      	b.n	404070 <_zbar_decode_ean+0x1c0>
                pass->state += 2;
                idx += 2;
            }
        }
        else if((idx == 0x10 || idx == 0x11) &&
                TEST_CFG(dcode->ean.ean8_config, ZBAR_CFG_ENABLE) &&
  4044f0:	f8d4 30d0 	ldr.w	r3, [r4, #208]	; 0xd0
                dbprintf(2, " +");
                pass->state += 2;
                idx += 2;
            }
        }
        else if((idx == 0x10 || idx == 0x11) &&
  4044f4:	07d8      	lsls	r0, r3, #31
  4044f6:	f57f ae1d 	bpl.w	404134 <_zbar_decode_ean+0x284>
                               unsigned char n)
{
    /* FIXME check that this gets unrolled for constant n */
    unsigned s = 0;
    while(n--)
        s += get_width(dcode, offset++);
  4044fa:	1d57      	adds	r7, r2, #5
                                   unsigned char fwd)
{
    signed char code, i;

    /* reference width from previous character */
    unsigned s = calc_s(dcode, 4 + fwd, 4);
  4044fc:	1d10      	adds	r0, r2, #4

/* retrieve i-th previous element width */
static inline unsigned get_width (const zbar_decoder_t *dcode,
                                  unsigned char offset)
{
    return(dcode->w[(dcode->idx - offset) & (DECODE_WINDOW - 1)]);
  4044fe:	1bcf      	subs	r7, r1, r7
  404500:	1a08      	subs	r0, r1, r0
                               unsigned char n)
{
    /* FIXME check that this gets unrolled for constant n */
    unsigned s = 0;
    while(n--)
        s += get_width(dcode, offset++);
  404502:	1d93      	adds	r3, r2, #6

/* retrieve i-th previous element width */
static inline unsigned get_width (const zbar_decoder_t *dcode,
                                  unsigned char offset)
{
    return(dcode->w[(dcode->idx - offset) & (DECODE_WINDOW - 1)]);
  404504:	f007 070f 	and.w	r7, r7, #15
  404508:	f000 000f 	and.w	r0, r0, #15
  40450c:	1acb      	subs	r3, r1, r3
  40450e:	eb04 0787 	add.w	r7, r4, r7, lsl #2
  404512:	eb04 0080 	add.w	r0, r4, r0, lsl #2
  404516:	f003 030f 	and.w	r3, r3, #15
                               unsigned char n)
{
    /* FIXME check that this gets unrolled for constant n */
    unsigned s = 0;
    while(n--)
        s += get_width(dcode, offset++);
  40451a:	f102 0e07 	add.w	lr, r2, #7

/* retrieve i-th previous element width */
static inline unsigned get_width (const zbar_decoder_t *dcode,
                                  unsigned char offset)
{
    return(dcode->w[(dcode->idx - offset) & (DECODE_WINDOW - 1)]);
  40451e:	eb04 0383 	add.w	r3, r4, r3, lsl #2
                               unsigned char n)
{
    /* FIXME check that this gets unrolled for constant n */
    unsigned s = 0;
    while(n--)
        s += get_width(dcode, offset++);
  404522:	687f      	ldr	r7, [r7, #4]
  404524:	6840      	ldr	r0, [r0, #4]
  404526:	685b      	ldr	r3, [r3, #4]

/* retrieve i-th previous element width */
static inline unsigned get_width (const zbar_decoder_t *dcode,
                                  unsigned char offset)
{
    return(dcode->w[(dcode->idx - offset) & (DECODE_WINDOW - 1)]);
  404528:	ebce 0e01 	rsb	lr, lr, r1
  40452c:	f00e 0e0f 	and.w	lr, lr, #15
  404530:	eb04 0e8e 	add.w	lr, r4, lr, lsl #2
                               unsigned char n)
{
    /* FIXME check that this gets unrolled for constant n */
    unsigned s = 0;
    while(n--)
        s += get_width(dcode, offset++);
  404534:	4438      	add	r0, r7
  404536:	4418      	add	r0, r3

/* retrieve i-th previous element width */
static inline unsigned get_width (const zbar_decoder_t *dcode,
                                  unsigned char offset)
{
    return(dcode->w[(dcode->idx - offset) & (DECODE_WINDOW - 1)]);
  404538:	f001 030f 	and.w	r3, r1, #15
                               unsigned char n)
{
    /* FIXME check that this gets unrolled for constant n */
    unsigned s = 0;
    while(n--)
        s += get_width(dcode, offset++);
  40453c:	f8de 7004 	ldr.w	r7, [lr, #4]

/* retrieve i-th previous element width */
static inline unsigned get_width (const zbar_decoder_t *dcode,
                                  unsigned char offset)
{
    return(dcode->w[(dcode->idx - offset) & (DECODE_WINDOW - 1)]);
  404540:	eb04 0383 	add.w	r3, r4, r3, lsl #2
                               unsigned char n)
{
    /* FIXME check that this gets unrolled for constant n */
    unsigned s = 0;
    while(n--)
        s += get_width(dcode, offset++);
  404544:	eb00 0e07 	add.w	lr, r0, r7

/* retrieve i-th previous element width */
static inline unsigned get_width (const zbar_decoder_t *dcode,
                                  unsigned char offset)
{
    return(dcode->w[(dcode->idx - offset) & (DECODE_WINDOW - 1)]);
  404548:	685b      	ldr	r3, [r3, #4]

    /* check quiet zone */
    unsigned qz = get_width(dcode, 0);
    if(!fwd && qz && qz <= s * 3 / 4) {
  40454a:	2a00      	cmp	r2, #0
  40454c:	f040 8371 	bne.w	404c32 <_zbar_decode_ean+0xd82>
  404550:	b12b      	cbz	r3, 40455e <_zbar_decode_ean+0x6ae>
  404552:	eb0e 004e 	add.w	r0, lr, lr, lsl #1
  404556:	ebb3 0f90 	cmp.w	r3, r0, lsr #2
  40455a:	f67f adeb 	bls.w	404134 <_zbar_decode_ean+0x284>
        return(-1);
    }

    dbprintf(2, " (");
    code = 0;
    for(i = 1 - fwd; i < 3 + fwd; i++) {
  40455e:	f04f 0c02 	mov.w	ip, #2
  404562:	920b      	str	r2, [sp, #44]	; 0x2c
  404564:	2701      	movs	r7, #1
  404566:	2300      	movs	r3, #0
  404568:	4698      	mov	r8, r3
  40456a:	e006      	b.n	40457a <_zbar_decode_ean+0x6ca>
        unsigned e = get_width(dcode, i) + get_width(dcode, i + 1);
        dbprintf(2, " %d", e);
        code = (code << 2) | decode_e(e, s, 7);
        if(code < 0) {
  40456c:	f018 0f80 	tst.w	r8, #128	; 0x80
  404570:	f47f ade0 	bne.w	404134 <_zbar_decode_ean+0x284>
        return(-1);
    }

    dbprintf(2, " (");
    code = 0;
    for(i = 1 - fwd; i < 3 + fwd; i++) {
  404574:	4560      	cmp	r0, ip
  404576:	f300 8362 	bgt.w	404c3e <_zbar_decode_ean+0xd8e>
        unsigned e = get_width(dcode, i) + get_width(dcode, i + 1);
  40457a:	b2fb      	uxtb	r3, r7
  40457c:	1c5f      	adds	r7, r3, #1
  40457e:	b2ff      	uxtb	r7, r7
  404580:	1bc8      	subs	r0, r1, r7
  404582:	1acb      	subs	r3, r1, r3
  404584:	f003 030f 	and.w	r3, r3, #15
  404588:	f000 000f 	and.w	r0, r0, #15
  40458c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
  404590:	eb04 0080 	add.w	r0, r4, r0, lsl #2
  404594:	685b      	ldr	r3, [r3, #4]
  404596:	6840      	ldr	r0, [r0, #4]
  404598:	4418      	add	r0, r3
{
    /* result is encoded number of units - 2
     * (for use as zero based index)
     * or -1 if invalid
     */
    unsigned char E = ((e * n * 2 + 1) / s - 3) / 2;
  40459a:	ebc0 03c0 	rsb	r3, r0, r0, lsl #3
  40459e:	005b      	lsls	r3, r3, #1
  4045a0:	3301      	adds	r3, #1
  4045a2:	fbb3 f3fe 	udiv	r3, r3, lr
  4045a6:	3b03      	subs	r3, #3
    return((E >= n - 3) ? -1 : E);
  4045a8:	f3c3 0347 	ubfx	r3, r3, #1, #8
        dbprintf(2, " %d", e);
        code = (code << 2) | decode_e(e, s, 7);
  4045ac:	ea4f 0888 	mov.w	r8, r8, lsl #2
  4045b0:	f008 08fc 	and.w	r8, r8, #252	; 0xfc
  4045b4:	b2ff      	uxtb	r7, r7
  4045b6:	2b03      	cmp	r3, #3
  4045b8:	ea43 0808 	orr.w	r8, r3, r8
        return(-1);
    }

    dbprintf(2, " (");
    code = 0;
    for(i = 1 - fwd; i < 3 + fwd; i++) {
  4045bc:	b278      	sxtb	r0, r7
  4045be:	d9d5      	bls.n	40456c <_zbar_decode_ean+0x6bc>
            if(part)
                dcode->ean.direction = (pass->state & STATE_REV) != 0;
            pass->state = -1;
            return(part);
        }
	else if((idx == 0x18 || idx == 0x19)) {
  4045c0:	f1a5 0318 	sub.w	r3, r5, #24
  4045c4:	2b01      	cmp	r3, #1
  4045c6:	f63f acbf 	bhi.w	403f48 <_zbar_decode_ean+0x98>
  4045ca:	e5b8      	b.n	40413e <_zbar_decode_ean+0x28e>
                               unsigned char n)
{
    /* FIXME check that this gets unrolled for constant n */
    unsigned s = 0;
    while(n--)
        s += get_width(dcode, offset++);
  4045cc:	44f4      	add	ip, lr
  4045ce:	4467      	add	r7, ip
  4045d0:	4438      	add	r0, r7
        if(pass->state & STATE_ADDON) {
            dbprintf(2, " i=%d", idx);
            if(idx == 0x09 || idx == 0x21) {
                unsigned qz = get_width(dcode, 0);
                unsigned s = calc_s(dcode, 1, 4);
                zbar_symbol_type_t part = !qz || (qz >= s * 3 / 4);
  4045d2:	eb00 0040 	add.w	r0, r0, r0, lsl #1
  4045d6:	ebb8 0f90 	cmp.w	r8, r0, lsr #2
  4045da:	f4bf aeee 	bcs.w	4043ba <_zbar_decode_ean+0x50a>
                if(part && idx == 0x09)
                    part = ean_part_end2(&dcode->ean, pass);
                else if(part)
                    part = ean_part_end5(&dcode->ean, pass);

                if(part || idx == 0x21) {
  4045de:	2d21      	cmp	r5, #33	; 0x21
  4045e0:	f47f acad 	bne.w	403f3e <_zbar_decode_ean+0x8e>
  4045e4:	f04f 0800 	mov.w	r8, #0
                    dcode->ean.direction = 0;
  4045e8:	2200      	movs	r2, #0
                    pass->state = -1;
  4045ea:	23ff      	movs	r3, #255	; 0xff
                    part = ean_part_end2(&dcode->ean, pass);
                else if(part)
                    part = ean_part_end5(&dcode->ean, pass);

                if(part || idx == 0x21) {
                    dcode->ean.direction = 0;
  4045ec:	f8c4 20ac 	str.w	r2, [r4, #172]	; 0xac
                    pass->state = -1;
  4045f0:	f889 3068 	strb.w	r3, [r9, #104]	; 0x68
  4045f4:	e600      	b.n	4041f8 <_zbar_decode_ean+0x348>
                    return(part);
                }
            }
            if((idx & 7) == 1) {
                dbprintf(2, " +");
                pass->state += 2;
  4045f6:	3303      	adds	r3, #3
  4045f8:	b2de      	uxtb	r6, r3
                idx += 2;
  4045fa:	3502      	adds	r5, #2
                    return(part);
                }
            }
            if((idx & 7) == 1) {
                dbprintf(2, " +");
                pass->state += 2;
  4045fc:	f889 6068 	strb.w	r6, [r9, #104]	; 0x68
                idx += 2;
  404600:	b2ed      	uxtb	r5, r5
  404602:	e4a1      	b.n	403f48 <_zbar_decode_ean+0x98>
        if(alt)
            code = ((code >> 1) & 3) | 0x10; /* compress code space */
        dbprintf(2, " (d2=%d(%d) alt=%d)", d2, mid * dcode->ean.s4, alt);
    }
    dbprintf(2, " char=%02x", digits[(unsigned char)code]);
    zassert(code < 0x14, -1, "code=%02x e1=%x e2=%x s4=%x color=%x\n",
  404604:	2e13      	cmp	r6, #19
  404606:	f77f ad81 	ble.w	40410c <_zbar_decode_ean+0x25c>
  40460a:	4ac6      	ldr	r2, [pc, #792]	; (404924 <_zbar_decode_ean+0xa74>)
  40460c:	49c6      	ldr	r1, [pc, #792]	; (404928 <_zbar_decode_ean+0xa78>)
  40460e:	6812      	ldr	r2, [r2, #0]
  404610:	68d0      	ldr	r0, [r2, #12]
  404612:	4ac6      	ldr	r2, [pc, #792]	; (40492c <_zbar_decode_ean+0xa7c>)
  404614:	9602      	str	r6, [sp, #8]
  404616:	e88d 0006 	stmia.w	sp, {r1, r2}
  40461a:	9305      	str	r3, [sp, #20]
  40461c:	9703      	str	r7, [sp, #12]
  40461e:	f8cd e010 	str.w	lr, [sp, #16]
  404622:	f8cd a018 	str.w	sl, [sp, #24]
  404626:	49c2      	ldr	r1, [pc, #776]	; (404930 <_zbar_decode_ean+0xa80>)
  404628:	4ac2      	ldr	r2, [pc, #776]	; (404934 <_zbar_decode_ean+0xa84>)
  40462a:	4ec3      	ldr	r6, [pc, #780]	; (404938 <_zbar_decode_ean+0xa88>)
  40462c:	f240 1301 	movw	r3, #257	; 0x101
  404630:	47b0      	blx	r6
        if(w)
            code = decode4(dcode);
        else
            dbprintf(2, " [bad width]");

        if((code < 0 && idx != 0x10) || 
  404632:	2d10      	cmp	r5, #16
  404634:	d003      	beq.n	40463e <_zbar_decode_ean+0x78e>
           (idx > 0 && (pass->state & STATE_ADDON) && aux_mid(dcode)))
            pass->state = -1;
  404636:	23ff      	movs	r3, #255	; 0xff
  404638:	f889 3068 	strb.w	r3, [r9, #104]	; 0x68
  40463c:	e45f      	b.n	403efe <_zbar_decode_ean+0x4e>
        if(w)
            code = decode4(dcode);
        else
            dbprintf(2, " [bad width]");

        if((code < 0 && idx != 0x10) || 
  40463e:	22ff      	movs	r2, #255	; 0xff
           (idx > 0 && (pass->state & STATE_ADDON) && aux_mid(dcode)))
  404640:	f899 3068 	ldrb.w	r3, [r9, #104]	; 0x68
  404644:	0659      	lsls	r1, r3, #25
  404646:	d51a      	bpl.n	40467e <_zbar_decode_ean+0x7ce>

/* retrieve i-th previous element width */
static inline unsigned get_width (const zbar_decoder_t *dcode,
                                  unsigned char offset)
{
    return(dcode->w[(dcode->idx - offset) & (DECODE_WINDOW - 1)]);
  404648:	7823      	ldrb	r3, [r4, #0]
{
    /* result is encoded number of units - 2
     * (for use as zero based index)
     * or -1 if invalid
     */
    unsigned char E = ((e * n * 2 + 1) / s - 3) / 2;
  40464a:	f8d4 10b0 	ldr.w	r1, [r4, #176]	; 0xb0

/* retrieve i-th previous element width */
static inline unsigned get_width (const zbar_decoder_t *dcode,
                                  unsigned char offset)
{
    return(dcode->w[(dcode->idx - offset) & (DECODE_WINDOW - 1)]);
  40464e:	1f5e      	subs	r6, r3, #5
  404650:	1f18      	subs	r0, r3, #4
  404652:	f000 000f 	and.w	r0, r0, #15
  404656:	f006 030f 	and.w	r3, r6, #15
  40465a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
  40465e:	eb04 0080 	add.w	r0, r4, r0, lsl #2

/* check addon delimiter using current 4 as character
 */
static inline signed char aux_mid (zbar_decoder_t *dcode)
{
    unsigned e = get_width(dcode, 4) + get_width(dcode, 5);
  404662:	685e      	ldr	r6, [r3, #4]
  404664:	6843      	ldr	r3, [r0, #4]
  404666:	4433      	add	r3, r6
{
    /* result is encoded number of units - 2
     * (for use as zero based index)
     * or -1 if invalid
     */
    unsigned char E = ((e * n * 2 + 1) / s - 3) / 2;
  404668:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
  40466c:	005b      	lsls	r3, r3, #1
  40466e:	3301      	adds	r3, #1
  404670:	fbb3 f3f1 	udiv	r3, r3, r1
  404674:	3b03      	subs	r3, #3
    return((E >= n - 3) ? -1 : E);
  404676:	f3c3 0347 	ubfx	r3, r3, #1, #8
            code = decode4(dcode);
        else
            dbprintf(2, " [bad width]");

        if((code < 0 && idx != 0x10) || 
           (idx > 0 && (pass->state & STATE_ADDON) && aux_mid(dcode)))
  40467a:	2b00      	cmp	r3, #0
  40467c:	d1db      	bne.n	404636 <_zbar_decode_ean+0x786>
            pass->state = -1;
        else if(code < 0)
  40467e:	b256      	sxtb	r6, r2
  404680:	1c72      	adds	r2, r6, #1
  404682:	f47f ad47 	bne.w	404114 <_zbar_decode_ean+0x264>
            pass->raw[5] = 0xff;
  404686:	f889 6075 	strb.w	r6, [r9, #117]	; 0x75
  40468a:	e438      	b.n	403efe <_zbar_decode_ean+0x4e>

/* retrieve i-th previous element width */
static inline unsigned get_width (const zbar_decoder_t *dcode,
                                  unsigned char offset)
{
    return(dcode->w[(dcode->idx - offset) & (DECODE_WINDOW - 1)]);
  40468c:	1fca      	subs	r2, r1, #7
  40468e:	f002 020f 	and.w	r2, r2, #15
  404692:	eb04 0282 	add.w	r2, r4, r2, lsl #2
  404696:	6852      	ldr	r2, [r2, #4]
    E1 = decode_e(e1, dcode->ean.s4, 7);

    if(get_color(dcode) == ZBAR_BAR) {
        /* check for quiet-zone */
        unsigned qz = get_width(dcode, 7);
        if(!qz || qz > dcode->ean.s4 * 3 / 4) {
  404698:	b9c2      	cbnz	r2, 4046cc <_zbar_decode_ean+0x81c>
            if(!E1) {
  40469a:	b127      	cbz	r7, 4046a6 <_zbar_decode_ean+0x7f6>
                dbprintf(2, " [valid normal]");
                return(0); /* normal symbol start */
            }
            else if(E1 == 1) {
  40469c:	2f01      	cmp	r7, #1
                dbprintf(2, " [valid add-on]");
                return(STATE_ADDON); /* add-on symbol start */
  40469e:	bf08      	it	eq
  4046a0:	2640      	moveq	r6, #64	; 0x40
        if(!qz || qz > dcode->ean.s4 * 3 / 4) {
            if(!E1) {
                dbprintf(2, " [valid normal]");
                return(0); /* normal symbol start */
            }
            else if(E1 == 1) {
  4046a2:	f47f aef7 	bne.w	404494 <_zbar_decode_ean+0x5e4>
        unsigned w = pass->width;
        if(!dcode->ean.s4)
            return(0);
        /* validate guard bars before decoding first char of symbol */
        if(!pass->state) {
            pass->state = aux_start(dcode);
  4046a6:	f889 6068 	strb.w	r6, [r9, #104]	; 0x68
            pass->width = dcode->ean.s4;
  4046aa:	f8c9 306c 	str.w	r3, [r9, #108]	; 0x6c
            w = check_width(w, dcode->ean.s4);
            if(w)
                pass->width = (pass->width + dcode->ean.s4 * 3) / 4;
        }

        if(w)
  4046ae:	2800      	cmp	r0, #0
  4046b0:	d0c1      	beq.n	404636 <_zbar_decode_ean+0x786>
        if(!pass->state) {
            pass->state = aux_start(dcode);
            pass->width = dcode->ean.s4;
            if(pass->state < 0)
                return(0);
            idx = pass->state & STATE_IDX;
  4046b2:	2500      	movs	r5, #0
  4046b4:	e708      	b.n	4044c8 <_zbar_decode_ean+0x618>
    /* reference width from previous character */
    unsigned s = calc_s(dcode, 4 + fwd, 4);

    /* check quiet zone */
    unsigned qz = get_width(dcode, 0);
    if(!fwd && qz && qz <= s * 3 / 4) {
  4046b6:	b12b      	cbz	r3, 4046c4 <_zbar_decode_ean+0x814>
  4046b8:	eb00 0540 	add.w	r5, r0, r0, lsl #1
  4046bc:	ebb3 0f95 	cmp.w	r3, r5, lsr #2
  4046c0:	f240 82e4 	bls.w	404c8c <_zbar_decode_ean+0xddc>
        return(-1);
    }

    dbprintf(2, " (");
    code = 0;
    for(i = 1 - fwd; i < 3 + fwd; i++) {
  4046c4:	2502      	movs	r5, #2
  4046c6:	4692      	mov	sl, r2
  4046c8:	2701      	movs	r7, #1
  4046ca:	e563      	b.n	404194 <_zbar_decode_ean+0x2e4>
    E1 = decode_e(e1, dcode->ean.s4, 7);

    if(get_color(dcode) == ZBAR_BAR) {
        /* check for quiet-zone */
        unsigned qz = get_width(dcode, 7);
        if(!qz || qz > dcode->ean.s4 * 3 / 4) {
  4046cc:	eb03 0543 	add.w	r5, r3, r3, lsl #1
  4046d0:	ebb2 0f95 	cmp.w	r2, r5, lsr #2
  4046d4:	f67f aede 	bls.w	404494 <_zbar_decode_ean+0x5e4>
            if(!E1) {
  4046d8:	2f00      	cmp	r7, #0
  4046da:	d1df      	bne.n	40469c <_zbar_decode_ean+0x7ec>
  4046dc:	e7e3      	b.n	4046a6 <_zbar_decode_ean+0x7f6>
  4046de:	1fca      	subs	r2, r1, #7
  4046e0:	f002 020f 	and.w	r2, r2, #15
  4046e4:	eb04 0282 	add.w	r2, r4, r2, lsl #2
  4046e8:	6852      	ldr	r2, [r2, #4]
    E1 = decode_e(e1, dcode->ean.s4, 7);

    if(get_color(dcode) == ZBAR_BAR) {
        /* check for quiet-zone */
        unsigned qz = get_width(dcode, 7);
        if(!qz || qz > dcode->ean.s4 * 3 / 4) {
  4046ea:	2a00      	cmp	r2, #0
  4046ec:	f43f aed2 	beq.w	404494 <_zbar_decode_ean+0x5e4>
  4046f0:	eb03 0543 	add.w	r5, r3, r3, lsl #1
  4046f4:	ebb2 0f95 	cmp.w	r2, r5, lsr #2
        dbprintf(2, " [invalid any]");
        return(-1);
    }

    e1 = get_width(dcode, 4) + get_width(dcode, 5);
    E1 = decode_e(e1, dcode->ean.s4, 7);
  4046f8:	f04f 07ff 	mov.w	r7, #255	; 0xff

    if(get_color(dcode) == ZBAR_BAR) {
        /* check for quiet-zone */
        unsigned qz = get_width(dcode, 7);
        if(!qz || qz > dcode->ean.s4 * 3 / 4) {
  4046fc:	d8ce      	bhi.n	40469c <_zbar_decode_ean+0x7ec>
  4046fe:	e6c9      	b.n	404494 <_zbar_decode_ean+0x5e4>
            base--;

        for(; j < base && ean->buf[i] >= 0; i++, j++)
            dcode->buf[j] = ean->buf[i] + '0';

        if(sym == ZBAR_ISBN10 && j == 9 &&
  404700:	2d09      	cmp	r5, #9
  404702:	f47f ae25 	bne.w	404350 <_zbar_decode_ean+0x4a0>
  404706:	f8d4 30dc 	ldr.w	r3, [r4, #220]	; 0xdc
  40470a:	075e      	lsls	r6, r3, #29
  40470c:	f57f ae20 	bpl.w	404350 <_zbar_decode_ean+0x4a0>
static inline unsigned char isbn10_calc_checksum (ean_decoder_t *ean)
{
    unsigned int chk = 0;
    unsigned char w;
    for(w = 10; w > 1; w--) {
        unsigned char d = ean->buf[13 - w];
  404710:	f894 70bb 	ldrb.w	r7, [r4, #187]	; 0xbb
            dcode->buf[j] = ean->buf[i] + '0';

        if(sym == ZBAR_ISBN10 && j == 9 &&
           TEST_CFG(ean->isbn10_config, ZBAR_CFG_EMIT_CHECK))
            /* recalculate ISBN-10 check digit */
            dcode->buf[j++] = isbn10_calc_checksum(ean);
  404714:	6de6      	ldr	r6, [r4, #92]	; 0x5c
{
    unsigned int chk = 0;
    unsigned char w;
    for(w = 10; w > 1; w--) {
        unsigned char d = ean->buf[13 - w];
        zassert(d < 10, '?', "w=%x d=%x chk=%x %s\n", w, d, chk,
  404716:	2f09      	cmp	r7, #9
  404718:	f200 847a 	bhi.w	405010 <_zbar_decode_ean+0x1160>
                _zbar_decoder_buf_dump((void*)ean->buf, 18));
        chk += d * w;
  40471c:	eb07 0287 	add.w	r2, r7, r7, lsl #2
static inline unsigned char isbn10_calc_checksum (ean_decoder_t *ean)
{
    unsigned int chk = 0;
    unsigned char w;
    for(w = 10; w > 1; w--) {
        unsigned char d = ean->buf[13 - w];
  404720:	f894 70bc 	ldrb.w	r7, [r4, #188]	; 0xbc
        zassert(d < 10, '?', "w=%x d=%x chk=%x %s\n", w, d, chk,
  404724:	2f09      	cmp	r7, #9
                _zbar_decoder_buf_dump((void*)ean->buf, 18));
        chk += d * w;
  404726:	ea4f 0a42 	mov.w	sl, r2, lsl #1
{
    unsigned int chk = 0;
    unsigned char w;
    for(w = 10; w > 1; w--) {
        unsigned char d = ean->buf[13 - w];
        zassert(d < 10, '?', "w=%x d=%x chk=%x %s\n", w, d, chk,
  40472a:	f200 8377 	bhi.w	404e1c <_zbar_decode_ean+0xf6c>
                _zbar_decoder_buf_dump((void*)ean->buf, 18));
        chk += d * w;
  40472e:	fb15 aa07 	smlabb	sl, r5, r7, sl
static inline unsigned char isbn10_calc_checksum (ean_decoder_t *ean)
{
    unsigned int chk = 0;
    unsigned char w;
    for(w = 10; w > 1; w--) {
        unsigned char d = ean->buf[13 - w];
  404732:	f894 70bd 	ldrb.w	r7, [r4, #189]	; 0xbd
        zassert(d < 10, '?', "w=%x d=%x chk=%x %s\n", w, d, chk,
  404736:	2f09      	cmp	r7, #9
  404738:	f200 8468 	bhi.w	40500c <_zbar_decode_ean+0x115c>
                _zbar_decoder_buf_dump((void*)ean->buf, 18));
        chk += d * w;
  40473c:	eb0a 0ac7 	add.w	sl, sl, r7, lsl #3
static inline unsigned char isbn10_calc_checksum (ean_decoder_t *ean)
{
    unsigned int chk = 0;
    unsigned char w;
    for(w = 10; w > 1; w--) {
        unsigned char d = ean->buf[13 - w];
  404740:	f894 70be 	ldrb.w	r7, [r4, #190]	; 0xbe
        zassert(d < 10, '?', "w=%x d=%x chk=%x %s\n", w, d, chk,
  404744:	2f09      	cmp	r7, #9
  404746:	f200 845f 	bhi.w	405008 <_zbar_decode_ean+0x1158>
                _zbar_decoder_buf_dump((void*)ean->buf, 18));
        chk += d * w;
  40474a:	2307      	movs	r3, #7
  40474c:	fb13 aa07 	smlabb	sl, r3, r7, sl
static inline unsigned char isbn10_calc_checksum (ean_decoder_t *ean)
{
    unsigned int chk = 0;
    unsigned char w;
    for(w = 10; w > 1; w--) {
        unsigned char d = ean->buf[13 - w];
  404750:	f894 70bf 	ldrb.w	r7, [r4, #191]	; 0xbf
        zassert(d < 10, '?', "w=%x d=%x chk=%x %s\n", w, d, chk,
  404754:	2f09      	cmp	r7, #9
  404756:	f200 8455 	bhi.w	405004 <_zbar_decode_ean+0x1154>
                _zbar_decoder_buf_dump((void*)ean->buf, 18));
        chk += d * w;
  40475a:	2306      	movs	r3, #6
  40475c:	fb13 aa07 	smlabb	sl, r3, r7, sl
static inline unsigned char isbn10_calc_checksum (ean_decoder_t *ean)
{
    unsigned int chk = 0;
    unsigned char w;
    for(w = 10; w > 1; w--) {
        unsigned char d = ean->buf[13 - w];
  404760:	f894 70c0 	ldrb.w	r7, [r4, #192]	; 0xc0
        zassert(d < 10, '?', "w=%x d=%x chk=%x %s\n", w, d, chk,
  404764:	2f09      	cmp	r7, #9
  404766:	f200 844b 	bhi.w	405000 <_zbar_decode_ean+0x1150>
                _zbar_decoder_buf_dump((void*)ean->buf, 18));
        chk += d * w;
  40476a:	2305      	movs	r3, #5
  40476c:	fb13 aa07 	smlabb	sl, r3, r7, sl
static inline unsigned char isbn10_calc_checksum (ean_decoder_t *ean)
{
    unsigned int chk = 0;
    unsigned char w;
    for(w = 10; w > 1; w--) {
        unsigned char d = ean->buf[13 - w];
  404770:	f894 70c1 	ldrb.w	r7, [r4, #193]	; 0xc1
        zassert(d < 10, '?', "w=%x d=%x chk=%x %s\n", w, d, chk,
  404774:	2f09      	cmp	r7, #9
  404776:	f200 8441 	bhi.w	404ffc <_zbar_decode_ean+0x114c>
                _zbar_decoder_buf_dump((void*)ean->buf, 18));
        chk += d * w;
  40477a:	eb0a 0a87 	add.w	sl, sl, r7, lsl #2
static inline unsigned char isbn10_calc_checksum (ean_decoder_t *ean)
{
    unsigned int chk = 0;
    unsigned char w;
    for(w = 10; w > 1; w--) {
        unsigned char d = ean->buf[13 - w];
  40477e:	f894 70c2 	ldrb.w	r7, [r4, #194]	; 0xc2
        zassert(d < 10, '?', "w=%x d=%x chk=%x %s\n", w, d, chk,
  404782:	2f09      	cmp	r7, #9
  404784:	f200 8438 	bhi.w	404ff8 <_zbar_decode_ean+0x1148>
                _zbar_decoder_buf_dump((void*)ean->buf, 18));
        chk += d * w;
  404788:	2303      	movs	r3, #3
  40478a:	fb13 aa07 	smlabb	sl, r3, r7, sl
static inline unsigned char isbn10_calc_checksum (ean_decoder_t *ean)
{
    unsigned int chk = 0;
    unsigned char w;
    for(w = 10; w > 1; w--) {
        unsigned char d = ean->buf[13 - w];
  40478e:	f894 70c3 	ldrb.w	r7, [r4, #195]	; 0xc3
        zassert(d < 10, '?', "w=%x d=%x chk=%x %s\n", w, d, chk,
  404792:	2f09      	cmp	r7, #9
  404794:	f200 8341 	bhi.w	404e1a <_zbar_decode_ean+0xf6a>
                _zbar_decoder_buf_dump((void*)ean->buf, 18));
        chk += d * w;
    }
    chk = chk % 11;
  404798:	4b68      	ldr	r3, [pc, #416]	; (40493c <_zbar_decode_ean+0xa8c>)
    unsigned char w;
    for(w = 10; w > 1; w--) {
        unsigned char d = ean->buf[13 - w];
        zassert(d < 10, '?', "w=%x d=%x chk=%x %s\n", w, d, chk,
                _zbar_decoder_buf_dump((void*)ean->buf, 18));
        chk += d * w;
  40479a:	eb0a 0247 	add.w	r2, sl, r7, lsl #1
    }
    chk = chk % 11;
  40479e:	fba3 1302 	umull	r1, r3, r3, r2
  4047a2:	08db      	lsrs	r3, r3, #3
  4047a4:	eb03 0183 	add.w	r1, r3, r3, lsl #2
  4047a8:	eb03 0341 	add.w	r3, r3, r1, lsl #1
    if(!chk)
  4047ac:	1ad3      	subs	r3, r2, r3
  4047ae:	f040 8351 	bne.w	404e54 <_zbar_decode_ean+0xfa4>
        return('0');
  4047b2:	2330      	movs	r3, #48	; 0x30
            dcode->buf[j] = ean->buf[i] + '0';

        if(sym == ZBAR_ISBN10 && j == 9 &&
           TEST_CFG(ean->isbn10_config, ZBAR_CFG_EMIT_CHECK))
            /* recalculate ISBN-10 check digit */
            dcode->buf[j++] = isbn10_calc_checksum(ean);
  4047b4:	7273      	strb	r3, [r6, #9]
  4047b6:	230a      	movs	r3, #10
  4047b8:	e5cb      	b.n	404352 <_zbar_decode_ean+0x4a2>
  4047ba:	f001 010f 	and.w	r1, r1, #15
  4047be:	eb04 0181 	add.w	r1, r4, r1, lsl #2
    if((1 << code) & 0x0660) {
        unsigned char mid, alt;
        /* use sum of bar widths */
        unsigned d2 = ((get_color(dcode) == ZBAR_BAR)
                       ? get_width(dcode, 0) + get_width(dcode, 2)
                       : get_width(dcode, 1) + get_width(dcode, 3));
  4047c2:	6849      	ldr	r1, [r1, #4]
  4047c4:	4408      	add	r0, r1
  4047c6:	e48e      	b.n	4040e6 <_zbar_decode_ean+0x236>
    /* if same partial is not consistent, reset others */
    dbprintf(2, " integrate part=%x (%s)", part, dsprintbuf(ean));
    signed char i, j;

    if((ean->left && ((part & ZBAR_SYMBOL) != ean->left)) ||
       (ean->right && ((part & ZBAR_SYMBOL) != ean->right))) {
  4047c8:	f8b4 30aa 	ldrh.w	r3, [r4, #170]	; 0xaa
    /* copy raw data into holding buffer */
    /* if same partial is not consistent, reset others */
    dbprintf(2, " integrate part=%x (%s)", part, dsprintbuf(ean));
    signed char i, j;

    if((ean->left && ((part & ZBAR_SYMBOL) != ean->left)) ||
  4047cc:	2b00      	cmp	r3, #0
  4047ce:	f43f ad26 	beq.w	40421e <_zbar_decode_ean+0x36e>
       (ean->right && ((part & ZBAR_SYMBOL) != ean->right))) {
  4047d2:	fa5f f288 	uxtb.w	r2, r8
  4047d6:	429a      	cmp	r2, r3
  4047d8:	f47f ad1c 	bne.w	404214 <_zbar_decode_ean+0x364>
  4047dc:	e51f      	b.n	40421e <_zbar_decode_ean+0x36e>
            ean->buf[j] = digit;
        }
        ean->right = part;
        part &= ean->left;  /* FIXME!? */
    }
    else if(part == ZBAR_EAN13 || part == ZBAR_EAN8) /* EAN_LEFT */ {
  4047de:	f1b8 0f0d 	cmp.w	r8, #13
  4047e2:	f000 80b5 	beq.w	404950 <_zbar_decode_ean+0xaa0>
  4047e6:	f1b8 0f08 	cmp.w	r8, #8
  4047ea:	f000 80b1 	beq.w	404950 <_zbar_decode_ean+0xaa0>
            ean->buf[j] = digit;
        }
        ean->left = part;
        part &= ean->right;  /* FIXME!? */
    }
    else if(part != ZBAR_UPCE) /* add-ons */ {
  4047ee:	f1b8 0f09 	cmp.w	r8, #9
  4047f2:	f000 81e2 	beq.w	404bba <_zbar_decode_ean+0xd0a>
        for(i = part; i > 0; i--)
  4047f6:	fa5f f388 	uxtb.w	r3, r8
  4047fa:	b25a      	sxtb	r2, r3
  4047fc:	2a00      	cmp	r2, #0
            ean->buf[i - 1] = pass->raw[i] & 0xf;
  4047fe:	bfc8      	it	gt
  404800:	eb04 100b 	addgt.w	r0, r4, fp, lsl #4
        }
        ean->left = part;
        part &= ean->right;  /* FIXME!? */
    }
    else if(part != ZBAR_UPCE) /* add-ons */ {
        for(i = part; i > 0; i--)
  404804:	dc01      	bgt.n	40480a <_zbar_decode_ean+0x95a>
  404806:	e00c      	b.n	404822 <_zbar_decode_ean+0x972>
  404808:	b25a      	sxtb	r2, r3
            ean->buf[i - 1] = pass->raw[i] & 0xf;
  40480a:	1881      	adds	r1, r0, r2
  40480c:	3b01      	subs	r3, #1
  40480e:	f891 1070 	ldrb.w	r1, [r1, #112]	; 0x70
  404812:	4422      	add	r2, r4
  404814:	f001 010f 	and.w	r1, r1, #15
        }
        ean->left = part;
        part &= ean->right;  /* FIXME!? */
    }
    else if(part != ZBAR_UPCE) /* add-ons */ {
        for(i = part; i > 0; i--)
  404818:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
            ean->buf[i - 1] = pass->raw[i] & 0xf;
  40481c:	f882 10b7 	strb.w	r1, [r2, #183]	; 0xb7
        }
        ean->left = part;
        part &= ean->right;  /* FIXME!? */
    }
    else if(part != ZBAR_UPCE) /* add-ons */ {
        for(i = part; i > 0; i--)
  404820:	d1f2      	bne.n	404808 <_zbar_decode_ean+0x958>
            ean->buf[i - 1] = pass->raw[i] & 0xf;
        ean->left = part;
  404822:	f8a4 80a8 	strh.w	r8, [r4, #168]	; 0xa8
    }
    else
        ean_expand_upce(ean, pass);

    ean->width = pass->width;
  404826:	f8d9 306c 	ldr.w	r3, [r9, #108]	; 0x6c
  40482a:	f8c4 30b4 	str.w	r3, [r4, #180]	; 0xb4

    if(!part)
        part = ZBAR_PARTIAL;

    if(((part == ZBAR_EAN13 ||
  40482e:	f1b8 0f0d 	cmp.w	r8, #13
  404832:	d003      	beq.n	40483c <_zbar_decode_ean+0x98c>
  404834:	f1b8 0f09 	cmp.w	r8, #9
  404838:	f040 80c3 	bne.w	4049c2 <_zbar_decode_ean+0xb12>
                                               int n)
{
    unsigned char chk = 0;
    unsigned char i, d;
    for(i = 0; i < n; i++) {
        unsigned char d = ean->buf[i];
  40483c:	f894 50b8 	ldrb.w	r5, [r4, #184]	; 0xb8
        zassert(d < 10, -1, "i=%x d=%x chk=%x %s\n", i, d, chk,
  404840:	2d09      	cmp	r5, #9
  404842:	f200 8250 	bhi.w	404ce6 <_zbar_decode_ean+0xe36>
  404846:	f104 00b8 	add.w	r0, r4, #184	; 0xb8
  40484a:	4603      	mov	r3, r0
  40484c:	2701      	movs	r7, #1
  40484e:	e016      	b.n	40487e <_zbar_decode_ean+0x9ce>
                                               int n)
{
    unsigned char chk = 0;
    unsigned char i, d;
    for(i = 0; i < n; i++) {
        unsigned char d = ean->buf[i];
  404850:	f813 6f01 	ldrb.w	r6, [r3, #1]!
        zassert(d < 10, -1, "i=%x d=%x chk=%x %s\n", i, d, chk,
  404854:	2e09      	cmp	r6, #9
                _zbar_decoder_buf_dump((void*)ean->buf, 18));
        chk += d;
  404856:	eb05 0106 	add.w	r1, r5, r6
  40485a:	f107 0701 	add.w	r7, r7, #1
{
    unsigned char chk = 0;
    unsigned char i, d;
    for(i = 0; i < n; i++) {
        unsigned char d = ean->buf[i];
        zassert(d < 10, -1, "i=%x d=%x chk=%x %s\n", i, d, chk,
  40485e:	d840      	bhi.n	4048e2 <_zbar_decode_ean+0xa32>
                _zbar_decoder_buf_dump((void*)ean->buf, 18));
        chk += d;
  404860:	b2cd      	uxtb	r5, r1
        if((i ^ n) & 1) {
  404862:	07d1      	lsls	r1, r2, #31
            chk += d << 1;
  404864:	eb05 0646 	add.w	r6, r5, r6, lsl #1
    for(i = 0; i < n; i++) {
        unsigned char d = ean->buf[i];
        zassert(d < 10, -1, "i=%x d=%x chk=%x %s\n", i, d, chk,
                _zbar_decoder_buf_dump((void*)ean->buf, 18));
        chk += d;
        if((i ^ n) & 1) {
  404868:	d505      	bpl.n	404876 <_zbar_decode_ean+0x9c6>
            chk += d << 1;
  40486a:	f006 05ff 	and.w	r5, r6, #255	; 0xff
            if(chk >= 20)
  40486e:	2d13      	cmp	r5, #19
                chk -= 20;
  404870:	bf84      	itt	hi
  404872:	3d14      	subhi	r5, #20
  404874:	b2ed      	uxtbhi	r5, r5
        }
        if(chk >= 10)
  404876:	2d09      	cmp	r5, #9
            chk -= 10;
  404878:	bf84      	itt	hi
  40487a:	3d0a      	subhi	r5, #10
  40487c:	b2ed      	uxtbhi	r5, r5
static inline signed char ean_verify_checksum (ean_decoder_t *ean,
                                               int n)
{
    unsigned char chk = 0;
    unsigned char i, d;
    for(i = 0; i < n; i++) {
  40487e:	2f0c      	cmp	r7, #12
  404880:	b2fa      	uxtb	r2, r7
  404882:	46ba      	mov	sl, r7
  404884:	d1e4      	bne.n	404850 <_zbar_decode_ean+0x9a0>
                chk -= 20;
        }
        if(chk >= 10)
            chk -= 10;
    }
    zassert(chk < 10, -1, "chk=%x n=%x %s", chk, n,
  404886:	2d09      	cmp	r5, #9
  404888:	f200 828e 	bhi.w	404da8 <_zbar_decode_ean+0xef8>
            _zbar_decoder_buf_dump((void*)ean->buf, 18));
    if(chk)
  40488c:	b115      	cbz	r5, 404894 <_zbar_decode_ean+0x9e4>
        chk = 10 - chk;
  40488e:	f1c5 050a 	rsb	r5, r5, #10
  404892:	b2ed      	uxtb	r5, r5
    d = ean->buf[n];
  404894:	f894 60c4 	ldrb.w	r6, [r4, #196]	; 0xc4
    zassert(d < 10, -1, "n=%x d=%x chk=%x %s\n", n, d, chk,
  404898:	2e09      	cmp	r6, #9
  40489a:	f200 829a 	bhi.w	404dd2 <_zbar_decode_ean+0xf22>
            _zbar_decoder_buf_dump((void*)ean->buf, 18));
    if(chk != d) {
  40489e:	42ae      	cmp	r6, r5
  4048a0:	d136      	bne.n	404910 <_zbar_decode_ean+0xa60>
        else
	  ean->right = ZBAR_NONE;
        part = ZBAR_NONE;
    }

    if(part == ZBAR_EAN13) {
  4048a2:	f1b8 0f0d 	cmp.w	r8, #13
  4048a6:	f040 8090 	bne.w	4049ca <_zbar_decode_ean+0xb1a>
        /* special case EAN-13 subsets */
        if(!ean->buf[0] && TEST_CFG(ean->upca_config, ZBAR_CFG_ENABLE))
  4048aa:	f994 30b8 	ldrsb.w	r3, [r4, #184]	; 0xb8
  4048ae:	2b00      	cmp	r3, #0
  4048b0:	d17e      	bne.n	4049b0 <_zbar_decode_ean+0xb00>
  4048b2:	f8d4 30d4 	ldr.w	r3, [r4, #212]	; 0xd4
  4048b6:	07da      	lsls	r2, r3, #31
  4048b8:	d57a      	bpl.n	4049b0 <_zbar_decode_ean+0xb00>
            part = ZBAR_UPCA;
  4048ba:	f04f 080c 	mov.w	r8, #12
                /* update accumulated data from new partial decode */
                sym = integrate_partial(&dcode->ean, pass, part);
                if(sym) {
                    /* this pass valid => _reset_ all passes */
                    dbprintf(2, " sym=%x", sym);
                    dcode->ean.pass[0].state = dcode->ean.pass[1].state = -1;
  4048be:	23ff      	movs	r3, #255	; 0xff
  4048c0:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
  4048c4:	f884 3068 	strb.w	r3, [r4, #104]	; 0x68
                    dcode->ean.pass[2].state = dcode->ean.pass[3].state = -1;
  4048c8:	f884 3098 	strb.w	r3, [r4, #152]	; 0x98
  4048cc:	f884 3088 	strb.w	r3, [r4, #136]	; 0x88

/* acquire shared state lock */
static inline char acquire_lock (zbar_decoder_t *dcode,
                                 zbar_symbol_type_t req)
{
    if(dcode->lock) {
  4048d0:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
  4048d4:	2b00      	cmp	r3, #0
  4048d6:	f43f ad09 	beq.w	4042ec <_zbar_decode_ean+0x43c>
  4048da:	2301      	movs	r3, #1
  4048dc:	9309      	str	r3, [sp, #36]	; 0x24
  4048de:	f7ff bb0e 	b.w	403efe <_zbar_decode_ean+0x4e>
  4048e2:	462f      	mov	r7, r5
{
    unsigned char chk = 0;
    unsigned char i, d;
    for(i = 0; i < n; i++) {
        unsigned char d = ean->buf[i];
        zassert(d < 10, -1, "i=%x d=%x chk=%x %s\n", i, d, chk,
  4048e4:	4b0f      	ldr	r3, [pc, #60]	; (404924 <_zbar_decode_ean+0xa74>)
  4048e6:	681a      	ldr	r2, [r3, #0]
  4048e8:	4b15      	ldr	r3, [pc, #84]	; (404940 <_zbar_decode_ean+0xa90>)
  4048ea:	68d5      	ldr	r5, [r2, #12]
  4048ec:	2112      	movs	r1, #18
  4048ee:	4798      	blx	r3
  4048f0:	4a14      	ldr	r2, [pc, #80]	; (404944 <_zbar_decode_ean+0xa94>)
  4048f2:	4b15      	ldr	r3, [pc, #84]	; (404948 <_zbar_decode_ean+0xa98>)
  4048f4:	9005      	str	r0, [sp, #20]
  4048f6:	f8cd a008 	str.w	sl, [sp, #8]
  4048fa:	4628      	mov	r0, r5
  4048fc:	9603      	str	r6, [sp, #12]
  4048fe:	9704      	str	r7, [sp, #16]
  404900:	e88d 000c 	stmia.w	sp, {r2, r3}
  404904:	4911      	ldr	r1, [pc, #68]	; (40494c <_zbar_decode_ean+0xa9c>)
  404906:	4a0b      	ldr	r2, [pc, #44]	; (404934 <_zbar_decode_ean+0xa84>)
  404908:	4d0b      	ldr	r5, [pc, #44]	; (404938 <_zbar_decode_ean+0xa88>)
  40490a:	f240 230a 	movw	r3, #522	; 0x20a
  40490e:	47a8      	blx	r5

    if(((part == ZBAR_EAN13 ||
         part == ZBAR_UPCE) && ean_verify_checksum(ean, 12)) ||
       (part == ZBAR_EAN8 && ean_verify_checksum(ean, 7))) {
        /* invalid checksum */
        if(ean->right)
  404910:	f8b4 30aa 	ldrh.w	r3, [r4, #170]	; 0xaa
  404914:	b113      	cbz	r3, 40491c <_zbar_decode_ean+0xa6c>
	  ean->left = ZBAR_NONE;
  404916:	2300      	movs	r3, #0
  404918:	f8a4 30a8 	strh.w	r3, [r4, #168]	; 0xa8
        if(base == ZBAR_ISBN10 ||
           (base > ZBAR_EAN5 &&
            !TEST_CFG(ean_get_config(ean, sym), ZBAR_CFG_EMIT_CHECK)))
            base--;

        for(; j < base && ean->buf[i] >= 0; i++, j++)
  40491c:	2300      	movs	r3, #0
  40491e:	9309      	str	r3, [sp, #36]	; 0x24
  404920:	f7ff baed 	b.w	403efe <_zbar_decode_ean+0x4e>
  404924:	200008b0 	.word	0x200008b0
  404928:	004110d0 	.word	0x004110d0
  40492c:	00411184 	.word	0x00411184
  404930:	0041110c 	.word	0x0041110c
  404934:	00411160 	.word	0x00411160
  404938:	0040814d 	.word	0x0040814d
  40493c:	ba2e8ba3 	.word	0xba2e8ba3
  404940:	00403dfd 	.word	0x00403dfd
  404944:	004112c4 	.word	0x004112c4
  404948:	004111d4 	.word	0x004111d4
  40494c:	00411190 	.word	0x00411190
        }
        ean->right = part;
        part &= ean->left;  /* FIXME!? */
    }
    else if(part == ZBAR_EAN13 || part == ZBAR_EAN8) /* EAN_LEFT */ {
        j = (part - 1) >> 1;
  404950:	f108 31ff 	add.w	r1, r8, #4294967295
        for(i = part >> 1; j >= 0; i--, j--) {
  404954:	2200      	movs	r2, #0
  404956:	f8b4 00a8 	ldrh.w	r0, [r4, #168]	; 0xa8
  40495a:	f3c1 0147 	ubfx	r1, r1, #1, #8
            unsigned char digit = pass->raw[i] & 0xf;
            if(ean->left && ean->buf[j] != digit) {
                /* partial mismatch - reset collected parts */
                dbprintf(2, " rst(left)");
                ean->left = ean->right = ZBAR_NONE;
  40495e:	4617      	mov	r7, r2
        ean->right = part;
        part &= ean->left;  /* FIXME!? */
    }
    else if(part == ZBAR_EAN13 || part == ZBAR_EAN8) /* EAN_LEFT */ {
        j = (part - 1) >> 1;
        for(i = part >> 1; j >= 0; i--, j--) {
  404960:	f3c8 064f 	ubfx	r6, r8, #1, #16
            unsigned char digit = pass->raw[i] & 0xf;
  404964:	eb04 150b 	add.w	r5, r4, fp, lsl #4
  404968:	b2d3      	uxtb	r3, r2
  40496a:	ebc3 0e06 	rsb	lr, r3, r6
  40496e:	fa45 fe8e 	sxtab	lr, r5, lr
  404972:	1acb      	subs	r3, r1, r3
  404974:	f89e e070 	ldrb.w	lr, [lr, #112]	; 0x70
  404978:	b2db      	uxtb	r3, r3
            if(ean->left && ean->buf[j] != digit) {
  40497a:	fa44 fc83 	sxtab	ip, r4, r3
        part &= ean->left;  /* FIXME!? */
    }
    else if(part == ZBAR_EAN13 || part == ZBAR_EAN8) /* EAN_LEFT */ {
        j = (part - 1) >> 1;
        for(i = part >> 1; j >= 0; i--, j--) {
            unsigned char digit = pass->raw[i] & 0xf;
  40497e:	f00e 0e0f 	and.w	lr, lr, #15
            if(ean->left && ean->buf[j] != digit) {
  404982:	b140      	cbz	r0, 404996 <_zbar_decode_ean+0xae6>
  404984:	f99c 30b8 	ldrsb.w	r3, [ip, #184]	; 0xb8
  404988:	4573      	cmp	r3, lr
  40498a:	d004      	beq.n	404996 <_zbar_decode_ean+0xae6>
                /* partial mismatch - reset collected parts */
                dbprintf(2, " rst(left)");
                ean->left = ean->right = ZBAR_NONE;
  40498c:	f8a4 70aa 	strh.w	r7, [r4, #170]	; 0xaa
  404990:	f8a4 70a8 	strh.w	r7, [r4, #168]	; 0xa8
  404994:	2000      	movs	r0, #0
  404996:	3201      	adds	r2, #1
  404998:	1a8b      	subs	r3, r1, r2
        ean->right = part;
        part &= ean->left;  /* FIXME!? */
    }
    else if(part == ZBAR_EAN13 || part == ZBAR_EAN8) /* EAN_LEFT */ {
        j = (part - 1) >> 1;
        for(i = part >> 1; j >= 0; i--, j--) {
  40499a:	061b      	lsls	r3, r3, #24
            if(ean->left && ean->buf[j] != digit) {
                /* partial mismatch - reset collected parts */
                dbprintf(2, " rst(left)");
                ean->left = ean->right = ZBAR_NONE;
            }
            ean->buf[j] = digit;
  40499c:	f88c e0b8 	strb.w	lr, [ip, #184]	; 0xb8
        ean->right = part;
        part &= ean->left;  /* FIXME!? */
    }
    else if(part == ZBAR_EAN13 || part == ZBAR_EAN8) /* EAN_LEFT */ {
        j = (part - 1) >> 1;
        for(i = part >> 1; j >= 0; i--, j--) {
  4049a0:	d5e2      	bpl.n	404968 <_zbar_decode_ean+0xab8>
                ean->left = ean->right = ZBAR_NONE;
            }
            ean->buf[j] = digit;
        }
        ean->left = part;
        part &= ean->right;  /* FIXME!? */
  4049a2:	f8b4 30aa 	ldrh.w	r3, [r4, #170]	; 0xaa
                dbprintf(2, " rst(left)");
                ean->left = ean->right = ZBAR_NONE;
            }
            ean->buf[j] = digit;
        }
        ean->left = part;
  4049a6:	f8a4 80a8 	strh.w	r8, [r4, #168]	; 0xa8
        part &= ean->right;  /* FIXME!? */
  4049aa:	ea08 0803 	and.w	r8, r8, r3
  4049ae:	e480      	b.n	4042b2 <_zbar_decode_ean+0x402>

    if(part == ZBAR_EAN13) {
        /* special case EAN-13 subsets */
        if(!ean->buf[0] && TEST_CFG(ean->upca_config, ZBAR_CFG_ENABLE))
            part = ZBAR_UPCA;
        else if(ean->buf[0] == 9 && ean->buf[1] == 7) {
  4049b0:	f9b4 20b8 	ldrsh.w	r2, [r4, #184]	; 0xb8
  4049b4:	f240 7309 	movw	r3, #1801	; 0x709
  4049b8:	429a      	cmp	r2, r3
  4049ba:	d048      	beq.n	404a4e <_zbar_decode_ean+0xb9e>
        if(!pass->state) {
            pass->state = aux_start(dcode);
            pass->width = dcode->ean.s4;
            if(pass->state < 0)
                return(0);
            idx = pass->state & STATE_IDX;
  4049bc:	f04f 080d 	mov.w	r8, #13
  4049c0:	e77d      	b.n	4048be <_zbar_decode_ean+0xa0e>

    if(!part)
        part = ZBAR_PARTIAL;

    if(((part == ZBAR_EAN13 ||
         part == ZBAR_UPCE) && ean_verify_checksum(ean, 12)) ||
  4049c2:	f1b8 0f08 	cmp.w	r8, #8
  4049c6:	f000 8278 	beq.w	404eba <_zbar_decode_ean+0x100a>
            else if((ean->buf[2] == 8 || ean->buf[2] == 9) &&
               TEST_CFG(ean->isbn13_config, ZBAR_CFG_ENABLE))
                part = ZBAR_ISBN13;
        }
    }
    else if(part == ZBAR_UPCE) {
  4049ca:	f1b8 0f09 	cmp.w	r8, #9
  4049ce:	f040 8270 	bne.w	404eb2 <_zbar_decode_ean+0x1002>
        if(TEST_CFG(ean->upce_config, ZBAR_CFG_ENABLE)) {
  4049d2:	f8d4 30d8 	ldr.w	r3, [r4, #216]	; 0xd8
  4049d6:	07de      	lsls	r6, r3, #31
  4049d8:	d52f      	bpl.n	404a3a <_zbar_decode_ean+0xb8a>
            /* UPC-E was decompressed for checksum verification,
             * but user requested compressed result
             */
            ean->buf[0] = ean->buf[1] = 0;
  4049da:	2300      	movs	r3, #0
  4049dc:	f884 30b9 	strb.w	r3, [r4, #185]	; 0xb9
  4049e0:	f884 30b8 	strb.w	r3, [r4, #184]	; 0xb8
            for(i = 2; i < 8; i++)
                ean->buf[i] = pass->raw[i - 1] & 0xf;
  4049e4:	f899 3071 	ldrb.w	r3, [r9, #113]	; 0x71
  4049e8:	f003 030f 	and.w	r3, r3, #15
  4049ec:	f884 30ba 	strb.w	r3, [r4, #186]	; 0xba
  4049f0:	f899 3072 	ldrb.w	r3, [r9, #114]	; 0x72
  4049f4:	f003 030f 	and.w	r3, r3, #15
  4049f8:	f884 30bb 	strb.w	r3, [r4, #187]	; 0xbb
  4049fc:	f899 3073 	ldrb.w	r3, [r9, #115]	; 0x73
  404a00:	f003 030f 	and.w	r3, r3, #15
  404a04:	f884 30bc 	strb.w	r3, [r4, #188]	; 0xbc
  404a08:	f899 3074 	ldrb.w	r3, [r9, #116]	; 0x74
  404a0c:	f003 030f 	and.w	r3, r3, #15
  404a10:	f884 30bd 	strb.w	r3, [r4, #189]	; 0xbd
  404a14:	f899 3075 	ldrb.w	r3, [r9, #117]	; 0x75
  404a18:	f003 030f 	and.w	r3, r3, #15
  404a1c:	f884 30be 	strb.w	r3, [r4, #190]	; 0xbe
  404a20:	f899 3076 	ldrb.w	r3, [r9, #118]	; 0x76
  404a24:	f003 030f 	and.w	r3, r3, #15
  404a28:	f884 30bf 	strb.w	r3, [r4, #191]	; 0xbf
            ean->buf[i] = pass->raw[0] & 0xf;
  404a2c:	f899 3070 	ldrb.w	r3, [r9, #112]	; 0x70
  404a30:	f003 030f 	and.w	r3, r3, #15
  404a34:	f884 30c0 	strb.w	r3, [r4, #192]	; 0xc0
  404a38:	e741      	b.n	4048be <_zbar_decode_ean+0xa0e>
        }
        else if(TEST_CFG(ean->upca_config, ZBAR_CFG_ENABLE))
  404a3a:	f8d4 30d4 	ldr.w	r3, [r4, #212]	; 0xd4
  404a3e:	07dd      	lsls	r5, r3, #31
  404a40:	f53f af3b 	bmi.w	4048ba <_zbar_decode_ean+0xa0a>
            /* UPC-E reported as UPC-A has priority over EAN-13 */
            part = ZBAR_UPCA;
        else if(TEST_CFG(ean->ean13_config, ZBAR_CFG_ENABLE))
  404a44:	f8d4 30cc 	ldr.w	r3, [r4, #204]	; 0xcc
  404a48:	07d8      	lsls	r0, r3, #31
  404a4a:	d4b7      	bmi.n	4049bc <_zbar_decode_ean+0xb0c>
  404a4c:	e766      	b.n	40491c <_zbar_decode_ean+0xa6c>
        /* special case EAN-13 subsets */
        if(!ean->buf[0] && TEST_CFG(ean->upca_config, ZBAR_CFG_ENABLE))
            part = ZBAR_UPCA;
        else if(ean->buf[0] == 9 && ean->buf[1] == 7) {
            /* ISBN-10 has priority over ISBN-13(?) */
            if(ean->buf[2] == 8 &&
  404a4e:	f994 30ba 	ldrsb.w	r3, [r4, #186]	; 0xba
  404a52:	2b08      	cmp	r3, #8
  404a54:	f000 811d 	beq.w	404c92 <_zbar_decode_ean+0xde2>
               TEST_CFG(ean->isbn10_config, ZBAR_CFG_ENABLE))
                part = ZBAR_ISBN10;
            else if((ean->buf[2] == 8 || ean->buf[2] == 9) &&
  404a58:	2b09      	cmp	r3, #9
  404a5a:	d1af      	bne.n	4049bc <_zbar_decode_ean+0xb0c>
               TEST_CFG(ean->isbn13_config, ZBAR_CFG_ENABLE))
  404a5c:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
        else if(ean->buf[0] == 9 && ean->buf[1] == 7) {
            /* ISBN-10 has priority over ISBN-13(?) */
            if(ean->buf[2] == 8 &&
               TEST_CFG(ean->isbn10_config, ZBAR_CFG_ENABLE))
                part = ZBAR_ISBN10;
            else if((ean->buf[2] == 8 || ean->buf[2] == 9) &&
  404a60:	07df      	lsls	r7, r3, #31
  404a62:	d5ab      	bpl.n	4049bc <_zbar_decode_ean+0xb0c>
               TEST_CFG(ean->isbn13_config, ZBAR_CFG_ENABLE))
                part = ZBAR_ISBN13;
  404a64:	f04f 080e 	mov.w	r8, #14
  404a68:	e729      	b.n	4048be <_zbar_decode_ean+0xa0e>
}

static inline char ean_part_end2 (ean_decoder_t *ean,
                                  ean_pass_t *pass)
{
    if(!TEST_CFG(ean->ean2_config, ZBAR_CFG_ENABLE))
  404a6a:	f8d4 00e8 	ldr.w	r0, [r4, #232]	; 0xe8
  404a6e:	07c7      	lsls	r7, r0, #31
  404a70:	f57f aa65 	bpl.w	403f3e <_zbar_decode_ean+0x8e>
        return(ZBAR_NONE);

    /* extract parity bits */
    unsigned char par = ((pass->raw[1] & 0x10) >> 3 |
  404a74:	f899 7071 	ldrb.w	r7, [r9, #113]	; 0x71
                         (pass->raw[2] & 0x10) >> 4);
  404a78:	f899 e072 	ldrb.w	lr, [r9, #114]	; 0x72
    /* calculate "checksum" */
    unsigned char chk = ~((pass->raw[1] & 0xf) * 10 +
  404a7c:	f007 000f 	and.w	r0, r7, #15
  404a80:	eb00 0c80 	add.w	ip, r0, r0, lsl #2
  404a84:	f00e 000f 	and.w	r0, lr, #15
  404a88:	eb00 004c 	add.w	r0, r0, ip, lsl #1
{
    if(!TEST_CFG(ean->ean2_config, ZBAR_CFG_ENABLE))
        return(ZBAR_NONE);

    /* extract parity bits */
    unsigned char par = ((pass->raw[1] & 0x10) >> 3 |
  404a8c:	f007 0710 	and.w	r7, r7, #16
                         (pass->raw[2] & 0x10) >> 4);
    /* calculate "checksum" */
    unsigned char chk = ~((pass->raw[1] & 0xf) * 10 +
  404a90:	43c0      	mvns	r0, r0
    if(!TEST_CFG(ean->ean2_config, ZBAR_CFG_ENABLE))
        return(ZBAR_NONE);

    /* extract parity bits */
    unsigned char par = ((pass->raw[1] & 0x10) >> 3 |
                         (pass->raw[2] & 0x10) >> 4);
  404a92:	f3ce 1e00 	ubfx	lr, lr, #4, #1
    /* calculate "checksum" */
    unsigned char chk = ~((pass->raw[1] & 0xf) * 10 +
                          (pass->raw[2] & 0xf)) & 0x3;
    dbprintf(2, " par=%x chk=%x", par, chk);
    if(par != chk)
  404a96:	f000 0003 	and.w	r0, r0, #3
  404a9a:	ea4e 07d7 	orr.w	r7, lr, r7, lsr #3
  404a9e:	4287      	cmp	r7, r0
  404aa0:	f47f aa4d 	bne.w	403f3e <_zbar_decode_ean+0x8e>
  404aa4:	f04f 0802 	mov.w	r8, #2
  404aa8:	e59e      	b.n	4045e8 <_zbar_decode_ean+0x738>
            return(part);
        }
	else if((idx == 0x18 || idx == 0x19)) {
	  zbar_symbol_type_t part = ZBAR_NONE;
	  dbprintf(2, " fwd=%x", fwd);
	  if(!aux_end(dcode, fwd) && pass->raw[5] != 0xff)
  404aaa:	f1be 0f00 	cmp.w	lr, #0
  404aae:	f47f ab9e 	bne.w	4041ee <_zbar_decode_ean+0x33e>
  404ab2:	f899 1075 	ldrb.w	r1, [r9, #117]	; 0x75
  404ab6:	29ff      	cmp	r1, #255	; 0xff
  404ab8:	f43f ab99 	beq.w	4041ee <_zbar_decode_ean+0x33e>
static inline zbar_symbol_type_t ean_part_end7 (ean_decoder_t *ean,
                                                ean_pass_t *pass,
                                                unsigned char fwd)
{
    /* calculate parity index */
    unsigned char par = ((fwd)
  404abc:	2a00      	cmp	r2, #0
  404abe:	f000 811b 	beq.w	404cf8 <_zbar_decode_ean+0xe48>
                         ? ((pass->raw[1] & 0x10) << 1 |
                            (pass->raw[2] & 0x10) |
                            (pass->raw[3] & 0x10) >> 1 |
  404ac2:	f899 2073 	ldrb.w	r2, [r9, #115]	; 0x73
                                                ean_pass_t *pass,
                                                unsigned char fwd)
{
    /* calculate parity index */
    unsigned char par = ((fwd)
                         ? ((pass->raw[1] & 0x10) << 1 |
  404ac6:	f899 7071 	ldrb.w	r7, [r9, #113]	; 0x71
static inline zbar_symbol_type_t ean_part_end7 (ean_decoder_t *ean,
                                                ean_pass_t *pass,
                                                unsigned char fwd)
{
    /* calculate parity index */
    unsigned char par = ((fwd)
  404aca:	f899 5072 	ldrb.w	r5, [r9, #114]	; 0x72
                         ? ((pass->raw[1] & 0x10) << 1 |
                            (pass->raw[2] & 0x10) |
                            (pass->raw[3] & 0x10) >> 1 |
                            (pass->raw[4] & 0x10) >> 2 |
  404ace:	f899 0074 	ldrb.w	r0, [r9, #116]	; 0x74
                            (pass->raw[5] & 0x10) >> 3 |
                            (pass->raw[6] & 0x10) >> 4)
  404ad2:	f899 e076 	ldrb.w	lr, [r9, #118]	; 0x76
{
    /* calculate parity index */
    unsigned char par = ((fwd)
                         ? ((pass->raw[1] & 0x10) << 1 |
                            (pass->raw[2] & 0x10) |
                            (pass->raw[3] & 0x10) >> 1 |
  404ad6:	f002 0310 	and.w	r3, r2, #16
  404ada:	085b      	lsrs	r3, r3, #1
                                                ean_pass_t *pass,
                                                unsigned char fwd)
{
    /* calculate parity index */
    unsigned char par = ((fwd)
                         ? ((pass->raw[1] & 0x10) << 1 |
  404adc:	f007 0c10 	and.w	ip, r7, #16
  404ae0:	ea43 0c4c 	orr.w	ip, r3, ip, lsl #1
static inline zbar_symbol_type_t ean_part_end7 (ean_decoder_t *ean,
                                                ean_pass_t *pass,
                                                unsigned char fwd)
{
    /* calculate parity index */
    unsigned char par = ((fwd)
  404ae4:	f005 0310 	and.w	r3, r5, #16
  404ae8:	ea4c 0303 	orr.w	r3, ip, r3
                         ? ((pass->raw[1] & 0x10) << 1 |
                            (pass->raw[2] & 0x10) |
                            (pass->raw[3] & 0x10) >> 1 |
                            (pass->raw[4] & 0x10) >> 2 |
  404aec:	f000 0c10 	and.w	ip, r0, #16
static inline zbar_symbol_type_t ean_part_end7 (ean_decoder_t *ean,
                                                ean_pass_t *pass,
                                                unsigned char fwd)
{
    /* calculate parity index */
    unsigned char par = ((fwd)
  404af0:	ea43 039c 	orr.w	r3, r3, ip, lsr #2
                         ? ((pass->raw[1] & 0x10) << 1 |
                            (pass->raw[2] & 0x10) |
                            (pass->raw[3] & 0x10) >> 1 |
                            (pass->raw[4] & 0x10) >> 2 |
                            (pass->raw[5] & 0x10) >> 3 |
  404af4:	f001 0c10 	and.w	ip, r1, #16
static inline zbar_symbol_type_t ean_part_end7 (ean_decoder_t *ean,
                                                ean_pass_t *pass,
                                                unsigned char fwd)
{
    /* calculate parity index */
    unsigned char par = ((fwd)
  404af8:	ea43 03dc 	orr.w	r3, r3, ip, lsr #3
                         ? ((pass->raw[1] & 0x10) << 1 |
                            (pass->raw[2] & 0x10) |
                            (pass->raw[3] & 0x10) >> 1 |
                            (pass->raw[4] & 0x10) >> 2 |
                            (pass->raw[5] & 0x10) >> 3 |
                            (pass->raw[6] & 0x10) >> 4)
  404afc:	f3ce 1c00 	ubfx	ip, lr, #4, #1
static inline zbar_symbol_type_t ean_part_end7 (ean_decoder_t *ean,
                                                ean_pass_t *pass,
                                                unsigned char fwd)
{
    /* calculate parity index */
    unsigned char par = ((fwd)
  404b00:	ea43 0c0c 	orr.w	ip, r3, ip
                            (pass->raw[4] & 0x10) >> 1 |
                            (pass->raw[5] & 0x10) |
                            (pass->raw[6] & 0x10) << 1));

    /* lookup parity combination */
    pass->raw[0] = parity_decode[par >> 1];
  404b04:	f8df 8544 	ldr.w	r8, [pc, #1348]	; 40504c <_zbar_decode_ean+0x119c>
  404b08:	ea4f 035c 	mov.w	r3, ip, lsr #1
    if(par & 1)
  404b0c:	f01c 0f01 	tst.w	ip, #1
                            (pass->raw[4] & 0x10) >> 1 |
                            (pass->raw[5] & 0x10) |
                            (pass->raw[6] & 0x10) << 1));

    /* lookup parity combination */
    pass->raw[0] = parity_decode[par >> 1];
  404b10:	f818 3003 	ldrb.w	r3, [r8, r3]
    if(par & 1)
        pass->raw[0] >>= 4;
  404b14:	bf18      	it	ne
  404b16:	091b      	lsrne	r3, r3, #4
    pass->raw[0] &= 0xf;
  404b18:	f003 030f 	and.w	r3, r3, #15
    dbprintf(2, " par=%02x(%x)", par, pass->raw[0]);

    if(pass->raw[0] == 0xf)
  404b1c:	2b0f      	cmp	r3, #15

    /* lookup parity combination */
    pass->raw[0] = parity_decode[par >> 1];
    if(par & 1)
        pass->raw[0] >>= 4;
    pass->raw[0] &= 0xf;
  404b1e:	f889 3070 	strb.w	r3, [r9, #112]	; 0x70
    dbprintf(2, " par=%02x(%x)", par, pass->raw[0]);

    if(pass->raw[0] == 0xf)
  404b22:	f43f ab64 	beq.w	4041ee <_zbar_decode_ean+0x33e>
        /* invalid parity combination */
        return(ZBAR_NONE);

    if(!par == fwd) {
  404b26:	fabc f38c 	clz	r3, ip
  404b2a:	095b      	lsrs	r3, r3, #5
  404b2c:	4553      	cmp	r3, sl
  404b2e:	f000 811d 	beq.w	404d6c <_zbar_decode_ean+0xebc>
             pass->raw[0] & 0xf, pass->raw[1] & 0xf,
             pass->raw[2] & 0xf, pass->raw[3] & 0xf,
             pass->raw[4] & 0xf, pass->raw[5] & 0xf,
             pass->raw[6] & 0xf, par);

    if(TEST_CFG(ean->ean13_config, ZBAR_CFG_ENABLE)) {
  404b32:	f8d4 20cc 	ldr.w	r2, [r4, #204]	; 0xcc
  404b36:	07d2      	lsls	r2, r2, #31
  404b38:	f140 8102 	bpl.w	404d40 <_zbar_decode_ean+0xe90>
        if(!par)
  404b3c:	2b00      	cmp	r3, #0
  404b3e:	f000 812b 	beq.w	404d98 <_zbar_decode_ean+0xee8>
            return(ZBAR_EAN13 | EAN_RIGHT);
  404b42:	f241 080d 	movw	r8, #4109	; 0x100d
	  zbar_symbol_type_t part = ZBAR_NONE;
	  dbprintf(2, " fwd=%x", fwd);
	  if(!aux_end(dcode, fwd) && pass->raw[5] != 0xff)
	    part = ean_part_end7(&dcode->ean, pass, fwd);
	  if(part)
	    dcode->ean.direction = (pass->state & STATE_REV) != 0;
  404b46:	f999 3068 	ldrsb.w	r3, [r9, #104]	; 0x68
  404b4a:	0fdb      	lsrs	r3, r3, #31
  404b4c:	f8c4 30ac 	str.w	r3, [r4, #172]	; 0xac
  404b50:	f7ff bb4f 	b.w	4041f2 <_zbar_decode_ean+0x342>
{
    ean_decoder_t *ean = &dcode->ean;
    zbar_symbol_type_t base = sym;
    int i = 0, j = 0;
    if(base > ZBAR_PARTIAL) {
        if(base == ZBAR_UPCA)
  404b54:	4643      	mov	r3, r8
            i = 1;
  404b56:	2001      	movs	r0, #1
}

static inline unsigned ean_get_config (ean_decoder_t *ean,
                                       zbar_symbol_type_t sym)
{
    switch(sym) {
  404b58:	f1a8 0202 	sub.w	r2, r8, #2
  404b5c:	2a0c      	cmp	r2, #12
  404b5e:	d80f      	bhi.n	404b80 <_zbar_decode_ean+0xcd0>
  404b60:	e8df f002 	tbb	[pc, r2]
  404b64:	220e0e25 	.word	0x220e0e25
  404b68:	1c1f0e0e 	.word	0x1c1f0e0e
  404b6c:	13160e19 	.word	0x13160e19
  404b70:	07          	.byte	0x07
  404b71:	00          	.byte	0x00
    case ZBAR_EAN8:   return(ean->ean8_config);
    case ZBAR_UPCE:   return(ean->upce_config);
    case ZBAR_ISBN10: return(ean->isbn10_config);
    case ZBAR_UPCA:   return(ean->upca_config);
    case ZBAR_EAN13:  return(ean->ean13_config);
    case ZBAR_ISBN13: return(ean->isbn13_config);
  404b72:	f8d4 20e0 	ldr.w	r2, [r4, #224]	; 0xe0
            base = ZBAR_EAN13;
        else if(base == ZBAR_ISBN10)
            i = 3;

        if(base == ZBAR_ISBN10 ||
           (base > ZBAR_EAN5 &&
  404b76:	0751      	lsls	r1, r2, #29
  404b78:	d502      	bpl.n	404b80 <_zbar_decode_ean+0xcd0>
  404b7a:	461d      	mov	r5, r3
  404b7c:	f7ff bbcf 	b.w	40431e <_zbar_decode_ean+0x46e>
  404b80:	3b01      	subs	r3, #1
  404b82:	b29b      	uxth	r3, r3
  404b84:	461d      	mov	r5, r3
  404b86:	f7ff bbca 	b.w	40431e <_zbar_decode_ean+0x46e>
    case ZBAR_EAN5:   return(ean->ean5_config);
    case ZBAR_EAN8:   return(ean->ean8_config);
    case ZBAR_UPCE:   return(ean->upce_config);
    case ZBAR_ISBN10: return(ean->isbn10_config);
    case ZBAR_UPCA:   return(ean->upca_config);
    case ZBAR_EAN13:  return(ean->ean13_config);
  404b8a:	f8d4 20cc 	ldr.w	r2, [r4, #204]	; 0xcc
  404b8e:	e7f2      	b.n	404b76 <_zbar_decode_ean+0xcc6>
    case ZBAR_EAN2:   return(ean->ean2_config);
    case ZBAR_EAN5:   return(ean->ean5_config);
    case ZBAR_EAN8:   return(ean->ean8_config);
    case ZBAR_UPCE:   return(ean->upce_config);
    case ZBAR_ISBN10: return(ean->isbn10_config);
    case ZBAR_UPCA:   return(ean->upca_config);
  404b90:	f8d4 20d4 	ldr.w	r2, [r4, #212]	; 0xd4
  404b94:	e7ef      	b.n	404b76 <_zbar_decode_ean+0xcc6>
    switch(sym) {
    case ZBAR_EAN2:   return(ean->ean2_config);
    case ZBAR_EAN5:   return(ean->ean5_config);
    case ZBAR_EAN8:   return(ean->ean8_config);
    case ZBAR_UPCE:   return(ean->upce_config);
    case ZBAR_ISBN10: return(ean->isbn10_config);
  404b96:	f8d4 20dc 	ldr.w	r2, [r4, #220]	; 0xdc
  404b9a:	e7ec      	b.n	404b76 <_zbar_decode_ean+0xcc6>
{
    switch(sym) {
    case ZBAR_EAN2:   return(ean->ean2_config);
    case ZBAR_EAN5:   return(ean->ean5_config);
    case ZBAR_EAN8:   return(ean->ean8_config);
    case ZBAR_UPCE:   return(ean->upce_config);
  404b9c:	f8d4 20d8 	ldr.w	r2, [r4, #216]	; 0xd8
  404ba0:	e7e9      	b.n	404b76 <_zbar_decode_ean+0xcc6>
                                       zbar_symbol_type_t sym)
{
    switch(sym) {
    case ZBAR_EAN2:   return(ean->ean2_config);
    case ZBAR_EAN5:   return(ean->ean5_config);
    case ZBAR_EAN8:   return(ean->ean8_config);
  404ba2:	f8d4 20d0 	ldr.w	r2, [r4, #208]	; 0xd0
  404ba6:	e7e6      	b.n	404b76 <_zbar_decode_ean+0xcc6>
static inline unsigned ean_get_config (ean_decoder_t *ean,
                                       zbar_symbol_type_t sym)
{
    switch(sym) {
    case ZBAR_EAN2:   return(ean->ean2_config);
    case ZBAR_EAN5:   return(ean->ean5_config);
  404ba8:	f8d4 20e4 	ldr.w	r2, [r4, #228]	; 0xe4
  404bac:	e7e3      	b.n	404b76 <_zbar_decode_ean+0xcc6>

static inline unsigned ean_get_config (ean_decoder_t *ean,
                                       zbar_symbol_type_t sym)
{
    switch(sym) {
    case ZBAR_EAN2:   return(ean->ean2_config);
  404bae:	f8d4 20e8 	ldr.w	r2, [r4, #232]	; 0xe8
  404bb2:	e7e0      	b.n	404b76 <_zbar_decode_ean+0xcc6>
            !TEST_CFG(ean_get_config(ean, sym), ZBAR_CFG_EMIT_CHECK)))
            base--;

        for(; j < base && ean->buf[i] >= 0; i++, j++)
  404bb4:	4615      	mov	r5, r2
  404bb6:	f7ff bbc7 	b.w	404348 <_zbar_decode_ean+0x498>
                                    ean_pass_t *pass)
{
    int i = 0;
    unsigned char decode;
    /* parity encoded digit is checksum */
    ean->buf[12] = pass->raw[i++];
  404bba:	f899 2070 	ldrb.w	r2, [r9, #112]	; 0x70
  404bbe:	f884 20c4 	strb.w	r2, [r4, #196]	; 0xc4

    decode = pass->raw[6] & 0xf;
  404bc2:	f899 2076 	ldrb.w	r2, [r9, #118]	; 0x76
    ean->buf[0] = 0;
  404bc6:	f884 30b8 	strb.w	r3, [r4, #184]	; 0xb8
    ean->buf[1] = 0;
  404bca:	f884 30b9 	strb.w	r3, [r4, #185]	; 0xb9
    ean->buf[2] = pass->raw[i++] & 0xf;
  404bce:	f899 1071 	ldrb.w	r1, [r9, #113]	; 0x71
  404bd2:	f001 010f 	and.w	r1, r1, #15
  404bd6:	f884 10ba 	strb.w	r1, [r4, #186]	; 0xba
    ean->buf[3] = pass->raw[i++] & 0xf;
  404bda:	f899 1072 	ldrb.w	r1, [r9, #114]	; 0x72
    int i = 0;
    unsigned char decode;
    /* parity encoded digit is checksum */
    ean->buf[12] = pass->raw[i++];

    decode = pass->raw[6] & 0xf;
  404bde:	f002 020f 	and.w	r2, r2, #15
    ean->buf[0] = 0;
    ean->buf[1] = 0;
    ean->buf[2] = pass->raw[i++] & 0xf;
    ean->buf[3] = pass->raw[i++] & 0xf;
  404be2:	f001 010f 	and.w	r1, r1, #15
    ean->buf[4] = (decode < 3) ? decode : pass->raw[i++] & 0xf;
  404be6:	2a02      	cmp	r2, #2

    decode = pass->raw[6] & 0xf;
    ean->buf[0] = 0;
    ean->buf[1] = 0;
    ean->buf[2] = pass->raw[i++] & 0xf;
    ean->buf[3] = pass->raw[i++] & 0xf;
  404be8:	f884 10bb 	strb.w	r1, [r4, #187]	; 0xbb
    ean->buf[4] = (decode < 3) ? decode : pass->raw[i++] & 0xf;
  404bec:	d859      	bhi.n	404ca2 <_zbar_decode_ean+0xdf2>
    ean->buf[5] = (decode < 4) ? 0 : pass->raw[i++] & 0xf;
    ean->buf[6] = (decode < 5) ? 0 : pass->raw[i++] & 0xf;
    ean->buf[7] = 0;
    ean->buf[8] = 0;
    ean->buf[9] = (decode < 3) ? pass->raw[i++] & 0xf : 0;
  404bee:	ea4f 110b 	mov.w	r1, fp, lsl #4
  404bf2:	1860      	adds	r0, r4, r1
    decode = pass->raw[6] & 0xf;
    ean->buf[0] = 0;
    ean->buf[1] = 0;
    ean->buf[2] = pass->raw[i++] & 0xf;
    ean->buf[3] = pass->raw[i++] & 0xf;
    ean->buf[4] = (decode < 3) ? decode : pass->raw[i++] & 0xf;
  404bf4:	f884 20bc 	strb.w	r2, [r4, #188]	; 0xbc
    ean->buf[5] = (decode < 4) ? 0 : pass->raw[i++] & 0xf;
  404bf8:	f884 30bd 	strb.w	r3, [r4, #189]	; 0xbd
    ean->buf[6] = (decode < 5) ? 0 : pass->raw[i++] & 0xf;
  404bfc:	f884 30be 	strb.w	r3, [r4, #190]	; 0xbe
    ean->buf[7] = 0;
  404c00:	f884 30bf 	strb.w	r3, [r4, #191]	; 0xbf
    ean->buf[8] = 0;
  404c04:	f884 30c0 	strb.w	r3, [r4, #192]	; 0xc0
    ean->buf[9] = (decode < 3) ? pass->raw[i++] & 0xf : 0;
  404c08:	f890 3073 	ldrb.w	r3, [r0, #115]	; 0x73
  404c0c:	f003 030f 	and.w	r3, r3, #15
  404c10:	f884 30c1 	strb.w	r3, [r4, #193]	; 0xc1
    ean->buf[10] = (decode < 4) ? pass->raw[i++] & 0xf : 0;
  404c14:	1863      	adds	r3, r4, r1
  404c16:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
  404c1a:	f003 030f 	and.w	r3, r3, #15
  404c1e:	f884 30c2 	strb.w	r3, [r4, #194]	; 0xc2
    ean->buf[11] = (decode < 5) ? pass->raw[i] & 0xf : decode;
  404c22:	4421      	add	r1, r4
  404c24:	f891 2075 	ldrb.w	r2, [r1, #117]	; 0x75
  404c28:	f002 020f 	and.w	r2, r2, #15
  404c2c:	f884 20c3 	strb.w	r2, [r4, #195]	; 0xc3
  404c30:	e5f9      	b.n	404826 <_zbar_decode_ean+0x976>
        return(-1);
    }

    dbprintf(2, " (");
    code = 0;
    for(i = 1 - fwd; i < 3 + fwd; i++) {
  404c32:	2301      	movs	r3, #1
  404c34:	f04f 0c03 	mov.w	ip, #3
  404c38:	930b      	str	r3, [sp, #44]	; 0x2c
  404c3a:	4657      	mov	r7, sl
  404c3c:	e493      	b.n	404566 <_zbar_decode_ean+0x6b6>
  404c3e:	4643      	mov	r3, r8
                pass->state += 2;
                idx += 2;
            }
        }
        else if((idx == 0x10 || idx == 0x11) &&
                TEST_CFG(dcode->ean.ean8_config, ZBAR_CFG_ENABLE) &&
  404c40:	2b00      	cmp	r3, #0
  404c42:	f47f aa77 	bne.w	404134 <_zbar_decode_ean+0x284>

static inline zbar_symbol_type_t ean_part_end4 (ean_pass_t *pass,
                                                unsigned char fwd)
{
    /* extract parity bits */
    unsigned char par = ((pass->raw[1] & 0x10) >> 1 |
  404c46:	f899 5071 	ldrb.w	r5, [r9, #113]	; 0x71
                         (pass->raw[2] & 0x10) >> 2 |
  404c4a:	f899 1072 	ldrb.w	r1, [r9, #114]	; 0x72
                         (pass->raw[3] & 0x10) >> 3 |
  404c4e:	f899 0073 	ldrb.w	r0, [r9, #115]	; 0x73
                         (pass->raw[4] & 0x10) >> 4);
  404c52:	f899 7074 	ldrb.w	r7, [r9, #116]	; 0x74

static inline zbar_symbol_type_t ean_part_end4 (ean_pass_t *pass,
                                                unsigned char fwd)
{
    /* extract parity bits */
    unsigned char par = ((pass->raw[1] & 0x10) >> 1 |
  404c56:	f005 0210 	and.w	r2, r5, #16
                         (pass->raw[2] & 0x10) >> 2 |
  404c5a:	f001 0e10 	and.w	lr, r1, #16

static inline zbar_symbol_type_t ean_part_end4 (ean_pass_t *pass,
                                                unsigned char fwd)
{
    /* extract parity bits */
    unsigned char par = ((pass->raw[1] & 0x10) >> 1 |
  404c5e:	0852      	lsrs	r2, r2, #1
  404c60:	ea42 029e 	orr.w	r2, r2, lr, lsr #2
                         (pass->raw[2] & 0x10) >> 2 |
                         (pass->raw[3] & 0x10) >> 3 |
  404c64:	f000 0e10 	and.w	lr, r0, #16

static inline zbar_symbol_type_t ean_part_end4 (ean_pass_t *pass,
                                                unsigned char fwd)
{
    /* extract parity bits */
    unsigned char par = ((pass->raw[1] & 0x10) >> 1 |
  404c68:	ea42 02de 	orr.w	r2, r2, lr, lsr #3
                         (pass->raw[2] & 0x10) >> 2 |
                         (pass->raw[3] & 0x10) >> 3 |
                         (pass->raw[4] & 0x10) >> 4);
  404c6c:	f3c7 1e00 	ubfx	lr, r7, #4, #1

    dbprintf(2, " par=%x", par);
    if(par && par != 0xf)
  404c70:	ea52 020e 	orrs.w	r2, r2, lr
  404c74:	d06f      	beq.n	404d56 <_zbar_decode_ean+0xea6>
  404c76:	2a0f      	cmp	r2, #15
  404c78:	f47f aabb 	bne.w	4041f2 <_zbar_decode_ean+0x342>
        /* invalid parity combination */
        return(ZBAR_NONE);

    if(!par == fwd) {
  404c7c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  404c7e:	2b00      	cmp	r3, #0
  404c80:	f000 80ef 	beq.w	404e62 <_zbar_decode_ean+0xfb2>
    dbprintf(1, "decode4=%x%x%x%x\n",
             pass->raw[1] & 0xf, pass->raw[2] & 0xf,
             pass->raw[3] & 0xf, pass->raw[4] & 0xf);
    if(!par)
        return(ZBAR_EAN8 | EAN_RIGHT);
    return(ZBAR_EAN8 | EAN_LEFT);
  404c84:	2208      	movs	r2, #8
                TEST_CFG(dcode->ean.ean8_config, ZBAR_CFG_ENABLE) &&
                !aux_end(dcode, fwd)) {
            dbprintf(2, " fwd=%x", fwd);
            zbar_symbol_type_t part = ean_part_end4(pass, fwd);
            if(part)
                dcode->ean.direction = (pass->state & STATE_REV) != 0;
  404c86:	09f6      	lsrs	r6, r6, #7
  404c88:	f8c4 60ac 	str.w	r6, [r4, #172]	; 0xac
  404c8c:	4690      	mov	r8, r2
  404c8e:	f7ff bab0 	b.w	4041f2 <_zbar_decode_ean+0x342>
        if(!ean->buf[0] && TEST_CFG(ean->upca_config, ZBAR_CFG_ENABLE))
            part = ZBAR_UPCA;
        else if(ean->buf[0] == 9 && ean->buf[1] == 7) {
            /* ISBN-10 has priority over ISBN-13(?) */
            if(ean->buf[2] == 8 &&
               TEST_CFG(ean->isbn10_config, ZBAR_CFG_ENABLE))
  404c92:	f8d4 30dc 	ldr.w	r3, [r4, #220]	; 0xdc
        /* special case EAN-13 subsets */
        if(!ean->buf[0] && TEST_CFG(ean->upca_config, ZBAR_CFG_ENABLE))
            part = ZBAR_UPCA;
        else if(ean->buf[0] == 9 && ean->buf[1] == 7) {
            /* ISBN-10 has priority over ISBN-13(?) */
            if(ean->buf[2] == 8 &&
  404c96:	07db      	lsls	r3, r3, #31
  404c98:	f57f aee0 	bpl.w	404a5c <_zbar_decode_ean+0xbac>
               TEST_CFG(ean->isbn10_config, ZBAR_CFG_ENABLE))
                part = ZBAR_ISBN10;
  404c9c:	f04f 080a 	mov.w	r8, #10
  404ca0:	e60d      	b.n	4048be <_zbar_decode_ean+0xa0e>
    decode = pass->raw[6] & 0xf;
    ean->buf[0] = 0;
    ean->buf[1] = 0;
    ean->buf[2] = pass->raw[i++] & 0xf;
    ean->buf[3] = pass->raw[i++] & 0xf;
    ean->buf[4] = (decode < 3) ? decode : pass->raw[i++] & 0xf;
  404ca2:	f899 1073 	ldrb.w	r1, [r9, #115]	; 0x73
    ean->buf[5] = (decode < 4) ? 0 : pass->raw[i++] & 0xf;
  404ca6:	2a03      	cmp	r2, #3
    decode = pass->raw[6] & 0xf;
    ean->buf[0] = 0;
    ean->buf[1] = 0;
    ean->buf[2] = pass->raw[i++] & 0xf;
    ean->buf[3] = pass->raw[i++] & 0xf;
    ean->buf[4] = (decode < 3) ? decode : pass->raw[i++] & 0xf;
  404ca8:	f001 010f 	and.w	r1, r1, #15
  404cac:	f884 10bc 	strb.w	r1, [r4, #188]	; 0xbc
    ean->buf[5] = (decode < 4) ? 0 : pass->raw[i++] & 0xf;
  404cb0:	f000 80f2 	beq.w	404e98 <_zbar_decode_ean+0xfe8>
  404cb4:	f899 1074 	ldrb.w	r1, [r9, #116]	; 0x74
    ean->buf[6] = (decode < 5) ? 0 : pass->raw[i++] & 0xf;
  404cb8:	2a04      	cmp	r2, #4
    ean->buf[0] = 0;
    ean->buf[1] = 0;
    ean->buf[2] = pass->raw[i++] & 0xf;
    ean->buf[3] = pass->raw[i++] & 0xf;
    ean->buf[4] = (decode < 3) ? decode : pass->raw[i++] & 0xf;
    ean->buf[5] = (decode < 4) ? 0 : pass->raw[i++] & 0xf;
  404cba:	f001 010f 	and.w	r1, r1, #15
  404cbe:	f884 10bd 	strb.w	r1, [r4, #189]	; 0xbd
    ean->buf[6] = (decode < 5) ? 0 : pass->raw[i++] & 0xf;
  404cc2:	f000 80dc 	beq.w	404e7e <_zbar_decode_ean+0xfce>
  404cc6:	f899 1075 	ldrb.w	r1, [r9, #117]	; 0x75
    ean->buf[7] = 0;
  404cca:	f884 30bf 	strb.w	r3, [r4, #191]	; 0xbf
    ean->buf[1] = 0;
    ean->buf[2] = pass->raw[i++] & 0xf;
    ean->buf[3] = pass->raw[i++] & 0xf;
    ean->buf[4] = (decode < 3) ? decode : pass->raw[i++] & 0xf;
    ean->buf[5] = (decode < 4) ? 0 : pass->raw[i++] & 0xf;
    ean->buf[6] = (decode < 5) ? 0 : pass->raw[i++] & 0xf;
  404cce:	f001 010f 	and.w	r1, r1, #15
    ean->buf[7] = 0;
    ean->buf[8] = 0;
    ean->buf[9] = (decode < 3) ? pass->raw[i++] & 0xf : 0;
    ean->buf[10] = (decode < 4) ? pass->raw[i++] & 0xf : 0;
    ean->buf[11] = (decode < 5) ? pass->raw[i] & 0xf : decode;
  404cd2:	b2d2      	uxtb	r2, r2
    ean->buf[1] = 0;
    ean->buf[2] = pass->raw[i++] & 0xf;
    ean->buf[3] = pass->raw[i++] & 0xf;
    ean->buf[4] = (decode < 3) ? decode : pass->raw[i++] & 0xf;
    ean->buf[5] = (decode < 4) ? 0 : pass->raw[i++] & 0xf;
    ean->buf[6] = (decode < 5) ? 0 : pass->raw[i++] & 0xf;
  404cd4:	f884 10be 	strb.w	r1, [r4, #190]	; 0xbe
    ean->buf[7] = 0;
    ean->buf[8] = 0;
  404cd8:	f884 30c0 	strb.w	r3, [r4, #192]	; 0xc0
    ean->buf[9] = (decode < 3) ? pass->raw[i++] & 0xf : 0;
  404cdc:	f884 30c1 	strb.w	r3, [r4, #193]	; 0xc1
    ean->buf[10] = (decode < 4) ? pass->raw[i++] & 0xf : 0;
  404ce0:	f884 30c2 	strb.w	r3, [r4, #194]	; 0xc2
  404ce4:	e7a2      	b.n	404c2c <_zbar_decode_ean+0xd7c>
{
    unsigned char chk = 0;
    unsigned char i, d;
    for(i = 0; i < n; i++) {
        unsigned char d = ean->buf[i];
        zassert(d < 10, -1, "i=%x d=%x chk=%x %s\n", i, d, chk,
  404ce6:	2700      	movs	r7, #0
  404ce8:	462e      	mov	r6, r5
static inline signed char ean_verify_checksum (ean_decoder_t *ean,
                                               int n)
{
    unsigned char chk = 0;
    unsigned char i, d;
    for(i = 0; i < n; i++) {
  404cea:	46ba      	mov	sl, r7
  404cec:	f104 00b8 	add.w	r0, r4, #184	; 0xb8
  404cf0:	e5f8      	b.n	4048e4 <_zbar_decode_ean+0xa34>
    int i = 0, j = 0;
    if(base > ZBAR_PARTIAL) {
        if(base == ZBAR_UPCA)
            i = 1;
        else if(base == ZBAR_UPCE) {
            i = 1;
  404cf2:	2001      	movs	r0, #1
            base--;
  404cf4:	2308      	movs	r3, #8
  404cf6:	e72f      	b.n	404b58 <_zbar_decode_ean+0xca8>
                            (pass->raw[2] & 0x10) |
                            (pass->raw[3] & 0x10) >> 1 |
                            (pass->raw[4] & 0x10) >> 2 |
                            (pass->raw[5] & 0x10) >> 3 |
                            (pass->raw[6] & 0x10) >> 4)
                         : ((pass->raw[1] & 0x10) >> 4 |
  404cf8:	f899 7071 	ldrb.w	r7, [r9, #113]	; 0x71
                            (pass->raw[2] & 0x10) >> 3 |
  404cfc:	f899 5072 	ldrb.w	r5, [r9, #114]	; 0x72
                            (pass->raw[3] & 0x10) >> 2 |
  404d00:	f899 2073 	ldrb.w	r2, [r9, #115]	; 0x73
                            (pass->raw[4] & 0x10) >> 1 |
  404d04:	f899 0074 	ldrb.w	r0, [r9, #116]	; 0x74
                            (pass->raw[5] & 0x10) |
                            (pass->raw[6] & 0x10) << 1));
  404d08:	f899 e076 	ldrb.w	lr, [r9, #118]	; 0x76
                            (pass->raw[2] & 0x10) |
                            (pass->raw[3] & 0x10) >> 1 |
                            (pass->raw[4] & 0x10) >> 2 |
                            (pass->raw[5] & 0x10) >> 3 |
                            (pass->raw[6] & 0x10) >> 4)
                         : ((pass->raw[1] & 0x10) >> 4 |
  404d0c:	f3c7 1300 	ubfx	r3, r7, #4, #1
                            (pass->raw[2] & 0x10) >> 3 |
  404d10:	f005 0c10 	and.w	ip, r5, #16
static inline zbar_symbol_type_t ean_part_end7 (ean_decoder_t *ean,
                                                ean_pass_t *pass,
                                                unsigned char fwd)
{
    /* calculate parity index */
    unsigned char par = ((fwd)
  404d14:	ea43 0cdc 	orr.w	ip, r3, ip, lsr #3
  404d18:	f001 0310 	and.w	r3, r1, #16
  404d1c:	ea4c 0303 	orr.w	r3, ip, r3
                            (pass->raw[4] & 0x10) >> 2 |
                            (pass->raw[5] & 0x10) >> 3 |
                            (pass->raw[6] & 0x10) >> 4)
                         : ((pass->raw[1] & 0x10) >> 4 |
                            (pass->raw[2] & 0x10) >> 3 |
                            (pass->raw[3] & 0x10) >> 2 |
  404d20:	f002 0c10 	and.w	ip, r2, #16
  404d24:	ea43 039c 	orr.w	r3, r3, ip, lsr #2
                            (pass->raw[4] & 0x10) >> 1 |
  404d28:	f000 0c10 	and.w	ip, r0, #16
static inline zbar_symbol_type_t ean_part_end7 (ean_decoder_t *ean,
                                                ean_pass_t *pass,
                                                unsigned char fwd)
{
    /* calculate parity index */
    unsigned char par = ((fwd)
  404d2c:	ea43 035c 	orr.w	r3, r3, ip, lsr #1
                         : ((pass->raw[1] & 0x10) >> 4 |
                            (pass->raw[2] & 0x10) >> 3 |
                            (pass->raw[3] & 0x10) >> 2 |
                            (pass->raw[4] & 0x10) >> 1 |
                            (pass->raw[5] & 0x10) |
                            (pass->raw[6] & 0x10) << 1));
  404d30:	f00e 0c10 	and.w	ip, lr, #16
static inline zbar_symbol_type_t ean_part_end7 (ean_decoder_t *ean,
                                                ean_pass_t *pass,
                                                unsigned char fwd)
{
    /* calculate parity index */
    unsigned char par = ((fwd)
  404d34:	ea43 0c4c 	orr.w	ip, r3, ip, lsl #1
  404d38:	e6e4      	b.n	404b04 <_zbar_decode_ean+0xc54>
static inline void postprocess (zbar_decoder_t *dcode,
                                zbar_symbol_type_t sym)
{
    ean_decoder_t *ean = &dcode->ean;
    zbar_symbol_type_t base = sym;
    int i = 0, j = 0;
  404d3a:	4618      	mov	r0, r3
        else if(base == ZBAR_UPCE) {
            i = 1;
            base--;
        }
        else if(base == ZBAR_ISBN13)
            base = ZBAR_EAN13;
  404d3c:	230d      	movs	r3, #13
  404d3e:	e70b      	b.n	404b58 <_zbar_decode_ean+0xca8>
        if(!par)
            return(ZBAR_EAN13 | EAN_RIGHT);
        if(par & 0x20)
            return(ZBAR_EAN13 | EAN_LEFT);
    }
    if(par && !(par & 0x20))
  404d40:	f1bc 0f00 	cmp.w	ip, #0
  404d44:	f43f aa53 	beq.w	4041ee <_zbar_decode_ean+0x33e>
  404d48:	f01c 0f20 	tst.w	ip, #32
  404d4c:	f47f aa4f 	bne.w	4041ee <_zbar_decode_ean+0x33e>
        return(ZBAR_UPCE);
  404d50:	f04f 0809 	mov.w	r8, #9
  404d54:	e6f7      	b.n	404b46 <_zbar_decode_ean+0xc96>
    dbprintf(2, " par=%x", par);
    if(par && par != 0xf)
        /* invalid parity combination */
        return(ZBAR_NONE);

    if(!par == fwd) {
  404d56:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  404d58:	2b00      	cmp	r3, #0
  404d5a:	d150      	bne.n	404dfe <_zbar_decode_ean+0xf4e>
    dbprintf(2, "\n");
    dbprintf(1, "decode4=%x%x%x%x\n",
             pass->raw[1] & 0xf, pass->raw[2] & 0xf,
             pass->raw[3] & 0xf, pass->raw[4] & 0xf);
    if(!par)
        return(ZBAR_EAN8 | EAN_RIGHT);
  404d5c:	f241 0208 	movw	r2, #4104	; 0x1008
  404d60:	e791      	b.n	404c86 <_zbar_decode_ean+0xdd6>
            i = 1;
            base--;
        }
        else if(base == ZBAR_ISBN13)
            base = ZBAR_EAN13;
        else if(base == ZBAR_ISBN10)
  404d62:	2309      	movs	r3, #9
            i = 3;
  404d64:	2003      	movs	r0, #3

        if(base == ZBAR_ISBN10 ||
           (base > ZBAR_EAN5 &&
  404d66:	461d      	mov	r5, r3
  404d68:	f7ff bad9 	b.w	40431e <_zbar_decode_ean+0x46e>
        /* invalid parity combination */
        return(ZBAR_NONE);

    if(!par == fwd) {
        unsigned char i;
        pass->state |= STATE_REV;
  404d6c:	f899 6068 	ldrb.w	r6, [r9, #104]	; 0x68
        /* reverse sampled digits */
        for(i = 1; i < 4; i++) {
            unsigned char tmp = pass->raw[i];
            pass->raw[i] = pass->raw[7 - i];
  404d70:	f889 e071 	strb.w	lr, [r9, #113]	; 0x71
        /* invalid parity combination */
        return(ZBAR_NONE);

    if(!par == fwd) {
        unsigned char i;
        pass->state |= STATE_REV;
  404d74:	f066 067f 	orn	r6, r6, #127	; 0x7f
        /* reverse sampled digits */
        for(i = 1; i < 4; i++) {
            unsigned char tmp = pass->raw[i];
            pass->raw[i] = pass->raw[7 - i];
            pass->raw[7 - i] = tmp;
  404d78:	f889 7076 	strb.w	r7, [r9, #118]	; 0x76
        unsigned char i;
        pass->state |= STATE_REV;
        /* reverse sampled digits */
        for(i = 1; i < 4; i++) {
            unsigned char tmp = pass->raw[i];
            pass->raw[i] = pass->raw[7 - i];
  404d7c:	f889 1072 	strb.w	r1, [r9, #114]	; 0x72
            pass->raw[7 - i] = tmp;
  404d80:	f889 5075 	strb.w	r5, [r9, #117]	; 0x75
        unsigned char i;
        pass->state |= STATE_REV;
        /* reverse sampled digits */
        for(i = 1; i < 4; i++) {
            unsigned char tmp = pass->raw[i];
            pass->raw[i] = pass->raw[7 - i];
  404d84:	f889 0073 	strb.w	r0, [r9, #115]	; 0x73
            pass->raw[7 - i] = tmp;
  404d88:	f889 2074 	strb.w	r2, [r9, #116]	; 0x74
        /* invalid parity combination */
        return(ZBAR_NONE);

    if(!par == fwd) {
        unsigned char i;
        pass->state |= STATE_REV;
  404d8c:	f889 6068 	strb.w	r6, [r9, #104]	; 0x68
  404d90:	e6cf      	b.n	404b32 <_zbar_decode_ean+0xc82>
        if(base == ZBAR_ISBN10 ||
           (base > ZBAR_EAN5 &&
            !TEST_CFG(ean_get_config(ean, sym), ZBAR_CFG_EMIT_CHECK)))
            base--;

        for(; j < base && ean->buf[i] >= 0; i++, j++)
  404d92:	2300      	movs	r3, #0
  404d94:	f7ff badd 	b.w	404352 <_zbar_decode_ean+0x4a2>
            return(ZBAR_EAN13 | EAN_RIGHT);
        if(par & 0x20)
            return(ZBAR_EAN13 | EAN_LEFT);
    }
    if(par && !(par & 0x20))
        return(ZBAR_UPCE);
  404d98:	f01c 0f20 	tst.w	ip, #32
  404d9c:	bf14      	ite	ne
  404d9e:	f04f 080d 	movne.w	r8, #13
  404da2:	f04f 0809 	moveq.w	r8, #9
  404da6:	e6ce      	b.n	404b46 <_zbar_decode_ean+0xc96>
                chk -= 20;
        }
        if(chk >= 10)
            chk -= 10;
    }
    zassert(chk < 10, -1, "chk=%x n=%x %s", chk, n,
  404da8:	4b9d      	ldr	r3, [pc, #628]	; (405020 <_zbar_decode_ean+0x1170>)
  404daa:	681a      	ldr	r2, [r3, #0]
  404dac:	4b9d      	ldr	r3, [pc, #628]	; (405024 <_zbar_decode_ean+0x1174>)
  404dae:	68d6      	ldr	r6, [r2, #12]
  404db0:	2112      	movs	r1, #18
  404db2:	4798      	blx	r3
  404db4:	4a9c      	ldr	r2, [pc, #624]	; (405028 <_zbar_decode_ean+0x1178>)
  404db6:	4b9d      	ldr	r3, [pc, #628]	; (40502c <_zbar_decode_ean+0x117c>)
  404db8:	9004      	str	r0, [sp, #16]
  404dba:	e88d 000c 	stmia.w	sp, {r2, r3}
  404dbe:	9502      	str	r5, [sp, #8]
  404dc0:	4630      	mov	r0, r6
  404dc2:	9703      	str	r7, [sp, #12]
  404dc4:	499a      	ldr	r1, [pc, #616]	; (405030 <_zbar_decode_ean+0x1180>)
  404dc6:	4a9b      	ldr	r2, [pc, #620]	; (405034 <_zbar_decode_ean+0x1184>)
  404dc8:	4d9b      	ldr	r5, [pc, #620]	; (405038 <_zbar_decode_ean+0x1188>)
  404dca:	f240 2315 	movw	r3, #533	; 0x215
  404dce:	47a8      	blx	r5
  404dd0:	e59e      	b.n	404910 <_zbar_decode_ean+0xa60>
            _zbar_decoder_buf_dump((void*)ean->buf, 18));
    if(chk)
        chk = 10 - chk;
    d = ean->buf[n];
    zassert(d < 10, -1, "n=%x d=%x chk=%x %s\n", n, d, chk,
  404dd2:	4b93      	ldr	r3, [pc, #588]	; (405020 <_zbar_decode_ean+0x1170>)
  404dd4:	681a      	ldr	r2, [r3, #0]
  404dd6:	4b93      	ldr	r3, [pc, #588]	; (405024 <_zbar_decode_ean+0x1174>)
  404dd8:	68d7      	ldr	r7, [r2, #12]
  404dda:	2112      	movs	r1, #18
  404ddc:	4798      	blx	r3
  404dde:	4992      	ldr	r1, [pc, #584]	; (405028 <_zbar_decode_ean+0x1178>)
  404de0:	4a96      	ldr	r2, [pc, #600]	; (40503c <_zbar_decode_ean+0x118c>)
  404de2:	9005      	str	r0, [sp, #20]
  404de4:	230c      	movs	r3, #12
  404de6:	e88d 000e 	stmia.w	sp, {r1, r2, r3}
  404dea:	9504      	str	r5, [sp, #16]
  404dec:	4638      	mov	r0, r7
  404dee:	9603      	str	r6, [sp, #12]
  404df0:	4993      	ldr	r1, [pc, #588]	; (405040 <_zbar_decode_ean+0x1190>)
  404df2:	4a90      	ldr	r2, [pc, #576]	; (405034 <_zbar_decode_ean+0x1184>)
  404df4:	4d90      	ldr	r5, [pc, #576]	; (405038 <_zbar_decode_ean+0x1188>)
  404df6:	f240 231a 	movw	r3, #538	; 0x21a
  404dfa:	47a8      	blx	r5
  404dfc:	e588      	b.n	404910 <_zbar_decode_ean+0xa60>
        return(ZBAR_NONE);

    if(!par == fwd) {
        /* reverse sampled digits */
        unsigned char tmp = pass->raw[1];
        pass->state |= STATE_REV;
  404dfe:	f066 067f 	orn	r6, r6, #127	; 0x7f
  404e02:	f889 6068 	strb.w	r6, [r9, #104]	; 0x68
        pass->raw[1] = pass->raw[4];
  404e06:	f889 7071 	strb.w	r7, [r9, #113]	; 0x71
  404e0a:	b2f6      	uxtb	r6, r6
        pass->raw[4] = tmp;
  404e0c:	f889 5074 	strb.w	r5, [r9, #116]	; 0x74
        tmp = pass->raw[2];
        pass->raw[2] = pass->raw[3];
  404e10:	f889 0072 	strb.w	r0, [r9, #114]	; 0x72
        pass->raw[3] = tmp;
  404e14:	f889 1073 	strb.w	r1, [r9, #115]	; 0x73
  404e18:	e7a0      	b.n	404d5c <_zbar_decode_ean+0xeac>
static inline unsigned char isbn10_calc_checksum (ean_decoder_t *ean)
{
    unsigned int chk = 0;
    unsigned char w;
    for(w = 10; w > 1; w--) {
        unsigned char d = ean->buf[13 - w];
  404e1a:	2502      	movs	r5, #2
        zassert(d < 10, '?', "w=%x d=%x chk=%x %s\n", w, d, chk,
  404e1c:	4b80      	ldr	r3, [pc, #512]	; (405020 <_zbar_decode_ean+0x1170>)
  404e1e:	4a81      	ldr	r2, [pc, #516]	; (405024 <_zbar_decode_ean+0x1174>)
  404e20:	681b      	ldr	r3, [r3, #0]
  404e22:	2112      	movs	r1, #18
  404e24:	68db      	ldr	r3, [r3, #12]
  404e26:	9309      	str	r3, [sp, #36]	; 0x24
  404e28:	f104 00b8 	add.w	r0, r4, #184	; 0xb8
  404e2c:	4790      	blx	r2
  404e2e:	9b09      	ldr	r3, [sp, #36]	; 0x24
  404e30:	4984      	ldr	r1, [pc, #528]	; (405044 <_zbar_decode_ean+0x1194>)
  404e32:	4a82      	ldr	r2, [pc, #520]	; (40503c <_zbar_decode_ean+0x118c>)
  404e34:	9005      	str	r0, [sp, #20]
  404e36:	e88d 0006 	stmia.w	sp, {r1, r2}
  404e3a:	9502      	str	r5, [sp, #8]
  404e3c:	4618      	mov	r0, r3
  404e3e:	9703      	str	r7, [sp, #12]
  404e40:	f240 232a 	movw	r3, #554	; 0x22a
  404e44:	f8cd a010 	str.w	sl, [sp, #16]
  404e48:	497f      	ldr	r1, [pc, #508]	; (405048 <_zbar_decode_ean+0x1198>)
  404e4a:	4a7a      	ldr	r2, [pc, #488]	; (405034 <_zbar_decode_ean+0x1184>)
  404e4c:	4d7a      	ldr	r5, [pc, #488]	; (405038 <_zbar_decode_ean+0x1188>)
  404e4e:	47a8      	blx	r5
  404e50:	233f      	movs	r3, #63	; 0x3f
  404e52:	e4af      	b.n	4047b4 <_zbar_decode_ean+0x904>
        chk += d * w;
    }
    chk = chk % 11;
    if(!chk)
        return('0');
    chk = 11 - chk;
  404e54:	f1c3 030b 	rsb	r3, r3, #11
    if(chk < 10)
  404e58:	2b0a      	cmp	r3, #10
  404e5a:	f040 80dd 	bne.w	405018 <_zbar_decode_ean+0x1168>
        return(chk + '0');
    return('X');
  404e5e:	2358      	movs	r3, #88	; 0x58
  404e60:	e4a8      	b.n	4047b4 <_zbar_decode_ean+0x904>
        return(ZBAR_NONE);

    if(!par == fwd) {
        /* reverse sampled digits */
        unsigned char tmp = pass->raw[1];
        pass->state |= STATE_REV;
  404e62:	f066 067f 	orn	r6, r6, #127	; 0x7f
  404e66:	f889 6068 	strb.w	r6, [r9, #104]	; 0x68
        pass->raw[1] = pass->raw[4];
  404e6a:	f889 7071 	strb.w	r7, [r9, #113]	; 0x71
  404e6e:	b2f6      	uxtb	r6, r6
        pass->raw[4] = tmp;
  404e70:	f889 5074 	strb.w	r5, [r9, #116]	; 0x74
        tmp = pass->raw[2];
        pass->raw[2] = pass->raw[3];
  404e74:	f889 0072 	strb.w	r0, [r9, #114]	; 0x72
        pass->raw[3] = tmp;
  404e78:	f889 1073 	strb.w	r1, [r9, #115]	; 0x73
  404e7c:	e702      	b.n	404c84 <_zbar_decode_ean+0xdd4>
    ean->buf[1] = 0;
    ean->buf[2] = pass->raw[i++] & 0xf;
    ean->buf[3] = pass->raw[i++] & 0xf;
    ean->buf[4] = (decode < 3) ? decode : pass->raw[i++] & 0xf;
    ean->buf[5] = (decode < 4) ? 0 : pass->raw[i++] & 0xf;
    ean->buf[6] = (decode < 5) ? 0 : pass->raw[i++] & 0xf;
  404e7e:	f884 30be 	strb.w	r3, [r4, #190]	; 0xbe
    ean->buf[7] = 0;
  404e82:	f884 30bf 	strb.w	r3, [r4, #191]	; 0xbf
    ean->buf[8] = 0;
  404e86:	f884 30c0 	strb.w	r3, [r4, #192]	; 0xc0
    ean->buf[9] = (decode < 3) ? pass->raw[i++] & 0xf : 0;
  404e8a:	f884 30c1 	strb.w	r3, [r4, #193]	; 0xc1
    ean->buf[10] = (decode < 4) ? pass->raw[i++] & 0xf : 0;
  404e8e:	f884 30c2 	strb.w	r3, [r4, #194]	; 0xc2
  404e92:	ea4f 110b 	mov.w	r1, fp, lsl #4
  404e96:	e6c4      	b.n	404c22 <_zbar_decode_ean+0xd72>
    ean->buf[0] = 0;
    ean->buf[1] = 0;
    ean->buf[2] = pass->raw[i++] & 0xf;
    ean->buf[3] = pass->raw[i++] & 0xf;
    ean->buf[4] = (decode < 3) ? decode : pass->raw[i++] & 0xf;
    ean->buf[5] = (decode < 4) ? 0 : pass->raw[i++] & 0xf;
  404e98:	f884 30bd 	strb.w	r3, [r4, #189]	; 0xbd
    ean->buf[6] = (decode < 5) ? 0 : pass->raw[i++] & 0xf;
  404e9c:	f884 30be 	strb.w	r3, [r4, #190]	; 0xbe
    ean->buf[7] = 0;
  404ea0:	f884 30bf 	strb.w	r3, [r4, #191]	; 0xbf
    ean->buf[8] = 0;
  404ea4:	f884 30c0 	strb.w	r3, [r4, #192]	; 0xc0
    ean->buf[9] = (decode < 3) ? pass->raw[i++] & 0xf : 0;
  404ea8:	f884 30c1 	strb.w	r3, [r4, #193]	; 0xc1
  404eac:	ea4f 110b 	mov.w	r1, fp, lsl #4
  404eb0:	e6b0      	b.n	404c14 <_zbar_decode_ean+0xd64>
            else if((ean->buf[2] == 8 || ean->buf[2] == 9) &&
               TEST_CFG(ean->isbn13_config, ZBAR_CFG_ENABLE))
                part = ZBAR_ISBN13;
        }
    }
    else if(part == ZBAR_UPCE) {
  404eb2:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
  404eb6:	f7ff ba06 	b.w	4042c6 <_zbar_decode_ean+0x416>
                                               int n)
{
    unsigned char chk = 0;
    unsigned char i, d;
    for(i = 0; i < n; i++) {
        unsigned char d = ean->buf[i];
  404eba:	f894 60b8 	ldrb.w	r6, [r4, #184]	; 0xb8
        zassert(d < 10, -1, "i=%x d=%x chk=%x %s\n", i, d, chk,
  404ebe:	2e09      	cmp	r6, #9
  404ec0:	f200 8097 	bhi.w	404ff2 <_zbar_decode_ean+0x1142>
                _zbar_decoder_buf_dump((void*)ean->buf, 18));
        chk += d;
        if((i ^ n) & 1) {
            chk += d << 1;
  404ec4:	eb06 0646 	add.w	r6, r6, r6, lsl #1
  404ec8:	b2f5      	uxtb	r5, r6
            if(chk >= 20)
  404eca:	2d13      	cmp	r5, #19
  404ecc:	f240 808c 	bls.w	404fe8 <_zbar_decode_ean+0x1138>
                chk -= 20;
  404ed0:	3d14      	subs	r5, #20
  404ed2:	b2ed      	uxtb	r5, r5
                                               int n)
{
    unsigned char chk = 0;
    unsigned char i, d;
    for(i = 0; i < n; i++) {
        unsigned char d = ean->buf[i];
  404ed4:	f894 60b9 	ldrb.w	r6, [r4, #185]	; 0xb9
        zassert(d < 10, -1, "i=%x d=%x chk=%x %s\n", i, d, chk,
  404ed8:	2e09      	cmp	r6, #9
  404eda:	f200 8083 	bhi.w	404fe4 <_zbar_decode_ean+0x1134>
                _zbar_decoder_buf_dump((void*)ean->buf, 18));
        chk += d;
  404ede:	4435      	add	r5, r6
  404ee0:	b2ed      	uxtb	r5, r5
        if((i ^ n) & 1) {
            chk += d << 1;
            if(chk >= 20)
                chk -= 20;
        }
        if(chk >= 10)
  404ee2:	2d09      	cmp	r5, #9
                                               int n)
{
    unsigned char chk = 0;
    unsigned char i, d;
    for(i = 0; i < n; i++) {
        unsigned char d = ean->buf[i];
  404ee4:	f894 60ba 	ldrb.w	r6, [r4, #186]	; 0xba
            chk += d << 1;
            if(chk >= 20)
                chk -= 20;
        }
        if(chk >= 10)
            chk -= 10;
  404ee8:	bf84      	itt	hi
  404eea:	3d0a      	subhi	r5, #10
  404eec:	b2ed      	uxtbhi	r5, r5
{
    unsigned char chk = 0;
    unsigned char i, d;
    for(i = 0; i < n; i++) {
        unsigned char d = ean->buf[i];
        zassert(d < 10, -1, "i=%x d=%x chk=%x %s\n", i, d, chk,
  404eee:	2e09      	cmp	r6, #9
  404ef0:	d876      	bhi.n	404fe0 <_zbar_decode_ean+0x1130>
                _zbar_decoder_buf_dump((void*)ean->buf, 18));
        chk += d;
  404ef2:	4435      	add	r5, r6
        if((i ^ n) & 1) {
            chk += d << 1;
  404ef4:	eb05 0546 	add.w	r5, r5, r6, lsl #1
  404ef8:	f005 05ff 	and.w	r5, r5, #255	; 0xff
            if(chk >= 20)
  404efc:	2d13      	cmp	r5, #19
                chk -= 20;
  404efe:	bf84      	itt	hi
  404f00:	3d14      	subhi	r5, #20
  404f02:	b2ed      	uxtbhi	r5, r5
        }
        if(chk >= 10)
  404f04:	2d09      	cmp	r5, #9
                                               int n)
{
    unsigned char chk = 0;
    unsigned char i, d;
    for(i = 0; i < n; i++) {
        unsigned char d = ean->buf[i];
  404f06:	f894 60bb 	ldrb.w	r6, [r4, #187]	; 0xbb
            chk += d << 1;
            if(chk >= 20)
                chk -= 20;
        }
        if(chk >= 10)
            chk -= 10;
  404f0a:	bf84      	itt	hi
  404f0c:	3d0a      	subhi	r5, #10
  404f0e:	b2ed      	uxtbhi	r5, r5
{
    unsigned char chk = 0;
    unsigned char i, d;
    for(i = 0; i < n; i++) {
        unsigned char d = ean->buf[i];
        zassert(d < 10, -1, "i=%x d=%x chk=%x %s\n", i, d, chk,
  404f10:	2e09      	cmp	r6, #9
  404f12:	d863      	bhi.n	404fdc <_zbar_decode_ean+0x112c>
                _zbar_decoder_buf_dump((void*)ean->buf, 18));
        chk += d;
  404f14:	4435      	add	r5, r6
  404f16:	b2ed      	uxtb	r5, r5
        if((i ^ n) & 1) {
            chk += d << 1;
            if(chk >= 20)
                chk -= 20;
        }
        if(chk >= 10)
  404f18:	2d09      	cmp	r5, #9
                                               int n)
{
    unsigned char chk = 0;
    unsigned char i, d;
    for(i = 0; i < n; i++) {
        unsigned char d = ean->buf[i];
  404f1a:	f894 60bc 	ldrb.w	r6, [r4, #188]	; 0xbc
            chk += d << 1;
            if(chk >= 20)
                chk -= 20;
        }
        if(chk >= 10)
            chk -= 10;
  404f1e:	bf84      	itt	hi
  404f20:	3d0a      	subhi	r5, #10
  404f22:	b2ed      	uxtbhi	r5, r5
{
    unsigned char chk = 0;
    unsigned char i, d;
    for(i = 0; i < n; i++) {
        unsigned char d = ean->buf[i];
        zassert(d < 10, -1, "i=%x d=%x chk=%x %s\n", i, d, chk,
  404f24:	2e09      	cmp	r6, #9
  404f26:	d857      	bhi.n	404fd8 <_zbar_decode_ean+0x1128>
                _zbar_decoder_buf_dump((void*)ean->buf, 18));
        chk += d;
  404f28:	4435      	add	r5, r6
        if((i ^ n) & 1) {
            chk += d << 1;
  404f2a:	eb05 0546 	add.w	r5, r5, r6, lsl #1
  404f2e:	f005 05ff 	and.w	r5, r5, #255	; 0xff
            if(chk >= 20)
  404f32:	2d13      	cmp	r5, #19
                chk -= 20;
  404f34:	bf84      	itt	hi
  404f36:	3d14      	subhi	r5, #20
  404f38:	b2ed      	uxtbhi	r5, r5
        }
        if(chk >= 10)
  404f3a:	2d09      	cmp	r5, #9
                                               int n)
{
    unsigned char chk = 0;
    unsigned char i, d;
    for(i = 0; i < n; i++) {
        unsigned char d = ean->buf[i];
  404f3c:	f894 60bd 	ldrb.w	r6, [r4, #189]	; 0xbd
            chk += d << 1;
            if(chk >= 20)
                chk -= 20;
        }
        if(chk >= 10)
            chk -= 10;
  404f40:	bf84      	itt	hi
  404f42:	3d0a      	subhi	r5, #10
  404f44:	b2ed      	uxtbhi	r5, r5
{
    unsigned char chk = 0;
    unsigned char i, d;
    for(i = 0; i < n; i++) {
        unsigned char d = ean->buf[i];
        zassert(d < 10, -1, "i=%x d=%x chk=%x %s\n", i, d, chk,
  404f46:	2e09      	cmp	r6, #9
  404f48:	d844      	bhi.n	404fd4 <_zbar_decode_ean+0x1124>
                _zbar_decoder_buf_dump((void*)ean->buf, 18));
        chk += d;
  404f4a:	4435      	add	r5, r6
  404f4c:	b2ed      	uxtb	r5, r5
        if((i ^ n) & 1) {
            chk += d << 1;
            if(chk >= 20)
                chk -= 20;
        }
        if(chk >= 10)
  404f4e:	2d09      	cmp	r5, #9
                                               int n)
{
    unsigned char chk = 0;
    unsigned char i, d;
    for(i = 0; i < n; i++) {
        unsigned char d = ean->buf[i];
  404f50:	f894 60be 	ldrb.w	r6, [r4, #190]	; 0xbe
            chk += d << 1;
            if(chk >= 20)
                chk -= 20;
        }
        if(chk >= 10)
            chk -= 10;
  404f54:	bf84      	itt	hi
  404f56:	3d0a      	subhi	r5, #10
  404f58:	b2ed      	uxtbhi	r5, r5
{
    unsigned char chk = 0;
    unsigned char i, d;
    for(i = 0; i < n; i++) {
        unsigned char d = ean->buf[i];
        zassert(d < 10, -1, "i=%x d=%x chk=%x %s\n", i, d, chk,
  404f5a:	2e09      	cmp	r6, #9
  404f5c:	d828      	bhi.n	404fb0 <_zbar_decode_ean+0x1100>
                _zbar_decoder_buf_dump((void*)ean->buf, 18));
        chk += d;
  404f5e:	4435      	add	r5, r6
        if((i ^ n) & 1) {
            chk += d << 1;
  404f60:	eb05 0546 	add.w	r5, r5, r6, lsl #1
  404f64:	f005 05ff 	and.w	r5, r5, #255	; 0xff
            if(chk >= 20)
  404f68:	2d13      	cmp	r5, #19
                chk -= 20;
  404f6a:	bf84      	itt	hi
  404f6c:	3d14      	subhi	r5, #20
  404f6e:	b2ed      	uxtbhi	r5, r5
        }
        if(chk >= 10)
  404f70:	2d09      	cmp	r5, #9
            chk -= 10;
  404f72:	bf84      	itt	hi
  404f74:	3d0a      	subhi	r5, #10
  404f76:	b2ed      	uxtbhi	r5, r5
    }
    zassert(chk < 10, -1, "chk=%x n=%x %s", chk, n,
            _zbar_decoder_buf_dump((void*)ean->buf, 18));
    if(chk)
  404f78:	b115      	cbz	r5, 404f80 <_zbar_decode_ean+0x10d0>
        chk = 10 - chk;
  404f7a:	f1c5 050a 	rsb	r5, r5, #10
  404f7e:	b2ed      	uxtb	r5, r5
    d = ean->buf[n];
  404f80:	f894 60bf 	ldrb.w	r6, [r4, #191]	; 0xbf
    zassert(d < 10, -1, "n=%x d=%x chk=%x %s\n", n, d, chk,
  404f84:	2e09      	cmp	r6, #9
  404f86:	d806      	bhi.n	404f96 <_zbar_decode_ean+0x10e6>
            _zbar_decoder_buf_dump((void*)ean->buf, 18));
    if(chk != d) {
  404f88:	42ae      	cmp	r6, r5
  404f8a:	f47f acc1 	bne.w	404910 <_zbar_decode_ean+0xa60>
  404f8e:	2308      	movs	r3, #8
  404f90:	9309      	str	r3, [sp, #36]	; 0x24
  404f92:	f7ff b998 	b.w	4042c6 <_zbar_decode_ean+0x416>
    zassert(chk < 10, -1, "chk=%x n=%x %s", chk, n,
            _zbar_decoder_buf_dump((void*)ean->buf, 18));
    if(chk)
        chk = 10 - chk;
    d = ean->buf[n];
    zassert(d < 10, -1, "n=%x d=%x chk=%x %s\n", n, d, chk,
  404f96:	4b22      	ldr	r3, [pc, #136]	; (405020 <_zbar_decode_ean+0x1170>)
  404f98:	681a      	ldr	r2, [r3, #0]
  404f9a:	4b22      	ldr	r3, [pc, #136]	; (405024 <_zbar_decode_ean+0x1174>)
  404f9c:	68d7      	ldr	r7, [r2, #12]
  404f9e:	2112      	movs	r1, #18
  404fa0:	f104 00b8 	add.w	r0, r4, #184	; 0xb8
  404fa4:	4798      	blx	r3
  404fa6:	4920      	ldr	r1, [pc, #128]	; (405028 <_zbar_decode_ean+0x1178>)
  404fa8:	4a24      	ldr	r2, [pc, #144]	; (40503c <_zbar_decode_ean+0x118c>)
  404faa:	9005      	str	r0, [sp, #20]
  404fac:	2307      	movs	r3, #7
  404fae:	e71a      	b.n	404de6 <_zbar_decode_ean+0xf36>
static inline signed char ean_verify_checksum (ean_decoder_t *ean,
                                               int n)
{
    unsigned char chk = 0;
    unsigned char i, d;
    for(i = 0; i < n; i++) {
  404fb0:	2706      	movs	r7, #6
        unsigned char d = ean->buf[i];
        zassert(d < 10, -1, "i=%x d=%x chk=%x %s\n", i, d, chk,
  404fb2:	4b1b      	ldr	r3, [pc, #108]	; (405020 <_zbar_decode_ean+0x1170>)
  404fb4:	681a      	ldr	r2, [r3, #0]
  404fb6:	4b1b      	ldr	r3, [pc, #108]	; (405024 <_zbar_decode_ean+0x1174>)
  404fb8:	f8d2 800c 	ldr.w	r8, [r2, #12]
  404fbc:	f104 00b8 	add.w	r0, r4, #184	; 0xb8
  404fc0:	2112      	movs	r1, #18
  404fc2:	4798      	blx	r3
  404fc4:	4a18      	ldr	r2, [pc, #96]	; (405028 <_zbar_decode_ean+0x1178>)
  404fc6:	9005      	str	r0, [sp, #20]
  404fc8:	4b1c      	ldr	r3, [pc, #112]	; (40503c <_zbar_decode_ean+0x118c>)
  404fca:	9702      	str	r7, [sp, #8]
  404fcc:	4640      	mov	r0, r8
  404fce:	9603      	str	r6, [sp, #12]
  404fd0:	9504      	str	r5, [sp, #16]
  404fd2:	e495      	b.n	404900 <_zbar_decode_ean+0xa50>
static inline signed char ean_verify_checksum (ean_decoder_t *ean,
                                               int n)
{
    unsigned char chk = 0;
    unsigned char i, d;
    for(i = 0; i < n; i++) {
  404fd4:	2705      	movs	r7, #5
  404fd6:	e7ec      	b.n	404fb2 <_zbar_decode_ean+0x1102>
  404fd8:	2704      	movs	r7, #4
  404fda:	e7ea      	b.n	404fb2 <_zbar_decode_ean+0x1102>
  404fdc:	2703      	movs	r7, #3
  404fde:	e7e8      	b.n	404fb2 <_zbar_decode_ean+0x1102>
  404fe0:	2702      	movs	r7, #2
  404fe2:	e7e6      	b.n	404fb2 <_zbar_decode_ean+0x1102>
  404fe4:	2701      	movs	r7, #1
  404fe6:	e7e4      	b.n	404fb2 <_zbar_decode_ean+0x1102>
        if((i ^ n) & 1) {
            chk += d << 1;
            if(chk >= 20)
                chk -= 20;
        }
        if(chk >= 10)
  404fe8:	2d09      	cmp	r5, #9
            chk -= 10;
  404fea:	bf84      	itt	hi
  404fec:	3d0a      	subhi	r5, #10
  404fee:	b2ed      	uxtbhi	r5, r5
  404ff0:	e770      	b.n	404ed4 <_zbar_decode_ean+0x1024>
{
    unsigned char chk = 0;
    unsigned char i, d;
    for(i = 0; i < n; i++) {
        unsigned char d = ean->buf[i];
        zassert(d < 10, -1, "i=%x d=%x chk=%x %s\n", i, d, chk,
  404ff2:	2500      	movs	r5, #0
static inline signed char ean_verify_checksum (ean_decoder_t *ean,
                                               int n)
{
    unsigned char chk = 0;
    unsigned char i, d;
    for(i = 0; i < n; i++) {
  404ff4:	462f      	mov	r7, r5
  404ff6:	e7dc      	b.n	404fb2 <_zbar_decode_ean+0x1102>
static inline unsigned char isbn10_calc_checksum (ean_decoder_t *ean)
{
    unsigned int chk = 0;
    unsigned char w;
    for(w = 10; w > 1; w--) {
        unsigned char d = ean->buf[13 - w];
  404ff8:	2503      	movs	r5, #3
  404ffa:	e70f      	b.n	404e1c <_zbar_decode_ean+0xf6c>
  404ffc:	2504      	movs	r5, #4
  404ffe:	e70d      	b.n	404e1c <_zbar_decode_ean+0xf6c>
  405000:	2505      	movs	r5, #5
  405002:	e70b      	b.n	404e1c <_zbar_decode_ean+0xf6c>
  405004:	2506      	movs	r5, #6
  405006:	e709      	b.n	404e1c <_zbar_decode_ean+0xf6c>
  405008:	2507      	movs	r5, #7
  40500a:	e707      	b.n	404e1c <_zbar_decode_ean+0xf6c>
  40500c:	2508      	movs	r5, #8
  40500e:	e705      	b.n	404e1c <_zbar_decode_ean+0xf6c>
    return(0);
}

static inline unsigned char isbn10_calc_checksum (ean_decoder_t *ean)
{
    unsigned int chk = 0;
  405010:	f04f 0a00 	mov.w	sl, #0
    unsigned char w;
    for(w = 10; w > 1; w--) {
        unsigned char d = ean->buf[13 - w];
  405014:	4645      	mov	r5, r8
  405016:	e701      	b.n	404e1c <_zbar_decode_ean+0xf6c>
    chk = chk % 11;
    if(!chk)
        return('0');
    chk = 11 - chk;
    if(chk < 10)
        return(chk + '0');
  405018:	3330      	adds	r3, #48	; 0x30
  40501a:	b2db      	uxtb	r3, r3
  40501c:	f7ff bbca 	b.w	4047b4 <_zbar_decode_ean+0x904>
  405020:	200008b0 	.word	0x200008b0
  405024:	00403dfd 	.word	0x00403dfd
  405028:	004112c4 	.word	0x004112c4
  40502c:	00411218 	.word	0x00411218
  405030:	004111dc 	.word	0x004111dc
  405034:	00411160 	.word	0x00411160
  405038:	0040814d 	.word	0x0040814d
  40503c:	004111d4 	.word	0x004111d4
  405040:	00411224 	.word	0x00411224
  405044:	004112ac 	.word	0x004112ac
  405048:	00411268 	.word	0x00411268
  40504c:	004110d8 	.word	0x004110d8

00405050 <_zbar_image_refcnt.part.0>:
extern int zbar_image_write_png(const zbar_image_t*, const char*);
#else
# define zbar_image_write_png(...)
#endif

static inline void _zbar_image_refcnt (zbar_image_t *img,
  405050:	b508      	push	{r3, lr}

static inline int _zbar_refcnt (refcnt_t *cnt,
                                int delta)
{
    int rc = (*cnt += delta);
    assert(rc >= 0);
  405052:	4803      	ldr	r0, [pc, #12]	; (405060 <_zbar_image_refcnt.part.0+0x10>)
  405054:	4a03      	ldr	r2, [pc, #12]	; (405064 <_zbar_image_refcnt.part.0+0x14>)
  405056:	4b04      	ldr	r3, [pc, #16]	; (405068 <_zbar_image_refcnt.part.0+0x18>)
  405058:	4c04      	ldr	r4, [pc, #16]	; (40506c <_zbar_image_refcnt.part.0+0x1c>)
  40505a:	2157      	movs	r1, #87	; 0x57
  40505c:	47a0      	blx	r4
  40505e:	bf00      	nop
  405060:	004112e8 	.word	0x004112e8
  405064:	004112d8 	.word	0x004112d8
  405068:	00411314 	.word	0x00411314
  40506c:	00407d65 	.word	0x00407d65

00405070 <zbar_image_free_data.part.1>:
    if(y + h > img_h) h = img_h - y;
    img->crop_y = y;
    img->crop_h = h;
}

inline void zbar_image_free_data (zbar_image_t *img)
  405070:	b508      	push	{r3, lr}
    if(!img)
        return;
    if(img->src) {
        zbar_image_t *newimg;
        /* replace video image w/new copy */
        assert(img->refcnt); /* FIXME needs lock */
  405072:	4803      	ldr	r0, [pc, #12]	; (405080 <zbar_image_free_data.part.1+0x10>)
  405074:	4a03      	ldr	r2, [pc, #12]	; (405084 <zbar_image_free_data.part.1+0x14>)
  405076:	4b04      	ldr	r3, [pc, #16]	; (405088 <zbar_image_free_data.part.1+0x18>)
  405078:	4c04      	ldr	r4, [pc, #16]	; (40508c <zbar_image_free_data.part.1+0x1c>)
  40507a:	219a      	movs	r1, #154	; 0x9a
  40507c:	47a0      	blx	r4
  40507e:	bf00      	nop
  405080:	0041131c 	.word	0x0041131c
  405084:	004113b0 	.word	0x004113b0
  405088:	00411340 	.word	0x00411340
  40508c:	00407d65 	.word	0x00407d65

00405090 <zbar_image_free_data>:
    img->crop_h = h;
}

inline void zbar_image_free_data (zbar_image_t *img)
{
    if(!img)
  405090:	2800      	cmp	r0, #0
  405092:	d02f      	beq.n	4050f4 <zbar_image_free_data+0x64>
    img->crop_y = y;
    img->crop_h = h;
}

inline void zbar_image_free_data (zbar_image_t *img)
{
  405094:	b538      	push	{r3, r4, r5, lr}
    if(!img)
        return;
    if(img->src) {
  405096:	6b03      	ldr	r3, [r0, #48]	; 0x30
  405098:	4604      	mov	r4, r0
  40509a:	b1fb      	cbz	r3, 4050dc <zbar_image_free_data+0x4c>
        zbar_image_t *newimg;
        /* replace video image w/new copy */
        assert(img->refcnt); /* FIXME needs lock */
  40509c:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  40509e:	2b00      	cmp	r3, #0
  4050a0:	d02f      	beq.n	405102 <zbar_image_free_data+0x72>
#include "image.h"
#include "refcnt.h"

zbar_image_t *zbar_image_create ()
{
    zbar_image_t *img = calloc(1, sizeof(zbar_image_t));
  4050a2:	2144      	movs	r1, #68	; 0x44
  4050a4:	4b18      	ldr	r3, [pc, #96]	; (405108 <zbar_image_free_data+0x78>)
  4050a6:	2001      	movs	r0, #1
  4050a8:	4798      	blx	r3
  4050aa:	4605      	mov	r5, r0
    _zbar_refcnt_init();
  4050ac:	4b17      	ldr	r3, [pc, #92]	; (40510c <zbar_image_free_data+0x7c>)
  4050ae:	4798      	blx	r3
typedef int refcnt_t;

static inline int _zbar_refcnt (refcnt_t *cnt,
                                int delta)
{
    int rc = (*cnt += delta);
  4050b0:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
  4050b2:	3301      	adds	r3, #1
    assert(rc >= 0);
  4050b4:	2b00      	cmp	r3, #0
typedef int refcnt_t;

static inline int _zbar_refcnt (refcnt_t *cnt,
                                int delta)
{
    int rc = (*cnt += delta);
  4050b6:	62eb      	str	r3, [r5, #44]	; 0x2c
    assert(rc >= 0);
  4050b8:	db21      	blt.n	4050fe <zbar_image_free_data+0x6e>
    if(img->src) {
        zbar_image_t *newimg;
        /* replace video image w/new copy */
        assert(img->refcnt); /* FIXME needs lock */
        newimg = zbar_image_create();
        memcpy(newimg, img, sizeof(zbar_image_t));
  4050ba:	2244      	movs	r2, #68	; 0x44
  4050bc:	4621      	mov	r1, r4
  4050be:	4b14      	ldr	r3, [pc, #80]	; (405110 <zbar_image_free_data+0x80>)
  4050c0:	4628      	mov	r0, r5
  4050c2:	4798      	blx	r3
        /* recycle video image */
        newimg->cleanup(newimg);
  4050c4:	6aab      	ldr	r3, [r5, #40]	; 0x28
  4050c6:	4628      	mov	r0, r5
  4050c8:	4798      	blx	r3
        /* detach old image from src */
        img->cleanup = NULL;
  4050ca:	2300      	movs	r3, #0
        img->src = NULL;
        img->srcidx = -1;
  4050cc:	f04f 32ff 	mov.w	r2, #4294967295
        newimg = zbar_image_create();
        memcpy(newimg, img, sizeof(zbar_image_t));
        /* recycle video image */
        newimg->cleanup(newimg);
        /* detach old image from src */
        img->cleanup = NULL;
  4050d0:	62a3      	str	r3, [r4, #40]	; 0x28
        img->src = NULL;
  4050d2:	6323      	str	r3, [r4, #48]	; 0x30
        img->srcidx = -1;
  4050d4:	6362      	str	r2, [r4, #52]	; 0x34
            cleanup(img);
        }
        else
            free((void*)img->data);
    }
    img->data = NULL;
  4050d6:	2300      	movs	r3, #0
  4050d8:	60e3      	str	r3, [r4, #12]
  4050da:	bd38      	pop	{r3, r4, r5, pc}
        /* detach old image from src */
        img->cleanup = NULL;
        img->src = NULL;
        img->srcidx = -1;
    }
    else if(img->cleanup && img->data) {
  4050dc:	6a83      	ldr	r3, [r0, #40]	; 0x28
  4050de:	2b00      	cmp	r3, #0
  4050e0:	d0f9      	beq.n	4050d6 <zbar_image_free_data+0x46>
  4050e2:	68c1      	ldr	r1, [r0, #12]
  4050e4:	2900      	cmp	r1, #0
  4050e6:	d0f6      	beq.n	4050d6 <zbar_image_free_data+0x46>
        if(img->cleanup != zbar_image_free_data) {
  4050e8:	4a0a      	ldr	r2, [pc, #40]	; (405114 <zbar_image_free_data+0x84>)
  4050ea:	4293      	cmp	r3, r2
  4050ec:	d003      	beq.n	4050f6 <zbar_image_free_data+0x66>
            /* using function address to detect this case is a bad idea;
             * windows link libraries add an extra layer of indirection...
             * this works around that problem (bug #2796277)
             */
            zbar_image_cleanup_handler_t *cleanup = img->cleanup;
            img->cleanup = zbar_image_free_data;
  4050ee:	6282      	str	r2, [r0, #40]	; 0x28
            cleanup(img);
  4050f0:	4798      	blx	r3
  4050f2:	e7f0      	b.n	4050d6 <zbar_image_free_data+0x46>
  4050f4:	4770      	bx	lr
        }
        else
            free((void*)img->data);
  4050f6:	4608      	mov	r0, r1
  4050f8:	4b07      	ldr	r3, [pc, #28]	; (405118 <zbar_image_free_data+0x88>)
  4050fa:	4798      	blx	r3
  4050fc:	e7eb      	b.n	4050d6 <zbar_image_free_data+0x46>
  4050fe:	4b07      	ldr	r3, [pc, #28]	; (40511c <zbar_image_free_data+0x8c>)
  405100:	4798      	blx	r3
  405102:	4b07      	ldr	r3, [pc, #28]	; (405120 <zbar_image_free_data+0x90>)
  405104:	4798      	blx	r3
  405106:	bf00      	nop
  405108:	00407da1 	.word	0x00407da1
  40510c:	00406531 	.word	0x00406531
  405110:	00408ee9 	.word	0x00408ee9
  405114:	00405091 	.word	0x00405091
  405118:	004088bd 	.word	0x004088bd
  40511c:	00405051 	.word	0x00405051
  405120:	00405071 	.word	0x00405071

00405124 <zbar_image_create>:
#include "error.h"
#include "image.h"
#include "refcnt.h"

zbar_image_t *zbar_image_create ()
{
  405124:	b510      	push	{r4, lr}
    zbar_image_t *img = calloc(1, sizeof(zbar_image_t));
  405126:	2144      	movs	r1, #68	; 0x44
  405128:	4b08      	ldr	r3, [pc, #32]	; (40514c <zbar_image_create+0x28>)
  40512a:	2001      	movs	r0, #1
  40512c:	4798      	blx	r3
  40512e:	4604      	mov	r4, r0
    _zbar_refcnt_init();
  405130:	4b07      	ldr	r3, [pc, #28]	; (405150 <zbar_image_create+0x2c>)
  405132:	4798      	blx	r3
typedef int refcnt_t;

static inline int _zbar_refcnt (refcnt_t *cnt,
                                int delta)
{
    int rc = (*cnt += delta);
  405134:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  405136:	3301      	adds	r3, #1
    assert(rc >= 0);
  405138:	2b00      	cmp	r3, #0
typedef int refcnt_t;

static inline int _zbar_refcnt (refcnt_t *cnt,
                                int delta)
{
    int rc = (*cnt += delta);
  40513a:	62e3      	str	r3, [r4, #44]	; 0x2c
    assert(rc >= 0);
  40513c:	db04      	blt.n	405148 <zbar_image_create+0x24>
    _zbar_image_refcnt(img, 1);
    img->srcidx = -1;
  40513e:	f04f 33ff 	mov.w	r3, #4294967295
  405142:	6363      	str	r3, [r4, #52]	; 0x34
    return(img);
}
  405144:	4620      	mov	r0, r4
  405146:	bd10      	pop	{r4, pc}
  405148:	4b02      	ldr	r3, [pc, #8]	; (405154 <zbar_image_create+0x30>)
  40514a:	4798      	blx	r3
  40514c:	00407da1 	.word	0x00407da1
  405150:	00406531 	.word	0x00406531
  405154:	00405051 	.word	0x00405051

00405158 <zbar_image_set_format>:
}

void zbar_image_set_format (zbar_image_t *img,
                            unsigned long fmt)
{
    img->format = fmt;
  405158:	6001      	str	r1, [r0, #0]
  40515a:	4770      	bx	lr

0040515c <zbar_image_set_size>:

void zbar_image_set_size (zbar_image_t *img,
                          unsigned w,
                          unsigned h)
{
    img->crop_x = img->crop_y = 0;
  40515c:	2300      	movs	r3, #0
    img->width = img->crop_w = w;
  40515e:	61c1      	str	r1, [r0, #28]
  405160:	6041      	str	r1, [r0, #4]
    img->height = img->crop_h = h;
  405162:	6202      	str	r2, [r0, #32]
  405164:	6082      	str	r2, [r0, #8]

void zbar_image_set_size (zbar_image_t *img,
                          unsigned w,
                          unsigned h)
{
    img->crop_x = img->crop_y = 0;
  405166:	6183      	str	r3, [r0, #24]
  405168:	6143      	str	r3, [r0, #20]
  40516a:	4770      	bx	lr

0040516c <zbar_image_set_data>:

void zbar_image_set_data (zbar_image_t *img,
                          const void *data,
                          unsigned long len,
                          zbar_image_cleanup_handler_t *cleanup)
{
  40516c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  405170:	4688      	mov	r8, r1
  405172:	4617      	mov	r7, r2
  405174:	461e      	mov	r6, r3
    img->crop_h = h;
}

inline void zbar_image_free_data (zbar_image_t *img)
{
    if(!img)
  405176:	4604      	mov	r4, r0
  405178:	b1e8      	cbz	r0, 4051b6 <zbar_image_set_data+0x4a>
        return;
    if(img->src) {
  40517a:	6b03      	ldr	r3, [r0, #48]	; 0x30
  40517c:	b30b      	cbz	r3, 4051c2 <zbar_image_set_data+0x56>
        zbar_image_t *newimg;
        /* replace video image w/new copy */
        assert(img->refcnt); /* FIXME needs lock */
  40517e:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  405180:	2b00      	cmp	r3, #0
  405182:	d030      	beq.n	4051e6 <zbar_image_set_data+0x7a>
#include "image.h"
#include "refcnt.h"

zbar_image_t *zbar_image_create ()
{
    zbar_image_t *img = calloc(1, sizeof(zbar_image_t));
  405184:	2144      	movs	r1, #68	; 0x44
  405186:	4b19      	ldr	r3, [pc, #100]	; (4051ec <zbar_image_set_data+0x80>)
  405188:	2001      	movs	r0, #1
  40518a:	4798      	blx	r3
  40518c:	4605      	mov	r5, r0
    _zbar_refcnt_init();
  40518e:	4b18      	ldr	r3, [pc, #96]	; (4051f0 <zbar_image_set_data+0x84>)
  405190:	4798      	blx	r3
typedef int refcnt_t;

static inline int _zbar_refcnt (refcnt_t *cnt,
                                int delta)
{
    int rc = (*cnt += delta);
  405192:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
  405194:	3301      	adds	r3, #1
    assert(rc >= 0);
  405196:	2b00      	cmp	r3, #0
typedef int refcnt_t;

static inline int _zbar_refcnt (refcnt_t *cnt,
                                int delta)
{
    int rc = (*cnt += delta);
  405198:	62eb      	str	r3, [r5, #44]	; 0x2c
    assert(rc >= 0);
  40519a:	db22      	blt.n	4051e2 <zbar_image_set_data+0x76>
    if(img->src) {
        zbar_image_t *newimg;
        /* replace video image w/new copy */
        assert(img->refcnt); /* FIXME needs lock */
        newimg = zbar_image_create();
        memcpy(newimg, img, sizeof(zbar_image_t));
  40519c:	2244      	movs	r2, #68	; 0x44
  40519e:	4621      	mov	r1, r4
  4051a0:	4b14      	ldr	r3, [pc, #80]	; (4051f4 <zbar_image_set_data+0x88>)
  4051a2:	4628      	mov	r0, r5
  4051a4:	4798      	blx	r3
        /* recycle video image */
        newimg->cleanup(newimg);
  4051a6:	6aab      	ldr	r3, [r5, #40]	; 0x28
  4051a8:	4628      	mov	r0, r5
  4051aa:	4798      	blx	r3
        /* detach old image from src */
        img->cleanup = NULL;
        img->src = NULL;
  4051ac:	2200      	movs	r2, #0
        img->srcidx = -1;
  4051ae:	f04f 33ff 	mov.w	r3, #4294967295
        memcpy(newimg, img, sizeof(zbar_image_t));
        /* recycle video image */
        newimg->cleanup(newimg);
        /* detach old image from src */
        img->cleanup = NULL;
        img->src = NULL;
  4051b2:	6322      	str	r2, [r4, #48]	; 0x30
        img->srcidx = -1;
  4051b4:	6363      	str	r3, [r4, #52]	; 0x34
                          const void *data,
                          unsigned long len,
                          zbar_image_cleanup_handler_t *cleanup)
{
    zbar_image_free_data(img);
    img->data = data;
  4051b6:	f8c4 800c 	str.w	r8, [r4, #12]
    img->datalen = len;
  4051ba:	6127      	str	r7, [r4, #16]
    img->cleanup = cleanup;
  4051bc:	62a6      	str	r6, [r4, #40]	; 0x28
  4051be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        /* detach old image from src */
        img->cleanup = NULL;
        img->src = NULL;
        img->srcidx = -1;
    }
    else if(img->cleanup && img->data) {
  4051c2:	6a83      	ldr	r3, [r0, #40]	; 0x28
  4051c4:	2b00      	cmp	r3, #0
  4051c6:	d0f6      	beq.n	4051b6 <zbar_image_set_data+0x4a>
  4051c8:	68c1      	ldr	r1, [r0, #12]
  4051ca:	2900      	cmp	r1, #0
  4051cc:	d0f3      	beq.n	4051b6 <zbar_image_set_data+0x4a>
        if(img->cleanup != zbar_image_free_data) {
  4051ce:	4a0a      	ldr	r2, [pc, #40]	; (4051f8 <zbar_image_set_data+0x8c>)
  4051d0:	4293      	cmp	r3, r2
  4051d2:	d002      	beq.n	4051da <zbar_image_set_data+0x6e>
            /* using function address to detect this case is a bad idea;
             * windows link libraries add an extra layer of indirection...
             * this works around that problem (bug #2796277)
             */
            zbar_image_cleanup_handler_t *cleanup = img->cleanup;
            img->cleanup = zbar_image_free_data;
  4051d4:	6282      	str	r2, [r0, #40]	; 0x28
            cleanup(img);
  4051d6:	4798      	blx	r3
  4051d8:	e7ed      	b.n	4051b6 <zbar_image_set_data+0x4a>
        }
        else
            free((void*)img->data);
  4051da:	4608      	mov	r0, r1
  4051dc:	4b07      	ldr	r3, [pc, #28]	; (4051fc <zbar_image_set_data+0x90>)
  4051de:	4798      	blx	r3
  4051e0:	e7e9      	b.n	4051b6 <zbar_image_set_data+0x4a>
  4051e2:	4b07      	ldr	r3, [pc, #28]	; (405200 <zbar_image_set_data+0x94>)
  4051e4:	4798      	blx	r3
  4051e6:	4b07      	ldr	r3, [pc, #28]	; (405204 <zbar_image_set_data+0x98>)
  4051e8:	4798      	blx	r3
  4051ea:	bf00      	nop
  4051ec:	00407da1 	.word	0x00407da1
  4051f0:	00406531 	.word	0x00406531
  4051f4:	00408ee9 	.word	0x00408ee9
  4051f8:	00405091 	.word	0x00405091
  4051fc:	004088bd 	.word	0x004088bd
  405200:	00405051 	.word	0x00405051
  405204:	00405071 	.word	0x00405071

00405208 <zbar_image_first_symbol>:
    img->syms = (zbar_symbol_set_t*)syms;
}

const zbar_symbol_t *zbar_image_first_symbol (const zbar_image_t *img)
{
    return((img->syms) ? img->syms->head : NULL);
  405208:	6c00      	ldr	r0, [r0, #64]	; 0x40
  40520a:	b100      	cbz	r0, 40520e <zbar_image_first_symbol+0x6>
  40520c:	6880      	ldr	r0, [r0, #8]
}
  40520e:	4770      	bx	lr

00405210 <_zbar_refcnt.part.0>:

#else

typedef int refcnt_t;

static inline int _zbar_refcnt (refcnt_t *cnt,
  405210:	b508      	push	{r3, lr}
                                int delta)
{
    int rc = (*cnt += delta);
    assert(rc >= 0);
  405212:	4803      	ldr	r0, [pc, #12]	; (405220 <_zbar_refcnt.part.0+0x10>)
  405214:	4a03      	ldr	r2, [pc, #12]	; (405224 <_zbar_refcnt.part.0+0x14>)
  405216:	4b04      	ldr	r3, [pc, #16]	; (405228 <_zbar_refcnt.part.0+0x18>)
  405218:	4c04      	ldr	r4, [pc, #16]	; (40522c <_zbar_refcnt.part.0+0x1c>)
  40521a:	2157      	movs	r1, #87	; 0x57
  40521c:	47a0      	blx	r4
  40521e:	bf00      	nop
  405220:	004112e8 	.word	0x004112e8
  405224:	004116ac 	.word	0x004116ac
  405228:	00411314 	.word	0x00411314
  40522c:	00407d65 	.word	0x00407d65

00405230 <_zbar_image_scanner_alloc_sym.part.3>:
            iscn->syms = syms;
    }
}

inline zbar_symbol_t*
_zbar_image_scanner_alloc_sym (zbar_image_scanner_t *iscn,
  405230:	b508      	push	{r3, lr}
        }

    if(sym) {
        iscn->recycle[i].head = sym->next;
        sym->next = NULL;
        assert(iscn->recycle[i].nsyms);
  405232:	4803      	ldr	r0, [pc, #12]	; (405240 <_zbar_image_scanner_alloc_sym.part.3+0x10>)
  405234:	4a03      	ldr	r2, [pc, #12]	; (405244 <_zbar_image_scanner_alloc_sym.part.3+0x14>)
  405236:	4b04      	ldr	r3, [pc, #16]	; (405248 <_zbar_image_scanner_alloc_sym.part.3+0x18>)
  405238:	4c04      	ldr	r4, [pc, #16]	; (40524c <_zbar_image_scanner_alloc_sym.part.3+0x1c>)
  40523a:	21e8      	movs	r1, #232	; 0xe8
  40523c:	47a0      	blx	r4
  40523e:	bf00      	nop
  405240:	004113e4 	.word	0x004113e4
  405244:	0041168c 	.word	0x0041168c
  405248:	00411410 	.word	0x00411410
  40524c:	00407d65 	.word	0x00407d65

00405250 <_zbar_image_scanner_recycle_syms>:
#endif
};

void _zbar_image_scanner_recycle_syms (zbar_image_scanner_t *iscn,
                                       zbar_symbol_t *sym)
{
  405250:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    zbar_symbol_t *next = NULL;
    for(; sym; sym = next) {
  405254:	460c      	mov	r4, r1
  405256:	2900      	cmp	r1, #0
  405258:	d057      	beq.n	40530a <_zbar_image_scanner_recycle_syms+0xba>
  40525a:	4605      	mov	r5, r0
            for(i = 0; i < RECYCLE_BUCKETS; i++)
                if(sym->data_alloc < 1 << (i * 2))
                    break;
            if(i == RECYCLE_BUCKETS) {
                assert(sym->data);
                free(sym->data);
  40525c:	f8df 8108 	ldr.w	r8, [pc, #264]	; 405368 <_zbar_image_scanner_recycle_syms+0x118>
                sym->data = NULL;
  405260:	2600      	movs	r6, #0
  405262:	e00b      	b.n	40527c <_zbar_image_scanner_recycle_syms+0x2c>
typedef int refcnt_t;

static inline int _zbar_refcnt (refcnt_t *cnt,
                                int delta)
{
    int rc = (*cnt += delta);
  405264:	3b01      	subs	r3, #1
    assert(rc >= 0);
  405266:	2b00      	cmp	r3, #0
typedef int refcnt_t;

static inline int _zbar_refcnt (refcnt_t *cnt,
                                int delta)
{
    int rc = (*cnt += delta);
  405268:	62a3      	str	r3, [r4, #40]	; 0x28
    assert(rc >= 0);
  40526a:	db50      	blt.n	40530e <_zbar_image_scanner_recycle_syms+0xbe>
                                       zbar_symbol_t *sym)
{
    zbar_symbol_t *next = NULL;
    for(; sym; sym = next) {
        next = sym->next;
        if(sym->refcnt && _zbar_refcnt(&sym->refcnt, -1)) {
  40526c:	d00b      	beq.n	405286 <_zbar_image_scanner_recycle_syms+0x36>
            /* unlink referenced symbol */
            /* FIXME handle outstanding component refs (currently unsupported)
             */
            assert(sym->data_alloc);
  40526e:	68e3      	ldr	r3, [r4, #12]
  405270:	2b00      	cmp	r3, #0
  405272:	d05e      	beq.n	405332 <_zbar_image_scanner_recycle_syms+0xe2>
            sym->next = NULL;
  405274:	62e6      	str	r6, [r4, #44]	; 0x2c

void _zbar_image_scanner_recycle_syms (zbar_image_scanner_t *iscn,
                                       zbar_symbol_t *sym)
{
    zbar_symbol_t *next = NULL;
    for(; sym; sym = next) {
  405276:	464c      	mov	r4, r9
  405278:	2c00      	cmp	r4, #0
  40527a:	d038      	beq.n	4052ee <_zbar_image_scanner_recycle_syms+0x9e>
        next = sym->next;
        if(sym->refcnt && _zbar_refcnt(&sym->refcnt, -1)) {
  40527c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
void _zbar_image_scanner_recycle_syms (zbar_image_scanner_t *iscn,
                                       zbar_symbol_t *sym)
{
    zbar_symbol_t *next = NULL;
    for(; sym; sym = next) {
        next = sym->next;
  40527e:	f8d4 902c 	ldr.w	r9, [r4, #44]	; 0x2c
        if(sym->refcnt && _zbar_refcnt(&sym->refcnt, -1)) {
  405282:	2b00      	cmp	r3, #0
  405284:	d1ee      	bne.n	405264 <_zbar_image_scanner_recycle_syms+0x14>
        }
        else {
            int i;
            recycle_bucket_t *bucket;
            /* recycle unreferenced symbol */
            if(!sym->data_alloc) {
  405286:	68e2      	ldr	r2, [r4, #12]
                sym->data = NULL;
                sym->datalen = 0;
            }
            if(sym->syms) {
  405288:	6b23      	ldr	r3, [r4, #48]	; 0x30
        }
        else {
            int i;
            recycle_bucket_t *bucket;
            /* recycle unreferenced symbol */
            if(!sym->data_alloc) {
  40528a:	2a00      	cmp	r2, #0
  40528c:	d131      	bne.n	4052f2 <_zbar_image_scanner_recycle_syms+0xa2>
                sym->data = NULL;
  40528e:	6162      	str	r2, [r4, #20]
                sym->datalen = 0;
  405290:	6122      	str	r2, [r4, #16]
            }
            if(sym->syms) {
  405292:	b30b      	cbz	r3, 4052d8 <_zbar_image_scanner_recycle_syms+0x88>
typedef int refcnt_t;

static inline int _zbar_refcnt (refcnt_t *cnt,
                                int delta)
{
    int rc = (*cnt += delta);
  405294:	681a      	ldr	r2, [r3, #0]
  405296:	1e57      	subs	r7, r2, #1
    assert(rc >= 0);
  405298:	2f00      	cmp	r7, #0
typedef int refcnt_t;

static inline int _zbar_refcnt (refcnt_t *cnt,
                                int delta)
{
    int rc = (*cnt += delta);
  40529a:	601f      	str	r7, [r3, #0]
    assert(rc >= 0);
  40529c:	db37      	blt.n	40530e <_zbar_image_scanner_recycle_syms+0xbe>
                if(_zbar_refcnt(&sym->syms->refcnt, -1))
  40529e:	d13c      	bne.n	40531a <_zbar_image_scanner_recycle_syms+0xca>
                    assert(0);
                _zbar_image_scanner_recycle_syms(iscn, sym->syms->head);
  4052a0:	6b23      	ldr	r3, [r4, #48]	; 0x30
  4052a2:	4628      	mov	r0, r5
  4052a4:	6899      	ldr	r1, [r3, #8]
  4052a6:	f7ff ffd3 	bl	405250 <_zbar_image_scanner_recycle_syms>
                sym->syms->head = NULL;
  4052aa:	6b22      	ldr	r2, [r4, #48]	; 0x30
                _zbar_symbol_set_free(sym->syms);
  4052ac:	4b24      	ldr	r3, [pc, #144]	; (405340 <_zbar_image_scanner_recycle_syms+0xf0>)
            }
            if(sym->syms) {
                if(_zbar_refcnt(&sym->syms->refcnt, -1))
                    assert(0);
                _zbar_image_scanner_recycle_syms(iscn, sym->syms->head);
                sym->syms->head = NULL;
  4052ae:	6097      	str	r7, [r2, #8]
                _zbar_symbol_set_free(sym->syms);
  4052b0:	6b20      	ldr	r0, [r4, #48]	; 0x30
  4052b2:	4798      	blx	r3
  4052b4:	68e2      	ldr	r2, [r4, #12]
                sym->syms = NULL;
  4052b6:	6327      	str	r7, [r4, #48]	; 0x30
            }
            for(i = 0; i < RECYCLE_BUCKETS; i++)
                if(sym->data_alloc < 1 << (i * 2))
  4052b8:	b16a      	cbz	r2, 4052d6 <_zbar_image_scanner_recycle_syms+0x86>
  4052ba:	0893      	lsrs	r3, r2, #2
  4052bc:	d01d      	beq.n	4052fa <_zbar_image_scanner_recycle_syms+0xaa>
  4052be:	0913      	lsrs	r3, r2, #4
  4052c0:	d01d      	beq.n	4052fe <_zbar_image_scanner_recycle_syms+0xae>
  4052c2:	0993      	lsrs	r3, r2, #6
  4052c4:	d01d      	beq.n	405302 <_zbar_image_scanner_recycle_syms+0xb2>
  4052c6:	0a13      	lsrs	r3, r2, #8
  4052c8:	d01d      	beq.n	405306 <_zbar_image_scanner_recycle_syms+0xb6>
                    break;
            if(i == RECYCLE_BUCKETS) {
                assert(sym->data);
  4052ca:	6960      	ldr	r0, [r4, #20]
  4052cc:	2800      	cmp	r0, #0
  4052ce:	d02a      	beq.n	405326 <_zbar_image_scanner_recycle_syms+0xd6>
                free(sym->data);
  4052d0:	47c0      	blx	r8
                sym->data = NULL;
  4052d2:	6166      	str	r6, [r4, #20]
                sym->data_alloc = 0;
  4052d4:	60e6      	str	r6, [r4, #12]
                i = 0;
  4052d6:	2300      	movs	r3, #0
  4052d8:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
            }
            bucket = &iscn->recycle[i];
            /* FIXME cap bucket fill */
            bucket->nsyms++;
  4052dc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
            sym->next = bucket->head;
  4052de:	6b59      	ldr	r1, [r3, #52]	; 0x34
                sym->data_alloc = 0;
                i = 0;
            }
            bucket = &iscn->recycle[i];
            /* FIXME cap bucket fill */
            bucket->nsyms++;
  4052e0:	3201      	adds	r2, #1
  4052e2:	631a      	str	r2, [r3, #48]	; 0x30
            sym->next = bucket->head;
  4052e4:	62e1      	str	r1, [r4, #44]	; 0x2c
            bucket->head = sym;
  4052e6:	635c      	str	r4, [r3, #52]	; 0x34

void _zbar_image_scanner_recycle_syms (zbar_image_scanner_t *iscn,
                                       zbar_symbol_t *sym)
{
    zbar_symbol_t *next = NULL;
    for(; sym; sym = next) {
  4052e8:	464c      	mov	r4, r9
  4052ea:	2c00      	cmp	r4, #0
  4052ec:	d1c6      	bne.n	40527c <_zbar_image_scanner_recycle_syms+0x2c>
  4052ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
            /* recycle unreferenced symbol */
            if(!sym->data_alloc) {
                sym->data = NULL;
                sym->datalen = 0;
            }
            if(sym->syms) {
  4052f2:	2b00      	cmp	r3, #0
  4052f4:	d1ce      	bne.n	405294 <_zbar_image_scanner_recycle_syms+0x44>
                sym->syms->head = NULL;
                _zbar_symbol_set_free(sym->syms);
                sym->syms = NULL;
            }
            for(i = 0; i < RECYCLE_BUCKETS; i++)
                if(sym->data_alloc < 1 << (i * 2))
  4052f6:	0893      	lsrs	r3, r2, #2
  4052f8:	d1e1      	bne.n	4052be <_zbar_image_scanner_recycle_syms+0x6e>
                _zbar_image_scanner_recycle_syms(iscn, sym->syms->head);
                sym->syms->head = NULL;
                _zbar_symbol_set_free(sym->syms);
                sym->syms = NULL;
            }
            for(i = 0; i < RECYCLE_BUCKETS; i++)
  4052fa:	2301      	movs	r3, #1
  4052fc:	e7ec      	b.n	4052d8 <_zbar_image_scanner_recycle_syms+0x88>
  4052fe:	2302      	movs	r3, #2
  405300:	e7ea      	b.n	4052d8 <_zbar_image_scanner_recycle_syms+0x88>
  405302:	2303      	movs	r3, #3
  405304:	e7e8      	b.n	4052d8 <_zbar_image_scanner_recycle_syms+0x88>
  405306:	2304      	movs	r3, #4
  405308:	e7e6      	b.n	4052d8 <_zbar_image_scanner_recycle_syms+0x88>
  40530a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40530e:	480d      	ldr	r0, [pc, #52]	; (405344 <_zbar_image_scanner_recycle_syms+0xf4>)
  405310:	4a0d      	ldr	r2, [pc, #52]	; (405348 <_zbar_image_scanner_recycle_syms+0xf8>)
  405312:	4b0e      	ldr	r3, [pc, #56]	; (40534c <_zbar_image_scanner_recycle_syms+0xfc>)
  405314:	4c0e      	ldr	r4, [pc, #56]	; (405350 <_zbar_image_scanner_recycle_syms+0x100>)
  405316:	2157      	movs	r1, #87	; 0x57
  405318:	47a0      	blx	r4
                sym->data = NULL;
                sym->datalen = 0;
            }
            if(sym->syms) {
                if(_zbar_refcnt(&sym->syms->refcnt, -1))
                    assert(0);
  40531a:	480e      	ldr	r0, [pc, #56]	; (405354 <_zbar_image_scanner_recycle_syms+0x104>)
  40531c:	4a0e      	ldr	r2, [pc, #56]	; (405358 <_zbar_image_scanner_recycle_syms+0x108>)
  40531e:	4b0f      	ldr	r3, [pc, #60]	; (40535c <_zbar_image_scanner_recycle_syms+0x10c>)
  405320:	4c0b      	ldr	r4, [pc, #44]	; (405350 <_zbar_image_scanner_recycle_syms+0x100>)
  405322:	2192      	movs	r1, #146	; 0x92
  405324:	47a0      	blx	r4
            }
            for(i = 0; i < RECYCLE_BUCKETS; i++)
                if(sym->data_alloc < 1 << (i * 2))
                    break;
            if(i == RECYCLE_BUCKETS) {
                assert(sym->data);
  405326:	480b      	ldr	r0, [pc, #44]	; (405354 <_zbar_image_scanner_recycle_syms+0x104>)
  405328:	4a0b      	ldr	r2, [pc, #44]	; (405358 <_zbar_image_scanner_recycle_syms+0x108>)
  40532a:	4b0d      	ldr	r3, [pc, #52]	; (405360 <_zbar_image_scanner_recycle_syms+0x110>)
  40532c:	4c08      	ldr	r4, [pc, #32]	; (405350 <_zbar_image_scanner_recycle_syms+0x100>)
  40532e:	219c      	movs	r1, #156	; 0x9c
  405330:	47a0      	blx	r4
        next = sym->next;
        if(sym->refcnt && _zbar_refcnt(&sym->refcnt, -1)) {
            /* unlink referenced symbol */
            /* FIXME handle outstanding component refs (currently unsupported)
             */
            assert(sym->data_alloc);
  405332:	4808      	ldr	r0, [pc, #32]	; (405354 <_zbar_image_scanner_recycle_syms+0x104>)
  405334:	4a08      	ldr	r2, [pc, #32]	; (405358 <_zbar_image_scanner_recycle_syms+0x108>)
  405336:	4b0b      	ldr	r3, [pc, #44]	; (405364 <_zbar_image_scanner_recycle_syms+0x114>)
  405338:	4c05      	ldr	r4, [pc, #20]	; (405350 <_zbar_image_scanner_recycle_syms+0x100>)
  40533a:	2185      	movs	r1, #133	; 0x85
  40533c:	47a0      	blx	r4
  40533e:	bf00      	nop
  405340:	0040695d 	.word	0x0040695d
  405344:	004112e8 	.word	0x004112e8
  405348:	004116ac 	.word	0x004116ac
  40534c:	00411314 	.word	0x00411314
  405350:	00407d65 	.word	0x00407d65
  405354:	004113e4 	.word	0x004113e4
  405358:	004116bc 	.word	0x004116bc
  40535c:	004119f8 	.word	0x004119f8
  405360:	00411438 	.word	0x00411438
  405364:	00411428 	.word	0x00411428
  405368:	004088bd 	.word	0x004088bd

0040536c <_zbar_image_scanner_add_sym>:
        sym->cache_count = 0;
}

void _zbar_image_scanner_add_sym(zbar_image_scanner_t *iscn,
                                 zbar_symbol_t *sym)
{
  40536c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
}

static inline void cache_sym (zbar_image_scanner_t *iscn,
                              zbar_symbol_t *sym)
{
    if(iscn->enable_cache) {
  405370:	6d83      	ldr	r3, [r0, #88]	; 0x58
        sym->cache_count = 0;
}

void _zbar_image_scanner_add_sym(zbar_image_scanner_t *iscn,
                                 zbar_symbol_t *sym)
{
  405372:	4683      	mov	fp, r0
  405374:	460d      	mov	r5, r1
}

static inline void cache_sym (zbar_image_scanner_t *iscn,
                              zbar_symbol_t *sym)
{
    if(iscn->enable_cache) {
  405376:	2b00      	cmp	r3, #0
  405378:	f040 80a1 	bne.w	4054be <_zbar_image_scanner_add_sym+0x152>
            entry->cache_count++;

        sym->cache_count = entry->cache_count;
    }
    else
        sym->cache_count = 0;
  40537c:	638b      	str	r3, [r1, #56]	; 0x38
                                 zbar_symbol_t *sym)
{
    zbar_symbol_set_t *syms;
    cache_sym(iscn, sym);

    syms = iscn->syms;
  40537e:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    if(sym->cache_count || !syms->tail) {
  405380:	68da      	ldr	r2, [r3, #12]
  405382:	2a00      	cmp	r2, #0
  405384:	f000 808e 	beq.w	4054a4 <_zbar_image_scanner_add_sym+0x138>
        sym->next = syms->head;
        syms->head = sym;
    }
    else {
        sym->next = syms->tail->next;
  405388:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
  40538a:	62ea      	str	r2, [r5, #44]	; 0x2c
        syms->tail->next = sym;
  40538c:	68da      	ldr	r2, [r3, #12]
  40538e:	62d5      	str	r5, [r2, #44]	; 0x2c
    }

    if(!sym->cache_count)
  405390:	6baa      	ldr	r2, [r5, #56]	; 0x38
  405392:	2a00      	cmp	r2, #0
  405394:	f040 808d 	bne.w	4054b2 <_zbar_image_scanner_add_sym+0x146>
        syms->nsyms++;
  405398:	685a      	ldr	r2, [r3, #4]
  40539a:	3201      	adds	r2, #1
  40539c:	605a      	str	r2, [r3, #4]
typedef int refcnt_t;

static inline int _zbar_refcnt (refcnt_t *cnt,
                                int delta)
{
    int rc = (*cnt += delta);
  40539e:	6aab      	ldr	r3, [r5, #40]	; 0x28
  4053a0:	3301      	adds	r3, #1
    assert(rc >= 0);
  4053a2:	2b00      	cmp	r3, #0
typedef int refcnt_t;

static inline int _zbar_refcnt (refcnt_t *cnt,
                                int delta)
{
    int rc = (*cnt += delta);
  4053a4:	62ab      	str	r3, [r5, #40]	; 0x28
    assert(rc >= 0);
  4053a6:	f2c0 80eb 	blt.w	405580 <_zbar_image_scanner_add_sym+0x214>
  4053aa:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
        uint32_t age, near_thresh, far_thresh, dup;
        zbar_symbol_t *entry = cache_lookup(iscn, sym);
        if(!entry) {
            /* FIXME reuse sym */
            entry = _zbar_image_scanner_alloc_sym(iscn, sym->type,
                                                  sym->datalen + 1);
  4053ae:	692f      	ldr	r7, [r5, #16]
  4053b0:	3701      	adds	r7, #1
{
    /* recycle old or alloc new symbol */
    zbar_symbol_t *sym = NULL;
    int i;
    for(i = 0; i < RECYCLE_BUCKETS - 1; i++)
        if(datalen <= 1 << (i * 2))
  4053b2:	2f01      	cmp	r7, #1
  4053b4:	dd25      	ble.n	405402 <_zbar_image_scanner_add_sym+0x96>
  4053b6:	2f04      	cmp	r7, #4
  4053b8:	f340 80bd 	ble.w	405536 <_zbar_image_scanner_add_sym+0x1ca>
  4053bc:	2f10      	cmp	r7, #16
  4053be:	f340 80dd 	ble.w	40557c <_zbar_image_scanner_add_sym+0x210>
                               int datalen)
{
    /* recycle old or alloc new symbol */
    zbar_symbol_t *sym = NULL;
    int i;
    for(i = 0; i < RECYCLE_BUCKETS - 1; i++)
  4053c2:	2f40      	cmp	r7, #64	; 0x40
  4053c4:	bfcc      	ite	gt
  4053c6:	2304      	movgt	r3, #4
  4053c8:	2303      	movle	r3, #3
        if(datalen <= 1 << (i * 2))
            break;

    for(; i > 0; i--)
        if((sym = iscn->recycle[i].head)) {
  4053ca:	eb0b 02c3 	add.w	r2, fp, r3, lsl #3
  4053ce:	6b54      	ldr	r4, [r2, #52]	; 0x34
  4053d0:	2c00      	cmp	r4, #0
  4053d2:	f040 80d1 	bne.w	405578 <_zbar_image_scanner_add_sym+0x20c>
  4053d6:	eb0b 01c3 	add.w	r1, fp, r3, lsl #3
    int i;
    for(i = 0; i < RECYCLE_BUCKETS - 1; i++)
        if(datalen <= 1 << (i * 2))
            break;

    for(; i > 0; i--)
  4053da:	1e5a      	subs	r2, r3, #1
        if((sym = iscn->recycle[i].head)) {
  4053dc:	6acc      	ldr	r4, [r1, #44]	; 0x2c
  4053de:	2c00      	cmp	r4, #0
  4053e0:	f040 80af 	bne.w	405542 <_zbar_image_scanner_add_sym+0x1d6>
    int i;
    for(i = 0; i < RECYCLE_BUCKETS - 1; i++)
        if(datalen <= 1 << (i * 2))
            break;

    for(; i > 0; i--)
  4053e4:	1e9a      	subs	r2, r3, #2
  4053e6:	d00c      	beq.n	405402 <_zbar_image_scanner_add_sym+0x96>
        if((sym = iscn->recycle[i].head)) {
  4053e8:	eb0b 01c3 	add.w	r1, fp, r3, lsl #3
  4053ec:	6a4c      	ldr	r4, [r1, #36]	; 0x24
  4053ee:	2c00      	cmp	r4, #0
  4053f0:	f040 80a7 	bne.w	405542 <_zbar_image_scanner_add_sym+0x1d6>
    int i;
    for(i = 0; i < RECYCLE_BUCKETS - 1; i++)
        if(datalen <= 1 << (i * 2))
            break;

    for(; i > 0; i--)
  4053f4:	2b03      	cmp	r3, #3
  4053f6:	d004      	beq.n	405402 <_zbar_image_scanner_add_sym+0x96>
        if((sym = iscn->recycle[i].head)) {
  4053f8:	f8db 403c 	ldr.w	r4, [fp, #60]	; 0x3c
  4053fc:	2c00      	cmp	r4, #0
  4053fe:	f040 80c1 	bne.w	405584 <_zbar_image_scanner_add_sym+0x218>
        sym->next = NULL;
        assert(iscn->recycle[i].nsyms);
        iscn->recycle[i].nsyms--;
    }
    else {
        sym = calloc(1, sizeof(zbar_symbol_t));
  405402:	4b65      	ldr	r3, [pc, #404]	; (405598 <_zbar_image_scanner_add_sym+0x22c>)
  405404:	2001      	movs	r0, #1
  405406:	2140      	movs	r1, #64	; 0x40
  405408:	4798      	blx	r3
        STAT(sym_new);
  40540a:	f8db 30d4 	ldr.w	r3, [fp, #212]	; 0xd4
  40540e:	3301      	adds	r3, #1
        sym->next = NULL;
        assert(iscn->recycle[i].nsyms);
        iscn->recycle[i].nsyms--;
    }
    else {
        sym = calloc(1, sizeof(zbar_symbol_t));
  405410:	4604      	mov	r4, r0
        STAT(sym_new);
  405412:	f8cb 30d4 	str.w	r3, [fp, #212]	; 0xd4
    }

    /* init new symbol */
    sym->type = type;
    sym->quality = 1;
    sym->npts = 0;
  405416:	2300      	movs	r3, #0
    sym->orient = ZBAR_ORIENT_UNKNOWN;
  405418:	22ff      	movs	r2, #255	; 0xff
        STAT(sym_new);
    }

    /* init new symbol */
    sym->type = type;
    sym->quality = 1;
  40541a:	2101      	movs	r1, #1
    sym->npts = 0;
  40541c:	61e3      	str	r3, [r4, #28]
    sym->orient = ZBAR_ORIENT_UNKNOWN;
    sym->cache_count = 0;
  40541e:	63a3      	str	r3, [r4, #56]	; 0x38
        sym = calloc(1, sizeof(zbar_symbol_t));
        STAT(sym_new);
    }

    /* init new symbol */
    sym->type = type;
  405420:	8026      	strh	r6, [r4, #0]
    sym->quality = 1;
  405422:	63e1      	str	r1, [r4, #60]	; 0x3c
    sym->npts = 0;
    sym->orient = ZBAR_ORIENT_UNKNOWN;
  405424:	f884 2024 	strb.w	r2, [r4, #36]	; 0x24
    sym->cache_count = 0;
    sym->time = iscn->time;
    assert(!sym->syms);
  405428:	6b23      	ldr	r3, [r4, #48]	; 0x30
    sym->type = type;
    sym->quality = 1;
    sym->npts = 0;
    sym->orient = ZBAR_ORIENT_UNKNOWN;
    sym->cache_count = 0;
    sym->time = iscn->time;
  40542a:	f8db 2010 	ldr.w	r2, [fp, #16]
  40542e:	6362      	str	r2, [r4, #52]	; 0x34
    assert(!sym->syms);
  405430:	2b00      	cmp	r3, #0
  405432:	f040 80a9 	bne.w	405588 <_zbar_image_scanner_add_sym+0x21c>

    if(datalen > 0) {
  405436:	2f00      	cmp	r7, #0
  405438:	f340 8095 	ble.w	405566 <_zbar_image_scanner_add_sym+0x1fa>
        sym->datalen = datalen - 1;
        if(sym->data_alloc < datalen) {
  40543c:	68e3      	ldr	r3, [r4, #12]
            if(sym->data)
  40543e:	6960      	ldr	r0, [r4, #20]
    sym->cache_count = 0;
    sym->time = iscn->time;
    assert(!sym->syms);

    if(datalen > 0) {
        sym->datalen = datalen - 1;
  405440:	1e7a      	subs	r2, r7, #1
        if(sym->data_alloc < datalen) {
  405442:	429f      	cmp	r7, r3
    sym->cache_count = 0;
    sym->time = iscn->time;
    assert(!sym->syms);

    if(datalen > 0) {
        sym->datalen = datalen - 1;
  405444:	6122      	str	r2, [r4, #16]
        if(sym->data_alloc < datalen) {
  405446:	d907      	bls.n	405458 <_zbar_image_scanner_add_sym+0xec>
            if(sym->data)
  405448:	b108      	cbz	r0, 40544e <_zbar_image_scanner_add_sym+0xe2>
                free(sym->data);
  40544a:	4b54      	ldr	r3, [pc, #336]	; (40559c <_zbar_image_scanner_add_sym+0x230>)
  40544c:	4798      	blx	r3
            sym->data_alloc = datalen;
  40544e:	60e7      	str	r7, [r4, #12]
            sym->data = malloc(datalen);
  405450:	4638      	mov	r0, r7
  405452:	4b53      	ldr	r3, [pc, #332]	; (4055a0 <_zbar_image_scanner_add_sym+0x234>)
  405454:	4798      	blx	r3
  405456:	6160      	str	r0, [r4, #20]
        zbar_symbol_t *entry = cache_lookup(iscn, sym);
        if(!entry) {
            /* FIXME reuse sym */
            entry = _zbar_image_scanner_alloc_sym(iscn, sym->type,
                                                  sym->datalen + 1);
            entry->configs = sym->configs;
  405458:	686b      	ldr	r3, [r5, #4]
  40545a:	6063      	str	r3, [r4, #4]
            entry->modifiers = sym->modifiers;
  40545c:	68ab      	ldr	r3, [r5, #8]
  40545e:	60a3      	str	r3, [r4, #8]
            memcpy(entry->data, sym->data, sym->datalen);
  405460:	692a      	ldr	r2, [r5, #16]
  405462:	4b50      	ldr	r3, [pc, #320]	; (4055a4 <_zbar_image_scanner_add_sym+0x238>)
  405464:	6969      	ldr	r1, [r5, #20]
  405466:	4798      	blx	r3
            entry->time = sym->time - CACHE_HYSTERESIS;
  405468:	6b6b      	ldr	r3, [r5, #52]	; 0x34
            entry->cache_count = 0;
  40546a:	2200      	movs	r2, #0
            entry = _zbar_image_scanner_alloc_sym(iscn, sym->type,
                                                  sym->datalen + 1);
            entry->configs = sym->configs;
            entry->modifiers = sym->modifiers;
            memcpy(entry->data, sym->data, sym->datalen);
            entry->time = sym->time - CACHE_HYSTERESIS;
  40546c:	f5a3 63fa 	sub.w	r3, r3, #2000	; 0x7d0
  405470:	6363      	str	r3, [r4, #52]	; 0x34
            entry->cache_count = 0;
  405472:	63a2      	str	r2, [r4, #56]	; 0x38
            /* add to cache */
            entry->next = iscn->cache;
  405474:	f8db 305c 	ldr.w	r3, [fp, #92]	; 0x5c
  405478:	62e3      	str	r3, [r4, #44]	; 0x2c
            iscn->cache = entry;
  40547a:	f8cb 405c 	str.w	r4, [fp, #92]	; 0x5c
        /* consistency check and hysteresis */
        age = sym->time - entry->time;
        entry->time = sym->time;
        near_thresh = (age < CACHE_PROXIMITY);
        far_thresh = (age >= CACHE_HYSTERESIS);
        dup = (entry->cache_count >= 0);
  40547e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
            entry->next = iscn->cache;
            iscn->cache = entry;
        }

        /* consistency check and hysteresis */
        age = sym->time - entry->time;
  405480:	6b6b      	ldr	r3, [r5, #52]	; 0x34
  405482:	6b61      	ldr	r1, [r4, #52]	; 0x34
        entry->time = sym->time;
  405484:	6363      	str	r3, [r4, #52]	; 0x34
        near_thresh = (age < CACHE_PROXIMITY);
        far_thresh = (age >= CACHE_HYSTERESIS);
        dup = (entry->cache_count >= 0);
        if((!dup && !near_thresh) || far_thresh) {
  405486:	2a00      	cmp	r2, #0
            entry->next = iscn->cache;
            iscn->cache = entry;
        }

        /* consistency check and hysteresis */
        age = sym->time - entry->time;
  405488:	eba3 0301 	sub.w	r3, r3, r1
        entry->time = sym->time;
        near_thresh = (age < CACHE_PROXIMITY);
        far_thresh = (age >= CACHE_HYSTERESIS);
        dup = (entry->cache_count >= 0);
        if((!dup && !near_thresh) || far_thresh) {
  40548c:	db47      	blt.n	40551e <_zbar_image_scanner_add_sym+0x1b2>
  40548e:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
  405492:	d247      	bcs.n	405524 <_zbar_image_scanner_add_sym+0x1b8>
            int type = sym->type;
            int h = _zbar_get_symbol_hash(type);
            entry->cache_count = -iscn->sym_configs[0][h];
        }
        else if(dup || near_thresh)
            entry->cache_count++;
  405494:	3201      	adds	r2, #1
  405496:	63a2      	str	r2, [r4, #56]	; 0x38

        sym->cache_count = entry->cache_count;
  405498:	63aa      	str	r2, [r5, #56]	; 0x38
                                 zbar_symbol_t *sym)
{
    zbar_symbol_set_t *syms;
    cache_sym(iscn, sym);

    syms = iscn->syms;
  40549a:	f8db 302c 	ldr.w	r3, [fp, #44]	; 0x2c
    if(sym->cache_count || !syms->tail) {
  40549e:	2a00      	cmp	r2, #0
  4054a0:	f43f af6e 	beq.w	405380 <_zbar_image_scanner_add_sym+0x14>
        sym->next = syms->head;
  4054a4:	689a      	ldr	r2, [r3, #8]
  4054a6:	62ea      	str	r2, [r5, #44]	; 0x2c
        syms->head = sym;
  4054a8:	609d      	str	r5, [r3, #8]
    else {
        sym->next = syms->tail->next;
        syms->tail->next = sym;
    }

    if(!sym->cache_count)
  4054aa:	6baa      	ldr	r2, [r5, #56]	; 0x38
  4054ac:	2a00      	cmp	r2, #0
  4054ae:	f43f af73 	beq.w	405398 <_zbar_image_scanner_add_sym+0x2c>
        syms->nsyms++;
    else if(!syms->tail)
  4054b2:	68da      	ldr	r2, [r3, #12]
  4054b4:	2a00      	cmp	r2, #0
  4054b6:	f47f af72 	bne.w	40539e <_zbar_image_scanner_add_sym+0x32>
        syms->tail = sym;
  4054ba:	60dd      	str	r5, [r3, #12]
  4054bc:	e76f      	b.n	40539e <_zbar_image_scanner_add_sym+0x32>
  4054be:	880e      	ldrh	r6, [r1, #0]
  4054c0:	6dc4      	ldr	r4, [r0, #92]	; 0x5c
    /* search for matching entry in cache */
    zbar_symbol_t **entry = &iscn->cache;
    while(*entry) {
        if((*entry)->type == sym->type &&
           (*entry)->datalen == sym->datalen &&
           !memcmp((*entry)->data, sym->data, sym->datalen))
  4054c2:	f8df 9100 	ldr.w	r9, [pc, #256]	; 4055c4 <_zbar_image_scanner_add_sym+0x258>
            break;
        if((sym->time - (*entry)->time) > CACHE_TIMEOUT) {
            /* recycle stale cache entry */
            zbar_symbol_t *next = (*entry)->next;
            (*entry)->next = NULL;
            _zbar_image_scanner_recycle_syms(iscn, *entry);
  4054c6:	f8df 8100 	ldr.w	r8, [pc, #256]	; 4055c8 <_zbar_image_scanner_add_sym+0x25c>

static inline zbar_symbol_t *cache_lookup (zbar_image_scanner_t *iscn,
                                           zbar_symbol_t *sym)
{
    /* search for matching entry in cache */
    zbar_symbol_t **entry = &iscn->cache;
  4054ca:	f100 0a5c 	add.w	sl, r0, #92	; 0x5c
           !memcmp((*entry)->data, sym->data, sym->datalen))
            break;
        if((sym->time - (*entry)->time) > CACHE_TIMEOUT) {
            /* recycle stale cache entry */
            zbar_symbol_t *next = (*entry)->next;
            (*entry)->next = NULL;
  4054ce:	2700      	movs	r7, #0
static inline zbar_symbol_t *cache_lookup (zbar_image_scanner_t *iscn,
                                           zbar_symbol_t *sym)
{
    /* search for matching entry in cache */
    zbar_symbol_t **entry = &iscn->cache;
    while(*entry) {
  4054d0:	2c00      	cmp	r4, #0
  4054d2:	f43f af6c 	beq.w	4053ae <_zbar_image_scanner_add_sym+0x42>
        if((*entry)->type == sym->type &&
  4054d6:	8823      	ldrh	r3, [r4, #0]
  4054d8:	42b3      	cmp	r3, r6
  4054da:	d016      	beq.n	40550a <_zbar_image_scanner_add_sym+0x19e>
           (*entry)->datalen == sym->datalen &&
           !memcmp((*entry)->data, sym->data, sym->datalen))
            break;
        if((sym->time - (*entry)->time) > CACHE_TIMEOUT) {
  4054dc:	6b6b      	ldr	r3, [r5, #52]	; 0x34
  4054de:	6b62      	ldr	r2, [r4, #52]	; 0x34
  4054e0:	1a9b      	subs	r3, r3, r2
  4054e2:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
  4054e6:	d804      	bhi.n	4054f2 <_zbar_image_scanner_add_sym+0x186>
  4054e8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
            (*entry)->next = NULL;
            _zbar_image_scanner_recycle_syms(iscn, *entry);
            *entry = next;
        }
        else
            entry = &(*entry)->next;
  4054ea:	f104 0a2c 	add.w	sl, r4, #44	; 0x2c
  4054ee:	461c      	mov	r4, r3
  4054f0:	e7ee      	b.n	4054d0 <_zbar_image_scanner_add_sym+0x164>
           (*entry)->datalen == sym->datalen &&
           !memcmp((*entry)->data, sym->data, sym->datalen))
            break;
        if((sym->time - (*entry)->time) > CACHE_TIMEOUT) {
            /* recycle stale cache entry */
            zbar_symbol_t *next = (*entry)->next;
  4054f2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
            (*entry)->next = NULL;
  4054f4:	62e7      	str	r7, [r4, #44]	; 0x2c
            _zbar_image_scanner_recycle_syms(iscn, *entry);
  4054f6:	f8da 1000 	ldr.w	r1, [sl]
  4054fa:	4658      	mov	r0, fp
  4054fc:	47c0      	blx	r8
            *entry = next;
  4054fe:	4633      	mov	r3, r6
  405500:	f8ca 6000 	str.w	r6, [sl]
  405504:	882e      	ldrh	r6, [r5, #0]
  405506:	461c      	mov	r4, r3
  405508:	e7e2      	b.n	4054d0 <_zbar_image_scanner_add_sym+0x164>
{
    /* search for matching entry in cache */
    zbar_symbol_t **entry = &iscn->cache;
    while(*entry) {
        if((*entry)->type == sym->type &&
           (*entry)->datalen == sym->datalen &&
  40550a:	6922      	ldr	r2, [r4, #16]
                                           zbar_symbol_t *sym)
{
    /* search for matching entry in cache */
    zbar_symbol_t **entry = &iscn->cache;
    while(*entry) {
        if((*entry)->type == sym->type &&
  40550c:	692b      	ldr	r3, [r5, #16]
  40550e:	429a      	cmp	r2, r3
  405510:	d1e4      	bne.n	4054dc <_zbar_image_scanner_add_sym+0x170>
           (*entry)->datalen == sym->datalen &&
           !memcmp((*entry)->data, sym->data, sym->datalen))
  405512:	6960      	ldr	r0, [r4, #20]
  405514:	6969      	ldr	r1, [r5, #20]
  405516:	47c8      	blx	r9
{
    /* search for matching entry in cache */
    zbar_symbol_t **entry = &iscn->cache;
    while(*entry) {
        if((*entry)->type == sym->type &&
           (*entry)->datalen == sym->datalen &&
  405518:	2800      	cmp	r0, #0
  40551a:	d1df      	bne.n	4054dc <_zbar_image_scanner_add_sym+0x170>
  40551c:	e7af      	b.n	40547e <_zbar_image_scanner_add_sym+0x112>
        age = sym->time - entry->time;
        entry->time = sym->time;
        near_thresh = (age < CACHE_PROXIMITY);
        far_thresh = (age >= CACHE_HYSTERESIS);
        dup = (entry->cache_count >= 0);
        if((!dup && !near_thresh) || far_thresh) {
  40551e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
  405522:	d3b7      	bcc.n	405494 <_zbar_image_scanner_add_sym+0x128>
            int type = sym->type;
            int h = _zbar_get_symbol_hash(type);
  405524:	8828      	ldrh	r0, [r5, #0]
  405526:	4b20      	ldr	r3, [pc, #128]	; (4055a8 <_zbar_image_scanner_add_sym+0x23c>)
  405528:	4798      	blx	r3
            entry->cache_count = -iscn->sym_configs[0][h];
  40552a:	301c      	adds	r0, #28
  40552c:	f85b 2020 	ldr.w	r2, [fp, r0, lsl #2]
  405530:	4252      	negs	r2, r2
  405532:	63a2      	str	r2, [r4, #56]	; 0x38
  405534:	e7b0      	b.n	405498 <_zbar_image_scanner_add_sym+0x12c>
    for(i = 0; i < RECYCLE_BUCKETS - 1; i++)
        if(datalen <= 1 << (i * 2))
            break;

    for(; i > 0; i--)
        if((sym = iscn->recycle[i].head)) {
  405536:	f8db 403c 	ldr.w	r4, [fp, #60]	; 0x3c
                               int datalen)
{
    /* recycle old or alloc new symbol */
    zbar_symbol_t *sym = NULL;
    int i;
    for(i = 0; i < RECYCLE_BUCKETS - 1; i++)
  40553a:	2201      	movs	r2, #1
        if(datalen <= 1 << (i * 2))
            break;

    for(; i > 0; i--)
        if((sym = iscn->recycle[i].head)) {
  40553c:	2c00      	cmp	r4, #0
  40553e:	f43f af60 	beq.w	405402 <_zbar_image_scanner_add_sym+0x96>
  405542:	eb0b 0182 	add.w	r1, fp, r2, lsl #2
  405546:	eb0b 02c2 	add.w	r2, fp, r2, lsl #3
            STAT(sym_recycle[i]);
  40554a:	f8d1 30d8 	ldr.w	r3, [r1, #216]	; 0xd8
  40554e:	3301      	adds	r3, #1
  405550:	f8c1 30d8 	str.w	r3, [r1, #216]	; 0xd8
            break;
        }

    if(sym) {
        iscn->recycle[i].head = sym->next;
  405554:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  405556:	6353      	str	r3, [r2, #52]	; 0x34
        sym->next = NULL;
  405558:	2300      	movs	r3, #0
  40555a:	62e3      	str	r3, [r4, #44]	; 0x2c
        assert(iscn->recycle[i].nsyms);
  40555c:	6b13      	ldr	r3, [r2, #48]	; 0x30
  40555e:	b1cb      	cbz	r3, 405594 <_zbar_image_scanner_add_sym+0x228>
        iscn->recycle[i].nsyms--;
  405560:	3b01      	subs	r3, #1
  405562:	6313      	str	r3, [r2, #48]	; 0x30
  405564:	e757      	b.n	405416 <_zbar_image_scanner_add_sym+0xaa>
            sym->data_alloc = datalen;
            sym->data = malloc(datalen);
        }
    }
    else {
        if(sym->data)
  405566:	6960      	ldr	r0, [r4, #20]
  405568:	b108      	cbz	r0, 40556e <_zbar_image_scanner_add_sym+0x202>
            free(sym->data);
  40556a:	4b0c      	ldr	r3, [pc, #48]	; (40559c <_zbar_image_scanner_add_sym+0x230>)
  40556c:	4798      	blx	r3
        sym->data = NULL;
  40556e:	2000      	movs	r0, #0
  405570:	6160      	str	r0, [r4, #20]
        sym->datalen = sym->data_alloc = 0;
  405572:	60e0      	str	r0, [r4, #12]
  405574:	6120      	str	r0, [r4, #16]
  405576:	e76f      	b.n	405458 <_zbar_image_scanner_add_sym+0xec>
    for(i = 0; i < RECYCLE_BUCKETS - 1; i++)
        if(datalen <= 1 << (i * 2))
            break;

    for(; i > 0; i--)
        if((sym = iscn->recycle[i].head)) {
  405578:	461a      	mov	r2, r3
  40557a:	e7e2      	b.n	405542 <_zbar_image_scanner_add_sym+0x1d6>
                               int datalen)
{
    /* recycle old or alloc new symbol */
    zbar_symbol_t *sym = NULL;
    int i;
    for(i = 0; i < RECYCLE_BUCKETS - 1; i++)
  40557c:	2302      	movs	r3, #2
  40557e:	e724      	b.n	4053ca <_zbar_image_scanner_add_sym+0x5e>
  405580:	4b0a      	ldr	r3, [pc, #40]	; (4055ac <_zbar_image_scanner_add_sym+0x240>)
  405582:	4798      	blx	r3
        if(datalen <= 1 << (i * 2))
            break;

    for(; i > 0; i--)
        if((sym = iscn->recycle[i].head)) {
  405584:	2201      	movs	r2, #1
  405586:	e7dc      	b.n	405542 <_zbar_image_scanner_add_sym+0x1d6>
    sym->quality = 1;
    sym->npts = 0;
    sym->orient = ZBAR_ORIENT_UNKNOWN;
    sym->cache_count = 0;
    sym->time = iscn->time;
    assert(!sym->syms);
  405588:	4809      	ldr	r0, [pc, #36]	; (4055b0 <_zbar_image_scanner_add_sym+0x244>)
  40558a:	4a0a      	ldr	r2, [pc, #40]	; (4055b4 <_zbar_image_scanner_add_sym+0x248>)
  40558c:	4b0a      	ldr	r3, [pc, #40]	; (4055b8 <_zbar_image_scanner_add_sym+0x24c>)
  40558e:	4c0b      	ldr	r4, [pc, #44]	; (4055bc <_zbar_image_scanner_add_sym+0x250>)
  405590:	21f7      	movs	r1, #247	; 0xf7
  405592:	47a0      	blx	r4
  405594:	4b0a      	ldr	r3, [pc, #40]	; (4055c0 <_zbar_image_scanner_add_sym+0x254>)
  405596:	4798      	blx	r3
  405598:	00407da1 	.word	0x00407da1
  40559c:	004088bd 	.word	0x004088bd
  4055a0:	004088ad 	.word	0x004088ad
  4055a4:	00408ee9 	.word	0x00408ee9
  4055a8:	0040686d 	.word	0x0040686d
  4055ac:	00405211 	.word	0x00405211
  4055b0:	004113e4 	.word	0x004113e4
  4055b4:	0041168c 	.word	0x0041168c
  4055b8:	00411444 	.word	0x00411444
  4055bc:	00407d65 	.word	0x00407d65
  4055c0:	00405231 	.word	0x00405231
  4055c4:	00408e85 	.word	0x00408e85
  4055c8:	00405251 	.word	0x00405251

004055cc <symbol_handler>:
    _zbar_qr_found_line(iscn->qr, vert, line);
}
#endif

static void symbol_handler (zbar_decoder_t *dcode)
{
  4055cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    zbar_image_scanner_t *iscn = zbar_decoder_get_userdata(dcode);
  4055d0:	4ba8      	ldr	r3, [pc, #672]	; (405874 <symbol_handler+0x2a8>)
    _zbar_qr_found_line(iscn->qr, vert, line);
}
#endif

static void symbol_handler (zbar_decoder_t *dcode)
{
  4055d2:	b085      	sub	sp, #20
  4055d4:	4607      	mov	r7, r0
    zbar_image_scanner_t *iscn = zbar_decoder_get_userdata(dcode);
  4055d6:	4798      	blx	r3
    zbar_symbol_type_t type = zbar_decoder_get_type(dcode);
  4055d8:	4ba7      	ldr	r3, [pc, #668]	; (405878 <symbol_handler+0x2ac>)
}
#endif

static void symbol_handler (zbar_decoder_t *dcode)
{
    zbar_image_scanner_t *iscn = zbar_decoder_get_userdata(dcode);
  4055da:	4683      	mov	fp, r0
    zbar_symbol_type_t type = zbar_decoder_get_type(dcode);
  4055dc:	4638      	mov	r0, r7
  4055de:	4798      	blx	r3
    if(type == ZBAR_QRCODE) {
        qr_handler(iscn);
        return;
    }
#else
    assert(type != ZBAR_QRCODE);
  4055e0:	2840      	cmp	r0, #64	; 0x40
#endif

static void symbol_handler (zbar_decoder_t *dcode)
{
    zbar_image_scanner_t *iscn = zbar_decoder_get_userdata(dcode);
    zbar_symbol_type_t type = zbar_decoder_get_type(dcode);
  4055e2:	4605      	mov	r5, r0
    if(type == ZBAR_QRCODE) {
        qr_handler(iscn);
        return;
    }
#else
    assert(type != ZBAR_QRCODE);
  4055e4:	f000 8190 	beq.w	405908 <symbol_handler+0x33c>
#endif

    if(TEST_CFG(iscn, ZBAR_CFG_POSITION)) {
  4055e8:	f8db 6060 	ldr.w	r6, [fp, #96]	; 0x60
  4055ec:	f016 0601 	ands.w	r6, r6, #1
  4055f0:	f040 80d9 	bne.w	4057a6 <symbol_handler+0x1da>

static void symbol_handler (zbar_decoder_t *dcode)
{
    zbar_image_scanner_t *iscn = zbar_decoder_get_userdata(dcode);
    zbar_symbol_type_t type = zbar_decoder_get_type(dcode);
    int x = 0, y = 0, dir;
  4055f4:	46b0      	mov	r8, r6
            y = u;
        }
    }

    /* FIXME debug flag to save/display all PARTIALs */
    if(type <= ZBAR_PARTIAL) {
  4055f6:	2d01      	cmp	r5, #1
  4055f8:	f240 80ce 	bls.w	405798 <symbol_handler+0x1cc>
        zprintf(256, "partial symbol @(%d,%d)\n", x, y);
        return;
    }

    data = zbar_decoder_get_data(dcode);
  4055fc:	4b9f      	ldr	r3, [pc, #636]	; (40587c <symbol_handler+0x2b0>)
  4055fe:	4638      	mov	r0, r7
  405600:	4798      	blx	r3
    datalen = zbar_decoder_get_data_length(dcode);
  405602:	4b9f      	ldr	r3, [pc, #636]	; (405880 <symbol_handler+0x2b4>)
    if(type <= ZBAR_PARTIAL) {
        zprintf(256, "partial symbol @(%d,%d)\n", x, y);
        return;
    }

    data = zbar_decoder_get_data(dcode);
  405604:	4681      	mov	r9, r0
    datalen = zbar_decoder_get_data_length(dcode);
  405606:	4638      	mov	r0, r7
  405608:	4798      	blx	r3

    /* FIXME need better symbol matching */
    for(sym = iscn->syms->head; sym; sym = sym->next)
  40560a:	f8db 302c 	ldr.w	r3, [fp, #44]	; 0x2c
  40560e:	689c      	ldr	r4, [r3, #8]
        zprintf(256, "partial symbol @(%d,%d)\n", x, y);
        return;
    }

    data = zbar_decoder_get_data(dcode);
    datalen = zbar_decoder_get_data_length(dcode);
  405610:	4682      	mov	sl, r0

    /* FIXME need better symbol matching */
    for(sym = iscn->syms->head; sym; sym = sym->next)
  405612:	b914      	cbnz	r4, 40561a <symbol_handler+0x4e>
  405614:	e02a      	b.n	40566c <symbol_handler+0xa0>
  405616:	6ae4      	ldr	r4, [r4, #44]	; 0x2c
  405618:	b344      	cbz	r4, 40566c <symbol_handler+0xa0>
        if(sym->type == type &&
  40561a:	8823      	ldrh	r3, [r4, #0]
  40561c:	42ab      	cmp	r3, r5
  40561e:	d1fa      	bne.n	405616 <symbol_handler+0x4a>
  405620:	6923      	ldr	r3, [r4, #16]
  405622:	4553      	cmp	r3, sl
  405624:	d1f7      	bne.n	405616 <symbol_handler+0x4a>
           sym->datalen == datalen &&
           !memcmp(sym->data, data, datalen)) {
  405626:	6960      	ldr	r0, [r4, #20]
  405628:	4b96      	ldr	r3, [pc, #600]	; (405884 <symbol_handler+0x2b8>)
  40562a:	4649      	mov	r1, r9
  40562c:	4652      	mov	r2, sl
  40562e:	4798      	blx	r3
    datalen = zbar_decoder_get_data_length(dcode);

    /* FIXME need better symbol matching */
    for(sym = iscn->syms->head; sym; sym = sym->next)
        if(sym->type == type &&
           sym->datalen == datalen &&
  405630:	2800      	cmp	r0, #0
  405632:	d1f0      	bne.n	405616 <symbol_handler+0x4a>
           !memcmp(sym->data, data, datalen)) {
            sym->quality++;
            zprintf(224, "dup symbol @(%d,%d): dup %s: %.20s\n",
  405634:	4a94      	ldr	r2, [pc, #592]	; (405888 <symbol_handler+0x2bc>)
    /* FIXME need better symbol matching */
    for(sym = iscn->syms->head; sym; sym = sym->next)
        if(sym->type == type &&
           sym->datalen == datalen &&
           !memcmp(sym->data, data, datalen)) {
            sym->quality++;
  405636:	6be3      	ldr	r3, [r4, #60]	; 0x3c
            zprintf(224, "dup symbol @(%d,%d): dup %s: %.20s\n",
  405638:	6812      	ldr	r2, [r2, #0]
    /* FIXME need better symbol matching */
    for(sym = iscn->syms->head; sym; sym = sym->next)
        if(sym->type == type &&
           sym->datalen == datalen &&
           !memcmp(sym->data, data, datalen)) {
            sym->quality++;
  40563a:	3301      	adds	r3, #1
            zprintf(224, "dup symbol @(%d,%d): dup %s: %.20s\n",
  40563c:	2adf      	cmp	r2, #223	; 0xdf
    /* FIXME need better symbol matching */
    for(sym = iscn->syms->head; sym; sym = sym->next)
        if(sym->type == type &&
           sym->datalen == datalen &&
           !memcmp(sym->data, data, datalen)) {
            sym->quality++;
  40563e:	63e3      	str	r3, [r4, #60]	; 0x3c
            zprintf(224, "dup symbol @(%d,%d): dup %s: %.20s\n",
  405640:	f300 8146 	bgt.w	4058d0 <symbol_handler+0x304>
                    x, y, zbar_get_symbol_name(type), data);
            if(TEST_CFG(iscn, ZBAR_CFG_POSITION))
  405644:	f8db 3060 	ldr.w	r3, [fp, #96]	; 0x60
  405648:	07da      	lsls	r2, r3, #31
  40564a:	f140 80a9 	bpl.w	4057a0 <symbol_handler+0x1d4>

static inline void sym_add_point (zbar_symbol_t *sym,
                                  int x,
                                  int y)
{
    int i = sym->npts;
  40564e:	69e5      	ldr	r5, [r4, #28]
    if(++sym->npts >= sym->pts_alloc)
  405650:	69a1      	ldr	r1, [r4, #24]
  405652:	1c6b      	adds	r3, r5, #1
  405654:	428b      	cmp	r3, r1
  405656:	61e3      	str	r3, [r4, #28]
  405658:	f080 814b 	bcs.w	4058f2 <symbol_handler+0x326>
  40565c:	6a23      	ldr	r3, [r4, #32]
        sym->pts = realloc(sym->pts, ++sym->pts_alloc * sizeof(point_t));
    sym->pts[i].x = x;
  40565e:	f843 8035 	str.w	r8, [r3, r5, lsl #3]
    sym->pts[i].y = y;
  405662:	6a23      	ldr	r3, [r4, #32]
  405664:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
  405668:	605e      	str	r6, [r3, #4]
  40566a:	e099      	b.n	4057a0 <symbol_handler+0x1d4>
                /* FIXME should be polygon */
                sym_add_point(sym, x, y);
            return;
        }

    sym = _zbar_image_scanner_alloc_sym(iscn, type, datalen + 1);
  40566c:	f10a 0a01 	add.w	sl, sl, #1
{
    /* recycle old or alloc new symbol */
    zbar_symbol_t *sym = NULL;
    int i;
    for(i = 0; i < RECYCLE_BUCKETS - 1; i++)
        if(datalen <= 1 << (i * 2))
  405670:	f1ba 0f01 	cmp.w	sl, #1
  405674:	dd28      	ble.n	4056c8 <symbol_handler+0xfc>
  405676:	f1ba 0f04 	cmp.w	sl, #4
  40567a:	f340 80f2 	ble.w	405862 <symbol_handler+0x296>
  40567e:	f1ba 0f10 	cmp.w	sl, #16
  405682:	f340 80ec 	ble.w	40585e <symbol_handler+0x292>
                               int datalen)
{
    /* recycle old or alloc new symbol */
    zbar_symbol_t *sym = NULL;
    int i;
    for(i = 0; i < RECYCLE_BUCKETS - 1; i++)
  405686:	f1ba 0f40 	cmp.w	sl, #64	; 0x40
  40568a:	bfcc      	ite	gt
  40568c:	2304      	movgt	r3, #4
  40568e:	2303      	movle	r3, #3
        if(datalen <= 1 << (i * 2))
            break;

    for(; i > 0; i--)
        if((sym = iscn->recycle[i].head)) {
  405690:	eb0b 02c3 	add.w	r2, fp, r3, lsl #3
  405694:	6b54      	ldr	r4, [r2, #52]	; 0x34
  405696:	2c00      	cmp	r4, #0
  405698:	f040 809c 	bne.w	4057d4 <symbol_handler+0x208>
  40569c:	eb0b 02c3 	add.w	r2, fp, r3, lsl #3
    int i;
    for(i = 0; i < RECYCLE_BUCKETS - 1; i++)
        if(datalen <= 1 << (i * 2))
            break;

    for(; i > 0; i--)
  4056a0:	1e59      	subs	r1, r3, #1
        if((sym = iscn->recycle[i].head)) {
  4056a2:	6ad4      	ldr	r4, [r2, #44]	; 0x2c
  4056a4:	2c00      	cmp	r4, #0
  4056a6:	f040 8094 	bne.w	4057d2 <symbol_handler+0x206>
    int i;
    for(i = 0; i < RECYCLE_BUCKETS - 1; i++)
        if(datalen <= 1 << (i * 2))
            break;

    for(; i > 0; i--)
  4056aa:	1e99      	subs	r1, r3, #2
  4056ac:	d00c      	beq.n	4056c8 <symbol_handler+0xfc>
        if((sym = iscn->recycle[i].head)) {
  4056ae:	eb0b 02c3 	add.w	r2, fp, r3, lsl #3
  4056b2:	6a54      	ldr	r4, [r2, #36]	; 0x24
  4056b4:	2c00      	cmp	r4, #0
  4056b6:	f040 808c 	bne.w	4057d2 <symbol_handler+0x206>
    int i;
    for(i = 0; i < RECYCLE_BUCKETS - 1; i++)
        if(datalen <= 1 << (i * 2))
            break;

    for(; i > 0; i--)
  4056ba:	2b03      	cmp	r3, #3
  4056bc:	d004      	beq.n	4056c8 <symbol_handler+0xfc>
        if((sym = iscn->recycle[i].head)) {
  4056be:	f8db 403c 	ldr.w	r4, [fp, #60]	; 0x3c
  4056c2:	2c00      	cmp	r4, #0
  4056c4:	f040 80d4 	bne.w	405870 <symbol_handler+0x2a4>
        sym->next = NULL;
        assert(iscn->recycle[i].nsyms);
        iscn->recycle[i].nsyms--;
    }
    else {
        sym = calloc(1, sizeof(zbar_symbol_t));
  4056c8:	4b70      	ldr	r3, [pc, #448]	; (40588c <symbol_handler+0x2c0>)
  4056ca:	2001      	movs	r0, #1
  4056cc:	2140      	movs	r1, #64	; 0x40
  4056ce:	4798      	blx	r3
        STAT(sym_new);
  4056d0:	f8db 30d4 	ldr.w	r3, [fp, #212]	; 0xd4
  4056d4:	3301      	adds	r3, #1
        sym->next = NULL;
        assert(iscn->recycle[i].nsyms);
        iscn->recycle[i].nsyms--;
    }
    else {
        sym = calloc(1, sizeof(zbar_symbol_t));
  4056d6:	4604      	mov	r4, r0
        STAT(sym_new);
  4056d8:	f8cb 30d4 	str.w	r3, [fp, #212]	; 0xd4
    }

    /* init new symbol */
    sym->type = type;
    sym->quality = 1;
    sym->npts = 0;
  4056dc:	2300      	movs	r3, #0
    sym->orient = ZBAR_ORIENT_UNKNOWN;
  4056de:	22ff      	movs	r2, #255	; 0xff
        STAT(sym_new);
    }

    /* init new symbol */
    sym->type = type;
    sym->quality = 1;
  4056e0:	2101      	movs	r1, #1
    sym->npts = 0;
  4056e2:	61e3      	str	r3, [r4, #28]
    sym->orient = ZBAR_ORIENT_UNKNOWN;
    sym->cache_count = 0;
  4056e4:	63a3      	str	r3, [r4, #56]	; 0x38
        sym = calloc(1, sizeof(zbar_symbol_t));
        STAT(sym_new);
    }

    /* init new symbol */
    sym->type = type;
  4056e6:	8025      	strh	r5, [r4, #0]
    sym->quality = 1;
  4056e8:	63e1      	str	r1, [r4, #60]	; 0x3c
    sym->npts = 0;
    sym->orient = ZBAR_ORIENT_UNKNOWN;
  4056ea:	f884 2024 	strb.w	r2, [r4, #36]	; 0x24
    sym->cache_count = 0;
    sym->time = iscn->time;
    assert(!sym->syms);
  4056ee:	6b23      	ldr	r3, [r4, #48]	; 0x30
    sym->type = type;
    sym->quality = 1;
    sym->npts = 0;
    sym->orient = ZBAR_ORIENT_UNKNOWN;
    sym->cache_count = 0;
    sym->time = iscn->time;
  4056f0:	f8db 2010 	ldr.w	r2, [fp, #16]
  4056f4:	6362      	str	r2, [r4, #52]	; 0x34
    assert(!sym->syms);
  4056f6:	2b00      	cmp	r3, #0
  4056f8:	f040 810d 	bne.w	405916 <symbol_handler+0x34a>

    if(datalen > 0) {
  4056fc:	f1ba 0f00 	cmp.w	sl, #0
  405700:	f340 80a4 	ble.w	40584c <symbol_handler+0x280>
        sym->datalen = datalen - 1;
        if(sym->data_alloc < datalen) {
  405704:	68e3      	ldr	r3, [r4, #12]
    sym->cache_count = 0;
    sym->time = iscn->time;
    assert(!sym->syms);

    if(datalen > 0) {
        sym->datalen = datalen - 1;
  405706:	f10a 32ff 	add.w	r2, sl, #4294967295
        if(sym->data_alloc < datalen) {
  40570a:	459a      	cmp	sl, r3
    sym->cache_count = 0;
    sym->time = iscn->time;
    assert(!sym->syms);

    if(datalen > 0) {
        sym->datalen = datalen - 1;
  40570c:	6122      	str	r2, [r4, #16]
        if(sym->data_alloc < datalen) {
  40570e:	d909      	bls.n	405724 <symbol_handler+0x158>
            if(sym->data)
  405710:	6960      	ldr	r0, [r4, #20]
  405712:	b108      	cbz	r0, 405718 <symbol_handler+0x14c>
                free(sym->data);
  405714:	4b5e      	ldr	r3, [pc, #376]	; (405890 <symbol_handler+0x2c4>)
  405716:	4798      	blx	r3
            sym->data_alloc = datalen;
  405718:	f8c4 a00c 	str.w	sl, [r4, #12]
            sym->data = malloc(datalen);
  40571c:	4650      	mov	r0, sl
  40571e:	4b5d      	ldr	r3, [pc, #372]	; (405894 <symbol_handler+0x2c8>)
  405720:	4798      	blx	r3
  405722:	6160      	str	r0, [r4, #20]
                sym_add_point(sym, x, y);
            return;
        }

    sym = _zbar_image_scanner_alloc_sym(iscn, type, datalen + 1);
    sym->configs = zbar_decoder_get_configs(dcode, type);
  405724:	4629      	mov	r1, r5
  405726:	4b5c      	ldr	r3, [pc, #368]	; (405898 <symbol_handler+0x2cc>)
  405728:	4638      	mov	r0, r7
  40572a:	4798      	blx	r3
    sym->modifiers = zbar_decoder_get_modifiers(dcode);
  40572c:	4b5b      	ldr	r3, [pc, #364]	; (40589c <symbol_handler+0x2d0>)
                sym_add_point(sym, x, y);
            return;
        }

    sym = _zbar_image_scanner_alloc_sym(iscn, type, datalen + 1);
    sym->configs = zbar_decoder_get_configs(dcode, type);
  40572e:	6060      	str	r0, [r4, #4]
    sym->modifiers = zbar_decoder_get_modifiers(dcode);
  405730:	4638      	mov	r0, r7
  405732:	4798      	blx	r3
    /* FIXME grab decoder buffer */
    memcpy(sym->data, data, datalen + 1);
  405734:	4b5a      	ldr	r3, [pc, #360]	; (4058a0 <symbol_handler+0x2d4>)
            return;
        }

    sym = _zbar_image_scanner_alloc_sym(iscn, type, datalen + 1);
    sym->configs = zbar_decoder_get_configs(dcode, type);
    sym->modifiers = zbar_decoder_get_modifiers(dcode);
  405736:	60a0      	str	r0, [r4, #8]
    /* FIXME grab decoder buffer */
    memcpy(sym->data, data, datalen + 1);
  405738:	4652      	mov	r2, sl
  40573a:	4649      	mov	r1, r9
  40573c:	6960      	ldr	r0, [r4, #20]
  40573e:	4798      	blx	r3

    /* initialize first point */
    if(TEST_CFG(iscn, ZBAR_CFG_POSITION)) {
  405740:	f8db 3060 	ldr.w	r3, [fp, #96]	; 0x60
  405744:	07db      	lsls	r3, r3, #31
  405746:	d510      	bpl.n	40576a <symbol_handler+0x19e>
        zprintf(192, "new symbol @(%d,%d): %s: %.20s\n",
  405748:	4b4f      	ldr	r3, [pc, #316]	; (405888 <symbol_handler+0x2bc>)
  40574a:	681b      	ldr	r3, [r3, #0]
  40574c:	2bbf      	cmp	r3, #191	; 0xbf
  40574e:	dc60      	bgt.n	405812 <symbol_handler+0x246>

static inline void sym_add_point (zbar_symbol_t *sym,
                                  int x,
                                  int y)
{
    int i = sym->npts;
  405750:	69e5      	ldr	r5, [r4, #28]
    if(++sym->npts >= sym->pts_alloc)
  405752:	69a3      	ldr	r3, [r4, #24]
        sym->pts = realloc(sym->pts, ++sym->pts_alloc * sizeof(point_t));
  405754:	6a20      	ldr	r0, [r4, #32]
static inline void sym_add_point (zbar_symbol_t *sym,
                                  int x,
                                  int y)
{
    int i = sym->npts;
    if(++sym->npts >= sym->pts_alloc)
  405756:	1c6a      	adds	r2, r5, #1
  405758:	429a      	cmp	r2, r3
  40575a:	61e2      	str	r2, [r4, #28]
  40575c:	d252      	bcs.n	405804 <symbol_handler+0x238>
        sym->pts = realloc(sym->pts, ++sym->pts_alloc * sizeof(point_t));
    sym->pts[i].x = x;
  40575e:	f840 8035 	str.w	r8, [r0, r5, lsl #3]
    sym->pts[i].y = y;
  405762:	6a23      	ldr	r3, [r4, #32]
  405764:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
  405768:	605e      	str	r6, [r3, #4]
                x, y, zbar_get_symbol_name(type), data);
        sym_add_point(sym, x, y);
    }

    dir = zbar_decoder_get_direction(dcode);
  40576a:	4638      	mov	r0, r7
  40576c:	4b4d      	ldr	r3, [pc, #308]	; (4058a4 <symbol_handler+0x2d8>)
  40576e:	4798      	blx	r3
    if(dir)
  405770:	b158      	cbz	r0, 40578a <symbol_handler+0x1be>
        sym->orient = (iscn->dy != 0) + ((iscn->du ^ dir) & 2);
  405772:	f8db 3020 	ldr.w	r3, [fp, #32]
  405776:	f8db 201c 	ldr.w	r2, [fp, #28]
  40577a:	4043      	eors	r3, r0
  40577c:	f003 0302 	and.w	r3, r3, #2
  405780:	2a00      	cmp	r2, #0
  405782:	bf18      	it	ne
  405784:	3301      	addne	r3, #1
  405786:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24

    _zbar_image_scanner_add_sym(iscn, sym);
  40578a:	4658      	mov	r0, fp
  40578c:	4621      	mov	r1, r4
  40578e:	4b46      	ldr	r3, [pc, #280]	; (4058a8 <symbol_handler+0x2dc>)
  405790:	4798      	blx	r3
}
  405792:	b005      	add	sp, #20
  405794:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        }
    }

    /* FIXME debug flag to save/display all PARTIALs */
    if(type <= ZBAR_PARTIAL) {
        zprintf(256, "partial symbol @(%d,%d)\n", x, y);
  405798:	4b3b      	ldr	r3, [pc, #236]	; (405888 <symbol_handler+0x2bc>)
  40579a:	681b      	ldr	r3, [r3, #0]
  40579c:	2bff      	cmp	r3, #255	; 0xff
  40579e:	dc49      	bgt.n	405834 <symbol_handler+0x268>
    dir = zbar_decoder_get_direction(dcode);
    if(dir)
        sym->orient = (iscn->dy != 0) + ((iscn->du ^ dir) & 2);

    _zbar_image_scanner_add_sym(iscn, sym);
}
  4057a0:	b005      	add	sp, #20
  4057a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    assert(type != ZBAR_QRCODE);
#endif

    if(TEST_CFG(iscn, ZBAR_CFG_POSITION)) {
        /* tmp position fixup */
        int w = zbar_scanner_get_width(iscn->scn);
  4057a6:	4b41      	ldr	r3, [pc, #260]	; (4058ac <symbol_handler+0x2e0>)
  4057a8:	f8db 0000 	ldr.w	r0, [fp]
  4057ac:	4798      	blx	r3
        int u = iscn->umin + iscn->du * zbar_scanner_get_edge(iscn->scn, w, 0);
  4057ae:	4b40      	ldr	r3, [pc, #256]	; (4058b0 <symbol_handler+0x2e4>)
  4057b0:	f8db 4024 	ldr.w	r4, [fp, #36]	; 0x24
  4057b4:	f8db 6020 	ldr.w	r6, [fp, #32]
    assert(type != ZBAR_QRCODE);
#endif

    if(TEST_CFG(iscn, ZBAR_CFG_POSITION)) {
        /* tmp position fixup */
        int w = zbar_scanner_get_width(iscn->scn);
  4057b8:	4601      	mov	r1, r0
        int u = iscn->umin + iscn->du * zbar_scanner_get_edge(iscn->scn, w, 0);
  4057ba:	2200      	movs	r2, #0
  4057bc:	f8db 0000 	ldr.w	r0, [fp]
  4057c0:	4798      	blx	r3
        if(iscn->dx) {
  4057c2:	f8db 3018 	ldr.w	r3, [fp, #24]
#endif

    if(TEST_CFG(iscn, ZBAR_CFG_POSITION)) {
        /* tmp position fixup */
        int w = zbar_scanner_get_width(iscn->scn);
        int u = iscn->umin + iscn->du * zbar_scanner_get_edge(iscn->scn, w, 0);
  4057c6:	fb06 4800 	mla	r8, r6, r0, r4
        if(iscn->dx) {
  4057ca:	b1bb      	cbz	r3, 4057fc <symbol_handler+0x230>
            x = u;
            y = iscn->v;
  4057cc:	f8db 6028 	ldr.w	r6, [fp, #40]	; 0x28
  4057d0:	e711      	b.n	4055f6 <symbol_handler+0x2a>
    int i;
    for(i = 0; i < RECYCLE_BUCKETS - 1; i++)
        if(datalen <= 1 << (i * 2))
            break;

    for(; i > 0; i--)
  4057d2:	460b      	mov	r3, r1
  4057d4:	eb0b 0183 	add.w	r1, fp, r3, lsl #2
  4057d8:	eb0b 03c3 	add.w	r3, fp, r3, lsl #3
        if((sym = iscn->recycle[i].head)) {
            STAT(sym_recycle[i]);
  4057dc:	f8d1 20d8 	ldr.w	r2, [r1, #216]	; 0xd8
  4057e0:	3201      	adds	r2, #1
  4057e2:	f8c1 20d8 	str.w	r2, [r1, #216]	; 0xd8
            break;
        }

    if(sym) {
        iscn->recycle[i].head = sym->next;
  4057e6:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  4057e8:	635a      	str	r2, [r3, #52]	; 0x34
        sym->next = NULL;
  4057ea:	2200      	movs	r2, #0
  4057ec:	62e2      	str	r2, [r4, #44]	; 0x2c
        assert(iscn->recycle[i].nsyms);
  4057ee:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  4057f0:	2a00      	cmp	r2, #0
  4057f2:	f000 8087 	beq.w	405904 <symbol_handler+0x338>
        iscn->recycle[i].nsyms--;
  4057f6:	3a01      	subs	r2, #1
  4057f8:	631a      	str	r2, [r3, #48]	; 0x30
  4057fa:	e76f      	b.n	4056dc <symbol_handler+0x110>
            x = u;
            y = iscn->v;
        }
        else {
            x = iscn->v;
            y = u;
  4057fc:	4646      	mov	r6, r8
        if(iscn->dx) {
            x = u;
            y = iscn->v;
        }
        else {
            x = iscn->v;
  4057fe:	f8db 8028 	ldr.w	r8, [fp, #40]	; 0x28
  405802:	e6f8      	b.n	4055f6 <symbol_handler+0x2a>
                                  int x,
                                  int y)
{
    int i = sym->npts;
    if(++sym->npts >= sym->pts_alloc)
        sym->pts = realloc(sym->pts, ++sym->pts_alloc * sizeof(point_t));
  405804:	1c59      	adds	r1, r3, #1
  405806:	61a1      	str	r1, [r4, #24]
  405808:	4a2a      	ldr	r2, [pc, #168]	; (4058b4 <symbol_handler+0x2e8>)
  40580a:	00c9      	lsls	r1, r1, #3
  40580c:	4790      	blx	r2
  40580e:	6220      	str	r0, [r4, #32]
  405810:	e7a5      	b.n	40575e <symbol_handler+0x192>
    /* FIXME grab decoder buffer */
    memcpy(sym->data, data, datalen + 1);

    /* initialize first point */
    if(TEST_CFG(iscn, ZBAR_CFG_POSITION)) {
        zprintf(192, "new symbol @(%d,%d): %s: %.20s\n",
  405812:	4a29      	ldr	r2, [pc, #164]	; (4058b8 <symbol_handler+0x2ec>)
  405814:	4b29      	ldr	r3, [pc, #164]	; (4058bc <symbol_handler+0x2f0>)
  405816:	6812      	ldr	r2, [r2, #0]
  405818:	4628      	mov	r0, r5
  40581a:	68d5      	ldr	r5, [r2, #12]
  40581c:	4798      	blx	r3
  40581e:	9600      	str	r6, [sp, #0]
  405820:	9001      	str	r0, [sp, #4]
  405822:	f8cd 9008 	str.w	r9, [sp, #8]
  405826:	4628      	mov	r0, r5
  405828:	4925      	ldr	r1, [pc, #148]	; (4058c0 <symbol_handler+0x2f4>)
  40582a:	4a26      	ldr	r2, [pc, #152]	; (4058c4 <symbol_handler+0x2f8>)
  40582c:	4d26      	ldr	r5, [pc, #152]	; (4058c8 <symbol_handler+0x2fc>)
  40582e:	4643      	mov	r3, r8
  405830:	47a8      	blx	r5
  405832:	e78d      	b.n	405750 <symbol_handler+0x184>
        }
    }

    /* FIXME debug flag to save/display all PARTIALs */
    if(type <= ZBAR_PARTIAL) {
        zprintf(256, "partial symbol @(%d,%d)\n", x, y);
  405834:	4b20      	ldr	r3, [pc, #128]	; (4058b8 <symbol_handler+0x2ec>)
  405836:	4925      	ldr	r1, [pc, #148]	; (4058cc <symbol_handler+0x300>)
  405838:	681b      	ldr	r3, [r3, #0]
  40583a:	4a22      	ldr	r2, [pc, #136]	; (4058c4 <symbol_handler+0x2f8>)
  40583c:	68d8      	ldr	r0, [r3, #12]
  40583e:	4c22      	ldr	r4, [pc, #136]	; (4058c8 <symbol_handler+0x2fc>)
  405840:	9600      	str	r6, [sp, #0]
  405842:	4643      	mov	r3, r8
  405844:	47a0      	blx	r4
    dir = zbar_decoder_get_direction(dcode);
    if(dir)
        sym->orient = (iscn->dy != 0) + ((iscn->du ^ dir) & 2);

    _zbar_image_scanner_add_sym(iscn, sym);
}
  405846:	b005      	add	sp, #20
  405848:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            sym->data_alloc = datalen;
            sym->data = malloc(datalen);
        }
    }
    else {
        if(sym->data)
  40584c:	6960      	ldr	r0, [r4, #20]
  40584e:	b108      	cbz	r0, 405854 <symbol_handler+0x288>
            free(sym->data);
  405850:	4b0f      	ldr	r3, [pc, #60]	; (405890 <symbol_handler+0x2c4>)
  405852:	4798      	blx	r3
        sym->data = NULL;
  405854:	2300      	movs	r3, #0
  405856:	6163      	str	r3, [r4, #20]
        sym->datalen = sym->data_alloc = 0;
  405858:	60e3      	str	r3, [r4, #12]
  40585a:	6123      	str	r3, [r4, #16]
  40585c:	e762      	b.n	405724 <symbol_handler+0x158>
                               int datalen)
{
    /* recycle old or alloc new symbol */
    zbar_symbol_t *sym = NULL;
    int i;
    for(i = 0; i < RECYCLE_BUCKETS - 1; i++)
  40585e:	2302      	movs	r3, #2
  405860:	e716      	b.n	405690 <symbol_handler+0xc4>
        if(datalen <= 1 << (i * 2))
            break;

    for(; i > 0; i--)
        if((sym = iscn->recycle[i].head)) {
  405862:	f8db 403c 	ldr.w	r4, [fp, #60]	; 0x3c
                               int datalen)
{
    /* recycle old or alloc new symbol */
    zbar_symbol_t *sym = NULL;
    int i;
    for(i = 0; i < RECYCLE_BUCKETS - 1; i++)
  405866:	2301      	movs	r3, #1
        if(datalen <= 1 << (i * 2))
            break;

    for(; i > 0; i--)
        if((sym = iscn->recycle[i].head)) {
  405868:	2c00      	cmp	r4, #0
  40586a:	f43f af2d 	beq.w	4056c8 <symbol_handler+0xfc>
  40586e:	e7b1      	b.n	4057d4 <symbol_handler+0x208>
  405870:	2301      	movs	r3, #1
  405872:	e7af      	b.n	4057d4 <symbol_handler+0x208>
  405874:	00403a41 	.word	0x00403a41
  405878:	00403a45 	.word	0x00403a45
  40587c:	00403a29 	.word	0x00403a29
  405880:	00403a2d 	.word	0x00403a2d
  405884:	00408e85 	.word	0x00408e85
  405888:	2000127c 	.word	0x2000127c
  40588c:	00407da1 	.word	0x00407da1
  405890:	004088bd 	.word	0x004088bd
  405894:	004088ad 	.word	0x004088ad
  405898:	00403b59 	.word	0x00403b59
  40589c:	00403a4d 	.word	0x00403a4d
  4058a0:	00408ee9 	.word	0x00408ee9
  4058a4:	00403a31 	.word	0x00403a31
  4058a8:	0040536d 	.word	0x0040536d
  4058ac:	0040657d 	.word	0x0040657d
  4058b0:	00406581 	.word	0x00406581
  4058b4:	00409189 	.word	0x00409189
  4058b8:	200008b0 	.word	0x200008b0
  4058bc:	00406851 	.word	0x00406851
  4058c0:	004114ac 	.word	0x004114ac
  4058c4:	004113c8 	.word	0x004113c8
  4058c8:	0040814d 	.word	0x0040814d
  4058cc:	00411464 	.word	0x00411464
    for(sym = iscn->syms->head; sym; sym = sym->next)
        if(sym->type == type &&
           sym->datalen == datalen &&
           !memcmp(sym->data, data, datalen)) {
            sym->quality++;
            zprintf(224, "dup symbol @(%d,%d): dup %s: %.20s\n",
  4058d0:	4a14      	ldr	r2, [pc, #80]	; (405924 <symbol_handler+0x358>)
  4058d2:	4b15      	ldr	r3, [pc, #84]	; (405928 <symbol_handler+0x35c>)
  4058d4:	6812      	ldr	r2, [r2, #0]
  4058d6:	4628      	mov	r0, r5
  4058d8:	68d5      	ldr	r5, [r2, #12]
  4058da:	4798      	blx	r3
  4058dc:	9600      	str	r6, [sp, #0]
  4058de:	9001      	str	r0, [sp, #4]
  4058e0:	f8cd 9008 	str.w	r9, [sp, #8]
  4058e4:	4628      	mov	r0, r5
  4058e6:	4911      	ldr	r1, [pc, #68]	; (40592c <symbol_handler+0x360>)
  4058e8:	4a11      	ldr	r2, [pc, #68]	; (405930 <symbol_handler+0x364>)
  4058ea:	4d12      	ldr	r5, [pc, #72]	; (405934 <symbol_handler+0x368>)
  4058ec:	4643      	mov	r3, r8
  4058ee:	47a8      	blx	r5
  4058f0:	e6a8      	b.n	405644 <symbol_handler+0x78>
  4058f2:	3101      	adds	r1, #1
  4058f4:	4b10      	ldr	r3, [pc, #64]	; (405938 <symbol_handler+0x36c>)
  4058f6:	61a1      	str	r1, [r4, #24]
  4058f8:	6a20      	ldr	r0, [r4, #32]
  4058fa:	00c9      	lsls	r1, r1, #3
  4058fc:	4798      	blx	r3
  4058fe:	6220      	str	r0, [r4, #32]
  405900:	4603      	mov	r3, r0
  405902:	e6ac      	b.n	40565e <symbol_handler+0x92>
  405904:	4b0d      	ldr	r3, [pc, #52]	; (40593c <symbol_handler+0x370>)
  405906:	4798      	blx	r3
    if(type == ZBAR_QRCODE) {
        qr_handler(iscn);
        return;
    }
#else
    assert(type != ZBAR_QRCODE);
  405908:	480d      	ldr	r0, [pc, #52]	; (405940 <symbol_handler+0x374>)
  40590a:	4a09      	ldr	r2, [pc, #36]	; (405930 <symbol_handler+0x364>)
  40590c:	4b0d      	ldr	r3, [pc, #52]	; (405944 <symbol_handler+0x378>)
  40590e:	4c0e      	ldr	r4, [pc, #56]	; (405948 <symbol_handler+0x37c>)
  405910:	f44f 71cc 	mov.w	r1, #408	; 0x198
  405914:	47a0      	blx	r4
    sym->quality = 1;
    sym->npts = 0;
    sym->orient = ZBAR_ORIENT_UNKNOWN;
    sym->cache_count = 0;
    sym->time = iscn->time;
    assert(!sym->syms);
  405916:	480a      	ldr	r0, [pc, #40]	; (405940 <symbol_handler+0x374>)
  405918:	4a0c      	ldr	r2, [pc, #48]	; (40594c <symbol_handler+0x380>)
  40591a:	4b0d      	ldr	r3, [pc, #52]	; (405950 <symbol_handler+0x384>)
  40591c:	4c0a      	ldr	r4, [pc, #40]	; (405948 <symbol_handler+0x37c>)
  40591e:	21f7      	movs	r1, #247	; 0xf7
  405920:	47a0      	blx	r4
  405922:	bf00      	nop
  405924:	200008b0 	.word	0x200008b0
  405928:	00406851 	.word	0x00406851
  40592c:	00411484 	.word	0x00411484
  405930:	004113c8 	.word	0x004113c8
  405934:	0040814d 	.word	0x0040814d
  405938:	00409189 	.word	0x00409189
  40593c:	00405231 	.word	0x00405231
  405940:	004113e4 	.word	0x004113e4
  405944:	00411450 	.word	0x00411450
  405948:	00407d65 	.word	0x00407d65
  40594c:	0041168c 	.word	0x0041168c
  405950:	00411444 	.word	0x00411444

00405954 <zbar_image_scanner_destroy>:
                i, iscn->stat_sym_recycle[i]);
}
#endif

void zbar_image_scanner_destroy (zbar_image_scanner_t *iscn)
{
  405954:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}

#ifndef NO_STATS
static inline void dump_stats (const zbar_image_scanner_t *iscn)
{
    int i;
    zprintf(1, "symbol sets allocated   = %-4d\n", iscn->stat_syms_new);
  405958:	f8df 8138 	ldr.w	r8, [pc, #312]	; 405a94 <zbar_image_scanner_destroy+0x140>
  40595c:	f8d8 3000 	ldr.w	r3, [r8]
  405960:	2b00      	cmp	r3, #0
                i, iscn->stat_sym_recycle[i]);
}
#endif

void zbar_image_scanner_destroy (zbar_image_scanner_t *iscn)
{
  405962:	b083      	sub	sp, #12
  405964:	4607      	mov	r7, r0

#ifndef NO_STATS
static inline void dump_stats (const zbar_image_scanner_t *iscn)
{
    int i;
    zprintf(1, "symbol sets allocated   = %-4d\n", iscn->stat_syms_new);
  405966:	dd31      	ble.n	4059cc <zbar_image_scanner_destroy+0x78>
  405968:	4d3c      	ldr	r5, [pc, #240]	; (405a5c <zbar_image_scanner_destroy+0x108>)
  40596a:	493d      	ldr	r1, [pc, #244]	; (405a60 <zbar_image_scanner_destroy+0x10c>)
  40596c:	682b      	ldr	r3, [r5, #0]
  40596e:	4a3d      	ldr	r2, [pc, #244]	; (405a64 <zbar_image_scanner_destroy+0x110>)
  405970:	68d8      	ldr	r0, [r3, #12]
  405972:	4c3d      	ldr	r4, [pc, #244]	; (405a68 <zbar_image_scanner_destroy+0x114>)
  405974:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
  405978:	47a0      	blx	r4
    zprintf(1, "    scanner syms in use = %-4d\trecycled  = %-4d\n",
  40597a:	f8d8 3000 	ldr.w	r3, [r8]
  40597e:	2b00      	cmp	r3, #0
  405980:	dd24      	ble.n	4059cc <zbar_image_scanner_destroy+0x78>
  405982:	682a      	ldr	r2, [r5, #0]
  405984:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
  405988:	68d0      	ldr	r0, [r2, #12]
  40598a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
  40598e:	9200      	str	r2, [sp, #0]
  405990:	4936      	ldr	r1, [pc, #216]	; (405a6c <zbar_image_scanner_destroy+0x118>)
  405992:	4a34      	ldr	r2, [pc, #208]	; (405a64 <zbar_image_scanner_destroy+0x110>)
  405994:	47a0      	blx	r4
  405996:	f8d8 3000 	ldr.w	r3, [r8]
            iscn->stat_iscn_syms_inuse, iscn->stat_iscn_syms_recycle);
    zprintf(1, "    image syms in use   = %-4d\trecycled  = %-4d\n",
  40599a:	2b00      	cmp	r3, #0
  40599c:	dd16      	ble.n	4059cc <zbar_image_scanner_destroy+0x78>
  40599e:	682a      	ldr	r2, [r5, #0]
  4059a0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
  4059a4:	68d0      	ldr	r0, [r2, #12]
  4059a6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
  4059aa:	9200      	str	r2, [sp, #0]
  4059ac:	4930      	ldr	r1, [pc, #192]	; (405a70 <zbar_image_scanner_destroy+0x11c>)
  4059ae:	4a2d      	ldr	r2, [pc, #180]	; (405a64 <zbar_image_scanner_destroy+0x110>)
  4059b0:	47a0      	blx	r4
  4059b2:	f8d8 3000 	ldr.w	r3, [r8]
            iscn->stat_img_syms_inuse, iscn->stat_img_syms_recycle);
    zprintf(1, "symbols allocated       = %-4d\n", iscn->stat_sym_new);
  4059b6:	2b00      	cmp	r3, #0
  4059b8:	dd08      	ble.n	4059cc <zbar_image_scanner_destroy+0x78>
  4059ba:	682b      	ldr	r3, [r5, #0]
  4059bc:	492d      	ldr	r1, [pc, #180]	; (405a74 <zbar_image_scanner_destroy+0x120>)
  4059be:	68d8      	ldr	r0, [r3, #12]
  4059c0:	4a28      	ldr	r2, [pc, #160]	; (405a64 <zbar_image_scanner_destroy+0x110>)
  4059c2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
  4059c6:	47a0      	blx	r4
  4059c8:	f8d8 3000 	ldr.w	r3, [r8]
    for(i = 0; i < RECYCLE_BUCKETS; i++)
        zprintf(1, "     recycled[%d]        = %-4d\n",
  4059cc:	f8df 908c 	ldr.w	r9, [pc, #140]	; 405a5c <zbar_image_scanner_destroy+0x108>
  4059d0:	f107 05d8 	add.w	r5, r7, #216	; 0xd8
                i, iscn->stat_sym_recycle[i]);
}
#endif

void zbar_image_scanner_destroy (zbar_image_scanner_t *iscn)
{
  4059d4:	2400      	movs	r4, #0
            iscn->stat_iscn_syms_inuse, iscn->stat_iscn_syms_recycle);
    zprintf(1, "    image syms in use   = %-4d\trecycled  = %-4d\n",
            iscn->stat_img_syms_inuse, iscn->stat_img_syms_recycle);
    zprintf(1, "symbols allocated       = %-4d\n", iscn->stat_sym_new);
    for(i = 0; i < RECYCLE_BUCKETS; i++)
        zprintf(1, "     recycled[%d]        = %-4d\n",
  4059d6:	2b00      	cmp	r3, #0
  4059d8:	4927      	ldr	r1, [pc, #156]	; (405a78 <zbar_image_scanner_destroy+0x124>)
  4059da:	4a22      	ldr	r2, [pc, #136]	; (405a64 <zbar_image_scanner_destroy+0x110>)
  4059dc:	f8df c088 	ldr.w	ip, [pc, #136]	; 405a68 <zbar_image_scanner_destroy+0x114>
  4059e0:	4623      	mov	r3, r4
    zprintf(1, "    scanner syms in use = %-4d\trecycled  = %-4d\n",
            iscn->stat_iscn_syms_inuse, iscn->stat_iscn_syms_recycle);
    zprintf(1, "    image syms in use   = %-4d\trecycled  = %-4d\n",
            iscn->stat_img_syms_inuse, iscn->stat_img_syms_recycle);
    zprintf(1, "symbols allocated       = %-4d\n", iscn->stat_sym_new);
    for(i = 0; i < RECYCLE_BUCKETS; i++)
  4059e2:	f104 0401 	add.w	r4, r4, #1
        zprintf(1, "     recycled[%d]        = %-4d\n",
  4059e6:	dd05      	ble.n	4059f4 <zbar_image_scanner_destroy+0xa0>
  4059e8:	f8d9 0000 	ldr.w	r0, [r9]
  4059ec:	682e      	ldr	r6, [r5, #0]
  4059ee:	68c0      	ldr	r0, [r0, #12]
  4059f0:	9600      	str	r6, [sp, #0]
  4059f2:	47e0      	blx	ip
    zprintf(1, "    scanner syms in use = %-4d\trecycled  = %-4d\n",
            iscn->stat_iscn_syms_inuse, iscn->stat_iscn_syms_recycle);
    zprintf(1, "    image syms in use   = %-4d\trecycled  = %-4d\n",
            iscn->stat_img_syms_inuse, iscn->stat_img_syms_recycle);
    zprintf(1, "symbols allocated       = %-4d\n", iscn->stat_sym_new);
    for(i = 0; i < RECYCLE_BUCKETS; i++)
  4059f4:	2c05      	cmp	r4, #5
  4059f6:	f105 0504 	add.w	r5, r5, #4
  4059fa:	d002      	beq.n	405a02 <zbar_image_scanner_destroy+0xae>
  4059fc:	f8d8 3000 	ldr.w	r3, [r8]
  405a00:	e7e9      	b.n	4059d6 <zbar_image_scanner_destroy+0x82>

void zbar_image_scanner_destroy (zbar_image_scanner_t *iscn)
{
    int i;
    dump_stats(iscn);
    if(iscn->syms) {
  405a02:	6af8      	ldr	r0, [r7, #44]	; 0x2c
  405a04:	b128      	cbz	r0, 405a12 <zbar_image_scanner_destroy+0xbe>
        if(iscn->syms->refcnt)
  405a06:	6803      	ldr	r3, [r0, #0]
  405a08:	bb1b      	cbnz	r3, 405a52 <zbar_image_scanner_destroy+0xfe>
            zbar_symbol_set_ref(iscn->syms, -1);
        else
            _zbar_symbol_set_free(iscn->syms);
  405a0a:	4b1c      	ldr	r3, [pc, #112]	; (405a7c <zbar_image_scanner_destroy+0x128>)
  405a0c:	4798      	blx	r3
        iscn->syms = NULL;
  405a0e:	2300      	movs	r3, #0
  405a10:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    if(iscn->scn)
  405a12:	6838      	ldr	r0, [r7, #0]
  405a14:	b108      	cbz	r0, 405a1a <zbar_image_scanner_destroy+0xc6>
        zbar_scanner_destroy(iscn->scn);
  405a16:	4b1a      	ldr	r3, [pc, #104]	; (405a80 <zbar_image_scanner_destroy+0x12c>)
  405a18:	4798      	blx	r3
    iscn->scn = NULL;
    if(iscn->dcode)
  405a1a:	6878      	ldr	r0, [r7, #4]
            _zbar_symbol_set_free(iscn->syms);
        iscn->syms = NULL;
    }
    if(iscn->scn)
        zbar_scanner_destroy(iscn->scn);
    iscn->scn = NULL;
  405a1c:	2300      	movs	r3, #0
  405a1e:	603b      	str	r3, [r7, #0]
    if(iscn->dcode)
  405a20:	b108      	cbz	r0, 405a26 <zbar_image_scanner_destroy+0xd2>
        zbar_decoder_destroy(iscn->dcode);
  405a22:	4b18      	ldr	r3, [pc, #96]	; (405a84 <zbar_image_scanner_destroy+0x130>)
  405a24:	4798      	blx	r3
    iscn->dcode = NULL;
  405a26:	2300      	movs	r3, #0
  405a28:	4d17      	ldr	r5, [pc, #92]	; (405a88 <zbar_image_scanner_destroy+0x134>)
  405a2a:	607b      	str	r3, [r7, #4]
  405a2c:	463e      	mov	r6, r7
  405a2e:	f107 0828 	add.w	r8, r7, #40	; 0x28
    for(i = 0; i < RECYCLE_BUCKETS; i++) {
        zbar_symbol_t *sym, *next;
        for(sym = iscn->recycle[i].head; sym; sym = next) {
  405a32:	6b70      	ldr	r0, [r6, #52]	; 0x34
  405a34:	b120      	cbz	r0, 405a40 <zbar_image_scanner_destroy+0xec>
            next = sym->next;
  405a36:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
            _zbar_symbol_free(sym);
  405a38:	47a8      	blx	r5
    if(iscn->dcode)
        zbar_decoder_destroy(iscn->dcode);
    iscn->dcode = NULL;
    for(i = 0; i < RECYCLE_BUCKETS; i++) {
        zbar_symbol_t *sym, *next;
        for(sym = iscn->recycle[i].head; sym; sym = next) {
  405a3a:	4620      	mov	r0, r4
  405a3c:	2c00      	cmp	r4, #0
  405a3e:	d1fa      	bne.n	405a36 <zbar_image_scanner_destroy+0xe2>
  405a40:	3608      	adds	r6, #8
        zbar_scanner_destroy(iscn->scn);
    iscn->scn = NULL;
    if(iscn->dcode)
        zbar_decoder_destroy(iscn->dcode);
    iscn->dcode = NULL;
    for(i = 0; i < RECYCLE_BUCKETS; i++) {
  405a42:	4546      	cmp	r6, r8
  405a44:	d1f5      	bne.n	405a32 <zbar_image_scanner_destroy+0xde>
    if(iscn->qr) {
        _zbar_qr_destroy(iscn->qr);
        iscn->qr = NULL;
    }
#endif
    free(iscn);
  405a46:	4638      	mov	r0, r7
  405a48:	4b10      	ldr	r3, [pc, #64]	; (405a8c <zbar_image_scanner_destroy+0x138>)
  405a4a:	4798      	blx	r3
}
  405a4c:	b003      	add	sp, #12
  405a4e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
{
    int i;
    dump_stats(iscn);
    if(iscn->syms) {
        if(iscn->syms->refcnt)
            zbar_symbol_set_ref(iscn->syms, -1);
  405a52:	f04f 31ff 	mov.w	r1, #4294967295
  405a56:	4b0e      	ldr	r3, [pc, #56]	; (405a90 <zbar_image_scanner_destroy+0x13c>)
  405a58:	4798      	blx	r3
  405a5a:	e7d8      	b.n	405a0e <zbar_image_scanner_destroy+0xba>
  405a5c:	200008b0 	.word	0x200008b0
  405a60:	004114d0 	.word	0x004114d0
  405a64:	004113d8 	.word	0x004113d8
  405a68:	0040814d 	.word	0x0040814d
  405a6c:	004114f4 	.word	0x004114f4
  405a70:	0041152c 	.word	0x0041152c
  405a74:	00411564 	.word	0x00411564
  405a78:	00411588 	.word	0x00411588
  405a7c:	0040695d 	.word	0x0040695d
  405a80:	00406571 	.word	0x00406571
  405a84:	00403921 	.word	0x00403921
  405a88:	004068b1 	.word	0x004068b1
  405a8c:	004088bd 	.word	0x004088bd
  405a90:	00406b49 	.word	0x00406b49
  405a94:	2000127c 	.word	0x2000127c

00405a98 <zbar_image_scanner_create>:

    _zbar_image_scanner_add_sym(iscn, sym);
}

zbar_image_scanner_t *zbar_image_scanner_create ()
{
  405a98:	b570      	push	{r4, r5, r6, lr}
    zbar_image_scanner_t *iscn = calloc(1, sizeof(zbar_image_scanner_t));
  405a9a:	2001      	movs	r0, #1
  405a9c:	21ec      	movs	r1, #236	; 0xec
  405a9e:	4b29      	ldr	r3, [pc, #164]	; (405b44 <zbar_image_scanner_create+0xac>)
  405aa0:	4798      	blx	r3
    if(!iscn)
  405aa2:	4604      	mov	r4, r0
  405aa4:	2800      	cmp	r0, #0
  405aa6:	d04b      	beq.n	405b40 <zbar_image_scanner_create+0xa8>
        return(NULL);
    iscn->dcode = zbar_decoder_create();
  405aa8:	4b27      	ldr	r3, [pc, #156]	; (405b48 <zbar_image_scanner_create+0xb0>)
  405aaa:	4798      	blx	r3
    iscn->scn = zbar_scanner_create(iscn->dcode);
  405aac:	4b27      	ldr	r3, [pc, #156]	; (405b4c <zbar_image_scanner_create+0xb4>)
zbar_image_scanner_t *zbar_image_scanner_create ()
{
    zbar_image_scanner_t *iscn = calloc(1, sizeof(zbar_image_scanner_t));
    if(!iscn)
        return(NULL);
    iscn->dcode = zbar_decoder_create();
  405aae:	6060      	str	r0, [r4, #4]
    iscn->scn = zbar_scanner_create(iscn->dcode);
  405ab0:	4798      	blx	r3
    if(!iscn->dcode || !iscn->scn) {
  405ab2:	6863      	ldr	r3, [r4, #4]
{
    zbar_image_scanner_t *iscn = calloc(1, sizeof(zbar_image_scanner_t));
    if(!iscn)
        return(NULL);
    iscn->dcode = zbar_decoder_create();
    iscn->scn = zbar_scanner_create(iscn->dcode);
  405ab4:	6020      	str	r0, [r4, #0]
    if(!iscn->dcode || !iscn->scn) {
  405ab6:	2b00      	cmp	r3, #0
  405ab8:	d03f      	beq.n	405b3a <zbar_image_scanner_create+0xa2>
  405aba:	2800      	cmp	r0, #0
  405abc:	d03d      	beq.n	405b3a <zbar_image_scanner_create+0xa2>
        zbar_image_scanner_destroy(iscn);
        return(NULL);
    }
    zbar_decoder_set_userdata(iscn->dcode, iscn);
  405abe:	4618      	mov	r0, r3
  405ac0:	4621      	mov	r1, r4
  405ac2:	4b23      	ldr	r3, [pc, #140]	; (405b50 <zbar_image_scanner_create+0xb8>)
  405ac4:	4798      	blx	r3
    zbar_decoder_set_handler(iscn->dcode, symbol_handler);
  405ac6:	4923      	ldr	r1, [pc, #140]	; (405b54 <zbar_image_scanner_create+0xbc>)
  405ac8:	4b23      	ldr	r3, [pc, #140]	; (405b58 <zbar_image_scanner_create+0xc0>)
  405aca:	6860      	ldr	r0, [r4, #4]
  405acc:	4798      	blx	r3
    cfg -= ZBAR_CFG_POSITION;

    if(!val)
        iscn->config &= ~(1 << cfg);
    else if(val == 1)
        iscn->config |= (1 << cfg);
  405ace:	6e23      	ldr	r3, [r4, #96]	; 0x60
#ifdef ENABLE_QRCODE
    iscn->qr = _zbar_qr_create();
#endif

    /* apply default configuration */
    CFG(iscn, ZBAR_CFG_X_DENSITY) = 1;
  405ad0:	2201      	movs	r2, #1
    cfg -= ZBAR_CFG_POSITION;

    if(!val)
        iscn->config &= ~(1 << cfg);
    else if(val == 1)
        iscn->config |= (1 << cfg);
  405ad2:	4313      	orrs	r3, r2
  405ad4:	6623      	str	r3, [r4, #96]	; 0x60
#ifdef ENABLE_QRCODE
    iscn->qr = _zbar_qr_create();
#endif

    /* apply default configuration */
    CFG(iscn, ZBAR_CFG_X_DENSITY) = 1;
  405ad6:	66a2      	str	r2, [r4, #104]	; 0x68
    CFG(iscn, ZBAR_CFG_Y_DENSITY) = 1;
  405ad8:	66e2      	str	r2, [r4, #108]	; 0x6c
  405ada:	f104 036c 	add.w	r3, r4, #108	; 0x6c
  405ade:	f104 01bc 	add.w	r1, r4, #188	; 0xbc
            i = _zbar_get_symbol_hash(sym);
            iscn->sym_configs[c][i] = val;
        }
        else
            for(i = 0; i < NUM_SYMS; i++)
                iscn->sym_configs[c][i] = val;
  405ae2:	2202      	movs	r2, #2
  405ae4:	f843 2f04 	str.w	r2, [r3, #4]!
        if(sym > ZBAR_PARTIAL) {
            i = _zbar_get_symbol_hash(sym);
            iscn->sym_configs[c][i] = val;
        }
        else
            for(i = 0; i < NUM_SYMS; i++)
  405ae8:	428b      	cmp	r3, r1
  405aea:	d1fb      	bne.n	405ae4 <zbar_image_scanner_create+0x4c>
        int c, i;
        if(cfg > ZBAR_CFG_UNCERTAINTY)
            return(1);
        c = cfg - ZBAR_CFG_UNCERTAINTY;
        if(sym > ZBAR_PARTIAL) {
            i = _zbar_get_symbol_hash(sym);
  405aec:	4d1b      	ldr	r5, [pc, #108]	; (405b5c <zbar_image_scanner_create+0xc4>)
  405aee:	2040      	movs	r0, #64	; 0x40
  405af0:	47a8      	blx	r5
            iscn->sym_configs[c][i] = val;
  405af2:	301c      	adds	r0, #28
  405af4:	2600      	movs	r6, #0
  405af6:	f844 6020 	str.w	r6, [r4, r0, lsl #2]
        int c, i;
        if(cfg > ZBAR_CFG_UNCERTAINTY)
            return(1);
        c = cfg - ZBAR_CFG_UNCERTAINTY;
        if(sym > ZBAR_PARTIAL) {
            i = _zbar_get_symbol_hash(sym);
  405afa:	2080      	movs	r0, #128	; 0x80
  405afc:	47a8      	blx	r5
            iscn->sym_configs[c][i] = val;
  405afe:	f100 031c 	add.w	r3, r0, #28
        int c, i;
        if(cfg > ZBAR_CFG_UNCERTAINTY)
            return(1);
        c = cfg - ZBAR_CFG_UNCERTAINTY;
        if(sym > ZBAR_PARTIAL) {
            i = _zbar_get_symbol_hash(sym);
  405b02:	205d      	movs	r0, #93	; 0x5d
            iscn->sym_configs[c][i] = val;
  405b04:	f844 6023 	str.w	r6, [r4, r3, lsl #2]
        int c, i;
        if(cfg > ZBAR_CFG_UNCERTAINTY)
            return(1);
        c = cfg - ZBAR_CFG_UNCERTAINTY;
        if(sym > ZBAR_PARTIAL) {
            i = _zbar_get_symbol_hash(sym);
  405b08:	47a8      	blx	r5
            iscn->sym_configs[c][i] = val;
  405b0a:	f100 031c 	add.w	r3, r0, #28
        int c, i;
        if(cfg > ZBAR_CFG_UNCERTAINTY)
            return(1);
        c = cfg - ZBAR_CFG_UNCERTAINTY;
        if(sym > ZBAR_PARTIAL) {
            i = _zbar_get_symbol_hash(sym);
  405b0e:	2027      	movs	r0, #39	; 0x27
            iscn->sym_configs[c][i] = val;
  405b10:	f844 6023 	str.w	r6, [r4, r3, lsl #2]
        int c, i;
        if(cfg > ZBAR_CFG_UNCERTAINTY)
            return(1);
        c = cfg - ZBAR_CFG_UNCERTAINTY;
        if(sym > ZBAR_PARTIAL) {
            i = _zbar_get_symbol_hash(sym);
  405b14:	47a8      	blx	r5
            iscn->sym_configs[c][i] = val;
  405b16:	f100 031c 	add.w	r3, r0, #28
        int c, i;
        if(cfg > ZBAR_CFG_UNCERTAINTY)
            return(1);
        c = cfg - ZBAR_CFG_UNCERTAINTY;
        if(sym > ZBAR_PARTIAL) {
            i = _zbar_get_symbol_hash(sym);
  405b1a:	2026      	movs	r0, #38	; 0x26
            iscn->sym_configs[c][i] = val;
  405b1c:	f844 6023 	str.w	r6, [r4, r3, lsl #2]
        int c, i;
        if(cfg > ZBAR_CFG_UNCERTAINTY)
            return(1);
        c = cfg - ZBAR_CFG_UNCERTAINTY;
        if(sym > ZBAR_PARTIAL) {
            i = _zbar_get_symbol_hash(sym);
  405b20:	47a8      	blx	r5
            iscn->sym_configs[c][i] = val;
  405b22:	301c      	adds	r0, #28
  405b24:	2301      	movs	r3, #1
  405b26:	f844 3020 	str.w	r3, [r4, r0, lsl #2]
        int c, i;
        if(cfg > ZBAR_CFG_UNCERTAINTY)
            return(1);
        c = cfg - ZBAR_CFG_UNCERTAINTY;
        if(sym > ZBAR_PARTIAL) {
            i = _zbar_get_symbol_hash(sym);
  405b2a:	200f      	movs	r0, #15
  405b2c:	47a8      	blx	r5
            iscn->sym_configs[c][i] = val;
  405b2e:	f100 031c 	add.w	r3, r0, #28
  405b32:	4620      	mov	r0, r4
  405b34:	f844 6023 	str.w	r6, [r4, r3, lsl #2]
  405b38:	bd70      	pop	{r4, r5, r6, pc}
    if(!iscn)
        return(NULL);
    iscn->dcode = zbar_decoder_create();
    iscn->scn = zbar_scanner_create(iscn->dcode);
    if(!iscn->dcode || !iscn->scn) {
        zbar_image_scanner_destroy(iscn);
  405b3a:	4620      	mov	r0, r4
  405b3c:	4b08      	ldr	r3, [pc, #32]	; (405b60 <zbar_image_scanner_create+0xc8>)
  405b3e:	4798      	blx	r3
        return(NULL);
  405b40:	2000      	movs	r0, #0
  405b42:	bd70      	pop	{r4, r5, r6, pc}
  405b44:	00407da1 	.word	0x00407da1
  405b48:	00403859 	.word	0x00403859
  405b4c:	00406535 	.word	0x00406535
  405b50:	00403a3d 	.word	0x00403a3d
  405b54:	004055cd 	.word	0x004055cd
  405b58:	00403a35 	.word	0x00403a35
  405b5c:	0040686d 	.word	0x0040686d
  405b60:	00405955 	.word	0x00405955

00405b64 <zbar_image_scanner_set_config>:

int zbar_image_scanner_set_config (zbar_image_scanner_t *iscn,
                                   zbar_symbol_type_t sym,
                                   zbar_config_t cfg,
                                   int val)
{
  405b64:	b510      	push	{r4, lr}
  405b66:	4604      	mov	r4, r0
  405b68:	b082      	sub	sp, #8
    if((sym == 0 || sym == ZBAR_COMPOSITE) && cfg == ZBAR_CFG_ENABLE) {
  405b6a:	b151      	cbz	r1, 405b82 <zbar_image_scanner_set_config+0x1e>
  405b6c:	290f      	cmp	r1, #15
  405b6e:	d022      	beq.n	405bb6 <zbar_image_scanner_set_config+0x52>
        iscn->ean_config = !!val;
        if(sym)
            return(0);
    }

    if(cfg < ZBAR_CFG_UNCERTAINTY)
  405b70:	2a3f      	cmp	r2, #63	; 0x3f
  405b72:	d90c      	bls.n	405b8e <zbar_image_scanner_set_config+0x2a>
        return(zbar_decoder_set_config(iscn->dcode, sym, cfg, val));

    if(cfg < ZBAR_CFG_POSITION) {
  405b74:	2a7f      	cmp	r2, #127	; 0x7f
  405b76:	d90f      	bls.n	405b98 <zbar_image_scanner_set_config+0x34>
            for(i = 0; i < NUM_SYMS; i++)
                iscn->sym_configs[c][i] = val;
        return(0);
    }

    if(sym > ZBAR_PARTIAL)
  405b78:	2901      	cmp	r1, #1
  405b7a:	d92f      	bls.n	405bdc <zbar_image_scanner_set_config+0x78>
        return(zbar_decoder_set_config(iscn->dcode, sym, cfg, val));

    if(cfg < ZBAR_CFG_POSITION) {
        int c, i;
        if(cfg > ZBAR_CFG_UNCERTAINTY)
            return(1);
  405b7c:	2001      	movs	r0, #1
        iscn->config |= (1 << cfg);
    else
        return(1);

    return(0);
}
  405b7e:	b002      	add	sp, #8
  405b80:	bd10      	pop	{r4, pc}
int zbar_image_scanner_set_config (zbar_image_scanner_t *iscn,
                                   zbar_symbol_type_t sym,
                                   zbar_config_t cfg,
                                   int val)
{
    if((sym == 0 || sym == ZBAR_COMPOSITE) && cfg == ZBAR_CFG_ENABLE) {
  405b82:	2a00      	cmp	r2, #0
  405b84:	d1f4      	bne.n	405b70 <zbar_image_scanner_set_config+0xc>
        iscn->ean_config = !!val;
  405b86:	1c18      	adds	r0, r3, #0
  405b88:	bf18      	it	ne
  405b8a:	2001      	movne	r0, #1
  405b8c:	6660      	str	r0, [r4, #100]	; 0x64
        if(sym)
            return(0);
    }

    if(cfg < ZBAR_CFG_UNCERTAINTY)
        return(zbar_decoder_set_config(iscn->dcode, sym, cfg, val));
  405b8e:	6860      	ldr	r0, [r4, #4]
  405b90:	4c1f      	ldr	r4, [pc, #124]	; (405c10 <zbar_image_scanner_set_config+0xac>)
  405b92:	47a0      	blx	r4
        iscn->config |= (1 << cfg);
    else
        return(1);

    return(0);
}
  405b94:	b002      	add	sp, #8
  405b96:	bd10      	pop	{r4, pc}
    if(cfg < ZBAR_CFG_UNCERTAINTY)
        return(zbar_decoder_set_config(iscn->dcode, sym, cfg, val));

    if(cfg < ZBAR_CFG_POSITION) {
        int c, i;
        if(cfg > ZBAR_CFG_UNCERTAINTY)
  405b98:	2a40      	cmp	r2, #64	; 0x40
  405b9a:	d1ef      	bne.n	405b7c <zbar_image_scanner_set_config+0x18>
            return(1);
        c = cfg - ZBAR_CFG_UNCERTAINTY;
        if(sym > ZBAR_PARTIAL) {
  405b9c:	2901      	cmp	r1, #1
  405b9e:	d812      	bhi.n	405bc6 <zbar_image_scanner_set_config+0x62>
  405ba0:	f104 026c 	add.w	r2, r4, #108	; 0x6c
  405ba4:	f104 00bc 	add.w	r0, r4, #188	; 0xbc
            i = _zbar_get_symbol_hash(sym);
            iscn->sym_configs[c][i] = val;
        }
        else
            for(i = 0; i < NUM_SYMS; i++)
                iscn->sym_configs[c][i] = val;
  405ba8:	f842 3f04 	str.w	r3, [r2, #4]!
        if(sym > ZBAR_PARTIAL) {
            i = _zbar_get_symbol_hash(sym);
            iscn->sym_configs[c][i] = val;
        }
        else
            for(i = 0; i < NUM_SYMS; i++)
  405bac:	4282      	cmp	r2, r0
  405bae:	d1fb      	bne.n	405ba8 <zbar_image_scanner_set_config+0x44>
    else if(val == 1)
        iscn->config |= (1 << cfg);
    else
        return(1);

    return(0);
  405bb0:	2000      	movs	r0, #0
}
  405bb2:	b002      	add	sp, #8
  405bb4:	bd10      	pop	{r4, pc}
int zbar_image_scanner_set_config (zbar_image_scanner_t *iscn,
                                   zbar_symbol_type_t sym,
                                   zbar_config_t cfg,
                                   int val)
{
    if((sym == 0 || sym == ZBAR_COMPOSITE) && cfg == ZBAR_CFG_ENABLE) {
  405bb6:	2a00      	cmp	r2, #0
  405bb8:	d1da      	bne.n	405b70 <zbar_image_scanner_set_config+0xc>
        iscn->ean_config = !!val;
  405bba:	3300      	adds	r3, #0
  405bbc:	bf18      	it	ne
  405bbe:	2301      	movne	r3, #1
  405bc0:	6663      	str	r3, [r4, #100]	; 0x64
        if(sym)
            return(0);
  405bc2:	4610      	mov	r0, r2
  405bc4:	e7db      	b.n	405b7e <zbar_image_scanner_set_config+0x1a>
        int c, i;
        if(cfg > ZBAR_CFG_UNCERTAINTY)
            return(1);
        c = cfg - ZBAR_CFG_UNCERTAINTY;
        if(sym > ZBAR_PARTIAL) {
            i = _zbar_get_symbol_hash(sym);
  405bc6:	4a13      	ldr	r2, [pc, #76]	; (405c14 <zbar_image_scanner_set_config+0xb0>)
  405bc8:	9301      	str	r3, [sp, #4]
  405bca:	4608      	mov	r0, r1
  405bcc:	4790      	blx	r2
            iscn->sym_configs[c][i] = val;
  405bce:	f100 021c 	add.w	r2, r0, #28
  405bd2:	9b01      	ldr	r3, [sp, #4]
  405bd4:	f844 3022 	str.w	r3, [r4, r2, lsl #2]
        }
        else
            for(i = 0; i < NUM_SYMS; i++)
                iscn->sym_configs[c][i] = val;
        return(0);
  405bd8:	2000      	movs	r0, #0
  405bda:	e7d0      	b.n	405b7e <zbar_image_scanner_set_config+0x1a>
    }

    if(sym > ZBAR_PARTIAL)
        return(1);

    if(cfg >= ZBAR_CFG_X_DENSITY && cfg <= ZBAR_CFG_Y_DENSITY) {
  405bdc:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
  405be0:	2901      	cmp	r1, #1
  405be2:	d90f      	bls.n	405c04 <zbar_image_scanner_set_config+0xa0>
        CFG(iscn, cfg) = val;
        return(0);
    }

    if(cfg > ZBAR_CFG_POSITION)
  405be4:	2a80      	cmp	r2, #128	; 0x80
  405be6:	d1c9      	bne.n	405b7c <zbar_image_scanner_set_config+0x18>
        return(1);
    cfg -= ZBAR_CFG_POSITION;

    if(!val)
  405be8:	b133      	cbz	r3, 405bf8 <zbar_image_scanner_set_config+0x94>
        iscn->config &= ~(1 << cfg);
    else if(val == 1)
  405bea:	2b01      	cmp	r3, #1
  405bec:	d1c6      	bne.n	405b7c <zbar_image_scanner_set_config+0x18>
        iscn->config |= (1 << cfg);
  405bee:	6e23      	ldr	r3, [r4, #96]	; 0x60
  405bf0:	f043 0301 	orr.w	r3, r3, #1
  405bf4:	6623      	str	r3, [r4, #96]	; 0x60
  405bf6:	e7db      	b.n	405bb0 <zbar_image_scanner_set_config+0x4c>
    if(cfg > ZBAR_CFG_POSITION)
        return(1);
    cfg -= ZBAR_CFG_POSITION;

    if(!val)
        iscn->config &= ~(1 << cfg);
  405bf8:	6e22      	ldr	r2, [r4, #96]	; 0x60
  405bfa:	f022 0201 	bic.w	r2, r2, #1
    else if(val == 1)
        iscn->config |= (1 << cfg);
    else
        return(1);

    return(0);
  405bfe:	4618      	mov	r0, r3
    if(cfg > ZBAR_CFG_POSITION)
        return(1);
    cfg -= ZBAR_CFG_POSITION;

    if(!val)
        iscn->config &= ~(1 << cfg);
  405c00:	6622      	str	r2, [r4, #96]	; 0x60
  405c02:	e7bc      	b.n	405b7e <zbar_image_scanner_set_config+0x1a>

    if(sym > ZBAR_PARTIAL)
        return(1);

    if(cfg >= ZBAR_CFG_X_DENSITY && cfg <= ZBAR_CFG_Y_DENSITY) {
        CFG(iscn, cfg) = val;
  405c04:	3ae6      	subs	r2, #230	; 0xe6
        return(0);
  405c06:	2000      	movs	r0, #0

    if(sym > ZBAR_PARTIAL)
        return(1);

    if(cfg >= ZBAR_CFG_X_DENSITY && cfg <= ZBAR_CFG_Y_DENSITY) {
        CFG(iscn, cfg) = val;
  405c08:	f844 3022 	str.w	r3, [r4, r2, lsl #2]
  405c0c:	e7b7      	b.n	405b7e <zbar_image_scanner_set_config+0x1a>
  405c0e:	bf00      	nop
  405c10:	00403bb9 	.word	0x00403bb9
  405c14:	0040686d 	.word	0x0040686d

00405c18 <zbar_scan_image>:
        p += (dx) + ((uintptr_t)(dy) * w);       \
    } while(0);

int zbar_scan_image (zbar_image_scanner_t *iscn,
                     zbar_image_t *img)
{
  405c18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    int density;

    /* timestamp image
     * FIXME prefer video timestamp
     */
    iscn->time = 0;//_zbar_timer_now();
  405c1c:	2300      	movs	r3, #0
  405c1e:	6103      	str	r3, [r0, #16]
#ifdef ENABLE_QRCODE
    _zbar_qr_reset(iscn->qr);
#endif

    /* image must be in grayscale format */
    if(img->format != fourcc('Y','8','0','0') &&
  405c20:	680b      	ldr	r3, [r1, #0]
  405c22:	4aaf      	ldr	r2, [pc, #700]	; (405ee0 <zbar_scan_image+0x2c8>)
int zbar_scan_image (zbar_image_scanner_t *iscn,
                     zbar_image_t *img)
{
    zbar_symbol_set_t *syms;
    const uint8_t *data;
    zbar_scanner_t *scn = iscn->scn;
  405c24:	6805      	ldr	r5, [r0, #0]
#ifdef ENABLE_QRCODE
    _zbar_qr_reset(iscn->qr);
#endif

    /* image must be in grayscale format */
    if(img->format != fourcc('Y','8','0','0') &&
  405c26:	4293      	cmp	r3, r2
        p += (dx) + ((uintptr_t)(dy) * w);       \
    } while(0);

int zbar_scan_image (zbar_image_scanner_t *iscn,
                     zbar_image_t *img)
{
  405c28:	b093      	sub	sp, #76	; 0x4c
#ifdef ENABLE_QRCODE
    _zbar_qr_reset(iscn->qr);
#endif

    /* image must be in grayscale format */
    if(img->format != fourcc('Y','8','0','0') &&
  405c2a:	d003      	beq.n	405c34 <zbar_scan_image+0x1c>
  405c2c:	4aad      	ldr	r2, [pc, #692]	; (405ee4 <zbar_scan_image+0x2cc>)
  405c2e:	4293      	cmp	r3, r2
  405c30:	f040 83c4 	bne.w	4063bc <zbar_scan_image+0x7a4>
  405c34:	4607      	mov	r7, r0
}

inline void zbar_image_scanner_recycle_image (zbar_image_scanner_t *iscn,
                                              zbar_image_t *img)
{
    zbar_symbol_set_t *syms = iscn->syms;
  405c36:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
  405c38:	9109      	str	r1, [sp, #36]	; 0x24

    /* image must be in grayscale format */
    if(img->format != fourcc('Y','8','0','0') &&
       img->format != fourcc('G','R','E','Y'))
        return(-1);
    iscn->img = img;
  405c3a:	6179      	str	r1, [r7, #20]

inline void zbar_image_scanner_recycle_image (zbar_image_scanner_t *iscn,
                                              zbar_image_t *img)
{
    zbar_symbol_set_t *syms = iscn->syms;
    if(syms && syms->refcnt) {
  405c3c:	b11c      	cbz	r4, 405c46 <zbar_scan_image+0x2e>
  405c3e:	6823      	ldr	r3, [r4, #0]
  405c40:	2b00      	cmp	r3, #0
  405c42:	f040 82f3 	bne.w	40622c <zbar_scan_image+0x614>
        }
        else
            STAT(iscn_syms_recycle);
    }

    syms = img->syms;
  405c46:	9909      	ldr	r1, [sp, #36]	; 0x24
  405c48:	6c0b      	ldr	r3, [r1, #64]	; 0x40
  405c4a:	9310      	str	r3, [sp, #64]	; 0x40
  405c4c:	461a      	mov	r2, r3
    img->syms = NULL;
  405c4e:	2300      	movs	r3, #0
  405c50:	640b      	str	r3, [r1, #64]	; 0x40
    if(syms && recycle_syms(iscn, syms))
  405c52:	b162      	cbz	r2, 405c6e <zbar_scan_image+0x56>
typedef int refcnt_t;

static inline int _zbar_refcnt (refcnt_t *cnt,
                                int delta)
{
    int rc = (*cnt += delta);
  405c54:	6814      	ldr	r4, [r2, #0]
  405c56:	3c01      	subs	r4, #1
    assert(rc >= 0);
  405c58:	2c00      	cmp	r4, #0
typedef int refcnt_t;

static inline int _zbar_refcnt (refcnt_t *cnt,
                                int delta)
{
    int rc = (*cnt += delta);
  405c5a:	6014      	str	r4, [r2, #0]
    assert(rc >= 0);
  405c5c:	f2c0 8450 	blt.w	406500 <zbar_scan_image+0x8e8>
}

static inline int recycle_syms (zbar_image_scanner_t *iscn,
                                zbar_symbol_set_t *syms)
{
    if(_zbar_refcnt(&syms->refcnt, -1))
  405c60:	f000 8250 	beq.w	406104 <zbar_scan_image+0x4ec>
    }

    syms = img->syms;
    img->syms = NULL;
    if(syms && recycle_syms(iscn, syms))
        STAT(img_syms_inuse);
  405c64:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
  405c68:	3301      	adds	r3, #1
  405c6a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
        return(-1);
    iscn->img = img;

    /* recycle previous scanner and image results */
    zbar_image_scanner_recycle_image(iscn, img);
    syms = iscn->syms;
  405c6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  405c70:	9310      	str	r3, [sp, #64]	; 0x40
    if(!syms) {
  405c72:	2b00      	cmp	r3, #0
  405c74:	f000 825d 	beq.w	406132 <zbar_scan_image+0x51a>
        syms = iscn->syms = _zbar_symbol_set_create();
        STAT(syms_new);
        zbar_symbol_set_ref(syms, 1);
    }
    else
        zbar_symbol_set_ref(syms, 2);
  405c78:	9810      	ldr	r0, [sp, #64]	; 0x40
  405c7a:	4b9b      	ldr	r3, [pc, #620]	; (405ee8 <zbar_scan_image+0x2d0>)
  405c7c:	2102      	movs	r1, #2
  405c7e:	4798      	blx	r3
    img->syms = syms;

    w = img->width;
    h = img->height;
    cx1 = img->crop_x + img->crop_w;
  405c80:	9809      	ldr	r0, [sp, #36]	; 0x24
        STAT(syms_new);
        zbar_symbol_set_ref(syms, 1);
    }
    else
        zbar_symbol_set_ref(syms, 2);
    img->syms = syms;
  405c82:	9c10      	ldr	r4, [sp, #64]	; 0x40

    w = img->width;
    h = img->height;
    cx1 = img->crop_x + img->crop_w;
  405c84:	69c2      	ldr	r2, [r0, #28]
  405c86:	6943      	ldr	r3, [r0, #20]
  405c88:	4601      	mov	r1, r0
    }
    else
        zbar_symbol_set_ref(syms, 2);
    img->syms = syms;

    w = img->width;
  405c8a:	6840      	ldr	r0, [r0, #4]
  405c8c:	9011      	str	r0, [sp, #68]	; 0x44
    h = img->height;
    cx1 = img->crop_x + img->crop_w;
  405c8e:	eb02 0803 	add.w	r8, r2, r3
    assert(cx1 <= w);
  405c92:	4540      	cmp	r0, r8
        STAT(syms_new);
        zbar_symbol_set_ref(syms, 1);
    }
    else
        zbar_symbol_set_ref(syms, 2);
    img->syms = syms;
  405c94:	640c      	str	r4, [r1, #64]	; 0x40

    w = img->width;
    h = img->height;
  405c96:	688c      	ldr	r4, [r1, #8]
    cx1 = img->crop_x + img->crop_w;
    assert(cx1 <= w);
  405c98:	f0c0 83e7 	bcc.w	40646a <zbar_scan_image+0x852>
    cy1 = img->crop_y + img->crop_h;
  405c9c:	9909      	ldr	r1, [sp, #36]	; 0x24
  405c9e:	6a0a      	ldr	r2, [r1, #32]
  405ca0:	698b      	ldr	r3, [r1, #24]
  405ca2:	18d3      	adds	r3, r2, r3
    assert(cy1 <= h);
  405ca4:	429c      	cmp	r4, r3

    w = img->width;
    h = img->height;
    cx1 = img->crop_x + img->crop_w;
    assert(cx1 <= w);
    cy1 = img->crop_y + img->crop_h;
  405ca6:	930a      	str	r3, [sp, #40]	; 0x28
    assert(cy1 <= h);
  405ca8:	f0c0 83d8 	bcc.w	40645c <zbar_scan_image+0x844>
    data = img->data;
  405cac:	68cb      	ldr	r3, [r1, #12]
  405cae:	9306      	str	r3, [sp, #24]

    //zbar_image_write_png(img, "debug.png");
    //svg_open("debug.svg", 0, 0, w, h);
    //svg_image("debug.png", w, h);

    zbar_scanner_new_scan(scn);
  405cb0:	4628      	mov	r0, r5
  405cb2:	4b8e      	ldr	r3, [pc, #568]	; (405eec <zbar_scan_image+0x2d4>)
  405cb4:	4798      	blx	r3

    density = CFG(iscn, ZBAR_CFG_Y_DENSITY);
  405cb6:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
    if(density > 0) {
  405cb8:	2900      	cmp	r1, #0
  405cba:	f340 80cb 	ble.w	405e54 <zbar_scan_image+0x23c>
        const uint8_t *p = data;
        int x = 0, y = 0;

        int border = (((img->crop_h - 1) % density) + 1) / 2;
  405cbe:	9a09      	ldr	r2, [sp, #36]	; 0x24
  405cc0:	6a10      	ldr	r0, [r2, #32]
        if(border > img->crop_h / 2)
            border = img->crop_h / 2;
        border += img->crop_y;
  405cc2:	6992      	ldr	r2, [r2, #24]
    density = CFG(iscn, ZBAR_CFG_Y_DENSITY);
    if(density > 0) {
        const uint8_t *p = data;
        int x = 0, y = 0;

        int border = (((img->crop_h - 1) % density) + 1) / 2;
  405cc4:	1e46      	subs	r6, r0, #1
  405cc6:	fbb6 f3f1 	udiv	r3, r6, r1
  405cca:	fb01 6313 	mls	r3, r1, r3, r6
  405cce:	3301      	adds	r3, #1
        if(border > img->crop_h / 2)
  405cd0:	0840      	lsrs	r0, r0, #1
    density = CFG(iscn, ZBAR_CFG_Y_DENSITY);
    if(density > 0) {
        const uint8_t *p = data;
        int x = 0, y = 0;

        int border = (((img->crop_h - 1) % density) + 1) / 2;
  405cd2:	085b      	lsrs	r3, r3, #1
        if(border > img->crop_h / 2)
            border = img->crop_h / 2;
        border += img->crop_y;
  405cd4:	4283      	cmp	r3, r0
  405cd6:	bf94      	ite	ls
  405cd8:	18d2      	addls	r2, r2, r3
  405cda:	1812      	addhi	r2, r2, r0
        assert(border <= h);
  405cdc:	4294      	cmp	r4, r2
        int x = 0, y = 0;

        int border = (((img->crop_h - 1) % density) + 1) / 2;
        if(border > img->crop_h / 2)
            border = img->crop_h / 2;
        border += img->crop_y;
  405cde:	9205      	str	r2, [sp, #20]
        assert(border <= h);
  405ce0:	f0c0 8410 	bcc.w	406504 <zbar_scan_image+0x8ec>
        //svg_group_start("scanner", 0, 1, 1, 0, 0);
        iscn->dy = 0;
  405ce4:	2300      	movs	r3, #0
  405ce6:	61fb      	str	r3, [r7, #28]

        movedelta(img->crop_x, border);
  405ce8:	9b09      	ldr	r3, [sp, #36]	; 0x24
  405cea:	9e11      	ldr	r6, [sp, #68]	; 0x44
  405cec:	695c      	ldr	r4, [r3, #20]
        iscn->v = y;
  405cee:	9b05      	ldr	r3, [sp, #20]
        border += img->crop_y;
        assert(border <= h);
        //svg_group_start("scanner", 0, 1, 1, 0, 0);
        iscn->dy = 0;

        movedelta(img->crop_x, border);
  405cf0:	9a06      	ldr	r2, [sp, #24]
        iscn->v = y;
  405cf2:	62bb      	str	r3, [r7, #40]	; 0x28
        border += img->crop_y;
        assert(border <= h);
        //svg_group_start("scanner", 0, 1, 1, 0, 0);
        iscn->dy = 0;

        movedelta(img->crop_x, border);
  405cf4:	4630      	mov	r0, r6
  405cf6:	fb00 f003 	mul.w	r0, r0, r3
  405cfa:	eb00 0904 	add.w	r9, r0, r4
  405cfe:	4491      	add	r9, r2
        iscn->v = y;

        while(y < cy1) {
  405d00:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  405d02:	429a      	cmp	r2, r3
  405d04:	4696      	mov	lr, r2
  405d06:	f240 80a5 	bls.w	405e54 <zbar_scan_image+0x23c>
  405d0a:	18ca      	adds	r2, r1, r3
  405d0c:	4633      	mov	r3, r6
  405d0e:	fb03 f302 	mul.w	r3, r3, r2
  405d12:	9304      	str	r3, [sp, #16]
            }
            ASSERT_POS;
            quiet_border(iscn);
            //svg_path_end();

            movedelta(-1, density);
  405d14:	fb06 f301 	mul.w	r3, r6, r1
  405d18:	0049      	lsls	r1, r1, #1
  405d1a:	910b      	str	r1, [sp, #44]	; 0x2c
  405d1c:	4974      	ldr	r1, [pc, #464]	; (405ef0 <zbar_scan_image+0x2d8>)
  405d1e:	9107      	str	r1, [sp, #28]
  405d20:	9904      	ldr	r1, [sp, #16]
  405d22:	9208      	str	r2, [sp, #32]
  405d24:	1a40      	subs	r0, r0, r1
  405d26:	990b      	ldr	r1, [sp, #44]	; 0x2c
  405d28:	900d      	str	r0, [sp, #52]	; 0x34
  405d2a:	1e5a      	subs	r2, r3, #1
  405d2c:	920c      	str	r2, [sp, #48]	; 0x30
            }
            ASSERT_POS;
            quiet_border(iscn);
            //svg_path_end();

            movedelta(1, density);
  405d2e:	1c5a      	adds	r2, r3, #1
  405d30:	fb06 f301 	mul.w	r3, r6, r1
  405d34:	46aa      	mov	sl, r5
  405d36:	46bb      	mov	fp, r7
  405d38:	920e      	str	r2, [sp, #56]	; 0x38
  405d3a:	930f      	str	r3, [sp, #60]	; 0x3c
  405d3c:	464d      	mov	r5, r9
  405d3e:	4647      	mov	r7, r8
        movedelta(img->crop_x, border);
        iscn->v = y;

        while(y < cy1) {
            int cx0 = img->crop_x;;
            zprintf(128, "img_x+: %04d,%04d @%p\n", x, y, p);
  405d40:	9b07      	ldr	r3, [sp, #28]

        movedelta(img->crop_x, border);
        iscn->v = y;

        while(y < cy1) {
            int cx0 = img->crop_x;;
  405d42:	9a09      	ldr	r2, [sp, #36]	; 0x24
            zprintf(128, "img_x+: %04d,%04d @%p\n", x, y, p);
  405d44:	681b      	ldr	r3, [r3, #0]

        movedelta(img->crop_x, border);
        iscn->v = y;

        while(y < cy1) {
            int cx0 = img->crop_x;;
  405d46:	f8d2 8014 	ldr.w	r8, [r2, #20]
            zprintf(128, "img_x+: %04d,%04d @%p\n", x, y, p);
  405d4a:	2b7f      	cmp	r3, #127	; 0x7f
  405d4c:	f300 81a2 	bgt.w	406094 <zbar_scan_image+0x47c>
            //svg_path_start("vedge", 1. / 32, 0, y + 0.5);
            iscn->dx = iscn->du = 1;
  405d50:	2301      	movs	r3, #1
            iscn->umin = cx0;
            while(x < cx1) {
  405d52:	42a7      	cmp	r7, r4
  405d54:	9403      	str	r4, [sp, #12]
        while(y < cy1) {
            int cx0 = img->crop_x;;
            zprintf(128, "img_x+: %04d,%04d @%p\n", x, y, p);
            //svg_path_start("vedge", 1. / 32, 0, y + 0.5);
            iscn->dx = iscn->du = 1;
            iscn->umin = cx0;
  405d56:	f8cb 8024 	str.w	r8, [fp, #36]	; 0x24

        while(y < cy1) {
            int cx0 = img->crop_x;;
            zprintf(128, "img_x+: %04d,%04d @%p\n", x, y, p);
            //svg_path_start("vedge", 1. / 32, 0, y + 0.5);
            iscn->dx = iscn->du = 1;
  405d5a:	f8cb 3020 	str.w	r3, [fp, #32]
  405d5e:	f8cb 3018 	str.w	r3, [fp, #24]
            iscn->umin = cx0;
            while(x < cx1) {
  405d62:	d910      	bls.n	405d86 <zbar_scan_image+0x16e>
  405d64:	4e63      	ldr	r6, [pc, #396]	; (405ef4 <zbar_scan_image+0x2dc>)
  405d66:	46a9      	mov	r9, r5
  405d68:	1b64      	subs	r4, r4, r5
                uint8_t d = *p;
                movedelta(1, 0);
                zbar_scan_y(scn, d);
  405d6a:	f819 1b01 	ldrb.w	r1, [r9], #1
  405d6e:	4650      	mov	r0, sl
  405d70:	47b0      	blx	r6
  405d72:	eb09 0304 	add.w	r3, r9, r4
            int cx0 = img->crop_x;;
            zprintf(128, "img_x+: %04d,%04d @%p\n", x, y, p);
            //svg_path_start("vedge", 1. / 32, 0, y + 0.5);
            iscn->dx = iscn->du = 1;
            iscn->umin = cx0;
            while(x < cx1) {
  405d76:	429f      	cmp	r7, r3
  405d78:	d8f7      	bhi.n	405d6a <zbar_scan_image+0x152>
  405d7a:	9b03      	ldr	r3, [sp, #12]
  405d7c:	9703      	str	r7, [sp, #12]
  405d7e:	ebc3 0907 	rsb	r9, r3, r7
  405d82:	444d      	add	r5, r9
  405d84:	463c      	mov	r4, r7
  405d86:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  405d88:	9b04      	ldr	r3, [sp, #16]
  405d8a:	4413      	add	r3, r2
                uint8_t d = *p;
                movedelta(1, 0);
                zbar_scan_y(scn, d);
            }
            ASSERT_POS;
  405d8c:	9a03      	ldr	r2, [sp, #12]
  405d8e:	441a      	add	r2, r3
  405d90:	9b06      	ldr	r3, [sp, #24]
  405d92:	4691      	mov	r9, r2
  405d94:	4499      	add	r9, r3
  405d96:	45a9      	cmp	r9, r5
  405d98:	f040 83a4 	bne.w	4064e4 <zbar_scan_image+0x8cc>
  405d9c:	f8db 6000 	ldr.w	r6, [fp]

static inline void quiet_border (zbar_image_scanner_t *iscn)
{
    /* flush scanner pipeline */
    zbar_scanner_t *scn = iscn->scn;
    zbar_scanner_flush(scn);
  405da0:	4b55      	ldr	r3, [pc, #340]	; (405ef8 <zbar_scan_image+0x2e0>)
  405da2:	9303      	str	r3, [sp, #12]
  405da4:	4630      	mov	r0, r6
  405da6:	4798      	blx	r3
    zbar_scanner_flush(scn);
  405da8:	9a03      	ldr	r2, [sp, #12]
  405daa:	4630      	mov	r0, r6
  405dac:	4790      	blx	r2
            }
            ASSERT_POS;
            quiet_border(iscn);
            //svg_path_end();

            movedelta(-1, density);
  405dae:	9b0c      	ldr	r3, [sp, #48]	; 0x30
{
    /* flush scanner pipeline */
    zbar_scanner_t *scn = iscn->scn;
    zbar_scanner_flush(scn);
    zbar_scanner_flush(scn);
    zbar_scanner_new_scan(scn);
  405db0:	4630      	mov	r0, r6
            }
            ASSERT_POS;
            quiet_border(iscn);
            //svg_path_end();

            movedelta(-1, density);
  405db2:	441d      	add	r5, r3
{
    /* flush scanner pipeline */
    zbar_scanner_t *scn = iscn->scn;
    zbar_scanner_flush(scn);
    zbar_scanner_flush(scn);
    zbar_scanner_new_scan(scn);
  405db4:	4b4d      	ldr	r3, [pc, #308]	; (405eec <zbar_scan_image+0x2d4>)
  405db6:	4798      	blx	r3
            ASSERT_POS;
            quiet_border(iscn);
            //svg_path_end();

            movedelta(-1, density);
            iscn->v = y;
  405db8:	9b08      	ldr	r3, [sp, #32]
            if(y >= cy1)
  405dba:	9a0a      	ldr	r2, [sp, #40]	; 0x28
            ASSERT_POS;
            quiet_border(iscn);
            //svg_path_end();

            movedelta(-1, density);
            iscn->v = y;
  405dbc:	f8cb 3028 	str.w	r3, [fp, #40]	; 0x28
            if(y >= cy1)
  405dc0:	429a      	cmp	r2, r3
            }
            ASSERT_POS;
            quiet_border(iscn);
            //svg_path_end();

            movedelta(-1, density);
  405dc2:	f104 34ff 	add.w	r4, r4, #4294967295
            iscn->v = y;
            if(y >= cy1)
  405dc6:	d942      	bls.n	405e4e <zbar_scan_image+0x236>
                break;

            zprintf(128, "img_x-: %04d,%04d @%p\n", x, y, p);
  405dc8:	9b07      	ldr	r3, [sp, #28]
  405dca:	681b      	ldr	r3, [r3, #0]
  405dcc:	2b7f      	cmp	r3, #127	; 0x7f
  405dce:	f300 8178 	bgt.w	4060c2 <zbar_scan_image+0x4aa>
            //svg_path_start("vedge", -1. / 32, w, y + 0.5);
            iscn->dx = iscn->du = -1;
  405dd2:	f04f 33ff 	mov.w	r3, #4294967295
            iscn->umin = cx1;
            while(x >= cx0) {
  405dd6:	45a0      	cmp	r8, r4
                break;

            zprintf(128, "img_x-: %04d,%04d @%p\n", x, y, p);
            //svg_path_start("vedge", -1. / 32, w, y + 0.5);
            iscn->dx = iscn->du = -1;
            iscn->umin = cx1;
  405dd8:	f8cb 7024 	str.w	r7, [fp, #36]	; 0x24
            if(y >= cy1)
                break;

            zprintf(128, "img_x-: %04d,%04d @%p\n", x, y, p);
            //svg_path_start("vedge", -1. / 32, w, y + 0.5);
            iscn->dx = iscn->du = -1;
  405ddc:	f8cb 3020 	str.w	r3, [fp, #32]
  405de0:	f8cb 3018 	str.w	r3, [fp, #24]
            iscn->umin = cx1;
            while(x >= cx0) {
  405de4:	dc09      	bgt.n	405dfa <zbar_scan_image+0x1e2>
  405de6:	4e43      	ldr	r6, [pc, #268]	; (405ef4 <zbar_scan_image+0x2dc>)
  405de8:	46a9      	mov	r9, r5
                uint8_t d = *p;
  405dea:	f819 1901 	ldrb.w	r1, [r9], #-1
                movedelta(-1, 0);
  405dee:	3c01      	subs	r4, #1
                zbar_scan_y(scn, d);
  405df0:	4650      	mov	r0, sl
  405df2:	47b0      	blx	r6

            zprintf(128, "img_x-: %04d,%04d @%p\n", x, y, p);
            //svg_path_start("vedge", -1. / 32, w, y + 0.5);
            iscn->dx = iscn->du = -1;
            iscn->umin = cx1;
            while(x >= cx0) {
  405df4:	45a0      	cmp	r8, r4
                uint8_t d = *p;
                movedelta(-1, 0);
  405df6:	464d      	mov	r5, r9

            zprintf(128, "img_x-: %04d,%04d @%p\n", x, y, p);
            //svg_path_start("vedge", -1. / 32, w, y + 0.5);
            iscn->dx = iscn->du = -1;
            iscn->umin = cx1;
            while(x >= cx0) {
  405df8:	ddf7      	ble.n	405dea <zbar_scan_image+0x1d2>
                uint8_t d = *p;
                movedelta(-1, 0);
                zbar_scan_y(scn, d);
            }
            ASSERT_POS;
  405dfa:	9b04      	ldr	r3, [sp, #16]
  405dfc:	9a06      	ldr	r2, [sp, #24]
  405dfe:	18e3      	adds	r3, r4, r3
  405e00:	4413      	add	r3, r2
  405e02:	42ab      	cmp	r3, r5
  405e04:	f040 8367 	bne.w	4064d6 <zbar_scan_image+0x8be>
  405e08:	f8db 6000 	ldr.w	r6, [fp]

static inline void quiet_border (zbar_image_scanner_t *iscn)
{
    /* flush scanner pipeline */
    zbar_scanner_t *scn = iscn->scn;
    zbar_scanner_flush(scn);
  405e0c:	9b03      	ldr	r3, [sp, #12]
  405e0e:	4630      	mov	r0, r6
  405e10:	4798      	blx	r3
  405e12:	9905      	ldr	r1, [sp, #20]
    zbar_scanner_flush(scn);
  405e14:	9a03      	ldr	r2, [sp, #12]
  405e16:	460b      	mov	r3, r1
  405e18:	990b      	ldr	r1, [sp, #44]	; 0x2c
  405e1a:	4630      	mov	r0, r6
  405e1c:	440b      	add	r3, r1
  405e1e:	9305      	str	r3, [sp, #20]
  405e20:	4790      	blx	r2
            }
            ASSERT_POS;
            quiet_border(iscn);
            //svg_path_end();

            movedelta(1, density);
  405e22:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  405e24:	990b      	ldr	r1, [sp, #44]	; 0x2c
{
    /* flush scanner pipeline */
    zbar_scanner_t *scn = iscn->scn;
    zbar_scanner_flush(scn);
    zbar_scanner_flush(scn);
    zbar_scanner_new_scan(scn);
  405e26:	4630      	mov	r0, r6
            }
            ASSERT_POS;
            quiet_border(iscn);
            //svg_path_end();

            movedelta(1, density);
  405e28:	4415      	add	r5, r2
  405e2a:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
  405e2c:	9a04      	ldr	r2, [sp, #16]
  405e2e:	4432      	add	r2, r6
  405e30:	9204      	str	r2, [sp, #16]
  405e32:	9a08      	ldr	r2, [sp, #32]
  405e34:	440a      	add	r2, r1
  405e36:	9208      	str	r2, [sp, #32]
{
    /* flush scanner pipeline */
    zbar_scanner_t *scn = iscn->scn;
    zbar_scanner_flush(scn);
    zbar_scanner_flush(scn);
    zbar_scanner_new_scan(scn);
  405e38:	4a2c      	ldr	r2, [pc, #176]	; (405eec <zbar_scan_image+0x2d4>)
  405e3a:	4790      	blx	r2
            ASSERT_POS;
            quiet_border(iscn);
            //svg_path_end();

            movedelta(1, density);
            iscn->v = y;
  405e3c:	9b05      	ldr	r3, [sp, #20]
        iscn->dy = 0;

        movedelta(img->crop_x, border);
        iscn->v = y;

        while(y < cy1) {
  405e3e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
            ASSERT_POS;
            quiet_border(iscn);
            //svg_path_end();

            movedelta(1, density);
            iscn->v = y;
  405e40:	f8cb 3028 	str.w	r3, [fp, #40]	; 0x28
        iscn->dy = 0;

        movedelta(img->crop_x, border);
        iscn->v = y;

        while(y < cy1) {
  405e44:	429a      	cmp	r2, r3
            }
            ASSERT_POS;
            quiet_border(iscn);
            //svg_path_end();

            movedelta(1, density);
  405e46:	f104 0401 	add.w	r4, r4, #1
        iscn->dy = 0;

        movedelta(img->crop_x, border);
        iscn->v = y;

        while(y < cy1) {
  405e4a:	f63f af79 	bhi.w	405d40 <zbar_scan_image+0x128>
  405e4e:	46b8      	mov	r8, r7
  405e50:	4655      	mov	r5, sl
  405e52:	465f      	mov	r7, fp
        }
        //svg_group_end();
    }
    iscn->dx = 0;

    density = CFG(iscn, ZBAR_CFG_X_DENSITY);
  405e54:	6ebb      	ldr	r3, [r7, #104]	; 0x68
  405e56:	930b      	str	r3, [sp, #44]	; 0x2c
  405e58:	461a      	mov	r2, r3
    if(density > 0) {
  405e5a:	2a00      	cmp	r2, #0
            movedelta(1, density);
            iscn->v = y;
        }
        //svg_group_end();
    }
    iscn->dx = 0;
  405e5c:	f04f 0300 	mov.w	r3, #0
  405e60:	61bb      	str	r3, [r7, #24]

    density = CFG(iscn, ZBAR_CFG_X_DENSITY);
    if(density > 0) {
  405e62:	f340 80c8 	ble.w	405ff6 <zbar_scan_image+0x3de>
  405e66:	4614      	mov	r4, r2
        const uint8_t *p = data;
        int x = 0, y = 0;

        int border = (((img->crop_w - 1) % density) + 1) / 2;
  405e68:	9a09      	ldr	r2, [sp, #36]	; 0x24
  405e6a:	69d1      	ldr	r1, [r2, #28]
        if(border > img->crop_w / 2)
            border = img->crop_w / 2;
        border += img->crop_x;
  405e6c:	6952      	ldr	r2, [r2, #20]
    density = CFG(iscn, ZBAR_CFG_X_DENSITY);
    if(density > 0) {
        const uint8_t *p = data;
        int x = 0, y = 0;

        int border = (((img->crop_w - 1) % density) + 1) / 2;
  405e6e:	1e48      	subs	r0, r1, #1
  405e70:	fbb0 f3f4 	udiv	r3, r0, r4
  405e74:	fb04 0313 	mls	r3, r4, r3, r0
  405e78:	3301      	adds	r3, #1
  405e7a:	085b      	lsrs	r3, r3, #1
        if(border > img->crop_w / 2)
  405e7c:	0849      	lsrs	r1, r1, #1
            border = img->crop_w / 2;
        border += img->crop_x;
  405e7e:	428b      	cmp	r3, r1
  405e80:	bf94      	ite	ls
  405e82:	18d2      	addls	r2, r2, r3
  405e84:	1852      	addhi	r2, r2, r1
  405e86:	4613      	mov	r3, r2
  405e88:	9208      	str	r2, [sp, #32]
        assert(border <= w);
  405e8a:	9a11      	ldr	r2, [sp, #68]	; 0x44
  405e8c:	429a      	cmp	r2, r3
  405e8e:	f0c0 831b 	bcc.w	4064c8 <zbar_scan_image+0x8b0>
        //svg_group_start("scanner", 90, 1, -1, 0, 0);
        movedelta(border, img->crop_y);
  405e92:	9b09      	ldr	r3, [sp, #36]	; 0x24
  405e94:	699c      	ldr	r4, [r3, #24]
        iscn->v = x;
  405e96:	9b08      	ldr	r3, [sp, #32]
  405e98:	62bb      	str	r3, [r7, #40]	; 0x28
  405e9a:	4611      	mov	r1, r2
        if(border > img->crop_w / 2)
            border = img->crop_w / 2;
        border += img->crop_x;
        assert(border <= w);
        //svg_group_start("scanner", 90, 1, -1, 0, 0);
        movedelta(border, img->crop_y);
  405e9c:	9a06      	ldr	r2, [sp, #24]
  405e9e:	fb01 3c04 	mla	ip, r1, r4, r3
        iscn->v = x;

        while(x < cx1) {
  405ea2:	4598      	cmp	r8, r3
        if(border > img->crop_w / 2)
            border = img->crop_w / 2;
        border += img->crop_x;
        assert(border <= w);
        //svg_group_start("scanner", 90, 1, -1, 0, 0);
        movedelta(border, img->crop_y);
  405ea4:	eb02 0a0c 	add.w	sl, r2, ip
        iscn->v = x;

        while(x < cx1) {
  405ea8:	461a      	mov	r2, r3
  405eaa:	f240 80a4 	bls.w	405ff6 <zbar_scan_image+0x3de>
  405eae:	4b10      	ldr	r3, [pc, #64]	; (405ef0 <zbar_scan_image+0x2d8>)
  405eb0:	9307      	str	r3, [sp, #28]
  405eb2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  405eb4:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
  405eb8:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30
  405ebc:	0058      	lsls	r0, r3, #1
  405ebe:	900d      	str	r0, [sp, #52]	; 0x34
  405ec0:	4618      	mov	r0, r3
  405ec2:	1883      	adds	r3, r0, r2
  405ec4:	9305      	str	r3, [sp, #20]
  405ec6:	4656      	mov	r6, sl
  405ec8:	4688      	mov	r8, r1
  405eca:	9703      	str	r7, [sp, #12]
            int cy0 = img->crop_y;
            zprintf(128, "img_y+: %04d,%04d @%p\n", x, y, p);
  405ecc:	9b07      	ldr	r3, [sp, #28]
        //svg_group_start("scanner", 90, 1, -1, 0, 0);
        movedelta(border, img->crop_y);
        iscn->v = x;

        while(x < cx1) {
            int cy0 = img->crop_y;
  405ece:	9a09      	ldr	r2, [sp, #36]	; 0x24
            zprintf(128, "img_y+: %04d,%04d @%p\n", x, y, p);
  405ed0:	681b      	ldr	r3, [r3, #0]
        //svg_group_start("scanner", 90, 1, -1, 0, 0);
        movedelta(border, img->crop_y);
        iscn->v = x;

        while(x < cx1) {
            int cy0 = img->crop_y;
  405ed2:	f8d2 b018 	ldr.w	fp, [r2, #24]
            zprintf(128, "img_y+: %04d,%04d @%p\n", x, y, p);
  405ed6:	2b7f      	cmp	r3, #127	; 0x7f
  405ed8:	f300 80e8 	bgt.w	4060ac <zbar_scan_image+0x494>
  405edc:	e00e      	b.n	405efc <zbar_scan_image+0x2e4>
  405ede:	bf00      	nop
  405ee0:	30303859 	.word	0x30303859
  405ee4:	59455247 	.word	0x59455247
  405ee8:	00406b49 	.word	0x00406b49
  405eec:	00406609 	.word	0x00406609
  405ef0:	2000127c 	.word	0x2000127c
  405ef4:	004066ad 	.word	0x004066ad
  405ef8:	004065a5 	.word	0x004065a5
            //svg_path_start("vedge", 1. / 32, 0, x + 0.5);
            iscn->dy = iscn->du = 1;
            iscn->umin = cy0;
  405efc:	9903      	ldr	r1, [sp, #12]
            while(y < cy1) {
  405efe:	9404      	str	r4, [sp, #16]

        while(x < cx1) {
            int cy0 = img->crop_y;
            zprintf(128, "img_y+: %04d,%04d @%p\n", x, y, p);
            //svg_path_start("vedge", 1. / 32, 0, x + 0.5);
            iscn->dy = iscn->du = 1;
  405f00:	2301      	movs	r3, #1
            iscn->umin = cy0;
            while(y < cy1) {
  405f02:	45a1      	cmp	r9, r4
        while(x < cx1) {
            int cy0 = img->crop_y;
            zprintf(128, "img_y+: %04d,%04d @%p\n", x, y, p);
            //svg_path_start("vedge", 1. / 32, 0, x + 0.5);
            iscn->dy = iscn->du = 1;
            iscn->umin = cy0;
  405f04:	f8c1 b024 	str.w	fp, [r1, #36]	; 0x24

        while(x < cx1) {
            int cy0 = img->crop_y;
            zprintf(128, "img_y+: %04d,%04d @%p\n", x, y, p);
            //svg_path_start("vedge", 1. / 32, 0, x + 0.5);
            iscn->dy = iscn->du = 1;
  405f08:	620b      	str	r3, [r1, #32]
  405f0a:	61cb      	str	r3, [r1, #28]
            iscn->umin = cy0;
            while(y < cy1) {
  405f0c:	d90f      	bls.n	405f2e <zbar_scan_image+0x316>
  405f0e:	4f91      	ldr	r7, [pc, #580]	; (406154 <zbar_scan_image+0x53c>)
  405f10:	46b2      	mov	sl, r6
                uint8_t d = *p;
  405f12:	f89a 1000 	ldrb.w	r1, [sl]
                movedelta(0, 1);
  405f16:	3401      	adds	r4, #1
                zbar_scan_y(scn, d);
  405f18:	4628      	mov	r0, r5
  405f1a:	47b8      	blx	r7
            int cy0 = img->crop_y;
            zprintf(128, "img_y+: %04d,%04d @%p\n", x, y, p);
            //svg_path_start("vedge", 1. / 32, 0, x + 0.5);
            iscn->dy = iscn->du = 1;
            iscn->umin = cy0;
            while(y < cy1) {
  405f1c:	45a1      	cmp	r9, r4
                uint8_t d = *p;
                movedelta(0, 1);
  405f1e:	44c2      	add	sl, r8
            int cy0 = img->crop_y;
            zprintf(128, "img_y+: %04d,%04d @%p\n", x, y, p);
            //svg_path_start("vedge", 1. / 32, 0, x + 0.5);
            iscn->dy = iscn->du = 1;
            iscn->umin = cy0;
            while(y < cy1) {
  405f20:	d8f7      	bhi.n	405f12 <zbar_scan_image+0x2fa>
  405f22:	9b04      	ldr	r3, [sp, #16]
  405f24:	ebc3 0a09 	rsb	sl, r3, r9
  405f28:	fb08 660a 	mla	r6, r8, sl, r6
  405f2c:	464c      	mov	r4, r9
                uint8_t d = *p;
                movedelta(0, 1);
                zbar_scan_y(scn, d);
            }
            ASSERT_POS;
  405f2e:	9b08      	ldr	r3, [sp, #32]
  405f30:	9a06      	ldr	r2, [sp, #24]
  405f32:	fb08 3304 	mla	r3, r8, r4, r3
  405f36:	4413      	add	r3, r2
  405f38:	42b3      	cmp	r3, r6
  405f3a:	f040 825d 	bne.w	4063f8 <zbar_scan_image+0x7e0>
  405f3e:	9b03      	ldr	r3, [sp, #12]
  405f40:	681f      	ldr	r7, [r3, #0]

static inline void quiet_border (zbar_image_scanner_t *iscn)
{
    /* flush scanner pipeline */
    zbar_scanner_t *scn = iscn->scn;
    zbar_scanner_flush(scn);
  405f42:	4b85      	ldr	r3, [pc, #532]	; (406158 <zbar_scan_image+0x540>)
  405f44:	9304      	str	r3, [sp, #16]
  405f46:	4638      	mov	r0, r7
  405f48:	4798      	blx	r3
    zbar_scanner_flush(scn);
  405f4a:	9a04      	ldr	r2, [sp, #16]
  405f4c:	4638      	mov	r0, r7
  405f4e:	4790      	blx	r2
    zbar_scanner_new_scan(scn);
  405f50:	4982      	ldr	r1, [pc, #520]	; (40615c <zbar_scan_image+0x544>)
  405f52:	4638      	mov	r0, r7
  405f54:	4788      	blx	r1
            }
            ASSERT_POS;
            quiet_border(iscn);
            //svg_path_end();

            movedelta(density, -1);
  405f56:	990b      	ldr	r1, [sp, #44]	; 0x2c
            iscn->v = x;
  405f58:	9a03      	ldr	r2, [sp, #12]
            }
            ASSERT_POS;
            quiet_border(iscn);
            //svg_path_end();

            movedelta(density, -1);
  405f5a:	ebc8 0301 	rsb	r3, r8, r1
  405f5e:	441e      	add	r6, r3
            iscn->v = x;
  405f60:	9905      	ldr	r1, [sp, #20]
            if(x >= cx1)
  405f62:	9b0c      	ldr	r3, [sp, #48]	; 0x30
            ASSERT_POS;
            quiet_border(iscn);
            //svg_path_end();

            movedelta(density, -1);
            iscn->v = x;
  405f64:	6291      	str	r1, [r2, #40]	; 0x28
            if(x >= cx1)
  405f66:	428b      	cmp	r3, r1
            }
            ASSERT_POS;
            quiet_border(iscn);
            //svg_path_end();

            movedelta(density, -1);
  405f68:	f104 34ff 	add.w	r4, r4, #4294967295
            iscn->v = x;
            if(x >= cx1)
  405f6c:	f240 8158 	bls.w	406220 <zbar_scan_image+0x608>
                break;

            zprintf(128, "img_y-: %04d,%04d @%p\n", x, y, p);
  405f70:	9b07      	ldr	r3, [sp, #28]
  405f72:	681b      	ldr	r3, [r3, #0]
  405f74:	2b7f      	cmp	r3, #127	; 0x7f
  405f76:	f300 80b0 	bgt.w	4060da <zbar_scan_image+0x4c2>
            //svg_path_start("vedge", -1. / 32, h, x + 0.5);
            iscn->dy = iscn->du = -1;
            iscn->umin = cy1;
  405f7a:	9903      	ldr	r1, [sp, #12]
            if(x >= cx1)
                break;

            zprintf(128, "img_y-: %04d,%04d @%p\n", x, y, p);
            //svg_path_start("vedge", -1. / 32, h, x + 0.5);
            iscn->dy = iscn->du = -1;
  405f7c:	f04f 33ff 	mov.w	r3, #4294967295
            iscn->umin = cy1;
            while(y >= cy0) {
  405f80:	45a3      	cmp	fp, r4
                break;

            zprintf(128, "img_y-: %04d,%04d @%p\n", x, y, p);
            //svg_path_start("vedge", -1. / 32, h, x + 0.5);
            iscn->dy = iscn->du = -1;
            iscn->umin = cy1;
  405f82:	f8c1 9024 	str.w	r9, [r1, #36]	; 0x24
            if(x >= cx1)
                break;

            zprintf(128, "img_y-: %04d,%04d @%p\n", x, y, p);
            //svg_path_start("vedge", -1. / 32, h, x + 0.5);
            iscn->dy = iscn->du = -1;
  405f86:	620b      	str	r3, [r1, #32]
  405f88:	61cb      	str	r3, [r1, #28]
            iscn->umin = cy1;
            while(y >= cy0) {
  405f8a:	dc09      	bgt.n	405fa0 <zbar_scan_image+0x388>
  405f8c:	4f71      	ldr	r7, [pc, #452]	; (406154 <zbar_scan_image+0x53c>)
  405f8e:	f1c8 0a00 	rsb	sl, r8, #0
                uint8_t d = *p;
  405f92:	7831      	ldrb	r1, [r6, #0]
                movedelta(0, -1);
  405f94:	3c01      	subs	r4, #1
                zbar_scan_y(scn, d);
  405f96:	4628      	mov	r0, r5
  405f98:	47b8      	blx	r7

            zprintf(128, "img_y-: %04d,%04d @%p\n", x, y, p);
            //svg_path_start("vedge", -1. / 32, h, x + 0.5);
            iscn->dy = iscn->du = -1;
            iscn->umin = cy1;
            while(y >= cy0) {
  405f9a:	45a3      	cmp	fp, r4
                uint8_t d = *p;
                movedelta(0, -1);
  405f9c:	4456      	add	r6, sl

            zprintf(128, "img_y-: %04d,%04d @%p\n", x, y, p);
            //svg_path_start("vedge", -1. / 32, h, x + 0.5);
            iscn->dy = iscn->du = -1;
            iscn->umin = cy1;
            while(y >= cy0) {
  405f9e:	ddf8      	ble.n	405f92 <zbar_scan_image+0x37a>
                uint8_t d = *p;
                movedelta(0, -1);
                zbar_scan_y(scn, d);
            }
            ASSERT_POS;
  405fa0:	9b05      	ldr	r3, [sp, #20]
  405fa2:	9a06      	ldr	r2, [sp, #24]
  405fa4:	fb08 3304 	mla	r3, r8, r4, r3
  405fa8:	4413      	add	r3, r2
  405faa:	42b3      	cmp	r3, r6
  405fac:	f040 82a1 	bne.w	4064f2 <zbar_scan_image+0x8da>
  405fb0:	9b03      	ldr	r3, [sp, #12]

static inline void quiet_border (zbar_image_scanner_t *iscn)
{
    /* flush scanner pipeline */
    zbar_scanner_t *scn = iscn->scn;
    zbar_scanner_flush(scn);
  405fb2:	9904      	ldr	r1, [sp, #16]
  405fb4:	681f      	ldr	r7, [r3, #0]
  405fb6:	4638      	mov	r0, r7
  405fb8:	4788      	blx	r1
    zbar_scanner_flush(scn);
  405fba:	4638      	mov	r0, r7
  405fbc:	9904      	ldr	r1, [sp, #16]
  405fbe:	4788      	blx	r1
  405fc0:	9908      	ldr	r1, [sp, #32]
  405fc2:	460b      	mov	r3, r1
  405fc4:	990d      	ldr	r1, [sp, #52]	; 0x34
  405fc6:	440b      	add	r3, r1
    zbar_scanner_new_scan(scn);
  405fc8:	4638      	mov	r0, r7
  405fca:	9308      	str	r3, [sp, #32]
  405fcc:	461f      	mov	r7, r3
  405fce:	4b63      	ldr	r3, [pc, #396]	; (40615c <zbar_scan_image+0x544>)
  405fd0:	4798      	blx	r3
            }
            ASSERT_POS;
            quiet_border(iscn);
            //svg_path_end();

            movedelta(density, 1);
  405fd2:	980b      	ldr	r0, [sp, #44]	; 0x2c
  405fd4:	990d      	ldr	r1, [sp, #52]	; 0x34
            iscn->v = x;
  405fd6:	9a03      	ldr	r2, [sp, #12]
            }
            ASSERT_POS;
            quiet_border(iscn);
            //svg_path_end();

            movedelta(density, 1);
  405fd8:	eb00 0308 	add.w	r3, r0, r8
  405fdc:	9805      	ldr	r0, [sp, #20]
  405fde:	441e      	add	r6, r3
        assert(border <= w);
        //svg_group_start("scanner", 90, 1, -1, 0, 0);
        movedelta(border, img->crop_y);
        iscn->v = x;

        while(x < cx1) {
  405fe0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  405fe2:	4408      	add	r0, r1
            ASSERT_POS;
            quiet_border(iscn);
            //svg_path_end();

            movedelta(density, 1);
            iscn->v = x;
  405fe4:	4611      	mov	r1, r2
        assert(border <= w);
        //svg_group_start("scanner", 90, 1, -1, 0, 0);
        movedelta(border, img->crop_y);
        iscn->v = x;

        while(x < cx1) {
  405fe6:	42bb      	cmp	r3, r7
            }
            ASSERT_POS;
            quiet_border(iscn);
            //svg_path_end();

            movedelta(density, 1);
  405fe8:	f104 0401 	add.w	r4, r4, #1
  405fec:	9005      	str	r0, [sp, #20]
            iscn->v = x;
  405fee:	628f      	str	r7, [r1, #40]	; 0x28
        assert(border <= w);
        //svg_group_start("scanner", 90, 1, -1, 0, 0);
        movedelta(border, img->crop_y);
        iscn->v = x;

        while(x < cx1) {
  405ff0:	f63f af6c 	bhi.w	405ecc <zbar_scan_image+0x2b4>
  405ff4:	460f      	mov	r7, r1
    _zbar_qr_decode(iscn->qr, iscn, img);
#endif

    /* FIXME tmp hack to filter bad EAN results */
    /* FIXME tmp hack to merge simple case EAN add-ons */
    char filter = (!iscn->enable_cache &&
  405ff6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
            movedelta(density, 1);
            iscn->v = x;
        }
        //svg_group_end();
    }
    iscn->dy = 0;
  405ff8:	2600      	movs	r6, #0
  405ffa:	61fe      	str	r6, [r7, #28]
    iscn->img = NULL;
  405ffc:	617e      	str	r6, [r7, #20]
    _zbar_qr_decode(iscn->qr, iscn, img);
#endif

    /* FIXME tmp hack to filter bad EAN results */
    /* FIXME tmp hack to merge simple case EAN add-ons */
    char filter = (!iscn->enable_cache &&
  405ffe:	2b00      	cmp	r3, #0
  406000:	d076      	beq.n	4060f0 <zbar_scan_image+0x4d8>
  406002:	9603      	str	r6, [sp, #12]
                   (density == 1 || CFG(iscn, ZBAR_CFG_Y_DENSITY) == 1));
    int nean = 0, naddon = 0;
    if(syms->nsyms) {
  406004:	9b10      	ldr	r3, [sp, #64]	; 0x40
  406006:	6858      	ldr	r0, [r3, #4]
  406008:	2800      	cmp	r0, #0
  40600a:	d040      	beq.n	40608e <zbar_scan_image+0x476>
        zbar_symbol_t **symp;
        for(symp = &syms->head; *symp; ) {
  40600c:	3308      	adds	r3, #8

    /* FIXME tmp hack to filter bad EAN results */
    /* FIXME tmp hack to merge simple case EAN add-ons */
    char filter = (!iscn->enable_cache &&
                   (density == 1 || CFG(iscn, ZBAR_CFG_Y_DENSITY) == 1));
    int nean = 0, naddon = 0;
  40600e:	2200      	movs	r2, #0
    if(syms->nsyms) {
        zbar_symbol_t **symp;
        for(symp = &syms->head; *symp; ) {
  406010:	9306      	str	r3, [sp, #24]

    /* FIXME tmp hack to filter bad EAN results */
    /* FIXME tmp hack to merge simple case EAN add-ons */
    char filter = (!iscn->enable_cache &&
                   (density == 1 || CFG(iscn, ZBAR_CFG_Y_DENSITY) == 1));
    int nean = 0, naddon = 0;
  406012:	9205      	str	r2, [sp, #20]
    if(syms->nsyms) {
        zbar_symbol_t **symp;
        for(symp = &syms->head; *symp; ) {
  406014:	469a      	mov	sl, r3

    /* FIXME tmp hack to filter bad EAN results */
    /* FIXME tmp hack to merge simple case EAN add-ons */
    char filter = (!iscn->enable_cache &&
                   (density == 1 || CFG(iscn, ZBAR_CFG_Y_DENSITY) == 1));
    int nean = 0, naddon = 0;
  406016:	9204      	str	r2, [sp, #16]

                    /* recycle */
                    *symp = sym->next;
                    syms->nsyms--;
                    sym->next = NULL;
                    _zbar_image_scanner_recycle_syms(iscn, sym);
  406018:	f8df 8160 	ldr.w	r8, [pc, #352]	; 40617c <zbar_scan_image+0x564>
    char filter = (!iscn->enable_cache &&
                   (density == 1 || CFG(iscn, ZBAR_CFG_Y_DENSITY) == 1));
    int nean = 0, naddon = 0;
    if(syms->nsyms) {
        zbar_symbol_t **symp;
        for(symp = &syms->head; *symp; ) {
  40601c:	e001      	b.n	406022 <zbar_scan_image+0x40a>
                        nean++;
                    else
                        naddon++;
                }
            }
            symp = &sym->next;
  40601e:	f104 0a2c 	add.w	sl, r4, #44	; 0x2c
    char filter = (!iscn->enable_cache &&
                   (density == 1 || CFG(iscn, ZBAR_CFG_Y_DENSITY) == 1));
    int nean = 0, naddon = 0;
    if(syms->nsyms) {
        zbar_symbol_t **symp;
        for(symp = &syms->head; *symp; ) {
  406022:	f8da 4000 	ldr.w	r4, [sl]
  406026:	b32c      	cbz	r4, 406074 <zbar_scan_image+0x45c>
            zbar_symbol_t *sym = *symp;
            if(sym->cache_count <= 0 &&
  406028:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  40602a:	2b00      	cmp	r3, #0
  40602c:	dcf7      	bgt.n	40601e <zbar_scan_image+0x406>
               ((sym->type < ZBAR_COMPOSITE && sym->type > ZBAR_PARTIAL) ||
  40602e:	8823      	ldrh	r3, [r4, #0]
    int nean = 0, naddon = 0;
    if(syms->nsyms) {
        zbar_symbol_t **symp;
        for(symp = &syms->head; *symp; ) {
            zbar_symbol_t *sym = *symp;
            if(sym->cache_count <= 0 &&
  406030:	1e9a      	subs	r2, r3, #2
  406032:	2a0c      	cmp	r2, #12
  406034:	f240 80aa 	bls.w	40618c <zbar_scan_image+0x574>
               ((sym->type < ZBAR_COMPOSITE && sym->type > ZBAR_PARTIAL) ||
  406038:	f1a3 0222 	sub.w	r2, r3, #34	; 0x22
  40603c:	2a01      	cmp	r2, #1
  40603e:	f240 80a5 	bls.w	40618c <zbar_scan_image+0x574>
                sym->type == ZBAR_DATABAR ||
                sym->type == ZBAR_DATABAR_EXP ||
  406042:	2b26      	cmp	r3, #38	; 0x26
  406044:	d1eb      	bne.n	40601e <zbar_scan_image+0x406>
                sym->type == ZBAR_CODABAR))
            {
	        if((sym->type == ZBAR_CODABAR || filter) && sym->quality < 4) {
  406046:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  406048:	2b03      	cmp	r3, #3
  40604a:	dce8      	bgt.n	40601e <zbar_scan_image+0x406>
                    if(iscn->enable_cache) {
  40604c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
  40604e:	2b00      	cmp	r3, #0
  406050:	f040 80a6 	bne.w	4061a0 <zbar_scan_image+0x588>
                        else
                            assert(0);
                    }

                    /* recycle */
                    *symp = sym->next;
  406054:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
                    syms->nsyms--;
  406056:	9910      	ldr	r1, [sp, #64]	; 0x40
                        else
                            assert(0);
                    }

                    /* recycle */
                    *symp = sym->next;
  406058:	f8ca 3000 	str.w	r3, [sl]
                    syms->nsyms--;
  40605c:	684b      	ldr	r3, [r1, #4]
                    sym->next = NULL;
  40605e:	2200      	movs	r2, #0
                            assert(0);
                    }

                    /* recycle */
                    *symp = sym->next;
                    syms->nsyms--;
  406060:	3b01      	subs	r3, #1
  406062:	604b      	str	r3, [r1, #4]
                    sym->next = NULL;
                    _zbar_image_scanner_recycle_syms(iscn, sym);
  406064:	4638      	mov	r0, r7
  406066:	4621      	mov	r1, r4
                    }

                    /* recycle */
                    *symp = sym->next;
                    syms->nsyms--;
                    sym->next = NULL;
  406068:	62e2      	str	r2, [r4, #44]	; 0x2c
                    _zbar_image_scanner_recycle_syms(iscn, sym);
  40606a:	47c0      	blx	r8
    char filter = (!iscn->enable_cache &&
                   (density == 1 || CFG(iscn, ZBAR_CFG_Y_DENSITY) == 1));
    int nean = 0, naddon = 0;
    if(syms->nsyms) {
        zbar_symbol_t **symp;
        for(symp = &syms->head; *symp; ) {
  40606c:	f8da 4000 	ldr.w	r4, [sl]
  406070:	2c00      	cmp	r4, #0
  406072:	d1d9      	bne.n	406028 <zbar_scan_image+0x410>
                }
            }
            symp = &sym->next;
        }

        if(nean == 1 && naddon == 1 && iscn->ean_config) {
  406074:	9b04      	ldr	r3, [sp, #16]
  406076:	2b01      	cmp	r3, #1
  406078:	f000 80f2 	beq.w	406260 <zbar_scan_image+0x648>
            ean_sym->syms->nsyms = 2;
            _zbar_image_scanner_add_sym(iscn, ean_sym);
        }
    }

    if(syms->nsyms && iscn->handler)
  40607c:	9c10      	ldr	r4, [sp, #64]	; 0x40
  40607e:	6860      	ldr	r0, [r4, #4]
  406080:	b128      	cbz	r0, 40608e <zbar_scan_image+0x476>
  406082:	68fb      	ldr	r3, [r7, #12]
  406084:	b11b      	cbz	r3, 40608e <zbar_scan_image+0x476>
        iscn->handler(img, iscn->userdata);
  406086:	9809      	ldr	r0, [sp, #36]	; 0x24
  406088:	68b9      	ldr	r1, [r7, #8]
  40608a:	4798      	blx	r3
  40608c:	6860      	ldr	r0, [r4, #4]

    //svg_close();
    return(syms->nsyms);
}
  40608e:	b013      	add	sp, #76	; 0x4c
  406090:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        movedelta(img->crop_x, border);
        iscn->v = y;

        while(y < cy1) {
            int cx0 = img->crop_x;;
            zprintf(128, "img_x+: %04d,%04d @%p\n", x, y, p);
  406094:	4b32      	ldr	r3, [pc, #200]	; (406160 <zbar_scan_image+0x548>)
  406096:	4933      	ldr	r1, [pc, #204]	; (406164 <zbar_scan_image+0x54c>)
  406098:	681b      	ldr	r3, [r3, #0]
  40609a:	4a33      	ldr	r2, [pc, #204]	; (406168 <zbar_scan_image+0x550>)
  40609c:	68d8      	ldr	r0, [r3, #12]
  40609e:	9b05      	ldr	r3, [sp, #20]
  4060a0:	4e32      	ldr	r6, [pc, #200]	; (40616c <zbar_scan_image+0x554>)
  4060a2:	e88d 0028 	stmia.w	sp, {r3, r5}
  4060a6:	4623      	mov	r3, r4
  4060a8:	47b0      	blx	r6
  4060aa:	e651      	b.n	405d50 <zbar_scan_image+0x138>
        movedelta(border, img->crop_y);
        iscn->v = x;

        while(x < cx1) {
            int cy0 = img->crop_y;
            zprintf(128, "img_y+: %04d,%04d @%p\n", x, y, p);
  4060ac:	4b2c      	ldr	r3, [pc, #176]	; (406160 <zbar_scan_image+0x548>)
  4060ae:	4930      	ldr	r1, [pc, #192]	; (406170 <zbar_scan_image+0x558>)
  4060b0:	681b      	ldr	r3, [r3, #0]
  4060b2:	4a2d      	ldr	r2, [pc, #180]	; (406168 <zbar_scan_image+0x550>)
  4060b4:	68d8      	ldr	r0, [r3, #12]
  4060b6:	4f2d      	ldr	r7, [pc, #180]	; (40616c <zbar_scan_image+0x554>)
  4060b8:	9b08      	ldr	r3, [sp, #32]
  4060ba:	e88d 0050 	stmia.w	sp, {r4, r6}
  4060be:	47b8      	blx	r7
  4060c0:	e71c      	b.n	405efc <zbar_scan_image+0x2e4>
            movedelta(-1, density);
            iscn->v = y;
            if(y >= cy1)
                break;

            zprintf(128, "img_x-: %04d,%04d @%p\n", x, y, p);
  4060c2:	4b27      	ldr	r3, [pc, #156]	; (406160 <zbar_scan_image+0x548>)
  4060c4:	492b      	ldr	r1, [pc, #172]	; (406174 <zbar_scan_image+0x55c>)
  4060c6:	681b      	ldr	r3, [r3, #0]
  4060c8:	4a27      	ldr	r2, [pc, #156]	; (406168 <zbar_scan_image+0x550>)
  4060ca:	68d8      	ldr	r0, [r3, #12]
  4060cc:	9b08      	ldr	r3, [sp, #32]
  4060ce:	4e27      	ldr	r6, [pc, #156]	; (40616c <zbar_scan_image+0x554>)
  4060d0:	e88d 0028 	stmia.w	sp, {r3, r5}
  4060d4:	4623      	mov	r3, r4
  4060d6:	47b0      	blx	r6
  4060d8:	e67b      	b.n	405dd2 <zbar_scan_image+0x1ba>
            movedelta(density, -1);
            iscn->v = x;
            if(x >= cx1)
                break;

            zprintf(128, "img_y-: %04d,%04d @%p\n", x, y, p);
  4060da:	4b21      	ldr	r3, [pc, #132]	; (406160 <zbar_scan_image+0x548>)
  4060dc:	4926      	ldr	r1, [pc, #152]	; (406178 <zbar_scan_image+0x560>)
  4060de:	681b      	ldr	r3, [r3, #0]
  4060e0:	4a21      	ldr	r2, [pc, #132]	; (406168 <zbar_scan_image+0x550>)
  4060e2:	68d8      	ldr	r0, [r3, #12]
  4060e4:	4f21      	ldr	r7, [pc, #132]	; (40616c <zbar_scan_image+0x554>)
  4060e6:	9b05      	ldr	r3, [sp, #20]
  4060e8:	e88d 0050 	stmia.w	sp, {r4, r6}
  4060ec:	47b8      	blx	r7
  4060ee:	e744      	b.n	405f7a <zbar_scan_image+0x362>
    _zbar_qr_decode(iscn->qr, iscn, img);
#endif

    /* FIXME tmp hack to filter bad EAN results */
    /* FIXME tmp hack to merge simple case EAN add-ons */
    char filter = (!iscn->enable_cache &&
  4060f0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  4060f2:	2b01      	cmp	r3, #1
                   (density == 1 || CFG(iscn, ZBAR_CFG_Y_DENSITY) == 1));
  4060f4:	bf1f      	itttt	ne
  4060f6:	6efe      	ldrne	r6, [r7, #108]	; 0x6c
  4060f8:	1e73      	subne	r3, r6, #1
  4060fa:	fab3 f383 	clzne	r3, r3
  4060fe:	095b      	lsrne	r3, r3, #5
    _zbar_qr_decode(iscn->qr, iscn, img);
#endif

    /* FIXME tmp hack to filter bad EAN results */
    /* FIXME tmp hack to merge simple case EAN add-ons */
    char filter = (!iscn->enable_cache &&
  406100:	9303      	str	r3, [sp, #12]
  406102:	e77f      	b.n	406004 <zbar_scan_image+0x3ec>
                                zbar_symbol_set_t *syms)
{
    if(_zbar_refcnt(&syms->refcnt, -1))
        return(1);

    _zbar_image_scanner_recycle_syms(iscn, syms->head);
  406104:	4616      	mov	r6, r2
  406106:	4638      	mov	r0, r7
  406108:	6891      	ldr	r1, [r2, #8]
  40610a:	4b1c      	ldr	r3, [pc, #112]	; (40617c <zbar_scan_image+0x564>)
  40610c:	4798      	blx	r3
    syms->head = syms->tail = NULL;
  40610e:	60f4      	str	r4, [r6, #12]
  406110:	60b4      	str	r4, [r6, #8]
    syms->nsyms = 0;
  406112:	6074      	str	r4, [r6, #4]
    syms = img->syms;
    img->syms = NULL;
    if(syms && recycle_syms(iscn, syms))
        STAT(img_syms_inuse);
    else if(syms) {
        STAT(img_syms_recycle);
  406114:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0

        /* select one set to resurrect, destroy the other */
        if(iscn->syms)
  406118:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    syms = img->syms;
    img->syms = NULL;
    if(syms && recycle_syms(iscn, syms))
        STAT(img_syms_inuse);
    else if(syms) {
        STAT(img_syms_recycle);
  40611a:	3301      	adds	r3, #1
{
    if(_zbar_refcnt(&syms->refcnt, -1))
        return(1);

    _zbar_image_scanner_recycle_syms(iscn, syms->head);
    syms->head = syms->tail = NULL;
  40611c:	4630      	mov	r0, r6
    syms = img->syms;
    img->syms = NULL;
    if(syms && recycle_syms(iscn, syms))
        STAT(img_syms_inuse);
    else if(syms) {
        STAT(img_syms_recycle);
  40611e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0

        /* select one set to resurrect, destroy the other */
        if(iscn->syms)
  406122:	b19a      	cbz	r2, 40614c <zbar_scan_image+0x534>
            _zbar_symbol_set_free(syms);
  406124:	4b16      	ldr	r3, [pc, #88]	; (406180 <zbar_scan_image+0x568>)
  406126:	4798      	blx	r3
        return(-1);
    iscn->img = img;

    /* recycle previous scanner and image results */
    zbar_image_scanner_recycle_image(iscn, img);
    syms = iscn->syms;
  406128:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  40612a:	9310      	str	r3, [sp, #64]	; 0x40
    if(!syms) {
  40612c:	2b00      	cmp	r3, #0
  40612e:	f47f ada3 	bne.w	405c78 <zbar_scan_image+0x60>
        syms = iscn->syms = _zbar_symbol_set_create();
  406132:	4b14      	ldr	r3, [pc, #80]	; (406184 <zbar_scan_image+0x56c>)
  406134:	4798      	blx	r3
        STAT(syms_new);
  406136:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0

    /* recycle previous scanner and image results */
    zbar_image_scanner_recycle_image(iscn, img);
    syms = iscn->syms;
    if(!syms) {
        syms = iscn->syms = _zbar_symbol_set_create();
  40613a:	62f8      	str	r0, [r7, #44]	; 0x2c
        STAT(syms_new);
  40613c:	3301      	adds	r3, #1
  40613e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
        zbar_symbol_set_ref(syms, 1);
  406142:	2101      	movs	r1, #1
  406144:	4b10      	ldr	r3, [pc, #64]	; (406188 <zbar_scan_image+0x570>)

    /* recycle previous scanner and image results */
    zbar_image_scanner_recycle_image(iscn, img);
    syms = iscn->syms;
    if(!syms) {
        syms = iscn->syms = _zbar_symbol_set_create();
  406146:	9010      	str	r0, [sp, #64]	; 0x40
        STAT(syms_new);
        zbar_symbol_set_ref(syms, 1);
  406148:	4798      	blx	r3
  40614a:	e599      	b.n	405c80 <zbar_scan_image+0x68>

        /* select one set to resurrect, destroy the other */
        if(iscn->syms)
            _zbar_symbol_set_free(syms);
        else
            iscn->syms = syms;
  40614c:	9b10      	ldr	r3, [sp, #64]	; 0x40
  40614e:	62fb      	str	r3, [r7, #44]	; 0x2c
  406150:	e592      	b.n	405c78 <zbar_scan_image+0x60>
  406152:	bf00      	nop
  406154:	004066ad 	.word	0x004066ad
  406158:	004065a5 	.word	0x004065a5
  40615c:	00406609 	.word	0x00406609
  406160:	200008b0 	.word	0x200008b0
  406164:	004115d4 	.word	0x004115d4
  406168:	0041167c 	.word	0x0041167c
  40616c:	0040814d 	.word	0x0040814d
  406170:	00411638 	.word	0x00411638
  406174:	00411610 	.word	0x00411610
  406178:	00411654 	.word	0x00411654
  40617c:	00405251 	.word	0x00405251
  406180:	0040695d 	.word	0x0040695d
  406184:	00406939 	.word	0x00406939
  406188:	00406b49 	.word	0x00406b49
               ((sym->type < ZBAR_COMPOSITE && sym->type > ZBAR_PARTIAL) ||
                sym->type == ZBAR_DATABAR ||
                sym->type == ZBAR_DATABAR_EXP ||
                sym->type == ZBAR_CODABAR))
            {
	        if((sym->type == ZBAR_CODABAR || filter) && sym->quality < 4) {
  40618c:	9a03      	ldr	r2, [sp, #12]
  40618e:	2a00      	cmp	r2, #0
  406190:	d03a      	beq.n	406208 <zbar_scan_image+0x5f0>
  406192:	6be2      	ldr	r2, [r4, #60]	; 0x3c
  406194:	2a03      	cmp	r2, #3
  406196:	dc37      	bgt.n	406208 <zbar_scan_image+0x5f0>
                    if(iscn->enable_cache) {
  406198:	6dbb      	ldr	r3, [r7, #88]	; 0x58
  40619a:	2b00      	cmp	r3, #0
  40619c:	f43f af5a 	beq.w	406054 <zbar_scan_image+0x43c>
  4061a0:	6dfd      	ldr	r5, [r7, #92]	; 0x5c

static inline zbar_symbol_t *cache_lookup (zbar_image_scanner_t *iscn,
                                           zbar_symbol_t *sym)
{
    /* search for matching entry in cache */
    zbar_symbol_t **entry = &iscn->cache;
  4061a2:	f107 095c 	add.w	r9, r7, #92	; 0x5c
           !memcmp((*entry)->data, sym->data, sym->datalen))
            break;
        if((sym->time - (*entry)->time) > CACHE_TIMEOUT) {
            /* recycle stale cache entry */
            zbar_symbol_t *next = (*entry)->next;
            (*entry)->next = NULL;
  4061a6:	2600      	movs	r6, #0
static inline zbar_symbol_t *cache_lookup (zbar_image_scanner_t *iscn,
                                           zbar_symbol_t *sym)
{
    /* search for matching entry in cache */
    zbar_symbol_t **entry = &iscn->cache;
    while(*entry) {
  4061a8:	b175      	cbz	r5, 4061c8 <zbar_scan_image+0x5b0>
        if((*entry)->type == sym->type &&
  4061aa:	882a      	ldrh	r2, [r5, #0]
  4061ac:	8823      	ldrh	r3, [r4, #0]
  4061ae:	429a      	cmp	r2, r3
  4061b0:	d01c      	beq.n	4061ec <zbar_scan_image+0x5d4>
           (*entry)->datalen == sym->datalen &&
           !memcmp((*entry)->data, sym->data, sym->datalen))
            break;
        if((sym->time - (*entry)->time) > CACHE_TIMEOUT) {
  4061b2:	6b63      	ldr	r3, [r4, #52]	; 0x34
  4061b4:	6b6a      	ldr	r2, [r5, #52]	; 0x34
  4061b6:	1a9b      	subs	r3, r3, r2
  4061b8:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
  4061bc:	d80b      	bhi.n	4061d6 <zbar_scan_image+0x5be>
            (*entry)->next = NULL;
            _zbar_image_scanner_recycle_syms(iscn, *entry);
            *entry = next;
        }
        else
            entry = &(*entry)->next;
  4061be:	f105 092c 	add.w	r9, r5, #44	; 0x2c
  4061c2:	6aed      	ldr	r5, [r5, #44]	; 0x2c
static inline zbar_symbol_t *cache_lookup (zbar_image_scanner_t *iscn,
                                           zbar_symbol_t *sym)
{
    /* search for matching entry in cache */
    zbar_symbol_t **entry = &iscn->cache;
    while(*entry) {
  4061c4:	2d00      	cmp	r5, #0
  4061c6:	d1f0      	bne.n	4061aa <zbar_scan_image+0x592>
                        /* revert cache update */
                        zbar_symbol_t *entry = cache_lookup(iscn, sym);
                        if(entry)
                            entry->cache_count--;
                        else
                            assert(0);
  4061c8:	48ab      	ldr	r0, [pc, #684]	; (406478 <zbar_scan_image+0x860>)
  4061ca:	4aac      	ldr	r2, [pc, #688]	; (40647c <zbar_scan_image+0x864>)
  4061cc:	4bac      	ldr	r3, [pc, #688]	; (406480 <zbar_scan_image+0x868>)
  4061ce:	4cad      	ldr	r4, [pc, #692]	; (406484 <zbar_scan_image+0x86c>)
  4061d0:	f240 313f 	movw	r1, #831	; 0x33f
  4061d4:	47a0      	blx	r4
           (*entry)->datalen == sym->datalen &&
           !memcmp((*entry)->data, sym->data, sym->datalen))
            break;
        if((sym->time - (*entry)->time) > CACHE_TIMEOUT) {
            /* recycle stale cache entry */
            zbar_symbol_t *next = (*entry)->next;
  4061d6:	f8d5 b02c 	ldr.w	fp, [r5, #44]	; 0x2c
            (*entry)->next = NULL;
  4061da:	62ee      	str	r6, [r5, #44]	; 0x2c
            _zbar_image_scanner_recycle_syms(iscn, *entry);
  4061dc:	f8d9 1000 	ldr.w	r1, [r9]
  4061e0:	4638      	mov	r0, r7
  4061e2:	47c0      	blx	r8
            *entry = next;
  4061e4:	465d      	mov	r5, fp
  4061e6:	f8c9 b000 	str.w	fp, [r9]
  4061ea:	e7dd      	b.n	4061a8 <zbar_scan_image+0x590>
{
    /* search for matching entry in cache */
    zbar_symbol_t **entry = &iscn->cache;
    while(*entry) {
        if((*entry)->type == sym->type &&
           (*entry)->datalen == sym->datalen &&
  4061ec:	692a      	ldr	r2, [r5, #16]
                                           zbar_symbol_t *sym)
{
    /* search for matching entry in cache */
    zbar_symbol_t **entry = &iscn->cache;
    while(*entry) {
        if((*entry)->type == sym->type &&
  4061ee:	6923      	ldr	r3, [r4, #16]
  4061f0:	429a      	cmp	r2, r3
  4061f2:	d1de      	bne.n	4061b2 <zbar_scan_image+0x59a>
           (*entry)->datalen == sym->datalen &&
           !memcmp((*entry)->data, sym->data, sym->datalen))
  4061f4:	6968      	ldr	r0, [r5, #20]
  4061f6:	6961      	ldr	r1, [r4, #20]
  4061f8:	4ba3      	ldr	r3, [pc, #652]	; (406488 <zbar_scan_image+0x870>)
  4061fa:	4798      	blx	r3
{
    /* search for matching entry in cache */
    zbar_symbol_t **entry = &iscn->cache;
    while(*entry) {
        if((*entry)->type == sym->type &&
           (*entry)->datalen == sym->datalen &&
  4061fc:	2800      	cmp	r0, #0
  4061fe:	d1d8      	bne.n	4061b2 <zbar_scan_image+0x59a>
	        if((sym->type == ZBAR_CODABAR || filter) && sym->quality < 4) {
                    if(iscn->enable_cache) {
                        /* revert cache update */
                        zbar_symbol_t *entry = cache_lookup(iscn, sym);
                        if(entry)
                            entry->cache_count--;
  406200:	6bab      	ldr	r3, [r5, #56]	; 0x38
  406202:	3b01      	subs	r3, #1
  406204:	63ab      	str	r3, [r5, #56]	; 0x38
  406206:	e725      	b.n	406054 <zbar_scan_image+0x43c>
                    syms->nsyms--;
                    sym->next = NULL;
                    _zbar_image_scanner_recycle_syms(iscn, sym);
                    continue;
                }
                else if(sym->type < ZBAR_COMPOSITE &&
  406208:	2b0e      	cmp	r3, #14
  40620a:	f63f af08 	bhi.w	40601e <zbar_scan_image+0x406>
  40620e:	2b0a      	cmp	r3, #10
  406210:	f43f af05 	beq.w	40601e <zbar_scan_image+0x406>
                        sym->type != ZBAR_ISBN10)
                {
                    if(sym->type > ZBAR_EAN5)
  406214:	2b05      	cmp	r3, #5
  406216:	d905      	bls.n	406224 <zbar_scan_image+0x60c>
                        nean++;
  406218:	9b04      	ldr	r3, [sp, #16]
  40621a:	3301      	adds	r3, #1
  40621c:	9304      	str	r3, [sp, #16]
  40621e:	e6fe      	b.n	40601e <zbar_scan_image+0x406>
  406220:	4617      	mov	r7, r2
  406222:	e6e8      	b.n	405ff6 <zbar_scan_image+0x3de>
                    else
                        naddon++;
  406224:	9b05      	ldr	r3, [sp, #20]
  406226:	3301      	adds	r3, #1
  406228:	9305      	str	r3, [sp, #20]
  40622a:	e6f8      	b.n	40601e <zbar_scan_image+0x406>
typedef int refcnt_t;

static inline int _zbar_refcnt (refcnt_t *cnt,
                                int delta)
{
    int rc = (*cnt += delta);
  40622c:	1e5e      	subs	r6, r3, #1
    assert(rc >= 0);
  40622e:	2e00      	cmp	r6, #0
typedef int refcnt_t;

static inline int _zbar_refcnt (refcnt_t *cnt,
                                int delta)
{
    int rc = (*cnt += delta);
  406230:	6026      	str	r6, [r4, #0]
    assert(rc >= 0);
  406232:	f2c0 8165 	blt.w	406500 <zbar_scan_image+0x8e8>
}

static inline int recycle_syms (zbar_image_scanner_t *iscn,
                                zbar_symbol_set_t *syms)
{
    if(_zbar_refcnt(&syms->refcnt, -1))
  406236:	d007      	beq.n	406248 <zbar_scan_image+0x630>
                                              zbar_image_t *img)
{
    zbar_symbol_set_t *syms = iscn->syms;
    if(syms && syms->refcnt) {
        if(recycle_syms(iscn, syms)) {
            STAT(iscn_syms_inuse);
  406238:	f8d0 30c4 	ldr.w	r3, [r0, #196]	; 0xc4
            iscn->syms = NULL;
  40623c:	2200      	movs	r2, #0
                                              zbar_image_t *img)
{
    zbar_symbol_set_t *syms = iscn->syms;
    if(syms && syms->refcnt) {
        if(recycle_syms(iscn, syms)) {
            STAT(iscn_syms_inuse);
  40623e:	3301      	adds	r3, #1
  406240:	f8c0 30c4 	str.w	r3, [r0, #196]	; 0xc4
            iscn->syms = NULL;
  406244:	62c2      	str	r2, [r0, #44]	; 0x2c
  406246:	e4fe      	b.n	405c46 <zbar_scan_image+0x2e>
                                zbar_symbol_set_t *syms)
{
    if(_zbar_refcnt(&syms->refcnt, -1))
        return(1);

    _zbar_image_scanner_recycle_syms(iscn, syms->head);
  406248:	4b90      	ldr	r3, [pc, #576]	; (40648c <zbar_scan_image+0x874>)
  40624a:	68a1      	ldr	r1, [r4, #8]
  40624c:	4798      	blx	r3
    syms->head = syms->tail = NULL;
  40624e:	60e6      	str	r6, [r4, #12]
  406250:	60a6      	str	r6, [r4, #8]
    syms->nsyms = 0;
  406252:	6066      	str	r6, [r4, #4]
        if(recycle_syms(iscn, syms)) {
            STAT(iscn_syms_inuse);
            iscn->syms = NULL;
        }
        else
            STAT(iscn_syms_recycle);
  406254:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
  406258:	3301      	adds	r3, #1
  40625a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  40625e:	e4f2      	b.n	405c46 <zbar_scan_image+0x2e>
                }
            }
            symp = &sym->next;
        }

        if(nean == 1 && naddon == 1 && iscn->ean_config) {
  406260:	9b05      	ldr	r3, [sp, #20]
  406262:	2b01      	cmp	r3, #1
  406264:	f47f af0a 	bne.w	40607c <zbar_scan_image+0x464>
  406268:	6e7b      	ldr	r3, [r7, #100]	; 0x64
  40626a:	2b00      	cmp	r3, #0
  40626c:	f43f af06 	beq.w	40607c <zbar_scan_image+0x464>
  406270:	9806      	ldr	r0, [sp, #24]
  406272:	9e10      	ldr	r6, [sp, #64]	; 0x40
  406274:	4625      	mov	r5, r4
                zbar_symbol_t *sym = *symp;
                if(sym->type < ZBAR_COMPOSITE && sym->type > ZBAR_PARTIAL) {
                    /* move to composite */
                    *symp = sym->next;
                    syms->nsyms--;
                    sym->next = NULL;
  406276:	4621      	mov	r1, r4
        }

        if(nean == 1 && naddon == 1 && iscn->ean_config) {
            /* create container symbol for composite result */
            zbar_symbol_t *ean = NULL, *addon = NULL;
            for(symp = &syms->head; *symp; ) {
  406278:	6803      	ldr	r3, [r0, #0]
  40627a:	b19b      	cbz	r3, 4062a4 <zbar_scan_image+0x68c>
                zbar_symbol_t *sym = *symp;
                if(sym->type < ZBAR_COMPOSITE && sym->type > ZBAR_PARTIAL) {
  40627c:	881a      	ldrh	r2, [r3, #0]
  40627e:	3a02      	subs	r2, #2
  406280:	b292      	uxth	r2, r2
  406282:	2a0c      	cmp	r2, #12
  406284:	f200 809d 	bhi.w	4063c2 <zbar_scan_image+0x7aa>
                    /* move to composite */
                    *symp = sym->next;
  406288:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  40628a:	6002      	str	r2, [r0, #0]
                    syms->nsyms--;
  40628c:	6872      	ldr	r2, [r6, #4]
  40628e:	3a01      	subs	r2, #1
  406290:	6072      	str	r2, [r6, #4]
                    sym->next = NULL;
                    if(sym->type <= ZBAR_EAN5)
  406292:	881a      	ldrh	r2, [r3, #0]
                zbar_symbol_t *sym = *symp;
                if(sym->type < ZBAR_COMPOSITE && sym->type > ZBAR_PARTIAL) {
                    /* move to composite */
                    *symp = sym->next;
                    syms->nsyms--;
                    sym->next = NULL;
  406294:	62d9      	str	r1, [r3, #44]	; 0x2c
                    if(sym->type <= ZBAR_EAN5)
  406296:	2a06      	cmp	r2, #6
  406298:	bf2c      	ite	cs
  40629a:	461d      	movcs	r5, r3
  40629c:	461c      	movcc	r4, r3
        }

        if(nean == 1 && naddon == 1 && iscn->ean_config) {
            /* create container symbol for composite result */
            zbar_symbol_t *ean = NULL, *addon = NULL;
            for(symp = &syms->head; *symp; ) {
  40629e:	6803      	ldr	r3, [r0, #0]
  4062a0:	2b00      	cmp	r3, #0
  4062a2:	d1eb      	bne.n	40627c <zbar_scan_image+0x664>
                        ean = sym;
                }
                else
                    symp = &sym->next;
            }
            assert(ean);
  4062a4:	2d00      	cmp	r5, #0
  4062a6:	f000 80d2 	beq.w	40644e <zbar_scan_image+0x836>
            assert(addon);
  4062aa:	2c00      	cmp	r4, #0
  4062ac:	f000 80c8 	beq.w	406440 <zbar_scan_image+0x828>

            int datalen = ean->datalen + addon->datalen + 1;
  4062b0:	692e      	ldr	r6, [r5, #16]
  4062b2:	6923      	ldr	r3, [r4, #16]
  4062b4:	4433      	add	r3, r6
  4062b6:	1c5e      	adds	r6, r3, #1
{
    /* recycle old or alloc new symbol */
    zbar_symbol_t *sym = NULL;
    int i;
    for(i = 0; i < RECYCLE_BUCKETS - 1; i++)
        if(datalen <= 1 << (i * 2))
  4062b8:	2e01      	cmp	r6, #1
  4062ba:	dd28      	ble.n	40630e <zbar_scan_image+0x6f6>
  4062bc:	2e04      	cmp	r6, #4
  4062be:	f340 80a4 	ble.w	40640a <zbar_scan_image+0x7f2>
  4062c2:	2e10      	cmp	r6, #16
  4062c4:	f340 809f 	ble.w	406406 <zbar_scan_image+0x7ee>
                               int datalen)
{
    /* recycle old or alloc new symbol */
    zbar_symbol_t *sym = NULL;
    int i;
    for(i = 0; i < RECYCLE_BUCKETS - 1; i++)
  4062c8:	2e40      	cmp	r6, #64	; 0x40
  4062ca:	bfcc      	ite	gt
  4062cc:	2304      	movgt	r3, #4
  4062ce:	2303      	movle	r3, #3
        if(datalen <= 1 << (i * 2))
            break;

    for(; i > 0; i--)
        if((sym = iscn->recycle[i].head)) {
  4062d0:	eb07 02c3 	add.w	r2, r7, r3, lsl #3
  4062d4:	f8d2 8034 	ldr.w	r8, [r2, #52]	; 0x34
  4062d8:	f1b8 0f00 	cmp.w	r8, #0
  4062dc:	d176      	bne.n	4063cc <zbar_scan_image+0x7b4>
  4062de:	eb07 01c3 	add.w	r1, r7, r3, lsl #3
    int i;
    for(i = 0; i < RECYCLE_BUCKETS - 1; i++)
        if(datalen <= 1 << (i * 2))
            break;

    for(; i > 0; i--)
  4062e2:	1e5a      	subs	r2, r3, #1
        if((sym = iscn->recycle[i].head)) {
  4062e4:	f8d1 802c 	ldr.w	r8, [r1, #44]	; 0x2c
  4062e8:	f1b8 0f00 	cmp.w	r8, #0
  4062ec:	d16d      	bne.n	4063ca <zbar_scan_image+0x7b2>
    int i;
    for(i = 0; i < RECYCLE_BUCKETS - 1; i++)
        if(datalen <= 1 << (i * 2))
            break;

    for(; i > 0; i--)
  4062ee:	1e9a      	subs	r2, r3, #2
  4062f0:	d00d      	beq.n	40630e <zbar_scan_image+0x6f6>
        if((sym = iscn->recycle[i].head)) {
  4062f2:	eb07 01c3 	add.w	r1, r7, r3, lsl #3
  4062f6:	f8d1 8024 	ldr.w	r8, [r1, #36]	; 0x24
  4062fa:	f1b8 0f00 	cmp.w	r8, #0
  4062fe:	d164      	bne.n	4063ca <zbar_scan_image+0x7b2>
    int i;
    for(i = 0; i < RECYCLE_BUCKETS - 1; i++)
        if(datalen <= 1 << (i * 2))
            break;

    for(; i > 0; i--)
  406300:	2b03      	cmp	r3, #3
  406302:	d004      	beq.n	40630e <zbar_scan_image+0x6f6>
        if((sym = iscn->recycle[i].head)) {
  406304:	f8d7 803c 	ldr.w	r8, [r7, #60]	; 0x3c
  406308:	f1b8 0f00 	cmp.w	r8, #0
  40630c:	d15c      	bne.n	4063c8 <zbar_scan_image+0x7b0>
        sym->next = NULL;
        assert(iscn->recycle[i].nsyms);
        iscn->recycle[i].nsyms--;
    }
    else {
        sym = calloc(1, sizeof(zbar_symbol_t));
  40630e:	4b60      	ldr	r3, [pc, #384]	; (406490 <zbar_scan_image+0x878>)
  406310:	2001      	movs	r0, #1
  406312:	2140      	movs	r1, #64	; 0x40
  406314:	4798      	blx	r3
        STAT(sym_new);
  406316:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
  40631a:	3301      	adds	r3, #1
        sym->next = NULL;
        assert(iscn->recycle[i].nsyms);
        iscn->recycle[i].nsyms--;
    }
    else {
        sym = calloc(1, sizeof(zbar_symbol_t));
  40631c:	4680      	mov	r8, r0
        STAT(sym_new);
  40631e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    }

    /* init new symbol */
    sym->type = type;
    sym->quality = 1;
    sym->npts = 0;
  406322:	2300      	movs	r3, #0
    sym->orient = ZBAR_ORIENT_UNKNOWN;
  406324:	22ff      	movs	r2, #255	; 0xff
        sym = calloc(1, sizeof(zbar_symbol_t));
        STAT(sym_new);
    }

    /* init new symbol */
    sym->type = type;
  406326:	200f      	movs	r0, #15
    sym->quality = 1;
  406328:	2101      	movs	r1, #1
    sym->npts = 0;
  40632a:	f8c8 301c 	str.w	r3, [r8, #28]
    sym->orient = ZBAR_ORIENT_UNKNOWN;
    sym->cache_count = 0;
  40632e:	f8c8 3038 	str.w	r3, [r8, #56]	; 0x38
        sym = calloc(1, sizeof(zbar_symbol_t));
        STAT(sym_new);
    }

    /* init new symbol */
    sym->type = type;
  406332:	f8a8 0000 	strh.w	r0, [r8]
    sym->quality = 1;
  406336:	f8c8 103c 	str.w	r1, [r8, #60]	; 0x3c
    sym->npts = 0;
    sym->orient = ZBAR_ORIENT_UNKNOWN;
  40633a:	f888 2024 	strb.w	r2, [r8, #36]	; 0x24
    sym->cache_count = 0;
    sym->time = iscn->time;
    assert(!sym->syms);
  40633e:	f8d8 3030 	ldr.w	r3, [r8, #48]	; 0x30
    sym->type = type;
    sym->quality = 1;
    sym->npts = 0;
    sym->orient = ZBAR_ORIENT_UNKNOWN;
    sym->cache_count = 0;
    sym->time = iscn->time;
  406342:	693a      	ldr	r2, [r7, #16]
  406344:	f8c8 2034 	str.w	r2, [r8, #52]	; 0x34
    assert(!sym->syms);
  406348:	2b00      	cmp	r3, #0
  40634a:	d173      	bne.n	406434 <zbar_scan_image+0x81c>

    if(datalen > 0) {
  40634c:	2e00      	cmp	r6, #0
  40634e:	dd64      	ble.n	40641a <zbar_scan_image+0x802>
        sym->datalen = datalen - 1;
        if(sym->data_alloc < datalen) {
  406350:	f8d8 300c 	ldr.w	r3, [r8, #12]
    sym->cache_count = 0;
    sym->time = iscn->time;
    assert(!sym->syms);

    if(datalen > 0) {
        sym->datalen = datalen - 1;
  406354:	1e72      	subs	r2, r6, #1
        if(sym->data_alloc < datalen) {
  406356:	429e      	cmp	r6, r3
    sym->cache_count = 0;
    sym->time = iscn->time;
    assert(!sym->syms);

    if(datalen > 0) {
        sym->datalen = datalen - 1;
  406358:	f8c8 2010 	str.w	r2, [r8, #16]
        if(sym->data_alloc < datalen) {
  40635c:	d90b      	bls.n	406376 <zbar_scan_image+0x75e>
            if(sym->data)
  40635e:	f8d8 0014 	ldr.w	r0, [r8, #20]
  406362:	b108      	cbz	r0, 406368 <zbar_scan_image+0x750>
                free(sym->data);
  406364:	4b4b      	ldr	r3, [pc, #300]	; (406494 <zbar_scan_image+0x87c>)
  406366:	4798      	blx	r3
            sym->data_alloc = datalen;
  406368:	f8c8 600c 	str.w	r6, [r8, #12]
            sym->data = malloc(datalen);
  40636c:	4630      	mov	r0, r6
  40636e:	4b4a      	ldr	r3, [pc, #296]	; (406498 <zbar_scan_image+0x880>)
  406370:	4798      	blx	r3
  406372:	f8c8 0014 	str.w	r0, [r8, #20]
            assert(addon);

            int datalen = ean->datalen + addon->datalen + 1;
            zbar_symbol_t *ean_sym =
                _zbar_image_scanner_alloc_sym(iscn, ZBAR_COMPOSITE, datalen);
            ean_sym->orient = ean->orient;
  406376:	f895 3024 	ldrb.w	r3, [r5, #36]	; 0x24
  40637a:	f888 3024 	strb.w	r3, [r8, #36]	; 0x24
            ean_sym->syms = _zbar_symbol_set_create();
  40637e:	4b47      	ldr	r3, [pc, #284]	; (40649c <zbar_scan_image+0x884>)
            memcpy(ean_sym->data, ean->data, ean->datalen);
  406380:	4e47      	ldr	r6, [pc, #284]	; (4064a0 <zbar_scan_image+0x888>)

            int datalen = ean->datalen + addon->datalen + 1;
            zbar_symbol_t *ean_sym =
                _zbar_image_scanner_alloc_sym(iscn, ZBAR_COMPOSITE, datalen);
            ean_sym->orient = ean->orient;
            ean_sym->syms = _zbar_symbol_set_create();
  406382:	4798      	blx	r3
  406384:	f8c8 0030 	str.w	r0, [r8, #48]	; 0x30
            memcpy(ean_sym->data, ean->data, ean->datalen);
  406388:	6969      	ldr	r1, [r5, #20]
  40638a:	692a      	ldr	r2, [r5, #16]
  40638c:	f8d8 0014 	ldr.w	r0, [r8, #20]
  406390:	47b0      	blx	r6
            memcpy(ean_sym->data + ean->datalen,
  406392:	692b      	ldr	r3, [r5, #16]
  406394:	f8d8 0014 	ldr.w	r0, [r8, #20]
  406398:	6922      	ldr	r2, [r4, #16]
  40639a:	6961      	ldr	r1, [r4, #20]
  40639c:	4418      	add	r0, r3
  40639e:	3201      	adds	r2, #1
  4063a0:	47b0      	blx	r6
                   addon->data, addon->datalen + 1);
            ean_sym->syms->head = ean;
  4063a2:	f8d8 2030 	ldr.w	r2, [r8, #48]	; 0x30
            ean->next = addon;
            ean_sym->syms->nsyms = 2;
            _zbar_image_scanner_add_sym(iscn, ean_sym);
  4063a6:	4b3f      	ldr	r3, [pc, #252]	; (4064a4 <zbar_scan_image+0x88c>)
            ean_sym->orient = ean->orient;
            ean_sym->syms = _zbar_symbol_set_create();
            memcpy(ean_sym->data, ean->data, ean->datalen);
            memcpy(ean_sym->data + ean->datalen,
                   addon->data, addon->datalen + 1);
            ean_sym->syms->head = ean;
  4063a8:	6095      	str	r5, [r2, #8]
            ean->next = addon;
  4063aa:	62ec      	str	r4, [r5, #44]	; 0x2c
            ean_sym->syms->nsyms = 2;
  4063ac:	f8d8 2030 	ldr.w	r2, [r8, #48]	; 0x30
  4063b0:	2002      	movs	r0, #2
  4063b2:	6050      	str	r0, [r2, #4]
            _zbar_image_scanner_add_sym(iscn, ean_sym);
  4063b4:	4641      	mov	r1, r8
  4063b6:	4638      	mov	r0, r7
  4063b8:	4798      	blx	r3
  4063ba:	e65f      	b.n	40607c <zbar_scan_image+0x464>
#endif

    /* image must be in grayscale format */
    if(img->format != fourcc('Y','8','0','0') &&
       img->format != fourcc('G','R','E','Y'))
        return(-1);
  4063bc:	f04f 30ff 	mov.w	r0, #4294967295
  4063c0:	e665      	b.n	40608e <zbar_scan_image+0x476>
                        addon = sym;
                    else
                        ean = sym;
                }
                else
                    symp = &sym->next;
  4063c2:	f103 002c 	add.w	r0, r3, #44	; 0x2c
  4063c6:	e757      	b.n	406278 <zbar_scan_image+0x660>
    for(i = 0; i < RECYCLE_BUCKETS - 1; i++)
        if(datalen <= 1 << (i * 2))
            break;

    for(; i > 0; i--)
        if((sym = iscn->recycle[i].head)) {
  4063c8:	2201      	movs	r2, #1
    int i;
    for(i = 0; i < RECYCLE_BUCKETS - 1; i++)
        if(datalen <= 1 << (i * 2))
            break;

    for(; i > 0; i--)
  4063ca:	4613      	mov	r3, r2
  4063cc:	eb07 0183 	add.w	r1, r7, r3, lsl #2
  4063d0:	eb07 03c3 	add.w	r3, r7, r3, lsl #3
        if((sym = iscn->recycle[i].head)) {
            STAT(sym_recycle[i]);
  4063d4:	f8d1 20d8 	ldr.w	r2, [r1, #216]	; 0xd8
  4063d8:	3201      	adds	r2, #1
  4063da:	f8c1 20d8 	str.w	r2, [r1, #216]	; 0xd8
            break;
        }

    if(sym) {
        iscn->recycle[i].head = sym->next;
  4063de:	f8d8 202c 	ldr.w	r2, [r8, #44]	; 0x2c
  4063e2:	635a      	str	r2, [r3, #52]	; 0x34
        sym->next = NULL;
  4063e4:	2200      	movs	r2, #0
  4063e6:	f8c8 202c 	str.w	r2, [r8, #44]	; 0x2c
        assert(iscn->recycle[i].nsyms);
  4063ea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  4063ec:	b112      	cbz	r2, 4063f4 <zbar_scan_image+0x7dc>
        iscn->recycle[i].nsyms--;
  4063ee:	3a01      	subs	r2, #1
  4063f0:	631a      	str	r2, [r3, #48]	; 0x30
  4063f2:	e796      	b.n	406322 <zbar_scan_image+0x70a>
  4063f4:	4b2c      	ldr	r3, [pc, #176]	; (4064a8 <zbar_scan_image+0x890>)
  4063f6:	4798      	blx	r3
            while(y < cy1) {
                uint8_t d = *p;
                movedelta(0, 1);
                zbar_scan_y(scn, d);
            }
            ASSERT_POS;
  4063f8:	481f      	ldr	r0, [pc, #124]	; (406478 <zbar_scan_image+0x860>)
  4063fa:	4a20      	ldr	r2, [pc, #128]	; (40647c <zbar_scan_image+0x864>)
  4063fc:	4b2b      	ldr	r3, [pc, #172]	; (4064ac <zbar_scan_image+0x894>)
  4063fe:	4c21      	ldr	r4, [pc, #132]	; (406484 <zbar_scan_image+0x86c>)
  406400:	f240 3107 	movw	r1, #775	; 0x307
  406404:	47a0      	blx	r4
                               int datalen)
{
    /* recycle old or alloc new symbol */
    zbar_symbol_t *sym = NULL;
    int i;
    for(i = 0; i < RECYCLE_BUCKETS - 1; i++)
  406406:	2302      	movs	r3, #2
  406408:	e762      	b.n	4062d0 <zbar_scan_image+0x6b8>
        if(datalen <= 1 << (i * 2))
            break;

    for(; i > 0; i--)
        if((sym = iscn->recycle[i].head)) {
  40640a:	f8d7 803c 	ldr.w	r8, [r7, #60]	; 0x3c
                               int datalen)
{
    /* recycle old or alloc new symbol */
    zbar_symbol_t *sym = NULL;
    int i;
    for(i = 0; i < RECYCLE_BUCKETS - 1; i++)
  40640e:	2301      	movs	r3, #1
        if(datalen <= 1 << (i * 2))
            break;

    for(; i > 0; i--)
        if((sym = iscn->recycle[i].head)) {
  406410:	f1b8 0f00 	cmp.w	r8, #0
  406414:	f43f af7b 	beq.w	40630e <zbar_scan_image+0x6f6>
  406418:	e7d8      	b.n	4063cc <zbar_scan_image+0x7b4>
            sym->data_alloc = datalen;
            sym->data = malloc(datalen);
        }
    }
    else {
        if(sym->data)
  40641a:	f8d8 0014 	ldr.w	r0, [r8, #20]
  40641e:	b108      	cbz	r0, 406424 <zbar_scan_image+0x80c>
            free(sym->data);
  406420:	4b1c      	ldr	r3, [pc, #112]	; (406494 <zbar_scan_image+0x87c>)
  406422:	4798      	blx	r3
        sym->data = NULL;
  406424:	2300      	movs	r3, #0
  406426:	f8c8 3014 	str.w	r3, [r8, #20]
        sym->datalen = sym->data_alloc = 0;
  40642a:	f8c8 300c 	str.w	r3, [r8, #12]
  40642e:	f8c8 3010 	str.w	r3, [r8, #16]
  406432:	e7a0      	b.n	406376 <zbar_scan_image+0x75e>
    sym->quality = 1;
    sym->npts = 0;
    sym->orient = ZBAR_ORIENT_UNKNOWN;
    sym->cache_count = 0;
    sym->time = iscn->time;
    assert(!sym->syms);
  406434:	4810      	ldr	r0, [pc, #64]	; (406478 <zbar_scan_image+0x860>)
  406436:	4a1e      	ldr	r2, [pc, #120]	; (4064b0 <zbar_scan_image+0x898>)
  406438:	4b1e      	ldr	r3, [pc, #120]	; (4064b4 <zbar_scan_image+0x89c>)
  40643a:	4c12      	ldr	r4, [pc, #72]	; (406484 <zbar_scan_image+0x86c>)
  40643c:	21f7      	movs	r1, #247	; 0xf7
  40643e:	47a0      	blx	r4
                }
                else
                    symp = &sym->next;
            }
            assert(ean);
            assert(addon);
  406440:	480d      	ldr	r0, [pc, #52]	; (406478 <zbar_scan_image+0x860>)
  406442:	4a0e      	ldr	r2, [pc, #56]	; (40647c <zbar_scan_image+0x864>)
  406444:	4b1c      	ldr	r3, [pc, #112]	; (4064b8 <zbar_scan_image+0x8a0>)
  406446:	4c0f      	ldr	r4, [pc, #60]	; (406484 <zbar_scan_image+0x86c>)
  406448:	f44f 715a 	mov.w	r1, #872	; 0x368
  40644c:	47a0      	blx	r4
                        ean = sym;
                }
                else
                    symp = &sym->next;
            }
            assert(ean);
  40644e:	480a      	ldr	r0, [pc, #40]	; (406478 <zbar_scan_image+0x860>)
  406450:	4a0a      	ldr	r2, [pc, #40]	; (40647c <zbar_scan_image+0x864>)
  406452:	4b1a      	ldr	r3, [pc, #104]	; (4064bc <zbar_scan_image+0x8a4>)
  406454:	4c0b      	ldr	r4, [pc, #44]	; (406484 <zbar_scan_image+0x86c>)
  406456:	f240 3167 	movw	r1, #871	; 0x367
  40645a:	47a0      	blx	r4
    w = img->width;
    h = img->height;
    cx1 = img->crop_x + img->crop_w;
    assert(cx1 <= w);
    cy1 = img->crop_y + img->crop_h;
    assert(cy1 <= h);
  40645c:	4806      	ldr	r0, [pc, #24]	; (406478 <zbar_scan_image+0x860>)
  40645e:	4a07      	ldr	r2, [pc, #28]	; (40647c <zbar_scan_image+0x864>)
  406460:	4b17      	ldr	r3, [pc, #92]	; (4064c0 <zbar_scan_image+0x8a8>)
  406462:	4c08      	ldr	r4, [pc, #32]	; (406484 <zbar_scan_image+0x86c>)
  406464:	f240 21ad 	movw	r1, #685	; 0x2ad
  406468:	47a0      	blx	r4
    img->syms = syms;

    w = img->width;
    h = img->height;
    cx1 = img->crop_x + img->crop_w;
    assert(cx1 <= w);
  40646a:	4803      	ldr	r0, [pc, #12]	; (406478 <zbar_scan_image+0x860>)
  40646c:	4a03      	ldr	r2, [pc, #12]	; (40647c <zbar_scan_image+0x864>)
  40646e:	4b15      	ldr	r3, [pc, #84]	; (4064c4 <zbar_scan_image+0x8ac>)
  406470:	4c04      	ldr	r4, [pc, #16]	; (406484 <zbar_scan_image+0x86c>)
  406472:	f240 21ab 	movw	r1, #683	; 0x2ab
  406476:	47a0      	blx	r4
  406478:	004113e4 	.word	0x004113e4
  40647c:	0041167c 	.word	0x0041167c
  406480:	004119f8 	.word	0x004119f8
  406484:	00407d65 	.word	0x00407d65
  406488:	00408e85 	.word	0x00408e85
  40648c:	00405251 	.word	0x00405251
  406490:	00407da1 	.word	0x00407da1
  406494:	004088bd 	.word	0x004088bd
  406498:	004088ad 	.word	0x004088ad
  40649c:	00406939 	.word	0x00406939
  4064a0:	00408ee9 	.word	0x00408ee9
  4064a4:	0040536d 	.word	0x0040536d
  4064a8:	00405231 	.word	0x00405231
  4064ac:	004115f0 	.word	0x004115f0
  4064b0:	0041168c 	.word	0x0041168c
  4064b4:	00411444 	.word	0x00411444
  4064b8:	00411674 	.word	0x00411674
  4064bc:	00411670 	.word	0x00411670
  4064c0:	004115bc 	.word	0x004115bc
  4064c4:	004115b0 	.word	0x004115b0

        int border = (((img->crop_w - 1) % density) + 1) / 2;
        if(border > img->crop_w / 2)
            border = img->crop_w / 2;
        border += img->crop_x;
        assert(border <= w);
  4064c8:	4812      	ldr	r0, [pc, #72]	; (406514 <zbar_scan_image+0x8fc>)
  4064ca:	4a13      	ldr	r2, [pc, #76]	; (406518 <zbar_scan_image+0x900>)
  4064cc:	4b13      	ldr	r3, [pc, #76]	; (40651c <zbar_scan_image+0x904>)
  4064ce:	4c14      	ldr	r4, [pc, #80]	; (406520 <zbar_scan_image+0x908>)
  4064d0:	f240 21f7 	movw	r1, #759	; 0x2f7
  4064d4:	47a0      	blx	r4
            while(x >= cx0) {
                uint8_t d = *p;
                movedelta(-1, 0);
                zbar_scan_y(scn, d);
            }
            ASSERT_POS;
  4064d6:	480f      	ldr	r0, [pc, #60]	; (406514 <zbar_scan_image+0x8fc>)
  4064d8:	4a0f      	ldr	r2, [pc, #60]	; (406518 <zbar_scan_image+0x900>)
  4064da:	4b12      	ldr	r3, [pc, #72]	; (406524 <zbar_scan_image+0x90c>)
  4064dc:	4c10      	ldr	r4, [pc, #64]	; (406520 <zbar_scan_image+0x908>)
  4064de:	f240 21e3 	movw	r1, #739	; 0x2e3
  4064e2:	47a0      	blx	r4
            while(x < cx1) {
                uint8_t d = *p;
                movedelta(1, 0);
                zbar_scan_y(scn, d);
            }
            ASSERT_POS;
  4064e4:	480b      	ldr	r0, [pc, #44]	; (406514 <zbar_scan_image+0x8fc>)
  4064e6:	4a0c      	ldr	r2, [pc, #48]	; (406518 <zbar_scan_image+0x900>)
  4064e8:	4b0e      	ldr	r3, [pc, #56]	; (406524 <zbar_scan_image+0x90c>)
  4064ea:	4c0d      	ldr	r4, [pc, #52]	; (406520 <zbar_scan_image+0x908>)
  4064ec:	f240 21d1 	movw	r1, #721	; 0x2d1
  4064f0:	47a0      	blx	r4
            while(y >= cy0) {
                uint8_t d = *p;
                movedelta(0, -1);
                zbar_scan_y(scn, d);
            }
            ASSERT_POS;
  4064f2:	4808      	ldr	r0, [pc, #32]	; (406514 <zbar_scan_image+0x8fc>)
  4064f4:	4a08      	ldr	r2, [pc, #32]	; (406518 <zbar_scan_image+0x900>)
  4064f6:	4b0b      	ldr	r3, [pc, #44]	; (406524 <zbar_scan_image+0x90c>)
  4064f8:	4c09      	ldr	r4, [pc, #36]	; (406520 <zbar_scan_image+0x908>)
  4064fa:	f240 3119 	movw	r1, #793	; 0x319
  4064fe:	47a0      	blx	r4
  406500:	4b09      	ldr	r3, [pc, #36]	; (406528 <zbar_scan_image+0x910>)
  406502:	4798      	blx	r3

        int border = (((img->crop_h - 1) % density) + 1) / 2;
        if(border > img->crop_h / 2)
            border = img->crop_h / 2;
        border += img->crop_y;
        assert(border <= h);
  406504:	4803      	ldr	r0, [pc, #12]	; (406514 <zbar_scan_image+0x8fc>)
  406506:	4a04      	ldr	r2, [pc, #16]	; (406518 <zbar_scan_image+0x900>)
  406508:	4b08      	ldr	r3, [pc, #32]	; (40652c <zbar_scan_image+0x914>)
  40650a:	4c05      	ldr	r4, [pc, #20]	; (406520 <zbar_scan_image+0x908>)
  40650c:	f240 21bf 	movw	r1, #703	; 0x2bf
  406510:	47a0      	blx	r4
  406512:	bf00      	nop
  406514:	004113e4 	.word	0x004113e4
  406518:	0041167c 	.word	0x0041167c
  40651c:	0041162c 	.word	0x0041162c
  406520:	00407d65 	.word	0x00407d65
  406524:	004115f0 	.word	0x004115f0
  406528:	00405211 	.word	0x00405211
  40652c:	004115c8 	.word	0x004115c8

00406530 <_zbar_refcnt_init>:


#else

void _zbar_refcnt_init ()
{
  406530:	4770      	bx	lr
  406532:	bf00      	nop

00406534 <zbar_scanner_create>:
    unsigned last_edge;     /* interpolated position of last located edge */
    unsigned width;         /* last element width */
};

zbar_scanner_t *zbar_scanner_create (zbar_decoder_t *dcode)
{
  406534:	b538      	push	{r3, r4, r5, lr}
  406536:	4605      	mov	r5, r0
    zbar_scanner_t *scn = malloc(sizeof(zbar_scanner_t));
  406538:	4b0b      	ldr	r3, [pc, #44]	; (406568 <zbar_scanner_create+0x34>)
  40653a:	2030      	movs	r0, #48	; 0x30
  40653c:	4798      	blx	r3
    free(scn);
}

zbar_symbol_type_t zbar_scanner_reset (zbar_scanner_t *scn)
{
    memset(&scn->x, 0, sizeof(zbar_scanner_t) - offsetof(zbar_scanner_t, x));
  40653e:	2300      	movs	r3, #0

zbar_scanner_t *zbar_scanner_create (zbar_decoder_t *dcode)
{
    zbar_scanner_t *scn = malloc(sizeof(zbar_scanner_t));
    scn->decoder = dcode;
    scn->y1_min_thresh = ZBAR_SCANNER_THRESH_MIN;
  406540:	2204      	movs	r2, #4
    unsigned width;         /* last element width */
};

zbar_scanner_t *zbar_scanner_create (zbar_decoder_t *dcode)
{
    zbar_scanner_t *scn = malloc(sizeof(zbar_scanner_t));
  406542:	4604      	mov	r4, r0
    scn->decoder = dcode;
  406544:	6005      	str	r5, [r0, #0]
    scn->y1_min_thresh = ZBAR_SCANNER_THRESH_MIN;
  406546:	6042      	str	r2, [r0, #4]
}

zbar_symbol_type_t zbar_scanner_reset (zbar_scanner_t *scn)
{
    memset(&scn->x, 0, sizeof(zbar_scanner_t) - offsetof(zbar_scanner_t, x));
    scn->y1_thresh = scn->y1_min_thresh;
  406548:	6202      	str	r2, [r0, #32]
    free(scn);
}

zbar_symbol_type_t zbar_scanner_reset (zbar_scanner_t *scn)
{
    memset(&scn->x, 0, sizeof(zbar_scanner_t) - offsetof(zbar_scanner_t, x));
  40654a:	6083      	str	r3, [r0, #8]
  40654c:	60c3      	str	r3, [r0, #12]
  40654e:	6103      	str	r3, [r0, #16]
  406550:	6143      	str	r3, [r0, #20]
  406552:	6183      	str	r3, [r0, #24]
  406554:	61c3      	str	r3, [r0, #28]
  406556:	6243      	str	r3, [r0, #36]	; 0x24
  406558:	6283      	str	r3, [r0, #40]	; 0x28
  40655a:	62c3      	str	r3, [r0, #44]	; 0x2c
    scn->y1_thresh = scn->y1_min_thresh;
    if(scn->decoder)
  40655c:	b115      	cbz	r5, 406564 <zbar_scanner_create+0x30>
        zbar_decoder_reset(scn->decoder);
  40655e:	4628      	mov	r0, r5
  406560:	4b02      	ldr	r3, [pc, #8]	; (40656c <zbar_scanner_create+0x38>)
  406562:	4798      	blx	r3
    zbar_scanner_t *scn = malloc(sizeof(zbar_scanner_t));
    scn->decoder = dcode;
    scn->y1_min_thresh = ZBAR_SCANNER_THRESH_MIN;
    zbar_scanner_reset(scn);
    return(scn);
}
  406564:	4620      	mov	r0, r4
  406566:	bd38      	pop	{r3, r4, r5, pc}
  406568:	004088ad 	.word	0x004088ad
  40656c:	00403939 	.word	0x00403939

00406570 <zbar_scanner_destroy>:

void zbar_scanner_destroy (zbar_scanner_t *scn)
{
  406570:	b508      	push	{r3, lr}
    free(scn);
  406572:	4b01      	ldr	r3, [pc, #4]	; (406578 <zbar_scanner_destroy+0x8>)
  406574:	4798      	blx	r3
  406576:	bd08      	pop	{r3, pc}
  406578:	004088bd 	.word	0x004088bd

0040657c <zbar_scanner_get_width>:
}

unsigned zbar_scanner_get_width (const zbar_scanner_t *scn)
{
    return(scn->width);
}
  40657c:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
  40657e:	4770      	bx	lr

00406580 <zbar_scanner_get_edge>:

unsigned zbar_scanner_get_edge (const zbar_scanner_t *scn,
                                unsigned offset,
                                int prec)
{
  406580:	6a80      	ldr	r0, [r0, #40]	; 0x28
    unsigned edge = scn->last_edge - offset - (1 << ZBAR_FIXED) - ROUND;
    prec = ZBAR_FIXED - prec;
  406582:	f1c2 0205 	rsb	r2, r2, #5
  406586:	3830      	subs	r0, #48	; 0x30
    if(prec > 0)
  406588:	2a00      	cmp	r2, #0

unsigned zbar_scanner_get_edge (const zbar_scanner_t *scn,
                                unsigned offset,
                                int prec)
{
    unsigned edge = scn->last_edge - offset - (1 << ZBAR_FIXED) - ROUND;
  40658a:	eba0 0101 	sub.w	r1, r0, r1
    prec = ZBAR_FIXED - prec;
    if(prec > 0)
  40658e:	dd02      	ble.n	406596 <zbar_scanner_get_edge+0x16>
        return(edge >> prec);
  406590:	fa21 f002 	lsr.w	r0, r1, r2
  406594:	4770      	bx	lr
    else if(!prec)
        return(edge);
    else
        return(edge << -prec);
  406596:	bf1a      	itte	ne
  406598:	4252      	negne	r2, r2
  40659a:	fa01 f002 	lslne.w	r0, r1, r2
    unsigned edge = scn->last_edge - offset - (1 << ZBAR_FIXED) - ROUND;
    prec = ZBAR_FIXED - prec;
    if(prec > 0)
        return(edge >> prec);
    else if(!prec)
        return(edge);
  40659e:	4608      	moveq	r0, r1
    else
        return(edge << -prec);
}
  4065a0:	4770      	bx	lr
  4065a2:	bf00      	nop

004065a4 <zbar_scanner_flush>:
        return(zbar_decode_width(scn->decoder, scn->width));
    return(ZBAR_PARTIAL);
}

inline zbar_symbol_type_t zbar_scanner_flush (zbar_scanner_t *scn)
{
  4065a4:	b538      	push	{r3, r4, r5, lr}
    unsigned x;
    if(!scn->y1_sign)
  4065a6:	69c3      	ldr	r3, [r0, #28]
  4065a8:	b1ab      	cbz	r3, 4065d6 <zbar_scanner_flush+0x32>
        return(ZBAR_NONE);

    x = (scn->x << ZBAR_FIXED) + ROUND;
  4065aa:	6885      	ldr	r5, [r0, #8]

    if(scn->cur_edge != x || scn->y1_sign > 0) {
  4065ac:	6a42      	ldr	r2, [r0, #36]	; 0x24
{
    unsigned x;
    if(!scn->y1_sign)
        return(ZBAR_NONE);

    x = (scn->x << ZBAR_FIXED) + ROUND;
  4065ae:	016d      	lsls	r5, r5, #5
  4065b0:	3510      	adds	r5, #16

    if(scn->cur_edge != x || scn->y1_sign > 0) {
  4065b2:	42aa      	cmp	r2, r5
  4065b4:	4604      	mov	r4, r0
  4065b6:	d101      	bne.n	4065bc <zbar_scanner_flush+0x18>
  4065b8:	2b00      	cmp	r3, #0
  4065ba:	dd19      	ble.n	4065f0 <zbar_scanner_flush+0x4c>
static inline zbar_symbol_type_t process_edge (zbar_scanner_t *scn,
                                               int y1)
{
    if(!scn->y1_sign)
        scn->last_edge = scn->cur_edge = (1 << ZBAR_FIXED) + ROUND;
    else if(!scn->last_edge)
  4065bc:	6aa1      	ldr	r1, [r4, #40]	; 0x28
  4065be:	b961      	cbnz	r1, 4065da <zbar_scanner_flush+0x36>
#if DEBUG_SVG > 1
    svg_path_moveto(SVG_ABS, scn->last_edge - (1 << ZBAR_FIXED) - ROUND, 0);
#endif

    /* pass to decoder */
    if(scn->decoder)
  4065c0:	6820      	ldr	r0, [r4, #0]
    if(!scn->y1_sign)
        scn->last_edge = scn->cur_edge = (1 << ZBAR_FIXED) + ROUND;
    else if(!scn->last_edge)
        scn->last_edge = scn->cur_edge;

    scn->width = scn->cur_edge - scn->last_edge;
  4065c2:	62e1      	str	r1, [r4, #44]	; 0x2c
    dbprintf(1, " sgn=%d cur=%d.%d w=%d (%s)\n",
             scn->y1_sign, scn->cur_edge >> ZBAR_FIXED,
             scn->cur_edge & ((1 << ZBAR_FIXED) - 1), scn->width,
             ((y1 > 0) ? "SPACE" : "BAR"));
    scn->last_edge = scn->cur_edge;
  4065c4:	62a2      	str	r2, [r4, #40]	; 0x28
#if DEBUG_SVG > 1
    svg_path_moveto(SVG_ABS, scn->last_edge - (1 << ZBAR_FIXED) - ROUND, 0);
#endif

    /* pass to decoder */
    if(scn->decoder)
  4065c6:	b170      	cbz	r0, 4065e6 <zbar_scanner_flush+0x42>
        return(zbar_decode_width(scn->decoder, scn->width));
  4065c8:	4b0e      	ldr	r3, [pc, #56]	; (406604 <zbar_scanner_flush+0x60>)
  4065ca:	4798      	blx	r3
  4065cc:	69e3      	ldr	r3, [r4, #28]
    x = (scn->x << ZBAR_FIXED) + ROUND;

    if(scn->cur_edge != x || scn->y1_sign > 0) {
        zbar_symbol_type_t edge = process_edge(scn, -scn->y1_sign);
        dbprintf(1, "flush0:");
        scn->cur_edge = x;
  4065ce:	6265      	str	r5, [r4, #36]	; 0x24
        scn->y1_sign = -scn->y1_sign;
  4065d0:	425b      	negs	r3, r3
  4065d2:	61e3      	str	r3, [r4, #28]
        return(edge);
  4065d4:	bd38      	pop	{r3, r4, r5, pc}

inline zbar_symbol_type_t zbar_scanner_flush (zbar_scanner_t *scn)
{
    unsigned x;
    if(!scn->y1_sign)
        return(ZBAR_NONE);
  4065d6:	4618      	mov	r0, r3
  4065d8:	bd38      	pop	{r3, r4, r5, pc}
#if DEBUG_SVG > 1
    svg_path_moveto(SVG_ABS, scn->last_edge - (1 << ZBAR_FIXED) - ROUND, 0);
#endif

    /* pass to decoder */
    if(scn->decoder)
  4065da:	6820      	ldr	r0, [r4, #0]
    scn->width = scn->cur_edge - scn->last_edge;
    dbprintf(1, " sgn=%d cur=%d.%d w=%d (%s)\n",
             scn->y1_sign, scn->cur_edge >> ZBAR_FIXED,
             scn->cur_edge & ((1 << ZBAR_FIXED) - 1), scn->width,
             ((y1 > 0) ? "SPACE" : "BAR"));
    scn->last_edge = scn->cur_edge;
  4065dc:	62a2      	str	r2, [r4, #40]	; 0x28
  4065de:	1a51      	subs	r1, r2, r1
    if(!scn->y1_sign)
        scn->last_edge = scn->cur_edge = (1 << ZBAR_FIXED) + ROUND;
    else if(!scn->last_edge)
        scn->last_edge = scn->cur_edge;

    scn->width = scn->cur_edge - scn->last_edge;
  4065e0:	62e1      	str	r1, [r4, #44]	; 0x2c
#if DEBUG_SVG > 1
    svg_path_moveto(SVG_ABS, scn->last_edge - (1 << ZBAR_FIXED) - ROUND, 0);
#endif

    /* pass to decoder */
    if(scn->decoder)
  4065e2:	2800      	cmp	r0, #0
  4065e4:	d1f0      	bne.n	4065c8 <zbar_scanner_flush+0x24>

    if(scn->cur_edge != x || scn->y1_sign > 0) {
        zbar_symbol_type_t edge = process_edge(scn, -scn->y1_sign);
        dbprintf(1, "flush0:");
        scn->cur_edge = x;
        scn->y1_sign = -scn->y1_sign;
  4065e6:	425b      	negs	r3, r3
  4065e8:	61e3      	str	r3, [r4, #28]
    x = (scn->x << ZBAR_FIXED) + ROUND;

    if(scn->cur_edge != x || scn->y1_sign > 0) {
        zbar_symbol_type_t edge = process_edge(scn, -scn->y1_sign);
        dbprintf(1, "flush0:");
        scn->cur_edge = x;
  4065ea:	6265      	str	r5, [r4, #36]	; 0x24
#endif

    /* pass to decoder */
    if(scn->decoder)
        return(zbar_decode_width(scn->decoder, scn->width));
    return(ZBAR_PARTIAL);
  4065ec:	2001      	movs	r0, #1
    if(scn->cur_edge != x || scn->y1_sign > 0) {
        zbar_symbol_type_t edge = process_edge(scn, -scn->y1_sign);
        dbprintf(1, "flush0:");
        scn->cur_edge = x;
        scn->y1_sign = -scn->y1_sign;
        return(edge);
  4065ee:	bd38      	pop	{r3, r4, r5, pc}
    }

    scn->y1_sign = scn->width = 0;
    if(scn->decoder)
  4065f0:	6800      	ldr	r0, [r0, #0]
        scn->cur_edge = x;
        scn->y1_sign = -scn->y1_sign;
        return(edge);
    }

    scn->y1_sign = scn->width = 0;
  4065f2:	2100      	movs	r1, #0
  4065f4:	62e1      	str	r1, [r4, #44]	; 0x2c
  4065f6:	61e1      	str	r1, [r4, #28]
    if(scn->decoder)
  4065f8:	b110      	cbz	r0, 406600 <zbar_scanner_flush+0x5c>
        return(zbar_decode_width(scn->decoder, 0));
  4065fa:	4b02      	ldr	r3, [pc, #8]	; (406604 <zbar_scanner_flush+0x60>)
  4065fc:	4798      	blx	r3
  4065fe:	bd38      	pop	{r3, r4, r5, pc}
    return(ZBAR_PARTIAL);
  406600:	2001      	movs	r0, #1
}
  406602:	bd38      	pop	{r3, r4, r5, pc}
  406604:	00403a51 	.word	0x00403a51

00406608 <zbar_scanner_new_scan>:

zbar_symbol_type_t zbar_scanner_new_scan (zbar_scanner_t *scn)
{
  406608:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  40660c:	69c3      	ldr	r3, [r0, #28]
  40660e:	f8d0 8000 	ldr.w	r8, [r0]
    svg_path_moveto(SVG_ABS, scn->last_edge - (1 << ZBAR_FIXED) - ROUND, 0);
#endif

    /* pass to decoder */
    if(scn->decoder)
        return(zbar_decode_width(scn->decoder, scn->width));
  406612:	4e23      	ldr	r6, [pc, #140]	; (4066a0 <zbar_scanner_new_scan+0x98>)
    return(ZBAR_PARTIAL);
}

zbar_symbol_type_t zbar_scanner_new_scan (zbar_scanner_t *scn)
{
    zbar_symbol_type_t edge = ZBAR_NONE;
  406614:	f04f 0900 	mov.w	r9, #0
        return(zbar_decode_width(scn->decoder, 0));
    return(ZBAR_PARTIAL);
}

zbar_symbol_type_t zbar_scanner_new_scan (zbar_scanner_t *scn)
{
  406618:	4605      	mov	r5, r0
        scn->cur_edge = x;
        scn->y1_sign = -scn->y1_sign;
        return(edge);
    }

    scn->y1_sign = scn->width = 0;
  40661a:	464f      	mov	r7, r9
}

zbar_symbol_type_t zbar_scanner_new_scan (zbar_scanner_t *scn)
{
    zbar_symbol_type_t edge = ZBAR_NONE;
    while(scn->y1_sign) {
  40661c:	b1f3      	cbz	r3, 40665c <zbar_scanner_new_scan+0x54>
{
    unsigned x;
    if(!scn->y1_sign)
        return(ZBAR_NONE);

    x = (scn->x << ZBAR_FIXED) + ROUND;
  40661e:	68ac      	ldr	r4, [r5, #8]

    if(scn->cur_edge != x || scn->y1_sign > 0) {
  406620:	6a6a      	ldr	r2, [r5, #36]	; 0x24
{
    unsigned x;
    if(!scn->y1_sign)
        return(ZBAR_NONE);

    x = (scn->x << ZBAR_FIXED) + ROUND;
  406622:	0164      	lsls	r4, r4, #5
  406624:	3410      	adds	r4, #16

    if(scn->cur_edge != x || scn->y1_sign > 0) {
  406626:	4294      	cmp	r4, r2
  406628:	d101      	bne.n	40662e <zbar_scanner_new_scan+0x26>
  40662a:	2b00      	cmp	r3, #0
  40662c:	dd27      	ble.n	40667e <zbar_scanner_new_scan+0x76>
static inline zbar_symbol_type_t process_edge (zbar_scanner_t *scn,
                                               int y1)
{
    if(!scn->y1_sign)
        scn->last_edge = scn->cur_edge = (1 << ZBAR_FIXED) + ROUND;
    else if(!scn->last_edge)
  40662e:	6aa9      	ldr	r1, [r5, #40]	; 0x28
  406630:	b101      	cbz	r1, 406634 <zbar_scanner_new_scan+0x2c>
  406632:	1a51      	subs	r1, r2, r1
        scn->last_edge = scn->cur_edge;

    scn->width = scn->cur_edge - scn->last_edge;
  406634:	62e9      	str	r1, [r5, #44]	; 0x2c
    dbprintf(1, " sgn=%d cur=%d.%d w=%d (%s)\n",
             scn->y1_sign, scn->cur_edge >> ZBAR_FIXED,
             scn->cur_edge & ((1 << ZBAR_FIXED) - 1), scn->width,
             ((y1 > 0) ? "SPACE" : "BAR"));
    scn->last_edge = scn->cur_edge;
  406636:	62aa      	str	r2, [r5, #40]	; 0x28
#if DEBUG_SVG > 1
    svg_path_moveto(SVG_ABS, scn->last_edge - (1 << ZBAR_FIXED) - ROUND, 0);
#endif

    /* pass to decoder */
    if(scn->decoder)
  406638:	f1b8 0f00 	cmp.w	r8, #0
  40663c:	d02b      	beq.n	406696 <zbar_scanner_new_scan+0x8e>
        return(zbar_decode_width(scn->decoder, scn->width));
  40663e:	4640      	mov	r0, r8
  406640:	47b0      	blx	r6
  406642:	69eb      	ldr	r3, [r5, #28]
  406644:	f8d5 8000 	ldr.w	r8, [r5]
    x = (scn->x << ZBAR_FIXED) + ROUND;

    if(scn->cur_edge != x || scn->y1_sign > 0) {
        zbar_symbol_type_t edge = process_edge(scn, -scn->y1_sign);
        dbprintf(1, "flush0:");
        scn->cur_edge = x;
  406648:	626c      	str	r4, [r5, #36]	; 0x24
        scn->y1_sign = -scn->y1_sign;
  40664a:	425b      	negs	r3, r3
  40664c:	61eb      	str	r3, [r5, #28]
  40664e:	4548      	cmp	r0, r9
  406650:	bf38      	it	cc
  406652:	4648      	movcc	r0, r9
  406654:	fa1f f980 	uxth.w	r9, r0
}

zbar_symbol_type_t zbar_scanner_new_scan (zbar_scanner_t *scn)
{
    zbar_symbol_type_t edge = ZBAR_NONE;
    while(scn->y1_sign) {
  406658:	2b00      	cmp	r3, #0
  40665a:	d1e0      	bne.n	40661e <zbar_scanner_new_scan+0x16>
        if(tmp < 0 || tmp > edge)
            edge = tmp;
    }

    /* reset scanner and associated decoder */
    memset(&scn->x, 0, sizeof(zbar_scanner_t) - offsetof(zbar_scanner_t, x));
  40665c:	4619      	mov	r1, r3
  40665e:	f105 0008 	add.w	r0, r5, #8
  406662:	4b10      	ldr	r3, [pc, #64]	; (4066a4 <zbar_scanner_new_scan+0x9c>)
  406664:	2228      	movs	r2, #40	; 0x28
  406666:	4798      	blx	r3
    scn->y1_thresh = scn->y1_min_thresh;
  406668:	686b      	ldr	r3, [r5, #4]
  40666a:	622b      	str	r3, [r5, #32]
    if(scn->decoder)
  40666c:	f1b8 0f00 	cmp.w	r8, #0
  406670:	d002      	beq.n	406678 <zbar_scanner_new_scan+0x70>
        zbar_decoder_new_scan(scn->decoder);
  406672:	4640      	mov	r0, r8
  406674:	4b0c      	ldr	r3, [pc, #48]	; (4066a8 <zbar_scanner_new_scan+0xa0>)
  406676:	4798      	blx	r3
    return(edge);
}
  406678:	4648      	mov	r0, r9
  40667a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        scn->cur_edge = x;
        scn->y1_sign = -scn->y1_sign;
        return(edge);
    }

    scn->y1_sign = scn->width = 0;
  40667e:	62ef      	str	r7, [r5, #44]	; 0x2c
  406680:	61ef      	str	r7, [r5, #28]
    if(scn->decoder)
  406682:	f1b8 0f00 	cmp.w	r8, #0
  406686:	d008      	beq.n	40669a <zbar_scanner_new_scan+0x92>
        return(zbar_decode_width(scn->decoder, 0));
  406688:	4640      	mov	r0, r8
  40668a:	2100      	movs	r1, #0
  40668c:	47b0      	blx	r6
  40668e:	69eb      	ldr	r3, [r5, #28]
  406690:	f8d5 8000 	ldr.w	r8, [r5]
  406694:	e7db      	b.n	40664e <zbar_scanner_new_scan+0x46>
#endif

    /* pass to decoder */
    if(scn->decoder)
        return(zbar_decode_width(scn->decoder, scn->width));
    return(ZBAR_PARTIAL);
  406696:	2001      	movs	r0, #1
  406698:	e7d6      	b.n	406648 <zbar_scanner_new_scan+0x40>
        scn->y1_sign = -scn->y1_sign;
        return(edge);
    }

    scn->y1_sign = scn->width = 0;
    if(scn->decoder)
  40669a:	4643      	mov	r3, r8
        return(zbar_decode_width(scn->decoder, 0));
    return(ZBAR_PARTIAL);
  40669c:	2001      	movs	r0, #1
  40669e:	e7d6      	b.n	40664e <zbar_scanner_new_scan+0x46>
  4066a0:	00403a51 	.word	0x00403a51
  4066a4:	004090e5 	.word	0x004090e5
  4066a8:	004039b1 	.word	0x004039b1

004066ac <zbar_scan_y>:
    return(edge);
}

zbar_symbol_type_t zbar_scan_y (zbar_scanner_t *scn,
                                int y)
{
  4066ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    /* FIXME calc and clip to max y range... */
    /* retrieve short value history */
    register int x = scn->x;
  4066b0:	6886      	ldr	r6, [r0, #8]
    register int y0_1 = scn->y0[(x - 1) & 3];
  4066b2:	1e73      	subs	r3, r6, #1
  4066b4:	f003 0303 	and.w	r3, r3, #3
  4066b8:	eb00 0383 	add.w	r3, r0, r3, lsl #2
    return(edge);
}

zbar_symbol_type_t zbar_scan_y (zbar_scanner_t *scn,
                                int y)
{
  4066bc:	4605      	mov	r5, r0
    /* FIXME calc and clip to max y range... */
    /* retrieve short value history */
    register int x = scn->x;
    register int y0_1 = scn->y0[(x - 1) & 3];
  4066be:	68dc      	ldr	r4, [r3, #12]
    register int y0_0 = y0_1;
    register int y0_2, y0_3, y1_1, y2_1, y2_2;
    zbar_symbol_type_t edge;
    if(x) {
  4066c0:	2e00      	cmp	r6, #0
  4066c2:	d05e      	beq.n	406782 <zbar_scan_y+0xd6>
        /* update weighted moving average */
        y0_0 += ((int)((y - y0_1) * EWMA_WEIGHT)) >> ZBAR_FIXED;
  4066c4:	1b09      	subs	r1, r1, r4
  4066c6:	eb01 0181 	add.w	r1, r1, r1, lsl #2
        scn->y0[x & 3] = y0_0;
  4066ca:	f006 0303 	and.w	r3, r6, #3
    register int y0_0 = y0_1;
    register int y0_2, y0_3, y1_1, y2_1, y2_2;
    zbar_symbol_type_t edge;
    if(x) {
        /* update weighted moving average */
        y0_0 += ((int)((y - y0_1) * EWMA_WEIGHT)) >> ZBAR_FIXED;
  4066ce:	eb01 0181 	add.w	r1, r1, r1, lsl #2
        scn->y0[x & 3] = y0_0;
  4066d2:	eb00 0383 	add.w	r3, r0, r3, lsl #2
    register int y0_0 = y0_1;
    register int y0_2, y0_3, y1_1, y2_1, y2_2;
    zbar_symbol_type_t edge;
    if(x) {
        /* update weighted moving average */
        y0_0 += ((int)((y - y0_1) * EWMA_WEIGHT)) >> ZBAR_FIXED;
  4066d6:	eb04 1161 	add.w	r1, r4, r1, asr #5
        scn->y0[x & 3] = y0_0;
  4066da:	60d9      	str	r1, [r3, #12]
    }
    else
        y0_0 = y0_1 = scn->y0[0] = scn->y0[1] = scn->y0[2] = scn->y0[3] = y;
    y0_2 = scn->y0[(x - 2) & 3];
  4066dc:	1eb2      	subs	r2, r6, #2
    y0_3 = scn->y0[(x - 3) & 3];
  4066de:	1ef3      	subs	r3, r6, #3
        y0_0 += ((int)((y - y0_1) * EWMA_WEIGHT)) >> ZBAR_FIXED;
        scn->y0[x & 3] = y0_0;
    }
    else
        y0_0 = y0_1 = scn->y0[0] = scn->y0[1] = scn->y0[2] = scn->y0[3] = y;
    y0_2 = scn->y0[(x - 2) & 3];
  4066e0:	f002 0203 	and.w	r2, r2, #3
    y0_3 = scn->y0[(x - 3) & 3];
  4066e4:	f003 0303 	and.w	r3, r3, #3
  4066e8:	eb05 0383 	add.w	r3, r5, r3, lsl #2
        y0_0 += ((int)((y - y0_1) * EWMA_WEIGHT)) >> ZBAR_FIXED;
        scn->y0[x & 3] = y0_0;
    }
    else
        y0_0 = y0_1 = scn->y0[0] = scn->y0[1] = scn->y0[2] = scn->y0[3] = y;
    y0_2 = scn->y0[(x - 2) & 3];
  4066ec:	eb05 0282 	add.w	r2, r5, r2, lsl #2
    y0_3 = scn->y0[(x - 3) & 3];
  4066f0:	68d8      	ldr	r0, [r3, #12]
        y0_0 += ((int)((y - y0_1) * EWMA_WEIGHT)) >> ZBAR_FIXED;
        scn->y0[x & 3] = y0_0;
    }
    else
        y0_0 = y0_1 = scn->y0[0] = scn->y0[1] = scn->y0[2] = scn->y0[3] = y;
    y0_2 = scn->y0[(x - 2) & 3];
  4066f2:	68d2      	ldr	r2, [r2, #12]
    y0_3 = scn->y0[(x - 3) & 3];
    /* 1st differential @ x-1 */
    y1_1 = y0_1 - y0_2;
  4066f4:	1aa3      	subs	r3, r4, r2
    {
        register int y1_2 = y0_2 - y0_3;
  4066f6:	ebc0 0902 	rsb	r9, r0, r2
        if((abs(y1_1) < abs(y1_2)) &&
  4066fa:	ea83 77e3 	eor.w	r7, r3, r3, asr #31
  4066fe:	ea89 7ee9 	eor.w	lr, r9, r9, asr #31
  406702:	eba7 77e3 	sub.w	r7, r7, r3, asr #31
  406706:	ebae 7ee9 	sub.w	lr, lr, r9, asr #31
  40670a:	4577      	cmp	r7, lr
  40670c:	da37      	bge.n	40677e <zbar_scan_y+0xd2>
  40670e:	ea6f 0809 	mvn.w	r8, r9
  406712:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
  406716:	ea4f 78d8 	mov.w	r8, r8, lsr #31
  40671a:	45c4      	cmp	ip, r8
  40671c:	bf14      	ite	ne
  40671e:	4677      	movne	r7, lr
  406720:	4699      	moveq	r9, r3
           ((y1_1 >= 0) == (y1_2 >= 0)))
            y1_1 = y1_2;
    }

    /* 2nd differentials @ x-1 & x-2 */
    y2_1 = y0_0 - (y0_1 * 2) + y0_2;
  406722:	eba1 0144 	sub.w	r1, r1, r4, lsl #1
  406726:	188c      	adds	r4, r1, r2
    y2_2 = y0_1 - (y0_2 * 2) + y0_3;
  406728:	1a9b      	subs	r3, r3, r2
    dbprintf(1, "scan: x=%d y=%d y0=%d y1=%d y2=%d",
             x, y, y0_1, y1_1, y2_1);

    edge = ZBAR_NONE;
    /* 2nd zero-crossing is 1st local min/max - could be edge */
    if((!y2_1 ||
  40672a:	2c00      	cmp	r4, #0
            y1_1 = y1_2;
    }

    /* 2nd differentials @ x-1 & x-2 */
    y2_1 = y0_0 - (y0_1 * 2) + y0_2;
    y2_2 = y0_1 - (y0_2 * 2) + y0_3;
  40672c:	eb03 0800 	add.w	r8, r3, r0
    dbprintf(1, "scan: x=%d y=%d y0=%d y1=%d y2=%d",
             x, y, y0_1, y1_1, y2_1);

    edge = ZBAR_NONE;
    /* 2nd zero-crossing is 1st local min/max - could be edge */
    if((!y2_1 ||
  406730:	d00b      	beq.n	40674a <zbar_scan_y+0x9e>
  406732:	dd07      	ble.n	406744 <zbar_scan_y+0x98>
  406734:	f1b8 0f00 	cmp.w	r8, #0
  406738:	db07      	blt.n	40674a <zbar_scan_y+0x9e>
    }
    else
        dbprintf(1, "\n");
    /* FIXME add fall-thru pass to decoder after heuristic "idle" period
       (eg, 6-8 * last width) */
    scn->x = x + 1;
  40673a:	3601      	adds	r6, #1
  40673c:	60ae      	str	r6, [r5, #8]
    y2_2 = y0_1 - (y0_2 * 2) + y0_3;

    dbprintf(1, "scan: x=%d y=%d y0=%d y1=%d y2=%d",
             x, y, y0_1, y1_1, y2_1);

    edge = ZBAR_NONE;
  40673e:	2000      	movs	r0, #0
        dbprintf(1, "\n");
    /* FIXME add fall-thru pass to decoder after heuristic "idle" period
       (eg, 6-8 * last width) */
    scn->x = x + 1;
    return(edge);
}
  406740:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    dbprintf(1, "scan: x=%d y=%d y0=%d y1=%d y2=%d",
             x, y, y0_1, y1_1, y2_1);

    edge = ZBAR_NONE;
    /* 2nd zero-crossing is 1st local min/max - could be edge */
    if((!y2_1 ||
  406744:	f1b8 0f00 	cmp.w	r8, #0
  406748:	ddf7      	ble.n	40673a <zbar_scan_y+0x8e>
}

static inline unsigned calc_thresh (zbar_scanner_t *scn)
{
    /* threshold 1st to improve noise rejection */
    unsigned dx, thresh = scn->y1_thresh;
  40674a:	6a29      	ldr	r1, [r5, #32]
    unsigned long t;
    if((thresh <= scn->y1_min_thresh) || !scn->width) {
  40674c:	686a      	ldr	r2, [r5, #4]
  40674e:	4291      	cmp	r1, r2
  406750:	d91d      	bls.n	40678e <zbar_scan_y+0xe2>
  406752:	f8d5 e02c 	ldr.w	lr, [r5, #44]	; 0x2c
  406756:	f1be 0f00 	cmp.w	lr, #0
  40675a:	d018      	beq.n	40678e <zbar_scan_y+0xe2>
        dbprintf(1, " tmin=%d", scn->y1_min_thresh);
        return(scn->y1_min_thresh);
    }
    /* slowly return threshold to min */
    dx = (scn->x << ZBAR_FIXED) - scn->last_edge;
  40675c:	6aa8      	ldr	r0, [r5, #40]	; 0x28
  40675e:	68ab      	ldr	r3, [r5, #8]
  406760:	ebc0 1343 	rsb	r3, r0, r3, lsl #5
    t = thresh * dx;
  406764:	fb01 f303 	mul.w	r3, r1, r3
    t /= scn->width;
  406768:	fbb3 f3fe 	udiv	r3, r3, lr
    t /= ZBAR_SCANNER_THRESH_FADE;
  40676c:	08db      	lsrs	r3, r3, #3
    dbprintf(1, " thr=%d t=%ld x=%d last=%d.%d (%d)",
             thresh, t, scn->x, scn->last_edge >> ZBAR_FIXED,
             scn->last_edge & ((1 << ZBAR_FIXED) - 1), dx);
    if(thresh > t) {
  40676e:	4299      	cmp	r1, r3
  406770:	d902      	bls.n	406778 <zbar_scan_y+0xcc>
        thresh -= t;
  406772:	1ac9      	subs	r1, r1, r3
        if(thresh > scn->y1_min_thresh)
  406774:	428a      	cmp	r2, r1
  406776:	d30b      	bcc.n	406790 <zbar_scan_y+0xe4>
            return(thresh);
    }
    scn->y1_thresh = scn->y1_min_thresh;
  406778:	622a      	str	r2, [r5, #32]
  40677a:	4611      	mov	r1, r2
  40677c:	e008      	b.n	406790 <zbar_scan_y+0xe4>
    else
        y0_0 = y0_1 = scn->y0[0] = scn->y0[1] = scn->y0[2] = scn->y0[3] = y;
    y0_2 = scn->y0[(x - 2) & 3];
    y0_3 = scn->y0[(x - 3) & 3];
    /* 1st differential @ x-1 */
    y1_1 = y0_1 - y0_2;
  40677e:	4699      	mov	r9, r3
  406780:	e7cf      	b.n	406722 <zbar_scan_y+0x76>
        /* update weighted moving average */
        y0_0 += ((int)((y - y0_1) * EWMA_WEIGHT)) >> ZBAR_FIXED;
        scn->y0[x & 3] = y0_0;
    }
    else
        y0_0 = y0_1 = scn->y0[0] = scn->y0[1] = scn->y0[2] = scn->y0[3] = y;
  406782:	6181      	str	r1, [r0, #24]
  406784:	6141      	str	r1, [r0, #20]
  406786:	6101      	str	r1, [r0, #16]
  406788:	60c1      	str	r1, [r0, #12]
  40678a:	460c      	mov	r4, r1
  40678c:	e7a6      	b.n	4066dc <zbar_scan_y+0x30>
static inline unsigned calc_thresh (zbar_scanner_t *scn)
{
    /* threshold 1st to improve noise rejection */
    unsigned dx, thresh = scn->y1_thresh;
    unsigned long t;
    if((thresh <= scn->y1_min_thresh) || !scn->width) {
  40678e:	4611      	mov	r1, r2
             x, y, y0_1, y1_1, y2_1);

    edge = ZBAR_NONE;
    /* 2nd zero-crossing is 1st local min/max - could be edge */
    if((!y2_1 ||
        ((y2_1 > 0) ? y2_2 < 0 : y2_2 > 0)) &&
  406790:	428f      	cmp	r7, r1
  406792:	d3d2      	bcc.n	40673a <zbar_scan_y+0x8e>
       (calc_thresh(scn) <= abs(y1_1)))
    {
        /* check for 1st sign change */
        char y1_rev = (scn->y1_sign > 0) ? y1_1 < 0 : y1_1 > 0;
  406794:	f8d5 e01c 	ldr.w	lr, [r5, #28]
  406798:	f1be 0f00 	cmp.w	lr, #0
  40679c:	dd35      	ble.n	40680a <zbar_scan_y+0x15e>
  40679e:	ea4f 70d9 	mov.w	r0, r9, lsr #31
        if(y1_rev)
  4067a2:	bb20      	cbnz	r0, 4067ee <zbar_scan_y+0x142>
            /* intensity change reversal - finalize previous edge */
            edge = process_edge(scn, y1_1);

        if(y1_rev || (abs(scn->y1_sign) < abs(y1_1))) {
  4067a4:	ea8e 71ee 	eor.w	r1, lr, lr, asr #31
  4067a8:	eba1 71ee 	sub.w	r1, r1, lr, asr #31
  4067ac:	42b9      	cmp	r1, r7
  4067ae:	dac4      	bge.n	40673a <zbar_scan_y+0x8e>
            int d;
            scn->y1_sign = y1_1;

            /* adaptive thresholding */
            /* start at multiple of new min/max */
            scn->y1_thresh = (abs(y1_1) * THRESH_INIT + ROUND) >> ZBAR_FIXED;
  4067b0:	ebc7 07c7 	rsb	r7, r7, r7, lsl #3
  4067b4:	007f      	lsls	r7, r7, #1
  4067b6:	f107 0310 	add.w	r3, r7, #16
  4067ba:	095f      	lsrs	r7, r3, #5
  4067bc:	4297      	cmp	r7, r2
  4067be:	bf38      	it	cc
  4067c0:	4617      	movcc	r7, r2
                scn->y1_thresh = scn->y1_min_thresh;

            /* update current edge */
            d = y2_1 - y2_2;
            scn->cur_edge = 1 << ZBAR_FIXED;
            if(!d)
  4067c2:	ebb4 0308 	subs.w	r3, r4, r8
            int d;
            scn->y1_sign = y1_1;

            /* adaptive thresholding */
            /* start at multiple of new min/max */
            scn->y1_thresh = (abs(y1_1) * THRESH_INIT + ROUND) >> ZBAR_FIXED;
  4067c6:	622f      	str	r7, [r5, #32]
            /* intensity change reversal - finalize previous edge */
            edge = process_edge(scn, y1_1);

        if(y1_rev || (abs(scn->y1_sign) < abs(y1_1))) {
            int d;
            scn->y1_sign = y1_1;
  4067c8:	f8c5 901c 	str.w	r9, [r5, #28]
                scn->y1_thresh = scn->y1_min_thresh;

            /* update current edge */
            d = y2_1 - y2_2;
            scn->cur_edge = 1 << ZBAR_FIXED;
            if(!d)
  4067cc:	d00d      	beq.n	4067ea <zbar_scan_y+0x13e>
                scn->cur_edge >>= 1;
            else if(y2_1)
  4067ce:	b314      	cbz	r4, 406816 <zbar_scan_y+0x16a>
                /* interpolate zero crossing */
                scn->cur_edge -= ((y2_1 << ZBAR_FIXED) + 1) / d;
  4067d0:	0164      	lsls	r4, r4, #5
  4067d2:	3401      	adds	r4, #1
  4067d4:	fb94 f3f3 	sdiv	r3, r4, r3
  4067d8:	f1c3 0320 	rsb	r3, r3, #32
            scn->cur_edge += x << ZBAR_FIXED;
  4067dc:	eb03 1346 	add.w	r3, r3, r6, lsl #5
    }
    else
        dbprintf(1, "\n");
    /* FIXME add fall-thru pass to decoder after heuristic "idle" period
       (eg, 6-8 * last width) */
    scn->x = x + 1;
  4067e0:	3601      	adds	r6, #1
            if(!d)
                scn->cur_edge >>= 1;
            else if(y2_1)
                /* interpolate zero crossing */
                scn->cur_edge -= ((y2_1 << ZBAR_FIXED) + 1) / d;
            scn->cur_edge += x << ZBAR_FIXED;
  4067e2:	626b      	str	r3, [r5, #36]	; 0x24
    }
    else
        dbprintf(1, "\n");
    /* FIXME add fall-thru pass to decoder after heuristic "idle" period
       (eg, 6-8 * last width) */
    scn->x = x + 1;
  4067e4:	60ae      	str	r6, [r5, #8]
    return(edge);
}
  4067e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  4067ea:	2310      	movs	r3, #16
  4067ec:	e7f6      	b.n	4067dc <zbar_scan_y+0x130>
}

static inline zbar_symbol_type_t process_edge (zbar_scanner_t *scn,
                                               int y1)
{
    if(!scn->y1_sign)
  4067ee:	f1be 0f00 	cmp.w	lr, #0
  4067f2:	d112      	bne.n	40681a <zbar_scan_y+0x16e>
        scn->last_edge = scn->cur_edge = (1 << ZBAR_FIXED) + ROUND;
  4067f4:	2330      	movs	r3, #48	; 0x30
  4067f6:	4671      	mov	r1, lr
  4067f8:	626b      	str	r3, [r5, #36]	; 0x24
#if DEBUG_SVG > 1
    svg_path_moveto(SVG_ABS, scn->last_edge - (1 << ZBAR_FIXED) - ROUND, 0);
#endif

    /* pass to decoder */
    if(scn->decoder)
  4067fa:	6828      	ldr	r0, [r5, #0]
    if(!scn->y1_sign)
        scn->last_edge = scn->cur_edge = (1 << ZBAR_FIXED) + ROUND;
    else if(!scn->last_edge)
        scn->last_edge = scn->cur_edge;

    scn->width = scn->cur_edge - scn->last_edge;
  4067fc:	62e9      	str	r1, [r5, #44]	; 0x2c
    dbprintf(1, " sgn=%d cur=%d.%d w=%d (%s)\n",
             scn->y1_sign, scn->cur_edge >> ZBAR_FIXED,
             scn->cur_edge & ((1 << ZBAR_FIXED) - 1), scn->width,
             ((y1 > 0) ? "SPACE" : "BAR"));
    scn->last_edge = scn->cur_edge;
  4067fe:	62ab      	str	r3, [r5, #40]	; 0x28
#if DEBUG_SVG > 1
    svg_path_moveto(SVG_ABS, scn->last_edge - (1 << ZBAR_FIXED) - ROUND, 0);
#endif

    /* pass to decoder */
    if(scn->decoder)
  406800:	b188      	cbz	r0, 406826 <zbar_scan_y+0x17a>
        return(zbar_decode_width(scn->decoder, scn->width));
  406802:	4b0a      	ldr	r3, [pc, #40]	; (40682c <zbar_scan_y+0x180>)
  406804:	4798      	blx	r3
  406806:	686a      	ldr	r2, [r5, #4]
  406808:	e7d2      	b.n	4067b0 <zbar_scan_y+0x104>
    if((!y2_1 ||
        ((y2_1 > 0) ? y2_2 < 0 : y2_2 > 0)) &&
       (calc_thresh(scn) <= abs(y1_1)))
    {
        /* check for 1st sign change */
        char y1_rev = (scn->y1_sign > 0) ? y1_1 < 0 : y1_1 > 0;
  40680a:	f1b9 0f00 	cmp.w	r9, #0
  40680e:	bfd4      	ite	le
  406810:	2000      	movle	r0, #0
  406812:	2001      	movgt	r0, #1
  406814:	e7c5      	b.n	4067a2 <zbar_scan_y+0xf6>
  406816:	2320      	movs	r3, #32
  406818:	e7e0      	b.n	4067dc <zbar_scan_y+0x130>
static inline zbar_symbol_type_t process_edge (zbar_scanner_t *scn,
                                               int y1)
{
    if(!scn->y1_sign)
        scn->last_edge = scn->cur_edge = (1 << ZBAR_FIXED) + ROUND;
    else if(!scn->last_edge)
  40681a:	6aa9      	ldr	r1, [r5, #40]	; 0x28
        scn->last_edge = scn->cur_edge;
  40681c:	6a6b      	ldr	r3, [r5, #36]	; 0x24
static inline zbar_symbol_type_t process_edge (zbar_scanner_t *scn,
                                               int y1)
{
    if(!scn->y1_sign)
        scn->last_edge = scn->cur_edge = (1 << ZBAR_FIXED) + ROUND;
    else if(!scn->last_edge)
  40681e:	2900      	cmp	r1, #0
  406820:	d0eb      	beq.n	4067fa <zbar_scan_y+0x14e>
  406822:	1a59      	subs	r1, r3, r1
  406824:	e7e9      	b.n	4067fa <zbar_scan_y+0x14e>
#endif

    /* pass to decoder */
    if(scn->decoder)
        return(zbar_decode_width(scn->decoder, scn->width));
    return(ZBAR_PARTIAL);
  406826:	2001      	movs	r0, #1
  406828:	e7c2      	b.n	4067b0 <zbar_scan_y+0x104>
  40682a:	bf00      	nop
  40682c:	00403a51 	.word	0x00403a51

00406830 <_zbar_refcnt.part.0>:

#else

typedef int refcnt_t;

static inline int _zbar_refcnt (refcnt_t *cnt,
  406830:	b508      	push	{r3, lr}
                                int delta)
{
    int rc = (*cnt += delta);
    assert(rc >= 0);
  406832:	4803      	ldr	r0, [pc, #12]	; (406840 <_zbar_refcnt.part.0+0x10>)
  406834:	4a03      	ldr	r2, [pc, #12]	; (406844 <_zbar_refcnt.part.0+0x14>)
  406836:	4b04      	ldr	r3, [pc, #16]	; (406848 <_zbar_refcnt.part.0+0x18>)
  406838:	4c04      	ldr	r4, [pc, #16]	; (40684c <_zbar_refcnt.part.0+0x1c>)
  40683a:	2157      	movs	r1, #87	; 0x57
  40683c:	47a0      	blx	r4
  40683e:	bf00      	nop
  406840:	004112e8 	.word	0x004112e8
  406844:	004116e0 	.word	0x004116e0
  406848:	00411314 	.word	0x00411314
  40684c:	00407d65 	.word	0x00407d65

00406850 <zbar_get_symbol_name>:

//#include <FreeRTOS.h>

const char *zbar_get_symbol_name (zbar_symbol_type_t sym)
{
    switch(sym & ZBAR_SYMBOL) {
  406850:	b2c0      	uxtb	r0, r0
  406852:	3802      	subs	r0, #2
  406854:	b280      	uxth	r0, r0
  406856:	287e      	cmp	r0, #126	; 0x7e
  406858:	bf9a      	itte	ls
  40685a:	4b02      	ldrls	r3, [pc, #8]	; (406864 <zbar_get_symbol_name+0x14>)
  40685c:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
  406860:	4801      	ldrhi	r0, [pc, #4]	; (406868 <zbar_get_symbol_name+0x18>)
    case ZBAR_CODE128: return("CODE-128");
    case ZBAR_PDF417: return("PDF417");
    case ZBAR_QRCODE: return("QR-Code");
    default: return("UNKNOWN");
    }
}
  406862:	4770      	bx	lr
  406864:	004116f0 	.word	0x004116f0
  406868:	0041190c 	.word	0x0041190c

0040686c <_zbar_get_symbol_hash>:
        0x00, 0x01, 0x10, 0x11,   -1, 0x11, 0x16, 0x0c,
	0x05, 0x06, 0x08,   -1, 0x04, 0x03, 0x07, 0x12,
	  -1,   -1,   -1,   -1,   -1,   -1,   -1, 0x02,
	  -1, 0x00, 0x12, 0x0c, 0x0b, 0x1d, 0x0a, 0x00,
     };
    int g0 = hash[sym & 0x1f];
  40686c:	f000 031f 	and.w	r3, r0, #31
  406870:	4a0a      	ldr	r2, [pc, #40]	; (40689c <_zbar_get_symbol_hash+0x30>)
    int g1 = hash[~(sym >> 4) & 0x1f];
  406872:	ea6f 1010 	mvn.w	r0, r0, lsr #4
        0x00, 0x01, 0x10, 0x11,   -1, 0x11, 0x16, 0x0c,
	0x05, 0x06, 0x08,   -1, 0x04, 0x03, 0x07, 0x12,
	  -1,   -1,   -1,   -1,   -1,   -1,   -1, 0x02,
	  -1, 0x00, 0x12, 0x0c, 0x0b, 0x1d, 0x0a, 0x00,
     };
    int g0 = hash[sym & 0x1f];
  406876:	56d1      	ldrsb	r1, [r2, r3]
    int g1 = hash[~(sym >> 4) & 0x1f];
  406878:	f000 001f 	and.w	r0, r0, #31
    assert(g0 >= 0 && g1 >= 0);
  40687c:	2900      	cmp	r1, #0
    default: return("UNKNOWN");
    }
}

int _zbar_get_symbol_hash (zbar_symbol_type_t sym)
{
  40687e:	b510      	push	{r4, lr}
	0x05, 0x06, 0x08,   -1, 0x04, 0x03, 0x07, 0x12,
	  -1,   -1,   -1,   -1,   -1,   -1,   -1, 0x02,
	  -1, 0x00, 0x12, 0x0c, 0x0b, 0x1d, 0x0a, 0x00,
     };
    int g0 = hash[sym & 0x1f];
    int g1 = hash[~(sym >> 4) & 0x1f];
  406880:	5613      	ldrsb	r3, [r2, r0]
    assert(g0 >= 0 && g1 >= 0);
  406882:	db05      	blt.n	406890 <_zbar_get_symbol_hash+0x24>
  406884:	2b00      	cmp	r3, #0
  406886:	db03      	blt.n	406890 <_zbar_get_symbol_hash+0x24>
    if(g0 < 0 || g1 < 0)
        return(0);
    return((g0 + g1) & 0x1f);
  406888:	18c8      	adds	r0, r1, r3
}
  40688a:	f000 001f 	and.w	r0, r0, #31
  40688e:	bd10      	pop	{r4, pc}
	  -1,   -1,   -1,   -1,   -1,   -1,   -1, 0x02,
	  -1, 0x00, 0x12, 0x0c, 0x0b, 0x1d, 0x0a, 0x00,
     };
    int g0 = hash[sym & 0x1f];
    int g1 = hash[~(sym >> 4) & 0x1f];
    assert(g0 >= 0 && g1 >= 0);
  406890:	4803      	ldr	r0, [pc, #12]	; (4068a0 <_zbar_get_symbol_hash+0x34>)
  406892:	4a04      	ldr	r2, [pc, #16]	; (4068a4 <_zbar_get_symbol_hash+0x38>)
  406894:	4b04      	ldr	r3, [pc, #16]	; (4068a8 <_zbar_get_symbol_hash+0x3c>)
  406896:	4c05      	ldr	r4, [pc, #20]	; (4068ac <_zbar_get_symbol_hash+0x40>)
  406898:	216f      	movs	r1, #111	; 0x6f
  40689a:	47a0      	blx	r4
  40689c:	004118ec 	.word	0x004118ec
  4068a0:	00411984 	.word	0x00411984
  4068a4:	00411b38 	.word	0x00411b38
  4068a8:	004119a8 	.word	0x004119a8
  4068ac:	00407d65 	.word	0x00407d65

004068b0 <_zbar_symbol_free>:
        return(0);
    return((g0 + g1) & 0x1f);
}

void _zbar_symbol_free (zbar_symbol_t *sym)
{
  4068b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if(sym->syms) {
  4068b2:	6b07      	ldr	r7, [r0, #48]	; 0x30
        return(0);
    return((g0 + g1) & 0x1f);
}

void _zbar_symbol_free (zbar_symbol_t *sym)
{
  4068b4:	4606      	mov	r6, r0
    if(sym->syms) {
  4068b6:	2f00      	cmp	r7, #0
  4068b8:	d02e      	beq.n	406918 <_zbar_symbol_free+0x68>
typedef int refcnt_t;

static inline int _zbar_refcnt (refcnt_t *cnt,
                                int delta)
{
    int rc = (*cnt += delta);
  4068ba:	683d      	ldr	r5, [r7, #0]
  4068bc:	3d01      	subs	r5, #1
    assert(rc >= 0);
  4068be:	2d00      	cmp	r5, #0
typedef int refcnt_t;

static inline int _zbar_refcnt (refcnt_t *cnt,
                                int delta)
{
    int rc = (*cnt += delta);
  4068c0:	603d      	str	r5, [r7, #0]
    assert(rc >= 0);
  4068c2:	db2b      	blt.n	40691c <_zbar_symbol_free+0x6c>

void zbar_symbol_set_ref (const zbar_symbol_set_t *syms,
                          int delta)
{
    zbar_symbol_set_t *ncsyms = (zbar_symbol_set_t*)syms;
    if(!_zbar_refcnt(&ncsyms->refcnt, delta) && delta <= 0)
  4068c4:	d116      	bne.n	4068f4 <_zbar_symbol_free+0x44>
}

inline void _zbar_symbol_set_free (zbar_symbol_set_t *syms)
{
    zbar_symbol_t *sym, *next;
    for(sym = syms->head; sym; sym = next) {
  4068c6:	68b8      	ldr	r0, [r7, #8]
  4068c8:	b310      	cbz	r0, 406910 <_zbar_symbol_free+0x60>
typedef int refcnt_t;

static inline int _zbar_refcnt (refcnt_t *cnt,
                                int delta)
{
    int rc = (*cnt += delta);
  4068ca:	6a83      	ldr	r3, [r0, #40]	; 0x28
        next = sym->next;
  4068cc:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
        sym->next = NULL;
  4068ce:	62c5      	str	r5, [r0, #44]	; 0x2c
  4068d0:	3b01      	subs	r3, #1
    assert(rc >= 0);
  4068d2:	2b00      	cmp	r3, #0
typedef int refcnt_t;

static inline int _zbar_refcnt (refcnt_t *cnt,
                                int delta)
{
    int rc = (*cnt += delta);
  4068d4:	6283      	str	r3, [r0, #40]	; 0x28
    assert(rc >= 0);
  4068d6:	db21      	blt.n	40691c <_zbar_symbol_free+0x6c>
}

static inline void _zbar_symbol_refcnt (zbar_symbol_t *sym,
                                        int delta)
{
    if(!_zbar_refcnt(&sym->refcnt, delta) && delta <= 0)
  4068d8:	b90b      	cbnz	r3, 4068de <_zbar_symbol_free+0x2e>
        _zbar_symbol_free(sym);
  4068da:	f7ff ffe9 	bl	4068b0 <_zbar_symbol_free>
}

inline void _zbar_symbol_set_free (zbar_symbol_set_t *syms)
{
    zbar_symbol_t *sym, *next;
    for(sym = syms->head; sym; sym = next) {
  4068de:	b1bc      	cbz	r4, 406910 <_zbar_symbol_free+0x60>
typedef int refcnt_t;

static inline int _zbar_refcnt (refcnt_t *cnt,
                                int delta)
{
    int rc = (*cnt += delta);
  4068e0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
        next = sym->next;
  4068e2:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
        sym->next = NULL;
  4068e4:	62e5      	str	r5, [r4, #44]	; 0x2c
  4068e6:	3b01      	subs	r3, #1
    assert(rc >= 0);
  4068e8:	2b00      	cmp	r3, #0
typedef int refcnt_t;

static inline int _zbar_refcnt (refcnt_t *cnt,
                                int delta)
{
    int rc = (*cnt += delta);
  4068ea:	62a3      	str	r3, [r4, #40]	; 0x28
  4068ec:	4620      	mov	r0, r4
    assert(rc >= 0);
  4068ee:	db15      	blt.n	40691c <_zbar_symbol_free+0x6c>

inline void _zbar_symbol_set_free (zbar_symbol_set_t *syms)
{
    zbar_symbol_t *sym, *next;
    for(sym = syms->head; sym; sym = next) {
        next = sym->next;
  4068f0:	4614      	mov	r4, r2
  4068f2:	e7f1      	b.n	4068d8 <_zbar_symbol_free+0x28>
  4068f4:	4c0a      	ldr	r4, [pc, #40]	; (406920 <_zbar_symbol_free+0x70>)

void _zbar_symbol_free (zbar_symbol_t *sym)
{
    if(sym->syms) {
        zbar_symbol_set_ref(sym->syms, -1);
        sym->syms = NULL;
  4068f6:	2300      	movs	r3, #0
  4068f8:	6333      	str	r3, [r6, #48]	; 0x30
    }
    if(sym->pts)
  4068fa:	6a30      	ldr	r0, [r6, #32]
  4068fc:	b100      	cbz	r0, 406900 <_zbar_symbol_free+0x50>
        free(sym->pts);
  4068fe:	47a0      	blx	r4
    if(sym->data_alloc && sym->data)
  406900:	68f3      	ldr	r3, [r6, #12]
  406902:	b113      	cbz	r3, 40690a <_zbar_symbol_free+0x5a>
  406904:	6970      	ldr	r0, [r6, #20]
  406906:	b100      	cbz	r0, 40690a <_zbar_symbol_free+0x5a>
        free(sym->data);
  406908:	47a0      	blx	r4
    free(sym);
  40690a:	4630      	mov	r0, r6
  40690c:	47a0      	blx	r4
  40690e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        next = sym->next;
        sym->next = NULL;
        _zbar_symbol_refcnt(sym, -1);
    }
    syms->head = NULL;
    free(syms);
  406910:	4638      	mov	r0, r7
  406912:	4c03      	ldr	r4, [pc, #12]	; (406920 <_zbar_symbol_free+0x70>)
  406914:	47a0      	blx	r4
  406916:	e7ee      	b.n	4068f6 <_zbar_symbol_free+0x46>
  406918:	4c01      	ldr	r4, [pc, #4]	; (406920 <_zbar_symbol_free+0x70>)
  40691a:	e7ee      	b.n	4068fa <_zbar_symbol_free+0x4a>
  40691c:	4b01      	ldr	r3, [pc, #4]	; (406924 <_zbar_symbol_free+0x74>)
  40691e:	4798      	blx	r3
  406920:	004088bd 	.word	0x004088bd
  406924:	00406831 	.word	0x00406831

00406928 <zbar_symbol_get_type>:
}

zbar_symbol_type_t zbar_symbol_get_type (const zbar_symbol_t *sym)
{
    return(sym->type);
}
  406928:	8800      	ldrh	r0, [r0, #0]
  40692a:	4770      	bx	lr

0040692c <zbar_symbol_get_data>:
}

const char *zbar_symbol_get_data (const zbar_symbol_t *sym)
{
    return(sym->data);
}
  40692c:	6940      	ldr	r0, [r0, #20]
  40692e:	4770      	bx	lr

00406930 <zbar_symbol_next>:
    return(sym->orient);
}

const zbar_symbol_t *zbar_symbol_next (const zbar_symbol_t *sym)
{
    return((sym) ? sym->next : NULL);
  406930:	b100      	cbz	r0, 406934 <zbar_symbol_next+0x4>
  406932:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
}
  406934:	4770      	bx	lr
  406936:	bf00      	nop

00406938 <_zbar_symbol_set_create>:
    return(*buf);
}


zbar_symbol_set_t *_zbar_symbol_set_create ()
{
  406938:	b508      	push	{r3, lr}
    zbar_symbol_set_t *syms = calloc(1, sizeof(*syms));
  40693a:	2001      	movs	r0, #1
  40693c:	4b05      	ldr	r3, [pc, #20]	; (406954 <_zbar_symbol_set_create+0x1c>)
  40693e:	2110      	movs	r1, #16
  406940:	4798      	blx	r3
typedef int refcnt_t;

static inline int _zbar_refcnt (refcnt_t *cnt,
                                int delta)
{
    int rc = (*cnt += delta);
  406942:	6803      	ldr	r3, [r0, #0]
  406944:	3301      	adds	r3, #1
    assert(rc >= 0);
  406946:	2b00      	cmp	r3, #0
typedef int refcnt_t;

static inline int _zbar_refcnt (refcnt_t *cnt,
                                int delta)
{
    int rc = (*cnt += delta);
  406948:	6003      	str	r3, [r0, #0]
    assert(rc >= 0);
  40694a:	db00      	blt.n	40694e <_zbar_symbol_set_create+0x16>
    _zbar_refcnt(&syms->refcnt, 1);
    return(syms);
}
  40694c:	bd08      	pop	{r3, pc}
  40694e:	4b02      	ldr	r3, [pc, #8]	; (406958 <_zbar_symbol_set_create+0x20>)
  406950:	4798      	blx	r3
  406952:	bf00      	nop
  406954:	00407da1 	.word	0x00407da1
  406958:	00406831 	.word	0x00406831

0040695c <_zbar_symbol_set_free>:

inline void _zbar_symbol_set_free (zbar_symbol_set_t *syms)
{
  40695c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  406960:	b087      	sub	sp, #28
    zbar_symbol_t *sym, *next;
    for(sym = syms->head; sym; sym = next) {
  406962:	6883      	ldr	r3, [r0, #8]
    _zbar_refcnt(&syms->refcnt, 1);
    return(syms);
}

inline void _zbar_symbol_set_free (zbar_symbol_set_t *syms)
{
  406964:	9005      	str	r0, [sp, #20]
    zbar_symbol_t *sym, *next;
    for(sym = syms->head; sym; sym = next) {
  406966:	9301      	str	r3, [sp, #4]
  406968:	2b00      	cmp	r3, #0
  40696a:	f000 80df 	beq.w	406b2c <_zbar_symbol_set_free+0x1d0>
  40696e:	4619      	mov	r1, r3
typedef int refcnt_t;

static inline int _zbar_refcnt (refcnt_t *cnt,
                                int delta)
{
    int rc = (*cnt += delta);
  406970:	6a9c      	ldr	r4, [r3, #40]	; 0x28
        next = sym->next;
  406972:	6acb      	ldr	r3, [r1, #44]	; 0x2c
  406974:	9303      	str	r3, [sp, #12]
  406976:	3c01      	subs	r4, #1
        sym->next = NULL;
  406978:	2300      	movs	r3, #0
    assert(rc >= 0);
  40697a:	429c      	cmp	r4, r3
typedef int refcnt_t;

static inline int _zbar_refcnt (refcnt_t *cnt,
                                int delta)
{
    int rc = (*cnt += delta);
  40697c:	628c      	str	r4, [r1, #40]	; 0x28
  40697e:	62cb      	str	r3, [r1, #44]	; 0x2c
    assert(rc >= 0);
  406980:	f2c0 80da 	blt.w	406b38 <_zbar_symbol_set_free+0x1dc>
  406984:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 406b44 <_zbar_symbol_set_free+0x1e8>
}

static inline void _zbar_symbol_refcnt (zbar_symbol_t *sym,
                                        int delta)
{
    if(!_zbar_refcnt(&sym->refcnt, delta) && delta <= 0)
  406988:	2c00      	cmp	r4, #0
  40698a:	f040 80b8 	bne.w	406afe <_zbar_symbol_set_free+0x1a2>
    return((g0 + g1) & 0x1f);
}

void _zbar_symbol_free (zbar_symbol_t *sym)
{
    if(sym->syms) {
  40698e:	9b01      	ldr	r3, [sp, #4]
  406990:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  406992:	9304      	str	r3, [sp, #16]
  406994:	2b00      	cmp	r3, #0
  406996:	f000 80c4 	beq.w	406b22 <_zbar_symbol_set_free+0x1c6>
  40699a:	461a      	mov	r2, r3
typedef int refcnt_t;

static inline int _zbar_refcnt (refcnt_t *cnt,
                                int delta)
{
    int rc = (*cnt += delta);
  40699c:	681b      	ldr	r3, [r3, #0]
  40699e:	3b01      	subs	r3, #1
    assert(rc >= 0);
  4069a0:	2b00      	cmp	r3, #0
typedef int refcnt_t;

static inline int _zbar_refcnt (refcnt_t *cnt,
                                int delta)
{
    int rc = (*cnt += delta);
  4069a2:	6013      	str	r3, [r2, #0]
    assert(rc >= 0);
  4069a4:	f2c0 80c8 	blt.w	406b38 <_zbar_symbol_set_free+0x1dc>

void zbar_symbol_set_ref (const zbar_symbol_set_t *syms,
                          int delta)
{
    zbar_symbol_set_t *ncsyms = (zbar_symbol_set_t*)syms;
    if(!_zbar_refcnt(&ncsyms->refcnt, delta) && delta <= 0)
  4069a8:	f040 80be 	bne.w	406b28 <_zbar_symbol_set_free+0x1cc>
}

inline void _zbar_symbol_set_free (zbar_symbol_set_t *syms)
{
    zbar_symbol_t *sym, *next;
    for(sym = syms->head; sym; sym = next) {
  4069ac:	9b04      	ldr	r3, [sp, #16]
  4069ae:	689f      	ldr	r7, [r3, #8]
  4069b0:	2f00      	cmp	r7, #0
  4069b2:	f000 8092 	beq.w	406ada <_zbar_symbol_set_free+0x17e>
typedef int refcnt_t;

static inline int _zbar_refcnt (refcnt_t *cnt,
                                int delta)
{
    int rc = (*cnt += delta);
  4069b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
        next = sym->next;
  4069b8:	6afe      	ldr	r6, [r7, #44]	; 0x2c
        sym->next = NULL;
  4069ba:	62fc      	str	r4, [r7, #44]	; 0x2c
  4069bc:	3b01      	subs	r3, #1
    assert(rc >= 0);
  4069be:	2b00      	cmp	r3, #0
typedef int refcnt_t;

static inline int _zbar_refcnt (refcnt_t *cnt,
                                int delta)
{
    int rc = (*cnt += delta);
  4069c0:	62bb      	str	r3, [r7, #40]	; 0x28
    assert(rc >= 0);
  4069c2:	f2c0 80b9 	blt.w	406b38 <_zbar_symbol_set_free+0x1dc>

void _zbar_symbol_free (zbar_symbol_t *sym)
{
    if(sym->syms) {
        zbar_symbol_set_ref(sym->syms, -1);
        sym->syms = NULL;
  4069c6:	46b9      	mov	r9, r7
  4069c8:	4637      	mov	r7, r6
  4069ca:	2b00      	cmp	r3, #0
  4069cc:	d176      	bne.n	406abc <_zbar_symbol_set_free+0x160>
    return((g0 + g1) & 0x1f);
}

void _zbar_symbol_free (zbar_symbol_t *sym)
{
    if(sym->syms) {
  4069ce:	f8d9 2030 	ldr.w	r2, [r9, #48]	; 0x30
  4069d2:	9202      	str	r2, [sp, #8]
  4069d4:	2a00      	cmp	r2, #0
  4069d6:	f000 80a0 	beq.w	406b1a <_zbar_symbol_set_free+0x1be>
  4069da:	4611      	mov	r1, r2
typedef int refcnt_t;

static inline int _zbar_refcnt (refcnt_t *cnt,
                                int delta)
{
    int rc = (*cnt += delta);
  4069dc:	6812      	ldr	r2, [r2, #0]
  4069de:	3a01      	subs	r2, #1
    assert(rc >= 0);
  4069e0:	2a00      	cmp	r2, #0
typedef int refcnt_t;

static inline int _zbar_refcnt (refcnt_t *cnt,
                                int delta)
{
    int rc = (*cnt += delta);
  4069e2:	600a      	str	r2, [r1, #0]
    assert(rc >= 0);
  4069e4:	f2c0 80a8 	blt.w	406b38 <_zbar_symbol_set_free+0x1dc>

void zbar_symbol_set_ref (const zbar_symbol_set_t *syms,
                          int delta)
{
    zbar_symbol_set_t *ncsyms = (zbar_symbol_set_t*)syms;
    if(!_zbar_refcnt(&ncsyms->refcnt, delta) && delta <= 0)
  4069e8:	f040 8099 	bne.w	406b1e <_zbar_symbol_set_free+0x1c2>
}

inline void _zbar_symbol_set_free (zbar_symbol_set_t *syms)
{
    zbar_symbol_t *sym, *next;
    for(sym = syms->head; sym; sym = next) {
  4069ec:	9a02      	ldr	r2, [sp, #8]
  4069ee:	f8d2 a008 	ldr.w	sl, [r2, #8]
  4069f2:	f1ba 0f00 	cmp.w	sl, #0
  4069f6:	d04f      	beq.n	406a98 <_zbar_symbol_set_free+0x13c>
typedef int refcnt_t;

static inline int _zbar_refcnt (refcnt_t *cnt,
                                int delta)
{
    int rc = (*cnt += delta);
  4069f8:	f8da 1028 	ldr.w	r1, [sl, #40]	; 0x28
        next = sym->next;
  4069fc:	f8da b02c 	ldr.w	fp, [sl, #44]	; 0x2c
        sym->next = NULL;
  406a00:	f8ca 302c 	str.w	r3, [sl, #44]	; 0x2c
  406a04:	3901      	subs	r1, #1
    assert(rc >= 0);
  406a06:	2900      	cmp	r1, #0
typedef int refcnt_t;

static inline int _zbar_refcnt (refcnt_t *cnt,
                                int delta)
{
    int rc = (*cnt += delta);
  406a08:	f8ca 1028 	str.w	r1, [sl, #40]	; 0x28
    assert(rc >= 0);
  406a0c:	f2c0 8094 	blt.w	406b38 <_zbar_symbol_set_free+0x1dc>
  406a10:	463b      	mov	r3, r7
  406a12:	465f      	mov	r7, fp
  406a14:	469b      	mov	fp, r3
  406a16:	2900      	cmp	r1, #0
  406a18:	d132      	bne.n	406a80 <_zbar_symbol_set_free+0x124>
    return((g0 + g1) & 0x1f);
}

void _zbar_symbol_free (zbar_symbol_t *sym)
{
    if(sym->syms) {
  406a1a:	f8da 6030 	ldr.w	r6, [sl, #48]	; 0x30
  406a1e:	2e00      	cmp	r6, #0
  406a20:	d057      	beq.n	406ad2 <_zbar_symbol_set_free+0x176>
typedef int refcnt_t;

static inline int _zbar_refcnt (refcnt_t *cnt,
                                int delta)
{
    int rc = (*cnt += delta);
  406a22:	6833      	ldr	r3, [r6, #0]
  406a24:	3b01      	subs	r3, #1
    assert(rc >= 0);
  406a26:	2b00      	cmp	r3, #0
typedef int refcnt_t;

static inline int _zbar_refcnt (refcnt_t *cnt,
                                int delta)
{
    int rc = (*cnt += delta);
  406a28:	6033      	str	r3, [r6, #0]
    assert(rc >= 0);
  406a2a:	f2c0 8085 	blt.w	406b38 <_zbar_symbol_set_free+0x1dc>

void zbar_symbol_set_ref (const zbar_symbol_set_t *syms,
                          int delta)
{
    zbar_symbol_set_t *ncsyms = (zbar_symbol_set_t*)syms;
    if(!_zbar_refcnt(&ncsyms->refcnt, delta) && delta <= 0)
  406a2e:	d152      	bne.n	406ad6 <_zbar_symbol_set_free+0x17a>
}

inline void _zbar_symbol_set_free (zbar_symbol_set_t *syms)
{
    zbar_symbol_t *sym, *next;
    for(sym = syms->head; sym; sym = next) {
  406a30:	68b0      	ldr	r0, [r6, #8]
  406a32:	b198      	cbz	r0, 406a5c <_zbar_symbol_set_free+0x100>
typedef int refcnt_t;

static inline int _zbar_refcnt (refcnt_t *cnt,
                                int delta)
{
    int rc = (*cnt += delta);
  406a34:	6a83      	ldr	r3, [r0, #40]	; 0x28
        next = sym->next;
  406a36:	6ac5      	ldr	r5, [r0, #44]	; 0x2c
        sym->next = NULL;
  406a38:	62c1      	str	r1, [r0, #44]	; 0x2c
  406a3a:	3b01      	subs	r3, #1
    assert(rc >= 0);
  406a3c:	2b00      	cmp	r3, #0
typedef int refcnt_t;

static inline int _zbar_refcnt (refcnt_t *cnt,
                                int delta)
{
    int rc = (*cnt += delta);
  406a3e:	6283      	str	r3, [r0, #40]	; 0x28
    assert(rc >= 0);
  406a40:	db7a      	blt.n	406b38 <_zbar_symbol_set_free+0x1dc>
  406a42:	b903      	cbnz	r3, 406a46 <_zbar_symbol_set_free+0xea>
        _zbar_symbol_free(sym);
  406a44:	47c0      	blx	r8
}

inline void _zbar_symbol_set_free (zbar_symbol_set_t *syms)
{
    zbar_symbol_t *sym, *next;
    for(sym = syms->head; sym; sym = next) {
  406a46:	b14d      	cbz	r5, 406a5c <_zbar_symbol_set_free+0x100>
typedef int refcnt_t;

static inline int _zbar_refcnt (refcnt_t *cnt,
                                int delta)
{
    int rc = (*cnt += delta);
  406a48:	6aab      	ldr	r3, [r5, #40]	; 0x28
        next = sym->next;
  406a4a:	6aea      	ldr	r2, [r5, #44]	; 0x2c
        sym->next = NULL;
  406a4c:	62ec      	str	r4, [r5, #44]	; 0x2c
  406a4e:	3b01      	subs	r3, #1
    assert(rc >= 0);
  406a50:	2b00      	cmp	r3, #0
typedef int refcnt_t;

static inline int _zbar_refcnt (refcnt_t *cnt,
                                int delta)
{
    int rc = (*cnt += delta);
  406a52:	62ab      	str	r3, [r5, #40]	; 0x28
  406a54:	4628      	mov	r0, r5
    assert(rc >= 0);
  406a56:	db6f      	blt.n	406b38 <_zbar_symbol_set_free+0x1dc>

inline void _zbar_symbol_set_free (zbar_symbol_set_t *syms)
{
    zbar_symbol_t *sym, *next;
    for(sym = syms->head; sym; sym = next) {
        next = sym->next;
  406a58:	4615      	mov	r5, r2
  406a5a:	e7f2      	b.n	406a42 <_zbar_symbol_set_free+0xe6>
        sym->next = NULL;
        _zbar_symbol_refcnt(sym, -1);
    }
    syms->head = NULL;
    free(syms);
  406a5c:	4630      	mov	r0, r6
  406a5e:	4d37      	ldr	r5, [pc, #220]	; (406b3c <_zbar_symbol_set_free+0x1e0>)
  406a60:	47a8      	blx	r5

void _zbar_symbol_free (zbar_symbol_t *sym)
{
    if(sym->syms) {
        zbar_symbol_set_ref(sym->syms, -1);
        sym->syms = NULL;
  406a62:	f8ca 4030 	str.w	r4, [sl, #48]	; 0x30
    }
    if(sym->pts)
  406a66:	f8da 0020 	ldr.w	r0, [sl, #32]
  406a6a:	b100      	cbz	r0, 406a6e <_zbar_symbol_set_free+0x112>
        free(sym->pts);
  406a6c:	47a8      	blx	r5
    if(sym->data_alloc && sym->data)
  406a6e:	f8da 300c 	ldr.w	r3, [sl, #12]
  406a72:	b11b      	cbz	r3, 406a7c <_zbar_symbol_set_free+0x120>
  406a74:	f8da 0014 	ldr.w	r0, [sl, #20]
  406a78:	b100      	cbz	r0, 406a7c <_zbar_symbol_set_free+0x120>
        free(sym->data);
  406a7a:	47a8      	blx	r5
    free(sym);
  406a7c:	4650      	mov	r0, sl
  406a7e:	47a8      	blx	r5
}

inline void _zbar_symbol_set_free (zbar_symbol_set_t *syms)
{
    zbar_symbol_t *sym, *next;
    for(sym = syms->head; sym; sym = next) {
  406a80:	b14f      	cbz	r7, 406a96 <_zbar_symbol_set_free+0x13a>
typedef int refcnt_t;

static inline int _zbar_refcnt (refcnt_t *cnt,
                                int delta)
{
    int rc = (*cnt += delta);
  406a82:	6ab9      	ldr	r1, [r7, #40]	; 0x28
        next = sym->next;
  406a84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
        sym->next = NULL;
  406a86:	62fc      	str	r4, [r7, #44]	; 0x2c
  406a88:	3901      	subs	r1, #1
    assert(rc >= 0);
  406a8a:	2900      	cmp	r1, #0
typedef int refcnt_t;

static inline int _zbar_refcnt (refcnt_t *cnt,
                                int delta)
{
    int rc = (*cnt += delta);
  406a8c:	62b9      	str	r1, [r7, #40]	; 0x28
  406a8e:	46ba      	mov	sl, r7
    assert(rc >= 0);
  406a90:	db52      	blt.n	406b38 <_zbar_symbol_set_free+0x1dc>

inline void _zbar_symbol_set_free (zbar_symbol_set_t *syms)
{
    zbar_symbol_t *sym, *next;
    for(sym = syms->head; sym; sym = next) {
        next = sym->next;
  406a92:	461f      	mov	r7, r3
  406a94:	e7bf      	b.n	406a16 <_zbar_symbol_set_free+0xba>
  406a96:	465f      	mov	r7, fp
        sym->next = NULL;
        _zbar_symbol_refcnt(sym, -1);
    }
    syms->head = NULL;
    free(syms);
  406a98:	9802      	ldr	r0, [sp, #8]
  406a9a:	4d28      	ldr	r5, [pc, #160]	; (406b3c <_zbar_symbol_set_free+0x1e0>)
  406a9c:	47a8      	blx	r5

void _zbar_symbol_free (zbar_symbol_t *sym)
{
    if(sym->syms) {
        zbar_symbol_set_ref(sym->syms, -1);
        sym->syms = NULL;
  406a9e:	f8c9 4030 	str.w	r4, [r9, #48]	; 0x30
    }
    if(sym->pts)
  406aa2:	f8d9 0020 	ldr.w	r0, [r9, #32]
  406aa6:	b100      	cbz	r0, 406aaa <_zbar_symbol_set_free+0x14e>
        free(sym->pts);
  406aa8:	47a8      	blx	r5
    if(sym->data_alloc && sym->data)
  406aaa:	f8d9 300c 	ldr.w	r3, [r9, #12]
  406aae:	b11b      	cbz	r3, 406ab8 <_zbar_symbol_set_free+0x15c>
  406ab0:	f8d9 0014 	ldr.w	r0, [r9, #20]
  406ab4:	b100      	cbz	r0, 406ab8 <_zbar_symbol_set_free+0x15c>
        free(sym->data);
  406ab6:	47a8      	blx	r5
    free(sym);
  406ab8:	4648      	mov	r0, r9
  406aba:	47a8      	blx	r5
}

inline void _zbar_symbol_set_free (zbar_symbol_set_t *syms)
{
    zbar_symbol_t *sym, *next;
    for(sym = syms->head; sym; sym = next) {
  406abc:	b16f      	cbz	r7, 406ada <_zbar_symbol_set_free+0x17e>
typedef int refcnt_t;

static inline int _zbar_refcnt (refcnt_t *cnt,
                                int delta)
{
    int rc = (*cnt += delta);
  406abe:	6abb      	ldr	r3, [r7, #40]	; 0x28
        next = sym->next;
  406ac0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
        sym->next = NULL;
  406ac2:	62fc      	str	r4, [r7, #44]	; 0x2c
  406ac4:	3b01      	subs	r3, #1
    assert(rc >= 0);
  406ac6:	2b00      	cmp	r3, #0
typedef int refcnt_t;

static inline int _zbar_refcnt (refcnt_t *cnt,
                                int delta)
{
    int rc = (*cnt += delta);
  406ac8:	62bb      	str	r3, [r7, #40]	; 0x28
  406aca:	46b9      	mov	r9, r7
    assert(rc >= 0);
  406acc:	db34      	blt.n	406b38 <_zbar_symbol_set_free+0x1dc>

inline void _zbar_symbol_set_free (zbar_symbol_set_t *syms)
{
    zbar_symbol_t *sym, *next;
    for(sym = syms->head; sym; sym = next) {
        next = sym->next;
  406ace:	4617      	mov	r7, r2
  406ad0:	e77b      	b.n	4069ca <_zbar_symbol_set_free+0x6e>
  406ad2:	4d1a      	ldr	r5, [pc, #104]	; (406b3c <_zbar_symbol_set_free+0x1e0>)
  406ad4:	e7c7      	b.n	406a66 <_zbar_symbol_set_free+0x10a>
  406ad6:	4d19      	ldr	r5, [pc, #100]	; (406b3c <_zbar_symbol_set_free+0x1e0>)
  406ad8:	e7c3      	b.n	406a62 <_zbar_symbol_set_free+0x106>
        sym->next = NULL;
        _zbar_symbol_refcnt(sym, -1);
    }
    syms->head = NULL;
    free(syms);
  406ada:	9804      	ldr	r0, [sp, #16]
  406adc:	4c17      	ldr	r4, [pc, #92]	; (406b3c <_zbar_symbol_set_free+0x1e0>)
  406ade:	47a0      	blx	r4

void _zbar_symbol_free (zbar_symbol_t *sym)
{
    if(sym->syms) {
        zbar_symbol_set_ref(sym->syms, -1);
        sym->syms = NULL;
  406ae0:	9a01      	ldr	r2, [sp, #4]
  406ae2:	2300      	movs	r3, #0
  406ae4:	6313      	str	r3, [r2, #48]	; 0x30
  406ae6:	4613      	mov	r3, r2
    }
    if(sym->pts)
  406ae8:	6a18      	ldr	r0, [r3, #32]
  406aea:	b100      	cbz	r0, 406aee <_zbar_symbol_set_free+0x192>
        free(sym->pts);
  406aec:	47a0      	blx	r4
    if(sym->data_alloc && sym->data)
  406aee:	9a01      	ldr	r2, [sp, #4]
  406af0:	68d3      	ldr	r3, [r2, #12]
  406af2:	b113      	cbz	r3, 406afa <_zbar_symbol_set_free+0x19e>
  406af4:	6950      	ldr	r0, [r2, #20]
  406af6:	b100      	cbz	r0, 406afa <_zbar_symbol_set_free+0x19e>
        free(sym->data);
  406af8:	47a0      	blx	r4
    free(sym);
  406afa:	9801      	ldr	r0, [sp, #4]
  406afc:	47a0      	blx	r4
}

inline void _zbar_symbol_set_free (zbar_symbol_set_t *syms)
{
    zbar_symbol_t *sym, *next;
    for(sym = syms->head; sym; sym = next) {
  406afe:	9b03      	ldr	r3, [sp, #12]
  406b00:	b1a3      	cbz	r3, 406b2c <_zbar_symbol_set_free+0x1d0>
typedef int refcnt_t;

static inline int _zbar_refcnt (refcnt_t *cnt,
                                int delta)
{
    int rc = (*cnt += delta);
  406b02:	6a9c      	ldr	r4, [r3, #40]	; 0x28
  406b04:	4618      	mov	r0, r3
  406b06:	3c01      	subs	r4, #1
        next = sym->next;
        sym->next = NULL;
  406b08:	2200      	movs	r2, #0
    assert(rc >= 0);
  406b0a:	4294      	cmp	r4, r2

inline void _zbar_symbol_set_free (zbar_symbol_set_t *syms)
{
    zbar_symbol_t *sym, *next;
    for(sym = syms->head; sym; sym = next) {
        next = sym->next;
  406b0c:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
typedef int refcnt_t;

static inline int _zbar_refcnt (refcnt_t *cnt,
                                int delta)
{
    int rc = (*cnt += delta);
  406b0e:	6284      	str	r4, [r0, #40]	; 0x28
        sym->next = NULL;
  406b10:	62c2      	str	r2, [r0, #44]	; 0x2c
  406b12:	9001      	str	r0, [sp, #4]
    assert(rc >= 0);
  406b14:	db10      	blt.n	406b38 <_zbar_symbol_set_free+0x1dc>

inline void _zbar_symbol_set_free (zbar_symbol_set_t *syms)
{
    zbar_symbol_t *sym, *next;
    for(sym = syms->head; sym; sym = next) {
        next = sym->next;
  406b16:	9303      	str	r3, [sp, #12]
  406b18:	e736      	b.n	406988 <_zbar_symbol_set_free+0x2c>
  406b1a:	4d08      	ldr	r5, [pc, #32]	; (406b3c <_zbar_symbol_set_free+0x1e0>)
  406b1c:	e7c1      	b.n	406aa2 <_zbar_symbol_set_free+0x146>
  406b1e:	4d07      	ldr	r5, [pc, #28]	; (406b3c <_zbar_symbol_set_free+0x1e0>)
  406b20:	e7bd      	b.n	406a9e <_zbar_symbol_set_free+0x142>
  406b22:	4c06      	ldr	r4, [pc, #24]	; (406b3c <_zbar_symbol_set_free+0x1e0>)
  406b24:	9b01      	ldr	r3, [sp, #4]
  406b26:	e7df      	b.n	406ae8 <_zbar_symbol_set_free+0x18c>
  406b28:	4c04      	ldr	r4, [pc, #16]	; (406b3c <_zbar_symbol_set_free+0x1e0>)
  406b2a:	e7d9      	b.n	406ae0 <_zbar_symbol_set_free+0x184>
        sym->next = NULL;
        _zbar_symbol_refcnt(sym, -1);
    }
    syms->head = NULL;
    free(syms);
  406b2c:	9805      	ldr	r0, [sp, #20]
  406b2e:	4b03      	ldr	r3, [pc, #12]	; (406b3c <_zbar_symbol_set_free+0x1e0>)
  406b30:	4798      	blx	r3
}
  406b32:	b007      	add	sp, #28
  406b34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  406b38:	4b01      	ldr	r3, [pc, #4]	; (406b40 <_zbar_symbol_set_free+0x1e4>)
  406b3a:	4798      	blx	r3
  406b3c:	004088bd 	.word	0x004088bd
  406b40:	00406831 	.word	0x00406831
  406b44:	004068b1 	.word	0x004068b1

00406b48 <zbar_symbol_set_ref>:

void zbar_symbol_set_ref (const zbar_symbol_set_t *syms,
                          int delta)
{
  406b48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
typedef int refcnt_t;

static inline int _zbar_refcnt (refcnt_t *cnt,
                                int delta)
{
    int rc = (*cnt += delta);
  406b4c:	6804      	ldr	r4, [r0, #0]
  406b4e:	b083      	sub	sp, #12
  406b50:	440c      	add	r4, r1
    assert(rc >= 0);
  406b52:	2c00      	cmp	r4, #0
  406b54:	9001      	str	r0, [sp, #4]
typedef int refcnt_t;

static inline int _zbar_refcnt (refcnt_t *cnt,
                                int delta)
{
    int rc = (*cnt += delta);
  406b56:	6004      	str	r4, [r0, #0]
    assert(rc >= 0);
  406b58:	f2c0 80af 	blt.w	406cba <zbar_symbol_set_ref+0x172>
    zbar_symbol_set_t *ncsyms = (zbar_symbol_set_t*)syms;
    if(!_zbar_refcnt(&ncsyms->refcnt, delta) && delta <= 0)
  406b5c:	d101      	bne.n	406b62 <zbar_symbol_set_ref+0x1a>
  406b5e:	2900      	cmp	r1, #0
  406b60:	dd02      	ble.n	406b68 <zbar_symbol_set_ref+0x20>
        _zbar_symbol_set_free(ncsyms);
}
  406b62:	b003      	add	sp, #12
  406b64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
}

inline void _zbar_symbol_set_free (zbar_symbol_set_t *syms)
{
    zbar_symbol_t *sym, *next;
    for(sym = syms->head; sym; sym = next) {
  406b68:	9b01      	ldr	r3, [sp, #4]
  406b6a:	689f      	ldr	r7, [r3, #8]
  406b6c:	2f00      	cmp	r7, #0
  406b6e:	f000 809e 	beq.w	406cae <zbar_symbol_set_ref+0x166>
typedef int refcnt_t;

static inline int _zbar_refcnt (refcnt_t *cnt,
                                int delta)
{
    int rc = (*cnt += delta);
  406b72:	6abb      	ldr	r3, [r7, #40]	; 0x28
        next = sym->next;
  406b74:	6afe      	ldr	r6, [r7, #44]	; 0x2c
        sym->next = NULL;
  406b76:	62fc      	str	r4, [r7, #44]	; 0x2c
  406b78:	3b01      	subs	r3, #1
    assert(rc >= 0);
  406b7a:	2b00      	cmp	r3, #0
typedef int refcnt_t;

static inline int _zbar_refcnt (refcnt_t *cnt,
                                int delta)
{
    int rc = (*cnt += delta);
  406b7c:	62bb      	str	r3, [r7, #40]	; 0x28
    assert(rc >= 0);
  406b7e:	f2c0 809c 	blt.w	406cba <zbar_symbol_set_ref+0x172>
  406b82:	f8df 8144 	ldr.w	r8, [pc, #324]	; 406cc8 <zbar_symbol_set_ref+0x180>
}

static inline void _zbar_symbol_refcnt (zbar_symbol_t *sym,
                                        int delta)
{
    if(!_zbar_refcnt(&sym->refcnt, delta) && delta <= 0)
  406b86:	2b00      	cmp	r3, #0
  406b88:	d17e      	bne.n	406c88 <zbar_symbol_set_ref+0x140>
    return((g0 + g1) & 0x1f);
}

void _zbar_symbol_free (zbar_symbol_t *sym)
{
    if(sym->syms) {
  406b8a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
  406b8c:	9200      	str	r2, [sp, #0]
  406b8e:	2a00      	cmp	r2, #0
  406b90:	f000 8089 	beq.w	406ca6 <zbar_symbol_set_ref+0x15e>
  406b94:	4611      	mov	r1, r2
typedef int refcnt_t;

static inline int _zbar_refcnt (refcnt_t *cnt,
                                int delta)
{
    int rc = (*cnt += delta);
  406b96:	6812      	ldr	r2, [r2, #0]
  406b98:	3a01      	subs	r2, #1
    assert(rc >= 0);
  406b9a:	2a00      	cmp	r2, #0
typedef int refcnt_t;

static inline int _zbar_refcnt (refcnt_t *cnt,
                                int delta)
{
    int rc = (*cnt += delta);
  406b9c:	600a      	str	r2, [r1, #0]
    assert(rc >= 0);
  406b9e:	f2c0 808c 	blt.w	406cba <zbar_symbol_set_ref+0x172>

void zbar_symbol_set_ref (const zbar_symbol_set_t *syms,
                          int delta)
{
    zbar_symbol_set_t *ncsyms = (zbar_symbol_set_t*)syms;
    if(!_zbar_refcnt(&ncsyms->refcnt, delta) && delta <= 0)
  406ba2:	f040 8082 	bne.w	406caa <zbar_symbol_set_ref+0x162>
}

inline void _zbar_symbol_set_free (zbar_symbol_set_t *syms)
{
    zbar_symbol_t *sym, *next;
    for(sym = syms->head; sym; sym = next) {
  406ba6:	9a00      	ldr	r2, [sp, #0]
  406ba8:	f8d2 b008 	ldr.w	fp, [r2, #8]
  406bac:	f1bb 0f00 	cmp.w	fp, #0
  406bb0:	d05c      	beq.n	406c6c <zbar_symbol_set_ref+0x124>
typedef int refcnt_t;

static inline int _zbar_refcnt (refcnt_t *cnt,
                                int delta)
{
    int rc = (*cnt += delta);
  406bb2:	f8db 2028 	ldr.w	r2, [fp, #40]	; 0x28
        next = sym->next;
  406bb6:	f8db a02c 	ldr.w	sl, [fp, #44]	; 0x2c
        sym->next = NULL;
  406bba:	f8cb 302c 	str.w	r3, [fp, #44]	; 0x2c
  406bbe:	f102 3eff 	add.w	lr, r2, #4294967295
    assert(rc >= 0);
  406bc2:	f1be 0f00 	cmp.w	lr, #0
typedef int refcnt_t;

static inline int _zbar_refcnt (refcnt_t *cnt,
                                int delta)
{
    int rc = (*cnt += delta);
  406bc6:	f8cb e028 	str.w	lr, [fp, #40]	; 0x28
    assert(rc >= 0);
  406bca:	db76      	blt.n	406cba <zbar_symbol_set_ref+0x172>
  406bcc:	f1be 0f00 	cmp.w	lr, #0
  406bd0:	d139      	bne.n	406c46 <zbar_symbol_set_ref+0xfe>
    return((g0 + g1) & 0x1f);
}

void _zbar_symbol_free (zbar_symbol_t *sym)
{
    if(sym->syms) {
  406bd2:	f8db 5030 	ldr.w	r5, [fp, #48]	; 0x30
  406bd6:	2d00      	cmp	r5, #0
  406bd8:	d061      	beq.n	406c9e <zbar_symbol_set_ref+0x156>
typedef int refcnt_t;

static inline int _zbar_refcnt (refcnt_t *cnt,
                                int delta)
{
    int rc = (*cnt += delta);
  406bda:	682b      	ldr	r3, [r5, #0]
  406bdc:	3b01      	subs	r3, #1
    assert(rc >= 0);
  406bde:	2b00      	cmp	r3, #0
typedef int refcnt_t;

static inline int _zbar_refcnt (refcnt_t *cnt,
                                int delta)
{
    int rc = (*cnt += delta);
  406be0:	602b      	str	r3, [r5, #0]
    assert(rc >= 0);
  406be2:	db6a      	blt.n	406cba <zbar_symbol_set_ref+0x172>

void zbar_symbol_set_ref (const zbar_symbol_set_t *syms,
                          int delta)
{
    zbar_symbol_set_t *ncsyms = (zbar_symbol_set_t*)syms;
    if(!_zbar_refcnt(&ncsyms->refcnt, delta) && delta <= 0)
  406be4:	d15d      	bne.n	406ca2 <zbar_symbol_set_ref+0x15a>
}

inline void _zbar_symbol_set_free (zbar_symbol_set_t *syms)
{
    zbar_symbol_t *sym, *next;
    for(sym = syms->head; sym; sym = next) {
  406be6:	68a8      	ldr	r0, [r5, #8]
  406be8:	b1d8      	cbz	r0, 406c22 <zbar_symbol_set_ref+0xda>
typedef int refcnt_t;

static inline int _zbar_refcnt (refcnt_t *cnt,
                                int delta)
{
    int rc = (*cnt += delta);
  406bea:	6a82      	ldr	r2, [r0, #40]	; 0x28
        next = sym->next;
  406bec:	f8d0 902c 	ldr.w	r9, [r0, #44]	; 0x2c
        sym->next = NULL;
  406bf0:	f8c0 e02c 	str.w	lr, [r0, #44]	; 0x2c
  406bf4:	3a01      	subs	r2, #1
    assert(rc >= 0);
  406bf6:	2a00      	cmp	r2, #0
typedef int refcnt_t;

static inline int _zbar_refcnt (refcnt_t *cnt,
                                int delta)
{
    int rc = (*cnt += delta);
  406bf8:	6282      	str	r2, [r0, #40]	; 0x28
    assert(rc >= 0);
  406bfa:	db5e      	blt.n	406cba <zbar_symbol_set_ref+0x172>
  406bfc:	b902      	cbnz	r2, 406c00 <zbar_symbol_set_ref+0xb8>
        _zbar_symbol_free(sym);
  406bfe:	47c0      	blx	r8
}

inline void _zbar_symbol_set_free (zbar_symbol_set_t *syms)
{
    zbar_symbol_t *sym, *next;
    for(sym = syms->head; sym; sym = next) {
  406c00:	f1b9 0f00 	cmp.w	r9, #0
  406c04:	d00d      	beq.n	406c22 <zbar_symbol_set_ref+0xda>
typedef int refcnt_t;

static inline int _zbar_refcnt (refcnt_t *cnt,
                                int delta)
{
    int rc = (*cnt += delta);
  406c06:	f8d9 2028 	ldr.w	r2, [r9, #40]	; 0x28
        next = sym->next;
  406c0a:	f8d9 302c 	ldr.w	r3, [r9, #44]	; 0x2c
        sym->next = NULL;
  406c0e:	f8c9 402c 	str.w	r4, [r9, #44]	; 0x2c
  406c12:	3a01      	subs	r2, #1
    assert(rc >= 0);
  406c14:	2a00      	cmp	r2, #0
typedef int refcnt_t;

static inline int _zbar_refcnt (refcnt_t *cnt,
                                int delta)
{
    int rc = (*cnt += delta);
  406c16:	f8c9 2028 	str.w	r2, [r9, #40]	; 0x28
  406c1a:	4648      	mov	r0, r9
    assert(rc >= 0);
  406c1c:	db4d      	blt.n	406cba <zbar_symbol_set_ref+0x172>

inline void _zbar_symbol_set_free (zbar_symbol_set_t *syms)
{
    zbar_symbol_t *sym, *next;
    for(sym = syms->head; sym; sym = next) {
        next = sym->next;
  406c1e:	4699      	mov	r9, r3
  406c20:	e7ec      	b.n	406bfc <zbar_symbol_set_ref+0xb4>
        sym->next = NULL;
        _zbar_symbol_refcnt(sym, -1);
    }
    syms->head = NULL;
    free(syms);
  406c22:	4628      	mov	r0, r5
  406c24:	4d26      	ldr	r5, [pc, #152]	; (406cc0 <zbar_symbol_set_ref+0x178>)
  406c26:	47a8      	blx	r5

void _zbar_symbol_free (zbar_symbol_t *sym)
{
    if(sym->syms) {
        zbar_symbol_set_ref(sym->syms, -1);
        sym->syms = NULL;
  406c28:	f8cb 4030 	str.w	r4, [fp, #48]	; 0x30
    }
    if(sym->pts)
  406c2c:	f8db 0020 	ldr.w	r0, [fp, #32]
  406c30:	b100      	cbz	r0, 406c34 <zbar_symbol_set_ref+0xec>
        free(sym->pts);
  406c32:	47a8      	blx	r5
    if(sym->data_alloc && sym->data)
  406c34:	f8db 300c 	ldr.w	r3, [fp, #12]
  406c38:	b11b      	cbz	r3, 406c42 <zbar_symbol_set_ref+0xfa>
  406c3a:	f8db 0014 	ldr.w	r0, [fp, #20]
  406c3e:	b100      	cbz	r0, 406c42 <zbar_symbol_set_ref+0xfa>
        free(sym->data);
  406c40:	47a8      	blx	r5
    free(sym);
  406c42:	4658      	mov	r0, fp
  406c44:	47a8      	blx	r5
}

inline void _zbar_symbol_set_free (zbar_symbol_set_t *syms)
{
    zbar_symbol_t *sym, *next;
    for(sym = syms->head; sym; sym = next) {
  406c46:	f1ba 0f00 	cmp.w	sl, #0
  406c4a:	d00f      	beq.n	406c6c <zbar_symbol_set_ref+0x124>
typedef int refcnt_t;

static inline int _zbar_refcnt (refcnt_t *cnt,
                                int delta)
{
    int rc = (*cnt += delta);
  406c4c:	f8da 3028 	ldr.w	r3, [sl, #40]	; 0x28
        next = sym->next;
  406c50:	f8da 202c 	ldr.w	r2, [sl, #44]	; 0x2c
        sym->next = NULL;
  406c54:	f8ca 402c 	str.w	r4, [sl, #44]	; 0x2c
  406c58:	f103 3eff 	add.w	lr, r3, #4294967295
    assert(rc >= 0);
  406c5c:	f1be 0f00 	cmp.w	lr, #0
typedef int refcnt_t;

static inline int _zbar_refcnt (refcnt_t *cnt,
                                int delta)
{
    int rc = (*cnt += delta);
  406c60:	f8ca e028 	str.w	lr, [sl, #40]	; 0x28
  406c64:	46d3      	mov	fp, sl
    assert(rc >= 0);
  406c66:	db28      	blt.n	406cba <zbar_symbol_set_ref+0x172>

inline void _zbar_symbol_set_free (zbar_symbol_set_t *syms)
{
    zbar_symbol_t *sym, *next;
    for(sym = syms->head; sym; sym = next) {
        next = sym->next;
  406c68:	4692      	mov	sl, r2
  406c6a:	e7af      	b.n	406bcc <zbar_symbol_set_ref+0x84>
        sym->next = NULL;
        _zbar_symbol_refcnt(sym, -1);
    }
    syms->head = NULL;
    free(syms);
  406c6c:	9800      	ldr	r0, [sp, #0]
  406c6e:	4d14      	ldr	r5, [pc, #80]	; (406cc0 <zbar_symbol_set_ref+0x178>)
  406c70:	47a8      	blx	r5

void _zbar_symbol_free (zbar_symbol_t *sym)
{
    if(sym->syms) {
        zbar_symbol_set_ref(sym->syms, -1);
        sym->syms = NULL;
  406c72:	633c      	str	r4, [r7, #48]	; 0x30
    }
    if(sym->pts)
  406c74:	6a38      	ldr	r0, [r7, #32]
  406c76:	b100      	cbz	r0, 406c7a <zbar_symbol_set_ref+0x132>
        free(sym->pts);
  406c78:	47a8      	blx	r5
    if(sym->data_alloc && sym->data)
  406c7a:	68fb      	ldr	r3, [r7, #12]
  406c7c:	b113      	cbz	r3, 406c84 <zbar_symbol_set_ref+0x13c>
  406c7e:	6978      	ldr	r0, [r7, #20]
  406c80:	b100      	cbz	r0, 406c84 <zbar_symbol_set_ref+0x13c>
        free(sym->data);
  406c82:	47a8      	blx	r5
    free(sym);
  406c84:	4638      	mov	r0, r7
  406c86:	47a8      	blx	r5
}

inline void _zbar_symbol_set_free (zbar_symbol_set_t *syms)
{
    zbar_symbol_t *sym, *next;
    for(sym = syms->head; sym; sym = next) {
  406c88:	b18e      	cbz	r6, 406cae <zbar_symbol_set_ref+0x166>
typedef int refcnt_t;

static inline int _zbar_refcnt (refcnt_t *cnt,
                                int delta)
{
    int rc = (*cnt += delta);
  406c8a:	6ab3      	ldr	r3, [r6, #40]	; 0x28
        next = sym->next;
  406c8c:	6af2      	ldr	r2, [r6, #44]	; 0x2c
        sym->next = NULL;
  406c8e:	62f4      	str	r4, [r6, #44]	; 0x2c
  406c90:	3b01      	subs	r3, #1
    assert(rc >= 0);
  406c92:	2b00      	cmp	r3, #0
typedef int refcnt_t;

static inline int _zbar_refcnt (refcnt_t *cnt,
                                int delta)
{
    int rc = (*cnt += delta);
  406c94:	62b3      	str	r3, [r6, #40]	; 0x28
  406c96:	4637      	mov	r7, r6
    assert(rc >= 0);
  406c98:	db0f      	blt.n	406cba <zbar_symbol_set_ref+0x172>

inline void _zbar_symbol_set_free (zbar_symbol_set_t *syms)
{
    zbar_symbol_t *sym, *next;
    for(sym = syms->head; sym; sym = next) {
        next = sym->next;
  406c9a:	4616      	mov	r6, r2
  406c9c:	e773      	b.n	406b86 <zbar_symbol_set_ref+0x3e>
  406c9e:	4d08      	ldr	r5, [pc, #32]	; (406cc0 <zbar_symbol_set_ref+0x178>)
  406ca0:	e7c4      	b.n	406c2c <zbar_symbol_set_ref+0xe4>
  406ca2:	4d07      	ldr	r5, [pc, #28]	; (406cc0 <zbar_symbol_set_ref+0x178>)
  406ca4:	e7c0      	b.n	406c28 <zbar_symbol_set_ref+0xe0>
  406ca6:	4d06      	ldr	r5, [pc, #24]	; (406cc0 <zbar_symbol_set_ref+0x178>)
  406ca8:	e7e4      	b.n	406c74 <zbar_symbol_set_ref+0x12c>
  406caa:	4d05      	ldr	r5, [pc, #20]	; (406cc0 <zbar_symbol_set_ref+0x178>)
  406cac:	e7e1      	b.n	406c72 <zbar_symbol_set_ref+0x12a>
        sym->next = NULL;
        _zbar_symbol_refcnt(sym, -1);
    }
    syms->head = NULL;
    free(syms);
  406cae:	9801      	ldr	r0, [sp, #4]
  406cb0:	4b03      	ldr	r3, [pc, #12]	; (406cc0 <zbar_symbol_set_ref+0x178>)
  406cb2:	4798      	blx	r3
                          int delta)
{
    zbar_symbol_set_t *ncsyms = (zbar_symbol_set_t*)syms;
    if(!_zbar_refcnt(&ncsyms->refcnt, delta) && delta <= 0)
        _zbar_symbol_set_free(ncsyms);
}
  406cb4:	b003      	add	sp, #12
  406cb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  406cba:	4b02      	ldr	r3, [pc, #8]	; (406cc4 <zbar_symbol_set_ref+0x17c>)
  406cbc:	4798      	blx	r3
  406cbe:	bf00      	nop
  406cc0:	004088bd 	.word	0x004088bd
  406cc4:	00406831 	.word	0x00406831
  406cc8:	004068b1 	.word	0x004068b1

00406ccc <__gedf2>:
  406ccc:	f04f 3cff 	mov.w	ip, #4294967295
  406cd0:	e006      	b.n	406ce0 <__cmpdf2+0x4>
  406cd2:	bf00      	nop

00406cd4 <__ledf2>:
  406cd4:	f04f 0c01 	mov.w	ip, #1
  406cd8:	e002      	b.n	406ce0 <__cmpdf2+0x4>
  406cda:	bf00      	nop

00406cdc <__cmpdf2>:
  406cdc:	f04f 0c01 	mov.w	ip, #1
  406ce0:	f84d cd04 	str.w	ip, [sp, #-4]!
  406ce4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  406ce8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  406cec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  406cf0:	bf18      	it	ne
  406cf2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
  406cf6:	d01b      	beq.n	406d30 <__cmpdf2+0x54>
  406cf8:	b001      	add	sp, #4
  406cfa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
  406cfe:	bf0c      	ite	eq
  406d00:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
  406d04:	ea91 0f03 	teqne	r1, r3
  406d08:	bf02      	ittt	eq
  406d0a:	ea90 0f02 	teqeq	r0, r2
  406d0e:	2000      	moveq	r0, #0
  406d10:	4770      	bxeq	lr
  406d12:	f110 0f00 	cmn.w	r0, #0
  406d16:	ea91 0f03 	teq	r1, r3
  406d1a:	bf58      	it	pl
  406d1c:	4299      	cmppl	r1, r3
  406d1e:	bf08      	it	eq
  406d20:	4290      	cmpeq	r0, r2
  406d22:	bf2c      	ite	cs
  406d24:	17d8      	asrcs	r0, r3, #31
  406d26:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
  406d2a:	f040 0001 	orr.w	r0, r0, #1
  406d2e:	4770      	bx	lr
  406d30:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  406d34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  406d38:	d102      	bne.n	406d40 <__cmpdf2+0x64>
  406d3a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
  406d3e:	d107      	bne.n	406d50 <__cmpdf2+0x74>
  406d40:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  406d44:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  406d48:	d1d6      	bne.n	406cf8 <__cmpdf2+0x1c>
  406d4a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
  406d4e:	d0d3      	beq.n	406cf8 <__cmpdf2+0x1c>
  406d50:	f85d 0b04 	ldr.w	r0, [sp], #4
  406d54:	4770      	bx	lr
  406d56:	bf00      	nop

00406d58 <__aeabi_cdrcmple>:
  406d58:	4684      	mov	ip, r0
  406d5a:	4610      	mov	r0, r2
  406d5c:	4662      	mov	r2, ip
  406d5e:	468c      	mov	ip, r1
  406d60:	4619      	mov	r1, r3
  406d62:	4663      	mov	r3, ip
  406d64:	e000      	b.n	406d68 <__aeabi_cdcmpeq>
  406d66:	bf00      	nop

00406d68 <__aeabi_cdcmpeq>:
  406d68:	b501      	push	{r0, lr}
  406d6a:	f7ff ffb7 	bl	406cdc <__cmpdf2>
  406d6e:	2800      	cmp	r0, #0
  406d70:	bf48      	it	mi
  406d72:	f110 0f00 	cmnmi.w	r0, #0
  406d76:	bd01      	pop	{r0, pc}

00406d78 <__aeabi_dcmpeq>:
  406d78:	f84d ed08 	str.w	lr, [sp, #-8]!
  406d7c:	f7ff fff4 	bl	406d68 <__aeabi_cdcmpeq>
  406d80:	bf0c      	ite	eq
  406d82:	2001      	moveq	r0, #1
  406d84:	2000      	movne	r0, #0
  406d86:	f85d fb08 	ldr.w	pc, [sp], #8
  406d8a:	bf00      	nop

00406d8c <__aeabi_dcmplt>:
  406d8c:	f84d ed08 	str.w	lr, [sp, #-8]!
  406d90:	f7ff ffea 	bl	406d68 <__aeabi_cdcmpeq>
  406d94:	bf34      	ite	cc
  406d96:	2001      	movcc	r0, #1
  406d98:	2000      	movcs	r0, #0
  406d9a:	f85d fb08 	ldr.w	pc, [sp], #8
  406d9e:	bf00      	nop

00406da0 <__aeabi_dcmple>:
  406da0:	f84d ed08 	str.w	lr, [sp, #-8]!
  406da4:	f7ff ffe0 	bl	406d68 <__aeabi_cdcmpeq>
  406da8:	bf94      	ite	ls
  406daa:	2001      	movls	r0, #1
  406dac:	2000      	movhi	r0, #0
  406dae:	f85d fb08 	ldr.w	pc, [sp], #8
  406db2:	bf00      	nop

00406db4 <__aeabi_dcmpge>:
  406db4:	f84d ed08 	str.w	lr, [sp, #-8]!
  406db8:	f7ff ffce 	bl	406d58 <__aeabi_cdrcmple>
  406dbc:	bf94      	ite	ls
  406dbe:	2001      	movls	r0, #1
  406dc0:	2000      	movhi	r0, #0
  406dc2:	f85d fb08 	ldr.w	pc, [sp], #8
  406dc6:	bf00      	nop

00406dc8 <__aeabi_dcmpgt>:
  406dc8:	f84d ed08 	str.w	lr, [sp, #-8]!
  406dcc:	f7ff ffc4 	bl	406d58 <__aeabi_cdrcmple>
  406dd0:	bf34      	ite	cc
  406dd2:	2001      	movcc	r0, #1
  406dd4:	2000      	movcs	r0, #0
  406dd6:	f85d fb08 	ldr.w	pc, [sp], #8
  406dda:	bf00      	nop

00406ddc <selfrel_offset31>:
  406ddc:	6803      	ldr	r3, [r0, #0]
  406dde:	005a      	lsls	r2, r3, #1
  406de0:	bf4c      	ite	mi
  406de2:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
  406de6:	f023 4300 	bicpl.w	r3, r3, #2147483648	; 0x80000000
  406dea:	4418      	add	r0, r3
  406dec:	4770      	bx	lr
  406dee:	bf00      	nop

00406df0 <search_EIT_table>:
  406df0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  406df4:	b083      	sub	sp, #12
  406df6:	b399      	cbz	r1, 406e60 <search_EIT_table+0x70>
  406df8:	1e4b      	subs	r3, r1, #1
  406dfa:	4617      	mov	r7, r2
  406dfc:	4605      	mov	r5, r0
  406dfe:	9301      	str	r3, [sp, #4]
  406e00:	4698      	mov	r8, r3
  406e02:	2600      	movs	r6, #0
  406e04:	eb06 0408 	add.w	r4, r6, r8
  406e08:	eb04 74d4 	add.w	r4, r4, r4, lsr #31
  406e0c:	1064      	asrs	r4, r4, #1
  406e0e:	ea4f 0ac4 	mov.w	sl, r4, lsl #3
  406e12:	eb05 0b0a 	add.w	fp, r5, sl
  406e16:	4658      	mov	r0, fp
  406e18:	f7ff ffe0 	bl	406ddc <selfrel_offset31>
  406e1c:	9b01      	ldr	r3, [sp, #4]
  406e1e:	4681      	mov	r9, r0
  406e20:	42a3      	cmp	r3, r4
  406e22:	f10a 0008 	add.w	r0, sl, #8
  406e26:	4428      	add	r0, r5
  406e28:	d00e      	beq.n	406e48 <search_EIT_table+0x58>
  406e2a:	f7ff ffd7 	bl	406ddc <selfrel_offset31>
  406e2e:	45b9      	cmp	r9, r7
  406e30:	f100 30ff 	add.w	r0, r0, #4294967295
  406e34:	d904      	bls.n	406e40 <search_EIT_table+0x50>
  406e36:	42b4      	cmp	r4, r6
  406e38:	d00c      	beq.n	406e54 <search_EIT_table+0x64>
  406e3a:	f104 38ff 	add.w	r8, r4, #4294967295
  406e3e:	e7e1      	b.n	406e04 <search_EIT_table+0x14>
  406e40:	42b8      	cmp	r0, r7
  406e42:	d203      	bcs.n	406e4c <search_EIT_table+0x5c>
  406e44:	1c66      	adds	r6, r4, #1
  406e46:	e7dd      	b.n	406e04 <search_EIT_table+0x14>
  406e48:	45b9      	cmp	r9, r7
  406e4a:	d8f4      	bhi.n	406e36 <search_EIT_table+0x46>
  406e4c:	4658      	mov	r0, fp
  406e4e:	b003      	add	sp, #12
  406e50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  406e54:	f04f 0b00 	mov.w	fp, #0
  406e58:	4658      	mov	r0, fp
  406e5a:	b003      	add	sp, #12
  406e5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  406e60:	468b      	mov	fp, r1
  406e62:	4658      	mov	r0, fp
  406e64:	b003      	add	sp, #12
  406e66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  406e6a:	bf00      	nop

00406e6c <__gnu_unwind_get_pr_addr>:
  406e6c:	2801      	cmp	r0, #1
  406e6e:	d007      	beq.n	406e80 <__gnu_unwind_get_pr_addr+0x14>
  406e70:	2802      	cmp	r0, #2
  406e72:	d007      	beq.n	406e84 <__gnu_unwind_get_pr_addr+0x18>
  406e74:	4b04      	ldr	r3, [pc, #16]	; (406e88 <__gnu_unwind_get_pr_addr+0x1c>)
  406e76:	2800      	cmp	r0, #0
  406e78:	bf0c      	ite	eq
  406e7a:	4618      	moveq	r0, r3
  406e7c:	2000      	movne	r0, #0
  406e7e:	4770      	bx	lr
  406e80:	4802      	ldr	r0, [pc, #8]	; (406e8c <__gnu_unwind_get_pr_addr+0x20>)
  406e82:	4770      	bx	lr
  406e84:	4802      	ldr	r0, [pc, #8]	; (406e90 <__gnu_unwind_get_pr_addr+0x24>)
  406e86:	4770      	bx	lr
  406e88:	00407579 	.word	0x00407579
  406e8c:	0040757d 	.word	0x0040757d
  406e90:	00407581 	.word	0x00407581

00406e94 <get_eit_entry>:
  406e94:	b530      	push	{r4, r5, lr}
  406e96:	4b24      	ldr	r3, [pc, #144]	; (406f28 <get_eit_entry+0x94>)
  406e98:	b083      	sub	sp, #12
  406e9a:	4604      	mov	r4, r0
  406e9c:	1e8d      	subs	r5, r1, #2
  406e9e:	b37b      	cbz	r3, 406f00 <get_eit_entry+0x6c>
  406ea0:	4628      	mov	r0, r5
  406ea2:	a901      	add	r1, sp, #4
  406ea4:	f3af 8000 	nop.w
  406ea8:	b320      	cbz	r0, 406ef4 <get_eit_entry+0x60>
  406eaa:	9901      	ldr	r1, [sp, #4]
  406eac:	462a      	mov	r2, r5
  406eae:	f7ff ff9f 	bl	406df0 <search_EIT_table>
  406eb2:	4605      	mov	r5, r0
  406eb4:	b1f0      	cbz	r0, 406ef4 <get_eit_entry+0x60>
  406eb6:	f7ff ff91 	bl	406ddc <selfrel_offset31>
  406eba:	686b      	ldr	r3, [r5, #4]
  406ebc:	64a0      	str	r0, [r4, #72]	; 0x48
  406ebe:	2b01      	cmp	r3, #1
  406ec0:	d012      	beq.n	406ee8 <get_eit_entry+0x54>
  406ec2:	2b00      	cmp	r3, #0
  406ec4:	f105 0004 	add.w	r0, r5, #4
  406ec8:	db20      	blt.n	406f0c <get_eit_entry+0x78>
  406eca:	f7ff ff87 	bl	406ddc <selfrel_offset31>
  406ece:	2300      	movs	r3, #0
  406ed0:	64e0      	str	r0, [r4, #76]	; 0x4c
  406ed2:	6523      	str	r3, [r4, #80]	; 0x50
  406ed4:	6803      	ldr	r3, [r0, #0]
  406ed6:	2b00      	cmp	r3, #0
  406ed8:	db1c      	blt.n	406f14 <get_eit_entry+0x80>
  406eda:	f7ff ff7f 	bl	406ddc <selfrel_offset31>
  406ede:	2300      	movs	r3, #0
  406ee0:	6120      	str	r0, [r4, #16]
  406ee2:	4618      	mov	r0, r3
  406ee4:	b003      	add	sp, #12
  406ee6:	bd30      	pop	{r4, r5, pc}
  406ee8:	2300      	movs	r3, #0
  406eea:	6123      	str	r3, [r4, #16]
  406eec:	2305      	movs	r3, #5
  406eee:	4618      	mov	r0, r3
  406ef0:	b003      	add	sp, #12
  406ef2:	bd30      	pop	{r4, r5, pc}
  406ef4:	2300      	movs	r3, #0
  406ef6:	6123      	str	r3, [r4, #16]
  406ef8:	2309      	movs	r3, #9
  406efa:	4618      	mov	r0, r3
  406efc:	b003      	add	sp, #12
  406efe:	bd30      	pop	{r4, r5, pc}
  406f00:	490a      	ldr	r1, [pc, #40]	; (406f2c <get_eit_entry+0x98>)
  406f02:	480b      	ldr	r0, [pc, #44]	; (406f30 <get_eit_entry+0x9c>)
  406f04:	1a09      	subs	r1, r1, r0
  406f06:	10c9      	asrs	r1, r1, #3
  406f08:	9101      	str	r1, [sp, #4]
  406f0a:	e7cf      	b.n	406eac <get_eit_entry+0x18>
  406f0c:	2301      	movs	r3, #1
  406f0e:	64e0      	str	r0, [r4, #76]	; 0x4c
  406f10:	6523      	str	r3, [r4, #80]	; 0x50
  406f12:	e7df      	b.n	406ed4 <get_eit_entry+0x40>
  406f14:	f3c3 6003 	ubfx	r0, r3, #24, #4
  406f18:	f7ff ffa8 	bl	406e6c <__gnu_unwind_get_pr_addr>
  406f1c:	2800      	cmp	r0, #0
  406f1e:	6120      	str	r0, [r4, #16]
  406f20:	bf0c      	ite	eq
  406f22:	2309      	moveq	r3, #9
  406f24:	2300      	movne	r3, #0
  406f26:	e7dc      	b.n	406ee2 <get_eit_entry+0x4e>
  406f28:	00000000 	.word	0x00000000
  406f2c:	00411e5c 	.word	0x00411e5c
  406f30:	00411d94 	.word	0x00411d94

00406f34 <restore_non_core_regs>:
  406f34:	6803      	ldr	r3, [r0, #0]
  406f36:	07da      	lsls	r2, r3, #31
  406f38:	b510      	push	{r4, lr}
  406f3a:	4604      	mov	r4, r0
  406f3c:	d406      	bmi.n	406f4c <restore_non_core_regs+0x18>
  406f3e:	079b      	lsls	r3, r3, #30
  406f40:	f100 0048 	add.w	r0, r0, #72	; 0x48
  406f44:	d509      	bpl.n	406f5a <restore_non_core_regs+0x26>
  406f46:	f000 fc85 	bl	407854 <__gnu_Unwind_Restore_VFP_D>
  406f4a:	6823      	ldr	r3, [r4, #0]
  406f4c:	0759      	lsls	r1, r3, #29
  406f4e:	d509      	bpl.n	406f64 <restore_non_core_regs+0x30>
  406f50:	071a      	lsls	r2, r3, #28
  406f52:	d50e      	bpl.n	406f72 <restore_non_core_regs+0x3e>
  406f54:	06db      	lsls	r3, r3, #27
  406f56:	d513      	bpl.n	406f80 <restore_non_core_regs+0x4c>
  406f58:	bd10      	pop	{r4, pc}
  406f5a:	f000 fc73 	bl	407844 <__gnu_Unwind_Restore_VFP>
  406f5e:	6823      	ldr	r3, [r4, #0]
  406f60:	0759      	lsls	r1, r3, #29
  406f62:	d4f5      	bmi.n	406f50 <restore_non_core_regs+0x1c>
  406f64:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
  406f68:	f000 fc7c 	bl	407864 <__gnu_Unwind_Restore_VFP_D_16_to_31>
  406f6c:	6823      	ldr	r3, [r4, #0]
  406f6e:	071a      	lsls	r2, r3, #28
  406f70:	d4f0      	bmi.n	406f54 <restore_non_core_regs+0x20>
  406f72:	f504 70a8 	add.w	r0, r4, #336	; 0x150
  406f76:	f000 fc7d 	bl	407874 <__gnu_Unwind_Restore_WMMXD>
  406f7a:	6823      	ldr	r3, [r4, #0]
  406f7c:	06db      	lsls	r3, r3, #27
  406f7e:	d4eb      	bmi.n	406f58 <restore_non_core_regs+0x24>
  406f80:	f504 70e8 	add.w	r0, r4, #464	; 0x1d0
  406f84:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  406f88:	f000 bcb8 	b.w	4078fc <__gnu_Unwind_Restore_WMMXC>

00406f8c <_Unwind_decode_typeinfo_ptr.isra.0>:
  406f8c:	6803      	ldr	r3, [r0, #0]
  406f8e:	b10b      	cbz	r3, 406f94 <_Unwind_decode_typeinfo_ptr.isra.0+0x8>
  406f90:	4418      	add	r0, r3
  406f92:	4770      	bx	lr
  406f94:	4618      	mov	r0, r3
  406f96:	4770      	bx	lr

00406f98 <__gnu_unwind_24bit.isra.1>:
  406f98:	2009      	movs	r0, #9
  406f9a:	4770      	bx	lr

00406f9c <_Unwind_DebugHook>:
  406f9c:	4770      	bx	lr
  406f9e:	bf00      	nop

00406fa0 <unwind_phase2>:
  406fa0:	b570      	push	{r4, r5, r6, lr}
  406fa2:	4604      	mov	r4, r0
  406fa4:	460d      	mov	r5, r1
  406fa6:	e008      	b.n	406fba <unwind_phase2+0x1a>
  406fa8:	6c2b      	ldr	r3, [r5, #64]	; 0x40
  406faa:	6163      	str	r3, [r4, #20]
  406fac:	2001      	movs	r0, #1
  406fae:	6923      	ldr	r3, [r4, #16]
  406fb0:	4621      	mov	r1, r4
  406fb2:	462a      	mov	r2, r5
  406fb4:	4798      	blx	r3
  406fb6:	2808      	cmp	r0, #8
  406fb8:	d108      	bne.n	406fcc <unwind_phase2+0x2c>
  406fba:	4620      	mov	r0, r4
  406fbc:	6c29      	ldr	r1, [r5, #64]	; 0x40
  406fbe:	f7ff ff69 	bl	406e94 <get_eit_entry>
  406fc2:	4606      	mov	r6, r0
  406fc4:	2800      	cmp	r0, #0
  406fc6:	d0ef      	beq.n	406fa8 <unwind_phase2+0x8>
  406fc8:	f000 fec4 	bl	407d54 <abort>
  406fcc:	2807      	cmp	r0, #7
  406fce:	d1fb      	bne.n	406fc8 <unwind_phase2+0x28>
  406fd0:	4630      	mov	r0, r6
  406fd2:	6c29      	ldr	r1, [r5, #64]	; 0x40
  406fd4:	f7ff ffe2 	bl	406f9c <_Unwind_DebugHook>
  406fd8:	1d28      	adds	r0, r5, #4
  406fda:	f000 fc27 	bl	40782c <__restore_core_regs>
  406fde:	bf00      	nop

00406fe0 <unwind_phase2_forced>:
  406fe0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  406fe4:	1d0c      	adds	r4, r1, #4
  406fe6:	4606      	mov	r6, r0
  406fe8:	4617      	mov	r7, r2
  406fea:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
  406fec:	f5ad 7d72 	sub.w	sp, sp, #968	; 0x3c8
  406ff0:	ad03      	add	r5, sp, #12
  406ff2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
  406ff4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
  406ff6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
  406ff8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
  406ffa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
  406ffc:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
  407000:	ac02      	add	r4, sp, #8
  407002:	f04f 0e00 	mov.w	lr, #0
  407006:	f8d6 800c 	ldr.w	r8, [r6, #12]
  40700a:	f8d6 9018 	ldr.w	r9, [r6, #24]
  40700e:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
  407012:	4630      	mov	r0, r6
  407014:	6c21      	ldr	r1, [r4, #64]	; 0x40
  407016:	f8c4 e000 	str.w	lr, [r4]
  40701a:	f7ff ff3b 	bl	406e94 <get_eit_entry>
  40701e:	2f00      	cmp	r7, #0
  407020:	4605      	mov	r5, r0
  407022:	bf0c      	ite	eq
  407024:	2709      	moveq	r7, #9
  407026:	270a      	movne	r7, #10
  407028:	b17d      	cbz	r5, 40704a <unwind_phase2_forced+0x6a>
  40702a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  40702c:	f047 0110 	orr.w	r1, r7, #16
  407030:	e88d 0210 	stmia.w	sp, {r4, r9}
  407034:	2001      	movs	r0, #1
  407036:	6463      	str	r3, [r4, #68]	; 0x44
  407038:	4632      	mov	r2, r6
  40703a:	4633      	mov	r3, r6
  40703c:	47c0      	blx	r8
  40703e:	bb78      	cbnz	r0, 4070a0 <unwind_phase2_forced+0xc0>
  407040:	4628      	mov	r0, r5
  407042:	f50d 7d72 	add.w	sp, sp, #968	; 0x3c8
  407046:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40704a:	6c23      	ldr	r3, [r4, #64]	; 0x40
  40704c:	6173      	str	r3, [r6, #20]
  40704e:	4621      	mov	r1, r4
  407050:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
  407054:	a87a      	add	r0, sp, #488	; 0x1e8
  407056:	f001 ff47 	bl	408ee8 <memcpy>
  40705a:	6933      	ldr	r3, [r6, #16]
  40705c:	4631      	mov	r1, r6
  40705e:	aa7a      	add	r2, sp, #488	; 0x1e8
  407060:	4638      	mov	r0, r7
  407062:	4798      	blx	r3
  407064:	9b88      	ldr	r3, [sp, #544]	; 0x220
  407066:	4682      	mov	sl, r0
  407068:	e88d 0210 	stmia.w	sp, {r4, r9}
  40706c:	4639      	mov	r1, r7
  40706e:	6463      	str	r3, [r4, #68]	; 0x44
  407070:	2001      	movs	r0, #1
  407072:	4632      	mov	r2, r6
  407074:	4633      	mov	r3, r6
  407076:	47c0      	blx	r8
  407078:	b990      	cbnz	r0, 4070a0 <unwind_phase2_forced+0xc0>
  40707a:	4620      	mov	r0, r4
  40707c:	a97a      	add	r1, sp, #488	; 0x1e8
  40707e:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
  407082:	f001 ff31 	bl	408ee8 <memcpy>
  407086:	f1ba 0f08 	cmp.w	sl, #8
  40708a:	d106      	bne.n	40709a <unwind_phase2_forced+0xba>
  40708c:	4630      	mov	r0, r6
  40708e:	6c21      	ldr	r1, [r4, #64]	; 0x40
  407090:	f7ff ff00 	bl	406e94 <get_eit_entry>
  407094:	2709      	movs	r7, #9
  407096:	4605      	mov	r5, r0
  407098:	e7c6      	b.n	407028 <unwind_phase2_forced+0x48>
  40709a:	f1ba 0f07 	cmp.w	sl, #7
  40709e:	d004      	beq.n	4070aa <unwind_phase2_forced+0xca>
  4070a0:	2009      	movs	r0, #9
  4070a2:	f50d 7d72 	add.w	sp, sp, #968	; 0x3c8
  4070a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4070aa:	4628      	mov	r0, r5
  4070ac:	6c21      	ldr	r1, [r4, #64]	; 0x40
  4070ae:	f7ff ff75 	bl	406f9c <_Unwind_DebugHook>
  4070b2:	a803      	add	r0, sp, #12
  4070b4:	f000 fbba 	bl	40782c <__restore_core_regs>

004070b8 <_Unwind_GetCFA>:
  4070b8:	6c40      	ldr	r0, [r0, #68]	; 0x44
  4070ba:	4770      	bx	lr

004070bc <__gnu_Unwind_RaiseException>:
  4070bc:	b5f0      	push	{r4, r5, r6, r7, lr}
  4070be:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
  4070c0:	640b      	str	r3, [r1, #64]	; 0x40
  4070c2:	1d0e      	adds	r6, r1, #4
  4070c4:	460f      	mov	r7, r1
  4070c6:	4604      	mov	r4, r0
  4070c8:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
  4070ca:	b0f9      	sub	sp, #484	; 0x1e4
  4070cc:	ad01      	add	r5, sp, #4
  4070ce:	c50f      	stmia	r5!, {r0, r1, r2, r3}
  4070d0:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
  4070d2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
  4070d4:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
  4070d6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
  4070d8:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
  4070dc:	f04f 36ff 	mov.w	r6, #4294967295
  4070e0:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
  4070e4:	9600      	str	r6, [sp, #0]
  4070e6:	e006      	b.n	4070f6 <__gnu_Unwind_RaiseException+0x3a>
  4070e8:	6923      	ldr	r3, [r4, #16]
  4070ea:	4621      	mov	r1, r4
  4070ec:	466a      	mov	r2, sp
  4070ee:	4798      	blx	r3
  4070f0:	2808      	cmp	r0, #8
  4070f2:	4605      	mov	r5, r0
  4070f4:	d108      	bne.n	407108 <__gnu_Unwind_RaiseException+0x4c>
  4070f6:	4620      	mov	r0, r4
  4070f8:	9910      	ldr	r1, [sp, #64]	; 0x40
  4070fa:	f7ff fecb 	bl	406e94 <get_eit_entry>
  4070fe:	2800      	cmp	r0, #0
  407100:	d0f2      	beq.n	4070e8 <__gnu_Unwind_RaiseException+0x2c>
  407102:	2009      	movs	r0, #9
  407104:	b079      	add	sp, #484	; 0x1e4
  407106:	bdf0      	pop	{r4, r5, r6, r7, pc}
  407108:	4668      	mov	r0, sp
  40710a:	f7ff ff13 	bl	406f34 <restore_non_core_regs>
  40710e:	2d06      	cmp	r5, #6
  407110:	d1f7      	bne.n	407102 <__gnu_Unwind_RaiseException+0x46>
  407112:	4620      	mov	r0, r4
  407114:	4639      	mov	r1, r7
  407116:	f7ff ff43 	bl	406fa0 <unwind_phase2>
  40711a:	bf00      	nop

0040711c <__gnu_Unwind_ForcedUnwind>:
  40711c:	b430      	push	{r4, r5}
  40711e:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
  407120:	60c1      	str	r1, [r0, #12]
  407122:	6182      	str	r2, [r0, #24]
  407124:	4619      	mov	r1, r3
  407126:	641d      	str	r5, [r3, #64]	; 0x40
  407128:	2200      	movs	r2, #0
  40712a:	bc30      	pop	{r4, r5}
  40712c:	e758      	b.n	406fe0 <unwind_phase2_forced>
  40712e:	bf00      	nop

00407130 <__gnu_Unwind_Resume>:
  407130:	b570      	push	{r4, r5, r6, lr}
  407132:	68c6      	ldr	r6, [r0, #12]
  407134:	6943      	ldr	r3, [r0, #20]
  407136:	640b      	str	r3, [r1, #64]	; 0x40
  407138:	4604      	mov	r4, r0
  40713a:	460d      	mov	r5, r1
  40713c:	b126      	cbz	r6, 407148 <__gnu_Unwind_Resume+0x18>
  40713e:	2201      	movs	r2, #1
  407140:	f7ff ff4e 	bl	406fe0 <unwind_phase2_forced>
  407144:	f000 fe06 	bl	407d54 <abort>
  407148:	6903      	ldr	r3, [r0, #16]
  40714a:	4621      	mov	r1, r4
  40714c:	2002      	movs	r0, #2
  40714e:	462a      	mov	r2, r5
  407150:	4798      	blx	r3
  407152:	2807      	cmp	r0, #7
  407154:	d007      	beq.n	407166 <__gnu_Unwind_Resume+0x36>
  407156:	2808      	cmp	r0, #8
  407158:	d103      	bne.n	407162 <__gnu_Unwind_Resume+0x32>
  40715a:	4620      	mov	r0, r4
  40715c:	4629      	mov	r1, r5
  40715e:	f7ff ff1f 	bl	406fa0 <unwind_phase2>
  407162:	f000 fdf7 	bl	407d54 <abort>
  407166:	4630      	mov	r0, r6
  407168:	6c29      	ldr	r1, [r5, #64]	; 0x40
  40716a:	f7ff ff17 	bl	406f9c <_Unwind_DebugHook>
  40716e:	1d28      	adds	r0, r5, #4
  407170:	f000 fb5c 	bl	40782c <__restore_core_regs>

00407174 <__gnu_Unwind_Resume_or_Rethrow>:
  407174:	68c2      	ldr	r2, [r0, #12]
  407176:	b11a      	cbz	r2, 407180 <__gnu_Unwind_Resume_or_Rethrow+0xc>
  407178:	6bca      	ldr	r2, [r1, #60]	; 0x3c
  40717a:	640a      	str	r2, [r1, #64]	; 0x40
  40717c:	2200      	movs	r2, #0
  40717e:	e72f      	b.n	406fe0 <unwind_phase2_forced>
  407180:	e79c      	b.n	4070bc <__gnu_Unwind_RaiseException>
  407182:	bf00      	nop

00407184 <_Unwind_Complete>:
  407184:	4770      	bx	lr
  407186:	bf00      	nop

00407188 <_Unwind_DeleteException>:
  407188:	6883      	ldr	r3, [r0, #8]
  40718a:	b113      	cbz	r3, 407192 <_Unwind_DeleteException+0xa>
  40718c:	4601      	mov	r1, r0
  40718e:	2001      	movs	r0, #1
  407190:	4718      	bx	r3
  407192:	4770      	bx	lr

00407194 <_Unwind_VRS_Get>:
  407194:	b500      	push	{lr}
  407196:	2904      	cmp	r1, #4
  407198:	d807      	bhi.n	4071aa <_Unwind_VRS_Get+0x16>
  40719a:	e8df f001 	tbb	[pc, r1]
  40719e:	0903      	.short	0x0903
  4071a0:	0906      	.short	0x0906
  4071a2:	09          	.byte	0x09
  4071a3:	00          	.byte	0x00
  4071a4:	b90b      	cbnz	r3, 4071aa <_Unwind_VRS_Get+0x16>
  4071a6:	2a0f      	cmp	r2, #15
  4071a8:	d905      	bls.n	4071b6 <_Unwind_VRS_Get+0x22>
  4071aa:	2002      	movs	r0, #2
  4071ac:	f85d fb04 	ldr.w	pc, [sp], #4
  4071b0:	2001      	movs	r0, #1
  4071b2:	f85d fb04 	ldr.w	pc, [sp], #4
  4071b6:	eb00 0282 	add.w	r2, r0, r2, lsl #2
  4071ba:	4618      	mov	r0, r3
  4071bc:	6853      	ldr	r3, [r2, #4]
  4071be:	9a01      	ldr	r2, [sp, #4]
  4071c0:	6013      	str	r3, [r2, #0]
  4071c2:	f85d fb04 	ldr.w	pc, [sp], #4
  4071c6:	bf00      	nop

004071c8 <_Unwind_GetGR>:
  4071c8:	b500      	push	{lr}
  4071ca:	b085      	sub	sp, #20
  4071cc:	460a      	mov	r2, r1
  4071ce:	ab03      	add	r3, sp, #12
  4071d0:	2100      	movs	r1, #0
  4071d2:	9300      	str	r3, [sp, #0]
  4071d4:	460b      	mov	r3, r1
  4071d6:	f7ff ffdd 	bl	407194 <_Unwind_VRS_Get>
  4071da:	9803      	ldr	r0, [sp, #12]
  4071dc:	b005      	add	sp, #20
  4071de:	f85d fb04 	ldr.w	pc, [sp], #4
  4071e2:	bf00      	nop

004071e4 <_Unwind_VRS_Set>:
  4071e4:	b500      	push	{lr}
  4071e6:	2904      	cmp	r1, #4
  4071e8:	d807      	bhi.n	4071fa <_Unwind_VRS_Set+0x16>
  4071ea:	e8df f001 	tbb	[pc, r1]
  4071ee:	0903      	.short	0x0903
  4071f0:	0906      	.short	0x0906
  4071f2:	09          	.byte	0x09
  4071f3:	00          	.byte	0x00
  4071f4:	b90b      	cbnz	r3, 4071fa <_Unwind_VRS_Set+0x16>
  4071f6:	2a0f      	cmp	r2, #15
  4071f8:	d905      	bls.n	407206 <_Unwind_VRS_Set+0x22>
  4071fa:	2002      	movs	r0, #2
  4071fc:	f85d fb04 	ldr.w	pc, [sp], #4
  407200:	2001      	movs	r0, #1
  407202:	f85d fb04 	ldr.w	pc, [sp], #4
  407206:	9901      	ldr	r1, [sp, #4]
  407208:	eb00 0282 	add.w	r2, r0, r2, lsl #2
  40720c:	6809      	ldr	r1, [r1, #0]
  40720e:	6051      	str	r1, [r2, #4]
  407210:	4618      	mov	r0, r3
  407212:	f85d fb04 	ldr.w	pc, [sp], #4
  407216:	bf00      	nop

00407218 <_Unwind_SetGR>:
  407218:	b510      	push	{r4, lr}
  40721a:	b084      	sub	sp, #16
  40721c:	ab04      	add	r3, sp, #16
  40721e:	460c      	mov	r4, r1
  407220:	f843 2d04 	str.w	r2, [r3, #-4]!
  407224:	2100      	movs	r1, #0
  407226:	9300      	str	r3, [sp, #0]
  407228:	4622      	mov	r2, r4
  40722a:	460b      	mov	r3, r1
  40722c:	f7ff ffda 	bl	4071e4 <_Unwind_VRS_Set>
  407230:	b004      	add	sp, #16
  407232:	bd10      	pop	{r4, pc}

00407234 <__gnu_Unwind_Backtrace>:
  407234:	b5f0      	push	{r4, r5, r6, r7, lr}
  407236:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
  407238:	6413      	str	r3, [r2, #64]	; 0x40
  40723a:	1d15      	adds	r5, r2, #4
  40723c:	4607      	mov	r7, r0
  40723e:	460e      	mov	r6, r1
  407240:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
  407242:	f5ad 7d0f 	sub.w	sp, sp, #572	; 0x23c
  407246:	ac17      	add	r4, sp, #92	; 0x5c
  407248:	c40f      	stmia	r4!, {r0, r1, r2, r3}
  40724a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
  40724c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
  40724e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
  407250:	c40f      	stmia	r4!, {r0, r1, r2, r3}
  407252:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
  407256:	f04f 35ff 	mov.w	r5, #4294967295
  40725a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  40725e:	9516      	str	r5, [sp, #88]	; 0x58
  407260:	e010      	b.n	407284 <__gnu_Unwind_Backtrace+0x50>
  407262:	a816      	add	r0, sp, #88	; 0x58
  407264:	f7ff ffd8 	bl	407218 <_Unwind_SetGR>
  407268:	4631      	mov	r1, r6
  40726a:	a816      	add	r0, sp, #88	; 0x58
  40726c:	47b8      	blx	r7
  40726e:	4669      	mov	r1, sp
  407270:	aa16      	add	r2, sp, #88	; 0x58
  407272:	b978      	cbnz	r0, 407294 <__gnu_Unwind_Backtrace+0x60>
  407274:	9b04      	ldr	r3, [sp, #16]
  407276:	2008      	movs	r0, #8
  407278:	4798      	blx	r3
  40727a:	2805      	cmp	r0, #5
  40727c:	4604      	mov	r4, r0
  40727e:	d00a      	beq.n	407296 <__gnu_Unwind_Backtrace+0x62>
  407280:	2809      	cmp	r0, #9
  407282:	d007      	beq.n	407294 <__gnu_Unwind_Backtrace+0x60>
  407284:	9926      	ldr	r1, [sp, #152]	; 0x98
  407286:	4668      	mov	r0, sp
  407288:	f7ff fe04 	bl	406e94 <get_eit_entry>
  40728c:	466a      	mov	r2, sp
  40728e:	210c      	movs	r1, #12
  407290:	2800      	cmp	r0, #0
  407292:	d0e6      	beq.n	407262 <__gnu_Unwind_Backtrace+0x2e>
  407294:	2409      	movs	r4, #9
  407296:	a816      	add	r0, sp, #88	; 0x58
  407298:	f7ff fe4c 	bl	406f34 <restore_non_core_regs>
  40729c:	4620      	mov	r0, r4
  40729e:	f50d 7d0f 	add.w	sp, sp, #572	; 0x23c
  4072a2:	bdf0      	pop	{r4, r5, r6, r7, pc}

004072a4 <__gnu_unwind_pr_common>:
  4072a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4072a8:	460d      	mov	r5, r1
  4072aa:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
  4072ac:	b08b      	sub	sp, #44	; 0x2c
  4072ae:	1d0c      	adds	r4, r1, #4
  4072b0:	6809      	ldr	r1, [r1, #0]
  4072b2:	9107      	str	r1, [sp, #28]
  4072b4:	4690      	mov	r8, r2
  4072b6:	9408      	str	r4, [sp, #32]
  4072b8:	f000 0903 	and.w	r9, r0, #3
  4072bc:	461e      	mov	r6, r3
  4072be:	2b00      	cmp	r3, #0
  4072c0:	d164      	bne.n	40738c <__gnu_unwind_pr_common+0xe8>
  4072c2:	0209      	lsls	r1, r1, #8
  4072c4:	2303      	movs	r3, #3
  4072c6:	9107      	str	r1, [sp, #28]
  4072c8:	f88d 6025 	strb.w	r6, [sp, #37]	; 0x25
  4072cc:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  4072d0:	6d2b      	ldr	r3, [r5, #80]	; 0x50
  4072d2:	f1b9 0f02 	cmp.w	r9, #2
  4072d6:	bf08      	it	eq
  4072d8:	6bac      	ldreq	r4, [r5, #56]	; 0x38
  4072da:	f013 0301 	ands.w	r3, r3, #1
  4072de:	d143      	bne.n	407368 <__gnu_unwind_pr_common+0xc4>
  4072e0:	f000 0008 	and.w	r0, r0, #8
  4072e4:	b2c2      	uxtb	r2, r0
  4072e6:	9203      	str	r2, [sp, #12]
  4072e8:	9301      	str	r3, [sp, #4]
  4072ea:	6827      	ldr	r7, [r4, #0]
  4072ec:	2f00      	cmp	r7, #0
  4072ee:	d03d      	beq.n	40736c <__gnu_unwind_pr_common+0xc8>
  4072f0:	2e02      	cmp	r6, #2
  4072f2:	d047      	beq.n	407384 <__gnu_unwind_pr_common+0xe0>
  4072f4:	8827      	ldrh	r7, [r4, #0]
  4072f6:	f8b4 a002 	ldrh.w	sl, [r4, #2]
  4072fa:	3404      	adds	r4, #4
  4072fc:	6cab      	ldr	r3, [r5, #72]	; 0x48
  4072fe:	f02a 0b01 	bic.w	fp, sl, #1
  407302:	4640      	mov	r0, r8
  407304:	210f      	movs	r1, #15
  407306:	449b      	add	fp, r3
  407308:	f7ff ff5e 	bl	4071c8 <_Unwind_GetGR>
  40730c:	4583      	cmp	fp, r0
  40730e:	d837      	bhi.n	407380 <__gnu_unwind_pr_common+0xdc>
  407310:	f027 0301 	bic.w	r3, r7, #1
  407314:	449b      	add	fp, r3
  407316:	4558      	cmp	r0, fp
  407318:	bf2c      	ite	cs
  40731a:	2000      	movcs	r0, #0
  40731c:	2001      	movcc	r0, #1
  40731e:	f00a 0a01 	and.w	sl, sl, #1
  407322:	f007 0701 	and.w	r7, r7, #1
  407326:	ea47 0a4a 	orr.w	sl, r7, sl, lsl #1
  40732a:	f1ba 0f01 	cmp.w	sl, #1
  40732e:	d043      	beq.n	4073b8 <__gnu_unwind_pr_common+0x114>
  407330:	d33a      	bcc.n	4073a8 <__gnu_unwind_pr_common+0x104>
  407332:	f1ba 0f02 	cmp.w	sl, #2
  407336:	d11f      	bne.n	407378 <__gnu_unwind_pr_common+0xd4>
  407338:	6823      	ldr	r3, [r4, #0]
  40733a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
  40733e:	9202      	str	r2, [sp, #8]
  407340:	f1b9 0f00 	cmp.w	r9, #0
  407344:	d17b      	bne.n	40743e <__gnu_unwind_pr_common+0x19a>
  407346:	b138      	cbz	r0, 407358 <__gnu_unwind_pr_common+0xb4>
  407348:	9a03      	ldr	r2, [sp, #12]
  40734a:	2a00      	cmp	r2, #0
  40734c:	f000 8083 	beq.w	407456 <__gnu_unwind_pr_common+0x1b2>
  407350:	9a02      	ldr	r2, [sp, #8]
  407352:	2a00      	cmp	r2, #0
  407354:	f000 80a6 	beq.w	4074a4 <__gnu_unwind_pr_common+0x200>
  407358:	2b00      	cmp	r3, #0
  40735a:	db7a      	blt.n	407452 <__gnu_unwind_pr_common+0x1ae>
  40735c:	9b02      	ldr	r3, [sp, #8]
  40735e:	f103 0a01 	add.w	sl, r3, #1
  407362:	eb04 048a 	add.w	r4, r4, sl, lsl #2
  407366:	e7c0      	b.n	4072ea <__gnu_unwind_pr_common+0x46>
  407368:	2300      	movs	r3, #0
  40736a:	9301      	str	r3, [sp, #4]
  40736c:	2e02      	cmp	r6, #2
  40736e:	dd40      	ble.n	4073f2 <__gnu_unwind_pr_common+0x14e>
  407370:	f7ff fe12 	bl	406f98 <__gnu_unwind_24bit.isra.1>
  407374:	2800      	cmp	r0, #0
  407376:	d042      	beq.n	4073fe <__gnu_unwind_pr_common+0x15a>
  407378:	2009      	movs	r0, #9
  40737a:	b00b      	add	sp, #44	; 0x2c
  40737c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  407380:	2000      	movs	r0, #0
  407382:	e7cc      	b.n	40731e <__gnu_unwind_pr_common+0x7a>
  407384:	f8d4 a004 	ldr.w	sl, [r4, #4]
  407388:	3408      	adds	r4, #8
  40738a:	e7b7      	b.n	4072fc <__gnu_unwind_pr_common+0x58>
  40738c:	2b02      	cmp	r3, #2
  40738e:	dc9f      	bgt.n	4072d0 <__gnu_unwind_pr_common+0x2c>
  407390:	0c0b      	lsrs	r3, r1, #16
  407392:	b2df      	uxtb	r7, r3
  407394:	0409      	lsls	r1, r1, #16
  407396:	2202      	movs	r2, #2
  407398:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
  40739c:	eb04 0487 	add.w	r4, r4, r7, lsl #2
  4073a0:	9107      	str	r1, [sp, #28]
  4073a2:	f88d 2024 	strb.w	r2, [sp, #36]	; 0x24
  4073a6:	e793      	b.n	4072d0 <__gnu_unwind_pr_common+0x2c>
  4073a8:	f1b9 0f00 	cmp.w	r9, #0
  4073ac:	d002      	beq.n	4073b4 <__gnu_unwind_pr_common+0x110>
  4073ae:	2800      	cmp	r0, #0
  4073b0:	f040 80ad 	bne.w	40750e <__gnu_unwind_pr_common+0x26a>
  4073b4:	3404      	adds	r4, #4
  4073b6:	e798      	b.n	4072ea <__gnu_unwind_pr_common+0x46>
  4073b8:	f1b9 0f00 	cmp.w	r9, #0
  4073bc:	d126      	bne.n	40740c <__gnu_unwind_pr_common+0x168>
  4073be:	b1b0      	cbz	r0, 4073ee <__gnu_unwind_pr_common+0x14a>
  4073c0:	e894 000c 	ldmia.w	r4, {r2, r3}
  4073c4:	0fd7      	lsrs	r7, r2, #31
  4073c6:	1c9a      	adds	r2, r3, #2
  4073c8:	d0d6      	beq.n	407378 <__gnu_unwind_pr_common+0xd4>
  4073ca:	f105 0258 	add.w	r2, r5, #88	; 0x58
  4073ce:	3301      	adds	r3, #1
  4073d0:	9206      	str	r2, [sp, #24]
  4073d2:	f000 8092 	beq.w	4074fa <__gnu_unwind_pr_common+0x256>
  4073d6:	1d20      	adds	r0, r4, #4
  4073d8:	f7ff fdd8 	bl	406f8c <_Unwind_decode_typeinfo_ptr.isra.0>
  4073dc:	463a      	mov	r2, r7
  4073de:	4601      	mov	r1, r0
  4073e0:	ab06      	add	r3, sp, #24
  4073e2:	4628      	mov	r0, r5
  4073e4:	f3af 8000 	nop.w
  4073e8:	2800      	cmp	r0, #0
  4073ea:	f040 80b5 	bne.w	407558 <__gnu_unwind_pr_common+0x2b4>
  4073ee:	3408      	adds	r4, #8
  4073f0:	e77b      	b.n	4072ea <__gnu_unwind_pr_common+0x46>
  4073f2:	4640      	mov	r0, r8
  4073f4:	a907      	add	r1, sp, #28
  4073f6:	f000 fb1b 	bl	407a30 <__gnu_unwind_execute>
  4073fa:	2800      	cmp	r0, #0
  4073fc:	d1bc      	bne.n	407378 <__gnu_unwind_pr_common+0xd4>
  4073fe:	9b01      	ldr	r3, [sp, #4]
  407400:	2b00      	cmp	r3, #0
  407402:	d159      	bne.n	4074b8 <__gnu_unwind_pr_common+0x214>
  407404:	2008      	movs	r0, #8
  407406:	b00b      	add	sp, #44	; 0x2c
  407408:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40740c:	4640      	mov	r0, r8
  40740e:	210d      	movs	r1, #13
  407410:	6a2f      	ldr	r7, [r5, #32]
  407412:	f7ff fed9 	bl	4071c8 <_Unwind_GetGR>
  407416:	4287      	cmp	r7, r0
  407418:	d1e9      	bne.n	4073ee <__gnu_unwind_pr_common+0x14a>
  40741a:	6aab      	ldr	r3, [r5, #40]	; 0x28
  40741c:	429c      	cmp	r4, r3
  40741e:	d1e6      	bne.n	4073ee <__gnu_unwind_pr_common+0x14a>
  407420:	4620      	mov	r0, r4
  407422:	f7ff fcdb 	bl	406ddc <selfrel_offset31>
  407426:	210f      	movs	r1, #15
  407428:	4602      	mov	r2, r0
  40742a:	4640      	mov	r0, r8
  40742c:	f7ff fef4 	bl	407218 <_Unwind_SetGR>
  407430:	4640      	mov	r0, r8
  407432:	462a      	mov	r2, r5
  407434:	2100      	movs	r1, #0
  407436:	f7ff feef 	bl	407218 <_Unwind_SetGR>
  40743a:	2007      	movs	r0, #7
  40743c:	e79d      	b.n	40737a <__gnu_unwind_pr_common+0xd6>
  40743e:	4640      	mov	r0, r8
  407440:	210d      	movs	r1, #13
  407442:	6a2f      	ldr	r7, [r5, #32]
  407444:	f7ff fec0 	bl	4071c8 <_Unwind_GetGR>
  407448:	4287      	cmp	r7, r0
  40744a:	d045      	beq.n	4074d8 <__gnu_unwind_pr_common+0x234>
  40744c:	6823      	ldr	r3, [r4, #0]
  40744e:	2b00      	cmp	r3, #0
  407450:	da84      	bge.n	40735c <__gnu_unwind_pr_common+0xb8>
  407452:	3404      	adds	r4, #4
  407454:	e782      	b.n	40735c <__gnu_unwind_pr_common+0xb8>
  407456:	9b02      	ldr	r3, [sp, #8]
  407458:	b323      	cbz	r3, 4074a4 <__gnu_unwind_pr_common+0x200>
  40745a:	f105 0358 	add.w	r3, r5, #88	; 0x58
  40745e:	9605      	str	r6, [sp, #20]
  407460:	f104 0a04 	add.w	sl, r4, #4
  407464:	9f03      	ldr	r7, [sp, #12]
  407466:	f8dd b008 	ldr.w	fp, [sp, #8]
  40746a:	f8cd 9010 	str.w	r9, [sp, #16]
  40746e:	461e      	mov	r6, r3
  407470:	e002      	b.n	407478 <__gnu_unwind_pr_common+0x1d4>
  407472:	45d9      	cmp	r9, fp
  407474:	464f      	mov	r7, r9
  407476:	d015      	beq.n	4074a4 <__gnu_unwind_pr_common+0x200>
  407478:	4650      	mov	r0, sl
  40747a:	9606      	str	r6, [sp, #24]
  40747c:	f7ff fd86 	bl	406f8c <_Unwind_decode_typeinfo_ptr.isra.0>
  407480:	2200      	movs	r2, #0
  407482:	4601      	mov	r1, r0
  407484:	ab06      	add	r3, sp, #24
  407486:	4628      	mov	r0, r5
  407488:	f3af 8000 	nop.w
  40748c:	f107 0901 	add.w	r9, r7, #1
  407490:	f10a 0a04 	add.w	sl, sl, #4
  407494:	2800      	cmp	r0, #0
  407496:	d0ec      	beq.n	407472 <__gnu_unwind_pr_common+0x1ce>
  407498:	9b02      	ldr	r3, [sp, #8]
  40749a:	f8dd 9010 	ldr.w	r9, [sp, #16]
  40749e:	9e05      	ldr	r6, [sp, #20]
  4074a0:	429f      	cmp	r7, r3
  4074a2:	d1d3      	bne.n	40744c <__gnu_unwind_pr_common+0x1a8>
  4074a4:	4640      	mov	r0, r8
  4074a6:	210d      	movs	r1, #13
  4074a8:	f7ff fe8e 	bl	4071c8 <_Unwind_GetGR>
  4074ac:	9b06      	ldr	r3, [sp, #24]
  4074ae:	6228      	str	r0, [r5, #32]
  4074b0:	62ac      	str	r4, [r5, #40]	; 0x28
  4074b2:	626b      	str	r3, [r5, #36]	; 0x24
  4074b4:	2006      	movs	r0, #6
  4074b6:	e760      	b.n	40737a <__gnu_unwind_pr_common+0xd6>
  4074b8:	210f      	movs	r1, #15
  4074ba:	4640      	mov	r0, r8
  4074bc:	f7ff fe84 	bl	4071c8 <_Unwind_GetGR>
  4074c0:	210e      	movs	r1, #14
  4074c2:	4602      	mov	r2, r0
  4074c4:	4640      	mov	r0, r8
  4074c6:	f7ff fea7 	bl	407218 <_Unwind_SetGR>
  4074ca:	4640      	mov	r0, r8
  4074cc:	210f      	movs	r1, #15
  4074ce:	4a29      	ldr	r2, [pc, #164]	; (407574 <__gnu_unwind_pr_common+0x2d0>)
  4074d0:	f7ff fea2 	bl	407218 <_Unwind_SetGR>
  4074d4:	2007      	movs	r0, #7
  4074d6:	e750      	b.n	40737a <__gnu_unwind_pr_common+0xd6>
  4074d8:	6aab      	ldr	r3, [r5, #40]	; 0x28
  4074da:	429c      	cmp	r4, r3
  4074dc:	d1b6      	bne.n	40744c <__gnu_unwind_pr_common+0x1a8>
  4074de:	2204      	movs	r2, #4
  4074e0:	2700      	movs	r7, #0
  4074e2:	18a3      	adds	r3, r4, r2
  4074e4:	9902      	ldr	r1, [sp, #8]
  4074e6:	62a9      	str	r1, [r5, #40]	; 0x28
  4074e8:	62ef      	str	r7, [r5, #44]	; 0x2c
  4074ea:	632a      	str	r2, [r5, #48]	; 0x30
  4074ec:	636b      	str	r3, [r5, #52]	; 0x34
  4074ee:	6823      	ldr	r3, [r4, #0]
  4074f0:	42bb      	cmp	r3, r7
  4074f2:	db1f      	blt.n	407534 <__gnu_unwind_pr_common+0x290>
  4074f4:	2301      	movs	r3, #1
  4074f6:	9301      	str	r3, [sp, #4]
  4074f8:	e730      	b.n	40735c <__gnu_unwind_pr_common+0xb8>
  4074fa:	4640      	mov	r0, r8
  4074fc:	210d      	movs	r1, #13
  4074fe:	f7ff fe63 	bl	4071c8 <_Unwind_GetGR>
  407502:	6228      	str	r0, [r5, #32]
  407504:	9b06      	ldr	r3, [sp, #24]
  407506:	626b      	str	r3, [r5, #36]	; 0x24
  407508:	62ac      	str	r4, [r5, #40]	; 0x28
  40750a:	2006      	movs	r0, #6
  40750c:	e735      	b.n	40737a <__gnu_unwind_pr_common+0xd6>
  40750e:	4620      	mov	r0, r4
  407510:	f7ff fc64 	bl	406ddc <selfrel_offset31>
  407514:	3404      	adds	r4, #4
  407516:	4606      	mov	r6, r0
  407518:	63ac      	str	r4, [r5, #56]	; 0x38
  40751a:	4628      	mov	r0, r5
  40751c:	f3af 8000 	nop.w
  407520:	2800      	cmp	r0, #0
  407522:	f43f af29 	beq.w	407378 <__gnu_unwind_pr_common+0xd4>
  407526:	4640      	mov	r0, r8
  407528:	4632      	mov	r2, r6
  40752a:	210f      	movs	r1, #15
  40752c:	f7ff fe74 	bl	407218 <_Unwind_SetGR>
  407530:	2007      	movs	r0, #7
  407532:	e722      	b.n	40737a <__gnu_unwind_pr_common+0xd6>
  407534:	4608      	mov	r0, r1
  407536:	3001      	adds	r0, #1
  407538:	eb04 0080 	add.w	r0, r4, r0, lsl #2
  40753c:	f7ff fc4e 	bl	406ddc <selfrel_offset31>
  407540:	210f      	movs	r1, #15
  407542:	4602      	mov	r2, r0
  407544:	4640      	mov	r0, r8
  407546:	f7ff fe67 	bl	407218 <_Unwind_SetGR>
  40754a:	4640      	mov	r0, r8
  40754c:	4639      	mov	r1, r7
  40754e:	462a      	mov	r2, r5
  407550:	f7ff fe62 	bl	407218 <_Unwind_SetGR>
  407554:	2007      	movs	r0, #7
  407556:	e710      	b.n	40737a <__gnu_unwind_pr_common+0xd6>
  407558:	4607      	mov	r7, r0
  40755a:	210d      	movs	r1, #13
  40755c:	4640      	mov	r0, r8
  40755e:	f7ff fe33 	bl	4071c8 <_Unwind_GetGR>
  407562:	2f02      	cmp	r7, #2
  407564:	6228      	str	r0, [r5, #32]
  407566:	d1cd      	bne.n	407504 <__gnu_unwind_pr_common+0x260>
  407568:	462b      	mov	r3, r5
  40756a:	9a06      	ldr	r2, [sp, #24]
  40756c:	f843 2f2c 	str.w	r2, [r3, #44]!
  407570:	626b      	str	r3, [r5, #36]	; 0x24
  407572:	e7c9      	b.n	407508 <__gnu_unwind_pr_common+0x264>
  407574:	00000000 	.word	0x00000000

00407578 <__aeabi_unwind_cpp_pr0>:
  407578:	2300      	movs	r3, #0
  40757a:	e693      	b.n	4072a4 <__gnu_unwind_pr_common>

0040757c <__aeabi_unwind_cpp_pr1>:
  40757c:	2301      	movs	r3, #1
  40757e:	e691      	b.n	4072a4 <__gnu_unwind_pr_common>

00407580 <__aeabi_unwind_cpp_pr2>:
  407580:	2302      	movs	r3, #2
  407582:	e68f      	b.n	4072a4 <__gnu_unwind_pr_common>

00407584 <_Unwind_VRS_Pop>:
  407584:	b5f0      	push	{r4, r5, r6, r7, lr}
  407586:	4605      	mov	r5, r0
  407588:	b0c5      	sub	sp, #276	; 0x114
  40758a:	2904      	cmp	r1, #4
  40758c:	d80c      	bhi.n	4075a8 <_Unwind_VRS_Pop+0x24>
  40758e:	e8df f001 	tbb	[pc, r1]
  407592:	0356      	.short	0x0356
  407594:	300b      	.short	0x300b
  407596:	0e          	.byte	0x0e
  407597:	00          	.byte	0x00
  407598:	2b01      	cmp	r3, #1
  40759a:	ea4f 4412 	mov.w	r4, r2, lsr #16
  40759e:	b296      	uxth	r6, r2
  4075a0:	d065      	beq.n	40766e <_Unwind_VRS_Pop+0xea>
  4075a2:	2b05      	cmp	r3, #5
  4075a4:	f000 8084 	beq.w	4076b0 <_Unwind_VRS_Pop+0x12c>
  4075a8:	2002      	movs	r0, #2
  4075aa:	b045      	add	sp, #276	; 0x114
  4075ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4075ae:	2b00      	cmp	r3, #0
  4075b0:	d1fa      	bne.n	4075a8 <_Unwind_VRS_Pop+0x24>
  4075b2:	2a10      	cmp	r2, #16
  4075b4:	d8f8      	bhi.n	4075a8 <_Unwind_VRS_Pop+0x24>
  4075b6:	682b      	ldr	r3, [r5, #0]
  4075b8:	06dc      	lsls	r4, r3, #27
  4075ba:	f100 80eb 	bmi.w	407794 <_Unwind_VRS_Pop+0x210>
  4075be:	ae22      	add	r6, sp, #136	; 0x88
  4075c0:	4630      	mov	r0, r6
  4075c2:	9201      	str	r2, [sp, #4]
  4075c4:	f000 f9a4 	bl	407910 <__gnu_Unwind_Save_WMMXC>
  4075c8:	6ba8      	ldr	r0, [r5, #56]	; 0x38
  4075ca:	9a01      	ldr	r2, [sp, #4]
  4075cc:	2300      	movs	r3, #0
  4075ce:	2401      	movs	r4, #1
  4075d0:	fa04 f103 	lsl.w	r1, r4, r3
  4075d4:	4211      	tst	r1, r2
  4075d6:	d003      	beq.n	4075e0 <_Unwind_VRS_Pop+0x5c>
  4075d8:	6801      	ldr	r1, [r0, #0]
  4075da:	f846 1023 	str.w	r1, [r6, r3, lsl #2]
  4075de:	3004      	adds	r0, #4
  4075e0:	3301      	adds	r3, #1
  4075e2:	2b04      	cmp	r3, #4
  4075e4:	d1f4      	bne.n	4075d0 <_Unwind_VRS_Pop+0x4c>
  4075e6:	63a8      	str	r0, [r5, #56]	; 0x38
  4075e8:	4630      	mov	r0, r6
  4075ea:	f000 f987 	bl	4078fc <__gnu_Unwind_Restore_WMMXC>
  4075ee:	2000      	movs	r0, #0
  4075f0:	e7db      	b.n	4075aa <_Unwind_VRS_Pop+0x26>
  4075f2:	2b03      	cmp	r3, #3
  4075f4:	d1d8      	bne.n	4075a8 <_Unwind_VRS_Pop+0x24>
  4075f6:	0c14      	lsrs	r4, r2, #16
  4075f8:	b297      	uxth	r7, r2
  4075fa:	193b      	adds	r3, r7, r4
  4075fc:	2b10      	cmp	r3, #16
  4075fe:	d8d3      	bhi.n	4075a8 <_Unwind_VRS_Pop+0x24>
  407600:	682b      	ldr	r3, [r5, #0]
  407602:	071e      	lsls	r6, r3, #28
  407604:	f100 80e6 	bmi.w	4077d4 <_Unwind_VRS_Pop+0x250>
  407608:	ae22      	add	r6, sp, #136	; 0x88
  40760a:	4630      	mov	r0, r6
  40760c:	007f      	lsls	r7, r7, #1
  40760e:	f000 f953 	bl	4078b8 <__gnu_Unwind_Save_WMMXD>
  407612:	eb06 02c4 	add.w	r2, r6, r4, lsl #3
  407616:	1e7b      	subs	r3, r7, #1
  407618:	6bac      	ldr	r4, [r5, #56]	; 0x38
  40761a:	b157      	cbz	r7, 407632 <_Unwind_VRS_Pop+0xae>
  40761c:	3a04      	subs	r2, #4
  40761e:	4621      	mov	r1, r4
  407620:	f851 0b04 	ldr.w	r0, [r1], #4
  407624:	f842 0f04 	str.w	r0, [r2, #4]!
  407628:	3b01      	subs	r3, #1
  40762a:	1c58      	adds	r0, r3, #1
  40762c:	d1f8      	bne.n	407620 <_Unwind_VRS_Pop+0x9c>
  40762e:	eb04 0487 	add.w	r4, r4, r7, lsl #2
  407632:	4630      	mov	r0, r6
  407634:	63ac      	str	r4, [r5, #56]	; 0x38
  407636:	f000 f91d 	bl	407874 <__gnu_Unwind_Restore_WMMXD>
  40763a:	2000      	movs	r0, #0
  40763c:	e7b5      	b.n	4075aa <_Unwind_VRS_Pop+0x26>
  40763e:	2b00      	cmp	r3, #0
  407640:	d1b2      	bne.n	4075a8 <_Unwind_VRS_Pop+0x24>
  407642:	6bac      	ldr	r4, [r5, #56]	; 0x38
  407644:	b297      	uxth	r7, r2
  407646:	1d28      	adds	r0, r5, #4
  407648:	2601      	movs	r6, #1
  40764a:	fa06 f103 	lsl.w	r1, r6, r3
  40764e:	4239      	tst	r1, r7
  407650:	f103 0301 	add.w	r3, r3, #1
  407654:	d002      	beq.n	40765c <_Unwind_VRS_Pop+0xd8>
  407656:	6821      	ldr	r1, [r4, #0]
  407658:	6001      	str	r1, [r0, #0]
  40765a:	3404      	adds	r4, #4
  40765c:	2b10      	cmp	r3, #16
  40765e:	f100 0004 	add.w	r0, r0, #4
  407662:	d1f2      	bne.n	40764a <_Unwind_VRS_Pop+0xc6>
  407664:	f412 5000 	ands.w	r0, r2, #8192	; 0x2000
  407668:	d120      	bne.n	4076ac <_Unwind_VRS_Pop+0x128>
  40766a:	63ac      	str	r4, [r5, #56]	; 0x38
  40766c:	e79d      	b.n	4075aa <_Unwind_VRS_Pop+0x26>
  40766e:	1932      	adds	r2, r6, r4
  407670:	2a10      	cmp	r2, #16
  407672:	d899      	bhi.n	4075a8 <_Unwind_VRS_Pop+0x24>
  407674:	2c0f      	cmp	r4, #15
  407676:	d897      	bhi.n	4075a8 <_Unwind_VRS_Pop+0x24>
  407678:	6829      	ldr	r1, [r5, #0]
  40767a:	07c8      	lsls	r0, r1, #31
  40767c:	f04f 0700 	mov.w	r7, #0
  407680:	d455      	bmi.n	40772e <_Unwind_VRS_Pop+0x1aa>
  407682:	a822      	add	r0, sp, #136	; 0x88
  407684:	9301      	str	r3, [sp, #4]
  407686:	f000 f8e1 	bl	40784c <__gnu_Unwind_Save_VFP>
  40768a:	9b01      	ldr	r3, [sp, #4]
  40768c:	e019      	b.n	4076c2 <_Unwind_VRS_Pop+0x13e>
  40768e:	4608      	mov	r0, r1
  407690:	4637      	mov	r7, r6
  407692:	2b01      	cmp	r3, #1
  407694:	f000 8098 	beq.w	4077c8 <_Unwind_VRS_Pop+0x244>
  407698:	2c0f      	cmp	r4, #15
  40769a:	63a8      	str	r0, [r5, #56]	; 0x38
  40769c:	d802      	bhi.n	4076a4 <_Unwind_VRS_Pop+0x120>
  40769e:	a822      	add	r0, sp, #136	; 0x88
  4076a0:	f000 f8d8 	bl	407854 <__gnu_Unwind_Restore_VFP_D>
  4076a4:	b117      	cbz	r7, 4076ac <_Unwind_VRS_Pop+0x128>
  4076a6:	a802      	add	r0, sp, #8
  4076a8:	f000 f8dc 	bl	407864 <__gnu_Unwind_Restore_VFP_D_16_to_31>
  4076ac:	2000      	movs	r0, #0
  4076ae:	e77c      	b.n	4075aa <_Unwind_VRS_Pop+0x26>
  4076b0:	1937      	adds	r7, r6, r4
  4076b2:	2f20      	cmp	r7, #32
  4076b4:	f63f af78 	bhi.w	4075a8 <_Unwind_VRS_Pop+0x24>
  4076b8:	2c0f      	cmp	r4, #15
  4076ba:	d930      	bls.n	40771e <_Unwind_VRS_Pop+0x19a>
  4076bc:	4637      	mov	r7, r6
  4076be:	2e00      	cmp	r6, #0
  4076c0:	d145      	bne.n	40774e <_Unwind_VRS_Pop+0x1ca>
  4076c2:	6ba9      	ldr	r1, [r5, #56]	; 0x38
  4076c4:	4632      	mov	r2, r6
  4076c6:	2e00      	cmp	r6, #0
  4076c8:	d0e1      	beq.n	40768e <_Unwind_VRS_Pop+0x10a>
  4076ca:	2700      	movs	r7, #0
  4076cc:	a844      	add	r0, sp, #272	; 0x110
  4076ce:	ea4f 0c42 	mov.w	ip, r2, lsl #1
  4076d2:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
  4076d6:	f10c 32ff 	add.w	r2, ip, #4294967295
  4076da:	388c      	subs	r0, #140	; 0x8c
  4076dc:	468e      	mov	lr, r1
  4076de:	f85e 6b04 	ldr.w	r6, [lr], #4
  4076e2:	f840 6f04 	str.w	r6, [r0, #4]!
  4076e6:	3a01      	subs	r2, #1
  4076e8:	1c56      	adds	r6, r2, #1
  4076ea:	d1f8      	bne.n	4076de <_Unwind_VRS_Pop+0x15a>
  4076ec:	eb01 008c 	add.w	r0, r1, ip, lsl #2
  4076f0:	2f00      	cmp	r7, #0
  4076f2:	d0ce      	beq.n	407692 <_Unwind_VRS_Pop+0x10e>
  4076f4:	2c10      	cmp	r4, #16
  4076f6:	4622      	mov	r2, r4
  4076f8:	a944      	add	r1, sp, #272	; 0x110
  4076fa:	bf38      	it	cc
  4076fc:	2210      	movcc	r2, #16
  4076fe:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
  407702:	f5a2 72c4 	sub.w	r2, r2, #392	; 0x188
  407706:	4601      	mov	r1, r0
  407708:	0078      	lsls	r0, r7, #1
  40770a:	3a04      	subs	r2, #4
  40770c:	eb01 0080 	add.w	r0, r1, r0, lsl #2
  407710:	f851 6b04 	ldr.w	r6, [r1], #4
  407714:	f842 6f04 	str.w	r6, [r2, #4]!
  407718:	4281      	cmp	r1, r0
  40771a:	d1f9      	bne.n	407710 <_Unwind_VRS_Pop+0x18c>
  40771c:	e7b9      	b.n	407692 <_Unwind_VRS_Pop+0x10e>
  40771e:	2f10      	cmp	r7, #16
  407720:	d942      	bls.n	4077a8 <_Unwind_VRS_Pop+0x224>
  407722:	682a      	ldr	r2, [r5, #0]
  407724:	07d0      	lsls	r0, r2, #31
  407726:	f1a7 0710 	sub.w	r7, r7, #16
  40772a:	4611      	mov	r1, r2
  40772c:	d510      	bpl.n	407750 <_Unwind_VRS_Pop+0x1cc>
  40772e:	f021 0201 	bic.w	r2, r1, #1
  407732:	2b05      	cmp	r3, #5
  407734:	602a      	str	r2, [r5, #0]
  407736:	9301      	str	r3, [sp, #4]
  407738:	4628      	mov	r0, r5
  40773a:	d05b      	beq.n	4077f4 <_Unwind_VRS_Pop+0x270>
  40773c:	f021 0103 	bic.w	r1, r1, #3
  407740:	f840 1b48 	str.w	r1, [r0], #72
  407744:	f000 f882 	bl	40784c <__gnu_Unwind_Save_VFP>
  407748:	9b01      	ldr	r3, [sp, #4]
  40774a:	2f00      	cmp	r7, #0
  40774c:	d04a      	beq.n	4077e4 <_Unwind_VRS_Pop+0x260>
  40774e:	682a      	ldr	r2, [r5, #0]
  407750:	0751      	lsls	r1, r2, #29
  407752:	d45b      	bmi.n	40780c <_Unwind_VRS_Pop+0x288>
  407754:	2b01      	cmp	r3, #1
  407756:	d063      	beq.n	407820 <_Unwind_VRS_Pop+0x29c>
  407758:	2c0f      	cmp	r4, #15
  40775a:	d804      	bhi.n	407766 <_Unwind_VRS_Pop+0x1e2>
  40775c:	a822      	add	r0, sp, #136	; 0x88
  40775e:	9301      	str	r3, [sp, #4]
  407760:	f000 f87c 	bl	40785c <__gnu_Unwind_Save_VFP_D>
  407764:	9b01      	ldr	r3, [sp, #4]
  407766:	2f00      	cmp	r7, #0
  407768:	d0ab      	beq.n	4076c2 <_Unwind_VRS_Pop+0x13e>
  40776a:	a802      	add	r0, sp, #8
  40776c:	9301      	str	r3, [sp, #4]
  40776e:	f000 f87d 	bl	40786c <__gnu_Unwind_Save_VFP_D_16_to_31>
  407772:	9b01      	ldr	r3, [sp, #4]
  407774:	6ba9      	ldr	r1, [r5, #56]	; 0x38
  407776:	f1c4 0210 	rsb	r2, r4, #16
  40777a:	2a00      	cmp	r2, #0
  40777c:	dca6      	bgt.n	4076cc <_Unwind_VRS_Pop+0x148>
  40777e:	2c10      	cmp	r4, #16
  407780:	4622      	mov	r2, r4
  407782:	a844      	add	r0, sp, #272	; 0x110
  407784:	bf38      	it	cc
  407786:	2210      	movcc	r2, #16
  407788:	eb00 02c2 	add.w	r2, r0, r2, lsl #3
  40778c:	f5a2 72c4 	sub.w	r2, r2, #392	; 0x188
  407790:	0078      	lsls	r0, r7, #1
  407792:	e7ba      	b.n	40770a <_Unwind_VRS_Pop+0x186>
  407794:	f023 0310 	bic.w	r3, r3, #16
  407798:	602b      	str	r3, [r5, #0]
  40779a:	f505 70e8 	add.w	r0, r5, #464	; 0x1d0
  40779e:	9201      	str	r2, [sp, #4]
  4077a0:	f000 f8b6 	bl	407910 <__gnu_Unwind_Save_WMMXC>
  4077a4:	9a01      	ldr	r2, [sp, #4]
  4077a6:	e70a      	b.n	4075be <_Unwind_VRS_Pop+0x3a>
  4077a8:	6829      	ldr	r1, [r5, #0]
  4077aa:	07c8      	lsls	r0, r1, #31
  4077ac:	d51d      	bpl.n	4077ea <_Unwind_VRS_Pop+0x266>
  4077ae:	f021 0201 	bic.w	r2, r1, #1
  4077b2:	4628      	mov	r0, r5
  4077b4:	f042 0202 	orr.w	r2, r2, #2
  4077b8:	f840 2b48 	str.w	r2, [r0], #72
  4077bc:	9301      	str	r3, [sp, #4]
  4077be:	2700      	movs	r7, #0
  4077c0:	f000 f84c 	bl	40785c <__gnu_Unwind_Save_VFP_D>
  4077c4:	9b01      	ldr	r3, [sp, #4]
  4077c6:	e7c9      	b.n	40775c <_Unwind_VRS_Pop+0x1d8>
  4077c8:	3004      	adds	r0, #4
  4077ca:	63a8      	str	r0, [r5, #56]	; 0x38
  4077cc:	a822      	add	r0, sp, #136	; 0x88
  4077ce:	f000 f839 	bl	407844 <__gnu_Unwind_Restore_VFP>
  4077d2:	e76b      	b.n	4076ac <_Unwind_VRS_Pop+0x128>
  4077d4:	f023 0308 	bic.w	r3, r3, #8
  4077d8:	602b      	str	r3, [r5, #0]
  4077da:	f505 70a8 	add.w	r0, r5, #336	; 0x150
  4077de:	f000 f86b 	bl	4078b8 <__gnu_Unwind_Save_WMMXD>
  4077e2:	e711      	b.n	407608 <_Unwind_VRS_Pop+0x84>
  4077e4:	2b01      	cmp	r3, #1
  4077e6:	f43f af4c 	beq.w	407682 <_Unwind_VRS_Pop+0xfe>
  4077ea:	2c0f      	cmp	r4, #15
  4077ec:	bf98      	it	ls
  4077ee:	2700      	movls	r7, #0
  4077f0:	d9b4      	bls.n	40775c <_Unwind_VRS_Pop+0x1d8>
  4077f2:	e766      	b.n	4076c2 <_Unwind_VRS_Pop+0x13e>
  4077f4:	f042 0202 	orr.w	r2, r2, #2
  4077f8:	f840 2b48 	str.w	r2, [r0], #72
  4077fc:	f000 f82e 	bl	40785c <__gnu_Unwind_Save_VFP_D>
  407800:	9b01      	ldr	r3, [sp, #4]
  407802:	2f00      	cmp	r7, #0
  407804:	d0aa      	beq.n	40775c <_Unwind_VRS_Pop+0x1d8>
  407806:	682a      	ldr	r2, [r5, #0]
  407808:	0751      	lsls	r1, r2, #29
  40780a:	d5a5      	bpl.n	407758 <_Unwind_VRS_Pop+0x1d4>
  40780c:	4628      	mov	r0, r5
  40780e:	f022 0204 	bic.w	r2, r2, #4
  407812:	f840 2bd0 	str.w	r2, [r0], #208
  407816:	9301      	str	r3, [sp, #4]
  407818:	f000 f828 	bl	40786c <__gnu_Unwind_Save_VFP_D_16_to_31>
  40781c:	9b01      	ldr	r3, [sp, #4]
  40781e:	e799      	b.n	407754 <_Unwind_VRS_Pop+0x1d0>
  407820:	a822      	add	r0, sp, #136	; 0x88
  407822:	9301      	str	r3, [sp, #4]
  407824:	f000 f812 	bl	40784c <__gnu_Unwind_Save_VFP>
  407828:	9b01      	ldr	r3, [sp, #4]
  40782a:	e7a3      	b.n	407774 <_Unwind_VRS_Pop+0x1f0>

0040782c <__restore_core_regs>:
  40782c:	f100 0134 	add.w	r1, r0, #52	; 0x34
  407830:	e891 0038 	ldmia.w	r1, {r3, r4, r5}
  407834:	469c      	mov	ip, r3
  407836:	46a6      	mov	lr, r4
  407838:	f84c 5d04 	str.w	r5, [ip, #-4]!
  40783c:	e890 0fff 	ldmia.w	r0, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp}
  407840:	46e5      	mov	sp, ip
  407842:	bd00      	pop	{pc}

00407844 <__gnu_Unwind_Restore_VFP>:
  407844:	ec90 0b21 	fldmiax	r0, {d0-d15}	;@ Deprecated
  407848:	4770      	bx	lr
  40784a:	bf00      	nop

0040784c <__gnu_Unwind_Save_VFP>:
  40784c:	ec80 0b21 	fstmiax	r0, {d0-d15}	;@ Deprecated
  407850:	4770      	bx	lr
  407852:	bf00      	nop

00407854 <__gnu_Unwind_Restore_VFP_D>:
  407854:	ec90 0b20 	vldmia	r0, {d0-d15}
  407858:	4770      	bx	lr
  40785a:	bf00      	nop

0040785c <__gnu_Unwind_Save_VFP_D>:
  40785c:	ec80 0b20 	vstmia	r0, {d0-d15}
  407860:	4770      	bx	lr
  407862:	bf00      	nop

00407864 <__gnu_Unwind_Restore_VFP_D_16_to_31>:
  407864:	ecd0 0b20 	vldmia	r0, {d16-d31}
  407868:	4770      	bx	lr
  40786a:	bf00      	nop

0040786c <__gnu_Unwind_Save_VFP_D_16_to_31>:
  40786c:	ecc0 0b20 	vstmia	r0, {d16-d31}
  407870:	4770      	bx	lr
  407872:	bf00      	nop

00407874 <__gnu_Unwind_Restore_WMMXD>:
  407874:	ecf0 0102 	ldfe	f0, [r0], #8
  407878:	ecf0 1102 	ldfe	f1, [r0], #8
  40787c:	ecf0 2102 	ldfe	f2, [r0], #8
  407880:	ecf0 3102 	ldfe	f3, [r0], #8
  407884:	ecf0 4102 	ldfe	f4, [r0], #8
  407888:	ecf0 5102 	ldfe	f5, [r0], #8
  40788c:	ecf0 6102 	ldfe	f6, [r0], #8
  407890:	ecf0 7102 	ldfe	f7, [r0], #8
  407894:	ecf0 8102 	ldfp	f0, [r0], #8
  407898:	ecf0 9102 	ldfp	f1, [r0], #8
  40789c:	ecf0 a102 	ldfp	f2, [r0], #8
  4078a0:	ecf0 b102 	ldfp	f3, [r0], #8
  4078a4:	ecf0 c102 	ldfp	f4, [r0], #8
  4078a8:	ecf0 d102 	ldfp	f5, [r0], #8
  4078ac:	ecf0 e102 	ldfp	f6, [r0], #8
  4078b0:	ecf0 f102 	ldfp	f7, [r0], #8
  4078b4:	4770      	bx	lr
  4078b6:	bf00      	nop

004078b8 <__gnu_Unwind_Save_WMMXD>:
  4078b8:	ece0 0102 	stfe	f0, [r0], #8
  4078bc:	ece0 1102 	stfe	f1, [r0], #8
  4078c0:	ece0 2102 	stfe	f2, [r0], #8
  4078c4:	ece0 3102 	stfe	f3, [r0], #8
  4078c8:	ece0 4102 	stfe	f4, [r0], #8
  4078cc:	ece0 5102 	stfe	f5, [r0], #8
  4078d0:	ece0 6102 	stfe	f6, [r0], #8
  4078d4:	ece0 7102 	stfe	f7, [r0], #8
  4078d8:	ece0 8102 	stfp	f0, [r0], #8
  4078dc:	ece0 9102 	stfp	f1, [r0], #8
  4078e0:	ece0 a102 	stfp	f2, [r0], #8
  4078e4:	ece0 b102 	stfp	f3, [r0], #8
  4078e8:	ece0 c102 	stfp	f4, [r0], #8
  4078ec:	ece0 d102 	stfp	f5, [r0], #8
  4078f0:	ece0 e102 	stfp	f6, [r0], #8
  4078f4:	ece0 f102 	stfp	f7, [r0], #8
  4078f8:	4770      	bx	lr
  4078fa:	bf00      	nop

004078fc <__gnu_Unwind_Restore_WMMXC>:
  4078fc:	fcb0 8101 	ldc2	1, cr8, [r0], #4
  407900:	fcb0 9101 	ldc2	1, cr9, [r0], #4
  407904:	fcb0 a101 	ldc2	1, cr10, [r0], #4
  407908:	fcb0 b101 	ldc2	1, cr11, [r0], #4
  40790c:	4770      	bx	lr
  40790e:	bf00      	nop

00407910 <__gnu_Unwind_Save_WMMXC>:
  407910:	fca0 8101 	stc2	1, cr8, [r0], #4
  407914:	fca0 9101 	stc2	1, cr9, [r0], #4
  407918:	fca0 a101 	stc2	1, cr10, [r0], #4
  40791c:	fca0 b101 	stc2	1, cr11, [r0], #4
  407920:	4770      	bx	lr
  407922:	bf00      	nop

00407924 <_Unwind_RaiseException>:
  407924:	46ec      	mov	ip, sp
  407926:	b500      	push	{lr}
  407928:	e92d 5000 	stmdb	sp!, {ip, lr}
  40792c:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
  407930:	f04f 0300 	mov.w	r3, #0
  407934:	e92d 000c 	stmdb	sp!, {r2, r3}
  407938:	a901      	add	r1, sp, #4
  40793a:	f7ff fbbf 	bl	4070bc <__gnu_Unwind_RaiseException>
  40793e:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
  407942:	b012      	add	sp, #72	; 0x48
  407944:	4770      	bx	lr
  407946:	bf00      	nop

00407948 <_Unwind_Resume>:
  407948:	46ec      	mov	ip, sp
  40794a:	b500      	push	{lr}
  40794c:	e92d 5000 	stmdb	sp!, {ip, lr}
  407950:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
  407954:	f04f 0300 	mov.w	r3, #0
  407958:	e92d 000c 	stmdb	sp!, {r2, r3}
  40795c:	a901      	add	r1, sp, #4
  40795e:	f7ff fbe7 	bl	407130 <__gnu_Unwind_Resume>
  407962:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
  407966:	b012      	add	sp, #72	; 0x48
  407968:	4770      	bx	lr
  40796a:	bf00      	nop

0040796c <_Unwind_Resume_or_Rethrow>:
  40796c:	46ec      	mov	ip, sp
  40796e:	b500      	push	{lr}
  407970:	e92d 5000 	stmdb	sp!, {ip, lr}
  407974:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
  407978:	f04f 0300 	mov.w	r3, #0
  40797c:	e92d 000c 	stmdb	sp!, {r2, r3}
  407980:	a901      	add	r1, sp, #4
  407982:	f7ff fbf7 	bl	407174 <__gnu_Unwind_Resume_or_Rethrow>
  407986:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
  40798a:	b012      	add	sp, #72	; 0x48
  40798c:	4770      	bx	lr
  40798e:	bf00      	nop

00407990 <_Unwind_ForcedUnwind>:
  407990:	46ec      	mov	ip, sp
  407992:	b500      	push	{lr}
  407994:	e92d 5000 	stmdb	sp!, {ip, lr}
  407998:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
  40799c:	f04f 0300 	mov.w	r3, #0
  4079a0:	e92d 000c 	stmdb	sp!, {r2, r3}
  4079a4:	ab01      	add	r3, sp, #4
  4079a6:	f7ff fbb9 	bl	40711c <__gnu_Unwind_ForcedUnwind>
  4079aa:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
  4079ae:	b012      	add	sp, #72	; 0x48
  4079b0:	4770      	bx	lr
  4079b2:	bf00      	nop

004079b4 <_Unwind_Backtrace>:
  4079b4:	46ec      	mov	ip, sp
  4079b6:	b500      	push	{lr}
  4079b8:	e92d 5000 	stmdb	sp!, {ip, lr}
  4079bc:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
  4079c0:	f04f 0300 	mov.w	r3, #0
  4079c4:	e92d 000c 	stmdb	sp!, {r2, r3}
  4079c8:	aa01      	add	r2, sp, #4
  4079ca:	f7ff fc33 	bl	407234 <__gnu_Unwind_Backtrace>
  4079ce:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
  4079d2:	b012      	add	sp, #72	; 0x48
  4079d4:	4770      	bx	lr
  4079d6:	bf00      	nop

004079d8 <next_unwind_byte>:
  4079d8:	7a03      	ldrb	r3, [r0, #8]
  4079da:	b91b      	cbnz	r3, 4079e4 <next_unwind_byte+0xc>
  4079dc:	7a43      	ldrb	r3, [r0, #9]
  4079de:	b943      	cbnz	r3, 4079f2 <next_unwind_byte+0x1a>
  4079e0:	20b0      	movs	r0, #176	; 0xb0
  4079e2:	4770      	bx	lr
  4079e4:	1e5a      	subs	r2, r3, #1
  4079e6:	6803      	ldr	r3, [r0, #0]
  4079e8:	7202      	strb	r2, [r0, #8]
  4079ea:	021a      	lsls	r2, r3, #8
  4079ec:	6002      	str	r2, [r0, #0]
  4079ee:	0e18      	lsrs	r0, r3, #24
  4079f0:	4770      	bx	lr
  4079f2:	6842      	ldr	r2, [r0, #4]
  4079f4:	3b01      	subs	r3, #1
  4079f6:	b410      	push	{r4}
  4079f8:	7243      	strb	r3, [r0, #9]
  4079fa:	6813      	ldr	r3, [r2, #0]
  4079fc:	2103      	movs	r1, #3
  4079fe:	1d14      	adds	r4, r2, #4
  407a00:	7201      	strb	r1, [r0, #8]
  407a02:	021a      	lsls	r2, r3, #8
  407a04:	6044      	str	r4, [r0, #4]
  407a06:	6002      	str	r2, [r0, #0]
  407a08:	f85d 4b04 	ldr.w	r4, [sp], #4
  407a0c:	0e18      	lsrs	r0, r3, #24
  407a0e:	4770      	bx	lr

00407a10 <_Unwind_GetGR.constprop.0>:
  407a10:	b500      	push	{lr}
  407a12:	b085      	sub	sp, #20
  407a14:	ab03      	add	r3, sp, #12
  407a16:	2100      	movs	r1, #0
  407a18:	9300      	str	r3, [sp, #0]
  407a1a:	220c      	movs	r2, #12
  407a1c:	460b      	mov	r3, r1
  407a1e:	f7ff fbb9 	bl	407194 <_Unwind_VRS_Get>
  407a22:	9803      	ldr	r0, [sp, #12]
  407a24:	b005      	add	sp, #20
  407a26:	f85d fb04 	ldr.w	pc, [sp], #4
  407a2a:	bf00      	nop

00407a2c <unwind_UCB_from_context>:
  407a2c:	e7f0      	b.n	407a10 <_Unwind_GetGR.constprop.0>
  407a2e:	bf00      	nop

00407a30 <__gnu_unwind_execute>:
  407a30:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  407a34:	4606      	mov	r6, r0
  407a36:	b085      	sub	sp, #20
  407a38:	460d      	mov	r5, r1
  407a3a:	f04f 0800 	mov.w	r8, #0
  407a3e:	4628      	mov	r0, r5
  407a40:	f7ff ffca 	bl	4079d8 <next_unwind_byte>
  407a44:	28b0      	cmp	r0, #176	; 0xb0
  407a46:	4604      	mov	r4, r0
  407a48:	f000 80b5 	beq.w	407bb6 <__gnu_unwind_execute+0x186>
  407a4c:	f020 017f 	bic.w	r1, r0, #127	; 0x7f
  407a50:	f011 01ff 	ands.w	r1, r1, #255	; 0xff
  407a54:	d020      	beq.n	407a98 <__gnu_unwind_execute+0x68>
  407a56:	f000 03f0 	and.w	r3, r0, #240	; 0xf0
  407a5a:	2b80      	cmp	r3, #128	; 0x80
  407a5c:	d07a      	beq.n	407b54 <__gnu_unwind_execute+0x124>
  407a5e:	2b90      	cmp	r3, #144	; 0x90
  407a60:	d036      	beq.n	407ad0 <__gnu_unwind_execute+0xa0>
  407a62:	2ba0      	cmp	r3, #160	; 0xa0
  407a64:	d049      	beq.n	407afa <__gnu_unwind_execute+0xca>
  407a66:	2bb0      	cmp	r3, #176	; 0xb0
  407a68:	d05c      	beq.n	407b24 <__gnu_unwind_execute+0xf4>
  407a6a:	2bc0      	cmp	r3, #192	; 0xc0
  407a6c:	f000 8089 	beq.w	407b82 <__gnu_unwind_execute+0x152>
  407a70:	f000 03f8 	and.w	r3, r0, #248	; 0xf8
  407a74:	2bd0      	cmp	r3, #208	; 0xd0
  407a76:	d10b      	bne.n	407a90 <__gnu_unwind_execute+0x60>
  407a78:	f000 0207 	and.w	r2, r0, #7
  407a7c:	3201      	adds	r2, #1
  407a7e:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
  407a82:	4630      	mov	r0, r6
  407a84:	2101      	movs	r1, #1
  407a86:	2305      	movs	r3, #5
  407a88:	f7ff fd7c 	bl	407584 <_Unwind_VRS_Pop>
  407a8c:	2800      	cmp	r0, #0
  407a8e:	d0d6      	beq.n	407a3e <__gnu_unwind_execute+0xe>
  407a90:	2009      	movs	r0, #9
  407a92:	b005      	add	sp, #20
  407a94:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  407a98:	f10d 090c 	add.w	r9, sp, #12
  407a9c:	460b      	mov	r3, r1
  407a9e:	0087      	lsls	r7, r0, #2
  407aa0:	f8cd 9000 	str.w	r9, [sp]
  407aa4:	4630      	mov	r0, r6
  407aa6:	220d      	movs	r2, #13
  407aa8:	f7ff fb74 	bl	407194 <_Unwind_VRS_Get>
  407aac:	b2ff      	uxtb	r7, r7
  407aae:	9b03      	ldr	r3, [sp, #12]
  407ab0:	f8cd 9000 	str.w	r9, [sp]
  407ab4:	3704      	adds	r7, #4
  407ab6:	0660      	lsls	r0, r4, #25
  407ab8:	f04f 0100 	mov.w	r1, #0
  407abc:	bf4c      	ite	mi
  407abe:	1bdf      	submi	r7, r3, r7
  407ac0:	18ff      	addpl	r7, r7, r3
  407ac2:	4630      	mov	r0, r6
  407ac4:	460b      	mov	r3, r1
  407ac6:	220d      	movs	r2, #13
  407ac8:	9703      	str	r7, [sp, #12]
  407aca:	f7ff fb8b 	bl	4071e4 <_Unwind_VRS_Set>
  407ace:	e7b6      	b.n	407a3e <__gnu_unwind_execute+0xe>
  407ad0:	f000 030d 	and.w	r3, r0, #13
  407ad4:	2b0d      	cmp	r3, #13
  407ad6:	d0db      	beq.n	407a90 <__gnu_unwind_execute+0x60>
  407ad8:	af03      	add	r7, sp, #12
  407ada:	2100      	movs	r1, #0
  407adc:	f000 020f 	and.w	r2, r0, #15
  407ae0:	460b      	mov	r3, r1
  407ae2:	9700      	str	r7, [sp, #0]
  407ae4:	4630      	mov	r0, r6
  407ae6:	f7ff fb55 	bl	407194 <_Unwind_VRS_Get>
  407aea:	2100      	movs	r1, #0
  407aec:	9700      	str	r7, [sp, #0]
  407aee:	460b      	mov	r3, r1
  407af0:	4630      	mov	r0, r6
  407af2:	220d      	movs	r2, #13
  407af4:	f7ff fb76 	bl	4071e4 <_Unwind_VRS_Set>
  407af8:	e7a1      	b.n	407a3e <__gnu_unwind_execute+0xe>
  407afa:	43c3      	mvns	r3, r0
  407afc:	f003 0307 	and.w	r3, r3, #7
  407b00:	f44f 627f 	mov.w	r2, #4080	; 0xff0
  407b04:	411a      	asrs	r2, r3
  407b06:	0701      	lsls	r1, r0, #28
  407b08:	f402 627f 	and.w	r2, r2, #4080	; 0xff0
  407b0c:	f04f 0100 	mov.w	r1, #0
  407b10:	bf48      	it	mi
  407b12:	f442 4280 	orrmi.w	r2, r2, #16384	; 0x4000
  407b16:	460b      	mov	r3, r1
  407b18:	4630      	mov	r0, r6
  407b1a:	f7ff fd33 	bl	407584 <_Unwind_VRS_Pop>
  407b1e:	2800      	cmp	r0, #0
  407b20:	d1b6      	bne.n	407a90 <__gnu_unwind_execute+0x60>
  407b22:	e78c      	b.n	407a3e <__gnu_unwind_execute+0xe>
  407b24:	28b1      	cmp	r0, #177	; 0xb1
  407b26:	d04c      	beq.n	407bc2 <__gnu_unwind_execute+0x192>
  407b28:	28b2      	cmp	r0, #178	; 0xb2
  407b2a:	d05d      	beq.n	407be8 <__gnu_unwind_execute+0x1b8>
  407b2c:	28b3      	cmp	r0, #179	; 0xb3
  407b2e:	f000 808a 	beq.w	407c46 <__gnu_unwind_execute+0x216>
  407b32:	f000 03fc 	and.w	r3, r0, #252	; 0xfc
  407b36:	2bb4      	cmp	r3, #180	; 0xb4
  407b38:	d0aa      	beq.n	407a90 <__gnu_unwind_execute+0x60>
  407b3a:	f000 0207 	and.w	r2, r0, #7
  407b3e:	3201      	adds	r2, #1
  407b40:	2101      	movs	r1, #1
  407b42:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
  407b46:	460b      	mov	r3, r1
  407b48:	4630      	mov	r0, r6
  407b4a:	f7ff fd1b 	bl	407584 <_Unwind_VRS_Pop>
  407b4e:	2800      	cmp	r0, #0
  407b50:	d19e      	bne.n	407a90 <__gnu_unwind_execute+0x60>
  407b52:	e774      	b.n	407a3e <__gnu_unwind_execute+0xe>
  407b54:	4628      	mov	r0, r5
  407b56:	f7ff ff3f 	bl	4079d8 <next_unwind_byte>
  407b5a:	0224      	lsls	r4, r4, #8
  407b5c:	4320      	orrs	r0, r4
  407b5e:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
  407b62:	d095      	beq.n	407a90 <__gnu_unwind_execute+0x60>
  407b64:	0104      	lsls	r4, r0, #4
  407b66:	2100      	movs	r1, #0
  407b68:	b2a2      	uxth	r2, r4
  407b6a:	460b      	mov	r3, r1
  407b6c:	4630      	mov	r0, r6
  407b6e:	f7ff fd09 	bl	407584 <_Unwind_VRS_Pop>
  407b72:	2800      	cmp	r0, #0
  407b74:	d18c      	bne.n	407a90 <__gnu_unwind_execute+0x60>
  407b76:	f414 4f00 	tst.w	r4, #32768	; 0x8000
  407b7a:	bf18      	it	ne
  407b7c:	f04f 0801 	movne.w	r8, #1
  407b80:	e75d      	b.n	407a3e <__gnu_unwind_execute+0xe>
  407b82:	28c6      	cmp	r0, #198	; 0xc6
  407b84:	d072      	beq.n	407c6c <__gnu_unwind_execute+0x23c>
  407b86:	28c7      	cmp	r0, #199	; 0xc7
  407b88:	d07a      	beq.n	407c80 <__gnu_unwind_execute+0x250>
  407b8a:	f000 03f8 	and.w	r3, r0, #248	; 0xf8
  407b8e:	2bc0      	cmp	r3, #192	; 0xc0
  407b90:	f000 8089 	beq.w	407ca6 <__gnu_unwind_execute+0x276>
  407b94:	28c8      	cmp	r0, #200	; 0xc8
  407b96:	f000 80a5 	beq.w	407ce4 <__gnu_unwind_execute+0x2b4>
  407b9a:	28c9      	cmp	r0, #201	; 0xc9
  407b9c:	f47f af78 	bne.w	407a90 <__gnu_unwind_execute+0x60>
  407ba0:	4628      	mov	r0, r5
  407ba2:	f7ff ff19 	bl	4079d8 <next_unwind_byte>
  407ba6:	f000 020f 	and.w	r2, r0, #15
  407baa:	3201      	adds	r2, #1
  407bac:	f000 00f0 	and.w	r0, r0, #240	; 0xf0
  407bb0:	ea42 3200 	orr.w	r2, r2, r0, lsl #12
  407bb4:	e765      	b.n	407a82 <__gnu_unwind_execute+0x52>
  407bb6:	f1b8 0f00 	cmp.w	r8, #0
  407bba:	f000 8082 	beq.w	407cc2 <__gnu_unwind_execute+0x292>
  407bbe:	2000      	movs	r0, #0
  407bc0:	e767      	b.n	407a92 <__gnu_unwind_execute+0x62>
  407bc2:	4628      	mov	r0, r5
  407bc4:	f7ff ff08 	bl	4079d8 <next_unwind_byte>
  407bc8:	4602      	mov	r2, r0
  407bca:	2800      	cmp	r0, #0
  407bcc:	f43f af60 	beq.w	407a90 <__gnu_unwind_execute+0x60>
  407bd0:	f010 01f0 	ands.w	r1, r0, #240	; 0xf0
  407bd4:	f47f af5c 	bne.w	407a90 <__gnu_unwind_execute+0x60>
  407bd8:	4630      	mov	r0, r6
  407bda:	460b      	mov	r3, r1
  407bdc:	f7ff fcd2 	bl	407584 <_Unwind_VRS_Pop>
  407be0:	2800      	cmp	r0, #0
  407be2:	f47f af55 	bne.w	407a90 <__gnu_unwind_execute+0x60>
  407be6:	e72a      	b.n	407a3e <__gnu_unwind_execute+0xe>
  407be8:	2100      	movs	r1, #0
  407bea:	f10d 090c 	add.w	r9, sp, #12
  407bee:	220d      	movs	r2, #13
  407bf0:	460b      	mov	r3, r1
  407bf2:	f8cd 9000 	str.w	r9, [sp]
  407bf6:	4630      	mov	r0, r6
  407bf8:	f7ff facc 	bl	407194 <_Unwind_VRS_Get>
  407bfc:	4628      	mov	r0, r5
  407bfe:	f7ff feeb 	bl	4079d8 <next_unwind_byte>
  407c02:	0602      	lsls	r2, r0, #24
  407c04:	f04f 0402 	mov.w	r4, #2
  407c08:	d50c      	bpl.n	407c24 <__gnu_unwind_execute+0x1f4>
  407c0a:	9b03      	ldr	r3, [sp, #12]
  407c0c:	f000 007f 	and.w	r0, r0, #127	; 0x7f
  407c10:	40a0      	lsls	r0, r4
  407c12:	4403      	add	r3, r0
  407c14:	4628      	mov	r0, r5
  407c16:	9303      	str	r3, [sp, #12]
  407c18:	f7ff fede 	bl	4079d8 <next_unwind_byte>
  407c1c:	0603      	lsls	r3, r0, #24
  407c1e:	f104 0407 	add.w	r4, r4, #7
  407c22:	d4f2      	bmi.n	407c0a <__gnu_unwind_execute+0x1da>
  407c24:	9b03      	ldr	r3, [sp, #12]
  407c26:	f8cd 9000 	str.w	r9, [sp]
  407c2a:	f000 007f 	and.w	r0, r0, #127	; 0x7f
  407c2e:	40a0      	lsls	r0, r4
  407c30:	f503 7301 	add.w	r3, r3, #516	; 0x204
  407c34:	2100      	movs	r1, #0
  407c36:	181c      	adds	r4, r3, r0
  407c38:	220d      	movs	r2, #13
  407c3a:	460b      	mov	r3, r1
  407c3c:	4630      	mov	r0, r6
  407c3e:	9403      	str	r4, [sp, #12]
  407c40:	f7ff fad0 	bl	4071e4 <_Unwind_VRS_Set>
  407c44:	e6fb      	b.n	407a3e <__gnu_unwind_execute+0xe>
  407c46:	4628      	mov	r0, r5
  407c48:	f7ff fec6 	bl	4079d8 <next_unwind_byte>
  407c4c:	f000 020f 	and.w	r2, r0, #15
  407c50:	3201      	adds	r2, #1
  407c52:	f000 00f0 	and.w	r0, r0, #240	; 0xf0
  407c56:	2101      	movs	r1, #1
  407c58:	ea42 3200 	orr.w	r2, r2, r0, lsl #12
  407c5c:	460b      	mov	r3, r1
  407c5e:	4630      	mov	r0, r6
  407c60:	f7ff fc90 	bl	407584 <_Unwind_VRS_Pop>
  407c64:	2800      	cmp	r0, #0
  407c66:	f47f af13 	bne.w	407a90 <__gnu_unwind_execute+0x60>
  407c6a:	e6e8      	b.n	407a3e <__gnu_unwind_execute+0xe>
  407c6c:	4628      	mov	r0, r5
  407c6e:	f7ff feb3 	bl	4079d8 <next_unwind_byte>
  407c72:	f000 020f 	and.w	r2, r0, #15
  407c76:	3201      	adds	r2, #1
  407c78:	f000 00f0 	and.w	r0, r0, #240	; 0xf0
  407c7c:	2103      	movs	r1, #3
  407c7e:	e7eb      	b.n	407c58 <__gnu_unwind_execute+0x228>
  407c80:	4628      	mov	r0, r5
  407c82:	f7ff fea9 	bl	4079d8 <next_unwind_byte>
  407c86:	4602      	mov	r2, r0
  407c88:	2800      	cmp	r0, #0
  407c8a:	f43f af01 	beq.w	407a90 <__gnu_unwind_execute+0x60>
  407c8e:	f010 03f0 	ands.w	r3, r0, #240	; 0xf0
  407c92:	f47f aefd 	bne.w	407a90 <__gnu_unwind_execute+0x60>
  407c96:	4630      	mov	r0, r6
  407c98:	2104      	movs	r1, #4
  407c9a:	f7ff fc73 	bl	407584 <_Unwind_VRS_Pop>
  407c9e:	2800      	cmp	r0, #0
  407ca0:	f47f aef6 	bne.w	407a90 <__gnu_unwind_execute+0x60>
  407ca4:	e6cb      	b.n	407a3e <__gnu_unwind_execute+0xe>
  407ca6:	f000 020f 	and.w	r2, r0, #15
  407caa:	3201      	adds	r2, #1
  407cac:	2103      	movs	r1, #3
  407cae:	f442 2220 	orr.w	r2, r2, #655360	; 0xa0000
  407cb2:	460b      	mov	r3, r1
  407cb4:	4630      	mov	r0, r6
  407cb6:	f7ff fc65 	bl	407584 <_Unwind_VRS_Pop>
  407cba:	2800      	cmp	r0, #0
  407cbc:	f47f aee8 	bne.w	407a90 <__gnu_unwind_execute+0x60>
  407cc0:	e6bd      	b.n	407a3e <__gnu_unwind_execute+0xe>
  407cc2:	ac03      	add	r4, sp, #12
  407cc4:	4641      	mov	r1, r8
  407cc6:	220e      	movs	r2, #14
  407cc8:	4643      	mov	r3, r8
  407cca:	9400      	str	r4, [sp, #0]
  407ccc:	4630      	mov	r0, r6
  407cce:	f7ff fa61 	bl	407194 <_Unwind_VRS_Get>
  407cd2:	9400      	str	r4, [sp, #0]
  407cd4:	4630      	mov	r0, r6
  407cd6:	4641      	mov	r1, r8
  407cd8:	220f      	movs	r2, #15
  407cda:	4643      	mov	r3, r8
  407cdc:	f7ff fa82 	bl	4071e4 <_Unwind_VRS_Set>
  407ce0:	4640      	mov	r0, r8
  407ce2:	e6d6      	b.n	407a92 <__gnu_unwind_execute+0x62>
  407ce4:	4628      	mov	r0, r5
  407ce6:	f7ff fe77 	bl	4079d8 <next_unwind_byte>
  407cea:	f000 02f0 	and.w	r2, r0, #240	; 0xf0
  407cee:	f000 030f 	and.w	r3, r0, #15
  407cf2:	3210      	adds	r2, #16
  407cf4:	3301      	adds	r3, #1
  407cf6:	ea43 3202 	orr.w	r2, r3, r2, lsl #12
  407cfa:	e6c2      	b.n	407a82 <__gnu_unwind_execute+0x52>

00407cfc <__gnu_unwind_frame>:
  407cfc:	b510      	push	{r4, lr}
  407cfe:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
  407d00:	b084      	sub	sp, #16
  407d02:	685a      	ldr	r2, [r3, #4]
  407d04:	2003      	movs	r0, #3
  407d06:	f88d 000c 	strb.w	r0, [sp, #12]
  407d0a:	79dc      	ldrb	r4, [r3, #7]
  407d0c:	f88d 400d 	strb.w	r4, [sp, #13]
  407d10:	0212      	lsls	r2, r2, #8
  407d12:	3308      	adds	r3, #8
  407d14:	4608      	mov	r0, r1
  407d16:	a901      	add	r1, sp, #4
  407d18:	9201      	str	r2, [sp, #4]
  407d1a:	9302      	str	r3, [sp, #8]
  407d1c:	f7ff fe88 	bl	407a30 <__gnu_unwind_execute>
  407d20:	b004      	add	sp, #16
  407d22:	bd10      	pop	{r4, pc}

00407d24 <_Unwind_GetRegionStart>:
  407d24:	b508      	push	{r3, lr}
  407d26:	f7ff fe81 	bl	407a2c <unwind_UCB_from_context>
  407d2a:	6c80      	ldr	r0, [r0, #72]	; 0x48
  407d2c:	bd08      	pop	{r3, pc}
  407d2e:	bf00      	nop

00407d30 <_Unwind_GetLanguageSpecificData>:
  407d30:	b508      	push	{r3, lr}
  407d32:	f7ff fe7b 	bl	407a2c <unwind_UCB_from_context>
  407d36:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
  407d38:	79d8      	ldrb	r0, [r3, #7]
  407d3a:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  407d3e:	3008      	adds	r0, #8
  407d40:	bd08      	pop	{r3, pc}
  407d42:	bf00      	nop

00407d44 <_Unwind_GetDataRelBase>:
  407d44:	b508      	push	{r3, lr}
  407d46:	f000 f805 	bl	407d54 <abort>
  407d4a:	bf00      	nop

00407d4c <_Unwind_GetTextRelBase>:
  407d4c:	b508      	push	{r3, lr}
  407d4e:	f000 f801 	bl	407d54 <abort>
  407d52:	bf00      	nop

00407d54 <abort>:
  407d54:	b508      	push	{r3, lr}
  407d56:	2006      	movs	r0, #6
  407d58:	f001 fc52 	bl	409600 <raise>
  407d5c:	2001      	movs	r0, #1
  407d5e:	f7fa f85d 	bl	401e1c <_exit>
  407d62:	bf00      	nop

00407d64 <__assert_func>:
  407d64:	b500      	push	{lr}
  407d66:	4c0a      	ldr	r4, [pc, #40]	; (407d90 <__assert_func+0x2c>)
  407d68:	6824      	ldr	r4, [r4, #0]
  407d6a:	4605      	mov	r5, r0
  407d6c:	b085      	sub	sp, #20
  407d6e:	68e0      	ldr	r0, [r4, #12]
  407d70:	b152      	cbz	r2, 407d88 <__assert_func+0x24>
  407d72:	4c08      	ldr	r4, [pc, #32]	; (407d94 <__assert_func+0x30>)
  407d74:	9202      	str	r2, [sp, #8]
  407d76:	e88d 0012 	stmia.w	sp, {r1, r4}
  407d7a:	461a      	mov	r2, r3
  407d7c:	4906      	ldr	r1, [pc, #24]	; (407d98 <__assert_func+0x34>)
  407d7e:	462b      	mov	r3, r5
  407d80:	f000 f9d0 	bl	408124 <fiprintf>
  407d84:	f7ff ffe6 	bl	407d54 <abort>
  407d88:	4c04      	ldr	r4, [pc, #16]	; (407d9c <__assert_func+0x38>)
  407d8a:	4622      	mov	r2, r4
  407d8c:	e7f2      	b.n	407d74 <__assert_func+0x10>
  407d8e:	bf00      	nop
  407d90:	200008b0 	.word	0x200008b0
  407d94:	00411b50 	.word	0x00411b50
  407d98:	00411b60 	.word	0x00411b60
  407d9c:	00411480 	.word	0x00411480

00407da0 <calloc>:
  407da0:	4b02      	ldr	r3, [pc, #8]	; (407dac <calloc+0xc>)
  407da2:	460a      	mov	r2, r1
  407da4:	4601      	mov	r1, r0
  407da6:	6818      	ldr	r0, [r3, #0]
  407da8:	f000 b802 	b.w	407db0 <_calloc_r>
  407dac:	200008b0 	.word	0x200008b0

00407db0 <_calloc_r>:
  407db0:	b510      	push	{r4, lr}
  407db2:	fb02 f101 	mul.w	r1, r2, r1
  407db6:	f000 fd89 	bl	4088cc <_malloc_r>
  407dba:	4604      	mov	r4, r0
  407dbc:	b168      	cbz	r0, 407dda <_calloc_r+0x2a>
  407dbe:	f850 2c04 	ldr.w	r2, [r0, #-4]
  407dc2:	f022 0203 	bic.w	r2, r2, #3
  407dc6:	3a04      	subs	r2, #4
  407dc8:	2a24      	cmp	r2, #36	; 0x24
  407dca:	d818      	bhi.n	407dfe <_calloc_r+0x4e>
  407dcc:	2a13      	cmp	r2, #19
  407dce:	d806      	bhi.n	407dde <_calloc_r+0x2e>
  407dd0:	4603      	mov	r3, r0
  407dd2:	2200      	movs	r2, #0
  407dd4:	601a      	str	r2, [r3, #0]
  407dd6:	605a      	str	r2, [r3, #4]
  407dd8:	609a      	str	r2, [r3, #8]
  407dda:	4620      	mov	r0, r4
  407ddc:	bd10      	pop	{r4, pc}
  407dde:	2300      	movs	r3, #0
  407de0:	2a1b      	cmp	r2, #27
  407de2:	6003      	str	r3, [r0, #0]
  407de4:	6043      	str	r3, [r0, #4]
  407de6:	d90f      	bls.n	407e08 <_calloc_r+0x58>
  407de8:	2a24      	cmp	r2, #36	; 0x24
  407dea:	6083      	str	r3, [r0, #8]
  407dec:	60c3      	str	r3, [r0, #12]
  407dee:	bf05      	ittet	eq
  407df0:	6103      	streq	r3, [r0, #16]
  407df2:	6143      	streq	r3, [r0, #20]
  407df4:	f100 0310 	addne.w	r3, r0, #16
  407df8:	f100 0318 	addeq.w	r3, r0, #24
  407dfc:	e7e9      	b.n	407dd2 <_calloc_r+0x22>
  407dfe:	2100      	movs	r1, #0
  407e00:	f001 f970 	bl	4090e4 <memset>
  407e04:	4620      	mov	r0, r4
  407e06:	bd10      	pop	{r4, pc}
  407e08:	f100 0308 	add.w	r3, r0, #8
  407e0c:	e7e1      	b.n	407dd2 <_calloc_r+0x22>
  407e0e:	bf00      	nop

00407e10 <_fclose_r>:
  407e10:	2900      	cmp	r1, #0
  407e12:	d03d      	beq.n	407e90 <_fclose_r+0x80>
  407e14:	b570      	push	{r4, r5, r6, lr}
  407e16:	4605      	mov	r5, r0
  407e18:	460c      	mov	r4, r1
  407e1a:	b108      	cbz	r0, 407e20 <_fclose_r+0x10>
  407e1c:	6b83      	ldr	r3, [r0, #56]	; 0x38
  407e1e:	b37b      	cbz	r3, 407e80 <_fclose_r+0x70>
  407e20:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  407e24:	b90b      	cbnz	r3, 407e2a <_fclose_r+0x1a>
  407e26:	2000      	movs	r0, #0
  407e28:	bd70      	pop	{r4, r5, r6, pc}
  407e2a:	4628      	mov	r0, r5
  407e2c:	4621      	mov	r1, r4
  407e2e:	f000 f831 	bl	407e94 <__sflush_r>
  407e32:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  407e34:	4606      	mov	r6, r0
  407e36:	b133      	cbz	r3, 407e46 <_fclose_r+0x36>
  407e38:	4628      	mov	r0, r5
  407e3a:	69e1      	ldr	r1, [r4, #28]
  407e3c:	4798      	blx	r3
  407e3e:	2800      	cmp	r0, #0
  407e40:	bfb8      	it	lt
  407e42:	f04f 36ff 	movlt.w	r6, #4294967295
  407e46:	89a3      	ldrh	r3, [r4, #12]
  407e48:	061b      	lsls	r3, r3, #24
  407e4a:	d41c      	bmi.n	407e86 <_fclose_r+0x76>
  407e4c:	6b21      	ldr	r1, [r4, #48]	; 0x30
  407e4e:	b141      	cbz	r1, 407e62 <_fclose_r+0x52>
  407e50:	f104 0340 	add.w	r3, r4, #64	; 0x40
  407e54:	4299      	cmp	r1, r3
  407e56:	d002      	beq.n	407e5e <_fclose_r+0x4e>
  407e58:	4628      	mov	r0, r5
  407e5a:	f000 f9d9 	bl	408210 <_free_r>
  407e5e:	2300      	movs	r3, #0
  407e60:	6323      	str	r3, [r4, #48]	; 0x30
  407e62:	6c61      	ldr	r1, [r4, #68]	; 0x44
  407e64:	b121      	cbz	r1, 407e70 <_fclose_r+0x60>
  407e66:	4628      	mov	r0, r5
  407e68:	f000 f9d2 	bl	408210 <_free_r>
  407e6c:	2300      	movs	r3, #0
  407e6e:	6463      	str	r3, [r4, #68]	; 0x44
  407e70:	f000 f954 	bl	40811c <__sfp_lock_acquire>
  407e74:	2300      	movs	r3, #0
  407e76:	81a3      	strh	r3, [r4, #12]
  407e78:	f000 f952 	bl	408120 <__sfp_lock_release>
  407e7c:	4630      	mov	r0, r6
  407e7e:	bd70      	pop	{r4, r5, r6, pc}
  407e80:	f000 f946 	bl	408110 <__sinit>
  407e84:	e7cc      	b.n	407e20 <_fclose_r+0x10>
  407e86:	4628      	mov	r0, r5
  407e88:	6921      	ldr	r1, [r4, #16]
  407e8a:	f000 f9c1 	bl	408210 <_free_r>
  407e8e:	e7dd      	b.n	407e4c <_fclose_r+0x3c>
  407e90:	2000      	movs	r0, #0
  407e92:	4770      	bx	lr

00407e94 <__sflush_r>:
  407e94:	898b      	ldrh	r3, [r1, #12]
  407e96:	b29a      	uxth	r2, r3
  407e98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  407e9c:	460d      	mov	r5, r1
  407e9e:	0711      	lsls	r1, r2, #28
  407ea0:	4680      	mov	r8, r0
  407ea2:	d43c      	bmi.n	407f1e <__sflush_r+0x8a>
  407ea4:	686a      	ldr	r2, [r5, #4]
  407ea6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
  407eaa:	2a00      	cmp	r2, #0
  407eac:	81ab      	strh	r3, [r5, #12]
  407eae:	dd65      	ble.n	407f7c <__sflush_r+0xe8>
  407eb0:	6aae      	ldr	r6, [r5, #40]	; 0x28
  407eb2:	2e00      	cmp	r6, #0
  407eb4:	d04b      	beq.n	407f4e <__sflush_r+0xba>
  407eb6:	b29b      	uxth	r3, r3
  407eb8:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
  407ebc:	2100      	movs	r1, #0
  407ebe:	b292      	uxth	r2, r2
  407ec0:	f8d8 4000 	ldr.w	r4, [r8]
  407ec4:	f8c8 1000 	str.w	r1, [r8]
  407ec8:	2a00      	cmp	r2, #0
  407eca:	d05b      	beq.n	407f84 <__sflush_r+0xf0>
  407ecc:	6d2a      	ldr	r2, [r5, #80]	; 0x50
  407ece:	075f      	lsls	r7, r3, #29
  407ed0:	d505      	bpl.n	407ede <__sflush_r+0x4a>
  407ed2:	6869      	ldr	r1, [r5, #4]
  407ed4:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  407ed6:	1a52      	subs	r2, r2, r1
  407ed8:	b10b      	cbz	r3, 407ede <__sflush_r+0x4a>
  407eda:	6beb      	ldr	r3, [r5, #60]	; 0x3c
  407edc:	1ad2      	subs	r2, r2, r3
  407ede:	4640      	mov	r0, r8
  407ee0:	69e9      	ldr	r1, [r5, #28]
  407ee2:	2300      	movs	r3, #0
  407ee4:	47b0      	blx	r6
  407ee6:	1c46      	adds	r6, r0, #1
  407ee8:	d056      	beq.n	407f98 <__sflush_r+0x104>
  407eea:	89ab      	ldrh	r3, [r5, #12]
  407eec:	692a      	ldr	r2, [r5, #16]
  407eee:	602a      	str	r2, [r5, #0]
  407ef0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  407ef4:	b29b      	uxth	r3, r3
  407ef6:	2200      	movs	r2, #0
  407ef8:	606a      	str	r2, [r5, #4]
  407efa:	04da      	lsls	r2, r3, #19
  407efc:	81ab      	strh	r3, [r5, #12]
  407efe:	d43b      	bmi.n	407f78 <__sflush_r+0xe4>
  407f00:	6b29      	ldr	r1, [r5, #48]	; 0x30
  407f02:	f8c8 4000 	str.w	r4, [r8]
  407f06:	b311      	cbz	r1, 407f4e <__sflush_r+0xba>
  407f08:	f105 0340 	add.w	r3, r5, #64	; 0x40
  407f0c:	4299      	cmp	r1, r3
  407f0e:	d002      	beq.n	407f16 <__sflush_r+0x82>
  407f10:	4640      	mov	r0, r8
  407f12:	f000 f97d 	bl	408210 <_free_r>
  407f16:	2000      	movs	r0, #0
  407f18:	6328      	str	r0, [r5, #48]	; 0x30
  407f1a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  407f1e:	692e      	ldr	r6, [r5, #16]
  407f20:	b1ae      	cbz	r6, 407f4e <__sflush_r+0xba>
  407f22:	682c      	ldr	r4, [r5, #0]
  407f24:	602e      	str	r6, [r5, #0]
  407f26:	0791      	lsls	r1, r2, #30
  407f28:	bf0c      	ite	eq
  407f2a:	696b      	ldreq	r3, [r5, #20]
  407f2c:	2300      	movne	r3, #0
  407f2e:	1ba4      	subs	r4, r4, r6
  407f30:	60ab      	str	r3, [r5, #8]
  407f32:	e00a      	b.n	407f4a <__sflush_r+0xb6>
  407f34:	4632      	mov	r2, r6
  407f36:	4623      	mov	r3, r4
  407f38:	6a6f      	ldr	r7, [r5, #36]	; 0x24
  407f3a:	69e9      	ldr	r1, [r5, #28]
  407f3c:	4640      	mov	r0, r8
  407f3e:	47b8      	blx	r7
  407f40:	2800      	cmp	r0, #0
  407f42:	eba4 0400 	sub.w	r4, r4, r0
  407f46:	4406      	add	r6, r0
  407f48:	dd04      	ble.n	407f54 <__sflush_r+0xc0>
  407f4a:	2c00      	cmp	r4, #0
  407f4c:	dcf2      	bgt.n	407f34 <__sflush_r+0xa0>
  407f4e:	2000      	movs	r0, #0
  407f50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  407f54:	89ab      	ldrh	r3, [r5, #12]
  407f56:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  407f5a:	81ab      	strh	r3, [r5, #12]
  407f5c:	f04f 30ff 	mov.w	r0, #4294967295
  407f60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  407f64:	89ab      	ldrh	r3, [r5, #12]
  407f66:	692a      	ldr	r2, [r5, #16]
  407f68:	6069      	str	r1, [r5, #4]
  407f6a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  407f6e:	b29b      	uxth	r3, r3
  407f70:	81ab      	strh	r3, [r5, #12]
  407f72:	04db      	lsls	r3, r3, #19
  407f74:	602a      	str	r2, [r5, #0]
  407f76:	d5c3      	bpl.n	407f00 <__sflush_r+0x6c>
  407f78:	6528      	str	r0, [r5, #80]	; 0x50
  407f7a:	e7c1      	b.n	407f00 <__sflush_r+0x6c>
  407f7c:	6bea      	ldr	r2, [r5, #60]	; 0x3c
  407f7e:	2a00      	cmp	r2, #0
  407f80:	dc96      	bgt.n	407eb0 <__sflush_r+0x1c>
  407f82:	e7e4      	b.n	407f4e <__sflush_r+0xba>
  407f84:	2301      	movs	r3, #1
  407f86:	4640      	mov	r0, r8
  407f88:	69e9      	ldr	r1, [r5, #28]
  407f8a:	47b0      	blx	r6
  407f8c:	1c43      	adds	r3, r0, #1
  407f8e:	4602      	mov	r2, r0
  407f90:	d019      	beq.n	407fc6 <__sflush_r+0x132>
  407f92:	89ab      	ldrh	r3, [r5, #12]
  407f94:	6aae      	ldr	r6, [r5, #40]	; 0x28
  407f96:	e79a      	b.n	407ece <__sflush_r+0x3a>
  407f98:	f8d8 1000 	ldr.w	r1, [r8]
  407f9c:	2900      	cmp	r1, #0
  407f9e:	d0e1      	beq.n	407f64 <__sflush_r+0xd0>
  407fa0:	291d      	cmp	r1, #29
  407fa2:	d007      	beq.n	407fb4 <__sflush_r+0x120>
  407fa4:	2916      	cmp	r1, #22
  407fa6:	d005      	beq.n	407fb4 <__sflush_r+0x120>
  407fa8:	89ab      	ldrh	r3, [r5, #12]
  407faa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  407fae:	81ab      	strh	r3, [r5, #12]
  407fb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  407fb4:	89ab      	ldrh	r3, [r5, #12]
  407fb6:	692a      	ldr	r2, [r5, #16]
  407fb8:	602a      	str	r2, [r5, #0]
  407fba:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  407fbe:	2200      	movs	r2, #0
  407fc0:	81ab      	strh	r3, [r5, #12]
  407fc2:	606a      	str	r2, [r5, #4]
  407fc4:	e79c      	b.n	407f00 <__sflush_r+0x6c>
  407fc6:	f8d8 3000 	ldr.w	r3, [r8]
  407fca:	2b00      	cmp	r3, #0
  407fcc:	d0e1      	beq.n	407f92 <__sflush_r+0xfe>
  407fce:	2b1d      	cmp	r3, #29
  407fd0:	d007      	beq.n	407fe2 <__sflush_r+0x14e>
  407fd2:	2b16      	cmp	r3, #22
  407fd4:	d005      	beq.n	407fe2 <__sflush_r+0x14e>
  407fd6:	89ab      	ldrh	r3, [r5, #12]
  407fd8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  407fdc:	81ab      	strh	r3, [r5, #12]
  407fde:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  407fe2:	f8c8 4000 	str.w	r4, [r8]
  407fe6:	e7b2      	b.n	407f4e <__sflush_r+0xba>

00407fe8 <_fflush_r>:
  407fe8:	b510      	push	{r4, lr}
  407fea:	4604      	mov	r4, r0
  407fec:	b082      	sub	sp, #8
  407fee:	b108      	cbz	r0, 407ff4 <_fflush_r+0xc>
  407ff0:	6b83      	ldr	r3, [r0, #56]	; 0x38
  407ff2:	b153      	cbz	r3, 40800a <_fflush_r+0x22>
  407ff4:	f9b1 000c 	ldrsh.w	r0, [r1, #12]
  407ff8:	b908      	cbnz	r0, 407ffe <_fflush_r+0x16>
  407ffa:	b002      	add	sp, #8
  407ffc:	bd10      	pop	{r4, pc}
  407ffe:	4620      	mov	r0, r4
  408000:	b002      	add	sp, #8
  408002:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  408006:	f7ff bf45 	b.w	407e94 <__sflush_r>
  40800a:	9101      	str	r1, [sp, #4]
  40800c:	f000 f880 	bl	408110 <__sinit>
  408010:	9901      	ldr	r1, [sp, #4]
  408012:	e7ef      	b.n	407ff4 <_fflush_r+0xc>

00408014 <_cleanup_r>:
  408014:	4901      	ldr	r1, [pc, #4]	; (40801c <_cleanup_r+0x8>)
  408016:	f000 bb73 	b.w	408700 <_fwalk_reent>
  40801a:	bf00      	nop
  40801c:	00407e11 	.word	0x00407e11

00408020 <__sinit.part.1>:
  408020:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  408024:	4b35      	ldr	r3, [pc, #212]	; (4080fc <__sinit.part.1+0xdc>)
  408026:	6845      	ldr	r5, [r0, #4]
  408028:	63c3      	str	r3, [r0, #60]	; 0x3c
  40802a:	2400      	movs	r4, #0
  40802c:	4607      	mov	r7, r0
  40802e:	f500 723b 	add.w	r2, r0, #748	; 0x2ec
  408032:	2304      	movs	r3, #4
  408034:	2103      	movs	r1, #3
  408036:	f8c0 12e4 	str.w	r1, [r0, #740]	; 0x2e4
  40803a:	f8c0 22e8 	str.w	r2, [r0, #744]	; 0x2e8
  40803e:	f8c0 42e0 	str.w	r4, [r0, #736]	; 0x2e0
  408042:	b083      	sub	sp, #12
  408044:	602c      	str	r4, [r5, #0]
  408046:	606c      	str	r4, [r5, #4]
  408048:	60ac      	str	r4, [r5, #8]
  40804a:	666c      	str	r4, [r5, #100]	; 0x64
  40804c:	81ec      	strh	r4, [r5, #14]
  40804e:	612c      	str	r4, [r5, #16]
  408050:	616c      	str	r4, [r5, #20]
  408052:	61ac      	str	r4, [r5, #24]
  408054:	81ab      	strh	r3, [r5, #12]
  408056:	4621      	mov	r1, r4
  408058:	f105 005c 	add.w	r0, r5, #92	; 0x5c
  40805c:	2208      	movs	r2, #8
  40805e:	f001 f841 	bl	4090e4 <memset>
  408062:	68be      	ldr	r6, [r7, #8]
  408064:	f8df b098 	ldr.w	fp, [pc, #152]	; 408100 <__sinit.part.1+0xe0>
  408068:	f8df a098 	ldr.w	sl, [pc, #152]	; 408104 <__sinit.part.1+0xe4>
  40806c:	f8df 9098 	ldr.w	r9, [pc, #152]	; 408108 <__sinit.part.1+0xe8>
  408070:	f8df 8098 	ldr.w	r8, [pc, #152]	; 40810c <__sinit.part.1+0xec>
  408074:	f8c5 b020 	str.w	fp, [r5, #32]
  408078:	2301      	movs	r3, #1
  40807a:	2209      	movs	r2, #9
  40807c:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
  408080:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
  408084:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
  408088:	61ed      	str	r5, [r5, #28]
  40808a:	4621      	mov	r1, r4
  40808c:	81f3      	strh	r3, [r6, #14]
  40808e:	81b2      	strh	r2, [r6, #12]
  408090:	f106 005c 	add.w	r0, r6, #92	; 0x5c
  408094:	6034      	str	r4, [r6, #0]
  408096:	6074      	str	r4, [r6, #4]
  408098:	60b4      	str	r4, [r6, #8]
  40809a:	6674      	str	r4, [r6, #100]	; 0x64
  40809c:	6134      	str	r4, [r6, #16]
  40809e:	6174      	str	r4, [r6, #20]
  4080a0:	61b4      	str	r4, [r6, #24]
  4080a2:	2208      	movs	r2, #8
  4080a4:	9301      	str	r3, [sp, #4]
  4080a6:	f001 f81d 	bl	4090e4 <memset>
  4080aa:	68fd      	ldr	r5, [r7, #12]
  4080ac:	61f6      	str	r6, [r6, #28]
  4080ae:	2012      	movs	r0, #18
  4080b0:	2202      	movs	r2, #2
  4080b2:	f8c6 b020 	str.w	fp, [r6, #32]
  4080b6:	f8c6 a024 	str.w	sl, [r6, #36]	; 0x24
  4080ba:	f8c6 9028 	str.w	r9, [r6, #40]	; 0x28
  4080be:	f8c6 802c 	str.w	r8, [r6, #44]	; 0x2c
  4080c2:	4621      	mov	r1, r4
  4080c4:	81a8      	strh	r0, [r5, #12]
  4080c6:	81ea      	strh	r2, [r5, #14]
  4080c8:	602c      	str	r4, [r5, #0]
  4080ca:	606c      	str	r4, [r5, #4]
  4080cc:	60ac      	str	r4, [r5, #8]
  4080ce:	666c      	str	r4, [r5, #100]	; 0x64
  4080d0:	612c      	str	r4, [r5, #16]
  4080d2:	616c      	str	r4, [r5, #20]
  4080d4:	61ac      	str	r4, [r5, #24]
  4080d6:	f105 005c 	add.w	r0, r5, #92	; 0x5c
  4080da:	2208      	movs	r2, #8
  4080dc:	f001 f802 	bl	4090e4 <memset>
  4080e0:	9b01      	ldr	r3, [sp, #4]
  4080e2:	61ed      	str	r5, [r5, #28]
  4080e4:	f8c5 b020 	str.w	fp, [r5, #32]
  4080e8:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
  4080ec:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
  4080f0:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
  4080f4:	63bb      	str	r3, [r7, #56]	; 0x38
  4080f6:	b003      	add	sp, #12
  4080f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4080fc:	00408015 	.word	0x00408015
  408100:	00409725 	.word	0x00409725
  408104:	00409749 	.word	0x00409749
  408108:	00409781 	.word	0x00409781
  40810c:	004097a1 	.word	0x004097a1

00408110 <__sinit>:
  408110:	6b83      	ldr	r3, [r0, #56]	; 0x38
  408112:	b103      	cbz	r3, 408116 <__sinit+0x6>
  408114:	4770      	bx	lr
  408116:	f7ff bf83 	b.w	408020 <__sinit.part.1>
  40811a:	bf00      	nop

0040811c <__sfp_lock_acquire>:
  40811c:	4770      	bx	lr
  40811e:	bf00      	nop

00408120 <__sfp_lock_release>:
  408120:	4770      	bx	lr
  408122:	bf00      	nop

00408124 <fiprintf>:
  408124:	b40e      	push	{r1, r2, r3}
  408126:	b510      	push	{r4, lr}
  408128:	b083      	sub	sp, #12
  40812a:	ab05      	add	r3, sp, #20
  40812c:	4c06      	ldr	r4, [pc, #24]	; (408148 <fiprintf+0x24>)
  40812e:	f853 2b04 	ldr.w	r2, [r3], #4
  408132:	9301      	str	r3, [sp, #4]
  408134:	4601      	mov	r1, r0
  408136:	6820      	ldr	r0, [r4, #0]
  408138:	f002 fe54 	bl	40ade4 <_vfiprintf_r>
  40813c:	b003      	add	sp, #12
  40813e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  408142:	b003      	add	sp, #12
  408144:	4770      	bx	lr
  408146:	bf00      	nop
  408148:	200008b0 	.word	0x200008b0

0040814c <fprintf>:
  40814c:	b40e      	push	{r1, r2, r3}
  40814e:	b510      	push	{r4, lr}
  408150:	b083      	sub	sp, #12
  408152:	ab05      	add	r3, sp, #20
  408154:	4c06      	ldr	r4, [pc, #24]	; (408170 <fprintf+0x24>)
  408156:	f853 2b04 	ldr.w	r2, [r3], #4
  40815a:	9301      	str	r3, [sp, #4]
  40815c:	4601      	mov	r1, r0
  40815e:	6820      	ldr	r0, [r4, #0]
  408160:	f003 fc84 	bl	40ba6c <_vfprintf_r>
  408164:	b003      	add	sp, #12
  408166:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  40816a:	b003      	add	sp, #12
  40816c:	4770      	bx	lr
  40816e:	bf00      	nop
  408170:	200008b0 	.word	0x200008b0

00408174 <_malloc_trim_r>:
  408174:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  408176:	4f23      	ldr	r7, [pc, #140]	; (408204 <_malloc_trim_r+0x90>)
  408178:	460c      	mov	r4, r1
  40817a:	4606      	mov	r6, r0
  40817c:	f001 f800 	bl	409180 <__malloc_lock>
  408180:	68bb      	ldr	r3, [r7, #8]
  408182:	685d      	ldr	r5, [r3, #4]
  408184:	f025 0503 	bic.w	r5, r5, #3
  408188:	1b29      	subs	r1, r5, r4
  40818a:	f601 71ef 	addw	r1, r1, #4079	; 0xfef
  40818e:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
  408192:	f021 010f 	bic.w	r1, r1, #15
  408196:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
  40819a:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
  40819e:	db07      	blt.n	4081b0 <_malloc_trim_r+0x3c>
  4081a0:	4630      	mov	r0, r6
  4081a2:	2100      	movs	r1, #0
  4081a4:	f001 f9ee 	bl	409584 <_sbrk_r>
  4081a8:	68bb      	ldr	r3, [r7, #8]
  4081aa:	442b      	add	r3, r5
  4081ac:	4298      	cmp	r0, r3
  4081ae:	d004      	beq.n	4081ba <_malloc_trim_r+0x46>
  4081b0:	4630      	mov	r0, r6
  4081b2:	f000 ffe7 	bl	409184 <__malloc_unlock>
  4081b6:	2000      	movs	r0, #0
  4081b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4081ba:	4630      	mov	r0, r6
  4081bc:	4261      	negs	r1, r4
  4081be:	f001 f9e1 	bl	409584 <_sbrk_r>
  4081c2:	3001      	adds	r0, #1
  4081c4:	d00d      	beq.n	4081e2 <_malloc_trim_r+0x6e>
  4081c6:	4b10      	ldr	r3, [pc, #64]	; (408208 <_malloc_trim_r+0x94>)
  4081c8:	68ba      	ldr	r2, [r7, #8]
  4081ca:	6819      	ldr	r1, [r3, #0]
  4081cc:	1b2d      	subs	r5, r5, r4
  4081ce:	f045 0501 	orr.w	r5, r5, #1
  4081d2:	4630      	mov	r0, r6
  4081d4:	1b09      	subs	r1, r1, r4
  4081d6:	6055      	str	r5, [r2, #4]
  4081d8:	6019      	str	r1, [r3, #0]
  4081da:	f000 ffd3 	bl	409184 <__malloc_unlock>
  4081de:	2001      	movs	r0, #1
  4081e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4081e2:	4630      	mov	r0, r6
  4081e4:	2100      	movs	r1, #0
  4081e6:	f001 f9cd 	bl	409584 <_sbrk_r>
  4081ea:	68ba      	ldr	r2, [r7, #8]
  4081ec:	1a83      	subs	r3, r0, r2
  4081ee:	2b0f      	cmp	r3, #15
  4081f0:	ddde      	ble.n	4081b0 <_malloc_trim_r+0x3c>
  4081f2:	4c06      	ldr	r4, [pc, #24]	; (40820c <_malloc_trim_r+0x98>)
  4081f4:	4904      	ldr	r1, [pc, #16]	; (408208 <_malloc_trim_r+0x94>)
  4081f6:	6824      	ldr	r4, [r4, #0]
  4081f8:	f043 0301 	orr.w	r3, r3, #1
  4081fc:	1b00      	subs	r0, r0, r4
  4081fe:	6053      	str	r3, [r2, #4]
  408200:	6008      	str	r0, [r1, #0]
  408202:	e7d5      	b.n	4081b0 <_malloc_trim_r+0x3c>
  408204:	200008b4 	.word	0x200008b4
  408208:	2000128c 	.word	0x2000128c
  40820c:	20000cc0 	.word	0x20000cc0

00408210 <_free_r>:
  408210:	2900      	cmp	r1, #0
  408212:	d04e      	beq.n	4082b2 <_free_r+0xa2>
  408214:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  408218:	460c      	mov	r4, r1
  40821a:	4680      	mov	r8, r0
  40821c:	f000 ffb0 	bl	409180 <__malloc_lock>
  408220:	f854 7c04 	ldr.w	r7, [r4, #-4]
  408224:	4962      	ldr	r1, [pc, #392]	; (4083b0 <_free_r+0x1a0>)
  408226:	f027 0201 	bic.w	r2, r7, #1
  40822a:	f1a4 0508 	sub.w	r5, r4, #8
  40822e:	18ab      	adds	r3, r5, r2
  408230:	688e      	ldr	r6, [r1, #8]
  408232:	6858      	ldr	r0, [r3, #4]
  408234:	429e      	cmp	r6, r3
  408236:	f020 0003 	bic.w	r0, r0, #3
  40823a:	d05a      	beq.n	4082f2 <_free_r+0xe2>
  40823c:	07fe      	lsls	r6, r7, #31
  40823e:	6058      	str	r0, [r3, #4]
  408240:	d40b      	bmi.n	40825a <_free_r+0x4a>
  408242:	f854 7c08 	ldr.w	r7, [r4, #-8]
  408246:	1bed      	subs	r5, r5, r7
  408248:	f101 0e08 	add.w	lr, r1, #8
  40824c:	68ac      	ldr	r4, [r5, #8]
  40824e:	4574      	cmp	r4, lr
  408250:	443a      	add	r2, r7
  408252:	d067      	beq.n	408324 <_free_r+0x114>
  408254:	68ef      	ldr	r7, [r5, #12]
  408256:	60e7      	str	r7, [r4, #12]
  408258:	60bc      	str	r4, [r7, #8]
  40825a:	181c      	adds	r4, r3, r0
  40825c:	6864      	ldr	r4, [r4, #4]
  40825e:	07e4      	lsls	r4, r4, #31
  408260:	d40c      	bmi.n	40827c <_free_r+0x6c>
  408262:	4f54      	ldr	r7, [pc, #336]	; (4083b4 <_free_r+0x1a4>)
  408264:	689c      	ldr	r4, [r3, #8]
  408266:	42bc      	cmp	r4, r7
  408268:	4402      	add	r2, r0
  40826a:	d07c      	beq.n	408366 <_free_r+0x156>
  40826c:	68d8      	ldr	r0, [r3, #12]
  40826e:	60e0      	str	r0, [r4, #12]
  408270:	f042 0301 	orr.w	r3, r2, #1
  408274:	6084      	str	r4, [r0, #8]
  408276:	606b      	str	r3, [r5, #4]
  408278:	50aa      	str	r2, [r5, r2]
  40827a:	e003      	b.n	408284 <_free_r+0x74>
  40827c:	f042 0301 	orr.w	r3, r2, #1
  408280:	606b      	str	r3, [r5, #4]
  408282:	50aa      	str	r2, [r5, r2]
  408284:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
  408288:	d214      	bcs.n	4082b4 <_free_r+0xa4>
  40828a:	08d2      	lsrs	r2, r2, #3
  40828c:	eb01 03c2 	add.w	r3, r1, r2, lsl #3
  408290:	6848      	ldr	r0, [r1, #4]
  408292:	689f      	ldr	r7, [r3, #8]
  408294:	60af      	str	r7, [r5, #8]
  408296:	1092      	asrs	r2, r2, #2
  408298:	2401      	movs	r4, #1
  40829a:	fa04 f202 	lsl.w	r2, r4, r2
  40829e:	4310      	orrs	r0, r2
  4082a0:	60eb      	str	r3, [r5, #12]
  4082a2:	6048      	str	r0, [r1, #4]
  4082a4:	609d      	str	r5, [r3, #8]
  4082a6:	60fd      	str	r5, [r7, #12]
  4082a8:	4640      	mov	r0, r8
  4082aa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  4082ae:	f000 bf69 	b.w	409184 <__malloc_unlock>
  4082b2:	4770      	bx	lr
  4082b4:	0a53      	lsrs	r3, r2, #9
  4082b6:	2b04      	cmp	r3, #4
  4082b8:	d847      	bhi.n	40834a <_free_r+0x13a>
  4082ba:	0993      	lsrs	r3, r2, #6
  4082bc:	f103 0438 	add.w	r4, r3, #56	; 0x38
  4082c0:	0060      	lsls	r0, r4, #1
  4082c2:	eb01 0080 	add.w	r0, r1, r0, lsl #2
  4082c6:	493a      	ldr	r1, [pc, #232]	; (4083b0 <_free_r+0x1a0>)
  4082c8:	6883      	ldr	r3, [r0, #8]
  4082ca:	4283      	cmp	r3, r0
  4082cc:	d043      	beq.n	408356 <_free_r+0x146>
  4082ce:	6859      	ldr	r1, [r3, #4]
  4082d0:	f021 0103 	bic.w	r1, r1, #3
  4082d4:	4291      	cmp	r1, r2
  4082d6:	d902      	bls.n	4082de <_free_r+0xce>
  4082d8:	689b      	ldr	r3, [r3, #8]
  4082da:	4298      	cmp	r0, r3
  4082dc:	d1f7      	bne.n	4082ce <_free_r+0xbe>
  4082de:	68da      	ldr	r2, [r3, #12]
  4082e0:	60ea      	str	r2, [r5, #12]
  4082e2:	60ab      	str	r3, [r5, #8]
  4082e4:	4640      	mov	r0, r8
  4082e6:	6095      	str	r5, [r2, #8]
  4082e8:	60dd      	str	r5, [r3, #12]
  4082ea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  4082ee:	f000 bf49 	b.w	409184 <__malloc_unlock>
  4082f2:	07ff      	lsls	r7, r7, #31
  4082f4:	4402      	add	r2, r0
  4082f6:	d407      	bmi.n	408308 <_free_r+0xf8>
  4082f8:	f854 3c08 	ldr.w	r3, [r4, #-8]
  4082fc:	1aed      	subs	r5, r5, r3
  4082fe:	441a      	add	r2, r3
  408300:	68a8      	ldr	r0, [r5, #8]
  408302:	68eb      	ldr	r3, [r5, #12]
  408304:	60c3      	str	r3, [r0, #12]
  408306:	6098      	str	r0, [r3, #8]
  408308:	4b2b      	ldr	r3, [pc, #172]	; (4083b8 <_free_r+0x1a8>)
  40830a:	681b      	ldr	r3, [r3, #0]
  40830c:	f042 0001 	orr.w	r0, r2, #1
  408310:	429a      	cmp	r2, r3
  408312:	6068      	str	r0, [r5, #4]
  408314:	608d      	str	r5, [r1, #8]
  408316:	d3c7      	bcc.n	4082a8 <_free_r+0x98>
  408318:	4b28      	ldr	r3, [pc, #160]	; (4083bc <_free_r+0x1ac>)
  40831a:	4640      	mov	r0, r8
  40831c:	6819      	ldr	r1, [r3, #0]
  40831e:	f7ff ff29 	bl	408174 <_malloc_trim_r>
  408322:	e7c1      	b.n	4082a8 <_free_r+0x98>
  408324:	1819      	adds	r1, r3, r0
  408326:	6849      	ldr	r1, [r1, #4]
  408328:	07c9      	lsls	r1, r1, #31
  40832a:	d409      	bmi.n	408340 <_free_r+0x130>
  40832c:	68d9      	ldr	r1, [r3, #12]
  40832e:	689b      	ldr	r3, [r3, #8]
  408330:	4402      	add	r2, r0
  408332:	f042 0001 	orr.w	r0, r2, #1
  408336:	60d9      	str	r1, [r3, #12]
  408338:	608b      	str	r3, [r1, #8]
  40833a:	6068      	str	r0, [r5, #4]
  40833c:	50aa      	str	r2, [r5, r2]
  40833e:	e7b3      	b.n	4082a8 <_free_r+0x98>
  408340:	f042 0301 	orr.w	r3, r2, #1
  408344:	606b      	str	r3, [r5, #4]
  408346:	50aa      	str	r2, [r5, r2]
  408348:	e7ae      	b.n	4082a8 <_free_r+0x98>
  40834a:	2b14      	cmp	r3, #20
  40834c:	d814      	bhi.n	408378 <_free_r+0x168>
  40834e:	f103 045b 	add.w	r4, r3, #91	; 0x5b
  408352:	0060      	lsls	r0, r4, #1
  408354:	e7b5      	b.n	4082c2 <_free_r+0xb2>
  408356:	684a      	ldr	r2, [r1, #4]
  408358:	10a4      	asrs	r4, r4, #2
  40835a:	2001      	movs	r0, #1
  40835c:	40a0      	lsls	r0, r4
  40835e:	4302      	orrs	r2, r0
  408360:	604a      	str	r2, [r1, #4]
  408362:	461a      	mov	r2, r3
  408364:	e7bc      	b.n	4082e0 <_free_r+0xd0>
  408366:	f042 0301 	orr.w	r3, r2, #1
  40836a:	614d      	str	r5, [r1, #20]
  40836c:	610d      	str	r5, [r1, #16]
  40836e:	60ec      	str	r4, [r5, #12]
  408370:	60ac      	str	r4, [r5, #8]
  408372:	606b      	str	r3, [r5, #4]
  408374:	50aa      	str	r2, [r5, r2]
  408376:	e797      	b.n	4082a8 <_free_r+0x98>
  408378:	2b54      	cmp	r3, #84	; 0x54
  40837a:	d804      	bhi.n	408386 <_free_r+0x176>
  40837c:	0b13      	lsrs	r3, r2, #12
  40837e:	f103 046e 	add.w	r4, r3, #110	; 0x6e
  408382:	0060      	lsls	r0, r4, #1
  408384:	e79d      	b.n	4082c2 <_free_r+0xb2>
  408386:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
  40838a:	d804      	bhi.n	408396 <_free_r+0x186>
  40838c:	0bd3      	lsrs	r3, r2, #15
  40838e:	f103 0477 	add.w	r4, r3, #119	; 0x77
  408392:	0060      	lsls	r0, r4, #1
  408394:	e795      	b.n	4082c2 <_free_r+0xb2>
  408396:	f240 5054 	movw	r0, #1364	; 0x554
  40839a:	4283      	cmp	r3, r0
  40839c:	d804      	bhi.n	4083a8 <_free_r+0x198>
  40839e:	0c93      	lsrs	r3, r2, #18
  4083a0:	f103 047c 	add.w	r4, r3, #124	; 0x7c
  4083a4:	0060      	lsls	r0, r4, #1
  4083a6:	e78c      	b.n	4082c2 <_free_r+0xb2>
  4083a8:	20fc      	movs	r0, #252	; 0xfc
  4083aa:	247e      	movs	r4, #126	; 0x7e
  4083ac:	e789      	b.n	4082c2 <_free_r+0xb2>
  4083ae:	bf00      	nop
  4083b0:	200008b4 	.word	0x200008b4
  4083b4:	200008bc 	.word	0x200008bc
  4083b8:	20000cbc 	.word	0x20000cbc
  4083bc:	20001288 	.word	0x20001288

004083c0 <_fstat_r>:
  4083c0:	b538      	push	{r3, r4, r5, lr}
  4083c2:	4c08      	ldr	r4, [pc, #32]	; (4083e4 <_fstat_r+0x24>)
  4083c4:	2300      	movs	r3, #0
  4083c6:	4605      	mov	r5, r0
  4083c8:	4608      	mov	r0, r1
  4083ca:	4611      	mov	r1, r2
  4083cc:	6023      	str	r3, [r4, #0]
  4083ce:	f7f9 fd1b 	bl	401e08 <_fstat>
  4083d2:	1c43      	adds	r3, r0, #1
  4083d4:	d000      	beq.n	4083d8 <_fstat_r+0x18>
  4083d6:	bd38      	pop	{r3, r4, r5, pc}
  4083d8:	6823      	ldr	r3, [r4, #0]
  4083da:	2b00      	cmp	r3, #0
  4083dc:	d0fb      	beq.n	4083d6 <_fstat_r+0x16>
  4083de:	602b      	str	r3, [r5, #0]
  4083e0:	bd38      	pop	{r3, r4, r5, pc}
  4083e2:	bf00      	nop
  4083e4:	200012c4 	.word	0x200012c4

004083e8 <__sfvwrite_r>:
  4083e8:	6893      	ldr	r3, [r2, #8]
  4083ea:	2b00      	cmp	r3, #0
  4083ec:	d07a      	beq.n	4084e4 <__sfvwrite_r+0xfc>
  4083ee:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4083f2:	f8b1 e00c 	ldrh.w	lr, [r1, #12]
  4083f6:	f01e 0f08 	tst.w	lr, #8
  4083fa:	b083      	sub	sp, #12
  4083fc:	460c      	mov	r4, r1
  4083fe:	4681      	mov	r9, r0
  408400:	4616      	mov	r6, r2
  408402:	d026      	beq.n	408452 <__sfvwrite_r+0x6a>
  408404:	690b      	ldr	r3, [r1, #16]
  408406:	b323      	cbz	r3, 408452 <__sfvwrite_r+0x6a>
  408408:	f00e 0802 	and.w	r8, lr, #2
  40840c:	fa1f f088 	uxth.w	r0, r8
  408410:	6835      	ldr	r5, [r6, #0]
  408412:	b370      	cbz	r0, 408472 <__sfvwrite_r+0x8a>
  408414:	f04f 0a00 	mov.w	sl, #0
  408418:	f8df b2e0 	ldr.w	fp, [pc, #736]	; 4086fc <__sfvwrite_r+0x314>
  40841c:	46d0      	mov	r8, sl
  40841e:	45d8      	cmp	r8, fp
  408420:	4643      	mov	r3, r8
  408422:	4652      	mov	r2, sl
  408424:	bf28      	it	cs
  408426:	465b      	movcs	r3, fp
  408428:	4648      	mov	r0, r9
  40842a:	f1b8 0f00 	cmp.w	r8, #0
  40842e:	d053      	beq.n	4084d8 <__sfvwrite_r+0xf0>
  408430:	69e1      	ldr	r1, [r4, #28]
  408432:	6a67      	ldr	r7, [r4, #36]	; 0x24
  408434:	47b8      	blx	r7
  408436:	2800      	cmp	r0, #0
  408438:	dd73      	ble.n	408522 <__sfvwrite_r+0x13a>
  40843a:	68b3      	ldr	r3, [r6, #8]
  40843c:	1a1b      	subs	r3, r3, r0
  40843e:	4482      	add	sl, r0
  408440:	ebc0 0808 	rsb	r8, r0, r8
  408444:	60b3      	str	r3, [r6, #8]
  408446:	2b00      	cmp	r3, #0
  408448:	d1e9      	bne.n	40841e <__sfvwrite_r+0x36>
  40844a:	2000      	movs	r0, #0
  40844c:	b003      	add	sp, #12
  40844e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  408452:	4648      	mov	r0, r9
  408454:	4621      	mov	r1, r4
  408456:	f004 fda1 	bl	40cf9c <__swsetup_r>
  40845a:	2800      	cmp	r0, #0
  40845c:	f040 8145 	bne.w	4086ea <__sfvwrite_r+0x302>
  408460:	f8b4 e00c 	ldrh.w	lr, [r4, #12]
  408464:	6835      	ldr	r5, [r6, #0]
  408466:	f00e 0802 	and.w	r8, lr, #2
  40846a:	fa1f f088 	uxth.w	r0, r8
  40846e:	2800      	cmp	r0, #0
  408470:	d1d0      	bne.n	408414 <__sfvwrite_r+0x2c>
  408472:	f01e 0b01 	ands.w	fp, lr, #1
  408476:	d15d      	bne.n	408534 <__sfvwrite_r+0x14c>
  408478:	46d8      	mov	r8, fp
  40847a:	f1b8 0f00 	cmp.w	r8, #0
  40847e:	d025      	beq.n	4084cc <__sfvwrite_r+0xe4>
  408480:	f41e 7f00 	tst.w	lr, #512	; 0x200
  408484:	68a7      	ldr	r7, [r4, #8]
  408486:	d02f      	beq.n	4084e8 <__sfvwrite_r+0x100>
  408488:	45b8      	cmp	r8, r7
  40848a:	46ba      	mov	sl, r7
  40848c:	f0c0 80a9 	bcc.w	4085e2 <__sfvwrite_r+0x1fa>
  408490:	f41e 6f90 	tst.w	lr, #1152	; 0x480
  408494:	f040 80b6 	bne.w	408604 <__sfvwrite_r+0x21c>
  408498:	6820      	ldr	r0, [r4, #0]
  40849a:	4652      	mov	r2, sl
  40849c:	4659      	mov	r1, fp
  40849e:	f000 fdbd 	bl	40901c <memmove>
  4084a2:	68a0      	ldr	r0, [r4, #8]
  4084a4:	6822      	ldr	r2, [r4, #0]
  4084a6:	1bc0      	subs	r0, r0, r7
  4084a8:	eb02 030a 	add.w	r3, r2, sl
  4084ac:	60a0      	str	r0, [r4, #8]
  4084ae:	6023      	str	r3, [r4, #0]
  4084b0:	4640      	mov	r0, r8
  4084b2:	68b3      	ldr	r3, [r6, #8]
  4084b4:	1a1b      	subs	r3, r3, r0
  4084b6:	4483      	add	fp, r0
  4084b8:	ebc0 0808 	rsb	r8, r0, r8
  4084bc:	60b3      	str	r3, [r6, #8]
  4084be:	2b00      	cmp	r3, #0
  4084c0:	d0c3      	beq.n	40844a <__sfvwrite_r+0x62>
  4084c2:	f8b4 e00c 	ldrh.w	lr, [r4, #12]
  4084c6:	f1b8 0f00 	cmp.w	r8, #0
  4084ca:	d1d9      	bne.n	408480 <__sfvwrite_r+0x98>
  4084cc:	f8d5 b000 	ldr.w	fp, [r5]
  4084d0:	f8d5 8004 	ldr.w	r8, [r5, #4]
  4084d4:	3508      	adds	r5, #8
  4084d6:	e7d0      	b.n	40847a <__sfvwrite_r+0x92>
  4084d8:	f8d5 a000 	ldr.w	sl, [r5]
  4084dc:	f8d5 8004 	ldr.w	r8, [r5, #4]
  4084e0:	3508      	adds	r5, #8
  4084e2:	e79c      	b.n	40841e <__sfvwrite_r+0x36>
  4084e4:	2000      	movs	r0, #0
  4084e6:	4770      	bx	lr
  4084e8:	6820      	ldr	r0, [r4, #0]
  4084ea:	6923      	ldr	r3, [r4, #16]
  4084ec:	4298      	cmp	r0, r3
  4084ee:	d803      	bhi.n	4084f8 <__sfvwrite_r+0x110>
  4084f0:	6962      	ldr	r2, [r4, #20]
  4084f2:	4590      	cmp	r8, r2
  4084f4:	f080 80b9 	bcs.w	40866a <__sfvwrite_r+0x282>
  4084f8:	4547      	cmp	r7, r8
  4084fa:	bf28      	it	cs
  4084fc:	4647      	movcs	r7, r8
  4084fe:	463a      	mov	r2, r7
  408500:	4659      	mov	r1, fp
  408502:	f000 fd8b 	bl	40901c <memmove>
  408506:	68a3      	ldr	r3, [r4, #8]
  408508:	6822      	ldr	r2, [r4, #0]
  40850a:	1bdb      	subs	r3, r3, r7
  40850c:	443a      	add	r2, r7
  40850e:	60a3      	str	r3, [r4, #8]
  408510:	6022      	str	r2, [r4, #0]
  408512:	2b00      	cmp	r3, #0
  408514:	d14a      	bne.n	4085ac <__sfvwrite_r+0x1c4>
  408516:	4648      	mov	r0, r9
  408518:	4621      	mov	r1, r4
  40851a:	f7ff fd65 	bl	407fe8 <_fflush_r>
  40851e:	2800      	cmp	r0, #0
  408520:	d044      	beq.n	4085ac <__sfvwrite_r+0x1c4>
  408522:	89a3      	ldrh	r3, [r4, #12]
  408524:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  408528:	f04f 30ff 	mov.w	r0, #4294967295
  40852c:	81a3      	strh	r3, [r4, #12]
  40852e:	b003      	add	sp, #12
  408530:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  408534:	4680      	mov	r8, r0
  408536:	9000      	str	r0, [sp, #0]
  408538:	4683      	mov	fp, r0
  40853a:	4682      	mov	sl, r0
  40853c:	f1ba 0f00 	cmp.w	sl, #0
  408540:	d02c      	beq.n	40859c <__sfvwrite_r+0x1b4>
  408542:	9b00      	ldr	r3, [sp, #0]
  408544:	2b00      	cmp	r3, #0
  408546:	d050      	beq.n	4085ea <__sfvwrite_r+0x202>
  408548:	6820      	ldr	r0, [r4, #0]
  40854a:	6921      	ldr	r1, [r4, #16]
  40854c:	f8d4 e008 	ldr.w	lr, [r4, #8]
  408550:	6962      	ldr	r2, [r4, #20]
  408552:	45d0      	cmp	r8, sl
  408554:	4643      	mov	r3, r8
  408556:	bf28      	it	cs
  408558:	4653      	movcs	r3, sl
  40855a:	4288      	cmp	r0, r1
  40855c:	461f      	mov	r7, r3
  40855e:	d904      	bls.n	40856a <__sfvwrite_r+0x182>
  408560:	eb0e 0c02 	add.w	ip, lr, r2
  408564:	4563      	cmp	r3, ip
  408566:	f300 8092 	bgt.w	40868e <__sfvwrite_r+0x2a6>
  40856a:	4293      	cmp	r3, r2
  40856c:	db20      	blt.n	4085b0 <__sfvwrite_r+0x1c8>
  40856e:	4613      	mov	r3, r2
  408570:	6a67      	ldr	r7, [r4, #36]	; 0x24
  408572:	69e1      	ldr	r1, [r4, #28]
  408574:	4648      	mov	r0, r9
  408576:	465a      	mov	r2, fp
  408578:	47b8      	blx	r7
  40857a:	1e07      	subs	r7, r0, #0
  40857c:	ddd1      	ble.n	408522 <__sfvwrite_r+0x13a>
  40857e:	ebb8 0807 	subs.w	r8, r8, r7
  408582:	d025      	beq.n	4085d0 <__sfvwrite_r+0x1e8>
  408584:	68b3      	ldr	r3, [r6, #8]
  408586:	1bdb      	subs	r3, r3, r7
  408588:	44bb      	add	fp, r7
  40858a:	ebc7 0a0a 	rsb	sl, r7, sl
  40858e:	60b3      	str	r3, [r6, #8]
  408590:	2b00      	cmp	r3, #0
  408592:	f43f af5a 	beq.w	40844a <__sfvwrite_r+0x62>
  408596:	f1ba 0f00 	cmp.w	sl, #0
  40859a:	d1d2      	bne.n	408542 <__sfvwrite_r+0x15a>
  40859c:	2300      	movs	r3, #0
  40859e:	f8d5 b000 	ldr.w	fp, [r5]
  4085a2:	f8d5 a004 	ldr.w	sl, [r5, #4]
  4085a6:	9300      	str	r3, [sp, #0]
  4085a8:	3508      	adds	r5, #8
  4085aa:	e7c7      	b.n	40853c <__sfvwrite_r+0x154>
  4085ac:	4638      	mov	r0, r7
  4085ae:	e780      	b.n	4084b2 <__sfvwrite_r+0xca>
  4085b0:	461a      	mov	r2, r3
  4085b2:	4659      	mov	r1, fp
  4085b4:	9301      	str	r3, [sp, #4]
  4085b6:	f000 fd31 	bl	40901c <memmove>
  4085ba:	68a2      	ldr	r2, [r4, #8]
  4085bc:	6821      	ldr	r1, [r4, #0]
  4085be:	9b01      	ldr	r3, [sp, #4]
  4085c0:	ebb8 0807 	subs.w	r8, r8, r7
  4085c4:	eba2 0203 	sub.w	r2, r2, r3
  4085c8:	440b      	add	r3, r1
  4085ca:	60a2      	str	r2, [r4, #8]
  4085cc:	6023      	str	r3, [r4, #0]
  4085ce:	d1d9      	bne.n	408584 <__sfvwrite_r+0x19c>
  4085d0:	4648      	mov	r0, r9
  4085d2:	4621      	mov	r1, r4
  4085d4:	f7ff fd08 	bl	407fe8 <_fflush_r>
  4085d8:	2800      	cmp	r0, #0
  4085da:	d1a2      	bne.n	408522 <__sfvwrite_r+0x13a>
  4085dc:	f8cd 8000 	str.w	r8, [sp]
  4085e0:	e7d0      	b.n	408584 <__sfvwrite_r+0x19c>
  4085e2:	6820      	ldr	r0, [r4, #0]
  4085e4:	4647      	mov	r7, r8
  4085e6:	46c2      	mov	sl, r8
  4085e8:	e757      	b.n	40849a <__sfvwrite_r+0xb2>
  4085ea:	4658      	mov	r0, fp
  4085ec:	210a      	movs	r1, #10
  4085ee:	4652      	mov	r2, sl
  4085f0:	f000 fbfe 	bl	408df0 <memchr>
  4085f4:	2800      	cmp	r0, #0
  4085f6:	d073      	beq.n	4086e0 <__sfvwrite_r+0x2f8>
  4085f8:	3001      	adds	r0, #1
  4085fa:	2301      	movs	r3, #1
  4085fc:	ebcb 0800 	rsb	r8, fp, r0
  408600:	9300      	str	r3, [sp, #0]
  408602:	e7a1      	b.n	408548 <__sfvwrite_r+0x160>
  408604:	6967      	ldr	r7, [r4, #20]
  408606:	6921      	ldr	r1, [r4, #16]
  408608:	6823      	ldr	r3, [r4, #0]
  40860a:	eb07 0747 	add.w	r7, r7, r7, lsl #1
  40860e:	1a5b      	subs	r3, r3, r1
  408610:	eb07 77d7 	add.w	r7, r7, r7, lsr #31
  408614:	1c58      	adds	r0, r3, #1
  408616:	107f      	asrs	r7, r7, #1
  408618:	4440      	add	r0, r8
  40861a:	4287      	cmp	r7, r0
  40861c:	463a      	mov	r2, r7
  40861e:	bf3c      	itt	cc
  408620:	4607      	movcc	r7, r0
  408622:	463a      	movcc	r2, r7
  408624:	f41e 6f80 	tst.w	lr, #1024	; 0x400
  408628:	9300      	str	r3, [sp, #0]
  40862a:	d046      	beq.n	4086ba <__sfvwrite_r+0x2d2>
  40862c:	4611      	mov	r1, r2
  40862e:	4648      	mov	r0, r9
  408630:	f000 f94c 	bl	4088cc <_malloc_r>
  408634:	9b00      	ldr	r3, [sp, #0]
  408636:	4682      	mov	sl, r0
  408638:	2800      	cmp	r0, #0
  40863a:	d059      	beq.n	4086f0 <__sfvwrite_r+0x308>
  40863c:	461a      	mov	r2, r3
  40863e:	6921      	ldr	r1, [r4, #16]
  408640:	9300      	str	r3, [sp, #0]
  408642:	f000 fc51 	bl	408ee8 <memcpy>
  408646:	89a2      	ldrh	r2, [r4, #12]
  408648:	9b00      	ldr	r3, [sp, #0]
  40864a:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
  40864e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
  408652:	81a2      	strh	r2, [r4, #12]
  408654:	eb0a 0003 	add.w	r0, sl, r3
  408658:	1afb      	subs	r3, r7, r3
  40865a:	f8c4 a010 	str.w	sl, [r4, #16]
  40865e:	6167      	str	r7, [r4, #20]
  408660:	6020      	str	r0, [r4, #0]
  408662:	60a3      	str	r3, [r4, #8]
  408664:	4647      	mov	r7, r8
  408666:	46c2      	mov	sl, r8
  408668:	e717      	b.n	40849a <__sfvwrite_r+0xb2>
  40866a:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
  40866e:	4543      	cmp	r3, r8
  408670:	bf28      	it	cs
  408672:	4643      	movcs	r3, r8
  408674:	6a67      	ldr	r7, [r4, #36]	; 0x24
  408676:	fb93 f3f2 	sdiv	r3, r3, r2
  40867a:	4648      	mov	r0, r9
  40867c:	fb03 f302 	mul.w	r3, r3, r2
  408680:	69e1      	ldr	r1, [r4, #28]
  408682:	465a      	mov	r2, fp
  408684:	47b8      	blx	r7
  408686:	2800      	cmp	r0, #0
  408688:	f73f af13 	bgt.w	4084b2 <__sfvwrite_r+0xca>
  40868c:	e749      	b.n	408522 <__sfvwrite_r+0x13a>
  40868e:	4662      	mov	r2, ip
  408690:	4659      	mov	r1, fp
  408692:	f8cd c004 	str.w	ip, [sp, #4]
  408696:	f000 fcc1 	bl	40901c <memmove>
  40869a:	6823      	ldr	r3, [r4, #0]
  40869c:	f8dd c004 	ldr.w	ip, [sp, #4]
  4086a0:	4463      	add	r3, ip
  4086a2:	6023      	str	r3, [r4, #0]
  4086a4:	4648      	mov	r0, r9
  4086a6:	4621      	mov	r1, r4
  4086a8:	f7ff fc9e 	bl	407fe8 <_fflush_r>
  4086ac:	f8dd c004 	ldr.w	ip, [sp, #4]
  4086b0:	2800      	cmp	r0, #0
  4086b2:	f47f af36 	bne.w	408522 <__sfvwrite_r+0x13a>
  4086b6:	4667      	mov	r7, ip
  4086b8:	e761      	b.n	40857e <__sfvwrite_r+0x196>
  4086ba:	4648      	mov	r0, r9
  4086bc:	f000 fd6c 	bl	409198 <_realloc_r>
  4086c0:	9b00      	ldr	r3, [sp, #0]
  4086c2:	4682      	mov	sl, r0
  4086c4:	2800      	cmp	r0, #0
  4086c6:	d1c5      	bne.n	408654 <__sfvwrite_r+0x26c>
  4086c8:	4648      	mov	r0, r9
  4086ca:	6921      	ldr	r1, [r4, #16]
  4086cc:	f7ff fda0 	bl	408210 <_free_r>
  4086d0:	89a3      	ldrh	r3, [r4, #12]
  4086d2:	220c      	movs	r2, #12
  4086d4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  4086d8:	b29b      	uxth	r3, r3
  4086da:	f8c9 2000 	str.w	r2, [r9]
  4086de:	e721      	b.n	408524 <__sfvwrite_r+0x13c>
  4086e0:	2301      	movs	r3, #1
  4086e2:	f10a 0801 	add.w	r8, sl, #1
  4086e6:	9300      	str	r3, [sp, #0]
  4086e8:	e72e      	b.n	408548 <__sfvwrite_r+0x160>
  4086ea:	f04f 30ff 	mov.w	r0, #4294967295
  4086ee:	e6ad      	b.n	40844c <__sfvwrite_r+0x64>
  4086f0:	230c      	movs	r3, #12
  4086f2:	f8c9 3000 	str.w	r3, [r9]
  4086f6:	89a3      	ldrh	r3, [r4, #12]
  4086f8:	e714      	b.n	408524 <__sfvwrite_r+0x13c>
  4086fa:	bf00      	nop
  4086fc:	7ffffc00 	.word	0x7ffffc00

00408700 <_fwalk_reent>:
  408700:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  408704:	f510 7738 	adds.w	r7, r0, #736	; 0x2e0
  408708:	d01f      	beq.n	40874a <_fwalk_reent+0x4a>
  40870a:	4688      	mov	r8, r1
  40870c:	4606      	mov	r6, r0
  40870e:	f04f 0900 	mov.w	r9, #0
  408712:	687d      	ldr	r5, [r7, #4]
  408714:	68bc      	ldr	r4, [r7, #8]
  408716:	3d01      	subs	r5, #1
  408718:	d411      	bmi.n	40873e <_fwalk_reent+0x3e>
  40871a:	89a3      	ldrh	r3, [r4, #12]
  40871c:	2b01      	cmp	r3, #1
  40871e:	f105 35ff 	add.w	r5, r5, #4294967295
  408722:	d908      	bls.n	408736 <_fwalk_reent+0x36>
  408724:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
  408728:	3301      	adds	r3, #1
  40872a:	4621      	mov	r1, r4
  40872c:	4630      	mov	r0, r6
  40872e:	d002      	beq.n	408736 <_fwalk_reent+0x36>
  408730:	47c0      	blx	r8
  408732:	ea49 0900 	orr.w	r9, r9, r0
  408736:	1c6b      	adds	r3, r5, #1
  408738:	f104 0468 	add.w	r4, r4, #104	; 0x68
  40873c:	d1ed      	bne.n	40871a <_fwalk_reent+0x1a>
  40873e:	683f      	ldr	r7, [r7, #0]
  408740:	2f00      	cmp	r7, #0
  408742:	d1e6      	bne.n	408712 <_fwalk_reent+0x12>
  408744:	4648      	mov	r0, r9
  408746:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40874a:	46b9      	mov	r9, r7
  40874c:	4648      	mov	r0, r9
  40874e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  408752:	bf00      	nop

00408754 <__libc_init_array>:
  408754:	b570      	push	{r4, r5, r6, lr}
  408756:	4e0f      	ldr	r6, [pc, #60]	; (408794 <__libc_init_array+0x40>)
  408758:	4d0f      	ldr	r5, [pc, #60]	; (408798 <__libc_init_array+0x44>)
  40875a:	1b76      	subs	r6, r6, r5
  40875c:	10b6      	asrs	r6, r6, #2
  40875e:	bf18      	it	ne
  408760:	2400      	movne	r4, #0
  408762:	d005      	beq.n	408770 <__libc_init_array+0x1c>
  408764:	3401      	adds	r4, #1
  408766:	f855 3b04 	ldr.w	r3, [r5], #4
  40876a:	4798      	blx	r3
  40876c:	42a6      	cmp	r6, r4
  40876e:	d1f9      	bne.n	408764 <__libc_init_array+0x10>
  408770:	4e0a      	ldr	r6, [pc, #40]	; (40879c <__libc_init_array+0x48>)
  408772:	4d0b      	ldr	r5, [pc, #44]	; (4087a0 <__libc_init_array+0x4c>)
  408774:	1b76      	subs	r6, r6, r5
  408776:	f009 fafb 	bl	411d70 <_init>
  40877a:	10b6      	asrs	r6, r6, #2
  40877c:	bf18      	it	ne
  40877e:	2400      	movne	r4, #0
  408780:	d006      	beq.n	408790 <__libc_init_array+0x3c>
  408782:	3401      	adds	r4, #1
  408784:	f855 3b04 	ldr.w	r3, [r5], #4
  408788:	4798      	blx	r3
  40878a:	42a6      	cmp	r6, r4
  40878c:	d1f9      	bne.n	408782 <__libc_init_array+0x2e>
  40878e:	bd70      	pop	{r4, r5, r6, pc}
  408790:	bd70      	pop	{r4, r5, r6, pc}
  408792:	bf00      	nop
  408794:	00411d7c 	.word	0x00411d7c
  408798:	00411d7c 	.word	0x00411d7c
  40879c:	00411d84 	.word	0x00411d84
  4087a0:	00411d7c 	.word	0x00411d7c

004087a4 <iprintf>:
  4087a4:	b40f      	push	{r0, r1, r2, r3}
  4087a6:	b500      	push	{lr}
  4087a8:	4907      	ldr	r1, [pc, #28]	; (4087c8 <iprintf+0x24>)
  4087aa:	b083      	sub	sp, #12
  4087ac:	ab04      	add	r3, sp, #16
  4087ae:	6808      	ldr	r0, [r1, #0]
  4087b0:	f853 2b04 	ldr.w	r2, [r3], #4
  4087b4:	6881      	ldr	r1, [r0, #8]
  4087b6:	9301      	str	r3, [sp, #4]
  4087b8:	f002 fb14 	bl	40ade4 <_vfiprintf_r>
  4087bc:	b003      	add	sp, #12
  4087be:	f85d eb04 	ldr.w	lr, [sp], #4
  4087c2:	b004      	add	sp, #16
  4087c4:	4770      	bx	lr
  4087c6:	bf00      	nop
  4087c8:	200008b0 	.word	0x200008b0

004087cc <__smakebuf_r>:
  4087cc:	898b      	ldrh	r3, [r1, #12]
  4087ce:	b29a      	uxth	r2, r3
  4087d0:	f012 0f02 	tst.w	r2, #2
  4087d4:	d13c      	bne.n	408850 <__smakebuf_r+0x84>
  4087d6:	b5f0      	push	{r4, r5, r6, r7, lr}
  4087d8:	460c      	mov	r4, r1
  4087da:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  4087de:	2900      	cmp	r1, #0
  4087e0:	b091      	sub	sp, #68	; 0x44
  4087e2:	4605      	mov	r5, r0
  4087e4:	db19      	blt.n	40881a <__smakebuf_r+0x4e>
  4087e6:	aa01      	add	r2, sp, #4
  4087e8:	f7ff fdea 	bl	4083c0 <_fstat_r>
  4087ec:	2800      	cmp	r0, #0
  4087ee:	db12      	blt.n	408816 <__smakebuf_r+0x4a>
  4087f0:	9b02      	ldr	r3, [sp, #8]
  4087f2:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
  4087f6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
  4087fa:	f5a3 5700 	sub.w	r7, r3, #8192	; 0x2000
  4087fe:	fab7 f787 	clz	r7, r7
  408802:	ea4f 1757 	mov.w	r7, r7, lsr #5
  408806:	d02a      	beq.n	40885e <__smakebuf_r+0x92>
  408808:	89a3      	ldrh	r3, [r4, #12]
  40880a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
  40880e:	81a3      	strh	r3, [r4, #12]
  408810:	f44f 6680 	mov.w	r6, #1024	; 0x400
  408814:	e00b      	b.n	40882e <__smakebuf_r+0x62>
  408816:	89a3      	ldrh	r3, [r4, #12]
  408818:	b29a      	uxth	r2, r3
  40881a:	f012 0f80 	tst.w	r2, #128	; 0x80
  40881e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
  408822:	81a3      	strh	r3, [r4, #12]
  408824:	bf0c      	ite	eq
  408826:	f44f 6680 	moveq.w	r6, #1024	; 0x400
  40882a:	2640      	movne	r6, #64	; 0x40
  40882c:	2700      	movs	r7, #0
  40882e:	4628      	mov	r0, r5
  408830:	4631      	mov	r1, r6
  408832:	f000 f84b 	bl	4088cc <_malloc_r>
  408836:	89a3      	ldrh	r3, [r4, #12]
  408838:	b340      	cbz	r0, 40888c <__smakebuf_r+0xc0>
  40883a:	4a1a      	ldr	r2, [pc, #104]	; (4088a4 <__smakebuf_r+0xd8>)
  40883c:	63ea      	str	r2, [r5, #60]	; 0x3c
  40883e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  408842:	81a3      	strh	r3, [r4, #12]
  408844:	6020      	str	r0, [r4, #0]
  408846:	6120      	str	r0, [r4, #16]
  408848:	6166      	str	r6, [r4, #20]
  40884a:	b99f      	cbnz	r7, 408874 <__smakebuf_r+0xa8>
  40884c:	b011      	add	sp, #68	; 0x44
  40884e:	bdf0      	pop	{r4, r5, r6, r7, pc}
  408850:	f101 0343 	add.w	r3, r1, #67	; 0x43
  408854:	2201      	movs	r2, #1
  408856:	600b      	str	r3, [r1, #0]
  408858:	610b      	str	r3, [r1, #16]
  40885a:	614a      	str	r2, [r1, #20]
  40885c:	4770      	bx	lr
  40885e:	4b12      	ldr	r3, [pc, #72]	; (4088a8 <__smakebuf_r+0xdc>)
  408860:	6aa2      	ldr	r2, [r4, #40]	; 0x28
  408862:	429a      	cmp	r2, r3
  408864:	d1d0      	bne.n	408808 <__smakebuf_r+0x3c>
  408866:	89a3      	ldrh	r3, [r4, #12]
  408868:	f44f 6680 	mov.w	r6, #1024	; 0x400
  40886c:	4333      	orrs	r3, r6
  40886e:	81a3      	strh	r3, [r4, #12]
  408870:	64e6      	str	r6, [r4, #76]	; 0x4c
  408872:	e7dc      	b.n	40882e <__smakebuf_r+0x62>
  408874:	4628      	mov	r0, r5
  408876:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  40887a:	f005 fc73 	bl	40e164 <_isatty_r>
  40887e:	2800      	cmp	r0, #0
  408880:	d0e4      	beq.n	40884c <__smakebuf_r+0x80>
  408882:	89a3      	ldrh	r3, [r4, #12]
  408884:	f043 0301 	orr.w	r3, r3, #1
  408888:	81a3      	strh	r3, [r4, #12]
  40888a:	e7df      	b.n	40884c <__smakebuf_r+0x80>
  40888c:	059a      	lsls	r2, r3, #22
  40888e:	d4dd      	bmi.n	40884c <__smakebuf_r+0x80>
  408890:	f104 0243 	add.w	r2, r4, #67	; 0x43
  408894:	f043 0302 	orr.w	r3, r3, #2
  408898:	2101      	movs	r1, #1
  40889a:	81a3      	strh	r3, [r4, #12]
  40889c:	6022      	str	r2, [r4, #0]
  40889e:	6122      	str	r2, [r4, #16]
  4088a0:	6161      	str	r1, [r4, #20]
  4088a2:	e7d3      	b.n	40884c <__smakebuf_r+0x80>
  4088a4:	00408015 	.word	0x00408015
  4088a8:	00409781 	.word	0x00409781

004088ac <malloc>:
  4088ac:	4b02      	ldr	r3, [pc, #8]	; (4088b8 <malloc+0xc>)
  4088ae:	4601      	mov	r1, r0
  4088b0:	6818      	ldr	r0, [r3, #0]
  4088b2:	f000 b80b 	b.w	4088cc <_malloc_r>
  4088b6:	bf00      	nop
  4088b8:	200008b0 	.word	0x200008b0

004088bc <free>:
  4088bc:	4b02      	ldr	r3, [pc, #8]	; (4088c8 <free+0xc>)
  4088be:	4601      	mov	r1, r0
  4088c0:	6818      	ldr	r0, [r3, #0]
  4088c2:	f7ff bca5 	b.w	408210 <_free_r>
  4088c6:	bf00      	nop
  4088c8:	200008b0 	.word	0x200008b0

004088cc <_malloc_r>:
  4088cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4088d0:	f101 050b 	add.w	r5, r1, #11
  4088d4:	2d16      	cmp	r5, #22
  4088d6:	b083      	sub	sp, #12
  4088d8:	4606      	mov	r6, r0
  4088da:	d927      	bls.n	40892c <_malloc_r+0x60>
  4088dc:	f035 0507 	bics.w	r5, r5, #7
  4088e0:	f100 80b6 	bmi.w	408a50 <_malloc_r+0x184>
  4088e4:	42a9      	cmp	r1, r5
  4088e6:	f200 80b3 	bhi.w	408a50 <_malloc_r+0x184>
  4088ea:	f000 fc49 	bl	409180 <__malloc_lock>
  4088ee:	f5b5 7ffc 	cmp.w	r5, #504	; 0x1f8
  4088f2:	d222      	bcs.n	40893a <_malloc_r+0x6e>
  4088f4:	4fc2      	ldr	r7, [pc, #776]	; (408c00 <_malloc_r+0x334>)
  4088f6:	08e8      	lsrs	r0, r5, #3
  4088f8:	eb07 03c0 	add.w	r3, r7, r0, lsl #3
  4088fc:	68dc      	ldr	r4, [r3, #12]
  4088fe:	429c      	cmp	r4, r3
  408900:	f000 81c8 	beq.w	408c94 <_malloc_r+0x3c8>
  408904:	6863      	ldr	r3, [r4, #4]
  408906:	68e1      	ldr	r1, [r4, #12]
  408908:	68a5      	ldr	r5, [r4, #8]
  40890a:	f023 0303 	bic.w	r3, r3, #3
  40890e:	4423      	add	r3, r4
  408910:	4630      	mov	r0, r6
  408912:	685a      	ldr	r2, [r3, #4]
  408914:	60e9      	str	r1, [r5, #12]
  408916:	f042 0201 	orr.w	r2, r2, #1
  40891a:	608d      	str	r5, [r1, #8]
  40891c:	605a      	str	r2, [r3, #4]
  40891e:	f000 fc31 	bl	409184 <__malloc_unlock>
  408922:	3408      	adds	r4, #8
  408924:	4620      	mov	r0, r4
  408926:	b003      	add	sp, #12
  408928:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40892c:	2910      	cmp	r1, #16
  40892e:	f200 808f 	bhi.w	408a50 <_malloc_r+0x184>
  408932:	f000 fc25 	bl	409180 <__malloc_lock>
  408936:	2510      	movs	r5, #16
  408938:	e7dc      	b.n	4088f4 <_malloc_r+0x28>
  40893a:	0a68      	lsrs	r0, r5, #9
  40893c:	f000 808f 	beq.w	408a5e <_malloc_r+0x192>
  408940:	2804      	cmp	r0, #4
  408942:	f200 8154 	bhi.w	408bee <_malloc_r+0x322>
  408946:	09a8      	lsrs	r0, r5, #6
  408948:	3038      	adds	r0, #56	; 0x38
  40894a:	0041      	lsls	r1, r0, #1
  40894c:	4fac      	ldr	r7, [pc, #688]	; (408c00 <_malloc_r+0x334>)
  40894e:	eb07 0181 	add.w	r1, r7, r1, lsl #2
  408952:	68cc      	ldr	r4, [r1, #12]
  408954:	42a1      	cmp	r1, r4
  408956:	d106      	bne.n	408966 <_malloc_r+0x9a>
  408958:	e00c      	b.n	408974 <_malloc_r+0xa8>
  40895a:	2a00      	cmp	r2, #0
  40895c:	f280 8082 	bge.w	408a64 <_malloc_r+0x198>
  408960:	68e4      	ldr	r4, [r4, #12]
  408962:	42a1      	cmp	r1, r4
  408964:	d006      	beq.n	408974 <_malloc_r+0xa8>
  408966:	6863      	ldr	r3, [r4, #4]
  408968:	f023 0303 	bic.w	r3, r3, #3
  40896c:	1b5a      	subs	r2, r3, r5
  40896e:	2a0f      	cmp	r2, #15
  408970:	ddf3      	ble.n	40895a <_malloc_r+0x8e>
  408972:	3801      	subs	r0, #1
  408974:	3001      	adds	r0, #1
  408976:	49a2      	ldr	r1, [pc, #648]	; (408c00 <_malloc_r+0x334>)
  408978:	693c      	ldr	r4, [r7, #16]
  40897a:	f101 0e08 	add.w	lr, r1, #8
  40897e:	4574      	cmp	r4, lr
  408980:	f000 817d 	beq.w	408c7e <_malloc_r+0x3b2>
  408984:	6863      	ldr	r3, [r4, #4]
  408986:	f023 0303 	bic.w	r3, r3, #3
  40898a:	1b5a      	subs	r2, r3, r5
  40898c:	2a0f      	cmp	r2, #15
  40898e:	f300 8163 	bgt.w	408c58 <_malloc_r+0x38c>
  408992:	2a00      	cmp	r2, #0
  408994:	f8c1 e014 	str.w	lr, [r1, #20]
  408998:	f8c1 e010 	str.w	lr, [r1, #16]
  40899c:	da73      	bge.n	408a86 <_malloc_r+0x1ba>
  40899e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  4089a2:	f080 8139 	bcs.w	408c18 <_malloc_r+0x34c>
  4089a6:	08db      	lsrs	r3, r3, #3
  4089a8:	eb01 08c3 	add.w	r8, r1, r3, lsl #3
  4089ac:	ea4f 0ca3 	mov.w	ip, r3, asr #2
  4089b0:	684a      	ldr	r2, [r1, #4]
  4089b2:	f8d8 9008 	ldr.w	r9, [r8, #8]
  4089b6:	f8c4 9008 	str.w	r9, [r4, #8]
  4089ba:	2301      	movs	r3, #1
  4089bc:	fa03 f30c 	lsl.w	r3, r3, ip
  4089c0:	4313      	orrs	r3, r2
  4089c2:	f8c4 800c 	str.w	r8, [r4, #12]
  4089c6:	604b      	str	r3, [r1, #4]
  4089c8:	f8c8 4008 	str.w	r4, [r8, #8]
  4089cc:	f8c9 400c 	str.w	r4, [r9, #12]
  4089d0:	1082      	asrs	r2, r0, #2
  4089d2:	2401      	movs	r4, #1
  4089d4:	4094      	lsls	r4, r2
  4089d6:	429c      	cmp	r4, r3
  4089d8:	d862      	bhi.n	408aa0 <_malloc_r+0x1d4>
  4089da:	4223      	tst	r3, r4
  4089dc:	d106      	bne.n	4089ec <_malloc_r+0x120>
  4089de:	f020 0003 	bic.w	r0, r0, #3
  4089e2:	0064      	lsls	r4, r4, #1
  4089e4:	4223      	tst	r3, r4
  4089e6:	f100 0004 	add.w	r0, r0, #4
  4089ea:	d0fa      	beq.n	4089e2 <_malloc_r+0x116>
  4089ec:	eb07 08c0 	add.w	r8, r7, r0, lsl #3
  4089f0:	46c4      	mov	ip, r8
  4089f2:	4681      	mov	r9, r0
  4089f4:	f8dc 300c 	ldr.w	r3, [ip, #12]
  4089f8:	459c      	cmp	ip, r3
  4089fa:	d107      	bne.n	408a0c <_malloc_r+0x140>
  4089fc:	e141      	b.n	408c82 <_malloc_r+0x3b6>
  4089fe:	2900      	cmp	r1, #0
  408a00:	f280 8151 	bge.w	408ca6 <_malloc_r+0x3da>
  408a04:	68db      	ldr	r3, [r3, #12]
  408a06:	459c      	cmp	ip, r3
  408a08:	f000 813b 	beq.w	408c82 <_malloc_r+0x3b6>
  408a0c:	685a      	ldr	r2, [r3, #4]
  408a0e:	f022 0203 	bic.w	r2, r2, #3
  408a12:	1b51      	subs	r1, r2, r5
  408a14:	290f      	cmp	r1, #15
  408a16:	ddf2      	ble.n	4089fe <_malloc_r+0x132>
  408a18:	461c      	mov	r4, r3
  408a1a:	f8d3 c00c 	ldr.w	ip, [r3, #12]
  408a1e:	f854 8f08 	ldr.w	r8, [r4, #8]!
  408a22:	195a      	adds	r2, r3, r5
  408a24:	f045 0901 	orr.w	r9, r5, #1
  408a28:	f041 0501 	orr.w	r5, r1, #1
  408a2c:	f8c3 9004 	str.w	r9, [r3, #4]
  408a30:	4630      	mov	r0, r6
  408a32:	f8c8 c00c 	str.w	ip, [r8, #12]
  408a36:	f8cc 8008 	str.w	r8, [ip, #8]
  408a3a:	617a      	str	r2, [r7, #20]
  408a3c:	613a      	str	r2, [r7, #16]
  408a3e:	f8c2 e00c 	str.w	lr, [r2, #12]
  408a42:	f8c2 e008 	str.w	lr, [r2, #8]
  408a46:	6055      	str	r5, [r2, #4]
  408a48:	5051      	str	r1, [r2, r1]
  408a4a:	f000 fb9b 	bl	409184 <__malloc_unlock>
  408a4e:	e769      	b.n	408924 <_malloc_r+0x58>
  408a50:	2400      	movs	r4, #0
  408a52:	230c      	movs	r3, #12
  408a54:	4620      	mov	r0, r4
  408a56:	6033      	str	r3, [r6, #0]
  408a58:	b003      	add	sp, #12
  408a5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  408a5e:	217e      	movs	r1, #126	; 0x7e
  408a60:	203f      	movs	r0, #63	; 0x3f
  408a62:	e773      	b.n	40894c <_malloc_r+0x80>
  408a64:	4423      	add	r3, r4
  408a66:	68e1      	ldr	r1, [r4, #12]
  408a68:	685a      	ldr	r2, [r3, #4]
  408a6a:	68a5      	ldr	r5, [r4, #8]
  408a6c:	f042 0201 	orr.w	r2, r2, #1
  408a70:	60e9      	str	r1, [r5, #12]
  408a72:	4630      	mov	r0, r6
  408a74:	608d      	str	r5, [r1, #8]
  408a76:	605a      	str	r2, [r3, #4]
  408a78:	f000 fb84 	bl	409184 <__malloc_unlock>
  408a7c:	3408      	adds	r4, #8
  408a7e:	4620      	mov	r0, r4
  408a80:	b003      	add	sp, #12
  408a82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  408a86:	4423      	add	r3, r4
  408a88:	4630      	mov	r0, r6
  408a8a:	685a      	ldr	r2, [r3, #4]
  408a8c:	f042 0201 	orr.w	r2, r2, #1
  408a90:	605a      	str	r2, [r3, #4]
  408a92:	f000 fb77 	bl	409184 <__malloc_unlock>
  408a96:	3408      	adds	r4, #8
  408a98:	4620      	mov	r0, r4
  408a9a:	b003      	add	sp, #12
  408a9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  408aa0:	68bc      	ldr	r4, [r7, #8]
  408aa2:	6863      	ldr	r3, [r4, #4]
  408aa4:	f023 0803 	bic.w	r8, r3, #3
  408aa8:	4545      	cmp	r5, r8
  408aaa:	d804      	bhi.n	408ab6 <_malloc_r+0x1ea>
  408aac:	ebc5 0308 	rsb	r3, r5, r8
  408ab0:	2b0f      	cmp	r3, #15
  408ab2:	f300 808c 	bgt.w	408bce <_malloc_r+0x302>
  408ab6:	4b53      	ldr	r3, [pc, #332]	; (408c04 <_malloc_r+0x338>)
  408ab8:	f8df a158 	ldr.w	sl, [pc, #344]	; 408c14 <_malloc_r+0x348>
  408abc:	681a      	ldr	r2, [r3, #0]
  408abe:	f8da 3000 	ldr.w	r3, [sl]
  408ac2:	3301      	adds	r3, #1
  408ac4:	442a      	add	r2, r5
  408ac6:	eb04 0b08 	add.w	fp, r4, r8
  408aca:	f000 8150 	beq.w	408d6e <_malloc_r+0x4a2>
  408ace:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
  408ad2:	320f      	adds	r2, #15
  408ad4:	f422 627f 	bic.w	r2, r2, #4080	; 0xff0
  408ad8:	f022 020f 	bic.w	r2, r2, #15
  408adc:	4611      	mov	r1, r2
  408ade:	4630      	mov	r0, r6
  408ae0:	9201      	str	r2, [sp, #4]
  408ae2:	f000 fd4f 	bl	409584 <_sbrk_r>
  408ae6:	f1b0 3fff 	cmp.w	r0, #4294967295
  408aea:	4681      	mov	r9, r0
  408aec:	9a01      	ldr	r2, [sp, #4]
  408aee:	f000 8147 	beq.w	408d80 <_malloc_r+0x4b4>
  408af2:	4583      	cmp	fp, r0
  408af4:	f200 80ee 	bhi.w	408cd4 <_malloc_r+0x408>
  408af8:	4b43      	ldr	r3, [pc, #268]	; (408c08 <_malloc_r+0x33c>)
  408afa:	6819      	ldr	r1, [r3, #0]
  408afc:	45cb      	cmp	fp, r9
  408afe:	4411      	add	r1, r2
  408b00:	6019      	str	r1, [r3, #0]
  408b02:	f000 8142 	beq.w	408d8a <_malloc_r+0x4be>
  408b06:	f8da 0000 	ldr.w	r0, [sl]
  408b0a:	f8df e108 	ldr.w	lr, [pc, #264]	; 408c14 <_malloc_r+0x348>
  408b0e:	3001      	adds	r0, #1
  408b10:	bf1b      	ittet	ne
  408b12:	ebcb 0b09 	rsbne	fp, fp, r9
  408b16:	4459      	addne	r1, fp
  408b18:	f8ce 9000 	streq.w	r9, [lr]
  408b1c:	6019      	strne	r1, [r3, #0]
  408b1e:	f019 0107 	ands.w	r1, r9, #7
  408b22:	f000 8107 	beq.w	408d34 <_malloc_r+0x468>
  408b26:	f1c1 0008 	rsb	r0, r1, #8
  408b2a:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
  408b2e:	4481      	add	r9, r0
  408b30:	3108      	adds	r1, #8
  408b32:	444a      	add	r2, r9
  408b34:	f3c2 020b 	ubfx	r2, r2, #0, #12
  408b38:	ebc2 0a01 	rsb	sl, r2, r1
  408b3c:	4651      	mov	r1, sl
  408b3e:	4630      	mov	r0, r6
  408b40:	9301      	str	r3, [sp, #4]
  408b42:	f000 fd1f 	bl	409584 <_sbrk_r>
  408b46:	1c43      	adds	r3, r0, #1
  408b48:	9b01      	ldr	r3, [sp, #4]
  408b4a:	f000 812c 	beq.w	408da6 <_malloc_r+0x4da>
  408b4e:	ebc9 0200 	rsb	r2, r9, r0
  408b52:	4452      	add	r2, sl
  408b54:	f042 0201 	orr.w	r2, r2, #1
  408b58:	6819      	ldr	r1, [r3, #0]
  408b5a:	f8c7 9008 	str.w	r9, [r7, #8]
  408b5e:	4451      	add	r1, sl
  408b60:	42bc      	cmp	r4, r7
  408b62:	f8c9 2004 	str.w	r2, [r9, #4]
  408b66:	6019      	str	r1, [r3, #0]
  408b68:	f8df a09c 	ldr.w	sl, [pc, #156]	; 408c08 <_malloc_r+0x33c>
  408b6c:	d016      	beq.n	408b9c <_malloc_r+0x2d0>
  408b6e:	f1b8 0f0f 	cmp.w	r8, #15
  408b72:	f240 80ee 	bls.w	408d52 <_malloc_r+0x486>
  408b76:	6862      	ldr	r2, [r4, #4]
  408b78:	f1a8 030c 	sub.w	r3, r8, #12
  408b7c:	f023 0307 	bic.w	r3, r3, #7
  408b80:	18e0      	adds	r0, r4, r3
  408b82:	f002 0201 	and.w	r2, r2, #1
  408b86:	f04f 0e05 	mov.w	lr, #5
  408b8a:	431a      	orrs	r2, r3
  408b8c:	2b0f      	cmp	r3, #15
  408b8e:	6062      	str	r2, [r4, #4]
  408b90:	f8c0 e004 	str.w	lr, [r0, #4]
  408b94:	f8c0 e008 	str.w	lr, [r0, #8]
  408b98:	f200 8109 	bhi.w	408dae <_malloc_r+0x4e2>
  408b9c:	4b1b      	ldr	r3, [pc, #108]	; (408c0c <_malloc_r+0x340>)
  408b9e:	68bc      	ldr	r4, [r7, #8]
  408ba0:	681a      	ldr	r2, [r3, #0]
  408ba2:	4291      	cmp	r1, r2
  408ba4:	bf88      	it	hi
  408ba6:	6019      	strhi	r1, [r3, #0]
  408ba8:	4b19      	ldr	r3, [pc, #100]	; (408c10 <_malloc_r+0x344>)
  408baa:	681a      	ldr	r2, [r3, #0]
  408bac:	4291      	cmp	r1, r2
  408bae:	6862      	ldr	r2, [r4, #4]
  408bb0:	bf88      	it	hi
  408bb2:	6019      	strhi	r1, [r3, #0]
  408bb4:	f022 0203 	bic.w	r2, r2, #3
  408bb8:	4295      	cmp	r5, r2
  408bba:	eba2 0305 	sub.w	r3, r2, r5
  408bbe:	d801      	bhi.n	408bc4 <_malloc_r+0x2f8>
  408bc0:	2b0f      	cmp	r3, #15
  408bc2:	dc04      	bgt.n	408bce <_malloc_r+0x302>
  408bc4:	4630      	mov	r0, r6
  408bc6:	f000 fadd 	bl	409184 <__malloc_unlock>
  408bca:	2400      	movs	r4, #0
  408bcc:	e6aa      	b.n	408924 <_malloc_r+0x58>
  408bce:	1962      	adds	r2, r4, r5
  408bd0:	f043 0301 	orr.w	r3, r3, #1
  408bd4:	f045 0501 	orr.w	r5, r5, #1
  408bd8:	6065      	str	r5, [r4, #4]
  408bda:	4630      	mov	r0, r6
  408bdc:	60ba      	str	r2, [r7, #8]
  408bde:	6053      	str	r3, [r2, #4]
  408be0:	f000 fad0 	bl	409184 <__malloc_unlock>
  408be4:	3408      	adds	r4, #8
  408be6:	4620      	mov	r0, r4
  408be8:	b003      	add	sp, #12
  408bea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  408bee:	2814      	cmp	r0, #20
  408bf0:	d968      	bls.n	408cc4 <_malloc_r+0x3f8>
  408bf2:	2854      	cmp	r0, #84	; 0x54
  408bf4:	f200 8097 	bhi.w	408d26 <_malloc_r+0x45a>
  408bf8:	0b28      	lsrs	r0, r5, #12
  408bfa:	306e      	adds	r0, #110	; 0x6e
  408bfc:	0041      	lsls	r1, r0, #1
  408bfe:	e6a5      	b.n	40894c <_malloc_r+0x80>
  408c00:	200008b4 	.word	0x200008b4
  408c04:	20001288 	.word	0x20001288
  408c08:	2000128c 	.word	0x2000128c
  408c0c:	20001284 	.word	0x20001284
  408c10:	20001280 	.word	0x20001280
  408c14:	20000cc0 	.word	0x20000cc0
  408c18:	0a5a      	lsrs	r2, r3, #9
  408c1a:	2a04      	cmp	r2, #4
  408c1c:	d955      	bls.n	408cca <_malloc_r+0x3fe>
  408c1e:	2a14      	cmp	r2, #20
  408c20:	f200 80a7 	bhi.w	408d72 <_malloc_r+0x4a6>
  408c24:	325b      	adds	r2, #91	; 0x5b
  408c26:	ea4f 0c42 	mov.w	ip, r2, lsl #1
  408c2a:	eb07 0c8c 	add.w	ip, r7, ip, lsl #2
  408c2e:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 408dec <_malloc_r+0x520>
  408c32:	f8dc 1008 	ldr.w	r1, [ip, #8]
  408c36:	4561      	cmp	r1, ip
  408c38:	d07f      	beq.n	408d3a <_malloc_r+0x46e>
  408c3a:	684a      	ldr	r2, [r1, #4]
  408c3c:	f022 0203 	bic.w	r2, r2, #3
  408c40:	4293      	cmp	r3, r2
  408c42:	d202      	bcs.n	408c4a <_malloc_r+0x37e>
  408c44:	6889      	ldr	r1, [r1, #8]
  408c46:	458c      	cmp	ip, r1
  408c48:	d1f7      	bne.n	408c3a <_malloc_r+0x36e>
  408c4a:	68ca      	ldr	r2, [r1, #12]
  408c4c:	687b      	ldr	r3, [r7, #4]
  408c4e:	60e2      	str	r2, [r4, #12]
  408c50:	60a1      	str	r1, [r4, #8]
  408c52:	6094      	str	r4, [r2, #8]
  408c54:	60cc      	str	r4, [r1, #12]
  408c56:	e6bb      	b.n	4089d0 <_malloc_r+0x104>
  408c58:	1963      	adds	r3, r4, r5
  408c5a:	f042 0701 	orr.w	r7, r2, #1
  408c5e:	f045 0501 	orr.w	r5, r5, #1
  408c62:	6065      	str	r5, [r4, #4]
  408c64:	4630      	mov	r0, r6
  408c66:	614b      	str	r3, [r1, #20]
  408c68:	610b      	str	r3, [r1, #16]
  408c6a:	f8c3 e00c 	str.w	lr, [r3, #12]
  408c6e:	f8c3 e008 	str.w	lr, [r3, #8]
  408c72:	605f      	str	r7, [r3, #4]
  408c74:	509a      	str	r2, [r3, r2]
  408c76:	3408      	adds	r4, #8
  408c78:	f000 fa84 	bl	409184 <__malloc_unlock>
  408c7c:	e652      	b.n	408924 <_malloc_r+0x58>
  408c7e:	684b      	ldr	r3, [r1, #4]
  408c80:	e6a6      	b.n	4089d0 <_malloc_r+0x104>
  408c82:	f109 0901 	add.w	r9, r9, #1
  408c86:	f019 0f03 	tst.w	r9, #3
  408c8a:	f10c 0c08 	add.w	ip, ip, #8
  408c8e:	f47f aeb1 	bne.w	4089f4 <_malloc_r+0x128>
  408c92:	e02c      	b.n	408cee <_malloc_r+0x422>
  408c94:	f104 0308 	add.w	r3, r4, #8
  408c98:	6964      	ldr	r4, [r4, #20]
  408c9a:	42a3      	cmp	r3, r4
  408c9c:	bf08      	it	eq
  408c9e:	3002      	addeq	r0, #2
  408ca0:	f43f ae69 	beq.w	408976 <_malloc_r+0xaa>
  408ca4:	e62e      	b.n	408904 <_malloc_r+0x38>
  408ca6:	441a      	add	r2, r3
  408ca8:	461c      	mov	r4, r3
  408caa:	6851      	ldr	r1, [r2, #4]
  408cac:	68db      	ldr	r3, [r3, #12]
  408cae:	f854 5f08 	ldr.w	r5, [r4, #8]!
  408cb2:	f041 0101 	orr.w	r1, r1, #1
  408cb6:	6051      	str	r1, [r2, #4]
  408cb8:	4630      	mov	r0, r6
  408cba:	60eb      	str	r3, [r5, #12]
  408cbc:	609d      	str	r5, [r3, #8]
  408cbe:	f000 fa61 	bl	409184 <__malloc_unlock>
  408cc2:	e62f      	b.n	408924 <_malloc_r+0x58>
  408cc4:	305b      	adds	r0, #91	; 0x5b
  408cc6:	0041      	lsls	r1, r0, #1
  408cc8:	e640      	b.n	40894c <_malloc_r+0x80>
  408cca:	099a      	lsrs	r2, r3, #6
  408ccc:	3238      	adds	r2, #56	; 0x38
  408cce:	ea4f 0c42 	mov.w	ip, r2, lsl #1
  408cd2:	e7aa      	b.n	408c2a <_malloc_r+0x35e>
  408cd4:	42bc      	cmp	r4, r7
  408cd6:	4b45      	ldr	r3, [pc, #276]	; (408dec <_malloc_r+0x520>)
  408cd8:	f43f af0e 	beq.w	408af8 <_malloc_r+0x22c>
  408cdc:	689c      	ldr	r4, [r3, #8]
  408cde:	6862      	ldr	r2, [r4, #4]
  408ce0:	f022 0203 	bic.w	r2, r2, #3
  408ce4:	e768      	b.n	408bb8 <_malloc_r+0x2ec>
  408ce6:	f8d8 8000 	ldr.w	r8, [r8]
  408cea:	4598      	cmp	r8, r3
  408cec:	d17c      	bne.n	408de8 <_malloc_r+0x51c>
  408cee:	f010 0f03 	tst.w	r0, #3
  408cf2:	f1a8 0308 	sub.w	r3, r8, #8
  408cf6:	f100 30ff 	add.w	r0, r0, #4294967295
  408cfa:	d1f4      	bne.n	408ce6 <_malloc_r+0x41a>
  408cfc:	687b      	ldr	r3, [r7, #4]
  408cfe:	ea23 0304 	bic.w	r3, r3, r4
  408d02:	607b      	str	r3, [r7, #4]
  408d04:	0064      	lsls	r4, r4, #1
  408d06:	429c      	cmp	r4, r3
  408d08:	f63f aeca 	bhi.w	408aa0 <_malloc_r+0x1d4>
  408d0c:	2c00      	cmp	r4, #0
  408d0e:	f43f aec7 	beq.w	408aa0 <_malloc_r+0x1d4>
  408d12:	4223      	tst	r3, r4
  408d14:	4648      	mov	r0, r9
  408d16:	f47f ae69 	bne.w	4089ec <_malloc_r+0x120>
  408d1a:	0064      	lsls	r4, r4, #1
  408d1c:	4223      	tst	r3, r4
  408d1e:	f100 0004 	add.w	r0, r0, #4
  408d22:	d0fa      	beq.n	408d1a <_malloc_r+0x44e>
  408d24:	e662      	b.n	4089ec <_malloc_r+0x120>
  408d26:	f5b0 7faa 	cmp.w	r0, #340	; 0x154
  408d2a:	d818      	bhi.n	408d5e <_malloc_r+0x492>
  408d2c:	0be8      	lsrs	r0, r5, #15
  408d2e:	3077      	adds	r0, #119	; 0x77
  408d30:	0041      	lsls	r1, r0, #1
  408d32:	e60b      	b.n	40894c <_malloc_r+0x80>
  408d34:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  408d38:	e6fb      	b.n	408b32 <_malloc_r+0x266>
  408d3a:	f8d8 3004 	ldr.w	r3, [r8, #4]
  408d3e:	1092      	asrs	r2, r2, #2
  408d40:	f04f 0c01 	mov.w	ip, #1
  408d44:	fa0c f202 	lsl.w	r2, ip, r2
  408d48:	4313      	orrs	r3, r2
  408d4a:	f8c8 3004 	str.w	r3, [r8, #4]
  408d4e:	460a      	mov	r2, r1
  408d50:	e77d      	b.n	408c4e <_malloc_r+0x382>
  408d52:	2301      	movs	r3, #1
  408d54:	f8c9 3004 	str.w	r3, [r9, #4]
  408d58:	464c      	mov	r4, r9
  408d5a:	2200      	movs	r2, #0
  408d5c:	e72c      	b.n	408bb8 <_malloc_r+0x2ec>
  408d5e:	f240 5354 	movw	r3, #1364	; 0x554
  408d62:	4298      	cmp	r0, r3
  408d64:	d81c      	bhi.n	408da0 <_malloc_r+0x4d4>
  408d66:	0ca8      	lsrs	r0, r5, #18
  408d68:	307c      	adds	r0, #124	; 0x7c
  408d6a:	0041      	lsls	r1, r0, #1
  408d6c:	e5ee      	b.n	40894c <_malloc_r+0x80>
  408d6e:	3210      	adds	r2, #16
  408d70:	e6b4      	b.n	408adc <_malloc_r+0x210>
  408d72:	2a54      	cmp	r2, #84	; 0x54
  408d74:	d823      	bhi.n	408dbe <_malloc_r+0x4f2>
  408d76:	0b1a      	lsrs	r2, r3, #12
  408d78:	326e      	adds	r2, #110	; 0x6e
  408d7a:	ea4f 0c42 	mov.w	ip, r2, lsl #1
  408d7e:	e754      	b.n	408c2a <_malloc_r+0x35e>
  408d80:	68bc      	ldr	r4, [r7, #8]
  408d82:	6862      	ldr	r2, [r4, #4]
  408d84:	f022 0203 	bic.w	r2, r2, #3
  408d88:	e716      	b.n	408bb8 <_malloc_r+0x2ec>
  408d8a:	f3cb 000b 	ubfx	r0, fp, #0, #12
  408d8e:	2800      	cmp	r0, #0
  408d90:	f47f aeb9 	bne.w	408b06 <_malloc_r+0x23a>
  408d94:	4442      	add	r2, r8
  408d96:	68bb      	ldr	r3, [r7, #8]
  408d98:	f042 0201 	orr.w	r2, r2, #1
  408d9c:	605a      	str	r2, [r3, #4]
  408d9e:	e6fd      	b.n	408b9c <_malloc_r+0x2d0>
  408da0:	21fc      	movs	r1, #252	; 0xfc
  408da2:	207e      	movs	r0, #126	; 0x7e
  408da4:	e5d2      	b.n	40894c <_malloc_r+0x80>
  408da6:	2201      	movs	r2, #1
  408da8:	f04f 0a00 	mov.w	sl, #0
  408dac:	e6d4      	b.n	408b58 <_malloc_r+0x28c>
  408dae:	f104 0108 	add.w	r1, r4, #8
  408db2:	4630      	mov	r0, r6
  408db4:	f7ff fa2c 	bl	408210 <_free_r>
  408db8:	f8da 1000 	ldr.w	r1, [sl]
  408dbc:	e6ee      	b.n	408b9c <_malloc_r+0x2d0>
  408dbe:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  408dc2:	d804      	bhi.n	408dce <_malloc_r+0x502>
  408dc4:	0bda      	lsrs	r2, r3, #15
  408dc6:	3277      	adds	r2, #119	; 0x77
  408dc8:	ea4f 0c42 	mov.w	ip, r2, lsl #1
  408dcc:	e72d      	b.n	408c2a <_malloc_r+0x35e>
  408dce:	f240 5154 	movw	r1, #1364	; 0x554
  408dd2:	428a      	cmp	r2, r1
  408dd4:	d804      	bhi.n	408de0 <_malloc_r+0x514>
  408dd6:	0c9a      	lsrs	r2, r3, #18
  408dd8:	327c      	adds	r2, #124	; 0x7c
  408dda:	ea4f 0c42 	mov.w	ip, r2, lsl #1
  408dde:	e724      	b.n	408c2a <_malloc_r+0x35e>
  408de0:	f04f 0cfc 	mov.w	ip, #252	; 0xfc
  408de4:	227e      	movs	r2, #126	; 0x7e
  408de6:	e720      	b.n	408c2a <_malloc_r+0x35e>
  408de8:	687b      	ldr	r3, [r7, #4]
  408dea:	e78b      	b.n	408d04 <_malloc_r+0x438>
  408dec:	200008b4 	.word	0x200008b4

00408df0 <memchr>:
  408df0:	0783      	lsls	r3, r0, #30
  408df2:	b470      	push	{r4, r5, r6}
  408df4:	b2c9      	uxtb	r1, r1
  408df6:	d040      	beq.n	408e7a <memchr+0x8a>
  408df8:	1e54      	subs	r4, r2, #1
  408dfa:	2a00      	cmp	r2, #0
  408dfc:	d03f      	beq.n	408e7e <memchr+0x8e>
  408dfe:	7803      	ldrb	r3, [r0, #0]
  408e00:	428b      	cmp	r3, r1
  408e02:	bf18      	it	ne
  408e04:	1c43      	addne	r3, r0, #1
  408e06:	d106      	bne.n	408e16 <memchr+0x26>
  408e08:	e01d      	b.n	408e46 <memchr+0x56>
  408e0a:	b1f4      	cbz	r4, 408e4a <memchr+0x5a>
  408e0c:	7802      	ldrb	r2, [r0, #0]
  408e0e:	428a      	cmp	r2, r1
  408e10:	f104 34ff 	add.w	r4, r4, #4294967295
  408e14:	d017      	beq.n	408e46 <memchr+0x56>
  408e16:	f013 0f03 	tst.w	r3, #3
  408e1a:	4618      	mov	r0, r3
  408e1c:	f103 0301 	add.w	r3, r3, #1
  408e20:	d1f3      	bne.n	408e0a <memchr+0x1a>
  408e22:	2c03      	cmp	r4, #3
  408e24:	d814      	bhi.n	408e50 <memchr+0x60>
  408e26:	b184      	cbz	r4, 408e4a <memchr+0x5a>
  408e28:	7803      	ldrb	r3, [r0, #0]
  408e2a:	428b      	cmp	r3, r1
  408e2c:	d00b      	beq.n	408e46 <memchr+0x56>
  408e2e:	1905      	adds	r5, r0, r4
  408e30:	1c43      	adds	r3, r0, #1
  408e32:	e002      	b.n	408e3a <memchr+0x4a>
  408e34:	7802      	ldrb	r2, [r0, #0]
  408e36:	428a      	cmp	r2, r1
  408e38:	d005      	beq.n	408e46 <memchr+0x56>
  408e3a:	42ab      	cmp	r3, r5
  408e3c:	4618      	mov	r0, r3
  408e3e:	f103 0301 	add.w	r3, r3, #1
  408e42:	d1f7      	bne.n	408e34 <memchr+0x44>
  408e44:	2000      	movs	r0, #0
  408e46:	bc70      	pop	{r4, r5, r6}
  408e48:	4770      	bx	lr
  408e4a:	4620      	mov	r0, r4
  408e4c:	bc70      	pop	{r4, r5, r6}
  408e4e:	4770      	bx	lr
  408e50:	ea41 2601 	orr.w	r6, r1, r1, lsl #8
  408e54:	4602      	mov	r2, r0
  408e56:	ea46 4606 	orr.w	r6, r6, r6, lsl #16
  408e5a:	4610      	mov	r0, r2
  408e5c:	3204      	adds	r2, #4
  408e5e:	6803      	ldr	r3, [r0, #0]
  408e60:	4073      	eors	r3, r6
  408e62:	f1a3 3501 	sub.w	r5, r3, #16843009	; 0x1010101
  408e66:	ea25 0303 	bic.w	r3, r5, r3
  408e6a:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
  408e6e:	d1da      	bne.n	408e26 <memchr+0x36>
  408e70:	3c04      	subs	r4, #4
  408e72:	2c03      	cmp	r4, #3
  408e74:	4610      	mov	r0, r2
  408e76:	d8f0      	bhi.n	408e5a <memchr+0x6a>
  408e78:	e7d5      	b.n	408e26 <memchr+0x36>
  408e7a:	4614      	mov	r4, r2
  408e7c:	e7d1      	b.n	408e22 <memchr+0x32>
  408e7e:	4610      	mov	r0, r2
  408e80:	e7e1      	b.n	408e46 <memchr+0x56>
  408e82:	bf00      	nop

00408e84 <memcmp>:
  408e84:	2a03      	cmp	r2, #3
  408e86:	b470      	push	{r4, r5, r6}
  408e88:	d926      	bls.n	408ed8 <memcmp+0x54>
  408e8a:	ea40 0301 	orr.w	r3, r0, r1
  408e8e:	079b      	lsls	r3, r3, #30
  408e90:	d011      	beq.n	408eb6 <memcmp+0x32>
  408e92:	7804      	ldrb	r4, [r0, #0]
  408e94:	780d      	ldrb	r5, [r1, #0]
  408e96:	42ac      	cmp	r4, r5
  408e98:	d122      	bne.n	408ee0 <memcmp+0x5c>
  408e9a:	4402      	add	r2, r0
  408e9c:	1c43      	adds	r3, r0, #1
  408e9e:	e005      	b.n	408eac <memcmp+0x28>
  408ea0:	f813 4b01 	ldrb.w	r4, [r3], #1
  408ea4:	f811 5f01 	ldrb.w	r5, [r1, #1]!
  408ea8:	42ac      	cmp	r4, r5
  408eaa:	d119      	bne.n	408ee0 <memcmp+0x5c>
  408eac:	4293      	cmp	r3, r2
  408eae:	d1f7      	bne.n	408ea0 <memcmp+0x1c>
  408eb0:	2000      	movs	r0, #0
  408eb2:	bc70      	pop	{r4, r5, r6}
  408eb4:	4770      	bx	lr
  408eb6:	460c      	mov	r4, r1
  408eb8:	4603      	mov	r3, r0
  408eba:	681e      	ldr	r6, [r3, #0]
  408ebc:	6825      	ldr	r5, [r4, #0]
  408ebe:	42ae      	cmp	r6, r5
  408ec0:	4618      	mov	r0, r3
  408ec2:	4621      	mov	r1, r4
  408ec4:	f103 0304 	add.w	r3, r3, #4
  408ec8:	f104 0404 	add.w	r4, r4, #4
  408ecc:	d104      	bne.n	408ed8 <memcmp+0x54>
  408ece:	3a04      	subs	r2, #4
  408ed0:	2a03      	cmp	r2, #3
  408ed2:	4618      	mov	r0, r3
  408ed4:	4621      	mov	r1, r4
  408ed6:	d8f0      	bhi.n	408eba <memcmp+0x36>
  408ed8:	2a00      	cmp	r2, #0
  408eda:	d1da      	bne.n	408e92 <memcmp+0xe>
  408edc:	4610      	mov	r0, r2
  408ede:	e7e8      	b.n	408eb2 <memcmp+0x2e>
  408ee0:	1b60      	subs	r0, r4, r5
  408ee2:	bc70      	pop	{r4, r5, r6}
  408ee4:	4770      	bx	lr
  408ee6:	bf00      	nop

00408ee8 <memcpy>:
  408ee8:	4684      	mov	ip, r0
  408eea:	ea41 0300 	orr.w	r3, r1, r0
  408eee:	f013 0303 	ands.w	r3, r3, #3
  408ef2:	d16d      	bne.n	408fd0 <memcpy+0xe8>
  408ef4:	3a40      	subs	r2, #64	; 0x40
  408ef6:	d341      	bcc.n	408f7c <memcpy+0x94>
  408ef8:	f851 3b04 	ldr.w	r3, [r1], #4
  408efc:	f840 3b04 	str.w	r3, [r0], #4
  408f00:	f851 3b04 	ldr.w	r3, [r1], #4
  408f04:	f840 3b04 	str.w	r3, [r0], #4
  408f08:	f851 3b04 	ldr.w	r3, [r1], #4
  408f0c:	f840 3b04 	str.w	r3, [r0], #4
  408f10:	f851 3b04 	ldr.w	r3, [r1], #4
  408f14:	f840 3b04 	str.w	r3, [r0], #4
  408f18:	f851 3b04 	ldr.w	r3, [r1], #4
  408f1c:	f840 3b04 	str.w	r3, [r0], #4
  408f20:	f851 3b04 	ldr.w	r3, [r1], #4
  408f24:	f840 3b04 	str.w	r3, [r0], #4
  408f28:	f851 3b04 	ldr.w	r3, [r1], #4
  408f2c:	f840 3b04 	str.w	r3, [r0], #4
  408f30:	f851 3b04 	ldr.w	r3, [r1], #4
  408f34:	f840 3b04 	str.w	r3, [r0], #4
  408f38:	f851 3b04 	ldr.w	r3, [r1], #4
  408f3c:	f840 3b04 	str.w	r3, [r0], #4
  408f40:	f851 3b04 	ldr.w	r3, [r1], #4
  408f44:	f840 3b04 	str.w	r3, [r0], #4
  408f48:	f851 3b04 	ldr.w	r3, [r1], #4
  408f4c:	f840 3b04 	str.w	r3, [r0], #4
  408f50:	f851 3b04 	ldr.w	r3, [r1], #4
  408f54:	f840 3b04 	str.w	r3, [r0], #4
  408f58:	f851 3b04 	ldr.w	r3, [r1], #4
  408f5c:	f840 3b04 	str.w	r3, [r0], #4
  408f60:	f851 3b04 	ldr.w	r3, [r1], #4
  408f64:	f840 3b04 	str.w	r3, [r0], #4
  408f68:	f851 3b04 	ldr.w	r3, [r1], #4
  408f6c:	f840 3b04 	str.w	r3, [r0], #4
  408f70:	f851 3b04 	ldr.w	r3, [r1], #4
  408f74:	f840 3b04 	str.w	r3, [r0], #4
  408f78:	3a40      	subs	r2, #64	; 0x40
  408f7a:	d2bd      	bcs.n	408ef8 <memcpy+0x10>
  408f7c:	3230      	adds	r2, #48	; 0x30
  408f7e:	d311      	bcc.n	408fa4 <memcpy+0xbc>
  408f80:	f851 3b04 	ldr.w	r3, [r1], #4
  408f84:	f840 3b04 	str.w	r3, [r0], #4
  408f88:	f851 3b04 	ldr.w	r3, [r1], #4
  408f8c:	f840 3b04 	str.w	r3, [r0], #4
  408f90:	f851 3b04 	ldr.w	r3, [r1], #4
  408f94:	f840 3b04 	str.w	r3, [r0], #4
  408f98:	f851 3b04 	ldr.w	r3, [r1], #4
  408f9c:	f840 3b04 	str.w	r3, [r0], #4
  408fa0:	3a10      	subs	r2, #16
  408fa2:	d2ed      	bcs.n	408f80 <memcpy+0x98>
  408fa4:	320c      	adds	r2, #12
  408fa6:	d305      	bcc.n	408fb4 <memcpy+0xcc>
  408fa8:	f851 3b04 	ldr.w	r3, [r1], #4
  408fac:	f840 3b04 	str.w	r3, [r0], #4
  408fb0:	3a04      	subs	r2, #4
  408fb2:	d2f9      	bcs.n	408fa8 <memcpy+0xc0>
  408fb4:	3204      	adds	r2, #4
  408fb6:	d008      	beq.n	408fca <memcpy+0xe2>
  408fb8:	07d2      	lsls	r2, r2, #31
  408fba:	bf1c      	itt	ne
  408fbc:	f811 3b01 	ldrbne.w	r3, [r1], #1
  408fc0:	f800 3b01 	strbne.w	r3, [r0], #1
  408fc4:	d301      	bcc.n	408fca <memcpy+0xe2>
  408fc6:	880b      	ldrh	r3, [r1, #0]
  408fc8:	8003      	strh	r3, [r0, #0]
  408fca:	4660      	mov	r0, ip
  408fcc:	4770      	bx	lr
  408fce:	bf00      	nop
  408fd0:	2a08      	cmp	r2, #8
  408fd2:	d313      	bcc.n	408ffc <memcpy+0x114>
  408fd4:	078b      	lsls	r3, r1, #30
  408fd6:	d08d      	beq.n	408ef4 <memcpy+0xc>
  408fd8:	f010 0303 	ands.w	r3, r0, #3
  408fdc:	d08a      	beq.n	408ef4 <memcpy+0xc>
  408fde:	f1c3 0304 	rsb	r3, r3, #4
  408fe2:	1ad2      	subs	r2, r2, r3
  408fe4:	07db      	lsls	r3, r3, #31
  408fe6:	bf1c      	itt	ne
  408fe8:	f811 3b01 	ldrbne.w	r3, [r1], #1
  408fec:	f800 3b01 	strbne.w	r3, [r0], #1
  408ff0:	d380      	bcc.n	408ef4 <memcpy+0xc>
  408ff2:	f831 3b02 	ldrh.w	r3, [r1], #2
  408ff6:	f820 3b02 	strh.w	r3, [r0], #2
  408ffa:	e77b      	b.n	408ef4 <memcpy+0xc>
  408ffc:	3a04      	subs	r2, #4
  408ffe:	d3d9      	bcc.n	408fb4 <memcpy+0xcc>
  409000:	3a01      	subs	r2, #1
  409002:	f811 3b01 	ldrb.w	r3, [r1], #1
  409006:	f800 3b01 	strb.w	r3, [r0], #1
  40900a:	d2f9      	bcs.n	409000 <memcpy+0x118>
  40900c:	780b      	ldrb	r3, [r1, #0]
  40900e:	7003      	strb	r3, [r0, #0]
  409010:	784b      	ldrb	r3, [r1, #1]
  409012:	7043      	strb	r3, [r0, #1]
  409014:	788b      	ldrb	r3, [r1, #2]
  409016:	7083      	strb	r3, [r0, #2]
  409018:	4660      	mov	r0, ip
  40901a:	4770      	bx	lr

0040901c <memmove>:
  40901c:	4288      	cmp	r0, r1
  40901e:	b5f0      	push	{r4, r5, r6, r7, lr}
  409020:	d90d      	bls.n	40903e <memmove+0x22>
  409022:	188b      	adds	r3, r1, r2
  409024:	4298      	cmp	r0, r3
  409026:	d20a      	bcs.n	40903e <memmove+0x22>
  409028:	1881      	adds	r1, r0, r2
  40902a:	2a00      	cmp	r2, #0
  40902c:	d054      	beq.n	4090d8 <memmove+0xbc>
  40902e:	1a9a      	subs	r2, r3, r2
  409030:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
  409034:	f801 4d01 	strb.w	r4, [r1, #-1]!
  409038:	4293      	cmp	r3, r2
  40903a:	d1f9      	bne.n	409030 <memmove+0x14>
  40903c:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40903e:	2a0f      	cmp	r2, #15
  409040:	d948      	bls.n	4090d4 <memmove+0xb8>
  409042:	ea40 0301 	orr.w	r3, r0, r1
  409046:	079b      	lsls	r3, r3, #30
  409048:	d147      	bne.n	4090da <memmove+0xbe>
  40904a:	f100 0410 	add.w	r4, r0, #16
  40904e:	f101 0310 	add.w	r3, r1, #16
  409052:	4615      	mov	r5, r2
  409054:	f853 6c10 	ldr.w	r6, [r3, #-16]
  409058:	f844 6c10 	str.w	r6, [r4, #-16]
  40905c:	f853 6c0c 	ldr.w	r6, [r3, #-12]
  409060:	f844 6c0c 	str.w	r6, [r4, #-12]
  409064:	f853 6c08 	ldr.w	r6, [r3, #-8]
  409068:	f844 6c08 	str.w	r6, [r4, #-8]
  40906c:	3d10      	subs	r5, #16
  40906e:	f853 6c04 	ldr.w	r6, [r3, #-4]
  409072:	f844 6c04 	str.w	r6, [r4, #-4]
  409076:	2d0f      	cmp	r5, #15
  409078:	f103 0310 	add.w	r3, r3, #16
  40907c:	f104 0410 	add.w	r4, r4, #16
  409080:	d8e8      	bhi.n	409054 <memmove+0x38>
  409082:	f1a2 0310 	sub.w	r3, r2, #16
  409086:	f023 030f 	bic.w	r3, r3, #15
  40908a:	f002 0e0f 	and.w	lr, r2, #15
  40908e:	3310      	adds	r3, #16
  409090:	f1be 0f03 	cmp.w	lr, #3
  409094:	4419      	add	r1, r3
  409096:	4403      	add	r3, r0
  409098:	d921      	bls.n	4090de <memmove+0xc2>
  40909a:	1f1e      	subs	r6, r3, #4
  40909c:	460d      	mov	r5, r1
  40909e:	4674      	mov	r4, lr
  4090a0:	3c04      	subs	r4, #4
  4090a2:	f855 7b04 	ldr.w	r7, [r5], #4
  4090a6:	f846 7f04 	str.w	r7, [r6, #4]!
  4090aa:	2c03      	cmp	r4, #3
  4090ac:	d8f8      	bhi.n	4090a0 <memmove+0x84>
  4090ae:	f1ae 0404 	sub.w	r4, lr, #4
  4090b2:	f024 0403 	bic.w	r4, r4, #3
  4090b6:	3404      	adds	r4, #4
  4090b8:	4423      	add	r3, r4
  4090ba:	4421      	add	r1, r4
  4090bc:	f002 0203 	and.w	r2, r2, #3
  4090c0:	b152      	cbz	r2, 4090d8 <memmove+0xbc>
  4090c2:	3b01      	subs	r3, #1
  4090c4:	440a      	add	r2, r1
  4090c6:	f811 4b01 	ldrb.w	r4, [r1], #1
  4090ca:	f803 4f01 	strb.w	r4, [r3, #1]!
  4090ce:	4291      	cmp	r1, r2
  4090d0:	d1f9      	bne.n	4090c6 <memmove+0xaa>
  4090d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4090d4:	4603      	mov	r3, r0
  4090d6:	e7f3      	b.n	4090c0 <memmove+0xa4>
  4090d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4090da:	4603      	mov	r3, r0
  4090dc:	e7f1      	b.n	4090c2 <memmove+0xa6>
  4090de:	4672      	mov	r2, lr
  4090e0:	e7ee      	b.n	4090c0 <memmove+0xa4>
  4090e2:	bf00      	nop

004090e4 <memset>:
  4090e4:	b470      	push	{r4, r5, r6}
  4090e6:	0784      	lsls	r4, r0, #30
  4090e8:	d046      	beq.n	409178 <memset+0x94>
  4090ea:	1e54      	subs	r4, r2, #1
  4090ec:	2a00      	cmp	r2, #0
  4090ee:	d041      	beq.n	409174 <memset+0x90>
  4090f0:	b2cd      	uxtb	r5, r1
  4090f2:	4603      	mov	r3, r0
  4090f4:	e002      	b.n	4090fc <memset+0x18>
  4090f6:	1e62      	subs	r2, r4, #1
  4090f8:	b3e4      	cbz	r4, 409174 <memset+0x90>
  4090fa:	4614      	mov	r4, r2
  4090fc:	f803 5b01 	strb.w	r5, [r3], #1
  409100:	079a      	lsls	r2, r3, #30
  409102:	d1f8      	bne.n	4090f6 <memset+0x12>
  409104:	2c03      	cmp	r4, #3
  409106:	d92e      	bls.n	409166 <memset+0x82>
  409108:	b2cd      	uxtb	r5, r1
  40910a:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
  40910e:	2c0f      	cmp	r4, #15
  409110:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
  409114:	d919      	bls.n	40914a <memset+0x66>
  409116:	f103 0210 	add.w	r2, r3, #16
  40911a:	4626      	mov	r6, r4
  40911c:	3e10      	subs	r6, #16
  40911e:	2e0f      	cmp	r6, #15
  409120:	f842 5c10 	str.w	r5, [r2, #-16]
  409124:	f842 5c0c 	str.w	r5, [r2, #-12]
  409128:	f842 5c08 	str.w	r5, [r2, #-8]
  40912c:	f842 5c04 	str.w	r5, [r2, #-4]
  409130:	f102 0210 	add.w	r2, r2, #16
  409134:	d8f2      	bhi.n	40911c <memset+0x38>
  409136:	f1a4 0210 	sub.w	r2, r4, #16
  40913a:	f022 020f 	bic.w	r2, r2, #15
  40913e:	f004 040f 	and.w	r4, r4, #15
  409142:	3210      	adds	r2, #16
  409144:	2c03      	cmp	r4, #3
  409146:	4413      	add	r3, r2
  409148:	d90d      	bls.n	409166 <memset+0x82>
  40914a:	461e      	mov	r6, r3
  40914c:	4622      	mov	r2, r4
  40914e:	3a04      	subs	r2, #4
  409150:	2a03      	cmp	r2, #3
  409152:	f846 5b04 	str.w	r5, [r6], #4
  409156:	d8fa      	bhi.n	40914e <memset+0x6a>
  409158:	1f22      	subs	r2, r4, #4
  40915a:	f022 0203 	bic.w	r2, r2, #3
  40915e:	3204      	adds	r2, #4
  409160:	4413      	add	r3, r2
  409162:	f004 0403 	and.w	r4, r4, #3
  409166:	b12c      	cbz	r4, 409174 <memset+0x90>
  409168:	b2c9      	uxtb	r1, r1
  40916a:	441c      	add	r4, r3
  40916c:	f803 1b01 	strb.w	r1, [r3], #1
  409170:	42a3      	cmp	r3, r4
  409172:	d1fb      	bne.n	40916c <memset+0x88>
  409174:	bc70      	pop	{r4, r5, r6}
  409176:	4770      	bx	lr
  409178:	4614      	mov	r4, r2
  40917a:	4603      	mov	r3, r0
  40917c:	e7c2      	b.n	409104 <memset+0x20>
  40917e:	bf00      	nop

00409180 <__malloc_lock>:
  409180:	4770      	bx	lr
  409182:	bf00      	nop

00409184 <__malloc_unlock>:
  409184:	4770      	bx	lr
  409186:	bf00      	nop

00409188 <realloc>:
  409188:	4b02      	ldr	r3, [pc, #8]	; (409194 <realloc+0xc>)
  40918a:	460a      	mov	r2, r1
  40918c:	4601      	mov	r1, r0
  40918e:	6818      	ldr	r0, [r3, #0]
  409190:	f000 b802 	b.w	409198 <_realloc_r>
  409194:	200008b0 	.word	0x200008b0

00409198 <_realloc_r>:
  409198:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40919c:	4617      	mov	r7, r2
  40919e:	b083      	sub	sp, #12
  4091a0:	460e      	mov	r6, r1
  4091a2:	2900      	cmp	r1, #0
  4091a4:	f000 80e7 	beq.w	409376 <_realloc_r+0x1de>
  4091a8:	4681      	mov	r9, r0
  4091aa:	f107 050b 	add.w	r5, r7, #11
  4091ae:	f7ff ffe7 	bl	409180 <__malloc_lock>
  4091b2:	f856 3c04 	ldr.w	r3, [r6, #-4]
  4091b6:	2d16      	cmp	r5, #22
  4091b8:	f023 0403 	bic.w	r4, r3, #3
  4091bc:	f1a6 0808 	sub.w	r8, r6, #8
  4091c0:	d84c      	bhi.n	40925c <_realloc_r+0xc4>
  4091c2:	2210      	movs	r2, #16
  4091c4:	4615      	mov	r5, r2
  4091c6:	42af      	cmp	r7, r5
  4091c8:	d84d      	bhi.n	409266 <_realloc_r+0xce>
  4091ca:	4294      	cmp	r4, r2
  4091cc:	f280 8084 	bge.w	4092d8 <_realloc_r+0x140>
  4091d0:	f8df b3ac 	ldr.w	fp, [pc, #940]	; 409580 <_realloc_r+0x3e8>
  4091d4:	f8db 0008 	ldr.w	r0, [fp, #8]
  4091d8:	eb08 0104 	add.w	r1, r8, r4
  4091dc:	4288      	cmp	r0, r1
  4091de:	f000 80d6 	beq.w	40938e <_realloc_r+0x1f6>
  4091e2:	6848      	ldr	r0, [r1, #4]
  4091e4:	f020 0e01 	bic.w	lr, r0, #1
  4091e8:	448e      	add	lr, r1
  4091ea:	f8de e004 	ldr.w	lr, [lr, #4]
  4091ee:	f01e 0f01 	tst.w	lr, #1
  4091f2:	d13f      	bne.n	409274 <_realloc_r+0xdc>
  4091f4:	f020 0003 	bic.w	r0, r0, #3
  4091f8:	4420      	add	r0, r4
  4091fa:	4290      	cmp	r0, r2
  4091fc:	f280 80c1 	bge.w	409382 <_realloc_r+0x1ea>
  409200:	07db      	lsls	r3, r3, #31
  409202:	f100 808f 	bmi.w	409324 <_realloc_r+0x18c>
  409206:	f856 3c08 	ldr.w	r3, [r6, #-8]
  40920a:	ebc3 0a08 	rsb	sl, r3, r8
  40920e:	f8da 3004 	ldr.w	r3, [sl, #4]
  409212:	f023 0303 	bic.w	r3, r3, #3
  409216:	eb00 0e03 	add.w	lr, r0, r3
  40921a:	4596      	cmp	lr, r2
  40921c:	db34      	blt.n	409288 <_realloc_r+0xf0>
  40921e:	68cb      	ldr	r3, [r1, #12]
  409220:	688a      	ldr	r2, [r1, #8]
  409222:	4657      	mov	r7, sl
  409224:	60d3      	str	r3, [r2, #12]
  409226:	609a      	str	r2, [r3, #8]
  409228:	f857 1f08 	ldr.w	r1, [r7, #8]!
  40922c:	f8da 300c 	ldr.w	r3, [sl, #12]
  409230:	60cb      	str	r3, [r1, #12]
  409232:	1f22      	subs	r2, r4, #4
  409234:	2a24      	cmp	r2, #36	; 0x24
  409236:	6099      	str	r1, [r3, #8]
  409238:	f200 8136 	bhi.w	4094a8 <_realloc_r+0x310>
  40923c:	2a13      	cmp	r2, #19
  40923e:	f240 80fd 	bls.w	40943c <_realloc_r+0x2a4>
  409242:	6833      	ldr	r3, [r6, #0]
  409244:	f8ca 3008 	str.w	r3, [sl, #8]
  409248:	6873      	ldr	r3, [r6, #4]
  40924a:	f8ca 300c 	str.w	r3, [sl, #12]
  40924e:	2a1b      	cmp	r2, #27
  409250:	f200 8140 	bhi.w	4094d4 <_realloc_r+0x33c>
  409254:	3608      	adds	r6, #8
  409256:	f10a 0310 	add.w	r3, sl, #16
  40925a:	e0f0      	b.n	40943e <_realloc_r+0x2a6>
  40925c:	f025 0507 	bic.w	r5, r5, #7
  409260:	2d00      	cmp	r5, #0
  409262:	462a      	mov	r2, r5
  409264:	daaf      	bge.n	4091c6 <_realloc_r+0x2e>
  409266:	230c      	movs	r3, #12
  409268:	2000      	movs	r0, #0
  40926a:	f8c9 3000 	str.w	r3, [r9]
  40926e:	b003      	add	sp, #12
  409270:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  409274:	07d9      	lsls	r1, r3, #31
  409276:	d455      	bmi.n	409324 <_realloc_r+0x18c>
  409278:	f856 3c08 	ldr.w	r3, [r6, #-8]
  40927c:	ebc3 0a08 	rsb	sl, r3, r8
  409280:	f8da 3004 	ldr.w	r3, [sl, #4]
  409284:	f023 0303 	bic.w	r3, r3, #3
  409288:	4423      	add	r3, r4
  40928a:	4293      	cmp	r3, r2
  40928c:	db4a      	blt.n	409324 <_realloc_r+0x18c>
  40928e:	4657      	mov	r7, sl
  409290:	f8da 100c 	ldr.w	r1, [sl, #12]
  409294:	f857 0f08 	ldr.w	r0, [r7, #8]!
  409298:	1f22      	subs	r2, r4, #4
  40929a:	2a24      	cmp	r2, #36	; 0x24
  40929c:	60c1      	str	r1, [r0, #12]
  40929e:	6088      	str	r0, [r1, #8]
  4092a0:	f200 810e 	bhi.w	4094c0 <_realloc_r+0x328>
  4092a4:	2a13      	cmp	r2, #19
  4092a6:	f240 8109 	bls.w	4094bc <_realloc_r+0x324>
  4092aa:	6831      	ldr	r1, [r6, #0]
  4092ac:	f8ca 1008 	str.w	r1, [sl, #8]
  4092b0:	6871      	ldr	r1, [r6, #4]
  4092b2:	f8ca 100c 	str.w	r1, [sl, #12]
  4092b6:	2a1b      	cmp	r2, #27
  4092b8:	f200 8121 	bhi.w	4094fe <_realloc_r+0x366>
  4092bc:	3608      	adds	r6, #8
  4092be:	f10a 0210 	add.w	r2, sl, #16
  4092c2:	6831      	ldr	r1, [r6, #0]
  4092c4:	6011      	str	r1, [r2, #0]
  4092c6:	6871      	ldr	r1, [r6, #4]
  4092c8:	6051      	str	r1, [r2, #4]
  4092ca:	68b1      	ldr	r1, [r6, #8]
  4092cc:	6091      	str	r1, [r2, #8]
  4092ce:	461c      	mov	r4, r3
  4092d0:	f8da 3004 	ldr.w	r3, [sl, #4]
  4092d4:	463e      	mov	r6, r7
  4092d6:	46d0      	mov	r8, sl
  4092d8:	1b62      	subs	r2, r4, r5
  4092da:	2a0f      	cmp	r2, #15
  4092dc:	f003 0301 	and.w	r3, r3, #1
  4092e0:	d80e      	bhi.n	409300 <_realloc_r+0x168>
  4092e2:	4323      	orrs	r3, r4
  4092e4:	4444      	add	r4, r8
  4092e6:	f8c8 3004 	str.w	r3, [r8, #4]
  4092ea:	6863      	ldr	r3, [r4, #4]
  4092ec:	f043 0301 	orr.w	r3, r3, #1
  4092f0:	6063      	str	r3, [r4, #4]
  4092f2:	4648      	mov	r0, r9
  4092f4:	f7ff ff46 	bl	409184 <__malloc_unlock>
  4092f8:	4630      	mov	r0, r6
  4092fa:	b003      	add	sp, #12
  4092fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  409300:	eb08 0105 	add.w	r1, r8, r5
  409304:	431d      	orrs	r5, r3
  409306:	f042 0301 	orr.w	r3, r2, #1
  40930a:	440a      	add	r2, r1
  40930c:	f8c8 5004 	str.w	r5, [r8, #4]
  409310:	604b      	str	r3, [r1, #4]
  409312:	6853      	ldr	r3, [r2, #4]
  409314:	f043 0301 	orr.w	r3, r3, #1
  409318:	3108      	adds	r1, #8
  40931a:	6053      	str	r3, [r2, #4]
  40931c:	4648      	mov	r0, r9
  40931e:	f7fe ff77 	bl	408210 <_free_r>
  409322:	e7e6      	b.n	4092f2 <_realloc_r+0x15a>
  409324:	4639      	mov	r1, r7
  409326:	4648      	mov	r0, r9
  409328:	f7ff fad0 	bl	4088cc <_malloc_r>
  40932c:	4607      	mov	r7, r0
  40932e:	b1d8      	cbz	r0, 409368 <_realloc_r+0x1d0>
  409330:	f856 3c04 	ldr.w	r3, [r6, #-4]
  409334:	f023 0201 	bic.w	r2, r3, #1
  409338:	4442      	add	r2, r8
  40933a:	f1a0 0108 	sub.w	r1, r0, #8
  40933e:	4291      	cmp	r1, r2
  409340:	f000 80ac 	beq.w	40949c <_realloc_r+0x304>
  409344:	1f22      	subs	r2, r4, #4
  409346:	2a24      	cmp	r2, #36	; 0x24
  409348:	f200 8099 	bhi.w	40947e <_realloc_r+0x2e6>
  40934c:	2a13      	cmp	r2, #19
  40934e:	d86a      	bhi.n	409426 <_realloc_r+0x28e>
  409350:	4603      	mov	r3, r0
  409352:	4632      	mov	r2, r6
  409354:	6811      	ldr	r1, [r2, #0]
  409356:	6019      	str	r1, [r3, #0]
  409358:	6851      	ldr	r1, [r2, #4]
  40935a:	6059      	str	r1, [r3, #4]
  40935c:	6892      	ldr	r2, [r2, #8]
  40935e:	609a      	str	r2, [r3, #8]
  409360:	4631      	mov	r1, r6
  409362:	4648      	mov	r0, r9
  409364:	f7fe ff54 	bl	408210 <_free_r>
  409368:	4648      	mov	r0, r9
  40936a:	f7ff ff0b 	bl	409184 <__malloc_unlock>
  40936e:	4638      	mov	r0, r7
  409370:	b003      	add	sp, #12
  409372:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  409376:	4611      	mov	r1, r2
  409378:	b003      	add	sp, #12
  40937a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40937e:	f7ff baa5 	b.w	4088cc <_malloc_r>
  409382:	68ca      	ldr	r2, [r1, #12]
  409384:	6889      	ldr	r1, [r1, #8]
  409386:	4604      	mov	r4, r0
  409388:	60ca      	str	r2, [r1, #12]
  40938a:	6091      	str	r1, [r2, #8]
  40938c:	e7a4      	b.n	4092d8 <_realloc_r+0x140>
  40938e:	6841      	ldr	r1, [r0, #4]
  409390:	f021 0103 	bic.w	r1, r1, #3
  409394:	4421      	add	r1, r4
  409396:	f105 0010 	add.w	r0, r5, #16
  40939a:	4281      	cmp	r1, r0
  40939c:	da5b      	bge.n	409456 <_realloc_r+0x2be>
  40939e:	07db      	lsls	r3, r3, #31
  4093a0:	d4c0      	bmi.n	409324 <_realloc_r+0x18c>
  4093a2:	f856 3c08 	ldr.w	r3, [r6, #-8]
  4093a6:	ebc3 0a08 	rsb	sl, r3, r8
  4093aa:	f8da 3004 	ldr.w	r3, [sl, #4]
  4093ae:	f023 0303 	bic.w	r3, r3, #3
  4093b2:	eb01 0c03 	add.w	ip, r1, r3
  4093b6:	4560      	cmp	r0, ip
  4093b8:	f73f af66 	bgt.w	409288 <_realloc_r+0xf0>
  4093bc:	4657      	mov	r7, sl
  4093be:	f8da 300c 	ldr.w	r3, [sl, #12]
  4093c2:	f857 1f08 	ldr.w	r1, [r7, #8]!
  4093c6:	1f22      	subs	r2, r4, #4
  4093c8:	2a24      	cmp	r2, #36	; 0x24
  4093ca:	60cb      	str	r3, [r1, #12]
  4093cc:	6099      	str	r1, [r3, #8]
  4093ce:	f200 80b8 	bhi.w	409542 <_realloc_r+0x3aa>
  4093d2:	2a13      	cmp	r2, #19
  4093d4:	f240 80a9 	bls.w	40952a <_realloc_r+0x392>
  4093d8:	6833      	ldr	r3, [r6, #0]
  4093da:	f8ca 3008 	str.w	r3, [sl, #8]
  4093de:	6873      	ldr	r3, [r6, #4]
  4093e0:	f8ca 300c 	str.w	r3, [sl, #12]
  4093e4:	2a1b      	cmp	r2, #27
  4093e6:	f200 80b5 	bhi.w	409554 <_realloc_r+0x3bc>
  4093ea:	3608      	adds	r6, #8
  4093ec:	f10a 0310 	add.w	r3, sl, #16
  4093f0:	6832      	ldr	r2, [r6, #0]
  4093f2:	601a      	str	r2, [r3, #0]
  4093f4:	6872      	ldr	r2, [r6, #4]
  4093f6:	605a      	str	r2, [r3, #4]
  4093f8:	68b2      	ldr	r2, [r6, #8]
  4093fa:	609a      	str	r2, [r3, #8]
  4093fc:	eb0a 0205 	add.w	r2, sl, r5
  409400:	ebc5 030c 	rsb	r3, r5, ip
  409404:	f043 0301 	orr.w	r3, r3, #1
  409408:	f8cb 2008 	str.w	r2, [fp, #8]
  40940c:	6053      	str	r3, [r2, #4]
  40940e:	f8da 3004 	ldr.w	r3, [sl, #4]
  409412:	f003 0301 	and.w	r3, r3, #1
  409416:	431d      	orrs	r5, r3
  409418:	4648      	mov	r0, r9
  40941a:	f8ca 5004 	str.w	r5, [sl, #4]
  40941e:	f7ff feb1 	bl	409184 <__malloc_unlock>
  409422:	4638      	mov	r0, r7
  409424:	e769      	b.n	4092fa <_realloc_r+0x162>
  409426:	6833      	ldr	r3, [r6, #0]
  409428:	6003      	str	r3, [r0, #0]
  40942a:	6873      	ldr	r3, [r6, #4]
  40942c:	6043      	str	r3, [r0, #4]
  40942e:	2a1b      	cmp	r2, #27
  409430:	d829      	bhi.n	409486 <_realloc_r+0x2ee>
  409432:	f100 0308 	add.w	r3, r0, #8
  409436:	f106 0208 	add.w	r2, r6, #8
  40943a:	e78b      	b.n	409354 <_realloc_r+0x1bc>
  40943c:	463b      	mov	r3, r7
  40943e:	6832      	ldr	r2, [r6, #0]
  409440:	601a      	str	r2, [r3, #0]
  409442:	6872      	ldr	r2, [r6, #4]
  409444:	605a      	str	r2, [r3, #4]
  409446:	68b2      	ldr	r2, [r6, #8]
  409448:	609a      	str	r2, [r3, #8]
  40944a:	463e      	mov	r6, r7
  40944c:	4674      	mov	r4, lr
  40944e:	f8da 3004 	ldr.w	r3, [sl, #4]
  409452:	46d0      	mov	r8, sl
  409454:	e740      	b.n	4092d8 <_realloc_r+0x140>
  409456:	eb08 0205 	add.w	r2, r8, r5
  40945a:	1b4b      	subs	r3, r1, r5
  40945c:	f043 0301 	orr.w	r3, r3, #1
  409460:	f8cb 2008 	str.w	r2, [fp, #8]
  409464:	6053      	str	r3, [r2, #4]
  409466:	f856 3c04 	ldr.w	r3, [r6, #-4]
  40946a:	f003 0301 	and.w	r3, r3, #1
  40946e:	431d      	orrs	r5, r3
  409470:	4648      	mov	r0, r9
  409472:	f846 5c04 	str.w	r5, [r6, #-4]
  409476:	f7ff fe85 	bl	409184 <__malloc_unlock>
  40947a:	4630      	mov	r0, r6
  40947c:	e73d      	b.n	4092fa <_realloc_r+0x162>
  40947e:	4631      	mov	r1, r6
  409480:	f7ff fdcc 	bl	40901c <memmove>
  409484:	e76c      	b.n	409360 <_realloc_r+0x1c8>
  409486:	68b3      	ldr	r3, [r6, #8]
  409488:	6083      	str	r3, [r0, #8]
  40948a:	68f3      	ldr	r3, [r6, #12]
  40948c:	60c3      	str	r3, [r0, #12]
  40948e:	2a24      	cmp	r2, #36	; 0x24
  409490:	d02c      	beq.n	4094ec <_realloc_r+0x354>
  409492:	f100 0310 	add.w	r3, r0, #16
  409496:	f106 0210 	add.w	r2, r6, #16
  40949a:	e75b      	b.n	409354 <_realloc_r+0x1bc>
  40949c:	f850 2c04 	ldr.w	r2, [r0, #-4]
  4094a0:	f022 0203 	bic.w	r2, r2, #3
  4094a4:	4414      	add	r4, r2
  4094a6:	e717      	b.n	4092d8 <_realloc_r+0x140>
  4094a8:	4631      	mov	r1, r6
  4094aa:	4638      	mov	r0, r7
  4094ac:	4674      	mov	r4, lr
  4094ae:	463e      	mov	r6, r7
  4094b0:	f7ff fdb4 	bl	40901c <memmove>
  4094b4:	46d0      	mov	r8, sl
  4094b6:	f8da 3004 	ldr.w	r3, [sl, #4]
  4094ba:	e70d      	b.n	4092d8 <_realloc_r+0x140>
  4094bc:	463a      	mov	r2, r7
  4094be:	e700      	b.n	4092c2 <_realloc_r+0x12a>
  4094c0:	4631      	mov	r1, r6
  4094c2:	4638      	mov	r0, r7
  4094c4:	461c      	mov	r4, r3
  4094c6:	463e      	mov	r6, r7
  4094c8:	f7ff fda8 	bl	40901c <memmove>
  4094cc:	46d0      	mov	r8, sl
  4094ce:	f8da 3004 	ldr.w	r3, [sl, #4]
  4094d2:	e701      	b.n	4092d8 <_realloc_r+0x140>
  4094d4:	68b3      	ldr	r3, [r6, #8]
  4094d6:	f8ca 3010 	str.w	r3, [sl, #16]
  4094da:	68f3      	ldr	r3, [r6, #12]
  4094dc:	f8ca 3014 	str.w	r3, [sl, #20]
  4094e0:	2a24      	cmp	r2, #36	; 0x24
  4094e2:	d018      	beq.n	409516 <_realloc_r+0x37e>
  4094e4:	3610      	adds	r6, #16
  4094e6:	f10a 0318 	add.w	r3, sl, #24
  4094ea:	e7a8      	b.n	40943e <_realloc_r+0x2a6>
  4094ec:	6933      	ldr	r3, [r6, #16]
  4094ee:	6103      	str	r3, [r0, #16]
  4094f0:	6973      	ldr	r3, [r6, #20]
  4094f2:	6143      	str	r3, [r0, #20]
  4094f4:	f106 0218 	add.w	r2, r6, #24
  4094f8:	f100 0318 	add.w	r3, r0, #24
  4094fc:	e72a      	b.n	409354 <_realloc_r+0x1bc>
  4094fe:	68b1      	ldr	r1, [r6, #8]
  409500:	f8ca 1010 	str.w	r1, [sl, #16]
  409504:	68f1      	ldr	r1, [r6, #12]
  409506:	f8ca 1014 	str.w	r1, [sl, #20]
  40950a:	2a24      	cmp	r2, #36	; 0x24
  40950c:	d00f      	beq.n	40952e <_realloc_r+0x396>
  40950e:	3610      	adds	r6, #16
  409510:	f10a 0218 	add.w	r2, sl, #24
  409514:	e6d5      	b.n	4092c2 <_realloc_r+0x12a>
  409516:	6933      	ldr	r3, [r6, #16]
  409518:	f8ca 3018 	str.w	r3, [sl, #24]
  40951c:	6973      	ldr	r3, [r6, #20]
  40951e:	f8ca 301c 	str.w	r3, [sl, #28]
  409522:	3618      	adds	r6, #24
  409524:	f10a 0320 	add.w	r3, sl, #32
  409528:	e789      	b.n	40943e <_realloc_r+0x2a6>
  40952a:	463b      	mov	r3, r7
  40952c:	e760      	b.n	4093f0 <_realloc_r+0x258>
  40952e:	6932      	ldr	r2, [r6, #16]
  409530:	f8ca 2018 	str.w	r2, [sl, #24]
  409534:	6972      	ldr	r2, [r6, #20]
  409536:	f8ca 201c 	str.w	r2, [sl, #28]
  40953a:	3618      	adds	r6, #24
  40953c:	f10a 0220 	add.w	r2, sl, #32
  409540:	e6bf      	b.n	4092c2 <_realloc_r+0x12a>
  409542:	4631      	mov	r1, r6
  409544:	4638      	mov	r0, r7
  409546:	f8cd c004 	str.w	ip, [sp, #4]
  40954a:	f7ff fd67 	bl	40901c <memmove>
  40954e:	f8dd c004 	ldr.w	ip, [sp, #4]
  409552:	e753      	b.n	4093fc <_realloc_r+0x264>
  409554:	68b3      	ldr	r3, [r6, #8]
  409556:	f8ca 3010 	str.w	r3, [sl, #16]
  40955a:	68f3      	ldr	r3, [r6, #12]
  40955c:	f8ca 3014 	str.w	r3, [sl, #20]
  409560:	2a24      	cmp	r2, #36	; 0x24
  409562:	d003      	beq.n	40956c <_realloc_r+0x3d4>
  409564:	3610      	adds	r6, #16
  409566:	f10a 0318 	add.w	r3, sl, #24
  40956a:	e741      	b.n	4093f0 <_realloc_r+0x258>
  40956c:	6933      	ldr	r3, [r6, #16]
  40956e:	f8ca 3018 	str.w	r3, [sl, #24]
  409572:	6973      	ldr	r3, [r6, #20]
  409574:	f8ca 301c 	str.w	r3, [sl, #28]
  409578:	3618      	adds	r6, #24
  40957a:	f10a 0320 	add.w	r3, sl, #32
  40957e:	e737      	b.n	4093f0 <_realloc_r+0x258>
  409580:	200008b4 	.word	0x200008b4

00409584 <_sbrk_r>:
  409584:	b538      	push	{r3, r4, r5, lr}
  409586:	4c07      	ldr	r4, [pc, #28]	; (4095a4 <_sbrk_r+0x20>)
  409588:	2300      	movs	r3, #0
  40958a:	4605      	mov	r5, r0
  40958c:	4608      	mov	r0, r1
  40958e:	6023      	str	r3, [r4, #0]
  409590:	f7f8 fc20 	bl	401dd4 <_sbrk>
  409594:	1c43      	adds	r3, r0, #1
  409596:	d000      	beq.n	40959a <_sbrk_r+0x16>
  409598:	bd38      	pop	{r3, r4, r5, pc}
  40959a:	6823      	ldr	r3, [r4, #0]
  40959c:	2b00      	cmp	r3, #0
  40959e:	d0fb      	beq.n	409598 <_sbrk_r+0x14>
  4095a0:	602b      	str	r3, [r5, #0]
  4095a2:	bd38      	pop	{r3, r4, r5, pc}
  4095a4:	200012c4 	.word	0x200012c4

004095a8 <_raise_r>:
  4095a8:	291f      	cmp	r1, #31
  4095aa:	b538      	push	{r3, r4, r5, lr}
  4095ac:	d822      	bhi.n	4095f4 <_raise_r+0x4c>
  4095ae:	f8d0 22dc 	ldr.w	r2, [r0, #732]	; 0x2dc
  4095b2:	4605      	mov	r5, r0
  4095b4:	460c      	mov	r4, r1
  4095b6:	b19a      	cbz	r2, 4095e0 <_raise_r+0x38>
  4095b8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
  4095bc:	b183      	cbz	r3, 4095e0 <_raise_r+0x38>
  4095be:	2b01      	cmp	r3, #1
  4095c0:	d00c      	beq.n	4095dc <_raise_r+0x34>
  4095c2:	1c59      	adds	r1, r3, #1
  4095c4:	d006      	beq.n	4095d4 <_raise_r+0x2c>
  4095c6:	2500      	movs	r5, #0
  4095c8:	4620      	mov	r0, r4
  4095ca:	f842 5024 	str.w	r5, [r2, r4, lsl #2]
  4095ce:	4798      	blx	r3
  4095d0:	4628      	mov	r0, r5
  4095d2:	bd38      	pop	{r3, r4, r5, pc}
  4095d4:	2316      	movs	r3, #22
  4095d6:	6003      	str	r3, [r0, #0]
  4095d8:	2001      	movs	r0, #1
  4095da:	bd38      	pop	{r3, r4, r5, pc}
  4095dc:	2000      	movs	r0, #0
  4095de:	bd38      	pop	{r3, r4, r5, pc}
  4095e0:	4628      	mov	r0, r5
  4095e2:	f000 f829 	bl	409638 <_getpid_r>
  4095e6:	4622      	mov	r2, r4
  4095e8:	4601      	mov	r1, r0
  4095ea:	4628      	mov	r0, r5
  4095ec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  4095f0:	f000 b80e 	b.w	409610 <_kill_r>
  4095f4:	2316      	movs	r3, #22
  4095f6:	6003      	str	r3, [r0, #0]
  4095f8:	f04f 30ff 	mov.w	r0, #4294967295
  4095fc:	bd38      	pop	{r3, r4, r5, pc}
  4095fe:	bf00      	nop

00409600 <raise>:
  409600:	4b02      	ldr	r3, [pc, #8]	; (40960c <raise+0xc>)
  409602:	4601      	mov	r1, r0
  409604:	6818      	ldr	r0, [r3, #0]
  409606:	f7ff bfcf 	b.w	4095a8 <_raise_r>
  40960a:	bf00      	nop
  40960c:	200008b0 	.word	0x200008b0

00409610 <_kill_r>:
  409610:	b538      	push	{r3, r4, r5, lr}
  409612:	4c08      	ldr	r4, [pc, #32]	; (409634 <_kill_r+0x24>)
  409614:	2300      	movs	r3, #0
  409616:	4605      	mov	r5, r0
  409618:	4608      	mov	r0, r1
  40961a:	4611      	mov	r1, r2
  40961c:	6023      	str	r3, [r4, #0]
  40961e:	f7f8 fc07 	bl	401e30 <_kill>
  409622:	1c43      	adds	r3, r0, #1
  409624:	d000      	beq.n	409628 <_kill_r+0x18>
  409626:	bd38      	pop	{r3, r4, r5, pc}
  409628:	6823      	ldr	r3, [r4, #0]
  40962a:	2b00      	cmp	r3, #0
  40962c:	d0fb      	beq.n	409626 <_kill_r+0x16>
  40962e:	602b      	str	r3, [r5, #0]
  409630:	bd38      	pop	{r3, r4, r5, pc}
  409632:	bf00      	nop
  409634:	200012c4 	.word	0x200012c4

00409638 <_getpid_r>:
  409638:	f7f8 bbfc 	b.w	401e34 <_getpid>

0040963c <snprintf>:
  40963c:	b40c      	push	{r2, r3}
  40963e:	b5f0      	push	{r4, r5, r6, r7, lr}
  409640:	4b24      	ldr	r3, [pc, #144]	; (4096d4 <snprintf+0x98>)
  409642:	2900      	cmp	r1, #0
  409644:	b09d      	sub	sp, #116	; 0x74
  409646:	681d      	ldr	r5, [r3, #0]
  409648:	db3e      	blt.n	4096c8 <snprintf+0x8c>
  40964a:	f44f 7302 	mov.w	r3, #520	; 0x208
  40964e:	460c      	mov	r4, r1
  409650:	9002      	str	r0, [sp, #8]
  409652:	9006      	str	r0, [sp, #24]
  409654:	f8ad 3014 	strh.w	r3, [sp, #20]
  409658:	ae23      	add	r6, sp, #140	; 0x8c
  40965a:	d017      	beq.n	40968c <snprintf+0x50>
  40965c:	1e4c      	subs	r4, r1, #1
  40965e:	9a22      	ldr	r2, [sp, #136]	; 0x88
  409660:	9404      	str	r4, [sp, #16]
  409662:	4633      	mov	r3, r6
  409664:	f64f 77ff 	movw	r7, #65535	; 0xffff
  409668:	4628      	mov	r0, r5
  40966a:	a902      	add	r1, sp, #8
  40966c:	9407      	str	r4, [sp, #28]
  40966e:	9601      	str	r6, [sp, #4]
  409670:	f8ad 7016 	strh.w	r7, [sp, #22]
  409674:	f000 f924 	bl	4098c0 <_svfprintf_r>
  409678:	1c42      	adds	r2, r0, #1
  40967a:	db22      	blt.n	4096c2 <snprintf+0x86>
  40967c:	9b02      	ldr	r3, [sp, #8]
  40967e:	2200      	movs	r2, #0
  409680:	701a      	strb	r2, [r3, #0]
  409682:	b01d      	add	sp, #116	; 0x74
  409684:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
  409688:	b002      	add	sp, #8
  40968a:	4770      	bx	lr
  40968c:	4633      	mov	r3, r6
  40968e:	f64f 77ff 	movw	r7, #65535	; 0xffff
  409692:	4628      	mov	r0, r5
  409694:	a902      	add	r1, sp, #8
  409696:	9a22      	ldr	r2, [sp, #136]	; 0x88
  409698:	9404      	str	r4, [sp, #16]
  40969a:	9407      	str	r4, [sp, #28]
  40969c:	9601      	str	r6, [sp, #4]
  40969e:	f8ad 7016 	strh.w	r7, [sp, #22]
  4096a2:	f000 f90d 	bl	4098c0 <_svfprintf_r>
  4096a6:	1c43      	adds	r3, r0, #1
  4096a8:	db04      	blt.n	4096b4 <snprintf+0x78>
  4096aa:	b01d      	add	sp, #116	; 0x74
  4096ac:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
  4096b0:	b002      	add	sp, #8
  4096b2:	4770      	bx	lr
  4096b4:	238b      	movs	r3, #139	; 0x8b
  4096b6:	602b      	str	r3, [r5, #0]
  4096b8:	b01d      	add	sp, #116	; 0x74
  4096ba:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
  4096be:	b002      	add	sp, #8
  4096c0:	4770      	bx	lr
  4096c2:	238b      	movs	r3, #139	; 0x8b
  4096c4:	602b      	str	r3, [r5, #0]
  4096c6:	e7d9      	b.n	40967c <snprintf+0x40>
  4096c8:	238b      	movs	r3, #139	; 0x8b
  4096ca:	602b      	str	r3, [r5, #0]
  4096cc:	f04f 30ff 	mov.w	r0, #4294967295
  4096d0:	e7eb      	b.n	4096aa <snprintf+0x6e>
  4096d2:	bf00      	nop
  4096d4:	200008b0 	.word	0x200008b0

004096d8 <sprintf>:
  4096d8:	b40e      	push	{r1, r2, r3}
  4096da:	b5f0      	push	{r4, r5, r6, r7, lr}
  4096dc:	b09c      	sub	sp, #112	; 0x70
  4096de:	ab21      	add	r3, sp, #132	; 0x84
  4096e0:	490f      	ldr	r1, [pc, #60]	; (409720 <sprintf+0x48>)
  4096e2:	f853 2b04 	ldr.w	r2, [r3], #4
  4096e6:	9301      	str	r3, [sp, #4]
  4096e8:	4605      	mov	r5, r0
  4096ea:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
  4096ee:	6808      	ldr	r0, [r1, #0]
  4096f0:	9502      	str	r5, [sp, #8]
  4096f2:	f44f 7702 	mov.w	r7, #520	; 0x208
  4096f6:	f64f 76ff 	movw	r6, #65535	; 0xffff
  4096fa:	a902      	add	r1, sp, #8
  4096fc:	9506      	str	r5, [sp, #24]
  4096fe:	f8ad 7014 	strh.w	r7, [sp, #20]
  409702:	9404      	str	r4, [sp, #16]
  409704:	9407      	str	r4, [sp, #28]
  409706:	f8ad 6016 	strh.w	r6, [sp, #22]
  40970a:	f000 f8d9 	bl	4098c0 <_svfprintf_r>
  40970e:	9b02      	ldr	r3, [sp, #8]
  409710:	2200      	movs	r2, #0
  409712:	701a      	strb	r2, [r3, #0]
  409714:	b01c      	add	sp, #112	; 0x70
  409716:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
  40971a:	b003      	add	sp, #12
  40971c:	4770      	bx	lr
  40971e:	bf00      	nop
  409720:	200008b0 	.word	0x200008b0

00409724 <__sread>:
  409724:	b510      	push	{r4, lr}
  409726:	460c      	mov	r4, r1
  409728:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  40972c:	f005 f842 	bl	40e7b4 <_read_r>
  409730:	2800      	cmp	r0, #0
  409732:	db03      	blt.n	40973c <__sread+0x18>
  409734:	6d23      	ldr	r3, [r4, #80]	; 0x50
  409736:	4403      	add	r3, r0
  409738:	6523      	str	r3, [r4, #80]	; 0x50
  40973a:	bd10      	pop	{r4, pc}
  40973c:	89a3      	ldrh	r3, [r4, #12]
  40973e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
  409742:	81a3      	strh	r3, [r4, #12]
  409744:	bd10      	pop	{r4, pc}
  409746:	bf00      	nop

00409748 <__swrite>:
  409748:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40974c:	4616      	mov	r6, r2
  40974e:	898a      	ldrh	r2, [r1, #12]
  409750:	461d      	mov	r5, r3
  409752:	05d3      	lsls	r3, r2, #23
  409754:	460c      	mov	r4, r1
  409756:	4607      	mov	r7, r0
  409758:	d506      	bpl.n	409768 <__swrite+0x20>
  40975a:	2200      	movs	r2, #0
  40975c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  409760:	2302      	movs	r3, #2
  409762:	f004 fd1f 	bl	40e1a4 <_lseek_r>
  409766:	89a2      	ldrh	r2, [r4, #12]
  409768:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  40976c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
  409770:	81a2      	strh	r2, [r4, #12]
  409772:	4638      	mov	r0, r7
  409774:	4632      	mov	r2, r6
  409776:	462b      	mov	r3, r5
  409778:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  40977c:	f003 bbfa 	b.w	40cf74 <_write_r>

00409780 <__sseek>:
  409780:	b510      	push	{r4, lr}
  409782:	460c      	mov	r4, r1
  409784:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  409788:	f004 fd0c 	bl	40e1a4 <_lseek_r>
  40978c:	89a3      	ldrh	r3, [r4, #12]
  40978e:	1c42      	adds	r2, r0, #1
  409790:	bf0e      	itee	eq
  409792:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
  409796:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
  40979a:	6520      	strne	r0, [r4, #80]	; 0x50
  40979c:	81a3      	strh	r3, [r4, #12]
  40979e:	bd10      	pop	{r4, pc}

004097a0 <__sclose>:
  4097a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  4097a4:	f003 bc6c 	b.w	40d080 <_close_r>

004097a8 <strcpy>:
  4097a8:	ea80 0201 	eor.w	r2, r0, r1
  4097ac:	4684      	mov	ip, r0
  4097ae:	f012 0f03 	tst.w	r2, #3
  4097b2:	d14f      	bne.n	409854 <strcpy+0xac>
  4097b4:	f011 0f03 	tst.w	r1, #3
  4097b8:	d132      	bne.n	409820 <strcpy+0x78>
  4097ba:	f84d 4d04 	str.w	r4, [sp, #-4]!
  4097be:	f011 0f04 	tst.w	r1, #4
  4097c2:	f851 3b04 	ldr.w	r3, [r1], #4
  4097c6:	d00b      	beq.n	4097e0 <strcpy+0x38>
  4097c8:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
  4097cc:	439a      	bics	r2, r3
  4097ce:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
  4097d2:	bf04      	itt	eq
  4097d4:	f84c 3b04 	streq.w	r3, [ip], #4
  4097d8:	f851 3b04 	ldreq.w	r3, [r1], #4
  4097dc:	d116      	bne.n	40980c <strcpy+0x64>
  4097de:	bf00      	nop
  4097e0:	f851 4b04 	ldr.w	r4, [r1], #4
  4097e4:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
  4097e8:	439a      	bics	r2, r3
  4097ea:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
  4097ee:	f1a4 3201 	sub.w	r2, r4, #16843009	; 0x1010101
  4097f2:	d10b      	bne.n	40980c <strcpy+0x64>
  4097f4:	f84c 3b04 	str.w	r3, [ip], #4
  4097f8:	43a2      	bics	r2, r4
  4097fa:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
  4097fe:	bf04      	itt	eq
  409800:	f851 3b04 	ldreq.w	r3, [r1], #4
  409804:	f84c 4b04 	streq.w	r4, [ip], #4
  409808:	d0ea      	beq.n	4097e0 <strcpy+0x38>
  40980a:	4623      	mov	r3, r4
  40980c:	f80c 3b01 	strb.w	r3, [ip], #1
  409810:	f013 0fff 	tst.w	r3, #255	; 0xff
  409814:	ea4f 2333 	mov.w	r3, r3, ror #8
  409818:	d1f8      	bne.n	40980c <strcpy+0x64>
  40981a:	f85d 4b04 	ldr.w	r4, [sp], #4
  40981e:	4770      	bx	lr
  409820:	f011 0f01 	tst.w	r1, #1
  409824:	d006      	beq.n	409834 <strcpy+0x8c>
  409826:	f811 2b01 	ldrb.w	r2, [r1], #1
  40982a:	f80c 2b01 	strb.w	r2, [ip], #1
  40982e:	2a00      	cmp	r2, #0
  409830:	bf08      	it	eq
  409832:	4770      	bxeq	lr
  409834:	f011 0f02 	tst.w	r1, #2
  409838:	d0bf      	beq.n	4097ba <strcpy+0x12>
  40983a:	f831 2b02 	ldrh.w	r2, [r1], #2
  40983e:	f012 0fff 	tst.w	r2, #255	; 0xff
  409842:	bf16      	itet	ne
  409844:	f82c 2b02 	strhne.w	r2, [ip], #2
  409848:	f88c 2000 	strbeq.w	r2, [ip]
  40984c:	f412 4f7f 	tstne.w	r2, #65280	; 0xff00
  409850:	d1b3      	bne.n	4097ba <strcpy+0x12>
  409852:	4770      	bx	lr
  409854:	f811 2b01 	ldrb.w	r2, [r1], #1
  409858:	f80c 2b01 	strb.w	r2, [ip], #1
  40985c:	2a00      	cmp	r2, #0
  40985e:	d1f9      	bne.n	409854 <strcpy+0xac>
  409860:	4770      	bx	lr
  409862:	bf00      	nop

00409864 <strlen>:
  409864:	f020 0103 	bic.w	r1, r0, #3
  409868:	f010 0003 	ands.w	r0, r0, #3
  40986c:	f1c0 0000 	rsb	r0, r0, #0
  409870:	f851 3b04 	ldr.w	r3, [r1], #4
  409874:	f100 0c04 	add.w	ip, r0, #4
  409878:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
  40987c:	f06f 0200 	mvn.w	r2, #0
  409880:	bf1c      	itt	ne
  409882:	fa22 f20c 	lsrne.w	r2, r2, ip
  409886:	4313      	orrne	r3, r2
  409888:	f04f 0c01 	mov.w	ip, #1
  40988c:	ea4c 2c0c 	orr.w	ip, ip, ip, lsl #8
  409890:	ea4c 4c0c 	orr.w	ip, ip, ip, lsl #16
  409894:	eba3 020c 	sub.w	r2, r3, ip
  409898:	ea22 0203 	bic.w	r2, r2, r3
  40989c:	ea12 12cc 	ands.w	r2, r2, ip, lsl #7
  4098a0:	bf04      	itt	eq
  4098a2:	f851 3b04 	ldreq.w	r3, [r1], #4
  4098a6:	3004      	addeq	r0, #4
  4098a8:	d0f4      	beq.n	409894 <strlen+0x30>
  4098aa:	f1c2 0100 	rsb	r1, r2, #0
  4098ae:	ea02 0201 	and.w	r2, r2, r1
  4098b2:	fab2 f282 	clz	r2, r2
  4098b6:	f1c2 021f 	rsb	r2, r2, #31
  4098ba:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
  4098be:	4770      	bx	lr

004098c0 <_svfprintf_r>:
  4098c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4098c4:	b0c1      	sub	sp, #260	; 0x104
  4098c6:	4689      	mov	r9, r1
  4098c8:	920a      	str	r2, [sp, #40]	; 0x28
  4098ca:	930e      	str	r3, [sp, #56]	; 0x38
  4098cc:	9008      	str	r0, [sp, #32]
  4098ce:	f004 fc65 	bl	40e19c <_localeconv_r>
  4098d2:	6803      	ldr	r3, [r0, #0]
  4098d4:	9317      	str	r3, [sp, #92]	; 0x5c
  4098d6:	4618      	mov	r0, r3
  4098d8:	f7ff ffc4 	bl	409864 <strlen>
  4098dc:	f8b9 300c 	ldrh.w	r3, [r9, #12]
  4098e0:	9018      	str	r0, [sp, #96]	; 0x60
  4098e2:	061a      	lsls	r2, r3, #24
  4098e4:	d504      	bpl.n	4098f0 <_svfprintf_r+0x30>
  4098e6:	f8d9 3010 	ldr.w	r3, [r9, #16]
  4098ea:	2b00      	cmp	r3, #0
  4098ec:	f001 808c 	beq.w	40aa08 <_svfprintf_r+0x1148>
  4098f0:	2300      	movs	r3, #0
  4098f2:	af30      	add	r7, sp, #192	; 0xc0
  4098f4:	9313      	str	r3, [sp, #76]	; 0x4c
  4098f6:	9325      	str	r3, [sp, #148]	; 0x94
  4098f8:	9324      	str	r3, [sp, #144]	; 0x90
  4098fa:	9316      	str	r3, [sp, #88]	; 0x58
  4098fc:	9319      	str	r3, [sp, #100]	; 0x64
  4098fe:	930b      	str	r3, [sp, #44]	; 0x2c
  409900:	9723      	str	r7, [sp, #140]	; 0x8c
  409902:	9314      	str	r3, [sp, #80]	; 0x50
  409904:	9315      	str	r3, [sp, #84]	; 0x54
  409906:	463c      	mov	r4, r7
  409908:	464e      	mov	r6, r9
  40990a:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  40990c:	782b      	ldrb	r3, [r5, #0]
  40990e:	2b00      	cmp	r3, #0
  409910:	f000 80a9 	beq.w	409a66 <_svfprintf_r+0x1a6>
  409914:	2b25      	cmp	r3, #37	; 0x25
  409916:	d102      	bne.n	40991e <_svfprintf_r+0x5e>
  409918:	e0a5      	b.n	409a66 <_svfprintf_r+0x1a6>
  40991a:	2b25      	cmp	r3, #37	; 0x25
  40991c:	d003      	beq.n	409926 <_svfprintf_r+0x66>
  40991e:	f815 3f01 	ldrb.w	r3, [r5, #1]!
  409922:	2b00      	cmp	r3, #0
  409924:	d1f9      	bne.n	40991a <_svfprintf_r+0x5a>
  409926:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  409928:	1aeb      	subs	r3, r5, r3
  40992a:	b173      	cbz	r3, 40994a <_svfprintf_r+0x8a>
  40992c:	9a24      	ldr	r2, [sp, #144]	; 0x90
  40992e:	9925      	ldr	r1, [sp, #148]	; 0x94
  409930:	980a      	ldr	r0, [sp, #40]	; 0x28
  409932:	6020      	str	r0, [r4, #0]
  409934:	3201      	adds	r2, #1
  409936:	4419      	add	r1, r3
  409938:	2a07      	cmp	r2, #7
  40993a:	6063      	str	r3, [r4, #4]
  40993c:	9125      	str	r1, [sp, #148]	; 0x94
  40993e:	9224      	str	r2, [sp, #144]	; 0x90
  409940:	dc72      	bgt.n	409a28 <_svfprintf_r+0x168>
  409942:	3408      	adds	r4, #8
  409944:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  409946:	441a      	add	r2, r3
  409948:	920b      	str	r2, [sp, #44]	; 0x2c
  40994a:	782b      	ldrb	r3, [r5, #0]
  40994c:	2b00      	cmp	r3, #0
  40994e:	f000 87b5 	beq.w	40a8bc <_svfprintf_r+0xffc>
  409952:	2300      	movs	r3, #0
  409954:	1c69      	adds	r1, r5, #1
  409956:	786d      	ldrb	r5, [r5, #1]
  409958:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
  40995c:	461a      	mov	r2, r3
  40995e:	930c      	str	r3, [sp, #48]	; 0x30
  409960:	9307      	str	r3, [sp, #28]
  409962:	f04f 3aff 	mov.w	sl, #4294967295
  409966:	1c4b      	adds	r3, r1, #1
  409968:	f1a5 0120 	sub.w	r1, r5, #32
  40996c:	2958      	cmp	r1, #88	; 0x58
  40996e:	f200 83d9 	bhi.w	40a124 <_svfprintf_r+0x864>
  409972:	e8df f011 	tbh	[pc, r1, lsl #1]
  409976:	0270      	.short	0x0270
  409978:	03d703d7 	.word	0x03d703d7
  40997c:	03d70374 	.word	0x03d70374
  409980:	03d703d7 	.word	0x03d703d7
  409984:	03d703d7 	.word	0x03d703d7
  409988:	02f003d7 	.word	0x02f003d7
  40998c:	03d7020d 	.word	0x03d7020d
  409990:	021101f4 	.word	0x021101f4
  409994:	037b03d7 	.word	0x037b03d7
  409998:	02ba02ba 	.word	0x02ba02ba
  40999c:	02ba02ba 	.word	0x02ba02ba
  4099a0:	02ba02ba 	.word	0x02ba02ba
  4099a4:	02ba02ba 	.word	0x02ba02ba
  4099a8:	03d702ba 	.word	0x03d702ba
  4099ac:	03d703d7 	.word	0x03d703d7
  4099b0:	03d703d7 	.word	0x03d703d7
  4099b4:	03d703d7 	.word	0x03d703d7
  4099b8:	03d703d7 	.word	0x03d703d7
  4099bc:	02c903d7 	.word	0x02c903d7
  4099c0:	03d7038b 	.word	0x03d7038b
  4099c4:	03d7038b 	.word	0x03d7038b
  4099c8:	03d703d7 	.word	0x03d703d7
  4099cc:	036d03d7 	.word	0x036d03d7
  4099d0:	03d703d7 	.word	0x03d703d7
  4099d4:	03d70305 	.word	0x03d70305
  4099d8:	03d703d7 	.word	0x03d703d7
  4099dc:	03d703d7 	.word	0x03d703d7
  4099e0:	03d70323 	.word	0x03d70323
  4099e4:	033d03d7 	.word	0x033d03d7
  4099e8:	03d703d7 	.word	0x03d703d7
  4099ec:	03d703d7 	.word	0x03d703d7
  4099f0:	03d703d7 	.word	0x03d703d7
  4099f4:	03d703d7 	.word	0x03d703d7
  4099f8:	03d703d7 	.word	0x03d703d7
  4099fc:	022c0358 	.word	0x022c0358
  409a00:	038b038b 	.word	0x038b038b
  409a04:	02fe038b 	.word	0x02fe038b
  409a08:	03d7022c 	.word	0x03d7022c
  409a0c:	02e603d7 	.word	0x02e603d7
  409a10:	027e03d7 	.word	0x027e03d7
  409a14:	03c001fb 	.word	0x03c001fb
  409a18:	03d70277 	.word	0x03d70277
  409a1c:	03d70292 	.word	0x03d70292
  409a20:	03d7007a 	.word	0x03d7007a
  409a24:	024a03d7 	.word	0x024a03d7
  409a28:	9808      	ldr	r0, [sp, #32]
  409a2a:	9307      	str	r3, [sp, #28]
  409a2c:	4631      	mov	r1, r6
  409a2e:	aa23      	add	r2, sp, #140	; 0x8c
  409a30:	f004 ff00 	bl	40e834 <__ssprint_r>
  409a34:	b950      	cbnz	r0, 409a4c <_svfprintf_r+0x18c>
  409a36:	463c      	mov	r4, r7
  409a38:	9b07      	ldr	r3, [sp, #28]
  409a3a:	e783      	b.n	409944 <_svfprintf_r+0x84>
  409a3c:	9808      	ldr	r0, [sp, #32]
  409a3e:	4631      	mov	r1, r6
  409a40:	aa23      	add	r2, sp, #140	; 0x8c
  409a42:	f004 fef7 	bl	40e834 <__ssprint_r>
  409a46:	2800      	cmp	r0, #0
  409a48:	f000 8185 	beq.w	409d56 <_svfprintf_r+0x496>
  409a4c:	46b1      	mov	r9, r6
  409a4e:	f8b9 300c 	ldrh.w	r3, [r9, #12]
  409a52:	f013 0f40 	tst.w	r3, #64	; 0x40
  409a56:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  409a58:	bf18      	it	ne
  409a5a:	f04f 33ff 	movne.w	r3, #4294967295
  409a5e:	4618      	mov	r0, r3
  409a60:	b041      	add	sp, #260	; 0x104
  409a62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  409a66:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  409a68:	e76f      	b.n	40994a <_svfprintf_r+0x8a>
  409a6a:	930a      	str	r3, [sp, #40]	; 0x28
  409a6c:	9b07      	ldr	r3, [sp, #28]
  409a6e:	0698      	lsls	r0, r3, #26
  409a70:	f140 82ad 	bpl.w	409fce <_svfprintf_r+0x70e>
  409a74:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  409a76:	f103 0907 	add.w	r9, r3, #7
  409a7a:	f029 0307 	bic.w	r3, r9, #7
  409a7e:	f103 0208 	add.w	r2, r3, #8
  409a82:	e9d3 8900 	ldrd	r8, r9, [r3]
  409a86:	920e      	str	r2, [sp, #56]	; 0x38
  409a88:	2301      	movs	r3, #1
  409a8a:	f04f 0c00 	mov.w	ip, #0
  409a8e:	f88d c06f 	strb.w	ip, [sp, #111]	; 0x6f
  409a92:	f8cd a044 	str.w	sl, [sp, #68]	; 0x44
  409a96:	f1ba 0f00 	cmp.w	sl, #0
  409a9a:	db03      	blt.n	409aa4 <_svfprintf_r+0x1e4>
  409a9c:	9a07      	ldr	r2, [sp, #28]
  409a9e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
  409aa2:	9207      	str	r2, [sp, #28]
  409aa4:	ea58 0209 	orrs.w	r2, r8, r9
  409aa8:	f040 834c 	bne.w	40a144 <_svfprintf_r+0x884>
  409aac:	f1ba 0f00 	cmp.w	sl, #0
  409ab0:	f000 8451 	beq.w	40a356 <_svfprintf_r+0xa96>
  409ab4:	2b01      	cmp	r3, #1
  409ab6:	f000 834f 	beq.w	40a158 <_svfprintf_r+0x898>
  409aba:	2b02      	cmp	r3, #2
  409abc:	f000 8490 	beq.w	40a3e0 <_svfprintf_r+0xb20>
  409ac0:	4639      	mov	r1, r7
  409ac2:	ea4f 02d8 	mov.w	r2, r8, lsr #3
  409ac6:	ea42 7249 	orr.w	r2, r2, r9, lsl #29
  409aca:	ea4f 00d9 	mov.w	r0, r9, lsr #3
  409ace:	f008 0307 	and.w	r3, r8, #7
  409ad2:	4681      	mov	r9, r0
  409ad4:	4690      	mov	r8, r2
  409ad6:	3330      	adds	r3, #48	; 0x30
  409ad8:	ea58 0209 	orrs.w	r2, r8, r9
  409adc:	f801 3d01 	strb.w	r3, [r1, #-1]!
  409ae0:	d1ef      	bne.n	409ac2 <_svfprintf_r+0x202>
  409ae2:	9a07      	ldr	r2, [sp, #28]
  409ae4:	9110      	str	r1, [sp, #64]	; 0x40
  409ae6:	07d2      	lsls	r2, r2, #31
  409ae8:	f100 8544 	bmi.w	40a574 <_svfprintf_r+0xcb4>
  409aec:	1a7b      	subs	r3, r7, r1
  409aee:	930d      	str	r3, [sp, #52]	; 0x34
  409af0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  409af2:	4592      	cmp	sl, r2
  409af4:	4653      	mov	r3, sl
  409af6:	bfb8      	it	lt
  409af8:	4613      	movlt	r3, r2
  409afa:	9309      	str	r3, [sp, #36]	; 0x24
  409afc:	2300      	movs	r3, #0
  409afe:	9312      	str	r3, [sp, #72]	; 0x48
  409b00:	f1bc 0f00 	cmp.w	ip, #0
  409b04:	d002      	beq.n	409b0c <_svfprintf_r+0x24c>
  409b06:	9b09      	ldr	r3, [sp, #36]	; 0x24
  409b08:	3301      	adds	r3, #1
  409b0a:	9309      	str	r3, [sp, #36]	; 0x24
  409b0c:	9b07      	ldr	r3, [sp, #28]
  409b0e:	f013 0302 	ands.w	r3, r3, #2
  409b12:	930f      	str	r3, [sp, #60]	; 0x3c
  409b14:	d002      	beq.n	409b1c <_svfprintf_r+0x25c>
  409b16:	9b09      	ldr	r3, [sp, #36]	; 0x24
  409b18:	3302      	adds	r3, #2
  409b1a:	9309      	str	r3, [sp, #36]	; 0x24
  409b1c:	9b07      	ldr	r3, [sp, #28]
  409b1e:	f013 0984 	ands.w	r9, r3, #132	; 0x84
  409b22:	f040 830c 	bne.w	40a13e <_svfprintf_r+0x87e>
  409b26:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  409b28:	9a09      	ldr	r2, [sp, #36]	; 0x24
  409b2a:	ebc2 0803 	rsb	r8, r2, r3
  409b2e:	f1b8 0f00 	cmp.w	r8, #0
  409b32:	f340 8304 	ble.w	40a13e <_svfprintf_r+0x87e>
  409b36:	f1b8 0f10 	cmp.w	r8, #16
  409b3a:	9925      	ldr	r1, [sp, #148]	; 0x94
  409b3c:	9a24      	ldr	r2, [sp, #144]	; 0x90
  409b3e:	f8df a544 	ldr.w	sl, [pc, #1348]	; 40a084 <_svfprintf_r+0x7c4>
  409b42:	dd29      	ble.n	409b98 <_svfprintf_r+0x2d8>
  409b44:	4653      	mov	r3, sl
  409b46:	f04f 0b10 	mov.w	fp, #16
  409b4a:	46c2      	mov	sl, r8
  409b4c:	46a8      	mov	r8, r5
  409b4e:	461d      	mov	r5, r3
  409b50:	e006      	b.n	409b60 <_svfprintf_r+0x2a0>
  409b52:	f1aa 0a10 	sub.w	sl, sl, #16
  409b56:	f1ba 0f10 	cmp.w	sl, #16
  409b5a:	f104 0408 	add.w	r4, r4, #8
  409b5e:	dd17      	ble.n	409b90 <_svfprintf_r+0x2d0>
  409b60:	3201      	adds	r2, #1
  409b62:	3110      	adds	r1, #16
  409b64:	2a07      	cmp	r2, #7
  409b66:	9125      	str	r1, [sp, #148]	; 0x94
  409b68:	9224      	str	r2, [sp, #144]	; 0x90
  409b6a:	e884 0820 	stmia.w	r4, {r5, fp}
  409b6e:	ddf0      	ble.n	409b52 <_svfprintf_r+0x292>
  409b70:	9808      	ldr	r0, [sp, #32]
  409b72:	4631      	mov	r1, r6
  409b74:	aa23      	add	r2, sp, #140	; 0x8c
  409b76:	f004 fe5d 	bl	40e834 <__ssprint_r>
  409b7a:	2800      	cmp	r0, #0
  409b7c:	f47f af66 	bne.w	409a4c <_svfprintf_r+0x18c>
  409b80:	f1aa 0a10 	sub.w	sl, sl, #16
  409b84:	f1ba 0f10 	cmp.w	sl, #16
  409b88:	9925      	ldr	r1, [sp, #148]	; 0x94
  409b8a:	9a24      	ldr	r2, [sp, #144]	; 0x90
  409b8c:	463c      	mov	r4, r7
  409b8e:	dce7      	bgt.n	409b60 <_svfprintf_r+0x2a0>
  409b90:	462b      	mov	r3, r5
  409b92:	4645      	mov	r5, r8
  409b94:	46d0      	mov	r8, sl
  409b96:	469a      	mov	sl, r3
  409b98:	3201      	adds	r2, #1
  409b9a:	eb08 0b01 	add.w	fp, r8, r1
  409b9e:	2a07      	cmp	r2, #7
  409ba0:	f8cd b094 	str.w	fp, [sp, #148]	; 0x94
  409ba4:	9224      	str	r2, [sp, #144]	; 0x90
  409ba6:	f8c4 a000 	str.w	sl, [r4]
  409baa:	f8c4 8004 	str.w	r8, [r4, #4]
  409bae:	f300 847b 	bgt.w	40a4a8 <_svfprintf_r+0xbe8>
  409bb2:	f89d c06f 	ldrb.w	ip, [sp, #111]	; 0x6f
  409bb6:	3408      	adds	r4, #8
  409bb8:	f1bc 0f00 	cmp.w	ip, #0
  409bbc:	d00f      	beq.n	409bde <_svfprintf_r+0x31e>
  409bbe:	9b24      	ldr	r3, [sp, #144]	; 0x90
  409bc0:	3301      	adds	r3, #1
  409bc2:	f10b 0b01 	add.w	fp, fp, #1
  409bc6:	f10d 016f 	add.w	r1, sp, #111	; 0x6f
  409bca:	2201      	movs	r2, #1
  409bcc:	2b07      	cmp	r3, #7
  409bce:	f8cd b094 	str.w	fp, [sp, #148]	; 0x94
  409bd2:	9324      	str	r3, [sp, #144]	; 0x90
  409bd4:	e884 0006 	stmia.w	r4, {r1, r2}
  409bd8:	f300 83da 	bgt.w	40a390 <_svfprintf_r+0xad0>
  409bdc:	3408      	adds	r4, #8
  409bde:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  409be0:	b173      	cbz	r3, 409c00 <_svfprintf_r+0x340>
  409be2:	9b24      	ldr	r3, [sp, #144]	; 0x90
  409be4:	3301      	adds	r3, #1
  409be6:	f10b 0b02 	add.w	fp, fp, #2
  409bea:	a91c      	add	r1, sp, #112	; 0x70
  409bec:	2202      	movs	r2, #2
  409bee:	2b07      	cmp	r3, #7
  409bf0:	f8cd b094 	str.w	fp, [sp, #148]	; 0x94
  409bf4:	9324      	str	r3, [sp, #144]	; 0x90
  409bf6:	e884 0006 	stmia.w	r4, {r1, r2}
  409bfa:	f300 83d5 	bgt.w	40a3a8 <_svfprintf_r+0xae8>
  409bfe:	3408      	adds	r4, #8
  409c00:	f1b9 0f80 	cmp.w	r9, #128	; 0x80
  409c04:	f000 8311 	beq.w	40a22a <_svfprintf_r+0x96a>
  409c08:	9b11      	ldr	r3, [sp, #68]	; 0x44
  409c0a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  409c0c:	ebc2 0a03 	rsb	sl, r2, r3
  409c10:	f1ba 0f00 	cmp.w	sl, #0
  409c14:	dd3c      	ble.n	409c90 <_svfprintf_r+0x3d0>
  409c16:	f1ba 0f10 	cmp.w	sl, #16
  409c1a:	9a24      	ldr	r2, [sp, #144]	; 0x90
  409c1c:	f8df 9468 	ldr.w	r9, [pc, #1128]	; 40a088 <_svfprintf_r+0x7c8>
  409c20:	dd2b      	ble.n	409c7a <_svfprintf_r+0x3ba>
  409c22:	4649      	mov	r1, r9
  409c24:	465b      	mov	r3, fp
  409c26:	46a9      	mov	r9, r5
  409c28:	f04f 0810 	mov.w	r8, #16
  409c2c:	f8dd b020 	ldr.w	fp, [sp, #32]
  409c30:	460d      	mov	r5, r1
  409c32:	e006      	b.n	409c42 <_svfprintf_r+0x382>
  409c34:	f1aa 0a10 	sub.w	sl, sl, #16
  409c38:	f1ba 0f10 	cmp.w	sl, #16
  409c3c:	f104 0408 	add.w	r4, r4, #8
  409c40:	dd17      	ble.n	409c72 <_svfprintf_r+0x3b2>
  409c42:	3201      	adds	r2, #1
  409c44:	3310      	adds	r3, #16
  409c46:	2a07      	cmp	r2, #7
  409c48:	9325      	str	r3, [sp, #148]	; 0x94
  409c4a:	9224      	str	r2, [sp, #144]	; 0x90
  409c4c:	e884 0120 	stmia.w	r4, {r5, r8}
  409c50:	ddf0      	ble.n	409c34 <_svfprintf_r+0x374>
  409c52:	4658      	mov	r0, fp
  409c54:	4631      	mov	r1, r6
  409c56:	aa23      	add	r2, sp, #140	; 0x8c
  409c58:	f004 fdec 	bl	40e834 <__ssprint_r>
  409c5c:	2800      	cmp	r0, #0
  409c5e:	f47f aef5 	bne.w	409a4c <_svfprintf_r+0x18c>
  409c62:	f1aa 0a10 	sub.w	sl, sl, #16
  409c66:	f1ba 0f10 	cmp.w	sl, #16
  409c6a:	9b25      	ldr	r3, [sp, #148]	; 0x94
  409c6c:	9a24      	ldr	r2, [sp, #144]	; 0x90
  409c6e:	463c      	mov	r4, r7
  409c70:	dce7      	bgt.n	409c42 <_svfprintf_r+0x382>
  409c72:	469b      	mov	fp, r3
  409c74:	462b      	mov	r3, r5
  409c76:	464d      	mov	r5, r9
  409c78:	4699      	mov	r9, r3
  409c7a:	3201      	adds	r2, #1
  409c7c:	44d3      	add	fp, sl
  409c7e:	2a07      	cmp	r2, #7
  409c80:	f8cd b094 	str.w	fp, [sp, #148]	; 0x94
  409c84:	9224      	str	r2, [sp, #144]	; 0x90
  409c86:	e884 0600 	stmia.w	r4, {r9, sl}
  409c8a:	f300 8375 	bgt.w	40a378 <_svfprintf_r+0xab8>
  409c8e:	3408      	adds	r4, #8
  409c90:	9b07      	ldr	r3, [sp, #28]
  409c92:	05d9      	lsls	r1, r3, #23
  409c94:	f100 826c 	bmi.w	40a170 <_svfprintf_r+0x8b0>
  409c98:	9b24      	ldr	r3, [sp, #144]	; 0x90
  409c9a:	990d      	ldr	r1, [sp, #52]	; 0x34
  409c9c:	9a10      	ldr	r2, [sp, #64]	; 0x40
  409c9e:	6022      	str	r2, [r4, #0]
  409ca0:	3301      	adds	r3, #1
  409ca2:	448b      	add	fp, r1
  409ca4:	2b07      	cmp	r3, #7
  409ca6:	f8cd b094 	str.w	fp, [sp, #148]	; 0x94
  409caa:	6061      	str	r1, [r4, #4]
  409cac:	9324      	str	r3, [sp, #144]	; 0x90
  409cae:	f300 8346 	bgt.w	40a33e <_svfprintf_r+0xa7e>
  409cb2:	3408      	adds	r4, #8
  409cb4:	9b07      	ldr	r3, [sp, #28]
  409cb6:	075a      	lsls	r2, r3, #29
  409cb8:	d541      	bpl.n	409d3e <_svfprintf_r+0x47e>
  409cba:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  409cbc:	9a09      	ldr	r2, [sp, #36]	; 0x24
  409cbe:	1a9d      	subs	r5, r3, r2
  409cc0:	2d00      	cmp	r5, #0
  409cc2:	dd3c      	ble.n	409d3e <_svfprintf_r+0x47e>
  409cc4:	2d10      	cmp	r5, #16
  409cc6:	9b24      	ldr	r3, [sp, #144]	; 0x90
  409cc8:	f8df a3b8 	ldr.w	sl, [pc, #952]	; 40a084 <_svfprintf_r+0x7c4>
  409ccc:	dd23      	ble.n	409d16 <_svfprintf_r+0x456>
  409cce:	f04f 0810 	mov.w	r8, #16
  409cd2:	465a      	mov	r2, fp
  409cd4:	f8dd 9020 	ldr.w	r9, [sp, #32]
  409cd8:	e004      	b.n	409ce4 <_svfprintf_r+0x424>
  409cda:	3d10      	subs	r5, #16
  409cdc:	2d10      	cmp	r5, #16
  409cde:	f104 0408 	add.w	r4, r4, #8
  409ce2:	dd17      	ble.n	409d14 <_svfprintf_r+0x454>
  409ce4:	3301      	adds	r3, #1
  409ce6:	3210      	adds	r2, #16
  409ce8:	2b07      	cmp	r3, #7
  409cea:	9225      	str	r2, [sp, #148]	; 0x94
  409cec:	9324      	str	r3, [sp, #144]	; 0x90
  409cee:	f8c4 a000 	str.w	sl, [r4]
  409cf2:	f8c4 8004 	str.w	r8, [r4, #4]
  409cf6:	ddf0      	ble.n	409cda <_svfprintf_r+0x41a>
  409cf8:	4648      	mov	r0, r9
  409cfa:	4631      	mov	r1, r6
  409cfc:	aa23      	add	r2, sp, #140	; 0x8c
  409cfe:	f004 fd99 	bl	40e834 <__ssprint_r>
  409d02:	2800      	cmp	r0, #0
  409d04:	f47f aea2 	bne.w	409a4c <_svfprintf_r+0x18c>
  409d08:	3d10      	subs	r5, #16
  409d0a:	2d10      	cmp	r5, #16
  409d0c:	9a25      	ldr	r2, [sp, #148]	; 0x94
  409d0e:	9b24      	ldr	r3, [sp, #144]	; 0x90
  409d10:	463c      	mov	r4, r7
  409d12:	dce7      	bgt.n	409ce4 <_svfprintf_r+0x424>
  409d14:	4693      	mov	fp, r2
  409d16:	3301      	adds	r3, #1
  409d18:	44ab      	add	fp, r5
  409d1a:	2b07      	cmp	r3, #7
  409d1c:	f8cd b094 	str.w	fp, [sp, #148]	; 0x94
  409d20:	9324      	str	r3, [sp, #144]	; 0x90
  409d22:	f8c4 a000 	str.w	sl, [r4]
  409d26:	6065      	str	r5, [r4, #4]
  409d28:	dd09      	ble.n	409d3e <_svfprintf_r+0x47e>
  409d2a:	9808      	ldr	r0, [sp, #32]
  409d2c:	4631      	mov	r1, r6
  409d2e:	aa23      	add	r2, sp, #140	; 0x8c
  409d30:	f004 fd80 	bl	40e834 <__ssprint_r>
  409d34:	2800      	cmp	r0, #0
  409d36:	f47f ae89 	bne.w	409a4c <_svfprintf_r+0x18c>
  409d3a:	f8dd b094 	ldr.w	fp, [sp, #148]	; 0x94
  409d3e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  409d40:	9a09      	ldr	r2, [sp, #36]	; 0x24
  409d42:	990c      	ldr	r1, [sp, #48]	; 0x30
  409d44:	428a      	cmp	r2, r1
  409d46:	bfac      	ite	ge
  409d48:	189b      	addge	r3, r3, r2
  409d4a:	185b      	addlt	r3, r3, r1
  409d4c:	930b      	str	r3, [sp, #44]	; 0x2c
  409d4e:	f1bb 0f00 	cmp.w	fp, #0
  409d52:	f47f ae73 	bne.w	409a3c <_svfprintf_r+0x17c>
  409d56:	2300      	movs	r3, #0
  409d58:	9324      	str	r3, [sp, #144]	; 0x90
  409d5a:	463c      	mov	r4, r7
  409d5c:	e5d5      	b.n	40990a <_svfprintf_r+0x4a>
  409d5e:	4619      	mov	r1, r3
  409d60:	9807      	ldr	r0, [sp, #28]
  409d62:	781d      	ldrb	r5, [r3, #0]
  409d64:	f040 0004 	orr.w	r0, r0, #4
  409d68:	9007      	str	r0, [sp, #28]
  409d6a:	e5fc      	b.n	409966 <_svfprintf_r+0xa6>
  409d6c:	930a      	str	r3, [sp, #40]	; 0x28
  409d6e:	9b07      	ldr	r3, [sp, #28]
  409d70:	f013 0320 	ands.w	r3, r3, #32
  409d74:	f000 810e 	beq.w	409f94 <_svfprintf_r+0x6d4>
  409d78:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  409d7a:	f103 0907 	add.w	r9, r3, #7
  409d7e:	f029 0307 	bic.w	r3, r9, #7
  409d82:	f103 0208 	add.w	r2, r3, #8
  409d86:	e9d3 8900 	ldrd	r8, r9, [r3]
  409d8a:	920e      	str	r2, [sp, #56]	; 0x38
  409d8c:	2300      	movs	r3, #0
  409d8e:	e67c      	b.n	409a8a <_svfprintf_r+0x1ca>
  409d90:	781d      	ldrb	r5, [r3, #0]
  409d92:	4619      	mov	r1, r3
  409d94:	222b      	movs	r2, #43	; 0x2b
  409d96:	e5e6      	b.n	409966 <_svfprintf_r+0xa6>
  409d98:	781d      	ldrb	r5, [r3, #0]
  409d9a:	2d2a      	cmp	r5, #42	; 0x2a
  409d9c:	f103 0101 	add.w	r1, r3, #1
  409da0:	f000 87ad 	beq.w	40acfe <_svfprintf_r+0x143e>
  409da4:	f1a5 0030 	sub.w	r0, r5, #48	; 0x30
  409da8:	2809      	cmp	r0, #9
  409daa:	460b      	mov	r3, r1
  409dac:	f04f 0a00 	mov.w	sl, #0
  409db0:	f63f adda 	bhi.w	409968 <_svfprintf_r+0xa8>
  409db4:	f813 5b01 	ldrb.w	r5, [r3], #1
  409db8:	eb0a 0a8a 	add.w	sl, sl, sl, lsl #2
  409dbc:	eb00 0a4a 	add.w	sl, r0, sl, lsl #1
  409dc0:	f1a5 0030 	sub.w	r0, r5, #48	; 0x30
  409dc4:	2809      	cmp	r0, #9
  409dc6:	d9f5      	bls.n	409db4 <_svfprintf_r+0x4f4>
  409dc8:	ea4a 7aea 	orr.w	sl, sl, sl, asr #31
  409dcc:	e5cc      	b.n	409968 <_svfprintf_r+0xa8>
  409dce:	930a      	str	r3, [sp, #40]	; 0x28
  409dd0:	9b07      	ldr	r3, [sp, #28]
  409dd2:	f88d 206f 	strb.w	r2, [sp, #111]	; 0x6f
  409dd6:	069b      	lsls	r3, r3, #26
  409dd8:	f140 80a1 	bpl.w	409f1e <_svfprintf_r+0x65e>
  409ddc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  409dde:	f103 0907 	add.w	r9, r3, #7
  409de2:	f029 0907 	bic.w	r9, r9, #7
  409de6:	e9d9 2300 	ldrd	r2, r3, [r9]
  409dea:	f109 0108 	add.w	r1, r9, #8
  409dee:	910e      	str	r1, [sp, #56]	; 0x38
  409df0:	4690      	mov	r8, r2
  409df2:	4699      	mov	r9, r3
  409df4:	2a00      	cmp	r2, #0
  409df6:	f173 0300 	sbcs.w	r3, r3, #0
  409dfa:	f2c0 840b 	blt.w	40a614 <_svfprintf_r+0xd54>
  409dfe:	f89d c06f 	ldrb.w	ip, [sp, #111]	; 0x6f
  409e02:	f8cd a044 	str.w	sl, [sp, #68]	; 0x44
  409e06:	2301      	movs	r3, #1
  409e08:	e645      	b.n	409a96 <_svfprintf_r+0x1d6>
  409e0a:	930a      	str	r3, [sp, #40]	; 0x28
  409e0c:	4b9b      	ldr	r3, [pc, #620]	; (40a07c <_svfprintf_r+0x7bc>)
  409e0e:	9316      	str	r3, [sp, #88]	; 0x58
  409e10:	9b07      	ldr	r3, [sp, #28]
  409e12:	f88d 206f 	strb.w	r2, [sp, #111]	; 0x6f
  409e16:	069b      	lsls	r3, r3, #26
  409e18:	f140 80f3 	bpl.w	40a002 <_svfprintf_r+0x742>
  409e1c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  409e1e:	f103 0907 	add.w	r9, r3, #7
  409e22:	f029 0307 	bic.w	r3, r9, #7
  409e26:	e9d3 8900 	ldrd	r8, r9, [r3]
  409e2a:	f103 0208 	add.w	r2, r3, #8
  409e2e:	920e      	str	r2, [sp, #56]	; 0x38
  409e30:	9b07      	ldr	r3, [sp, #28]
  409e32:	07d9      	lsls	r1, r3, #31
  409e34:	f140 80f5 	bpl.w	40a022 <_svfprintf_r+0x762>
  409e38:	ea58 0309 	orrs.w	r3, r8, r9
  409e3c:	f000 80f1 	beq.w	40a022 <_svfprintf_r+0x762>
  409e40:	9a07      	ldr	r2, [sp, #28]
  409e42:	f88d 5071 	strb.w	r5, [sp, #113]	; 0x71
  409e46:	2330      	movs	r3, #48	; 0x30
  409e48:	f042 0202 	orr.w	r2, r2, #2
  409e4c:	f88d 3070 	strb.w	r3, [sp, #112]	; 0x70
  409e50:	9207      	str	r2, [sp, #28]
  409e52:	2302      	movs	r3, #2
  409e54:	e619      	b.n	409a8a <_svfprintf_r+0x1ca>
  409e56:	781d      	ldrb	r5, [r3, #0]
  409e58:	4619      	mov	r1, r3
  409e5a:	2a00      	cmp	r2, #0
  409e5c:	f47f ad83 	bne.w	409966 <_svfprintf_r+0xa6>
  409e60:	2220      	movs	r2, #32
  409e62:	e580      	b.n	409966 <_svfprintf_r+0xa6>
  409e64:	9907      	ldr	r1, [sp, #28]
  409e66:	f041 0120 	orr.w	r1, r1, #32
  409e6a:	9107      	str	r1, [sp, #28]
  409e6c:	781d      	ldrb	r5, [r3, #0]
  409e6e:	4619      	mov	r1, r3
  409e70:	e579      	b.n	409966 <_svfprintf_r+0xa6>
  409e72:	930a      	str	r3, [sp, #40]	; 0x28
  409e74:	9b07      	ldr	r3, [sp, #28]
  409e76:	f88d 206f 	strb.w	r2, [sp, #111]	; 0x6f
  409e7a:	069a      	lsls	r2, r3, #26
  409e7c:	f140 84a1 	bpl.w	40a7c2 <_svfprintf_r+0xf02>
  409e80:	990b      	ldr	r1, [sp, #44]	; 0x2c
  409e82:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  409e84:	ea4f 79e1 	mov.w	r9, r1, asr #31
  409e88:	6813      	ldr	r3, [r2, #0]
  409e8a:	4608      	mov	r0, r1
  409e8c:	4688      	mov	r8, r1
  409e8e:	3204      	adds	r2, #4
  409e90:	4649      	mov	r1, r9
  409e92:	920e      	str	r2, [sp, #56]	; 0x38
  409e94:	e9c3 0100 	strd	r0, r1, [r3]
  409e98:	e537      	b.n	40990a <_svfprintf_r+0x4a>
  409e9a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  409e9c:	930a      	str	r3, [sp, #40]	; 0x28
  409e9e:	6813      	ldr	r3, [r2, #0]
  409ea0:	9310      	str	r3, [sp, #64]	; 0x40
  409ea2:	f04f 0b00 	mov.w	fp, #0
  409ea6:	f88d b06f 	strb.w	fp, [sp, #111]	; 0x6f
  409eaa:	f102 0904 	add.w	r9, r2, #4
  409eae:	2b00      	cmp	r3, #0
  409eb0:	f000 863b 	beq.w	40ab2a <_svfprintf_r+0x126a>
  409eb4:	f1ba 0f00 	cmp.w	sl, #0
  409eb8:	9810      	ldr	r0, [sp, #64]	; 0x40
  409eba:	f2c0 85e9 	blt.w	40aa90 <_svfprintf_r+0x11d0>
  409ebe:	4659      	mov	r1, fp
  409ec0:	4652      	mov	r2, sl
  409ec2:	f7fe ff95 	bl	408df0 <memchr>
  409ec6:	2800      	cmp	r0, #0
  409ec8:	f000 866c 	beq.w	40aba4 <_svfprintf_r+0x12e4>
  409ecc:	9b10      	ldr	r3, [sp, #64]	; 0x40
  409ece:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
  409ed2:	1ac3      	subs	r3, r0, r3
  409ed4:	930d      	str	r3, [sp, #52]	; 0x34
  409ed6:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
  409eda:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  409ede:	9309      	str	r3, [sp, #36]	; 0x24
  409ee0:	f8cd b048 	str.w	fp, [sp, #72]	; 0x48
  409ee4:	f89d c06f 	ldrb.w	ip, [sp, #111]	; 0x6f
  409ee8:	e60a      	b.n	409b00 <_svfprintf_r+0x240>
  409eea:	f1a5 0030 	sub.w	r0, r5, #48	; 0x30
  409eee:	2100      	movs	r1, #0
  409ef0:	f813 5b01 	ldrb.w	r5, [r3], #1
  409ef4:	eb01 0181 	add.w	r1, r1, r1, lsl #2
  409ef8:	eb00 0141 	add.w	r1, r0, r1, lsl #1
  409efc:	f1a5 0030 	sub.w	r0, r5, #48	; 0x30
  409f00:	2809      	cmp	r0, #9
  409f02:	d9f5      	bls.n	409ef0 <_svfprintf_r+0x630>
  409f04:	910c      	str	r1, [sp, #48]	; 0x30
  409f06:	e52f      	b.n	409968 <_svfprintf_r+0xa8>
  409f08:	930a      	str	r3, [sp, #40]	; 0x28
  409f0a:	9b07      	ldr	r3, [sp, #28]
  409f0c:	f88d 206f 	strb.w	r2, [sp, #111]	; 0x6f
  409f10:	f043 0310 	orr.w	r3, r3, #16
  409f14:	9307      	str	r3, [sp, #28]
  409f16:	9b07      	ldr	r3, [sp, #28]
  409f18:	069b      	lsls	r3, r3, #26
  409f1a:	f53f af5f 	bmi.w	409ddc <_svfprintf_r+0x51c>
  409f1e:	9b07      	ldr	r3, [sp, #28]
  409f20:	06d8      	lsls	r0, r3, #27
  409f22:	f100 8368 	bmi.w	40a5f6 <_svfprintf_r+0xd36>
  409f26:	9b07      	ldr	r3, [sp, #28]
  409f28:	0659      	lsls	r1, r3, #25
  409f2a:	f140 8364 	bpl.w	40a5f6 <_svfprintf_r+0xd36>
  409f2e:	990e      	ldr	r1, [sp, #56]	; 0x38
  409f30:	f9b1 8000 	ldrsh.w	r8, [r1]
  409f34:	3104      	adds	r1, #4
  409f36:	ea4f 79e8 	mov.w	r9, r8, asr #31
  409f3a:	4642      	mov	r2, r8
  409f3c:	464b      	mov	r3, r9
  409f3e:	910e      	str	r1, [sp, #56]	; 0x38
  409f40:	e758      	b.n	409df4 <_svfprintf_r+0x534>
  409f42:	781d      	ldrb	r5, [r3, #0]
  409f44:	9907      	ldr	r1, [sp, #28]
  409f46:	2d6c      	cmp	r5, #108	; 0x6c
  409f48:	f000 84cb 	beq.w	40a8e2 <_svfprintf_r+0x1022>
  409f4c:	f041 0110 	orr.w	r1, r1, #16
  409f50:	9107      	str	r1, [sp, #28]
  409f52:	4619      	mov	r1, r3
  409f54:	e507      	b.n	409966 <_svfprintf_r+0xa6>
  409f56:	9d0e      	ldr	r5, [sp, #56]	; 0x38
  409f58:	6829      	ldr	r1, [r5, #0]
  409f5a:	910c      	str	r1, [sp, #48]	; 0x30
  409f5c:	4608      	mov	r0, r1
  409f5e:	2800      	cmp	r0, #0
  409f60:	4629      	mov	r1, r5
  409f62:	f101 0104 	add.w	r1, r1, #4
  409f66:	f2c0 84b5 	blt.w	40a8d4 <_svfprintf_r+0x1014>
  409f6a:	910e      	str	r1, [sp, #56]	; 0x38
  409f6c:	781d      	ldrb	r5, [r3, #0]
  409f6e:	4619      	mov	r1, r3
  409f70:	e4f9      	b.n	409966 <_svfprintf_r+0xa6>
  409f72:	9907      	ldr	r1, [sp, #28]
  409f74:	f041 0140 	orr.w	r1, r1, #64	; 0x40
  409f78:	9107      	str	r1, [sp, #28]
  409f7a:	781d      	ldrb	r5, [r3, #0]
  409f7c:	4619      	mov	r1, r3
  409f7e:	e4f2      	b.n	409966 <_svfprintf_r+0xa6>
  409f80:	930a      	str	r3, [sp, #40]	; 0x28
  409f82:	9b07      	ldr	r3, [sp, #28]
  409f84:	f043 0310 	orr.w	r3, r3, #16
  409f88:	9307      	str	r3, [sp, #28]
  409f8a:	9b07      	ldr	r3, [sp, #28]
  409f8c:	f013 0320 	ands.w	r3, r3, #32
  409f90:	f47f aef2 	bne.w	409d78 <_svfprintf_r+0x4b8>
  409f94:	9a07      	ldr	r2, [sp, #28]
  409f96:	f012 0210 	ands.w	r2, r2, #16
  409f9a:	f040 8319 	bne.w	40a5d0 <_svfprintf_r+0xd10>
  409f9e:	9b07      	ldr	r3, [sp, #28]
  409fa0:	f013 0340 	ands.w	r3, r3, #64	; 0x40
  409fa4:	f000 8314 	beq.w	40a5d0 <_svfprintf_r+0xd10>
  409fa8:	990e      	ldr	r1, [sp, #56]	; 0x38
  409faa:	4613      	mov	r3, r2
  409fac:	460a      	mov	r2, r1
  409fae:	3204      	adds	r2, #4
  409fb0:	f8b1 8000 	ldrh.w	r8, [r1]
  409fb4:	920e      	str	r2, [sp, #56]	; 0x38
  409fb6:	f04f 0900 	mov.w	r9, #0
  409fba:	e566      	b.n	409a8a <_svfprintf_r+0x1ca>
  409fbc:	930a      	str	r3, [sp, #40]	; 0x28
  409fbe:	9b07      	ldr	r3, [sp, #28]
  409fc0:	f043 0310 	orr.w	r3, r3, #16
  409fc4:	9307      	str	r3, [sp, #28]
  409fc6:	9b07      	ldr	r3, [sp, #28]
  409fc8:	0698      	lsls	r0, r3, #26
  409fca:	f53f ad53 	bmi.w	409a74 <_svfprintf_r+0x1b4>
  409fce:	9b07      	ldr	r3, [sp, #28]
  409fd0:	06d9      	lsls	r1, r3, #27
  409fd2:	f100 8306 	bmi.w	40a5e2 <_svfprintf_r+0xd22>
  409fd6:	9b07      	ldr	r3, [sp, #28]
  409fd8:	065a      	lsls	r2, r3, #25
  409fda:	f140 8302 	bpl.w	40a5e2 <_svfprintf_r+0xd22>
  409fde:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  409fe0:	f8b2 8000 	ldrh.w	r8, [r2]
  409fe4:	3204      	adds	r2, #4
  409fe6:	f04f 0900 	mov.w	r9, #0
  409fea:	2301      	movs	r3, #1
  409fec:	920e      	str	r2, [sp, #56]	; 0x38
  409fee:	e54c      	b.n	409a8a <_svfprintf_r+0x1ca>
  409ff0:	930a      	str	r3, [sp, #40]	; 0x28
  409ff2:	4b23      	ldr	r3, [pc, #140]	; (40a080 <_svfprintf_r+0x7c0>)
  409ff4:	9316      	str	r3, [sp, #88]	; 0x58
  409ff6:	9b07      	ldr	r3, [sp, #28]
  409ff8:	f88d 206f 	strb.w	r2, [sp, #111]	; 0x6f
  409ffc:	069b      	lsls	r3, r3, #26
  409ffe:	f53f af0d 	bmi.w	409e1c <_svfprintf_r+0x55c>
  40a002:	9b07      	ldr	r3, [sp, #28]
  40a004:	06d8      	lsls	r0, r3, #27
  40a006:	f140 83cd 	bpl.w	40a7a4 <_svfprintf_r+0xee4>
  40a00a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  40a00c:	4613      	mov	r3, r2
  40a00e:	681b      	ldr	r3, [r3, #0]
  40a010:	4698      	mov	r8, r3
  40a012:	9b07      	ldr	r3, [sp, #28]
  40a014:	3204      	adds	r2, #4
  40a016:	07d9      	lsls	r1, r3, #31
  40a018:	920e      	str	r2, [sp, #56]	; 0x38
  40a01a:	f04f 0900 	mov.w	r9, #0
  40a01e:	f53f af0b 	bmi.w	409e38 <_svfprintf_r+0x578>
  40a022:	2302      	movs	r3, #2
  40a024:	e531      	b.n	409a8a <_svfprintf_r+0x1ca>
  40a026:	990e      	ldr	r1, [sp, #56]	; 0x38
  40a028:	930a      	str	r3, [sp, #40]	; 0x28
  40a02a:	680a      	ldr	r2, [r1, #0]
  40a02c:	f88d 2098 	strb.w	r2, [sp, #152]	; 0x98
  40a030:	2300      	movs	r3, #0
  40a032:	2201      	movs	r2, #1
  40a034:	3104      	adds	r1, #4
  40a036:	469c      	mov	ip, r3
  40a038:	9209      	str	r2, [sp, #36]	; 0x24
  40a03a:	910e      	str	r1, [sp, #56]	; 0x38
  40a03c:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
  40a040:	ab26      	add	r3, sp, #152	; 0x98
  40a042:	f8cd c044 	str.w	ip, [sp, #68]	; 0x44
  40a046:	f8cd c048 	str.w	ip, [sp, #72]	; 0x48
  40a04a:	920d      	str	r2, [sp, #52]	; 0x34
  40a04c:	9310      	str	r3, [sp, #64]	; 0x40
  40a04e:	e55d      	b.n	409b0c <_svfprintf_r+0x24c>
  40a050:	9907      	ldr	r1, [sp, #28]
  40a052:	f041 0108 	orr.w	r1, r1, #8
  40a056:	9107      	str	r1, [sp, #28]
  40a058:	781d      	ldrb	r5, [r3, #0]
  40a05a:	4619      	mov	r1, r3
  40a05c:	e483      	b.n	409966 <_svfprintf_r+0xa6>
  40a05e:	9907      	ldr	r1, [sp, #28]
  40a060:	f041 0101 	orr.w	r1, r1, #1
  40a064:	9107      	str	r1, [sp, #28]
  40a066:	781d      	ldrb	r5, [r3, #0]
  40a068:	4619      	mov	r1, r3
  40a06a:	e47c      	b.n	409966 <_svfprintf_r+0xa6>
  40a06c:	9907      	ldr	r1, [sp, #28]
  40a06e:	f041 0180 	orr.w	r1, r1, #128	; 0x80
  40a072:	9107      	str	r1, [sp, #28]
  40a074:	781d      	ldrb	r5, [r3, #0]
  40a076:	4619      	mov	r1, r3
  40a078:	e475      	b.n	409966 <_svfprintf_r+0xa6>
  40a07a:	bf00      	nop
  40a07c:	00411bdc 	.word	0x00411bdc
  40a080:	00411bc8 	.word	0x00411bc8
  40a084:	00411ba8 	.word	0x00411ba8
  40a088:	00411b98 	.word	0x00411b98
  40a08c:	930a      	str	r3, [sp, #40]	; 0x28
  40a08e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  40a090:	f88d 206f 	strb.w	r2, [sp, #111]	; 0x6f
  40a094:	f103 0907 	add.w	r9, r3, #7
  40a098:	f029 0307 	bic.w	r3, r9, #7
  40a09c:	f103 0208 	add.w	r2, r3, #8
  40a0a0:	920e      	str	r2, [sp, #56]	; 0x38
  40a0a2:	681a      	ldr	r2, [r3, #0]
  40a0a4:	9214      	str	r2, [sp, #80]	; 0x50
  40a0a6:	685b      	ldr	r3, [r3, #4]
  40a0a8:	9315      	str	r3, [sp, #84]	; 0x54
  40a0aa:	9915      	ldr	r1, [sp, #84]	; 0x54
  40a0ac:	9814      	ldr	r0, [sp, #80]	; 0x50
  40a0ae:	f004 fb95 	bl	40e7dc <__fpclassifyd>
  40a0b2:	2801      	cmp	r0, #1
  40a0b4:	46d3      	mov	fp, sl
  40a0b6:	9814      	ldr	r0, [sp, #80]	; 0x50
  40a0b8:	9915      	ldr	r1, [sp, #84]	; 0x54
  40a0ba:	f040 8359 	bne.w	40a770 <_svfprintf_r+0xeb0>
  40a0be:	2200      	movs	r2, #0
  40a0c0:	2300      	movs	r3, #0
  40a0c2:	f7fc fe63 	bl	406d8c <__aeabi_dcmplt>
  40a0c6:	2800      	cmp	r0, #0
  40a0c8:	f040 8564 	bne.w	40ab94 <_svfprintf_r+0x12d4>
  40a0cc:	f89d c06f 	ldrb.w	ip, [sp, #111]	; 0x6f
  40a0d0:	9b07      	ldr	r3, [sp, #28]
  40a0d2:	4abe      	ldr	r2, [pc, #760]	; (40a3cc <_svfprintf_r+0xb0c>)
  40a0d4:	f8df e300 	ldr.w	lr, [pc, #768]	; 40a3d8 <_svfprintf_r+0xb18>
  40a0d8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  40a0dc:	9307      	str	r3, [sp, #28]
  40a0de:	4613      	mov	r3, r2
  40a0e0:	2103      	movs	r1, #3
  40a0e2:	2000      	movs	r0, #0
  40a0e4:	2d47      	cmp	r5, #71	; 0x47
  40a0e6:	bfd8      	it	le
  40a0e8:	4673      	movle	r3, lr
  40a0ea:	9109      	str	r1, [sp, #36]	; 0x24
  40a0ec:	9011      	str	r0, [sp, #68]	; 0x44
  40a0ee:	9310      	str	r3, [sp, #64]	; 0x40
  40a0f0:	910d      	str	r1, [sp, #52]	; 0x34
  40a0f2:	9012      	str	r0, [sp, #72]	; 0x48
  40a0f4:	e504      	b.n	409b00 <_svfprintf_r+0x240>
  40a0f6:	980e      	ldr	r0, [sp, #56]	; 0x38
  40a0f8:	9907      	ldr	r1, [sp, #28]
  40a0fa:	930a      	str	r3, [sp, #40]	; 0x28
  40a0fc:	2230      	movs	r2, #48	; 0x30
  40a0fe:	6803      	ldr	r3, [r0, #0]
  40a100:	f88d 2070 	strb.w	r2, [sp, #112]	; 0x70
  40a104:	4602      	mov	r2, r0
  40a106:	2578      	movs	r5, #120	; 0x78
  40a108:	f041 0102 	orr.w	r1, r1, #2
  40a10c:	3204      	adds	r2, #4
  40a10e:	4698      	mov	r8, r3
  40a110:	4baf      	ldr	r3, [pc, #700]	; (40a3d0 <_svfprintf_r+0xb10>)
  40a112:	9316      	str	r3, [sp, #88]	; 0x58
  40a114:	9107      	str	r1, [sp, #28]
  40a116:	920e      	str	r2, [sp, #56]	; 0x38
  40a118:	f04f 0900 	mov.w	r9, #0
  40a11c:	f88d 5071 	strb.w	r5, [sp, #113]	; 0x71
  40a120:	2302      	movs	r3, #2
  40a122:	e4b2      	b.n	409a8a <_svfprintf_r+0x1ca>
  40a124:	930a      	str	r3, [sp, #40]	; 0x28
  40a126:	f88d 206f 	strb.w	r2, [sp, #111]	; 0x6f
  40a12a:	2d00      	cmp	r5, #0
  40a12c:	f000 83c6 	beq.w	40a8bc <_svfprintf_r+0xffc>
  40a130:	2300      	movs	r3, #0
  40a132:	2201      	movs	r2, #1
  40a134:	469c      	mov	ip, r3
  40a136:	9209      	str	r2, [sp, #36]	; 0x24
  40a138:	f88d 5098 	strb.w	r5, [sp, #152]	; 0x98
  40a13c:	e77e      	b.n	40a03c <_svfprintf_r+0x77c>
  40a13e:	f8dd b094 	ldr.w	fp, [sp, #148]	; 0x94
  40a142:	e539      	b.n	409bb8 <_svfprintf_r+0x2f8>
  40a144:	2b01      	cmp	r3, #1
  40a146:	f47f acb8 	bne.w	409aba <_svfprintf_r+0x1fa>
  40a14a:	f1b9 0f00 	cmp.w	r9, #0
  40a14e:	bf08      	it	eq
  40a150:	f1b8 0f0a 	cmpeq.w	r8, #10
  40a154:	f080 821c 	bcs.w	40a590 <_svfprintf_r+0xcd0>
  40a158:	f50d 7b80 	add.w	fp, sp, #256	; 0x100
  40a15c:	f108 0830 	add.w	r8, r8, #48	; 0x30
  40a160:	f80b 8d41 	strb.w	r8, [fp, #-65]!
  40a164:	ebcb 0307 	rsb	r3, fp, r7
  40a168:	930d      	str	r3, [sp, #52]	; 0x34
  40a16a:	f8cd b040 	str.w	fp, [sp, #64]	; 0x40
  40a16e:	e4bf      	b.n	409af0 <_svfprintf_r+0x230>
  40a170:	2d65      	cmp	r5, #101	; 0x65
  40a172:	f340 80a0 	ble.w	40a2b6 <_svfprintf_r+0x9f6>
  40a176:	9814      	ldr	r0, [sp, #80]	; 0x50
  40a178:	9915      	ldr	r1, [sp, #84]	; 0x54
  40a17a:	2200      	movs	r2, #0
  40a17c:	2300      	movs	r3, #0
  40a17e:	f7fc fdfb 	bl	406d78 <__aeabi_dcmpeq>
  40a182:	2800      	cmp	r0, #0
  40a184:	f000 8145 	beq.w	40a412 <_svfprintf_r+0xb52>
  40a188:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40a18a:	4a92      	ldr	r2, [pc, #584]	; (40a3d4 <_svfprintf_r+0xb14>)
  40a18c:	6022      	str	r2, [r4, #0]
  40a18e:	3301      	adds	r3, #1
  40a190:	f10b 0b01 	add.w	fp, fp, #1
  40a194:	2201      	movs	r2, #1
  40a196:	2b07      	cmp	r3, #7
  40a198:	f8cd b094 	str.w	fp, [sp, #148]	; 0x94
  40a19c:	9324      	str	r3, [sp, #144]	; 0x90
  40a19e:	6062      	str	r2, [r4, #4]
  40a1a0:	f300 8334 	bgt.w	40a80c <_svfprintf_r+0xf4c>
  40a1a4:	3408      	adds	r4, #8
  40a1a6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
  40a1a8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
  40a1aa:	4293      	cmp	r3, r2
  40a1ac:	db03      	blt.n	40a1b6 <_svfprintf_r+0x8f6>
  40a1ae:	9b07      	ldr	r3, [sp, #28]
  40a1b0:	07da      	lsls	r2, r3, #31
  40a1b2:	f57f ad7f 	bpl.w	409cb4 <_svfprintf_r+0x3f4>
  40a1b6:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40a1b8:	9918      	ldr	r1, [sp, #96]	; 0x60
  40a1ba:	9a17      	ldr	r2, [sp, #92]	; 0x5c
  40a1bc:	6022      	str	r2, [r4, #0]
  40a1be:	3301      	adds	r3, #1
  40a1c0:	448b      	add	fp, r1
  40a1c2:	2b07      	cmp	r3, #7
  40a1c4:	f8cd b094 	str.w	fp, [sp, #148]	; 0x94
  40a1c8:	6061      	str	r1, [r4, #4]
  40a1ca:	9324      	str	r3, [sp, #144]	; 0x90
  40a1cc:	f300 8390 	bgt.w	40a8f0 <_svfprintf_r+0x1030>
  40a1d0:	3408      	adds	r4, #8
  40a1d2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  40a1d4:	1e5d      	subs	r5, r3, #1
  40a1d6:	2d00      	cmp	r5, #0
  40a1d8:	f77f ad6c 	ble.w	409cb4 <_svfprintf_r+0x3f4>
  40a1dc:	2d10      	cmp	r5, #16
  40a1de:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40a1e0:	f8df 91f8 	ldr.w	r9, [pc, #504]	; 40a3dc <_svfprintf_r+0xb1c>
  40a1e4:	f340 81ba 	ble.w	40a55c <_svfprintf_r+0xc9c>
  40a1e8:	f04f 0810 	mov.w	r8, #16
  40a1ec:	465a      	mov	r2, fp
  40a1ee:	f8dd a020 	ldr.w	sl, [sp, #32]
  40a1f2:	e004      	b.n	40a1fe <_svfprintf_r+0x93e>
  40a1f4:	3408      	adds	r4, #8
  40a1f6:	3d10      	subs	r5, #16
  40a1f8:	2d10      	cmp	r5, #16
  40a1fa:	f340 81ae 	ble.w	40a55a <_svfprintf_r+0xc9a>
  40a1fe:	3301      	adds	r3, #1
  40a200:	3210      	adds	r2, #16
  40a202:	2b07      	cmp	r3, #7
  40a204:	9225      	str	r2, [sp, #148]	; 0x94
  40a206:	9324      	str	r3, [sp, #144]	; 0x90
  40a208:	f8c4 9000 	str.w	r9, [r4]
  40a20c:	f8c4 8004 	str.w	r8, [r4, #4]
  40a210:	ddf0      	ble.n	40a1f4 <_svfprintf_r+0x934>
  40a212:	4650      	mov	r0, sl
  40a214:	4631      	mov	r1, r6
  40a216:	aa23      	add	r2, sp, #140	; 0x8c
  40a218:	f004 fb0c 	bl	40e834 <__ssprint_r>
  40a21c:	2800      	cmp	r0, #0
  40a21e:	f47f ac15 	bne.w	409a4c <_svfprintf_r+0x18c>
  40a222:	9a25      	ldr	r2, [sp, #148]	; 0x94
  40a224:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40a226:	463c      	mov	r4, r7
  40a228:	e7e5      	b.n	40a1f6 <_svfprintf_r+0x936>
  40a22a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  40a22c:	9a09      	ldr	r2, [sp, #36]	; 0x24
  40a22e:	ebc2 0a03 	rsb	sl, r2, r3
  40a232:	f1ba 0f00 	cmp.w	sl, #0
  40a236:	f77f ace7 	ble.w	409c08 <_svfprintf_r+0x348>
  40a23a:	f1ba 0f10 	cmp.w	sl, #16
  40a23e:	9a24      	ldr	r2, [sp, #144]	; 0x90
  40a240:	f8df 9198 	ldr.w	r9, [pc, #408]	; 40a3dc <_svfprintf_r+0xb1c>
  40a244:	dd2b      	ble.n	40a29e <_svfprintf_r+0x9de>
  40a246:	4649      	mov	r1, r9
  40a248:	465b      	mov	r3, fp
  40a24a:	46a9      	mov	r9, r5
  40a24c:	f04f 0810 	mov.w	r8, #16
  40a250:	f8dd b020 	ldr.w	fp, [sp, #32]
  40a254:	460d      	mov	r5, r1
  40a256:	e006      	b.n	40a266 <_svfprintf_r+0x9a6>
  40a258:	f1aa 0a10 	sub.w	sl, sl, #16
  40a25c:	f1ba 0f10 	cmp.w	sl, #16
  40a260:	f104 0408 	add.w	r4, r4, #8
  40a264:	dd17      	ble.n	40a296 <_svfprintf_r+0x9d6>
  40a266:	3201      	adds	r2, #1
  40a268:	3310      	adds	r3, #16
  40a26a:	2a07      	cmp	r2, #7
  40a26c:	9325      	str	r3, [sp, #148]	; 0x94
  40a26e:	9224      	str	r2, [sp, #144]	; 0x90
  40a270:	e884 0120 	stmia.w	r4, {r5, r8}
  40a274:	ddf0      	ble.n	40a258 <_svfprintf_r+0x998>
  40a276:	4658      	mov	r0, fp
  40a278:	4631      	mov	r1, r6
  40a27a:	aa23      	add	r2, sp, #140	; 0x8c
  40a27c:	f004 fada 	bl	40e834 <__ssprint_r>
  40a280:	2800      	cmp	r0, #0
  40a282:	f47f abe3 	bne.w	409a4c <_svfprintf_r+0x18c>
  40a286:	f1aa 0a10 	sub.w	sl, sl, #16
  40a28a:	f1ba 0f10 	cmp.w	sl, #16
  40a28e:	9b25      	ldr	r3, [sp, #148]	; 0x94
  40a290:	9a24      	ldr	r2, [sp, #144]	; 0x90
  40a292:	463c      	mov	r4, r7
  40a294:	dce7      	bgt.n	40a266 <_svfprintf_r+0x9a6>
  40a296:	469b      	mov	fp, r3
  40a298:	462b      	mov	r3, r5
  40a29a:	464d      	mov	r5, r9
  40a29c:	4699      	mov	r9, r3
  40a29e:	3201      	adds	r2, #1
  40a2a0:	44d3      	add	fp, sl
  40a2a2:	2a07      	cmp	r2, #7
  40a2a4:	f8cd b094 	str.w	fp, [sp, #148]	; 0x94
  40a2a8:	9224      	str	r2, [sp, #144]	; 0x90
  40a2aa:	e884 0600 	stmia.w	r4, {r9, sl}
  40a2ae:	f300 8252 	bgt.w	40a756 <_svfprintf_r+0xe96>
  40a2b2:	3408      	adds	r4, #8
  40a2b4:	e4a8      	b.n	409c08 <_svfprintf_r+0x348>
  40a2b6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  40a2b8:	9d24      	ldr	r5, [sp, #144]	; 0x90
  40a2ba:	2b01      	cmp	r3, #1
  40a2bc:	f340 8220 	ble.w	40a700 <_svfprintf_r+0xe40>
  40a2c0:	9b10      	ldr	r3, [sp, #64]	; 0x40
  40a2c2:	6023      	str	r3, [r4, #0]
  40a2c4:	3501      	adds	r5, #1
  40a2c6:	f10b 0301 	add.w	r3, fp, #1
  40a2ca:	2201      	movs	r2, #1
  40a2cc:	2d07      	cmp	r5, #7
  40a2ce:	9325      	str	r3, [sp, #148]	; 0x94
  40a2d0:	9524      	str	r5, [sp, #144]	; 0x90
  40a2d2:	6062      	str	r2, [r4, #4]
  40a2d4:	f300 8226 	bgt.w	40a724 <_svfprintf_r+0xe64>
  40a2d8:	3408      	adds	r4, #8
  40a2da:	9918      	ldr	r1, [sp, #96]	; 0x60
  40a2dc:	6061      	str	r1, [r4, #4]
  40a2de:	3501      	adds	r5, #1
  40a2e0:	eb03 0b01 	add.w	fp, r3, r1
  40a2e4:	2d07      	cmp	r5, #7
  40a2e6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
  40a2e8:	f8cd b094 	str.w	fp, [sp, #148]	; 0x94
  40a2ec:	9524      	str	r5, [sp, #144]	; 0x90
  40a2ee:	6023      	str	r3, [r4, #0]
  40a2f0:	f300 8224 	bgt.w	40a73c <_svfprintf_r+0xe7c>
  40a2f4:	3408      	adds	r4, #8
  40a2f6:	2300      	movs	r3, #0
  40a2f8:	9814      	ldr	r0, [sp, #80]	; 0x50
  40a2fa:	9915      	ldr	r1, [sp, #84]	; 0x54
  40a2fc:	2200      	movs	r2, #0
  40a2fe:	f7fc fd3b 	bl	406d78 <__aeabi_dcmpeq>
  40a302:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  40a304:	2800      	cmp	r0, #0
  40a306:	f040 80de 	bne.w	40a4c6 <_svfprintf_r+0xc06>
  40a30a:	9a10      	ldr	r2, [sp, #64]	; 0x40
  40a30c:	3b01      	subs	r3, #1
  40a30e:	3501      	adds	r5, #1
  40a310:	3201      	adds	r2, #1
  40a312:	449b      	add	fp, r3
  40a314:	2d07      	cmp	r5, #7
  40a316:	9524      	str	r5, [sp, #144]	; 0x90
  40a318:	f8cd b094 	str.w	fp, [sp, #148]	; 0x94
  40a31c:	6022      	str	r2, [r4, #0]
  40a31e:	6063      	str	r3, [r4, #4]
  40a320:	f300 810e 	bgt.w	40a540 <_svfprintf_r+0xc80>
  40a324:	3408      	adds	r4, #8
  40a326:	9a19      	ldr	r2, [sp, #100]	; 0x64
  40a328:	6062      	str	r2, [r4, #4]
  40a32a:	3501      	adds	r5, #1
  40a32c:	4493      	add	fp, r2
  40a32e:	ab1f      	add	r3, sp, #124	; 0x7c
  40a330:	2d07      	cmp	r5, #7
  40a332:	f8cd b094 	str.w	fp, [sp, #148]	; 0x94
  40a336:	9524      	str	r5, [sp, #144]	; 0x90
  40a338:	6023      	str	r3, [r4, #0]
  40a33a:	f77f acba 	ble.w	409cb2 <_svfprintf_r+0x3f2>
  40a33e:	9808      	ldr	r0, [sp, #32]
  40a340:	4631      	mov	r1, r6
  40a342:	aa23      	add	r2, sp, #140	; 0x8c
  40a344:	f004 fa76 	bl	40e834 <__ssprint_r>
  40a348:	2800      	cmp	r0, #0
  40a34a:	f47f ab7f 	bne.w	409a4c <_svfprintf_r+0x18c>
  40a34e:	f8dd b094 	ldr.w	fp, [sp, #148]	; 0x94
  40a352:	463c      	mov	r4, r7
  40a354:	e4ae      	b.n	409cb4 <_svfprintf_r+0x3f4>
  40a356:	2b00      	cmp	r3, #0
  40a358:	d132      	bne.n	40a3c0 <_svfprintf_r+0xb00>
  40a35a:	9b07      	ldr	r3, [sp, #28]
  40a35c:	07d8      	lsls	r0, r3, #31
  40a35e:	d52f      	bpl.n	40a3c0 <_svfprintf_r+0xb00>
  40a360:	f50d 7b80 	add.w	fp, sp, #256	; 0x100
  40a364:	2330      	movs	r3, #48	; 0x30
  40a366:	f80b 3d41 	strb.w	r3, [fp, #-65]!
  40a36a:	ebcb 0307 	rsb	r3, fp, r7
  40a36e:	930d      	str	r3, [sp, #52]	; 0x34
  40a370:	f8cd b040 	str.w	fp, [sp, #64]	; 0x40
  40a374:	f7ff bbbc 	b.w	409af0 <_svfprintf_r+0x230>
  40a378:	9808      	ldr	r0, [sp, #32]
  40a37a:	4631      	mov	r1, r6
  40a37c:	aa23      	add	r2, sp, #140	; 0x8c
  40a37e:	f004 fa59 	bl	40e834 <__ssprint_r>
  40a382:	2800      	cmp	r0, #0
  40a384:	f47f ab62 	bne.w	409a4c <_svfprintf_r+0x18c>
  40a388:	f8dd b094 	ldr.w	fp, [sp, #148]	; 0x94
  40a38c:	463c      	mov	r4, r7
  40a38e:	e47f      	b.n	409c90 <_svfprintf_r+0x3d0>
  40a390:	9808      	ldr	r0, [sp, #32]
  40a392:	4631      	mov	r1, r6
  40a394:	aa23      	add	r2, sp, #140	; 0x8c
  40a396:	f004 fa4d 	bl	40e834 <__ssprint_r>
  40a39a:	2800      	cmp	r0, #0
  40a39c:	f47f ab56 	bne.w	409a4c <_svfprintf_r+0x18c>
  40a3a0:	f8dd b094 	ldr.w	fp, [sp, #148]	; 0x94
  40a3a4:	463c      	mov	r4, r7
  40a3a6:	e41a      	b.n	409bde <_svfprintf_r+0x31e>
  40a3a8:	9808      	ldr	r0, [sp, #32]
  40a3aa:	4631      	mov	r1, r6
  40a3ac:	aa23      	add	r2, sp, #140	; 0x8c
  40a3ae:	f004 fa41 	bl	40e834 <__ssprint_r>
  40a3b2:	2800      	cmp	r0, #0
  40a3b4:	f47f ab4a 	bne.w	409a4c <_svfprintf_r+0x18c>
  40a3b8:	f8dd b094 	ldr.w	fp, [sp, #148]	; 0x94
  40a3bc:	463c      	mov	r4, r7
  40a3be:	e41f      	b.n	409c00 <_svfprintf_r+0x340>
  40a3c0:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
  40a3c4:	9710      	str	r7, [sp, #64]	; 0x40
  40a3c6:	f7ff bb93 	b.w	409af0 <_svfprintf_r+0x230>
  40a3ca:	bf00      	nop
  40a3cc:	00411bbc 	.word	0x00411bbc
  40a3d0:	00411bdc 	.word	0x00411bdc
  40a3d4:	004119f8 	.word	0x004119f8
  40a3d8:	00411bb8 	.word	0x00411bb8
  40a3dc:	00411b98 	.word	0x00411b98
  40a3e0:	9816      	ldr	r0, [sp, #88]	; 0x58
  40a3e2:	46bb      	mov	fp, r7
  40a3e4:	ea4f 1318 	mov.w	r3, r8, lsr #4
  40a3e8:	f008 010f 	and.w	r1, r8, #15
  40a3ec:	ea43 7309 	orr.w	r3, r3, r9, lsl #28
  40a3f0:	ea4f 1219 	mov.w	r2, r9, lsr #4
  40a3f4:	4698      	mov	r8, r3
  40a3f6:	4691      	mov	r9, r2
  40a3f8:	5c43      	ldrb	r3, [r0, r1]
  40a3fa:	f80b 3d01 	strb.w	r3, [fp, #-1]!
  40a3fe:	ea58 0309 	orrs.w	r3, r8, r9
  40a402:	d1ef      	bne.n	40a3e4 <_svfprintf_r+0xb24>
  40a404:	465b      	mov	r3, fp
  40a406:	f8cd b040 	str.w	fp, [sp, #64]	; 0x40
  40a40a:	1afb      	subs	r3, r7, r3
  40a40c:	930d      	str	r3, [sp, #52]	; 0x34
  40a40e:	f7ff bb6f 	b.w	409af0 <_svfprintf_r+0x230>
  40a412:	9d1d      	ldr	r5, [sp, #116]	; 0x74
  40a414:	2d00      	cmp	r5, #0
  40a416:	f340 8205 	ble.w	40a824 <_svfprintf_r+0xf64>
  40a41a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
  40a41c:	9912      	ldr	r1, [sp, #72]	; 0x48
  40a41e:	428a      	cmp	r2, r1
  40a420:	4613      	mov	r3, r2
  40a422:	bfa8      	it	ge
  40a424:	460b      	movge	r3, r1
  40a426:	461d      	mov	r5, r3
  40a428:	9910      	ldr	r1, [sp, #64]	; 0x40
  40a42a:	2d00      	cmp	r5, #0
  40a42c:	eb01 0a02 	add.w	sl, r1, r2
  40a430:	dd0b      	ble.n	40a44a <_svfprintf_r+0xb8a>
  40a432:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40a434:	6021      	str	r1, [r4, #0]
  40a436:	3301      	adds	r3, #1
  40a438:	44ab      	add	fp, r5
  40a43a:	2b07      	cmp	r3, #7
  40a43c:	f8cd b094 	str.w	fp, [sp, #148]	; 0x94
  40a440:	6065      	str	r5, [r4, #4]
  40a442:	9324      	str	r3, [sp, #144]	; 0x90
  40a444:	f300 834d 	bgt.w	40aae2 <_svfprintf_r+0x1222>
  40a448:	3408      	adds	r4, #8
  40a44a:	9b12      	ldr	r3, [sp, #72]	; 0x48
  40a44c:	2d00      	cmp	r5, #0
  40a44e:	bfa8      	it	ge
  40a450:	1b5b      	subge	r3, r3, r5
  40a452:	2b00      	cmp	r3, #0
  40a454:	461d      	mov	r5, r3
  40a456:	f340 80f5 	ble.w	40a644 <_svfprintf_r+0xd84>
  40a45a:	2d10      	cmp	r5, #16
  40a45c:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40a45e:	f8df 95f4 	ldr.w	r9, [pc, #1524]	; 40aa54 <_svfprintf_r+0x1194>
  40a462:	f340 81c6 	ble.w	40a7f2 <_svfprintf_r+0xf32>
  40a466:	465a      	mov	r2, fp
  40a468:	f04f 0810 	mov.w	r8, #16
  40a46c:	f8dd b020 	ldr.w	fp, [sp, #32]
  40a470:	e004      	b.n	40a47c <_svfprintf_r+0xbbc>
  40a472:	3408      	adds	r4, #8
  40a474:	3d10      	subs	r5, #16
  40a476:	2d10      	cmp	r5, #16
  40a478:	f340 81ba 	ble.w	40a7f0 <_svfprintf_r+0xf30>
  40a47c:	3301      	adds	r3, #1
  40a47e:	3210      	adds	r2, #16
  40a480:	2b07      	cmp	r3, #7
  40a482:	9225      	str	r2, [sp, #148]	; 0x94
  40a484:	9324      	str	r3, [sp, #144]	; 0x90
  40a486:	f8c4 9000 	str.w	r9, [r4]
  40a48a:	f8c4 8004 	str.w	r8, [r4, #4]
  40a48e:	ddf0      	ble.n	40a472 <_svfprintf_r+0xbb2>
  40a490:	4658      	mov	r0, fp
  40a492:	4631      	mov	r1, r6
  40a494:	aa23      	add	r2, sp, #140	; 0x8c
  40a496:	f004 f9cd 	bl	40e834 <__ssprint_r>
  40a49a:	2800      	cmp	r0, #0
  40a49c:	f47f aad6 	bne.w	409a4c <_svfprintf_r+0x18c>
  40a4a0:	9a25      	ldr	r2, [sp, #148]	; 0x94
  40a4a2:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40a4a4:	463c      	mov	r4, r7
  40a4a6:	e7e5      	b.n	40a474 <_svfprintf_r+0xbb4>
  40a4a8:	9808      	ldr	r0, [sp, #32]
  40a4aa:	4631      	mov	r1, r6
  40a4ac:	aa23      	add	r2, sp, #140	; 0x8c
  40a4ae:	f004 f9c1 	bl	40e834 <__ssprint_r>
  40a4b2:	2800      	cmp	r0, #0
  40a4b4:	f47f aaca 	bne.w	409a4c <_svfprintf_r+0x18c>
  40a4b8:	f89d c06f 	ldrb.w	ip, [sp, #111]	; 0x6f
  40a4bc:	f8dd b094 	ldr.w	fp, [sp, #148]	; 0x94
  40a4c0:	463c      	mov	r4, r7
  40a4c2:	f7ff bb79 	b.w	409bb8 <_svfprintf_r+0x2f8>
  40a4c6:	f103 38ff 	add.w	r8, r3, #4294967295
  40a4ca:	f1b8 0f00 	cmp.w	r8, #0
  40a4ce:	f77f af2a 	ble.w	40a326 <_svfprintf_r+0xa66>
  40a4d2:	f1b8 0f10 	cmp.w	r8, #16
  40a4d6:	f8df 957c 	ldr.w	r9, [pc, #1404]	; 40aa54 <_svfprintf_r+0x1194>
  40a4da:	dd25      	ble.n	40a528 <_svfprintf_r+0xc68>
  40a4dc:	465b      	mov	r3, fp
  40a4de:	f04f 0a10 	mov.w	sl, #16
  40a4e2:	f8dd b020 	ldr.w	fp, [sp, #32]
  40a4e6:	e006      	b.n	40a4f6 <_svfprintf_r+0xc36>
  40a4e8:	f1a8 0810 	sub.w	r8, r8, #16
  40a4ec:	f1b8 0f10 	cmp.w	r8, #16
  40a4f0:	f104 0408 	add.w	r4, r4, #8
  40a4f4:	dd17      	ble.n	40a526 <_svfprintf_r+0xc66>
  40a4f6:	3501      	adds	r5, #1
  40a4f8:	3310      	adds	r3, #16
  40a4fa:	2d07      	cmp	r5, #7
  40a4fc:	9325      	str	r3, [sp, #148]	; 0x94
  40a4fe:	9524      	str	r5, [sp, #144]	; 0x90
  40a500:	e884 0600 	stmia.w	r4, {r9, sl}
  40a504:	ddf0      	ble.n	40a4e8 <_svfprintf_r+0xc28>
  40a506:	4658      	mov	r0, fp
  40a508:	4631      	mov	r1, r6
  40a50a:	aa23      	add	r2, sp, #140	; 0x8c
  40a50c:	f004 f992 	bl	40e834 <__ssprint_r>
  40a510:	2800      	cmp	r0, #0
  40a512:	f47f aa9b 	bne.w	409a4c <_svfprintf_r+0x18c>
  40a516:	f1a8 0810 	sub.w	r8, r8, #16
  40a51a:	f1b8 0f10 	cmp.w	r8, #16
  40a51e:	9b25      	ldr	r3, [sp, #148]	; 0x94
  40a520:	9d24      	ldr	r5, [sp, #144]	; 0x90
  40a522:	463c      	mov	r4, r7
  40a524:	dce7      	bgt.n	40a4f6 <_svfprintf_r+0xc36>
  40a526:	469b      	mov	fp, r3
  40a528:	3501      	adds	r5, #1
  40a52a:	44c3      	add	fp, r8
  40a52c:	2d07      	cmp	r5, #7
  40a52e:	f8cd b094 	str.w	fp, [sp, #148]	; 0x94
  40a532:	9524      	str	r5, [sp, #144]	; 0x90
  40a534:	f8c4 9000 	str.w	r9, [r4]
  40a538:	f8c4 8004 	str.w	r8, [r4, #4]
  40a53c:	f77f aef2 	ble.w	40a324 <_svfprintf_r+0xa64>
  40a540:	9808      	ldr	r0, [sp, #32]
  40a542:	4631      	mov	r1, r6
  40a544:	aa23      	add	r2, sp, #140	; 0x8c
  40a546:	f004 f975 	bl	40e834 <__ssprint_r>
  40a54a:	2800      	cmp	r0, #0
  40a54c:	f47f aa7e 	bne.w	409a4c <_svfprintf_r+0x18c>
  40a550:	f8dd b094 	ldr.w	fp, [sp, #148]	; 0x94
  40a554:	9d24      	ldr	r5, [sp, #144]	; 0x90
  40a556:	463c      	mov	r4, r7
  40a558:	e6e5      	b.n	40a326 <_svfprintf_r+0xa66>
  40a55a:	4693      	mov	fp, r2
  40a55c:	3301      	adds	r3, #1
  40a55e:	44ab      	add	fp, r5
  40a560:	2b07      	cmp	r3, #7
  40a562:	f8cd b094 	str.w	fp, [sp, #148]	; 0x94
  40a566:	9324      	str	r3, [sp, #144]	; 0x90
  40a568:	f8c4 9000 	str.w	r9, [r4]
  40a56c:	6065      	str	r5, [r4, #4]
  40a56e:	f77f aba0 	ble.w	409cb2 <_svfprintf_r+0x3f2>
  40a572:	e6e4      	b.n	40a33e <_svfprintf_r+0xa7e>
  40a574:	2b30      	cmp	r3, #48	; 0x30
  40a576:	9b10      	ldr	r3, [sp, #64]	; 0x40
  40a578:	f43f af47 	beq.w	40a40a <_svfprintf_r+0xb4a>
  40a57c:	3b01      	subs	r3, #1
  40a57e:	461a      	mov	r2, r3
  40a580:	9310      	str	r3, [sp, #64]	; 0x40
  40a582:	1aba      	subs	r2, r7, r2
  40a584:	2330      	movs	r3, #48	; 0x30
  40a586:	920d      	str	r2, [sp, #52]	; 0x34
  40a588:	f801 3c01 	strb.w	r3, [r1, #-1]
  40a58c:	f7ff bab0 	b.w	409af0 <_svfprintf_r+0x230>
  40a590:	46bb      	mov	fp, r7
  40a592:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
  40a596:	4640      	mov	r0, r8
  40a598:	4649      	mov	r1, r9
  40a59a:	220a      	movs	r2, #10
  40a59c:	2300      	movs	r3, #0
  40a59e:	f004 fe47 	bl	40f230 <__aeabi_uldivmod>
  40a5a2:	3230      	adds	r2, #48	; 0x30
  40a5a4:	4640      	mov	r0, r8
  40a5a6:	4649      	mov	r1, r9
  40a5a8:	f80b 2d01 	strb.w	r2, [fp, #-1]!
  40a5ac:	2300      	movs	r3, #0
  40a5ae:	220a      	movs	r2, #10
  40a5b0:	f004 fe3e 	bl	40f230 <__aeabi_uldivmod>
  40a5b4:	4680      	mov	r8, r0
  40a5b6:	4689      	mov	r9, r1
  40a5b8:	ea58 0309 	orrs.w	r3, r8, r9
  40a5bc:	d1eb      	bne.n	40a596 <_svfprintf_r+0xcd6>
  40a5be:	465b      	mov	r3, fp
  40a5c0:	1afb      	subs	r3, r7, r3
  40a5c2:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
  40a5c6:	f8cd b040 	str.w	fp, [sp, #64]	; 0x40
  40a5ca:	930d      	str	r3, [sp, #52]	; 0x34
  40a5cc:	f7ff ba90 	b.w	409af0 <_svfprintf_r+0x230>
  40a5d0:	990e      	ldr	r1, [sp, #56]	; 0x38
  40a5d2:	680a      	ldr	r2, [r1, #0]
  40a5d4:	3104      	adds	r1, #4
  40a5d6:	910e      	str	r1, [sp, #56]	; 0x38
  40a5d8:	4690      	mov	r8, r2
  40a5da:	f04f 0900 	mov.w	r9, #0
  40a5de:	f7ff ba54 	b.w	409a8a <_svfprintf_r+0x1ca>
  40a5e2:	990e      	ldr	r1, [sp, #56]	; 0x38
  40a5e4:	680a      	ldr	r2, [r1, #0]
  40a5e6:	3104      	adds	r1, #4
  40a5e8:	2301      	movs	r3, #1
  40a5ea:	910e      	str	r1, [sp, #56]	; 0x38
  40a5ec:	4690      	mov	r8, r2
  40a5ee:	f04f 0900 	mov.w	r9, #0
  40a5f2:	f7ff ba4a 	b.w	409a8a <_svfprintf_r+0x1ca>
  40a5f6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  40a5f8:	6813      	ldr	r3, [r2, #0]
  40a5fa:	4698      	mov	r8, r3
  40a5fc:	ea4f 79e3 	mov.w	r9, r3, asr #31
  40a600:	4613      	mov	r3, r2
  40a602:	3304      	adds	r3, #4
  40a604:	4642      	mov	r2, r8
  40a606:	930e      	str	r3, [sp, #56]	; 0x38
  40a608:	2a00      	cmp	r2, #0
  40a60a:	464b      	mov	r3, r9
  40a60c:	f173 0300 	sbcs.w	r3, r3, #0
  40a610:	f6bf abf5 	bge.w	409dfe <_svfprintf_r+0x53e>
  40a614:	f04f 0c2d 	mov.w	ip, #45	; 0x2d
  40a618:	f1d8 0800 	rsbs	r8, r8, #0
  40a61c:	eb69 0949 	sbc.w	r9, r9, r9, lsl #1
  40a620:	f88d c06f 	strb.w	ip, [sp, #111]	; 0x6f
  40a624:	f8cd a044 	str.w	sl, [sp, #68]	; 0x44
  40a628:	2301      	movs	r3, #1
  40a62a:	f7ff ba34 	b.w	409a96 <_svfprintf_r+0x1d6>
  40a62e:	9808      	ldr	r0, [sp, #32]
  40a630:	4631      	mov	r1, r6
  40a632:	aa23      	add	r2, sp, #140	; 0x8c
  40a634:	f004 f8fe 	bl	40e834 <__ssprint_r>
  40a638:	2800      	cmp	r0, #0
  40a63a:	f47f aa07 	bne.w	409a4c <_svfprintf_r+0x18c>
  40a63e:	f8dd b094 	ldr.w	fp, [sp, #148]	; 0x94
  40a642:	463c      	mov	r4, r7
  40a644:	9a10      	ldr	r2, [sp, #64]	; 0x40
  40a646:	9912      	ldr	r1, [sp, #72]	; 0x48
  40a648:	9b1d      	ldr	r3, [sp, #116]	; 0x74
  40a64a:	440a      	add	r2, r1
  40a64c:	4690      	mov	r8, r2
  40a64e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
  40a650:	4293      	cmp	r3, r2
  40a652:	db46      	blt.n	40a6e2 <_svfprintf_r+0xe22>
  40a654:	9a07      	ldr	r2, [sp, #28]
  40a656:	07d0      	lsls	r0, r2, #31
  40a658:	d443      	bmi.n	40a6e2 <_svfprintf_r+0xe22>
  40a65a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
  40a65c:	ebc8 050a 	rsb	r5, r8, sl
  40a660:	1ad3      	subs	r3, r2, r3
  40a662:	429d      	cmp	r5, r3
  40a664:	bfa8      	it	ge
  40a666:	461d      	movge	r5, r3
  40a668:	2d00      	cmp	r5, #0
  40a66a:	dd0c      	ble.n	40a686 <_svfprintf_r+0xdc6>
  40a66c:	9a24      	ldr	r2, [sp, #144]	; 0x90
  40a66e:	f8c4 8000 	str.w	r8, [r4]
  40a672:	3201      	adds	r2, #1
  40a674:	44ab      	add	fp, r5
  40a676:	2a07      	cmp	r2, #7
  40a678:	f8cd b094 	str.w	fp, [sp, #148]	; 0x94
  40a67c:	6065      	str	r5, [r4, #4]
  40a67e:	9224      	str	r2, [sp, #144]	; 0x90
  40a680:	f300 8267 	bgt.w	40ab52 <_svfprintf_r+0x1292>
  40a684:	3408      	adds	r4, #8
  40a686:	2d00      	cmp	r5, #0
  40a688:	bfac      	ite	ge
  40a68a:	1b5d      	subge	r5, r3, r5
  40a68c:	461d      	movlt	r5, r3
  40a68e:	2d00      	cmp	r5, #0
  40a690:	f77f ab10 	ble.w	409cb4 <_svfprintf_r+0x3f4>
  40a694:	2d10      	cmp	r5, #16
  40a696:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40a698:	f8df 93b8 	ldr.w	r9, [pc, #952]	; 40aa54 <_svfprintf_r+0x1194>
  40a69c:	f77f af5e 	ble.w	40a55c <_svfprintf_r+0xc9c>
  40a6a0:	f04f 0810 	mov.w	r8, #16
  40a6a4:	465a      	mov	r2, fp
  40a6a6:	f8dd a020 	ldr.w	sl, [sp, #32]
  40a6aa:	e004      	b.n	40a6b6 <_svfprintf_r+0xdf6>
  40a6ac:	3408      	adds	r4, #8
  40a6ae:	3d10      	subs	r5, #16
  40a6b0:	2d10      	cmp	r5, #16
  40a6b2:	f77f af52 	ble.w	40a55a <_svfprintf_r+0xc9a>
  40a6b6:	3301      	adds	r3, #1
  40a6b8:	3210      	adds	r2, #16
  40a6ba:	2b07      	cmp	r3, #7
  40a6bc:	9225      	str	r2, [sp, #148]	; 0x94
  40a6be:	9324      	str	r3, [sp, #144]	; 0x90
  40a6c0:	f8c4 9000 	str.w	r9, [r4]
  40a6c4:	f8c4 8004 	str.w	r8, [r4, #4]
  40a6c8:	ddf0      	ble.n	40a6ac <_svfprintf_r+0xdec>
  40a6ca:	4650      	mov	r0, sl
  40a6cc:	4631      	mov	r1, r6
  40a6ce:	aa23      	add	r2, sp, #140	; 0x8c
  40a6d0:	f004 f8b0 	bl	40e834 <__ssprint_r>
  40a6d4:	2800      	cmp	r0, #0
  40a6d6:	f47f a9b9 	bne.w	409a4c <_svfprintf_r+0x18c>
  40a6da:	9a25      	ldr	r2, [sp, #148]	; 0x94
  40a6dc:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40a6de:	463c      	mov	r4, r7
  40a6e0:	e7e5      	b.n	40a6ae <_svfprintf_r+0xdee>
  40a6e2:	9a24      	ldr	r2, [sp, #144]	; 0x90
  40a6e4:	9818      	ldr	r0, [sp, #96]	; 0x60
  40a6e6:	9917      	ldr	r1, [sp, #92]	; 0x5c
  40a6e8:	6021      	str	r1, [r4, #0]
  40a6ea:	3201      	adds	r2, #1
  40a6ec:	4483      	add	fp, r0
  40a6ee:	2a07      	cmp	r2, #7
  40a6f0:	f8cd b094 	str.w	fp, [sp, #148]	; 0x94
  40a6f4:	6060      	str	r0, [r4, #4]
  40a6f6:	9224      	str	r2, [sp, #144]	; 0x90
  40a6f8:	f300 820a 	bgt.w	40ab10 <_svfprintf_r+0x1250>
  40a6fc:	3408      	adds	r4, #8
  40a6fe:	e7ac      	b.n	40a65a <_svfprintf_r+0xd9a>
  40a700:	9b07      	ldr	r3, [sp, #28]
  40a702:	07d9      	lsls	r1, r3, #31
  40a704:	f53f addc 	bmi.w	40a2c0 <_svfprintf_r+0xa00>
  40a708:	9b10      	ldr	r3, [sp, #64]	; 0x40
  40a70a:	6023      	str	r3, [r4, #0]
  40a70c:	3501      	adds	r5, #1
  40a70e:	f10b 0b01 	add.w	fp, fp, #1
  40a712:	2301      	movs	r3, #1
  40a714:	2d07      	cmp	r5, #7
  40a716:	f8cd b094 	str.w	fp, [sp, #148]	; 0x94
  40a71a:	9524      	str	r5, [sp, #144]	; 0x90
  40a71c:	6063      	str	r3, [r4, #4]
  40a71e:	f77f ae01 	ble.w	40a324 <_svfprintf_r+0xa64>
  40a722:	e70d      	b.n	40a540 <_svfprintf_r+0xc80>
  40a724:	9808      	ldr	r0, [sp, #32]
  40a726:	4631      	mov	r1, r6
  40a728:	aa23      	add	r2, sp, #140	; 0x8c
  40a72a:	f004 f883 	bl	40e834 <__ssprint_r>
  40a72e:	2800      	cmp	r0, #0
  40a730:	f47f a98c 	bne.w	409a4c <_svfprintf_r+0x18c>
  40a734:	9b25      	ldr	r3, [sp, #148]	; 0x94
  40a736:	9d24      	ldr	r5, [sp, #144]	; 0x90
  40a738:	463c      	mov	r4, r7
  40a73a:	e5ce      	b.n	40a2da <_svfprintf_r+0xa1a>
  40a73c:	9808      	ldr	r0, [sp, #32]
  40a73e:	4631      	mov	r1, r6
  40a740:	aa23      	add	r2, sp, #140	; 0x8c
  40a742:	f004 f877 	bl	40e834 <__ssprint_r>
  40a746:	2800      	cmp	r0, #0
  40a748:	f47f a980 	bne.w	409a4c <_svfprintf_r+0x18c>
  40a74c:	f8dd b094 	ldr.w	fp, [sp, #148]	; 0x94
  40a750:	9d24      	ldr	r5, [sp, #144]	; 0x90
  40a752:	463c      	mov	r4, r7
  40a754:	e5cf      	b.n	40a2f6 <_svfprintf_r+0xa36>
  40a756:	9808      	ldr	r0, [sp, #32]
  40a758:	4631      	mov	r1, r6
  40a75a:	aa23      	add	r2, sp, #140	; 0x8c
  40a75c:	f004 f86a 	bl	40e834 <__ssprint_r>
  40a760:	2800      	cmp	r0, #0
  40a762:	f47f a973 	bne.w	409a4c <_svfprintf_r+0x18c>
  40a766:	f8dd b094 	ldr.w	fp, [sp, #148]	; 0x94
  40a76a:	463c      	mov	r4, r7
  40a76c:	f7ff ba4c 	b.w	409c08 <_svfprintf_r+0x348>
  40a770:	f004 f834 	bl	40e7dc <__fpclassifyd>
  40a774:	2800      	cmp	r0, #0
  40a776:	f040 80c7 	bne.w	40a908 <_svfprintf_r+0x1048>
  40a77a:	4686      	mov	lr, r0
  40a77c:	4ab2      	ldr	r2, [pc, #712]	; (40aa48 <_svfprintf_r+0x1188>)
  40a77e:	4bb3      	ldr	r3, [pc, #716]	; (40aa4c <_svfprintf_r+0x118c>)
  40a780:	9011      	str	r0, [sp, #68]	; 0x44
  40a782:	9807      	ldr	r0, [sp, #28]
  40a784:	f89d c06f 	ldrb.w	ip, [sp, #111]	; 0x6f
  40a788:	f8cd e048 	str.w	lr, [sp, #72]	; 0x48
  40a78c:	2103      	movs	r1, #3
  40a78e:	f020 0080 	bic.w	r0, r0, #128	; 0x80
  40a792:	2d47      	cmp	r5, #71	; 0x47
  40a794:	bfd8      	it	le
  40a796:	461a      	movle	r2, r3
  40a798:	9109      	str	r1, [sp, #36]	; 0x24
  40a79a:	9007      	str	r0, [sp, #28]
  40a79c:	9210      	str	r2, [sp, #64]	; 0x40
  40a79e:	910d      	str	r1, [sp, #52]	; 0x34
  40a7a0:	f7ff b9ae 	b.w	409b00 <_svfprintf_r+0x240>
  40a7a4:	9b07      	ldr	r3, [sp, #28]
  40a7a6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  40a7a8:	f013 0f40 	tst.w	r3, #64	; 0x40
  40a7ac:	4613      	mov	r3, r2
  40a7ae:	f43f ac2e 	beq.w	40a00e <_svfprintf_r+0x74e>
  40a7b2:	3304      	adds	r3, #4
  40a7b4:	f8b2 8000 	ldrh.w	r8, [r2]
  40a7b8:	930e      	str	r3, [sp, #56]	; 0x38
  40a7ba:	f04f 0900 	mov.w	r9, #0
  40a7be:	f7ff bb37 	b.w	409e30 <_svfprintf_r+0x570>
  40a7c2:	9b07      	ldr	r3, [sp, #28]
  40a7c4:	06db      	lsls	r3, r3, #27
  40a7c6:	d40b      	bmi.n	40a7e0 <_svfprintf_r+0xf20>
  40a7c8:	9b07      	ldr	r3, [sp, #28]
  40a7ca:	065d      	lsls	r5, r3, #25
  40a7cc:	d508      	bpl.n	40a7e0 <_svfprintf_r+0xf20>
  40a7ce:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  40a7d0:	6813      	ldr	r3, [r2, #0]
  40a7d2:	3204      	adds	r2, #4
  40a7d4:	920e      	str	r2, [sp, #56]	; 0x38
  40a7d6:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
  40a7da:	801a      	strh	r2, [r3, #0]
  40a7dc:	f7ff b895 	b.w	40990a <_svfprintf_r+0x4a>
  40a7e0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  40a7e2:	6813      	ldr	r3, [r2, #0]
  40a7e4:	3204      	adds	r2, #4
  40a7e6:	920e      	str	r2, [sp, #56]	; 0x38
  40a7e8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  40a7ea:	601a      	str	r2, [r3, #0]
  40a7ec:	f7ff b88d 	b.w	40990a <_svfprintf_r+0x4a>
  40a7f0:	4693      	mov	fp, r2
  40a7f2:	3301      	adds	r3, #1
  40a7f4:	44ab      	add	fp, r5
  40a7f6:	2b07      	cmp	r3, #7
  40a7f8:	f8cd b094 	str.w	fp, [sp, #148]	; 0x94
  40a7fc:	9324      	str	r3, [sp, #144]	; 0x90
  40a7fe:	f8c4 9000 	str.w	r9, [r4]
  40a802:	6065      	str	r5, [r4, #4]
  40a804:	f73f af13 	bgt.w	40a62e <_svfprintf_r+0xd6e>
  40a808:	3408      	adds	r4, #8
  40a80a:	e71b      	b.n	40a644 <_svfprintf_r+0xd84>
  40a80c:	9808      	ldr	r0, [sp, #32]
  40a80e:	4631      	mov	r1, r6
  40a810:	aa23      	add	r2, sp, #140	; 0x8c
  40a812:	f004 f80f 	bl	40e834 <__ssprint_r>
  40a816:	2800      	cmp	r0, #0
  40a818:	f47f a918 	bne.w	409a4c <_svfprintf_r+0x18c>
  40a81c:	f8dd b094 	ldr.w	fp, [sp, #148]	; 0x94
  40a820:	463c      	mov	r4, r7
  40a822:	e4c0      	b.n	40a1a6 <_svfprintf_r+0x8e6>
  40a824:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40a826:	4a8a      	ldr	r2, [pc, #552]	; (40aa50 <_svfprintf_r+0x1190>)
  40a828:	6022      	str	r2, [r4, #0]
  40a82a:	3301      	adds	r3, #1
  40a82c:	f10b 0b01 	add.w	fp, fp, #1
  40a830:	2201      	movs	r2, #1
  40a832:	2b07      	cmp	r3, #7
  40a834:	f8cd b094 	str.w	fp, [sp, #148]	; 0x94
  40a838:	9324      	str	r3, [sp, #144]	; 0x90
  40a83a:	6062      	str	r2, [r4, #4]
  40a83c:	f300 80f4 	bgt.w	40aa28 <_svfprintf_r+0x1168>
  40a840:	3408      	adds	r4, #8
  40a842:	b92d      	cbnz	r5, 40a850 <_svfprintf_r+0xf90>
  40a844:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  40a846:	b91b      	cbnz	r3, 40a850 <_svfprintf_r+0xf90>
  40a848:	9b07      	ldr	r3, [sp, #28]
  40a84a:	07db      	lsls	r3, r3, #31
  40a84c:	f57f aa32 	bpl.w	409cb4 <_svfprintf_r+0x3f4>
  40a850:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40a852:	9818      	ldr	r0, [sp, #96]	; 0x60
  40a854:	9a17      	ldr	r2, [sp, #92]	; 0x5c
  40a856:	6022      	str	r2, [r4, #0]
  40a858:	3301      	adds	r3, #1
  40a85a:	eb0b 0100 	add.w	r1, fp, r0
  40a85e:	2b07      	cmp	r3, #7
  40a860:	9125      	str	r1, [sp, #148]	; 0x94
  40a862:	6060      	str	r0, [r4, #4]
  40a864:	9324      	str	r3, [sp, #144]	; 0x90
  40a866:	f300 81f3 	bgt.w	40ac50 <_svfprintf_r+0x1390>
  40a86a:	f104 0208 	add.w	r2, r4, #8
  40a86e:	426d      	negs	r5, r5
  40a870:	2d00      	cmp	r5, #0
  40a872:	f340 80fc 	ble.w	40aa6e <_svfprintf_r+0x11ae>
  40a876:	2d10      	cmp	r5, #16
  40a878:	f8df 91d8 	ldr.w	r9, [pc, #472]	; 40aa54 <_svfprintf_r+0x1194>
  40a87c:	f340 813d 	ble.w	40aafa <_svfprintf_r+0x123a>
  40a880:	2410      	movs	r4, #16
  40a882:	f8dd 8020 	ldr.w	r8, [sp, #32]
  40a886:	e004      	b.n	40a892 <_svfprintf_r+0xfd2>
  40a888:	3208      	adds	r2, #8
  40a88a:	3d10      	subs	r5, #16
  40a88c:	2d10      	cmp	r5, #16
  40a88e:	f340 8134 	ble.w	40aafa <_svfprintf_r+0x123a>
  40a892:	3301      	adds	r3, #1
  40a894:	3110      	adds	r1, #16
  40a896:	2b07      	cmp	r3, #7
  40a898:	9125      	str	r1, [sp, #148]	; 0x94
  40a89a:	9324      	str	r3, [sp, #144]	; 0x90
  40a89c:	f8c2 9000 	str.w	r9, [r2]
  40a8a0:	6054      	str	r4, [r2, #4]
  40a8a2:	ddf1      	ble.n	40a888 <_svfprintf_r+0xfc8>
  40a8a4:	4640      	mov	r0, r8
  40a8a6:	4631      	mov	r1, r6
  40a8a8:	aa23      	add	r2, sp, #140	; 0x8c
  40a8aa:	f003 ffc3 	bl	40e834 <__ssprint_r>
  40a8ae:	2800      	cmp	r0, #0
  40a8b0:	f47f a8cc 	bne.w	409a4c <_svfprintf_r+0x18c>
  40a8b4:	9925      	ldr	r1, [sp, #148]	; 0x94
  40a8b6:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40a8b8:	463a      	mov	r2, r7
  40a8ba:	e7e6      	b.n	40a88a <_svfprintf_r+0xfca>
  40a8bc:	9b25      	ldr	r3, [sp, #148]	; 0x94
  40a8be:	46b1      	mov	r9, r6
  40a8c0:	2b00      	cmp	r3, #0
  40a8c2:	f43f a8c4 	beq.w	409a4e <_svfprintf_r+0x18e>
  40a8c6:	9808      	ldr	r0, [sp, #32]
  40a8c8:	4631      	mov	r1, r6
  40a8ca:	aa23      	add	r2, sp, #140	; 0x8c
  40a8cc:	f003 ffb2 	bl	40e834 <__ssprint_r>
  40a8d0:	f7ff b8bd 	b.w	409a4e <_svfprintf_r+0x18e>
  40a8d4:	980c      	ldr	r0, [sp, #48]	; 0x30
  40a8d6:	910e      	str	r1, [sp, #56]	; 0x38
  40a8d8:	4240      	negs	r0, r0
  40a8da:	900c      	str	r0, [sp, #48]	; 0x30
  40a8dc:	4619      	mov	r1, r3
  40a8de:	f7ff ba3f 	b.w	409d60 <_svfprintf_r+0x4a0>
  40a8e2:	f041 0120 	orr.w	r1, r1, #32
  40a8e6:	9107      	str	r1, [sp, #28]
  40a8e8:	785d      	ldrb	r5, [r3, #1]
  40a8ea:	1c59      	adds	r1, r3, #1
  40a8ec:	f7ff b83b 	b.w	409966 <_svfprintf_r+0xa6>
  40a8f0:	9808      	ldr	r0, [sp, #32]
  40a8f2:	4631      	mov	r1, r6
  40a8f4:	aa23      	add	r2, sp, #140	; 0x8c
  40a8f6:	f003 ff9d 	bl	40e834 <__ssprint_r>
  40a8fa:	2800      	cmp	r0, #0
  40a8fc:	f47f a8a6 	bne.w	409a4c <_svfprintf_r+0x18c>
  40a900:	f8dd b094 	ldr.w	fp, [sp, #148]	; 0x94
  40a904:	463c      	mov	r4, r7
  40a906:	e464      	b.n	40a1d2 <_svfprintf_r+0x912>
  40a908:	f025 0320 	bic.w	r3, r5, #32
  40a90c:	f1ba 3fff 	cmp.w	sl, #4294967295
  40a910:	930d      	str	r3, [sp, #52]	; 0x34
  40a912:	f000 8096 	beq.w	40aa42 <_svfprintf_r+0x1182>
  40a916:	2b47      	cmp	r3, #71	; 0x47
  40a918:	d105      	bne.n	40a926 <_svfprintf_r+0x1066>
  40a91a:	f1ba 0f00 	cmp.w	sl, #0
  40a91e:	bf14      	ite	ne
  40a920:	46d3      	movne	fp, sl
  40a922:	f04f 0b01 	moveq.w	fp, #1
  40a926:	9b07      	ldr	r3, [sp, #28]
  40a928:	f443 7380 	orr.w	r3, r3, #256	; 0x100
  40a92c:	9311      	str	r3, [sp, #68]	; 0x44
  40a92e:	9b15      	ldr	r3, [sp, #84]	; 0x54
  40a930:	f1b3 0a00 	subs.w	sl, r3, #0
  40a934:	9b14      	ldr	r3, [sp, #80]	; 0x50
  40a936:	9309      	str	r3, [sp, #36]	; 0x24
  40a938:	bfbb      	ittet	lt
  40a93a:	4653      	movlt	r3, sl
  40a93c:	f103 4a00 	addlt.w	sl, r3, #2147483648	; 0x80000000
  40a940:	2300      	movge	r3, #0
  40a942:	232d      	movlt	r3, #45	; 0x2d
  40a944:	2d66      	cmp	r5, #102	; 0x66
  40a946:	930f      	str	r3, [sp, #60]	; 0x3c
  40a948:	f000 80ac 	beq.w	40aaa4 <_svfprintf_r+0x11e4>
  40a94c:	2d46      	cmp	r5, #70	; 0x46
  40a94e:	f000 80a9 	beq.w	40aaa4 <_svfprintf_r+0x11e4>
  40a952:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  40a954:	9a09      	ldr	r2, [sp, #36]	; 0x24
  40a956:	2b45      	cmp	r3, #69	; 0x45
  40a958:	bf0c      	ite	eq
  40a95a:	f10b 0901 	addeq.w	r9, fp, #1
  40a95e:	46d9      	movne	r9, fp
  40a960:	2002      	movs	r0, #2
  40a962:	a91d      	add	r1, sp, #116	; 0x74
  40a964:	e88d 0201 	stmia.w	sp, {r0, r9}
  40a968:	9102      	str	r1, [sp, #8]
  40a96a:	a81e      	add	r0, sp, #120	; 0x78
  40a96c:	a921      	add	r1, sp, #132	; 0x84
  40a96e:	9003      	str	r0, [sp, #12]
  40a970:	4653      	mov	r3, sl
  40a972:	9104      	str	r1, [sp, #16]
  40a974:	9808      	ldr	r0, [sp, #32]
  40a976:	f002 fc2b 	bl	40d1d0 <_dtoa_r>
  40a97a:	2d67      	cmp	r5, #103	; 0x67
  40a97c:	9010      	str	r0, [sp, #64]	; 0x40
  40a97e:	d002      	beq.n	40a986 <_svfprintf_r+0x10c6>
  40a980:	2d47      	cmp	r5, #71	; 0x47
  40a982:	f040 809f 	bne.w	40aac4 <_svfprintf_r+0x1204>
  40a986:	9b07      	ldr	r3, [sp, #28]
  40a988:	07db      	lsls	r3, r3, #31
  40a98a:	f140 8189 	bpl.w	40aca0 <_svfprintf_r+0x13e0>
  40a98e:	9b10      	ldr	r3, [sp, #64]	; 0x40
  40a990:	eb03 0809 	add.w	r8, r3, r9
  40a994:	9809      	ldr	r0, [sp, #36]	; 0x24
  40a996:	4651      	mov	r1, sl
  40a998:	2200      	movs	r2, #0
  40a99a:	2300      	movs	r3, #0
  40a99c:	f7fc f9ec 	bl	406d78 <__aeabi_dcmpeq>
  40a9a0:	2800      	cmp	r0, #0
  40a9a2:	f040 80fd 	bne.w	40aba0 <_svfprintf_r+0x12e0>
  40a9a6:	9b21      	ldr	r3, [sp, #132]	; 0x84
  40a9a8:	4598      	cmp	r8, r3
  40a9aa:	d906      	bls.n	40a9ba <_svfprintf_r+0x10fa>
  40a9ac:	2130      	movs	r1, #48	; 0x30
  40a9ae:	1c5a      	adds	r2, r3, #1
  40a9b0:	9221      	str	r2, [sp, #132]	; 0x84
  40a9b2:	7019      	strb	r1, [r3, #0]
  40a9b4:	9b21      	ldr	r3, [sp, #132]	; 0x84
  40a9b6:	4598      	cmp	r8, r3
  40a9b8:	d8f9      	bhi.n	40a9ae <_svfprintf_r+0x10ee>
  40a9ba:	9a10      	ldr	r2, [sp, #64]	; 0x40
  40a9bc:	1a9b      	subs	r3, r3, r2
  40a9be:	9313      	str	r3, [sp, #76]	; 0x4c
  40a9c0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  40a9c2:	2b47      	cmp	r3, #71	; 0x47
  40a9c4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
  40a9c6:	f000 80de 	beq.w	40ab86 <_svfprintf_r+0x12c6>
  40a9ca:	2d65      	cmp	r5, #101	; 0x65
  40a9cc:	f340 80f8 	ble.w	40abc0 <_svfprintf_r+0x1300>
  40a9d0:	2d66      	cmp	r5, #102	; 0x66
  40a9d2:	9312      	str	r3, [sp, #72]	; 0x48
  40a9d4:	f000 8157 	beq.w	40ac86 <_svfprintf_r+0x13c6>
  40a9d8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  40a9da:	9a12      	ldr	r2, [sp, #72]	; 0x48
  40a9dc:	4293      	cmp	r3, r2
  40a9de:	f300 8144 	bgt.w	40ac6a <_svfprintf_r+0x13aa>
  40a9e2:	9b07      	ldr	r3, [sp, #28]
  40a9e4:	07d9      	lsls	r1, r3, #31
  40a9e6:	f100 8173 	bmi.w	40acd0 <_svfprintf_r+0x1410>
  40a9ea:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
  40a9ee:	920d      	str	r2, [sp, #52]	; 0x34
  40a9f0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  40a9f2:	2a00      	cmp	r2, #0
  40a9f4:	f040 80bc 	bne.w	40ab70 <_svfprintf_r+0x12b0>
  40a9f8:	9309      	str	r3, [sp, #36]	; 0x24
  40a9fa:	9b11      	ldr	r3, [sp, #68]	; 0x44
  40a9fc:	9307      	str	r3, [sp, #28]
  40a9fe:	9211      	str	r2, [sp, #68]	; 0x44
  40aa00:	f89d c06f 	ldrb.w	ip, [sp, #111]	; 0x6f
  40aa04:	f7ff b87c 	b.w	409b00 <_svfprintf_r+0x240>
  40aa08:	9808      	ldr	r0, [sp, #32]
  40aa0a:	2140      	movs	r1, #64	; 0x40
  40aa0c:	f7fd ff5e 	bl	4088cc <_malloc_r>
  40aa10:	f8c9 0000 	str.w	r0, [r9]
  40aa14:	f8c9 0010 	str.w	r0, [r9, #16]
  40aa18:	2800      	cmp	r0, #0
  40aa1a:	f000 818c 	beq.w	40ad36 <_svfprintf_r+0x1476>
  40aa1e:	2340      	movs	r3, #64	; 0x40
  40aa20:	f8c9 3014 	str.w	r3, [r9, #20]
  40aa24:	f7fe bf64 	b.w	4098f0 <_svfprintf_r+0x30>
  40aa28:	9808      	ldr	r0, [sp, #32]
  40aa2a:	4631      	mov	r1, r6
  40aa2c:	aa23      	add	r2, sp, #140	; 0x8c
  40aa2e:	f003 ff01 	bl	40e834 <__ssprint_r>
  40aa32:	2800      	cmp	r0, #0
  40aa34:	f47f a80a 	bne.w	409a4c <_svfprintf_r+0x18c>
  40aa38:	9d1d      	ldr	r5, [sp, #116]	; 0x74
  40aa3a:	f8dd b094 	ldr.w	fp, [sp, #148]	; 0x94
  40aa3e:	463c      	mov	r4, r7
  40aa40:	e6ff      	b.n	40a842 <_svfprintf_r+0xf82>
  40aa42:	f04f 0b06 	mov.w	fp, #6
  40aa46:	e76e      	b.n	40a926 <_svfprintf_r+0x1066>
  40aa48:	00411bc4 	.word	0x00411bc4
  40aa4c:	00411bc0 	.word	0x00411bc0
  40aa50:	004119f8 	.word	0x004119f8
  40aa54:	00411b98 	.word	0x00411b98
  40aa58:	9808      	ldr	r0, [sp, #32]
  40aa5a:	4631      	mov	r1, r6
  40aa5c:	aa23      	add	r2, sp, #140	; 0x8c
  40aa5e:	f003 fee9 	bl	40e834 <__ssprint_r>
  40aa62:	2800      	cmp	r0, #0
  40aa64:	f47e aff2 	bne.w	409a4c <_svfprintf_r+0x18c>
  40aa68:	9925      	ldr	r1, [sp, #148]	; 0x94
  40aa6a:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40aa6c:	463a      	mov	r2, r7
  40aa6e:	9c13      	ldr	r4, [sp, #76]	; 0x4c
  40aa70:	6054      	str	r4, [r2, #4]
  40aa72:	3301      	adds	r3, #1
  40aa74:	eb01 0b04 	add.w	fp, r1, r4
  40aa78:	2b07      	cmp	r3, #7
  40aa7a:	9910      	ldr	r1, [sp, #64]	; 0x40
  40aa7c:	f8cd b094 	str.w	fp, [sp, #148]	; 0x94
  40aa80:	9324      	str	r3, [sp, #144]	; 0x90
  40aa82:	6011      	str	r1, [r2, #0]
  40aa84:	f73f ac5b 	bgt.w	40a33e <_svfprintf_r+0xa7e>
  40aa88:	f102 0408 	add.w	r4, r2, #8
  40aa8c:	f7ff b912 	b.w	409cb4 <_svfprintf_r+0x3f4>
  40aa90:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
  40aa94:	f7fe fee6 	bl	409864 <strlen>
  40aa98:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
  40aa9c:	900d      	str	r0, [sp, #52]	; 0x34
  40aa9e:	4603      	mov	r3, r0
  40aaa0:	f7ff ba1b 	b.w	409eda <_svfprintf_r+0x61a>
  40aaa4:	2003      	movs	r0, #3
  40aaa6:	a91d      	add	r1, sp, #116	; 0x74
  40aaa8:	e88d 0801 	stmia.w	sp, {r0, fp}
  40aaac:	9102      	str	r1, [sp, #8]
  40aaae:	a81e      	add	r0, sp, #120	; 0x78
  40aab0:	a921      	add	r1, sp, #132	; 0x84
  40aab2:	9003      	str	r0, [sp, #12]
  40aab4:	9a09      	ldr	r2, [sp, #36]	; 0x24
  40aab6:	9104      	str	r1, [sp, #16]
  40aab8:	4653      	mov	r3, sl
  40aaba:	9808      	ldr	r0, [sp, #32]
  40aabc:	f002 fb88 	bl	40d1d0 <_dtoa_r>
  40aac0:	46d9      	mov	r9, fp
  40aac2:	9010      	str	r0, [sp, #64]	; 0x40
  40aac4:	9b10      	ldr	r3, [sp, #64]	; 0x40
  40aac6:	eb03 0809 	add.w	r8, r3, r9
  40aaca:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  40aacc:	2b46      	cmp	r3, #70	; 0x46
  40aace:	f47f af61 	bne.w	40a994 <_svfprintf_r+0x10d4>
  40aad2:	9b10      	ldr	r3, [sp, #64]	; 0x40
  40aad4:	781b      	ldrb	r3, [r3, #0]
  40aad6:	2b30      	cmp	r3, #48	; 0x30
  40aad8:	f000 80e4 	beq.w	40aca4 <_svfprintf_r+0x13e4>
  40aadc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
  40aade:	4498      	add	r8, r3
  40aae0:	e758      	b.n	40a994 <_svfprintf_r+0x10d4>
  40aae2:	9808      	ldr	r0, [sp, #32]
  40aae4:	4631      	mov	r1, r6
  40aae6:	aa23      	add	r2, sp, #140	; 0x8c
  40aae8:	f003 fea4 	bl	40e834 <__ssprint_r>
  40aaec:	2800      	cmp	r0, #0
  40aaee:	f47e afad 	bne.w	409a4c <_svfprintf_r+0x18c>
  40aaf2:	f8dd b094 	ldr.w	fp, [sp, #148]	; 0x94
  40aaf6:	463c      	mov	r4, r7
  40aaf8:	e4a7      	b.n	40a44a <_svfprintf_r+0xb8a>
  40aafa:	3301      	adds	r3, #1
  40aafc:	4429      	add	r1, r5
  40aafe:	2b07      	cmp	r3, #7
  40ab00:	9125      	str	r1, [sp, #148]	; 0x94
  40ab02:	9324      	str	r3, [sp, #144]	; 0x90
  40ab04:	f8c2 9000 	str.w	r9, [r2]
  40ab08:	6055      	str	r5, [r2, #4]
  40ab0a:	dca5      	bgt.n	40aa58 <_svfprintf_r+0x1198>
  40ab0c:	3208      	adds	r2, #8
  40ab0e:	e7ae      	b.n	40aa6e <_svfprintf_r+0x11ae>
  40ab10:	9808      	ldr	r0, [sp, #32]
  40ab12:	4631      	mov	r1, r6
  40ab14:	aa23      	add	r2, sp, #140	; 0x8c
  40ab16:	f003 fe8d 	bl	40e834 <__ssprint_r>
  40ab1a:	2800      	cmp	r0, #0
  40ab1c:	f47e af96 	bne.w	409a4c <_svfprintf_r+0x18c>
  40ab20:	9b1d      	ldr	r3, [sp, #116]	; 0x74
  40ab22:	f8dd b094 	ldr.w	fp, [sp, #148]	; 0x94
  40ab26:	463c      	mov	r4, r7
  40ab28:	e597      	b.n	40a65a <_svfprintf_r+0xd9a>
  40ab2a:	4653      	mov	r3, sl
  40ab2c:	2b06      	cmp	r3, #6
  40ab2e:	bf28      	it	cs
  40ab30:	2306      	movcs	r3, #6
  40ab32:	930d      	str	r3, [sp, #52]	; 0x34
  40ab34:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  40ab38:	f8dd c040 	ldr.w	ip, [sp, #64]	; 0x40
  40ab3c:	9309      	str	r3, [sp, #36]	; 0x24
  40ab3e:	4b83      	ldr	r3, [pc, #524]	; (40ad4c <_svfprintf_r+0x148c>)
  40ab40:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
  40ab44:	f8cd c044 	str.w	ip, [sp, #68]	; 0x44
  40ab48:	f8cd c048 	str.w	ip, [sp, #72]	; 0x48
  40ab4c:	9310      	str	r3, [sp, #64]	; 0x40
  40ab4e:	f7fe bfd7 	b.w	409b00 <_svfprintf_r+0x240>
  40ab52:	9808      	ldr	r0, [sp, #32]
  40ab54:	4631      	mov	r1, r6
  40ab56:	aa23      	add	r2, sp, #140	; 0x8c
  40ab58:	f003 fe6c 	bl	40e834 <__ssprint_r>
  40ab5c:	2800      	cmp	r0, #0
  40ab5e:	f47e af75 	bne.w	409a4c <_svfprintf_r+0x18c>
  40ab62:	9b1d      	ldr	r3, [sp, #116]	; 0x74
  40ab64:	9a13      	ldr	r2, [sp, #76]	; 0x4c
  40ab66:	f8dd b094 	ldr.w	fp, [sp, #148]	; 0x94
  40ab6a:	1ad3      	subs	r3, r2, r3
  40ab6c:	463c      	mov	r4, r7
  40ab6e:	e58a      	b.n	40a686 <_svfprintf_r+0xdc6>
  40ab70:	9309      	str	r3, [sp, #36]	; 0x24
  40ab72:	9b11      	ldr	r3, [sp, #68]	; 0x44
  40ab74:	9307      	str	r3, [sp, #28]
  40ab76:	f04f 0c2d 	mov.w	ip, #45	; 0x2d
  40ab7a:	2300      	movs	r3, #0
  40ab7c:	f88d c06f 	strb.w	ip, [sp, #111]	; 0x6f
  40ab80:	9311      	str	r3, [sp, #68]	; 0x44
  40ab82:	f7fe bfc0 	b.w	409b06 <_svfprintf_r+0x246>
  40ab86:	1cda      	adds	r2, r3, #3
  40ab88:	db19      	blt.n	40abbe <_svfprintf_r+0x12fe>
  40ab8a:	459b      	cmp	fp, r3
  40ab8c:	db17      	blt.n	40abbe <_svfprintf_r+0x12fe>
  40ab8e:	9312      	str	r3, [sp, #72]	; 0x48
  40ab90:	2567      	movs	r5, #103	; 0x67
  40ab92:	e721      	b.n	40a9d8 <_svfprintf_r+0x1118>
  40ab94:	f04f 0c2d 	mov.w	ip, #45	; 0x2d
  40ab98:	f88d c06f 	strb.w	ip, [sp, #111]	; 0x6f
  40ab9c:	f7ff ba98 	b.w	40a0d0 <_svfprintf_r+0x810>
  40aba0:	4643      	mov	r3, r8
  40aba2:	e70a      	b.n	40a9ba <_svfprintf_r+0x10fa>
  40aba4:	ea2a 73ea 	bic.w	r3, sl, sl, asr #31
  40aba8:	9011      	str	r0, [sp, #68]	; 0x44
  40abaa:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
  40abae:	9012      	str	r0, [sp, #72]	; 0x48
  40abb0:	f89d c06f 	ldrb.w	ip, [sp, #111]	; 0x6f
  40abb4:	9309      	str	r3, [sp, #36]	; 0x24
  40abb6:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
  40abba:	f7fe bfa1 	b.w	409b00 <_svfprintf_r+0x240>
  40abbe:	3d02      	subs	r5, #2
  40abc0:	3b01      	subs	r3, #1
  40abc2:	2b00      	cmp	r3, #0
  40abc4:	931d      	str	r3, [sp, #116]	; 0x74
  40abc6:	bfba      	itte	lt
  40abc8:	425b      	neglt	r3, r3
  40abca:	222d      	movlt	r2, #45	; 0x2d
  40abcc:	222b      	movge	r2, #43	; 0x2b
  40abce:	2b09      	cmp	r3, #9
  40abd0:	f88d 507c 	strb.w	r5, [sp, #124]	; 0x7c
  40abd4:	f88d 207d 	strb.w	r2, [sp, #125]	; 0x7d
  40abd8:	dd72      	ble.n	40acc0 <_svfprintf_r+0x1400>
  40abda:	f10d 0e8b 	add.w	lr, sp, #139	; 0x8b
  40abde:	4670      	mov	r0, lr
  40abe0:	4a5b      	ldr	r2, [pc, #364]	; (40ad50 <_svfprintf_r+0x1490>)
  40abe2:	fb82 2103 	smull	r2, r1, r2, r3
  40abe6:	17da      	asrs	r2, r3, #31
  40abe8:	ebc2 02a1 	rsb	r2, r2, r1, asr #2
  40abec:	eb02 0182 	add.w	r1, r2, r2, lsl #2
  40abf0:	eba3 0341 	sub.w	r3, r3, r1, lsl #1
  40abf4:	f103 0130 	add.w	r1, r3, #48	; 0x30
  40abf8:	2a09      	cmp	r2, #9
  40abfa:	4613      	mov	r3, r2
  40abfc:	f800 1d01 	strb.w	r1, [r0, #-1]!
  40ac00:	dcee      	bgt.n	40abe0 <_svfprintf_r+0x1320>
  40ac02:	4602      	mov	r2, r0
  40ac04:	3330      	adds	r3, #48	; 0x30
  40ac06:	b2d9      	uxtb	r1, r3
  40ac08:	f802 1d01 	strb.w	r1, [r2, #-1]!
  40ac0c:	4596      	cmp	lr, r2
  40ac0e:	f240 8099 	bls.w	40ad44 <_svfprintf_r+0x1484>
  40ac12:	f10d 027e 	add.w	r2, sp, #126	; 0x7e
  40ac16:	4603      	mov	r3, r0
  40ac18:	e001      	b.n	40ac1e <_svfprintf_r+0x135e>
  40ac1a:	f813 1b01 	ldrb.w	r1, [r3], #1
  40ac1e:	f802 1b01 	strb.w	r1, [r2], #1
  40ac22:	4573      	cmp	r3, lr
  40ac24:	d1f9      	bne.n	40ac1a <_svfprintf_r+0x135a>
  40ac26:	ab23      	add	r3, sp, #140	; 0x8c
  40ac28:	1a1b      	subs	r3, r3, r0
  40ac2a:	f10d 027e 	add.w	r2, sp, #126	; 0x7e
  40ac2e:	4413      	add	r3, r2
  40ac30:	aa1f      	add	r2, sp, #124	; 0x7c
  40ac32:	1a9b      	subs	r3, r3, r2
  40ac34:	9a13      	ldr	r2, [sp, #76]	; 0x4c
  40ac36:	9319      	str	r3, [sp, #100]	; 0x64
  40ac38:	2a01      	cmp	r2, #1
  40ac3a:	4413      	add	r3, r2
  40ac3c:	930d      	str	r3, [sp, #52]	; 0x34
  40ac3e:	dd6b      	ble.n	40ad18 <_svfprintf_r+0x1458>
  40ac40:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  40ac42:	2200      	movs	r2, #0
  40ac44:	3301      	adds	r3, #1
  40ac46:	930d      	str	r3, [sp, #52]	; 0x34
  40ac48:	9212      	str	r2, [sp, #72]	; 0x48
  40ac4a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  40ac4e:	e6cf      	b.n	40a9f0 <_svfprintf_r+0x1130>
  40ac50:	9808      	ldr	r0, [sp, #32]
  40ac52:	4631      	mov	r1, r6
  40ac54:	aa23      	add	r2, sp, #140	; 0x8c
  40ac56:	f003 fded 	bl	40e834 <__ssprint_r>
  40ac5a:	2800      	cmp	r0, #0
  40ac5c:	f47e aef6 	bne.w	409a4c <_svfprintf_r+0x18c>
  40ac60:	9d1d      	ldr	r5, [sp, #116]	; 0x74
  40ac62:	9925      	ldr	r1, [sp, #148]	; 0x94
  40ac64:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40ac66:	463a      	mov	r2, r7
  40ac68:	e601      	b.n	40a86e <_svfprintf_r+0xfae>
  40ac6a:	9b12      	ldr	r3, [sp, #72]	; 0x48
  40ac6c:	2b00      	cmp	r3, #0
  40ac6e:	bfd8      	it	le
  40ac70:	f1c3 0802 	rsble	r8, r3, #2
  40ac74:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  40ac76:	bfc8      	it	gt
  40ac78:	f04f 0801 	movgt.w	r8, #1
  40ac7c:	4443      	add	r3, r8
  40ac7e:	930d      	str	r3, [sp, #52]	; 0x34
  40ac80:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  40ac84:	e6b4      	b.n	40a9f0 <_svfprintf_r+0x1130>
  40ac86:	2b00      	cmp	r3, #0
  40ac88:	dd30      	ble.n	40acec <_svfprintf_r+0x142c>
  40ac8a:	f1bb 0f00 	cmp.w	fp, #0
  40ac8e:	d125      	bne.n	40acdc <_svfprintf_r+0x141c>
  40ac90:	9b07      	ldr	r3, [sp, #28]
  40ac92:	07db      	lsls	r3, r3, #31
  40ac94:	d422      	bmi.n	40acdc <_svfprintf_r+0x141c>
  40ac96:	9a12      	ldr	r2, [sp, #72]	; 0x48
  40ac98:	920d      	str	r2, [sp, #52]	; 0x34
  40ac9a:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
  40ac9e:	e6a7      	b.n	40a9f0 <_svfprintf_r+0x1130>
  40aca0:	9b21      	ldr	r3, [sp, #132]	; 0x84
  40aca2:	e68a      	b.n	40a9ba <_svfprintf_r+0x10fa>
  40aca4:	9809      	ldr	r0, [sp, #36]	; 0x24
  40aca6:	4651      	mov	r1, sl
  40aca8:	2200      	movs	r2, #0
  40acaa:	2300      	movs	r3, #0
  40acac:	f7fc f864 	bl	406d78 <__aeabi_dcmpeq>
  40acb0:	2800      	cmp	r0, #0
  40acb2:	f47f af13 	bne.w	40aadc <_svfprintf_r+0x121c>
  40acb6:	f1c9 0301 	rsb	r3, r9, #1
  40acba:	931d      	str	r3, [sp, #116]	; 0x74
  40acbc:	4498      	add	r8, r3
  40acbe:	e669      	b.n	40a994 <_svfprintf_r+0x10d4>
  40acc0:	3330      	adds	r3, #48	; 0x30
  40acc2:	2230      	movs	r2, #48	; 0x30
  40acc4:	f88d 307f 	strb.w	r3, [sp, #127]	; 0x7f
  40acc8:	f88d 207e 	strb.w	r2, [sp, #126]	; 0x7e
  40accc:	ab20      	add	r3, sp, #128	; 0x80
  40acce:	e7af      	b.n	40ac30 <_svfprintf_r+0x1370>
  40acd0:	9b12      	ldr	r3, [sp, #72]	; 0x48
  40acd2:	3301      	adds	r3, #1
  40acd4:	930d      	str	r3, [sp, #52]	; 0x34
  40acd6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  40acda:	e689      	b.n	40a9f0 <_svfprintf_r+0x1130>
  40acdc:	9b12      	ldr	r3, [sp, #72]	; 0x48
  40acde:	f10b 0801 	add.w	r8, fp, #1
  40ace2:	4443      	add	r3, r8
  40ace4:	930d      	str	r3, [sp, #52]	; 0x34
  40ace6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  40acea:	e681      	b.n	40a9f0 <_svfprintf_r+0x1130>
  40acec:	f1bb 0f00 	cmp.w	fp, #0
  40acf0:	d11b      	bne.n	40ad2a <_svfprintf_r+0x146a>
  40acf2:	9b07      	ldr	r3, [sp, #28]
  40acf4:	07d8      	lsls	r0, r3, #31
  40acf6:	d418      	bmi.n	40ad2a <_svfprintf_r+0x146a>
  40acf8:	2301      	movs	r3, #1
  40acfa:	930d      	str	r3, [sp, #52]	; 0x34
  40acfc:	e678      	b.n	40a9f0 <_svfprintf_r+0x1130>
  40acfe:	9d0e      	ldr	r5, [sp, #56]	; 0x38
  40ad00:	f8d5 a000 	ldr.w	sl, [r5]
  40ad04:	4628      	mov	r0, r5
  40ad06:	3004      	adds	r0, #4
  40ad08:	f1ba 0f00 	cmp.w	sl, #0
  40ad0c:	785d      	ldrb	r5, [r3, #1]
  40ad0e:	900e      	str	r0, [sp, #56]	; 0x38
  40ad10:	f6be ae29 	bge.w	409966 <_svfprintf_r+0xa6>
  40ad14:	f7fe be25 	b.w	409962 <_svfprintf_r+0xa2>
  40ad18:	9b07      	ldr	r3, [sp, #28]
  40ad1a:	f013 0301 	ands.w	r3, r3, #1
  40ad1e:	d18f      	bne.n	40ac40 <_svfprintf_r+0x1380>
  40ad20:	9312      	str	r3, [sp, #72]	; 0x48
  40ad22:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  40ad24:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  40ad28:	e662      	b.n	40a9f0 <_svfprintf_r+0x1130>
  40ad2a:	f10b 0302 	add.w	r3, fp, #2
  40ad2e:	930d      	str	r3, [sp, #52]	; 0x34
  40ad30:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  40ad34:	e65c      	b.n	40a9f0 <_svfprintf_r+0x1130>
  40ad36:	9a08      	ldr	r2, [sp, #32]
  40ad38:	230c      	movs	r3, #12
  40ad3a:	6013      	str	r3, [r2, #0]
  40ad3c:	f04f 30ff 	mov.w	r0, #4294967295
  40ad40:	f7fe be8e 	b.w	409a60 <_svfprintf_r+0x1a0>
  40ad44:	f10d 037e 	add.w	r3, sp, #126	; 0x7e
  40ad48:	e772      	b.n	40ac30 <_svfprintf_r+0x1370>
  40ad4a:	bf00      	nop
  40ad4c:	00411bf0 	.word	0x00411bf0
  40ad50:	66666667 	.word	0x66666667

0040ad54 <__sprint_r.part.0>:
  40ad54:	6e4b      	ldr	r3, [r1, #100]	; 0x64
  40ad56:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  40ad5a:	049c      	lsls	r4, r3, #18
  40ad5c:	460f      	mov	r7, r1
  40ad5e:	4692      	mov	sl, r2
  40ad60:	d52b      	bpl.n	40adba <__sprint_r.part.0+0x66>
  40ad62:	6893      	ldr	r3, [r2, #8]
  40ad64:	6812      	ldr	r2, [r2, #0]
  40ad66:	b333      	cbz	r3, 40adb6 <__sprint_r.part.0+0x62>
  40ad68:	4680      	mov	r8, r0
  40ad6a:	f102 0908 	add.w	r9, r2, #8
  40ad6e:	e919 0060 	ldmdb	r9, {r5, r6}
  40ad72:	08b6      	lsrs	r6, r6, #2
  40ad74:	d017      	beq.n	40ada6 <__sprint_r.part.0+0x52>
  40ad76:	3d04      	subs	r5, #4
  40ad78:	2400      	movs	r4, #0
  40ad7a:	e001      	b.n	40ad80 <__sprint_r.part.0+0x2c>
  40ad7c:	42a6      	cmp	r6, r4
  40ad7e:	d010      	beq.n	40ada2 <__sprint_r.part.0+0x4e>
  40ad80:	4640      	mov	r0, r8
  40ad82:	f855 1f04 	ldr.w	r1, [r5, #4]!
  40ad86:	463a      	mov	r2, r7
  40ad88:	f003 f9da 	bl	40e140 <_fputwc_r>
  40ad8c:	1c43      	adds	r3, r0, #1
  40ad8e:	f104 0401 	add.w	r4, r4, #1
  40ad92:	d1f3      	bne.n	40ad7c <__sprint_r.part.0+0x28>
  40ad94:	2300      	movs	r3, #0
  40ad96:	f8ca 3008 	str.w	r3, [sl, #8]
  40ad9a:	f8ca 3004 	str.w	r3, [sl, #4]
  40ad9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40ada2:	f8da 3008 	ldr.w	r3, [sl, #8]
  40ada6:	eba3 0386 	sub.w	r3, r3, r6, lsl #2
  40adaa:	f8ca 3008 	str.w	r3, [sl, #8]
  40adae:	f109 0908 	add.w	r9, r9, #8
  40adb2:	2b00      	cmp	r3, #0
  40adb4:	d1db      	bne.n	40ad6e <__sprint_r.part.0+0x1a>
  40adb6:	2000      	movs	r0, #0
  40adb8:	e7ec      	b.n	40ad94 <__sprint_r.part.0+0x40>
  40adba:	f7fd fb15 	bl	4083e8 <__sfvwrite_r>
  40adbe:	2300      	movs	r3, #0
  40adc0:	f8ca 3008 	str.w	r3, [sl, #8]
  40adc4:	f8ca 3004 	str.w	r3, [sl, #4]
  40adc8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0040adcc <__sprint_r>:
  40adcc:	6893      	ldr	r3, [r2, #8]
  40adce:	b410      	push	{r4}
  40add0:	b11b      	cbz	r3, 40adda <__sprint_r+0xe>
  40add2:	f85d 4b04 	ldr.w	r4, [sp], #4
  40add6:	f7ff bfbd 	b.w	40ad54 <__sprint_r.part.0>
  40adda:	4618      	mov	r0, r3
  40addc:	6053      	str	r3, [r2, #4]
  40adde:	f85d 4b04 	ldr.w	r4, [sp], #4
  40ade2:	4770      	bx	lr

0040ade4 <_vfiprintf_r>:
  40ade4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40ade8:	b0ab      	sub	sp, #172	; 0xac
  40adea:	461c      	mov	r4, r3
  40adec:	9100      	str	r1, [sp, #0]
  40adee:	4693      	mov	fp, r2
  40adf0:	9304      	str	r3, [sp, #16]
  40adf2:	9001      	str	r0, [sp, #4]
  40adf4:	b118      	cbz	r0, 40adfe <_vfiprintf_r+0x1a>
  40adf6:	6b83      	ldr	r3, [r0, #56]	; 0x38
  40adf8:	2b00      	cmp	r3, #0
  40adfa:	f000 80e3 	beq.w	40afc4 <_vfiprintf_r+0x1e0>
  40adfe:	9b00      	ldr	r3, [sp, #0]
  40ae00:	8999      	ldrh	r1, [r3, #12]
  40ae02:	b28a      	uxth	r2, r1
  40ae04:	0490      	lsls	r0, r2, #18
  40ae06:	d408      	bmi.n	40ae1a <_vfiprintf_r+0x36>
  40ae08:	4618      	mov	r0, r3
  40ae0a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
  40ae0c:	f441 5200 	orr.w	r2, r1, #8192	; 0x2000
  40ae10:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  40ae14:	8182      	strh	r2, [r0, #12]
  40ae16:	6643      	str	r3, [r0, #100]	; 0x64
  40ae18:	b292      	uxth	r2, r2
  40ae1a:	0711      	lsls	r1, r2, #28
  40ae1c:	f140 80b2 	bpl.w	40af84 <_vfiprintf_r+0x1a0>
  40ae20:	9b00      	ldr	r3, [sp, #0]
  40ae22:	691b      	ldr	r3, [r3, #16]
  40ae24:	2b00      	cmp	r3, #0
  40ae26:	f000 80ad 	beq.w	40af84 <_vfiprintf_r+0x1a0>
  40ae2a:	f002 021a 	and.w	r2, r2, #26
  40ae2e:	2a0a      	cmp	r2, #10
  40ae30:	f000 80b4 	beq.w	40af9c <_vfiprintf_r+0x1b8>
  40ae34:	2300      	movs	r3, #0
  40ae36:	f10d 0a68 	add.w	sl, sp, #104	; 0x68
  40ae3a:	9309      	str	r3, [sp, #36]	; 0x24
  40ae3c:	930f      	str	r3, [sp, #60]	; 0x3c
  40ae3e:	930e      	str	r3, [sp, #56]	; 0x38
  40ae40:	9302      	str	r3, [sp, #8]
  40ae42:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
  40ae46:	4654      	mov	r4, sl
  40ae48:	f89b 3000 	ldrb.w	r3, [fp]
  40ae4c:	2b00      	cmp	r3, #0
  40ae4e:	f000 84a3 	beq.w	40b798 <_vfiprintf_r+0x9b4>
  40ae52:	2b25      	cmp	r3, #37	; 0x25
  40ae54:	f000 84a0 	beq.w	40b798 <_vfiprintf_r+0x9b4>
  40ae58:	465a      	mov	r2, fp
  40ae5a:	e001      	b.n	40ae60 <_vfiprintf_r+0x7c>
  40ae5c:	2b25      	cmp	r3, #37	; 0x25
  40ae5e:	d003      	beq.n	40ae68 <_vfiprintf_r+0x84>
  40ae60:	f812 3f01 	ldrb.w	r3, [r2, #1]!
  40ae64:	2b00      	cmp	r3, #0
  40ae66:	d1f9      	bne.n	40ae5c <_vfiprintf_r+0x78>
  40ae68:	ebcb 0602 	rsb	r6, fp, r2
  40ae6c:	4615      	mov	r5, r2
  40ae6e:	b196      	cbz	r6, 40ae96 <_vfiprintf_r+0xb2>
  40ae70:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  40ae72:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  40ae74:	f8c4 b000 	str.w	fp, [r4]
  40ae78:	3301      	adds	r3, #1
  40ae7a:	4432      	add	r2, r6
  40ae7c:	2b07      	cmp	r3, #7
  40ae7e:	6066      	str	r6, [r4, #4]
  40ae80:	920f      	str	r2, [sp, #60]	; 0x3c
  40ae82:	930e      	str	r3, [sp, #56]	; 0x38
  40ae84:	dd79      	ble.n	40af7a <_vfiprintf_r+0x196>
  40ae86:	2a00      	cmp	r2, #0
  40ae88:	f040 84af 	bne.w	40b7ea <_vfiprintf_r+0xa06>
  40ae8c:	9b02      	ldr	r3, [sp, #8]
  40ae8e:	920e      	str	r2, [sp, #56]	; 0x38
  40ae90:	4433      	add	r3, r6
  40ae92:	4654      	mov	r4, sl
  40ae94:	9302      	str	r3, [sp, #8]
  40ae96:	782b      	ldrb	r3, [r5, #0]
  40ae98:	2b00      	cmp	r3, #0
  40ae9a:	f000 8360 	beq.w	40b55e <_vfiprintf_r+0x77a>
  40ae9e:	2100      	movs	r1, #0
  40aea0:	f04f 0300 	mov.w	r3, #0
  40aea4:	f04f 3cff 	mov.w	ip, #4294967295
  40aea8:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
  40aeac:	1c68      	adds	r0, r5, #1
  40aeae:	786b      	ldrb	r3, [r5, #1]
  40aeb0:	4688      	mov	r8, r1
  40aeb2:	460d      	mov	r5, r1
  40aeb4:	4666      	mov	r6, ip
  40aeb6:	f100 0b01 	add.w	fp, r0, #1
  40aeba:	f1a3 0220 	sub.w	r2, r3, #32
  40aebe:	2a58      	cmp	r2, #88	; 0x58
  40aec0:	f200 82ab 	bhi.w	40b41a <_vfiprintf_r+0x636>
  40aec4:	e8df f012 	tbh	[pc, r2, lsl #1]
  40aec8:	02a9029b 	.word	0x02a9029b
  40aecc:	02a302a9 	.word	0x02a302a9
  40aed0:	02a902a9 	.word	0x02a902a9
  40aed4:	02a902a9 	.word	0x02a902a9
  40aed8:	02a902a9 	.word	0x02a902a9
  40aedc:	02620255 	.word	0x02620255
  40aee0:	010d02a9 	.word	0x010d02a9
  40aee4:	02a9026e 	.word	0x02a9026e
  40aee8:	012f0129 	.word	0x012f0129
  40aeec:	012f012f 	.word	0x012f012f
  40aef0:	012f012f 	.word	0x012f012f
  40aef4:	012f012f 	.word	0x012f012f
  40aef8:	012f012f 	.word	0x012f012f
  40aefc:	02a902a9 	.word	0x02a902a9
  40af00:	02a902a9 	.word	0x02a902a9
  40af04:	02a902a9 	.word	0x02a902a9
  40af08:	02a902a9 	.word	0x02a902a9
  40af0c:	02a902a9 	.word	0x02a902a9
  40af10:	02a9013d 	.word	0x02a9013d
  40af14:	02a902a9 	.word	0x02a902a9
  40af18:	02a902a9 	.word	0x02a902a9
  40af1c:	02a902a9 	.word	0x02a902a9
  40af20:	02a902a9 	.word	0x02a902a9
  40af24:	017402a9 	.word	0x017402a9
  40af28:	02a902a9 	.word	0x02a902a9
  40af2c:	02a902a9 	.word	0x02a902a9
  40af30:	018b02a9 	.word	0x018b02a9
  40af34:	02a902a9 	.word	0x02a902a9
  40af38:	02a901a3 	.word	0x02a901a3
  40af3c:	02a902a9 	.word	0x02a902a9
  40af40:	02a902a9 	.word	0x02a902a9
  40af44:	02a902a9 	.word	0x02a902a9
  40af48:	02a902a9 	.word	0x02a902a9
  40af4c:	01c702a9 	.word	0x01c702a9
  40af50:	02a901da 	.word	0x02a901da
  40af54:	02a902a9 	.word	0x02a902a9
  40af58:	01da0123 	.word	0x01da0123
  40af5c:	02a902a9 	.word	0x02a902a9
  40af60:	02a9024c 	.word	0x02a9024c
  40af64:	0113028a 	.word	0x0113028a
  40af68:	020701f3 	.word	0x020701f3
  40af6c:	020d02a9 	.word	0x020d02a9
  40af70:	008102a9 	.word	0x008102a9
  40af74:	02a902a9 	.word	0x02a902a9
  40af78:	0233      	.short	0x0233
  40af7a:	3408      	adds	r4, #8
  40af7c:	9b02      	ldr	r3, [sp, #8]
  40af7e:	4433      	add	r3, r6
  40af80:	9302      	str	r3, [sp, #8]
  40af82:	e788      	b.n	40ae96 <_vfiprintf_r+0xb2>
  40af84:	9801      	ldr	r0, [sp, #4]
  40af86:	9900      	ldr	r1, [sp, #0]
  40af88:	f002 f808 	bl	40cf9c <__swsetup_r>
  40af8c:	b9a8      	cbnz	r0, 40afba <_vfiprintf_r+0x1d6>
  40af8e:	9b00      	ldr	r3, [sp, #0]
  40af90:	899a      	ldrh	r2, [r3, #12]
  40af92:	f002 021a 	and.w	r2, r2, #26
  40af96:	2a0a      	cmp	r2, #10
  40af98:	f47f af4c 	bne.w	40ae34 <_vfiprintf_r+0x50>
  40af9c:	9b00      	ldr	r3, [sp, #0]
  40af9e:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
  40afa2:	2b00      	cmp	r3, #0
  40afa4:	f6ff af46 	blt.w	40ae34 <_vfiprintf_r+0x50>
  40afa8:	9801      	ldr	r0, [sp, #4]
  40afaa:	9900      	ldr	r1, [sp, #0]
  40afac:	465a      	mov	r2, fp
  40afae:	4623      	mov	r3, r4
  40afb0:	f000 fd20 	bl	40b9f4 <__sbprintf>
  40afb4:	b02b      	add	sp, #172	; 0xac
  40afb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40afba:	f04f 30ff 	mov.w	r0, #4294967295
  40afbe:	b02b      	add	sp, #172	; 0xac
  40afc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40afc4:	f7fd f8a4 	bl	408110 <__sinit>
  40afc8:	e719      	b.n	40adfe <_vfiprintf_r+0x1a>
  40afca:	f018 0f20 	tst.w	r8, #32
  40afce:	9503      	str	r5, [sp, #12]
  40afd0:	46b4      	mov	ip, r6
  40afd2:	f000 810c 	beq.w	40b1ee <_vfiprintf_r+0x40a>
  40afd6:	9b04      	ldr	r3, [sp, #16]
  40afd8:	3307      	adds	r3, #7
  40afda:	f023 0307 	bic.w	r3, r3, #7
  40afde:	f103 0208 	add.w	r2, r3, #8
  40afe2:	e9d3 6700 	ldrd	r6, r7, [r3]
  40afe6:	9204      	str	r2, [sp, #16]
  40afe8:	2301      	movs	r3, #1
  40afea:	f04f 0200 	mov.w	r2, #0
  40afee:	f88d 202f 	strb.w	r2, [sp, #47]	; 0x2f
  40aff2:	46e1      	mov	r9, ip
  40aff4:	2500      	movs	r5, #0
  40aff6:	f1bc 0f00 	cmp.w	ip, #0
  40affa:	bfa8      	it	ge
  40affc:	f028 0880 	bicge.w	r8, r8, #128	; 0x80
  40b000:	ea56 0207 	orrs.w	r2, r6, r7
  40b004:	f040 80c4 	bne.w	40b190 <_vfiprintf_r+0x3ac>
  40b008:	f1bc 0f00 	cmp.w	ip, #0
  40b00c:	f000 8381 	beq.w	40b712 <_vfiprintf_r+0x92e>
  40b010:	2b01      	cmp	r3, #1
  40b012:	f000 80c5 	beq.w	40b1a0 <_vfiprintf_r+0x3bc>
  40b016:	2b02      	cmp	r3, #2
  40b018:	f000 8387 	beq.w	40b72a <_vfiprintf_r+0x946>
  40b01c:	4651      	mov	r1, sl
  40b01e:	08f2      	lsrs	r2, r6, #3
  40b020:	ea42 7247 	orr.w	r2, r2, r7, lsl #29
  40b024:	08f8      	lsrs	r0, r7, #3
  40b026:	f006 0307 	and.w	r3, r6, #7
  40b02a:	4607      	mov	r7, r0
  40b02c:	4616      	mov	r6, r2
  40b02e:	3330      	adds	r3, #48	; 0x30
  40b030:	ea56 0207 	orrs.w	r2, r6, r7
  40b034:	f801 3d01 	strb.w	r3, [r1, #-1]!
  40b038:	d1f1      	bne.n	40b01e <_vfiprintf_r+0x23a>
  40b03a:	f018 0f01 	tst.w	r8, #1
  40b03e:	9107      	str	r1, [sp, #28]
  40b040:	f040 83fc 	bne.w	40b83c <_vfiprintf_r+0xa58>
  40b044:	ebc1 090a 	rsb	r9, r1, sl
  40b048:	45e1      	cmp	r9, ip
  40b04a:	464e      	mov	r6, r9
  40b04c:	bfb8      	it	lt
  40b04e:	4666      	movlt	r6, ip
  40b050:	b105      	cbz	r5, 40b054 <_vfiprintf_r+0x270>
  40b052:	3601      	adds	r6, #1
  40b054:	f018 0302 	ands.w	r3, r8, #2
  40b058:	9305      	str	r3, [sp, #20]
  40b05a:	bf18      	it	ne
  40b05c:	3602      	addne	r6, #2
  40b05e:	f018 0384 	ands.w	r3, r8, #132	; 0x84
  40b062:	9306      	str	r3, [sp, #24]
  40b064:	f040 81fa 	bne.w	40b45c <_vfiprintf_r+0x678>
  40b068:	9b03      	ldr	r3, [sp, #12]
  40b06a:	1b9d      	subs	r5, r3, r6
  40b06c:	2d00      	cmp	r5, #0
  40b06e:	f340 81f5 	ble.w	40b45c <_vfiprintf_r+0x678>
  40b072:	2d10      	cmp	r5, #16
  40b074:	f340 848c 	ble.w	40b990 <_vfiprintf_r+0xbac>
  40b078:	f8dd e038 	ldr.w	lr, [sp, #56]	; 0x38
  40b07c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  40b07e:	4fc6      	ldr	r7, [pc, #792]	; (40b398 <_vfiprintf_r+0x5b4>)
  40b080:	4620      	mov	r0, r4
  40b082:	2310      	movs	r3, #16
  40b084:	4664      	mov	r4, ip
  40b086:	4671      	mov	r1, lr
  40b088:	4684      	mov	ip, r0
  40b08a:	e007      	b.n	40b09c <_vfiprintf_r+0x2b8>
  40b08c:	f101 0e02 	add.w	lr, r1, #2
  40b090:	f10c 0c08 	add.w	ip, ip, #8
  40b094:	4601      	mov	r1, r0
  40b096:	3d10      	subs	r5, #16
  40b098:	2d10      	cmp	r5, #16
  40b09a:	dd13      	ble.n	40b0c4 <_vfiprintf_r+0x2e0>
  40b09c:	1c48      	adds	r0, r1, #1
  40b09e:	3210      	adds	r2, #16
  40b0a0:	2807      	cmp	r0, #7
  40b0a2:	920f      	str	r2, [sp, #60]	; 0x3c
  40b0a4:	f8cc 7000 	str.w	r7, [ip]
  40b0a8:	f8cc 3004 	str.w	r3, [ip, #4]
  40b0ac:	900e      	str	r0, [sp, #56]	; 0x38
  40b0ae:	dded      	ble.n	40b08c <_vfiprintf_r+0x2a8>
  40b0b0:	2a00      	cmp	r2, #0
  40b0b2:	f040 81c3 	bne.w	40b43c <_vfiprintf_r+0x658>
  40b0b6:	3d10      	subs	r5, #16
  40b0b8:	2d10      	cmp	r5, #16
  40b0ba:	4611      	mov	r1, r2
  40b0bc:	f04f 0e01 	mov.w	lr, #1
  40b0c0:	46d4      	mov	ip, sl
  40b0c2:	dceb      	bgt.n	40b09c <_vfiprintf_r+0x2b8>
  40b0c4:	4663      	mov	r3, ip
  40b0c6:	4671      	mov	r1, lr
  40b0c8:	46a4      	mov	ip, r4
  40b0ca:	461c      	mov	r4, r3
  40b0cc:	442a      	add	r2, r5
  40b0ce:	2907      	cmp	r1, #7
  40b0d0:	920f      	str	r2, [sp, #60]	; 0x3c
  40b0d2:	6027      	str	r7, [r4, #0]
  40b0d4:	6065      	str	r5, [r4, #4]
  40b0d6:	910e      	str	r1, [sp, #56]	; 0x38
  40b0d8:	f300 8346 	bgt.w	40b768 <_vfiprintf_r+0x984>
  40b0dc:	3408      	adds	r4, #8
  40b0de:	1c48      	adds	r0, r1, #1
  40b0e0:	e1bf      	b.n	40b462 <_vfiprintf_r+0x67e>
  40b0e2:	4658      	mov	r0, fp
  40b0e4:	f048 0804 	orr.w	r8, r8, #4
  40b0e8:	f89b 3000 	ldrb.w	r3, [fp]
  40b0ec:	e6e3      	b.n	40aeb6 <_vfiprintf_r+0xd2>
  40b0ee:	f018 0320 	ands.w	r3, r8, #32
  40b0f2:	9503      	str	r5, [sp, #12]
  40b0f4:	46b4      	mov	ip, r6
  40b0f6:	d062      	beq.n	40b1be <_vfiprintf_r+0x3da>
  40b0f8:	9b04      	ldr	r3, [sp, #16]
  40b0fa:	3307      	adds	r3, #7
  40b0fc:	f023 0307 	bic.w	r3, r3, #7
  40b100:	f103 0208 	add.w	r2, r3, #8
  40b104:	e9d3 6700 	ldrd	r6, r7, [r3]
  40b108:	9204      	str	r2, [sp, #16]
  40b10a:	2300      	movs	r3, #0
  40b10c:	e76d      	b.n	40afea <_vfiprintf_r+0x206>
  40b10e:	f048 0840 	orr.w	r8, r8, #64	; 0x40
  40b112:	f89b 3000 	ldrb.w	r3, [fp]
  40b116:	4658      	mov	r0, fp
  40b118:	e6cd      	b.n	40aeb6 <_vfiprintf_r+0xd2>
  40b11a:	f048 0880 	orr.w	r8, r8, #128	; 0x80
  40b11e:	f89b 3000 	ldrb.w	r3, [fp]
  40b122:	4658      	mov	r0, fp
  40b124:	e6c7      	b.n	40aeb6 <_vfiprintf_r+0xd2>
  40b126:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
  40b12a:	2500      	movs	r5, #0
  40b12c:	f81b 3b01 	ldrb.w	r3, [fp], #1
  40b130:	eb05 0585 	add.w	r5, r5, r5, lsl #2
  40b134:	eb02 0545 	add.w	r5, r2, r5, lsl #1
  40b138:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
  40b13c:	2a09      	cmp	r2, #9
  40b13e:	d9f5      	bls.n	40b12c <_vfiprintf_r+0x348>
  40b140:	e6bb      	b.n	40aeba <_vfiprintf_r+0xd6>
  40b142:	f048 0810 	orr.w	r8, r8, #16
  40b146:	f018 0f20 	tst.w	r8, #32
  40b14a:	9503      	str	r5, [sp, #12]
  40b14c:	46b4      	mov	ip, r6
  40b14e:	f88d 102f 	strb.w	r1, [sp, #47]	; 0x2f
  40b152:	f000 809b 	beq.w	40b28c <_vfiprintf_r+0x4a8>
  40b156:	9904      	ldr	r1, [sp, #16]
  40b158:	3107      	adds	r1, #7
  40b15a:	f021 0107 	bic.w	r1, r1, #7
  40b15e:	e9d1 2300 	ldrd	r2, r3, [r1]
  40b162:	3108      	adds	r1, #8
  40b164:	9104      	str	r1, [sp, #16]
  40b166:	4616      	mov	r6, r2
  40b168:	461f      	mov	r7, r3
  40b16a:	2a00      	cmp	r2, #0
  40b16c:	f173 0300 	sbcs.w	r3, r3, #0
  40b170:	f2c0 83a6 	blt.w	40b8c0 <_vfiprintf_r+0xadc>
  40b174:	f1bc 0f00 	cmp.w	ip, #0
  40b178:	bfa8      	it	ge
  40b17a:	f028 0880 	bicge.w	r8, r8, #128	; 0x80
  40b17e:	ea56 0207 	orrs.w	r2, r6, r7
  40b182:	f89d 502f 	ldrb.w	r5, [sp, #47]	; 0x2f
  40b186:	46e1      	mov	r9, ip
  40b188:	f04f 0301 	mov.w	r3, #1
  40b18c:	f43f af3c 	beq.w	40b008 <_vfiprintf_r+0x224>
  40b190:	2b01      	cmp	r3, #1
  40b192:	f47f af40 	bne.w	40b016 <_vfiprintf_r+0x232>
  40b196:	2f00      	cmp	r7, #0
  40b198:	bf08      	it	eq
  40b19a:	2e0a      	cmpeq	r6, #10
  40b19c:	f080 8334 	bcs.w	40b808 <_vfiprintf_r+0xa24>
  40b1a0:	ab2a      	add	r3, sp, #168	; 0xa8
  40b1a2:	3630      	adds	r6, #48	; 0x30
  40b1a4:	f803 6d41 	strb.w	r6, [r3, #-65]!
  40b1a8:	ebc3 090a 	rsb	r9, r3, sl
  40b1ac:	9307      	str	r3, [sp, #28]
  40b1ae:	e74b      	b.n	40b048 <_vfiprintf_r+0x264>
  40b1b0:	f048 0810 	orr.w	r8, r8, #16
  40b1b4:	f018 0320 	ands.w	r3, r8, #32
  40b1b8:	9503      	str	r5, [sp, #12]
  40b1ba:	46b4      	mov	ip, r6
  40b1bc:	d19c      	bne.n	40b0f8 <_vfiprintf_r+0x314>
  40b1be:	f018 0210 	ands.w	r2, r8, #16
  40b1c2:	f040 82f7 	bne.w	40b7b4 <_vfiprintf_r+0x9d0>
  40b1c6:	f018 0340 	ands.w	r3, r8, #64	; 0x40
  40b1ca:	f000 82f3 	beq.w	40b7b4 <_vfiprintf_r+0x9d0>
  40b1ce:	9904      	ldr	r1, [sp, #16]
  40b1d0:	4613      	mov	r3, r2
  40b1d2:	460a      	mov	r2, r1
  40b1d4:	3204      	adds	r2, #4
  40b1d6:	880e      	ldrh	r6, [r1, #0]
  40b1d8:	9204      	str	r2, [sp, #16]
  40b1da:	2700      	movs	r7, #0
  40b1dc:	e705      	b.n	40afea <_vfiprintf_r+0x206>
  40b1de:	f048 0810 	orr.w	r8, r8, #16
  40b1e2:	f018 0f20 	tst.w	r8, #32
  40b1e6:	9503      	str	r5, [sp, #12]
  40b1e8:	46b4      	mov	ip, r6
  40b1ea:	f47f aef4 	bne.w	40afd6 <_vfiprintf_r+0x1f2>
  40b1ee:	9a04      	ldr	r2, [sp, #16]
  40b1f0:	f018 0f10 	tst.w	r8, #16
  40b1f4:	4613      	mov	r3, r2
  40b1f6:	f040 82e4 	bne.w	40b7c2 <_vfiprintf_r+0x9de>
  40b1fa:	f018 0f40 	tst.w	r8, #64	; 0x40
  40b1fe:	f000 82e0 	beq.w	40b7c2 <_vfiprintf_r+0x9de>
  40b202:	8816      	ldrh	r6, [r2, #0]
  40b204:	3204      	adds	r2, #4
  40b206:	2700      	movs	r7, #0
  40b208:	2301      	movs	r3, #1
  40b20a:	9204      	str	r2, [sp, #16]
  40b20c:	e6ed      	b.n	40afea <_vfiprintf_r+0x206>
  40b20e:	4a63      	ldr	r2, [pc, #396]	; (40b39c <_vfiprintf_r+0x5b8>)
  40b210:	9503      	str	r5, [sp, #12]
  40b212:	f018 0f20 	tst.w	r8, #32
  40b216:	46b4      	mov	ip, r6
  40b218:	f88d 102f 	strb.w	r1, [sp, #47]	; 0x2f
  40b21c:	9209      	str	r2, [sp, #36]	; 0x24
  40b21e:	f000 8090 	beq.w	40b342 <_vfiprintf_r+0x55e>
  40b222:	9a04      	ldr	r2, [sp, #16]
  40b224:	3207      	adds	r2, #7
  40b226:	f022 0207 	bic.w	r2, r2, #7
  40b22a:	e9d2 6700 	ldrd	r6, r7, [r2]
  40b22e:	f102 0108 	add.w	r1, r2, #8
  40b232:	9104      	str	r1, [sp, #16]
  40b234:	f018 0f01 	tst.w	r8, #1
  40b238:	f000 8290 	beq.w	40b75c <_vfiprintf_r+0x978>
  40b23c:	ea56 0207 	orrs.w	r2, r6, r7
  40b240:	f000 828c 	beq.w	40b75c <_vfiprintf_r+0x978>
  40b244:	2230      	movs	r2, #48	; 0x30
  40b246:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
  40b24a:	f048 0802 	orr.w	r8, r8, #2
  40b24e:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
  40b252:	2302      	movs	r3, #2
  40b254:	e6c9      	b.n	40afea <_vfiprintf_r+0x206>
  40b256:	9a04      	ldr	r2, [sp, #16]
  40b258:	9503      	str	r5, [sp, #12]
  40b25a:	6813      	ldr	r3, [r2, #0]
  40b25c:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
  40b260:	4613      	mov	r3, r2
  40b262:	3304      	adds	r3, #4
  40b264:	2601      	movs	r6, #1
  40b266:	f04f 0100 	mov.w	r1, #0
  40b26a:	9304      	str	r3, [sp, #16]
  40b26c:	ab10      	add	r3, sp, #64	; 0x40
  40b26e:	f88d 102f 	strb.w	r1, [sp, #47]	; 0x2f
  40b272:	46b1      	mov	r9, r6
  40b274:	9307      	str	r3, [sp, #28]
  40b276:	f04f 0c00 	mov.w	ip, #0
  40b27a:	e6eb      	b.n	40b054 <_vfiprintf_r+0x270>
  40b27c:	f018 0f20 	tst.w	r8, #32
  40b280:	9503      	str	r5, [sp, #12]
  40b282:	46b4      	mov	ip, r6
  40b284:	f88d 102f 	strb.w	r1, [sp, #47]	; 0x2f
  40b288:	f47f af65 	bne.w	40b156 <_vfiprintf_r+0x372>
  40b28c:	f018 0f10 	tst.w	r8, #16
  40b290:	f040 82a2 	bne.w	40b7d8 <_vfiprintf_r+0x9f4>
  40b294:	f018 0f40 	tst.w	r8, #64	; 0x40
  40b298:	f000 829e 	beq.w	40b7d8 <_vfiprintf_r+0x9f4>
  40b29c:	9904      	ldr	r1, [sp, #16]
  40b29e:	f9b1 6000 	ldrsh.w	r6, [r1]
  40b2a2:	3104      	adds	r1, #4
  40b2a4:	17f7      	asrs	r7, r6, #31
  40b2a6:	4632      	mov	r2, r6
  40b2a8:	463b      	mov	r3, r7
  40b2aa:	9104      	str	r1, [sp, #16]
  40b2ac:	e75d      	b.n	40b16a <_vfiprintf_r+0x386>
  40b2ae:	9904      	ldr	r1, [sp, #16]
  40b2b0:	9503      	str	r5, [sp, #12]
  40b2b2:	2330      	movs	r3, #48	; 0x30
  40b2b4:	460a      	mov	r2, r1
  40b2b6:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
  40b2ba:	2378      	movs	r3, #120	; 0x78
  40b2bc:	3204      	adds	r2, #4
  40b2be:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
  40b2c2:	4b37      	ldr	r3, [pc, #220]	; (40b3a0 <_vfiprintf_r+0x5bc>)
  40b2c4:	9309      	str	r3, [sp, #36]	; 0x24
  40b2c6:	46b4      	mov	ip, r6
  40b2c8:	f048 0802 	orr.w	r8, r8, #2
  40b2cc:	680e      	ldr	r6, [r1, #0]
  40b2ce:	9204      	str	r2, [sp, #16]
  40b2d0:	2700      	movs	r7, #0
  40b2d2:	2302      	movs	r3, #2
  40b2d4:	e689      	b.n	40afea <_vfiprintf_r+0x206>
  40b2d6:	f048 0820 	orr.w	r8, r8, #32
  40b2da:	f89b 3000 	ldrb.w	r3, [fp]
  40b2de:	4658      	mov	r0, fp
  40b2e0:	e5e9      	b.n	40aeb6 <_vfiprintf_r+0xd2>
  40b2e2:	9a04      	ldr	r2, [sp, #16]
  40b2e4:	9503      	str	r5, [sp, #12]
  40b2e6:	6813      	ldr	r3, [r2, #0]
  40b2e8:	9307      	str	r3, [sp, #28]
  40b2ea:	f04f 0100 	mov.w	r1, #0
  40b2ee:	46b4      	mov	ip, r6
  40b2f0:	f88d 102f 	strb.w	r1, [sp, #47]	; 0x2f
  40b2f4:	1d16      	adds	r6, r2, #4
  40b2f6:	2b00      	cmp	r3, #0
  40b2f8:	f000 8350 	beq.w	40b99c <_vfiprintf_r+0xbb8>
  40b2fc:	f1bc 0f00 	cmp.w	ip, #0
  40b300:	f2c0 832a 	blt.w	40b958 <_vfiprintf_r+0xb74>
  40b304:	9d07      	ldr	r5, [sp, #28]
  40b306:	f8cd c010 	str.w	ip, [sp, #16]
  40b30a:	4662      	mov	r2, ip
  40b30c:	4628      	mov	r0, r5
  40b30e:	2100      	movs	r1, #0
  40b310:	f7fd fd6e 	bl	408df0 <memchr>
  40b314:	f8dd c010 	ldr.w	ip, [sp, #16]
  40b318:	2800      	cmp	r0, #0
  40b31a:	f000 8350 	beq.w	40b9be <_vfiprintf_r+0xbda>
  40b31e:	ebc5 0900 	rsb	r9, r5, r0
  40b322:	9604      	str	r6, [sp, #16]
  40b324:	f89d 502f 	ldrb.w	r5, [sp, #47]	; 0x2f
  40b328:	f04f 0c00 	mov.w	ip, #0
  40b32c:	e68c      	b.n	40b048 <_vfiprintf_r+0x264>
  40b32e:	4a1c      	ldr	r2, [pc, #112]	; (40b3a0 <_vfiprintf_r+0x5bc>)
  40b330:	9503      	str	r5, [sp, #12]
  40b332:	f018 0f20 	tst.w	r8, #32
  40b336:	46b4      	mov	ip, r6
  40b338:	9209      	str	r2, [sp, #36]	; 0x24
  40b33a:	f88d 102f 	strb.w	r1, [sp, #47]	; 0x2f
  40b33e:	f47f af70 	bne.w	40b222 <_vfiprintf_r+0x43e>
  40b342:	9904      	ldr	r1, [sp, #16]
  40b344:	f018 0f10 	tst.w	r8, #16
  40b348:	460a      	mov	r2, r1
  40b34a:	f040 8240 	bne.w	40b7ce <_vfiprintf_r+0x9ea>
  40b34e:	f018 0f40 	tst.w	r8, #64	; 0x40
  40b352:	f000 823c 	beq.w	40b7ce <_vfiprintf_r+0x9ea>
  40b356:	3204      	adds	r2, #4
  40b358:	880e      	ldrh	r6, [r1, #0]
  40b35a:	9204      	str	r2, [sp, #16]
  40b35c:	2700      	movs	r7, #0
  40b35e:	e769      	b.n	40b234 <_vfiprintf_r+0x450>
  40b360:	f89b 3000 	ldrb.w	r3, [fp]
  40b364:	2b6c      	cmp	r3, #108	; 0x6c
  40b366:	f000 82ea 	beq.w	40b93e <_vfiprintf_r+0xb5a>
  40b36a:	f048 0810 	orr.w	r8, r8, #16
  40b36e:	4658      	mov	r0, fp
  40b370:	e5a1      	b.n	40aeb6 <_vfiprintf_r+0xd2>
  40b372:	9a04      	ldr	r2, [sp, #16]
  40b374:	6815      	ldr	r5, [r2, #0]
  40b376:	4613      	mov	r3, r2
  40b378:	2d00      	cmp	r5, #0
  40b37a:	f103 0304 	add.w	r3, r3, #4
  40b37e:	f2c0 82e6 	blt.w	40b94e <_vfiprintf_r+0xb6a>
  40b382:	9304      	str	r3, [sp, #16]
  40b384:	f89b 3000 	ldrb.w	r3, [fp]
  40b388:	4658      	mov	r0, fp
  40b38a:	e594      	b.n	40aeb6 <_vfiprintf_r+0xd2>
  40b38c:	f89b 3000 	ldrb.w	r3, [fp]
  40b390:	4658      	mov	r0, fp
  40b392:	212b      	movs	r1, #43	; 0x2b
  40b394:	e58f      	b.n	40aeb6 <_vfiprintf_r+0xd2>
  40b396:	bf00      	nop
  40b398:	00411c08 	.word	0x00411c08
  40b39c:	00411bc8 	.word	0x00411bc8
  40b3a0:	00411bdc 	.word	0x00411bdc
  40b3a4:	f89b 3000 	ldrb.w	r3, [fp]
  40b3a8:	2b2a      	cmp	r3, #42	; 0x2a
  40b3aa:	f10b 0001 	add.w	r0, fp, #1
  40b3ae:	f000 830f 	beq.w	40b9d0 <_vfiprintf_r+0xbec>
  40b3b2:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
  40b3b6:	2a09      	cmp	r2, #9
  40b3b8:	4683      	mov	fp, r0
  40b3ba:	f04f 0600 	mov.w	r6, #0
  40b3be:	f63f ad7c 	bhi.w	40aeba <_vfiprintf_r+0xd6>
  40b3c2:	f81b 3b01 	ldrb.w	r3, [fp], #1
  40b3c6:	eb06 0686 	add.w	r6, r6, r6, lsl #2
  40b3ca:	eb02 0646 	add.w	r6, r2, r6, lsl #1
  40b3ce:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
  40b3d2:	2a09      	cmp	r2, #9
  40b3d4:	d9f5      	bls.n	40b3c2 <_vfiprintf_r+0x5de>
  40b3d6:	ea46 76e6 	orr.w	r6, r6, r6, asr #31
  40b3da:	e56e      	b.n	40aeba <_vfiprintf_r+0xd6>
  40b3dc:	f018 0f20 	tst.w	r8, #32
  40b3e0:	f88d 102f 	strb.w	r1, [sp, #47]	; 0x2f
  40b3e4:	f000 8283 	beq.w	40b8ee <_vfiprintf_r+0xb0a>
  40b3e8:	9a04      	ldr	r2, [sp, #16]
  40b3ea:	9902      	ldr	r1, [sp, #8]
  40b3ec:	6813      	ldr	r3, [r2, #0]
  40b3ee:	17cf      	asrs	r7, r1, #31
  40b3f0:	4608      	mov	r0, r1
  40b3f2:	3204      	adds	r2, #4
  40b3f4:	4639      	mov	r1, r7
  40b3f6:	9204      	str	r2, [sp, #16]
  40b3f8:	e9c3 0100 	strd	r0, r1, [r3]
  40b3fc:	e524      	b.n	40ae48 <_vfiprintf_r+0x64>
  40b3fe:	4658      	mov	r0, fp
  40b400:	f89b 3000 	ldrb.w	r3, [fp]
  40b404:	2900      	cmp	r1, #0
  40b406:	f47f ad56 	bne.w	40aeb6 <_vfiprintf_r+0xd2>
  40b40a:	2120      	movs	r1, #32
  40b40c:	e553      	b.n	40aeb6 <_vfiprintf_r+0xd2>
  40b40e:	f048 0801 	orr.w	r8, r8, #1
  40b412:	4658      	mov	r0, fp
  40b414:	f89b 3000 	ldrb.w	r3, [fp]
  40b418:	e54d      	b.n	40aeb6 <_vfiprintf_r+0xd2>
  40b41a:	9503      	str	r5, [sp, #12]
  40b41c:	f88d 102f 	strb.w	r1, [sp, #47]	; 0x2f
  40b420:	2b00      	cmp	r3, #0
  40b422:	f000 809c 	beq.w	40b55e <_vfiprintf_r+0x77a>
  40b426:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
  40b42a:	f04f 0300 	mov.w	r3, #0
  40b42e:	2601      	movs	r6, #1
  40b430:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
  40b434:	ab10      	add	r3, sp, #64	; 0x40
  40b436:	46b1      	mov	r9, r6
  40b438:	9307      	str	r3, [sp, #28]
  40b43a:	e71c      	b.n	40b276 <_vfiprintf_r+0x492>
  40b43c:	9801      	ldr	r0, [sp, #4]
  40b43e:	9900      	ldr	r1, [sp, #0]
  40b440:	9308      	str	r3, [sp, #32]
  40b442:	aa0d      	add	r2, sp, #52	; 0x34
  40b444:	f7ff fc86 	bl	40ad54 <__sprint_r.part.0>
  40b448:	2800      	cmp	r0, #0
  40b44a:	f040 808f 	bne.w	40b56c <_vfiprintf_r+0x788>
  40b44e:	990e      	ldr	r1, [sp, #56]	; 0x38
  40b450:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  40b452:	9b08      	ldr	r3, [sp, #32]
  40b454:	f101 0e01 	add.w	lr, r1, #1
  40b458:	46d4      	mov	ip, sl
  40b45a:	e61c      	b.n	40b096 <_vfiprintf_r+0x2b2>
  40b45c:	990e      	ldr	r1, [sp, #56]	; 0x38
  40b45e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  40b460:	1c48      	adds	r0, r1, #1
  40b462:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
  40b466:	b16b      	cbz	r3, 40b484 <_vfiprintf_r+0x6a0>
  40b468:	3201      	adds	r2, #1
  40b46a:	f10d 032f 	add.w	r3, sp, #47	; 0x2f
  40b46e:	2101      	movs	r1, #1
  40b470:	2807      	cmp	r0, #7
  40b472:	920f      	str	r2, [sp, #60]	; 0x3c
  40b474:	900e      	str	r0, [sp, #56]	; 0x38
  40b476:	6023      	str	r3, [r4, #0]
  40b478:	6061      	str	r1, [r4, #4]
  40b47a:	f300 8134 	bgt.w	40b6e6 <_vfiprintf_r+0x902>
  40b47e:	4601      	mov	r1, r0
  40b480:	3408      	adds	r4, #8
  40b482:	3001      	adds	r0, #1
  40b484:	9b05      	ldr	r3, [sp, #20]
  40b486:	b163      	cbz	r3, 40b4a2 <_vfiprintf_r+0x6be>
  40b488:	3202      	adds	r2, #2
  40b48a:	a90c      	add	r1, sp, #48	; 0x30
  40b48c:	2302      	movs	r3, #2
  40b48e:	2807      	cmp	r0, #7
  40b490:	920f      	str	r2, [sp, #60]	; 0x3c
  40b492:	900e      	str	r0, [sp, #56]	; 0x38
  40b494:	e884 000a 	stmia.w	r4, {r1, r3}
  40b498:	f300 8134 	bgt.w	40b704 <_vfiprintf_r+0x920>
  40b49c:	4601      	mov	r1, r0
  40b49e:	3408      	adds	r4, #8
  40b4a0:	3001      	adds	r0, #1
  40b4a2:	9b06      	ldr	r3, [sp, #24]
  40b4a4:	2b80      	cmp	r3, #128	; 0x80
  40b4a6:	f000 80d4 	beq.w	40b652 <_vfiprintf_r+0x86e>
  40b4aa:	ebc9 070c 	rsb	r7, r9, ip
  40b4ae:	2f00      	cmp	r7, #0
  40b4b0:	dd2b      	ble.n	40b50a <_vfiprintf_r+0x726>
  40b4b2:	2f10      	cmp	r7, #16
  40b4b4:	4daa      	ldr	r5, [pc, #680]	; (40b760 <_vfiprintf_r+0x97c>)
  40b4b6:	dd1f      	ble.n	40b4f8 <_vfiprintf_r+0x714>
  40b4b8:	46a6      	mov	lr, r4
  40b4ba:	2310      	movs	r3, #16
  40b4bc:	9c01      	ldr	r4, [sp, #4]
  40b4be:	e007      	b.n	40b4d0 <_vfiprintf_r+0x6ec>
  40b4c0:	f101 0c02 	add.w	ip, r1, #2
  40b4c4:	f10e 0e08 	add.w	lr, lr, #8
  40b4c8:	4601      	mov	r1, r0
  40b4ca:	3f10      	subs	r7, #16
  40b4cc:	2f10      	cmp	r7, #16
  40b4ce:	dd11      	ble.n	40b4f4 <_vfiprintf_r+0x710>
  40b4d0:	1c48      	adds	r0, r1, #1
  40b4d2:	3210      	adds	r2, #16
  40b4d4:	2807      	cmp	r0, #7
  40b4d6:	920f      	str	r2, [sp, #60]	; 0x3c
  40b4d8:	f8ce 5000 	str.w	r5, [lr]
  40b4dc:	f8ce 3004 	str.w	r3, [lr, #4]
  40b4e0:	900e      	str	r0, [sp, #56]	; 0x38
  40b4e2:	dded      	ble.n	40b4c0 <_vfiprintf_r+0x6dc>
  40b4e4:	bb6a      	cbnz	r2, 40b542 <_vfiprintf_r+0x75e>
  40b4e6:	3f10      	subs	r7, #16
  40b4e8:	2f10      	cmp	r7, #16
  40b4ea:	f04f 0c01 	mov.w	ip, #1
  40b4ee:	4611      	mov	r1, r2
  40b4f0:	46d6      	mov	lr, sl
  40b4f2:	dced      	bgt.n	40b4d0 <_vfiprintf_r+0x6ec>
  40b4f4:	4674      	mov	r4, lr
  40b4f6:	4660      	mov	r0, ip
  40b4f8:	443a      	add	r2, r7
  40b4fa:	2807      	cmp	r0, #7
  40b4fc:	920f      	str	r2, [sp, #60]	; 0x3c
  40b4fe:	e884 00a0 	stmia.w	r4, {r5, r7}
  40b502:	900e      	str	r0, [sp, #56]	; 0x38
  40b504:	dc3b      	bgt.n	40b57e <_vfiprintf_r+0x79a>
  40b506:	3408      	adds	r4, #8
  40b508:	3001      	adds	r0, #1
  40b50a:	eb02 0309 	add.w	r3, r2, r9
  40b50e:	9a07      	ldr	r2, [sp, #28]
  40b510:	930f      	str	r3, [sp, #60]	; 0x3c
  40b512:	2807      	cmp	r0, #7
  40b514:	e884 0204 	stmia.w	r4, {r2, r9}
  40b518:	900e      	str	r0, [sp, #56]	; 0x38
  40b51a:	dd3d      	ble.n	40b598 <_vfiprintf_r+0x7b4>
  40b51c:	2b00      	cmp	r3, #0
  40b51e:	f040 813e 	bne.w	40b79e <_vfiprintf_r+0x9ba>
  40b522:	f018 0f04 	tst.w	r8, #4
  40b526:	930e      	str	r3, [sp, #56]	; 0x38
  40b528:	f040 812f 	bne.w	40b78a <_vfiprintf_r+0x9a6>
  40b52c:	9b02      	ldr	r3, [sp, #8]
  40b52e:	9a03      	ldr	r2, [sp, #12]
  40b530:	4296      	cmp	r6, r2
  40b532:	bfac      	ite	ge
  40b534:	199b      	addge	r3, r3, r6
  40b536:	189b      	addlt	r3, r3, r2
  40b538:	9302      	str	r3, [sp, #8]
  40b53a:	2300      	movs	r3, #0
  40b53c:	930e      	str	r3, [sp, #56]	; 0x38
  40b53e:	4654      	mov	r4, sl
  40b540:	e482      	b.n	40ae48 <_vfiprintf_r+0x64>
  40b542:	4620      	mov	r0, r4
  40b544:	9900      	ldr	r1, [sp, #0]
  40b546:	9305      	str	r3, [sp, #20]
  40b548:	aa0d      	add	r2, sp, #52	; 0x34
  40b54a:	f7ff fc03 	bl	40ad54 <__sprint_r.part.0>
  40b54e:	b968      	cbnz	r0, 40b56c <_vfiprintf_r+0x788>
  40b550:	990e      	ldr	r1, [sp, #56]	; 0x38
  40b552:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  40b554:	9b05      	ldr	r3, [sp, #20]
  40b556:	f101 0c01 	add.w	ip, r1, #1
  40b55a:	46d6      	mov	lr, sl
  40b55c:	e7b5      	b.n	40b4ca <_vfiprintf_r+0x6e6>
  40b55e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  40b560:	b123      	cbz	r3, 40b56c <_vfiprintf_r+0x788>
  40b562:	9801      	ldr	r0, [sp, #4]
  40b564:	9900      	ldr	r1, [sp, #0]
  40b566:	aa0d      	add	r2, sp, #52	; 0x34
  40b568:	f7ff fbf4 	bl	40ad54 <__sprint_r.part.0>
  40b56c:	9b00      	ldr	r3, [sp, #0]
  40b56e:	899b      	ldrh	r3, [r3, #12]
  40b570:	065b      	lsls	r3, r3, #25
  40b572:	f53f ad22 	bmi.w	40afba <_vfiprintf_r+0x1d6>
  40b576:	9802      	ldr	r0, [sp, #8]
  40b578:	b02b      	add	sp, #172	; 0xac
  40b57a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40b57e:	2a00      	cmp	r2, #0
  40b580:	f040 8191 	bne.w	40b8a6 <_vfiprintf_r+0xac2>
  40b584:	2201      	movs	r2, #1
  40b586:	9907      	ldr	r1, [sp, #28]
  40b588:	f8cd 906c 	str.w	r9, [sp, #108]	; 0x6c
  40b58c:	464b      	mov	r3, r9
  40b58e:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
  40b592:	911a      	str	r1, [sp, #104]	; 0x68
  40b594:	920e      	str	r2, [sp, #56]	; 0x38
  40b596:	4654      	mov	r4, sl
  40b598:	f104 0208 	add.w	r2, r4, #8
  40b59c:	f018 0f04 	tst.w	r8, #4
  40b5a0:	d039      	beq.n	40b616 <_vfiprintf_r+0x832>
  40b5a2:	9903      	ldr	r1, [sp, #12]
  40b5a4:	1b8d      	subs	r5, r1, r6
  40b5a6:	2d00      	cmp	r5, #0
  40b5a8:	dd35      	ble.n	40b616 <_vfiprintf_r+0x832>
  40b5aa:	2d10      	cmp	r5, #16
  40b5ac:	f340 8202 	ble.w	40b9b4 <_vfiprintf_r+0xbd0>
  40b5b0:	980e      	ldr	r0, [sp, #56]	; 0x38
  40b5b2:	4f6c      	ldr	r7, [pc, #432]	; (40b764 <_vfiprintf_r+0x980>)
  40b5b4:	f8dd 8004 	ldr.w	r8, [sp, #4]
  40b5b8:	f8dd 9000 	ldr.w	r9, [sp]
  40b5bc:	2410      	movs	r4, #16
  40b5be:	e006      	b.n	40b5ce <_vfiprintf_r+0x7ea>
  40b5c0:	f100 0e02 	add.w	lr, r0, #2
  40b5c4:	3208      	adds	r2, #8
  40b5c6:	4608      	mov	r0, r1
  40b5c8:	3d10      	subs	r5, #16
  40b5ca:	2d10      	cmp	r5, #16
  40b5cc:	dd10      	ble.n	40b5f0 <_vfiprintf_r+0x80c>
  40b5ce:	1c41      	adds	r1, r0, #1
  40b5d0:	3310      	adds	r3, #16
  40b5d2:	2907      	cmp	r1, #7
  40b5d4:	930f      	str	r3, [sp, #60]	; 0x3c
  40b5d6:	6017      	str	r7, [r2, #0]
  40b5d8:	6054      	str	r4, [r2, #4]
  40b5da:	910e      	str	r1, [sp, #56]	; 0x38
  40b5dc:	ddf0      	ble.n	40b5c0 <_vfiprintf_r+0x7dc>
  40b5de:	2b00      	cmp	r3, #0
  40b5e0:	d12a      	bne.n	40b638 <_vfiprintf_r+0x854>
  40b5e2:	3d10      	subs	r5, #16
  40b5e4:	2d10      	cmp	r5, #16
  40b5e6:	f04f 0e01 	mov.w	lr, #1
  40b5ea:	4618      	mov	r0, r3
  40b5ec:	4652      	mov	r2, sl
  40b5ee:	dcee      	bgt.n	40b5ce <_vfiprintf_r+0x7ea>
  40b5f0:	442b      	add	r3, r5
  40b5f2:	f1be 0f07 	cmp.w	lr, #7
  40b5f6:	930f      	str	r3, [sp, #60]	; 0x3c
  40b5f8:	6017      	str	r7, [r2, #0]
  40b5fa:	6055      	str	r5, [r2, #4]
  40b5fc:	f8cd e038 	str.w	lr, [sp, #56]	; 0x38
  40b600:	dd09      	ble.n	40b616 <_vfiprintf_r+0x832>
  40b602:	2b00      	cmp	r3, #0
  40b604:	d092      	beq.n	40b52c <_vfiprintf_r+0x748>
  40b606:	9801      	ldr	r0, [sp, #4]
  40b608:	9900      	ldr	r1, [sp, #0]
  40b60a:	aa0d      	add	r2, sp, #52	; 0x34
  40b60c:	f7ff fba2 	bl	40ad54 <__sprint_r.part.0>
  40b610:	2800      	cmp	r0, #0
  40b612:	d1ab      	bne.n	40b56c <_vfiprintf_r+0x788>
  40b614:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  40b616:	9a02      	ldr	r2, [sp, #8]
  40b618:	9903      	ldr	r1, [sp, #12]
  40b61a:	428e      	cmp	r6, r1
  40b61c:	bfac      	ite	ge
  40b61e:	1992      	addge	r2, r2, r6
  40b620:	1852      	addlt	r2, r2, r1
  40b622:	9202      	str	r2, [sp, #8]
  40b624:	2b00      	cmp	r3, #0
  40b626:	d088      	beq.n	40b53a <_vfiprintf_r+0x756>
  40b628:	9801      	ldr	r0, [sp, #4]
  40b62a:	9900      	ldr	r1, [sp, #0]
  40b62c:	aa0d      	add	r2, sp, #52	; 0x34
  40b62e:	f7ff fb91 	bl	40ad54 <__sprint_r.part.0>
  40b632:	2800      	cmp	r0, #0
  40b634:	d081      	beq.n	40b53a <_vfiprintf_r+0x756>
  40b636:	e799      	b.n	40b56c <_vfiprintf_r+0x788>
  40b638:	4640      	mov	r0, r8
  40b63a:	4649      	mov	r1, r9
  40b63c:	aa0d      	add	r2, sp, #52	; 0x34
  40b63e:	f7ff fb89 	bl	40ad54 <__sprint_r.part.0>
  40b642:	2800      	cmp	r0, #0
  40b644:	d192      	bne.n	40b56c <_vfiprintf_r+0x788>
  40b646:	980e      	ldr	r0, [sp, #56]	; 0x38
  40b648:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  40b64a:	f100 0e01 	add.w	lr, r0, #1
  40b64e:	4652      	mov	r2, sl
  40b650:	e7ba      	b.n	40b5c8 <_vfiprintf_r+0x7e4>
  40b652:	9b03      	ldr	r3, [sp, #12]
  40b654:	1b9f      	subs	r7, r3, r6
  40b656:	2f00      	cmp	r7, #0
  40b658:	f77f af27 	ble.w	40b4aa <_vfiprintf_r+0x6c6>
  40b65c:	2f10      	cmp	r7, #16
  40b65e:	4d40      	ldr	r5, [pc, #256]	; (40b760 <_vfiprintf_r+0x97c>)
  40b660:	f340 81b4 	ble.w	40b9cc <_vfiprintf_r+0xbe8>
  40b664:	4620      	mov	r0, r4
  40b666:	2310      	movs	r3, #16
  40b668:	4664      	mov	r4, ip
  40b66a:	4684      	mov	ip, r0
  40b66c:	e007      	b.n	40b67e <_vfiprintf_r+0x89a>
  40b66e:	f101 0e02 	add.w	lr, r1, #2
  40b672:	f10c 0c08 	add.w	ip, ip, #8
  40b676:	4601      	mov	r1, r0
  40b678:	3f10      	subs	r7, #16
  40b67a:	2f10      	cmp	r7, #16
  40b67c:	dd11      	ble.n	40b6a2 <_vfiprintf_r+0x8be>
  40b67e:	1c48      	adds	r0, r1, #1
  40b680:	3210      	adds	r2, #16
  40b682:	2807      	cmp	r0, #7
  40b684:	920f      	str	r2, [sp, #60]	; 0x3c
  40b686:	f8cc 5000 	str.w	r5, [ip]
  40b68a:	f8cc 3004 	str.w	r3, [ip, #4]
  40b68e:	900e      	str	r0, [sp, #56]	; 0x38
  40b690:	dded      	ble.n	40b66e <_vfiprintf_r+0x88a>
  40b692:	b9c2      	cbnz	r2, 40b6c6 <_vfiprintf_r+0x8e2>
  40b694:	3f10      	subs	r7, #16
  40b696:	2f10      	cmp	r7, #16
  40b698:	f04f 0e01 	mov.w	lr, #1
  40b69c:	4611      	mov	r1, r2
  40b69e:	46d4      	mov	ip, sl
  40b6a0:	dced      	bgt.n	40b67e <_vfiprintf_r+0x89a>
  40b6a2:	4663      	mov	r3, ip
  40b6a4:	46a4      	mov	ip, r4
  40b6a6:	461c      	mov	r4, r3
  40b6a8:	443a      	add	r2, r7
  40b6aa:	f1be 0f07 	cmp.w	lr, #7
  40b6ae:	920f      	str	r2, [sp, #60]	; 0x3c
  40b6b0:	e884 00a0 	stmia.w	r4, {r5, r7}
  40b6b4:	f8cd e038 	str.w	lr, [sp, #56]	; 0x38
  40b6b8:	f300 80ef 	bgt.w	40b89a <_vfiprintf_r+0xab6>
  40b6bc:	3408      	adds	r4, #8
  40b6be:	f10e 0001 	add.w	r0, lr, #1
  40b6c2:	4671      	mov	r1, lr
  40b6c4:	e6f1      	b.n	40b4aa <_vfiprintf_r+0x6c6>
  40b6c6:	9801      	ldr	r0, [sp, #4]
  40b6c8:	9900      	ldr	r1, [sp, #0]
  40b6ca:	9305      	str	r3, [sp, #20]
  40b6cc:	aa0d      	add	r2, sp, #52	; 0x34
  40b6ce:	f7ff fb41 	bl	40ad54 <__sprint_r.part.0>
  40b6d2:	2800      	cmp	r0, #0
  40b6d4:	f47f af4a 	bne.w	40b56c <_vfiprintf_r+0x788>
  40b6d8:	990e      	ldr	r1, [sp, #56]	; 0x38
  40b6da:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  40b6dc:	9b05      	ldr	r3, [sp, #20]
  40b6de:	f101 0e01 	add.w	lr, r1, #1
  40b6e2:	46d4      	mov	ip, sl
  40b6e4:	e7c8      	b.n	40b678 <_vfiprintf_r+0x894>
  40b6e6:	2a00      	cmp	r2, #0
  40b6e8:	f040 80c6 	bne.w	40b878 <_vfiprintf_r+0xa94>
  40b6ec:	9b05      	ldr	r3, [sp, #20]
  40b6ee:	2b00      	cmp	r3, #0
  40b6f0:	f000 8086 	beq.w	40b800 <_vfiprintf_r+0xa1c>
  40b6f4:	aa0c      	add	r2, sp, #48	; 0x30
  40b6f6:	2302      	movs	r3, #2
  40b6f8:	921a      	str	r2, [sp, #104]	; 0x68
  40b6fa:	4608      	mov	r0, r1
  40b6fc:	931b      	str	r3, [sp, #108]	; 0x6c
  40b6fe:	461a      	mov	r2, r3
  40b700:	4654      	mov	r4, sl
  40b702:	e6cb      	b.n	40b49c <_vfiprintf_r+0x6b8>
  40b704:	2a00      	cmp	r2, #0
  40b706:	f040 80a6 	bne.w	40b856 <_vfiprintf_r+0xa72>
  40b70a:	2001      	movs	r0, #1
  40b70c:	4611      	mov	r1, r2
  40b70e:	4654      	mov	r4, sl
  40b710:	e6c7      	b.n	40b4a2 <_vfiprintf_r+0x6be>
  40b712:	bb03      	cbnz	r3, 40b756 <_vfiprintf_r+0x972>
  40b714:	f018 0f01 	tst.w	r8, #1
  40b718:	d01d      	beq.n	40b756 <_vfiprintf_r+0x972>
  40b71a:	ab2a      	add	r3, sp, #168	; 0xa8
  40b71c:	2230      	movs	r2, #48	; 0x30
  40b71e:	f803 2d41 	strb.w	r2, [r3, #-65]!
  40b722:	ebc3 090a 	rsb	r9, r3, sl
  40b726:	9307      	str	r3, [sp, #28]
  40b728:	e48e      	b.n	40b048 <_vfiprintf_r+0x264>
  40b72a:	9809      	ldr	r0, [sp, #36]	; 0x24
  40b72c:	46d1      	mov	r9, sl
  40b72e:	0933      	lsrs	r3, r6, #4
  40b730:	f006 010f 	and.w	r1, r6, #15
  40b734:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
  40b738:	093a      	lsrs	r2, r7, #4
  40b73a:	461e      	mov	r6, r3
  40b73c:	4617      	mov	r7, r2
  40b73e:	5c43      	ldrb	r3, [r0, r1]
  40b740:	f809 3d01 	strb.w	r3, [r9, #-1]!
  40b744:	ea56 0307 	orrs.w	r3, r6, r7
  40b748:	d1f1      	bne.n	40b72e <_vfiprintf_r+0x94a>
  40b74a:	464b      	mov	r3, r9
  40b74c:	f8cd 901c 	str.w	r9, [sp, #28]
  40b750:	ebc3 090a 	rsb	r9, r3, sl
  40b754:	e478      	b.n	40b048 <_vfiprintf_r+0x264>
  40b756:	f8cd a01c 	str.w	sl, [sp, #28]
  40b75a:	e475      	b.n	40b048 <_vfiprintf_r+0x264>
  40b75c:	2302      	movs	r3, #2
  40b75e:	e444      	b.n	40afea <_vfiprintf_r+0x206>
  40b760:	00411bf8 	.word	0x00411bf8
  40b764:	00411c08 	.word	0x00411c08
  40b768:	2a00      	cmp	r2, #0
  40b76a:	f040 80d7 	bne.w	40b91c <_vfiprintf_r+0xb38>
  40b76e:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
  40b772:	2b00      	cmp	r3, #0
  40b774:	f000 80ae 	beq.w	40b8d4 <_vfiprintf_r+0xaf0>
  40b778:	2301      	movs	r3, #1
  40b77a:	f10d 012f 	add.w	r1, sp, #47	; 0x2f
  40b77e:	4618      	mov	r0, r3
  40b780:	931b      	str	r3, [sp, #108]	; 0x6c
  40b782:	461a      	mov	r2, r3
  40b784:	911a      	str	r1, [sp, #104]	; 0x68
  40b786:	4654      	mov	r4, sl
  40b788:	e679      	b.n	40b47e <_vfiprintf_r+0x69a>
  40b78a:	9a03      	ldr	r2, [sp, #12]
  40b78c:	1b95      	subs	r5, r2, r6
  40b78e:	2d00      	cmp	r5, #0
  40b790:	4652      	mov	r2, sl
  40b792:	f73f af0a 	bgt.w	40b5aa <_vfiprintf_r+0x7c6>
  40b796:	e6c9      	b.n	40b52c <_vfiprintf_r+0x748>
  40b798:	465d      	mov	r5, fp
  40b79a:	f7ff bb7c 	b.w	40ae96 <_vfiprintf_r+0xb2>
  40b79e:	9801      	ldr	r0, [sp, #4]
  40b7a0:	9900      	ldr	r1, [sp, #0]
  40b7a2:	aa0d      	add	r2, sp, #52	; 0x34
  40b7a4:	f7ff fad6 	bl	40ad54 <__sprint_r.part.0>
  40b7a8:	2800      	cmp	r0, #0
  40b7aa:	f47f aedf 	bne.w	40b56c <_vfiprintf_r+0x788>
  40b7ae:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  40b7b0:	4652      	mov	r2, sl
  40b7b2:	e6f3      	b.n	40b59c <_vfiprintf_r+0x7b8>
  40b7b4:	9904      	ldr	r1, [sp, #16]
  40b7b6:	460a      	mov	r2, r1
  40b7b8:	3204      	adds	r2, #4
  40b7ba:	680e      	ldr	r6, [r1, #0]
  40b7bc:	9204      	str	r2, [sp, #16]
  40b7be:	2700      	movs	r7, #0
  40b7c0:	e413      	b.n	40afea <_vfiprintf_r+0x206>
  40b7c2:	3204      	adds	r2, #4
  40b7c4:	681e      	ldr	r6, [r3, #0]
  40b7c6:	9204      	str	r2, [sp, #16]
  40b7c8:	2301      	movs	r3, #1
  40b7ca:	2700      	movs	r7, #0
  40b7cc:	e40d      	b.n	40afea <_vfiprintf_r+0x206>
  40b7ce:	6816      	ldr	r6, [r2, #0]
  40b7d0:	3204      	adds	r2, #4
  40b7d2:	9204      	str	r2, [sp, #16]
  40b7d4:	2700      	movs	r7, #0
  40b7d6:	e52d      	b.n	40b234 <_vfiprintf_r+0x450>
  40b7d8:	9a04      	ldr	r2, [sp, #16]
  40b7da:	6816      	ldr	r6, [r2, #0]
  40b7dc:	4613      	mov	r3, r2
  40b7de:	3304      	adds	r3, #4
  40b7e0:	17f7      	asrs	r7, r6, #31
  40b7e2:	9304      	str	r3, [sp, #16]
  40b7e4:	4632      	mov	r2, r6
  40b7e6:	463b      	mov	r3, r7
  40b7e8:	e4bf      	b.n	40b16a <_vfiprintf_r+0x386>
  40b7ea:	9801      	ldr	r0, [sp, #4]
  40b7ec:	9900      	ldr	r1, [sp, #0]
  40b7ee:	aa0d      	add	r2, sp, #52	; 0x34
  40b7f0:	f7ff fab0 	bl	40ad54 <__sprint_r.part.0>
  40b7f4:	2800      	cmp	r0, #0
  40b7f6:	f47f aeb9 	bne.w	40b56c <_vfiprintf_r+0x788>
  40b7fa:	4654      	mov	r4, sl
  40b7fc:	f7ff bbbe 	b.w	40af7c <_vfiprintf_r+0x198>
  40b800:	4608      	mov	r0, r1
  40b802:	4654      	mov	r4, sl
  40b804:	4611      	mov	r1, r2
  40b806:	e64c      	b.n	40b4a2 <_vfiprintf_r+0x6be>
  40b808:	46d1      	mov	r9, sl
  40b80a:	f8cd c014 	str.w	ip, [sp, #20]
  40b80e:	4630      	mov	r0, r6
  40b810:	4639      	mov	r1, r7
  40b812:	220a      	movs	r2, #10
  40b814:	2300      	movs	r3, #0
  40b816:	f003 fd0b 	bl	40f230 <__aeabi_uldivmod>
  40b81a:	3230      	adds	r2, #48	; 0x30
  40b81c:	4630      	mov	r0, r6
  40b81e:	4639      	mov	r1, r7
  40b820:	f809 2d01 	strb.w	r2, [r9, #-1]!
  40b824:	2300      	movs	r3, #0
  40b826:	220a      	movs	r2, #10
  40b828:	f003 fd02 	bl	40f230 <__aeabi_uldivmod>
  40b82c:	4606      	mov	r6, r0
  40b82e:	460f      	mov	r7, r1
  40b830:	ea56 0307 	orrs.w	r3, r6, r7
  40b834:	d1eb      	bne.n	40b80e <_vfiprintf_r+0xa2a>
  40b836:	f8dd c014 	ldr.w	ip, [sp, #20]
  40b83a:	e786      	b.n	40b74a <_vfiprintf_r+0x966>
  40b83c:	2b30      	cmp	r3, #48	; 0x30
  40b83e:	9b07      	ldr	r3, [sp, #28]
  40b840:	d086      	beq.n	40b750 <_vfiprintf_r+0x96c>
  40b842:	3b01      	subs	r3, #1
  40b844:	461a      	mov	r2, r3
  40b846:	9307      	str	r3, [sp, #28]
  40b848:	2330      	movs	r3, #48	; 0x30
  40b84a:	ebc2 090a 	rsb	r9, r2, sl
  40b84e:	f801 3c01 	strb.w	r3, [r1, #-1]
  40b852:	f7ff bbf9 	b.w	40b048 <_vfiprintf_r+0x264>
  40b856:	9801      	ldr	r0, [sp, #4]
  40b858:	9900      	ldr	r1, [sp, #0]
  40b85a:	f8cd c014 	str.w	ip, [sp, #20]
  40b85e:	aa0d      	add	r2, sp, #52	; 0x34
  40b860:	f7ff fa78 	bl	40ad54 <__sprint_r.part.0>
  40b864:	2800      	cmp	r0, #0
  40b866:	f47f ae81 	bne.w	40b56c <_vfiprintf_r+0x788>
  40b86a:	990e      	ldr	r1, [sp, #56]	; 0x38
  40b86c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  40b86e:	f8dd c014 	ldr.w	ip, [sp, #20]
  40b872:	1c48      	adds	r0, r1, #1
  40b874:	4654      	mov	r4, sl
  40b876:	e614      	b.n	40b4a2 <_vfiprintf_r+0x6be>
  40b878:	9801      	ldr	r0, [sp, #4]
  40b87a:	9900      	ldr	r1, [sp, #0]
  40b87c:	f8cd c020 	str.w	ip, [sp, #32]
  40b880:	aa0d      	add	r2, sp, #52	; 0x34
  40b882:	f7ff fa67 	bl	40ad54 <__sprint_r.part.0>
  40b886:	2800      	cmp	r0, #0
  40b888:	f47f ae70 	bne.w	40b56c <_vfiprintf_r+0x788>
  40b88c:	990e      	ldr	r1, [sp, #56]	; 0x38
  40b88e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  40b890:	f8dd c020 	ldr.w	ip, [sp, #32]
  40b894:	1c48      	adds	r0, r1, #1
  40b896:	4654      	mov	r4, sl
  40b898:	e5f4      	b.n	40b484 <_vfiprintf_r+0x6a0>
  40b89a:	2a00      	cmp	r2, #0
  40b89c:	d167      	bne.n	40b96e <_vfiprintf_r+0xb8a>
  40b89e:	2001      	movs	r0, #1
  40b8a0:	4611      	mov	r1, r2
  40b8a2:	4654      	mov	r4, sl
  40b8a4:	e601      	b.n	40b4aa <_vfiprintf_r+0x6c6>
  40b8a6:	9801      	ldr	r0, [sp, #4]
  40b8a8:	9900      	ldr	r1, [sp, #0]
  40b8aa:	aa0d      	add	r2, sp, #52	; 0x34
  40b8ac:	f7ff fa52 	bl	40ad54 <__sprint_r.part.0>
  40b8b0:	2800      	cmp	r0, #0
  40b8b2:	f47f ae5b 	bne.w	40b56c <_vfiprintf_r+0x788>
  40b8b6:	980e      	ldr	r0, [sp, #56]	; 0x38
  40b8b8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  40b8ba:	3001      	adds	r0, #1
  40b8bc:	4654      	mov	r4, sl
  40b8be:	e624      	b.n	40b50a <_vfiprintf_r+0x726>
  40b8c0:	252d      	movs	r5, #45	; 0x2d
  40b8c2:	4276      	negs	r6, r6
  40b8c4:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
  40b8c8:	f88d 502f 	strb.w	r5, [sp, #47]	; 0x2f
  40b8cc:	46e1      	mov	r9, ip
  40b8ce:	2301      	movs	r3, #1
  40b8d0:	f7ff bb91 	b.w	40aff6 <_vfiprintf_r+0x212>
  40b8d4:	9b05      	ldr	r3, [sp, #20]
  40b8d6:	4611      	mov	r1, r2
  40b8d8:	2001      	movs	r0, #1
  40b8da:	4654      	mov	r4, sl
  40b8dc:	2b00      	cmp	r3, #0
  40b8de:	f43f ade4 	beq.w	40b4aa <_vfiprintf_r+0x6c6>
  40b8e2:	aa0c      	add	r2, sp, #48	; 0x30
  40b8e4:	2302      	movs	r3, #2
  40b8e6:	e88a 000c 	stmia.w	sl, {r2, r3}
  40b8ea:	461a      	mov	r2, r3
  40b8ec:	e5d6      	b.n	40b49c <_vfiprintf_r+0x6b8>
  40b8ee:	f018 0f10 	tst.w	r8, #16
  40b8f2:	d10b      	bne.n	40b90c <_vfiprintf_r+0xb28>
  40b8f4:	f018 0f40 	tst.w	r8, #64	; 0x40
  40b8f8:	d008      	beq.n	40b90c <_vfiprintf_r+0xb28>
  40b8fa:	9a04      	ldr	r2, [sp, #16]
  40b8fc:	6813      	ldr	r3, [r2, #0]
  40b8fe:	3204      	adds	r2, #4
  40b900:	9204      	str	r2, [sp, #16]
  40b902:	f8bd 2008 	ldrh.w	r2, [sp, #8]
  40b906:	801a      	strh	r2, [r3, #0]
  40b908:	f7ff ba9e 	b.w	40ae48 <_vfiprintf_r+0x64>
  40b90c:	9a04      	ldr	r2, [sp, #16]
  40b90e:	6813      	ldr	r3, [r2, #0]
  40b910:	3204      	adds	r2, #4
  40b912:	9204      	str	r2, [sp, #16]
  40b914:	9a02      	ldr	r2, [sp, #8]
  40b916:	601a      	str	r2, [r3, #0]
  40b918:	f7ff ba96 	b.w	40ae48 <_vfiprintf_r+0x64>
  40b91c:	9801      	ldr	r0, [sp, #4]
  40b91e:	9900      	ldr	r1, [sp, #0]
  40b920:	f8cd c020 	str.w	ip, [sp, #32]
  40b924:	aa0d      	add	r2, sp, #52	; 0x34
  40b926:	f7ff fa15 	bl	40ad54 <__sprint_r.part.0>
  40b92a:	2800      	cmp	r0, #0
  40b92c:	f47f ae1e 	bne.w	40b56c <_vfiprintf_r+0x788>
  40b930:	990e      	ldr	r1, [sp, #56]	; 0x38
  40b932:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  40b934:	f8dd c020 	ldr.w	ip, [sp, #32]
  40b938:	1c48      	adds	r0, r1, #1
  40b93a:	4654      	mov	r4, sl
  40b93c:	e591      	b.n	40b462 <_vfiprintf_r+0x67e>
  40b93e:	f048 0820 	orr.w	r8, r8, #32
  40b942:	f10b 0001 	add.w	r0, fp, #1
  40b946:	f89b 3001 	ldrb.w	r3, [fp, #1]
  40b94a:	f7ff bab4 	b.w	40aeb6 <_vfiprintf_r+0xd2>
  40b94e:	426d      	negs	r5, r5
  40b950:	9304      	str	r3, [sp, #16]
  40b952:	4658      	mov	r0, fp
  40b954:	f7ff bbc6 	b.w	40b0e4 <_vfiprintf_r+0x300>
  40b958:	9807      	ldr	r0, [sp, #28]
  40b95a:	9604      	str	r6, [sp, #16]
  40b95c:	f7fd ff82 	bl	409864 <strlen>
  40b960:	f89d 502f 	ldrb.w	r5, [sp, #47]	; 0x2f
  40b964:	4681      	mov	r9, r0
  40b966:	f04f 0c00 	mov.w	ip, #0
  40b96a:	f7ff bb6d 	b.w	40b048 <_vfiprintf_r+0x264>
  40b96e:	9801      	ldr	r0, [sp, #4]
  40b970:	9900      	ldr	r1, [sp, #0]
  40b972:	f8cd c014 	str.w	ip, [sp, #20]
  40b976:	aa0d      	add	r2, sp, #52	; 0x34
  40b978:	f7ff f9ec 	bl	40ad54 <__sprint_r.part.0>
  40b97c:	2800      	cmp	r0, #0
  40b97e:	f47f adf5 	bne.w	40b56c <_vfiprintf_r+0x788>
  40b982:	990e      	ldr	r1, [sp, #56]	; 0x38
  40b984:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  40b986:	f8dd c014 	ldr.w	ip, [sp, #20]
  40b98a:	1c48      	adds	r0, r1, #1
  40b98c:	4654      	mov	r4, sl
  40b98e:	e58c      	b.n	40b4aa <_vfiprintf_r+0x6c6>
  40b990:	990e      	ldr	r1, [sp, #56]	; 0x38
  40b992:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  40b994:	4f15      	ldr	r7, [pc, #84]	; (40b9ec <_vfiprintf_r+0xc08>)
  40b996:	3101      	adds	r1, #1
  40b998:	f7ff bb98 	b.w	40b0cc <_vfiprintf_r+0x2e8>
  40b99c:	f1bc 0f06 	cmp.w	ip, #6
  40b9a0:	bf28      	it	cs
  40b9a2:	f04f 0c06 	movcs.w	ip, #6
  40b9a6:	4b12      	ldr	r3, [pc, #72]	; (40b9f0 <_vfiprintf_r+0xc0c>)
  40b9a8:	9604      	str	r6, [sp, #16]
  40b9aa:	46e1      	mov	r9, ip
  40b9ac:	ea2c 76ec 	bic.w	r6, ip, ip, asr #31
  40b9b0:	9307      	str	r3, [sp, #28]
  40b9b2:	e460      	b.n	40b276 <_vfiprintf_r+0x492>
  40b9b4:	990e      	ldr	r1, [sp, #56]	; 0x38
  40b9b6:	4f0d      	ldr	r7, [pc, #52]	; (40b9ec <_vfiprintf_r+0xc08>)
  40b9b8:	f101 0e01 	add.w	lr, r1, #1
  40b9bc:	e618      	b.n	40b5f0 <_vfiprintf_r+0x80c>
  40b9be:	46e1      	mov	r9, ip
  40b9c0:	f89d 502f 	ldrb.w	r5, [sp, #47]	; 0x2f
  40b9c4:	9604      	str	r6, [sp, #16]
  40b9c6:	4684      	mov	ip, r0
  40b9c8:	f7ff bb3e 	b.w	40b048 <_vfiprintf_r+0x264>
  40b9cc:	4686      	mov	lr, r0
  40b9ce:	e66b      	b.n	40b6a8 <_vfiprintf_r+0x8c4>
  40b9d0:	9a04      	ldr	r2, [sp, #16]
  40b9d2:	f89b 3001 	ldrb.w	r3, [fp, #1]
  40b9d6:	6816      	ldr	r6, [r2, #0]
  40b9d8:	3204      	adds	r2, #4
  40b9da:	2e00      	cmp	r6, #0
  40b9dc:	9204      	str	r2, [sp, #16]
  40b9de:	f6bf aa6a 	bge.w	40aeb6 <_vfiprintf_r+0xd2>
  40b9e2:	f04f 36ff 	mov.w	r6, #4294967295
  40b9e6:	f7ff ba66 	b.w	40aeb6 <_vfiprintf_r+0xd2>
  40b9ea:	bf00      	nop
  40b9ec:	00411c08 	.word	0x00411c08
  40b9f0:	00411bf0 	.word	0x00411bf0

0040b9f4 <__sbprintf>:
  40b9f4:	e92d 42f0 	stmdb	sp!, {r4, r5, r6, r7, r9, lr}
  40b9f8:	460c      	mov	r4, r1
  40b9fa:	f5ad 6d8d 	sub.w	sp, sp, #1128	; 0x468
  40b9fe:	f8b1 e00c 	ldrh.w	lr, [r1, #12]
  40ba02:	69e7      	ldr	r7, [r4, #28]
  40ba04:	6e49      	ldr	r1, [r1, #100]	; 0x64
  40ba06:	f8b4 900e 	ldrh.w	r9, [r4, #14]
  40ba0a:	9119      	str	r1, [sp, #100]	; 0x64
  40ba0c:	ad1a      	add	r5, sp, #104	; 0x68
  40ba0e:	f44f 6680 	mov.w	r6, #1024	; 0x400
  40ba12:	f02e 0e02 	bic.w	lr, lr, #2
  40ba16:	f04f 0c00 	mov.w	ip, #0
  40ba1a:	9707      	str	r7, [sp, #28]
  40ba1c:	4669      	mov	r1, sp
  40ba1e:	6a67      	ldr	r7, [r4, #36]	; 0x24
  40ba20:	9500      	str	r5, [sp, #0]
  40ba22:	9504      	str	r5, [sp, #16]
  40ba24:	9602      	str	r6, [sp, #8]
  40ba26:	9605      	str	r6, [sp, #20]
  40ba28:	f8ad e00c 	strh.w	lr, [sp, #12]
  40ba2c:	f8ad 900e 	strh.w	r9, [sp, #14]
  40ba30:	9709      	str	r7, [sp, #36]	; 0x24
  40ba32:	f8cd c018 	str.w	ip, [sp, #24]
  40ba36:	4606      	mov	r6, r0
  40ba38:	f7ff f9d4 	bl	40ade4 <_vfiprintf_r>
  40ba3c:	1e05      	subs	r5, r0, #0
  40ba3e:	db07      	blt.n	40ba50 <__sbprintf+0x5c>
  40ba40:	4630      	mov	r0, r6
  40ba42:	4669      	mov	r1, sp
  40ba44:	f7fc fad0 	bl	407fe8 <_fflush_r>
  40ba48:	2800      	cmp	r0, #0
  40ba4a:	bf18      	it	ne
  40ba4c:	f04f 35ff 	movne.w	r5, #4294967295
  40ba50:	f8bd 300c 	ldrh.w	r3, [sp, #12]
  40ba54:	065b      	lsls	r3, r3, #25
  40ba56:	d503      	bpl.n	40ba60 <__sbprintf+0x6c>
  40ba58:	89a3      	ldrh	r3, [r4, #12]
  40ba5a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40ba5e:	81a3      	strh	r3, [r4, #12]
  40ba60:	4628      	mov	r0, r5
  40ba62:	f50d 6d8d 	add.w	sp, sp, #1128	; 0x468
  40ba66:	e8bd 82f0 	ldmia.w	sp!, {r4, r5, r6, r7, r9, pc}
  40ba6a:	bf00      	nop

0040ba6c <_vfprintf_r>:
  40ba6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40ba70:	b0bf      	sub	sp, #252	; 0xfc
  40ba72:	461c      	mov	r4, r3
  40ba74:	4689      	mov	r9, r1
  40ba76:	9208      	str	r2, [sp, #32]
  40ba78:	4607      	mov	r7, r0
  40ba7a:	f002 fb8f 	bl	40e19c <_localeconv_r>
  40ba7e:	6803      	ldr	r3, [r0, #0]
  40ba80:	9315      	str	r3, [sp, #84]	; 0x54
  40ba82:	4618      	mov	r0, r3
  40ba84:	f7fd feee 	bl	409864 <strlen>
  40ba88:	940c      	str	r4, [sp, #48]	; 0x30
  40ba8a:	9016      	str	r0, [sp, #88]	; 0x58
  40ba8c:	b11f      	cbz	r7, 40ba96 <_vfprintf_r+0x2a>
  40ba8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
  40ba90:	2b00      	cmp	r3, #0
  40ba92:	f000 80f3 	beq.w	40bc7c <_vfprintf_r+0x210>
  40ba96:	f8b9 200c 	ldrh.w	r2, [r9, #12]
  40ba9a:	b293      	uxth	r3, r2
  40ba9c:	049d      	lsls	r5, r3, #18
  40ba9e:	d40a      	bmi.n	40bab6 <_vfprintf_r+0x4a>
  40baa0:	f8d9 1064 	ldr.w	r1, [r9, #100]	; 0x64
  40baa4:	f442 5300 	orr.w	r3, r2, #8192	; 0x2000
  40baa8:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
  40baac:	f8a9 300c 	strh.w	r3, [r9, #12]
  40bab0:	f8c9 1064 	str.w	r1, [r9, #100]	; 0x64
  40bab4:	b29b      	uxth	r3, r3
  40bab6:	0718      	lsls	r0, r3, #28
  40bab8:	f140 80aa 	bpl.w	40bc10 <_vfprintf_r+0x1a4>
  40babc:	f8d9 2010 	ldr.w	r2, [r9, #16]
  40bac0:	2a00      	cmp	r2, #0
  40bac2:	f000 80a5 	beq.w	40bc10 <_vfprintf_r+0x1a4>
  40bac6:	f003 031a 	and.w	r3, r3, #26
  40baca:	2b0a      	cmp	r3, #10
  40bacc:	f000 80ac 	beq.w	40bc28 <_vfprintf_r+0x1bc>
  40bad0:	2300      	movs	r3, #0
  40bad2:	461a      	mov	r2, r3
  40bad4:	9311      	str	r3, [sp, #68]	; 0x44
  40bad6:	9323      	str	r3, [sp, #140]	; 0x8c
  40bad8:	9322      	str	r3, [sp, #136]	; 0x88
  40bada:	9314      	str	r3, [sp, #80]	; 0x50
  40badc:	9317      	str	r3, [sp, #92]	; 0x5c
  40bade:	9309      	str	r3, [sp, #36]	; 0x24
  40bae0:	ab2e      	add	r3, sp, #184	; 0xb8
  40bae2:	469c      	mov	ip, r3
  40bae4:	9321      	str	r3, [sp, #132]	; 0x84
  40bae6:	9212      	str	r2, [sp, #72]	; 0x48
  40bae8:	9213      	str	r2, [sp, #76]	; 0x4c
  40baea:	4664      	mov	r4, ip
  40baec:	46b8      	mov	r8, r7
  40baee:	9d08      	ldr	r5, [sp, #32]
  40baf0:	782b      	ldrb	r3, [r5, #0]
  40baf2:	2b00      	cmp	r3, #0
  40baf4:	f000 80c6 	beq.w	40bc84 <_vfprintf_r+0x218>
  40baf8:	2b25      	cmp	r3, #37	; 0x25
  40bafa:	d102      	bne.n	40bb02 <_vfprintf_r+0x96>
  40bafc:	e0c2      	b.n	40bc84 <_vfprintf_r+0x218>
  40bafe:	2b25      	cmp	r3, #37	; 0x25
  40bb00:	d003      	beq.n	40bb0a <_vfprintf_r+0x9e>
  40bb02:	f815 3f01 	ldrb.w	r3, [r5, #1]!
  40bb06:	2b00      	cmp	r3, #0
  40bb08:	d1f9      	bne.n	40bafe <_vfprintf_r+0x92>
  40bb0a:	9b08      	ldr	r3, [sp, #32]
  40bb0c:	1aee      	subs	r6, r5, r3
  40bb0e:	b17e      	cbz	r6, 40bb30 <_vfprintf_r+0xc4>
  40bb10:	9b22      	ldr	r3, [sp, #136]	; 0x88
  40bb12:	9a23      	ldr	r2, [sp, #140]	; 0x8c
  40bb14:	9908      	ldr	r1, [sp, #32]
  40bb16:	6021      	str	r1, [r4, #0]
  40bb18:	3301      	adds	r3, #1
  40bb1a:	4432      	add	r2, r6
  40bb1c:	2b07      	cmp	r3, #7
  40bb1e:	6066      	str	r6, [r4, #4]
  40bb20:	9223      	str	r2, [sp, #140]	; 0x8c
  40bb22:	9322      	str	r3, [sp, #136]	; 0x88
  40bb24:	f300 8093 	bgt.w	40bc4e <_vfprintf_r+0x1e2>
  40bb28:	3408      	adds	r4, #8
  40bb2a:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40bb2c:	4433      	add	r3, r6
  40bb2e:	9309      	str	r3, [sp, #36]	; 0x24
  40bb30:	782b      	ldrb	r3, [r5, #0]
  40bb32:	2b00      	cmp	r3, #0
  40bb34:	f000 8093 	beq.w	40bc5e <_vfprintf_r+0x1f2>
  40bb38:	2300      	movs	r3, #0
  40bb3a:	1c69      	adds	r1, r5, #1
  40bb3c:	f04f 3aff 	mov.w	sl, #4294967295
  40bb40:	786d      	ldrb	r5, [r5, #1]
  40bb42:	f88d 3067 	strb.w	r3, [sp, #103]	; 0x67
  40bb46:	461a      	mov	r2, r3
  40bb48:	930a      	str	r3, [sp, #40]	; 0x28
  40bb4a:	9306      	str	r3, [sp, #24]
  40bb4c:	4656      	mov	r6, sl
  40bb4e:	1c4b      	adds	r3, r1, #1
  40bb50:	f1a5 0120 	sub.w	r1, r5, #32
  40bb54:	2958      	cmp	r1, #88	; 0x58
  40bb56:	f200 83c1 	bhi.w	40c2dc <_vfprintf_r+0x870>
  40bb5a:	e8df f011 	tbh	[pc, r1, lsl #1]
  40bb5e:	0256      	.short	0x0256
  40bb60:	03bf03bf 	.word	0x03bf03bf
  40bb64:	03bf02f6 	.word	0x03bf02f6
  40bb68:	03bf03bf 	.word	0x03bf03bf
  40bb6c:	03bf03bf 	.word	0x03bf03bf
  40bb70:	02fd03bf 	.word	0x02fd03bf
  40bb74:	03bf02c6 	.word	0x03bf02c6
  40bb78:	034701f2 	.word	0x034701f2
  40bb7c:	02ca03bf 	.word	0x02ca03bf
  40bb80:	02d102d1 	.word	0x02d102d1
  40bb84:	02d102d1 	.word	0x02d102d1
  40bb88:	02d102d1 	.word	0x02d102d1
  40bb8c:	02d102d1 	.word	0x02d102d1
  40bb90:	03bf02d1 	.word	0x03bf02d1
  40bb94:	03bf03bf 	.word	0x03bf03bf
  40bb98:	03bf03bf 	.word	0x03bf03bf
  40bb9c:	03bf03bf 	.word	0x03bf03bf
  40bba0:	03bf03bf 	.word	0x03bf03bf
  40bba4:	026b03bf 	.word	0x026b03bf
  40bba8:	03bf028d 	.word	0x03bf028d
  40bbac:	03bf028d 	.word	0x03bf028d
  40bbb0:	03bf03bf 	.word	0x03bf03bf
  40bbb4:	02bf03bf 	.word	0x02bf03bf
  40bbb8:	03bf03bf 	.word	0x03bf03bf
  40bbbc:	03bf0362 	.word	0x03bf0362
  40bbc0:	03bf03bf 	.word	0x03bf03bf
  40bbc4:	03bf03bf 	.word	0x03bf03bf
  40bbc8:	03bf03a9 	.word	0x03bf03a9
  40bbcc:	037f03bf 	.word	0x037f03bf
  40bbd0:	03bf03bf 	.word	0x03bf03bf
  40bbd4:	03bf03bf 	.word	0x03bf03bf
  40bbd8:	03bf03bf 	.word	0x03bf03bf
  40bbdc:	03bf03bf 	.word	0x03bf03bf
  40bbe0:	03bf03bf 	.word	0x03bf03bf
  40bbe4:	030b0394 	.word	0x030b0394
  40bbe8:	028d028d 	.word	0x028d028d
  40bbec:	0324028d 	.word	0x0324028d
  40bbf0:	03bf030b 	.word	0x03bf030b
  40bbf4:	032b03bf 	.word	0x032b03bf
  40bbf8:	033503bf 	.word	0x033503bf
  40bbfc:	02e001f9 	.word	0x02e001f9
  40bc00:	03bf025d 	.word	0x03bf025d
  40bc04:	03bf020b 	.word	0x03bf020b
  40bc08:	03bf0095 	.word	0x03bf0095
  40bc0c:	023003bf 	.word	0x023003bf
  40bc10:	4638      	mov	r0, r7
  40bc12:	4649      	mov	r1, r9
  40bc14:	f001 f9c2 	bl	40cf9c <__swsetup_r>
  40bc18:	b9a0      	cbnz	r0, 40bc44 <_vfprintf_r+0x1d8>
  40bc1a:	f8b9 300c 	ldrh.w	r3, [r9, #12]
  40bc1e:	f003 031a 	and.w	r3, r3, #26
  40bc22:	2b0a      	cmp	r3, #10
  40bc24:	f47f af54 	bne.w	40bad0 <_vfprintf_r+0x64>
  40bc28:	f9b9 300e 	ldrsh.w	r3, [r9, #14]
  40bc2c:	2b00      	cmp	r3, #0
  40bc2e:	f6ff af4f 	blt.w	40bad0 <_vfprintf_r+0x64>
  40bc32:	4638      	mov	r0, r7
  40bc34:	4649      	mov	r1, r9
  40bc36:	9a08      	ldr	r2, [sp, #32]
  40bc38:	4623      	mov	r3, r4
  40bc3a:	f001 f90b 	bl	40ce54 <__sbprintf>
  40bc3e:	b03f      	add	sp, #252	; 0xfc
  40bc40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40bc44:	f04f 30ff 	mov.w	r0, #4294967295
  40bc48:	b03f      	add	sp, #252	; 0xfc
  40bc4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40bc4e:	4640      	mov	r0, r8
  40bc50:	4649      	mov	r1, r9
  40bc52:	aa21      	add	r2, sp, #132	; 0x84
  40bc54:	f7ff f8ba 	bl	40adcc <__sprint_r>
  40bc58:	b940      	cbnz	r0, 40bc6c <_vfprintf_r+0x200>
  40bc5a:	ac2e      	add	r4, sp, #184	; 0xb8
  40bc5c:	e765      	b.n	40bb2a <_vfprintf_r+0xbe>
  40bc5e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
  40bc60:	b123      	cbz	r3, 40bc6c <_vfprintf_r+0x200>
  40bc62:	4640      	mov	r0, r8
  40bc64:	4649      	mov	r1, r9
  40bc66:	aa21      	add	r2, sp, #132	; 0x84
  40bc68:	f7ff f8b0 	bl	40adcc <__sprint_r>
  40bc6c:	f8b9 300c 	ldrh.w	r3, [r9, #12]
  40bc70:	065a      	lsls	r2, r3, #25
  40bc72:	d4e7      	bmi.n	40bc44 <_vfprintf_r+0x1d8>
  40bc74:	9809      	ldr	r0, [sp, #36]	; 0x24
  40bc76:	b03f      	add	sp, #252	; 0xfc
  40bc78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40bc7c:	4638      	mov	r0, r7
  40bc7e:	f7fc fa47 	bl	408110 <__sinit>
  40bc82:	e708      	b.n	40ba96 <_vfprintf_r+0x2a>
  40bc84:	9d08      	ldr	r5, [sp, #32]
  40bc86:	e753      	b.n	40bb30 <_vfprintf_r+0xc4>
  40bc88:	9308      	str	r3, [sp, #32]
  40bc8a:	9b06      	ldr	r3, [sp, #24]
  40bc8c:	46b2      	mov	sl, r6
  40bc8e:	069e      	lsls	r6, r3, #26
  40bc90:	f140 8318 	bpl.w	40c2c4 <_vfprintf_r+0x858>
  40bc94:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  40bc96:	3707      	adds	r7, #7
  40bc98:	f027 0307 	bic.w	r3, r7, #7
  40bc9c:	f103 0208 	add.w	r2, r3, #8
  40bca0:	e9d3 6700 	ldrd	r6, r7, [r3]
  40bca4:	920c      	str	r2, [sp, #48]	; 0x30
  40bca6:	2301      	movs	r3, #1
  40bca8:	f04f 0c00 	mov.w	ip, #0
  40bcac:	f88d c067 	strb.w	ip, [sp, #103]	; 0x67
  40bcb0:	f8cd a03c 	str.w	sl, [sp, #60]	; 0x3c
  40bcb4:	f1ba 0f00 	cmp.w	sl, #0
  40bcb8:	db03      	blt.n	40bcc2 <_vfprintf_r+0x256>
  40bcba:	9a06      	ldr	r2, [sp, #24]
  40bcbc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
  40bcc0:	9206      	str	r2, [sp, #24]
  40bcc2:	ea56 0207 	orrs.w	r2, r6, r7
  40bcc6:	f040 8319 	bne.w	40c2fc <_vfprintf_r+0x890>
  40bcca:	f1ba 0f00 	cmp.w	sl, #0
  40bcce:	f000 8416 	beq.w	40c4fe <_vfprintf_r+0xa92>
  40bcd2:	2b01      	cmp	r3, #1
  40bcd4:	f000 831a 	beq.w	40c30c <_vfprintf_r+0x8a0>
  40bcd8:	2b02      	cmp	r3, #2
  40bcda:	f000 844c 	beq.w	40c576 <_vfprintf_r+0xb0a>
  40bcde:	a92e      	add	r1, sp, #184	; 0xb8
  40bce0:	08f2      	lsrs	r2, r6, #3
  40bce2:	ea42 7247 	orr.w	r2, r2, r7, lsl #29
  40bce6:	08f8      	lsrs	r0, r7, #3
  40bce8:	f006 0307 	and.w	r3, r6, #7
  40bcec:	4607      	mov	r7, r0
  40bcee:	4616      	mov	r6, r2
  40bcf0:	3330      	adds	r3, #48	; 0x30
  40bcf2:	ea56 0207 	orrs.w	r2, r6, r7
  40bcf6:	f801 3d01 	strb.w	r3, [r1, #-1]!
  40bcfa:	d1f1      	bne.n	40bce0 <_vfprintf_r+0x274>
  40bcfc:	9a06      	ldr	r2, [sp, #24]
  40bcfe:	910e      	str	r1, [sp, #56]	; 0x38
  40bd00:	07d0      	lsls	r0, r2, #31
  40bd02:	f100 850d 	bmi.w	40c720 <_vfprintf_r+0xcb4>
  40bd06:	ab2e      	add	r3, sp, #184	; 0xb8
  40bd08:	1a5b      	subs	r3, r3, r1
  40bd0a:	930b      	str	r3, [sp, #44]	; 0x2c
  40bd0c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  40bd0e:	4592      	cmp	sl, r2
  40bd10:	4653      	mov	r3, sl
  40bd12:	bfb8      	it	lt
  40bd14:	4613      	movlt	r3, r2
  40bd16:	9307      	str	r3, [sp, #28]
  40bd18:	2300      	movs	r3, #0
  40bd1a:	9310      	str	r3, [sp, #64]	; 0x40
  40bd1c:	f1bc 0f00 	cmp.w	ip, #0
  40bd20:	d002      	beq.n	40bd28 <_vfprintf_r+0x2bc>
  40bd22:	9b07      	ldr	r3, [sp, #28]
  40bd24:	3301      	adds	r3, #1
  40bd26:	9307      	str	r3, [sp, #28]
  40bd28:	9b06      	ldr	r3, [sp, #24]
  40bd2a:	f013 0302 	ands.w	r3, r3, #2
  40bd2e:	930d      	str	r3, [sp, #52]	; 0x34
  40bd30:	d002      	beq.n	40bd38 <_vfprintf_r+0x2cc>
  40bd32:	9b07      	ldr	r3, [sp, #28]
  40bd34:	3302      	adds	r3, #2
  40bd36:	9307      	str	r3, [sp, #28]
  40bd38:	9b06      	ldr	r3, [sp, #24]
  40bd3a:	f013 0684 	ands.w	r6, r3, #132	; 0x84
  40bd3e:	f040 82da 	bne.w	40c2f6 <_vfprintf_r+0x88a>
  40bd42:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40bd44:	9a07      	ldr	r2, [sp, #28]
  40bd46:	ebc2 0a03 	rsb	sl, r2, r3
  40bd4a:	f1ba 0f00 	cmp.w	sl, #0
  40bd4e:	f340 82d2 	ble.w	40c2f6 <_vfprintf_r+0x88a>
  40bd52:	f1ba 0f10 	cmp.w	sl, #16
  40bd56:	9923      	ldr	r1, [sp, #140]	; 0x8c
  40bd58:	9a22      	ldr	r2, [sp, #136]	; 0x88
  40bd5a:	4fb3      	ldr	r7, [pc, #716]	; (40c028 <_vfprintf_r+0x5bc>)
  40bd5c:	bfc8      	it	gt
  40bd5e:	f04f 0b10 	movgt.w	fp, #16
  40bd62:	dc07      	bgt.n	40bd74 <_vfprintf_r+0x308>
  40bd64:	e01e      	b.n	40bda4 <_vfprintf_r+0x338>
  40bd66:	f1aa 0a10 	sub.w	sl, sl, #16
  40bd6a:	f1ba 0f10 	cmp.w	sl, #16
  40bd6e:	f104 0408 	add.w	r4, r4, #8
  40bd72:	dd17      	ble.n	40bda4 <_vfprintf_r+0x338>
  40bd74:	3201      	adds	r2, #1
  40bd76:	3110      	adds	r1, #16
  40bd78:	2a07      	cmp	r2, #7
  40bd7a:	9123      	str	r1, [sp, #140]	; 0x8c
  40bd7c:	9222      	str	r2, [sp, #136]	; 0x88
  40bd7e:	e884 0880 	stmia.w	r4, {r7, fp}
  40bd82:	ddf0      	ble.n	40bd66 <_vfprintf_r+0x2fa>
  40bd84:	4640      	mov	r0, r8
  40bd86:	4649      	mov	r1, r9
  40bd88:	aa21      	add	r2, sp, #132	; 0x84
  40bd8a:	f7ff f81f 	bl	40adcc <__sprint_r>
  40bd8e:	2800      	cmp	r0, #0
  40bd90:	f47f af6c 	bne.w	40bc6c <_vfprintf_r+0x200>
  40bd94:	f1aa 0a10 	sub.w	sl, sl, #16
  40bd98:	f1ba 0f10 	cmp.w	sl, #16
  40bd9c:	9923      	ldr	r1, [sp, #140]	; 0x8c
  40bd9e:	9a22      	ldr	r2, [sp, #136]	; 0x88
  40bda0:	ac2e      	add	r4, sp, #184	; 0xb8
  40bda2:	dce7      	bgt.n	40bd74 <_vfprintf_r+0x308>
  40bda4:	3201      	adds	r2, #1
  40bda6:	eb0a 0b01 	add.w	fp, sl, r1
  40bdaa:	2a07      	cmp	r2, #7
  40bdac:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
  40bdb0:	9222      	str	r2, [sp, #136]	; 0x88
  40bdb2:	e884 0480 	stmia.w	r4, {r7, sl}
  40bdb6:	f300 8443 	bgt.w	40c640 <_vfprintf_r+0xbd4>
  40bdba:	f89d c067 	ldrb.w	ip, [sp, #103]	; 0x67
  40bdbe:	3408      	adds	r4, #8
  40bdc0:	f1bc 0f00 	cmp.w	ip, #0
  40bdc4:	d00f      	beq.n	40bde6 <_vfprintf_r+0x37a>
  40bdc6:	9b22      	ldr	r3, [sp, #136]	; 0x88
  40bdc8:	3301      	adds	r3, #1
  40bdca:	f10b 0b01 	add.w	fp, fp, #1
  40bdce:	f10d 0167 	add.w	r1, sp, #103	; 0x67
  40bdd2:	2201      	movs	r2, #1
  40bdd4:	2b07      	cmp	r3, #7
  40bdd6:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
  40bdda:	9322      	str	r3, [sp, #136]	; 0x88
  40bddc:	e884 0006 	stmia.w	r4, {r1, r2}
  40bde0:	f300 83b7 	bgt.w	40c552 <_vfprintf_r+0xae6>
  40bde4:	3408      	adds	r4, #8
  40bde6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  40bde8:	b173      	cbz	r3, 40be08 <_vfprintf_r+0x39c>
  40bdea:	9b22      	ldr	r3, [sp, #136]	; 0x88
  40bdec:	3301      	adds	r3, #1
  40bdee:	f10b 0b02 	add.w	fp, fp, #2
  40bdf2:	a91a      	add	r1, sp, #104	; 0x68
  40bdf4:	2202      	movs	r2, #2
  40bdf6:	2b07      	cmp	r3, #7
  40bdf8:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
  40bdfc:	9322      	str	r3, [sp, #136]	; 0x88
  40bdfe:	e884 0006 	stmia.w	r4, {r1, r2}
  40be02:	f300 839a 	bgt.w	40c53a <_vfprintf_r+0xace>
  40be06:	3408      	adds	r4, #8
  40be08:	2e80      	cmp	r6, #128	; 0x80
  40be0a:	f000 82ea 	beq.w	40c3e2 <_vfprintf_r+0x976>
  40be0e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  40be10:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  40be12:	ebc2 0a03 	rsb	sl, r2, r3
  40be16:	f1ba 0f00 	cmp.w	sl, #0
  40be1a:	dd32      	ble.n	40be82 <_vfprintf_r+0x416>
  40be1c:	f1ba 0f10 	cmp.w	sl, #16
  40be20:	9a22      	ldr	r2, [sp, #136]	; 0x88
  40be22:	4f82      	ldr	r7, [pc, #520]	; (40c02c <_vfprintf_r+0x5c0>)
  40be24:	dd22      	ble.n	40be6c <_vfprintf_r+0x400>
  40be26:	2610      	movs	r6, #16
  40be28:	465b      	mov	r3, fp
  40be2a:	e006      	b.n	40be3a <_vfprintf_r+0x3ce>
  40be2c:	f1aa 0a10 	sub.w	sl, sl, #16
  40be30:	f1ba 0f10 	cmp.w	sl, #16
  40be34:	f104 0408 	add.w	r4, r4, #8
  40be38:	dd17      	ble.n	40be6a <_vfprintf_r+0x3fe>
  40be3a:	3201      	adds	r2, #1
  40be3c:	3310      	adds	r3, #16
  40be3e:	2a07      	cmp	r2, #7
  40be40:	9323      	str	r3, [sp, #140]	; 0x8c
  40be42:	9222      	str	r2, [sp, #136]	; 0x88
  40be44:	6027      	str	r7, [r4, #0]
  40be46:	6066      	str	r6, [r4, #4]
  40be48:	ddf0      	ble.n	40be2c <_vfprintf_r+0x3c0>
  40be4a:	4640      	mov	r0, r8
  40be4c:	4649      	mov	r1, r9
  40be4e:	aa21      	add	r2, sp, #132	; 0x84
  40be50:	f7fe ffbc 	bl	40adcc <__sprint_r>
  40be54:	2800      	cmp	r0, #0
  40be56:	f47f af09 	bne.w	40bc6c <_vfprintf_r+0x200>
  40be5a:	f1aa 0a10 	sub.w	sl, sl, #16
  40be5e:	f1ba 0f10 	cmp.w	sl, #16
  40be62:	9b23      	ldr	r3, [sp, #140]	; 0x8c
  40be64:	9a22      	ldr	r2, [sp, #136]	; 0x88
  40be66:	ac2e      	add	r4, sp, #184	; 0xb8
  40be68:	dce7      	bgt.n	40be3a <_vfprintf_r+0x3ce>
  40be6a:	469b      	mov	fp, r3
  40be6c:	3201      	adds	r2, #1
  40be6e:	44d3      	add	fp, sl
  40be70:	2a07      	cmp	r2, #7
  40be72:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
  40be76:	9222      	str	r2, [sp, #136]	; 0x88
  40be78:	e884 0480 	stmia.w	r4, {r7, sl}
  40be7c:	f300 8351 	bgt.w	40c522 <_vfprintf_r+0xab6>
  40be80:	3408      	adds	r4, #8
  40be82:	9b06      	ldr	r3, [sp, #24]
  40be84:	05db      	lsls	r3, r3, #23
  40be86:	f100 8255 	bmi.w	40c334 <_vfprintf_r+0x8c8>
  40be8a:	9b22      	ldr	r3, [sp, #136]	; 0x88
  40be8c:	990b      	ldr	r1, [sp, #44]	; 0x2c
  40be8e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  40be90:	6022      	str	r2, [r4, #0]
  40be92:	3301      	adds	r3, #1
  40be94:	448b      	add	fp, r1
  40be96:	2b07      	cmp	r3, #7
  40be98:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
  40be9c:	6061      	str	r1, [r4, #4]
  40be9e:	9322      	str	r3, [sp, #136]	; 0x88
  40bea0:	f300 8317 	bgt.w	40c4d2 <_vfprintf_r+0xa66>
  40bea4:	3408      	adds	r4, #8
  40bea6:	9b06      	ldr	r3, [sp, #24]
  40bea8:	0759      	lsls	r1, r3, #29
  40beaa:	d53a      	bpl.n	40bf22 <_vfprintf_r+0x4b6>
  40beac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40beae:	9a07      	ldr	r2, [sp, #28]
  40beb0:	1a9d      	subs	r5, r3, r2
  40beb2:	2d00      	cmp	r5, #0
  40beb4:	dd35      	ble.n	40bf22 <_vfprintf_r+0x4b6>
  40beb6:	2d10      	cmp	r5, #16
  40beb8:	9b22      	ldr	r3, [sp, #136]	; 0x88
  40beba:	4f5b      	ldr	r7, [pc, #364]	; (40c028 <_vfprintf_r+0x5bc>)
  40bebc:	dd1e      	ble.n	40befc <_vfprintf_r+0x490>
  40bebe:	2610      	movs	r6, #16
  40bec0:	465a      	mov	r2, fp
  40bec2:	e004      	b.n	40bece <_vfprintf_r+0x462>
  40bec4:	3d10      	subs	r5, #16
  40bec6:	2d10      	cmp	r5, #16
  40bec8:	f104 0408 	add.w	r4, r4, #8
  40becc:	dd15      	ble.n	40befa <_vfprintf_r+0x48e>
  40bece:	3301      	adds	r3, #1
  40bed0:	3210      	adds	r2, #16
  40bed2:	2b07      	cmp	r3, #7
  40bed4:	9223      	str	r2, [sp, #140]	; 0x8c
  40bed6:	9322      	str	r3, [sp, #136]	; 0x88
  40bed8:	6027      	str	r7, [r4, #0]
  40beda:	6066      	str	r6, [r4, #4]
  40bedc:	ddf2      	ble.n	40bec4 <_vfprintf_r+0x458>
  40bede:	4640      	mov	r0, r8
  40bee0:	4649      	mov	r1, r9
  40bee2:	aa21      	add	r2, sp, #132	; 0x84
  40bee4:	f7fe ff72 	bl	40adcc <__sprint_r>
  40bee8:	2800      	cmp	r0, #0
  40beea:	f47f aebf 	bne.w	40bc6c <_vfprintf_r+0x200>
  40beee:	3d10      	subs	r5, #16
  40bef0:	2d10      	cmp	r5, #16
  40bef2:	9a23      	ldr	r2, [sp, #140]	; 0x8c
  40bef4:	9b22      	ldr	r3, [sp, #136]	; 0x88
  40bef6:	ac2e      	add	r4, sp, #184	; 0xb8
  40bef8:	dce9      	bgt.n	40bece <_vfprintf_r+0x462>
  40befa:	4693      	mov	fp, r2
  40befc:	3301      	adds	r3, #1
  40befe:	44ab      	add	fp, r5
  40bf00:	2b07      	cmp	r3, #7
  40bf02:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
  40bf06:	9322      	str	r3, [sp, #136]	; 0x88
  40bf08:	6027      	str	r7, [r4, #0]
  40bf0a:	6065      	str	r5, [r4, #4]
  40bf0c:	dd09      	ble.n	40bf22 <_vfprintf_r+0x4b6>
  40bf0e:	4640      	mov	r0, r8
  40bf10:	4649      	mov	r1, r9
  40bf12:	aa21      	add	r2, sp, #132	; 0x84
  40bf14:	f7fe ff5a 	bl	40adcc <__sprint_r>
  40bf18:	2800      	cmp	r0, #0
  40bf1a:	f47f aea7 	bne.w	40bc6c <_vfprintf_r+0x200>
  40bf1e:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
  40bf22:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40bf24:	9a07      	ldr	r2, [sp, #28]
  40bf26:	990a      	ldr	r1, [sp, #40]	; 0x28
  40bf28:	428a      	cmp	r2, r1
  40bf2a:	bfac      	ite	ge
  40bf2c:	189b      	addge	r3, r3, r2
  40bf2e:	185b      	addlt	r3, r3, r1
  40bf30:	9309      	str	r3, [sp, #36]	; 0x24
  40bf32:	f1bb 0f00 	cmp.w	fp, #0
  40bf36:	f040 82d8 	bne.w	40c4ea <_vfprintf_r+0xa7e>
  40bf3a:	2300      	movs	r3, #0
  40bf3c:	9322      	str	r3, [sp, #136]	; 0x88
  40bf3e:	ac2e      	add	r4, sp, #184	; 0xb8
  40bf40:	e5d5      	b.n	40baee <_vfprintf_r+0x82>
  40bf42:	4619      	mov	r1, r3
  40bf44:	9806      	ldr	r0, [sp, #24]
  40bf46:	781d      	ldrb	r5, [r3, #0]
  40bf48:	f040 0004 	orr.w	r0, r0, #4
  40bf4c:	9006      	str	r0, [sp, #24]
  40bf4e:	e5fe      	b.n	40bb4e <_vfprintf_r+0xe2>
  40bf50:	9308      	str	r3, [sp, #32]
  40bf52:	9b06      	ldr	r3, [sp, #24]
  40bf54:	f013 0320 	ands.w	r3, r3, #32
  40bf58:	46b2      	mov	sl, r6
  40bf5a:	f000 816d 	beq.w	40c238 <_vfprintf_r+0x7cc>
  40bf5e:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  40bf60:	3707      	adds	r7, #7
  40bf62:	f027 0307 	bic.w	r3, r7, #7
  40bf66:	f103 0208 	add.w	r2, r3, #8
  40bf6a:	e9d3 6700 	ldrd	r6, r7, [r3]
  40bf6e:	920c      	str	r2, [sp, #48]	; 0x30
  40bf70:	2300      	movs	r3, #0
  40bf72:	e699      	b.n	40bca8 <_vfprintf_r+0x23c>
  40bf74:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  40bf76:	9308      	str	r3, [sp, #32]
  40bf78:	6813      	ldr	r3, [r2, #0]
  40bf7a:	930e      	str	r3, [sp, #56]	; 0x38
  40bf7c:	f04f 0b00 	mov.w	fp, #0
  40bf80:	f88d b067 	strb.w	fp, [sp, #103]	; 0x67
  40bf84:	1d17      	adds	r7, r2, #4
  40bf86:	2b00      	cmp	r3, #0
  40bf88:	f000 864f 	beq.w	40cc2a <_vfprintf_r+0x11be>
  40bf8c:	2e00      	cmp	r6, #0
  40bf8e:	980e      	ldr	r0, [sp, #56]	; 0x38
  40bf90:	f2c0 8601 	blt.w	40cb96 <_vfprintf_r+0x112a>
  40bf94:	4659      	mov	r1, fp
  40bf96:	4632      	mov	r2, r6
  40bf98:	f7fc ff2a 	bl	408df0 <memchr>
  40bf9c:	2800      	cmp	r0, #0
  40bf9e:	f000 8680 	beq.w	40cca2 <_vfprintf_r+0x1236>
  40bfa2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  40bfa4:	f8cd b03c 	str.w	fp, [sp, #60]	; 0x3c
  40bfa8:	1ac3      	subs	r3, r0, r3
  40bfaa:	930b      	str	r3, [sp, #44]	; 0x2c
  40bfac:	970c      	str	r7, [sp, #48]	; 0x30
  40bfae:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  40bfb2:	9307      	str	r3, [sp, #28]
  40bfb4:	f8cd b040 	str.w	fp, [sp, #64]	; 0x40
  40bfb8:	f89d c067 	ldrb.w	ip, [sp, #103]	; 0x67
  40bfbc:	e6ae      	b.n	40bd1c <_vfprintf_r+0x2b0>
  40bfbe:	9308      	str	r3, [sp, #32]
  40bfc0:	4b1b      	ldr	r3, [pc, #108]	; (40c030 <_vfprintf_r+0x5c4>)
  40bfc2:	9314      	str	r3, [sp, #80]	; 0x50
  40bfc4:	9b06      	ldr	r3, [sp, #24]
  40bfc6:	f88d 2067 	strb.w	r2, [sp, #103]	; 0x67
  40bfca:	0699      	lsls	r1, r3, #26
  40bfcc:	46b2      	mov	sl, r6
  40bfce:	f140 814f 	bpl.w	40c270 <_vfprintf_r+0x804>
  40bfd2:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  40bfd4:	3707      	adds	r7, #7
  40bfd6:	f027 0307 	bic.w	r3, r7, #7
  40bfda:	e9d3 6700 	ldrd	r6, r7, [r3]
  40bfde:	f103 0208 	add.w	r2, r3, #8
  40bfe2:	920c      	str	r2, [sp, #48]	; 0x30
  40bfe4:	9b06      	ldr	r3, [sp, #24]
  40bfe6:	07db      	lsls	r3, r3, #31
  40bfe8:	f140 82de 	bpl.w	40c5a8 <_vfprintf_r+0xb3c>
  40bfec:	ea56 0307 	orrs.w	r3, r6, r7
  40bff0:	f000 82da 	beq.w	40c5a8 <_vfprintf_r+0xb3c>
  40bff4:	9a06      	ldr	r2, [sp, #24]
  40bff6:	f88d 5069 	strb.w	r5, [sp, #105]	; 0x69
  40bffa:	2330      	movs	r3, #48	; 0x30
  40bffc:	f042 0202 	orr.w	r2, r2, #2
  40c000:	f88d 3068 	strb.w	r3, [sp, #104]	; 0x68
  40c004:	9206      	str	r2, [sp, #24]
  40c006:	2302      	movs	r3, #2
  40c008:	e64e      	b.n	40bca8 <_vfprintf_r+0x23c>
  40c00a:	781d      	ldrb	r5, [r3, #0]
  40c00c:	4619      	mov	r1, r3
  40c00e:	2a00      	cmp	r2, #0
  40c010:	f47f ad9d 	bne.w	40bb4e <_vfprintf_r+0xe2>
  40c014:	2220      	movs	r2, #32
  40c016:	e59a      	b.n	40bb4e <_vfprintf_r+0xe2>
  40c018:	9906      	ldr	r1, [sp, #24]
  40c01a:	f041 0120 	orr.w	r1, r1, #32
  40c01e:	9106      	str	r1, [sp, #24]
  40c020:	781d      	ldrb	r5, [r3, #0]
  40c022:	4619      	mov	r1, r3
  40c024:	e593      	b.n	40bb4e <_vfprintf_r+0xe2>
  40c026:	bf00      	nop
  40c028:	00411c28 	.word	0x00411c28
  40c02c:	00411c18 	.word	0x00411c18
  40c030:	00411bdc 	.word	0x00411bdc
  40c034:	9308      	str	r3, [sp, #32]
  40c036:	9b06      	ldr	r3, [sp, #24]
  40c038:	f88d 2067 	strb.w	r2, [sp, #103]	; 0x67
  40c03c:	f043 0310 	orr.w	r3, r3, #16
  40c040:	9306      	str	r3, [sp, #24]
  40c042:	9b06      	ldr	r3, [sp, #24]
  40c044:	0699      	lsls	r1, r3, #26
  40c046:	46b2      	mov	sl, r6
  40c048:	f140 809c 	bpl.w	40c184 <_vfprintf_r+0x718>
  40c04c:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  40c04e:	3707      	adds	r7, #7
  40c050:	f027 0707 	bic.w	r7, r7, #7
  40c054:	e9d7 2300 	ldrd	r2, r3, [r7]
  40c058:	f107 0108 	add.w	r1, r7, #8
  40c05c:	910c      	str	r1, [sp, #48]	; 0x30
  40c05e:	4616      	mov	r6, r2
  40c060:	461f      	mov	r7, r3
  40c062:	2a00      	cmp	r2, #0
  40c064:	f173 0300 	sbcs.w	r3, r3, #0
  40c068:	f2c0 8415 	blt.w	40c896 <_vfprintf_r+0xe2a>
  40c06c:	f89d c067 	ldrb.w	ip, [sp, #103]	; 0x67
  40c070:	f8cd a03c 	str.w	sl, [sp, #60]	; 0x3c
  40c074:	2301      	movs	r3, #1
  40c076:	e61d      	b.n	40bcb4 <_vfprintf_r+0x248>
  40c078:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  40c07a:	9308      	str	r3, [sp, #32]
  40c07c:	3707      	adds	r7, #7
  40c07e:	f027 0307 	bic.w	r3, r7, #7
  40c082:	f88d 2067 	strb.w	r2, [sp, #103]	; 0x67
  40c086:	f103 0208 	add.w	r2, r3, #8
  40c08a:	920c      	str	r2, [sp, #48]	; 0x30
  40c08c:	681a      	ldr	r2, [r3, #0]
  40c08e:	9212      	str	r2, [sp, #72]	; 0x48
  40c090:	685b      	ldr	r3, [r3, #4]
  40c092:	9313      	str	r3, [sp, #76]	; 0x4c
  40c094:	9913      	ldr	r1, [sp, #76]	; 0x4c
  40c096:	9812      	ldr	r0, [sp, #72]	; 0x48
  40c098:	f002 fba0 	bl	40e7dc <__fpclassifyd>
  40c09c:	2801      	cmp	r0, #1
  40c09e:	46b3      	mov	fp, r6
  40c0a0:	9812      	ldr	r0, [sp, #72]	; 0x48
  40c0a2:	9913      	ldr	r1, [sp, #76]	; 0x4c
  40c0a4:	f040 8406 	bne.w	40c8b4 <_vfprintf_r+0xe48>
  40c0a8:	2200      	movs	r2, #0
  40c0aa:	2300      	movs	r3, #0
  40c0ac:	f7fa fe6e 	bl	406d8c <__aeabi_dcmplt>
  40c0b0:	2800      	cmp	r0, #0
  40c0b2:	f040 85ee 	bne.w	40cc92 <_vfprintf_r+0x1226>
  40c0b6:	f89d c067 	ldrb.w	ip, [sp, #103]	; 0x67
  40c0ba:	9e06      	ldr	r6, [sp, #24]
  40c0bc:	4a99      	ldr	r2, [pc, #612]	; (40c324 <_vfprintf_r+0x8b8>)
  40c0be:	4b9a      	ldr	r3, [pc, #616]	; (40c328 <_vfprintf_r+0x8bc>)
  40c0c0:	2103      	movs	r1, #3
  40c0c2:	2000      	movs	r0, #0
  40c0c4:	f026 0680 	bic.w	r6, r6, #128	; 0x80
  40c0c8:	2d47      	cmp	r5, #71	; 0x47
  40c0ca:	bfd8      	it	le
  40c0cc:	461a      	movle	r2, r3
  40c0ce:	9107      	str	r1, [sp, #28]
  40c0d0:	900f      	str	r0, [sp, #60]	; 0x3c
  40c0d2:	9606      	str	r6, [sp, #24]
  40c0d4:	920e      	str	r2, [sp, #56]	; 0x38
  40c0d6:	910b      	str	r1, [sp, #44]	; 0x2c
  40c0d8:	9010      	str	r0, [sp, #64]	; 0x40
  40c0da:	e61f      	b.n	40bd1c <_vfprintf_r+0x2b0>
  40c0dc:	9906      	ldr	r1, [sp, #24]
  40c0de:	f041 0108 	orr.w	r1, r1, #8
  40c0e2:	9106      	str	r1, [sp, #24]
  40c0e4:	781d      	ldrb	r5, [r3, #0]
  40c0e6:	4619      	mov	r1, r3
  40c0e8:	e531      	b.n	40bb4e <_vfprintf_r+0xe2>
  40c0ea:	781d      	ldrb	r5, [r3, #0]
  40c0ec:	4619      	mov	r1, r3
  40c0ee:	222b      	movs	r2, #43	; 0x2b
  40c0f0:	e52d      	b.n	40bb4e <_vfprintf_r+0xe2>
  40c0f2:	9906      	ldr	r1, [sp, #24]
  40c0f4:	f041 0180 	orr.w	r1, r1, #128	; 0x80
  40c0f8:	9106      	str	r1, [sp, #24]
  40c0fa:	781d      	ldrb	r5, [r3, #0]
  40c0fc:	4619      	mov	r1, r3
  40c0fe:	e526      	b.n	40bb4e <_vfprintf_r+0xe2>
  40c100:	f1a5 0030 	sub.w	r0, r5, #48	; 0x30
  40c104:	2100      	movs	r1, #0
  40c106:	f813 5b01 	ldrb.w	r5, [r3], #1
  40c10a:	eb01 0181 	add.w	r1, r1, r1, lsl #2
  40c10e:	eb00 0141 	add.w	r1, r0, r1, lsl #1
  40c112:	f1a5 0030 	sub.w	r0, r5, #48	; 0x30
  40c116:	2809      	cmp	r0, #9
  40c118:	d9f5      	bls.n	40c106 <_vfprintf_r+0x69a>
  40c11a:	910a      	str	r1, [sp, #40]	; 0x28
  40c11c:	e518      	b.n	40bb50 <_vfprintf_r+0xe4>
  40c11e:	990c      	ldr	r1, [sp, #48]	; 0x30
  40c120:	9308      	str	r3, [sp, #32]
  40c122:	2330      	movs	r3, #48	; 0x30
  40c124:	9a06      	ldr	r2, [sp, #24]
  40c126:	f88d 3068 	strb.w	r3, [sp, #104]	; 0x68
  40c12a:	460b      	mov	r3, r1
  40c12c:	3304      	adds	r3, #4
  40c12e:	2578      	movs	r5, #120	; 0x78
  40c130:	f042 0202 	orr.w	r2, r2, #2
  40c134:	930c      	str	r3, [sp, #48]	; 0x30
  40c136:	4b7d      	ldr	r3, [pc, #500]	; (40c32c <_vfprintf_r+0x8c0>)
  40c138:	9314      	str	r3, [sp, #80]	; 0x50
  40c13a:	46b2      	mov	sl, r6
  40c13c:	9206      	str	r2, [sp, #24]
  40c13e:	680e      	ldr	r6, [r1, #0]
  40c140:	f88d 5069 	strb.w	r5, [sp, #105]	; 0x69
  40c144:	2700      	movs	r7, #0
  40c146:	2302      	movs	r3, #2
  40c148:	e5ae      	b.n	40bca8 <_vfprintf_r+0x23c>
  40c14a:	9906      	ldr	r1, [sp, #24]
  40c14c:	f041 0101 	orr.w	r1, r1, #1
  40c150:	9106      	str	r1, [sp, #24]
  40c152:	781d      	ldrb	r5, [r3, #0]
  40c154:	4619      	mov	r1, r3
  40c156:	e4fa      	b.n	40bb4e <_vfprintf_r+0xe2>
  40c158:	9d0c      	ldr	r5, [sp, #48]	; 0x30
  40c15a:	6829      	ldr	r1, [r5, #0]
  40c15c:	910a      	str	r1, [sp, #40]	; 0x28
  40c15e:	4608      	mov	r0, r1
  40c160:	2800      	cmp	r0, #0
  40c162:	4629      	mov	r1, r5
  40c164:	f101 0104 	add.w	r1, r1, #4
  40c168:	f2c0 84e3 	blt.w	40cb32 <_vfprintf_r+0x10c6>
  40c16c:	910c      	str	r1, [sp, #48]	; 0x30
  40c16e:	781d      	ldrb	r5, [r3, #0]
  40c170:	4619      	mov	r1, r3
  40c172:	e4ec      	b.n	40bb4e <_vfprintf_r+0xe2>
  40c174:	9308      	str	r3, [sp, #32]
  40c176:	9b06      	ldr	r3, [sp, #24]
  40c178:	f88d 2067 	strb.w	r2, [sp, #103]	; 0x67
  40c17c:	0699      	lsls	r1, r3, #26
  40c17e:	46b2      	mov	sl, r6
  40c180:	f53f af64 	bmi.w	40c04c <_vfprintf_r+0x5e0>
  40c184:	9b06      	ldr	r3, [sp, #24]
  40c186:	06da      	lsls	r2, r3, #27
  40c188:	f100 8292 	bmi.w	40c6b0 <_vfprintf_r+0xc44>
  40c18c:	9b06      	ldr	r3, [sp, #24]
  40c18e:	065b      	lsls	r3, r3, #25
  40c190:	f140 828e 	bpl.w	40c6b0 <_vfprintf_r+0xc44>
  40c194:	990c      	ldr	r1, [sp, #48]	; 0x30
  40c196:	f9b1 6000 	ldrsh.w	r6, [r1]
  40c19a:	3104      	adds	r1, #4
  40c19c:	17f7      	asrs	r7, r6, #31
  40c19e:	4632      	mov	r2, r6
  40c1a0:	463b      	mov	r3, r7
  40c1a2:	910c      	str	r1, [sp, #48]	; 0x30
  40c1a4:	e75d      	b.n	40c062 <_vfprintf_r+0x5f6>
  40c1a6:	9906      	ldr	r1, [sp, #24]
  40c1a8:	f041 0140 	orr.w	r1, r1, #64	; 0x40
  40c1ac:	9106      	str	r1, [sp, #24]
  40c1ae:	781d      	ldrb	r5, [r3, #0]
  40c1b0:	4619      	mov	r1, r3
  40c1b2:	e4cc      	b.n	40bb4e <_vfprintf_r+0xe2>
  40c1b4:	781d      	ldrb	r5, [r3, #0]
  40c1b6:	9906      	ldr	r1, [sp, #24]
  40c1b8:	2d6c      	cmp	r5, #108	; 0x6c
  40c1ba:	f000 84b3 	beq.w	40cb24 <_vfprintf_r+0x10b8>
  40c1be:	f041 0110 	orr.w	r1, r1, #16
  40c1c2:	9106      	str	r1, [sp, #24]
  40c1c4:	4619      	mov	r1, r3
  40c1c6:	e4c2      	b.n	40bb4e <_vfprintf_r+0xe2>
  40c1c8:	9308      	str	r3, [sp, #32]
  40c1ca:	9b06      	ldr	r3, [sp, #24]
  40c1cc:	f88d 2067 	strb.w	r2, [sp, #103]	; 0x67
  40c1d0:	069a      	lsls	r2, r3, #26
  40c1d2:	f140 8400 	bpl.w	40c9d6 <_vfprintf_r+0xf6a>
  40c1d6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  40c1d8:	9909      	ldr	r1, [sp, #36]	; 0x24
  40c1da:	6813      	ldr	r3, [r2, #0]
  40c1dc:	17cf      	asrs	r7, r1, #31
  40c1de:	4608      	mov	r0, r1
  40c1e0:	3204      	adds	r2, #4
  40c1e2:	4639      	mov	r1, r7
  40c1e4:	920c      	str	r2, [sp, #48]	; 0x30
  40c1e6:	e9c3 0100 	strd	r0, r1, [r3]
  40c1ea:	e480      	b.n	40baee <_vfprintf_r+0x82>
  40c1ec:	781d      	ldrb	r5, [r3, #0]
  40c1ee:	2d2a      	cmp	r5, #42	; 0x2a
  40c1f0:	f103 0101 	add.w	r1, r3, #1
  40c1f4:	f000 860e 	beq.w	40ce14 <_vfprintf_r+0x13a8>
  40c1f8:	f1a5 0030 	sub.w	r0, r5, #48	; 0x30
  40c1fc:	2809      	cmp	r0, #9
  40c1fe:	460b      	mov	r3, r1
  40c200:	f04f 0600 	mov.w	r6, #0
  40c204:	f63f aca4 	bhi.w	40bb50 <_vfprintf_r+0xe4>
  40c208:	f813 5b01 	ldrb.w	r5, [r3], #1
  40c20c:	eb06 0686 	add.w	r6, r6, r6, lsl #2
  40c210:	eb00 0646 	add.w	r6, r0, r6, lsl #1
  40c214:	f1a5 0030 	sub.w	r0, r5, #48	; 0x30
  40c218:	2809      	cmp	r0, #9
  40c21a:	d9f5      	bls.n	40c208 <_vfprintf_r+0x79c>
  40c21c:	ea46 76e6 	orr.w	r6, r6, r6, asr #31
  40c220:	e496      	b.n	40bb50 <_vfprintf_r+0xe4>
  40c222:	9308      	str	r3, [sp, #32]
  40c224:	9b06      	ldr	r3, [sp, #24]
  40c226:	f043 0310 	orr.w	r3, r3, #16
  40c22a:	9306      	str	r3, [sp, #24]
  40c22c:	9b06      	ldr	r3, [sp, #24]
  40c22e:	f013 0320 	ands.w	r3, r3, #32
  40c232:	46b2      	mov	sl, r6
  40c234:	f47f ae93 	bne.w	40bf5e <_vfprintf_r+0x4f2>
  40c238:	9a06      	ldr	r2, [sp, #24]
  40c23a:	f012 0210 	ands.w	r2, r2, #16
  40c23e:	f040 8240 	bne.w	40c6c2 <_vfprintf_r+0xc56>
  40c242:	9b06      	ldr	r3, [sp, #24]
  40c244:	f013 0340 	ands.w	r3, r3, #64	; 0x40
  40c248:	f000 823b 	beq.w	40c6c2 <_vfprintf_r+0xc56>
  40c24c:	990c      	ldr	r1, [sp, #48]	; 0x30
  40c24e:	4613      	mov	r3, r2
  40c250:	460a      	mov	r2, r1
  40c252:	3204      	adds	r2, #4
  40c254:	880e      	ldrh	r6, [r1, #0]
  40c256:	920c      	str	r2, [sp, #48]	; 0x30
  40c258:	2700      	movs	r7, #0
  40c25a:	e525      	b.n	40bca8 <_vfprintf_r+0x23c>
  40c25c:	9308      	str	r3, [sp, #32]
  40c25e:	4b34      	ldr	r3, [pc, #208]	; (40c330 <_vfprintf_r+0x8c4>)
  40c260:	9314      	str	r3, [sp, #80]	; 0x50
  40c262:	9b06      	ldr	r3, [sp, #24]
  40c264:	f88d 2067 	strb.w	r2, [sp, #103]	; 0x67
  40c268:	0699      	lsls	r1, r3, #26
  40c26a:	46b2      	mov	sl, r6
  40c26c:	f53f aeb1 	bmi.w	40bfd2 <_vfprintf_r+0x566>
  40c270:	9b06      	ldr	r3, [sp, #24]
  40c272:	06da      	lsls	r2, r3, #27
  40c274:	f140 83c6 	bpl.w	40ca04 <_vfprintf_r+0xf98>
  40c278:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  40c27a:	4613      	mov	r3, r2
  40c27c:	3304      	adds	r3, #4
  40c27e:	6816      	ldr	r6, [r2, #0]
  40c280:	930c      	str	r3, [sp, #48]	; 0x30
  40c282:	2700      	movs	r7, #0
  40c284:	e6ae      	b.n	40bfe4 <_vfprintf_r+0x578>
  40c286:	990c      	ldr	r1, [sp, #48]	; 0x30
  40c288:	9308      	str	r3, [sp, #32]
  40c28a:	680a      	ldr	r2, [r1, #0]
  40c28c:	f88d 2090 	strb.w	r2, [sp, #144]	; 0x90
  40c290:	2300      	movs	r3, #0
  40c292:	2201      	movs	r2, #1
  40c294:	3104      	adds	r1, #4
  40c296:	469c      	mov	ip, r3
  40c298:	9207      	str	r2, [sp, #28]
  40c29a:	910c      	str	r1, [sp, #48]	; 0x30
  40c29c:	f88d 3067 	strb.w	r3, [sp, #103]	; 0x67
  40c2a0:	ab24      	add	r3, sp, #144	; 0x90
  40c2a2:	f8cd c03c 	str.w	ip, [sp, #60]	; 0x3c
  40c2a6:	f8cd c040 	str.w	ip, [sp, #64]	; 0x40
  40c2aa:	920b      	str	r2, [sp, #44]	; 0x2c
  40c2ac:	930e      	str	r3, [sp, #56]	; 0x38
  40c2ae:	e53b      	b.n	40bd28 <_vfprintf_r+0x2bc>
  40c2b0:	9308      	str	r3, [sp, #32]
  40c2b2:	9b06      	ldr	r3, [sp, #24]
  40c2b4:	f043 0310 	orr.w	r3, r3, #16
  40c2b8:	9306      	str	r3, [sp, #24]
  40c2ba:	9b06      	ldr	r3, [sp, #24]
  40c2bc:	46b2      	mov	sl, r6
  40c2be:	069e      	lsls	r6, r3, #26
  40c2c0:	f53f ace8 	bmi.w	40bc94 <_vfprintf_r+0x228>
  40c2c4:	9b06      	ldr	r3, [sp, #24]
  40c2c6:	06d8      	lsls	r0, r3, #27
  40c2c8:	f140 8377 	bpl.w	40c9ba <_vfprintf_r+0xf4e>
  40c2cc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  40c2ce:	4613      	mov	r3, r2
  40c2d0:	3204      	adds	r2, #4
  40c2d2:	681e      	ldr	r6, [r3, #0]
  40c2d4:	920c      	str	r2, [sp, #48]	; 0x30
  40c2d6:	2301      	movs	r3, #1
  40c2d8:	2700      	movs	r7, #0
  40c2da:	e4e5      	b.n	40bca8 <_vfprintf_r+0x23c>
  40c2dc:	9308      	str	r3, [sp, #32]
  40c2de:	f88d 2067 	strb.w	r2, [sp, #103]	; 0x67
  40c2e2:	2d00      	cmp	r5, #0
  40c2e4:	f43f acbb 	beq.w	40bc5e <_vfprintf_r+0x1f2>
  40c2e8:	2300      	movs	r3, #0
  40c2ea:	2201      	movs	r2, #1
  40c2ec:	469c      	mov	ip, r3
  40c2ee:	9207      	str	r2, [sp, #28]
  40c2f0:	f88d 5090 	strb.w	r5, [sp, #144]	; 0x90
  40c2f4:	e7d2      	b.n	40c29c <_vfprintf_r+0x830>
  40c2f6:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
  40c2fa:	e561      	b.n	40bdc0 <_vfprintf_r+0x354>
  40c2fc:	2b01      	cmp	r3, #1
  40c2fe:	f47f aceb 	bne.w	40bcd8 <_vfprintf_r+0x26c>
  40c302:	2f00      	cmp	r7, #0
  40c304:	bf08      	it	eq
  40c306:	2e0a      	cmpeq	r6, #10
  40c308:	f080 81ef 	bcs.w	40c6ea <_vfprintf_r+0xc7e>
  40c30c:	f10d 0bf8 	add.w	fp, sp, #248	; 0xf8
  40c310:	3630      	adds	r6, #48	; 0x30
  40c312:	f80b 6d41 	strb.w	r6, [fp, #-65]!
  40c316:	ab2e      	add	r3, sp, #184	; 0xb8
  40c318:	ebcb 0303 	rsb	r3, fp, r3
  40c31c:	930b      	str	r3, [sp, #44]	; 0x2c
  40c31e:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
  40c322:	e4f3      	b.n	40bd0c <_vfprintf_r+0x2a0>
  40c324:	00411bbc 	.word	0x00411bbc
  40c328:	00411bb8 	.word	0x00411bb8
  40c32c:	00411bdc 	.word	0x00411bdc
  40c330:	00411bc8 	.word	0x00411bc8
  40c334:	2d65      	cmp	r5, #101	; 0x65
  40c336:	f340 808a 	ble.w	40c44e <_vfprintf_r+0x9e2>
  40c33a:	9812      	ldr	r0, [sp, #72]	; 0x48
  40c33c:	9913      	ldr	r1, [sp, #76]	; 0x4c
  40c33e:	2200      	movs	r2, #0
  40c340:	2300      	movs	r3, #0
  40c342:	f7fa fd19 	bl	406d78 <__aeabi_dcmpeq>
  40c346:	2800      	cmp	r0, #0
  40c348:	f000 8131 	beq.w	40c5ae <_vfprintf_r+0xb42>
  40c34c:	9b22      	ldr	r3, [sp, #136]	; 0x88
  40c34e:	4aba      	ldr	r2, [pc, #744]	; (40c638 <_vfprintf_r+0xbcc>)
  40c350:	6022      	str	r2, [r4, #0]
  40c352:	3301      	adds	r3, #1
  40c354:	f10b 0b01 	add.w	fp, fp, #1
  40c358:	2201      	movs	r2, #1
  40c35a:	2b07      	cmp	r3, #7
  40c35c:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
  40c360:	9322      	str	r3, [sp, #136]	; 0x88
  40c362:	6062      	str	r2, [r4, #4]
  40c364:	f300 8367 	bgt.w	40ca36 <_vfprintf_r+0xfca>
  40c368:	3408      	adds	r4, #8
  40c36a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
  40c36c:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40c36e:	4293      	cmp	r3, r2
  40c370:	db03      	blt.n	40c37a <_vfprintf_r+0x90e>
  40c372:	9b06      	ldr	r3, [sp, #24]
  40c374:	07df      	lsls	r7, r3, #31
  40c376:	f57f ad96 	bpl.w	40bea6 <_vfprintf_r+0x43a>
  40c37a:	9b22      	ldr	r3, [sp, #136]	; 0x88
  40c37c:	9916      	ldr	r1, [sp, #88]	; 0x58
  40c37e:	9a15      	ldr	r2, [sp, #84]	; 0x54
  40c380:	6022      	str	r2, [r4, #0]
  40c382:	3301      	adds	r3, #1
  40c384:	448b      	add	fp, r1
  40c386:	2b07      	cmp	r3, #7
  40c388:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
  40c38c:	6061      	str	r1, [r4, #4]
  40c38e:	9322      	str	r3, [sp, #136]	; 0x88
  40c390:	f300 83d6 	bgt.w	40cb40 <_vfprintf_r+0x10d4>
  40c394:	3408      	adds	r4, #8
  40c396:	9b11      	ldr	r3, [sp, #68]	; 0x44
  40c398:	1e5d      	subs	r5, r3, #1
  40c39a:	2d00      	cmp	r5, #0
  40c39c:	f77f ad83 	ble.w	40bea6 <_vfprintf_r+0x43a>
  40c3a0:	2d10      	cmp	r5, #16
  40c3a2:	9b22      	ldr	r3, [sp, #136]	; 0x88
  40c3a4:	4fa5      	ldr	r7, [pc, #660]	; (40c63c <_vfprintf_r+0xbd0>)
  40c3a6:	f340 8195 	ble.w	40c6d4 <_vfprintf_r+0xc68>
  40c3aa:	2610      	movs	r6, #16
  40c3ac:	465a      	mov	r2, fp
  40c3ae:	e004      	b.n	40c3ba <_vfprintf_r+0x94e>
  40c3b0:	3408      	adds	r4, #8
  40c3b2:	3d10      	subs	r5, #16
  40c3b4:	2d10      	cmp	r5, #16
  40c3b6:	f340 818c 	ble.w	40c6d2 <_vfprintf_r+0xc66>
  40c3ba:	3301      	adds	r3, #1
  40c3bc:	3210      	adds	r2, #16
  40c3be:	2b07      	cmp	r3, #7
  40c3c0:	9223      	str	r2, [sp, #140]	; 0x8c
  40c3c2:	9322      	str	r3, [sp, #136]	; 0x88
  40c3c4:	6027      	str	r7, [r4, #0]
  40c3c6:	6066      	str	r6, [r4, #4]
  40c3c8:	ddf2      	ble.n	40c3b0 <_vfprintf_r+0x944>
  40c3ca:	4640      	mov	r0, r8
  40c3cc:	4649      	mov	r1, r9
  40c3ce:	aa21      	add	r2, sp, #132	; 0x84
  40c3d0:	f7fe fcfc 	bl	40adcc <__sprint_r>
  40c3d4:	2800      	cmp	r0, #0
  40c3d6:	f47f ac49 	bne.w	40bc6c <_vfprintf_r+0x200>
  40c3da:	9a23      	ldr	r2, [sp, #140]	; 0x8c
  40c3dc:	9b22      	ldr	r3, [sp, #136]	; 0x88
  40c3de:	ac2e      	add	r4, sp, #184	; 0xb8
  40c3e0:	e7e7      	b.n	40c3b2 <_vfprintf_r+0x946>
  40c3e2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40c3e4:	9a07      	ldr	r2, [sp, #28]
  40c3e6:	1a9e      	subs	r6, r3, r2
  40c3e8:	2e00      	cmp	r6, #0
  40c3ea:	f77f ad10 	ble.w	40be0e <_vfprintf_r+0x3a2>
  40c3ee:	2e10      	cmp	r6, #16
  40c3f0:	9a22      	ldr	r2, [sp, #136]	; 0x88
  40c3f2:	4f92      	ldr	r7, [pc, #584]	; (40c63c <_vfprintf_r+0xbd0>)
  40c3f4:	dd1f      	ble.n	40c436 <_vfprintf_r+0x9ca>
  40c3f6:	f04f 0a10 	mov.w	sl, #16
  40c3fa:	465b      	mov	r3, fp
  40c3fc:	e004      	b.n	40c408 <_vfprintf_r+0x99c>
  40c3fe:	3e10      	subs	r6, #16
  40c400:	2e10      	cmp	r6, #16
  40c402:	f104 0408 	add.w	r4, r4, #8
  40c406:	dd15      	ble.n	40c434 <_vfprintf_r+0x9c8>
  40c408:	3201      	adds	r2, #1
  40c40a:	3310      	adds	r3, #16
  40c40c:	2a07      	cmp	r2, #7
  40c40e:	9323      	str	r3, [sp, #140]	; 0x8c
  40c410:	9222      	str	r2, [sp, #136]	; 0x88
  40c412:	e884 0480 	stmia.w	r4, {r7, sl}
  40c416:	ddf2      	ble.n	40c3fe <_vfprintf_r+0x992>
  40c418:	4640      	mov	r0, r8
  40c41a:	4649      	mov	r1, r9
  40c41c:	aa21      	add	r2, sp, #132	; 0x84
  40c41e:	f7fe fcd5 	bl	40adcc <__sprint_r>
  40c422:	2800      	cmp	r0, #0
  40c424:	f47f ac22 	bne.w	40bc6c <_vfprintf_r+0x200>
  40c428:	3e10      	subs	r6, #16
  40c42a:	2e10      	cmp	r6, #16
  40c42c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
  40c42e:	9a22      	ldr	r2, [sp, #136]	; 0x88
  40c430:	ac2e      	add	r4, sp, #184	; 0xb8
  40c432:	dce9      	bgt.n	40c408 <_vfprintf_r+0x99c>
  40c434:	469b      	mov	fp, r3
  40c436:	3201      	adds	r2, #1
  40c438:	44b3      	add	fp, r6
  40c43a:	2a07      	cmp	r2, #7
  40c43c:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
  40c440:	9222      	str	r2, [sp, #136]	; 0x88
  40c442:	6027      	str	r7, [r4, #0]
  40c444:	6066      	str	r6, [r4, #4]
  40c446:	f300 8219 	bgt.w	40c87c <_vfprintf_r+0xe10>
  40c44a:	3408      	adds	r4, #8
  40c44c:	e4df      	b.n	40be0e <_vfprintf_r+0x3a2>
  40c44e:	9b11      	ldr	r3, [sp, #68]	; 0x44
  40c450:	9d22      	ldr	r5, [sp, #136]	; 0x88
  40c452:	2b01      	cmp	r3, #1
  40c454:	f340 81d4 	ble.w	40c800 <_vfprintf_r+0xd94>
  40c458:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  40c45a:	6023      	str	r3, [r4, #0]
  40c45c:	3501      	adds	r5, #1
  40c45e:	f10b 0601 	add.w	r6, fp, #1
  40c462:	2301      	movs	r3, #1
  40c464:	2d07      	cmp	r5, #7
  40c466:	9623      	str	r6, [sp, #140]	; 0x8c
  40c468:	9522      	str	r5, [sp, #136]	; 0x88
  40c46a:	6063      	str	r3, [r4, #4]
  40c46c:	f300 81e4 	bgt.w	40c838 <_vfprintf_r+0xdcc>
  40c470:	3408      	adds	r4, #8
  40c472:	9a16      	ldr	r2, [sp, #88]	; 0x58
  40c474:	9b15      	ldr	r3, [sp, #84]	; 0x54
  40c476:	6023      	str	r3, [r4, #0]
  40c478:	3501      	adds	r5, #1
  40c47a:	4416      	add	r6, r2
  40c47c:	2d07      	cmp	r5, #7
  40c47e:	9623      	str	r6, [sp, #140]	; 0x8c
  40c480:	9522      	str	r5, [sp, #136]	; 0x88
  40c482:	6062      	str	r2, [r4, #4]
  40c484:	f300 81e4 	bgt.w	40c850 <_vfprintf_r+0xde4>
  40c488:	3408      	adds	r4, #8
  40c48a:	2300      	movs	r3, #0
  40c48c:	9812      	ldr	r0, [sp, #72]	; 0x48
  40c48e:	9913      	ldr	r1, [sp, #76]	; 0x4c
  40c490:	2200      	movs	r2, #0
  40c492:	f7fa fc71 	bl	406d78 <__aeabi_dcmpeq>
  40c496:	9b11      	ldr	r3, [sp, #68]	; 0x44
  40c498:	2800      	cmp	r0, #0
  40c49a:	f040 80e0 	bne.w	40c65e <_vfprintf_r+0xbf2>
  40c49e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  40c4a0:	3b01      	subs	r3, #1
  40c4a2:	3501      	adds	r5, #1
  40c4a4:	3201      	adds	r2, #1
  40c4a6:	441e      	add	r6, r3
  40c4a8:	2d07      	cmp	r5, #7
  40c4aa:	9522      	str	r5, [sp, #136]	; 0x88
  40c4ac:	9623      	str	r6, [sp, #140]	; 0x8c
  40c4ae:	6022      	str	r2, [r4, #0]
  40c4b0:	6063      	str	r3, [r4, #4]
  40c4b2:	f300 81b5 	bgt.w	40c820 <_vfprintf_r+0xdb4>
  40c4b6:	3408      	adds	r4, #8
  40c4b8:	9a17      	ldr	r2, [sp, #92]	; 0x5c
  40c4ba:	6062      	str	r2, [r4, #4]
  40c4bc:	3501      	adds	r5, #1
  40c4be:	eb06 0b02 	add.w	fp, r6, r2
  40c4c2:	ab1d      	add	r3, sp, #116	; 0x74
  40c4c4:	2d07      	cmp	r5, #7
  40c4c6:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
  40c4ca:	9522      	str	r5, [sp, #136]	; 0x88
  40c4cc:	6023      	str	r3, [r4, #0]
  40c4ce:	f77f ace9 	ble.w	40bea4 <_vfprintf_r+0x438>
  40c4d2:	4640      	mov	r0, r8
  40c4d4:	4649      	mov	r1, r9
  40c4d6:	aa21      	add	r2, sp, #132	; 0x84
  40c4d8:	f7fe fc78 	bl	40adcc <__sprint_r>
  40c4dc:	2800      	cmp	r0, #0
  40c4de:	f47f abc5 	bne.w	40bc6c <_vfprintf_r+0x200>
  40c4e2:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
  40c4e6:	ac2e      	add	r4, sp, #184	; 0xb8
  40c4e8:	e4dd      	b.n	40bea6 <_vfprintf_r+0x43a>
  40c4ea:	4640      	mov	r0, r8
  40c4ec:	4649      	mov	r1, r9
  40c4ee:	aa21      	add	r2, sp, #132	; 0x84
  40c4f0:	f7fe fc6c 	bl	40adcc <__sprint_r>
  40c4f4:	2800      	cmp	r0, #0
  40c4f6:	f43f ad20 	beq.w	40bf3a <_vfprintf_r+0x4ce>
  40c4fa:	f7ff bbb7 	b.w	40bc6c <_vfprintf_r+0x200>
  40c4fe:	2b00      	cmp	r3, #0
  40c500:	d133      	bne.n	40c56a <_vfprintf_r+0xafe>
  40c502:	9b06      	ldr	r3, [sp, #24]
  40c504:	07da      	lsls	r2, r3, #31
  40c506:	d530      	bpl.n	40c56a <_vfprintf_r+0xafe>
  40c508:	f10d 0bf8 	add.w	fp, sp, #248	; 0xf8
  40c50c:	2330      	movs	r3, #48	; 0x30
  40c50e:	f80b 3d41 	strb.w	r3, [fp, #-65]!
  40c512:	ab2e      	add	r3, sp, #184	; 0xb8
  40c514:	ebcb 0303 	rsb	r3, fp, r3
  40c518:	930b      	str	r3, [sp, #44]	; 0x2c
  40c51a:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
  40c51e:	f7ff bbf5 	b.w	40bd0c <_vfprintf_r+0x2a0>
  40c522:	4640      	mov	r0, r8
  40c524:	4649      	mov	r1, r9
  40c526:	aa21      	add	r2, sp, #132	; 0x84
  40c528:	f7fe fc50 	bl	40adcc <__sprint_r>
  40c52c:	2800      	cmp	r0, #0
  40c52e:	f47f ab9d 	bne.w	40bc6c <_vfprintf_r+0x200>
  40c532:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
  40c536:	ac2e      	add	r4, sp, #184	; 0xb8
  40c538:	e4a3      	b.n	40be82 <_vfprintf_r+0x416>
  40c53a:	4640      	mov	r0, r8
  40c53c:	4649      	mov	r1, r9
  40c53e:	aa21      	add	r2, sp, #132	; 0x84
  40c540:	f7fe fc44 	bl	40adcc <__sprint_r>
  40c544:	2800      	cmp	r0, #0
  40c546:	f47f ab91 	bne.w	40bc6c <_vfprintf_r+0x200>
  40c54a:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
  40c54e:	ac2e      	add	r4, sp, #184	; 0xb8
  40c550:	e45a      	b.n	40be08 <_vfprintf_r+0x39c>
  40c552:	4640      	mov	r0, r8
  40c554:	4649      	mov	r1, r9
  40c556:	aa21      	add	r2, sp, #132	; 0x84
  40c558:	f7fe fc38 	bl	40adcc <__sprint_r>
  40c55c:	2800      	cmp	r0, #0
  40c55e:	f47f ab85 	bne.w	40bc6c <_vfprintf_r+0x200>
  40c562:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
  40c566:	ac2e      	add	r4, sp, #184	; 0xb8
  40c568:	e43d      	b.n	40bde6 <_vfprintf_r+0x37a>
  40c56a:	ab2e      	add	r3, sp, #184	; 0xb8
  40c56c:	f8cd a02c 	str.w	sl, [sp, #44]	; 0x2c
  40c570:	930e      	str	r3, [sp, #56]	; 0x38
  40c572:	f7ff bbcb 	b.w	40bd0c <_vfprintf_r+0x2a0>
  40c576:	9814      	ldr	r0, [sp, #80]	; 0x50
  40c578:	f10d 0bb8 	add.w	fp, sp, #184	; 0xb8
  40c57c:	0933      	lsrs	r3, r6, #4
  40c57e:	f006 010f 	and.w	r1, r6, #15
  40c582:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
  40c586:	093a      	lsrs	r2, r7, #4
  40c588:	461e      	mov	r6, r3
  40c58a:	4617      	mov	r7, r2
  40c58c:	5c43      	ldrb	r3, [r0, r1]
  40c58e:	f80b 3d01 	strb.w	r3, [fp, #-1]!
  40c592:	ea56 0307 	orrs.w	r3, r6, r7
  40c596:	d1f1      	bne.n	40c57c <_vfprintf_r+0xb10>
  40c598:	465a      	mov	r2, fp
  40c59a:	ab2e      	add	r3, sp, #184	; 0xb8
  40c59c:	1a9b      	subs	r3, r3, r2
  40c59e:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
  40c5a2:	930b      	str	r3, [sp, #44]	; 0x2c
  40c5a4:	f7ff bbb2 	b.w	40bd0c <_vfprintf_r+0x2a0>
  40c5a8:	2302      	movs	r3, #2
  40c5aa:	f7ff bb7d 	b.w	40bca8 <_vfprintf_r+0x23c>
  40c5ae:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
  40c5b0:	2d00      	cmp	r5, #0
  40c5b2:	f340 824c 	ble.w	40ca4e <_vfprintf_r+0xfe2>
  40c5b6:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40c5b8:	9910      	ldr	r1, [sp, #64]	; 0x40
  40c5ba:	428a      	cmp	r2, r1
  40c5bc:	4613      	mov	r3, r2
  40c5be:	bfa8      	it	ge
  40c5c0:	460b      	movge	r3, r1
  40c5c2:	461d      	mov	r5, r3
  40c5c4:	990e      	ldr	r1, [sp, #56]	; 0x38
  40c5c6:	2d00      	cmp	r5, #0
  40c5c8:	eb01 0a02 	add.w	sl, r1, r2
  40c5cc:	dd0b      	ble.n	40c5e6 <_vfprintf_r+0xb7a>
  40c5ce:	9b22      	ldr	r3, [sp, #136]	; 0x88
  40c5d0:	6021      	str	r1, [r4, #0]
  40c5d2:	3301      	adds	r3, #1
  40c5d4:	44ab      	add	fp, r5
  40c5d6:	2b07      	cmp	r3, #7
  40c5d8:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
  40c5dc:	6065      	str	r5, [r4, #4]
  40c5de:	9322      	str	r3, [sp, #136]	; 0x88
  40c5e0:	f300 8300 	bgt.w	40cbe4 <_vfprintf_r+0x1178>
  40c5e4:	3408      	adds	r4, #8
  40c5e6:	9b10      	ldr	r3, [sp, #64]	; 0x40
  40c5e8:	2d00      	cmp	r5, #0
  40c5ea:	bfa8      	it	ge
  40c5ec:	1b5b      	subge	r3, r3, r5
  40c5ee:	2b00      	cmp	r3, #0
  40c5f0:	461d      	mov	r5, r3
  40c5f2:	f340 80af 	ble.w	40c754 <_vfprintf_r+0xce8>
  40c5f6:	2d10      	cmp	r5, #16
  40c5f8:	9b22      	ldr	r3, [sp, #136]	; 0x88
  40c5fa:	4f10      	ldr	r7, [pc, #64]	; (40c63c <_vfprintf_r+0xbd0>)
  40c5fc:	f340 820f 	ble.w	40ca1e <_vfprintf_r+0xfb2>
  40c600:	2610      	movs	r6, #16
  40c602:	465a      	mov	r2, fp
  40c604:	e004      	b.n	40c610 <_vfprintf_r+0xba4>
  40c606:	3408      	adds	r4, #8
  40c608:	3d10      	subs	r5, #16
  40c60a:	2d10      	cmp	r5, #16
  40c60c:	f340 8206 	ble.w	40ca1c <_vfprintf_r+0xfb0>
  40c610:	3301      	adds	r3, #1
  40c612:	3210      	adds	r2, #16
  40c614:	2b07      	cmp	r3, #7
  40c616:	9223      	str	r2, [sp, #140]	; 0x8c
  40c618:	9322      	str	r3, [sp, #136]	; 0x88
  40c61a:	6027      	str	r7, [r4, #0]
  40c61c:	6066      	str	r6, [r4, #4]
  40c61e:	ddf2      	ble.n	40c606 <_vfprintf_r+0xb9a>
  40c620:	4640      	mov	r0, r8
  40c622:	4649      	mov	r1, r9
  40c624:	aa21      	add	r2, sp, #132	; 0x84
  40c626:	f7fe fbd1 	bl	40adcc <__sprint_r>
  40c62a:	2800      	cmp	r0, #0
  40c62c:	f47f ab1e 	bne.w	40bc6c <_vfprintf_r+0x200>
  40c630:	9a23      	ldr	r2, [sp, #140]	; 0x8c
  40c632:	9b22      	ldr	r3, [sp, #136]	; 0x88
  40c634:	ac2e      	add	r4, sp, #184	; 0xb8
  40c636:	e7e7      	b.n	40c608 <_vfprintf_r+0xb9c>
  40c638:	004119f8 	.word	0x004119f8
  40c63c:	00411c18 	.word	0x00411c18
  40c640:	4640      	mov	r0, r8
  40c642:	4649      	mov	r1, r9
  40c644:	aa21      	add	r2, sp, #132	; 0x84
  40c646:	f7fe fbc1 	bl	40adcc <__sprint_r>
  40c64a:	2800      	cmp	r0, #0
  40c64c:	f47f ab0e 	bne.w	40bc6c <_vfprintf_r+0x200>
  40c650:	f89d c067 	ldrb.w	ip, [sp, #103]	; 0x67
  40c654:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
  40c658:	ac2e      	add	r4, sp, #184	; 0xb8
  40c65a:	f7ff bbb1 	b.w	40bdc0 <_vfprintf_r+0x354>
  40c65e:	f103 3aff 	add.w	sl, r3, #4294967295
  40c662:	f1ba 0f00 	cmp.w	sl, #0
  40c666:	f77f af27 	ble.w	40c4b8 <_vfprintf_r+0xa4c>
  40c66a:	f1ba 0f10 	cmp.w	sl, #16
  40c66e:	4f90      	ldr	r7, [pc, #576]	; (40c8b0 <_vfprintf_r+0xe44>)
  40c670:	bfc8      	it	gt
  40c672:	f04f 0b10 	movgt.w	fp, #16
  40c676:	dc07      	bgt.n	40c688 <_vfprintf_r+0xc1c>
  40c678:	e0f6      	b.n	40c868 <_vfprintf_r+0xdfc>
  40c67a:	3408      	adds	r4, #8
  40c67c:	f1aa 0a10 	sub.w	sl, sl, #16
  40c680:	f1ba 0f10 	cmp.w	sl, #16
  40c684:	f340 80f0 	ble.w	40c868 <_vfprintf_r+0xdfc>
  40c688:	3501      	adds	r5, #1
  40c68a:	3610      	adds	r6, #16
  40c68c:	2d07      	cmp	r5, #7
  40c68e:	9623      	str	r6, [sp, #140]	; 0x8c
  40c690:	9522      	str	r5, [sp, #136]	; 0x88
  40c692:	e884 0880 	stmia.w	r4, {r7, fp}
  40c696:	ddf0      	ble.n	40c67a <_vfprintf_r+0xc0e>
  40c698:	4640      	mov	r0, r8
  40c69a:	4649      	mov	r1, r9
  40c69c:	aa21      	add	r2, sp, #132	; 0x84
  40c69e:	f7fe fb95 	bl	40adcc <__sprint_r>
  40c6a2:	2800      	cmp	r0, #0
  40c6a4:	f47f aae2 	bne.w	40bc6c <_vfprintf_r+0x200>
  40c6a8:	9e23      	ldr	r6, [sp, #140]	; 0x8c
  40c6aa:	9d22      	ldr	r5, [sp, #136]	; 0x88
  40c6ac:	ac2e      	add	r4, sp, #184	; 0xb8
  40c6ae:	e7e5      	b.n	40c67c <_vfprintf_r+0xc10>
  40c6b0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  40c6b2:	6816      	ldr	r6, [r2, #0]
  40c6b4:	4613      	mov	r3, r2
  40c6b6:	3304      	adds	r3, #4
  40c6b8:	17f7      	asrs	r7, r6, #31
  40c6ba:	930c      	str	r3, [sp, #48]	; 0x30
  40c6bc:	4632      	mov	r2, r6
  40c6be:	463b      	mov	r3, r7
  40c6c0:	e4cf      	b.n	40c062 <_vfprintf_r+0x5f6>
  40c6c2:	990c      	ldr	r1, [sp, #48]	; 0x30
  40c6c4:	460a      	mov	r2, r1
  40c6c6:	3204      	adds	r2, #4
  40c6c8:	680e      	ldr	r6, [r1, #0]
  40c6ca:	920c      	str	r2, [sp, #48]	; 0x30
  40c6cc:	2700      	movs	r7, #0
  40c6ce:	f7ff baeb 	b.w	40bca8 <_vfprintf_r+0x23c>
  40c6d2:	4693      	mov	fp, r2
  40c6d4:	3301      	adds	r3, #1
  40c6d6:	44ab      	add	fp, r5
  40c6d8:	2b07      	cmp	r3, #7
  40c6da:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
  40c6de:	9322      	str	r3, [sp, #136]	; 0x88
  40c6e0:	6027      	str	r7, [r4, #0]
  40c6e2:	6065      	str	r5, [r4, #4]
  40c6e4:	f77f abde 	ble.w	40bea4 <_vfprintf_r+0x438>
  40c6e8:	e6f3      	b.n	40c4d2 <_vfprintf_r+0xa66>
  40c6ea:	f10d 0bb8 	add.w	fp, sp, #184	; 0xb8
  40c6ee:	f8cd c01c 	str.w	ip, [sp, #28]
  40c6f2:	4630      	mov	r0, r6
  40c6f4:	4639      	mov	r1, r7
  40c6f6:	220a      	movs	r2, #10
  40c6f8:	2300      	movs	r3, #0
  40c6fa:	f002 fd99 	bl	40f230 <__aeabi_uldivmod>
  40c6fe:	3230      	adds	r2, #48	; 0x30
  40c700:	4630      	mov	r0, r6
  40c702:	4639      	mov	r1, r7
  40c704:	f80b 2d01 	strb.w	r2, [fp, #-1]!
  40c708:	2300      	movs	r3, #0
  40c70a:	220a      	movs	r2, #10
  40c70c:	f002 fd90 	bl	40f230 <__aeabi_uldivmod>
  40c710:	4606      	mov	r6, r0
  40c712:	460f      	mov	r7, r1
  40c714:	ea56 0307 	orrs.w	r3, r6, r7
  40c718:	d1eb      	bne.n	40c6f2 <_vfprintf_r+0xc86>
  40c71a:	f8dd c01c 	ldr.w	ip, [sp, #28]
  40c71e:	e73b      	b.n	40c598 <_vfprintf_r+0xb2c>
  40c720:	2b30      	cmp	r3, #48	; 0x30
  40c722:	f000 8219 	beq.w	40cb58 <_vfprintf_r+0x10ec>
  40c726:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  40c728:	3b01      	subs	r3, #1
  40c72a:	461a      	mov	r2, r3
  40c72c:	a82e      	add	r0, sp, #184	; 0xb8
  40c72e:	930e      	str	r3, [sp, #56]	; 0x38
  40c730:	1a82      	subs	r2, r0, r2
  40c732:	2330      	movs	r3, #48	; 0x30
  40c734:	920b      	str	r2, [sp, #44]	; 0x2c
  40c736:	f801 3c01 	strb.w	r3, [r1, #-1]
  40c73a:	f7ff bae7 	b.w	40bd0c <_vfprintf_r+0x2a0>
  40c73e:	4640      	mov	r0, r8
  40c740:	4649      	mov	r1, r9
  40c742:	aa21      	add	r2, sp, #132	; 0x84
  40c744:	f7fe fb42 	bl	40adcc <__sprint_r>
  40c748:	2800      	cmp	r0, #0
  40c74a:	f47f aa8f 	bne.w	40bc6c <_vfprintf_r+0x200>
  40c74e:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
  40c752:	ac2e      	add	r4, sp, #184	; 0xb8
  40c754:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  40c756:	9910      	ldr	r1, [sp, #64]	; 0x40
  40c758:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
  40c75a:	440a      	add	r2, r1
  40c75c:	4616      	mov	r6, r2
  40c75e:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40c760:	4293      	cmp	r3, r2
  40c762:	db3e      	blt.n	40c7e2 <_vfprintf_r+0xd76>
  40c764:	9a06      	ldr	r2, [sp, #24]
  40c766:	07d5      	lsls	r5, r2, #31
  40c768:	d43b      	bmi.n	40c7e2 <_vfprintf_r+0xd76>
  40c76a:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40c76c:	ebc6 050a 	rsb	r5, r6, sl
  40c770:	1ad3      	subs	r3, r2, r3
  40c772:	429d      	cmp	r5, r3
  40c774:	bfa8      	it	ge
  40c776:	461d      	movge	r5, r3
  40c778:	2d00      	cmp	r5, #0
  40c77a:	462f      	mov	r7, r5
  40c77c:	dd0b      	ble.n	40c796 <_vfprintf_r+0xd2a>
  40c77e:	9a22      	ldr	r2, [sp, #136]	; 0x88
  40c780:	6026      	str	r6, [r4, #0]
  40c782:	3201      	adds	r2, #1
  40c784:	44ab      	add	fp, r5
  40c786:	2a07      	cmp	r2, #7
  40c788:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
  40c78c:	6065      	str	r5, [r4, #4]
  40c78e:	9222      	str	r2, [sp, #136]	; 0x88
  40c790:	f300 825e 	bgt.w	40cc50 <_vfprintf_r+0x11e4>
  40c794:	3408      	adds	r4, #8
  40c796:	2f00      	cmp	r7, #0
  40c798:	bfac      	ite	ge
  40c79a:	1bdd      	subge	r5, r3, r7
  40c79c:	461d      	movlt	r5, r3
  40c79e:	2d00      	cmp	r5, #0
  40c7a0:	f77f ab81 	ble.w	40bea6 <_vfprintf_r+0x43a>
  40c7a4:	2d10      	cmp	r5, #16
  40c7a6:	9b22      	ldr	r3, [sp, #136]	; 0x88
  40c7a8:	4f41      	ldr	r7, [pc, #260]	; (40c8b0 <_vfprintf_r+0xe44>)
  40c7aa:	dd93      	ble.n	40c6d4 <_vfprintf_r+0xc68>
  40c7ac:	2610      	movs	r6, #16
  40c7ae:	465a      	mov	r2, fp
  40c7b0:	e003      	b.n	40c7ba <_vfprintf_r+0xd4e>
  40c7b2:	3408      	adds	r4, #8
  40c7b4:	3d10      	subs	r5, #16
  40c7b6:	2d10      	cmp	r5, #16
  40c7b8:	dd8b      	ble.n	40c6d2 <_vfprintf_r+0xc66>
  40c7ba:	3301      	adds	r3, #1
  40c7bc:	3210      	adds	r2, #16
  40c7be:	2b07      	cmp	r3, #7
  40c7c0:	9223      	str	r2, [sp, #140]	; 0x8c
  40c7c2:	9322      	str	r3, [sp, #136]	; 0x88
  40c7c4:	6027      	str	r7, [r4, #0]
  40c7c6:	6066      	str	r6, [r4, #4]
  40c7c8:	ddf3      	ble.n	40c7b2 <_vfprintf_r+0xd46>
  40c7ca:	4640      	mov	r0, r8
  40c7cc:	4649      	mov	r1, r9
  40c7ce:	aa21      	add	r2, sp, #132	; 0x84
  40c7d0:	f7fe fafc 	bl	40adcc <__sprint_r>
  40c7d4:	2800      	cmp	r0, #0
  40c7d6:	f47f aa49 	bne.w	40bc6c <_vfprintf_r+0x200>
  40c7da:	9a23      	ldr	r2, [sp, #140]	; 0x8c
  40c7dc:	9b22      	ldr	r3, [sp, #136]	; 0x88
  40c7de:	ac2e      	add	r4, sp, #184	; 0xb8
  40c7e0:	e7e8      	b.n	40c7b4 <_vfprintf_r+0xd48>
  40c7e2:	9a22      	ldr	r2, [sp, #136]	; 0x88
  40c7e4:	9816      	ldr	r0, [sp, #88]	; 0x58
  40c7e6:	9915      	ldr	r1, [sp, #84]	; 0x54
  40c7e8:	6021      	str	r1, [r4, #0]
  40c7ea:	3201      	adds	r2, #1
  40c7ec:	4483      	add	fp, r0
  40c7ee:	2a07      	cmp	r2, #7
  40c7f0:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
  40c7f4:	6060      	str	r0, [r4, #4]
  40c7f6:	9222      	str	r2, [sp, #136]	; 0x88
  40c7f8:	f300 820a 	bgt.w	40cc10 <_vfprintf_r+0x11a4>
  40c7fc:	3408      	adds	r4, #8
  40c7fe:	e7b4      	b.n	40c76a <_vfprintf_r+0xcfe>
  40c800:	9b06      	ldr	r3, [sp, #24]
  40c802:	07d8      	lsls	r0, r3, #31
  40c804:	f53f ae28 	bmi.w	40c458 <_vfprintf_r+0x9ec>
  40c808:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  40c80a:	6023      	str	r3, [r4, #0]
  40c80c:	3501      	adds	r5, #1
  40c80e:	f10b 0601 	add.w	r6, fp, #1
  40c812:	2301      	movs	r3, #1
  40c814:	2d07      	cmp	r5, #7
  40c816:	9623      	str	r6, [sp, #140]	; 0x8c
  40c818:	9522      	str	r5, [sp, #136]	; 0x88
  40c81a:	6063      	str	r3, [r4, #4]
  40c81c:	f77f ae4b 	ble.w	40c4b6 <_vfprintf_r+0xa4a>
  40c820:	4640      	mov	r0, r8
  40c822:	4649      	mov	r1, r9
  40c824:	aa21      	add	r2, sp, #132	; 0x84
  40c826:	f7fe fad1 	bl	40adcc <__sprint_r>
  40c82a:	2800      	cmp	r0, #0
  40c82c:	f47f aa1e 	bne.w	40bc6c <_vfprintf_r+0x200>
  40c830:	9e23      	ldr	r6, [sp, #140]	; 0x8c
  40c832:	9d22      	ldr	r5, [sp, #136]	; 0x88
  40c834:	ac2e      	add	r4, sp, #184	; 0xb8
  40c836:	e63f      	b.n	40c4b8 <_vfprintf_r+0xa4c>
  40c838:	4640      	mov	r0, r8
  40c83a:	4649      	mov	r1, r9
  40c83c:	aa21      	add	r2, sp, #132	; 0x84
  40c83e:	f7fe fac5 	bl	40adcc <__sprint_r>
  40c842:	2800      	cmp	r0, #0
  40c844:	f47f aa12 	bne.w	40bc6c <_vfprintf_r+0x200>
  40c848:	9e23      	ldr	r6, [sp, #140]	; 0x8c
  40c84a:	9d22      	ldr	r5, [sp, #136]	; 0x88
  40c84c:	ac2e      	add	r4, sp, #184	; 0xb8
  40c84e:	e610      	b.n	40c472 <_vfprintf_r+0xa06>
  40c850:	4640      	mov	r0, r8
  40c852:	4649      	mov	r1, r9
  40c854:	aa21      	add	r2, sp, #132	; 0x84
  40c856:	f7fe fab9 	bl	40adcc <__sprint_r>
  40c85a:	2800      	cmp	r0, #0
  40c85c:	f47f aa06 	bne.w	40bc6c <_vfprintf_r+0x200>
  40c860:	9e23      	ldr	r6, [sp, #140]	; 0x8c
  40c862:	9d22      	ldr	r5, [sp, #136]	; 0x88
  40c864:	ac2e      	add	r4, sp, #184	; 0xb8
  40c866:	e610      	b.n	40c48a <_vfprintf_r+0xa1e>
  40c868:	3501      	adds	r5, #1
  40c86a:	4456      	add	r6, sl
  40c86c:	2d07      	cmp	r5, #7
  40c86e:	9623      	str	r6, [sp, #140]	; 0x8c
  40c870:	9522      	str	r5, [sp, #136]	; 0x88
  40c872:	e884 0480 	stmia.w	r4, {r7, sl}
  40c876:	f77f ae1e 	ble.w	40c4b6 <_vfprintf_r+0xa4a>
  40c87a:	e7d1      	b.n	40c820 <_vfprintf_r+0xdb4>
  40c87c:	4640      	mov	r0, r8
  40c87e:	4649      	mov	r1, r9
  40c880:	aa21      	add	r2, sp, #132	; 0x84
  40c882:	f7fe faa3 	bl	40adcc <__sprint_r>
  40c886:	2800      	cmp	r0, #0
  40c888:	f47f a9f0 	bne.w	40bc6c <_vfprintf_r+0x200>
  40c88c:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
  40c890:	ac2e      	add	r4, sp, #184	; 0xb8
  40c892:	f7ff babc 	b.w	40be0e <_vfprintf_r+0x3a2>
  40c896:	f04f 0c2d 	mov.w	ip, #45	; 0x2d
  40c89a:	4276      	negs	r6, r6
  40c89c:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
  40c8a0:	f88d c067 	strb.w	ip, [sp, #103]	; 0x67
  40c8a4:	f8cd a03c 	str.w	sl, [sp, #60]	; 0x3c
  40c8a8:	2301      	movs	r3, #1
  40c8aa:	f7ff ba03 	b.w	40bcb4 <_vfprintf_r+0x248>
  40c8ae:	bf00      	nop
  40c8b0:	00411c18 	.word	0x00411c18
  40c8b4:	f001 ff92 	bl	40e7dc <__fpclassifyd>
  40c8b8:	2800      	cmp	r0, #0
  40c8ba:	f000 810d 	beq.w	40cad8 <_vfprintf_r+0x106c>
  40c8be:	f025 0320 	bic.w	r3, r5, #32
  40c8c2:	f1b6 3fff 	cmp.w	r6, #4294967295
  40c8c6:	930b      	str	r3, [sp, #44]	; 0x2c
  40c8c8:	f000 8258 	beq.w	40cd7c <_vfprintf_r+0x1310>
  40c8cc:	2b47      	cmp	r3, #71	; 0x47
  40c8ce:	d104      	bne.n	40c8da <_vfprintf_r+0xe6e>
  40c8d0:	2e00      	cmp	r6, #0
  40c8d2:	bf14      	ite	ne
  40c8d4:	46b3      	movne	fp, r6
  40c8d6:	f04f 0b01 	moveq.w	fp, #1
  40c8da:	9b06      	ldr	r3, [sp, #24]
  40c8dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
  40c8e0:	930f      	str	r3, [sp, #60]	; 0x3c
  40c8e2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  40c8e4:	f1b3 0a00 	subs.w	sl, r3, #0
  40c8e8:	9b12      	ldr	r3, [sp, #72]	; 0x48
  40c8ea:	9307      	str	r3, [sp, #28]
  40c8ec:	bfbb      	ittet	lt
  40c8ee:	4653      	movlt	r3, sl
  40c8f0:	f103 4a00 	addlt.w	sl, r3, #2147483648	; 0x80000000
  40c8f4:	2300      	movge	r3, #0
  40c8f6:	232d      	movlt	r3, #45	; 0x2d
  40c8f8:	2d66      	cmp	r5, #102	; 0x66
  40c8fa:	930d      	str	r3, [sp, #52]	; 0x34
  40c8fc:	f000 8154 	beq.w	40cba8 <_vfprintf_r+0x113c>
  40c900:	2d46      	cmp	r5, #70	; 0x46
  40c902:	f000 8151 	beq.w	40cba8 <_vfprintf_r+0x113c>
  40c906:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  40c908:	9a07      	ldr	r2, [sp, #28]
  40c90a:	2b45      	cmp	r3, #69	; 0x45
  40c90c:	bf0c      	ite	eq
  40c90e:	f10b 0701 	addeq.w	r7, fp, #1
  40c912:	465f      	movne	r7, fp
  40c914:	2002      	movs	r0, #2
  40c916:	a91b      	add	r1, sp, #108	; 0x6c
  40c918:	e88d 0081 	stmia.w	sp, {r0, r7}
  40c91c:	9102      	str	r1, [sp, #8]
  40c91e:	a81c      	add	r0, sp, #112	; 0x70
  40c920:	a91f      	add	r1, sp, #124	; 0x7c
  40c922:	9003      	str	r0, [sp, #12]
  40c924:	4653      	mov	r3, sl
  40c926:	9104      	str	r1, [sp, #16]
  40c928:	4640      	mov	r0, r8
  40c92a:	f000 fc51 	bl	40d1d0 <_dtoa_r>
  40c92e:	2d67      	cmp	r5, #103	; 0x67
  40c930:	900e      	str	r0, [sp, #56]	; 0x38
  40c932:	d002      	beq.n	40c93a <_vfprintf_r+0xece>
  40c934:	2d47      	cmp	r5, #71	; 0x47
  40c936:	f040 8147 	bne.w	40cbc8 <_vfprintf_r+0x115c>
  40c93a:	9b06      	ldr	r3, [sp, #24]
  40c93c:	07db      	lsls	r3, r3, #31
  40c93e:	f140 823a 	bpl.w	40cdb6 <_vfprintf_r+0x134a>
  40c942:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  40c944:	19de      	adds	r6, r3, r7
  40c946:	9807      	ldr	r0, [sp, #28]
  40c948:	4651      	mov	r1, sl
  40c94a:	2200      	movs	r2, #0
  40c94c:	2300      	movs	r3, #0
  40c94e:	f7fa fa13 	bl	406d78 <__aeabi_dcmpeq>
  40c952:	2800      	cmp	r0, #0
  40c954:	f040 81a3 	bne.w	40cc9e <_vfprintf_r+0x1232>
  40c958:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  40c95a:	429e      	cmp	r6, r3
  40c95c:	d906      	bls.n	40c96c <_vfprintf_r+0xf00>
  40c95e:	2130      	movs	r1, #48	; 0x30
  40c960:	1c5a      	adds	r2, r3, #1
  40c962:	921f      	str	r2, [sp, #124]	; 0x7c
  40c964:	7019      	strb	r1, [r3, #0]
  40c966:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  40c968:	429e      	cmp	r6, r3
  40c96a:	d8f9      	bhi.n	40c960 <_vfprintf_r+0xef4>
  40c96c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  40c96e:	1a9b      	subs	r3, r3, r2
  40c970:	9311      	str	r3, [sp, #68]	; 0x44
  40c972:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  40c974:	2b47      	cmp	r3, #71	; 0x47
  40c976:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
  40c978:	f000 8179 	beq.w	40cc6e <_vfprintf_r+0x1202>
  40c97c:	2d65      	cmp	r5, #101	; 0x65
  40c97e:	f340 819c 	ble.w	40ccba <_vfprintf_r+0x124e>
  40c982:	2d66      	cmp	r5, #102	; 0x66
  40c984:	9310      	str	r3, [sp, #64]	; 0x40
  40c986:	f000 8209 	beq.w	40cd9c <_vfprintf_r+0x1330>
  40c98a:	9b11      	ldr	r3, [sp, #68]	; 0x44
  40c98c:	9a10      	ldr	r2, [sp, #64]	; 0x40
  40c98e:	4293      	cmp	r3, r2
  40c990:	f300 81f7 	bgt.w	40cd82 <_vfprintf_r+0x1316>
  40c994:	9b06      	ldr	r3, [sp, #24]
  40c996:	07d9      	lsls	r1, r3, #31
  40c998:	f100 8217 	bmi.w	40cdca <_vfprintf_r+0x135e>
  40c99c:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
  40c9a0:	920b      	str	r2, [sp, #44]	; 0x2c
  40c9a2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  40c9a4:	2a00      	cmp	r2, #0
  40c9a6:	f040 8169 	bne.w	40cc7c <_vfprintf_r+0x1210>
  40c9aa:	9307      	str	r3, [sp, #28]
  40c9ac:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  40c9ae:	9306      	str	r3, [sp, #24]
  40c9b0:	920f      	str	r2, [sp, #60]	; 0x3c
  40c9b2:	f89d c067 	ldrb.w	ip, [sp, #103]	; 0x67
  40c9b6:	f7ff b9b1 	b.w	40bd1c <_vfprintf_r+0x2b0>
  40c9ba:	9b06      	ldr	r3, [sp, #24]
  40c9bc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  40c9be:	f013 0f40 	tst.w	r3, #64	; 0x40
  40c9c2:	4613      	mov	r3, r2
  40c9c4:	f43f ac84 	beq.w	40c2d0 <_vfprintf_r+0x864>
  40c9c8:	8816      	ldrh	r6, [r2, #0]
  40c9ca:	3204      	adds	r2, #4
  40c9cc:	2700      	movs	r7, #0
  40c9ce:	2301      	movs	r3, #1
  40c9d0:	920c      	str	r2, [sp, #48]	; 0x30
  40c9d2:	f7ff b969 	b.w	40bca8 <_vfprintf_r+0x23c>
  40c9d6:	9b06      	ldr	r3, [sp, #24]
  40c9d8:	06db      	lsls	r3, r3, #27
  40c9da:	d40b      	bmi.n	40c9f4 <_vfprintf_r+0xf88>
  40c9dc:	9b06      	ldr	r3, [sp, #24]
  40c9de:	065f      	lsls	r7, r3, #25
  40c9e0:	d508      	bpl.n	40c9f4 <_vfprintf_r+0xf88>
  40c9e2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  40c9e4:	6813      	ldr	r3, [r2, #0]
  40c9e6:	3204      	adds	r2, #4
  40c9e8:	920c      	str	r2, [sp, #48]	; 0x30
  40c9ea:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
  40c9ee:	801a      	strh	r2, [r3, #0]
  40c9f0:	f7ff b87d 	b.w	40baee <_vfprintf_r+0x82>
  40c9f4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  40c9f6:	6813      	ldr	r3, [r2, #0]
  40c9f8:	3204      	adds	r2, #4
  40c9fa:	920c      	str	r2, [sp, #48]	; 0x30
  40c9fc:	9a09      	ldr	r2, [sp, #36]	; 0x24
  40c9fe:	601a      	str	r2, [r3, #0]
  40ca00:	f7ff b875 	b.w	40baee <_vfprintf_r+0x82>
  40ca04:	9b06      	ldr	r3, [sp, #24]
  40ca06:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  40ca08:	f013 0f40 	tst.w	r3, #64	; 0x40
  40ca0c:	4613      	mov	r3, r2
  40ca0e:	d076      	beq.n	40cafe <_vfprintf_r+0x1092>
  40ca10:	3304      	adds	r3, #4
  40ca12:	8816      	ldrh	r6, [r2, #0]
  40ca14:	930c      	str	r3, [sp, #48]	; 0x30
  40ca16:	2700      	movs	r7, #0
  40ca18:	f7ff bae4 	b.w	40bfe4 <_vfprintf_r+0x578>
  40ca1c:	4693      	mov	fp, r2
  40ca1e:	3301      	adds	r3, #1
  40ca20:	44ab      	add	fp, r5
  40ca22:	2b07      	cmp	r3, #7
  40ca24:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
  40ca28:	9322      	str	r3, [sp, #136]	; 0x88
  40ca2a:	6027      	str	r7, [r4, #0]
  40ca2c:	6065      	str	r5, [r4, #4]
  40ca2e:	f73f ae86 	bgt.w	40c73e <_vfprintf_r+0xcd2>
  40ca32:	3408      	adds	r4, #8
  40ca34:	e68e      	b.n	40c754 <_vfprintf_r+0xce8>
  40ca36:	4640      	mov	r0, r8
  40ca38:	4649      	mov	r1, r9
  40ca3a:	aa21      	add	r2, sp, #132	; 0x84
  40ca3c:	f7fe f9c6 	bl	40adcc <__sprint_r>
  40ca40:	2800      	cmp	r0, #0
  40ca42:	f47f a913 	bne.w	40bc6c <_vfprintf_r+0x200>
  40ca46:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
  40ca4a:	ac2e      	add	r4, sp, #184	; 0xb8
  40ca4c:	e48d      	b.n	40c36a <_vfprintf_r+0x8fe>
  40ca4e:	9b22      	ldr	r3, [sp, #136]	; 0x88
  40ca50:	4ab0      	ldr	r2, [pc, #704]	; (40cd14 <_vfprintf_r+0x12a8>)
  40ca52:	6022      	str	r2, [r4, #0]
  40ca54:	3301      	adds	r3, #1
  40ca56:	f10b 0b01 	add.w	fp, fp, #1
  40ca5a:	2201      	movs	r2, #1
  40ca5c:	2b07      	cmp	r3, #7
  40ca5e:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
  40ca62:	9322      	str	r3, [sp, #136]	; 0x88
  40ca64:	6062      	str	r2, [r4, #4]
  40ca66:	dc50      	bgt.n	40cb0a <_vfprintf_r+0x109e>
  40ca68:	3408      	adds	r4, #8
  40ca6a:	b92d      	cbnz	r5, 40ca78 <_vfprintf_r+0x100c>
  40ca6c:	9b11      	ldr	r3, [sp, #68]	; 0x44
  40ca6e:	b91b      	cbnz	r3, 40ca78 <_vfprintf_r+0x100c>
  40ca70:	9b06      	ldr	r3, [sp, #24]
  40ca72:	07de      	lsls	r6, r3, #31
  40ca74:	f57f aa17 	bpl.w	40bea6 <_vfprintf_r+0x43a>
  40ca78:	9b22      	ldr	r3, [sp, #136]	; 0x88
  40ca7a:	9916      	ldr	r1, [sp, #88]	; 0x58
  40ca7c:	9a15      	ldr	r2, [sp, #84]	; 0x54
  40ca7e:	6022      	str	r2, [r4, #0]
  40ca80:	3301      	adds	r3, #1
  40ca82:	eb0b 0201 	add.w	r2, fp, r1
  40ca86:	2b07      	cmp	r3, #7
  40ca88:	9223      	str	r2, [sp, #140]	; 0x8c
  40ca8a:	6061      	str	r1, [r4, #4]
  40ca8c:	9322      	str	r3, [sp, #136]	; 0x88
  40ca8e:	f300 8168 	bgt.w	40cd62 <_vfprintf_r+0x12f6>
  40ca92:	3408      	adds	r4, #8
  40ca94:	426d      	negs	r5, r5
  40ca96:	2d00      	cmp	r5, #0
  40ca98:	dd6f      	ble.n	40cb7a <_vfprintf_r+0x110e>
  40ca9a:	2d10      	cmp	r5, #16
  40ca9c:	4f9e      	ldr	r7, [pc, #632]	; (40cd18 <_vfprintf_r+0x12ac>)
  40ca9e:	bfc8      	it	gt
  40caa0:	2610      	movgt	r6, #16
  40caa2:	dc05      	bgt.n	40cab0 <_vfprintf_r+0x1044>
  40caa4:	e0aa      	b.n	40cbfc <_vfprintf_r+0x1190>
  40caa6:	3408      	adds	r4, #8
  40caa8:	3d10      	subs	r5, #16
  40caaa:	2d10      	cmp	r5, #16
  40caac:	f340 80a6 	ble.w	40cbfc <_vfprintf_r+0x1190>
  40cab0:	3301      	adds	r3, #1
  40cab2:	3210      	adds	r2, #16
  40cab4:	2b07      	cmp	r3, #7
  40cab6:	9223      	str	r2, [sp, #140]	; 0x8c
  40cab8:	9322      	str	r3, [sp, #136]	; 0x88
  40caba:	6027      	str	r7, [r4, #0]
  40cabc:	6066      	str	r6, [r4, #4]
  40cabe:	ddf2      	ble.n	40caa6 <_vfprintf_r+0x103a>
  40cac0:	4640      	mov	r0, r8
  40cac2:	4649      	mov	r1, r9
  40cac4:	aa21      	add	r2, sp, #132	; 0x84
  40cac6:	f7fe f981 	bl	40adcc <__sprint_r>
  40caca:	2800      	cmp	r0, #0
  40cacc:	f47f a8ce 	bne.w	40bc6c <_vfprintf_r+0x200>
  40cad0:	9a23      	ldr	r2, [sp, #140]	; 0x8c
  40cad2:	9b22      	ldr	r3, [sp, #136]	; 0x88
  40cad4:	ac2e      	add	r4, sp, #184	; 0xb8
  40cad6:	e7e7      	b.n	40caa8 <_vfprintf_r+0x103c>
  40cad8:	9e06      	ldr	r6, [sp, #24]
  40cada:	4a90      	ldr	r2, [pc, #576]	; (40cd1c <_vfprintf_r+0x12b0>)
  40cadc:	4b90      	ldr	r3, [pc, #576]	; (40cd20 <_vfprintf_r+0x12b4>)
  40cade:	f89d c067 	ldrb.w	ip, [sp, #103]	; 0x67
  40cae2:	900f      	str	r0, [sp, #60]	; 0x3c
  40cae4:	2103      	movs	r1, #3
  40cae6:	f026 0680 	bic.w	r6, r6, #128	; 0x80
  40caea:	2d47      	cmp	r5, #71	; 0x47
  40caec:	bfd8      	it	le
  40caee:	461a      	movle	r2, r3
  40caf0:	9107      	str	r1, [sp, #28]
  40caf2:	9606      	str	r6, [sp, #24]
  40caf4:	9010      	str	r0, [sp, #64]	; 0x40
  40caf6:	920e      	str	r2, [sp, #56]	; 0x38
  40caf8:	910b      	str	r1, [sp, #44]	; 0x2c
  40cafa:	f7ff b90f 	b.w	40bd1c <_vfprintf_r+0x2b0>
  40cafe:	3304      	adds	r3, #4
  40cb00:	6816      	ldr	r6, [r2, #0]
  40cb02:	930c      	str	r3, [sp, #48]	; 0x30
  40cb04:	2700      	movs	r7, #0
  40cb06:	f7ff ba6d 	b.w	40bfe4 <_vfprintf_r+0x578>
  40cb0a:	4640      	mov	r0, r8
  40cb0c:	4649      	mov	r1, r9
  40cb0e:	aa21      	add	r2, sp, #132	; 0x84
  40cb10:	f7fe f95c 	bl	40adcc <__sprint_r>
  40cb14:	2800      	cmp	r0, #0
  40cb16:	f47f a8a9 	bne.w	40bc6c <_vfprintf_r+0x200>
  40cb1a:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
  40cb1c:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
  40cb20:	ac2e      	add	r4, sp, #184	; 0xb8
  40cb22:	e7a2      	b.n	40ca6a <_vfprintf_r+0xffe>
  40cb24:	f041 0120 	orr.w	r1, r1, #32
  40cb28:	9106      	str	r1, [sp, #24]
  40cb2a:	785d      	ldrb	r5, [r3, #1]
  40cb2c:	1c59      	adds	r1, r3, #1
  40cb2e:	f7ff b80e 	b.w	40bb4e <_vfprintf_r+0xe2>
  40cb32:	980a      	ldr	r0, [sp, #40]	; 0x28
  40cb34:	910c      	str	r1, [sp, #48]	; 0x30
  40cb36:	4240      	negs	r0, r0
  40cb38:	900a      	str	r0, [sp, #40]	; 0x28
  40cb3a:	4619      	mov	r1, r3
  40cb3c:	f7ff ba02 	b.w	40bf44 <_vfprintf_r+0x4d8>
  40cb40:	4640      	mov	r0, r8
  40cb42:	4649      	mov	r1, r9
  40cb44:	aa21      	add	r2, sp, #132	; 0x84
  40cb46:	f7fe f941 	bl	40adcc <__sprint_r>
  40cb4a:	2800      	cmp	r0, #0
  40cb4c:	f47f a88e 	bne.w	40bc6c <_vfprintf_r+0x200>
  40cb50:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
  40cb54:	ac2e      	add	r4, sp, #184	; 0xb8
  40cb56:	e41e      	b.n	40c396 <_vfprintf_r+0x92a>
  40cb58:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  40cb5a:	ab2e      	add	r3, sp, #184	; 0xb8
  40cb5c:	1a9b      	subs	r3, r3, r2
  40cb5e:	930b      	str	r3, [sp, #44]	; 0x2c
  40cb60:	f7ff b8d4 	b.w	40bd0c <_vfprintf_r+0x2a0>
  40cb64:	4640      	mov	r0, r8
  40cb66:	4649      	mov	r1, r9
  40cb68:	aa21      	add	r2, sp, #132	; 0x84
  40cb6a:	f7fe f92f 	bl	40adcc <__sprint_r>
  40cb6e:	2800      	cmp	r0, #0
  40cb70:	f47f a87c 	bne.w	40bc6c <_vfprintf_r+0x200>
  40cb74:	9a23      	ldr	r2, [sp, #140]	; 0x8c
  40cb76:	9b22      	ldr	r3, [sp, #136]	; 0x88
  40cb78:	ac2e      	add	r4, sp, #184	; 0xb8
  40cb7a:	9811      	ldr	r0, [sp, #68]	; 0x44
  40cb7c:	6060      	str	r0, [r4, #4]
  40cb7e:	3301      	adds	r3, #1
  40cb80:	eb02 0b00 	add.w	fp, r2, r0
  40cb84:	2b07      	cmp	r3, #7
  40cb86:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  40cb88:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
  40cb8c:	9322      	str	r3, [sp, #136]	; 0x88
  40cb8e:	6022      	str	r2, [r4, #0]
  40cb90:	f77f a988 	ble.w	40bea4 <_vfprintf_r+0x438>
  40cb94:	e49d      	b.n	40c4d2 <_vfprintf_r+0xa66>
  40cb96:	f8cd b03c 	str.w	fp, [sp, #60]	; 0x3c
  40cb9a:	f7fc fe63 	bl	409864 <strlen>
  40cb9e:	970c      	str	r7, [sp, #48]	; 0x30
  40cba0:	900b      	str	r0, [sp, #44]	; 0x2c
  40cba2:	4603      	mov	r3, r0
  40cba4:	f7ff ba03 	b.w	40bfae <_vfprintf_r+0x542>
  40cba8:	2003      	movs	r0, #3
  40cbaa:	a91b      	add	r1, sp, #108	; 0x6c
  40cbac:	e88d 0801 	stmia.w	sp, {r0, fp}
  40cbb0:	9102      	str	r1, [sp, #8]
  40cbb2:	a81c      	add	r0, sp, #112	; 0x70
  40cbb4:	a91f      	add	r1, sp, #124	; 0x7c
  40cbb6:	9003      	str	r0, [sp, #12]
  40cbb8:	9a07      	ldr	r2, [sp, #28]
  40cbba:	9104      	str	r1, [sp, #16]
  40cbbc:	4653      	mov	r3, sl
  40cbbe:	4640      	mov	r0, r8
  40cbc0:	f000 fb06 	bl	40d1d0 <_dtoa_r>
  40cbc4:	465f      	mov	r7, fp
  40cbc6:	900e      	str	r0, [sp, #56]	; 0x38
  40cbc8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  40cbca:	19de      	adds	r6, r3, r7
  40cbcc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  40cbce:	2b46      	cmp	r3, #70	; 0x46
  40cbd0:	f47f aeb9 	bne.w	40c946 <_vfprintf_r+0xeda>
  40cbd4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  40cbd6:	781b      	ldrb	r3, [r3, #0]
  40cbd8:	2b30      	cmp	r3, #48	; 0x30
  40cbda:	f000 80fc 	beq.w	40cdd6 <_vfprintf_r+0x136a>
  40cbde:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
  40cbe0:	443e      	add	r6, r7
  40cbe2:	e6b0      	b.n	40c946 <_vfprintf_r+0xeda>
  40cbe4:	4640      	mov	r0, r8
  40cbe6:	4649      	mov	r1, r9
  40cbe8:	aa21      	add	r2, sp, #132	; 0x84
  40cbea:	f7fe f8ef 	bl	40adcc <__sprint_r>
  40cbee:	2800      	cmp	r0, #0
  40cbf0:	f47f a83c 	bne.w	40bc6c <_vfprintf_r+0x200>
  40cbf4:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
  40cbf8:	ac2e      	add	r4, sp, #184	; 0xb8
  40cbfa:	e4f4      	b.n	40c5e6 <_vfprintf_r+0xb7a>
  40cbfc:	3301      	adds	r3, #1
  40cbfe:	442a      	add	r2, r5
  40cc00:	2b07      	cmp	r3, #7
  40cc02:	9223      	str	r2, [sp, #140]	; 0x8c
  40cc04:	9322      	str	r3, [sp, #136]	; 0x88
  40cc06:	6027      	str	r7, [r4, #0]
  40cc08:	6065      	str	r5, [r4, #4]
  40cc0a:	dcab      	bgt.n	40cb64 <_vfprintf_r+0x10f8>
  40cc0c:	3408      	adds	r4, #8
  40cc0e:	e7b4      	b.n	40cb7a <_vfprintf_r+0x110e>
  40cc10:	4640      	mov	r0, r8
  40cc12:	4649      	mov	r1, r9
  40cc14:	aa21      	add	r2, sp, #132	; 0x84
  40cc16:	f7fe f8d9 	bl	40adcc <__sprint_r>
  40cc1a:	2800      	cmp	r0, #0
  40cc1c:	f47f a826 	bne.w	40bc6c <_vfprintf_r+0x200>
  40cc20:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
  40cc22:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
  40cc26:	ac2e      	add	r4, sp, #184	; 0xb8
  40cc28:	e59f      	b.n	40c76a <_vfprintf_r+0xcfe>
  40cc2a:	2e06      	cmp	r6, #6
  40cc2c:	4633      	mov	r3, r6
  40cc2e:	bf28      	it	cs
  40cc30:	2306      	movcs	r3, #6
  40cc32:	930b      	str	r3, [sp, #44]	; 0x2c
  40cc34:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  40cc38:	f8dd c038 	ldr.w	ip, [sp, #56]	; 0x38
  40cc3c:	9307      	str	r3, [sp, #28]
  40cc3e:	4b39      	ldr	r3, [pc, #228]	; (40cd24 <_vfprintf_r+0x12b8>)
  40cc40:	970c      	str	r7, [sp, #48]	; 0x30
  40cc42:	f8cd c03c 	str.w	ip, [sp, #60]	; 0x3c
  40cc46:	f8cd c040 	str.w	ip, [sp, #64]	; 0x40
  40cc4a:	930e      	str	r3, [sp, #56]	; 0x38
  40cc4c:	f7ff b866 	b.w	40bd1c <_vfprintf_r+0x2b0>
  40cc50:	4640      	mov	r0, r8
  40cc52:	4649      	mov	r1, r9
  40cc54:	aa21      	add	r2, sp, #132	; 0x84
  40cc56:	f7fe f8b9 	bl	40adcc <__sprint_r>
  40cc5a:	2800      	cmp	r0, #0
  40cc5c:	f47f a806 	bne.w	40bc6c <_vfprintf_r+0x200>
  40cc60:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
  40cc62:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40cc64:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
  40cc68:	1ad3      	subs	r3, r2, r3
  40cc6a:	ac2e      	add	r4, sp, #184	; 0xb8
  40cc6c:	e593      	b.n	40c796 <_vfprintf_r+0xd2a>
  40cc6e:	1cdf      	adds	r7, r3, #3
  40cc70:	db22      	blt.n	40ccb8 <_vfprintf_r+0x124c>
  40cc72:	459b      	cmp	fp, r3
  40cc74:	db20      	blt.n	40ccb8 <_vfprintf_r+0x124c>
  40cc76:	9310      	str	r3, [sp, #64]	; 0x40
  40cc78:	2567      	movs	r5, #103	; 0x67
  40cc7a:	e686      	b.n	40c98a <_vfprintf_r+0xf1e>
  40cc7c:	9307      	str	r3, [sp, #28]
  40cc7e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  40cc80:	9306      	str	r3, [sp, #24]
  40cc82:	f04f 0c2d 	mov.w	ip, #45	; 0x2d
  40cc86:	2300      	movs	r3, #0
  40cc88:	f88d c067 	strb.w	ip, [sp, #103]	; 0x67
  40cc8c:	930f      	str	r3, [sp, #60]	; 0x3c
  40cc8e:	f7ff b848 	b.w	40bd22 <_vfprintf_r+0x2b6>
  40cc92:	f04f 0c2d 	mov.w	ip, #45	; 0x2d
  40cc96:	f88d c067 	strb.w	ip, [sp, #103]	; 0x67
  40cc9a:	f7ff ba0e 	b.w	40c0ba <_vfprintf_r+0x64e>
  40cc9e:	4633      	mov	r3, r6
  40cca0:	e664      	b.n	40c96c <_vfprintf_r+0xf00>
  40cca2:	ea26 73e6 	bic.w	r3, r6, r6, asr #31
  40cca6:	900f      	str	r0, [sp, #60]	; 0x3c
  40cca8:	970c      	str	r7, [sp, #48]	; 0x30
  40ccaa:	9010      	str	r0, [sp, #64]	; 0x40
  40ccac:	f89d c067 	ldrb.w	ip, [sp, #103]	; 0x67
  40ccb0:	9307      	str	r3, [sp, #28]
  40ccb2:	960b      	str	r6, [sp, #44]	; 0x2c
  40ccb4:	f7ff b832 	b.w	40bd1c <_vfprintf_r+0x2b0>
  40ccb8:	3d02      	subs	r5, #2
  40ccba:	3b01      	subs	r3, #1
  40ccbc:	2b00      	cmp	r3, #0
  40ccbe:	931b      	str	r3, [sp, #108]	; 0x6c
  40ccc0:	bfba      	itte	lt
  40ccc2:	425b      	neglt	r3, r3
  40ccc4:	222d      	movlt	r2, #45	; 0x2d
  40ccc6:	222b      	movge	r2, #43	; 0x2b
  40ccc8:	2b09      	cmp	r3, #9
  40ccca:	f88d 5074 	strb.w	r5, [sp, #116]	; 0x74
  40ccce:	f88d 2075 	strb.w	r2, [sp, #117]	; 0x75
  40ccd2:	dd72      	ble.n	40cdba <_vfprintf_r+0x134e>
  40ccd4:	f10d 0683 	add.w	r6, sp, #131	; 0x83
  40ccd8:	4630      	mov	r0, r6
  40ccda:	4a13      	ldr	r2, [pc, #76]	; (40cd28 <_vfprintf_r+0x12bc>)
  40ccdc:	fb82 2103 	smull	r2, r1, r2, r3
  40cce0:	17da      	asrs	r2, r3, #31
  40cce2:	ebc2 02a1 	rsb	r2, r2, r1, asr #2
  40cce6:	eb02 0182 	add.w	r1, r2, r2, lsl #2
  40ccea:	eba3 0341 	sub.w	r3, r3, r1, lsl #1
  40ccee:	f103 0130 	add.w	r1, r3, #48	; 0x30
  40ccf2:	2a09      	cmp	r2, #9
  40ccf4:	4613      	mov	r3, r2
  40ccf6:	f800 1d01 	strb.w	r1, [r0, #-1]!
  40ccfa:	dcee      	bgt.n	40ccda <_vfprintf_r+0x126e>
  40ccfc:	4602      	mov	r2, r0
  40ccfe:	3330      	adds	r3, #48	; 0x30
  40cd00:	b2d9      	uxtb	r1, r3
  40cd02:	f802 1d01 	strb.w	r1, [r2, #-1]!
  40cd06:	4296      	cmp	r6, r2
  40cd08:	f240 80a0 	bls.w	40ce4c <_vfprintf_r+0x13e0>
  40cd0c:	f10d 0276 	add.w	r2, sp, #118	; 0x76
  40cd10:	4603      	mov	r3, r0
  40cd12:	e00d      	b.n	40cd30 <_vfprintf_r+0x12c4>
  40cd14:	004119f8 	.word	0x004119f8
  40cd18:	00411c18 	.word	0x00411c18
  40cd1c:	00411bc4 	.word	0x00411bc4
  40cd20:	00411bc0 	.word	0x00411bc0
  40cd24:	00411bf0 	.word	0x00411bf0
  40cd28:	66666667 	.word	0x66666667
  40cd2c:	f813 1b01 	ldrb.w	r1, [r3], #1
  40cd30:	f802 1b01 	strb.w	r1, [r2], #1
  40cd34:	42b3      	cmp	r3, r6
  40cd36:	d1f9      	bne.n	40cd2c <_vfprintf_r+0x12c0>
  40cd38:	ab21      	add	r3, sp, #132	; 0x84
  40cd3a:	1a1b      	subs	r3, r3, r0
  40cd3c:	f10d 0276 	add.w	r2, sp, #118	; 0x76
  40cd40:	4413      	add	r3, r2
  40cd42:	aa1d      	add	r2, sp, #116	; 0x74
  40cd44:	1a9b      	subs	r3, r3, r2
  40cd46:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40cd48:	9317      	str	r3, [sp, #92]	; 0x5c
  40cd4a:	2a01      	cmp	r2, #1
  40cd4c:	4413      	add	r3, r2
  40cd4e:	930b      	str	r3, [sp, #44]	; 0x2c
  40cd50:	dd6d      	ble.n	40ce2e <_vfprintf_r+0x13c2>
  40cd52:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  40cd54:	2200      	movs	r2, #0
  40cd56:	3301      	adds	r3, #1
  40cd58:	930b      	str	r3, [sp, #44]	; 0x2c
  40cd5a:	9210      	str	r2, [sp, #64]	; 0x40
  40cd5c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  40cd60:	e61f      	b.n	40c9a2 <_vfprintf_r+0xf36>
  40cd62:	4640      	mov	r0, r8
  40cd64:	4649      	mov	r1, r9
  40cd66:	aa21      	add	r2, sp, #132	; 0x84
  40cd68:	f7fe f830 	bl	40adcc <__sprint_r>
  40cd6c:	2800      	cmp	r0, #0
  40cd6e:	f47e af7d 	bne.w	40bc6c <_vfprintf_r+0x200>
  40cd72:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
  40cd74:	9a23      	ldr	r2, [sp, #140]	; 0x8c
  40cd76:	9b22      	ldr	r3, [sp, #136]	; 0x88
  40cd78:	ac2e      	add	r4, sp, #184	; 0xb8
  40cd7a:	e68b      	b.n	40ca94 <_vfprintf_r+0x1028>
  40cd7c:	f04f 0b06 	mov.w	fp, #6
  40cd80:	e5ab      	b.n	40c8da <_vfprintf_r+0xe6e>
  40cd82:	9b10      	ldr	r3, [sp, #64]	; 0x40
  40cd84:	2b00      	cmp	r3, #0
  40cd86:	bfd8      	it	le
  40cd88:	f1c3 0602 	rsble	r6, r3, #2
  40cd8c:	9b11      	ldr	r3, [sp, #68]	; 0x44
  40cd8e:	bfc8      	it	gt
  40cd90:	2601      	movgt	r6, #1
  40cd92:	18f3      	adds	r3, r6, r3
  40cd94:	930b      	str	r3, [sp, #44]	; 0x2c
  40cd96:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  40cd9a:	e602      	b.n	40c9a2 <_vfprintf_r+0xf36>
  40cd9c:	2b00      	cmp	r3, #0
  40cd9e:	dd30      	ble.n	40ce02 <_vfprintf_r+0x1396>
  40cda0:	f1bb 0f00 	cmp.w	fp, #0
  40cda4:	d125      	bne.n	40cdf2 <_vfprintf_r+0x1386>
  40cda6:	9b06      	ldr	r3, [sp, #24]
  40cda8:	07de      	lsls	r6, r3, #31
  40cdaa:	d422      	bmi.n	40cdf2 <_vfprintf_r+0x1386>
  40cdac:	9a10      	ldr	r2, [sp, #64]	; 0x40
  40cdae:	920b      	str	r2, [sp, #44]	; 0x2c
  40cdb0:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
  40cdb4:	e5f5      	b.n	40c9a2 <_vfprintf_r+0xf36>
  40cdb6:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  40cdb8:	e5d8      	b.n	40c96c <_vfprintf_r+0xf00>
  40cdba:	3330      	adds	r3, #48	; 0x30
  40cdbc:	2230      	movs	r2, #48	; 0x30
  40cdbe:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
  40cdc2:	f88d 2076 	strb.w	r2, [sp, #118]	; 0x76
  40cdc6:	ab1e      	add	r3, sp, #120	; 0x78
  40cdc8:	e7bb      	b.n	40cd42 <_vfprintf_r+0x12d6>
  40cdca:	9b10      	ldr	r3, [sp, #64]	; 0x40
  40cdcc:	3301      	adds	r3, #1
  40cdce:	930b      	str	r3, [sp, #44]	; 0x2c
  40cdd0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  40cdd4:	e5e5      	b.n	40c9a2 <_vfprintf_r+0xf36>
  40cdd6:	9807      	ldr	r0, [sp, #28]
  40cdd8:	4651      	mov	r1, sl
  40cdda:	2200      	movs	r2, #0
  40cddc:	2300      	movs	r3, #0
  40cdde:	f7f9 ffcb 	bl	406d78 <__aeabi_dcmpeq>
  40cde2:	2800      	cmp	r0, #0
  40cde4:	f47f aefb 	bne.w	40cbde <_vfprintf_r+0x1172>
  40cde8:	f1c7 0701 	rsb	r7, r7, #1
  40cdec:	971b      	str	r7, [sp, #108]	; 0x6c
  40cdee:	443e      	add	r6, r7
  40cdf0:	e5a9      	b.n	40c946 <_vfprintf_r+0xeda>
  40cdf2:	9b10      	ldr	r3, [sp, #64]	; 0x40
  40cdf4:	f10b 0601 	add.w	r6, fp, #1
  40cdf8:	4433      	add	r3, r6
  40cdfa:	930b      	str	r3, [sp, #44]	; 0x2c
  40cdfc:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  40ce00:	e5cf      	b.n	40c9a2 <_vfprintf_r+0xf36>
  40ce02:	f1bb 0f00 	cmp.w	fp, #0
  40ce06:	d11b      	bne.n	40ce40 <_vfprintf_r+0x13d4>
  40ce08:	9b06      	ldr	r3, [sp, #24]
  40ce0a:	07d8      	lsls	r0, r3, #31
  40ce0c:	d418      	bmi.n	40ce40 <_vfprintf_r+0x13d4>
  40ce0e:	2301      	movs	r3, #1
  40ce10:	930b      	str	r3, [sp, #44]	; 0x2c
  40ce12:	e5c6      	b.n	40c9a2 <_vfprintf_r+0xf36>
  40ce14:	9d0c      	ldr	r5, [sp, #48]	; 0x30
  40ce16:	682e      	ldr	r6, [r5, #0]
  40ce18:	4628      	mov	r0, r5
  40ce1a:	3004      	adds	r0, #4
  40ce1c:	2e00      	cmp	r6, #0
  40ce1e:	785d      	ldrb	r5, [r3, #1]
  40ce20:	900c      	str	r0, [sp, #48]	; 0x30
  40ce22:	f6be ae94 	bge.w	40bb4e <_vfprintf_r+0xe2>
  40ce26:	f04f 36ff 	mov.w	r6, #4294967295
  40ce2a:	f7fe be90 	b.w	40bb4e <_vfprintf_r+0xe2>
  40ce2e:	9b06      	ldr	r3, [sp, #24]
  40ce30:	f013 0301 	ands.w	r3, r3, #1
  40ce34:	d18d      	bne.n	40cd52 <_vfprintf_r+0x12e6>
  40ce36:	9310      	str	r3, [sp, #64]	; 0x40
  40ce38:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  40ce3a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  40ce3e:	e5b0      	b.n	40c9a2 <_vfprintf_r+0xf36>
  40ce40:	f10b 0302 	add.w	r3, fp, #2
  40ce44:	930b      	str	r3, [sp, #44]	; 0x2c
  40ce46:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  40ce4a:	e5aa      	b.n	40c9a2 <_vfprintf_r+0xf36>
  40ce4c:	f10d 0376 	add.w	r3, sp, #118	; 0x76
  40ce50:	e777      	b.n	40cd42 <_vfprintf_r+0x12d6>
  40ce52:	bf00      	nop

0040ce54 <__sbprintf>:
  40ce54:	e92d 42f0 	stmdb	sp!, {r4, r5, r6, r7, r9, lr}
  40ce58:	460c      	mov	r4, r1
  40ce5a:	f5ad 6d8d 	sub.w	sp, sp, #1128	; 0x468
  40ce5e:	f8b1 e00c 	ldrh.w	lr, [r1, #12]
  40ce62:	69e7      	ldr	r7, [r4, #28]
  40ce64:	6e49      	ldr	r1, [r1, #100]	; 0x64
  40ce66:	f8b4 900e 	ldrh.w	r9, [r4, #14]
  40ce6a:	9119      	str	r1, [sp, #100]	; 0x64
  40ce6c:	ad1a      	add	r5, sp, #104	; 0x68
  40ce6e:	f44f 6680 	mov.w	r6, #1024	; 0x400
  40ce72:	f02e 0e02 	bic.w	lr, lr, #2
  40ce76:	f04f 0c00 	mov.w	ip, #0
  40ce7a:	9707      	str	r7, [sp, #28]
  40ce7c:	4669      	mov	r1, sp
  40ce7e:	6a67      	ldr	r7, [r4, #36]	; 0x24
  40ce80:	9500      	str	r5, [sp, #0]
  40ce82:	9504      	str	r5, [sp, #16]
  40ce84:	9602      	str	r6, [sp, #8]
  40ce86:	9605      	str	r6, [sp, #20]
  40ce88:	f8ad e00c 	strh.w	lr, [sp, #12]
  40ce8c:	f8ad 900e 	strh.w	r9, [sp, #14]
  40ce90:	9709      	str	r7, [sp, #36]	; 0x24
  40ce92:	f8cd c018 	str.w	ip, [sp, #24]
  40ce96:	4606      	mov	r6, r0
  40ce98:	f7fe fde8 	bl	40ba6c <_vfprintf_r>
  40ce9c:	1e05      	subs	r5, r0, #0
  40ce9e:	db07      	blt.n	40ceb0 <__sbprintf+0x5c>
  40cea0:	4630      	mov	r0, r6
  40cea2:	4669      	mov	r1, sp
  40cea4:	f7fb f8a0 	bl	407fe8 <_fflush_r>
  40cea8:	2800      	cmp	r0, #0
  40ceaa:	bf18      	it	ne
  40ceac:	f04f 35ff 	movne.w	r5, #4294967295
  40ceb0:	f8bd 300c 	ldrh.w	r3, [sp, #12]
  40ceb4:	065b      	lsls	r3, r3, #25
  40ceb6:	d503      	bpl.n	40cec0 <__sbprintf+0x6c>
  40ceb8:	89a3      	ldrh	r3, [r4, #12]
  40ceba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40cebe:	81a3      	strh	r3, [r4, #12]
  40cec0:	4628      	mov	r0, r5
  40cec2:	f50d 6d8d 	add.w	sp, sp, #1128	; 0x468
  40cec6:	e8bd 82f0 	ldmia.w	sp!, {r4, r5, r6, r7, r9, pc}
  40ceca:	bf00      	nop

0040cecc <__swbuf_r>:
  40cecc:	b570      	push	{r4, r5, r6, lr}
  40cece:	460d      	mov	r5, r1
  40ced0:	4614      	mov	r4, r2
  40ced2:	4606      	mov	r6, r0
  40ced4:	b110      	cbz	r0, 40cedc <__swbuf_r+0x10>
  40ced6:	6b83      	ldr	r3, [r0, #56]	; 0x38
  40ced8:	2b00      	cmp	r3, #0
  40ceda:	d048      	beq.n	40cf6e <__swbuf_r+0xa2>
  40cedc:	89a2      	ldrh	r2, [r4, #12]
  40cede:	69a3      	ldr	r3, [r4, #24]
  40cee0:	60a3      	str	r3, [r4, #8]
  40cee2:	b291      	uxth	r1, r2
  40cee4:	0708      	lsls	r0, r1, #28
  40cee6:	d538      	bpl.n	40cf5a <__swbuf_r+0x8e>
  40cee8:	6923      	ldr	r3, [r4, #16]
  40ceea:	2b00      	cmp	r3, #0
  40ceec:	d035      	beq.n	40cf5a <__swbuf_r+0x8e>
  40ceee:	0489      	lsls	r1, r1, #18
  40cef0:	b2ed      	uxtb	r5, r5
  40cef2:	d515      	bpl.n	40cf20 <__swbuf_r+0x54>
  40cef4:	6822      	ldr	r2, [r4, #0]
  40cef6:	6961      	ldr	r1, [r4, #20]
  40cef8:	1ad3      	subs	r3, r2, r3
  40cefa:	428b      	cmp	r3, r1
  40cefc:	da1c      	bge.n	40cf38 <__swbuf_r+0x6c>
  40cefe:	3301      	adds	r3, #1
  40cf00:	68a1      	ldr	r1, [r4, #8]
  40cf02:	1c50      	adds	r0, r2, #1
  40cf04:	3901      	subs	r1, #1
  40cf06:	60a1      	str	r1, [r4, #8]
  40cf08:	6020      	str	r0, [r4, #0]
  40cf0a:	7015      	strb	r5, [r2, #0]
  40cf0c:	6962      	ldr	r2, [r4, #20]
  40cf0e:	429a      	cmp	r2, r3
  40cf10:	d01a      	beq.n	40cf48 <__swbuf_r+0x7c>
  40cf12:	89a3      	ldrh	r3, [r4, #12]
  40cf14:	07db      	lsls	r3, r3, #31
  40cf16:	d501      	bpl.n	40cf1c <__swbuf_r+0x50>
  40cf18:	2d0a      	cmp	r5, #10
  40cf1a:	d015      	beq.n	40cf48 <__swbuf_r+0x7c>
  40cf1c:	4628      	mov	r0, r5
  40cf1e:	bd70      	pop	{r4, r5, r6, pc}
  40cf20:	6e61      	ldr	r1, [r4, #100]	; 0x64
  40cf22:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
  40cf26:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
  40cf2a:	81a2      	strh	r2, [r4, #12]
  40cf2c:	6822      	ldr	r2, [r4, #0]
  40cf2e:	6661      	str	r1, [r4, #100]	; 0x64
  40cf30:	6961      	ldr	r1, [r4, #20]
  40cf32:	1ad3      	subs	r3, r2, r3
  40cf34:	428b      	cmp	r3, r1
  40cf36:	dbe2      	blt.n	40cefe <__swbuf_r+0x32>
  40cf38:	4630      	mov	r0, r6
  40cf3a:	4621      	mov	r1, r4
  40cf3c:	f7fb f854 	bl	407fe8 <_fflush_r>
  40cf40:	b940      	cbnz	r0, 40cf54 <__swbuf_r+0x88>
  40cf42:	6822      	ldr	r2, [r4, #0]
  40cf44:	2301      	movs	r3, #1
  40cf46:	e7db      	b.n	40cf00 <__swbuf_r+0x34>
  40cf48:	4630      	mov	r0, r6
  40cf4a:	4621      	mov	r1, r4
  40cf4c:	f7fb f84c 	bl	407fe8 <_fflush_r>
  40cf50:	2800      	cmp	r0, #0
  40cf52:	d0e3      	beq.n	40cf1c <__swbuf_r+0x50>
  40cf54:	f04f 30ff 	mov.w	r0, #4294967295
  40cf58:	bd70      	pop	{r4, r5, r6, pc}
  40cf5a:	4630      	mov	r0, r6
  40cf5c:	4621      	mov	r1, r4
  40cf5e:	f000 f81d 	bl	40cf9c <__swsetup_r>
  40cf62:	2800      	cmp	r0, #0
  40cf64:	d1f6      	bne.n	40cf54 <__swbuf_r+0x88>
  40cf66:	89a2      	ldrh	r2, [r4, #12]
  40cf68:	6923      	ldr	r3, [r4, #16]
  40cf6a:	b291      	uxth	r1, r2
  40cf6c:	e7bf      	b.n	40ceee <__swbuf_r+0x22>
  40cf6e:	f7fb f8cf 	bl	408110 <__sinit>
  40cf72:	e7b3      	b.n	40cedc <__swbuf_r+0x10>

0040cf74 <_write_r>:
  40cf74:	b570      	push	{r4, r5, r6, lr}
  40cf76:	4c08      	ldr	r4, [pc, #32]	; (40cf98 <_write_r+0x24>)
  40cf78:	4606      	mov	r6, r0
  40cf7a:	2500      	movs	r5, #0
  40cf7c:	4608      	mov	r0, r1
  40cf7e:	4611      	mov	r1, r2
  40cf80:	461a      	mov	r2, r3
  40cf82:	6025      	str	r5, [r4, #0]
  40cf84:	f7f3 fc7e 	bl	400884 <_write>
  40cf88:	1c43      	adds	r3, r0, #1
  40cf8a:	d000      	beq.n	40cf8e <_write_r+0x1a>
  40cf8c:	bd70      	pop	{r4, r5, r6, pc}
  40cf8e:	6823      	ldr	r3, [r4, #0]
  40cf90:	2b00      	cmp	r3, #0
  40cf92:	d0fb      	beq.n	40cf8c <_write_r+0x18>
  40cf94:	6033      	str	r3, [r6, #0]
  40cf96:	bd70      	pop	{r4, r5, r6, pc}
  40cf98:	200012c4 	.word	0x200012c4

0040cf9c <__swsetup_r>:
  40cf9c:	b538      	push	{r3, r4, r5, lr}
  40cf9e:	4b2f      	ldr	r3, [pc, #188]	; (40d05c <__swsetup_r+0xc0>)
  40cfa0:	681b      	ldr	r3, [r3, #0]
  40cfa2:	4605      	mov	r5, r0
  40cfa4:	460c      	mov	r4, r1
  40cfa6:	b113      	cbz	r3, 40cfae <__swsetup_r+0x12>
  40cfa8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
  40cfaa:	2a00      	cmp	r2, #0
  40cfac:	d036      	beq.n	40d01c <__swsetup_r+0x80>
  40cfae:	89a2      	ldrh	r2, [r4, #12]
  40cfb0:	b293      	uxth	r3, r2
  40cfb2:	0718      	lsls	r0, r3, #28
  40cfb4:	d50c      	bpl.n	40cfd0 <__swsetup_r+0x34>
  40cfb6:	6920      	ldr	r0, [r4, #16]
  40cfb8:	b1a8      	cbz	r0, 40cfe6 <__swsetup_r+0x4a>
  40cfba:	f013 0201 	ands.w	r2, r3, #1
  40cfbe:	d01e      	beq.n	40cffe <__swsetup_r+0x62>
  40cfc0:	6963      	ldr	r3, [r4, #20]
  40cfc2:	2200      	movs	r2, #0
  40cfc4:	425b      	negs	r3, r3
  40cfc6:	61a3      	str	r3, [r4, #24]
  40cfc8:	60a2      	str	r2, [r4, #8]
  40cfca:	b1f0      	cbz	r0, 40d00a <__swsetup_r+0x6e>
  40cfcc:	2000      	movs	r0, #0
  40cfce:	bd38      	pop	{r3, r4, r5, pc}
  40cfd0:	06d9      	lsls	r1, r3, #27
  40cfd2:	d53b      	bpl.n	40d04c <__swsetup_r+0xb0>
  40cfd4:	0758      	lsls	r0, r3, #29
  40cfd6:	d425      	bmi.n	40d024 <__swsetup_r+0x88>
  40cfd8:	6920      	ldr	r0, [r4, #16]
  40cfda:	f042 0308 	orr.w	r3, r2, #8
  40cfde:	81a3      	strh	r3, [r4, #12]
  40cfe0:	b29b      	uxth	r3, r3
  40cfe2:	2800      	cmp	r0, #0
  40cfe4:	d1e9      	bne.n	40cfba <__swsetup_r+0x1e>
  40cfe6:	f403 7220 	and.w	r2, r3, #640	; 0x280
  40cfea:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
  40cfee:	d0e4      	beq.n	40cfba <__swsetup_r+0x1e>
  40cff0:	4628      	mov	r0, r5
  40cff2:	4621      	mov	r1, r4
  40cff4:	f7fb fbea 	bl	4087cc <__smakebuf_r>
  40cff8:	89a3      	ldrh	r3, [r4, #12]
  40cffa:	6920      	ldr	r0, [r4, #16]
  40cffc:	e7dd      	b.n	40cfba <__swsetup_r+0x1e>
  40cffe:	0799      	lsls	r1, r3, #30
  40d000:	bf58      	it	pl
  40d002:	6962      	ldrpl	r2, [r4, #20]
  40d004:	60a2      	str	r2, [r4, #8]
  40d006:	2800      	cmp	r0, #0
  40d008:	d1e0      	bne.n	40cfcc <__swsetup_r+0x30>
  40d00a:	89a3      	ldrh	r3, [r4, #12]
  40d00c:	061a      	lsls	r2, r3, #24
  40d00e:	d5de      	bpl.n	40cfce <__swsetup_r+0x32>
  40d010:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40d014:	81a3      	strh	r3, [r4, #12]
  40d016:	f04f 30ff 	mov.w	r0, #4294967295
  40d01a:	bd38      	pop	{r3, r4, r5, pc}
  40d01c:	4618      	mov	r0, r3
  40d01e:	f7fb f877 	bl	408110 <__sinit>
  40d022:	e7c4      	b.n	40cfae <__swsetup_r+0x12>
  40d024:	6b21      	ldr	r1, [r4, #48]	; 0x30
  40d026:	b149      	cbz	r1, 40d03c <__swsetup_r+0xa0>
  40d028:	f104 0340 	add.w	r3, r4, #64	; 0x40
  40d02c:	4299      	cmp	r1, r3
  40d02e:	d003      	beq.n	40d038 <__swsetup_r+0x9c>
  40d030:	4628      	mov	r0, r5
  40d032:	f7fb f8ed 	bl	408210 <_free_r>
  40d036:	89a2      	ldrh	r2, [r4, #12]
  40d038:	2300      	movs	r3, #0
  40d03a:	6323      	str	r3, [r4, #48]	; 0x30
  40d03c:	f022 0224 	bic.w	r2, r2, #36	; 0x24
  40d040:	2300      	movs	r3, #0
  40d042:	6920      	ldr	r0, [r4, #16]
  40d044:	6063      	str	r3, [r4, #4]
  40d046:	b292      	uxth	r2, r2
  40d048:	6020      	str	r0, [r4, #0]
  40d04a:	e7c6      	b.n	40cfda <__swsetup_r+0x3e>
  40d04c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
  40d050:	2309      	movs	r3, #9
  40d052:	602b      	str	r3, [r5, #0]
  40d054:	f04f 30ff 	mov.w	r0, #4294967295
  40d058:	81a2      	strh	r2, [r4, #12]
  40d05a:	bd38      	pop	{r3, r4, r5, pc}
  40d05c:	200008b0 	.word	0x200008b0

0040d060 <register_fini>:
  40d060:	4b02      	ldr	r3, [pc, #8]	; (40d06c <register_fini+0xc>)
  40d062:	b113      	cbz	r3, 40d06a <register_fini+0xa>
  40d064:	4802      	ldr	r0, [pc, #8]	; (40d070 <register_fini+0x10>)
  40d066:	f000 b805 	b.w	40d074 <atexit>
  40d06a:	4770      	bx	lr
  40d06c:	00000000 	.word	0x00000000
  40d070:	0040e065 	.word	0x0040e065

0040d074 <atexit>:
  40d074:	4601      	mov	r1, r0
  40d076:	2000      	movs	r0, #0
  40d078:	4602      	mov	r2, r0
  40d07a:	4603      	mov	r3, r0
  40d07c:	f001 bc94 	b.w	40e9a8 <__register_exitproc>

0040d080 <_close_r>:
  40d080:	b538      	push	{r3, r4, r5, lr}
  40d082:	4c07      	ldr	r4, [pc, #28]	; (40d0a0 <_close_r+0x20>)
  40d084:	2300      	movs	r3, #0
  40d086:	4605      	mov	r5, r0
  40d088:	4608      	mov	r0, r1
  40d08a:	6023      	str	r3, [r4, #0]
  40d08c:	f7f4 feb8 	bl	401e00 <_close>
  40d090:	1c43      	adds	r3, r0, #1
  40d092:	d000      	beq.n	40d096 <_close_r+0x16>
  40d094:	bd38      	pop	{r3, r4, r5, pc}
  40d096:	6823      	ldr	r3, [r4, #0]
  40d098:	2b00      	cmp	r3, #0
  40d09a:	d0fb      	beq.n	40d094 <_close_r+0x14>
  40d09c:	602b      	str	r3, [r5, #0]
  40d09e:	bd38      	pop	{r3, r4, r5, pc}
  40d0a0:	200012c4 	.word	0x200012c4

0040d0a4 <quorem>:
  40d0a4:	6902      	ldr	r2, [r0, #16]
  40d0a6:	690b      	ldr	r3, [r1, #16]
  40d0a8:	4293      	cmp	r3, r2
  40d0aa:	f300 808f 	bgt.w	40d1cc <quorem+0x128>
  40d0ae:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40d0b2:	f103 38ff 	add.w	r8, r3, #4294967295
  40d0b6:	f101 0714 	add.w	r7, r1, #20
  40d0ba:	f100 0b14 	add.w	fp, r0, #20
  40d0be:	f857 2028 	ldr.w	r2, [r7, r8, lsl #2]
  40d0c2:	f85b 3028 	ldr.w	r3, [fp, r8, lsl #2]
  40d0c6:	ea4f 0488 	mov.w	r4, r8, lsl #2
  40d0ca:	b083      	sub	sp, #12
  40d0cc:	3201      	adds	r2, #1
  40d0ce:	fbb3 f9f2 	udiv	r9, r3, r2
  40d0d2:	eb0b 0304 	add.w	r3, fp, r4
  40d0d6:	9400      	str	r4, [sp, #0]
  40d0d8:	eb07 0a04 	add.w	sl, r7, r4
  40d0dc:	9301      	str	r3, [sp, #4]
  40d0de:	f1b9 0f00 	cmp.w	r9, #0
  40d0e2:	d03b      	beq.n	40d15c <quorem+0xb8>
  40d0e4:	2600      	movs	r6, #0
  40d0e6:	4632      	mov	r2, r6
  40d0e8:	46bc      	mov	ip, r7
  40d0ea:	46de      	mov	lr, fp
  40d0ec:	4634      	mov	r4, r6
  40d0ee:	f85c 6b04 	ldr.w	r6, [ip], #4
  40d0f2:	f8de 5000 	ldr.w	r5, [lr]
  40d0f6:	b2b3      	uxth	r3, r6
  40d0f8:	0c36      	lsrs	r6, r6, #16
  40d0fa:	fb03 4409 	mla	r4, r3, r9, r4
  40d0fe:	fb06 f609 	mul.w	r6, r6, r9
  40d102:	eb06 4614 	add.w	r6, r6, r4, lsr #16
  40d106:	b2a3      	uxth	r3, r4
  40d108:	1ad3      	subs	r3, r2, r3
  40d10a:	b2b4      	uxth	r4, r6
  40d10c:	fa13 f385 	uxtah	r3, r3, r5
  40d110:	ebc4 4415 	rsb	r4, r4, r5, lsr #16
  40d114:	eb04 4423 	add.w	r4, r4, r3, asr #16
  40d118:	b29b      	uxth	r3, r3
  40d11a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
  40d11e:	45e2      	cmp	sl, ip
  40d120:	ea4f 4224 	mov.w	r2, r4, asr #16
  40d124:	f84e 3b04 	str.w	r3, [lr], #4
  40d128:	ea4f 4416 	mov.w	r4, r6, lsr #16
  40d12c:	d2df      	bcs.n	40d0ee <quorem+0x4a>
  40d12e:	9b00      	ldr	r3, [sp, #0]
  40d130:	f85b 3003 	ldr.w	r3, [fp, r3]
  40d134:	b993      	cbnz	r3, 40d15c <quorem+0xb8>
  40d136:	9c01      	ldr	r4, [sp, #4]
  40d138:	1f23      	subs	r3, r4, #4
  40d13a:	459b      	cmp	fp, r3
  40d13c:	d20c      	bcs.n	40d158 <quorem+0xb4>
  40d13e:	f854 3c04 	ldr.w	r3, [r4, #-4]
  40d142:	b94b      	cbnz	r3, 40d158 <quorem+0xb4>
  40d144:	f1a4 0308 	sub.w	r3, r4, #8
  40d148:	e002      	b.n	40d150 <quorem+0xac>
  40d14a:	681a      	ldr	r2, [r3, #0]
  40d14c:	3b04      	subs	r3, #4
  40d14e:	b91a      	cbnz	r2, 40d158 <quorem+0xb4>
  40d150:	459b      	cmp	fp, r3
  40d152:	f108 38ff 	add.w	r8, r8, #4294967295
  40d156:	d3f8      	bcc.n	40d14a <quorem+0xa6>
  40d158:	f8c0 8010 	str.w	r8, [r0, #16]
  40d15c:	4604      	mov	r4, r0
  40d15e:	f001 fa3f 	bl	40e5e0 <__mcmp>
  40d162:	2800      	cmp	r0, #0
  40d164:	db2e      	blt.n	40d1c4 <quorem+0x120>
  40d166:	f109 0901 	add.w	r9, r9, #1
  40d16a:	465d      	mov	r5, fp
  40d16c:	2300      	movs	r3, #0
  40d16e:	f857 1b04 	ldr.w	r1, [r7], #4
  40d172:	6828      	ldr	r0, [r5, #0]
  40d174:	b28a      	uxth	r2, r1
  40d176:	1a9a      	subs	r2, r3, r2
  40d178:	0c09      	lsrs	r1, r1, #16
  40d17a:	fa12 f280 	uxtah	r2, r2, r0
  40d17e:	ebc1 4310 	rsb	r3, r1, r0, lsr #16
  40d182:	eb03 4322 	add.w	r3, r3, r2, asr #16
  40d186:	b291      	uxth	r1, r2
  40d188:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
  40d18c:	45ba      	cmp	sl, r7
  40d18e:	f845 1b04 	str.w	r1, [r5], #4
  40d192:	ea4f 4323 	mov.w	r3, r3, asr #16
  40d196:	d2ea      	bcs.n	40d16e <quorem+0xca>
  40d198:	f85b 2028 	ldr.w	r2, [fp, r8, lsl #2]
  40d19c:	eb0b 0388 	add.w	r3, fp, r8, lsl #2
  40d1a0:	b982      	cbnz	r2, 40d1c4 <quorem+0x120>
  40d1a2:	1f1a      	subs	r2, r3, #4
  40d1a4:	4593      	cmp	fp, r2
  40d1a6:	d20b      	bcs.n	40d1c0 <quorem+0x11c>
  40d1a8:	f853 2c04 	ldr.w	r2, [r3, #-4]
  40d1ac:	b942      	cbnz	r2, 40d1c0 <quorem+0x11c>
  40d1ae:	3b08      	subs	r3, #8
  40d1b0:	e002      	b.n	40d1b8 <quorem+0x114>
  40d1b2:	681a      	ldr	r2, [r3, #0]
  40d1b4:	3b04      	subs	r3, #4
  40d1b6:	b91a      	cbnz	r2, 40d1c0 <quorem+0x11c>
  40d1b8:	459b      	cmp	fp, r3
  40d1ba:	f108 38ff 	add.w	r8, r8, #4294967295
  40d1be:	d3f8      	bcc.n	40d1b2 <quorem+0x10e>
  40d1c0:	f8c4 8010 	str.w	r8, [r4, #16]
  40d1c4:	4648      	mov	r0, r9
  40d1c6:	b003      	add	sp, #12
  40d1c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40d1cc:	2000      	movs	r0, #0
  40d1ce:	4770      	bx	lr

0040d1d0 <_dtoa_r>:
  40d1d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40d1d4:	6c01      	ldr	r1, [r0, #64]	; 0x40
  40d1d6:	b097      	sub	sp, #92	; 0x5c
  40d1d8:	4604      	mov	r4, r0
  40d1da:	9d23      	ldr	r5, [sp, #140]	; 0x8c
  40d1dc:	e9cd 2302 	strd	r2, r3, [sp, #8]
  40d1e0:	b141      	cbz	r1, 40d1f4 <_dtoa_r+0x24>
  40d1e2:	6c42      	ldr	r2, [r0, #68]	; 0x44
  40d1e4:	604a      	str	r2, [r1, #4]
  40d1e6:	2301      	movs	r3, #1
  40d1e8:	4093      	lsls	r3, r2
  40d1ea:	608b      	str	r3, [r1, #8]
  40d1ec:	f001 f814 	bl	40e218 <_Bfree>
  40d1f0:	2300      	movs	r3, #0
  40d1f2:	6423      	str	r3, [r4, #64]	; 0x40
  40d1f4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  40d1f8:	2b00      	cmp	r3, #0
  40d1fa:	4699      	mov	r9, r3
  40d1fc:	db36      	blt.n	40d26c <_dtoa_r+0x9c>
  40d1fe:	2300      	movs	r3, #0
  40d200:	602b      	str	r3, [r5, #0]
  40d202:	4ba5      	ldr	r3, [pc, #660]	; (40d498 <_dtoa_r+0x2c8>)
  40d204:	461a      	mov	r2, r3
  40d206:	ea09 0303 	and.w	r3, r9, r3
  40d20a:	4293      	cmp	r3, r2
  40d20c:	d017      	beq.n	40d23e <_dtoa_r+0x6e>
  40d20e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
  40d212:	2200      	movs	r2, #0
  40d214:	4630      	mov	r0, r6
  40d216:	4639      	mov	r1, r7
  40d218:	2300      	movs	r3, #0
  40d21a:	f7f9 fdad 	bl	406d78 <__aeabi_dcmpeq>
  40d21e:	4680      	mov	r8, r0
  40d220:	2800      	cmp	r0, #0
  40d222:	d02b      	beq.n	40d27c <_dtoa_r+0xac>
  40d224:	9a22      	ldr	r2, [sp, #136]	; 0x88
  40d226:	2301      	movs	r3, #1
  40d228:	6013      	str	r3, [r2, #0]
  40d22a:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40d22c:	2b00      	cmp	r3, #0
  40d22e:	f000 80cb 	beq.w	40d3c8 <_dtoa_r+0x1f8>
  40d232:	489a      	ldr	r0, [pc, #616]	; (40d49c <_dtoa_r+0x2cc>)
  40d234:	6018      	str	r0, [r3, #0]
  40d236:	3801      	subs	r0, #1
  40d238:	b017      	add	sp, #92	; 0x5c
  40d23a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40d23e:	9a22      	ldr	r2, [sp, #136]	; 0x88
  40d240:	f242 730f 	movw	r3, #9999	; 0x270f
  40d244:	6013      	str	r3, [r2, #0]
  40d246:	9b02      	ldr	r3, [sp, #8]
  40d248:	2b00      	cmp	r3, #0
  40d24a:	f000 80a6 	beq.w	40d39a <_dtoa_r+0x1ca>
  40d24e:	4894      	ldr	r0, [pc, #592]	; (40d4a0 <_dtoa_r+0x2d0>)
  40d250:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40d252:	2b00      	cmp	r3, #0
  40d254:	d0f0      	beq.n	40d238 <_dtoa_r+0x68>
  40d256:	78c3      	ldrb	r3, [r0, #3]
  40d258:	2b00      	cmp	r3, #0
  40d25a:	f000 80b7 	beq.w	40d3cc <_dtoa_r+0x1fc>
  40d25e:	f100 0308 	add.w	r3, r0, #8
  40d262:	9a24      	ldr	r2, [sp, #144]	; 0x90
  40d264:	6013      	str	r3, [r2, #0]
  40d266:	b017      	add	sp, #92	; 0x5c
  40d268:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40d26c:	9a03      	ldr	r2, [sp, #12]
  40d26e:	2301      	movs	r3, #1
  40d270:	f022 4900 	bic.w	r9, r2, #2147483648	; 0x80000000
  40d274:	602b      	str	r3, [r5, #0]
  40d276:	f8cd 900c 	str.w	r9, [sp, #12]
  40d27a:	e7c2      	b.n	40d202 <_dtoa_r+0x32>
  40d27c:	aa15      	add	r2, sp, #84	; 0x54
  40d27e:	ab14      	add	r3, sp, #80	; 0x50
  40d280:	e88d 000c 	stmia.w	sp, {r2, r3}
  40d284:	4620      	mov	r0, r4
  40d286:	4632      	mov	r2, r6
  40d288:	463b      	mov	r3, r7
  40d28a:	f001 fa37 	bl	40e6fc <__d2b>
  40d28e:	ea5f 5519 	movs.w	r5, r9, lsr #20
  40d292:	4683      	mov	fp, r0
  40d294:	f040 808a 	bne.w	40d3ac <_dtoa_r+0x1dc>
  40d298:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
  40d29c:	9d15      	ldr	r5, [sp, #84]	; 0x54
  40d29e:	f46f 6382 	mvn.w	r3, #1040	; 0x410
  40d2a2:	4445      	add	r5, r8
  40d2a4:	429d      	cmp	r5, r3
  40d2a6:	f2c0 8297 	blt.w	40d7d8 <_dtoa_r+0x608>
  40d2aa:	4a7e      	ldr	r2, [pc, #504]	; (40d4a4 <_dtoa_r+0x2d4>)
  40d2ac:	1b52      	subs	r2, r2, r5
  40d2ae:	fa09 f902 	lsl.w	r9, r9, r2
  40d2b2:	9a02      	ldr	r2, [sp, #8]
  40d2b4:	f205 4312 	addw	r3, r5, #1042	; 0x412
  40d2b8:	fa22 f003 	lsr.w	r0, r2, r3
  40d2bc:	ea49 0000 	orr.w	r0, r9, r0
  40d2c0:	f001 fd06 	bl	40ecd0 <__aeabi_ui2d>
  40d2c4:	2301      	movs	r3, #1
  40d2c6:	3d01      	subs	r5, #1
  40d2c8:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
  40d2cc:	930d      	str	r3, [sp, #52]	; 0x34
  40d2ce:	2200      	movs	r2, #0
  40d2d0:	4b75      	ldr	r3, [pc, #468]	; (40d4a8 <_dtoa_r+0x2d8>)
  40d2d2:	f001 fbbf 	bl	40ea54 <__aeabi_dsub>
  40d2d6:	a36a      	add	r3, pc, #424	; (adr r3, 40d480 <_dtoa_r+0x2b0>)
  40d2d8:	e9d3 2300 	ldrd	r2, r3, [r3]
  40d2dc:	f001 fd6e 	bl	40edbc <__aeabi_dmul>
  40d2e0:	a369      	add	r3, pc, #420	; (adr r3, 40d488 <_dtoa_r+0x2b8>)
  40d2e2:	e9d3 2300 	ldrd	r2, r3, [r3]
  40d2e6:	f001 fbb7 	bl	40ea58 <__adddf3>
  40d2ea:	4606      	mov	r6, r0
  40d2ec:	4628      	mov	r0, r5
  40d2ee:	460f      	mov	r7, r1
  40d2f0:	f001 fcfe 	bl	40ecf0 <__aeabi_i2d>
  40d2f4:	a366      	add	r3, pc, #408	; (adr r3, 40d490 <_dtoa_r+0x2c0>)
  40d2f6:	e9d3 2300 	ldrd	r2, r3, [r3]
  40d2fa:	f001 fd5f 	bl	40edbc <__aeabi_dmul>
  40d2fe:	4602      	mov	r2, r0
  40d300:	460b      	mov	r3, r1
  40d302:	4630      	mov	r0, r6
  40d304:	4639      	mov	r1, r7
  40d306:	f001 fba7 	bl	40ea58 <__adddf3>
  40d30a:	4606      	mov	r6, r0
  40d30c:	460f      	mov	r7, r1
  40d30e:	f001 ff67 	bl	40f1e0 <__aeabi_d2iz>
  40d312:	4639      	mov	r1, r7
  40d314:	9004      	str	r0, [sp, #16]
  40d316:	2200      	movs	r2, #0
  40d318:	4630      	mov	r0, r6
  40d31a:	2300      	movs	r3, #0
  40d31c:	f7f9 fd36 	bl	406d8c <__aeabi_dcmplt>
  40d320:	2800      	cmp	r0, #0
  40d322:	f040 81a6 	bne.w	40d672 <_dtoa_r+0x4a2>
  40d326:	9b04      	ldr	r3, [sp, #16]
  40d328:	2b16      	cmp	r3, #22
  40d32a:	f200 819f 	bhi.w	40d66c <_dtoa_r+0x49c>
  40d32e:	9a04      	ldr	r2, [sp, #16]
  40d330:	4b5e      	ldr	r3, [pc, #376]	; (40d4ac <_dtoa_r+0x2dc>)
  40d332:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  40d336:	e9d3 0100 	ldrd	r0, r1, [r3]
  40d33a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  40d33e:	f7f9 fd43 	bl	406dc8 <__aeabi_dcmpgt>
  40d342:	2800      	cmp	r0, #0
  40d344:	f000 824e 	beq.w	40d7e4 <_dtoa_r+0x614>
  40d348:	9b04      	ldr	r3, [sp, #16]
  40d34a:	3b01      	subs	r3, #1
  40d34c:	9304      	str	r3, [sp, #16]
  40d34e:	2300      	movs	r3, #0
  40d350:	930b      	str	r3, [sp, #44]	; 0x2c
  40d352:	ebc5 0508 	rsb	r5, r5, r8
  40d356:	f1b5 0a01 	subs.w	sl, r5, #1
  40d35a:	f100 81a1 	bmi.w	40d6a0 <_dtoa_r+0x4d0>
  40d35e:	2300      	movs	r3, #0
  40d360:	9305      	str	r3, [sp, #20]
  40d362:	9b04      	ldr	r3, [sp, #16]
  40d364:	2b00      	cmp	r3, #0
  40d366:	f2c0 8192 	blt.w	40d68e <_dtoa_r+0x4be>
  40d36a:	449a      	add	sl, r3
  40d36c:	930a      	str	r3, [sp, #40]	; 0x28
  40d36e:	2300      	movs	r3, #0
  40d370:	9308      	str	r3, [sp, #32]
  40d372:	9b20      	ldr	r3, [sp, #128]	; 0x80
  40d374:	2b09      	cmp	r3, #9
  40d376:	d82b      	bhi.n	40d3d0 <_dtoa_r+0x200>
  40d378:	2b05      	cmp	r3, #5
  40d37a:	f340 8670 	ble.w	40e05e <_dtoa_r+0xe8e>
  40d37e:	3b04      	subs	r3, #4
  40d380:	9320      	str	r3, [sp, #128]	; 0x80
  40d382:	2500      	movs	r5, #0
  40d384:	9b20      	ldr	r3, [sp, #128]	; 0x80
  40d386:	3b02      	subs	r3, #2
  40d388:	2b03      	cmp	r3, #3
  40d38a:	f200 864e 	bhi.w	40e02a <_dtoa_r+0xe5a>
  40d38e:	e8df f013 	tbh	[pc, r3, lsl #1]
  40d392:	03cc      	.short	0x03cc
  40d394:	02b203be 	.word	0x02b203be
  40d398:	0663      	.short	0x0663
  40d39a:	4b41      	ldr	r3, [pc, #260]	; (40d4a0 <_dtoa_r+0x2d0>)
  40d39c:	4a44      	ldr	r2, [pc, #272]	; (40d4b0 <_dtoa_r+0x2e0>)
  40d39e:	f3c9 0013 	ubfx	r0, r9, #0, #20
  40d3a2:	2800      	cmp	r0, #0
  40d3a4:	bf14      	ite	ne
  40d3a6:	4618      	movne	r0, r3
  40d3a8:	4610      	moveq	r0, r2
  40d3aa:	e751      	b.n	40d250 <_dtoa_r+0x80>
  40d3ac:	f3c7 0313 	ubfx	r3, r7, #0, #20
  40d3b0:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
  40d3b4:	f8cd 8034 	str.w	r8, [sp, #52]	; 0x34
  40d3b8:	4630      	mov	r0, r6
  40d3ba:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
  40d3be:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
  40d3c2:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
  40d3c6:	e782      	b.n	40d2ce <_dtoa_r+0xfe>
  40d3c8:	483a      	ldr	r0, [pc, #232]	; (40d4b4 <_dtoa_r+0x2e4>)
  40d3ca:	e735      	b.n	40d238 <_dtoa_r+0x68>
  40d3cc:	1cc3      	adds	r3, r0, #3
  40d3ce:	e748      	b.n	40d262 <_dtoa_r+0x92>
  40d3d0:	2100      	movs	r1, #0
  40d3d2:	6461      	str	r1, [r4, #68]	; 0x44
  40d3d4:	4620      	mov	r0, r4
  40d3d6:	9120      	str	r1, [sp, #128]	; 0x80
  40d3d8:	f000 fef8 	bl	40e1cc <_Balloc>
  40d3dc:	f04f 33ff 	mov.w	r3, #4294967295
  40d3e0:	9306      	str	r3, [sp, #24]
  40d3e2:	9a20      	ldr	r2, [sp, #128]	; 0x80
  40d3e4:	930c      	str	r3, [sp, #48]	; 0x30
  40d3e6:	2301      	movs	r3, #1
  40d3e8:	9007      	str	r0, [sp, #28]
  40d3ea:	9221      	str	r2, [sp, #132]	; 0x84
  40d3ec:	6420      	str	r0, [r4, #64]	; 0x40
  40d3ee:	9309      	str	r3, [sp, #36]	; 0x24
  40d3f0:	9b15      	ldr	r3, [sp, #84]	; 0x54
  40d3f2:	2b00      	cmp	r3, #0
  40d3f4:	f2c0 80d2 	blt.w	40d59c <_dtoa_r+0x3cc>
  40d3f8:	9a04      	ldr	r2, [sp, #16]
  40d3fa:	2a0e      	cmp	r2, #14
  40d3fc:	f300 80ce 	bgt.w	40d59c <_dtoa_r+0x3cc>
  40d400:	4b2a      	ldr	r3, [pc, #168]	; (40d4ac <_dtoa_r+0x2dc>)
  40d402:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  40d406:	e9d3 8900 	ldrd	r8, r9, [r3]
  40d40a:	9b21      	ldr	r3, [sp, #132]	; 0x84
  40d40c:	2b00      	cmp	r3, #0
  40d40e:	f2c0 838f 	blt.w	40db30 <_dtoa_r+0x960>
  40d412:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
  40d416:	4642      	mov	r2, r8
  40d418:	464b      	mov	r3, r9
  40d41a:	4630      	mov	r0, r6
  40d41c:	4639      	mov	r1, r7
  40d41e:	f001 fdf7 	bl	40f010 <__aeabi_ddiv>
  40d422:	f001 fedd 	bl	40f1e0 <__aeabi_d2iz>
  40d426:	4682      	mov	sl, r0
  40d428:	f001 fc62 	bl	40ecf0 <__aeabi_i2d>
  40d42c:	4642      	mov	r2, r8
  40d42e:	464b      	mov	r3, r9
  40d430:	f001 fcc4 	bl	40edbc <__aeabi_dmul>
  40d434:	460b      	mov	r3, r1
  40d436:	4602      	mov	r2, r0
  40d438:	4639      	mov	r1, r7
  40d43a:	4630      	mov	r0, r6
  40d43c:	f001 fb0a 	bl	40ea54 <__aeabi_dsub>
  40d440:	9d07      	ldr	r5, [sp, #28]
  40d442:	f10a 0330 	add.w	r3, sl, #48	; 0x30
  40d446:	702b      	strb	r3, [r5, #0]
  40d448:	9b06      	ldr	r3, [sp, #24]
  40d44a:	2b01      	cmp	r3, #1
  40d44c:	4606      	mov	r6, r0
  40d44e:	460f      	mov	r7, r1
  40d450:	f105 0501 	add.w	r5, r5, #1
  40d454:	d062      	beq.n	40d51c <_dtoa_r+0x34c>
  40d456:	2200      	movs	r2, #0
  40d458:	4b17      	ldr	r3, [pc, #92]	; (40d4b8 <_dtoa_r+0x2e8>)
  40d45a:	f001 fcaf 	bl	40edbc <__aeabi_dmul>
  40d45e:	2200      	movs	r2, #0
  40d460:	2300      	movs	r3, #0
  40d462:	4606      	mov	r6, r0
  40d464:	460f      	mov	r7, r1
  40d466:	f7f9 fc87 	bl	406d78 <__aeabi_dcmpeq>
  40d46a:	2800      	cmp	r0, #0
  40d46c:	f040 8083 	bne.w	40d576 <_dtoa_r+0x3a6>
  40d470:	f8cd b008 	str.w	fp, [sp, #8]
  40d474:	9405      	str	r4, [sp, #20]
  40d476:	f8dd b01c 	ldr.w	fp, [sp, #28]
  40d47a:	9c06      	ldr	r4, [sp, #24]
  40d47c:	e029      	b.n	40d4d2 <_dtoa_r+0x302>
  40d47e:	bf00      	nop
  40d480:	636f4361 	.word	0x636f4361
  40d484:	3fd287a7 	.word	0x3fd287a7
  40d488:	8b60c8b3 	.word	0x8b60c8b3
  40d48c:	3fc68a28 	.word	0x3fc68a28
  40d490:	509f79fb 	.word	0x509f79fb
  40d494:	3fd34413 	.word	0x3fd34413
  40d498:	7ff00000 	.word	0x7ff00000
  40d49c:	004119f9 	.word	0x004119f9
  40d4a0:	00411c44 	.word	0x00411c44
  40d4a4:	fffffc0e 	.word	0xfffffc0e
  40d4a8:	3ff80000 	.word	0x3ff80000
  40d4ac:	00411c58 	.word	0x00411c58
  40d4b0:	00411c38 	.word	0x00411c38
  40d4b4:	004119f8 	.word	0x004119f8
  40d4b8:	40240000 	.word	0x40240000
  40d4bc:	f001 fc7e 	bl	40edbc <__aeabi_dmul>
  40d4c0:	2200      	movs	r2, #0
  40d4c2:	2300      	movs	r3, #0
  40d4c4:	4606      	mov	r6, r0
  40d4c6:	460f      	mov	r7, r1
  40d4c8:	f7f9 fc56 	bl	406d78 <__aeabi_dcmpeq>
  40d4cc:	2800      	cmp	r0, #0
  40d4ce:	f040 83de 	bne.w	40dc8e <_dtoa_r+0xabe>
  40d4d2:	4642      	mov	r2, r8
  40d4d4:	464b      	mov	r3, r9
  40d4d6:	4630      	mov	r0, r6
  40d4d8:	4639      	mov	r1, r7
  40d4da:	f001 fd99 	bl	40f010 <__aeabi_ddiv>
  40d4de:	f001 fe7f 	bl	40f1e0 <__aeabi_d2iz>
  40d4e2:	4682      	mov	sl, r0
  40d4e4:	f001 fc04 	bl	40ecf0 <__aeabi_i2d>
  40d4e8:	4642      	mov	r2, r8
  40d4ea:	464b      	mov	r3, r9
  40d4ec:	f001 fc66 	bl	40edbc <__aeabi_dmul>
  40d4f0:	4602      	mov	r2, r0
  40d4f2:	460b      	mov	r3, r1
  40d4f4:	4630      	mov	r0, r6
  40d4f6:	4639      	mov	r1, r7
  40d4f8:	f001 faac 	bl	40ea54 <__aeabi_dsub>
  40d4fc:	f10a 0e30 	add.w	lr, sl, #48	; 0x30
  40d500:	f805 eb01 	strb.w	lr, [r5], #1
  40d504:	ebcb 0e05 	rsb	lr, fp, r5
  40d508:	4574      	cmp	r4, lr
  40d50a:	4606      	mov	r6, r0
  40d50c:	460f      	mov	r7, r1
  40d50e:	f04f 0200 	mov.w	r2, #0
  40d512:	4bb5      	ldr	r3, [pc, #724]	; (40d7e8 <_dtoa_r+0x618>)
  40d514:	d1d2      	bne.n	40d4bc <_dtoa_r+0x2ec>
  40d516:	f8dd b008 	ldr.w	fp, [sp, #8]
  40d51a:	9c05      	ldr	r4, [sp, #20]
  40d51c:	4632      	mov	r2, r6
  40d51e:	463b      	mov	r3, r7
  40d520:	4630      	mov	r0, r6
  40d522:	4639      	mov	r1, r7
  40d524:	f001 fa98 	bl	40ea58 <__adddf3>
  40d528:	4606      	mov	r6, r0
  40d52a:	460f      	mov	r7, r1
  40d52c:	4640      	mov	r0, r8
  40d52e:	4649      	mov	r1, r9
  40d530:	4632      	mov	r2, r6
  40d532:	463b      	mov	r3, r7
  40d534:	f7f9 fc2a 	bl	406d8c <__aeabi_dcmplt>
  40d538:	b948      	cbnz	r0, 40d54e <_dtoa_r+0x37e>
  40d53a:	4640      	mov	r0, r8
  40d53c:	4649      	mov	r1, r9
  40d53e:	4632      	mov	r2, r6
  40d540:	463b      	mov	r3, r7
  40d542:	f7f9 fc19 	bl	406d78 <__aeabi_dcmpeq>
  40d546:	b1b0      	cbz	r0, 40d576 <_dtoa_r+0x3a6>
  40d548:	f01a 0f01 	tst.w	sl, #1
  40d54c:	d013      	beq.n	40d576 <_dtoa_r+0x3a6>
  40d54e:	f815 8c01 	ldrb.w	r8, [r5, #-1]
  40d552:	9907      	ldr	r1, [sp, #28]
  40d554:	1e6b      	subs	r3, r5, #1
  40d556:	e004      	b.n	40d562 <_dtoa_r+0x392>
  40d558:	428b      	cmp	r3, r1
  40d55a:	f000 8440 	beq.w	40ddde <_dtoa_r+0xc0e>
  40d55e:	f813 8d01 	ldrb.w	r8, [r3, #-1]!
  40d562:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
  40d566:	f103 0501 	add.w	r5, r3, #1
  40d56a:	461a      	mov	r2, r3
  40d56c:	d0f4      	beq.n	40d558 <_dtoa_r+0x388>
  40d56e:	f108 0301 	add.w	r3, r8, #1
  40d572:	b2db      	uxtb	r3, r3
  40d574:	7013      	strb	r3, [r2, #0]
  40d576:	4620      	mov	r0, r4
  40d578:	4659      	mov	r1, fp
  40d57a:	f000 fe4d 	bl	40e218 <_Bfree>
  40d57e:	2200      	movs	r2, #0
  40d580:	9b04      	ldr	r3, [sp, #16]
  40d582:	702a      	strb	r2, [r5, #0]
  40d584:	9a22      	ldr	r2, [sp, #136]	; 0x88
  40d586:	3301      	adds	r3, #1
  40d588:	6013      	str	r3, [r2, #0]
  40d58a:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40d58c:	2b00      	cmp	r3, #0
  40d58e:	f000 8345 	beq.w	40dc1c <_dtoa_r+0xa4c>
  40d592:	9807      	ldr	r0, [sp, #28]
  40d594:	601d      	str	r5, [r3, #0]
  40d596:	b017      	add	sp, #92	; 0x5c
  40d598:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40d59c:	9a09      	ldr	r2, [sp, #36]	; 0x24
  40d59e:	2a00      	cmp	r2, #0
  40d5a0:	f000 8084 	beq.w	40d6ac <_dtoa_r+0x4dc>
  40d5a4:	9a20      	ldr	r2, [sp, #128]	; 0x80
  40d5a6:	2a01      	cmp	r2, #1
  40d5a8:	f340 8304 	ble.w	40dbb4 <_dtoa_r+0x9e4>
  40d5ac:	9b06      	ldr	r3, [sp, #24]
  40d5ae:	1e5f      	subs	r7, r3, #1
  40d5b0:	9b08      	ldr	r3, [sp, #32]
  40d5b2:	42bb      	cmp	r3, r7
  40d5b4:	f2c0 83a9 	blt.w	40dd0a <_dtoa_r+0xb3a>
  40d5b8:	1bdf      	subs	r7, r3, r7
  40d5ba:	9b06      	ldr	r3, [sp, #24]
  40d5bc:	2b00      	cmp	r3, #0
  40d5be:	f2c0 849c 	blt.w	40defa <_dtoa_r+0xd2a>
  40d5c2:	9d05      	ldr	r5, [sp, #20]
  40d5c4:	9b06      	ldr	r3, [sp, #24]
  40d5c6:	9a05      	ldr	r2, [sp, #20]
  40d5c8:	4620      	mov	r0, r4
  40d5ca:	441a      	add	r2, r3
  40d5cc:	2101      	movs	r1, #1
  40d5ce:	9205      	str	r2, [sp, #20]
  40d5d0:	449a      	add	sl, r3
  40d5d2:	f000 febb 	bl	40e34c <__i2b>
  40d5d6:	4606      	mov	r6, r0
  40d5d8:	b165      	cbz	r5, 40d5f4 <_dtoa_r+0x424>
  40d5da:	f1ba 0f00 	cmp.w	sl, #0
  40d5de:	dd09      	ble.n	40d5f4 <_dtoa_r+0x424>
  40d5e0:	45aa      	cmp	sl, r5
  40d5e2:	9a05      	ldr	r2, [sp, #20]
  40d5e4:	4653      	mov	r3, sl
  40d5e6:	bfa8      	it	ge
  40d5e8:	462b      	movge	r3, r5
  40d5ea:	1ad2      	subs	r2, r2, r3
  40d5ec:	9205      	str	r2, [sp, #20]
  40d5ee:	1aed      	subs	r5, r5, r3
  40d5f0:	ebc3 0a0a 	rsb	sl, r3, sl
  40d5f4:	9b08      	ldr	r3, [sp, #32]
  40d5f6:	2b00      	cmp	r3, #0
  40d5f8:	dd1a      	ble.n	40d630 <_dtoa_r+0x460>
  40d5fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40d5fc:	2b00      	cmp	r3, #0
  40d5fe:	f000 837d 	beq.w	40dcfc <_dtoa_r+0xb2c>
  40d602:	2f00      	cmp	r7, #0
  40d604:	dd10      	ble.n	40d628 <_dtoa_r+0x458>
  40d606:	4631      	mov	r1, r6
  40d608:	463a      	mov	r2, r7
  40d60a:	4620      	mov	r0, r4
  40d60c:	f000 ff42 	bl	40e494 <__pow5mult>
  40d610:	4606      	mov	r6, r0
  40d612:	465a      	mov	r2, fp
  40d614:	4631      	mov	r1, r6
  40d616:	4620      	mov	r0, r4
  40d618:	f000 fea2 	bl	40e360 <__multiply>
  40d61c:	4659      	mov	r1, fp
  40d61e:	4680      	mov	r8, r0
  40d620:	4620      	mov	r0, r4
  40d622:	f000 fdf9 	bl	40e218 <_Bfree>
  40d626:	46c3      	mov	fp, r8
  40d628:	9b08      	ldr	r3, [sp, #32]
  40d62a:	1bda      	subs	r2, r3, r7
  40d62c:	f040 82a2 	bne.w	40db74 <_dtoa_r+0x9a4>
  40d630:	4620      	mov	r0, r4
  40d632:	2101      	movs	r1, #1
  40d634:	f000 fe8a 	bl	40e34c <__i2b>
  40d638:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40d63a:	2b00      	cmp	r3, #0
  40d63c:	4680      	mov	r8, r0
  40d63e:	dd39      	ble.n	40d6b4 <_dtoa_r+0x4e4>
  40d640:	4601      	mov	r1, r0
  40d642:	461a      	mov	r2, r3
  40d644:	4620      	mov	r0, r4
  40d646:	f000 ff25 	bl	40e494 <__pow5mult>
  40d64a:	9b20      	ldr	r3, [sp, #128]	; 0x80
  40d64c:	2b01      	cmp	r3, #1
  40d64e:	4680      	mov	r8, r0
  40d650:	f340 8296 	ble.w	40db80 <_dtoa_r+0x9b0>
  40d654:	f04f 0900 	mov.w	r9, #0
  40d658:	f8d8 3010 	ldr.w	r3, [r8, #16]
  40d65c:	eb08 0383 	add.w	r3, r8, r3, lsl #2
  40d660:	6918      	ldr	r0, [r3, #16]
  40d662:	f000 fe25 	bl	40e2b0 <__hi0bits>
  40d666:	f1c0 0020 	rsb	r0, r0, #32
  40d66a:	e02d      	b.n	40d6c8 <_dtoa_r+0x4f8>
  40d66c:	2301      	movs	r3, #1
  40d66e:	930b      	str	r3, [sp, #44]	; 0x2c
  40d670:	e66f      	b.n	40d352 <_dtoa_r+0x182>
  40d672:	9804      	ldr	r0, [sp, #16]
  40d674:	f001 fb3c 	bl	40ecf0 <__aeabi_i2d>
  40d678:	4632      	mov	r2, r6
  40d67a:	463b      	mov	r3, r7
  40d67c:	f7f9 fb7c 	bl	406d78 <__aeabi_dcmpeq>
  40d680:	2800      	cmp	r0, #0
  40d682:	f47f ae50 	bne.w	40d326 <_dtoa_r+0x156>
  40d686:	9b04      	ldr	r3, [sp, #16]
  40d688:	3b01      	subs	r3, #1
  40d68a:	9304      	str	r3, [sp, #16]
  40d68c:	e64b      	b.n	40d326 <_dtoa_r+0x156>
  40d68e:	9a05      	ldr	r2, [sp, #20]
  40d690:	9b04      	ldr	r3, [sp, #16]
  40d692:	1ad2      	subs	r2, r2, r3
  40d694:	425b      	negs	r3, r3
  40d696:	9308      	str	r3, [sp, #32]
  40d698:	2300      	movs	r3, #0
  40d69a:	9205      	str	r2, [sp, #20]
  40d69c:	930a      	str	r3, [sp, #40]	; 0x28
  40d69e:	e668      	b.n	40d372 <_dtoa_r+0x1a2>
  40d6a0:	f1ca 0300 	rsb	r3, sl, #0
  40d6a4:	9305      	str	r3, [sp, #20]
  40d6a6:	f04f 0a00 	mov.w	sl, #0
  40d6aa:	e65a      	b.n	40d362 <_dtoa_r+0x192>
  40d6ac:	9f08      	ldr	r7, [sp, #32]
  40d6ae:	9d05      	ldr	r5, [sp, #20]
  40d6b0:	9e09      	ldr	r6, [sp, #36]	; 0x24
  40d6b2:	e791      	b.n	40d5d8 <_dtoa_r+0x408>
  40d6b4:	9b20      	ldr	r3, [sp, #128]	; 0x80
  40d6b6:	2b01      	cmp	r3, #1
  40d6b8:	f340 82b3 	ble.w	40dc22 <_dtoa_r+0xa52>
  40d6bc:	f04f 0900 	mov.w	r9, #0
  40d6c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40d6c2:	2b00      	cmp	r3, #0
  40d6c4:	d1c8      	bne.n	40d658 <_dtoa_r+0x488>
  40d6c6:	2001      	movs	r0, #1
  40d6c8:	4450      	add	r0, sl
  40d6ca:	f010 001f 	ands.w	r0, r0, #31
  40d6ce:	f000 8081 	beq.w	40d7d4 <_dtoa_r+0x604>
  40d6d2:	f1c0 0320 	rsb	r3, r0, #32
  40d6d6:	2b04      	cmp	r3, #4
  40d6d8:	f340 84b8 	ble.w	40e04c <_dtoa_r+0xe7c>
  40d6dc:	f1c0 001c 	rsb	r0, r0, #28
  40d6e0:	9b05      	ldr	r3, [sp, #20]
  40d6e2:	4403      	add	r3, r0
  40d6e4:	9305      	str	r3, [sp, #20]
  40d6e6:	4405      	add	r5, r0
  40d6e8:	4482      	add	sl, r0
  40d6ea:	9b05      	ldr	r3, [sp, #20]
  40d6ec:	2b00      	cmp	r3, #0
  40d6ee:	dd05      	ble.n	40d6fc <_dtoa_r+0x52c>
  40d6f0:	4659      	mov	r1, fp
  40d6f2:	461a      	mov	r2, r3
  40d6f4:	4620      	mov	r0, r4
  40d6f6:	f000 ff1d 	bl	40e534 <__lshift>
  40d6fa:	4683      	mov	fp, r0
  40d6fc:	f1ba 0f00 	cmp.w	sl, #0
  40d700:	dd05      	ble.n	40d70e <_dtoa_r+0x53e>
  40d702:	4641      	mov	r1, r8
  40d704:	4652      	mov	r2, sl
  40d706:	4620      	mov	r0, r4
  40d708:	f000 ff14 	bl	40e534 <__lshift>
  40d70c:	4680      	mov	r8, r0
  40d70e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  40d710:	2b00      	cmp	r3, #0
  40d712:	f040 8268 	bne.w	40dbe6 <_dtoa_r+0xa16>
  40d716:	9b06      	ldr	r3, [sp, #24]
  40d718:	2b00      	cmp	r3, #0
  40d71a:	f340 8295 	ble.w	40dc48 <_dtoa_r+0xa78>
  40d71e:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40d720:	2b00      	cmp	r3, #0
  40d722:	d171      	bne.n	40d808 <_dtoa_r+0x638>
  40d724:	f8dd 901c 	ldr.w	r9, [sp, #28]
  40d728:	9f06      	ldr	r7, [sp, #24]
  40d72a:	464d      	mov	r5, r9
  40d72c:	e002      	b.n	40d734 <_dtoa_r+0x564>
  40d72e:	f000 fd7d 	bl	40e22c <__multadd>
  40d732:	4683      	mov	fp, r0
  40d734:	4641      	mov	r1, r8
  40d736:	4658      	mov	r0, fp
  40d738:	f7ff fcb4 	bl	40d0a4 <quorem>
  40d73c:	f100 0c30 	add.w	ip, r0, #48	; 0x30
  40d740:	f805 cb01 	strb.w	ip, [r5], #1
  40d744:	ebc9 0305 	rsb	r3, r9, r5
  40d748:	42bb      	cmp	r3, r7
  40d74a:	4620      	mov	r0, r4
  40d74c:	4659      	mov	r1, fp
  40d74e:	f04f 020a 	mov.w	r2, #10
  40d752:	f04f 0300 	mov.w	r3, #0
  40d756:	dbea      	blt.n	40d72e <_dtoa_r+0x55e>
  40d758:	9b07      	ldr	r3, [sp, #28]
  40d75a:	9a06      	ldr	r2, [sp, #24]
  40d75c:	2a01      	cmp	r2, #1
  40d75e:	bfac      	ite	ge
  40d760:	189b      	addge	r3, r3, r2
  40d762:	3301      	addlt	r3, #1
  40d764:	461d      	mov	r5, r3
  40d766:	f04f 0a00 	mov.w	sl, #0
  40d76a:	4659      	mov	r1, fp
  40d76c:	2201      	movs	r2, #1
  40d76e:	4620      	mov	r0, r4
  40d770:	f8cd c008 	str.w	ip, [sp, #8]
  40d774:	f000 fede 	bl	40e534 <__lshift>
  40d778:	4641      	mov	r1, r8
  40d77a:	4683      	mov	fp, r0
  40d77c:	f000 ff30 	bl	40e5e0 <__mcmp>
  40d780:	2800      	cmp	r0, #0
  40d782:	f8dd c008 	ldr.w	ip, [sp, #8]
  40d786:	f340 82f6 	ble.w	40dd76 <_dtoa_r+0xba6>
  40d78a:	f815 2c01 	ldrb.w	r2, [r5, #-1]
  40d78e:	9907      	ldr	r1, [sp, #28]
  40d790:	1e6b      	subs	r3, r5, #1
  40d792:	e004      	b.n	40d79e <_dtoa_r+0x5ce>
  40d794:	428b      	cmp	r3, r1
  40d796:	f000 8273 	beq.w	40dc80 <_dtoa_r+0xab0>
  40d79a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
  40d79e:	2a39      	cmp	r2, #57	; 0x39
  40d7a0:	f103 0501 	add.w	r5, r3, #1
  40d7a4:	d0f6      	beq.n	40d794 <_dtoa_r+0x5c4>
  40d7a6:	3201      	adds	r2, #1
  40d7a8:	701a      	strb	r2, [r3, #0]
  40d7aa:	4641      	mov	r1, r8
  40d7ac:	4620      	mov	r0, r4
  40d7ae:	f000 fd33 	bl	40e218 <_Bfree>
  40d7b2:	2e00      	cmp	r6, #0
  40d7b4:	f43f aedf 	beq.w	40d576 <_dtoa_r+0x3a6>
  40d7b8:	f1ba 0f00 	cmp.w	sl, #0
  40d7bc:	d005      	beq.n	40d7ca <_dtoa_r+0x5fa>
  40d7be:	45b2      	cmp	sl, r6
  40d7c0:	d003      	beq.n	40d7ca <_dtoa_r+0x5fa>
  40d7c2:	4651      	mov	r1, sl
  40d7c4:	4620      	mov	r0, r4
  40d7c6:	f000 fd27 	bl	40e218 <_Bfree>
  40d7ca:	4631      	mov	r1, r6
  40d7cc:	4620      	mov	r0, r4
  40d7ce:	f000 fd23 	bl	40e218 <_Bfree>
  40d7d2:	e6d0      	b.n	40d576 <_dtoa_r+0x3a6>
  40d7d4:	201c      	movs	r0, #28
  40d7d6:	e783      	b.n	40d6e0 <_dtoa_r+0x510>
  40d7d8:	4b04      	ldr	r3, [pc, #16]	; (40d7ec <_dtoa_r+0x61c>)
  40d7da:	9a02      	ldr	r2, [sp, #8]
  40d7dc:	1b5b      	subs	r3, r3, r5
  40d7de:	fa02 f003 	lsl.w	r0, r2, r3
  40d7e2:	e56d      	b.n	40d2c0 <_dtoa_r+0xf0>
  40d7e4:	900b      	str	r0, [sp, #44]	; 0x2c
  40d7e6:	e5b4      	b.n	40d352 <_dtoa_r+0x182>
  40d7e8:	40240000 	.word	0x40240000
  40d7ec:	fffffbee 	.word	0xfffffbee
  40d7f0:	4631      	mov	r1, r6
  40d7f2:	2300      	movs	r3, #0
  40d7f4:	4620      	mov	r0, r4
  40d7f6:	220a      	movs	r2, #10
  40d7f8:	f000 fd18 	bl	40e22c <__multadd>
  40d7fc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  40d7fe:	2b00      	cmp	r3, #0
  40d800:	4606      	mov	r6, r0
  40d802:	f340 840c 	ble.w	40e01e <_dtoa_r+0xe4e>
  40d806:	9306      	str	r3, [sp, #24]
  40d808:	2d00      	cmp	r5, #0
  40d80a:	dd05      	ble.n	40d818 <_dtoa_r+0x648>
  40d80c:	4631      	mov	r1, r6
  40d80e:	462a      	mov	r2, r5
  40d810:	4620      	mov	r0, r4
  40d812:	f000 fe8f 	bl	40e534 <__lshift>
  40d816:	4606      	mov	r6, r0
  40d818:	f1b9 0f00 	cmp.w	r9, #0
  40d81c:	f040 82e9 	bne.w	40ddf2 <_dtoa_r+0xc22>
  40d820:	46b1      	mov	r9, r6
  40d822:	9b06      	ldr	r3, [sp, #24]
  40d824:	9a07      	ldr	r2, [sp, #28]
  40d826:	3b01      	subs	r3, #1
  40d828:	18d3      	adds	r3, r2, r3
  40d82a:	9308      	str	r3, [sp, #32]
  40d82c:	9b02      	ldr	r3, [sp, #8]
  40d82e:	f003 0301 	and.w	r3, r3, #1
  40d832:	9309      	str	r3, [sp, #36]	; 0x24
  40d834:	4617      	mov	r7, r2
  40d836:	4641      	mov	r1, r8
  40d838:	4658      	mov	r0, fp
  40d83a:	f7ff fc33 	bl	40d0a4 <quorem>
  40d83e:	4631      	mov	r1, r6
  40d840:	4605      	mov	r5, r0
  40d842:	4658      	mov	r0, fp
  40d844:	f000 fecc 	bl	40e5e0 <__mcmp>
  40d848:	464a      	mov	r2, r9
  40d84a:	4682      	mov	sl, r0
  40d84c:	4641      	mov	r1, r8
  40d84e:	4620      	mov	r0, r4
  40d850:	f000 feea 	bl	40e628 <__mdiff>
  40d854:	68c2      	ldr	r2, [r0, #12]
  40d856:	4603      	mov	r3, r0
  40d858:	f105 0c30 	add.w	ip, r5, #48	; 0x30
  40d85c:	2a00      	cmp	r2, #0
  40d85e:	f040 81b8 	bne.w	40dbd2 <_dtoa_r+0xa02>
  40d862:	4619      	mov	r1, r3
  40d864:	4658      	mov	r0, fp
  40d866:	f8cd c018 	str.w	ip, [sp, #24]
  40d86a:	9305      	str	r3, [sp, #20]
  40d86c:	f000 feb8 	bl	40e5e0 <__mcmp>
  40d870:	9b05      	ldr	r3, [sp, #20]
  40d872:	9002      	str	r0, [sp, #8]
  40d874:	4619      	mov	r1, r3
  40d876:	4620      	mov	r0, r4
  40d878:	f000 fcce 	bl	40e218 <_Bfree>
  40d87c:	9a02      	ldr	r2, [sp, #8]
  40d87e:	f8dd c018 	ldr.w	ip, [sp, #24]
  40d882:	b92a      	cbnz	r2, 40d890 <_dtoa_r+0x6c0>
  40d884:	9b20      	ldr	r3, [sp, #128]	; 0x80
  40d886:	b91b      	cbnz	r3, 40d890 <_dtoa_r+0x6c0>
  40d888:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40d88a:	2b00      	cmp	r3, #0
  40d88c:	f000 83a7 	beq.w	40dfde <_dtoa_r+0xe0e>
  40d890:	f1ba 0f00 	cmp.w	sl, #0
  40d894:	f2c0 8251 	blt.w	40dd3a <_dtoa_r+0xb6a>
  40d898:	d105      	bne.n	40d8a6 <_dtoa_r+0x6d6>
  40d89a:	9b20      	ldr	r3, [sp, #128]	; 0x80
  40d89c:	b91b      	cbnz	r3, 40d8a6 <_dtoa_r+0x6d6>
  40d89e:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40d8a0:	2b00      	cmp	r3, #0
  40d8a2:	f000 824a 	beq.w	40dd3a <_dtoa_r+0xb6a>
  40d8a6:	2a00      	cmp	r2, #0
  40d8a8:	f300 82b7 	bgt.w	40de1a <_dtoa_r+0xc4a>
  40d8ac:	9b08      	ldr	r3, [sp, #32]
  40d8ae:	f887 c000 	strb.w	ip, [r7]
  40d8b2:	f107 0a01 	add.w	sl, r7, #1
  40d8b6:	429f      	cmp	r7, r3
  40d8b8:	4655      	mov	r5, sl
  40d8ba:	f000 82ba 	beq.w	40de32 <_dtoa_r+0xc62>
  40d8be:	4659      	mov	r1, fp
  40d8c0:	220a      	movs	r2, #10
  40d8c2:	2300      	movs	r3, #0
  40d8c4:	4620      	mov	r0, r4
  40d8c6:	f000 fcb1 	bl	40e22c <__multadd>
  40d8ca:	454e      	cmp	r6, r9
  40d8cc:	4683      	mov	fp, r0
  40d8ce:	4631      	mov	r1, r6
  40d8d0:	4620      	mov	r0, r4
  40d8d2:	f04f 020a 	mov.w	r2, #10
  40d8d6:	f04f 0300 	mov.w	r3, #0
  40d8da:	f000 8174 	beq.w	40dbc6 <_dtoa_r+0x9f6>
  40d8de:	f000 fca5 	bl	40e22c <__multadd>
  40d8e2:	4649      	mov	r1, r9
  40d8e4:	4606      	mov	r6, r0
  40d8e6:	220a      	movs	r2, #10
  40d8e8:	4620      	mov	r0, r4
  40d8ea:	2300      	movs	r3, #0
  40d8ec:	f000 fc9e 	bl	40e22c <__multadd>
  40d8f0:	4657      	mov	r7, sl
  40d8f2:	4681      	mov	r9, r0
  40d8f4:	e79f      	b.n	40d836 <_dtoa_r+0x666>
  40d8f6:	2301      	movs	r3, #1
  40d8f8:	9309      	str	r3, [sp, #36]	; 0x24
  40d8fa:	9b21      	ldr	r3, [sp, #132]	; 0x84
  40d8fc:	2b00      	cmp	r3, #0
  40d8fe:	f340 8213 	ble.w	40dd28 <_dtoa_r+0xb58>
  40d902:	461f      	mov	r7, r3
  40d904:	461e      	mov	r6, r3
  40d906:	930c      	str	r3, [sp, #48]	; 0x30
  40d908:	9306      	str	r3, [sp, #24]
  40d90a:	2100      	movs	r1, #0
  40d90c:	2f17      	cmp	r7, #23
  40d90e:	6461      	str	r1, [r4, #68]	; 0x44
  40d910:	d90a      	bls.n	40d928 <_dtoa_r+0x758>
  40d912:	2201      	movs	r2, #1
  40d914:	2304      	movs	r3, #4
  40d916:	005b      	lsls	r3, r3, #1
  40d918:	f103 0014 	add.w	r0, r3, #20
  40d91c:	4287      	cmp	r7, r0
  40d91e:	4611      	mov	r1, r2
  40d920:	f102 0201 	add.w	r2, r2, #1
  40d924:	d2f7      	bcs.n	40d916 <_dtoa_r+0x746>
  40d926:	6461      	str	r1, [r4, #68]	; 0x44
  40d928:	4620      	mov	r0, r4
  40d92a:	f000 fc4f 	bl	40e1cc <_Balloc>
  40d92e:	2e0e      	cmp	r6, #14
  40d930:	9007      	str	r0, [sp, #28]
  40d932:	6420      	str	r0, [r4, #64]	; 0x40
  40d934:	f63f ad5c 	bhi.w	40d3f0 <_dtoa_r+0x220>
  40d938:	2d00      	cmp	r5, #0
  40d93a:	f43f ad59 	beq.w	40d3f0 <_dtoa_r+0x220>
  40d93e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  40d942:	9904      	ldr	r1, [sp, #16]
  40d944:	2900      	cmp	r1, #0
  40d946:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
  40d94a:	f340 8221 	ble.w	40dd90 <_dtoa_r+0xbc0>
  40d94e:	4bb7      	ldr	r3, [pc, #732]	; (40dc2c <_dtoa_r+0xa5c>)
  40d950:	f001 020f 	and.w	r2, r1, #15
  40d954:	110d      	asrs	r5, r1, #4
  40d956:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  40d95a:	06e9      	lsls	r1, r5, #27
  40d95c:	e9d3 6700 	ldrd	r6, r7, [r3]
  40d960:	f140 81db 	bpl.w	40dd1a <_dtoa_r+0xb4a>
  40d964:	4bb2      	ldr	r3, [pc, #712]	; (40dc30 <_dtoa_r+0xa60>)
  40d966:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
  40d96a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
  40d96e:	f001 fb4f 	bl	40f010 <__aeabi_ddiv>
  40d972:	e9cd 0102 	strd	r0, r1, [sp, #8]
  40d976:	f005 050f 	and.w	r5, r5, #15
  40d97a:	f04f 0803 	mov.w	r8, #3
  40d97e:	b18d      	cbz	r5, 40d9a4 <_dtoa_r+0x7d4>
  40d980:	f8df 92ac 	ldr.w	r9, [pc, #684]	; 40dc30 <_dtoa_r+0xa60>
  40d984:	4630      	mov	r0, r6
  40d986:	4639      	mov	r1, r7
  40d988:	07ea      	lsls	r2, r5, #31
  40d98a:	d505      	bpl.n	40d998 <_dtoa_r+0x7c8>
  40d98c:	e9d9 2300 	ldrd	r2, r3, [r9]
  40d990:	f108 0801 	add.w	r8, r8, #1
  40d994:	f001 fa12 	bl	40edbc <__aeabi_dmul>
  40d998:	106d      	asrs	r5, r5, #1
  40d99a:	f109 0908 	add.w	r9, r9, #8
  40d99e:	d1f3      	bne.n	40d988 <_dtoa_r+0x7b8>
  40d9a0:	4606      	mov	r6, r0
  40d9a2:	460f      	mov	r7, r1
  40d9a4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  40d9a8:	4632      	mov	r2, r6
  40d9aa:	463b      	mov	r3, r7
  40d9ac:	f001 fb30 	bl	40f010 <__aeabi_ddiv>
  40d9b0:	e9cd 0102 	strd	r0, r1, [sp, #8]
  40d9b4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  40d9b6:	b143      	cbz	r3, 40d9ca <_dtoa_r+0x7fa>
  40d9b8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  40d9bc:	2200      	movs	r2, #0
  40d9be:	4b9d      	ldr	r3, [pc, #628]	; (40dc34 <_dtoa_r+0xa64>)
  40d9c0:	f7f9 f9e4 	bl	406d8c <__aeabi_dcmplt>
  40d9c4:	2800      	cmp	r0, #0
  40d9c6:	f040 82ac 	bne.w	40df22 <_dtoa_r+0xd52>
  40d9ca:	4640      	mov	r0, r8
  40d9cc:	f001 f990 	bl	40ecf0 <__aeabi_i2d>
  40d9d0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  40d9d4:	f001 f9f2 	bl	40edbc <__aeabi_dmul>
  40d9d8:	4b97      	ldr	r3, [pc, #604]	; (40dc38 <_dtoa_r+0xa68>)
  40d9da:	2200      	movs	r2, #0
  40d9dc:	f001 f83c 	bl	40ea58 <__adddf3>
  40d9e0:	9b06      	ldr	r3, [sp, #24]
  40d9e2:	4606      	mov	r6, r0
  40d9e4:	f1a1 7750 	sub.w	r7, r1, #54525952	; 0x3400000
  40d9e8:	2b00      	cmp	r3, #0
  40d9ea:	f000 8162 	beq.w	40dcb2 <_dtoa_r+0xae2>
  40d9ee:	9b04      	ldr	r3, [sp, #16]
  40d9f0:	f8dd 9018 	ldr.w	r9, [sp, #24]
  40d9f4:	9312      	str	r3, [sp, #72]	; 0x48
  40d9f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40d9f8:	2b00      	cmp	r3, #0
  40d9fa:	f000 8221 	beq.w	40de40 <_dtoa_r+0xc70>
  40d9fe:	4b8b      	ldr	r3, [pc, #556]	; (40dc2c <_dtoa_r+0xa5c>)
  40da00:	498e      	ldr	r1, [pc, #568]	; (40dc3c <_dtoa_r+0xa6c>)
  40da02:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
  40da06:	e953 2302 	ldrd	r2, r3, [r3, #-8]
  40da0a:	2000      	movs	r0, #0
  40da0c:	f001 fb00 	bl	40f010 <__aeabi_ddiv>
  40da10:	4632      	mov	r2, r6
  40da12:	463b      	mov	r3, r7
  40da14:	f001 f81e 	bl	40ea54 <__aeabi_dsub>
  40da18:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
  40da1c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
  40da20:	4639      	mov	r1, r7
  40da22:	4630      	mov	r0, r6
  40da24:	f001 fbdc 	bl	40f1e0 <__aeabi_d2iz>
  40da28:	4605      	mov	r5, r0
  40da2a:	f001 f961 	bl	40ecf0 <__aeabi_i2d>
  40da2e:	3530      	adds	r5, #48	; 0x30
  40da30:	4602      	mov	r2, r0
  40da32:	460b      	mov	r3, r1
  40da34:	4630      	mov	r0, r6
  40da36:	4639      	mov	r1, r7
  40da38:	f001 f80c 	bl	40ea54 <__aeabi_dsub>
  40da3c:	fa5f f885 	uxtb.w	r8, r5
  40da40:	9d07      	ldr	r5, [sp, #28]
  40da42:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
  40da46:	f885 8000 	strb.w	r8, [r5]
  40da4a:	4606      	mov	r6, r0
  40da4c:	460f      	mov	r7, r1
  40da4e:	3501      	adds	r5, #1
  40da50:	f7f9 f99c 	bl	406d8c <__aeabi_dcmplt>
  40da54:	2800      	cmp	r0, #0
  40da56:	f040 82b2 	bne.w	40dfbe <_dtoa_r+0xdee>
  40da5a:	4632      	mov	r2, r6
  40da5c:	463b      	mov	r3, r7
  40da5e:	2000      	movs	r0, #0
  40da60:	4974      	ldr	r1, [pc, #464]	; (40dc34 <_dtoa_r+0xa64>)
  40da62:	f000 fff7 	bl	40ea54 <__aeabi_dsub>
  40da66:	4602      	mov	r2, r0
  40da68:	460b      	mov	r3, r1
  40da6a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
  40da6e:	f7f9 f9ab 	bl	406dc8 <__aeabi_dcmpgt>
  40da72:	2800      	cmp	r0, #0
  40da74:	f040 82ac 	bne.w	40dfd0 <_dtoa_r+0xe00>
  40da78:	f1b9 0f01 	cmp.w	r9, #1
  40da7c:	f340 8138 	ble.w	40dcf0 <_dtoa_r+0xb20>
  40da80:	9b07      	ldr	r3, [sp, #28]
  40da82:	f8cd a04c 	str.w	sl, [sp, #76]	; 0x4c
  40da86:	f8cd b008 	str.w	fp, [sp, #8]
  40da8a:	4499      	add	r9, r3
  40da8c:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	; 0x40
  40da90:	46a0      	mov	r8, r4
  40da92:	e00d      	b.n	40dab0 <_dtoa_r+0x8e0>
  40da94:	2000      	movs	r0, #0
  40da96:	4967      	ldr	r1, [pc, #412]	; (40dc34 <_dtoa_r+0xa64>)
  40da98:	f000 ffdc 	bl	40ea54 <__aeabi_dsub>
  40da9c:	4652      	mov	r2, sl
  40da9e:	465b      	mov	r3, fp
  40daa0:	f7f9 f974 	bl	406d8c <__aeabi_dcmplt>
  40daa4:	2800      	cmp	r0, #0
  40daa6:	f040 828e 	bne.w	40dfc6 <_dtoa_r+0xdf6>
  40daaa:	454d      	cmp	r5, r9
  40daac:	f000 811b 	beq.w	40dce6 <_dtoa_r+0xb16>
  40dab0:	4650      	mov	r0, sl
  40dab2:	4659      	mov	r1, fp
  40dab4:	2200      	movs	r2, #0
  40dab6:	4b62      	ldr	r3, [pc, #392]	; (40dc40 <_dtoa_r+0xa70>)
  40dab8:	f001 f980 	bl	40edbc <__aeabi_dmul>
  40dabc:	2200      	movs	r2, #0
  40dabe:	4b60      	ldr	r3, [pc, #384]	; (40dc40 <_dtoa_r+0xa70>)
  40dac0:	4682      	mov	sl, r0
  40dac2:	468b      	mov	fp, r1
  40dac4:	4630      	mov	r0, r6
  40dac6:	4639      	mov	r1, r7
  40dac8:	f001 f978 	bl	40edbc <__aeabi_dmul>
  40dacc:	460f      	mov	r7, r1
  40dace:	4606      	mov	r6, r0
  40dad0:	f001 fb86 	bl	40f1e0 <__aeabi_d2iz>
  40dad4:	4604      	mov	r4, r0
  40dad6:	f001 f90b 	bl	40ecf0 <__aeabi_i2d>
  40dada:	4602      	mov	r2, r0
  40dadc:	460b      	mov	r3, r1
  40dade:	4630      	mov	r0, r6
  40dae0:	4639      	mov	r1, r7
  40dae2:	f000 ffb7 	bl	40ea54 <__aeabi_dsub>
  40dae6:	3430      	adds	r4, #48	; 0x30
  40dae8:	b2e4      	uxtb	r4, r4
  40daea:	4652      	mov	r2, sl
  40daec:	465b      	mov	r3, fp
  40daee:	f805 4b01 	strb.w	r4, [r5], #1
  40daf2:	4606      	mov	r6, r0
  40daf4:	460f      	mov	r7, r1
  40daf6:	f7f9 f949 	bl	406d8c <__aeabi_dcmplt>
  40dafa:	4632      	mov	r2, r6
  40dafc:	463b      	mov	r3, r7
  40dafe:	2800      	cmp	r0, #0
  40db00:	d0c8      	beq.n	40da94 <_dtoa_r+0x8c4>
  40db02:	9b12      	ldr	r3, [sp, #72]	; 0x48
  40db04:	f8dd b008 	ldr.w	fp, [sp, #8]
  40db08:	9304      	str	r3, [sp, #16]
  40db0a:	4644      	mov	r4, r8
  40db0c:	e533      	b.n	40d576 <_dtoa_r+0x3a6>
  40db0e:	2300      	movs	r3, #0
  40db10:	9309      	str	r3, [sp, #36]	; 0x24
  40db12:	9b21      	ldr	r3, [sp, #132]	; 0x84
  40db14:	9a04      	ldr	r2, [sp, #16]
  40db16:	4413      	add	r3, r2
  40db18:	930c      	str	r3, [sp, #48]	; 0x30
  40db1a:	3301      	adds	r3, #1
  40db1c:	2b00      	cmp	r3, #0
  40db1e:	9306      	str	r3, [sp, #24]
  40db20:	f340 8109 	ble.w	40dd36 <_dtoa_r+0xb66>
  40db24:	9e06      	ldr	r6, [sp, #24]
  40db26:	4637      	mov	r7, r6
  40db28:	e6ef      	b.n	40d90a <_dtoa_r+0x73a>
  40db2a:	2300      	movs	r3, #0
  40db2c:	9309      	str	r3, [sp, #36]	; 0x24
  40db2e:	e6e4      	b.n	40d8fa <_dtoa_r+0x72a>
  40db30:	9b06      	ldr	r3, [sp, #24]
  40db32:	2b00      	cmp	r3, #0
  40db34:	f73f ac6d 	bgt.w	40d412 <_dtoa_r+0x242>
  40db38:	f040 8262 	bne.w	40e000 <_dtoa_r+0xe30>
  40db3c:	4640      	mov	r0, r8
  40db3e:	2200      	movs	r2, #0
  40db40:	4b40      	ldr	r3, [pc, #256]	; (40dc44 <_dtoa_r+0xa74>)
  40db42:	4649      	mov	r1, r9
  40db44:	f001 f93a 	bl	40edbc <__aeabi_dmul>
  40db48:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  40db4c:	f7f9 f932 	bl	406db4 <__aeabi_dcmpge>
  40db50:	f8dd 8018 	ldr.w	r8, [sp, #24]
  40db54:	4646      	mov	r6, r8
  40db56:	2800      	cmp	r0, #0
  40db58:	f000 808a 	beq.w	40dc70 <_dtoa_r+0xaa0>
  40db5c:	9b21      	ldr	r3, [sp, #132]	; 0x84
  40db5e:	9d07      	ldr	r5, [sp, #28]
  40db60:	43db      	mvns	r3, r3
  40db62:	9304      	str	r3, [sp, #16]
  40db64:	4641      	mov	r1, r8
  40db66:	4620      	mov	r0, r4
  40db68:	f000 fb56 	bl	40e218 <_Bfree>
  40db6c:	2e00      	cmp	r6, #0
  40db6e:	f47f ae2c 	bne.w	40d7ca <_dtoa_r+0x5fa>
  40db72:	e500      	b.n	40d576 <_dtoa_r+0x3a6>
  40db74:	4659      	mov	r1, fp
  40db76:	4620      	mov	r0, r4
  40db78:	f000 fc8c 	bl	40e494 <__pow5mult>
  40db7c:	4683      	mov	fp, r0
  40db7e:	e557      	b.n	40d630 <_dtoa_r+0x460>
  40db80:	9b02      	ldr	r3, [sp, #8]
  40db82:	2b00      	cmp	r3, #0
  40db84:	f47f ad66 	bne.w	40d654 <_dtoa_r+0x484>
  40db88:	9b03      	ldr	r3, [sp, #12]
  40db8a:	f3c3 0313 	ubfx	r3, r3, #0, #20
  40db8e:	2b00      	cmp	r3, #0
  40db90:	f47f ad94 	bne.w	40d6bc <_dtoa_r+0x4ec>
  40db94:	9b03      	ldr	r3, [sp, #12]
  40db96:	f023 4700 	bic.w	r7, r3, #2147483648	; 0x80000000
  40db9a:	0d3f      	lsrs	r7, r7, #20
  40db9c:	053f      	lsls	r7, r7, #20
  40db9e:	2f00      	cmp	r7, #0
  40dba0:	f000 821a 	beq.w	40dfd8 <_dtoa_r+0xe08>
  40dba4:	9b05      	ldr	r3, [sp, #20]
  40dba6:	3301      	adds	r3, #1
  40dba8:	9305      	str	r3, [sp, #20]
  40dbaa:	f10a 0a01 	add.w	sl, sl, #1
  40dbae:	f04f 0901 	mov.w	r9, #1
  40dbb2:	e585      	b.n	40d6c0 <_dtoa_r+0x4f0>
  40dbb4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  40dbb6:	2a00      	cmp	r2, #0
  40dbb8:	f000 81a5 	beq.w	40df06 <_dtoa_r+0xd36>
  40dbbc:	f203 4333 	addw	r3, r3, #1075	; 0x433
  40dbc0:	9f08      	ldr	r7, [sp, #32]
  40dbc2:	9d05      	ldr	r5, [sp, #20]
  40dbc4:	e4ff      	b.n	40d5c6 <_dtoa_r+0x3f6>
  40dbc6:	f000 fb31 	bl	40e22c <__multadd>
  40dbca:	4657      	mov	r7, sl
  40dbcc:	4606      	mov	r6, r0
  40dbce:	4681      	mov	r9, r0
  40dbd0:	e631      	b.n	40d836 <_dtoa_r+0x666>
  40dbd2:	4601      	mov	r1, r0
  40dbd4:	4620      	mov	r0, r4
  40dbd6:	f8cd c008 	str.w	ip, [sp, #8]
  40dbda:	f000 fb1d 	bl	40e218 <_Bfree>
  40dbde:	2201      	movs	r2, #1
  40dbe0:	f8dd c008 	ldr.w	ip, [sp, #8]
  40dbe4:	e654      	b.n	40d890 <_dtoa_r+0x6c0>
  40dbe6:	4658      	mov	r0, fp
  40dbe8:	4641      	mov	r1, r8
  40dbea:	f000 fcf9 	bl	40e5e0 <__mcmp>
  40dbee:	2800      	cmp	r0, #0
  40dbf0:	f6bf ad91 	bge.w	40d716 <_dtoa_r+0x546>
  40dbf4:	9f04      	ldr	r7, [sp, #16]
  40dbf6:	4659      	mov	r1, fp
  40dbf8:	2300      	movs	r3, #0
  40dbfa:	4620      	mov	r0, r4
  40dbfc:	220a      	movs	r2, #10
  40dbfe:	3f01      	subs	r7, #1
  40dc00:	9704      	str	r7, [sp, #16]
  40dc02:	f000 fb13 	bl	40e22c <__multadd>
  40dc06:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40dc08:	4683      	mov	fp, r0
  40dc0a:	2b00      	cmp	r3, #0
  40dc0c:	f47f adf0 	bne.w	40d7f0 <_dtoa_r+0x620>
  40dc10:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  40dc12:	2b00      	cmp	r3, #0
  40dc14:	f340 81f8 	ble.w	40e008 <_dtoa_r+0xe38>
  40dc18:	9306      	str	r3, [sp, #24]
  40dc1a:	e583      	b.n	40d724 <_dtoa_r+0x554>
  40dc1c:	9807      	ldr	r0, [sp, #28]
  40dc1e:	f7ff bb0b 	b.w	40d238 <_dtoa_r+0x68>
  40dc22:	9b02      	ldr	r3, [sp, #8]
  40dc24:	2b00      	cmp	r3, #0
  40dc26:	f47f ad49 	bne.w	40d6bc <_dtoa_r+0x4ec>
  40dc2a:	e7ad      	b.n	40db88 <_dtoa_r+0x9b8>
  40dc2c:	00411c58 	.word	0x00411c58
  40dc30:	00411d30 	.word	0x00411d30
  40dc34:	3ff00000 	.word	0x3ff00000
  40dc38:	401c0000 	.word	0x401c0000
  40dc3c:	3fe00000 	.word	0x3fe00000
  40dc40:	40240000 	.word	0x40240000
  40dc44:	40140000 	.word	0x40140000
  40dc48:	9b20      	ldr	r3, [sp, #128]	; 0x80
  40dc4a:	2b02      	cmp	r3, #2
  40dc4c:	f77f ad67 	ble.w	40d71e <_dtoa_r+0x54e>
  40dc50:	9b06      	ldr	r3, [sp, #24]
  40dc52:	2b00      	cmp	r3, #0
  40dc54:	d182      	bne.n	40db5c <_dtoa_r+0x98c>
  40dc56:	4641      	mov	r1, r8
  40dc58:	2205      	movs	r2, #5
  40dc5a:	4620      	mov	r0, r4
  40dc5c:	f000 fae6 	bl	40e22c <__multadd>
  40dc60:	4680      	mov	r8, r0
  40dc62:	4641      	mov	r1, r8
  40dc64:	4658      	mov	r0, fp
  40dc66:	f000 fcbb 	bl	40e5e0 <__mcmp>
  40dc6a:	2800      	cmp	r0, #0
  40dc6c:	f77f af76 	ble.w	40db5c <_dtoa_r+0x98c>
  40dc70:	9a04      	ldr	r2, [sp, #16]
  40dc72:	9907      	ldr	r1, [sp, #28]
  40dc74:	2331      	movs	r3, #49	; 0x31
  40dc76:	3201      	adds	r2, #1
  40dc78:	9204      	str	r2, [sp, #16]
  40dc7a:	700b      	strb	r3, [r1, #0]
  40dc7c:	1c4d      	adds	r5, r1, #1
  40dc7e:	e771      	b.n	40db64 <_dtoa_r+0x994>
  40dc80:	9a04      	ldr	r2, [sp, #16]
  40dc82:	3201      	adds	r2, #1
  40dc84:	9204      	str	r2, [sp, #16]
  40dc86:	9a07      	ldr	r2, [sp, #28]
  40dc88:	2331      	movs	r3, #49	; 0x31
  40dc8a:	7013      	strb	r3, [r2, #0]
  40dc8c:	e58d      	b.n	40d7aa <_dtoa_r+0x5da>
  40dc8e:	f8dd b008 	ldr.w	fp, [sp, #8]
  40dc92:	9c05      	ldr	r4, [sp, #20]
  40dc94:	e46f      	b.n	40d576 <_dtoa_r+0x3a6>
  40dc96:	4640      	mov	r0, r8
  40dc98:	f001 f82a 	bl	40ecf0 <__aeabi_i2d>
  40dc9c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  40dca0:	f001 f88c 	bl	40edbc <__aeabi_dmul>
  40dca4:	2200      	movs	r2, #0
  40dca6:	4bbc      	ldr	r3, [pc, #752]	; (40df98 <_dtoa_r+0xdc8>)
  40dca8:	f000 fed6 	bl	40ea58 <__adddf3>
  40dcac:	4606      	mov	r6, r0
  40dcae:	f1a1 7750 	sub.w	r7, r1, #54525952	; 0x3400000
  40dcb2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  40dcb6:	2200      	movs	r2, #0
  40dcb8:	4bb8      	ldr	r3, [pc, #736]	; (40df9c <_dtoa_r+0xdcc>)
  40dcba:	f000 fecb 	bl	40ea54 <__aeabi_dsub>
  40dcbe:	4632      	mov	r2, r6
  40dcc0:	463b      	mov	r3, r7
  40dcc2:	e9cd 0102 	strd	r0, r1, [sp, #8]
  40dcc6:	f7f9 f87f 	bl	406dc8 <__aeabi_dcmpgt>
  40dcca:	4680      	mov	r8, r0
  40dccc:	2800      	cmp	r0, #0
  40dcce:	f040 80b3 	bne.w	40de38 <_dtoa_r+0xc68>
  40dcd2:	4632      	mov	r2, r6
  40dcd4:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
  40dcd8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  40dcdc:	f7f9 f856 	bl	406d8c <__aeabi_dcmplt>
  40dce0:	b130      	cbz	r0, 40dcf0 <_dtoa_r+0xb20>
  40dce2:	4646      	mov	r6, r8
  40dce4:	e73a      	b.n	40db5c <_dtoa_r+0x98c>
  40dce6:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
  40dcea:	f8dd b008 	ldr.w	fp, [sp, #8]
  40dcee:	4644      	mov	r4, r8
  40dcf0:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
  40dcf4:	e9cd 2302 	strd	r2, r3, [sp, #8]
  40dcf8:	f7ff bb7a 	b.w	40d3f0 <_dtoa_r+0x220>
  40dcfc:	4659      	mov	r1, fp
  40dcfe:	9a08      	ldr	r2, [sp, #32]
  40dd00:	4620      	mov	r0, r4
  40dd02:	f000 fbc7 	bl	40e494 <__pow5mult>
  40dd06:	4683      	mov	fp, r0
  40dd08:	e492      	b.n	40d630 <_dtoa_r+0x460>
  40dd0a:	9b08      	ldr	r3, [sp, #32]
  40dd0c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  40dd0e:	9708      	str	r7, [sp, #32]
  40dd10:	1afb      	subs	r3, r7, r3
  40dd12:	441a      	add	r2, r3
  40dd14:	920a      	str	r2, [sp, #40]	; 0x28
  40dd16:	2700      	movs	r7, #0
  40dd18:	e44f      	b.n	40d5ba <_dtoa_r+0x3ea>
  40dd1a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
  40dd1e:	f04f 0802 	mov.w	r8, #2
  40dd22:	e9cd 2302 	strd	r2, r3, [sp, #8]
  40dd26:	e62a      	b.n	40d97e <_dtoa_r+0x7ae>
  40dd28:	2601      	movs	r6, #1
  40dd2a:	9621      	str	r6, [sp, #132]	; 0x84
  40dd2c:	960c      	str	r6, [sp, #48]	; 0x30
  40dd2e:	9606      	str	r6, [sp, #24]
  40dd30:	2100      	movs	r1, #0
  40dd32:	6461      	str	r1, [r4, #68]	; 0x44
  40dd34:	e5f8      	b.n	40d928 <_dtoa_r+0x758>
  40dd36:	461e      	mov	r6, r3
  40dd38:	e7fa      	b.n	40dd30 <_dtoa_r+0xb60>
  40dd3a:	2a00      	cmp	r2, #0
  40dd3c:	dd15      	ble.n	40dd6a <_dtoa_r+0xb9a>
  40dd3e:	4659      	mov	r1, fp
  40dd40:	2201      	movs	r2, #1
  40dd42:	4620      	mov	r0, r4
  40dd44:	f8cd c008 	str.w	ip, [sp, #8]
  40dd48:	f000 fbf4 	bl	40e534 <__lshift>
  40dd4c:	4641      	mov	r1, r8
  40dd4e:	4683      	mov	fp, r0
  40dd50:	f000 fc46 	bl	40e5e0 <__mcmp>
  40dd54:	2800      	cmp	r0, #0
  40dd56:	f8dd c008 	ldr.w	ip, [sp, #8]
  40dd5a:	f340 814a 	ble.w	40dff2 <_dtoa_r+0xe22>
  40dd5e:	f1bc 0f39 	cmp.w	ip, #57	; 0x39
  40dd62:	f000 8106 	beq.w	40df72 <_dtoa_r+0xda2>
  40dd66:	f10c 0c01 	add.w	ip, ip, #1
  40dd6a:	46b2      	mov	sl, r6
  40dd6c:	f887 c000 	strb.w	ip, [r7]
  40dd70:	1c7d      	adds	r5, r7, #1
  40dd72:	464e      	mov	r6, r9
  40dd74:	e519      	b.n	40d7aa <_dtoa_r+0x5da>
  40dd76:	d104      	bne.n	40dd82 <_dtoa_r+0xbb2>
  40dd78:	f01c 0f01 	tst.w	ip, #1
  40dd7c:	d001      	beq.n	40dd82 <_dtoa_r+0xbb2>
  40dd7e:	e504      	b.n	40d78a <_dtoa_r+0x5ba>
  40dd80:	4615      	mov	r5, r2
  40dd82:	f815 3c01 	ldrb.w	r3, [r5, #-1]
  40dd86:	2b30      	cmp	r3, #48	; 0x30
  40dd88:	f105 32ff 	add.w	r2, r5, #4294967295
  40dd8c:	d0f8      	beq.n	40dd80 <_dtoa_r+0xbb0>
  40dd8e:	e50c      	b.n	40d7aa <_dtoa_r+0x5da>
  40dd90:	9b04      	ldr	r3, [sp, #16]
  40dd92:	425d      	negs	r5, r3
  40dd94:	2d00      	cmp	r5, #0
  40dd96:	f000 80bd 	beq.w	40df14 <_dtoa_r+0xd44>
  40dd9a:	4b81      	ldr	r3, [pc, #516]	; (40dfa0 <_dtoa_r+0xdd0>)
  40dd9c:	f005 020f 	and.w	r2, r5, #15
  40dda0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  40dda4:	e9d3 2300 	ldrd	r2, r3, [r3]
  40dda8:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
  40ddac:	f001 f806 	bl	40edbc <__aeabi_dmul>
  40ddb0:	112d      	asrs	r5, r5, #4
  40ddb2:	e9cd 0102 	strd	r0, r1, [sp, #8]
  40ddb6:	f000 812c 	beq.w	40e012 <_dtoa_r+0xe42>
  40ddba:	4e7a      	ldr	r6, [pc, #488]	; (40dfa4 <_dtoa_r+0xdd4>)
  40ddbc:	f04f 0802 	mov.w	r8, #2
  40ddc0:	07eb      	lsls	r3, r5, #31
  40ddc2:	d505      	bpl.n	40ddd0 <_dtoa_r+0xc00>
  40ddc4:	e9d6 2300 	ldrd	r2, r3, [r6]
  40ddc8:	f108 0801 	add.w	r8, r8, #1
  40ddcc:	f000 fff6 	bl	40edbc <__aeabi_dmul>
  40ddd0:	106d      	asrs	r5, r5, #1
  40ddd2:	f106 0608 	add.w	r6, r6, #8
  40ddd6:	d1f3      	bne.n	40ddc0 <_dtoa_r+0xbf0>
  40ddd8:	e9cd 0102 	strd	r0, r1, [sp, #8]
  40dddc:	e5ea      	b.n	40d9b4 <_dtoa_r+0x7e4>
  40ddde:	9a04      	ldr	r2, [sp, #16]
  40dde0:	3201      	adds	r2, #1
  40dde2:	9204      	str	r2, [sp, #16]
  40dde4:	9a07      	ldr	r2, [sp, #28]
  40dde6:	2330      	movs	r3, #48	; 0x30
  40dde8:	7013      	strb	r3, [r2, #0]
  40ddea:	2331      	movs	r3, #49	; 0x31
  40ddec:	7013      	strb	r3, [r2, #0]
  40ddee:	f7ff bbc2 	b.w	40d576 <_dtoa_r+0x3a6>
  40ddf2:	6871      	ldr	r1, [r6, #4]
  40ddf4:	4620      	mov	r0, r4
  40ddf6:	f000 f9e9 	bl	40e1cc <_Balloc>
  40ddfa:	6933      	ldr	r3, [r6, #16]
  40ddfc:	1c9a      	adds	r2, r3, #2
  40ddfe:	4605      	mov	r5, r0
  40de00:	0092      	lsls	r2, r2, #2
  40de02:	f106 010c 	add.w	r1, r6, #12
  40de06:	300c      	adds	r0, #12
  40de08:	f7fb f86e 	bl	408ee8 <memcpy>
  40de0c:	4620      	mov	r0, r4
  40de0e:	4629      	mov	r1, r5
  40de10:	2201      	movs	r2, #1
  40de12:	f000 fb8f 	bl	40e534 <__lshift>
  40de16:	4681      	mov	r9, r0
  40de18:	e503      	b.n	40d822 <_dtoa_r+0x652>
  40de1a:	f1bc 0f39 	cmp.w	ip, #57	; 0x39
  40de1e:	f000 80a8 	beq.w	40df72 <_dtoa_r+0xda2>
  40de22:	f10c 0c01 	add.w	ip, ip, #1
  40de26:	46b2      	mov	sl, r6
  40de28:	f887 c000 	strb.w	ip, [r7]
  40de2c:	1c7d      	adds	r5, r7, #1
  40de2e:	464e      	mov	r6, r9
  40de30:	e4bb      	b.n	40d7aa <_dtoa_r+0x5da>
  40de32:	46b2      	mov	sl, r6
  40de34:	464e      	mov	r6, r9
  40de36:	e498      	b.n	40d76a <_dtoa_r+0x59a>
  40de38:	f04f 0800 	mov.w	r8, #0
  40de3c:	4646      	mov	r6, r8
  40de3e:	e717      	b.n	40dc70 <_dtoa_r+0xaa0>
  40de40:	4957      	ldr	r1, [pc, #348]	; (40dfa0 <_dtoa_r+0xdd0>)
  40de42:	f109 33ff 	add.w	r3, r9, #4294967295
  40de46:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
  40de4a:	4632      	mov	r2, r6
  40de4c:	9313      	str	r3, [sp, #76]	; 0x4c
  40de4e:	e9d1 0100 	ldrd	r0, r1, [r1]
  40de52:	463b      	mov	r3, r7
  40de54:	f000 ffb2 	bl	40edbc <__aeabi_dmul>
  40de58:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
  40de5c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
  40de60:	4639      	mov	r1, r7
  40de62:	4630      	mov	r0, r6
  40de64:	f001 f9bc 	bl	40f1e0 <__aeabi_d2iz>
  40de68:	4605      	mov	r5, r0
  40de6a:	f000 ff41 	bl	40ecf0 <__aeabi_i2d>
  40de6e:	4602      	mov	r2, r0
  40de70:	460b      	mov	r3, r1
  40de72:	4630      	mov	r0, r6
  40de74:	4639      	mov	r1, r7
  40de76:	f000 fded 	bl	40ea54 <__aeabi_dsub>
  40de7a:	9a07      	ldr	r2, [sp, #28]
  40de7c:	3530      	adds	r5, #48	; 0x30
  40de7e:	f1b9 0f01 	cmp.w	r9, #1
  40de82:	7015      	strb	r5, [r2, #0]
  40de84:	4606      	mov	r6, r0
  40de86:	460f      	mov	r7, r1
  40de88:	f102 0501 	add.w	r5, r2, #1
  40de8c:	d023      	beq.n	40ded6 <_dtoa_r+0xd06>
  40de8e:	9b07      	ldr	r3, [sp, #28]
  40de90:	f8cd a008 	str.w	sl, [sp, #8]
  40de94:	444b      	add	r3, r9
  40de96:	465e      	mov	r6, fp
  40de98:	469a      	mov	sl, r3
  40de9a:	46ab      	mov	fp, r5
  40de9c:	2200      	movs	r2, #0
  40de9e:	4b42      	ldr	r3, [pc, #264]	; (40dfa8 <_dtoa_r+0xdd8>)
  40dea0:	f000 ff8c 	bl	40edbc <__aeabi_dmul>
  40dea4:	4689      	mov	r9, r1
  40dea6:	4680      	mov	r8, r0
  40dea8:	f001 f99a 	bl	40f1e0 <__aeabi_d2iz>
  40deac:	4607      	mov	r7, r0
  40deae:	f000 ff1f 	bl	40ecf0 <__aeabi_i2d>
  40deb2:	3730      	adds	r7, #48	; 0x30
  40deb4:	4602      	mov	r2, r0
  40deb6:	460b      	mov	r3, r1
  40deb8:	4640      	mov	r0, r8
  40deba:	4649      	mov	r1, r9
  40debc:	f000 fdca 	bl	40ea54 <__aeabi_dsub>
  40dec0:	f80b 7b01 	strb.w	r7, [fp], #1
  40dec4:	45d3      	cmp	fp, sl
  40dec6:	d1e9      	bne.n	40de9c <_dtoa_r+0xccc>
  40dec8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  40deca:	f8dd a008 	ldr.w	sl, [sp, #8]
  40dece:	46b3      	mov	fp, r6
  40ded0:	460f      	mov	r7, r1
  40ded2:	4606      	mov	r6, r0
  40ded4:	441d      	add	r5, r3
  40ded6:	2200      	movs	r2, #0
  40ded8:	4b34      	ldr	r3, [pc, #208]	; (40dfac <_dtoa_r+0xddc>)
  40deda:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
  40dede:	f000 fdbb 	bl	40ea58 <__adddf3>
  40dee2:	4632      	mov	r2, r6
  40dee4:	463b      	mov	r3, r7
  40dee6:	f7f8 ff51 	bl	406d8c <__aeabi_dcmplt>
  40deea:	2800      	cmp	r0, #0
  40deec:	d047      	beq.n	40df7e <_dtoa_r+0xdae>
  40deee:	9b12      	ldr	r3, [sp, #72]	; 0x48
  40def0:	9304      	str	r3, [sp, #16]
  40def2:	f815 8c01 	ldrb.w	r8, [r5, #-1]
  40def6:	f7ff bb2c 	b.w	40d552 <_dtoa_r+0x382>
  40defa:	9b05      	ldr	r3, [sp, #20]
  40defc:	9a06      	ldr	r2, [sp, #24]
  40defe:	1a9d      	subs	r5, r3, r2
  40df00:	2300      	movs	r3, #0
  40df02:	f7ff bb60 	b.w	40d5c6 <_dtoa_r+0x3f6>
  40df06:	9b14      	ldr	r3, [sp, #80]	; 0x50
  40df08:	9f08      	ldr	r7, [sp, #32]
  40df0a:	9d05      	ldr	r5, [sp, #20]
  40df0c:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
  40df10:	f7ff bb59 	b.w	40d5c6 <_dtoa_r+0x3f6>
  40df14:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
  40df18:	f04f 0802 	mov.w	r8, #2
  40df1c:	e9cd 2302 	strd	r2, r3, [sp, #8]
  40df20:	e548      	b.n	40d9b4 <_dtoa_r+0x7e4>
  40df22:	9b06      	ldr	r3, [sp, #24]
  40df24:	2b00      	cmp	r3, #0
  40df26:	f43f aeb6 	beq.w	40dc96 <_dtoa_r+0xac6>
  40df2a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
  40df2c:	2d00      	cmp	r5, #0
  40df2e:	f77f aedf 	ble.w	40dcf0 <_dtoa_r+0xb20>
  40df32:	2200      	movs	r2, #0
  40df34:	4b1c      	ldr	r3, [pc, #112]	; (40dfa8 <_dtoa_r+0xdd8>)
  40df36:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  40df3a:	f000 ff3f 	bl	40edbc <__aeabi_dmul>
  40df3e:	4606      	mov	r6, r0
  40df40:	460f      	mov	r7, r1
  40df42:	f108 0001 	add.w	r0, r8, #1
  40df46:	e9cd 6702 	strd	r6, r7, [sp, #8]
  40df4a:	f000 fed1 	bl	40ecf0 <__aeabi_i2d>
  40df4e:	4602      	mov	r2, r0
  40df50:	460b      	mov	r3, r1
  40df52:	4630      	mov	r0, r6
  40df54:	4639      	mov	r1, r7
  40df56:	f000 ff31 	bl	40edbc <__aeabi_dmul>
  40df5a:	4b0f      	ldr	r3, [pc, #60]	; (40df98 <_dtoa_r+0xdc8>)
  40df5c:	2200      	movs	r2, #0
  40df5e:	f000 fd7b 	bl	40ea58 <__adddf3>
  40df62:	9b04      	ldr	r3, [sp, #16]
  40df64:	3b01      	subs	r3, #1
  40df66:	4606      	mov	r6, r0
  40df68:	f1a1 7750 	sub.w	r7, r1, #54525952	; 0x3400000
  40df6c:	9312      	str	r3, [sp, #72]	; 0x48
  40df6e:	46a9      	mov	r9, r5
  40df70:	e541      	b.n	40d9f6 <_dtoa_r+0x826>
  40df72:	2239      	movs	r2, #57	; 0x39
  40df74:	46b2      	mov	sl, r6
  40df76:	703a      	strb	r2, [r7, #0]
  40df78:	464e      	mov	r6, r9
  40df7a:	1c7d      	adds	r5, r7, #1
  40df7c:	e407      	b.n	40d78e <_dtoa_r+0x5be>
  40df7e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
  40df82:	2000      	movs	r0, #0
  40df84:	4909      	ldr	r1, [pc, #36]	; (40dfac <_dtoa_r+0xddc>)
  40df86:	f000 fd65 	bl	40ea54 <__aeabi_dsub>
  40df8a:	4632      	mov	r2, r6
  40df8c:	463b      	mov	r3, r7
  40df8e:	f7f8 ff1b 	bl	406dc8 <__aeabi_dcmpgt>
  40df92:	b970      	cbnz	r0, 40dfb2 <_dtoa_r+0xde2>
  40df94:	e6ac      	b.n	40dcf0 <_dtoa_r+0xb20>
  40df96:	bf00      	nop
  40df98:	401c0000 	.word	0x401c0000
  40df9c:	40140000 	.word	0x40140000
  40dfa0:	00411c58 	.word	0x00411c58
  40dfa4:	00411d30 	.word	0x00411d30
  40dfa8:	40240000 	.word	0x40240000
  40dfac:	3fe00000 	.word	0x3fe00000
  40dfb0:	4615      	mov	r5, r2
  40dfb2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
  40dfb6:	2b30      	cmp	r3, #48	; 0x30
  40dfb8:	f105 32ff 	add.w	r2, r5, #4294967295
  40dfbc:	d0f8      	beq.n	40dfb0 <_dtoa_r+0xde0>
  40dfbe:	9b12      	ldr	r3, [sp, #72]	; 0x48
  40dfc0:	9304      	str	r3, [sp, #16]
  40dfc2:	f7ff bad8 	b.w	40d576 <_dtoa_r+0x3a6>
  40dfc6:	4643      	mov	r3, r8
  40dfc8:	f8dd b008 	ldr.w	fp, [sp, #8]
  40dfcc:	46a0      	mov	r8, r4
  40dfce:	461c      	mov	r4, r3
  40dfd0:	9b12      	ldr	r3, [sp, #72]	; 0x48
  40dfd2:	9304      	str	r3, [sp, #16]
  40dfd4:	f7ff babd 	b.w	40d552 <_dtoa_r+0x382>
  40dfd8:	46b9      	mov	r9, r7
  40dfda:	f7ff bb71 	b.w	40d6c0 <_dtoa_r+0x4f0>
  40dfde:	f1bc 0f39 	cmp.w	ip, #57	; 0x39
  40dfe2:	d0c6      	beq.n	40df72 <_dtoa_r+0xda2>
  40dfe4:	f1ba 0f00 	cmp.w	sl, #0
  40dfe8:	f77f aebf 	ble.w	40dd6a <_dtoa_r+0xb9a>
  40dfec:	f105 0c31 	add.w	ip, r5, #49	; 0x31
  40dff0:	e6bb      	b.n	40dd6a <_dtoa_r+0xb9a>
  40dff2:	f47f aeba 	bne.w	40dd6a <_dtoa_r+0xb9a>
  40dff6:	f01c 0f01 	tst.w	ip, #1
  40dffa:	f43f aeb6 	beq.w	40dd6a <_dtoa_r+0xb9a>
  40dffe:	e6ae      	b.n	40dd5e <_dtoa_r+0xb8e>
  40e000:	f04f 0800 	mov.w	r8, #0
  40e004:	4646      	mov	r6, r8
  40e006:	e5a9      	b.n	40db5c <_dtoa_r+0x98c>
  40e008:	9b20      	ldr	r3, [sp, #128]	; 0x80
  40e00a:	2b02      	cmp	r3, #2
  40e00c:	dc04      	bgt.n	40e018 <_dtoa_r+0xe48>
  40e00e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  40e010:	e602      	b.n	40dc18 <_dtoa_r+0xa48>
  40e012:	f04f 0802 	mov.w	r8, #2
  40e016:	e4cd      	b.n	40d9b4 <_dtoa_r+0x7e4>
  40e018:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  40e01a:	9306      	str	r3, [sp, #24]
  40e01c:	e618      	b.n	40dc50 <_dtoa_r+0xa80>
  40e01e:	9b20      	ldr	r3, [sp, #128]	; 0x80
  40e020:	2b02      	cmp	r3, #2
  40e022:	dcf9      	bgt.n	40e018 <_dtoa_r+0xe48>
  40e024:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  40e026:	f7ff bbee 	b.w	40d806 <_dtoa_r+0x636>
  40e02a:	2500      	movs	r5, #0
  40e02c:	6465      	str	r5, [r4, #68]	; 0x44
  40e02e:	4629      	mov	r1, r5
  40e030:	4620      	mov	r0, r4
  40e032:	f000 f8cb 	bl	40e1cc <_Balloc>
  40e036:	f04f 33ff 	mov.w	r3, #4294967295
  40e03a:	9306      	str	r3, [sp, #24]
  40e03c:	930c      	str	r3, [sp, #48]	; 0x30
  40e03e:	2301      	movs	r3, #1
  40e040:	9007      	str	r0, [sp, #28]
  40e042:	9521      	str	r5, [sp, #132]	; 0x84
  40e044:	6420      	str	r0, [r4, #64]	; 0x40
  40e046:	9309      	str	r3, [sp, #36]	; 0x24
  40e048:	f7ff b9d2 	b.w	40d3f0 <_dtoa_r+0x220>
  40e04c:	f43f ab4d 	beq.w	40d6ea <_dtoa_r+0x51a>
  40e050:	f1c0 003c 	rsb	r0, r0, #60	; 0x3c
  40e054:	f7ff bb44 	b.w	40d6e0 <_dtoa_r+0x510>
  40e058:	2301      	movs	r3, #1
  40e05a:	9309      	str	r3, [sp, #36]	; 0x24
  40e05c:	e559      	b.n	40db12 <_dtoa_r+0x942>
  40e05e:	2501      	movs	r5, #1
  40e060:	f7ff b990 	b.w	40d384 <_dtoa_r+0x1b4>

0040e064 <__libc_fini_array>:
  40e064:	b538      	push	{r3, r4, r5, lr}
  40e066:	4b08      	ldr	r3, [pc, #32]	; (40e088 <__libc_fini_array+0x24>)
  40e068:	4d08      	ldr	r5, [pc, #32]	; (40e08c <__libc_fini_array+0x28>)
  40e06a:	1aed      	subs	r5, r5, r3
  40e06c:	10ac      	asrs	r4, r5, #2
  40e06e:	bf18      	it	ne
  40e070:	18ed      	addne	r5, r5, r3
  40e072:	d005      	beq.n	40e080 <__libc_fini_array+0x1c>
  40e074:	3c01      	subs	r4, #1
  40e076:	f855 3d04 	ldr.w	r3, [r5, #-4]!
  40e07a:	4798      	blx	r3
  40e07c:	2c00      	cmp	r4, #0
  40e07e:	d1f9      	bne.n	40e074 <__libc_fini_array+0x10>
  40e080:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  40e084:	f003 be7e 	b.w	411d84 <_fini>
  40e088:	00411d90 	.word	0x00411d90
  40e08c:	00411d94 	.word	0x00411d94

0040e090 <__fputwc>:
  40e090:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40e094:	b082      	sub	sp, #8
  40e096:	4607      	mov	r7, r0
  40e098:	460e      	mov	r6, r1
  40e09a:	4614      	mov	r4, r2
  40e09c:	f000 f878 	bl	40e190 <__locale_mb_cur_max>
  40e0a0:	2801      	cmp	r0, #1
  40e0a2:	d041      	beq.n	40e128 <__fputwc+0x98>
  40e0a4:	4638      	mov	r0, r7
  40e0a6:	a901      	add	r1, sp, #4
  40e0a8:	4632      	mov	r2, r6
  40e0aa:	f104 035c 	add.w	r3, r4, #92	; 0x5c
  40e0ae:	f000 fc43 	bl	40e938 <_wcrtomb_r>
  40e0b2:	f1b0 3fff 	cmp.w	r0, #4294967295
  40e0b6:	4680      	mov	r8, r0
  40e0b8:	d02f      	beq.n	40e11a <__fputwc+0x8a>
  40e0ba:	2800      	cmp	r0, #0
  40e0bc:	d03c      	beq.n	40e138 <__fputwc+0xa8>
  40e0be:	f89d 1004 	ldrb.w	r1, [sp, #4]
  40e0c2:	2500      	movs	r5, #0
  40e0c4:	e009      	b.n	40e0da <__fputwc+0x4a>
  40e0c6:	6823      	ldr	r3, [r4, #0]
  40e0c8:	7019      	strb	r1, [r3, #0]
  40e0ca:	6823      	ldr	r3, [r4, #0]
  40e0cc:	3301      	adds	r3, #1
  40e0ce:	6023      	str	r3, [r4, #0]
  40e0d0:	3501      	adds	r5, #1
  40e0d2:	45a8      	cmp	r8, r5
  40e0d4:	d930      	bls.n	40e138 <__fputwc+0xa8>
  40e0d6:	ab01      	add	r3, sp, #4
  40e0d8:	5d59      	ldrb	r1, [r3, r5]
  40e0da:	68a3      	ldr	r3, [r4, #8]
  40e0dc:	3b01      	subs	r3, #1
  40e0de:	2b00      	cmp	r3, #0
  40e0e0:	60a3      	str	r3, [r4, #8]
  40e0e2:	daf0      	bge.n	40e0c6 <__fputwc+0x36>
  40e0e4:	69a2      	ldr	r2, [r4, #24]
  40e0e6:	4293      	cmp	r3, r2
  40e0e8:	db07      	blt.n	40e0fa <__fputwc+0x6a>
  40e0ea:	6823      	ldr	r3, [r4, #0]
  40e0ec:	7019      	strb	r1, [r3, #0]
  40e0ee:	6823      	ldr	r3, [r4, #0]
  40e0f0:	7819      	ldrb	r1, [r3, #0]
  40e0f2:	290a      	cmp	r1, #10
  40e0f4:	f103 0301 	add.w	r3, r3, #1
  40e0f8:	d1e9      	bne.n	40e0ce <__fputwc+0x3e>
  40e0fa:	4638      	mov	r0, r7
  40e0fc:	4622      	mov	r2, r4
  40e0fe:	f7fe fee5 	bl	40cecc <__swbuf_r>
  40e102:	f1a0 30ff 	sub.w	r0, r0, #4294967295
  40e106:	fab0 f080 	clz	r0, r0
  40e10a:	0940      	lsrs	r0, r0, #5
  40e10c:	2800      	cmp	r0, #0
  40e10e:	d0df      	beq.n	40e0d0 <__fputwc+0x40>
  40e110:	f04f 30ff 	mov.w	r0, #4294967295
  40e114:	b002      	add	sp, #8
  40e116:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40e11a:	89a3      	ldrh	r3, [r4, #12]
  40e11c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40e120:	81a3      	strh	r3, [r4, #12]
  40e122:	b002      	add	sp, #8
  40e124:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40e128:	1e73      	subs	r3, r6, #1
  40e12a:	2bfe      	cmp	r3, #254	; 0xfe
  40e12c:	d8ba      	bhi.n	40e0a4 <__fputwc+0x14>
  40e12e:	b2f1      	uxtb	r1, r6
  40e130:	4680      	mov	r8, r0
  40e132:	f88d 1004 	strb.w	r1, [sp, #4]
  40e136:	e7c4      	b.n	40e0c2 <__fputwc+0x32>
  40e138:	4630      	mov	r0, r6
  40e13a:	b002      	add	sp, #8
  40e13c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0040e140 <_fputwc_r>:
  40e140:	8993      	ldrh	r3, [r2, #12]
  40e142:	f413 5f00 	tst.w	r3, #8192	; 0x2000
  40e146:	d10b      	bne.n	40e160 <_fputwc_r+0x20>
  40e148:	b410      	push	{r4}
  40e14a:	6e54      	ldr	r4, [r2, #100]	; 0x64
  40e14c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
  40e150:	f444 5400 	orr.w	r4, r4, #8192	; 0x2000
  40e154:	6654      	str	r4, [r2, #100]	; 0x64
  40e156:	8193      	strh	r3, [r2, #12]
  40e158:	f85d 4b04 	ldr.w	r4, [sp], #4
  40e15c:	f7ff bf98 	b.w	40e090 <__fputwc>
  40e160:	f7ff bf96 	b.w	40e090 <__fputwc>

0040e164 <_isatty_r>:
  40e164:	b538      	push	{r3, r4, r5, lr}
  40e166:	4c07      	ldr	r4, [pc, #28]	; (40e184 <_isatty_r+0x20>)
  40e168:	2300      	movs	r3, #0
  40e16a:	4605      	mov	r5, r0
  40e16c:	4608      	mov	r0, r1
  40e16e:	6023      	str	r3, [r4, #0]
  40e170:	f7f3 fe50 	bl	401e14 <_isatty>
  40e174:	1c43      	adds	r3, r0, #1
  40e176:	d000      	beq.n	40e17a <_isatty_r+0x16>
  40e178:	bd38      	pop	{r3, r4, r5, pc}
  40e17a:	6823      	ldr	r3, [r4, #0]
  40e17c:	2b00      	cmp	r3, #0
  40e17e:	d0fb      	beq.n	40e178 <_isatty_r+0x14>
  40e180:	602b      	str	r3, [r5, #0]
  40e182:	bd38      	pop	{r3, r4, r5, pc}
  40e184:	200012c4 	.word	0x200012c4

0040e188 <__locale_charset>:
  40e188:	4800      	ldr	r0, [pc, #0]	; (40e18c <__locale_charset+0x4>)
  40e18a:	4770      	bx	lr
  40e18c:	20000cfc 	.word	0x20000cfc

0040e190 <__locale_mb_cur_max>:
  40e190:	4b01      	ldr	r3, [pc, #4]	; (40e198 <__locale_mb_cur_max+0x8>)
  40e192:	6818      	ldr	r0, [r3, #0]
  40e194:	4770      	bx	lr
  40e196:	bf00      	nop
  40e198:	20000d1c 	.word	0x20000d1c

0040e19c <_localeconv_r>:
  40e19c:	4800      	ldr	r0, [pc, #0]	; (40e1a0 <_localeconv_r+0x4>)
  40e19e:	4770      	bx	lr
  40e1a0:	20000cc4 	.word	0x20000cc4

0040e1a4 <_lseek_r>:
  40e1a4:	b570      	push	{r4, r5, r6, lr}
  40e1a6:	4c08      	ldr	r4, [pc, #32]	; (40e1c8 <_lseek_r+0x24>)
  40e1a8:	4606      	mov	r6, r0
  40e1aa:	2500      	movs	r5, #0
  40e1ac:	4608      	mov	r0, r1
  40e1ae:	4611      	mov	r1, r2
  40e1b0:	461a      	mov	r2, r3
  40e1b2:	6025      	str	r5, [r4, #0]
  40e1b4:	f7f3 fe30 	bl	401e18 <_lseek>
  40e1b8:	1c43      	adds	r3, r0, #1
  40e1ba:	d000      	beq.n	40e1be <_lseek_r+0x1a>
  40e1bc:	bd70      	pop	{r4, r5, r6, pc}
  40e1be:	6823      	ldr	r3, [r4, #0]
  40e1c0:	2b00      	cmp	r3, #0
  40e1c2:	d0fb      	beq.n	40e1bc <_lseek_r+0x18>
  40e1c4:	6033      	str	r3, [r6, #0]
  40e1c6:	bd70      	pop	{r4, r5, r6, pc}
  40e1c8:	200012c4 	.word	0x200012c4

0040e1cc <_Balloc>:
  40e1cc:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
  40e1ce:	b570      	push	{r4, r5, r6, lr}
  40e1d0:	4605      	mov	r5, r0
  40e1d2:	460c      	mov	r4, r1
  40e1d4:	b14b      	cbz	r3, 40e1ea <_Balloc+0x1e>
  40e1d6:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
  40e1da:	b180      	cbz	r0, 40e1fe <_Balloc+0x32>
  40e1dc:	6802      	ldr	r2, [r0, #0]
  40e1de:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
  40e1e2:	2300      	movs	r3, #0
  40e1e4:	6103      	str	r3, [r0, #16]
  40e1e6:	60c3      	str	r3, [r0, #12]
  40e1e8:	bd70      	pop	{r4, r5, r6, pc}
  40e1ea:	2104      	movs	r1, #4
  40e1ec:	2221      	movs	r2, #33	; 0x21
  40e1ee:	f7f9 fddf 	bl	407db0 <_calloc_r>
  40e1f2:	64e8      	str	r0, [r5, #76]	; 0x4c
  40e1f4:	4603      	mov	r3, r0
  40e1f6:	2800      	cmp	r0, #0
  40e1f8:	d1ed      	bne.n	40e1d6 <_Balloc+0xa>
  40e1fa:	2000      	movs	r0, #0
  40e1fc:	bd70      	pop	{r4, r5, r6, pc}
  40e1fe:	2101      	movs	r1, #1
  40e200:	fa01 f604 	lsl.w	r6, r1, r4
  40e204:	1d72      	adds	r2, r6, #5
  40e206:	4628      	mov	r0, r5
  40e208:	0092      	lsls	r2, r2, #2
  40e20a:	f7f9 fdd1 	bl	407db0 <_calloc_r>
  40e20e:	2800      	cmp	r0, #0
  40e210:	d0f3      	beq.n	40e1fa <_Balloc+0x2e>
  40e212:	6044      	str	r4, [r0, #4]
  40e214:	6086      	str	r6, [r0, #8]
  40e216:	e7e4      	b.n	40e1e2 <_Balloc+0x16>

0040e218 <_Bfree>:
  40e218:	b131      	cbz	r1, 40e228 <_Bfree+0x10>
  40e21a:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
  40e21c:	684a      	ldr	r2, [r1, #4]
  40e21e:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
  40e222:	6008      	str	r0, [r1, #0]
  40e224:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  40e228:	4770      	bx	lr
  40e22a:	bf00      	nop

0040e22c <__multadd>:
  40e22c:	b5f0      	push	{r4, r5, r6, r7, lr}
  40e22e:	690c      	ldr	r4, [r1, #16]
  40e230:	b083      	sub	sp, #12
  40e232:	460d      	mov	r5, r1
  40e234:	4606      	mov	r6, r0
  40e236:	f101 0e14 	add.w	lr, r1, #20
  40e23a:	2700      	movs	r7, #0
  40e23c:	f8de 1000 	ldr.w	r1, [lr]
  40e240:	b288      	uxth	r0, r1
  40e242:	0c09      	lsrs	r1, r1, #16
  40e244:	fb02 3300 	mla	r3, r2, r0, r3
  40e248:	fb02 f101 	mul.w	r1, r2, r1
  40e24c:	eb01 4113 	add.w	r1, r1, r3, lsr #16
  40e250:	3701      	adds	r7, #1
  40e252:	b29b      	uxth	r3, r3
  40e254:	eb03 4301 	add.w	r3, r3, r1, lsl #16
  40e258:	42bc      	cmp	r4, r7
  40e25a:	f84e 3b04 	str.w	r3, [lr], #4
  40e25e:	ea4f 4311 	mov.w	r3, r1, lsr #16
  40e262:	dceb      	bgt.n	40e23c <__multadd+0x10>
  40e264:	b13b      	cbz	r3, 40e276 <__multadd+0x4a>
  40e266:	68aa      	ldr	r2, [r5, #8]
  40e268:	4294      	cmp	r4, r2
  40e26a:	da07      	bge.n	40e27c <__multadd+0x50>
  40e26c:	eb05 0284 	add.w	r2, r5, r4, lsl #2
  40e270:	3401      	adds	r4, #1
  40e272:	6153      	str	r3, [r2, #20]
  40e274:	612c      	str	r4, [r5, #16]
  40e276:	4628      	mov	r0, r5
  40e278:	b003      	add	sp, #12
  40e27a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40e27c:	6869      	ldr	r1, [r5, #4]
  40e27e:	9301      	str	r3, [sp, #4]
  40e280:	3101      	adds	r1, #1
  40e282:	4630      	mov	r0, r6
  40e284:	f7ff ffa2 	bl	40e1cc <_Balloc>
  40e288:	692a      	ldr	r2, [r5, #16]
  40e28a:	3202      	adds	r2, #2
  40e28c:	f105 010c 	add.w	r1, r5, #12
  40e290:	4607      	mov	r7, r0
  40e292:	0092      	lsls	r2, r2, #2
  40e294:	300c      	adds	r0, #12
  40e296:	f7fa fe27 	bl	408ee8 <memcpy>
  40e29a:	6cf2      	ldr	r2, [r6, #76]	; 0x4c
  40e29c:	6869      	ldr	r1, [r5, #4]
  40e29e:	9b01      	ldr	r3, [sp, #4]
  40e2a0:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
  40e2a4:	6028      	str	r0, [r5, #0]
  40e2a6:	f842 5021 	str.w	r5, [r2, r1, lsl #2]
  40e2aa:	463d      	mov	r5, r7
  40e2ac:	e7de      	b.n	40e26c <__multadd+0x40>
  40e2ae:	bf00      	nop

0040e2b0 <__hi0bits>:
  40e2b0:	0c03      	lsrs	r3, r0, #16
  40e2b2:	041b      	lsls	r3, r3, #16
  40e2b4:	b9b3      	cbnz	r3, 40e2e4 <__hi0bits+0x34>
  40e2b6:	0400      	lsls	r0, r0, #16
  40e2b8:	2310      	movs	r3, #16
  40e2ba:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
  40e2be:	bf04      	itt	eq
  40e2c0:	0200      	lsleq	r0, r0, #8
  40e2c2:	3308      	addeq	r3, #8
  40e2c4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
  40e2c8:	bf04      	itt	eq
  40e2ca:	0100      	lsleq	r0, r0, #4
  40e2cc:	3304      	addeq	r3, #4
  40e2ce:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
  40e2d2:	bf04      	itt	eq
  40e2d4:	0080      	lsleq	r0, r0, #2
  40e2d6:	3302      	addeq	r3, #2
  40e2d8:	2800      	cmp	r0, #0
  40e2da:	db07      	blt.n	40e2ec <__hi0bits+0x3c>
  40e2dc:	0042      	lsls	r2, r0, #1
  40e2de:	d403      	bmi.n	40e2e8 <__hi0bits+0x38>
  40e2e0:	2020      	movs	r0, #32
  40e2e2:	4770      	bx	lr
  40e2e4:	2300      	movs	r3, #0
  40e2e6:	e7e8      	b.n	40e2ba <__hi0bits+0xa>
  40e2e8:	1c58      	adds	r0, r3, #1
  40e2ea:	4770      	bx	lr
  40e2ec:	4618      	mov	r0, r3
  40e2ee:	4770      	bx	lr

0040e2f0 <__lo0bits>:
  40e2f0:	6803      	ldr	r3, [r0, #0]
  40e2f2:	f013 0207 	ands.w	r2, r3, #7
  40e2f6:	d007      	beq.n	40e308 <__lo0bits+0x18>
  40e2f8:	07d9      	lsls	r1, r3, #31
  40e2fa:	d420      	bmi.n	40e33e <__lo0bits+0x4e>
  40e2fc:	079a      	lsls	r2, r3, #30
  40e2fe:	d420      	bmi.n	40e342 <__lo0bits+0x52>
  40e300:	089b      	lsrs	r3, r3, #2
  40e302:	6003      	str	r3, [r0, #0]
  40e304:	2002      	movs	r0, #2
  40e306:	4770      	bx	lr
  40e308:	b299      	uxth	r1, r3
  40e30a:	b909      	cbnz	r1, 40e310 <__lo0bits+0x20>
  40e30c:	0c1b      	lsrs	r3, r3, #16
  40e30e:	2210      	movs	r2, #16
  40e310:	f013 0fff 	tst.w	r3, #255	; 0xff
  40e314:	bf04      	itt	eq
  40e316:	0a1b      	lsreq	r3, r3, #8
  40e318:	3208      	addeq	r2, #8
  40e31a:	0719      	lsls	r1, r3, #28
  40e31c:	bf04      	itt	eq
  40e31e:	091b      	lsreq	r3, r3, #4
  40e320:	3204      	addeq	r2, #4
  40e322:	0799      	lsls	r1, r3, #30
  40e324:	bf04      	itt	eq
  40e326:	089b      	lsreq	r3, r3, #2
  40e328:	3202      	addeq	r2, #2
  40e32a:	07d9      	lsls	r1, r3, #31
  40e32c:	d404      	bmi.n	40e338 <__lo0bits+0x48>
  40e32e:	085b      	lsrs	r3, r3, #1
  40e330:	d101      	bne.n	40e336 <__lo0bits+0x46>
  40e332:	2020      	movs	r0, #32
  40e334:	4770      	bx	lr
  40e336:	3201      	adds	r2, #1
  40e338:	6003      	str	r3, [r0, #0]
  40e33a:	4610      	mov	r0, r2
  40e33c:	4770      	bx	lr
  40e33e:	2000      	movs	r0, #0
  40e340:	4770      	bx	lr
  40e342:	085b      	lsrs	r3, r3, #1
  40e344:	6003      	str	r3, [r0, #0]
  40e346:	2001      	movs	r0, #1
  40e348:	4770      	bx	lr
  40e34a:	bf00      	nop

0040e34c <__i2b>:
  40e34c:	b510      	push	{r4, lr}
  40e34e:	460c      	mov	r4, r1
  40e350:	2101      	movs	r1, #1
  40e352:	f7ff ff3b 	bl	40e1cc <_Balloc>
  40e356:	2201      	movs	r2, #1
  40e358:	6144      	str	r4, [r0, #20]
  40e35a:	6102      	str	r2, [r0, #16]
  40e35c:	bd10      	pop	{r4, pc}
  40e35e:	bf00      	nop

0040e360 <__multiply>:
  40e360:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40e364:	690f      	ldr	r7, [r1, #16]
  40e366:	6916      	ldr	r6, [r2, #16]
  40e368:	42b7      	cmp	r7, r6
  40e36a:	b083      	sub	sp, #12
  40e36c:	460d      	mov	r5, r1
  40e36e:	4614      	mov	r4, r2
  40e370:	f2c0 808d 	blt.w	40e48e <__multiply+0x12e>
  40e374:	4633      	mov	r3, r6
  40e376:	463e      	mov	r6, r7
  40e378:	461f      	mov	r7, r3
  40e37a:	68ab      	ldr	r3, [r5, #8]
  40e37c:	6869      	ldr	r1, [r5, #4]
  40e37e:	eb06 0807 	add.w	r8, r6, r7
  40e382:	4598      	cmp	r8, r3
  40e384:	bfc8      	it	gt
  40e386:	3101      	addgt	r1, #1
  40e388:	f7ff ff20 	bl	40e1cc <_Balloc>
  40e38c:	f100 0c14 	add.w	ip, r0, #20
  40e390:	eb0c 0988 	add.w	r9, ip, r8, lsl #2
  40e394:	45cc      	cmp	ip, r9
  40e396:	9000      	str	r0, [sp, #0]
  40e398:	d205      	bcs.n	40e3a6 <__multiply+0x46>
  40e39a:	4663      	mov	r3, ip
  40e39c:	2100      	movs	r1, #0
  40e39e:	f843 1b04 	str.w	r1, [r3], #4
  40e3a2:	4599      	cmp	r9, r3
  40e3a4:	d8fb      	bhi.n	40e39e <__multiply+0x3e>
  40e3a6:	f104 0214 	add.w	r2, r4, #20
  40e3aa:	eb02 0a87 	add.w	sl, r2, r7, lsl #2
  40e3ae:	f105 0314 	add.w	r3, r5, #20
  40e3b2:	4552      	cmp	r2, sl
  40e3b4:	eb03 0e86 	add.w	lr, r3, r6, lsl #2
  40e3b8:	d254      	bcs.n	40e464 <__multiply+0x104>
  40e3ba:	f8cd 9004 	str.w	r9, [sp, #4]
  40e3be:	4699      	mov	r9, r3
  40e3c0:	f852 3b04 	ldr.w	r3, [r2], #4
  40e3c4:	fa1f fb83 	uxth.w	fp, r3
  40e3c8:	f1bb 0f00 	cmp.w	fp, #0
  40e3cc:	d020      	beq.n	40e410 <__multiply+0xb0>
  40e3ce:	2000      	movs	r0, #0
  40e3d0:	464f      	mov	r7, r9
  40e3d2:	4666      	mov	r6, ip
  40e3d4:	4605      	mov	r5, r0
  40e3d6:	e000      	b.n	40e3da <__multiply+0x7a>
  40e3d8:	461e      	mov	r6, r3
  40e3da:	f857 4b04 	ldr.w	r4, [r7], #4
  40e3de:	6830      	ldr	r0, [r6, #0]
  40e3e0:	b2a1      	uxth	r1, r4
  40e3e2:	b283      	uxth	r3, r0
  40e3e4:	fb0b 3101 	mla	r1, fp, r1, r3
  40e3e8:	0c24      	lsrs	r4, r4, #16
  40e3ea:	0c00      	lsrs	r0, r0, #16
  40e3ec:	194b      	adds	r3, r1, r5
  40e3ee:	fb0b 0004 	mla	r0, fp, r4, r0
  40e3f2:	eb00 4013 	add.w	r0, r0, r3, lsr #16
  40e3f6:	b299      	uxth	r1, r3
  40e3f8:	4633      	mov	r3, r6
  40e3fa:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
  40e3fe:	45be      	cmp	lr, r7
  40e400:	ea4f 4510 	mov.w	r5, r0, lsr #16
  40e404:	f843 1b04 	str.w	r1, [r3], #4
  40e408:	d8e6      	bhi.n	40e3d8 <__multiply+0x78>
  40e40a:	6075      	str	r5, [r6, #4]
  40e40c:	f852 3c04 	ldr.w	r3, [r2, #-4]
  40e410:	ea5f 4b13 	movs.w	fp, r3, lsr #16
  40e414:	d020      	beq.n	40e458 <__multiply+0xf8>
  40e416:	f8dc 3000 	ldr.w	r3, [ip]
  40e41a:	4667      	mov	r7, ip
  40e41c:	4618      	mov	r0, r3
  40e41e:	464d      	mov	r5, r9
  40e420:	2100      	movs	r1, #0
  40e422:	e000      	b.n	40e426 <__multiply+0xc6>
  40e424:	4637      	mov	r7, r6
  40e426:	882c      	ldrh	r4, [r5, #0]
  40e428:	0c00      	lsrs	r0, r0, #16
  40e42a:	fb0b 0004 	mla	r0, fp, r4, r0
  40e42e:	4401      	add	r1, r0
  40e430:	b29c      	uxth	r4, r3
  40e432:	463e      	mov	r6, r7
  40e434:	ea44 4301 	orr.w	r3, r4, r1, lsl #16
  40e438:	f846 3b04 	str.w	r3, [r6], #4
  40e43c:	6878      	ldr	r0, [r7, #4]
  40e43e:	f855 4b04 	ldr.w	r4, [r5], #4
  40e442:	b283      	uxth	r3, r0
  40e444:	0c24      	lsrs	r4, r4, #16
  40e446:	fb0b 3404 	mla	r4, fp, r4, r3
  40e44a:	eb04 4311 	add.w	r3, r4, r1, lsr #16
  40e44e:	45ae      	cmp	lr, r5
  40e450:	ea4f 4113 	mov.w	r1, r3, lsr #16
  40e454:	d8e6      	bhi.n	40e424 <__multiply+0xc4>
  40e456:	607b      	str	r3, [r7, #4]
  40e458:	4592      	cmp	sl, r2
  40e45a:	f10c 0c04 	add.w	ip, ip, #4
  40e45e:	d8af      	bhi.n	40e3c0 <__multiply+0x60>
  40e460:	f8dd 9004 	ldr.w	r9, [sp, #4]
  40e464:	f1b8 0f00 	cmp.w	r8, #0
  40e468:	dd0b      	ble.n	40e482 <__multiply+0x122>
  40e46a:	f859 3c04 	ldr.w	r3, [r9, #-4]
  40e46e:	f1a9 0904 	sub.w	r9, r9, #4
  40e472:	b11b      	cbz	r3, 40e47c <__multiply+0x11c>
  40e474:	e005      	b.n	40e482 <__multiply+0x122>
  40e476:	f859 3d04 	ldr.w	r3, [r9, #-4]!
  40e47a:	b913      	cbnz	r3, 40e482 <__multiply+0x122>
  40e47c:	f1b8 0801 	subs.w	r8, r8, #1
  40e480:	d1f9      	bne.n	40e476 <__multiply+0x116>
  40e482:	9800      	ldr	r0, [sp, #0]
  40e484:	f8c0 8010 	str.w	r8, [r0, #16]
  40e488:	b003      	add	sp, #12
  40e48a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40e48e:	4615      	mov	r5, r2
  40e490:	460c      	mov	r4, r1
  40e492:	e772      	b.n	40e37a <__multiply+0x1a>

0040e494 <__pow5mult>:
  40e494:	f012 0303 	ands.w	r3, r2, #3
  40e498:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40e49c:	4614      	mov	r4, r2
  40e49e:	4607      	mov	r7, r0
  40e4a0:	460e      	mov	r6, r1
  40e4a2:	d12d      	bne.n	40e500 <__pow5mult+0x6c>
  40e4a4:	10a4      	asrs	r4, r4, #2
  40e4a6:	d01c      	beq.n	40e4e2 <__pow5mult+0x4e>
  40e4a8:	6cbd      	ldr	r5, [r7, #72]	; 0x48
  40e4aa:	b395      	cbz	r5, 40e512 <__pow5mult+0x7e>
  40e4ac:	07e3      	lsls	r3, r4, #31
  40e4ae:	f04f 0800 	mov.w	r8, #0
  40e4b2:	d406      	bmi.n	40e4c2 <__pow5mult+0x2e>
  40e4b4:	1064      	asrs	r4, r4, #1
  40e4b6:	d014      	beq.n	40e4e2 <__pow5mult+0x4e>
  40e4b8:	6828      	ldr	r0, [r5, #0]
  40e4ba:	b1a8      	cbz	r0, 40e4e8 <__pow5mult+0x54>
  40e4bc:	4605      	mov	r5, r0
  40e4be:	07e3      	lsls	r3, r4, #31
  40e4c0:	d5f8      	bpl.n	40e4b4 <__pow5mult+0x20>
  40e4c2:	4638      	mov	r0, r7
  40e4c4:	4631      	mov	r1, r6
  40e4c6:	462a      	mov	r2, r5
  40e4c8:	f7ff ff4a 	bl	40e360 <__multiply>
  40e4cc:	b1b6      	cbz	r6, 40e4fc <__pow5mult+0x68>
  40e4ce:	6872      	ldr	r2, [r6, #4]
  40e4d0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  40e4d2:	1064      	asrs	r4, r4, #1
  40e4d4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
  40e4d8:	6031      	str	r1, [r6, #0]
  40e4da:	f843 6022 	str.w	r6, [r3, r2, lsl #2]
  40e4de:	4606      	mov	r6, r0
  40e4e0:	d1ea      	bne.n	40e4b8 <__pow5mult+0x24>
  40e4e2:	4630      	mov	r0, r6
  40e4e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40e4e8:	4629      	mov	r1, r5
  40e4ea:	462a      	mov	r2, r5
  40e4ec:	4638      	mov	r0, r7
  40e4ee:	f7ff ff37 	bl	40e360 <__multiply>
  40e4f2:	6028      	str	r0, [r5, #0]
  40e4f4:	f8c0 8000 	str.w	r8, [r0]
  40e4f8:	4605      	mov	r5, r0
  40e4fa:	e7e0      	b.n	40e4be <__pow5mult+0x2a>
  40e4fc:	4606      	mov	r6, r0
  40e4fe:	e7d9      	b.n	40e4b4 <__pow5mult+0x20>
  40e500:	1e5a      	subs	r2, r3, #1
  40e502:	4d0b      	ldr	r5, [pc, #44]	; (40e530 <__pow5mult+0x9c>)
  40e504:	2300      	movs	r3, #0
  40e506:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
  40e50a:	f7ff fe8f 	bl	40e22c <__multadd>
  40e50e:	4606      	mov	r6, r0
  40e510:	e7c8      	b.n	40e4a4 <__pow5mult+0x10>
  40e512:	2101      	movs	r1, #1
  40e514:	4638      	mov	r0, r7
  40e516:	f7ff fe59 	bl	40e1cc <_Balloc>
  40e51a:	f240 2171 	movw	r1, #625	; 0x271
  40e51e:	2201      	movs	r2, #1
  40e520:	2300      	movs	r3, #0
  40e522:	6141      	str	r1, [r0, #20]
  40e524:	6102      	str	r2, [r0, #16]
  40e526:	4605      	mov	r5, r0
  40e528:	64b8      	str	r0, [r7, #72]	; 0x48
  40e52a:	6003      	str	r3, [r0, #0]
  40e52c:	e7be      	b.n	40e4ac <__pow5mult+0x18>
  40e52e:	bf00      	nop
  40e530:	00411d20 	.word	0x00411d20

0040e534 <__lshift>:
  40e534:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  40e538:	690f      	ldr	r7, [r1, #16]
  40e53a:	688b      	ldr	r3, [r1, #8]
  40e53c:	ea4f 1962 	mov.w	r9, r2, asr #5
  40e540:	444f      	add	r7, r9
  40e542:	1c7d      	adds	r5, r7, #1
  40e544:	429d      	cmp	r5, r3
  40e546:	460e      	mov	r6, r1
  40e548:	4614      	mov	r4, r2
  40e54a:	6849      	ldr	r1, [r1, #4]
  40e54c:	4680      	mov	r8, r0
  40e54e:	dd04      	ble.n	40e55a <__lshift+0x26>
  40e550:	005b      	lsls	r3, r3, #1
  40e552:	429d      	cmp	r5, r3
  40e554:	f101 0101 	add.w	r1, r1, #1
  40e558:	dcfa      	bgt.n	40e550 <__lshift+0x1c>
  40e55a:	4640      	mov	r0, r8
  40e55c:	f7ff fe36 	bl	40e1cc <_Balloc>
  40e560:	f1b9 0f00 	cmp.w	r9, #0
  40e564:	f100 0114 	add.w	r1, r0, #20
  40e568:	dd09      	ble.n	40e57e <__lshift+0x4a>
  40e56a:	2300      	movs	r3, #0
  40e56c:	469e      	mov	lr, r3
  40e56e:	460a      	mov	r2, r1
  40e570:	3301      	adds	r3, #1
  40e572:	454b      	cmp	r3, r9
  40e574:	f842 eb04 	str.w	lr, [r2], #4
  40e578:	d1fa      	bne.n	40e570 <__lshift+0x3c>
  40e57a:	eb01 0183 	add.w	r1, r1, r3, lsl #2
  40e57e:	6932      	ldr	r2, [r6, #16]
  40e580:	f106 0314 	add.w	r3, r6, #20
  40e584:	f014 0c1f 	ands.w	ip, r4, #31
  40e588:	eb03 0e82 	add.w	lr, r3, r2, lsl #2
  40e58c:	d01f      	beq.n	40e5ce <__lshift+0x9a>
  40e58e:	f1cc 0920 	rsb	r9, ip, #32
  40e592:	2200      	movs	r2, #0
  40e594:	681c      	ldr	r4, [r3, #0]
  40e596:	fa04 f40c 	lsl.w	r4, r4, ip
  40e59a:	4314      	orrs	r4, r2
  40e59c:	468a      	mov	sl, r1
  40e59e:	f841 4b04 	str.w	r4, [r1], #4
  40e5a2:	f853 4b04 	ldr.w	r4, [r3], #4
  40e5a6:	459e      	cmp	lr, r3
  40e5a8:	fa24 f209 	lsr.w	r2, r4, r9
  40e5ac:	d8f2      	bhi.n	40e594 <__lshift+0x60>
  40e5ae:	f8ca 2004 	str.w	r2, [sl, #4]
  40e5b2:	b102      	cbz	r2, 40e5b6 <__lshift+0x82>
  40e5b4:	1cbd      	adds	r5, r7, #2
  40e5b6:	f8d8 304c 	ldr.w	r3, [r8, #76]	; 0x4c
  40e5ba:	6872      	ldr	r2, [r6, #4]
  40e5bc:	3d01      	subs	r5, #1
  40e5be:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
  40e5c2:	6105      	str	r5, [r0, #16]
  40e5c4:	6031      	str	r1, [r6, #0]
  40e5c6:	f843 6022 	str.w	r6, [r3, r2, lsl #2]
  40e5ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40e5ce:	3904      	subs	r1, #4
  40e5d0:	f853 2b04 	ldr.w	r2, [r3], #4
  40e5d4:	f841 2f04 	str.w	r2, [r1, #4]!
  40e5d8:	459e      	cmp	lr, r3
  40e5da:	d8f9      	bhi.n	40e5d0 <__lshift+0x9c>
  40e5dc:	e7eb      	b.n	40e5b6 <__lshift+0x82>
  40e5de:	bf00      	nop

0040e5e0 <__mcmp>:
  40e5e0:	6902      	ldr	r2, [r0, #16]
  40e5e2:	690b      	ldr	r3, [r1, #16]
  40e5e4:	1ad2      	subs	r2, r2, r3
  40e5e6:	d113      	bne.n	40e610 <__mcmp+0x30>
  40e5e8:	009b      	lsls	r3, r3, #2
  40e5ea:	3014      	adds	r0, #20
  40e5ec:	3114      	adds	r1, #20
  40e5ee:	4419      	add	r1, r3
  40e5f0:	b410      	push	{r4}
  40e5f2:	4403      	add	r3, r0
  40e5f4:	e001      	b.n	40e5fa <__mcmp+0x1a>
  40e5f6:	4298      	cmp	r0, r3
  40e5f8:	d20c      	bcs.n	40e614 <__mcmp+0x34>
  40e5fa:	f853 4d04 	ldr.w	r4, [r3, #-4]!
  40e5fe:	f851 2d04 	ldr.w	r2, [r1, #-4]!
  40e602:	4294      	cmp	r4, r2
  40e604:	d0f7      	beq.n	40e5f6 <__mcmp+0x16>
  40e606:	d309      	bcc.n	40e61c <__mcmp+0x3c>
  40e608:	2001      	movs	r0, #1
  40e60a:	f85d 4b04 	ldr.w	r4, [sp], #4
  40e60e:	4770      	bx	lr
  40e610:	4610      	mov	r0, r2
  40e612:	4770      	bx	lr
  40e614:	2000      	movs	r0, #0
  40e616:	f85d 4b04 	ldr.w	r4, [sp], #4
  40e61a:	4770      	bx	lr
  40e61c:	f04f 30ff 	mov.w	r0, #4294967295
  40e620:	f85d 4b04 	ldr.w	r4, [sp], #4
  40e624:	4770      	bx	lr
  40e626:	bf00      	nop

0040e628 <__mdiff>:
  40e628:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40e62c:	460e      	mov	r6, r1
  40e62e:	4605      	mov	r5, r0
  40e630:	4611      	mov	r1, r2
  40e632:	4630      	mov	r0, r6
  40e634:	4614      	mov	r4, r2
  40e636:	f7ff ffd3 	bl	40e5e0 <__mcmp>
  40e63a:	1e07      	subs	r7, r0, #0
  40e63c:	d054      	beq.n	40e6e8 <__mdiff+0xc0>
  40e63e:	db4d      	blt.n	40e6dc <__mdiff+0xb4>
  40e640:	f04f 0800 	mov.w	r8, #0
  40e644:	6871      	ldr	r1, [r6, #4]
  40e646:	4628      	mov	r0, r5
  40e648:	f7ff fdc0 	bl	40e1cc <_Balloc>
  40e64c:	6937      	ldr	r7, [r6, #16]
  40e64e:	6923      	ldr	r3, [r4, #16]
  40e650:	f8c0 800c 	str.w	r8, [r0, #12]
  40e654:	3614      	adds	r6, #20
  40e656:	f104 0214 	add.w	r2, r4, #20
  40e65a:	eb02 0c83 	add.w	ip, r2, r3, lsl #2
  40e65e:	f100 0514 	add.w	r5, r0, #20
  40e662:	eb06 0e87 	add.w	lr, r6, r7, lsl #2
  40e666:	2300      	movs	r3, #0
  40e668:	f856 8b04 	ldr.w	r8, [r6], #4
  40e66c:	f852 4b04 	ldr.w	r4, [r2], #4
  40e670:	fa13 f388 	uxtah	r3, r3, r8
  40e674:	b2a1      	uxth	r1, r4
  40e676:	0c24      	lsrs	r4, r4, #16
  40e678:	1a59      	subs	r1, r3, r1
  40e67a:	ebc4 4318 	rsb	r3, r4, r8, lsr #16
  40e67e:	eb03 4321 	add.w	r3, r3, r1, asr #16
  40e682:	b289      	uxth	r1, r1
  40e684:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
  40e688:	4594      	cmp	ip, r2
  40e68a:	f845 1b04 	str.w	r1, [r5], #4
  40e68e:	ea4f 4323 	mov.w	r3, r3, asr #16
  40e692:	4634      	mov	r4, r6
  40e694:	d8e8      	bhi.n	40e668 <__mdiff+0x40>
  40e696:	45b6      	cmp	lr, r6
  40e698:	46ac      	mov	ip, r5
  40e69a:	d915      	bls.n	40e6c8 <__mdiff+0xa0>
  40e69c:	f854 2b04 	ldr.w	r2, [r4], #4
  40e6a0:	fa13 f182 	uxtah	r1, r3, r2
  40e6a4:	0c13      	lsrs	r3, r2, #16
  40e6a6:	eb03 4321 	add.w	r3, r3, r1, asr #16
  40e6aa:	b289      	uxth	r1, r1
  40e6ac:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
  40e6b0:	45a6      	cmp	lr, r4
  40e6b2:	f845 1b04 	str.w	r1, [r5], #4
  40e6b6:	ea4f 4323 	mov.w	r3, r3, asr #16
  40e6ba:	d8ef      	bhi.n	40e69c <__mdiff+0x74>
  40e6bc:	43f6      	mvns	r6, r6
  40e6be:	4476      	add	r6, lr
  40e6c0:	f026 0503 	bic.w	r5, r6, #3
  40e6c4:	3504      	adds	r5, #4
  40e6c6:	4465      	add	r5, ip
  40e6c8:	3d04      	subs	r5, #4
  40e6ca:	b921      	cbnz	r1, 40e6d6 <__mdiff+0xae>
  40e6cc:	f855 3d04 	ldr.w	r3, [r5, #-4]!
  40e6d0:	3f01      	subs	r7, #1
  40e6d2:	2b00      	cmp	r3, #0
  40e6d4:	d0fa      	beq.n	40e6cc <__mdiff+0xa4>
  40e6d6:	6107      	str	r7, [r0, #16]
  40e6d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40e6dc:	4633      	mov	r3, r6
  40e6de:	f04f 0801 	mov.w	r8, #1
  40e6e2:	4626      	mov	r6, r4
  40e6e4:	461c      	mov	r4, r3
  40e6e6:	e7ad      	b.n	40e644 <__mdiff+0x1c>
  40e6e8:	4628      	mov	r0, r5
  40e6ea:	4639      	mov	r1, r7
  40e6ec:	f7ff fd6e 	bl	40e1cc <_Balloc>
  40e6f0:	2301      	movs	r3, #1
  40e6f2:	6147      	str	r7, [r0, #20]
  40e6f4:	6103      	str	r3, [r0, #16]
  40e6f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40e6fa:	bf00      	nop

0040e6fc <__d2b>:
  40e6fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40e700:	b082      	sub	sp, #8
  40e702:	2101      	movs	r1, #1
  40e704:	461c      	mov	r4, r3
  40e706:	f3c3 570a 	ubfx	r7, r3, #20, #11
  40e70a:	4615      	mov	r5, r2
  40e70c:	9e08      	ldr	r6, [sp, #32]
  40e70e:	f7ff fd5d 	bl	40e1cc <_Balloc>
  40e712:	f3c4 0413 	ubfx	r4, r4, #0, #20
  40e716:	4680      	mov	r8, r0
  40e718:	b10f      	cbz	r7, 40e71e <__d2b+0x22>
  40e71a:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
  40e71e:	9401      	str	r4, [sp, #4]
  40e720:	b31d      	cbz	r5, 40e76a <__d2b+0x6e>
  40e722:	a802      	add	r0, sp, #8
  40e724:	f840 5d08 	str.w	r5, [r0, #-8]!
  40e728:	f7ff fde2 	bl	40e2f0 <__lo0bits>
  40e72c:	2800      	cmp	r0, #0
  40e72e:	d134      	bne.n	40e79a <__d2b+0x9e>
  40e730:	e89d 000c 	ldmia.w	sp, {r2, r3}
  40e734:	f8c8 2014 	str.w	r2, [r8, #20]
  40e738:	2b00      	cmp	r3, #0
  40e73a:	bf14      	ite	ne
  40e73c:	2402      	movne	r4, #2
  40e73e:	2401      	moveq	r4, #1
  40e740:	f8c8 3018 	str.w	r3, [r8, #24]
  40e744:	f8c8 4010 	str.w	r4, [r8, #16]
  40e748:	b9df      	cbnz	r7, 40e782 <__d2b+0x86>
  40e74a:	eb08 0384 	add.w	r3, r8, r4, lsl #2
  40e74e:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
  40e752:	6030      	str	r0, [r6, #0]
  40e754:	6918      	ldr	r0, [r3, #16]
  40e756:	f7ff fdab 	bl	40e2b0 <__hi0bits>
  40e75a:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40e75c:	ebc0 1044 	rsb	r0, r0, r4, lsl #5
  40e760:	6018      	str	r0, [r3, #0]
  40e762:	4640      	mov	r0, r8
  40e764:	b002      	add	sp, #8
  40e766:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40e76a:	a801      	add	r0, sp, #4
  40e76c:	f7ff fdc0 	bl	40e2f0 <__lo0bits>
  40e770:	2401      	movs	r4, #1
  40e772:	9b01      	ldr	r3, [sp, #4]
  40e774:	f8c8 3014 	str.w	r3, [r8, #20]
  40e778:	3020      	adds	r0, #32
  40e77a:	f8c8 4010 	str.w	r4, [r8, #16]
  40e77e:	2f00      	cmp	r7, #0
  40e780:	d0e3      	beq.n	40e74a <__d2b+0x4e>
  40e782:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40e784:	f2a7 4733 	subw	r7, r7, #1075	; 0x433
  40e788:	4407      	add	r7, r0
  40e78a:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
  40e78e:	6037      	str	r7, [r6, #0]
  40e790:	6018      	str	r0, [r3, #0]
  40e792:	4640      	mov	r0, r8
  40e794:	b002      	add	sp, #8
  40e796:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40e79a:	e89d 000c 	ldmia.w	sp, {r2, r3}
  40e79e:	f1c0 0120 	rsb	r1, r0, #32
  40e7a2:	fa03 f101 	lsl.w	r1, r3, r1
  40e7a6:	430a      	orrs	r2, r1
  40e7a8:	40c3      	lsrs	r3, r0
  40e7aa:	9301      	str	r3, [sp, #4]
  40e7ac:	f8c8 2014 	str.w	r2, [r8, #20]
  40e7b0:	e7c2      	b.n	40e738 <__d2b+0x3c>
  40e7b2:	bf00      	nop

0040e7b4 <_read_r>:
  40e7b4:	b570      	push	{r4, r5, r6, lr}
  40e7b6:	4c08      	ldr	r4, [pc, #32]	; (40e7d8 <_read_r+0x24>)
  40e7b8:	4606      	mov	r6, r0
  40e7ba:	2500      	movs	r5, #0
  40e7bc:	4608      	mov	r0, r1
  40e7be:	4611      	mov	r1, r2
  40e7c0:	461a      	mov	r2, r3
  40e7c2:	6025      	str	r5, [r4, #0]
  40e7c4:	f7f2 f840 	bl	400848 <_read>
  40e7c8:	1c43      	adds	r3, r0, #1
  40e7ca:	d000      	beq.n	40e7ce <_read_r+0x1a>
  40e7cc:	bd70      	pop	{r4, r5, r6, pc}
  40e7ce:	6823      	ldr	r3, [r4, #0]
  40e7d0:	2b00      	cmp	r3, #0
  40e7d2:	d0fb      	beq.n	40e7cc <_read_r+0x18>
  40e7d4:	6033      	str	r3, [r6, #0]
  40e7d6:	bd70      	pop	{r4, r5, r6, pc}
  40e7d8:	200012c4 	.word	0x200012c4

0040e7dc <__fpclassifyd>:
  40e7dc:	b410      	push	{r4}
  40e7de:	f031 4400 	bics.w	r4, r1, #2147483648	; 0x80000000
  40e7e2:	d008      	beq.n	40e7f6 <__fpclassifyd+0x1a>
  40e7e4:	4b11      	ldr	r3, [pc, #68]	; (40e82c <__fpclassifyd+0x50>)
  40e7e6:	f5a1 1280 	sub.w	r2, r1, #1048576	; 0x100000
  40e7ea:	429a      	cmp	r2, r3
  40e7ec:	d808      	bhi.n	40e800 <__fpclassifyd+0x24>
  40e7ee:	2004      	movs	r0, #4
  40e7f0:	f85d 4b04 	ldr.w	r4, [sp], #4
  40e7f4:	4770      	bx	lr
  40e7f6:	b918      	cbnz	r0, 40e800 <__fpclassifyd+0x24>
  40e7f8:	2002      	movs	r0, #2
  40e7fa:	f85d 4b04 	ldr.w	r4, [sp], #4
  40e7fe:	4770      	bx	lr
  40e800:	f101 41ff 	add.w	r1, r1, #2139095040	; 0x7f800000
  40e804:	4b09      	ldr	r3, [pc, #36]	; (40e82c <__fpclassifyd+0x50>)
  40e806:	f501 01e0 	add.w	r1, r1, #7340032	; 0x700000
  40e80a:	4299      	cmp	r1, r3
  40e80c:	d9ef      	bls.n	40e7ee <__fpclassifyd+0x12>
  40e80e:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
  40e812:	d201      	bcs.n	40e818 <__fpclassifyd+0x3c>
  40e814:	2003      	movs	r0, #3
  40e816:	e7eb      	b.n	40e7f0 <__fpclassifyd+0x14>
  40e818:	4b05      	ldr	r3, [pc, #20]	; (40e830 <__fpclassifyd+0x54>)
  40e81a:	429c      	cmp	r4, r3
  40e81c:	d001      	beq.n	40e822 <__fpclassifyd+0x46>
  40e81e:	2000      	movs	r0, #0
  40e820:	e7e6      	b.n	40e7f0 <__fpclassifyd+0x14>
  40e822:	fab0 f080 	clz	r0, r0
  40e826:	0940      	lsrs	r0, r0, #5
  40e828:	e7e2      	b.n	40e7f0 <__fpclassifyd+0x14>
  40e82a:	bf00      	nop
  40e82c:	7fdfffff 	.word	0x7fdfffff
  40e830:	7ff00000 	.word	0x7ff00000

0040e834 <__ssprint_r>:
  40e834:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40e838:	6893      	ldr	r3, [r2, #8]
  40e83a:	f8d2 8000 	ldr.w	r8, [r2]
  40e83e:	b083      	sub	sp, #12
  40e840:	4691      	mov	r9, r2
  40e842:	2b00      	cmp	r3, #0
  40e844:	d072      	beq.n	40e92c <__ssprint_r+0xf8>
  40e846:	4607      	mov	r7, r0
  40e848:	f04f 0b00 	mov.w	fp, #0
  40e84c:	6808      	ldr	r0, [r1, #0]
  40e84e:	688b      	ldr	r3, [r1, #8]
  40e850:	460d      	mov	r5, r1
  40e852:	465c      	mov	r4, fp
  40e854:	2c00      	cmp	r4, #0
  40e856:	d045      	beq.n	40e8e4 <__ssprint_r+0xb0>
  40e858:	429c      	cmp	r4, r3
  40e85a:	461e      	mov	r6, r3
  40e85c:	469a      	mov	sl, r3
  40e85e:	d348      	bcc.n	40e8f2 <__ssprint_r+0xbe>
  40e860:	89ab      	ldrh	r3, [r5, #12]
  40e862:	f413 6f90 	tst.w	r3, #1152	; 0x480
  40e866:	d02d      	beq.n	40e8c4 <__ssprint_r+0x90>
  40e868:	696e      	ldr	r6, [r5, #20]
  40e86a:	6929      	ldr	r1, [r5, #16]
  40e86c:	eb06 0646 	add.w	r6, r6, r6, lsl #1
  40e870:	ebc1 0a00 	rsb	sl, r1, r0
  40e874:	eb06 76d6 	add.w	r6, r6, r6, lsr #31
  40e878:	1c60      	adds	r0, r4, #1
  40e87a:	1076      	asrs	r6, r6, #1
  40e87c:	4450      	add	r0, sl
  40e87e:	4286      	cmp	r6, r0
  40e880:	4632      	mov	r2, r6
  40e882:	bf3c      	itt	cc
  40e884:	4606      	movcc	r6, r0
  40e886:	4632      	movcc	r2, r6
  40e888:	055b      	lsls	r3, r3, #21
  40e88a:	d535      	bpl.n	40e8f8 <__ssprint_r+0xc4>
  40e88c:	4611      	mov	r1, r2
  40e88e:	4638      	mov	r0, r7
  40e890:	f7fa f81c 	bl	4088cc <_malloc_r>
  40e894:	2800      	cmp	r0, #0
  40e896:	d039      	beq.n	40e90c <__ssprint_r+0xd8>
  40e898:	4652      	mov	r2, sl
  40e89a:	6929      	ldr	r1, [r5, #16]
  40e89c:	9001      	str	r0, [sp, #4]
  40e89e:	f7fa fb23 	bl	408ee8 <memcpy>
  40e8a2:	89aa      	ldrh	r2, [r5, #12]
  40e8a4:	9b01      	ldr	r3, [sp, #4]
  40e8a6:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
  40e8aa:	f042 0280 	orr.w	r2, r2, #128	; 0x80
  40e8ae:	81aa      	strh	r2, [r5, #12]
  40e8b0:	ebca 0206 	rsb	r2, sl, r6
  40e8b4:	eb03 000a 	add.w	r0, r3, sl
  40e8b8:	616e      	str	r6, [r5, #20]
  40e8ba:	612b      	str	r3, [r5, #16]
  40e8bc:	6028      	str	r0, [r5, #0]
  40e8be:	60aa      	str	r2, [r5, #8]
  40e8c0:	4626      	mov	r6, r4
  40e8c2:	46a2      	mov	sl, r4
  40e8c4:	4652      	mov	r2, sl
  40e8c6:	4659      	mov	r1, fp
  40e8c8:	f7fa fba8 	bl	40901c <memmove>
  40e8cc:	f8d9 2008 	ldr.w	r2, [r9, #8]
  40e8d0:	68ab      	ldr	r3, [r5, #8]
  40e8d2:	6828      	ldr	r0, [r5, #0]
  40e8d4:	1b9b      	subs	r3, r3, r6
  40e8d6:	4450      	add	r0, sl
  40e8d8:	1b14      	subs	r4, r2, r4
  40e8da:	60ab      	str	r3, [r5, #8]
  40e8dc:	6028      	str	r0, [r5, #0]
  40e8de:	f8c9 4008 	str.w	r4, [r9, #8]
  40e8e2:	b31c      	cbz	r4, 40e92c <__ssprint_r+0xf8>
  40e8e4:	f8d8 b000 	ldr.w	fp, [r8]
  40e8e8:	f8d8 4004 	ldr.w	r4, [r8, #4]
  40e8ec:	f108 0808 	add.w	r8, r8, #8
  40e8f0:	e7b0      	b.n	40e854 <__ssprint_r+0x20>
  40e8f2:	4626      	mov	r6, r4
  40e8f4:	46a2      	mov	sl, r4
  40e8f6:	e7e5      	b.n	40e8c4 <__ssprint_r+0x90>
  40e8f8:	4638      	mov	r0, r7
  40e8fa:	f7fa fc4d 	bl	409198 <_realloc_r>
  40e8fe:	4603      	mov	r3, r0
  40e900:	2800      	cmp	r0, #0
  40e902:	d1d5      	bne.n	40e8b0 <__ssprint_r+0x7c>
  40e904:	4638      	mov	r0, r7
  40e906:	6929      	ldr	r1, [r5, #16]
  40e908:	f7f9 fc82 	bl	408210 <_free_r>
  40e90c:	230c      	movs	r3, #12
  40e90e:	603b      	str	r3, [r7, #0]
  40e910:	89ab      	ldrh	r3, [r5, #12]
  40e912:	2200      	movs	r2, #0
  40e914:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40e918:	f04f 30ff 	mov.w	r0, #4294967295
  40e91c:	81ab      	strh	r3, [r5, #12]
  40e91e:	f8c9 2008 	str.w	r2, [r9, #8]
  40e922:	f8c9 2004 	str.w	r2, [r9, #4]
  40e926:	b003      	add	sp, #12
  40e928:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40e92c:	2000      	movs	r0, #0
  40e92e:	f8c9 0004 	str.w	r0, [r9, #4]
  40e932:	b003      	add	sp, #12
  40e934:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0040e938 <_wcrtomb_r>:
  40e938:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40e93c:	4605      	mov	r5, r0
  40e93e:	b086      	sub	sp, #24
  40e940:	461e      	mov	r6, r3
  40e942:	460c      	mov	r4, r1
  40e944:	b1a1      	cbz	r1, 40e970 <_wcrtomb_r+0x38>
  40e946:	4b10      	ldr	r3, [pc, #64]	; (40e988 <_wcrtomb_r+0x50>)
  40e948:	4617      	mov	r7, r2
  40e94a:	f8d3 8000 	ldr.w	r8, [r3]
  40e94e:	f7ff fc1b 	bl	40e188 <__locale_charset>
  40e952:	9600      	str	r6, [sp, #0]
  40e954:	4603      	mov	r3, r0
  40e956:	4621      	mov	r1, r4
  40e958:	463a      	mov	r2, r7
  40e95a:	4628      	mov	r0, r5
  40e95c:	47c0      	blx	r8
  40e95e:	1c43      	adds	r3, r0, #1
  40e960:	d103      	bne.n	40e96a <_wcrtomb_r+0x32>
  40e962:	2200      	movs	r2, #0
  40e964:	238a      	movs	r3, #138	; 0x8a
  40e966:	6032      	str	r2, [r6, #0]
  40e968:	602b      	str	r3, [r5, #0]
  40e96a:	b006      	add	sp, #24
  40e96c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40e970:	4b05      	ldr	r3, [pc, #20]	; (40e988 <_wcrtomb_r+0x50>)
  40e972:	681f      	ldr	r7, [r3, #0]
  40e974:	f7ff fc08 	bl	40e188 <__locale_charset>
  40e978:	9600      	str	r6, [sp, #0]
  40e97a:	4603      	mov	r3, r0
  40e97c:	4622      	mov	r2, r4
  40e97e:	4628      	mov	r0, r5
  40e980:	a903      	add	r1, sp, #12
  40e982:	47b8      	blx	r7
  40e984:	e7eb      	b.n	40e95e <_wcrtomb_r+0x26>
  40e986:	bf00      	nop
  40e988:	20000d20 	.word	0x20000d20

0040e98c <__ascii_wctomb>:
  40e98c:	b121      	cbz	r1, 40e998 <__ascii_wctomb+0xc>
  40e98e:	2aff      	cmp	r2, #255	; 0xff
  40e990:	d804      	bhi.n	40e99c <__ascii_wctomb+0x10>
  40e992:	700a      	strb	r2, [r1, #0]
  40e994:	2001      	movs	r0, #1
  40e996:	4770      	bx	lr
  40e998:	4608      	mov	r0, r1
  40e99a:	4770      	bx	lr
  40e99c:	238a      	movs	r3, #138	; 0x8a
  40e99e:	6003      	str	r3, [r0, #0]
  40e9a0:	f04f 30ff 	mov.w	r0, #4294967295
  40e9a4:	4770      	bx	lr
  40e9a6:	bf00      	nop

0040e9a8 <__register_exitproc>:
  40e9a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  40e9ac:	4c25      	ldr	r4, [pc, #148]	; (40ea44 <__register_exitproc+0x9c>)
  40e9ae:	6825      	ldr	r5, [r4, #0]
  40e9b0:	f8d5 4148 	ldr.w	r4, [r5, #328]	; 0x148
  40e9b4:	4606      	mov	r6, r0
  40e9b6:	4688      	mov	r8, r1
  40e9b8:	4692      	mov	sl, r2
  40e9ba:	4699      	mov	r9, r3
  40e9bc:	b3cc      	cbz	r4, 40ea32 <__register_exitproc+0x8a>
  40e9be:	6860      	ldr	r0, [r4, #4]
  40e9c0:	281f      	cmp	r0, #31
  40e9c2:	dc18      	bgt.n	40e9f6 <__register_exitproc+0x4e>
  40e9c4:	1c43      	adds	r3, r0, #1
  40e9c6:	b17e      	cbz	r6, 40e9e8 <__register_exitproc+0x40>
  40e9c8:	eb04 0580 	add.w	r5, r4, r0, lsl #2
  40e9cc:	2101      	movs	r1, #1
  40e9ce:	f8c5 a088 	str.w	sl, [r5, #136]	; 0x88
  40e9d2:	f8d4 7188 	ldr.w	r7, [r4, #392]	; 0x188
  40e9d6:	fa01 f200 	lsl.w	r2, r1, r0
  40e9da:	4317      	orrs	r7, r2
  40e9dc:	2e02      	cmp	r6, #2
  40e9de:	f8c4 7188 	str.w	r7, [r4, #392]	; 0x188
  40e9e2:	f8c5 9108 	str.w	r9, [r5, #264]	; 0x108
  40e9e6:	d01e      	beq.n	40ea26 <__register_exitproc+0x7e>
  40e9e8:	3002      	adds	r0, #2
  40e9ea:	6063      	str	r3, [r4, #4]
  40e9ec:	f844 8020 	str.w	r8, [r4, r0, lsl #2]
  40e9f0:	2000      	movs	r0, #0
  40e9f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40e9f6:	4b14      	ldr	r3, [pc, #80]	; (40ea48 <__register_exitproc+0xa0>)
  40e9f8:	b303      	cbz	r3, 40ea3c <__register_exitproc+0x94>
  40e9fa:	f44f 70c8 	mov.w	r0, #400	; 0x190
  40e9fe:	f7f9 ff55 	bl	4088ac <malloc>
  40ea02:	4604      	mov	r4, r0
  40ea04:	b1d0      	cbz	r0, 40ea3c <__register_exitproc+0x94>
  40ea06:	f8d5 3148 	ldr.w	r3, [r5, #328]	; 0x148
  40ea0a:	2700      	movs	r7, #0
  40ea0c:	e880 0088 	stmia.w	r0, {r3, r7}
  40ea10:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
  40ea14:	4638      	mov	r0, r7
  40ea16:	2301      	movs	r3, #1
  40ea18:	f8c4 7188 	str.w	r7, [r4, #392]	; 0x188
  40ea1c:	f8c4 718c 	str.w	r7, [r4, #396]	; 0x18c
  40ea20:	2e00      	cmp	r6, #0
  40ea22:	d0e1      	beq.n	40e9e8 <__register_exitproc+0x40>
  40ea24:	e7d0      	b.n	40e9c8 <__register_exitproc+0x20>
  40ea26:	f8d4 118c 	ldr.w	r1, [r4, #396]	; 0x18c
  40ea2a:	430a      	orrs	r2, r1
  40ea2c:	f8c4 218c 	str.w	r2, [r4, #396]	; 0x18c
  40ea30:	e7da      	b.n	40e9e8 <__register_exitproc+0x40>
  40ea32:	f505 74a6 	add.w	r4, r5, #332	; 0x14c
  40ea36:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
  40ea3a:	e7c0      	b.n	40e9be <__register_exitproc+0x16>
  40ea3c:	f04f 30ff 	mov.w	r0, #4294967295
  40ea40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40ea44:	00411b94 	.word	0x00411b94
  40ea48:	004088ad 	.word	0x004088ad

0040ea4c <__aeabi_drsub>:
  40ea4c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
  40ea50:	e002      	b.n	40ea58 <__adddf3>
  40ea52:	bf00      	nop

0040ea54 <__aeabi_dsub>:
  40ea54:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0040ea58 <__adddf3>:
  40ea58:	b530      	push	{r4, r5, lr}
  40ea5a:	ea4f 0441 	mov.w	r4, r1, lsl #1
  40ea5e:	ea4f 0543 	mov.w	r5, r3, lsl #1
  40ea62:	ea94 0f05 	teq	r4, r5
  40ea66:	bf08      	it	eq
  40ea68:	ea90 0f02 	teqeq	r0, r2
  40ea6c:	bf1f      	itttt	ne
  40ea6e:	ea54 0c00 	orrsne.w	ip, r4, r0
  40ea72:	ea55 0c02 	orrsne.w	ip, r5, r2
  40ea76:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
  40ea7a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  40ea7e:	f000 80e2 	beq.w	40ec46 <__adddf3+0x1ee>
  40ea82:	ea4f 5454 	mov.w	r4, r4, lsr #21
  40ea86:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
  40ea8a:	bfb8      	it	lt
  40ea8c:	426d      	neglt	r5, r5
  40ea8e:	dd0c      	ble.n	40eaaa <__adddf3+0x52>
  40ea90:	442c      	add	r4, r5
  40ea92:	ea80 0202 	eor.w	r2, r0, r2
  40ea96:	ea81 0303 	eor.w	r3, r1, r3
  40ea9a:	ea82 0000 	eor.w	r0, r2, r0
  40ea9e:	ea83 0101 	eor.w	r1, r3, r1
  40eaa2:	ea80 0202 	eor.w	r2, r0, r2
  40eaa6:	ea81 0303 	eor.w	r3, r1, r3
  40eaaa:	2d36      	cmp	r5, #54	; 0x36
  40eaac:	bf88      	it	hi
  40eaae:	bd30      	pophi	{r4, r5, pc}
  40eab0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  40eab4:	ea4f 3101 	mov.w	r1, r1, lsl #12
  40eab8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
  40eabc:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
  40eac0:	d002      	beq.n	40eac8 <__adddf3+0x70>
  40eac2:	4240      	negs	r0, r0
  40eac4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  40eac8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
  40eacc:	ea4f 3303 	mov.w	r3, r3, lsl #12
  40ead0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
  40ead4:	d002      	beq.n	40eadc <__adddf3+0x84>
  40ead6:	4252      	negs	r2, r2
  40ead8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
  40eadc:	ea94 0f05 	teq	r4, r5
  40eae0:	f000 80a7 	beq.w	40ec32 <__adddf3+0x1da>
  40eae4:	f1a4 0401 	sub.w	r4, r4, #1
  40eae8:	f1d5 0e20 	rsbs	lr, r5, #32
  40eaec:	db0d      	blt.n	40eb0a <__adddf3+0xb2>
  40eaee:	fa02 fc0e 	lsl.w	ip, r2, lr
  40eaf2:	fa22 f205 	lsr.w	r2, r2, r5
  40eaf6:	1880      	adds	r0, r0, r2
  40eaf8:	f141 0100 	adc.w	r1, r1, #0
  40eafc:	fa03 f20e 	lsl.w	r2, r3, lr
  40eb00:	1880      	adds	r0, r0, r2
  40eb02:	fa43 f305 	asr.w	r3, r3, r5
  40eb06:	4159      	adcs	r1, r3
  40eb08:	e00e      	b.n	40eb28 <__adddf3+0xd0>
  40eb0a:	f1a5 0520 	sub.w	r5, r5, #32
  40eb0e:	f10e 0e20 	add.w	lr, lr, #32
  40eb12:	2a01      	cmp	r2, #1
  40eb14:	fa03 fc0e 	lsl.w	ip, r3, lr
  40eb18:	bf28      	it	cs
  40eb1a:	f04c 0c02 	orrcs.w	ip, ip, #2
  40eb1e:	fa43 f305 	asr.w	r3, r3, r5
  40eb22:	18c0      	adds	r0, r0, r3
  40eb24:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
  40eb28:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  40eb2c:	d507      	bpl.n	40eb3e <__adddf3+0xe6>
  40eb2e:	f04f 0e00 	mov.w	lr, #0
  40eb32:	f1dc 0c00 	rsbs	ip, ip, #0
  40eb36:	eb7e 0000 	sbcs.w	r0, lr, r0
  40eb3a:	eb6e 0101 	sbc.w	r1, lr, r1
  40eb3e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
  40eb42:	d31b      	bcc.n	40eb7c <__adddf3+0x124>
  40eb44:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
  40eb48:	d30c      	bcc.n	40eb64 <__adddf3+0x10c>
  40eb4a:	0849      	lsrs	r1, r1, #1
  40eb4c:	ea5f 0030 	movs.w	r0, r0, rrx
  40eb50:	ea4f 0c3c 	mov.w	ip, ip, rrx
  40eb54:	f104 0401 	add.w	r4, r4, #1
  40eb58:	ea4f 5244 	mov.w	r2, r4, lsl #21
  40eb5c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
  40eb60:	f080 809a 	bcs.w	40ec98 <__adddf3+0x240>
  40eb64:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
  40eb68:	bf08      	it	eq
  40eb6a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  40eb6e:	f150 0000 	adcs.w	r0, r0, #0
  40eb72:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  40eb76:	ea41 0105 	orr.w	r1, r1, r5
  40eb7a:	bd30      	pop	{r4, r5, pc}
  40eb7c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
  40eb80:	4140      	adcs	r0, r0
  40eb82:	eb41 0101 	adc.w	r1, r1, r1
  40eb86:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  40eb8a:	f1a4 0401 	sub.w	r4, r4, #1
  40eb8e:	d1e9      	bne.n	40eb64 <__adddf3+0x10c>
  40eb90:	f091 0f00 	teq	r1, #0
  40eb94:	bf04      	itt	eq
  40eb96:	4601      	moveq	r1, r0
  40eb98:	2000      	moveq	r0, #0
  40eb9a:	fab1 f381 	clz	r3, r1
  40eb9e:	bf08      	it	eq
  40eba0:	3320      	addeq	r3, #32
  40eba2:	f1a3 030b 	sub.w	r3, r3, #11
  40eba6:	f1b3 0220 	subs.w	r2, r3, #32
  40ebaa:	da0c      	bge.n	40ebc6 <__adddf3+0x16e>
  40ebac:	320c      	adds	r2, #12
  40ebae:	dd08      	ble.n	40ebc2 <__adddf3+0x16a>
  40ebb0:	f102 0c14 	add.w	ip, r2, #20
  40ebb4:	f1c2 020c 	rsb	r2, r2, #12
  40ebb8:	fa01 f00c 	lsl.w	r0, r1, ip
  40ebbc:	fa21 f102 	lsr.w	r1, r1, r2
  40ebc0:	e00c      	b.n	40ebdc <__adddf3+0x184>
  40ebc2:	f102 0214 	add.w	r2, r2, #20
  40ebc6:	bfd8      	it	le
  40ebc8:	f1c2 0c20 	rsble	ip, r2, #32
  40ebcc:	fa01 f102 	lsl.w	r1, r1, r2
  40ebd0:	fa20 fc0c 	lsr.w	ip, r0, ip
  40ebd4:	bfdc      	itt	le
  40ebd6:	ea41 010c 	orrle.w	r1, r1, ip
  40ebda:	4090      	lslle	r0, r2
  40ebdc:	1ae4      	subs	r4, r4, r3
  40ebde:	bfa2      	ittt	ge
  40ebe0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
  40ebe4:	4329      	orrge	r1, r5
  40ebe6:	bd30      	popge	{r4, r5, pc}
  40ebe8:	ea6f 0404 	mvn.w	r4, r4
  40ebec:	3c1f      	subs	r4, #31
  40ebee:	da1c      	bge.n	40ec2a <__adddf3+0x1d2>
  40ebf0:	340c      	adds	r4, #12
  40ebf2:	dc0e      	bgt.n	40ec12 <__adddf3+0x1ba>
  40ebf4:	f104 0414 	add.w	r4, r4, #20
  40ebf8:	f1c4 0220 	rsb	r2, r4, #32
  40ebfc:	fa20 f004 	lsr.w	r0, r0, r4
  40ec00:	fa01 f302 	lsl.w	r3, r1, r2
  40ec04:	ea40 0003 	orr.w	r0, r0, r3
  40ec08:	fa21 f304 	lsr.w	r3, r1, r4
  40ec0c:	ea45 0103 	orr.w	r1, r5, r3
  40ec10:	bd30      	pop	{r4, r5, pc}
  40ec12:	f1c4 040c 	rsb	r4, r4, #12
  40ec16:	f1c4 0220 	rsb	r2, r4, #32
  40ec1a:	fa20 f002 	lsr.w	r0, r0, r2
  40ec1e:	fa01 f304 	lsl.w	r3, r1, r4
  40ec22:	ea40 0003 	orr.w	r0, r0, r3
  40ec26:	4629      	mov	r1, r5
  40ec28:	bd30      	pop	{r4, r5, pc}
  40ec2a:	fa21 f004 	lsr.w	r0, r1, r4
  40ec2e:	4629      	mov	r1, r5
  40ec30:	bd30      	pop	{r4, r5, pc}
  40ec32:	f094 0f00 	teq	r4, #0
  40ec36:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
  40ec3a:	bf06      	itte	eq
  40ec3c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
  40ec40:	3401      	addeq	r4, #1
  40ec42:	3d01      	subne	r5, #1
  40ec44:	e74e      	b.n	40eae4 <__adddf3+0x8c>
  40ec46:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  40ec4a:	bf18      	it	ne
  40ec4c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  40ec50:	d029      	beq.n	40eca6 <__adddf3+0x24e>
  40ec52:	ea94 0f05 	teq	r4, r5
  40ec56:	bf08      	it	eq
  40ec58:	ea90 0f02 	teqeq	r0, r2
  40ec5c:	d005      	beq.n	40ec6a <__adddf3+0x212>
  40ec5e:	ea54 0c00 	orrs.w	ip, r4, r0
  40ec62:	bf04      	itt	eq
  40ec64:	4619      	moveq	r1, r3
  40ec66:	4610      	moveq	r0, r2
  40ec68:	bd30      	pop	{r4, r5, pc}
  40ec6a:	ea91 0f03 	teq	r1, r3
  40ec6e:	bf1e      	ittt	ne
  40ec70:	2100      	movne	r1, #0
  40ec72:	2000      	movne	r0, #0
  40ec74:	bd30      	popne	{r4, r5, pc}
  40ec76:	ea5f 5c54 	movs.w	ip, r4, lsr #21
  40ec7a:	d105      	bne.n	40ec88 <__adddf3+0x230>
  40ec7c:	0040      	lsls	r0, r0, #1
  40ec7e:	4149      	adcs	r1, r1
  40ec80:	bf28      	it	cs
  40ec82:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
  40ec86:	bd30      	pop	{r4, r5, pc}
  40ec88:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
  40ec8c:	bf3c      	itt	cc
  40ec8e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
  40ec92:	bd30      	popcc	{r4, r5, pc}
  40ec94:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  40ec98:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
  40ec9c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  40eca0:	f04f 0000 	mov.w	r0, #0
  40eca4:	bd30      	pop	{r4, r5, pc}
  40eca6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  40ecaa:	bf1a      	itte	ne
  40ecac:	4619      	movne	r1, r3
  40ecae:	4610      	movne	r0, r2
  40ecb0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
  40ecb4:	bf1c      	itt	ne
  40ecb6:	460b      	movne	r3, r1
  40ecb8:	4602      	movne	r2, r0
  40ecba:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  40ecbe:	bf06      	itte	eq
  40ecc0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
  40ecc4:	ea91 0f03 	teqeq	r1, r3
  40ecc8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
  40eccc:	bd30      	pop	{r4, r5, pc}
  40ecce:	bf00      	nop

0040ecd0 <__aeabi_ui2d>:
  40ecd0:	f090 0f00 	teq	r0, #0
  40ecd4:	bf04      	itt	eq
  40ecd6:	2100      	moveq	r1, #0
  40ecd8:	4770      	bxeq	lr
  40ecda:	b530      	push	{r4, r5, lr}
  40ecdc:	f44f 6480 	mov.w	r4, #1024	; 0x400
  40ece0:	f104 0432 	add.w	r4, r4, #50	; 0x32
  40ece4:	f04f 0500 	mov.w	r5, #0
  40ece8:	f04f 0100 	mov.w	r1, #0
  40ecec:	e750      	b.n	40eb90 <__adddf3+0x138>
  40ecee:	bf00      	nop

0040ecf0 <__aeabi_i2d>:
  40ecf0:	f090 0f00 	teq	r0, #0
  40ecf4:	bf04      	itt	eq
  40ecf6:	2100      	moveq	r1, #0
  40ecf8:	4770      	bxeq	lr
  40ecfa:	b530      	push	{r4, r5, lr}
  40ecfc:	f44f 6480 	mov.w	r4, #1024	; 0x400
  40ed00:	f104 0432 	add.w	r4, r4, #50	; 0x32
  40ed04:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
  40ed08:	bf48      	it	mi
  40ed0a:	4240      	negmi	r0, r0
  40ed0c:	f04f 0100 	mov.w	r1, #0
  40ed10:	e73e      	b.n	40eb90 <__adddf3+0x138>
  40ed12:	bf00      	nop

0040ed14 <__aeabi_f2d>:
  40ed14:	0042      	lsls	r2, r0, #1
  40ed16:	ea4f 01e2 	mov.w	r1, r2, asr #3
  40ed1a:	ea4f 0131 	mov.w	r1, r1, rrx
  40ed1e:	ea4f 7002 	mov.w	r0, r2, lsl #28
  40ed22:	bf1f      	itttt	ne
  40ed24:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
  40ed28:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  40ed2c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
  40ed30:	4770      	bxne	lr
  40ed32:	f092 0f00 	teq	r2, #0
  40ed36:	bf14      	ite	ne
  40ed38:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  40ed3c:	4770      	bxeq	lr
  40ed3e:	b530      	push	{r4, r5, lr}
  40ed40:	f44f 7460 	mov.w	r4, #896	; 0x380
  40ed44:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  40ed48:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  40ed4c:	e720      	b.n	40eb90 <__adddf3+0x138>
  40ed4e:	bf00      	nop

0040ed50 <__aeabi_ul2d>:
  40ed50:	ea50 0201 	orrs.w	r2, r0, r1
  40ed54:	bf08      	it	eq
  40ed56:	4770      	bxeq	lr
  40ed58:	b530      	push	{r4, r5, lr}
  40ed5a:	f04f 0500 	mov.w	r5, #0
  40ed5e:	e00a      	b.n	40ed76 <__aeabi_l2d+0x16>

0040ed60 <__aeabi_l2d>:
  40ed60:	ea50 0201 	orrs.w	r2, r0, r1
  40ed64:	bf08      	it	eq
  40ed66:	4770      	bxeq	lr
  40ed68:	b530      	push	{r4, r5, lr}
  40ed6a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
  40ed6e:	d502      	bpl.n	40ed76 <__aeabi_l2d+0x16>
  40ed70:	4240      	negs	r0, r0
  40ed72:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  40ed76:	f44f 6480 	mov.w	r4, #1024	; 0x400
  40ed7a:	f104 0432 	add.w	r4, r4, #50	; 0x32
  40ed7e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
  40ed82:	f43f aedc 	beq.w	40eb3e <__adddf3+0xe6>
  40ed86:	f04f 0203 	mov.w	r2, #3
  40ed8a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  40ed8e:	bf18      	it	ne
  40ed90:	3203      	addne	r2, #3
  40ed92:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  40ed96:	bf18      	it	ne
  40ed98:	3203      	addne	r2, #3
  40ed9a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
  40ed9e:	f1c2 0320 	rsb	r3, r2, #32
  40eda2:	fa00 fc03 	lsl.w	ip, r0, r3
  40eda6:	fa20 f002 	lsr.w	r0, r0, r2
  40edaa:	fa01 fe03 	lsl.w	lr, r1, r3
  40edae:	ea40 000e 	orr.w	r0, r0, lr
  40edb2:	fa21 f102 	lsr.w	r1, r1, r2
  40edb6:	4414      	add	r4, r2
  40edb8:	e6c1      	b.n	40eb3e <__adddf3+0xe6>
  40edba:	bf00      	nop

0040edbc <__aeabi_dmul>:
  40edbc:	b570      	push	{r4, r5, r6, lr}
  40edbe:	f04f 0cff 	mov.w	ip, #255	; 0xff
  40edc2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  40edc6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  40edca:	bf1d      	ittte	ne
  40edcc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  40edd0:	ea94 0f0c 	teqne	r4, ip
  40edd4:	ea95 0f0c 	teqne	r5, ip
  40edd8:	f000 f8de 	bleq	40ef98 <__aeabi_dmul+0x1dc>
  40eddc:	442c      	add	r4, r5
  40edde:	ea81 0603 	eor.w	r6, r1, r3
  40ede2:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
  40ede6:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
  40edea:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
  40edee:	bf18      	it	ne
  40edf0:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
  40edf4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  40edf8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  40edfc:	d038      	beq.n	40ee70 <__aeabi_dmul+0xb4>
  40edfe:	fba0 ce02 	umull	ip, lr, r0, r2
  40ee02:	f04f 0500 	mov.w	r5, #0
  40ee06:	fbe1 e502 	umlal	lr, r5, r1, r2
  40ee0a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
  40ee0e:	fbe0 e503 	umlal	lr, r5, r0, r3
  40ee12:	f04f 0600 	mov.w	r6, #0
  40ee16:	fbe1 5603 	umlal	r5, r6, r1, r3
  40ee1a:	f09c 0f00 	teq	ip, #0
  40ee1e:	bf18      	it	ne
  40ee20:	f04e 0e01 	orrne.w	lr, lr, #1
  40ee24:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
  40ee28:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
  40ee2c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
  40ee30:	d204      	bcs.n	40ee3c <__aeabi_dmul+0x80>
  40ee32:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
  40ee36:	416d      	adcs	r5, r5
  40ee38:	eb46 0606 	adc.w	r6, r6, r6
  40ee3c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
  40ee40:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
  40ee44:	ea4f 20c5 	mov.w	r0, r5, lsl #11
  40ee48:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
  40ee4c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
  40ee50:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  40ee54:	bf88      	it	hi
  40ee56:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  40ee5a:	d81e      	bhi.n	40ee9a <__aeabi_dmul+0xde>
  40ee5c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
  40ee60:	bf08      	it	eq
  40ee62:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
  40ee66:	f150 0000 	adcs.w	r0, r0, #0
  40ee6a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  40ee6e:	bd70      	pop	{r4, r5, r6, pc}
  40ee70:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
  40ee74:	ea46 0101 	orr.w	r1, r6, r1
  40ee78:	ea40 0002 	orr.w	r0, r0, r2
  40ee7c:	ea81 0103 	eor.w	r1, r1, r3
  40ee80:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
  40ee84:	bfc2      	ittt	gt
  40ee86:	ebd4 050c 	rsbsgt	r5, r4, ip
  40ee8a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  40ee8e:	bd70      	popgt	{r4, r5, r6, pc}
  40ee90:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  40ee94:	f04f 0e00 	mov.w	lr, #0
  40ee98:	3c01      	subs	r4, #1
  40ee9a:	f300 80ab 	bgt.w	40eff4 <__aeabi_dmul+0x238>
  40ee9e:	f114 0f36 	cmn.w	r4, #54	; 0x36
  40eea2:	bfde      	ittt	le
  40eea4:	2000      	movle	r0, #0
  40eea6:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
  40eeaa:	bd70      	pople	{r4, r5, r6, pc}
  40eeac:	f1c4 0400 	rsb	r4, r4, #0
  40eeb0:	3c20      	subs	r4, #32
  40eeb2:	da35      	bge.n	40ef20 <__aeabi_dmul+0x164>
  40eeb4:	340c      	adds	r4, #12
  40eeb6:	dc1b      	bgt.n	40eef0 <__aeabi_dmul+0x134>
  40eeb8:	f104 0414 	add.w	r4, r4, #20
  40eebc:	f1c4 0520 	rsb	r5, r4, #32
  40eec0:	fa00 f305 	lsl.w	r3, r0, r5
  40eec4:	fa20 f004 	lsr.w	r0, r0, r4
  40eec8:	fa01 f205 	lsl.w	r2, r1, r5
  40eecc:	ea40 0002 	orr.w	r0, r0, r2
  40eed0:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
  40eed4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  40eed8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  40eedc:	fa21 f604 	lsr.w	r6, r1, r4
  40eee0:	eb42 0106 	adc.w	r1, r2, r6
  40eee4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  40eee8:	bf08      	it	eq
  40eeea:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  40eeee:	bd70      	pop	{r4, r5, r6, pc}
  40eef0:	f1c4 040c 	rsb	r4, r4, #12
  40eef4:	f1c4 0520 	rsb	r5, r4, #32
  40eef8:	fa00 f304 	lsl.w	r3, r0, r4
  40eefc:	fa20 f005 	lsr.w	r0, r0, r5
  40ef00:	fa01 f204 	lsl.w	r2, r1, r4
  40ef04:	ea40 0002 	orr.w	r0, r0, r2
  40ef08:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  40ef0c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  40ef10:	f141 0100 	adc.w	r1, r1, #0
  40ef14:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  40ef18:	bf08      	it	eq
  40ef1a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  40ef1e:	bd70      	pop	{r4, r5, r6, pc}
  40ef20:	f1c4 0520 	rsb	r5, r4, #32
  40ef24:	fa00 f205 	lsl.w	r2, r0, r5
  40ef28:	ea4e 0e02 	orr.w	lr, lr, r2
  40ef2c:	fa20 f304 	lsr.w	r3, r0, r4
  40ef30:	fa01 f205 	lsl.w	r2, r1, r5
  40ef34:	ea43 0302 	orr.w	r3, r3, r2
  40ef38:	fa21 f004 	lsr.w	r0, r1, r4
  40ef3c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  40ef40:	fa21 f204 	lsr.w	r2, r1, r4
  40ef44:	ea20 0002 	bic.w	r0, r0, r2
  40ef48:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
  40ef4c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  40ef50:	bf08      	it	eq
  40ef52:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  40ef56:	bd70      	pop	{r4, r5, r6, pc}
  40ef58:	f094 0f00 	teq	r4, #0
  40ef5c:	d10f      	bne.n	40ef7e <__aeabi_dmul+0x1c2>
  40ef5e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
  40ef62:	0040      	lsls	r0, r0, #1
  40ef64:	eb41 0101 	adc.w	r1, r1, r1
  40ef68:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  40ef6c:	bf08      	it	eq
  40ef6e:	3c01      	subeq	r4, #1
  40ef70:	d0f7      	beq.n	40ef62 <__aeabi_dmul+0x1a6>
  40ef72:	ea41 0106 	orr.w	r1, r1, r6
  40ef76:	f095 0f00 	teq	r5, #0
  40ef7a:	bf18      	it	ne
  40ef7c:	4770      	bxne	lr
  40ef7e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
  40ef82:	0052      	lsls	r2, r2, #1
  40ef84:	eb43 0303 	adc.w	r3, r3, r3
  40ef88:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
  40ef8c:	bf08      	it	eq
  40ef8e:	3d01      	subeq	r5, #1
  40ef90:	d0f7      	beq.n	40ef82 <__aeabi_dmul+0x1c6>
  40ef92:	ea43 0306 	orr.w	r3, r3, r6
  40ef96:	4770      	bx	lr
  40ef98:	ea94 0f0c 	teq	r4, ip
  40ef9c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  40efa0:	bf18      	it	ne
  40efa2:	ea95 0f0c 	teqne	r5, ip
  40efa6:	d00c      	beq.n	40efc2 <__aeabi_dmul+0x206>
  40efa8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  40efac:	bf18      	it	ne
  40efae:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  40efb2:	d1d1      	bne.n	40ef58 <__aeabi_dmul+0x19c>
  40efb4:	ea81 0103 	eor.w	r1, r1, r3
  40efb8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  40efbc:	f04f 0000 	mov.w	r0, #0
  40efc0:	bd70      	pop	{r4, r5, r6, pc}
  40efc2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  40efc6:	bf06      	itte	eq
  40efc8:	4610      	moveq	r0, r2
  40efca:	4619      	moveq	r1, r3
  40efcc:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  40efd0:	d019      	beq.n	40f006 <__aeabi_dmul+0x24a>
  40efd2:	ea94 0f0c 	teq	r4, ip
  40efd6:	d102      	bne.n	40efde <__aeabi_dmul+0x222>
  40efd8:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
  40efdc:	d113      	bne.n	40f006 <__aeabi_dmul+0x24a>
  40efde:	ea95 0f0c 	teq	r5, ip
  40efe2:	d105      	bne.n	40eff0 <__aeabi_dmul+0x234>
  40efe4:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
  40efe8:	bf1c      	itt	ne
  40efea:	4610      	movne	r0, r2
  40efec:	4619      	movne	r1, r3
  40efee:	d10a      	bne.n	40f006 <__aeabi_dmul+0x24a>
  40eff0:	ea81 0103 	eor.w	r1, r1, r3
  40eff4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  40eff8:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  40effc:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  40f000:	f04f 0000 	mov.w	r0, #0
  40f004:	bd70      	pop	{r4, r5, r6, pc}
  40f006:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  40f00a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
  40f00e:	bd70      	pop	{r4, r5, r6, pc}

0040f010 <__aeabi_ddiv>:
  40f010:	b570      	push	{r4, r5, r6, lr}
  40f012:	f04f 0cff 	mov.w	ip, #255	; 0xff
  40f016:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  40f01a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  40f01e:	bf1d      	ittte	ne
  40f020:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  40f024:	ea94 0f0c 	teqne	r4, ip
  40f028:	ea95 0f0c 	teqne	r5, ip
  40f02c:	f000 f8a7 	bleq	40f17e <__aeabi_ddiv+0x16e>
  40f030:	eba4 0405 	sub.w	r4, r4, r5
  40f034:	ea81 0e03 	eor.w	lr, r1, r3
  40f038:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  40f03c:	ea4f 3101 	mov.w	r1, r1, lsl #12
  40f040:	f000 8088 	beq.w	40f154 <__aeabi_ddiv+0x144>
  40f044:	ea4f 3303 	mov.w	r3, r3, lsl #12
  40f048:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
  40f04c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
  40f050:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
  40f054:	ea4f 2202 	mov.w	r2, r2, lsl #8
  40f058:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
  40f05c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
  40f060:	ea4f 2600 	mov.w	r6, r0, lsl #8
  40f064:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
  40f068:	429d      	cmp	r5, r3
  40f06a:	bf08      	it	eq
  40f06c:	4296      	cmpeq	r6, r2
  40f06e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
  40f072:	f504 7440 	add.w	r4, r4, #768	; 0x300
  40f076:	d202      	bcs.n	40f07e <__aeabi_ddiv+0x6e>
  40f078:	085b      	lsrs	r3, r3, #1
  40f07a:	ea4f 0232 	mov.w	r2, r2, rrx
  40f07e:	1ab6      	subs	r6, r6, r2
  40f080:	eb65 0503 	sbc.w	r5, r5, r3
  40f084:	085b      	lsrs	r3, r3, #1
  40f086:	ea4f 0232 	mov.w	r2, r2, rrx
  40f08a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
  40f08e:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
  40f092:	ebb6 0e02 	subs.w	lr, r6, r2
  40f096:	eb75 0e03 	sbcs.w	lr, r5, r3
  40f09a:	bf22      	ittt	cs
  40f09c:	1ab6      	subcs	r6, r6, r2
  40f09e:	4675      	movcs	r5, lr
  40f0a0:	ea40 000c 	orrcs.w	r0, r0, ip
  40f0a4:	085b      	lsrs	r3, r3, #1
  40f0a6:	ea4f 0232 	mov.w	r2, r2, rrx
  40f0aa:	ebb6 0e02 	subs.w	lr, r6, r2
  40f0ae:	eb75 0e03 	sbcs.w	lr, r5, r3
  40f0b2:	bf22      	ittt	cs
  40f0b4:	1ab6      	subcs	r6, r6, r2
  40f0b6:	4675      	movcs	r5, lr
  40f0b8:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
  40f0bc:	085b      	lsrs	r3, r3, #1
  40f0be:	ea4f 0232 	mov.w	r2, r2, rrx
  40f0c2:	ebb6 0e02 	subs.w	lr, r6, r2
  40f0c6:	eb75 0e03 	sbcs.w	lr, r5, r3
  40f0ca:	bf22      	ittt	cs
  40f0cc:	1ab6      	subcs	r6, r6, r2
  40f0ce:	4675      	movcs	r5, lr
  40f0d0:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
  40f0d4:	085b      	lsrs	r3, r3, #1
  40f0d6:	ea4f 0232 	mov.w	r2, r2, rrx
  40f0da:	ebb6 0e02 	subs.w	lr, r6, r2
  40f0de:	eb75 0e03 	sbcs.w	lr, r5, r3
  40f0e2:	bf22      	ittt	cs
  40f0e4:	1ab6      	subcs	r6, r6, r2
  40f0e6:	4675      	movcs	r5, lr
  40f0e8:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
  40f0ec:	ea55 0e06 	orrs.w	lr, r5, r6
  40f0f0:	d018      	beq.n	40f124 <__aeabi_ddiv+0x114>
  40f0f2:	ea4f 1505 	mov.w	r5, r5, lsl #4
  40f0f6:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
  40f0fa:	ea4f 1606 	mov.w	r6, r6, lsl #4
  40f0fe:	ea4f 03c3 	mov.w	r3, r3, lsl #3
  40f102:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
  40f106:	ea4f 02c2 	mov.w	r2, r2, lsl #3
  40f10a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
  40f10e:	d1c0      	bne.n	40f092 <__aeabi_ddiv+0x82>
  40f110:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  40f114:	d10b      	bne.n	40f12e <__aeabi_ddiv+0x11e>
  40f116:	ea41 0100 	orr.w	r1, r1, r0
  40f11a:	f04f 0000 	mov.w	r0, #0
  40f11e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
  40f122:	e7b6      	b.n	40f092 <__aeabi_ddiv+0x82>
  40f124:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  40f128:	bf04      	itt	eq
  40f12a:	4301      	orreq	r1, r0
  40f12c:	2000      	moveq	r0, #0
  40f12e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  40f132:	bf88      	it	hi
  40f134:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  40f138:	f63f aeaf 	bhi.w	40ee9a <__aeabi_dmul+0xde>
  40f13c:	ebb5 0c03 	subs.w	ip, r5, r3
  40f140:	bf04      	itt	eq
  40f142:	ebb6 0c02 	subseq.w	ip, r6, r2
  40f146:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  40f14a:	f150 0000 	adcs.w	r0, r0, #0
  40f14e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  40f152:	bd70      	pop	{r4, r5, r6, pc}
  40f154:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
  40f158:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
  40f15c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
  40f160:	bfc2      	ittt	gt
  40f162:	ebd4 050c 	rsbsgt	r5, r4, ip
  40f166:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  40f16a:	bd70      	popgt	{r4, r5, r6, pc}
  40f16c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  40f170:	f04f 0e00 	mov.w	lr, #0
  40f174:	3c01      	subs	r4, #1
  40f176:	e690      	b.n	40ee9a <__aeabi_dmul+0xde>
  40f178:	ea45 0e06 	orr.w	lr, r5, r6
  40f17c:	e68d      	b.n	40ee9a <__aeabi_dmul+0xde>
  40f17e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  40f182:	ea94 0f0c 	teq	r4, ip
  40f186:	bf08      	it	eq
  40f188:	ea95 0f0c 	teqeq	r5, ip
  40f18c:	f43f af3b 	beq.w	40f006 <__aeabi_dmul+0x24a>
  40f190:	ea94 0f0c 	teq	r4, ip
  40f194:	d10a      	bne.n	40f1ac <__aeabi_ddiv+0x19c>
  40f196:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  40f19a:	f47f af34 	bne.w	40f006 <__aeabi_dmul+0x24a>
  40f19e:	ea95 0f0c 	teq	r5, ip
  40f1a2:	f47f af25 	bne.w	40eff0 <__aeabi_dmul+0x234>
  40f1a6:	4610      	mov	r0, r2
  40f1a8:	4619      	mov	r1, r3
  40f1aa:	e72c      	b.n	40f006 <__aeabi_dmul+0x24a>
  40f1ac:	ea95 0f0c 	teq	r5, ip
  40f1b0:	d106      	bne.n	40f1c0 <__aeabi_ddiv+0x1b0>
  40f1b2:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  40f1b6:	f43f aefd 	beq.w	40efb4 <__aeabi_dmul+0x1f8>
  40f1ba:	4610      	mov	r0, r2
  40f1bc:	4619      	mov	r1, r3
  40f1be:	e722      	b.n	40f006 <__aeabi_dmul+0x24a>
  40f1c0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  40f1c4:	bf18      	it	ne
  40f1c6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  40f1ca:	f47f aec5 	bne.w	40ef58 <__aeabi_dmul+0x19c>
  40f1ce:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
  40f1d2:	f47f af0d 	bne.w	40eff0 <__aeabi_dmul+0x234>
  40f1d6:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
  40f1da:	f47f aeeb 	bne.w	40efb4 <__aeabi_dmul+0x1f8>
  40f1de:	e712      	b.n	40f006 <__aeabi_dmul+0x24a>

0040f1e0 <__aeabi_d2iz>:
  40f1e0:	ea4f 0241 	mov.w	r2, r1, lsl #1
  40f1e4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
  40f1e8:	d215      	bcs.n	40f216 <__aeabi_d2iz+0x36>
  40f1ea:	d511      	bpl.n	40f210 <__aeabi_d2iz+0x30>
  40f1ec:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
  40f1f0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
  40f1f4:	d912      	bls.n	40f21c <__aeabi_d2iz+0x3c>
  40f1f6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
  40f1fa:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
  40f1fe:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
  40f202:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  40f206:	fa23 f002 	lsr.w	r0, r3, r2
  40f20a:	bf18      	it	ne
  40f20c:	4240      	negne	r0, r0
  40f20e:	4770      	bx	lr
  40f210:	f04f 0000 	mov.w	r0, #0
  40f214:	4770      	bx	lr
  40f216:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
  40f21a:	d105      	bne.n	40f228 <__aeabi_d2iz+0x48>
  40f21c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
  40f220:	bf08      	it	eq
  40f222:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
  40f226:	4770      	bx	lr
  40f228:	f04f 0000 	mov.w	r0, #0
  40f22c:	4770      	bx	lr
  40f22e:	bf00      	nop

0040f230 <__aeabi_uldivmod>:
  40f230:	b953      	cbnz	r3, 40f248 <__aeabi_uldivmod+0x18>
  40f232:	b94a      	cbnz	r2, 40f248 <__aeabi_uldivmod+0x18>
  40f234:	2900      	cmp	r1, #0
  40f236:	bf08      	it	eq
  40f238:	2800      	cmpeq	r0, #0
  40f23a:	bf1c      	itt	ne
  40f23c:	f04f 31ff 	movne.w	r1, #4294967295
  40f240:	f04f 30ff 	movne.w	r0, #4294967295
  40f244:	f000 b83c 	b.w	40f2c0 <__aeabi_idiv0>
  40f248:	b082      	sub	sp, #8
  40f24a:	46ec      	mov	ip, sp
  40f24c:	e92d 5000 	stmdb	sp!, {ip, lr}
  40f250:	f000 f81e 	bl	40f290 <__gnu_uldivmod_helper>
  40f254:	f8dd e004 	ldr.w	lr, [sp, #4]
  40f258:	b002      	add	sp, #8
  40f25a:	bc0c      	pop	{r2, r3}
  40f25c:	4770      	bx	lr
  40f25e:	bf00      	nop

0040f260 <__gnu_ldivmod_helper>:
  40f260:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40f264:	9c06      	ldr	r4, [sp, #24]
  40f266:	4615      	mov	r5, r2
  40f268:	4606      	mov	r6, r0
  40f26a:	460f      	mov	r7, r1
  40f26c:	4698      	mov	r8, r3
  40f26e:	f000 f829 	bl	40f2c4 <__divdi3>
  40f272:	fb05 f301 	mul.w	r3, r5, r1
  40f276:	fb00 3808 	mla	r8, r0, r8, r3
  40f27a:	fba5 2300 	umull	r2, r3, r5, r0
  40f27e:	1ab2      	subs	r2, r6, r2
  40f280:	4443      	add	r3, r8
  40f282:	eb67 0303 	sbc.w	r3, r7, r3
  40f286:	e9c4 2300 	strd	r2, r3, [r4]
  40f28a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40f28e:	bf00      	nop

0040f290 <__gnu_uldivmod_helper>:
  40f290:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40f294:	9c06      	ldr	r4, [sp, #24]
  40f296:	4690      	mov	r8, r2
  40f298:	4606      	mov	r6, r0
  40f29a:	460f      	mov	r7, r1
  40f29c:	461d      	mov	r5, r3
  40f29e:	f000 f95f 	bl	40f560 <__udivdi3>
  40f2a2:	fb00 f505 	mul.w	r5, r0, r5
  40f2a6:	fba0 2308 	umull	r2, r3, r0, r8
  40f2aa:	fb08 5501 	mla	r5, r8, r1, r5
  40f2ae:	1ab2      	subs	r2, r6, r2
  40f2b0:	442b      	add	r3, r5
  40f2b2:	eb67 0303 	sbc.w	r3, r7, r3
  40f2b6:	e9c4 2300 	strd	r2, r3, [r4]
  40f2ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40f2be:	bf00      	nop

0040f2c0 <__aeabi_idiv0>:
  40f2c0:	4770      	bx	lr
  40f2c2:	bf00      	nop

0040f2c4 <__divdi3>:
  40f2c4:	2900      	cmp	r1, #0
  40f2c6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  40f2ca:	f2c0 80a6 	blt.w	40f41a <__divdi3+0x156>
  40f2ce:	2600      	movs	r6, #0
  40f2d0:	2b00      	cmp	r3, #0
  40f2d2:	f2c0 809c 	blt.w	40f40e <__divdi3+0x14a>
  40f2d6:	4688      	mov	r8, r1
  40f2d8:	4694      	mov	ip, r2
  40f2da:	469e      	mov	lr, r3
  40f2dc:	4615      	mov	r5, r2
  40f2de:	4604      	mov	r4, r0
  40f2e0:	460f      	mov	r7, r1
  40f2e2:	2b00      	cmp	r3, #0
  40f2e4:	d13d      	bne.n	40f362 <__divdi3+0x9e>
  40f2e6:	428a      	cmp	r2, r1
  40f2e8:	d959      	bls.n	40f39e <__divdi3+0xda>
  40f2ea:	fab2 f382 	clz	r3, r2
  40f2ee:	b13b      	cbz	r3, 40f300 <__divdi3+0x3c>
  40f2f0:	f1c3 0220 	rsb	r2, r3, #32
  40f2f4:	409f      	lsls	r7, r3
  40f2f6:	fa20 f202 	lsr.w	r2, r0, r2
  40f2fa:	409d      	lsls	r5, r3
  40f2fc:	4317      	orrs	r7, r2
  40f2fe:	409c      	lsls	r4, r3
  40f300:	0c29      	lsrs	r1, r5, #16
  40f302:	0c22      	lsrs	r2, r4, #16
  40f304:	fbb7 fef1 	udiv	lr, r7, r1
  40f308:	b2a8      	uxth	r0, r5
  40f30a:	fb01 771e 	mls	r7, r1, lr, r7
  40f30e:	ea42 4707 	orr.w	r7, r2, r7, lsl #16
  40f312:	fb00 f30e 	mul.w	r3, r0, lr
  40f316:	42bb      	cmp	r3, r7
  40f318:	d90a      	bls.n	40f330 <__divdi3+0x6c>
  40f31a:	197f      	adds	r7, r7, r5
  40f31c:	f10e 32ff 	add.w	r2, lr, #4294967295
  40f320:	f080 8105 	bcs.w	40f52e <__divdi3+0x26a>
  40f324:	42bb      	cmp	r3, r7
  40f326:	f240 8102 	bls.w	40f52e <__divdi3+0x26a>
  40f32a:	f1ae 0e02 	sub.w	lr, lr, #2
  40f32e:	442f      	add	r7, r5
  40f330:	1aff      	subs	r7, r7, r3
  40f332:	b2a4      	uxth	r4, r4
  40f334:	fbb7 f3f1 	udiv	r3, r7, r1
  40f338:	fb01 7713 	mls	r7, r1, r3, r7
  40f33c:	ea44 4707 	orr.w	r7, r4, r7, lsl #16
  40f340:	fb00 f003 	mul.w	r0, r0, r3
  40f344:	42b8      	cmp	r0, r7
  40f346:	d908      	bls.n	40f35a <__divdi3+0x96>
  40f348:	197f      	adds	r7, r7, r5
  40f34a:	f103 32ff 	add.w	r2, r3, #4294967295
  40f34e:	f080 80f0 	bcs.w	40f532 <__divdi3+0x26e>
  40f352:	42b8      	cmp	r0, r7
  40f354:	f240 80ed 	bls.w	40f532 <__divdi3+0x26e>
  40f358:	3b02      	subs	r3, #2
  40f35a:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
  40f35e:	2200      	movs	r2, #0
  40f360:	e003      	b.n	40f36a <__divdi3+0xa6>
  40f362:	428b      	cmp	r3, r1
  40f364:	d90f      	bls.n	40f386 <__divdi3+0xc2>
  40f366:	2200      	movs	r2, #0
  40f368:	4613      	mov	r3, r2
  40f36a:	1c34      	adds	r4, r6, #0
  40f36c:	bf18      	it	ne
  40f36e:	2401      	movne	r4, #1
  40f370:	4260      	negs	r0, r4
  40f372:	f04f 0500 	mov.w	r5, #0
  40f376:	eb65 0145 	sbc.w	r1, r5, r5, lsl #1
  40f37a:	4058      	eors	r0, r3
  40f37c:	4051      	eors	r1, r2
  40f37e:	1900      	adds	r0, r0, r4
  40f380:	4169      	adcs	r1, r5
  40f382:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  40f386:	fab3 f283 	clz	r2, r3
  40f38a:	2a00      	cmp	r2, #0
  40f38c:	f040 8086 	bne.w	40f49c <__divdi3+0x1d8>
  40f390:	428b      	cmp	r3, r1
  40f392:	d302      	bcc.n	40f39a <__divdi3+0xd6>
  40f394:	4584      	cmp	ip, r0
  40f396:	f200 80db 	bhi.w	40f550 <__divdi3+0x28c>
  40f39a:	2301      	movs	r3, #1
  40f39c:	e7e5      	b.n	40f36a <__divdi3+0xa6>
  40f39e:	b912      	cbnz	r2, 40f3a6 <__divdi3+0xe2>
  40f3a0:	2301      	movs	r3, #1
  40f3a2:	fbb3 f5f2 	udiv	r5, r3, r2
  40f3a6:	fab5 f085 	clz	r0, r5
  40f3aa:	2800      	cmp	r0, #0
  40f3ac:	d13b      	bne.n	40f426 <__divdi3+0x162>
  40f3ae:	1b78      	subs	r0, r7, r5
  40f3b0:	ea4f 4e15 	mov.w	lr, r5, lsr #16
  40f3b4:	fa1f fc85 	uxth.w	ip, r5
  40f3b8:	2201      	movs	r2, #1
  40f3ba:	fbb0 f8fe 	udiv	r8, r0, lr
  40f3be:	0c21      	lsrs	r1, r4, #16
  40f3c0:	fb0e 0718 	mls	r7, lr, r8, r0
  40f3c4:	ea41 4707 	orr.w	r7, r1, r7, lsl #16
  40f3c8:	fb0c f308 	mul.w	r3, ip, r8
  40f3cc:	42bb      	cmp	r3, r7
  40f3ce:	d907      	bls.n	40f3e0 <__divdi3+0x11c>
  40f3d0:	197f      	adds	r7, r7, r5
  40f3d2:	f108 31ff 	add.w	r1, r8, #4294967295
  40f3d6:	d202      	bcs.n	40f3de <__divdi3+0x11a>
  40f3d8:	42bb      	cmp	r3, r7
  40f3da:	f200 80bd 	bhi.w	40f558 <__divdi3+0x294>
  40f3de:	4688      	mov	r8, r1
  40f3e0:	1aff      	subs	r7, r7, r3
  40f3e2:	b2a4      	uxth	r4, r4
  40f3e4:	fbb7 f3fe 	udiv	r3, r7, lr
  40f3e8:	fb0e 7713 	mls	r7, lr, r3, r7
  40f3ec:	ea44 4707 	orr.w	r7, r4, r7, lsl #16
  40f3f0:	fb0c fc03 	mul.w	ip, ip, r3
  40f3f4:	45bc      	cmp	ip, r7
  40f3f6:	d907      	bls.n	40f408 <__divdi3+0x144>
  40f3f8:	197f      	adds	r7, r7, r5
  40f3fa:	f103 31ff 	add.w	r1, r3, #4294967295
  40f3fe:	d202      	bcs.n	40f406 <__divdi3+0x142>
  40f400:	45bc      	cmp	ip, r7
  40f402:	f200 80a7 	bhi.w	40f554 <__divdi3+0x290>
  40f406:	460b      	mov	r3, r1
  40f408:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
  40f40c:	e7ad      	b.n	40f36a <__divdi3+0xa6>
  40f40e:	4252      	negs	r2, r2
  40f410:	ea6f 0606 	mvn.w	r6, r6
  40f414:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
  40f418:	e75d      	b.n	40f2d6 <__divdi3+0x12>
  40f41a:	4240      	negs	r0, r0
  40f41c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  40f420:	f04f 36ff 	mov.w	r6, #4294967295
  40f424:	e754      	b.n	40f2d0 <__divdi3+0xc>
  40f426:	f1c0 0220 	rsb	r2, r0, #32
  40f42a:	fa24 f102 	lsr.w	r1, r4, r2
  40f42e:	fa07 f300 	lsl.w	r3, r7, r0
  40f432:	4085      	lsls	r5, r0
  40f434:	ea4f 4e15 	mov.w	lr, r5, lsr #16
  40f438:	40d7      	lsrs	r7, r2
  40f43a:	4319      	orrs	r1, r3
  40f43c:	fbb7 f2fe 	udiv	r2, r7, lr
  40f440:	0c0b      	lsrs	r3, r1, #16
  40f442:	fb0e 7712 	mls	r7, lr, r2, r7
  40f446:	fa1f fc85 	uxth.w	ip, r5
  40f44a:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
  40f44e:	fb0c f702 	mul.w	r7, ip, r2
  40f452:	429f      	cmp	r7, r3
  40f454:	fa04 f400 	lsl.w	r4, r4, r0
  40f458:	d907      	bls.n	40f46a <__divdi3+0x1a6>
  40f45a:	195b      	adds	r3, r3, r5
  40f45c:	f102 30ff 	add.w	r0, r2, #4294967295
  40f460:	d274      	bcs.n	40f54c <__divdi3+0x288>
  40f462:	429f      	cmp	r7, r3
  40f464:	d972      	bls.n	40f54c <__divdi3+0x288>
  40f466:	3a02      	subs	r2, #2
  40f468:	442b      	add	r3, r5
  40f46a:	1bdf      	subs	r7, r3, r7
  40f46c:	b289      	uxth	r1, r1
  40f46e:	fbb7 f8fe 	udiv	r8, r7, lr
  40f472:	fb0e 7318 	mls	r3, lr, r8, r7
  40f476:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
  40f47a:	fb0c f708 	mul.w	r7, ip, r8
  40f47e:	429f      	cmp	r7, r3
  40f480:	d908      	bls.n	40f494 <__divdi3+0x1d0>
  40f482:	195b      	adds	r3, r3, r5
  40f484:	f108 31ff 	add.w	r1, r8, #4294967295
  40f488:	d25c      	bcs.n	40f544 <__divdi3+0x280>
  40f48a:	429f      	cmp	r7, r3
  40f48c:	d95a      	bls.n	40f544 <__divdi3+0x280>
  40f48e:	f1a8 0802 	sub.w	r8, r8, #2
  40f492:	442b      	add	r3, r5
  40f494:	1bd8      	subs	r0, r3, r7
  40f496:	ea48 4202 	orr.w	r2, r8, r2, lsl #16
  40f49a:	e78e      	b.n	40f3ba <__divdi3+0xf6>
  40f49c:	f1c2 0320 	rsb	r3, r2, #32
  40f4a0:	fa2c f103 	lsr.w	r1, ip, r3
  40f4a4:	fa0e fe02 	lsl.w	lr, lr, r2
  40f4a8:	fa20 f703 	lsr.w	r7, r0, r3
  40f4ac:	ea41 0e0e 	orr.w	lr, r1, lr
  40f4b0:	fa08 f002 	lsl.w	r0, r8, r2
  40f4b4:	fa28 f103 	lsr.w	r1, r8, r3
  40f4b8:	ea4f 451e 	mov.w	r5, lr, lsr #16
  40f4bc:	4338      	orrs	r0, r7
  40f4be:	fbb1 f8f5 	udiv	r8, r1, r5
  40f4c2:	0c03      	lsrs	r3, r0, #16
  40f4c4:	fb05 1118 	mls	r1, r5, r8, r1
  40f4c8:	fa1f f78e 	uxth.w	r7, lr
  40f4cc:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
  40f4d0:	fb07 f308 	mul.w	r3, r7, r8
  40f4d4:	428b      	cmp	r3, r1
  40f4d6:	fa0c fc02 	lsl.w	ip, ip, r2
  40f4da:	d909      	bls.n	40f4f0 <__divdi3+0x22c>
  40f4dc:	eb11 010e 	adds.w	r1, r1, lr
  40f4e0:	f108 39ff 	add.w	r9, r8, #4294967295
  40f4e4:	d230      	bcs.n	40f548 <__divdi3+0x284>
  40f4e6:	428b      	cmp	r3, r1
  40f4e8:	d92e      	bls.n	40f548 <__divdi3+0x284>
  40f4ea:	f1a8 0802 	sub.w	r8, r8, #2
  40f4ee:	4471      	add	r1, lr
  40f4f0:	1ac9      	subs	r1, r1, r3
  40f4f2:	b280      	uxth	r0, r0
  40f4f4:	fbb1 f3f5 	udiv	r3, r1, r5
  40f4f8:	fb05 1113 	mls	r1, r5, r3, r1
  40f4fc:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
  40f500:	fb07 f703 	mul.w	r7, r7, r3
  40f504:	428f      	cmp	r7, r1
  40f506:	d908      	bls.n	40f51a <__divdi3+0x256>
  40f508:	eb11 010e 	adds.w	r1, r1, lr
  40f50c:	f103 30ff 	add.w	r0, r3, #4294967295
  40f510:	d216      	bcs.n	40f540 <__divdi3+0x27c>
  40f512:	428f      	cmp	r7, r1
  40f514:	d914      	bls.n	40f540 <__divdi3+0x27c>
  40f516:	3b02      	subs	r3, #2
  40f518:	4471      	add	r1, lr
  40f51a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
  40f51e:	1bc9      	subs	r1, r1, r7
  40f520:	fba3 890c 	umull	r8, r9, r3, ip
  40f524:	4549      	cmp	r1, r9
  40f526:	d309      	bcc.n	40f53c <__divdi3+0x278>
  40f528:	d005      	beq.n	40f536 <__divdi3+0x272>
  40f52a:	2200      	movs	r2, #0
  40f52c:	e71d      	b.n	40f36a <__divdi3+0xa6>
  40f52e:	4696      	mov	lr, r2
  40f530:	e6fe      	b.n	40f330 <__divdi3+0x6c>
  40f532:	4613      	mov	r3, r2
  40f534:	e711      	b.n	40f35a <__divdi3+0x96>
  40f536:	4094      	lsls	r4, r2
  40f538:	4544      	cmp	r4, r8
  40f53a:	d2f6      	bcs.n	40f52a <__divdi3+0x266>
  40f53c:	3b01      	subs	r3, #1
  40f53e:	e7f4      	b.n	40f52a <__divdi3+0x266>
  40f540:	4603      	mov	r3, r0
  40f542:	e7ea      	b.n	40f51a <__divdi3+0x256>
  40f544:	4688      	mov	r8, r1
  40f546:	e7a5      	b.n	40f494 <__divdi3+0x1d0>
  40f548:	46c8      	mov	r8, r9
  40f54a:	e7d1      	b.n	40f4f0 <__divdi3+0x22c>
  40f54c:	4602      	mov	r2, r0
  40f54e:	e78c      	b.n	40f46a <__divdi3+0x1a6>
  40f550:	4613      	mov	r3, r2
  40f552:	e70a      	b.n	40f36a <__divdi3+0xa6>
  40f554:	3b02      	subs	r3, #2
  40f556:	e757      	b.n	40f408 <__divdi3+0x144>
  40f558:	f1a8 0802 	sub.w	r8, r8, #2
  40f55c:	442f      	add	r7, r5
  40f55e:	e73f      	b.n	40f3e0 <__divdi3+0x11c>

0040f560 <__udivdi3>:
  40f560:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40f564:	2b00      	cmp	r3, #0
  40f566:	d144      	bne.n	40f5f2 <__udivdi3+0x92>
  40f568:	428a      	cmp	r2, r1
  40f56a:	4615      	mov	r5, r2
  40f56c:	4604      	mov	r4, r0
  40f56e:	d94f      	bls.n	40f610 <__udivdi3+0xb0>
  40f570:	fab2 f782 	clz	r7, r2
  40f574:	460e      	mov	r6, r1
  40f576:	b14f      	cbz	r7, 40f58c <__udivdi3+0x2c>
  40f578:	f1c7 0320 	rsb	r3, r7, #32
  40f57c:	40b9      	lsls	r1, r7
  40f57e:	fa20 f603 	lsr.w	r6, r0, r3
  40f582:	fa02 f507 	lsl.w	r5, r2, r7
  40f586:	430e      	orrs	r6, r1
  40f588:	fa00 f407 	lsl.w	r4, r0, r7
  40f58c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
  40f590:	0c23      	lsrs	r3, r4, #16
  40f592:	fbb6 f0fe 	udiv	r0, r6, lr
  40f596:	b2af      	uxth	r7, r5
  40f598:	fb0e 6110 	mls	r1, lr, r0, r6
  40f59c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
  40f5a0:	fb07 f100 	mul.w	r1, r7, r0
  40f5a4:	4299      	cmp	r1, r3
  40f5a6:	d909      	bls.n	40f5bc <__udivdi3+0x5c>
  40f5a8:	195b      	adds	r3, r3, r5
  40f5aa:	f100 32ff 	add.w	r2, r0, #4294967295
  40f5ae:	f080 80ec 	bcs.w	40f78a <__udivdi3+0x22a>
  40f5b2:	4299      	cmp	r1, r3
  40f5b4:	f240 80e9 	bls.w	40f78a <__udivdi3+0x22a>
  40f5b8:	3802      	subs	r0, #2
  40f5ba:	442b      	add	r3, r5
  40f5bc:	1a5a      	subs	r2, r3, r1
  40f5be:	b2a4      	uxth	r4, r4
  40f5c0:	fbb2 f3fe 	udiv	r3, r2, lr
  40f5c4:	fb0e 2213 	mls	r2, lr, r3, r2
  40f5c8:	ea44 4202 	orr.w	r2, r4, r2, lsl #16
  40f5cc:	fb07 f703 	mul.w	r7, r7, r3
  40f5d0:	4297      	cmp	r7, r2
  40f5d2:	d908      	bls.n	40f5e6 <__udivdi3+0x86>
  40f5d4:	1952      	adds	r2, r2, r5
  40f5d6:	f103 31ff 	add.w	r1, r3, #4294967295
  40f5da:	f080 80d8 	bcs.w	40f78e <__udivdi3+0x22e>
  40f5de:	4297      	cmp	r7, r2
  40f5e0:	f240 80d5 	bls.w	40f78e <__udivdi3+0x22e>
  40f5e4:	3b02      	subs	r3, #2
  40f5e6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
  40f5ea:	2600      	movs	r6, #0
  40f5ec:	4631      	mov	r1, r6
  40f5ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40f5f2:	428b      	cmp	r3, r1
  40f5f4:	d847      	bhi.n	40f686 <__udivdi3+0x126>
  40f5f6:	fab3 f683 	clz	r6, r3
  40f5fa:	2e00      	cmp	r6, #0
  40f5fc:	d148      	bne.n	40f690 <__udivdi3+0x130>
  40f5fe:	428b      	cmp	r3, r1
  40f600:	d302      	bcc.n	40f608 <__udivdi3+0xa8>
  40f602:	4282      	cmp	r2, r0
  40f604:	f200 80cd 	bhi.w	40f7a2 <__udivdi3+0x242>
  40f608:	2001      	movs	r0, #1
  40f60a:	4631      	mov	r1, r6
  40f60c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40f610:	b912      	cbnz	r2, 40f618 <__udivdi3+0xb8>
  40f612:	2501      	movs	r5, #1
  40f614:	fbb5 f5f2 	udiv	r5, r5, r2
  40f618:	fab5 f885 	clz	r8, r5
  40f61c:	f1b8 0f00 	cmp.w	r8, #0
  40f620:	d177      	bne.n	40f712 <__udivdi3+0x1b2>
  40f622:	1b4a      	subs	r2, r1, r5
  40f624:	ea4f 4e15 	mov.w	lr, r5, lsr #16
  40f628:	b2af      	uxth	r7, r5
  40f62a:	2601      	movs	r6, #1
  40f62c:	fbb2 f0fe 	udiv	r0, r2, lr
  40f630:	0c23      	lsrs	r3, r4, #16
  40f632:	fb0e 2110 	mls	r1, lr, r0, r2
  40f636:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
  40f63a:	fb07 f300 	mul.w	r3, r7, r0
  40f63e:	428b      	cmp	r3, r1
  40f640:	d907      	bls.n	40f652 <__udivdi3+0xf2>
  40f642:	1949      	adds	r1, r1, r5
  40f644:	f100 32ff 	add.w	r2, r0, #4294967295
  40f648:	d202      	bcs.n	40f650 <__udivdi3+0xf0>
  40f64a:	428b      	cmp	r3, r1
  40f64c:	f200 80ba 	bhi.w	40f7c4 <__udivdi3+0x264>
  40f650:	4610      	mov	r0, r2
  40f652:	1ac9      	subs	r1, r1, r3
  40f654:	b2a4      	uxth	r4, r4
  40f656:	fbb1 f3fe 	udiv	r3, r1, lr
  40f65a:	fb0e 1113 	mls	r1, lr, r3, r1
  40f65e:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
  40f662:	fb07 f703 	mul.w	r7, r7, r3
  40f666:	42a7      	cmp	r7, r4
  40f668:	d908      	bls.n	40f67c <__udivdi3+0x11c>
  40f66a:	1964      	adds	r4, r4, r5
  40f66c:	f103 32ff 	add.w	r2, r3, #4294967295
  40f670:	f080 808f 	bcs.w	40f792 <__udivdi3+0x232>
  40f674:	42a7      	cmp	r7, r4
  40f676:	f240 808c 	bls.w	40f792 <__udivdi3+0x232>
  40f67a:	3b02      	subs	r3, #2
  40f67c:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
  40f680:	4631      	mov	r1, r6
  40f682:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40f686:	2600      	movs	r6, #0
  40f688:	4630      	mov	r0, r6
  40f68a:	4631      	mov	r1, r6
  40f68c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40f690:	f1c6 0420 	rsb	r4, r6, #32
  40f694:	fa22 f504 	lsr.w	r5, r2, r4
  40f698:	40b3      	lsls	r3, r6
  40f69a:	432b      	orrs	r3, r5
  40f69c:	fa20 fc04 	lsr.w	ip, r0, r4
  40f6a0:	fa01 f706 	lsl.w	r7, r1, r6
  40f6a4:	fa21 f504 	lsr.w	r5, r1, r4
  40f6a8:	ea4f 4e13 	mov.w	lr, r3, lsr #16
  40f6ac:	ea4c 0707 	orr.w	r7, ip, r7
  40f6b0:	fbb5 f8fe 	udiv	r8, r5, lr
  40f6b4:	0c39      	lsrs	r1, r7, #16
  40f6b6:	fb0e 5518 	mls	r5, lr, r8, r5
  40f6ba:	fa1f fc83 	uxth.w	ip, r3
  40f6be:	ea41 4505 	orr.w	r5, r1, r5, lsl #16
  40f6c2:	fb0c f108 	mul.w	r1, ip, r8
  40f6c6:	42a9      	cmp	r1, r5
  40f6c8:	fa02 f206 	lsl.w	r2, r2, r6
  40f6cc:	d904      	bls.n	40f6d8 <__udivdi3+0x178>
  40f6ce:	18ed      	adds	r5, r5, r3
  40f6d0:	f108 34ff 	add.w	r4, r8, #4294967295
  40f6d4:	d367      	bcc.n	40f7a6 <__udivdi3+0x246>
  40f6d6:	46a0      	mov	r8, r4
  40f6d8:	1a6d      	subs	r5, r5, r1
  40f6da:	b2bf      	uxth	r7, r7
  40f6dc:	fbb5 f4fe 	udiv	r4, r5, lr
  40f6e0:	fb0e 5514 	mls	r5, lr, r4, r5
  40f6e4:	ea47 4105 	orr.w	r1, r7, r5, lsl #16
  40f6e8:	fb0c fc04 	mul.w	ip, ip, r4
  40f6ec:	458c      	cmp	ip, r1
  40f6ee:	d904      	bls.n	40f6fa <__udivdi3+0x19a>
  40f6f0:	18c9      	adds	r1, r1, r3
  40f6f2:	f104 35ff 	add.w	r5, r4, #4294967295
  40f6f6:	d35c      	bcc.n	40f7b2 <__udivdi3+0x252>
  40f6f8:	462c      	mov	r4, r5
  40f6fa:	ea44 4408 	orr.w	r4, r4, r8, lsl #16
  40f6fe:	ebcc 0101 	rsb	r1, ip, r1
  40f702:	fba4 2302 	umull	r2, r3, r4, r2
  40f706:	4299      	cmp	r1, r3
  40f708:	d348      	bcc.n	40f79c <__udivdi3+0x23c>
  40f70a:	d044      	beq.n	40f796 <__udivdi3+0x236>
  40f70c:	4620      	mov	r0, r4
  40f70e:	2600      	movs	r6, #0
  40f710:	e76c      	b.n	40f5ec <__udivdi3+0x8c>
  40f712:	f1c8 0420 	rsb	r4, r8, #32
  40f716:	fa01 f308 	lsl.w	r3, r1, r8
  40f71a:	fa05 f508 	lsl.w	r5, r5, r8
  40f71e:	fa20 f704 	lsr.w	r7, r0, r4
  40f722:	40e1      	lsrs	r1, r4
  40f724:	ea4f 4e15 	mov.w	lr, r5, lsr #16
  40f728:	431f      	orrs	r7, r3
  40f72a:	fbb1 f6fe 	udiv	r6, r1, lr
  40f72e:	0c3a      	lsrs	r2, r7, #16
  40f730:	fb0e 1116 	mls	r1, lr, r6, r1
  40f734:	fa1f fc85 	uxth.w	ip, r5
  40f738:	ea42 4301 	orr.w	r3, r2, r1, lsl #16
  40f73c:	fb0c f206 	mul.w	r2, ip, r6
  40f740:	429a      	cmp	r2, r3
  40f742:	fa00 f408 	lsl.w	r4, r0, r8
  40f746:	d907      	bls.n	40f758 <__udivdi3+0x1f8>
  40f748:	195b      	adds	r3, r3, r5
  40f74a:	f106 31ff 	add.w	r1, r6, #4294967295
  40f74e:	d237      	bcs.n	40f7c0 <__udivdi3+0x260>
  40f750:	429a      	cmp	r2, r3
  40f752:	d935      	bls.n	40f7c0 <__udivdi3+0x260>
  40f754:	3e02      	subs	r6, #2
  40f756:	442b      	add	r3, r5
  40f758:	1a9b      	subs	r3, r3, r2
  40f75a:	b2bf      	uxth	r7, r7
  40f75c:	fbb3 f0fe 	udiv	r0, r3, lr
  40f760:	fb0e 3310 	mls	r3, lr, r0, r3
  40f764:	ea47 4303 	orr.w	r3, r7, r3, lsl #16
  40f768:	fb0c f100 	mul.w	r1, ip, r0
  40f76c:	4299      	cmp	r1, r3
  40f76e:	d907      	bls.n	40f780 <__udivdi3+0x220>
  40f770:	195b      	adds	r3, r3, r5
  40f772:	f100 32ff 	add.w	r2, r0, #4294967295
  40f776:	d221      	bcs.n	40f7bc <__udivdi3+0x25c>
  40f778:	4299      	cmp	r1, r3
  40f77a:	d91f      	bls.n	40f7bc <__udivdi3+0x25c>
  40f77c:	3802      	subs	r0, #2
  40f77e:	442b      	add	r3, r5
  40f780:	1a5a      	subs	r2, r3, r1
  40f782:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
  40f786:	4667      	mov	r7, ip
  40f788:	e750      	b.n	40f62c <__udivdi3+0xcc>
  40f78a:	4610      	mov	r0, r2
  40f78c:	e716      	b.n	40f5bc <__udivdi3+0x5c>
  40f78e:	460b      	mov	r3, r1
  40f790:	e729      	b.n	40f5e6 <__udivdi3+0x86>
  40f792:	4613      	mov	r3, r2
  40f794:	e772      	b.n	40f67c <__udivdi3+0x11c>
  40f796:	40b0      	lsls	r0, r6
  40f798:	4290      	cmp	r0, r2
  40f79a:	d2b7      	bcs.n	40f70c <__udivdi3+0x1ac>
  40f79c:	1e60      	subs	r0, r4, #1
  40f79e:	2600      	movs	r6, #0
  40f7a0:	e724      	b.n	40f5ec <__udivdi3+0x8c>
  40f7a2:	4630      	mov	r0, r6
  40f7a4:	e722      	b.n	40f5ec <__udivdi3+0x8c>
  40f7a6:	42a9      	cmp	r1, r5
  40f7a8:	d995      	bls.n	40f6d6 <__udivdi3+0x176>
  40f7aa:	f1a8 0802 	sub.w	r8, r8, #2
  40f7ae:	441d      	add	r5, r3
  40f7b0:	e792      	b.n	40f6d8 <__udivdi3+0x178>
  40f7b2:	458c      	cmp	ip, r1
  40f7b4:	d9a0      	bls.n	40f6f8 <__udivdi3+0x198>
  40f7b6:	3c02      	subs	r4, #2
  40f7b8:	4419      	add	r1, r3
  40f7ba:	e79e      	b.n	40f6fa <__udivdi3+0x19a>
  40f7bc:	4610      	mov	r0, r2
  40f7be:	e7df      	b.n	40f780 <__udivdi3+0x220>
  40f7c0:	460e      	mov	r6, r1
  40f7c2:	e7c9      	b.n	40f758 <__udivdi3+0x1f8>
  40f7c4:	3802      	subs	r0, #2
  40f7c6:	4429      	add	r1, r5
  40f7c8:	e743      	b.n	40f652 <__udivdi3+0xf2>
  40f7ca:	bf00      	nop
  40f7cc:	3737564f 	.word	0x3737564f
  40f7d0:	69203034 	.word	0x69203034
  40f7d4:	6567616d 	.word	0x6567616d
  40f7d8:	6e657320 	.word	0x6e657320
  40f7dc:	0a726f73 	.word	0x0a726f73
  40f7e0:	74706163 	.word	0x74706163
  40f7e4:	20657275 	.word	0x20657275
  40f7e8:	6d617865 	.word	0x6d617865
  40f7ec:	00656c70 	.word	0x00656c70
  40f7f0:	61656c50 	.word	0x61656c50
  40f7f4:	57206573 	.word	0x57206573
  40f7f8:	20746961 	.word	0x20746961
  40f7fc:	69727564 	.word	0x69727564
  40f800:	0a20676e 	.word	0x0a20676e
  40f804:	74696e69 	.word	0x74696e69
  40f808:	696c6169 	.word	0x696c6169
  40f80c:	6974617a 	.word	0x6974617a
  40f810:	00006e6f 	.word	0x00006e6f
  40f814:	61656c50 	.word	0x61656c50
  40f818:	50206573 	.word	0x50206573
  40f81c:	73736572 	.word	0x73736572
  40f820:	74756220 	.word	0x74756220
  40f824:	0a6e6f74 	.word	0x0a6e6f74
  40f828:	73206f74 	.word	0x73206f74
  40f82c:	74726174 	.word	0x74726174
  40f830:	6f727020 	.word	0x6f727020
  40f834:	73736563 	.word	0x73736563
  40f838:	0a676e69 	.word	0x0a676e69
  40f83c:	72616220 	.word	0x72616220
  40f840:	65646f63 	.word	0x65646f63
  40f844:	00000073 	.word	0x00000073
  40f848:	6d207525 	.word	0x6d207525
  40f84c:	00000073 	.word	0x00000073
  40f850:	73657250 	.word	0x73657250
  40f854:	75622073 	.word	0x75622073
  40f858:	6e6f7474 	.word	0x6e6f7474
  40f85c:	206f740a 	.word	0x206f740a
  40f860:	72617473 	.word	0x72617473
  40f864:	65642074 	.word	0x65642074
  40f868:	69646f63 	.word	0x69646f63
  40f86c:	0a20676e 	.word	0x0a20676e
  40f870:	68617262 	.word	0x68617262
  40f874:	00000021 	.word	0x00000021

0040f878 <CSWTCH.27>:
  40f878:	0040fe48 0040fa80 0040fd58 0041002c     H.@...@.X.@.,.A.
  40f888:	0040fb70 0040ff38 0040f98c 0040fc64     p.@.8.@...@.d.@.
  40f898:	0040f89c                                ..@.

0040f89c <OV7740_VGA_YUV422_20FPS>:
  40f89c:	8012000e 001305fe 00120211 d40c10d5     ................
  40f8ac:	0116340d a0182517 f01a0319 0322891b     .4...%........".
  40f8bc:	f82b1829 a031012c c433f032 3f36b43a     ).+.,.1.2.3.:.6?
  40f8cc:	80276004 803e0f3d 7f40403f 29426a41     .`'.=.>.?@@.AjB)
  40f8dc:	4145e544 64490247 704ba14a 504d1a4c     D.EAG.IdJ.KpL.MP
  40f8ec:	0064134e 1a688867 3c243814 72263025     N.d.g.h..8$<%0&r
  40f8fc:	7e519750 00530052 23210020 00e91438     P.Q~R.S. .!#8...
  40f90c:	ff575556 ff59ff58 00ec045f 7f80ff13     VUW.X.Y._.......
  40f91c:	32823f81 11380183 03860085 05880187     .?.2..8.........
  40f92c:	308d3089 3093858f 30998595 089c859b     .0.0...0...0....
  40f93c:	239e129d 55a0459f 72a264a1 8ba47fa3     ...#.E.U.d.r....
  40f94c:	a7a695a5 cba8b5a7 ecaadda9 78ce1aab     ...............x
  40f95c:	0ad06ecf 84d20cd1 1ed490d3 1f5b245a     .n..........Z$[.
  40f96c:	605d885c ffbe6eac a03100bf 3f82f032     \.]`.n....1.2..?
  40f97c:	3f360012 c4330053 0322891b ffff0228     ..6?S.3...".(...

0040f98c <OV7740_QQVGA_RGB888>:
  40f98c:	8012000e 01110013 10d50012 340d120c     ...............4
  40f99c:	a0182517 f01a0319 0322891b f82b1829     .%........".).+.
  40f9ac:	a031012c c433f032 3f36b43a 80276004     ,.1.2.3.:.6?.`'.
  40f9bc:	803e0f3d 7f40403f 29426a41 4145e544     =.>.?@@.AjB)D.EA
  40f9cc:	64490247 704ba14a 504d1a4c 0064134e     G.IdJ.KpL.MPN.d.
  40f9dc:	1a688867 3c243814 72263025 7e519750     g.h..8$<%0&rP.Q~
  40f9ec:	00530052 23210020 00e91438 ff575556     R.S. .!#8...VUW.
  40f9fc:	ff59ff58 00ec045f 7f80ff13 32823f81     X.Y._........?.2
  40fa0c:	11380183 00857084 01870386 30890588     ..8..p.........0
  40fa1c:	858f308d 85953093 859b3099 129d089c     .0...0...0......
  40fa2c:	459f239e 64a155a0 7fa372a2 95a58ba4     .#.E.U.d.r......
  40fa3c:	b5a7a7a6 dda9cba8 1aabecaa 6ecf78ce     .............x.n
  40fa4c:	0cd10ad0 90d384d2 245a1ed4 885c1f5b     ..........Z$[.\.
  40fa5c:	6eac605d 00bfffbe 3c322831 01123f82     ]`.n....1(2<.?..
  40fa6c:	04832f36 f4330053 03228a1b 00840084     6/..S.3...".....
  40fa7c:	ffff0228                                (...

0040fa80 <OV7740_QVGA_YUV422_15FPS>:
  40fa80:	8012000e 001305fe 00120311 d40c10d5     ................
  40fa90:	0116340d a0182517 f01a0319 0322891b     .4...%........".
  40faa0:	f82b1829 a031012c c433f032 3f36b43a     ).+.,.1.2.3.:.6?
  40fab0:	80276004 803e0f3d 7f40403f 29426a41     .`'.=.>.?@@.AjB)
  40fac0:	4145e544 64490247 704ba14a 504d1a4c     D.EAG.IdJ.KpL.MP
  40fad0:	0064134e 1a688867 3c243814 72263025     N.d.g.h..8$<%0&r
  40fae0:	7e519750 00530052 23210020 00e91438     P.Q~R.S. .!#8...
  40faf0:	ff575556 ff59ff58 00ec045f 7f80ff13     VUW.X.Y._.......
  40fb00:	32823f81 11380183 03860085 05880187     .?.2..8.........
  40fb10:	308d3089 3093858f 30998595 089c859b     .0.0...0...0....
  40fb20:	239e129d 55a0459f 72a264a1 8ba47fa3     ...#.E.U.d.r....
  40fb30:	a7a695a5 cba8b5a7 ecaadda9 78ce1aab     ...............x
  40fb40:	0ad06ecf 84d20cd1 1ed490d3 1f5b245a     .n..........Z$[.
  40fb50:	605d885c ffbe6eac 503100bf 3f827832     \.]`.n....1P2x.?
  40fb60:	3f360012 c4330053 0322891b ffff0228     ..6?S.3...".(...

0040fb70 <OV7740_QVGA_RGB888>:
  40fb70:	8012000e 01110013 10d50012 340d120c     ...............4
  40fb80:	a0182517 f01a0319 0322891b f82b1829     .%........".).+.
  40fb90:	a031012c c433f032 3f36b43a 80276004     ,.1.2.3.:.6?.`'.
  40fba0:	803e0f3d 7f40403f 29426a41 4145e544     =.>.?@@.AjB)D.EA
  40fbb0:	64490247 704ba14a 504d1a4c 0064134e     G.IdJ.KpL.MPN.d.
  40fbc0:	1a688867 3c243814 72263025 7e519750     g.h..8$<%0&rP.Q~
  40fbd0:	00530052 23210020 00e91438 ff575556     R.S. .!#8...VUW.
  40fbe0:	ff59ff58 00ec045f 7f80ff13 32823f81     X.Y._........?.2
  40fbf0:	11380183 00857084 01870386 30890588     ..8..p.........0
  40fc00:	858f308d 85953093 859b3099 129d089c     .0...0...0......
  40fc10:	459f239e 64a155a0 7fa372a2 95a58ba4     .#.E.U.d.r......
  40fc20:	b5a7a7a6 dda9cba8 1aabecaa 6ecf78ce     .............x.n
  40fc30:	0cd10ad0 90d384d2 245a1ed4 885c1f5b     ..........Z$[.\.
  40fc40:	6eac605d 00bfffbe 78325031 01123f82     ]`.n....1P2x.?..
  40fc50:	04832f36 f4330053 03228a1b 00840084     6/..S.3...".....
  40fc60:	ffff0228                                (...

0040fc64 <OV7740_TEST_PATTERN>:
  40fc64:	8012000e 001305fe 00120211 d40c10d5     ................
  40fc74:	0116340d a0182517 f01a0319 0322891b     .4...%........".
  40fc84:	f82b1829 a031012c c433f032 3f36b43a     ).+.,.1.2.3.:.6?
  40fc94:	80276004 803e0f3d 7f40403f 29426a41     .`'.=.>.?@@.AjB)
  40fca4:	4145e544 64490247 704ba14a 504d1a4c     D.EAG.IdJ.KpL.MP
  40fcb4:	0064134e 1a688867 3c243814 72263025     N.d.g.h..8$<%0&r
  40fcc4:	7e519750 00530052 23210020 02840738     P.Q~R.S. .!#8...
  40fcd4:	00e91438 ff575556 ff59ff58 00ec045f     8...VUW.X.Y._...
  40fce4:	7f80ff13 32823f81 11380183 03860085     .....?.2..8.....
  40fcf4:	05880187 308d3089 3093858f 30998595     .....0.0...0...0
  40fd04:	089c859b 239e129d 55a0459f 72a264a1     .......#.E.U.d.r
  40fd14:	8ba47fa3 a7a695a5 cba8b5a7 ecaadda9     ................
  40fd24:	78ce1aab 0ad06ecf 84d20cd1 1ed490d3     ...x.n..........
  40fd34:	1f5b245a 605d885c ffbe6eac 503100bf     Z$[.\.]`.n....1P
  40fd44:	3f827832 3f360012 c4330053 0322891b     2x.?..6?S.3...".
  40fd54:	ffff0228                                (...

0040fd58 <OV7740_QVGA_YUV422_20FPS>:
  40fd58:	8012000e 001305fe 00120211 d40c10d5     ................
  40fd68:	0116340d a0182517 f01a0319 0322891b     .4...%........".
  40fd78:	f82b1829 a031012c c433f032 3f36b43a     ).+.,.1.2.3.:.6?
  40fd88:	80276004 803e0f3d 7f40403f 29426a41     .`'.=.>.?@@.AjB)
  40fd98:	4145e544 64490247 704ba14a 504d1a4c     D.EAG.IdJ.KpL.MP
  40fda8:	0064134e 1a688867 3c243814 72263025     N.d.g.h..8$<%0&r
  40fdb8:	7e519750 00530052 23210020 00e91438     P.Q~R.S. .!#8...
  40fdc8:	ff575556 ff59ff58 00ec045f 7f80ff13     VUW.X.Y._.......
  40fdd8:	32823f81 11380183 03860085 05880187     .?.2..8.........
  40fde8:	308d3089 3093858f 30998595 089c859b     .0.0...0...0....
  40fdf8:	239e129d 55a0459f 72a264a1 8ba47fa3     ...#.E.U.d.r....
  40fe08:	a7a695a5 cba8b5a7 ecaadda9 78ce1aab     ...............x
  40fe18:	0ad06ecf 84d20cd1 1ed490d3 1f5b245a     .n..........Z$[.
  40fe28:	605d885c ffbe6eac 503100bf 3f827832     \.]`.n....1P2x.?
  40fe38:	3f360012 c4330053 0322891b ffff0228     ..6?S.3...".(...

0040fe48 <OV7740_QVGA_YUV422_10FPS>:
  40fe48:	8012000e 001305fe 00120511 d40c10d5     ................
  40fe58:	0116340d a0182517 f01a0319 0322891b     .4...%........".
  40fe68:	f82b1829 a031012c c433f032 3f36b43a     ).+.,.1.2.3.:.6?
  40fe78:	80276004 803e0f3d 7f40403f 29426a41     .`'.=.>.?@@.AjB)
  40fe88:	4145e544 64490247 704ba14a 504d1a4c     D.EAG.IdJ.KpL.MP
  40fe98:	0064134e 1a688867 3c243814 72263025     N.d.g.h..8$<%0&r
  40fea8:	7e519750 00530052 23210020 00e91438     P.Q~R.S. .!#8...
  40feb8:	ff575556 ff59ff58 00ec045f 7f80ff13     VUW.X.Y._.......
  40fec8:	32823f81 11380183 03860085 05880187     .?.2..8.........
  40fed8:	308d3089 3093858f 30998595 089c859b     .0.0...0...0....
  40fee8:	239e129d 55a0459f 72a264a1 8ba47fa3     ...#.E.U.d.r....
  40fef8:	a7a695a5 cba8b5a7 ecaadda9 78ce1aab     ...............x
  40ff08:	0ad06ecf 84d20cd1 1ed490d3 1f5b245a     .n..........Z$[.
  40ff18:	605d885c ffbe6eac 503100bf 3f827832     \.]`.n....1P2x.?
  40ff28:	3f360012 c4330053 0322891b ffff0228     ..6?S.3...".(...

0040ff38 <OV7740_QQVGA_YUV422>:
  40ff38:	8012000e 01110013 10d50012 340d540c     .............T.4
  40ff48:	25170116 0319a018 891bf01a 18290322     ...%........".).
  40ff58:	012cf82b f032a031 b43ac433 60043f36     +.,.1.2.3.:.6?.`
  40ff68:	0f3d8027 403f803e 6a417f40 e5442942     '.=.>.?@@.AjB)D.
  40ff78:	02474145 a14a6449 1a4c704b 134e504d     EAG.IdJ.KpL.MPN.
  40ff88:	88670064 38141a68 30253c24 97507226     d.g.h..8$<%0&rP.
  40ff98:	00527e51 00200053 14382321 555600e9     Q~R.S. .!#8...VU
  40ffa8:	ff58ff57 045fff59 ff1300ec 3f817f80     W.X.Y._........?
  40ffb8:	01833282 70841138 03860085 05880187     .2..8..p........
  40ffc8:	308d3089 3093858f 30998595 089c859b     .0.0...0...0....
  40ffd8:	239e129d 55a0459f 72a264a1 8ba47fa3     ...#.E.U.d.r....
  40ffe8:	a7a695a5 cba8b5a7 ecaadda9 78ce1aab     ...............x
  40fff8:	0ad06ecf 84d20cd1 1ed490d3 1f5b245a     .n..........Z$[.
  410008:	605d885c ffbe6eac 283100bf 00343c32     \.]`.n....1(2<4.
  410018:	00123f82 00533f36 891b0033 02280322     .?..6?S.3...".(.
  410028:	ffff00d9                                ....

0041002c <OV7740_QVGA_YUV422_30FPS>:
  41002c:	8012000e 001305fe 00120111 d40c10d5     ................
  41003c:	0116340d a0182517 f01a0319 0322891b     .4...%........".
  41004c:	f82b1829 a031012c c433f032 3f36b43a     ).+.,.1.2.3.:.6?
  41005c:	80276004 803e0f3d 7f40403f 29426a41     .`'.=.>.?@@.AjB)
  41006c:	4145e544 64490247 704ba14a 504d1a4c     D.EAG.IdJ.KpL.MP
  41007c:	0064134e 1a688867 3c243814 72263025     N.d.g.h..8$<%0&r
  41008c:	7e519750 00530052 23210020 00e91438     P.Q~R.S. .!#8...
  41009c:	ff575556 ff59ff58 00ec045f 7f80ff13     VUW.X.Y._.......
  4100ac:	32823f81 11380183 03860085 05880187     .?.2..8.........
  4100bc:	308d3089 3093858f 30998595 089c859b     .0.0...0...0....
  4100cc:	239e129d 55a0459f 72a264a1 8ba47fa3     ...#.E.U.d.r....
  4100dc:	a7a695a5 cba8b5a7 ecaadda9 78ce1aab     ...............x
  4100ec:	0ad06ecf 84d20cd1 1ed490d3 1f5b245a     .n..........Z$[.
  4100fc:	605d885c ffbe6eac 503100bf 3f827832     \.]`.n....1P2x.?
  41010c:	3f360012 c4330053 0322891b ffff0228     ..6?S.3...".(...

0041011c <p_uc_charset10x14>:
	...
  410138:	ccffccff 00000000 00000000 00000000     ................
  410148:	00f000f0 00000000 00f000f0 00000000     ................
  410158:	c00cc00c fcfffcff c00cc00c fcfffcff     ................
  410168:	c00cc00c 701e600c 3033303f fcfffcff     .....`.p?030....
  410178:	f0333033 c018e039 0cf00060 f0603cf0     303.9...`....<`.
  410188:	000fc003 3cf0183c 18003cc0 f87ff03c     ....<..<.<..<...
  410198:	8cc71cc3 ecdccccf 30307878 cc00fc00     ........xx00....
  4101a8:	00000000 00440000 00f800ec 00000070     ......D.....p...
	...
  4101c0:	f03fc00f 18607878 0cc00cc0 00000000     ..?.xx`.........
  4101d0:	00000000 0cc00cc0 78781860 c00ff03f     ........`.xx?...
  4101e0:	00000000 e00e600c 8003c007 f83ff83f     .....`......?.?.
  4101f0:	c0078003 600ce00e 00030003 00030003     .......`........
  410200:	f03ff03f 00030003 00030003 ec004400     ?.?..........D..
  410210:	7000f800 00000000 00000000 00000000     ...p............
  410220:	00030003 00030003 00030003 00030003     ................
  410230:	00030003 3c001800 18003c00 00000000     .......<.<......
	...
  410248:	0c000000 f0003c00 000fc003 00f0003c     .....<......<...
  410258:	000000c0 f87ff03f ccc1fce0 0cc78cc3     ....?...........
  410268:	1cfc0cce f03ff87f 00000000 0c700c30     ......?.....0.p.
  410278:	fcfffcff 0c000c00 00000000 1c700c30     ............0.p.
  410288:	7cc03ce0 ccc1ecc0 0ce78cc3 0c3c0c7e     .<.|........~.<.
  410298:	38703030 0cc01ce0 0cc30cc0 1ce30cc3     00p8............
  4102a8:	f03cf87f c007c003 c01cc00e c070c038     ..<.........8.p.
  4102b8:	fcfffcff c000c000 38fc30fc 0ccc1ccc     .........0.8....
  4102c8:	0ccc0ccc 1cce0ccc f0c3f8c7 f87ff03f     ............?...
  4102d8:	0cc31ce3 0cc30cc3 9ce30cc3 f030f871     ............q.0.
  4102e8:	00c000c0 00c000c0 fcc7fcc3 00dc00ce     ................
  4102f8:	00f000f8 f87ff03c 0cc39ce7 0cc30cc3     ....<...........
  410308:	9ce70cc3 f03cf87f 007e003c 0cc30ce7     ......<.<.~.....
  410318:	38c31cc3 e0e770c3 803fc07f 00000000     ...8.p....?.....
  410328:	60180000 f03cf03c 00006018 00000000     ...`<.<..`......
  410338:	00000000 44180000 f83cec3c 00007018     .......D<.<..p..
  410348:	00000000 00030000 c00f8007 7038e01c     ..............8p
  410358:	1ce03870 00000cc0 c00cc00c c00cc00c     p8..............
  410368:	c00cc00c c00cc00c c00cc00c 0cc00000     ................
  410378:	38701ce0 e01c7038 8007c00f 00000003     ..p88p..........
  410388:	00700030 00c000e0 ecc3ecc1 00e600c3     0.p.............
  410398:	003c007e f871f030 0cc39ce3 fcc3fcc3     ~.<.0.q.........
  4103a8:	1ce00cc0 f03ff87f fc7ffc3f c0c0c0e0     ......?.?.......
  4103b8:	c0c0c0c0 c0e0c0c0 fc3ffc7f fcfffcff     ..........?.....
  4103c8:	0cc30cc3 0cc30cc3 9ce70cc3 f03cf87f     ..............<.
  4103d8:	f87ff03f 0cc01ce0 0cc00cc0 1ce00cc0     ?...............
  4103e8:	30303870 fcfffcff 0cc00cc0 0cc00cc0     p800............
  4103f8:	1ce00cc0 f03ff87f fcfffcff 0cc30cc3     ......?.........
  410408:	0cc30cc3 0cc30cc3 0cc00cc0 fcfffcff     ................
  410418:	00c300c3 00c300c3 00c300c3 00c000c0     ................
  410428:	f87ff03f 0cc01ce0 0cc30cc0 1ce30cc3     ?...............
  410438:	f033f873 fcfffcff 00030003 00030003     s.3.............
  410448:	00030003 fcfffcff 00000000 0cc00cc0     ................
  410458:	fcfffcff 0cc00cc0 00000000 38003000     .............0.8
  410468:	0cc01cc0 1cc00cc0 f0fff8ff 00c000c0     ................
  410478:	fcfffcff 80078007 e01cc00f 38707038     ............8pp8
  410488:	0cc01ce0 fcfffcff 0c000c00 0c000c00     ................
  410498:	0c000c00 0c000c00 fcfffcff 00380070     ............p.8.
  4104a8:	001f001f 00700038 fcfffcff fcfffcff     ....8.p.........
  4104b8:	000e001c 80030007 e000c001 fcfffcff     ................
  4104c8:	f87ff03f 0cc01ce0 0cc00cc0 1ce00cc0     ?...............
  4104d8:	f03ff87f fcfffcff 00c300c3 00c300c3     ..?.............
  4104e8:	00e700c3 003c007e f87ff03f 0cc01ce0     ....~.<.?.......
  4104f8:	ecc0ccc0 38e07cc0 ec3ffc7f fcfffcff     .....|.8..?.....
  410508:	80c300c3 c0c380c3 70e7c0c3 1c3c3c7e     ...........p~<<.
  410518:	1c7e183c 0cc30ce7 0cc30cc3 9cc30cc3     <.~.............
  410528:	f060f8e1 00c000c0 00c000c0 fcfffcff     ..`.............
  410538:	00c000c0 00c000c0 f8fff0ff 0c001c00     ................
  410548:	0c000c00 1c000c00 f0fff8ff e0ffc0ff     ................
  410558:	38007000 1c001c00 70003800 c0ffe0ff     .p.8.....8.p....
  410568:	f8fff0ff 3c001c00 f800f800 1c003c00     .......<.....<..
  410578:	f0fff8ff 7cf83cf0 c00fe01c 80078007     .....<.|........
  410588:	e01cc00f 3cf07cf8 00fe00fc 80030007     .....|.<........
  410598:	fc01fc01 00078003 00fc00fe 7cc03cc0     .............<.|
  4105a8:	ccc1ecc0 0cc78cc3 0cdc0cce 0cf00cf8     ................
  4105b8:	00000000 fcfffcff 0cc00cc0 00000cc0     ................
  4105c8:	00000000 00300030 000c000c 00030003     ....0.0.........
  4105d8:	c000c000 30003000 00000000 0cc00cc0     .....0.0........
  4105e8:	fcff0cc0 0000fcff 00000000 001c000c     ................
  4105f8:	00700038 00e000e0 00380070 000c001c     8.p.....p.8.....
  410608:	0c000c00 0c000c00 0c000c00 0c000c00     ................
  410618:	0c000c00 00000000 00e000c0 00380070     ............p.8.
  410628:	00000018 00000000 78063000 cc0cfc0e     .........0.x....
  410638:	cc0ccc0c cc0ecc0c f803fc07 fcfffcff     ................
  410648:	0c030c03 0c030c03 9c030c03 f000f801     ................
  410658:	f807f003 0c0c1c0e 0c0c0c0c 1c0e0c0c     ................
  410668:	30033807 f801f000 0c039c03 0c030c03     .8.0............
  410678:	0c030c03 fcfffcff f807f003 cc0cdc0e     ................
  410688:	cc0ccc0c dc0ecc0c 9003d807 00030000     ................
  410698:	fc7ffc3f 00e300e3 00300070 00000000     ?.......p.0.....
  4106a8:	9c071803 cc0ccc0f cc0ccc0c dc0ccc0c     ................
  4106b8:	f007f80f fcfffcff 00030003 00030003     ................
  4106c8:	fc018003 0000fc00 00000000 00000000     ................
  4106d8:	fc1bfc1b 00000000 00000000 30000000     ...............0
  4106e8:	1c003800 0c000c00 f8cf1c00 0000f0cf     .8..............
  4106f8:	fcff0000 e000fcff f003e001 1c0e3807     .............8..
  410708:	00000c0c 00000000 0cc00cc0 fcfffcff     ................
  410718:	0c000c00 00000000 fc0ffc0f 0007000e     ................
  410728:	c003c003 000e0007 fc0ffc0f fc0ffc0f     ................
  410738:	00070003 000c000e 000e000c fc03fc07     ................
  410748:	f807f003 0c0c1c0e 0c0c0c0c 1c0e0c0c     ................
  410758:	f003f807 fc0ffc0f c00cc00c c00cc00c     ................
  410768:	c00fc00c 00038007 80070003 c00cc00f     ................
  410778:	c00cc00c c00cc00c fc0ffc0f fc0ffc0f     ................
  410788:	00078003 000c000e 000e000c 00030007     ................
  410798:	9c071803 cc0ccc0f cc0ccc0c fc0ccc0c     ................
  4107a8:	3006780e 000c0000 f0ff000c 1c0cf8ff     .x.0............
  4107b8:	380c1c0c 0000300c f80ff00f 0c001c00     ...8.0..........
  4107c8:	0c000c00 1c000c00 f00ff80f e00fc00f     ................
  4107d8:	38007000 1c001c00 70003800 c00fe00f     .p.8.....8.p....
  4107e8:	f80ff00f 1c001c00 f800f800 1c001c00     ................
  4107f8:	f00ff80f 1c0e0c0c f0033807 e001e001     .........8......
  410808:	3807f003 0c0c1c0e 000e000c 9c030c07     ...8............
  410818:	f001f801 00078003 000c000e 1c0c0c0c     ................
  410828:	7c0c3c0c cc0dec0c 0c0f8c0f 0c0c0c0e     .<.|............
  410838:	00030000 f03f8007 1ce0f87c 0cc00cc0     ......?.|.......
  410848:	00000cc0 0c030c03 fc7ffc3f 0cc30ce3     ........?.......
  410858:	0ce00cc0 0c300c70 0cc00000 0cc00cc0     ....p.0.........
  410868:	f87c1ce0 8007f03f 00000003 00c000c0     ..|.?...........
  410878:	00c000c0 00c000c0 00c000c0 00c000c0     ................
  410888:	fcfffcff fcfffcff fcfffcff fcfffcff     ................
  410898:	fcfffcff 74697845 20676e69 68746977     ....Exiting with
  4108a8:	61747320 20737574 0a2e6425 00000000      status %d......

004108b8 <__func__.6361>:
  4108b8:	696c6176 65746164 6568635f 75736b63     validate_checksu
  4108c8:	0000006d                                m...

004108cc <__func__.6378>:
  4108cc:	74736f70 636f7270 5f737365 00000063     postprocess_c...

004108dc <lo_offset>:
  4108dc:	1ffff0ff fffff2ff 3fffffff 6ffff5f4     ...........?...o
  4108ec:	ffffffff 2ffff1f0 ffffffff 4f3fffff     ......./......?O
  4108fc:	f2f10fff f4ff3fff 89f7f6f5 fcffabff     .....?..........
  41090c:	1f0fffff 7ff64523 ffffffff aff9fff8     ....#E..........
  41091c:	2ffff1f0 fffff3ff 89675f4f cdffbffa     .../....O_g.....
  41092c:	3ff2f1f0 ffff56f4 8f7fffff dfbcff9a     ...?.V..........
  41093c:	fff21f0f ffff3fff 6ff5fff4 ffffffff     .....?.....o....
  41094c:	ff231f0f ffff6f45 9ff8fff7 ffffffff     ..#.Eo..........

0041095c <__func__.6277>:
  41095c:	656c6572 5f657361 6b636f6c 00000000     release_lock....

0041096c <__func__.6397>:
  41096c:	74736f70 636f7270 00737365 4e524157     postprocess.WARN
  41097c:	3a474e49 3a732520 203a6425 203a7325     ING: %s:%d: %s: 
  41098c:	65737341 6f697472 2522206e 66202273     Assertion "%s" f
  41099c:	656c6961 090a2e64 3d676973 6f207825     ailed...sig=%x o
  4109ac:	65736666 78253d74 78646920 2078253d     ffset=%x idx=%x 
  4109bc:	65736162 0a78253d 00000000 732f2e2e     base=%x......./s
  4109cc:	412f6372 742f4653 64726968 74726170     rc/ASF/thirdpart
  4109dc:	627a2f79 632f7261 3165646f 632e3832     y/zbar/code128.c
  4109ec:	00000000 65736162 38203c20 00000000     ....base < 8....
  4109fc:	4e524157 3a474e49 3a732520 203a6425     WARNING: %s:%d: 
  410a0c:	203a7325 65737341 6f697472 2522206e     %s: Assertion "%
  410a1c:	66202273 656c6961 090a2e64 3d676973     s" failed...sig=
  410a2c:	6f207825 65736666 78253d74 73616220     %x offset=%x bas
  410a3c:	78253d65 78646920 0a78253d 00000000     e=%x idx=%x.....
  410a4c:	20786469 30203d3c 00303578 4e524157     idx <= 0x50.WARN
  410a5c:	3a474e49 3a732520 203a6425 203a7325     ING: %s:%d: %s: 
  410a6c:	65737341 6f697472 2522206e 66202273     Assertion "%s" f
  410a7c:	656c6961 090a2e64 6b636f6c 2064253d     ailed...lock=%d 
  410a8c:	3d716572 000a6425 732f2e2e 412f6372     req=%d..../src/A
  410a9c:	742f4653 64726968 74726170 627a2f79     SF/thirdparty/zb
  410aac:	692f7261 756c636e 642f6564 646f6365     ar/include/decod
  410abc:	682e7265 00000000 646f6364 6c3e2d65     er.h....dcode->l
  410acc:	206b636f 72203d3d 00007165 4e524157     ock == req..WARN
  410adc:	3a474e49 3a732520 203a6425 203a7325     ING: %s:%d: %s: 
  410aec:	65737341 6f697472 2522206e 66202273     Assertion "%s" f
  410afc:	656c6961 090a2e64 6f6c6c61 78253d63     ailed...alloc=%x
  410b0c:	78646920 2078253d 30253d63 25207832      idx=%x c=%02x %
  410b1c:	00000a73 646f6364 623e2d65 615f6675     s...dcode->buf_a
  410b2c:	636f6c6c 64203e20 65646f63 2d383231     lloc > dcode128-
  410b3c:	6168633e 74636172 00007265 4e524157     >character..WARN
  410b4c:	3a474e49 3a732520 203a6425 203a7325     ING: %s:%d: %s: 
  410b5c:	65737341 6f697472 2522206e 66202273     Assertion "%s" f
  410b6c:	656c6961 090a2e64 3d726964 69207825     ailed...dir=%x i
  410b7c:	2078253d 3d6d7573 61207825 253d6363     =%x sum=%x acc=%
  410b8c:	73252078 0000000a 206d7573 3031203c     x %s....sum < 10
  410b9c:	00000033 20636361 3031203c 00000033     3...acc < 103...
  410bac:	4e524157 3a474e49 3a732520 203a6425     WARNING: %s:%d: 
  410bbc:	203a7325 65737341 6f697472 2522206e     %s: Assertion "%
  410bcc:	66202273 656c6961 090a2e64 3d726964     s" failed...dir=
  410bdc:	25207825 00000a73 646f6364 623e2d65     %x %s...dcode->b
  410bec:	645b6675 65646f63 2d383231 6168633e     uf[dcode128->cha
  410bfc:	74636172 2d207265 205d3120 53203d3d     racter - 1] == S
  410c0c:	5f504f54 00564552 646f6364 623e2d65     TOP_REV.dcode->b
  410c1c:	645b6675 65646f63 2d383231 6168633e     uf[dcode128->cha
  410c2c:	74636172 2d207265 205d3120 53203d3d     racter - 1] == S
  410c3c:	5f504f54 00445746 4e524157 3a474e49     TOP_FWD.WARNING:
  410c4c:	3a732520 203a6425 203a7325 65737341      %s:%d: %s: Asse
  410c5c:	6f697472 2522206e 66202273 656c6961     rtion "%s" faile
  410c6c:	090a2e64 000a7325 65646f63 203d3e20     d...%s..code >= 
  410c7c:	52415453 20415f54 63202626 2065646f     START_A && code 
  410c8c:	53203d3c 54524154 0000435f 4e524157     <= START_C..WARN
  410c9c:	3a474e49 3a732520 203a6425 203a7325     ING: %s:%d: %s: 
  410cac:	65737341 6f697472 2522206e 66202273     Assertion "%s" f
  410cbc:	656c6961 090a2e64 78253d69 253d6a20     ailed...i=%x j=%
  410ccc:	6f632078 253d6564 20783230 72616863     x code=%02x char
  410cdc:	3d746573 63207825 3d707865 25207825     set=%x cexp=%x %
  410cec:	00000a73 6f632821 26206564 38783020     s...!(code & 0x8
  410cfc:	00002930 70786563 00000000 4e524157     0)..cexp....WARN
  410d0c:	3a474e49 3a732520 203a6425 203a7325     ING: %s:%d: %s: 
  410d1c:	65737341 6f697472 2522206e 66202273     Assertion "%s" f
  410d2c:	656c6961 090a2e64 72617473 78253d74     ailed...start=%x
  410d3c:	646e6520 2078253d 78253d69 253d6a20      end=%x i=%x j=%
  410d4c:	73252078 0000000a 646f6364 623e2d65     x %s....dcode->b
  410d5c:	6a5b6675 3d3c205d 27392720 00000000     uf[j] <= '9'....
  410d6c:	65646f63 203d3c20 00000039 4e524157     code <= 9...WARN
  410d7c:	3a474e49 3a732520 203a6425 203a7325     ING: %s:%d: %s: 
  410d8c:	65737341 6f697472 2522206e 66202273     Assertion "%s" f
  410d9c:	656c6961 090a2e64 30253d6a 25207832     ailed...j=%02x %
  410dac:	00000a73 203c206a 646f6364 623e2d65     s...j < dcode->b
  410dbc:	615f6675 636f6c6c 00000000              uf_alloc....

00410dc8 <__func__.6422>:
  410dc8:	61627a5f 65645f72 65646f63 646f635f     _zbar_decode_cod
  410dd8:	38323165 00000000                       e128....

00410de0 <lo_base>:
  410de0:	190c0700 47403224                       ....$2@G

00410de8 <characters>:
  410de8:	2aa1bf5c 2da40cc5 e45f0fe3 a769e86b     \..*...-.._.k.i.
  410df8:	1e51c1e7 8400d983 330dc71f 150eb586     ..Q........3....
  410e08:	11da1087 3718e536 893913cc 8a1b1497     ....6..7..9.....
  410e18:	5ea2bd3a 02b08501 162ca5a3 a612bc88     :..^......,.....
  410e28:	6256e661 a81adb19 cd8b1c32 20c3a91d     a.Vb....2...... 
  410e38:	c05d50c4 532ec62b c2523160 5755c834     .P].+..S`1R.4.UW
  410e48:	c93bce3e 384f546a ca2fcb58              >.;.jTO8X./.

00410e54 <__func__.6311>:
  410e54:	6f636564 6c5f6564 0000006f              decode_lo...

00410e60 <code39_characters>:
  410e60:	33323130 37363534 42413938 46454443     0123456789ABCDEF
  410e70:	4a494847 4e4d4c4b 5251504f 56555453     GHIJKLMNOPQRSTUV
  410e80:	5a595857 24202e2d 2a252b2f              WXYZ-. $/+%*

00410e8c <__func__.6277>:
  410e8c:	656c6572 5f657361 6b636f6c 00000000     release_lock....

00410e9c <__func__.6342>:
  410e9c:	65646f63 705f3933 7074736f 65636f72     code39_postproce
  410eac:	00007373                                ss..

00410eb0 <code39_hi>:
  410eb0:	c8864280 12d08e4a ff97d593 ffff1bd9     .B..J...........
  410ec0:	24e2a05c ff27ffa5 ffff2ae8 ffffff2b     \..$..'..*..+...
  410ed0:	4e524157 3a474e49 3a732520 203a6425     WARNING: %s:%d: 
  410ee0:	203a7325 65737341 6f697472 2522206e     %s: Assertion "%
  410ef0:	66202273 656c6961 090a2e64 78646920     s" failed... idx
  410f00:	2078253d 3d636e65 73207825 78253d39     =%x enc=%x s9=%x
  410f10:	0000000a 732f2e2e 412f6372 742f4653     ....../src/ASF/t
  410f20:	64726968 74726170 627a2f79 632f7261     hirdparty/zbar/c
  410f30:	3365646f 00632e39 20786469 7830203c     ode39.c.idx < 0x
  410f40:	00006332 4e524157 3a474e49 3a732520     2c..WARNING: %s:
  410f50:	203a6425 203a7325 65737341 6f697472     %d: %s: Assertio
  410f60:	2522206e 66202273 656c6961 090a2e64     n "%s" failed...
  410f70:	30253d69 25207832 00000a73 203c2069     i=%02x %s...i < 
  410f80:	646f6364 623e2d65 615f6675 636f6c6c     dcode->buf_alloc
  410f90:	00000000 4e524157 3a474e49 3a732520     ....WARNING: %s:
  410fa0:	203a6425 203a7325 65737341 6f697472     %d: %s: Assertio
  410fb0:	2522206e 66202273 656c6961 090a2e64     n "%s" failed...
  410fc0:	30253d63 73207832 78253d39 0000000a     c=%02x s9=%x....
  410fd0:	203c2063 63327830 00000000              c < 0x2c....

00410fdc <code39_encodings>:
  410fdc:	0d201a07 17130310 231d1622 1c050d19     .. ....."..#....
  410fec:	07250613 272a2a0c 340e0431 15430f00     ..%..**'1..4..C.
  410ffc:	261c4625 4c080b49 19520912 000f582b     %F.&I..L..R.+X..
  41100c:	64110261 06701209 16248513 9128298a     a..d..p...$..)(.
  41101c:	2b941821 2928a219 c12a27a8 26c41b1f     !..+..().'*....&
  41102c:	1d23d01c 061e1403 0a091f1b 02110c01     ..#.............
  41103c:	18211812 0121040e 0b08240a 420d0530     ..!...!..$..0..B
  41104c:	0c482416 10036007 84141e81 22901525     .$H..`......%.."
  41105c:	1a20c017                                .. .

00411060 <__func__.6366>:
  411060:	61627a5f 65645f72 65646f63 646f635f     _zbar_decode_cod
  411070:	00393365                                e39.

00411074 <__func__.6311>:
  411074:	65646f63 645f3933 646f6365 00003965     code39_decode9..

00411084 <__func__.6277>:
  411084:	656c6572 5f657361 6b636f6c 00000000     release_lock....

00411094 <all.6380>:
  411094:	0002000d 00080005 0009000c 000e000a     ................
  4110a4:	00220019 00260023 005d0027 00400080     ..".#.&.'.]...@.
  4110b4:	00000039 00000020 5b667562 78343025     9... ...buf[%04x
  4110c4:	00003d5d 30257325 00007832              ]=..%s%02x..

004110d0 <__func__.6186>:
  4110d0:	6f636564 00346564                       decode4.

004110d8 <parity_decode>:
  4110d8:	0ffffff0 f32f1fff f87f4fff fff6f95f     ....../..O.._...
  4110e8:	f59f6fff fff4f78f fff1f23f 0fffffff     .o......?.......

004110f8 <digits>:
  4110f8:	13041006 05110819 15071209 03140016     ................
  411108:	17020118 4e524157 3a474e49 3a732520     ....WARNING: %s:
  411118:	203a6425 203a7325 65737341 6f697472     %d: %s: Assertio
  411128:	2522206e 66202273 656c6961 090a2e64     n "%s" failed...
  411138:	65646f63 3230253d 31652078 2078253d     code=%02x e1=%x 
  411148:	253d3265 34732078 2078253d 6f6c6f63     e2=%x s4=%x colo
  411158:	78253d72 0000000a 732f2e2e 412f6372     r=%x....../src/A
  411168:	742f4653 64726968 74726170 627a2f79     SF/thirdparty/zb
  411178:	652f7261 632e6e61 00000000 65646f63     ar/ean.c....code
  411188:	30203c20 00343178 4e524157 3a474e49      < 0x14.WARNING:
  411198:	3a732520 203a6425 203a7325 65737341      %s:%d: %s: Asse
  4111a8:	6f697472 2522206e 66202273 656c6961     rtion "%s" faile
  4111b8:	090a2e64 78253d69 253d6420 68632078     d...i=%x d=%x ch
  4111c8:	78253d6b 0a732520 00000000 203c2064     k=%x %s.....d < 
  4111d8:	00003031 4e524157 3a474e49 3a732520     10..WARNING: %s:
  4111e8:	203a6425 203a7325 65737341 6f697472     %d: %s: Assertio
  4111f8:	2522206e 66202273 656c6961 090a2e64     n "%s" failed...
  411208:	3d6b6863 6e207825 2078253d 00007325     chk=%x n=%x %s..
  411218:	206b6863 3031203c 00000000 4e524157     chk < 10....WARN
  411228:	3a474e49 3a732520 203a6425 203a7325     ING: %s:%d: %s: 
  411238:	65737341 6f697472 2522206e 66202273     Assertion "%s" f
  411248:	656c6961 090a2e64 78253d6e 253d6420     ailed...n=%x d=%
  411258:	68632078 78253d6b 0a732520 00000000     x chk=%x %s.....
  411268:	4e524157 3a474e49 3a732520 203a6425     WARNING: %s:%d: 
  411278:	203a7325 65737341 6f697472 2522206e     %s: Assertion "%
  411288:	66202273 656c6961 090a2e64 78253d77     s" failed...w=%x
  411298:	253d6420 68632078 78253d6b 0a732520      d=%x chk=%x %s.
  4112a8:	00000000                                ....

004112ac <__func__.6268>:
  4112ac:	6e627369 635f3031 5f636c61 63656863     isbn10_calc_chec
  4112bc:	6d75736b 00000000                       ksum....

004112c4 <__func__.6257>:
  4112c4:	5f6e6165 69726576 635f7966 6b636568     ean_verify_check
  4112d4:	006d7573                                sum.

004112d8 <__func__.6282>:
  4112d8:	61627a5f 65725f72 746e6366 00000000     _zbar_refcnt....
  4112e8:	732f2e2e 412f6372 742f4653 64726968     ../src/ASF/third
  4112f8:	74726170 627a2f79 692f7261 756c636e     party/zbar/inclu
  411308:	722f6564 6e636665 00682e74 3e206372     de/refcnt.h.rc >
  411318:	0030203d 732f2e2e 412f6372 742f4653     = 0.../src/ASF/t
  411328:	64726968 74726170 627a2f79 692f7261     hirdparty/zbar/i
  411338:	6567616d 0000632e 2d676d69 6665723e     mage.c..img->ref
  411348:	00746e63 2d747364 7461643e 00000061     cnt.dst->data...
  411358:	252e7325 2e73342e 676d697a 00000000     %s.%.4s.zimg....
  411368:	252e7325 786c3830 6d697a2e 00000067     %s.%08lx.zimg...
  411378:	203c206e 206e656c 0031202d 203a7325     n < len - 1.%s: 
  411388:	706d7564 20676e69 73342e25 38302528     dumping %.4s(%08
  411398:	2029786c 67616d69 6f742065 0a732520     lx) image to %s.
  4113a8:	00000000 00000077                       ....w...

004113b0 <__func__.6466>:
  4113b0:	7261627a 616d695f 665f6567 5f656572     zbar_image_free_
  4113c0:	61746164 00000000                       data....

004113c8 <__func__.6940>:
  4113c8:	626d7973 685f6c6f 6c646e61 00007265     symbol_handler..

004113d8 <__func__.6953>:
  4113d8:	706d7564 6174735f 00007374 732f2e2e     dump_stats..../s
  4113e8:	412f6372 742f4653 64726968 74726170     rc/ASF/thirdpart
  4113f8:	627a2f79 692f7261 735f676d 6e6e6163     y/zbar/img_scann
  411408:	632e7265 00000000 6e637369 65723e2d     er.c....iscn->re
  411418:	6c637963 5d695b65 79736e2e 0000736d     cycle[i].nsyms..
  411428:	2d6d7973 7461643e 6c615f61 00636f6c     sym->data_alloc.
  411438:	2d6d7973 7461643e 00000061 6d797321     sym->data...!sym
  411448:	79733e2d 0000736d 65707974 203d2120     ->syms..type != 
  411458:	5241425a 4352515f 0045444f 203a7325     ZBAR_QRCODE.%s: 
  411468:	74726170 206c6169 626d7973 40206c6f     partial symbol @
  411478:	2c642528 0a296425 00000000 203a7325     (%d,%d).....%s: 
  411488:	20707564 626d7973 40206c6f 2c642528     dup symbol @(%d,
  411498:	3a296425 70756420 3a732520 322e2520     %d): dup %s: %.2
  4114a8:	000a7330 203a7325 2077656e 626d7973     0s..%s: new symb
  4114b8:	40206c6f 2c642528 3a296425 3a732520     ol @(%d,%d): %s:
  4114c8:	322e2520 000a7330 203a7325 626d7973      %.20s..%s: symb
  4114d8:	73206c6f 20737465 6f6c6c61 65746163     ol sets allocate
  4114e8:	20202064 2d25203d 000a6434 203a7325     d   = %-4d..%s: 
  4114f8:	20202020 6e616373 2072656e 736d7973         scanner syms
  411508:	206e6920 20657375 2d25203d 72096434      in use = %-4d.r
  411518:	63796365 2064656c 25203d20 0a64342d     ecycled  = %-4d.
  411528:	00000000 203a7325 20202020 67616d69     ....%s:     imag
  411538:	79732065 6920736d 7375206e 20202065     e syms in use   
  411548:	2d25203d 72096434 63796365 2064656c     = %-4d.recycled 
  411558:	25203d20 0a64342d 00000000 203a7325      = %-4d.....%s: 
  411568:	626d7973 20736c6f 6f6c6c61 65746163     symbols allocate
  411578:	20202064 20202020 2d25203d 000a6434     d       = %-4d..
  411588:	203a7325 20202020 63657220 656c6379     %s:      recycle
  411598:	64255b64 2020205d 20202020 25203d20     d[%d]        = %
  4115a8:	0a64342d 00000000 20317863 77203d3c     -4d.....cx1 <= w
  4115b8:	00000000 20317963 68203d3c 00000000     ....cy1 <= h....
  4115c8:	64726f62 3c207265 0068203d 203a7325     border <= h.%s: 
  4115d8:	5f676d69 203a2b78 64343025 3430252c     img_x+: %04d,%04
  4115e8:	25402064 00000a70 3d3d2070 74616420     d @%p...p == dat
  4115f8:	202b2061 202b2078 202a2079 746e6928     a + x + y * (int
  411608:	5f727470 00772974 203a7325 5f676d69     ptr_t)w.%s: img_
  411618:	203a2d78 64343025 3430252c 25402064     x-: %04d,%04d @%
  411628:	00000a70 64726f62 3c207265 0077203d     p...border <= w.
  411638:	203a7325 5f676d69 203a2b79 64343025     %s: img_y+: %04d
  411648:	3430252c 25402064 00000a70 203a7325     ,%04d @%p...%s: 
  411658:	5f676d69 203a2d79 64343025 3430252c     img_y-: %04d,%04
  411668:	25402064 00000a70 006e6165 6f646461     d @%p...ean.addo
  411678:	0000006e                                n...

0041167c <__func__.7009>:
  41167c:	7261627a 6163735f 6d695f6e 00656761     zbar_scan_image.

0041168c <__func__.6903>:
  41168c:	61627a5f 6d695f72 5f656761 6e616373     _zbar_image_scan
  41169c:	5f72656e 6f6c6c61 79735f63 0000006d     ner_alloc_sym...

004116ac <__func__.6517>:
  4116ac:	61627a5f 65725f72 746e6366 00000000     _zbar_refcnt....

004116bc <__func__.6872>:
  4116bc:	61627a5f 6d695f72 5f656761 6e616373     _zbar_image_scan
  4116cc:	5f72656e 79636572 5f656c63 736d7973     ner_recycle_syms
  4116dc:	00000000                                ....

004116e0 <__func__.6149>:
  4116e0:	61627a5f 65725f72 746e6366 00000000     _zbar_refcnt....

004116f0 <CSWTCH.37>:
  4116f0:	00411a9c 0041190c 0041190c 00411aa4     ..A...A...A...A.
  411700:	0041190c 0041190c 00411aac 00411ab4     ..A...A...A...A.
  411710:	00411abc 0041190c 00411ac4 00411acc     ..A...A...A...A.
  411720:	00411ad4 00411adc 0041190c 0041190c     ..A...A...A...A.
  411730:	0041190c 0041190c 0041190c 0041190c     ..A...A...A...A.
  411740:	0041190c 0041190c 0041190c 00411ae8     ..A...A...A...A.
  411750:	0041190c 0041190c 0041190c 0041190c     ..A...A...A...A.
  411760:	0041190c 0041190c 0041190c 0041190c     ..A...A...A...A.
  411770:	00411af0 00411af8 0041190c 0041190c     ..A...A...A...A.
  411780:	00411b04 00411b0c 0041190c 0041190c     ..A...A...A...A.
  411790:	0041190c 0041190c 0041190c 0041190c     ..A...A...A...A.
  4117a0:	0041190c 0041190c 0041190c 0041190c     ..A...A...A...A.
  4117b0:	0041190c 0041190c 0041190c 0041190c     ..A...A...A...A.
  4117c0:	0041190c 0041190c 0041190c 00411b14     ..A...A...A...A.
  4117d0:	0041190c 0041190c 0041190c 0041190c     ..A...A...A...A.
  4117e0:	0041190c 0041190c 00411b1c 0041190c     ..A...A...A...A.
  4117f0:	0041190c 0041190c 0041190c 0041190c     ..A...A...A...A.
  411800:	0041190c 0041190c 0041190c 0041190c     ..A...A...A...A.
  411810:	0041190c 0041190c 0041190c 0041190c     ..A...A...A...A.
  411820:	0041190c 0041190c 0041190c 0041190c     ..A...A...A...A.
  411830:	0041190c 0041190c 0041190c 0041190c     ..A...A...A...A.
  411840:	0041190c 0041190c 0041190c 0041190c     ..A...A...A...A.
  411850:	0041190c 0041190c 0041190c 00411b24     ..A...A...A.$.A.
  411860:	0041190c 0041190c 0041190c 0041190c     ..A...A...A...A.
  411870:	0041190c 0041190c 0041190c 0041190c     ..A...A...A...A.
  411880:	0041190c 0041190c 0041190c 0041190c     ..A...A...A...A.
  411890:	0041190c 0041190c 0041190c 0041190c     ..A...A...A...A.
  4118a0:	0041190c 0041190c 0041190c 0041190c     ..A...A...A...A.
  4118b0:	0041190c 0041190c 0041190c 0041190c     ..A...A...A...A.
  4118c0:	0041190c 0041190c 0041190c 0041190c     ..A...A...A...A.
  4118d0:	0041190c 0041190c 0041190c 0041190c     ..A...A...A...A.
  4118e0:	0041190c 0041190c 00411b2c              ..A...A.,.A.

004118ec <hash.6254>:
  4118ec:	11100100 0c1611ff ff080605 12070304     ................
  4118fc:	ffffffff 02ffffff 0c1200ff 000a1d0b     ................
  41190c:	4e4b4e55 004e574f 42414e45 0000454c     UNKNOWN.ENABLE..
  41191c:	5f444441 43454843 0000004b 54494d45     ADD_CHECK...EMIT
  41192c:	4548435f 00004b43 49435341 00000049     _CHECK..ASCII...
  41193c:	5f4e494d 004e454c 5f58414d 004e454c     MIN_LEN.MAX_LEN.
  41194c:	45434e55 49415452 0059544e 49534f50     UNCERTAINTY.POSI
  41195c:	4e4f4954 00000000 45445f58 5449534e     TION....X_DENSIT
  41196c:	00000059 45445f59 5449534e 00000059     Y...Y_DENSITY...
  41197c:	00315347 004d4941 732f2e2e 412f6372     GS1.AIM.../src/A
  41198c:	742f4653 64726968 74726170 627a2f79     SF/thirdparty/zb
  41199c:	732f7261 6f626d79 00632e6c 3e203067     ar/symbol.c.g0 >
  4119ac:	2030203d 67202626 3d3e2031 00003020     = 0 && g1 >= 0..
  4119bc:	6d783f3c 0000006c 6d79733c 206c6f62     <?xml...<symbol 
  4119cc:	65707974 7325273d 75712027 74696c61     type='%s' qualit
  4119dc:	25273d79 6f202764 6e656972 69746174     y='%d' orientati
  4119ec:	273d6e6f 00277325 203e2069 00000030     on='%s'.i > 0...
  4119fc:	3d3c206e 78616d20 006e656c 646f6d20     n <= maxlen. mod
  411a0c:	65696669 273d7372 00000000 00207325     ifiers='....%s .
  411a1c:	00000027 6e6f6320 73676966 0000273d     '... configs='..
  411a2c:	756f6320 273d746e 00276425 61643c3e      count='%d'.><da
  411a3c:	00006174 726f6620 3d74616d 73616227     ta.. format='bas
  411a4c:	27343665 6e656c20 3d687467 27642527     e64' length='%d'
  411a5c:	00000000 3c3e5d5d 7461642f 2f3c3e61     ....]]></data></
  411a6c:	626d7973 003e6c6f 5b213c3e 54414443     symbol>.><![CDAT
  411a7c:	00005b41 00005055 48474952 00000054     A[..UP..RIGHT...
  411a8c:	4e574f44 00000000 5446454c 00000000     DOWN....LEFT....
  411a9c:	2d4e4145 00000032 2d4e4145 00000035     EAN-2...EAN-5...
  411aac:	2d4e4145 00000038 2d435055 00000045     EAN-8...UPC-E...
  411abc:	4e425349 0030312d 2d435055 00000041     ISBN-10.UPC-A...
  411acc:	2d4e4145 00003331 4e425349 0033312d     EAN-13..ISBN-13.
  411adc:	504d4f43 5449534f 00000045 352f3249     COMPOSITE...I2/5
  411aec:	00000000 61746144 00726142 61746144     ....DataBar.Data
  411afc:	2d726142 00707845 61646f43 00726162     Bar-Exp.Codabar.
  411b0c:	45444f43 0039332d 34464450 00003731     CODE-39.PDF417..
  411b1c:	432d5251 0065646f 45444f43 0033392d     QR-Code.CODE-93.
  411b2c:	45444f43 3832312d 00000000              CODE-128....

00411b38 <__func__.6257>:
  411b38:	61627a5f 65675f72 79735f74 6c6f626d     _zbar_get_symbol
  411b48:	7361685f 00000068 7566202c 6974636e     _hash..., functi
  411b58:	203a6e6f 00000000 65737361 6f697472     on: ....assertio
  411b68:	2522206e 66202273 656c6961 66203a64     n "%s" failed: f
  411b78:	20656c69 22732522 696c202c 2520656e     ile "%s", line %
  411b88:	25732564 00000a73 00000043              d%s%s...C...

00411b94 <_global_impure_ptr>:
  411b94:	20000488                                ... 

00411b98 <zeroes.6911>:
  411b98:	30303030 30303030 30303030 30303030     0000000000000000

00411ba8 <blanks.6910>:
  411ba8:	20202020 20202020 20202020 20202020                     
  411bb8:	00464e49 00666e69 004e414e 006e616e     INF.inf.NAN.nan.
  411bc8:	33323130 37363534 42413938 46454443     0123456789ABCDEF
  411bd8:	00000000 33323130 37363534 62613938     ....0123456789ab
  411be8:	66656463 00000000 6c756e28 0000296c     cdef....(null)..

00411bf8 <zeroes.6869>:
  411bf8:	30303030 30303030 30303030 30303030     0000000000000000

00411c08 <blanks.6868>:
  411c08:	20202020 20202020 20202020 20202020                     

00411c18 <zeroes.6926>:
  411c18:	30303030 30303030 30303030 30303030     0000000000000000

00411c28 <blanks.6925>:
  411c28:	20202020 20202020 20202020 20202020                     
  411c38:	69666e49 7974696e 00000000 004e614e     Infinity....NaN.
  411c48:	49534f50 00000058 0000002e 00000000     POSIX...........

00411c58 <__mprec_tens>:
  411c58:	00000000 3ff00000 00000000 40240000     .......?......$@
  411c68:	00000000 40590000 00000000 408f4000     ......Y@.....@.@
  411c78:	00000000 40c38800 00000000 40f86a00     .......@.....j.@
  411c88:	00000000 412e8480 00000000 416312d0     .......A......cA
  411c98:	00000000 4197d784 00000000 41cdcd65     .......A....e..A
  411ca8:	20000000 4202a05f e8000000 42374876     ... _..B....vH7B
  411cb8:	a2000000 426d1a94 e5400000 42a2309c     ......mB..@..0.B
  411cc8:	1e900000 42d6bcc4 26340000 430c6bf5     .......B..4&.k.C
  411cd8:	37e08000 4341c379 85d8a000 43763457     ...7y.AC....W4vC
  411ce8:	674ec800 43abc16d 60913d00 43e158e4     ..Ngm..C.=.`.X.C
  411cf8:	78b58c40 4415af1d d6e2ef50 444b1ae4     @..x...DP.....KD
  411d08:	064dd592 4480f0cf c7e14af6 44b52d02     ..M....D.J...-.D
  411d18:	79d99db4 44ea7843                       ...yCx.D

00411d20 <p05.5302>:
  411d20:	00000005 00000019 0000007d 00000000     ........}.......

00411d30 <__mprec_bigtens>:
  411d30:	37e08000 4341c379 b5056e17 4693b8b5     ...7y.AC.n.....F
  411d40:	e93ff9f5 4d384f03 f9301d32 5a827748     ..?..O8M2.0.Hw.Z
  411d50:	7f73bf3c 75154fdd 8101b108 8400b0b0     <.s..O.u........
  411d60:	00000000 8101b108 8400b0b0 00000000     ................

00411d70 <_init>:
  411d70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  411d72:	bf00      	nop
  411d74:	bcf8      	pop	{r3, r4, r5, r6, r7}
  411d76:	bc08      	pop	{r3}
  411d78:	469e      	mov	lr, r3
  411d7a:	4770      	bx	lr

00411d7c <__init_array_start>:
  411d7c:	0040d061 	.word	0x0040d061

00411d80 <__frame_dummy_init_array_entry>:
  411d80:	004000f1                                ..@.

00411d84 <_fini>:
  411d84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  411d86:	bf00      	nop
  411d88:	bcf8      	pop	{r3, r4, r5, r6, r7}
  411d8a:	bc08      	pop	{r3}
  411d8c:	469e      	mov	lr, r3
  411d8e:	4770      	bx	lr

00411d90 <__fini_array_start>:
  411d90:	004000cd 	.word	0x004000cd

Disassembly of section .relocate:

20000000 <portable_delay_cycles>:
RAMFUNC
void portable_delay_cycles(unsigned long n)
{
	UNUSED(n);

	__asm (
20000000:	f3bf 8f5f 	dmb	sy
20000004:	3801      	subs	r0, #1
20000006:	d1fb      	bne.n	20000000 <portable_delay_cycles>
20000008:	4770      	bx	lr
2000000a:	bf00      	nop

2000000c <g_us_cap_rows>:
2000000c:	00f0                                        ..

2000000e <g_us_cap_line>:
2000000e:	0140                                        @.

20000010 <teststring>:
20000010:	dcd9 d9dc dddb d8da dadd dcd8 d6d9 dada     ................
20000020:	dbd8 d6d7 d9da d8d8 d9d8 d6db d9d7 dbd8     ................
20000030:	d4db d8d7 d9d7 d5d9 d7da d5d8 d8d6 d6dc     ................
20000040:	d6d6 d9d6 d5db d7d5 dad7 d5d9 d6d4 dcda     ................
20000050:	d6d9 d5d7 dad8 d8da d5d7 d8d7 dbda d7d6     ................
20000060:	d6d9 d9d9 d9d5 d6db d3d7 d8d5 d4da d6d6     ................
20000070:	d5d4 d4d5 d7d2 d6d6 d5d5 d3d2 a2a6 9aa1     ................
20000080:	9395 4646 4847 4341 aaa2 b3af acab cccf     ..FFGHAC........
20000090:	cdcb cccb 646a 6867 5f62 8d87 9497 9291     ....jdghb_......
200000a0:	d7d4 d7d8 d6d7 d0cd d1d1 d1d0 d1d2 cfd1     ................
200000b0:	cfcf 7f83 767e 6f72 5e5e 6260 6e6c cbc8     ....~vro^^`bln..
200000c0:	cbca cfd1 d4cf d1d3 d1d0 cfcf d2d3 d2d3     ................
200000d0:	ced1 d2d0 d5d1 c5cc c8c9 c8c5 6770 656b     ............pgke
200000e0:	6261 8581 9087 9191 d2d2 d1d2 d1d2 888e     ab..............
200000f0:	7c81 7379 474d 4a49 5149 b8b4 b8b9 c2b8     .|ysMGIJIQ......
20000100:	d0d0 c7ce d7cb cbcd c8cd d6cd 979c 9194     ................
20000110:	8c91 2e32 302e 292a 2223 2724 2625 2527     ..2..0*)#"$'%&'%
20000120:	2829 2425 2220 2626 2020 6b6c 7670 7c7e     )(%$ "&&  lkpv~|
20000130:	c5ca cacc cbcb 8e93 8a93 8285 4343 4848     ............CCHH
20000140:	4e4b aca6 b3af b8b6 ccce c9cc ccca c9cc     KN..............
20000150:	c7ca ceca 9e9d 959d 9391 3331 2f37 302f     ..........137//0
20000160:	2720 2323 2327 2827 2824 2224 221f 201f      '##'#'($($".". 
20000170:	201e 5650 5e5a 6c62 c1be c6c3 c8c8 cdc9     . PVZ^bl........
20000180:	c9cc c8ca cecb cccc cdcf a0a6 9c9d 9295     ................
20000190:	5657 5856 5b58 b3b1 b8b7 c1bb cdd0 cdcc     WVVXX[..........
200001a0:	cecc cbcd cccc cdc9 ccce c9cd cdc9 cfcf     ................
200001b0:	cccf cdcd a7ac 9fa2 949f 5553 5654 595a     ..........SUTVZY
200001c0:	aea7 b3b1 bcb1 b1b9 abb0 a4a6 474a 474b     ............JGKG
200001d0:	4847 847b 8a86 9c92 cec9 c9c9 ccc9 c6c1     GH{.............
200001e0:	c6c6 c9c5 c1c1 bbbe b6b8 676d 585d 4d57     ..........mg]XWM
200001f0:	1c1d 1c1c 1d1d 1f1c 2124 221f 1a1a 1b1b     ........$!."....
20000200:	1b1b 2626 2d2a 372f 9490 9e9a a99e bdbe     ..&&*-/7........
20000210:	bbbb b3b9 5a63 5257 4a4f 605f 7369 8178     ....cZWROJ_`isx.
20000220:	c2c2 c7c6 c9c7 c3c4 bfc2 c5c4 bebe bbbf     ................
20000230:	b9bb 6e74 626d 5c5d 211f 1c20 201f 1d1e     ..tnmb]\.! .. ..
20000240:	1e1e 2120 1d1d 1e1d 1b1d 201c 2522 2923     .. !....... "%#)
20000250:	7f78 8c89 9889 bcbb bebe bbbb 6a6b 6163     x...........kjca
20000260:	4f5a 3f3e 4d46 5954 b3af bcb8 c1c1 aeb3     ZO>?FMTY........
20000270:	a1a6 969e 4d53 4c49 4e51 918b a69d afaf     ....SMILQN......
20000280:	c0c0 bcbe b8ba 656f 565a 4d52 4844 534c     ......oeZVRMDHLS
20000290:	645c b3af bab6 bbbe 989a 898e 7584 3131     \d...........u11
200002a0:	2c2f 262a 1c18 181b 1c18 332d 4037 4f47     /,*&......-37@GO
200002b0:	a69d afa9 bab6 c3c2 c4c3 c7c5 c4c0 c4c6     ................
200002c0:	c5c2 c6c3 c3c5 c3c2 c4c4 c2c5 bdc1 7478     ..............xt
200002d0:	636f 575d 3e3d 4f44 5952 adab bcb1 bdbb     oc]W=>DORY......
200002e0:	a1aa 9797 8791 3943 3436 2e31 1c1d 191b     ......C9641.....
200002f0:	1b17 302b 4139 4c46 a19e b3ac b7b2 c2c5     ..+09AFL........
20000300:	c7c3 c5c3 c5c5 c6c5 c6c4 c6c6 c6c6 c4c1     ................
20000310:	cacb c8c9 c2be 7e85 7278 5f65 5655 6762     .......~xre_UVbg
20000320:	7c70 beba c1c4 c9c3 c6bf c4c6 c4c4 c6c0     p|..............
20000330:	c4c8 c4c3 c6c2 c6c7 c6c5 c4c3 babf b5b8     ................
20000340:	6a73 5b65 4e54 2328 2122 2421 1f1d 241f     sje[TN(#"!!$...$
20000350:	322a 8174 948a a29c c4c3 bdc1 b8b7 6b75     *2t...........uk
20000360:	5f5f 4f55 625f 7e6b 8981 c0c1 c8c2 c9c3     __UO_bk~........
20000370:	bfc0 bfc2 c5c0 bfc1 b9be b5b5 6872 525e     ............rh^R
20000380:	494d 2323 2424 2225 231d 2d25 2e2f 8a7f     MI##$$%".#%-/...
20000390:	9b8d a7a2 c0c4 c6c4 c2c3 c0c1 c2c3 c8c2     ................
200003a0:	bdc2 adb7 9fa3 5760 4350 363d 2124 1f22     ......`WPC=6$!".
200003b0:	1e1f 332f 473f 5b50 a89d b7b4 bfbb c1c3     ../3?GP[........
200003c0:	c3c6 c4c3 bfc3 c2c3 c6c1 c3c5 c2c6 cac2     ................
200003d0:	c1c7 b1be a4a8 565f 4549 3943 726b 8272     ......_VIEC9krr.
200003e0:	9993 c9c4 bcc3 baba 6c72 5a5f 4a4f 5951     ........rl_ZOJQY
200003f0:	715f 827b c6c3 bfc1 c0c9 909e 727a 636f     _q{.........zroc
20000400:	333b 2b29 2b29 2528 2424 2b25 6d5f 8a7c     ;3)+)+(%$$%+_m|.
20000410:	9c96 c6c4 c7c6 c7c8 c6c6 c2c3 c1c2 c6c5     ................
20000420:	c2c2 c4c4 cbcd c9c8 c2c3 8698 7274 5a61     ............traZ
20000430:	4444 4c41 6b55 b7ab c0bc cdc5 acae 92a6     DDALUk..........
20000440:	7f83 4c48 5651 615c aba2 beb4 c2c1 c9cb     ..HLQV\a........
20000450:	c4c5 c6c5 c7c7 c2c0 c8c7 cac8 c5c8 c6c8     ................
20000460:	cbc9 c6ca c7c9 cccc c9c6 c9c9 cdcb cac5     ................
20000470:	c9c7 ccca cbc7 c8c6 cac7 c9cd c9c6 ccc4     ................
20000480:	c6cd cec6                                   ....

20000484 <SystemCoreClock>:
20000484:	0900 003d                                   ..=.

20000488 <impure_data>:
20000488:	0000 0000 0774 2000 07dc 2000 0844 2000     ....t.. ... D.. 
	...
200004bc:	1b90 0041 0000 0000 0000 0000 0000 0000     ..A.............
	...
20000530:	0001 0000 0000 0000 330e abcd 1234 e66d     .........3..4.m.
20000540:	deec 0005 000b 0000 0000 0000 0000 0000     ................
	...

200008b0 <_impure_ptr>:
200008b0:	0488 2000                                   ... 

200008b4 <__malloc_av_>:
	...
200008bc:	08b4 2000 08b4 2000 08bc 2000 08bc 2000     ... ... ... ... 
200008cc:	08c4 2000 08c4 2000 08cc 2000 08cc 2000     ... ... ... ... 
200008dc:	08d4 2000 08d4 2000 08dc 2000 08dc 2000     ... ... ... ... 
200008ec:	08e4 2000 08e4 2000 08ec 2000 08ec 2000     ... ... ... ... 
200008fc:	08f4 2000 08f4 2000 08fc 2000 08fc 2000     ... ... ... ... 
2000090c:	0904 2000 0904 2000 090c 2000 090c 2000     ... ... ... ... 
2000091c:	0914 2000 0914 2000 091c 2000 091c 2000     ... ... ... ... 
2000092c:	0924 2000 0924 2000 092c 2000 092c 2000     $.. $.. ,.. ,.. 
2000093c:	0934 2000 0934 2000 093c 2000 093c 2000     4.. 4.. <.. <.. 
2000094c:	0944 2000 0944 2000 094c 2000 094c 2000     D.. D.. L.. L.. 
2000095c:	0954 2000 0954 2000 095c 2000 095c 2000     T.. T.. \.. \.. 
2000096c:	0964 2000 0964 2000 096c 2000 096c 2000     d.. d.. l.. l.. 
2000097c:	0974 2000 0974 2000 097c 2000 097c 2000     t.. t.. |.. |.. 
2000098c:	0984 2000 0984 2000 098c 2000 098c 2000     ... ... ... ... 
2000099c:	0994 2000 0994 2000 099c 2000 099c 2000     ... ... ... ... 
200009ac:	09a4 2000 09a4 2000 09ac 2000 09ac 2000     ... ... ... ... 
200009bc:	09b4 2000 09b4 2000 09bc 2000 09bc 2000     ... ... ... ... 
200009cc:	09c4 2000 09c4 2000 09cc 2000 09cc 2000     ... ... ... ... 
200009dc:	09d4 2000 09d4 2000 09dc 2000 09dc 2000     ... ... ... ... 
200009ec:	09e4 2000 09e4 2000 09ec 2000 09ec 2000     ... ... ... ... 
200009fc:	09f4 2000 09f4 2000 09fc 2000 09fc 2000     ... ... ... ... 
20000a0c:	0a04 2000 0a04 2000 0a0c 2000 0a0c 2000     ... ... ... ... 
20000a1c:	0a14 2000 0a14 2000 0a1c 2000 0a1c 2000     ... ... ... ... 
20000a2c:	0a24 2000 0a24 2000 0a2c 2000 0a2c 2000     $.. $.. ,.. ,.. 
20000a3c:	0a34 2000 0a34 2000 0a3c 2000 0a3c 2000     4.. 4.. <.. <.. 
20000a4c:	0a44 2000 0a44 2000 0a4c 2000 0a4c 2000     D.. D.. L.. L.. 
20000a5c:	0a54 2000 0a54 2000 0a5c 2000 0a5c 2000     T.. T.. \.. \.. 
20000a6c:	0a64 2000 0a64 2000 0a6c 2000 0a6c 2000     d.. d.. l.. l.. 
20000a7c:	0a74 2000 0a74 2000 0a7c 2000 0a7c 2000     t.. t.. |.. |.. 
20000a8c:	0a84 2000 0a84 2000 0a8c 2000 0a8c 2000     ... ... ... ... 
20000a9c:	0a94 2000 0a94 2000 0a9c 2000 0a9c 2000     ... ... ... ... 
20000aac:	0aa4 2000 0aa4 2000 0aac 2000 0aac 2000     ... ... ... ... 
20000abc:	0ab4 2000 0ab4 2000 0abc 2000 0abc 2000     ... ... ... ... 
20000acc:	0ac4 2000 0ac4 2000 0acc 2000 0acc 2000     ... ... ... ... 
20000adc:	0ad4 2000 0ad4 2000 0adc 2000 0adc 2000     ... ... ... ... 
20000aec:	0ae4 2000 0ae4 2000 0aec 2000 0aec 2000     ... ... ... ... 
20000afc:	0af4 2000 0af4 2000 0afc 2000 0afc 2000     ... ... ... ... 
20000b0c:	0b04 2000 0b04 2000 0b0c 2000 0b0c 2000     ... ... ... ... 
20000b1c:	0b14 2000 0b14 2000 0b1c 2000 0b1c 2000     ... ... ... ... 
20000b2c:	0b24 2000 0b24 2000 0b2c 2000 0b2c 2000     $.. $.. ,.. ,.. 
20000b3c:	0b34 2000 0b34 2000 0b3c 2000 0b3c 2000     4.. 4.. <.. <.. 
20000b4c:	0b44 2000 0b44 2000 0b4c 2000 0b4c 2000     D.. D.. L.. L.. 
20000b5c:	0b54 2000 0b54 2000 0b5c 2000 0b5c 2000     T.. T.. \.. \.. 
20000b6c:	0b64 2000 0b64 2000 0b6c 2000 0b6c 2000     d.. d.. l.. l.. 
20000b7c:	0b74 2000 0b74 2000 0b7c 2000 0b7c 2000     t.. t.. |.. |.. 
20000b8c:	0b84 2000 0b84 2000 0b8c 2000 0b8c 2000     ... ... ... ... 
20000b9c:	0b94 2000 0b94 2000 0b9c 2000 0b9c 2000     ... ... ... ... 
20000bac:	0ba4 2000 0ba4 2000 0bac 2000 0bac 2000     ... ... ... ... 
20000bbc:	0bb4 2000 0bb4 2000 0bbc 2000 0bbc 2000     ... ... ... ... 
20000bcc:	0bc4 2000 0bc4 2000 0bcc 2000 0bcc 2000     ... ... ... ... 
20000bdc:	0bd4 2000 0bd4 2000 0bdc 2000 0bdc 2000     ... ... ... ... 
20000bec:	0be4 2000 0be4 2000 0bec 2000 0bec 2000     ... ... ... ... 
20000bfc:	0bf4 2000 0bf4 2000 0bfc 2000 0bfc 2000     ... ... ... ... 
20000c0c:	0c04 2000 0c04 2000 0c0c 2000 0c0c 2000     ... ... ... ... 
20000c1c:	0c14 2000 0c14 2000 0c1c 2000 0c1c 2000     ... ... ... ... 
20000c2c:	0c24 2000 0c24 2000 0c2c 2000 0c2c 2000     $.. $.. ,.. ,.. 
20000c3c:	0c34 2000 0c34 2000 0c3c 2000 0c3c 2000     4.. 4.. <.. <.. 
20000c4c:	0c44 2000 0c44 2000 0c4c 2000 0c4c 2000     D.. D.. L.. L.. 
20000c5c:	0c54 2000 0c54 2000 0c5c 2000 0c5c 2000     T.. T.. \.. \.. 
20000c6c:	0c64 2000 0c64 2000 0c6c 2000 0c6c 2000     d.. d.. l.. l.. 
20000c7c:	0c74 2000 0c74 2000 0c7c 2000 0c7c 2000     t.. t.. |.. |.. 
20000c8c:	0c84 2000 0c84 2000 0c8c 2000 0c8c 2000     ... ... ... ... 
20000c9c:	0c94 2000 0c94 2000 0c9c 2000 0c9c 2000     ... ... ... ... 
20000cac:	0ca4 2000 0ca4 2000 0cac 2000 0cac 2000     ... ... ... ... 

20000cbc <__malloc_trim_threshold>:
20000cbc:	0000 0002                                   ....

20000cc0 <__malloc_sbrk_base>:
20000cc0:	ffff ffff                                   ....

20000cc4 <lconv>:
20000cc4:	1c50 0041 1480 0041 1480 0041 1480 0041     P.A...A...A...A.
20000cd4:	1480 0041 1480 0041 1480 0041 1480 0041     ..A...A...A...A.
20000ce4:	1480 0041 1480 0041 ffff ffff ffff ffff     ..A...A.........
20000cf4:	ffff ffff ffff 0000                         ........

20000cfc <lc_ctype_charset>:
20000cfc:	5341 4943 0049 0000 0000 0000 0000 0000     ASCII...........
	...

20000d1c <__mb_cur_max>:
20000d1c:	0001 0000                                   ....

20000d20 <__wctomb>:
20000d20:	e98d 0040                                   ..@.
